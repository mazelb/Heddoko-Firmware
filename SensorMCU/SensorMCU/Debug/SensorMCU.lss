
SensorMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f4c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00002f4c  00002f4c  0000af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000098  20000000  00002f54  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000298  20000098  00002fec  00010098  2**2
                  ALLOC
  4 .stack        00000400  20000330  00003284  00010098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00025e99  00000000  00000000  0001011b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003841  00000000  00000000  00035fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000663a  00000000  00000000  000397f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000588  00000000  00000000  0003fe2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010a8  00000000  00000000  000403b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015376  00000000  00000000  0004145f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dd93  00000000  00000000  000567d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bf31  00000000  00000000  00064568  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000ee8  00000000  00000000  000d049c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000730 	.word	0x20000730
       4:	00001f79 	.word	0x00001f79
       8:	00001f75 	.word	0x00001f75
       c:	00001f75 	.word	0x00001f75
	...
      2c:	00001f75 	.word	0x00001f75
	...
      38:	00001f75 	.word	0x00001f75
      3c:	0000206d 	.word	0x0000206d
      40:	00001f75 	.word	0x00001f75
      44:	00001f75 	.word	0x00001f75
      48:	00001f75 	.word	0x00001f75
      4c:	00001f75 	.word	0x00001f75
      50:	000018d5 	.word	0x000018d5
      54:	00001f75 	.word	0x00001f75
      58:	00001f75 	.word	0x00001f75
      5c:	00000000 	.word	0x00000000
      60:	00001f75 	.word	0x00001f75
      64:	0000185d 	.word	0x0000185d
      68:	0000186d 	.word	0x0000186d
      6c:	00000000 	.word	0x00000000
      70:	00001f75 	.word	0x00001f75
      74:	00001f75 	.word	0x00001f75
      78:	00001f75 	.word	0x00001f75
      7c:	00001f75 	.word	0x00001f75
      80:	00001f75 	.word	0x00001f75
      84:	00001f75 	.word	0x00001f75
      88:	00001f75 	.word	0x00001f75

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000098 	.word	0x20000098
      ac:	00000000 	.word	0x00000000
      b0:	00002f54 	.word	0x00002f54

000000b4 <frame_dummy>:
      b4:	b508      	push	{r3, lr}
      b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d003      	beq.n	d4 <frame_dummy+0x20>
      cc:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      ce:	2b00      	cmp	r3, #0
      d0:	d000      	beq.n	d4 <frame_dummy+0x20>
      d2:	4798      	blx	r3
      d4:	bd08      	pop	{r3, pc}
      d6:	46c0      	nop			; (mov r8, r8)
      d8:	00000000 	.word	0x00000000
      dc:	00002f54 	.word	0x00002f54
      e0:	2000009c 	.word	0x2000009c
      e4:	00002f54 	.word	0x00002f54
      e8:	00000000 	.word	0x00000000

000000ec <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
      ec:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
      ee:	4b16      	ldr	r3, [pc, #88]	; (148 <_system_extint_init+0x5c>)
      f0:	2240      	movs	r2, #64	; 0x40
      f2:	6999      	ldr	r1, [r3, #24]
      f4:	b082      	sub	sp, #8
      f6:	430a      	orrs	r2, r1
      f8:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
      fa:	466a      	mov	r2, sp
      fc:	2300      	movs	r3, #0
      fe:	7013      	strb	r3, [r2, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     100:	4669      	mov	r1, sp
     102:	2005      	movs	r0, #5
     104:	4b11      	ldr	r3, [pc, #68]	; (14c <_system_extint_init+0x60>)
     106:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     108:	4b11      	ldr	r3, [pc, #68]	; (150 <_system_extint_init+0x64>)
     10a:	2005      	movs	r0, #5
     10c:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     10e:	4a11      	ldr	r2, [pc, #68]	; (154 <_system_extint_init+0x68>)
     110:	2301      	movs	r3, #1
     112:	7811      	ldrb	r1, [r2, #0]
     114:	430b      	orrs	r3, r1
     116:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     118:	7853      	ldrb	r3, [r2, #1]
     11a:	4c0e      	ldr	r4, [pc, #56]	; (154 <_system_extint_init+0x68>)
     11c:	b25b      	sxtb	r3, r3
     11e:	2b00      	cmp	r3, #0
     120:	dbfa      	blt.n	118 <_system_extint_init+0x2c>
     122:	2240      	movs	r2, #64	; 0x40
     124:	4b0c      	ldr	r3, [pc, #48]	; (158 <_system_extint_init+0x6c>)
     126:	480d      	ldr	r0, [pc, #52]	; (15c <_system_extint_init+0x70>)
     128:	2100      	movs	r1, #0
     12a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     12c:	4b0c      	ldr	r3, [pc, #48]	; (160 <_system_extint_init+0x74>)
     12e:	2210      	movs	r2, #16
     130:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     132:	7822      	ldrb	r2, [r4, #0]
     134:	2302      	movs	r3, #2
     136:	4313      	orrs	r3, r2
     138:	7023      	strb	r3, [r4, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     13a:	7863      	ldrb	r3, [r4, #1]
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     13c:	b25b      	sxtb	r3, r3
     13e:	2b00      	cmp	r3, #0
     140:	dbfb      	blt.n	13a <_system_extint_init+0x4e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     142:	b002      	add	sp, #8
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	40000400 	.word	0x40000400
     14c:	00001d5d 	.word	0x00001d5d
     150:	00001dc1 	.word	0x00001dc1
     154:	40001800 	.word	0x40001800
     158:	00002ed5 	.word	0x00002ed5
     15c:	200002ac 	.word	0x200002ac
     160:	e000e100 	.word	0xe000e100

00000164 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     164:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     166:	2201      	movs	r2, #1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     168:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     16a:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
     16c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     16e:	2302      	movs	r3, #2
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     170:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     172:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     174:	72c3      	strb	r3, [r0, #11]
}
     176:	4770      	bx	lr

00000178 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     178:	b5f0      	push	{r4, r5, r6, r7, lr}
     17a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     17c:	466a      	mov	r2, sp
     17e:	2300      	movs	r3, #0
     180:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     182:	70d3      	strb	r3, [r2, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     184:	684b      	ldr	r3, [r1, #4]

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     186:	1c05      	adds	r5, r0, #0
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     188:	7013      	strb	r3, [r2, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     18a:	7a0b      	ldrb	r3, [r1, #8]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     18c:	7808      	ldrb	r0, [r1, #0]
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     18e:	7093      	strb	r3, [r2, #2]

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     190:	1c0c      	adds	r4, r1, #0
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <extint_chan_set_config+0x74>)
     194:	4669      	mov	r1, sp
     196:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     198:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     19a:	2d1f      	cmp	r5, #31
     19c:	d800      	bhi.n	1a0 <extint_chan_set_config+0x28>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     19e:	4b14      	ldr	r3, [pc, #80]	; (1f0 <extint_chan_set_config+0x78>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1a0:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1a2:	7aa2      	ldrb	r2, [r4, #10]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1a4:	4029      	ands	r1, r5
     1a6:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1a8:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1aa:	2a00      	cmp	r2, #0
     1ac:	d001      	beq.n	1b2 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     1ae:	2208      	movs	r2, #8
     1b0:	4310      	orrs	r0, r2
     1b2:	08ea      	lsrs	r2, r5, #3
     1b4:	0092      	lsls	r2, r2, #2
     1b6:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1b8:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1ba:	270f      	movs	r7, #15
     1bc:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1be:	43be      	bics	r6, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     1c0:	4088      	lsls	r0, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1c2:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1c4:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1c6:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1c8:	7a62      	ldrb	r2, [r4, #9]
     1ca:	2a00      	cmp	r2, #0
     1cc:	d106      	bne.n	1dc <extint_chan_set_config+0x64>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     1ce:	695a      	ldr	r2, [r3, #20]
     1d0:	2101      	movs	r1, #1
     1d2:	40a9      	lsls	r1, r5
     1d4:	438a      	bics	r2, r1
     1d6:	615a      	str	r2, [r3, #20]
	}
}
     1d8:	b003      	add	sp, #12
     1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     1dc:	2101      	movs	r1, #1
     1de:	695a      	ldr	r2, [r3, #20]
     1e0:	40a9      	lsls	r1, r5
     1e2:	1c0d      	adds	r5, r1, #0
     1e4:	4315      	orrs	r5, r2
     1e6:	615d      	str	r5, [r3, #20]
     1e8:	e7f6      	b.n	1d8 <extint_chan_set_config+0x60>
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	00001e99 	.word	0x00001e99
     1f0:	40001800 	.word	0x40001800

000001f4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f6:	464d      	mov	r5, r9
     1f8:	4644      	mov	r4, r8
     1fa:	465f      	mov	r7, fp
     1fc:	4656      	mov	r6, sl
     1fe:	b4f0      	push	{r4, r5, r6, r7}
     200:	4688      	mov	r8, r1
     202:	1c05      	adds	r5, r0, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     204:	6801      	ldr	r1, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     206:	4640      	mov	r0, r8
     208:	8840      	ldrh	r0, [r0, #2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     20a:	2207      	movs	r2, #7
     20c:	4681      	mov	r9, r0
     20e:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     210:	421a      	tst	r2, r3
     212:	d1fc      	bne.n	20e <_i2c_master_write_packet+0x1a>

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
     214:	4642      	mov	r2, r8
     216:	7a53      	ldrb	r3, [r2, #9]
     218:	2b00      	cmp	r3, #0
     21a:	d000      	beq.n	21e <_i2c_master_write_packet+0x2a>
     21c:	e07a      	b.n	314 <_i2c_master_write_packet+0x120>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     21e:	684a      	ldr	r2, [r1, #4]
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <_i2c_master_write_packet+0x17c>)

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     222:	4640      	mov	r0, r8
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     224:	4013      	ands	r3, r2
     226:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     228:	7a03      	ldrb	r3, [r0, #8]
     22a:	2b00      	cmp	r3, #0
     22c:	d064      	beq.n	2f8 <_i2c_master_write_packet+0x104>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     22e:	7a42      	ldrb	r2, [r0, #9]
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     232:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     234:	005b      	lsls	r3, r3, #1
     236:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     238:	2280      	movs	r2, #128	; 0x80
     23a:	0212      	lsls	r2, r2, #8
     23c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     23e:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     240:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     242:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     244:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     246:	2602      	movs	r6, #2
     248:	e007      	b.n	25a <_i2c_master_write_packet+0x66>
     24a:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     24c:	4206      	tst	r6, r0
     24e:	d107      	bne.n	260 <_i2c_master_write_packet+0x6c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     250:	3301      	adds	r3, #1
     252:	8928      	ldrh	r0, [r5, #8]
     254:	b29b      	uxth	r3, r3
     256:	4298      	cmp	r0, r3
     258:	d955      	bls.n	306 <_i2c_master_write_packet+0x112>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     25a:	7e10      	ldrb	r0, [r2, #24]
     25c:	4204      	tst	r4, r0
     25e:	d0f4      	beq.n	24a <_i2c_master_write_packet+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     260:	7e10      	ldrb	r0, [r2, #24]
     262:	2302      	movs	r3, #2
     264:	4203      	tst	r3, r0
     266:	d100      	bne.n	26a <_i2c_master_write_packet+0x76>
     268:	e06e      	b.n	348 <_i2c_master_write_packet+0x154>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     26a:	7613      	strb	r3, [r2, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     26c:	8b52      	ldrh	r2, [r2, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     26e:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     270:	4213      	tst	r3, r2
     272:	d149      	bne.n	308 <_i2c_master_write_packet+0x114>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     274:	2020      	movs	r0, #32
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     276:	2300      	movs	r3, #0
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     278:	2228      	movs	r2, #40	; 0x28
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     27a:	4682      	mov	sl, r0
     27c:	468c      	mov	ip, r1
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     27e:	2707      	movs	r7, #7
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     280:	4693      	mov	fp, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     282:	2001      	movs	r0, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     284:	2602      	movs	r6, #2
     286:	1c19      	adds	r1, r3, #0
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     288:	4549      	cmp	r1, r9
     28a:	d100      	bne.n	28e <_i2c_master_write_packet+0x9a>
     28c:	e06a      	b.n	364 <_i2c_master_write_packet+0x170>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     28e:	4662      	mov	r2, ip
     290:	8b53      	ldrh	r3, [r2, #26]
     292:	4652      	mov	r2, sl
     294:	421a      	tst	r2, r3
     296:	d068      	beq.n	36a <_i2c_master_write_packet+0x176>
     298:	682a      	ldr	r2, [r5, #0]
     29a:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     29c:	421f      	tst	r7, r3
     29e:	d1fc      	bne.n	29a <_i2c_master_write_packet+0xa6>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     2a0:	4642      	mov	r2, r8
     2a2:	6852      	ldr	r2, [r2, #4]
     2a4:	5c53      	ldrb	r3, [r2, r1]
     2a6:	4662      	mov	r2, ip
     2a8:	445a      	add	r2, fp
     2aa:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2ac:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     2ae:	2300      	movs	r3, #0
     2b0:	e007      	b.n	2c2 <_i2c_master_write_packet+0xce>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     2b2:	7e14      	ldrb	r4, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2b4:	4226      	tst	r6, r4
     2b6:	d107      	bne.n	2c8 <_i2c_master_write_packet+0xd4>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     2b8:	3301      	adds	r3, #1
     2ba:	892c      	ldrh	r4, [r5, #8]
     2bc:	b29b      	uxth	r3, r3
     2be:	429c      	cmp	r4, r3
     2c0:	d94d      	bls.n	35e <_i2c_master_write_packet+0x16a>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2c2:	7e14      	ldrb	r4, [r2, #24]
     2c4:	4220      	tst	r0, r4
     2c6:	d0f4      	beq.n	2b2 <_i2c_master_write_packet+0xbe>
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     2c8:	4662      	mov	r2, ip
     2ca:	8b53      	ldrh	r3, [r2, #26]
     2cc:	2204      	movs	r2, #4
     2ce:	3101      	adds	r1, #1
     2d0:	421a      	tst	r2, r3
     2d2:	d0d9      	beq.n	288 <_i2c_master_write_packet+0x94>
     2d4:	4661      	mov	r1, ip
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     2d6:	221e      	movs	r2, #30
				break;
			}
		}

		if (module->send_stop) {
     2d8:	7aab      	ldrb	r3, [r5, #10]
     2da:	1c10      	adds	r0, r2, #0
     2dc:	2b00      	cmp	r3, #0
     2de:	d013      	beq.n	308 <_i2c_master_write_packet+0x114>
     2e0:	682c      	ldr	r4, [r5, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2e2:	2007      	movs	r0, #7
     2e4:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2e6:	4218      	tst	r0, r3
     2e8:	d1fc      	bne.n	2e4 <_i2c_master_write_packet+0xf0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     2ea:	6848      	ldr	r0, [r1, #4]
     2ec:	23c0      	movs	r3, #192	; 0xc0
     2ee:	029b      	lsls	r3, r3, #10
     2f0:	4303      	orrs	r3, r0
     2f2:	604b      	str	r3, [r1, #4]
     2f4:	1c10      	adds	r0, r2, #0
     2f6:	e007      	b.n	308 <_i2c_master_write_packet+0x114>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     2f8:	7a42      	ldrb	r2, [r0, #9]
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     2fa:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     2fc:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     2fe:	005b      	lsls	r3, r3, #1
     300:	4313      	orrs	r3, r2
     302:	624b      	str	r3, [r1, #36]	; 0x24
     304:	e79c      	b.n	240 <_i2c_master_write_packet+0x4c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     306:	2012      	movs	r0, #18
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     308:	bc3c      	pop	{r2, r3, r4, r5}
     30a:	4690      	mov	r8, r2
     30c:	4699      	mov	r9, r3
     30e:	46a2      	mov	sl, r4
     310:	46ab      	mov	fp, r5
     312:	bdf0      	pop	{r4, r5, r6, r7, pc}

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     314:	7a93      	ldrb	r3, [r2, #10]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     316:	6848      	ldr	r0, [r1, #4]
     318:	2280      	movs	r2, #128	; 0x80
     31a:	02d2      	lsls	r2, r2, #11
     31c:	4302      	orrs	r2, r0
     31e:	604a      	str	r2, [r1, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     320:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     322:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     324:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     326:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     328:	2602      	movs	r6, #2
     32a:	e007      	b.n	33c <_i2c_master_write_packet+0x148>
     32c:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     32e:	4206      	tst	r6, r0
     330:	d107      	bne.n	342 <_i2c_master_write_packet+0x14e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     332:	3301      	adds	r3, #1
     334:	8928      	ldrh	r0, [r5, #8]
     336:	b29b      	uxth	r3, r3
     338:	4298      	cmp	r0, r3
     33a:	d902      	bls.n	342 <_i2c_master_write_packet+0x14e>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     33c:	7e10      	ldrb	r0, [r2, #24]
     33e:	4204      	tst	r4, r0
     340:	d0f4      	beq.n	32c <_i2c_master_write_packet+0x138>
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     342:	2301      	movs	r3, #1
     344:	760b      	strb	r3, [r1, #24]
     346:	e76a      	b.n	21e <_i2c_master_write_packet+0x2a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     348:	8b53      	ldrh	r3, [r2, #26]
     34a:	0758      	lsls	r0, r3, #29
     34c:	d400      	bmi.n	350 <_i2c_master_write_packet+0x15c>
     34e:	e791      	b.n	274 <_i2c_master_write_packet+0x80>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     350:	6851      	ldr	r1, [r2, #4]
     352:	23c0      	movs	r3, #192	; 0xc0
     354:	029b      	lsls	r3, r3, #10
     356:	430b      	orrs	r3, r1
     358:	6053      	str	r3, [r2, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     35a:	2018      	movs	r0, #24
     35c:	e7d4      	b.n	308 <_i2c_master_write_packet+0x114>
     35e:	4661      	mov	r1, ip
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     360:	2212      	movs	r2, #18
     362:	e7b9      	b.n	2d8 <_i2c_master_write_packet+0xe4>
     364:	4661      	mov	r1, ip
     366:	2200      	movs	r2, #0
     368:	e7b6      	b.n	2d8 <_i2c_master_write_packet+0xe4>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     36a:	2041      	movs	r0, #65	; 0x41
     36c:	e7cc      	b.n	308 <_i2c_master_write_packet+0x114>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	fffbffff 	.word	0xfffbffff

00000374 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	4644      	mov	r4, r8
     378:	464d      	mov	r5, r9
     37a:	465f      	mov	r7, fp
     37c:	4656      	mov	r6, sl
     37e:	b4f0      	push	{r4, r5, r6, r7}
     380:	4688      	mov	r8, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     382:	6801      	ldr	r1, [r0, #0]
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     384:	b083      	sub	sp, #12
	uint16_t tmp_data_length = packet->data_length;

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     386:	680b      	ldr	r3, [r1, #0]
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     388:	1c05      	adds	r5, r0, #0
	uint16_t tmp_data_length = packet->data_length;

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     38a:	011b      	lsls	r3, r3, #4

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     38c:	4640      	mov	r0, r8

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     38e:	0fdb      	lsrs	r3, r3, #31

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     390:	8844      	ldrh	r4, [r0, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     392:	9301      	str	r3, [sp, #4]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     394:	7a43      	ldrb	r3, [r0, #9]
     396:	2b00      	cmp	r3, #0
     398:	d000      	beq.n	39c <_i2c_master_read_packet+0x28>
     39a:	e076      	b.n	48a <STACK_SIZE+0x8a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     39c:	684a      	ldr	r2, [r1, #4]
     39e:	4b82      	ldr	r3, [pc, #520]	; (5a8 <STACK_SIZE+0x1a8>)
     3a0:	4013      	ands	r3, r2
     3a2:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     3a4:	4642      	mov	r2, r8
     3a6:	7a13      	ldrb	r3, [r2, #8]
     3a8:	2b00      	cmp	r3, #0
     3aa:	d036      	beq.n	41a <STACK_SIZE+0x1a>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3ac:	4640      	mov	r0, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3ae:	7a52      	ldrb	r2, [r2, #9]
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3b0:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3b2:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3b4:	005b      	lsls	r3, r3, #1
     3b6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	0212      	lsls	r2, r2, #8
     3bc:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3be:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3c0:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     3c2:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3c4:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3c6:	2702      	movs	r7, #2
     3c8:	e007      	b.n	3da <_i2c_master_read_packet+0x66>
     3ca:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3cc:	4207      	tst	r7, r0
     3ce:	d107      	bne.n	3e0 <_i2c_master_read_packet+0x6c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     3d0:	3301      	adds	r3, #1
     3d2:	8928      	ldrh	r0, [r5, #8]
     3d4:	b29b      	uxth	r3, r3
     3d6:	4298      	cmp	r0, r3
     3d8:	d94b      	bls.n	472 <STACK_SIZE+0x72>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3da:	7e10      	ldrb	r0, [r2, #24]
     3dc:	4206      	tst	r6, r0
     3de:	d0f4      	beq.n	3ca <_i2c_master_read_packet+0x56>

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     3e0:	684a      	ldr	r2, [r1, #4]
     3e2:	4b71      	ldr	r3, [pc, #452]	; (5a8 <STACK_SIZE+0x1a8>)
     3e4:	4013      	ands	r3, r2
     3e6:	604b      	str	r3, [r1, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3e8:	682b      	ldr	r3, [r5, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     3ea:	2202      	movs	r2, #2
     3ec:	7e18      	ldrb	r0, [r3, #24]
     3ee:	4202      	tst	r2, r0
     3f0:	d100      	bne.n	3f4 <_i2c_master_read_packet+0x80>
     3f2:	e0b8      	b.n	566 <STACK_SIZE+0x166>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     3f4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3f6:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     3f8:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3fa:	421a      	tst	r2, r3
     3fc:	d13e      	bne.n	47c <STACK_SIZE+0x7c>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3fe:	4643      	mov	r3, r8
     400:	7a5a      	ldrb	r2, [r3, #9]
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     402:	2301      	movs	r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     404:	0392      	lsls	r2, r2, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     406:	431a      	orrs	r2, r3
     408:	4643      	mov	r3, r8
     40a:	8818      	ldrh	r0, [r3, #0]
     40c:	2378      	movs	r3, #120	; 0x78
     40e:	0a00      	lsrs	r0, r0, #8
     410:	4303      	orrs	r3, r0
     412:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     414:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     416:	624b      	str	r3, [r1, #36]	; 0x24
     418:	e008      	b.n	42c <STACK_SIZE+0x2c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     41a:	4643      	mov	r3, r8
     41c:	8812      	ldrh	r2, [r2, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     41e:	7a5b      	ldrb	r3, [r3, #9]
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     420:	0052      	lsls	r2, r2, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     422:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     424:	4313      	orrs	r3, r2
     426:	2201      	movs	r2, #1
     428:	4313      	orrs	r3, r2
     42a:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     42c:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     42e:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     430:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     432:	2702      	movs	r7, #2
     434:	e007      	b.n	446 <STACK_SIZE+0x46>
     436:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     438:	4207      	tst	r7, r0
     43a:	d107      	bne.n	44c <STACK_SIZE+0x4c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     43c:	3301      	adds	r3, #1
     43e:	8928      	ldrh	r0, [r5, #8]
     440:	b29b      	uxth	r3, r3
     442:	4298      	cmp	r0, r3
     444:	d915      	bls.n	472 <STACK_SIZE+0x72>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     446:	7e10      	ldrb	r0, [r2, #24]
     448:	4206      	tst	r6, r0
     44a:	d0f4      	beq.n	436 <STACK_SIZE+0x36>

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     44c:	684a      	ldr	r2, [r1, #4]
     44e:	4b56      	ldr	r3, [pc, #344]	; (5a8 <STACK_SIZE+0x1a8>)
     450:	4013      	ands	r3, r2
     452:	604b      	str	r3, [r1, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     454:	682b      	ldr	r3, [r5, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     456:	2202      	movs	r2, #2
     458:	7e18      	ldrb	r0, [r3, #24]
     45a:	4202      	tst	r2, r0
     45c:	d12f      	bne.n	4be <STACK_SIZE+0xbe>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     45e:	8b5a      	ldrh	r2, [r3, #26]
     460:	0750      	lsls	r0, r2, #29
     462:	d531      	bpl.n	4c8 <STACK_SIZE+0xc8>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     464:	6859      	ldr	r1, [r3, #4]
     466:	22c0      	movs	r2, #192	; 0xc0
     468:	0292      	lsls	r2, r2, #10
     46a:	430a      	orrs	r2, r1
     46c:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     46e:	2018      	movs	r0, #24
     470:	e004      	b.n	47c <STACK_SIZE+0x7c>

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     472:	684a      	ldr	r2, [r1, #4]
     474:	4b4c      	ldr	r3, [pc, #304]	; (5a8 <STACK_SIZE+0x1a8>)
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     476:	2012      	movs	r0, #18

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     478:	4013      	ands	r3, r2
     47a:	604b      	str	r3, [r1, #4]
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     47c:	b003      	add	sp, #12
     47e:	bc3c      	pop	{r2, r3, r4, r5}
     480:	4690      	mov	r8, r2
     482:	4699      	mov	r9, r3
     484:	46a2      	mov	sl, r4
     486:	46ab      	mov	fp, r5
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;

	/* Switch to high speed mode */
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     48a:	7a83      	ldrb	r3, [r0, #10]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     48c:	2280      	movs	r2, #128	; 0x80
     48e:	6848      	ldr	r0, [r1, #4]
     490:	02d2      	lsls	r2, r2, #11
     492:	4302      	orrs	r2, r0
     494:	604a      	str	r2, [r1, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     496:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     498:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     49a:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     49c:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     49e:	2702      	movs	r7, #2
     4a0:	e007      	b.n	4b2 <STACK_SIZE+0xb2>
     4a2:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4a4:	4207      	tst	r7, r0
     4a6:	d107      	bne.n	4b8 <STACK_SIZE+0xb8>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4a8:	3301      	adds	r3, #1
     4aa:	8928      	ldrh	r0, [r5, #8]
     4ac:	b29b      	uxth	r3, r3
     4ae:	4298      	cmp	r0, r3
     4b0:	d902      	bls.n	4b8 <STACK_SIZE+0xb8>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4b2:	7e10      	ldrb	r0, [r2, #24]
     4b4:	4206      	tst	r6, r0
     4b6:	d0f4      	beq.n	4a2 <STACK_SIZE+0xa2>
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4b8:	2301      	movs	r3, #1
     4ba:	760b      	strb	r3, [r1, #24]
     4bc:	e76e      	b.n	39c <_i2c_master_read_packet+0x28>
	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4be:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4c0:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4c2:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4c4:	421a      	tst	r2, r3
     4c6:	d1d9      	bne.n	47c <STACK_SIZE+0x7c>
     4c8:	3c01      	subs	r4, #1
     4ca:	b2a4      	uxth	r4, r4
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     4cc:	4837      	ldr	r0, [pc, #220]	; (5ac <STACK_SIZE+0x1ac>)
     4ce:	46a4      	mov	ip, r4
     4d0:	4663      	mov	r3, ip
     4d2:	4682      	mov	sl, r0
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4d4:	2220      	movs	r2, #32
     4d6:	468c      	mov	ip, r1
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     4d8:	2400      	movs	r4, #0
	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4da:	4693      	mov	fp, r2
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4dc:	2707      	movs	r7, #7

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4de:	2001      	movs	r0, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4e0:	2602      	movs	r6, #2
     4e2:	1c19      	adds	r1, r3, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     4e4:	4551      	cmp	r1, sl
     4e6:	d02c      	beq.n	542 <STACK_SIZE+0x142>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4e8:	4662      	mov	r2, ip
     4ea:	8b53      	ldrh	r3, [r2, #26]
     4ec:	465a      	mov	r2, fp
     4ee:	421a      	tst	r2, r3
     4f0:	d058      	beq.n	5a4 <STACK_SIZE+0x1a4>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     4f2:	7aeb      	ldrb	r3, [r5, #11]
     4f4:	2b00      	cmp	r3, #0
     4f6:	d004      	beq.n	502 <STACK_SIZE+0x102>
     4f8:	9b01      	ldr	r3, [sp, #4]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d038      	beq.n	570 <STACK_SIZE+0x170>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     4fe:	2901      	cmp	r1, #1
     500:	d038      	beq.n	574 <STACK_SIZE+0x174>
     502:	682a      	ldr	r2, [r5, #0]
     504:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     506:	421f      	tst	r7, r3
     508:	d1fc      	bne.n	504 <STACK_SIZE+0x104>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     50a:	1c63      	adds	r3, r4, #1
     50c:	b29b      	uxth	r3, r3
     50e:	2228      	movs	r2, #40	; 0x28
     510:	4699      	mov	r9, r3
     512:	4663      	mov	r3, ip
     514:	5c9b      	ldrb	r3, [r3, r2]
     516:	4642      	mov	r2, r8
     518:	6852      	ldr	r2, [r2, #4]
     51a:	5513      	strb	r3, [r2, r4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     51c:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     51e:	2300      	movs	r3, #0
     520:	e007      	b.n	532 <STACK_SIZE+0x132>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     522:	7e14      	ldrb	r4, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     524:	4226      	tst	r6, r4
     526:	d107      	bne.n	538 <STACK_SIZE+0x138>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     528:	3301      	adds	r3, #1
     52a:	892c      	ldrh	r4, [r5, #8]
     52c:	b29b      	uxth	r3, r3
     52e:	429c      	cmp	r4, r3
     530:	d928      	bls.n	584 <STACK_SIZE+0x184>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     532:	7e14      	ldrb	r4, [r2, #24]
     534:	4220      	tst	r0, r4
     536:	d0f4      	beq.n	522 <STACK_SIZE+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     538:	464c      	mov	r4, r9
     53a:	3901      	subs	r1, #1
     53c:	b289      	uxth	r1, r1
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     53e:	4551      	cmp	r1, sl
     540:	d1d2      	bne.n	4e8 <STACK_SIZE+0xe8>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     542:	7aab      	ldrb	r3, [r5, #10]
     544:	4661      	mov	r1, ip
     546:	682a      	ldr	r2, [r5, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     548:	46a1      	mov	r9, r4
     54a:	2000      	movs	r0, #0
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     54c:	2b00      	cmp	r3, #0
     54e:	d11e      	bne.n	58e <STACK_SIZE+0x18e>
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     550:	2407      	movs	r4, #7
     552:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     554:	421c      	tst	r4, r3
     556:	d1fc      	bne.n	552 <STACK_SIZE+0x152>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
     558:	2328      	movs	r3, #40	; 0x28
     55a:	5cca      	ldrb	r2, [r1, r3]
     55c:	4641      	mov	r1, r8
     55e:	684b      	ldr	r3, [r1, #4]
     560:	4649      	mov	r1, r9
     562:	545a      	strb	r2, [r3, r1]
     564:	e78a      	b.n	47c <STACK_SIZE+0x7c>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     566:	8b5a      	ldrh	r2, [r3, #26]
     568:	0750      	lsls	r0, r2, #29
     56a:	d500      	bpl.n	56e <STACK_SIZE+0x16e>
     56c:	e77a      	b.n	464 <STACK_SIZE+0x64>
     56e:	e746      	b.n	3fe <_i2c_master_read_packet+0x8a>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     570:	2900      	cmp	r1, #0
     572:	d1c6      	bne.n	502 <STACK_SIZE+0x102>
					((sclsm_flag) && (tmp_data_length == 1)))) {
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     574:	4662      	mov	r2, ip
     576:	6853      	ldr	r3, [r2, #4]
     578:	2280      	movs	r2, #128	; 0x80
     57a:	02d2      	lsls	r2, r2, #11
     57c:	4313      	orrs	r3, r2
     57e:	4662      	mov	r2, ip
     580:	6053      	str	r3, [r2, #4]
     582:	e7da      	b.n	53a <STACK_SIZE+0x13a>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     584:	7aab      	ldrb	r3, [r5, #10]
     586:	4661      	mov	r1, ip
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     588:	2012      	movs	r0, #18
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     58a:	2b00      	cmp	r3, #0
     58c:	d0e0      	beq.n	550 <STACK_SIZE+0x150>
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     58e:	2407      	movs	r4, #7
     590:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     592:	421c      	tst	r4, r3
     594:	d1fc      	bne.n	590 <STACK_SIZE+0x190>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     596:	684a      	ldr	r2, [r1, #4]
     598:	23c0      	movs	r3, #192	; 0xc0
     59a:	029b      	lsls	r3, r3, #10
     59c:	4313      	orrs	r3, r2
     59e:	604b      	str	r3, [r1, #4]
     5a0:	682a      	ldr	r2, [r5, #0]
     5a2:	e7d5      	b.n	550 <STACK_SIZE+0x150>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     5a4:	2041      	movs	r0, #65	; 0x41
     5a6:	e769      	b.n	47c <STACK_SIZE+0x7c>
     5a8:	fffbffff 	.word	0xfffbffff
     5ac:	0000ffff 	.word	0x0000ffff

000005b0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b2:	464d      	mov	r5, r9
     5b4:	4644      	mov	r4, r8
     5b6:	465f      	mov	r7, fp
     5b8:	4656      	mov	r6, sl
     5ba:	b4f0      	push	{r4, r5, r6, r7}
     5bc:	4680      	mov	r8, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     5be:	6001      	str	r1, [r0, #0]
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5c0:	1c0c      	adds	r4, r1, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5c2:	1c08      	adds	r0, r1, #0
     5c4:	4969      	ldr	r1, [pc, #420]	; (76c <i2c_master_init+0x1bc>)
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5c6:	b085      	sub	sp, #20
     5c8:	1c15      	adds	r5, r2, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5ca:	4689      	mov	r9, r1
     5cc:	4788      	blx	r1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5ce:	2701      	movs	r7, #1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5d0:	4b67      	ldr	r3, [pc, #412]	; (770 <i2c_master_init+0x1c0>)
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5d2:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5d4:	1c3e      	adds	r6, r7, #0
     5d6:	6a19      	ldr	r1, [r3, #32]
     5d8:	4096      	lsls	r6, r2
     5da:	1c32      	adds	r2, r6, #0
     5dc:	430a      	orrs	r2, r1
     5de:	621a      	str	r2, [r3, #32]
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e0:	1c06      	adds	r6, r0, #0
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5e2:	7b2b      	ldrb	r3, [r5, #12]
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e4:	360e      	adds	r6, #14
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5e6:	4669      	mov	r1, sp
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5e8:	b2f6      	uxtb	r6, r6
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5ec:	1c30      	adds	r0, r6, #0
     5ee:	4b61      	ldr	r3, [pc, #388]	; (774 <i2c_master_init+0x1c4>)
     5f0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5f2:	1c30      	adds	r0, r6, #0
     5f4:	4b60      	ldr	r3, [pc, #384]	; (778 <i2c_master_init+0x1c8>)
     5f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5f8:	4b60      	ldr	r3, [pc, #384]	; (77c <i2c_master_init+0x1cc>)
     5fa:	7b28      	ldrb	r0, [r5, #12]
     5fc:	2100      	movs	r1, #0
     5fe:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     600:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     602:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     604:	079a      	lsls	r2, r3, #30
     606:	d506      	bpl.n	616 <i2c_master_init+0x66>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     608:	b005      	add	sp, #20
     60a:	bc3c      	pop	{r2, r3, r4, r5}
     60c:	4690      	mov	r8, r2
     60e:	4699      	mov	r9, r3
     610:	46a2      	mov	sl, r4
     612:	46ab      	mov	fp, r5
     614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     616:	6826      	ldr	r6, [r4, #0]
		return STATUS_BUSY;
     618:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     61a:	403e      	ands	r6, r7
     61c:	d1f4      	bne.n	608 <i2c_master_init+0x58>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     61e:	2314      	movs	r3, #20
     620:	6023      	str	r3, [r4, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     622:	4641      	mov	r1, r8
     624:	680b      	ldr	r3, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     626:	ac02      	add	r4, sp, #8
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     628:	1c18      	adds	r0, r3, #0
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     62a:	469a      	mov	sl, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     62c:	47c8      	blx	r9
     62e:	4681      	mov	r9, r0

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     630:	69e8      	ldr	r0, [r5, #28]
     632:	2380      	movs	r3, #128	; 0x80
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     634:	7066      	strb	r6, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     636:	70e6      	strb	r6, [r4, #3]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     638:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     63a:	70a7      	strb	r7, [r4, #2]
	uint32_t pad1 = config->pinmux_pad1;
     63c:	6a2e      	ldr	r6, [r5, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     63e:	2800      	cmp	r0, #0
     640:	d07a      	beq.n	738 <i2c_master_init+0x188>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     642:	7020      	strb	r0, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     644:	4a4e      	ldr	r2, [pc, #312]	; (780 <i2c_master_init+0x1d0>)
     646:	0c00      	lsrs	r0, r0, #16
	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     648:	2302      	movs	r3, #2
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     64a:	b2c0      	uxtb	r0, r0
     64c:	1c21      	adds	r1, r4, #0
	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     64e:	7063      	strb	r3, [r4, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     650:	4693      	mov	fp, r2
     652:	4790      	blx	r2

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     654:	2e00      	cmp	r6, #0
     656:	d069      	beq.n	72c <i2c_master_init+0x17c>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     658:	7026      	strb	r6, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     65a:	0c36      	lsrs	r6, r6, #16
     65c:	b2f0      	uxtb	r0, r6
	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     65e:	2702      	movs	r7, #2
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     660:	1c21      	adds	r1, r4, #0
	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     662:	7067      	strb	r7, [r4, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     664:	47d8      	blx	fp

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     666:	8aab      	ldrh	r3, [r5, #20]
     668:	4646      	mov	r6, r8
     66a:	80f3      	strh	r3, [r6, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     66c:	8aeb      	ldrh	r3, [r5, #22]
     66e:	8133      	strh	r3, [r6, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     670:	7e2a      	ldrb	r2, [r5, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     672:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     674:	2a00      	cmp	r2, #0
     676:	d04d      	beq.n	714 <i2c_master_init+0x164>
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     678:	692a      	ldr	r2, [r5, #16]
     67a:	2a00      	cmp	r2, #0
     67c:	d000      	beq.n	680 <i2c_master_init+0xd0>
		tmp_ctrla |= config->start_hold_time;
     67e:	4313      	orrs	r3, r2

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     680:	2124      	movs	r1, #36	; 0x24
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     682:	68aa      	ldr	r2, [r5, #8]

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     684:	5c69      	ldrb	r1, [r5, r1]
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     686:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     688:	2900      	cmp	r1, #0
     68a:	d002      	beq.n	692 <i2c_master_init+0xe2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     68c:	2180      	movs	r1, #128	; 0x80
     68e:	05c9      	lsls	r1, r1, #23
     690:	430b      	orrs	r3, r1
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     692:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     694:	2900      	cmp	r1, #0
     696:	d000      	beq.n	69a <i2c_master_init+0xea>
		tmp_ctrla |= config->inactive_timeout;
     698:	430b      	orrs	r3, r1
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     69a:	212c      	movs	r1, #44	; 0x2c
     69c:	5c69      	ldrb	r1, [r5, r1]
     69e:	2900      	cmp	r1, #0
     6a0:	d03f      	beq.n	722 <i2c_master_init+0x172>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     6a2:	2280      	movs	r2, #128	; 0x80
     6a4:	0512      	lsls	r2, r2, #20
     6a6:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     6a8:	222d      	movs	r2, #45	; 0x2d
     6aa:	5caa      	ldrb	r2, [r5, r2]
     6ac:	2a00      	cmp	r2, #0
     6ae:	d002      	beq.n	6b6 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     6b0:	2280      	movs	r2, #128	; 0x80
     6b2:	0412      	lsls	r2, r2, #16
     6b4:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     6b6:	222e      	movs	r2, #46	; 0x2e
     6b8:	5caa      	ldrb	r2, [r5, r2]
     6ba:	2a00      	cmp	r2, #0
     6bc:	d002      	beq.n	6c4 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     6be:	2280      	movs	r2, #128	; 0x80
     6c0:	03d2      	lsls	r2, r2, #15
     6c2:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     6c4:	4656      	mov	r6, sl
     6c6:	6832      	ldr	r2, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6c8:	492e      	ldr	r1, [pc, #184]	; (784 <i2c_master_init+0x1d4>)
	if (config->master_scl_low_extend_timeout) {
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     6ca:	4313      	orrs	r3, r2
     6cc:	6033      	str	r3, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     6ce:	2380      	movs	r3, #128	; 0x80
     6d0:	005b      	lsls	r3, r3, #1
     6d2:	6073      	str	r3, [r6, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6d4:	464b      	mov	r3, r9
     6d6:	330e      	adds	r3, #14
     6d8:	b2db      	uxtb	r3, r3
     6da:	1c18      	adds	r0, r3, #0
     6dc:	4699      	mov	r9, r3
     6de:	468b      	mov	fp, r1
     6e0:	4788      	blx	r1
     6e2:	1c06      	adds	r6, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
     6e4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6e6:	682a      	ldr	r2, [r5, #0]
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6e8:	4b27      	ldr	r3, [pc, #156]	; (788 <i2c_master_init+0x1d8>)
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6ea:	27fa      	movs	r7, #250	; 0xfa
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6ec:	4927      	ldr	r1, [pc, #156]	; (78c <i2c_master_init+0x1dc>)
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6ee:	00bf      	lsls	r7, r7, #2
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6f0:	4370      	muls	r0, r6
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6f2:	4357      	muls	r7, r2
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6f4:	4698      	mov	r8, r3
     6f6:	4798      	blx	r3
     6f8:	300a      	adds	r0, #10
     6fa:	4378      	muls	r0, r7
	int32_t  denominator = 2*fscl;
     6fc:	007c      	lsls	r4, r7, #1

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6fe:	1a30      	subs	r0, r6, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
     700:	1900      	adds	r0, r0, r4
     702:	1c21      	adds	r1, r4, #0
     704:	3801      	subs	r0, #1
     706:	4b22      	ldr	r3, [pc, #136]	; (790 <i2c_master_init+0x1e0>)
     708:	4798      	blx	r3
     70a:	1e04      	subs	r4, r0, #0

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     70c:	2cff      	cmp	r4, #255	; 0xff
     70e:	d918      	bls.n	742 <i2c_master_init+0x192>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     710:	2040      	movs	r0, #64	; 0x40
     712:	e779      	b.n	608 <i2c_master_init+0x58>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     714:	4b1f      	ldr	r3, [pc, #124]	; (794 <i2c_master_init+0x1e4>)
     716:	789b      	ldrb	r3, [r3, #2]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     718:	401f      	ands	r7, r3
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     71a:	1e7b      	subs	r3, r7, #1
     71c:	419f      	sbcs	r7, r3
     71e:	01fb      	lsls	r3, r7, #7
     720:	e7aa      	b.n	678 <i2c_master_init+0xc8>
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     722:	2180      	movs	r1, #128	; 0x80
     724:	0489      	lsls	r1, r1, #18
     726:	428a      	cmp	r2, r1
     728:	d1be      	bne.n	6a8 <i2c_master_init+0xf8>
     72a:	e7ba      	b.n	6a2 <i2c_master_init+0xf2>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     72c:	4650      	mov	r0, sl
     72e:	2101      	movs	r1, #1
     730:	4b19      	ldr	r3, [pc, #100]	; (798 <i2c_master_init+0x1e8>)
     732:	4798      	blx	r3
     734:	1c06      	adds	r6, r0, #0
     736:	e78f      	b.n	658 <i2c_master_init+0xa8>
	uint32_t pad0 = config->pinmux_pad0;
	uint32_t pad1 = config->pinmux_pad1;

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     738:	4650      	mov	r0, sl
     73a:	2100      	movs	r1, #0
     73c:	4b16      	ldr	r3, [pc, #88]	; (798 <i2c_master_init+0x1e8>)
     73e:	4798      	blx	r3
     740:	e77f      	b.n	642 <i2c_master_init+0x92>
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     742:	4648      	mov	r0, r9
     744:	47d8      	blx	fp
     746:	686b      	ldr	r3, [r5, #4]
     748:	21fa      	movs	r1, #250	; 0xfa
     74a:	00c9      	lsls	r1, r1, #3
     74c:	4359      	muls	r1, r3
     74e:	1e4b      	subs	r3, r1, #1
     750:	1818      	adds	r0, r3, r0
     752:	47c0      	blx	r8
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     754:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     756:	28ff      	cmp	r0, #255	; 0xff
     758:	d8da      	bhi.n	710 <i2c_master_init+0x160>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     75a:	23ff      	movs	r3, #255	; 0xff
     75c:	0400      	lsls	r0, r0, #16
     75e:	041b      	lsls	r3, r3, #16
     760:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     762:	4304      	orrs	r4, r0
     764:	4656      	mov	r6, sl
     766:	60f4      	str	r4, [r6, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     768:	2000      	movs	r0, #0
     76a:	e74d      	b.n	608 <i2c_master_init+0x58>
     76c:	000017dd 	.word	0x000017dd
     770:	40000400 	.word	0x40000400
     774:	00001d5d 	.word	0x00001d5d
     778:	00001dc1 	.word	0x00001dc1
     77c:	00001719 	.word	0x00001719
     780:	00001e99 	.word	0x00001e99
     784:	00001df1 	.word	0x00001df1
     788:	00002491 	.word	0x00002491
     78c:	3b9aca00 	.word	0x3b9aca00
     790:	0000252d 	.word	0x0000252d
     794:	41002000 	.word	0x41002000
     798:	00001765 	.word	0x00001765

0000079c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     79c:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     79e:	2301      	movs	r3, #1
     7a0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7a2:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
     7a4:	4b01      	ldr	r3, [pc, #4]	; (7ac <i2c_master_read_packet_wait+0x10>)
     7a6:	4798      	blx	r3
}
     7a8:	bd08      	pop	{r3, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00000375 	.word	0x00000375

000007b0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7b0:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     7b2:	2301      	movs	r3, #1
     7b4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7b6:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <i2c_master_write_packet_wait+0x10>)
     7ba:	4798      	blx	r3
}
     7bc:	bd08      	pop	{r3, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	000001f5 	.word	0x000001f5
     7c4:	00000000 	.word	0x00000000

000007c8 <resetAndInitialize>:
	.Rotation_z = 9
};


int resetAndInitialize(slave_twi_config_t* slave_config)
{
     7c8:	b5d0      	push	{r4, r6, r7, lr}
     7ca:	b094      	sub	sp, #80	; 0x50
     7cc:	1c06      	adds	r6, r0, #0
	int status, readData[20] = {0};
     7ce:	2100      	movs	r1, #0
     7d0:	2250      	movs	r2, #80	; 0x50
     7d2:	4668      	mov	r0, sp
     7d4:	4b2a      	ldr	r3, [pc, #168]	; (880 <resetAndInitialize+0xb8>)
     7d6:	4798      	blx	r3
	//Power up / reset request
	status = drv_i2c_write(slave_config, EM_RESET_REQUEST_REGISTER, EM_RESET_REQUEST_FLAG);
     7d8:	1c30      	adds	r0, r6, #0
     7da:	219b      	movs	r1, #155	; 0x9b
     7dc:	2201      	movs	r2, #1
     7de:	4f29      	ldr	r7, [pc, #164]	; (884 <resetAndInitialize+0xbc>)
     7e0:	47b8      	blx	r7
	if (status != STATUS_PASS)
     7e2:	2800      	cmp	r0, #0
     7e4:	d002      	beq.n	7ec <resetAndInitialize+0x24>
	{
		return STATUS_FAIL;
     7e6:	2001      	movs	r0, #1
	if (status != STATUS_PASS)
	{
		return STATUS_FAIL;
	}
	return STATUS_PASS;
}
     7e8:	b014      	add	sp, #80	; 0x50
     7ea:	bdd0      	pop	{r4, r6, r7, pc}
	{
		return STATUS_FAIL;
	}	
	//Read SW1_Int over and over again until it is high, then the device is ready to go. 
	//TODO remove this delay
	delay_ms(1000);	//wait for the device to complete EEPROM upload
     7ec:	4b26      	ldr	r3, [pc, #152]	; (888 <resetAndInitialize+0xc0>)
     7ee:	2000      	movs	r0, #0
     7f0:	4798      	blx	r3
     7f2:	4b1e      	ldr	r3, [pc, #120]	; (86c <resetAndInitialize+0xa4>)
     7f4:	4a1c      	ldr	r2, [pc, #112]	; (868 <resetAndInitialize+0xa0>)
     7f6:	4c25      	ldr	r4, [pc, #148]	; (88c <resetAndInitialize+0xc4>)
     7f8:	2100      	movs	r1, #0
     7fa:	47a0      	blx	r4
     7fc:	4a1c      	ldr	r2, [pc, #112]	; (870 <resetAndInitialize+0xa8>)
     7fe:	4b1d      	ldr	r3, [pc, #116]	; (874 <resetAndInitialize+0xac>)
     800:	4c23      	ldr	r4, [pc, #140]	; (890 <resetAndInitialize+0xc8>)
     802:	1880      	adds	r0, r0, r2
     804:	4159      	adcs	r1, r3
     806:	4a1c      	ldr	r2, [pc, #112]	; (878 <resetAndInitialize+0xb0>)
     808:	4b1c      	ldr	r3, [pc, #112]	; (87c <resetAndInitialize+0xb4>)
     80a:	47a0      	blx	r4
     80c:	4b21      	ldr	r3, [pc, #132]	; (894 <resetAndInitialize+0xcc>)
     80e:	4798      	blx	r3
	
	status = drv_i2c_read(slave_config, EM_SENTRAL_STATUS_REGISTER, &readData[0], 1);
     810:	1c30      	adds	r0, r6, #0
     812:	2137      	movs	r1, #55	; 0x37
     814:	466a      	mov	r2, sp
     816:	2301      	movs	r3, #1
     818:	4c1f      	ldr	r4, [pc, #124]	; (898 <resetAndInitialize+0xd0>)
     81a:	47a0      	blx	r4
	if (status != STATUS_PASS)
     81c:	2800      	cmp	r0, #0
     81e:	d1e2      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	else
	{
		debugStructure.statusMask = readData[0]; 
     820:	9b00      	ldr	r3, [sp, #0]
     822:	4a1e      	ldr	r2, [pc, #120]	; (89c <resetAndInitialize+0xd4>)
     824:	6013      	str	r3, [r2, #0]
		if (readData[0] == EM_EEPROM_SUCCESS_MASK)
     826:	2b0b      	cmp	r3, #11
     828:	d1dd      	bne.n	7e6 <resetAndInitialize+0x1e>
		return STATUS_FAIL;
	}
	#endif
	
	//mag rate
	status = drv_i2c_write(slave_config, EM_MAG_RATE_CONFIG_REGISTER, EM_MAG_OUPUT_DATA_RATE);
     82a:	1c30      	adds	r0, r6, #0
     82c:	2155      	movs	r1, #85	; 0x55
     82e:	221e      	movs	r2, #30
     830:	47b8      	blx	r7
	if (status != STATUS_PASS)
     832:	2800      	cmp	r0, #0
     834:	d1d7      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//accel rate
	status = drv_i2c_write(slave_config, EM_ACCEL_RATE_CONFIG_REGISTER, EM_ACCEL_OUPUT_DATA_RATE);
     836:	1c30      	adds	r0, r6, #0
     838:	2156      	movs	r1, #86	; 0x56
     83a:	220a      	movs	r2, #10
     83c:	47b8      	blx	r7
	if (status != STATUS_PASS)
     83e:	2800      	cmp	r0, #0
     840:	d1d1      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//gyro rate
	status = drv_i2c_write(slave_config, EM_GYRO_RATE_CONFIG_REGISTER, EM_GYRO_OUPUT_DATA_RATE);
     842:	1c30      	adds	r0, r6, #0
     844:	2157      	movs	r1, #87	; 0x57
     846:	2214      	movs	r2, #20
     848:	47b8      	blx	r7
	if (status != STATUS_PASS)
     84a:	2800      	cmp	r0, #0
     84c:	d1cb      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//enable events
	status = drv_i2c_write(slave_config, EM_INTERRUPT_CONFIG_REGISTER, EM_RESET_INT_FLAG);
     84e:	1c30      	adds	r0, r6, #0
     850:	2133      	movs	r1, #51	; 0x33
     852:	2201      	movs	r2, #1
     854:	47b8      	blx	r7
	if (status != STATUS_PASS)
     856:	2800      	cmp	r0, #0
     858:	d1c5      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//run request
	status = drv_i2c_write(slave_config, EM_RUN_REQUEST_REGISTER, EM_RUN_REQUEST_FLAG);
     85a:	1c30      	adds	r0, r6, #0
     85c:	2134      	movs	r1, #52	; 0x34
     85e:	2201      	movs	r2, #1
     860:	47b8      	blx	r7
	int status, readData[20] = {0};
	//Power up / reset request
	status = drv_i2c_write(slave_config, EM_RESET_REQUEST_REGISTER, EM_RESET_REQUEST_FLAG);
	if (status != STATUS_PASS)
	{
		return STATUS_FAIL;
     862:	1e43      	subs	r3, r0, #1
     864:	4198      	sbcs	r0, r3
     866:	e7bf      	b.n	7e8 <resetAndInitialize+0x20>
     868:	000003e8 	.word	0x000003e8
     86c:	00000000 	.word	0x00000000
     870:	00001b57 	.word	0x00001b57
     874:	00000000 	.word	0x00000000
     878:	00001b58 	.word	0x00001b58
     87c:	00000000 	.word	0x00000000
     880:	00002ed5 	.word	0x00002ed5
     884:	00000ac1 	.word	0x00000ac1
     888:	00001cd5 	.word	0x00001cd5
     88c:	00002631 	.word	0x00002631
     890:	000025f1 	.word	0x000025f1
     894:	20000001 	.word	0x20000001
     898:	00000af5 	.word	0x00000af5
     89c:	20000118 	.word	0x20000118

000008a0 <sendButtonPressEvent>:
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
	pkt_SendRawPacket(outputDataBuffer, 18);	
}

void sendButtonPressEvent()
{
     8a0:	b510      	push	{r4, lr}
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     8a2:	4c08      	ldr	r4, [pc, #32]	; (8c4 <sendButtonPressEvent+0x24>)
     8a4:	2303      	movs	r3, #3
	outputDataBuffer[1] = PACKET_COMMAND_ID_BUTTON_PRESS;
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     8a6:	4908      	ldr	r1, [pc, #32]	; (8c8 <sendButtonPressEvent+0x28>)
	pkt_SendRawPacket(outputDataBuffer, 18);	
}

void sendButtonPressEvent()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     8a8:	7023      	strb	r3, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_BUTTON_PRESS;
     8aa:	2315      	movs	r3, #21
     8ac:	7063      	strb	r3, [r4, #1]
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     8ae:	2210      	movs	r2, #16
     8b0:	1ca0      	adds	r0, r4, #2
     8b2:	3101      	adds	r1, #1
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <sendButtonPressEvent+0x2c>)
     8b6:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 18);	
     8b8:	1c20      	adds	r0, r4, #0
     8ba:	2112      	movs	r1, #18
     8bc:	4b04      	ldr	r3, [pc, #16]	; (8d0 <sendButtonPressEvent+0x30>)
     8be:	4798      	blx	r3
}
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	200000b4 	.word	0x200000b4
     8c8:	20000298 	.word	0x20000298
     8cc:	00002ec3 	.word	0x00002ec3
     8d0:	00000b55 	.word	0x00000b55

000008d4 <updateImuData>:
	memcpy(outputDataBuffer+3,&debugStructure,25);
	pkt_SendRawPacket(outputDataBuffer, 27);	
}

void updateImuData()
{
     8d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t statusRegister = 0x00; 
	status_t status = drv_i2c_read(&em7180Config, 0x35, &statusRegister, 1);
     8d6:	4c24      	ldr	r4, [pc, #144]	; (968 <updateImuData+0x94>)
	memcpy(outputDataBuffer+3,&debugStructure,25);
	pkt_SendRawPacket(outputDataBuffer, 27);	
}

void updateImuData()
{
     8d8:	b082      	sub	sp, #8
	uint8_t statusRegister = 0x00; 
     8da:	2300      	movs	r3, #0
     8dc:	466a      	mov	r2, sp
     8de:	7013      	strb	r3, [r2, #0]
	status_t status = drv_i2c_read(&em7180Config, 0x35, &statusRegister, 1);
     8e0:	1c20      	adds	r0, r4, #0
     8e2:	2135      	movs	r1, #53	; 0x35
     8e4:	2301      	movs	r3, #1
     8e6:	4d21      	ldr	r5, [pc, #132]	; (96c <updateImuData+0x98>)
     8e8:	47a8      	blx	r5
	if(status == STATUS_PASS)
     8ea:	b2c0      	uxtb	r0, r0
     8ec:	2800      	cmp	r0, #0
     8ee:	d12f      	bne.n	950 <updateImuData+0x7c>
	{	
		//check the IMU status to confirm it's operational
		if ((statusRegister & 0x01 > 0) || (statusRegister & 0x02 > 0) )
     8f0:	466a      	mov	r2, sp
     8f2:	7813      	ldrb	r3, [r2, #0]
     8f4:	07da      	lsls	r2, r3, #31
     8f6:	d42d      	bmi.n	954 <updateImuData+0x80>
			//reset the IMU, and skip this 
			resetAndInitialize(&em7180Config); 		
		}
		else
		{
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Quaternion_x, 16) != STATUS_PASS)
     8f8:	4e1d      	ldr	r6, [pc, #116]	; (970 <updateImuData+0x9c>)
     8fa:	1c20      	adds	r0, r4, #0
     8fc:	2100      	movs	r1, #0
     8fe:	1c32      	adds	r2, r6, #0
     900:	2310      	movs	r3, #16
     902:	47a8      	blx	r5
     904:	2800      	cmp	r0, #0
     906:	d003      	beq.n	910 <updateImuData+0x3c>
			{
				debugStructure.quatReadErrorCount++;	
     908:	4b1a      	ldr	r3, [pc, #104]	; (974 <updateImuData+0xa0>)
     90a:	689a      	ldr	r2, [r3, #8]
     90c:	3201      	adds	r2, #1
     90e:	609a      	str	r2, [r3, #8]
			}	
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Magnetic_x, 12) != STATUS_PASS)
     910:	1c32      	adds	r2, r6, #0
     912:	3210      	adds	r2, #16
     914:	1c20      	adds	r0, r4, #0
     916:	2100      	movs	r1, #0
     918:	230c      	movs	r3, #12
     91a:	47a8      	blx	r5
     91c:	2800      	cmp	r0, #0
     91e:	d003      	beq.n	928 <updateImuData+0x54>
			{
				debugStructure.magReadErrorCount++;
     920:	4b14      	ldr	r3, [pc, #80]	; (974 <updateImuData+0xa0>)
     922:	68da      	ldr	r2, [r3, #12]
     924:	3201      	adds	r2, #1
     926:	60da      	str	r2, [r3, #12]
			}
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Acceleration_x, 12) != STATUS_PASS)
     928:	1c32      	adds	r2, r6, #0
     92a:	3216      	adds	r2, #22
     92c:	1c20      	adds	r0, r4, #0
     92e:	2100      	movs	r1, #0
     930:	230c      	movs	r3, #12
     932:	47a8      	blx	r5
     934:	2800      	cmp	r0, #0
     936:	d111      	bne.n	95c <updateImuData+0x88>
			{
				debugStructure.accelReadErrorCount++;
			}
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Rotation_x, 12) != STATUS_PASS)
     938:	1c32      	adds	r2, r6, #0
     93a:	321c      	adds	r2, #28
     93c:	1c20      	adds	r0, r4, #0
     93e:	2100      	movs	r1, #0
     940:	230c      	movs	r3, #12
     942:	47a8      	blx	r5
     944:	2800      	cmp	r0, #0
     946:	d003      	beq.n	950 <updateImuData+0x7c>
			{
				debugStructure.gyroReadErrorCount++;
     948:	4b0a      	ldr	r3, [pc, #40]	; (974 <updateImuData+0xa0>)
     94a:	695a      	ldr	r2, [r3, #20]
     94c:	3201      	adds	r2, #1
     94e:	615a      	str	r2, [r3, #20]
			}	
		}
	}
	
}
     950:	b002      	add	sp, #8
     952:	bd70      	pop	{r4, r5, r6, pc}
	{	
		//check the IMU status to confirm it's operational
		if ((statusRegister & 0x01 > 0) || (statusRegister & 0x02 > 0) )
		{
			//reset the IMU, and skip this 
			resetAndInitialize(&em7180Config); 		
     954:	1c20      	adds	r0, r4, #0
     956:	4b08      	ldr	r3, [pc, #32]	; (978 <updateImuData+0xa4>)
     958:	4798      	blx	r3
     95a:	e7f9      	b.n	950 <updateImuData+0x7c>
			{
				debugStructure.magReadErrorCount++;
			}
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Acceleration_x, 12) != STATUS_PASS)
			{
				debugStructure.accelReadErrorCount++;
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <updateImuData+0xa0>)
     95e:	691a      	ldr	r2, [r3, #16]
     960:	3201      	adds	r2, #1
     962:	611a      	str	r2, [r3, #16]
     964:	e7e8      	b.n	938 <updateImuData+0x64>
     966:	46c0      	nop			; (mov r8, r8)
     968:	20000044 	.word	0x20000044
     96c:	00000af5 	.word	0x00000af5
     970:	2000000c 	.word	0x2000000c
     974:	20000118 	.word	0x20000118
     978:	000007c9 	.word	0x000007c9

0000097c <cmd_processPacket>:
//
/* all packets have the format
 <type(1B)><command id(1B)><payload(size dependant on command type)> 
*/
void cmd_processPacket(rawPacket_t* packet)
{
     97c:	b538      	push	{r3, r4, r5, lr}
	//make sure the packet has enough bytes in it
	if(packet->payloadSize < 2)
     97e:	23c8      	movs	r3, #200	; 0xc8
     980:	5ac3      	ldrh	r3, [r0, r3]
//
/* all packets have the format
 <type(1B)><command id(1B)><payload(size dependant on command type)> 
*/
void cmd_processPacket(rawPacket_t* packet)
{
     982:	1c04      	adds	r4, r0, #0
	//make sure the packet has enough bytes in it
	if(packet->payloadSize < 2)
     984:	2b01      	cmp	r3, #1
     986:	d902      	bls.n	98e <cmd_processPacket+0x12>
		//if there's less than two bytes... its not a valid packet
		return; 
	}
	//check which type of packet it is.
	//we only care about master control packets. 
	if(packet->payload[0] == PACKET_TYPE_MASTER_CONTROL)
     988:	7802      	ldrb	r2, [r0, #0]
     98a:	2a01      	cmp	r2, #1
     98c:	d000      	beq.n	990 <cmd_processPacket+0x14>
				}
			break; 			
			
		}
	}
}
     98e:	bd38      	pop	{r3, r4, r5, pc}
	}
	//check which type of packet it is.
	//we only care about master control packets. 
	if(packet->payload[0] == PACKET_TYPE_MASTER_CONTROL)
	{
		switch(packet->payload[1])
     990:	7842      	ldrb	r2, [r0, #1]
     992:	3a11      	subs	r2, #17
     994:	b2d2      	uxtb	r2, r2
     996:	2a07      	cmp	r2, #7
     998:	d8f9      	bhi.n	98e <cmd_processPacket+0x12>
     99a:	492b      	ldr	r1, [pc, #172]	; (a48 <cmd_processPacket+0xcc>)
     99c:	0092      	lsls	r2, r2, #2
     99e:	588a      	ldr	r2, [r1, r2]
     9a0:	4697      	mov	pc, r2
					settings.setupModeEnabled = false; 
				}				
			break;
			case PACKET_COMMAND_ID_GET_STATUS:
				//check if the ID matches the one assigned
				if(packet->payload[2] == settings.sensorId)
     9a2:	4b2a      	ldr	r3, [pc, #168]	; (a4c <cmd_processPacket+0xd0>)
     9a4:	7882      	ldrb	r2, [r0, #2]
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	4293      	cmp	r3, r2
     9aa:	d1f0      	bne.n	98e <cmd_processPacket+0x12>
}


void sendGetStatusResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     9ac:	4c28      	ldr	r4, [pc, #160]	; (a50 <cmd_processPacket+0xd4>)
     9ae:	2203      	movs	r2, #3
     9b0:	7022      	strb	r2, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_STATUS_RESP;
     9b2:	2219      	movs	r2, #25
     9b4:	7062      	strb	r2, [r4, #1]
	outputDataBuffer[2] = settings.sensorId;
	memcpy(outputDataBuffer+3,&debugStructure,25);
     9b6:	1ce0      	adds	r0, r4, #3

void sendGetStatusResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_STATUS_RESP;
	outputDataBuffer[2] = settings.sensorId;
     9b8:	70a3      	strb	r3, [r4, #2]
	memcpy(outputDataBuffer+3,&debugStructure,25);
     9ba:	4926      	ldr	r1, [pc, #152]	; (a54 <cmd_processPacket+0xd8>)
     9bc:	4b26      	ldr	r3, [pc, #152]	; (a58 <cmd_processPacket+0xdc>)
     9be:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 27);	
     9c0:	1c20      	adds	r0, r4, #0
     9c2:	211b      	movs	r1, #27
     9c4:	4b25      	ldr	r3, [pc, #148]	; (a5c <cmd_processPacket+0xe0>)
     9c6:	4798      	blx	r3
     9c8:	e7e1      	b.n	98e <cmd_processPacket+0x12>
					sendImuDataFrame();
				}
			break; 
			case PACKET_COMMAND_ID_SET_IMU_ID:
				//confirm the packet size. 
				if(packet->payloadSize != 19)
     9ca:	2b13      	cmp	r3, #19
     9cc:	d1df      	bne.n	98e <cmd_processPacket+0x12>
				{
					//invalid packet size
					return; 
				}
				//check that the serial numbers match
				if(memcmp(settings.serialNumber,(packet->payload)+2,16) == 0)
     9ce:	4d24      	ldr	r5, [pc, #144]	; (a60 <cmd_processPacket+0xe4>)
     9d0:	1c81      	adds	r1, r0, #2
     9d2:	2210      	movs	r2, #16
     9d4:	1c28      	adds	r0, r5, #0
     9d6:	4b23      	ldr	r3, [pc, #140]	; (a64 <cmd_processPacket+0xe8>)
     9d8:	4798      	blx	r3
     9da:	2800      	cmp	r0, #0
     9dc:	d1d7      	bne.n	98e <cmd_processPacket+0x12>
				{
					settings.sensorId = packet->payload[18];
     9de:	7ca2      	ldrb	r2, [r4, #18]
     9e0:	1e6b      	subs	r3, r5, #1
	memcpy(outputDataBuffer+3,&imuFrameData,34);
	pkt_SendRawPacket(outputDataBuffer, 37);	
}
void sendSetImuIdResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     9e2:	4c1b      	ldr	r4, [pc, #108]	; (a50 <cmd_processPacket+0xd4>)
					return; 
				}
				//check that the serial numbers match
				if(memcmp(settings.serialNumber,(packet->payload)+2,16) == 0)
				{
					settings.sensorId = packet->payload[18];
     9e4:	701a      	strb	r2, [r3, #0]
	memcpy(outputDataBuffer+3,&imuFrameData,34);
	pkt_SendRawPacket(outputDataBuffer, 37);	
}
void sendSetImuIdResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     9e6:	2303      	movs	r3, #3
     9e8:	7023      	strb	r3, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_SET_IMU_ID_RESP;
     9ea:	2317      	movs	r3, #23
     9ec:	7063      	strb	r3, [r4, #1]
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     9ee:	1c29      	adds	r1, r5, #0
     9f0:	1ca0      	adds	r0, r4, #2
     9f2:	2210      	movs	r2, #16
     9f4:	4b18      	ldr	r3, [pc, #96]	; (a58 <cmd_processPacket+0xdc>)
     9f6:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 18);	
     9f8:	1c20      	adds	r0, r4, #0
     9fa:	2112      	movs	r1, #18
     9fc:	4b17      	ldr	r3, [pc, #92]	; (a5c <cmd_processPacket+0xe0>)
     9fe:	4798      	blx	r3
     a00:	e7c5      	b.n	98e <cmd_processPacket+0x12>
					sendSetImuIdResponse();
				}				
			break;
			case PACKET_COMMAND_ID_SETUP_MODE:
				//This byte determines whether the device is in setup mode or not. 
				if(packet->payload[2] == 1)
     a02:	7883      	ldrb	r3, [r0, #2]
     a04:	b2db      	uxtb	r3, r3
     a06:	2b01      	cmp	r3, #1
     a08:	d01b      	beq.n	a42 <cmd_processPacket+0xc6>
				{
					settings.setupModeEnabled = true;
				}
				else
				{
					settings.setupModeEnabled = false; 
     a0a:	4b10      	ldr	r3, [pc, #64]	; (a4c <cmd_processPacket+0xd0>)
     a0c:	2200      	movs	r2, #0
     a0e:	745a      	strb	r2, [r3, #17]
     a10:	e7bd      	b.n	98e <cmd_processPacket+0x12>
				//call function here to update the IMU data
				updateImuData(); 
			break;
			case PACKET_COMMAND_ID_GET_FRAME:
				//check if the ID matches the one assigned
				if(packet->payload[2] == settings.sensorId)
     a12:	4b0e      	ldr	r3, [pc, #56]	; (a4c <cmd_processPacket+0xd0>)
     a14:	7882      	ldrb	r2, [r0, #2]
     a16:	781b      	ldrb	r3, [r3, #0]
     a18:	4293      	cmp	r3, r2
     a1a:	d1b8      	bne.n	98e <cmd_processPacket+0x12>
	return STATUS_PASS;
}

void sendImuDataFrame()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     a1c:	4c0c      	ldr	r4, [pc, #48]	; (a50 <cmd_processPacket+0xd4>)
     a1e:	2203      	movs	r2, #3
     a20:	7022      	strb	r2, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_FRAME_RESP;
     a22:	2213      	movs	r2, #19
     a24:	7062      	strb	r2, [r4, #1]
	outputDataBuffer[2] = settings.sensorId;
	memcpy(outputDataBuffer+3,&imuFrameData,34);
     a26:	1ce0      	adds	r0, r4, #3

void sendImuDataFrame()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_FRAME_RESP;
	outputDataBuffer[2] = settings.sensorId;
     a28:	70a3      	strb	r3, [r4, #2]
	memcpy(outputDataBuffer+3,&imuFrameData,34);
     a2a:	490f      	ldr	r1, [pc, #60]	; (a68 <cmd_processPacket+0xec>)
     a2c:	2222      	movs	r2, #34	; 0x22
     a2e:	4b0a      	ldr	r3, [pc, #40]	; (a58 <cmd_processPacket+0xdc>)
     a30:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 37);	
     a32:	1c20      	adds	r0, r4, #0
     a34:	2125      	movs	r1, #37	; 0x25
     a36:	4b09      	ldr	r3, [pc, #36]	; (a5c <cmd_processPacket+0xe0>)
     a38:	4798      	blx	r3
     a3a:	e7a8      	b.n	98e <cmd_processPacket+0x12>
	{
		switch(packet->payload[1])
		{
			case PACKET_COMMAND_ID_UPDATE:
				//call function here to update the IMU data
				updateImuData(); 
     a3c:	4b0b      	ldr	r3, [pc, #44]	; (a6c <cmd_processPacket+0xf0>)
     a3e:	4798      	blx	r3
			break;
     a40:	e7a5      	b.n	98e <cmd_processPacket+0x12>
			break;
			case PACKET_COMMAND_ID_SETUP_MODE:
				//This byte determines whether the device is in setup mode or not. 
				if(packet->payload[2] == 1)
				{
					settings.setupModeEnabled = true;
     a42:	4a02      	ldr	r2, [pc, #8]	; (a4c <cmd_processPacket+0xd0>)
     a44:	7453      	strb	r3, [r2, #17]
     a46:	e7a2      	b.n	98e <cmd_processPacket+0x12>
     a48:	00002ee4 	.word	0x00002ee4
     a4c:	20000298 	.word	0x20000298
     a50:	200000b4 	.word	0x200000b4
     a54:	20000118 	.word	0x20000118
     a58:	00002ec3 	.word	0x00002ec3
     a5c:	00000b55 	.word	0x00000b55
     a60:	20000299 	.word	0x20000299
     a64:	00002ea5 	.word	0x00002ea5
     a68:	2000000c 	.word	0x2000000c
     a6c:	000008d5 	.word	0x000008d5

00000a70 <drv_i2c_init>:

//global variables
volatile drv_i2c_memory_buf_t twiMemBuf[2]; //2 TWIs, 2 buffers
 
int drv_i2c_init(drv_twi_config_t* twi_config)
{
     a70:	b510      	push	{r4, lr}
     a72:	1c04      	adds	r4, r0, #0
	int status = STATUS_PASS;
	
	status = i2c_master_init(&twi_config->module, twi_config->p_i2c, &twi_config->twi_options);
     a74:	1c22      	adds	r2, r4, #0
     a76:	4b11      	ldr	r3, [pc, #68]	; (abc <drv_i2c_init+0x4c>)
     a78:	3004      	adds	r0, #4
     a7a:	3210      	adds	r2, #16
     a7c:	6821      	ldr	r1, [r4, #0]
     a7e:	4798      	blx	r3
	if (status != STATUS_OK)
	{
		//puts("Failed to initialize as master.\r\n");
		return STATUS_FAIL;	//return error
     a80:	2301      	movs	r3, #1
int drv_i2c_init(drv_twi_config_t* twi_config)
{
	int status = STATUS_PASS;
	
	status = i2c_master_init(&twi_config->module, twi_config->p_i2c, &twi_config->twi_options);
	if (status != STATUS_OK)
     a82:	2800      	cmp	r0, #0
     a84:	d001      	beq.n	a8a <drv_i2c_init+0x1a>
	}
	
	i2c_master_enable(&twi_config->module);
	
	return STATUS_PASS;
}
     a86:	1c18      	adds	r0, r3, #0
     a88:	bd10      	pop	{r4, pc}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a8a:	6862      	ldr	r2, [r4, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     a8c:	2107      	movs	r1, #7
     a8e:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     a90:	4219      	tst	r1, r3
     a92:	d1fc      	bne.n	a8e <drv_i2c_init+0x1e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     a94:	6811      	ldr	r1, [r2, #0]
     a96:	2302      	movs	r3, #2
     a98:	430b      	orrs	r3, r1
     a9a:	6013      	str	r3, [r2, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     a9c:	2010      	movs	r0, #16
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     a9e:	2300      	movs	r3, #0
     aa0:	e003      	b.n	aaa <drv_i2c_init+0x3a>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     aa2:	8961      	ldrh	r1, [r4, #10]
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
     aa4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     aa6:	428b      	cmp	r3, r1
     aa8:	d204      	bcs.n	ab4 <drv_i2c_init+0x44>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     aaa:	8b51      	ldrh	r1, [r2, #26]
     aac:	4208      	tst	r0, r1
     aae:	d0f8      	beq.n	aa2 <drv_i2c_init+0x32>
		return STATUS_FAIL;	//return error
	}
	
	i2c_master_enable(&twi_config->module);
	
	return STATUS_PASS;
     ab0:	2300      	movs	r3, #0
     ab2:	e7e8      	b.n	a86 <drv_i2c_init+0x16>
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     ab4:	2310      	movs	r3, #16
     ab6:	8353      	strh	r3, [r2, #26]
     ab8:	2300      	movs	r3, #0
     aba:	e7e4      	b.n	a86 <drv_i2c_init+0x16>
     abc:	000005b1 	.word	0x000005b1

00000ac0 <drv_i2c_write>:
}

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
     ac0:	b510      	push	{r4, lr}
     ac2:	b084      	sub	sp, #16
	int status = STATUS_FAIL;
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
     ac4:	466c      	mov	r4, sp
     ac6:	7021      	strb	r1, [r4, #0]
	dataPacket[1] = data;
     ac8:	7062      	strb	r2, [r4, #1]
	packet.data = &dataPacket[0];
	packet.data_length = 2;
	packet.address = (uint32_t) slave_twi_config->address;
     aca:	6844      	ldr	r4, [r0, #4]
	packet.ten_bit_address = false;
	packet.high_speed = false;	
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     acc:	6880      	ldr	r0, [r0, #8]
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
     ace:	a901      	add	r1, sp, #4

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
	int status = STATUS_FAIL;
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
     ad0:	2300      	movs	r3, #0
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
     ad2:	aa00      	add	r2, sp, #0
     ad4:	604a      	str	r2, [r1, #4]
	packet.data_length = 2;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
     ad6:	720b      	strb	r3, [r1, #8]
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
	packet.data_length = 2;
     ad8:	2202      	movs	r2, #2
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;	
     ada:	724b      	strb	r3, [r1, #9]
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     adc:	3004      	adds	r0, #4
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <drv_i2c_write+0x30>)
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
	packet.data_length = 2;
     ae0:	804a      	strh	r2, [r1, #2]
	packet.address = (uint32_t) slave_twi_config->address;
     ae2:	800c      	strh	r4, [r1, #0]
	packet.ten_bit_address = false;
	packet.high_speed = false;	
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     ae4:	4798      	blx	r3
	if (status != STATUS_OK)
     ae6:	1e43      	subs	r3, r0, #1
     ae8:	4198      	sbcs	r0, r3
	{
		return STATUS_FAIL;
	}
	
	return STATUS_PASS;
}
     aea:	b004      	add	sp, #16
     aec:	bd10      	pop	{r4, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	000007b1 	.word	0x000007b1

00000af4 <drv_i2c_read>:

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     af4:	b5f0      	push	{r4, r5, r6, r7, lr}
     af6:	4647      	mov	r7, r8
     af8:	b480      	push	{r7}
     afa:	b084      	sub	sp, #16
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
     afc:	ac01      	add	r4, sp, #4
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     afe:	1c05      	adds	r5, r0, #0
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     b00:	2000      	movs	r0, #0
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
     b02:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
     b04:	7260      	strb	r0, [r4, #9]
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     b06:	4690      	mov	r8, r2
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b08:	68a8      	ldr	r0, [r5, #8]

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     b0a:	466a      	mov	r2, sp
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     b0c:	1c1f      	adds	r7, r3, #0
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     b0e:	2300      	movs	r3, #0
     b10:	8013      	strh	r3, [r2, #0]
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
     b12:	7011      	strb	r1, [r2, #0]
	packet.data = &dataPacket[0];
     b14:	ab00      	add	r3, sp, #0
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
     b16:	686a      	ldr	r2, [r5, #4]
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
     b18:	9302      	str	r3, [sp, #8]
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b1a:	3004      	adds	r0, #4
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
     b1c:	2301      	movs	r3, #1
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b1e:	1c21      	adds	r1, r4, #0
     b20:	4e0a      	ldr	r6, [pc, #40]	; (b4c <drv_i2c_read+0x58>)
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
     b22:	8063      	strh	r3, [r4, #2]
	packet.address = (uint32_t) slave_twi_config->address;
     b24:	8022      	strh	r2, [r4, #0]
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b26:	47b0      	blx	r6
     b28:	1c03      	adds	r3, r0, #0
	if (status != STATUS_OK)
	{
		return STATUS_FAIL;
     b2a:	2001      	movs	r0, #1
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
	if (status != STATUS_OK)
     b2c:	2b00      	cmp	r3, #0
     b2e:	d109      	bne.n	b44 <drv_i2c_read+0x50>
	}
	
	//initialize the read sequence
	packet.data = data;
	packet.data_length = length;
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b30:	68a8      	ldr	r0, [r5, #8]
	{
		return STATUS_FAIL;
	}
	
	//initialize the read sequence
	packet.data = data;
     b32:	4643      	mov	r3, r8
     b34:	6063      	str	r3, [r4, #4]
	packet.data_length = length;
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b36:	3004      	adds	r0, #4
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <drv_i2c_read+0x5c>)
     b3a:	1c21      	adds	r1, r4, #0
		return STATUS_FAIL;
	}
	
	//initialize the read sequence
	packet.data = data;
	packet.data_length = length;
     b3c:	8067      	strh	r7, [r4, #2]
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     b3e:	4798      	blx	r3
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
	if (status != STATUS_OK)
	{
		return STATUS_FAIL;
     b40:	1e43      	subs	r3, r0, #1
     b42:	4198      	sbcs	r0, r3
	{
		return STATUS_FAIL;
	}
	
	return STATUS_PASS;
}
     b44:	b004      	add	sp, #16
     b46:	bc04      	pop	{r2}
     b48:	4690      	mov	r8, r2
     b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b4c:	000007b1 	.word	0x000007b1
     b50:	0000079d 	.word	0x0000079d

00000b54 <pkt_SendRawPacket>:
	{
		sendByte(byte);
	}
}
void pkt_SendRawPacket(uint8_t* payload, uint16_t payloadSize)
{
     b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b56:	4e34      	ldr	r6, [pc, #208]	; (c28 <pkt_SendRawPacket+0xd4>)
	{
		sendByte(byte);
	}
}
void pkt_SendRawPacket(uint8_t* payload, uint16_t payloadSize)
{
     b58:	4647      	mov	r7, r8
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b5a:	23de      	movs	r3, #222	; 0xde
	{
		sendByte(byte);
	}
}
void pkt_SendRawPacket(uint8_t* payload, uint16_t payloadSize)
{
     b5c:	b480      	push	{r7}
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b5e:	7033      	strb	r3, [r6, #0]

	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
     b60:	b2cb      	uxtb	r3, r1
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     b62:	1c1a      	adds	r2, r3, #0
     b64:	3222      	adds	r2, #34	; 0x22
     b66:	b2d2      	uxtb	r2, r2
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b68:	4f30      	ldr	r7, [pc, #192]	; (c2c <pkt_SendRawPacket+0xd8>)
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     b6a:	2a01      	cmp	r2, #1
     b6c:	d943      	bls.n	bf6 <pkt_SendRawPacket+0xa2>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b6e:	2403      	movs	r4, #3
     b70:	7073      	strb	r3, [r6, #1]
	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
     b72:	0a0b      	lsrs	r3, r1, #8
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b74:	46a0      	mov	r8, r4
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     b76:	1c1c      	adds	r4, r3, #0
     b78:	3422      	adds	r4, #34	; 0x22
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b7a:	2504      	movs	r5, #4
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     b7c:	b2e4      	uxtb	r4, r4
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b7e:	46ac      	mov	ip, r5
     b80:	2203      	movs	r2, #3
     b82:	2502      	movs	r5, #2
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     b84:	2c01      	cmp	r4, #1
     b86:	d945      	bls.n	c14 <pkt_SendRawPacket+0xc0>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b88:	803a      	strh	r2, [r7, #0]
     b8a:	5573      	strb	r3, [r6, r5]
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     b8c:	2900      	cmp	r1, #0
     b8e:	d01e      	beq.n	bce <pkt_SendRawPacket+0x7a>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b90:	25df      	movs	r5, #223	; 0xdf
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     b92:	2300      	movs	r3, #0
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b94:	46ac      	mov	ip, r5
     b96:	e007      	b.n	ba8 <pkt_SendRawPacket+0x54>
     b98:	1c55      	adds	r5, r2, #1
     b9a:	b2ad      	uxth	r5, r5
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     b9c:	3301      	adds	r3, #1
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     b9e:	54b4      	strb	r4, [r6, r2]
     ba0:	803d      	strh	r5, [r7, #0]
     ba2:	1c2a      	adds	r2, r5, #0
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     ba4:	428b      	cmp	r3, r1
     ba6:	da12      	bge.n	bce <pkt_SendRawPacket+0x7a>
	{
		sendByteWithEscape(payload[i]);
     ba8:	5cc4      	ldrb	r4, [r0, r3]
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     baa:	1c25      	adds	r5, r4, #0
     bac:	3522      	adds	r5, #34	; 0x22
     bae:	b2ed      	uxtb	r5, r5
     bb0:	2d01      	cmp	r5, #1
     bb2:	d8f1      	bhi.n	b98 <pkt_SendRawPacket+0x44>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     bb4:	4665      	mov	r5, ip
     bb6:	54b5      	strb	r5, [r6, r2]
     bb8:	1c95      	adds	r5, r2, #2
     bba:	3201      	adds	r2, #1
     bbc:	b2ad      	uxth	r5, r5
     bbe:	b292      	uxth	r2, r2
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     bc0:	3410      	adds	r4, #16
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     bc2:	3301      	adds	r3, #1
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     bc4:	54b4      	strb	r4, [r6, r2]
     bc6:	803d      	strh	r5, [r7, #0]
     bc8:	1c2a      	adds	r2, r5, #0
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     bca:	428b      	cmp	r3, r1
     bcc:	dbec      	blt.n	ba8 <pkt_SendRawPacket+0x54>
	{
		sendByteWithEscape(payload[i]);
	}
	if(pktConfig->transmitEnable != NULL)
     bce:	4c18      	ldr	r4, [pc, #96]	; (c30 <pkt_SendRawPacket+0xdc>)
     bd0:	6821      	ldr	r1, [r4, #0]
     bd2:	684b      	ldr	r3, [r1, #4]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d002      	beq.n	bde <pkt_SendRawPacket+0x8a>
	{
		(*(pktConfig->transmitEnable))();
     bd8:	4798      	blx	r3
     bda:	6821      	ldr	r1, [r4, #0]
     bdc:	883a      	ldrh	r2, [r7, #0]



void sendQueuedPacket()
{
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
     bde:	68c8      	ldr	r0, [r1, #12]
     be0:	4b14      	ldr	r3, [pc, #80]	; (c34 <pkt_SendRawPacket+0xe0>)
     be2:	1c31      	adds	r1, r6, #0
     be4:	4798      	blx	r3
	{
		(*(pktConfig->transmitEnable))();
	}
	sendQueuedPacket();
	//TODO: set gpio for receive mode on RS485
	if(pktConfig->transmitDisable != NULL)
     be6:	6823      	ldr	r3, [r4, #0]
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	2b00      	cmp	r3, #0
     bec:	d000      	beq.n	bf0 <pkt_SendRawPacket+0x9c>
	{
		(*(pktConfig->transmitDisable))();
     bee:	4798      	blx	r3
	}
}
     bf0:	bc04      	pop	{r2}
     bf2:	4690      	mov	r8, r2
     bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     bf6:	3310      	adds	r3, #16
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     bf8:	70b3      	strb	r3, [r6, #2]
     bfa:	2305      	movs	r3, #5
     bfc:	469c      	mov	ip, r3
	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
     bfe:	0a0b      	lsrs	r3, r1, #8
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     c00:	1c1c      	adds	r4, r3, #0
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     c02:	22df      	movs	r2, #223	; 0xdf
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     c04:	3422      	adds	r4, #34	; 0x22
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     c06:	7072      	strb	r2, [r6, #1]
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     c08:	b2e4      	uxtb	r4, r4
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     c0a:	2204      	movs	r2, #4
     c0c:	4690      	mov	r8, r2
     c0e:	2503      	movs	r5, #3
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     c10:	2c01      	cmp	r4, #1
     c12:	d8b9      	bhi.n	b88 <pkt_SendRawPacket+0x34>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     c14:	22df      	movs	r2, #223	; 0xdf
     c16:	5572      	strb	r2, [r6, r5]
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     c18:	3310      	adds	r3, #16
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     c1a:	4662      	mov	r2, ip
     c1c:	4644      	mov	r4, r8
     c1e:	803a      	strh	r2, [r7, #0]
     c20:	5533      	strb	r3, [r6, r4]
     c22:	4662      	mov	r2, ip
     c24:	e7b2      	b.n	b8c <pkt_SendRawPacket+0x38>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000204 	.word	0x20000204
     c2c:	20000200 	.word	0x20000200
     c30:	200002ec 	.word	0x200002ec
     c34:	00001125 	.word	0x00001125

00000c38 <pkt_ProcessIncomingByte>:
	}
}
//

__attribute__((optimize("O0"))) void pkt_ProcessIncomingByte(uint8_t byte)
{
     c38:	b580      	push	{r7, lr}
     c3a:	b082      	sub	sp, #8
     c3c:	af00      	add	r7, sp, #0
     c3e:	1c02      	adds	r2, r0, #0
     c40:	1dfb      	adds	r3, r7, #7
     c42:	701a      	strb	r2, [r3, #0]
	//if byte is start byte
	if(byte == RAW_PACKET_START_BYTE)
     c44:	1dfb      	adds	r3, r7, #7
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	2bde      	cmp	r3, #222	; 0xde
     c4a:	d117      	bne.n	c7c <pkt_ProcessIncomingByte+0x44>
	{
		if(packet.bytesReceived > 0)
     c4c:	4a4a      	ldr	r2, [pc, #296]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c4e:	23ca      	movs	r3, #202	; 0xca
     c50:	5ad3      	ldrh	r3, [r2, r3]
     c52:	b29b      	uxth	r3, r3
     c54:	2b00      	cmp	r3, #0
     c56:	d004      	beq.n	c62 <pkt_ProcessIncomingByte+0x2a>
		{
			//this means there was an error receiving a packet
			debugStructure.receiveErrorCount++;
     c58:	4b48      	ldr	r3, [pc, #288]	; (d7c <pkt_ProcessIncomingByte+0x144>)
     c5a:	685b      	ldr	r3, [r3, #4]
     c5c:	1c5a      	adds	r2, r3, #1
     c5e:	4b47      	ldr	r3, [pc, #284]	; (d7c <pkt_ProcessIncomingByte+0x144>)
     c60:	605a      	str	r2, [r3, #4]
		}
		//reset the counts and everything for reception of the packet
		packet.bytesReceived = 0;
     c62:	4a45      	ldr	r2, [pc, #276]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c64:	23ca      	movs	r3, #202	; 0xca
     c66:	2100      	movs	r1, #0
     c68:	52d1      	strh	r1, [r2, r3]
		packet.escapeFlag = false;
     c6a:	4a43      	ldr	r2, [pc, #268]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c6c:	23cc      	movs	r3, #204	; 0xcc
     c6e:	2100      	movs	r1, #0
     c70:	54d1      	strb	r1, [r2, r3]
		packet.payloadSize = 0;
     c72:	4a41      	ldr	r2, [pc, #260]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c74:	23c8      	movs	r3, #200	; 0xc8
     c76:	2100      	movs	r1, #0
     c78:	52d1      	strh	r1, [r2, r3]
		return;
     c7a:	e07a      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
	}
	//if byte is escape byte
	if(byte == RAW_PACKET_ESCAPE_BYTE)
     c7c:	1dfb      	adds	r3, r7, #7
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	2bdf      	cmp	r3, #223	; 0xdf
     c82:	d104      	bne.n	c8e <pkt_ProcessIncomingByte+0x56>
	{
		//set escape flag, so the next byte is properly offset.
		packet.escapeFlag = true;
     c84:	4a3c      	ldr	r2, [pc, #240]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c86:	23cc      	movs	r3, #204	; 0xcc
     c88:	2101      	movs	r1, #1
     c8a:	54d1      	strb	r1, [r2, r3]
		return;
     c8c:	e071      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
	}
	
	//if escape byte flag is set
	if(packet.escapeFlag == true)
     c8e:	4a3a      	ldr	r2, [pc, #232]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     c90:	23cc      	movs	r3, #204	; 0xcc
     c92:	5cd3      	ldrb	r3, [r2, r3]
     c94:	b2db      	uxtb	r3, r3
     c96:	2b00      	cmp	r3, #0
     c98:	d009      	beq.n	cae <pkt_ProcessIncomingByte+0x76>
	{
		//un-escape the byte and process it as any other byte.
		byte = byte - RAW_PACKET_ESCAPE_OFFSET;
     c9a:	1dfb      	adds	r3, r7, #7
     c9c:	1dfa      	adds	r2, r7, #7
     c9e:	7812      	ldrb	r2, [r2, #0]
     ca0:	3a10      	subs	r2, #16
     ca2:	701a      	strb	r2, [r3, #0]
		//unset the flag
		packet.escapeFlag = false;
     ca4:	4a34      	ldr	r2, [pc, #208]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     ca6:	23cc      	movs	r3, #204	; 0xcc
     ca8:	2100      	movs	r1, #0
     caa:	54d1      	strb	r1, [r2, r3]
		return;
     cac:	e061      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
	}
	
	//if receive count is  0
	if(packet.bytesReceived == 0)
     cae:	4a32      	ldr	r2, [pc, #200]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     cb0:	23ca      	movs	r3, #202	; 0xca
     cb2:	5ad3      	ldrh	r3, [r2, r3]
     cb4:	b29b      	uxth	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	d115      	bne.n	ce6 <pkt_ProcessIncomingByte+0xae>
	{
		//this is the first byte of the payload size
		//copy byte to LSB of the payload size
		packet.payloadSize |= (uint16_t)byte;
     cba:	4a2f      	ldr	r2, [pc, #188]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     cbc:	23c8      	movs	r3, #200	; 0xc8
     cbe:	5ad3      	ldrh	r3, [r2, r3]
     cc0:	b29a      	uxth	r2, r3
     cc2:	1dfb      	adds	r3, r7, #7
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	b29b      	uxth	r3, r3
     cc8:	4313      	orrs	r3, r2
     cca:	b299      	uxth	r1, r3
     ccc:	4a2a      	ldr	r2, [pc, #168]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     cce:	23c8      	movs	r3, #200	; 0xc8
     cd0:	52d1      	strh	r1, [r2, r3]
		//increment received count
		packet.bytesReceived++;
     cd2:	4a29      	ldr	r2, [pc, #164]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     cd4:	23ca      	movs	r3, #202	; 0xca
     cd6:	5ad3      	ldrh	r3, [r2, r3]
     cd8:	b29b      	uxth	r3, r3
     cda:	3301      	adds	r3, #1
     cdc:	b299      	uxth	r1, r3
     cde:	4a26      	ldr	r2, [pc, #152]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     ce0:	23ca      	movs	r3, #202	; 0xca
     ce2:	52d1      	strh	r1, [r2, r3]
     ce4:	e045      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
	}
	else if(packet.bytesReceived == 1)
     ce6:	4a24      	ldr	r2, [pc, #144]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     ce8:	23ca      	movs	r3, #202	; 0xca
     cea:	5ad3      	ldrh	r3, [r2, r3]
     cec:	b29b      	uxth	r3, r3
     cee:	2b01      	cmp	r3, #1
     cf0:	d117      	bne.n	d22 <pkt_ProcessIncomingByte+0xea>
	{
		//this is the second byte of the payload size
		//copy byte to MSB of the payload size
		packet.payloadSize |= (uint16_t)(byte<<8);
     cf2:	4a21      	ldr	r2, [pc, #132]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     cf4:	23c8      	movs	r3, #200	; 0xc8
     cf6:	5ad3      	ldrh	r3, [r2, r3]
     cf8:	b29a      	uxth	r2, r3
     cfa:	1dfb      	adds	r3, r7, #7
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	b29b      	uxth	r3, r3
     d00:	021b      	lsls	r3, r3, #8
     d02:	b29b      	uxth	r3, r3
     d04:	4313      	orrs	r3, r2
     d06:	b299      	uxth	r1, r3
     d08:	4a1b      	ldr	r2, [pc, #108]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d0a:	23c8      	movs	r3, #200	; 0xc8
     d0c:	52d1      	strh	r1, [r2, r3]
		//increment received count
		packet.bytesReceived++;
     d0e:	4a1a      	ldr	r2, [pc, #104]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d10:	23ca      	movs	r3, #202	; 0xca
     d12:	5ad3      	ldrh	r3, [r2, r3]
     d14:	b29b      	uxth	r3, r3
     d16:	3301      	adds	r3, #1
     d18:	b299      	uxth	r1, r3
     d1a:	4a17      	ldr	r2, [pc, #92]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d1c:	23ca      	movs	r3, #202	; 0xca
     d1e:	52d1      	strh	r1, [r2, r3]
     d20:	e027      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
	}
	else
	{	//copy byte to payload at point receivedBytes - 2
		packet.payload[packet.bytesReceived - 2] = byte;
     d22:	4a15      	ldr	r2, [pc, #84]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d24:	23ca      	movs	r3, #202	; 0xca
     d26:	5ad3      	ldrh	r3, [r2, r3]
     d28:	b29b      	uxth	r3, r3
     d2a:	3b02      	subs	r3, #2
     d2c:	4a12      	ldr	r2, [pc, #72]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d2e:	1df9      	adds	r1, r7, #7
     d30:	7809      	ldrb	r1, [r1, #0]
     d32:	54d1      	strb	r1, [r2, r3]
		//check if we received the whole packet.
		if(packet.bytesReceived-1 == packet.payloadSize)
     d34:	4a10      	ldr	r2, [pc, #64]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d36:	23ca      	movs	r3, #202	; 0xca
     d38:	5ad3      	ldrh	r3, [r2, r3]
     d3a:	b29b      	uxth	r3, r3
     d3c:	1e5a      	subs	r2, r3, #1
     d3e:	490e      	ldr	r1, [pc, #56]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d40:	23c8      	movs	r3, #200	; 0xc8
     d42:	5acb      	ldrh	r3, [r1, r3]
     d44:	b29b      	uxth	r3, r3
     d46:	429a      	cmp	r2, r3
     d48:	d10a      	bne.n	d60 <pkt_ProcessIncomingByte+0x128>
		{
			//process the packet
			pktConfig->packetReceivedCallback(&packet);
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <pkt_ProcessIncomingByte+0x148>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	689b      	ldr	r3, [r3, #8]
     d50:	4a09      	ldr	r2, [pc, #36]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d52:	1c10      	adds	r0, r2, #0
     d54:	4798      	blx	r3
			//reset everything to zero
			packet.bytesReceived = 0;
     d56:	4a08      	ldr	r2, [pc, #32]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d58:	23ca      	movs	r3, #202	; 0xca
     d5a:	2100      	movs	r1, #0
     d5c:	52d1      	strh	r1, [r2, r3]
     d5e:	e008      	b.n	d72 <pkt_ProcessIncomingByte+0x13a>
		}
		else
		{
			packet.bytesReceived++;
     d60:	4a05      	ldr	r2, [pc, #20]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d62:	23ca      	movs	r3, #202	; 0xca
     d64:	5ad3      	ldrh	r3, [r2, r3]
     d66:	b29b      	uxth	r3, r3
     d68:	3301      	adds	r3, #1
     d6a:	b299      	uxth	r1, r3
     d6c:	4a02      	ldr	r2, [pc, #8]	; (d78 <pkt_ProcessIncomingByte+0x140>)
     d6e:	23ca      	movs	r3, #202	; 0xca
     d70:	52d1      	strh	r1, [r2, r3]
		}
	}
	
}
     d72:	46bd      	mov	sp, r7
     d74:	b002      	add	sp, #8
     d76:	bd80      	pop	{r7, pc}
     d78:	20000130 	.word	0x20000130
     d7c:	20000118 	.word	0x20000118
     d80:	200002ec 	.word	0x200002ec

00000d84 <pkt_packetParserInit>:
void pkt_packetParserInit(pkt_packetParserConfiguration_t* config)
{
	pktConfig = config;
     d84:	4b01      	ldr	r3, [pc, #4]	; (d8c <pkt_packetParserInit+0x8>)
     d86:	6018      	str	r0, [r3, #0]
}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	200002ec 	.word	0x200002ec

00000d90 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d90:	b5f0      	push	{r4, r5, r6, r7, lr}
     d92:	4644      	mov	r4, r8
     d94:	465f      	mov	r7, fp
     d96:	4656      	mov	r6, sl
     d98:	464d      	mov	r5, r9
     d9a:	b4f0      	push	{r4, r5, r6, r7}
     d9c:	1c05      	adds	r5, r0, #0
     d9e:	b093      	sub	sp, #76	; 0x4c
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     da0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     da2:	1c08      	adds	r0, r1, #0
     da4:	4fb2      	ldr	r7, [pc, #712]	; (1070 <usart_init+0x2e0>)
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     da6:	1c0c      	adds	r4, r1, #0
     da8:	4690      	mov	r8, r2
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     daa:	47b8      	blx	r7
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     dac:	6822      	ldr	r2, [r4, #0]
     dae:	2301      	movs	r3, #1
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     db0:	1c06      	adds	r6, r0, #0
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     db2:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     db4:	4213      	tst	r3, r2
     db6:	d006      	beq.n	dc6 <usart_init+0x36>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     db8:	b013      	add	sp, #76	; 0x4c
     dba:	bc3c      	pop	{r2, r3, r4, r5}
     dbc:	4690      	mov	r8, r2
     dbe:	4699      	mov	r9, r3
     dc0:	46a2      	mov	sl, r4
     dc2:	46ab      	mov	fp, r5
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     dc6:	6822      	ldr	r2, [r4, #0]
     dc8:	2102      	movs	r1, #2
     dca:	4011      	ands	r1, r2
     dcc:	468a      	mov	sl, r1
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     dce:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     dd0:	2900      	cmp	r1, #0
     dd2:	d1f1      	bne.n	db8 <usart_init+0x28>
     dd4:	4aa7      	ldr	r2, [pc, #668]	; (1074 <usart_init+0x2e4>)
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     dd6:	1cb0      	adds	r0, r6, #2
     dd8:	6a11      	ldr	r1, [r2, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     dda:	4083      	lsls	r3, r0
     ddc:	430b      	orrs	r3, r1
     dde:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     de0:	222d      	movs	r2, #45	; 0x2d
     de2:	4691      	mov	r9, r2
     de4:	4642      	mov	r2, r8
     de6:	444a      	add	r2, r9
     de8:	7813      	ldrb	r3, [r2, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dea:	360e      	adds	r6, #14
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     dec:	a90a      	add	r1, sp, #40	; 0x28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     dee:	b2f6      	uxtb	r6, r6
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     df0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     df2:	1c30      	adds	r0, r6, #0
     df4:	4ba0      	ldr	r3, [pc, #640]	; (1078 <usart_init+0x2e8>)
     df6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     df8:	1c30      	adds	r0, r6, #0
     dfa:	4ba0      	ldr	r3, [pc, #640]	; (107c <usart_init+0x2ec>)
     dfc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     dfe:	4643      	mov	r3, r8
     e00:	444b      	add	r3, r9

	/* Set character size */
	module->character_size = config->character_size;
     e02:	4646      	mov	r6, r8
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);
     e04:	7818      	ldrb	r0, [r3, #0]
     e06:	2100      	movs	r1, #0
     e08:	4b9d      	ldr	r3, [pc, #628]	; (1080 <usart_init+0x2f0>)
     e0a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     e0c:	7af3      	ldrb	r3, [r6, #11]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e0e:	6829      	ldr	r1, [r5, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Set character size */
	module->character_size = config->character_size;
     e10:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     e12:	2324      	movs	r3, #36	; 0x24
     e14:	5cf3      	ldrb	r3, [r6, r3]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e16:	1c08      	adds	r0, r1, #0

	/* Set character size */
	module->character_size = config->character_size;

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     e18:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e1a:	2325      	movs	r3, #37	; 0x25
     e1c:	5cf3      	ldrb	r3, [r6, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e1e:	4689      	mov	r9, r1
	/* Set character size */
	module->character_size = config->character_size;

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
	module->transmitter_enabled = config->transmitter_enable;
     e20:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     e22:	7ef3      	ldrb	r3, [r6, #27]
     e24:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e26:	7f33      	ldrb	r3, [r6, #28]
     e28:	726b      	strb	r3, [r5, #9]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e2a:	47b8      	blx	r7
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     e2c:	4653      	mov	r3, sl
     e2e:	466a      	mov	r2, sp
     e30:	8713      	strh	r3, [r2, #56]	; 0x38

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     e32:	8a36      	ldrh	r6, [r6, #16]
     e34:	2380      	movs	r3, #128	; 0x80
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e36:	300e      	adds	r0, #14

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     e38:	46b2      	mov	sl, r6
     e3a:	01db      	lsls	r3, r3, #7
     e3c:	429e      	cmp	r6, r3
     e3e:	d100      	bne.n	e42 <usart_init+0xb2>
     e40:	e0cd      	b.n	fde <usart_init+0x24e>
     e42:	d800      	bhi.n	e46 <usart_init+0xb6>
     e44:	e0e7      	b.n	1016 <usart_init+0x286>
     e46:	23c0      	movs	r3, #192	; 0xc0
     e48:	01db      	lsls	r3, r3, #7
     e4a:	429e      	cmp	r6, r3
     e4c:	d100      	bne.n	e50 <usart_init+0xc0>
     e4e:	e0ee      	b.n	102e <usart_init+0x29e>
     e50:	2380      	movs	r3, #128	; 0x80
     e52:	021b      	lsls	r3, r3, #8
     e54:	429e      	cmp	r6, r3
     e56:	d000      	beq.n	e5a <usart_init+0xca>
     e58:	e0e5      	b.n	1026 <usart_init+0x296>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e5a:	2603      	movs	r6, #3
     e5c:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e5e:	2600      	movs	r6, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e60:	4641      	mov	r1, r8
		(uint32_t)config->mux_setting |
     e62:	4642      	mov	r2, r8
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e64:	4643      	mov	r3, r8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e66:	6809      	ldr	r1, [r1, #0]
		(uint32_t)config->mux_setting |
     e68:	68d2      	ldr	r2, [r2, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e6a:	695b      	ldr	r3, [r3, #20]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e6c:	9102      	str	r1, [sp, #8]
		(uint32_t)config->mux_setting |
     e6e:	9203      	str	r2, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e70:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e72:	4641      	mov	r1, r8
     e74:	7e09      	ldrb	r1, [r1, #24]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e76:	4642      	mov	r2, r8
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e78:	9105      	str	r1, [sp, #20]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e7a:	2326      	movs	r3, #38	; 0x26
     e7c:	5cd3      	ldrb	r3, [r2, r3]
     e7e:	9306      	str	r3, [sp, #24]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e80:	6853      	ldr	r3, [r2, #4]
     e82:	469b      	mov	fp, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e84:	2b00      	cmp	r3, #0
     e86:	d100      	bne.n	e8a <usart_init+0xfa>
     e88:	e0b2      	b.n	ff0 <usart_init+0x260>
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	055b      	lsls	r3, r3, #21
     e8e:	459b      	cmp	fp, r3
     e90:	d000      	beq.n	e94 <usart_init+0x104>
     e92:	e0ab      	b.n	fec <usart_init+0x25c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e94:	2327      	movs	r3, #39	; 0x27
     e96:	5cd3      	ldrb	r3, [r2, r3]
     e98:	2100      	movs	r1, #0
     e9a:	2b00      	cmp	r3, #0
     e9c:	d100      	bne.n	ea0 <usart_init+0x110>
     e9e:	e0dc      	b.n	105a <usart_init+0x2ca>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     ea0:	4646      	mov	r6, r8
     ea2:	7e73      	ldrb	r3, [r6, #25]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d002      	beq.n	eae <usart_init+0x11e>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ea8:	7eb3      	ldrb	r3, [r6, #26]
     eaa:	464a      	mov	r2, r9
     eac:	7393      	strb	r3, [r2, #14]
     eae:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eb0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     eb2:	2b00      	cmp	r3, #0
     eb4:	d1fc      	bne.n	eb0 <usart_init+0x120>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eb6:	464b      	mov	r3, r9
     eb8:	8199      	strh	r1, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     eba:	9e02      	ldr	r6, [sp, #8]
     ebc:	9903      	ldr	r1, [sp, #12]
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ebe:	465a      	mov	r2, fp
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ec0:	4331      	orrs	r1, r6
		(uint32_t)config->mux_setting |
     ec2:	9e04      	ldr	r6, [sp, #16]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     ec4:	4653      	mov	r3, sl
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
     ec6:	4331      	orrs	r1, r6
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ec8:	9e05      	ldr	r6, [sp, #20]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     eca:	4311      	orrs	r1, r2
		config->sample_rate |
     ecc:	4319      	orrs	r1, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ece:	0233      	lsls	r3, r6, #8
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ed0:	9e06      	ldr	r6, [sp, #24]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ed2:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ed4:	0773      	lsls	r3, r6, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     ed6:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     ed8:	4642      	mov	r2, r8
     eda:	2327      	movs	r3, #39	; 0x27
     edc:	5cd3      	ldrb	r3, [r2, r3]
     ede:	2b00      	cmp	r3, #0
     ee0:	d101      	bne.n	ee6 <usart_init+0x156>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ee2:	2304      	movs	r3, #4
     ee4:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ee6:	4643      	mov	r3, r8
     ee8:	7f18      	ldrb	r0, [r3, #28]
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     eea:	7e5b      	ldrb	r3, [r3, #25]
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     eec:	4646      	mov	r6, r8
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     eee:	029b      	lsls	r3, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ef0:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ef2:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ef4:	7f73      	ldrb	r3, [r6, #29]
     ef6:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ef8:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     efa:	2324      	movs	r3, #36	; 0x24
     efc:	5cf3      	ldrb	r3, [r6, r3]
     efe:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f00:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f02:	2325      	movs	r3, #37	; 0x25
     f04:	5cf3      	ldrb	r3, [r6, r3]
     f06:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f08:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     f0a:	7af3      	ldrb	r3, [r6, #11]
     f0c:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f0e:	8933      	ldrh	r3, [r6, #8]
     f10:	2bff      	cmp	r3, #255	; 0xff
     f12:	d100      	bne.n	f16 <usart_init+0x186>
     f14:	e08f      	b.n	1036 <usart_init+0x2a6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f16:	2280      	movs	r2, #128	; 0x80
     f18:	0452      	lsls	r2, r2, #17
     f1a:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
     f1c:	4318      	orrs	r0, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f1e:	232c      	movs	r3, #44	; 0x2c
     f20:	4646      	mov	r6, r8
     f22:	5cf3      	ldrb	r3, [r6, r3]
     f24:	2b00      	cmp	r3, #0
     f26:	d103      	bne.n	f30 <usart_init+0x1a0>
     f28:	4b56      	ldr	r3, [pc, #344]	; (1084 <usart_init+0x2f4>)
     f2a:	789b      	ldrb	r3, [r3, #2]
     f2c:	079a      	lsls	r2, r3, #30
     f2e:	d501      	bpl.n	f34 <usart_init+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f30:	2380      	movs	r3, #128	; 0x80
     f32:	4319      	orrs	r1, r3
     f34:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f36:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f38:	2b00      	cmp	r3, #0
     f3a:	d1fc      	bne.n	f36 <usart_init+0x1a6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f3c:	464b      	mov	r3, r9
     f3e:	6058      	str	r0, [r3, #4]
     f40:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f42:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f44:	2b00      	cmp	r3, #0
     f46:	d1fc      	bne.n	f42 <usart_init+0x1b2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f48:	464e      	mov	r6, r9
     f4a:	6031      	str	r1, [r6, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     f4c:	4641      	mov	r1, r8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f4e:	ae0c      	add	r6, sp, #48	; 0x30
     f50:	6b09      	ldr	r1, [r1, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f52:	7073      	strb	r3, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f54:	70f3      	strb	r3, [r6, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f56:	70b3      	strb	r3, [r6, #2]

	uint32_t pad_pinmuxes[] = {
     f58:	4643      	mov	r3, r8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f5a:	2280      	movs	r2, #128	; 0x80
     f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     f5e:	910e      	str	r1, [sp, #56]	; 0x38
     f60:	4641      	mov	r1, r8
     f62:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
     f64:	7032      	strb	r2, [r6, #0]
     f66:	4642      	mov	r2, r8
     f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
     f6a:	9310      	str	r3, [sp, #64]	; 0x40
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f6c:	4b46      	ldr	r3, [pc, #280]	; (1088 <usart_init+0x2f8>)
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     f6e:	9111      	str	r1, [sp, #68]	; 0x44
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f70:	4946      	ldr	r1, [pc, #280]	; (108c <usart_init+0x2fc>)
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     f72:	920f      	str	r2, [sp, #60]	; 0x3c
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f74:	469b      	mov	fp, r3
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     f76:	2200      	movs	r2, #0
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f78:	1c23      	adds	r3, r4, #0
     f7a:	468a      	mov	sl, r1
     f7c:	1c14      	adds	r4, r2, #0
     f7e:	4698      	mov	r8, r3
     f80:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f82:	aa0e      	add	r2, sp, #56	; 0x38
     f84:	58d0      	ldr	r0, [r2, r3]
     f86:	b2e1      	uxtb	r1, r4

		if (current_pinmux == PINMUX_DEFAULT) {
     f88:	2800      	cmp	r0, #0
     f8a:	d02c      	beq.n	fe6 <usart_init+0x256>
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f8c:	1c43      	adds	r3, r0, #1
     f8e:	d004      	beq.n	f9a <usart_init+0x20a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f90:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f92:	0c00      	lsrs	r0, r0, #16
     f94:	b2c0      	uxtb	r0, r0
     f96:	1c31      	adds	r1, r6, #0
     f98:	47d0      	blx	sl
     f9a:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f9c:	2c04      	cmp	r4, #4
     f9e:	d1ef      	bne.n	f80 <usart_init+0x1f0>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fa0:	1c28      	adds	r0, r5, #0
     fa2:	2100      	movs	r1, #0
     fa4:	2218      	movs	r2, #24
     fa6:	4b3a      	ldr	r3, [pc, #232]	; (1090 <usart_init+0x300>)
     fa8:	300c      	adds	r0, #12
     faa:	4798      	blx	r3
	}

	module->tx_buffer_ptr              = NULL;
     fac:	2200      	movs	r2, #0
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
     fae:	85ea      	strh	r2, [r5, #46]	; 0x2e
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
     fb0:	62aa      	str	r2, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fb2:	626a      	str	r2, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb4:	2300      	movs	r3, #0
	module->remaining_rx_buffer_length = 0x0000;
     fb6:	85aa      	strh	r2, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fb8:	2230      	movs	r2, #48	; 0x30
     fba:	54ab      	strb	r3, [r5, r2]
	module->callback_enable_mask       = 0x00;
     fbc:	2231      	movs	r2, #49	; 0x31
     fbe:	54ab      	strb	r3, [r5, r2]
	module->rx_status                  = STATUS_OK;
     fc0:	2232      	movs	r2, #50	; 0x32
     fc2:	54ab      	strb	r3, [r5, r2]
	module->tx_status                  = STATUS_OK;
     fc4:	2233      	movs	r2, #51	; 0x33
     fc6:	54ab      	strb	r3, [r5, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fc8:	6828      	ldr	r0, [r5, #0]
     fca:	47b8      	blx	r7
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fcc:	4b31      	ldr	r3, [pc, #196]	; (1094 <usart_init+0x304>)
     fce:	4932      	ldr	r1, [pc, #200]	; (1098 <usart_init+0x308>)
	module->rx_status                  = STATUS_OK;
	module->tx_status                  = STATUS_OK;

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fd0:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fd4:	4b31      	ldr	r3, [pc, #196]	; (109c <usart_init+0x30c>)
     fd6:	00a4      	lsls	r4, r4, #2
     fd8:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     fda:	2000      	movs	r0, #0
     fdc:	e6ec      	b.n	db8 <usart_init+0x28>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fde:	2608      	movs	r6, #8
     fe0:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe2:	2600      	movs	r6, #0
     fe4:	e73c      	b.n	e60 <usart_init+0xd0>
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fe6:	4640      	mov	r0, r8
     fe8:	47d8      	blx	fp
     fea:	e7cf      	b.n	f8c <usart_init+0x1fc>
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     fec:	2100      	movs	r1, #0
     fee:	e757      	b.n	ea0 <usart_init+0x110>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ff0:	2327      	movs	r3, #39	; 0x27
     ff2:	4642      	mov	r2, r8
     ff4:	5cd3      	ldrb	r3, [r2, r3]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d025      	beq.n	1046 <usart_init+0x2b6>
				status_code =
     ffa:	9b08      	ldr	r3, [sp, #32]
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	6a10      	ldr	r0, [r2, #32]
    1000:	6a91      	ldr	r1, [r2, #40]	; 0x28
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1002:	1c33      	adds	r3, r6, #0
    1004:	aa0e      	add	r2, sp, #56	; 0x38
    1006:	4e26      	ldr	r6, [pc, #152]	; (10a0 <usart_init+0x310>)
    1008:	47b0      	blx	r6

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    100a:	2800      	cmp	r0, #0
    100c:	d000      	beq.n	1010 <usart_init+0x280>
    100e:	e6d3      	b.n	db8 <usart_init+0x28>
    1010:	466a      	mov	r2, sp
    1012:	8f11      	ldrh	r1, [r2, #56]	; 0x38
    1014:	e744      	b.n	ea0 <usart_init+0x110>

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1016:	2380      	movs	r3, #128	; 0x80
    1018:	019b      	lsls	r3, r3, #6
    101a:	429e      	cmp	r6, r3
    101c:	d103      	bne.n	1026 <usart_init+0x296>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    101e:	2610      	movs	r6, #16
    1020:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1022:	2601      	movs	r6, #1
    1024:	e71c      	b.n	e60 <usart_init+0xd0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1026:	2610      	movs	r6, #16
    1028:	9608      	str	r6, [sp, #32]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    102a:	2600      	movs	r6, #0
    102c:	e718      	b.n	e60 <usart_init+0xd0>
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    102e:	2608      	movs	r6, #8
    1030:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1032:	2601      	movs	r6, #1
    1034:	e714      	b.n	e60 <usart_init+0xd0>
	if (config->parity != USART_PARITY_NONE) {
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
		ctrlb |= config->parity;
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1036:	7ef3      	ldrb	r3, [r6, #27]
    1038:	2b00      	cmp	r3, #0
    103a:	d100      	bne.n	103e <usart_init+0x2ae>
    103c:	e76f      	b.n	f1e <usart_init+0x18e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	04db      	lsls	r3, r3, #19
    1042:	4319      	orrs	r1, r3
    1044:	e76b      	b.n	f1e <usart_init+0x18e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1046:	6a11      	ldr	r1, [r2, #32]
    1048:	b2c0      	uxtb	r0, r0
    104a:	4b16      	ldr	r3, [pc, #88]	; (10a4 <usart_init+0x314>)
    104c:	9109      	str	r1, [sp, #36]	; 0x24
    104e:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1050:	9a08      	ldr	r2, [sp, #32]
						_sercom_get_async_baud_val(config->baudrate,
    1052:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1054:	9200      	str	r2, [sp, #0]
    1056:	9809      	ldr	r0, [sp, #36]	; 0x24
    1058:	e7d3      	b.n	1002 <usart_init+0x272>
#endif
	switch (transfer_mode)
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    105a:	4b12      	ldr	r3, [pc, #72]	; (10a4 <usart_init+0x314>)
    105c:	b2c0      	uxtb	r0, r0
    105e:	6a16      	ldr	r6, [r2, #32]
    1060:	4798      	blx	r3
    1062:	aa0e      	add	r2, sp, #56	; 0x38
    1064:	1c01      	adds	r1, r0, #0
    1066:	4b10      	ldr	r3, [pc, #64]	; (10a8 <usart_init+0x318>)
    1068:	1c30      	adds	r0, r6, #0
    106a:	4798      	blx	r3
    106c:	e7cd      	b.n	100a <usart_init+0x27a>
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	000017dd 	.word	0x000017dd
    1074:	40000400 	.word	0x40000400
    1078:	00001d5d 	.word	0x00001d5d
    107c:	00001dc1 	.word	0x00001dc1
    1080:	00001719 	.word	0x00001719
    1084:	41002000 	.word	0x41002000
    1088:	00001765 	.word	0x00001765
    108c:	00001e99 	.word	0x00001e99
    1090:	00002ed5 	.word	0x00002ed5
    1094:	000017fd 	.word	0x000017fd
    1098:	000011d5 	.word	0x000011d5
    109c:	200002f0 	.word	0x200002f0
    10a0:	00001519 	.word	0x00001519
    10a4:	00001df1 	.word	0x00001df1
    10a8:	000014ed 	.word	0x000014ed

000010ac <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    10ac:	b510      	push	{r4, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    10ae:	7982      	ldrb	r2, [r0, #6]
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    10b0:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10b2:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
		return STATUS_ERR_DENIED;
    10b4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    10b6:	2a00      	cmp	r2, #0
    10b8:	d100      	bne.n	10bc <usart_read_wait+0x10>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    10ba:	bd10      	pop	{r4, pc}
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		return STATUS_BUSY;
    10be:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d1fa      	bne.n	10ba <usart_read_wait+0xe>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10c4:	7e23      	ldrb	r3, [r4, #24]
    10c6:	075a      	lsls	r2, r3, #29
    10c8:	d5f7      	bpl.n	10ba <usart_read_wait+0xe>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10ca:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10cc:	2b00      	cmp	r3, #0
    10ce:	d1fc      	bne.n	10ca <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10d0:	8b63      	ldrh	r3, [r4, #26]
    10d2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10d4:	069a      	lsls	r2, r3, #26
    10d6:	d005      	beq.n	10e4 <usart_read_wait+0x38>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10d8:	2202      	movs	r2, #2
    10da:	421a      	tst	r2, r3
    10dc:	d006      	beq.n	10ec <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10de:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    10e0:	201a      	movs	r0, #26
    10e2:	e7ea      	b.n	10ba <usart_read_wait+0xe>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28

	return STATUS_OK;
    10e6:	2000      	movs	r0, #0
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10e8:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    10ea:	e7e6      	b.n	10ba <usart_read_wait+0xe>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;

			return STATUS_ERR_BAD_FORMAT;
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10ec:	2204      	movs	r2, #4
    10ee:	421a      	tst	r2, r3
    10f0:	d002      	beq.n	10f8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10f2:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    10f4:	201e      	movs	r0, #30
    10f6:	e7e0      	b.n	10ba <usart_read_wait+0xe>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10f8:	2201      	movs	r2, #1
    10fa:	421a      	tst	r2, r3
    10fc:	d002      	beq.n	1104 <usart_read_wait+0x58>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10fe:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1100:	2013      	movs	r0, #19
    1102:	e7da      	b.n	10ba <usart_read_wait+0xe>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1104:	2210      	movs	r2, #16
    1106:	4213      	tst	r3, r2
    1108:	d004      	beq.n	1114 <usart_read_wait+0x68>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    110a:	8b63      	ldrh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    110c:	2042      	movs	r0, #66	; 0x42
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    110e:	431a      	orrs	r2, r3
    1110:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1112:	e7d2      	b.n	10ba <usart_read_wait+0xe>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1114:	2220      	movs	r2, #32
    1116:	4213      	tst	r3, r2
    1118:	d0e4      	beq.n	10e4 <usart_read_wait+0x38>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    111a:	8b63      	ldrh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    111c:	2041      	movs	r0, #65	; 0x41
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    111e:	431a      	orrs	r2, r3
    1120:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1122:	e7ca      	b.n	10ba <usart_read_wait+0xe>

00001124 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	4647      	mov	r7, r8
    1128:	b480      	push	{r7}
    112a:	1c07      	adds	r7, r0, #0
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    112c:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    112e:	2a00      	cmp	r2, #0
    1130:	d102      	bne.n	1138 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1132:	bc04      	pop	{r2}
    1134:	4690      	mov	r8, r2
    1136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1138:	79fb      	ldrb	r3, [r7, #7]
		return STATUS_ERR_DENIED;
    113a:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    113c:	2b00      	cmp	r3, #0
    113e:	d0f8      	beq.n	1132 <usart_write_buffer_wait+0xe>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1140:	683d      	ldr	r5, [r7, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1142:	69eb      	ldr	r3, [r5, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1144:	2b00      	cmp	r3, #0
    1146:	d1fc      	bne.n	1142 <usart_write_buffer_wait+0x1e>
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1148:	2302      	movs	r3, #2
    114a:	4694      	mov	ip, r2
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    114c:	2601      	movs	r6, #1
    114e:	2200      	movs	r2, #0
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1150:	4698      	mov	r8, r3
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1152:	7e2b      	ldrb	r3, [r5, #24]
    1154:	421e      	tst	r6, r3
    1156:	d107      	bne.n	1168 <usart_write_buffer_wait+0x44>
    1158:	4b1d      	ldr	r3, [pc, #116]	; (11d0 <usart_write_buffer_wait+0xac>)
    115a:	e002      	b.n	1162 <usart_write_buffer_wait+0x3e>
    115c:	3b01      	subs	r3, #1
				break;
			} else if (i == USART_TIMEOUT) {
    115e:	2b00      	cmp	r3, #0
    1160:	d034      	beq.n	11cc <usart_write_buffer_wait+0xa8>
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1162:	7e2c      	ldrb	r4, [r5, #24]
    1164:	4226      	tst	r6, r4
    1166:	d0f9      	beq.n	115c <usart_write_buffer_wait+0x38>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1168:	797c      	ldrb	r4, [r7, #5]
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    116a:	1c50      	adds	r0, r2, #1
    116c:	b280      	uxth	r0, r0
    116e:	5c8b      	ldrb	r3, [r1, r2]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1170:	2c01      	cmp	r4, #1
    1172:	d025      	beq.n	11c0 <usart_write_buffer_wait+0x9c>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1174:	1c1c      	adds	r4, r3, #0
    1176:	1c02      	adds	r2, r0, #0

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1178:	79f8      	ldrb	r0, [r7, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    117a:	683b      	ldr	r3, [r7, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    117c:	2800      	cmp	r0, #0
    117e:	d002      	beq.n	1186 <usart_write_buffer_wait+0x62>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1180:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
    1182:	2800      	cmp	r0, #0
    1184:	d013      	beq.n	11ae <usart_write_buffer_wait+0x8a>
    1186:	4663      	mov	r3, ip
    1188:	3b01      	subs	r3, #1
    118a:	b29b      	uxth	r3, r3
    118c:	469c      	mov	ip, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    118e:	2b00      	cmp	r3, #0
    1190:	d1df      	bne.n	1152 <usart_write_buffer_wait+0x2e>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1192:	7e2b      	ldrb	r3, [r5, #24]
    1194:	079a      	lsls	r2, r3, #30
    1196:	d408      	bmi.n	11aa <usart_write_buffer_wait+0x86>
    1198:	4b0d      	ldr	r3, [pc, #52]	; (11d0 <usart_write_buffer_wait+0xac>)
    119a:	2102      	movs	r1, #2
    119c:	e002      	b.n	11a4 <usart_write_buffer_wait+0x80>
    119e:	3b01      	subs	r3, #1
			break;
		} else if (i == USART_TIMEOUT) {
    11a0:	2b00      	cmp	r3, #0
    11a2:	d013      	beq.n	11cc <usart_write_buffer_wait+0xa8>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    11a4:	7e2a      	ldrb	r2, [r5, #24]
    11a6:	4211      	tst	r1, r2
    11a8:	d0f9      	beq.n	119e <usart_write_buffer_wait+0x7a>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    11aa:	2000      	movs	r0, #0
    11ac:	e7c1      	b.n	1132 <usart_write_buffer_wait+0xe>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11ae:	69d8      	ldr	r0, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11b0:	2800      	cmp	r0, #0
    11b2:	d1fc      	bne.n	11ae <usart_write_buffer_wait+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    11b4:	851c      	strh	r4, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11b6:	7e18      	ldrb	r0, [r3, #24]
    11b8:	4644      	mov	r4, r8
    11ba:	4204      	tst	r4, r0
    11bc:	d0fb      	beq.n	11b6 <usart_write_buffer_wait+0x92>
    11be:	e7e2      	b.n	1186 <usart_write_buffer_wait+0x62>
		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    11c0:	5c0c      	ldrb	r4, [r1, r0]
    11c2:	3202      	adds	r2, #2
    11c4:	0224      	lsls	r4, r4, #8
    11c6:	b292      	uxth	r2, r2
    11c8:	431c      	orrs	r4, r3
    11ca:	e7d5      	b.n	1178 <usart_write_buffer_wait+0x54>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    11cc:	2012      	movs	r0, #18
    11ce:	e7b0      	b.n	1132 <usart_write_buffer_wait+0xe>
    11d0:	0000ffff 	.word	0x0000ffff

000011d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
__attribute__((optimize("O0"))) void _usart_interrupt_handler(
		uint8_t instance)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b088      	sub	sp, #32
    11d8:	af00      	add	r7, sp, #0
    11da:	1c02      	adds	r2, r0, #0
    11dc:	1dfb      	adds	r3, r7, #7
    11de:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    11e0:	1dfb      	adds	r3, r7, #7
    11e2:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11e4:	4bc0      	ldr	r3, [pc, #768]	; (14e8 <_usart_interrupt_handler+0x314>)
    11e6:	0092      	lsls	r2, r2, #2
    11e8:	58d3      	ldr	r3, [r2, r3]
    11ea:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11ec:	69bb      	ldr	r3, [r7, #24]
    11ee:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    11f0:	617b      	str	r3, [r7, #20]
    11f2:	69bb      	ldr	r3, [r7, #24]
    11f4:	60bb      	str	r3, [r7, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    11f6:	68bb      	ldr	r3, [r7, #8]
    11f8:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11fa:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11fc:	2b00      	cmp	r3, #0
    11fe:	d1fa      	bne.n	11f6 <_usart_interrupt_handler+0x22>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1200:	697b      	ldr	r3, [r7, #20]
    1202:	7e1b      	ldrb	r3, [r3, #24]
    1204:	b2da      	uxtb	r2, r3
    1206:	1c3b      	adds	r3, r7, #0
    1208:	3312      	adds	r3, #18
    120a:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    120c:	697b      	ldr	r3, [r7, #20]
    120e:	7d9b      	ldrb	r3, [r3, #22]
    1210:	b2db      	uxtb	r3, r3
    1212:	1c1a      	adds	r2, r3, #0
    1214:	1c3b      	adds	r3, r7, #0
    1216:	3312      	adds	r3, #18
    1218:	1c39      	adds	r1, r7, #0
    121a:	3112      	adds	r1, #18
    121c:	8809      	ldrh	r1, [r1, #0]
    121e:	400a      	ands	r2, r1
    1220:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1222:	69ba      	ldr	r2, [r7, #24]
    1224:	2330      	movs	r3, #48	; 0x30
    1226:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    1228:	69b9      	ldr	r1, [r7, #24]
    122a:	2231      	movs	r2, #49	; 0x31
    122c:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    122e:	4013      	ands	r3, r2
    1230:	b2da      	uxtb	r2, r3
    1232:	1c3b      	adds	r3, r7, #0
    1234:	3310      	adds	r3, #16
    1236:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1238:	1c3b      	adds	r3, r7, #0
    123a:	3312      	adds	r3, #18
    123c:	881a      	ldrh	r2, [r3, #0]
    123e:	2301      	movs	r3, #1
    1240:	4013      	ands	r3, r2
    1242:	d044      	beq.n	12ce <_usart_interrupt_handler+0xfa>
		if (module->remaining_tx_buffer_length) {
    1244:	69bb      	ldr	r3, [r7, #24]
    1246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1248:	b29b      	uxth	r3, r3
    124a:	2b00      	cmp	r3, #0
    124c:	d03c      	beq.n	12c8 <_usart_interrupt_handler+0xf4>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    124e:	69bb      	ldr	r3, [r7, #24]
    1250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1252:	781b      	ldrb	r3, [r3, #0]
    1254:	b2da      	uxtb	r2, r3
    1256:	1c3b      	adds	r3, r7, #0
    1258:	331c      	adds	r3, #28
    125a:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    125c:	69bb      	ldr	r3, [r7, #24]
    125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1260:	1c5a      	adds	r2, r3, #1
    1262:	69bb      	ldr	r3, [r7, #24]
    1264:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1266:	69bb      	ldr	r3, [r7, #24]
    1268:	795b      	ldrb	r3, [r3, #5]
    126a:	2b01      	cmp	r3, #1
    126c:	d112      	bne.n	1294 <_usart_interrupt_handler+0xc0>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    126e:	69bb      	ldr	r3, [r7, #24]
    1270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	b2db      	uxtb	r3, r3
    1276:	021b      	lsls	r3, r3, #8
    1278:	b29a      	uxth	r2, r3
    127a:	1c3b      	adds	r3, r7, #0
    127c:	331c      	adds	r3, #28
    127e:	881b      	ldrh	r3, [r3, #0]
    1280:	4313      	orrs	r3, r2
    1282:	b29a      	uxth	r2, r3
    1284:	1c3b      	adds	r3, r7, #0
    1286:	331c      	adds	r3, #28
    1288:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    128a:	69bb      	ldr	r3, [r7, #24]
    128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    128e:	1c5a      	adds	r2, r3, #1
    1290:	69bb      	ldr	r3, [r7, #24]
    1292:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1294:	1c3b      	adds	r3, r7, #0
    1296:	331c      	adds	r3, #28
    1298:	881b      	ldrh	r3, [r3, #0]
    129a:	05db      	lsls	r3, r3, #23
    129c:	0ddb      	lsrs	r3, r3, #23
    129e:	b29a      	uxth	r2, r3
    12a0:	697b      	ldr	r3, [r7, #20]
    12a2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    12a4:	69bb      	ldr	r3, [r7, #24]
    12a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    12a8:	b29b      	uxth	r3, r3
    12aa:	3b01      	subs	r3, #1
    12ac:	b29b      	uxth	r3, r3
    12ae:	69ba      	ldr	r2, [r7, #24]
    12b0:	1c19      	adds	r1, r3, #0
    12b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    12b4:	2b00      	cmp	r3, #0
    12b6:	d106      	bne.n	12c6 <_usart_interrupt_handler+0xf2>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12b8:	697b      	ldr	r3, [r7, #20]
    12ba:	2201      	movs	r2, #1
    12bc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    12be:	697b      	ldr	r3, [r7, #20]
    12c0:	2202      	movs	r2, #2
    12c2:	759a      	strb	r2, [r3, #22]
    12c4:	e003      	b.n	12ce <_usart_interrupt_handler+0xfa>
    12c6:	e002      	b.n	12ce <_usart_interrupt_handler+0xfa>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12c8:	697b      	ldr	r3, [r7, #20]
    12ca:	2201      	movs	r2, #1
    12cc:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12ce:	1c3b      	adds	r3, r7, #0
    12d0:	3312      	adds	r3, #18
    12d2:	881a      	ldrh	r2, [r3, #0]
    12d4:	2302      	movs	r3, #2
    12d6:	4013      	ands	r3, r2
    12d8:	d011      	beq.n	12fe <_usart_interrupt_handler+0x12a>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12da:	697b      	ldr	r3, [r7, #20]
    12dc:	2202      	movs	r2, #2
    12de:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    12e0:	69ba      	ldr	r2, [r7, #24]
    12e2:	2333      	movs	r3, #51	; 0x33
    12e4:	2100      	movs	r1, #0
    12e6:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12e8:	1c3b      	adds	r3, r7, #0
    12ea:	3310      	adds	r3, #16
    12ec:	881a      	ldrh	r2, [r3, #0]
    12ee:	2301      	movs	r3, #1
    12f0:	4013      	ands	r3, r2
    12f2:	d004      	beq.n	12fe <_usart_interrupt_handler+0x12a>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12f4:	69bb      	ldr	r3, [r7, #24]
    12f6:	68db      	ldr	r3, [r3, #12]
    12f8:	69ba      	ldr	r2, [r7, #24]
    12fa:	1c10      	adds	r0, r2, #0
    12fc:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12fe:	1c3b      	adds	r3, r7, #0
    1300:	3312      	adds	r3, #18
    1302:	881a      	ldrh	r2, [r3, #0]
    1304:	2304      	movs	r3, #4
    1306:	4013      	ands	r3, r2
    1308:	d100      	bne.n	130c <_usart_interrupt_handler+0x138>
    130a:	e0a4      	b.n	1456 <_usart_interrupt_handler+0x282>

		if (module->remaining_rx_buffer_length) {
    130c:	69bb      	ldr	r3, [r7, #24]
    130e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1310:	b29b      	uxth	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d100      	bne.n	1318 <_usart_interrupt_handler+0x144>
    1316:	e09b      	b.n	1450 <_usart_interrupt_handler+0x27c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1318:	697b      	ldr	r3, [r7, #20]
    131a:	8b5b      	ldrh	r3, [r3, #26]
    131c:	b29b      	uxth	r3, r3
    131e:	b2d9      	uxtb	r1, r3
    1320:	1c3b      	adds	r3, r7, #0
    1322:	331f      	adds	r3, #31
    1324:	223f      	movs	r2, #63	; 0x3f
    1326:	400a      	ands	r2, r1
    1328:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    132a:	1c3b      	adds	r3, r7, #0
    132c:	331f      	adds	r3, #31
    132e:	781a      	ldrb	r2, [r3, #0]
    1330:	2308      	movs	r3, #8
    1332:	4013      	ands	r3, r2
    1334:	d007      	beq.n	1346 <_usart_interrupt_handler+0x172>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1336:	1c3b      	adds	r3, r7, #0
    1338:	331f      	adds	r3, #31
    133a:	1c3a      	adds	r2, r7, #0
    133c:	321f      	adds	r2, #31
    133e:	7812      	ldrb	r2, [r2, #0]
    1340:	2108      	movs	r1, #8
    1342:	438a      	bics	r2, r1
    1344:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1346:	1c3b      	adds	r3, r7, #0
    1348:	331f      	adds	r3, #31
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	2b00      	cmp	r3, #0
    134e:	d100      	bne.n	1352 <_usart_interrupt_handler+0x17e>
    1350:	e069      	b.n	1426 <_usart_interrupt_handler+0x252>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1352:	1c3b      	adds	r3, r7, #0
    1354:	331f      	adds	r3, #31
    1356:	781a      	ldrb	r2, [r3, #0]
    1358:	2302      	movs	r3, #2
    135a:	4013      	ands	r3, r2
    135c:	d00c      	beq.n	1378 <_usart_interrupt_handler+0x1a4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    135e:	69ba      	ldr	r2, [r7, #24]
    1360:	2332      	movs	r3, #50	; 0x32
    1362:	211a      	movs	r1, #26
    1364:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1366:	697b      	ldr	r3, [r7, #20]
    1368:	8b5b      	ldrh	r3, [r3, #26]
    136a:	b29b      	uxth	r3, r3
    136c:	2202      	movs	r2, #2
    136e:	4313      	orrs	r3, r2
    1370:	b29a      	uxth	r2, r3
    1372:	697b      	ldr	r3, [r7, #20]
    1374:	835a      	strh	r2, [r3, #26]
    1376:	e04a      	b.n	140e <_usart_interrupt_handler+0x23a>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1378:	1c3b      	adds	r3, r7, #0
    137a:	331f      	adds	r3, #31
    137c:	781a      	ldrb	r2, [r3, #0]
    137e:	2304      	movs	r3, #4
    1380:	4013      	ands	r3, r2
    1382:	d00c      	beq.n	139e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1384:	69ba      	ldr	r2, [r7, #24]
    1386:	2332      	movs	r3, #50	; 0x32
    1388:	211e      	movs	r1, #30
    138a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    138c:	697b      	ldr	r3, [r7, #20]
    138e:	8b5b      	ldrh	r3, [r3, #26]
    1390:	b29b      	uxth	r3, r3
    1392:	2204      	movs	r2, #4
    1394:	4313      	orrs	r3, r2
    1396:	b29a      	uxth	r2, r3
    1398:	697b      	ldr	r3, [r7, #20]
    139a:	835a      	strh	r2, [r3, #26]
    139c:	e037      	b.n	140e <_usart_interrupt_handler+0x23a>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    139e:	1c3b      	adds	r3, r7, #0
    13a0:	331f      	adds	r3, #31
    13a2:	781a      	ldrb	r2, [r3, #0]
    13a4:	2301      	movs	r3, #1
    13a6:	4013      	ands	r3, r2
    13a8:	d00c      	beq.n	13c4 <_usart_interrupt_handler+0x1f0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    13aa:	69ba      	ldr	r2, [r7, #24]
    13ac:	2332      	movs	r3, #50	; 0x32
    13ae:	2113      	movs	r1, #19
    13b0:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    13b2:	697b      	ldr	r3, [r7, #20]
    13b4:	8b5b      	ldrh	r3, [r3, #26]
    13b6:	b29b      	uxth	r3, r3
    13b8:	2201      	movs	r2, #1
    13ba:	4313      	orrs	r3, r2
    13bc:	b29a      	uxth	r2, r3
    13be:	697b      	ldr	r3, [r7, #20]
    13c0:	835a      	strh	r2, [r3, #26]
    13c2:	e024      	b.n	140e <_usart_interrupt_handler+0x23a>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    13c4:	1c3b      	adds	r3, r7, #0
    13c6:	331f      	adds	r3, #31
    13c8:	781a      	ldrb	r2, [r3, #0]
    13ca:	2310      	movs	r3, #16
    13cc:	4013      	ands	r3, r2
    13ce:	d00c      	beq.n	13ea <_usart_interrupt_handler+0x216>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    13d0:	69ba      	ldr	r2, [r7, #24]
    13d2:	2332      	movs	r3, #50	; 0x32
    13d4:	2142      	movs	r1, #66	; 0x42
    13d6:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    13d8:	697b      	ldr	r3, [r7, #20]
    13da:	8b5b      	ldrh	r3, [r3, #26]
    13dc:	b29b      	uxth	r3, r3
    13de:	2210      	movs	r2, #16
    13e0:	4313      	orrs	r3, r2
    13e2:	b29a      	uxth	r2, r3
    13e4:	697b      	ldr	r3, [r7, #20]
    13e6:	835a      	strh	r2, [r3, #26]
    13e8:	e011      	b.n	140e <_usart_interrupt_handler+0x23a>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    13ea:	1c3b      	adds	r3, r7, #0
    13ec:	331f      	adds	r3, #31
    13ee:	781a      	ldrb	r2, [r3, #0]
    13f0:	2320      	movs	r3, #32
    13f2:	4013      	ands	r3, r2
    13f4:	d00b      	beq.n	140e <_usart_interrupt_handler+0x23a>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    13f6:	69ba      	ldr	r2, [r7, #24]
    13f8:	2332      	movs	r3, #50	; 0x32
    13fa:	2141      	movs	r1, #65	; 0x41
    13fc:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    13fe:	697b      	ldr	r3, [r7, #20]
    1400:	8b5b      	ldrh	r3, [r3, #26]
    1402:	b29b      	uxth	r3, r3
    1404:	2220      	movs	r2, #32
    1406:	4313      	orrs	r3, r2
    1408:	b29a      	uxth	r2, r3
    140a:	697b      	ldr	r3, [r7, #20]
    140c:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    140e:	1c3b      	adds	r3, r7, #0
    1410:	3310      	adds	r3, #16
    1412:	881a      	ldrh	r2, [r3, #0]
    1414:	2304      	movs	r3, #4
    1416:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1418:	d01d      	beq.n	1456 <_usart_interrupt_handler+0x282>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    141a:	69bb      	ldr	r3, [r7, #24]
    141c:	695b      	ldr	r3, [r3, #20]
    141e:	69ba      	ldr	r2, [r7, #24]
    1420:	1c10      	adds	r0, r2, #0
    1422:	4798      	blx	r3
    1424:	e017      	b.n	1456 <_usart_interrupt_handler+0x282>
			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1426:	697b      	ldr	r3, [r7, #20]
    1428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    142a:	b29a      	uxth	r2, r3
    142c:	1c3b      	adds	r3, r7, #0
    142e:	330e      	adds	r3, #14
    1430:	05d2      	lsls	r2, r2, #23
    1432:	0dd2      	lsrs	r2, r2, #23
    1434:	801a      	strh	r2, [r3, #0]
				*(module->rx_buffer_ptr) = received_data;
    1436:	69bb      	ldr	r3, [r7, #24]
    1438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    143a:	1c3a      	adds	r2, r7, #0
    143c:	320e      	adds	r2, #14
    143e:	8812      	ldrh	r2, [r2, #0]
    1440:	b2d2      	uxtb	r2, r2
    1442:	701a      	strb	r2, [r3, #0]
				(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1444:	69bb      	ldr	r3, [r7, #24]
    1446:	691b      	ldr	r3, [r3, #16]
    1448:	69ba      	ldr	r2, [r7, #24]
    144a:	1c10      	adds	r0, r2, #0
    144c:	4798      	blx	r3
    144e:	e002      	b.n	1456 <_usart_interrupt_handler+0x282>
					//}
				//}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1450:	697b      	ldr	r3, [r7, #20]
    1452:	2204      	movs	r2, #4
    1454:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1456:	1c3b      	adds	r3, r7, #0
    1458:	3312      	adds	r3, #18
    145a:	881a      	ldrh	r2, [r3, #0]
    145c:	2310      	movs	r3, #16
    145e:	4013      	ands	r3, r2
    1460:	d010      	beq.n	1484 <_usart_interrupt_handler+0x2b0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1462:	697b      	ldr	r3, [r7, #20]
    1464:	2210      	movs	r2, #16
    1466:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1468:	697b      	ldr	r3, [r7, #20]
    146a:	2210      	movs	r2, #16
    146c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    146e:	1c3b      	adds	r3, r7, #0
    1470:	3310      	adds	r3, #16
    1472:	881a      	ldrh	r2, [r3, #0]
    1474:	2310      	movs	r3, #16
    1476:	4013      	ands	r3, r2
    1478:	d004      	beq.n	1484 <_usart_interrupt_handler+0x2b0>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    147a:	69bb      	ldr	r3, [r7, #24]
    147c:	69db      	ldr	r3, [r3, #28]
    147e:	69ba      	ldr	r2, [r7, #24]
    1480:	1c10      	adds	r0, r2, #0
    1482:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1484:	1c3b      	adds	r3, r7, #0
    1486:	3312      	adds	r3, #18
    1488:	881a      	ldrh	r2, [r3, #0]
    148a:	2320      	movs	r3, #32
    148c:	4013      	ands	r3, r2
    148e:	d010      	beq.n	14b2 <_usart_interrupt_handler+0x2de>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1490:	697b      	ldr	r3, [r7, #20]
    1492:	2220      	movs	r2, #32
    1494:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1496:	697b      	ldr	r3, [r7, #20]
    1498:	2220      	movs	r2, #32
    149a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    149c:	1c3b      	adds	r3, r7, #0
    149e:	3310      	adds	r3, #16
    14a0:	881a      	ldrh	r2, [r3, #0]
    14a2:	2308      	movs	r3, #8
    14a4:	4013      	ands	r3, r2
    14a6:	d004      	beq.n	14b2 <_usart_interrupt_handler+0x2de>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    14a8:	69bb      	ldr	r3, [r7, #24]
    14aa:	699b      	ldr	r3, [r3, #24]
    14ac:	69ba      	ldr	r2, [r7, #24]
    14ae:	1c10      	adds	r0, r2, #0
    14b0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    14b2:	1c3b      	adds	r3, r7, #0
    14b4:	3312      	adds	r3, #18
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	2308      	movs	r3, #8
    14ba:	4013      	ands	r3, r2
    14bc:	d010      	beq.n	14e0 <_usart_interrupt_handler+0x30c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    14be:	697b      	ldr	r3, [r7, #20]
    14c0:	2208      	movs	r2, #8
    14c2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    14c4:	697b      	ldr	r3, [r7, #20]
    14c6:	2208      	movs	r2, #8
    14c8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    14ca:	1c3b      	adds	r3, r7, #0
    14cc:	3310      	adds	r3, #16
    14ce:	881a      	ldrh	r2, [r3, #0]
    14d0:	2320      	movs	r3, #32
    14d2:	4013      	ands	r3, r2
    14d4:	d004      	beq.n	14e0 <_usart_interrupt_handler+0x30c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    14d6:	69bb      	ldr	r3, [r7, #24]
    14d8:	6a1b      	ldr	r3, [r3, #32]
    14da:	69ba      	ldr	r2, [r7, #24]
    14dc:	1c10      	adds	r0, r2, #0
    14de:	4798      	blx	r3
		}
	}
#endif
}
    14e0:	46bd      	mov	sp, r7
    14e2:	b008      	add	sp, #32
    14e4:	bd80      	pop	{r7, pc}
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	200002f0 	.word	0x200002f0

000014ec <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    14ec:	1c03      	adds	r3, r0, #0
    14ee:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    14f0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14f2:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    14f4:	4299      	cmp	r1, r3
    14f6:	d200      	bcs.n	14fa <_sercom_get_sync_baud_val+0xe>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    14f8:	bd10      	pop	{r4, pc}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    14fa:	2400      	movs	r4, #0
    14fc:	e000      	b.n	1500 <_sercom_get_sync_baud_val+0x14>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    14fe:	1c04      	adds	r4, r0, #0
    1500:	1c60      	adds	r0, r4, #1
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1502:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
    1504:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1506:	428b      	cmp	r3, r1
    1508:	d9f9      	bls.n	14fe <_sercom_get_sync_baud_val+0x12>


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    150a:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    150c:	2cff      	cmp	r4, #255	; 0xff
    150e:	d8f3      	bhi.n	14f8 <_sercom_get_sync_baud_val+0xc>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    1510:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1512:	2000      	movs	r0, #0
    1514:	e7f0      	b.n	14f8 <_sercom_get_sync_baud_val+0xc>
    1516:	46c0      	nop			; (mov r8, r8)

00001518 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1518:	b5f0      	push	{r4, r5, r6, r7, lr}
    151a:	4656      	mov	r6, sl
    151c:	4644      	mov	r4, r8
    151e:	465f      	mov	r7, fp
    1520:	464d      	mov	r5, r9
    1522:	b4f0      	push	{r4, r5, r6, r7}
    1524:	b087      	sub	sp, #28
    1526:	9204      	str	r2, [sp, #16]
    1528:	aa10      	add	r2, sp, #64	; 0x40
    152a:	7812      	ldrb	r2, [r2, #0]
    152c:	1c0e      	adds	r6, r1, #0
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    152e:	1c01      	adds	r1, r0, #0
    1530:	4351      	muls	r1, r2
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1532:	1c04      	adds	r4, r0, #0
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1534:	2040      	movs	r0, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1536:	42b1      	cmp	r1, r6
    1538:	d906      	bls.n	1548 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    153a:	b007      	add	sp, #28
    153c:	bc3c      	pop	{r2, r3, r4, r5}
    153e:	4690      	mov	r8, r2
    1540:	4699      	mov	r9, r3
    1542:	46a2      	mov	sl, r4
    1544:	46ab      	mov	fp, r5
    1546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1548:	2b00      	cmp	r3, #0
    154a:	d154      	bne.n	15f6 <_sercom_get_async_baud_val+0xde>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    154c:	1c10      	adds	r0, r2, #0
    154e:	2100      	movs	r1, #0
    1550:	1c22      	adds	r2, r4, #0
    1552:	4c6f      	ldr	r4, [pc, #444]	; (1710 <_sercom_get_async_baud_val+0x1f8>)
    1554:	47a0      	blx	r4
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1556:	2701      	movs	r7, #1
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    1558:	1c34      	adds	r4, r6, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    155a:	263f      	movs	r6, #63	; 0x3f
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    155c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    155e:	2500      	movs	r5, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1560:	2000      	movs	r0, #0
    1562:	2100      	movs	r1, #0
    1564:	2200      	movs	r2, #0
    1566:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1568:	46b4      	mov	ip, r6
		bit_shift = (uint64_t)1 << i;
    156a:	46b8      	mov	r8, r7
    156c:	e00a      	b.n	1584 <_sercom_get_async_baud_val+0x6c>
    156e:	429d      	cmp	r5, r3
    1570:	d057      	beq.n	1622 <_sercom_get_async_baud_val+0x10a>
    1572:	9e01      	ldr	r6, [sp, #4]
    1574:	9f00      	ldr	r7, [sp, #0]
    1576:	1c33      	adds	r3, r6, #0
    1578:	46b9      	mov	r9, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    157a:	4666      	mov	r6, ip
    157c:	464a      	mov	r2, r9
    157e:	3e01      	subs	r6, #1
    1580:	46b4      	mov	ip, r6
    1582:	d32f      	bcc.n	15e4 <_sercom_get_async_baud_val+0xcc>
		bit_shift = (uint64_t)1 << i;
    1584:	4666      	mov	r6, ip
    1586:	3e20      	subs	r6, #32
    1588:	d444      	bmi.n	1614 <_sercom_get_async_baud_val+0xfc>
    158a:	4647      	mov	r7, r8
    158c:	40b7      	lsls	r7, r6
    158e:	46b9      	mov	r9, r7
    1590:	4666      	mov	r6, ip
    1592:	4647      	mov	r7, r8
    1594:	40b7      	lsls	r7, r6
    1596:	46ba      	mov	sl, r7

		r = r << 1;
    1598:	1892      	adds	r2, r2, r2
    159a:	415b      	adcs	r3, r3

		if (n & bit_shift) {
			r |= 0x01;
    159c:	4647      	mov	r7, r8
    159e:	4317      	orrs	r7, r2
    15a0:	9703      	str	r7, [sp, #12]
    15a2:	465e      	mov	r6, fp
    15a4:	464f      	mov	r7, r9
    15a6:	423e      	tst	r6, r7
    15a8:	d031      	beq.n	160e <_sercom_get_async_baud_val+0xf6>
    15aa:	9e03      	ldr	r6, [sp, #12]
    15ac:	1c1f      	adds	r7, r3, #0
    15ae:	1c32      	adds	r2, r6, #0
    15b0:	1c3b      	adds	r3, r7, #0
		}

		if (r >= d) {
			r = r - d;
    15b2:	1b36      	subs	r6, r6, r4
    15b4:	41af      	sbcs	r7, r5
    15b6:	9600      	str	r6, [sp, #0]
    15b8:	9701      	str	r7, [sp, #4]
			q |= bit_shift;
    15ba:	4657      	mov	r7, sl
    15bc:	464e      	mov	r6, r9
    15be:	4307      	orrs	r7, r0
    15c0:	430e      	orrs	r6, r1
    15c2:	46ba      	mov	sl, r7
    15c4:	46b1      	mov	r9, r6
    15c6:	429d      	cmp	r5, r3
    15c8:	d81e      	bhi.n	1608 <_sercom_get_async_baud_val+0xf0>
    15ca:	d01b      	beq.n	1604 <_sercom_get_async_baud_val+0xec>
    15cc:	4650      	mov	r0, sl
    15ce:	4649      	mov	r1, r9
    15d0:	429d      	cmp	r5, r3
    15d2:	d9cc      	bls.n	156e <_sercom_get_async_baud_val+0x56>
    15d4:	4691      	mov	r9, r2
    15d6:	1c1e      	adds	r6, r3, #0
    15d8:	1c33      	adds	r3, r6, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    15da:	4666      	mov	r6, ip
    15dc:	464a      	mov	r2, r9
    15de:	3e01      	subs	r6, #1
    15e0:	46b4      	mov	ip, r6
    15e2:	d2cf      	bcs.n	1584 <_sercom_get_async_baud_val+0x6c>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    15e4:	4b49      	ldr	r3, [pc, #292]	; (170c <_sercom_get_async_baud_val+0x1f4>)
    15e6:	4a48      	ldr	r2, [pc, #288]	; (1708 <_sercom_get_async_baud_val+0x1f0>)
    15e8:	1a12      	subs	r2, r2, r0
    15ea:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    15ec:	0c12      	lsrs	r2, r2, #16
    15ee:	0419      	lsls	r1, r3, #16
    15f0:	4311      	orrs	r1, r2
    15f2:	b289      	uxth	r1, r1
    15f4:	e002      	b.n	15fc <_sercom_get_async_baud_val+0xe4>
    15f6:	2100      	movs	r1, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    15f8:	2b01      	cmp	r3, #1
    15fa:	d017      	beq.n	162c <_sercom_get_async_baud_val+0x114>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    15fc:	9f04      	ldr	r7, [sp, #16]
	return STATUS_OK;
    15fe:	2000      	movs	r0, #0
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    1600:	8039      	strh	r1, [r7, #0]
	return STATUS_OK;
    1602:	e79a      	b.n	153a <_sercom_get_async_baud_val+0x22>
    1604:	4294      	cmp	r4, r2
    1606:	d9e1      	bls.n	15cc <_sercom_get_async_baud_val+0xb4>
    1608:	4682      	mov	sl, r0
    160a:	4689      	mov	r9, r1
    160c:	e7de      	b.n	15cc <_sercom_get_async_baud_val+0xb4>
    160e:	1c16      	adds	r6, r2, #0
    1610:	1c1f      	adds	r7, r3, #0
    1612:	e7cc      	b.n	15ae <_sercom_get_async_baud_val+0x96>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1614:	2620      	movs	r6, #32
    1616:	4667      	mov	r7, ip
    1618:	1bf7      	subs	r7, r6, r7
    161a:	4646      	mov	r6, r8
    161c:	40fe      	lsrs	r6, r7
    161e:	46b1      	mov	r9, r6
    1620:	e7b6      	b.n	1590 <_sercom_get_async_baud_val+0x78>
    1622:	4294      	cmp	r4, r2
    1624:	d9a5      	bls.n	1572 <_sercom_get_async_baud_val+0x5a>
    1626:	4691      	mov	r9, r2
    1628:	1c1e      	adds	r6, r3, #0
    162a:	e7d5      	b.n	15d8 <_sercom_get_async_baud_val+0xc0>
    162c:	1c10      	adds	r0, r2, #0
    162e:	2300      	movs	r3, #0
    1630:	1c22      	adds	r2, r4, #0
    1632:	4c37      	ldr	r4, [pc, #220]	; (1710 <_sercom_get_async_baud_val+0x1f8>)
    1634:	47a0      	blx	r4
    1636:	0f77      	lsrs	r7, r6, #29
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1638:	2200      	movs	r2, #0
    163a:	00f6      	lsls	r6, r6, #3
    163c:	46b9      	mov	r9, r7
    163e:	46b2      	mov	sl, r6
    1640:	9203      	str	r2, [sp, #12]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1642:	2701      	movs	r7, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    1644:	1c04      	adds	r4, r0, #0
    1646:	1c0d      	adds	r5, r1, #0
    1648:	9b03      	ldr	r3, [sp, #12]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    164a:	2600      	movs	r6, #0
    164c:	b2db      	uxtb	r3, r3
    164e:	9305      	str	r3, [sp, #20]
    1650:	46b0      	mov	r8, r6
    1652:	2200      	movs	r2, #0
    1654:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1656:	263f      	movs	r6, #63	; 0x3f
    1658:	e018      	b.n	168c <_sercom_get_async_baud_val+0x174>
    165a:	4658      	mov	r0, fp
    165c:	1c19      	adds	r1, r3, #0
    165e:	1c02      	adds	r2, r0, #0
    1660:	1c0b      	adds	r3, r1, #0
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1662:	1b00      	subs	r0, r0, r4
    1664:	41a9      	sbcs	r1, r5
    1666:	9000      	str	r0, [sp, #0]
    1668:	9101      	str	r1, [sp, #4]
			q |= bit_shift;
    166a:	4661      	mov	r1, ip
    166c:	4640      	mov	r0, r8
    166e:	4301      	orrs	r1, r0
    1670:	468c      	mov	ip, r1
    1672:	429d      	cmp	r5, r3
    1674:	d83b      	bhi.n	16ee <_sercom_get_async_baud_val+0x1d6>
    1676:	d038      	beq.n	16ea <_sercom_get_async_baud_val+0x1d2>
    1678:	46e0      	mov	r8, ip
    167a:	429d      	cmp	r5, r3
    167c:	d822      	bhi.n	16c4 <_sercom_get_async_baud_val+0x1ac>
    167e:	d01f      	beq.n	16c0 <_sercom_get_async_baud_val+0x1a8>
    1680:	9800      	ldr	r0, [sp, #0]
    1682:	9901      	ldr	r1, [sp, #4]
    1684:	1c02      	adds	r2, r0, #0
    1686:	1c0b      	adds	r3, r1, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1688:	3e01      	subs	r6, #1
    168a:	d321      	bcc.n	16d0 <_sercom_get_async_baud_val+0x1b8>
		bit_shift = (uint64_t)1 << i;
    168c:	1c30      	adds	r0, r6, #0
    168e:	3820      	subs	r0, #32
    1690:	d42f      	bmi.n	16f2 <_sercom_get_async_baud_val+0x1da>
    1692:	1c39      	adds	r1, r7, #0
    1694:	4081      	lsls	r1, r0
    1696:	9100      	str	r1, [sp, #0]

		r = r << 1;
    1698:	1892      	adds	r2, r2, r2
    169a:	415b      	adcs	r3, r3

		if (n & bit_shift) {
			r |= 0x01;
    169c:	1c39      	adds	r1, r7, #0
    169e:	4311      	orrs	r1, r2
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    16a0:	1c38      	adds	r0, r7, #0
    16a2:	40b0      	lsls	r0, r6

		r = r << 1;

		if (n & bit_shift) {
			r |= 0x01;
    16a4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;

		r = r << 1;

		if (n & bit_shift) {
    16a6:	4651      	mov	r1, sl
    16a8:	4001      	ands	r1, r0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    16aa:	4684      	mov	ip, r0

		r = r << 1;

		if (n & bit_shift) {
    16ac:	9800      	ldr	r0, [sp, #0]
    16ae:	9102      	str	r1, [sp, #8]
    16b0:	4649      	mov	r1, r9
    16b2:	4008      	ands	r0, r1
    16b4:	9902      	ldr	r1, [sp, #8]
    16b6:	4301      	orrs	r1, r0
    16b8:	d1cf      	bne.n	165a <_sercom_get_async_baud_val+0x142>
    16ba:	1c10      	adds	r0, r2, #0
    16bc:	1c19      	adds	r1, r3, #0
    16be:	e7ce      	b.n	165e <_sercom_get_async_baud_val+0x146>
    16c0:	4294      	cmp	r4, r2
    16c2:	d9dd      	bls.n	1680 <_sercom_get_async_baud_val+0x168>
    16c4:	1c10      	adds	r0, r2, #0
    16c6:	1c19      	adds	r1, r3, #0
    16c8:	1c02      	adds	r2, r0, #0
    16ca:	1c0b      	adds	r3, r1, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    16cc:	3e01      	subs	r6, #1
    16ce:	d2dd      	bcs.n	168c <_sercom_get_async_baud_val+0x174>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    16d0:	9a03      	ldr	r2, [sp, #12]
    16d2:	4661      	mov	r1, ip
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    16d4:	4e0f      	ldr	r6, [pc, #60]	; (1714 <_sercom_get_async_baud_val+0x1fc>)
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    16d6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    16d8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    16da:	42b3      	cmp	r3, r6
    16dc:	d90f      	bls.n	16fe <_sercom_get_async_baud_val+0x1e6>
    16de:	3201      	adds	r2, #1
    16e0:	9203      	str	r2, [sp, #12]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    16e2:	2a08      	cmp	r2, #8
    16e4:	d1b0      	bne.n	1648 <_sercom_get_async_baud_val+0x130>
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16e6:	2040      	movs	r0, #64	; 0x40
    16e8:	e727      	b.n	153a <_sercom_get_async_baud_val+0x22>
    16ea:	4294      	cmp	r4, r2
    16ec:	d9c4      	bls.n	1678 <_sercom_get_async_baud_val+0x160>
    16ee:	46c4      	mov	ip, r8
    16f0:	e7c2      	b.n	1678 <_sercom_get_async_baud_val+0x160>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    16f2:	2120      	movs	r1, #32
    16f4:	1b88      	subs	r0, r1, r6
    16f6:	1c39      	adds	r1, r7, #0
    16f8:	40c1      	lsrs	r1, r0
    16fa:	9100      	str	r1, [sp, #0]
    16fc:	e7cc      	b.n	1698 <_sercom_get_async_baud_val+0x180>
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    16fe:	9805      	ldr	r0, [sp, #20]
    1700:	0341      	lsls	r1, r0, #13
    1702:	430b      	orrs	r3, r1
    1704:	b299      	uxth	r1, r3
    1706:	e779      	b.n	15fc <_sercom_get_async_baud_val+0xe4>
    1708:	00000000 	.word	0x00000000
    170c:	00000001 	.word	0x00000001
    1710:	00002631 	.word	0x00002631
    1714:	00001fff 	.word	0x00001fff

00001718 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1718:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    171a:	4c0f      	ldr	r4, [pc, #60]	; (1758 <sercom_set_gclk_generator+0x40>)
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    171c:	b083      	sub	sp, #12
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    171e:	7823      	ldrb	r3, [r4, #0]
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1720:	1c05      	adds	r5, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1722:	2b00      	cmp	r3, #0
    1724:	d009      	beq.n	173a <sercom_set_gclk_generator+0x22>
    1726:	2900      	cmp	r1, #0
    1728:	d107      	bne.n	173a <sercom_set_gclk_generator+0x22>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    172a:	7862      	ldrb	r2, [r4, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    172c:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    172e:	1b55      	subs	r5, r2, r5
    1730:	1e6a      	subs	r2, r5, #1
    1732:	4195      	sbcs	r5, r2
    1734:	426d      	negs	r5, r5
    1736:	4028      	ands	r0, r5
    1738:	e00c      	b.n	1754 <sercom_set_gclk_generator+0x3c>
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    173a:	466b      	mov	r3, sp
    173c:	701d      	strb	r5, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    173e:	200d      	movs	r0, #13
    1740:	4669      	mov	r1, sp
    1742:	4b06      	ldr	r3, [pc, #24]	; (175c <sercom_set_gclk_generator+0x44>)
    1744:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1746:	200d      	movs	r0, #13
    1748:	4b05      	ldr	r3, [pc, #20]	; (1760 <sercom_set_gclk_generator+0x48>)
    174a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    174c:	2301      	movs	r3, #1
		gclk_chan_conf.source_generator = generator_source;
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(SERCOM_GCLK_ID);

		/* Save config */
		_sercom_config.generator_source = generator_source;
    174e:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    1750:	7023      	strb	r3, [r4, #0]

		return STATUS_OK;
    1752:	2000      	movs	r0, #0
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1754:	b003      	add	sp, #12
    1756:	bd30      	pop	{r4, r5, pc}
    1758:	20000268 	.word	0x20000268
    175c:	00001d5d 	.word	0x00001d5d
    1760:	00001dc1 	.word	0x00001dc1

00001764 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1764:	4b13      	ldr	r3, [pc, #76]	; (17b4 <_sercom_get_default_pad+0x50>)
    1766:	4298      	cmp	r0, r3
    1768:	d00e      	beq.n	1788 <_sercom_get_default_pad+0x24>
    176a:	4b13      	ldr	r3, [pc, #76]	; (17b8 <_sercom_get_default_pad+0x54>)
    176c:	4298      	cmp	r0, r3
    176e:	d109      	bne.n	1784 <_sercom_get_default_pad+0x20>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1770:	2901      	cmp	r1, #1
    1772:	d01d      	beq.n	17b0 <_sercom_get_default_pad+0x4c>
    1774:	2900      	cmp	r1, #0
    1776:	d019      	beq.n	17ac <_sercom_get_default_pad+0x48>
    1778:	2902      	cmp	r1, #2
    177a:	d011      	beq.n	17a0 <_sercom_get_default_pad+0x3c>
    177c:	2903      	cmp	r1, #3
    177e:	d101      	bne.n	1784 <_sercom_get_default_pad+0x20>
    1780:	480e      	ldr	r0, [pc, #56]	; (17bc <_sercom_get_default_pad+0x58>)
    1782:	e000      	b.n	1786 <_sercom_get_default_pad+0x22>
	}

	Assert(false);
	return 0;
    1784:	2000      	movs	r0, #0
}
    1786:	4770      	bx	lr
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1788:	2901      	cmp	r1, #1
    178a:	d00d      	beq.n	17a8 <_sercom_get_default_pad+0x44>
    178c:	2900      	cmp	r1, #0
    178e:	d009      	beq.n	17a4 <_sercom_get_default_pad+0x40>
    1790:	2902      	cmp	r1, #2
    1792:	d003      	beq.n	179c <_sercom_get_default_pad+0x38>
    1794:	2903      	cmp	r1, #3
    1796:	d1f5      	bne.n	1784 <_sercom_get_default_pad+0x20>
    1798:	4809      	ldr	r0, [pc, #36]	; (17c0 <_sercom_get_default_pad+0x5c>)
    179a:	e7f4      	b.n	1786 <_sercom_get_default_pad+0x22>
    179c:	4809      	ldr	r0, [pc, #36]	; (17c4 <_sercom_get_default_pad+0x60>)
    179e:	e7f2      	b.n	1786 <_sercom_get_default_pad+0x22>
    17a0:	4809      	ldr	r0, [pc, #36]	; (17c8 <_sercom_get_default_pad+0x64>)
    17a2:	e7f0      	b.n	1786 <_sercom_get_default_pad+0x22>
    17a4:	4809      	ldr	r0, [pc, #36]	; (17cc <_sercom_get_default_pad+0x68>)
    17a6:	e7ee      	b.n	1786 <_sercom_get_default_pad+0x22>
    17a8:	4809      	ldr	r0, [pc, #36]	; (17d0 <_sercom_get_default_pad+0x6c>)
    17aa:	e7ec      	b.n	1786 <_sercom_get_default_pad+0x22>
    17ac:	4809      	ldr	r0, [pc, #36]	; (17d4 <_sercom_get_default_pad+0x70>)
    17ae:	e7ea      	b.n	1786 <_sercom_get_default_pad+0x22>
    17b0:	4809      	ldr	r0, [pc, #36]	; (17d8 <_sercom_get_default_pad+0x74>)
    17b2:	e7e8      	b.n	1786 <_sercom_get_default_pad+0x22>
    17b4:	42000800 	.word	0x42000800
    17b8:	42000c00 	.word	0x42000c00
    17bc:	00190002 	.word	0x00190002
    17c0:	00090003 	.word	0x00090003
    17c4:	00080003 	.word	0x00080003
    17c8:	00180002 	.word	0x00180002
    17cc:	00040003 	.word	0x00040003
    17d0:	00050003 	.word	0x00050003
    17d4:	001e0002 	.word	0x001e0002
    17d8:	001f0002 	.word	0x001f0002

000017dc <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    17dc:	4b04      	ldr	r3, [pc, #16]	; (17f0 <_sercom_get_sercom_inst_index+0x14>)
    17de:	4298      	cmp	r0, r3
    17e0:	d004      	beq.n	17ec <_sercom_get_sercom_inst_index+0x10>
    17e2:	4b04      	ldr	r3, [pc, #16]	; (17f4 <_sercom_get_sercom_inst_index+0x18>)
    17e4:	18c0      	adds	r0, r0, r3
    17e6:	4243      	negs	r3, r0
    17e8:	4158      	adcs	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    17ea:	4770      	bx	lr
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    17ec:	2000      	movs	r0, #0
			return i;
    17ee:	e7fc      	b.n	17ea <_sercom_get_sercom_inst_index+0xe>
    17f0:	42000800 	.word	0x42000800
    17f4:	bdfff400 	.word	0xbdfff400

000017f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)

000017fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    17fe:	4c08      	ldr	r4, [pc, #32]	; (1820 <_sercom_set_handler+0x24>)
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1800:	4b08      	ldr	r3, [pc, #32]	; (1824 <_sercom_set_handler+0x28>)
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1802:	7822      	ldrb	r2, [r4, #0]
    1804:	2a00      	cmp	r2, #0
    1806:	d107      	bne.n	1818 <_sercom_set_handler+0x1c>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1808:	4d07      	ldr	r5, [pc, #28]	; (1828 <_sercom_set_handler+0x2c>)
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    180a:	4e08      	ldr	r6, [pc, #32]	; (182c <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    180c:	602a      	str	r2, [r5, #0]
    180e:	606a      	str	r2, [r5, #4]
		}

		_handler_table_initialized = true;
    1810:	2201      	movs	r2, #1
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1812:	601e      	str	r6, [r3, #0]
    1814:	605e      	str	r6, [r3, #4]
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1816:	7022      	strb	r2, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1818:	0080      	lsls	r0, r0, #2
    181a:	5019      	str	r1, [r3, r0]
}
    181c:	bd70      	pop	{r4, r5, r6, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	2000026c 	.word	0x2000026c
    1824:	20000270 	.word	0x20000270
    1828:	200002f0 	.word	0x200002f0
    182c:	000017f9 	.word	0x000017f9

00001830 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1830:	b530      	push	{r4, r5, lr}
    1832:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1834:	ac01      	add	r4, sp, #4
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1836:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1838:	4905      	ldr	r1, [pc, #20]	; (1850 <_sercom_get_interrupt_vector+0x20>)
    183a:	2202      	movs	r2, #2
    183c:	1c20      	adds	r0, r4, #0
    183e:	4b05      	ldr	r3, [pc, #20]	; (1854 <_sercom_get_interrupt_vector+0x24>)
    1840:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1842:	1c28      	adds	r0, r5, #0
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <_sercom_get_interrupt_vector+0x28>)
    1846:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1848:	5620      	ldrsb	r0, [r4, r0]
}
    184a:	b003      	add	sp, #12
    184c:	bd30      	pop	{r4, r5, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	00002f04 	.word	0x00002f04
    1854:	00002ec3 	.word	0x00002ec3
    1858:	000017dd 	.word	0x000017dd

0000185c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    185c:	b508      	push	{r3, lr}
    185e:	4b02      	ldr	r3, [pc, #8]	; (1868 <SERCOM0_Handler+0xc>)
    1860:	2000      	movs	r0, #0
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	4798      	blx	r3
    1866:	bd08      	pop	{r3, pc}
    1868:	20000270 	.word	0x20000270

0000186c <SERCOM1_Handler>:
    186c:	b508      	push	{r3, lr}
    186e:	4b02      	ldr	r3, [pc, #8]	; (1878 <SERCOM1_Handler+0xc>)
    1870:	2001      	movs	r0, #1
    1872:	685b      	ldr	r3, [r3, #4]
    1874:	4798      	blx	r3
    1876:	bd08      	pop	{r3, pc}
    1878:	20000270 	.word	0x20000270

0000187c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    187c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    187e:	2a00      	cmp	r2, #0
    1880:	d001      	beq.n	1886 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1882:	1c18      	adds	r0, r3, #0
    1884:	4770      	bx	lr
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1886:	4b07      	ldr	r3, [pc, #28]	; (18a4 <extint_register_callback+0x28>)
    1888:	0089      	lsls	r1, r1, #2
    188a:	58ca      	ldr	r2, [r1, r3]
    188c:	2a00      	cmp	r2, #0
    188e:	d006      	beq.n	189e <extint_register_callback+0x22>
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1890:	1a12      	subs	r2, r2, r0
    1892:	1e50      	subs	r0, r2, #1
    1894:	4182      	sbcs	r2, r0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1896:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1898:	4252      	negs	r2, r2
    189a:	4013      	ands	r3, r2
    189c:	e7f1      	b.n	1882 <extint_register_callback+0x6>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
    189e:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    18a0:	2300      	movs	r3, #0
    18a2:	e7ee      	b.n	1882 <extint_register_callback+0x6>
    18a4:	200002ac 	.word	0x200002ac

000018a8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18a8:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    18aa:	2900      	cmp	r1, #0
    18ac:	d001      	beq.n	18b2 <extint_chan_enable_callback+0xa>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    18ae:	1c18      	adds	r0, r3, #0
    18b0:	4770      	bx	lr
	} else {
		Assert(false);
		return NULL;
    18b2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    18b4:	281f      	cmp	r0, #31
    18b6:	d904      	bls.n	18c2 <extint_chan_enable_callback+0x1a>
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    18b8:	2201      	movs	r2, #1
    18ba:	4082      	lsls	r2, r0
    18bc:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    18be:	2300      	movs	r3, #0
    18c0:	e7f5      	b.n	18ae <extint_chan_enable_callback+0x6>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    18c2:	4b03      	ldr	r3, [pc, #12]	; (18d0 <extint_chan_enable_callback+0x28>)
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    18c4:	2201      	movs	r2, #1
    18c6:	4082      	lsls	r2, r0
    18c8:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    18ca:	2300      	movs	r3, #0
    18cc:	e7ef      	b.n	18ae <extint_chan_enable_callback+0x6>
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	40001800 	.word	0x40001800

000018d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18d6:	4c0c      	ldr	r4, [pc, #48]	; (1908 <EIC_Handler+0x34>)
    18d8:	2300      	movs	r3, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	return (eic_module->INTFLAG.reg & eic_mask);
    18da:	4d0c      	ldr	r5, [pc, #48]	; (190c <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18dc:	4f0c      	ldr	r7, [pc, #48]	; (1910 <EIC_Handler+0x3c>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18de:	7023      	strb	r3, [r4, #0]
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    18e0:	2601      	movs	r6, #1
    18e2:	1c32      	adds	r2, r6, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    18e4:	6929      	ldr	r1, [r5, #16]
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    18e6:	409a      	lsls	r2, r3
		if (extint_chan_is_detected(_current_channel)) {
    18e8:	4211      	tst	r1, r2
    18ea:	d006      	beq.n	18fa <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    18ec:	612a      	str	r2, [r5, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18ee:	009b      	lsls	r3, r3, #2
    18f0:	59db      	ldr	r3, [r3, r7]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d000      	beq.n	18f8 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    18f6:	4798      	blx	r3
    18f8:	7823      	ldrb	r3, [r4, #0]

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18fa:	3301      	adds	r3, #1
    18fc:	b2db      	uxtb	r3, r3
    18fe:	7023      	strb	r3, [r4, #0]
    1900:	2b0f      	cmp	r3, #15
    1902:	d9ee      	bls.n	18e2 <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	200002f8 	.word	0x200002f8
    190c:	40001800 	.word	0x40001800
    1910:	200002ac 	.word	0x200002ac

00001914 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1914:	b500      	push	{lr}
    1916:	b083      	sub	sp, #12
    1918:	466a      	mov	r2, sp
    191a:	2380      	movs	r3, #128	; 0x80
    191c:	7013      	strb	r3, [r2, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    191e:	780b      	ldrb	r3, [r1, #0]
    1920:	7053      	strb	r3, [r2, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1922:	784b      	ldrb	r3, [r1, #1]
    1924:	7093      	strb	r3, [r2, #2]
	pinmux_config.powersave    = config->powersave;
    1926:	788b      	ldrb	r3, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1928:	4669      	mov	r1, sp
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
	pinmux_config.powersave    = config->powersave;
    192a:	70d3      	strb	r3, [r2, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    192c:	4b01      	ldr	r3, [pc, #4]	; (1934 <port_pin_set_config+0x20>)
    192e:	4798      	blx	r3
}
    1930:	b003      	add	sp, #12
    1932:	bd00      	pop	{pc}
    1934:	00001e99 	.word	0x00001e99

00001938 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1938:	b570      	push	{r4, r5, r6, lr}
    193a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    193c:	466b      	mov	r3, sp
    193e:	2401      	movs	r4, #1
	config->powersave  = false;
    1940:	2600      	movs	r6, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1942:	4669      	mov	r1, sp
    1944:	4d08      	ldr	r5, [pc, #32]	; (1968 <system_board_init+0x30>)
    1946:	2008      	movs	r0, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1948:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    194a:	709e      	strb	r6, [r3, #2]
	 */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    194c:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    194e:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1950:	4b06      	ldr	r3, [pc, #24]	; (196c <system_board_init+0x34>)
    1952:	2280      	movs	r2, #128	; 0x80
    1954:	0052      	lsls	r2, r2, #1
    1956:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);	
    1958:	2005      	movs	r0, #5
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    195a:	466b      	mov	r3, sp
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);	
    195c:	4669      	mov	r1, sp
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    195e:	701e      	strb	r6, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1960:	705c      	strb	r4, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);	
    1962:	47a8      	blx	r5
    1964:	b002      	add	sp, #8
    1966:	bd70      	pop	{r4, r5, r6, pc}
    1968:	00001915 	.word	0x00001915
    196c:	41004400 	.word	0x41004400

00001970 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1970:	4b0b      	ldr	r3, [pc, #44]	; (19a0 <cpu_irq_enter_critical+0x30>)
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	2a00      	cmp	r2, #0
    1976:	d105      	bne.n	1984 <cpu_irq_enter_critical+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1978:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    197c:	2900      	cmp	r1, #0
    197e:	d005      	beq.n	198c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1980:	4908      	ldr	r1, [pc, #32]	; (19a4 <cpu_irq_enter_critical+0x34>)
    1982:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1984:	681a      	ldr	r2, [r3, #0]
    1986:	3201      	adds	r2, #1
    1988:	601a      	str	r2, [r3, #0]
}
    198a:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    198c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    198e:	f3bf 8f5f 	dmb	sy

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
    1992:	4a05      	ldr	r2, [pc, #20]	; (19a8 <cpu_irq_enter_critical+0x38>)
    1994:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    1996:	4a03      	ldr	r2, [pc, #12]	; (19a4 <cpu_irq_enter_critical+0x34>)
    1998:	2101      	movs	r1, #1
    199a:	7011      	strb	r1, [r2, #0]
    199c:	e7f2      	b.n	1984 <cpu_irq_enter_critical+0x14>
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	20000278 	.word	0x20000278
    19a4:	2000027c 	.word	0x2000027c
    19a8:	20000030 	.word	0x20000030

000019ac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <cpu_irq_leave_critical+0x24>)
    19ae:	681a      	ldr	r2, [r3, #0]
    19b0:	3a01      	subs	r2, #1
    19b2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    19b4:	681b      	ldr	r3, [r3, #0]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d109      	bne.n	19ce <cpu_irq_leave_critical+0x22>
    19ba:	4b06      	ldr	r3, [pc, #24]	; (19d4 <cpu_irq_leave_critical+0x28>)
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	2b00      	cmp	r3, #0
    19c0:	d005      	beq.n	19ce <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <cpu_irq_leave_critical+0x2c>)
    19c4:	2201      	movs	r2, #1
    19c6:	701a      	strb	r2, [r3, #0]
    19c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    19cc:	b662      	cpsie	i
	}
}
    19ce:	4770      	bx	lr
    19d0:	20000278 	.word	0x20000278
    19d4:	2000027c 	.word	0x2000027c
    19d8:	20000030 	.word	0x20000030

000019dc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    19dc:	b510      	push	{r4, lr}
	switch (clock_source) {
    19de:	2808      	cmp	r0, #8
    19e0:	d82c      	bhi.n	1a3c <system_clock_source_get_hz+0x60>
    19e2:	4b1b      	ldr	r3, [pc, #108]	; (1a50 <system_clock_source_get_hz+0x74>)
    19e4:	0080      	lsls	r0, r0, #2
    19e6:	581b      	ldr	r3, [r3, r0]
    19e8:	469f      	mov	pc, r3
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19ea:	4c1a      	ldr	r4, [pc, #104]	; (1a54 <system_clock_source_get_hz+0x78>)
    19ec:	2002      	movs	r0, #2
    19ee:	6823      	ldr	r3, [r4, #0]
    19f0:	4018      	ands	r0, r3
    19f2:	d00b      	beq.n	1a0c <system_clock_source_get_hz+0x30>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19f4:	4918      	ldr	r1, [pc, #96]	; (1a58 <system_clock_source_get_hz+0x7c>)
    19f6:	2210      	movs	r2, #16
    19f8:	68cb      	ldr	r3, [r1, #12]
    19fa:	421a      	tst	r2, r3
    19fc:	d0fc      	beq.n	19f8 <system_clock_source_get_hz+0x1c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19fe:	6823      	ldr	r3, [r4, #0]
    1a00:	075a      	lsls	r2, r3, #29
    1a02:	d41d      	bmi.n	1a40 <system_clock_source_get_hz+0x64>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1a04:	4815      	ldr	r0, [pc, #84]	; (1a5c <system_clock_source_get_hz+0x80>)
    1a06:	e001      	b.n	1a0c <system_clock_source_get_hz+0x30>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1a08:	4b12      	ldr	r3, [pc, #72]	; (1a54 <system_clock_source_get_hz+0x78>)
    1a0a:	6918      	ldr	r0, [r3, #16]
#endif

	default:
		return 0;
	}
}
    1a0c:	bd10      	pop	{r4, pc}

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a0e:	4a12      	ldr	r2, [pc, #72]	; (1a58 <system_clock_source_get_hz+0x7c>)
    1a10:	2350      	movs	r3, #80	; 0x50
    1a12:	5cd3      	ldrb	r3, [r2, r3]

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
			return 0;
    1a14:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a16:	075a      	lsls	r2, r3, #29
    1a18:	d5f8      	bpl.n	1a0c <system_clock_source_get_hz+0x30>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1a1a:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <system_clock_source_get_hz+0x78>)
    1a1c:	68d8      	ldr	r0, [r3, #12]
    1a1e:	e7f5      	b.n	1a0c <system_clock_source_get_hz+0x30>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1a20:	2080      	movs	r0, #128	; 0x80
    1a22:	0200      	lsls	r0, r0, #8
    1a24:	e7f2      	b.n	1a0c <system_clock_source_get_hz+0x30>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1a26:	4b0b      	ldr	r3, [pc, #44]	; (1a54 <system_clock_source_get_hz+0x78>)
    1a28:	6958      	ldr	r0, [r3, #20]
    1a2a:	e7ef      	b.n	1a0c <system_clock_source_get_hz+0x30>
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a2c:	4b0a      	ldr	r3, [pc, #40]	; (1a58 <system_clock_source_get_hz+0x7c>)
    1a2e:	6a18      	ldr	r0, [r3, #32]
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <system_clock_source_get_hz+0x84>)
    1a32:	0580      	lsls	r0, r0, #22
    1a34:	0f80      	lsrs	r0, r0, #30
    1a36:	40c3      	lsrs	r3, r0
    1a38:	1c18      	adds	r0, r3, #0
    1a3a:	e7e7      	b.n	1a0c <system_clock_source_get_hz+0x30>

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a3c:	2000      	movs	r0, #0
    1a3e:	e7e5      	b.n	1a0c <system_clock_source_get_hz+0x30>
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a40:	4b08      	ldr	r3, [pc, #32]	; (1a64 <system_clock_source_get_hz+0x88>)
    1a42:	2000      	movs	r0, #0
    1a44:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1a46:	68a3      	ldr	r3, [r4, #8]
    1a48:	041b      	lsls	r3, r3, #16
    1a4a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a4c:	4358      	muls	r0, r3
    1a4e:	e7dd      	b.n	1a0c <system_clock_source_get_hz+0x30>
    1a50:	00002f08 	.word	0x00002f08
    1a54:	20000280 	.word	0x20000280
    1a58:	40000800 	.word	0x40000800
    1a5c:	02dc6c00 	.word	0x02dc6c00
    1a60:	007a1200 	.word	0x007a1200
    1a64:	00001df1 	.word	0x00001df1

00001a68 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6a:	464f      	mov	r7, r9
    1a6c:	4646      	mov	r6, r8
    1a6e:	b4c0      	push	{r6, r7}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1a70:	4b45      	ldr	r3, [pc, #276]	; (1b88 <system_clock_init+0x120>)
    1a72:	22c2      	movs	r2, #194	; 0xc2
    1a74:	00d2      	lsls	r2, r2, #3
    1a76:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a78:	4b44      	ldr	r3, [pc, #272]	; (1b8c <system_clock_init+0x124>)
    1a7a:	211e      	movs	r1, #30
    1a7c:	685a      	ldr	r2, [r3, #4]
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a7e:	b085      	sub	sp, #20
    1a80:	438a      	bics	r2, r1
    1a82:	2104      	movs	r1, #4
    1a84:	430a      	orrs	r2, r1
    1a86:	605a      	str	r2, [r3, #4]
    1a88:	4d41      	ldr	r5, [pc, #260]	; (1b90 <system_clock_init+0x128>)
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1a8a:	2302      	movs	r3, #2
    1a8c:	466a      	mov	r2, sp
    1a8e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a90:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a92:	b2e0      	uxtb	r0, r4
    1a94:	4669      	mov	r1, sp
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a96:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a98:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a9a:	2c18      	cmp	r4, #24
    1a9c:	d1f9      	bne.n	1a92 <system_clock_init+0x2a>
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1a9e:	4b3d      	ldr	r3, [pc, #244]	; (1b94 <system_clock_init+0x12c>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1aa4:	2b3f      	cmp	r3, #63	; 0x3f
    1aa6:	d06c      	beq.n	1b82 <system_clock_init+0x11a>
    1aa8:	029b      	lsls	r3, r3, #10
    1aaa:	223f      	movs	r2, #63	; 0x3f
    1aac:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1aae:	4f3a      	ldr	r7, [pc, #232]	; (1b98 <system_clock_init+0x130>)
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1ab0:	2400      	movs	r4, #0
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1ab2:	607b      	str	r3, [r7, #4]
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1ab4:	4b39      	ldr	r3, [pc, #228]	; (1b9c <system_clock_init+0x134>)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1ab6:	603c      	str	r4, [r7, #0]
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1ab8:	60bb      	str	r3, [r7, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1aba:	683a      	ldr	r2, [r7, #0]
    1abc:	2304      	movs	r3, #4
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1abe:	4e32      	ldr	r6, [pc, #200]	; (1b88 <system_clock_init+0x120>)
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1ac0:	4313      	orrs	r3, r2
    1ac2:	603b      	str	r3, [r7, #0]
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1ac4:	6a33      	ldr	r3, [r6, #32]
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ac6:	2240      	movs	r2, #64	; 0x40
    1ac8:	4393      	bics	r3, r2
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	4313      	orrs	r3, r2
    1ace:	4a34      	ldr	r2, [pc, #208]	; (1ba0 <system_clock_init+0x138>)
    1ad0:	4013      	ands	r3, r2
    1ad2:	6233      	str	r3, [r6, #32]
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ad4:	6a33      	ldr	r3, [r6, #32]
    1ad6:	2202      	movs	r2, #2
    1ad8:	4313      	orrs	r3, r2
    1ada:	6233      	str	r3, [r6, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1adc:	4b31      	ldr	r3, [pc, #196]	; (1ba4 <system_clock_init+0x13c>)
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ade:	4691      	mov	r9, r2
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ae0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ae2:	466b      	mov	r3, sp
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ae4:	466a      	mov	r2, sp
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ae6:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ae8:	2306      	movs	r3, #6
    1aea:	7013      	strb	r3, [r2, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1aec:	23fa      	movs	r3, #250	; 0xfa
    1aee:	9301      	str	r3, [sp, #4]
    1af0:	4b2d      	ldr	r3, [pc, #180]	; (1ba8 <system_clock_init+0x140>)
    1af2:	4669      	mov	r1, sp
    1af4:	2001      	movs	r0, #1
#endif
	config->run_in_standby     = false;
    1af6:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1af8:	7254      	strb	r4, [r2, #9]
    1afa:	4698      	mov	r8, r3
    1afc:	4798      	blx	r3
    1afe:	2001      	movs	r0, #1
    1b00:	4c2a      	ldr	r4, [pc, #168]	; (1bac <system_clock_init+0x144>)
    1b02:	47a0      	blx	r4
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1b04:	466a      	mov	r2, sp
    1b06:	2301      	movs	r3, #1
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1b08:	4669      	mov	r1, sp
    1b0a:	2000      	movs	r0, #0
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1b0c:	7013      	strb	r3, [r2, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1b0e:	47a8      	blx	r5
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1b10:	2000      	movs	r0, #0
    1b12:	4b27      	ldr	r3, [pc, #156]	; (1bb0 <system_clock_init+0x148>)
    1b14:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b16:	683b      	ldr	r3, [r7, #0]
    1b18:	464a      	mov	r2, r9
    1b1a:	4313      	orrs	r3, r2
    1b1c:	603b      	str	r3, [r7, #0]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b1e:	1c30      	adds	r0, r6, #0

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b20:	84b2      	strh	r2, [r6, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b22:	2110      	movs	r1, #16
    1b24:	68c3      	ldr	r3, [r0, #12]
    1b26:	4a18      	ldr	r2, [pc, #96]	; (1b88 <system_clock_init+0x120>)
    1b28:	4219      	tst	r1, r3
    1b2a:	d0fb      	beq.n	1b24 <system_clock_init+0xbc>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b2c:	68bb      	ldr	r3, [r7, #8]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b2e:	2010      	movs	r0, #16

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b30:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1b36:	2300      	movs	r3, #0
    1b38:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b3a:	68d3      	ldr	r3, [r2, #12]
    1b3c:	4912      	ldr	r1, [pc, #72]	; (1b88 <system_clock_init+0x120>)
    1b3e:	4218      	tst	r0, r3
    1b40:	d0fb      	beq.n	1b3a <system_clock_init+0xd2>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b42:	683b      	ldr	r3, [r7, #0]

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b44:	22d0      	movs	r2, #208	; 0xd0
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b46:	b29b      	uxth	r3, r3
    1b48:	848b      	strh	r3, [r1, #36]	; 0x24

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b4a:	68cb      	ldr	r3, [r1, #12]
    1b4c:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1b4e:	2bd0      	cmp	r3, #208	; 0xd0
    1b50:	d1fb      	bne.n	1b4a <system_clock_init+0xe2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1b52:	4a18      	ldr	r2, [pc, #96]	; (1bb4 <system_clock_init+0x14c>)
    1b54:	2300      	movs	r3, #0
    1b56:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1b58:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1b5a:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1b5c:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b5e:	2201      	movs	r2, #1
    1b60:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    1b62:	466a      	mov	r2, sp
    1b64:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1b66:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    1b68:	7253      	strb	r3, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1b6a:	4669      	mov	r1, sp
    1b6c:	2307      	movs	r3, #7
    1b6e:	2000      	movs	r0, #0
    1b70:	7013      	strb	r3, [r2, #0]
    1b72:	47c0      	blx	r8
    1b74:	2000      	movs	r0, #0
    1b76:	47a0      	blx	r4
#endif
}
    1b78:	b005      	add	sp, #20
    1b7a:	bc0c      	pop	{r2, r3}
    1b7c:	4690      	mov	r8, r2
    1b7e:	4699      	mov	r9, r3
    1b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b82:	4b0d      	ldr	r3, [pc, #52]	; (1bb8 <system_clock_init+0x150>)
    1b84:	e793      	b.n	1aae <system_clock_init+0x46>
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	40000800 	.word	0x40000800
    1b8c:	41004000 	.word	0x41004000
    1b90:	00001d5d 	.word	0x00001d5d
    1b94:	00806024 	.word	0x00806024
    1b98:	20000280 	.word	0x20000280
    1b9c:	1c3f05dc 	.word	0x1c3f05dc
    1ba0:	fffffcff 	.word	0xfffffcff
    1ba4:	00001bbd 	.word	0x00001bbd
    1ba8:	00001be1 	.word	0x00001be1
    1bac:	00001c91 	.word	0x00001c91
    1bb0:	00001dc1 	.word	0x00001dc1
    1bb4:	40000400 	.word	0x40000400
    1bb8:	00007c3f 	.word	0x00007c3f

00001bbc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1bbc:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <system_gclk_init+0x1c>)
    1bbe:	2208      	movs	r2, #8
    1bc0:	6999      	ldr	r1, [r3, #24]
    1bc2:	430a      	orrs	r2, r1
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1bc4:	4905      	ldr	r1, [pc, #20]	; (1bdc <system_gclk_init+0x20>)
    1bc6:	619a      	str	r2, [r3, #24]
    1bc8:	2301      	movs	r3, #1
    1bca:	700b      	strb	r3, [r1, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1bcc:	2201      	movs	r2, #1
    1bce:	780b      	ldrb	r3, [r1, #0]
    1bd0:	421a      	tst	r2, r3
    1bd2:	d1fc      	bne.n	1bce <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1bd4:	4770      	bx	lr
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	40000400 	.word	0x40000400
    1bdc:	40000c00 	.word	0x40000c00

00001be0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1be2:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1be4:	784b      	ldrb	r3, [r1, #1]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1be6:	022d      	lsls	r5, r5, #8
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1be8:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1bea:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1bec:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d002      	beq.n	1bf8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1bf2:	2380      	movs	r3, #128	; 0x80
    1bf4:	02db      	lsls	r3, r3, #11
    1bf6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1bf8:	7a4b      	ldrb	r3, [r1, #9]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d002      	beq.n	1c04 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1bfe:	2380      	movs	r3, #128	; 0x80
    1c00:	031b      	lsls	r3, r3, #12
    1c02:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c04:	684c      	ldr	r4, [r1, #4]
    1c06:	2c01      	cmp	r4, #1
    1c08:	d90f      	bls.n	1c2a <system_gclk_gen_set_config+0x4a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c0a:	1e67      	subs	r7, r4, #1
    1c0c:	4027      	ands	r7, r4
    1c0e:	d131      	bne.n	1c74 <system_gclk_gen_set_config+0x94>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c10:	2c02      	cmp	r4, #2
    1c12:	d006      	beq.n	1c22 <system_gclk_gen_set_config+0x42>
    1c14:	2302      	movs	r3, #2
    1c16:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1c18:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1c1a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c1c:	429c      	cmp	r4, r3
    1c1e:	d8fb      	bhi.n	1c18 <system_gclk_gen_set_config+0x38>
    1c20:	0217      	lsls	r7, r2, #8
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c22:	2380      	movs	r3, #128	; 0x80
    1c24:	035b      	lsls	r3, r3, #13
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c26:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c28:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c2a:	7a0b      	ldrb	r3, [r1, #8]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d002      	beq.n	1c36 <system_gclk_gen_set_config+0x56>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c30:	2380      	movs	r3, #128	; 0x80
    1c32:	039b      	lsls	r3, r3, #14
    1c34:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c36:	4a12      	ldr	r2, [pc, #72]	; (1c80 <system_gclk_gen_set_config+0xa0>)
    1c38:	7853      	ldrb	r3, [r2, #1]
    1c3a:	b25b      	sxtb	r3, r3
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	dbfb      	blt.n	1c38 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c40:	4b10      	ldr	r3, [pc, #64]	; (1c84 <system_gclk_gen_set_config+0xa4>)
    1c42:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c44:	4b10      	ldr	r3, [pc, #64]	; (1c88 <system_gclk_gen_set_config+0xa8>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c46:	4a0e      	ldr	r2, [pc, #56]	; (1c80 <system_gclk_gen_set_config+0xa0>)
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c48:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c4a:	7851      	ldrb	r1, [r2, #1]
    1c4c:	4b0c      	ldr	r3, [pc, #48]	; (1c80 <system_gclk_gen_set_config+0xa0>)
    1c4e:	b249      	sxtb	r1, r1
    1c50:	2900      	cmp	r1, #0
    1c52:	dbfa      	blt.n	1c4a <system_gclk_gen_set_config+0x6a>

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c54:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c56:	1c19      	adds	r1, r3, #0
    1c58:	784a      	ldrb	r2, [r1, #1]
    1c5a:	4b09      	ldr	r3, [pc, #36]	; (1c80 <system_gclk_gen_set_config+0xa0>)
    1c5c:	b252      	sxtb	r2, r2
    1c5e:	2a00      	cmp	r2, #0
    1c60:	dbfa      	blt.n	1c58 <system_gclk_gen_set_config+0x78>
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c62:	6859      	ldr	r1, [r3, #4]
    1c64:	2280      	movs	r2, #128	; 0x80
    1c66:	0252      	lsls	r2, r2, #9
    1c68:	400a      	ands	r2, r1
    1c6a:	4315      	orrs	r5, r2
    1c6c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c6e:	4b07      	ldr	r3, [pc, #28]	; (1c8c <system_gclk_gen_set_config+0xac>)
    1c70:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c74:	2380      	movs	r3, #128	; 0x80
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1c76:	0227      	lsls	r7, r4, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c78:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1c7a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c7c:	431d      	orrs	r5, r3
    1c7e:	e7d4      	b.n	1c2a <system_gclk_gen_set_config+0x4a>
    1c80:	40000c00 	.word	0x40000c00
    1c84:	00001971 	.word	0x00001971
    1c88:	40000c08 	.word	0x40000c08
    1c8c:	000019ad 	.word	0x000019ad

00001c90 <system_gclk_gen_enable>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c90:	4a0c      	ldr	r2, [pc, #48]	; (1cc4 <system_gclk_gen_enable+0x34>)
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1c92:	b510      	push	{r4, lr}
    1c94:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c96:	7853      	ldrb	r3, [r2, #1]
    1c98:	b25b      	sxtb	r3, r3
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	dbfb      	blt.n	1c96 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c9e:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <system_gclk_gen_enable+0x38>)
    1ca0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ca2:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <system_gclk_gen_enable+0x3c>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca4:	4907      	ldr	r1, [pc, #28]	; (1cc4 <system_gclk_gen_enable+0x34>)
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ca6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca8:	784a      	ldrb	r2, [r1, #1]
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <system_gclk_gen_enable+0x34>)
    1cac:	b252      	sxtb	r2, r2
    1cae:	2a00      	cmp	r2, #0
    1cb0:	dbfa      	blt.n	1ca8 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1cb2:	6859      	ldr	r1, [r3, #4]
    1cb4:	2280      	movs	r2, #128	; 0x80
    1cb6:	0252      	lsls	r2, r2, #9
    1cb8:	430a      	orrs	r2, r1
    1cba:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1cbc:	4b04      	ldr	r3, [pc, #16]	; (1cd0 <system_gclk_gen_enable+0x40>)
    1cbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cc0:	bd10      	pop	{r4, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	00001971 	.word	0x00001971
    1ccc:	40000c04 	.word	0x40000c04
    1cd0:	000019ad 	.word	0x000019ad

00001cd4 <system_gclk_gen_get_hz>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cd4:	4a1a      	ldr	r2, [pc, #104]	; (1d40 <system_gclk_gen_get_hz+0x6c>)
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cd8:	1c05      	adds	r5, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cda:	7853      	ldrb	r3, [r2, #1]
    1cdc:	b25b      	sxtb	r3, r3
    1cde:	2b00      	cmp	r3, #0
    1ce0:	dbfb      	blt.n	1cda <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ce2:	4b18      	ldr	r3, [pc, #96]	; (1d44 <system_gclk_gen_get_hz+0x70>)
    1ce4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ce6:	4b18      	ldr	r3, [pc, #96]	; (1d48 <system_gclk_gen_get_hz+0x74>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ce8:	4a15      	ldr	r2, [pc, #84]	; (1d40 <system_gclk_gen_get_hz+0x6c>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1cea:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cec:	7853      	ldrb	r3, [r2, #1]
    1cee:	4c14      	ldr	r4, [pc, #80]	; (1d40 <system_gclk_gen_get_hz+0x6c>)
    1cf0:	b25b      	sxtb	r3, r3
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	dbfa      	blt.n	1cec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1cf6:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1cf8:	4b14      	ldr	r3, [pc, #80]	; (1d4c <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1cfa:	04c0      	lsls	r0, r0, #19
    1cfc:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1cfe:	4798      	blx	r3
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d00:	4b11      	ldr	r3, [pc, #68]	; (1d48 <system_gclk_gen_get_hz+0x74>)
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d02:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d04:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d06:	6867      	ldr	r7, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d08:	4b11      	ldr	r3, [pc, #68]	; (1d50 <system_gclk_gen_get_hz+0x7c>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d0a:	02ff      	lsls	r7, r7, #11
    1d0c:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d0e:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d10:	7863      	ldrb	r3, [r4, #1]
    1d12:	b25b      	sxtb	r3, r3
    1d14:	2b00      	cmp	r3, #0
    1d16:	dbfb      	blt.n	1d10 <system_gclk_gen_get_hz+0x3c>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d18:	4b09      	ldr	r3, [pc, #36]	; (1d40 <system_gclk_gen_get_hz+0x6c>)
    1d1a:	6899      	ldr	r1, [r3, #8]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d1c:	4b0d      	ldr	r3, [pc, #52]	; (1d54 <system_gclk_gen_get_hz+0x80>)
    1d1e:	0a09      	lsrs	r1, r1, #8
    1d20:	b28c      	uxth	r4, r1
    1d22:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d24:	2f00      	cmp	r7, #0
    1d26:	d003      	beq.n	1d30 <system_gclk_gen_get_hz+0x5c>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1d28:	3401      	adds	r4, #1
    1d2a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1d2c:	1c30      	adds	r0, r6, #0
    1d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d30:	2c01      	cmp	r4, #1
    1d32:	d9fb      	bls.n	1d2c <system_gclk_gen_get_hz+0x58>
		gen_input_hz /= divider;
    1d34:	1c30      	adds	r0, r6, #0
    1d36:	1c21      	adds	r1, r4, #0
    1d38:	4b07      	ldr	r3, [pc, #28]	; (1d58 <system_gclk_gen_get_hz+0x84>)
    1d3a:	4798      	blx	r3
    1d3c:	1c06      	adds	r6, r0, #0
    1d3e:	e7f5      	b.n	1d2c <system_gclk_gen_get_hz+0x58>
    1d40:	40000c00 	.word	0x40000c00
    1d44:	00001971 	.word	0x00001971
    1d48:	40000c04 	.word	0x40000c04
    1d4c:	000019dd 	.word	0x000019dd
    1d50:	40000c08 	.word	0x40000c08
    1d54:	000019ad 	.word	0x000019ad
    1d58:	00002491 	.word	0x00002491

00001d5c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1d5c:	b538      	push	{r3, r4, r5, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d5e:	780d      	ldrb	r5, [r1, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d60:	4b11      	ldr	r3, [pc, #68]	; (1da8 <system_gclk_chan_set_config+0x4c>)
    1d62:	022d      	lsls	r5, r5, #8
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1d64:	1c04      	adds	r4, r0, #0

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d66:	4305      	orrs	r5, r0
    1d68:	4798      	blx	r3
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d6a:	4b10      	ldr	r3, [pc, #64]	; (1dac <system_gclk_chan_set_config+0x50>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d6c:	4910      	ldr	r1, [pc, #64]	; (1db0 <system_gclk_chan_set_config+0x54>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d6e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d70:	8848      	ldrh	r0, [r1, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1d72:	4b10      	ldr	r3, [pc, #64]	; (1db4 <system_gclk_chan_set_config+0x58>)
    1d74:	884a      	ldrh	r2, [r1, #2]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d76:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1d78:	4013      	ands	r3, r2
    1d7a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d7c:	884a      	ldrh	r2, [r1, #2]
    1d7e:	4b0e      	ldr	r3, [pc, #56]	; (1db8 <system_gclk_chan_set_config+0x5c>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d80:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d82:	4013      	ands	r3, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1d84:	2280      	movs	r2, #128	; 0x80
	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d86:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1d88:	01d2      	lsls	r2, r2, #7
    1d8a:	884b      	ldrh	r3, [r1, #2]
    1d8c:	4c08      	ldr	r4, [pc, #32]	; (1db0 <system_gclk_chan_set_config+0x54>)
    1d8e:	4213      	tst	r3, r2
    1d90:	d1fb      	bne.n	1d8a <system_gclk_chan_set_config+0x2e>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1d92:	8861      	ldrh	r1, [r4, #2]
    1d94:	4b07      	ldr	r3, [pc, #28]	; (1db4 <system_gclk_chan_set_config+0x58>)
    1d96:	0202      	lsls	r2, r0, #8
    1d98:	400b      	ands	r3, r1
    1d9a:	4313      	orrs	r3, r2
    1d9c:	8063      	strh	r3, [r4, #2]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d9e:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1da0:	4b06      	ldr	r3, [pc, #24]	; (1dbc <system_gclk_chan_set_config+0x60>)
    1da2:	4798      	blx	r3
    1da4:	8065      	strh	r5, [r4, #2]
}
    1da6:	bd38      	pop	{r3, r4, r5, pc}
    1da8:	00001971 	.word	0x00001971
    1dac:	40000c02 	.word	0x40000c02
    1db0:	40000c00 	.word	0x40000c00
    1db4:	fffff0ff 	.word	0xfffff0ff
    1db8:	ffffbfff 	.word	0xffffbfff
    1dbc:	000019ad 	.word	0x000019ad

00001dc0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1dc0:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1dc2:	4b07      	ldr	r3, [pc, #28]	; (1de0 <system_gclk_chan_enable+0x20>)
    1dc4:	1c04      	adds	r4, r0, #0
    1dc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dc8:	4b06      	ldr	r3, [pc, #24]	; (1de4 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1dca:	2280      	movs	r2, #128	; 0x80
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dcc:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1dce:	4b06      	ldr	r3, [pc, #24]	; (1de8 <system_gclk_chan_enable+0x28>)
    1dd0:	01d2      	lsls	r2, r2, #7
    1dd2:	8859      	ldrh	r1, [r3, #2]
    1dd4:	430a      	orrs	r2, r1
    1dd6:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1dd8:	4b04      	ldr	r3, [pc, #16]	; (1dec <system_gclk_chan_enable+0x2c>)
    1dda:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001971 	.word	0x00001971
    1de4:	40000c02 	.word	0x40000c02
    1de8:	40000c00 	.word	0x40000c00
    1dec:	000019ad 	.word	0x000019ad

00001df0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1df2:	4647      	mov	r7, r8
    1df4:	b480      	push	{r7}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1df6:	4c20      	ldr	r4, [pc, #128]	; (1e78 <system_gclk_chan_get_hz+0x88>)
    1df8:	1c05      	adds	r5, r0, #0
    1dfa:	47a0      	blx	r4
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dfc:	4b1f      	ldr	r3, [pc, #124]	; (1e7c <system_gclk_chan_get_hz+0x8c>)
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1dfe:	4e20      	ldr	r6, [pc, #128]	; (1e80 <system_gclk_chan_get_hz+0x90>)
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e00:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e02:	8875      	ldrh	r5, [r6, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e04:	4f1f      	ldr	r7, [pc, #124]	; (1e84 <system_gclk_chan_get_hz+0x94>)
    1e06:	052d      	lsls	r5, r5, #20
    1e08:	0f2d      	lsrs	r5, r5, #28
    1e0a:	47b8      	blx	r7
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e0c:	7873      	ldrb	r3, [r6, #1]
    1e0e:	b25b      	sxtb	r3, r3
    1e10:	2b00      	cmp	r3, #0
    1e12:	dbfb      	blt.n	1e0c <system_gclk_chan_get_hz+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e14:	47a0      	blx	r4
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e16:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <system_gclk_chan_get_hz+0x98>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e18:	4a19      	ldr	r2, [pc, #100]	; (1e80 <system_gclk_chan_get_hz+0x90>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e1a:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e1c:	7853      	ldrb	r3, [r2, #1]
    1e1e:	4c18      	ldr	r4, [pc, #96]	; (1e80 <system_gclk_chan_get_hz+0x90>)
    1e20:	b25b      	sxtb	r3, r3
    1e22:	2b00      	cmp	r3, #0
    1e24:	dbfa      	blt.n	1e1c <system_gclk_chan_get_hz+0x2c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e26:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e28:	4b18      	ldr	r3, [pc, #96]	; (1e8c <system_gclk_chan_get_hz+0x9c>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e2a:	04c0      	lsls	r0, r0, #19
    1e2c:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e2e:	4798      	blx	r3
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e30:	4b15      	ldr	r3, [pc, #84]	; (1e88 <system_gclk_chan_get_hz+0x98>)
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e32:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e34:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1e36:	6863      	ldr	r3, [r4, #4]
    1e38:	02db      	lsls	r3, r3, #11
    1e3a:	0fdb      	lsrs	r3, r3, #31
    1e3c:	4698      	mov	r8, r3

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1e3e:	4b14      	ldr	r3, [pc, #80]	; (1e90 <system_gclk_chan_get_hz+0xa0>)
    1e40:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e42:	7863      	ldrb	r3, [r4, #1]
    1e44:	b25b      	sxtb	r3, r3
    1e46:	2b00      	cmp	r3, #0
    1e48:	dbfb      	blt.n	1e42 <system_gclk_chan_get_hz+0x52>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1e4a:	4b0d      	ldr	r3, [pc, #52]	; (1e80 <system_gclk_chan_get_hz+0x90>)
    1e4c:	6899      	ldr	r1, [r3, #8]
    1e4e:	0a09      	lsrs	r1, r1, #8
    1e50:	b28c      	uxth	r4, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e52:	47b8      	blx	r7

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e54:	4643      	mov	r3, r8
    1e56:	2b00      	cmp	r3, #0
    1e58:	d005      	beq.n	1e66 <system_gclk_chan_get_hz+0x76>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1e5a:	3401      	adds	r4, #1
    1e5c:	40e6      	lsrs	r6, r4

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
    1e5e:	1c30      	adds	r0, r6, #0
    1e60:	bc04      	pop	{r2}
    1e62:	4690      	mov	r8, r2
    1e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e66:	2c01      	cmp	r4, #1
    1e68:	d9f9      	bls.n	1e5e <system_gclk_chan_get_hz+0x6e>
		gen_input_hz /= divider;
    1e6a:	1c30      	adds	r0, r6, #0
    1e6c:	1c21      	adds	r1, r4, #0
    1e6e:	4b09      	ldr	r3, [pc, #36]	; (1e94 <system_gclk_chan_get_hz+0xa4>)
    1e70:	4798      	blx	r3
    1e72:	1c06      	adds	r6, r0, #0
    1e74:	e7f3      	b.n	1e5e <system_gclk_chan_get_hz+0x6e>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	00001971 	.word	0x00001971
    1e7c:	40000c02 	.word	0x40000c02
    1e80:	40000c00 	.word	0x40000c00
    1e84:	000019ad 	.word	0x000019ad
    1e88:	40000c04 	.word	0x40000c04
    1e8c:	000019dd 	.word	0x000019dd
    1e90:	40000c08 	.word	0x40000c08
    1e94:	00002491 	.word	0x00002491

00001e98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e98:	b570      	push	{r4, r5, r6, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e9a:	09c2      	lsrs	r2, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1e9c:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e9e:	2a00      	cmp	r2, #0
    1ea0:	d103      	bne.n	1eaa <system_pinmux_pin_set_config+0x12>
		return &(ports[port_index]->Group[group_index]);
    1ea2:	0943      	lsrs	r3, r0, #5
    1ea4:	4a25      	ldr	r2, [pc, #148]	; (1f3c <system_pinmux_pin_set_config+0xa4>)
    1ea6:	01db      	lsls	r3, r3, #7
    1ea8:	189b      	adds	r3, r3, r2
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1eaa:	221f      	movs	r2, #31
    1eac:	4010      	ands	r0, r2
    1eae:	2201      	movs	r2, #1
    1eb0:	4082      	lsls	r2, r0
    1eb2:	1c10      	adds	r0, r2, #0

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1eb4:	78ca      	ldrb	r2, [r1, #3]
    1eb6:	2a00      	cmp	r2, #0
    1eb8:	d119      	bne.n	1eee <system_pinmux_pin_set_config+0x56>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1eba:	780a      	ldrb	r2, [r1, #0]
    1ebc:	2a80      	cmp	r2, #128	; 0x80
    1ebe:	d039      	beq.n	1f34 <system_pinmux_pin_set_config+0x9c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ec0:	2480      	movs	r4, #128	; 0x80
    1ec2:	0612      	lsls	r2, r2, #24
    1ec4:	0264      	lsls	r4, r4, #9
    1ec6:	4322      	orrs	r2, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ec8:	784c      	ldrb	r4, [r1, #1]
    1eca:	2502      	movs	r5, #2
    1ecc:	1c26      	adds	r6, r4, #0
    1ece:	43ae      	bics	r6, r5
    1ed0:	d107      	bne.n	1ee2 <system_pinmux_pin_set_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ed2:	788c      	ldrb	r4, [r1, #2]
    1ed4:	2c00      	cmp	r4, #0
    1ed6:	d129      	bne.n	1f2c <system_pinmux_pin_set_config+0x94>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ed8:	2480      	movs	r4, #128	; 0x80
    1eda:	02a4      	lsls	r4, r4, #10
    1edc:	4322      	orrs	r2, r4
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ede:	6058      	str	r0, [r3, #4]
    1ee0:	784c      	ldrb	r4, [r1, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ee2:	3c01      	subs	r4, #1
    1ee4:	2c01      	cmp	r4, #1
    1ee6:	d804      	bhi.n	1ef2 <system_pinmux_pin_set_config+0x5a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ee8:	4c15      	ldr	r4, [pc, #84]	; (1f40 <system_pinmux_pin_set_config+0xa8>)
    1eea:	4022      	ands	r2, r4
    1eec:	e001      	b.n	1ef2 <system_pinmux_pin_set_config+0x5a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1eee:	6058      	str	r0, [r3, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1ef0:	2200      	movs	r2, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ef2:	0405      	lsls	r5, r0, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ef4:	24a0      	movs	r4, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ef6:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ef8:	05e4      	lsls	r4, r4, #23
    1efa:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1efc:	4314      	orrs	r4, r2
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1efe:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f00:	24d0      	movs	r4, #208	; 0xd0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f02:	0c05      	lsrs	r5, r0, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f04:	0624      	lsls	r4, r4, #24
    1f06:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f08:	4314      	orrs	r4, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f0a:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f0c:	78cc      	ldrb	r4, [r1, #3]
    1f0e:	2c00      	cmp	r4, #0
    1f10:	d109      	bne.n	1f26 <system_pinmux_pin_set_config+0x8e>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f12:	0354      	lsls	r4, r2, #13
    1f14:	d503      	bpl.n	1f1e <system_pinmux_pin_set_config+0x86>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f16:	788a      	ldrb	r2, [r1, #2]
    1f18:	2a01      	cmp	r2, #1
    1f1a:	d00d      	beq.n	1f38 <system_pinmux_pin_set_config+0xa0>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f1c:	6158      	str	r0, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f1e:	784a      	ldrb	r2, [r1, #1]
    1f20:	3a01      	subs	r2, #1
    1f22:	2a01      	cmp	r2, #1
    1f24:	d900      	bls.n	1f28 <system_pinmux_pin_set_config+0x90>
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
}
    1f26:	bd70      	pop	{r4, r5, r6, pc}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1f28:	6098      	str	r0, [r3, #8]
    1f2a:	e7fc      	b.n	1f26 <system_pinmux_pin_set_config+0x8e>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f2c:	24c0      	movs	r4, #192	; 0xc0
    1f2e:	02e4      	lsls	r4, r4, #11
    1f30:	4322      	orrs	r2, r4
    1f32:	e7d4      	b.n	1ede <system_pinmux_pin_set_config+0x46>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1f34:	2200      	movs	r2, #0
    1f36:	e7c7      	b.n	1ec8 <system_pinmux_pin_set_config+0x30>
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
				port->OUTSET.reg = pin_mask;
    1f38:	6198      	str	r0, [r3, #24]
    1f3a:	e7f0      	b.n	1f1e <system_pinmux_pin_set_config+0x86>
    1f3c:	41004400 	.word	0x41004400
    1f40:	fffbffff 	.word	0xfffbffff

00001f44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f44:	4770      	bx	lr
    1f46:	46c0      	nop			; (mov r8, r8)

00001f48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f48:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <system_init+0x18>)
    1f4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f4e:	4b05      	ldr	r3, [pc, #20]	; (1f64 <system_init+0x1c>)
    1f50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f52:	4b05      	ldr	r3, [pc, #20]	; (1f68 <system_init+0x20>)
    1f54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f56:	4b05      	ldr	r3, [pc, #20]	; (1f6c <system_init+0x24>)
    1f58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <system_init+0x28>)
    1f5c:	4798      	blx	r3
}
    1f5e:	bd08      	pop	{r3, pc}
    1f60:	00001a69 	.word	0x00001a69
    1f64:	00001939 	.word	0x00001939
    1f68:	00001f45 	.word	0x00001f45
    1f6c:	000000ed 	.word	0x000000ed
    1f70:	00001f45 	.word	0x00001f45

00001f74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f74:	e7fe      	b.n	1f74 <Dummy_Handler>
    1f76:	46c0      	nop			; (mov r8, r8)

00001f78 <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1f78:	4920      	ldr	r1, [pc, #128]	; (1ffc <Reset_Handler+0x84>)
    1f7a:	4821      	ldr	r0, [pc, #132]	; (2000 <Reset_Handler+0x88>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f7c:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1f7e:	4281      	cmp	r1, r0
    1f80:	d009      	beq.n	1f96 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    1f82:	4b20      	ldr	r3, [pc, #128]	; (2004 <Reset_Handler+0x8c>)
    1f84:	4298      	cmp	r0, r3
    1f86:	d206      	bcs.n	1f96 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    1f88:	43c2      	mvns	r2, r0
    1f8a:	18d2      	adds	r2, r2, r3
    1f8c:	0892      	lsrs	r2, r2, #2
    1f8e:	3201      	adds	r2, #1
    1f90:	0092      	lsls	r2, r2, #2
    1f92:	4b1d      	ldr	r3, [pc, #116]	; (2008 <Reset_Handler+0x90>)
    1f94:	4798      	blx	r3
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f96:	481d      	ldr	r0, [pc, #116]	; (200c <Reset_Handler+0x94>)
    1f98:	4b1d      	ldr	r3, [pc, #116]	; (2010 <Reset_Handler+0x98>)
    1f9a:	4298      	cmp	r0, r3
    1f9c:	d207      	bcs.n	1fae <Reset_Handler+0x36>
                *pDest++ = 0;
    1f9e:	43c2      	mvns	r2, r0
    1fa0:	18d2      	adds	r2, r2, r3
    1fa2:	0892      	lsrs	r2, r2, #2
    1fa4:	3201      	adds	r2, #1
    1fa6:	0092      	lsls	r2, r2, #2
    1fa8:	2100      	movs	r1, #0
    1faa:	4b1a      	ldr	r3, [pc, #104]	; (2014 <Reset_Handler+0x9c>)
    1fac:	4798      	blx	r3
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fae:	4a1a      	ldr	r2, [pc, #104]	; (2018 <Reset_Handler+0xa0>)
    1fb0:	4b1a      	ldr	r3, [pc, #104]	; (201c <Reset_Handler+0xa4>)
    1fb2:	21ff      	movs	r1, #255	; 0xff
    1fb4:	438a      	bics	r2, r1
    1fb6:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1fb8:	4a19      	ldr	r2, [pc, #100]	; (2020 <Reset_Handler+0xa8>)
    1fba:	2390      	movs	r3, #144	; 0x90
    1fbc:	2102      	movs	r1, #2
    1fbe:	005b      	lsls	r3, r3, #1
    1fc0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1fc2:	4b18      	ldr	r3, [pc, #96]	; (2024 <Reset_Handler+0xac>)
    1fc4:	2230      	movs	r2, #48	; 0x30
    1fc6:	7b99      	ldrb	r1, [r3, #14]
    1fc8:	4391      	bics	r1, r2
    1fca:	2220      	movs	r2, #32
    1fcc:	430a      	orrs	r2, r1
    1fce:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1fd0:	7b99      	ldrb	r1, [r3, #14]
    1fd2:	220c      	movs	r2, #12
    1fd4:	4391      	bics	r1, r2
    1fd6:	2208      	movs	r2, #8
    1fd8:	430a      	orrs	r2, r1
    1fda:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1fdc:	7b99      	ldrb	r1, [r3, #14]
    1fde:	2203      	movs	r2, #3
    1fe0:	4391      	bics	r1, r2
    1fe2:	2202      	movs	r2, #2
    1fe4:	430a      	orrs	r2, r1
    1fe6:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1fe8:	4b0f      	ldr	r3, [pc, #60]	; (2028 <Reset_Handler+0xb0>)
    1fea:	2280      	movs	r2, #128	; 0x80
    1fec:	6859      	ldr	r1, [r3, #4]
    1fee:	430a      	orrs	r2, r1
    1ff0:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1ff2:	4b0e      	ldr	r3, [pc, #56]	; (202c <Reset_Handler+0xb4>)
    1ff4:	4798      	blx	r3

        /* Branch to main function */
        main();
    1ff6:	4b0e      	ldr	r3, [pc, #56]	; (2030 <Reset_Handler+0xb8>)
    1ff8:	4798      	blx	r3
    1ffa:	e7fe      	b.n	1ffa <Reset_Handler+0x82>
    1ffc:	00002f54 	.word	0x00002f54
    2000:	20000000 	.word	0x20000000
    2004:	20000098 	.word	0x20000098
    2008:	00002ec3 	.word	0x00002ec3
    200c:	20000098 	.word	0x20000098
    2010:	20000330 	.word	0x20000330
    2014:	00002ed5 	.word	0x00002ed5
    2018:	00000000 	.word	0x00000000
    201c:	e000ed00 	.word	0xe000ed00
    2020:	41007000 	.word	0x41007000
    2024:	41004800 	.word	0x41004800
    2028:	41004000 	.word	0x41004000
    202c:	00002e59 	.word	0x00002e59
    2030:	000021d9 	.word	0x000021d9

00002034 <enableRs485Transmit>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2034:	4b02      	ldr	r3, [pc, #8]	; (2040 <enableRs485Transmit+0xc>)
    2036:	2204      	movs	r2, #4
    2038:	619a      	str	r2, [r3, #24]
    203a:	2210      	movs	r2, #16
    203c:	619a      	str	r2, [r3, #24]

void enableRs485Transmit()
{
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_RE, GPIO_RS485_DATA_TRANSMIT);
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_DE, GPIO_RS485_DATA_TRANSMIT);	
}
    203e:	4770      	bx	lr
    2040:	41004400 	.word	0x41004400

00002044 <disableRs485Transmit>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2044:	4b02      	ldr	r3, [pc, #8]	; (2050 <disableRs485Transmit+0xc>)
    2046:	2204      	movs	r2, #4
    2048:	615a      	str	r2, [r3, #20]
    204a:	2210      	movs	r2, #16
    204c:	615a      	str	r2, [r3, #20]
void disableRs485Transmit()
{
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_RE, GPIO_RS485_DATA_RECEIVE);
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_DE, GPIO_RS485_DATA_RECEIVE);	
}
    204e:	4770      	bx	lr
    2050:	41004400 	.word	0x41004400

00002054 <extint_callback>:
}
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    2054:	b508      	push	{r3, lr}
	if(settings.setupModeEnabled == true)
    2056:	4b03      	ldr	r3, [pc, #12]	; (2064 <extint_callback+0x10>)
    2058:	7c5b      	ldrb	r3, [r3, #17]
    205a:	2b00      	cmp	r3, #0
    205c:	d001      	beq.n	2062 <extint_callback+0xe>
	{
		sendButtonPressEvent();
    205e:	4b02      	ldr	r3, [pc, #8]	; (2068 <extint_callback+0x14>)
    2060:	4798      	blx	r3
	}
}
    2062:	bd08      	pop	{r3, pc}
    2064:	20000298 	.word	0x20000298
    2068:	000008a1 	.word	0x000008a1

0000206c <SysTick_Handler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    206c:	4b02      	ldr	r3, [pc, #8]	; (2078 <SysTick_Handler+0xc>)
    206e:	2280      	movs	r2, #128	; 0x80
    2070:	0052      	lsls	r2, r2, #1
    2072:	61da      	str	r2, [r3, #28]
 *        vector table.
 */
void SysTick_Handler(void)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    2074:	4770      	bx	lr
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	41004400 	.word	0x41004400

0000207c <configure_uart>:
	eint_chan_conf.filter_input_signal = true;
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
}

__attribute__((optimize("O0"))) static void configure_uart(void)
{
    207c:	b590      	push	{r4, r7, lr}
    207e:	b093      	sub	sp, #76	; 0x4c
    2080:	af00      	add	r7, sp, #0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2082:	1d3b      	adds	r3, r7, #4
    2084:	2280      	movs	r2, #128	; 0x80
    2086:	05d2      	lsls	r2, r2, #23
    2088:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    208a:	1d3b      	adds	r3, r7, #4
    208c:	2200      	movs	r2, #0
    208e:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2090:	1d3b      	adds	r3, r7, #4
    2092:	22ff      	movs	r2, #255	; 0xff
    2094:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2096:	1d3b      	adds	r3, r7, #4
    2098:	2200      	movs	r2, #0
    209a:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    209c:	1d3b      	adds	r3, r7, #4
    209e:	2200      	movs	r2, #0
    20a0:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    20a2:	1d3b      	adds	r3, r7, #4
    20a4:	2296      	movs	r2, #150	; 0x96
    20a6:	0192      	lsls	r2, r2, #6
    20a8:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    20aa:	1d3a      	adds	r2, r7, #4
    20ac:	2324      	movs	r3, #36	; 0x24
    20ae:	2101      	movs	r1, #1
    20b0:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    20b2:	1d3a      	adds	r2, r7, #4
    20b4:	2325      	movs	r3, #37	; 0x25
    20b6:	2101      	movs	r1, #1
    20b8:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    20ba:	1d3a      	adds	r2, r7, #4
    20bc:	2326      	movs	r3, #38	; 0x26
    20be:	2100      	movs	r1, #0
    20c0:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    20c2:	1d3a      	adds	r2, r7, #4
    20c4:	2327      	movs	r3, #39	; 0x27
    20c6:	2100      	movs	r1, #0
    20c8:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    20ca:	1d3b      	adds	r3, r7, #4
    20cc:	2200      	movs	r2, #0
    20ce:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    20d0:	1d3b      	adds	r3, r7, #4
    20d2:	2288      	movs	r2, #136	; 0x88
    20d4:	0352      	lsls	r2, r2, #13
    20d6:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    20d8:	1d3a      	adds	r2, r7, #4
    20da:	232c      	movs	r3, #44	; 0x2c
    20dc:	2100      	movs	r1, #0
    20de:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    20e0:	1d3a      	adds	r2, r7, #4
    20e2:	232d      	movs	r3, #45	; 0x2d
    20e4:	2100      	movs	r1, #0
    20e6:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    20e8:	1d3b      	adds	r3, r7, #4
    20ea:	2200      	movs	r2, #0
    20ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    20ee:	1d3b      	adds	r3, r7, #4
    20f0:	2200      	movs	r2, #0
    20f2:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    20f4:	1d3b      	adds	r3, r7, #4
    20f6:	2200      	movs	r2, #0
    20f8:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    20fa:	1d3b      	adds	r3, r7, #4
    20fc:	2200      	movs	r2, #0
    20fe:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2100:	1d3b      	adds	r3, r7, #4
    2102:	2200      	movs	r2, #0
    2104:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2106:	1d3b      	adds	r3, r7, #4
    2108:	2200      	movs	r2, #0
    210a:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    210c:	1d3b      	adds	r3, r7, #4
    210e:	2200      	movs	r2, #0
    2110:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2112:	1d3b      	adds	r3, r7, #4
    2114:	2200      	movs	r2, #0
    2116:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2118:	1d3b      	adds	r3, r7, #4
    211a:	2200      	movs	r2, #0
    211c:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    211e:	1d3b      	adds	r3, r7, #4
    2120:	2200      	movs	r2, #0
    2122:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    2124:	1d3b      	adds	r3, r7, #4
    2126:	2213      	movs	r2, #19
    2128:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    212a:	1d3b      	adds	r3, r7, #4
    212c:	2200      	movs	r2, #0
    212e:	775a      	strb	r2, [r3, #29]
	struct usart_config usart_conf;
	//load up the default usart settings.
	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = USART_RX_3_TX_2_XCK_3;
    2130:	1d3b      	adds	r3, r7, #4
    2132:	22c4      	movs	r2, #196	; 0xc4
    2134:	0392      	lsls	r2, r2, #14
    2136:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = PINMUX_UNUSED;
    2138:	1d3b      	adds	r3, r7, #4
    213a:	2201      	movs	r2, #1
    213c:	4252      	negs	r2, r2
    213e:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = PINMUX_UNUSED;
    2140:	1d3b      	adds	r3, r7, #4
    2142:	2201      	movs	r2, #1
    2144:	4252      	negs	r2, r2
    2146:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2148:	1d3b      	adds	r3, r7, #4
    214a:	4a1c      	ldr	r2, [pc, #112]	; (21bc <configure_uart+0x140>)
    214c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    214e:	1d3b      	adds	r3, r7, #4
    2150:	4a1b      	ldr	r2, [pc, #108]	; (21c0 <configure_uart+0x144>)
    2152:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 460800;
    2154:	1d3b      	adds	r3, r7, #4
    2156:	22e1      	movs	r2, #225	; 0xe1
    2158:	02d2      	lsls	r2, r2, #11
    215a:	621a      	str	r2, [r3, #32]
	usart_conf.sample_rate = USART_SAMPLE_RATE_16X_ARITHMETIC;
    215c:	1d3b      	adds	r3, r7, #4
    215e:	2200      	movs	r2, #0
    2160:	821a      	strh	r2, [r3, #16]
	status_code_genare_t status = STATUS_NO_CHANGE;
    2162:	1c3b      	adds	r3, r7, #0
    2164:	3347      	adds	r3, #71	; 0x47
    2166:	2202      	movs	r2, #2
    2168:	701a      	strb	r2, [r3, #0]
	status = usart_init(&cmd_uart_module, EDBG_CDC_MODULE, &usart_conf);
    216a:	1c3c      	adds	r4, r7, #0
    216c:	3447      	adds	r4, #71	; 0x47
    216e:	4915      	ldr	r1, [pc, #84]	; (21c4 <configure_uart+0x148>)
    2170:	4a15      	ldr	r2, [pc, #84]	; (21c8 <configure_uart+0x14c>)
    2172:	1d3b      	adds	r3, r7, #4
    2174:	1c08      	adds	r0, r1, #0
    2176:	1c11      	adds	r1, r2, #0
    2178:	1c1a      	adds	r2, r3, #0
    217a:	4b14      	ldr	r3, [pc, #80]	; (21cc <configure_uart+0x150>)
    217c:	4798      	blx	r3
    217e:	1c03      	adds	r3, r0, #0
    2180:	7023      	strb	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2182:	4b10      	ldr	r3, [pc, #64]	; (21c4 <configure_uart+0x148>)
    2184:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2186:	1c20      	adds	r0, r4, #0
    2188:	4b11      	ldr	r3, [pc, #68]	; (21d0 <configure_uart+0x154>)
    218a:	4798      	blx	r3
    218c:	1c03      	adds	r3, r0, #0
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    218e:	b2da      	uxtb	r2, r3
    2190:	231f      	movs	r3, #31
    2192:	4013      	ands	r3, r2
    2194:	b2db      	uxtb	r3, r3
    2196:	2201      	movs	r2, #1
    2198:	1c11      	adds	r1, r2, #0
    219a:	4099      	lsls	r1, r3
    219c:	1c0b      	adds	r3, r1, #0
    219e:	1c1a      	adds	r2, r3, #0
    21a0:	4b0c      	ldr	r3, [pc, #48]	; (21d4 <configure_uart+0x158>)
    21a2:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    21a4:	4b07      	ldr	r3, [pc, #28]	; (21c4 <configure_uart+0x148>)
    21a6:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    21a8:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    21aa:	2b00      	cmp	r3, #0
    21ac:	d1fa      	bne.n	21a4 <configure_uart+0x128>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    21ae:	6823      	ldr	r3, [r4, #0]
    21b0:	2202      	movs	r2, #2
    21b2:	4313      	orrs	r3, r2
    21b4:	6023      	str	r3, [r4, #0]
	usart_enable(&cmd_uart_module);	
}
    21b6:	46bd      	mov	sp, r7
    21b8:	b013      	add	sp, #76	; 0x4c
    21ba:	bd90      	pop	{r4, r7, pc}
    21bc:	00180002 	.word	0x00180002
    21c0:	00190002 	.word	0x00190002
    21c4:	200002fc 	.word	0x200002fc
    21c8:	42000c00 	.word	0x42000c00
    21cc:	00000d91 	.word	0x00000d91
    21d0:	00001831 	.word	0x00001831
    21d4:	e000e100 	.word	0xe000e100

000021d8 <main>:
	//usart_read_job(	&cdc_uart_module,&receivedByte);			
}


__attribute__((optimize("O0"))) int main(void)
{
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	b08d      	sub	sp, #52	; 0x34
    21dc:	af00      	add	r7, sp, #0
	system_init();
    21de:	4b8e      	ldr	r3, [pc, #568]	; (2418 <main+0x240>)
    21e0:	4798      	blx	r3
	configure_uart();
    21e2:	4b8e      	ldr	r3, [pc, #568]	; (241c <main+0x244>)
    21e4:	4798      	blx	r3
	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    21e6:	2000      	movs	r0, #0
    21e8:	4b8d      	ldr	r3, [pc, #564]	; (2420 <main+0x248>)
    21ea:	4798      	blx	r3
    21ec:	1c03      	adds	r3, r0, #0
    21ee:	623b      	str	r3, [r7, #32]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    21f0:	6a3b      	ldr	r3, [r7, #32]
    21f2:	1e5a      	subs	r2, r3, #1
    21f4:	4b8b      	ldr	r3, [pc, #556]	; (2424 <main+0x24c>)
    21f6:	429a      	cmp	r2, r3
    21f8:	d826      	bhi.n	2248 <main+0x70>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    21fa:	4b8b      	ldr	r3, [pc, #556]	; (2428 <main+0x250>)
    21fc:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    21fe:	22ff      	movs	r2, #255	; 0xff
    2200:	230f      	movs	r3, #15
    2202:	4013      	ands	r3, r2
    2204:	b2db      	uxtb	r3, r3
    2206:	3b08      	subs	r3, #8
    2208:	089b      	lsrs	r3, r3, #2
    220a:	4888      	ldr	r0, [pc, #544]	; (242c <main+0x254>)
    220c:	1d99      	adds	r1, r3, #6
    220e:	0089      	lsls	r1, r1, #2
    2210:	1841      	adds	r1, r0, r1
    2212:	6849      	ldr	r1, [r1, #4]
    2214:	2003      	movs	r0, #3
    2216:	4002      	ands	r2, r0
    2218:	b2d2      	uxtb	r2, r2
    221a:	00d2      	lsls	r2, r2, #3
    221c:	20ff      	movs	r0, #255	; 0xff
    221e:	4090      	lsls	r0, r2
    2220:	43c0      	mvns	r0, r0
    2222:	4001      	ands	r1, r0
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2224:	26c0      	movs	r6, #192	; 0xc0
    2226:	20ff      	movs	r0, #255	; 0xff
    2228:	4030      	ands	r0, r6
    222a:	1c06      	adds	r6, r0, #0
    222c:	4096      	lsls	r6, r2
    222e:	1c32      	adds	r2, r6, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2230:	430a      	orrs	r2, r1
    2232:	497e      	ldr	r1, [pc, #504]	; (242c <main+0x254>)
    2234:	3306      	adds	r3, #6
    2236:	009b      	lsls	r3, r3, #2
    2238:	18cb      	adds	r3, r1, r3
    223a:	605a      	str	r2, [r3, #4]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    223c:	4b7a      	ldr	r3, [pc, #488]	; (2428 <main+0x250>)
    223e:	2200      	movs	r2, #0
    2240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2242:	4b79      	ldr	r3, [pc, #484]	; (2428 <main+0x250>)
    2244:	2207      	movs	r2, #7
    2246:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2248:	1d3b      	adds	r3, r7, #4
    224a:	2200      	movs	r2, #0
    224c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    224e:	1d3b      	adds	r3, r7, #4
    2250:	2201      	movs	r2, #1
    2252:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2254:	1d3b      	adds	r3, r7, #4
    2256:	2200      	movs	r2, #0
    2258:	709a      	strb	r2, [r3, #2]
#define GPIO_RS485_DATA_TRANSMIT true
static void config_gpio(void)
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    225a:	1d3b      	adds	r3, r7, #4
    225c:	2201      	movs	r2, #1
    225e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2260:	1d3b      	adds	r3, r7, #4
    2262:	2008      	movs	r0, #8
    2264:	1c19      	adds	r1, r3, #0
    2266:	4b72      	ldr	r3, [pc, #456]	; (2430 <main+0x258>)
    2268:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    226a:	4b72      	ldr	r3, [pc, #456]	; (2434 <main+0x25c>)
    226c:	2280      	movs	r2, #128	; 0x80
    226e:	0052      	lsls	r2, r2, #1
    2270:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	port_pin_set_config(GPIO_RS485_DATA_DIRECTION_RE, &pin_conf);
    2272:	1d3b      	adds	r3, r7, #4
    2274:	2002      	movs	r0, #2
    2276:	1c19      	adds	r1, r3, #0
    2278:	4b6d      	ldr	r3, [pc, #436]	; (2430 <main+0x258>)
    227a:	4798      	blx	r3
	port_pin_set_config(GPIO_RS485_DATA_DIRECTION_DE, &pin_conf);
    227c:	1d3b      	adds	r3, r7, #4
    227e:	2004      	movs	r0, #4
    2280:	1c19      	adds	r1, r3, #0
    2282:	4b6b      	ldr	r3, [pc, #428]	; (2430 <main+0x258>)
    2284:	4798      	blx	r3
    2286:	4b6b      	ldr	r3, [pc, #428]	; (2434 <main+0x25c>)
    2288:	2204      	movs	r2, #4
    228a:	615a      	str	r2, [r3, #20]
    228c:	4b69      	ldr	r3, [pc, #420]	; (2434 <main+0x25c>)
    228e:	2210      	movs	r2, #16
    2290:	615a      	str	r2, [r3, #20]
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2292:	1c3b      	adds	r3, r7, #0
    2294:	3308      	adds	r3, #8
    2296:	1c18      	adds	r0, r3, #0
    2298:	4b67      	ldr	r3, [pc, #412]	; (2438 <main+0x260>)
    229a:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    229c:	1c3b      	adds	r3, r7, #0
    229e:	3308      	adds	r3, #8
    22a0:	2205      	movs	r2, #5
    22a2:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    22a4:	1c3b      	adds	r3, r7, #0
    22a6:	3308      	adds	r3, #8
    22a8:	2200      	movs	r2, #0
    22aa:	605a      	str	r2, [r3, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    22ac:	1c3b      	adds	r3, r7, #0
    22ae:	3308      	adds	r3, #8
    22b0:	2202      	movs	r2, #2
    22b2:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    22b4:	1c3b      	adds	r3, r7, #0
    22b6:	3308      	adds	r3, #8
    22b8:	2201      	movs	r2, #1
    22ba:	729a      	strb	r2, [r3, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    22bc:	1c3b      	adds	r3, r7, #0
    22be:	3308      	adds	r3, #8
    22c0:	2005      	movs	r0, #5
    22c2:	1c19      	adds	r1, r3, #0
    22c4:	4b5d      	ldr	r3, [pc, #372]	; (243c <main+0x264>)
    22c6:	4798      	blx	r3
/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
static void configure_eic_callback(void)
{
	extint_register_callback(extint_callback,
    22c8:	4b5d      	ldr	r3, [pc, #372]	; (2440 <main+0x268>)
    22ca:	1c18      	adds	r0, r3, #0
    22cc:	2105      	movs	r1, #5
    22ce:	2200      	movs	r2, #0
    22d0:	4b5c      	ldr	r3, [pc, #368]	; (2444 <main+0x26c>)
    22d2:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    22d4:	2005      	movs	r0, #5
    22d6:	2100      	movs	r1, #0
    22d8:	4b5b      	ldr	r3, [pc, #364]	; (2448 <main+0x270>)
    22da:	4798      	blx	r3
	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
	config_gpio();
	configure_extint();
	configure_eic_callback();
	status_code_genare_t uart_status = STATUS_ERR_NOT_INITIALIZED;
    22dc:	1c3b      	adds	r3, r7, #0
    22de:	332f      	adds	r3, #47	; 0x2f
    22e0:	221f      	movs	r2, #31
    22e2:	701a      	strb	r2, [r3, #0]
	/*	Initialize I2C drivers	*/
	status_t status = drv_i2c_init(&twiConfig);
    22e4:	4b59      	ldr	r3, [pc, #356]	; (244c <main+0x274>)
    22e6:	1c18      	adds	r0, r3, #0
    22e8:	4b59      	ldr	r3, [pc, #356]	; (2450 <main+0x278>)
    22ea:	4798      	blx	r3
    22ec:	1c02      	adds	r2, r0, #0
    22ee:	1c3b      	adds	r3, r7, #0
    22f0:	332e      	adds	r3, #46	; 0x2e
    22f2:	701a      	strb	r2, [r3, #0]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    22f4:	4b57      	ldr	r3, [pc, #348]	; (2454 <main+0x27c>)
    22f6:	2201      	movs	r2, #1
    22f8:	701a      	strb	r2, [r3, #0]
    22fa:	f3bf 8f5f 	dmb	sy
    22fe:	b662      	cpsie	i
	.uartModule = &cmd_uart_module	
};
void readUniqueId()
{
	uint8_t* localSerialNumber = 0x0080A00C;
	memcpy(settings.serialNumber,localSerialNumber,16);
    2300:	4955      	ldr	r1, [pc, #340]	; (2458 <main+0x280>)
    2302:	2201      	movs	r2, #1
    2304:	4b55      	ldr	r3, [pc, #340]	; (245c <main+0x284>)
    2306:	1889      	adds	r1, r1, r2
    2308:	1c1a      	adds	r2, r3, #0
    230a:	2310      	movs	r3, #16
    230c:	1c08      	adds	r0, r1, #0
    230e:	1c11      	adds	r1, r2, #0
    2310:	1c1a      	adds	r2, r3, #0
    2312:	4b53      	ldr	r3, [pc, #332]	; (2460 <main+0x288>)
    2314:	4798      	blx	r3
	system_interrupt_enable_global();	
	

	//read the unique ID for the microcontroller
	readUniqueId(); 	
	int i = 0, size = 0;
    2316:	2300      	movs	r3, #0
    2318:	62bb      	str	r3, [r7, #40]	; 0x28
    231a:	2300      	movs	r3, #0
    231c:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint16_t buff = 0x00; 
    231e:	1c3b      	adds	r3, r7, #0
    2320:	3316      	adds	r3, #22
    2322:	2200      	movs	r2, #0
    2324:	801a      	strh	r2, [r3, #0]
	//uint8_t receivedByte = 0x00; 
	status = STATUS_FAIL;
    2326:	1c3b      	adds	r3, r7, #0
    2328:	332e      	adds	r3, #46	; 0x2e
    232a:	2201      	movs	r2, #1
    232c:	701a      	strb	r2, [r3, #0]
	//while(status == STATUS_FAIL)
	//{
		status = resetAndInitialize(&em7180Config);
    232e:	4b4d      	ldr	r3, [pc, #308]	; (2464 <main+0x28c>)
    2330:	1c18      	adds	r0, r3, #0
    2332:	4b4d      	ldr	r3, [pc, #308]	; (2468 <main+0x290>)
    2334:	4798      	blx	r3
    2336:	1c02      	adds	r2, r0, #0
    2338:	1c3b      	adds	r3, r7, #0
    233a:	332e      	adds	r3, #46	; 0x2e
    233c:	701a      	strb	r2, [r3, #0]
	//}
	pkt_packetParserInit(&packetParserConfig);	
    233e:	4b4b      	ldr	r3, [pc, #300]	; (246c <main+0x294>)
    2340:	1c18      	adds	r0, r3, #0
    2342:	4b4b      	ldr	r3, [pc, #300]	; (2470 <main+0x298>)
    2344:	4798      	blx	r3
	//usart_register_callback(&cmd_uart_module,receiveCallback,USART_CALLBACK_BUFFER_RECEIVED);
	//usart_enable_callback(&cmd_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
	//usart_read_job(&cmd_uart_module,&receivedByte);
	
	//turn on the LED
	delay_ms(500); 
    2346:	2000      	movs	r0, #0
    2348:	4b35      	ldr	r3, [pc, #212]	; (2420 <main+0x248>)
    234a:	4798      	blx	r3
    234c:	1c03      	adds	r3, r0, #0
    234e:	1c1c      	adds	r4, r3, #0
    2350:	2300      	movs	r3, #0
    2352:	1c1d      	adds	r5, r3, #0
    2354:	4e47      	ldr	r6, [pc, #284]	; (2474 <main+0x29c>)
    2356:	1c20      	adds	r0, r4, #0
    2358:	1c29      	adds	r1, r5, #0
    235a:	4b2a      	ldr	r3, [pc, #168]	; (2404 <main+0x22c>)
    235c:	4a28      	ldr	r2, [pc, #160]	; (2400 <main+0x228>)
    235e:	47b0      	blx	r6
    2360:	1c03      	adds	r3, r0, #0
    2362:	1c0c      	adds	r4, r1, #0
    2364:	1c19      	adds	r1, r3, #0
    2366:	1c22      	adds	r2, r4, #0
    2368:	4b27      	ldr	r3, [pc, #156]	; (2408 <main+0x230>)
    236a:	4c28      	ldr	r4, [pc, #160]	; (240c <main+0x234>)
    236c:	185b      	adds	r3, r3, r1
    236e:	4154      	adcs	r4, r2
    2370:	4d41      	ldr	r5, [pc, #260]	; (2478 <main+0x2a0>)
    2372:	1c18      	adds	r0, r3, #0
    2374:	1c21      	adds	r1, r4, #0
    2376:	4a26      	ldr	r2, [pc, #152]	; (2410 <main+0x238>)
    2378:	4b26      	ldr	r3, [pc, #152]	; (2414 <main+0x23c>)
    237a:	47a8      	blx	r5
    237c:	1c03      	adds	r3, r0, #0
    237e:	1c0c      	adds	r4, r1, #0
    2380:	1c18      	adds	r0, r3, #0
    2382:	4b3e      	ldr	r3, [pc, #248]	; (247c <main+0x2a4>)
    2384:	4798      	blx	r3
	sendButtonPressEvent();
    2386:	4b3e      	ldr	r3, [pc, #248]	; (2480 <main+0x2a8>)
    2388:	4798      	blx	r3
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    238a:	1c3b      	adds	r3, r7, #0
    238c:	331f      	adds	r3, #31
    238e:	2200      	movs	r2, #0
    2390:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2392:	1c3b      	adds	r3, r7, #0
    2394:	331e      	adds	r3, #30
    2396:	2200      	movs	r2, #0
    2398:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    239a:	1c3b      	adds	r3, r7, #0
    239c:	331f      	adds	r3, #31
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d106      	bne.n	23b2 <main+0x1da>
		return &(ports[port_index]->Group[group_index]);
    23a4:	1c3b      	adds	r3, r7, #0
    23a6:	331e      	adds	r3, #30
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	01db      	lsls	r3, r3, #7
    23ac:	4821      	ldr	r0, [pc, #132]	; (2434 <main+0x25c>)
    23ae:	181b      	adds	r3, r3, r0
    23b0:	e000      	b.n	23b4 <main+0x1dc>
	} else {
		Assert(false);
		return NULL;
    23b2:	2300      	movs	r3, #0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23b4:	2208      	movs	r2, #8
    23b6:	2101      	movs	r1, #1
    23b8:	1c0e      	adds	r6, r1, #0
    23ba:	4096      	lsls	r6, r2
    23bc:	1c32      	adds	r2, r6, #0
    23be:	61ba      	str	r2, [r7, #24]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    23c0:	69ba      	ldr	r2, [r7, #24]
    23c2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN,LED_0_ACTIVE);
	while (true) 
	{
		uart_status = usart_read_wait(&cmd_uart_module, &buff);
    23c4:	1c3c      	adds	r4, r7, #0
    23c6:	342f      	adds	r4, #47	; 0x2f
    23c8:	4a2e      	ldr	r2, [pc, #184]	; (2484 <main+0x2ac>)
    23ca:	1c3b      	adds	r3, r7, #0
    23cc:	3316      	adds	r3, #22
    23ce:	1c10      	adds	r0, r2, #0
    23d0:	1c19      	adds	r1, r3, #0
    23d2:	4b2d      	ldr	r3, [pc, #180]	; (2488 <main+0x2b0>)
    23d4:	4798      	blx	r3
    23d6:	1c03      	adds	r3, r0, #0
    23d8:	7023      	strb	r3, [r4, #0]
		//
		//delay_ms(100);
		//buff = (uint16_t)receivedByte;
		if(uart_status == STATUS_OK && buff != -1)
    23da:	1c3b      	adds	r3, r7, #0
    23dc:	332f      	adds	r3, #47	; 0x2f
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d10b      	bne.n	23fc <main+0x224>
    23e4:	1c3b      	adds	r3, r7, #0
    23e6:	3316      	adds	r3, #22
    23e8:	881b      	ldrh	r3, [r3, #0]
		{
			pkt_ProcessIncomingByte((uint8_t)buff);
    23ea:	1c3b      	adds	r3, r7, #0
    23ec:	3316      	adds	r3, #22
    23ee:	881b      	ldrh	r3, [r3, #0]
    23f0:	b29b      	uxth	r3, r3
    23f2:	b2db      	uxtb	r3, r3
    23f4:	1c18      	adds	r0, r3, #0
    23f6:	4b25      	ldr	r3, [pc, #148]	; (248c <main+0x2b4>)
    23f8:	4798      	blx	r3
		}
	}
    23fa:	e7e3      	b.n	23c4 <main+0x1ec>
    23fc:	e7e2      	b.n	23c4 <main+0x1ec>
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	000001f4 	.word	0x000001f4
    2404:	00000000 	.word	0x00000000
    2408:	00001b57 	.word	0x00001b57
    240c:	00000000 	.word	0x00000000
    2410:	00001b58 	.word	0x00001b58
    2414:	00000000 	.word	0x00000000
    2418:	00001f49 	.word	0x00001f49
    241c:	0000207d 	.word	0x0000207d
    2420:	00001cd5 	.word	0x00001cd5
    2424:	00ffffff 	.word	0x00ffffff
    2428:	e000e010 	.word	0xe000e010
    242c:	e000ed00 	.word	0xe000ed00
    2430:	00001915 	.word	0x00001915
    2434:	41004400 	.word	0x41004400
    2438:	00000165 	.word	0x00000165
    243c:	00000179 	.word	0x00000179
    2440:	00002055 	.word	0x00002055
    2444:	0000187d 	.word	0x0000187d
    2448:	000018a9 	.word	0x000018a9
    244c:	20000050 	.word	0x20000050
    2450:	00000a71 	.word	0x00000a71
    2454:	20000030 	.word	0x20000030
    2458:	20000298 	.word	0x20000298
    245c:	0080a00c 	.word	0x0080a00c
    2460:	00002ec3 	.word	0x00002ec3
    2464:	20000044 	.word	0x20000044
    2468:	000007c9 	.word	0x000007c9
    246c:	20000034 	.word	0x20000034
    2470:	00000d85 	.word	0x00000d85
    2474:	00002631 	.word	0x00002631
    2478:	000025f1 	.word	0x000025f1
    247c:	20000001 	.word	0x20000001
    2480:	000008a1 	.word	0x000008a1
    2484:	200002fc 	.word	0x200002fc
    2488:	000010ad 	.word	0x000010ad
    248c:	00000c39 	.word	0x00000c39

00002490 <__aeabi_uidiv>:
    2490:	2900      	cmp	r1, #0
    2492:	d034      	beq.n	24fe <.udivsi3_skip_div0_test+0x6a>

00002494 <.udivsi3_skip_div0_test>:
    2494:	2301      	movs	r3, #1
    2496:	2200      	movs	r2, #0
    2498:	b410      	push	{r4}
    249a:	4288      	cmp	r0, r1
    249c:	d32c      	bcc.n	24f8 <.udivsi3_skip_div0_test+0x64>
    249e:	2401      	movs	r4, #1
    24a0:	0724      	lsls	r4, r4, #28
    24a2:	42a1      	cmp	r1, r4
    24a4:	d204      	bcs.n	24b0 <.udivsi3_skip_div0_test+0x1c>
    24a6:	4281      	cmp	r1, r0
    24a8:	d202      	bcs.n	24b0 <.udivsi3_skip_div0_test+0x1c>
    24aa:	0109      	lsls	r1, r1, #4
    24ac:	011b      	lsls	r3, r3, #4
    24ae:	e7f8      	b.n	24a2 <.udivsi3_skip_div0_test+0xe>
    24b0:	00e4      	lsls	r4, r4, #3
    24b2:	42a1      	cmp	r1, r4
    24b4:	d204      	bcs.n	24c0 <.udivsi3_skip_div0_test+0x2c>
    24b6:	4281      	cmp	r1, r0
    24b8:	d202      	bcs.n	24c0 <.udivsi3_skip_div0_test+0x2c>
    24ba:	0049      	lsls	r1, r1, #1
    24bc:	005b      	lsls	r3, r3, #1
    24be:	e7f8      	b.n	24b2 <.udivsi3_skip_div0_test+0x1e>
    24c0:	4288      	cmp	r0, r1
    24c2:	d301      	bcc.n	24c8 <.udivsi3_skip_div0_test+0x34>
    24c4:	1a40      	subs	r0, r0, r1
    24c6:	431a      	orrs	r2, r3
    24c8:	084c      	lsrs	r4, r1, #1
    24ca:	42a0      	cmp	r0, r4
    24cc:	d302      	bcc.n	24d4 <.udivsi3_skip_div0_test+0x40>
    24ce:	1b00      	subs	r0, r0, r4
    24d0:	085c      	lsrs	r4, r3, #1
    24d2:	4322      	orrs	r2, r4
    24d4:	088c      	lsrs	r4, r1, #2
    24d6:	42a0      	cmp	r0, r4
    24d8:	d302      	bcc.n	24e0 <.udivsi3_skip_div0_test+0x4c>
    24da:	1b00      	subs	r0, r0, r4
    24dc:	089c      	lsrs	r4, r3, #2
    24de:	4322      	orrs	r2, r4
    24e0:	08cc      	lsrs	r4, r1, #3
    24e2:	42a0      	cmp	r0, r4
    24e4:	d302      	bcc.n	24ec <.udivsi3_skip_div0_test+0x58>
    24e6:	1b00      	subs	r0, r0, r4
    24e8:	08dc      	lsrs	r4, r3, #3
    24ea:	4322      	orrs	r2, r4
    24ec:	2800      	cmp	r0, #0
    24ee:	d003      	beq.n	24f8 <.udivsi3_skip_div0_test+0x64>
    24f0:	091b      	lsrs	r3, r3, #4
    24f2:	d001      	beq.n	24f8 <.udivsi3_skip_div0_test+0x64>
    24f4:	0909      	lsrs	r1, r1, #4
    24f6:	e7e3      	b.n	24c0 <.udivsi3_skip_div0_test+0x2c>
    24f8:	1c10      	adds	r0, r2, #0
    24fa:	bc10      	pop	{r4}
    24fc:	4770      	bx	lr
    24fe:	2800      	cmp	r0, #0
    2500:	d001      	beq.n	2506 <.udivsi3_skip_div0_test+0x72>
    2502:	2000      	movs	r0, #0
    2504:	43c0      	mvns	r0, r0
    2506:	b407      	push	{r0, r1, r2}
    2508:	4802      	ldr	r0, [pc, #8]	; (2514 <.udivsi3_skip_div0_test+0x80>)
    250a:	a102      	add	r1, pc, #8	; (adr r1, 2514 <.udivsi3_skip_div0_test+0x80>)
    250c:	1840      	adds	r0, r0, r1
    250e:	9002      	str	r0, [sp, #8]
    2510:	bd03      	pop	{r0, r1, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	000000d9 	.word	0x000000d9

00002518 <__aeabi_uidivmod>:
    2518:	2900      	cmp	r1, #0
    251a:	d0f0      	beq.n	24fe <.udivsi3_skip_div0_test+0x6a>
    251c:	b503      	push	{r0, r1, lr}
    251e:	f7ff ffb9 	bl	2494 <.udivsi3_skip_div0_test>
    2522:	bc0e      	pop	{r1, r2, r3}
    2524:	4342      	muls	r2, r0
    2526:	1a89      	subs	r1, r1, r2
    2528:	4718      	bx	r3
    252a:	46c0      	nop			; (mov r8, r8)

0000252c <__aeabi_idiv>:
    252c:	2900      	cmp	r1, #0
    252e:	d041      	beq.n	25b4 <.divsi3_skip_div0_test+0x84>

00002530 <.divsi3_skip_div0_test>:
    2530:	b410      	push	{r4}
    2532:	1c04      	adds	r4, r0, #0
    2534:	404c      	eors	r4, r1
    2536:	46a4      	mov	ip, r4
    2538:	2301      	movs	r3, #1
    253a:	2200      	movs	r2, #0
    253c:	2900      	cmp	r1, #0
    253e:	d500      	bpl.n	2542 <.divsi3_skip_div0_test+0x12>
    2540:	4249      	negs	r1, r1
    2542:	2800      	cmp	r0, #0
    2544:	d500      	bpl.n	2548 <.divsi3_skip_div0_test+0x18>
    2546:	4240      	negs	r0, r0
    2548:	4288      	cmp	r0, r1
    254a:	d32c      	bcc.n	25a6 <.divsi3_skip_div0_test+0x76>
    254c:	2401      	movs	r4, #1
    254e:	0724      	lsls	r4, r4, #28
    2550:	42a1      	cmp	r1, r4
    2552:	d204      	bcs.n	255e <.divsi3_skip_div0_test+0x2e>
    2554:	4281      	cmp	r1, r0
    2556:	d202      	bcs.n	255e <.divsi3_skip_div0_test+0x2e>
    2558:	0109      	lsls	r1, r1, #4
    255a:	011b      	lsls	r3, r3, #4
    255c:	e7f8      	b.n	2550 <.divsi3_skip_div0_test+0x20>
    255e:	00e4      	lsls	r4, r4, #3
    2560:	42a1      	cmp	r1, r4
    2562:	d204      	bcs.n	256e <.divsi3_skip_div0_test+0x3e>
    2564:	4281      	cmp	r1, r0
    2566:	d202      	bcs.n	256e <.divsi3_skip_div0_test+0x3e>
    2568:	0049      	lsls	r1, r1, #1
    256a:	005b      	lsls	r3, r3, #1
    256c:	e7f8      	b.n	2560 <.divsi3_skip_div0_test+0x30>
    256e:	4288      	cmp	r0, r1
    2570:	d301      	bcc.n	2576 <.divsi3_skip_div0_test+0x46>
    2572:	1a40      	subs	r0, r0, r1
    2574:	431a      	orrs	r2, r3
    2576:	084c      	lsrs	r4, r1, #1
    2578:	42a0      	cmp	r0, r4
    257a:	d302      	bcc.n	2582 <.divsi3_skip_div0_test+0x52>
    257c:	1b00      	subs	r0, r0, r4
    257e:	085c      	lsrs	r4, r3, #1
    2580:	4322      	orrs	r2, r4
    2582:	088c      	lsrs	r4, r1, #2
    2584:	42a0      	cmp	r0, r4
    2586:	d302      	bcc.n	258e <.divsi3_skip_div0_test+0x5e>
    2588:	1b00      	subs	r0, r0, r4
    258a:	089c      	lsrs	r4, r3, #2
    258c:	4322      	orrs	r2, r4
    258e:	08cc      	lsrs	r4, r1, #3
    2590:	42a0      	cmp	r0, r4
    2592:	d302      	bcc.n	259a <.divsi3_skip_div0_test+0x6a>
    2594:	1b00      	subs	r0, r0, r4
    2596:	08dc      	lsrs	r4, r3, #3
    2598:	4322      	orrs	r2, r4
    259a:	2800      	cmp	r0, #0
    259c:	d003      	beq.n	25a6 <.divsi3_skip_div0_test+0x76>
    259e:	091b      	lsrs	r3, r3, #4
    25a0:	d001      	beq.n	25a6 <.divsi3_skip_div0_test+0x76>
    25a2:	0909      	lsrs	r1, r1, #4
    25a4:	e7e3      	b.n	256e <.divsi3_skip_div0_test+0x3e>
    25a6:	1c10      	adds	r0, r2, #0
    25a8:	4664      	mov	r4, ip
    25aa:	2c00      	cmp	r4, #0
    25ac:	d500      	bpl.n	25b0 <.divsi3_skip_div0_test+0x80>
    25ae:	4240      	negs	r0, r0
    25b0:	bc10      	pop	{r4}
    25b2:	4770      	bx	lr
    25b4:	2800      	cmp	r0, #0
    25b6:	d006      	beq.n	25c6 <.divsi3_skip_div0_test+0x96>
    25b8:	db03      	blt.n	25c2 <.divsi3_skip_div0_test+0x92>
    25ba:	2000      	movs	r0, #0
    25bc:	43c0      	mvns	r0, r0
    25be:	0840      	lsrs	r0, r0, #1
    25c0:	e001      	b.n	25c6 <.divsi3_skip_div0_test+0x96>
    25c2:	2080      	movs	r0, #128	; 0x80
    25c4:	0600      	lsls	r0, r0, #24
    25c6:	b407      	push	{r0, r1, r2}
    25c8:	4802      	ldr	r0, [pc, #8]	; (25d4 <.divsi3_skip_div0_test+0xa4>)
    25ca:	a102      	add	r1, pc, #8	; (adr r1, 25d4 <.divsi3_skip_div0_test+0xa4>)
    25cc:	1840      	adds	r0, r0, r1
    25ce:	9002      	str	r0, [sp, #8]
    25d0:	bd03      	pop	{r0, r1, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	00000019 	.word	0x00000019

000025d8 <__aeabi_idivmod>:
    25d8:	2900      	cmp	r1, #0
    25da:	d0eb      	beq.n	25b4 <.divsi3_skip_div0_test+0x84>
    25dc:	b503      	push	{r0, r1, lr}
    25de:	f7ff ffa7 	bl	2530 <.divsi3_skip_div0_test>
    25e2:	bc0e      	pop	{r1, r2, r3}
    25e4:	4342      	muls	r2, r0
    25e6:	1a89      	subs	r1, r1, r2
    25e8:	4718      	bx	r3
    25ea:	46c0      	nop			; (mov r8, r8)

000025ec <__aeabi_idiv0>:
    25ec:	4770      	bx	lr
    25ee:	46c0      	nop			; (mov r8, r8)

000025f0 <__aeabi_uldivmod>:
    25f0:	2b00      	cmp	r3, #0
    25f2:	d111      	bne.n	2618 <__aeabi_uldivmod+0x28>
    25f4:	2a00      	cmp	r2, #0
    25f6:	d10f      	bne.n	2618 <__aeabi_uldivmod+0x28>
    25f8:	2900      	cmp	r1, #0
    25fa:	d100      	bne.n	25fe <__aeabi_uldivmod+0xe>
    25fc:	2800      	cmp	r0, #0
    25fe:	d002      	beq.n	2606 <__aeabi_uldivmod+0x16>
    2600:	2100      	movs	r1, #0
    2602:	43c9      	mvns	r1, r1
    2604:	1c08      	adds	r0, r1, #0
    2606:	b407      	push	{r0, r1, r2}
    2608:	4802      	ldr	r0, [pc, #8]	; (2614 <__aeabi_uldivmod+0x24>)
    260a:	a102      	add	r1, pc, #8	; (adr r1, 2614 <__aeabi_uldivmod+0x24>)
    260c:	1840      	adds	r0, r0, r1
    260e:	9002      	str	r0, [sp, #8]
    2610:	bd03      	pop	{r0, r1, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	ffffffd9 	.word	0xffffffd9
    2618:	b403      	push	{r0, r1}
    261a:	4668      	mov	r0, sp
    261c:	b501      	push	{r0, lr}
    261e:	9802      	ldr	r0, [sp, #8]
    2620:	f000 f844 	bl	26ac <__gnu_uldivmod_helper>
    2624:	9b01      	ldr	r3, [sp, #4]
    2626:	469e      	mov	lr, r3
    2628:	b002      	add	sp, #8
    262a:	bc0c      	pop	{r2, r3}
    262c:	4770      	bx	lr
    262e:	46c0      	nop			; (mov r8, r8)

00002630 <__aeabi_lmul>:
    2630:	469c      	mov	ip, r3
    2632:	0403      	lsls	r3, r0, #16
    2634:	b5f0      	push	{r4, r5, r6, r7, lr}
    2636:	0c1b      	lsrs	r3, r3, #16
    2638:	0417      	lsls	r7, r2, #16
    263a:	0c3f      	lsrs	r7, r7, #16
    263c:	0c15      	lsrs	r5, r2, #16
    263e:	1c1e      	adds	r6, r3, #0
    2640:	1c04      	adds	r4, r0, #0
    2642:	0c00      	lsrs	r0, r0, #16
    2644:	437e      	muls	r6, r7
    2646:	436b      	muls	r3, r5
    2648:	4347      	muls	r7, r0
    264a:	4345      	muls	r5, r0
    264c:	18fb      	adds	r3, r7, r3
    264e:	0c30      	lsrs	r0, r6, #16
    2650:	1818      	adds	r0, r3, r0
    2652:	4287      	cmp	r7, r0
    2654:	d902      	bls.n	265c <__aeabi_lmul+0x2c>
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	025b      	lsls	r3, r3, #9
    265a:	18ed      	adds	r5, r5, r3
    265c:	0c03      	lsrs	r3, r0, #16
    265e:	18ed      	adds	r5, r5, r3
    2660:	4663      	mov	r3, ip
    2662:	435c      	muls	r4, r3
    2664:	434a      	muls	r2, r1
    2666:	0436      	lsls	r6, r6, #16
    2668:	0c36      	lsrs	r6, r6, #16
    266a:	18a1      	adds	r1, r4, r2
    266c:	0400      	lsls	r0, r0, #16
    266e:	1980      	adds	r0, r0, r6
    2670:	1949      	adds	r1, r1, r5
    2672:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002674 <__gnu_ldivmod_helper>:
    2674:	b5f0      	push	{r4, r5, r6, r7, lr}
    2676:	b083      	sub	sp, #12
    2678:	1c16      	adds	r6, r2, #0
    267a:	1c1f      	adds	r7, r3, #0
    267c:	9000      	str	r0, [sp, #0]
    267e:	9101      	str	r1, [sp, #4]
    2680:	f000 f82e 	bl	26e0 <__divdi3>
    2684:	1c04      	adds	r4, r0, #0
    2686:	1c0d      	adds	r5, r1, #0
    2688:	1c22      	adds	r2, r4, #0
    268a:	1c2b      	adds	r3, r5, #0
    268c:	1c30      	adds	r0, r6, #0
    268e:	1c39      	adds	r1, r7, #0
    2690:	f7ff ffce 	bl	2630 <__aeabi_lmul>
    2694:	9a00      	ldr	r2, [sp, #0]
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	1a12      	subs	r2, r2, r0
    269a:	418b      	sbcs	r3, r1
    269c:	9908      	ldr	r1, [sp, #32]
    269e:	1c20      	adds	r0, r4, #0
    26a0:	600a      	str	r2, [r1, #0]
    26a2:	604b      	str	r3, [r1, #4]
    26a4:	1c29      	adds	r1, r5, #0
    26a6:	b003      	add	sp, #12
    26a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26aa:	46c0      	nop			; (mov r8, r8)

000026ac <__gnu_uldivmod_helper>:
    26ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ae:	b083      	sub	sp, #12
    26b0:	1c14      	adds	r4, r2, #0
    26b2:	1c1d      	adds	r5, r3, #0
    26b4:	9000      	str	r0, [sp, #0]
    26b6:	9101      	str	r1, [sp, #4]
    26b8:	f000 f9ee 	bl	2a98 <__udivdi3>
    26bc:	1c22      	adds	r2, r4, #0
    26be:	1c2b      	adds	r3, r5, #0
    26c0:	1c06      	adds	r6, r0, #0
    26c2:	1c0f      	adds	r7, r1, #0
    26c4:	f7ff ffb4 	bl	2630 <__aeabi_lmul>
    26c8:	9a00      	ldr	r2, [sp, #0]
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	1a12      	subs	r2, r2, r0
    26ce:	418b      	sbcs	r3, r1
    26d0:	9908      	ldr	r1, [sp, #32]
    26d2:	1c30      	adds	r0, r6, #0
    26d4:	600a      	str	r2, [r1, #0]
    26d6:	604b      	str	r3, [r1, #4]
    26d8:	1c39      	adds	r1, r7, #0
    26da:	b003      	add	sp, #12
    26dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)

000026e0 <__divdi3>:
    26e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e2:	4644      	mov	r4, r8
    26e4:	465f      	mov	r7, fp
    26e6:	4656      	mov	r6, sl
    26e8:	464d      	mov	r5, r9
    26ea:	b4f0      	push	{r4, r5, r6, r7}
    26ec:	1c1c      	adds	r4, r3, #0
    26ee:	b085      	sub	sp, #20
    26f0:	2900      	cmp	r1, #0
    26f2:	da00      	bge.n	26f6 <__divdi3+0x16>
    26f4:	e0db      	b.n	28ae <__divdi3+0x1ce>
    26f6:	1c0f      	adds	r7, r1, #0
    26f8:	2100      	movs	r1, #0
    26fa:	1c06      	adds	r6, r0, #0
    26fc:	468a      	mov	sl, r1
    26fe:	1c10      	adds	r0, r2, #0
    2700:	1c19      	adds	r1, r3, #0
    2702:	2c00      	cmp	r4, #0
    2704:	da00      	bge.n	2708 <__divdi3+0x28>
    2706:	e0c9      	b.n	289c <__divdi3+0x1bc>
    2708:	9601      	str	r6, [sp, #4]
    270a:	9000      	str	r0, [sp, #0]
    270c:	4689      	mov	r9, r1
    270e:	4680      	mov	r8, r0
    2710:	2900      	cmp	r1, #0
    2712:	d151      	bne.n	27b8 <__divdi3+0xd8>
    2714:	42b8      	cmp	r0, r7
    2716:	d800      	bhi.n	271a <__divdi3+0x3a>
    2718:	e071      	b.n	27fe <__divdi3+0x11e>
    271a:	f000 fb7f 	bl	2e1c <__clzsi2>
    271e:	2800      	cmp	r0, #0
    2720:	d009      	beq.n	2736 <__divdi3+0x56>
    2722:	2320      	movs	r3, #32
    2724:	4645      	mov	r5, r8
    2726:	1c31      	adds	r1, r6, #0
    2728:	1a1b      	subs	r3, r3, r0
    272a:	4085      	lsls	r5, r0
    272c:	4087      	lsls	r7, r0
    272e:	40d9      	lsrs	r1, r3
    2730:	46a8      	mov	r8, r5
    2732:	430f      	orrs	r7, r1
    2734:	4086      	lsls	r6, r0
    2736:	4642      	mov	r2, r8
    2738:	0c15      	lsrs	r5, r2, #16
    273a:	0413      	lsls	r3, r2, #16
    273c:	0c1b      	lsrs	r3, r3, #16
    273e:	1c29      	adds	r1, r5, #0
    2740:	1c38      	adds	r0, r7, #0
    2742:	469b      	mov	fp, r3
    2744:	f7ff fea4 	bl	2490 <__aeabi_uidiv>
    2748:	465b      	mov	r3, fp
    274a:	4343      	muls	r3, r0
    274c:	1c04      	adds	r4, r0, #0
    274e:	1c29      	adds	r1, r5, #0
    2750:	1c38      	adds	r0, r7, #0
    2752:	4699      	mov	r9, r3
    2754:	f7ff fee0 	bl	2518 <__aeabi_uidivmod>
    2758:	0c33      	lsrs	r3, r6, #16
    275a:	0408      	lsls	r0, r1, #16
    275c:	4318      	orrs	r0, r3
    275e:	4581      	cmp	r9, r0
    2760:	d909      	bls.n	2776 <__divdi3+0x96>
    2762:	4440      	add	r0, r8
    2764:	1e63      	subs	r3, r4, #1
    2766:	4580      	cmp	r8, r0
    2768:	d900      	bls.n	276c <__divdi3+0x8c>
    276a:	e178      	b.n	2a5e <__divdi3+0x37e>
    276c:	4581      	cmp	r9, r0
    276e:	d800      	bhi.n	2772 <__divdi3+0x92>
    2770:	e175      	b.n	2a5e <__divdi3+0x37e>
    2772:	3c02      	subs	r4, #2
    2774:	4440      	add	r0, r8
    2776:	4649      	mov	r1, r9
    2778:	1a41      	subs	r1, r0, r1
    277a:	4689      	mov	r9, r1
    277c:	1c08      	adds	r0, r1, #0
    277e:	1c29      	adds	r1, r5, #0
    2780:	f7ff fe86 	bl	2490 <__aeabi_uidiv>
    2784:	465a      	mov	r2, fp
    2786:	4342      	muls	r2, r0
    2788:	1c07      	adds	r7, r0, #0
    278a:	1c29      	adds	r1, r5, #0
    278c:	4648      	mov	r0, r9
    278e:	4693      	mov	fp, r2
    2790:	f7ff fec2 	bl	2518 <__aeabi_uidivmod>
    2794:	0436      	lsls	r6, r6, #16
    2796:	0409      	lsls	r1, r1, #16
    2798:	0c36      	lsrs	r6, r6, #16
    279a:	430e      	orrs	r6, r1
    279c:	45b3      	cmp	fp, r6
    279e:	d907      	bls.n	27b0 <__divdi3+0xd0>
    27a0:	4446      	add	r6, r8
    27a2:	1e7b      	subs	r3, r7, #1
    27a4:	45b0      	cmp	r8, r6
    27a6:	d802      	bhi.n	27ae <__divdi3+0xce>
    27a8:	3f02      	subs	r7, #2
    27aa:	45b3      	cmp	fp, r6
    27ac:	d800      	bhi.n	27b0 <__divdi3+0xd0>
    27ae:	1c1f      	adds	r7, r3, #0
    27b0:	0424      	lsls	r4, r4, #16
    27b2:	4327      	orrs	r7, r4
    27b4:	2400      	movs	r4, #0
    27b6:	e003      	b.n	27c0 <__divdi3+0xe0>
    27b8:	42b9      	cmp	r1, r7
    27ba:	d911      	bls.n	27e0 <__divdi3+0x100>
    27bc:	2400      	movs	r4, #0
    27be:	2700      	movs	r7, #0
    27c0:	4652      	mov	r2, sl
    27c2:	1c38      	adds	r0, r7, #0
    27c4:	1c21      	adds	r1, r4, #0
    27c6:	2a00      	cmp	r2, #0
    27c8:	d003      	beq.n	27d2 <__divdi3+0xf2>
    27ca:	1c3b      	adds	r3, r7, #0
    27cc:	2100      	movs	r1, #0
    27ce:	4258      	negs	r0, r3
    27d0:	41a1      	sbcs	r1, r4
    27d2:	b005      	add	sp, #20
    27d4:	bc3c      	pop	{r2, r3, r4, r5}
    27d6:	4690      	mov	r8, r2
    27d8:	4699      	mov	r9, r3
    27da:	46a2      	mov	sl, r4
    27dc:	46ab      	mov	fp, r5
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	1c08      	adds	r0, r1, #0
    27e2:	f000 fb1b 	bl	2e1c <__clzsi2>
    27e6:	1e04      	subs	r4, r0, #0
    27e8:	d000      	beq.n	27ec <__divdi3+0x10c>
    27ea:	e0bf      	b.n	296c <__divdi3+0x28c>
    27ec:	45b9      	cmp	r9, r7
    27ee:	d200      	bcs.n	27f2 <__divdi3+0x112>
    27f0:	e142      	b.n	2a78 <__divdi3+0x398>
    27f2:	9d01      	ldr	r5, [sp, #4]
    27f4:	9900      	ldr	r1, [sp, #0]
    27f6:	1c07      	adds	r7, r0, #0
    27f8:	428d      	cmp	r5, r1
    27fa:	4147      	adcs	r7, r0
    27fc:	e7e0      	b.n	27c0 <__divdi3+0xe0>
    27fe:	2800      	cmp	r0, #0
    2800:	d104      	bne.n	280c <__divdi3+0x12c>
    2802:	2001      	movs	r0, #1
    2804:	2100      	movs	r1, #0
    2806:	f7ff fe43 	bl	2490 <__aeabi_uidiv>
    280a:	4680      	mov	r8, r0
    280c:	4640      	mov	r0, r8
    280e:	f000 fb05 	bl	2e1c <__clzsi2>
    2812:	2800      	cmp	r0, #0
    2814:	d152      	bne.n	28bc <__divdi3+0x1dc>
    2816:	4641      	mov	r1, r8
    2818:	4644      	mov	r4, r8
    281a:	040b      	lsls	r3, r1, #16
    281c:	1b3c      	subs	r4, r7, r4
    281e:	0c1b      	lsrs	r3, r3, #16
    2820:	46a3      	mov	fp, r4
    2822:	0c0d      	lsrs	r5, r1, #16
    2824:	9300      	str	r3, [sp, #0]
    2826:	2401      	movs	r4, #1
    2828:	1c29      	adds	r1, r5, #0
    282a:	4658      	mov	r0, fp
    282c:	f7ff fe30 	bl	2490 <__aeabi_uidiv>
    2830:	9f00      	ldr	r7, [sp, #0]
    2832:	4681      	mov	r9, r0
    2834:	4347      	muls	r7, r0
    2836:	1c29      	adds	r1, r5, #0
    2838:	4658      	mov	r0, fp
    283a:	f7ff fe6d 	bl	2518 <__aeabi_uidivmod>
    283e:	0c33      	lsrs	r3, r6, #16
    2840:	0409      	lsls	r1, r1, #16
    2842:	4319      	orrs	r1, r3
    2844:	428f      	cmp	r7, r1
    2846:	d908      	bls.n	285a <__divdi3+0x17a>
    2848:	464b      	mov	r3, r9
    284a:	4441      	add	r1, r8
    284c:	3b01      	subs	r3, #1
    284e:	4588      	cmp	r8, r1
    2850:	d802      	bhi.n	2858 <__divdi3+0x178>
    2852:	428f      	cmp	r7, r1
    2854:	d900      	bls.n	2858 <__divdi3+0x178>
    2856:	e11a      	b.n	2a8e <__divdi3+0x3ae>
    2858:	4699      	mov	r9, r3
    285a:	1bc9      	subs	r1, r1, r7
    285c:	468b      	mov	fp, r1
    285e:	1c08      	adds	r0, r1, #0
    2860:	1c29      	adds	r1, r5, #0
    2862:	f7ff fe15 	bl	2490 <__aeabi_uidiv>
    2866:	9b00      	ldr	r3, [sp, #0]
    2868:	1c29      	adds	r1, r5, #0
    286a:	4343      	muls	r3, r0
    286c:	1c07      	adds	r7, r0, #0
    286e:	4658      	mov	r0, fp
    2870:	9300      	str	r3, [sp, #0]
    2872:	f7ff fe51 	bl	2518 <__aeabi_uidivmod>
    2876:	0436      	lsls	r6, r6, #16
    2878:	9d00      	ldr	r5, [sp, #0]
    287a:	0409      	lsls	r1, r1, #16
    287c:	0c36      	lsrs	r6, r6, #16
    287e:	430e      	orrs	r6, r1
    2880:	42b5      	cmp	r5, r6
    2882:	d907      	bls.n	2894 <__divdi3+0x1b4>
    2884:	4446      	add	r6, r8
    2886:	1e7b      	subs	r3, r7, #1
    2888:	45b0      	cmp	r8, r6
    288a:	d802      	bhi.n	2892 <__divdi3+0x1b2>
    288c:	3f02      	subs	r7, #2
    288e:	42b5      	cmp	r5, r6
    2890:	d800      	bhi.n	2894 <__divdi3+0x1b4>
    2892:	1c1f      	adds	r7, r3, #0
    2894:	4649      	mov	r1, r9
    2896:	040e      	lsls	r6, r1, #16
    2898:	4337      	orrs	r7, r6
    289a:	e791      	b.n	27c0 <__divdi3+0xe0>
    289c:	4652      	mov	r2, sl
    289e:	43d2      	mvns	r2, r2
    28a0:	1c03      	adds	r3, r0, #0
    28a2:	1c0c      	adds	r4, r1, #0
    28a4:	4692      	mov	sl, r2
    28a6:	2100      	movs	r1, #0
    28a8:	4258      	negs	r0, r3
    28aa:	41a1      	sbcs	r1, r4
    28ac:	e72c      	b.n	2708 <__divdi3+0x28>
    28ae:	2700      	movs	r7, #0
    28b0:	4246      	negs	r6, r0
    28b2:	418f      	sbcs	r7, r1
    28b4:	2101      	movs	r1, #1
    28b6:	4249      	negs	r1, r1
    28b8:	468a      	mov	sl, r1
    28ba:	e720      	b.n	26fe <__divdi3+0x1e>
    28bc:	2320      	movs	r3, #32
    28be:	1a1b      	subs	r3, r3, r0
    28c0:	4642      	mov	r2, r8
    28c2:	1c35      	adds	r5, r6, #0
    28c4:	4082      	lsls	r2, r0
    28c6:	1c3c      	adds	r4, r7, #0
    28c8:	40dd      	lsrs	r5, r3
    28ca:	40dc      	lsrs	r4, r3
    28cc:	4087      	lsls	r7, r0
    28ce:	1c2b      	adds	r3, r5, #0
    28d0:	0c15      	lsrs	r5, r2, #16
    28d2:	433b      	orrs	r3, r7
    28d4:	1c29      	adds	r1, r5, #0
    28d6:	4086      	lsls	r6, r0
    28d8:	1c20      	adds	r0, r4, #0
    28da:	9300      	str	r3, [sp, #0]
    28dc:	0417      	lsls	r7, r2, #16
    28de:	4690      	mov	r8, r2
    28e0:	f7ff fdd6 	bl	2490 <__aeabi_uidiv>
    28e4:	0c3f      	lsrs	r7, r7, #16
    28e6:	1c01      	adds	r1, r0, #0
    28e8:	4379      	muls	r1, r7
    28ea:	4681      	mov	r9, r0
    28ec:	468b      	mov	fp, r1
    28ee:	1c20      	adds	r0, r4, #0
    28f0:	1c29      	adds	r1, r5, #0
    28f2:	f7ff fe11 	bl	2518 <__aeabi_uidivmod>
    28f6:	9c00      	ldr	r4, [sp, #0]
    28f8:	0409      	lsls	r1, r1, #16
    28fa:	0c23      	lsrs	r3, r4, #16
    28fc:	4319      	orrs	r1, r3
    28fe:	458b      	cmp	fp, r1
    2900:	d90c      	bls.n	291c <__divdi3+0x23c>
    2902:	464b      	mov	r3, r9
    2904:	4441      	add	r1, r8
    2906:	3b01      	subs	r3, #1
    2908:	4588      	cmp	r8, r1
    290a:	d900      	bls.n	290e <__divdi3+0x22e>
    290c:	e0bd      	b.n	2a8a <__divdi3+0x3aa>
    290e:	458b      	cmp	fp, r1
    2910:	d800      	bhi.n	2914 <__divdi3+0x234>
    2912:	e0ba      	b.n	2a8a <__divdi3+0x3aa>
    2914:	2202      	movs	r2, #2
    2916:	4252      	negs	r2, r2
    2918:	4491      	add	r9, r2
    291a:	4441      	add	r1, r8
    291c:	465c      	mov	r4, fp
    291e:	1b0c      	subs	r4, r1, r4
    2920:	1c20      	adds	r0, r4, #0
    2922:	1c29      	adds	r1, r5, #0
    2924:	9401      	str	r4, [sp, #4]
    2926:	f7ff fdb3 	bl	2490 <__aeabi_uidiv>
    292a:	1c39      	adds	r1, r7, #0
    292c:	4341      	muls	r1, r0
    292e:	1c04      	adds	r4, r0, #0
    2930:	468b      	mov	fp, r1
    2932:	9801      	ldr	r0, [sp, #4]
    2934:	1c29      	adds	r1, r5, #0
    2936:	f7ff fdef 	bl	2518 <__aeabi_uidivmod>
    293a:	9a00      	ldr	r2, [sp, #0]
    293c:	0409      	lsls	r1, r1, #16
    293e:	0413      	lsls	r3, r2, #16
    2940:	0c1b      	lsrs	r3, r3, #16
    2942:	4319      	orrs	r1, r3
    2944:	458b      	cmp	fp, r1
    2946:	d909      	bls.n	295c <__divdi3+0x27c>
    2948:	4441      	add	r1, r8
    294a:	1e63      	subs	r3, r4, #1
    294c:	4588      	cmp	r8, r1
    294e:	d900      	bls.n	2952 <__divdi3+0x272>
    2950:	e097      	b.n	2a82 <__divdi3+0x3a2>
    2952:	458b      	cmp	fp, r1
    2954:	d800      	bhi.n	2958 <__divdi3+0x278>
    2956:	e094      	b.n	2a82 <__divdi3+0x3a2>
    2958:	3c02      	subs	r4, #2
    295a:	4441      	add	r1, r8
    295c:	465b      	mov	r3, fp
    295e:	1acb      	subs	r3, r1, r3
    2960:	4649      	mov	r1, r9
    2962:	469b      	mov	fp, r3
    2964:	040b      	lsls	r3, r1, #16
    2966:	431c      	orrs	r4, r3
    2968:	9700      	str	r7, [sp, #0]
    296a:	e75d      	b.n	2828 <__divdi3+0x148>
    296c:	9d00      	ldr	r5, [sp, #0]
    296e:	2320      	movs	r3, #32
    2970:	1a1b      	subs	r3, r3, r0
    2972:	464a      	mov	r2, r9
    2974:	4082      	lsls	r2, r0
    2976:	40dd      	lsrs	r5, r3
    2978:	4315      	orrs	r5, r2
    297a:	1c39      	adds	r1, r7, #0
    297c:	9a00      	ldr	r2, [sp, #0]
    297e:	40d9      	lsrs	r1, r3
    2980:	4082      	lsls	r2, r0
    2982:	4688      	mov	r8, r1
    2984:	1c31      	adds	r1, r6, #0
    2986:	9200      	str	r2, [sp, #0]
    2988:	40d9      	lsrs	r1, r3
    298a:	1c3a      	adds	r2, r7, #0
    298c:	4082      	lsls	r2, r0
    298e:	1c0b      	adds	r3, r1, #0
    2990:	4313      	orrs	r3, r2
    2992:	9301      	str	r3, [sp, #4]
    2994:	0c2f      	lsrs	r7, r5, #16
    2996:	042b      	lsls	r3, r5, #16
    2998:	0c1b      	lsrs	r3, r3, #16
    299a:	1c39      	adds	r1, r7, #0
    299c:	4640      	mov	r0, r8
    299e:	9302      	str	r3, [sp, #8]
    29a0:	f7ff fd76 	bl	2490 <__aeabi_uidiv>
    29a4:	9a02      	ldr	r2, [sp, #8]
    29a6:	4681      	mov	r9, r0
    29a8:	4342      	muls	r2, r0
    29aa:	1c39      	adds	r1, r7, #0
    29ac:	4640      	mov	r0, r8
    29ae:	4693      	mov	fp, r2
    29b0:	f7ff fdb2 	bl	2518 <__aeabi_uidivmod>
    29b4:	9a01      	ldr	r2, [sp, #4]
    29b6:	0409      	lsls	r1, r1, #16
    29b8:	0c13      	lsrs	r3, r2, #16
    29ba:	4319      	orrs	r1, r3
    29bc:	458b      	cmp	fp, r1
    29be:	d90a      	bls.n	29d6 <__divdi3+0x2f6>
    29c0:	464b      	mov	r3, r9
    29c2:	1949      	adds	r1, r1, r5
    29c4:	3b01      	subs	r3, #1
    29c6:	428d      	cmp	r5, r1
    29c8:	d85d      	bhi.n	2a86 <__divdi3+0x3a6>
    29ca:	458b      	cmp	fp, r1
    29cc:	d95b      	bls.n	2a86 <__divdi3+0x3a6>
    29ce:	2302      	movs	r3, #2
    29d0:	425b      	negs	r3, r3
    29d2:	4499      	add	r9, r3
    29d4:	1949      	adds	r1, r1, r5
    29d6:	465a      	mov	r2, fp
    29d8:	1a8a      	subs	r2, r1, r2
    29da:	1c10      	adds	r0, r2, #0
    29dc:	1c39      	adds	r1, r7, #0
    29de:	9203      	str	r2, [sp, #12]
    29e0:	f7ff fd56 	bl	2490 <__aeabi_uidiv>
    29e4:	9b02      	ldr	r3, [sp, #8]
    29e6:	4680      	mov	r8, r0
    29e8:	4343      	muls	r3, r0
    29ea:	1c39      	adds	r1, r7, #0
    29ec:	9803      	ldr	r0, [sp, #12]
    29ee:	469b      	mov	fp, r3
    29f0:	f7ff fd92 	bl	2518 <__aeabi_uidivmod>
    29f4:	9a01      	ldr	r2, [sp, #4]
    29f6:	0409      	lsls	r1, r1, #16
    29f8:	0413      	lsls	r3, r2, #16
    29fa:	0c1b      	lsrs	r3, r3, #16
    29fc:	4319      	orrs	r1, r3
    29fe:	458b      	cmp	fp, r1
    2a00:	d90a      	bls.n	2a18 <__divdi3+0x338>
    2a02:	4643      	mov	r3, r8
    2a04:	1949      	adds	r1, r1, r5
    2a06:	3b01      	subs	r3, #1
    2a08:	428d      	cmp	r5, r1
    2a0a:	d838      	bhi.n	2a7e <__divdi3+0x39e>
    2a0c:	458b      	cmp	fp, r1
    2a0e:	d936      	bls.n	2a7e <__divdi3+0x39e>
    2a10:	2302      	movs	r3, #2
    2a12:	425b      	negs	r3, r3
    2a14:	4498      	add	r8, r3
    2a16:	1949      	adds	r1, r1, r5
    2a18:	465d      	mov	r5, fp
    2a1a:	1b4d      	subs	r5, r1, r5
    2a1c:	46ab      	mov	fp, r5
    2a1e:	4649      	mov	r1, r9
    2a20:	9d00      	ldr	r5, [sp, #0]
    2a22:	040f      	lsls	r7, r1, #16
    2a24:	4642      	mov	r2, r8
    2a26:	4317      	orrs	r7, r2
    2a28:	042a      	lsls	r2, r5, #16
    2a2a:	0c12      	lsrs	r2, r2, #16
    2a2c:	043b      	lsls	r3, r7, #16
    2a2e:	0c2d      	lsrs	r5, r5, #16
    2a30:	0c1b      	lsrs	r3, r3, #16
    2a32:	0c38      	lsrs	r0, r7, #16
    2a34:	1c11      	adds	r1, r2, #0
    2a36:	4359      	muls	r1, r3
    2a38:	4342      	muls	r2, r0
    2a3a:	436b      	muls	r3, r5
    2a3c:	4368      	muls	r0, r5
    2a3e:	18d3      	adds	r3, r2, r3
    2a40:	0c0d      	lsrs	r5, r1, #16
    2a42:	195b      	adds	r3, r3, r5
    2a44:	468c      	mov	ip, r1
    2a46:	429a      	cmp	r2, r3
    2a48:	d902      	bls.n	2a50 <__divdi3+0x370>
    2a4a:	2280      	movs	r2, #128	; 0x80
    2a4c:	0252      	lsls	r2, r2, #9
    2a4e:	1880      	adds	r0, r0, r2
    2a50:	0c1d      	lsrs	r5, r3, #16
    2a52:	1940      	adds	r0, r0, r5
    2a54:	4583      	cmp	fp, r0
    2a56:	d30c      	bcc.n	2a72 <__divdi3+0x392>
    2a58:	d003      	beq.n	2a62 <__divdi3+0x382>
    2a5a:	2400      	movs	r4, #0
    2a5c:	e6b0      	b.n	27c0 <__divdi3+0xe0>
    2a5e:	1c1c      	adds	r4, r3, #0
    2a60:	e689      	b.n	2776 <__divdi3+0x96>
    2a62:	4665      	mov	r5, ip
    2a64:	042a      	lsls	r2, r5, #16
    2a66:	041b      	lsls	r3, r3, #16
    2a68:	0c12      	lsrs	r2, r2, #16
    2a6a:	189b      	adds	r3, r3, r2
    2a6c:	40a6      	lsls	r6, r4
    2a6e:	429e      	cmp	r6, r3
    2a70:	d2f3      	bcs.n	2a5a <__divdi3+0x37a>
    2a72:	3f01      	subs	r7, #1
    2a74:	2400      	movs	r4, #0
    2a76:	e6a3      	b.n	27c0 <__divdi3+0xe0>
    2a78:	2400      	movs	r4, #0
    2a7a:	2701      	movs	r7, #1
    2a7c:	e6a0      	b.n	27c0 <__divdi3+0xe0>
    2a7e:	4698      	mov	r8, r3
    2a80:	e7ca      	b.n	2a18 <__divdi3+0x338>
    2a82:	1c1c      	adds	r4, r3, #0
    2a84:	e76a      	b.n	295c <__divdi3+0x27c>
    2a86:	4699      	mov	r9, r3
    2a88:	e7a5      	b.n	29d6 <__divdi3+0x2f6>
    2a8a:	4699      	mov	r9, r3
    2a8c:	e746      	b.n	291c <__divdi3+0x23c>
    2a8e:	2202      	movs	r2, #2
    2a90:	4252      	negs	r2, r2
    2a92:	4491      	add	r9, r2
    2a94:	4441      	add	r1, r8
    2a96:	e6e0      	b.n	285a <__divdi3+0x17a>

00002a98 <__udivdi3>:
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9a:	465f      	mov	r7, fp
    2a9c:	4656      	mov	r6, sl
    2a9e:	464d      	mov	r5, r9
    2aa0:	4644      	mov	r4, r8
    2aa2:	b4f0      	push	{r4, r5, r6, r7}
    2aa4:	1c0d      	adds	r5, r1, #0
    2aa6:	b085      	sub	sp, #20
    2aa8:	1c06      	adds	r6, r0, #0
    2aaa:	4692      	mov	sl, r2
    2aac:	4698      	mov	r8, r3
    2aae:	9002      	str	r0, [sp, #8]
    2ab0:	9101      	str	r1, [sp, #4]
    2ab2:	9203      	str	r2, [sp, #12]
    2ab4:	1c1f      	adds	r7, r3, #0
    2ab6:	1c14      	adds	r4, r2, #0
    2ab8:	4683      	mov	fp, r0
    2aba:	46a9      	mov	r9, r5
    2abc:	2b00      	cmp	r3, #0
    2abe:	d159      	bne.n	2b74 <__udivdi3+0xdc>
    2ac0:	42aa      	cmp	r2, r5
    2ac2:	d969      	bls.n	2b98 <__udivdi3+0x100>
    2ac4:	1c10      	adds	r0, r2, #0
    2ac6:	f000 f9a9 	bl	2e1c <__clzsi2>
    2aca:	2800      	cmp	r0, #0
    2acc:	d00a      	beq.n	2ae4 <__udivdi3+0x4c>
    2ace:	2320      	movs	r3, #32
    2ad0:	1a1b      	subs	r3, r3, r0
    2ad2:	1c31      	adds	r1, r6, #0
    2ad4:	40d9      	lsrs	r1, r3
    2ad6:	4085      	lsls	r5, r0
    2ad8:	1c0b      	adds	r3, r1, #0
    2ada:	432b      	orrs	r3, r5
    2adc:	4086      	lsls	r6, r0
    2ade:	4084      	lsls	r4, r0
    2ae0:	4699      	mov	r9, r3
    2ae2:	46b3      	mov	fp, r6
    2ae4:	0c25      	lsrs	r5, r4, #16
    2ae6:	0423      	lsls	r3, r4, #16
    2ae8:	0c1b      	lsrs	r3, r3, #16
    2aea:	1c29      	adds	r1, r5, #0
    2aec:	4648      	mov	r0, r9
    2aee:	4698      	mov	r8, r3
    2af0:	f7ff fcce 	bl	2490 <__aeabi_uidiv>
    2af4:	4646      	mov	r6, r8
    2af6:	1c07      	adds	r7, r0, #0
    2af8:	4346      	muls	r6, r0
    2afa:	1c29      	adds	r1, r5, #0
    2afc:	4648      	mov	r0, r9
    2afe:	f7ff fd0b 	bl	2518 <__aeabi_uidivmod>
    2b02:	465a      	mov	r2, fp
    2b04:	0409      	lsls	r1, r1, #16
    2b06:	0c13      	lsrs	r3, r2, #16
    2b08:	4319      	orrs	r1, r3
    2b0a:	428e      	cmp	r6, r1
    2b0c:	d909      	bls.n	2b22 <__udivdi3+0x8a>
    2b0e:	1909      	adds	r1, r1, r4
    2b10:	1e7b      	subs	r3, r7, #1
    2b12:	428c      	cmp	r4, r1
    2b14:	d900      	bls.n	2b18 <__udivdi3+0x80>
    2b16:	e157      	b.n	2dc8 <__udivdi3+0x330>
    2b18:	428e      	cmp	r6, r1
    2b1a:	d800      	bhi.n	2b1e <__udivdi3+0x86>
    2b1c:	e154      	b.n	2dc8 <__udivdi3+0x330>
    2b1e:	3f02      	subs	r7, #2
    2b20:	1909      	adds	r1, r1, r4
    2b22:	1b89      	subs	r1, r1, r6
    2b24:	4689      	mov	r9, r1
    2b26:	1c08      	adds	r0, r1, #0
    2b28:	1c29      	adds	r1, r5, #0
    2b2a:	f7ff fcb1 	bl	2490 <__aeabi_uidiv>
    2b2e:	4643      	mov	r3, r8
    2b30:	4343      	muls	r3, r0
    2b32:	1c06      	adds	r6, r0, #0
    2b34:	1c29      	adds	r1, r5, #0
    2b36:	4648      	mov	r0, r9
    2b38:	4698      	mov	r8, r3
    2b3a:	f7ff fced 	bl	2518 <__aeabi_uidivmod>
    2b3e:	465a      	mov	r2, fp
    2b40:	0413      	lsls	r3, r2, #16
    2b42:	0409      	lsls	r1, r1, #16
    2b44:	0c1b      	lsrs	r3, r3, #16
    2b46:	4319      	orrs	r1, r3
    2b48:	4588      	cmp	r8, r1
    2b4a:	d908      	bls.n	2b5e <__udivdi3+0xc6>
    2b4c:	1909      	adds	r1, r1, r4
    2b4e:	1e73      	subs	r3, r6, #1
    2b50:	428c      	cmp	r4, r1
    2b52:	d900      	bls.n	2b56 <__udivdi3+0xbe>
    2b54:	e136      	b.n	2dc4 <__udivdi3+0x32c>
    2b56:	3e02      	subs	r6, #2
    2b58:	4588      	cmp	r8, r1
    2b5a:	d800      	bhi.n	2b5e <__udivdi3+0xc6>
    2b5c:	e132      	b.n	2dc4 <__udivdi3+0x32c>
    2b5e:	0438      	lsls	r0, r7, #16
    2b60:	4330      	orrs	r0, r6
    2b62:	2700      	movs	r7, #0
    2b64:	1c39      	adds	r1, r7, #0
    2b66:	b005      	add	sp, #20
    2b68:	bc3c      	pop	{r2, r3, r4, r5}
    2b6a:	4690      	mov	r8, r2
    2b6c:	4699      	mov	r9, r3
    2b6e:	46a2      	mov	sl, r4
    2b70:	46ab      	mov	fp, r5
    2b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b74:	9a01      	ldr	r2, [sp, #4]
    2b76:	4293      	cmp	r3, r2
    2b78:	d862      	bhi.n	2c40 <__udivdi3+0x1a8>
    2b7a:	1c18      	adds	r0, r3, #0
    2b7c:	f000 f94e 	bl	2e1c <__clzsi2>
    2b80:	1e04      	subs	r4, r0, #0
    2b82:	d160      	bne.n	2c46 <__udivdi3+0x1ae>
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	429f      	cmp	r7, r3
    2b88:	d200      	bcs.n	2b8c <__udivdi3+0xf4>
    2b8a:	e12c      	b.n	2de6 <__udivdi3+0x34e>
    2b8c:	9f02      	ldr	r7, [sp, #8]
    2b8e:	9903      	ldr	r1, [sp, #12]
    2b90:	428f      	cmp	r7, r1
    2b92:	4160      	adcs	r0, r4
    2b94:	2700      	movs	r7, #0
    2b96:	e7e5      	b.n	2b64 <__udivdi3+0xcc>
    2b98:	2a00      	cmp	r2, #0
    2b9a:	d104      	bne.n	2ba6 <__udivdi3+0x10e>
    2b9c:	2001      	movs	r0, #1
    2b9e:	2100      	movs	r1, #0
    2ba0:	f7ff fc76 	bl	2490 <__aeabi_uidiv>
    2ba4:	1c04      	adds	r4, r0, #0
    2ba6:	1c20      	adds	r0, r4, #0
    2ba8:	f000 f938 	bl	2e1c <__clzsi2>
    2bac:	2800      	cmp	r0, #0
    2bae:	d000      	beq.n	2bb2 <__udivdi3+0x11a>
    2bb0:	e0b9      	b.n	2d26 <__udivdi3+0x28e>
    2bb2:	0423      	lsls	r3, r4, #16
    2bb4:	1b2d      	subs	r5, r5, r4
    2bb6:	0c1b      	lsrs	r3, r3, #16
    2bb8:	46a9      	mov	r9, r5
    2bba:	0c26      	lsrs	r6, r4, #16
    2bbc:	4698      	mov	r8, r3
    2bbe:	2701      	movs	r7, #1
    2bc0:	1c31      	adds	r1, r6, #0
    2bc2:	4648      	mov	r0, r9
    2bc4:	f7ff fc64 	bl	2490 <__aeabi_uidiv>
    2bc8:	4641      	mov	r1, r8
    2bca:	4341      	muls	r1, r0
    2bcc:	1c05      	adds	r5, r0, #0
    2bce:	468a      	mov	sl, r1
    2bd0:	4648      	mov	r0, r9
    2bd2:	1c31      	adds	r1, r6, #0
    2bd4:	f7ff fca0 	bl	2518 <__aeabi_uidivmod>
    2bd8:	465a      	mov	r2, fp
    2bda:	0408      	lsls	r0, r1, #16
    2bdc:	0c13      	lsrs	r3, r2, #16
    2bde:	4318      	orrs	r0, r3
    2be0:	4582      	cmp	sl, r0
    2be2:	d907      	bls.n	2bf4 <__udivdi3+0x15c>
    2be4:	1900      	adds	r0, r0, r4
    2be6:	1e6b      	subs	r3, r5, #1
    2be8:	4284      	cmp	r4, r0
    2bea:	d802      	bhi.n	2bf2 <__udivdi3+0x15a>
    2bec:	4582      	cmp	sl, r0
    2bee:	d900      	bls.n	2bf2 <__udivdi3+0x15a>
    2bf0:	e110      	b.n	2e14 <__udivdi3+0x37c>
    2bf2:	1c1d      	adds	r5, r3, #0
    2bf4:	4653      	mov	r3, sl
    2bf6:	1ac3      	subs	r3, r0, r3
    2bf8:	1c18      	adds	r0, r3, #0
    2bfa:	1c31      	adds	r1, r6, #0
    2bfc:	469a      	mov	sl, r3
    2bfe:	f7ff fc47 	bl	2490 <__aeabi_uidiv>
    2c02:	4641      	mov	r1, r8
    2c04:	4341      	muls	r1, r0
    2c06:	4681      	mov	r9, r0
    2c08:	4688      	mov	r8, r1
    2c0a:	4650      	mov	r0, sl
    2c0c:	1c31      	adds	r1, r6, #0
    2c0e:	f7ff fc83 	bl	2518 <__aeabi_uidivmod>
    2c12:	465a      	mov	r2, fp
    2c14:	0413      	lsls	r3, r2, #16
    2c16:	0409      	lsls	r1, r1, #16
    2c18:	0c1b      	lsrs	r3, r3, #16
    2c1a:	4319      	orrs	r1, r3
    2c1c:	4588      	cmp	r8, r1
    2c1e:	d90b      	bls.n	2c38 <__udivdi3+0x1a0>
    2c20:	464b      	mov	r3, r9
    2c22:	1909      	adds	r1, r1, r4
    2c24:	3b01      	subs	r3, #1
    2c26:	428c      	cmp	r4, r1
    2c28:	d900      	bls.n	2c2c <__udivdi3+0x194>
    2c2a:	e0cf      	b.n	2dcc <__udivdi3+0x334>
    2c2c:	4588      	cmp	r8, r1
    2c2e:	d800      	bhi.n	2c32 <__udivdi3+0x19a>
    2c30:	e0cc      	b.n	2dcc <__udivdi3+0x334>
    2c32:	2302      	movs	r3, #2
    2c34:	425b      	negs	r3, r3
    2c36:	4499      	add	r9, r3
    2c38:	0428      	lsls	r0, r5, #16
    2c3a:	4649      	mov	r1, r9
    2c3c:	4308      	orrs	r0, r1
    2c3e:	e791      	b.n	2b64 <__udivdi3+0xcc>
    2c40:	2700      	movs	r7, #0
    2c42:	2000      	movs	r0, #0
    2c44:	e78e      	b.n	2b64 <__udivdi3+0xcc>
    2c46:	2320      	movs	r3, #32
    2c48:	1a1b      	subs	r3, r3, r0
    2c4a:	4642      	mov	r2, r8
    2c4c:	4657      	mov	r7, sl
    2c4e:	4082      	lsls	r2, r0
    2c50:	40df      	lsrs	r7, r3
    2c52:	4317      	orrs	r7, r2
    2c54:	4652      	mov	r2, sl
    2c56:	4082      	lsls	r2, r0
    2c58:	9201      	str	r2, [sp, #4]
    2c5a:	1c32      	adds	r2, r6, #0
    2c5c:	40da      	lsrs	r2, r3
    2c5e:	1c29      	adds	r1, r5, #0
    2c60:	40d9      	lsrs	r1, r3
    2c62:	4085      	lsls	r5, r0
    2c64:	1c13      	adds	r3, r2, #0
    2c66:	432b      	orrs	r3, r5
    2c68:	9302      	str	r3, [sp, #8]
    2c6a:	0c3d      	lsrs	r5, r7, #16
    2c6c:	043b      	lsls	r3, r7, #16
    2c6e:	0c1b      	lsrs	r3, r3, #16
    2c70:	4688      	mov	r8, r1
    2c72:	1c08      	adds	r0, r1, #0
    2c74:	1c29      	adds	r1, r5, #0
    2c76:	469a      	mov	sl, r3
    2c78:	f7ff fc0a 	bl	2490 <__aeabi_uidiv>
    2c7c:	4653      	mov	r3, sl
    2c7e:	4343      	muls	r3, r0
    2c80:	4681      	mov	r9, r0
    2c82:	1c29      	adds	r1, r5, #0
    2c84:	4640      	mov	r0, r8
    2c86:	469b      	mov	fp, r3
    2c88:	f7ff fc46 	bl	2518 <__aeabi_uidivmod>
    2c8c:	9a02      	ldr	r2, [sp, #8]
    2c8e:	0409      	lsls	r1, r1, #16
    2c90:	0c13      	lsrs	r3, r2, #16
    2c92:	4319      	orrs	r1, r3
    2c94:	458b      	cmp	fp, r1
    2c96:	d906      	bls.n	2ca6 <__udivdi3+0x20e>
    2c98:	464b      	mov	r3, r9
    2c9a:	19c9      	adds	r1, r1, r7
    2c9c:	3b01      	subs	r3, #1
    2c9e:	428f      	cmp	r7, r1
    2ca0:	d800      	bhi.n	2ca4 <__udivdi3+0x20c>
    2ca2:	e0ab      	b.n	2dfc <__udivdi3+0x364>
    2ca4:	4699      	mov	r9, r3
    2ca6:	465a      	mov	r2, fp
    2ca8:	1a8a      	subs	r2, r1, r2
    2caa:	1c10      	adds	r0, r2, #0
    2cac:	1c29      	adds	r1, r5, #0
    2cae:	4693      	mov	fp, r2
    2cb0:	f7ff fbee 	bl	2490 <__aeabi_uidiv>
    2cb4:	4653      	mov	r3, sl
    2cb6:	4343      	muls	r3, r0
    2cb8:	1c29      	adds	r1, r5, #0
    2cba:	4680      	mov	r8, r0
    2cbc:	4658      	mov	r0, fp
    2cbe:	469a      	mov	sl, r3
    2cc0:	f7ff fc2a 	bl	2518 <__aeabi_uidivmod>
    2cc4:	9a02      	ldr	r2, [sp, #8]
    2cc6:	0409      	lsls	r1, r1, #16
    2cc8:	0415      	lsls	r5, r2, #16
    2cca:	0c2d      	lsrs	r5, r5, #16
    2ccc:	4329      	orrs	r1, r5
    2cce:	458a      	cmp	sl, r1
    2cd0:	d906      	bls.n	2ce0 <__udivdi3+0x248>
    2cd2:	4643      	mov	r3, r8
    2cd4:	19c9      	adds	r1, r1, r7
    2cd6:	3b01      	subs	r3, #1
    2cd8:	428f      	cmp	r7, r1
    2cda:	d800      	bhi.n	2cde <__udivdi3+0x246>
    2cdc:	e086      	b.n	2dec <__udivdi3+0x354>
    2cde:	4698      	mov	r8, r3
    2ce0:	4657      	mov	r7, sl
    2ce2:	1bcf      	subs	r7, r1, r7
    2ce4:	46ba      	mov	sl, r7
    2ce6:	4649      	mov	r1, r9
    2ce8:	9f01      	ldr	r7, [sp, #4]
    2cea:	0408      	lsls	r0, r1, #16
    2cec:	4642      	mov	r2, r8
    2cee:	4310      	orrs	r0, r2
    2cf0:	043d      	lsls	r5, r7, #16
    2cf2:	0c2d      	lsrs	r5, r5, #16
    2cf4:	0403      	lsls	r3, r0, #16
    2cf6:	0c3f      	lsrs	r7, r7, #16
    2cf8:	0c1b      	lsrs	r3, r3, #16
    2cfa:	0c02      	lsrs	r2, r0, #16
    2cfc:	1c29      	adds	r1, r5, #0
    2cfe:	4359      	muls	r1, r3
    2d00:	4355      	muls	r5, r2
    2d02:	437b      	muls	r3, r7
    2d04:	437a      	muls	r2, r7
    2d06:	18eb      	adds	r3, r5, r3
    2d08:	0c0f      	lsrs	r7, r1, #16
    2d0a:	19db      	adds	r3, r3, r7
    2d0c:	468c      	mov	ip, r1
    2d0e:	429d      	cmp	r5, r3
    2d10:	d902      	bls.n	2d18 <__udivdi3+0x280>
    2d12:	2780      	movs	r7, #128	; 0x80
    2d14:	027f      	lsls	r7, r7, #9
    2d16:	19d2      	adds	r2, r2, r7
    2d18:	0c1d      	lsrs	r5, r3, #16
    2d1a:	1952      	adds	r2, r2, r5
    2d1c:	4592      	cmp	sl, r2
    2d1e:	d35f      	bcc.n	2de0 <__udivdi3+0x348>
    2d20:	d056      	beq.n	2dd0 <__udivdi3+0x338>
    2d22:	2700      	movs	r7, #0
    2d24:	e71e      	b.n	2b64 <__udivdi3+0xcc>
    2d26:	2320      	movs	r3, #32
    2d28:	1a1b      	subs	r3, r3, r0
    2d2a:	1c31      	adds	r1, r6, #0
    2d2c:	1c2f      	adds	r7, r5, #0
    2d2e:	40d9      	lsrs	r1, r3
    2d30:	40df      	lsrs	r7, r3
    2d32:	4085      	lsls	r5, r0
    2d34:	1c0b      	adds	r3, r1, #0
    2d36:	4084      	lsls	r4, r0
    2d38:	432b      	orrs	r3, r5
    2d3a:	4086      	lsls	r6, r0
    2d3c:	9301      	str	r3, [sp, #4]
    2d3e:	46b3      	mov	fp, r6
    2d40:	0423      	lsls	r3, r4, #16
    2d42:	0c26      	lsrs	r6, r4, #16
    2d44:	0c1b      	lsrs	r3, r3, #16
    2d46:	1c38      	adds	r0, r7, #0
    2d48:	1c31      	adds	r1, r6, #0
    2d4a:	4698      	mov	r8, r3
    2d4c:	f7ff fba0 	bl	2490 <__aeabi_uidiv>
    2d50:	4642      	mov	r2, r8
    2d52:	4342      	muls	r2, r0
    2d54:	1c05      	adds	r5, r0, #0
    2d56:	1c31      	adds	r1, r6, #0
    2d58:	1c38      	adds	r0, r7, #0
    2d5a:	4691      	mov	r9, r2
    2d5c:	f7ff fbdc 	bl	2518 <__aeabi_uidivmod>
    2d60:	9f01      	ldr	r7, [sp, #4]
    2d62:	0409      	lsls	r1, r1, #16
    2d64:	0c3b      	lsrs	r3, r7, #16
    2d66:	4319      	orrs	r1, r3
    2d68:	4589      	cmp	r9, r1
    2d6a:	d907      	bls.n	2d7c <__udivdi3+0x2e4>
    2d6c:	1909      	adds	r1, r1, r4
    2d6e:	1e6b      	subs	r3, r5, #1
    2d70:	428c      	cmp	r4, r1
    2d72:	d84d      	bhi.n	2e10 <__udivdi3+0x378>
    2d74:	4589      	cmp	r9, r1
    2d76:	d94b      	bls.n	2e10 <__udivdi3+0x378>
    2d78:	3d02      	subs	r5, #2
    2d7a:	1909      	adds	r1, r1, r4
    2d7c:	464a      	mov	r2, r9
    2d7e:	1a8a      	subs	r2, r1, r2
    2d80:	1c10      	adds	r0, r2, #0
    2d82:	1c31      	adds	r1, r6, #0
    2d84:	4692      	mov	sl, r2
    2d86:	f7ff fb83 	bl	2490 <__aeabi_uidiv>
    2d8a:	4643      	mov	r3, r8
    2d8c:	4343      	muls	r3, r0
    2d8e:	1c07      	adds	r7, r0, #0
    2d90:	1c31      	adds	r1, r6, #0
    2d92:	4650      	mov	r0, sl
    2d94:	4699      	mov	r9, r3
    2d96:	f7ff fbbf 	bl	2518 <__aeabi_uidivmod>
    2d9a:	9a01      	ldr	r2, [sp, #4]
    2d9c:	0409      	lsls	r1, r1, #16
    2d9e:	0413      	lsls	r3, r2, #16
    2da0:	0c1b      	lsrs	r3, r3, #16
    2da2:	4319      	orrs	r1, r3
    2da4:	4589      	cmp	r9, r1
    2da6:	d907      	bls.n	2db8 <__udivdi3+0x320>
    2da8:	1909      	adds	r1, r1, r4
    2daa:	1e7b      	subs	r3, r7, #1
    2dac:	428c      	cmp	r4, r1
    2dae:	d82d      	bhi.n	2e0c <__udivdi3+0x374>
    2db0:	4589      	cmp	r9, r1
    2db2:	d92b      	bls.n	2e0c <__udivdi3+0x374>
    2db4:	3f02      	subs	r7, #2
    2db6:	1909      	adds	r1, r1, r4
    2db8:	464b      	mov	r3, r9
    2dba:	1acb      	subs	r3, r1, r3
    2dbc:	042d      	lsls	r5, r5, #16
    2dbe:	4699      	mov	r9, r3
    2dc0:	432f      	orrs	r7, r5
    2dc2:	e6fd      	b.n	2bc0 <__udivdi3+0x128>
    2dc4:	1c1e      	adds	r6, r3, #0
    2dc6:	e6ca      	b.n	2b5e <__udivdi3+0xc6>
    2dc8:	1c1f      	adds	r7, r3, #0
    2dca:	e6aa      	b.n	2b22 <__udivdi3+0x8a>
    2dcc:	4699      	mov	r9, r3
    2dce:	e733      	b.n	2c38 <__udivdi3+0x1a0>
    2dd0:	4661      	mov	r1, ip
    2dd2:	040a      	lsls	r2, r1, #16
    2dd4:	041b      	lsls	r3, r3, #16
    2dd6:	0c12      	lsrs	r2, r2, #16
    2dd8:	189b      	adds	r3, r3, r2
    2dda:	40a6      	lsls	r6, r4
    2ddc:	429e      	cmp	r6, r3
    2dde:	d2a0      	bcs.n	2d22 <__udivdi3+0x28a>
    2de0:	3801      	subs	r0, #1
    2de2:	2700      	movs	r7, #0
    2de4:	e6be      	b.n	2b64 <__udivdi3+0xcc>
    2de6:	2700      	movs	r7, #0
    2de8:	2001      	movs	r0, #1
    2dea:	e6bb      	b.n	2b64 <__udivdi3+0xcc>
    2dec:	458a      	cmp	sl, r1
    2dee:	d800      	bhi.n	2df2 <__udivdi3+0x35a>
    2df0:	e775      	b.n	2cde <__udivdi3+0x246>
    2df2:	2302      	movs	r3, #2
    2df4:	425b      	negs	r3, r3
    2df6:	4498      	add	r8, r3
    2df8:	19c9      	adds	r1, r1, r7
    2dfa:	e771      	b.n	2ce0 <__udivdi3+0x248>
    2dfc:	458b      	cmp	fp, r1
    2dfe:	d800      	bhi.n	2e02 <__udivdi3+0x36a>
    2e00:	e750      	b.n	2ca4 <__udivdi3+0x20c>
    2e02:	2302      	movs	r3, #2
    2e04:	425b      	negs	r3, r3
    2e06:	4499      	add	r9, r3
    2e08:	19c9      	adds	r1, r1, r7
    2e0a:	e74c      	b.n	2ca6 <__udivdi3+0x20e>
    2e0c:	1c1f      	adds	r7, r3, #0
    2e0e:	e7d3      	b.n	2db8 <__udivdi3+0x320>
    2e10:	1c1d      	adds	r5, r3, #0
    2e12:	e7b3      	b.n	2d7c <__udivdi3+0x2e4>
    2e14:	3d02      	subs	r5, #2
    2e16:	1900      	adds	r0, r0, r4
    2e18:	e6ec      	b.n	2bf4 <__udivdi3+0x15c>
    2e1a:	46c0      	nop			; (mov r8, r8)

00002e1c <__clzsi2>:
    2e1c:	211c      	movs	r1, #28
    2e1e:	2301      	movs	r3, #1
    2e20:	041b      	lsls	r3, r3, #16
    2e22:	4298      	cmp	r0, r3
    2e24:	d301      	bcc.n	2e2a <__clzsi2+0xe>
    2e26:	0c00      	lsrs	r0, r0, #16
    2e28:	3910      	subs	r1, #16
    2e2a:	0a1b      	lsrs	r3, r3, #8
    2e2c:	4298      	cmp	r0, r3
    2e2e:	d301      	bcc.n	2e34 <__clzsi2+0x18>
    2e30:	0a00      	lsrs	r0, r0, #8
    2e32:	3908      	subs	r1, #8
    2e34:	091b      	lsrs	r3, r3, #4
    2e36:	4298      	cmp	r0, r3
    2e38:	d301      	bcc.n	2e3e <__clzsi2+0x22>
    2e3a:	0900      	lsrs	r0, r0, #4
    2e3c:	3904      	subs	r1, #4
    2e3e:	a202      	add	r2, pc, #8	; (adr r2, 2e48 <__clzsi2+0x2c>)
    2e40:	5c10      	ldrb	r0, [r2, r0]
    2e42:	1840      	adds	r0, r0, r1
    2e44:	4770      	bx	lr
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	02020304 	.word	0x02020304
    2e4c:	01010101 	.word	0x01010101
	...

00002e58 <__libc_init_array>:
    2e58:	b570      	push	{r4, r5, r6, lr}
    2e5a:	4b0e      	ldr	r3, [pc, #56]	; (2e94 <__libc_init_array+0x3c>)
    2e5c:	4d0e      	ldr	r5, [pc, #56]	; (2e98 <__libc_init_array+0x40>)
    2e5e:	2400      	movs	r4, #0
    2e60:	1aed      	subs	r5, r5, r3
    2e62:	10ad      	asrs	r5, r5, #2
    2e64:	1c1e      	adds	r6, r3, #0
    2e66:	42ac      	cmp	r4, r5
    2e68:	d004      	beq.n	2e74 <__libc_init_array+0x1c>
    2e6a:	00a3      	lsls	r3, r4, #2
    2e6c:	58f3      	ldr	r3, [r6, r3]
    2e6e:	4798      	blx	r3
    2e70:	3401      	adds	r4, #1
    2e72:	e7f8      	b.n	2e66 <__libc_init_array+0xe>
    2e74:	f000 f85a 	bl	2f2c <_init>
    2e78:	4b08      	ldr	r3, [pc, #32]	; (2e9c <__libc_init_array+0x44>)
    2e7a:	4d09      	ldr	r5, [pc, #36]	; (2ea0 <__libc_init_array+0x48>)
    2e7c:	2400      	movs	r4, #0
    2e7e:	1aed      	subs	r5, r5, r3
    2e80:	10ad      	asrs	r5, r5, #2
    2e82:	1c1e      	adds	r6, r3, #0
    2e84:	42ac      	cmp	r4, r5
    2e86:	d004      	beq.n	2e92 <__libc_init_array+0x3a>
    2e88:	00a3      	lsls	r3, r4, #2
    2e8a:	58f3      	ldr	r3, [r6, r3]
    2e8c:	4798      	blx	r3
    2e8e:	3401      	adds	r4, #1
    2e90:	e7f8      	b.n	2e84 <__libc_init_array+0x2c>
    2e92:	bd70      	pop	{r4, r5, r6, pc}
    2e94:	00002f38 	.word	0x00002f38
    2e98:	00002f38 	.word	0x00002f38
    2e9c:	00002f38 	.word	0x00002f38
    2ea0:	00002f3c 	.word	0x00002f3c

00002ea4 <memcmp>:
    2ea4:	b530      	push	{r4, r5, lr}
    2ea6:	2300      	movs	r3, #0
    2ea8:	4293      	cmp	r3, r2
    2eaa:	d008      	beq.n	2ebe <memcmp+0x1a>
    2eac:	5cc5      	ldrb	r5, [r0, r3]
    2eae:	3301      	adds	r3, #1
    2eb0:	18cc      	adds	r4, r1, r3
    2eb2:	3c01      	subs	r4, #1
    2eb4:	7824      	ldrb	r4, [r4, #0]
    2eb6:	42a5      	cmp	r5, r4
    2eb8:	d0f6      	beq.n	2ea8 <memcmp+0x4>
    2eba:	1b28      	subs	r0, r5, r4
    2ebc:	e000      	b.n	2ec0 <memcmp+0x1c>
    2ebe:	2000      	movs	r0, #0
    2ec0:	bd30      	pop	{r4, r5, pc}

00002ec2 <memcpy>:
    2ec2:	b510      	push	{r4, lr}
    2ec4:	2300      	movs	r3, #0
    2ec6:	4293      	cmp	r3, r2
    2ec8:	d003      	beq.n	2ed2 <memcpy+0x10>
    2eca:	5ccc      	ldrb	r4, [r1, r3]
    2ecc:	54c4      	strb	r4, [r0, r3]
    2ece:	3301      	adds	r3, #1
    2ed0:	e7f9      	b.n	2ec6 <memcpy+0x4>
    2ed2:	bd10      	pop	{r4, pc}

00002ed4 <memset>:
    2ed4:	1c03      	adds	r3, r0, #0
    2ed6:	1882      	adds	r2, r0, r2
    2ed8:	4293      	cmp	r3, r2
    2eda:	d002      	beq.n	2ee2 <memset+0xe>
    2edc:	7019      	strb	r1, [r3, #0]
    2ede:	3301      	adds	r3, #1
    2ee0:	e7fa      	b.n	2ed8 <memset+0x4>
    2ee2:	4770      	bx	lr
    2ee4:	00000a3c 	.word	0x00000a3c
    2ee8:	00000a12 	.word	0x00000a12
    2eec:	0000098e 	.word	0x0000098e
    2ef0:	00000a02 	.word	0x00000a02
    2ef4:	0000098e 	.word	0x0000098e
    2ef8:	000009ca 	.word	0x000009ca
    2efc:	0000098e 	.word	0x0000098e
    2f00:	000009a2 	.word	0x000009a2
    2f04:	00000a09 	.word	0x00000a09
    2f08:	00001a08 	.word	0x00001a08
    2f0c:	00001a3c 	.word	0x00001a3c
    2f10:	00001a3c 	.word	0x00001a3c
    2f14:	00001a20 	.word	0x00001a20
    2f18:	00001a20 	.word	0x00001a20
    2f1c:	00001a26 	.word	0x00001a26
    2f20:	00001a2c 	.word	0x00001a2c
    2f24:	000019ea 	.word	0x000019ea
    2f28:	00001a0e 	.word	0x00001a0e

00002f2c <_init>:
    2f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f32:	bc08      	pop	{r3}
    2f34:	469e      	mov	lr, r3
    2f36:	4770      	bx	lr

00002f38 <__init_array_start>:
    2f38:	000000b5 	.word	0x000000b5

00002f3c <_fini>:
    2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f42:	bc08      	pop	{r3}
    2f44:	469e      	mov	lr, r3
    2f46:	4770      	bx	lr

00002f48 <__fini_array_start>:
    2f48:	0000008d 	.word	0x0000008d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <imuFrameData>:
2000000c:	cccd 3dcc cccd 3e4c 999a 3e99 cccd 3ecc     ...=..L>...>...>
2000001c:	0001 0002 0003 0004 0005 0006 0007 0008     ................
2000002c:	0009 0000                                   ....

20000030 <g_interrupt_enabled>:
20000030:	0001 0000                                   ....

20000034 <packetParserConfig>:
20000034:	2045 0000 2035 0000 097d 0000 02fc 2000     E ..5 ..}...... 

20000044 <em7180Config>:
20000044:	0000 0000 0029 0000 0050 2000               ....)...P.. 

20000050 <twiConfig>:
20000050:	0800 4200 0000 0000 0000 0000 0000 0000     ...B............
20000060:	0190 0000 0190 0000 0000 0000 0000 0000     ................
20000070:	0000 0000 ffff ffff 0000 0000 0002 000e     ................
20000080:	0002 000f 0000 0000 0000 0000 0000 0000     ................
20000090:	00d7 0000 0000 0000                         ........
