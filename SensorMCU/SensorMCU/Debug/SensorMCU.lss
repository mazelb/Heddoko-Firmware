
SensorMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003368  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00003368  00003368  0000b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000b0  20000000  00003370  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000284  200000b0  00003420  000100b0  2**2
                  ALLOC
  4 .stack        00000404  20000334  000036a4  000100b0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000100d8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00025f4e  00000000  00000000  00010133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003887  00000000  00000000  00036081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000068c1  00000000  00000000  00039908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005a0  00000000  00000000  000401c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010c8  00000000  00000000  00040769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015353  00000000  00000000  00041831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000de7e  00000000  00000000  00056b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bef2  00000000  00000000  00064a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f5c  00000000  00000000  000d08f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000738 	.word	0x20000738
       4:	00002111 	.word	0x00002111
       8:	0000210d 	.word	0x0000210d
       c:	0000210d 	.word	0x0000210d
	...
      2c:	0000210d 	.word	0x0000210d
	...
      38:	0000210d 	.word	0x0000210d
      3c:	00002205 	.word	0x00002205
      40:	0000210d 	.word	0x0000210d
      44:	0000210d 	.word	0x0000210d
      48:	0000210d 	.word	0x0000210d
      4c:	0000210d 	.word	0x0000210d
      50:	00001a65 	.word	0x00001a65
      54:	0000210d 	.word	0x0000210d
      58:	0000210d 	.word	0x0000210d
      5c:	00000000 	.word	0x00000000
      60:	0000210d 	.word	0x0000210d
      64:	000019ed 	.word	0x000019ed
      68:	000019fd 	.word	0x000019fd
      6c:	00000000 	.word	0x00000000
      70:	0000210d 	.word	0x0000210d
      74:	0000210d 	.word	0x0000210d
      78:	0000210d 	.word	0x0000210d
      7c:	0000210d 	.word	0x0000210d
      80:	0000210d 	.word	0x0000210d
      84:	0000210d 	.word	0x0000210d
      88:	0000210d 	.word	0x0000210d

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	200000b0 	.word	0x200000b0
      ac:	00000000 	.word	0x00000000
      b0:	00003370 	.word	0x00003370

000000b4 <frame_dummy>:
      b4:	b508      	push	{r3, lr}
      b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d003      	beq.n	d4 <frame_dummy+0x20>
      cc:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      ce:	2b00      	cmp	r3, #0
      d0:	d000      	beq.n	d4 <frame_dummy+0x20>
      d2:	4798      	blx	r3
      d4:	bd08      	pop	{r3, pc}
      d6:	46c0      	nop			; (mov r8, r8)
      d8:	00000000 	.word	0x00000000
      dc:	00003370 	.word	0x00003370
      e0:	200000b4 	.word	0x200000b4
      e4:	00003370 	.word	0x00003370
      e8:	00000000 	.word	0x00000000

000000ec <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
      ec:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
      ee:	4b16      	ldr	r3, [pc, #88]	; (148 <_system_extint_init+0x5c>)
      f0:	2240      	movs	r2, #64	; 0x40
      f2:	6999      	ldr	r1, [r3, #24]
      f4:	b082      	sub	sp, #8
      f6:	430a      	orrs	r2, r1
      f8:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
      fa:	466a      	mov	r2, sp
      fc:	2300      	movs	r3, #0
      fe:	7013      	strb	r3, [r2, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     100:	4669      	mov	r1, sp
     102:	2005      	movs	r0, #5
     104:	4b11      	ldr	r3, [pc, #68]	; (14c <_system_extint_init+0x60>)
     106:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     108:	4b11      	ldr	r3, [pc, #68]	; (150 <_system_extint_init+0x64>)
     10a:	2005      	movs	r0, #5
     10c:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     10e:	4a11      	ldr	r2, [pc, #68]	; (154 <_system_extint_init+0x68>)
     110:	2301      	movs	r3, #1
     112:	7811      	ldrb	r1, [r2, #0]
     114:	430b      	orrs	r3, r1
     116:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     118:	7853      	ldrb	r3, [r2, #1]
     11a:	4c0e      	ldr	r4, [pc, #56]	; (154 <_system_extint_init+0x68>)
     11c:	b25b      	sxtb	r3, r3
     11e:	2b00      	cmp	r3, #0
     120:	dbfa      	blt.n	118 <_system_extint_init+0x2c>
     122:	2240      	movs	r2, #64	; 0x40
     124:	4b0c      	ldr	r3, [pc, #48]	; (158 <_system_extint_init+0x6c>)
     126:	480d      	ldr	r0, [pc, #52]	; (15c <_system_extint_init+0x70>)
     128:	2100      	movs	r1, #0
     12a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     12c:	4b0c      	ldr	r3, [pc, #48]	; (160 <_system_extint_init+0x74>)
     12e:	2210      	movs	r2, #16
     130:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     132:	7822      	ldrb	r2, [r4, #0]
     134:	2302      	movs	r3, #2
     136:	4313      	orrs	r3, r2
     138:	7023      	strb	r3, [r4, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     13a:	7863      	ldrb	r3, [r4, #1]
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     13c:	b25b      	sxtb	r3, r3
     13e:	2b00      	cmp	r3, #0
     140:	dbfb      	blt.n	13a <_system_extint_init+0x4e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     142:	b002      	add	sp, #8
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	40000400 	.word	0x40000400
     14c:	00001ef5 	.word	0x00001ef5
     150:	00001f59 	.word	0x00001f59
     154:	40001800 	.word	0x40001800
     158:	000032c5 	.word	0x000032c5
     15c:	200002b0 	.word	0x200002b0
     160:	e000e100 	.word	0xe000e100

00000164 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     164:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     166:	2201      	movs	r2, #1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     168:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     16a:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
     16c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     16e:	2302      	movs	r3, #2
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     170:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     172:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     174:	72c3      	strb	r3, [r0, #11]
}
     176:	4770      	bx	lr

00000178 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     178:	b5f0      	push	{r4, r5, r6, r7, lr}
     17a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     17c:	466a      	mov	r2, sp
     17e:	2300      	movs	r3, #0
     180:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     182:	70d3      	strb	r3, [r2, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     184:	684b      	ldr	r3, [r1, #4]

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     186:	1c05      	adds	r5, r0, #0
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     188:	7013      	strb	r3, [r2, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     18a:	7a0b      	ldrb	r3, [r1, #8]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     18c:	7808      	ldrb	r0, [r1, #0]
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     18e:	7093      	strb	r3, [r2, #2]

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     190:	1c0c      	adds	r4, r1, #0
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <extint_chan_set_config+0x74>)
     194:	4669      	mov	r1, sp
     196:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     198:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     19a:	2d1f      	cmp	r5, #31
     19c:	d800      	bhi.n	1a0 <extint_chan_set_config+0x28>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     19e:	4b14      	ldr	r3, [pc, #80]	; (1f0 <extint_chan_set_config+0x78>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1a0:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1a2:	7aa2      	ldrb	r2, [r4, #10]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1a4:	4029      	ands	r1, r5
     1a6:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1a8:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1aa:	2a00      	cmp	r2, #0
     1ac:	d001      	beq.n	1b2 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     1ae:	2208      	movs	r2, #8
     1b0:	4310      	orrs	r0, r2
     1b2:	08ea      	lsrs	r2, r5, #3
     1b4:	0092      	lsls	r2, r2, #2
     1b6:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1b8:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1ba:	270f      	movs	r7, #15
     1bc:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1be:	43be      	bics	r6, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     1c0:	4088      	lsls	r0, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1c2:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1c4:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1c6:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1c8:	7a62      	ldrb	r2, [r4, #9]
     1ca:	2a00      	cmp	r2, #0
     1cc:	d106      	bne.n	1dc <extint_chan_set_config+0x64>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     1ce:	695a      	ldr	r2, [r3, #20]
     1d0:	2101      	movs	r1, #1
     1d2:	40a9      	lsls	r1, r5
     1d4:	438a      	bics	r2, r1
     1d6:	615a      	str	r2, [r3, #20]
	}
}
     1d8:	b003      	add	sp, #12
     1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     1dc:	2101      	movs	r1, #1
     1de:	695a      	ldr	r2, [r3, #20]
     1e0:	40a9      	lsls	r1, r5
     1e2:	1c0d      	adds	r5, r1, #0
     1e4:	4315      	orrs	r5, r2
     1e6:	615d      	str	r5, [r3, #20]
     1e8:	e7f6      	b.n	1d8 <extint_chan_set_config+0x60>
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	00002031 	.word	0x00002031
     1f0:	40001800 	.word	0x40001800

000001f4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f6:	464d      	mov	r5, r9
     1f8:	4644      	mov	r4, r8
     1fa:	465f      	mov	r7, fp
     1fc:	4656      	mov	r6, sl
     1fe:	b4f0      	push	{r4, r5, r6, r7}
     200:	4688      	mov	r8, r1
     202:	1c05      	adds	r5, r0, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     204:	6801      	ldr	r1, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     206:	4640      	mov	r0, r8
     208:	8840      	ldrh	r0, [r0, #2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     20a:	2207      	movs	r2, #7
     20c:	4681      	mov	r9, r0
     20e:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     210:	421a      	tst	r2, r3
     212:	d1fc      	bne.n	20e <_i2c_master_write_packet+0x1a>

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
     214:	4642      	mov	r2, r8
     216:	7a53      	ldrb	r3, [r2, #9]
     218:	2b00      	cmp	r3, #0
     21a:	d000      	beq.n	21e <_i2c_master_write_packet+0x2a>
     21c:	e07a      	b.n	314 <_i2c_master_write_packet+0x120>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     21e:	684a      	ldr	r2, [r1, #4]
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <_i2c_master_write_packet+0x17c>)

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     222:	4640      	mov	r0, r8
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     224:	4013      	ands	r3, r2
     226:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     228:	7a03      	ldrb	r3, [r0, #8]
     22a:	2b00      	cmp	r3, #0
     22c:	d064      	beq.n	2f8 <_i2c_master_write_packet+0x104>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     22e:	7a42      	ldrb	r2, [r0, #9]
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     232:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     234:	005b      	lsls	r3, r3, #1
     236:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     238:	2280      	movs	r2, #128	; 0x80
     23a:	0212      	lsls	r2, r2, #8
     23c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     23e:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     240:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     242:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     244:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     246:	2602      	movs	r6, #2
     248:	e007      	b.n	25a <_i2c_master_write_packet+0x66>
     24a:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     24c:	4206      	tst	r6, r0
     24e:	d107      	bne.n	260 <_i2c_master_write_packet+0x6c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     250:	3301      	adds	r3, #1
     252:	8928      	ldrh	r0, [r5, #8]
     254:	b29b      	uxth	r3, r3
     256:	4298      	cmp	r0, r3
     258:	d955      	bls.n	306 <_i2c_master_write_packet+0x112>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     25a:	7e10      	ldrb	r0, [r2, #24]
     25c:	4204      	tst	r4, r0
     25e:	d0f4      	beq.n	24a <_i2c_master_write_packet+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     260:	7e10      	ldrb	r0, [r2, #24]
     262:	2302      	movs	r3, #2
     264:	4203      	tst	r3, r0
     266:	d100      	bne.n	26a <_i2c_master_write_packet+0x76>
     268:	e06e      	b.n	348 <_i2c_master_write_packet+0x154>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     26a:	7613      	strb	r3, [r2, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     26c:	8b52      	ldrh	r2, [r2, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     26e:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     270:	4213      	tst	r3, r2
     272:	d149      	bne.n	308 <_i2c_master_write_packet+0x114>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     274:	2020      	movs	r0, #32
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     276:	2300      	movs	r3, #0
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     278:	2228      	movs	r2, #40	; 0x28
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     27a:	4682      	mov	sl, r0
     27c:	468c      	mov	ip, r1
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     27e:	2707      	movs	r7, #7
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     280:	4693      	mov	fp, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     282:	2001      	movs	r0, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     284:	2602      	movs	r6, #2
     286:	1c19      	adds	r1, r3, #0
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     288:	4549      	cmp	r1, r9
     28a:	d100      	bne.n	28e <_i2c_master_write_packet+0x9a>
     28c:	e06a      	b.n	364 <_i2c_master_write_packet+0x170>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     28e:	4662      	mov	r2, ip
     290:	8b53      	ldrh	r3, [r2, #26]
     292:	4652      	mov	r2, sl
     294:	421a      	tst	r2, r3
     296:	d068      	beq.n	36a <_i2c_master_write_packet+0x176>
     298:	682a      	ldr	r2, [r5, #0]
     29a:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     29c:	421f      	tst	r7, r3
     29e:	d1fc      	bne.n	29a <_i2c_master_write_packet+0xa6>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     2a0:	4642      	mov	r2, r8
     2a2:	6852      	ldr	r2, [r2, #4]
     2a4:	5c53      	ldrb	r3, [r2, r1]
     2a6:	4662      	mov	r2, ip
     2a8:	445a      	add	r2, fp
     2aa:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2ac:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     2ae:	2300      	movs	r3, #0
     2b0:	e007      	b.n	2c2 <_i2c_master_write_packet+0xce>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     2b2:	7e14      	ldrb	r4, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2b4:	4226      	tst	r6, r4
     2b6:	d107      	bne.n	2c8 <_i2c_master_write_packet+0xd4>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     2b8:	3301      	adds	r3, #1
     2ba:	892c      	ldrh	r4, [r5, #8]
     2bc:	b29b      	uxth	r3, r3
     2be:	429c      	cmp	r4, r3
     2c0:	d94d      	bls.n	35e <_i2c_master_write_packet+0x16a>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2c2:	7e14      	ldrb	r4, [r2, #24]
     2c4:	4220      	tst	r0, r4
     2c6:	d0f4      	beq.n	2b2 <_i2c_master_write_packet+0xbe>
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     2c8:	4662      	mov	r2, ip
     2ca:	8b53      	ldrh	r3, [r2, #26]
     2cc:	2204      	movs	r2, #4
     2ce:	3101      	adds	r1, #1
     2d0:	421a      	tst	r2, r3
     2d2:	d0d9      	beq.n	288 <_i2c_master_write_packet+0x94>
     2d4:	4661      	mov	r1, ip
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     2d6:	221e      	movs	r2, #30
				break;
			}
		}

		if (module->send_stop) {
     2d8:	7aab      	ldrb	r3, [r5, #10]
     2da:	1c10      	adds	r0, r2, #0
     2dc:	2b00      	cmp	r3, #0
     2de:	d013      	beq.n	308 <_i2c_master_write_packet+0x114>
     2e0:	682c      	ldr	r4, [r5, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2e2:	2007      	movs	r0, #7
     2e4:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2e6:	4218      	tst	r0, r3
     2e8:	d1fc      	bne.n	2e4 <_i2c_master_write_packet+0xf0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     2ea:	6848      	ldr	r0, [r1, #4]
     2ec:	23c0      	movs	r3, #192	; 0xc0
     2ee:	029b      	lsls	r3, r3, #10
     2f0:	4303      	orrs	r3, r0
     2f2:	604b      	str	r3, [r1, #4]
     2f4:	1c10      	adds	r0, r2, #0
     2f6:	e007      	b.n	308 <_i2c_master_write_packet+0x114>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     2f8:	7a42      	ldrb	r2, [r0, #9]
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     2fa:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     2fc:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     2fe:	005b      	lsls	r3, r3, #1
     300:	4313      	orrs	r3, r2
     302:	624b      	str	r3, [r1, #36]	; 0x24
     304:	e79c      	b.n	240 <_i2c_master_write_packet+0x4c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     306:	2012      	movs	r0, #18
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     308:	bc3c      	pop	{r2, r3, r4, r5}
     30a:	4690      	mov	r8, r2
     30c:	4699      	mov	r9, r3
     30e:	46a2      	mov	sl, r4
     310:	46ab      	mov	fp, r5
     312:	bdf0      	pop	{r4, r5, r6, r7, pc}

	_i2c_master_wait_for_sync(module);

	/* Switch to high speed mode */
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     314:	7a93      	ldrb	r3, [r2, #10]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     316:	6848      	ldr	r0, [r1, #4]
     318:	2280      	movs	r2, #128	; 0x80
     31a:	02d2      	lsls	r2, r2, #11
     31c:	4302      	orrs	r2, r0
     31e:	604a      	str	r2, [r1, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     320:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     322:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     324:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     326:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     328:	2602      	movs	r6, #2
     32a:	e007      	b.n	33c <_i2c_master_write_packet+0x148>
     32c:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     32e:	4206      	tst	r6, r0
     330:	d107      	bne.n	342 <_i2c_master_write_packet+0x14e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     332:	3301      	adds	r3, #1
     334:	8928      	ldrh	r0, [r5, #8]
     336:	b29b      	uxth	r3, r3
     338:	4298      	cmp	r0, r3
     33a:	d902      	bls.n	342 <_i2c_master_write_packet+0x14e>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     33c:	7e10      	ldrb	r0, [r2, #24]
     33e:	4204      	tst	r4, r0
     340:	d0f4      	beq.n	32c <_i2c_master_write_packet+0x138>
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     342:	2301      	movs	r3, #1
     344:	760b      	strb	r3, [r1, #24]
     346:	e76a      	b.n	21e <_i2c_master_write_packet+0x2a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     348:	8b53      	ldrh	r3, [r2, #26]
     34a:	0758      	lsls	r0, r3, #29
     34c:	d400      	bmi.n	350 <_i2c_master_write_packet+0x15c>
     34e:	e791      	b.n	274 <_i2c_master_write_packet+0x80>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     350:	6851      	ldr	r1, [r2, #4]
     352:	23c0      	movs	r3, #192	; 0xc0
     354:	029b      	lsls	r3, r3, #10
     356:	430b      	orrs	r3, r1
     358:	6053      	str	r3, [r2, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     35a:	2018      	movs	r0, #24
     35c:	e7d4      	b.n	308 <_i2c_master_write_packet+0x114>
     35e:	4661      	mov	r1, ip
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     360:	2212      	movs	r2, #18
     362:	e7b9      	b.n	2d8 <_i2c_master_write_packet+0xe4>
     364:	4661      	mov	r1, ip
     366:	2200      	movs	r2, #0
     368:	e7b6      	b.n	2d8 <_i2c_master_write_packet+0xe4>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     36a:	2041      	movs	r0, #65	; 0x41
     36c:	e7cc      	b.n	308 <_i2c_master_write_packet+0x114>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	fffbffff 	.word	0xfffbffff

00000374 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	4644      	mov	r4, r8
     378:	464d      	mov	r5, r9
     37a:	465f      	mov	r7, fp
     37c:	4656      	mov	r6, sl
     37e:	b4f0      	push	{r4, r5, r6, r7}
     380:	4688      	mov	r8, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     382:	6801      	ldr	r1, [r0, #0]
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     384:	b083      	sub	sp, #12
	uint16_t tmp_data_length = packet->data_length;

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     386:	680b      	ldr	r3, [r1, #0]
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     388:	1c05      	adds	r5, r0, #0
	uint16_t tmp_data_length = packet->data_length;

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     38a:	011b      	lsls	r3, r3, #4

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     38c:	4640      	mov	r0, r8

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     38e:	0fdb      	lsrs	r3, r3, #31

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     390:	8844      	ldrh	r4, [r0, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     392:	9301      	str	r3, [sp, #4]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     394:	7a43      	ldrb	r3, [r0, #9]
     396:	2b00      	cmp	r3, #0
     398:	d000      	beq.n	39c <_i2c_master_read_packet+0x28>
     39a:	e076      	b.n	48a <STACK_SIZE+0x8a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     39c:	684a      	ldr	r2, [r1, #4]
     39e:	4b82      	ldr	r3, [pc, #520]	; (5a8 <STACK_SIZE+0x1a8>)
     3a0:	4013      	ands	r3, r2
     3a2:	604b      	str	r3, [r1, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     3a4:	4642      	mov	r2, r8
     3a6:	7a13      	ldrb	r3, [r2, #8]
     3a8:	2b00      	cmp	r3, #0
     3aa:	d036      	beq.n	41a <STACK_SIZE+0x1a>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3ac:	4640      	mov	r0, r8
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3ae:	7a52      	ldrb	r2, [r2, #9]
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3b0:	8803      	ldrh	r3, [r0, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3b2:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3b4:	005b      	lsls	r3, r3, #1
     3b6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	0212      	lsls	r2, r2, #8
     3bc:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     3be:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3c0:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     3c2:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3c4:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3c6:	2702      	movs	r7, #2
     3c8:	e007      	b.n	3da <_i2c_master_read_packet+0x66>
     3ca:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3cc:	4207      	tst	r7, r0
     3ce:	d107      	bne.n	3e0 <_i2c_master_read_packet+0x6c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     3d0:	3301      	adds	r3, #1
     3d2:	8928      	ldrh	r0, [r5, #8]
     3d4:	b29b      	uxth	r3, r3
     3d6:	4298      	cmp	r0, r3
     3d8:	d94b      	bls.n	472 <STACK_SIZE+0x72>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3da:	7e10      	ldrb	r0, [r2, #24]
     3dc:	4206      	tst	r6, r0
     3de:	d0f4      	beq.n	3ca <_i2c_master_read_packet+0x56>

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     3e0:	684a      	ldr	r2, [r1, #4]
     3e2:	4b71      	ldr	r3, [pc, #452]	; (5a8 <STACK_SIZE+0x1a8>)
     3e4:	4013      	ands	r3, r2
     3e6:	604b      	str	r3, [r1, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3e8:	682b      	ldr	r3, [r5, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     3ea:	2202      	movs	r2, #2
     3ec:	7e18      	ldrb	r0, [r3, #24]
     3ee:	4202      	tst	r2, r0
     3f0:	d100      	bne.n	3f4 <_i2c_master_read_packet+0x80>
     3f2:	e0b8      	b.n	566 <STACK_SIZE+0x166>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     3f4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3f6:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     3f8:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3fa:	421a      	tst	r2, r3
     3fc:	d13e      	bne.n	47c <STACK_SIZE+0x7c>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     3fe:	4643      	mov	r3, r8
     400:	7a5a      	ldrb	r2, [r3, #9]
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     402:	2301      	movs	r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     404:	0392      	lsls	r2, r2, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     406:	431a      	orrs	r2, r3
     408:	4643      	mov	r3, r8
     40a:	8818      	ldrh	r0, [r3, #0]
     40c:	2378      	movs	r3, #120	; 0x78
     40e:	0a00      	lsrs	r0, r0, #8
     410:	4303      	orrs	r3, r0
     412:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     414:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     416:	624b      	str	r3, [r1, #36]	; 0x24
     418:	e008      	b.n	42c <STACK_SIZE+0x2c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     41a:	4643      	mov	r3, r8
     41c:	8812      	ldrh	r2, [r2, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     41e:	7a5b      	ldrb	r3, [r3, #9]
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     420:	0052      	lsls	r2, r2, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     422:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     424:	4313      	orrs	r3, r2
     426:	2201      	movs	r2, #1
     428:	4313      	orrs	r3, r2
     42a:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     42c:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     42e:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     430:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     432:	2702      	movs	r7, #2
     434:	e007      	b.n	446 <STACK_SIZE+0x46>
     436:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     438:	4207      	tst	r7, r0
     43a:	d107      	bne.n	44c <STACK_SIZE+0x4c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     43c:	3301      	adds	r3, #1
     43e:	8928      	ldrh	r0, [r5, #8]
     440:	b29b      	uxth	r3, r3
     442:	4298      	cmp	r0, r3
     444:	d915      	bls.n	472 <STACK_SIZE+0x72>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     446:	7e10      	ldrb	r0, [r2, #24]
     448:	4206      	tst	r6, r0
     44a:	d0f4      	beq.n	436 <STACK_SIZE+0x36>

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     44c:	684a      	ldr	r2, [r1, #4]
     44e:	4b56      	ldr	r3, [pc, #344]	; (5a8 <STACK_SIZE+0x1a8>)
     450:	4013      	ands	r3, r2
     452:	604b      	str	r3, [r1, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     454:	682b      	ldr	r3, [r5, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     456:	2202      	movs	r2, #2
     458:	7e18      	ldrb	r0, [r3, #24]
     45a:	4202      	tst	r2, r0
     45c:	d12f      	bne.n	4be <STACK_SIZE+0xbe>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     45e:	8b5a      	ldrh	r2, [r3, #26]
     460:	0750      	lsls	r0, r2, #29
     462:	d531      	bpl.n	4c8 <STACK_SIZE+0xc8>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     464:	6859      	ldr	r1, [r3, #4]
     466:	22c0      	movs	r2, #192	; 0xc0
     468:	0292      	lsls	r2, r2, #10
     46a:	430a      	orrs	r2, r1
     46c:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     46e:	2018      	movs	r0, #24
     470:	e004      	b.n	47c <STACK_SIZE+0x7c>

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     472:	684a      	ldr	r2, [r1, #4]
     474:	4b4c      	ldr	r3, [pc, #304]	; (5a8 <STACK_SIZE+0x1a8>)
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     476:	2012      	movs	r0, #18

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     478:	4013      	ands	r3, r2
     47a:	604b      	str	r3, [r1, #4]
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     47c:	b003      	add	sp, #12
     47e:	bc3c      	pop	{r2, r3, r4, r5}
     480:	4690      	mov	r8, r2
     482:	4699      	mov	r9, r3
     484:	46a2      	mov	sl, r4
     486:	46ab      	mov	fp, r5
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;

	/* Switch to high speed mode */
	if (packet->high_speed) {
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     48a:	7a83      	ldrb	r3, [r0, #10]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     48c:	2280      	movs	r2, #128	; 0x80
     48e:	6848      	ldr	r0, [r1, #4]
     490:	02d2      	lsls	r2, r2, #11
     492:	4302      	orrs	r2, r0
     494:	604a      	str	r2, [r1, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     496:	624b      	str	r3, [r1, #36]	; 0x24
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     498:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     49a:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     49c:	2601      	movs	r6, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     49e:	2702      	movs	r7, #2
     4a0:	e007      	b.n	4b2 <STACK_SIZE+0xb2>
     4a2:	7e10      	ldrb	r0, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4a4:	4207      	tst	r7, r0
     4a6:	d107      	bne.n	4b8 <STACK_SIZE+0xb8>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4a8:	3301      	adds	r3, #1
     4aa:	8928      	ldrh	r0, [r5, #8]
     4ac:	b29b      	uxth	r3, r3
     4ae:	4298      	cmp	r0, r3
     4b0:	d902      	bls.n	4b8 <STACK_SIZE+0xb8>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4b2:	7e10      	ldrb	r0, [r2, #24]
     4b4:	4206      	tst	r6, r0
     4b6:	d0f4      	beq.n	4a2 <STACK_SIZE+0xa2>
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4b8:	2301      	movs	r3, #1
     4ba:	760b      	strb	r3, [r1, #24]
     4bc:	e76e      	b.n	39c <_i2c_master_read_packet+0x28>
	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4be:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4c0:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4c2:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4c4:	421a      	tst	r2, r3
     4c6:	d1d9      	bne.n	47c <STACK_SIZE+0x7c>
     4c8:	3c01      	subs	r4, #1
     4ca:	b2a4      	uxth	r4, r4
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     4cc:	4837      	ldr	r0, [pc, #220]	; (5ac <STACK_SIZE+0x1ac>)
     4ce:	46a4      	mov	ip, r4
     4d0:	4663      	mov	r3, ip
     4d2:	4682      	mov	sl, r0
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4d4:	2220      	movs	r2, #32
     4d6:	468c      	mov	ip, r1
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     4d8:	2400      	movs	r4, #0
	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4da:	4693      	mov	fp, r2
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4dc:	2707      	movs	r7, #7

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4de:	2001      	movs	r0, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4e0:	2602      	movs	r6, #2
     4e2:	1c19      	adds	r1, r3, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     4e4:	4551      	cmp	r1, sl
     4e6:	d02c      	beq.n	542 <STACK_SIZE+0x142>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4e8:	4662      	mov	r2, ip
     4ea:	8b53      	ldrh	r3, [r2, #26]
     4ec:	465a      	mov	r2, fp
     4ee:	421a      	tst	r2, r3
     4f0:	d058      	beq.n	5a4 <STACK_SIZE+0x1a4>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     4f2:	7aeb      	ldrb	r3, [r5, #11]
     4f4:	2b00      	cmp	r3, #0
     4f6:	d004      	beq.n	502 <STACK_SIZE+0x102>
     4f8:	9b01      	ldr	r3, [sp, #4]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d038      	beq.n	570 <STACK_SIZE+0x170>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     4fe:	2901      	cmp	r1, #1
     500:	d038      	beq.n	574 <STACK_SIZE+0x174>
     502:	682a      	ldr	r2, [r5, #0]
     504:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     506:	421f      	tst	r7, r3
     508:	d1fc      	bne.n	504 <STACK_SIZE+0x104>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     50a:	1c63      	adds	r3, r4, #1
     50c:	b29b      	uxth	r3, r3
     50e:	2228      	movs	r2, #40	; 0x28
     510:	4699      	mov	r9, r3
     512:	4663      	mov	r3, ip
     514:	5c9b      	ldrb	r3, [r3, r2]
     516:	4642      	mov	r2, r8
     518:	6852      	ldr	r2, [r2, #4]
     51a:	5513      	strb	r3, [r2, r4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     51c:	682a      	ldr	r2, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     51e:	2300      	movs	r3, #0
     520:	e007      	b.n	532 <STACK_SIZE+0x132>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     522:	7e14      	ldrb	r4, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     524:	4226      	tst	r6, r4
     526:	d107      	bne.n	538 <STACK_SIZE+0x138>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     528:	3301      	adds	r3, #1
     52a:	892c      	ldrh	r4, [r5, #8]
     52c:	b29b      	uxth	r3, r3
     52e:	429c      	cmp	r4, r3
     530:	d928      	bls.n	584 <STACK_SIZE+0x184>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     532:	7e14      	ldrb	r4, [r2, #24]
     534:	4220      	tst	r0, r4
     536:	d0f4      	beq.n	522 <STACK_SIZE+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     538:	464c      	mov	r4, r9
     53a:	3901      	subs	r1, #1
     53c:	b289      	uxth	r1, r1
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     53e:	4551      	cmp	r1, sl
     540:	d1d2      	bne.n	4e8 <STACK_SIZE+0xe8>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     542:	7aab      	ldrb	r3, [r5, #10]
     544:	4661      	mov	r1, ip
     546:	682a      	ldr	r2, [r5, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     548:	46a1      	mov	r9, r4
     54a:	2000      	movs	r0, #0
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     54c:	2b00      	cmp	r3, #0
     54e:	d11e      	bne.n	58e <STACK_SIZE+0x18e>
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     550:	2407      	movs	r4, #7
     552:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     554:	421c      	tst	r4, r3
     556:	d1fc      	bne.n	552 <STACK_SIZE+0x152>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
     558:	2328      	movs	r3, #40	; 0x28
     55a:	5cca      	ldrb	r2, [r1, r3]
     55c:	4641      	mov	r1, r8
     55e:	684b      	ldr	r3, [r1, #4]
     560:	4649      	mov	r1, r9
     562:	545a      	strb	r2, [r3, r1]
     564:	e78a      	b.n	47c <STACK_SIZE+0x7c>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     566:	8b5a      	ldrh	r2, [r3, #26]
     568:	0750      	lsls	r0, r2, #29
     56a:	d500      	bpl.n	56e <STACK_SIZE+0x16e>
     56c:	e77a      	b.n	464 <STACK_SIZE+0x64>
     56e:	e746      	b.n	3fe <_i2c_master_read_packet+0x8a>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     570:	2900      	cmp	r1, #0
     572:	d1c6      	bne.n	502 <STACK_SIZE+0x102>
					((sclsm_flag) && (tmp_data_length == 1)))) {
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     574:	4662      	mov	r2, ip
     576:	6853      	ldr	r3, [r2, #4]
     578:	2280      	movs	r2, #128	; 0x80
     57a:	02d2      	lsls	r2, r2, #11
     57c:	4313      	orrs	r3, r2
     57e:	4662      	mov	r2, ip
     580:	6053      	str	r3, [r2, #4]
     582:	e7da      	b.n	53a <STACK_SIZE+0x13a>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     584:	7aab      	ldrb	r3, [r5, #10]
     586:	4661      	mov	r1, ip
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     588:	2012      	movs	r0, #18
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     58a:	2b00      	cmp	r3, #0
     58c:	d0e0      	beq.n	550 <STACK_SIZE+0x150>
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     58e:	2407      	movs	r4, #7
     590:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     592:	421c      	tst	r4, r3
     594:	d1fc      	bne.n	590 <STACK_SIZE+0x190>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     596:	684a      	ldr	r2, [r1, #4]
     598:	23c0      	movs	r3, #192	; 0xc0
     59a:	029b      	lsls	r3, r3, #10
     59c:	4313      	orrs	r3, r2
     59e:	604b      	str	r3, [r1, #4]
     5a0:	682a      	ldr	r2, [r5, #0]
     5a2:	e7d5      	b.n	550 <STACK_SIZE+0x150>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     5a4:	2041      	movs	r0, #65	; 0x41
     5a6:	e769      	b.n	47c <STACK_SIZE+0x7c>
     5a8:	fffbffff 	.word	0xfffbffff
     5ac:	0000ffff 	.word	0x0000ffff

000005b0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b2:	464d      	mov	r5, r9
     5b4:	4644      	mov	r4, r8
     5b6:	465f      	mov	r7, fp
     5b8:	4656      	mov	r6, sl
     5ba:	b4f0      	push	{r4, r5, r6, r7}
     5bc:	4680      	mov	r8, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     5be:	6001      	str	r1, [r0, #0]
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5c0:	1c0c      	adds	r4, r1, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5c2:	1c08      	adds	r0, r1, #0
     5c4:	4969      	ldr	r1, [pc, #420]	; (76c <i2c_master_init+0x1bc>)
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5c6:	b085      	sub	sp, #20
     5c8:	1c15      	adds	r5, r2, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5ca:	4689      	mov	r9, r1
     5cc:	4788      	blx	r1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5ce:	2701      	movs	r7, #1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5d0:	4b67      	ldr	r3, [pc, #412]	; (770 <i2c_master_init+0x1c0>)
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5d2:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5d4:	1c3e      	adds	r6, r7, #0
     5d6:	6a19      	ldr	r1, [r3, #32]
     5d8:	4096      	lsls	r6, r2
     5da:	1c32      	adds	r2, r6, #0
     5dc:	430a      	orrs	r2, r1
     5de:	621a      	str	r2, [r3, #32]
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e0:	1c06      	adds	r6, r0, #0
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5e2:	7b2b      	ldrb	r3, [r5, #12]
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e4:	360e      	adds	r6, #14
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5e6:	4669      	mov	r1, sp
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5e8:	b2f6      	uxtb	r6, r6
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5ec:	1c30      	adds	r0, r6, #0
     5ee:	4b61      	ldr	r3, [pc, #388]	; (774 <i2c_master_init+0x1c4>)
     5f0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5f2:	1c30      	adds	r0, r6, #0
     5f4:	4b60      	ldr	r3, [pc, #384]	; (778 <i2c_master_init+0x1c8>)
     5f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5f8:	4b60      	ldr	r3, [pc, #384]	; (77c <i2c_master_init+0x1cc>)
     5fa:	7b28      	ldrb	r0, [r5, #12]
     5fc:	2100      	movs	r1, #0
     5fe:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     600:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     602:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     604:	079a      	lsls	r2, r3, #30
     606:	d506      	bpl.n	616 <i2c_master_init+0x66>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     608:	b005      	add	sp, #20
     60a:	bc3c      	pop	{r2, r3, r4, r5}
     60c:	4690      	mov	r8, r2
     60e:	4699      	mov	r9, r3
     610:	46a2      	mov	sl, r4
     612:	46ab      	mov	fp, r5
     614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     616:	6826      	ldr	r6, [r4, #0]
		return STATUS_BUSY;
     618:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     61a:	403e      	ands	r6, r7
     61c:	d1f4      	bne.n	608 <i2c_master_init+0x58>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     61e:	2314      	movs	r3, #20
     620:	6023      	str	r3, [r4, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     622:	4641      	mov	r1, r8
     624:	680b      	ldr	r3, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     626:	ac02      	add	r4, sp, #8
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     628:	1c18      	adds	r0, r3, #0
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     62a:	469a      	mov	sl, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     62c:	47c8      	blx	r9
     62e:	4681      	mov	r9, r0

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     630:	69e8      	ldr	r0, [r5, #28]
     632:	2380      	movs	r3, #128	; 0x80
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     634:	7066      	strb	r6, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     636:	70e6      	strb	r6, [r4, #3]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     638:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     63a:	70a7      	strb	r7, [r4, #2]
	uint32_t pad1 = config->pinmux_pad1;
     63c:	6a2e      	ldr	r6, [r5, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     63e:	2800      	cmp	r0, #0
     640:	d07a      	beq.n	738 <i2c_master_init+0x188>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     642:	7020      	strb	r0, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     644:	4a4e      	ldr	r2, [pc, #312]	; (780 <i2c_master_init+0x1d0>)
     646:	0c00      	lsrs	r0, r0, #16
	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     648:	2302      	movs	r3, #2
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     64a:	b2c0      	uxtb	r0, r0
     64c:	1c21      	adds	r1, r4, #0
	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     64e:	7063      	strb	r3, [r4, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     650:	4693      	mov	fp, r2
     652:	4790      	blx	r2

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     654:	2e00      	cmp	r6, #0
     656:	d069      	beq.n	72c <i2c_master_init+0x17c>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     658:	7026      	strb	r6, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     65a:	0c36      	lsrs	r6, r6, #16
     65c:	b2f0      	uxtb	r0, r6
	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     65e:	2702      	movs	r7, #2
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     660:	1c21      	adds	r1, r4, #0
	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     662:	7067      	strb	r7, [r4, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     664:	47d8      	blx	fp

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     666:	8aab      	ldrh	r3, [r5, #20]
     668:	4646      	mov	r6, r8
     66a:	80f3      	strh	r3, [r6, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     66c:	8aeb      	ldrh	r3, [r5, #22]
     66e:	8133      	strh	r3, [r6, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     670:	7e2a      	ldrb	r2, [r5, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     672:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     674:	2a00      	cmp	r2, #0
     676:	d04d      	beq.n	714 <i2c_master_init+0x164>
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     678:	692a      	ldr	r2, [r5, #16]
     67a:	2a00      	cmp	r2, #0
     67c:	d000      	beq.n	680 <i2c_master_init+0xd0>
		tmp_ctrla |= config->start_hold_time;
     67e:	4313      	orrs	r3, r2

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     680:	2124      	movs	r1, #36	; 0x24
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     682:	68aa      	ldr	r2, [r5, #8]

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     684:	5c69      	ldrb	r1, [r5, r1]
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
		tmp_ctrla |= config->start_hold_time;
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     686:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     688:	2900      	cmp	r1, #0
     68a:	d002      	beq.n	692 <i2c_master_init+0xe2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     68c:	2180      	movs	r1, #128	; 0x80
     68e:	05c9      	lsls	r1, r1, #23
     690:	430b      	orrs	r3, r1
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     692:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     694:	2900      	cmp	r1, #0
     696:	d000      	beq.n	69a <i2c_master_init+0xea>
		tmp_ctrla |= config->inactive_timeout;
     698:	430b      	orrs	r3, r1
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     69a:	212c      	movs	r1, #44	; 0x2c
     69c:	5c69      	ldrb	r1, [r5, r1]
     69e:	2900      	cmp	r1, #0
     6a0:	d03f      	beq.n	722 <i2c_master_init+0x172>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     6a2:	2280      	movs	r2, #128	; 0x80
     6a4:	0512      	lsls	r2, r2, #20
     6a6:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     6a8:	222d      	movs	r2, #45	; 0x2d
     6aa:	5caa      	ldrb	r2, [r5, r2]
     6ac:	2a00      	cmp	r2, #0
     6ae:	d002      	beq.n	6b6 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     6b0:	2280      	movs	r2, #128	; 0x80
     6b2:	0412      	lsls	r2, r2, #16
     6b4:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     6b6:	222e      	movs	r2, #46	; 0x2e
     6b8:	5caa      	ldrb	r2, [r5, r2]
     6ba:	2a00      	cmp	r2, #0
     6bc:	d002      	beq.n	6c4 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     6be:	2280      	movs	r2, #128	; 0x80
     6c0:	03d2      	lsls	r2, r2, #15
     6c2:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     6c4:	4656      	mov	r6, sl
     6c6:	6832      	ldr	r2, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6c8:	492e      	ldr	r1, [pc, #184]	; (784 <i2c_master_init+0x1d4>)
	if (config->master_scl_low_extend_timeout) {
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     6ca:	4313      	orrs	r3, r2
     6cc:	6033      	str	r3, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     6ce:	2380      	movs	r3, #128	; 0x80
     6d0:	005b      	lsls	r3, r3, #1
     6d2:	6073      	str	r3, [r6, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6d4:	464b      	mov	r3, r9
     6d6:	330e      	adds	r3, #14
     6d8:	b2db      	uxtb	r3, r3
     6da:	1c18      	adds	r0, r3, #0
     6dc:	4699      	mov	r9, r3
     6de:	468b      	mov	fp, r1
     6e0:	4788      	blx	r1
     6e2:	1c06      	adds	r6, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
     6e4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6e6:	682a      	ldr	r2, [r5, #0]
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6e8:	4b27      	ldr	r3, [pc, #156]	; (788 <i2c_master_init+0x1d8>)
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6ea:	27fa      	movs	r7, #250	; 0xfa
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6ec:	4927      	ldr	r1, [pc, #156]	; (78c <i2c_master_init+0x1dc>)
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6ee:	00bf      	lsls	r7, r7, #2
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6f0:	4370      	muls	r0, r6
	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
     6f2:	4357      	muls	r7, r2
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6f4:	4698      	mov	r8, r3
     6f6:	4798      	blx	r3
     6f8:	300a      	adds	r0, #10
     6fa:	4378      	muls	r0, r7
	int32_t  denominator = 2*fscl;
     6fc:	007c      	lsls	r4, r7, #1

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     6fe:	1a30      	subs	r0, r6, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
     700:	1900      	adds	r0, r0, r4
     702:	1c21      	adds	r1, r4, #0
     704:	3801      	subs	r0, #1
     706:	4b22      	ldr	r3, [pc, #136]	; (790 <i2c_master_init+0x1e0>)
     708:	4798      	blx	r3
     70a:	1e04      	subs	r4, r0, #0

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     70c:	2cff      	cmp	r4, #255	; 0xff
     70e:	d918      	bls.n	742 <i2c_master_init+0x192>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     710:	2040      	movs	r0, #64	; 0x40
     712:	e779      	b.n	608 <i2c_master_init+0x58>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     714:	4b1f      	ldr	r3, [pc, #124]	; (794 <i2c_master_init+0x1e4>)
     716:	789b      	ldrb	r3, [r3, #2]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     718:	401f      	ands	r7, r3
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     71a:	1e7b      	subs	r3, r7, #1
     71c:	419f      	sbcs	r7, r3
     71e:	01fb      	lsls	r3, r7, #7
     720:	e7aa      	b.n	678 <i2c_master_init+0xc8>
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     722:	2180      	movs	r1, #128	; 0x80
     724:	0489      	lsls	r1, r1, #18
     726:	428a      	cmp	r2, r1
     728:	d1be      	bne.n	6a8 <i2c_master_init+0xf8>
     72a:	e7ba      	b.n	6a2 <i2c_master_init+0xf2>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     72c:	4650      	mov	r0, sl
     72e:	2101      	movs	r1, #1
     730:	4b19      	ldr	r3, [pc, #100]	; (798 <i2c_master_init+0x1e8>)
     732:	4798      	blx	r3
     734:	1c06      	adds	r6, r0, #0
     736:	e78f      	b.n	658 <i2c_master_init+0xa8>
	uint32_t pad0 = config->pinmux_pad0;
	uint32_t pad1 = config->pinmux_pad1;

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     738:	4650      	mov	r0, sl
     73a:	2100      	movs	r1, #0
     73c:	4b16      	ldr	r3, [pc, #88]	; (798 <i2c_master_init+0x1e8>)
     73e:	4798      	blx	r3
     740:	e77f      	b.n	642 <i2c_master_init+0x92>
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     742:	4648      	mov	r0, r9
     744:	47d8      	blx	fp
     746:	686b      	ldr	r3, [r5, #4]
     748:	21fa      	movs	r1, #250	; 0xfa
     74a:	00c9      	lsls	r1, r1, #3
     74c:	4359      	muls	r1, r3
     74e:	1e4b      	subs	r3, r1, #1
     750:	1818      	adds	r0, r3, r0
     752:	47c0      	blx	r8
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     754:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     756:	28ff      	cmp	r0, #255	; 0xff
     758:	d8da      	bhi.n	710 <i2c_master_init+0x160>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     75a:	23ff      	movs	r3, #255	; 0xff
     75c:	0400      	lsls	r0, r0, #16
     75e:	041b      	lsls	r3, r3, #16
     760:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     762:	4304      	orrs	r4, r0
     764:	4656      	mov	r6, sl
     766:	60f4      	str	r4, [r6, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     768:	2000      	movs	r0, #0
     76a:	e74d      	b.n	608 <i2c_master_init+0x58>
     76c:	0000196d 	.word	0x0000196d
     770:	40000400 	.word	0x40000400
     774:	00001ef5 	.word	0x00001ef5
     778:	00001f59 	.word	0x00001f59
     77c:	000018a9 	.word	0x000018a9
     780:	00002031 	.word	0x00002031
     784:	00001f89 	.word	0x00001f89
     788:	000025a9 	.word	0x000025a9
     78c:	3b9aca00 	.word	0x3b9aca00
     790:	00002645 	.word	0x00002645
     794:	41002000 	.word	0x41002000
     798:	000018f5 	.word	0x000018f5

0000079c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     79c:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     79e:	2301      	movs	r3, #1
     7a0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7a2:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
     7a4:	4b01      	ldr	r3, [pc, #4]	; (7ac <i2c_master_read_packet_wait+0x10>)
     7a6:	4798      	blx	r3
}
     7a8:	bd08      	pop	{r3, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00000375 	.word	0x00000375

000007b0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7b0:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     7b2:	2301      	movs	r3, #1
     7b4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7b6:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <i2c_master_write_packet_wait+0x10>)
     7ba:	4798      	blx	r3
}
     7bc:	bd08      	pop	{r3, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	000001f5 	.word	0x000001f5
     7c4:	00000000 	.word	0x00000000

000007c8 <resetAndInitialize>:
	.Rotation_z = 9
};


int resetAndInitialize(slave_twi_config_t* slave_config)
{
     7c8:	b5d0      	push	{r4, r6, r7, lr}
     7ca:	b094      	sub	sp, #80	; 0x50
     7cc:	1c06      	adds	r6, r0, #0
	int status, readData[20] = {0};
     7ce:	2100      	movs	r1, #0
     7d0:	2250      	movs	r2, #80	; 0x50
     7d2:	4668      	mov	r0, sp
     7d4:	4b36      	ldr	r3, [pc, #216]	; (8b0 <resetAndInitialize+0xe8>)
     7d6:	4798      	blx	r3
	//Power up / reset request
	status = drv_i2c_write(slave_config, EM_RESET_REQUEST_REGISTER, EM_RESET_REQUEST_FLAG);
     7d8:	1c30      	adds	r0, r6, #0
     7da:	219b      	movs	r1, #155	; 0x9b
     7dc:	2201      	movs	r2, #1
     7de:	4f35      	ldr	r7, [pc, #212]	; (8b4 <resetAndInitialize+0xec>)
     7e0:	47b8      	blx	r7
	if (status != STATUS_PASS)
     7e2:	2800      	cmp	r0, #0
     7e4:	d002      	beq.n	7ec <resetAndInitialize+0x24>
	{
		return STATUS_FAIL;
     7e6:	2001      	movs	r0, #1
	if (status != STATUS_PASS)
	{
		return STATUS_FAIL;
	}
	return STATUS_PASS;
}
     7e8:	b014      	add	sp, #80	; 0x50
     7ea:	bdd0      	pop	{r4, r6, r7, pc}
	{
		return STATUS_FAIL;
	}	
	//Read SW1_Int over and over again until it is high, then the device is ready to go. 
	//TODO remove this delay
	delay_ms(1000);	//wait for the device to complete EEPROM upload
     7ec:	4b32      	ldr	r3, [pc, #200]	; (8b8 <resetAndInitialize+0xf0>)
     7ee:	2000      	movs	r0, #0
     7f0:	4798      	blx	r3
     7f2:	4b2a      	ldr	r3, [pc, #168]	; (89c <resetAndInitialize+0xd4>)
     7f4:	4a28      	ldr	r2, [pc, #160]	; (898 <resetAndInitialize+0xd0>)
     7f6:	4c31      	ldr	r4, [pc, #196]	; (8bc <resetAndInitialize+0xf4>)
     7f8:	2100      	movs	r1, #0
     7fa:	47a0      	blx	r4
     7fc:	4a28      	ldr	r2, [pc, #160]	; (8a0 <resetAndInitialize+0xd8>)
     7fe:	4b29      	ldr	r3, [pc, #164]	; (8a4 <resetAndInitialize+0xdc>)
     800:	4c2f      	ldr	r4, [pc, #188]	; (8c0 <resetAndInitialize+0xf8>)
     802:	1880      	adds	r0, r0, r2
     804:	4159      	adcs	r1, r3
     806:	4a28      	ldr	r2, [pc, #160]	; (8a8 <resetAndInitialize+0xe0>)
     808:	4b28      	ldr	r3, [pc, #160]	; (8ac <resetAndInitialize+0xe4>)
     80a:	47a0      	blx	r4
     80c:	4b2d      	ldr	r3, [pc, #180]	; (8c4 <resetAndInitialize+0xfc>)
     80e:	4798      	blx	r3
	
	status = drv_i2c_read(slave_config, EM_SENTRAL_STATUS_REGISTER, &readData[0], 1);
     810:	1c30      	adds	r0, r6, #0
     812:	2137      	movs	r1, #55	; 0x37
     814:	466a      	mov	r2, sp
     816:	2301      	movs	r3, #1
     818:	4c2b      	ldr	r4, [pc, #172]	; (8c8 <resetAndInitialize+0x100>)
     81a:	47a0      	blx	r4
	if (status != STATUS_PASS)
     81c:	2800      	cmp	r0, #0
     81e:	d1e2      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	else
	{
		debugStructure.statusMask = readData[0]; 
     820:	9b00      	ldr	r3, [sp, #0]
     822:	4a2a      	ldr	r2, [pc, #168]	; (8cc <resetAndInitialize+0x104>)
     824:	6013      	str	r3, [r2, #0]
		if (readData[0] == EM_EEPROM_SUCCESS_MASK)
     826:	2b0b      	cmp	r3, #11
     828:	d1dd      	bne.n	7e6 <resetAndInitialize+0x1e>
			return STATUS_FAIL;
		}
	}
	
	//#ifdef HPR
	if(settings.enableHPR == 1)
     82a:	4b29      	ldr	r3, [pc, #164]	; (8d0 <resetAndInitialize+0x108>)
     82c:	7c9b      	ldrb	r3, [r3, #18]
     82e:	2b00      	cmp	r3, #0
     830:	d010      	beq.n	854 <resetAndInitialize+0x8c>
	{
		//read the algorithm control register
		status = drv_i2c_read(slave_config, EM_ALGORITHM_CONTROL_REGISTER, &readData[0], 1);
     832:	1c30      	adds	r0, r6, #0
     834:	2154      	movs	r1, #84	; 0x54
     836:	466a      	mov	r2, sp
     838:	2301      	movs	r3, #1
     83a:	47a0      	blx	r4
		if (status != STATUS_PASS)
     83c:	2800      	cmp	r0, #0
     83e:	d1d2      	bne.n	7e6 <resetAndInitialize+0x1e>
		{
			return STATUS_FAIL;
		}
		readData[0] |= EM_HPR_OUTPUT_ENABLE_MASK;	//switch to head, pitch, roll mode
     840:	9b00      	ldr	r3, [sp, #0]
     842:	2204      	movs	r2, #4
     844:	431a      	orrs	r2, r3
     846:	9200      	str	r2, [sp, #0]
		//write back to register
		status = drv_i2c_write(slave_config, EM_ALGORITHM_CONTROL_REGISTER, readData[0]);
     848:	1c30      	adds	r0, r6, #0
     84a:	b2d2      	uxtb	r2, r2
     84c:	2154      	movs	r1, #84	; 0x54
     84e:	47b8      	blx	r7
		if (status != STATUS_PASS)
     850:	2800      	cmp	r0, #0
     852:	d1c8      	bne.n	7e6 <resetAndInitialize+0x1e>
		}
	}
	//#endif
	
	//mag rate
	status = drv_i2c_write(slave_config, EM_MAG_RATE_CONFIG_REGISTER, EM_MAG_OUPUT_DATA_RATE);
     854:	1c30      	adds	r0, r6, #0
     856:	2155      	movs	r1, #85	; 0x55
     858:	221e      	movs	r2, #30
     85a:	47b8      	blx	r7
	if (status != STATUS_PASS)
     85c:	2800      	cmp	r0, #0
     85e:	d1c2      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//accel rate
	status = drv_i2c_write(slave_config, EM_ACCEL_RATE_CONFIG_REGISTER, EM_ACCEL_OUPUT_DATA_RATE);
     860:	1c30      	adds	r0, r6, #0
     862:	2156      	movs	r1, #86	; 0x56
     864:	220a      	movs	r2, #10
     866:	47b8      	blx	r7
	if (status != STATUS_PASS)
     868:	2800      	cmp	r0, #0
     86a:	d1bc      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//gyro rate
	status = drv_i2c_write(slave_config, EM_GYRO_RATE_CONFIG_REGISTER, EM_GYRO_OUPUT_DATA_RATE);
     86c:	1c30      	adds	r0, r6, #0
     86e:	2157      	movs	r1, #87	; 0x57
     870:	2214      	movs	r2, #20
     872:	47b8      	blx	r7
	if (status != STATUS_PASS)
     874:	2800      	cmp	r0, #0
     876:	d1b6      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//enable events
	status = drv_i2c_write(slave_config, EM_INTERRUPT_CONFIG_REGISTER, EM_RESET_INT_FLAG);
     878:	1c30      	adds	r0, r6, #0
     87a:	2133      	movs	r1, #51	; 0x33
     87c:	2201      	movs	r2, #1
     87e:	47b8      	blx	r7
	if (status != STATUS_PASS)
     880:	2800      	cmp	r0, #0
     882:	d1b0      	bne.n	7e6 <resetAndInitialize+0x1e>
	{
		return STATUS_FAIL;
	}
	
	//run request
	status = drv_i2c_write(slave_config, EM_RUN_REQUEST_REGISTER, EM_RUN_REQUEST_FLAG);
     884:	1c30      	adds	r0, r6, #0
     886:	2134      	movs	r1, #52	; 0x34
     888:	2201      	movs	r2, #1
     88a:	47b8      	blx	r7
	int status, readData[20] = {0};
	//Power up / reset request
	status = drv_i2c_write(slave_config, EM_RESET_REQUEST_REGISTER, EM_RESET_REQUEST_FLAG);
	if (status != STATUS_PASS)
	{
		return STATUS_FAIL;
     88c:	1e43      	subs	r3, r0, #1
     88e:	4198      	sbcs	r0, r3
     890:	e7aa      	b.n	7e8 <resetAndInitialize+0x20>
     892:	46c0      	nop			; (mov r8, r8)
     894:	46c0      	nop			; (mov r8, r8)
     896:	46c0      	nop			; (mov r8, r8)
     898:	000003e8 	.word	0x000003e8
     89c:	00000000 	.word	0x00000000
     8a0:	00001b57 	.word	0x00001b57
     8a4:	00000000 	.word	0x00000000
     8a8:	00001b58 	.word	0x00001b58
     8ac:	00000000 	.word	0x00000000
     8b0:	000032c5 	.word	0x000032c5
     8b4:	00000c0d 	.word	0x00000c0d
     8b8:	00001e6d 	.word	0x00001e6d
     8bc:	00002749 	.word	0x00002749
     8c0:	00002709 	.word	0x00002709
     8c4:	20000001 	.word	0x20000001
     8c8:	00000c41 	.word	0x00000c41
     8cc:	20000130 	.word	0x20000130
     8d0:	20000098 	.word	0x20000098
     8d4:	46c0      	nop			; (mov r8, r8)
     8d6:	46c0      	nop			; (mov r8, r8)

000008d8 <sendButtonPressEvent>:
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
	pkt_SendRawPacket(outputDataBuffer, 18);	
}

void sendButtonPressEvent()
{
     8d8:	b510      	push	{r4, lr}
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     8da:	4c08      	ldr	r4, [pc, #32]	; (8fc <sendButtonPressEvent+0x24>)
     8dc:	2303      	movs	r3, #3
	outputDataBuffer[1] = PACKET_COMMAND_ID_BUTTON_PRESS;
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     8de:	4908      	ldr	r1, [pc, #32]	; (900 <sendButtonPressEvent+0x28>)
	pkt_SendRawPacket(outputDataBuffer, 18);	
}

void sendButtonPressEvent()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     8e0:	7023      	strb	r3, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_BUTTON_PRESS;
     8e2:	2315      	movs	r3, #21
     8e4:	7063      	strb	r3, [r4, #1]
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     8e6:	2210      	movs	r2, #16
     8e8:	1ca0      	adds	r0, r4, #2
     8ea:	3101      	adds	r1, #1
     8ec:	4b05      	ldr	r3, [pc, #20]	; (904 <sendButtonPressEvent+0x2c>)
     8ee:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 18);	
     8f0:	1c20      	adds	r0, r4, #0
     8f2:	2112      	movs	r1, #18
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <sendButtonPressEvent+0x30>)
     8f6:	4798      	blx	r3
}
     8f8:	bd10      	pop	{r4, pc}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	200000cc 	.word	0x200000cc
     900:	20000098 	.word	0x20000098
     904:	000032b3 	.word	0x000032b3
     908:	00000ca1 	.word	0x00000ca1

0000090c <updateImuData>:
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 27);	
}

void updateImuData()
{
     90c:	b570      	push	{r4, r5, r6, lr}
	uint8_t statusRegister = 0x00; 
	status_t status = drv_i2c_read(&em7180Config, 0x35, &statusRegister, 1);
     90e:	4c24      	ldr	r4, [pc, #144]	; (9a0 <updateImuData+0x94>)
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 27);	
}

void updateImuData()
{
     910:	b082      	sub	sp, #8
	uint8_t statusRegister = 0x00; 
     912:	2300      	movs	r3, #0
     914:	466a      	mov	r2, sp
     916:	7013      	strb	r3, [r2, #0]
	status_t status = drv_i2c_read(&em7180Config, 0x35, &statusRegister, 1);
     918:	1c20      	adds	r0, r4, #0
     91a:	2135      	movs	r1, #53	; 0x35
     91c:	2301      	movs	r3, #1
     91e:	4d21      	ldr	r5, [pc, #132]	; (9a4 <updateImuData+0x98>)
     920:	47a8      	blx	r5
	if(status == STATUS_PASS)
     922:	b2c0      	uxtb	r0, r0
     924:	2800      	cmp	r0, #0
     926:	d12f      	bne.n	988 <updateImuData+0x7c>
	{	
		//check the IMU status to confirm it's operational
		if ((statusRegister & 0x01 > 0) || (statusRegister & 0x02 > 0) )
     928:	466a      	mov	r2, sp
     92a:	7813      	ldrb	r3, [r2, #0]
     92c:	07da      	lsls	r2, r3, #31
     92e:	d42d      	bmi.n	98c <updateImuData+0x80>
			//reset the IMU, and skip this 
			resetAndInitialize(&em7180Config); 		
		}
		else
		{
			if(drv_i2c_read(&em7180Config, 0x00, &imuFrameData.Quaternion_x, 16) != STATUS_PASS)
     930:	4e1d      	ldr	r6, [pc, #116]	; (9a8 <updateImuData+0x9c>)
     932:	1c20      	adds	r0, r4, #0
     934:	2100      	movs	r1, #0
     936:	1c32      	adds	r2, r6, #0
     938:	2310      	movs	r3, #16
     93a:	47a8      	blx	r5
     93c:	2800      	cmp	r0, #0
     93e:	d003      	beq.n	948 <updateImuData+0x3c>
			{
				debugStructure.quatReadErrorCount++;	
     940:	4b1a      	ldr	r3, [pc, #104]	; (9ac <updateImuData+0xa0>)
     942:	689a      	ldr	r2, [r3, #8]
     944:	3201      	adds	r2, #1
     946:	609a      	str	r2, [r3, #8]
			}	
			if(drv_i2c_read(&em7180Config, 0x12, &imuFrameData.Magnetic_x, 12) != STATUS_PASS)
     948:	1c32      	adds	r2, r6, #0
     94a:	3210      	adds	r2, #16
     94c:	1c20      	adds	r0, r4, #0
     94e:	2112      	movs	r1, #18
     950:	230c      	movs	r3, #12
     952:	47a8      	blx	r5
     954:	2800      	cmp	r0, #0
     956:	d003      	beq.n	960 <updateImuData+0x54>
			{
				debugStructure.magReadErrorCount++;
     958:	4b14      	ldr	r3, [pc, #80]	; (9ac <updateImuData+0xa0>)
     95a:	68da      	ldr	r2, [r3, #12]
     95c:	3201      	adds	r2, #1
     95e:	60da      	str	r2, [r3, #12]
			}
			if(drv_i2c_read(&em7180Config, 0x1A, &imuFrameData.Acceleration_x, 12) != STATUS_PASS)
     960:	1c32      	adds	r2, r6, #0
     962:	3216      	adds	r2, #22
     964:	1c20      	adds	r0, r4, #0
     966:	211a      	movs	r1, #26
     968:	230c      	movs	r3, #12
     96a:	47a8      	blx	r5
     96c:	2800      	cmp	r0, #0
     96e:	d111      	bne.n	994 <updateImuData+0x88>
			{
				debugStructure.accelReadErrorCount++;
			}
			if(drv_i2c_read(&em7180Config, 0x22, &imuFrameData.Rotation_x, 12) != STATUS_PASS)
     970:	1c32      	adds	r2, r6, #0
     972:	321c      	adds	r2, #28
     974:	1c20      	adds	r0, r4, #0
     976:	2122      	movs	r1, #34	; 0x22
     978:	230c      	movs	r3, #12
     97a:	47a8      	blx	r5
     97c:	2800      	cmp	r0, #0
     97e:	d003      	beq.n	988 <updateImuData+0x7c>
			{
				debugStructure.gyroReadErrorCount++;
     980:	4b0a      	ldr	r3, [pc, #40]	; (9ac <updateImuData+0xa0>)
     982:	695a      	ldr	r2, [r3, #20]
     984:	3201      	adds	r2, #1
     986:	615a      	str	r2, [r3, #20]
			}	
		}
	}
}
     988:	b002      	add	sp, #8
     98a:	bd70      	pop	{r4, r5, r6, pc}
	{	
		//check the IMU status to confirm it's operational
		if ((statusRegister & 0x01 > 0) || (statusRegister & 0x02 > 0) )
		{
			//reset the IMU, and skip this 
			resetAndInitialize(&em7180Config); 		
     98c:	1c20      	adds	r0, r4, #0
     98e:	4b08      	ldr	r3, [pc, #32]	; (9b0 <updateImuData+0xa4>)
     990:	4798      	blx	r3
     992:	e7f9      	b.n	988 <updateImuData+0x7c>
			{
				debugStructure.magReadErrorCount++;
			}
			if(drv_i2c_read(&em7180Config, 0x1A, &imuFrameData.Acceleration_x, 12) != STATUS_PASS)
			{
				debugStructure.accelReadErrorCount++;
     994:	4b05      	ldr	r3, [pc, #20]	; (9ac <updateImuData+0xa0>)
     996:	691a      	ldr	r2, [r3, #16]
     998:	3201      	adds	r2, #1
     99a:	611a      	str	r2, [r3, #16]
     99c:	e7e8      	b.n	970 <updateImuData+0x64>
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	20000044 	.word	0x20000044
     9a4:	00000c41 	.word	0x00000c41
     9a8:	2000000c 	.word	0x2000000c
     9ac:	20000130 	.word	0x20000130
     9b0:	000007c9 	.word	0x000007c9

000009b4 <cmd_processPacket>:
//
/* all packets have the format
 <type(1B)><command id(1B)><payload(size dependant on command type)> 
*/
void cmd_processPacket(rawPacket_t* packet)
{
     9b4:	b538      	push	{r3, r4, r5, lr}
	//make sure the packet has enough bytes in it
	if(packet->payloadSize < 2)
     9b6:	23c8      	movs	r3, #200	; 0xc8
     9b8:	5ac3      	ldrh	r3, [r0, r3]
//
/* all packets have the format
 <type(1B)><command id(1B)><payload(size dependant on command type)> 
*/
void cmd_processPacket(rawPacket_t* packet)
{
     9ba:	1c04      	adds	r4, r0, #0
	//make sure the packet has enough bytes in it
	if(packet->payloadSize < 2)
     9bc:	2b01      	cmp	r3, #1
     9be:	d902      	bls.n	9c6 <cmd_processPacket+0x12>
		//if there's less than two bytes... its not a valid packet
		return; 
	}
	//check which type of packet it is.
	//we only care about master control packets. 
	if(packet->payload[0] == PACKET_TYPE_MASTER_CONTROL)
     9c0:	7802      	ldrb	r2, [r0, #0]
     9c2:	2a01      	cmp	r2, #1
     9c4:	d000      	beq.n	9c8 <cmd_processPacket+0x14>
					resetAndInitialize(&em7180Config);
				}
			break;		
		}
	}
}
     9c6:	bd38      	pop	{r3, r4, r5, pc}
	}
	//check which type of packet it is.
	//we only care about master control packets. 
	if(packet->payload[0] == PACKET_TYPE_MASTER_CONTROL)
	{
		switch(packet->payload[1])
     9c8:	7842      	ldrb	r2, [r0, #1]
     9ca:	3a11      	subs	r2, #17
     9cc:	b2d2      	uxtb	r2, r2
     9ce:	2a12      	cmp	r2, #18
     9d0:	d8f9      	bhi.n	9c6 <cmd_processPacket+0x12>
     9d2:	4968      	ldr	r1, [pc, #416]	; (b74 <cmd_processPacket+0x1c0>)
     9d4:	0092      	lsls	r2, r2, #2
     9d6:	588a      	ldr	r2, [r1, r2]
     9d8:	4697      	mov	pc, r2
				}
			break; 
			case PACKET_COMMAND_ID_CHANGE_BAUD:
				/*	don't check for ID, all sensors should work in same config	*/
				// 4 bytes are received in the order of LSB first
				settings.baud = ((uint32_t)packet->payload[2]) | ((uint32_t)packet->payload[3] << 8) 
     9da:	7881      	ldrb	r1, [r0, #2]
     9dc:	78c0      	ldrb	r0, [r0, #3]
								| ((uint32_t)packet->payload[4] << 16) | ((uint32_t)packet->payload[5] << 24);
     9de:	7922      	ldrb	r2, [r4, #4]
				}
			break; 
			case PACKET_COMMAND_ID_CHANGE_BAUD:
				/*	don't check for ID, all sensors should work in same config	*/
				// 4 bytes are received in the order of LSB first
				settings.baud = ((uint32_t)packet->payload[2]) | ((uint32_t)packet->payload[3] << 8) 
     9e0:	0200      	lsls	r0, r0, #8
								| ((uint32_t)packet->payload[4] << 16) | ((uint32_t)packet->payload[5] << 24);
     9e2:	7963      	ldrb	r3, [r4, #5]
     9e4:	0412      	lsls	r2, r2, #16
				}
			break; 
			case PACKET_COMMAND_ID_CHANGE_BAUD:
				/*	don't check for ID, all sensors should work in same config	*/
				// 4 bytes are received in the order of LSB first
				settings.baud = ((uint32_t)packet->payload[2]) | ((uint32_t)packet->payload[3] << 8) 
     9e6:	4302      	orrs	r2, r0
								| ((uint32_t)packet->payload[4] << 16) | ((uint32_t)packet->payload[5] << 24);
     9e8:	430a      	orrs	r2, r1
     9ea:	061b      	lsls	r3, r3, #24
     9ec:	431a      	orrs	r2, r3
				}
			break; 
			case PACKET_COMMAND_ID_CHANGE_BAUD:
				/*	don't check for ID, all sensors should work in same config	*/
				// 4 bytes are received in the order of LSB first
				settings.baud = ((uint32_t)packet->payload[2]) | ((uint32_t)packet->payload[3] << 8) 
     9ee:	4b62      	ldr	r3, [pc, #392]	; (b78 <cmd_processPacket+0x1c4>)
     9f0:	615a      	str	r2, [r3, #20]
								| ((uint32_t)packet->payload[4] << 16) | ((uint32_t)packet->payload[5] << 24);
				reConfigure_uart();
     9f2:	4b62      	ldr	r3, [pc, #392]	; (b7c <cmd_processPacket+0x1c8>)
     9f4:	4798      	blx	r3
			break;
     9f6:	e7e6      	b.n	9c6 <cmd_processPacket+0x12>
	{
		switch(packet->payload[1])
		{
			case PACKET_COMMAND_ID_UPDATE:
				//call function here to update the IMU data
				updateImuData(); 
     9f8:	4b61      	ldr	r3, [pc, #388]	; (b80 <cmd_processPacket+0x1cc>)
     9fa:	4798      	blx	r3
			break;
     9fc:	e7e3      	b.n	9c6 <cmd_processPacket+0x12>
			case PACKET_COMMAND_ID_UPDATE_FAKE:
				updateImuDataFake();	//increments the count of variables in the structure
			break;
			case PACKET_COMMAND_ID_GET_FRAME:
				//check if the ID matches the one assigned
				if(packet->payload[2] == settings.sensorId)
     9fe:	4b5e      	ldr	r3, [pc, #376]	; (b78 <cmd_processPacket+0x1c4>)
     a00:	7882      	ldrb	r2, [r0, #2]
     a02:	781b      	ldrb	r3, [r3, #0]
     a04:	4293      	cmp	r3, r2
     a06:	d1de      	bne.n	9c6 <cmd_processPacket+0x12>
	return STATUS_PASS;
}

void sendImuDataFrame()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     a08:	4c5e      	ldr	r4, [pc, #376]	; (b84 <cmd_processPacket+0x1d0>)
     a0a:	2203      	movs	r2, #3
     a0c:	7022      	strb	r2, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_FRAME_RESP;
     a0e:	2213      	movs	r2, #19
     a10:	7062      	strb	r2, [r4, #1]
	outputDataBuffer[2] = settings.sensorId;
	memcpy(outputDataBuffer+3,&imuFrameData,34);
     a12:	1ce0      	adds	r0, r4, #3

void sendImuDataFrame()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_FRAME_RESP;
	outputDataBuffer[2] = settings.sensorId;
     a14:	70a3      	strb	r3, [r4, #2]
	memcpy(outputDataBuffer+3,&imuFrameData,34);
     a16:	495c      	ldr	r1, [pc, #368]	; (b88 <cmd_processPacket+0x1d4>)
     a18:	2222      	movs	r2, #34	; 0x22
     a1a:	4b5c      	ldr	r3, [pc, #368]	; (b8c <cmd_processPacket+0x1d8>)
     a1c:	4798      	blx	r3
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 37);	
     a1e:	1c20      	adds	r0, r4, #0
     a20:	2125      	movs	r1, #37	; 0x25
     a22:	4b5b      	ldr	r3, [pc, #364]	; (b90 <cmd_processPacket+0x1dc>)
     a24:	4798      	blx	r3
     a26:	e7ce      	b.n	9c6 <cmd_processPacket+0x12>
					sendSetImuIdResponse();
				}				
			break;
			case PACKET_COMMAND_ID_SETUP_MODE:
				//This byte determines whether the device is in setup mode or not. 
				if(packet->payload[2] == 1)
     a28:	7883      	ldrb	r3, [r0, #2]
     a2a:	b2db      	uxtb	r3, r3
     a2c:	2b01      	cmp	r3, #1
     a2e:	d100      	bne.n	a32 <cmd_processPacket+0x7e>
     a30:	e096      	b.n	b60 <cmd_processPacket+0x1ac>
				{
					settings.setupModeEnabled = true;
				}
				else
				{
					settings.setupModeEnabled = false; 
     a32:	4b51      	ldr	r3, [pc, #324]	; (b78 <cmd_processPacket+0x1c4>)
     a34:	2200      	movs	r2, #0
     a36:	745a      	strb	r2, [r3, #17]
     a38:	e7c5      	b.n	9c6 <cmd_processPacket+0x12>
					sendImuDataFrame();
				}
			break; 
			case PACKET_COMMAND_ID_SET_IMU_ID:
				//confirm the packet size. 
				if(packet->payloadSize != 19)
     a3a:	2b13      	cmp	r3, #19
     a3c:	d1c3      	bne.n	9c6 <cmd_processPacket+0x12>
				{
					//invalid packet size
					return; 
				}
				//check that the serial numbers match
				if(memcmp(settings.serialNumber,(packet->payload)+2,16) == 0)
     a3e:	4d55      	ldr	r5, [pc, #340]	; (b94 <cmd_processPacket+0x1e0>)
     a40:	1c81      	adds	r1, r0, #2
     a42:	2210      	movs	r2, #16
     a44:	1c28      	adds	r0, r5, #0
     a46:	4b54      	ldr	r3, [pc, #336]	; (b98 <cmd_processPacket+0x1e4>)
     a48:	4798      	blx	r3
     a4a:	2800      	cmp	r0, #0
     a4c:	d1bb      	bne.n	9c6 <cmd_processPacket+0x12>
				{
					settings.sensorId = packet->payload[18];
     a4e:	7ca2      	ldrb	r2, [r4, #18]
     a50:	1e6b      	subs	r3, r5, #1
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 37);	
}
void sendSetImuIdResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     a52:	4c4c      	ldr	r4, [pc, #304]	; (b84 <cmd_processPacket+0x1d0>)
					return; 
				}
				//check that the serial numbers match
				if(memcmp(settings.serialNumber,(packet->payload)+2,16) == 0)
				{
					settings.sensorId = packet->payload[18];
     a54:	701a      	strb	r2, [r3, #0]
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 37);	
}
void sendSetImuIdResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     a56:	2303      	movs	r3, #3
     a58:	7023      	strb	r3, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_SET_IMU_ID_RESP;
     a5a:	2317      	movs	r3, #23
     a5c:	7063      	strb	r3, [r4, #1]
	memcpy(outputDataBuffer+2,settings.serialNumber,16);
     a5e:	1c29      	adds	r1, r5, #0
     a60:	1ca0      	adds	r0, r4, #2
     a62:	2210      	movs	r2, #16
     a64:	4b49      	ldr	r3, [pc, #292]	; (b8c <cmd_processPacket+0x1d8>)
     a66:	4798      	blx	r3
	pkt_SendRawPacket(outputDataBuffer, 18);	
     a68:	1c20      	adds	r0, r4, #0
     a6a:	2112      	movs	r1, #18
     a6c:	4b48      	ldr	r3, [pc, #288]	; (b90 <cmd_processPacket+0x1dc>)
     a6e:	4798      	blx	r3
     a70:	e7a9      	b.n	9c6 <cmd_processPacket+0x12>
					settings.setupModeEnabled = false; 
				}				
			break;
			case PACKET_COMMAND_ID_GET_STATUS:
				//check if the ID matches the one assigned
				if(packet->payload[2] == settings.sensorId)
     a72:	4b41      	ldr	r3, [pc, #260]	; (b78 <cmd_processPacket+0x1c4>)
     a74:	7882      	ldrb	r2, [r0, #2]
     a76:	781b      	ldrb	r3, [r3, #0]
     a78:	4293      	cmp	r3, r2
     a7a:	d1a4      	bne.n	9c6 <cmd_processPacket+0x12>
}


void sendGetStatusResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
     a7c:	4c41      	ldr	r4, [pc, #260]	; (b84 <cmd_processPacket+0x1d0>)
     a7e:	2203      	movs	r2, #3
     a80:	7022      	strb	r2, [r4, #0]
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_STATUS_RESP;
     a82:	2219      	movs	r2, #25
     a84:	7062      	strb	r2, [r4, #1]
	outputDataBuffer[2] = settings.sensorId;
	#ifdef ENABLE_DEBUG_DATA
	debugStructure.accelReadErrorCount++;
	#endif
	memcpy(outputDataBuffer+3,&debugStructure,24);
     a86:	1ce0      	adds	r0, r4, #3

void sendGetStatusResponse()
{
	outputDataBuffer[0] = PACKET_TYPE_IMU_SENSOR;
	outputDataBuffer[1] = PACKET_COMMAND_ID_GET_STATUS_RESP;
	outputDataBuffer[2] = settings.sensorId;
     a88:	70a3      	strb	r3, [r4, #2]
	#ifdef ENABLE_DEBUG_DATA
	debugStructure.accelReadErrorCount++;
	#endif
	memcpy(outputDataBuffer+3,&debugStructure,24);
     a8a:	4944      	ldr	r1, [pc, #272]	; (b9c <cmd_processPacket+0x1e8>)
     a8c:	2218      	movs	r2, #24
     a8e:	4b3f      	ldr	r3, [pc, #252]	; (b8c <cmd_processPacket+0x1d8>)
     a90:	4798      	blx	r3
	//delay_us(100);
	pkt_SendRawPacket(outputDataBuffer, 27);	
     a92:	1c20      	adds	r0, r4, #0
     a94:	211b      	movs	r1, #27
     a96:	4b3e      	ldr	r3, [pc, #248]	; (b90 <cmd_processPacket+0x1dc>)
     a98:	4798      	blx	r3
     a9a:	e794      	b.n	9c6 <cmd_processPacket+0x12>
	imuFrameData.Quaternion_z++;
}

void resetImuDataFake()
{
	imuFrameData.Quaternion_x = 0.1;
     a9c:	4b3a      	ldr	r3, [pc, #232]	; (b88 <cmd_processPacket+0x1d4>)
     a9e:	4a40      	ldr	r2, [pc, #256]	; (ba0 <cmd_processPacket+0x1ec>)
     aa0:	601a      	str	r2, [r3, #0]
	imuFrameData.Quaternion_y = 0.2;
     aa2:	4a40      	ldr	r2, [pc, #256]	; (ba4 <cmd_processPacket+0x1f0>)
     aa4:	605a      	str	r2, [r3, #4]
	imuFrameData.Quaternion_z = 0.3;
     aa6:	4a40      	ldr	r2, [pc, #256]	; (ba8 <cmd_processPacket+0x1f4>)
     aa8:	609a      	str	r2, [r3, #8]
	imuFrameData.Quaternion_w = 0.4;
     aaa:	4a40      	ldr	r2, [pc, #256]	; (bac <cmd_processPacket+0x1f8>)
     aac:	60da      	str	r2, [r3, #12]
	imuFrameData.Magnetic_x = 1;
     aae:	2201      	movs	r2, #1
     ab0:	821a      	strh	r2, [r3, #16]
	imuFrameData.Magnetic_y = 2;
     ab2:	2202      	movs	r2, #2
     ab4:	825a      	strh	r2, [r3, #18]
	imuFrameData.Magnetic_z = 3;
     ab6:	2203      	movs	r2, #3
     ab8:	829a      	strh	r2, [r3, #20]
	imuFrameData.Acceleration_x = 4;
     aba:	2204      	movs	r2, #4
     abc:	82da      	strh	r2, [r3, #22]
	imuFrameData.Acceleration_y = 5;
     abe:	2205      	movs	r2, #5
     ac0:	831a      	strh	r2, [r3, #24]
	imuFrameData.Acceleration_z = 6;
     ac2:	2206      	movs	r2, #6
     ac4:	835a      	strh	r2, [r3, #26]
	imuFrameData.Rotation_x = 7;
     ac6:	2207      	movs	r2, #7
     ac8:	839a      	strh	r2, [r3, #28]
	imuFrameData.Rotation_y = 8;
     aca:	2208      	movs	r2, #8
     acc:	83da      	strh	r2, [r3, #30]
	imuFrameData.Rotation_z = 9;
     ace:	2209      	movs	r2, #9
     ad0:	841a      	strh	r2, [r3, #32]
     ad2:	e778      	b.n	9c6 <cmd_processPacket+0x12>
	}
}

void updateImuDataFake()
{
	imuFrameData.Acceleration_x++;
     ad4:	4c2c      	ldr	r4, [pc, #176]	; (b88 <cmd_processPacket+0x1d4>)
	imuFrameData.Magnetic_y++;
	imuFrameData.Magnetic_z++;
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
     ad6:	21fe      	movs	r1, #254	; 0xfe
	}
}

void updateImuDataFake()
{
	imuFrameData.Acceleration_x++;
     ad8:	8ae3      	ldrh	r3, [r4, #22]
	imuFrameData.Magnetic_y++;
	imuFrameData.Magnetic_z++;
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
     ada:	4d35      	ldr	r5, [pc, #212]	; (bb0 <cmd_processPacket+0x1fc>)
	}
}

void updateImuDataFake()
{
	imuFrameData.Acceleration_x++;
     adc:	3301      	adds	r3, #1
     ade:	b29b      	uxth	r3, r3
     ae0:	82e3      	strh	r3, [r4, #22]
	imuFrameData.Acceleration_y++;
     ae2:	8b23      	ldrh	r3, [r4, #24]
	imuFrameData.Magnetic_y++;
	imuFrameData.Magnetic_z++;
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
     ae4:	0589      	lsls	r1, r1, #22
}

void updateImuDataFake()
{
	imuFrameData.Acceleration_x++;
	imuFrameData.Acceleration_y++;
     ae6:	3301      	adds	r3, #1
     ae8:	b29b      	uxth	r3, r3
     aea:	8323      	strh	r3, [r4, #24]
	imuFrameData.Acceleration_z++;
     aec:	8b63      	ldrh	r3, [r4, #26]
     aee:	3301      	adds	r3, #1
     af0:	b29b      	uxth	r3, r3
     af2:	8363      	strh	r3, [r4, #26]
	imuFrameData.Magnetic_x++;
     af4:	8a23      	ldrh	r3, [r4, #16]
     af6:	3301      	adds	r3, #1
     af8:	b29b      	uxth	r3, r3
     afa:	8223      	strh	r3, [r4, #16]
	imuFrameData.Magnetic_y++;
     afc:	8a63      	ldrh	r3, [r4, #18]
     afe:	3301      	adds	r3, #1
     b00:	b29b      	uxth	r3, r3
     b02:	8263      	strh	r3, [r4, #18]
	imuFrameData.Magnetic_z++;
     b04:	8aa3      	ldrh	r3, [r4, #20]
     b06:	3301      	adds	r3, #1
     b08:	b29b      	uxth	r3, r3
     b0a:	82a3      	strh	r3, [r4, #20]
	imuFrameData.Rotation_x++;
     b0c:	8ba3      	ldrh	r3, [r4, #28]
     b0e:	3301      	adds	r3, #1
     b10:	b29b      	uxth	r3, r3
     b12:	83a3      	strh	r3, [r4, #28]
	imuFrameData.Rotation_y++;
     b14:	8be3      	ldrh	r3, [r4, #30]
     b16:	3301      	adds	r3, #1
     b18:	b29b      	uxth	r3, r3
     b1a:	83e3      	strh	r3, [r4, #30]
	imuFrameData.Rotation_z++;
     b1c:	8c23      	ldrh	r3, [r4, #32]
     b1e:	3301      	adds	r3, #1
     b20:	b29b      	uxth	r3, r3
     b22:	8423      	strh	r3, [r4, #32]
	imuFrameData.Quaternion_w++;
     b24:	68e0      	ldr	r0, [r4, #12]
     b26:	47a8      	blx	r5
	imuFrameData.Quaternion_x++;
     b28:	21fe      	movs	r1, #254	; 0xfe
	imuFrameData.Magnetic_y++;
	imuFrameData.Magnetic_z++;
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
     b2a:	60e0      	str	r0, [r4, #12]
	imuFrameData.Quaternion_x++;
     b2c:	6820      	ldr	r0, [r4, #0]
     b2e:	0589      	lsls	r1, r1, #22
     b30:	47a8      	blx	r5
	imuFrameData.Quaternion_y++;
     b32:	21fe      	movs	r1, #254	; 0xfe
	imuFrameData.Magnetic_z++;
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
	imuFrameData.Quaternion_x++;
     b34:	6020      	str	r0, [r4, #0]
	imuFrameData.Quaternion_y++;
     b36:	6860      	ldr	r0, [r4, #4]
     b38:	0589      	lsls	r1, r1, #22
     b3a:	47a8      	blx	r5
	imuFrameData.Quaternion_z++;
     b3c:	21fe      	movs	r1, #254	; 0xfe
	imuFrameData.Rotation_x++;
	imuFrameData.Rotation_y++;
	imuFrameData.Rotation_z++;
	imuFrameData.Quaternion_w++;
	imuFrameData.Quaternion_x++;
	imuFrameData.Quaternion_y++;
     b3e:	6060      	str	r0, [r4, #4]
	imuFrameData.Quaternion_z++;
     b40:	68a0      	ldr	r0, [r4, #8]
     b42:	0589      	lsls	r1, r1, #22
     b44:	47a8      	blx	r5
     b46:	60a0      	str	r0, [r4, #8]
     b48:	e73d      	b.n	9c6 <cmd_processPacket+0x12>
								| ((uint32_t)packet->payload[4] << 16) | ((uint32_t)packet->payload[5] << 24);
				reConfigure_uart();
			break;
			case PACKET_COMMAND_ID_ENABLE_HPR:
				/*	don't check for ID, all sensors should work in same config	*/
				if(packet->payload[2] == 1)
     b4a:	7883      	ldrb	r3, [r0, #2]
     b4c:	b2db      	uxtb	r3, r3
     b4e:	2b01      	cmp	r3, #1
     b50:	d009      	beq.n	b66 <cmd_processPacket+0x1b2>
					settings.enableHPR = 1;
					resetAndInitialize(&em7180Config);
				}
				else
				{
					settings.enableHPR = 0;
     b52:	4b09      	ldr	r3, [pc, #36]	; (b78 <cmd_processPacket+0x1c4>)
     b54:	2200      	movs	r2, #0
     b56:	749a      	strb	r2, [r3, #18]
					resetAndInitialize(&em7180Config);
     b58:	4816      	ldr	r0, [pc, #88]	; (bb4 <cmd_processPacket+0x200>)
     b5a:	4b17      	ldr	r3, [pc, #92]	; (bb8 <cmd_processPacket+0x204>)
     b5c:	4798      	blx	r3
     b5e:	e732      	b.n	9c6 <cmd_processPacket+0x12>
			break;
			case PACKET_COMMAND_ID_SETUP_MODE:
				//This byte determines whether the device is in setup mode or not. 
				if(packet->payload[2] == 1)
				{
					settings.setupModeEnabled = true;
     b60:	4a05      	ldr	r2, [pc, #20]	; (b78 <cmd_processPacket+0x1c4>)
     b62:	7453      	strb	r3, [r2, #17]
     b64:	e72f      	b.n	9c6 <cmd_processPacket+0x12>
			break;
			case PACKET_COMMAND_ID_ENABLE_HPR:
				/*	don't check for ID, all sensors should work in same config	*/
				if(packet->payload[2] == 1)
				{
					settings.enableHPR = 1;
     b66:	4a04      	ldr	r2, [pc, #16]	; (b78 <cmd_processPacket+0x1c4>)
					resetAndInitialize(&em7180Config);
     b68:	4812      	ldr	r0, [pc, #72]	; (bb4 <cmd_processPacket+0x200>)
			break;
			case PACKET_COMMAND_ID_ENABLE_HPR:
				/*	don't check for ID, all sensors should work in same config	*/
				if(packet->payload[2] == 1)
				{
					settings.enableHPR = 1;
     b6a:	7493      	strb	r3, [r2, #18]
					resetAndInitialize(&em7180Config);
     b6c:	4b12      	ldr	r3, [pc, #72]	; (bb8 <cmd_processPacket+0x204>)
     b6e:	4798      	blx	r3
     b70:	e729      	b.n	9c6 <cmd_processPacket+0x12>
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	000032d4 	.word	0x000032d4
     b78:	20000098 	.word	0x20000098
     b7c:	00002375 	.word	0x00002375
     b80:	0000090d 	.word	0x0000090d
     b84:	200000cc 	.word	0x200000cc
     b88:	2000000c 	.word	0x2000000c
     b8c:	000032b3 	.word	0x000032b3
     b90:	00000ca1 	.word	0x00000ca1
     b94:	20000099 	.word	0x20000099
     b98:	00003295 	.word	0x00003295
     b9c:	20000130 	.word	0x20000130
     ba0:	3dcccccd 	.word	0x3dcccccd
     ba4:	3e4ccccd 	.word	0x3e4ccccd
     ba8:	3e99999a 	.word	0x3e99999a
     bac:	3ecccccd 	.word	0x3ecccccd
     bb0:	000027f9 	.word	0x000027f9
     bb4:	20000044 	.word	0x20000044
     bb8:	000007c9 	.word	0x000007c9

00000bbc <drv_i2c_init>:

//global variables
volatile drv_i2c_memory_buf_t twiMemBuf[2]; //2 TWIs, 2 buffers
 
int drv_i2c_init(drv_twi_config_t* twi_config)
{
     bbc:	b510      	push	{r4, lr}
     bbe:	1c04      	adds	r4, r0, #0
	int status = STATUS_PASS;
	
	status = i2c_master_init(&twi_config->module, twi_config->p_i2c, &twi_config->twi_options);
     bc0:	1c22      	adds	r2, r4, #0
     bc2:	4b11      	ldr	r3, [pc, #68]	; (c08 <drv_i2c_init+0x4c>)
     bc4:	3004      	adds	r0, #4
     bc6:	3210      	adds	r2, #16
     bc8:	6821      	ldr	r1, [r4, #0]
     bca:	4798      	blx	r3
	if (status != STATUS_OK)
	{
		//puts("Failed to initialize as master.\r\n");
		return STATUS_FAIL;	//return error
     bcc:	2301      	movs	r3, #1
int drv_i2c_init(drv_twi_config_t* twi_config)
{
	int status = STATUS_PASS;
	
	status = i2c_master_init(&twi_config->module, twi_config->p_i2c, &twi_config->twi_options);
	if (status != STATUS_OK)
     bce:	2800      	cmp	r0, #0
     bd0:	d001      	beq.n	bd6 <drv_i2c_init+0x1a>
	}
	
	i2c_master_enable(&twi_config->module);
	
	return STATUS_PASS;
}
     bd2:	1c18      	adds	r0, r3, #0
     bd4:	bd10      	pop	{r4, pc}
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bd6:	6862      	ldr	r2, [r4, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     bd8:	2107      	movs	r1, #7
     bda:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     bdc:	4219      	tst	r1, r3
     bde:	d1fc      	bne.n	bda <drv_i2c_init+0x1e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     be0:	6811      	ldr	r1, [r2, #0]
     be2:	2302      	movs	r3, #2
     be4:	430b      	orrs	r3, r1
     be6:	6013      	str	r3, [r2, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     be8:	2010      	movs	r0, #16
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     bea:	2300      	movs	r3, #0
     bec:	e003      	b.n	bf6 <drv_i2c_init+0x3a>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     bee:	8961      	ldrh	r1, [r4, #10]
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
     bf0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     bf2:	428b      	cmp	r3, r1
     bf4:	d204      	bcs.n	c00 <drv_i2c_init+0x44>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     bf6:	8b51      	ldrh	r1, [r2, #26]
     bf8:	4208      	tst	r0, r1
     bfa:	d0f8      	beq.n	bee <drv_i2c_init+0x32>
		return STATUS_FAIL;	//return error
	}
	
	i2c_master_enable(&twi_config->module);
	
	return STATUS_PASS;
     bfc:	2300      	movs	r3, #0
     bfe:	e7e8      	b.n	bd2 <drv_i2c_init+0x16>
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     c00:	2310      	movs	r3, #16
     c02:	8353      	strh	r3, [r2, #26]
     c04:	2300      	movs	r3, #0
     c06:	e7e4      	b.n	bd2 <drv_i2c_init+0x16>
     c08:	000005b1 	.word	0x000005b1

00000c0c <drv_i2c_write>:
}

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
     c0c:	b510      	push	{r4, lr}
     c0e:	b084      	sub	sp, #16
	int status = STATUS_FAIL;
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
     c10:	466c      	mov	r4, sp
     c12:	7021      	strb	r1, [r4, #0]
	dataPacket[1] = data;
     c14:	7062      	strb	r2, [r4, #1]
	packet.data = &dataPacket[0];
	packet.data_length = 2;
	packet.address = (uint32_t) slave_twi_config->address;
     c16:	6844      	ldr	r4, [r0, #4]
	packet.ten_bit_address = false;
	packet.high_speed = false;	
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c18:	6880      	ldr	r0, [r0, #8]
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
     c1a:	a901      	add	r1, sp, #4

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
	int status = STATUS_FAIL;
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
     c1c:	2300      	movs	r3, #0
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
     c1e:	aa00      	add	r2, sp, #0
     c20:	604a      	str	r2, [r1, #4]
	packet.data_length = 2;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
     c22:	720b      	strb	r3, [r1, #8]
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
	packet.data_length = 2;
     c24:	2202      	movs	r2, #2
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;	
     c26:	724b      	strb	r3, [r1, #9]
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c28:	3004      	adds	r0, #4
     c2a:	4b04      	ldr	r3, [pc, #16]	; (c3c <drv_i2c_write+0x30>)
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	dataPacket[1] = data;
	packet.data = &dataPacket[0];
	packet.data_length = 2;
     c2c:	804a      	strh	r2, [r1, #2]
	packet.address = (uint32_t) slave_twi_config->address;
     c2e:	800c      	strh	r4, [r1, #0]
	packet.ten_bit_address = false;
	packet.high_speed = false;	
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c30:	4798      	blx	r3
	if (status != STATUS_OK)
     c32:	1e43      	subs	r3, r0, #1
     c34:	4198      	sbcs	r0, r3
	{
		return STATUS_FAIL;
	}
	
	return STATUS_PASS;
}
     c36:	b004      	add	sp, #16
     c38:	bd10      	pop	{r4, pc}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	000007b1 	.word	0x000007b1

00000c40 <drv_i2c_read>:

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}
     c42:	4647      	mov	r7, r8
     c44:	b480      	push	{r7}
     c46:	b084      	sub	sp, #16
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
     c48:	ac01      	add	r4, sp, #4
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     c4a:	1c05      	adds	r5, r0, #0
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     c4c:	2000      	movs	r0, #0
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
     c4e:	7220      	strb	r0, [r4, #8]
	packet.high_speed = false;
     c50:	7260      	strb	r0, [r4, #9]
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     c52:	4690      	mov	r8, r2
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c54:	68a8      	ldr	r0, [r5, #8]

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     c56:	466a      	mov	r2, sp
	
	return STATUS_PASS;
}

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
     c58:	1c1f      	adds	r7, r3, #0
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
     c5a:	2300      	movs	r3, #0
     c5c:	8013      	strh	r3, [r2, #0]
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
     c5e:	7011      	strb	r1, [r2, #0]
	packet.data = &dataPacket[0];
     c60:	ab00      	add	r3, sp, #0
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
     c62:	686a      	ldr	r2, [r5, #4]
	int status = STATUS_FAIL;
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
     c64:	9302      	str	r3, [sp, #8]
	packet.data_length = 1;
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c66:	3004      	adds	r0, #4
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
     c68:	2301      	movs	r3, #1
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c6a:	1c21      	adds	r1, r4, #0
     c6c:	4e0a      	ldr	r6, [pc, #40]	; (c98 <drv_i2c_read+0x58>)
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
	struct i2c_master_packet packet;
	dataPacket[0] = reg;
	packet.data = &dataPacket[0];
	packet.data_length = 1;
     c6e:	8063      	strh	r3, [r4, #2]
	packet.address = (uint32_t) slave_twi_config->address;
     c70:	8022      	strh	r2, [r4, #0]
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c72:	47b0      	blx	r6
     c74:	1c03      	adds	r3, r0, #0
	if (status != STATUS_OK)
	{
		return STATUS_FAIL;
     c76:	2001      	movs	r0, #1
	packet.address = (uint32_t) slave_twi_config->address;
	packet.ten_bit_address = false;
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
	if (status != STATUS_OK)
     c78:	2b00      	cmp	r3, #0
     c7a:	d109      	bne.n	c90 <drv_i2c_read+0x50>
	}
	
	//initialize the read sequence
	packet.data = data;
	packet.data_length = length;
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c7c:	68a8      	ldr	r0, [r5, #8]
	{
		return STATUS_FAIL;
	}
	
	//initialize the read sequence
	packet.data = data;
     c7e:	4643      	mov	r3, r8
     c80:	6063      	str	r3, [r4, #4]
	packet.data_length = length;
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c82:	3004      	adds	r0, #4
     c84:	4b05      	ldr	r3, [pc, #20]	; (c9c <drv_i2c_read+0x5c>)
     c86:	1c21      	adds	r1, r4, #0
		return STATUS_FAIL;
	}
	
	//initialize the read sequence
	packet.data = data;
	packet.data_length = length;
     c88:	8067      	strh	r7, [r4, #2]
	status = i2c_master_read_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
     c8a:	4798      	blx	r3
	packet.high_speed = false;
	
	status = i2c_master_write_packet_wait(&slave_twi_config->drv_twi_options->module, &packet);
	if (status != STATUS_OK)
	{
		return STATUS_FAIL;
     c8c:	1e43      	subs	r3, r0, #1
     c8e:	4198      	sbcs	r0, r3
	{
		return STATUS_FAIL;
	}
	
	return STATUS_PASS;
}
     c90:	b004      	add	sp, #16
     c92:	bc04      	pop	{r2}
     c94:	4690      	mov	r8, r2
     c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c98:	000007b1 	.word	0x000007b1
     c9c:	0000079d 	.word	0x0000079d

00000ca0 <pkt_SendRawPacket>:
	{
		sendByte(byte);
	}
}
void pkt_SendRawPacket(uint8_t* payload, uint16_t payloadSize)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     ca2:	4c41      	ldr	r4, [pc, #260]	; (da8 <pkt_SendRawPacket+0x108>)
     ca4:	23de      	movs	r3, #222	; 0xde
	{
		sendByte(byte);
	}
}
void pkt_SendRawPacket(uint8_t* payload, uint16_t payloadSize)
{
     ca6:	4647      	mov	r7, r8
     ca8:	b480      	push	{r7}
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     caa:	7023      	strb	r3, [r4, #0]

	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
     cac:	b2cb      	uxtb	r3, r1
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cae:	1c1a      	adds	r2, r3, #0
     cb0:	3222      	adds	r2, #34	; 0x22
     cb2:	b2d2      	uxtb	r2, r2
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cb4:	4d3d      	ldr	r5, [pc, #244]	; (dac <pkt_SendRawPacket+0x10c>)
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cb6:	2a01      	cmp	r2, #1
     cb8:	d955      	bls.n	d66 <pkt_SendRawPacket+0xc6>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cba:	2603      	movs	r6, #3
     cbc:	7063      	strb	r3, [r4, #1]
	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
     cbe:	0a0b      	lsrs	r3, r1, #8
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cc0:	46b0      	mov	r8, r6
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cc2:	1c1e      	adds	r6, r3, #0
     cc4:	3622      	adds	r6, #34	; 0x22
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cc6:	2704      	movs	r7, #4
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cc8:	b2f6      	uxtb	r6, r6
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cca:	46bc      	mov	ip, r7
     ccc:	2203      	movs	r2, #3
     cce:	2702      	movs	r7, #2
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cd0:	2e01      	cmp	r6, #1
     cd2:	d957      	bls.n	d84 <pkt_SendRawPacket+0xe4>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cd4:	802a      	strh	r2, [r5, #0]
     cd6:	55e3      	strb	r3, [r4, r7]
     cd8:	27df      	movs	r7, #223	; 0xdf
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     cda:	2300      	movs	r3, #0
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cdc:	46bc      	mov	ip, r7
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     cde:	2900      	cmp	r1, #0
     ce0:	d108      	bne.n	cf4 <pkt_SendRawPacket+0x54>
     ce2:	e01a      	b.n	d1a <pkt_SendRawPacket+0x7a>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     ce4:	1c57      	adds	r7, r2, #1
     ce6:	b2bf      	uxth	r7, r7
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     ce8:	3301      	adds	r3, #1
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     cea:	54a6      	strb	r6, [r4, r2]
     cec:	802f      	strh	r7, [r5, #0]
     cee:	1c3a      	adds	r2, r7, #0
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     cf0:	428b      	cmp	r3, r1
     cf2:	da12      	bge.n	d1a <pkt_SendRawPacket+0x7a>
	{
		sendByteWithEscape(payload[i]);
     cf4:	5cc6      	ldrb	r6, [r0, r3]
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     cf6:	1c37      	adds	r7, r6, #0
     cf8:	3722      	adds	r7, #34	; 0x22
     cfa:	b2ff      	uxtb	r7, r7
     cfc:	2f01      	cmp	r7, #1
     cfe:	d8f1      	bhi.n	ce4 <pkt_SendRawPacket+0x44>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d00:	4667      	mov	r7, ip
     d02:	54a7      	strb	r7, [r4, r2]
     d04:	1c97      	adds	r7, r2, #2
     d06:	3201      	adds	r2, #1
     d08:	b2bf      	uxth	r7, r7
     d0a:	b292      	uxth	r2, r2
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     d0c:	3610      	adds	r6, #16
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     d0e:	3301      	adds	r3, #1
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d10:	54a6      	strb	r6, [r4, r2]
     d12:	802f      	strh	r7, [r5, #0]
     d14:	1c3a      	adds	r2, r7, #0
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
	for(i=0;i<payloadSize;i++)
     d16:	428b      	cmp	r3, r1
     d18:	dbec      	blt.n	cf4 <pkt_SendRawPacket+0x54>
	{
		sendByteWithEscape(payload[i]);
	}
	if(pktConfig->transmitEnable != NULL)
     d1a:	4e25      	ldr	r6, [pc, #148]	; (db0 <pkt_SendRawPacket+0x110>)
     d1c:	6833      	ldr	r3, [r6, #0]
     d1e:	685b      	ldr	r3, [r3, #4]
     d20:	2b00      	cmp	r3, #0
     d22:	d000      	beq.n	d26 <pkt_SendRawPacket+0x86>
	{
		(*(pktConfig->transmitEnable))();
     d24:	4798      	blx	r3
	}
	delay_us(2);
     d26:	4b23      	ldr	r3, [pc, #140]	; (db4 <pkt_SendRawPacket+0x114>)
     d28:	2000      	movs	r0, #0
     d2a:	4798      	blx	r3
     d2c:	2300      	movs	r3, #0
     d2e:	1c02      	adds	r2, r0, #0
     d30:	1c19      	adds	r1, r3, #0
     d32:	1880      	adds	r0, r0, r2
     d34:	4159      	adcs	r1, r3
     d36:	4f20      	ldr	r7, [pc, #128]	; (db8 <pkt_SendRawPacket+0x118>)
     d38:	4b18      	ldr	r3, [pc, #96]	; (d9c <pkt_SendRawPacket+0xfc>)
     d3a:	4a17      	ldr	r2, [pc, #92]	; (d98 <pkt_SendRawPacket+0xf8>)
     d3c:	1880      	adds	r0, r0, r2
     d3e:	4159      	adcs	r1, r3
     d40:	4a17      	ldr	r2, [pc, #92]	; (da0 <pkt_SendRawPacket+0x100>)
     d42:	4b18      	ldr	r3, [pc, #96]	; (da4 <pkt_SendRawPacket+0x104>)
     d44:	47b8      	blx	r7
     d46:	4b1d      	ldr	r3, [pc, #116]	; (dbc <pkt_SendRawPacket+0x11c>)
     d48:	4798      	blx	r3
	.payloadSize = 0
};

void sendQueuedPacket()
{
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
     d4a:	6833      	ldr	r3, [r6, #0]
     d4c:	882a      	ldrh	r2, [r5, #0]
     d4e:	68d8      	ldr	r0, [r3, #12]
     d50:	1c21      	adds	r1, r4, #0
     d52:	4b1b      	ldr	r3, [pc, #108]	; (dc0 <pkt_SendRawPacket+0x120>)
     d54:	4798      	blx	r3
		(*(pktConfig->transmitEnable))();
	}
	delay_us(2);
	sendQueuedPacket();
	//TODO: set gpio for receive mode on RS485
	if(pktConfig->transmitDisable != NULL)
     d56:	6833      	ldr	r3, [r6, #0]
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d000      	beq.n	d60 <pkt_SendRawPacket+0xc0>
	{
		(*(pktConfig->transmitDisable))();
     d5e:	4798      	blx	r3
	}
}
     d60:	bc04      	pop	{r2}
     d62:	4690      	mov	r8, r2
     d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     d66:	3310      	adds	r3, #16
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d68:	70a3      	strb	r3, [r4, #2]
     d6a:	2305      	movs	r3, #5
     d6c:	469c      	mov	ip, r3
	queuedPacketIndex =0;
	//first send start byte
	sendByte(RAW_PACKET_START_BYTE);
	//send the payload size
	sendByteWithEscape((uint8_t)(payloadSize&0x00ff));
	sendByteWithEscape((uint8_t)((payloadSize>>8)&0x00ff));
     d6e:	0a0b      	lsrs	r3, r1, #8
	queuedPacket[queuedPacketIndex++] = byte;
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     d70:	1c1e      	adds	r6, r3, #0
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d72:	22df      	movs	r2, #223	; 0xdf
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     d74:	3622      	adds	r6, #34	; 0x22
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d76:	7062      	strb	r2, [r4, #1]
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     d78:	b2f6      	uxtb	r6, r6
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d7a:	2204      	movs	r2, #4
     d7c:	4690      	mov	r8, r2
     d7e:	2703      	movs	r7, #3
	return;
}
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
     d80:	2e01      	cmp	r6, #1
     d82:	d8a7      	bhi.n	cd4 <pkt_SendRawPacket+0x34>
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d84:	22df      	movs	r2, #223	; 0xdf
     d86:	55e2      	strb	r2, [r4, r7]
void sendByteWithEscape(uint8_t byte)
{
	if(byte == RAW_PACKET_START_BYTE || byte == RAW_PACKET_ESCAPE_BYTE)
	{
		sendByte(RAW_PACKET_ESCAPE_BYTE);
		sendByte(byte + RAW_PACKET_ESCAPE_OFFSET);
     d88:	3310      	adds	r3, #16
	usart_write_buffer_wait(pktConfig->uartModule,&queuedPacket,queuedPacketIndex);
}
void sendByte(uint8_t byte)
{
	//send a byte function
	queuedPacket[queuedPacketIndex++] = byte;
     d8a:	4662      	mov	r2, ip
     d8c:	4646      	mov	r6, r8
     d8e:	802a      	strh	r2, [r5, #0]
     d90:	55a3      	strb	r3, [r4, r6]
     d92:	4662      	mov	r2, ip
     d94:	e7a0      	b.n	cd8 <pkt_SendRawPacket+0x38>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	006acfbf 	.word	0x006acfbf
     d9c:	00000000 	.word	0x00000000
     da0:	006acfc0 	.word	0x006acfc0
     da4:	00000000 	.word	0x00000000
     da8:	2000021c 	.word	0x2000021c
     dac:	20000218 	.word	0x20000218
     db0:	200002f0 	.word	0x200002f0
     db4:	00001e6d 	.word	0x00001e6d
     db8:	00002709 	.word	0x00002709
     dbc:	20000001 	.word	0x20000001
     dc0:	000012b5 	.word	0x000012b5
     dc4:	46c0      	nop			; (mov r8, r8)
     dc6:	46c0      	nop			; (mov r8, r8)

00000dc8 <pkt_ProcessIncomingByte>:
	}
}
//

__attribute__((optimize("O0"))) void pkt_ProcessIncomingByte(uint8_t byte)
{
     dc8:	b580      	push	{r7, lr}
     dca:	b082      	sub	sp, #8
     dcc:	af00      	add	r7, sp, #0
     dce:	1c02      	adds	r2, r0, #0
     dd0:	1dfb      	adds	r3, r7, #7
     dd2:	701a      	strb	r2, [r3, #0]
	//if byte is start byte
	if(byte == RAW_PACKET_START_BYTE)
     dd4:	1dfb      	adds	r3, r7, #7
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	2bde      	cmp	r3, #222	; 0xde
     dda:	d117      	bne.n	e0c <pkt_ProcessIncomingByte+0x44>
	{
		if(packet.bytesReceived > 0)
     ddc:	4a4a      	ldr	r2, [pc, #296]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     dde:	23ca      	movs	r3, #202	; 0xca
     de0:	5ad3      	ldrh	r3, [r2, r3]
     de2:	b29b      	uxth	r3, r3
     de4:	2b00      	cmp	r3, #0
     de6:	d004      	beq.n	df2 <pkt_ProcessIncomingByte+0x2a>
		{
			//this means there was an error receiving a packet
			debugStructure.receiveErrorCount++;
     de8:	4b48      	ldr	r3, [pc, #288]	; (f0c <pkt_ProcessIncomingByte+0x144>)
     dea:	685b      	ldr	r3, [r3, #4]
     dec:	1c5a      	adds	r2, r3, #1
     dee:	4b47      	ldr	r3, [pc, #284]	; (f0c <pkt_ProcessIncomingByte+0x144>)
     df0:	605a      	str	r2, [r3, #4]
		}
		//reset the counts and everything for reception of the packet
		packet.bytesReceived = 0;
     df2:	4a45      	ldr	r2, [pc, #276]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     df4:	23ca      	movs	r3, #202	; 0xca
     df6:	2100      	movs	r1, #0
     df8:	52d1      	strh	r1, [r2, r3]
		packet.escapeFlag = false;
     dfa:	4a43      	ldr	r2, [pc, #268]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     dfc:	23cc      	movs	r3, #204	; 0xcc
     dfe:	2100      	movs	r1, #0
     e00:	54d1      	strb	r1, [r2, r3]
		packet.payloadSize = 0;
     e02:	4a41      	ldr	r2, [pc, #260]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e04:	23c8      	movs	r3, #200	; 0xc8
     e06:	2100      	movs	r1, #0
     e08:	52d1      	strh	r1, [r2, r3]
		return;
     e0a:	e079      	b.n	f00 <pkt_ProcessIncomingByte+0x138>
	}
	//if byte is escape byte
	if(byte == RAW_PACKET_ESCAPE_BYTE)
     e0c:	1dfb      	adds	r3, r7, #7
     e0e:	781b      	ldrb	r3, [r3, #0]
     e10:	2bdf      	cmp	r3, #223	; 0xdf
     e12:	d104      	bne.n	e1e <pkt_ProcessIncomingByte+0x56>
	{
		//set escape flag, so the next byte is properly offset.
		packet.escapeFlag = true;
     e14:	4a3c      	ldr	r2, [pc, #240]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e16:	23cc      	movs	r3, #204	; 0xcc
     e18:	2101      	movs	r1, #1
     e1a:	54d1      	strb	r1, [r2, r3]
		return;
     e1c:	e070      	b.n	f00 <pkt_ProcessIncomingByte+0x138>
	}
	//if escape byte flag is set
	if(packet.escapeFlag == true)
     e1e:	4a3a      	ldr	r2, [pc, #232]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e20:	23cc      	movs	r3, #204	; 0xcc
     e22:	5cd3      	ldrb	r3, [r2, r3]
     e24:	b2db      	uxtb	r3, r3
     e26:	2b00      	cmp	r3, #0
     e28:	d008      	beq.n	e3c <pkt_ProcessIncomingByte+0x74>
	{
		//un-escape the byte and process it as any other byte.
		byte = byte - RAW_PACKET_ESCAPE_OFFSET;
     e2a:	1dfb      	adds	r3, r7, #7
     e2c:	1dfa      	adds	r2, r7, #7
     e2e:	7812      	ldrb	r2, [r2, #0]
     e30:	3a10      	subs	r2, #16
     e32:	701a      	strb	r2, [r3, #0]
		//unset the flag
		packet.escapeFlag = false;
     e34:	4a34      	ldr	r2, [pc, #208]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e36:	23cc      	movs	r3, #204	; 0xcc
     e38:	2100      	movs	r1, #0
     e3a:	54d1      	strb	r1, [r2, r3]
	}
	
	//if receive count is  0
	if(packet.bytesReceived == 0)
     e3c:	4a32      	ldr	r2, [pc, #200]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e3e:	23ca      	movs	r3, #202	; 0xca
     e40:	5ad3      	ldrh	r3, [r2, r3]
     e42:	b29b      	uxth	r3, r3
     e44:	2b00      	cmp	r3, #0
     e46:	d115      	bne.n	e74 <pkt_ProcessIncomingByte+0xac>
	{
		//this is the first byte of the payload size
		//copy byte to LSB of the payload size
		packet.payloadSize |= (uint16_t)byte;
     e48:	4a2f      	ldr	r2, [pc, #188]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e4a:	23c8      	movs	r3, #200	; 0xc8
     e4c:	5ad3      	ldrh	r3, [r2, r3]
     e4e:	b29a      	uxth	r2, r3
     e50:	1dfb      	adds	r3, r7, #7
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	b29b      	uxth	r3, r3
     e56:	4313      	orrs	r3, r2
     e58:	b299      	uxth	r1, r3
     e5a:	4a2b      	ldr	r2, [pc, #172]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e5c:	23c8      	movs	r3, #200	; 0xc8
     e5e:	52d1      	strh	r1, [r2, r3]
		//increment received count
		packet.bytesReceived++;
     e60:	4a29      	ldr	r2, [pc, #164]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e62:	23ca      	movs	r3, #202	; 0xca
     e64:	5ad3      	ldrh	r3, [r2, r3]
     e66:	b29b      	uxth	r3, r3
     e68:	3301      	adds	r3, #1
     e6a:	b299      	uxth	r1, r3
     e6c:	4a26      	ldr	r2, [pc, #152]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e6e:	23ca      	movs	r3, #202	; 0xca
     e70:	52d1      	strh	r1, [r2, r3]
     e72:	e045      	b.n	f00 <pkt_ProcessIncomingByte+0x138>
	}
	else if(packet.bytesReceived == 1)
     e74:	4a24      	ldr	r2, [pc, #144]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e76:	23ca      	movs	r3, #202	; 0xca
     e78:	5ad3      	ldrh	r3, [r2, r3]
     e7a:	b29b      	uxth	r3, r3
     e7c:	2b01      	cmp	r3, #1
     e7e:	d117      	bne.n	eb0 <pkt_ProcessIncomingByte+0xe8>
	{
		//this is the second byte of the payload size
		//copy byte to MSB of the payload size
		packet.payloadSize |= (uint16_t)(byte<<8);
     e80:	4a21      	ldr	r2, [pc, #132]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e82:	23c8      	movs	r3, #200	; 0xc8
     e84:	5ad3      	ldrh	r3, [r2, r3]
     e86:	b29a      	uxth	r2, r3
     e88:	1dfb      	adds	r3, r7, #7
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	b29b      	uxth	r3, r3
     e8e:	021b      	lsls	r3, r3, #8
     e90:	b29b      	uxth	r3, r3
     e92:	4313      	orrs	r3, r2
     e94:	b299      	uxth	r1, r3
     e96:	4a1c      	ldr	r2, [pc, #112]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e98:	23c8      	movs	r3, #200	; 0xc8
     e9a:	52d1      	strh	r1, [r2, r3]
		//increment received count
		packet.bytesReceived++;
     e9c:	4a1a      	ldr	r2, [pc, #104]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     e9e:	23ca      	movs	r3, #202	; 0xca
     ea0:	5ad3      	ldrh	r3, [r2, r3]
     ea2:	b29b      	uxth	r3, r3
     ea4:	3301      	adds	r3, #1
     ea6:	b299      	uxth	r1, r3
     ea8:	4a17      	ldr	r2, [pc, #92]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     eaa:	23ca      	movs	r3, #202	; 0xca
     eac:	52d1      	strh	r1, [r2, r3]
     eae:	e027      	b.n	f00 <pkt_ProcessIncomingByte+0x138>
	}
	else
	{	//copy byte to payload at point receivedBytes - 2
		packet.payload[packet.bytesReceived - 2] = byte;
     eb0:	4a15      	ldr	r2, [pc, #84]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     eb2:	23ca      	movs	r3, #202	; 0xca
     eb4:	5ad3      	ldrh	r3, [r2, r3]
     eb6:	b29b      	uxth	r3, r3
     eb8:	3b02      	subs	r3, #2
     eba:	4a13      	ldr	r2, [pc, #76]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ebc:	1df9      	adds	r1, r7, #7
     ebe:	7809      	ldrb	r1, [r1, #0]
     ec0:	54d1      	strb	r1, [r2, r3]
		//check if we received the whole packet.
		if(packet.bytesReceived-1 == packet.payloadSize)
     ec2:	4a11      	ldr	r2, [pc, #68]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ec4:	23ca      	movs	r3, #202	; 0xca
     ec6:	5ad3      	ldrh	r3, [r2, r3]
     ec8:	b29b      	uxth	r3, r3
     eca:	1e5a      	subs	r2, r3, #1
     ecc:	490e      	ldr	r1, [pc, #56]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ece:	23c8      	movs	r3, #200	; 0xc8
     ed0:	5acb      	ldrh	r3, [r1, r3]
     ed2:	b29b      	uxth	r3, r3
     ed4:	429a      	cmp	r2, r3
     ed6:	d10a      	bne.n	eee <pkt_ProcessIncomingByte+0x126>
		{
			//process the packet
			pktConfig->packetReceivedCallback(&packet);
     ed8:	4b0d      	ldr	r3, [pc, #52]	; (f10 <pkt_ProcessIncomingByte+0x148>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	689b      	ldr	r3, [r3, #8]
     ede:	4a0a      	ldr	r2, [pc, #40]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ee0:	1c10      	adds	r0, r2, #0
     ee2:	4798      	blx	r3
			//reset everything to zero
			packet.bytesReceived = 0;
     ee4:	4a08      	ldr	r2, [pc, #32]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ee6:	23ca      	movs	r3, #202	; 0xca
     ee8:	2100      	movs	r1, #0
     eea:	52d1      	strh	r1, [r2, r3]
     eec:	e008      	b.n	f00 <pkt_ProcessIncomingByte+0x138>
		}
		else
		{
			packet.bytesReceived++;
     eee:	4a06      	ldr	r2, [pc, #24]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     ef0:	23ca      	movs	r3, #202	; 0xca
     ef2:	5ad3      	ldrh	r3, [r2, r3]
     ef4:	b29b      	uxth	r3, r3
     ef6:	3301      	adds	r3, #1
     ef8:	b299      	uxth	r1, r3
     efa:	4a03      	ldr	r2, [pc, #12]	; (f08 <pkt_ProcessIncomingByte+0x140>)
     efc:	23ca      	movs	r3, #202	; 0xca
     efe:	52d1      	strh	r1, [r2, r3]
		}
	}
	
}
     f00:	46bd      	mov	sp, r7
     f02:	b002      	add	sp, #8
     f04:	bd80      	pop	{r7, pc}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	20000148 	.word	0x20000148
     f0c:	20000130 	.word	0x20000130
     f10:	200002f0 	.word	0x200002f0

00000f14 <pkt_packetParserInit>:
void pkt_packetParserInit(pkt_packetParserConfiguration_t* config)
{
	pktConfig = config;
     f14:	4b01      	ldr	r3, [pc, #4]	; (f1c <pkt_packetParserInit+0x8>)
     f16:	6018      	str	r0, [r3, #0]
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	200002f0 	.word	0x200002f0

00000f20 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f20:	b5f0      	push	{r4, r5, r6, r7, lr}
     f22:	4644      	mov	r4, r8
     f24:	465f      	mov	r7, fp
     f26:	4656      	mov	r6, sl
     f28:	464d      	mov	r5, r9
     f2a:	b4f0      	push	{r4, r5, r6, r7}
     f2c:	1c05      	adds	r5, r0, #0
     f2e:	b093      	sub	sp, #76	; 0x4c
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     f30:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f32:	1c08      	adds	r0, r1, #0
     f34:	4fb2      	ldr	r7, [pc, #712]	; (1200 <usart_init+0x2e0>)
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f36:	1c0c      	adds	r4, r1, #0
     f38:	4690      	mov	r8, r2
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f3a:	47b8      	blx	r7
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f3c:	6822      	ldr	r2, [r4, #0]
     f3e:	2301      	movs	r3, #1
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f40:	1c06      	adds	r6, r0, #0
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     f42:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f44:	4213      	tst	r3, r2
     f46:	d006      	beq.n	f56 <usart_init+0x36>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     f48:	b013      	add	sp, #76	; 0x4c
     f4a:	bc3c      	pop	{r2, r3, r4, r5}
     f4c:	4690      	mov	r8, r2
     f4e:	4699      	mov	r9, r3
     f50:	46a2      	mov	sl, r4
     f52:	46ab      	mov	fp, r5
     f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f56:	6822      	ldr	r2, [r4, #0]
     f58:	2102      	movs	r1, #2
     f5a:	4011      	ands	r1, r2
     f5c:	468a      	mov	sl, r1
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     f5e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f60:	2900      	cmp	r1, #0
     f62:	d1f1      	bne.n	f48 <usart_init+0x28>
     f64:	4aa7      	ldr	r2, [pc, #668]	; (1204 <usart_init+0x2e4>)
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f66:	1cb0      	adds	r0, r6, #2
     f68:	6a11      	ldr	r1, [r2, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f6a:	4083      	lsls	r3, r0
     f6c:	430b      	orrs	r3, r1
     f6e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f70:	222d      	movs	r2, #45	; 0x2d
     f72:	4691      	mov	r9, r2
     f74:	4642      	mov	r2, r8
     f76:	444a      	add	r2, r9
     f78:	7813      	ldrb	r3, [r2, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f7a:	360e      	adds	r6, #14
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f7c:	a90a      	add	r1, sp, #40	; 0x28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f7e:	b2f6      	uxtb	r6, r6
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f80:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f82:	1c30      	adds	r0, r6, #0
     f84:	4ba0      	ldr	r3, [pc, #640]	; (1208 <usart_init+0x2e8>)
     f86:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f88:	1c30      	adds	r0, r6, #0
     f8a:	4ba0      	ldr	r3, [pc, #640]	; (120c <usart_init+0x2ec>)
     f8c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f8e:	4643      	mov	r3, r8
     f90:	444b      	add	r3, r9

	/* Set character size */
	module->character_size = config->character_size;
     f92:	4646      	mov	r6, r8
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);
     f94:	7818      	ldrb	r0, [r3, #0]
     f96:	2100      	movs	r1, #0
     f98:	4b9d      	ldr	r3, [pc, #628]	; (1210 <usart_init+0x2f0>)
     f9a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     f9c:	7af3      	ldrb	r3, [r6, #11]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f9e:	6829      	ldr	r1, [r5, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Set character size */
	module->character_size = config->character_size;
     fa0:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     fa2:	2324      	movs	r3, #36	; 0x24
     fa4:	5cf3      	ldrb	r3, [r6, r3]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fa6:	1c08      	adds	r0, r1, #0

	/* Set character size */
	module->character_size = config->character_size;

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     fa8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     faa:	2325      	movs	r3, #37	; 0x25
     fac:	5cf3      	ldrb	r3, [r6, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     fae:	4689      	mov	r9, r1
	/* Set character size */
	module->character_size = config->character_size;

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
	module->transmitter_enabled = config->transmitter_enable;
     fb0:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     fb2:	7ef3      	ldrb	r3, [r6, #27]
     fb4:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     fb6:	7f33      	ldrb	r3, [r6, #28]
     fb8:	726b      	strb	r3, [r5, #9]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fba:	47b8      	blx	r7
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     fbc:	4653      	mov	r3, sl
     fbe:	466a      	mov	r2, sp
     fc0:	8713      	strh	r3, [r2, #56]	; 0x38

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     fc2:	8a36      	ldrh	r6, [r6, #16]
     fc4:	2380      	movs	r3, #128	; 0x80
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fc6:	300e      	adds	r0, #14

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     fc8:	46b2      	mov	sl, r6
     fca:	01db      	lsls	r3, r3, #7
     fcc:	429e      	cmp	r6, r3
     fce:	d100      	bne.n	fd2 <usart_init+0xb2>
     fd0:	e0cd      	b.n	116e <usart_init+0x24e>
     fd2:	d800      	bhi.n	fd6 <usart_init+0xb6>
     fd4:	e0e7      	b.n	11a6 <usart_init+0x286>
     fd6:	23c0      	movs	r3, #192	; 0xc0
     fd8:	01db      	lsls	r3, r3, #7
     fda:	429e      	cmp	r6, r3
     fdc:	d100      	bne.n	fe0 <usart_init+0xc0>
     fde:	e0ee      	b.n	11be <usart_init+0x29e>
     fe0:	2380      	movs	r3, #128	; 0x80
     fe2:	021b      	lsls	r3, r3, #8
     fe4:	429e      	cmp	r6, r3
     fe6:	d000      	beq.n	fea <usart_init+0xca>
     fe8:	e0e5      	b.n	11b6 <usart_init+0x296>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fea:	2603      	movs	r6, #3
     fec:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fee:	2600      	movs	r6, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff0:	4641      	mov	r1, r8
		(uint32_t)config->mux_setting |
     ff2:	4642      	mov	r2, r8
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ff4:	4643      	mov	r3, r8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff6:	6809      	ldr	r1, [r1, #0]
		(uint32_t)config->mux_setting |
     ff8:	68d2      	ldr	r2, [r2, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ffa:	695b      	ldr	r3, [r3, #20]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ffc:	9102      	str	r1, [sp, #8]
		(uint32_t)config->mux_setting |
     ffe:	9203      	str	r2, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1000:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1002:	4641      	mov	r1, r8
    1004:	7e09      	ldrb	r1, [r1, #24]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1006:	4642      	mov	r2, r8
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1008:	9105      	str	r1, [sp, #20]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    100a:	2326      	movs	r3, #38	; 0x26
    100c:	5cd3      	ldrb	r3, [r2, r3]
    100e:	9306      	str	r3, [sp, #24]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1010:	6853      	ldr	r3, [r2, #4]
    1012:	469b      	mov	fp, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1014:	2b00      	cmp	r3, #0
    1016:	d100      	bne.n	101a <usart_init+0xfa>
    1018:	e0b2      	b.n	1180 <usart_init+0x260>
    101a:	2380      	movs	r3, #128	; 0x80
    101c:	055b      	lsls	r3, r3, #21
    101e:	459b      	cmp	fp, r3
    1020:	d000      	beq.n	1024 <usart_init+0x104>
    1022:	e0ab      	b.n	117c <usart_init+0x25c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1024:	2327      	movs	r3, #39	; 0x27
    1026:	5cd3      	ldrb	r3, [r2, r3]
    1028:	2100      	movs	r1, #0
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <usart_init+0x110>
    102e:	e0dc      	b.n	11ea <usart_init+0x2ca>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1030:	4646      	mov	r6, r8
    1032:	7e73      	ldrb	r3, [r6, #25]
    1034:	2b00      	cmp	r3, #0
    1036:	d002      	beq.n	103e <usart_init+0x11e>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1038:	7eb3      	ldrb	r3, [r6, #26]
    103a:	464a      	mov	r2, r9
    103c:	7393      	strb	r3, [r2, #14]
    103e:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1040:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1042:	2b00      	cmp	r3, #0
    1044:	d1fc      	bne.n	1040 <usart_init+0x120>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1046:	464b      	mov	r3, r9
    1048:	8199      	strh	r1, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    104a:	9e02      	ldr	r6, [sp, #8]
    104c:	9903      	ldr	r1, [sp, #12]
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    104e:	465a      	mov	r2, fp
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1050:	4331      	orrs	r1, r6
		(uint32_t)config->mux_setting |
    1052:	9e04      	ldr	r6, [sp, #16]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1054:	4653      	mov	r3, sl
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1056:	4331      	orrs	r1, r6
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1058:	9e05      	ldr	r6, [sp, #20]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    105a:	4311      	orrs	r1, r2
		config->sample_rate |
    105c:	4319      	orrs	r1, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    105e:	0233      	lsls	r3, r6, #8
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1060:	9e06      	ldr	r6, [sp, #24]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1062:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1064:	0773      	lsls	r3, r6, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1066:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
    1068:	4642      	mov	r2, r8
    106a:	2327      	movs	r3, #39	; 0x27
    106c:	5cd3      	ldrb	r3, [r2, r3]
    106e:	2b00      	cmp	r3, #0
    1070:	d101      	bne.n	1076 <usart_init+0x156>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1072:	2304      	movs	r3, #4
    1074:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1076:	4643      	mov	r3, r8
    1078:	7f18      	ldrb	r0, [r3, #28]
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    107a:	7e5b      	ldrb	r3, [r3, #25]
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    107c:	4646      	mov	r6, r8
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    107e:	029b      	lsls	r3, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1080:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1082:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1084:	7f73      	ldrb	r3, [r6, #29]
    1086:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1088:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    108a:	2324      	movs	r3, #36	; 0x24
    108c:	5cf3      	ldrb	r3, [r6, r3]
    108e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1090:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1092:	2325      	movs	r3, #37	; 0x25
    1094:	5cf3      	ldrb	r3, [r6, r3]
    1096:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1098:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    109a:	7af3      	ldrb	r3, [r6, #11]
    109c:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    109e:	8933      	ldrh	r3, [r6, #8]
    10a0:	2bff      	cmp	r3, #255	; 0xff
    10a2:	d100      	bne.n	10a6 <usart_init+0x186>
    10a4:	e08f      	b.n	11c6 <usart_init+0x2a6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    10a6:	2280      	movs	r2, #128	; 0x80
    10a8:	0452      	lsls	r2, r2, #17
    10aa:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
    10ac:	4318      	orrs	r0, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10ae:	232c      	movs	r3, #44	; 0x2c
    10b0:	4646      	mov	r6, r8
    10b2:	5cf3      	ldrb	r3, [r6, r3]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d103      	bne.n	10c0 <usart_init+0x1a0>
    10b8:	4b56      	ldr	r3, [pc, #344]	; (1214 <usart_init+0x2f4>)
    10ba:	789b      	ldrb	r3, [r3, #2]
    10bc:	079a      	lsls	r2, r3, #30
    10be:	d501      	bpl.n	10c4 <usart_init+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    10c0:	2380      	movs	r3, #128	; 0x80
    10c2:	4319      	orrs	r1, r3
    10c4:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10c6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10c8:	2b00      	cmp	r3, #0
    10ca:	d1fc      	bne.n	10c6 <usart_init+0x1a6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    10cc:	464b      	mov	r3, r9
    10ce:	6058      	str	r0, [r3, #4]
    10d0:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10d2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10d4:	2b00      	cmp	r3, #0
    10d6:	d1fc      	bne.n	10d2 <usart_init+0x1b2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    10d8:	464e      	mov	r6, r9
    10da:	6031      	str	r1, [r6, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    10dc:	4641      	mov	r1, r8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10de:	ae0c      	add	r6, sp, #48	; 0x30
    10e0:	6b09      	ldr	r1, [r1, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10e2:	7073      	strb	r3, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    10e4:	70f3      	strb	r3, [r6, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10e6:	70b3      	strb	r3, [r6, #2]

	uint32_t pad_pinmuxes[] = {
    10e8:	4643      	mov	r3, r8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10ea:	2280      	movs	r2, #128	; 0x80
    10ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    10ee:	910e      	str	r1, [sp, #56]	; 0x38
    10f0:	4641      	mov	r1, r8
    10f2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    10f4:	7032      	strb	r2, [r6, #0]
    10f6:	4642      	mov	r2, r8
    10f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    10fa:	9310      	str	r3, [sp, #64]	; 0x40
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10fc:	4b46      	ldr	r3, [pc, #280]	; (1218 <usart_init+0x2f8>)
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    10fe:	9111      	str	r1, [sp, #68]	; 0x44
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1100:	4946      	ldr	r1, [pc, #280]	; (121c <usart_init+0x2fc>)
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1102:	920f      	str	r2, [sp, #60]	; 0x3c
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1104:	469b      	mov	fp, r3
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1106:	2200      	movs	r2, #0
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1108:	1c23      	adds	r3, r4, #0
    110a:	468a      	mov	sl, r1
    110c:	1c14      	adds	r4, r2, #0
    110e:	4698      	mov	r8, r3
    1110:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1112:	aa0e      	add	r2, sp, #56	; 0x38
    1114:	58d0      	ldr	r0, [r2, r3]
    1116:	b2e1      	uxtb	r1, r4

		if (current_pinmux == PINMUX_DEFAULT) {
    1118:	2800      	cmp	r0, #0
    111a:	d02c      	beq.n	1176 <usart_init+0x256>
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
    111c:	1c43      	adds	r3, r0, #1
    111e:	d004      	beq.n	112a <usart_init+0x20a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1120:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1122:	0c00      	lsrs	r0, r0, #16
    1124:	b2c0      	uxtb	r0, r0
    1126:	1c31      	adds	r1, r6, #0
    1128:	47d0      	blx	sl
    112a:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    112c:	2c04      	cmp	r4, #4
    112e:	d1ef      	bne.n	1110 <usart_init+0x1f0>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1130:	1c28      	adds	r0, r5, #0
    1132:	2100      	movs	r1, #0
    1134:	2218      	movs	r2, #24
    1136:	4b3a      	ldr	r3, [pc, #232]	; (1220 <usart_init+0x300>)
    1138:	300c      	adds	r0, #12
    113a:	4798      	blx	r3
	}

	module->tx_buffer_ptr              = NULL;
    113c:	2200      	movs	r2, #0
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
    113e:	85ea      	strh	r2, [r5, #46]	; 0x2e
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    1140:	62aa      	str	r2, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1142:	626a      	str	r2, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1144:	2300      	movs	r3, #0
	module->remaining_rx_buffer_length = 0x0000;
    1146:	85aa      	strh	r2, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1148:	2230      	movs	r2, #48	; 0x30
    114a:	54ab      	strb	r3, [r5, r2]
	module->callback_enable_mask       = 0x00;
    114c:	2231      	movs	r2, #49	; 0x31
    114e:	54ab      	strb	r3, [r5, r2]
	module->rx_status                  = STATUS_OK;
    1150:	2232      	movs	r2, #50	; 0x32
    1152:	54ab      	strb	r3, [r5, r2]
	module->tx_status                  = STATUS_OK;
    1154:	2233      	movs	r2, #51	; 0x33
    1156:	54ab      	strb	r3, [r5, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1158:	6828      	ldr	r0, [r5, #0]
    115a:	47b8      	blx	r7
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    115c:	4b31      	ldr	r3, [pc, #196]	; (1224 <usart_init+0x304>)
    115e:	4932      	ldr	r1, [pc, #200]	; (1228 <usart_init+0x308>)
	module->rx_status                  = STATUS_OK;
	module->tx_status                  = STATUS_OK;

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1160:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1162:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1164:	4b31      	ldr	r3, [pc, #196]	; (122c <usart_init+0x30c>)
    1166:	00a4      	lsls	r4, r4, #2
    1168:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    116a:	2000      	movs	r0, #0
    116c:	e6ec      	b.n	f48 <usart_init+0x28>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    116e:	2608      	movs	r6, #8
    1170:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1172:	2600      	movs	r6, #0
    1174:	e73c      	b.n	ff0 <usart_init+0xd0>
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1176:	4640      	mov	r0, r8
    1178:	47d8      	blx	fp
    117a:	e7cf      	b.n	111c <usart_init+0x1fc>
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    117c:	2100      	movs	r1, #0
    117e:	e757      	b.n	1030 <usart_init+0x110>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1180:	2327      	movs	r3, #39	; 0x27
    1182:	4642      	mov	r2, r8
    1184:	5cd3      	ldrb	r3, [r2, r3]
    1186:	2b00      	cmp	r3, #0
    1188:	d025      	beq.n	11d6 <usart_init+0x2b6>
				status_code =
    118a:	9b08      	ldr	r3, [sp, #32]
    118c:	9300      	str	r3, [sp, #0]
    118e:	6a10      	ldr	r0, [r2, #32]
    1190:	6a91      	ldr	r1, [r2, #40]	; 0x28
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1192:	1c33      	adds	r3, r6, #0
    1194:	aa0e      	add	r2, sp, #56	; 0x38
    1196:	4e26      	ldr	r6, [pc, #152]	; (1230 <usart_init+0x310>)
    1198:	47b0      	blx	r6

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    119a:	2800      	cmp	r0, #0
    119c:	d000      	beq.n	11a0 <usart_init+0x280>
    119e:	e6d3      	b.n	f48 <usart_init+0x28>
    11a0:	466a      	mov	r2, sp
    11a2:	8f11      	ldrh	r1, [r2, #56]	; 0x38
    11a4:	e744      	b.n	1030 <usart_init+0x110>

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    11a6:	2380      	movs	r3, #128	; 0x80
    11a8:	019b      	lsls	r3, r3, #6
    11aa:	429e      	cmp	r6, r3
    11ac:	d103      	bne.n	11b6 <usart_init+0x296>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11ae:	2610      	movs	r6, #16
    11b0:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11b2:	2601      	movs	r6, #1
    11b4:	e71c      	b.n	ff0 <usart_init+0xd0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11b6:	2610      	movs	r6, #16
    11b8:	9608      	str	r6, [sp, #32]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11ba:	2600      	movs	r6, #0
    11bc:	e718      	b.n	ff0 <usart_init+0xd0>
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    11be:	2608      	movs	r6, #8
    11c0:	9608      	str	r6, [sp, #32]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11c2:	2601      	movs	r6, #1
    11c4:	e714      	b.n	ff0 <usart_init+0xd0>
	if (config->parity != USART_PARITY_NONE) {
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
		ctrlb |= config->parity;
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    11c6:	7ef3      	ldrb	r3, [r6, #27]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d100      	bne.n	11ce <usart_init+0x2ae>
    11cc:	e76f      	b.n	10ae <usart_init+0x18e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    11ce:	2380      	movs	r3, #128	; 0x80
    11d0:	04db      	lsls	r3, r3, #19
    11d2:	4319      	orrs	r1, r3
    11d4:	e76b      	b.n	10ae <usart_init+0x18e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    11d6:	6a11      	ldr	r1, [r2, #32]
    11d8:	b2c0      	uxtb	r0, r0
    11da:	4b16      	ldr	r3, [pc, #88]	; (1234 <usart_init+0x314>)
    11dc:	9109      	str	r1, [sp, #36]	; 0x24
    11de:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    11e0:	9a08      	ldr	r2, [sp, #32]
						_sercom_get_async_baud_val(config->baudrate,
    11e2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    11e4:	9200      	str	r2, [sp, #0]
    11e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    11e8:	e7d3      	b.n	1192 <usart_init+0x272>
#endif
	switch (transfer_mode)
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    11ea:	4b12      	ldr	r3, [pc, #72]	; (1234 <usart_init+0x314>)
    11ec:	b2c0      	uxtb	r0, r0
    11ee:	6a16      	ldr	r6, [r2, #32]
    11f0:	4798      	blx	r3
    11f2:	aa0e      	add	r2, sp, #56	; 0x38
    11f4:	1c01      	adds	r1, r0, #0
    11f6:	4b10      	ldr	r3, [pc, #64]	; (1238 <usart_init+0x318>)
    11f8:	1c30      	adds	r0, r6, #0
    11fa:	4798      	blx	r3
    11fc:	e7cd      	b.n	119a <usart_init+0x27a>
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	0000196d 	.word	0x0000196d
    1204:	40000400 	.word	0x40000400
    1208:	00001ef5 	.word	0x00001ef5
    120c:	00001f59 	.word	0x00001f59
    1210:	000018a9 	.word	0x000018a9
    1214:	41002000 	.word	0x41002000
    1218:	000018f5 	.word	0x000018f5
    121c:	00002031 	.word	0x00002031
    1220:	000032c5 	.word	0x000032c5
    1224:	0000198d 	.word	0x0000198d
    1228:	00001365 	.word	0x00001365
    122c:	200002f4 	.word	0x200002f4
    1230:	000016a9 	.word	0x000016a9
    1234:	00001f89 	.word	0x00001f89
    1238:	0000167d 	.word	0x0000167d

0000123c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    123c:	b510      	push	{r4, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    123e:	7982      	ldrb	r2, [r0, #6]
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1240:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1242:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
		return STATUS_ERR_DENIED;
    1244:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1246:	2a00      	cmp	r2, #0
    1248:	d100      	bne.n	124c <usart_read_wait+0x10>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    124a:	bd10      	pop	{r4, pc}
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    124c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		return STATUS_BUSY;
    124e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1250:	2b00      	cmp	r3, #0
    1252:	d1fa      	bne.n	124a <usart_read_wait+0xe>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1254:	7e23      	ldrb	r3, [r4, #24]
    1256:	075a      	lsls	r2, r3, #29
    1258:	d5f7      	bpl.n	124a <usart_read_wait+0xe>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    125a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    125c:	2b00      	cmp	r3, #0
    125e:	d1fc      	bne.n	125a <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1260:	8b63      	ldrh	r3, [r4, #26]
    1262:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1264:	069a      	lsls	r2, r3, #26
    1266:	d005      	beq.n	1274 <usart_read_wait+0x38>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1268:	2202      	movs	r2, #2
    126a:	421a      	tst	r2, r3
    126c:	d006      	beq.n	127c <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    126e:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    1270:	201a      	movs	r0, #26
    1272:	e7ea      	b.n	124a <usart_read_wait+0xe>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1274:	8d23      	ldrh	r3, [r4, #40]	; 0x28

	return STATUS_OK;
    1276:	2000      	movs	r0, #0
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1278:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    127a:	e7e6      	b.n	124a <usart_read_wait+0xe>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;

			return STATUS_ERR_BAD_FORMAT;
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    127c:	2204      	movs	r2, #4
    127e:	421a      	tst	r2, r3
    1280:	d002      	beq.n	1288 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1282:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1284:	201e      	movs	r0, #30
    1286:	e7e0      	b.n	124a <usart_read_wait+0xe>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1288:	2201      	movs	r2, #1
    128a:	421a      	tst	r2, r3
    128c:	d002      	beq.n	1294 <usart_read_wait+0x58>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    128e:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1290:	2013      	movs	r0, #19
    1292:	e7da      	b.n	124a <usart_read_wait+0xe>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1294:	2210      	movs	r2, #16
    1296:	4213      	tst	r3, r2
    1298:	d004      	beq.n	12a4 <usart_read_wait+0x68>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    129a:	8b63      	ldrh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    129c:	2042      	movs	r0, #66	; 0x42
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    129e:	431a      	orrs	r2, r3
    12a0:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    12a2:	e7d2      	b.n	124a <usart_read_wait+0xe>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    12a4:	2220      	movs	r2, #32
    12a6:	4213      	tst	r3, r2
    12a8:	d0e4      	beq.n	1274 <usart_read_wait+0x38>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    12aa:	8b63      	ldrh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    12ac:	2041      	movs	r0, #65	; 0x41
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    12ae:	431a      	orrs	r2, r3
    12b0:	8362      	strh	r2, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    12b2:	e7ca      	b.n	124a <usart_read_wait+0xe>

000012b4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    12b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12b6:	4647      	mov	r7, r8
    12b8:	b480      	push	{r7}
    12ba:	1c07      	adds	r7, r0, #0
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    12bc:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    12be:	2a00      	cmp	r2, #0
    12c0:	d102      	bne.n	12c8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    12c2:	bc04      	pop	{r2}
    12c4:	4690      	mov	r8, r2
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12c8:	79fb      	ldrb	r3, [r7, #7]
		return STATUS_ERR_DENIED;
    12ca:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12cc:	2b00      	cmp	r3, #0
    12ce:	d0f8      	beq.n	12c2 <usart_write_buffer_wait+0xe>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12d0:	683d      	ldr	r5, [r7, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12d2:	69eb      	ldr	r3, [r5, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    12d4:	2b00      	cmp	r3, #0
    12d6:	d1fc      	bne.n	12d2 <usart_write_buffer_wait+0x1e>
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    12d8:	2302      	movs	r3, #2
    12da:	4694      	mov	ip, r2
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    12dc:	2601      	movs	r6, #1
    12de:	2200      	movs	r2, #0
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    12e0:	4698      	mov	r8, r3
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    12e2:	7e2b      	ldrb	r3, [r5, #24]
    12e4:	421e      	tst	r6, r3
    12e6:	d107      	bne.n	12f8 <usart_write_buffer_wait+0x44>
    12e8:	4b1d      	ldr	r3, [pc, #116]	; (1360 <usart_write_buffer_wait+0xac>)
    12ea:	e002      	b.n	12f2 <usart_write_buffer_wait+0x3e>
    12ec:	3b01      	subs	r3, #1
				break;
			} else if (i == USART_TIMEOUT) {
    12ee:	2b00      	cmp	r3, #0
    12f0:	d034      	beq.n	135c <usart_write_buffer_wait+0xa8>
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    12f2:	7e2c      	ldrb	r4, [r5, #24]
    12f4:	4226      	tst	r6, r4
    12f6:	d0f9      	beq.n	12ec <usart_write_buffer_wait+0x38>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12f8:	797c      	ldrb	r4, [r7, #5]
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    12fa:	1c50      	adds	r0, r2, #1
    12fc:	b280      	uxth	r0, r0
    12fe:	5c8b      	ldrb	r3, [r1, r2]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1300:	2c01      	cmp	r4, #1
    1302:	d025      	beq.n	1350 <usart_write_buffer_wait+0x9c>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1304:	1c1c      	adds	r4, r3, #0
    1306:	1c02      	adds	r2, r0, #0

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1308:	79f8      	ldrb	r0, [r7, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    130a:	683b      	ldr	r3, [r7, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    130c:	2800      	cmp	r0, #0
    130e:	d002      	beq.n	1316 <usart_write_buffer_wait+0x62>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1310:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
    1312:	2800      	cmp	r0, #0
    1314:	d013      	beq.n	133e <usart_write_buffer_wait+0x8a>
    1316:	4663      	mov	r3, ip
    1318:	3b01      	subs	r3, #1
    131a:	b29b      	uxth	r3, r3
    131c:	469c      	mov	ip, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    131e:	2b00      	cmp	r3, #0
    1320:	d1df      	bne.n	12e2 <usart_write_buffer_wait+0x2e>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1322:	7e2b      	ldrb	r3, [r5, #24]
    1324:	079a      	lsls	r2, r3, #30
    1326:	d408      	bmi.n	133a <usart_write_buffer_wait+0x86>
    1328:	4b0d      	ldr	r3, [pc, #52]	; (1360 <usart_write_buffer_wait+0xac>)
    132a:	2102      	movs	r1, #2
    132c:	e002      	b.n	1334 <usart_write_buffer_wait+0x80>
    132e:	3b01      	subs	r3, #1
			break;
		} else if (i == USART_TIMEOUT) {
    1330:	2b00      	cmp	r3, #0
    1332:	d013      	beq.n	135c <usart_write_buffer_wait+0xa8>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1334:	7e2a      	ldrb	r2, [r5, #24]
    1336:	4211      	tst	r1, r2
    1338:	d0f9      	beq.n	132e <usart_write_buffer_wait+0x7a>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    133a:	2000      	movs	r0, #0
    133c:	e7c1      	b.n	12c2 <usart_write_buffer_wait+0xe>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    133e:	69d8      	ldr	r0, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1340:	2800      	cmp	r0, #0
    1342:	d1fc      	bne.n	133e <usart_write_buffer_wait+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1344:	851c      	strh	r4, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1346:	7e18      	ldrb	r0, [r3, #24]
    1348:	4644      	mov	r4, r8
    134a:	4204      	tst	r4, r0
    134c:	d0fb      	beq.n	1346 <usart_write_buffer_wait+0x92>
    134e:	e7e2      	b.n	1316 <usart_write_buffer_wait+0x62>
		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1350:	5c0c      	ldrb	r4, [r1, r0]
    1352:	3202      	adds	r2, #2
    1354:	0224      	lsls	r4, r4, #8
    1356:	b292      	uxth	r2, r2
    1358:	431c      	orrs	r4, r3
    135a:	e7d5      	b.n	1308 <usart_write_buffer_wait+0x54>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    135c:	2012      	movs	r0, #18
    135e:	e7b0      	b.n	12c2 <usart_write_buffer_wait+0xe>
    1360:	0000ffff 	.word	0x0000ffff

00001364 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
__attribute__((optimize("O0"))) void _usart_interrupt_handler(
		uint8_t instance)
{
    1364:	b580      	push	{r7, lr}
    1366:	b088      	sub	sp, #32
    1368:	af00      	add	r7, sp, #0
    136a:	1c02      	adds	r2, r0, #0
    136c:	1dfb      	adds	r3, r7, #7
    136e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1370:	1dfb      	adds	r3, r7, #7
    1372:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1374:	4bc0      	ldr	r3, [pc, #768]	; (1678 <_usart_interrupt_handler+0x314>)
    1376:	0092      	lsls	r2, r2, #2
    1378:	58d3      	ldr	r3, [r2, r3]
    137a:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    137c:	69bb      	ldr	r3, [r7, #24]
    137e:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    1380:	617b      	str	r3, [r7, #20]
    1382:	69bb      	ldr	r3, [r7, #24]
    1384:	60bb      	str	r3, [r7, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1386:	68bb      	ldr	r3, [r7, #8]
    1388:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    138a:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    138c:	2b00      	cmp	r3, #0
    138e:	d1fa      	bne.n	1386 <_usart_interrupt_handler+0x22>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1390:	697b      	ldr	r3, [r7, #20]
    1392:	7e1b      	ldrb	r3, [r3, #24]
    1394:	b2da      	uxtb	r2, r3
    1396:	1c3b      	adds	r3, r7, #0
    1398:	3312      	adds	r3, #18
    139a:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    139c:	697b      	ldr	r3, [r7, #20]
    139e:	7d9b      	ldrb	r3, [r3, #22]
    13a0:	b2db      	uxtb	r3, r3
    13a2:	1c1a      	adds	r2, r3, #0
    13a4:	1c3b      	adds	r3, r7, #0
    13a6:	3312      	adds	r3, #18
    13a8:	1c39      	adds	r1, r7, #0
    13aa:	3112      	adds	r1, #18
    13ac:	8809      	ldrh	r1, [r1, #0]
    13ae:	400a      	ands	r2, r1
    13b0:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    13b2:	69ba      	ldr	r2, [r7, #24]
    13b4:	2330      	movs	r3, #48	; 0x30
    13b6:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    13b8:	69b9      	ldr	r1, [r7, #24]
    13ba:	2231      	movs	r2, #49	; 0x31
    13bc:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    13be:	4013      	ands	r3, r2
    13c0:	b2da      	uxtb	r2, r3
    13c2:	1c3b      	adds	r3, r7, #0
    13c4:	3310      	adds	r3, #16
    13c6:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    13c8:	1c3b      	adds	r3, r7, #0
    13ca:	3312      	adds	r3, #18
    13cc:	881a      	ldrh	r2, [r3, #0]
    13ce:	2301      	movs	r3, #1
    13d0:	4013      	ands	r3, r2
    13d2:	d044      	beq.n	145e <_usart_interrupt_handler+0xfa>
		if (module->remaining_tx_buffer_length) {
    13d4:	69bb      	ldr	r3, [r7, #24]
    13d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    13d8:	b29b      	uxth	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	d03c      	beq.n	1458 <_usart_interrupt_handler+0xf4>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13de:	69bb      	ldr	r3, [r7, #24]
    13e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	b2da      	uxtb	r2, r3
    13e6:	1c3b      	adds	r3, r7, #0
    13e8:	331c      	adds	r3, #28
    13ea:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    13ec:	69bb      	ldr	r3, [r7, #24]
    13ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13f0:	1c5a      	adds	r2, r3, #1
    13f2:	69bb      	ldr	r3, [r7, #24]
    13f4:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13f6:	69bb      	ldr	r3, [r7, #24]
    13f8:	795b      	ldrb	r3, [r3, #5]
    13fa:	2b01      	cmp	r3, #1
    13fc:	d112      	bne.n	1424 <_usart_interrupt_handler+0xc0>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    13fe:	69bb      	ldr	r3, [r7, #24]
    1400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	b2db      	uxtb	r3, r3
    1406:	021b      	lsls	r3, r3, #8
    1408:	b29a      	uxth	r2, r3
    140a:	1c3b      	adds	r3, r7, #0
    140c:	331c      	adds	r3, #28
    140e:	881b      	ldrh	r3, [r3, #0]
    1410:	4313      	orrs	r3, r2
    1412:	b29a      	uxth	r2, r3
    1414:	1c3b      	adds	r3, r7, #0
    1416:	331c      	adds	r3, #28
    1418:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    141a:	69bb      	ldr	r3, [r7, #24]
    141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    141e:	1c5a      	adds	r2, r3, #1
    1420:	69bb      	ldr	r3, [r7, #24]
    1422:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1424:	1c3b      	adds	r3, r7, #0
    1426:	331c      	adds	r3, #28
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	05db      	lsls	r3, r3, #23
    142c:	0ddb      	lsrs	r3, r3, #23
    142e:	b29a      	uxth	r2, r3
    1430:	697b      	ldr	r3, [r7, #20]
    1432:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1434:	69bb      	ldr	r3, [r7, #24]
    1436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1438:	b29b      	uxth	r3, r3
    143a:	3b01      	subs	r3, #1
    143c:	b29b      	uxth	r3, r3
    143e:	69ba      	ldr	r2, [r7, #24]
    1440:	1c19      	adds	r1, r3, #0
    1442:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1444:	2b00      	cmp	r3, #0
    1446:	d106      	bne.n	1456 <_usart_interrupt_handler+0xf2>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1448:	697b      	ldr	r3, [r7, #20]
    144a:	2201      	movs	r2, #1
    144c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    144e:	697b      	ldr	r3, [r7, #20]
    1450:	2202      	movs	r2, #2
    1452:	759a      	strb	r2, [r3, #22]
    1454:	e003      	b.n	145e <_usart_interrupt_handler+0xfa>
    1456:	e002      	b.n	145e <_usart_interrupt_handler+0xfa>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1458:	697b      	ldr	r3, [r7, #20]
    145a:	2201      	movs	r2, #1
    145c:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    145e:	1c3b      	adds	r3, r7, #0
    1460:	3312      	adds	r3, #18
    1462:	881a      	ldrh	r2, [r3, #0]
    1464:	2302      	movs	r3, #2
    1466:	4013      	ands	r3, r2
    1468:	d011      	beq.n	148e <_usart_interrupt_handler+0x12a>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    146a:	697b      	ldr	r3, [r7, #20]
    146c:	2202      	movs	r2, #2
    146e:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1470:	69ba      	ldr	r2, [r7, #24]
    1472:	2333      	movs	r3, #51	; 0x33
    1474:	2100      	movs	r1, #0
    1476:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1478:	1c3b      	adds	r3, r7, #0
    147a:	3310      	adds	r3, #16
    147c:	881a      	ldrh	r2, [r3, #0]
    147e:	2301      	movs	r3, #1
    1480:	4013      	ands	r3, r2
    1482:	d004      	beq.n	148e <_usart_interrupt_handler+0x12a>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1484:	69bb      	ldr	r3, [r7, #24]
    1486:	68db      	ldr	r3, [r3, #12]
    1488:	69ba      	ldr	r2, [r7, #24]
    148a:	1c10      	adds	r0, r2, #0
    148c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    148e:	1c3b      	adds	r3, r7, #0
    1490:	3312      	adds	r3, #18
    1492:	881a      	ldrh	r2, [r3, #0]
    1494:	2304      	movs	r3, #4
    1496:	4013      	ands	r3, r2
    1498:	d100      	bne.n	149c <_usart_interrupt_handler+0x138>
    149a:	e0a4      	b.n	15e6 <_usart_interrupt_handler+0x282>

		if (module->remaining_rx_buffer_length) {
    149c:	69bb      	ldr	r3, [r7, #24]
    149e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    14a0:	b29b      	uxth	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	d100      	bne.n	14a8 <_usart_interrupt_handler+0x144>
    14a6:	e09b      	b.n	15e0 <_usart_interrupt_handler+0x27c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14a8:	697b      	ldr	r3, [r7, #20]
    14aa:	8b5b      	ldrh	r3, [r3, #26]
    14ac:	b29b      	uxth	r3, r3
    14ae:	b2d9      	uxtb	r1, r3
    14b0:	1c3b      	adds	r3, r7, #0
    14b2:	331f      	adds	r3, #31
    14b4:	223f      	movs	r2, #63	; 0x3f
    14b6:	400a      	ands	r2, r1
    14b8:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14ba:	1c3b      	adds	r3, r7, #0
    14bc:	331f      	adds	r3, #31
    14be:	781a      	ldrb	r2, [r3, #0]
    14c0:	2308      	movs	r3, #8
    14c2:	4013      	ands	r3, r2
    14c4:	d007      	beq.n	14d6 <_usart_interrupt_handler+0x172>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    14c6:	1c3b      	adds	r3, r7, #0
    14c8:	331f      	adds	r3, #31
    14ca:	1c3a      	adds	r2, r7, #0
    14cc:	321f      	adds	r2, #31
    14ce:	7812      	ldrb	r2, [r2, #0]
    14d0:	2108      	movs	r1, #8
    14d2:	438a      	bics	r2, r1
    14d4:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14d6:	1c3b      	adds	r3, r7, #0
    14d8:	331f      	adds	r3, #31
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2b00      	cmp	r3, #0
    14de:	d100      	bne.n	14e2 <_usart_interrupt_handler+0x17e>
    14e0:	e069      	b.n	15b6 <_usart_interrupt_handler+0x252>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    14e2:	1c3b      	adds	r3, r7, #0
    14e4:	331f      	adds	r3, #31
    14e6:	781a      	ldrb	r2, [r3, #0]
    14e8:	2302      	movs	r3, #2
    14ea:	4013      	ands	r3, r2
    14ec:	d00c      	beq.n	1508 <_usart_interrupt_handler+0x1a4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    14ee:	69ba      	ldr	r2, [r7, #24]
    14f0:	2332      	movs	r3, #50	; 0x32
    14f2:	211a      	movs	r1, #26
    14f4:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    14f6:	697b      	ldr	r3, [r7, #20]
    14f8:	8b5b      	ldrh	r3, [r3, #26]
    14fa:	b29b      	uxth	r3, r3
    14fc:	2202      	movs	r2, #2
    14fe:	4313      	orrs	r3, r2
    1500:	b29a      	uxth	r2, r3
    1502:	697b      	ldr	r3, [r7, #20]
    1504:	835a      	strh	r2, [r3, #26]
    1506:	e04a      	b.n	159e <_usart_interrupt_handler+0x23a>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1508:	1c3b      	adds	r3, r7, #0
    150a:	331f      	adds	r3, #31
    150c:	781a      	ldrb	r2, [r3, #0]
    150e:	2304      	movs	r3, #4
    1510:	4013      	ands	r3, r2
    1512:	d00c      	beq.n	152e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1514:	69ba      	ldr	r2, [r7, #24]
    1516:	2332      	movs	r3, #50	; 0x32
    1518:	211e      	movs	r1, #30
    151a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    151c:	697b      	ldr	r3, [r7, #20]
    151e:	8b5b      	ldrh	r3, [r3, #26]
    1520:	b29b      	uxth	r3, r3
    1522:	2204      	movs	r2, #4
    1524:	4313      	orrs	r3, r2
    1526:	b29a      	uxth	r2, r3
    1528:	697b      	ldr	r3, [r7, #20]
    152a:	835a      	strh	r2, [r3, #26]
    152c:	e037      	b.n	159e <_usart_interrupt_handler+0x23a>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    152e:	1c3b      	adds	r3, r7, #0
    1530:	331f      	adds	r3, #31
    1532:	781a      	ldrb	r2, [r3, #0]
    1534:	2301      	movs	r3, #1
    1536:	4013      	ands	r3, r2
    1538:	d00c      	beq.n	1554 <_usart_interrupt_handler+0x1f0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    153a:	69ba      	ldr	r2, [r7, #24]
    153c:	2332      	movs	r3, #50	; 0x32
    153e:	2113      	movs	r1, #19
    1540:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1542:	697b      	ldr	r3, [r7, #20]
    1544:	8b5b      	ldrh	r3, [r3, #26]
    1546:	b29b      	uxth	r3, r3
    1548:	2201      	movs	r2, #1
    154a:	4313      	orrs	r3, r2
    154c:	b29a      	uxth	r2, r3
    154e:	697b      	ldr	r3, [r7, #20]
    1550:	835a      	strh	r2, [r3, #26]
    1552:	e024      	b.n	159e <_usart_interrupt_handler+0x23a>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1554:	1c3b      	adds	r3, r7, #0
    1556:	331f      	adds	r3, #31
    1558:	781a      	ldrb	r2, [r3, #0]
    155a:	2310      	movs	r3, #16
    155c:	4013      	ands	r3, r2
    155e:	d00c      	beq.n	157a <_usart_interrupt_handler+0x216>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1560:	69ba      	ldr	r2, [r7, #24]
    1562:	2332      	movs	r3, #50	; 0x32
    1564:	2142      	movs	r1, #66	; 0x42
    1566:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1568:	697b      	ldr	r3, [r7, #20]
    156a:	8b5b      	ldrh	r3, [r3, #26]
    156c:	b29b      	uxth	r3, r3
    156e:	2210      	movs	r2, #16
    1570:	4313      	orrs	r3, r2
    1572:	b29a      	uxth	r2, r3
    1574:	697b      	ldr	r3, [r7, #20]
    1576:	835a      	strh	r2, [r3, #26]
    1578:	e011      	b.n	159e <_usart_interrupt_handler+0x23a>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    157a:	1c3b      	adds	r3, r7, #0
    157c:	331f      	adds	r3, #31
    157e:	781a      	ldrb	r2, [r3, #0]
    1580:	2320      	movs	r3, #32
    1582:	4013      	ands	r3, r2
    1584:	d00b      	beq.n	159e <_usart_interrupt_handler+0x23a>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1586:	69ba      	ldr	r2, [r7, #24]
    1588:	2332      	movs	r3, #50	; 0x32
    158a:	2141      	movs	r1, #65	; 0x41
    158c:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    158e:	697b      	ldr	r3, [r7, #20]
    1590:	8b5b      	ldrh	r3, [r3, #26]
    1592:	b29b      	uxth	r3, r3
    1594:	2220      	movs	r2, #32
    1596:	4313      	orrs	r3, r2
    1598:	b29a      	uxth	r2, r3
    159a:	697b      	ldr	r3, [r7, #20]
    159c:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    159e:	1c3b      	adds	r3, r7, #0
    15a0:	3310      	adds	r3, #16
    15a2:	881a      	ldrh	r2, [r3, #0]
    15a4:	2304      	movs	r3, #4
    15a6:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    15a8:	d01d      	beq.n	15e6 <_usart_interrupt_handler+0x282>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    15aa:	69bb      	ldr	r3, [r7, #24]
    15ac:	695b      	ldr	r3, [r3, #20]
    15ae:	69ba      	ldr	r2, [r7, #24]
    15b0:	1c10      	adds	r0, r2, #0
    15b2:	4798      	blx	r3
    15b4:	e017      	b.n	15e6 <_usart_interrupt_handler+0x282>
			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    15b6:	697b      	ldr	r3, [r7, #20]
    15b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    15ba:	b29a      	uxth	r2, r3
    15bc:	1c3b      	adds	r3, r7, #0
    15be:	330e      	adds	r3, #14
    15c0:	05d2      	lsls	r2, r2, #23
    15c2:	0dd2      	lsrs	r2, r2, #23
    15c4:	801a      	strh	r2, [r3, #0]
				*(module->rx_buffer_ptr) = received_data;
    15c6:	69bb      	ldr	r3, [r7, #24]
    15c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15ca:	1c3a      	adds	r2, r7, #0
    15cc:	320e      	adds	r2, #14
    15ce:	8812      	ldrh	r2, [r2, #0]
    15d0:	b2d2      	uxtb	r2, r2
    15d2:	701a      	strb	r2, [r3, #0]
				(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    15d4:	69bb      	ldr	r3, [r7, #24]
    15d6:	691b      	ldr	r3, [r3, #16]
    15d8:	69ba      	ldr	r2, [r7, #24]
    15da:	1c10      	adds	r0, r2, #0
    15dc:	4798      	blx	r3
    15de:	e002      	b.n	15e6 <_usart_interrupt_handler+0x282>
					//}
				//}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15e0:	697b      	ldr	r3, [r7, #20]
    15e2:	2204      	movs	r2, #4
    15e4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    15e6:	1c3b      	adds	r3, r7, #0
    15e8:	3312      	adds	r3, #18
    15ea:	881a      	ldrh	r2, [r3, #0]
    15ec:	2310      	movs	r3, #16
    15ee:	4013      	ands	r3, r2
    15f0:	d010      	beq.n	1614 <_usart_interrupt_handler+0x2b0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    15f2:	697b      	ldr	r3, [r7, #20]
    15f4:	2210      	movs	r2, #16
    15f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    15f8:	697b      	ldr	r3, [r7, #20]
    15fa:	2210      	movs	r2, #16
    15fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    15fe:	1c3b      	adds	r3, r7, #0
    1600:	3310      	adds	r3, #16
    1602:	881a      	ldrh	r2, [r3, #0]
    1604:	2310      	movs	r3, #16
    1606:	4013      	ands	r3, r2
    1608:	d004      	beq.n	1614 <_usart_interrupt_handler+0x2b0>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    160a:	69bb      	ldr	r3, [r7, #24]
    160c:	69db      	ldr	r3, [r3, #28]
    160e:	69ba      	ldr	r2, [r7, #24]
    1610:	1c10      	adds	r0, r2, #0
    1612:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1614:	1c3b      	adds	r3, r7, #0
    1616:	3312      	adds	r3, #18
    1618:	881a      	ldrh	r2, [r3, #0]
    161a:	2320      	movs	r3, #32
    161c:	4013      	ands	r3, r2
    161e:	d010      	beq.n	1642 <_usart_interrupt_handler+0x2de>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1620:	697b      	ldr	r3, [r7, #20]
    1622:	2220      	movs	r2, #32
    1624:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1626:	697b      	ldr	r3, [r7, #20]
    1628:	2220      	movs	r2, #32
    162a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    162c:	1c3b      	adds	r3, r7, #0
    162e:	3310      	adds	r3, #16
    1630:	881a      	ldrh	r2, [r3, #0]
    1632:	2308      	movs	r3, #8
    1634:	4013      	ands	r3, r2
    1636:	d004      	beq.n	1642 <_usart_interrupt_handler+0x2de>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1638:	69bb      	ldr	r3, [r7, #24]
    163a:	699b      	ldr	r3, [r3, #24]
    163c:	69ba      	ldr	r2, [r7, #24]
    163e:	1c10      	adds	r0, r2, #0
    1640:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1642:	1c3b      	adds	r3, r7, #0
    1644:	3312      	adds	r3, #18
    1646:	881a      	ldrh	r2, [r3, #0]
    1648:	2308      	movs	r3, #8
    164a:	4013      	ands	r3, r2
    164c:	d010      	beq.n	1670 <_usart_interrupt_handler+0x30c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    164e:	697b      	ldr	r3, [r7, #20]
    1650:	2208      	movs	r2, #8
    1652:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1654:	697b      	ldr	r3, [r7, #20]
    1656:	2208      	movs	r2, #8
    1658:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    165a:	1c3b      	adds	r3, r7, #0
    165c:	3310      	adds	r3, #16
    165e:	881a      	ldrh	r2, [r3, #0]
    1660:	2320      	movs	r3, #32
    1662:	4013      	ands	r3, r2
    1664:	d004      	beq.n	1670 <_usart_interrupt_handler+0x30c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1666:	69bb      	ldr	r3, [r7, #24]
    1668:	6a1b      	ldr	r3, [r3, #32]
    166a:	69ba      	ldr	r2, [r7, #24]
    166c:	1c10      	adds	r0, r2, #0
    166e:	4798      	blx	r3
		}
	}
#endif
}
    1670:	46bd      	mov	sp, r7
    1672:	b008      	add	sp, #32
    1674:	bd80      	pop	{r7, pc}
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	200002f4 	.word	0x200002f4

0000167c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    167c:	1c03      	adds	r3, r0, #0
    167e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1680:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1682:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1684:	4299      	cmp	r1, r3
    1686:	d200      	bcs.n	168a <_sercom_get_sync_baud_val+0xe>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1688:	bd10      	pop	{r4, pc}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    168a:	2400      	movs	r4, #0
    168c:	e000      	b.n	1690 <_sercom_get_sync_baud_val+0x14>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    168e:	1c04      	adds	r4, r0, #0
    1690:	1c60      	adds	r0, r4, #1
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1692:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
    1694:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1696:	428b      	cmp	r3, r1
    1698:	d9f9      	bls.n	168e <_sercom_get_sync_baud_val+0x12>


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    169a:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    169c:	2cff      	cmp	r4, #255	; 0xff
    169e:	d8f3      	bhi.n	1688 <_sercom_get_sync_baud_val+0xc>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    16a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    16a2:	2000      	movs	r0, #0
    16a4:	e7f0      	b.n	1688 <_sercom_get_sync_baud_val+0xc>
    16a6:	46c0      	nop			; (mov r8, r8)

000016a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    16a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16aa:	4656      	mov	r6, sl
    16ac:	4644      	mov	r4, r8
    16ae:	465f      	mov	r7, fp
    16b0:	464d      	mov	r5, r9
    16b2:	b4f0      	push	{r4, r5, r6, r7}
    16b4:	b087      	sub	sp, #28
    16b6:	9204      	str	r2, [sp, #16]
    16b8:	aa10      	add	r2, sp, #64	; 0x40
    16ba:	7812      	ldrb	r2, [r2, #0]
    16bc:	1c0e      	adds	r6, r1, #0
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    16be:	1c01      	adds	r1, r0, #0
    16c0:	4351      	muls	r1, r2
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    16c2:	1c04      	adds	r4, r0, #0
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16c4:	2040      	movs	r0, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    16c6:	42b1      	cmp	r1, r6
    16c8:	d906      	bls.n	16d8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    16ca:	b007      	add	sp, #28
    16cc:	bc3c      	pop	{r2, r3, r4, r5}
    16ce:	4690      	mov	r8, r2
    16d0:	4699      	mov	r9, r3
    16d2:	46a2      	mov	sl, r4
    16d4:	46ab      	mov	fp, r5
    16d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    16d8:	2b00      	cmp	r3, #0
    16da:	d154      	bne.n	1786 <_sercom_get_async_baud_val+0xde>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    16dc:	1c10      	adds	r0, r2, #0
    16de:	2100      	movs	r1, #0
    16e0:	1c22      	adds	r2, r4, #0
    16e2:	4c6f      	ldr	r4, [pc, #444]	; (18a0 <_sercom_get_async_baud_val+0x1f8>)
    16e4:	47a0      	blx	r4
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    16e6:	2701      	movs	r7, #1
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    16e8:	1c34      	adds	r4, r6, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    16ea:	263f      	movs	r6, #63	; 0x3f
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    16ec:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    16ee:	2500      	movs	r5, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    16f0:	2000      	movs	r0, #0
    16f2:	2100      	movs	r1, #0
    16f4:	2200      	movs	r2, #0
    16f6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    16f8:	46b4      	mov	ip, r6
		bit_shift = (uint64_t)1 << i;
    16fa:	46b8      	mov	r8, r7
    16fc:	e00a      	b.n	1714 <_sercom_get_async_baud_val+0x6c>
    16fe:	429d      	cmp	r5, r3
    1700:	d057      	beq.n	17b2 <_sercom_get_async_baud_val+0x10a>
    1702:	9e01      	ldr	r6, [sp, #4]
    1704:	9f00      	ldr	r7, [sp, #0]
    1706:	1c33      	adds	r3, r6, #0
    1708:	46b9      	mov	r9, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    170a:	4666      	mov	r6, ip
    170c:	464a      	mov	r2, r9
    170e:	3e01      	subs	r6, #1
    1710:	46b4      	mov	ip, r6
    1712:	d32f      	bcc.n	1774 <_sercom_get_async_baud_val+0xcc>
		bit_shift = (uint64_t)1 << i;
    1714:	4666      	mov	r6, ip
    1716:	3e20      	subs	r6, #32
    1718:	d444      	bmi.n	17a4 <_sercom_get_async_baud_val+0xfc>
    171a:	4647      	mov	r7, r8
    171c:	40b7      	lsls	r7, r6
    171e:	46b9      	mov	r9, r7
    1720:	4666      	mov	r6, ip
    1722:	4647      	mov	r7, r8
    1724:	40b7      	lsls	r7, r6
    1726:	46ba      	mov	sl, r7

		r = r << 1;
    1728:	1892      	adds	r2, r2, r2
    172a:	415b      	adcs	r3, r3

		if (n & bit_shift) {
			r |= 0x01;
    172c:	4647      	mov	r7, r8
    172e:	4317      	orrs	r7, r2
    1730:	9703      	str	r7, [sp, #12]
    1732:	465e      	mov	r6, fp
    1734:	464f      	mov	r7, r9
    1736:	423e      	tst	r6, r7
    1738:	d031      	beq.n	179e <_sercom_get_async_baud_val+0xf6>
    173a:	9e03      	ldr	r6, [sp, #12]
    173c:	1c1f      	adds	r7, r3, #0
    173e:	1c32      	adds	r2, r6, #0
    1740:	1c3b      	adds	r3, r7, #0
		}

		if (r >= d) {
			r = r - d;
    1742:	1b36      	subs	r6, r6, r4
    1744:	41af      	sbcs	r7, r5
    1746:	9600      	str	r6, [sp, #0]
    1748:	9701      	str	r7, [sp, #4]
			q |= bit_shift;
    174a:	4657      	mov	r7, sl
    174c:	464e      	mov	r6, r9
    174e:	4307      	orrs	r7, r0
    1750:	430e      	orrs	r6, r1
    1752:	46ba      	mov	sl, r7
    1754:	46b1      	mov	r9, r6
    1756:	429d      	cmp	r5, r3
    1758:	d81e      	bhi.n	1798 <_sercom_get_async_baud_val+0xf0>
    175a:	d01b      	beq.n	1794 <_sercom_get_async_baud_val+0xec>
    175c:	4650      	mov	r0, sl
    175e:	4649      	mov	r1, r9
    1760:	429d      	cmp	r5, r3
    1762:	d9cc      	bls.n	16fe <_sercom_get_async_baud_val+0x56>
    1764:	4691      	mov	r9, r2
    1766:	1c1e      	adds	r6, r3, #0
    1768:	1c33      	adds	r3, r6, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    176a:	4666      	mov	r6, ip
    176c:	464a      	mov	r2, r9
    176e:	3e01      	subs	r6, #1
    1770:	46b4      	mov	ip, r6
    1772:	d2cf      	bcs.n	1714 <_sercom_get_async_baud_val+0x6c>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1774:	4b49      	ldr	r3, [pc, #292]	; (189c <_sercom_get_async_baud_val+0x1f4>)
    1776:	4a48      	ldr	r2, [pc, #288]	; (1898 <_sercom_get_async_baud_val+0x1f0>)
    1778:	1a12      	subs	r2, r2, r0
    177a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    177c:	0c12      	lsrs	r2, r2, #16
    177e:	0419      	lsls	r1, r3, #16
    1780:	4311      	orrs	r1, r2
    1782:	b289      	uxth	r1, r1
    1784:	e002      	b.n	178c <_sercom_get_async_baud_val+0xe4>
    1786:	2100      	movs	r1, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1788:	2b01      	cmp	r3, #1
    178a:	d017      	beq.n	17bc <_sercom_get_async_baud_val+0x114>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    178c:	9f04      	ldr	r7, [sp, #16]
	return STATUS_OK;
    178e:	2000      	movs	r0, #0
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    1790:	8039      	strh	r1, [r7, #0]
	return STATUS_OK;
    1792:	e79a      	b.n	16ca <_sercom_get_async_baud_val+0x22>
    1794:	4294      	cmp	r4, r2
    1796:	d9e1      	bls.n	175c <_sercom_get_async_baud_val+0xb4>
    1798:	4682      	mov	sl, r0
    179a:	4689      	mov	r9, r1
    179c:	e7de      	b.n	175c <_sercom_get_async_baud_val+0xb4>
    179e:	1c16      	adds	r6, r2, #0
    17a0:	1c1f      	adds	r7, r3, #0
    17a2:	e7cc      	b.n	173e <_sercom_get_async_baud_val+0x96>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    17a4:	2620      	movs	r6, #32
    17a6:	4667      	mov	r7, ip
    17a8:	1bf7      	subs	r7, r6, r7
    17aa:	4646      	mov	r6, r8
    17ac:	40fe      	lsrs	r6, r7
    17ae:	46b1      	mov	r9, r6
    17b0:	e7b6      	b.n	1720 <_sercom_get_async_baud_val+0x78>
    17b2:	4294      	cmp	r4, r2
    17b4:	d9a5      	bls.n	1702 <_sercom_get_async_baud_val+0x5a>
    17b6:	4691      	mov	r9, r2
    17b8:	1c1e      	adds	r6, r3, #0
    17ba:	e7d5      	b.n	1768 <_sercom_get_async_baud_val+0xc0>
    17bc:	1c10      	adds	r0, r2, #0
    17be:	2300      	movs	r3, #0
    17c0:	1c22      	adds	r2, r4, #0
    17c2:	4c37      	ldr	r4, [pc, #220]	; (18a0 <_sercom_get_async_baud_val+0x1f8>)
    17c4:	47a0      	blx	r4
    17c6:	0f77      	lsrs	r7, r6, #29
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    17c8:	2200      	movs	r2, #0
    17ca:	00f6      	lsls	r6, r6, #3
    17cc:	46b9      	mov	r9, r7
    17ce:	46b2      	mov	sl, r6
    17d0:	9203      	str	r2, [sp, #12]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    17d2:	2701      	movs	r7, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    17d4:	1c04      	adds	r4, r0, #0
    17d6:	1c0d      	adds	r5, r1, #0
    17d8:	9b03      	ldr	r3, [sp, #12]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    17da:	2600      	movs	r6, #0
    17dc:	b2db      	uxtb	r3, r3
    17de:	9305      	str	r3, [sp, #20]
    17e0:	46b0      	mov	r8, r6
    17e2:	2200      	movs	r2, #0
    17e4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    17e6:	263f      	movs	r6, #63	; 0x3f
    17e8:	e018      	b.n	181c <_sercom_get_async_baud_val+0x174>
    17ea:	4658      	mov	r0, fp
    17ec:	1c19      	adds	r1, r3, #0
    17ee:	1c02      	adds	r2, r0, #0
    17f0:	1c0b      	adds	r3, r1, #0
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    17f2:	1b00      	subs	r0, r0, r4
    17f4:	41a9      	sbcs	r1, r5
    17f6:	9000      	str	r0, [sp, #0]
    17f8:	9101      	str	r1, [sp, #4]
			q |= bit_shift;
    17fa:	4661      	mov	r1, ip
    17fc:	4640      	mov	r0, r8
    17fe:	4301      	orrs	r1, r0
    1800:	468c      	mov	ip, r1
    1802:	429d      	cmp	r5, r3
    1804:	d83b      	bhi.n	187e <_sercom_get_async_baud_val+0x1d6>
    1806:	d038      	beq.n	187a <_sercom_get_async_baud_val+0x1d2>
    1808:	46e0      	mov	r8, ip
    180a:	429d      	cmp	r5, r3
    180c:	d822      	bhi.n	1854 <_sercom_get_async_baud_val+0x1ac>
    180e:	d01f      	beq.n	1850 <_sercom_get_async_baud_val+0x1a8>
    1810:	9800      	ldr	r0, [sp, #0]
    1812:	9901      	ldr	r1, [sp, #4]
    1814:	1c02      	adds	r2, r0, #0
    1816:	1c0b      	adds	r3, r1, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1818:	3e01      	subs	r6, #1
    181a:	d321      	bcc.n	1860 <_sercom_get_async_baud_val+0x1b8>
		bit_shift = (uint64_t)1 << i;
    181c:	1c30      	adds	r0, r6, #0
    181e:	3820      	subs	r0, #32
    1820:	d42f      	bmi.n	1882 <_sercom_get_async_baud_val+0x1da>
    1822:	1c39      	adds	r1, r7, #0
    1824:	4081      	lsls	r1, r0
    1826:	9100      	str	r1, [sp, #0]

		r = r << 1;
    1828:	1892      	adds	r2, r2, r2
    182a:	415b      	adcs	r3, r3

		if (n & bit_shift) {
			r |= 0x01;
    182c:	1c39      	adds	r1, r7, #0
    182e:	4311      	orrs	r1, r2
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1830:	1c38      	adds	r0, r7, #0
    1832:	40b0      	lsls	r0, r6

		r = r << 1;

		if (n & bit_shift) {
			r |= 0x01;
    1834:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;

		r = r << 1;

		if (n & bit_shift) {
    1836:	4651      	mov	r1, sl
    1838:	4001      	ands	r1, r0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    183a:	4684      	mov	ip, r0

		r = r << 1;

		if (n & bit_shift) {
    183c:	9800      	ldr	r0, [sp, #0]
    183e:	9102      	str	r1, [sp, #8]
    1840:	4649      	mov	r1, r9
    1842:	4008      	ands	r0, r1
    1844:	9902      	ldr	r1, [sp, #8]
    1846:	4301      	orrs	r1, r0
    1848:	d1cf      	bne.n	17ea <_sercom_get_async_baud_val+0x142>
    184a:	1c10      	adds	r0, r2, #0
    184c:	1c19      	adds	r1, r3, #0
    184e:	e7ce      	b.n	17ee <_sercom_get_async_baud_val+0x146>
    1850:	4294      	cmp	r4, r2
    1852:	d9dd      	bls.n	1810 <_sercom_get_async_baud_val+0x168>
    1854:	1c10      	adds	r0, r2, #0
    1856:	1c19      	adds	r1, r3, #0
    1858:	1c02      	adds	r2, r0, #0
    185a:	1c0b      	adds	r3, r1, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    185c:	3e01      	subs	r6, #1
    185e:	d2dd      	bcs.n	181c <_sercom_get_async_baud_val+0x174>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    1860:	9a03      	ldr	r2, [sp, #12]
    1862:	4661      	mov	r1, ip
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    1864:	4e0f      	ldr	r6, [pc, #60]	; (18a4 <_sercom_get_async_baud_val+0x1fc>)
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    1866:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    1868:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    186a:	42b3      	cmp	r3, r6
    186c:	d90f      	bls.n	188e <_sercom_get_async_baud_val+0x1e6>
    186e:	3201      	adds	r2, #1
    1870:	9203      	str	r2, [sp, #12]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1872:	2a08      	cmp	r2, #8
    1874:	d1b0      	bne.n	17d8 <_sercom_get_async_baud_val+0x130>
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1876:	2040      	movs	r0, #64	; 0x40
    1878:	e727      	b.n	16ca <_sercom_get_async_baud_val+0x22>
    187a:	4294      	cmp	r4, r2
    187c:	d9c4      	bls.n	1808 <_sercom_get_async_baud_val+0x160>
    187e:	46c4      	mov	ip, r8
    1880:	e7c2      	b.n	1808 <_sercom_get_async_baud_val+0x160>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1882:	2120      	movs	r1, #32
    1884:	1b88      	subs	r0, r1, r6
    1886:	1c39      	adds	r1, r7, #0
    1888:	40c1      	lsrs	r1, r0
    188a:	9100      	str	r1, [sp, #0]
    188c:	e7cc      	b.n	1828 <_sercom_get_async_baud_val+0x180>
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    188e:	9805      	ldr	r0, [sp, #20]
    1890:	0341      	lsls	r1, r0, #13
    1892:	430b      	orrs	r3, r1
    1894:	b299      	uxth	r1, r3
    1896:	e779      	b.n	178c <_sercom_get_async_baud_val+0xe4>
    1898:	00000000 	.word	0x00000000
    189c:	00000001 	.word	0x00000001
    18a0:	00002749 	.word	0x00002749
    18a4:	00001fff 	.word	0x00001fff

000018a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    18a8:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    18aa:	4c0f      	ldr	r4, [pc, #60]	; (18e8 <sercom_set_gclk_generator+0x40>)
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    18ac:	b083      	sub	sp, #12
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    18ae:	7823      	ldrb	r3, [r4, #0]
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    18b0:	1c05      	adds	r5, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    18b2:	2b00      	cmp	r3, #0
    18b4:	d009      	beq.n	18ca <sercom_set_gclk_generator+0x22>
    18b6:	2900      	cmp	r1, #0
    18b8:	d107      	bne.n	18ca <sercom_set_gclk_generator+0x22>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    18ba:	7862      	ldrb	r2, [r4, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    18bc:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    18be:	1b55      	subs	r5, r2, r5
    18c0:	1e6a      	subs	r2, r5, #1
    18c2:	4195      	sbcs	r5, r2
    18c4:	426d      	negs	r5, r5
    18c6:	4028      	ands	r0, r5
    18c8:	e00c      	b.n	18e4 <sercom_set_gclk_generator+0x3c>
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    18ca:	466b      	mov	r3, sp
    18cc:	701d      	strb	r5, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    18ce:	200d      	movs	r0, #13
    18d0:	4669      	mov	r1, sp
    18d2:	4b06      	ldr	r3, [pc, #24]	; (18ec <sercom_set_gclk_generator+0x44>)
    18d4:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18d6:	200d      	movs	r0, #13
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <sercom_set_gclk_generator+0x48>)
    18da:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    18dc:	2301      	movs	r3, #1
		gclk_chan_conf.source_generator = generator_source;
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(SERCOM_GCLK_ID);

		/* Save config */
		_sercom_config.generator_source = generator_source;
    18de:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    18e0:	7023      	strb	r3, [r4, #0]

		return STATUS_OK;
    18e2:	2000      	movs	r0, #0
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    18e4:	b003      	add	sp, #12
    18e6:	bd30      	pop	{r4, r5, pc}
    18e8:	20000280 	.word	0x20000280
    18ec:	00001ef5 	.word	0x00001ef5
    18f0:	00001f59 	.word	0x00001f59

000018f4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    18f4:	4b13      	ldr	r3, [pc, #76]	; (1944 <_sercom_get_default_pad+0x50>)
    18f6:	4298      	cmp	r0, r3
    18f8:	d00e      	beq.n	1918 <_sercom_get_default_pad+0x24>
    18fa:	4b13      	ldr	r3, [pc, #76]	; (1948 <_sercom_get_default_pad+0x54>)
    18fc:	4298      	cmp	r0, r3
    18fe:	d109      	bne.n	1914 <_sercom_get_default_pad+0x20>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1900:	2901      	cmp	r1, #1
    1902:	d01d      	beq.n	1940 <_sercom_get_default_pad+0x4c>
    1904:	2900      	cmp	r1, #0
    1906:	d019      	beq.n	193c <_sercom_get_default_pad+0x48>
    1908:	2902      	cmp	r1, #2
    190a:	d011      	beq.n	1930 <_sercom_get_default_pad+0x3c>
    190c:	2903      	cmp	r1, #3
    190e:	d101      	bne.n	1914 <_sercom_get_default_pad+0x20>
    1910:	480e      	ldr	r0, [pc, #56]	; (194c <_sercom_get_default_pad+0x58>)
    1912:	e000      	b.n	1916 <_sercom_get_default_pad+0x22>
	}

	Assert(false);
	return 0;
    1914:	2000      	movs	r0, #0
}
    1916:	4770      	bx	lr
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1918:	2901      	cmp	r1, #1
    191a:	d00d      	beq.n	1938 <_sercom_get_default_pad+0x44>
    191c:	2900      	cmp	r1, #0
    191e:	d009      	beq.n	1934 <_sercom_get_default_pad+0x40>
    1920:	2902      	cmp	r1, #2
    1922:	d003      	beq.n	192c <_sercom_get_default_pad+0x38>
    1924:	2903      	cmp	r1, #3
    1926:	d1f5      	bne.n	1914 <_sercom_get_default_pad+0x20>
    1928:	4809      	ldr	r0, [pc, #36]	; (1950 <_sercom_get_default_pad+0x5c>)
    192a:	e7f4      	b.n	1916 <_sercom_get_default_pad+0x22>
    192c:	4809      	ldr	r0, [pc, #36]	; (1954 <_sercom_get_default_pad+0x60>)
    192e:	e7f2      	b.n	1916 <_sercom_get_default_pad+0x22>
    1930:	4809      	ldr	r0, [pc, #36]	; (1958 <_sercom_get_default_pad+0x64>)
    1932:	e7f0      	b.n	1916 <_sercom_get_default_pad+0x22>
    1934:	4809      	ldr	r0, [pc, #36]	; (195c <_sercom_get_default_pad+0x68>)
    1936:	e7ee      	b.n	1916 <_sercom_get_default_pad+0x22>
    1938:	4809      	ldr	r0, [pc, #36]	; (1960 <_sercom_get_default_pad+0x6c>)
    193a:	e7ec      	b.n	1916 <_sercom_get_default_pad+0x22>
    193c:	4809      	ldr	r0, [pc, #36]	; (1964 <_sercom_get_default_pad+0x70>)
    193e:	e7ea      	b.n	1916 <_sercom_get_default_pad+0x22>
    1940:	4809      	ldr	r0, [pc, #36]	; (1968 <_sercom_get_default_pad+0x74>)
    1942:	e7e8      	b.n	1916 <_sercom_get_default_pad+0x22>
    1944:	42000800 	.word	0x42000800
    1948:	42000c00 	.word	0x42000c00
    194c:	00190002 	.word	0x00190002
    1950:	00090003 	.word	0x00090003
    1954:	00080003 	.word	0x00080003
    1958:	00180002 	.word	0x00180002
    195c:	00040003 	.word	0x00040003
    1960:	00050003 	.word	0x00050003
    1964:	001e0002 	.word	0x001e0002
    1968:	001f0002 	.word	0x001f0002

0000196c <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    196c:	4b04      	ldr	r3, [pc, #16]	; (1980 <_sercom_get_sercom_inst_index+0x14>)
    196e:	4298      	cmp	r0, r3
    1970:	d004      	beq.n	197c <_sercom_get_sercom_inst_index+0x10>
    1972:	4b04      	ldr	r3, [pc, #16]	; (1984 <_sercom_get_sercom_inst_index+0x18>)
    1974:	18c0      	adds	r0, r0, r3
    1976:	4243      	negs	r3, r0
    1978:	4158      	adcs	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    197a:	4770      	bx	lr
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    197c:	2000      	movs	r0, #0
			return i;
    197e:	e7fc      	b.n	197a <_sercom_get_sercom_inst_index+0xe>
    1980:	42000800 	.word	0x42000800
    1984:	bdfff400 	.word	0xbdfff400

00001988 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1988:	4770      	bx	lr
    198a:	46c0      	nop			; (mov r8, r8)

0000198c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    198c:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    198e:	4c08      	ldr	r4, [pc, #32]	; (19b0 <_sercom_set_handler+0x24>)
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <_sercom_set_handler+0x28>)
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1992:	7822      	ldrb	r2, [r4, #0]
    1994:	2a00      	cmp	r2, #0
    1996:	d107      	bne.n	19a8 <_sercom_set_handler+0x1c>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1998:	4d07      	ldr	r5, [pc, #28]	; (19b8 <_sercom_set_handler+0x2c>)
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    199a:	4e08      	ldr	r6, [pc, #32]	; (19bc <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    199c:	602a      	str	r2, [r5, #0]
    199e:	606a      	str	r2, [r5, #4]
		}

		_handler_table_initialized = true;
    19a0:	2201      	movs	r2, #1
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    19a2:	601e      	str	r6, [r3, #0]
    19a4:	605e      	str	r6, [r3, #4]
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    19a6:	7022      	strb	r2, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    19a8:	0080      	lsls	r0, r0, #2
    19aa:	5019      	str	r1, [r3, r0]
}
    19ac:	bd70      	pop	{r4, r5, r6, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000284 	.word	0x20000284
    19b4:	20000288 	.word	0x20000288
    19b8:	200002f4 	.word	0x200002f4
    19bc:	00001989 	.word	0x00001989

000019c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    19c0:	b530      	push	{r4, r5, lr}
    19c2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    19c4:	ac01      	add	r4, sp, #4
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    19c6:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    19c8:	4905      	ldr	r1, [pc, #20]	; (19e0 <_sercom_get_interrupt_vector+0x20>)
    19ca:	2202      	movs	r2, #2
    19cc:	1c20      	adds	r0, r4, #0
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <_sercom_get_interrupt_vector+0x24>)
    19d0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    19d2:	1c28      	adds	r0, r5, #0
    19d4:	4b04      	ldr	r3, [pc, #16]	; (19e8 <_sercom_get_interrupt_vector+0x28>)
    19d6:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    19d8:	5620      	ldrsb	r0, [r4, r0]
}
    19da:	b003      	add	sp, #12
    19dc:	bd30      	pop	{r4, r5, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	00003320 	.word	0x00003320
    19e4:	000032b3 	.word	0x000032b3
    19e8:	0000196d 	.word	0x0000196d

000019ec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19ec:	b508      	push	{r3, lr}
    19ee:	4b02      	ldr	r3, [pc, #8]	; (19f8 <SERCOM0_Handler+0xc>)
    19f0:	2000      	movs	r0, #0
    19f2:	681b      	ldr	r3, [r3, #0]
    19f4:	4798      	blx	r3
    19f6:	bd08      	pop	{r3, pc}
    19f8:	20000288 	.word	0x20000288

000019fc <SERCOM1_Handler>:
    19fc:	b508      	push	{r3, lr}
    19fe:	4b02      	ldr	r3, [pc, #8]	; (1a08 <SERCOM1_Handler+0xc>)
    1a00:	2001      	movs	r0, #1
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	4798      	blx	r3
    1a06:	bd08      	pop	{r3, pc}
    1a08:	20000288 	.word	0x20000288

00001a0c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a0c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1a0e:	2a00      	cmp	r2, #0
    1a10:	d001      	beq.n	1a16 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1a12:	1c18      	adds	r0, r3, #0
    1a14:	4770      	bx	lr
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1a16:	4b07      	ldr	r3, [pc, #28]	; (1a34 <extint_register_callback+0x28>)
    1a18:	0089      	lsls	r1, r1, #2
    1a1a:	58ca      	ldr	r2, [r1, r3]
    1a1c:	2a00      	cmp	r2, #0
    1a1e:	d006      	beq.n	1a2e <extint_register_callback+0x22>
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1a20:	1a12      	subs	r2, r2, r0
    1a22:	1e50      	subs	r0, r2, #1
    1a24:	4182      	sbcs	r2, r0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1a26:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1a28:	4252      	negs	r2, r2
    1a2a:	4013      	ands	r3, r2
    1a2c:	e7f1      	b.n	1a12 <extint_register_callback+0x6>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
    1a2e:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    1a30:	2300      	movs	r3, #0
    1a32:	e7ee      	b.n	1a12 <extint_register_callback+0x6>
    1a34:	200002b0 	.word	0x200002b0

00001a38 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a38:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1a3a:	2900      	cmp	r1, #0
    1a3c:	d001      	beq.n	1a42 <extint_chan_enable_callback+0xa>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1a3e:	1c18      	adds	r0, r3, #0
    1a40:	4770      	bx	lr
	} else {
		Assert(false);
		return NULL;
    1a42:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1a44:	281f      	cmp	r0, #31
    1a46:	d904      	bls.n	1a52 <extint_chan_enable_callback+0x1a>
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1a48:	2201      	movs	r2, #1
    1a4a:	4082      	lsls	r2, r0
    1a4c:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a4e:	2300      	movs	r3, #0
    1a50:	e7f5      	b.n	1a3e <extint_chan_enable_callback+0x6>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1a52:	4b03      	ldr	r3, [pc, #12]	; (1a60 <extint_chan_enable_callback+0x28>)
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1a54:	2201      	movs	r2, #1
    1a56:	4082      	lsls	r2, r0
    1a58:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a5a:	2300      	movs	r3, #0
    1a5c:	e7ef      	b.n	1a3e <extint_chan_enable_callback+0x6>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	40001800 	.word	0x40001800

00001a64 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1a66:	4c0c      	ldr	r4, [pc, #48]	; (1a98 <EIC_Handler+0x34>)
    1a68:	2300      	movs	r3, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	return (eic_module->INTFLAG.reg & eic_mask);
    1a6a:	4d0c      	ldr	r5, [pc, #48]	; (1a9c <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1a6c:	4f0c      	ldr	r7, [pc, #48]	; (1aa0 <EIC_Handler+0x3c>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1a6e:	7023      	strb	r3, [r4, #0]
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1a70:	2601      	movs	r6, #1
    1a72:	1c32      	adds	r2, r6, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    1a74:	6929      	ldr	r1, [r5, #16]
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1a76:	409a      	lsls	r2, r3
		if (extint_chan_is_detected(_current_channel)) {
    1a78:	4211      	tst	r1, r2
    1a7a:	d006      	beq.n	1a8a <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1a7c:	612a      	str	r2, [r5, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1a7e:	009b      	lsls	r3, r3, #2
    1a80:	59db      	ldr	r3, [r3, r7]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d000      	beq.n	1a88 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1a86:	4798      	blx	r3
    1a88:	7823      	ldrb	r3, [r4, #0]

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1a8a:	3301      	adds	r3, #1
    1a8c:	b2db      	uxtb	r3, r3
    1a8e:	7023      	strb	r3, [r4, #0]
    1a90:	2b0f      	cmp	r3, #15
    1a92:	d9ee      	bls.n	1a72 <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	200002fc 	.word	0x200002fc
    1a9c:	40001800 	.word	0x40001800
    1aa0:	200002b0 	.word	0x200002b0

00001aa4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1aa4:	b500      	push	{lr}
    1aa6:	b083      	sub	sp, #12
    1aa8:	466a      	mov	r2, sp
    1aaa:	2380      	movs	r3, #128	; 0x80
    1aac:	7013      	strb	r3, [r2, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1aae:	780b      	ldrb	r3, [r1, #0]
    1ab0:	7053      	strb	r3, [r2, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1ab2:	784b      	ldrb	r3, [r1, #1]
    1ab4:	7093      	strb	r3, [r2, #2]
	pinmux_config.powersave    = config->powersave;
    1ab6:	788b      	ldrb	r3, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1ab8:	4669      	mov	r1, sp
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
	pinmux_config.powersave    = config->powersave;
    1aba:	70d3      	strb	r3, [r2, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1abc:	4b01      	ldr	r3, [pc, #4]	; (1ac4 <port_pin_set_config+0x20>)
    1abe:	4798      	blx	r3
}
    1ac0:	b003      	add	sp, #12
    1ac2:	bd00      	pop	{pc}
    1ac4:	00002031 	.word	0x00002031

00001ac8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1ac8:	b570      	push	{r4, r5, r6, lr}
    1aca:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1acc:	466b      	mov	r3, sp
    1ace:	2501      	movs	r5, #1
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1ad0:	4c0b      	ldr	r4, [pc, #44]	; (1b00 <system_board_init+0x38>)
	config->powersave  = false;
    1ad2:	2600      	movs	r6, #0
    1ad4:	4669      	mov	r1, sp
    1ad6:	2008      	movs	r0, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1ad8:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    1ada:	709e      	strb	r6, [r3, #2]
	 */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1adc:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1ade:	47a0      	blx	r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <system_board_init+0x3c>)
    1ae2:	2280      	movs	r2, #128	; 0x80
    1ae4:	0052      	lsls	r2, r2, #1
    1ae6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SW1_INT_PIN, &pin_conf);	
    1ae8:	4669      	mov	r1, sp
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1aea:	466b      	mov	r3, sp
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SW1_INT_PIN, &pin_conf);	
    1aec:	2005      	movs	r0, #5
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1aee:	701e      	strb	r6, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1af0:	705d      	strb	r5, [r3, #1]
	port_pin_set_config(SW1_INT_PIN, &pin_conf);	
    1af2:	47a0      	blx	r4
	
	port_pin_set_config(SW2_PIN, &pin_conf);	
    1af4:	2009      	movs	r0, #9
    1af6:	4669      	mov	r1, sp
    1af8:	47a0      	blx	r4
    1afa:	b002      	add	sp, #8
    1afc:	bd70      	pop	{r4, r5, r6, pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00001aa5 	.word	0x00001aa5
    1b04:	41004400 	.word	0x41004400

00001b08 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1b08:	4b0b      	ldr	r3, [pc, #44]	; (1b38 <cpu_irq_enter_critical+0x30>)
    1b0a:	681a      	ldr	r2, [r3, #0]
    1b0c:	2a00      	cmp	r2, #0
    1b0e:	d105      	bne.n	1b1c <cpu_irq_enter_critical+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b10:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    1b14:	2900      	cmp	r1, #0
    1b16:	d005      	beq.n	1b24 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1b18:	4908      	ldr	r1, [pc, #32]	; (1b3c <cpu_irq_enter_critical+0x34>)
    1b1a:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1b1c:	681a      	ldr	r2, [r3, #0]
    1b1e:	3201      	adds	r2, #1
    1b20:	601a      	str	r2, [r3, #0]
}
    1b22:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b24:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1b26:	f3bf 8f5f 	dmb	sy

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
    1b2a:	4a05      	ldr	r2, [pc, #20]	; (1b40 <cpu_irq_enter_critical+0x38>)
    1b2c:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    1b2e:	4a03      	ldr	r2, [pc, #12]	; (1b3c <cpu_irq_enter_critical+0x34>)
    1b30:	2101      	movs	r1, #1
    1b32:	7011      	strb	r1, [r2, #0]
    1b34:	e7f2      	b.n	1b1c <cpu_irq_enter_critical+0x14>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	20000290 	.word	0x20000290
    1b3c:	20000294 	.word	0x20000294
    1b40:	20000030 	.word	0x20000030

00001b44 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <cpu_irq_leave_critical+0x24>)
    1b46:	681a      	ldr	r2, [r3, #0]
    1b48:	3a01      	subs	r2, #1
    1b4a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d109      	bne.n	1b66 <cpu_irq_leave_critical+0x22>
    1b52:	4b06      	ldr	r3, [pc, #24]	; (1b6c <cpu_irq_leave_critical+0x28>)
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d005      	beq.n	1b66 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1b5a:	4b05      	ldr	r3, [pc, #20]	; (1b70 <cpu_irq_leave_critical+0x2c>)
    1b5c:	2201      	movs	r2, #1
    1b5e:	701a      	strb	r2, [r3, #0]
    1b60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1b64:	b662      	cpsie	i
	}
}
    1b66:	4770      	bx	lr
    1b68:	20000290 	.word	0x20000290
    1b6c:	20000294 	.word	0x20000294
    1b70:	20000030 	.word	0x20000030

00001b74 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b74:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b76:	2808      	cmp	r0, #8
    1b78:	d82c      	bhi.n	1bd4 <system_clock_source_get_hz+0x60>
    1b7a:	4b1b      	ldr	r3, [pc, #108]	; (1be8 <system_clock_source_get_hz+0x74>)
    1b7c:	0080      	lsls	r0, r0, #2
    1b7e:	581b      	ldr	r3, [r3, r0]
    1b80:	469f      	mov	pc, r3
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b82:	4c1a      	ldr	r4, [pc, #104]	; (1bec <system_clock_source_get_hz+0x78>)
    1b84:	2002      	movs	r0, #2
    1b86:	6823      	ldr	r3, [r4, #0]
    1b88:	4018      	ands	r0, r3
    1b8a:	d00b      	beq.n	1ba4 <system_clock_source_get_hz+0x30>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b8c:	4918      	ldr	r1, [pc, #96]	; (1bf0 <system_clock_source_get_hz+0x7c>)
    1b8e:	2210      	movs	r2, #16
    1b90:	68cb      	ldr	r3, [r1, #12]
    1b92:	421a      	tst	r2, r3
    1b94:	d0fc      	beq.n	1b90 <system_clock_source_get_hz+0x1c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b96:	6823      	ldr	r3, [r4, #0]
    1b98:	075a      	lsls	r2, r3, #29
    1b9a:	d41d      	bmi.n	1bd8 <system_clock_source_get_hz+0x64>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1b9c:	4815      	ldr	r0, [pc, #84]	; (1bf4 <system_clock_source_get_hz+0x80>)
    1b9e:	e001      	b.n	1ba4 <system_clock_source_get_hz+0x30>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1ba0:	4b12      	ldr	r3, [pc, #72]	; (1bec <system_clock_source_get_hz+0x78>)
    1ba2:	6918      	ldr	r0, [r3, #16]
#endif

	default:
		return 0;
	}
}
    1ba4:	bd10      	pop	{r4, pc}

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ba6:	4a12      	ldr	r2, [pc, #72]	; (1bf0 <system_clock_source_get_hz+0x7c>)
    1ba8:	2350      	movs	r3, #80	; 0x50
    1baa:	5cd3      	ldrb	r3, [r2, r3]

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
			return 0;
    1bac:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bae:	075a      	lsls	r2, r3, #29
    1bb0:	d5f8      	bpl.n	1ba4 <system_clock_source_get_hz+0x30>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1bb2:	4b0e      	ldr	r3, [pc, #56]	; (1bec <system_clock_source_get_hz+0x78>)
    1bb4:	68d8      	ldr	r0, [r3, #12]
    1bb6:	e7f5      	b.n	1ba4 <system_clock_source_get_hz+0x30>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1bb8:	2080      	movs	r0, #128	; 0x80
    1bba:	0200      	lsls	r0, r0, #8
    1bbc:	e7f2      	b.n	1ba4 <system_clock_source_get_hz+0x30>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1bbe:	4b0b      	ldr	r3, [pc, #44]	; (1bec <system_clock_source_get_hz+0x78>)
    1bc0:	6958      	ldr	r0, [r3, #20]
    1bc2:	e7ef      	b.n	1ba4 <system_clock_source_get_hz+0x30>
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1bc4:	4b0a      	ldr	r3, [pc, #40]	; (1bf0 <system_clock_source_get_hz+0x7c>)
    1bc6:	6a18      	ldr	r0, [r3, #32]
    1bc8:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <system_clock_source_get_hz+0x84>)
    1bca:	0580      	lsls	r0, r0, #22
    1bcc:	0f80      	lsrs	r0, r0, #30
    1bce:	40c3      	lsrs	r3, r0
    1bd0:	1c18      	adds	r0, r3, #0
    1bd2:	e7e7      	b.n	1ba4 <system_clock_source_get_hz+0x30>

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1bd4:	2000      	movs	r0, #0
    1bd6:	e7e5      	b.n	1ba4 <system_clock_source_get_hz+0x30>
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bd8:	4b08      	ldr	r3, [pc, #32]	; (1bfc <system_clock_source_get_hz+0x88>)
    1bda:	2000      	movs	r0, #0
    1bdc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1bde:	68a3      	ldr	r3, [r4, #8]
    1be0:	041b      	lsls	r3, r3, #16
    1be2:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1be4:	4358      	muls	r0, r3
    1be6:	e7dd      	b.n	1ba4 <system_clock_source_get_hz+0x30>
    1be8:	00003324 	.word	0x00003324
    1bec:	20000298 	.word	0x20000298
    1bf0:	40000800 	.word	0x40000800
    1bf4:	02dc6c00 	.word	0x02dc6c00
    1bf8:	007a1200 	.word	0x007a1200
    1bfc:	00001f89 	.word	0x00001f89

00001c00 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	464f      	mov	r7, r9
    1c04:	4646      	mov	r6, r8
    1c06:	b4c0      	push	{r6, r7}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c08:	4b45      	ldr	r3, [pc, #276]	; (1d20 <system_clock_init+0x120>)
    1c0a:	22c2      	movs	r2, #194	; 0xc2
    1c0c:	00d2      	lsls	r2, r2, #3
    1c0e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1c10:	4b44      	ldr	r3, [pc, #272]	; (1d24 <system_clock_init+0x124>)
    1c12:	211e      	movs	r1, #30
    1c14:	685a      	ldr	r2, [r3, #4]
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c16:	b085      	sub	sp, #20
    1c18:	438a      	bics	r2, r1
    1c1a:	2104      	movs	r1, #4
    1c1c:	430a      	orrs	r2, r1
    1c1e:	605a      	str	r2, [r3, #4]
    1c20:	4d41      	ldr	r5, [pc, #260]	; (1d28 <system_clock_init+0x128>)
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1c22:	2302      	movs	r3, #2
    1c24:	466a      	mov	r2, sp
    1c26:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c28:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1c2a:	b2e0      	uxtb	r0, r4
    1c2c:	4669      	mov	r1, sp
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c2e:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1c30:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c32:	2c18      	cmp	r4, #24
    1c34:	d1f9      	bne.n	1c2a <system_clock_init+0x2a>
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1c36:	4b3d      	ldr	r3, [pc, #244]	; (1d2c <system_clock_init+0x12c>)
    1c38:	681b      	ldr	r3, [r3, #0]
    1c3a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1c3c:	2b3f      	cmp	r3, #63	; 0x3f
    1c3e:	d06c      	beq.n	1d1a <system_clock_init+0x11a>
    1c40:	029b      	lsls	r3, r3, #10
    1c42:	223f      	movs	r2, #63	; 0x3f
    1c44:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1c46:	4f3a      	ldr	r7, [pc, #232]	; (1d30 <system_clock_init+0x130>)
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1c48:	2400      	movs	r4, #0
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1c4a:	607b      	str	r3, [r7, #4]
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1c4c:	4b39      	ldr	r3, [pc, #228]	; (1d34 <system_clock_init+0x134>)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1c4e:	603c      	str	r4, [r7, #0]
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1c50:	60bb      	str	r3, [r7, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c52:	683a      	ldr	r2, [r7, #0]
    1c54:	2304      	movs	r3, #4
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c56:	4e32      	ldr	r6, [pc, #200]	; (1d20 <system_clock_init+0x120>)
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c58:	4313      	orrs	r3, r2
    1c5a:	603b      	str	r3, [r7, #0]
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c5c:	6a33      	ldr	r3, [r6, #32]
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1c5e:	2240      	movs	r2, #64	; 0x40
    1c60:	4393      	bics	r3, r2
    1c62:	2280      	movs	r2, #128	; 0x80
    1c64:	4313      	orrs	r3, r2
    1c66:	4a34      	ldr	r2, [pc, #208]	; (1d38 <system_clock_init+0x138>)
    1c68:	4013      	ands	r3, r2
    1c6a:	6233      	str	r3, [r6, #32]
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c6c:	6a33      	ldr	r3, [r6, #32]
    1c6e:	2202      	movs	r2, #2
    1c70:	4313      	orrs	r3, r2
    1c72:	6233      	str	r3, [r6, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c74:	4b31      	ldr	r3, [pc, #196]	; (1d3c <system_clock_init+0x13c>)
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c76:	4691      	mov	r9, r2
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c78:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1c7a:	466b      	mov	r3, sp
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c7c:	466a      	mov	r2, sp
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1c7e:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c80:	2306      	movs	r3, #6
    1c82:	7013      	strb	r3, [r2, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1c84:	23fa      	movs	r3, #250	; 0xfa
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	4b2d      	ldr	r3, [pc, #180]	; (1d40 <system_clock_init+0x140>)
    1c8a:	4669      	mov	r1, sp
    1c8c:	2001      	movs	r0, #1
#endif
	config->run_in_standby     = false;
    1c8e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1c90:	7254      	strb	r4, [r2, #9]
    1c92:	4698      	mov	r8, r3
    1c94:	4798      	blx	r3
    1c96:	2001      	movs	r0, #1
    1c98:	4c2a      	ldr	r4, [pc, #168]	; (1d44 <system_clock_init+0x144>)
    1c9a:	47a0      	blx	r4
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1c9c:	466a      	mov	r2, sp
    1c9e:	2301      	movs	r3, #1
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ca0:	4669      	mov	r1, sp
    1ca2:	2000      	movs	r0, #0
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1ca4:	7013      	strb	r3, [r2, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ca6:	47a8      	blx	r5
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ca8:	2000      	movs	r0, #0
    1caa:	4b27      	ldr	r3, [pc, #156]	; (1d48 <system_clock_init+0x148>)
    1cac:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1cae:	683b      	ldr	r3, [r7, #0]
    1cb0:	464a      	mov	r2, r9
    1cb2:	4313      	orrs	r3, r2
    1cb4:	603b      	str	r3, [r7, #0]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cb6:	1c30      	adds	r0, r6, #0

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1cb8:	84b2      	strh	r2, [r6, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cba:	2110      	movs	r1, #16
    1cbc:	68c3      	ldr	r3, [r0, #12]
    1cbe:	4a18      	ldr	r2, [pc, #96]	; (1d20 <system_clock_init+0x120>)
    1cc0:	4219      	tst	r1, r3
    1cc2:	d0fb      	beq.n	1cbc <system_clock_init+0xbc>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1cc4:	68bb      	ldr	r3, [r7, #8]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cc6:	2010      	movs	r0, #16

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1cce:	2300      	movs	r3, #0
    1cd0:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cd2:	68d3      	ldr	r3, [r2, #12]
    1cd4:	4912      	ldr	r1, [pc, #72]	; (1d20 <system_clock_init+0x120>)
    1cd6:	4218      	tst	r0, r3
    1cd8:	d0fb      	beq.n	1cd2 <system_clock_init+0xd2>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1cda:	683b      	ldr	r3, [r7, #0]

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1cdc:	22d0      	movs	r2, #208	; 0xd0
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1cde:	b29b      	uxth	r3, r3
    1ce0:	848b      	strh	r3, [r1, #36]	; 0x24

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ce2:	68cb      	ldr	r3, [r1, #12]
    1ce4:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ce6:	2bd0      	cmp	r3, #208	; 0xd0
    1ce8:	d1fb      	bne.n	1ce2 <system_clock_init+0xe2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1cea:	4a18      	ldr	r2, [pc, #96]	; (1d4c <system_clock_init+0x14c>)
    1cec:	2300      	movs	r3, #0
    1cee:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1cf0:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1cf2:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1cf4:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1cf6:	2201      	movs	r2, #1
    1cf8:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    1cfa:	466a      	mov	r2, sp
    1cfc:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1cfe:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    1d00:	7253      	strb	r3, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1d02:	4669      	mov	r1, sp
    1d04:	2307      	movs	r3, #7
    1d06:	2000      	movs	r0, #0
    1d08:	7013      	strb	r3, [r2, #0]
    1d0a:	47c0      	blx	r8
    1d0c:	2000      	movs	r0, #0
    1d0e:	47a0      	blx	r4
#endif
}
    1d10:	b005      	add	sp, #20
    1d12:	bc0c      	pop	{r2, r3}
    1d14:	4690      	mov	r8, r2
    1d16:	4699      	mov	r9, r3
    1d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d1a:	4b0d      	ldr	r3, [pc, #52]	; (1d50 <system_clock_init+0x150>)
    1d1c:	e793      	b.n	1c46 <system_clock_init+0x46>
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	40000800 	.word	0x40000800
    1d24:	41004000 	.word	0x41004000
    1d28:	00001ef5 	.word	0x00001ef5
    1d2c:	00806024 	.word	0x00806024
    1d30:	20000298 	.word	0x20000298
    1d34:	1c3f05dc 	.word	0x1c3f05dc
    1d38:	fffffcff 	.word	0xfffffcff
    1d3c:	00001d55 	.word	0x00001d55
    1d40:	00001d79 	.word	0x00001d79
    1d44:	00001e29 	.word	0x00001e29
    1d48:	00001f59 	.word	0x00001f59
    1d4c:	40000400 	.word	0x40000400
    1d50:	00007c3f 	.word	0x00007c3f

00001d54 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1d54:	4b06      	ldr	r3, [pc, #24]	; (1d70 <system_gclk_init+0x1c>)
    1d56:	2208      	movs	r2, #8
    1d58:	6999      	ldr	r1, [r3, #24]
    1d5a:	430a      	orrs	r2, r1
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1d5c:	4905      	ldr	r1, [pc, #20]	; (1d74 <system_gclk_init+0x20>)
    1d5e:	619a      	str	r2, [r3, #24]
    1d60:	2301      	movs	r3, #1
    1d62:	700b      	strb	r3, [r1, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1d64:	2201      	movs	r2, #1
    1d66:	780b      	ldrb	r3, [r1, #0]
    1d68:	421a      	tst	r2, r3
    1d6a:	d1fc      	bne.n	1d66 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1d6c:	4770      	bx	lr
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	40000400 	.word	0x40000400
    1d74:	40000c00 	.word	0x40000c00

00001d78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d7a:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d7c:	784b      	ldrb	r3, [r1, #1]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d7e:	022d      	lsls	r5, r5, #8
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d80:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1d82:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d84:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d86:	2b00      	cmp	r3, #0
    1d88:	d002      	beq.n	1d90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1d8a:	2380      	movs	r3, #128	; 0x80
    1d8c:	02db      	lsls	r3, r3, #11
    1d8e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1d90:	7a4b      	ldrb	r3, [r1, #9]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d002      	beq.n	1d9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1d96:	2380      	movs	r3, #128	; 0x80
    1d98:	031b      	lsls	r3, r3, #12
    1d9a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1d9c:	684c      	ldr	r4, [r1, #4]
    1d9e:	2c01      	cmp	r4, #1
    1da0:	d90f      	bls.n	1dc2 <system_gclk_gen_set_config+0x4a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1da2:	1e67      	subs	r7, r4, #1
    1da4:	4027      	ands	r7, r4
    1da6:	d131      	bne.n	1e0c <system_gclk_gen_set_config+0x94>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1da8:	2c02      	cmp	r4, #2
    1daa:	d006      	beq.n	1dba <system_gclk_gen_set_config+0x42>
    1dac:	2302      	movs	r3, #2
    1dae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1db0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1db2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1db4:	429c      	cmp	r4, r3
    1db6:	d8fb      	bhi.n	1db0 <system_gclk_gen_set_config+0x38>
    1db8:	0217      	lsls	r7, r2, #8
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	035b      	lsls	r3, r3, #13
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1dbe:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1dc0:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1dc2:	7a0b      	ldrb	r3, [r1, #8]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d002      	beq.n	1dce <system_gclk_gen_set_config+0x56>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1dc8:	2380      	movs	r3, #128	; 0x80
    1dca:	039b      	lsls	r3, r3, #14
    1dcc:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dce:	4a12      	ldr	r2, [pc, #72]	; (1e18 <system_gclk_gen_set_config+0xa0>)
    1dd0:	7853      	ldrb	r3, [r2, #1]
    1dd2:	b25b      	sxtb	r3, r3
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	dbfb      	blt.n	1dd0 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1dd8:	4b10      	ldr	r3, [pc, #64]	; (1e1c <system_gclk_gen_set_config+0xa4>)
    1dda:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ddc:	4b10      	ldr	r3, [pc, #64]	; (1e20 <system_gclk_gen_set_config+0xa8>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dde:	4a0e      	ldr	r2, [pc, #56]	; (1e18 <system_gclk_gen_set_config+0xa0>)
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1de0:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1de2:	7851      	ldrb	r1, [r2, #1]
    1de4:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <system_gclk_gen_set_config+0xa0>)
    1de6:	b249      	sxtb	r1, r1
    1de8:	2900      	cmp	r1, #0
    1dea:	dbfa      	blt.n	1de2 <system_gclk_gen_set_config+0x6a>

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1dec:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dee:	1c19      	adds	r1, r3, #0
    1df0:	784a      	ldrb	r2, [r1, #1]
    1df2:	4b09      	ldr	r3, [pc, #36]	; (1e18 <system_gclk_gen_set_config+0xa0>)
    1df4:	b252      	sxtb	r2, r2
    1df6:	2a00      	cmp	r2, #0
    1df8:	dbfa      	blt.n	1df0 <system_gclk_gen_set_config+0x78>
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1dfa:	6859      	ldr	r1, [r3, #4]
    1dfc:	2280      	movs	r2, #128	; 0x80
    1dfe:	0252      	lsls	r2, r2, #9
    1e00:	400a      	ands	r2, r1
    1e02:	4315      	orrs	r5, r2
    1e04:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <system_gclk_gen_set_config+0xac>)
    1e08:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e0c:	2380      	movs	r3, #128	; 0x80
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1e0e:	0227      	lsls	r7, r4, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e10:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1e12:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e14:	431d      	orrs	r5, r3
    1e16:	e7d4      	b.n	1dc2 <system_gclk_gen_set_config+0x4a>
    1e18:	40000c00 	.word	0x40000c00
    1e1c:	00001b09 	.word	0x00001b09
    1e20:	40000c08 	.word	0x40000c08
    1e24:	00001b45 	.word	0x00001b45

00001e28 <system_gclk_gen_enable>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e28:	4a0c      	ldr	r2, [pc, #48]	; (1e5c <system_gclk_gen_enable+0x34>)
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e2a:	b510      	push	{r4, lr}
    1e2c:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e2e:	7853      	ldrb	r3, [r2, #1]
    1e30:	b25b      	sxtb	r3, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	dbfb      	blt.n	1e2e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e36:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <system_gclk_gen_enable+0x38>)
    1e38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e3a:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <system_gclk_gen_enable+0x3c>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e3c:	4907      	ldr	r1, [pc, #28]	; (1e5c <system_gclk_gen_enable+0x34>)
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e3e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e40:	784a      	ldrb	r2, [r1, #1]
    1e42:	4b06      	ldr	r3, [pc, #24]	; (1e5c <system_gclk_gen_enable+0x34>)
    1e44:	b252      	sxtb	r2, r2
    1e46:	2a00      	cmp	r2, #0
    1e48:	dbfa      	blt.n	1e40 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1e4a:	6859      	ldr	r1, [r3, #4]
    1e4c:	2280      	movs	r2, #128	; 0x80
    1e4e:	0252      	lsls	r2, r2, #9
    1e50:	430a      	orrs	r2, r1
    1e52:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e54:	4b04      	ldr	r3, [pc, #16]	; (1e68 <system_gclk_gen_enable+0x40>)
    1e56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e58:	bd10      	pop	{r4, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	40000c00 	.word	0x40000c00
    1e60:	00001b09 	.word	0x00001b09
    1e64:	40000c04 	.word	0x40000c04
    1e68:	00001b45 	.word	0x00001b45

00001e6c <system_gclk_gen_get_hz>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e6c:	4a1a      	ldr	r2, [pc, #104]	; (1ed8 <system_gclk_gen_get_hz+0x6c>)
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e70:	1c05      	adds	r5, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e72:	7853      	ldrb	r3, [r2, #1]
    1e74:	b25b      	sxtb	r3, r3
    1e76:	2b00      	cmp	r3, #0
    1e78:	dbfb      	blt.n	1e72 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e7a:	4b18      	ldr	r3, [pc, #96]	; (1edc <system_gclk_gen_get_hz+0x70>)
    1e7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e7e:	4b18      	ldr	r3, [pc, #96]	; (1ee0 <system_gclk_gen_get_hz+0x74>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e80:	4a15      	ldr	r2, [pc, #84]	; (1ed8 <system_gclk_gen_get_hz+0x6c>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e82:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e84:	7853      	ldrb	r3, [r2, #1]
    1e86:	4c14      	ldr	r4, [pc, #80]	; (1ed8 <system_gclk_gen_get_hz+0x6c>)
    1e88:	b25b      	sxtb	r3, r3
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	dbfa      	blt.n	1e84 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e8e:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e90:	4b14      	ldr	r3, [pc, #80]	; (1ee4 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e92:	04c0      	lsls	r0, r0, #19
    1e94:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e96:	4798      	blx	r3
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e98:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <system_gclk_gen_get_hz+0x74>)
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e9a:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e9c:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1e9e:	6867      	ldr	r7, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ea0:	4b11      	ldr	r3, [pc, #68]	; (1ee8 <system_gclk_gen_get_hz+0x7c>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ea2:	02ff      	lsls	r7, r7, #11
    1ea4:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ea6:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ea8:	7863      	ldrb	r3, [r4, #1]
    1eaa:	b25b      	sxtb	r3, r3
    1eac:	2b00      	cmp	r3, #0
    1eae:	dbfb      	blt.n	1ea8 <system_gclk_gen_get_hz+0x3c>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1eb0:	4b09      	ldr	r3, [pc, #36]	; (1ed8 <system_gclk_gen_get_hz+0x6c>)
    1eb2:	6899      	ldr	r1, [r3, #8]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1eb4:	4b0d      	ldr	r3, [pc, #52]	; (1eec <system_gclk_gen_get_hz+0x80>)
    1eb6:	0a09      	lsrs	r1, r1, #8
    1eb8:	b28c      	uxth	r4, r1
    1eba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ebc:	2f00      	cmp	r7, #0
    1ebe:	d003      	beq.n	1ec8 <system_gclk_gen_get_hz+0x5c>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ec0:	3401      	adds	r4, #1
    1ec2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1ec4:	1c30      	adds	r0, r6, #0
    1ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ec8:	2c01      	cmp	r4, #1
    1eca:	d9fb      	bls.n	1ec4 <system_gclk_gen_get_hz+0x58>
		gen_input_hz /= divider;
    1ecc:	1c30      	adds	r0, r6, #0
    1ece:	1c21      	adds	r1, r4, #0
    1ed0:	4b07      	ldr	r3, [pc, #28]	; (1ef0 <system_gclk_gen_get_hz+0x84>)
    1ed2:	4798      	blx	r3
    1ed4:	1c06      	adds	r6, r0, #0
    1ed6:	e7f5      	b.n	1ec4 <system_gclk_gen_get_hz+0x58>
    1ed8:	40000c00 	.word	0x40000c00
    1edc:	00001b09 	.word	0x00001b09
    1ee0:	40000c04 	.word	0x40000c04
    1ee4:	00001b75 	.word	0x00001b75
    1ee8:	40000c08 	.word	0x40000c08
    1eec:	00001b45 	.word	0x00001b45
    1ef0:	000025a9 	.word	0x000025a9

00001ef4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1ef4:	b538      	push	{r3, r4, r5, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ef6:	780d      	ldrb	r5, [r1, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ef8:	4b11      	ldr	r3, [pc, #68]	; (1f40 <system_gclk_chan_set_config+0x4c>)
    1efa:	022d      	lsls	r5, r5, #8
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1efc:	1c04      	adds	r4, r0, #0

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1efe:	4305      	orrs	r5, r0
    1f00:	4798      	blx	r3
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f02:	4b10      	ldr	r3, [pc, #64]	; (1f44 <system_gclk_chan_set_config+0x50>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f04:	4910      	ldr	r1, [pc, #64]	; (1f48 <system_gclk_chan_set_config+0x54>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f06:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f08:	8848      	ldrh	r0, [r1, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1f0a:	4b10      	ldr	r3, [pc, #64]	; (1f4c <system_gclk_chan_set_config+0x58>)
    1f0c:	884a      	ldrh	r2, [r1, #2]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f0e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1f10:	4013      	ands	r3, r2
    1f12:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f14:	884a      	ldrh	r2, [r1, #2]
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <system_gclk_chan_set_config+0x5c>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f18:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f1a:	4013      	ands	r3, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1f1c:	2280      	movs	r2, #128	; 0x80
	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f1e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1f20:	01d2      	lsls	r2, r2, #7
    1f22:	884b      	ldrh	r3, [r1, #2]
    1f24:	4c08      	ldr	r4, [pc, #32]	; (1f48 <system_gclk_chan_set_config+0x54>)
    1f26:	4213      	tst	r3, r2
    1f28:	d1fb      	bne.n	1f22 <system_gclk_chan_set_config+0x2e>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1f2a:	8861      	ldrh	r1, [r4, #2]
    1f2c:	4b07      	ldr	r3, [pc, #28]	; (1f4c <system_gclk_chan_set_config+0x58>)
    1f2e:	0202      	lsls	r2, r0, #8
    1f30:	400b      	ands	r3, r1
    1f32:	4313      	orrs	r3, r2
    1f34:	8063      	strh	r3, [r4, #2]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1f36:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f38:	4b06      	ldr	r3, [pc, #24]	; (1f54 <system_gclk_chan_set_config+0x60>)
    1f3a:	4798      	blx	r3
    1f3c:	8065      	strh	r5, [r4, #2]
}
    1f3e:	bd38      	pop	{r3, r4, r5, pc}
    1f40:	00001b09 	.word	0x00001b09
    1f44:	40000c02 	.word	0x40000c02
    1f48:	40000c00 	.word	0x40000c00
    1f4c:	fffff0ff 	.word	0xfffff0ff
    1f50:	ffffbfff 	.word	0xffffbfff
    1f54:	00001b45 	.word	0x00001b45

00001f58 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1f58:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f5a:	4b07      	ldr	r3, [pc, #28]	; (1f78 <system_gclk_chan_enable+0x20>)
    1f5c:	1c04      	adds	r4, r0, #0
    1f5e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f60:	4b06      	ldr	r3, [pc, #24]	; (1f7c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1f62:	2280      	movs	r2, #128	; 0x80
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f64:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1f66:	4b06      	ldr	r3, [pc, #24]	; (1f80 <system_gclk_chan_enable+0x28>)
    1f68:	01d2      	lsls	r2, r2, #7
    1f6a:	8859      	ldrh	r1, [r3, #2]
    1f6c:	430a      	orrs	r2, r1
    1f6e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <system_gclk_chan_enable+0x2c>)
    1f72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f74:	bd10      	pop	{r4, pc}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	00001b09 	.word	0x00001b09
    1f7c:	40000c02 	.word	0x40000c02
    1f80:	40000c00 	.word	0x40000c00
    1f84:	00001b45 	.word	0x00001b45

00001f88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	4647      	mov	r7, r8
    1f8c:	b480      	push	{r7}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f8e:	4c20      	ldr	r4, [pc, #128]	; (2010 <system_gclk_chan_get_hz+0x88>)
    1f90:	1c05      	adds	r5, r0, #0
    1f92:	47a0      	blx	r4
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f94:	4b1f      	ldr	r3, [pc, #124]	; (2014 <system_gclk_chan_get_hz+0x8c>)
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f96:	4e20      	ldr	r6, [pc, #128]	; (2018 <system_gclk_chan_get_hz+0x90>)
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f98:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f9a:	8875      	ldrh	r5, [r6, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f9c:	4f1f      	ldr	r7, [pc, #124]	; (201c <system_gclk_chan_get_hz+0x94>)
    1f9e:	052d      	lsls	r5, r5, #20
    1fa0:	0f2d      	lsrs	r5, r5, #28
    1fa2:	47b8      	blx	r7
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa4:	7873      	ldrb	r3, [r6, #1]
    1fa6:	b25b      	sxtb	r3, r3
    1fa8:	2b00      	cmp	r3, #0
    1faa:	dbfb      	blt.n	1fa4 <system_gclk_chan_get_hz+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fac:	47a0      	blx	r4
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fae:	4b1c      	ldr	r3, [pc, #112]	; (2020 <system_gclk_chan_get_hz+0x98>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb0:	4a19      	ldr	r2, [pc, #100]	; (2018 <system_gclk_chan_get_hz+0x90>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fb2:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb4:	7853      	ldrb	r3, [r2, #1]
    1fb6:	4c18      	ldr	r4, [pc, #96]	; (2018 <system_gclk_chan_get_hz+0x90>)
    1fb8:	b25b      	sxtb	r3, r3
    1fba:	2b00      	cmp	r3, #0
    1fbc:	dbfa      	blt.n	1fb4 <system_gclk_chan_get_hz+0x2c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fbe:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fc0:	4b18      	ldr	r3, [pc, #96]	; (2024 <system_gclk_chan_get_hz+0x9c>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fc2:	04c0      	lsls	r0, r0, #19
    1fc4:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fc6:	4798      	blx	r3
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fc8:	4b15      	ldr	r3, [pc, #84]	; (2020 <system_gclk_chan_get_hz+0x98>)
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fca:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fcc:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fce:	6863      	ldr	r3, [r4, #4]
    1fd0:	02db      	lsls	r3, r3, #11
    1fd2:	0fdb      	lsrs	r3, r3, #31
    1fd4:	4698      	mov	r8, r3

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fd6:	4b14      	ldr	r3, [pc, #80]	; (2028 <system_gclk_chan_get_hz+0xa0>)
    1fd8:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fda:	7863      	ldrb	r3, [r4, #1]
    1fdc:	b25b      	sxtb	r3, r3
    1fde:	2b00      	cmp	r3, #0
    1fe0:	dbfb      	blt.n	1fda <system_gclk_chan_get_hz+0x52>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1fe2:	4b0d      	ldr	r3, [pc, #52]	; (2018 <system_gclk_chan_get_hz+0x90>)
    1fe4:	6899      	ldr	r1, [r3, #8]
    1fe6:	0a09      	lsrs	r1, r1, #8
    1fe8:	b28c      	uxth	r4, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1fea:	47b8      	blx	r7

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1fec:	4643      	mov	r3, r8
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d005      	beq.n	1ffe <system_gclk_chan_get_hz+0x76>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ff2:	3401      	adds	r4, #1
    1ff4:	40e6      	lsrs	r6, r4

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
    1ff6:	1c30      	adds	r0, r6, #0
    1ff8:	bc04      	pop	{r2}
    1ffa:	4690      	mov	r8, r2
    1ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ffe:	2c01      	cmp	r4, #1
    2000:	d9f9      	bls.n	1ff6 <system_gclk_chan_get_hz+0x6e>
		gen_input_hz /= divider;
    2002:	1c30      	adds	r0, r6, #0
    2004:	1c21      	adds	r1, r4, #0
    2006:	4b09      	ldr	r3, [pc, #36]	; (202c <system_gclk_chan_get_hz+0xa4>)
    2008:	4798      	blx	r3
    200a:	1c06      	adds	r6, r0, #0
    200c:	e7f3      	b.n	1ff6 <system_gclk_chan_get_hz+0x6e>
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	00001b09 	.word	0x00001b09
    2014:	40000c02 	.word	0x40000c02
    2018:	40000c00 	.word	0x40000c00
    201c:	00001b45 	.word	0x00001b45
    2020:	40000c04 	.word	0x40000c04
    2024:	00001b75 	.word	0x00001b75
    2028:	40000c08 	.word	0x40000c08
    202c:	000025a9 	.word	0x000025a9

00002030 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2030:	b570      	push	{r4, r5, r6, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2032:	09c2      	lsrs	r2, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2034:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2036:	2a00      	cmp	r2, #0
    2038:	d103      	bne.n	2042 <system_pinmux_pin_set_config+0x12>
		return &(ports[port_index]->Group[group_index]);
    203a:	0943      	lsrs	r3, r0, #5
    203c:	4a25      	ldr	r2, [pc, #148]	; (20d4 <system_pinmux_pin_set_config+0xa4>)
    203e:	01db      	lsls	r3, r3, #7
    2040:	189b      	adds	r3, r3, r2
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2042:	221f      	movs	r2, #31
    2044:	4010      	ands	r0, r2
    2046:	2201      	movs	r2, #1
    2048:	4082      	lsls	r2, r0
    204a:	1c10      	adds	r0, r2, #0

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    204c:	78ca      	ldrb	r2, [r1, #3]
    204e:	2a00      	cmp	r2, #0
    2050:	d119      	bne.n	2086 <system_pinmux_pin_set_config+0x56>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2052:	780a      	ldrb	r2, [r1, #0]
    2054:	2a80      	cmp	r2, #128	; 0x80
    2056:	d039      	beq.n	20cc <system_pinmux_pin_set_config+0x9c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2058:	2480      	movs	r4, #128	; 0x80
    205a:	0612      	lsls	r2, r2, #24
    205c:	0264      	lsls	r4, r4, #9
    205e:	4322      	orrs	r2, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2060:	784c      	ldrb	r4, [r1, #1]
    2062:	2502      	movs	r5, #2
    2064:	1c26      	adds	r6, r4, #0
    2066:	43ae      	bics	r6, r5
    2068:	d107      	bne.n	207a <system_pinmux_pin_set_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    206a:	788c      	ldrb	r4, [r1, #2]
    206c:	2c00      	cmp	r4, #0
    206e:	d129      	bne.n	20c4 <system_pinmux_pin_set_config+0x94>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2070:	2480      	movs	r4, #128	; 0x80
    2072:	02a4      	lsls	r4, r4, #10
    2074:	4322      	orrs	r2, r4
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2076:	6058      	str	r0, [r3, #4]
    2078:	784c      	ldrb	r4, [r1, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    207a:	3c01      	subs	r4, #1
    207c:	2c01      	cmp	r4, #1
    207e:	d804      	bhi.n	208a <system_pinmux_pin_set_config+0x5a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2080:	4c15      	ldr	r4, [pc, #84]	; (20d8 <system_pinmux_pin_set_config+0xa8>)
    2082:	4022      	ands	r2, r4
    2084:	e001      	b.n	208a <system_pinmux_pin_set_config+0x5a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2086:	6058      	str	r0, [r3, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2088:	2200      	movs	r2, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    208a:	0405      	lsls	r5, r0, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    208c:	24a0      	movs	r4, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    208e:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2090:	05e4      	lsls	r4, r4, #23
    2092:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2094:	4314      	orrs	r4, r2
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2096:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2098:	24d0      	movs	r4, #208	; 0xd0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    209a:	0c05      	lsrs	r5, r0, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    209c:	0624      	lsls	r4, r4, #24
    209e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    20a0:	4314      	orrs	r4, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20a2:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    20a4:	78cc      	ldrb	r4, [r1, #3]
    20a6:	2c00      	cmp	r4, #0
    20a8:	d109      	bne.n	20be <system_pinmux_pin_set_config+0x8e>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    20aa:	0354      	lsls	r4, r2, #13
    20ac:	d503      	bpl.n	20b6 <system_pinmux_pin_set_config+0x86>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    20ae:	788a      	ldrb	r2, [r1, #2]
    20b0:	2a01      	cmp	r2, #1
    20b2:	d00d      	beq.n	20d0 <system_pinmux_pin_set_config+0xa0>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    20b4:	6158      	str	r0, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    20b6:	784a      	ldrb	r2, [r1, #1]
    20b8:	3a01      	subs	r2, #1
    20ba:	2a01      	cmp	r2, #1
    20bc:	d900      	bls.n	20c0 <system_pinmux_pin_set_config+0x90>
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
}
    20be:	bd70      	pop	{r4, r5, r6, pc}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    20c0:	6098      	str	r0, [r3, #8]
    20c2:	e7fc      	b.n	20be <system_pinmux_pin_set_config+0x8e>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    20c4:	24c0      	movs	r4, #192	; 0xc0
    20c6:	02e4      	lsls	r4, r4, #11
    20c8:	4322      	orrs	r2, r4
    20ca:	e7d4      	b.n	2076 <system_pinmux_pin_set_config+0x46>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    20cc:	2200      	movs	r2, #0
    20ce:	e7c7      	b.n	2060 <system_pinmux_pin_set_config+0x30>
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
				port->OUTSET.reg = pin_mask;
    20d0:	6198      	str	r0, [r3, #24]
    20d2:	e7f0      	b.n	20b6 <system_pinmux_pin_set_config+0x86>
    20d4:	41004400 	.word	0x41004400
    20d8:	fffbffff 	.word	0xfffbffff

000020dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    20dc:	4770      	bx	lr
    20de:	46c0      	nop			; (mov r8, r8)

000020e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    20e0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <system_init+0x18>)
    20e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <system_init+0x1c>)
    20e8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <system_init+0x20>)
    20ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    20ee:	4b05      	ldr	r3, [pc, #20]	; (2104 <system_init+0x24>)
    20f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    20f2:	4b05      	ldr	r3, [pc, #20]	; (2108 <system_init+0x28>)
    20f4:	4798      	blx	r3
}
    20f6:	bd08      	pop	{r3, pc}
    20f8:	00001c01 	.word	0x00001c01
    20fc:	00001ac9 	.word	0x00001ac9
    2100:	000020dd 	.word	0x000020dd
    2104:	000000ed 	.word	0x000000ed
    2108:	000020dd 	.word	0x000020dd

0000210c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    210c:	e7fe      	b.n	210c <Dummy_Handler>
    210e:	46c0      	nop			; (mov r8, r8)

00002110 <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2110:	4920      	ldr	r1, [pc, #128]	; (2194 <Reset_Handler+0x84>)
    2112:	4821      	ldr	r0, [pc, #132]	; (2198 <Reset_Handler+0x88>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2114:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2116:	4281      	cmp	r1, r0
    2118:	d009      	beq.n	212e <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    211a:	4b20      	ldr	r3, [pc, #128]	; (219c <Reset_Handler+0x8c>)
    211c:	4298      	cmp	r0, r3
    211e:	d206      	bcs.n	212e <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    2120:	43c2      	mvns	r2, r0
    2122:	18d2      	adds	r2, r2, r3
    2124:	0892      	lsrs	r2, r2, #2
    2126:	3201      	adds	r2, #1
    2128:	0092      	lsls	r2, r2, #2
    212a:	4b1d      	ldr	r3, [pc, #116]	; (21a0 <Reset_Handler+0x90>)
    212c:	4798      	blx	r3
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    212e:	481d      	ldr	r0, [pc, #116]	; (21a4 <Reset_Handler+0x94>)
    2130:	4b1d      	ldr	r3, [pc, #116]	; (21a8 <Reset_Handler+0x98>)
    2132:	4298      	cmp	r0, r3
    2134:	d207      	bcs.n	2146 <Reset_Handler+0x36>
                *pDest++ = 0;
    2136:	43c2      	mvns	r2, r0
    2138:	18d2      	adds	r2, r2, r3
    213a:	0892      	lsrs	r2, r2, #2
    213c:	3201      	adds	r2, #1
    213e:	0092      	lsls	r2, r2, #2
    2140:	2100      	movs	r1, #0
    2142:	4b1a      	ldr	r3, [pc, #104]	; (21ac <Reset_Handler+0x9c>)
    2144:	4798      	blx	r3
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2146:	4a1a      	ldr	r2, [pc, #104]	; (21b0 <Reset_Handler+0xa0>)
    2148:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <Reset_Handler+0xa4>)
    214a:	21ff      	movs	r1, #255	; 0xff
    214c:	438a      	bics	r2, r1
    214e:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2150:	4a19      	ldr	r2, [pc, #100]	; (21b8 <Reset_Handler+0xa8>)
    2152:	2390      	movs	r3, #144	; 0x90
    2154:	2102      	movs	r1, #2
    2156:	005b      	lsls	r3, r3, #1
    2158:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    215a:	4b18      	ldr	r3, [pc, #96]	; (21bc <Reset_Handler+0xac>)
    215c:	2230      	movs	r2, #48	; 0x30
    215e:	7b99      	ldrb	r1, [r3, #14]
    2160:	4391      	bics	r1, r2
    2162:	2220      	movs	r2, #32
    2164:	430a      	orrs	r2, r1
    2166:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2168:	7b99      	ldrb	r1, [r3, #14]
    216a:	220c      	movs	r2, #12
    216c:	4391      	bics	r1, r2
    216e:	2208      	movs	r2, #8
    2170:	430a      	orrs	r2, r1
    2172:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2174:	7b99      	ldrb	r1, [r3, #14]
    2176:	2203      	movs	r2, #3
    2178:	4391      	bics	r1, r2
    217a:	2202      	movs	r2, #2
    217c:	430a      	orrs	r2, r1
    217e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2180:	4b0f      	ldr	r3, [pc, #60]	; (21c0 <Reset_Handler+0xb0>)
    2182:	2280      	movs	r2, #128	; 0x80
    2184:	6859      	ldr	r1, [r3, #4]
    2186:	430a      	orrs	r2, r1
    2188:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    218a:	4b0e      	ldr	r3, [pc, #56]	; (21c4 <Reset_Handler+0xb4>)
    218c:	4798      	blx	r3

        /* Branch to main function */
        main();
    218e:	4b0e      	ldr	r3, [pc, #56]	; (21c8 <Reset_Handler+0xb8>)
    2190:	4798      	blx	r3
    2192:	e7fe      	b.n	2192 <Reset_Handler+0x82>
    2194:	00003370 	.word	0x00003370
    2198:	20000000 	.word	0x20000000
    219c:	200000b0 	.word	0x200000b0
    21a0:	000032b3 	.word	0x000032b3
    21a4:	200000b0 	.word	0x200000b0
    21a8:	20000334 	.word	0x20000334
    21ac:	000032c5 	.word	0x000032c5
    21b0:	00000000 	.word	0x00000000
    21b4:	e000ed00 	.word	0xe000ed00
    21b8:	41007000 	.word	0x41007000
    21bc:	41004800 	.word	0x41004800
    21c0:	41004000 	.word	0x41004000
    21c4:	00003249 	.word	0x00003249
    21c8:	000023b9 	.word	0x000023b9

000021cc <enableRs485Transmit>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21cc:	4b02      	ldr	r3, [pc, #8]	; (21d8 <enableRs485Transmit+0xc>)
    21ce:	2204      	movs	r2, #4
    21d0:	619a      	str	r2, [r3, #24]
    21d2:	2210      	movs	r2, #16
    21d4:	619a      	str	r2, [r3, #24]

void enableRs485Transmit()
{
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_RE, GPIO_RS485_DATA_TRANSMIT);
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_DE, GPIO_RS485_DATA_TRANSMIT);	
}
    21d6:	4770      	bx	lr
    21d8:	41004400 	.word	0x41004400

000021dc <disableRs485Transmit>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21dc:	4b02      	ldr	r3, [pc, #8]	; (21e8 <disableRs485Transmit+0xc>)
    21de:	2204      	movs	r2, #4
    21e0:	615a      	str	r2, [r3, #20]
    21e2:	2210      	movs	r2, #16
    21e4:	615a      	str	r2, [r3, #20]
void disableRs485Transmit()
{
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_RE, GPIO_RS485_DATA_RECEIVE);
	port_pin_set_output_level(GPIO_RS485_DATA_DIRECTION_DE, GPIO_RS485_DATA_RECEIVE);	
}
    21e6:	4770      	bx	lr
    21e8:	41004400 	.word	0x41004400

000021ec <extint_callback>:
}
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    21ec:	b508      	push	{r3, lr}
	if(settings.setupModeEnabled == true)
    21ee:	4b03      	ldr	r3, [pc, #12]	; (21fc <extint_callback+0x10>)
    21f0:	7c5b      	ldrb	r3, [r3, #17]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d001      	beq.n	21fa <extint_callback+0xe>
	{
		sendButtonPressEvent();
    21f6:	4b02      	ldr	r3, [pc, #8]	; (2200 <extint_callback+0x14>)
    21f8:	4798      	blx	r3
	}
}
    21fa:	bd08      	pop	{r3, pc}
    21fc:	20000098 	.word	0x20000098
    2200:	000008d9 	.word	0x000008d9

00002204 <SysTick_Handler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2204:	4b02      	ldr	r3, [pc, #8]	; (2210 <SysTick_Handler+0xc>)
    2206:	2280      	movs	r2, #128	; 0x80
    2208:	0052      	lsls	r2, r2, #1
    220a:	61da      	str	r2, [r3, #28]
 *        vector table.
 */
void SysTick_Handler(void)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    220c:	4770      	bx	lr
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	41004400 	.word	0x41004400

00002214 <configure_uart>:
	eint_chan_conf.gpio_pin_mux       = SW2_EIC_MUX;
	extint_chan_set_config(SW2_EIC_LINE, &eint_chan_conf);	
}

__attribute__((optimize("O0"))) static void configure_uart(void)
{
    2214:	b590      	push	{r4, r7, lr}
    2216:	b093      	sub	sp, #76	; 0x4c
    2218:	af00      	add	r7, sp, #0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    221a:	1d3b      	adds	r3, r7, #4
    221c:	2280      	movs	r2, #128	; 0x80
    221e:	05d2      	lsls	r2, r2, #23
    2220:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2222:	1d3b      	adds	r3, r7, #4
    2224:	2200      	movs	r2, #0
    2226:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2228:	1d3b      	adds	r3, r7, #4
    222a:	22ff      	movs	r2, #255	; 0xff
    222c:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    222e:	1d3b      	adds	r3, r7, #4
    2230:	2200      	movs	r2, #0
    2232:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2234:	1d3b      	adds	r3, r7, #4
    2236:	2200      	movs	r2, #0
    2238:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    223a:	1d3b      	adds	r3, r7, #4
    223c:	2296      	movs	r2, #150	; 0x96
    223e:	0192      	lsls	r2, r2, #6
    2240:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    2242:	1d3a      	adds	r2, r7, #4
    2244:	2324      	movs	r3, #36	; 0x24
    2246:	2101      	movs	r1, #1
    2248:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    224a:	1d3a      	adds	r2, r7, #4
    224c:	2325      	movs	r3, #37	; 0x25
    224e:	2101      	movs	r1, #1
    2250:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    2252:	1d3a      	adds	r2, r7, #4
    2254:	2326      	movs	r3, #38	; 0x26
    2256:	2100      	movs	r1, #0
    2258:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    225a:	1d3a      	adds	r2, r7, #4
    225c:	2327      	movs	r3, #39	; 0x27
    225e:	2100      	movs	r1, #0
    2260:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    2262:	1d3b      	adds	r3, r7, #4
    2264:	2200      	movs	r2, #0
    2266:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2268:	1d3b      	adds	r3, r7, #4
    226a:	2288      	movs	r2, #136	; 0x88
    226c:	0352      	lsls	r2, r2, #13
    226e:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    2270:	1d3a      	adds	r2, r7, #4
    2272:	232c      	movs	r3, #44	; 0x2c
    2274:	2100      	movs	r1, #0
    2276:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    2278:	1d3a      	adds	r2, r7, #4
    227a:	232d      	movs	r3, #45	; 0x2d
    227c:	2100      	movs	r1, #0
    227e:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2280:	1d3b      	adds	r3, r7, #4
    2282:	2200      	movs	r2, #0
    2284:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2286:	1d3b      	adds	r3, r7, #4
    2288:	2200      	movs	r2, #0
    228a:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    228c:	1d3b      	adds	r3, r7, #4
    228e:	2200      	movs	r2, #0
    2290:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2292:	1d3b      	adds	r3, r7, #4
    2294:	2200      	movs	r2, #0
    2296:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2298:	1d3b      	adds	r3, r7, #4
    229a:	2200      	movs	r2, #0
    229c:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    229e:	1d3b      	adds	r3, r7, #4
    22a0:	2200      	movs	r2, #0
    22a2:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    22a4:	1d3b      	adds	r3, r7, #4
    22a6:	2200      	movs	r2, #0
    22a8:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    22aa:	1d3b      	adds	r3, r7, #4
    22ac:	2200      	movs	r2, #0
    22ae:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    22b0:	1d3b      	adds	r3, r7, #4
    22b2:	2200      	movs	r2, #0
    22b4:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    22b6:	1d3b      	adds	r3, r7, #4
    22b8:	2200      	movs	r2, #0
    22ba:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    22bc:	1d3b      	adds	r3, r7, #4
    22be:	2213      	movs	r2, #19
    22c0:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    22c2:	1d3b      	adds	r3, r7, #4
    22c4:	2200      	movs	r2, #0
    22c6:	775a      	strb	r2, [r3, #29]
	struct usart_config usart_conf;
	//load up the default usart settings.
	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CMD_UART_MUX_SETTING;
    22c8:	1d3b      	adds	r3, r7, #4
    22ca:	22c4      	movs	r2, #196	; 0xc4
    22cc:	0392      	lsls	r2, r2, #14
    22ce:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CMD_UART_PINMUX_PAD0;
    22d0:	1d3b      	adds	r3, r7, #4
    22d2:	2201      	movs	r2, #1
    22d4:	4252      	negs	r2, r2
    22d6:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CMD_UART_PINMUX_PAD1;
    22d8:	1d3b      	adds	r3, r7, #4
    22da:	2201      	movs	r2, #1
    22dc:	4252      	negs	r2, r2
    22de:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CMD_UART_PAD2;
    22e0:	1d3b      	adds	r3, r7, #4
    22e2:	4a1c      	ldr	r2, [pc, #112]	; (2354 <configure_uart+0x140>)
    22e4:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CMD_UART_PAD3;
    22e6:	1d3b      	adds	r3, r7, #4
    22e8:	4a1b      	ldr	r2, [pc, #108]	; (2358 <configure_uart+0x144>)
    22ea:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = settings.baud;
    22ec:	4b1b      	ldr	r3, [pc, #108]	; (235c <configure_uart+0x148>)
    22ee:	695a      	ldr	r2, [r3, #20]
    22f0:	1d3b      	adds	r3, r7, #4
    22f2:	621a      	str	r2, [r3, #32]
	usart_conf.sample_rate = USART_SAMPLE_RATE_16X_ARITHMETIC;
    22f4:	1d3b      	adds	r3, r7, #4
    22f6:	2200      	movs	r2, #0
    22f8:	821a      	strh	r2, [r3, #16]
	status_code_genare_t status = STATUS_NO_CHANGE;
    22fa:	1c3b      	adds	r3, r7, #0
    22fc:	3347      	adds	r3, #71	; 0x47
    22fe:	2202      	movs	r2, #2
    2300:	701a      	strb	r2, [r3, #0]
	status = usart_init(&cmd_uart_module, CMD_UART_MODULE, &usart_conf);
    2302:	1c3c      	adds	r4, r7, #0
    2304:	3447      	adds	r4, #71	; 0x47
    2306:	4916      	ldr	r1, [pc, #88]	; (2360 <configure_uart+0x14c>)
    2308:	4a16      	ldr	r2, [pc, #88]	; (2364 <configure_uart+0x150>)
    230a:	1d3b      	adds	r3, r7, #4
    230c:	1c08      	adds	r0, r1, #0
    230e:	1c11      	adds	r1, r2, #0
    2310:	1c1a      	adds	r2, r3, #0
    2312:	4b15      	ldr	r3, [pc, #84]	; (2368 <configure_uart+0x154>)
    2314:	4798      	blx	r3
    2316:	1c03      	adds	r3, r0, #0
    2318:	7023      	strb	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    231a:	4b11      	ldr	r3, [pc, #68]	; (2360 <configure_uart+0x14c>)
    231c:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    231e:	1c20      	adds	r0, r4, #0
    2320:	4b12      	ldr	r3, [pc, #72]	; (236c <configure_uart+0x158>)
    2322:	4798      	blx	r3
    2324:	1c03      	adds	r3, r0, #0
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2326:	b2da      	uxtb	r2, r3
    2328:	231f      	movs	r3, #31
    232a:	4013      	ands	r3, r2
    232c:	b2db      	uxtb	r3, r3
    232e:	2201      	movs	r2, #1
    2330:	1c11      	adds	r1, r2, #0
    2332:	4099      	lsls	r1, r3
    2334:	1c0b      	adds	r3, r1, #0
    2336:	1c1a      	adds	r2, r3, #0
    2338:	4b0d      	ldr	r3, [pc, #52]	; (2370 <configure_uart+0x15c>)
    233a:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    233c:	4b08      	ldr	r3, [pc, #32]	; (2360 <configure_uart+0x14c>)
    233e:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2340:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2342:	2b00      	cmp	r3, #0
    2344:	d1fa      	bne.n	233c <configure_uart+0x128>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2346:	6823      	ldr	r3, [r4, #0]
    2348:	2202      	movs	r2, #2
    234a:	4313      	orrs	r3, r2
    234c:	6023      	str	r3, [r4, #0]
	usart_enable(&cmd_uart_module);	
}
    234e:	46bd      	mov	sp, r7
    2350:	b013      	add	sp, #76	; 0x4c
    2352:	bd90      	pop	{r4, r7, pc}
    2354:	00180002 	.word	0x00180002
    2358:	00190002 	.word	0x00190002
    235c:	20000098 	.word	0x20000098
    2360:	20000300 	.word	0x20000300
    2364:	42000c00 	.word	0x42000c00
    2368:	00000f21 	.word	0x00000f21
    236c:	000019c1 	.word	0x000019c1
    2370:	e000e100 	.word	0xe000e100

00002374 <reConfigure_uart>:

void reConfigure_uart()
{
    2374:	b538      	push	{r3, r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2376:	4d0c      	ldr	r5, [pc, #48]	; (23a8 <reConfigure_uart+0x34>)

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2378:	4b0c      	ldr	r3, [pc, #48]	; (23ac <reConfigure_uart+0x38>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    237a:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    237c:	1c20      	adds	r0, r4, #0
    237e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2380:	231f      	movs	r3, #31
    2382:	4018      	ands	r0, r3
    2384:	2301      	movs	r3, #1
    2386:	4083      	lsls	r3, r0
    2388:	4a09      	ldr	r2, [pc, #36]	; (23b0 <reConfigure_uart+0x3c>)
    238a:	1c18      	adds	r0, r3, #0
    238c:	2380      	movs	r3, #128	; 0x80
    238e:	50d0      	str	r0, [r2, r3]
    2390:	682a      	ldr	r2, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2392:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2394:	2b00      	cmp	r3, #0
    2396:	d1fc      	bne.n	2392 <reConfigure_uart+0x1e>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2398:	6823      	ldr	r3, [r4, #0]
    239a:	2202      	movs	r2, #2
    239c:	4393      	bics	r3, r2
    239e:	6023      	str	r3, [r4, #0]
	usart_disable(&cmd_uart_module);
	configure_uart();
    23a0:	4b04      	ldr	r3, [pc, #16]	; (23b4 <reConfigure_uart+0x40>)
    23a2:	4798      	blx	r3
}
    23a4:	bd38      	pop	{r3, r4, r5, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	20000300 	.word	0x20000300
    23ac:	000019c1 	.word	0x000019c1
    23b0:	e000e100 	.word	0xe000e100
    23b4:	00002215 	.word	0x00002215

000023b8 <main>:
	//usart_read_job(	&cdc_uart_module,&receivedByte);			
}


__attribute__((optimize("O0"))) int main(void)
{
    23b8:	b590      	push	{r4, r7, lr}
    23ba:	b08b      	sub	sp, #44	; 0x2c
    23bc:	af00      	add	r7, sp, #0
	system_init();
    23be:	4b63      	ldr	r3, [pc, #396]	; (254c <main+0x194>)
    23c0:	4798      	blx	r3
	configure_uart();
    23c2:	4b63      	ldr	r3, [pc, #396]	; (2550 <main+0x198>)
    23c4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    23c6:	1c3b      	adds	r3, r7, #0
    23c8:	2200      	movs	r2, #0
    23ca:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    23cc:	1c3b      	adds	r3, r7, #0
    23ce:	2201      	movs	r2, #1
    23d0:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    23d2:	1c3b      	adds	r3, r7, #0
    23d4:	2200      	movs	r2, #0
    23d6:	709a      	strb	r2, [r3, #2]
#define GPIO_RS485_DATA_TRANSMIT true
static void config_gpio(void)
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    23d8:	1c3b      	adds	r3, r7, #0
    23da:	2201      	movs	r2, #1
    23dc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    23de:	1c3b      	adds	r3, r7, #0
    23e0:	2008      	movs	r0, #8
    23e2:	1c19      	adds	r1, r3, #0
    23e4:	4b5b      	ldr	r3, [pc, #364]	; (2554 <main+0x19c>)
    23e6:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    23e8:	4b5b      	ldr	r3, [pc, #364]	; (2558 <main+0x1a0>)
    23ea:	2280      	movs	r2, #128	; 0x80
    23ec:	0052      	lsls	r2, r2, #1
    23ee:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	port_pin_set_config(GPIO_RS485_DATA_DIRECTION_RE, &pin_conf);
    23f0:	1c3b      	adds	r3, r7, #0
    23f2:	2002      	movs	r0, #2
    23f4:	1c19      	adds	r1, r3, #0
    23f6:	4b57      	ldr	r3, [pc, #348]	; (2554 <main+0x19c>)
    23f8:	4798      	blx	r3
	port_pin_set_config(GPIO_RS485_DATA_DIRECTION_DE, &pin_conf);
    23fa:	1c3b      	adds	r3, r7, #0
    23fc:	2004      	movs	r0, #4
    23fe:	1c19      	adds	r1, r3, #0
    2400:	4b54      	ldr	r3, [pc, #336]	; (2554 <main+0x19c>)
    2402:	4798      	blx	r3
    2404:	4b54      	ldr	r3, [pc, #336]	; (2558 <main+0x1a0>)
    2406:	2204      	movs	r2, #4
    2408:	615a      	str	r2, [r3, #20]
    240a:	4b53      	ldr	r3, [pc, #332]	; (2558 <main+0x1a0>)
    240c:	2210      	movs	r2, #16
    240e:	615a      	str	r2, [r3, #20]
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2410:	1d3b      	adds	r3, r7, #4
    2412:	1c18      	adds	r0, r3, #0
    2414:	4b51      	ldr	r3, [pc, #324]	; (255c <main+0x1a4>)
    2416:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = SW1_INT_PIN;
    2418:	1d3b      	adds	r3, r7, #4
    241a:	2205      	movs	r2, #5
    241c:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_pull = SYSTEM_PINMUX_PIN_PULL_UP;
    241e:	1d3b      	adds	r3, r7, #4
    2420:	2201      	movs	r2, #1
    2422:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.gpio_pin_mux       = SW1_INT_EIC_MUX;
    2424:	1d3b      	adds	r3, r7, #4
    2426:	2200      	movs	r2, #0
    2428:	605a      	str	r2, [r3, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    242a:	1d3b      	adds	r3, r7, #4
    242c:	2202      	movs	r2, #2
    242e:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    2430:	1d3b      	adds	r3, r7, #4
    2432:	2201      	movs	r2, #1
    2434:	729a      	strb	r2, [r3, #10]
	extint_chan_set_config(SW1_INT_EIC_LINE, &eint_chan_conf);	
    2436:	1d3b      	adds	r3, r7, #4
    2438:	2005      	movs	r0, #5
    243a:	1c19      	adds	r1, r3, #0
    243c:	4b48      	ldr	r3, [pc, #288]	; (2560 <main+0x1a8>)
    243e:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = SW2_PIN;
    2440:	1d3b      	adds	r3, r7, #4
    2442:	2209      	movs	r2, #9
    2444:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = SW2_EIC_MUX;
    2446:	1d3b      	adds	r3, r7, #4
    2448:	2200      	movs	r2, #0
    244a:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(SW2_EIC_LINE, &eint_chan_conf);	
    244c:	1d3b      	adds	r3, r7, #4
    244e:	2007      	movs	r0, #7
    2450:	1c19      	adds	r1, r3, #0
    2452:	4b43      	ldr	r3, [pc, #268]	; (2560 <main+0x1a8>)
    2454:	4798      	blx	r3
	//extint_register_callback(extint_callback,
			//SW1_INT_EIC_LINE,
			//EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_enable_callback(SW1_INT_EIC_LINE,
			//EXTINT_CALLBACK_TYPE_DETECT);
	extint_register_callback(extint_callback,
    2456:	4b43      	ldr	r3, [pc, #268]	; (2564 <main+0x1ac>)
    2458:	1c18      	adds	r0, r3, #0
    245a:	2107      	movs	r1, #7
    245c:	2200      	movs	r2, #0
    245e:	4b42      	ldr	r3, [pc, #264]	; (2568 <main+0x1b0>)
    2460:	4798      	blx	r3
			SW2_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(SW2_EIC_LINE,
    2462:	2007      	movs	r0, #7
    2464:	2100      	movs	r1, #0
    2466:	4b41      	ldr	r3, [pc, #260]	; (256c <main+0x1b4>)
    2468:	4798      	blx	r3
	/*Configure system tick to generate periodic interrupts */
	//SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
	config_gpio();
	configure_extint();
	configure_eic_callback();
	status_code_genare_t uart_status = STATUS_ERR_NOT_INITIALIZED;
    246a:	1c3b      	adds	r3, r7, #0
    246c:	3327      	adds	r3, #39	; 0x27
    246e:	221f      	movs	r2, #31
    2470:	701a      	strb	r2, [r3, #0]
	/*	Initialize I2C drivers	*/
	status_t status = drv_i2c_init(&twiConfig);
    2472:	4b3f      	ldr	r3, [pc, #252]	; (2570 <main+0x1b8>)
    2474:	1c18      	adds	r0, r3, #0
    2476:	4b3f      	ldr	r3, [pc, #252]	; (2574 <main+0x1bc>)
    2478:	4798      	blx	r3
    247a:	1c02      	adds	r2, r0, #0
    247c:	1c3b      	adds	r3, r7, #0
    247e:	3326      	adds	r3, #38	; 0x26
    2480:	701a      	strb	r2, [r3, #0]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    2482:	4b3d      	ldr	r3, [pc, #244]	; (2578 <main+0x1c0>)
    2484:	2201      	movs	r2, #1
    2486:	701a      	strb	r2, [r3, #0]
    2488:	f3bf 8f5f 	dmb	sy
    248c:	b662      	cpsie	i
	.uartModule = &cmd_uart_module	
};
void readUniqueId()
{
	uint8_t* localSerialNumber = 0x0080A00C;
	memcpy(settings.serialNumber,localSerialNumber,16);
    248e:	493b      	ldr	r1, [pc, #236]	; (257c <main+0x1c4>)
    2490:	2201      	movs	r2, #1
    2492:	4b3b      	ldr	r3, [pc, #236]	; (2580 <main+0x1c8>)
    2494:	1889      	adds	r1, r1, r2
    2496:	1c1a      	adds	r2, r3, #0
    2498:	2310      	movs	r3, #16
    249a:	1c08      	adds	r0, r1, #0
    249c:	1c11      	adds	r1, r2, #0
    249e:	1c1a      	adds	r2, r3, #0
    24a0:	4b38      	ldr	r3, [pc, #224]	; (2584 <main+0x1cc>)
    24a2:	4798      	blx	r3
	system_interrupt_enable_global();	
	

	//read the unique ID for the microcontroller
	readUniqueId(); 	
	int i = 0, size = 0;
    24a4:	2300      	movs	r3, #0
    24a6:	623b      	str	r3, [r7, #32]
    24a8:	2300      	movs	r3, #0
    24aa:	61fb      	str	r3, [r7, #28]
	volatile uint16_t buff = 0x00; 
    24ac:	1c3b      	adds	r3, r7, #0
    24ae:	3312      	adds	r3, #18
    24b0:	2200      	movs	r2, #0
    24b2:	801a      	strh	r2, [r3, #0]
	//uint8_t receivedByte = 0x00; 
	status = STATUS_FAIL;
    24b4:	1c3b      	adds	r3, r7, #0
    24b6:	3326      	adds	r3, #38	; 0x26
    24b8:	2201      	movs	r2, #1
    24ba:	701a      	strb	r2, [r3, #0]
	//while(status == STATUS_FAIL)
	//{
		status = resetAndInitialize(&em7180Config);
    24bc:	4b32      	ldr	r3, [pc, #200]	; (2588 <main+0x1d0>)
    24be:	1c18      	adds	r0, r3, #0
    24c0:	4b32      	ldr	r3, [pc, #200]	; (258c <main+0x1d4>)
    24c2:	4798      	blx	r3
    24c4:	1c02      	adds	r2, r0, #0
    24c6:	1c3b      	adds	r3, r7, #0
    24c8:	3326      	adds	r3, #38	; 0x26
    24ca:	701a      	strb	r2, [r3, #0]
	//}
	pkt_packetParserInit(&packetParserConfig);	
    24cc:	4b30      	ldr	r3, [pc, #192]	; (2590 <main+0x1d8>)
    24ce:	1c18      	adds	r0, r3, #0
    24d0:	4b30      	ldr	r3, [pc, #192]	; (2594 <main+0x1dc>)
    24d2:	4798      	blx	r3
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    24d4:	1c3b      	adds	r3, r7, #0
    24d6:	331b      	adds	r3, #27
    24d8:	2200      	movs	r2, #0
    24da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    24dc:	1c3b      	adds	r3, r7, #0
    24de:	331a      	adds	r3, #26
    24e0:	2200      	movs	r2, #0
    24e2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    24e4:	1c3b      	adds	r3, r7, #0
    24e6:	331b      	adds	r3, #27
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d106      	bne.n	24fc <main+0x144>
		return &(ports[port_index]->Group[group_index]);
    24ee:	1c3b      	adds	r3, r7, #0
    24f0:	331a      	adds	r3, #26
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	01db      	lsls	r3, r3, #7
    24f6:	4818      	ldr	r0, [pc, #96]	; (2558 <main+0x1a0>)
    24f8:	181b      	adds	r3, r3, r0
    24fa:	e000      	b.n	24fe <main+0x146>
	} else {
		Assert(false);
		return NULL;
    24fc:	2300      	movs	r3, #0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24fe:	2208      	movs	r2, #8
    2500:	2101      	movs	r1, #1
    2502:	1c08      	adds	r0, r1, #0
    2504:	4090      	lsls	r0, r2
    2506:	1c02      	adds	r2, r0, #0
    2508:	617a      	str	r2, [r7, #20]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    250a:	697a      	ldr	r2, [r7, #20]
    250c:	619a      	str	r2, [r3, #24]
	//usart_read_job(&cmd_uart_module,&receivedByte);
	
	//turn on the LED
	port_pin_set_output_level(LED_0_PIN,LED_0_ACTIVE);
	//delay_ms(500); 
	sendButtonPressEvent();
    250e:	4b22      	ldr	r3, [pc, #136]	; (2598 <main+0x1e0>)
    2510:	4798      	blx	r3
	
	while (true) 
	{
		uart_status = usart_read_wait(&cmd_uart_module, &buff);
    2512:	1c3c      	adds	r4, r7, #0
    2514:	3427      	adds	r4, #39	; 0x27
    2516:	4a21      	ldr	r2, [pc, #132]	; (259c <main+0x1e4>)
    2518:	1c3b      	adds	r3, r7, #0
    251a:	3312      	adds	r3, #18
    251c:	1c10      	adds	r0, r2, #0
    251e:	1c19      	adds	r1, r3, #0
    2520:	4b1f      	ldr	r3, [pc, #124]	; (25a0 <main+0x1e8>)
    2522:	4798      	blx	r3
    2524:	1c03      	adds	r3, r0, #0
    2526:	7023      	strb	r3, [r4, #0]
		//
		//delay_ms(100);
		//buff = (uint16_t)receivedByte;
		if(uart_status == STATUS_OK && buff != -1)
    2528:	1c3b      	adds	r3, r7, #0
    252a:	3327      	adds	r3, #39	; 0x27
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	2b00      	cmp	r3, #0
    2530:	d10b      	bne.n	254a <main+0x192>
    2532:	1c3b      	adds	r3, r7, #0
    2534:	3312      	adds	r3, #18
    2536:	881b      	ldrh	r3, [r3, #0]
		{
			pkt_ProcessIncomingByte((uint8_t)buff);
    2538:	1c3b      	adds	r3, r7, #0
    253a:	3312      	adds	r3, #18
    253c:	881b      	ldrh	r3, [r3, #0]
    253e:	b29b      	uxth	r3, r3
    2540:	b2db      	uxtb	r3, r3
    2542:	1c18      	adds	r0, r3, #0
    2544:	4b17      	ldr	r3, [pc, #92]	; (25a4 <main+0x1ec>)
    2546:	4798      	blx	r3
		}
	}
    2548:	e7e3      	b.n	2512 <main+0x15a>
    254a:	e7e2      	b.n	2512 <main+0x15a>
    254c:	000020e1 	.word	0x000020e1
    2550:	00002215 	.word	0x00002215
    2554:	00001aa5 	.word	0x00001aa5
    2558:	41004400 	.word	0x41004400
    255c:	00000165 	.word	0x00000165
    2560:	00000179 	.word	0x00000179
    2564:	000021ed 	.word	0x000021ed
    2568:	00001a0d 	.word	0x00001a0d
    256c:	00001a39 	.word	0x00001a39
    2570:	20000050 	.word	0x20000050
    2574:	00000bbd 	.word	0x00000bbd
    2578:	20000030 	.word	0x20000030
    257c:	20000098 	.word	0x20000098
    2580:	0080a00c 	.word	0x0080a00c
    2584:	000032b3 	.word	0x000032b3
    2588:	20000044 	.word	0x20000044
    258c:	000007c9 	.word	0x000007c9
    2590:	20000034 	.word	0x20000034
    2594:	00000f15 	.word	0x00000f15
    2598:	000008d9 	.word	0x000008d9
    259c:	20000300 	.word	0x20000300
    25a0:	0000123d 	.word	0x0000123d
    25a4:	00000dc9 	.word	0x00000dc9

000025a8 <__aeabi_uidiv>:
    25a8:	2900      	cmp	r1, #0
    25aa:	d034      	beq.n	2616 <.udivsi3_skip_div0_test+0x6a>

000025ac <.udivsi3_skip_div0_test>:
    25ac:	2301      	movs	r3, #1
    25ae:	2200      	movs	r2, #0
    25b0:	b410      	push	{r4}
    25b2:	4288      	cmp	r0, r1
    25b4:	d32c      	bcc.n	2610 <.udivsi3_skip_div0_test+0x64>
    25b6:	2401      	movs	r4, #1
    25b8:	0724      	lsls	r4, r4, #28
    25ba:	42a1      	cmp	r1, r4
    25bc:	d204      	bcs.n	25c8 <.udivsi3_skip_div0_test+0x1c>
    25be:	4281      	cmp	r1, r0
    25c0:	d202      	bcs.n	25c8 <.udivsi3_skip_div0_test+0x1c>
    25c2:	0109      	lsls	r1, r1, #4
    25c4:	011b      	lsls	r3, r3, #4
    25c6:	e7f8      	b.n	25ba <.udivsi3_skip_div0_test+0xe>
    25c8:	00e4      	lsls	r4, r4, #3
    25ca:	42a1      	cmp	r1, r4
    25cc:	d204      	bcs.n	25d8 <.udivsi3_skip_div0_test+0x2c>
    25ce:	4281      	cmp	r1, r0
    25d0:	d202      	bcs.n	25d8 <.udivsi3_skip_div0_test+0x2c>
    25d2:	0049      	lsls	r1, r1, #1
    25d4:	005b      	lsls	r3, r3, #1
    25d6:	e7f8      	b.n	25ca <.udivsi3_skip_div0_test+0x1e>
    25d8:	4288      	cmp	r0, r1
    25da:	d301      	bcc.n	25e0 <.udivsi3_skip_div0_test+0x34>
    25dc:	1a40      	subs	r0, r0, r1
    25de:	431a      	orrs	r2, r3
    25e0:	084c      	lsrs	r4, r1, #1
    25e2:	42a0      	cmp	r0, r4
    25e4:	d302      	bcc.n	25ec <.udivsi3_skip_div0_test+0x40>
    25e6:	1b00      	subs	r0, r0, r4
    25e8:	085c      	lsrs	r4, r3, #1
    25ea:	4322      	orrs	r2, r4
    25ec:	088c      	lsrs	r4, r1, #2
    25ee:	42a0      	cmp	r0, r4
    25f0:	d302      	bcc.n	25f8 <.udivsi3_skip_div0_test+0x4c>
    25f2:	1b00      	subs	r0, r0, r4
    25f4:	089c      	lsrs	r4, r3, #2
    25f6:	4322      	orrs	r2, r4
    25f8:	08cc      	lsrs	r4, r1, #3
    25fa:	42a0      	cmp	r0, r4
    25fc:	d302      	bcc.n	2604 <.udivsi3_skip_div0_test+0x58>
    25fe:	1b00      	subs	r0, r0, r4
    2600:	08dc      	lsrs	r4, r3, #3
    2602:	4322      	orrs	r2, r4
    2604:	2800      	cmp	r0, #0
    2606:	d003      	beq.n	2610 <.udivsi3_skip_div0_test+0x64>
    2608:	091b      	lsrs	r3, r3, #4
    260a:	d001      	beq.n	2610 <.udivsi3_skip_div0_test+0x64>
    260c:	0909      	lsrs	r1, r1, #4
    260e:	e7e3      	b.n	25d8 <.udivsi3_skip_div0_test+0x2c>
    2610:	1c10      	adds	r0, r2, #0
    2612:	bc10      	pop	{r4}
    2614:	4770      	bx	lr
    2616:	2800      	cmp	r0, #0
    2618:	d001      	beq.n	261e <.udivsi3_skip_div0_test+0x72>
    261a:	2000      	movs	r0, #0
    261c:	43c0      	mvns	r0, r0
    261e:	b407      	push	{r0, r1, r2}
    2620:	4802      	ldr	r0, [pc, #8]	; (262c <.udivsi3_skip_div0_test+0x80>)
    2622:	a102      	add	r1, pc, #8	; (adr r1, 262c <.udivsi3_skip_div0_test+0x80>)
    2624:	1840      	adds	r0, r0, r1
    2626:	9002      	str	r0, [sp, #8]
    2628:	bd03      	pop	{r0, r1, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	000000d9 	.word	0x000000d9

00002630 <__aeabi_uidivmod>:
    2630:	2900      	cmp	r1, #0
    2632:	d0f0      	beq.n	2616 <.udivsi3_skip_div0_test+0x6a>
    2634:	b503      	push	{r0, r1, lr}
    2636:	f7ff ffb9 	bl	25ac <.udivsi3_skip_div0_test>
    263a:	bc0e      	pop	{r1, r2, r3}
    263c:	4342      	muls	r2, r0
    263e:	1a89      	subs	r1, r1, r2
    2640:	4718      	bx	r3
    2642:	46c0      	nop			; (mov r8, r8)

00002644 <__aeabi_idiv>:
    2644:	2900      	cmp	r1, #0
    2646:	d041      	beq.n	26cc <.divsi3_skip_div0_test+0x84>

00002648 <.divsi3_skip_div0_test>:
    2648:	b410      	push	{r4}
    264a:	1c04      	adds	r4, r0, #0
    264c:	404c      	eors	r4, r1
    264e:	46a4      	mov	ip, r4
    2650:	2301      	movs	r3, #1
    2652:	2200      	movs	r2, #0
    2654:	2900      	cmp	r1, #0
    2656:	d500      	bpl.n	265a <.divsi3_skip_div0_test+0x12>
    2658:	4249      	negs	r1, r1
    265a:	2800      	cmp	r0, #0
    265c:	d500      	bpl.n	2660 <.divsi3_skip_div0_test+0x18>
    265e:	4240      	negs	r0, r0
    2660:	4288      	cmp	r0, r1
    2662:	d32c      	bcc.n	26be <.divsi3_skip_div0_test+0x76>
    2664:	2401      	movs	r4, #1
    2666:	0724      	lsls	r4, r4, #28
    2668:	42a1      	cmp	r1, r4
    266a:	d204      	bcs.n	2676 <.divsi3_skip_div0_test+0x2e>
    266c:	4281      	cmp	r1, r0
    266e:	d202      	bcs.n	2676 <.divsi3_skip_div0_test+0x2e>
    2670:	0109      	lsls	r1, r1, #4
    2672:	011b      	lsls	r3, r3, #4
    2674:	e7f8      	b.n	2668 <.divsi3_skip_div0_test+0x20>
    2676:	00e4      	lsls	r4, r4, #3
    2678:	42a1      	cmp	r1, r4
    267a:	d204      	bcs.n	2686 <.divsi3_skip_div0_test+0x3e>
    267c:	4281      	cmp	r1, r0
    267e:	d202      	bcs.n	2686 <.divsi3_skip_div0_test+0x3e>
    2680:	0049      	lsls	r1, r1, #1
    2682:	005b      	lsls	r3, r3, #1
    2684:	e7f8      	b.n	2678 <.divsi3_skip_div0_test+0x30>
    2686:	4288      	cmp	r0, r1
    2688:	d301      	bcc.n	268e <.divsi3_skip_div0_test+0x46>
    268a:	1a40      	subs	r0, r0, r1
    268c:	431a      	orrs	r2, r3
    268e:	084c      	lsrs	r4, r1, #1
    2690:	42a0      	cmp	r0, r4
    2692:	d302      	bcc.n	269a <.divsi3_skip_div0_test+0x52>
    2694:	1b00      	subs	r0, r0, r4
    2696:	085c      	lsrs	r4, r3, #1
    2698:	4322      	orrs	r2, r4
    269a:	088c      	lsrs	r4, r1, #2
    269c:	42a0      	cmp	r0, r4
    269e:	d302      	bcc.n	26a6 <.divsi3_skip_div0_test+0x5e>
    26a0:	1b00      	subs	r0, r0, r4
    26a2:	089c      	lsrs	r4, r3, #2
    26a4:	4322      	orrs	r2, r4
    26a6:	08cc      	lsrs	r4, r1, #3
    26a8:	42a0      	cmp	r0, r4
    26aa:	d302      	bcc.n	26b2 <.divsi3_skip_div0_test+0x6a>
    26ac:	1b00      	subs	r0, r0, r4
    26ae:	08dc      	lsrs	r4, r3, #3
    26b0:	4322      	orrs	r2, r4
    26b2:	2800      	cmp	r0, #0
    26b4:	d003      	beq.n	26be <.divsi3_skip_div0_test+0x76>
    26b6:	091b      	lsrs	r3, r3, #4
    26b8:	d001      	beq.n	26be <.divsi3_skip_div0_test+0x76>
    26ba:	0909      	lsrs	r1, r1, #4
    26bc:	e7e3      	b.n	2686 <.divsi3_skip_div0_test+0x3e>
    26be:	1c10      	adds	r0, r2, #0
    26c0:	4664      	mov	r4, ip
    26c2:	2c00      	cmp	r4, #0
    26c4:	d500      	bpl.n	26c8 <.divsi3_skip_div0_test+0x80>
    26c6:	4240      	negs	r0, r0
    26c8:	bc10      	pop	{r4}
    26ca:	4770      	bx	lr
    26cc:	2800      	cmp	r0, #0
    26ce:	d006      	beq.n	26de <.divsi3_skip_div0_test+0x96>
    26d0:	db03      	blt.n	26da <.divsi3_skip_div0_test+0x92>
    26d2:	2000      	movs	r0, #0
    26d4:	43c0      	mvns	r0, r0
    26d6:	0840      	lsrs	r0, r0, #1
    26d8:	e001      	b.n	26de <.divsi3_skip_div0_test+0x96>
    26da:	2080      	movs	r0, #128	; 0x80
    26dc:	0600      	lsls	r0, r0, #24
    26de:	b407      	push	{r0, r1, r2}
    26e0:	4802      	ldr	r0, [pc, #8]	; (26ec <.divsi3_skip_div0_test+0xa4>)
    26e2:	a102      	add	r1, pc, #8	; (adr r1, 26ec <.divsi3_skip_div0_test+0xa4>)
    26e4:	1840      	adds	r0, r0, r1
    26e6:	9002      	str	r0, [sp, #8]
    26e8:	bd03      	pop	{r0, r1, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	00000019 	.word	0x00000019

000026f0 <__aeabi_idivmod>:
    26f0:	2900      	cmp	r1, #0
    26f2:	d0eb      	beq.n	26cc <.divsi3_skip_div0_test+0x84>
    26f4:	b503      	push	{r0, r1, lr}
    26f6:	f7ff ffa7 	bl	2648 <.divsi3_skip_div0_test>
    26fa:	bc0e      	pop	{r1, r2, r3}
    26fc:	4342      	muls	r2, r0
    26fe:	1a89      	subs	r1, r1, r2
    2700:	4718      	bx	r3
    2702:	46c0      	nop			; (mov r8, r8)

00002704 <__aeabi_idiv0>:
    2704:	4770      	bx	lr
    2706:	46c0      	nop			; (mov r8, r8)

00002708 <__aeabi_uldivmod>:
    2708:	2b00      	cmp	r3, #0
    270a:	d111      	bne.n	2730 <__aeabi_uldivmod+0x28>
    270c:	2a00      	cmp	r2, #0
    270e:	d10f      	bne.n	2730 <__aeabi_uldivmod+0x28>
    2710:	2900      	cmp	r1, #0
    2712:	d100      	bne.n	2716 <__aeabi_uldivmod+0xe>
    2714:	2800      	cmp	r0, #0
    2716:	d002      	beq.n	271e <__aeabi_uldivmod+0x16>
    2718:	2100      	movs	r1, #0
    271a:	43c9      	mvns	r1, r1
    271c:	1c08      	adds	r0, r1, #0
    271e:	b407      	push	{r0, r1, r2}
    2720:	4802      	ldr	r0, [pc, #8]	; (272c <__aeabi_uldivmod+0x24>)
    2722:	a102      	add	r1, pc, #8	; (adr r1, 272c <__aeabi_uldivmod+0x24>)
    2724:	1840      	adds	r0, r0, r1
    2726:	9002      	str	r0, [sp, #8]
    2728:	bd03      	pop	{r0, r1, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	ffffffd9 	.word	0xffffffd9
    2730:	b403      	push	{r0, r1}
    2732:	4668      	mov	r0, sp
    2734:	b501      	push	{r0, lr}
    2736:	9802      	ldr	r0, [sp, #8]
    2738:	f000 f844 	bl	27c4 <__gnu_uldivmod_helper>
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	469e      	mov	lr, r3
    2740:	b002      	add	sp, #8
    2742:	bc0c      	pop	{r2, r3}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)

00002748 <__aeabi_lmul>:
    2748:	469c      	mov	ip, r3
    274a:	0403      	lsls	r3, r0, #16
    274c:	b5f0      	push	{r4, r5, r6, r7, lr}
    274e:	0c1b      	lsrs	r3, r3, #16
    2750:	0417      	lsls	r7, r2, #16
    2752:	0c3f      	lsrs	r7, r7, #16
    2754:	0c15      	lsrs	r5, r2, #16
    2756:	1c1e      	adds	r6, r3, #0
    2758:	1c04      	adds	r4, r0, #0
    275a:	0c00      	lsrs	r0, r0, #16
    275c:	437e      	muls	r6, r7
    275e:	436b      	muls	r3, r5
    2760:	4347      	muls	r7, r0
    2762:	4345      	muls	r5, r0
    2764:	18fb      	adds	r3, r7, r3
    2766:	0c30      	lsrs	r0, r6, #16
    2768:	1818      	adds	r0, r3, r0
    276a:	4287      	cmp	r7, r0
    276c:	d902      	bls.n	2774 <__aeabi_lmul+0x2c>
    276e:	2380      	movs	r3, #128	; 0x80
    2770:	025b      	lsls	r3, r3, #9
    2772:	18ed      	adds	r5, r5, r3
    2774:	0c03      	lsrs	r3, r0, #16
    2776:	18ed      	adds	r5, r5, r3
    2778:	4663      	mov	r3, ip
    277a:	435c      	muls	r4, r3
    277c:	434a      	muls	r2, r1
    277e:	0436      	lsls	r6, r6, #16
    2780:	0c36      	lsrs	r6, r6, #16
    2782:	18a1      	adds	r1, r4, r2
    2784:	0400      	lsls	r0, r0, #16
    2786:	1980      	adds	r0, r0, r6
    2788:	1949      	adds	r1, r1, r5
    278a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000278c <__gnu_ldivmod_helper>:
    278c:	b5f0      	push	{r4, r5, r6, r7, lr}
    278e:	b083      	sub	sp, #12
    2790:	1c16      	adds	r6, r2, #0
    2792:	1c1f      	adds	r7, r3, #0
    2794:	9000      	str	r0, [sp, #0]
    2796:	9101      	str	r1, [sp, #4]
    2798:	f000 f9b8 	bl	2b0c <__divdi3>
    279c:	1c04      	adds	r4, r0, #0
    279e:	1c0d      	adds	r5, r1, #0
    27a0:	1c22      	adds	r2, r4, #0
    27a2:	1c2b      	adds	r3, r5, #0
    27a4:	1c30      	adds	r0, r6, #0
    27a6:	1c39      	adds	r1, r7, #0
    27a8:	f7ff ffce 	bl	2748 <__aeabi_lmul>
    27ac:	9a00      	ldr	r2, [sp, #0]
    27ae:	9b01      	ldr	r3, [sp, #4]
    27b0:	1a12      	subs	r2, r2, r0
    27b2:	418b      	sbcs	r3, r1
    27b4:	9908      	ldr	r1, [sp, #32]
    27b6:	1c20      	adds	r0, r4, #0
    27b8:	600a      	str	r2, [r1, #0]
    27ba:	604b      	str	r3, [r1, #4]
    27bc:	1c29      	adds	r1, r5, #0
    27be:	b003      	add	sp, #12
    27c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c2:	46c0      	nop			; (mov r8, r8)

000027c4 <__gnu_uldivmod_helper>:
    27c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c6:	b083      	sub	sp, #12
    27c8:	1c14      	adds	r4, r2, #0
    27ca:	1c1d      	adds	r5, r3, #0
    27cc:	9000      	str	r0, [sp, #0]
    27ce:	9101      	str	r1, [sp, #4]
    27d0:	f000 fb78 	bl	2ec4 <__udivdi3>
    27d4:	1c22      	adds	r2, r4, #0
    27d6:	1c2b      	adds	r3, r5, #0
    27d8:	1c06      	adds	r6, r0, #0
    27da:	1c0f      	adds	r7, r1, #0
    27dc:	f7ff ffb4 	bl	2748 <__aeabi_lmul>
    27e0:	9a00      	ldr	r2, [sp, #0]
    27e2:	9b01      	ldr	r3, [sp, #4]
    27e4:	1a12      	subs	r2, r2, r0
    27e6:	418b      	sbcs	r3, r1
    27e8:	9908      	ldr	r1, [sp, #32]
    27ea:	1c30      	adds	r0, r6, #0
    27ec:	600a      	str	r2, [r1, #0]
    27ee:	604b      	str	r3, [r1, #4]
    27f0:	1c39      	adds	r1, r7, #0
    27f2:	b003      	add	sp, #12
    27f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27f6:	46c0      	nop			; (mov r8, r8)

000027f8 <__aeabi_fadd>:
    27f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fa:	0243      	lsls	r3, r0, #9
    27fc:	0044      	lsls	r4, r0, #1
    27fe:	0fc5      	lsrs	r5, r0, #31
    2800:	024e      	lsls	r6, r1, #9
    2802:	0048      	lsls	r0, r1, #1
    2804:	0e24      	lsrs	r4, r4, #24
    2806:	1c2a      	adds	r2, r5, #0
    2808:	099b      	lsrs	r3, r3, #6
    280a:	0e00      	lsrs	r0, r0, #24
    280c:	0fc9      	lsrs	r1, r1, #31
    280e:	09b6      	lsrs	r6, r6, #6
    2810:	428d      	cmp	r5, r1
    2812:	d05b      	beq.n	28cc <__aeabi_fadd+0xd4>
    2814:	1a22      	subs	r2, r4, r0
    2816:	2a00      	cmp	r2, #0
    2818:	dc00      	bgt.n	281c <__aeabi_fadd+0x24>
    281a:	e089      	b.n	2930 <__aeabi_fadd+0x138>
    281c:	2800      	cmp	r0, #0
    281e:	d11d      	bne.n	285c <__aeabi_fadd+0x64>
    2820:	2e00      	cmp	r6, #0
    2822:	d000      	beq.n	2826 <__aeabi_fadd+0x2e>
    2824:	e075      	b.n	2912 <__aeabi_fadd+0x11a>
    2826:	0758      	lsls	r0, r3, #29
    2828:	d004      	beq.n	2834 <__aeabi_fadd+0x3c>
    282a:	220f      	movs	r2, #15
    282c:	401a      	ands	r2, r3
    282e:	2a04      	cmp	r2, #4
    2830:	d000      	beq.n	2834 <__aeabi_fadd+0x3c>
    2832:	3304      	adds	r3, #4
    2834:	2180      	movs	r1, #128	; 0x80
    2836:	04c9      	lsls	r1, r1, #19
    2838:	4019      	ands	r1, r3
    283a:	1c2a      	adds	r2, r5, #0
    283c:	2900      	cmp	r1, #0
    283e:	d03a      	beq.n	28b6 <__aeabi_fadd+0xbe>
    2840:	3401      	adds	r4, #1
    2842:	2cff      	cmp	r4, #255	; 0xff
    2844:	d100      	bne.n	2848 <__aeabi_fadd+0x50>
    2846:	e07f      	b.n	2948 <__aeabi_fadd+0x150>
    2848:	019b      	lsls	r3, r3, #6
    284a:	0a5b      	lsrs	r3, r3, #9
    284c:	025b      	lsls	r3, r3, #9
    284e:	b2e4      	uxtb	r4, r4
    2850:	05e4      	lsls	r4, r4, #23
    2852:	0a58      	lsrs	r0, r3, #9
    2854:	07d2      	lsls	r2, r2, #31
    2856:	4320      	orrs	r0, r4
    2858:	4310      	orrs	r0, r2
    285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    285c:	2cff      	cmp	r4, #255	; 0xff
    285e:	d0e2      	beq.n	2826 <__aeabi_fadd+0x2e>
    2860:	2180      	movs	r1, #128	; 0x80
    2862:	04c9      	lsls	r1, r1, #19
    2864:	430e      	orrs	r6, r1
    2866:	2a1b      	cmp	r2, #27
    2868:	dd00      	ble.n	286c <__aeabi_fadd+0x74>
    286a:	e12d      	b.n	2ac8 <__aeabi_fadd+0x2d0>
    286c:	1c31      	adds	r1, r6, #0
    286e:	2020      	movs	r0, #32
    2870:	40d1      	lsrs	r1, r2
    2872:	1a82      	subs	r2, r0, r2
    2874:	4096      	lsls	r6, r2
    2876:	1e72      	subs	r2, r6, #1
    2878:	4196      	sbcs	r6, r2
    287a:	430e      	orrs	r6, r1
    287c:	1b9b      	subs	r3, r3, r6
    287e:	0158      	lsls	r0, r3, #5
    2880:	d5d1      	bpl.n	2826 <__aeabi_fadd+0x2e>
    2882:	019b      	lsls	r3, r3, #6
    2884:	099f      	lsrs	r7, r3, #6
    2886:	1c38      	adds	r0, r7, #0
    2888:	f000 f922 	bl	2ad0 <__clzsi2>
    288c:	1f42      	subs	r2, r0, #5
    288e:	4097      	lsls	r7, r2
    2890:	4294      	cmp	r4, r2
    2892:	dc5b      	bgt.n	294c <__aeabi_fadd+0x154>
    2894:	1b14      	subs	r4, r2, r4
    2896:	231f      	movs	r3, #31
    2898:	1b1b      	subs	r3, r3, r4
    289a:	1c3a      	adds	r2, r7, #0
    289c:	409f      	lsls	r7, r3
    289e:	1c61      	adds	r1, r4, #1
    28a0:	1c3b      	adds	r3, r7, #0
    28a2:	40ca      	lsrs	r2, r1
    28a4:	1e5f      	subs	r7, r3, #1
    28a6:	41bb      	sbcs	r3, r7
    28a8:	4313      	orrs	r3, r2
    28aa:	2400      	movs	r4, #0
    28ac:	e7bb      	b.n	2826 <__aeabi_fadd+0x2e>
    28ae:	1e13      	subs	r3, r2, #0
    28b0:	d1b9      	bne.n	2826 <__aeabi_fadd+0x2e>
    28b2:	2300      	movs	r3, #0
    28b4:	2200      	movs	r2, #0
    28b6:	08db      	lsrs	r3, r3, #3
    28b8:	2cff      	cmp	r4, #255	; 0xff
    28ba:	d104      	bne.n	28c6 <__aeabi_fadd+0xce>
    28bc:	2b00      	cmp	r3, #0
    28be:	d043      	beq.n	2948 <__aeabi_fadd+0x150>
    28c0:	2080      	movs	r0, #128	; 0x80
    28c2:	03c0      	lsls	r0, r0, #15
    28c4:	4303      	orrs	r3, r0
    28c6:	025b      	lsls	r3, r3, #9
    28c8:	0a5b      	lsrs	r3, r3, #9
    28ca:	e7bf      	b.n	284c <__aeabi_fadd+0x54>
    28cc:	1a21      	subs	r1, r4, r0
    28ce:	2900      	cmp	r1, #0
    28d0:	dd40      	ble.n	2954 <__aeabi_fadd+0x15c>
    28d2:	2800      	cmp	r0, #0
    28d4:	d023      	beq.n	291e <__aeabi_fadd+0x126>
    28d6:	2cff      	cmp	r4, #255	; 0xff
    28d8:	d0a5      	beq.n	2826 <__aeabi_fadd+0x2e>
    28da:	2080      	movs	r0, #128	; 0x80
    28dc:	04c0      	lsls	r0, r0, #19
    28de:	4306      	orrs	r6, r0
    28e0:	291b      	cmp	r1, #27
    28e2:	dd00      	ble.n	28e6 <__aeabi_fadd+0xee>
    28e4:	e0ee      	b.n	2ac4 <__aeabi_fadd+0x2cc>
    28e6:	1c30      	adds	r0, r6, #0
    28e8:	2720      	movs	r7, #32
    28ea:	40c8      	lsrs	r0, r1
    28ec:	1a79      	subs	r1, r7, r1
    28ee:	408e      	lsls	r6, r1
    28f0:	1e71      	subs	r1, r6, #1
    28f2:	418e      	sbcs	r6, r1
    28f4:	4306      	orrs	r6, r0
    28f6:	199b      	adds	r3, r3, r6
    28f8:	0159      	lsls	r1, r3, #5
    28fa:	d400      	bmi.n	28fe <__aeabi_fadd+0x106>
    28fc:	e793      	b.n	2826 <__aeabi_fadd+0x2e>
    28fe:	3401      	adds	r4, #1
    2900:	2cff      	cmp	r4, #255	; 0xff
    2902:	d055      	beq.n	29b0 <__aeabi_fadd+0x1b8>
    2904:	4971      	ldr	r1, [pc, #452]	; (2acc <__aeabi_fadd+0x2d4>)
    2906:	2201      	movs	r2, #1
    2908:	401a      	ands	r2, r3
    290a:	400b      	ands	r3, r1
    290c:	085b      	lsrs	r3, r3, #1
    290e:	4313      	orrs	r3, r2
    2910:	e789      	b.n	2826 <__aeabi_fadd+0x2e>
    2912:	3a01      	subs	r2, #1
    2914:	2a00      	cmp	r2, #0
    2916:	d0b1      	beq.n	287c <__aeabi_fadd+0x84>
    2918:	2cff      	cmp	r4, #255	; 0xff
    291a:	d1a4      	bne.n	2866 <__aeabi_fadd+0x6e>
    291c:	e783      	b.n	2826 <__aeabi_fadd+0x2e>
    291e:	2e00      	cmp	r6, #0
    2920:	d100      	bne.n	2924 <__aeabi_fadd+0x12c>
    2922:	e780      	b.n	2826 <__aeabi_fadd+0x2e>
    2924:	3901      	subs	r1, #1
    2926:	2900      	cmp	r1, #0
    2928:	d0e5      	beq.n	28f6 <__aeabi_fadd+0xfe>
    292a:	2cff      	cmp	r4, #255	; 0xff
    292c:	d1d8      	bne.n	28e0 <__aeabi_fadd+0xe8>
    292e:	e77a      	b.n	2826 <__aeabi_fadd+0x2e>
    2930:	2a00      	cmp	r2, #0
    2932:	d11b      	bne.n	296c <__aeabi_fadd+0x174>
    2934:	1c62      	adds	r2, r4, #1
    2936:	b2d2      	uxtb	r2, r2
    2938:	2a01      	cmp	r2, #1
    293a:	dd4b      	ble.n	29d4 <__aeabi_fadd+0x1dc>
    293c:	1b9f      	subs	r7, r3, r6
    293e:	017a      	lsls	r2, r7, #5
    2940:	d523      	bpl.n	298a <__aeabi_fadd+0x192>
    2942:	1af7      	subs	r7, r6, r3
    2944:	1c0d      	adds	r5, r1, #0
    2946:	e79e      	b.n	2886 <__aeabi_fadd+0x8e>
    2948:	2300      	movs	r3, #0
    294a:	e77f      	b.n	284c <__aeabi_fadd+0x54>
    294c:	4b5f      	ldr	r3, [pc, #380]	; (2acc <__aeabi_fadd+0x2d4>)
    294e:	1aa4      	subs	r4, r4, r2
    2950:	403b      	ands	r3, r7
    2952:	e768      	b.n	2826 <__aeabi_fadd+0x2e>
    2954:	2900      	cmp	r1, #0
    2956:	d146      	bne.n	29e6 <__aeabi_fadd+0x1ee>
    2958:	1c61      	adds	r1, r4, #1
    295a:	b2c8      	uxtb	r0, r1
    295c:	2801      	cmp	r0, #1
    295e:	dd29      	ble.n	29b4 <__aeabi_fadd+0x1bc>
    2960:	29ff      	cmp	r1, #255	; 0xff
    2962:	d024      	beq.n	29ae <__aeabi_fadd+0x1b6>
    2964:	18f3      	adds	r3, r6, r3
    2966:	085b      	lsrs	r3, r3, #1
    2968:	1c0c      	adds	r4, r1, #0
    296a:	e75c      	b.n	2826 <__aeabi_fadd+0x2e>
    296c:	2c00      	cmp	r4, #0
    296e:	d013      	beq.n	2998 <__aeabi_fadd+0x1a0>
    2970:	28ff      	cmp	r0, #255	; 0xff
    2972:	d018      	beq.n	29a6 <__aeabi_fadd+0x1ae>
    2974:	2480      	movs	r4, #128	; 0x80
    2976:	04e4      	lsls	r4, r4, #19
    2978:	4252      	negs	r2, r2
    297a:	4323      	orrs	r3, r4
    297c:	2a1b      	cmp	r2, #27
    297e:	dd4d      	ble.n	2a1c <__aeabi_fadd+0x224>
    2980:	2301      	movs	r3, #1
    2982:	1af3      	subs	r3, r6, r3
    2984:	1c04      	adds	r4, r0, #0
    2986:	1c0d      	adds	r5, r1, #0
    2988:	e779      	b.n	287e <__aeabi_fadd+0x86>
    298a:	2f00      	cmp	r7, #0
    298c:	d000      	beq.n	2990 <__aeabi_fadd+0x198>
    298e:	e77a      	b.n	2886 <__aeabi_fadd+0x8e>
    2990:	2300      	movs	r3, #0
    2992:	2200      	movs	r2, #0
    2994:	2400      	movs	r4, #0
    2996:	e78e      	b.n	28b6 <__aeabi_fadd+0xbe>
    2998:	2b00      	cmp	r3, #0
    299a:	d03b      	beq.n	2a14 <__aeabi_fadd+0x21c>
    299c:	43d2      	mvns	r2, r2
    299e:	2a00      	cmp	r2, #0
    29a0:	d0ef      	beq.n	2982 <__aeabi_fadd+0x18a>
    29a2:	28ff      	cmp	r0, #255	; 0xff
    29a4:	d1ea      	bne.n	297c <__aeabi_fadd+0x184>
    29a6:	1c33      	adds	r3, r6, #0
    29a8:	24ff      	movs	r4, #255	; 0xff
    29aa:	1c0d      	adds	r5, r1, #0
    29ac:	e73b      	b.n	2826 <__aeabi_fadd+0x2e>
    29ae:	24ff      	movs	r4, #255	; 0xff
    29b0:	2300      	movs	r3, #0
    29b2:	e780      	b.n	28b6 <__aeabi_fadd+0xbe>
    29b4:	2c00      	cmp	r4, #0
    29b6:	d15c      	bne.n	2a72 <__aeabi_fadd+0x27a>
    29b8:	2b00      	cmp	r3, #0
    29ba:	d100      	bne.n	29be <__aeabi_fadd+0x1c6>
    29bc:	e080      	b.n	2ac0 <__aeabi_fadd+0x2c8>
    29be:	2e00      	cmp	r6, #0
    29c0:	d100      	bne.n	29c4 <__aeabi_fadd+0x1cc>
    29c2:	e730      	b.n	2826 <__aeabi_fadd+0x2e>
    29c4:	199b      	adds	r3, r3, r6
    29c6:	0158      	lsls	r0, r3, #5
    29c8:	d400      	bmi.n	29cc <__aeabi_fadd+0x1d4>
    29ca:	e72c      	b.n	2826 <__aeabi_fadd+0x2e>
    29cc:	4a3f      	ldr	r2, [pc, #252]	; (2acc <__aeabi_fadd+0x2d4>)
    29ce:	2401      	movs	r4, #1
    29d0:	4013      	ands	r3, r2
    29d2:	e728      	b.n	2826 <__aeabi_fadd+0x2e>
    29d4:	2c00      	cmp	r4, #0
    29d6:	d115      	bne.n	2a04 <__aeabi_fadd+0x20c>
    29d8:	2b00      	cmp	r3, #0
    29da:	d140      	bne.n	2a5e <__aeabi_fadd+0x266>
    29dc:	2e00      	cmp	r6, #0
    29de:	d063      	beq.n	2aa8 <__aeabi_fadd+0x2b0>
    29e0:	1c33      	adds	r3, r6, #0
    29e2:	1c0d      	adds	r5, r1, #0
    29e4:	e71f      	b.n	2826 <__aeabi_fadd+0x2e>
    29e6:	2c00      	cmp	r4, #0
    29e8:	d121      	bne.n	2a2e <__aeabi_fadd+0x236>
    29ea:	2b00      	cmp	r3, #0
    29ec:	d054      	beq.n	2a98 <__aeabi_fadd+0x2a0>
    29ee:	43c9      	mvns	r1, r1
    29f0:	2900      	cmp	r1, #0
    29f2:	d004      	beq.n	29fe <__aeabi_fadd+0x206>
    29f4:	28ff      	cmp	r0, #255	; 0xff
    29f6:	d04c      	beq.n	2a92 <__aeabi_fadd+0x29a>
    29f8:	291b      	cmp	r1, #27
    29fa:	dd58      	ble.n	2aae <__aeabi_fadd+0x2b6>
    29fc:	2301      	movs	r3, #1
    29fe:	199b      	adds	r3, r3, r6
    2a00:	1c04      	adds	r4, r0, #0
    2a02:	e779      	b.n	28f8 <__aeabi_fadd+0x100>
    2a04:	2b00      	cmp	r3, #0
    2a06:	d119      	bne.n	2a3c <__aeabi_fadd+0x244>
    2a08:	2e00      	cmp	r6, #0
    2a0a:	d048      	beq.n	2a9e <__aeabi_fadd+0x2a6>
    2a0c:	1c33      	adds	r3, r6, #0
    2a0e:	1c0d      	adds	r5, r1, #0
    2a10:	24ff      	movs	r4, #255	; 0xff
    2a12:	e708      	b.n	2826 <__aeabi_fadd+0x2e>
    2a14:	1c33      	adds	r3, r6, #0
    2a16:	1c04      	adds	r4, r0, #0
    2a18:	1c0d      	adds	r5, r1, #0
    2a1a:	e704      	b.n	2826 <__aeabi_fadd+0x2e>
    2a1c:	1c1c      	adds	r4, r3, #0
    2a1e:	2520      	movs	r5, #32
    2a20:	40d4      	lsrs	r4, r2
    2a22:	1aaa      	subs	r2, r5, r2
    2a24:	4093      	lsls	r3, r2
    2a26:	1e5a      	subs	r2, r3, #1
    2a28:	4193      	sbcs	r3, r2
    2a2a:	4323      	orrs	r3, r4
    2a2c:	e7a9      	b.n	2982 <__aeabi_fadd+0x18a>
    2a2e:	28ff      	cmp	r0, #255	; 0xff
    2a30:	d02f      	beq.n	2a92 <__aeabi_fadd+0x29a>
    2a32:	2480      	movs	r4, #128	; 0x80
    2a34:	04e4      	lsls	r4, r4, #19
    2a36:	4249      	negs	r1, r1
    2a38:	4323      	orrs	r3, r4
    2a3a:	e7dd      	b.n	29f8 <__aeabi_fadd+0x200>
    2a3c:	24ff      	movs	r4, #255	; 0xff
    2a3e:	2e00      	cmp	r6, #0
    2a40:	d100      	bne.n	2a44 <__aeabi_fadd+0x24c>
    2a42:	e6f0      	b.n	2826 <__aeabi_fadd+0x2e>
    2a44:	2280      	movs	r2, #128	; 0x80
    2a46:	08db      	lsrs	r3, r3, #3
    2a48:	03d2      	lsls	r2, r2, #15
    2a4a:	4213      	tst	r3, r2
    2a4c:	d004      	beq.n	2a58 <__aeabi_fadd+0x260>
    2a4e:	08f6      	lsrs	r6, r6, #3
    2a50:	4216      	tst	r6, r2
    2a52:	d101      	bne.n	2a58 <__aeabi_fadd+0x260>
    2a54:	1c33      	adds	r3, r6, #0
    2a56:	1c0d      	adds	r5, r1, #0
    2a58:	00db      	lsls	r3, r3, #3
    2a5a:	24ff      	movs	r4, #255	; 0xff
    2a5c:	e6e3      	b.n	2826 <__aeabi_fadd+0x2e>
    2a5e:	2e00      	cmp	r6, #0
    2a60:	d100      	bne.n	2a64 <__aeabi_fadd+0x26c>
    2a62:	e6e0      	b.n	2826 <__aeabi_fadd+0x2e>
    2a64:	1b9a      	subs	r2, r3, r6
    2a66:	0150      	lsls	r0, r2, #5
    2a68:	d400      	bmi.n	2a6c <__aeabi_fadd+0x274>
    2a6a:	e720      	b.n	28ae <__aeabi_fadd+0xb6>
    2a6c:	1af3      	subs	r3, r6, r3
    2a6e:	1c0d      	adds	r5, r1, #0
    2a70:	e6d9      	b.n	2826 <__aeabi_fadd+0x2e>
    2a72:	2b00      	cmp	r3, #0
    2a74:	d00d      	beq.n	2a92 <__aeabi_fadd+0x29a>
    2a76:	24ff      	movs	r4, #255	; 0xff
    2a78:	2e00      	cmp	r6, #0
    2a7a:	d100      	bne.n	2a7e <__aeabi_fadd+0x286>
    2a7c:	e6d3      	b.n	2826 <__aeabi_fadd+0x2e>
    2a7e:	2280      	movs	r2, #128	; 0x80
    2a80:	08db      	lsrs	r3, r3, #3
    2a82:	03d2      	lsls	r2, r2, #15
    2a84:	4213      	tst	r3, r2
    2a86:	d0e7      	beq.n	2a58 <__aeabi_fadd+0x260>
    2a88:	08f6      	lsrs	r6, r6, #3
    2a8a:	4216      	tst	r6, r2
    2a8c:	d1e4      	bne.n	2a58 <__aeabi_fadd+0x260>
    2a8e:	1c33      	adds	r3, r6, #0
    2a90:	e7e2      	b.n	2a58 <__aeabi_fadd+0x260>
    2a92:	1c33      	adds	r3, r6, #0
    2a94:	24ff      	movs	r4, #255	; 0xff
    2a96:	e6c6      	b.n	2826 <__aeabi_fadd+0x2e>
    2a98:	1c33      	adds	r3, r6, #0
    2a9a:	1c04      	adds	r4, r0, #0
    2a9c:	e6c3      	b.n	2826 <__aeabi_fadd+0x2e>
    2a9e:	2380      	movs	r3, #128	; 0x80
    2aa0:	2200      	movs	r2, #0
    2aa2:	049b      	lsls	r3, r3, #18
    2aa4:	24ff      	movs	r4, #255	; 0xff
    2aa6:	e706      	b.n	28b6 <__aeabi_fadd+0xbe>
    2aa8:	1c23      	adds	r3, r4, #0
    2aaa:	2200      	movs	r2, #0
    2aac:	e703      	b.n	28b6 <__aeabi_fadd+0xbe>
    2aae:	1c1c      	adds	r4, r3, #0
    2ab0:	2720      	movs	r7, #32
    2ab2:	40cc      	lsrs	r4, r1
    2ab4:	1a79      	subs	r1, r7, r1
    2ab6:	408b      	lsls	r3, r1
    2ab8:	1e59      	subs	r1, r3, #1
    2aba:	418b      	sbcs	r3, r1
    2abc:	4323      	orrs	r3, r4
    2abe:	e79e      	b.n	29fe <__aeabi_fadd+0x206>
    2ac0:	1c33      	adds	r3, r6, #0
    2ac2:	e6b0      	b.n	2826 <__aeabi_fadd+0x2e>
    2ac4:	2601      	movs	r6, #1
    2ac6:	e716      	b.n	28f6 <__aeabi_fadd+0xfe>
    2ac8:	2601      	movs	r6, #1
    2aca:	e6d7      	b.n	287c <__aeabi_fadd+0x84>
    2acc:	fbffffff 	.word	0xfbffffff

00002ad0 <__clzsi2>:
    2ad0:	211c      	movs	r1, #28
    2ad2:	2301      	movs	r3, #1
    2ad4:	041b      	lsls	r3, r3, #16
    2ad6:	4298      	cmp	r0, r3
    2ad8:	d301      	bcc.n	2ade <__clzsi2+0xe>
    2ada:	0c00      	lsrs	r0, r0, #16
    2adc:	3910      	subs	r1, #16
    2ade:	0a1b      	lsrs	r3, r3, #8
    2ae0:	4298      	cmp	r0, r3
    2ae2:	d301      	bcc.n	2ae8 <__clzsi2+0x18>
    2ae4:	0a00      	lsrs	r0, r0, #8
    2ae6:	3908      	subs	r1, #8
    2ae8:	091b      	lsrs	r3, r3, #4
    2aea:	4298      	cmp	r0, r3
    2aec:	d301      	bcc.n	2af2 <__clzsi2+0x22>
    2aee:	0900      	lsrs	r0, r0, #4
    2af0:	3904      	subs	r1, #4
    2af2:	a202      	add	r2, pc, #8	; (adr r2, 2afc <__clzsi2+0x2c>)
    2af4:	5c10      	ldrb	r0, [r2, r0]
    2af6:	1840      	adds	r0, r0, r1
    2af8:	4770      	bx	lr
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	02020304 	.word	0x02020304
    2b00:	01010101 	.word	0x01010101
	...

00002b0c <__divdi3>:
    2b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b0e:	4644      	mov	r4, r8
    2b10:	465f      	mov	r7, fp
    2b12:	4656      	mov	r6, sl
    2b14:	464d      	mov	r5, r9
    2b16:	b4f0      	push	{r4, r5, r6, r7}
    2b18:	1c1c      	adds	r4, r3, #0
    2b1a:	b085      	sub	sp, #20
    2b1c:	2900      	cmp	r1, #0
    2b1e:	da00      	bge.n	2b22 <__divdi3+0x16>
    2b20:	e0db      	b.n	2cda <__divdi3+0x1ce>
    2b22:	1c0f      	adds	r7, r1, #0
    2b24:	2100      	movs	r1, #0
    2b26:	1c06      	adds	r6, r0, #0
    2b28:	468a      	mov	sl, r1
    2b2a:	1c10      	adds	r0, r2, #0
    2b2c:	1c19      	adds	r1, r3, #0
    2b2e:	2c00      	cmp	r4, #0
    2b30:	da00      	bge.n	2b34 <__divdi3+0x28>
    2b32:	e0c9      	b.n	2cc8 <__divdi3+0x1bc>
    2b34:	9601      	str	r6, [sp, #4]
    2b36:	9000      	str	r0, [sp, #0]
    2b38:	4689      	mov	r9, r1
    2b3a:	4680      	mov	r8, r0
    2b3c:	2900      	cmp	r1, #0
    2b3e:	d151      	bne.n	2be4 <__divdi3+0xd8>
    2b40:	42b8      	cmp	r0, r7
    2b42:	d800      	bhi.n	2b46 <__divdi3+0x3a>
    2b44:	e071      	b.n	2c2a <__divdi3+0x11e>
    2b46:	f7ff ffc3 	bl	2ad0 <__clzsi2>
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d009      	beq.n	2b62 <__divdi3+0x56>
    2b4e:	2320      	movs	r3, #32
    2b50:	4645      	mov	r5, r8
    2b52:	1c31      	adds	r1, r6, #0
    2b54:	1a1b      	subs	r3, r3, r0
    2b56:	4085      	lsls	r5, r0
    2b58:	4087      	lsls	r7, r0
    2b5a:	40d9      	lsrs	r1, r3
    2b5c:	46a8      	mov	r8, r5
    2b5e:	430f      	orrs	r7, r1
    2b60:	4086      	lsls	r6, r0
    2b62:	4642      	mov	r2, r8
    2b64:	0c15      	lsrs	r5, r2, #16
    2b66:	0413      	lsls	r3, r2, #16
    2b68:	0c1b      	lsrs	r3, r3, #16
    2b6a:	1c29      	adds	r1, r5, #0
    2b6c:	1c38      	adds	r0, r7, #0
    2b6e:	469b      	mov	fp, r3
    2b70:	f7ff fd1a 	bl	25a8 <__aeabi_uidiv>
    2b74:	465b      	mov	r3, fp
    2b76:	4343      	muls	r3, r0
    2b78:	1c04      	adds	r4, r0, #0
    2b7a:	1c29      	adds	r1, r5, #0
    2b7c:	1c38      	adds	r0, r7, #0
    2b7e:	4699      	mov	r9, r3
    2b80:	f7ff fd56 	bl	2630 <__aeabi_uidivmod>
    2b84:	0c33      	lsrs	r3, r6, #16
    2b86:	0408      	lsls	r0, r1, #16
    2b88:	4318      	orrs	r0, r3
    2b8a:	4581      	cmp	r9, r0
    2b8c:	d909      	bls.n	2ba2 <__divdi3+0x96>
    2b8e:	4440      	add	r0, r8
    2b90:	1e63      	subs	r3, r4, #1
    2b92:	4580      	cmp	r8, r0
    2b94:	d900      	bls.n	2b98 <__divdi3+0x8c>
    2b96:	e178      	b.n	2e8a <__divdi3+0x37e>
    2b98:	4581      	cmp	r9, r0
    2b9a:	d800      	bhi.n	2b9e <__divdi3+0x92>
    2b9c:	e175      	b.n	2e8a <__divdi3+0x37e>
    2b9e:	3c02      	subs	r4, #2
    2ba0:	4440      	add	r0, r8
    2ba2:	4649      	mov	r1, r9
    2ba4:	1a41      	subs	r1, r0, r1
    2ba6:	4689      	mov	r9, r1
    2ba8:	1c08      	adds	r0, r1, #0
    2baa:	1c29      	adds	r1, r5, #0
    2bac:	f7ff fcfc 	bl	25a8 <__aeabi_uidiv>
    2bb0:	465a      	mov	r2, fp
    2bb2:	4342      	muls	r2, r0
    2bb4:	1c07      	adds	r7, r0, #0
    2bb6:	1c29      	adds	r1, r5, #0
    2bb8:	4648      	mov	r0, r9
    2bba:	4693      	mov	fp, r2
    2bbc:	f7ff fd38 	bl	2630 <__aeabi_uidivmod>
    2bc0:	0436      	lsls	r6, r6, #16
    2bc2:	0409      	lsls	r1, r1, #16
    2bc4:	0c36      	lsrs	r6, r6, #16
    2bc6:	430e      	orrs	r6, r1
    2bc8:	45b3      	cmp	fp, r6
    2bca:	d907      	bls.n	2bdc <__divdi3+0xd0>
    2bcc:	4446      	add	r6, r8
    2bce:	1e7b      	subs	r3, r7, #1
    2bd0:	45b0      	cmp	r8, r6
    2bd2:	d802      	bhi.n	2bda <__divdi3+0xce>
    2bd4:	3f02      	subs	r7, #2
    2bd6:	45b3      	cmp	fp, r6
    2bd8:	d800      	bhi.n	2bdc <__divdi3+0xd0>
    2bda:	1c1f      	adds	r7, r3, #0
    2bdc:	0424      	lsls	r4, r4, #16
    2bde:	4327      	orrs	r7, r4
    2be0:	2400      	movs	r4, #0
    2be2:	e003      	b.n	2bec <__divdi3+0xe0>
    2be4:	42b9      	cmp	r1, r7
    2be6:	d911      	bls.n	2c0c <__divdi3+0x100>
    2be8:	2400      	movs	r4, #0
    2bea:	2700      	movs	r7, #0
    2bec:	4652      	mov	r2, sl
    2bee:	1c38      	adds	r0, r7, #0
    2bf0:	1c21      	adds	r1, r4, #0
    2bf2:	2a00      	cmp	r2, #0
    2bf4:	d003      	beq.n	2bfe <__divdi3+0xf2>
    2bf6:	1c3b      	adds	r3, r7, #0
    2bf8:	2100      	movs	r1, #0
    2bfa:	4258      	negs	r0, r3
    2bfc:	41a1      	sbcs	r1, r4
    2bfe:	b005      	add	sp, #20
    2c00:	bc3c      	pop	{r2, r3, r4, r5}
    2c02:	4690      	mov	r8, r2
    2c04:	4699      	mov	r9, r3
    2c06:	46a2      	mov	sl, r4
    2c08:	46ab      	mov	fp, r5
    2c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0c:	1c08      	adds	r0, r1, #0
    2c0e:	f7ff ff5f 	bl	2ad0 <__clzsi2>
    2c12:	1e04      	subs	r4, r0, #0
    2c14:	d000      	beq.n	2c18 <__divdi3+0x10c>
    2c16:	e0bf      	b.n	2d98 <__divdi3+0x28c>
    2c18:	45b9      	cmp	r9, r7
    2c1a:	d200      	bcs.n	2c1e <__divdi3+0x112>
    2c1c:	e142      	b.n	2ea4 <__divdi3+0x398>
    2c1e:	9d01      	ldr	r5, [sp, #4]
    2c20:	9900      	ldr	r1, [sp, #0]
    2c22:	1c07      	adds	r7, r0, #0
    2c24:	428d      	cmp	r5, r1
    2c26:	4147      	adcs	r7, r0
    2c28:	e7e0      	b.n	2bec <__divdi3+0xe0>
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d104      	bne.n	2c38 <__divdi3+0x12c>
    2c2e:	2001      	movs	r0, #1
    2c30:	2100      	movs	r1, #0
    2c32:	f7ff fcb9 	bl	25a8 <__aeabi_uidiv>
    2c36:	4680      	mov	r8, r0
    2c38:	4640      	mov	r0, r8
    2c3a:	f7ff ff49 	bl	2ad0 <__clzsi2>
    2c3e:	2800      	cmp	r0, #0
    2c40:	d152      	bne.n	2ce8 <__divdi3+0x1dc>
    2c42:	4641      	mov	r1, r8
    2c44:	4644      	mov	r4, r8
    2c46:	040b      	lsls	r3, r1, #16
    2c48:	1b3c      	subs	r4, r7, r4
    2c4a:	0c1b      	lsrs	r3, r3, #16
    2c4c:	46a3      	mov	fp, r4
    2c4e:	0c0d      	lsrs	r5, r1, #16
    2c50:	9300      	str	r3, [sp, #0]
    2c52:	2401      	movs	r4, #1
    2c54:	1c29      	adds	r1, r5, #0
    2c56:	4658      	mov	r0, fp
    2c58:	f7ff fca6 	bl	25a8 <__aeabi_uidiv>
    2c5c:	9f00      	ldr	r7, [sp, #0]
    2c5e:	4681      	mov	r9, r0
    2c60:	4347      	muls	r7, r0
    2c62:	1c29      	adds	r1, r5, #0
    2c64:	4658      	mov	r0, fp
    2c66:	f7ff fce3 	bl	2630 <__aeabi_uidivmod>
    2c6a:	0c33      	lsrs	r3, r6, #16
    2c6c:	0409      	lsls	r1, r1, #16
    2c6e:	4319      	orrs	r1, r3
    2c70:	428f      	cmp	r7, r1
    2c72:	d908      	bls.n	2c86 <__divdi3+0x17a>
    2c74:	464b      	mov	r3, r9
    2c76:	4441      	add	r1, r8
    2c78:	3b01      	subs	r3, #1
    2c7a:	4588      	cmp	r8, r1
    2c7c:	d802      	bhi.n	2c84 <__divdi3+0x178>
    2c7e:	428f      	cmp	r7, r1
    2c80:	d900      	bls.n	2c84 <__divdi3+0x178>
    2c82:	e11a      	b.n	2eba <__divdi3+0x3ae>
    2c84:	4699      	mov	r9, r3
    2c86:	1bc9      	subs	r1, r1, r7
    2c88:	468b      	mov	fp, r1
    2c8a:	1c08      	adds	r0, r1, #0
    2c8c:	1c29      	adds	r1, r5, #0
    2c8e:	f7ff fc8b 	bl	25a8 <__aeabi_uidiv>
    2c92:	9b00      	ldr	r3, [sp, #0]
    2c94:	1c29      	adds	r1, r5, #0
    2c96:	4343      	muls	r3, r0
    2c98:	1c07      	adds	r7, r0, #0
    2c9a:	4658      	mov	r0, fp
    2c9c:	9300      	str	r3, [sp, #0]
    2c9e:	f7ff fcc7 	bl	2630 <__aeabi_uidivmod>
    2ca2:	0436      	lsls	r6, r6, #16
    2ca4:	9d00      	ldr	r5, [sp, #0]
    2ca6:	0409      	lsls	r1, r1, #16
    2ca8:	0c36      	lsrs	r6, r6, #16
    2caa:	430e      	orrs	r6, r1
    2cac:	42b5      	cmp	r5, r6
    2cae:	d907      	bls.n	2cc0 <__divdi3+0x1b4>
    2cb0:	4446      	add	r6, r8
    2cb2:	1e7b      	subs	r3, r7, #1
    2cb4:	45b0      	cmp	r8, r6
    2cb6:	d802      	bhi.n	2cbe <__divdi3+0x1b2>
    2cb8:	3f02      	subs	r7, #2
    2cba:	42b5      	cmp	r5, r6
    2cbc:	d800      	bhi.n	2cc0 <__divdi3+0x1b4>
    2cbe:	1c1f      	adds	r7, r3, #0
    2cc0:	4649      	mov	r1, r9
    2cc2:	040e      	lsls	r6, r1, #16
    2cc4:	4337      	orrs	r7, r6
    2cc6:	e791      	b.n	2bec <__divdi3+0xe0>
    2cc8:	4652      	mov	r2, sl
    2cca:	43d2      	mvns	r2, r2
    2ccc:	1c03      	adds	r3, r0, #0
    2cce:	1c0c      	adds	r4, r1, #0
    2cd0:	4692      	mov	sl, r2
    2cd2:	2100      	movs	r1, #0
    2cd4:	4258      	negs	r0, r3
    2cd6:	41a1      	sbcs	r1, r4
    2cd8:	e72c      	b.n	2b34 <__divdi3+0x28>
    2cda:	2700      	movs	r7, #0
    2cdc:	4246      	negs	r6, r0
    2cde:	418f      	sbcs	r7, r1
    2ce0:	2101      	movs	r1, #1
    2ce2:	4249      	negs	r1, r1
    2ce4:	468a      	mov	sl, r1
    2ce6:	e720      	b.n	2b2a <__divdi3+0x1e>
    2ce8:	2320      	movs	r3, #32
    2cea:	1a1b      	subs	r3, r3, r0
    2cec:	4642      	mov	r2, r8
    2cee:	1c35      	adds	r5, r6, #0
    2cf0:	4082      	lsls	r2, r0
    2cf2:	1c3c      	adds	r4, r7, #0
    2cf4:	40dd      	lsrs	r5, r3
    2cf6:	40dc      	lsrs	r4, r3
    2cf8:	4087      	lsls	r7, r0
    2cfa:	1c2b      	adds	r3, r5, #0
    2cfc:	0c15      	lsrs	r5, r2, #16
    2cfe:	433b      	orrs	r3, r7
    2d00:	1c29      	adds	r1, r5, #0
    2d02:	4086      	lsls	r6, r0
    2d04:	1c20      	adds	r0, r4, #0
    2d06:	9300      	str	r3, [sp, #0]
    2d08:	0417      	lsls	r7, r2, #16
    2d0a:	4690      	mov	r8, r2
    2d0c:	f7ff fc4c 	bl	25a8 <__aeabi_uidiv>
    2d10:	0c3f      	lsrs	r7, r7, #16
    2d12:	1c01      	adds	r1, r0, #0
    2d14:	4379      	muls	r1, r7
    2d16:	4681      	mov	r9, r0
    2d18:	468b      	mov	fp, r1
    2d1a:	1c20      	adds	r0, r4, #0
    2d1c:	1c29      	adds	r1, r5, #0
    2d1e:	f7ff fc87 	bl	2630 <__aeabi_uidivmod>
    2d22:	9c00      	ldr	r4, [sp, #0]
    2d24:	0409      	lsls	r1, r1, #16
    2d26:	0c23      	lsrs	r3, r4, #16
    2d28:	4319      	orrs	r1, r3
    2d2a:	458b      	cmp	fp, r1
    2d2c:	d90c      	bls.n	2d48 <__divdi3+0x23c>
    2d2e:	464b      	mov	r3, r9
    2d30:	4441      	add	r1, r8
    2d32:	3b01      	subs	r3, #1
    2d34:	4588      	cmp	r8, r1
    2d36:	d900      	bls.n	2d3a <__divdi3+0x22e>
    2d38:	e0bd      	b.n	2eb6 <__divdi3+0x3aa>
    2d3a:	458b      	cmp	fp, r1
    2d3c:	d800      	bhi.n	2d40 <__divdi3+0x234>
    2d3e:	e0ba      	b.n	2eb6 <__divdi3+0x3aa>
    2d40:	2202      	movs	r2, #2
    2d42:	4252      	negs	r2, r2
    2d44:	4491      	add	r9, r2
    2d46:	4441      	add	r1, r8
    2d48:	465c      	mov	r4, fp
    2d4a:	1b0c      	subs	r4, r1, r4
    2d4c:	1c20      	adds	r0, r4, #0
    2d4e:	1c29      	adds	r1, r5, #0
    2d50:	9401      	str	r4, [sp, #4]
    2d52:	f7ff fc29 	bl	25a8 <__aeabi_uidiv>
    2d56:	1c39      	adds	r1, r7, #0
    2d58:	4341      	muls	r1, r0
    2d5a:	1c04      	adds	r4, r0, #0
    2d5c:	468b      	mov	fp, r1
    2d5e:	9801      	ldr	r0, [sp, #4]
    2d60:	1c29      	adds	r1, r5, #0
    2d62:	f7ff fc65 	bl	2630 <__aeabi_uidivmod>
    2d66:	9a00      	ldr	r2, [sp, #0]
    2d68:	0409      	lsls	r1, r1, #16
    2d6a:	0413      	lsls	r3, r2, #16
    2d6c:	0c1b      	lsrs	r3, r3, #16
    2d6e:	4319      	orrs	r1, r3
    2d70:	458b      	cmp	fp, r1
    2d72:	d909      	bls.n	2d88 <__divdi3+0x27c>
    2d74:	4441      	add	r1, r8
    2d76:	1e63      	subs	r3, r4, #1
    2d78:	4588      	cmp	r8, r1
    2d7a:	d900      	bls.n	2d7e <__divdi3+0x272>
    2d7c:	e097      	b.n	2eae <__divdi3+0x3a2>
    2d7e:	458b      	cmp	fp, r1
    2d80:	d800      	bhi.n	2d84 <__divdi3+0x278>
    2d82:	e094      	b.n	2eae <__divdi3+0x3a2>
    2d84:	3c02      	subs	r4, #2
    2d86:	4441      	add	r1, r8
    2d88:	465b      	mov	r3, fp
    2d8a:	1acb      	subs	r3, r1, r3
    2d8c:	4649      	mov	r1, r9
    2d8e:	469b      	mov	fp, r3
    2d90:	040b      	lsls	r3, r1, #16
    2d92:	431c      	orrs	r4, r3
    2d94:	9700      	str	r7, [sp, #0]
    2d96:	e75d      	b.n	2c54 <__divdi3+0x148>
    2d98:	9d00      	ldr	r5, [sp, #0]
    2d9a:	2320      	movs	r3, #32
    2d9c:	1a1b      	subs	r3, r3, r0
    2d9e:	464a      	mov	r2, r9
    2da0:	4082      	lsls	r2, r0
    2da2:	40dd      	lsrs	r5, r3
    2da4:	4315      	orrs	r5, r2
    2da6:	1c39      	adds	r1, r7, #0
    2da8:	9a00      	ldr	r2, [sp, #0]
    2daa:	40d9      	lsrs	r1, r3
    2dac:	4082      	lsls	r2, r0
    2dae:	4688      	mov	r8, r1
    2db0:	1c31      	adds	r1, r6, #0
    2db2:	9200      	str	r2, [sp, #0]
    2db4:	40d9      	lsrs	r1, r3
    2db6:	1c3a      	adds	r2, r7, #0
    2db8:	4082      	lsls	r2, r0
    2dba:	1c0b      	adds	r3, r1, #0
    2dbc:	4313      	orrs	r3, r2
    2dbe:	9301      	str	r3, [sp, #4]
    2dc0:	0c2f      	lsrs	r7, r5, #16
    2dc2:	042b      	lsls	r3, r5, #16
    2dc4:	0c1b      	lsrs	r3, r3, #16
    2dc6:	1c39      	adds	r1, r7, #0
    2dc8:	4640      	mov	r0, r8
    2dca:	9302      	str	r3, [sp, #8]
    2dcc:	f7ff fbec 	bl	25a8 <__aeabi_uidiv>
    2dd0:	9a02      	ldr	r2, [sp, #8]
    2dd2:	4681      	mov	r9, r0
    2dd4:	4342      	muls	r2, r0
    2dd6:	1c39      	adds	r1, r7, #0
    2dd8:	4640      	mov	r0, r8
    2dda:	4693      	mov	fp, r2
    2ddc:	f7ff fc28 	bl	2630 <__aeabi_uidivmod>
    2de0:	9a01      	ldr	r2, [sp, #4]
    2de2:	0409      	lsls	r1, r1, #16
    2de4:	0c13      	lsrs	r3, r2, #16
    2de6:	4319      	orrs	r1, r3
    2de8:	458b      	cmp	fp, r1
    2dea:	d90a      	bls.n	2e02 <__divdi3+0x2f6>
    2dec:	464b      	mov	r3, r9
    2dee:	1949      	adds	r1, r1, r5
    2df0:	3b01      	subs	r3, #1
    2df2:	428d      	cmp	r5, r1
    2df4:	d85d      	bhi.n	2eb2 <__divdi3+0x3a6>
    2df6:	458b      	cmp	fp, r1
    2df8:	d95b      	bls.n	2eb2 <__divdi3+0x3a6>
    2dfa:	2302      	movs	r3, #2
    2dfc:	425b      	negs	r3, r3
    2dfe:	4499      	add	r9, r3
    2e00:	1949      	adds	r1, r1, r5
    2e02:	465a      	mov	r2, fp
    2e04:	1a8a      	subs	r2, r1, r2
    2e06:	1c10      	adds	r0, r2, #0
    2e08:	1c39      	adds	r1, r7, #0
    2e0a:	9203      	str	r2, [sp, #12]
    2e0c:	f7ff fbcc 	bl	25a8 <__aeabi_uidiv>
    2e10:	9b02      	ldr	r3, [sp, #8]
    2e12:	4680      	mov	r8, r0
    2e14:	4343      	muls	r3, r0
    2e16:	1c39      	adds	r1, r7, #0
    2e18:	9803      	ldr	r0, [sp, #12]
    2e1a:	469b      	mov	fp, r3
    2e1c:	f7ff fc08 	bl	2630 <__aeabi_uidivmod>
    2e20:	9a01      	ldr	r2, [sp, #4]
    2e22:	0409      	lsls	r1, r1, #16
    2e24:	0413      	lsls	r3, r2, #16
    2e26:	0c1b      	lsrs	r3, r3, #16
    2e28:	4319      	orrs	r1, r3
    2e2a:	458b      	cmp	fp, r1
    2e2c:	d90a      	bls.n	2e44 <__divdi3+0x338>
    2e2e:	4643      	mov	r3, r8
    2e30:	1949      	adds	r1, r1, r5
    2e32:	3b01      	subs	r3, #1
    2e34:	428d      	cmp	r5, r1
    2e36:	d838      	bhi.n	2eaa <__divdi3+0x39e>
    2e38:	458b      	cmp	fp, r1
    2e3a:	d936      	bls.n	2eaa <__divdi3+0x39e>
    2e3c:	2302      	movs	r3, #2
    2e3e:	425b      	negs	r3, r3
    2e40:	4498      	add	r8, r3
    2e42:	1949      	adds	r1, r1, r5
    2e44:	465d      	mov	r5, fp
    2e46:	1b4d      	subs	r5, r1, r5
    2e48:	46ab      	mov	fp, r5
    2e4a:	4649      	mov	r1, r9
    2e4c:	9d00      	ldr	r5, [sp, #0]
    2e4e:	040f      	lsls	r7, r1, #16
    2e50:	4642      	mov	r2, r8
    2e52:	4317      	orrs	r7, r2
    2e54:	042a      	lsls	r2, r5, #16
    2e56:	0c12      	lsrs	r2, r2, #16
    2e58:	043b      	lsls	r3, r7, #16
    2e5a:	0c2d      	lsrs	r5, r5, #16
    2e5c:	0c1b      	lsrs	r3, r3, #16
    2e5e:	0c38      	lsrs	r0, r7, #16
    2e60:	1c11      	adds	r1, r2, #0
    2e62:	4359      	muls	r1, r3
    2e64:	4342      	muls	r2, r0
    2e66:	436b      	muls	r3, r5
    2e68:	4368      	muls	r0, r5
    2e6a:	18d3      	adds	r3, r2, r3
    2e6c:	0c0d      	lsrs	r5, r1, #16
    2e6e:	195b      	adds	r3, r3, r5
    2e70:	468c      	mov	ip, r1
    2e72:	429a      	cmp	r2, r3
    2e74:	d902      	bls.n	2e7c <__divdi3+0x370>
    2e76:	2280      	movs	r2, #128	; 0x80
    2e78:	0252      	lsls	r2, r2, #9
    2e7a:	1880      	adds	r0, r0, r2
    2e7c:	0c1d      	lsrs	r5, r3, #16
    2e7e:	1940      	adds	r0, r0, r5
    2e80:	4583      	cmp	fp, r0
    2e82:	d30c      	bcc.n	2e9e <__divdi3+0x392>
    2e84:	d003      	beq.n	2e8e <__divdi3+0x382>
    2e86:	2400      	movs	r4, #0
    2e88:	e6b0      	b.n	2bec <__divdi3+0xe0>
    2e8a:	1c1c      	adds	r4, r3, #0
    2e8c:	e689      	b.n	2ba2 <__divdi3+0x96>
    2e8e:	4665      	mov	r5, ip
    2e90:	042a      	lsls	r2, r5, #16
    2e92:	041b      	lsls	r3, r3, #16
    2e94:	0c12      	lsrs	r2, r2, #16
    2e96:	189b      	adds	r3, r3, r2
    2e98:	40a6      	lsls	r6, r4
    2e9a:	429e      	cmp	r6, r3
    2e9c:	d2f3      	bcs.n	2e86 <__divdi3+0x37a>
    2e9e:	3f01      	subs	r7, #1
    2ea0:	2400      	movs	r4, #0
    2ea2:	e6a3      	b.n	2bec <__divdi3+0xe0>
    2ea4:	2400      	movs	r4, #0
    2ea6:	2701      	movs	r7, #1
    2ea8:	e6a0      	b.n	2bec <__divdi3+0xe0>
    2eaa:	4698      	mov	r8, r3
    2eac:	e7ca      	b.n	2e44 <__divdi3+0x338>
    2eae:	1c1c      	adds	r4, r3, #0
    2eb0:	e76a      	b.n	2d88 <__divdi3+0x27c>
    2eb2:	4699      	mov	r9, r3
    2eb4:	e7a5      	b.n	2e02 <__divdi3+0x2f6>
    2eb6:	4699      	mov	r9, r3
    2eb8:	e746      	b.n	2d48 <__divdi3+0x23c>
    2eba:	2202      	movs	r2, #2
    2ebc:	4252      	negs	r2, r2
    2ebe:	4491      	add	r9, r2
    2ec0:	4441      	add	r1, r8
    2ec2:	e6e0      	b.n	2c86 <__divdi3+0x17a>

00002ec4 <__udivdi3>:
    2ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec6:	465f      	mov	r7, fp
    2ec8:	4656      	mov	r6, sl
    2eca:	464d      	mov	r5, r9
    2ecc:	4644      	mov	r4, r8
    2ece:	b4f0      	push	{r4, r5, r6, r7}
    2ed0:	1c0d      	adds	r5, r1, #0
    2ed2:	b085      	sub	sp, #20
    2ed4:	1c06      	adds	r6, r0, #0
    2ed6:	4692      	mov	sl, r2
    2ed8:	4698      	mov	r8, r3
    2eda:	9002      	str	r0, [sp, #8]
    2edc:	9101      	str	r1, [sp, #4]
    2ede:	9203      	str	r2, [sp, #12]
    2ee0:	1c1f      	adds	r7, r3, #0
    2ee2:	1c14      	adds	r4, r2, #0
    2ee4:	4683      	mov	fp, r0
    2ee6:	46a9      	mov	r9, r5
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d159      	bne.n	2fa0 <__udivdi3+0xdc>
    2eec:	42aa      	cmp	r2, r5
    2eee:	d969      	bls.n	2fc4 <__udivdi3+0x100>
    2ef0:	1c10      	adds	r0, r2, #0
    2ef2:	f7ff fded 	bl	2ad0 <__clzsi2>
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d00a      	beq.n	2f10 <__udivdi3+0x4c>
    2efa:	2320      	movs	r3, #32
    2efc:	1a1b      	subs	r3, r3, r0
    2efe:	1c31      	adds	r1, r6, #0
    2f00:	40d9      	lsrs	r1, r3
    2f02:	4085      	lsls	r5, r0
    2f04:	1c0b      	adds	r3, r1, #0
    2f06:	432b      	orrs	r3, r5
    2f08:	4086      	lsls	r6, r0
    2f0a:	4084      	lsls	r4, r0
    2f0c:	4699      	mov	r9, r3
    2f0e:	46b3      	mov	fp, r6
    2f10:	0c25      	lsrs	r5, r4, #16
    2f12:	0423      	lsls	r3, r4, #16
    2f14:	0c1b      	lsrs	r3, r3, #16
    2f16:	1c29      	adds	r1, r5, #0
    2f18:	4648      	mov	r0, r9
    2f1a:	4698      	mov	r8, r3
    2f1c:	f7ff fb44 	bl	25a8 <__aeabi_uidiv>
    2f20:	4646      	mov	r6, r8
    2f22:	1c07      	adds	r7, r0, #0
    2f24:	4346      	muls	r6, r0
    2f26:	1c29      	adds	r1, r5, #0
    2f28:	4648      	mov	r0, r9
    2f2a:	f7ff fb81 	bl	2630 <__aeabi_uidivmod>
    2f2e:	465a      	mov	r2, fp
    2f30:	0409      	lsls	r1, r1, #16
    2f32:	0c13      	lsrs	r3, r2, #16
    2f34:	4319      	orrs	r1, r3
    2f36:	428e      	cmp	r6, r1
    2f38:	d909      	bls.n	2f4e <__udivdi3+0x8a>
    2f3a:	1909      	adds	r1, r1, r4
    2f3c:	1e7b      	subs	r3, r7, #1
    2f3e:	428c      	cmp	r4, r1
    2f40:	d900      	bls.n	2f44 <__udivdi3+0x80>
    2f42:	e157      	b.n	31f4 <__udivdi3+0x330>
    2f44:	428e      	cmp	r6, r1
    2f46:	d800      	bhi.n	2f4a <__udivdi3+0x86>
    2f48:	e154      	b.n	31f4 <__udivdi3+0x330>
    2f4a:	3f02      	subs	r7, #2
    2f4c:	1909      	adds	r1, r1, r4
    2f4e:	1b89      	subs	r1, r1, r6
    2f50:	4689      	mov	r9, r1
    2f52:	1c08      	adds	r0, r1, #0
    2f54:	1c29      	adds	r1, r5, #0
    2f56:	f7ff fb27 	bl	25a8 <__aeabi_uidiv>
    2f5a:	4643      	mov	r3, r8
    2f5c:	4343      	muls	r3, r0
    2f5e:	1c06      	adds	r6, r0, #0
    2f60:	1c29      	adds	r1, r5, #0
    2f62:	4648      	mov	r0, r9
    2f64:	4698      	mov	r8, r3
    2f66:	f7ff fb63 	bl	2630 <__aeabi_uidivmod>
    2f6a:	465a      	mov	r2, fp
    2f6c:	0413      	lsls	r3, r2, #16
    2f6e:	0409      	lsls	r1, r1, #16
    2f70:	0c1b      	lsrs	r3, r3, #16
    2f72:	4319      	orrs	r1, r3
    2f74:	4588      	cmp	r8, r1
    2f76:	d908      	bls.n	2f8a <__udivdi3+0xc6>
    2f78:	1909      	adds	r1, r1, r4
    2f7a:	1e73      	subs	r3, r6, #1
    2f7c:	428c      	cmp	r4, r1
    2f7e:	d900      	bls.n	2f82 <__udivdi3+0xbe>
    2f80:	e136      	b.n	31f0 <__udivdi3+0x32c>
    2f82:	3e02      	subs	r6, #2
    2f84:	4588      	cmp	r8, r1
    2f86:	d800      	bhi.n	2f8a <__udivdi3+0xc6>
    2f88:	e132      	b.n	31f0 <__udivdi3+0x32c>
    2f8a:	0438      	lsls	r0, r7, #16
    2f8c:	4330      	orrs	r0, r6
    2f8e:	2700      	movs	r7, #0
    2f90:	1c39      	adds	r1, r7, #0
    2f92:	b005      	add	sp, #20
    2f94:	bc3c      	pop	{r2, r3, r4, r5}
    2f96:	4690      	mov	r8, r2
    2f98:	4699      	mov	r9, r3
    2f9a:	46a2      	mov	sl, r4
    2f9c:	46ab      	mov	fp, r5
    2f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fa0:	9a01      	ldr	r2, [sp, #4]
    2fa2:	4293      	cmp	r3, r2
    2fa4:	d862      	bhi.n	306c <__udivdi3+0x1a8>
    2fa6:	1c18      	adds	r0, r3, #0
    2fa8:	f7ff fd92 	bl	2ad0 <__clzsi2>
    2fac:	1e04      	subs	r4, r0, #0
    2fae:	d160      	bne.n	3072 <__udivdi3+0x1ae>
    2fb0:	9b01      	ldr	r3, [sp, #4]
    2fb2:	429f      	cmp	r7, r3
    2fb4:	d200      	bcs.n	2fb8 <__udivdi3+0xf4>
    2fb6:	e12c      	b.n	3212 <__udivdi3+0x34e>
    2fb8:	9f02      	ldr	r7, [sp, #8]
    2fba:	9903      	ldr	r1, [sp, #12]
    2fbc:	428f      	cmp	r7, r1
    2fbe:	4160      	adcs	r0, r4
    2fc0:	2700      	movs	r7, #0
    2fc2:	e7e5      	b.n	2f90 <__udivdi3+0xcc>
    2fc4:	2a00      	cmp	r2, #0
    2fc6:	d104      	bne.n	2fd2 <__udivdi3+0x10e>
    2fc8:	2001      	movs	r0, #1
    2fca:	2100      	movs	r1, #0
    2fcc:	f7ff faec 	bl	25a8 <__aeabi_uidiv>
    2fd0:	1c04      	adds	r4, r0, #0
    2fd2:	1c20      	adds	r0, r4, #0
    2fd4:	f7ff fd7c 	bl	2ad0 <__clzsi2>
    2fd8:	2800      	cmp	r0, #0
    2fda:	d000      	beq.n	2fde <__udivdi3+0x11a>
    2fdc:	e0b9      	b.n	3152 <__udivdi3+0x28e>
    2fde:	0423      	lsls	r3, r4, #16
    2fe0:	1b2d      	subs	r5, r5, r4
    2fe2:	0c1b      	lsrs	r3, r3, #16
    2fe4:	46a9      	mov	r9, r5
    2fe6:	0c26      	lsrs	r6, r4, #16
    2fe8:	4698      	mov	r8, r3
    2fea:	2701      	movs	r7, #1
    2fec:	1c31      	adds	r1, r6, #0
    2fee:	4648      	mov	r0, r9
    2ff0:	f7ff fada 	bl	25a8 <__aeabi_uidiv>
    2ff4:	4641      	mov	r1, r8
    2ff6:	4341      	muls	r1, r0
    2ff8:	1c05      	adds	r5, r0, #0
    2ffa:	468a      	mov	sl, r1
    2ffc:	4648      	mov	r0, r9
    2ffe:	1c31      	adds	r1, r6, #0
    3000:	f7ff fb16 	bl	2630 <__aeabi_uidivmod>
    3004:	465a      	mov	r2, fp
    3006:	0408      	lsls	r0, r1, #16
    3008:	0c13      	lsrs	r3, r2, #16
    300a:	4318      	orrs	r0, r3
    300c:	4582      	cmp	sl, r0
    300e:	d907      	bls.n	3020 <__udivdi3+0x15c>
    3010:	1900      	adds	r0, r0, r4
    3012:	1e6b      	subs	r3, r5, #1
    3014:	4284      	cmp	r4, r0
    3016:	d802      	bhi.n	301e <__udivdi3+0x15a>
    3018:	4582      	cmp	sl, r0
    301a:	d900      	bls.n	301e <__udivdi3+0x15a>
    301c:	e110      	b.n	3240 <__udivdi3+0x37c>
    301e:	1c1d      	adds	r5, r3, #0
    3020:	4653      	mov	r3, sl
    3022:	1ac3      	subs	r3, r0, r3
    3024:	1c18      	adds	r0, r3, #0
    3026:	1c31      	adds	r1, r6, #0
    3028:	469a      	mov	sl, r3
    302a:	f7ff fabd 	bl	25a8 <__aeabi_uidiv>
    302e:	4641      	mov	r1, r8
    3030:	4341      	muls	r1, r0
    3032:	4681      	mov	r9, r0
    3034:	4688      	mov	r8, r1
    3036:	4650      	mov	r0, sl
    3038:	1c31      	adds	r1, r6, #0
    303a:	f7ff faf9 	bl	2630 <__aeabi_uidivmod>
    303e:	465a      	mov	r2, fp
    3040:	0413      	lsls	r3, r2, #16
    3042:	0409      	lsls	r1, r1, #16
    3044:	0c1b      	lsrs	r3, r3, #16
    3046:	4319      	orrs	r1, r3
    3048:	4588      	cmp	r8, r1
    304a:	d90b      	bls.n	3064 <__udivdi3+0x1a0>
    304c:	464b      	mov	r3, r9
    304e:	1909      	adds	r1, r1, r4
    3050:	3b01      	subs	r3, #1
    3052:	428c      	cmp	r4, r1
    3054:	d900      	bls.n	3058 <__udivdi3+0x194>
    3056:	e0cf      	b.n	31f8 <__udivdi3+0x334>
    3058:	4588      	cmp	r8, r1
    305a:	d800      	bhi.n	305e <__udivdi3+0x19a>
    305c:	e0cc      	b.n	31f8 <__udivdi3+0x334>
    305e:	2302      	movs	r3, #2
    3060:	425b      	negs	r3, r3
    3062:	4499      	add	r9, r3
    3064:	0428      	lsls	r0, r5, #16
    3066:	4649      	mov	r1, r9
    3068:	4308      	orrs	r0, r1
    306a:	e791      	b.n	2f90 <__udivdi3+0xcc>
    306c:	2700      	movs	r7, #0
    306e:	2000      	movs	r0, #0
    3070:	e78e      	b.n	2f90 <__udivdi3+0xcc>
    3072:	2320      	movs	r3, #32
    3074:	1a1b      	subs	r3, r3, r0
    3076:	4642      	mov	r2, r8
    3078:	4657      	mov	r7, sl
    307a:	4082      	lsls	r2, r0
    307c:	40df      	lsrs	r7, r3
    307e:	4317      	orrs	r7, r2
    3080:	4652      	mov	r2, sl
    3082:	4082      	lsls	r2, r0
    3084:	9201      	str	r2, [sp, #4]
    3086:	1c32      	adds	r2, r6, #0
    3088:	40da      	lsrs	r2, r3
    308a:	1c29      	adds	r1, r5, #0
    308c:	40d9      	lsrs	r1, r3
    308e:	4085      	lsls	r5, r0
    3090:	1c13      	adds	r3, r2, #0
    3092:	432b      	orrs	r3, r5
    3094:	9302      	str	r3, [sp, #8]
    3096:	0c3d      	lsrs	r5, r7, #16
    3098:	043b      	lsls	r3, r7, #16
    309a:	0c1b      	lsrs	r3, r3, #16
    309c:	4688      	mov	r8, r1
    309e:	1c08      	adds	r0, r1, #0
    30a0:	1c29      	adds	r1, r5, #0
    30a2:	469a      	mov	sl, r3
    30a4:	f7ff fa80 	bl	25a8 <__aeabi_uidiv>
    30a8:	4653      	mov	r3, sl
    30aa:	4343      	muls	r3, r0
    30ac:	4681      	mov	r9, r0
    30ae:	1c29      	adds	r1, r5, #0
    30b0:	4640      	mov	r0, r8
    30b2:	469b      	mov	fp, r3
    30b4:	f7ff fabc 	bl	2630 <__aeabi_uidivmod>
    30b8:	9a02      	ldr	r2, [sp, #8]
    30ba:	0409      	lsls	r1, r1, #16
    30bc:	0c13      	lsrs	r3, r2, #16
    30be:	4319      	orrs	r1, r3
    30c0:	458b      	cmp	fp, r1
    30c2:	d906      	bls.n	30d2 <__udivdi3+0x20e>
    30c4:	464b      	mov	r3, r9
    30c6:	19c9      	adds	r1, r1, r7
    30c8:	3b01      	subs	r3, #1
    30ca:	428f      	cmp	r7, r1
    30cc:	d800      	bhi.n	30d0 <__udivdi3+0x20c>
    30ce:	e0ab      	b.n	3228 <__udivdi3+0x364>
    30d0:	4699      	mov	r9, r3
    30d2:	465a      	mov	r2, fp
    30d4:	1a8a      	subs	r2, r1, r2
    30d6:	1c10      	adds	r0, r2, #0
    30d8:	1c29      	adds	r1, r5, #0
    30da:	4693      	mov	fp, r2
    30dc:	f7ff fa64 	bl	25a8 <__aeabi_uidiv>
    30e0:	4653      	mov	r3, sl
    30e2:	4343      	muls	r3, r0
    30e4:	1c29      	adds	r1, r5, #0
    30e6:	4680      	mov	r8, r0
    30e8:	4658      	mov	r0, fp
    30ea:	469a      	mov	sl, r3
    30ec:	f7ff faa0 	bl	2630 <__aeabi_uidivmod>
    30f0:	9a02      	ldr	r2, [sp, #8]
    30f2:	0409      	lsls	r1, r1, #16
    30f4:	0415      	lsls	r5, r2, #16
    30f6:	0c2d      	lsrs	r5, r5, #16
    30f8:	4329      	orrs	r1, r5
    30fa:	458a      	cmp	sl, r1
    30fc:	d906      	bls.n	310c <__udivdi3+0x248>
    30fe:	4643      	mov	r3, r8
    3100:	19c9      	adds	r1, r1, r7
    3102:	3b01      	subs	r3, #1
    3104:	428f      	cmp	r7, r1
    3106:	d800      	bhi.n	310a <__udivdi3+0x246>
    3108:	e086      	b.n	3218 <__udivdi3+0x354>
    310a:	4698      	mov	r8, r3
    310c:	4657      	mov	r7, sl
    310e:	1bcf      	subs	r7, r1, r7
    3110:	46ba      	mov	sl, r7
    3112:	4649      	mov	r1, r9
    3114:	9f01      	ldr	r7, [sp, #4]
    3116:	0408      	lsls	r0, r1, #16
    3118:	4642      	mov	r2, r8
    311a:	4310      	orrs	r0, r2
    311c:	043d      	lsls	r5, r7, #16
    311e:	0c2d      	lsrs	r5, r5, #16
    3120:	0403      	lsls	r3, r0, #16
    3122:	0c3f      	lsrs	r7, r7, #16
    3124:	0c1b      	lsrs	r3, r3, #16
    3126:	0c02      	lsrs	r2, r0, #16
    3128:	1c29      	adds	r1, r5, #0
    312a:	4359      	muls	r1, r3
    312c:	4355      	muls	r5, r2
    312e:	437b      	muls	r3, r7
    3130:	437a      	muls	r2, r7
    3132:	18eb      	adds	r3, r5, r3
    3134:	0c0f      	lsrs	r7, r1, #16
    3136:	19db      	adds	r3, r3, r7
    3138:	468c      	mov	ip, r1
    313a:	429d      	cmp	r5, r3
    313c:	d902      	bls.n	3144 <__udivdi3+0x280>
    313e:	2780      	movs	r7, #128	; 0x80
    3140:	027f      	lsls	r7, r7, #9
    3142:	19d2      	adds	r2, r2, r7
    3144:	0c1d      	lsrs	r5, r3, #16
    3146:	1952      	adds	r2, r2, r5
    3148:	4592      	cmp	sl, r2
    314a:	d35f      	bcc.n	320c <__udivdi3+0x348>
    314c:	d056      	beq.n	31fc <__udivdi3+0x338>
    314e:	2700      	movs	r7, #0
    3150:	e71e      	b.n	2f90 <__udivdi3+0xcc>
    3152:	2320      	movs	r3, #32
    3154:	1a1b      	subs	r3, r3, r0
    3156:	1c31      	adds	r1, r6, #0
    3158:	1c2f      	adds	r7, r5, #0
    315a:	40d9      	lsrs	r1, r3
    315c:	40df      	lsrs	r7, r3
    315e:	4085      	lsls	r5, r0
    3160:	1c0b      	adds	r3, r1, #0
    3162:	4084      	lsls	r4, r0
    3164:	432b      	orrs	r3, r5
    3166:	4086      	lsls	r6, r0
    3168:	9301      	str	r3, [sp, #4]
    316a:	46b3      	mov	fp, r6
    316c:	0423      	lsls	r3, r4, #16
    316e:	0c26      	lsrs	r6, r4, #16
    3170:	0c1b      	lsrs	r3, r3, #16
    3172:	1c38      	adds	r0, r7, #0
    3174:	1c31      	adds	r1, r6, #0
    3176:	4698      	mov	r8, r3
    3178:	f7ff fa16 	bl	25a8 <__aeabi_uidiv>
    317c:	4642      	mov	r2, r8
    317e:	4342      	muls	r2, r0
    3180:	1c05      	adds	r5, r0, #0
    3182:	1c31      	adds	r1, r6, #0
    3184:	1c38      	adds	r0, r7, #0
    3186:	4691      	mov	r9, r2
    3188:	f7ff fa52 	bl	2630 <__aeabi_uidivmod>
    318c:	9f01      	ldr	r7, [sp, #4]
    318e:	0409      	lsls	r1, r1, #16
    3190:	0c3b      	lsrs	r3, r7, #16
    3192:	4319      	orrs	r1, r3
    3194:	4589      	cmp	r9, r1
    3196:	d907      	bls.n	31a8 <__udivdi3+0x2e4>
    3198:	1909      	adds	r1, r1, r4
    319a:	1e6b      	subs	r3, r5, #1
    319c:	428c      	cmp	r4, r1
    319e:	d84d      	bhi.n	323c <__udivdi3+0x378>
    31a0:	4589      	cmp	r9, r1
    31a2:	d94b      	bls.n	323c <__udivdi3+0x378>
    31a4:	3d02      	subs	r5, #2
    31a6:	1909      	adds	r1, r1, r4
    31a8:	464a      	mov	r2, r9
    31aa:	1a8a      	subs	r2, r1, r2
    31ac:	1c10      	adds	r0, r2, #0
    31ae:	1c31      	adds	r1, r6, #0
    31b0:	4692      	mov	sl, r2
    31b2:	f7ff f9f9 	bl	25a8 <__aeabi_uidiv>
    31b6:	4643      	mov	r3, r8
    31b8:	4343      	muls	r3, r0
    31ba:	1c07      	adds	r7, r0, #0
    31bc:	1c31      	adds	r1, r6, #0
    31be:	4650      	mov	r0, sl
    31c0:	4699      	mov	r9, r3
    31c2:	f7ff fa35 	bl	2630 <__aeabi_uidivmod>
    31c6:	9a01      	ldr	r2, [sp, #4]
    31c8:	0409      	lsls	r1, r1, #16
    31ca:	0413      	lsls	r3, r2, #16
    31cc:	0c1b      	lsrs	r3, r3, #16
    31ce:	4319      	orrs	r1, r3
    31d0:	4589      	cmp	r9, r1
    31d2:	d907      	bls.n	31e4 <__udivdi3+0x320>
    31d4:	1909      	adds	r1, r1, r4
    31d6:	1e7b      	subs	r3, r7, #1
    31d8:	428c      	cmp	r4, r1
    31da:	d82d      	bhi.n	3238 <__udivdi3+0x374>
    31dc:	4589      	cmp	r9, r1
    31de:	d92b      	bls.n	3238 <__udivdi3+0x374>
    31e0:	3f02      	subs	r7, #2
    31e2:	1909      	adds	r1, r1, r4
    31e4:	464b      	mov	r3, r9
    31e6:	1acb      	subs	r3, r1, r3
    31e8:	042d      	lsls	r5, r5, #16
    31ea:	4699      	mov	r9, r3
    31ec:	432f      	orrs	r7, r5
    31ee:	e6fd      	b.n	2fec <__udivdi3+0x128>
    31f0:	1c1e      	adds	r6, r3, #0
    31f2:	e6ca      	b.n	2f8a <__udivdi3+0xc6>
    31f4:	1c1f      	adds	r7, r3, #0
    31f6:	e6aa      	b.n	2f4e <__udivdi3+0x8a>
    31f8:	4699      	mov	r9, r3
    31fa:	e733      	b.n	3064 <__udivdi3+0x1a0>
    31fc:	4661      	mov	r1, ip
    31fe:	040a      	lsls	r2, r1, #16
    3200:	041b      	lsls	r3, r3, #16
    3202:	0c12      	lsrs	r2, r2, #16
    3204:	189b      	adds	r3, r3, r2
    3206:	40a6      	lsls	r6, r4
    3208:	429e      	cmp	r6, r3
    320a:	d2a0      	bcs.n	314e <__udivdi3+0x28a>
    320c:	3801      	subs	r0, #1
    320e:	2700      	movs	r7, #0
    3210:	e6be      	b.n	2f90 <__udivdi3+0xcc>
    3212:	2700      	movs	r7, #0
    3214:	2001      	movs	r0, #1
    3216:	e6bb      	b.n	2f90 <__udivdi3+0xcc>
    3218:	458a      	cmp	sl, r1
    321a:	d800      	bhi.n	321e <__udivdi3+0x35a>
    321c:	e775      	b.n	310a <__udivdi3+0x246>
    321e:	2302      	movs	r3, #2
    3220:	425b      	negs	r3, r3
    3222:	4498      	add	r8, r3
    3224:	19c9      	adds	r1, r1, r7
    3226:	e771      	b.n	310c <__udivdi3+0x248>
    3228:	458b      	cmp	fp, r1
    322a:	d800      	bhi.n	322e <__udivdi3+0x36a>
    322c:	e750      	b.n	30d0 <__udivdi3+0x20c>
    322e:	2302      	movs	r3, #2
    3230:	425b      	negs	r3, r3
    3232:	4499      	add	r9, r3
    3234:	19c9      	adds	r1, r1, r7
    3236:	e74c      	b.n	30d2 <__udivdi3+0x20e>
    3238:	1c1f      	adds	r7, r3, #0
    323a:	e7d3      	b.n	31e4 <__udivdi3+0x320>
    323c:	1c1d      	adds	r5, r3, #0
    323e:	e7b3      	b.n	31a8 <__udivdi3+0x2e4>
    3240:	3d02      	subs	r5, #2
    3242:	1900      	adds	r0, r0, r4
    3244:	e6ec      	b.n	3020 <__udivdi3+0x15c>
    3246:	46c0      	nop			; (mov r8, r8)

00003248 <__libc_init_array>:
    3248:	b570      	push	{r4, r5, r6, lr}
    324a:	4b0e      	ldr	r3, [pc, #56]	; (3284 <__libc_init_array+0x3c>)
    324c:	4d0e      	ldr	r5, [pc, #56]	; (3288 <__libc_init_array+0x40>)
    324e:	2400      	movs	r4, #0
    3250:	1aed      	subs	r5, r5, r3
    3252:	10ad      	asrs	r5, r5, #2
    3254:	1c1e      	adds	r6, r3, #0
    3256:	42ac      	cmp	r4, r5
    3258:	d004      	beq.n	3264 <__libc_init_array+0x1c>
    325a:	00a3      	lsls	r3, r4, #2
    325c:	58f3      	ldr	r3, [r6, r3]
    325e:	4798      	blx	r3
    3260:	3401      	adds	r4, #1
    3262:	e7f8      	b.n	3256 <__libc_init_array+0xe>
    3264:	f000 f870 	bl	3348 <_init>
    3268:	4b08      	ldr	r3, [pc, #32]	; (328c <__libc_init_array+0x44>)
    326a:	4d09      	ldr	r5, [pc, #36]	; (3290 <__libc_init_array+0x48>)
    326c:	2400      	movs	r4, #0
    326e:	1aed      	subs	r5, r5, r3
    3270:	10ad      	asrs	r5, r5, #2
    3272:	1c1e      	adds	r6, r3, #0
    3274:	42ac      	cmp	r4, r5
    3276:	d004      	beq.n	3282 <__libc_init_array+0x3a>
    3278:	00a3      	lsls	r3, r4, #2
    327a:	58f3      	ldr	r3, [r6, r3]
    327c:	4798      	blx	r3
    327e:	3401      	adds	r4, #1
    3280:	e7f8      	b.n	3274 <__libc_init_array+0x2c>
    3282:	bd70      	pop	{r4, r5, r6, pc}
    3284:	00003354 	.word	0x00003354
    3288:	00003354 	.word	0x00003354
    328c:	00003354 	.word	0x00003354
    3290:	00003358 	.word	0x00003358

00003294 <memcmp>:
    3294:	b530      	push	{r4, r5, lr}
    3296:	2300      	movs	r3, #0
    3298:	4293      	cmp	r3, r2
    329a:	d008      	beq.n	32ae <memcmp+0x1a>
    329c:	5cc5      	ldrb	r5, [r0, r3]
    329e:	3301      	adds	r3, #1
    32a0:	18cc      	adds	r4, r1, r3
    32a2:	3c01      	subs	r4, #1
    32a4:	7824      	ldrb	r4, [r4, #0]
    32a6:	42a5      	cmp	r5, r4
    32a8:	d0f6      	beq.n	3298 <memcmp+0x4>
    32aa:	1b28      	subs	r0, r5, r4
    32ac:	e000      	b.n	32b0 <memcmp+0x1c>
    32ae:	2000      	movs	r0, #0
    32b0:	bd30      	pop	{r4, r5, pc}

000032b2 <memcpy>:
    32b2:	b510      	push	{r4, lr}
    32b4:	2300      	movs	r3, #0
    32b6:	4293      	cmp	r3, r2
    32b8:	d003      	beq.n	32c2 <memcpy+0x10>
    32ba:	5ccc      	ldrb	r4, [r1, r3]
    32bc:	54c4      	strb	r4, [r0, r3]
    32be:	3301      	adds	r3, #1
    32c0:	e7f9      	b.n	32b6 <memcpy+0x4>
    32c2:	bd10      	pop	{r4, pc}

000032c4 <memset>:
    32c4:	1c03      	adds	r3, r0, #0
    32c6:	1882      	adds	r2, r0, r2
    32c8:	4293      	cmp	r3, r2
    32ca:	d002      	beq.n	32d2 <memset+0xe>
    32cc:	7019      	strb	r1, [r3, #0]
    32ce:	3301      	adds	r3, #1
    32d0:	e7fa      	b.n	32c8 <memset+0x4>
    32d2:	4770      	bx	lr
    32d4:	000009f8 	.word	0x000009f8
    32d8:	000009fe 	.word	0x000009fe
    32dc:	000009c6 	.word	0x000009c6
    32e0:	00000a28 	.word	0x00000a28
    32e4:	000009c6 	.word	0x000009c6
    32e8:	00000a3a 	.word	0x00000a3a
    32ec:	000009c6 	.word	0x000009c6
    32f0:	00000a72 	.word	0x00000a72
    32f4:	000009c6 	.word	0x000009c6
    32f8:	000009c6 	.word	0x000009c6
    32fc:	000009c6 	.word	0x000009c6
    3300:	000009c6 	.word	0x000009c6
    3304:	000009c6 	.word	0x000009c6
    3308:	000009c6 	.word	0x000009c6
    330c:	000009c6 	.word	0x000009c6
    3310:	00000a9c 	.word	0x00000a9c
    3314:	00000ad4 	.word	0x00000ad4
    3318:	00000b4a 	.word	0x00000b4a
    331c:	000009da 	.word	0x000009da
    3320:	00000a09 	.word	0x00000a09
    3324:	00001ba0 	.word	0x00001ba0
    3328:	00001bd4 	.word	0x00001bd4
    332c:	00001bd4 	.word	0x00001bd4
    3330:	00001bb8 	.word	0x00001bb8
    3334:	00001bb8 	.word	0x00001bb8
    3338:	00001bbe 	.word	0x00001bbe
    333c:	00001bc4 	.word	0x00001bc4
    3340:	00001b82 	.word	0x00001b82
    3344:	00001ba6 	.word	0x00001ba6

00003348 <_init>:
    3348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    334e:	bc08      	pop	{r3}
    3350:	469e      	mov	lr, r3
    3352:	4770      	bx	lr

00003354 <__init_array_start>:
    3354:	000000b5 	.word	0x000000b5

00003358 <_fini>:
    3358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    335e:	bc08      	pop	{r3}
    3360:	469e      	mov	lr, r3
    3362:	4770      	bx	lr

00003364 <__fini_array_start>:
    3364:	0000008d 	.word	0x0000008d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <imuFrameData>:
2000000c:	cccd 3dcc cccd 3e4c 999a 3e99 cccd 3ecc     ...=..L>...>...>
2000001c:	0001 0002 0003 0004 0005 0006 0007 0008     ................
2000002c:	0009 0000                                   ....

20000030 <g_interrupt_enabled>:
20000030:	0001 0000                                   ....

20000034 <packetParserConfig>:
20000034:	21dd 0000 21cd 0000 09b5 0000 0300 2000     .!...!......... 

20000044 <em7180Config>:
20000044:	0000 0000 0029 0000 0050 2000               ....)...P.. 

20000050 <twiConfig>:
20000050:	0800 4200 0000 0000 0000 0000 0000 0000     ...B............
20000060:	0190 0000 0190 0000 0000 0000 0000 0000     ................
20000070:	0000 0000 ffff ffff 0000 0000 0002 000e     ................
20000080:	0002 000f 0000 0000 0000 0000 0000 0000     ................
20000090:	00d7 0000 0000 0000                         ........

20000098 <settings>:
	...
200000ac:	0800 0007                                   ....
