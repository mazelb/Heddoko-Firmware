
BrainMCU_v0.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001720c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041720c  0041720c  0001f20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d94  20000000  00417214  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003358  20000d94  00417fa8  00020d94  2**2
                  ALLOC
  4 .stack        00003004  200040ec  0041b300  00020d94  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020d94  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020dbe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e17a  00000000  00000000  00020e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000471c  00000000  00000000  0003ef93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008326  00000000  00000000  000436af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001710  00000000  00000000  0004b9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014a0  00000000  00000000  0004d0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e054  00000000  00000000  0004e585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021be7  00000000  00000000  0006c5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005cf67  00000000  00000000  0008e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005e78  00000000  00000000  000eb128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200070f0 	.word	0x200070f0
  400004:	0040bd49 	.word	0x0040bd49
  400008:	0040be11 	.word	0x0040be11
  40000c:	0040c1b5 	.word	0x0040c1b5
  400010:	0040c1bd 	.word	0x0040c1bd
  400014:	0040c1c5 	.word	0x0040c1c5
  400018:	0040c1cd 	.word	0x0040c1cd
	...
  40002c:	004061dd 	.word	0x004061dd
  400030:	0040be11 	.word	0x0040be11
  400034:	00000000 	.word	0x00000000
  400038:	004062b5 	.word	0x004062b5
  40003c:	0040c1d5 	.word	0x0040c1d5
  400040:	0040be11 	.word	0x0040be11
  400044:	0040be11 	.word	0x0040be11
  400048:	0040be11 	.word	0x0040be11
  40004c:	0040be11 	.word	0x0040be11
  400050:	0040be11 	.word	0x0040be11
  400054:	0040be11 	.word	0x0040be11
  400058:	0040be11 	.word	0x0040be11
  40005c:	00000000 	.word	0x00000000
  400060:	00408f81 	.word	0x00408f81
  400064:	00408fe5 	.word	0x00408fe5
  400068:	00000000 	.word	0x00000000
  40006c:	0040ba1d 	.word	0x0040ba1d
  400070:	0040ba35 	.word	0x0040ba35
  400074:	00000000 	.word	0x00000000
  400078:	0040904d 	.word	0x0040904d
  40007c:	004090b5 	.word	0x004090b5
	...
  400088:	0040be11 	.word	0x0040be11
  40008c:	0040be11 	.word	0x0040be11
  400090:	0040be11 	.word	0x0040be11
  400094:	0040be11 	.word	0x0040be11
  400098:	0040be11 	.word	0x0040be11
  40009c:	0040be11 	.word	0x0040be11
  4000a0:	0040be11 	.word	0x0040be11
  4000a4:	0040be11 	.word	0x0040be11
	...
  4000b4:	0040be11 	.word	0x0040be11
  4000b8:	0040be11 	.word	0x0040be11
  4000bc:	0040be11 	.word	0x0040be11
  4000c0:	0040be11 	.word	0x0040be11
  4000c4:	0040be11 	.word	0x0040be11
  4000c8:	0040be11 	.word	0x0040be11

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000d94 	.word	0x20000d94
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00417214 	.word	0x00417214

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00417214 	.word	0x00417214
  400114:	20000d98 	.word	0x20000d98
  400118:	00417214 	.word	0x00417214
  40011c:	00000000 	.word	0x00000000

00400120 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  400120:	b480      	push	{r7}
  400122:	b087      	sub	sp, #28
  400124:	af00      	add	r7, sp, #0
  400126:	60f8      	str	r0, [r7, #12]
  400128:	8179      	strh	r1, [r7, #10]
  40012a:	813a      	strh	r2, [r7, #8]
  40012c:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40012e:	897a      	ldrh	r2, [r7, #10]
  400130:	893b      	ldrh	r3, [r7, #8]
  400132:	1ad3      	subs	r3, r2, r3
  400134:	3307      	adds	r3, #7
  400136:	2b00      	cmp	r3, #0
  400138:	da00      	bge.n	40013c <SDMMC_UNSTUFF_BITS+0x1c>
  40013a:	3307      	adds	r3, #7
  40013c:	10db      	asrs	r3, r3, #3
  40013e:	3b01      	subs	r3, #1
  400140:	68fa      	ldr	r2, [r7, #12]
  400142:	4413      	add	r3, r2
  400144:	781b      	ldrb	r3, [r3, #0]
  400146:	461a      	mov	r2, r3
  400148:	893b      	ldrh	r3, [r7, #8]
  40014a:	f003 0307 	and.w	r3, r3, #7
  40014e:	fa42 f303 	asr.w	r3, r2, r3
  400152:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  400154:	893b      	ldrh	r3, [r7, #8]
  400156:	f003 0207 	and.w	r2, r3, #7
  40015a:	79fb      	ldrb	r3, [r7, #7]
  40015c:	4413      	add	r3, r2
  40015e:	2b08      	cmp	r3, #8
  400160:	dd16      	ble.n	400190 <SDMMC_UNSTUFF_BITS+0x70>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400162:	897a      	ldrh	r2, [r7, #10]
  400164:	893b      	ldrh	r3, [r7, #8]
  400166:	1ad3      	subs	r3, r2, r3
  400168:	3307      	adds	r3, #7
  40016a:	2b00      	cmp	r3, #0
  40016c:	da00      	bge.n	400170 <SDMMC_UNSTUFF_BITS+0x50>
  40016e:	3307      	adds	r3, #7
  400170:	10db      	asrs	r3, r3, #3
  400172:	3b02      	subs	r3, #2
  400174:	68fa      	ldr	r2, [r7, #12]
  400176:	4413      	add	r3, r2
  400178:	781b      	ldrb	r3, [r3, #0]
  40017a:	461a      	mov	r2, r3
  40017c:	893b      	ldrh	r3, [r7, #8]
  40017e:	f003 0307 	and.w	r3, r3, #7
  400182:	f1c3 0308 	rsb	r3, r3, #8
  400186:	fa02 f303 	lsl.w	r3, r2, r3
  40018a:	697a      	ldr	r2, [r7, #20]
  40018c:	4313      	orrs	r3, r2
  40018e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  400190:	893b      	ldrh	r3, [r7, #8]
  400192:	f003 0207 	and.w	r2, r3, #7
  400196:	79fb      	ldrb	r3, [r7, #7]
  400198:	4413      	add	r3, r2
  40019a:	2b10      	cmp	r3, #16
  40019c:	dd16      	ble.n	4001cc <SDMMC_UNSTUFF_BITS+0xac>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40019e:	897a      	ldrh	r2, [r7, #10]
  4001a0:	893b      	ldrh	r3, [r7, #8]
  4001a2:	1ad3      	subs	r3, r2, r3
  4001a4:	3307      	adds	r3, #7
  4001a6:	2b00      	cmp	r3, #0
  4001a8:	da00      	bge.n	4001ac <SDMMC_UNSTUFF_BITS+0x8c>
  4001aa:	3307      	adds	r3, #7
  4001ac:	10db      	asrs	r3, r3, #3
  4001ae:	3b03      	subs	r3, #3
  4001b0:	68fa      	ldr	r2, [r7, #12]
  4001b2:	4413      	add	r3, r2
  4001b4:	781b      	ldrb	r3, [r3, #0]
  4001b6:	461a      	mov	r2, r3
  4001b8:	893b      	ldrh	r3, [r7, #8]
  4001ba:	f003 0307 	and.w	r3, r3, #7
  4001be:	f1c3 0310 	rsb	r3, r3, #16
  4001c2:	fa02 f303 	lsl.w	r3, r2, r3
  4001c6:	697a      	ldr	r2, [r7, #20]
  4001c8:	4313      	orrs	r3, r2
  4001ca:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  4001cc:	893b      	ldrh	r3, [r7, #8]
  4001ce:	f003 0207 	and.w	r2, r3, #7
  4001d2:	79fb      	ldrb	r3, [r7, #7]
  4001d4:	4413      	add	r3, r2
  4001d6:	2b10      	cmp	r3, #16
  4001d8:	dd16      	ble.n	400208 <SDMMC_UNSTUFF_BITS+0xe8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4001da:	897a      	ldrh	r2, [r7, #10]
  4001dc:	893b      	ldrh	r3, [r7, #8]
  4001de:	1ad3      	subs	r3, r2, r3
  4001e0:	3307      	adds	r3, #7
  4001e2:	2b00      	cmp	r3, #0
  4001e4:	da00      	bge.n	4001e8 <SDMMC_UNSTUFF_BITS+0xc8>
  4001e6:	3307      	adds	r3, #7
  4001e8:	10db      	asrs	r3, r3, #3
  4001ea:	3b03      	subs	r3, #3
  4001ec:	68fa      	ldr	r2, [r7, #12]
  4001ee:	4413      	add	r3, r2
  4001f0:	781b      	ldrb	r3, [r3, #0]
  4001f2:	461a      	mov	r2, r3
  4001f4:	893b      	ldrh	r3, [r7, #8]
  4001f6:	f003 0307 	and.w	r3, r3, #7
  4001fa:	f1c3 0310 	rsb	r3, r3, #16
  4001fe:	fa02 f303 	lsl.w	r3, r2, r3
  400202:	697a      	ldr	r2, [r7, #20]
  400204:	4313      	orrs	r3, r2
  400206:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  400208:	79fb      	ldrb	r3, [r7, #7]
  40020a:	2201      	movs	r2, #1
  40020c:	fa02 f303 	lsl.w	r3, r2, r3
  400210:	3b01      	subs	r3, #1
  400212:	697a      	ldr	r2, [r7, #20]
  400214:	4013      	ands	r3, r2
  400216:	617b      	str	r3, [r7, #20]
	return value;
  400218:	697b      	ldr	r3, [r7, #20]
}
  40021a:	4618      	mov	r0, r3
  40021c:	371c      	adds	r7, #28
  40021e:	46bd      	mov	sp, r7
  400220:	f85d 7b04 	ldr.w	r7, [sp], #4
  400224:	4770      	bx	lr
  400226:	bf00      	nop

00400228 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400228:	b480      	push	{r7}
  40022a:	b083      	sub	sp, #12
  40022c:	af00      	add	r7, sp, #0
  40022e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400230:	687b      	ldr	r3, [r7, #4]
  400232:	2b07      	cmp	r3, #7
  400234:	d825      	bhi.n	400282 <osc_get_rate+0x5a>
  400236:	a201      	add	r2, pc, #4	; (adr r2, 40023c <osc_get_rate+0x14>)
  400238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40023c:	0040025d 	.word	0x0040025d
  400240:	00400263 	.word	0x00400263
  400244:	00400269 	.word	0x00400269
  400248:	0040026f 	.word	0x0040026f
  40024c:	00400273 	.word	0x00400273
  400250:	00400277 	.word	0x00400277
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40025c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400260:	e010      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400266:	e00d      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40026c:	e00a      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_get_rate+0x68>)
  400270:	e008      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400272:	4b08      	ldr	r3, [pc, #32]	; (400294 <osc_get_rate+0x6c>)
  400274:	e006      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <osc_get_rate+0x70>)
  400278:	e004      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x74>)
  40027c:	e002      	b.n	400284 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40027e:	4b07      	ldr	r3, [pc, #28]	; (40029c <osc_get_rate+0x74>)
  400280:	e000      	b.n	400284 <osc_get_rate+0x5c>
	}

	return 0;
  400282:	2300      	movs	r3, #0
}
  400284:	4618      	mov	r0, r3
  400286:	370c      	adds	r7, #12
  400288:	46bd      	mov	sp, r7
  40028a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40028e:	4770      	bx	lr
  400290:	003d0900 	.word	0x003d0900
  400294:	007a1200 	.word	0x007a1200
  400298:	00b71b00 	.word	0x00b71b00
  40029c:	00f42400 	.word	0x00f42400

004002a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4002a0:	b580      	push	{r7, lr}
  4002a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4002a4:	2006      	movs	r0, #6
  4002a6:	4b04      	ldr	r3, [pc, #16]	; (4002b8 <sysclk_get_main_hz+0x18>)
  4002a8:	4798      	blx	r3
  4002aa:	4602      	mov	r2, r0
  4002ac:	4613      	mov	r3, r2
  4002ae:	011b      	lsls	r3, r3, #4
  4002b0:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4002b2:	4618      	mov	r0, r3
  4002b4:	bd80      	pop	{r7, pc}
  4002b6:	bf00      	nop
  4002b8:	00400229 	.word	0x00400229

004002bc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4002bc:	b580      	push	{r7, lr}
  4002be:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002c0:	4b02      	ldr	r3, [pc, #8]	; (4002cc <sysclk_get_cpu_hz+0x10>)
  4002c2:	4798      	blx	r3
  4002c4:	4603      	mov	r3, r0
  4002c6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002c8:	4618      	mov	r0, r3
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	004002a1 	.word	0x004002a1

004002d0 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  4002d0:	b480      	push	{r7}
  4002d2:	b089      	sub	sp, #36	; 0x24
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	6078      	str	r0, [r7, #4]
  4002d8:	687b      	ldr	r3, [r7, #4]
  4002da:	61fb      	str	r3, [r7, #28]
  4002dc:	69fb      	ldr	r3, [r7, #28]
  4002de:	61bb      	str	r3, [r7, #24]
  4002e0:	69bb      	ldr	r3, [r7, #24]
  4002e2:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4002e4:	697b      	ldr	r3, [r7, #20]
  4002e6:	095b      	lsrs	r3, r3, #5
  4002e8:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4002ea:	693b      	ldr	r3, [r7, #16]
  4002ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4002f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4002f4:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4002f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4002f8:	69fb      	ldr	r3, [r7, #28]
  4002fa:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4002fc:	68fb      	ldr	r3, [r7, #12]
  4002fe:	f003 031f 	and.w	r3, r3, #31
  400302:	2101      	movs	r1, #1
  400304:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400308:	4013      	ands	r3, r2
  40030a:	2b00      	cmp	r3, #0
  40030c:	bf0c      	ite	eq
  40030e:	2300      	moveq	r3, #0
  400310:	2301      	movne	r3, #1
  400312:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  400314:	4618      	mov	r0, r3
  400316:	3724      	adds	r7, #36	; 0x24
  400318:	46bd      	mov	sp, r7
  40031a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40031e:	4770      	bx	lr

00400320 <SD_MMC_START_TIMEOUT>:
#  ifdef FREERTOS_USED
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
  400320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  400324:	af00      	add	r7, sp, #0
	if (!SysTick->CTRL) {
  400326:	4b2b      	ldr	r3, [pc, #172]	; (4003d4 <SD_MMC_START_TIMEOUT+0xb4>)
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d113      	bne.n	400356 <SD_MMC_START_TIMEOUT+0x36>
		sd_mmc_sam_systick_used = true;
  40032e:	4b2a      	ldr	r3, [pc, #168]	; (4003d8 <SD_MMC_START_TIMEOUT+0xb8>)
  400330:	2201      	movs	r2, #1
  400332:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400334:	4c27      	ldr	r4, [pc, #156]	; (4003d4 <SD_MMC_START_TIMEOUT+0xb4>)
  400336:	4b29      	ldr	r3, [pc, #164]	; (4003dc <SD_MMC_START_TIMEOUT+0xbc>)
  400338:	4798      	blx	r3
  40033a:	4602      	mov	r2, r0
  40033c:	4b28      	ldr	r3, [pc, #160]	; (4003e0 <SD_MMC_START_TIMEOUT+0xc0>)
  40033e:	fba3 1302 	umull	r1, r3, r3, r2
  400342:	0a5b      	lsrs	r3, r3, #9
				* SD_MMC_DEBOUNCE_TIMEOUT;
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f303 	mul.w	r3, r2, r3

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  40034c:	6063      	str	r3, [r4, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  40034e:	4b21      	ldr	r3, [pc, #132]	; (4003d4 <SD_MMC_START_TIMEOUT+0xb4>)
  400350:	2201      	movs	r2, #1
  400352:	601a      	str	r2, [r3, #0]
  400354:	e03b      	b.n	4003ce <SD_MMC_START_TIMEOUT+0xae>
	} else {
		sd_mmc_sam_systick_used = false;
  400356:	4b20      	ldr	r3, [pc, #128]	; (4003d8 <SD_MMC_START_TIMEOUT+0xb8>)
  400358:	2200      	movs	r2, #0
  40035a:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  40035c:	4b1f      	ldr	r3, [pc, #124]	; (4003dc <SD_MMC_START_TIMEOUT+0xbc>)
  40035e:	4798      	blx	r3
  400360:	4603      	mov	r3, r0
  400362:	4618      	mov	r0, r3
  400364:	f04f 0100 	mov.w	r1, #0
  400368:	4602      	mov	r2, r0
  40036a:	460b      	mov	r3, r1
  40036c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  400370:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  400374:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  400378:	4652      	mov	r2, sl
  40037a:	465b      	mov	r3, fp
  40037c:	015d      	lsls	r5, r3, #5
  40037e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  400382:	0154      	lsls	r4, r2, #5
  400384:	1aa4      	subs	r4, r4, r2
  400386:	eb65 0503 	sbc.w	r5, r5, r3
  40038a:	1824      	adds	r4, r4, r0
  40038c:	eb45 0501 	adc.w	r5, r5, r1
  400390:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  400394:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  400398:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  40039c:	4644      	mov	r4, r8
  40039e:	464d      	mov	r5, r9
  4003a0:	4620      	mov	r0, r4
  4003a2:	4629      	mov	r1, r5
  4003a4:	f243 62af 	movw	r2, #13999	; 0x36af
  4003a8:	f04f 0300 	mov.w	r3, #0
  4003ac:	1812      	adds	r2, r2, r0
  4003ae:	eb43 0301 	adc.w	r3, r3, r1
  4003b2:	4c0c      	ldr	r4, [pc, #48]	; (4003e4 <SD_MMC_START_TIMEOUT+0xc4>)
  4003b4:	4610      	mov	r0, r2
  4003b6:	4619      	mov	r1, r3
  4003b8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4003bc:	f04f 0300 	mov.w	r3, #0
  4003c0:	47a0      	blx	r4
  4003c2:	4602      	mov	r2, r0
  4003c4:	460b      	mov	r3, r1
  4003c6:	4613      	mov	r3, r2
  4003c8:	4618      	mov	r0, r3
  4003ca:	4b07      	ldr	r3, [pc, #28]	; (4003e8 <SD_MMC_START_TIMEOUT+0xc8>)
  4003cc:	4798      	blx	r3
#endif
	}
}
  4003ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  4003d2:	bf00      	nop
  4003d4:	e000e010 	.word	0xe000e010
  4003d8:	20000dbc 	.word	0x20000dbc
  4003dc:	004002bd 	.word	0x004002bd
  4003e0:	10624dd3 	.word	0x10624dd3
  4003e4:	0040c325 	.word	0x0040c325
  4003e8:	20000001 	.word	0x20000001

004003ec <SD_MMC_IS_TIMEOUT>:

static inline bool SD_MMC_IS_TIMEOUT(void)
{
  4003ec:	b480      	push	{r7}
  4003ee:	af00      	add	r7, sp, #0
	if (!sd_mmc_sam_systick_used) {
  4003f0:	4b0c      	ldr	r3, [pc, #48]	; (400424 <SD_MMC_IS_TIMEOUT+0x38>)
  4003f2:	781b      	ldrb	r3, [r3, #0]
  4003f4:	f083 0301 	eor.w	r3, r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d001      	beq.n	400402 <SD_MMC_IS_TIMEOUT+0x16>
#ifdef FREERTOS_USED
		portTickType xTicksToWait =
				SD_MMC_DEBOUNCE_TIMEOUT / portTICK_RATE_MS;
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
  4003fe:	2301      	movs	r3, #1
  400400:	e00b      	b.n	40041a <SD_MMC_IS_TIMEOUT+0x2e>
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400402:	4b09      	ldr	r3, [pc, #36]	; (400428 <SD_MMC_IS_TIMEOUT+0x3c>)
  400404:	681b      	ldr	r3, [r3, #0]
  400406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40040a:	2b00      	cmp	r3, #0
  40040c:	d004      	beq.n	400418 <SD_MMC_IS_TIMEOUT+0x2c>
		SysTick->CTRL = 0;
  40040e:	4b06      	ldr	r3, [pc, #24]	; (400428 <SD_MMC_IS_TIMEOUT+0x3c>)
  400410:	2200      	movs	r2, #0
  400412:	601a      	str	r2, [r3, #0]
		return true;
  400414:	2301      	movs	r3, #1
  400416:	e000      	b.n	40041a <SD_MMC_IS_TIMEOUT+0x2e>
	}
	return false;
  400418:	2300      	movs	r3, #0
}
  40041a:	4618      	mov	r0, r3
  40041c:	46bd      	mov	sp, r7
  40041e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400422:	4770      	bx	lr
  400424:	20000dbc 	.word	0x20000dbc
  400428:	e000e010 	.word	0xe000e010

0040042c <SD_MMC_STOP_TIMEOUT>:

static inline void SD_MMC_STOP_TIMEOUT(void)
{
  40042c:	b480      	push	{r7}
  40042e:	af00      	add	r7, sp, #0
	if (sd_mmc_sam_systick_used) {
  400430:	4b05      	ldr	r3, [pc, #20]	; (400448 <SD_MMC_STOP_TIMEOUT+0x1c>)
  400432:	781b      	ldrb	r3, [r3, #0]
  400434:	2b00      	cmp	r3, #0
  400436:	d002      	beq.n	40043e <SD_MMC_STOP_TIMEOUT+0x12>
		SysTick->CTRL = 0;
  400438:	4b04      	ldr	r3, [pc, #16]	; (40044c <SD_MMC_STOP_TIMEOUT+0x20>)
  40043a:	2200      	movs	r2, #0
  40043c:	601a      	str	r2, [r3, #0]
	}
}
  40043e:	46bd      	mov	sp, r7
  400440:	f85d 7b04 	ldr.w	r7, [sp], #4
  400444:	4770      	bx	lr
  400446:	bf00      	nop
  400448:	20000dbc 	.word	0x20000dbc
  40044c:	e000e010 	.word	0xe000e010

00400450 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  400450:	b580      	push	{r7, lr}
  400452:	b082      	sub	sp, #8
  400454:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  400456:	f241 0368 	movw	r3, #4200	; 0x1068
  40045a:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40045c:	f244 5001 	movw	r0, #17665	; 0x4501
  400460:	4917      	ldr	r1, [pc, #92]	; (4004c0 <mmc_mci_op_cond+0x70>)
  400462:	4b18      	ldr	r3, [pc, #96]	; (4004c4 <mmc_mci_op_cond+0x74>)
  400464:	4798      	blx	r3
  400466:	4603      	mov	r3, r0
  400468:	f083 0301 	eor.w	r3, r3, #1
  40046c:	b2db      	uxtb	r3, r3
  40046e:	2b00      	cmp	r3, #0
  400470:	d001      	beq.n	400476 <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  400472:	2300      	movs	r3, #0
  400474:	e01f      	b.n	4004b6 <mmc_mci_op_cond+0x66>
		}
		// Check busy flag
		resp = driver_get_response();
  400476:	4b14      	ldr	r3, [pc, #80]	; (4004c8 <mmc_mci_op_cond+0x78>)
  400478:	4798      	blx	r3
  40047a:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  40047c:	683b      	ldr	r3, [r7, #0]
  40047e:	2b00      	cmp	r3, #0
  400480:	da10      	bge.n	4004a4 <mmc_mci_op_cond+0x54>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400482:	683b      	ldr	r3, [r7, #0]
  400484:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  400488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  40048c:	d109      	bne.n	4004a2 <mmc_mci_op_cond+0x52>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  40048e:	4b0f      	ldr	r3, [pc, #60]	; (4004cc <mmc_mci_op_cond+0x7c>)
  400490:	681b      	ldr	r3, [r3, #0]
  400492:	4a0e      	ldr	r2, [pc, #56]	; (4004cc <mmc_mci_op_cond+0x7c>)
  400494:	6812      	ldr	r2, [r2, #0]
  400496:	7bd2      	ldrb	r2, [r2, #15]
  400498:	f042 0208 	orr.w	r2, r2, #8
  40049c:	b2d2      	uxtb	r2, r2
  40049e:	73da      	strb	r2, [r3, #15]
			}
			break;
  4004a0:	e008      	b.n	4004b4 <mmc_mci_op_cond+0x64>
  4004a2:	e007      	b.n	4004b4 <mmc_mci_op_cond+0x64>
		}
		if (retry-- == 0) {
  4004a4:	687b      	ldr	r3, [r7, #4]
  4004a6:	1e5a      	subs	r2, r3, #1
  4004a8:	607a      	str	r2, [r7, #4]
  4004aa:	2b00      	cmp	r3, #0
  4004ac:	d101      	bne.n	4004b2 <mmc_mci_op_cond+0x62>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  4004ae:	2300      	movs	r3, #0
  4004b0:	e001      	b.n	4004b6 <mmc_mci_op_cond+0x66>
		}
	} while (1);
  4004b2:	e7d3      	b.n	40045c <mmc_mci_op_cond+0xc>
	return true;
  4004b4:	2301      	movs	r3, #1
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	3708      	adds	r7, #8
  4004ba:	46bd      	mov	sp, r7
  4004bc:	bd80      	pop	{r7, pc}
  4004be:	bf00      	nop
  4004c0:	401f8000 	.word	0x401f8000
  4004c4:	004020f9 	.word	0x004020f9
  4004c8:	00402145 	.word	0x00402145
  4004cc:	20000db4 	.word	0x20000db4

004004d0 <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  4004d0:	b580      	push	{r7, lr}
  4004d2:	b086      	sub	sp, #24
  4004d4:	af00      	add	r7, sp, #0
  4004d6:	4603      	mov	r3, r0
  4004d8:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  4004da:	f640 0334 	movw	r3, #2100	; 0x834
  4004de:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4004e0:	f241 1037 	movw	r0, #4407	; 0x1137
  4004e4:	2100      	movs	r1, #0
  4004e6:	4b22      	ldr	r3, [pc, #136]	; (400570 <sd_mci_op_cond+0xa0>)
  4004e8:	4798      	blx	r3
  4004ea:	4603      	mov	r3, r0
  4004ec:	f083 0301 	eor.w	r3, r3, #1
  4004f0:	b2db      	uxtb	r3, r3
  4004f2:	2b00      	cmp	r3, #0
  4004f4:	d001      	beq.n	4004fa <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  4004f6:	2300      	movs	r3, #0
  4004f8:	e035      	b.n	400566 <sd_mci_op_cond+0x96>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  4004fa:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  4004fe:	617b      	str	r3, [r7, #20]
		if (v2) {
  400500:	79fb      	ldrb	r3, [r7, #7]
  400502:	2b00      	cmp	r3, #0
  400504:	d003      	beq.n	40050e <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  400506:	697b      	ldr	r3, [r7, #20]
  400508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40050c:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40050e:	f244 5029 	movw	r0, #17705	; 0x4529
  400512:	6979      	ldr	r1, [r7, #20]
  400514:	4b16      	ldr	r3, [pc, #88]	; (400570 <sd_mci_op_cond+0xa0>)
  400516:	4798      	blx	r3
  400518:	4603      	mov	r3, r0
  40051a:	f083 0301 	eor.w	r3, r3, #1
  40051e:	b2db      	uxtb	r3, r3
  400520:	2b00      	cmp	r3, #0
  400522:	d001      	beq.n	400528 <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  400524:	2300      	movs	r3, #0
  400526:	e01e      	b.n	400566 <sd_mci_op_cond+0x96>
		}
		resp = driver_get_response();
  400528:	4b12      	ldr	r3, [pc, #72]	; (400574 <sd_mci_op_cond+0xa4>)
  40052a:	4798      	blx	r3
  40052c:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  40052e:	68fb      	ldr	r3, [r7, #12]
  400530:	2b00      	cmp	r3, #0
  400532:	da0f      	bge.n	400554 <sd_mci_op_cond+0x84>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  400534:	68fb      	ldr	r3, [r7, #12]
  400536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  40053a:	2b00      	cmp	r3, #0
  40053c:	d009      	beq.n	400552 <sd_mci_op_cond+0x82>
				sd_mmc_card->type |= CARD_TYPE_HC;
  40053e:	4b0e      	ldr	r3, [pc, #56]	; (400578 <sd_mci_op_cond+0xa8>)
  400540:	681b      	ldr	r3, [r3, #0]
  400542:	4a0d      	ldr	r2, [pc, #52]	; (400578 <sd_mci_op_cond+0xa8>)
  400544:	6812      	ldr	r2, [r2, #0]
  400546:	7bd2      	ldrb	r2, [r2, #15]
  400548:	f042 0208 	orr.w	r2, r2, #8
  40054c:	b2d2      	uxtb	r2, r2
  40054e:	73da      	strb	r2, [r3, #15]
			}
			break;
  400550:	e008      	b.n	400564 <sd_mci_op_cond+0x94>
  400552:	e007      	b.n	400564 <sd_mci_op_cond+0x94>
		}
		if (retry-- == 0) {
  400554:	693b      	ldr	r3, [r7, #16]
  400556:	1e5a      	subs	r2, r3, #1
  400558:	613a      	str	r2, [r7, #16]
  40055a:	2b00      	cmp	r3, #0
  40055c:	d101      	bne.n	400562 <sd_mci_op_cond+0x92>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  40055e:	2300      	movs	r3, #0
  400560:	e001      	b.n	400566 <sd_mci_op_cond+0x96>
		}
	} while (1);
  400562:	e7bd      	b.n	4004e0 <sd_mci_op_cond+0x10>
	return true;
  400564:	2301      	movs	r3, #1
}
  400566:	4618      	mov	r0, r3
  400568:	3718      	adds	r7, #24
  40056a:	46bd      	mov	sp, r7
  40056c:	bd80      	pop	{r7, pc}
  40056e:	bf00      	nop
  400570:	004020f9 	.word	0x004020f9
  400574:	00402145 	.word	0x00402145
  400578:	20000db4 	.word	0x20000db4

0040057c <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
  40057c:	b480      	push	{r7}
  40057e:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
  400580:	2301      	movs	r3, #1
}
  400582:	4618      	mov	r0, r3
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  40058c:	b590      	push	{r4, r7, lr}
  40058e:	b093      	sub	sp, #76	; 0x4c
  400590:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400592:	2301      	movs	r3, #1
  400594:	9300      	str	r3, [sp, #0]
  400596:	482e      	ldr	r0, [pc, #184]	; (400650 <sd_cm6_set_high_speed+0xc4>)
  400598:	492e      	ldr	r1, [pc, #184]	; (400654 <sd_cm6_set_high_speed+0xc8>)
  40059a:	2240      	movs	r2, #64	; 0x40
  40059c:	2301      	movs	r3, #1
  40059e:	4c2e      	ldr	r4, [pc, #184]	; (400658 <sd_cm6_set_high_speed+0xcc>)
  4005a0:	47a0      	blx	r4
  4005a2:	4603      	mov	r3, r0
  4005a4:	f083 0301 	eor.w	r3, r3, #1
  4005a8:	b2db      	uxtb	r3, r3
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d001      	beq.n	4005b2 <sd_cm6_set_high_speed+0x26>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  4005ae:	2300      	movs	r3, #0
  4005b0:	e04a      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  4005b2:	463b      	mov	r3, r7
  4005b4:	4618      	mov	r0, r3
  4005b6:	2101      	movs	r1, #1
  4005b8:	4b28      	ldr	r3, [pc, #160]	; (40065c <sd_cm6_set_high_speed+0xd0>)
  4005ba:	4798      	blx	r3
  4005bc:	4603      	mov	r3, r0
  4005be:	f083 0301 	eor.w	r3, r3, #1
  4005c2:	b2db      	uxtb	r3, r3
  4005c4:	2b00      	cmp	r3, #0
  4005c6:	d001      	beq.n	4005cc <sd_cm6_set_high_speed+0x40>
		return false;
  4005c8:	2300      	movs	r3, #0
  4005ca:	e03d      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  4005cc:	4b24      	ldr	r3, [pc, #144]	; (400660 <sd_cm6_set_high_speed+0xd4>)
  4005ce:	4798      	blx	r3
  4005d0:	4603      	mov	r3, r0
  4005d2:	f083 0301 	eor.w	r3, r3, #1
  4005d6:	b2db      	uxtb	r3, r3
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d001      	beq.n	4005e0 <sd_cm6_set_high_speed+0x54>
		return false;
  4005dc:	2300      	movs	r3, #0
  4005de:	e033      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4005e0:	4b20      	ldr	r3, [pc, #128]	; (400664 <sd_cm6_set_high_speed+0xd8>)
  4005e2:	4798      	blx	r3
  4005e4:	4603      	mov	r3, r0
  4005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4005ea:	2b00      	cmp	r3, #0
  4005ec:	d001      	beq.n	4005f2 <sd_cm6_set_high_speed+0x66>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4005ee:	2300      	movs	r3, #0
  4005f0:	e02a      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  4005f2:	463b      	mov	r3, r7
  4005f4:	4618      	mov	r0, r3
  4005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
  4005fa:	f44f 72bc 	mov.w	r2, #376	; 0x178
  4005fe:	2304      	movs	r3, #4
  400600:	4c19      	ldr	r4, [pc, #100]	; (400668 <sd_cm6_set_high_speed+0xdc>)
  400602:	47a0      	blx	r4
  400604:	4603      	mov	r3, r0
  400606:	2b0f      	cmp	r3, #15
  400608:	d101      	bne.n	40060e <sd_cm6_set_high_speed+0x82>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  40060a:	2301      	movs	r3, #1
  40060c:	e01c      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  40060e:	463b      	mov	r3, r7
  400610:	4618      	mov	r0, r3
  400612:	f44f 7100 	mov.w	r1, #512	; 0x200
  400616:	f44f 7288 	mov.w	r2, #272	; 0x110
  40061a:	2310      	movs	r3, #16
  40061c:	4c12      	ldr	r4, [pc, #72]	; (400668 <sd_cm6_set_high_speed+0xdc>)
  40061e:	47a0      	blx	r4
  400620:	4603      	mov	r3, r0
  400622:	2b00      	cmp	r3, #0
  400624:	d001      	beq.n	40062a <sd_cm6_set_high_speed+0x9e>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  400626:	2300      	movs	r3, #0
  400628:	e00e      	b.n	400648 <sd_cm6_set_high_speed+0xbc>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  40062a:	4b10      	ldr	r3, [pc, #64]	; (40066c <sd_cm6_set_high_speed+0xe0>)
  40062c:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  40062e:	4b10      	ldr	r3, [pc, #64]	; (400670 <sd_cm6_set_high_speed+0xe4>)
  400630:	681b      	ldr	r3, [r3, #0]
  400632:	2201      	movs	r2, #1
  400634:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400638:	4b0d      	ldr	r3, [pc, #52]	; (400670 <sd_cm6_set_high_speed+0xe4>)
  40063a:	681b      	ldr	r3, [r3, #0]
  40063c:	4a0c      	ldr	r2, [pc, #48]	; (400670 <sd_cm6_set_high_speed+0xe4>)
  40063e:	6812      	ldr	r2, [r2, #0]
  400640:	6812      	ldr	r2, [r2, #0]
  400642:	0052      	lsls	r2, r2, #1
  400644:	601a      	str	r2, [r3, #0]
	return true;
  400646:	2301      	movs	r3, #1
}
  400648:	4618      	mov	r0, r3
  40064a:	3744      	adds	r7, #68	; 0x44
  40064c:	46bd      	mov	sp, r7
  40064e:	bd90      	pop	{r4, r7, pc}
  400650:	00081106 	.word	0x00081106
  400654:	80ffff01 	.word	0x80ffff01
  400658:	004021c5 	.word	0x004021c5
  40065c:	00402395 	.word	0x00402395
  400660:	00402445 	.word	0x00402445
  400664:	00402145 	.word	0x00402145
  400668:	00400121 	.word	0x00400121
  40066c:	004020b9 	.word	0x004020b9
  400670:	20000db4 	.word	0x20000db4

00400674 <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  400674:	b580      	push	{r7, lr}
  400676:	b084      	sub	sp, #16
  400678:	af00      	add	r7, sp, #0
  40067a:	4603      	mov	r3, r0
  40067c:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  40067e:	79fb      	ldrb	r3, [r7, #7]
  400680:	2b04      	cmp	r3, #4
  400682:	d004      	beq.n	40068e <mmc_cmd6_set_bus_width+0x1a>
  400684:	2b08      	cmp	r3, #8
  400686:	d105      	bne.n	400694 <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400688:	4b13      	ldr	r3, [pc, #76]	; (4006d8 <mmc_cmd6_set_bus_width+0x64>)
  40068a:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  40068c:	e005      	b.n	40069a <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40068e:	4b13      	ldr	r3, [pc, #76]	; (4006dc <mmc_cmd6_set_bus_width+0x68>)
  400690:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  400692:	e002      	b.n	40069a <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400694:	4b12      	ldr	r3, [pc, #72]	; (4006e0 <mmc_cmd6_set_bus_width+0x6c>)
  400696:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  400698:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40069a:	f243 1006 	movw	r0, #12550	; 0x3106
  40069e:	68f9      	ldr	r1, [r7, #12]
  4006a0:	4b10      	ldr	r3, [pc, #64]	; (4006e4 <mmc_cmd6_set_bus_width+0x70>)
  4006a2:	4798      	blx	r3
  4006a4:	4603      	mov	r3, r0
  4006a6:	f083 0301 	eor.w	r3, r3, #1
  4006aa:	b2db      	uxtb	r3, r3
  4006ac:	2b00      	cmp	r3, #0
  4006ae:	d001      	beq.n	4006b4 <mmc_cmd6_set_bus_width+0x40>
		return false;
  4006b0:	2300      	movs	r3, #0
  4006b2:	e00d      	b.n	4006d0 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006b4:	4b0c      	ldr	r3, [pc, #48]	; (4006e8 <mmc_cmd6_set_bus_width+0x74>)
  4006b6:	4798      	blx	r3
  4006b8:	4603      	mov	r3, r0
  4006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4006be:	2b00      	cmp	r3, #0
  4006c0:	d001      	beq.n	4006c6 <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4006c2:	2300      	movs	r3, #0
  4006c4:	e004      	b.n	4006d0 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  4006c6:	4b09      	ldr	r3, [pc, #36]	; (4006ec <mmc_cmd6_set_bus_width+0x78>)
  4006c8:	681b      	ldr	r3, [r3, #0]
  4006ca:	79fa      	ldrb	r2, [r7, #7]
  4006cc:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4006ce:	2301      	movs	r3, #1
}
  4006d0:	4618      	mov	r0, r3
  4006d2:	3710      	adds	r7, #16
  4006d4:	46bd      	mov	sp, r7
  4006d6:	bd80      	pop	{r7, pc}
  4006d8:	01b70200 	.word	0x01b70200
  4006dc:	01b70100 	.word	0x01b70100
  4006e0:	01b70000 	.word	0x01b70000
  4006e4:	004020f9 	.word	0x004020f9
  4006e8:	00402145 	.word	0x00402145
  4006ec:	20000db4 	.word	0x20000db4

004006f0 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  4006f4:	f243 1006 	movw	r0, #12550	; 0x3106
  4006f8:	490f      	ldr	r1, [pc, #60]	; (400738 <mmc_cmd6_set_high_speed+0x48>)
  4006fa:	4b10      	ldr	r3, [pc, #64]	; (40073c <mmc_cmd6_set_high_speed+0x4c>)
  4006fc:	4798      	blx	r3
  4006fe:	4603      	mov	r3, r0
  400700:	f083 0301 	eor.w	r3, r3, #1
  400704:	b2db      	uxtb	r3, r3
  400706:	2b00      	cmp	r3, #0
  400708:	d001      	beq.n	40070e <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  40070a:	2300      	movs	r3, #0
  40070c:	e012      	b.n	400734 <mmc_cmd6_set_high_speed+0x44>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40070e:	4b0c      	ldr	r3, [pc, #48]	; (400740 <mmc_cmd6_set_high_speed+0x50>)
  400710:	4798      	blx	r3
  400712:	4603      	mov	r3, r0
  400714:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400718:	2b00      	cmp	r3, #0
  40071a:	d001      	beq.n	400720 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  40071c:	2300      	movs	r3, #0
  40071e:	e009      	b.n	400734 <mmc_cmd6_set_high_speed+0x44>
	}
	sd_mmc_card->high_speed = 1;
  400720:	4b08      	ldr	r3, [pc, #32]	; (400744 <mmc_cmd6_set_high_speed+0x54>)
  400722:	681b      	ldr	r3, [r3, #0]
  400724:	2201      	movs	r2, #1
  400726:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40072a:	4b06      	ldr	r3, [pc, #24]	; (400744 <mmc_cmd6_set_high_speed+0x54>)
  40072c:	681b      	ldr	r3, [r3, #0]
  40072e:	4a06      	ldr	r2, [pc, #24]	; (400748 <mmc_cmd6_set_high_speed+0x58>)
  400730:	601a      	str	r2, [r3, #0]
	return true;
  400732:	2301      	movs	r3, #1
}
  400734:	4618      	mov	r0, r3
  400736:	bd80      	pop	{r7, pc}
  400738:	03b90100 	.word	0x03b90100
  40073c:	004020f9 	.word	0x004020f9
  400740:	00402145 	.word	0x00402145
  400744:	20000db4 	.word	0x20000db4
  400748:	03197500 	.word	0x03197500

0040074c <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  40074c:	b580      	push	{r7, lr}
  40074e:	b084      	sub	sp, #16
  400750:	af00      	add	r7, sp, #0
  400752:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  400754:	687b      	ldr	r3, [r7, #4]
  400756:	2200      	movs	r2, #0
  400758:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40075a:	f245 5008 	movw	r0, #21768	; 0x5508
  40075e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400762:	4b11      	ldr	r3, [pc, #68]	; (4007a8 <sd_cmd8+0x5c>)
  400764:	4798      	blx	r3
  400766:	4603      	mov	r3, r0
  400768:	f083 0301 	eor.w	r3, r3, #1
  40076c:	b2db      	uxtb	r3, r3
  40076e:	2b00      	cmp	r3, #0
  400770:	d001      	beq.n	400776 <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  400772:	2301      	movs	r3, #1
  400774:	e014      	b.n	4007a0 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  400776:	4b0d      	ldr	r3, [pc, #52]	; (4007ac <sd_cmd8+0x60>)
  400778:	4798      	blx	r3
  40077a:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  40077c:	68fb      	ldr	r3, [r7, #12]
  40077e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400782:	d101      	bne.n	400788 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  400784:	2301      	movs	r3, #1
  400786:	e00b      	b.n	4007a0 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  400792:	d001      	beq.n	400798 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  400794:	2300      	movs	r3, #0
  400796:	e003      	b.n	4007a0 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	2201      	movs	r2, #1
  40079c:	701a      	strb	r2, [r3, #0]
	return true;
  40079e:	2301      	movs	r3, #1
}
  4007a0:	4618      	mov	r0, r3
  4007a2:	3710      	adds	r7, #16
  4007a4:	46bd      	mov	sp, r7
  4007a6:	bd80      	pop	{r7, pc}
  4007a8:	004020f9 	.word	0x004020f9
  4007ac:	00402145 	.word	0x00402145

004007b0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b089      	sub	sp, #36	; 0x24
  4007b4:	af02      	add	r7, sp, #8
  4007b6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4007b8:	2300      	movs	r3, #0
  4007ba:	9300      	str	r3, [sp, #0]
  4007bc:	4836      	ldr	r0, [pc, #216]	; (400898 <mmc_cmd8+0xe8>)
  4007be:	2100      	movs	r1, #0
  4007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4007c4:	2301      	movs	r3, #1
  4007c6:	4c35      	ldr	r4, [pc, #212]	; (40089c <mmc_cmd8+0xec>)
  4007c8:	47a0      	blx	r4
  4007ca:	4603      	mov	r3, r0
  4007cc:	f083 0301 	eor.w	r3, r3, #1
  4007d0:	b2db      	uxtb	r3, r3
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d001      	beq.n	4007da <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  4007d6:	2300      	movs	r3, #0
  4007d8:	e059      	b.n	40088e <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4007da:	2300      	movs	r3, #0
  4007dc:	82fb      	strh	r3, [r7, #22]
  4007de:	e00f      	b.n	400800 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  4007e0:	f107 0310 	add.w	r3, r7, #16
  4007e4:	4618      	mov	r0, r3
  4007e6:	4b2e      	ldr	r3, [pc, #184]	; (4008a0 <mmc_cmd8+0xf0>)
  4007e8:	4798      	blx	r3
  4007ea:	4603      	mov	r3, r0
  4007ec:	f083 0301 	eor.w	r3, r3, #1
  4007f0:	b2db      	uxtb	r3, r3
  4007f2:	2b00      	cmp	r3, #0
  4007f4:	d001      	beq.n	4007fa <mmc_cmd8+0x4a>
			return false;
  4007f6:	2300      	movs	r3, #0
  4007f8:	e049      	b.n	40088e <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4007fa:	8afb      	ldrh	r3, [r7, #22]
  4007fc:	3301      	adds	r3, #1
  4007fe:	82fb      	strh	r3, [r7, #22]
  400800:	8afb      	ldrh	r3, [r7, #22]
  400802:	2b31      	cmp	r3, #49	; 0x31
  400804:	d9ec      	bls.n	4007e0 <mmc_cmd8+0x30>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  400806:	693b      	ldr	r3, [r7, #16]
  400808:	b2db      	uxtb	r3, r3
  40080a:	f003 0302 	and.w	r3, r3, #2
  40080e:	b2da      	uxtb	r2, r3
  400810:	687b      	ldr	r3, [r7, #4]
  400812:	701a      	strb	r2, [r3, #0]
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400814:	4b23      	ldr	r3, [pc, #140]	; (4008a4 <mmc_cmd8+0xf4>)
  400816:	681b      	ldr	r3, [r3, #0]
  400818:	3312      	adds	r3, #18
  40081a:	4618      	mov	r0, r3
  40081c:	2180      	movs	r1, #128	; 0x80
  40081e:	223e      	movs	r2, #62	; 0x3e
  400820:	230c      	movs	r3, #12
  400822:	4c21      	ldr	r4, [pc, #132]	; (4008a8 <mmc_cmd8+0xf8>)
  400824:	47a0      	blx	r4
  400826:	4602      	mov	r2, r0
  400828:	f640 73ff 	movw	r3, #4095	; 0xfff
  40082c:	429a      	cmp	r2, r3
  40082e:	d119      	bne.n	400864 <mmc_cmd8+0xb4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400830:	e00f      	b.n	400852 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  400832:	f107 030c 	add.w	r3, r7, #12
  400836:	4618      	mov	r0, r3
  400838:	4b19      	ldr	r3, [pc, #100]	; (4008a0 <mmc_cmd8+0xf0>)
  40083a:	4798      	blx	r3
  40083c:	4603      	mov	r3, r0
  40083e:	f083 0301 	eor.w	r3, r3, #1
  400842:	b2db      	uxtb	r3, r3
  400844:	2b00      	cmp	r3, #0
  400846:	d001      	beq.n	40084c <mmc_cmd8+0x9c>
				return false;
  400848:	2300      	movs	r3, #0
  40084a:	e020      	b.n	40088e <mmc_cmd8+0xde>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  40084c:	8afb      	ldrh	r3, [r7, #22]
  40084e:	3301      	adds	r3, #1
  400850:	82fb      	strh	r3, [r7, #22]
  400852:	8afb      	ldrh	r3, [r7, #22]
  400854:	2b35      	cmp	r3, #53	; 0x35
  400856:	d9ec      	bls.n	400832 <mmc_cmd8+0x82>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  400858:	4b12      	ldr	r3, [pc, #72]	; (4008a4 <mmc_cmd8+0xf4>)
  40085a:	681b      	ldr	r3, [r3, #0]
  40085c:	68fa      	ldr	r2, [r7, #12]
  40085e:	0852      	lsrs	r2, r2, #1
  400860:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400862:	e010      	b.n	400886 <mmc_cmd8+0xd6>
  400864:	e00f      	b.n	400886 <mmc_cmd8+0xd6>
		if (!driver_read_word(&sec_count)) {
  400866:	f107 030c 	add.w	r3, r7, #12
  40086a:	4618      	mov	r0, r3
  40086c:	4b0c      	ldr	r3, [pc, #48]	; (4008a0 <mmc_cmd8+0xf0>)
  40086e:	4798      	blx	r3
  400870:	4603      	mov	r3, r0
  400872:	f083 0301 	eor.w	r3, r3, #1
  400876:	b2db      	uxtb	r3, r3
  400878:	2b00      	cmp	r3, #0
  40087a:	d001      	beq.n	400880 <mmc_cmd8+0xd0>
			return false;
  40087c:	2300      	movs	r3, #0
  40087e:	e006      	b.n	40088e <mmc_cmd8+0xde>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400880:	8afb      	ldrh	r3, [r7, #22]
  400882:	3301      	adds	r3, #1
  400884:	82fb      	strh	r3, [r7, #22]
  400886:	8afb      	ldrh	r3, [r7, #22]
  400888:	2b7f      	cmp	r3, #127	; 0x7f
  40088a:	d9ec      	bls.n	400866 <mmc_cmd8+0xb6>
		if (!driver_read_word(&sec_count)) {
			return false;
		}
	}
	return true;
  40088c:	2301      	movs	r3, #1
}
  40088e:	4618      	mov	r0, r3
  400890:	371c      	adds	r7, #28
  400892:	46bd      	mov	sp, r7
  400894:	bd90      	pop	{r4, r7, pc}
  400896:	bf00      	nop
  400898:	00081108 	.word	0x00081108
  40089c:	004021c5 	.word	0x004021c5
  4008a0:	004022f9 	.word	0x004022f9
  4008a4:	20000db4 	.word	0x20000db4
  4008a8:	00400121 	.word	0x00400121

004008ac <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4008ac:	b580      	push	{r7, lr}
  4008ae:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008b0:	4b0c      	ldr	r3, [pc, #48]	; (4008e4 <sd_mmc_cmd9_mci+0x38>)
  4008b2:	681b      	ldr	r3, [r3, #0]
  4008b4:	899b      	ldrh	r3, [r3, #12]
  4008b6:	041b      	lsls	r3, r3, #16
  4008b8:	f641 3009 	movw	r0, #6921	; 0x1b09
  4008bc:	4619      	mov	r1, r3
  4008be:	4b0a      	ldr	r3, [pc, #40]	; (4008e8 <sd_mmc_cmd9_mci+0x3c>)
  4008c0:	4798      	blx	r3
  4008c2:	4603      	mov	r3, r0
  4008c4:	f083 0301 	eor.w	r3, r3, #1
  4008c8:	b2db      	uxtb	r3, r3
  4008ca:	2b00      	cmp	r3, #0
  4008cc:	d001      	beq.n	4008d2 <sd_mmc_cmd9_mci+0x26>
		return false;
  4008ce:	2300      	movs	r3, #0
  4008d0:	e006      	b.n	4008e0 <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  4008d2:	4b04      	ldr	r3, [pc, #16]	; (4008e4 <sd_mmc_cmd9_mci+0x38>)
  4008d4:	681b      	ldr	r3, [r3, #0]
  4008d6:	3312      	adds	r3, #18
  4008d8:	4618      	mov	r0, r3
  4008da:	4b04      	ldr	r3, [pc, #16]	; (4008ec <sd_mmc_cmd9_mci+0x40>)
  4008dc:	4798      	blx	r3
	return true;
  4008de:	2301      	movs	r3, #1
}
  4008e0:	4618      	mov	r0, r3
  4008e2:	bd80      	pop	{r7, pc}
  4008e4:	20000db4 	.word	0x20000db4
  4008e8:	004020f9 	.word	0x004020f9
  4008ec:	00402159 	.word	0x00402159

004008f0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  4008f0:	b5b0      	push	{r4, r5, r7, lr}
  4008f2:	b084      	sub	sp, #16
  4008f4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4008f6:	4b48      	ldr	r3, [pc, #288]	; (400a18 <mmc_decode_csd+0x128>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	3312      	adds	r3, #18
  4008fc:	4618      	mov	r0, r3
  4008fe:	2180      	movs	r1, #128	; 0x80
  400900:	227a      	movs	r2, #122	; 0x7a
  400902:	2304      	movs	r3, #4
  400904:	4c45      	ldr	r4, [pc, #276]	; (400a1c <mmc_decode_csd+0x12c>)
  400906:	47a0      	blx	r4
  400908:	4603      	mov	r3, r0
  40090a:	3b01      	subs	r3, #1
  40090c:	2b03      	cmp	r3, #3
  40090e:	d80b      	bhi.n	400928 <mmc_decode_csd+0x38>
  400910:	a201      	add	r2, pc, #4	; (adr r2, 400918 <mmc_decode_csd+0x28>)
  400912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400916:	bf00      	nop
  400918:	00400933 	.word	0x00400933
  40091c:	0040093d 	.word	0x0040093d
  400920:	00400947 	.word	0x00400947
  400924:	00400951 	.word	0x00400951
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400928:	4b3b      	ldr	r3, [pc, #236]	; (400a18 <mmc_decode_csd+0x128>)
  40092a:	681b      	ldr	r3, [r3, #0]
  40092c:	2212      	movs	r2, #18
  40092e:	741a      	strb	r2, [r3, #16]
		break;
  400930:	e013      	b.n	40095a <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400932:	4b39      	ldr	r3, [pc, #228]	; (400a18 <mmc_decode_csd+0x128>)
  400934:	681b      	ldr	r3, [r3, #0]
  400936:	2214      	movs	r2, #20
  400938:	741a      	strb	r2, [r3, #16]
		break;
  40093a:	e00e      	b.n	40095a <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40093c:	4b36      	ldr	r3, [pc, #216]	; (400a18 <mmc_decode_csd+0x128>)
  40093e:	681b      	ldr	r3, [r3, #0]
  400940:	2222      	movs	r2, #34	; 0x22
  400942:	741a      	strb	r2, [r3, #16]
		break;
  400944:	e009      	b.n	40095a <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400946:	4b34      	ldr	r3, [pc, #208]	; (400a18 <mmc_decode_csd+0x128>)
  400948:	681b      	ldr	r3, [r3, #0]
  40094a:	2230      	movs	r2, #48	; 0x30
  40094c:	741a      	strb	r2, [r3, #16]
		break;
  40094e:	e004      	b.n	40095a <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  400950:	4b31      	ldr	r3, [pc, #196]	; (400a18 <mmc_decode_csd+0x128>)
  400952:	681b      	ldr	r3, [r3, #0]
  400954:	2240      	movs	r2, #64	; 0x40
  400956:	741a      	strb	r2, [r3, #16]
		break;
  400958:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40095a:	4b2f      	ldr	r3, [pc, #188]	; (400a18 <mmc_decode_csd+0x128>)
  40095c:	681b      	ldr	r3, [r3, #0]
  40095e:	3312      	adds	r3, #18
  400960:	4618      	mov	r0, r3
  400962:	2180      	movs	r1, #128	; 0x80
  400964:	2260      	movs	r2, #96	; 0x60
  400966:	2308      	movs	r3, #8
  400968:	4c2c      	ldr	r4, [pc, #176]	; (400a1c <mmc_decode_csd+0x12c>)
  40096a:	47a0      	blx	r4
  40096c:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 0207 	and.w	r2, r3, #7
  400974:	4b2a      	ldr	r3, [pc, #168]	; (400a20 <mmc_decode_csd+0x130>)
  400976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40097a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  40097c:	68fb      	ldr	r3, [r7, #12]
  40097e:	08db      	lsrs	r3, r3, #3
  400980:	f003 020f 	and.w	r2, r3, #15
  400984:	4b27      	ldr	r3, [pc, #156]	; (400a24 <mmc_decode_csd+0x134>)
  400986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40098a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  40098c:	4b22      	ldr	r3, [pc, #136]	; (400a18 <mmc_decode_csd+0x128>)
  40098e:	681b      	ldr	r3, [r3, #0]
  400990:	68ba      	ldr	r2, [r7, #8]
  400992:	6879      	ldr	r1, [r7, #4]
  400994:	fb01 f202 	mul.w	r2, r1, r2
  400998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40099c:	fb01 f202 	mul.w	r2, r1, r2
  4009a0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4009a2:	4b1d      	ldr	r3, [pc, #116]	; (400a18 <mmc_decode_csd+0x128>)
  4009a4:	681b      	ldr	r3, [r3, #0]
  4009a6:	3312      	adds	r3, #18
  4009a8:	4618      	mov	r0, r3
  4009aa:	2180      	movs	r1, #128	; 0x80
  4009ac:	223e      	movs	r2, #62	; 0x3e
  4009ae:	230c      	movs	r3, #12
  4009b0:	4c1a      	ldr	r4, [pc, #104]	; (400a1c <mmc_decode_csd+0x12c>)
  4009b2:	47a0      	blx	r4
  4009b4:	4602      	mov	r2, r0
  4009b6:	f640 73ff 	movw	r3, #4095	; 0xfff
  4009ba:	429a      	cmp	r2, r3
  4009bc:	d029      	beq.n	400a12 <mmc_decode_csd+0x122>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4009be:	4b16      	ldr	r3, [pc, #88]	; (400a18 <mmc_decode_csd+0x128>)
  4009c0:	681b      	ldr	r3, [r3, #0]
  4009c2:	3312      	adds	r3, #18
  4009c4:	4618      	mov	r0, r3
  4009c6:	2180      	movs	r1, #128	; 0x80
  4009c8:	223e      	movs	r2, #62	; 0x3e
  4009ca:	230c      	movs	r3, #12
  4009cc:	4c13      	ldr	r4, [pc, #76]	; (400a1c <mmc_decode_csd+0x12c>)
  4009ce:	47a0      	blx	r4
  4009d0:	4603      	mov	r3, r0
  4009d2:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4009d4:	4b10      	ldr	r3, [pc, #64]	; (400a18 <mmc_decode_csd+0x128>)
  4009d6:	681b      	ldr	r3, [r3, #0]
  4009d8:	3312      	adds	r3, #18
  4009da:	4618      	mov	r0, r3
  4009dc:	2180      	movs	r1, #128	; 0x80
  4009de:	222f      	movs	r2, #47	; 0x2f
  4009e0:	2303      	movs	r3, #3
  4009e2:	4d0e      	ldr	r5, [pc, #56]	; (400a1c <mmc_decode_csd+0x12c>)
  4009e4:	47a8      	blx	r5
  4009e6:	4603      	mov	r3, r0
  4009e8:	3302      	adds	r3, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4009ea:	fa04 f303 	lsl.w	r3, r4, r3
  4009ee:	603b      	str	r3, [r7, #0]
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4009f0:	4b09      	ldr	r3, [pc, #36]	; (400a18 <mmc_decode_csd+0x128>)
  4009f2:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  4009f4:	4b08      	ldr	r3, [pc, #32]	; (400a18 <mmc_decode_csd+0x128>)
  4009f6:	681b      	ldr	r3, [r3, #0]
  4009f8:	3312      	adds	r3, #18
  4009fa:	4618      	mov	r0, r3
  4009fc:	2180      	movs	r1, #128	; 0x80
  4009fe:	2250      	movs	r2, #80	; 0x50
  400a00:	2304      	movs	r3, #4
  400a02:	4d06      	ldr	r5, [pc, #24]	; (400a1c <mmc_decode_csd+0x12c>)
  400a04:	47a8      	blx	r5
  400a06:	4603      	mov	r3, r0
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400a08:	683a      	ldr	r2, [r7, #0]
  400a0a:	fa02 f303 	lsl.w	r3, r2, r3
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400a0e:	0a9b      	lsrs	r3, r3, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400a10:	6063      	str	r3, [r4, #4]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
	}
}
  400a12:	3710      	adds	r7, #16
  400a14:	46bd      	mov	sp, r7
  400a16:	bdb0      	pop	{r4, r5, r7, pc}
  400a18:	20000db4 	.word	0x20000db4
  400a1c:	00400121 	.word	0x00400121
  400a20:	00415e6c 	.word	0x00415e6c
  400a24:	00415ec8 	.word	0x00415ec8

00400a28 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  400a28:	b5b0      	push	{r4, r5, r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400a2e:	4b36      	ldr	r3, [pc, #216]	; (400b08 <sd_decode_csd+0xe0>)
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	3312      	adds	r3, #18
  400a34:	4618      	mov	r0, r3
  400a36:	2180      	movs	r1, #128	; 0x80
  400a38:	2260      	movs	r2, #96	; 0x60
  400a3a:	2308      	movs	r3, #8
  400a3c:	4c33      	ldr	r4, [pc, #204]	; (400b0c <sd_decode_csd+0xe4>)
  400a3e:	47a0      	blx	r4
  400a40:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	f003 0207 	and.w	r2, r3, #7
  400a48:	4b31      	ldr	r3, [pc, #196]	; (400b10 <sd_decode_csd+0xe8>)
  400a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400a4e:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400a50:	68fb      	ldr	r3, [r7, #12]
  400a52:	08db      	lsrs	r3, r3, #3
  400a54:	f003 020f 	and.w	r2, r3, #15
  400a58:	4b2e      	ldr	r3, [pc, #184]	; (400b14 <sd_decode_csd+0xec>)
  400a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400a5e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  400a60:	4b29      	ldr	r3, [pc, #164]	; (400b08 <sd_decode_csd+0xe0>)
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	68ba      	ldr	r2, [r7, #8]
  400a66:	6879      	ldr	r1, [r7, #4]
  400a68:	fb01 f202 	mul.w	r2, r1, r2
  400a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400a70:	fb01 f202 	mul.w	r2, r1, r2
  400a74:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400a76:	4b24      	ldr	r3, [pc, #144]	; (400b08 <sd_decode_csd+0xe0>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	3312      	adds	r3, #18
  400a7c:	4618      	mov	r0, r3
  400a7e:	2180      	movs	r1, #128	; 0x80
  400a80:	227e      	movs	r2, #126	; 0x7e
  400a82:	2302      	movs	r3, #2
  400a84:	4c21      	ldr	r4, [pc, #132]	; (400b0c <sd_decode_csd+0xe4>)
  400a86:	47a0      	blx	r4
  400a88:	4603      	mov	r3, r0
  400a8a:	2b00      	cmp	r3, #0
  400a8c:	d00f      	beq.n	400aae <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  400a8e:	4b1e      	ldr	r3, [pc, #120]	; (400b08 <sd_decode_csd+0xe0>)
  400a90:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  400a92:	4b1d      	ldr	r3, [pc, #116]	; (400b08 <sd_decode_csd+0xe0>)
  400a94:	681b      	ldr	r3, [r3, #0]
  400a96:	3312      	adds	r3, #18
  400a98:	4618      	mov	r0, r3
  400a9a:	2180      	movs	r1, #128	; 0x80
  400a9c:	2230      	movs	r2, #48	; 0x30
  400a9e:	2316      	movs	r3, #22
  400aa0:	4d1a      	ldr	r5, [pc, #104]	; (400b0c <sd_decode_csd+0xe4>)
  400aa2:	47a8      	blx	r5
  400aa4:	4603      	mov	r3, r0
				* 512;
  400aa6:	3301      	adds	r3, #1
  400aa8:	025b      	lsls	r3, r3, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  400aaa:	6063      	str	r3, [r4, #4]
  400aac:	e029      	b.n	400b02 <sd_decode_csd+0xda>
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400aae:	4b16      	ldr	r3, [pc, #88]	; (400b08 <sd_decode_csd+0xe0>)
  400ab0:	681b      	ldr	r3, [r3, #0]
  400ab2:	3312      	adds	r3, #18
  400ab4:	4618      	mov	r0, r3
  400ab6:	2180      	movs	r1, #128	; 0x80
  400ab8:	223e      	movs	r2, #62	; 0x3e
  400aba:	230c      	movs	r3, #12
  400abc:	4c13      	ldr	r4, [pc, #76]	; (400b0c <sd_decode_csd+0xe4>)
  400abe:	47a0      	blx	r4
  400ac0:	4603      	mov	r3, r0
  400ac2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400ac4:	4b10      	ldr	r3, [pc, #64]	; (400b08 <sd_decode_csd+0xe0>)
  400ac6:	681b      	ldr	r3, [r3, #0]
  400ac8:	3312      	adds	r3, #18
  400aca:	4618      	mov	r0, r3
  400acc:	2180      	movs	r1, #128	; 0x80
  400ace:	222f      	movs	r2, #47	; 0x2f
  400ad0:	2303      	movs	r3, #3
  400ad2:	4d0e      	ldr	r5, [pc, #56]	; (400b0c <sd_decode_csd+0xe4>)
  400ad4:	47a8      	blx	r5
  400ad6:	4603      	mov	r3, r0
  400ad8:	3302      	adds	r3, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400ada:	fa04 f303 	lsl.w	r3, r4, r3
  400ade:	603b      	str	r3, [r7, #0]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400ae0:	4b09      	ldr	r3, [pc, #36]	; (400b08 <sd_decode_csd+0xe0>)
  400ae2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  400ae4:	4b08      	ldr	r3, [pc, #32]	; (400b08 <sd_decode_csd+0xe0>)
  400ae6:	681b      	ldr	r3, [r3, #0]
  400ae8:	3312      	adds	r3, #18
  400aea:	4618      	mov	r0, r3
  400aec:	2180      	movs	r1, #128	; 0x80
  400aee:	2250      	movs	r2, #80	; 0x50
  400af0:	2304      	movs	r3, #4
  400af2:	4d06      	ldr	r5, [pc, #24]	; (400b0c <sd_decode_csd+0xe4>)
  400af4:	47a8      	blx	r5
  400af6:	4603      	mov	r3, r0
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400af8:	683a      	ldr	r2, [r7, #0]
  400afa:	fa02 f303 	lsl.w	r3, r2, r3
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  400afe:	0a9b      	lsrs	r3, r3, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400b00:	6063      	str	r3, [r4, #4]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  400b02:	3710      	adds	r7, #16
  400b04:	46bd      	mov	sp, r7
  400b06:	bdb0      	pop	{r4, r5, r7, pc}
  400b08:	20000db4 	.word	0x20000db4
  400b0c:	00400121 	.word	0x00400121
  400b10:	00415e6c 	.word	0x00415e6c
  400b14:	00415e88 	.word	0x00415e88

00400b18 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  400b18:	b580      	push	{r7, lr}
  400b1a:	b082      	sub	sp, #8
  400b1c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
  400b1e:	4b14      	ldr	r3, [pc, #80]	; (400b70 <sd_mmc_cmd13+0x58>)
  400b20:	607b      	str	r3, [r7, #4]
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400b22:	4b14      	ldr	r3, [pc, #80]	; (400b74 <sd_mmc_cmd13+0x5c>)
  400b24:	681b      	ldr	r3, [r3, #0]
  400b26:	899b      	ldrh	r3, [r3, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400b28:	041b      	lsls	r3, r3, #16
  400b2a:	f241 100d 	movw	r0, #4365	; 0x110d
  400b2e:	4619      	mov	r1, r3
  400b30:	4b11      	ldr	r3, [pc, #68]	; (400b78 <sd_mmc_cmd13+0x60>)
  400b32:	4798      	blx	r3
  400b34:	4603      	mov	r3, r0
  400b36:	f083 0301 	eor.w	r3, r3, #1
  400b3a:	b2db      	uxtb	r3, r3
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d001      	beq.n	400b44 <sd_mmc_cmd13+0x2c>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
  400b40:	2300      	movs	r3, #0
  400b42:	e011      	b.n	400b68 <sd_mmc_cmd13+0x50>
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400b44:	4b0d      	ldr	r3, [pc, #52]	; (400b7c <sd_mmc_cmd13+0x64>)
  400b46:	4798      	blx	r3
  400b48:	4603      	mov	r3, r0
  400b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400b4e:	2b00      	cmp	r3, #0
  400b50:	d002      	beq.n	400b58 <sd_mmc_cmd13+0x40>
				break;
  400b52:	bf00      	nop
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
		}
	} while (1);

	return true;
  400b54:	2301      	movs	r3, #1
  400b56:	e007      	b.n	400b68 <sd_mmc_cmd13+0x50>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400b58:	687b      	ldr	r3, [r7, #4]
  400b5a:	1e5a      	subs	r2, r3, #1
  400b5c:	607a      	str	r2, [r7, #4]
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d101      	bne.n	400b66 <sd_mmc_cmd13+0x4e>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  400b62:	2300      	movs	r3, #0
  400b64:	e000      	b.n	400b68 <sd_mmc_cmd13+0x50>
		}
	} while (1);
  400b66:	e7dc      	b.n	400b22 <sd_mmc_cmd13+0xa>

	return true;
}
  400b68:	4618      	mov	r0, r3
  400b6a:	3708      	adds	r7, #8
  400b6c:	46bd      	mov	sp, r7
  400b6e:	bd80      	pop	{r7, pc}
  400b70:	00030d40 	.word	0x00030d40
  400b74:	20000db4 	.word	0x20000db4
  400b78:	004020f9 	.word	0x004020f9
  400b7c:	00402145 	.word	0x00402145

00400b80 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  400b80:	b580      	push	{r7, lr}
  400b82:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400b84:	4b12      	ldr	r3, [pc, #72]	; (400bd0 <sd_acmd6+0x50>)
  400b86:	681b      	ldr	r3, [r3, #0]
  400b88:	899b      	ldrh	r3, [r3, #12]
  400b8a:	041b      	lsls	r3, r3, #16
  400b8c:	f241 1037 	movw	r0, #4407	; 0x1137
  400b90:	4619      	mov	r1, r3
  400b92:	4b10      	ldr	r3, [pc, #64]	; (400bd4 <sd_acmd6+0x54>)
  400b94:	4798      	blx	r3
  400b96:	4603      	mov	r3, r0
  400b98:	f083 0301 	eor.w	r3, r3, #1
  400b9c:	b2db      	uxtb	r3, r3
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d001      	beq.n	400ba6 <sd_acmd6+0x26>
		return false;
  400ba2:	2300      	movs	r3, #0
  400ba4:	e011      	b.n	400bca <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400ba6:	f241 1006 	movw	r0, #4358	; 0x1106
  400baa:	2102      	movs	r1, #2
  400bac:	4b09      	ldr	r3, [pc, #36]	; (400bd4 <sd_acmd6+0x54>)
  400bae:	4798      	blx	r3
  400bb0:	4603      	mov	r3, r0
  400bb2:	f083 0301 	eor.w	r3, r3, #1
  400bb6:	b2db      	uxtb	r3, r3
  400bb8:	2b00      	cmp	r3, #0
  400bba:	d001      	beq.n	400bc0 <sd_acmd6+0x40>
		return false;
  400bbc:	2300      	movs	r3, #0
  400bbe:	e004      	b.n	400bca <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  400bc0:	4b03      	ldr	r3, [pc, #12]	; (400bd0 <sd_acmd6+0x50>)
  400bc2:	681b      	ldr	r3, [r3, #0]
  400bc4:	2204      	movs	r2, #4
  400bc6:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  400bc8:	2301      	movs	r3, #1
}
  400bca:	4618      	mov	r0, r3
  400bcc:	bd80      	pop	{r7, pc}
  400bce:	bf00      	nop
  400bd0:	20000db4 	.word	0x20000db4
  400bd4:	004020f9 	.word	0x004020f9

00400bd8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  400bd8:	b590      	push	{r4, r7, lr}
  400bda:	b085      	sub	sp, #20
  400bdc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400bde:	4b37      	ldr	r3, [pc, #220]	; (400cbc <sd_acmd51+0xe4>)
  400be0:	681b      	ldr	r3, [r3, #0]
  400be2:	899b      	ldrh	r3, [r3, #12]
  400be4:	041b      	lsls	r3, r3, #16
  400be6:	f241 1037 	movw	r0, #4407	; 0x1137
  400bea:	4619      	mov	r1, r3
  400bec:	4b34      	ldr	r3, [pc, #208]	; (400cc0 <sd_acmd51+0xe8>)
  400bee:	4798      	blx	r3
  400bf0:	4603      	mov	r3, r0
  400bf2:	f083 0301 	eor.w	r3, r3, #1
  400bf6:	b2db      	uxtb	r3, r3
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d001      	beq.n	400c00 <sd_acmd51+0x28>
		return false;
  400bfc:	2300      	movs	r3, #0
  400bfe:	e059      	b.n	400cb4 <sd_acmd51+0xdc>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  400c00:	2301      	movs	r3, #1
  400c02:	9300      	str	r3, [sp, #0]
  400c04:	482f      	ldr	r0, [pc, #188]	; (400cc4 <sd_acmd51+0xec>)
  400c06:	2100      	movs	r1, #0
  400c08:	2208      	movs	r2, #8
  400c0a:	2301      	movs	r3, #1
  400c0c:	4c2e      	ldr	r4, [pc, #184]	; (400cc8 <sd_acmd51+0xf0>)
  400c0e:	47a0      	blx	r4
  400c10:	4603      	mov	r3, r0
  400c12:	f083 0301 	eor.w	r3, r3, #1
  400c16:	b2db      	uxtb	r3, r3
  400c18:	2b00      	cmp	r3, #0
  400c1a:	d001      	beq.n	400c20 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  400c1c:	2300      	movs	r3, #0
  400c1e:	e049      	b.n	400cb4 <sd_acmd51+0xdc>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  400c20:	463b      	mov	r3, r7
  400c22:	4618      	mov	r0, r3
  400c24:	2101      	movs	r1, #1
  400c26:	4b29      	ldr	r3, [pc, #164]	; (400ccc <sd_acmd51+0xf4>)
  400c28:	4798      	blx	r3
  400c2a:	4603      	mov	r3, r0
  400c2c:	f083 0301 	eor.w	r3, r3, #1
  400c30:	b2db      	uxtb	r3, r3
  400c32:	2b00      	cmp	r3, #0
  400c34:	d001      	beq.n	400c3a <sd_acmd51+0x62>
		return false;
  400c36:	2300      	movs	r3, #0
  400c38:	e03c      	b.n	400cb4 <sd_acmd51+0xdc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  400c3a:	4b25      	ldr	r3, [pc, #148]	; (400cd0 <sd_acmd51+0xf8>)
  400c3c:	4798      	blx	r3
  400c3e:	4603      	mov	r3, r0
  400c40:	f083 0301 	eor.w	r3, r3, #1
  400c44:	b2db      	uxtb	r3, r3
  400c46:	2b00      	cmp	r3, #0
  400c48:	d001      	beq.n	400c4e <sd_acmd51+0x76>
		return false;
  400c4a:	2300      	movs	r3, #0
  400c4c:	e032      	b.n	400cb4 <sd_acmd51+0xdc>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  400c4e:	463b      	mov	r3, r7
  400c50:	4618      	mov	r0, r3
  400c52:	2140      	movs	r1, #64	; 0x40
  400c54:	2238      	movs	r2, #56	; 0x38
  400c56:	2304      	movs	r3, #4
  400c58:	4c1e      	ldr	r4, [pc, #120]	; (400cd4 <sd_acmd51+0xfc>)
  400c5a:	47a0      	blx	r4
  400c5c:	4603      	mov	r3, r0
  400c5e:	2b01      	cmp	r3, #1
  400c60:	d009      	beq.n	400c76 <sd_acmd51+0x9e>
  400c62:	2b01      	cmp	r3, #1
  400c64:	d302      	bcc.n	400c6c <sd_acmd51+0x94>
  400c66:	2b02      	cmp	r3, #2
  400c68:	d00a      	beq.n	400c80 <sd_acmd51+0xa8>
  400c6a:	e01d      	b.n	400ca8 <sd_acmd51+0xd0>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400c6c:	4b13      	ldr	r3, [pc, #76]	; (400cbc <sd_acmd51+0xe4>)
  400c6e:	681b      	ldr	r3, [r3, #0]
  400c70:	2210      	movs	r2, #16
  400c72:	741a      	strb	r2, [r3, #16]
		break;
  400c74:	e01d      	b.n	400cb2 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400c76:	4b11      	ldr	r3, [pc, #68]	; (400cbc <sd_acmd51+0xe4>)
  400c78:	681b      	ldr	r3, [r3, #0]
  400c7a:	221a      	movs	r2, #26
  400c7c:	741a      	strb	r2, [r3, #16]
		break;
  400c7e:	e018      	b.n	400cb2 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400c80:	463b      	mov	r3, r7
  400c82:	4618      	mov	r0, r3
  400c84:	2140      	movs	r1, #64	; 0x40
  400c86:	222f      	movs	r2, #47	; 0x2f
  400c88:	2301      	movs	r3, #1
  400c8a:	4c12      	ldr	r4, [pc, #72]	; (400cd4 <sd_acmd51+0xfc>)
  400c8c:	47a0      	blx	r4
  400c8e:	4603      	mov	r3, r0
  400c90:	2b01      	cmp	r3, #1
  400c92:	d104      	bne.n	400c9e <sd_acmd51+0xc6>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400c94:	4b09      	ldr	r3, [pc, #36]	; (400cbc <sd_acmd51+0xe4>)
  400c96:	681b      	ldr	r3, [r3, #0]
  400c98:	2230      	movs	r2, #48	; 0x30
  400c9a:	741a      	strb	r2, [r3, #16]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  400c9c:	e009      	b.n	400cb2 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
			sd_mmc_card->version = CARD_VER_SD_3_0;
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <sd_acmd51+0xe4>)
  400ca0:	681b      	ldr	r3, [r3, #0]
  400ca2:	2220      	movs	r2, #32
  400ca4:	741a      	strb	r2, [r3, #16]
		}
		break;
  400ca6:	e004      	b.n	400cb2 <sd_acmd51+0xda>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400ca8:	4b04      	ldr	r3, [pc, #16]	; (400cbc <sd_acmd51+0xe4>)
  400caa:	681b      	ldr	r3, [r3, #0]
  400cac:	2210      	movs	r2, #16
  400cae:	741a      	strb	r2, [r3, #16]
		break;
  400cb0:	bf00      	nop
	}
	return true;
  400cb2:	2301      	movs	r3, #1
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd90      	pop	{r4, r7, pc}
  400cbc:	20000db4 	.word	0x20000db4
  400cc0:	004020f9 	.word	0x004020f9
  400cc4:	00081133 	.word	0x00081133
  400cc8:	004021c5 	.word	0x004021c5
  400ccc:	00402395 	.word	0x00402395
  400cd0:	00402445 	.word	0x00402445
  400cd4:	00400121 	.word	0x00400121

00400cd8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  400cd8:	b580      	push	{r7, lr}
  400cda:	b082      	sub	sp, #8
  400cdc:	af00      	add	r7, sp, #0
  400cde:	4603      	mov	r3, r0
  400ce0:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  400ce2:	79fb      	ldrb	r3, [r7, #7]
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	d001      	beq.n	400cec <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  400ce8:	2304      	movs	r3, #4
  400cea:	e0a8      	b.n	400e3e <sd_mmc_select_slot+0x166>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  400cec:	79fa      	ldrb	r2, [r7, #7]
  400cee:	4956      	ldr	r1, [pc, #344]	; (400e48 <sd_mmc_select_slot+0x170>)
  400cf0:	4613      	mov	r3, r2
  400cf2:	00db      	lsls	r3, r3, #3
  400cf4:	4413      	add	r3, r2
  400cf6:	009b      	lsls	r3, r3, #2
  400cf8:	440b      	add	r3, r1
  400cfa:	3308      	adds	r3, #8
  400cfc:	681b      	ldr	r3, [r3, #0]
  400cfe:	4618      	mov	r0, r3
  400d00:	4b52      	ldr	r3, [pc, #328]	; (400e4c <sd_mmc_select_slot+0x174>)
  400d02:	4798      	blx	r3
  400d04:	4603      	mov	r3, r0
			!= SD_MMC_0_CD_DETECT_VALUE) {
  400d06:	f083 0301 	eor.w	r3, r3, #1
  400d0a:	b2db      	uxtb	r3, r3
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d018      	beq.n	400d42 <sd_mmc_select_slot+0x6a>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400d10:	79fa      	ldrb	r2, [r7, #7]
  400d12:	494d      	ldr	r1, [pc, #308]	; (400e48 <sd_mmc_select_slot+0x170>)
  400d14:	4613      	mov	r3, r2
  400d16:	00db      	lsls	r3, r3, #3
  400d18:	4413      	add	r3, r2
  400d1a:	009b      	lsls	r3, r3, #2
  400d1c:	440b      	add	r3, r1
  400d1e:	3308      	adds	r3, #8
  400d20:	799b      	ldrb	r3, [r3, #6]
  400d22:	2b01      	cmp	r3, #1
  400d24:	d101      	bne.n	400d2a <sd_mmc_select_slot+0x52>
			SD_MMC_STOP_TIMEOUT();
  400d26:	4b4a      	ldr	r3, [pc, #296]	; (400e50 <sd_mmc_select_slot+0x178>)
  400d28:	4798      	blx	r3
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400d2a:	79fa      	ldrb	r2, [r7, #7]
  400d2c:	4946      	ldr	r1, [pc, #280]	; (400e48 <sd_mmc_select_slot+0x170>)
  400d2e:	4613      	mov	r3, r2
  400d30:	00db      	lsls	r3, r3, #3
  400d32:	4413      	add	r3, r2
  400d34:	009b      	lsls	r3, r3, #2
  400d36:	440b      	add	r3, r1
  400d38:	3308      	adds	r3, #8
  400d3a:	2204      	movs	r2, #4
  400d3c:	719a      	strb	r2, [r3, #6]
		return SD_MMC_ERR_NO_CARD;
  400d3e:	2302      	movs	r3, #2
  400d40:	e07d      	b.n	400e3e <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400d42:	79fa      	ldrb	r2, [r7, #7]
  400d44:	4940      	ldr	r1, [pc, #256]	; (400e48 <sd_mmc_select_slot+0x170>)
  400d46:	4613      	mov	r3, r2
  400d48:	00db      	lsls	r3, r3, #3
  400d4a:	4413      	add	r3, r2
  400d4c:	009b      	lsls	r3, r3, #2
  400d4e:	440b      	add	r3, r1
  400d50:	3308      	adds	r3, #8
  400d52:	799b      	ldrb	r3, [r3, #6]
  400d54:	2b04      	cmp	r3, #4
  400d56:	d10d      	bne.n	400d74 <sd_mmc_select_slot+0x9c>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400d58:	79fa      	ldrb	r2, [r7, #7]
  400d5a:	493b      	ldr	r1, [pc, #236]	; (400e48 <sd_mmc_select_slot+0x170>)
  400d5c:	4613      	mov	r3, r2
  400d5e:	00db      	lsls	r3, r3, #3
  400d60:	4413      	add	r3, r2
  400d62:	009b      	lsls	r3, r3, #2
  400d64:	440b      	add	r3, r1
  400d66:	3308      	adds	r3, #8
  400d68:	2201      	movs	r2, #1
  400d6a:	719a      	strb	r2, [r3, #6]
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
  400d6c:	4b39      	ldr	r3, [pc, #228]	; (400e54 <sd_mmc_select_slot+0x17c>)
  400d6e:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  400d70:	2302      	movs	r3, #2
  400d72:	e064      	b.n	400e3e <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400d74:	79fa      	ldrb	r2, [r7, #7]
  400d76:	4934      	ldr	r1, [pc, #208]	; (400e48 <sd_mmc_select_slot+0x170>)
  400d78:	4613      	mov	r3, r2
  400d7a:	00db      	lsls	r3, r3, #3
  400d7c:	4413      	add	r3, r2
  400d7e:	009b      	lsls	r3, r3, #2
  400d80:	440b      	add	r3, r1
  400d82:	3308      	adds	r3, #8
  400d84:	799b      	ldrb	r3, [r3, #6]
  400d86:	2b01      	cmp	r3, #1
  400d88:	d130      	bne.n	400dec <sd_mmc_select_slot+0x114>
		if (!SD_MMC_IS_TIMEOUT()) {
  400d8a:	4b33      	ldr	r3, [pc, #204]	; (400e58 <sd_mmc_select_slot+0x180>)
  400d8c:	4798      	blx	r3
  400d8e:	4603      	mov	r3, r0
  400d90:	f083 0301 	eor.w	r3, r3, #1
  400d94:	b2db      	uxtb	r3, r3
  400d96:	2b00      	cmp	r3, #0
  400d98:	d001      	beq.n	400d9e <sd_mmc_select_slot+0xc6>
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  400d9a:	2302      	movs	r3, #2
  400d9c:	e04f      	b.n	400e3e <sd_mmc_select_slot+0x166>
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400d9e:	79fa      	ldrb	r2, [r7, #7]
  400da0:	4929      	ldr	r1, [pc, #164]	; (400e48 <sd_mmc_select_slot+0x170>)
  400da2:	4613      	mov	r3, r2
  400da4:	00db      	lsls	r3, r3, #3
  400da6:	4413      	add	r3, r2
  400da8:	009b      	lsls	r3, r3, #2
  400daa:	440b      	add	r3, r1
  400dac:	3308      	adds	r3, #8
  400dae:	2202      	movs	r2, #2
  400db0:	719a      	strb	r2, [r3, #6]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400db2:	79fa      	ldrb	r2, [r7, #7]
  400db4:	4924      	ldr	r1, [pc, #144]	; (400e48 <sd_mmc_select_slot+0x170>)
  400db6:	4613      	mov	r3, r2
  400db8:	00db      	lsls	r3, r3, #3
  400dba:	4413      	add	r3, r2
  400dbc:	009b      	lsls	r3, r3, #2
  400dbe:	440b      	add	r3, r1
  400dc0:	4a26      	ldr	r2, [pc, #152]	; (400e5c <sd_mmc_select_slot+0x184>)
  400dc2:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  400dc4:	79fa      	ldrb	r2, [r7, #7]
  400dc6:	4920      	ldr	r1, [pc, #128]	; (400e48 <sd_mmc_select_slot+0x170>)
  400dc8:	4613      	mov	r3, r2
  400dca:	00db      	lsls	r3, r3, #3
  400dcc:	4413      	add	r3, r2
  400dce:	009b      	lsls	r3, r3, #2
  400dd0:	440b      	add	r3, r1
  400dd2:	3310      	adds	r3, #16
  400dd4:	2201      	movs	r2, #1
  400dd6:	705a      	strb	r2, [r3, #1]
		sd_mmc_cards[slot].high_speed = 0;
  400dd8:	79fa      	ldrb	r2, [r7, #7]
  400dda:	491b      	ldr	r1, [pc, #108]	; (400e48 <sd_mmc_select_slot+0x170>)
  400ddc:	4613      	mov	r3, r2
  400dde:	00db      	lsls	r3, r3, #3
  400de0:	4413      	add	r3, r2
  400de2:	009b      	lsls	r3, r3, #2
  400de4:	440b      	add	r3, r1
  400de6:	3320      	adds	r3, #32
  400de8:	2200      	movs	r2, #0
  400dea:	709a      	strb	r2, [r3, #2]
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400dec:	79fa      	ldrb	r2, [r7, #7]
  400dee:	4916      	ldr	r1, [pc, #88]	; (400e48 <sd_mmc_select_slot+0x170>)
  400df0:	4613      	mov	r3, r2
  400df2:	00db      	lsls	r3, r3, #3
  400df4:	4413      	add	r3, r2
  400df6:	009b      	lsls	r3, r3, #2
  400df8:	440b      	add	r3, r1
  400dfa:	3308      	adds	r3, #8
  400dfc:	799b      	ldrb	r3, [r3, #6]
  400dfe:	2b03      	cmp	r3, #3
  400e00:	d101      	bne.n	400e06 <sd_mmc_select_slot+0x12e>
		return SD_MMC_ERR_UNUSABLE;
  400e02:	2303      	movs	r3, #3
  400e04:	e01b      	b.n	400e3e <sd_mmc_select_slot+0x166>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400e06:	4b16      	ldr	r3, [pc, #88]	; (400e60 <sd_mmc_select_slot+0x188>)
  400e08:	79fa      	ldrb	r2, [r7, #7]
  400e0a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400e0c:	79fa      	ldrb	r2, [r7, #7]
  400e0e:	4613      	mov	r3, r2
  400e10:	00db      	lsls	r3, r3, #3
  400e12:	4413      	add	r3, r2
  400e14:	009b      	lsls	r3, r3, #2
  400e16:	4a0c      	ldr	r2, [pc, #48]	; (400e48 <sd_mmc_select_slot+0x170>)
  400e18:	441a      	add	r2, r3
  400e1a:	4b12      	ldr	r3, [pc, #72]	; (400e64 <sd_mmc_select_slot+0x18c>)
  400e1c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
  400e1e:	4b12      	ldr	r3, [pc, #72]	; (400e68 <sd_mmc_select_slot+0x190>)
  400e20:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  400e22:	79fa      	ldrb	r2, [r7, #7]
  400e24:	4908      	ldr	r1, [pc, #32]	; (400e48 <sd_mmc_select_slot+0x170>)
  400e26:	4613      	mov	r3, r2
  400e28:	00db      	lsls	r3, r3, #3
  400e2a:	4413      	add	r3, r2
  400e2c:	009b      	lsls	r3, r3, #2
  400e2e:	440b      	add	r3, r1
  400e30:	3308      	adds	r3, #8
  400e32:	799b      	ldrb	r3, [r3, #6]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400e34:	2b02      	cmp	r3, #2
  400e36:	bf14      	ite	ne
  400e38:	2300      	movne	r3, #0
  400e3a:	2301      	moveq	r3, #1
  400e3c:	b2db      	uxtb	r3, r3
}
  400e3e:	4618      	mov	r0, r3
  400e40:	3708      	adds	r7, #8
  400e42:	46bd      	mov	sp, r7
  400e44:	bd80      	pop	{r7, pc}
  400e46:	bf00      	nop
  400e48:	2000001c 	.word	0x2000001c
  400e4c:	004002d1 	.word	0x004002d1
  400e50:	0040042d 	.word	0x0040042d
  400e54:	00400321 	.word	0x00400321
  400e58:	004003ed 	.word	0x004003ed
  400e5c:	00061a80 	.word	0x00061a80
  400e60:	20000db0 	.word	0x20000db0
  400e64:	20000db4 	.word	0x20000db4
  400e68:	00400e6d 	.word	0x00400e6d

00400e6c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400e6c:	b598      	push	{r3, r4, r7, lr}
  400e6e:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400e70:	4b09      	ldr	r3, [pc, #36]	; (400e98 <sd_mmc_configure_slot+0x2c>)
  400e72:	7818      	ldrb	r0, [r3, #0]
  400e74:	4b09      	ldr	r3, [pc, #36]	; (400e9c <sd_mmc_configure_slot+0x30>)
  400e76:	681b      	ldr	r3, [r3, #0]
  400e78:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  400e7a:	4b08      	ldr	r3, [pc, #32]	; (400e9c <sd_mmc_configure_slot+0x30>)
  400e7c:	681b      	ldr	r3, [r3, #0]
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400e7e:	7c5a      	ldrb	r2, [r3, #17]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  400e80:	4b06      	ldr	r3, [pc, #24]	; (400e9c <sd_mmc_configure_slot+0x30>)
  400e82:	681b      	ldr	r3, [r3, #0]
  400e84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400e88:	2b00      	cmp	r3, #0
  400e8a:	bf0c      	ite	eq
  400e8c:	2300      	moveq	r3, #0
  400e8e:	2301      	movne	r3, #1
  400e90:	b2db      	uxtb	r3, r3
  400e92:	4c03      	ldr	r4, [pc, #12]	; (400ea0 <sd_mmc_configure_slot+0x34>)
  400e94:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
  400e96:	bd98      	pop	{r3, r4, r7, pc}
  400e98:	20000db0 	.word	0x20000db0
  400e9c:	20000db4 	.word	0x20000db4
  400ea0:	00402011 	.word	0x00402011

00400ea4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400ea4:	b580      	push	{r7, lr}
  400ea6:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400ea8:	4b04      	ldr	r3, [pc, #16]	; (400ebc <sd_mmc_deselect_slot+0x18>)
  400eaa:	781b      	ldrb	r3, [r3, #0]
  400eac:	2b00      	cmp	r3, #0
  400eae:	d104      	bne.n	400eba <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  400eb0:	4b02      	ldr	r3, [pc, #8]	; (400ebc <sd_mmc_deselect_slot+0x18>)
  400eb2:	781b      	ldrb	r3, [r3, #0]
  400eb4:	4618      	mov	r0, r3
  400eb6:	4b02      	ldr	r3, [pc, #8]	; (400ec0 <sd_mmc_deselect_slot+0x1c>)
  400eb8:	4798      	blx	r3
	}
}
  400eba:	bd80      	pop	{r7, pc}
  400ebc:	20000db0 	.word	0x20000db0
  400ec0:	004020a5 	.word	0x004020a5

00400ec4 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  400ec4:	b590      	push	{r4, r7, lr}
  400ec6:	b083      	sub	sp, #12
  400ec8:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
  400eca:	2300      	movs	r3, #0
  400ecc:	71fb      	strb	r3, [r7, #7]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400ece:	4b7d      	ldr	r3, [pc, #500]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400ed0:	681b      	ldr	r3, [r3, #0]
  400ed2:	2201      	movs	r2, #1
  400ed4:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  400ed6:	4b7b      	ldr	r3, [pc, #492]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400ed8:	681b      	ldr	r3, [r3, #0]
  400eda:	2200      	movs	r2, #0
  400edc:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
  400ede:	4b79      	ldr	r3, [pc, #484]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400ee0:	681b      	ldr	r3, [r3, #0]
  400ee2:	2200      	movs	r2, #0
  400ee4:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  400ee6:	4b78      	ldr	r3, [pc, #480]	; (4010c8 <sd_mmc_mci_card_init+0x204>)
  400ee8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400eea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400eee:	2100      	movs	r1, #0
  400ef0:	4b76      	ldr	r3, [pc, #472]	; (4010cc <sd_mmc_mci_card_init+0x208>)
  400ef2:	4798      	blx	r3
  400ef4:	4603      	mov	r3, r0
  400ef6:	f083 0301 	eor.w	r3, r3, #1
  400efa:	b2db      	uxtb	r3, r3
  400efc:	2b00      	cmp	r3, #0
  400efe:	d001      	beq.n	400f04 <sd_mmc_mci_card_init+0x40>
		return false;
  400f00:	2300      	movs	r3, #0
  400f02:	e0da      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	}
	if (!sd_cmd8(&v2)) {
  400f04:	1dfb      	adds	r3, r7, #7
  400f06:	4618      	mov	r0, r3
  400f08:	4b71      	ldr	r3, [pc, #452]	; (4010d0 <sd_mmc_mci_card_init+0x20c>)
  400f0a:	4798      	blx	r3
  400f0c:	4603      	mov	r3, r0
  400f0e:	f083 0301 	eor.w	r3, r3, #1
  400f12:	b2db      	uxtb	r3, r3
  400f14:	2b00      	cmp	r3, #0
  400f16:	d001      	beq.n	400f1c <sd_mmc_mci_card_init+0x58>
		return false;
  400f18:	2300      	movs	r3, #0
  400f1a:	e0ce      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  400f1c:	4b6d      	ldr	r3, [pc, #436]	; (4010d4 <sd_mmc_mci_card_init+0x210>)
  400f1e:	4798      	blx	r3
  400f20:	4603      	mov	r3, r0
  400f22:	f083 0301 	eor.w	r3, r3, #1
  400f26:	b2db      	uxtb	r3, r3
  400f28:	2b00      	cmp	r3, #0
  400f2a:	d001      	beq.n	400f30 <sd_mmc_mci_card_init+0x6c>
		return false;
  400f2c:	2300      	movs	r3, #0
  400f2e:	e0c4      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400f30:	4b64      	ldr	r3, [pc, #400]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400f32:	681b      	ldr	r3, [r3, #0]
  400f34:	7bdb      	ldrb	r3, [r3, #15]
  400f36:	f003 0301 	and.w	r3, r3, #1
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d011      	beq.n	400f62 <sd_mmc_mci_card_init+0x9e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  400f3e:	79fb      	ldrb	r3, [r7, #7]
  400f40:	4618      	mov	r0, r3
  400f42:	4b65      	ldr	r3, [pc, #404]	; (4010d8 <sd_mmc_mci_card_init+0x214>)
  400f44:	4798      	blx	r3
  400f46:	4603      	mov	r3, r0
  400f48:	f083 0301 	eor.w	r3, r3, #1
  400f4c:	b2db      	uxtb	r3, r3
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d007      	beq.n	400f62 <sd_mmc_mci_card_init+0x9e>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400f52:	4b5c      	ldr	r3, [pc, #368]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400f54:	681b      	ldr	r3, [r3, #0]
  400f56:	2202      	movs	r2, #2
  400f58:	73da      	strb	r2, [r3, #15]
			return sd_mmc_mci_install_mmc();
  400f5a:	4b60      	ldr	r3, [pc, #384]	; (4010dc <sd_mmc_mci_card_init+0x218>)
  400f5c:	4798      	blx	r3
  400f5e:	4603      	mov	r3, r0
  400f60:	e0ab      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400f62:	4b58      	ldr	r3, [pc, #352]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400f64:	681b      	ldr	r3, [r3, #0]
  400f66:	7bdb      	ldrb	r3, [r3, #15]
  400f68:	f003 0301 	and.w	r3, r3, #1
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d00c      	beq.n	400f8a <sd_mmc_mci_card_init+0xc6>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400f70:	f645 3002 	movw	r0, #23298	; 0x5b02
  400f74:	2100      	movs	r1, #0
  400f76:	4b55      	ldr	r3, [pc, #340]	; (4010cc <sd_mmc_mci_card_init+0x208>)
  400f78:	4798      	blx	r3
  400f7a:	4603      	mov	r3, r0
  400f7c:	f083 0301 	eor.w	r3, r3, #1
  400f80:	b2db      	uxtb	r3, r3
  400f82:	2b00      	cmp	r3, #0
  400f84:	d001      	beq.n	400f8a <sd_mmc_mci_card_init+0xc6>
			return false;
  400f86:	2300      	movs	r3, #0
  400f88:	e097      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400f8a:	f245 1003 	movw	r0, #20739	; 0x5103
  400f8e:	2100      	movs	r1, #0
  400f90:	4b4e      	ldr	r3, [pc, #312]	; (4010cc <sd_mmc_mci_card_init+0x208>)
  400f92:	4798      	blx	r3
  400f94:	4603      	mov	r3, r0
  400f96:	f083 0301 	eor.w	r3, r3, #1
  400f9a:	b2db      	uxtb	r3, r3
  400f9c:	2b00      	cmp	r3, #0
  400f9e:	d001      	beq.n	400fa4 <sd_mmc_mci_card_init+0xe0>
		return false;
  400fa0:	2300      	movs	r3, #0
  400fa2:	e08a      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400fa4:	4b47      	ldr	r3, [pc, #284]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400fa6:	681c      	ldr	r4, [r3, #0]
  400fa8:	4b4d      	ldr	r3, [pc, #308]	; (4010e0 <sd_mmc_mci_card_init+0x21c>)
  400faa:	4798      	blx	r3
  400fac:	4603      	mov	r3, r0
  400fae:	0c1b      	lsrs	r3, r3, #16
  400fb0:	b29b      	uxth	r3, r3
  400fb2:	81a3      	strh	r3, [r4, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400fb4:	4b43      	ldr	r3, [pc, #268]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400fb6:	681b      	ldr	r3, [r3, #0]
  400fb8:	7bdb      	ldrb	r3, [r3, #15]
  400fba:	f003 0301 	and.w	r3, r3, #1
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d00b      	beq.n	400fda <sd_mmc_mci_card_init+0x116>
		if (!sd_mmc_cmd9_mci()) {
  400fc2:	4b48      	ldr	r3, [pc, #288]	; (4010e4 <sd_mmc_mci_card_init+0x220>)
  400fc4:	4798      	blx	r3
  400fc6:	4603      	mov	r3, r0
  400fc8:	f083 0301 	eor.w	r3, r3, #1
  400fcc:	b2db      	uxtb	r3, r3
  400fce:	2b00      	cmp	r3, #0
  400fd0:	d001      	beq.n	400fd6 <sd_mmc_mci_card_init+0x112>
			return false;
  400fd2:	2300      	movs	r3, #0
  400fd4:	e071      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
		}
		sd_decode_csd();
  400fd6:	4b44      	ldr	r3, [pc, #272]	; (4010e8 <sd_mmc_mci_card_init+0x224>)
  400fd8:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  400fda:	4b3a      	ldr	r3, [pc, #232]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400fdc:	681b      	ldr	r3, [r3, #0]
  400fde:	899b      	ldrh	r3, [r3, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400fe0:	041b      	lsls	r3, r3, #16
  400fe2:	f243 1007 	movw	r0, #12551	; 0x3107
  400fe6:	4619      	mov	r1, r3
  400fe8:	4b38      	ldr	r3, [pc, #224]	; (4010cc <sd_mmc_mci_card_init+0x208>)
  400fea:	4798      	blx	r3
  400fec:	4603      	mov	r3, r0
  400fee:	f083 0301 	eor.w	r3, r3, #1
  400ff2:	b2db      	uxtb	r3, r3
  400ff4:	2b00      	cmp	r3, #0
  400ff6:	d001      	beq.n	400ffc <sd_mmc_mci_card_init+0x138>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  400ff8:	2300      	movs	r3, #0
  400ffa:	e05e      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400ffc:	4b31      	ldr	r3, [pc, #196]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  400ffe:	681b      	ldr	r3, [r3, #0]
  401000:	7bdb      	ldrb	r3, [r3, #15]
  401002:	f003 0301 	and.w	r3, r3, #1
  401006:	2b00      	cmp	r3, #0
  401008:	d009      	beq.n	40101e <sd_mmc_mci_card_init+0x15a>
		if (!sd_acmd51()) {
  40100a:	4b38      	ldr	r3, [pc, #224]	; (4010ec <sd_mmc_mci_card_init+0x228>)
  40100c:	4798      	blx	r3
  40100e:	4603      	mov	r3, r0
  401010:	f083 0301 	eor.w	r3, r3, #1
  401014:	b2db      	uxtb	r3, r3
  401016:	2b00      	cmp	r3, #0
  401018:	d001      	beq.n	40101e <sd_mmc_mci_card_init+0x15a>
			return false;
  40101a:	2300      	movs	r3, #0
  40101c:	e04d      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  40101e:	4b34      	ldr	r3, [pc, #208]	; (4010f0 <sd_mmc_mci_card_init+0x22c>)
  401020:	781b      	ldrb	r3, [r3, #0]
  401022:	4618      	mov	r0, r3
  401024:	4b33      	ldr	r3, [pc, #204]	; (4010f4 <sd_mmc_mci_card_init+0x230>)
  401026:	4798      	blx	r3
  401028:	4603      	mov	r3, r0
  40102a:	2b03      	cmp	r3, #3
  40102c:	d912      	bls.n	401054 <sd_mmc_mci_card_init+0x190>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  40102e:	4b25      	ldr	r3, [pc, #148]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  401030:	681b      	ldr	r3, [r3, #0]
  401032:	7bdb      	ldrb	r3, [r3, #15]
  401034:	f003 0301 	and.w	r3, r3, #1
  401038:	2b00      	cmp	r3, #0
  40103a:	d009      	beq.n	401050 <sd_mmc_mci_card_init+0x18c>
			if (!sd_acmd6()) {
  40103c:	4b2e      	ldr	r3, [pc, #184]	; (4010f8 <sd_mmc_mci_card_init+0x234>)
  40103e:	4798      	blx	r3
  401040:	4603      	mov	r3, r0
  401042:	f083 0301 	eor.w	r3, r3, #1
  401046:	b2db      	uxtb	r3, r3
  401048:	2b00      	cmp	r3, #0
  40104a:	d001      	beq.n	401050 <sd_mmc_mci_card_init+0x18c>
				return false;
  40104c:	2300      	movs	r3, #0
  40104e:	e034      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  401050:	4b2a      	ldr	r3, [pc, #168]	; (4010fc <sd_mmc_mci_card_init+0x238>)
  401052:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  401054:	4b2a      	ldr	r3, [pc, #168]	; (401100 <sd_mmc_mci_card_init+0x23c>)
  401056:	4798      	blx	r3
  401058:	4603      	mov	r3, r0
  40105a:	2b00      	cmp	r3, #0
  40105c:	d017      	beq.n	40108e <sd_mmc_mci_card_init+0x1ca>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  40105e:	4b19      	ldr	r3, [pc, #100]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  401060:	681b      	ldr	r3, [r3, #0]
  401062:	7bdb      	ldrb	r3, [r3, #15]
  401064:	f003 0301 	and.w	r3, r3, #1
  401068:	2b00      	cmp	r3, #0
  40106a:	d00e      	beq.n	40108a <sd_mmc_mci_card_init+0x1c6>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  40106c:	4b15      	ldr	r3, [pc, #84]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  40106e:	681b      	ldr	r3, [r3, #0]
  401070:	7c1b      	ldrb	r3, [r3, #16]
  401072:	2b10      	cmp	r3, #16
  401074:	d909      	bls.n	40108a <sd_mmc_mci_card_init+0x1c6>
				if (!sd_cm6_set_high_speed()) {
  401076:	4b23      	ldr	r3, [pc, #140]	; (401104 <sd_mmc_mci_card_init+0x240>)
  401078:	4798      	blx	r3
  40107a:	4603      	mov	r3, r0
  40107c:	f083 0301 	eor.w	r3, r3, #1
  401080:	b2db      	uxtb	r3, r3
  401082:	2b00      	cmp	r3, #0
  401084:	d001      	beq.n	40108a <sd_mmc_mci_card_init+0x1c6>
					return false;
  401086:	2300      	movs	r3, #0
  401088:	e017      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  40108a:	4b1c      	ldr	r3, [pc, #112]	; (4010fc <sd_mmc_mci_card_init+0x238>)
  40108c:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40108e:	4b0d      	ldr	r3, [pc, #52]	; (4010c4 <sd_mmc_mci_card_init+0x200>)
  401090:	681b      	ldr	r3, [r3, #0]
  401092:	7bdb      	ldrb	r3, [r3, #15]
  401094:	f003 0301 	and.w	r3, r3, #1
  401098:	2b00      	cmp	r3, #0
  40109a:	d00d      	beq.n	4010b8 <sd_mmc_mci_card_init+0x1f4>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40109c:	f241 1010 	movw	r0, #4368	; 0x1110
  4010a0:	f44f 7100 	mov.w	r1, #512	; 0x200
  4010a4:	4b09      	ldr	r3, [pc, #36]	; (4010cc <sd_mmc_mci_card_init+0x208>)
  4010a6:	4798      	blx	r3
  4010a8:	4603      	mov	r3, r0
  4010aa:	f083 0301 	eor.w	r3, r3, #1
  4010ae:	b2db      	uxtb	r3, r3
  4010b0:	2b00      	cmp	r3, #0
  4010b2:	d001      	beq.n	4010b8 <sd_mmc_mci_card_init+0x1f4>
			return false;
  4010b4:	2300      	movs	r3, #0
  4010b6:	e000      	b.n	4010ba <sd_mmc_mci_card_init+0x1f6>
		}
	}
	return true;
  4010b8:	2301      	movs	r3, #1
}
  4010ba:	4618      	mov	r0, r3
  4010bc:	370c      	adds	r7, #12
  4010be:	46bd      	mov	sp, r7
  4010c0:	bd90      	pop	{r4, r7, pc}
  4010c2:	bf00      	nop
  4010c4:	20000db4 	.word	0x20000db4
  4010c8:	004020b9 	.word	0x004020b9
  4010cc:	004020f9 	.word	0x004020f9
  4010d0:	0040074d 	.word	0x0040074d
  4010d4:	0040057d 	.word	0x0040057d
  4010d8:	004004d1 	.word	0x004004d1
  4010dc:	00401109 	.word	0x00401109
  4010e0:	00402145 	.word	0x00402145
  4010e4:	004008ad 	.word	0x004008ad
  4010e8:	00400a29 	.word	0x00400a29
  4010ec:	00400bd9 	.word	0x00400bd9
  4010f0:	20000db0 	.word	0x20000db0
  4010f4:	00401fdd 	.word	0x00401fdd
  4010f8:	00400b81 	.word	0x00400b81
  4010fc:	00400e6d 	.word	0x00400e6d
  401100:	00402001 	.word	0x00402001
  401104:	0040058d 	.word	0x0040058d

00401108 <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  401108:	b580      	push	{r7, lr}
  40110a:	b082      	sub	sp, #8
  40110c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40110e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401112:	2100      	movs	r1, #0
  401114:	4b56      	ldr	r3, [pc, #344]	; (401270 <sd_mmc_mci_install_mmc+0x168>)
  401116:	4798      	blx	r3
  401118:	4603      	mov	r3, r0
  40111a:	f083 0301 	eor.w	r3, r3, #1
  40111e:	b2db      	uxtb	r3, r3
  401120:	2b00      	cmp	r3, #0
  401122:	d001      	beq.n	401128 <sd_mmc_mci_install_mmc+0x20>
		return false;
  401124:	2300      	movs	r3, #0
  401126:	e09f      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  401128:	4b52      	ldr	r3, [pc, #328]	; (401274 <sd_mmc_mci_install_mmc+0x16c>)
  40112a:	4798      	blx	r3
  40112c:	4603      	mov	r3, r0
  40112e:	f083 0301 	eor.w	r3, r3, #1
  401132:	b2db      	uxtb	r3, r3
  401134:	2b00      	cmp	r3, #0
  401136:	d001      	beq.n	40113c <sd_mmc_mci_install_mmc+0x34>
		return false;
  401138:	2300      	movs	r3, #0
  40113a:	e095      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40113c:	f645 3002 	movw	r0, #23298	; 0x5b02
  401140:	2100      	movs	r1, #0
  401142:	4b4b      	ldr	r3, [pc, #300]	; (401270 <sd_mmc_mci_install_mmc+0x168>)
  401144:	4798      	blx	r3
  401146:	4603      	mov	r3, r0
  401148:	f083 0301 	eor.w	r3, r3, #1
  40114c:	b2db      	uxtb	r3, r3
  40114e:	2b00      	cmp	r3, #0
  401150:	d001      	beq.n	401156 <sd_mmc_mci_install_mmc+0x4e>
		return false;
  401152:	2300      	movs	r3, #0
  401154:	e088      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  401156:	4b48      	ldr	r3, [pc, #288]	; (401278 <sd_mmc_mci_install_mmc+0x170>)
  401158:	681b      	ldr	r3, [r3, #0]
  40115a:	2201      	movs	r2, #1
  40115c:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  40115e:	4b46      	ldr	r3, [pc, #280]	; (401278 <sd_mmc_mci_install_mmc+0x170>)
  401160:	681b      	ldr	r3, [r3, #0]
  401162:	899b      	ldrh	r3, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  401164:	041b      	lsls	r3, r3, #16
  401166:	f241 1003 	movw	r0, #4355	; 0x1103
  40116a:	4619      	mov	r1, r3
  40116c:	4b40      	ldr	r3, [pc, #256]	; (401270 <sd_mmc_mci_install_mmc+0x168>)
  40116e:	4798      	blx	r3
  401170:	4603      	mov	r3, r0
  401172:	f083 0301 	eor.w	r3, r3, #1
  401176:	b2db      	uxtb	r3, r3
  401178:	2b00      	cmp	r3, #0
  40117a:	d001      	beq.n	401180 <sd_mmc_mci_install_mmc+0x78>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  40117c:	2300      	movs	r3, #0
  40117e:	e073      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  401180:	4b3e      	ldr	r3, [pc, #248]	; (40127c <sd_mmc_mci_install_mmc+0x174>)
  401182:	4798      	blx	r3
  401184:	4603      	mov	r3, r0
  401186:	f083 0301 	eor.w	r3, r3, #1
  40118a:	b2db      	uxtb	r3, r3
  40118c:	2b00      	cmp	r3, #0
  40118e:	d001      	beq.n	401194 <sd_mmc_mci_install_mmc+0x8c>
		return false;
  401190:	2300      	movs	r3, #0
  401192:	e069      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  401194:	4b3a      	ldr	r3, [pc, #232]	; (401280 <sd_mmc_mci_install_mmc+0x178>)
  401196:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  401198:	4b37      	ldr	r3, [pc, #220]	; (401278 <sd_mmc_mci_install_mmc+0x170>)
  40119a:	681b      	ldr	r3, [r3, #0]
  40119c:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40119e:	041b      	lsls	r3, r3, #16
  4011a0:	f243 1007 	movw	r0, #12551	; 0x3107
  4011a4:	4619      	mov	r1, r3
  4011a6:	4b32      	ldr	r3, [pc, #200]	; (401270 <sd_mmc_mci_install_mmc+0x168>)
  4011a8:	4798      	blx	r3
  4011aa:	4603      	mov	r3, r0
  4011ac:	f083 0301 	eor.w	r3, r3, #1
  4011b0:	b2db      	uxtb	r3, r3
  4011b2:	2b00      	cmp	r3, #0
  4011b4:	d001      	beq.n	4011ba <sd_mmc_mci_install_mmc+0xb2>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  4011b6:	2300      	movs	r3, #0
  4011b8:	e056      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  4011ba:	4b2f      	ldr	r3, [pc, #188]	; (401278 <sd_mmc_mci_install_mmc+0x170>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	7c1b      	ldrb	r3, [r3, #16]
  4011c0:	2b3f      	cmp	r3, #63	; 0x3f
  4011c2:	d93b      	bls.n	40123c <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  4011c4:	1dbb      	adds	r3, r7, #6
  4011c6:	4618      	mov	r0, r3
  4011c8:	4b2e      	ldr	r3, [pc, #184]	; (401284 <sd_mmc_mci_install_mmc+0x17c>)
  4011ca:	4798      	blx	r3
  4011cc:	4603      	mov	r3, r0
  4011ce:	f083 0301 	eor.w	r3, r3, #1
  4011d2:	b2db      	uxtb	r3, r3
  4011d4:	2b00      	cmp	r3, #0
  4011d6:	d001      	beq.n	4011dc <sd_mmc_mci_install_mmc+0xd4>
			return false;
  4011d8:	2300      	movs	r3, #0
  4011da:	e045      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4011dc:	4b2a      	ldr	r3, [pc, #168]	; (401288 <sd_mmc_mci_install_mmc+0x180>)
  4011de:	781b      	ldrb	r3, [r3, #0]
  4011e0:	4618      	mov	r0, r3
  4011e2:	4b2a      	ldr	r3, [pc, #168]	; (40128c <sd_mmc_mci_install_mmc+0x184>)
  4011e4:	4798      	blx	r3
  4011e6:	4603      	mov	r3, r0
  4011e8:	2b03      	cmp	r3, #3
  4011ea:	d912      	bls.n	401212 <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4011ec:	4b26      	ldr	r3, [pc, #152]	; (401288 <sd_mmc_mci_install_mmc+0x180>)
  4011ee:	781b      	ldrb	r3, [r3, #0]
  4011f0:	4618      	mov	r0, r3
  4011f2:	4b26      	ldr	r3, [pc, #152]	; (40128c <sd_mmc_mci_install_mmc+0x184>)
  4011f4:	4798      	blx	r3
  4011f6:	4603      	mov	r3, r0
  4011f8:	4618      	mov	r0, r3
  4011fa:	4b25      	ldr	r3, [pc, #148]	; (401290 <sd_mmc_mci_install_mmc+0x188>)
  4011fc:	4798      	blx	r3
  4011fe:	4603      	mov	r3, r0
  401200:	f083 0301 	eor.w	r3, r3, #1
  401204:	b2db      	uxtb	r3, r3
  401206:	2b00      	cmp	r3, #0
  401208:	d001      	beq.n	40120e <sd_mmc_mci_install_mmc+0x106>
				return false;
  40120a:	2300      	movs	r3, #0
  40120c:	e02c      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40120e:	4b21      	ldr	r3, [pc, #132]	; (401294 <sd_mmc_mci_install_mmc+0x18c>)
  401210:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  401212:	4b21      	ldr	r3, [pc, #132]	; (401298 <sd_mmc_mci_install_mmc+0x190>)
  401214:	4798      	blx	r3
  401216:	4603      	mov	r3, r0
  401218:	2b00      	cmp	r3, #0
  40121a:	d011      	beq.n	401240 <sd_mmc_mci_install_mmc+0x138>
  40121c:	79bb      	ldrb	r3, [r7, #6]
  40121e:	2b00      	cmp	r3, #0
  401220:	d00e      	beq.n	401240 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  401222:	4b1e      	ldr	r3, [pc, #120]	; (40129c <sd_mmc_mci_install_mmc+0x194>)
  401224:	4798      	blx	r3
  401226:	4603      	mov	r3, r0
  401228:	f083 0301 	eor.w	r3, r3, #1
  40122c:	b2db      	uxtb	r3, r3
  40122e:	2b00      	cmp	r3, #0
  401230:	d001      	beq.n	401236 <sd_mmc_mci_install_mmc+0x12e>
				return false;
  401232:	2300      	movs	r3, #0
  401234:	e018      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  401236:	4b17      	ldr	r3, [pc, #92]	; (401294 <sd_mmc_mci_install_mmc+0x18c>)
  401238:	4798      	blx	r3
  40123a:	e001      	b.n	401240 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  40123c:	4b15      	ldr	r3, [pc, #84]	; (401294 <sd_mmc_mci_install_mmc+0x18c>)
  40123e:	4798      	blx	r3
	}

	uint8_t retry = 10;
  401240:	230a      	movs	r3, #10
  401242:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  401244:	e00a      	b.n	40125c <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401246:	f241 1010 	movw	r0, #4368	; 0x1110
  40124a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40124e:	4b08      	ldr	r3, [pc, #32]	; (401270 <sd_mmc_mci_install_mmc+0x168>)
  401250:	4798      	blx	r3
  401252:	4603      	mov	r3, r0
  401254:	2b00      	cmp	r3, #0
  401256:	d001      	beq.n	40125c <sd_mmc_mci_install_mmc+0x154>
			return true;
  401258:	2301      	movs	r3, #1
  40125a:	e005      	b.n	401268 <sd_mmc_mci_install_mmc+0x160>
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  40125c:	79fb      	ldrb	r3, [r7, #7]
  40125e:	1e5a      	subs	r2, r3, #1
  401260:	71fa      	strb	r2, [r7, #7]
  401262:	2b00      	cmp	r3, #0
  401264:	d1ef      	bne.n	401246 <sd_mmc_mci_install_mmc+0x13e>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
  401266:	2300      	movs	r3, #0
}
  401268:	4618      	mov	r0, r3
  40126a:	3708      	adds	r7, #8
  40126c:	46bd      	mov	sp, r7
  40126e:	bd80      	pop	{r7, pc}
  401270:	004020f9 	.word	0x004020f9
  401274:	00400451 	.word	0x00400451
  401278:	20000db4 	.word	0x20000db4
  40127c:	004008ad 	.word	0x004008ad
  401280:	004008f1 	.word	0x004008f1
  401284:	004007b1 	.word	0x004007b1
  401288:	20000db0 	.word	0x20000db0
  40128c:	00401fdd 	.word	0x00401fdd
  401290:	00400675 	.word	0x00400675
  401294:	00400e6d 	.word	0x00400e6d
  401298:	00402001 	.word	0x00402001
  40129c:	004006f1 	.word	0x004006f1

004012a0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4012a0:	b580      	push	{r7, lr}
  4012a2:	b082      	sub	sp, #8
  4012a4:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  4012a6:	2300      	movs	r3, #0
  4012a8:	71fb      	strb	r3, [r7, #7]
  4012aa:	e00c      	b.n	4012c6 <sd_mmc_init+0x26>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4012ac:	79fa      	ldrb	r2, [r7, #7]
  4012ae:	490b      	ldr	r1, [pc, #44]	; (4012dc <sd_mmc_init+0x3c>)
  4012b0:	4613      	mov	r3, r2
  4012b2:	00db      	lsls	r3, r3, #3
  4012b4:	4413      	add	r3, r2
  4012b6:	009b      	lsls	r3, r3, #2
  4012b8:	440b      	add	r3, r1
  4012ba:	3308      	adds	r3, #8
  4012bc:	2204      	movs	r2, #4
  4012be:	719a      	strb	r2, [r3, #6]
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  4012c0:	79fb      	ldrb	r3, [r7, #7]
  4012c2:	3301      	adds	r3, #1
  4012c4:	71fb      	strb	r3, [r7, #7]
  4012c6:	79fb      	ldrb	r3, [r7, #7]
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	d0ef      	beq.n	4012ac <sd_mmc_init+0xc>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4012cc:	4b04      	ldr	r3, [pc, #16]	; (4012e0 <sd_mmc_init+0x40>)
  4012ce:	22ff      	movs	r2, #255	; 0xff
  4012d0:	701a      	strb	r2, [r3, #0]
	driver_init();
  4012d2:	4b04      	ldr	r3, [pc, #16]	; (4012e4 <sd_mmc_init+0x44>)
  4012d4:	4798      	blx	r3
}
  4012d6:	3708      	adds	r7, #8
  4012d8:	46bd      	mov	sp, r7
  4012da:	bd80      	pop	{r7, pc}
  4012dc:	2000001c 	.word	0x2000001c
  4012e0:	20000db0 	.word	0x20000db0
  4012e4:	00401fa1 	.word	0x00401fa1

004012e8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	b084      	sub	sp, #16
  4012ec:	af00      	add	r7, sp, #0
  4012ee:	4603      	mov	r3, r0
  4012f0:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4012f2:	79fb      	ldrb	r3, [r7, #7]
  4012f4:	4618      	mov	r0, r3
  4012f6:	4b11      	ldr	r3, [pc, #68]	; (40133c <sd_mmc_check+0x54>)
  4012f8:	4798      	blx	r3
  4012fa:	4603      	mov	r3, r0
  4012fc:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4012fe:	7bfb      	ldrb	r3, [r7, #15]
  401300:	2b01      	cmp	r3, #1
  401302:	d003      	beq.n	40130c <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  401304:	4b0e      	ldr	r3, [pc, #56]	; (401340 <sd_mmc_check+0x58>)
  401306:	4798      	blx	r3
		return sd_mmc_err;
  401308:	7bfb      	ldrb	r3, [r7, #15]
  40130a:	e013      	b.n	401334 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	//if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			//: sd_mmc_mci_card_init())
	if(sd_mmc_mci_card_init()) 
  40130c:	4b0d      	ldr	r3, [pc, #52]	; (401344 <sd_mmc_check+0x5c>)
  40130e:	4798      	blx	r3
  401310:	4603      	mov	r3, r0
  401312:	2b00      	cmp	r3, #0
  401314:	d007      	beq.n	401326 <sd_mmc_check+0x3e>
	{
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  401316:	4b0c      	ldr	r3, [pc, #48]	; (401348 <sd_mmc_check+0x60>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	2200      	movs	r2, #0
  40131c:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  40131e:	4b08      	ldr	r3, [pc, #32]	; (401340 <sd_mmc_check+0x58>)
  401320:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  401322:	2301      	movs	r3, #1
  401324:	e006      	b.n	401334 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  401326:	4b08      	ldr	r3, [pc, #32]	; (401348 <sd_mmc_check+0x60>)
  401328:	681b      	ldr	r3, [r3, #0]
  40132a:	2203      	movs	r2, #3
  40132c:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
  40132e:	4b04      	ldr	r3, [pc, #16]	; (401340 <sd_mmc_check+0x58>)
  401330:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  401332:	2303      	movs	r3, #3
}
  401334:	4618      	mov	r0, r3
  401336:	3710      	adds	r7, #16
  401338:	46bd      	mov	sp, r7
  40133a:	bd80      	pop	{r7, pc}
  40133c:	00400cd9 	.word	0x00400cd9
  401340:	00400ea5 	.word	0x00400ea5
  401344:	00400ec5 	.word	0x00400ec5
  401348:	20000db4 	.word	0x20000db4

0040134c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  40134c:	b580      	push	{r7, lr}
  40134e:	b082      	sub	sp, #8
  401350:	af00      	add	r7, sp, #0
  401352:	4603      	mov	r3, r0
  401354:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401356:	79fb      	ldrb	r3, [r7, #7]
  401358:	4618      	mov	r0, r3
  40135a:	4b08      	ldr	r3, [pc, #32]	; (40137c <sd_mmc_get_type+0x30>)
  40135c:	4798      	blx	r3
  40135e:	4603      	mov	r3, r0
  401360:	2b00      	cmp	r3, #0
  401362:	d001      	beq.n	401368 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  401364:	2300      	movs	r3, #0
  401366:	e004      	b.n	401372 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  401368:	4b05      	ldr	r3, [pc, #20]	; (401380 <sd_mmc_get_type+0x34>)
  40136a:	4798      	blx	r3
	return sd_mmc_card->type;
  40136c:	4b05      	ldr	r3, [pc, #20]	; (401384 <sd_mmc_get_type+0x38>)
  40136e:	681b      	ldr	r3, [r3, #0]
  401370:	7bdb      	ldrb	r3, [r3, #15]
}
  401372:	4618      	mov	r0, r3
  401374:	3708      	adds	r7, #8
  401376:	46bd      	mov	sp, r7
  401378:	bd80      	pop	{r7, pc}
  40137a:	bf00      	nop
  40137c:	00400cd9 	.word	0x00400cd9
  401380:	00400ea5 	.word	0x00400ea5
  401384:	20000db4 	.word	0x20000db4

00401388 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  401388:	b580      	push	{r7, lr}
  40138a:	b082      	sub	sp, #8
  40138c:	af00      	add	r7, sp, #0
  40138e:	4603      	mov	r3, r0
  401390:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401392:	79fb      	ldrb	r3, [r7, #7]
  401394:	4618      	mov	r0, r3
  401396:	4b08      	ldr	r3, [pc, #32]	; (4013b8 <sd_mmc_get_capacity+0x30>)
  401398:	4798      	blx	r3
  40139a:	4603      	mov	r3, r0
  40139c:	2b00      	cmp	r3, #0
  40139e:	d001      	beq.n	4013a4 <sd_mmc_get_capacity+0x1c>
		return 0;
  4013a0:	2300      	movs	r3, #0
  4013a2:	e004      	b.n	4013ae <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
  4013a4:	4b05      	ldr	r3, [pc, #20]	; (4013bc <sd_mmc_get_capacity+0x34>)
  4013a6:	4798      	blx	r3
	return sd_mmc_card->capacity;
  4013a8:	4b05      	ldr	r3, [pc, #20]	; (4013c0 <sd_mmc_get_capacity+0x38>)
  4013aa:	681b      	ldr	r3, [r3, #0]
  4013ac:	685b      	ldr	r3, [r3, #4]
}
  4013ae:	4618      	mov	r0, r3
  4013b0:	3708      	adds	r7, #8
  4013b2:	46bd      	mov	sp, r7
  4013b4:	bd80      	pop	{r7, pc}
  4013b6:	bf00      	nop
  4013b8:	00400cd9 	.word	0x00400cd9
  4013bc:	00400ea5 	.word	0x00400ea5
  4013c0:	20000db4 	.word	0x20000db4

004013c4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	4603      	mov	r3, r0
  4013cc:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
  4013ce:	2300      	movs	r3, #0
}
  4013d0:	4618      	mov	r0, r3
  4013d2:	370c      	adds	r7, #12
  4013d4:	46bd      	mov	sp, r7
  4013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013da:	4770      	bx	lr

004013dc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  4013dc:	b590      	push	{r4, r7, lr}
  4013de:	b089      	sub	sp, #36	; 0x24
  4013e0:	af02      	add	r7, sp, #8
  4013e2:	6039      	str	r1, [r7, #0]
  4013e4:	4613      	mov	r3, r2
  4013e6:	4602      	mov	r2, r0
  4013e8:	71fa      	strb	r2, [r7, #7]
  4013ea:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4013ec:	79fb      	ldrb	r3, [r7, #7]
  4013ee:	4618      	mov	r0, r3
  4013f0:	4b29      	ldr	r3, [pc, #164]	; (401498 <sd_mmc_init_read_blocks+0xbc>)
  4013f2:	4798      	blx	r3
  4013f4:	4603      	mov	r3, r0
  4013f6:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  4013f8:	7bfb      	ldrb	r3, [r7, #15]
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d001      	beq.n	401402 <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
  4013fe:	7bfb      	ldrb	r3, [r7, #15]
  401400:	e046      	b.n	401490 <sd_mmc_init_read_blocks+0xb4>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  401402:	4b26      	ldr	r3, [pc, #152]	; (40149c <sd_mmc_init_read_blocks+0xc0>)
  401404:	4798      	blx	r3
  401406:	4603      	mov	r3, r0
  401408:	f083 0301 	eor.w	r3, r3, #1
  40140c:	b2db      	uxtb	r3, r3
  40140e:	2b00      	cmp	r3, #0
  401410:	d003      	beq.n	40141a <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
  401412:	4b23      	ldr	r3, [pc, #140]	; (4014a0 <sd_mmc_init_read_blocks+0xc4>)
  401414:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  401416:	2305      	movs	r3, #5
  401418:	e03a      	b.n	401490 <sd_mmc_init_read_blocks+0xb4>
	}

	if (nb_block > 1) {
  40141a:	88bb      	ldrh	r3, [r7, #4]
  40141c:	2b01      	cmp	r3, #1
  40141e:	d902      	bls.n	401426 <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  401420:	4b20      	ldr	r3, [pc, #128]	; (4014a4 <sd_mmc_init_read_blocks+0xc8>)
  401422:	617b      	str	r3, [r7, #20]
  401424:	e001      	b.n	40142a <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  401426:	4b20      	ldr	r3, [pc, #128]	; (4014a8 <sd_mmc_init_read_blocks+0xcc>)
  401428:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40142a:	4b20      	ldr	r3, [pc, #128]	; (4014ac <sd_mmc_init_read_blocks+0xd0>)
  40142c:	681b      	ldr	r3, [r3, #0]
  40142e:	7bdb      	ldrb	r3, [r3, #15]
  401430:	f003 0308 	and.w	r3, r3, #8
  401434:	2b00      	cmp	r3, #0
  401436:	d002      	beq.n	40143e <sd_mmc_init_read_blocks+0x62>
		arg = start;
  401438:	683b      	ldr	r3, [r7, #0]
  40143a:	613b      	str	r3, [r7, #16]
  40143c:	e002      	b.n	401444 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  40143e:	683b      	ldr	r3, [r7, #0]
  401440:	025b      	lsls	r3, r3, #9
  401442:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  401444:	88bb      	ldrh	r3, [r7, #4]
  401446:	2201      	movs	r2, #1
  401448:	9200      	str	r2, [sp, #0]
  40144a:	6978      	ldr	r0, [r7, #20]
  40144c:	6939      	ldr	r1, [r7, #16]
  40144e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401452:	4c17      	ldr	r4, [pc, #92]	; (4014b0 <sd_mmc_init_read_blocks+0xd4>)
  401454:	47a0      	blx	r4
  401456:	4603      	mov	r3, r0
  401458:	f083 0301 	eor.w	r3, r3, #1
  40145c:	b2db      	uxtb	r3, r3
  40145e:	2b00      	cmp	r3, #0
  401460:	d003      	beq.n	40146a <sd_mmc_init_read_blocks+0x8e>
		sd_mmc_deselect_slot();
  401462:	4b0f      	ldr	r3, [pc, #60]	; (4014a0 <sd_mmc_init_read_blocks+0xc4>)
  401464:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  401466:	2305      	movs	r3, #5
  401468:	e012      	b.n	401490 <sd_mmc_init_read_blocks+0xb4>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  40146a:	4b12      	ldr	r3, [pc, #72]	; (4014b4 <sd_mmc_init_read_blocks+0xd8>)
  40146c:	4798      	blx	r3
  40146e:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  401470:	68ba      	ldr	r2, [r7, #8]
  401472:	4b11      	ldr	r3, [pc, #68]	; (4014b8 <sd_mmc_init_read_blocks+0xdc>)
  401474:	4013      	ands	r3, r2
  401476:	2b00      	cmp	r3, #0
  401478:	d003      	beq.n	401482 <sd_mmc_init_read_blocks+0xa6>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  40147a:	4b09      	ldr	r3, [pc, #36]	; (4014a0 <sd_mmc_init_read_blocks+0xc4>)
  40147c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  40147e:	2305      	movs	r3, #5
  401480:	e006      	b.n	401490 <sd_mmc_init_read_blocks+0xb4>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  401482:	4b0e      	ldr	r3, [pc, #56]	; (4014bc <sd_mmc_init_read_blocks+0xe0>)
  401484:	88ba      	ldrh	r2, [r7, #4]
  401486:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  401488:	4b0d      	ldr	r3, [pc, #52]	; (4014c0 <sd_mmc_init_read_blocks+0xe4>)
  40148a:	88ba      	ldrh	r2, [r7, #4]
  40148c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  40148e:	2300      	movs	r3, #0
}
  401490:	4618      	mov	r0, r3
  401492:	371c      	adds	r7, #28
  401494:	46bd      	mov	sp, r7
  401496:	bd90      	pop	{r4, r7, pc}
  401498:	00400cd9 	.word	0x00400cd9
  40149c:	00400b19 	.word	0x00400b19
  4014a0:	00400ea5 	.word	0x00400ea5
  4014a4:	00101112 	.word	0x00101112
  4014a8:	00081111 	.word	0x00081111
  4014ac:	20000db4 	.word	0x20000db4
  4014b0:	004021c5 	.word	0x004021c5
  4014b4:	00402145 	.word	0x00402145
  4014b8:	e4580000 	.word	0xe4580000
  4014bc:	20000dba 	.word	0x20000dba
  4014c0:	20000db8 	.word	0x20000db8

004014c4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  4014c4:	b580      	push	{r7, lr}
  4014c6:	b082      	sub	sp, #8
  4014c8:	af00      	add	r7, sp, #0
  4014ca:	6078      	str	r0, [r7, #4]
  4014cc:	460b      	mov	r3, r1
  4014ce:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  4014d0:	887b      	ldrh	r3, [r7, #2]
  4014d2:	6878      	ldr	r0, [r7, #4]
  4014d4:	4619      	mov	r1, r3
  4014d6:	4b0c      	ldr	r3, [pc, #48]	; (401508 <sd_mmc_start_read_blocks+0x44>)
  4014d8:	4798      	blx	r3
  4014da:	4603      	mov	r3, r0
  4014dc:	f083 0301 	eor.w	r3, r3, #1
  4014e0:	b2db      	uxtb	r3, r3
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d004      	beq.n	4014f0 <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4014e6:	4b09      	ldr	r3, [pc, #36]	; (40150c <sd_mmc_start_read_blocks+0x48>)
  4014e8:	2200      	movs	r2, #0
  4014ea:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4014ec:	2305      	movs	r3, #5
  4014ee:	e007      	b.n	401500 <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <sd_mmc_start_read_blocks+0x48>)
  4014f2:	881a      	ldrh	r2, [r3, #0]
  4014f4:	887b      	ldrh	r3, [r7, #2]
  4014f6:	1ad3      	subs	r3, r2, r3
  4014f8:	b29a      	uxth	r2, r3
  4014fa:	4b04      	ldr	r3, [pc, #16]	; (40150c <sd_mmc_start_read_blocks+0x48>)
  4014fc:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  4014fe:	2300      	movs	r3, #0
}
  401500:	4618      	mov	r0, r3
  401502:	3708      	adds	r7, #8
  401504:	46bd      	mov	sp, r7
  401506:	bd80      	pop	{r7, pc}
  401508:	00402395 	.word	0x00402395
  40150c:	20000dba 	.word	0x20000dba

00401510 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  401510:	b580      	push	{r7, lr}
  401512:	b082      	sub	sp, #8
  401514:	af00      	add	r7, sp, #0
  401516:	4603      	mov	r3, r0
  401518:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
  40151a:	4b1b      	ldr	r3, [pc, #108]	; (401588 <sd_mmc_wait_end_of_read_blocks+0x78>)
  40151c:	4798      	blx	r3
  40151e:	4603      	mov	r3, r0
  401520:	f083 0301 	eor.w	r3, r3, #1
  401524:	b2db      	uxtb	r3, r3
  401526:	2b00      	cmp	r3, #0
  401528:	d001      	beq.n	40152e <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  40152a:	2305      	movs	r3, #5
  40152c:	e027      	b.n	40157e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
  40152e:	79fb      	ldrb	r3, [r7, #7]
  401530:	2b00      	cmp	r3, #0
  401532:	d003      	beq.n	40153c <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  401534:	4b15      	ldr	r3, [pc, #84]	; (40158c <sd_mmc_wait_end_of_read_blocks+0x7c>)
  401536:	2200      	movs	r2, #0
  401538:	801a      	strh	r2, [r3, #0]
  40153a:	e005      	b.n	401548 <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  40153c:	4b13      	ldr	r3, [pc, #76]	; (40158c <sd_mmc_wait_end_of_read_blocks+0x7c>)
  40153e:	881b      	ldrh	r3, [r3, #0]
  401540:	2b00      	cmp	r3, #0
  401542:	d001      	beq.n	401548 <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
  401544:	2300      	movs	r3, #0
  401546:	e01a      	b.n	40157e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  401548:	4b11      	ldr	r3, [pc, #68]	; (401590 <sd_mmc_wait_end_of_read_blocks+0x80>)
  40154a:	881b      	ldrh	r3, [r3, #0]
  40154c:	2b01      	cmp	r3, #1
  40154e:	d103      	bne.n	401558 <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  401550:	4b10      	ldr	r3, [pc, #64]	; (401594 <sd_mmc_wait_end_of_read_blocks+0x84>)
  401552:	4798      	blx	r3
		return SD_MMC_OK;
  401554:	2300      	movs	r3, #0
  401556:	e012      	b.n	40157e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401558:	f243 100c 	movw	r0, #12556	; 0x310c
  40155c:	2100      	movs	r1, #0
  40155e:	4b0e      	ldr	r3, [pc, #56]	; (401598 <sd_mmc_wait_end_of_read_blocks+0x88>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
  401564:	f083 0301 	eor.w	r3, r3, #1
  401568:	b2db      	uxtb	r3, r3
  40156a:	2b00      	cmp	r3, #0
  40156c:	d004      	beq.n	401578 <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  40156e:	f243 100c 	movw	r0, #12556	; 0x310c
  401572:	2100      	movs	r1, #0
  401574:	4b08      	ldr	r3, [pc, #32]	; (401598 <sd_mmc_wait_end_of_read_blocks+0x88>)
  401576:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  401578:	4b06      	ldr	r3, [pc, #24]	; (401594 <sd_mmc_wait_end_of_read_blocks+0x84>)
  40157a:	4798      	blx	r3
	return SD_MMC_OK;
  40157c:	2300      	movs	r3, #0
}
  40157e:	4618      	mov	r0, r3
  401580:	3708      	adds	r7, #8
  401582:	46bd      	mov	sp, r7
  401584:	bd80      	pop	{r7, pc}
  401586:	bf00      	nop
  401588:	00402445 	.word	0x00402445
  40158c:	20000dba 	.word	0x20000dba
  401590:	20000db8 	.word	0x20000db8
  401594:	00400ea5 	.word	0x00400ea5
  401598:	004020f9 	.word	0x004020f9

0040159c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  40159c:	b590      	push	{r4, r7, lr}
  40159e:	b089      	sub	sp, #36	; 0x24
  4015a0:	af02      	add	r7, sp, #8
  4015a2:	6039      	str	r1, [r7, #0]
  4015a4:	4613      	mov	r3, r2
  4015a6:	4602      	mov	r2, r0
  4015a8:	71fa      	strb	r2, [r7, #7]
  4015aa:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4015ac:	79fb      	ldrb	r3, [r7, #7]
  4015ae:	4618      	mov	r0, r3
  4015b0:	4b29      	ldr	r3, [pc, #164]	; (401658 <sd_mmc_init_write_blocks+0xbc>)
  4015b2:	4798      	blx	r3
  4015b4:	4603      	mov	r3, r0
  4015b6:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  4015b8:	7bfb      	ldrb	r3, [r7, #15]
  4015ba:	2b00      	cmp	r3, #0
  4015bc:	d001      	beq.n	4015c2 <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
  4015be:	7bfb      	ldrb	r3, [r7, #15]
  4015c0:	e045      	b.n	40164e <sd_mmc_init_write_blocks+0xb2>
	}
	if (sd_mmc_is_write_protected(slot)) {
  4015c2:	79fb      	ldrb	r3, [r7, #7]
  4015c4:	4618      	mov	r0, r3
  4015c6:	4b25      	ldr	r3, [pc, #148]	; (40165c <sd_mmc_init_write_blocks+0xc0>)
  4015c8:	4798      	blx	r3
  4015ca:	4603      	mov	r3, r0
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d003      	beq.n	4015d8 <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
  4015d0:	4b23      	ldr	r3, [pc, #140]	; (401660 <sd_mmc_init_write_blocks+0xc4>)
  4015d2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  4015d4:	2307      	movs	r3, #7
  4015d6:	e03a      	b.n	40164e <sd_mmc_init_write_blocks+0xb2>
	}

	if (nb_block > 1) {
  4015d8:	88bb      	ldrh	r3, [r7, #4]
  4015da:	2b01      	cmp	r3, #1
  4015dc:	d902      	bls.n	4015e4 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  4015de:	4b21      	ldr	r3, [pc, #132]	; (401664 <sd_mmc_init_write_blocks+0xc8>)
  4015e0:	617b      	str	r3, [r7, #20]
  4015e2:	e001      	b.n	4015e8 <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  4015e4:	4b20      	ldr	r3, [pc, #128]	; (401668 <sd_mmc_init_write_blocks+0xcc>)
  4015e6:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4015e8:	4b20      	ldr	r3, [pc, #128]	; (40166c <sd_mmc_init_write_blocks+0xd0>)
  4015ea:	681b      	ldr	r3, [r3, #0]
  4015ec:	7bdb      	ldrb	r3, [r3, #15]
  4015ee:	f003 0308 	and.w	r3, r3, #8
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	d002      	beq.n	4015fc <sd_mmc_init_write_blocks+0x60>
		arg = start;
  4015f6:	683b      	ldr	r3, [r7, #0]
  4015f8:	613b      	str	r3, [r7, #16]
  4015fa:	e002      	b.n	401602 <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  4015fc:	683b      	ldr	r3, [r7, #0]
  4015fe:	025b      	lsls	r3, r3, #9
  401600:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  401602:	88bb      	ldrh	r3, [r7, #4]
  401604:	2201      	movs	r2, #1
  401606:	9200      	str	r2, [sp, #0]
  401608:	6978      	ldr	r0, [r7, #20]
  40160a:	6939      	ldr	r1, [r7, #16]
  40160c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401610:	4c17      	ldr	r4, [pc, #92]	; (401670 <sd_mmc_init_write_blocks+0xd4>)
  401612:	47a0      	blx	r4
  401614:	4603      	mov	r3, r0
  401616:	f083 0301 	eor.w	r3, r3, #1
  40161a:	b2db      	uxtb	r3, r3
  40161c:	2b00      	cmp	r3, #0
  40161e:	d003      	beq.n	401628 <sd_mmc_init_write_blocks+0x8c>
		sd_mmc_deselect_slot();
  401620:	4b0f      	ldr	r3, [pc, #60]	; (401660 <sd_mmc_init_write_blocks+0xc4>)
  401622:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  401624:	2305      	movs	r3, #5
  401626:	e012      	b.n	40164e <sd_mmc_init_write_blocks+0xb2>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  401628:	4b12      	ldr	r3, [pc, #72]	; (401674 <sd_mmc_init_write_blocks+0xd8>)
  40162a:	4798      	blx	r3
  40162c:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40162e:	68ba      	ldr	r2, [r7, #8]
  401630:	4b11      	ldr	r3, [pc, #68]	; (401678 <sd_mmc_init_write_blocks+0xdc>)
  401632:	4013      	ands	r3, r2
  401634:	2b00      	cmp	r3, #0
  401636:	d003      	beq.n	401640 <sd_mmc_init_write_blocks+0xa4>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  401638:	4b09      	ldr	r3, [pc, #36]	; (401660 <sd_mmc_init_write_blocks+0xc4>)
  40163a:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  40163c:	2305      	movs	r3, #5
  40163e:	e006      	b.n	40164e <sd_mmc_init_write_blocks+0xb2>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  401640:	4b0e      	ldr	r3, [pc, #56]	; (40167c <sd_mmc_init_write_blocks+0xe0>)
  401642:	88ba      	ldrh	r2, [r7, #4]
  401644:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  401646:	4b0e      	ldr	r3, [pc, #56]	; (401680 <sd_mmc_init_write_blocks+0xe4>)
  401648:	88ba      	ldrh	r2, [r7, #4]
  40164a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  40164c:	2300      	movs	r3, #0
}
  40164e:	4618      	mov	r0, r3
  401650:	371c      	adds	r7, #28
  401652:	46bd      	mov	sp, r7
  401654:	bd90      	pop	{r4, r7, pc}
  401656:	bf00      	nop
  401658:	00400cd9 	.word	0x00400cd9
  40165c:	004013c5 	.word	0x004013c5
  401660:	00400ea5 	.word	0x00400ea5
  401664:	00109119 	.word	0x00109119
  401668:	00089118 	.word	0x00089118
  40166c:	20000db4 	.word	0x20000db4
  401670:	004021c5 	.word	0x004021c5
  401674:	00402145 	.word	0x00402145
  401678:	e4580000 	.word	0xe4580000
  40167c:	20000dba 	.word	0x20000dba
  401680:	20000db8 	.word	0x20000db8

00401684 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  401684:	b580      	push	{r7, lr}
  401686:	b082      	sub	sp, #8
  401688:	af00      	add	r7, sp, #0
  40168a:	6078      	str	r0, [r7, #4]
  40168c:	460b      	mov	r3, r1
  40168e:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  401690:	887b      	ldrh	r3, [r7, #2]
  401692:	6878      	ldr	r0, [r7, #4]
  401694:	4619      	mov	r1, r3
  401696:	4b0c      	ldr	r3, [pc, #48]	; (4016c8 <sd_mmc_start_write_blocks+0x44>)
  401698:	4798      	blx	r3
  40169a:	4603      	mov	r3, r0
  40169c:	f083 0301 	eor.w	r3, r3, #1
  4016a0:	b2db      	uxtb	r3, r3
  4016a2:	2b00      	cmp	r3, #0
  4016a4:	d004      	beq.n	4016b0 <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4016a6:	4b09      	ldr	r3, [pc, #36]	; (4016cc <sd_mmc_start_write_blocks+0x48>)
  4016a8:	2200      	movs	r2, #0
  4016aa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4016ac:	2305      	movs	r3, #5
  4016ae:	e007      	b.n	4016c0 <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4016b0:	4b06      	ldr	r3, [pc, #24]	; (4016cc <sd_mmc_start_write_blocks+0x48>)
  4016b2:	881a      	ldrh	r2, [r3, #0]
  4016b4:	887b      	ldrh	r3, [r7, #2]
  4016b6:	1ad3      	subs	r3, r2, r3
  4016b8:	b29a      	uxth	r2, r3
  4016ba:	4b04      	ldr	r3, [pc, #16]	; (4016cc <sd_mmc_start_write_blocks+0x48>)
  4016bc:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  4016be:	2300      	movs	r3, #0
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	3708      	adds	r7, #8
  4016c4:	46bd      	mov	sp, r7
  4016c6:	bd80      	pop	{r7, pc}
  4016c8:	004024d5 	.word	0x004024d5
  4016cc:	20000dba 	.word	0x20000dba

004016d0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  4016d0:	b580      	push	{r7, lr}
  4016d2:	b082      	sub	sp, #8
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	4603      	mov	r3, r0
  4016d8:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
  4016da:	4b1a      	ldr	r3, [pc, #104]	; (401744 <sd_mmc_wait_end_of_write_blocks+0x74>)
  4016dc:	4798      	blx	r3
  4016de:	4603      	mov	r3, r0
  4016e0:	f083 0301 	eor.w	r3, r3, #1
  4016e4:	b2db      	uxtb	r3, r3
  4016e6:	2b00      	cmp	r3, #0
  4016e8:	d001      	beq.n	4016ee <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  4016ea:	2305      	movs	r3, #5
  4016ec:	e026      	b.n	40173c <sd_mmc_wait_end_of_write_blocks+0x6c>
	}
	if (abort) {
  4016ee:	79fb      	ldrb	r3, [r7, #7]
  4016f0:	2b00      	cmp	r3, #0
  4016f2:	d003      	beq.n	4016fc <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4016f4:	4b14      	ldr	r3, [pc, #80]	; (401748 <sd_mmc_wait_end_of_write_blocks+0x78>)
  4016f6:	2200      	movs	r2, #0
  4016f8:	801a      	strh	r2, [r3, #0]
  4016fa:	e005      	b.n	401708 <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  4016fc:	4b12      	ldr	r3, [pc, #72]	; (401748 <sd_mmc_wait_end_of_write_blocks+0x78>)
  4016fe:	881b      	ldrh	r3, [r3, #0]
  401700:	2b00      	cmp	r3, #0
  401702:	d001      	beq.n	401708 <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
  401704:	2300      	movs	r3, #0
  401706:	e019      	b.n	40173c <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  401708:	4b10      	ldr	r3, [pc, #64]	; (40174c <sd_mmc_wait_end_of_write_blocks+0x7c>)
  40170a:	881b      	ldrh	r3, [r3, #0]
  40170c:	2b01      	cmp	r3, #1
  40170e:	d103      	bne.n	401718 <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  401710:	4b0f      	ldr	r3, [pc, #60]	; (401750 <sd_mmc_wait_end_of_write_blocks+0x80>)
  401712:	4798      	blx	r3
		return SD_MMC_OK;
  401714:	2300      	movs	r3, #0
  401716:	e011      	b.n	40173c <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401718:	f243 100c 	movw	r0, #12556	; 0x310c
  40171c:	2100      	movs	r1, #0
  40171e:	4b0d      	ldr	r3, [pc, #52]	; (401754 <sd_mmc_wait_end_of_write_blocks+0x84>)
  401720:	4798      	blx	r3
  401722:	4603      	mov	r3, r0
  401724:	f083 0301 	eor.w	r3, r3, #1
  401728:	b2db      	uxtb	r3, r3
  40172a:	2b00      	cmp	r3, #0
  40172c:	d003      	beq.n	401736 <sd_mmc_wait_end_of_write_blocks+0x66>
			sd_mmc_deselect_slot();
  40172e:	4b08      	ldr	r3, [pc, #32]	; (401750 <sd_mmc_wait_end_of_write_blocks+0x80>)
  401730:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  401732:	2305      	movs	r3, #5
  401734:	e002      	b.n	40173c <sd_mmc_wait_end_of_write_blocks+0x6c>
		}
	}
	sd_mmc_deselect_slot();
  401736:	4b06      	ldr	r3, [pc, #24]	; (401750 <sd_mmc_wait_end_of_write_blocks+0x80>)
  401738:	4798      	blx	r3
	return SD_MMC_OK;
  40173a:	2300      	movs	r3, #0
}
  40173c:	4618      	mov	r0, r3
  40173e:	3708      	adds	r7, #8
  401740:	46bd      	mov	sp, r7
  401742:	bd80      	pop	{r7, pc}
  401744:	00402585 	.word	0x00402585
  401748:	20000dba 	.word	0x20000dba
  40174c:	20000db8 	.word	0x20000db8
  401750:	00400ea5 	.word	0x00400ea5
  401754:	004020f9 	.word	0x004020f9

00401758 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  401758:	b580      	push	{r7, lr}
  40175a:	b082      	sub	sp, #8
  40175c:	af00      	add	r7, sp, #0
  40175e:	4603      	mov	r3, r0
  401760:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  401762:	79fb      	ldrb	r3, [r7, #7]
  401764:	4618      	mov	r0, r3
  401766:	4b15      	ldr	r3, [pc, #84]	; (4017bc <sd_mmc_test_unit_ready+0x64>)
  401768:	4798      	blx	r3
  40176a:	4603      	mov	r3, r0
  40176c:	2b01      	cmp	r3, #1
  40176e:	d017      	beq.n	4017a0 <sd_mmc_test_unit_ready+0x48>
  401770:	2b02      	cmp	r3, #2
  401772:	d017      	beq.n	4017a4 <sd_mmc_test_unit_ready+0x4c>
  401774:	2b00      	cmp	r3, #0
  401776:	d11b      	bne.n	4017b0 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  401778:	79fb      	ldrb	r3, [r7, #7]
  40177a:	4a11      	ldr	r2, [pc, #68]	; (4017c0 <sd_mmc_test_unit_ready+0x68>)
  40177c:	5cd3      	ldrb	r3, [r2, r3]
  40177e:	2b00      	cmp	r3, #0
  401780:	d001      	beq.n	401786 <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  401782:	2302      	movs	r3, #2
  401784:	e015      	b.n	4017b2 <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  401786:	79fb      	ldrb	r3, [r7, #7]
  401788:	4618      	mov	r0, r3
  40178a:	4b0e      	ldr	r3, [pc, #56]	; (4017c4 <sd_mmc_test_unit_ready+0x6c>)
  40178c:	4798      	blx	r3
  40178e:	4603      	mov	r3, r0
  401790:	f003 0303 	and.w	r3, r3, #3
  401794:	2b00      	cmp	r3, #0
  401796:	d001      	beq.n	40179c <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  401798:	2300      	movs	r3, #0
  40179a:	e00a      	b.n	4017b2 <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  40179c:	2302      	movs	r3, #2
  40179e:	e008      	b.n	4017b2 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  4017a0:	2303      	movs	r3, #3
  4017a2:	e006      	b.n	4017b2 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  4017a4:	79fb      	ldrb	r3, [r7, #7]
  4017a6:	4a06      	ldr	r2, [pc, #24]	; (4017c0 <sd_mmc_test_unit_ready+0x68>)
  4017a8:	2100      	movs	r1, #0
  4017aa:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  4017ac:	2302      	movs	r3, #2
  4017ae:	e000      	b.n	4017b2 <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  4017b0:	2301      	movs	r3, #1
	}
}
  4017b2:	4618      	mov	r0, r3
  4017b4:	3708      	adds	r7, #8
  4017b6:	46bd      	mov	sp, r7
  4017b8:	bd80      	pop	{r7, pc}
  4017ba:	bf00      	nop
  4017bc:	004012e9 	.word	0x004012e9
  4017c0:	20000dc0 	.word	0x20000dc0
  4017c4:	0040134d 	.word	0x0040134d

004017c8 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  4017c8:	b580      	push	{r7, lr}
  4017ca:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
  4017cc:	2000      	movs	r0, #0
  4017ce:	4b02      	ldr	r3, [pc, #8]	; (4017d8 <sd_mmc_test_unit_ready_0+0x10>)
  4017d0:	4798      	blx	r3
  4017d2:	4603      	mov	r3, r0
}
  4017d4:	4618      	mov	r0, r3
  4017d6:	bd80      	pop	{r7, pc}
  4017d8:	00401759 	.word	0x00401759

004017dc <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  4017dc:	b580      	push	{r7, lr}
  4017de:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
  4017e0:	2001      	movs	r0, #1
  4017e2:	4b02      	ldr	r3, [pc, #8]	; (4017ec <sd_mmc_test_unit_ready_1+0x10>)
  4017e4:	4798      	blx	r3
  4017e6:	4603      	mov	r3, r0
}
  4017e8:	4618      	mov	r0, r3
  4017ea:	bd80      	pop	{r7, pc}
  4017ec:	00401759 	.word	0x00401759

004017f0 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  4017f0:	b580      	push	{r7, lr}
  4017f2:	b082      	sub	sp, #8
  4017f4:	af00      	add	r7, sp, #0
  4017f6:	4603      	mov	r3, r0
  4017f8:	6039      	str	r1, [r7, #0]
  4017fa:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  4017fc:	79fb      	ldrb	r3, [r7, #7]
  4017fe:	4618      	mov	r0, r3
  401800:	4b07      	ldr	r3, [pc, #28]	; (401820 <sd_mmc_read_capacity+0x30>)
  401802:	4798      	blx	r3
  401804:	4603      	mov	r3, r0
  401806:	005b      	lsls	r3, r3, #1
  401808:	1e5a      	subs	r2, r3, #1
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
  40180e:	79fb      	ldrb	r3, [r7, #7]
  401810:	4618      	mov	r0, r3
  401812:	4b04      	ldr	r3, [pc, #16]	; (401824 <sd_mmc_read_capacity+0x34>)
  401814:	4798      	blx	r3
  401816:	4603      	mov	r3, r0
}
  401818:	4618      	mov	r0, r3
  40181a:	3708      	adds	r7, #8
  40181c:	46bd      	mov	sp, r7
  40181e:	bd80      	pop	{r7, pc}
  401820:	00401389 	.word	0x00401389
  401824:	00401759 	.word	0x00401759

00401828 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401828:	b580      	push	{r7, lr}
  40182a:	b082      	sub	sp, #8
  40182c:	af00      	add	r7, sp, #0
  40182e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
  401830:	2000      	movs	r0, #0
  401832:	6879      	ldr	r1, [r7, #4]
  401834:	4b03      	ldr	r3, [pc, #12]	; (401844 <sd_mmc_read_capacity_0+0x1c>)
  401836:	4798      	blx	r3
  401838:	4603      	mov	r3, r0
}
  40183a:	4618      	mov	r0, r3
  40183c:	3708      	adds	r7, #8
  40183e:	46bd      	mov	sp, r7
  401840:	bd80      	pop	{r7, pc}
  401842:	bf00      	nop
  401844:	004017f1 	.word	0x004017f1

00401848 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  401848:	b580      	push	{r7, lr}
  40184a:	b082      	sub	sp, #8
  40184c:	af00      	add	r7, sp, #0
  40184e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
  401850:	2001      	movs	r0, #1
  401852:	6879      	ldr	r1, [r7, #4]
  401854:	4b03      	ldr	r3, [pc, #12]	; (401864 <sd_mmc_read_capacity_1+0x1c>)
  401856:	4798      	blx	r3
  401858:	4603      	mov	r3, r0
}
  40185a:	4618      	mov	r0, r3
  40185c:	3708      	adds	r7, #8
  40185e:	46bd      	mov	sp, r7
  401860:	bd80      	pop	{r7, pc}
  401862:	bf00      	nop
  401864:	004017f1 	.word	0x004017f1

00401868 <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
  401868:	b480      	push	{r7}
  40186a:	b083      	sub	sp, #12
  40186c:	af00      	add	r7, sp, #0
  40186e:	4602      	mov	r2, r0
  401870:	460b      	mov	r3, r1
  401872:	71fa      	strb	r2, [r7, #7]
  401874:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
  401876:	79fb      	ldrb	r3, [r7, #7]
  401878:	4a04      	ldr	r2, [pc, #16]	; (40188c <sd_mmc_unload+0x24>)
  40187a:	79b9      	ldrb	r1, [r7, #6]
  40187c:	54d1      	strb	r1, [r2, r3]
	return true;
  40187e:	2301      	movs	r3, #1
}
  401880:	4618      	mov	r0, r3
  401882:	370c      	adds	r7, #12
  401884:	46bd      	mov	sp, r7
  401886:	f85d 7b04 	ldr.w	r7, [sp], #4
  40188a:	4770      	bx	lr
  40188c:	20000dc0 	.word	0x20000dc0

00401890 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
  401890:	b580      	push	{r7, lr}
  401892:	b082      	sub	sp, #8
  401894:	af00      	add	r7, sp, #0
  401896:	4603      	mov	r3, r0
  401898:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
  40189a:	79fb      	ldrb	r3, [r7, #7]
  40189c:	2000      	movs	r0, #0
  40189e:	4619      	mov	r1, r3
  4018a0:	4b03      	ldr	r3, [pc, #12]	; (4018b0 <sd_mmc_unload_0+0x20>)
  4018a2:	4798      	blx	r3
  4018a4:	4603      	mov	r3, r0
}
  4018a6:	4618      	mov	r0, r3
  4018a8:	3708      	adds	r7, #8
  4018aa:	46bd      	mov	sp, r7
  4018ac:	bd80      	pop	{r7, pc}
  4018ae:	bf00      	nop
  4018b0:	00401869 	.word	0x00401869

004018b4 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
  4018b4:	b580      	push	{r7, lr}
  4018b6:	b082      	sub	sp, #8
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	4603      	mov	r3, r0
  4018bc:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(1, unload);
  4018be:	79fb      	ldrb	r3, [r7, #7]
  4018c0:	2001      	movs	r0, #1
  4018c2:	4619      	mov	r1, r3
  4018c4:	4b03      	ldr	r3, [pc, #12]	; (4018d4 <sd_mmc_unload_1+0x20>)
  4018c6:	4798      	blx	r3
  4018c8:	4603      	mov	r3, r0
}
  4018ca:	4618      	mov	r0, r3
  4018cc:	3708      	adds	r7, #8
  4018ce:	46bd      	mov	sp, r7
  4018d0:	bd80      	pop	{r7, pc}
  4018d2:	bf00      	nop
  4018d4:	00401869 	.word	0x00401869

004018d8 <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
  4018d8:	b580      	push	{r7, lr}
  4018da:	b082      	sub	sp, #8
  4018dc:	af00      	add	r7, sp, #0
  4018de:	4603      	mov	r3, r0
  4018e0:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
  4018e2:	79fb      	ldrb	r3, [r7, #7]
  4018e4:	4618      	mov	r0, r3
  4018e6:	4b03      	ldr	r3, [pc, #12]	; (4018f4 <sd_mmc_wr_protect+0x1c>)
  4018e8:	4798      	blx	r3
  4018ea:	4603      	mov	r3, r0
}
  4018ec:	4618      	mov	r0, r3
  4018ee:	3708      	adds	r7, #8
  4018f0:	46bd      	mov	sp, r7
  4018f2:	bd80      	pop	{r7, pc}
  4018f4:	004013c5 	.word	0x004013c5

004018f8 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  4018f8:	b580      	push	{r7, lr}
  4018fa:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
  4018fc:	2000      	movs	r0, #0
  4018fe:	4b02      	ldr	r3, [pc, #8]	; (401908 <sd_mmc_wr_protect_0+0x10>)
  401900:	4798      	blx	r3
  401902:	4603      	mov	r3, r0
}
  401904:	4618      	mov	r0, r3
  401906:	bd80      	pop	{r7, pc}
  401908:	004018d9 	.word	0x004018d9

0040190c <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  40190c:	b580      	push	{r7, lr}
  40190e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
  401910:	2001      	movs	r0, #1
  401912:	4b02      	ldr	r3, [pc, #8]	; (40191c <sd_mmc_wr_protect_1+0x10>)
  401914:	4798      	blx	r3
  401916:	4603      	mov	r3, r0
}
  401918:	4618      	mov	r0, r3
  40191a:	bd80      	pop	{r7, pc}
  40191c:	004018d9 	.word	0x004018d9

00401920 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
  401920:	b480      	push	{r7}
  401922:	b083      	sub	sp, #12
  401924:	af00      	add	r7, sp, #0
  401926:	4603      	mov	r3, r0
  401928:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
  40192a:	2301      	movs	r3, #1
}
  40192c:	4618      	mov	r0, r3
  40192e:	370c      	adds	r7, #12
  401930:	46bd      	mov	sp, r7
  401932:	f85d 7b04 	ldr.w	r7, [sp], #4
  401936:	4770      	bx	lr

00401938 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
  401938:	b580      	push	{r7, lr}
  40193a:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
  40193c:	2000      	movs	r0, #0
  40193e:	4b02      	ldr	r3, [pc, #8]	; (401948 <sd_mmc_removal_0+0x10>)
  401940:	4798      	blx	r3
  401942:	4603      	mov	r3, r0
}
  401944:	4618      	mov	r0, r3
  401946:	bd80      	pop	{r7, pc}
  401948:	00401921 	.word	0x00401921

0040194c <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
  40194c:	b580      	push	{r7, lr}
  40194e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
  401950:	2001      	movs	r0, #1
  401952:	4b02      	ldr	r3, [pc, #8]	; (40195c <sd_mmc_removal_1+0x10>)
  401954:	4798      	blx	r3
  401956:	4603      	mov	r3, r0
}
  401958:	4618      	mov	r0, r3
  40195a:	bd80      	pop	{r7, pc}
  40195c:	00401921 	.word	0x00401921

00401960 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  401960:	b580      	push	{r7, lr}
  401962:	b084      	sub	sp, #16
  401964:	af00      	add	r7, sp, #0
  401966:	4603      	mov	r3, r0
  401968:	60b9      	str	r1, [r7, #8]
  40196a:	607a      	str	r2, [r7, #4]
  40196c:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  40196e:	7bfb      	ldrb	r3, [r7, #15]
  401970:	4618      	mov	r0, r3
  401972:	68b9      	ldr	r1, [r7, #8]
  401974:	2201      	movs	r2, #1
  401976:	4b11      	ldr	r3, [pc, #68]	; (4019bc <sd_mmc_mem_2_ram+0x5c>)
  401978:	4798      	blx	r3
  40197a:	4603      	mov	r3, r0
  40197c:	2b00      	cmp	r3, #0
  40197e:	d005      	beq.n	40198c <sd_mmc_mem_2_ram+0x2c>
  401980:	2b02      	cmp	r3, #2
  401982:	d101      	bne.n	401988 <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  401984:	2302      	movs	r3, #2
  401986:	e014      	b.n	4019b2 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
  401988:	2301      	movs	r3, #1
  40198a:	e012      	b.n	4019b2 <sd_mmc_mem_2_ram+0x52>
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  40198c:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  40198e:	6878      	ldr	r0, [r7, #4]
  401990:	2101      	movs	r1, #1
  401992:	4b0b      	ldr	r3, [pc, #44]	; (4019c0 <sd_mmc_mem_2_ram+0x60>)
  401994:	4798      	blx	r3
  401996:	4603      	mov	r3, r0
  401998:	2b00      	cmp	r3, #0
  40199a:	d001      	beq.n	4019a0 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
  40199c:	2301      	movs	r3, #1
  40199e:	e008      	b.n	4019b2 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4019a0:	2000      	movs	r0, #0
  4019a2:	4b08      	ldr	r3, [pc, #32]	; (4019c4 <sd_mmc_mem_2_ram+0x64>)
  4019a4:	4798      	blx	r3
  4019a6:	4603      	mov	r3, r0
  4019a8:	2b00      	cmp	r3, #0
  4019aa:	d001      	beq.n	4019b0 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
  4019ac:	2301      	movs	r3, #1
  4019ae:	e000      	b.n	4019b2 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
  4019b0:	2300      	movs	r3, #0
}
  4019b2:	4618      	mov	r0, r3
  4019b4:	3710      	adds	r7, #16
  4019b6:	46bd      	mov	sp, r7
  4019b8:	bd80      	pop	{r7, pc}
  4019ba:	bf00      	nop
  4019bc:	004013dd 	.word	0x004013dd
  4019c0:	004014c5 	.word	0x004014c5
  4019c4:	00401511 	.word	0x00401511

004019c8 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  4019c8:	b580      	push	{r7, lr}
  4019ca:	b082      	sub	sp, #8
  4019cc:	af00      	add	r7, sp, #0
  4019ce:	6078      	str	r0, [r7, #4]
  4019d0:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
  4019d2:	2000      	movs	r0, #0
  4019d4:	6879      	ldr	r1, [r7, #4]
  4019d6:	683a      	ldr	r2, [r7, #0]
  4019d8:	4b03      	ldr	r3, [pc, #12]	; (4019e8 <sd_mmc_mem_2_ram_0+0x20>)
  4019da:	4798      	blx	r3
  4019dc:	4603      	mov	r3, r0
}
  4019de:	4618      	mov	r0, r3
  4019e0:	3708      	adds	r7, #8
  4019e2:	46bd      	mov	sp, r7
  4019e4:	bd80      	pop	{r7, pc}
  4019e6:	bf00      	nop
  4019e8:	00401961 	.word	0x00401961

004019ec <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  4019ec:	b580      	push	{r7, lr}
  4019ee:	b082      	sub	sp, #8
  4019f0:	af00      	add	r7, sp, #0
  4019f2:	6078      	str	r0, [r7, #4]
  4019f4:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
  4019f6:	2001      	movs	r0, #1
  4019f8:	6879      	ldr	r1, [r7, #4]
  4019fa:	683a      	ldr	r2, [r7, #0]
  4019fc:	4b03      	ldr	r3, [pc, #12]	; (401a0c <sd_mmc_mem_2_ram_1+0x20>)
  4019fe:	4798      	blx	r3
  401a00:	4603      	mov	r3, r0
}
  401a02:	4618      	mov	r0, r3
  401a04:	3708      	adds	r7, #8
  401a06:	46bd      	mov	sp, r7
  401a08:	bd80      	pop	{r7, pc}
  401a0a:	bf00      	nop
  401a0c:	00401961 	.word	0x00401961

00401a10 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  401a10:	b580      	push	{r7, lr}
  401a12:	b084      	sub	sp, #16
  401a14:	af00      	add	r7, sp, #0
  401a16:	4603      	mov	r3, r0
  401a18:	60b9      	str	r1, [r7, #8]
  401a1a:	607a      	str	r2, [r7, #4]
  401a1c:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401a1e:	7bfb      	ldrb	r3, [r7, #15]
  401a20:	4618      	mov	r0, r3
  401a22:	68b9      	ldr	r1, [r7, #8]
  401a24:	2201      	movs	r2, #1
  401a26:	4b11      	ldr	r3, [pc, #68]	; (401a6c <sd_mmc_ram_2_mem+0x5c>)
  401a28:	4798      	blx	r3
  401a2a:	4603      	mov	r3, r0
  401a2c:	2b00      	cmp	r3, #0
  401a2e:	d005      	beq.n	401a3c <sd_mmc_ram_2_mem+0x2c>
  401a30:	2b02      	cmp	r3, #2
  401a32:	d101      	bne.n	401a38 <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  401a34:	2302      	movs	r3, #2
  401a36:	e014      	b.n	401a62 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
  401a38:	2301      	movs	r3, #1
  401a3a:	e012      	b.n	401a62 <sd_mmc_ram_2_mem+0x52>

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  401a3c:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401a3e:	6878      	ldr	r0, [r7, #4]
  401a40:	2101      	movs	r1, #1
  401a42:	4b0b      	ldr	r3, [pc, #44]	; (401a70 <sd_mmc_ram_2_mem+0x60>)
  401a44:	4798      	blx	r3
  401a46:	4603      	mov	r3, r0
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d001      	beq.n	401a50 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
  401a4c:	2301      	movs	r3, #1
  401a4e:	e008      	b.n	401a62 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401a50:	2000      	movs	r0, #0
  401a52:	4b08      	ldr	r3, [pc, #32]	; (401a74 <sd_mmc_ram_2_mem+0x64>)
  401a54:	4798      	blx	r3
  401a56:	4603      	mov	r3, r0
  401a58:	2b00      	cmp	r3, #0
  401a5a:	d001      	beq.n	401a60 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
  401a5c:	2301      	movs	r3, #1
  401a5e:	e000      	b.n	401a62 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
  401a60:	2300      	movs	r3, #0
}
  401a62:	4618      	mov	r0, r3
  401a64:	3710      	adds	r7, #16
  401a66:	46bd      	mov	sp, r7
  401a68:	bd80      	pop	{r7, pc}
  401a6a:	bf00      	nop
  401a6c:	0040159d 	.word	0x0040159d
  401a70:	00401685 	.word	0x00401685
  401a74:	004016d1 	.word	0x004016d1

00401a78 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401a78:	b580      	push	{r7, lr}
  401a7a:	b082      	sub	sp, #8
  401a7c:	af00      	add	r7, sp, #0
  401a7e:	6078      	str	r0, [r7, #4]
  401a80:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
  401a82:	2000      	movs	r0, #0
  401a84:	6879      	ldr	r1, [r7, #4]
  401a86:	683a      	ldr	r2, [r7, #0]
  401a88:	4b03      	ldr	r3, [pc, #12]	; (401a98 <sd_mmc_ram_2_mem_0+0x20>)
  401a8a:	4798      	blx	r3
  401a8c:	4603      	mov	r3, r0
}
  401a8e:	4618      	mov	r0, r3
  401a90:	3708      	adds	r7, #8
  401a92:	46bd      	mov	sp, r7
  401a94:	bd80      	pop	{r7, pc}
  401a96:	bf00      	nop
  401a98:	00401a11 	.word	0x00401a11

00401a9c <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	b082      	sub	sp, #8
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	6078      	str	r0, [r7, #4]
  401aa4:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
  401aa6:	2001      	movs	r0, #1
  401aa8:	6879      	ldr	r1, [r7, #4]
  401aaa:	683a      	ldr	r2, [r7, #0]
  401aac:	4b03      	ldr	r3, [pc, #12]	; (401abc <sd_mmc_ram_2_mem_1+0x20>)
  401aae:	4798      	blx	r3
  401ab0:	4603      	mov	r3, r0
}
  401ab2:	4618      	mov	r0, r3
  401ab4:	3708      	adds	r7, #8
  401ab6:	46bd      	mov	sp, r7
  401ab8:	bd80      	pop	{r7, pc}
  401aba:	bf00      	nop
  401abc:	00401a11 	.word	0x00401a11

00401ac0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  401ac0:	b580      	push	{r7, lr}
  401ac2:	b084      	sub	sp, #16
  401ac4:	af00      	add	r7, sp, #0
  401ac6:	4603      	mov	r3, r0
  401ac8:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401aca:	79fb      	ldrb	r3, [r7, #7]
  401acc:	2b01      	cmp	r3, #1
  401ace:	d807      	bhi.n	401ae0 <mem_test_unit_ready+0x20>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401ad0:	79fb      	ldrb	r3, [r7, #7]
  401ad2:	4a07      	ldr	r2, [pc, #28]	; (401af0 <mem_test_unit_ready+0x30>)
  401ad4:	015b      	lsls	r3, r3, #5
  401ad6:	4413      	add	r3, r2
  401ad8:	681b      	ldr	r3, [r3, #0]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401ada:	4798      	blx	r3
  401adc:	4603      	mov	r3, r0
  401ade:	e000      	b.n	401ae2 <mem_test_unit_ready+0x22>
  401ae0:	2301      	movs	r3, #1
  401ae2:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  401ae4:	7bfb      	ldrb	r3, [r7, #15]
}
  401ae6:	4618      	mov	r0, r3
  401ae8:	3710      	adds	r7, #16
  401aea:	46bd      	mov	sp, r7
  401aec:	bd80      	pop	{r7, pc}
  401aee:	bf00      	nop
  401af0:	00415f38 	.word	0x00415f38

00401af4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  401af4:	b580      	push	{r7, lr}
  401af6:	b084      	sub	sp, #16
  401af8:	af00      	add	r7, sp, #0
  401afa:	4603      	mov	r3, r0
  401afc:	6039      	str	r1, [r7, #0]
  401afe:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401b00:	79fb      	ldrb	r3, [r7, #7]
  401b02:	2b01      	cmp	r3, #1
  401b04:	d808      	bhi.n	401b18 <mem_read_capacity+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401b06:	79fb      	ldrb	r3, [r7, #7]
  401b08:	4a07      	ldr	r2, [pc, #28]	; (401b28 <mem_read_capacity+0x34>)
  401b0a:	015b      	lsls	r3, r3, #5
  401b0c:	4413      	add	r3, r2
  401b0e:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401b10:	6838      	ldr	r0, [r7, #0]
  401b12:	4798      	blx	r3
  401b14:	4603      	mov	r3, r0
  401b16:	e000      	b.n	401b1a <mem_read_capacity+0x26>
  401b18:	2301      	movs	r3, #1
  401b1a:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  401b1c:	7bfb      	ldrb	r3, [r7, #15]
}
  401b1e:	4618      	mov	r0, r3
  401b20:	3710      	adds	r7, #16
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	00415f38 	.word	0x00415f38

00401b2c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
  401b2c:	b480      	push	{r7}
  401b2e:	b085      	sub	sp, #20
  401b30:	af00      	add	r7, sp, #0
  401b32:	4603      	mov	r3, r0
  401b34:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
  401b36:	79fb      	ldrb	r3, [r7, #7]
  401b38:	2b01      	cmp	r3, #1
  401b3a:	bf8c      	ite	hi
  401b3c:	2300      	movhi	r3, #0
  401b3e:	2301      	movls	r3, #1
  401b40:	b2db      	uxtb	r3, r3
{
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
  401b42:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
  401b44:	7bfb      	ldrb	r3, [r7, #15]
}
  401b46:	4618      	mov	r0, r3
  401b48:	3714      	adds	r7, #20
  401b4a:	46bd      	mov	sp, r7
  401b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b50:	4770      	bx	lr
  401b52:	bf00      	nop

00401b54 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  401b54:	b580      	push	{r7, lr}
  401b56:	b084      	sub	sp, #16
  401b58:	af00      	add	r7, sp, #0
  401b5a:	4603      	mov	r3, r0
  401b5c:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401b5e:	79fb      	ldrb	r3, [r7, #7]
  401b60:	2b01      	cmp	r3, #1
  401b62:	d809      	bhi.n	401b78 <mem_wr_protect+0x24>
  401b64:	79fb      	ldrb	r3, [r7, #7]
  401b66:	4a09      	ldr	r2, [pc, #36]	; (401b8c <mem_wr_protect+0x38>)
  401b68:	015b      	lsls	r3, r3, #5
  401b6a:	4413      	add	r3, r2
  401b6c:	3308      	adds	r3, #8
  401b6e:	685b      	ldr	r3, [r3, #4]
  401b70:	4798      	blx	r3
  401b72:	4603      	mov	r3, r0
  401b74:	2b00      	cmp	r3, #0
  401b76:	d001      	beq.n	401b7c <mem_wr_protect+0x28>
  401b78:	2301      	movs	r3, #1
  401b7a:	e000      	b.n	401b7e <mem_wr_protect+0x2a>
  401b7c:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
  401b7e:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
  401b80:	7bfb      	ldrb	r3, [r7, #15]
}
  401b82:	4618      	mov	r0, r3
  401b84:	3710      	adds	r7, #16
  401b86:	46bd      	mov	sp, r7
  401b88:	bd80      	pop	{r7, pc}
  401b8a:	bf00      	nop
  401b8c:	00415f38 	.word	0x00415f38

00401b90 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  401b90:	b580      	push	{r7, lr}
  401b92:	b086      	sub	sp, #24
  401b94:	af00      	add	r7, sp, #0
  401b96:	4603      	mov	r3, r0
  401b98:	60b9      	str	r1, [r7, #8]
  401b9a:	607a      	str	r2, [r7, #4]
  401b9c:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  401b9e:	7bfb      	ldrb	r3, [r7, #15]
  401ba0:	2b01      	cmp	r3, #1
  401ba2:	d80a      	bhi.n	401bba <memory_2_ram+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401ba4:	7bfb      	ldrb	r3, [r7, #15]
  401ba6:	4a08      	ldr	r2, [pc, #32]	; (401bc8 <memory_2_ram+0x38>)
  401ba8:	015b      	lsls	r3, r3, #5
  401baa:	4413      	add	r3, r2
  401bac:	3310      	adds	r3, #16
  401bae:	685b      	ldr	r3, [r3, #4]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  401bb0:	68b8      	ldr	r0, [r7, #8]
  401bb2:	6879      	ldr	r1, [r7, #4]
  401bb4:	4798      	blx	r3
  401bb6:	4603      	mov	r3, r0
  401bb8:	e000      	b.n	401bbc <memory_2_ram+0x2c>
  401bba:	2301      	movs	r3, #1
  401bbc:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
  401bbe:	7dfb      	ldrb	r3, [r7, #23]
}
  401bc0:	4618      	mov	r0, r3
  401bc2:	3718      	adds	r7, #24
  401bc4:	46bd      	mov	sp, r7
  401bc6:	bd80      	pop	{r7, pc}
  401bc8:	00415f38 	.word	0x00415f38

00401bcc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  401bcc:	b580      	push	{r7, lr}
  401bce:	b086      	sub	sp, #24
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	4603      	mov	r3, r0
  401bd4:	60b9      	str	r1, [r7, #8]
  401bd6:	607a      	str	r2, [r7, #4]
  401bd8:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401bda:	7bfb      	ldrb	r3, [r7, #15]
  401bdc:	2b01      	cmp	r3, #1
  401bde:	d80a      	bhi.n	401bf6 <ram_2_memory+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401be0:	7bfb      	ldrb	r3, [r7, #15]
  401be2:	4a08      	ldr	r2, [pc, #32]	; (401c04 <ram_2_memory+0x38>)
  401be4:	015b      	lsls	r3, r3, #5
  401be6:	4413      	add	r3, r2
  401be8:	3318      	adds	r3, #24
  401bea:	681b      	ldr	r3, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401bec:	68b8      	ldr	r0, [r7, #8]
  401bee:	6879      	ldr	r1, [r7, #4]
  401bf0:	4798      	blx	r3
  401bf2:	4603      	mov	r3, r0
  401bf4:	e000      	b.n	401bf8 <ram_2_memory+0x2c>
  401bf6:	2301      	movs	r3, #1
  401bf8:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
  401bfa:	7dfb      	ldrb	r3, [r7, #23]
}
  401bfc:	4618      	mov	r0, r3
  401bfe:	3718      	adds	r7, #24
  401c00:	46bd      	mov	sp, r7
  401c02:	bd80      	pop	{r7, pc}
  401c04:	00415f38 	.word	0x00415f38

00401c08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401c08:	b580      	push	{r7, lr}
  401c0a:	b086      	sub	sp, #24
  401c0c:	af00      	add	r7, sp, #0
  401c0e:	60f8      	str	r0, [r7, #12]
  401c10:	60b9      	str	r1, [r7, #8]
  401c12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401c14:	2300      	movs	r3, #0
  401c16:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  401c18:	68fb      	ldr	r3, [r7, #12]
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d002      	beq.n	401c24 <_read+0x1c>
		return -1;
  401c1e:	f04f 33ff 	mov.w	r3, #4294967295
  401c22:	e014      	b.n	401c4e <_read+0x46>
	}

	for (; len > 0; --len) {
  401c24:	e00f      	b.n	401c46 <_read+0x3e>
		ptr_get(stdio_base, ptr);
  401c26:	4b0c      	ldr	r3, [pc, #48]	; (401c58 <_read+0x50>)
  401c28:	681b      	ldr	r3, [r3, #0]
  401c2a:	4a0c      	ldr	r2, [pc, #48]	; (401c5c <_read+0x54>)
  401c2c:	6812      	ldr	r2, [r2, #0]
  401c2e:	4610      	mov	r0, r2
  401c30:	68b9      	ldr	r1, [r7, #8]
  401c32:	4798      	blx	r3
		ptr++;
  401c34:	68bb      	ldr	r3, [r7, #8]
  401c36:	3301      	adds	r3, #1
  401c38:	60bb      	str	r3, [r7, #8]
		nChars++;
  401c3a:	697b      	ldr	r3, [r7, #20]
  401c3c:	3301      	adds	r3, #1
  401c3e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401c40:	687b      	ldr	r3, [r7, #4]
  401c42:	3b01      	subs	r3, #1
  401c44:	607b      	str	r3, [r7, #4]
  401c46:	687b      	ldr	r3, [r7, #4]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	dcec      	bgt.n	401c26 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  401c4c:	697b      	ldr	r3, [r7, #20]
}
  401c4e:	4618      	mov	r0, r3
  401c50:	3718      	adds	r7, #24
  401c52:	46bd      	mov	sp, r7
  401c54:	bd80      	pop	{r7, pc}
  401c56:	bf00      	nop
  401c58:	200024c0 	.word	0x200024c0
  401c5c:	200024c8 	.word	0x200024c8

00401c60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401c60:	b580      	push	{r7, lr}
  401c62:	b086      	sub	sp, #24
  401c64:	af00      	add	r7, sp, #0
  401c66:	60f8      	str	r0, [r7, #12]
  401c68:	60b9      	str	r1, [r7, #8]
  401c6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401c6c:	2300      	movs	r3, #0
  401c6e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  401c70:	68fb      	ldr	r3, [r7, #12]
  401c72:	2b01      	cmp	r3, #1
  401c74:	d008      	beq.n	401c88 <_write+0x28>
  401c76:	68fb      	ldr	r3, [r7, #12]
  401c78:	2b02      	cmp	r3, #2
  401c7a:	d005      	beq.n	401c88 <_write+0x28>
  401c7c:	68fb      	ldr	r3, [r7, #12]
  401c7e:	2b03      	cmp	r3, #3
  401c80:	d002      	beq.n	401c88 <_write+0x28>
		return -1;
  401c82:	f04f 33ff 	mov.w	r3, #4294967295
  401c86:	e01b      	b.n	401cc0 <_write+0x60>
	}

	for (; len != 0; --len) {
  401c88:	e016      	b.n	401cb8 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401c8a:	4b0f      	ldr	r3, [pc, #60]	; (401cc8 <_write+0x68>)
  401c8c:	681a      	ldr	r2, [r3, #0]
  401c8e:	4b0f      	ldr	r3, [pc, #60]	; (401ccc <_write+0x6c>)
  401c90:	6819      	ldr	r1, [r3, #0]
  401c92:	68bb      	ldr	r3, [r7, #8]
  401c94:	1c58      	adds	r0, r3, #1
  401c96:	60b8      	str	r0, [r7, #8]
  401c98:	781b      	ldrb	r3, [r3, #0]
  401c9a:	4608      	mov	r0, r1
  401c9c:	4619      	mov	r1, r3
  401c9e:	4790      	blx	r2
  401ca0:	4603      	mov	r3, r0
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	da02      	bge.n	401cac <_write+0x4c>
			return -1;
  401ca6:	f04f 33ff 	mov.w	r3, #4294967295
  401caa:	e009      	b.n	401cc0 <_write+0x60>
		}
		++nChars;
  401cac:	697b      	ldr	r3, [r7, #20]
  401cae:	3301      	adds	r3, #1
  401cb0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	3b01      	subs	r3, #1
  401cb6:	607b      	str	r3, [r7, #4]
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d1e5      	bne.n	401c8a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  401cbe:	697b      	ldr	r3, [r7, #20]
}
  401cc0:	4618      	mov	r0, r3
  401cc2:	3718      	adds	r7, #24
  401cc4:	46bd      	mov	sp, r7
  401cc6:	bd80      	pop	{r7, pc}
  401cc8:	200024c4 	.word	0x200024c4
  401ccc:	200024c8 	.word	0x200024c8

00401cd0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401cd0:	b480      	push	{r7}
  401cd2:	b083      	sub	sp, #12
  401cd4:	af00      	add	r7, sp, #0
  401cd6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401cd8:	687b      	ldr	r3, [r7, #4]
  401cda:	2b07      	cmp	r3, #7
  401cdc:	d825      	bhi.n	401d2a <osc_get_rate+0x5a>
  401cde:	a201      	add	r2, pc, #4	; (adr r2, 401ce4 <osc_get_rate+0x14>)
  401ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ce4:	00401d05 	.word	0x00401d05
  401ce8:	00401d0b 	.word	0x00401d0b
  401cec:	00401d11 	.word	0x00401d11
  401cf0:	00401d17 	.word	0x00401d17
  401cf4:	00401d1b 	.word	0x00401d1b
  401cf8:	00401d1f 	.word	0x00401d1f
  401cfc:	00401d23 	.word	0x00401d23
  401d00:	00401d27 	.word	0x00401d27
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401d04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d08:	e010      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d0e:	e00d      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d14:	e00a      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401d16:	4b08      	ldr	r3, [pc, #32]	; (401d38 <osc_get_rate+0x68>)
  401d18:	e008      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401d1a:	4b08      	ldr	r3, [pc, #32]	; (401d3c <osc_get_rate+0x6c>)
  401d1c:	e006      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401d1e:	4b08      	ldr	r3, [pc, #32]	; (401d40 <osc_get_rate+0x70>)
  401d20:	e004      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401d22:	4b08      	ldr	r3, [pc, #32]	; (401d44 <osc_get_rate+0x74>)
  401d24:	e002      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401d26:	4b07      	ldr	r3, [pc, #28]	; (401d44 <osc_get_rate+0x74>)
  401d28:	e000      	b.n	401d2c <osc_get_rate+0x5c>
	}

	return 0;
  401d2a:	2300      	movs	r3, #0
}
  401d2c:	4618      	mov	r0, r3
  401d2e:	370c      	adds	r7, #12
  401d30:	46bd      	mov	sp, r7
  401d32:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d36:	4770      	bx	lr
  401d38:	003d0900 	.word	0x003d0900
  401d3c:	007a1200 	.word	0x007a1200
  401d40:	00b71b00 	.word	0x00b71b00
  401d44:	00f42400 	.word	0x00f42400

00401d48 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401d48:	b580      	push	{r7, lr}
  401d4a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401d4c:	2006      	movs	r0, #6
  401d4e:	4b04      	ldr	r3, [pc, #16]	; (401d60 <sysclk_get_main_hz+0x18>)
  401d50:	4798      	blx	r3
  401d52:	4602      	mov	r2, r0
  401d54:	4613      	mov	r3, r2
  401d56:	011b      	lsls	r3, r3, #4
  401d58:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401d5a:	4618      	mov	r0, r3
  401d5c:	bd80      	pop	{r7, pc}
  401d5e:	bf00      	nop
  401d60:	00401cd1 	.word	0x00401cd1

00401d64 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401d64:	b580      	push	{r7, lr}
  401d66:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401d68:	4b02      	ldr	r3, [pc, #8]	; (401d74 <sysclk_get_cpu_hz+0x10>)
  401d6a:	4798      	blx	r3
  401d6c:	4603      	mov	r3, r0
  401d6e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401d70:	4618      	mov	r0, r3
  401d72:	bd80      	pop	{r7, pc}
  401d74:	00401d49 	.word	0x00401d49

00401d78 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401d78:	b480      	push	{r7}
  401d7a:	b087      	sub	sp, #28
  401d7c:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  401d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401d82:	685b      	ldr	r3, [r3, #4]
  401d84:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401d8a:	689b      	ldr	r3, [r3, #8]
  401d8c:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401d92:	68db      	ldr	r3, [r3, #12]
  401d94:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401d9a:	69db      	ldr	r3, [r3, #28]
  401d9c:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  401da4:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401daa:	2280      	movs	r2, #128	; 0x80
  401dac:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401db2:	697a      	ldr	r2, [r7, #20]
  401db4:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401dba:	693a      	ldr	r2, [r7, #16]
  401dbc:	609a      	str	r2, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401dc2:	68fa      	ldr	r2, [r7, #12]
  401dc4:	60da      	str	r2, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401dca:	68ba      	ldr	r2, [r7, #8]
  401dcc:	61da      	str	r2, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401dd2:	687a      	ldr	r2, [r7, #4]
  401dd4:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401dda:	2205      	movs	r2, #5
  401ddc:	601a      	str	r2, [r3, #0]
}
  401dde:	371c      	adds	r7, #28
  401de0:	46bd      	mov	sp, r7
  401de2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401de6:	4770      	bx	lr

00401de8 <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  401de8:	b480      	push	{r7}
  401dea:	b085      	sub	sp, #20
  401dec:	af00      	add	r7, sp, #0
  401dee:	6078      	str	r0, [r7, #4]
  401df0:	6039      	str	r1, [r7, #0]
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
	}
#else
	uint32_t clkdiv = 0;
  401df2:	2300      	movs	r3, #0
  401df4:	60fb      	str	r3, [r7, #12]
	uint32_t rest = 0;
  401df6:	2300      	movs	r3, #0
  401df8:	60bb      	str	r3, [r7, #8]

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  401dfa:	687b      	ldr	r3, [r7, #4]
  401dfc:	005a      	lsls	r2, r3, #1
  401dfe:	683b      	ldr	r3, [r7, #0]
  401e00:	429a      	cmp	r2, r3
  401e02:	d21b      	bcs.n	401e3c <hsmci_set_speed+0x54>
		clkdiv = mck / (2 * speed);
  401e04:	687b      	ldr	r3, [r7, #4]
  401e06:	005b      	lsls	r3, r3, #1
  401e08:	683a      	ldr	r2, [r7, #0]
  401e0a:	fbb2 f3f3 	udiv	r3, r2, r3
  401e0e:	60fb      	str	r3, [r7, #12]
		rest = mck % (2 * speed);
  401e10:	687b      	ldr	r3, [r7, #4]
  401e12:	005a      	lsls	r2, r3, #1
  401e14:	683b      	ldr	r3, [r7, #0]
  401e16:	fbb3 f1f2 	udiv	r1, r3, r2
  401e1a:	fb02 f201 	mul.w	r2, r2, r1
  401e1e:	1a9b      	subs	r3, r3, r2
  401e20:	60bb      	str	r3, [r7, #8]
		if (rest > 0) {
  401e22:	68bb      	ldr	r3, [r7, #8]
  401e24:	2b00      	cmp	r3, #0
  401e26:	d002      	beq.n	401e2e <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  401e28:	68fb      	ldr	r3, [r7, #12]
  401e2a:	3301      	adds	r3, #1
  401e2c:	60fb      	str	r3, [r7, #12]
		}
		if (clkdiv > 0) {
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	2b00      	cmp	r3, #0
  401e32:	d005      	beq.n	401e40 <hsmci_set_speed+0x58>
			clkdiv -= 1;
  401e34:	68fb      	ldr	r3, [r7, #12]
  401e36:	3b01      	subs	r3, #1
  401e38:	60fb      	str	r3, [r7, #12]
  401e3a:	e001      	b.n	401e40 <hsmci_set_speed+0x58>
		}
	} else {
		clkdiv = 0;
  401e3c:	2300      	movs	r3, #0
  401e3e:	60fb      	str	r3, [r7, #12]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401e48:	6852      	ldr	r2, [r2, #4]
  401e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  401e4e:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401e58:	6851      	ldr	r1, [r2, #4]
  401e5a:	68fa      	ldr	r2, [r7, #12]
  401e5c:	b2d2      	uxtb	r2, r2
  401e5e:	430a      	orrs	r2, r1
  401e60:	605a      	str	r2, [r3, #4]
#endif

}
  401e62:	3714      	adds	r7, #20
  401e64:	46bd      	mov	sp, r7
  401e66:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e6a:	4770      	bx	lr

00401e6c <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  401e6c:	b580      	push	{r7, lr}
  401e6e:	b082      	sub	sp, #8
  401e70:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  401e72:	f04f 33ff 	mov.w	r3, #4294967295
  401e76:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401e7e:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	1e5a      	subs	r2, r3, #1
  401e84:	607a      	str	r2, [r7, #4]
  401e86:	2b00      	cmp	r3, #0
  401e88:	d103      	bne.n	401e92 <hsmci_wait_busy+0x26>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  401e8a:	4b09      	ldr	r3, [pc, #36]	; (401eb0 <hsmci_wait_busy+0x44>)
  401e8c:	4798      	blx	r3
			return false;
  401e8e:	2300      	movs	r3, #0
  401e90:	e00a      	b.n	401ea8 <hsmci_wait_busy+0x3c>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401e92:	683b      	ldr	r3, [r7, #0]
  401e94:	f003 0320 	and.w	r3, r3, #32
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d0ed      	beq.n	401e78 <hsmci_wait_busy+0xc>
  401e9c:	683b      	ldr	r3, [r7, #0]
  401e9e:	f003 0310 	and.w	r3, r3, #16
  401ea2:	2b00      	cmp	r3, #0
  401ea4:	d1e8      	bne.n	401e78 <hsmci_wait_busy+0xc>
	return true;
  401ea6:	2301      	movs	r3, #1
}
  401ea8:	4618      	mov	r0, r3
  401eaa:	3708      	adds	r7, #8
  401eac:	46bd      	mov	sp, r7
  401eae:	bd80      	pop	{r7, pc}
  401eb0:	00401d79 	.word	0x00401d79

00401eb4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401eb4:	b580      	push	{r7, lr}
  401eb6:	b086      	sub	sp, #24
  401eb8:	af00      	add	r7, sp, #0
  401eba:	60f8      	str	r0, [r7, #12]
  401ebc:	60b9      	str	r1, [r7, #8]
  401ebe:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401ec0:	68bb      	ldr	r3, [r7, #8]
  401ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  401ec6:	68fa      	ldr	r2, [r7, #12]
  401ec8:	4313      	orrs	r3, r2
  401eca:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  401ecc:	68bb      	ldr	r3, [r7, #8]
  401ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d01b      	beq.n	401f0e <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  401ed6:	68fb      	ldr	r3, [r7, #12]
  401ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401edc:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  401ede:	68bb      	ldr	r3, [r7, #8]
  401ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401ee4:	2b00      	cmp	r3, #0
  401ee6:	d004      	beq.n	401ef2 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401ee8:	68fb      	ldr	r3, [r7, #12]
  401eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401eee:	60fb      	str	r3, [r7, #12]
  401ef0:	e00d      	b.n	401f0e <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  401ef2:	68bb      	ldr	r3, [r7, #8]
  401ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401ef8:	2b00      	cmp	r3, #0
  401efa:	d004      	beq.n	401f06 <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  401efc:	68fb      	ldr	r3, [r7, #12]
  401efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  401f02:	60fb      	str	r3, [r7, #12]
  401f04:	e003      	b.n	401f0e <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401f06:	68fb      	ldr	r3, [r7, #12]
  401f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401f0e:	68bb      	ldr	r3, [r7, #8]
  401f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  401f14:	2b00      	cmp	r3, #0
  401f16:	d003      	beq.n	401f20 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401f18:	68fb      	ldr	r3, [r7, #12]
  401f1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401f1e:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f24:	687a      	ldr	r2, [r7, #4]
  401f26:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f2c:	68fa      	ldr	r2, [r7, #12]
  401f2e:	615a      	str	r2, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401f36:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  401f38:	68bb      	ldr	r3, [r7, #8]
  401f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d008      	beq.n	401f54 <hsmci_send_cmd_execute+0xa0>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401f42:	697b      	ldr	r3, [r7, #20]
  401f44:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  401f48:	2b00      	cmp	r3, #0
  401f4a:	d00c      	beq.n	401f66 <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  401f4c:	4b12      	ldr	r3, [pc, #72]	; (401f98 <hsmci_send_cmd_execute+0xe4>)
  401f4e:	4798      	blx	r3
				return false;
  401f50:	2300      	movs	r3, #0
  401f52:	e01d      	b.n	401f90 <hsmci_send_cmd_execute+0xdc>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401f54:	697b      	ldr	r3, [r7, #20]
  401f56:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  401f5a:	2b00      	cmp	r3, #0
  401f5c:	d003      	beq.n	401f66 <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  401f5e:	4b0e      	ldr	r3, [pc, #56]	; (401f98 <hsmci_send_cmd_execute+0xe4>)
  401f60:	4798      	blx	r3
				return false;
  401f62:	2300      	movs	r3, #0
  401f64:	e014      	b.n	401f90 <hsmci_send_cmd_execute+0xdc>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401f66:	697b      	ldr	r3, [r7, #20]
  401f68:	f003 0301 	and.w	r3, r3, #1
  401f6c:	2b00      	cmp	r3, #0
  401f6e:	d0df      	beq.n	401f30 <hsmci_send_cmd_execute+0x7c>

	if (cmd & SDMMC_RESP_BUSY) {
  401f70:	68bb      	ldr	r3, [r7, #8]
  401f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401f76:	2b00      	cmp	r3, #0
  401f78:	d009      	beq.n	401f8e <hsmci_send_cmd_execute+0xda>
		if (!hsmci_wait_busy()) {
  401f7a:	4b08      	ldr	r3, [pc, #32]	; (401f9c <hsmci_send_cmd_execute+0xe8>)
  401f7c:	4798      	blx	r3
  401f7e:	4603      	mov	r3, r0
  401f80:	f083 0301 	eor.w	r3, r3, #1
  401f84:	b2db      	uxtb	r3, r3
  401f86:	2b00      	cmp	r3, #0
  401f88:	d001      	beq.n	401f8e <hsmci_send_cmd_execute+0xda>
			return false;
  401f8a:	2300      	movs	r3, #0
  401f8c:	e000      	b.n	401f90 <hsmci_send_cmd_execute+0xdc>
		}
	}
	return true;
  401f8e:	2301      	movs	r3, #1
}
  401f90:	4618      	mov	r0, r3
  401f92:	3718      	adds	r7, #24
  401f94:	46bd      	mov	sp, r7
  401f96:	bd80      	pop	{r7, pc}
  401f98:	00401d79 	.word	0x00401d79
  401f9c:	00401e6d 	.word	0x00401e6d

00401fa0 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401fa0:	b580      	push	{r7, lr}
  401fa2:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  401fa4:	2012      	movs	r0, #18
  401fa6:	4b0c      	ldr	r3, [pc, #48]	; (401fd8 <hsmci_init+0x38>)
  401fa8:	4798      	blx	r3
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fae:	2272      	movs	r2, #114	; 0x72
  401fb0:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fb6:	2272      	movs	r2, #114	; 0x72
  401fb8:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fbe:	2211      	movs	r2, #17
  401fc0:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401fca:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401fd0:	2205      	movs	r2, #5
  401fd2:	601a      	str	r2, [r3, #0]
}
  401fd4:	bd80      	pop	{r7, pc}
  401fd6:	bf00      	nop
  401fd8:	0040bca9 	.word	0x0040bca9

00401fdc <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  401fdc:	b480      	push	{r7}
  401fde:	b083      	sub	sp, #12
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	4603      	mov	r3, r0
  401fe4:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  401fe6:	79fb      	ldrb	r3, [r7, #7]
  401fe8:	2b00      	cmp	r3, #0
  401fea:	d101      	bne.n	401ff0 <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  401fec:	2304      	movs	r3, #4
  401fee:	e000      	b.n	401ff2 <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  401ff0:	2300      	movs	r3, #0
	}
}
  401ff2:	4618      	mov	r0, r3
  401ff4:	370c      	adds	r7, #12
  401ff6:	46bd      	mov	sp, r7
  401ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop

00402000 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  402000:	b480      	push	{r7}
  402002:	af00      	add	r7, sp, #0
	return true;
  402004:	2301      	movs	r3, #1
}
  402006:	4618      	mov	r0, r3
  402008:	46bd      	mov	sp, r7
  40200a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40200e:	4770      	bx	lr

00402010 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  402010:	b580      	push	{r7, lr}
  402012:	b084      	sub	sp, #16
  402014:	af00      	add	r7, sp, #0
  402016:	6039      	str	r1, [r7, #0]
  402018:	4601      	mov	r1, r0
  40201a:	71f9      	strb	r1, [r7, #7]
  40201c:	71ba      	strb	r2, [r7, #6]
  40201e:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  402020:	2300      	movs	r3, #0
  402022:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  402024:	2300      	movs	r3, #0
  402026:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  402028:	797b      	ldrb	r3, [r7, #5]
  40202a:	2b00      	cmp	r3, #0
  40202c:	d008      	beq.n	402040 <hsmci_select_device+0x30>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  40202e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402036:	6d52      	ldr	r2, [r2, #84]	; 0x54
  402038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40203c:	655a      	str	r2, [r3, #84]	; 0x54
  40203e:	e007      	b.n	402050 <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  402040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402048:	6d52      	ldr	r2, [r2, #84]	; 0x54
  40204a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40204e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_cpu_hz());
  402050:	4b12      	ldr	r3, [pc, #72]	; (40209c <hsmci_select_device+0x8c>)
  402052:	4798      	blx	r3
  402054:	4603      	mov	r3, r0
  402056:	6838      	ldr	r0, [r7, #0]
  402058:	4619      	mov	r1, r3
  40205a:	4b11      	ldr	r3, [pc, #68]	; (4020a0 <hsmci_select_device+0x90>)
  40205c:	4798      	blx	r3

	switch (slot) {
  40205e:	79fb      	ldrb	r3, [r7, #7]
  402060:	2b00      	cmp	r3, #0
  402062:	d102      	bne.n	40206a <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  402064:	2300      	movs	r3, #0
  402066:	60fb      	str	r3, [r7, #12]
		break;
  402068:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  40206a:	79bb      	ldrb	r3, [r7, #6]
  40206c:	2b04      	cmp	r3, #4
  40206e:	d006      	beq.n	40207e <hsmci_select_device+0x6e>
  402070:	2b08      	cmp	r3, #8
  402072:	d007      	beq.n	402084 <hsmci_select_device+0x74>
  402074:	2b01      	cmp	r3, #1
  402076:	d108      	bne.n	40208a <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  402078:	2300      	movs	r3, #0
  40207a:	60bb      	str	r3, [r7, #8]
		break;
  40207c:	e005      	b.n	40208a <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40207e:	2380      	movs	r3, #128	; 0x80
  402080:	60bb      	str	r3, [r7, #8]
		break;
  402082:	e002      	b.n	40208a <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  402084:	23c0      	movs	r3, #192	; 0xc0
  402086:	60bb      	str	r3, [r7, #8]
		break;
  402088:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40208a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40208e:	68f9      	ldr	r1, [r7, #12]
  402090:	68ba      	ldr	r2, [r7, #8]
  402092:	430a      	orrs	r2, r1
  402094:	60da      	str	r2, [r3, #12]
}
  402096:	3710      	adds	r7, #16
  402098:	46bd      	mov	sp, r7
  40209a:	bd80      	pop	{r7, pc}
  40209c:	00401d65 	.word	0x00401d65
  4020a0:	00401de9 	.word	0x00401de9

004020a4 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4020a4:	b480      	push	{r7}
  4020a6:	b083      	sub	sp, #12
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	4603      	mov	r3, r0
  4020ac:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  4020ae:	370c      	adds	r7, #12
  4020b0:	46bd      	mov	sp, r7
  4020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020b6:	4770      	bx	lr

004020b8 <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  4020b8:	b480      	push	{r7}
  4020ba:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4020bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4020c4:	6852      	ldr	r2, [r2, #4]
  4020c6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4020ca:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4020cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020d0:	2200      	movs	r2, #0
  4020d2:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4020d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020d8:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4020dc:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4020de:	bf00      	nop
  4020e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4020e6:	f003 0301 	and.w	r3, r3, #1
  4020ea:	2b00      	cmp	r3, #0
  4020ec:	d0f8      	beq.n	4020e0 <hsmci_send_clock+0x28>
}
  4020ee:	46bd      	mov	sp, r7
  4020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020f4:	4770      	bx	lr
  4020f6:	bf00      	nop

004020f8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4020f8:	b580      	push	{r7, lr}
  4020fa:	b082      	sub	sp, #8
  4020fc:	af00      	add	r7, sp, #0
  4020fe:	6078      	str	r0, [r7, #4]
  402100:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  402102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40210a:	6852      	ldr	r2, [r2, #4]
  40210c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  402110:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  402112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40211a:	6852      	ldr	r2, [r2, #4]
  40211c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  402120:	605a      	str	r2, [r3, #4]
#endif
	HSMCI->HSMCI_BLKR = 0;
  402122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402126:	2200      	movs	r2, #0
  402128:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40212a:	2000      	movs	r0, #0
  40212c:	6879      	ldr	r1, [r7, #4]
  40212e:	683a      	ldr	r2, [r7, #0]
  402130:	4b03      	ldr	r3, [pc, #12]	; (402140 <hsmci_send_cmd+0x48>)
  402132:	4798      	blx	r3
  402134:	4603      	mov	r3, r0
}
  402136:	4618      	mov	r0, r3
  402138:	3708      	adds	r7, #8
  40213a:	46bd      	mov	sp, r7
  40213c:	bd80      	pop	{r7, pc}
  40213e:	bf00      	nop
  402140:	00401eb5 	.word	0x00401eb5

00402144 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  402144:	b480      	push	{r7}
  402146:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  402148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40214c:	6a1b      	ldr	r3, [r3, #32]
}
  40214e:	4618      	mov	r0, r3
  402150:	46bd      	mov	sp, r7
  402152:	f85d 7b04 	ldr.w	r7, [sp], #4
  402156:	4770      	bx	lr

00402158 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  402158:	b480      	push	{r7}
  40215a:	b085      	sub	sp, #20
  40215c:	af00      	add	r7, sp, #0
  40215e:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  402160:	2300      	movs	r3, #0
  402162:	73fb      	strb	r3, [r7, #15]
  402164:	e025      	b.n	4021b2 <hsmci_get_response_128+0x5a>
		response_32 = HSMCI->HSMCI_RSPR[0];
  402166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40216a:	6a1b      	ldr	r3, [r3, #32]
  40216c:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  40216e:	68bb      	ldr	r3, [r7, #8]
  402170:	0e1b      	lsrs	r3, r3, #24
  402172:	b2da      	uxtb	r2, r3
  402174:	687b      	ldr	r3, [r7, #4]
  402176:	701a      	strb	r2, [r3, #0]
		response++;
  402178:	687b      	ldr	r3, [r7, #4]
  40217a:	3301      	adds	r3, #1
  40217c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  40217e:	68bb      	ldr	r3, [r7, #8]
  402180:	0c1b      	lsrs	r3, r3, #16
  402182:	b2da      	uxtb	r2, r3
  402184:	687b      	ldr	r3, [r7, #4]
  402186:	701a      	strb	r2, [r3, #0]
		response++;
  402188:	687b      	ldr	r3, [r7, #4]
  40218a:	3301      	adds	r3, #1
  40218c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  40218e:	68bb      	ldr	r3, [r7, #8]
  402190:	0a1b      	lsrs	r3, r3, #8
  402192:	b2da      	uxtb	r2, r3
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	701a      	strb	r2, [r3, #0]
		response++;
  402198:	687b      	ldr	r3, [r7, #4]
  40219a:	3301      	adds	r3, #1
  40219c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  40219e:	68bb      	ldr	r3, [r7, #8]
  4021a0:	b2da      	uxtb	r2, r3
  4021a2:	687b      	ldr	r3, [r7, #4]
  4021a4:	701a      	strb	r2, [r3, #0]
		response++;
  4021a6:	687b      	ldr	r3, [r7, #4]
  4021a8:	3301      	adds	r3, #1
  4021aa:	607b      	str	r3, [r7, #4]

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  4021ac:	7bfb      	ldrb	r3, [r7, #15]
  4021ae:	3301      	adds	r3, #1
  4021b0:	73fb      	strb	r3, [r7, #15]
  4021b2:	7bfb      	ldrb	r3, [r7, #15]
  4021b4:	2b03      	cmp	r3, #3
  4021b6:	d9d6      	bls.n	402166 <hsmci_get_response_128+0xe>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  4021b8:	3714      	adds	r7, #20
  4021ba:	46bd      	mov	sp, r7
  4021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021c0:	4770      	bx	lr
  4021c2:	bf00      	nop

004021c4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4021c4:	b580      	push	{r7, lr}
  4021c6:	b086      	sub	sp, #24
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	60f8      	str	r0, [r7, #12]
  4021cc:	60b9      	str	r1, [r7, #8]
  4021ce:	80fa      	strh	r2, [r7, #6]
  4021d0:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  4021d2:	f897 3020 	ldrb.w	r3, [r7, #32]
  4021d6:	2b00      	cmp	r3, #0
  4021d8:	d008      	beq.n	4021ec <hsmci_adtc_start+0x28>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  4021da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4021de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4021e2:	6852      	ldr	r2, [r2, #4]
  4021e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4021e8:	605a      	str	r2, [r3, #4]
  4021ea:	e007      	b.n	4021fc <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4021ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4021f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4021f4:	6852      	ldr	r2, [r2, #4]
  4021f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4021fa:	605a      	str	r2, [r3, #4]
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4021fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402204:	6852      	ldr	r2, [r2, #4]
  402206:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
  40220a:	605a      	str	r2, [r3, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  40220c:	88fb      	ldrh	r3, [r7, #6]
  40220e:	f003 0303 	and.w	r3, r3, #3
  402212:	2b00      	cmp	r3, #0
  402214:	d008      	beq.n	402228 <hsmci_adtc_start+0x64>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  402216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40221a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40221e:	6852      	ldr	r2, [r2, #4]
  402220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402224:	605a      	str	r2, [r3, #4]
  402226:	e007      	b.n	402238 <hsmci_adtc_start+0x74>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40222c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402230:	6852      	ldr	r2, [r2, #4]
  402232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402236:	605a      	str	r2, [r3, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  402238:	68fb      	ldr	r3, [r7, #12]
  40223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  40223e:	2b00      	cmp	r3, #0
  402240:	d003      	beq.n	40224a <hsmci_adtc_start+0x86>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  402242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  402246:	617b      	str	r3, [r7, #20]
  402248:	e002      	b.n	402250 <hsmci_adtc_start+0x8c>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40224a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  40224e:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  402250:	68fb      	ldr	r3, [r7, #12]
  402252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402256:	2b00      	cmp	r3, #0
  402258:	d00a      	beq.n	402270 <hsmci_adtc_start+0xac>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40225a:	697b      	ldr	r3, [r7, #20]
  40225c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402260:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  402262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402266:	88fa      	ldrh	r2, [r7, #6]
  402268:	f3c2 0208 	ubfx	r2, r2, #0, #9
  40226c:	619a      	str	r2, [r3, #24]
  40226e:	e028      	b.n	4022c2 <hsmci_adtc_start+0xfe>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  402270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402274:	88fa      	ldrh	r2, [r7, #6]
  402276:	0411      	lsls	r1, r2, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  402278:	88ba      	ldrh	r2, [r7, #4]
	if (cmd & SDMMC_CMD_SDIO_BYTE) {
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  40227a:	430a      	orrs	r2, r1
  40227c:	619a      	str	r2, [r3, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  40227e:	68fb      	ldr	r3, [r7, #12]
  402280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402284:	2b00      	cmp	r3, #0
  402286:	d004      	beq.n	402292 <hsmci_adtc_start+0xce>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  402288:	697b      	ldr	r3, [r7, #20]
  40228a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  40228e:	617b      	str	r3, [r7, #20]
  402290:	e017      	b.n	4022c2 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_STREAM) {
  402292:	68fb      	ldr	r3, [r7, #12]
  402294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  402298:	2b00      	cmp	r3, #0
  40229a:	d004      	beq.n	4022a6 <hsmci_adtc_start+0xe2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  40229c:	697b      	ldr	r3, [r7, #20]
  40229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4022a2:	617b      	str	r3, [r7, #20]
  4022a4:	e00d      	b.n	4022c2 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4022a6:	68fb      	ldr	r3, [r7, #12]
  4022a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	d108      	bne.n	4022c2 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4022b0:	68fb      	ldr	r3, [r7, #12]
  4022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	d003      	beq.n	4022c2 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4022ba:	697b      	ldr	r3, [r7, #20]
  4022bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4022c0:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4022c2:	4b09      	ldr	r3, [pc, #36]	; (4022e8 <hsmci_adtc_start+0x124>)
  4022c4:	2200      	movs	r2, #0
  4022c6:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  4022c8:	4b08      	ldr	r3, [pc, #32]	; (4022ec <hsmci_adtc_start+0x128>)
  4022ca:	88fa      	ldrh	r2, [r7, #6]
  4022cc:	801a      	strh	r2, [r3, #0]
	hsmci_nb_block = nb_block;
  4022ce:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <hsmci_adtc_start+0x12c>)
  4022d0:	88ba      	ldrh	r2, [r7, #4]
  4022d2:	801a      	strh	r2, [r3, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4022d4:	6978      	ldr	r0, [r7, #20]
  4022d6:	68f9      	ldr	r1, [r7, #12]
  4022d8:	68ba      	ldr	r2, [r7, #8]
  4022da:	4b06      	ldr	r3, [pc, #24]	; (4022f4 <hsmci_adtc_start+0x130>)
  4022dc:	4798      	blx	r3
  4022de:	4603      	mov	r3, r0
}
  4022e0:	4618      	mov	r0, r3
  4022e2:	3718      	adds	r7, #24
  4022e4:	46bd      	mov	sp, r7
  4022e6:	bd80      	pop	{r7, pc}
  4022e8:	20000dc4 	.word	0x20000dc4
  4022ec:	20000dc8 	.word	0x20000dc8
  4022f0:	20000dca 	.word	0x20000dca
  4022f4:	00401eb5 	.word	0x00401eb5

004022f8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  4022f8:	b580      	push	{r7, lr}
  4022fa:	b084      	sub	sp, #16
  4022fc:	af00      	add	r7, sp, #0
  4022fe:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  402300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402306:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402308:	68fa      	ldr	r2, [r7, #12]
  40230a:	4b1d      	ldr	r3, [pc, #116]	; (402380 <hsmci_read_word+0x88>)
  40230c:	4013      	ands	r3, r2
  40230e:	2b00      	cmp	r3, #0
  402310:	d003      	beq.n	40231a <hsmci_read_word+0x22>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  402312:	4b1c      	ldr	r3, [pc, #112]	; (402384 <hsmci_read_word+0x8c>)
  402314:	4798      	blx	r3
			return false;
  402316:	2300      	movs	r3, #0
  402318:	e02d      	b.n	402376 <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40231a:	68fb      	ldr	r3, [r7, #12]
  40231c:	f003 0302 	and.w	r3, r3, #2
  402320:	2b00      	cmp	r3, #0
  402322:	d0ed      	beq.n	402300 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  402324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  40232e:	4b16      	ldr	r3, [pc, #88]	; (402388 <hsmci_read_word+0x90>)
  402330:	681b      	ldr	r3, [r3, #0]
  402332:	1d1a      	adds	r2, r3, #4
  402334:	4b14      	ldr	r3, [pc, #80]	; (402388 <hsmci_read_word+0x90>)
  402336:	601a      	str	r2, [r3, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  402338:	4b14      	ldr	r3, [pc, #80]	; (40238c <hsmci_read_word+0x94>)
  40233a:	881b      	ldrh	r3, [r3, #0]
  40233c:	4a14      	ldr	r2, [pc, #80]	; (402390 <hsmci_read_word+0x98>)
  40233e:	8812      	ldrh	r2, [r2, #0]
  402340:	fb02 f203 	mul.w	r2, r2, r3
  402344:	4b10      	ldr	r3, [pc, #64]	; (402388 <hsmci_read_word+0x90>)
  402346:	681b      	ldr	r3, [r3, #0]
  402348:	429a      	cmp	r2, r3
  40234a:	d901      	bls.n	402350 <hsmci_read_word+0x58>
		return true;
  40234c:	2301      	movs	r3, #1
  40234e:	e012      	b.n	402376 <hsmci_read_word+0x7e>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  402350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402356:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402358:	68fa      	ldr	r2, [r7, #12]
  40235a:	4b09      	ldr	r3, [pc, #36]	; (402380 <hsmci_read_word+0x88>)
  40235c:	4013      	ands	r3, r2
  40235e:	2b00      	cmp	r3, #0
  402360:	d003      	beq.n	40236a <hsmci_read_word+0x72>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  402362:	4b08      	ldr	r3, [pc, #32]	; (402384 <hsmci_read_word+0x8c>)
  402364:	4798      	blx	r3
			return false;
  402366:	2300      	movs	r3, #0
  402368:	e005      	b.n	402376 <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40236a:	68fb      	ldr	r3, [r7, #12]
  40236c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  402370:	2b00      	cmp	r3, #0
  402372:	d0ed      	beq.n	402350 <hsmci_read_word+0x58>
	return true;
  402374:	2301      	movs	r3, #1
}
  402376:	4618      	mov	r0, r3
  402378:	3710      	adds	r7, #16
  40237a:	46bd      	mov	sp, r7
  40237c:	bd80      	pop	{r7, pc}
  40237e:	bf00      	nop
  402380:	c0600000 	.word	0xc0600000
  402384:	00401d79 	.word	0x00401d79
  402388:	20000dc4 	.word	0x20000dc4
  40238c:	20000dc8 	.word	0x20000dc8
  402390:	20000dca 	.word	0x20000dca

00402394 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  402394:	b480      	push	{r7}
  402396:	b085      	sub	sp, #20
  402398:	af00      	add	r7, sp, #0
  40239a:	6078      	str	r0, [r7, #4]
  40239c:	460b      	mov	r3, r1
  40239e:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4023a0:	887b      	ldrh	r3, [r7, #2]
  4023a2:	4a26      	ldr	r2, [pc, #152]	; (40243c <hsmci_start_read_blocks+0xa8>)
  4023a4:	8812      	ldrh	r2, [r2, #0]
  4023a6:	fb02 f303 	mul.w	r3, r2, r3
  4023aa:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  4023ac:	687b      	ldr	r3, [r7, #4]
  4023ae:	f003 0303 	and.w	r3, r3, #3
  4023b2:	2b00      	cmp	r3, #0
  4023b4:	d105      	bne.n	4023c2 <hsmci_start_read_blocks+0x2e>
  4023b6:	4b21      	ldr	r3, [pc, #132]	; (40243c <hsmci_start_read_blocks+0xa8>)
  4023b8:	881b      	ldrh	r3, [r3, #0]
  4023ba:	f003 0303 	and.w	r3, r3, #3
  4023be:	2b00      	cmp	r3, #0
  4023c0:	d008      	beq.n	4023d4 <hsmci_start_read_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4023c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4023ca:	6852      	ldr	r2, [r2, #4]
  4023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4023d0:	605a      	str	r2, [r3, #4]
  4023d2:	e007      	b.n	4023e4 <hsmci_start_read_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4023d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4023dc:	6852      	ldr	r2, [r2, #4]
  4023de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4023e2:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  4023e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023e8:	687a      	ldr	r2, [r7, #4]
  4023ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4023ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4023f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023f6:	685b      	ldr	r3, [r3, #4]
  4023f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  4023fc:	2b00      	cmp	r3, #0
  4023fe:	d102      	bne.n	402406 <hsmci_start_read_blocks+0x72>
  402400:	68fb      	ldr	r3, [r7, #12]
  402402:	089b      	lsrs	r3, r3, #2
  402404:	e000      	b.n	402408 <hsmci_start_read_blocks+0x74>
  402406:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  402408:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  40240c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402410:	2200      	movs	r2, #0
  402412:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  402416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40241a:	2201      	movs	r2, #1
  40241c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  402420:	4b07      	ldr	r3, [pc, #28]	; (402440 <hsmci_start_read_blocks+0xac>)
  402422:	681a      	ldr	r2, [r3, #0]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	441a      	add	r2, r3
  402428:	4b05      	ldr	r3, [pc, #20]	; (402440 <hsmci_start_read_blocks+0xac>)
  40242a:	601a      	str	r2, [r3, #0]
	return true;
  40242c:	2301      	movs	r3, #1
}
  40242e:	4618      	mov	r0, r3
  402430:	3714      	adds	r7, #20
  402432:	46bd      	mov	sp, r7
  402434:	f85d 7b04 	ldr.w	r7, [sp], #4
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	20000dc8 	.word	0x20000dc8
  402440:	20000dc4 	.word	0x20000dc4

00402444 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  402444:	b580      	push	{r7, lr}
  402446:	b082      	sub	sp, #8
  402448:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402450:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402452:	687a      	ldr	r2, [r7, #4]
  402454:	4b1a      	ldr	r3, [pc, #104]	; (4024c0 <hsmci_wait_end_of_read_blocks+0x7c>)
  402456:	4013      	ands	r3, r2
  402458:	2b00      	cmp	r3, #0
  40245a:	d009      	beq.n	402470 <hsmci_wait_end_of_read_blocks+0x2c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  40245c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402460:	f240 2202 	movw	r2, #514	; 0x202
  402464:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  402468:	4b16      	ldr	r3, [pc, #88]	; (4024c4 <hsmci_wait_end_of_read_blocks+0x80>)
  40246a:	4798      	blx	r3
			return false;
  40246c:	2300      	movs	r3, #0
  40246e:	e023      	b.n	4024b8 <hsmci_wait_end_of_read_blocks+0x74>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  402470:	687b      	ldr	r3, [r7, #4]
  402472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402476:	2b00      	cmp	r3, #0
  402478:	d0e7      	beq.n	40244a <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  40247a:	4b13      	ldr	r3, [pc, #76]	; (4024c8 <hsmci_wait_end_of_read_blocks+0x84>)
  40247c:	881b      	ldrh	r3, [r3, #0]
  40247e:	4a13      	ldr	r2, [pc, #76]	; (4024cc <hsmci_wait_end_of_read_blocks+0x88>)
  402480:	8812      	ldrh	r2, [r2, #0]
  402482:	fb02 f203 	mul.w	r2, r2, r3
  402486:	4b12      	ldr	r3, [pc, #72]	; (4024d0 <hsmci_wait_end_of_read_blocks+0x8c>)
  402488:	681b      	ldr	r3, [r3, #0]
  40248a:	429a      	cmp	r2, r3
  40248c:	d901      	bls.n	402492 <hsmci_wait_end_of_read_blocks+0x4e>
		return true;
  40248e:	2301      	movs	r3, #1
  402490:	e012      	b.n	4024b8 <hsmci_wait_end_of_read_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  402492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402498:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40249a:	687a      	ldr	r2, [r7, #4]
  40249c:	4b08      	ldr	r3, [pc, #32]	; (4024c0 <hsmci_wait_end_of_read_blocks+0x7c>)
  40249e:	4013      	ands	r3, r2
  4024a0:	2b00      	cmp	r3, #0
  4024a2:	d003      	beq.n	4024ac <hsmci_wait_end_of_read_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4024a4:	4b07      	ldr	r3, [pc, #28]	; (4024c4 <hsmci_wait_end_of_read_blocks+0x80>)
  4024a6:	4798      	blx	r3
			return false;
  4024a8:	2300      	movs	r3, #0
  4024aa:	e005      	b.n	4024b8 <hsmci_wait_end_of_read_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4024ac:	687b      	ldr	r3, [r7, #4]
  4024ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  4024b2:	2b00      	cmp	r3, #0
  4024b4:	d0ed      	beq.n	402492 <hsmci_wait_end_of_read_blocks+0x4e>
	return true;
  4024b6:	2301      	movs	r3, #1
}
  4024b8:	4618      	mov	r0, r3
  4024ba:	3708      	adds	r7, #8
  4024bc:	46bd      	mov	sp, r7
  4024be:	bd80      	pop	{r7, pc}
  4024c0:	c0600000 	.word	0xc0600000
  4024c4:	00401d79 	.word	0x00401d79
  4024c8:	20000dc8 	.word	0x20000dc8
  4024cc:	20000dca 	.word	0x20000dca
  4024d0:	20000dc4 	.word	0x20000dc4

004024d4 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  4024d4:	b480      	push	{r7}
  4024d6:	b085      	sub	sp, #20
  4024d8:	af00      	add	r7, sp, #0
  4024da:	6078      	str	r0, [r7, #4]
  4024dc:	460b      	mov	r3, r1
  4024de:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4024e0:	887b      	ldrh	r3, [r7, #2]
  4024e2:	4a26      	ldr	r2, [pc, #152]	; (40257c <hsmci_start_write_blocks+0xa8>)
  4024e4:	8812      	ldrh	r2, [r2, #0]
  4024e6:	fb02 f303 	mul.w	r3, r2, r3
  4024ea:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  4024ec:	687b      	ldr	r3, [r7, #4]
  4024ee:	f003 0303 	and.w	r3, r3, #3
  4024f2:	2b00      	cmp	r3, #0
  4024f4:	d105      	bne.n	402502 <hsmci_start_write_blocks+0x2e>
  4024f6:	4b21      	ldr	r3, [pc, #132]	; (40257c <hsmci_start_write_blocks+0xa8>)
  4024f8:	881b      	ldrh	r3, [r3, #0]
  4024fa:	f003 0303 	and.w	r3, r3, #3
  4024fe:	2b00      	cmp	r3, #0
  402500:	d008      	beq.n	402514 <hsmci_start_write_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  402502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40250a:	6852      	ldr	r2, [r2, #4]
  40250c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402510:	605a      	str	r2, [r3, #4]
  402512:	e007      	b.n	402524 <hsmci_start_write_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40251c:	6852      	ldr	r2, [r2, #4]
  40251e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402522:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  402524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402528:	687a      	ldr	r2, [r7, #4]
  40252a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40252e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402536:	685b      	ldr	r3, [r3, #4]
  402538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  40253c:	2b00      	cmp	r3, #0
  40253e:	d102      	bne.n	402546 <hsmci_start_write_blocks+0x72>
  402540:	68fb      	ldr	r3, [r7, #12]
  402542:	089b      	lsrs	r3, r3, #2
  402544:	e000      	b.n	402548 <hsmci_start_write_blocks+0x74>
  402546:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  402548:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  40254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402550:	2200      	movs	r2, #0
  402552:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  402556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40255a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40255e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  402562:	4b07      	ldr	r3, [pc, #28]	; (402580 <hsmci_start_write_blocks+0xac>)
  402564:	681a      	ldr	r2, [r3, #0]
  402566:	68fb      	ldr	r3, [r7, #12]
  402568:	441a      	add	r2, r3
  40256a:	4b05      	ldr	r3, [pc, #20]	; (402580 <hsmci_start_write_blocks+0xac>)
  40256c:	601a      	str	r2, [r3, #0]
	return true;
  40256e:	2301      	movs	r3, #1
}
  402570:	4618      	mov	r0, r3
  402572:	3714      	adds	r7, #20
  402574:	46bd      	mov	sp, r7
  402576:	f85d 7b04 	ldr.w	r7, [sp], #4
  40257a:	4770      	bx	lr
  40257c:	20000dc8 	.word	0x20000dc8
  402580:	20000dc4 	.word	0x20000dc4

00402584 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  402584:	b580      	push	{r7, lr}
  402586:	b082      	sub	sp, #8
  402588:	af00      	add	r7, sp, #0
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40258a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402590:	607b      	str	r3, [r7, #4]
		if (sr &
  402592:	687a      	ldr	r2, [r7, #4]
  402594:	4b1a      	ldr	r3, [pc, #104]	; (402600 <hsmci_wait_end_of_write_blocks+0x7c>)
  402596:	4013      	ands	r3, r2
  402598:	2b00      	cmp	r3, #0
  40259a:	d009      	beq.n	4025b0 <hsmci_wait_end_of_write_blocks+0x2c>
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  40259c:	4b19      	ldr	r3, [pc, #100]	; (402604 <hsmci_wait_end_of_write_blocks+0x80>)
  40259e:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  4025a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4025a4:	f240 2202 	movw	r2, #514	; 0x202
  4025a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  4025ac:	2300      	movs	r3, #0
  4025ae:	e023      	b.n	4025f8 <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  4025b0:	687b      	ldr	r3, [r7, #4]
  4025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4025b6:	2b00      	cmp	r3, #0
  4025b8:	d0e7      	beq.n	40258a <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4025ba:	4b13      	ldr	r3, [pc, #76]	; (402608 <hsmci_wait_end_of_write_blocks+0x84>)
  4025bc:	881b      	ldrh	r3, [r3, #0]
  4025be:	4a13      	ldr	r2, [pc, #76]	; (40260c <hsmci_wait_end_of_write_blocks+0x88>)
  4025c0:	8812      	ldrh	r2, [r2, #0]
  4025c2:	fb02 f203 	mul.w	r2, r2, r3
  4025c6:	4b12      	ldr	r3, [pc, #72]	; (402610 <hsmci_wait_end_of_write_blocks+0x8c>)
  4025c8:	681b      	ldr	r3, [r3, #0]
  4025ca:	429a      	cmp	r2, r3
  4025cc:	d901      	bls.n	4025d2 <hsmci_wait_end_of_write_blocks+0x4e>
		return true;
  4025ce:	2301      	movs	r3, #1
  4025d0:	e012      	b.n	4025f8 <hsmci_wait_end_of_write_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4025d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4025d8:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4025da:	687a      	ldr	r2, [r7, #4]
  4025dc:	4b08      	ldr	r3, [pc, #32]	; (402600 <hsmci_wait_end_of_write_blocks+0x7c>)
  4025de:	4013      	ands	r3, r2
  4025e0:	2b00      	cmp	r3, #0
  4025e2:	d003      	beq.n	4025ec <hsmci_wait_end_of_write_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4025e4:	4b07      	ldr	r3, [pc, #28]	; (402604 <hsmci_wait_end_of_write_blocks+0x80>)
  4025e6:	4798      	blx	r3
			return false;
  4025e8:	2300      	movs	r3, #0
  4025ea:	e005      	b.n	4025f8 <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  4025ec:	687b      	ldr	r3, [r7, #4]
  4025ee:	f003 0320 	and.w	r3, r3, #32
  4025f2:	2b00      	cmp	r3, #0
  4025f4:	d0ed      	beq.n	4025d2 <hsmci_wait_end_of_write_blocks+0x4e>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  4025f6:	2301      	movs	r3, #1
}
  4025f8:	4618      	mov	r0, r3
  4025fa:	3708      	adds	r7, #8
  4025fc:	46bd      	mov	sp, r7
  4025fe:	bd80      	pop	{r7, pc}
  402600:	c0600000 	.word	0xc0600000
  402604:	00401d79 	.word	0x00401d79
  402608:	20000dc8 	.word	0x20000dc8
  40260c:	20000dca 	.word	0x20000dca
  402610:	20000dc4 	.word	0x20000dc4

00402614 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  402614:	b480      	push	{r7}
  402616:	b083      	sub	sp, #12
  402618:	af00      	add	r7, sp, #0
  40261a:	6078      	str	r0, [r7, #4]
  40261c:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  40261e:	683b      	ldr	r3, [r7, #0]
  402620:	2b00      	cmp	r3, #0
  402622:	d006      	beq.n	402632 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  402624:	687b      	ldr	r3, [r7, #4]
  402626:	685b      	ldr	r3, [r3, #4]
  402628:	f043 0201 	orr.w	r2, r3, #1
  40262c:	687b      	ldr	r3, [r7, #4]
  40262e:	605a      	str	r2, [r3, #4]
  402630:	e005      	b.n	40263e <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  402632:	687b      	ldr	r3, [r7, #4]
  402634:	685b      	ldr	r3, [r3, #4]
  402636:	f023 0201 	bic.w	r2, r3, #1
  40263a:	687b      	ldr	r3, [r7, #4]
  40263c:	605a      	str	r2, [r3, #4]
	}
}
  40263e:	370c      	adds	r7, #12
  402640:	46bd      	mov	sp, r7
  402642:	f85d 7b04 	ldr.w	r7, [sp], #4
  402646:	4770      	bx	lr

00402648 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  402648:	b480      	push	{r7}
  40264a:	b087      	sub	sp, #28
  40264c:	af00      	add	r7, sp, #0
  40264e:	60f8      	str	r0, [r7, #12]
  402650:	60b9      	str	r1, [r7, #8]
  402652:	607a      	str	r2, [r7, #4]
  402654:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  402656:	68fb      	ldr	r3, [r7, #12]
  402658:	689b      	ldr	r3, [r3, #8]
  40265a:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  40265c:	e002      	b.n	402664 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  40265e:	68fb      	ldr	r3, [r7, #12]
  402660:	689b      	ldr	r3, [r3, #8]
  402662:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  402664:	68fb      	ldr	r3, [r7, #12]
  402666:	689a      	ldr	r2, [r3, #8]
  402668:	697b      	ldr	r3, [r7, #20]
  40266a:	429a      	cmp	r2, r3
  40266c:	d1f7      	bne.n	40265e <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  40266e:	68bb      	ldr	r3, [r7, #8]
  402670:	2b00      	cmp	r3, #0
  402672:	d01c      	beq.n	4026ae <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  402674:	697b      	ldr	r3, [r7, #20]
  402676:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  40267a:	0c1b      	lsrs	r3, r3, #16
  40267c:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40267e:	693b      	ldr	r3, [r7, #16]
  402680:	091a      	lsrs	r2, r3, #4
  402682:	4613      	mov	r3, r2
  402684:	009b      	lsls	r3, r3, #2
  402686:	4413      	add	r3, r2
  402688:	005b      	lsls	r3, r3, #1
  40268a:	461a      	mov	r2, r3
  40268c:	693b      	ldr	r3, [r7, #16]
  40268e:	f003 030f 	and.w	r3, r3, #15
  402692:	441a      	add	r2, r3
  402694:	68bb      	ldr	r3, [r7, #8]
  402696:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  402698:	697b      	ldr	r3, [r7, #20]
  40269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40269e:	2b00      	cmp	r3, #0
  4026a0:	d005      	beq.n	4026ae <rtc_get_time+0x66>
			*pul_hour += 12;
  4026a2:	68bb      	ldr	r3, [r7, #8]
  4026a4:	681b      	ldr	r3, [r3, #0]
  4026a6:	f103 020c 	add.w	r2, r3, #12
  4026aa:	68bb      	ldr	r3, [r7, #8]
  4026ac:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4026ae:	687b      	ldr	r3, [r7, #4]
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d011      	beq.n	4026d8 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  4026b4:	697b      	ldr	r3, [r7, #20]
  4026b6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  4026ba:	0a1b      	lsrs	r3, r3, #8
  4026bc:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4026be:	693b      	ldr	r3, [r7, #16]
  4026c0:	091a      	lsrs	r2, r3, #4
  4026c2:	4613      	mov	r3, r2
  4026c4:	009b      	lsls	r3, r3, #2
  4026c6:	4413      	add	r3, r2
  4026c8:	005b      	lsls	r3, r3, #1
  4026ca:	461a      	mov	r2, r3
  4026cc:	693b      	ldr	r3, [r7, #16]
  4026ce:	f003 030f 	and.w	r3, r3, #15
  4026d2:	441a      	add	r2, r3
  4026d4:	687b      	ldr	r3, [r7, #4]
  4026d6:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  4026d8:	683b      	ldr	r3, [r7, #0]
  4026da:	2b00      	cmp	r3, #0
  4026dc:	d010      	beq.n	402700 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  4026de:	697b      	ldr	r3, [r7, #20]
  4026e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4026e4:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4026e6:	693b      	ldr	r3, [r7, #16]
  4026e8:	091a      	lsrs	r2, r3, #4
  4026ea:	4613      	mov	r3, r2
  4026ec:	009b      	lsls	r3, r3, #2
  4026ee:	4413      	add	r3, r2
  4026f0:	005b      	lsls	r3, r3, #1
  4026f2:	461a      	mov	r2, r3
  4026f4:	693b      	ldr	r3, [r7, #16]
  4026f6:	f003 030f 	and.w	r3, r3, #15
  4026fa:	441a      	add	r2, r3
  4026fc:	683b      	ldr	r3, [r7, #0]
  4026fe:	601a      	str	r2, [r3, #0]
	}
}
  402700:	371c      	adds	r7, #28
  402702:	46bd      	mov	sp, r7
  402704:	f85d 7b04 	ldr.w	r7, [sp], #4
  402708:	4770      	bx	lr
  40270a:	bf00      	nop

0040270c <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40270c:	b480      	push	{r7}
  40270e:	b089      	sub	sp, #36	; 0x24
  402710:	af00      	add	r7, sp, #0
  402712:	60f8      	str	r0, [r7, #12]
  402714:	60b9      	str	r1, [r7, #8]
  402716:	607a      	str	r2, [r7, #4]
  402718:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40271a:	68fb      	ldr	r3, [r7, #12]
  40271c:	68db      	ldr	r3, [r3, #12]
  40271e:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  402720:	e002      	b.n	402728 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  402722:	68fb      	ldr	r3, [r7, #12]
  402724:	68db      	ldr	r3, [r3, #12]
  402726:	61fb      	str	r3, [r7, #28]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  402728:	68fb      	ldr	r3, [r7, #12]
  40272a:	68da      	ldr	r2, [r3, #12]
  40272c:	69fb      	ldr	r3, [r7, #28]
  40272e:	429a      	cmp	r2, r3
  402730:	d1f7      	bne.n	402722 <rtc_get_date+0x16>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  402732:	68bb      	ldr	r3, [r7, #8]
  402734:	2b00      	cmp	r3, #0
  402736:	d025      	beq.n	402784 <rtc_get_date+0x78>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  402738:	69fb      	ldr	r3, [r7, #28]
  40273a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40273e:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402740:	69bb      	ldr	r3, [r7, #24]
  402742:	091a      	lsrs	r2, r3, #4
  402744:	4613      	mov	r3, r2
  402746:	009b      	lsls	r3, r3, #2
  402748:	4413      	add	r3, r2
  40274a:	005b      	lsls	r3, r3, #1
  40274c:	461a      	mov	r2, r3
  40274e:	69bb      	ldr	r3, [r7, #24]
  402750:	f003 030f 	and.w	r3, r3, #15
  402754:	4413      	add	r3, r2
  402756:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  402758:	69fb      	ldr	r3, [r7, #28]
  40275a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40275e:	0a1b      	lsrs	r3, r3, #8
  402760:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402762:	697b      	ldr	r3, [r7, #20]
  402764:	2264      	movs	r2, #100	; 0x64
  402766:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40276a:	69bb      	ldr	r3, [r7, #24]
  40276c:	091a      	lsrs	r2, r3, #4
  40276e:	4613      	mov	r3, r2
  402770:	009b      	lsls	r3, r3, #2
  402772:	4413      	add	r3, r2
  402774:	005b      	lsls	r3, r3, #1
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402776:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402778:	69bb      	ldr	r3, [r7, #24]
  40277a:	f003 030f 	and.w	r3, r3, #15
  40277e:	441a      	add	r2, r3
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402780:	68bb      	ldr	r3, [r7, #8]
  402782:	601a      	str	r2, [r3, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  402784:	687b      	ldr	r3, [r7, #4]
  402786:	2b00      	cmp	r3, #0
  402788:	d011      	beq.n	4027ae <rtc_get_date+0xa2>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  40278a:	69fb      	ldr	r3, [r7, #28]
  40278c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  402790:	0c1b      	lsrs	r3, r3, #16
  402792:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402794:	69bb      	ldr	r3, [r7, #24]
  402796:	091a      	lsrs	r2, r3, #4
  402798:	4613      	mov	r3, r2
  40279a:	009b      	lsls	r3, r3, #2
  40279c:	4413      	add	r3, r2
  40279e:	005b      	lsls	r3, r3, #1
  4027a0:	461a      	mov	r2, r3
  4027a2:	69bb      	ldr	r3, [r7, #24]
  4027a4:	f003 030f 	and.w	r3, r3, #15
  4027a8:	441a      	add	r2, r3
  4027aa:	687b      	ldr	r3, [r7, #4]
  4027ac:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4027ae:	683b      	ldr	r3, [r7, #0]
  4027b0:	2b00      	cmp	r3, #0
  4027b2:	d011      	beq.n	4027d8 <rtc_get_date+0xcc>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  4027b4:	69fb      	ldr	r3, [r7, #28]
  4027b6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4027ba:	0e1b      	lsrs	r3, r3, #24
  4027bc:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4027be:	69bb      	ldr	r3, [r7, #24]
  4027c0:	091a      	lsrs	r2, r3, #4
  4027c2:	4613      	mov	r3, r2
  4027c4:	009b      	lsls	r3, r3, #2
  4027c6:	4413      	add	r3, r2
  4027c8:	005b      	lsls	r3, r3, #1
  4027ca:	461a      	mov	r2, r3
  4027cc:	69bb      	ldr	r3, [r7, #24]
  4027ce:	f003 030f 	and.w	r3, r3, #15
  4027d2:	441a      	add	r2, r3
  4027d4:	683b      	ldr	r3, [r7, #0]
  4027d6:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4027da:	2b00      	cmp	r3, #0
  4027dc:	d005      	beq.n	4027ea <rtc_get_date+0xde>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4027de:	69fb      	ldr	r3, [r7, #28]
  4027e0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
  4027e4:	0d5a      	lsrs	r2, r3, #21
  4027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4027e8:	601a      	str	r2, [r3, #0]
	}
}
  4027ea:	3724      	adds	r7, #36	; 0x24
  4027ec:	46bd      	mov	sp, r7
  4027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027f2:	4770      	bx	lr

004027f4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4027f4:	b480      	push	{r7}
  4027f6:	b085      	sub	sp, #20
  4027f8:	af00      	add	r7, sp, #0
  4027fa:	6078      	str	r0, [r7, #4]
  4027fc:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4027fe:	2300      	movs	r3, #0
  402800:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402802:	687b      	ldr	r3, [r7, #4]
  402804:	22ac      	movs	r2, #172	; 0xac
  402806:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402808:	683b      	ldr	r3, [r7, #0]
  40280a:	681a      	ldr	r2, [r3, #0]
  40280c:	683b      	ldr	r3, [r7, #0]
  40280e:	685b      	ldr	r3, [r3, #4]
  402810:	fbb2 f3f3 	udiv	r3, r2, r3
  402814:	091b      	lsrs	r3, r3, #4
  402816:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402818:	68fb      	ldr	r3, [r7, #12]
  40281a:	2b00      	cmp	r3, #0
  40281c:	d003      	beq.n	402826 <uart_init+0x32>
  40281e:	68fb      	ldr	r3, [r7, #12]
  402820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402824:	d301      	bcc.n	40282a <uart_init+0x36>
		return 1;
  402826:	2301      	movs	r3, #1
  402828:	e00f      	b.n	40284a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40282a:	687b      	ldr	r3, [r7, #4]
  40282c:	68fa      	ldr	r2, [r7, #12]
  40282e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402830:	683b      	ldr	r3, [r7, #0]
  402832:	689a      	ldr	r2, [r3, #8]
  402834:	687b      	ldr	r3, [r7, #4]
  402836:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402838:	687b      	ldr	r3, [r7, #4]
  40283a:	f240 2202 	movw	r2, #514	; 0x202
  40283e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402842:	687b      	ldr	r3, [r7, #4]
  402844:	2250      	movs	r2, #80	; 0x50
  402846:	601a      	str	r2, [r3, #0]

	return 0;
  402848:	2300      	movs	r3, #0
}
  40284a:	4618      	mov	r0, r3
  40284c:	3714      	adds	r7, #20
  40284e:	46bd      	mov	sp, r7
  402850:	f85d 7b04 	ldr.w	r7, [sp], #4
  402854:	4770      	bx	lr
  402856:	bf00      	nop

00402858 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  402858:	b480      	push	{r7}
  40285a:	b083      	sub	sp, #12
  40285c:	af00      	add	r7, sp, #0
  40285e:	6078      	str	r0, [r7, #4]
  402860:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  402862:	687b      	ldr	r3, [r7, #4]
  402864:	683a      	ldr	r2, [r7, #0]
  402866:	60da      	str	r2, [r3, #12]
}
  402868:	370c      	adds	r7, #12
  40286a:	46bd      	mov	sp, r7
  40286c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402870:	4770      	bx	lr
  402872:	bf00      	nop

00402874 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  402874:	b480      	push	{r7}
  402876:	b083      	sub	sp, #12
  402878:	af00      	add	r7, sp, #0
  40287a:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  40287c:	687b      	ldr	r3, [r7, #4]
  40287e:	695b      	ldr	r3, [r3, #20]
}
  402880:	4618      	mov	r0, r3
  402882:	370c      	adds	r7, #12
  402884:	46bd      	mov	sp, r7
  402886:	f85d 7b04 	ldr.w	r7, [sp], #4
  40288a:	4770      	bx	lr

0040288c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40288c:	b480      	push	{r7}
  40288e:	b083      	sub	sp, #12
  402890:	af00      	add	r7, sp, #0
  402892:	6078      	str	r0, [r7, #4]
  402894:	460b      	mov	r3, r1
  402896:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402898:	687b      	ldr	r3, [r7, #4]
  40289a:	695b      	ldr	r3, [r3, #20]
  40289c:	f003 0302 	and.w	r3, r3, #2
  4028a0:	2b00      	cmp	r3, #0
  4028a2:	d101      	bne.n	4028a8 <uart_write+0x1c>
		return 1;
  4028a4:	2301      	movs	r3, #1
  4028a6:	e003      	b.n	4028b0 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4028a8:	78fa      	ldrb	r2, [r7, #3]
  4028aa:	687b      	ldr	r3, [r7, #4]
  4028ac:	61da      	str	r2, [r3, #28]
	return 0;
  4028ae:	2300      	movs	r3, #0
}
  4028b0:	4618      	mov	r0, r3
  4028b2:	370c      	adds	r7, #12
  4028b4:	46bd      	mov	sp, r7
  4028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028ba:	4770      	bx	lr

004028bc <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4028bc:	b480      	push	{r7}
  4028be:	b083      	sub	sp, #12
  4028c0:	af00      	add	r7, sp, #0
  4028c2:	6078      	str	r0, [r7, #4]
  4028c4:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4028c6:	687b      	ldr	r3, [r7, #4]
  4028c8:	695b      	ldr	r3, [r3, #20]
  4028ca:	f003 0301 	and.w	r3, r3, #1
  4028ce:	2b00      	cmp	r3, #0
  4028d0:	d101      	bne.n	4028d6 <uart_read+0x1a>
		return 1;
  4028d2:	2301      	movs	r3, #1
  4028d4:	e005      	b.n	4028e2 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4028d6:	687b      	ldr	r3, [r7, #4]
  4028d8:	699b      	ldr	r3, [r3, #24]
  4028da:	b2da      	uxtb	r2, r3
  4028dc:	683b      	ldr	r3, [r7, #0]
  4028de:	701a      	strb	r2, [r3, #0]
	return 0;
  4028e0:	2300      	movs	r3, #0
}
  4028e2:	4618      	mov	r0, r3
  4028e4:	370c      	adds	r7, #12
  4028e6:	46bd      	mov	sp, r7
  4028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028ec:	4770      	bx	lr
  4028ee:	bf00      	nop

004028f0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4028f0:	b480      	push	{r7}
  4028f2:	b089      	sub	sp, #36	; 0x24
  4028f4:	af00      	add	r7, sp, #0
  4028f6:	60f8      	str	r0, [r7, #12]
  4028f8:	60b9      	str	r1, [r7, #8]
  4028fa:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4028fc:	68bb      	ldr	r3, [r7, #8]
  4028fe:	011a      	lsls	r2, r3, #4
  402900:	687b      	ldr	r3, [r7, #4]
  402902:	429a      	cmp	r2, r3
  402904:	d802      	bhi.n	40290c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  402906:	2310      	movs	r3, #16
  402908:	61fb      	str	r3, [r7, #28]
  40290a:	e001      	b.n	402910 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40290c:	2308      	movs	r3, #8
  40290e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402910:	687b      	ldr	r3, [r7, #4]
  402912:	00da      	lsls	r2, r3, #3
  402914:	69fb      	ldr	r3, [r7, #28]
  402916:	68b9      	ldr	r1, [r7, #8]
  402918:	fb01 f303 	mul.w	r3, r1, r3
  40291c:	085b      	lsrs	r3, r3, #1
  40291e:	441a      	add	r2, r3
  402920:	69fb      	ldr	r3, [r7, #28]
  402922:	68b9      	ldr	r1, [r7, #8]
  402924:	fb01 f303 	mul.w	r3, r1, r3
  402928:	fbb2 f3f3 	udiv	r3, r2, r3
  40292c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40292e:	69bb      	ldr	r3, [r7, #24]
  402930:	08db      	lsrs	r3, r3, #3
  402932:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402934:	69bb      	ldr	r3, [r7, #24]
  402936:	f003 0307 	and.w	r3, r3, #7
  40293a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40293c:	697b      	ldr	r3, [r7, #20]
  40293e:	2b00      	cmp	r3, #0
  402940:	d003      	beq.n	40294a <usart_set_async_baudrate+0x5a>
  402942:	697b      	ldr	r3, [r7, #20]
  402944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402948:	d301      	bcc.n	40294e <usart_set_async_baudrate+0x5e>
		return 1;
  40294a:	2301      	movs	r3, #1
  40294c:	e00f      	b.n	40296e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40294e:	69fb      	ldr	r3, [r7, #28]
  402950:	2b08      	cmp	r3, #8
  402952:	d105      	bne.n	402960 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402954:	68fb      	ldr	r3, [r7, #12]
  402956:	685b      	ldr	r3, [r3, #4]
  402958:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40295c:	68fb      	ldr	r3, [r7, #12]
  40295e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402960:	693b      	ldr	r3, [r7, #16]
  402962:	041a      	lsls	r2, r3, #16
  402964:	697b      	ldr	r3, [r7, #20]
  402966:	431a      	orrs	r2, r3
  402968:	68fb      	ldr	r3, [r7, #12]
  40296a:	621a      	str	r2, [r3, #32]

	return 0;
  40296c:	2300      	movs	r3, #0
}
  40296e:	4618      	mov	r0, r3
  402970:	3724      	adds	r7, #36	; 0x24
  402972:	46bd      	mov	sp, r7
  402974:	f85d 7b04 	ldr.w	r7, [sp], #4
  402978:	4770      	bx	lr
  40297a:	bf00      	nop

0040297c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40297c:	b580      	push	{r7, lr}
  40297e:	b082      	sub	sp, #8
  402980:	af00      	add	r7, sp, #0
  402982:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  402984:	6878      	ldr	r0, [r7, #4]
  402986:	4b0e      	ldr	r3, [pc, #56]	; (4029c0 <usart_reset+0x44>)
  402988:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40298a:	687b      	ldr	r3, [r7, #4]
  40298c:	2200      	movs	r2, #0
  40298e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  402990:	687b      	ldr	r3, [r7, #4]
  402992:	2200      	movs	r2, #0
  402994:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402996:	687b      	ldr	r3, [r7, #4]
  402998:	2200      	movs	r2, #0
  40299a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40299c:	6878      	ldr	r0, [r7, #4]
  40299e:	4b09      	ldr	r3, [pc, #36]	; (4029c4 <usart_reset+0x48>)
  4029a0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4029a2:	6878      	ldr	r0, [r7, #4]
  4029a4:	4b08      	ldr	r3, [pc, #32]	; (4029c8 <usart_reset+0x4c>)
  4029a6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4029a8:	6878      	ldr	r0, [r7, #4]
  4029aa:	4b08      	ldr	r3, [pc, #32]	; (4029cc <usart_reset+0x50>)
  4029ac:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4029ae:	6878      	ldr	r0, [r7, #4]
  4029b0:	4b07      	ldr	r3, [pc, #28]	; (4029d0 <usart_reset+0x54>)
  4029b2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4029b4:	6878      	ldr	r0, [r7, #4]
  4029b6:	4b07      	ldr	r3, [pc, #28]	; (4029d4 <usart_reset+0x58>)
  4029b8:	4798      	blx	r3
#endif
}
  4029ba:	3708      	adds	r7, #8
  4029bc:	46bd      	mov	sp, r7
  4029be:	bd80      	pop	{r7, pc}
  4029c0:	00402be5 	.word	0x00402be5
  4029c4:	00402a75 	.word	0x00402a75
  4029c8:	00402aa5 	.word	0x00402aa5
  4029cc:	00402af5 	.word	0x00402af5
  4029d0:	00402b2d 	.word	0x00402b2d
  4029d4:	00402b11 	.word	0x00402b11

004029d8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4029d8:	b580      	push	{r7, lr}
  4029da:	b084      	sub	sp, #16
  4029dc:	af00      	add	r7, sp, #0
  4029de:	60f8      	str	r0, [r7, #12]
  4029e0:	60b9      	str	r1, [r7, #8]
  4029e2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4029e4:	68f8      	ldr	r0, [r7, #12]
  4029e6:	4b1a      	ldr	r3, [pc, #104]	; (402a50 <usart_init_rs232+0x78>)
  4029e8:	4798      	blx	r3

	ul_reg_val = 0;
  4029ea:	4b1a      	ldr	r3, [pc, #104]	; (402a54 <usart_init_rs232+0x7c>)
  4029ec:	2200      	movs	r2, #0
  4029ee:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4029f0:	68bb      	ldr	r3, [r7, #8]
  4029f2:	2b00      	cmp	r3, #0
  4029f4:	d009      	beq.n	402a0a <usart_init_rs232+0x32>
  4029f6:	68bb      	ldr	r3, [r7, #8]
  4029f8:	681b      	ldr	r3, [r3, #0]
  4029fa:	68f8      	ldr	r0, [r7, #12]
  4029fc:	4619      	mov	r1, r3
  4029fe:	687a      	ldr	r2, [r7, #4]
  402a00:	4b15      	ldr	r3, [pc, #84]	; (402a58 <usart_init_rs232+0x80>)
  402a02:	4798      	blx	r3
  402a04:	4603      	mov	r3, r0
  402a06:	2b00      	cmp	r3, #0
  402a08:	d001      	beq.n	402a0e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402a0a:	2301      	movs	r3, #1
  402a0c:	e01b      	b.n	402a46 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402a0e:	68bb      	ldr	r3, [r7, #8]
  402a10:	685a      	ldr	r2, [r3, #4]
  402a12:	68bb      	ldr	r3, [r7, #8]
  402a14:	689b      	ldr	r3, [r3, #8]
  402a16:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402a18:	68bb      	ldr	r3, [r7, #8]
  402a1a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402a1c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402a1e:	68bb      	ldr	r3, [r7, #8]
  402a20:	68db      	ldr	r3, [r3, #12]
  402a22:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402a24:	4b0b      	ldr	r3, [pc, #44]	; (402a54 <usart_init_rs232+0x7c>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	431a      	orrs	r2, r3
  402a2a:	4b0a      	ldr	r3, [pc, #40]	; (402a54 <usart_init_rs232+0x7c>)
  402a2c:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  402a2e:	4b09      	ldr	r3, [pc, #36]	; (402a54 <usart_init_rs232+0x7c>)
  402a30:	681a      	ldr	r2, [r3, #0]
  402a32:	4b08      	ldr	r3, [pc, #32]	; (402a54 <usart_init_rs232+0x7c>)
  402a34:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  402a36:	68fb      	ldr	r3, [r7, #12]
  402a38:	685a      	ldr	r2, [r3, #4]
  402a3a:	4b06      	ldr	r3, [pc, #24]	; (402a54 <usart_init_rs232+0x7c>)
  402a3c:	681b      	ldr	r3, [r3, #0]
  402a3e:	431a      	orrs	r2, r3
  402a40:	68fb      	ldr	r3, [r7, #12]
  402a42:	605a      	str	r2, [r3, #4]

	return 0;
  402a44:	2300      	movs	r3, #0
}
  402a46:	4618      	mov	r0, r3
  402a48:	3710      	adds	r7, #16
  402a4a:	46bd      	mov	sp, r7
  402a4c:	bd80      	pop	{r7, pc}
  402a4e:	bf00      	nop
  402a50:	0040297d 	.word	0x0040297d
  402a54:	20000dcc 	.word	0x20000dcc
  402a58:	004028f1 	.word	0x004028f1

00402a5c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402a5c:	b480      	push	{r7}
  402a5e:	b083      	sub	sp, #12
  402a60:	af00      	add	r7, sp, #0
  402a62:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402a64:	687b      	ldr	r3, [r7, #4]
  402a66:	2240      	movs	r2, #64	; 0x40
  402a68:	601a      	str	r2, [r3, #0]
}
  402a6a:	370c      	adds	r7, #12
  402a6c:	46bd      	mov	sp, r7
  402a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a72:	4770      	bx	lr

00402a74 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  402a74:	b480      	push	{r7}
  402a76:	b083      	sub	sp, #12
  402a78:	af00      	add	r7, sp, #0
  402a7a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402a7c:	687b      	ldr	r3, [r7, #4]
  402a7e:	2288      	movs	r2, #136	; 0x88
  402a80:	601a      	str	r2, [r3, #0]
}
  402a82:	370c      	adds	r7, #12
  402a84:	46bd      	mov	sp, r7
  402a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a8a:	4770      	bx	lr

00402a8c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  402a8c:	b480      	push	{r7}
  402a8e:	b083      	sub	sp, #12
  402a90:	af00      	add	r7, sp, #0
  402a92:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  402a94:	687b      	ldr	r3, [r7, #4]
  402a96:	2210      	movs	r2, #16
  402a98:	601a      	str	r2, [r3, #0]
}
  402a9a:	370c      	adds	r7, #12
  402a9c:	46bd      	mov	sp, r7
  402a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aa2:	4770      	bx	lr

00402aa4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  402aa4:	b480      	push	{r7}
  402aa6:	b083      	sub	sp, #12
  402aa8:	af00      	add	r7, sp, #0
  402aaa:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402aac:	687b      	ldr	r3, [r7, #4]
  402aae:	2224      	movs	r2, #36	; 0x24
  402ab0:	601a      	str	r2, [r3, #0]
}
  402ab2:	370c      	adds	r7, #12
  402ab4:	46bd      	mov	sp, r7
  402ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aba:	4770      	bx	lr

00402abc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402abc:	b480      	push	{r7}
  402abe:	b083      	sub	sp, #12
  402ac0:	af00      	add	r7, sp, #0
  402ac2:	6078      	str	r0, [r7, #4]
  402ac4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  402ac6:	687b      	ldr	r3, [r7, #4]
  402ac8:	683a      	ldr	r2, [r7, #0]
  402aca:	609a      	str	r2, [r3, #8]
}
  402acc:	370c      	adds	r7, #12
  402ace:	46bd      	mov	sp, r7
  402ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ad4:	4770      	bx	lr
  402ad6:	bf00      	nop

00402ad8 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402ad8:	b480      	push	{r7}
  402ada:	b083      	sub	sp, #12
  402adc:	af00      	add	r7, sp, #0
  402ade:	6078      	str	r0, [r7, #4]
  402ae0:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  402ae2:	687b      	ldr	r3, [r7, #4]
  402ae4:	683a      	ldr	r2, [r7, #0]
  402ae6:	60da      	str	r2, [r3, #12]
}
  402ae8:	370c      	adds	r7, #12
  402aea:	46bd      	mov	sp, r7
  402aec:	f85d 7b04 	ldr.w	r7, [sp], #4
  402af0:	4770      	bx	lr
  402af2:	bf00      	nop

00402af4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402af4:	b480      	push	{r7}
  402af6:	b083      	sub	sp, #12
  402af8:	af00      	add	r7, sp, #0
  402afa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  402afc:	687b      	ldr	r3, [r7, #4]
  402afe:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b02:	601a      	str	r2, [r3, #0]
}
  402b04:	370c      	adds	r7, #12
  402b06:	46bd      	mov	sp, r7
  402b08:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b0c:	4770      	bx	lr
  402b0e:	bf00      	nop

00402b10 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  402b10:	b480      	push	{r7}
  402b12:	b083      	sub	sp, #12
  402b14:	af00      	add	r7, sp, #0
  402b16:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  402b18:	687b      	ldr	r3, [r7, #4]
  402b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402b1e:	601a      	str	r2, [r3, #0]
}
  402b20:	370c      	adds	r7, #12
  402b22:	46bd      	mov	sp, r7
  402b24:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b28:	4770      	bx	lr
  402b2a:	bf00      	nop

00402b2c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402b2c:	b480      	push	{r7}
  402b2e:	b083      	sub	sp, #12
  402b30:	af00      	add	r7, sp, #0
  402b32:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402b34:	687b      	ldr	r3, [r7, #4]
  402b36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402b3a:	601a      	str	r2, [r3, #0]
}
  402b3c:	370c      	adds	r7, #12
  402b3e:	46bd      	mov	sp, r7
  402b40:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b44:	4770      	bx	lr
  402b46:	bf00      	nop

00402b48 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  402b48:	b480      	push	{r7}
  402b4a:	b083      	sub	sp, #12
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	6078      	str	r0, [r7, #4]
  402b50:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402b52:	687b      	ldr	r3, [r7, #4]
  402b54:	695b      	ldr	r3, [r3, #20]
  402b56:	f003 0302 	and.w	r3, r3, #2
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d101      	bne.n	402b62 <usart_write+0x1a>
		return 1;
  402b5e:	2301      	movs	r3, #1
  402b60:	e005      	b.n	402b6e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402b62:	683b      	ldr	r3, [r7, #0]
  402b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402b68:	687b      	ldr	r3, [r7, #4]
  402b6a:	61da      	str	r2, [r3, #28]
	return 0;
  402b6c:	2300      	movs	r3, #0
}
  402b6e:	4618      	mov	r0, r3
  402b70:	370c      	adds	r7, #12
  402b72:	46bd      	mov	sp, r7
  402b74:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b78:	4770      	bx	lr
  402b7a:	bf00      	nop

00402b7c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402b7c:	b480      	push	{r7}
  402b7e:	b083      	sub	sp, #12
  402b80:	af00      	add	r7, sp, #0
  402b82:	6078      	str	r0, [r7, #4]
  402b84:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402b86:	687b      	ldr	r3, [r7, #4]
  402b88:	695b      	ldr	r3, [r3, #20]
  402b8a:	f003 0301 	and.w	r3, r3, #1
  402b8e:	2b00      	cmp	r3, #0
  402b90:	d101      	bne.n	402b96 <usart_read+0x1a>
		return 1;
  402b92:	2301      	movs	r3, #1
  402b94:	e006      	b.n	402ba4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402b96:	687b      	ldr	r3, [r7, #4]
  402b98:	699b      	ldr	r3, [r3, #24]
  402b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402b9e:	683b      	ldr	r3, [r7, #0]
  402ba0:	601a      	str	r2, [r3, #0]

	return 0;
  402ba2:	2300      	movs	r3, #0
}
  402ba4:	4618      	mov	r0, r3
  402ba6:	370c      	adds	r7, #12
  402ba8:	46bd      	mov	sp, r7
  402baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bae:	4770      	bx	lr

00402bb0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  402bb0:	b480      	push	{r7}
  402bb2:	b083      	sub	sp, #12
  402bb4:	af00      	add	r7, sp, #0
  402bb6:	6078      	str	r0, [r7, #4]
  402bb8:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402bba:	bf00      	nop
  402bbc:	687b      	ldr	r3, [r7, #4]
  402bbe:	695b      	ldr	r3, [r3, #20]
  402bc0:	f003 0301 	and.w	r3, r3, #1
  402bc4:	2b00      	cmp	r3, #0
  402bc6:	d0f9      	beq.n	402bbc <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402bc8:	687b      	ldr	r3, [r7, #4]
  402bca:	699b      	ldr	r3, [r3, #24]
  402bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402bd0:	683b      	ldr	r3, [r7, #0]
  402bd2:	601a      	str	r2, [r3, #0]

	return 0;
  402bd4:	2300      	movs	r3, #0
}
  402bd6:	4618      	mov	r0, r3
  402bd8:	370c      	adds	r7, #12
  402bda:	46bd      	mov	sp, r7
  402bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402be0:	4770      	bx	lr
  402be2:	bf00      	nop

00402be4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402be4:	b480      	push	{r7}
  402be6:	b083      	sub	sp, #12
  402be8:	af00      	add	r7, sp, #0
  402bea:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402bec:	687b      	ldr	r3, [r7, #4]
  402bee:	4a04      	ldr	r2, [pc, #16]	; (402c00 <usart_disable_writeprotect+0x1c>)
  402bf0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402bf4:	370c      	adds	r7, #12
  402bf6:	46bd      	mov	sp, r7
  402bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bfc:	4770      	bx	lr
  402bfe:	bf00      	nop
  402c00:	55534100 	.word	0x55534100

00402c04 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  402c04:	b580      	push	{r7, lr}
  402c06:	b084      	sub	sp, #16
  402c08:	af00      	add	r7, sp, #0
  402c0a:	4603      	mov	r3, r0
  402c0c:	71fb      	strb	r3, [r7, #7]
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  402c0e:	4817      	ldr	r0, [pc, #92]	; (402c6c <disk_initialize+0x68>)
  402c10:	2100      	movs	r1, #0
  402c12:	4b17      	ldr	r3, [pc, #92]	; (402c70 <disk_initialize+0x6c>)
  402c14:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  402c16:	79fb      	ldrb	r3, [r7, #7]
  402c18:	2b02      	cmp	r3, #2
  402c1a:	d901      	bls.n	402c20 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  402c1c:	2301      	movs	r3, #1
  402c1e:	e021      	b.n	402c64 <disk_initialize+0x60>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  402c20:	2300      	movs	r3, #0
  402c22:	60fb      	str	r3, [r7, #12]
  402c24:	e00c      	b.n	402c40 <disk_initialize+0x3c>
		mem_status = mem_test_unit_ready(drv);
  402c26:	79fb      	ldrb	r3, [r7, #7]
  402c28:	4618      	mov	r0, r3
  402c2a:	4b12      	ldr	r3, [pc, #72]	; (402c74 <disk_initialize+0x70>)
  402c2c:	4798      	blx	r3
  402c2e:	4603      	mov	r3, r0
  402c30:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
  402c32:	7afb      	ldrb	r3, [r7, #11]
  402c34:	2b03      	cmp	r3, #3
  402c36:	d000      	beq.n	402c3a <disk_initialize+0x36>
			break;
  402c38:	e005      	b.n	402c46 <disk_initialize+0x42>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  402c3a:	68fb      	ldr	r3, [r7, #12]
  402c3c:	3301      	adds	r3, #1
  402c3e:	60fb      	str	r3, [r7, #12]
  402c40:	68fb      	ldr	r3, [r7, #12]
  402c42:	2b01      	cmp	r3, #1
  402c44:	ddef      	ble.n	402c26 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  402c46:	7afb      	ldrb	r3, [r7, #11]
  402c48:	2b00      	cmp	r3, #0
  402c4a:	d001      	beq.n	402c50 <disk_initialize+0x4c>
		return STA_NOINIT;
  402c4c:	2301      	movs	r3, #1
  402c4e:	e009      	b.n	402c64 <disk_initialize+0x60>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  402c50:	79fb      	ldrb	r3, [r7, #7]
  402c52:	4618      	mov	r0, r3
  402c54:	4b08      	ldr	r3, [pc, #32]	; (402c78 <disk_initialize+0x74>)
  402c56:	4798      	blx	r3
  402c58:	4603      	mov	r3, r0
  402c5a:	2b00      	cmp	r3, #0
  402c5c:	d001      	beq.n	402c62 <disk_initialize+0x5e>
		return STA_PROTECT;
  402c5e:	2304      	movs	r3, #4
  402c60:	e000      	b.n	402c64 <disk_initialize+0x60>
	}

	/* The memory should already be initialized */
	return 0;
  402c62:	2300      	movs	r3, #0
}
  402c64:	4618      	mov	r0, r3
  402c66:	3710      	adds	r7, #16
  402c68:	46bd      	mov	sp, r7
  402c6a:	bd80      	pop	{r7, pc}
  402c6c:	400e1460 	.word	0x400e1460
  402c70:	00402615 	.word	0x00402615
  402c74:	00401ac1 	.word	0x00401ac1
  402c78:	00401b55 	.word	0x00401b55

00402c7c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  402c7c:	b580      	push	{r7, lr}
  402c7e:	b082      	sub	sp, #8
  402c80:	af00      	add	r7, sp, #0
  402c82:	4603      	mov	r3, r0
  402c84:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
  402c86:	79fb      	ldrb	r3, [r7, #7]
  402c88:	4618      	mov	r0, r3
  402c8a:	4b08      	ldr	r3, [pc, #32]	; (402cac <disk_status+0x30>)
  402c8c:	4798      	blx	r3
  402c8e:	4603      	mov	r3, r0
  402c90:	2b00      	cmp	r3, #0
  402c92:	d002      	beq.n	402c9a <disk_status+0x1e>
  402c94:	2b02      	cmp	r3, #2
  402c96:	d002      	beq.n	402c9e <disk_status+0x22>
  402c98:	e003      	b.n	402ca2 <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
  402c9a:	2300      	movs	r3, #0
  402c9c:	e002      	b.n	402ca4 <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
  402c9e:	2303      	movs	r3, #3
  402ca0:	e000      	b.n	402ca4 <disk_status+0x28>
	default:
		return STA_NOINIT;
  402ca2:	2301      	movs	r3, #1
	}
}
  402ca4:	4618      	mov	r0, r3
  402ca6:	3708      	adds	r7, #8
  402ca8:	46bd      	mov	sp, r7
  402caa:	bd80      	pop	{r7, pc}
  402cac:	00401ac1 	.word	0x00401ac1

00402cb0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402cb0:	b580      	push	{r7, lr}
  402cb2:	b088      	sub	sp, #32
  402cb4:	af00      	add	r7, sp, #0
  402cb6:	60b9      	str	r1, [r7, #8]
  402cb8:	607a      	str	r2, [r7, #4]
  402cba:	4602      	mov	r2, r0
  402cbc:	73fa      	strb	r2, [r7, #15]
  402cbe:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402cc0:	7bfb      	ldrb	r3, [r7, #15]
  402cc2:	4618      	mov	r0, r3
  402cc4:	4b23      	ldr	r3, [pc, #140]	; (402d54 <disk_read+0xa4>)
  402cc6:	4798      	blx	r3
  402cc8:	4603      	mov	r3, r0
  402cca:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402ccc:	7efb      	ldrb	r3, [r7, #27]
  402cce:	2b00      	cmp	r3, #0
  402cd0:	d101      	bne.n	402cd6 <disk_read+0x26>
		return RES_ERROR;
  402cd2:	2301      	movs	r3, #1
  402cd4:	e039      	b.n	402d4a <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  402cd6:	7bfa      	ldrb	r2, [r7, #15]
  402cd8:	f107 0314 	add.w	r3, r7, #20
  402cdc:	4610      	mov	r0, r2
  402cde:	4619      	mov	r1, r3
  402ce0:	4b1d      	ldr	r3, [pc, #116]	; (402d58 <disk_read+0xa8>)
  402ce2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  402ce4:	7bbb      	ldrb	r3, [r7, #14]
  402ce6:	7efa      	ldrb	r2, [r7, #27]
  402ce8:	fb02 f303 	mul.w	r3, r2, r3
  402cec:	461a      	mov	r2, r3
  402cee:	687b      	ldr	r3, [r7, #4]
  402cf0:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  402cf2:	697b      	ldr	r3, [r7, #20]
  402cf4:	3301      	adds	r3, #1
  402cf6:	7ef9      	ldrb	r1, [r7, #27]
  402cf8:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  402cfc:	429a      	cmp	r2, r3
  402cfe:	d901      	bls.n	402d04 <disk_read+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  402d00:	2304      	movs	r3, #4
  402d02:	e022      	b.n	402d4a <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  402d04:	2300      	movs	r3, #0
  402d06:	61fb      	str	r3, [r7, #28]
  402d08:	e01a      	b.n	402d40 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  402d0a:	7efb      	ldrb	r3, [r7, #27]
  402d0c:	69fa      	ldr	r2, [r7, #28]
  402d0e:	fb02 f203 	mul.w	r2, r2, r3
  402d12:	687b      	ldr	r3, [r7, #4]
  402d14:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  402d16:	7efb      	ldrb	r3, [r7, #27]
  402d18:	69f9      	ldr	r1, [r7, #28]
  402d1a:	fb01 f303 	mul.w	r3, r1, r3
  402d1e:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  402d20:	68b9      	ldr	r1, [r7, #8]
  402d22:	440b      	add	r3, r1
  402d24:	7bf9      	ldrb	r1, [r7, #15]
  402d26:	4608      	mov	r0, r1
  402d28:	4611      	mov	r1, r2
  402d2a:	461a      	mov	r2, r3
  402d2c:	4b0b      	ldr	r3, [pc, #44]	; (402d5c <disk_read+0xac>)
  402d2e:	4798      	blx	r3
  402d30:	4603      	mov	r3, r0
  402d32:	2b00      	cmp	r3, #0
  402d34:	d001      	beq.n	402d3a <disk_read+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  402d36:	2301      	movs	r3, #1
  402d38:	e007      	b.n	402d4a <disk_read+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  402d3a:	69fb      	ldr	r3, [r7, #28]
  402d3c:	3301      	adds	r3, #1
  402d3e:	61fb      	str	r3, [r7, #28]
  402d40:	7bba      	ldrb	r2, [r7, #14]
  402d42:	69fb      	ldr	r3, [r7, #28]
  402d44:	429a      	cmp	r2, r3
  402d46:	d8e0      	bhi.n	402d0a <disk_read+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  402d48:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  402d4a:	4618      	mov	r0, r3
  402d4c:	3720      	adds	r7, #32
  402d4e:	46bd      	mov	sp, r7
  402d50:	bd80      	pop	{r7, pc}
  402d52:	bf00      	nop
  402d54:	00401b2d 	.word	0x00401b2d
  402d58:	00401af5 	.word	0x00401af5
  402d5c:	00401b91 	.word	0x00401b91

00402d60 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402d60:	b580      	push	{r7, lr}
  402d62:	b088      	sub	sp, #32
  402d64:	af00      	add	r7, sp, #0
  402d66:	60b9      	str	r1, [r7, #8]
  402d68:	607a      	str	r2, [r7, #4]
  402d6a:	4602      	mov	r2, r0
  402d6c:	73fa      	strb	r2, [r7, #15]
  402d6e:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402d70:	7bfb      	ldrb	r3, [r7, #15]
  402d72:	4618      	mov	r0, r3
  402d74:	4b23      	ldr	r3, [pc, #140]	; (402e04 <disk_write+0xa4>)
  402d76:	4798      	blx	r3
  402d78:	4603      	mov	r3, r0
  402d7a:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402d7c:	7efb      	ldrb	r3, [r7, #27]
  402d7e:	2b00      	cmp	r3, #0
  402d80:	d101      	bne.n	402d86 <disk_write+0x26>
		return RES_ERROR;
  402d82:	2301      	movs	r3, #1
  402d84:	e039      	b.n	402dfa <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  402d86:	7bfa      	ldrb	r2, [r7, #15]
  402d88:	f107 0314 	add.w	r3, r7, #20
  402d8c:	4610      	mov	r0, r2
  402d8e:	4619      	mov	r1, r3
  402d90:	4b1d      	ldr	r3, [pc, #116]	; (402e08 <disk_write+0xa8>)
  402d92:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  402d94:	7bbb      	ldrb	r3, [r7, #14]
  402d96:	7efa      	ldrb	r2, [r7, #27]
  402d98:	fb02 f303 	mul.w	r3, r2, r3
  402d9c:	461a      	mov	r2, r3
  402d9e:	687b      	ldr	r3, [r7, #4]
  402da0:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  402da2:	697b      	ldr	r3, [r7, #20]
  402da4:	3301      	adds	r3, #1
  402da6:	7ef9      	ldrb	r1, [r7, #27]
  402da8:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  402dac:	429a      	cmp	r2, r3
  402dae:	d901      	bls.n	402db4 <disk_write+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  402db0:	2304      	movs	r3, #4
  402db2:	e022      	b.n	402dfa <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  402db4:	2300      	movs	r3, #0
  402db6:	61fb      	str	r3, [r7, #28]
  402db8:	e01a      	b.n	402df0 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  402dba:	7efb      	ldrb	r3, [r7, #27]
  402dbc:	69fa      	ldr	r2, [r7, #28]
  402dbe:	fb02 f203 	mul.w	r2, r2, r3
  402dc2:	687b      	ldr	r3, [r7, #4]
  402dc4:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  402dc6:	7efb      	ldrb	r3, [r7, #27]
  402dc8:	69f9      	ldr	r1, [r7, #28]
  402dca:	fb01 f303 	mul.w	r3, r1, r3
  402dce:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  402dd0:	68b9      	ldr	r1, [r7, #8]
  402dd2:	440b      	add	r3, r1
  402dd4:	7bf9      	ldrb	r1, [r7, #15]
  402dd6:	4608      	mov	r0, r1
  402dd8:	4611      	mov	r1, r2
  402dda:	461a      	mov	r2, r3
  402ddc:	4b0b      	ldr	r3, [pc, #44]	; (402e0c <disk_write+0xac>)
  402dde:	4798      	blx	r3
  402de0:	4603      	mov	r3, r0
  402de2:	2b00      	cmp	r3, #0
  402de4:	d001      	beq.n	402dea <disk_write+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  402de6:	2301      	movs	r3, #1
  402de8:	e007      	b.n	402dfa <disk_write+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  402dea:	69fb      	ldr	r3, [r7, #28]
  402dec:	3301      	adds	r3, #1
  402dee:	61fb      	str	r3, [r7, #28]
  402df0:	7bba      	ldrb	r2, [r7, #14]
  402df2:	69fb      	ldr	r3, [r7, #28]
  402df4:	429a      	cmp	r2, r3
  402df6:	d8e0      	bhi.n	402dba <disk_write+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  402df8:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  402dfa:	4618      	mov	r0, r3
  402dfc:	3720      	adds	r7, #32
  402dfe:	46bd      	mov	sp, r7
  402e00:	bd80      	pop	{r7, pc}
  402e02:	bf00      	nop
  402e04:	00401b2d 	.word	0x00401b2d
  402e08:	00401af5 	.word	0x00401af5
  402e0c:	00401bcd 	.word	0x00401bcd

00402e10 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  402e10:	b580      	push	{r7, lr}
  402e12:	b084      	sub	sp, #16
  402e14:	af00      	add	r7, sp, #0
  402e16:	460b      	mov	r3, r1
  402e18:	603a      	str	r2, [r7, #0]
  402e1a:	4602      	mov	r2, r0
  402e1c:	71fa      	strb	r2, [r7, #7]
  402e1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
  402e20:	2304      	movs	r3, #4
  402e22:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
  402e24:	79bb      	ldrb	r3, [r7, #6]
  402e26:	2b03      	cmp	r3, #3
  402e28:	d845      	bhi.n	402eb6 <disk_ioctl+0xa6>
  402e2a:	a201      	add	r2, pc, #4	; (adr r2, 402e30 <disk_ioctl+0x20>)
  402e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e30:	00402e9d 	.word	0x00402e9d
  402e34:	00402e4d 	.word	0x00402e4d
  402e38:	00402e69 	.word	0x00402e69
  402e3c:	00402e41 	.word	0x00402e41
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  402e40:	683b      	ldr	r3, [r7, #0]
  402e42:	2201      	movs	r2, #1
  402e44:	601a      	str	r2, [r3, #0]
		res = RES_OK;
  402e46:	2300      	movs	r3, #0
  402e48:	73fb      	strb	r3, [r7, #15]
		break;
  402e4a:	e036      	b.n	402eba <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  402e4c:	79fa      	ldrb	r2, [r7, #7]
  402e4e:	f107 0308 	add.w	r3, r7, #8
  402e52:	4610      	mov	r0, r2
  402e54:	4619      	mov	r1, r3
  402e56:	4b1b      	ldr	r3, [pc, #108]	; (402ec4 <disk_ioctl+0xb4>)
  402e58:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  402e5a:	68bb      	ldr	r3, [r7, #8]
  402e5c:	1c5a      	adds	r2, r3, #1
  402e5e:	683b      	ldr	r3, [r7, #0]
  402e60:	601a      	str	r2, [r3, #0]

		res = RES_OK;
  402e62:	2300      	movs	r3, #0
  402e64:	73fb      	strb	r3, [r7, #15]
	}
	break;
  402e66:	e028      	b.n	402eba <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  402e68:	79fb      	ldrb	r3, [r7, #7]
  402e6a:	4618      	mov	r0, r3
  402e6c:	4b16      	ldr	r3, [pc, #88]	; (402ec8 <disk_ioctl+0xb8>)
  402e6e:	4798      	blx	r3
  402e70:	4603      	mov	r3, r0
  402e72:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  402e74:	7bbb      	ldrb	r3, [r7, #14]
  402e76:	2b01      	cmp	r3, #1
  402e78:	d00a      	beq.n	402e90 <disk_ioctl+0x80>
  402e7a:	7bbb      	ldrb	r3, [r7, #14]
  402e7c:	2b02      	cmp	r3, #2
  402e7e:	d007      	beq.n	402e90 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  402e80:	7bbb      	ldrb	r3, [r7, #14]
  402e82:	2b04      	cmp	r3, #4
  402e84:	d004      	beq.n	402e90 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  402e86:	7bbb      	ldrb	r3, [r7, #14]
  402e88:	2b08      	cmp	r3, #8
  402e8a:	d001      	beq.n	402e90 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  402e8c:	2301      	movs	r3, #1
  402e8e:	e015      	b.n	402ebc <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  402e90:	683b      	ldr	r3, [r7, #0]
  402e92:	2200      	movs	r2, #0
  402e94:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
  402e96:	2300      	movs	r3, #0
  402e98:	73fb      	strb	r3, [r7, #15]
	}
	break;
  402e9a:	e00e      	b.n	402eba <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  402e9c:	79fb      	ldrb	r3, [r7, #7]
  402e9e:	4618      	mov	r0, r3
  402ea0:	4b0a      	ldr	r3, [pc, #40]	; (402ecc <disk_ioctl+0xbc>)
  402ea2:	4798      	blx	r3
  402ea4:	4603      	mov	r3, r0
  402ea6:	2b00      	cmp	r3, #0
  402ea8:	d102      	bne.n	402eb0 <disk_ioctl+0xa0>
			res = RES_OK;
  402eaa:	2300      	movs	r3, #0
  402eac:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
  402eae:	e004      	b.n	402eba <disk_ioctl+0xaa>
	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
  402eb0:	2303      	movs	r3, #3
  402eb2:	73fb      	strb	r3, [r7, #15]
		}
		break;
  402eb4:	e001      	b.n	402eba <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
  402eb6:	2304      	movs	r3, #4
  402eb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  402eba:	7bfb      	ldrb	r3, [r7, #15]
}
  402ebc:	4618      	mov	r0, r3
  402ebe:	3710      	adds	r7, #16
  402ec0:	46bd      	mov	sp, r7
  402ec2:	bd80      	pop	{r7, pc}
  402ec4:	00401af5 	.word	0x00401af5
  402ec8:	00401b2d 	.word	0x00401b2d
  402ecc:	00401ac1 	.word	0x00401ac1

00402ed0 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  402ed0:	b590      	push	{r4, r7, lr}
  402ed2:	b08b      	sub	sp, #44	; 0x2c
  402ed4:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  402ed6:	f107 0118 	add.w	r1, r7, #24
  402eda:	f107 0214 	add.w	r2, r7, #20
  402ede:	f107 0310 	add.w	r3, r7, #16
  402ee2:	4812      	ldr	r0, [pc, #72]	; (402f2c <get_fattime+0x5c>)
  402ee4:	4c12      	ldr	r4, [pc, #72]	; (402f30 <get_fattime+0x60>)
  402ee6:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  402ee8:	f107 010c 	add.w	r1, r7, #12
  402eec:	f107 0208 	add.w	r2, r7, #8
  402ef0:	1d3b      	adds	r3, r7, #4
  402ef2:	4638      	mov	r0, r7
  402ef4:	9000      	str	r0, [sp, #0]
  402ef6:	480d      	ldr	r0, [pc, #52]	; (402f2c <get_fattime+0x5c>)
  402ef8:	4c0e      	ldr	r4, [pc, #56]	; (402f34 <get_fattime+0x64>)
  402efa:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  402efc:	68fb      	ldr	r3, [r7, #12]
  402efe:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
  402f02:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
  402f04:	68bb      	ldr	r3, [r7, #8]
  402f06:	055b      	lsls	r3, r3, #21
  402f08:	431a      	orrs	r2, r3
			| (ul_day << 16)
  402f0a:	687b      	ldr	r3, [r7, #4]
  402f0c:	041b      	lsls	r3, r3, #16
  402f0e:	431a      	orrs	r2, r3
			| (ul_hour << 11)
  402f10:	69bb      	ldr	r3, [r7, #24]
  402f12:	02db      	lsls	r3, r3, #11
  402f14:	431a      	orrs	r2, r3
			| (ul_minute << 5)
  402f16:	697b      	ldr	r3, [r7, #20]
  402f18:	015b      	lsls	r3, r3, #5
  402f1a:	431a      	orrs	r2, r3
			| (ul_second << 0);
  402f1c:	693b      	ldr	r3, [r7, #16]

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  402f1e:	4313      	orrs	r3, r2
  402f20:	61fb      	str	r3, [r7, #28]
			| (ul_day << 16)
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
  402f22:	69fb      	ldr	r3, [r7, #28]
}
  402f24:	4618      	mov	r0, r3
  402f26:	3724      	adds	r7, #36	; 0x24
  402f28:	46bd      	mov	sp, r7
  402f2a:	bd90      	pop	{r4, r7, pc}
  402f2c:	400e1460 	.word	0x400e1460
  402f30:	00402649 	.word	0x00402649
  402f34:	0040270d 	.word	0x0040270d

00402f38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  402f38:	b480      	push	{r7}
  402f3a:	b087      	sub	sp, #28
  402f3c:	af00      	add	r7, sp, #0
  402f3e:	60f8      	str	r0, [r7, #12]
  402f40:	60b9      	str	r1, [r7, #8]
  402f42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  402f44:	68fb      	ldr	r3, [r7, #12]
  402f46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
  402f48:	68bb      	ldr	r3, [r7, #8]
  402f4a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402f4c:	e007      	b.n	402f5e <mem_cpy+0x26>
		*d++ = *s++;
  402f4e:	697b      	ldr	r3, [r7, #20]
  402f50:	1c5a      	adds	r2, r3, #1
  402f52:	617a      	str	r2, [r7, #20]
  402f54:	693a      	ldr	r2, [r7, #16]
  402f56:	1c51      	adds	r1, r2, #1
  402f58:	6139      	str	r1, [r7, #16]
  402f5a:	7812      	ldrb	r2, [r2, #0]
  402f5c:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402f5e:	687b      	ldr	r3, [r7, #4]
  402f60:	1e5a      	subs	r2, r3, #1
  402f62:	607a      	str	r2, [r7, #4]
  402f64:	2b00      	cmp	r3, #0
  402f66:	d1f2      	bne.n	402f4e <mem_cpy+0x16>
		*d++ = *s++;
}
  402f68:	371c      	adds	r7, #28
  402f6a:	46bd      	mov	sp, r7
  402f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f70:	4770      	bx	lr
  402f72:	bf00      	nop

00402f74 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  402f74:	b480      	push	{r7}
  402f76:	b087      	sub	sp, #28
  402f78:	af00      	add	r7, sp, #0
  402f7a:	60f8      	str	r0, [r7, #12]
  402f7c:	60b9      	str	r1, [r7, #8]
  402f7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  402f80:	68fb      	ldr	r3, [r7, #12]
  402f82:	617b      	str	r3, [r7, #20]

	while (cnt--)
  402f84:	e005      	b.n	402f92 <mem_set+0x1e>
		*d++ = (BYTE)val;
  402f86:	697b      	ldr	r3, [r7, #20]
  402f88:	1c5a      	adds	r2, r3, #1
  402f8a:	617a      	str	r2, [r7, #20]
  402f8c:	68ba      	ldr	r2, [r7, #8]
  402f8e:	b2d2      	uxtb	r2, r2
  402f90:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402f92:	687b      	ldr	r3, [r7, #4]
  402f94:	1e5a      	subs	r2, r3, #1
  402f96:	607a      	str	r2, [r7, #4]
  402f98:	2b00      	cmp	r3, #0
  402f9a:	d1f4      	bne.n	402f86 <mem_set+0x12>
		*d++ = (BYTE)val;
}
  402f9c:	371c      	adds	r7, #28
  402f9e:	46bd      	mov	sp, r7
  402fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fa4:	4770      	bx	lr
  402fa6:	bf00      	nop

00402fa8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
  402fa8:	b480      	push	{r7}
  402faa:	b089      	sub	sp, #36	; 0x24
  402fac:	af00      	add	r7, sp, #0
  402fae:	60f8      	str	r0, [r7, #12]
  402fb0:	60b9      	str	r1, [r7, #8]
  402fb2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  402fb4:	68fb      	ldr	r3, [r7, #12]
  402fb6:	61fb      	str	r3, [r7, #28]
  402fb8:	68bb      	ldr	r3, [r7, #8]
  402fba:	61bb      	str	r3, [r7, #24]
	int r = 0;
  402fbc:	2300      	movs	r3, #0
  402fbe:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402fc0:	bf00      	nop
  402fc2:	687b      	ldr	r3, [r7, #4]
  402fc4:	1e5a      	subs	r2, r3, #1
  402fc6:	607a      	str	r2, [r7, #4]
  402fc8:	2b00      	cmp	r3, #0
  402fca:	d00d      	beq.n	402fe8 <mem_cmp+0x40>
  402fcc:	69fb      	ldr	r3, [r7, #28]
  402fce:	1c5a      	adds	r2, r3, #1
  402fd0:	61fa      	str	r2, [r7, #28]
  402fd2:	781b      	ldrb	r3, [r3, #0]
  402fd4:	461a      	mov	r2, r3
  402fd6:	69bb      	ldr	r3, [r7, #24]
  402fd8:	1c59      	adds	r1, r3, #1
  402fda:	61b9      	str	r1, [r7, #24]
  402fdc:	781b      	ldrb	r3, [r3, #0]
  402fde:	1ad3      	subs	r3, r2, r3
  402fe0:	617b      	str	r3, [r7, #20]
  402fe2:	697b      	ldr	r3, [r7, #20]
  402fe4:	2b00      	cmp	r3, #0
  402fe6:	d0ec      	beq.n	402fc2 <mem_cmp+0x1a>
	return r;
  402fe8:	697b      	ldr	r3, [r7, #20]
}
  402fea:	4618      	mov	r0, r3
  402fec:	3724      	adds	r7, #36	; 0x24
  402fee:	46bd      	mov	sp, r7
  402ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ff4:	4770      	bx	lr
  402ff6:	bf00      	nop

00402ff8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  402ff8:	b480      	push	{r7}
  402ffa:	b083      	sub	sp, #12
  402ffc:	af00      	add	r7, sp, #0
  402ffe:	6078      	str	r0, [r7, #4]
  403000:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
  403002:	e002      	b.n	40300a <chk_chr+0x12>
  403004:	687b      	ldr	r3, [r7, #4]
  403006:	3301      	adds	r3, #1
  403008:	607b      	str	r3, [r7, #4]
  40300a:	687b      	ldr	r3, [r7, #4]
  40300c:	781b      	ldrb	r3, [r3, #0]
  40300e:	2b00      	cmp	r3, #0
  403010:	d005      	beq.n	40301e <chk_chr+0x26>
  403012:	687b      	ldr	r3, [r7, #4]
  403014:	781b      	ldrb	r3, [r3, #0]
  403016:	461a      	mov	r2, r3
  403018:	683b      	ldr	r3, [r7, #0]
  40301a:	429a      	cmp	r2, r3
  40301c:	d1f2      	bne.n	403004 <chk_chr+0xc>
	return *str;
  40301e:	687b      	ldr	r3, [r7, #4]
  403020:	781b      	ldrb	r3, [r3, #0]
}
  403022:	4618      	mov	r0, r3
  403024:	370c      	adds	r7, #12
  403026:	46bd      	mov	sp, r7
  403028:	f85d 7b04 	ldr.w	r7, [sp], #4
  40302c:	4770      	bx	lr
  40302e:	bf00      	nop

00403030 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dj,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
  403030:	b480      	push	{r7}
  403032:	b085      	sub	sp, #20
  403034:	af00      	add	r7, sp, #0
  403036:	6078      	str	r0, [r7, #4]
  403038:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  40303a:	2300      	movs	r3, #0
  40303c:	60bb      	str	r3, [r7, #8]
  40303e:	68bb      	ldr	r3, [r7, #8]
  403040:	60fb      	str	r3, [r7, #12]
  403042:	e035      	b.n	4030b0 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
  403044:	492e      	ldr	r1, [pc, #184]	; (403100 <chk_lock+0xd0>)
  403046:	68fa      	ldr	r2, [r7, #12]
  403048:	4613      	mov	r3, r2
  40304a:	005b      	lsls	r3, r3, #1
  40304c:	4413      	add	r3, r2
  40304e:	009b      	lsls	r3, r3, #2
  403050:	440b      	add	r3, r1
  403052:	681b      	ldr	r3, [r3, #0]
  403054:	2b00      	cmp	r3, #0
  403056:	d025      	beq.n	4030a4 <chk_lock+0x74>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  403058:	4929      	ldr	r1, [pc, #164]	; (403100 <chk_lock+0xd0>)
  40305a:	68fa      	ldr	r2, [r7, #12]
  40305c:	4613      	mov	r3, r2
  40305e:	005b      	lsls	r3, r3, #1
  403060:	4413      	add	r3, r2
  403062:	009b      	lsls	r3, r3, #2
  403064:	440b      	add	r3, r1
  403066:	681a      	ldr	r2, [r3, #0]
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	681b      	ldr	r3, [r3, #0]
  40306c:	429a      	cmp	r2, r3
  40306e:	d11c      	bne.n	4030aa <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
  403070:	4923      	ldr	r1, [pc, #140]	; (403100 <chk_lock+0xd0>)
  403072:	68fa      	ldr	r2, [r7, #12]
  403074:	4613      	mov	r3, r2
  403076:	005b      	lsls	r3, r3, #1
  403078:	4413      	add	r3, r2
  40307a:	009b      	lsls	r3, r3, #2
  40307c:	440b      	add	r3, r1
  40307e:	685a      	ldr	r2, [r3, #4]
  403080:	687b      	ldr	r3, [r7, #4]
  403082:	689b      	ldr	r3, [r3, #8]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  403084:	429a      	cmp	r2, r3
  403086:	d110      	bne.n	4030aa <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
				Files[i].idx == dj->index) break;
  403088:	491d      	ldr	r1, [pc, #116]	; (403100 <chk_lock+0xd0>)
  40308a:	68fa      	ldr	r2, [r7, #12]
  40308c:	4613      	mov	r3, r2
  40308e:	005b      	lsls	r3, r3, #1
  403090:	4413      	add	r3, r2
  403092:	009b      	lsls	r3, r3, #2
  403094:	440b      	add	r3, r1
  403096:	3308      	adds	r3, #8
  403098:	881a      	ldrh	r2, [r3, #0]
  40309a:	687b      	ldr	r3, [r7, #4]
  40309c:	88db      	ldrh	r3, [r3, #6]

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
				Files[i].clu == dj->sclust &&
  40309e:	429a      	cmp	r2, r3
  4030a0:	d103      	bne.n	4030aa <chk_lock+0x7a>
				Files[i].idx == dj->index) break;
  4030a2:	e008      	b.n	4030b6 <chk_lock+0x86>
		} else {			/* Blank entry */
			be++;
  4030a4:	68bb      	ldr	r3, [r7, #8]
  4030a6:	3301      	adds	r3, #1
  4030a8:	60bb      	str	r3, [r7, #8]
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  4030aa:	68fb      	ldr	r3, [r7, #12]
  4030ac:	3301      	adds	r3, #1
  4030ae:	60fb      	str	r3, [r7, #12]
  4030b0:	68fb      	ldr	r3, [r7, #12]
  4030b2:	2b02      	cmp	r3, #2
  4030b4:	d9c6      	bls.n	403044 <chk_lock+0x14>
				Files[i].idx == dj->index) break;
		} else {			/* Blank entry */
			be++;
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
  4030b6:	68fb      	ldr	r3, [r7, #12]
  4030b8:	2b03      	cmp	r3, #3
  4030ba:	d109      	bne.n	4030d0 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
  4030bc:	68bb      	ldr	r3, [r7, #8]
  4030be:	2b00      	cmp	r3, #0
  4030c0:	d102      	bne.n	4030c8 <chk_lock+0x98>
  4030c2:	683b      	ldr	r3, [r7, #0]
  4030c4:	2b02      	cmp	r3, #2
  4030c6:	d101      	bne.n	4030cc <chk_lock+0x9c>
  4030c8:	2300      	movs	r3, #0
  4030ca:	e013      	b.n	4030f4 <chk_lock+0xc4>
  4030cc:	2312      	movs	r3, #18
  4030ce:	e011      	b.n	4030f4 <chk_lock+0xc4>

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
  4030d0:	683b      	ldr	r3, [r7, #0]
  4030d2:	2b00      	cmp	r3, #0
  4030d4:	d10b      	bne.n	4030ee <chk_lock+0xbe>
  4030d6:	490a      	ldr	r1, [pc, #40]	; (403100 <chk_lock+0xd0>)
  4030d8:	68fa      	ldr	r2, [r7, #12]
  4030da:	4613      	mov	r3, r2
  4030dc:	005b      	lsls	r3, r3, #1
  4030de:	4413      	add	r3, r2
  4030e0:	009b      	lsls	r3, r3, #2
  4030e2:	440b      	add	r3, r1
  4030e4:	3308      	adds	r3, #8
  4030e6:	885b      	ldrh	r3, [r3, #2]
  4030e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4030ec:	d101      	bne.n	4030f2 <chk_lock+0xc2>
  4030ee:	2310      	movs	r3, #16
  4030f0:	e000      	b.n	4030f4 <chk_lock+0xc4>
  4030f2:	2300      	movs	r3, #0
}
  4030f4:	4618      	mov	r0, r3
  4030f6:	3714      	adds	r7, #20
  4030f8:	46bd      	mov	sp, r7
  4030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030fe:	4770      	bx	lr
  403100:	20000dd8 	.word	0x20000dd8

00403104 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new file */
{
  403104:	b480      	push	{r7}
  403106:	b083      	sub	sp, #12
  403108:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  40310a:	2300      	movs	r3, #0
  40310c:	607b      	str	r3, [r7, #4]
  40310e:	e002      	b.n	403116 <enq_lock+0x12>
  403110:	687b      	ldr	r3, [r7, #4]
  403112:	3301      	adds	r3, #1
  403114:	607b      	str	r3, [r7, #4]
  403116:	687b      	ldr	r3, [r7, #4]
  403118:	2b02      	cmp	r3, #2
  40311a:	d809      	bhi.n	403130 <enq_lock+0x2c>
  40311c:	490a      	ldr	r1, [pc, #40]	; (403148 <enq_lock+0x44>)
  40311e:	687a      	ldr	r2, [r7, #4]
  403120:	4613      	mov	r3, r2
  403122:	005b      	lsls	r3, r3, #1
  403124:	4413      	add	r3, r2
  403126:	009b      	lsls	r3, r3, #2
  403128:	440b      	add	r3, r1
  40312a:	681b      	ldr	r3, [r3, #0]
  40312c:	2b00      	cmp	r3, #0
  40312e:	d1ef      	bne.n	403110 <enq_lock+0xc>
	return (i == _FS_SHARE) ? 0 : 1;
  403130:	687b      	ldr	r3, [r7, #4]
  403132:	2b03      	cmp	r3, #3
  403134:	bf0c      	ite	eq
  403136:	2300      	moveq	r3, #0
  403138:	2301      	movne	r3, #1
  40313a:	b2db      	uxtb	r3, r3
}
  40313c:	4618      	mov	r0, r3
  40313e:	370c      	adds	r7, #12
  403140:	46bd      	mov	sp, r7
  403142:	f85d 7b04 	ldr.w	r7, [sp], #4
  403146:	4770      	bx	lr
  403148:	20000dd8 	.word	0x20000dd8

0040314c <inc_lock>:
static
UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
	DIR* dj,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access mode (0:Read, !0:Write) */
)
{
  40314c:	b480      	push	{r7}
  40314e:	b085      	sub	sp, #20
  403150:	af00      	add	r7, sp, #0
  403152:	6078      	str	r0, [r7, #4]
  403154:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  403156:	2300      	movs	r3, #0
  403158:	60fb      	str	r3, [r7, #12]
  40315a:	e028      	b.n	4031ae <inc_lock+0x62>
		if (Files[i].fs == dj->fs &&
  40315c:	4951      	ldr	r1, [pc, #324]	; (4032a4 <inc_lock+0x158>)
  40315e:	68fa      	ldr	r2, [r7, #12]
  403160:	4613      	mov	r3, r2
  403162:	005b      	lsls	r3, r3, #1
  403164:	4413      	add	r3, r2
  403166:	009b      	lsls	r3, r3, #2
  403168:	440b      	add	r3, r1
  40316a:	681a      	ldr	r2, [r3, #0]
  40316c:	687b      	ldr	r3, [r7, #4]
  40316e:	681b      	ldr	r3, [r3, #0]
  403170:	429a      	cmp	r2, r3
  403172:	d119      	bne.n	4031a8 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
  403174:	494b      	ldr	r1, [pc, #300]	; (4032a4 <inc_lock+0x158>)
  403176:	68fa      	ldr	r2, [r7, #12]
  403178:	4613      	mov	r3, r2
  40317a:	005b      	lsls	r3, r3, #1
  40317c:	4413      	add	r3, r2
  40317e:	009b      	lsls	r3, r3, #2
  403180:	440b      	add	r3, r1
  403182:	685a      	ldr	r2, [r3, #4]
  403184:	687b      	ldr	r3, [r7, #4]
  403186:	689b      	ldr	r3, [r3, #8]
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
  403188:	429a      	cmp	r2, r3
  40318a:	d10d      	bne.n	4031a8 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
  40318c:	4945      	ldr	r1, [pc, #276]	; (4032a4 <inc_lock+0x158>)
  40318e:	68fa      	ldr	r2, [r7, #12]
  403190:	4613      	mov	r3, r2
  403192:	005b      	lsls	r3, r3, #1
  403194:	4413      	add	r3, r2
  403196:	009b      	lsls	r3, r3, #2
  403198:	440b      	add	r3, r1
  40319a:	3308      	adds	r3, #8
  40319c:	881a      	ldrh	r2, [r3, #0]
  40319e:	687b      	ldr	r3, [r7, #4]
  4031a0:	88db      	ldrh	r3, [r3, #6]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
  4031a2:	429a      	cmp	r2, r3
  4031a4:	d100      	bne.n	4031a8 <inc_lock+0x5c>
			Files[i].idx == dj->index) break;
  4031a6:	e005      	b.n	4031b4 <inc_lock+0x68>
)
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  4031a8:	68fb      	ldr	r3, [r7, #12]
  4031aa:	3301      	adds	r3, #1
  4031ac:	60fb      	str	r3, [r7, #12]
  4031ae:	68fb      	ldr	r3, [r7, #12]
  4031b0:	2b02      	cmp	r3, #2
  4031b2:	d9d3      	bls.n	40315c <inc_lock+0x10>
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
  4031b4:	68fb      	ldr	r3, [r7, #12]
  4031b6:	2b03      	cmp	r3, #3
  4031b8:	d141      	bne.n	40323e <inc_lock+0xf2>
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  4031ba:	2300      	movs	r3, #0
  4031bc:	60fb      	str	r3, [r7, #12]
  4031be:	e002      	b.n	4031c6 <inc_lock+0x7a>
  4031c0:	68fb      	ldr	r3, [r7, #12]
  4031c2:	3301      	adds	r3, #1
  4031c4:	60fb      	str	r3, [r7, #12]
  4031c6:	68fb      	ldr	r3, [r7, #12]
  4031c8:	2b02      	cmp	r3, #2
  4031ca:	d809      	bhi.n	4031e0 <inc_lock+0x94>
  4031cc:	4935      	ldr	r1, [pc, #212]	; (4032a4 <inc_lock+0x158>)
  4031ce:	68fa      	ldr	r2, [r7, #12]
  4031d0:	4613      	mov	r3, r2
  4031d2:	005b      	lsls	r3, r3, #1
  4031d4:	4413      	add	r3, r2
  4031d6:	009b      	lsls	r3, r3, #2
  4031d8:	440b      	add	r3, r1
  4031da:	681b      	ldr	r3, [r3, #0]
  4031dc:	2b00      	cmp	r3, #0
  4031de:	d1ef      	bne.n	4031c0 <inc_lock+0x74>
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
  4031e0:	68fb      	ldr	r3, [r7, #12]
  4031e2:	2b03      	cmp	r3, #3
  4031e4:	d101      	bne.n	4031ea <inc_lock+0x9e>
  4031e6:	2300      	movs	r3, #0
  4031e8:	e055      	b.n	403296 <inc_lock+0x14a>
		Files[i].fs = dj->fs;
  4031ea:	687b      	ldr	r3, [r7, #4]
  4031ec:	6819      	ldr	r1, [r3, #0]
  4031ee:	482d      	ldr	r0, [pc, #180]	; (4032a4 <inc_lock+0x158>)
  4031f0:	68fa      	ldr	r2, [r7, #12]
  4031f2:	4613      	mov	r3, r2
  4031f4:	005b      	lsls	r3, r3, #1
  4031f6:	4413      	add	r3, r2
  4031f8:	009b      	lsls	r3, r3, #2
  4031fa:	4403      	add	r3, r0
  4031fc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dj->sclust;
  4031fe:	687b      	ldr	r3, [r7, #4]
  403200:	6899      	ldr	r1, [r3, #8]
  403202:	4828      	ldr	r0, [pc, #160]	; (4032a4 <inc_lock+0x158>)
  403204:	68fa      	ldr	r2, [r7, #12]
  403206:	4613      	mov	r3, r2
  403208:	005b      	lsls	r3, r3, #1
  40320a:	4413      	add	r3, r2
  40320c:	009b      	lsls	r3, r3, #2
  40320e:	4403      	add	r3, r0
  403210:	6059      	str	r1, [r3, #4]
		Files[i].idx = dj->index;
  403212:	687b      	ldr	r3, [r7, #4]
  403214:	88d9      	ldrh	r1, [r3, #6]
  403216:	4823      	ldr	r0, [pc, #140]	; (4032a4 <inc_lock+0x158>)
  403218:	68fa      	ldr	r2, [r7, #12]
  40321a:	4613      	mov	r3, r2
  40321c:	005b      	lsls	r3, r3, #1
  40321e:	4413      	add	r3, r2
  403220:	009b      	lsls	r3, r3, #2
  403222:	4403      	add	r3, r0
  403224:	3308      	adds	r3, #8
  403226:	460a      	mov	r2, r1
  403228:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
  40322a:	491e      	ldr	r1, [pc, #120]	; (4032a4 <inc_lock+0x158>)
  40322c:	68fa      	ldr	r2, [r7, #12]
  40322e:	4613      	mov	r3, r2
  403230:	005b      	lsls	r3, r3, #1
  403232:	4413      	add	r3, r2
  403234:	009b      	lsls	r3, r3, #2
  403236:	440b      	add	r3, r1
  403238:	3308      	adds	r3, #8
  40323a:	2200      	movs	r2, #0
  40323c:	805a      	strh	r2, [r3, #2]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  40323e:	683b      	ldr	r3, [r7, #0]
  403240:	2b00      	cmp	r3, #0
  403242:	d00c      	beq.n	40325e <inc_lock+0x112>
  403244:	4917      	ldr	r1, [pc, #92]	; (4032a4 <inc_lock+0x158>)
  403246:	68fa      	ldr	r2, [r7, #12]
  403248:	4613      	mov	r3, r2
  40324a:	005b      	lsls	r3, r3, #1
  40324c:	4413      	add	r3, r2
  40324e:	009b      	lsls	r3, r3, #2
  403250:	440b      	add	r3, r1
  403252:	3308      	adds	r3, #8
  403254:	885b      	ldrh	r3, [r3, #2]
  403256:	2b00      	cmp	r3, #0
  403258:	d001      	beq.n	40325e <inc_lock+0x112>
  40325a:	2300      	movs	r3, #0
  40325c:	e01b      	b.n	403296 <inc_lock+0x14a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  40325e:	683b      	ldr	r3, [r7, #0]
  403260:	2b00      	cmp	r3, #0
  403262:	d10b      	bne.n	40327c <inc_lock+0x130>
  403264:	490f      	ldr	r1, [pc, #60]	; (4032a4 <inc_lock+0x158>)
  403266:	68fa      	ldr	r2, [r7, #12]
  403268:	4613      	mov	r3, r2
  40326a:	005b      	lsls	r3, r3, #1
  40326c:	4413      	add	r3, r2
  40326e:	009b      	lsls	r3, r3, #2
  403270:	440b      	add	r3, r1
  403272:	3308      	adds	r3, #8
  403274:	885b      	ldrh	r3, [r3, #2]
  403276:	3301      	adds	r3, #1
  403278:	b29a      	uxth	r2, r3
  40327a:	e001      	b.n	403280 <inc_lock+0x134>
  40327c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403280:	4808      	ldr	r0, [pc, #32]	; (4032a4 <inc_lock+0x158>)
  403282:	68f9      	ldr	r1, [r7, #12]
  403284:	460b      	mov	r3, r1
  403286:	005b      	lsls	r3, r3, #1
  403288:	440b      	add	r3, r1
  40328a:	009b      	lsls	r3, r3, #2
  40328c:	4403      	add	r3, r0
  40328e:	3308      	adds	r3, #8
  403290:	805a      	strh	r2, [r3, #2]

	return i + 1;
  403292:	68fb      	ldr	r3, [r7, #12]
  403294:	3301      	adds	r3, #1
}
  403296:	4618      	mov	r0, r3
  403298:	3714      	adds	r7, #20
  40329a:	46bd      	mov	sp, r7
  40329c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032a0:	4770      	bx	lr
  4032a2:	bf00      	nop
  4032a4:	20000dd8 	.word	0x20000dd8

004032a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement file open counter */
	UINT i			/* Semaphore index */
)
{
  4032a8:	b480      	push	{r7}
  4032aa:	b085      	sub	sp, #20
  4032ac:	af00      	add	r7, sp, #0
  4032ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_SHARE) {
  4032b0:	687b      	ldr	r3, [r7, #4]
  4032b2:	3b01      	subs	r3, #1
  4032b4:	607b      	str	r3, [r7, #4]
  4032b6:	687b      	ldr	r3, [r7, #4]
  4032b8:	2b02      	cmp	r3, #2
  4032ba:	d82e      	bhi.n	40331a <dec_lock+0x72>
		n = Files[i].ctr;
  4032bc:	491b      	ldr	r1, [pc, #108]	; (40332c <dec_lock+0x84>)
  4032be:	687a      	ldr	r2, [r7, #4]
  4032c0:	4613      	mov	r3, r2
  4032c2:	005b      	lsls	r3, r3, #1
  4032c4:	4413      	add	r3, r2
  4032c6:	009b      	lsls	r3, r3, #2
  4032c8:	440b      	add	r3, r1
  4032ca:	3308      	adds	r3, #8
  4032cc:	885b      	ldrh	r3, [r3, #2]
  4032ce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;
  4032d0:	89fb      	ldrh	r3, [r7, #14]
  4032d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4032d6:	d101      	bne.n	4032dc <dec_lock+0x34>
  4032d8:	2300      	movs	r3, #0
  4032da:	81fb      	strh	r3, [r7, #14]
		if (n) n--;
  4032dc:	89fb      	ldrh	r3, [r7, #14]
  4032de:	2b00      	cmp	r3, #0
  4032e0:	d002      	beq.n	4032e8 <dec_lock+0x40>
  4032e2:	89fb      	ldrh	r3, [r7, #14]
  4032e4:	3b01      	subs	r3, #1
  4032e6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
  4032e8:	4910      	ldr	r1, [pc, #64]	; (40332c <dec_lock+0x84>)
  4032ea:	687a      	ldr	r2, [r7, #4]
  4032ec:	4613      	mov	r3, r2
  4032ee:	005b      	lsls	r3, r3, #1
  4032f0:	4413      	add	r3, r2
  4032f2:	009b      	lsls	r3, r3, #2
  4032f4:	440b      	add	r3, r1
  4032f6:	3308      	adds	r3, #8
  4032f8:	89fa      	ldrh	r2, [r7, #14]
  4032fa:	805a      	strh	r2, [r3, #2]
		if (!n) Files[i].fs = 0;
  4032fc:	89fb      	ldrh	r3, [r7, #14]
  4032fe:	2b00      	cmp	r3, #0
  403300:	d108      	bne.n	403314 <dec_lock+0x6c>
  403302:	490a      	ldr	r1, [pc, #40]	; (40332c <dec_lock+0x84>)
  403304:	687a      	ldr	r2, [r7, #4]
  403306:	4613      	mov	r3, r2
  403308:	005b      	lsls	r3, r3, #1
  40330a:	4413      	add	r3, r2
  40330c:	009b      	lsls	r3, r3, #2
  40330e:	440b      	add	r3, r1
  403310:	2200      	movs	r2, #0
  403312:	601a      	str	r2, [r3, #0]
		res = FR_OK;
  403314:	2300      	movs	r3, #0
  403316:	737b      	strb	r3, [r7, #13]
  403318:	e001      	b.n	40331e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;
  40331a:	2302      	movs	r3, #2
  40331c:	737b      	strb	r3, [r7, #13]
	}
	return res;
  40331e:	7b7b      	ldrb	r3, [r7, #13]
}
  403320:	4618      	mov	r0, r3
  403322:	3714      	adds	r7, #20
  403324:	46bd      	mov	sp, r7
  403326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40332a:	4770      	bx	lr
  40332c:	20000dd8 	.word	0x20000dd8

00403330 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
  403330:	b480      	push	{r7}
  403332:	b085      	sub	sp, #20
  403334:	af00      	add	r7, sp, #0
  403336:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  403338:	2300      	movs	r3, #0
  40333a:	60fb      	str	r3, [r7, #12]
  40333c:	e016      	b.n	40336c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
  40333e:	490f      	ldr	r1, [pc, #60]	; (40337c <clear_lock+0x4c>)
  403340:	68fa      	ldr	r2, [r7, #12]
  403342:	4613      	mov	r3, r2
  403344:	005b      	lsls	r3, r3, #1
  403346:	4413      	add	r3, r2
  403348:	009b      	lsls	r3, r3, #2
  40334a:	440b      	add	r3, r1
  40334c:	681a      	ldr	r2, [r3, #0]
  40334e:	687b      	ldr	r3, [r7, #4]
  403350:	429a      	cmp	r2, r3
  403352:	d108      	bne.n	403366 <clear_lock+0x36>
  403354:	4909      	ldr	r1, [pc, #36]	; (40337c <clear_lock+0x4c>)
  403356:	68fa      	ldr	r2, [r7, #12]
  403358:	4613      	mov	r3, r2
  40335a:	005b      	lsls	r3, r3, #1
  40335c:	4413      	add	r3, r2
  40335e:	009b      	lsls	r3, r3, #2
  403360:	440b      	add	r3, r1
  403362:	2200      	movs	r2, #0
  403364:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  403366:	68fb      	ldr	r3, [r7, #12]
  403368:	3301      	adds	r3, #1
  40336a:	60fb      	str	r3, [r7, #12]
  40336c:	68fb      	ldr	r3, [r7, #12]
  40336e:	2b02      	cmp	r3, #2
  403370:	d9e5      	bls.n	40333e <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
  403372:	3714      	adds	r7, #20
  403374:	46bd      	mov	sp, r7
  403376:	f85d 7b04 	ldr.w	r7, [sp], #4
  40337a:	4770      	bx	lr
  40337c:	20000dd8 	.word	0x20000dd8

00403380 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  403380:	b590      	push	{r4, r7, lr}
  403382:	b085      	sub	sp, #20
  403384:	af00      	add	r7, sp, #0
  403386:	6078      	str	r0, [r7, #4]
  403388:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
  40338a:	687b      	ldr	r3, [r7, #4]
  40338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40338e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
  403390:	68fa      	ldr	r2, [r7, #12]
  403392:	683b      	ldr	r3, [r7, #0]
  403394:	429a      	cmp	r2, r3
  403396:	d04b      	beq.n	403430 <move_window+0xb0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  403398:	687b      	ldr	r3, [r7, #4]
  40339a:	791b      	ldrb	r3, [r3, #4]
  40339c:	2b00      	cmp	r3, #0
  40339e:	d032      	beq.n	403406 <move_window+0x86>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  4033a0:	687b      	ldr	r3, [r7, #4]
  4033a2:	785a      	ldrb	r2, [r3, #1]
  4033a4:	687b      	ldr	r3, [r7, #4]
  4033a6:	3330      	adds	r3, #48	; 0x30
  4033a8:	4610      	mov	r0, r2
  4033aa:	4619      	mov	r1, r3
  4033ac:	68fa      	ldr	r2, [r7, #12]
  4033ae:	2301      	movs	r3, #1
  4033b0:	4c22      	ldr	r4, [pc, #136]	; (40343c <move_window+0xbc>)
  4033b2:	47a0      	blx	r4
  4033b4:	4603      	mov	r3, r0
  4033b6:	2b00      	cmp	r3, #0
  4033b8:	d001      	beq.n	4033be <move_window+0x3e>
				return FR_DISK_ERR;
  4033ba:	2301      	movs	r3, #1
  4033bc:	e039      	b.n	403432 <move_window+0xb2>
			fs->wflag = 0;
  4033be:	687b      	ldr	r3, [r7, #4]
  4033c0:	2200      	movs	r2, #0
  4033c2:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  4033c4:	687b      	ldr	r3, [r7, #4]
  4033c6:	6a1a      	ldr	r2, [r3, #32]
  4033c8:	687b      	ldr	r3, [r7, #4]
  4033ca:	69db      	ldr	r3, [r3, #28]
  4033cc:	441a      	add	r2, r3
  4033ce:	68fb      	ldr	r3, [r7, #12]
  4033d0:	429a      	cmp	r2, r3
  4033d2:	d918      	bls.n	403406 <move_window+0x86>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4033d4:	687b      	ldr	r3, [r7, #4]
  4033d6:	78db      	ldrb	r3, [r3, #3]
  4033d8:	72fb      	strb	r3, [r7, #11]
  4033da:	e011      	b.n	403400 <move_window+0x80>
					wsect += fs->fsize;
  4033dc:	687b      	ldr	r3, [r7, #4]
  4033de:	69db      	ldr	r3, [r3, #28]
  4033e0:	68fa      	ldr	r2, [r7, #12]
  4033e2:	4413      	add	r3, r2
  4033e4:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
  4033e6:	687b      	ldr	r3, [r7, #4]
  4033e8:	785a      	ldrb	r2, [r3, #1]
  4033ea:	687b      	ldr	r3, [r7, #4]
  4033ec:	3330      	adds	r3, #48	; 0x30
  4033ee:	4610      	mov	r0, r2
  4033f0:	4619      	mov	r1, r3
  4033f2:	68fa      	ldr	r2, [r7, #12]
  4033f4:	2301      	movs	r3, #1
  4033f6:	4c11      	ldr	r4, [pc, #68]	; (40343c <move_window+0xbc>)
  4033f8:	47a0      	blx	r4
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4033fa:	7afb      	ldrb	r3, [r7, #11]
  4033fc:	3b01      	subs	r3, #1
  4033fe:	72fb      	strb	r3, [r7, #11]
  403400:	7afb      	ldrb	r3, [r7, #11]
  403402:	2b01      	cmp	r3, #1
  403404:	d8ea      	bhi.n	4033dc <move_window+0x5c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  403406:	683b      	ldr	r3, [r7, #0]
  403408:	2b00      	cmp	r3, #0
  40340a:	d011      	beq.n	403430 <move_window+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  40340c:	687b      	ldr	r3, [r7, #4]
  40340e:	785a      	ldrb	r2, [r3, #1]
  403410:	687b      	ldr	r3, [r7, #4]
  403412:	3330      	adds	r3, #48	; 0x30
  403414:	4610      	mov	r0, r2
  403416:	4619      	mov	r1, r3
  403418:	683a      	ldr	r2, [r7, #0]
  40341a:	2301      	movs	r3, #1
  40341c:	4c08      	ldr	r4, [pc, #32]	; (403440 <move_window+0xc0>)
  40341e:	47a0      	blx	r4
  403420:	4603      	mov	r3, r0
  403422:	2b00      	cmp	r3, #0
  403424:	d001      	beq.n	40342a <move_window+0xaa>
				return FR_DISK_ERR;
  403426:	2301      	movs	r3, #1
  403428:	e003      	b.n	403432 <move_window+0xb2>
			fs->winsect = sector;
  40342a:	687b      	ldr	r3, [r7, #4]
  40342c:	683a      	ldr	r2, [r7, #0]
  40342e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
  403430:	2300      	movs	r3, #0
}
  403432:	4618      	mov	r0, r3
  403434:	3714      	adds	r7, #20
  403436:	46bd      	mov	sp, r7
  403438:	bd90      	pop	{r4, r7, pc}
  40343a:	bf00      	nop
  40343c:	00402d61 	.word	0x00402d61
  403440:	00402cb1 	.word	0x00402cb1

00403444 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  403444:	b590      	push	{r4, r7, lr}
  403446:	b085      	sub	sp, #20
  403448:	af00      	add	r7, sp, #0
  40344a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
  40344c:	6878      	ldr	r0, [r7, #4]
  40344e:	2100      	movs	r1, #0
  403450:	4b4f      	ldr	r3, [pc, #316]	; (403590 <sync+0x14c>)
  403452:	4798      	blx	r3
  403454:	4603      	mov	r3, r0
  403456:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  403458:	7bfb      	ldrb	r3, [r7, #15]
  40345a:	2b00      	cmp	r3, #0
  40345c:	f040 8092 	bne.w	403584 <sync+0x140>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  403460:	687b      	ldr	r3, [r7, #4]
  403462:	781b      	ldrb	r3, [r3, #0]
  403464:	2b03      	cmp	r3, #3
  403466:	f040 8081 	bne.w	40356c <sync+0x128>
  40346a:	687b      	ldr	r3, [r7, #4]
  40346c:	795b      	ldrb	r3, [r3, #5]
  40346e:	2b00      	cmp	r3, #0
  403470:	d07c      	beq.n	40356c <sync+0x128>
			fs->winsect = 0;
  403472:	687b      	ldr	r3, [r7, #4]
  403474:	2200      	movs	r2, #0
  403476:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  403478:	687b      	ldr	r3, [r7, #4]
  40347a:	3330      	adds	r3, #48	; 0x30
  40347c:	4618      	mov	r0, r3
  40347e:	2100      	movs	r1, #0
  403480:	f44f 7200 	mov.w	r2, #512	; 0x200
  403484:	4b43      	ldr	r3, [pc, #268]	; (403594 <sync+0x150>)
  403486:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  403488:	687b      	ldr	r3, [r7, #4]
  40348a:	2255      	movs	r2, #85	; 0x55
  40348c:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  403490:	687b      	ldr	r3, [r7, #4]
  403492:	22aa      	movs	r2, #170	; 0xaa
  403494:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  403498:	687b      	ldr	r3, [r7, #4]
  40349a:	2252      	movs	r2, #82	; 0x52
  40349c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  4034a0:	687b      	ldr	r3, [r7, #4]
  4034a2:	2252      	movs	r2, #82	; 0x52
  4034a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  4034a8:	687b      	ldr	r3, [r7, #4]
  4034aa:	2261      	movs	r2, #97	; 0x61
  4034ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  4034b0:	687b      	ldr	r3, [r7, #4]
  4034b2:	2241      	movs	r2, #65	; 0x41
  4034b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4034b8:	687b      	ldr	r3, [r7, #4]
  4034ba:	2272      	movs	r2, #114	; 0x72
  4034bc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
  4034c0:	687b      	ldr	r3, [r7, #4]
  4034c2:	2272      	movs	r2, #114	; 0x72
  4034c4:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  4034c8:	687b      	ldr	r3, [r7, #4]
  4034ca:	2241      	movs	r2, #65	; 0x41
  4034cc:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
  4034d0:	687b      	ldr	r3, [r7, #4]
  4034d2:	2261      	movs	r2, #97	; 0x61
  4034d4:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4034d8:	687b      	ldr	r3, [r7, #4]
  4034da:	691b      	ldr	r3, [r3, #16]
  4034dc:	b2da      	uxtb	r2, r3
  4034de:	687b      	ldr	r3, [r7, #4]
  4034e0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  4034e4:	687b      	ldr	r3, [r7, #4]
  4034e6:	691b      	ldr	r3, [r3, #16]
  4034e8:	b29b      	uxth	r3, r3
  4034ea:	0a1b      	lsrs	r3, r3, #8
  4034ec:	b29b      	uxth	r3, r3
  4034ee:	b2da      	uxtb	r2, r3
  4034f0:	687b      	ldr	r3, [r7, #4]
  4034f2:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  4034f6:	687b      	ldr	r3, [r7, #4]
  4034f8:	691b      	ldr	r3, [r3, #16]
  4034fa:	0c1b      	lsrs	r3, r3, #16
  4034fc:	b2da      	uxtb	r2, r3
  4034fe:	687b      	ldr	r3, [r7, #4]
  403500:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  403504:	687b      	ldr	r3, [r7, #4]
  403506:	691b      	ldr	r3, [r3, #16]
  403508:	0e1b      	lsrs	r3, r3, #24
  40350a:	b2da      	uxtb	r2, r3
  40350c:	687b      	ldr	r3, [r7, #4]
  40350e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  403512:	687b      	ldr	r3, [r7, #4]
  403514:	68db      	ldr	r3, [r3, #12]
  403516:	b2da      	uxtb	r2, r3
  403518:	687b      	ldr	r3, [r7, #4]
  40351a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  40351e:	687b      	ldr	r3, [r7, #4]
  403520:	68db      	ldr	r3, [r3, #12]
  403522:	b29b      	uxth	r3, r3
  403524:	0a1b      	lsrs	r3, r3, #8
  403526:	b29b      	uxth	r3, r3
  403528:	b2da      	uxtb	r2, r3
  40352a:	687b      	ldr	r3, [r7, #4]
  40352c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  403530:	687b      	ldr	r3, [r7, #4]
  403532:	68db      	ldr	r3, [r3, #12]
  403534:	0c1b      	lsrs	r3, r3, #16
  403536:	b2da      	uxtb	r2, r3
  403538:	687b      	ldr	r3, [r7, #4]
  40353a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
  40353e:	687b      	ldr	r3, [r7, #4]
  403540:	68db      	ldr	r3, [r3, #12]
  403542:	0e1b      	lsrs	r3, r3, #24
  403544:	b2da      	uxtb	r2, r3
  403546:	687b      	ldr	r3, [r7, #4]
  403548:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40354c:	687b      	ldr	r3, [r7, #4]
  40354e:	7859      	ldrb	r1, [r3, #1]
  403550:	687b      	ldr	r3, [r7, #4]
  403552:	f103 0230 	add.w	r2, r3, #48	; 0x30
  403556:	687b      	ldr	r3, [r7, #4]
  403558:	695b      	ldr	r3, [r3, #20]
  40355a:	4608      	mov	r0, r1
  40355c:	4611      	mov	r1, r2
  40355e:	461a      	mov	r2, r3
  403560:	2301      	movs	r3, #1
  403562:	4c0d      	ldr	r4, [pc, #52]	; (403598 <sync+0x154>)
  403564:	47a0      	blx	r4
			fs->fsi_flag = 0;
  403566:	687b      	ldr	r3, [r7, #4]
  403568:	2200      	movs	r2, #0
  40356a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  40356c:	687b      	ldr	r3, [r7, #4]
  40356e:	785b      	ldrb	r3, [r3, #1]
  403570:	4618      	mov	r0, r3
  403572:	2100      	movs	r1, #0
  403574:	2200      	movs	r2, #0
  403576:	4b09      	ldr	r3, [pc, #36]	; (40359c <sync+0x158>)
  403578:	4798      	blx	r3
  40357a:	4603      	mov	r3, r0
  40357c:	2b00      	cmp	r3, #0
  40357e:	d001      	beq.n	403584 <sync+0x140>
			res = FR_DISK_ERR;
  403580:	2301      	movs	r3, #1
  403582:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  403584:	7bfb      	ldrb	r3, [r7, #15]
}
  403586:	4618      	mov	r0, r3
  403588:	3714      	adds	r7, #20
  40358a:	46bd      	mov	sp, r7
  40358c:	bd90      	pop	{r4, r7, pc}
  40358e:	bf00      	nop
  403590:	00403381 	.word	0x00403381
  403594:	00402f75 	.word	0x00402f75
  403598:	00402d61 	.word	0x00402d61
  40359c:	00402e11 	.word	0x00402e11

004035a0 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
  4035a0:	b480      	push	{r7}
  4035a2:	b083      	sub	sp, #12
  4035a4:	af00      	add	r7, sp, #0
  4035a6:	6078      	str	r0, [r7, #4]
  4035a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
  4035aa:	683b      	ldr	r3, [r7, #0]
  4035ac:	3b02      	subs	r3, #2
  4035ae:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4035b0:	687b      	ldr	r3, [r7, #4]
  4035b2:	699b      	ldr	r3, [r3, #24]
  4035b4:	1e9a      	subs	r2, r3, #2
  4035b6:	683b      	ldr	r3, [r7, #0]
  4035b8:	429a      	cmp	r2, r3
  4035ba:	d801      	bhi.n	4035c0 <clust2sect+0x20>
  4035bc:	2300      	movs	r3, #0
  4035be:	e007      	b.n	4035d0 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
  4035c0:	687b      	ldr	r3, [r7, #4]
  4035c2:	789b      	ldrb	r3, [r3, #2]
  4035c4:	683a      	ldr	r2, [r7, #0]
  4035c6:	fb02 f203 	mul.w	r2, r2, r3
  4035ca:	687b      	ldr	r3, [r7, #4]
  4035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4035ce:	4413      	add	r3, r2
}
  4035d0:	4618      	mov	r0, r3
  4035d2:	370c      	adds	r7, #12
  4035d4:	46bd      	mov	sp, r7
  4035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035da:	4770      	bx	lr

004035dc <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  4035dc:	b580      	push	{r7, lr}
  4035de:	b086      	sub	sp, #24
  4035e0:	af00      	add	r7, sp, #0
  4035e2:	6078      	str	r0, [r7, #4]
  4035e4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4035e6:	683b      	ldr	r3, [r7, #0]
  4035e8:	2b01      	cmp	r3, #1
  4035ea:	d904      	bls.n	4035f6 <get_fat+0x1a>
  4035ec:	687b      	ldr	r3, [r7, #4]
  4035ee:	699a      	ldr	r2, [r3, #24]
  4035f0:	683b      	ldr	r3, [r7, #0]
  4035f2:	429a      	cmp	r2, r3
  4035f4:	d801      	bhi.n	4035fa <get_fat+0x1e>
		return 1;
  4035f6:	2301      	movs	r3, #1
  4035f8:	e096      	b.n	403728 <get_fat+0x14c>

	switch (fs->fs_type) {
  4035fa:	687b      	ldr	r3, [r7, #4]
  4035fc:	781b      	ldrb	r3, [r3, #0]
  4035fe:	2b02      	cmp	r3, #2
  403600:	d047      	beq.n	403692 <get_fat+0xb6>
  403602:	2b03      	cmp	r3, #3
  403604:	d065      	beq.n	4036d2 <get_fat+0xf6>
  403606:	2b01      	cmp	r3, #1
  403608:	f040 808c 	bne.w	403724 <get_fat+0x148>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  40360c:	683b      	ldr	r3, [r7, #0]
  40360e:	617b      	str	r3, [r7, #20]
  403610:	697b      	ldr	r3, [r7, #20]
  403612:	085b      	lsrs	r3, r3, #1
  403614:	697a      	ldr	r2, [r7, #20]
  403616:	4413      	add	r3, r2
  403618:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40361a:	687b      	ldr	r3, [r7, #4]
  40361c:	6a1a      	ldr	r2, [r3, #32]
  40361e:	697b      	ldr	r3, [r7, #20]
  403620:	0a5b      	lsrs	r3, r3, #9
  403622:	4413      	add	r3, r2
  403624:	6878      	ldr	r0, [r7, #4]
  403626:	4619      	mov	r1, r3
  403628:	4b41      	ldr	r3, [pc, #260]	; (403730 <get_fat+0x154>)
  40362a:	4798      	blx	r3
  40362c:	4603      	mov	r3, r0
  40362e:	2b00      	cmp	r3, #0
  403630:	d000      	beq.n	403634 <get_fat+0x58>
  403632:	e077      	b.n	403724 <get_fat+0x148>
		wc = fs->win[bc % SS(fs)]; bc++;
  403634:	697b      	ldr	r3, [r7, #20]
  403636:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40363a:	687a      	ldr	r2, [r7, #4]
  40363c:	4413      	add	r3, r2
  40363e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  403642:	613b      	str	r3, [r7, #16]
  403644:	697b      	ldr	r3, [r7, #20]
  403646:	3301      	adds	r3, #1
  403648:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40364a:	687b      	ldr	r3, [r7, #4]
  40364c:	6a1a      	ldr	r2, [r3, #32]
  40364e:	697b      	ldr	r3, [r7, #20]
  403650:	0a5b      	lsrs	r3, r3, #9
  403652:	4413      	add	r3, r2
  403654:	6878      	ldr	r0, [r7, #4]
  403656:	4619      	mov	r1, r3
  403658:	4b35      	ldr	r3, [pc, #212]	; (403730 <get_fat+0x154>)
  40365a:	4798      	blx	r3
  40365c:	4603      	mov	r3, r0
  40365e:	2b00      	cmp	r3, #0
  403660:	d000      	beq.n	403664 <get_fat+0x88>
  403662:	e05f      	b.n	403724 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
  403664:	697b      	ldr	r3, [r7, #20]
  403666:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40366a:	687a      	ldr	r2, [r7, #4]
  40366c:	4413      	add	r3, r2
  40366e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  403672:	021b      	lsls	r3, r3, #8
  403674:	693a      	ldr	r2, [r7, #16]
  403676:	4313      	orrs	r3, r2
  403678:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  40367a:	683b      	ldr	r3, [r7, #0]
  40367c:	f003 0301 	and.w	r3, r3, #1
  403680:	2b00      	cmp	r3, #0
  403682:	d002      	beq.n	40368a <get_fat+0xae>
  403684:	693b      	ldr	r3, [r7, #16]
  403686:	091b      	lsrs	r3, r3, #4
  403688:	e002      	b.n	403690 <get_fat+0xb4>
  40368a:	693b      	ldr	r3, [r7, #16]
  40368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  403690:	e04a      	b.n	403728 <get_fat+0x14c>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  403692:	687b      	ldr	r3, [r7, #4]
  403694:	6a1a      	ldr	r2, [r3, #32]
  403696:	683b      	ldr	r3, [r7, #0]
  403698:	0a1b      	lsrs	r3, r3, #8
  40369a:	4413      	add	r3, r2
  40369c:	6878      	ldr	r0, [r7, #4]
  40369e:	4619      	mov	r1, r3
  4036a0:	4b23      	ldr	r3, [pc, #140]	; (403730 <get_fat+0x154>)
  4036a2:	4798      	blx	r3
  4036a4:	4603      	mov	r3, r0
  4036a6:	2b00      	cmp	r3, #0
  4036a8:	d000      	beq.n	4036ac <get_fat+0xd0>
  4036aa:	e03b      	b.n	403724 <get_fat+0x148>
		p = &fs->win[clst * 2 % SS(fs)];
  4036ac:	683b      	ldr	r3, [r7, #0]
  4036ae:	005b      	lsls	r3, r3, #1
  4036b0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  4036b4:	3330      	adds	r3, #48	; 0x30
  4036b6:	687a      	ldr	r2, [r7, #4]
  4036b8:	4413      	add	r3, r2
  4036ba:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
  4036bc:	68fb      	ldr	r3, [r7, #12]
  4036be:	3301      	adds	r3, #1
  4036c0:	781b      	ldrb	r3, [r3, #0]
  4036c2:	021b      	lsls	r3, r3, #8
  4036c4:	b29a      	uxth	r2, r3
  4036c6:	68fb      	ldr	r3, [r7, #12]
  4036c8:	781b      	ldrb	r3, [r3, #0]
  4036ca:	4313      	orrs	r3, r2
  4036cc:	b29b      	uxth	r3, r3
  4036ce:	b29b      	uxth	r3, r3
  4036d0:	e02a      	b.n	403728 <get_fat+0x14c>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4036d2:	687b      	ldr	r3, [r7, #4]
  4036d4:	6a1a      	ldr	r2, [r3, #32]
  4036d6:	683b      	ldr	r3, [r7, #0]
  4036d8:	09db      	lsrs	r3, r3, #7
  4036da:	4413      	add	r3, r2
  4036dc:	6878      	ldr	r0, [r7, #4]
  4036de:	4619      	mov	r1, r3
  4036e0:	4b13      	ldr	r3, [pc, #76]	; (403730 <get_fat+0x154>)
  4036e2:	4798      	blx	r3
  4036e4:	4603      	mov	r3, r0
  4036e6:	2b00      	cmp	r3, #0
  4036e8:	d000      	beq.n	4036ec <get_fat+0x110>
  4036ea:	e01b      	b.n	403724 <get_fat+0x148>
		p = &fs->win[clst * 4 % SS(fs)];
  4036ec:	683b      	ldr	r3, [r7, #0]
  4036ee:	009b      	lsls	r3, r3, #2
  4036f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  4036f4:	3330      	adds	r3, #48	; 0x30
  4036f6:	687a      	ldr	r2, [r7, #4]
  4036f8:	4413      	add	r3, r2
  4036fa:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
  4036fc:	68fb      	ldr	r3, [r7, #12]
  4036fe:	3303      	adds	r3, #3
  403700:	781b      	ldrb	r3, [r3, #0]
  403702:	061a      	lsls	r2, r3, #24
  403704:	68fb      	ldr	r3, [r7, #12]
  403706:	3302      	adds	r3, #2
  403708:	781b      	ldrb	r3, [r3, #0]
  40370a:	041b      	lsls	r3, r3, #16
  40370c:	431a      	orrs	r2, r3
  40370e:	68fb      	ldr	r3, [r7, #12]
  403710:	3301      	adds	r3, #1
  403712:	781b      	ldrb	r3, [r3, #0]
  403714:	021b      	lsls	r3, r3, #8
  403716:	431a      	orrs	r2, r3
  403718:	68fb      	ldr	r3, [r7, #12]
  40371a:	781b      	ldrb	r3, [r3, #0]
  40371c:	4313      	orrs	r3, r2
  40371e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  403722:	e001      	b.n	403728 <get_fat+0x14c>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  403724:	f04f 33ff 	mov.w	r3, #4294967295
}
  403728:	4618      	mov	r0, r3
  40372a:	3718      	adds	r7, #24
  40372c:	46bd      	mov	sp, r7
  40372e:	bd80      	pop	{r7, pc}
  403730:	00403381 	.word	0x00403381

00403734 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  403734:	b580      	push	{r7, lr}
  403736:	b088      	sub	sp, #32
  403738:	af00      	add	r7, sp, #0
  40373a:	60f8      	str	r0, [r7, #12]
  40373c:	60b9      	str	r1, [r7, #8]
  40373e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403740:	68bb      	ldr	r3, [r7, #8]
  403742:	2b01      	cmp	r3, #1
  403744:	d904      	bls.n	403750 <put_fat+0x1c>
  403746:	68fb      	ldr	r3, [r7, #12]
  403748:	699a      	ldr	r2, [r3, #24]
  40374a:	68bb      	ldr	r3, [r7, #8]
  40374c:	429a      	cmp	r2, r3
  40374e:	d802      	bhi.n	403756 <put_fat+0x22>
		res = FR_INT_ERR;
  403750:	2302      	movs	r3, #2
  403752:	77fb      	strb	r3, [r7, #31]
  403754:	e0e3      	b.n	40391e <put_fat+0x1ea>

	} else {
		switch (fs->fs_type) {
  403756:	68fb      	ldr	r3, [r7, #12]
  403758:	781b      	ldrb	r3, [r3, #0]
  40375a:	2b02      	cmp	r3, #2
  40375c:	d070      	beq.n	403840 <put_fat+0x10c>
  40375e:	2b03      	cmp	r3, #3
  403760:	f000 8092 	beq.w	403888 <put_fat+0x154>
  403764:	2b01      	cmp	r3, #1
  403766:	f040 80d5 	bne.w	403914 <put_fat+0x1e0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  40376a:	68bb      	ldr	r3, [r7, #8]
  40376c:	61bb      	str	r3, [r7, #24]
  40376e:	69bb      	ldr	r3, [r7, #24]
  403770:	085b      	lsrs	r3, r3, #1
  403772:	69ba      	ldr	r2, [r7, #24]
  403774:	4413      	add	r3, r2
  403776:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  403778:	68fb      	ldr	r3, [r7, #12]
  40377a:	6a1a      	ldr	r2, [r3, #32]
  40377c:	69bb      	ldr	r3, [r7, #24]
  40377e:	0a5b      	lsrs	r3, r3, #9
  403780:	4413      	add	r3, r2
  403782:	68f8      	ldr	r0, [r7, #12]
  403784:	4619      	mov	r1, r3
  403786:	4b68      	ldr	r3, [pc, #416]	; (403928 <put_fat+0x1f4>)
  403788:	4798      	blx	r3
  40378a:	4603      	mov	r3, r0
  40378c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40378e:	7ffb      	ldrb	r3, [r7, #31]
  403790:	2b00      	cmp	r3, #0
  403792:	d000      	beq.n	403796 <put_fat+0x62>
  403794:	e0c0      	b.n	403918 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  403796:	69bb      	ldr	r3, [r7, #24]
  403798:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40379c:	3330      	adds	r3, #48	; 0x30
  40379e:	68fa      	ldr	r2, [r7, #12]
  4037a0:	4413      	add	r3, r2
  4037a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4037a4:	68bb      	ldr	r3, [r7, #8]
  4037a6:	f003 0301 	and.w	r3, r3, #1
  4037aa:	2b00      	cmp	r3, #0
  4037ac:	d00d      	beq.n	4037ca <put_fat+0x96>
  4037ae:	697b      	ldr	r3, [r7, #20]
  4037b0:	781b      	ldrb	r3, [r3, #0]
  4037b2:	b2db      	uxtb	r3, r3
  4037b4:	f003 030f 	and.w	r3, r3, #15
  4037b8:	b2da      	uxtb	r2, r3
  4037ba:	687b      	ldr	r3, [r7, #4]
  4037bc:	b2db      	uxtb	r3, r3
  4037be:	011b      	lsls	r3, r3, #4
  4037c0:	b2db      	uxtb	r3, r3
  4037c2:	4313      	orrs	r3, r2
  4037c4:	b2db      	uxtb	r3, r3
  4037c6:	b2db      	uxtb	r3, r3
  4037c8:	e001      	b.n	4037ce <put_fat+0x9a>
  4037ca:	687b      	ldr	r3, [r7, #4]
  4037cc:	b2db      	uxtb	r3, r3
  4037ce:	697a      	ldr	r2, [r7, #20]
  4037d0:	7013      	strb	r3, [r2, #0]
			bc++;
  4037d2:	69bb      	ldr	r3, [r7, #24]
  4037d4:	3301      	adds	r3, #1
  4037d6:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
  4037d8:	68fb      	ldr	r3, [r7, #12]
  4037da:	2201      	movs	r2, #1
  4037dc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4037de:	68fb      	ldr	r3, [r7, #12]
  4037e0:	6a1a      	ldr	r2, [r3, #32]
  4037e2:	69bb      	ldr	r3, [r7, #24]
  4037e4:	0a5b      	lsrs	r3, r3, #9
  4037e6:	4413      	add	r3, r2
  4037e8:	68f8      	ldr	r0, [r7, #12]
  4037ea:	4619      	mov	r1, r3
  4037ec:	4b4e      	ldr	r3, [pc, #312]	; (403928 <put_fat+0x1f4>)
  4037ee:	4798      	blx	r3
  4037f0:	4603      	mov	r3, r0
  4037f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  4037f4:	7ffb      	ldrb	r3, [r7, #31]
  4037f6:	2b00      	cmp	r3, #0
  4037f8:	d000      	beq.n	4037fc <put_fat+0xc8>
  4037fa:	e08d      	b.n	403918 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  4037fc:	69bb      	ldr	r3, [r7, #24]
  4037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403802:	3330      	adds	r3, #48	; 0x30
  403804:	68fa      	ldr	r2, [r7, #12]
  403806:	4413      	add	r3, r2
  403808:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40380a:	68bb      	ldr	r3, [r7, #8]
  40380c:	f003 0301 	and.w	r3, r3, #1
  403810:	2b00      	cmp	r3, #0
  403812:	d003      	beq.n	40381c <put_fat+0xe8>
  403814:	687b      	ldr	r3, [r7, #4]
  403816:	091b      	lsrs	r3, r3, #4
  403818:	b2db      	uxtb	r3, r3
  40381a:	e00e      	b.n	40383a <put_fat+0x106>
  40381c:	697b      	ldr	r3, [r7, #20]
  40381e:	781b      	ldrb	r3, [r3, #0]
  403820:	b2db      	uxtb	r3, r3
  403822:	f023 030f 	bic.w	r3, r3, #15
  403826:	b2da      	uxtb	r2, r3
  403828:	687b      	ldr	r3, [r7, #4]
  40382a:	0a1b      	lsrs	r3, r3, #8
  40382c:	b2db      	uxtb	r3, r3
  40382e:	f003 030f 	and.w	r3, r3, #15
  403832:	b2db      	uxtb	r3, r3
  403834:	4313      	orrs	r3, r2
  403836:	b2db      	uxtb	r3, r3
  403838:	b2db      	uxtb	r3, r3
  40383a:	697a      	ldr	r2, [r7, #20]
  40383c:	7013      	strb	r3, [r2, #0]
			break;
  40383e:	e06b      	b.n	403918 <put_fat+0x1e4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  403840:	68fb      	ldr	r3, [r7, #12]
  403842:	6a1a      	ldr	r2, [r3, #32]
  403844:	68bb      	ldr	r3, [r7, #8]
  403846:	0a1b      	lsrs	r3, r3, #8
  403848:	4413      	add	r3, r2
  40384a:	68f8      	ldr	r0, [r7, #12]
  40384c:	4619      	mov	r1, r3
  40384e:	4b36      	ldr	r3, [pc, #216]	; (403928 <put_fat+0x1f4>)
  403850:	4798      	blx	r3
  403852:	4603      	mov	r3, r0
  403854:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  403856:	7ffb      	ldrb	r3, [r7, #31]
  403858:	2b00      	cmp	r3, #0
  40385a:	d000      	beq.n	40385e <put_fat+0x12a>
  40385c:	e05c      	b.n	403918 <put_fat+0x1e4>
			p = &fs->win[clst * 2 % SS(fs)];
  40385e:	68bb      	ldr	r3, [r7, #8]
  403860:	005b      	lsls	r3, r3, #1
  403862:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  403866:	3330      	adds	r3, #48	; 0x30
  403868:	68fa      	ldr	r2, [r7, #12]
  40386a:	4413      	add	r3, r2
  40386c:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
  40386e:	687b      	ldr	r3, [r7, #4]
  403870:	b2da      	uxtb	r2, r3
  403872:	697b      	ldr	r3, [r7, #20]
  403874:	701a      	strb	r2, [r3, #0]
  403876:	697b      	ldr	r3, [r7, #20]
  403878:	3301      	adds	r3, #1
  40387a:	687a      	ldr	r2, [r7, #4]
  40387c:	b292      	uxth	r2, r2
  40387e:	0a12      	lsrs	r2, r2, #8
  403880:	b292      	uxth	r2, r2
  403882:	b2d2      	uxtb	r2, r2
  403884:	701a      	strb	r2, [r3, #0]
			break;
  403886:	e047      	b.n	403918 <put_fat+0x1e4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  403888:	68fb      	ldr	r3, [r7, #12]
  40388a:	6a1a      	ldr	r2, [r3, #32]
  40388c:	68bb      	ldr	r3, [r7, #8]
  40388e:	09db      	lsrs	r3, r3, #7
  403890:	4413      	add	r3, r2
  403892:	68f8      	ldr	r0, [r7, #12]
  403894:	4619      	mov	r1, r3
  403896:	4b24      	ldr	r3, [pc, #144]	; (403928 <put_fat+0x1f4>)
  403898:	4798      	blx	r3
  40389a:	4603      	mov	r3, r0
  40389c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40389e:	7ffb      	ldrb	r3, [r7, #31]
  4038a0:	2b00      	cmp	r3, #0
  4038a2:	d000      	beq.n	4038a6 <put_fat+0x172>
  4038a4:	e038      	b.n	403918 <put_fat+0x1e4>
			p = &fs->win[clst * 4 % SS(fs)];
  4038a6:	68bb      	ldr	r3, [r7, #8]
  4038a8:	009b      	lsls	r3, r3, #2
  4038aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  4038ae:	3330      	adds	r3, #48	; 0x30
  4038b0:	68fa      	ldr	r2, [r7, #12]
  4038b2:	4413      	add	r3, r2
  4038b4:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
  4038b6:	697b      	ldr	r3, [r7, #20]
  4038b8:	3303      	adds	r3, #3
  4038ba:	781b      	ldrb	r3, [r3, #0]
  4038bc:	061a      	lsls	r2, r3, #24
  4038be:	697b      	ldr	r3, [r7, #20]
  4038c0:	3302      	adds	r3, #2
  4038c2:	781b      	ldrb	r3, [r3, #0]
  4038c4:	041b      	lsls	r3, r3, #16
  4038c6:	431a      	orrs	r2, r3
  4038c8:	697b      	ldr	r3, [r7, #20]
  4038ca:	3301      	adds	r3, #1
  4038cc:	781b      	ldrb	r3, [r3, #0]
  4038ce:	021b      	lsls	r3, r3, #8
  4038d0:	431a      	orrs	r2, r3
  4038d2:	697b      	ldr	r3, [r7, #20]
  4038d4:	781b      	ldrb	r3, [r3, #0]
  4038d6:	4313      	orrs	r3, r2
  4038d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  4038dc:	687a      	ldr	r2, [r7, #4]
  4038de:	4313      	orrs	r3, r2
  4038e0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
  4038e2:	687b      	ldr	r3, [r7, #4]
  4038e4:	b2da      	uxtb	r2, r3
  4038e6:	697b      	ldr	r3, [r7, #20]
  4038e8:	701a      	strb	r2, [r3, #0]
  4038ea:	697b      	ldr	r3, [r7, #20]
  4038ec:	3301      	adds	r3, #1
  4038ee:	687a      	ldr	r2, [r7, #4]
  4038f0:	b292      	uxth	r2, r2
  4038f2:	0a12      	lsrs	r2, r2, #8
  4038f4:	b292      	uxth	r2, r2
  4038f6:	b2d2      	uxtb	r2, r2
  4038f8:	701a      	strb	r2, [r3, #0]
  4038fa:	697b      	ldr	r3, [r7, #20]
  4038fc:	3302      	adds	r3, #2
  4038fe:	687a      	ldr	r2, [r7, #4]
  403900:	0c12      	lsrs	r2, r2, #16
  403902:	b2d2      	uxtb	r2, r2
  403904:	701a      	strb	r2, [r3, #0]
  403906:	697b      	ldr	r3, [r7, #20]
  403908:	3303      	adds	r3, #3
  40390a:	687a      	ldr	r2, [r7, #4]
  40390c:	0e12      	lsrs	r2, r2, #24
  40390e:	b2d2      	uxtb	r2, r2
  403910:	701a      	strb	r2, [r3, #0]
			break;
  403912:	e001      	b.n	403918 <put_fat+0x1e4>

		default :
			res = FR_INT_ERR;
  403914:	2302      	movs	r3, #2
  403916:	77fb      	strb	r3, [r7, #31]
		}
		fs->wflag = 1;
  403918:	68fb      	ldr	r3, [r7, #12]
  40391a:	2201      	movs	r2, #1
  40391c:	711a      	strb	r2, [r3, #4]
	}

	return res;
  40391e:	7ffb      	ldrb	r3, [r7, #31]
}
  403920:	4618      	mov	r0, r3
  403922:	3720      	adds	r7, #32
  403924:	46bd      	mov	sp, r7
  403926:	bd80      	pop	{r7, pc}
  403928:	00403381 	.word	0x00403381

0040392c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  40392c:	b580      	push	{r7, lr}
  40392e:	b084      	sub	sp, #16
  403930:	af00      	add	r7, sp, #0
  403932:	6078      	str	r0, [r7, #4]
  403934:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  403936:	683b      	ldr	r3, [r7, #0]
  403938:	2b01      	cmp	r3, #1
  40393a:	d904      	bls.n	403946 <remove_chain+0x1a>
  40393c:	687b      	ldr	r3, [r7, #4]
  40393e:	699a      	ldr	r2, [r3, #24]
  403940:	683b      	ldr	r3, [r7, #0]
  403942:	429a      	cmp	r2, r3
  403944:	d802      	bhi.n	40394c <remove_chain+0x20>
		res = FR_INT_ERR;
  403946:	2302      	movs	r3, #2
  403948:	73fb      	strb	r3, [r7, #15]
  40394a:	e037      	b.n	4039bc <remove_chain+0x90>

	} else {
		res = FR_OK;
  40394c:	2300      	movs	r3, #0
  40394e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  403950:	e02f      	b.n	4039b2 <remove_chain+0x86>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  403952:	6878      	ldr	r0, [r7, #4]
  403954:	6839      	ldr	r1, [r7, #0]
  403956:	4b1c      	ldr	r3, [pc, #112]	; (4039c8 <remove_chain+0x9c>)
  403958:	4798      	blx	r3
  40395a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
  40395c:	68bb      	ldr	r3, [r7, #8]
  40395e:	2b00      	cmp	r3, #0
  403960:	d100      	bne.n	403964 <remove_chain+0x38>
  403962:	e02b      	b.n	4039bc <remove_chain+0x90>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  403964:	68bb      	ldr	r3, [r7, #8]
  403966:	2b01      	cmp	r3, #1
  403968:	d102      	bne.n	403970 <remove_chain+0x44>
  40396a:	2302      	movs	r3, #2
  40396c:	73fb      	strb	r3, [r7, #15]
  40396e:	e025      	b.n	4039bc <remove_chain+0x90>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  403970:	68bb      	ldr	r3, [r7, #8]
  403972:	f1b3 3fff 	cmp.w	r3, #4294967295
  403976:	d102      	bne.n	40397e <remove_chain+0x52>
  403978:	2301      	movs	r3, #1
  40397a:	73fb      	strb	r3, [r7, #15]
  40397c:	e01e      	b.n	4039bc <remove_chain+0x90>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40397e:	6878      	ldr	r0, [r7, #4]
  403980:	6839      	ldr	r1, [r7, #0]
  403982:	2200      	movs	r2, #0
  403984:	4b11      	ldr	r3, [pc, #68]	; (4039cc <remove_chain+0xa0>)
  403986:	4798      	blx	r3
  403988:	4603      	mov	r3, r0
  40398a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  40398c:	7bfb      	ldrb	r3, [r7, #15]
  40398e:	2b00      	cmp	r3, #0
  403990:	d000      	beq.n	403994 <remove_chain+0x68>
  403992:	e013      	b.n	4039bc <remove_chain+0x90>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  403994:	687b      	ldr	r3, [r7, #4]
  403996:	691b      	ldr	r3, [r3, #16]
  403998:	f1b3 3fff 	cmp.w	r3, #4294967295
  40399c:	d007      	beq.n	4039ae <remove_chain+0x82>
				fs->free_clust++;
  40399e:	687b      	ldr	r3, [r7, #4]
  4039a0:	691b      	ldr	r3, [r3, #16]
  4039a2:	1c5a      	adds	r2, r3, #1
  4039a4:	687b      	ldr	r3, [r7, #4]
  4039a6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
  4039a8:	687b      	ldr	r3, [r7, #4]
  4039aa:	2201      	movs	r2, #1
  4039ac:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
  4039ae:	68bb      	ldr	r3, [r7, #8]
  4039b0:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4039b2:	687b      	ldr	r3, [r7, #4]
  4039b4:	699a      	ldr	r2, [r3, #24]
  4039b6:	683b      	ldr	r3, [r7, #0]
  4039b8:	429a      	cmp	r2, r3
  4039ba:	d8ca      	bhi.n	403952 <remove_chain+0x26>
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
  4039bc:	7bfb      	ldrb	r3, [r7, #15]
}
  4039be:	4618      	mov	r0, r3
  4039c0:	3710      	adds	r7, #16
  4039c2:	46bd      	mov	sp, r7
  4039c4:	bd80      	pop	{r7, pc}
  4039c6:	bf00      	nop
  4039c8:	004035dd 	.word	0x004035dd
  4039cc:	00403735 	.word	0x00403735

004039d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  4039d0:	b580      	push	{r7, lr}
  4039d2:	b086      	sub	sp, #24
  4039d4:	af00      	add	r7, sp, #0
  4039d6:	6078      	str	r0, [r7, #4]
  4039d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  4039da:	683b      	ldr	r3, [r7, #0]
  4039dc:	2b00      	cmp	r3, #0
  4039de:	d10d      	bne.n	4039fc <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
  4039e0:	687b      	ldr	r3, [r7, #4]
  4039e2:	68db      	ldr	r3, [r3, #12]
  4039e4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4039e6:	693b      	ldr	r3, [r7, #16]
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	d004      	beq.n	4039f6 <create_chain+0x26>
  4039ec:	687b      	ldr	r3, [r7, #4]
  4039ee:	699a      	ldr	r2, [r3, #24]
  4039f0:	693b      	ldr	r3, [r7, #16]
  4039f2:	429a      	cmp	r2, r3
  4039f4:	d815      	bhi.n	403a22 <create_chain+0x52>
  4039f6:	2301      	movs	r3, #1
  4039f8:	613b      	str	r3, [r7, #16]
  4039fa:	e012      	b.n	403a22 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4039fc:	6878      	ldr	r0, [r7, #4]
  4039fe:	6839      	ldr	r1, [r7, #0]
  403a00:	4b39      	ldr	r3, [pc, #228]	; (403ae8 <create_chain+0x118>)
  403a02:	4798      	blx	r3
  403a04:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
  403a06:	68bb      	ldr	r3, [r7, #8]
  403a08:	2b01      	cmp	r3, #1
  403a0a:	d801      	bhi.n	403a10 <create_chain+0x40>
  403a0c:	2301      	movs	r3, #1
  403a0e:	e066      	b.n	403ade <create_chain+0x10e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  403a10:	687b      	ldr	r3, [r7, #4]
  403a12:	699a      	ldr	r2, [r3, #24]
  403a14:	68bb      	ldr	r3, [r7, #8]
  403a16:	429a      	cmp	r2, r3
  403a18:	d901      	bls.n	403a1e <create_chain+0x4e>
  403a1a:	68bb      	ldr	r3, [r7, #8]
  403a1c:	e05f      	b.n	403ade <create_chain+0x10e>
		scl = clst;
  403a1e:	683b      	ldr	r3, [r7, #0]
  403a20:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
  403a22:	693b      	ldr	r3, [r7, #16]
  403a24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
  403a26:	697b      	ldr	r3, [r7, #20]
  403a28:	3301      	adds	r3, #1
  403a2a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  403a2c:	687b      	ldr	r3, [r7, #4]
  403a2e:	699a      	ldr	r2, [r3, #24]
  403a30:	697b      	ldr	r3, [r7, #20]
  403a32:	429a      	cmp	r2, r3
  403a34:	d807      	bhi.n	403a46 <create_chain+0x76>
			ncl = 2;
  403a36:	2302      	movs	r3, #2
  403a38:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
  403a3a:	697a      	ldr	r2, [r7, #20]
  403a3c:	693b      	ldr	r3, [r7, #16]
  403a3e:	429a      	cmp	r2, r3
  403a40:	d901      	bls.n	403a46 <create_chain+0x76>
  403a42:	2300      	movs	r3, #0
  403a44:	e04b      	b.n	403ade <create_chain+0x10e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  403a46:	6878      	ldr	r0, [r7, #4]
  403a48:	6979      	ldr	r1, [r7, #20]
  403a4a:	4b27      	ldr	r3, [pc, #156]	; (403ae8 <create_chain+0x118>)
  403a4c:	4798      	blx	r3
  403a4e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
  403a50:	68bb      	ldr	r3, [r7, #8]
  403a52:	2b00      	cmp	r3, #0
  403a54:	d10c      	bne.n	403a70 <create_chain+0xa0>
  403a56:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  403a58:	6878      	ldr	r0, [r7, #4]
  403a5a:	6979      	ldr	r1, [r7, #20]
  403a5c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  403a60:	4b22      	ldr	r3, [pc, #136]	; (403aec <create_chain+0x11c>)
  403a62:	4798      	blx	r3
  403a64:	4603      	mov	r3, r0
  403a66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
  403a68:	7bfb      	ldrb	r3, [r7, #15]
  403a6a:	2b00      	cmp	r3, #0
  403a6c:	d11a      	bne.n	403aa4 <create_chain+0xd4>
  403a6e:	e00f      	b.n	403a90 <create_chain+0xc0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  403a70:	68bb      	ldr	r3, [r7, #8]
  403a72:	f1b3 3fff 	cmp.w	r3, #4294967295
  403a76:	d002      	beq.n	403a7e <create_chain+0xae>
  403a78:	68bb      	ldr	r3, [r7, #8]
  403a7a:	2b01      	cmp	r3, #1
  403a7c:	d101      	bne.n	403a82 <create_chain+0xb2>
			return cs;
  403a7e:	68bb      	ldr	r3, [r7, #8]
  403a80:	e02d      	b.n	403ade <create_chain+0x10e>
		if (ncl == scl) return 0;		/* No free cluster */
  403a82:	697a      	ldr	r2, [r7, #20]
  403a84:	693b      	ldr	r3, [r7, #16]
  403a86:	429a      	cmp	r2, r3
  403a88:	d101      	bne.n	403a8e <create_chain+0xbe>
  403a8a:	2300      	movs	r3, #0
  403a8c:	e027      	b.n	403ade <create_chain+0x10e>
	}
  403a8e:	e7ca      	b.n	403a26 <create_chain+0x56>

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
  403a90:	683b      	ldr	r3, [r7, #0]
  403a92:	2b00      	cmp	r3, #0
  403a94:	d006      	beq.n	403aa4 <create_chain+0xd4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  403a96:	6878      	ldr	r0, [r7, #4]
  403a98:	6839      	ldr	r1, [r7, #0]
  403a9a:	697a      	ldr	r2, [r7, #20]
  403a9c:	4b13      	ldr	r3, [pc, #76]	; (403aec <create_chain+0x11c>)
  403a9e:	4798      	blx	r3
  403aa0:	4603      	mov	r3, r0
  403aa2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
  403aa4:	7bfb      	ldrb	r3, [r7, #15]
  403aa6:	2b00      	cmp	r3, #0
  403aa8:	d110      	bne.n	403acc <create_chain+0xfc>
		fs->last_clust = ncl;			/* Update FSINFO */
  403aaa:	687b      	ldr	r3, [r7, #4]
  403aac:	697a      	ldr	r2, [r7, #20]
  403aae:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  403ab0:	687b      	ldr	r3, [r7, #4]
  403ab2:	691b      	ldr	r3, [r3, #16]
  403ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
  403ab8:	d010      	beq.n	403adc <create_chain+0x10c>
			fs->free_clust--;
  403aba:	687b      	ldr	r3, [r7, #4]
  403abc:	691b      	ldr	r3, [r3, #16]
  403abe:	1e5a      	subs	r2, r3, #1
  403ac0:	687b      	ldr	r3, [r7, #4]
  403ac2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
  403ac4:	687b      	ldr	r3, [r7, #4]
  403ac6:	2201      	movs	r2, #1
  403ac8:	715a      	strb	r2, [r3, #5]
  403aca:	e007      	b.n	403adc <create_chain+0x10c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  403acc:	7bfb      	ldrb	r3, [r7, #15]
  403ace:	2b01      	cmp	r3, #1
  403ad0:	d102      	bne.n	403ad8 <create_chain+0x108>
  403ad2:	f04f 33ff 	mov.w	r3, #4294967295
  403ad6:	e000      	b.n	403ada <create_chain+0x10a>
  403ad8:	2301      	movs	r3, #1
  403ada:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
  403adc:	697b      	ldr	r3, [r7, #20]
}
  403ade:	4618      	mov	r0, r3
  403ae0:	3718      	adds	r7, #24
  403ae2:	46bd      	mov	sp, r7
  403ae4:	bd80      	pop	{r7, pc}
  403ae6:	bf00      	nop
  403ae8:	004035dd 	.word	0x004035dd
  403aec:	00403735 	.word	0x00403735

00403af0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  403af0:	b580      	push	{r7, lr}
  403af2:	b084      	sub	sp, #16
  403af4:	af00      	add	r7, sp, #0
  403af6:	6078      	str	r0, [r7, #4]
  403af8:	460b      	mov	r3, r1
  403afa:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
  403afc:	687b      	ldr	r3, [r7, #4]
  403afe:	887a      	ldrh	r2, [r7, #2]
  403b00:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
  403b02:	687b      	ldr	r3, [r7, #4]
  403b04:	689b      	ldr	r3, [r3, #8]
  403b06:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  403b08:	68fb      	ldr	r3, [r7, #12]
  403b0a:	2b01      	cmp	r3, #1
  403b0c:	d005      	beq.n	403b1a <dir_sdi+0x2a>
  403b0e:	687b      	ldr	r3, [r7, #4]
  403b10:	681b      	ldr	r3, [r3, #0]
  403b12:	699a      	ldr	r2, [r3, #24]
  403b14:	68fb      	ldr	r3, [r7, #12]
  403b16:	429a      	cmp	r2, r3
  403b18:	d801      	bhi.n	403b1e <dir_sdi+0x2e>
		return FR_INT_ERR;
  403b1a:	2302      	movs	r3, #2
  403b1c:	e064      	b.n	403be8 <dir_sdi+0xf8>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  403b1e:	68fb      	ldr	r3, [r7, #12]
  403b20:	2b00      	cmp	r3, #0
  403b22:	d108      	bne.n	403b36 <dir_sdi+0x46>
  403b24:	687b      	ldr	r3, [r7, #4]
  403b26:	681b      	ldr	r3, [r3, #0]
  403b28:	781b      	ldrb	r3, [r3, #0]
  403b2a:	2b03      	cmp	r3, #3
  403b2c:	d103      	bne.n	403b36 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
  403b2e:	687b      	ldr	r3, [r7, #4]
  403b30:	681b      	ldr	r3, [r3, #0]
  403b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403b34:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  403b36:	68fb      	ldr	r3, [r7, #12]
  403b38:	2b00      	cmp	r3, #0
  403b3a:	d114      	bne.n	403b66 <dir_sdi+0x76>
		dj->clust = clst;
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	68fa      	ldr	r2, [r7, #12]
  403b40:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  403b42:	687b      	ldr	r3, [r7, #4]
  403b44:	681b      	ldr	r3, [r3, #0]
  403b46:	891b      	ldrh	r3, [r3, #8]
  403b48:	887a      	ldrh	r2, [r7, #2]
  403b4a:	429a      	cmp	r2, r3
  403b4c:	d301      	bcc.n	403b52 <dir_sdi+0x62>
			return FR_INT_ERR;
  403b4e:	2302      	movs	r3, #2
  403b50:	e04a      	b.n	403be8 <dir_sdi+0xf8>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  403b52:	687b      	ldr	r3, [r7, #4]
  403b54:	681b      	ldr	r3, [r3, #0]
  403b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  403b58:	887b      	ldrh	r3, [r7, #2]
  403b5a:	091b      	lsrs	r3, r3, #4
  403b5c:	b29b      	uxth	r3, r3
  403b5e:	441a      	add	r2, r3
  403b60:	687b      	ldr	r3, [r7, #4]
  403b62:	611a      	str	r2, [r3, #16]
  403b64:	e035      	b.n	403bd2 <dir_sdi+0xe2>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  403b66:	687b      	ldr	r3, [r7, #4]
  403b68:	681b      	ldr	r3, [r3, #0]
  403b6a:	789b      	ldrb	r3, [r3, #2]
  403b6c:	011b      	lsls	r3, r3, #4
  403b6e:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
  403b70:	e01b      	b.n	403baa <dir_sdi+0xba>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  403b72:	687b      	ldr	r3, [r7, #4]
  403b74:	681b      	ldr	r3, [r3, #0]
  403b76:	4618      	mov	r0, r3
  403b78:	68f9      	ldr	r1, [r7, #12]
  403b7a:	4b1d      	ldr	r3, [pc, #116]	; (403bf0 <dir_sdi+0x100>)
  403b7c:	4798      	blx	r3
  403b7e:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  403b80:	68fb      	ldr	r3, [r7, #12]
  403b82:	f1b3 3fff 	cmp.w	r3, #4294967295
  403b86:	d101      	bne.n	403b8c <dir_sdi+0x9c>
  403b88:	2301      	movs	r3, #1
  403b8a:	e02d      	b.n	403be8 <dir_sdi+0xf8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  403b8c:	68fb      	ldr	r3, [r7, #12]
  403b8e:	2b01      	cmp	r3, #1
  403b90:	d905      	bls.n	403b9e <dir_sdi+0xae>
  403b92:	687b      	ldr	r3, [r7, #4]
  403b94:	681b      	ldr	r3, [r3, #0]
  403b96:	699a      	ldr	r2, [r3, #24]
  403b98:	68fb      	ldr	r3, [r7, #12]
  403b9a:	429a      	cmp	r2, r3
  403b9c:	d801      	bhi.n	403ba2 <dir_sdi+0xb2>
				return FR_INT_ERR;
  403b9e:	2302      	movs	r3, #2
  403ba0:	e022      	b.n	403be8 <dir_sdi+0xf8>
			idx -= ic;
  403ba2:	887a      	ldrh	r2, [r7, #2]
  403ba4:	897b      	ldrh	r3, [r7, #10]
  403ba6:	1ad3      	subs	r3, r2, r3
  403ba8:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  403baa:	887a      	ldrh	r2, [r7, #2]
  403bac:	897b      	ldrh	r3, [r7, #10]
  403bae:	429a      	cmp	r2, r3
  403bb0:	d2df      	bcs.n	403b72 <dir_sdi+0x82>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  403bb2:	687b      	ldr	r3, [r7, #4]
  403bb4:	68fa      	ldr	r2, [r7, #12]
  403bb6:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  403bb8:	687b      	ldr	r3, [r7, #4]
  403bba:	681b      	ldr	r3, [r3, #0]
  403bbc:	4618      	mov	r0, r3
  403bbe:	68f9      	ldr	r1, [r7, #12]
  403bc0:	4b0c      	ldr	r3, [pc, #48]	; (403bf4 <dir_sdi+0x104>)
  403bc2:	4798      	blx	r3
  403bc4:	4602      	mov	r2, r0
  403bc6:	887b      	ldrh	r3, [r7, #2]
  403bc8:	091b      	lsrs	r3, r3, #4
  403bca:	b29b      	uxth	r3, r3
  403bcc:	441a      	add	r2, r3
  403bce:	687b      	ldr	r3, [r7, #4]
  403bd0:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  403bd2:	687b      	ldr	r3, [r7, #4]
  403bd4:	681a      	ldr	r2, [r3, #0]
  403bd6:	887b      	ldrh	r3, [r7, #2]
  403bd8:	f003 030f 	and.w	r3, r3, #15
  403bdc:	015b      	lsls	r3, r3, #5
  403bde:	3330      	adds	r3, #48	; 0x30
  403be0:	441a      	add	r2, r3
  403be2:	687b      	ldr	r3, [r7, #4]
  403be4:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
  403be6:	2300      	movs	r3, #0
}
  403be8:	4618      	mov	r0, r3
  403bea:	3710      	adds	r7, #16
  403bec:	46bd      	mov	sp, r7
  403bee:	bd80      	pop	{r7, pc}
  403bf0:	004035dd 	.word	0x004035dd
  403bf4:	004035a1 	.word	0x004035a1

00403bf8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  403bf8:	b590      	push	{r4, r7, lr}
  403bfa:	b085      	sub	sp, #20
  403bfc:	af00      	add	r7, sp, #0
  403bfe:	6078      	str	r0, [r7, #4]
  403c00:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  403c02:	687b      	ldr	r3, [r7, #4]
  403c04:	88db      	ldrh	r3, [r3, #6]
  403c06:	3301      	adds	r3, #1
  403c08:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  403c0a:	893b      	ldrh	r3, [r7, #8]
  403c0c:	2b00      	cmp	r3, #0
  403c0e:	d003      	beq.n	403c18 <dir_next+0x20>
  403c10:	687b      	ldr	r3, [r7, #4]
  403c12:	691b      	ldr	r3, [r3, #16]
  403c14:	2b00      	cmp	r3, #0
  403c16:	d101      	bne.n	403c1c <dir_next+0x24>
		return FR_NO_FILE;
  403c18:	2304      	movs	r3, #4
  403c1a:	e0bc      	b.n	403d96 <dir_next+0x19e>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  403c1c:	893b      	ldrh	r3, [r7, #8]
  403c1e:	f003 030f 	and.w	r3, r3, #15
  403c22:	b29b      	uxth	r3, r3
  403c24:	2b00      	cmp	r3, #0
  403c26:	f040 80a8 	bne.w	403d7a <dir_next+0x182>
		dj->sect++;					/* Next sector */
  403c2a:	687b      	ldr	r3, [r7, #4]
  403c2c:	691b      	ldr	r3, [r3, #16]
  403c2e:	1c5a      	adds	r2, r3, #1
  403c30:	687b      	ldr	r3, [r7, #4]
  403c32:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
  403c34:	687b      	ldr	r3, [r7, #4]
  403c36:	68db      	ldr	r3, [r3, #12]
  403c38:	2b00      	cmp	r3, #0
  403c3a:	d108      	bne.n	403c4e <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  403c3c:	687b      	ldr	r3, [r7, #4]
  403c3e:	681b      	ldr	r3, [r3, #0]
  403c40:	891b      	ldrh	r3, [r3, #8]
  403c42:	893a      	ldrh	r2, [r7, #8]
  403c44:	429a      	cmp	r2, r3
  403c46:	f0c0 8098 	bcc.w	403d7a <dir_next+0x182>
				return FR_NO_FILE;
  403c4a:	2304      	movs	r3, #4
  403c4c:	e0a3      	b.n	403d96 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  403c4e:	893b      	ldrh	r3, [r7, #8]
  403c50:	091b      	lsrs	r3, r3, #4
  403c52:	b29b      	uxth	r3, r3
  403c54:	461a      	mov	r2, r3
  403c56:	687b      	ldr	r3, [r7, #4]
  403c58:	681b      	ldr	r3, [r3, #0]
  403c5a:	789b      	ldrb	r3, [r3, #2]
  403c5c:	3b01      	subs	r3, #1
  403c5e:	4013      	ands	r3, r2
  403c60:	2b00      	cmp	r3, #0
  403c62:	f040 808a 	bne.w	403d7a <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  403c66:	687b      	ldr	r3, [r7, #4]
  403c68:	681a      	ldr	r2, [r3, #0]
  403c6a:	687b      	ldr	r3, [r7, #4]
  403c6c:	68db      	ldr	r3, [r3, #12]
  403c6e:	4610      	mov	r0, r2
  403c70:	4619      	mov	r1, r3
  403c72:	4b4b      	ldr	r3, [pc, #300]	; (403da0 <dir_next+0x1a8>)
  403c74:	4798      	blx	r3
  403c76:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
  403c78:	68fb      	ldr	r3, [r7, #12]
  403c7a:	2b01      	cmp	r3, #1
  403c7c:	d801      	bhi.n	403c82 <dir_next+0x8a>
  403c7e:	2302      	movs	r3, #2
  403c80:	e089      	b.n	403d96 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403c82:	68fb      	ldr	r3, [r7, #12]
  403c84:	f1b3 3fff 	cmp.w	r3, #4294967295
  403c88:	d101      	bne.n	403c8e <dir_next+0x96>
  403c8a:	2301      	movs	r3, #1
  403c8c:	e083      	b.n	403d96 <dir_next+0x19e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  403c8e:	687b      	ldr	r3, [r7, #4]
  403c90:	681b      	ldr	r3, [r3, #0]
  403c92:	699a      	ldr	r2, [r3, #24]
  403c94:	68fb      	ldr	r3, [r7, #12]
  403c96:	429a      	cmp	r2, r3
  403c98:	d863      	bhi.n	403d62 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  403c9a:	683b      	ldr	r3, [r7, #0]
  403c9c:	2b00      	cmp	r3, #0
  403c9e:	d101      	bne.n	403ca4 <dir_next+0xac>
  403ca0:	2304      	movs	r3, #4
  403ca2:	e078      	b.n	403d96 <dir_next+0x19e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  403ca4:	687b      	ldr	r3, [r7, #4]
  403ca6:	681a      	ldr	r2, [r3, #0]
  403ca8:	687b      	ldr	r3, [r7, #4]
  403caa:	68db      	ldr	r3, [r3, #12]
  403cac:	4610      	mov	r0, r2
  403cae:	4619      	mov	r1, r3
  403cb0:	4b3c      	ldr	r3, [pc, #240]	; (403da4 <dir_next+0x1ac>)
  403cb2:	4798      	blx	r3
  403cb4:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  403cb6:	68fb      	ldr	r3, [r7, #12]
  403cb8:	2b00      	cmp	r3, #0
  403cba:	d101      	bne.n	403cc0 <dir_next+0xc8>
  403cbc:	2307      	movs	r3, #7
  403cbe:	e06a      	b.n	403d96 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
  403cc0:	68fb      	ldr	r3, [r7, #12]
  403cc2:	2b01      	cmp	r3, #1
  403cc4:	d101      	bne.n	403cca <dir_next+0xd2>
  403cc6:	2302      	movs	r3, #2
  403cc8:	e065      	b.n	403d96 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  403cca:	68fb      	ldr	r3, [r7, #12]
  403ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
  403cd0:	d101      	bne.n	403cd6 <dir_next+0xde>
  403cd2:	2301      	movs	r3, #1
  403cd4:	e05f      	b.n	403d96 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  403cd6:	687b      	ldr	r3, [r7, #4]
  403cd8:	681b      	ldr	r3, [r3, #0]
  403cda:	4618      	mov	r0, r3
  403cdc:	2100      	movs	r1, #0
  403cde:	4b32      	ldr	r3, [pc, #200]	; (403da8 <dir_next+0x1b0>)
  403ce0:	4798      	blx	r3
  403ce2:	4603      	mov	r3, r0
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	d001      	beq.n	403cec <dir_next+0xf4>
  403ce8:	2301      	movs	r3, #1
  403cea:	e054      	b.n	403d96 <dir_next+0x19e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  403cec:	687b      	ldr	r3, [r7, #4]
  403cee:	681b      	ldr	r3, [r3, #0]
  403cf0:	3330      	adds	r3, #48	; 0x30
  403cf2:	4618      	mov	r0, r3
  403cf4:	2100      	movs	r1, #0
  403cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
  403cfa:	4b2c      	ldr	r3, [pc, #176]	; (403dac <dir_next+0x1b4>)
  403cfc:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  403cfe:	687b      	ldr	r3, [r7, #4]
  403d00:	681c      	ldr	r4, [r3, #0]
  403d02:	687b      	ldr	r3, [r7, #4]
  403d04:	681b      	ldr	r3, [r3, #0]
  403d06:	4618      	mov	r0, r3
  403d08:	68f9      	ldr	r1, [r7, #12]
  403d0a:	4b29      	ldr	r3, [pc, #164]	; (403db0 <dir_next+0x1b8>)
  403d0c:	4798      	blx	r3
  403d0e:	4603      	mov	r3, r0
  403d10:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  403d12:	2300      	movs	r3, #0
  403d14:	72fb      	strb	r3, [r7, #11]
  403d16:	e016      	b.n	403d46 <dir_next+0x14e>
						dj->fs->wflag = 1;
  403d18:	687b      	ldr	r3, [r7, #4]
  403d1a:	681b      	ldr	r3, [r3, #0]
  403d1c:	2201      	movs	r2, #1
  403d1e:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  403d20:	687b      	ldr	r3, [r7, #4]
  403d22:	681b      	ldr	r3, [r3, #0]
  403d24:	4618      	mov	r0, r3
  403d26:	2100      	movs	r1, #0
  403d28:	4b1f      	ldr	r3, [pc, #124]	; (403da8 <dir_next+0x1b0>)
  403d2a:	4798      	blx	r3
  403d2c:	4603      	mov	r3, r0
  403d2e:	2b00      	cmp	r3, #0
  403d30:	d001      	beq.n	403d36 <dir_next+0x13e>
  403d32:	2301      	movs	r3, #1
  403d34:	e02f      	b.n	403d96 <dir_next+0x19e>
						dj->fs->winsect++;
  403d36:	687b      	ldr	r3, [r7, #4]
  403d38:	681b      	ldr	r3, [r3, #0]
  403d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403d3c:	3201      	adds	r2, #1
  403d3e:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  403d40:	7afb      	ldrb	r3, [r7, #11]
  403d42:	3301      	adds	r3, #1
  403d44:	72fb      	strb	r3, [r7, #11]
  403d46:	687b      	ldr	r3, [r7, #4]
  403d48:	681b      	ldr	r3, [r3, #0]
  403d4a:	789b      	ldrb	r3, [r3, #2]
  403d4c:	7afa      	ldrb	r2, [r7, #11]
  403d4e:	429a      	cmp	r2, r3
  403d50:	d3e2      	bcc.n	403d18 <dir_next+0x120>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  403d52:	687b      	ldr	r3, [r7, #4]
  403d54:	681b      	ldr	r3, [r3, #0]
  403d56:	687a      	ldr	r2, [r7, #4]
  403d58:	6812      	ldr	r2, [r2, #0]
  403d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  403d5c:	7afa      	ldrb	r2, [r7, #11]
  403d5e:	1a8a      	subs	r2, r1, r2
  403d60:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  403d62:	687b      	ldr	r3, [r7, #4]
  403d64:	68fa      	ldr	r2, [r7, #12]
  403d66:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
  403d68:	687b      	ldr	r3, [r7, #4]
  403d6a:	681b      	ldr	r3, [r3, #0]
  403d6c:	4618      	mov	r0, r3
  403d6e:	68f9      	ldr	r1, [r7, #12]
  403d70:	4b0f      	ldr	r3, [pc, #60]	; (403db0 <dir_next+0x1b8>)
  403d72:	4798      	blx	r3
  403d74:	4602      	mov	r2, r0
  403d76:	687b      	ldr	r3, [r7, #4]
  403d78:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
  403d7a:	687b      	ldr	r3, [r7, #4]
  403d7c:	893a      	ldrh	r2, [r7, #8]
  403d7e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  403d80:	687b      	ldr	r3, [r7, #4]
  403d82:	681a      	ldr	r2, [r3, #0]
  403d84:	893b      	ldrh	r3, [r7, #8]
  403d86:	f003 030f 	and.w	r3, r3, #15
  403d8a:	015b      	lsls	r3, r3, #5
  403d8c:	3330      	adds	r3, #48	; 0x30
  403d8e:	441a      	add	r2, r3
  403d90:	687b      	ldr	r3, [r7, #4]
  403d92:	615a      	str	r2, [r3, #20]

	return FR_OK;
  403d94:	2300      	movs	r3, #0
}
  403d96:	4618      	mov	r0, r3
  403d98:	3714      	adds	r7, #20
  403d9a:	46bd      	mov	sp, r7
  403d9c:	bd90      	pop	{r4, r7, pc}
  403d9e:	bf00      	nop
  403da0:	004035dd 	.word	0x004035dd
  403da4:	004039d1 	.word	0x004039d1
  403da8:	00403381 	.word	0x00403381
  403dac:	00402f75 	.word	0x00402f75
  403db0:	004035a1 	.word	0x004035a1

00403db4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
  403db4:	b580      	push	{r7, lr}
  403db6:	b086      	sub	sp, #24
  403db8:	af00      	add	r7, sp, #0
  403dba:	6078      	str	r0, [r7, #4]
  403dbc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  403dbe:	683b      	ldr	r3, [r7, #0]
  403dc0:	781b      	ldrb	r3, [r3, #0]
  403dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403dc6:	1e5a      	subs	r2, r3, #1
  403dc8:	4613      	mov	r3, r2
  403dca:	005b      	lsls	r3, r3, #1
  403dcc:	4413      	add	r3, r2
  403dce:	009b      	lsls	r3, r3, #2
  403dd0:	4413      	add	r3, r2
  403dd2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
  403dd4:	2300      	movs	r3, #0
  403dd6:	613b      	str	r3, [r7, #16]
  403dd8:	2301      	movs	r3, #1
  403dda:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  403ddc:	4a29      	ldr	r2, [pc, #164]	; (403e84 <cmp_lfn+0xd0>)
  403dde:	693b      	ldr	r3, [r7, #16]
  403de0:	4413      	add	r3, r2
  403de2:	781b      	ldrb	r3, [r3, #0]
  403de4:	3301      	adds	r3, #1
  403de6:	683a      	ldr	r2, [r7, #0]
  403de8:	4413      	add	r3, r2
  403dea:	781b      	ldrb	r3, [r3, #0]
  403dec:	021b      	lsls	r3, r3, #8
  403dee:	b29a      	uxth	r2, r3
  403df0:	4924      	ldr	r1, [pc, #144]	; (403e84 <cmp_lfn+0xd0>)
  403df2:	693b      	ldr	r3, [r7, #16]
  403df4:	440b      	add	r3, r1
  403df6:	781b      	ldrb	r3, [r3, #0]
  403df8:	6839      	ldr	r1, [r7, #0]
  403dfa:	440b      	add	r3, r1
  403dfc:	781b      	ldrb	r3, [r3, #0]
  403dfe:	4313      	orrs	r3, r2
  403e00:	b29b      	uxth	r3, r3
  403e02:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  403e04:	89fb      	ldrh	r3, [r7, #14]
  403e06:	2b00      	cmp	r3, #0
  403e08:	d018      	beq.n	403e3c <cmp_lfn+0x88>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  403e0a:	89bb      	ldrh	r3, [r7, #12]
  403e0c:	4618      	mov	r0, r3
  403e0e:	4b1e      	ldr	r3, [pc, #120]	; (403e88 <cmp_lfn+0xd4>)
  403e10:	4798      	blx	r3
  403e12:	4603      	mov	r3, r0
  403e14:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  403e16:	697b      	ldr	r3, [r7, #20]
  403e18:	2bfe      	cmp	r3, #254	; 0xfe
  403e1a:	d80d      	bhi.n	403e38 <cmp_lfn+0x84>
  403e1c:	697b      	ldr	r3, [r7, #20]
  403e1e:	1c5a      	adds	r2, r3, #1
  403e20:	617a      	str	r2, [r7, #20]
  403e22:	005b      	lsls	r3, r3, #1
  403e24:	687a      	ldr	r2, [r7, #4]
  403e26:	4413      	add	r3, r2
  403e28:	881b      	ldrh	r3, [r3, #0]
  403e2a:	4618      	mov	r0, r3
  403e2c:	4b16      	ldr	r3, [pc, #88]	; (403e88 <cmp_lfn+0xd4>)
  403e2e:	4798      	blx	r3
  403e30:	4603      	mov	r3, r0
  403e32:	89fa      	ldrh	r2, [r7, #14]
  403e34:	429a      	cmp	r2, r3
  403e36:	d008      	beq.n	403e4a <cmp_lfn+0x96>
				return 0;				/* Not matched */
  403e38:	2300      	movs	r3, #0
  403e3a:	e01f      	b.n	403e7c <cmp_lfn+0xc8>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  403e3c:	89ba      	ldrh	r2, [r7, #12]
  403e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403e42:	429a      	cmp	r2, r3
  403e44:	d001      	beq.n	403e4a <cmp_lfn+0x96>
  403e46:	2300      	movs	r3, #0
  403e48:	e018      	b.n	403e7c <cmp_lfn+0xc8>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  403e4a:	693b      	ldr	r3, [r7, #16]
  403e4c:	3301      	adds	r3, #1
  403e4e:	613b      	str	r3, [r7, #16]
  403e50:	693b      	ldr	r3, [r7, #16]
  403e52:	2b0c      	cmp	r3, #12
  403e54:	d9c2      	bls.n	403ddc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  403e56:	683b      	ldr	r3, [r7, #0]
  403e58:	781b      	ldrb	r3, [r3, #0]
  403e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403e5e:	2b00      	cmp	r3, #0
  403e60:	d00b      	beq.n	403e7a <cmp_lfn+0xc6>
  403e62:	89fb      	ldrh	r3, [r7, #14]
  403e64:	2b00      	cmp	r3, #0
  403e66:	d008      	beq.n	403e7a <cmp_lfn+0xc6>
  403e68:	697b      	ldr	r3, [r7, #20]
  403e6a:	005b      	lsls	r3, r3, #1
  403e6c:	687a      	ldr	r2, [r7, #4]
  403e6e:	4413      	add	r3, r2
  403e70:	881b      	ldrh	r3, [r3, #0]
  403e72:	2b00      	cmp	r3, #0
  403e74:	d001      	beq.n	403e7a <cmp_lfn+0xc6>
		return 0;
  403e76:	2300      	movs	r3, #0
  403e78:	e000      	b.n	403e7c <cmp_lfn+0xc8>

	return 1;						/* The part of LFN matched */
  403e7a:	2301      	movs	r3, #1
}
  403e7c:	4618      	mov	r0, r3
  403e7e:	3718      	adds	r7, #24
  403e80:	46bd      	mov	sp, r7
  403e82:	bd80      	pop	{r7, pc}
  403e84:	00415f78 	.word	0x00415f78
  403e88:	00405f1d 	.word	0x00405f1d

00403e8c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
  403e8c:	b480      	push	{r7}
  403e8e:	b089      	sub	sp, #36	; 0x24
  403e90:	af00      	add	r7, sp, #0
  403e92:	60f8      	str	r0, [r7, #12]
  403e94:	60b9      	str	r1, [r7, #8]
  403e96:	71fa      	strb	r2, [r7, #7]
  403e98:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  403e9a:	68bb      	ldr	r3, [r7, #8]
  403e9c:	330d      	adds	r3, #13
  403e9e:	79ba      	ldrb	r2, [r7, #6]
  403ea0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  403ea2:	68bb      	ldr	r3, [r7, #8]
  403ea4:	330b      	adds	r3, #11
  403ea6:	220f      	movs	r2, #15
  403ea8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
  403eaa:	68bb      	ldr	r3, [r7, #8]
  403eac:	330c      	adds	r3, #12
  403eae:	2200      	movs	r2, #0
  403eb0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  403eb2:	68bb      	ldr	r3, [r7, #8]
  403eb4:	331a      	adds	r3, #26
  403eb6:	2200      	movs	r2, #0
  403eb8:	701a      	strb	r2, [r3, #0]
  403eba:	68bb      	ldr	r3, [r7, #8]
  403ebc:	331b      	adds	r3, #27
  403ebe:	2200      	movs	r2, #0
  403ec0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  403ec2:	79fb      	ldrb	r3, [r7, #7]
  403ec4:	1e5a      	subs	r2, r3, #1
  403ec6:	4613      	mov	r3, r2
  403ec8:	005b      	lsls	r3, r3, #1
  403eca:	4413      	add	r3, r2
  403ecc:	009b      	lsls	r3, r3, #2
  403ece:	4413      	add	r3, r2
  403ed0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
  403ed2:	2300      	movs	r3, #0
  403ed4:	82fb      	strh	r3, [r7, #22]
  403ed6:	2300      	movs	r3, #0
  403ed8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403eda:	8afa      	ldrh	r2, [r7, #22]
  403edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403ee0:	429a      	cmp	r2, r3
  403ee2:	d007      	beq.n	403ef4 <fit_lfn+0x68>
  403ee4:	69fb      	ldr	r3, [r7, #28]
  403ee6:	1c5a      	adds	r2, r3, #1
  403ee8:	61fa      	str	r2, [r7, #28]
  403eea:	005b      	lsls	r3, r3, #1
  403eec:	68fa      	ldr	r2, [r7, #12]
  403eee:	4413      	add	r3, r2
  403ef0:	881b      	ldrh	r3, [r3, #0]
  403ef2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403ef4:	4a1c      	ldr	r2, [pc, #112]	; (403f68 <fit_lfn+0xdc>)
  403ef6:	69bb      	ldr	r3, [r7, #24]
  403ef8:	4413      	add	r3, r2
  403efa:	781b      	ldrb	r3, [r3, #0]
  403efc:	68ba      	ldr	r2, [r7, #8]
  403efe:	4413      	add	r3, r2
  403f00:	8afa      	ldrh	r2, [r7, #22]
  403f02:	b2d2      	uxtb	r2, r2
  403f04:	701a      	strb	r2, [r3, #0]
  403f06:	4a18      	ldr	r2, [pc, #96]	; (403f68 <fit_lfn+0xdc>)
  403f08:	69bb      	ldr	r3, [r7, #24]
  403f0a:	4413      	add	r3, r2
  403f0c:	781b      	ldrb	r3, [r3, #0]
  403f0e:	3301      	adds	r3, #1
  403f10:	68ba      	ldr	r2, [r7, #8]
  403f12:	4413      	add	r3, r2
  403f14:	8afa      	ldrh	r2, [r7, #22]
  403f16:	0a12      	lsrs	r2, r2, #8
  403f18:	b292      	uxth	r2, r2
  403f1a:	b2d2      	uxtb	r2, r2
  403f1c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  403f1e:	8afb      	ldrh	r3, [r7, #22]
  403f20:	2b00      	cmp	r3, #0
  403f22:	d102      	bne.n	403f2a <fit_lfn+0x9e>
  403f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403f28:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
  403f2a:	69bb      	ldr	r3, [r7, #24]
  403f2c:	3301      	adds	r3, #1
  403f2e:	61bb      	str	r3, [r7, #24]
  403f30:	69bb      	ldr	r3, [r7, #24]
  403f32:	2b0c      	cmp	r3, #12
  403f34:	d9d1      	bls.n	403eda <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  403f36:	8afa      	ldrh	r2, [r7, #22]
  403f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403f3c:	429a      	cmp	r2, r3
  403f3e:	d006      	beq.n	403f4e <fit_lfn+0xc2>
  403f40:	69fb      	ldr	r3, [r7, #28]
  403f42:	005b      	lsls	r3, r3, #1
  403f44:	68fa      	ldr	r2, [r7, #12]
  403f46:	4413      	add	r3, r2
  403f48:	881b      	ldrh	r3, [r3, #0]
  403f4a:	2b00      	cmp	r3, #0
  403f4c:	d103      	bne.n	403f56 <fit_lfn+0xca>
  403f4e:	79fb      	ldrb	r3, [r7, #7]
  403f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f54:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  403f56:	68bb      	ldr	r3, [r7, #8]
  403f58:	79fa      	ldrb	r2, [r7, #7]
  403f5a:	701a      	strb	r2, [r3, #0]
}
  403f5c:	3724      	adds	r7, #36	; 0x24
  403f5e:	46bd      	mov	sp, r7
  403f60:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f64:	4770      	bx	lr
  403f66:	bf00      	nop
  403f68:	00415f78 	.word	0x00415f78

00403f6c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
  403f6c:	b580      	push	{r7, lr}
  403f6e:	b08a      	sub	sp, #40	; 0x28
  403f70:	af00      	add	r7, sp, #0
  403f72:	60f8      	str	r0, [r7, #12]
  403f74:	60b9      	str	r1, [r7, #8]
  403f76:	607a      	str	r2, [r7, #4]
  403f78:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  403f7a:	68f8      	ldr	r0, [r7, #12]
  403f7c:	68b9      	ldr	r1, [r7, #8]
  403f7e:	220b      	movs	r2, #11
  403f80:	4b33      	ldr	r3, [pc, #204]	; (404050 <gen_numname+0xe4>)
  403f82:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  403f84:	887b      	ldrh	r3, [r7, #2]
  403f86:	2b05      	cmp	r3, #5
  403f88:	d90f      	bls.n	403faa <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  403f8a:	887b      	ldrh	r3, [r7, #2]
  403f8c:	b29a      	uxth	r2, r3
  403f8e:	0852      	lsrs	r2, r2, #1
  403f90:	03db      	lsls	r3, r3, #15
  403f92:	4313      	orrs	r3, r2
  403f94:	b29a      	uxth	r2, r3
  403f96:	687b      	ldr	r3, [r7, #4]
  403f98:	1c99      	adds	r1, r3, #2
  403f9a:	6079      	str	r1, [r7, #4]
  403f9c:	881b      	ldrh	r3, [r3, #0]
  403f9e:	4413      	add	r3, r2
  403fa0:	807b      	strh	r3, [r7, #2]
  403fa2:	687b      	ldr	r3, [r7, #4]
  403fa4:	881b      	ldrh	r3, [r3, #0]
  403fa6:	2b00      	cmp	r3, #0
  403fa8:	d1ef      	bne.n	403f8a <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
  403faa:	2307      	movs	r3, #7
  403fac:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
  403fae:	887b      	ldrh	r3, [r7, #2]
  403fb0:	b2db      	uxtb	r3, r3
  403fb2:	f003 030f 	and.w	r3, r3, #15
  403fb6:	b2db      	uxtb	r3, r3
  403fb8:	3330      	adds	r3, #48	; 0x30
  403fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
  403fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403fc2:	2b39      	cmp	r3, #57	; 0x39
  403fc4:	d904      	bls.n	403fd0 <gen_numname+0x64>
  403fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403fca:	3307      	adds	r3, #7
  403fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
  403fd0:	6a3b      	ldr	r3, [r7, #32]
  403fd2:	1e5a      	subs	r2, r3, #1
  403fd4:	623a      	str	r2, [r7, #32]
  403fd6:	f107 0128 	add.w	r1, r7, #40	; 0x28
  403fda:	440b      	add	r3, r1
  403fdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  403fe0:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
  403fe4:	887b      	ldrh	r3, [r7, #2]
  403fe6:	091b      	lsrs	r3, r3, #4
  403fe8:	807b      	strh	r3, [r7, #2]
	} while (seq);
  403fea:	887b      	ldrh	r3, [r7, #2]
  403fec:	2b00      	cmp	r3, #0
  403fee:	d1de      	bne.n	403fae <gen_numname+0x42>
	ns[i] = '~';
  403ff0:	f107 0214 	add.w	r2, r7, #20
  403ff4:	6a3b      	ldr	r3, [r7, #32]
  403ff6:	4413      	add	r3, r2
  403ff8:	227e      	movs	r2, #126	; 0x7e
  403ffa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  403ffc:	2300      	movs	r3, #0
  403ffe:	61fb      	str	r3, [r7, #28]
  404000:	e002      	b.n	404008 <gen_numname+0x9c>
  404002:	69fb      	ldr	r3, [r7, #28]
  404004:	3301      	adds	r3, #1
  404006:	61fb      	str	r3, [r7, #28]
  404008:	69fa      	ldr	r2, [r7, #28]
  40400a:	6a3b      	ldr	r3, [r7, #32]
  40400c:	429a      	cmp	r2, r3
  40400e:	d205      	bcs.n	40401c <gen_numname+0xb0>
  404010:	68fa      	ldr	r2, [r7, #12]
  404012:	69fb      	ldr	r3, [r7, #28]
  404014:	4413      	add	r3, r2
  404016:	781b      	ldrb	r3, [r3, #0]
  404018:	2b20      	cmp	r3, #32
  40401a:	d1f2      	bne.n	404002 <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40401c:	69fb      	ldr	r3, [r7, #28]
  40401e:	1c5a      	adds	r2, r3, #1
  404020:	61fa      	str	r2, [r7, #28]
  404022:	68fa      	ldr	r2, [r7, #12]
  404024:	441a      	add	r2, r3
  404026:	6a3b      	ldr	r3, [r7, #32]
  404028:	2b07      	cmp	r3, #7
  40402a:	d808      	bhi.n	40403e <gen_numname+0xd2>
  40402c:	6a3b      	ldr	r3, [r7, #32]
  40402e:	1c59      	adds	r1, r3, #1
  404030:	6239      	str	r1, [r7, #32]
  404032:	f107 0128 	add.w	r1, r7, #40	; 0x28
  404036:	440b      	add	r3, r1
  404038:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  40403c:	e000      	b.n	404040 <gen_numname+0xd4>
  40403e:	2320      	movs	r3, #32
  404040:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
  404042:	69fb      	ldr	r3, [r7, #28]
  404044:	2b07      	cmp	r3, #7
  404046:	d9e9      	bls.n	40401c <gen_numname+0xb0>
}
  404048:	3728      	adds	r7, #40	; 0x28
  40404a:	46bd      	mov	sp, r7
  40404c:	bd80      	pop	{r7, pc}
  40404e:	bf00      	nop
  404050:	00402f39 	.word	0x00402f39

00404054 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  404054:	b480      	push	{r7}
  404056:	b085      	sub	sp, #20
  404058:	af00      	add	r7, sp, #0
  40405a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
  40405c:	2300      	movs	r3, #0
  40405e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
  404060:	230b      	movs	r3, #11
  404062:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  404064:	7bfb      	ldrb	r3, [r7, #15]
  404066:	b2da      	uxtb	r2, r3
  404068:	0852      	lsrs	r2, r2, #1
  40406a:	01db      	lsls	r3, r3, #7
  40406c:	4313      	orrs	r3, r2
  40406e:	b2da      	uxtb	r2, r3
  404070:	687b      	ldr	r3, [r7, #4]
  404072:	1c59      	adds	r1, r3, #1
  404074:	6079      	str	r1, [r7, #4]
  404076:	781b      	ldrb	r3, [r3, #0]
  404078:	4413      	add	r3, r2
  40407a:	73fb      	strb	r3, [r7, #15]
  40407c:	68bb      	ldr	r3, [r7, #8]
  40407e:	3b01      	subs	r3, #1
  404080:	60bb      	str	r3, [r7, #8]
  404082:	68bb      	ldr	r3, [r7, #8]
  404084:	2b00      	cmp	r3, #0
  404086:	d1ed      	bne.n	404064 <sum_sfn+0x10>
	return sum;
  404088:	7bfb      	ldrb	r3, [r7, #15]
}
  40408a:	4618      	mov	r0, r3
  40408c:	3714      	adds	r7, #20
  40408e:	46bd      	mov	sp, r7
  404090:	f85d 7b04 	ldr.w	r7, [sp], #4
  404094:	4770      	bx	lr
  404096:	bf00      	nop

00404098 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  404098:	b580      	push	{r7, lr}
  40409a:	b086      	sub	sp, #24
  40409c:	af00      	add	r7, sp, #0
  40409e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4040a0:	6878      	ldr	r0, [r7, #4]
  4040a2:	2100      	movs	r1, #0
  4040a4:	4b50      	ldr	r3, [pc, #320]	; (4041e8 <dir_find+0x150>)
  4040a6:	4798      	blx	r3
  4040a8:	4603      	mov	r3, r0
  4040aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
  4040ac:	7dfb      	ldrb	r3, [r7, #23]
  4040ae:	2b00      	cmp	r3, #0
  4040b0:	d001      	beq.n	4040b6 <dir_find+0x1e>
  4040b2:	7dfb      	ldrb	r3, [r7, #23]
  4040b4:	e093      	b.n	4041de <dir_find+0x146>

#if _USE_LFN
	ord = sum = 0xFF;
  4040b6:	23ff      	movs	r3, #255	; 0xff
  4040b8:	753b      	strb	r3, [r7, #20]
  4040ba:	7d3b      	ldrb	r3, [r7, #20]
  4040bc:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  4040be:	687b      	ldr	r3, [r7, #4]
  4040c0:	681a      	ldr	r2, [r3, #0]
  4040c2:	687b      	ldr	r3, [r7, #4]
  4040c4:	691b      	ldr	r3, [r3, #16]
  4040c6:	4610      	mov	r0, r2
  4040c8:	4619      	mov	r1, r3
  4040ca:	4b48      	ldr	r3, [pc, #288]	; (4041ec <dir_find+0x154>)
  4040cc:	4798      	blx	r3
  4040ce:	4603      	mov	r3, r0
  4040d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  4040d2:	7dfb      	ldrb	r3, [r7, #23]
  4040d4:	2b00      	cmp	r3, #0
  4040d6:	d000      	beq.n	4040da <dir_find+0x42>
  4040d8:	e080      	b.n	4041dc <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4040da:	687b      	ldr	r3, [r7, #4]
  4040dc:	695b      	ldr	r3, [r3, #20]
  4040de:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  4040e0:	693b      	ldr	r3, [r7, #16]
  4040e2:	781b      	ldrb	r3, [r3, #0]
  4040e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4040e6:	7dbb      	ldrb	r3, [r7, #22]
  4040e8:	2b00      	cmp	r3, #0
  4040ea:	d102      	bne.n	4040f2 <dir_find+0x5a>
  4040ec:	2304      	movs	r3, #4
  4040ee:	75fb      	strb	r3, [r7, #23]
  4040f0:	e074      	b.n	4041dc <dir_find+0x144>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  4040f2:	693b      	ldr	r3, [r7, #16]
  4040f4:	330b      	adds	r3, #11
  4040f6:	781b      	ldrb	r3, [r3, #0]
  4040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4040fc:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4040fe:	7dbb      	ldrb	r3, [r7, #22]
  404100:	2be5      	cmp	r3, #229	; 0xe5
  404102:	d007      	beq.n	404114 <dir_find+0x7c>
  404104:	7bfb      	ldrb	r3, [r7, #15]
  404106:	f003 0308 	and.w	r3, r3, #8
  40410a:	2b00      	cmp	r3, #0
  40410c:	d005      	beq.n	40411a <dir_find+0x82>
  40410e:	7bfb      	ldrb	r3, [r7, #15]
  404110:	2b0f      	cmp	r3, #15
  404112:	d002      	beq.n	40411a <dir_find+0x82>
			ord = 0xFF;
  404114:	23ff      	movs	r3, #255	; 0xff
  404116:	757b      	strb	r3, [r7, #21]
  404118:	e056      	b.n	4041c8 <dir_find+0x130>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  40411a:	7bfb      	ldrb	r3, [r7, #15]
  40411c:	2b0f      	cmp	r3, #15
  40411e:	d12f      	bne.n	404180 <dir_find+0xe8>
				if (dj->lfn) {
  404120:	687b      	ldr	r3, [r7, #4]
  404122:	69db      	ldr	r3, [r3, #28]
  404124:	2b00      	cmp	r3, #0
  404126:	d04f      	beq.n	4041c8 <dir_find+0x130>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  404128:	7dbb      	ldrb	r3, [r7, #22]
  40412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40412e:	2b00      	cmp	r3, #0
  404130:	d00c      	beq.n	40414c <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
  404132:	693b      	ldr	r3, [r7, #16]
  404134:	7b5b      	ldrb	r3, [r3, #13]
  404136:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
  404138:	7dbb      	ldrb	r3, [r7, #22]
  40413a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40413e:	75bb      	strb	r3, [r7, #22]
  404140:	7dbb      	ldrb	r3, [r7, #22]
  404142:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
  404144:	687b      	ldr	r3, [r7, #4]
  404146:	88da      	ldrh	r2, [r3, #6]
  404148:	687b      	ldr	r3, [r7, #4]
  40414a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40414c:	7dba      	ldrb	r2, [r7, #22]
  40414e:	7d7b      	ldrb	r3, [r7, #21]
  404150:	429a      	cmp	r2, r3
  404152:	d112      	bne.n	40417a <dir_find+0xe2>
  404154:	693b      	ldr	r3, [r7, #16]
  404156:	330d      	adds	r3, #13
  404158:	781b      	ldrb	r3, [r3, #0]
  40415a:	7d3a      	ldrb	r2, [r7, #20]
  40415c:	429a      	cmp	r2, r3
  40415e:	d10c      	bne.n	40417a <dir_find+0xe2>
  404160:	687b      	ldr	r3, [r7, #4]
  404162:	69db      	ldr	r3, [r3, #28]
  404164:	4618      	mov	r0, r3
  404166:	6939      	ldr	r1, [r7, #16]
  404168:	4b21      	ldr	r3, [pc, #132]	; (4041f0 <dir_find+0x158>)
  40416a:	4798      	blx	r3
  40416c:	4603      	mov	r3, r0
  40416e:	2b00      	cmp	r3, #0
  404170:	d003      	beq.n	40417a <dir_find+0xe2>
  404172:	7d7b      	ldrb	r3, [r7, #21]
  404174:	3b01      	subs	r3, #1
  404176:	b2db      	uxtb	r3, r3
  404178:	e000      	b.n	40417c <dir_find+0xe4>
  40417a:	23ff      	movs	r3, #255	; 0xff
  40417c:	757b      	strb	r3, [r7, #21]
  40417e:	e023      	b.n	4041c8 <dir_find+0x130>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  404180:	7d7b      	ldrb	r3, [r7, #21]
  404182:	2b00      	cmp	r3, #0
  404184:	d107      	bne.n	404196 <dir_find+0xfe>
  404186:	6938      	ldr	r0, [r7, #16]
  404188:	4b1a      	ldr	r3, [pc, #104]	; (4041f4 <dir_find+0x15c>)
  40418a:	4798      	blx	r3
  40418c:	4603      	mov	r3, r0
  40418e:	7d3a      	ldrb	r2, [r7, #20]
  404190:	429a      	cmp	r2, r3
  404192:	d100      	bne.n	404196 <dir_find+0xfe>
  404194:	e022      	b.n	4041dc <dir_find+0x144>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404196:	23ff      	movs	r3, #255	; 0xff
  404198:	757b      	strb	r3, [r7, #21]
  40419a:	687b      	ldr	r3, [r7, #4]
  40419c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4041a0:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4041a2:	687b      	ldr	r3, [r7, #4]
  4041a4:	699b      	ldr	r3, [r3, #24]
  4041a6:	330b      	adds	r3, #11
  4041a8:	781b      	ldrb	r3, [r3, #0]
  4041aa:	f003 0301 	and.w	r3, r3, #1
  4041ae:	2b00      	cmp	r3, #0
  4041b0:	d10a      	bne.n	4041c8 <dir_find+0x130>
  4041b2:	687b      	ldr	r3, [r7, #4]
  4041b4:	699b      	ldr	r3, [r3, #24]
  4041b6:	6938      	ldr	r0, [r7, #16]
  4041b8:	4619      	mov	r1, r3
  4041ba:	220b      	movs	r2, #11
  4041bc:	4b0e      	ldr	r3, [pc, #56]	; (4041f8 <dir_find+0x160>)
  4041be:	4798      	blx	r3
  4041c0:	4603      	mov	r3, r0
  4041c2:	2b00      	cmp	r3, #0
  4041c4:	d100      	bne.n	4041c8 <dir_find+0x130>
  4041c6:	e009      	b.n	4041dc <dir_find+0x144>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  4041c8:	6878      	ldr	r0, [r7, #4]
  4041ca:	2100      	movs	r1, #0
  4041cc:	4b0b      	ldr	r3, [pc, #44]	; (4041fc <dir_find+0x164>)
  4041ce:	4798      	blx	r3
  4041d0:	4603      	mov	r3, r0
  4041d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
  4041d4:	7dfb      	ldrb	r3, [r7, #23]
  4041d6:	2b00      	cmp	r3, #0
  4041d8:	f43f af71 	beq.w	4040be <dir_find+0x26>

	return res;
  4041dc:	7dfb      	ldrb	r3, [r7, #23]
}
  4041de:	4618      	mov	r0, r3
  4041e0:	3718      	adds	r7, #24
  4041e2:	46bd      	mov	sp, r7
  4041e4:	bd80      	pop	{r7, pc}
  4041e6:	bf00      	nop
  4041e8:	00403af1 	.word	0x00403af1
  4041ec:	00403381 	.word	0x00403381
  4041f0:	00403db5 	.word	0x00403db5
  4041f4:	00404055 	.word	0x00404055
  4041f8:	00402fa9 	.word	0x00402fa9
  4041fc:	00403bf9 	.word	0x00403bf9

00404200 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  404200:	b590      	push	{r4, r7, lr}
  404202:	b08d      	sub	sp, #52	; 0x34
  404204:	af00      	add	r7, sp, #0
  404206:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  404208:	687b      	ldr	r3, [r7, #4]
  40420a:	699b      	ldr	r3, [r3, #24]
  40420c:	627b      	str	r3, [r7, #36]	; 0x24
  40420e:	687b      	ldr	r3, [r7, #4]
  404210:	69db      	ldr	r3, [r3, #28]
  404212:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
  404214:	f107 030c 	add.w	r3, r7, #12
  404218:	4618      	mov	r0, r3
  40421a:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40421c:	220c      	movs	r2, #12
  40421e:	4b92      	ldr	r3, [pc, #584]	; (404468 <dir_register+0x268>)
  404220:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  404222:	7dfb      	ldrb	r3, [r7, #23]
  404224:	f003 0301 	and.w	r3, r3, #1
  404228:	2b00      	cmp	r3, #0
  40422a:	d035      	beq.n	404298 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  40422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40422e:	330b      	adds	r3, #11
  404230:	2200      	movs	r2, #0
  404232:	701a      	strb	r2, [r3, #0]
  404234:	687b      	ldr	r3, [r7, #4]
  404236:	2200      	movs	r2, #0
  404238:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
  40423a:	2301      	movs	r3, #1
  40423c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40423e:	e015      	b.n	40426c <dir_register+0x6c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
  404240:	f107 020c 	add.w	r2, r7, #12
  404244:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  404246:	6a78      	ldr	r0, [r7, #36]	; 0x24
  404248:	4611      	mov	r1, r2
  40424a:	6a3a      	ldr	r2, [r7, #32]
  40424c:	4c87      	ldr	r4, [pc, #540]	; (40446c <dir_register+0x26c>)
  40424e:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404250:	6878      	ldr	r0, [r7, #4]
  404252:	4b87      	ldr	r3, [pc, #540]	; (404470 <dir_register+0x270>)
  404254:	4798      	blx	r3
  404256:	4603      	mov	r3, r0
  404258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
  40425c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404260:	2b00      	cmp	r3, #0
  404262:	d000      	beq.n	404266 <dir_register+0x66>
  404264:	e005      	b.n	404272 <dir_register+0x72>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  404266:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  404268:	3301      	adds	r3, #1
  40426a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40426c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40426e:	2b63      	cmp	r3, #99	; 0x63
  404270:	d9e6      	bls.n	404240 <dir_register+0x40>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  404272:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  404274:	2b64      	cmp	r3, #100	; 0x64
  404276:	d101      	bne.n	40427c <dir_register+0x7c>
  404278:	2307      	movs	r3, #7
  40427a:	e0f0      	b.n	40445e <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  40427c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404280:	2b04      	cmp	r3, #4
  404282:	d002      	beq.n	40428a <dir_register+0x8a>
  404284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404288:	e0e9      	b.n	40445e <dir_register+0x25e>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  40428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40428c:	330b      	adds	r3, #11
  40428e:	7dfa      	ldrb	r2, [r7, #23]
  404290:	701a      	strb	r2, [r3, #0]
  404292:	687b      	ldr	r3, [r7, #4]
  404294:	6a3a      	ldr	r2, [r7, #32]
  404296:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  404298:	7dfb      	ldrb	r3, [r7, #23]
  40429a:	f003 0302 	and.w	r3, r3, #2
  40429e:	2b00      	cmp	r3, #0
  4042a0:	d016      	beq.n	4042d0 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
  4042a2:	2300      	movs	r3, #0
  4042a4:	857b      	strh	r3, [r7, #42]	; 0x2a
  4042a6:	e002      	b.n	4042ae <dir_register+0xae>
  4042a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4042aa:	3301      	adds	r3, #1
  4042ac:	857b      	strh	r3, [r7, #42]	; 0x2a
  4042ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4042b0:	005b      	lsls	r3, r3, #1
  4042b2:	6a3a      	ldr	r2, [r7, #32]
  4042b4:	4413      	add	r3, r2
  4042b6:	881b      	ldrh	r3, [r3, #0]
  4042b8:	2b00      	cmp	r3, #0
  4042ba:	d1f5      	bne.n	4042a8 <dir_register+0xa8>
		ne = (ne + 25) / 13;
  4042bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4042be:	3319      	adds	r3, #25
  4042c0:	4a6c      	ldr	r2, [pc, #432]	; (404474 <dir_register+0x274>)
  4042c2:	fb82 1203 	smull	r1, r2, r2, r3
  4042c6:	1092      	asrs	r2, r2, #2
  4042c8:	17db      	asrs	r3, r3, #31
  4042ca:	1ad3      	subs	r3, r2, r3
  4042cc:	857b      	strh	r3, [r7, #42]	; 0x2a
  4042ce:	e001      	b.n	4042d4 <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  4042d0:	2301      	movs	r3, #1
  4042d2:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  4042d4:	6878      	ldr	r0, [r7, #4]
  4042d6:	2100      	movs	r1, #0
  4042d8:	4b67      	ldr	r3, [pc, #412]	; (404478 <dir_register+0x278>)
  4042da:	4798      	blx	r3
  4042dc:	4603      	mov	r3, r0
  4042de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
  4042e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4042e6:	2b00      	cmp	r3, #0
  4042e8:	d002      	beq.n	4042f0 <dir_register+0xf0>
  4042ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4042ee:	e0b6      	b.n	40445e <dir_register+0x25e>
	n = is = 0;
  4042f0:	2300      	movs	r3, #0
  4042f2:	853b      	strh	r3, [r7, #40]	; 0x28
  4042f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4042f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
  4042f8:	687b      	ldr	r3, [r7, #4]
  4042fa:	681a      	ldr	r2, [r3, #0]
  4042fc:	687b      	ldr	r3, [r7, #4]
  4042fe:	691b      	ldr	r3, [r3, #16]
  404300:	4610      	mov	r0, r2
  404302:	4619      	mov	r1, r3
  404304:	4b5d      	ldr	r3, [pc, #372]	; (40447c <dir_register+0x27c>)
  404306:	4798      	blx	r3
  404308:	4603      	mov	r3, r0
  40430a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
  40430e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404312:	2b00      	cmp	r3, #0
  404314:	d000      	beq.n	404318 <dir_register+0x118>
  404316:	e025      	b.n	404364 <dir_register+0x164>
		c = *dj->dir;				/* Check the entry status */
  404318:	687b      	ldr	r3, [r7, #4]
  40431a:	695b      	ldr	r3, [r3, #20]
  40431c:	781b      	ldrb	r3, [r3, #0]
  40431e:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  404320:	7ffb      	ldrb	r3, [r7, #31]
  404322:	2be5      	cmp	r3, #229	; 0xe5
  404324:	d002      	beq.n	40432c <dir_register+0x12c>
  404326:	7ffb      	ldrb	r3, [r7, #31]
  404328:	2b00      	cmp	r3, #0
  40432a:	d10e      	bne.n	40434a <dir_register+0x14a>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40432c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40432e:	2b00      	cmp	r3, #0
  404330:	d102      	bne.n	404338 <dir_register+0x138>
  404332:	687b      	ldr	r3, [r7, #4]
  404334:	88db      	ldrh	r3, [r3, #6]
  404336:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  404338:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40433a:	3301      	adds	r3, #1
  40433c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40433e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  404340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  404342:	429a      	cmp	r2, r3
  404344:	d100      	bne.n	404348 <dir_register+0x148>
  404346:	e00d      	b.n	404364 <dir_register+0x164>
  404348:	e001      	b.n	40434e <dir_register+0x14e>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  40434a:	2300      	movs	r3, #0
  40434c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40434e:	6878      	ldr	r0, [r7, #4]
  404350:	2101      	movs	r1, #1
  404352:	4b4b      	ldr	r3, [pc, #300]	; (404480 <dir_register+0x280>)
  404354:	4798      	blx	r3
  404356:	4603      	mov	r3, r0
  404358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
  40435c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404360:	2b00      	cmp	r3, #0
  404362:	d0c9      	beq.n	4042f8 <dir_register+0xf8>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  404364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404368:	2b00      	cmp	r3, #0
  40436a:	d146      	bne.n	4043fa <dir_register+0x1fa>
  40436c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40436e:	2b01      	cmp	r3, #1
  404370:	d943      	bls.n	4043fa <dir_register+0x1fa>
		res = dir_sdi(dj, is);
  404372:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404374:	6878      	ldr	r0, [r7, #4]
  404376:	4619      	mov	r1, r3
  404378:	4b3f      	ldr	r3, [pc, #252]	; (404478 <dir_register+0x278>)
  40437a:	4798      	blx	r3
  40437c:	4603      	mov	r3, r0
  40437e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  404382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  404386:	2b00      	cmp	r3, #0
  404388:	d137      	bne.n	4043fa <dir_register+0x1fa>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  40438a:	687b      	ldr	r3, [r7, #4]
  40438c:	699b      	ldr	r3, [r3, #24]
  40438e:	4618      	mov	r0, r3
  404390:	4b3c      	ldr	r3, [pc, #240]	; (404484 <dir_register+0x284>)
  404392:	4798      	blx	r3
  404394:	4603      	mov	r3, r0
  404396:	77bb      	strb	r3, [r7, #30]
			ne--;
  404398:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40439a:	3b01      	subs	r3, #1
  40439c:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  40439e:	687b      	ldr	r3, [r7, #4]
  4043a0:	681a      	ldr	r2, [r3, #0]
  4043a2:	687b      	ldr	r3, [r7, #4]
  4043a4:	691b      	ldr	r3, [r3, #16]
  4043a6:	4610      	mov	r0, r2
  4043a8:	4619      	mov	r1, r3
  4043aa:	4b34      	ldr	r3, [pc, #208]	; (40447c <dir_register+0x27c>)
  4043ac:	4798      	blx	r3
  4043ae:	4603      	mov	r3, r0
  4043b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
  4043b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4043b8:	2b00      	cmp	r3, #0
  4043ba:	d000      	beq.n	4043be <dir_register+0x1be>
  4043bc:	e01d      	b.n	4043fa <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4043be:	687b      	ldr	r3, [r7, #4]
  4043c0:	69d8      	ldr	r0, [r3, #28]
  4043c2:	687b      	ldr	r3, [r7, #4]
  4043c4:	6959      	ldr	r1, [r3, #20]
  4043c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4043c8:	b2da      	uxtb	r2, r3
  4043ca:	7fbb      	ldrb	r3, [r7, #30]
  4043cc:	4c2e      	ldr	r4, [pc, #184]	; (404488 <dir_register+0x288>)
  4043ce:	47a0      	blx	r4
				dj->fs->wflag = 1;
  4043d0:	687b      	ldr	r3, [r7, #4]
  4043d2:	681b      	ldr	r3, [r3, #0]
  4043d4:	2201      	movs	r2, #1
  4043d6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  4043d8:	6878      	ldr	r0, [r7, #4]
  4043da:	2100      	movs	r1, #0
  4043dc:	4b28      	ldr	r3, [pc, #160]	; (404480 <dir_register+0x280>)
  4043de:	4798      	blx	r3
  4043e0:	4603      	mov	r3, r0
  4043e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
  4043e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4043ea:	2b00      	cmp	r3, #0
  4043ec:	d105      	bne.n	4043fa <dir_register+0x1fa>
  4043ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4043f0:	3b01      	subs	r3, #1
  4043f2:	857b      	strh	r3, [r7, #42]	; 0x2a
  4043f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4043f6:	2b00      	cmp	r3, #0
  4043f8:	d1d1      	bne.n	40439e <dir_register+0x19e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
  4043fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4043fe:	2b00      	cmp	r3, #0
  404400:	d12b      	bne.n	40445a <dir_register+0x25a>
		res = move_window(dj->fs, dj->sect);
  404402:	687b      	ldr	r3, [r7, #4]
  404404:	681a      	ldr	r2, [r3, #0]
  404406:	687b      	ldr	r3, [r7, #4]
  404408:	691b      	ldr	r3, [r3, #16]
  40440a:	4610      	mov	r0, r2
  40440c:	4619      	mov	r1, r3
  40440e:	4b1b      	ldr	r3, [pc, #108]	; (40447c <dir_register+0x27c>)
  404410:	4798      	blx	r3
  404412:	4603      	mov	r3, r0
  404414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  404418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40441c:	2b00      	cmp	r3, #0
  40441e:	d11c      	bne.n	40445a <dir_register+0x25a>
			dir = dj->dir;
  404420:	687b      	ldr	r3, [r7, #4]
  404422:	695b      	ldr	r3, [r3, #20]
  404424:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  404426:	69b8      	ldr	r0, [r7, #24]
  404428:	2100      	movs	r1, #0
  40442a:	2220      	movs	r2, #32
  40442c:	4b17      	ldr	r3, [pc, #92]	; (40448c <dir_register+0x28c>)
  40442e:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  404430:	687b      	ldr	r3, [r7, #4]
  404432:	699b      	ldr	r3, [r3, #24]
  404434:	69b8      	ldr	r0, [r7, #24]
  404436:	4619      	mov	r1, r3
  404438:	220b      	movs	r2, #11
  40443a:	4b0b      	ldr	r3, [pc, #44]	; (404468 <dir_register+0x268>)
  40443c:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  40443e:	69bb      	ldr	r3, [r7, #24]
  404440:	330c      	adds	r3, #12
  404442:	687a      	ldr	r2, [r7, #4]
  404444:	6992      	ldr	r2, [r2, #24]
  404446:	320b      	adds	r2, #11
  404448:	7812      	ldrb	r2, [r2, #0]
  40444a:	f002 0218 	and.w	r2, r2, #24
  40444e:	b2d2      	uxtb	r2, r2
  404450:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
  404452:	687b      	ldr	r3, [r7, #4]
  404454:	681b      	ldr	r3, [r3, #0]
  404456:	2201      	movs	r2, #1
  404458:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
  40445a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  40445e:	4618      	mov	r0, r3
  404460:	3734      	adds	r7, #52	; 0x34
  404462:	46bd      	mov	sp, r7
  404464:	bd90      	pop	{r4, r7, pc}
  404466:	bf00      	nop
  404468:	00402f39 	.word	0x00402f39
  40446c:	00403f6d 	.word	0x00403f6d
  404470:	00404099 	.word	0x00404099
  404474:	4ec4ec4f 	.word	0x4ec4ec4f
  404478:	00403af1 	.word	0x00403af1
  40447c:	00403381 	.word	0x00403381
  404480:	00403bf9 	.word	0x00403bf9
  404484:	00404055 	.word	0x00404055
  404488:	00403e8d 	.word	0x00403e8d
  40448c:	00402f75 	.word	0x00402f75

00404490 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
  404490:	b580      	push	{r7, lr}
  404492:	b08a      	sub	sp, #40	; 0x28
  404494:	af00      	add	r7, sp, #0
  404496:	6078      	str	r0, [r7, #4]
  404498:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  40449a:	683b      	ldr	r3, [r7, #0]
  40449c:	681b      	ldr	r3, [r3, #0]
  40449e:	613b      	str	r3, [r7, #16]
  4044a0:	e002      	b.n	4044a8 <create_name+0x18>
  4044a2:	693b      	ldr	r3, [r7, #16]
  4044a4:	3301      	adds	r3, #1
  4044a6:	613b      	str	r3, [r7, #16]
  4044a8:	693b      	ldr	r3, [r7, #16]
  4044aa:	781b      	ldrb	r3, [r3, #0]
  4044ac:	2b2f      	cmp	r3, #47	; 0x2f
  4044ae:	d0f8      	beq.n	4044a2 <create_name+0x12>
  4044b0:	693b      	ldr	r3, [r7, #16]
  4044b2:	781b      	ldrb	r3, [r3, #0]
  4044b4:	2b5c      	cmp	r3, #92	; 0x5c
  4044b6:	d0f4      	beq.n	4044a2 <create_name+0x12>
	lfn = dj->lfn;
  4044b8:	687b      	ldr	r3, [r7, #4]
  4044ba:	69db      	ldr	r3, [r3, #28]
  4044bc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
  4044be:	2300      	movs	r3, #0
  4044c0:	617b      	str	r3, [r7, #20]
  4044c2:	697b      	ldr	r3, [r7, #20]
  4044c4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
  4044c6:	69bb      	ldr	r3, [r7, #24]
  4044c8:	1c5a      	adds	r2, r3, #1
  4044ca:	61ba      	str	r2, [r7, #24]
  4044cc:	693a      	ldr	r2, [r7, #16]
  4044ce:	4413      	add	r3, r2
  4044d0:	781b      	ldrb	r3, [r3, #0]
  4044d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4044d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4044d6:	2b1f      	cmp	r3, #31
  4044d8:	d92f      	bls.n	40453a <create_name+0xaa>
  4044da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4044dc:	2b2f      	cmp	r3, #47	; 0x2f
  4044de:	d02c      	beq.n	40453a <create_name+0xaa>
  4044e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4044e2:	2b5c      	cmp	r3, #92	; 0x5c
  4044e4:	d029      	beq.n	40453a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
  4044e6:	697b      	ldr	r3, [r7, #20]
  4044e8:	2bfe      	cmp	r3, #254	; 0xfe
  4044ea:	d901      	bls.n	4044f0 <create_name+0x60>
			return FR_INVALID_NAME;
  4044ec:	2306      	movs	r3, #6
  4044ee:	e181      	b.n	4047f4 <create_name+0x364>
#if !_LFN_UNICODE
		w &= 0xFF;
  4044f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4044f2:	b2db      	uxtb	r3, r3
  4044f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4044f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4044f8:	4618      	mov	r0, r3
  4044fa:	2101      	movs	r1, #1
  4044fc:	4b93      	ldr	r3, [pc, #588]	; (40474c <create_name+0x2bc>)
  4044fe:	4798      	blx	r3
  404500:	4603      	mov	r3, r0
  404502:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  404504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404506:	2b00      	cmp	r3, #0
  404508:	d101      	bne.n	40450e <create_name+0x7e>
  40450a:	2306      	movs	r3, #6
  40450c:	e172      	b.n	4047f4 <create_name+0x364>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40450e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404510:	2b7f      	cmp	r3, #127	; 0x7f
  404512:	d809      	bhi.n	404528 <create_name+0x98>
  404514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404516:	488e      	ldr	r0, [pc, #568]	; (404750 <create_name+0x2c0>)
  404518:	4619      	mov	r1, r3
  40451a:	4b8e      	ldr	r3, [pc, #568]	; (404754 <create_name+0x2c4>)
  40451c:	4798      	blx	r3
  40451e:	4603      	mov	r3, r0
  404520:	2b00      	cmp	r3, #0
  404522:	d001      	beq.n	404528 <create_name+0x98>
			return FR_INVALID_NAME;
  404524:	2306      	movs	r3, #6
  404526:	e165      	b.n	4047f4 <create_name+0x364>
		lfn[di++] = w;					/* Store the Unicode char */
  404528:	697b      	ldr	r3, [r7, #20]
  40452a:	1c5a      	adds	r2, r3, #1
  40452c:	617a      	str	r2, [r7, #20]
  40452e:	005b      	lsls	r3, r3, #1
  404530:	68fa      	ldr	r2, [r7, #12]
  404532:	4413      	add	r3, r2
  404534:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  404536:	801a      	strh	r2, [r3, #0]
	}
  404538:	e7c5      	b.n	4044c6 <create_name+0x36>
	*path = &p[si];						/* Return pointer to the next segment */
  40453a:	693a      	ldr	r2, [r7, #16]
  40453c:	69bb      	ldr	r3, [r7, #24]
  40453e:	441a      	add	r2, r3
  404540:	683b      	ldr	r3, [r7, #0]
  404542:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  404544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404546:	2b1f      	cmp	r3, #31
  404548:	d801      	bhi.n	40454e <create_name+0xbe>
  40454a:	2304      	movs	r3, #4
  40454c:	e000      	b.n	404550 <create_name+0xc0>
  40454e:	2300      	movs	r3, #0
  404550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404554:	e012      	b.n	40457c <create_name+0xec>
		w = lfn[di-1];
  404556:	697b      	ldr	r3, [r7, #20]
  404558:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40455c:	3b01      	subs	r3, #1
  40455e:	005b      	lsls	r3, r3, #1
  404560:	68fa      	ldr	r2, [r7, #12]
  404562:	4413      	add	r3, r2
  404564:	881b      	ldrh	r3, [r3, #0]
  404566:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
  404568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40456a:	2b20      	cmp	r3, #32
  40456c:	d003      	beq.n	404576 <create_name+0xe6>
  40456e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404570:	2b2e      	cmp	r3, #46	; 0x2e
  404572:	d000      	beq.n	404576 <create_name+0xe6>
  404574:	e005      	b.n	404582 <create_name+0xf2>
		di--;
  404576:	697b      	ldr	r3, [r7, #20]
  404578:	3b01      	subs	r3, #1
  40457a:	617b      	str	r3, [r7, #20]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  40457c:	697b      	ldr	r3, [r7, #20]
  40457e:	2b00      	cmp	r3, #0
  404580:	d1e9      	bne.n	404556 <create_name+0xc6>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  404582:	697b      	ldr	r3, [r7, #20]
  404584:	2b00      	cmp	r3, #0
  404586:	d101      	bne.n	40458c <create_name+0xfc>
  404588:	2306      	movs	r3, #6
  40458a:	e133      	b.n	4047f4 <create_name+0x364>

	lfn[di] = 0;						/* LFN is created */
  40458c:	697b      	ldr	r3, [r7, #20]
  40458e:	005b      	lsls	r3, r3, #1
  404590:	68fa      	ldr	r2, [r7, #12]
  404592:	4413      	add	r3, r2
  404594:	2200      	movs	r2, #0
  404596:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  404598:	687b      	ldr	r3, [r7, #4]
  40459a:	699b      	ldr	r3, [r3, #24]
  40459c:	4618      	mov	r0, r3
  40459e:	2120      	movs	r1, #32
  4045a0:	220b      	movs	r2, #11
  4045a2:	4b6d      	ldr	r3, [pc, #436]	; (404758 <create_name+0x2c8>)
  4045a4:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4045a6:	2300      	movs	r3, #0
  4045a8:	61bb      	str	r3, [r7, #24]
  4045aa:	e002      	b.n	4045b2 <create_name+0x122>
  4045ac:	69bb      	ldr	r3, [r7, #24]
  4045ae:	3301      	adds	r3, #1
  4045b0:	61bb      	str	r3, [r7, #24]
  4045b2:	69bb      	ldr	r3, [r7, #24]
  4045b4:	005b      	lsls	r3, r3, #1
  4045b6:	68fa      	ldr	r2, [r7, #12]
  4045b8:	4413      	add	r3, r2
  4045ba:	881b      	ldrh	r3, [r3, #0]
  4045bc:	2b20      	cmp	r3, #32
  4045be:	d0f5      	beq.n	4045ac <create_name+0x11c>
  4045c0:	69bb      	ldr	r3, [r7, #24]
  4045c2:	005b      	lsls	r3, r3, #1
  4045c4:	68fa      	ldr	r2, [r7, #12]
  4045c6:	4413      	add	r3, r2
  4045c8:	881b      	ldrh	r3, [r3, #0]
  4045ca:	2b2e      	cmp	r3, #46	; 0x2e
  4045cc:	d0ee      	beq.n	4045ac <create_name+0x11c>
	if (si) cf |= NS_LOSS | NS_LFN;
  4045ce:	69bb      	ldr	r3, [r7, #24]
  4045d0:	2b00      	cmp	r3, #0
  4045d2:	d006      	beq.n	4045e2 <create_name+0x152>
  4045d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4045d8:	f043 0303 	orr.w	r3, r3, #3
  4045dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4045e0:	e003      	b.n	4045ea <create_name+0x15a>
  4045e2:	e002      	b.n	4045ea <create_name+0x15a>
  4045e4:	697b      	ldr	r3, [r7, #20]
  4045e6:	3b01      	subs	r3, #1
  4045e8:	617b      	str	r3, [r7, #20]
  4045ea:	697b      	ldr	r3, [r7, #20]
  4045ec:	2b00      	cmp	r3, #0
  4045ee:	d009      	beq.n	404604 <create_name+0x174>
  4045f0:	697b      	ldr	r3, [r7, #20]
  4045f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4045f6:	3b01      	subs	r3, #1
  4045f8:	005b      	lsls	r3, r3, #1
  4045fa:	68fa      	ldr	r2, [r7, #12]
  4045fc:	4413      	add	r3, r2
  4045fe:	881b      	ldrh	r3, [r3, #0]
  404600:	2b2e      	cmp	r3, #46	; 0x2e
  404602:	d1ef      	bne.n	4045e4 <create_name+0x154>

	b = i = 0; ni = 8;
  404604:	2300      	movs	r3, #0
  404606:	623b      	str	r3, [r7, #32]
  404608:	2300      	movs	r3, #0
  40460a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40460e:	2308      	movs	r3, #8
  404610:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  404612:	69bb      	ldr	r3, [r7, #24]
  404614:	1c5a      	adds	r2, r3, #1
  404616:	61ba      	str	r2, [r7, #24]
  404618:	005b      	lsls	r3, r3, #1
  40461a:	68fa      	ldr	r2, [r7, #12]
  40461c:	4413      	add	r3, r2
  40461e:	881b      	ldrh	r3, [r3, #0]
  404620:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
  404622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404624:	2b00      	cmp	r3, #0
  404626:	d100      	bne.n	40462a <create_name+0x19a>
  404628:	e09c      	b.n	404764 <create_name+0x2d4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  40462a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40462c:	2b20      	cmp	r3, #32
  40462e:	d006      	beq.n	40463e <create_name+0x1ae>
  404630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404632:	2b2e      	cmp	r3, #46	; 0x2e
  404634:	d10a      	bne.n	40464c <create_name+0x1bc>
  404636:	69ba      	ldr	r2, [r7, #24]
  404638:	697b      	ldr	r3, [r7, #20]
  40463a:	429a      	cmp	r2, r3
  40463c:	d006      	beq.n	40464c <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
  40463e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  404642:	f043 0303 	orr.w	r3, r3, #3
  404646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40464a:	e07e      	b.n	40474a <create_name+0x2ba>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  40464c:	6a3a      	ldr	r2, [r7, #32]
  40464e:	69fb      	ldr	r3, [r7, #28]
  404650:	429a      	cmp	r2, r3
  404652:	d203      	bcs.n	40465c <create_name+0x1cc>
  404654:	69ba      	ldr	r2, [r7, #24]
  404656:	697b      	ldr	r3, [r7, #20]
  404658:	429a      	cmp	r2, r3
  40465a:	d124      	bne.n	4046a6 <create_name+0x216>
			if (ni == 11) {				/* Long extension */
  40465c:	69fb      	ldr	r3, [r7, #28]
  40465e:	2b0b      	cmp	r3, #11
  404660:	d106      	bne.n	404670 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
  404662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  404666:	f043 0303 	orr.w	r3, r3, #3
  40466a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40466e:	e079      	b.n	404764 <create_name+0x2d4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  404670:	69ba      	ldr	r2, [r7, #24]
  404672:	697b      	ldr	r3, [r7, #20]
  404674:	429a      	cmp	r2, r3
  404676:	d005      	beq.n	404684 <create_name+0x1f4>
  404678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40467c:	f043 0303 	orr.w	r3, r3, #3
  404680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
  404684:	69ba      	ldr	r2, [r7, #24]
  404686:	697b      	ldr	r3, [r7, #20]
  404688:	429a      	cmp	r2, r3
  40468a:	d900      	bls.n	40468e <create_name+0x1fe>
  40468c:	e06a      	b.n	404764 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
  40468e:	697b      	ldr	r3, [r7, #20]
  404690:	61bb      	str	r3, [r7, #24]
  404692:	2308      	movs	r3, #8
  404694:	623b      	str	r3, [r7, #32]
  404696:	230b      	movs	r3, #11
  404698:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
  40469a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40469e:	009b      	lsls	r3, r3, #2
  4046a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4046a4:	e051      	b.n	40474a <create_name+0x2ba>
		}

		if (w >= 0x80) {				/* Non ASCII char */
  4046a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046a8:	2b7f      	cmp	r3, #127	; 0x7f
  4046aa:	d914      	bls.n	4046d6 <create_name+0x246>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  4046ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046ae:	4618      	mov	r0, r3
  4046b0:	2100      	movs	r1, #0
  4046b2:	4b26      	ldr	r3, [pc, #152]	; (40474c <create_name+0x2bc>)
  4046b4:	4798      	blx	r3
  4046b6:	4603      	mov	r3, r0
  4046b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4046ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046bc:	2b00      	cmp	r3, #0
  4046be:	d004      	beq.n	4046ca <create_name+0x23a>
  4046c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046c2:	3b80      	subs	r3, #128	; 0x80
  4046c4:	4a25      	ldr	r2, [pc, #148]	; (40475c <create_name+0x2cc>)
  4046c6:	5cd3      	ldrb	r3, [r2, r3]
  4046c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  4046ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4046ce:	f043 0302 	orr.w	r3, r3, #2
  4046d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  4046d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046d8:	2b00      	cmp	r3, #0
  4046da:	d007      	beq.n	4046ec <create_name+0x25c>
  4046dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4046de:	4820      	ldr	r0, [pc, #128]	; (404760 <create_name+0x2d0>)
  4046e0:	4619      	mov	r1, r3
  4046e2:	4b1c      	ldr	r3, [pc, #112]	; (404754 <create_name+0x2c4>)
  4046e4:	4798      	blx	r3
  4046e6:	4603      	mov	r3, r0
  4046e8:	2b00      	cmp	r3, #0
  4046ea:	d008      	beq.n	4046fe <create_name+0x26e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  4046ec:	235f      	movs	r3, #95	; 0x5f
  4046ee:	84bb      	strh	r3, [r7, #36]	; 0x24
  4046f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4046f4:	f043 0303 	orr.w	r3, r3, #3
  4046f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  4046fc:	e01b      	b.n	404736 <create_name+0x2a6>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  4046fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404700:	2b40      	cmp	r3, #64	; 0x40
  404702:	d909      	bls.n	404718 <create_name+0x288>
  404704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404706:	2b5a      	cmp	r3, #90	; 0x5a
  404708:	d806      	bhi.n	404718 <create_name+0x288>
					b |= 2;
  40470a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40470e:	f043 0302 	orr.w	r3, r3, #2
  404712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  404716:	e00e      	b.n	404736 <create_name+0x2a6>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  404718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40471a:	2b60      	cmp	r3, #96	; 0x60
  40471c:	d90b      	bls.n	404736 <create_name+0x2a6>
  40471e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404720:	2b7a      	cmp	r3, #122	; 0x7a
  404722:	d808      	bhi.n	404736 <create_name+0x2a6>
						b |= 1; w -= 0x20;
  404724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404728:	f043 0301 	orr.w	r3, r3, #1
  40472c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  404730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  404732:	3b20      	subs	r3, #32
  404734:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  404736:	687b      	ldr	r3, [r7, #4]
  404738:	699a      	ldr	r2, [r3, #24]
  40473a:	6a3b      	ldr	r3, [r7, #32]
  40473c:	1c59      	adds	r1, r3, #1
  40473e:	6239      	str	r1, [r7, #32]
  404740:	4413      	add	r3, r2
  404742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  404744:	b2d2      	uxtb	r2, r2
  404746:	701a      	strb	r2, [r3, #0]
	}
  404748:	e763      	b.n	404612 <create_name+0x182>
  40474a:	e762      	b.n	404612 <create_name+0x182>
  40474c:	00405ea5 	.word	0x00405ea5
  404750:	00415f88 	.word	0x00415f88
  404754:	00402ff9 	.word	0x00402ff9
  404758:	00402f75 	.word	0x00402f75
  40475c:	00415f9c 	.word	0x00415f9c
  404760:	00415f94 	.word	0x00415f94

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  404764:	687b      	ldr	r3, [r7, #4]
  404766:	699b      	ldr	r3, [r3, #24]
  404768:	781b      	ldrb	r3, [r3, #0]
  40476a:	2be5      	cmp	r3, #229	; 0xe5
  40476c:	d103      	bne.n	404776 <create_name+0x2e6>
  40476e:	687b      	ldr	r3, [r7, #4]
  404770:	699b      	ldr	r3, [r3, #24]
  404772:	2205      	movs	r2, #5
  404774:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  404776:	69fb      	ldr	r3, [r7, #28]
  404778:	2b08      	cmp	r3, #8
  40477a:	d104      	bne.n	404786 <create_name+0x2f6>
  40477c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404780:	009b      	lsls	r3, r3, #2
  404782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  404786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40478a:	f003 030c 	and.w	r3, r3, #12
  40478e:	2b0c      	cmp	r3, #12
  404790:	d005      	beq.n	40479e <create_name+0x30e>
  404792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404796:	f003 0303 	and.w	r3, r3, #3
  40479a:	2b03      	cmp	r3, #3
  40479c:	d105      	bne.n	4047aa <create_name+0x31a>
		cf |= NS_LFN;
  40479e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4047a2:	f043 0302 	orr.w	r3, r3, #2
  4047a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  4047aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4047ae:	f003 0302 	and.w	r3, r3, #2
  4047b2:	2b00      	cmp	r3, #0
  4047b4:	d117      	bne.n	4047e6 <create_name+0x356>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  4047b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4047ba:	f003 0303 	and.w	r3, r3, #3
  4047be:	2b01      	cmp	r3, #1
  4047c0:	d105      	bne.n	4047ce <create_name+0x33e>
  4047c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4047c6:	f043 0310 	orr.w	r3, r3, #16
  4047ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  4047ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4047d2:	f003 030c 	and.w	r3, r3, #12
  4047d6:	2b04      	cmp	r3, #4
  4047d8:	d105      	bne.n	4047e6 <create_name+0x356>
  4047da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4047de:	f043 0308 	orr.w	r3, r3, #8
  4047e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
  4047e6:	687b      	ldr	r3, [r7, #4]
  4047e8:	699b      	ldr	r3, [r3, #24]
  4047ea:	330b      	adds	r3, #11
  4047ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  4047f0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
  4047f2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
  4047f4:	4618      	mov	r0, r3
  4047f6:	3728      	adds	r7, #40	; 0x28
  4047f8:	46bd      	mov	sp, r7
  4047fa:	bd80      	pop	{r7, pc}

004047fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  4047fc:	b580      	push	{r7, lr}
  4047fe:	b084      	sub	sp, #16
  404800:	af00      	add	r7, sp, #0
  404802:	6078      	str	r0, [r7, #4]
  404804:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  404806:	683b      	ldr	r3, [r7, #0]
  404808:	781b      	ldrb	r3, [r3, #0]
  40480a:	2b2f      	cmp	r3, #47	; 0x2f
  40480c:	d003      	beq.n	404816 <follow_path+0x1a>
  40480e:	683b      	ldr	r3, [r7, #0]
  404810:	781b      	ldrb	r3, [r3, #0]
  404812:	2b5c      	cmp	r3, #92	; 0x5c
  404814:	d102      	bne.n	40481c <follow_path+0x20>
		path++;
  404816:	683b      	ldr	r3, [r7, #0]
  404818:	3301      	adds	r3, #1
  40481a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
  40481c:	687b      	ldr	r3, [r7, #4]
  40481e:	2200      	movs	r2, #0
  404820:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  404822:	683b      	ldr	r3, [r7, #0]
  404824:	781b      	ldrb	r3, [r3, #0]
  404826:	2b1f      	cmp	r3, #31
  404828:	d809      	bhi.n	40483e <follow_path+0x42>
		res = dir_sdi(dj, 0);
  40482a:	6878      	ldr	r0, [r7, #4]
  40482c:	2100      	movs	r1, #0
  40482e:	4b2f      	ldr	r3, [pc, #188]	; (4048ec <follow_path+0xf0>)
  404830:	4798      	blx	r3
  404832:	4603      	mov	r3, r0
  404834:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
  404836:	687b      	ldr	r3, [r7, #4]
  404838:	2200      	movs	r2, #0
  40483a:	615a      	str	r2, [r3, #20]
  40483c:	e051      	b.n	4048e2 <follow_path+0xe6>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
  40483e:	463b      	mov	r3, r7
  404840:	6878      	ldr	r0, [r7, #4]
  404842:	4619      	mov	r1, r3
  404844:	4b2a      	ldr	r3, [pc, #168]	; (4048f0 <follow_path+0xf4>)
  404846:	4798      	blx	r3
  404848:	4603      	mov	r3, r0
  40484a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  40484c:	7bfb      	ldrb	r3, [r7, #15]
  40484e:	2b00      	cmp	r3, #0
  404850:	d000      	beq.n	404854 <follow_path+0x58>
  404852:	e046      	b.n	4048e2 <follow_path+0xe6>
			res = dir_find(dj);				/* Find it */
  404854:	6878      	ldr	r0, [r7, #4]
  404856:	4b27      	ldr	r3, [pc, #156]	; (4048f4 <follow_path+0xf8>)
  404858:	4798      	blx	r3
  40485a:	4603      	mov	r3, r0
  40485c:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
  40485e:	687b      	ldr	r3, [r7, #4]
  404860:	699b      	ldr	r3, [r3, #24]
  404862:	7adb      	ldrb	r3, [r3, #11]
  404864:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
  404866:	7bfb      	ldrb	r3, [r7, #15]
  404868:	2b00      	cmp	r3, #0
  40486a:	d00c      	beq.n	404886 <follow_path+0x8a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  40486c:	7bfb      	ldrb	r3, [r7, #15]
  40486e:	2b04      	cmp	r3, #4
  404870:	d000      	beq.n	404874 <follow_path+0x78>
  404872:	e036      	b.n	4048e2 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  404874:	7bbb      	ldrb	r3, [r7, #14]
  404876:	f003 0304 	and.w	r3, r3, #4
  40487a:	2b00      	cmp	r3, #0
  40487c:	d102      	bne.n	404884 <follow_path+0x88>
  40487e:	2305      	movs	r3, #5
  404880:	73fb      	strb	r3, [r7, #15]
				}
				break;
  404882:	e02e      	b.n	4048e2 <follow_path+0xe6>
  404884:	e02d      	b.n	4048e2 <follow_path+0xe6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  404886:	7bbb      	ldrb	r3, [r7, #14]
  404888:	f003 0304 	and.w	r3, r3, #4
  40488c:	2b00      	cmp	r3, #0
  40488e:	d000      	beq.n	404892 <follow_path+0x96>
  404890:	e027      	b.n	4048e2 <follow_path+0xe6>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  404892:	687b      	ldr	r3, [r7, #4]
  404894:	695b      	ldr	r3, [r3, #20]
  404896:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  404898:	68bb      	ldr	r3, [r7, #8]
  40489a:	330b      	adds	r3, #11
  40489c:	781b      	ldrb	r3, [r3, #0]
  40489e:	f003 0310 	and.w	r3, r3, #16
  4048a2:	2b00      	cmp	r3, #0
  4048a4:	d102      	bne.n	4048ac <follow_path+0xb0>
				res = FR_NO_PATH; break;
  4048a6:	2305      	movs	r3, #5
  4048a8:	73fb      	strb	r3, [r7, #15]
  4048aa:	e01a      	b.n	4048e2 <follow_path+0xe6>
			}
			dj->sclust = LD_CLUST(dir);
  4048ac:	68bb      	ldr	r3, [r7, #8]
  4048ae:	3315      	adds	r3, #21
  4048b0:	781b      	ldrb	r3, [r3, #0]
  4048b2:	021b      	lsls	r3, r3, #8
  4048b4:	b29a      	uxth	r2, r3
  4048b6:	68bb      	ldr	r3, [r7, #8]
  4048b8:	3314      	adds	r3, #20
  4048ba:	781b      	ldrb	r3, [r3, #0]
  4048bc:	4313      	orrs	r3, r2
  4048be:	b29b      	uxth	r3, r3
  4048c0:	b29b      	uxth	r3, r3
  4048c2:	041a      	lsls	r2, r3, #16
  4048c4:	68bb      	ldr	r3, [r7, #8]
  4048c6:	331b      	adds	r3, #27
  4048c8:	781b      	ldrb	r3, [r3, #0]
  4048ca:	021b      	lsls	r3, r3, #8
  4048cc:	b299      	uxth	r1, r3
  4048ce:	68bb      	ldr	r3, [r7, #8]
  4048d0:	331a      	adds	r3, #26
  4048d2:	781b      	ldrb	r3, [r3, #0]
  4048d4:	430b      	orrs	r3, r1
  4048d6:	b29b      	uxth	r3, r3
  4048d8:	b29b      	uxth	r3, r3
  4048da:	431a      	orrs	r2, r3
  4048dc:	687b      	ldr	r3, [r7, #4]
  4048de:	609a      	str	r2, [r3, #8]
		}
  4048e0:	e7ad      	b.n	40483e <follow_path+0x42>
	}

	return res;
  4048e2:	7bfb      	ldrb	r3, [r7, #15]
}
  4048e4:	4618      	mov	r0, r3
  4048e6:	3710      	adds	r7, #16
  4048e8:	46bd      	mov	sp, r7
  4048ea:	bd80      	pop	{r7, pc}
  4048ec:	00403af1 	.word	0x00403af1
  4048f0:	00404491 	.word	0x00404491
  4048f4:	00404099 	.word	0x00404099

004048f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  4048f8:	b590      	push	{r4, r7, lr}
  4048fa:	b083      	sub	sp, #12
  4048fc:	af00      	add	r7, sp, #0
  4048fe:	6078      	str	r0, [r7, #4]
  404900:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  404902:	687b      	ldr	r3, [r7, #4]
  404904:	785a      	ldrb	r2, [r3, #1]
  404906:	687b      	ldr	r3, [r7, #4]
  404908:	3330      	adds	r3, #48	; 0x30
  40490a:	4610      	mov	r0, r2
  40490c:	4619      	mov	r1, r3
  40490e:	683a      	ldr	r2, [r7, #0]
  404910:	2301      	movs	r3, #1
  404912:	4c27      	ldr	r4, [pc, #156]	; (4049b0 <check_fs+0xb8>)
  404914:	47a0      	blx	r4
  404916:	4603      	mov	r3, r0
  404918:	2b00      	cmp	r3, #0
  40491a:	d001      	beq.n	404920 <check_fs+0x28>
		return 3;
  40491c:	2303      	movs	r3, #3
  40491e:	e042      	b.n	4049a6 <check_fs+0xae>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  404920:	687b      	ldr	r3, [r7, #4]
  404922:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  404926:	021b      	lsls	r3, r3, #8
  404928:	b29a      	uxth	r2, r3
  40492a:	687b      	ldr	r3, [r7, #4]
  40492c:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  404930:	4313      	orrs	r3, r2
  404932:	b29b      	uxth	r3, r3
  404934:	b21a      	sxth	r2, r3
  404936:	4b1f      	ldr	r3, [pc, #124]	; (4049b4 <check_fs+0xbc>)
  404938:	429a      	cmp	r2, r3
  40493a:	d001      	beq.n	404940 <check_fs+0x48>
		return 2;
  40493c:	2302      	movs	r3, #2
  40493e:	e032      	b.n	4049a6 <check_fs+0xae>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  404940:	687b      	ldr	r3, [r7, #4]
  404942:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
  404946:	061a      	lsls	r2, r3, #24
  404948:	687b      	ldr	r3, [r7, #4]
  40494a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
  40494e:	041b      	lsls	r3, r3, #16
  404950:	431a      	orrs	r2, r3
  404952:	687b      	ldr	r3, [r7, #4]
  404954:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
  404958:	021b      	lsls	r3, r3, #8
  40495a:	431a      	orrs	r2, r3
  40495c:	687b      	ldr	r3, [r7, #4]
  40495e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
  404962:	4313      	orrs	r3, r2
  404964:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  404968:	4b13      	ldr	r3, [pc, #76]	; (4049b8 <check_fs+0xc0>)
  40496a:	429a      	cmp	r2, r3
  40496c:	d101      	bne.n	404972 <check_fs+0x7a>
		return 0;
  40496e:	2300      	movs	r3, #0
  404970:	e019      	b.n	4049a6 <check_fs+0xae>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  404972:	687b      	ldr	r3, [r7, #4]
  404974:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
  404978:	061a      	lsls	r2, r3, #24
  40497a:	687b      	ldr	r3, [r7, #4]
  40497c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
  404980:	041b      	lsls	r3, r3, #16
  404982:	431a      	orrs	r2, r3
  404984:	687b      	ldr	r3, [r7, #4]
  404986:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
  40498a:	021b      	lsls	r3, r3, #8
  40498c:	431a      	orrs	r2, r3
  40498e:	687b      	ldr	r3, [r7, #4]
  404990:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
  404994:	4313      	orrs	r3, r2
  404996:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  40499a:	4b07      	ldr	r3, [pc, #28]	; (4049b8 <check_fs+0xc0>)
  40499c:	429a      	cmp	r2, r3
  40499e:	d101      	bne.n	4049a4 <check_fs+0xac>
		return 0;
  4049a0:	2300      	movs	r3, #0
  4049a2:	e000      	b.n	4049a6 <check_fs+0xae>

	return 1;
  4049a4:	2301      	movs	r3, #1
}
  4049a6:	4618      	mov	r0, r3
  4049a8:	370c      	adds	r7, #12
  4049aa:	46bd      	mov	sp, r7
  4049ac:	bd90      	pop	{r4, r7, pc}
  4049ae:	bf00      	nop
  4049b0:	00402cb1 	.word	0x00402cb1
  4049b4:	ffffaa55 	.word	0xffffaa55
  4049b8:	00544146 	.word	0x00544146

004049bc <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  4049bc:	b590      	push	{r4, r7, lr}
  4049be:	b093      	sub	sp, #76	; 0x4c
  4049c0:	af00      	add	r7, sp, #0
  4049c2:	60f8      	str	r0, [r7, #12]
  4049c4:	60b9      	str	r1, [r7, #8]
  4049c6:	4613      	mov	r3, r2
  4049c8:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  4049ca:	68fb      	ldr	r3, [r7, #12]
  4049cc:	681b      	ldr	r3, [r3, #0]
  4049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  4049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4049d2:	781b      	ldrb	r3, [r3, #0]
  4049d4:	3b30      	subs	r3, #48	; 0x30
  4049d6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4049da:	2b09      	cmp	r3, #9
  4049dc:	d80b      	bhi.n	4049f6 <chk_mounted+0x3a>
  4049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4049e0:	3301      	adds	r3, #1
  4049e2:	781b      	ldrb	r3, [r3, #0]
  4049e4:	2b3a      	cmp	r3, #58	; 0x3a
  4049e6:	d106      	bne.n	4049f6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
  4049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4049ea:	3302      	adds	r3, #2
  4049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  4049ee:	68fb      	ldr	r3, [r7, #12]
  4049f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4049f2:	601a      	str	r2, [r3, #0]
  4049f4:	e001      	b.n	4049fa <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
  4049f6:	2300      	movs	r3, #0
  4049f8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4049fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4049fc:	2b00      	cmp	r3, #0
  4049fe:	d001      	beq.n	404a04 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
  404a00:	230b      	movs	r3, #11
  404a02:	e277      	b.n	404ef4 <chk_mounted+0x538>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  404a04:	4ba6      	ldr	r3, [pc, #664]	; (404ca0 <chk_mounted+0x2e4>)
  404a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  404a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  404a0e:	68bb      	ldr	r3, [r7, #8]
  404a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
  404a12:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  404a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a16:	2b00      	cmp	r3, #0
  404a18:	d101      	bne.n	404a1e <chk_mounted+0x62>
  404a1a:	230c      	movs	r3, #12
  404a1c:	e26a      	b.n	404ef4 <chk_mounted+0x538>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  404a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a20:	781b      	ldrb	r3, [r3, #0]
  404a22:	2b00      	cmp	r3, #0
  404a24:	d01a      	beq.n	404a5c <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
  404a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a28:	785b      	ldrb	r3, [r3, #1]
  404a2a:	4618      	mov	r0, r3
  404a2c:	4b9d      	ldr	r3, [pc, #628]	; (404ca4 <chk_mounted+0x2e8>)
  404a2e:	4798      	blx	r3
  404a30:	4603      	mov	r3, r0
  404a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  404a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404a3a:	f003 0301 	and.w	r3, r3, #1
  404a3e:	2b00      	cmp	r3, #0
  404a40:	d10c      	bne.n	404a5c <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  404a42:	79fb      	ldrb	r3, [r7, #7]
  404a44:	2b00      	cmp	r3, #0
  404a46:	d007      	beq.n	404a58 <chk_mounted+0x9c>
  404a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404a4c:	f003 0304 	and.w	r3, r3, #4
  404a50:	2b00      	cmp	r3, #0
  404a52:	d001      	beq.n	404a58 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
  404a54:	230a      	movs	r3, #10
  404a56:	e24d      	b.n	404ef4 <chk_mounted+0x538>
			return FR_OK;				/* The file system object is valid */
  404a58:	2300      	movs	r3, #0
  404a5a:	e24b      	b.n	404ef4 <chk_mounted+0x538>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  404a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a5e:	2200      	movs	r2, #0
  404a60:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  404a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  404a64:	b2da      	uxtb	r2, r3
  404a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a68:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  404a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404a6c:	785b      	ldrb	r3, [r3, #1]
  404a6e:	4618      	mov	r0, r3
  404a70:	4b8d      	ldr	r3, [pc, #564]	; (404ca8 <chk_mounted+0x2ec>)
  404a72:	4798      	blx	r3
  404a74:	4603      	mov	r3, r0
  404a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  404a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404a7e:	f003 0301 	and.w	r3, r3, #1
  404a82:	2b00      	cmp	r3, #0
  404a84:	d001      	beq.n	404a8a <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  404a86:	2303      	movs	r3, #3
  404a88:	e234      	b.n	404ef4 <chk_mounted+0x538>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  404a8a:	79fb      	ldrb	r3, [r7, #7]
  404a8c:	2b00      	cmp	r3, #0
  404a8e:	d007      	beq.n	404aa0 <chk_mounted+0xe4>
  404a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  404a94:	f003 0304 	and.w	r3, r3, #4
  404a98:	2b00      	cmp	r3, #0
  404a9a:	d001      	beq.n	404aa0 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
  404a9c:	230a      	movs	r3, #10
  404a9e:	e229      	b.n	404ef4 <chk_mounted+0x538>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  404aa0:	2300      	movs	r3, #0
  404aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  404aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  404aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  404aa8:	4b80      	ldr	r3, [pc, #512]	; (404cac <chk_mounted+0x2f0>)
  404aaa:	4798      	blx	r3
  404aac:	4603      	mov	r3, r0
  404aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  404ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404ab6:	2b01      	cmp	r3, #1
  404ab8:	d133      	bne.n	404b22 <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
  404aba:	2300      	movs	r3, #0
  404abc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
  404ac0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  404ac4:	2b00      	cmp	r3, #0
  404ac6:	d004      	beq.n	404ad2 <chk_mounted+0x116>
  404ac8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  404acc:	3b01      	subs	r3, #1
  404ace:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  404ad2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  404ad6:	011b      	lsls	r3, r3, #4
  404ad8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  404adc:	3330      	adds	r3, #48	; 0x30
  404ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
  404ae0:	4413      	add	r3, r2
  404ae2:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
  404ae4:	6a3b      	ldr	r3, [r7, #32]
  404ae6:	3304      	adds	r3, #4
  404ae8:	781b      	ldrb	r3, [r3, #0]
  404aea:	2b00      	cmp	r3, #0
  404aec:	d019      	beq.n	404b22 <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  404aee:	6a3b      	ldr	r3, [r7, #32]
  404af0:	330b      	adds	r3, #11
  404af2:	781b      	ldrb	r3, [r3, #0]
  404af4:	061a      	lsls	r2, r3, #24
  404af6:	6a3b      	ldr	r3, [r7, #32]
  404af8:	330a      	adds	r3, #10
  404afa:	781b      	ldrb	r3, [r3, #0]
  404afc:	041b      	lsls	r3, r3, #16
  404afe:	431a      	orrs	r2, r3
  404b00:	6a3b      	ldr	r3, [r7, #32]
  404b02:	3309      	adds	r3, #9
  404b04:	781b      	ldrb	r3, [r3, #0]
  404b06:	021b      	lsls	r3, r3, #8
  404b08:	431a      	orrs	r2, r3
  404b0a:	6a3b      	ldr	r3, [r7, #32]
  404b0c:	3308      	adds	r3, #8
  404b0e:	781b      	ldrb	r3, [r3, #0]
  404b10:	4313      	orrs	r3, r2
  404b12:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
  404b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  404b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  404b18:	4b64      	ldr	r3, [pc, #400]	; (404cac <chk_mounted+0x2f0>)
  404b1a:	4798      	blx	r3
  404b1c:	4603      	mov	r3, r0
  404b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  404b22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404b26:	2b03      	cmp	r3, #3
  404b28:	d101      	bne.n	404b2e <chk_mounted+0x172>
  404b2a:	2301      	movs	r3, #1
  404b2c:	e1e2      	b.n	404ef4 <chk_mounted+0x538>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  404b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404b32:	2b00      	cmp	r3, #0
  404b34:	d001      	beq.n	404b3a <chk_mounted+0x17e>
  404b36:	230d      	movs	r3, #13
  404b38:	e1dc      	b.n	404ef4 <chk_mounted+0x538>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  404b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  404b40:	021b      	lsls	r3, r3, #8
  404b42:	b29a      	uxth	r2, r3
  404b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b46:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  404b4a:	4313      	orrs	r3, r2
  404b4c:	b29b      	uxth	r3, r3
  404b4e:	b21b      	sxth	r3, r3
  404b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404b54:	d001      	beq.n	404b5a <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
  404b56:	230d      	movs	r3, #13
  404b58:	e1cc      	b.n	404ef4 <chk_mounted+0x538>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  404b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b5c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  404b60:	021b      	lsls	r3, r3, #8
  404b62:	b29a      	uxth	r2, r3
  404b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  404b6a:	4313      	orrs	r3, r2
  404b6c:	b29b      	uxth	r3, r3
  404b6e:	b29b      	uxth	r3, r3
  404b70:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  404b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  404b74:	2b00      	cmp	r3, #0
  404b76:	d112      	bne.n	404b9e <chk_mounted+0x1e2>
  404b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b7a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
  404b7e:	061a      	lsls	r2, r3, #24
  404b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
  404b86:	041b      	lsls	r3, r3, #16
  404b88:	431a      	orrs	r2, r3
  404b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
  404b90:	021b      	lsls	r3, r3, #8
  404b92:	431a      	orrs	r2, r3
  404b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404b96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
  404b9a:	4313      	orrs	r3, r2
  404b9c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
  404b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
  404ba2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  404ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  404baa:	77fb      	strb	r3, [r7, #31]
  404bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404bae:	7ffa      	ldrb	r2, [r7, #31]
  404bb0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  404bb2:	7ffb      	ldrb	r3, [r7, #31]
  404bb4:	2b01      	cmp	r3, #1
  404bb6:	d004      	beq.n	404bc2 <chk_mounted+0x206>
  404bb8:	7ffb      	ldrb	r3, [r7, #31]
  404bba:	2b02      	cmp	r3, #2
  404bbc:	d001      	beq.n	404bc2 <chk_mounted+0x206>
  404bbe:	230d      	movs	r3, #13
  404bc0:	e198      	b.n	404ef4 <chk_mounted+0x538>
	fasize *= b;										/* Number of sectors for FAT area */
  404bc2:	7ffa      	ldrb	r2, [r7, #31]
  404bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  404bc6:	fb02 f303 	mul.w	r3, r2, r3
  404bca:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  404bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
  404bd2:	77fb      	strb	r3, [r7, #31]
  404bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404bd6:	7ffa      	ldrb	r2, [r7, #31]
  404bd8:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  404bda:	7ffb      	ldrb	r3, [r7, #31]
  404bdc:	2b00      	cmp	r3, #0
  404bde:	d005      	beq.n	404bec <chk_mounted+0x230>
  404be0:	7ffa      	ldrb	r2, [r7, #31]
  404be2:	7ffb      	ldrb	r3, [r7, #31]
  404be4:	3b01      	subs	r3, #1
  404be6:	4013      	ands	r3, r2
  404be8:	2b00      	cmp	r3, #0
  404bea:	d001      	beq.n	404bf0 <chk_mounted+0x234>
  404bec:	230d      	movs	r3, #13
  404bee:	e181      	b.n	404ef4 <chk_mounted+0x538>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  404bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  404bf6:	021b      	lsls	r3, r3, #8
  404bf8:	b29a      	uxth	r2, r3
  404bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  404c00:	4313      	orrs	r3, r2
  404c02:	b29b      	uxth	r3, r3
  404c04:	b29a      	uxth	r2, r3
  404c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c08:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  404c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c0c:	891b      	ldrh	r3, [r3, #8]
  404c0e:	f003 030f 	and.w	r3, r3, #15
  404c12:	b29b      	uxth	r3, r3
  404c14:	2b00      	cmp	r3, #0
  404c16:	d001      	beq.n	404c1c <chk_mounted+0x260>
  404c18:	230d      	movs	r3, #13
  404c1a:	e16b      	b.n	404ef4 <chk_mounted+0x538>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  404c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  404c22:	021b      	lsls	r3, r3, #8
  404c24:	b29a      	uxth	r2, r3
  404c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  404c2c:	4313      	orrs	r3, r2
  404c2e:	b29b      	uxth	r3, r3
  404c30:	b29b      	uxth	r3, r3
  404c32:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  404c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  404c36:	2b00      	cmp	r3, #0
  404c38:	d112      	bne.n	404c60 <chk_mounted+0x2a4>
  404c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c3c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
  404c40:	061a      	lsls	r2, r3, #24
  404c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c44:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
  404c48:	041b      	lsls	r3, r3, #16
  404c4a:	431a      	orrs	r2, r3
  404c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
  404c52:	021b      	lsls	r3, r3, #8
  404c54:	431a      	orrs	r2, r3
  404c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404c5c:	4313      	orrs	r3, r2
  404c5e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  404c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  404c66:	021b      	lsls	r3, r3, #8
  404c68:	b29a      	uxth	r2, r3
  404c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  404c70:	4313      	orrs	r3, r2
  404c72:	b29b      	uxth	r3, r3
  404c74:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  404c76:	8bbb      	ldrh	r3, [r7, #28]
  404c78:	2b00      	cmp	r3, #0
  404c7a:	d101      	bne.n	404c80 <chk_mounted+0x2c4>
  404c7c:	230d      	movs	r3, #13
  404c7e:	e139      	b.n	404ef4 <chk_mounted+0x538>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  404c80:	8bba      	ldrh	r2, [r7, #28]
  404c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  404c84:	441a      	add	r2, r3
  404c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404c88:	891b      	ldrh	r3, [r3, #8]
  404c8a:	091b      	lsrs	r3, r3, #4
  404c8c:	b29b      	uxth	r3, r3
  404c8e:	4413      	add	r3, r2
  404c90:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  404c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  404c94:	69bb      	ldr	r3, [r7, #24]
  404c96:	429a      	cmp	r2, r3
  404c98:	d20a      	bcs.n	404cb0 <chk_mounted+0x2f4>
  404c9a:	230d      	movs	r3, #13
  404c9c:	e12a      	b.n	404ef4 <chk_mounted+0x538>
  404c9e:	bf00      	nop
  404ca0:	20000dd0 	.word	0x20000dd0
  404ca4:	00402c7d 	.word	0x00402c7d
  404ca8:	00402c05 	.word	0x00402c05
  404cac:	004048f9 	.word	0x004048f9
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  404cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  404cb2:	69bb      	ldr	r3, [r7, #24]
  404cb4:	1ad2      	subs	r2, r2, r3
  404cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404cb8:	789b      	ldrb	r3, [r3, #2]
  404cba:	fbb2 f3f3 	udiv	r3, r2, r3
  404cbe:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  404cc0:	697b      	ldr	r3, [r7, #20]
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	d101      	bne.n	404cca <chk_mounted+0x30e>
  404cc6:	230d      	movs	r3, #13
  404cc8:	e114      	b.n	404ef4 <chk_mounted+0x538>
	fmt = FS_FAT12;
  404cca:	2301      	movs	r3, #1
  404ccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  404cd0:	697a      	ldr	r2, [r7, #20]
  404cd2:	f640 73f5 	movw	r3, #4085	; 0xff5
  404cd6:	429a      	cmp	r2, r3
  404cd8:	d902      	bls.n	404ce0 <chk_mounted+0x324>
  404cda:	2302      	movs	r3, #2
  404cdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  404ce0:	697a      	ldr	r2, [r7, #20]
  404ce2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
  404ce6:	429a      	cmp	r2, r3
  404ce8:	d902      	bls.n	404cf0 <chk_mounted+0x334>
  404cea:	2303      	movs	r3, #3
  404cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  404cf0:	697b      	ldr	r3, [r7, #20]
  404cf2:	1c9a      	adds	r2, r3, #2
  404cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404cf6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  404cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  404cfa:	69bb      	ldr	r3, [r7, #24]
  404cfc:	441a      	add	r2, r3
  404cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d00:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  404d02:	8bba      	ldrh	r2, [r7, #28]
  404d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  404d06:	441a      	add	r2, r3
  404d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d0a:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
  404d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404d10:	2b03      	cmp	r3, #3
  404d12:	d11e      	bne.n	404d52 <chk_mounted+0x396>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  404d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d16:	891b      	ldrh	r3, [r3, #8]
  404d18:	2b00      	cmp	r3, #0
  404d1a:	d001      	beq.n	404d20 <chk_mounted+0x364>
  404d1c:	230d      	movs	r3, #13
  404d1e:	e0e9      	b.n	404ef4 <chk_mounted+0x538>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  404d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d22:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
  404d26:	061a      	lsls	r2, r3, #24
  404d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d2a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
  404d2e:	041b      	lsls	r3, r3, #16
  404d30:	431a      	orrs	r2, r3
  404d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
  404d38:	021b      	lsls	r3, r3, #8
  404d3a:	431a      	orrs	r2, r3
  404d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  404d42:	431a      	orrs	r2, r3
  404d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d46:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  404d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d4a:	699b      	ldr	r3, [r3, #24]
  404d4c:	009b      	lsls	r3, r3, #2
  404d4e:	633b      	str	r3, [r7, #48]	; 0x30
  404d50:	e01f      	b.n	404d92 <chk_mounted+0x3d6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  404d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d54:	891b      	ldrh	r3, [r3, #8]
  404d56:	2b00      	cmp	r3, #0
  404d58:	d101      	bne.n	404d5e <chk_mounted+0x3a2>
  404d5a:	230d      	movs	r3, #13
  404d5c:	e0ca      	b.n	404ef4 <chk_mounted+0x538>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  404d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d60:	6a1a      	ldr	r2, [r3, #32]
  404d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  404d64:	441a      	add	r2, r3
  404d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d68:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  404d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404d6e:	2b02      	cmp	r3, #2
  404d70:	d103      	bne.n	404d7a <chk_mounted+0x3be>
  404d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d74:	699b      	ldr	r3, [r3, #24]
  404d76:	005b      	lsls	r3, r3, #1
  404d78:	e00a      	b.n	404d90 <chk_mounted+0x3d4>
  404d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d7c:	699a      	ldr	r2, [r3, #24]
  404d7e:	4613      	mov	r3, r2
  404d80:	005b      	lsls	r3, r3, #1
  404d82:	4413      	add	r3, r2
  404d84:	085a      	lsrs	r2, r3, #1
  404d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d88:	699b      	ldr	r3, [r3, #24]
  404d8a:	f003 0301 	and.w	r3, r3, #1
  404d8e:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
  404d90:	633b      	str	r3, [r7, #48]	; 0x30
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  404d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404d94:	69da      	ldr	r2, [r3, #28]
  404d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404d98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404d9c:	0a5b      	lsrs	r3, r3, #9
  404d9e:	429a      	cmp	r2, r3
  404da0:	d201      	bcs.n	404da6 <chk_mounted+0x3ea>
		return FR_NO_FILESYSTEM;
  404da2:	230d      	movs	r3, #13
  404da4:	e0a6      	b.n	404ef4 <chk_mounted+0x538>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  404da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404da8:	f04f 32ff 	mov.w	r2, #4294967295
  404dac:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
  404dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404db0:	2200      	movs	r2, #0
  404db2:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  404db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  404db8:	2b03      	cmp	r3, #3
  404dba:	f040 8083 	bne.w	404ec4 <chk_mounted+0x508>
	 	fs->fsi_flag = 0;
  404dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404dc0:	2200      	movs	r2, #0
  404dc2:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  404dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404dc6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  404dca:	021b      	lsls	r3, r3, #8
  404dcc:	b29a      	uxth	r2, r3
  404dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404dd0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  404dd4:	4313      	orrs	r3, r2
  404dd6:	b29b      	uxth	r3, r3
  404dd8:	b29b      	uxth	r3, r3
  404dda:	461a      	mov	r2, r3
  404ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  404dde:	441a      	add	r2, r3
  404de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404de2:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  404de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404de6:	7859      	ldrb	r1, [r3, #1]
  404de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404dea:	f103 0230 	add.w	r2, r3, #48	; 0x30
  404dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404df0:	695b      	ldr	r3, [r3, #20]
  404df2:	4608      	mov	r0, r1
  404df4:	4611      	mov	r1, r2
  404df6:	461a      	mov	r2, r3
  404df8:	2301      	movs	r3, #1
  404dfa:	4c40      	ldr	r4, [pc, #256]	; (404efc <chk_mounted+0x540>)
  404dfc:	47a0      	blx	r4
  404dfe:	4603      	mov	r3, r0
  404e00:	2b00      	cmp	r3, #0
  404e02:	d15f      	bne.n	404ec4 <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  404e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e06:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  404e0a:	021b      	lsls	r3, r3, #8
  404e0c:	b29a      	uxth	r2, r3
  404e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e10:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  404e14:	4313      	orrs	r3, r2
  404e16:	b29b      	uxth	r3, r3

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  404e18:	b21a      	sxth	r2, r3
  404e1a:	4b39      	ldr	r3, [pc, #228]	; (404f00 <chk_mounted+0x544>)
  404e1c:	429a      	cmp	r2, r3
  404e1e:	d151      	bne.n	404ec4 <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e22:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  404e26:	061a      	lsls	r2, r3, #24
  404e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404e2e:	041b      	lsls	r3, r3, #16
  404e30:	431a      	orrs	r2, r3
  404e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  404e38:	021b      	lsls	r3, r3, #8
  404e3a:	431a      	orrs	r2, r3
  404e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  404e42:	431a      	orrs	r2, r3
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  404e44:	4b2f      	ldr	r3, [pc, #188]	; (404f04 <chk_mounted+0x548>)
  404e46:	429a      	cmp	r2, r3
  404e48:	d13c      	bne.n	404ec4 <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  404e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e4c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
  404e50:	061a      	lsls	r2, r3, #24
  404e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e54:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
  404e58:	041b      	lsls	r3, r3, #16
  404e5a:	431a      	orrs	r2, r3
  404e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e5e:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
  404e62:	021b      	lsls	r3, r3, #8
  404e64:	431a      	orrs	r2, r3
  404e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e68:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
  404e6c:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  404e6e:	4b26      	ldr	r3, [pc, #152]	; (404f08 <chk_mounted+0x54c>)
  404e70:	429a      	cmp	r2, r3
  404e72:	d127      	bne.n	404ec4 <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  404e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e76:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
  404e7a:	061a      	lsls	r2, r3, #24
  404e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e7e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
  404e82:	041b      	lsls	r3, r3, #16
  404e84:	431a      	orrs	r2, r3
  404e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e88:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
  404e8c:	021b      	lsls	r3, r3, #8
  404e8e:	431a      	orrs	r2, r3
  404e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e92:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
  404e96:	431a      	orrs	r2, r3
  404e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e9a:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  404e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e9e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
  404ea2:	061a      	lsls	r2, r3, #24
  404ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ea6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
  404eaa:	041b      	lsls	r3, r3, #16
  404eac:	431a      	orrs	r2, r3
  404eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404eb0:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
  404eb4:	021b      	lsls	r3, r3, #8
  404eb6:	431a      	orrs	r2, r3
  404eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404eba:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
  404ebe:	431a      	orrs	r2, r3
  404ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ec2:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  404ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ec6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  404eca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  404ecc:	4b0f      	ldr	r3, [pc, #60]	; (404f0c <chk_mounted+0x550>)
  404ece:	881b      	ldrh	r3, [r3, #0]
  404ed0:	3301      	adds	r3, #1
  404ed2:	b29a      	uxth	r2, r3
  404ed4:	4b0d      	ldr	r3, [pc, #52]	; (404f0c <chk_mounted+0x550>)
  404ed6:	801a      	strh	r2, [r3, #0]
  404ed8:	4b0c      	ldr	r3, [pc, #48]	; (404f0c <chk_mounted+0x550>)
  404eda:	881a      	ldrh	r2, [r3, #0]
  404edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ede:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  404ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ee2:	2200      	movs	r2, #0
  404ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
  404ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ee8:	2200      	movs	r2, #0
  404eea:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
  404eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  404eee:	4b08      	ldr	r3, [pc, #32]	; (404f10 <chk_mounted+0x554>)
  404ef0:	4798      	blx	r3
#endif

	return FR_OK;
  404ef2:	2300      	movs	r3, #0
}
  404ef4:	4618      	mov	r0, r3
  404ef6:	374c      	adds	r7, #76	; 0x4c
  404ef8:	46bd      	mov	sp, r7
  404efa:	bd90      	pop	{r4, r7, pc}
  404efc:	00402cb1 	.word	0x00402cb1
  404f00:	ffffaa55 	.word	0xffffaa55
  404f04:	41615252 	.word	0x41615252
  404f08:	61417272 	.word	0x61417272
  404f0c:	20000dd4 	.word	0x20000dd4
  404f10:	00403331 	.word	0x00403331

00404f14 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  404f14:	b580      	push	{r7, lr}
  404f16:	b082      	sub	sp, #8
  404f18:	af00      	add	r7, sp, #0
  404f1a:	6078      	str	r0, [r7, #4]
  404f1c:	460b      	mov	r3, r1
  404f1e:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
  404f20:	687b      	ldr	r3, [r7, #4]
  404f22:	2b00      	cmp	r3, #0
  404f24:	d008      	beq.n	404f38 <validate+0x24>
  404f26:	687b      	ldr	r3, [r7, #4]
  404f28:	781b      	ldrb	r3, [r3, #0]
  404f2a:	2b00      	cmp	r3, #0
  404f2c:	d004      	beq.n	404f38 <validate+0x24>
  404f2e:	687b      	ldr	r3, [r7, #4]
  404f30:	88db      	ldrh	r3, [r3, #6]
  404f32:	887a      	ldrh	r2, [r7, #2]
  404f34:	429a      	cmp	r2, r3
  404f36:	d001      	beq.n	404f3c <validate+0x28>
		return FR_INVALID_OBJECT;
  404f38:	2309      	movs	r3, #9
  404f3a:	e00c      	b.n	404f56 <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  404f3c:	687b      	ldr	r3, [r7, #4]
  404f3e:	785b      	ldrb	r3, [r3, #1]
  404f40:	4618      	mov	r0, r3
  404f42:	4b07      	ldr	r3, [pc, #28]	; (404f60 <validate+0x4c>)
  404f44:	4798      	blx	r3
  404f46:	4603      	mov	r3, r0
  404f48:	f003 0301 	and.w	r3, r3, #1
  404f4c:	2b00      	cmp	r3, #0
  404f4e:	d001      	beq.n	404f54 <validate+0x40>
		return FR_NOT_READY;
  404f50:	2303      	movs	r3, #3
  404f52:	e000      	b.n	404f56 <validate+0x42>

	return FR_OK;
  404f54:	2300      	movs	r3, #0
}
  404f56:	4618      	mov	r0, r3
  404f58:	3708      	adds	r7, #8
  404f5a:	46bd      	mov	sp, r7
  404f5c:	bd80      	pop	{r7, pc}
  404f5e:	bf00      	nop
  404f60:	00402c7d 	.word	0x00402c7d

00404f64 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  404f64:	b580      	push	{r7, lr}
  404f66:	b084      	sub	sp, #16
  404f68:	af00      	add	r7, sp, #0
  404f6a:	4603      	mov	r3, r0
  404f6c:	6039      	str	r1, [r7, #0]
  404f6e:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  404f70:	79fb      	ldrb	r3, [r7, #7]
  404f72:	2b00      	cmp	r3, #0
  404f74:	d001      	beq.n	404f7a <f_mount+0x16>
		return FR_INVALID_DRIVE;
  404f76:	230b      	movs	r3, #11
  404f78:	e019      	b.n	404fae <f_mount+0x4a>
	rfs = FatFs[vol];			/* Get current fs object */
  404f7a:	79fa      	ldrb	r2, [r7, #7]
  404f7c:	4b0e      	ldr	r3, [pc, #56]	; (404fb8 <f_mount+0x54>)
  404f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404f82:	60fb      	str	r3, [r7, #12]

	if (rfs) {
  404f84:	68fb      	ldr	r3, [r7, #12]
  404f86:	2b00      	cmp	r3, #0
  404f88:	d005      	beq.n	404f96 <f_mount+0x32>
#if _FS_SHARE
		clear_lock(rfs);
  404f8a:	68f8      	ldr	r0, [r7, #12]
  404f8c:	4b0b      	ldr	r3, [pc, #44]	; (404fbc <f_mount+0x58>)
  404f8e:	4798      	blx	r3
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  404f90:	68fb      	ldr	r3, [r7, #12]
  404f92:	2200      	movs	r2, #0
  404f94:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  404f96:	683b      	ldr	r3, [r7, #0]
  404f98:	2b00      	cmp	r3, #0
  404f9a:	d002      	beq.n	404fa2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
  404f9c:	683b      	ldr	r3, [r7, #0]
  404f9e:	2200      	movs	r2, #0
  404fa0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  404fa2:	79fa      	ldrb	r2, [r7, #7]
  404fa4:	4b04      	ldr	r3, [pc, #16]	; (404fb8 <f_mount+0x54>)
  404fa6:	6839      	ldr	r1, [r7, #0]
  404fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
  404fac:	2300      	movs	r3, #0
}
  404fae:	4618      	mov	r0, r3
  404fb0:	3710      	adds	r7, #16
  404fb2:	46bd      	mov	sp, r7
  404fb4:	bd80      	pop	{r7, pc}
  404fb6:	bf00      	nop
  404fb8:	20000dd0 	.word	0x20000dd0
  404fbc:	00403331 	.word	0x00403331

00404fc0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  404fc0:	b580      	push	{r7, lr}
  404fc2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  404fc6:	af00      	add	r7, sp, #0
  404fc8:	f107 030c 	add.w	r3, r7, #12
  404fcc:	6018      	str	r0, [r3, #0]
  404fce:	f107 0308 	add.w	r3, r7, #8
  404fd2:	6019      	str	r1, [r3, #0]
  404fd4:	1dfb      	adds	r3, r7, #7
  404fd6:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  404fd8:	f107 030c 	add.w	r3, r7, #12
  404fdc:	681b      	ldr	r3, [r3, #0]
  404fde:	2200      	movs	r2, #0
  404fe0:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  404fe2:	1dfb      	adds	r3, r7, #7
  404fe4:	1dfa      	adds	r2, r7, #7
  404fe6:	7812      	ldrb	r2, [r2, #0]
  404fe8:	f002 021f 	and.w	r2, r2, #31
  404fec:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  404fee:	1dfb      	adds	r3, r7, #7
  404ff0:	781b      	ldrb	r3, [r3, #0]
  404ff2:	f023 0301 	bic.w	r3, r3, #1
  404ff6:	b2db      	uxtb	r3, r3
  404ff8:	f107 0108 	add.w	r1, r7, #8
  404ffc:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  405000:	4608      	mov	r0, r1
  405002:	4611      	mov	r1, r2
  405004:	461a      	mov	r2, r3
  405006:	4b9b      	ldr	r3, [pc, #620]	; (405274 <f_open+0x2b4>)
  405008:	4798      	blx	r3
  40500a:	4603      	mov	r3, r0
  40500c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  405010:	f507 7304 	add.w	r3, r7, #528	; 0x210
  405014:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  405018:	f107 0310 	add.w	r3, r7, #16
  40501c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
  405020:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  405024:	2b00      	cmp	r3, #0
  405026:	d10b      	bne.n	405040 <f_open+0x80>
		res = follow_path(&dj, path);	/* Follow the file path */
  405028:	f107 0308 	add.w	r3, r7, #8
  40502c:	681b      	ldr	r3, [r3, #0]
  40502e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  405032:	4610      	mov	r0, r2
  405034:	4619      	mov	r1, r3
  405036:	4b90      	ldr	r3, [pc, #576]	; (405278 <f_open+0x2b8>)
  405038:	4798      	blx	r3
  40503a:	4603      	mov	r3, r0
  40503c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
  405040:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  405044:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  405048:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40504c:	2b00      	cmp	r3, #0
  40504e:	d119      	bne.n	405084 <f_open+0xc4>
		if (!dir)	/* Current dir itself */
  405050:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405054:	2b00      	cmp	r3, #0
  405056:	d103      	bne.n	405060 <f_open+0xa0>
			res = FR_INVALID_NAME;
  405058:	2306      	movs	r3, #6
  40505a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40505e:	e011      	b.n	405084 <f_open+0xc4>
#if _FS_SHARE
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  405060:	1dfb      	adds	r3, r7, #7
  405062:	781b      	ldrb	r3, [r3, #0]
  405064:	f023 0301 	bic.w	r3, r3, #1
  405068:	2b00      	cmp	r3, #0
  40506a:	bf0c      	ite	eq
  40506c:	2300      	moveq	r3, #0
  40506e:	2301      	movne	r3, #1
  405070:	b2db      	uxtb	r3, r3
  405072:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  405076:	4610      	mov	r0, r2
  405078:	4619      	mov	r1, r3
  40507a:	4b80      	ldr	r3, [pc, #512]	; (40527c <f_open+0x2bc>)
  40507c:	4798      	blx	r3
  40507e:	4603      	mov	r3, r0
  405080:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  405084:	1dfb      	adds	r3, r7, #7
  405086:	781b      	ldrb	r3, [r3, #0]
  405088:	f003 031c 	and.w	r3, r3, #28
  40508c:	2b00      	cmp	r3, #0
  40508e:	f000 80e0 	beq.w	405252 <f_open+0x292>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  405092:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  405096:	2b00      	cmp	r3, #0
  405098:	d01d      	beq.n	4050d6 <f_open+0x116>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  40509a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40509e:	2b04      	cmp	r3, #4
  4050a0:	d10e      	bne.n	4050c0 <f_open+0x100>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
  4050a2:	4b77      	ldr	r3, [pc, #476]	; (405280 <f_open+0x2c0>)
  4050a4:	4798      	blx	r3
  4050a6:	4603      	mov	r3, r0
  4050a8:	2b00      	cmp	r3, #0
  4050aa:	d006      	beq.n	4050ba <f_open+0xfa>
  4050ac:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  4050b0:	4618      	mov	r0, r3
  4050b2:	4b74      	ldr	r3, [pc, #464]	; (405284 <f_open+0x2c4>)
  4050b4:	4798      	blx	r3
  4050b6:	4603      	mov	r3, r0
  4050b8:	e000      	b.n	4050bc <f_open+0xfc>
  4050ba:	2312      	movs	r3, #18
  4050bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4050c0:	1dfb      	adds	r3, r7, #7
  4050c2:	1dfa      	adds	r2, r7, #7
  4050c4:	7812      	ldrb	r2, [r2, #0]
  4050c6:	f042 0208 	orr.w	r2, r2, #8
  4050ca:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
  4050cc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  4050d0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  4050d4:	e014      	b.n	405100 <f_open+0x140>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4050d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4050da:	330b      	adds	r3, #11
  4050dc:	781b      	ldrb	r3, [r3, #0]
  4050de:	f003 0311 	and.w	r3, r3, #17
  4050e2:	2b00      	cmp	r3, #0
  4050e4:	d003      	beq.n	4050ee <f_open+0x12e>
				res = FR_DENIED;
  4050e6:	2307      	movs	r3, #7
  4050e8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  4050ec:	e008      	b.n	405100 <f_open+0x140>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  4050ee:	1dfb      	adds	r3, r7, #7
  4050f0:	781b      	ldrb	r3, [r3, #0]
  4050f2:	f003 0304 	and.w	r3, r3, #4
  4050f6:	2b00      	cmp	r3, #0
  4050f8:	d002      	beq.n	405100 <f_open+0x140>
					res = FR_EXIST;
  4050fa:	2308      	movs	r3, #8
  4050fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405100:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  405104:	2b00      	cmp	r3, #0
  405106:	f040 80a3 	bne.w	405250 <f_open+0x290>
  40510a:	1dfb      	adds	r3, r7, #7
  40510c:	781b      	ldrb	r3, [r3, #0]
  40510e:	f003 0308 	and.w	r3, r3, #8
  405112:	2b00      	cmp	r3, #0
  405114:	f000 809c 	beq.w	405250 <f_open+0x290>
			dw = get_fattime();					/* Created time */
  405118:	4b5b      	ldr	r3, [pc, #364]	; (405288 <f_open+0x2c8>)
  40511a:	4798      	blx	r3
  40511c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
  405120:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405124:	330e      	adds	r3, #14
  405126:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40512a:	b2d2      	uxtb	r2, r2
  40512c:	701a      	strb	r2, [r3, #0]
  40512e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405132:	330f      	adds	r3, #15
  405134:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  405138:	b292      	uxth	r2, r2
  40513a:	0a12      	lsrs	r2, r2, #8
  40513c:	b292      	uxth	r2, r2
  40513e:	b2d2      	uxtb	r2, r2
  405140:	701a      	strb	r2, [r3, #0]
  405142:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405146:	3310      	adds	r3, #16
  405148:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40514c:	0c12      	lsrs	r2, r2, #16
  40514e:	b2d2      	uxtb	r2, r2
  405150:	701a      	strb	r2, [r3, #0]
  405152:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405156:	3311      	adds	r3, #17
  405158:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40515c:	0e12      	lsrs	r2, r2, #24
  40515e:	b2d2      	uxtb	r2, r2
  405160:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  405162:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405166:	330b      	adds	r3, #11
  405168:	2200      	movs	r2, #0
  40516a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  40516c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405170:	331c      	adds	r3, #28
  405172:	2200      	movs	r2, #0
  405174:	701a      	strb	r2, [r3, #0]
  405176:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40517a:	331d      	adds	r3, #29
  40517c:	2200      	movs	r2, #0
  40517e:	701a      	strb	r2, [r3, #0]
  405180:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405184:	331e      	adds	r3, #30
  405186:	2200      	movs	r2, #0
  405188:	701a      	strb	r2, [r3, #0]
  40518a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40518e:	331f      	adds	r3, #31
  405190:	2200      	movs	r2, #0
  405192:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
  405194:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405198:	3315      	adds	r3, #21
  40519a:	781b      	ldrb	r3, [r3, #0]
  40519c:	021b      	lsls	r3, r3, #8
  40519e:	b29a      	uxth	r2, r3
  4051a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051a4:	3314      	adds	r3, #20
  4051a6:	781b      	ldrb	r3, [r3, #0]
  4051a8:	4313      	orrs	r3, r2
  4051aa:	b29b      	uxth	r3, r3
  4051ac:	b29b      	uxth	r3, r3
  4051ae:	041a      	lsls	r2, r3, #16
  4051b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051b4:	331b      	adds	r3, #27
  4051b6:	781b      	ldrb	r3, [r3, #0]
  4051b8:	021b      	lsls	r3, r3, #8
  4051ba:	b299      	uxth	r1, r3
  4051bc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051c0:	331a      	adds	r3, #26
  4051c2:	781b      	ldrb	r3, [r3, #0]
  4051c4:	430b      	orrs	r3, r1
  4051c6:	b29b      	uxth	r3, r3
  4051c8:	b29b      	uxth	r3, r3
  4051ca:	4313      	orrs	r3, r2
  4051cc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
  4051d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051d4:	331a      	adds	r3, #26
  4051d6:	2200      	movs	r2, #0
  4051d8:	701a      	strb	r2, [r3, #0]
  4051da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051de:	331b      	adds	r3, #27
  4051e0:	2200      	movs	r2, #0
  4051e2:	701a      	strb	r2, [r3, #0]
  4051e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051e8:	3314      	adds	r3, #20
  4051ea:	2200      	movs	r2, #0
  4051ec:	701a      	strb	r2, [r3, #0]
  4051ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4051f2:	3315      	adds	r3, #21
  4051f4:	2200      	movs	r2, #0
  4051f6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
  4051f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  4051fc:	2201      	movs	r2, #1
  4051fe:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  405200:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  405204:	2b00      	cmp	r3, #0
  405206:	d023      	beq.n	405250 <f_open+0x290>
				dw = dj.fs->winsect;
  405208:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40520e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
  405212:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  405216:	4618      	mov	r0, r3
  405218:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
  40521c:	4b1b      	ldr	r3, [pc, #108]	; (40528c <f_open+0x2cc>)
  40521e:	4798      	blx	r3
  405220:	4603      	mov	r3, r0
  405222:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
  405226:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40522a:	2b00      	cmp	r3, #0
  40522c:	d110      	bne.n	405250 <f_open+0x290>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40522e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  405232:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  405236:	3a01      	subs	r2, #1
  405238:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
  40523a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40523e:	4618      	mov	r0, r3
  405240:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
  405244:	4b12      	ldr	r3, [pc, #72]	; (405290 <f_open+0x2d0>)
  405246:	4798      	blx	r3
  405248:	4603      	mov	r3, r0
  40524a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40524e:	e032      	b.n	4052b6 <f_open+0x2f6>
  405250:	e031      	b.n	4052b6 <f_open+0x2f6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  405252:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  405256:	2b00      	cmp	r3, #0
  405258:	d12d      	bne.n	4052b6 <f_open+0x2f6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  40525a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40525e:	330b      	adds	r3, #11
  405260:	781b      	ldrb	r3, [r3, #0]
  405262:	f003 0310 	and.w	r3, r3, #16
  405266:	2b00      	cmp	r3, #0
  405268:	d014      	beq.n	405294 <f_open+0x2d4>
				res = FR_NO_FILE;
  40526a:	2304      	movs	r3, #4
  40526c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  405270:	e021      	b.n	4052b6 <f_open+0x2f6>
  405272:	bf00      	nop
  405274:	004049bd 	.word	0x004049bd
  405278:	004047fd 	.word	0x004047fd
  40527c:	00403031 	.word	0x00403031
  405280:	00403105 	.word	0x00403105
  405284:	00404201 	.word	0x00404201
  405288:	00402ed1 	.word	0x00402ed1
  40528c:	0040392d 	.word	0x0040392d
  405290:	00403381 	.word	0x00403381
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  405294:	1dfb      	adds	r3, r7, #7
  405296:	781b      	ldrb	r3, [r3, #0]
  405298:	f003 0302 	and.w	r3, r3, #2
  40529c:	2b00      	cmp	r3, #0
  40529e:	d00a      	beq.n	4052b6 <f_open+0x2f6>
  4052a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4052a4:	330b      	adds	r3, #11
  4052a6:	781b      	ldrb	r3, [r3, #0]
  4052a8:	f003 0301 	and.w	r3, r3, #1
  4052ac:	2b00      	cmp	r3, #0
  4052ae:	d002      	beq.n	4052b6 <f_open+0x2f6>
					res = FR_DENIED;
  4052b0:	2307      	movs	r3, #7
  4052b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
  4052b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4052ba:	2b00      	cmp	r3, #0
  4052bc:	d135      	bne.n	40532a <f_open+0x36a>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4052be:	1dfb      	adds	r3, r7, #7
  4052c0:	781b      	ldrb	r3, [r3, #0]
  4052c2:	f003 0308 	and.w	r3, r3, #8
  4052c6:	2b00      	cmp	r3, #0
  4052c8:	d005      	beq.n	4052d6 <f_open+0x316>
			mode |= FA__WRITTEN;
  4052ca:	1dfb      	adds	r3, r7, #7
  4052cc:	1dfa      	adds	r2, r7, #7
  4052ce:	7812      	ldrb	r2, [r2, #0]
  4052d0:	f042 0220 	orr.w	r2, r2, #32
  4052d4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4052d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  4052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4052dc:	f107 030c 	add.w	r3, r7, #12
  4052e0:	681b      	ldr	r3, [r3, #0]
  4052e2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
  4052e4:	f107 030c 	add.w	r3, r7, #12
  4052e8:	681b      	ldr	r3, [r3, #0]
  4052ea:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  4052ee:	621a      	str	r2, [r3, #32]
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  4052f0:	1dfb      	adds	r3, r7, #7
  4052f2:	781b      	ldrb	r3, [r3, #0]
  4052f4:	f023 0301 	bic.w	r3, r3, #1
  4052f8:	2b00      	cmp	r3, #0
  4052fa:	bf0c      	ite	eq
  4052fc:	2300      	moveq	r3, #0
  4052fe:	2301      	movne	r3, #1
  405300:	b2db      	uxtb	r3, r3
  405302:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  405306:	4610      	mov	r0, r2
  405308:	4619      	mov	r1, r3
  40530a:	4b39      	ldr	r3, [pc, #228]	; (4053f0 <f_open+0x430>)
  40530c:	4798      	blx	r3
  40530e:	4602      	mov	r2, r0
  405310:	f107 030c 	add.w	r3, r7, #12
  405314:	681b      	ldr	r3, [r3, #0]
  405316:	625a      	str	r2, [r3, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
  405318:	f107 030c 	add.w	r3, r7, #12
  40531c:	681b      	ldr	r3, [r3, #0]
  40531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405320:	2b00      	cmp	r3, #0
  405322:	d102      	bne.n	40532a <f_open+0x36a>
  405324:	2302      	movs	r3, #2
  405326:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  40532a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40532e:	2b00      	cmp	r3, #0
  405330:	d156      	bne.n	4053e0 <f_open+0x420>
		fp->flag = mode;					/* File access mode */
  405332:	f107 030c 	add.w	r3, r7, #12
  405336:	681b      	ldr	r3, [r3, #0]
  405338:	1dfa      	adds	r2, r7, #7
  40533a:	7812      	ldrb	r2, [r2, #0]
  40533c:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  40533e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405342:	3315      	adds	r3, #21
  405344:	781b      	ldrb	r3, [r3, #0]
  405346:	021b      	lsls	r3, r3, #8
  405348:	b29a      	uxth	r2, r3
  40534a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40534e:	3314      	adds	r3, #20
  405350:	781b      	ldrb	r3, [r3, #0]
  405352:	4313      	orrs	r3, r2
  405354:	b29b      	uxth	r3, r3
  405356:	b29b      	uxth	r3, r3
  405358:	041a      	lsls	r2, r3, #16
  40535a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40535e:	331b      	adds	r3, #27
  405360:	781b      	ldrb	r3, [r3, #0]
  405362:	021b      	lsls	r3, r3, #8
  405364:	b299      	uxth	r1, r3
  405366:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40536a:	331a      	adds	r3, #26
  40536c:	781b      	ldrb	r3, [r3, #0]
  40536e:	430b      	orrs	r3, r1
  405370:	b29b      	uxth	r3, r3
  405372:	b29b      	uxth	r3, r3
  405374:	431a      	orrs	r2, r3
  405376:	f107 030c 	add.w	r3, r7, #12
  40537a:	681b      	ldr	r3, [r3, #0]
  40537c:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  40537e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405382:	331f      	adds	r3, #31
  405384:	781b      	ldrb	r3, [r3, #0]
  405386:	061a      	lsls	r2, r3, #24
  405388:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40538c:	331e      	adds	r3, #30
  40538e:	781b      	ldrb	r3, [r3, #0]
  405390:	041b      	lsls	r3, r3, #16
  405392:	431a      	orrs	r2, r3
  405394:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  405398:	331d      	adds	r3, #29
  40539a:	781b      	ldrb	r3, [r3, #0]
  40539c:	021b      	lsls	r3, r3, #8
  40539e:	431a      	orrs	r2, r3
  4053a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4053a4:	331c      	adds	r3, #28
  4053a6:	781b      	ldrb	r3, [r3, #0]
  4053a8:	431a      	orrs	r2, r3
  4053aa:	f107 030c 	add.w	r3, r7, #12
  4053ae:	681b      	ldr	r3, [r3, #0]
  4053b0:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
  4053b2:	f107 030c 	add.w	r3, r7, #12
  4053b6:	681b      	ldr	r3, [r3, #0]
  4053b8:	2200      	movs	r2, #0
  4053ba:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
  4053bc:	f107 030c 	add.w	r3, r7, #12
  4053c0:	681b      	ldr	r3, [r3, #0]
  4053c2:	2200      	movs	r2, #0
  4053c4:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  4053c6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
  4053ca:	f107 030c 	add.w	r3, r7, #12
  4053ce:	681b      	ldr	r3, [r3, #0]
  4053d0:	601a      	str	r2, [r3, #0]
  4053d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  4053d6:	88da      	ldrh	r2, [r3, #6]
  4053d8:	f107 030c 	add.w	r3, r7, #12
  4053dc:	681b      	ldr	r3, [r3, #0]
  4053de:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
  4053e0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  4053e4:	4618      	mov	r0, r3
  4053e6:	f507 7714 	add.w	r7, r7, #592	; 0x250
  4053ea:	46bd      	mov	sp, r7
  4053ec:	bd80      	pop	{r7, pc}
  4053ee:	bf00      	nop
  4053f0:	0040314d 	.word	0x0040314d

004053f4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  4053f4:	b590      	push	{r4, r7, lr}
  4053f6:	b08d      	sub	sp, #52	; 0x34
  4053f8:	af00      	add	r7, sp, #0
  4053fa:	60f8      	str	r0, [r7, #12]
  4053fc:	60b9      	str	r1, [r7, #8]
  4053fe:	607a      	str	r2, [r7, #4]
  405400:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
  405402:	68bb      	ldr	r3, [r7, #8]
  405404:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
  405406:	683b      	ldr	r3, [r7, #0]
  405408:	2200      	movs	r2, #0
  40540a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
  40540c:	68fb      	ldr	r3, [r7, #12]
  40540e:	681a      	ldr	r2, [r3, #0]
  405410:	68fb      	ldr	r3, [r7, #12]
  405412:	889b      	ldrh	r3, [r3, #4]
  405414:	4610      	mov	r0, r2
  405416:	4619      	mov	r1, r3
  405418:	4b87      	ldr	r3, [pc, #540]	; (405638 <f_read+0x244>)
  40541a:	4798      	blx	r3
  40541c:	4603      	mov	r3, r0
  40541e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  405420:	7ffb      	ldrb	r3, [r7, #31]
  405422:	2b00      	cmp	r3, #0
  405424:	d001      	beq.n	40542a <f_read+0x36>
  405426:	7ffb      	ldrb	r3, [r7, #31]
  405428:	e147      	b.n	4056ba <f_read+0x2c6>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  40542a:	68fb      	ldr	r3, [r7, #12]
  40542c:	799b      	ldrb	r3, [r3, #6]
  40542e:	b2db      	uxtb	r3, r3
  405430:	b25b      	sxtb	r3, r3
  405432:	2b00      	cmp	r3, #0
  405434:	da01      	bge.n	40543a <f_read+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  405436:	2302      	movs	r3, #2
  405438:	e13f      	b.n	4056ba <f_read+0x2c6>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  40543a:	68fb      	ldr	r3, [r7, #12]
  40543c:	799b      	ldrb	r3, [r3, #6]
  40543e:	f003 0301 	and.w	r3, r3, #1
  405442:	2b00      	cmp	r3, #0
  405444:	d101      	bne.n	40544a <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  405446:	2307      	movs	r3, #7
  405448:	e137      	b.n	4056ba <f_read+0x2c6>
	remain = fp->fsize - fp->fptr;
  40544a:	68fb      	ldr	r3, [r7, #12]
  40544c:	68da      	ldr	r2, [r3, #12]
  40544e:	68fb      	ldr	r3, [r7, #12]
  405450:	689b      	ldr	r3, [r3, #8]
  405452:	1ad3      	subs	r3, r2, r3
  405454:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
  405456:	687a      	ldr	r2, [r7, #4]
  405458:	69bb      	ldr	r3, [r7, #24]
  40545a:	429a      	cmp	r2, r3
  40545c:	d902      	bls.n	405464 <f_read+0x70>
  40545e:	69bb      	ldr	r3, [r7, #24]
  405460:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
  405462:	e125      	b.n	4056b0 <f_read+0x2bc>
  405464:	e124      	b.n	4056b0 <f_read+0x2bc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  405466:	68fb      	ldr	r3, [r7, #12]
  405468:	689b      	ldr	r3, [r3, #8]
  40546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40546e:	2b00      	cmp	r3, #0
  405470:	f040 80f1 	bne.w	405656 <f_read+0x262>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  405474:	68fb      	ldr	r3, [r7, #12]
  405476:	689b      	ldr	r3, [r3, #8]
  405478:	0a5b      	lsrs	r3, r3, #9
  40547a:	b2da      	uxtb	r2, r3
  40547c:	68fb      	ldr	r3, [r7, #12]
  40547e:	681b      	ldr	r3, [r3, #0]
  405480:	789b      	ldrb	r3, [r3, #2]
  405482:	3b01      	subs	r3, #1
  405484:	b2db      	uxtb	r3, r3
  405486:	4013      	ands	r3, r2
  405488:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
  40548a:	7dfb      	ldrb	r3, [r7, #23]
  40548c:	2b00      	cmp	r3, #0
  40548e:	d12c      	bne.n	4054ea <f_read+0xf6>
				if (fp->fptr == 0) {			/* On the top of the file? */
  405490:	68fb      	ldr	r3, [r7, #12]
  405492:	689b      	ldr	r3, [r3, #8]
  405494:	2b00      	cmp	r3, #0
  405496:	d103      	bne.n	4054a0 <f_read+0xac>
					clst = fp->sclust;			/* Follow from the origin */
  405498:	68fb      	ldr	r3, [r7, #12]
  40549a:	691b      	ldr	r3, [r3, #16]
  40549c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40549e:	e008      	b.n	4054b2 <f_read+0xbe>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  4054a0:	68fb      	ldr	r3, [r7, #12]
  4054a2:	681a      	ldr	r2, [r3, #0]
  4054a4:	68fb      	ldr	r3, [r7, #12]
  4054a6:	695b      	ldr	r3, [r3, #20]
  4054a8:	4610      	mov	r0, r2
  4054aa:	4619      	mov	r1, r3
  4054ac:	4b63      	ldr	r3, [pc, #396]	; (40563c <f_read+0x248>)
  4054ae:	4798      	blx	r3
  4054b0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  4054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4054b4:	2b01      	cmp	r3, #1
  4054b6:	d808      	bhi.n	4054ca <f_read+0xd6>
  4054b8:	68fb      	ldr	r3, [r7, #12]
  4054ba:	799b      	ldrb	r3, [r3, #6]
  4054bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4054c0:	b2da      	uxtb	r2, r3
  4054c2:	68fb      	ldr	r3, [r7, #12]
  4054c4:	719a      	strb	r2, [r3, #6]
  4054c6:	2302      	movs	r3, #2
  4054c8:	e0f7      	b.n	4056ba <f_read+0x2c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4054d0:	d108      	bne.n	4054e4 <f_read+0xf0>
  4054d2:	68fb      	ldr	r3, [r7, #12]
  4054d4:	799b      	ldrb	r3, [r3, #6]
  4054d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4054da:	b2da      	uxtb	r2, r3
  4054dc:	68fb      	ldr	r3, [r7, #12]
  4054de:	719a      	strb	r2, [r3, #6]
  4054e0:	2301      	movs	r3, #1
  4054e2:	e0ea      	b.n	4056ba <f_read+0x2c6>
				fp->clust = clst;				/* Update current cluster */
  4054e4:	68fb      	ldr	r3, [r7, #12]
  4054e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4054e8:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4054ea:	68fb      	ldr	r3, [r7, #12]
  4054ec:	681a      	ldr	r2, [r3, #0]
  4054ee:	68fb      	ldr	r3, [r7, #12]
  4054f0:	695b      	ldr	r3, [r3, #20]
  4054f2:	4610      	mov	r0, r2
  4054f4:	4619      	mov	r1, r3
  4054f6:	4b52      	ldr	r3, [pc, #328]	; (405640 <f_read+0x24c>)
  4054f8:	4798      	blx	r3
  4054fa:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4054fc:	693b      	ldr	r3, [r7, #16]
  4054fe:	2b00      	cmp	r3, #0
  405500:	d108      	bne.n	405514 <f_read+0x120>
  405502:	68fb      	ldr	r3, [r7, #12]
  405504:	799b      	ldrb	r3, [r3, #6]
  405506:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40550a:	b2da      	uxtb	r2, r3
  40550c:	68fb      	ldr	r3, [r7, #12]
  40550e:	719a      	strb	r2, [r3, #6]
  405510:	2302      	movs	r3, #2
  405512:	e0d2      	b.n	4056ba <f_read+0x2c6>
			sect += csect;
  405514:	7dfb      	ldrb	r3, [r7, #23]
  405516:	693a      	ldr	r2, [r7, #16]
  405518:	4413      	add	r3, r2
  40551a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
  40551c:	687b      	ldr	r3, [r7, #4]
  40551e:	0a5b      	lsrs	r3, r3, #9
  405520:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
  405522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405524:	2b00      	cmp	r3, #0
  405526:	d044      	beq.n	4055b2 <f_read+0x1be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  405528:	7dfa      	ldrb	r2, [r7, #23]
  40552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40552c:	441a      	add	r2, r3
  40552e:	68fb      	ldr	r3, [r7, #12]
  405530:	681b      	ldr	r3, [r3, #0]
  405532:	789b      	ldrb	r3, [r3, #2]
  405534:	429a      	cmp	r2, r3
  405536:	d906      	bls.n	405546 <f_read+0x152>
					cc = fp->fs->csize - csect;
  405538:	68fb      	ldr	r3, [r7, #12]
  40553a:	681b      	ldr	r3, [r3, #0]
  40553c:	789b      	ldrb	r3, [r3, #2]
  40553e:	461a      	mov	r2, r3
  405540:	7dfb      	ldrb	r3, [r7, #23]
  405542:	1ad3      	subs	r3, r2, r3
  405544:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  405546:	68fb      	ldr	r3, [r7, #12]
  405548:	681b      	ldr	r3, [r3, #0]
  40554a:	785a      	ldrb	r2, [r3, #1]
  40554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40554e:	b2db      	uxtb	r3, r3
  405550:	4610      	mov	r0, r2
  405552:	6a39      	ldr	r1, [r7, #32]
  405554:	693a      	ldr	r2, [r7, #16]
  405556:	4c3b      	ldr	r4, [pc, #236]	; (405644 <f_read+0x250>)
  405558:	47a0      	blx	r4
  40555a:	4603      	mov	r3, r0
  40555c:	2b00      	cmp	r3, #0
  40555e:	d008      	beq.n	405572 <f_read+0x17e>
					ABORT(fp->fs, FR_DISK_ERR);
  405560:	68fb      	ldr	r3, [r7, #12]
  405562:	799b      	ldrb	r3, [r3, #6]
  405564:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405568:	b2da      	uxtb	r2, r3
  40556a:	68fb      	ldr	r3, [r7, #12]
  40556c:	719a      	strb	r2, [r3, #6]
  40556e:	2301      	movs	r3, #1
  405570:	e0a3      	b.n	4056ba <f_read+0x2c6>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  405572:	68fb      	ldr	r3, [r7, #12]
  405574:	799b      	ldrb	r3, [r3, #6]
  405576:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40557a:	2b00      	cmp	r3, #0
  40557c:	d015      	beq.n	4055aa <f_read+0x1b6>
  40557e:	68fb      	ldr	r3, [r7, #12]
  405580:	699a      	ldr	r2, [r3, #24]
  405582:	693b      	ldr	r3, [r7, #16]
  405584:	1ad2      	subs	r2, r2, r3
  405586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405588:	429a      	cmp	r2, r3
  40558a:	d20e      	bcs.n	4055aa <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  40558c:	68fb      	ldr	r3, [r7, #12]
  40558e:	699a      	ldr	r2, [r3, #24]
  405590:	693b      	ldr	r3, [r7, #16]
  405592:	1ad3      	subs	r3, r2, r3
  405594:	025b      	lsls	r3, r3, #9
  405596:	6a3a      	ldr	r2, [r7, #32]
  405598:	441a      	add	r2, r3
  40559a:	68fb      	ldr	r3, [r7, #12]
  40559c:	3328      	adds	r3, #40	; 0x28
  40559e:	4610      	mov	r0, r2
  4055a0:	4619      	mov	r1, r3
  4055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4055a6:	4b28      	ldr	r3, [pc, #160]	; (405648 <f_read+0x254>)
  4055a8:	4798      	blx	r3
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  4055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4055ac:	025b      	lsls	r3, r3, #9
  4055ae:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
  4055b0:	e06a      	b.n	405688 <f_read+0x294>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
  4055b2:	68fb      	ldr	r3, [r7, #12]
  4055b4:	699a      	ldr	r2, [r3, #24]
  4055b6:	693b      	ldr	r3, [r7, #16]
  4055b8:	429a      	cmp	r2, r3
  4055ba:	d049      	beq.n	405650 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  4055bc:	68fb      	ldr	r3, [r7, #12]
  4055be:	799b      	ldrb	r3, [r3, #6]
  4055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4055c4:	2b00      	cmp	r3, #0
  4055c6:	d020      	beq.n	40560a <f_read+0x216>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4055c8:	68fb      	ldr	r3, [r7, #12]
  4055ca:	681b      	ldr	r3, [r3, #0]
  4055cc:	7859      	ldrb	r1, [r3, #1]
  4055ce:	68fb      	ldr	r3, [r7, #12]
  4055d0:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4055d4:	68fb      	ldr	r3, [r7, #12]
  4055d6:	699b      	ldr	r3, [r3, #24]
  4055d8:	4608      	mov	r0, r1
  4055da:	4611      	mov	r1, r2
  4055dc:	461a      	mov	r2, r3
  4055de:	2301      	movs	r3, #1
  4055e0:	4c1a      	ldr	r4, [pc, #104]	; (40564c <f_read+0x258>)
  4055e2:	47a0      	blx	r4
  4055e4:	4603      	mov	r3, r0
  4055e6:	2b00      	cmp	r3, #0
  4055e8:	d008      	beq.n	4055fc <f_read+0x208>
						ABORT(fp->fs, FR_DISK_ERR);
  4055ea:	68fb      	ldr	r3, [r7, #12]
  4055ec:	799b      	ldrb	r3, [r3, #6]
  4055ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4055f2:	b2da      	uxtb	r2, r3
  4055f4:	68fb      	ldr	r3, [r7, #12]
  4055f6:	719a      	strb	r2, [r3, #6]
  4055f8:	2301      	movs	r3, #1
  4055fa:	e05e      	b.n	4056ba <f_read+0x2c6>
					fp->flag &= ~FA__DIRTY;
  4055fc:	68fb      	ldr	r3, [r7, #12]
  4055fe:	799b      	ldrb	r3, [r3, #6]
  405600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405604:	b2da      	uxtb	r2, r3
  405606:	68fb      	ldr	r3, [r7, #12]
  405608:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  40560a:	68fb      	ldr	r3, [r7, #12]
  40560c:	681b      	ldr	r3, [r3, #0]
  40560e:	785a      	ldrb	r2, [r3, #1]
  405610:	68fb      	ldr	r3, [r7, #12]
  405612:	3328      	adds	r3, #40	; 0x28
  405614:	4610      	mov	r0, r2
  405616:	4619      	mov	r1, r3
  405618:	693a      	ldr	r2, [r7, #16]
  40561a:	2301      	movs	r3, #1
  40561c:	4c09      	ldr	r4, [pc, #36]	; (405644 <f_read+0x250>)
  40561e:	47a0      	blx	r4
  405620:	4603      	mov	r3, r0
  405622:	2b00      	cmp	r3, #0
  405624:	d014      	beq.n	405650 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
  405626:	68fb      	ldr	r3, [r7, #12]
  405628:	799b      	ldrb	r3, [r3, #6]
  40562a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40562e:	b2da      	uxtb	r2, r3
  405630:	68fb      	ldr	r3, [r7, #12]
  405632:	719a      	strb	r2, [r3, #6]
  405634:	2301      	movs	r3, #1
  405636:	e040      	b.n	4056ba <f_read+0x2c6>
  405638:	00404f15 	.word	0x00404f15
  40563c:	004035dd 	.word	0x004035dd
  405640:	004035a1 	.word	0x004035a1
  405644:	00402cb1 	.word	0x00402cb1
  405648:	00402f39 	.word	0x00402f39
  40564c:	00402d61 	.word	0x00402d61
			}
#endif
			fp->dsect = sect;
  405650:	68fb      	ldr	r3, [r7, #12]
  405652:	693a      	ldr	r2, [r7, #16]
  405654:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  405656:	68fb      	ldr	r3, [r7, #12]
  405658:	689b      	ldr	r3, [r3, #8]
  40565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40565e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  405662:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
  405664:	6aba      	ldr	r2, [r7, #40]	; 0x28
  405666:	687b      	ldr	r3, [r7, #4]
  405668:	429a      	cmp	r2, r3
  40566a:	d901      	bls.n	405670 <f_read+0x27c>
  40566c:	687b      	ldr	r3, [r7, #4]
  40566e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  405670:	68fb      	ldr	r3, [r7, #12]
  405672:	689b      	ldr	r3, [r3, #8]
  405674:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405678:	3328      	adds	r3, #40	; 0x28
  40567a:	68fa      	ldr	r2, [r7, #12]
  40567c:	4413      	add	r3, r2
  40567e:	6a38      	ldr	r0, [r7, #32]
  405680:	4619      	mov	r1, r3
  405682:	6aba      	ldr	r2, [r7, #40]	; 0x28
  405684:	4b0f      	ldr	r3, [pc, #60]	; (4056c4 <f_read+0x2d0>)
  405686:	4798      	blx	r3
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  405688:	6a3a      	ldr	r2, [r7, #32]
  40568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40568c:	4413      	add	r3, r2
  40568e:	623b      	str	r3, [r7, #32]
  405690:	68fb      	ldr	r3, [r7, #12]
  405692:	689a      	ldr	r2, [r3, #8]
  405694:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405696:	441a      	add	r2, r3
  405698:	68fb      	ldr	r3, [r7, #12]
  40569a:	609a      	str	r2, [r3, #8]
  40569c:	683b      	ldr	r3, [r7, #0]
  40569e:	681a      	ldr	r2, [r3, #0]
  4056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4056a2:	441a      	add	r2, r3
  4056a4:	683b      	ldr	r3, [r7, #0]
  4056a6:	601a      	str	r2, [r3, #0]
  4056a8:	687a      	ldr	r2, [r7, #4]
  4056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4056ac:	1ad3      	subs	r3, r2, r3
  4056ae:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  4056b0:	687b      	ldr	r3, [r7, #4]
  4056b2:	2b00      	cmp	r3, #0
  4056b4:	f47f aed7 	bne.w	405466 <f_read+0x72>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
  4056b8:	2300      	movs	r3, #0
}
  4056ba:	4618      	mov	r0, r3
  4056bc:	3734      	adds	r7, #52	; 0x34
  4056be:	46bd      	mov	sp, r7
  4056c0:	bd90      	pop	{r4, r7, pc}
  4056c2:	bf00      	nop
  4056c4:	00402f39 	.word	0x00402f39

004056c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  4056c8:	b590      	push	{r4, r7, lr}
  4056ca:	b08b      	sub	sp, #44	; 0x2c
  4056cc:	af00      	add	r7, sp, #0
  4056ce:	60f8      	str	r0, [r7, #12]
  4056d0:	60b9      	str	r1, [r7, #8]
  4056d2:	607a      	str	r2, [r7, #4]
  4056d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
  4056d6:	68bb      	ldr	r3, [r7, #8]
  4056d8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  4056da:	683b      	ldr	r3, [r7, #0]
  4056dc:	2200      	movs	r2, #0
  4056de:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  4056e0:	68fb      	ldr	r3, [r7, #12]
  4056e2:	681a      	ldr	r2, [r3, #0]
  4056e4:	68fb      	ldr	r3, [r7, #12]
  4056e6:	889b      	ldrh	r3, [r3, #4]
  4056e8:	4610      	mov	r0, r2
  4056ea:	4619      	mov	r1, r3
  4056ec:	4b93      	ldr	r3, [pc, #588]	; (40593c <f_write+0x274>)
  4056ee:	4798      	blx	r3
  4056f0:	4603      	mov	r3, r0
  4056f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4056f4:	7dfb      	ldrb	r3, [r7, #23]
  4056f6:	2b00      	cmp	r3, #0
  4056f8:	d001      	beq.n	4056fe <f_write+0x36>
  4056fa:	7dfb      	ldrb	r3, [r7, #23]
  4056fc:	e177      	b.n	4059ee <f_write+0x326>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  4056fe:	68fb      	ldr	r3, [r7, #12]
  405700:	799b      	ldrb	r3, [r3, #6]
  405702:	b2db      	uxtb	r3, r3
  405704:	b25b      	sxtb	r3, r3
  405706:	2b00      	cmp	r3, #0
  405708:	da01      	bge.n	40570e <f_write+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40570a:	2302      	movs	r3, #2
  40570c:	e16f      	b.n	4059ee <f_write+0x326>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40570e:	68fb      	ldr	r3, [r7, #12]
  405710:	799b      	ldrb	r3, [r3, #6]
  405712:	f003 0302 	and.w	r3, r3, #2
  405716:	2b00      	cmp	r3, #0
  405718:	d101      	bne.n	40571e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  40571a:	2307      	movs	r3, #7
  40571c:	e167      	b.n	4059ee <f_write+0x326>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40571e:	68fb      	ldr	r3, [r7, #12]
  405720:	68da      	ldr	r2, [r3, #12]
  405722:	687b      	ldr	r3, [r7, #4]
  405724:	441a      	add	r2, r3
  405726:	68fb      	ldr	r3, [r7, #12]
  405728:	68db      	ldr	r3, [r3, #12]
  40572a:	429a      	cmp	r2, r3
  40572c:	d202      	bcs.n	405734 <f_write+0x6c>
  40572e:	2300      	movs	r3, #0
  405730:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
  405732:	e146      	b.n	4059c2 <f_write+0x2fa>
  405734:	e145      	b.n	4059c2 <f_write+0x2fa>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  405736:	68fb      	ldr	r3, [r7, #12]
  405738:	689b      	ldr	r3, [r3, #8]
  40573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40573e:	2b00      	cmp	r3, #0
  405740:	f040 810b 	bne.w	40595a <f_write+0x292>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  405744:	68fb      	ldr	r3, [r7, #12]
  405746:	689b      	ldr	r3, [r3, #8]
  405748:	0a5b      	lsrs	r3, r3, #9
  40574a:	b2da      	uxtb	r2, r3
  40574c:	68fb      	ldr	r3, [r7, #12]
  40574e:	681b      	ldr	r3, [r3, #0]
  405750:	789b      	ldrb	r3, [r3, #2]
  405752:	3b01      	subs	r3, #1
  405754:	b2db      	uxtb	r3, r3
  405756:	4013      	ands	r3, r2
  405758:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
  40575a:	7dbb      	ldrb	r3, [r7, #22]
  40575c:	2b00      	cmp	r3, #0
  40575e:	d13d      	bne.n	4057dc <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
  405760:	68fb      	ldr	r3, [r7, #12]
  405762:	689b      	ldr	r3, [r3, #8]
  405764:	2b00      	cmp	r3, #0
  405766:	d110      	bne.n	40578a <f_write+0xc2>
					clst = fp->sclust;		/* Follow from the origin */
  405768:	68fb      	ldr	r3, [r7, #12]
  40576a:	691b      	ldr	r3, [r3, #16]
  40576c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
  40576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405770:	2b00      	cmp	r3, #0
  405772:	d113      	bne.n	40579c <f_write+0xd4>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  405774:	68fb      	ldr	r3, [r7, #12]
  405776:	681b      	ldr	r3, [r3, #0]
  405778:	4618      	mov	r0, r3
  40577a:	2100      	movs	r1, #0
  40577c:	4b70      	ldr	r3, [pc, #448]	; (405940 <f_write+0x278>)
  40577e:	4798      	blx	r3
  405780:	6278      	str	r0, [r7, #36]	; 0x24
  405782:	68fb      	ldr	r3, [r7, #12]
  405784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  405786:	611a      	str	r2, [r3, #16]
  405788:	e008      	b.n	40579c <f_write+0xd4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40578a:	68fb      	ldr	r3, [r7, #12]
  40578c:	681a      	ldr	r2, [r3, #0]
  40578e:	68fb      	ldr	r3, [r7, #12]
  405790:	695b      	ldr	r3, [r3, #20]
  405792:	4610      	mov	r0, r2
  405794:	4619      	mov	r1, r3
  405796:	4b6a      	ldr	r3, [pc, #424]	; (405940 <f_write+0x278>)
  405798:	4798      	blx	r3
  40579a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  40579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40579e:	2b00      	cmp	r3, #0
  4057a0:	d100      	bne.n	4057a4 <f_write+0xdc>
  4057a2:	e112      	b.n	4059ca <f_write+0x302>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4057a6:	2b01      	cmp	r3, #1
  4057a8:	d108      	bne.n	4057bc <f_write+0xf4>
  4057aa:	68fb      	ldr	r3, [r7, #12]
  4057ac:	799b      	ldrb	r3, [r3, #6]
  4057ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4057b2:	b2da      	uxtb	r2, r3
  4057b4:	68fb      	ldr	r3, [r7, #12]
  4057b6:	719a      	strb	r2, [r3, #6]
  4057b8:	2302      	movs	r3, #2
  4057ba:	e118      	b.n	4059ee <f_write+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4057be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4057c2:	d108      	bne.n	4057d6 <f_write+0x10e>
  4057c4:	68fb      	ldr	r3, [r7, #12]
  4057c6:	799b      	ldrb	r3, [r3, #6]
  4057c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4057cc:	b2da      	uxtb	r2, r3
  4057ce:	68fb      	ldr	r3, [r7, #12]
  4057d0:	719a      	strb	r2, [r3, #6]
  4057d2:	2301      	movs	r3, #1
  4057d4:	e10b      	b.n	4059ee <f_write+0x326>
				fp->clust = clst;			/* Update current cluster */
  4057d6:	68fb      	ldr	r3, [r7, #12]
  4057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4057da:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4057dc:	68fb      	ldr	r3, [r7, #12]
  4057de:	799b      	ldrb	r3, [r3, #6]
  4057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4057e4:	2b00      	cmp	r3, #0
  4057e6:	d020      	beq.n	40582a <f_write+0x162>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4057e8:	68fb      	ldr	r3, [r7, #12]
  4057ea:	681b      	ldr	r3, [r3, #0]
  4057ec:	7859      	ldrb	r1, [r3, #1]
  4057ee:	68fb      	ldr	r3, [r7, #12]
  4057f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4057f4:	68fb      	ldr	r3, [r7, #12]
  4057f6:	699b      	ldr	r3, [r3, #24]
  4057f8:	4608      	mov	r0, r1
  4057fa:	4611      	mov	r1, r2
  4057fc:	461a      	mov	r2, r3
  4057fe:	2301      	movs	r3, #1
  405800:	4c50      	ldr	r4, [pc, #320]	; (405944 <f_write+0x27c>)
  405802:	47a0      	blx	r4
  405804:	4603      	mov	r3, r0
  405806:	2b00      	cmp	r3, #0
  405808:	d008      	beq.n	40581c <f_write+0x154>
					ABORT(fp->fs, FR_DISK_ERR);
  40580a:	68fb      	ldr	r3, [r7, #12]
  40580c:	799b      	ldrb	r3, [r3, #6]
  40580e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405812:	b2da      	uxtb	r2, r3
  405814:	68fb      	ldr	r3, [r7, #12]
  405816:	719a      	strb	r2, [r3, #6]
  405818:	2301      	movs	r3, #1
  40581a:	e0e8      	b.n	4059ee <f_write+0x326>
				fp->flag &= ~FA__DIRTY;
  40581c:	68fb      	ldr	r3, [r7, #12]
  40581e:	799b      	ldrb	r3, [r3, #6]
  405820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405824:	b2da      	uxtb	r2, r3
  405826:	68fb      	ldr	r3, [r7, #12]
  405828:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40582a:	68fb      	ldr	r3, [r7, #12]
  40582c:	681a      	ldr	r2, [r3, #0]
  40582e:	68fb      	ldr	r3, [r7, #12]
  405830:	695b      	ldr	r3, [r3, #20]
  405832:	4610      	mov	r0, r2
  405834:	4619      	mov	r1, r3
  405836:	4b44      	ldr	r3, [pc, #272]	; (405948 <f_write+0x280>)
  405838:	4798      	blx	r3
  40583a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40583c:	693b      	ldr	r3, [r7, #16]
  40583e:	2b00      	cmp	r3, #0
  405840:	d108      	bne.n	405854 <f_write+0x18c>
  405842:	68fb      	ldr	r3, [r7, #12]
  405844:	799b      	ldrb	r3, [r3, #6]
  405846:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40584a:	b2da      	uxtb	r2, r3
  40584c:	68fb      	ldr	r3, [r7, #12]
  40584e:	719a      	strb	r2, [r3, #6]
  405850:	2302      	movs	r3, #2
  405852:	e0cc      	b.n	4059ee <f_write+0x326>
			sect += csect;
  405854:	7dbb      	ldrb	r3, [r7, #22]
  405856:	693a      	ldr	r2, [r7, #16]
  405858:	4413      	add	r3, r2
  40585a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
  40585c:	687b      	ldr	r3, [r7, #4]
  40585e:	0a5b      	lsrs	r3, r3, #9
  405860:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
  405862:	69fb      	ldr	r3, [r7, #28]
  405864:	2b00      	cmp	r3, #0
  405866:	d046      	beq.n	4058f6 <f_write+0x22e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  405868:	7dba      	ldrb	r2, [r7, #22]
  40586a:	69fb      	ldr	r3, [r7, #28]
  40586c:	441a      	add	r2, r3
  40586e:	68fb      	ldr	r3, [r7, #12]
  405870:	681b      	ldr	r3, [r3, #0]
  405872:	789b      	ldrb	r3, [r3, #2]
  405874:	429a      	cmp	r2, r3
  405876:	d906      	bls.n	405886 <f_write+0x1be>
					cc = fp->fs->csize - csect;
  405878:	68fb      	ldr	r3, [r7, #12]
  40587a:	681b      	ldr	r3, [r3, #0]
  40587c:	789b      	ldrb	r3, [r3, #2]
  40587e:	461a      	mov	r2, r3
  405880:	7dbb      	ldrb	r3, [r7, #22]
  405882:	1ad3      	subs	r3, r2, r3
  405884:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  405886:	68fb      	ldr	r3, [r7, #12]
  405888:	681b      	ldr	r3, [r3, #0]
  40588a:	785a      	ldrb	r2, [r3, #1]
  40588c:	69fb      	ldr	r3, [r7, #28]
  40588e:	b2db      	uxtb	r3, r3
  405890:	4610      	mov	r0, r2
  405892:	69b9      	ldr	r1, [r7, #24]
  405894:	693a      	ldr	r2, [r7, #16]
  405896:	4c2b      	ldr	r4, [pc, #172]	; (405944 <f_write+0x27c>)
  405898:	47a0      	blx	r4
  40589a:	4603      	mov	r3, r0
  40589c:	2b00      	cmp	r3, #0
  40589e:	d008      	beq.n	4058b2 <f_write+0x1ea>
					ABORT(fp->fs, FR_DISK_ERR);
  4058a0:	68fb      	ldr	r3, [r7, #12]
  4058a2:	799b      	ldrb	r3, [r3, #6]
  4058a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4058a8:	b2da      	uxtb	r2, r3
  4058aa:	68fb      	ldr	r3, [r7, #12]
  4058ac:	719a      	strb	r2, [r3, #6]
  4058ae:	2301      	movs	r3, #1
  4058b0:	e09d      	b.n	4059ee <f_write+0x326>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  4058b2:	68fb      	ldr	r3, [r7, #12]
  4058b4:	699a      	ldr	r2, [r3, #24]
  4058b6:	693b      	ldr	r3, [r7, #16]
  4058b8:	1ad2      	subs	r2, r2, r3
  4058ba:	69fb      	ldr	r3, [r7, #28]
  4058bc:	429a      	cmp	r2, r3
  4058be:	d216      	bcs.n	4058ee <f_write+0x226>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  4058c0:	68fb      	ldr	r3, [r7, #12]
  4058c2:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4058c6:	68fb      	ldr	r3, [r7, #12]
  4058c8:	6999      	ldr	r1, [r3, #24]
  4058ca:	693b      	ldr	r3, [r7, #16]
  4058cc:	1acb      	subs	r3, r1, r3
  4058ce:	025b      	lsls	r3, r3, #9
  4058d0:	69b9      	ldr	r1, [r7, #24]
  4058d2:	440b      	add	r3, r1
  4058d4:	4610      	mov	r0, r2
  4058d6:	4619      	mov	r1, r3
  4058d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4058dc:	4b1b      	ldr	r3, [pc, #108]	; (40594c <f_write+0x284>)
  4058de:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  4058e0:	68fb      	ldr	r3, [r7, #12]
  4058e2:	799b      	ldrb	r3, [r3, #6]
  4058e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4058e8:	b2da      	uxtb	r2, r3
  4058ea:	68fb      	ldr	r3, [r7, #12]
  4058ec:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  4058ee:	69fb      	ldr	r3, [r7, #28]
  4058f0:	025b      	lsls	r3, r3, #9
  4058f2:	623b      	str	r3, [r7, #32]
				continue;
  4058f4:	e051      	b.n	40599a <f_write+0x2d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  4058f6:	68fb      	ldr	r3, [r7, #12]
  4058f8:	699a      	ldr	r2, [r3, #24]
  4058fa:	693b      	ldr	r3, [r7, #16]
  4058fc:	429a      	cmp	r2, r3
  4058fe:	d029      	beq.n	405954 <f_write+0x28c>
				if (fp->fptr < fp->fsize &&
  405900:	68fb      	ldr	r3, [r7, #12]
  405902:	689a      	ldr	r2, [r3, #8]
  405904:	68fb      	ldr	r3, [r7, #12]
  405906:	68db      	ldr	r3, [r3, #12]
  405908:	429a      	cmp	r2, r3
  40590a:	d223      	bcs.n	405954 <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40590c:	68fb      	ldr	r3, [r7, #12]
  40590e:	681b      	ldr	r3, [r3, #0]
  405910:	785a      	ldrb	r2, [r3, #1]
  405912:	68fb      	ldr	r3, [r7, #12]
  405914:	3328      	adds	r3, #40	; 0x28
  405916:	4610      	mov	r0, r2
  405918:	4619      	mov	r1, r3
  40591a:	693a      	ldr	r2, [r7, #16]
  40591c:	2301      	movs	r3, #1
  40591e:	4c0c      	ldr	r4, [pc, #48]	; (405950 <f_write+0x288>)
  405920:	47a0      	blx	r4
  405922:	4603      	mov	r3, r0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
  405924:	2b00      	cmp	r3, #0
  405926:	d015      	beq.n	405954 <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
  405928:	68fb      	ldr	r3, [r7, #12]
  40592a:	799b      	ldrb	r3, [r3, #6]
  40592c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405930:	b2da      	uxtb	r2, r3
  405932:	68fb      	ldr	r3, [r7, #12]
  405934:	719a      	strb	r2, [r3, #6]
  405936:	2301      	movs	r3, #1
  405938:	e059      	b.n	4059ee <f_write+0x326>
  40593a:	bf00      	nop
  40593c:	00404f15 	.word	0x00404f15
  405940:	004039d1 	.word	0x004039d1
  405944:	00402d61 	.word	0x00402d61
  405948:	004035a1 	.word	0x004035a1
  40594c:	00402f39 	.word	0x00402f39
  405950:	00402cb1 	.word	0x00402cb1
			}
#endif
			fp->dsect = sect;
  405954:	68fb      	ldr	r3, [r7, #12]
  405956:	693a      	ldr	r2, [r7, #16]
  405958:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  40595a:	68fb      	ldr	r3, [r7, #12]
  40595c:	689b      	ldr	r3, [r3, #8]
  40595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405962:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  405966:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
  405968:	6a3a      	ldr	r2, [r7, #32]
  40596a:	687b      	ldr	r3, [r7, #4]
  40596c:	429a      	cmp	r2, r3
  40596e:	d901      	bls.n	405974 <f_write+0x2ac>
  405970:	687b      	ldr	r3, [r7, #4]
  405972:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  405974:	68fb      	ldr	r3, [r7, #12]
  405976:	689b      	ldr	r3, [r3, #8]
  405978:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40597c:	3328      	adds	r3, #40	; 0x28
  40597e:	68fa      	ldr	r2, [r7, #12]
  405980:	4413      	add	r3, r2
  405982:	4618      	mov	r0, r3
  405984:	69b9      	ldr	r1, [r7, #24]
  405986:	6a3a      	ldr	r2, [r7, #32]
  405988:	4b1b      	ldr	r3, [pc, #108]	; (4059f8 <f_write+0x330>)
  40598a:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  40598c:	68fb      	ldr	r3, [r7, #12]
  40598e:	799b      	ldrb	r3, [r3, #6]
  405990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405994:	b2da      	uxtb	r2, r3
  405996:	68fb      	ldr	r3, [r7, #12]
  405998:	719a      	strb	r2, [r3, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  40599a:	69ba      	ldr	r2, [r7, #24]
  40599c:	6a3b      	ldr	r3, [r7, #32]
  40599e:	4413      	add	r3, r2
  4059a0:	61bb      	str	r3, [r7, #24]
  4059a2:	68fb      	ldr	r3, [r7, #12]
  4059a4:	689a      	ldr	r2, [r3, #8]
  4059a6:	6a3b      	ldr	r3, [r7, #32]
  4059a8:	441a      	add	r2, r3
  4059aa:	68fb      	ldr	r3, [r7, #12]
  4059ac:	609a      	str	r2, [r3, #8]
  4059ae:	683b      	ldr	r3, [r7, #0]
  4059b0:	681a      	ldr	r2, [r3, #0]
  4059b2:	6a3b      	ldr	r3, [r7, #32]
  4059b4:	441a      	add	r2, r3
  4059b6:	683b      	ldr	r3, [r7, #0]
  4059b8:	601a      	str	r2, [r3, #0]
  4059ba:	687a      	ldr	r2, [r7, #4]
  4059bc:	6a3b      	ldr	r3, [r7, #32]
  4059be:	1ad3      	subs	r3, r2, r3
  4059c0:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  4059c2:	687b      	ldr	r3, [r7, #4]
  4059c4:	2b00      	cmp	r3, #0
  4059c6:	f47f aeb6 	bne.w	405736 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4059ca:	68fb      	ldr	r3, [r7, #12]
  4059cc:	689a      	ldr	r2, [r3, #8]
  4059ce:	68fb      	ldr	r3, [r7, #12]
  4059d0:	68db      	ldr	r3, [r3, #12]
  4059d2:	429a      	cmp	r2, r3
  4059d4:	d903      	bls.n	4059de <f_write+0x316>
  4059d6:	68fb      	ldr	r3, [r7, #12]
  4059d8:	689a      	ldr	r2, [r3, #8]
  4059da:	68fb      	ldr	r3, [r7, #12]
  4059dc:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4059de:	68fb      	ldr	r3, [r7, #12]
  4059e0:	799b      	ldrb	r3, [r3, #6]
  4059e2:	f043 0320 	orr.w	r3, r3, #32
  4059e6:	b2da      	uxtb	r2, r3
  4059e8:	68fb      	ldr	r3, [r7, #12]
  4059ea:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4059ec:	2300      	movs	r3, #0
}
  4059ee:	4618      	mov	r0, r3
  4059f0:	372c      	adds	r7, #44	; 0x2c
  4059f2:	46bd      	mov	sp, r7
  4059f4:	bd90      	pop	{r4, r7, pc}
  4059f6:	bf00      	nop
  4059f8:	00402f39 	.word	0x00402f39

004059fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4059fc:	b590      	push	{r4, r7, lr}
  4059fe:	b087      	sub	sp, #28
  405a00:	af00      	add	r7, sp, #0
  405a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  405a04:	687b      	ldr	r3, [r7, #4]
  405a06:	681a      	ldr	r2, [r3, #0]
  405a08:	687b      	ldr	r3, [r7, #4]
  405a0a:	889b      	ldrh	r3, [r3, #4]
  405a0c:	4610      	mov	r0, r2
  405a0e:	4619      	mov	r1, r3
  405a10:	4b5b      	ldr	r3, [pc, #364]	; (405b80 <f_sync+0x184>)
  405a12:	4798      	blx	r3
  405a14:	4603      	mov	r3, r0
  405a16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
  405a18:	7dfb      	ldrb	r3, [r7, #23]
  405a1a:	2b00      	cmp	r3, #0
  405a1c:	f040 80ab 	bne.w	405b76 <f_sync+0x17a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  405a20:	687b      	ldr	r3, [r7, #4]
  405a22:	799b      	ldrb	r3, [r3, #6]
  405a24:	f003 0320 	and.w	r3, r3, #32
  405a28:	2b00      	cmp	r3, #0
  405a2a:	f000 80a4 	beq.w	405b76 <f_sync+0x17a>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  405a2e:	687b      	ldr	r3, [r7, #4]
  405a30:	799b      	ldrb	r3, [r3, #6]
  405a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405a36:	2b00      	cmp	r3, #0
  405a38:	d019      	beq.n	405a6e <f_sync+0x72>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  405a3a:	687b      	ldr	r3, [r7, #4]
  405a3c:	681b      	ldr	r3, [r3, #0]
  405a3e:	7859      	ldrb	r1, [r3, #1]
  405a40:	687b      	ldr	r3, [r7, #4]
  405a42:	f103 0228 	add.w	r2, r3, #40	; 0x28
  405a46:	687b      	ldr	r3, [r7, #4]
  405a48:	699b      	ldr	r3, [r3, #24]
  405a4a:	4608      	mov	r0, r1
  405a4c:	4611      	mov	r1, r2
  405a4e:	461a      	mov	r2, r3
  405a50:	2301      	movs	r3, #1
  405a52:	4c4c      	ldr	r4, [pc, #304]	; (405b84 <f_sync+0x188>)
  405a54:	47a0      	blx	r4
  405a56:	4603      	mov	r3, r0
  405a58:	2b00      	cmp	r3, #0
  405a5a:	d001      	beq.n	405a60 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  405a5c:	2301      	movs	r3, #1
  405a5e:	e08b      	b.n	405b78 <f_sync+0x17c>
				fp->flag &= ~FA__DIRTY;
  405a60:	687b      	ldr	r3, [r7, #4]
  405a62:	799b      	ldrb	r3, [r3, #6]
  405a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405a68:	b2da      	uxtb	r2, r3
  405a6a:	687b      	ldr	r3, [r7, #4]
  405a6c:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  405a6e:	687b      	ldr	r3, [r7, #4]
  405a70:	681a      	ldr	r2, [r3, #0]
  405a72:	687b      	ldr	r3, [r7, #4]
  405a74:	69db      	ldr	r3, [r3, #28]
  405a76:	4610      	mov	r0, r2
  405a78:	4619      	mov	r1, r3
  405a7a:	4b43      	ldr	r3, [pc, #268]	; (405b88 <f_sync+0x18c>)
  405a7c:	4798      	blx	r3
  405a7e:	4603      	mov	r3, r0
  405a80:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
  405a82:	7dfb      	ldrb	r3, [r7, #23]
  405a84:	2b00      	cmp	r3, #0
  405a86:	d176      	bne.n	405b76 <f_sync+0x17a>
				dir = fp->dir_ptr;
  405a88:	687b      	ldr	r3, [r7, #4]
  405a8a:	6a1b      	ldr	r3, [r3, #32]
  405a8c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  405a8e:	693b      	ldr	r3, [r7, #16]
  405a90:	330b      	adds	r3, #11
  405a92:	693a      	ldr	r2, [r7, #16]
  405a94:	320b      	adds	r2, #11
  405a96:	7812      	ldrb	r2, [r2, #0]
  405a98:	f042 0220 	orr.w	r2, r2, #32
  405a9c:	b2d2      	uxtb	r2, r2
  405a9e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  405aa0:	693b      	ldr	r3, [r7, #16]
  405aa2:	331c      	adds	r3, #28
  405aa4:	687a      	ldr	r2, [r7, #4]
  405aa6:	68d2      	ldr	r2, [r2, #12]
  405aa8:	b2d2      	uxtb	r2, r2
  405aaa:	701a      	strb	r2, [r3, #0]
  405aac:	693b      	ldr	r3, [r7, #16]
  405aae:	331d      	adds	r3, #29
  405ab0:	687a      	ldr	r2, [r7, #4]
  405ab2:	68d2      	ldr	r2, [r2, #12]
  405ab4:	b292      	uxth	r2, r2
  405ab6:	0a12      	lsrs	r2, r2, #8
  405ab8:	b292      	uxth	r2, r2
  405aba:	b2d2      	uxtb	r2, r2
  405abc:	701a      	strb	r2, [r3, #0]
  405abe:	693b      	ldr	r3, [r7, #16]
  405ac0:	331e      	adds	r3, #30
  405ac2:	687a      	ldr	r2, [r7, #4]
  405ac4:	68d2      	ldr	r2, [r2, #12]
  405ac6:	0c12      	lsrs	r2, r2, #16
  405ac8:	b2d2      	uxtb	r2, r2
  405aca:	701a      	strb	r2, [r3, #0]
  405acc:	693b      	ldr	r3, [r7, #16]
  405ace:	331f      	adds	r3, #31
  405ad0:	687a      	ldr	r2, [r7, #4]
  405ad2:	68d2      	ldr	r2, [r2, #12]
  405ad4:	0e12      	lsrs	r2, r2, #24
  405ad6:	b2d2      	uxtb	r2, r2
  405ad8:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  405ada:	693b      	ldr	r3, [r7, #16]
  405adc:	331a      	adds	r3, #26
  405ade:	687a      	ldr	r2, [r7, #4]
  405ae0:	6912      	ldr	r2, [r2, #16]
  405ae2:	b2d2      	uxtb	r2, r2
  405ae4:	701a      	strb	r2, [r3, #0]
  405ae6:	693b      	ldr	r3, [r7, #16]
  405ae8:	331b      	adds	r3, #27
  405aea:	687a      	ldr	r2, [r7, #4]
  405aec:	6912      	ldr	r2, [r2, #16]
  405aee:	b292      	uxth	r2, r2
  405af0:	0a12      	lsrs	r2, r2, #8
  405af2:	b292      	uxth	r2, r2
  405af4:	b2d2      	uxtb	r2, r2
  405af6:	701a      	strb	r2, [r3, #0]
  405af8:	693b      	ldr	r3, [r7, #16]
  405afa:	3314      	adds	r3, #20
  405afc:	687a      	ldr	r2, [r7, #4]
  405afe:	6912      	ldr	r2, [r2, #16]
  405b00:	0c12      	lsrs	r2, r2, #16
  405b02:	b2d2      	uxtb	r2, r2
  405b04:	701a      	strb	r2, [r3, #0]
  405b06:	693b      	ldr	r3, [r7, #16]
  405b08:	3315      	adds	r3, #21
  405b0a:	687a      	ldr	r2, [r7, #4]
  405b0c:	6912      	ldr	r2, [r2, #16]
  405b0e:	0c12      	lsrs	r2, r2, #16
  405b10:	b292      	uxth	r2, r2
  405b12:	0a12      	lsrs	r2, r2, #8
  405b14:	b292      	uxth	r2, r2
  405b16:	b2d2      	uxtb	r2, r2
  405b18:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
  405b1a:	4b1c      	ldr	r3, [pc, #112]	; (405b8c <f_sync+0x190>)
  405b1c:	4798      	blx	r3
  405b1e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
  405b20:	693b      	ldr	r3, [r7, #16]
  405b22:	3316      	adds	r3, #22
  405b24:	68fa      	ldr	r2, [r7, #12]
  405b26:	b2d2      	uxtb	r2, r2
  405b28:	701a      	strb	r2, [r3, #0]
  405b2a:	693b      	ldr	r3, [r7, #16]
  405b2c:	3317      	adds	r3, #23
  405b2e:	68fa      	ldr	r2, [r7, #12]
  405b30:	b292      	uxth	r2, r2
  405b32:	0a12      	lsrs	r2, r2, #8
  405b34:	b292      	uxth	r2, r2
  405b36:	b2d2      	uxtb	r2, r2
  405b38:	701a      	strb	r2, [r3, #0]
  405b3a:	693b      	ldr	r3, [r7, #16]
  405b3c:	3318      	adds	r3, #24
  405b3e:	68fa      	ldr	r2, [r7, #12]
  405b40:	0c12      	lsrs	r2, r2, #16
  405b42:	b2d2      	uxtb	r2, r2
  405b44:	701a      	strb	r2, [r3, #0]
  405b46:	693b      	ldr	r3, [r7, #16]
  405b48:	3319      	adds	r3, #25
  405b4a:	68fa      	ldr	r2, [r7, #12]
  405b4c:	0e12      	lsrs	r2, r2, #24
  405b4e:	b2d2      	uxtb	r2, r2
  405b50:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
  405b52:	687b      	ldr	r3, [r7, #4]
  405b54:	799b      	ldrb	r3, [r3, #6]
  405b56:	f023 0320 	bic.w	r3, r3, #32
  405b5a:	b2da      	uxtb	r2, r3
  405b5c:	687b      	ldr	r3, [r7, #4]
  405b5e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
  405b60:	687b      	ldr	r3, [r7, #4]
  405b62:	681b      	ldr	r3, [r3, #0]
  405b64:	2201      	movs	r2, #1
  405b66:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  405b68:	687b      	ldr	r3, [r7, #4]
  405b6a:	681b      	ldr	r3, [r3, #0]
  405b6c:	4618      	mov	r0, r3
  405b6e:	4b08      	ldr	r3, [pc, #32]	; (405b90 <f_sync+0x194>)
  405b70:	4798      	blx	r3
  405b72:	4603      	mov	r3, r0
  405b74:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
  405b76:	7dfb      	ldrb	r3, [r7, #23]
}
  405b78:	4618      	mov	r0, r3
  405b7a:	371c      	adds	r7, #28
  405b7c:	46bd      	mov	sp, r7
  405b7e:	bd90      	pop	{r4, r7, pc}
  405b80:	00404f15 	.word	0x00404f15
  405b84:	00402d61 	.word	0x00402d61
  405b88:	00403381 	.word	0x00403381
  405b8c:	00402ed1 	.word	0x00402ed1
  405b90:	00403445 	.word	0x00403445

00405b94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  405b94:	b580      	push	{r7, lr}
  405b96:	b084      	sub	sp, #16
  405b98:	af00      	add	r7, sp, #0
  405b9a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  405b9c:	6878      	ldr	r0, [r7, #4]
  405b9e:	4b0c      	ldr	r3, [pc, #48]	; (405bd0 <f_close+0x3c>)
  405ba0:	4798      	blx	r3
  405ba2:	4603      	mov	r3, r0
  405ba4:	73fb      	strb	r3, [r7, #15]
#if _FS_SHARE
	if (res == FR_OK) {		/* Decrement open counter */
  405ba6:	7bfb      	ldrb	r3, [r7, #15]
  405ba8:	2b00      	cmp	r3, #0
  405baa:	d106      	bne.n	405bba <f_close+0x26>
		if (res == FR_OK) {
			res = dec_lock(fp->lockid);	
			unlock_fs(fp->fs, FR_OK);
		}
#else
		res = dec_lock(fp->lockid);
  405bac:	687b      	ldr	r3, [r7, #4]
  405bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405bb0:	4618      	mov	r0, r3
  405bb2:	4b08      	ldr	r3, [pc, #32]	; (405bd4 <f_close+0x40>)
  405bb4:	4798      	blx	r3
  405bb6:	4603      	mov	r3, r0
  405bb8:	73fb      	strb	r3, [r7, #15]
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  405bba:	7bfb      	ldrb	r3, [r7, #15]
  405bbc:	2b00      	cmp	r3, #0
  405bbe:	d102      	bne.n	405bc6 <f_close+0x32>
  405bc0:	687b      	ldr	r3, [r7, #4]
  405bc2:	2200      	movs	r2, #0
  405bc4:	601a      	str	r2, [r3, #0]
	return res;
  405bc6:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
  405bc8:	4618      	mov	r0, r3
  405bca:	3710      	adds	r7, #16
  405bcc:	46bd      	mov	sp, r7
  405bce:	bd80      	pop	{r7, pc}
  405bd0:	004059fd 	.word	0x004059fd
  405bd4:	004032a9 	.word	0x004032a9

00405bd8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  405bd8:	b590      	push	{r4, r7, lr}
  405bda:	b089      	sub	sp, #36	; 0x24
  405bdc:	af00      	add	r7, sp, #0
  405bde:	6078      	str	r0, [r7, #4]
  405be0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  405be2:	687b      	ldr	r3, [r7, #4]
  405be4:	681a      	ldr	r2, [r3, #0]
  405be6:	687b      	ldr	r3, [r7, #4]
  405be8:	889b      	ldrh	r3, [r3, #4]
  405bea:	4610      	mov	r0, r2
  405bec:	4619      	mov	r1, r3
  405bee:	4b8b      	ldr	r3, [pc, #556]	; (405e1c <f_lseek+0x244>)
  405bf0:	4798      	blx	r3
  405bf2:	4603      	mov	r3, r0
  405bf4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  405bf6:	7dfb      	ldrb	r3, [r7, #23]
  405bf8:	2b00      	cmp	r3, #0
  405bfa:	d001      	beq.n	405c00 <f_lseek+0x28>
  405bfc:	7dfb      	ldrb	r3, [r7, #23]
  405bfe:	e14a      	b.n	405e96 <f_lseek+0x2be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  405c00:	687b      	ldr	r3, [r7, #4]
  405c02:	799b      	ldrb	r3, [r3, #6]
  405c04:	b2db      	uxtb	r3, r3
  405c06:	b25b      	sxtb	r3, r3
  405c08:	2b00      	cmp	r3, #0
  405c0a:	da01      	bge.n	405c10 <f_lseek+0x38>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  405c0c:	2302      	movs	r3, #2
  405c0e:	e142      	b.n	405e96 <f_lseek+0x2be>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  405c10:	687b      	ldr	r3, [r7, #4]
  405c12:	68da      	ldr	r2, [r3, #12]
  405c14:	683b      	ldr	r3, [r7, #0]
  405c16:	429a      	cmp	r2, r3
  405c18:	d208      	bcs.n	405c2c <f_lseek+0x54>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  405c1a:	687b      	ldr	r3, [r7, #4]
  405c1c:	799b      	ldrb	r3, [r3, #6]
  405c1e:	f003 0302 	and.w	r3, r3, #2
  405c22:	2b00      	cmp	r3, #0
  405c24:	d102      	bne.n	405c2c <f_lseek+0x54>
#endif
			) ofs = fp->fsize;
  405c26:	687b      	ldr	r3, [r7, #4]
  405c28:	68db      	ldr	r3, [r3, #12]
  405c2a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
  405c2c:	687b      	ldr	r3, [r7, #4]
  405c2e:	689b      	ldr	r3, [r3, #8]
  405c30:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
  405c32:	2300      	movs	r3, #0
  405c34:	61bb      	str	r3, [r7, #24]
  405c36:	687b      	ldr	r3, [r7, #4]
  405c38:	69ba      	ldr	r2, [r7, #24]
  405c3a:	609a      	str	r2, [r3, #8]
		if (ofs) {
  405c3c:	683b      	ldr	r3, [r7, #0]
  405c3e:	2b00      	cmp	r3, #0
  405c40:	f000 80c1 	beq.w	405dc6 <f_lseek+0x1ee>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  405c44:	687b      	ldr	r3, [r7, #4]
  405c46:	681b      	ldr	r3, [r3, #0]
  405c48:	789b      	ldrb	r3, [r3, #2]
  405c4a:	025b      	lsls	r3, r3, #9
  405c4c:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
  405c4e:	693b      	ldr	r3, [r7, #16]
  405c50:	2b00      	cmp	r3, #0
  405c52:	d01b      	beq.n	405c8c <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  405c54:	683b      	ldr	r3, [r7, #0]
  405c56:	1e5a      	subs	r2, r3, #1
  405c58:	68fb      	ldr	r3, [r7, #12]
  405c5a:	fbb2 f2f3 	udiv	r2, r2, r3
  405c5e:	693b      	ldr	r3, [r7, #16]
  405c60:	1e59      	subs	r1, r3, #1
  405c62:	68fb      	ldr	r3, [r7, #12]
  405c64:	fbb1 f3f3 	udiv	r3, r1, r3

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
  405c68:	429a      	cmp	r2, r3
  405c6a:	d30f      	bcc.n	405c8c <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  405c6c:	693b      	ldr	r3, [r7, #16]
  405c6e:	1e5a      	subs	r2, r3, #1
  405c70:	68fb      	ldr	r3, [r7, #12]
  405c72:	425b      	negs	r3, r3
  405c74:	401a      	ands	r2, r3
  405c76:	687b      	ldr	r3, [r7, #4]
  405c78:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
  405c7a:	687b      	ldr	r3, [r7, #4]
  405c7c:	689b      	ldr	r3, [r3, #8]
  405c7e:	683a      	ldr	r2, [r7, #0]
  405c80:	1ad3      	subs	r3, r2, r3
  405c82:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
  405c84:	687b      	ldr	r3, [r7, #4]
  405c86:	695b      	ldr	r3, [r3, #20]
  405c88:	61fb      	str	r3, [r7, #28]
  405c8a:	e02b      	b.n	405ce4 <f_lseek+0x10c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  405c8c:	687b      	ldr	r3, [r7, #4]
  405c8e:	691b      	ldr	r3, [r3, #16]
  405c90:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  405c92:	69fb      	ldr	r3, [r7, #28]
  405c94:	2b00      	cmp	r3, #0
  405c96:	d122      	bne.n	405cde <f_lseek+0x106>
					clst = create_chain(fp->fs, 0);
  405c98:	687b      	ldr	r3, [r7, #4]
  405c9a:	681b      	ldr	r3, [r3, #0]
  405c9c:	4618      	mov	r0, r3
  405c9e:	2100      	movs	r1, #0
  405ca0:	4b5f      	ldr	r3, [pc, #380]	; (405e20 <f_lseek+0x248>)
  405ca2:	4798      	blx	r3
  405ca4:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  405ca6:	69fb      	ldr	r3, [r7, #28]
  405ca8:	2b01      	cmp	r3, #1
  405caa:	d108      	bne.n	405cbe <f_lseek+0xe6>
  405cac:	687b      	ldr	r3, [r7, #4]
  405cae:	799b      	ldrb	r3, [r3, #6]
  405cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405cb4:	b2da      	uxtb	r2, r3
  405cb6:	687b      	ldr	r3, [r7, #4]
  405cb8:	719a      	strb	r2, [r3, #6]
  405cba:	2302      	movs	r3, #2
  405cbc:	e0eb      	b.n	405e96 <f_lseek+0x2be>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  405cbe:	69fb      	ldr	r3, [r7, #28]
  405cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
  405cc4:	d108      	bne.n	405cd8 <f_lseek+0x100>
  405cc6:	687b      	ldr	r3, [r7, #4]
  405cc8:	799b      	ldrb	r3, [r3, #6]
  405cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405cce:	b2da      	uxtb	r2, r3
  405cd0:	687b      	ldr	r3, [r7, #4]
  405cd2:	719a      	strb	r2, [r3, #6]
  405cd4:	2301      	movs	r3, #1
  405cd6:	e0de      	b.n	405e96 <f_lseek+0x2be>
					fp->sclust = clst;
  405cd8:	687b      	ldr	r3, [r7, #4]
  405cda:	69fa      	ldr	r2, [r7, #28]
  405cdc:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
  405cde:	687b      	ldr	r3, [r7, #4]
  405ce0:	69fa      	ldr	r2, [r7, #28]
  405ce2:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
  405ce4:	69fb      	ldr	r3, [r7, #28]
  405ce6:	2b00      	cmp	r3, #0
  405ce8:	d06d      	beq.n	405dc6 <f_lseek+0x1ee>
				while (ofs > bcs) {						/* Cluster following loop */
  405cea:	e045      	b.n	405d78 <f_lseek+0x1a0>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  405cec:	687b      	ldr	r3, [r7, #4]
  405cee:	799b      	ldrb	r3, [r3, #6]
  405cf0:	f003 0302 	and.w	r3, r3, #2
  405cf4:	2b00      	cmp	r3, #0
  405cf6:	d00c      	beq.n	405d12 <f_lseek+0x13a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  405cf8:	687b      	ldr	r3, [r7, #4]
  405cfa:	681b      	ldr	r3, [r3, #0]
  405cfc:	4618      	mov	r0, r3
  405cfe:	69f9      	ldr	r1, [r7, #28]
  405d00:	4b47      	ldr	r3, [pc, #284]	; (405e20 <f_lseek+0x248>)
  405d02:	4798      	blx	r3
  405d04:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
  405d06:	69fb      	ldr	r3, [r7, #28]
  405d08:	2b00      	cmp	r3, #0
  405d0a:	d109      	bne.n	405d20 <f_lseek+0x148>
							ofs = bcs; break;
  405d0c:	68fb      	ldr	r3, [r7, #12]
  405d0e:	603b      	str	r3, [r7, #0]
  405d10:	e036      	b.n	405d80 <f_lseek+0x1a8>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  405d12:	687b      	ldr	r3, [r7, #4]
  405d14:	681b      	ldr	r3, [r3, #0]
  405d16:	4618      	mov	r0, r3
  405d18:	69f9      	ldr	r1, [r7, #28]
  405d1a:	4b42      	ldr	r3, [pc, #264]	; (405e24 <f_lseek+0x24c>)
  405d1c:	4798      	blx	r3
  405d1e:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  405d20:	69fb      	ldr	r3, [r7, #28]
  405d22:	f1b3 3fff 	cmp.w	r3, #4294967295
  405d26:	d108      	bne.n	405d3a <f_lseek+0x162>
  405d28:	687b      	ldr	r3, [r7, #4]
  405d2a:	799b      	ldrb	r3, [r3, #6]
  405d2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405d30:	b2da      	uxtb	r2, r3
  405d32:	687b      	ldr	r3, [r7, #4]
  405d34:	719a      	strb	r2, [r3, #6]
  405d36:	2301      	movs	r3, #1
  405d38:	e0ad      	b.n	405e96 <f_lseek+0x2be>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  405d3a:	69fb      	ldr	r3, [r7, #28]
  405d3c:	2b01      	cmp	r3, #1
  405d3e:	d905      	bls.n	405d4c <f_lseek+0x174>
  405d40:	687b      	ldr	r3, [r7, #4]
  405d42:	681b      	ldr	r3, [r3, #0]
  405d44:	699a      	ldr	r2, [r3, #24]
  405d46:	69fb      	ldr	r3, [r7, #28]
  405d48:	429a      	cmp	r2, r3
  405d4a:	d808      	bhi.n	405d5e <f_lseek+0x186>
  405d4c:	687b      	ldr	r3, [r7, #4]
  405d4e:	799b      	ldrb	r3, [r3, #6]
  405d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405d54:	b2da      	uxtb	r2, r3
  405d56:	687b      	ldr	r3, [r7, #4]
  405d58:	719a      	strb	r2, [r3, #6]
  405d5a:	2302      	movs	r3, #2
  405d5c:	e09b      	b.n	405e96 <f_lseek+0x2be>
					fp->clust = clst;
  405d5e:	687b      	ldr	r3, [r7, #4]
  405d60:	69fa      	ldr	r2, [r7, #28]
  405d62:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
  405d64:	687b      	ldr	r3, [r7, #4]
  405d66:	689a      	ldr	r2, [r3, #8]
  405d68:	68fb      	ldr	r3, [r7, #12]
  405d6a:	441a      	add	r2, r3
  405d6c:	687b      	ldr	r3, [r7, #4]
  405d6e:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
  405d70:	683a      	ldr	r2, [r7, #0]
  405d72:	68fb      	ldr	r3, [r7, #12]
  405d74:	1ad3      	subs	r3, r2, r3
  405d76:	603b      	str	r3, [r7, #0]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
  405d78:	683a      	ldr	r2, [r7, #0]
  405d7a:	68fb      	ldr	r3, [r7, #12]
  405d7c:	429a      	cmp	r2, r3
  405d7e:	d8b5      	bhi.n	405cec <f_lseek+0x114>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
  405d80:	687b      	ldr	r3, [r7, #4]
  405d82:	689a      	ldr	r2, [r3, #8]
  405d84:	683b      	ldr	r3, [r7, #0]
  405d86:	441a      	add	r2, r3
  405d88:	687b      	ldr	r3, [r7, #4]
  405d8a:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
  405d8c:	683b      	ldr	r3, [r7, #0]
  405d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405d92:	2b00      	cmp	r3, #0
  405d94:	d017      	beq.n	405dc6 <f_lseek+0x1ee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	681b      	ldr	r3, [r3, #0]
  405d9a:	4618      	mov	r0, r3
  405d9c:	69f9      	ldr	r1, [r7, #28]
  405d9e:	4b22      	ldr	r3, [pc, #136]	; (405e28 <f_lseek+0x250>)
  405da0:	4798      	blx	r3
  405da2:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  405da4:	69bb      	ldr	r3, [r7, #24]
  405da6:	2b00      	cmp	r3, #0
  405da8:	d108      	bne.n	405dbc <f_lseek+0x1e4>
  405daa:	687b      	ldr	r3, [r7, #4]
  405dac:	799b      	ldrb	r3, [r3, #6]
  405dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405db2:	b2da      	uxtb	r2, r3
  405db4:	687b      	ldr	r3, [r7, #4]
  405db6:	719a      	strb	r2, [r3, #6]
  405db8:	2302      	movs	r3, #2
  405dba:	e06c      	b.n	405e96 <f_lseek+0x2be>
					nsect += ofs / SS(fp->fs);
  405dbc:	683b      	ldr	r3, [r7, #0]
  405dbe:	0a5b      	lsrs	r3, r3, #9
  405dc0:	69ba      	ldr	r2, [r7, #24]
  405dc2:	4413      	add	r3, r2
  405dc4:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  405dc6:	687b      	ldr	r3, [r7, #4]
  405dc8:	689b      	ldr	r3, [r3, #8]
  405dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405dce:	2b00      	cmp	r3, #0
  405dd0:	d04f      	beq.n	405e72 <f_lseek+0x29a>
  405dd2:	687b      	ldr	r3, [r7, #4]
  405dd4:	699a      	ldr	r2, [r3, #24]
  405dd6:	69bb      	ldr	r3, [r7, #24]
  405dd8:	429a      	cmp	r2, r3
  405dda:	d04a      	beq.n	405e72 <f_lseek+0x29a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
  405ddc:	687b      	ldr	r3, [r7, #4]
  405dde:	799b      	ldrb	r3, [r3, #6]
  405de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405de4:	2b00      	cmp	r3, #0
  405de6:	d02a      	beq.n	405e3e <f_lseek+0x266>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  405de8:	687b      	ldr	r3, [r7, #4]
  405dea:	681b      	ldr	r3, [r3, #0]
  405dec:	7859      	ldrb	r1, [r3, #1]
  405dee:	687b      	ldr	r3, [r7, #4]
  405df0:	f103 0228 	add.w	r2, r3, #40	; 0x28
  405df4:	687b      	ldr	r3, [r7, #4]
  405df6:	699b      	ldr	r3, [r3, #24]
  405df8:	4608      	mov	r0, r1
  405dfa:	4611      	mov	r1, r2
  405dfc:	461a      	mov	r2, r3
  405dfe:	2301      	movs	r3, #1
  405e00:	4c0a      	ldr	r4, [pc, #40]	; (405e2c <f_lseek+0x254>)
  405e02:	47a0      	blx	r4
  405e04:	4603      	mov	r3, r0
  405e06:	2b00      	cmp	r3, #0
  405e08:	d012      	beq.n	405e30 <f_lseek+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
  405e0a:	687b      	ldr	r3, [r7, #4]
  405e0c:	799b      	ldrb	r3, [r3, #6]
  405e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405e12:	b2da      	uxtb	r2, r3
  405e14:	687b      	ldr	r3, [r7, #4]
  405e16:	719a      	strb	r2, [r3, #6]
  405e18:	2301      	movs	r3, #1
  405e1a:	e03c      	b.n	405e96 <f_lseek+0x2be>
  405e1c:	00404f15 	.word	0x00404f15
  405e20:	004039d1 	.word	0x004039d1
  405e24:	004035dd 	.word	0x004035dd
  405e28:	004035a1 	.word	0x004035a1
  405e2c:	00402d61 	.word	0x00402d61
				fp->flag &= ~FA__DIRTY;
  405e30:	687b      	ldr	r3, [r7, #4]
  405e32:	799b      	ldrb	r3, [r3, #6]
  405e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405e38:	b2da      	uxtb	r2, r3
  405e3a:	687b      	ldr	r3, [r7, #4]
  405e3c:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
  405e3e:	687b      	ldr	r3, [r7, #4]
  405e40:	681b      	ldr	r3, [r3, #0]
  405e42:	785a      	ldrb	r2, [r3, #1]
  405e44:	687b      	ldr	r3, [r7, #4]
  405e46:	3328      	adds	r3, #40	; 0x28
  405e48:	4610      	mov	r0, r2
  405e4a:	4619      	mov	r1, r3
  405e4c:	69ba      	ldr	r2, [r7, #24]
  405e4e:	2301      	movs	r3, #1
  405e50:	4c13      	ldr	r4, [pc, #76]	; (405ea0 <f_lseek+0x2c8>)
  405e52:	47a0      	blx	r4
  405e54:	4603      	mov	r3, r0
  405e56:	2b00      	cmp	r3, #0
  405e58:	d008      	beq.n	405e6c <f_lseek+0x294>
				ABORT(fp->fs, FR_DISK_ERR);
  405e5a:	687b      	ldr	r3, [r7, #4]
  405e5c:	799b      	ldrb	r3, [r3, #6]
  405e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405e62:	b2da      	uxtb	r2, r3
  405e64:	687b      	ldr	r3, [r7, #4]
  405e66:	719a      	strb	r2, [r3, #6]
  405e68:	2301      	movs	r3, #1
  405e6a:	e014      	b.n	405e96 <f_lseek+0x2be>
#endif
			fp->dsect = nsect;
  405e6c:	687b      	ldr	r3, [r7, #4]
  405e6e:	69ba      	ldr	r2, [r7, #24]
  405e70:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  405e72:	687b      	ldr	r3, [r7, #4]
  405e74:	689a      	ldr	r2, [r3, #8]
  405e76:	687b      	ldr	r3, [r7, #4]
  405e78:	68db      	ldr	r3, [r3, #12]
  405e7a:	429a      	cmp	r2, r3
  405e7c:	d90a      	bls.n	405e94 <f_lseek+0x2bc>
			fp->fsize = fp->fptr;
  405e7e:	687b      	ldr	r3, [r7, #4]
  405e80:	689a      	ldr	r2, [r3, #8]
  405e82:	687b      	ldr	r3, [r7, #4]
  405e84:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
  405e86:	687b      	ldr	r3, [r7, #4]
  405e88:	799b      	ldrb	r3, [r3, #6]
  405e8a:	f043 0320 	orr.w	r3, r3, #32
  405e8e:	b2da      	uxtb	r2, r3
  405e90:	687b      	ldr	r3, [r7, #4]
  405e92:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
  405e94:	7dfb      	ldrb	r3, [r7, #23]
}
  405e96:	4618      	mov	r0, r3
  405e98:	3724      	adds	r7, #36	; 0x24
  405e9a:	46bd      	mov	sp, r7
  405e9c:	bd90      	pop	{r4, r7, pc}
  405e9e:	bf00      	nop
  405ea0:	00402cb1 	.word	0x00402cb1

00405ea4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  405ea4:	b480      	push	{r7}
  405ea6:	b085      	sub	sp, #20
  405ea8:	af00      	add	r7, sp, #0
  405eaa:	4603      	mov	r3, r0
  405eac:	6039      	str	r1, [r7, #0]
  405eae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  405eb0:	88fb      	ldrh	r3, [r7, #6]
  405eb2:	2b7f      	cmp	r3, #127	; 0x7f
  405eb4:	d802      	bhi.n	405ebc <ff_convert+0x18>
		c = src;
  405eb6:	88fb      	ldrh	r3, [r7, #6]
  405eb8:	81fb      	strh	r3, [r7, #14]
  405eba:	e025      	b.n	405f08 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
  405ebc:	683b      	ldr	r3, [r7, #0]
  405ebe:	2b00      	cmp	r3, #0
  405ec0:	d00c      	beq.n	405edc <ff_convert+0x38>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  405ec2:	88fb      	ldrh	r3, [r7, #6]
  405ec4:	2bff      	cmp	r3, #255	; 0xff
  405ec6:	d806      	bhi.n	405ed6 <ff_convert+0x32>
  405ec8:	88fb      	ldrh	r3, [r7, #6]
  405eca:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
  405ece:	4b12      	ldr	r3, [pc, #72]	; (405f18 <ff_convert+0x74>)
  405ed0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405ed4:	e000      	b.n	405ed8 <ff_convert+0x34>
  405ed6:	2300      	movs	r3, #0
  405ed8:	81fb      	strh	r3, [r7, #14]
  405eda:	e015      	b.n	405f08 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  405edc:	2300      	movs	r3, #0
  405ede:	81fb      	strh	r3, [r7, #14]
  405ee0:	e00a      	b.n	405ef8 <ff_convert+0x54>
				if (src == Tbl[c]) break;
  405ee2:	89fa      	ldrh	r2, [r7, #14]
  405ee4:	4b0c      	ldr	r3, [pc, #48]	; (405f18 <ff_convert+0x74>)
  405ee6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405eea:	88fa      	ldrh	r2, [r7, #6]
  405eec:	429a      	cmp	r2, r3
  405eee:	d100      	bne.n	405ef2 <ff_convert+0x4e>
  405ef0:	e005      	b.n	405efe <ff_convert+0x5a>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  405ef2:	89fb      	ldrh	r3, [r7, #14]
  405ef4:	3301      	adds	r3, #1
  405ef6:	81fb      	strh	r3, [r7, #14]
  405ef8:	89fb      	ldrh	r3, [r7, #14]
  405efa:	2b7f      	cmp	r3, #127	; 0x7f
  405efc:	d9f1      	bls.n	405ee2 <ff_convert+0x3e>
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
  405efe:	89fb      	ldrh	r3, [r7, #14]
  405f00:	3380      	adds	r3, #128	; 0x80
  405f02:	b29b      	uxth	r3, r3
  405f04:	b2db      	uxtb	r3, r3
  405f06:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
  405f08:	89fb      	ldrh	r3, [r7, #14]
}
  405f0a:	4618      	mov	r0, r3
  405f0c:	3714      	adds	r7, #20
  405f0e:	46bd      	mov	sp, r7
  405f10:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f14:	4770      	bx	lr
  405f16:	bf00      	nop
  405f18:	0041601c 	.word	0x0041601c

00405f1c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
  405f1c:	b480      	push	{r7}
  405f1e:	b085      	sub	sp, #20
  405f20:	af00      	add	r7, sp, #0
  405f22:	4603      	mov	r3, r0
  405f24:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  405f26:	2300      	movs	r3, #0
  405f28:	60fb      	str	r3, [r7, #12]
  405f2a:	e002      	b.n	405f32 <ff_wtoupper+0x16>
  405f2c:	68fb      	ldr	r3, [r7, #12]
  405f2e:	3301      	adds	r3, #1
  405f30:	60fb      	str	r3, [r7, #12]
  405f32:	4b0f      	ldr	r3, [pc, #60]	; (405f70 <ff_wtoupper+0x54>)
  405f34:	68fa      	ldr	r2, [r7, #12]
  405f36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405f3a:	2b00      	cmp	r3, #0
  405f3c:	d006      	beq.n	405f4c <ff_wtoupper+0x30>
  405f3e:	4b0c      	ldr	r3, [pc, #48]	; (405f70 <ff_wtoupper+0x54>)
  405f40:	68fa      	ldr	r2, [r7, #12]
  405f42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405f46:	88fa      	ldrh	r2, [r7, #6]
  405f48:	429a      	cmp	r2, r3
  405f4a:	d1ef      	bne.n	405f2c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  405f4c:	4b08      	ldr	r3, [pc, #32]	; (405f70 <ff_wtoupper+0x54>)
  405f4e:	68fa      	ldr	r2, [r7, #12]
  405f50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405f54:	2b00      	cmp	r3, #0
  405f56:	d004      	beq.n	405f62 <ff_wtoupper+0x46>
  405f58:	4b06      	ldr	r3, [pc, #24]	; (405f74 <ff_wtoupper+0x58>)
  405f5a:	68fa      	ldr	r2, [r7, #12]
  405f5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  405f60:	e000      	b.n	405f64 <ff_wtoupper+0x48>
  405f62:	88fb      	ldrh	r3, [r7, #6]
}
  405f64:	4618      	mov	r0, r3
  405f66:	3714      	adds	r7, #20
  405f68:	46bd      	mov	sp, r7
  405f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f6e:	4770      	bx	lr
  405f70:	0041611c 	.word	0x0041611c
  405f74:	004162fc 	.word	0x004162fc

00405f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  405f78:	b480      	push	{r7}
  405f7a:	b083      	sub	sp, #12
  405f7c:	af00      	add	r7, sp, #0
  405f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  405f80:	687b      	ldr	r3, [r7, #4]
  405f82:	f103 0208 	add.w	r2, r3, #8
  405f86:	687b      	ldr	r3, [r7, #4]
  405f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  405f8a:	687b      	ldr	r3, [r7, #4]
  405f8c:	f04f 32ff 	mov.w	r2, #4294967295
  405f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  405f92:	687b      	ldr	r3, [r7, #4]
  405f94:	f103 0208 	add.w	r2, r3, #8
  405f98:	687b      	ldr	r3, [r7, #4]
  405f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  405f9c:	687b      	ldr	r3, [r7, #4]
  405f9e:	f103 0208 	add.w	r2, r3, #8
  405fa2:	687b      	ldr	r3, [r7, #4]
  405fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  405fa6:	687b      	ldr	r3, [r7, #4]
  405fa8:	2200      	movs	r2, #0
  405faa:	601a      	str	r2, [r3, #0]
}
  405fac:	370c      	adds	r7, #12
  405fae:	46bd      	mov	sp, r7
  405fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fb4:	4770      	bx	lr
  405fb6:	bf00      	nop

00405fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  405fb8:	b480      	push	{r7}
  405fba:	b083      	sub	sp, #12
  405fbc:	af00      	add	r7, sp, #0
  405fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  405fc0:	687b      	ldr	r3, [r7, #4]
  405fc2:	2200      	movs	r2, #0
  405fc4:	611a      	str	r2, [r3, #16]
}
  405fc6:	370c      	adds	r7, #12
  405fc8:	46bd      	mov	sp, r7
  405fca:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fce:	4770      	bx	lr

00405fd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  405fd0:	b480      	push	{r7}
  405fd2:	b085      	sub	sp, #20
  405fd4:	af00      	add	r7, sp, #0
  405fd6:	6078      	str	r0, [r7, #4]
  405fd8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  405fda:	687b      	ldr	r3, [r7, #4]
  405fdc:	685b      	ldr	r3, [r3, #4]
  405fde:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  405fe0:	68fb      	ldr	r3, [r7, #12]
  405fe2:	685a      	ldr	r2, [r3, #4]
  405fe4:	683b      	ldr	r3, [r7, #0]
  405fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  405fe8:	687b      	ldr	r3, [r7, #4]
  405fea:	685a      	ldr	r2, [r3, #4]
  405fec:	683b      	ldr	r3, [r7, #0]
  405fee:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405ff0:	68fb      	ldr	r3, [r7, #12]
  405ff2:	685b      	ldr	r3, [r3, #4]
  405ff4:	683a      	ldr	r2, [r7, #0]
  405ff6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  405ff8:	68fb      	ldr	r3, [r7, #12]
  405ffa:	683a      	ldr	r2, [r7, #0]
  405ffc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  405ffe:	687b      	ldr	r3, [r7, #4]
  406000:	683a      	ldr	r2, [r7, #0]
  406002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  406004:	683b      	ldr	r3, [r7, #0]
  406006:	687a      	ldr	r2, [r7, #4]
  406008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40600a:	687b      	ldr	r3, [r7, #4]
  40600c:	681b      	ldr	r3, [r3, #0]
  40600e:	1c5a      	adds	r2, r3, #1
  406010:	687b      	ldr	r3, [r7, #4]
  406012:	601a      	str	r2, [r3, #0]
}
  406014:	3714      	adds	r7, #20
  406016:	46bd      	mov	sp, r7
  406018:	f85d 7b04 	ldr.w	r7, [sp], #4
  40601c:	4770      	bx	lr
  40601e:	bf00      	nop

00406020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  406020:	b480      	push	{r7}
  406022:	b085      	sub	sp, #20
  406024:	af00      	add	r7, sp, #0
  406026:	6078      	str	r0, [r7, #4]
  406028:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40602a:	683b      	ldr	r3, [r7, #0]
  40602c:	681b      	ldr	r3, [r3, #0]
  40602e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  406030:	68bb      	ldr	r3, [r7, #8]
  406032:	f1b3 3fff 	cmp.w	r3, #4294967295
  406036:	d103      	bne.n	406040 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  406038:	687b      	ldr	r3, [r7, #4]
  40603a:	691b      	ldr	r3, [r3, #16]
  40603c:	60fb      	str	r3, [r7, #12]
  40603e:	e00c      	b.n	40605a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  406040:	687b      	ldr	r3, [r7, #4]
  406042:	3308      	adds	r3, #8
  406044:	60fb      	str	r3, [r7, #12]
  406046:	e002      	b.n	40604e <vListInsert+0x2e>
  406048:	68fb      	ldr	r3, [r7, #12]
  40604a:	685b      	ldr	r3, [r3, #4]
  40604c:	60fb      	str	r3, [r7, #12]
  40604e:	68fb      	ldr	r3, [r7, #12]
  406050:	685b      	ldr	r3, [r3, #4]
  406052:	681a      	ldr	r2, [r3, #0]
  406054:	68bb      	ldr	r3, [r7, #8]
  406056:	429a      	cmp	r2, r3
  406058:	d9f6      	bls.n	406048 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40605a:	68fb      	ldr	r3, [r7, #12]
  40605c:	685a      	ldr	r2, [r3, #4]
  40605e:	683b      	ldr	r3, [r7, #0]
  406060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  406062:	683b      	ldr	r3, [r7, #0]
  406064:	685b      	ldr	r3, [r3, #4]
  406066:	683a      	ldr	r2, [r7, #0]
  406068:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40606a:	683b      	ldr	r3, [r7, #0]
  40606c:	68fa      	ldr	r2, [r7, #12]
  40606e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  406070:	68fb      	ldr	r3, [r7, #12]
  406072:	683a      	ldr	r2, [r7, #0]
  406074:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  406076:	683b      	ldr	r3, [r7, #0]
  406078:	687a      	ldr	r2, [r7, #4]
  40607a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40607c:	687b      	ldr	r3, [r7, #4]
  40607e:	681b      	ldr	r3, [r3, #0]
  406080:	1c5a      	adds	r2, r3, #1
  406082:	687b      	ldr	r3, [r7, #4]
  406084:	601a      	str	r2, [r3, #0]
}
  406086:	3714      	adds	r7, #20
  406088:	46bd      	mov	sp, r7
  40608a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40608e:	4770      	bx	lr

00406090 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
  406090:	b480      	push	{r7}
  406092:	b085      	sub	sp, #20
  406094:	af00      	add	r7, sp, #0
  406096:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  406098:	687b      	ldr	r3, [r7, #4]
  40609a:	685b      	ldr	r3, [r3, #4]
  40609c:	687a      	ldr	r2, [r7, #4]
  40609e:	6892      	ldr	r2, [r2, #8]
  4060a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4060a2:	687b      	ldr	r3, [r7, #4]
  4060a4:	689b      	ldr	r3, [r3, #8]
  4060a6:	687a      	ldr	r2, [r7, #4]
  4060a8:	6852      	ldr	r2, [r2, #4]
  4060aa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4060ac:	687b      	ldr	r3, [r7, #4]
  4060ae:	691b      	ldr	r3, [r3, #16]
  4060b0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4060b2:	68fb      	ldr	r3, [r7, #12]
  4060b4:	685a      	ldr	r2, [r3, #4]
  4060b6:	687b      	ldr	r3, [r7, #4]
  4060b8:	429a      	cmp	r2, r3
  4060ba:	d103      	bne.n	4060c4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4060bc:	687b      	ldr	r3, [r7, #4]
  4060be:	689a      	ldr	r2, [r3, #8]
  4060c0:	68fb      	ldr	r3, [r7, #12]
  4060c2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4060c4:	687b      	ldr	r3, [r7, #4]
  4060c6:	2200      	movs	r2, #0
  4060c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4060ca:	68fb      	ldr	r3, [r7, #12]
  4060cc:	681b      	ldr	r3, [r3, #0]
  4060ce:	1e5a      	subs	r2, r3, #1
  4060d0:	68fb      	ldr	r3, [r7, #12]
  4060d2:	601a      	str	r2, [r3, #0]
}
  4060d4:	3714      	adds	r7, #20
  4060d6:	46bd      	mov	sp, r7
  4060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060dc:	4770      	bx	lr
  4060de:	bf00      	nop

004060e0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4060e0:	b480      	push	{r7}
  4060e2:	b083      	sub	sp, #12
  4060e4:	af00      	add	r7, sp, #0
  4060e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4060e8:	687b      	ldr	r3, [r7, #4]
  4060ea:	2b07      	cmp	r3, #7
  4060ec:	d825      	bhi.n	40613a <osc_get_rate+0x5a>
  4060ee:	a201      	add	r2, pc, #4	; (adr r2, 4060f4 <osc_get_rate+0x14>)
  4060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4060f4:	00406115 	.word	0x00406115
  4060f8:	0040611b 	.word	0x0040611b
  4060fc:	00406121 	.word	0x00406121
  406100:	00406127 	.word	0x00406127
  406104:	0040612b 	.word	0x0040612b
  406108:	0040612f 	.word	0x0040612f
  40610c:	00406133 	.word	0x00406133
  406110:	00406137 	.word	0x00406137
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406114:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406118:	e010      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40611e:	e00d      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406124:	e00a      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  406126:	4b08      	ldr	r3, [pc, #32]	; (406148 <osc_get_rate+0x68>)
  406128:	e008      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40612a:	4b08      	ldr	r3, [pc, #32]	; (40614c <osc_get_rate+0x6c>)
  40612c:	e006      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40612e:	4b08      	ldr	r3, [pc, #32]	; (406150 <osc_get_rate+0x70>)
  406130:	e004      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406132:	4b08      	ldr	r3, [pc, #32]	; (406154 <osc_get_rate+0x74>)
  406134:	e002      	b.n	40613c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406136:	4b07      	ldr	r3, [pc, #28]	; (406154 <osc_get_rate+0x74>)
  406138:	e000      	b.n	40613c <osc_get_rate+0x5c>
	}

	return 0;
  40613a:	2300      	movs	r3, #0
}
  40613c:	4618      	mov	r0, r3
  40613e:	370c      	adds	r7, #12
  406140:	46bd      	mov	sp, r7
  406142:	f85d 7b04 	ldr.w	r7, [sp], #4
  406146:	4770      	bx	lr
  406148:	003d0900 	.word	0x003d0900
  40614c:	007a1200 	.word	0x007a1200
  406150:	00b71b00 	.word	0x00b71b00
  406154:	00f42400 	.word	0x00f42400

00406158 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406158:	b580      	push	{r7, lr}
  40615a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40615c:	2006      	movs	r0, #6
  40615e:	4b04      	ldr	r3, [pc, #16]	; (406170 <sysclk_get_main_hz+0x18>)
  406160:	4798      	blx	r3
  406162:	4602      	mov	r2, r0
  406164:	4613      	mov	r3, r2
  406166:	011b      	lsls	r3, r3, #4
  406168:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40616a:	4618      	mov	r0, r3
  40616c:	bd80      	pop	{r7, pc}
  40616e:	bf00      	nop
  406170:	004060e1 	.word	0x004060e1

00406174 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  406174:	b580      	push	{r7, lr}
  406176:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406178:	4b02      	ldr	r3, [pc, #8]	; (406184 <sysclk_get_cpu_hz+0x10>)
  40617a:	4798      	blx	r3
  40617c:	4603      	mov	r3, r0
  40617e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  406180:	4618      	mov	r0, r3
  406182:	bd80      	pop	{r7, pc}
  406184:	00406159 	.word	0x00406159

00406188 <pxPortInitialiseStack>:
/**
 * \brief See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack(portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters)
{
  406188:	b480      	push	{r7}
  40618a:	b085      	sub	sp, #20
  40618c:	af00      	add	r7, sp, #0
  40618e:	60f8      	str	r0, [r7, #12]
  406190:	60b9      	str	r1, [r7, #8]
  406192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--;  /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  406194:	68fb      	ldr	r3, [r7, #12]
  406196:	3b04      	subs	r3, #4
  406198:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;  /* xPSR */
  40619a:	68fb      	ldr	r3, [r7, #12]
  40619c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4061a2:	68fb      	ldr	r3, [r7, #12]
  4061a4:	3b04      	subs	r3, #4
  4061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pxCode;  /* PC */
  4061a8:	68ba      	ldr	r2, [r7, #8]
  4061aa:	68fb      	ldr	r3, [r7, #12]
  4061ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4061ae:	68fb      	ldr	r3, [r7, #12]
  4061b0:	3b04      	subs	r3, #4
  4061b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;  /* LR */
  4061b4:	68fb      	ldr	r3, [r7, #12]
  4061b6:	2200      	movs	r2, #0
  4061b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;  /* R12, R3, R2 and R1. */
  4061ba:	68fb      	ldr	r3, [r7, #12]
  4061bc:	3b14      	subs	r3, #20
  4061be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pvParameters;  /* R0 */
  4061c0:	687a      	ldr	r2, [r7, #4]
  4061c2:	68fb      	ldr	r3, [r7, #12]
  4061c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;  /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  4061c6:	68fb      	ldr	r3, [r7, #12]
  4061c8:	3b20      	subs	r3, #32
  4061ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4061cc:	68fb      	ldr	r3, [r7, #12]
}
  4061ce:	4618      	mov	r0, r3
  4061d0:	3714      	adds	r7, #20
  4061d2:	46bd      	mov	sp, r7
  4061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061d8:	4770      	bx	lr
  4061da:	bf00      	nop

004061dc <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
  4061dc:	4b06      	ldr	r3, [pc, #24]	; (4061f8 <pxCurrentTCBConst2>)
  4061de:	6819      	ldr	r1, [r3, #0]
  4061e0:	6808      	ldr	r0, [r1, #0]
  4061e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4061e6:	f380 8809 	msr	PSP, r0
  4061ea:	f04f 0000 	mov.w	r0, #0
  4061ee:	f380 8811 	msr	BASEPRI, r0
  4061f2:	f04e 0e0d 	orr.w	lr, lr, #13
  4061f6:	4770      	bx	lr

004061f8 <pxCurrentTCBConst2>:
  4061f8:	20000dfc 	.word	0x20000dfc

004061fc <vPortStartFirstTask>:
/**
 * \brief Start schedule first task.
 */
void vPortStartFirstTask(void)
{
	__asm volatile (" ldr r0, =0xE000ED08   \n"  /* Use the NVIC offset register to locate the stack. */
  4061fc:	4802      	ldr	r0, [pc, #8]	; (406208 <vPortStartFirstTask+0xc>)
  4061fe:	6800      	ldr	r0, [r0, #0]
  406200:	6800      	ldr	r0, [r0, #0]
  406202:	f380 8808 	msr	MSP, r0
  406206:	df00      	svc	0
  406208:	e000ed08 	.word	0xe000ed08

0040620c <xPortStartScheduler>:

/**
 * \brief See header file for description.
 */
portBASE_TYPE xPortStartScheduler(void)
{
  40620c:	b580      	push	{r7, lr}
  40620e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
  406210:	4b0a      	ldr	r3, [pc, #40]	; (40623c <xPortStartScheduler+0x30>)
  406212:	4a0a      	ldr	r2, [pc, #40]	; (40623c <xPortStartScheduler+0x30>)
  406214:	6812      	ldr	r2, [r2, #0]
  406216:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
  40621a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
  40621c:	4b07      	ldr	r3, [pc, #28]	; (40623c <xPortStartScheduler+0x30>)
  40621e:	4a07      	ldr	r2, [pc, #28]	; (40623c <xPortStartScheduler+0x30>)
  406220:	6812      	ldr	r2, [r2, #0]
  406222:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
  406226:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
  406228:	4b05      	ldr	r3, [pc, #20]	; (406240 <xPortStartScheduler+0x34>)
  40622a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40622c:	4b05      	ldr	r3, [pc, #20]	; (406244 <xPortStartScheduler+0x38>)
  40622e:	2200      	movs	r2, #0
  406230:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
  406232:	4b05      	ldr	r3, [pc, #20]	; (406248 <xPortStartScheduler+0x3c>)
  406234:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  406236:	2300      	movs	r3, #0
}
  406238:	4618      	mov	r0, r3
  40623a:	bd80      	pop	{r7, pc}
  40623c:	e000ed20 	.word	0xe000ed20
  406240:	00406325 	.word	0x00406325
  406244:	20000040 	.word	0x20000040
  406248:	004061fd 	.word	0x004061fd

0040624c <vPortYieldFromISR>:

/**
 * \brief Yield PendSV to request a context switch.
 */
void vPortYieldFromISR(void)
{
  40624c:	b480      	push	{r7}
  40624e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  406250:	4b03      	ldr	r3, [pc, #12]	; (406260 <vPortYieldFromISR+0x14>)
  406252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  406256:	601a      	str	r2, [r3, #0]
}
  406258:	46bd      	mov	sp, r7
  40625a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40625e:	4770      	bx	lr
  406260:	e000ed04 	.word	0xe000ed04

00406264 <vPortEnterCritical>:

/**
 * \brief Enter Critical code.
 */
void vPortEnterCritical(void)
{
  406264:	b480      	push	{r7}
  406266:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  406268:	f04f 0000 	mov.w	r0, #0
  40626c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
  406270:	4b04      	ldr	r3, [pc, #16]	; (406284 <vPortEnterCritical+0x20>)
  406272:	681b      	ldr	r3, [r3, #0]
  406274:	1c5a      	adds	r2, r3, #1
  406276:	4b03      	ldr	r3, [pc, #12]	; (406284 <vPortEnterCritical+0x20>)
  406278:	601a      	str	r2, [r3, #0]
}
  40627a:	46bd      	mov	sp, r7
  40627c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406280:	4770      	bx	lr
  406282:	bf00      	nop
  406284:	20000040 	.word	0x20000040

00406288 <vPortExitCritical>:

/**
 * \brief Exit Critical code.
 */
void vPortExitCritical(void)
{
  406288:	b480      	push	{r7}
  40628a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  40628c:	4b08      	ldr	r3, [pc, #32]	; (4062b0 <vPortExitCritical+0x28>)
  40628e:	681b      	ldr	r3, [r3, #0]
  406290:	1e5a      	subs	r2, r3, #1
  406292:	4b07      	ldr	r3, [pc, #28]	; (4062b0 <vPortExitCritical+0x28>)
  406294:	601a      	str	r2, [r3, #0]
	if (uxCriticalNesting == 0) {
  406296:	4b06      	ldr	r3, [pc, #24]	; (4062b0 <vPortExitCritical+0x28>)
  406298:	681b      	ldr	r3, [r3, #0]
  40629a:	2b00      	cmp	r3, #0
  40629c:	d103      	bne.n	4062a6 <vPortExitCritical+0x1e>
		portENABLE_INTERRUPTS();
  40629e:	f04f 0000 	mov.w	r0, #0
  4062a2:	f380 8811 	msr	BASEPRI, r0
	}
}
  4062a6:	46bd      	mov	sp, r7
  4062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062ac:	4770      	bx	lr
  4062ae:	bf00      	nop
  4062b0:	20000040 	.word	0x20000040

004062b4 <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
  4062b4:	f3ef 8009 	mrs	r0, PSP
  4062b8:	4b0c      	ldr	r3, [pc, #48]	; (4062ec <pxCurrentTCBConst>)
  4062ba:	681a      	ldr	r2, [r3, #0]
  4062bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4062c0:	6010      	str	r0, [r2, #0]
  4062c2:	e92d 4008 	stmdb	sp!, {r3, lr}
  4062c6:	f04f 0000 	mov.w	r0, #0
  4062ca:	f380 8811 	msr	BASEPRI, r0
  4062ce:	f000 fe81 	bl	406fd4 <vTaskSwitchContext>
  4062d2:	f04f 0000 	mov.w	r0, #0
  4062d6:	f380 8811 	msr	BASEPRI, r0
  4062da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4062de:	6819      	ldr	r1, [r3, #0]
  4062e0:	6808      	ldr	r0, [r1, #0]
  4062e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4062e6:	f380 8809 	msr	PSP, r0
  4062ea:	4770      	bx	lr

004062ec <pxCurrentTCBConst>:
  4062ec:	20000dfc 	.word	0x20000dfc

004062f0 <xPortSysTickHandler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void xPortSysTickHandler(void)
{
  4062f0:	b580      	push	{r7, lr}
  4062f2:	b082      	sub	sp, #8
  4062f4:	af00      	add	r7, sp, #0
	unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  4062f6:	4b09      	ldr	r3, [pc, #36]	; (40631c <xPortSysTickHandler+0x2c>)
  4062f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4062fc:	601a      	str	r2, [r3, #0]
#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
  4062fe:	2300      	movs	r3, #0
  406300:	607b      	str	r3, [r7, #4]
  406302:	f04f 0000 	mov.w	r0, #0
  406306:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
  40630a:	4b05      	ldr	r3, [pc, #20]	; (406320 <xPortSysTickHandler+0x30>)
  40630c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulDummy);
  40630e:	f04f 0000 	mov.w	r0, #0
  406312:	f380 8811 	msr	BASEPRI, r0
}
  406316:	3708      	adds	r7, #8
  406318:	46bd      	mov	sp, r7
  40631a:	bd80      	pop	{r7, pc}
  40631c:	e000ed04 	.word	0xe000ed04
  406320:	00406ea1 	.word	0x00406ea1

00406324 <prvSetupTimerInterrupt>:
/**
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
  406324:	b598      	push	{r3, r4, r7, lr}
  406326:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  406328:	4c06      	ldr	r4, [pc, #24]	; (406344 <prvSetupTimerInterrupt+0x20>)
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40632a:	4b07      	ldr	r3, [pc, #28]	; (406348 <prvSetupTimerInterrupt+0x24>)
  40632c:	4798      	blx	r3
  40632e:	4602      	mov	r2, r0
  406330:	4b06      	ldr	r3, [pc, #24]	; (40634c <prvSetupTimerInterrupt+0x28>)
  406332:	fba3 1302 	umull	r1, r3, r3, r2
  406336:	099b      	lsrs	r3, r3, #6
  406338:	3b01      	subs	r3, #1
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  40633a:	6023      	str	r3, [r4, #0]
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
	*(portNVIC_SYSTICK_CTRL) =
  40633c:	4b04      	ldr	r3, [pc, #16]	; (406350 <prvSetupTimerInterrupt+0x2c>)
  40633e:	2207      	movs	r2, #7
  406340:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT |
			portNVIC_SYSTICK_ENABLE;
}
  406342:	bd98      	pop	{r3, r4, r7, pc}
  406344:	e000e014 	.word	0xe000e014
  406348:	00406175 	.word	0x00406175
  40634c:	10624dd3 	.word	0x10624dd3
  406350:	e000e010 	.word	0xe000e010

00406354 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  406354:	b580      	push	{r7, lr}
  406356:	b084      	sub	sp, #16
  406358:	af00      	add	r7, sp, #0
  40635a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
  40635c:	4b06      	ldr	r3, [pc, #24]	; (406378 <pvPortMalloc+0x24>)
  40635e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  406360:	6878      	ldr	r0, [r7, #4]
  406362:	4b06      	ldr	r3, [pc, #24]	; (40637c <pvPortMalloc+0x28>)
  406364:	4798      	blx	r3
  406366:	4603      	mov	r3, r0
  406368:	60fb      	str	r3, [r7, #12]
	}
	xTaskResumeAll();
  40636a:	4b05      	ldr	r3, [pc, #20]	; (406380 <pvPortMalloc+0x2c>)
  40636c:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  40636e:	68fb      	ldr	r3, [r7, #12]
}
  406370:	4618      	mov	r0, r3
  406372:	3710      	adds	r7, #16
  406374:	46bd      	mov	sp, r7
  406376:	bd80      	pop	{r7, pc}
  406378:	00406c6d 	.word	0x00406c6d
  40637c:	0040c949 	.word	0x0040c949
  406380:	00406c89 	.word	0x00406c89

00406384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  406384:	b580      	push	{r7, lr}
  406386:	b082      	sub	sp, #8
  406388:	af00      	add	r7, sp, #0
  40638a:	6078      	str	r0, [r7, #4]
	if( pv )
  40638c:	687b      	ldr	r3, [r7, #4]
  40638e:	2b00      	cmp	r3, #0
  406390:	d006      	beq.n	4063a0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
  406392:	4b05      	ldr	r3, [pc, #20]	; (4063a8 <vPortFree+0x24>)
  406394:	4798      	blx	r3
		{
			free( pv );
  406396:	6878      	ldr	r0, [r7, #4]
  406398:	4b04      	ldr	r3, [pc, #16]	; (4063ac <vPortFree+0x28>)
  40639a:	4798      	blx	r3
		}
		xTaskResumeAll();
  40639c:	4b04      	ldr	r3, [pc, #16]	; (4063b0 <vPortFree+0x2c>)
  40639e:	4798      	blx	r3
	}
}
  4063a0:	3708      	adds	r7, #8
  4063a2:	46bd      	mov	sp, r7
  4063a4:	bd80      	pop	{r7, pc}
  4063a6:	bf00      	nop
  4063a8:	00406c6d 	.word	0x00406c6d
  4063ac:	0040c959 	.word	0x0040c959
  4063b0:	00406c89 	.word	0x00406c89

004063b4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
  4063b4:	b580      	push	{r7, lr}
  4063b6:	b086      	sub	sp, #24
  4063b8:	af00      	add	r7, sp, #0
  4063ba:	6078      	str	r0, [r7, #4]
  4063bc:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4063be:	2300      	movs	r3, #0
  4063c0:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4063c2:	687b      	ldr	r3, [r7, #4]
  4063c4:	2b00      	cmp	r3, #0
  4063c6:	d04e      	beq.n	406466 <xQueueCreate+0xb2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4063c8:	204c      	movs	r0, #76	; 0x4c
  4063ca:	4b29      	ldr	r3, [pc, #164]	; (406470 <xQueueCreate+0xbc>)
  4063cc:	4798      	blx	r3
  4063ce:	6138      	str	r0, [r7, #16]
		if( pxNewQueue != NULL )
  4063d0:	693b      	ldr	r3, [r7, #16]
  4063d2:	2b00      	cmp	r3, #0
  4063d4:	d047      	beq.n	406466 <xQueueCreate+0xb2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4063d6:	687b      	ldr	r3, [r7, #4]
  4063d8:	683a      	ldr	r2, [r7, #0]
  4063da:	fb02 f303 	mul.w	r3, r2, r3
  4063de:	3301      	adds	r3, #1
  4063e0:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4063e2:	68f8      	ldr	r0, [r7, #12]
  4063e4:	4b22      	ldr	r3, [pc, #136]	; (406470 <xQueueCreate+0xbc>)
  4063e6:	4798      	blx	r3
  4063e8:	4602      	mov	r2, r0
  4063ea:	693b      	ldr	r3, [r7, #16]
  4063ec:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  4063ee:	693b      	ldr	r3, [r7, #16]
  4063f0:	681b      	ldr	r3, [r3, #0]
  4063f2:	2b00      	cmp	r3, #0
  4063f4:	d034      	beq.n	406460 <xQueueCreate+0xac>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
  4063f6:	693b      	ldr	r3, [r7, #16]
  4063f8:	681a      	ldr	r2, [r3, #0]
  4063fa:	687b      	ldr	r3, [r7, #4]
  4063fc:	6839      	ldr	r1, [r7, #0]
  4063fe:	fb01 f303 	mul.w	r3, r1, r3
  406402:	441a      	add	r2, r3
  406404:	693b      	ldr	r3, [r7, #16]
  406406:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  406408:	693b      	ldr	r3, [r7, #16]
  40640a:	2200      	movs	r2, #0
  40640c:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
  40640e:	693b      	ldr	r3, [r7, #16]
  406410:	681a      	ldr	r2, [r3, #0]
  406412:	693b      	ldr	r3, [r7, #16]
  406414:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
  406416:	693b      	ldr	r3, [r7, #16]
  406418:	681a      	ldr	r2, [r3, #0]
  40641a:	687b      	ldr	r3, [r7, #4]
  40641c:	3b01      	subs	r3, #1
  40641e:	6839      	ldr	r1, [r7, #0]
  406420:	fb01 f303 	mul.w	r3, r1, r3
  406424:	441a      	add	r2, r3
  406426:	693b      	ldr	r3, [r7, #16]
  406428:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
  40642a:	693b      	ldr	r3, [r7, #16]
  40642c:	687a      	ldr	r2, [r7, #4]
  40642e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  406430:	693b      	ldr	r3, [r7, #16]
  406432:	683a      	ldr	r2, [r7, #0]
  406434:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
  406436:	693b      	ldr	r3, [r7, #16]
  406438:	f04f 32ff 	mov.w	r2, #4294967295
  40643c:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
  40643e:	693b      	ldr	r3, [r7, #16]
  406440:	f04f 32ff 	mov.w	r2, #4294967295
  406444:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  406446:	693b      	ldr	r3, [r7, #16]
  406448:	3310      	adds	r3, #16
  40644a:	4618      	mov	r0, r3
  40644c:	4b09      	ldr	r3, [pc, #36]	; (406474 <xQueueCreate+0xc0>)
  40644e:	4798      	blx	r3
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  406450:	693b      	ldr	r3, [r7, #16]
  406452:	3324      	adds	r3, #36	; 0x24
  406454:	4618      	mov	r0, r3
  406456:	4b07      	ldr	r3, [pc, #28]	; (406474 <xQueueCreate+0xc0>)
  406458:	4798      	blx	r3

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  40645a:	693b      	ldr	r3, [r7, #16]
  40645c:	617b      	str	r3, [r7, #20]
  40645e:	e002      	b.n	406466 <xQueueCreate+0xb2>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
  406460:	6938      	ldr	r0, [r7, #16]
  406462:	4b05      	ldr	r3, [pc, #20]	; (406478 <xQueueCreate+0xc4>)
  406464:	4798      	blx	r3
		}
	}

	configASSERT( xReturn );

	return xReturn;
  406466:	697b      	ldr	r3, [r7, #20]
}
  406468:	4618      	mov	r0, r3
  40646a:	3718      	adds	r7, #24
  40646c:	46bd      	mov	sp, r7
  40646e:	bd80      	pop	{r7, pc}
  406470:	00406355 	.word	0x00406355
  406474:	00405f79 	.word	0x00405f79
  406478:	00406385 	.word	0x00406385

0040647c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
  40647c:	b590      	push	{r4, r7, lr}
  40647e:	b083      	sub	sp, #12
  406480:	af00      	add	r7, sp, #0
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  406482:	204c      	movs	r0, #76	; 0x4c
  406484:	4b1b      	ldr	r3, [pc, #108]	; (4064f4 <xQueueCreateMutex+0x78>)
  406486:	4798      	blx	r3
  406488:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
  40648a:	687b      	ldr	r3, [r7, #4]
  40648c:	2b00      	cmp	r3, #0
  40648e:	d02c      	beq.n	4064ea <xQueueCreateMutex+0x6e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  406490:	687b      	ldr	r3, [r7, #4]
  406492:	2200      	movs	r2, #0
  406494:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  406496:	687b      	ldr	r3, [r7, #4]
  406498:	2200      	movs	r2, #0
  40649a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  40649c:	687b      	ldr	r3, [r7, #4]
  40649e:	2200      	movs	r2, #0
  4064a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
  4064a2:	687b      	ldr	r3, [r7, #4]
  4064a4:	2200      	movs	r2, #0
  4064a6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  4064a8:	687b      	ldr	r3, [r7, #4]
  4064aa:	2200      	movs	r2, #0
  4064ac:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
  4064ae:	687b      	ldr	r3, [r7, #4]
  4064b0:	2201      	movs	r2, #1
  4064b2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
  4064b4:	687b      	ldr	r3, [r7, #4]
  4064b6:	2200      	movs	r2, #0
  4064b8:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  4064ba:	687b      	ldr	r3, [r7, #4]
  4064bc:	f04f 32ff 	mov.w	r2, #4294967295
  4064c0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  4064c2:	687b      	ldr	r3, [r7, #4]
  4064c4:	f04f 32ff 	mov.w	r2, #4294967295
  4064c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  4064ca:	687b      	ldr	r3, [r7, #4]
  4064cc:	3310      	adds	r3, #16
  4064ce:	4618      	mov	r0, r3
  4064d0:	4b09      	ldr	r3, [pc, #36]	; (4064f8 <xQueueCreateMutex+0x7c>)
  4064d2:	4798      	blx	r3
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	3324      	adds	r3, #36	; 0x24
  4064d8:	4618      	mov	r0, r3
  4064da:	4b07      	ldr	r3, [pc, #28]	; (4064f8 <xQueueCreateMutex+0x7c>)
  4064dc:	4798      	blx	r3

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
  4064de:	6878      	ldr	r0, [r7, #4]
  4064e0:	2100      	movs	r1, #0
  4064e2:	2200      	movs	r2, #0
  4064e4:	2300      	movs	r3, #0
  4064e6:	4c05      	ldr	r4, [pc, #20]	; (4064fc <xQueueCreateMutex+0x80>)
  4064e8:	47a0      	blx	r4
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
  4064ea:	687b      	ldr	r3, [r7, #4]
	}
  4064ec:	4618      	mov	r0, r3
  4064ee:	370c      	adds	r7, #12
  4064f0:	46bd      	mov	sp, r7
  4064f2:	bd90      	pop	{r4, r7, pc}
  4064f4:	00406355 	.word	0x00406355
  4064f8:	00405f79 	.word	0x00405f79
  4064fc:	00406501 	.word	0x00406501

00406500 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  406500:	b580      	push	{r7, lr}
  406502:	b088      	sub	sp, #32
  406504:	af00      	add	r7, sp, #0
  406506:	60f8      	str	r0, [r7, #12]
  406508:	60b9      	str	r1, [r7, #8]
  40650a:	607a      	str	r2, [r7, #4]
  40650c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40650e:	2300      	movs	r3, #0
  406510:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  406512:	4b3e      	ldr	r3, [pc, #248]	; (40660c <xQueueGenericSend+0x10c>)
  406514:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  406516:	68fb      	ldr	r3, [r7, #12]
  406518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40651a:	68fb      	ldr	r3, [r7, #12]
  40651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40651e:	429a      	cmp	r2, r3
  406520:	d216      	bcs.n	406550 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  406522:	68f8      	ldr	r0, [r7, #12]
  406524:	68b9      	ldr	r1, [r7, #8]
  406526:	683a      	ldr	r2, [r7, #0]
  406528:	4b39      	ldr	r3, [pc, #228]	; (406610 <xQueueGenericSend+0x110>)
  40652a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40652c:	68fb      	ldr	r3, [r7, #12]
  40652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406530:	2b00      	cmp	r3, #0
  406532:	d009      	beq.n	406548 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  406534:	68fb      	ldr	r3, [r7, #12]
  406536:	3324      	adds	r3, #36	; 0x24
  406538:	4618      	mov	r0, r3
  40653a:	4b36      	ldr	r3, [pc, #216]	; (406614 <xQueueGenericSend+0x114>)
  40653c:	4798      	blx	r3
  40653e:	4603      	mov	r3, r0
  406540:	2b01      	cmp	r3, #1
  406542:	d101      	bne.n	406548 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  406544:	4b34      	ldr	r3, [pc, #208]	; (406618 <xQueueGenericSend+0x118>)
  406546:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  406548:	4b34      	ldr	r3, [pc, #208]	; (40661c <xQueueGenericSend+0x11c>)
  40654a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  40654c:	2301      	movs	r3, #1
  40654e:	e059      	b.n	406604 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  406550:	687b      	ldr	r3, [r7, #4]
  406552:	2b00      	cmp	r3, #0
  406554:	d103      	bne.n	40655e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  406556:	4b31      	ldr	r3, [pc, #196]	; (40661c <xQueueGenericSend+0x11c>)
  406558:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  40655a:	2300      	movs	r3, #0
  40655c:	e052      	b.n	406604 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
  40655e:	69fb      	ldr	r3, [r7, #28]
  406560:	2b00      	cmp	r3, #0
  406562:	d106      	bne.n	406572 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  406564:	f107 0314 	add.w	r3, r7, #20
  406568:	4618      	mov	r0, r3
  40656a:	4b2d      	ldr	r3, [pc, #180]	; (406620 <xQueueGenericSend+0x120>)
  40656c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40656e:	2301      	movs	r3, #1
  406570:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  406572:	4b2a      	ldr	r3, [pc, #168]	; (40661c <xQueueGenericSend+0x11c>)
  406574:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  406576:	4b2b      	ldr	r3, [pc, #172]	; (406624 <xQueueGenericSend+0x124>)
  406578:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40657a:	4b24      	ldr	r3, [pc, #144]	; (40660c <xQueueGenericSend+0x10c>)
  40657c:	4798      	blx	r3
  40657e:	68fb      	ldr	r3, [r7, #12]
  406580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406582:	f1b3 3fff 	cmp.w	r3, #4294967295
  406586:	d102      	bne.n	40658e <xQueueGenericSend+0x8e>
  406588:	68fb      	ldr	r3, [r7, #12]
  40658a:	2200      	movs	r2, #0
  40658c:	645a      	str	r2, [r3, #68]	; 0x44
  40658e:	68fb      	ldr	r3, [r7, #12]
  406590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406592:	f1b3 3fff 	cmp.w	r3, #4294967295
  406596:	d102      	bne.n	40659e <xQueueGenericSend+0x9e>
  406598:	68fb      	ldr	r3, [r7, #12]
  40659a:	2200      	movs	r2, #0
  40659c:	649a      	str	r2, [r3, #72]	; 0x48
  40659e:	4b1f      	ldr	r3, [pc, #124]	; (40661c <xQueueGenericSend+0x11c>)
  4065a0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4065a2:	f107 0214 	add.w	r2, r7, #20
  4065a6:	1d3b      	adds	r3, r7, #4
  4065a8:	4610      	mov	r0, r2
  4065aa:	4619      	mov	r1, r3
  4065ac:	4b1e      	ldr	r3, [pc, #120]	; (406628 <xQueueGenericSend+0x128>)
  4065ae:	4798      	blx	r3
  4065b0:	4603      	mov	r3, r0
  4065b2:	2b00      	cmp	r3, #0
  4065b4:	d11e      	bne.n	4065f4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) )
  4065b6:	68f8      	ldr	r0, [r7, #12]
  4065b8:	4b1c      	ldr	r3, [pc, #112]	; (40662c <xQueueGenericSend+0x12c>)
  4065ba:	4798      	blx	r3
  4065bc:	4603      	mov	r3, r0
  4065be:	2b00      	cmp	r3, #0
  4065c0:	d012      	beq.n	4065e8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4065c2:	68fb      	ldr	r3, [r7, #12]
  4065c4:	f103 0210 	add.w	r2, r3, #16
  4065c8:	687b      	ldr	r3, [r7, #4]
  4065ca:	4610      	mov	r0, r2
  4065cc:	4619      	mov	r1, r3
  4065ce:	4b18      	ldr	r3, [pc, #96]	; (406630 <xQueueGenericSend+0x130>)
  4065d0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4065d2:	68f8      	ldr	r0, [r7, #12]
  4065d4:	4b17      	ldr	r3, [pc, #92]	; (406634 <xQueueGenericSend+0x134>)
  4065d6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
  4065d8:	4b17      	ldr	r3, [pc, #92]	; (406638 <xQueueGenericSend+0x138>)
  4065da:	4798      	blx	r3
  4065dc:	4603      	mov	r3, r0
  4065de:	2b00      	cmp	r3, #0
  4065e0:	d10f      	bne.n	406602 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
  4065e2:	4b0d      	ldr	r3, [pc, #52]	; (406618 <xQueueGenericSend+0x118>)
  4065e4:	4798      	blx	r3
  4065e6:	e00c      	b.n	406602 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4065e8:	68f8      	ldr	r0, [r7, #12]
  4065ea:	4b12      	ldr	r3, [pc, #72]	; (406634 <xQueueGenericSend+0x134>)
  4065ec:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4065ee:	4b12      	ldr	r3, [pc, #72]	; (406638 <xQueueGenericSend+0x138>)
  4065f0:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  4065f2:	e78e      	b.n	406512 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  4065f4:	68f8      	ldr	r0, [r7, #12]
  4065f6:	4b0f      	ldr	r3, [pc, #60]	; (406634 <xQueueGenericSend+0x134>)
  4065f8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4065fa:	4b0f      	ldr	r3, [pc, #60]	; (406638 <xQueueGenericSend+0x138>)
  4065fc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4065fe:	2300      	movs	r3, #0
  406600:	e000      	b.n	406604 <xQueueGenericSend+0x104>
		}
	}
  406602:	e786      	b.n	406512 <xQueueGenericSend+0x12>
}
  406604:	4618      	mov	r0, r3
  406606:	3720      	adds	r7, #32
  406608:	46bd      	mov	sp, r7
  40660a:	bd80      	pop	{r7, pc}
  40660c:	00406265 	.word	0x00406265
  406610:	00406809 	.word	0x00406809
  406614:	0040714d 	.word	0x0040714d
  406618:	0040624d 	.word	0x0040624d
  40661c:	00406289 	.word	0x00406289
  406620:	004071f5 	.word	0x004071f5
  406624:	00406c6d 	.word	0x00406c6d
  406628:	00407221 	.word	0x00407221
  40662c:	004069f5 	.word	0x004069f5
  406630:	004070dd 	.word	0x004070dd
  406634:	00406919 	.word	0x00406919
  406638:	00406c89 	.word	0x00406c89

0040663c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40663c:	b580      	push	{r7, lr}
  40663e:	b088      	sub	sp, #32
  406640:	af00      	add	r7, sp, #0
  406642:	60f8      	str	r0, [r7, #12]
  406644:	60b9      	str	r1, [r7, #8]
  406646:	607a      	str	r2, [r7, #4]
  406648:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40664a:	2300      	movs	r3, #0
  40664c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40664e:	4b56      	ldr	r3, [pc, #344]	; (4067a8 <xQueueGenericReceive+0x16c>)
  406650:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  406652:	68fb      	ldr	r3, [r7, #12]
  406654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406656:	2b00      	cmp	r3, #0
  406658:	d03b      	beq.n	4066d2 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40665a:	68fb      	ldr	r3, [r7, #12]
  40665c:	68db      	ldr	r3, [r3, #12]
  40665e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  406660:	68f8      	ldr	r0, [r7, #12]
  406662:	68b9      	ldr	r1, [r7, #8]
  406664:	4b51      	ldr	r3, [pc, #324]	; (4067ac <xQueueGenericReceive+0x170>)
  406666:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  406668:	683b      	ldr	r3, [r7, #0]
  40666a:	2b00      	cmp	r3, #0
  40666c:	d11c      	bne.n	4066a8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40666e:	68fb      	ldr	r3, [r7, #12]
  406670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406672:	1e5a      	subs	r2, r3, #1
  406674:	68fb      	ldr	r3, [r7, #12]
  406676:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406678:	68fb      	ldr	r3, [r7, #12]
  40667a:	681b      	ldr	r3, [r3, #0]
  40667c:	2b00      	cmp	r3, #0
  40667e:	d104      	bne.n	40668a <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  406680:	4b4b      	ldr	r3, [pc, #300]	; (4067b0 <xQueueGenericReceive+0x174>)
  406682:	4798      	blx	r3
  406684:	4602      	mov	r2, r0
  406686:	68fb      	ldr	r3, [r7, #12]
  406688:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40668a:	68fb      	ldr	r3, [r7, #12]
  40668c:	691b      	ldr	r3, [r3, #16]
  40668e:	2b00      	cmp	r3, #0
  406690:	d01b      	beq.n	4066ca <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  406692:	68fb      	ldr	r3, [r7, #12]
  406694:	3310      	adds	r3, #16
  406696:	4618      	mov	r0, r3
  406698:	4b46      	ldr	r3, [pc, #280]	; (4067b4 <xQueueGenericReceive+0x178>)
  40669a:	4798      	blx	r3
  40669c:	4603      	mov	r3, r0
  40669e:	2b01      	cmp	r3, #1
  4066a0:	d113      	bne.n	4066ca <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
  4066a2:	4b45      	ldr	r3, [pc, #276]	; (4067b8 <xQueueGenericReceive+0x17c>)
  4066a4:	4798      	blx	r3
  4066a6:	e010      	b.n	4066ca <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  4066a8:	68fb      	ldr	r3, [r7, #12]
  4066aa:	69ba      	ldr	r2, [r7, #24]
  4066ac:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4066ae:	68fb      	ldr	r3, [r7, #12]
  4066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4066b2:	2b00      	cmp	r3, #0
  4066b4:	d009      	beq.n	4066ca <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4066b6:	68fb      	ldr	r3, [r7, #12]
  4066b8:	3324      	adds	r3, #36	; 0x24
  4066ba:	4618      	mov	r0, r3
  4066bc:	4b3d      	ldr	r3, [pc, #244]	; (4067b4 <xQueueGenericReceive+0x178>)
  4066be:	4798      	blx	r3
  4066c0:	4603      	mov	r3, r0
  4066c2:	2b00      	cmp	r3, #0
  4066c4:	d001      	beq.n	4066ca <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  4066c6:	4b3c      	ldr	r3, [pc, #240]	; (4067b8 <xQueueGenericReceive+0x17c>)
  4066c8:	4798      	blx	r3
						}
					}

				}

				taskEXIT_CRITICAL();
  4066ca:	4b3c      	ldr	r3, [pc, #240]	; (4067bc <xQueueGenericReceive+0x180>)
  4066cc:	4798      	blx	r3
				return pdPASS;
  4066ce:	2301      	movs	r3, #1
  4066d0:	e066      	b.n	4067a0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4066d2:	687b      	ldr	r3, [r7, #4]
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	d103      	bne.n	4066e0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4066d8:	4b38      	ldr	r3, [pc, #224]	; (4067bc <xQueueGenericReceive+0x180>)
  4066da:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4066dc:	2300      	movs	r3, #0
  4066de:	e05f      	b.n	4067a0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
  4066e0:	69fb      	ldr	r3, [r7, #28]
  4066e2:	2b00      	cmp	r3, #0
  4066e4:	d106      	bne.n	4066f4 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4066e6:	f107 0310 	add.w	r3, r7, #16
  4066ea:	4618      	mov	r0, r3
  4066ec:	4b34      	ldr	r3, [pc, #208]	; (4067c0 <xQueueGenericReceive+0x184>)
  4066ee:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4066f0:	2301      	movs	r3, #1
  4066f2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  4066f4:	4b31      	ldr	r3, [pc, #196]	; (4067bc <xQueueGenericReceive+0x180>)
  4066f6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4066f8:	4b32      	ldr	r3, [pc, #200]	; (4067c4 <xQueueGenericReceive+0x188>)
  4066fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4066fc:	4b2a      	ldr	r3, [pc, #168]	; (4067a8 <xQueueGenericReceive+0x16c>)
  4066fe:	4798      	blx	r3
  406700:	68fb      	ldr	r3, [r7, #12]
  406702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406704:	f1b3 3fff 	cmp.w	r3, #4294967295
  406708:	d102      	bne.n	406710 <xQueueGenericReceive+0xd4>
  40670a:	68fb      	ldr	r3, [r7, #12]
  40670c:	2200      	movs	r2, #0
  40670e:	645a      	str	r2, [r3, #68]	; 0x44
  406710:	68fb      	ldr	r3, [r7, #12]
  406712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406714:	f1b3 3fff 	cmp.w	r3, #4294967295
  406718:	d102      	bne.n	406720 <xQueueGenericReceive+0xe4>
  40671a:	68fb      	ldr	r3, [r7, #12]
  40671c:	2200      	movs	r2, #0
  40671e:	649a      	str	r2, [r3, #72]	; 0x48
  406720:	4b26      	ldr	r3, [pc, #152]	; (4067bc <xQueueGenericReceive+0x180>)
  406722:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  406724:	f107 0210 	add.w	r2, r7, #16
  406728:	1d3b      	adds	r3, r7, #4
  40672a:	4610      	mov	r0, r2
  40672c:	4619      	mov	r1, r3
  40672e:	4b26      	ldr	r3, [pc, #152]	; (4067c8 <xQueueGenericReceive+0x18c>)
  406730:	4798      	blx	r3
  406732:	4603      	mov	r3, r0
  406734:	2b00      	cmp	r3, #0
  406736:	d12b      	bne.n	406790 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) )
  406738:	68f8      	ldr	r0, [r7, #12]
  40673a:	4b24      	ldr	r3, [pc, #144]	; (4067cc <xQueueGenericReceive+0x190>)
  40673c:	4798      	blx	r3
  40673e:	4603      	mov	r3, r0
  406740:	2b00      	cmp	r3, #0
  406742:	d01f      	beq.n	406784 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406744:	68fb      	ldr	r3, [r7, #12]
  406746:	681b      	ldr	r3, [r3, #0]
  406748:	2b00      	cmp	r3, #0
  40674a:	d108      	bne.n	40675e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
  40674c:	4b16      	ldr	r3, [pc, #88]	; (4067a8 <xQueueGenericReceive+0x16c>)
  40674e:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  406750:	68fb      	ldr	r3, [r7, #12]
  406752:	685b      	ldr	r3, [r3, #4]
  406754:	4618      	mov	r0, r3
  406756:	4b1e      	ldr	r3, [pc, #120]	; (4067d0 <xQueueGenericReceive+0x194>)
  406758:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  40675a:	4b18      	ldr	r3, [pc, #96]	; (4067bc <xQueueGenericReceive+0x180>)
  40675c:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40675e:	68fb      	ldr	r3, [r7, #12]
  406760:	f103 0224 	add.w	r2, r3, #36	; 0x24
  406764:	687b      	ldr	r3, [r7, #4]
  406766:	4610      	mov	r0, r2
  406768:	4619      	mov	r1, r3
  40676a:	4b1a      	ldr	r3, [pc, #104]	; (4067d4 <xQueueGenericReceive+0x198>)
  40676c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40676e:	68f8      	ldr	r0, [r7, #12]
  406770:	4b19      	ldr	r3, [pc, #100]	; (4067d8 <xQueueGenericReceive+0x19c>)
  406772:	4798      	blx	r3
				if( !xTaskResumeAll() )
  406774:	4b19      	ldr	r3, [pc, #100]	; (4067dc <xQueueGenericReceive+0x1a0>)
  406776:	4798      	blx	r3
  406778:	4603      	mov	r3, r0
  40677a:	2b00      	cmp	r3, #0
  40677c:	d10f      	bne.n	40679e <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
  40677e:	4b0e      	ldr	r3, [pc, #56]	; (4067b8 <xQueueGenericReceive+0x17c>)
  406780:	4798      	blx	r3
  406782:	e00c      	b.n	40679e <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  406784:	68f8      	ldr	r0, [r7, #12]
  406786:	4b14      	ldr	r3, [pc, #80]	; (4067d8 <xQueueGenericReceive+0x19c>)
  406788:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40678a:	4b14      	ldr	r3, [pc, #80]	; (4067dc <xQueueGenericReceive+0x1a0>)
  40678c:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  40678e:	e75e      	b.n	40664e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  406790:	68f8      	ldr	r0, [r7, #12]
  406792:	4b11      	ldr	r3, [pc, #68]	; (4067d8 <xQueueGenericReceive+0x19c>)
  406794:	4798      	blx	r3
			( void ) xTaskResumeAll();
  406796:	4b11      	ldr	r3, [pc, #68]	; (4067dc <xQueueGenericReceive+0x1a0>)
  406798:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40679a:	2300      	movs	r3, #0
  40679c:	e000      	b.n	4067a0 <xQueueGenericReceive+0x164>
		}
	}
  40679e:	e756      	b.n	40664e <xQueueGenericReceive+0x12>
}
  4067a0:	4618      	mov	r0, r3
  4067a2:	3720      	adds	r7, #32
  4067a4:	46bd      	mov	sp, r7
  4067a6:	bd80      	pop	{r7, pc}
  4067a8:	00406265 	.word	0x00406265
  4067ac:	004068c9 	.word	0x004068c9
  4067b0:	0040766d 	.word	0x0040766d
  4067b4:	0040714d 	.word	0x0040714d
  4067b8:	0040624d 	.word	0x0040624d
  4067bc:	00406289 	.word	0x00406289
  4067c0:	004071f5 	.word	0x004071f5
  4067c4:	00406c6d 	.word	0x00406c6d
  4067c8:	00407221 	.word	0x00407221
  4067cc:	004069c1 	.word	0x004069c1
  4067d0:	0040768d 	.word	0x0040768d
  4067d4:	004070dd 	.word	0x004070dd
  4067d8:	00406919 	.word	0x00406919
  4067dc:	00406c89 	.word	0x00406c89

004067e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
  4067e0:	b580      	push	{r7, lr}
  4067e2:	b084      	sub	sp, #16
  4067e4:	af00      	add	r7, sp, #0
  4067e6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
  4067e8:	4b05      	ldr	r3, [pc, #20]	; (406800 <uxQueueMessagesWaiting+0x20>)
  4067ea:	4798      	blx	r3
		uxReturn = pxQueue->uxMessagesWaiting;
  4067ec:	687b      	ldr	r3, [r7, #4]
  4067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4067f0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4067f2:	4b04      	ldr	r3, [pc, #16]	; (406804 <uxQueueMessagesWaiting+0x24>)
  4067f4:	4798      	blx	r3

	return uxReturn;
  4067f6:	68fb      	ldr	r3, [r7, #12]
}
  4067f8:	4618      	mov	r0, r3
  4067fa:	3710      	adds	r7, #16
  4067fc:	46bd      	mov	sp, r7
  4067fe:	bd80      	pop	{r7, pc}
  406800:	00406265 	.word	0x00406265
  406804:	00406289 	.word	0x00406289

00406808 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  406808:	b580      	push	{r7, lr}
  40680a:	b084      	sub	sp, #16
  40680c:	af00      	add	r7, sp, #0
  40680e:	60f8      	str	r0, [r7, #12]
  406810:	60b9      	str	r1, [r7, #8]
  406812:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  406814:	68fb      	ldr	r3, [r7, #12]
  406816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406818:	2b00      	cmp	r3, #0
  40681a:	d10c      	bne.n	406836 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40681c:	68fb      	ldr	r3, [r7, #12]
  40681e:	681b      	ldr	r3, [r3, #0]
  406820:	2b00      	cmp	r3, #0
  406822:	d145      	bne.n	4068b0 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  406824:	68fb      	ldr	r3, [r7, #12]
  406826:	685b      	ldr	r3, [r3, #4]
  406828:	4618      	mov	r0, r3
  40682a:	4b25      	ldr	r3, [pc, #148]	; (4068c0 <prvCopyDataToQueue+0xb8>)
  40682c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40682e:	68fb      	ldr	r3, [r7, #12]
  406830:	2200      	movs	r2, #0
  406832:	605a      	str	r2, [r3, #4]
  406834:	e03c      	b.n	4068b0 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  406836:	687b      	ldr	r3, [r7, #4]
  406838:	2b00      	cmp	r3, #0
  40683a:	d11a      	bne.n	406872 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40683c:	68fb      	ldr	r3, [r7, #12]
  40683e:	689a      	ldr	r2, [r3, #8]
  406840:	68fb      	ldr	r3, [r7, #12]
  406842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406844:	4610      	mov	r0, r2
  406846:	68b9      	ldr	r1, [r7, #8]
  406848:	461a      	mov	r2, r3
  40684a:	4b1e      	ldr	r3, [pc, #120]	; (4068c4 <prvCopyDataToQueue+0xbc>)
  40684c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40684e:	68fb      	ldr	r3, [r7, #12]
  406850:	689a      	ldr	r2, [r3, #8]
  406852:	68fb      	ldr	r3, [r7, #12]
  406854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406856:	441a      	add	r2, r3
  406858:	68fb      	ldr	r3, [r7, #12]
  40685a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40685c:	68fb      	ldr	r3, [r7, #12]
  40685e:	689a      	ldr	r2, [r3, #8]
  406860:	68fb      	ldr	r3, [r7, #12]
  406862:	685b      	ldr	r3, [r3, #4]
  406864:	429a      	cmp	r2, r3
  406866:	d323      	bcc.n	4068b0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  406868:	68fb      	ldr	r3, [r7, #12]
  40686a:	681a      	ldr	r2, [r3, #0]
  40686c:	68fb      	ldr	r3, [r7, #12]
  40686e:	609a      	str	r2, [r3, #8]
  406870:	e01e      	b.n	4068b0 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  406872:	68fb      	ldr	r3, [r7, #12]
  406874:	68da      	ldr	r2, [r3, #12]
  406876:	68fb      	ldr	r3, [r7, #12]
  406878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40687a:	4610      	mov	r0, r2
  40687c:	68b9      	ldr	r1, [r7, #8]
  40687e:	461a      	mov	r2, r3
  406880:	4b10      	ldr	r3, [pc, #64]	; (4068c4 <prvCopyDataToQueue+0xbc>)
  406882:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  406884:	68fb      	ldr	r3, [r7, #12]
  406886:	68da      	ldr	r2, [r3, #12]
  406888:	68fb      	ldr	r3, [r7, #12]
  40688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40688c:	425b      	negs	r3, r3
  40688e:	441a      	add	r2, r3
  406890:	68fb      	ldr	r3, [r7, #12]
  406892:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  406894:	68fb      	ldr	r3, [r7, #12]
  406896:	68da      	ldr	r2, [r3, #12]
  406898:	68fb      	ldr	r3, [r7, #12]
  40689a:	681b      	ldr	r3, [r3, #0]
  40689c:	429a      	cmp	r2, r3
  40689e:	d207      	bcs.n	4068b0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4068a0:	68fb      	ldr	r3, [r7, #12]
  4068a2:	685a      	ldr	r2, [r3, #4]
  4068a4:	68fb      	ldr	r3, [r7, #12]
  4068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4068a8:	425b      	negs	r3, r3
  4068aa:	441a      	add	r2, r3
  4068ac:	68fb      	ldr	r3, [r7, #12]
  4068ae:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4068b0:	68fb      	ldr	r3, [r7, #12]
  4068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4068b4:	1c5a      	adds	r2, r3, #1
  4068b6:	68fb      	ldr	r3, [r7, #12]
  4068b8:	639a      	str	r2, [r3, #56]	; 0x38
}
  4068ba:	3710      	adds	r7, #16
  4068bc:	46bd      	mov	sp, r7
  4068be:	bd80      	pop	{r7, pc}
  4068c0:	00407739 	.word	0x00407739
  4068c4:	0040cea1 	.word	0x0040cea1

004068c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4068c8:	b580      	push	{r7, lr}
  4068ca:	b082      	sub	sp, #8
  4068cc:	af00      	add	r7, sp, #0
  4068ce:	6078      	str	r0, [r7, #4]
  4068d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4068d2:	687b      	ldr	r3, [r7, #4]
  4068d4:	681b      	ldr	r3, [r3, #0]
  4068d6:	2b00      	cmp	r3, #0
  4068d8:	d019      	beq.n	40690e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4068da:	687b      	ldr	r3, [r7, #4]
  4068dc:	68da      	ldr	r2, [r3, #12]
  4068de:	687b      	ldr	r3, [r7, #4]
  4068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4068e2:	441a      	add	r2, r3
  4068e4:	687b      	ldr	r3, [r7, #4]
  4068e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4068e8:	687b      	ldr	r3, [r7, #4]
  4068ea:	68da      	ldr	r2, [r3, #12]
  4068ec:	687b      	ldr	r3, [r7, #4]
  4068ee:	685b      	ldr	r3, [r3, #4]
  4068f0:	429a      	cmp	r2, r3
  4068f2:	d303      	bcc.n	4068fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4068f4:	687b      	ldr	r3, [r7, #4]
  4068f6:	681a      	ldr	r2, [r3, #0]
  4068f8:	687b      	ldr	r3, [r7, #4]
  4068fa:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4068fc:	687b      	ldr	r3, [r7, #4]
  4068fe:	68da      	ldr	r2, [r3, #12]
  406900:	687b      	ldr	r3, [r7, #4]
  406902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406904:	6838      	ldr	r0, [r7, #0]
  406906:	4611      	mov	r1, r2
  406908:	461a      	mov	r2, r3
  40690a:	4b02      	ldr	r3, [pc, #8]	; (406914 <prvCopyDataFromQueue+0x4c>)
  40690c:	4798      	blx	r3
	}
}
  40690e:	3708      	adds	r7, #8
  406910:	46bd      	mov	sp, r7
  406912:	bd80      	pop	{r7, pc}
  406914:	0040cea1 	.word	0x0040cea1

00406918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  406918:	b580      	push	{r7, lr}
  40691a:	b082      	sub	sp, #8
  40691c:	af00      	add	r7, sp, #0
  40691e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  406920:	4b23      	ldr	r3, [pc, #140]	; (4069b0 <prvUnlockQueue+0x98>)
  406922:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406924:	e014      	b.n	406950 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406926:	687b      	ldr	r3, [r7, #4]
  406928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40692a:	2b00      	cmp	r3, #0
  40692c:	d00f      	beq.n	40694e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40692e:	687b      	ldr	r3, [r7, #4]
  406930:	3324      	adds	r3, #36	; 0x24
  406932:	4618      	mov	r0, r3
  406934:	4b1f      	ldr	r3, [pc, #124]	; (4069b4 <prvUnlockQueue+0x9c>)
  406936:	4798      	blx	r3
  406938:	4603      	mov	r3, r0
  40693a:	2b00      	cmp	r3, #0
  40693c:	d001      	beq.n	406942 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40693e:	4b1e      	ldr	r3, [pc, #120]	; (4069b8 <prvUnlockQueue+0xa0>)
  406940:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  406942:	687b      	ldr	r3, [r7, #4]
  406944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406946:	1e5a      	subs	r2, r3, #1
  406948:	687b      	ldr	r3, [r7, #4]
  40694a:	649a      	str	r2, [r3, #72]	; 0x48
  40694c:	e000      	b.n	406950 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  40694e:	e003      	b.n	406958 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406950:	687b      	ldr	r3, [r7, #4]
  406952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406954:	2b00      	cmp	r3, #0
  406956:	dce6      	bgt.n	406926 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  406958:	687b      	ldr	r3, [r7, #4]
  40695a:	f04f 32ff 	mov.w	r2, #4294967295
  40695e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  406960:	4b16      	ldr	r3, [pc, #88]	; (4069bc <prvUnlockQueue+0xa4>)
  406962:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406964:	4b12      	ldr	r3, [pc, #72]	; (4069b0 <prvUnlockQueue+0x98>)
  406966:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406968:	e014      	b.n	406994 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40696a:	687b      	ldr	r3, [r7, #4]
  40696c:	691b      	ldr	r3, [r3, #16]
  40696e:	2b00      	cmp	r3, #0
  406970:	d00f      	beq.n	406992 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  406972:	687b      	ldr	r3, [r7, #4]
  406974:	3310      	adds	r3, #16
  406976:	4618      	mov	r0, r3
  406978:	4b0e      	ldr	r3, [pc, #56]	; (4069b4 <prvUnlockQueue+0x9c>)
  40697a:	4798      	blx	r3
  40697c:	4603      	mov	r3, r0
  40697e:	2b00      	cmp	r3, #0
  406980:	d001      	beq.n	406986 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  406982:	4b0d      	ldr	r3, [pc, #52]	; (4069b8 <prvUnlockQueue+0xa0>)
  406984:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  406986:	687b      	ldr	r3, [r7, #4]
  406988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40698a:	1e5a      	subs	r2, r3, #1
  40698c:	687b      	ldr	r3, [r7, #4]
  40698e:	645a      	str	r2, [r3, #68]	; 0x44
  406990:	e000      	b.n	406994 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  406992:	e003      	b.n	40699c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406994:	687b      	ldr	r3, [r7, #4]
  406996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406998:	2b00      	cmp	r3, #0
  40699a:	dce6      	bgt.n	40696a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40699c:	687b      	ldr	r3, [r7, #4]
  40699e:	f04f 32ff 	mov.w	r2, #4294967295
  4069a2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4069a4:	4b05      	ldr	r3, [pc, #20]	; (4069bc <prvUnlockQueue+0xa4>)
  4069a6:	4798      	blx	r3
}
  4069a8:	3708      	adds	r7, #8
  4069aa:	46bd      	mov	sp, r7
  4069ac:	bd80      	pop	{r7, pc}
  4069ae:	bf00      	nop
  4069b0:	00406265 	.word	0x00406265
  4069b4:	0040714d 	.word	0x0040714d
  4069b8:	004072b5 	.word	0x004072b5
  4069bc:	00406289 	.word	0x00406289

004069c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  4069c0:	b580      	push	{r7, lr}
  4069c2:	b084      	sub	sp, #16
  4069c4:	af00      	add	r7, sp, #0
  4069c6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4069c8:	4b08      	ldr	r3, [pc, #32]	; (4069ec <prvIsQueueEmpty+0x2c>)
  4069ca:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4069cc:	687b      	ldr	r3, [r7, #4]
  4069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4069d0:	2b00      	cmp	r3, #0
  4069d2:	bf14      	ite	ne
  4069d4:	2300      	movne	r3, #0
  4069d6:	2301      	moveq	r3, #1
  4069d8:	b2db      	uxtb	r3, r3
  4069da:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4069dc:	4b04      	ldr	r3, [pc, #16]	; (4069f0 <prvIsQueueEmpty+0x30>)
  4069de:	4798      	blx	r3

	return xReturn;
  4069e0:	68fb      	ldr	r3, [r7, #12]
}
  4069e2:	4618      	mov	r0, r3
  4069e4:	3710      	adds	r7, #16
  4069e6:	46bd      	mov	sp, r7
  4069e8:	bd80      	pop	{r7, pc}
  4069ea:	bf00      	nop
  4069ec:	00406265 	.word	0x00406265
  4069f0:	00406289 	.word	0x00406289

004069f4 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  4069f4:	b580      	push	{r7, lr}
  4069f6:	b084      	sub	sp, #16
  4069f8:	af00      	add	r7, sp, #0
  4069fa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4069fc:	4b09      	ldr	r3, [pc, #36]	; (406a24 <prvIsQueueFull+0x30>)
  4069fe:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  406a00:	687b      	ldr	r3, [r7, #4]
  406a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406a04:	687b      	ldr	r3, [r7, #4]
  406a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406a08:	429a      	cmp	r2, r3
  406a0a:	bf14      	ite	ne
  406a0c:	2300      	movne	r3, #0
  406a0e:	2301      	moveq	r3, #1
  406a10:	b2db      	uxtb	r3, r3
  406a12:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406a14:	4b04      	ldr	r3, [pc, #16]	; (406a28 <prvIsQueueFull+0x34>)
  406a16:	4798      	blx	r3

	return xReturn;
  406a18:	68fb      	ldr	r3, [r7, #12]
}
  406a1a:	4618      	mov	r0, r3
  406a1c:	3710      	adds	r7, #16
  406a1e:	46bd      	mov	sp, r7
  406a20:	bd80      	pop	{r7, pc}
  406a22:	bf00      	nop
  406a24:	00406265 	.word	0x00406265
  406a28:	00406289 	.word	0x00406289

00406a2c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  406a2c:	b590      	push	{r4, r7, lr}
  406a2e:	b08b      	sub	sp, #44	; 0x2c
  406a30:	af02      	add	r7, sp, #8
  406a32:	60f8      	str	r0, [r7, #12]
  406a34:	60b9      	str	r1, [r7, #8]
  406a36:	603b      	str	r3, [r7, #0]
  406a38:	4613      	mov	r3, r2
  406a3a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  406a3c:	88fb      	ldrh	r3, [r7, #6]
  406a3e:	4618      	mov	r0, r3
  406a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  406a42:	4b49      	ldr	r3, [pc, #292]	; (406b68 <xTaskGenericCreate+0x13c>)
  406a44:	4798      	blx	r3
  406a46:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  406a48:	69bb      	ldr	r3, [r7, #24]
  406a4a:	2b00      	cmp	r3, #0
  406a4c:	d074      	beq.n	406b38 <xTaskGenericCreate+0x10c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  406a4e:	69bb      	ldr	r3, [r7, #24]
  406a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406a52:	88fb      	ldrh	r3, [r7, #6]
  406a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  406a58:	3b01      	subs	r3, #1
  406a5a:	009b      	lsls	r3, r3, #2
  406a5c:	4413      	add	r3, r2
  406a5e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
  406a60:	697b      	ldr	r3, [r7, #20]
  406a62:	f023 0307 	bic.w	r3, r3, #7
  406a66:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  406a68:	88fb      	ldrh	r3, [r7, #6]
  406a6a:	9300      	str	r3, [sp, #0]
  406a6c:	69b8      	ldr	r0, [r7, #24]
  406a6e:	68b9      	ldr	r1, [r7, #8]
  406a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  406a74:	4c3d      	ldr	r4, [pc, #244]	; (406b6c <xTaskGenericCreate+0x140>)
  406a76:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  406a78:	6978      	ldr	r0, [r7, #20]
  406a7a:	68f9      	ldr	r1, [r7, #12]
  406a7c:	683a      	ldr	r2, [r7, #0]
  406a7e:	4b3c      	ldr	r3, [pc, #240]	; (406b70 <xTaskGenericCreate+0x144>)
  406a80:	4798      	blx	r3
  406a82:	4602      	mov	r2, r0
  406a84:	69bb      	ldr	r3, [r7, #24]
  406a86:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  406a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406a8a:	2b00      	cmp	r3, #0
  406a8c:	d002      	beq.n	406a94 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  406a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406a90:	69ba      	ldr	r2, [r7, #24]
  406a92:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  406a94:	4b37      	ldr	r3, [pc, #220]	; (406b74 <xTaskGenericCreate+0x148>)
  406a96:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  406a98:	4b37      	ldr	r3, [pc, #220]	; (406b78 <xTaskGenericCreate+0x14c>)
  406a9a:	681b      	ldr	r3, [r3, #0]
  406a9c:	1c5a      	adds	r2, r3, #1
  406a9e:	4b36      	ldr	r3, [pc, #216]	; (406b78 <xTaskGenericCreate+0x14c>)
  406aa0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  406aa2:	4b36      	ldr	r3, [pc, #216]	; (406b7c <xTaskGenericCreate+0x150>)
  406aa4:	681b      	ldr	r3, [r3, #0]
  406aa6:	2b00      	cmp	r3, #0
  406aa8:	d109      	bne.n	406abe <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  406aaa:	4b34      	ldr	r3, [pc, #208]	; (406b7c <xTaskGenericCreate+0x150>)
  406aac:	69ba      	ldr	r2, [r7, #24]
  406aae:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  406ab0:	4b31      	ldr	r3, [pc, #196]	; (406b78 <xTaskGenericCreate+0x14c>)
  406ab2:	681b      	ldr	r3, [r3, #0]
  406ab4:	2b01      	cmp	r3, #1
  406ab6:	d10f      	bne.n	406ad8 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  406ab8:	4b31      	ldr	r3, [pc, #196]	; (406b80 <xTaskGenericCreate+0x154>)
  406aba:	4798      	blx	r3
  406abc:	e00c      	b.n	406ad8 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406abe:	4b31      	ldr	r3, [pc, #196]	; (406b84 <xTaskGenericCreate+0x158>)
  406ac0:	681b      	ldr	r3, [r3, #0]
  406ac2:	2b00      	cmp	r3, #0
  406ac4:	d108      	bne.n	406ad8 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  406ac6:	4b2d      	ldr	r3, [pc, #180]	; (406b7c <xTaskGenericCreate+0x150>)
  406ac8:	681b      	ldr	r3, [r3, #0]
  406aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406ace:	429a      	cmp	r2, r3
  406ad0:	d802      	bhi.n	406ad8 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
  406ad2:	4b2a      	ldr	r3, [pc, #168]	; (406b7c <xTaskGenericCreate+0x150>)
  406ad4:	69ba      	ldr	r2, [r7, #24]
  406ad6:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  406ad8:	69bb      	ldr	r3, [r7, #24]
  406ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406adc:	4b2a      	ldr	r3, [pc, #168]	; (406b88 <xTaskGenericCreate+0x15c>)
  406ade:	681b      	ldr	r3, [r3, #0]
  406ae0:	429a      	cmp	r2, r3
  406ae2:	d903      	bls.n	406aec <xTaskGenericCreate+0xc0>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  406ae4:	69bb      	ldr	r3, [r7, #24]
  406ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406ae8:	4b27      	ldr	r3, [pc, #156]	; (406b88 <xTaskGenericCreate+0x15c>)
  406aea:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  406aec:	4b27      	ldr	r3, [pc, #156]	; (406b8c <xTaskGenericCreate+0x160>)
  406aee:	681a      	ldr	r2, [r3, #0]
  406af0:	69bb      	ldr	r3, [r7, #24]
  406af2:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
  406af4:	4b25      	ldr	r3, [pc, #148]	; (406b8c <xTaskGenericCreate+0x160>)
  406af6:	681b      	ldr	r3, [r3, #0]
  406af8:	1c5a      	adds	r2, r3, #1
  406afa:	4b24      	ldr	r3, [pc, #144]	; (406b8c <xTaskGenericCreate+0x160>)
  406afc:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  406afe:	69bb      	ldr	r3, [r7, #24]
  406b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406b02:	4b23      	ldr	r3, [pc, #140]	; (406b90 <xTaskGenericCreate+0x164>)
  406b04:	681b      	ldr	r3, [r3, #0]
  406b06:	429a      	cmp	r2, r3
  406b08:	d903      	bls.n	406b12 <xTaskGenericCreate+0xe6>
  406b0a:	69bb      	ldr	r3, [r7, #24]
  406b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406b0e:	4b20      	ldr	r3, [pc, #128]	; (406b90 <xTaskGenericCreate+0x164>)
  406b10:	601a      	str	r2, [r3, #0]
  406b12:	69bb      	ldr	r3, [r7, #24]
  406b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406b16:	4613      	mov	r3, r2
  406b18:	009b      	lsls	r3, r3, #2
  406b1a:	4413      	add	r3, r2
  406b1c:	009b      	lsls	r3, r3, #2
  406b1e:	4a1d      	ldr	r2, [pc, #116]	; (406b94 <xTaskGenericCreate+0x168>)
  406b20:	441a      	add	r2, r3
  406b22:	69bb      	ldr	r3, [r7, #24]
  406b24:	3304      	adds	r3, #4
  406b26:	4610      	mov	r0, r2
  406b28:	4619      	mov	r1, r3
  406b2a:	4b1b      	ldr	r3, [pc, #108]	; (406b98 <xTaskGenericCreate+0x16c>)
  406b2c:	4798      	blx	r3

			xReturn = pdPASS;
  406b2e:	2301      	movs	r3, #1
  406b30:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  406b32:	4b1a      	ldr	r3, [pc, #104]	; (406b9c <xTaskGenericCreate+0x170>)
  406b34:	4798      	blx	r3
  406b36:	e002      	b.n	406b3e <xTaskGenericCreate+0x112>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406b38:	f04f 33ff 	mov.w	r3, #4294967295
  406b3c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  406b3e:	69fb      	ldr	r3, [r7, #28]
  406b40:	2b01      	cmp	r3, #1
  406b42:	d10b      	bne.n	406b5c <xTaskGenericCreate+0x130>
	{
		if( xSchedulerRunning != pdFALSE )
  406b44:	4b0f      	ldr	r3, [pc, #60]	; (406b84 <xTaskGenericCreate+0x158>)
  406b46:	681b      	ldr	r3, [r3, #0]
  406b48:	2b00      	cmp	r3, #0
  406b4a:	d007      	beq.n	406b5c <xTaskGenericCreate+0x130>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  406b4c:	4b0b      	ldr	r3, [pc, #44]	; (406b7c <xTaskGenericCreate+0x150>)
  406b4e:	681b      	ldr	r3, [r3, #0]
  406b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406b54:	429a      	cmp	r2, r3
  406b56:	d201      	bcs.n	406b5c <xTaskGenericCreate+0x130>
			{
				portYIELD_WITHIN_API();
  406b58:	4b11      	ldr	r3, [pc, #68]	; (406ba0 <xTaskGenericCreate+0x174>)
  406b5a:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  406b5c:	69fb      	ldr	r3, [r7, #28]
}
  406b5e:	4618      	mov	r0, r3
  406b60:	3724      	adds	r7, #36	; 0x24
  406b62:	46bd      	mov	sp, r7
  406b64:	bd90      	pop	{r4, r7, pc}
  406b66:	bf00      	nop
  406b68:	004074e9 	.word	0x004074e9
  406b6c:	004072f5 	.word	0x004072f5
  406b70:	00406189 	.word	0x00406189
  406b74:	00406265 	.word	0x00406265
  406b78:	20000f10 	.word	0x20000f10
  406b7c:	20000dfc 	.word	0x20000dfc
  406b80:	00407369 	.word	0x00407369
  406b84:	20000f20 	.word	0x20000f20
  406b88:	20000f18 	.word	0x20000f18
  406b8c:	20000f34 	.word	0x20000f34
  406b90:	20000f1c 	.word	0x20000f1c
  406b94:	20000e00 	.word	0x20000e00
  406b98:	00405fd1 	.word	0x00405fd1
  406b9c:	00406289 	.word	0x00406289
  406ba0:	0040624d 	.word	0x0040624d

00406ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  406ba4:	b580      	push	{r7, lr}
  406ba6:	b084      	sub	sp, #16
  406ba8:	af00      	add	r7, sp, #0
  406baa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406bac:	2300      	movs	r3, #0
  406bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
  406bb0:	687b      	ldr	r3, [r7, #4]
  406bb2:	2b00      	cmp	r3, #0
  406bb4:	d012      	beq.n	406bdc <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  406bb6:	4b0d      	ldr	r3, [pc, #52]	; (406bec <vTaskDelay+0x48>)
  406bb8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  406bba:	4b0d      	ldr	r3, [pc, #52]	; (406bf0 <vTaskDelay+0x4c>)
  406bbc:	681a      	ldr	r2, [r3, #0]
  406bbe:	687b      	ldr	r3, [r7, #4]
  406bc0:	4413      	add	r3, r2
  406bc2:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406bc4:	4b0b      	ldr	r3, [pc, #44]	; (406bf4 <vTaskDelay+0x50>)
  406bc6:	681b      	ldr	r3, [r3, #0]
  406bc8:	3304      	adds	r3, #4
  406bca:	4618      	mov	r0, r3
  406bcc:	4b0a      	ldr	r3, [pc, #40]	; (406bf8 <vTaskDelay+0x54>)
  406bce:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  406bd0:	68b8      	ldr	r0, [r7, #8]
  406bd2:	4b0a      	ldr	r3, [pc, #40]	; (406bfc <vTaskDelay+0x58>)
  406bd4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  406bd6:	4b0a      	ldr	r3, [pc, #40]	; (406c00 <vTaskDelay+0x5c>)
  406bd8:	4798      	blx	r3
  406bda:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
  406bdc:	68fb      	ldr	r3, [r7, #12]
  406bde:	2b00      	cmp	r3, #0
  406be0:	d101      	bne.n	406be6 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  406be2:	4b08      	ldr	r3, [pc, #32]	; (406c04 <vTaskDelay+0x60>)
  406be4:	4798      	blx	r3
		}
	}
  406be6:	3710      	adds	r7, #16
  406be8:	46bd      	mov	sp, r7
  406bea:	bd80      	pop	{r7, pc}
  406bec:	00406c6d 	.word	0x00406c6d
  406bf0:	20000f14 	.word	0x20000f14
  406bf4:	20000dfc 	.word	0x20000dfc
  406bf8:	00406091 	.word	0x00406091
  406bfc:	00407479 	.word	0x00407479
  406c00:	00406c89 	.word	0x00406c89
  406c04:	0040624d 	.word	0x0040624d

00406c08 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  406c08:	b590      	push	{r4, r7, lr}
  406c0a:	b087      	sub	sp, #28
  406c0c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
  406c0e:	2300      	movs	r3, #0
  406c10:	9300      	str	r3, [sp, #0]
  406c12:	2300      	movs	r3, #0
  406c14:	9301      	str	r3, [sp, #4]
  406c16:	2300      	movs	r3, #0
  406c18:	9302      	str	r3, [sp, #8]
  406c1a:	2300      	movs	r3, #0
  406c1c:	9303      	str	r3, [sp, #12]
  406c1e:	480d      	ldr	r0, [pc, #52]	; (406c54 <vTaskStartScheduler+0x4c>)
  406c20:	490d      	ldr	r1, [pc, #52]	; (406c58 <vTaskStartScheduler+0x50>)
  406c22:	f44f 7280 	mov.w	r2, #256	; 0x100
  406c26:	2300      	movs	r3, #0
  406c28:	4c0c      	ldr	r4, [pc, #48]	; (406c5c <vTaskStartScheduler+0x54>)
  406c2a:	47a0      	blx	r4
  406c2c:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
  406c2e:	687b      	ldr	r3, [r7, #4]
  406c30:	2b01      	cmp	r3, #1
  406c32:	d10b      	bne.n	406c4c <vTaskStartScheduler+0x44>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  406c34:	f04f 0000 	mov.w	r0, #0
  406c38:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
  406c3c:	4b08      	ldr	r3, [pc, #32]	; (406c60 <vTaskStartScheduler+0x58>)
  406c3e:	2201      	movs	r2, #1
  406c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0;
  406c42:	4b08      	ldr	r3, [pc, #32]	; (406c64 <vTaskStartScheduler+0x5c>)
  406c44:	2200      	movs	r2, #0
  406c46:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
  406c48:	4b07      	ldr	r3, [pc, #28]	; (406c68 <vTaskStartScheduler+0x60>)
  406c4a:	4798      	blx	r3
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
  406c4c:	370c      	adds	r7, #12
  406c4e:	46bd      	mov	sp, r7
  406c50:	bd90      	pop	{r4, r7, pc}
  406c52:	bf00      	nop
  406c54:	004072cd 	.word	0x004072cd
  406c58:	004164dc 	.word	0x004164dc
  406c5c:	00406a2d 	.word	0x00406a2d
  406c60:	20000f20 	.word	0x20000f20
  406c64:	20000f14 	.word	0x20000f14
  406c68:	0040620d 	.word	0x0040620d

00406c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  406c6c:	b480      	push	{r7}
  406c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  406c70:	4b04      	ldr	r3, [pc, #16]	; (406c84 <vTaskSuspendAll+0x18>)
  406c72:	681b      	ldr	r3, [r3, #0]
  406c74:	1c5a      	adds	r2, r3, #1
  406c76:	4b03      	ldr	r3, [pc, #12]	; (406c84 <vTaskSuspendAll+0x18>)
  406c78:	601a      	str	r2, [r3, #0]
}
  406c7a:	46bd      	mov	sp, r7
  406c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c80:	4770      	bx	lr
  406c82:	bf00      	nop
  406c84:	20000f24 	.word	0x20000f24

00406c88 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  406c88:	b590      	push	{r4, r7, lr}
  406c8a:	b083      	sub	sp, #12
  406c8c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406c8e:	2300      	movs	r3, #0
  406c90:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  406c92:	4b32      	ldr	r3, [pc, #200]	; (406d5c <xTaskResumeAll+0xd4>)
  406c94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  406c96:	4b32      	ldr	r3, [pc, #200]	; (406d60 <xTaskResumeAll+0xd8>)
  406c98:	681b      	ldr	r3, [r3, #0]
  406c9a:	1e5a      	subs	r2, r3, #1
  406c9c:	4b30      	ldr	r3, [pc, #192]	; (406d60 <xTaskResumeAll+0xd8>)
  406c9e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406ca0:	4b2f      	ldr	r3, [pc, #188]	; (406d60 <xTaskResumeAll+0xd8>)
  406ca2:	681b      	ldr	r3, [r3, #0]
  406ca4:	2b00      	cmp	r3, #0
  406ca6:	d152      	bne.n	406d4e <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
  406ca8:	4b2e      	ldr	r3, [pc, #184]	; (406d64 <xTaskResumeAll+0xdc>)
  406caa:	681b      	ldr	r3, [r3, #0]
  406cac:	2b00      	cmp	r3, #0
  406cae:	d04e      	beq.n	406d4e <xTaskResumeAll+0xc6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  406cb0:	2300      	movs	r3, #0
  406cb2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406cb4:	e027      	b.n	406d06 <xTaskResumeAll+0x7e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  406cb6:	4b2c      	ldr	r3, [pc, #176]	; (406d68 <xTaskResumeAll+0xe0>)
  406cb8:	68db      	ldr	r3, [r3, #12]
  406cba:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
  406cbc:	f104 0318 	add.w	r3, r4, #24
  406cc0:	4618      	mov	r0, r3
  406cc2:	4b2a      	ldr	r3, [pc, #168]	; (406d6c <xTaskResumeAll+0xe4>)
  406cc4:	4798      	blx	r3
					vListRemove( &( pxTCB->xGenericListItem ) );
  406cc6:	1d23      	adds	r3, r4, #4
  406cc8:	4618      	mov	r0, r3
  406cca:	4b28      	ldr	r3, [pc, #160]	; (406d6c <xTaskResumeAll+0xe4>)
  406ccc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  406cce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406cd0:	4b27      	ldr	r3, [pc, #156]	; (406d70 <xTaskResumeAll+0xe8>)
  406cd2:	681b      	ldr	r3, [r3, #0]
  406cd4:	429a      	cmp	r2, r3
  406cd6:	d902      	bls.n	406cde <xTaskResumeAll+0x56>
  406cd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406cda:	4b25      	ldr	r3, [pc, #148]	; (406d70 <xTaskResumeAll+0xe8>)
  406cdc:	601a      	str	r2, [r3, #0]
  406cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406ce0:	4613      	mov	r3, r2
  406ce2:	009b      	lsls	r3, r3, #2
  406ce4:	4413      	add	r3, r2
  406ce6:	009b      	lsls	r3, r3, #2
  406ce8:	4a22      	ldr	r2, [pc, #136]	; (406d74 <xTaskResumeAll+0xec>)
  406cea:	441a      	add	r2, r3
  406cec:	1d23      	adds	r3, r4, #4
  406cee:	4610      	mov	r0, r2
  406cf0:	4619      	mov	r1, r3
  406cf2:	4b21      	ldr	r3, [pc, #132]	; (406d78 <xTaskResumeAll+0xf0>)
  406cf4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  406cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406cf8:	4b20      	ldr	r3, [pc, #128]	; (406d7c <xTaskResumeAll+0xf4>)
  406cfa:	681b      	ldr	r3, [r3, #0]
  406cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406cfe:	429a      	cmp	r2, r3
  406d00:	d301      	bcc.n	406d06 <xTaskResumeAll+0x7e>
					{
						xYieldRequired = pdTRUE;
  406d02:	2301      	movs	r3, #1
  406d04:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406d06:	4b18      	ldr	r3, [pc, #96]	; (406d68 <xTaskResumeAll+0xe0>)
  406d08:	681b      	ldr	r3, [r3, #0]
  406d0a:	2b00      	cmp	r3, #0
  406d0c:	d1d3      	bne.n	406cb6 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  406d0e:	4b1c      	ldr	r3, [pc, #112]	; (406d80 <xTaskResumeAll+0xf8>)
  406d10:	681b      	ldr	r3, [r3, #0]
  406d12:	2b00      	cmp	r3, #0
  406d14:	d00d      	beq.n	406d32 <xTaskResumeAll+0xaa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  406d16:	e006      	b.n	406d26 <xTaskResumeAll+0x9e>
					{
						vTaskIncrementTick();
  406d18:	4b1a      	ldr	r3, [pc, #104]	; (406d84 <xTaskResumeAll+0xfc>)
  406d1a:	4798      	blx	r3
						--uxMissedTicks;
  406d1c:	4b18      	ldr	r3, [pc, #96]	; (406d80 <xTaskResumeAll+0xf8>)
  406d1e:	681b      	ldr	r3, [r3, #0]
  406d20:	1e5a      	subs	r2, r3, #1
  406d22:	4b17      	ldr	r3, [pc, #92]	; (406d80 <xTaskResumeAll+0xf8>)
  406d24:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  406d26:	4b16      	ldr	r3, [pc, #88]	; (406d80 <xTaskResumeAll+0xf8>)
  406d28:	681b      	ldr	r3, [r3, #0]
  406d2a:	2b00      	cmp	r3, #0
  406d2c:	d1f4      	bne.n	406d18 <xTaskResumeAll+0x90>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  406d2e:	2301      	movs	r3, #1
  406d30:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  406d32:	683b      	ldr	r3, [r7, #0]
  406d34:	2b01      	cmp	r3, #1
  406d36:	d003      	beq.n	406d40 <xTaskResumeAll+0xb8>
  406d38:	4b13      	ldr	r3, [pc, #76]	; (406d88 <xTaskResumeAll+0x100>)
  406d3a:	681b      	ldr	r3, [r3, #0]
  406d3c:	2b01      	cmp	r3, #1
  406d3e:	d106      	bne.n	406d4e <xTaskResumeAll+0xc6>
				{
					xAlreadyYielded = pdTRUE;
  406d40:	2301      	movs	r3, #1
  406d42:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  406d44:	4b10      	ldr	r3, [pc, #64]	; (406d88 <xTaskResumeAll+0x100>)
  406d46:	2200      	movs	r2, #0
  406d48:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  406d4a:	4b10      	ldr	r3, [pc, #64]	; (406d8c <xTaskResumeAll+0x104>)
  406d4c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  406d4e:	4b10      	ldr	r3, [pc, #64]	; (406d90 <xTaskResumeAll+0x108>)
  406d50:	4798      	blx	r3

	return xAlreadyYielded;
  406d52:	687b      	ldr	r3, [r7, #4]
}
  406d54:	4618      	mov	r0, r3
  406d56:	370c      	adds	r7, #12
  406d58:	46bd      	mov	sp, r7
  406d5a:	bd90      	pop	{r4, r7, pc}
  406d5c:	00406265 	.word	0x00406265
  406d60:	20000f24 	.word	0x20000f24
  406d64:	20000f10 	.word	0x20000f10
  406d68:	20000ed0 	.word	0x20000ed0
  406d6c:	00406091 	.word	0x00406091
  406d70:	20000f1c 	.word	0x20000f1c
  406d74:	20000e00 	.word	0x20000e00
  406d78:	00405fd1 	.word	0x00405fd1
  406d7c:	20000dfc 	.word	0x20000dfc
  406d80:	20000f28 	.word	0x20000f28
  406d84:	00406ea1 	.word	0x00406ea1
  406d88:	20000f2c 	.word	0x20000f2c
  406d8c:	0040624d 	.word	0x0040624d
  406d90:	00406289 	.word	0x00406289

00406d94 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
  406d94:	b480      	push	{r7}
  406d96:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
  406d98:	4b03      	ldr	r3, [pc, #12]	; (406da8 <uxTaskGetNumberOfTasks+0x14>)
  406d9a:	681b      	ldr	r3, [r3, #0]
}
  406d9c:	4618      	mov	r0, r3
  406d9e:	46bd      	mov	sp, r7
  406da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  406da4:	4770      	bx	lr
  406da6:	bf00      	nop
  406da8:	20000f10 	.word	0x20000f10

00406dac <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
  406dac:	b590      	push	{r4, r7, lr}
  406dae:	b085      	sub	sp, #20
  406db0:	af00      	add	r7, sp, #0
  406db2:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
  406db4:	4b2f      	ldr	r3, [pc, #188]	; (406e74 <vTaskList+0xc8>)
  406db6:	4798      	blx	r3
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
  406db8:	687b      	ldr	r3, [r7, #4]
  406dba:	2200      	movs	r2, #0
  406dbc:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
  406dbe:	687c      	ldr	r4, [r7, #4]
  406dc0:	4620      	mov	r0, r4
  406dc2:	4b2d      	ldr	r3, [pc, #180]	; (406e78 <vTaskList+0xcc>)
  406dc4:	4798      	blx	r3
  406dc6:	4603      	mov	r3, r0
  406dc8:	4423      	add	r3, r4
  406dca:	4a2c      	ldr	r2, [pc, #176]	; (406e7c <vTaskList+0xd0>)
  406dcc:	8811      	ldrh	r1, [r2, #0]
  406dce:	7892      	ldrb	r2, [r2, #2]
  406dd0:	8019      	strh	r1, [r3, #0]
  406dd2:	709a      	strb	r2, [r3, #2]

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
  406dd4:	4b2a      	ldr	r3, [pc, #168]	; (406e80 <vTaskList+0xd4>)
  406dd6:	681b      	ldr	r3, [r3, #0]
  406dd8:	3301      	adds	r3, #1
  406dda:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
  406ddc:	68fb      	ldr	r3, [r7, #12]
  406dde:	3b01      	subs	r3, #1
  406de0:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
  406de2:	4928      	ldr	r1, [pc, #160]	; (406e84 <vTaskList+0xd8>)
  406de4:	68fa      	ldr	r2, [r7, #12]
  406de6:	4613      	mov	r3, r2
  406de8:	009b      	lsls	r3, r3, #2
  406dea:	4413      	add	r3, r2
  406dec:	009b      	lsls	r3, r3, #2
  406dee:	440b      	add	r3, r1
  406df0:	681b      	ldr	r3, [r3, #0]
  406df2:	2b00      	cmp	r3, #0
  406df4:	d00b      	beq.n	406e0e <vTaskList+0x62>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
  406df6:	68fa      	ldr	r2, [r7, #12]
  406df8:	4613      	mov	r3, r2
  406dfa:	009b      	lsls	r3, r3, #2
  406dfc:	4413      	add	r3, r2
  406dfe:	009b      	lsls	r3, r3, #2
  406e00:	4a20      	ldr	r2, [pc, #128]	; (406e84 <vTaskList+0xd8>)
  406e02:	4413      	add	r3, r2
  406e04:	6878      	ldr	r0, [r7, #4]
  406e06:	4619      	mov	r1, r3
  406e08:	2252      	movs	r2, #82	; 0x52
  406e0a:	4b1f      	ldr	r3, [pc, #124]	; (406e88 <vTaskList+0xdc>)
  406e0c:	4798      	blx	r3
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
  406e0e:	68fb      	ldr	r3, [r7, #12]
  406e10:	2b00      	cmp	r3, #0
  406e12:	d1e3      	bne.n	406ddc <vTaskList+0x30>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
  406e14:	4b1d      	ldr	r3, [pc, #116]	; (406e8c <vTaskList+0xe0>)
  406e16:	681b      	ldr	r3, [r3, #0]
  406e18:	681b      	ldr	r3, [r3, #0]
  406e1a:	2b00      	cmp	r3, #0
  406e1c:	d006      	beq.n	406e2c <vTaskList+0x80>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
  406e1e:	4b1b      	ldr	r3, [pc, #108]	; (406e8c <vTaskList+0xe0>)
  406e20:	681b      	ldr	r3, [r3, #0]
  406e22:	6878      	ldr	r0, [r7, #4]
  406e24:	4619      	mov	r1, r3
  406e26:	2242      	movs	r2, #66	; 0x42
  406e28:	4b17      	ldr	r3, [pc, #92]	; (406e88 <vTaskList+0xdc>)
  406e2a:	4798      	blx	r3
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
  406e2c:	4b18      	ldr	r3, [pc, #96]	; (406e90 <vTaskList+0xe4>)
  406e2e:	681b      	ldr	r3, [r3, #0]
  406e30:	681b      	ldr	r3, [r3, #0]
  406e32:	2b00      	cmp	r3, #0
  406e34:	d006      	beq.n	406e44 <vTaskList+0x98>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
  406e36:	4b16      	ldr	r3, [pc, #88]	; (406e90 <vTaskList+0xe4>)
  406e38:	681b      	ldr	r3, [r3, #0]
  406e3a:	6878      	ldr	r0, [r7, #4]
  406e3c:	4619      	mov	r1, r3
  406e3e:	2242      	movs	r2, #66	; 0x42
  406e40:	4b11      	ldr	r3, [pc, #68]	; (406e88 <vTaskList+0xdc>)
  406e42:	4798      	blx	r3
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
  406e44:	4b13      	ldr	r3, [pc, #76]	; (406e94 <vTaskList+0xe8>)
  406e46:	681b      	ldr	r3, [r3, #0]
  406e48:	2b00      	cmp	r3, #0
  406e4a:	d004      	beq.n	406e56 <vTaskList+0xaa>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
  406e4c:	6878      	ldr	r0, [r7, #4]
  406e4e:	4911      	ldr	r1, [pc, #68]	; (406e94 <vTaskList+0xe8>)
  406e50:	2244      	movs	r2, #68	; 0x44
  406e52:	4b0d      	ldr	r3, [pc, #52]	; (406e88 <vTaskList+0xdc>)
  406e54:	4798      	blx	r3
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
  406e56:	4b10      	ldr	r3, [pc, #64]	; (406e98 <vTaskList+0xec>)
  406e58:	681b      	ldr	r3, [r3, #0]
  406e5a:	2b00      	cmp	r3, #0
  406e5c:	d004      	beq.n	406e68 <vTaskList+0xbc>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
  406e5e:	6878      	ldr	r0, [r7, #4]
  406e60:	490d      	ldr	r1, [pc, #52]	; (406e98 <vTaskList+0xec>)
  406e62:	2253      	movs	r2, #83	; 0x53
  406e64:	4b08      	ldr	r3, [pc, #32]	; (406e88 <vTaskList+0xdc>)
  406e66:	4798      	blx	r3
				}
			}
			#endif
		}
		xTaskResumeAll();
  406e68:	4b0c      	ldr	r3, [pc, #48]	; (406e9c <vTaskList+0xf0>)
  406e6a:	4798      	blx	r3
	}
  406e6c:	3714      	adds	r7, #20
  406e6e:	46bd      	mov	sp, r7
  406e70:	bd90      	pop	{r4, r7, pc}
  406e72:	bf00      	nop
  406e74:	00406c6d 	.word	0x00406c6d
  406e78:	0040d65d 	.word	0x0040d65d
  406e7c:	004164e4 	.word	0x004164e4
  406e80:	20000f18 	.word	0x20000f18
  406e84:	20000e00 	.word	0x20000e00
  406e88:	00407559 	.word	0x00407559
  406e8c:	20000ec8 	.word	0x20000ec8
  406e90:	20000ecc 	.word	0x20000ecc
  406e94:	20000ee4 	.word	0x20000ee4
  406e98:	20000efc 	.word	0x20000efc
  406e9c:	00406c89 	.word	0x00406c89

00406ea0 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
  406ea0:	b580      	push	{r7, lr}
  406ea2:	b084      	sub	sp, #16
  406ea4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406ea6:	4b40      	ldr	r3, [pc, #256]	; (406fa8 <vTaskIncrementTick+0x108>)
  406ea8:	681b      	ldr	r3, [r3, #0]
  406eaa:	2b00      	cmp	r3, #0
  406eac:	d173      	bne.n	406f96 <vTaskIncrementTick+0xf6>
	{
		++xTickCount;
  406eae:	4b3f      	ldr	r3, [pc, #252]	; (406fac <vTaskIncrementTick+0x10c>)
  406eb0:	681b      	ldr	r3, [r3, #0]
  406eb2:	1c5a      	adds	r2, r3, #1
  406eb4:	4b3d      	ldr	r3, [pc, #244]	; (406fac <vTaskIncrementTick+0x10c>)
  406eb6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0 )
  406eb8:	4b3c      	ldr	r3, [pc, #240]	; (406fac <vTaskIncrementTick+0x10c>)
  406eba:	681b      	ldr	r3, [r3, #0]
  406ebc:	2b00      	cmp	r3, #0
  406ebe:	d121      	bne.n	406f04 <vTaskIncrementTick+0x64>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
  406ec0:	4b3b      	ldr	r3, [pc, #236]	; (406fb0 <vTaskIncrementTick+0x110>)
  406ec2:	681b      	ldr	r3, [r3, #0]
  406ec4:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  406ec6:	4b3b      	ldr	r3, [pc, #236]	; (406fb4 <vTaskIncrementTick+0x114>)
  406ec8:	681a      	ldr	r2, [r3, #0]
  406eca:	4b39      	ldr	r3, [pc, #228]	; (406fb0 <vTaskIncrementTick+0x110>)
  406ecc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  406ece:	4b39      	ldr	r3, [pc, #228]	; (406fb4 <vTaskIncrementTick+0x114>)
  406ed0:	68fa      	ldr	r2, [r7, #12]
  406ed2:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  406ed4:	4b38      	ldr	r3, [pc, #224]	; (406fb8 <vTaskIncrementTick+0x118>)
  406ed6:	681b      	ldr	r3, [r3, #0]
  406ed8:	1c5a      	adds	r2, r3, #1
  406eda:	4b37      	ldr	r3, [pc, #220]	; (406fb8 <vTaskIncrementTick+0x118>)
  406edc:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  406ede:	4b34      	ldr	r3, [pc, #208]	; (406fb0 <vTaskIncrementTick+0x110>)
  406ee0:	681b      	ldr	r3, [r3, #0]
  406ee2:	681b      	ldr	r3, [r3, #0]
  406ee4:	2b00      	cmp	r3, #0
  406ee6:	d104      	bne.n	406ef2 <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  406ee8:	4b34      	ldr	r3, [pc, #208]	; (406fbc <vTaskIncrementTick+0x11c>)
  406eea:	f04f 32ff 	mov.w	r2, #4294967295
  406eee:	601a      	str	r2, [r3, #0]
  406ef0:	e008      	b.n	406f04 <vTaskIncrementTick+0x64>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  406ef2:	4b2f      	ldr	r3, [pc, #188]	; (406fb0 <vTaskIncrementTick+0x110>)
  406ef4:	681b      	ldr	r3, [r3, #0]
  406ef6:	68db      	ldr	r3, [r3, #12]
  406ef8:	68db      	ldr	r3, [r3, #12]
  406efa:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  406efc:	68bb      	ldr	r3, [r7, #8]
  406efe:	685a      	ldr	r2, [r3, #4]
  406f00:	4b2e      	ldr	r3, [pc, #184]	; (406fbc <vTaskIncrementTick+0x11c>)
  406f02:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  406f04:	4b29      	ldr	r3, [pc, #164]	; (406fac <vTaskIncrementTick+0x10c>)
  406f06:	681a      	ldr	r2, [r3, #0]
  406f08:	4b2c      	ldr	r3, [pc, #176]	; (406fbc <vTaskIncrementTick+0x11c>)
  406f0a:	681b      	ldr	r3, [r3, #0]
  406f0c:	429a      	cmp	r2, r3
  406f0e:	d341      	bcc.n	406f94 <vTaskIncrementTick+0xf4>
  406f10:	4b27      	ldr	r3, [pc, #156]	; (406fb0 <vTaskIncrementTick+0x110>)
  406f12:	681b      	ldr	r3, [r3, #0]
  406f14:	681b      	ldr	r3, [r3, #0]
  406f16:	2b00      	cmp	r3, #0
  406f18:	d104      	bne.n	406f24 <vTaskIncrementTick+0x84>
  406f1a:	4b28      	ldr	r3, [pc, #160]	; (406fbc <vTaskIncrementTick+0x11c>)
  406f1c:	f04f 32ff 	mov.w	r2, #4294967295
  406f20:	601a      	str	r2, [r3, #0]
  406f22:	e037      	b.n	406f94 <vTaskIncrementTick+0xf4>
  406f24:	4b22      	ldr	r3, [pc, #136]	; (406fb0 <vTaskIncrementTick+0x110>)
  406f26:	681b      	ldr	r3, [r3, #0]
  406f28:	68db      	ldr	r3, [r3, #12]
  406f2a:	68db      	ldr	r3, [r3, #12]
  406f2c:	60bb      	str	r3, [r7, #8]
  406f2e:	68bb      	ldr	r3, [r7, #8]
  406f30:	685b      	ldr	r3, [r3, #4]
  406f32:	607b      	str	r3, [r7, #4]
  406f34:	4b1d      	ldr	r3, [pc, #116]	; (406fac <vTaskIncrementTick+0x10c>)
  406f36:	681a      	ldr	r2, [r3, #0]
  406f38:	687b      	ldr	r3, [r7, #4]
  406f3a:	429a      	cmp	r2, r3
  406f3c:	d203      	bcs.n	406f46 <vTaskIncrementTick+0xa6>
  406f3e:	4b1f      	ldr	r3, [pc, #124]	; (406fbc <vTaskIncrementTick+0x11c>)
  406f40:	687a      	ldr	r2, [r7, #4]
  406f42:	601a      	str	r2, [r3, #0]
  406f44:	e026      	b.n	406f94 <vTaskIncrementTick+0xf4>
  406f46:	68bb      	ldr	r3, [r7, #8]
  406f48:	3304      	adds	r3, #4
  406f4a:	4618      	mov	r0, r3
  406f4c:	4b1c      	ldr	r3, [pc, #112]	; (406fc0 <vTaskIncrementTick+0x120>)
  406f4e:	4798      	blx	r3
  406f50:	68bb      	ldr	r3, [r7, #8]
  406f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406f54:	2b00      	cmp	r3, #0
  406f56:	d004      	beq.n	406f62 <vTaskIncrementTick+0xc2>
  406f58:	68bb      	ldr	r3, [r7, #8]
  406f5a:	3318      	adds	r3, #24
  406f5c:	4618      	mov	r0, r3
  406f5e:	4b18      	ldr	r3, [pc, #96]	; (406fc0 <vTaskIncrementTick+0x120>)
  406f60:	4798      	blx	r3
  406f62:	68bb      	ldr	r3, [r7, #8]
  406f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f66:	4b17      	ldr	r3, [pc, #92]	; (406fc4 <vTaskIncrementTick+0x124>)
  406f68:	681b      	ldr	r3, [r3, #0]
  406f6a:	429a      	cmp	r2, r3
  406f6c:	d903      	bls.n	406f76 <vTaskIncrementTick+0xd6>
  406f6e:	68bb      	ldr	r3, [r7, #8]
  406f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f72:	4b14      	ldr	r3, [pc, #80]	; (406fc4 <vTaskIncrementTick+0x124>)
  406f74:	601a      	str	r2, [r3, #0]
  406f76:	68bb      	ldr	r3, [r7, #8]
  406f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f7a:	4613      	mov	r3, r2
  406f7c:	009b      	lsls	r3, r3, #2
  406f7e:	4413      	add	r3, r2
  406f80:	009b      	lsls	r3, r3, #2
  406f82:	4a11      	ldr	r2, [pc, #68]	; (406fc8 <vTaskIncrementTick+0x128>)
  406f84:	441a      	add	r2, r3
  406f86:	68bb      	ldr	r3, [r7, #8]
  406f88:	3304      	adds	r3, #4
  406f8a:	4610      	mov	r0, r2
  406f8c:	4619      	mov	r1, r3
  406f8e:	4b0f      	ldr	r3, [pc, #60]	; (406fcc <vTaskIncrementTick+0x12c>)
  406f90:	4798      	blx	r3
  406f92:	e7bd      	b.n	406f10 <vTaskIncrementTick+0x70>
  406f94:	e004      	b.n	406fa0 <vTaskIncrementTick+0x100>
	}
	else
	{
		++uxMissedTicks;
  406f96:	4b0e      	ldr	r3, [pc, #56]	; (406fd0 <vTaskIncrementTick+0x130>)
  406f98:	681b      	ldr	r3, [r3, #0]
  406f9a:	1c5a      	adds	r2, r3, #1
  406f9c:	4b0c      	ldr	r3, [pc, #48]	; (406fd0 <vTaskIncrementTick+0x130>)
  406f9e:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  406fa0:	3710      	adds	r7, #16
  406fa2:	46bd      	mov	sp, r7
  406fa4:	bd80      	pop	{r7, pc}
  406fa6:	bf00      	nop
  406fa8:	20000f24 	.word	0x20000f24
  406fac:	20000f14 	.word	0x20000f14
  406fb0:	20000ec8 	.word	0x20000ec8
  406fb4:	20000ecc 	.word	0x20000ecc
  406fb8:	20000f30 	.word	0x20000f30
  406fbc:	20000044 	.word	0x20000044
  406fc0:	00406091 	.word	0x00406091
  406fc4:	20000f1c 	.word	0x20000f1c
  406fc8:	20000e00 	.word	0x20000e00
  406fcc:	00405fd1 	.word	0x00405fd1
  406fd0:	20000f28 	.word	0x20000f28

00406fd4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  406fd4:	b480      	push	{r7}
  406fd6:	b083      	sub	sp, #12
  406fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  406fda:	4b36      	ldr	r3, [pc, #216]	; (4070b4 <vTaskSwitchContext+0xe0>)
  406fdc:	681b      	ldr	r3, [r3, #0]
  406fde:	2b00      	cmp	r3, #0
  406fe0:	d003      	beq.n	406fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  406fe2:	4b35      	ldr	r3, [pc, #212]	; (4070b8 <vTaskSwitchContext+0xe4>)
  406fe4:	2201      	movs	r2, #1
  406fe6:	601a      	str	r2, [r3, #0]
  406fe8:	e05e      	b.n	4070a8 <vTaskSwitchContext+0xd4>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  406fea:	e004      	b.n	406ff6 <vTaskSwitchContext+0x22>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
  406fec:	4b33      	ldr	r3, [pc, #204]	; (4070bc <vTaskSwitchContext+0xe8>)
  406fee:	681b      	ldr	r3, [r3, #0]
  406ff0:	1e5a      	subs	r2, r3, #1
  406ff2:	4b32      	ldr	r3, [pc, #200]	; (4070bc <vTaskSwitchContext+0xe8>)
  406ff4:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  406ff6:	4b31      	ldr	r3, [pc, #196]	; (4070bc <vTaskSwitchContext+0xe8>)
  406ff8:	681a      	ldr	r2, [r3, #0]
  406ffa:	4931      	ldr	r1, [pc, #196]	; (4070c0 <vTaskSwitchContext+0xec>)
  406ffc:	4613      	mov	r3, r2
  406ffe:	009b      	lsls	r3, r3, #2
  407000:	4413      	add	r3, r2
  407002:	009b      	lsls	r3, r3, #2
  407004:	440b      	add	r3, r1
  407006:	681b      	ldr	r3, [r3, #0]
  407008:	2b00      	cmp	r3, #0
  40700a:	d0ef      	beq.n	406fec <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  40700c:	4b2b      	ldr	r3, [pc, #172]	; (4070bc <vTaskSwitchContext+0xe8>)
  40700e:	681a      	ldr	r2, [r3, #0]
  407010:	4613      	mov	r3, r2
  407012:	009b      	lsls	r3, r3, #2
  407014:	4413      	add	r3, r2
  407016:	009b      	lsls	r3, r3, #2
  407018:	4a29      	ldr	r2, [pc, #164]	; (4070c0 <vTaskSwitchContext+0xec>)
  40701a:	4413      	add	r3, r2
  40701c:	607b      	str	r3, [r7, #4]
  40701e:	687b      	ldr	r3, [r7, #4]
  407020:	685b      	ldr	r3, [r3, #4]
  407022:	685a      	ldr	r2, [r3, #4]
  407024:	687b      	ldr	r3, [r7, #4]
  407026:	605a      	str	r2, [r3, #4]
  407028:	687b      	ldr	r3, [r7, #4]
  40702a:	685a      	ldr	r2, [r3, #4]
  40702c:	687b      	ldr	r3, [r7, #4]
  40702e:	3308      	adds	r3, #8
  407030:	429a      	cmp	r2, r3
  407032:	d104      	bne.n	40703e <vTaskSwitchContext+0x6a>
  407034:	687b      	ldr	r3, [r7, #4]
  407036:	685b      	ldr	r3, [r3, #4]
  407038:	685a      	ldr	r2, [r3, #4]
  40703a:	687b      	ldr	r3, [r7, #4]
  40703c:	605a      	str	r2, [r3, #4]
  40703e:	687b      	ldr	r3, [r7, #4]
  407040:	685b      	ldr	r3, [r3, #4]
  407042:	68da      	ldr	r2, [r3, #12]
  407044:	4b1f      	ldr	r3, [pc, #124]	; (4070c4 <vTaskSwitchContext+0xf0>)
  407046:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  407048:	4b1f      	ldr	r3, [pc, #124]	; (4070c8 <vTaskSwitchContext+0xf4>)
  40704a:	681b      	ldr	r3, [r3, #0]
  40704c:	2b00      	cmp	r3, #0
  40704e:	d02b      	beq.n	4070a8 <vTaskSwitchContext+0xd4>
  407050:	4b1c      	ldr	r3, [pc, #112]	; (4070c4 <vTaskSwitchContext+0xf0>)
  407052:	681b      	ldr	r3, [r3, #0]
  407054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  407056:	4b1d      	ldr	r3, [pc, #116]	; (4070cc <vTaskSwitchContext+0xf8>)
  407058:	681b      	ldr	r3, [r3, #0]
  40705a:	429a      	cmp	r2, r3
  40705c:	d024      	beq.n	4070a8 <vTaskSwitchContext+0xd4>
  40705e:	4b1c      	ldr	r3, [pc, #112]	; (4070d0 <vTaskSwitchContext+0xfc>)
  407060:	681b      	ldr	r3, [r3, #0]
  407062:	f103 0208 	add.w	r2, r3, #8
  407066:	4b1b      	ldr	r3, [pc, #108]	; (4070d4 <vTaskSwitchContext+0x100>)
  407068:	681b      	ldr	r3, [r3, #0]
  40706a:	429a      	cmp	r2, r3
  40706c:	d219      	bcs.n	4070a2 <vTaskSwitchContext+0xce>
  40706e:	4b15      	ldr	r3, [pc, #84]	; (4070c4 <vTaskSwitchContext+0xf0>)
  407070:	681b      	ldr	r3, [r3, #0]
  407072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  407074:	4b15      	ldr	r3, [pc, #84]	; (4070cc <vTaskSwitchContext+0xf8>)
  407076:	601a      	str	r2, [r3, #0]
  407078:	4b15      	ldr	r3, [pc, #84]	; (4070d0 <vTaskSwitchContext+0xfc>)
  40707a:	681b      	ldr	r3, [r3, #0]
  40707c:	4a16      	ldr	r2, [pc, #88]	; (4070d8 <vTaskSwitchContext+0x104>)
  40707e:	6812      	ldr	r2, [r2, #0]
  407080:	601a      	str	r2, [r3, #0]
  407082:	4b13      	ldr	r3, [pc, #76]	; (4070d0 <vTaskSwitchContext+0xfc>)
  407084:	681b      	ldr	r3, [r3, #0]
  407086:	1d1a      	adds	r2, r3, #4
  407088:	4b11      	ldr	r3, [pc, #68]	; (4070d0 <vTaskSwitchContext+0xfc>)
  40708a:	601a      	str	r2, [r3, #0]
  40708c:	4b10      	ldr	r3, [pc, #64]	; (4070d0 <vTaskSwitchContext+0xfc>)
  40708e:	681b      	ldr	r3, [r3, #0]
  407090:	4a0e      	ldr	r2, [pc, #56]	; (4070cc <vTaskSwitchContext+0xf8>)
  407092:	6812      	ldr	r2, [r2, #0]
  407094:	601a      	str	r2, [r3, #0]
  407096:	4b0e      	ldr	r3, [pc, #56]	; (4070d0 <vTaskSwitchContext+0xfc>)
  407098:	681b      	ldr	r3, [r3, #0]
  40709a:	1d1a      	adds	r2, r3, #4
  40709c:	4b0c      	ldr	r3, [pc, #48]	; (4070d0 <vTaskSwitchContext+0xfc>)
  40709e:	601a      	str	r2, [r3, #0]
  4070a0:	e002      	b.n	4070a8 <vTaskSwitchContext+0xd4>
  4070a2:	4b09      	ldr	r3, [pc, #36]	; (4070c8 <vTaskSwitchContext+0xf4>)
  4070a4:	2200      	movs	r2, #0
  4070a6:	601a      	str	r2, [r3, #0]
	}
}
  4070a8:	370c      	adds	r7, #12
  4070aa:	46bd      	mov	sp, r7
  4070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4070b0:	4770      	bx	lr
  4070b2:	bf00      	nop
  4070b4:	20000f24 	.word	0x20000f24
  4070b8:	20000f2c 	.word	0x20000f2c
  4070bc:	20000f1c 	.word	0x20000f1c
  4070c0:	20000e00 	.word	0x20000e00
  4070c4:	20000dfc 	.word	0x20000dfc
  4070c8:	20000f40 	.word	0x20000f40
  4070cc:	20000048 	.word	0x20000048
  4070d0:	20000f38 	.word	0x20000f38
  4070d4:	20000f3c 	.word	0x20000f3c
  4070d8:	20000f14 	.word	0x20000f14

004070dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4070dc:	b580      	push	{r7, lr}
  4070de:	b084      	sub	sp, #16
  4070e0:	af00      	add	r7, sp, #0
  4070e2:	6078      	str	r0, [r7, #4]
  4070e4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4070e6:	4b12      	ldr	r3, [pc, #72]	; (407130 <vTaskPlaceOnEventList+0x54>)
  4070e8:	681b      	ldr	r3, [r3, #0]
  4070ea:	3318      	adds	r3, #24
  4070ec:	6878      	ldr	r0, [r7, #4]
  4070ee:	4619      	mov	r1, r3
  4070f0:	4b10      	ldr	r3, [pc, #64]	; (407134 <vTaskPlaceOnEventList+0x58>)
  4070f2:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4070f4:	4b0e      	ldr	r3, [pc, #56]	; (407130 <vTaskPlaceOnEventList+0x54>)
  4070f6:	681b      	ldr	r3, [r3, #0]
  4070f8:	3304      	adds	r3, #4
  4070fa:	4618      	mov	r0, r3
  4070fc:	4b0e      	ldr	r3, [pc, #56]	; (407138 <vTaskPlaceOnEventList+0x5c>)
  4070fe:	4798      	blx	r3


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  407100:	683b      	ldr	r3, [r7, #0]
  407102:	f1b3 3fff 	cmp.w	r3, #4294967295
  407106:	d107      	bne.n	407118 <vTaskPlaceOnEventList+0x3c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  407108:	4b09      	ldr	r3, [pc, #36]	; (407130 <vTaskPlaceOnEventList+0x54>)
  40710a:	681b      	ldr	r3, [r3, #0]
  40710c:	3304      	adds	r3, #4
  40710e:	480b      	ldr	r0, [pc, #44]	; (40713c <vTaskPlaceOnEventList+0x60>)
  407110:	4619      	mov	r1, r3
  407112:	4b0b      	ldr	r3, [pc, #44]	; (407140 <vTaskPlaceOnEventList+0x64>)
  407114:	4798      	blx	r3
  407116:	e007      	b.n	407128 <vTaskPlaceOnEventList+0x4c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  407118:	4b0a      	ldr	r3, [pc, #40]	; (407144 <vTaskPlaceOnEventList+0x68>)
  40711a:	681a      	ldr	r2, [r3, #0]
  40711c:	683b      	ldr	r3, [r7, #0]
  40711e:	4413      	add	r3, r2
  407120:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  407122:	68f8      	ldr	r0, [r7, #12]
  407124:	4b08      	ldr	r3, [pc, #32]	; (407148 <vTaskPlaceOnEventList+0x6c>)
  407126:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  407128:	3710      	adds	r7, #16
  40712a:	46bd      	mov	sp, r7
  40712c:	bd80      	pop	{r7, pc}
  40712e:	bf00      	nop
  407130:	20000dfc 	.word	0x20000dfc
  407134:	00406021 	.word	0x00406021
  407138:	00406091 	.word	0x00406091
  40713c:	20000efc 	.word	0x20000efc
  407140:	00405fd1 	.word	0x00405fd1
  407144:	20000f14 	.word	0x20000f14
  407148:	00407479 	.word	0x00407479

0040714c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40714c:	b580      	push	{r7, lr}
  40714e:	b084      	sub	sp, #16
  407150:	af00      	add	r7, sp, #0
  407152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  407154:	687b      	ldr	r3, [r7, #4]
  407156:	68db      	ldr	r3, [r3, #12]
  407158:	68db      	ldr	r3, [r3, #12]
  40715a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40715c:	68bb      	ldr	r3, [r7, #8]
  40715e:	3318      	adds	r3, #24
  407160:	4618      	mov	r0, r3
  407162:	4b1d      	ldr	r3, [pc, #116]	; (4071d8 <xTaskRemoveFromEventList+0x8c>)
  407164:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  407166:	4b1d      	ldr	r3, [pc, #116]	; (4071dc <xTaskRemoveFromEventList+0x90>)
  407168:	681b      	ldr	r3, [r3, #0]
  40716a:	2b00      	cmp	r3, #0
  40716c:	d11d      	bne.n	4071aa <xTaskRemoveFromEventList+0x5e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40716e:	68bb      	ldr	r3, [r7, #8]
  407170:	3304      	adds	r3, #4
  407172:	4618      	mov	r0, r3
  407174:	4b18      	ldr	r3, [pc, #96]	; (4071d8 <xTaskRemoveFromEventList+0x8c>)
  407176:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  407178:	68bb      	ldr	r3, [r7, #8]
  40717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40717c:	4b18      	ldr	r3, [pc, #96]	; (4071e0 <xTaskRemoveFromEventList+0x94>)
  40717e:	681b      	ldr	r3, [r3, #0]
  407180:	429a      	cmp	r2, r3
  407182:	d903      	bls.n	40718c <xTaskRemoveFromEventList+0x40>
  407184:	68bb      	ldr	r3, [r7, #8]
  407186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407188:	4b15      	ldr	r3, [pc, #84]	; (4071e0 <xTaskRemoveFromEventList+0x94>)
  40718a:	601a      	str	r2, [r3, #0]
  40718c:	68bb      	ldr	r3, [r7, #8]
  40718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407190:	4613      	mov	r3, r2
  407192:	009b      	lsls	r3, r3, #2
  407194:	4413      	add	r3, r2
  407196:	009b      	lsls	r3, r3, #2
  407198:	4a12      	ldr	r2, [pc, #72]	; (4071e4 <xTaskRemoveFromEventList+0x98>)
  40719a:	441a      	add	r2, r3
  40719c:	68bb      	ldr	r3, [r7, #8]
  40719e:	3304      	adds	r3, #4
  4071a0:	4610      	mov	r0, r2
  4071a2:	4619      	mov	r1, r3
  4071a4:	4b10      	ldr	r3, [pc, #64]	; (4071e8 <xTaskRemoveFromEventList+0x9c>)
  4071a6:	4798      	blx	r3
  4071a8:	e005      	b.n	4071b6 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4071aa:	68bb      	ldr	r3, [r7, #8]
  4071ac:	3318      	adds	r3, #24
  4071ae:	480f      	ldr	r0, [pc, #60]	; (4071ec <xTaskRemoveFromEventList+0xa0>)
  4071b0:	4619      	mov	r1, r3
  4071b2:	4b0d      	ldr	r3, [pc, #52]	; (4071e8 <xTaskRemoveFromEventList+0x9c>)
  4071b4:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4071b6:	68bb      	ldr	r3, [r7, #8]
  4071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4071ba:	4b0d      	ldr	r3, [pc, #52]	; (4071f0 <xTaskRemoveFromEventList+0xa4>)
  4071bc:	681b      	ldr	r3, [r3, #0]
  4071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4071c0:	429a      	cmp	r2, r3
  4071c2:	d302      	bcc.n	4071ca <xTaskRemoveFromEventList+0x7e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  4071c4:	2301      	movs	r3, #1
  4071c6:	60fb      	str	r3, [r7, #12]
  4071c8:	e001      	b.n	4071ce <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		xReturn = pdFALSE;
  4071ca:	2300      	movs	r3, #0
  4071cc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  4071ce:	68fb      	ldr	r3, [r7, #12]
}
  4071d0:	4618      	mov	r0, r3
  4071d2:	3710      	adds	r7, #16
  4071d4:	46bd      	mov	sp, r7
  4071d6:	bd80      	pop	{r7, pc}
  4071d8:	00406091 	.word	0x00406091
  4071dc:	20000f24 	.word	0x20000f24
  4071e0:	20000f1c 	.word	0x20000f1c
  4071e4:	20000e00 	.word	0x20000e00
  4071e8:	00405fd1 	.word	0x00405fd1
  4071ec:	20000ed0 	.word	0x20000ed0
  4071f0:	20000dfc 	.word	0x20000dfc

004071f4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4071f4:	b480      	push	{r7}
  4071f6:	b083      	sub	sp, #12
  4071f8:	af00      	add	r7, sp, #0
  4071fa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4071fc:	4b06      	ldr	r3, [pc, #24]	; (407218 <vTaskSetTimeOutState+0x24>)
  4071fe:	681a      	ldr	r2, [r3, #0]
  407200:	687b      	ldr	r3, [r7, #4]
  407202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  407204:	4b05      	ldr	r3, [pc, #20]	; (40721c <vTaskSetTimeOutState+0x28>)
  407206:	681a      	ldr	r2, [r3, #0]
  407208:	687b      	ldr	r3, [r7, #4]
  40720a:	605a      	str	r2, [r3, #4]
}
  40720c:	370c      	adds	r7, #12
  40720e:	46bd      	mov	sp, r7
  407210:	f85d 7b04 	ldr.w	r7, [sp], #4
  407214:	4770      	bx	lr
  407216:	bf00      	nop
  407218:	20000f30 	.word	0x20000f30
  40721c:	20000f14 	.word	0x20000f14

00407220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  407220:	b580      	push	{r7, lr}
  407222:	b084      	sub	sp, #16
  407224:	af00      	add	r7, sp, #0
  407226:	6078      	str	r0, [r7, #4]
  407228:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  40722a:	4b1d      	ldr	r3, [pc, #116]	; (4072a0 <xTaskCheckForTimeOut+0x80>)
  40722c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40722e:	683b      	ldr	r3, [r7, #0]
  407230:	681b      	ldr	r3, [r3, #0]
  407232:	f1b3 3fff 	cmp.w	r3, #4294967295
  407236:	d102      	bne.n	40723e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
  407238:	2300      	movs	r3, #0
  40723a:	60fb      	str	r3, [r7, #12]
  40723c:	e029      	b.n	407292 <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40723e:	687b      	ldr	r3, [r7, #4]
  407240:	681a      	ldr	r2, [r3, #0]
  407242:	4b18      	ldr	r3, [pc, #96]	; (4072a4 <xTaskCheckForTimeOut+0x84>)
  407244:	681b      	ldr	r3, [r3, #0]
  407246:	429a      	cmp	r2, r3
  407248:	d008      	beq.n	40725c <xTaskCheckForTimeOut+0x3c>
  40724a:	687b      	ldr	r3, [r7, #4]
  40724c:	685a      	ldr	r2, [r3, #4]
  40724e:	4b16      	ldr	r3, [pc, #88]	; (4072a8 <xTaskCheckForTimeOut+0x88>)
  407250:	681b      	ldr	r3, [r3, #0]
  407252:	429a      	cmp	r2, r3
  407254:	d802      	bhi.n	40725c <xTaskCheckForTimeOut+0x3c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  407256:	2301      	movs	r3, #1
  407258:	60fb      	str	r3, [r7, #12]
  40725a:	e01a      	b.n	407292 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  40725c:	4b12      	ldr	r3, [pc, #72]	; (4072a8 <xTaskCheckForTimeOut+0x88>)
  40725e:	681a      	ldr	r2, [r3, #0]
  407260:	687b      	ldr	r3, [r7, #4]
  407262:	685b      	ldr	r3, [r3, #4]
  407264:	1ad2      	subs	r2, r2, r3
  407266:	683b      	ldr	r3, [r7, #0]
  407268:	681b      	ldr	r3, [r3, #0]
  40726a:	429a      	cmp	r2, r3
  40726c:	d20f      	bcs.n	40728e <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40726e:	683b      	ldr	r3, [r7, #0]
  407270:	681a      	ldr	r2, [r3, #0]
  407272:	687b      	ldr	r3, [r7, #4]
  407274:	6859      	ldr	r1, [r3, #4]
  407276:	4b0c      	ldr	r3, [pc, #48]	; (4072a8 <xTaskCheckForTimeOut+0x88>)
  407278:	681b      	ldr	r3, [r3, #0]
  40727a:	1acb      	subs	r3, r1, r3
  40727c:	441a      	add	r2, r3
  40727e:	683b      	ldr	r3, [r7, #0]
  407280:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  407282:	6878      	ldr	r0, [r7, #4]
  407284:	4b09      	ldr	r3, [pc, #36]	; (4072ac <xTaskCheckForTimeOut+0x8c>)
  407286:	4798      	blx	r3
			xReturn = pdFALSE;
  407288:	2300      	movs	r3, #0
  40728a:	60fb      	str	r3, [r7, #12]
  40728c:	e001      	b.n	407292 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
  40728e:	2301      	movs	r3, #1
  407290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  407292:	4b07      	ldr	r3, [pc, #28]	; (4072b0 <xTaskCheckForTimeOut+0x90>)
  407294:	4798      	blx	r3

	return xReturn;
  407296:	68fb      	ldr	r3, [r7, #12]
}
  407298:	4618      	mov	r0, r3
  40729a:	3710      	adds	r7, #16
  40729c:	46bd      	mov	sp, r7
  40729e:	bd80      	pop	{r7, pc}
  4072a0:	00406265 	.word	0x00406265
  4072a4:	20000f30 	.word	0x20000f30
  4072a8:	20000f14 	.word	0x20000f14
  4072ac:	004071f5 	.word	0x004071f5
  4072b0:	00406289 	.word	0x00406289

004072b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4072b4:	b480      	push	{r7}
  4072b6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4072b8:	4b03      	ldr	r3, [pc, #12]	; (4072c8 <vTaskMissedYield+0x14>)
  4072ba:	2201      	movs	r2, #1
  4072bc:	601a      	str	r2, [r3, #0]
}
  4072be:	46bd      	mov	sp, r7
  4072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072c4:	4770      	bx	lr
  4072c6:	bf00      	nop
  4072c8:	20000f2c 	.word	0x20000f2c

004072cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4072cc:	b580      	push	{r7, lr}
  4072ce:	b082      	sub	sp, #8
  4072d0:	af00      	add	r7, sp, #0
  4072d2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4072d4:	4b04      	ldr	r3, [pc, #16]	; (4072e8 <prvIdleTask+0x1c>)
  4072d6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4072d8:	4b04      	ldr	r3, [pc, #16]	; (4072ec <prvIdleTask+0x20>)
  4072da:	681b      	ldr	r3, [r3, #0]
  4072dc:	2b01      	cmp	r3, #1
  4072de:	d902      	bls.n	4072e6 <prvIdleTask+0x1a>
			{
				taskYIELD();
  4072e0:	4b03      	ldr	r3, [pc, #12]	; (4072f0 <prvIdleTask+0x24>)
  4072e2:	4798      	blx	r3
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
  4072e4:	e7f6      	b.n	4072d4 <prvIdleTask+0x8>
  4072e6:	e7f5      	b.n	4072d4 <prvIdleTask+0x8>
  4072e8:	004073e9 	.word	0x004073e9
  4072ec:	20000e00 	.word	0x20000e00
  4072f0:	0040624d 	.word	0x0040624d

004072f4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4072f4:	b580      	push	{r7, lr}
  4072f6:	b084      	sub	sp, #16
  4072f8:	af00      	add	r7, sp, #0
  4072fa:	60f8      	str	r0, [r7, #12]
  4072fc:	60b9      	str	r1, [r7, #8]
  4072fe:	607a      	str	r2, [r7, #4]
  407300:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  407302:	68fb      	ldr	r3, [r7, #12]
  407304:	3334      	adds	r3, #52	; 0x34
  407306:	4618      	mov	r0, r3
  407308:	68b9      	ldr	r1, [r7, #8]
  40730a:	2210      	movs	r2, #16
  40730c:	4b14      	ldr	r3, [pc, #80]	; (407360 <prvInitialiseTCBVariables+0x6c>)
  40730e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  407310:	68fb      	ldr	r3, [r7, #12]
  407312:	2200      	movs	r2, #0
  407314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  407318:	687b      	ldr	r3, [r7, #4]
  40731a:	2b07      	cmp	r3, #7
  40731c:	d901      	bls.n	407322 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40731e:	2307      	movs	r3, #7
  407320:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  407322:	68fb      	ldr	r3, [r7, #12]
  407324:	687a      	ldr	r2, [r7, #4]
  407326:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  407328:	68fb      	ldr	r3, [r7, #12]
  40732a:	687a      	ldr	r2, [r7, #4]
  40732c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40732e:	68fb      	ldr	r3, [r7, #12]
  407330:	3304      	adds	r3, #4
  407332:	4618      	mov	r0, r3
  407334:	4b0b      	ldr	r3, [pc, #44]	; (407364 <prvInitialiseTCBVariables+0x70>)
  407336:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  407338:	68fb      	ldr	r3, [r7, #12]
  40733a:	3318      	adds	r3, #24
  40733c:	4618      	mov	r0, r3
  40733e:	4b09      	ldr	r3, [pc, #36]	; (407364 <prvInitialiseTCBVariables+0x70>)
  407340:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  407342:	68fb      	ldr	r3, [r7, #12]
  407344:	68fa      	ldr	r2, [r7, #12]
  407346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  407348:	687b      	ldr	r3, [r7, #4]
  40734a:	f1c3 0208 	rsb	r2, r3, #8
  40734e:	68fb      	ldr	r3, [r7, #12]
  407350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  407352:	68fb      	ldr	r3, [r7, #12]
  407354:	68fa      	ldr	r2, [r7, #12]
  407356:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  407358:	3710      	adds	r7, #16
  40735a:	46bd      	mov	sp, r7
  40735c:	bd80      	pop	{r7, pc}
  40735e:	bf00      	nop
  407360:	0040d771 	.word	0x0040d771
  407364:	00405fb9 	.word	0x00405fb9

00407368 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  407368:	b580      	push	{r7, lr}
  40736a:	b082      	sub	sp, #8
  40736c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40736e:	2300      	movs	r3, #0
  407370:	607b      	str	r3, [r7, #4]
  407372:	e00c      	b.n	40738e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  407374:	687a      	ldr	r2, [r7, #4]
  407376:	4613      	mov	r3, r2
  407378:	009b      	lsls	r3, r3, #2
  40737a:	4413      	add	r3, r2
  40737c:	009b      	lsls	r3, r3, #2
  40737e:	4a11      	ldr	r2, [pc, #68]	; (4073c4 <prvInitialiseTaskLists+0x5c>)
  407380:	4413      	add	r3, r2
  407382:	4618      	mov	r0, r3
  407384:	4b10      	ldr	r3, [pc, #64]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  407386:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  407388:	687b      	ldr	r3, [r7, #4]
  40738a:	3301      	adds	r3, #1
  40738c:	607b      	str	r3, [r7, #4]
  40738e:	687b      	ldr	r3, [r7, #4]
  407390:	2b07      	cmp	r3, #7
  407392:	d9ef      	bls.n	407374 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  407394:	480d      	ldr	r0, [pc, #52]	; (4073cc <prvInitialiseTaskLists+0x64>)
  407396:	4b0c      	ldr	r3, [pc, #48]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  407398:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  40739a:	480d      	ldr	r0, [pc, #52]	; (4073d0 <prvInitialiseTaskLists+0x68>)
  40739c:	4b0a      	ldr	r3, [pc, #40]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  40739e:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  4073a0:	480c      	ldr	r0, [pc, #48]	; (4073d4 <prvInitialiseTaskLists+0x6c>)
  4073a2:	4b09      	ldr	r3, [pc, #36]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  4073a4:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4073a6:	480c      	ldr	r0, [pc, #48]	; (4073d8 <prvInitialiseTaskLists+0x70>)
  4073a8:	4b07      	ldr	r3, [pc, #28]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  4073aa:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4073ac:	480b      	ldr	r0, [pc, #44]	; (4073dc <prvInitialiseTaskLists+0x74>)
  4073ae:	4b06      	ldr	r3, [pc, #24]	; (4073c8 <prvInitialiseTaskLists+0x60>)
  4073b0:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4073b2:	4b0b      	ldr	r3, [pc, #44]	; (4073e0 <prvInitialiseTaskLists+0x78>)
  4073b4:	4a05      	ldr	r2, [pc, #20]	; (4073cc <prvInitialiseTaskLists+0x64>)
  4073b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4073b8:	4b0a      	ldr	r3, [pc, #40]	; (4073e4 <prvInitialiseTaskLists+0x7c>)
  4073ba:	4a05      	ldr	r2, [pc, #20]	; (4073d0 <prvInitialiseTaskLists+0x68>)
  4073bc:	601a      	str	r2, [r3, #0]
}
  4073be:	3708      	adds	r7, #8
  4073c0:	46bd      	mov	sp, r7
  4073c2:	bd80      	pop	{r7, pc}
  4073c4:	20000e00 	.word	0x20000e00
  4073c8:	00405f79 	.word	0x00405f79
  4073cc:	20000ea0 	.word	0x20000ea0
  4073d0:	20000eb4 	.word	0x20000eb4
  4073d4:	20000ed0 	.word	0x20000ed0
  4073d8:	20000ee4 	.word	0x20000ee4
  4073dc:	20000efc 	.word	0x20000efc
  4073e0:	20000ec8 	.word	0x20000ec8
  4073e4:	20000ecc 	.word	0x20000ecc

004073e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  4073e8:	b580      	push	{r7, lr}
  4073ea:	b082      	sub	sp, #8
  4073ec:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
  4073ee:	4b18      	ldr	r3, [pc, #96]	; (407450 <prvCheckTasksWaitingTermination+0x68>)
  4073f0:	681b      	ldr	r3, [r3, #0]
  4073f2:	2b00      	cmp	r3, #0
  4073f4:	d028      	beq.n	407448 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
  4073f6:	4b17      	ldr	r3, [pc, #92]	; (407454 <prvCheckTasksWaitingTermination+0x6c>)
  4073f8:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4073fa:	4b17      	ldr	r3, [pc, #92]	; (407458 <prvCheckTasksWaitingTermination+0x70>)
  4073fc:	681b      	ldr	r3, [r3, #0]
  4073fe:	2b00      	cmp	r3, #0
  407400:	bf14      	ite	ne
  407402:	2300      	movne	r3, #0
  407404:	2301      	moveq	r3, #1
  407406:	b2db      	uxtb	r3, r3
  407408:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  40740a:	4b14      	ldr	r3, [pc, #80]	; (40745c <prvCheckTasksWaitingTermination+0x74>)
  40740c:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  40740e:	687b      	ldr	r3, [r7, #4]
  407410:	2b00      	cmp	r3, #0
  407412:	d119      	bne.n	407448 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  407414:	4b12      	ldr	r3, [pc, #72]	; (407460 <prvCheckTasksWaitingTermination+0x78>)
  407416:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  407418:	4b12      	ldr	r3, [pc, #72]	; (407464 <prvCheckTasksWaitingTermination+0x7c>)
  40741a:	685b      	ldr	r3, [r3, #4]
  40741c:	68db      	ldr	r3, [r3, #12]
  40741e:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
  407420:	683b      	ldr	r3, [r7, #0]
  407422:	3304      	adds	r3, #4
  407424:	4618      	mov	r0, r3
  407426:	4b10      	ldr	r3, [pc, #64]	; (407468 <prvCheckTasksWaitingTermination+0x80>)
  407428:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40742a:	4b10      	ldr	r3, [pc, #64]	; (40746c <prvCheckTasksWaitingTermination+0x84>)
  40742c:	681b      	ldr	r3, [r3, #0]
  40742e:	1e5a      	subs	r2, r3, #1
  407430:	4b0e      	ldr	r3, [pc, #56]	; (40746c <prvCheckTasksWaitingTermination+0x84>)
  407432:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  407434:	4b06      	ldr	r3, [pc, #24]	; (407450 <prvCheckTasksWaitingTermination+0x68>)
  407436:	681b      	ldr	r3, [r3, #0]
  407438:	1e5a      	subs	r2, r3, #1
  40743a:	4b05      	ldr	r3, [pc, #20]	; (407450 <prvCheckTasksWaitingTermination+0x68>)
  40743c:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  40743e:	4b0c      	ldr	r3, [pc, #48]	; (407470 <prvCheckTasksWaitingTermination+0x88>)
  407440:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  407442:	6838      	ldr	r0, [r7, #0]
  407444:	4b0b      	ldr	r3, [pc, #44]	; (407474 <prvCheckTasksWaitingTermination+0x8c>)
  407446:	4798      	blx	r3
			}
		}
	}
	#endif
}
  407448:	3708      	adds	r7, #8
  40744a:	46bd      	mov	sp, r7
  40744c:	bd80      	pop	{r7, pc}
  40744e:	bf00      	nop
  407450:	20000ef8 	.word	0x20000ef8
  407454:	00406c6d 	.word	0x00406c6d
  407458:	20000ee4 	.word	0x20000ee4
  40745c:	00406c89 	.word	0x00406c89
  407460:	00406265 	.word	0x00406265
  407464:	20000eec 	.word	0x20000eec
  407468:	00406091 	.word	0x00406091
  40746c:	20000f10 	.word	0x20000f10
  407470:	00406289 	.word	0x00406289
  407474:	00407649 	.word	0x00407649

00407478 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  407478:	b580      	push	{r7, lr}
  40747a:	b082      	sub	sp, #8
  40747c:	af00      	add	r7, sp, #0
  40747e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  407480:	4b13      	ldr	r3, [pc, #76]	; (4074d0 <prvAddCurrentTaskToDelayedList+0x58>)
  407482:	681b      	ldr	r3, [r3, #0]
  407484:	687a      	ldr	r2, [r7, #4]
  407486:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  407488:	4b12      	ldr	r3, [pc, #72]	; (4074d4 <prvAddCurrentTaskToDelayedList+0x5c>)
  40748a:	681b      	ldr	r3, [r3, #0]
  40748c:	687a      	ldr	r2, [r7, #4]
  40748e:	429a      	cmp	r2, r3
  407490:	d209      	bcs.n	4074a6 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  407492:	4b11      	ldr	r3, [pc, #68]	; (4074d8 <prvAddCurrentTaskToDelayedList+0x60>)
  407494:	681a      	ldr	r2, [r3, #0]
  407496:	4b0e      	ldr	r3, [pc, #56]	; (4074d0 <prvAddCurrentTaskToDelayedList+0x58>)
  407498:	681b      	ldr	r3, [r3, #0]
  40749a:	3304      	adds	r3, #4
  40749c:	4610      	mov	r0, r2
  40749e:	4619      	mov	r1, r3
  4074a0:	4b0e      	ldr	r3, [pc, #56]	; (4074dc <prvAddCurrentTaskToDelayedList+0x64>)
  4074a2:	4798      	blx	r3
  4074a4:	e010      	b.n	4074c8 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4074a6:	4b0e      	ldr	r3, [pc, #56]	; (4074e0 <prvAddCurrentTaskToDelayedList+0x68>)
  4074a8:	681a      	ldr	r2, [r3, #0]
  4074aa:	4b09      	ldr	r3, [pc, #36]	; (4074d0 <prvAddCurrentTaskToDelayedList+0x58>)
  4074ac:	681b      	ldr	r3, [r3, #0]
  4074ae:	3304      	adds	r3, #4
  4074b0:	4610      	mov	r0, r2
  4074b2:	4619      	mov	r1, r3
  4074b4:	4b09      	ldr	r3, [pc, #36]	; (4074dc <prvAddCurrentTaskToDelayedList+0x64>)
  4074b6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4074b8:	4b0a      	ldr	r3, [pc, #40]	; (4074e4 <prvAddCurrentTaskToDelayedList+0x6c>)
  4074ba:	681b      	ldr	r3, [r3, #0]
  4074bc:	687a      	ldr	r2, [r7, #4]
  4074be:	429a      	cmp	r2, r3
  4074c0:	d202      	bcs.n	4074c8 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4074c2:	4b08      	ldr	r3, [pc, #32]	; (4074e4 <prvAddCurrentTaskToDelayedList+0x6c>)
  4074c4:	687a      	ldr	r2, [r7, #4]
  4074c6:	601a      	str	r2, [r3, #0]
		}
	}
}
  4074c8:	3708      	adds	r7, #8
  4074ca:	46bd      	mov	sp, r7
  4074cc:	bd80      	pop	{r7, pc}
  4074ce:	bf00      	nop
  4074d0:	20000dfc 	.word	0x20000dfc
  4074d4:	20000f14 	.word	0x20000f14
  4074d8:	20000ecc 	.word	0x20000ecc
  4074dc:	00406021 	.word	0x00406021
  4074e0:	20000ec8 	.word	0x20000ec8
  4074e4:	20000044 	.word	0x20000044

004074e8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  4074e8:	b580      	push	{r7, lr}
  4074ea:	b084      	sub	sp, #16
  4074ec:	af00      	add	r7, sp, #0
  4074ee:	4603      	mov	r3, r0
  4074f0:	6039      	str	r1, [r7, #0]
  4074f2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  4074f4:	204c      	movs	r0, #76	; 0x4c
  4074f6:	4b15      	ldr	r3, [pc, #84]	; (40754c <prvAllocateTCBAndStack+0x64>)
  4074f8:	4798      	blx	r3
  4074fa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  4074fc:	68fb      	ldr	r3, [r7, #12]
  4074fe:	2b00      	cmp	r3, #0
  407500:	d01f      	beq.n	407542 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  407502:	683b      	ldr	r3, [r7, #0]
  407504:	2b00      	cmp	r3, #0
  407506:	d106      	bne.n	407516 <prvAllocateTCBAndStack+0x2e>
  407508:	88fb      	ldrh	r3, [r7, #6]
  40750a:	009b      	lsls	r3, r3, #2
  40750c:	4618      	mov	r0, r3
  40750e:	4b0f      	ldr	r3, [pc, #60]	; (40754c <prvAllocateTCBAndStack+0x64>)
  407510:	4798      	blx	r3
  407512:	4603      	mov	r3, r0
  407514:	e000      	b.n	407518 <prvAllocateTCBAndStack+0x30>
  407516:	683b      	ldr	r3, [r7, #0]
  407518:	68fa      	ldr	r2, [r7, #12]
  40751a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  40751c:	68fb      	ldr	r3, [r7, #12]
  40751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407520:	2b00      	cmp	r3, #0
  407522:	d105      	bne.n	407530 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  407524:	68f8      	ldr	r0, [r7, #12]
  407526:	4b0a      	ldr	r3, [pc, #40]	; (407550 <prvAllocateTCBAndStack+0x68>)
  407528:	4798      	blx	r3
			pxNewTCB = NULL;
  40752a:	2300      	movs	r3, #0
  40752c:	60fb      	str	r3, [r7, #12]
  40752e:	e008      	b.n	407542 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
  407530:	68fb      	ldr	r3, [r7, #12]
  407532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  407534:	88fb      	ldrh	r3, [r7, #6]
  407536:	009b      	lsls	r3, r3, #2
  407538:	4610      	mov	r0, r2
  40753a:	21a5      	movs	r1, #165	; 0xa5
  40753c:	461a      	mov	r2, r3
  40753e:	4b05      	ldr	r3, [pc, #20]	; (407554 <prvAllocateTCBAndStack+0x6c>)
  407540:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  407542:	68fb      	ldr	r3, [r7, #12]
}
  407544:	4618      	mov	r0, r3
  407546:	3710      	adds	r7, #16
  407548:	46bd      	mov	sp, r7
  40754a:	bd80      	pop	{r7, pc}
  40754c:	00406355 	.word	0x00406355
  407550:	00406385 	.word	0x00406385
  407554:	0040cfd5 	.word	0x0040cfd5

00407558 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
  407558:	b590      	push	{r4, r7, lr}
  40755a:	b08f      	sub	sp, #60	; 0x3c
  40755c:	af04      	add	r7, sp, #16
  40755e:	60f8      	str	r0, [r7, #12]
  407560:	60b9      	str	r1, [r7, #8]
  407562:	4613      	mov	r3, r2
  407564:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  407566:	68bb      	ldr	r3, [r7, #8]
  407568:	627b      	str	r3, [r7, #36]	; 0x24
  40756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40756c:	685b      	ldr	r3, [r3, #4]
  40756e:	685a      	ldr	r2, [r3, #4]
  407570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407572:	605a      	str	r2, [r3, #4]
  407574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407576:	685a      	ldr	r2, [r3, #4]
  407578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40757a:	3308      	adds	r3, #8
  40757c:	429a      	cmp	r2, r3
  40757e:	d104      	bne.n	40758a <prvListTaskWithinSingleList+0x32>
  407580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407582:	685b      	ldr	r3, [r3, #4]
  407584:	685a      	ldr	r2, [r3, #4]
  407586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407588:	605a      	str	r2, [r3, #4]
  40758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40758c:	685b      	ldr	r3, [r3, #4]
  40758e:	68db      	ldr	r3, [r3, #12]
  407590:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  407592:	68bb      	ldr	r3, [r7, #8]
  407594:	61fb      	str	r3, [r7, #28]
  407596:	69fb      	ldr	r3, [r7, #28]
  407598:	685b      	ldr	r3, [r3, #4]
  40759a:	685a      	ldr	r2, [r3, #4]
  40759c:	69fb      	ldr	r3, [r7, #28]
  40759e:	605a      	str	r2, [r3, #4]
  4075a0:	69fb      	ldr	r3, [r7, #28]
  4075a2:	685a      	ldr	r2, [r3, #4]
  4075a4:	69fb      	ldr	r3, [r7, #28]
  4075a6:	3308      	adds	r3, #8
  4075a8:	429a      	cmp	r2, r3
  4075aa:	d104      	bne.n	4075b6 <prvListTaskWithinSingleList+0x5e>
  4075ac:	69fb      	ldr	r3, [r7, #28]
  4075ae:	685b      	ldr	r3, [r3, #4]
  4075b0:	685a      	ldr	r2, [r3, #4]
  4075b2:	69fb      	ldr	r3, [r7, #28]
  4075b4:	605a      	str	r2, [r3, #4]
  4075b6:	69fb      	ldr	r3, [r7, #28]
  4075b8:	685b      	ldr	r3, [r3, #4]
  4075ba:	68db      	ldr	r3, [r3, #12]
  4075bc:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
  4075be:	69bb      	ldr	r3, [r7, #24]
  4075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4075c2:	4618      	mov	r0, r3
  4075c4:	4b0f      	ldr	r3, [pc, #60]	; (407604 <prvListTaskWithinSingleList+0xac>)
  4075c6:	4798      	blx	r3
  4075c8:	4603      	mov	r3, r0
  4075ca:	82fb      	strh	r3, [r7, #22]
			}
			#endif

			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
  4075cc:	69bb      	ldr	r3, [r7, #24]
  4075ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
  4075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4075d6:	69b9      	ldr	r1, [r7, #24]
  4075d8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  4075da:	8af8      	ldrh	r0, [r7, #22]
  4075dc:	69b9      	ldr	r1, [r7, #24]
  4075de:	6c49      	ldr	r1, [r1, #68]	; 0x44
  4075e0:	9400      	str	r4, [sp, #0]
  4075e2:	9001      	str	r0, [sp, #4]
  4075e4:	9102      	str	r1, [sp, #8]
  4075e6:	4808      	ldr	r0, [pc, #32]	; (407608 <prvListTaskWithinSingleList+0xb0>)
  4075e8:	4908      	ldr	r1, [pc, #32]	; (40760c <prvListTaskWithinSingleList+0xb4>)
  4075ea:	4c09      	ldr	r4, [pc, #36]	; (407610 <prvListTaskWithinSingleList+0xb8>)
  4075ec:	47a0      	blx	r4
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
  4075ee:	68f8      	ldr	r0, [r7, #12]
  4075f0:	4905      	ldr	r1, [pc, #20]	; (407608 <prvListTaskWithinSingleList+0xb0>)
  4075f2:	4b08      	ldr	r3, [pc, #32]	; (407614 <prvListTaskWithinSingleList+0xbc>)
  4075f4:	4798      	blx	r3

		} while( pxNextTCB != pxFirstTCB );
  4075f6:	69ba      	ldr	r2, [r7, #24]
  4075f8:	6a3b      	ldr	r3, [r7, #32]
  4075fa:	429a      	cmp	r2, r3
  4075fc:	d1c9      	bne.n	407592 <prvListTaskWithinSingleList+0x3a>
	}
  4075fe:	372c      	adds	r7, #44	; 0x2c
  407600:	46bd      	mov	sp, r7
  407602:	bd90      	pop	{r4, r7, pc}
  407604:	00407619 	.word	0x00407619
  407608:	20000f44 	.word	0x20000f44
  40760c:	004164e8 	.word	0x004164e8
  407610:	0040d20d 	.word	0x0040d20d
  407614:	0040d339 	.word	0x0040d339

00407618 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
  407618:	b490      	push	{r4, r7}
  40761a:	b082      	sub	sp, #8
  40761c:	af00      	add	r7, sp, #0
  40761e:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0;
  407620:	2400      	movs	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  407622:	e005      	b.n	407630 <usTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
  407624:	687b      	ldr	r3, [r7, #4]
  407626:	3301      	adds	r3, #1
  407628:	607b      	str	r3, [r7, #4]
			usCount++;
  40762a:	4623      	mov	r3, r4
  40762c:	3301      	adds	r3, #1
  40762e:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  407630:	687b      	ldr	r3, [r7, #4]
  407632:	781b      	ldrb	r3, [r3, #0]
  407634:	2ba5      	cmp	r3, #165	; 0xa5
  407636:	d0f5      	beq.n	407624 <usTaskCheckFreeStackSpace+0xc>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
  407638:	08a3      	lsrs	r3, r4, #2
  40763a:	b29c      	uxth	r4, r3

		return usCount;
  40763c:	4623      	mov	r3, r4
	}
  40763e:	4618      	mov	r0, r3
  407640:	3708      	adds	r7, #8
  407642:	46bd      	mov	sp, r7
  407644:	bc90      	pop	{r4, r7}
  407646:	4770      	bx	lr

00407648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  407648:	b580      	push	{r7, lr}
  40764a:	b082      	sub	sp, #8
  40764c:	af00      	add	r7, sp, #0
  40764e:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  407650:	687b      	ldr	r3, [r7, #4]
  407652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407654:	4618      	mov	r0, r3
  407656:	4b04      	ldr	r3, [pc, #16]	; (407668 <prvDeleteTCB+0x20>)
  407658:	4798      	blx	r3
		vPortFree( pxTCB );
  40765a:	6878      	ldr	r0, [r7, #4]
  40765c:	4b02      	ldr	r3, [pc, #8]	; (407668 <prvDeleteTCB+0x20>)
  40765e:	4798      	blx	r3
	}
  407660:	3708      	adds	r7, #8
  407662:	46bd      	mov	sp, r7
  407664:	bd80      	pop	{r7, pc}
  407666:	bf00      	nop
  407668:	00406385 	.word	0x00406385

0040766c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  40766c:	b480      	push	{r7}
  40766e:	b083      	sub	sp, #12
  407670:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  407672:	4b05      	ldr	r3, [pc, #20]	; (407688 <xTaskGetCurrentTaskHandle+0x1c>)
  407674:	681b      	ldr	r3, [r3, #0]
  407676:	607b      	str	r3, [r7, #4]

		return xReturn;
  407678:	687b      	ldr	r3, [r7, #4]
	}
  40767a:	4618      	mov	r0, r3
  40767c:	370c      	adds	r7, #12
  40767e:	46bd      	mov	sp, r7
  407680:	f85d 7b04 	ldr.w	r7, [sp], #4
  407684:	4770      	bx	lr
  407686:	bf00      	nop
  407688:	20000dfc 	.word	0x20000dfc

0040768c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  40768c:	b580      	push	{r7, lr}
  40768e:	b084      	sub	sp, #16
  407690:	af00      	add	r7, sp, #0
  407692:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  407694:	687b      	ldr	r3, [r7, #4]
  407696:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  407698:	68fb      	ldr	r3, [r7, #12]
  40769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40769c:	4b21      	ldr	r3, [pc, #132]	; (407724 <vTaskPriorityInherit+0x98>)
  40769e:	681b      	ldr	r3, [r3, #0]
  4076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4076a2:	429a      	cmp	r2, r3
  4076a4:	d23a      	bcs.n	40771c <vTaskPriorityInherit+0x90>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  4076a6:	4b1f      	ldr	r3, [pc, #124]	; (407724 <vTaskPriorityInherit+0x98>)
  4076a8:	681b      	ldr	r3, [r3, #0]
  4076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4076ac:	f1c3 0208 	rsb	r2, r3, #8
  4076b0:	68fb      	ldr	r3, [r7, #12]
  4076b2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  4076b4:	68fb      	ldr	r3, [r7, #12]
  4076b6:	6959      	ldr	r1, [r3, #20]
  4076b8:	68fb      	ldr	r3, [r7, #12]
  4076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4076bc:	4613      	mov	r3, r2
  4076be:	009b      	lsls	r3, r3, #2
  4076c0:	4413      	add	r3, r2
  4076c2:	009b      	lsls	r3, r3, #2
  4076c4:	4a18      	ldr	r2, [pc, #96]	; (407728 <vTaskPriorityInherit+0x9c>)
  4076c6:	4413      	add	r3, r2
  4076c8:	4299      	cmp	r1, r3
  4076ca:	d122      	bne.n	407712 <vTaskPriorityInherit+0x86>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
  4076cc:	68fb      	ldr	r3, [r7, #12]
  4076ce:	3304      	adds	r3, #4
  4076d0:	4618      	mov	r0, r3
  4076d2:	4b16      	ldr	r3, [pc, #88]	; (40772c <vTaskPriorityInherit+0xa0>)
  4076d4:	4798      	blx	r3

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4076d6:	4b13      	ldr	r3, [pc, #76]	; (407724 <vTaskPriorityInherit+0x98>)
  4076d8:	681b      	ldr	r3, [r3, #0]
  4076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4076dc:	68fb      	ldr	r3, [r7, #12]
  4076de:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
  4076e0:	68fb      	ldr	r3, [r7, #12]
  4076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4076e4:	4b12      	ldr	r3, [pc, #72]	; (407730 <vTaskPriorityInherit+0xa4>)
  4076e6:	681b      	ldr	r3, [r3, #0]
  4076e8:	429a      	cmp	r2, r3
  4076ea:	d903      	bls.n	4076f4 <vTaskPriorityInherit+0x68>
  4076ec:	68fb      	ldr	r3, [r7, #12]
  4076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4076f0:	4b0f      	ldr	r3, [pc, #60]	; (407730 <vTaskPriorityInherit+0xa4>)
  4076f2:	601a      	str	r2, [r3, #0]
  4076f4:	68fb      	ldr	r3, [r7, #12]
  4076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4076f8:	4613      	mov	r3, r2
  4076fa:	009b      	lsls	r3, r3, #2
  4076fc:	4413      	add	r3, r2
  4076fe:	009b      	lsls	r3, r3, #2
  407700:	4a09      	ldr	r2, [pc, #36]	; (407728 <vTaskPriorityInherit+0x9c>)
  407702:	441a      	add	r2, r3
  407704:	68fb      	ldr	r3, [r7, #12]
  407706:	3304      	adds	r3, #4
  407708:	4610      	mov	r0, r2
  40770a:	4619      	mov	r1, r3
  40770c:	4b09      	ldr	r3, [pc, #36]	; (407734 <vTaskPriorityInherit+0xa8>)
  40770e:	4798      	blx	r3
  407710:	e004      	b.n	40771c <vTaskPriorityInherit+0x90>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  407712:	4b04      	ldr	r3, [pc, #16]	; (407724 <vTaskPriorityInherit+0x98>)
  407714:	681b      	ldr	r3, [r3, #0]
  407716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407718:	68fb      	ldr	r3, [r7, #12]
  40771a:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
  40771c:	3710      	adds	r7, #16
  40771e:	46bd      	mov	sp, r7
  407720:	bd80      	pop	{r7, pc}
  407722:	bf00      	nop
  407724:	20000dfc 	.word	0x20000dfc
  407728:	20000e00 	.word	0x20000e00
  40772c:	00406091 	.word	0x00406091
  407730:	20000f1c 	.word	0x20000f1c
  407734:	00405fd1 	.word	0x00405fd1

00407738 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  407738:	b580      	push	{r7, lr}
  40773a:	b084      	sub	sp, #16
  40773c:	af00      	add	r7, sp, #0
  40773e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  407740:	687b      	ldr	r3, [r7, #4]
  407742:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  407744:	687b      	ldr	r3, [r7, #4]
  407746:	2b00      	cmp	r3, #0
  407748:	d02c      	beq.n	4077a4 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40774a:	68fb      	ldr	r3, [r7, #12]
  40774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40774e:	68fb      	ldr	r3, [r7, #12]
  407750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  407752:	429a      	cmp	r2, r3
  407754:	d026      	beq.n	4077a4 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
  407756:	68fb      	ldr	r3, [r7, #12]
  407758:	3304      	adds	r3, #4
  40775a:	4618      	mov	r0, r3
  40775c:	4b13      	ldr	r3, [pc, #76]	; (4077ac <vTaskPriorityDisinherit+0x74>)
  40775e:	4798      	blx	r3

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  407760:	68fb      	ldr	r3, [r7, #12]
  407762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  407764:	68fb      	ldr	r3, [r7, #12]
  407766:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  407768:	68fb      	ldr	r3, [r7, #12]
  40776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40776c:	f1c3 0208 	rsb	r2, r3, #8
  407770:	68fb      	ldr	r3, [r7, #12]
  407772:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  407774:	68fb      	ldr	r3, [r7, #12]
  407776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407778:	4b0d      	ldr	r3, [pc, #52]	; (4077b0 <vTaskPriorityDisinherit+0x78>)
  40777a:	681b      	ldr	r3, [r3, #0]
  40777c:	429a      	cmp	r2, r3
  40777e:	d903      	bls.n	407788 <vTaskPriorityDisinherit+0x50>
  407780:	68fb      	ldr	r3, [r7, #12]
  407782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407784:	4b0a      	ldr	r3, [pc, #40]	; (4077b0 <vTaskPriorityDisinherit+0x78>)
  407786:	601a      	str	r2, [r3, #0]
  407788:	68fb      	ldr	r3, [r7, #12]
  40778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40778c:	4613      	mov	r3, r2
  40778e:	009b      	lsls	r3, r3, #2
  407790:	4413      	add	r3, r2
  407792:	009b      	lsls	r3, r3, #2
  407794:	4a07      	ldr	r2, [pc, #28]	; (4077b4 <vTaskPriorityDisinherit+0x7c>)
  407796:	441a      	add	r2, r3
  407798:	68fb      	ldr	r3, [r7, #12]
  40779a:	3304      	adds	r3, #4
  40779c:	4610      	mov	r0, r2
  40779e:	4619      	mov	r1, r3
  4077a0:	4b05      	ldr	r3, [pc, #20]	; (4077b8 <vTaskPriorityDisinherit+0x80>)
  4077a2:	4798      	blx	r3
			}
		}
	}
  4077a4:	3710      	adds	r7, #16
  4077a6:	46bd      	mov	sp, r7
  4077a8:	bd80      	pop	{r7, pc}
  4077aa:	bf00      	nop
  4077ac:	00406091 	.word	0x00406091
  4077b0:	20000f1c 	.word	0x20000f1c
  4077b4:	20000e00 	.word	0x20000e00
  4077b8:	00405fd1 	.word	0x00405fd1

004077bc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4077bc:	b480      	push	{r7}
  4077be:	b083      	sub	sp, #12
  4077c0:	af00      	add	r7, sp, #0
  4077c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4077c4:	687b      	ldr	r3, [r7, #4]
  4077c6:	2b07      	cmp	r3, #7
  4077c8:	d825      	bhi.n	407816 <osc_get_rate+0x5a>
  4077ca:	a201      	add	r2, pc, #4	; (adr r2, 4077d0 <osc_get_rate+0x14>)
  4077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4077d0:	004077f1 	.word	0x004077f1
  4077d4:	004077f7 	.word	0x004077f7
  4077d8:	004077fd 	.word	0x004077fd
  4077dc:	00407803 	.word	0x00407803
  4077e0:	00407807 	.word	0x00407807
  4077e4:	0040780b 	.word	0x0040780b
  4077e8:	0040780f 	.word	0x0040780f
  4077ec:	00407813 	.word	0x00407813
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4077f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4077f4:	e010      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4077f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4077fa:	e00d      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4077fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407800:	e00a      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407802:	4b08      	ldr	r3, [pc, #32]	; (407824 <osc_get_rate+0x68>)
  407804:	e008      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  407806:	4b08      	ldr	r3, [pc, #32]	; (407828 <osc_get_rate+0x6c>)
  407808:	e006      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40780a:	4b08      	ldr	r3, [pc, #32]	; (40782c <osc_get_rate+0x70>)
  40780c:	e004      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40780e:	4b08      	ldr	r3, [pc, #32]	; (407830 <osc_get_rate+0x74>)
  407810:	e002      	b.n	407818 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407812:	4b07      	ldr	r3, [pc, #28]	; (407830 <osc_get_rate+0x74>)
  407814:	e000      	b.n	407818 <osc_get_rate+0x5c>
	}

	return 0;
  407816:	2300      	movs	r3, #0
}
  407818:	4618      	mov	r0, r3
  40781a:	370c      	adds	r7, #12
  40781c:	46bd      	mov	sp, r7
  40781e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407822:	4770      	bx	lr
  407824:	003d0900 	.word	0x003d0900
  407828:	007a1200 	.word	0x007a1200
  40782c:	00b71b00 	.word	0x00b71b00
  407830:	00f42400 	.word	0x00f42400

00407834 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407834:	b580      	push	{r7, lr}
  407836:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  407838:	2006      	movs	r0, #6
  40783a:	4b04      	ldr	r3, [pc, #16]	; (40784c <sysclk_get_main_hz+0x18>)
  40783c:	4798      	blx	r3
  40783e:	4602      	mov	r2, r0
  407840:	4613      	mov	r3, r2
  407842:	011b      	lsls	r3, r3, #4
  407844:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407846:	4618      	mov	r0, r3
  407848:	bd80      	pop	{r7, pc}
  40784a:	bf00      	nop
  40784c:	004077bd 	.word	0x004077bd

00407850 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  407850:	b580      	push	{r7, lr}
  407852:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407854:	4b02      	ldr	r3, [pc, #8]	; (407860 <sysclk_get_peripheral_hz+0x10>)
  407856:	4798      	blx	r3
  407858:	4603      	mov	r3, r0
  40785a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40785c:	4618      	mov	r0, r3
  40785e:	bd80      	pop	{r7, pc}
  407860:	00407835 	.word	0x00407835

00407864 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  407864:	b580      	push	{r7, lr}
  407866:	b082      	sub	sp, #8
  407868:	af00      	add	r7, sp, #0
  40786a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40786c:	6878      	ldr	r0, [r7, #4]
  40786e:	4b02      	ldr	r3, [pc, #8]	; (407878 <sysclk_enable_peripheral_clock+0x14>)
  407870:	4798      	blx	r3
}
  407872:	3708      	adds	r7, #8
  407874:	46bd      	mov	sp, r7
  407876:	bd80      	pop	{r7, pc}
  407878:	0040bca9 	.word	0x0040bca9

0040787c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40787c:	b580      	push	{r7, lr}
  40787e:	b08c      	sub	sp, #48	; 0x30
  407880:	af00      	add	r7, sp, #0
  407882:	6078      	str	r0, [r7, #4]
  407884:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  407886:	4b31      	ldr	r3, [pc, #196]	; (40794c <usart_serial_init+0xd0>)
  407888:	4798      	blx	r3
  40788a:	4603      	mov	r3, r0
  40788c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40788e:	683b      	ldr	r3, [r7, #0]
  407890:	681b      	ldr	r3, [r3, #0]
  407892:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  407894:	683b      	ldr	r3, [r7, #0]
  407896:	689b      	ldr	r3, [r3, #8]
  407898:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40789a:	683b      	ldr	r3, [r7, #0]
  40789c:	681b      	ldr	r3, [r3, #0]
  40789e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4078a0:	683b      	ldr	r3, [r7, #0]
  4078a2:	685b      	ldr	r3, [r3, #4]
  4078a4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4078a6:	683b      	ldr	r3, [r7, #0]
  4078a8:	689b      	ldr	r3, [r3, #8]
  4078aa:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4078ac:	683b      	ldr	r3, [r7, #0]
  4078ae:	7b1b      	ldrb	r3, [r3, #12]
  4078b0:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4078b2:	2300      	movs	r3, #0
  4078b4:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4078b6:	687a      	ldr	r2, [r7, #4]
  4078b8:	4b25      	ldr	r3, [pc, #148]	; (407950 <usart_serial_init+0xd4>)
  4078ba:	429a      	cmp	r2, r3
  4078bc:	d108      	bne.n	4078d0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4078be:	2008      	movs	r0, #8
  4078c0:	4b24      	ldr	r3, [pc, #144]	; (407954 <usart_serial_init+0xd8>)
  4078c2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4078c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4078c8:	6878      	ldr	r0, [r7, #4]
  4078ca:	4619      	mov	r1, r3
  4078cc:	4b22      	ldr	r3, [pc, #136]	; (407958 <usart_serial_init+0xdc>)
  4078ce:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4078d0:	687a      	ldr	r2, [r7, #4]
  4078d2:	4b22      	ldr	r3, [pc, #136]	; (40795c <usart_serial_init+0xe0>)
  4078d4:	429a      	cmp	r2, r3
  4078d6:	d108      	bne.n	4078ea <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4078d8:	2009      	movs	r0, #9
  4078da:	4b1e      	ldr	r3, [pc, #120]	; (407954 <usart_serial_init+0xd8>)
  4078dc:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4078de:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4078e2:	6878      	ldr	r0, [r7, #4]
  4078e4:	4619      	mov	r1, r3
  4078e6:	4b1c      	ldr	r3, [pc, #112]	; (407958 <usart_serial_init+0xdc>)
  4078e8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4078ea:	687a      	ldr	r2, [r7, #4]
  4078ec:	4b1c      	ldr	r3, [pc, #112]	; (407960 <usart_serial_init+0xe4>)
  4078ee:	429a      	cmp	r2, r3
  4078f0:	d112      	bne.n	407918 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4078f2:	200e      	movs	r0, #14
  4078f4:	4b17      	ldr	r3, [pc, #92]	; (407954 <usart_serial_init+0xd8>)
  4078f6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4078f8:	4b14      	ldr	r3, [pc, #80]	; (40794c <usart_serial_init+0xd0>)
  4078fa:	4798      	blx	r3
  4078fc:	4603      	mov	r3, r0
  4078fe:	f107 020c 	add.w	r2, r7, #12
  407902:	6878      	ldr	r0, [r7, #4]
  407904:	4611      	mov	r1, r2
  407906:	461a      	mov	r2, r3
  407908:	4b16      	ldr	r3, [pc, #88]	; (407964 <usart_serial_init+0xe8>)
  40790a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40790c:	6878      	ldr	r0, [r7, #4]
  40790e:	4b16      	ldr	r3, [pc, #88]	; (407968 <usart_serial_init+0xec>)
  407910:	4798      	blx	r3
		usart_enable_rx(p_usart);
  407912:	6878      	ldr	r0, [r7, #4]
  407914:	4b15      	ldr	r3, [pc, #84]	; (40796c <usart_serial_init+0xf0>)
  407916:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  407918:	687a      	ldr	r2, [r7, #4]
  40791a:	4b15      	ldr	r3, [pc, #84]	; (407970 <usart_serial_init+0xf4>)
  40791c:	429a      	cmp	r2, r3
  40791e:	d112      	bne.n	407946 <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  407920:	200f      	movs	r0, #15
  407922:	4b0c      	ldr	r3, [pc, #48]	; (407954 <usart_serial_init+0xd8>)
  407924:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  407926:	4b09      	ldr	r3, [pc, #36]	; (40794c <usart_serial_init+0xd0>)
  407928:	4798      	blx	r3
  40792a:	4603      	mov	r3, r0
  40792c:	f107 020c 	add.w	r2, r7, #12
  407930:	6878      	ldr	r0, [r7, #4]
  407932:	4611      	mov	r1, r2
  407934:	461a      	mov	r2, r3
  407936:	4b0b      	ldr	r3, [pc, #44]	; (407964 <usart_serial_init+0xe8>)
  407938:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40793a:	6878      	ldr	r0, [r7, #4]
  40793c:	4b0a      	ldr	r3, [pc, #40]	; (407968 <usart_serial_init+0xec>)
  40793e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  407940:	6878      	ldr	r0, [r7, #4]
  407942:	4b0a      	ldr	r3, [pc, #40]	; (40796c <usart_serial_init+0xf0>)
  407944:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  407946:	3730      	adds	r7, #48	; 0x30
  407948:	46bd      	mov	sp, r7
  40794a:	bd80      	pop	{r7, pc}
  40794c:	00407851 	.word	0x00407851
  407950:	400e0600 	.word	0x400e0600
  407954:	00407865 	.word	0x00407865
  407958:	004027f5 	.word	0x004027f5
  40795c:	400e0800 	.word	0x400e0800
  407960:	40024000 	.word	0x40024000
  407964:	004029d9 	.word	0x004029d9
  407968:	00402a5d 	.word	0x00402a5d
  40796c:	00402a8d 	.word	0x00402a8d
  407970:	40028000 	.word	0x40028000

00407974 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  407974:	b580      	push	{r7, lr}
  407976:	b082      	sub	sp, #8
  407978:	af00      	add	r7, sp, #0
  40797a:	6078      	str	r0, [r7, #4]
  40797c:	460b      	mov	r3, r1
  40797e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407980:	687a      	ldr	r2, [r7, #4]
  407982:	4b20      	ldr	r3, [pc, #128]	; (407a04 <usart_serial_putchar+0x90>)
  407984:	429a      	cmp	r2, r3
  407986:	d10a      	bne.n	40799e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  407988:	bf00      	nop
  40798a:	78fb      	ldrb	r3, [r7, #3]
  40798c:	6878      	ldr	r0, [r7, #4]
  40798e:	4619      	mov	r1, r3
  407990:	4b1d      	ldr	r3, [pc, #116]	; (407a08 <usart_serial_putchar+0x94>)
  407992:	4798      	blx	r3
  407994:	4603      	mov	r3, r0
  407996:	2b00      	cmp	r3, #0
  407998:	d1f7      	bne.n	40798a <usart_serial_putchar+0x16>
		return 1;
  40799a:	2301      	movs	r3, #1
  40799c:	e02d      	b.n	4079fa <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40799e:	687a      	ldr	r2, [r7, #4]
  4079a0:	4b1a      	ldr	r3, [pc, #104]	; (407a0c <usart_serial_putchar+0x98>)
  4079a2:	429a      	cmp	r2, r3
  4079a4:	d10a      	bne.n	4079bc <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4079a6:	bf00      	nop
  4079a8:	78fb      	ldrb	r3, [r7, #3]
  4079aa:	6878      	ldr	r0, [r7, #4]
  4079ac:	4619      	mov	r1, r3
  4079ae:	4b16      	ldr	r3, [pc, #88]	; (407a08 <usart_serial_putchar+0x94>)
  4079b0:	4798      	blx	r3
  4079b2:	4603      	mov	r3, r0
  4079b4:	2b00      	cmp	r3, #0
  4079b6:	d1f7      	bne.n	4079a8 <usart_serial_putchar+0x34>
		return 1;
  4079b8:	2301      	movs	r3, #1
  4079ba:	e01e      	b.n	4079fa <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4079bc:	687a      	ldr	r2, [r7, #4]
  4079be:	4b14      	ldr	r3, [pc, #80]	; (407a10 <usart_serial_putchar+0x9c>)
  4079c0:	429a      	cmp	r2, r3
  4079c2:	d10a      	bne.n	4079da <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  4079c4:	bf00      	nop
  4079c6:	78fb      	ldrb	r3, [r7, #3]
  4079c8:	6878      	ldr	r0, [r7, #4]
  4079ca:	4619      	mov	r1, r3
  4079cc:	4b11      	ldr	r3, [pc, #68]	; (407a14 <usart_serial_putchar+0xa0>)
  4079ce:	4798      	blx	r3
  4079d0:	4603      	mov	r3, r0
  4079d2:	2b00      	cmp	r3, #0
  4079d4:	d1f7      	bne.n	4079c6 <usart_serial_putchar+0x52>
		return 1;
  4079d6:	2301      	movs	r3, #1
  4079d8:	e00f      	b.n	4079fa <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4079da:	687a      	ldr	r2, [r7, #4]
  4079dc:	4b0e      	ldr	r3, [pc, #56]	; (407a18 <usart_serial_putchar+0xa4>)
  4079de:	429a      	cmp	r2, r3
  4079e0:	d10a      	bne.n	4079f8 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  4079e2:	bf00      	nop
  4079e4:	78fb      	ldrb	r3, [r7, #3]
  4079e6:	6878      	ldr	r0, [r7, #4]
  4079e8:	4619      	mov	r1, r3
  4079ea:	4b0a      	ldr	r3, [pc, #40]	; (407a14 <usart_serial_putchar+0xa0>)
  4079ec:	4798      	blx	r3
  4079ee:	4603      	mov	r3, r0
  4079f0:	2b00      	cmp	r3, #0
  4079f2:	d1f7      	bne.n	4079e4 <usart_serial_putchar+0x70>
		return 1;
  4079f4:	2301      	movs	r3, #1
  4079f6:	e000      	b.n	4079fa <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4079f8:	2300      	movs	r3, #0
}
  4079fa:	4618      	mov	r0, r3
  4079fc:	3708      	adds	r7, #8
  4079fe:	46bd      	mov	sp, r7
  407a00:	bd80      	pop	{r7, pc}
  407a02:	bf00      	nop
  407a04:	400e0600 	.word	0x400e0600
  407a08:	0040288d 	.word	0x0040288d
  407a0c:	400e0800 	.word	0x400e0800
  407a10:	40024000 	.word	0x40024000
  407a14:	00402b49 	.word	0x00402b49
  407a18:	40028000 	.word	0x40028000

00407a1c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  407a1c:	b580      	push	{r7, lr}
  407a1e:	b084      	sub	sp, #16
  407a20:	af00      	add	r7, sp, #0
  407a22:	6078      	str	r0, [r7, #4]
  407a24:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  407a26:	2300      	movs	r3, #0
  407a28:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407a2a:	687a      	ldr	r2, [r7, #4]
  407a2c:	4b1e      	ldr	r3, [pc, #120]	; (407aa8 <usart_serial_getchar+0x8c>)
  407a2e:	429a      	cmp	r2, r3
  407a30:	d107      	bne.n	407a42 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  407a32:	bf00      	nop
  407a34:	6878      	ldr	r0, [r7, #4]
  407a36:	6839      	ldr	r1, [r7, #0]
  407a38:	4b1c      	ldr	r3, [pc, #112]	; (407aac <usart_serial_getchar+0x90>)
  407a3a:	4798      	blx	r3
  407a3c:	4603      	mov	r3, r0
  407a3e:	2b00      	cmp	r3, #0
  407a40:	d1f8      	bne.n	407a34 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  407a42:	687a      	ldr	r2, [r7, #4]
  407a44:	4b1a      	ldr	r3, [pc, #104]	; (407ab0 <usart_serial_getchar+0x94>)
  407a46:	429a      	cmp	r2, r3
  407a48:	d107      	bne.n	407a5a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  407a4a:	bf00      	nop
  407a4c:	6878      	ldr	r0, [r7, #4]
  407a4e:	6839      	ldr	r1, [r7, #0]
  407a50:	4b16      	ldr	r3, [pc, #88]	; (407aac <usart_serial_getchar+0x90>)
  407a52:	4798      	blx	r3
  407a54:	4603      	mov	r3, r0
  407a56:	2b00      	cmp	r3, #0
  407a58:	d1f8      	bne.n	407a4c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407a5a:	687a      	ldr	r2, [r7, #4]
  407a5c:	4b15      	ldr	r3, [pc, #84]	; (407ab4 <usart_serial_getchar+0x98>)
  407a5e:	429a      	cmp	r2, r3
  407a60:	d10d      	bne.n	407a7e <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  407a62:	bf00      	nop
  407a64:	f107 030c 	add.w	r3, r7, #12
  407a68:	6878      	ldr	r0, [r7, #4]
  407a6a:	4619      	mov	r1, r3
  407a6c:	4b12      	ldr	r3, [pc, #72]	; (407ab8 <usart_serial_getchar+0x9c>)
  407a6e:	4798      	blx	r3
  407a70:	4603      	mov	r3, r0
  407a72:	2b00      	cmp	r3, #0
  407a74:	d1f6      	bne.n	407a64 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  407a76:	68fb      	ldr	r3, [r7, #12]
  407a78:	b2da      	uxtb	r2, r3
  407a7a:	683b      	ldr	r3, [r7, #0]
  407a7c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  407a7e:	687a      	ldr	r2, [r7, #4]
  407a80:	4b0e      	ldr	r3, [pc, #56]	; (407abc <usart_serial_getchar+0xa0>)
  407a82:	429a      	cmp	r2, r3
  407a84:	d10d      	bne.n	407aa2 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  407a86:	bf00      	nop
  407a88:	f107 030c 	add.w	r3, r7, #12
  407a8c:	6878      	ldr	r0, [r7, #4]
  407a8e:	4619      	mov	r1, r3
  407a90:	4b09      	ldr	r3, [pc, #36]	; (407ab8 <usart_serial_getchar+0x9c>)
  407a92:	4798      	blx	r3
  407a94:	4603      	mov	r3, r0
  407a96:	2b00      	cmp	r3, #0
  407a98:	d1f6      	bne.n	407a88 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  407a9a:	68fb      	ldr	r3, [r7, #12]
  407a9c:	b2da      	uxtb	r2, r3
  407a9e:	683b      	ldr	r3, [r7, #0]
  407aa0:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  407aa2:	3710      	adds	r7, #16
  407aa4:	46bd      	mov	sp, r7
  407aa6:	bd80      	pop	{r7, pc}
  407aa8:	400e0600 	.word	0x400e0600
  407aac:	004028bd 	.word	0x004028bd
  407ab0:	400e0800 	.word	0x400e0800
  407ab4:	40024000 	.word	0x40024000
  407ab8:	00402b7d 	.word	0x00402b7d
  407abc:	40028000 	.word	0x40028000

00407ac0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  407ac0:	b580      	push	{r7, lr}
  407ac2:	b082      	sub	sp, #8
  407ac4:	af00      	add	r7, sp, #0
  407ac6:	6078      	str	r0, [r7, #4]
  407ac8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  407aca:	4b0f      	ldr	r3, [pc, #60]	; (407b08 <stdio_serial_init+0x48>)
  407acc:	687a      	ldr	r2, [r7, #4]
  407ace:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  407ad0:	4b0e      	ldr	r3, [pc, #56]	; (407b0c <stdio_serial_init+0x4c>)
  407ad2:	4a0f      	ldr	r2, [pc, #60]	; (407b10 <stdio_serial_init+0x50>)
  407ad4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  407ad6:	4b0f      	ldr	r3, [pc, #60]	; (407b14 <stdio_serial_init+0x54>)
  407ad8:	4a0f      	ldr	r2, [pc, #60]	; (407b18 <stdio_serial_init+0x58>)
  407ada:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  407adc:	6878      	ldr	r0, [r7, #4]
  407ade:	6839      	ldr	r1, [r7, #0]
  407ae0:	4b0e      	ldr	r3, [pc, #56]	; (407b1c <stdio_serial_init+0x5c>)
  407ae2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  407ae4:	4b0e      	ldr	r3, [pc, #56]	; (407b20 <stdio_serial_init+0x60>)
  407ae6:	681b      	ldr	r3, [r3, #0]
  407ae8:	689b      	ldr	r3, [r3, #8]
  407aea:	4618      	mov	r0, r3
  407aec:	2100      	movs	r1, #0
  407aee:	4b0d      	ldr	r3, [pc, #52]	; (407b24 <stdio_serial_init+0x64>)
  407af0:	4798      	blx	r3
	setbuf(stdin, NULL);
  407af2:	4b0b      	ldr	r3, [pc, #44]	; (407b20 <stdio_serial_init+0x60>)
  407af4:	681b      	ldr	r3, [r3, #0]
  407af6:	685b      	ldr	r3, [r3, #4]
  407af8:	4618      	mov	r0, r3
  407afa:	2100      	movs	r1, #0
  407afc:	4b09      	ldr	r3, [pc, #36]	; (407b24 <stdio_serial_init+0x64>)
  407afe:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  407b00:	3708      	adds	r7, #8
  407b02:	46bd      	mov	sp, r7
  407b04:	bd80      	pop	{r7, pc}
  407b06:	bf00      	nop
  407b08:	200024c8 	.word	0x200024c8
  407b0c:	200024c4 	.word	0x200024c4
  407b10:	00407975 	.word	0x00407975
  407b14:	200024c0 	.word	0x200024c0
  407b18:	00407a1d 	.word	0x00407a1d
  407b1c:	0040787d 	.word	0x0040787d
  407b20:	20000918 	.word	0x20000918
  407b24:	0040d095 	.word	0x0040d095

00407b28 <configure_console>:

/**
 * \brief Configure the console UART.
 */
static void configure_console(void)
{
  407b28:	b590      	push	{r4, r7, lr}
  407b2a:	b085      	sub	sp, #20
  407b2c:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = {
  407b2e:	4b0a      	ldr	r3, [pc, #40]	; (407b58 <configure_console+0x30>)
  407b30:	463c      	mov	r4, r7
  407b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  407b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &usart_serial_options);
  407b38:	463b      	mov	r3, r7
  407b3a:	4808      	ldr	r0, [pc, #32]	; (407b5c <configure_console+0x34>)
  407b3c:	4619      	mov	r1, r3
  407b3e:	4b08      	ldr	r3, [pc, #32]	; (407b60 <configure_console+0x38>)
  407b40:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  407b42:	4b08      	ldr	r3, [pc, #32]	; (407b64 <configure_console+0x3c>)
  407b44:	681b      	ldr	r3, [r3, #0]
  407b46:	689b      	ldr	r3, [r3, #8]
  407b48:	4618      	mov	r0, r3
  407b4a:	2100      	movs	r1, #0
  407b4c:	4b06      	ldr	r3, [pc, #24]	; (407b68 <configure_console+0x40>)
  407b4e:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  407b50:	3714      	adds	r7, #20
  407b52:	46bd      	mov	sp, r7
  407b54:	bd90      	pop	{r4, r7, pc}
  407b56:	bf00      	nop
  407b58:	004164fc 	.word	0x004164fc
  407b5c:	400e0600 	.word	0x400e0600
  407b60:	00407ac1 	.word	0x00407ac1
  407b64:	20000918 	.word	0x20000918
  407b68:	0040d095 	.word	0x0040d095

00407b6c <powerOnInit>:
/**
 * powerOnInit(void)
 * @brief Initialize the board after power up. 
 */
void powerOnInit(void) 
{		
  407b6c:	b580      	push	{r7, lr}
  407b6e:	af00      	add	r7, sp, #0
		static FRESULT res;
		
		//configure the gpio
		drv_gpio_initializeAll();
  407b70:	4b2e      	ldr	r3, [pc, #184]	; (407c2c <powerOnInit+0xc0>)
  407b72:	4798      	blx	r3
		//drv_gpio_ConfigureBLEForProgramming(); 
		//configure UART1 to be used as a STDIO function
		configure_console();
  407b74:	4b2e      	ldr	r3, [pc, #184]	; (407c30 <powerOnInit+0xc4>)
  407b76:	4798      	blx	r3
		//initialize the 
		if(drv_uart_init(&uart0Config) != STATUS_PASS)
  407b78:	482e      	ldr	r0, [pc, #184]	; (407c34 <powerOnInit+0xc8>)
  407b7a:	4b2f      	ldr	r3, [pc, #188]	; (407c38 <powerOnInit+0xcc>)
  407b7c:	4798      	blx	r3
  407b7e:	4603      	mov	r3, r0
  407b80:	2b00      	cmp	r3, #0
  407b82:	d000      	beq.n	407b86 <powerOnInit+0x1a>
		{
			while(1); //spin here
  407b84:	e7fe      	b.n	407b84 <powerOnInit+0x18>
		}		
		if(drv_uart_init(&uart1Config) != STATUS_PASS)
  407b86:	482d      	ldr	r0, [pc, #180]	; (407c3c <powerOnInit+0xd0>)
  407b88:	4b2b      	ldr	r3, [pc, #172]	; (407c38 <powerOnInit+0xcc>)
  407b8a:	4798      	blx	r3
  407b8c:	4603      	mov	r3, r0
  407b8e:	2b00      	cmp	r3, #0
  407b90:	d000      	beq.n	407b94 <powerOnInit+0x28>
		{
			while(1); //spin here
  407b92:	e7fe      	b.n	407b92 <powerOnInit+0x26>
		}
		if(drv_uart_init(&usart0Config) != STATUS_PASS)
  407b94:	482a      	ldr	r0, [pc, #168]	; (407c40 <powerOnInit+0xd4>)
  407b96:	4b28      	ldr	r3, [pc, #160]	; (407c38 <powerOnInit+0xcc>)
  407b98:	4798      	blx	r3
  407b9a:	4603      	mov	r3, r0
  407b9c:	2b00      	cmp	r3, #0
  407b9e:	d000      	beq.n	407ba2 <powerOnInit+0x36>
		{
			while(1); //spin here
  407ba0:	e7fe      	b.n	407ba0 <powerOnInit+0x34>
		}
		if(drv_uart_init(&usart1Config) != STATUS_PASS)
  407ba2:	4828      	ldr	r0, [pc, #160]	; (407c44 <powerOnInit+0xd8>)
  407ba4:	4b24      	ldr	r3, [pc, #144]	; (407c38 <powerOnInit+0xcc>)
  407ba6:	4798      	blx	r3
  407ba8:	4603      	mov	r3, r0
  407baa:	2b00      	cmp	r3, #0
  407bac:	d000      	beq.n	407bb0 <powerOnInit+0x44>
		{
			while(1); //spin here
  407bae:	e7fe      	b.n	407bae <powerOnInit+0x42>
			//drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD, &pinState);
		//}
		
		////Initialize SD card
		//
		sd_mmc_init();
  407bb0:	4b25      	ldr	r3, [pc, #148]	; (407c48 <powerOnInit+0xdc>)
  407bb2:	4798      	blx	r3
		///* Wait card present and ready */
		//
		////we don't want the firmware to freeze if we don't have an SD card. 
		do
		{
			status = sd_mmc_test_unit_ready(0);
  407bb4:	2000      	movs	r0, #0
  407bb6:	4b25      	ldr	r3, [pc, #148]	; (407c4c <powerOnInit+0xe0>)
  407bb8:	4798      	blx	r3
  407bba:	4603      	mov	r3, r0
  407bbc:	461a      	mov	r2, r3
  407bbe:	4b24      	ldr	r3, [pc, #144]	; (407c50 <powerOnInit+0xe4>)
  407bc0:	701a      	strb	r2, [r3, #0]
			if (CTRL_FAIL == status)
  407bc2:	4b23      	ldr	r3, [pc, #140]	; (407c50 <powerOnInit+0xe4>)
  407bc4:	781b      	ldrb	r3, [r3, #0]
  407bc6:	2b01      	cmp	r3, #1
  407bc8:	d10c      	bne.n	407be4 <powerOnInit+0x78>
			{
				printf("Card install FAIL\n\r");
  407bca:	4822      	ldr	r0, [pc, #136]	; (407c54 <powerOnInit+0xe8>)
  407bcc:	4b22      	ldr	r3, [pc, #136]	; (407c58 <powerOnInit+0xec>)
  407bce:	4798      	blx	r3
				printf("Please unplug and re-plug the card.\n\r");
  407bd0:	4822      	ldr	r0, [pc, #136]	; (407c5c <powerOnInit+0xf0>)
  407bd2:	4b21      	ldr	r3, [pc, #132]	; (407c58 <powerOnInit+0xec>)
  407bd4:	4798      	blx	r3
				while (CTRL_NO_PRESENT != sd_mmc_check(0))
  407bd6:	bf00      	nop
  407bd8:	2000      	movs	r0, #0
  407bda:	4b21      	ldr	r3, [pc, #132]	; (407c60 <powerOnInit+0xf4>)
  407bdc:	4798      	blx	r3
  407bde:	4603      	mov	r3, r0
  407be0:	2b02      	cmp	r3, #2
  407be2:	d1f9      	bne.n	407bd8 <powerOnInit+0x6c>
				{
				}
			}
		} while (CTRL_GOOD != status);
  407be4:	4b1a      	ldr	r3, [pc, #104]	; (407c50 <powerOnInit+0xe4>)
  407be6:	781b      	ldrb	r3, [r3, #0]
  407be8:	2b00      	cmp	r3, #0
  407bea:	d1e3      	bne.n	407bb4 <powerOnInit+0x48>
		
		
		/*	Mount the SD card	*/
		memset(&fs, 0, sizeof(FATFS));
  407bec:	481d      	ldr	r0, [pc, #116]	; (407c64 <powerOnInit+0xf8>)
  407bee:	2100      	movs	r1, #0
  407bf0:	f44f 720c 	mov.w	r2, #560	; 0x230
  407bf4:	4b1c      	ldr	r3, [pc, #112]	; (407c68 <powerOnInit+0xfc>)
  407bf6:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  407bf8:	2000      	movs	r0, #0
  407bfa:	491a      	ldr	r1, [pc, #104]	; (407c64 <powerOnInit+0xf8>)
  407bfc:	4b1b      	ldr	r3, [pc, #108]	; (407c6c <powerOnInit+0x100>)
  407bfe:	4798      	blx	r3
  407c00:	4603      	mov	r3, r0
  407c02:	461a      	mov	r2, r3
  407c04:	4b1a      	ldr	r3, [pc, #104]	; (407c70 <powerOnInit+0x104>)
  407c06:	701a      	strb	r2, [r3, #0]
		if (res == FR_INVALID_DRIVE)
  407c08:	4b19      	ldr	r3, [pc, #100]	; (407c70 <powerOnInit+0x104>)
  407c0a:	781b      	ldrb	r3, [r3, #0]
  407c0c:	2b0b      	cmp	r3, #11
  407c0e:	d103      	bne.n	407c18 <powerOnInit+0xac>
		{
			printf("Error: Invalid Drive\r\n");
  407c10:	4818      	ldr	r0, [pc, #96]	; (407c74 <powerOnInit+0x108>)
  407c12:	4b11      	ldr	r3, [pc, #68]	; (407c58 <powerOnInit+0xec>)
  407c14:	4798      	blx	r3
			return 0;
  407c16:	e008      	b.n	407c2a <powerOnInit+0xbe>
			//DebugLogBufPrint("Success: Passed Read Tests\r\n");
		//}
		//DebugLogSave();
		
		//load the settings
		if(loadSettings(SETTINGS_FILENAME) != STATUS_PASS)
  407c18:	4817      	ldr	r0, [pc, #92]	; (407c78 <powerOnInit+0x10c>)
  407c1a:	4b18      	ldr	r3, [pc, #96]	; (407c7c <powerOnInit+0x110>)
  407c1c:	4798      	blx	r3
  407c1e:	4603      	mov	r3, r0
  407c20:	2b00      	cmp	r3, #0
  407c22:	d002      	beq.n	407c2a <powerOnInit+0xbe>
		{
			printf("failed to get read settings\r\n");
  407c24:	4816      	ldr	r0, [pc, #88]	; (407c80 <powerOnInit+0x114>)
  407c26:	4b0c      	ldr	r3, [pc, #48]	; (407c58 <powerOnInit+0xec>)
  407c28:	4798      	blx	r3
		}
		//DebugLogSave();
  407c2a:	bd80      	pop	{r7, pc}
  407c2c:	00408025 	.word	0x00408025
  407c30:	00407b29 	.word	0x00407b29
  407c34:	2000004c 	.word	0x2000004c
  407c38:	004088d1 	.word	0x004088d1
  407c3c:	20000064 	.word	0x20000064
  407c40:	2000007c 	.word	0x2000007c
  407c44:	20000094 	.word	0x20000094
  407c48:	004012a1 	.word	0x004012a1
  407c4c:	00401759 	.word	0x00401759
  407c50:	20000f78 	.word	0x20000f78
  407c54:	0041650c 	.word	0x0041650c
  407c58:	0040c921 	.word	0x0040c921
  407c5c:	00416520 	.word	0x00416520
  407c60:	004012e9 	.word	0x004012e9
  407c64:	20000f7c 	.word	0x20000f7c
  407c68:	0040cfd5 	.word	0x0040cfd5
  407c6c:	00404f65 	.word	0x00404f65
  407c70:	200011ac 	.word	0x200011ac
  407c74:	00416548 	.word	0x00416548
  407c78:	00416560 	.word	0x00416560
  407c7c:	00407c85 	.word	0x00407c85
  407c80:	00416570 	.word	0x00416570

00407c84 <loadSettings>:
		return result;
	}	
}

status_t loadSettings(char* filename)
{
  407c84:	b590      	push	{r4, r7, lr}
  407c86:	b08b      	sub	sp, #44	; 0x2c
  407c88:	af00      	add	r7, sp, #0
  407c8a:	6078      	str	r0, [r7, #4]
	
	uint8_t result = SUCCESS;
  407c8c:	2300      	movs	r3, #0
  407c8e:	75fb      	strb	r3, [r7, #23]
	static FIL configFileObj;
	//printf("Opening SD Card to read\r\n");
	DebugLogBufPrint("Opening SD Card to read\r\n");
  407c90:	486c      	ldr	r0, [pc, #432]	; (407e44 <loadSettings+0x1c0>)
  407c92:	4b6d      	ldr	r3, [pc, #436]	; (407e48 <loadSettings+0x1c4>)
  407c94:	4798      	blx	r3
	
	filename[0] = LUN_ID_SD_MMC_0_MEM + '0'; //is this necessary? 
  407c96:	687b      	ldr	r3, [r7, #4]
  407c98:	2230      	movs	r2, #48	; 0x30
  407c9a:	701a      	strb	r2, [r3, #0]
	FRESULT res = f_open(&configFileObj, (char const *)filename, FA_OPEN_EXISTING | FA_READ);
  407c9c:	486b      	ldr	r0, [pc, #428]	; (407e4c <loadSettings+0x1c8>)
  407c9e:	6879      	ldr	r1, [r7, #4]
  407ca0:	2201      	movs	r2, #1
  407ca2:	4b6b      	ldr	r3, [pc, #428]	; (407e50 <loadSettings+0x1cc>)
  407ca4:	4798      	blx	r3
  407ca6:	4603      	mov	r3, r0
  407ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (res != FR_OK)
  407cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407cb0:	2b00      	cmp	r3, #0
  407cb2:	d006      	beq.n	407cc2 <loadSettings+0x3e>
	{
		result = CANNOT_OPEN;
  407cb4:	2302      	movs	r3, #2
  407cb6:	75fb      	strb	r3, [r7, #23]
		//printf("Error: Cannot Open file\r\n");
		DebugLogBufPrint("Error: Cannot Open file\r\n");
  407cb8:	4866      	ldr	r0, [pc, #408]	; (407e54 <loadSettings+0x1d0>)
  407cba:	4b63      	ldr	r3, [pc, #396]	; (407e48 <loadSettings+0x1c4>)
  407cbc:	4798      	blx	r3
		return STATUS_FAIL;
  407cbe:	2301      	movs	r3, #1
  407cc0:	e0bc      	b.n	407e3c <loadSettings+0x1b8>
	}
	//read the whole file into a buffer
	//printf("Reading from SD\r\n");
	DebugLogBufPrint("Reading from SD\r\n");
  407cc2:	4865      	ldr	r0, [pc, #404]	; (407e58 <loadSettings+0x1d4>)
  407cc4:	4b60      	ldr	r3, [pc, #384]	; (407e48 <loadSettings+0x1c4>)
  407cc6:	4798      	blx	r3
	//char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
	UINT bytes_read = 0, total_bytes_read = 0;	
  407cc8:	2300      	movs	r3, #0
  407cca:	613b      	str	r3, [r7, #16]
  407ccc:	2300      	movs	r3, #0
  407cce:	623b      	str	r3, [r7, #32]
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  407cd0:	e011      	b.n	407cf6 <loadSettings+0x72>
	{
		res = f_read(&configFileObj, data_buffer+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
  407cd2:	6a3a      	ldr	r2, [r7, #32]
  407cd4:	4b61      	ldr	r3, [pc, #388]	; (407e5c <loadSettings+0x1d8>)
  407cd6:	18d1      	adds	r1, r2, r3
  407cd8:	6a3b      	ldr	r3, [r7, #32]
  407cda:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
  407cde:	f107 0310 	add.w	r3, r7, #16
  407ce2:	485a      	ldr	r0, [pc, #360]	; (407e4c <loadSettings+0x1c8>)
  407ce4:	4c5e      	ldr	r4, [pc, #376]	; (407e60 <loadSettings+0x1dc>)
  407ce6:	47a0      	blx	r4
  407ce8:	4603      	mov	r3, r0
  407cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		total_bytes_read += bytes_read; 
  407cee:	693b      	ldr	r3, [r7, #16]
  407cf0:	6a3a      	ldr	r2, [r7, #32]
  407cf2:	4413      	add	r3, r2
  407cf4:	623b      	str	r3, [r7, #32]
	//read the whole file into a buffer
	//printf("Reading from SD\r\n");
	DebugLogBufPrint("Reading from SD\r\n");
	//char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
	UINT bytes_read = 0, total_bytes_read = 0;	
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  407cf6:	4b55      	ldr	r3, [pc, #340]	; (407e4c <loadSettings+0x1c8>)
  407cf8:	68da      	ldr	r2, [r3, #12]
  407cfa:	6a3b      	ldr	r3, [r7, #32]
  407cfc:	429a      	cmp	r2, r3
  407cfe:	d903      	bls.n	407d08 <loadSettings+0x84>
  407d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407d04:	2b00      	cmp	r3, #0
  407d06:	d0e4      	beq.n	407cd2 <loadSettings+0x4e>
		res = f_read(&configFileObj, data_buffer+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
		total_bytes_read += bytes_read; 
	}
	
	//now parse the file and 
	status_t step_status = STATUS_PASS;
  407d08:	2300      	movs	r3, #0
  407d0a:	75bb      	strb	r3, [r7, #22]
	char* bufPtr = data_buffer; //set pointer to start of buffer
  407d0c:	4b53      	ldr	r3, [pc, #332]	; (407e5c <loadSettings+0x1d8>)
  407d0e:	61fb      	str	r3, [r7, #28]
	//char line[50] = {0}; 
	int NumberOfNods = 0;	
  407d10:	2300      	movs	r3, #0
  407d12:	60fb      	str	r3, [r7, #12]
	if(getLineFromBuf(bufPtr, line, sizeof(line)) == PASS)
  407d14:	69f8      	ldr	r0, [r7, #28]
  407d16:	4953      	ldr	r1, [pc, #332]	; (407e64 <loadSettings+0x1e0>)
  407d18:	2232      	movs	r2, #50	; 0x32
  407d1a:	4b53      	ldr	r3, [pc, #332]	; (407e68 <loadSettings+0x1e4>)
  407d1c:	4798      	blx	r3
  407d1e:	4603      	mov	r3, r0
  407d20:	2b00      	cmp	r3, #0
  407d22:	d118      	bne.n	407d56 <loadSettings+0xd2>
	{
		if(sscanf(line, "%d,\r\n",&NumberOfNods) < 1)
  407d24:	f107 030c 	add.w	r3, r7, #12
  407d28:	484e      	ldr	r0, [pc, #312]	; (407e64 <loadSettings+0x1e0>)
  407d2a:	4950      	ldr	r1, [pc, #320]	; (407e6c <loadSettings+0x1e8>)
  407d2c:	461a      	mov	r2, r3
  407d2e:	4b50      	ldr	r3, [pc, #320]	; (407e70 <loadSettings+0x1ec>)
  407d30:	4798      	blx	r3
  407d32:	4603      	mov	r3, r0
  407d34:	2b00      	cmp	r3, #0
  407d36:	dc07      	bgt.n	407d48 <loadSettings+0xc4>
		{
			printf("failed to read settings\r\n");
  407d38:	484e      	ldr	r0, [pc, #312]	; (407e74 <loadSettings+0x1f0>)
  407d3a:	4b4f      	ldr	r3, [pc, #316]	; (407e78 <loadSettings+0x1f4>)
  407d3c:	4798      	blx	r3
			DebugLogBufPrint("failed to read settings\r\n");
  407d3e:	484d      	ldr	r0, [pc, #308]	; (407e74 <loadSettings+0x1f0>)
  407d40:	4b41      	ldr	r3, [pc, #260]	; (407e48 <loadSettings+0x1c4>)
  407d42:	4798      	blx	r3
			return STATUS_FAIL; 
  407d44:	2301      	movs	r3, #1
  407d46:	e079      	b.n	407e3c <loadSettings+0x1b8>
		}
		bufPtr += strlen(line); 		
  407d48:	4846      	ldr	r0, [pc, #280]	; (407e64 <loadSettings+0x1e0>)
  407d4a:	4b4c      	ldr	r3, [pc, #304]	; (407e7c <loadSettings+0x1f8>)
  407d4c:	4798      	blx	r3
  407d4e:	4603      	mov	r3, r0
  407d50:	69fa      	ldr	r2, [r7, #28]
  407d52:	4413      	add	r3, r2
  407d54:	61fb      	str	r3, [r7, #28]
	}
	brainSettings.numberOfImus = NumberOfNods; 
  407d56:	68fa      	ldr	r2, [r7, #12]
  407d58:	4b49      	ldr	r3, [pc, #292]	; (407e80 <loadSettings+0x1fc>)
  407d5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	int i = 0; 
  407d5e:	2300      	movs	r3, #0
  407d60:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < NumberOfNods; i++)
  407d62:	2300      	movs	r3, #0
  407d64:	61bb      	str	r3, [r7, #24]
  407d66:	e049      	b.n	407dfc <loadSettings+0x178>
	{
		if(getLineFromBuf(bufPtr, line,sizeof(line)) == STATUS_PASS)
  407d68:	69f8      	ldr	r0, [r7, #28]
  407d6a:	493e      	ldr	r1, [pc, #248]	; (407e64 <loadSettings+0x1e0>)
  407d6c:	2232      	movs	r2, #50	; 0x32
  407d6e:	4b3e      	ldr	r3, [pc, #248]	; (407e68 <loadSettings+0x1e4>)
  407d70:	4798      	blx	r3
  407d72:	4603      	mov	r3, r0
  407d74:	2b00      	cmp	r3, #0
  407d76:	d140      	bne.n	407dfa <loadSettings+0x176>
		{
			if(sscanf(line,"%d,%s\r\n", &brainSettings.imuSettings[i].imuId, brainSettings.imuSettings[i].imuMacAddress) < 2)
  407d78:	69ba      	ldr	r2, [r7, #24]
  407d7a:	4613      	mov	r3, r2
  407d7c:	009b      	lsls	r3, r3, #2
  407d7e:	4413      	add	r3, r2
  407d80:	009b      	lsls	r3, r3, #2
  407d82:	f103 0210 	add.w	r2, r3, #16
  407d86:	4b3e      	ldr	r3, [pc, #248]	; (407e80 <loadSettings+0x1fc>)
  407d88:	4413      	add	r3, r2
  407d8a:	1d1c      	adds	r4, r3, #4
  407d8c:	69ba      	ldr	r2, [r7, #24]
  407d8e:	4613      	mov	r3, r2
  407d90:	009b      	lsls	r3, r3, #2
  407d92:	4413      	add	r3, r2
  407d94:	009b      	lsls	r3, r3, #2
  407d96:	4a3a      	ldr	r2, [pc, #232]	; (407e80 <loadSettings+0x1fc>)
  407d98:	4413      	add	r3, r2
  407d9a:	3304      	adds	r3, #4
  407d9c:	4831      	ldr	r0, [pc, #196]	; (407e64 <loadSettings+0x1e0>)
  407d9e:	4939      	ldr	r1, [pc, #228]	; (407e84 <loadSettings+0x200>)
  407da0:	4622      	mov	r2, r4
  407da2:	4c33      	ldr	r4, [pc, #204]	; (407e70 <loadSettings+0x1ec>)
  407da4:	47a0      	blx	r4
  407da6:	4603      	mov	r3, r0
  407da8:	2b01      	cmp	r3, #1
  407daa:	dc06      	bgt.n	407dba <loadSettings+0x136>
			{
				printf("failed to parse IMU settings\r\n"); 
  407dac:	4836      	ldr	r0, [pc, #216]	; (407e88 <loadSettings+0x204>)
  407dae:	4b32      	ldr	r3, [pc, #200]	; (407e78 <loadSettings+0x1f4>)
  407db0:	4798      	blx	r3
				DebugLogBufPrint("failed to parse IMU settings\r\n");
  407db2:	4835      	ldr	r0, [pc, #212]	; (407e88 <loadSettings+0x204>)
  407db4:	4b24      	ldr	r3, [pc, #144]	; (407e48 <loadSettings+0x1c4>)
  407db6:	4798      	blx	r3
				break;
  407db8:	e024      	b.n	407e04 <loadSettings+0x180>
			}
			printf("loaded settings for IMU %d, %s\r\n",brainSettings.imuSettings[i].imuId, brainSettings.imuSettings[i].imuMacAddress);
  407dba:	4931      	ldr	r1, [pc, #196]	; (407e80 <loadSettings+0x1fc>)
  407dbc:	69ba      	ldr	r2, [r7, #24]
  407dbe:	4613      	mov	r3, r2
  407dc0:	009b      	lsls	r3, r3, #2
  407dc2:	4413      	add	r3, r2
  407dc4:	009b      	lsls	r3, r3, #2
  407dc6:	440b      	add	r3, r1
  407dc8:	3310      	adds	r3, #16
  407dca:	6859      	ldr	r1, [r3, #4]
  407dcc:	69ba      	ldr	r2, [r7, #24]
  407dce:	4613      	mov	r3, r2
  407dd0:	009b      	lsls	r3, r3, #2
  407dd2:	4413      	add	r3, r2
  407dd4:	009b      	lsls	r3, r3, #2
  407dd6:	4a2a      	ldr	r2, [pc, #168]	; (407e80 <loadSettings+0x1fc>)
  407dd8:	4413      	add	r3, r2
  407dda:	3304      	adds	r3, #4
  407ddc:	482b      	ldr	r0, [pc, #172]	; (407e8c <loadSettings+0x208>)
  407dde:	461a      	mov	r2, r3
  407de0:	4b25      	ldr	r3, [pc, #148]	; (407e78 <loadSettings+0x1f4>)
  407de2:	4798      	blx	r3
			bufPtr += strlen(line); 
  407de4:	481f      	ldr	r0, [pc, #124]	; (407e64 <loadSettings+0x1e0>)
  407de6:	4b25      	ldr	r3, [pc, #148]	; (407e7c <loadSettings+0x1f8>)
  407de8:	4798      	blx	r3
  407dea:	4603      	mov	r3, r0
  407dec:	69fa      	ldr	r2, [r7, #28]
  407dee:	4413      	add	r3, r2
  407df0:	61fb      	str	r3, [r7, #28]
		}
		bufPtr += strlen(line); 		
	}
	brainSettings.numberOfImus = NumberOfNods; 
	int i = 0; 
	for(i = 0; i < NumberOfNods; i++)
  407df2:	69bb      	ldr	r3, [r7, #24]
  407df4:	3301      	adds	r3, #1
  407df6:	61bb      	str	r3, [r7, #24]
  407df8:	e000      	b.n	407dfc <loadSettings+0x178>
			printf("loaded settings for IMU %d, %s\r\n",brainSettings.imuSettings[i].imuId, brainSettings.imuSettings[i].imuMacAddress);
			bufPtr += strlen(line); 
		}
		else
		{
			break; 
  407dfa:	e003      	b.n	407e04 <loadSettings+0x180>
		}
		bufPtr += strlen(line); 		
	}
	brainSettings.numberOfImus = NumberOfNods; 
	int i = 0; 
	for(i = 0; i < NumberOfNods; i++)
  407dfc:	68fb      	ldr	r3, [r7, #12]
  407dfe:	69ba      	ldr	r2, [r7, #24]
  407e00:	429a      	cmp	r2, r3
  407e02:	dbb1      	blt.n	407d68 <loadSettings+0xe4>
		else
		{
			break; 
		}		
	}	
	printf("Closing the file\r\n");
  407e04:	4822      	ldr	r0, [pc, #136]	; (407e90 <loadSettings+0x20c>)
  407e06:	4b1c      	ldr	r3, [pc, #112]	; (407e78 <loadSettings+0x1f4>)
  407e08:	4798      	blx	r3
	DebugLogBufPrint("Closing the file\r\n");
  407e0a:	4821      	ldr	r0, [pc, #132]	; (407e90 <loadSettings+0x20c>)
  407e0c:	4b0e      	ldr	r3, [pc, #56]	; (407e48 <loadSettings+0x1c4>)
  407e0e:	4798      	blx	r3
	res = f_close(&configFileObj);
  407e10:	480e      	ldr	r0, [pc, #56]	; (407e4c <loadSettings+0x1c8>)
  407e12:	4b20      	ldr	r3, [pc, #128]	; (407e94 <loadSettings+0x210>)
  407e14:	4798      	blx	r3
  407e16:	4603      	mov	r3, r0
  407e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (res != FR_OK)
  407e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407e20:	2b00      	cmp	r3, #0
  407e22:	d007      	beq.n	407e34 <loadSettings+0x1b0>
	{		
		printf("Error: Cannot Open file\r\n");
  407e24:	480b      	ldr	r0, [pc, #44]	; (407e54 <loadSettings+0x1d0>)
  407e26:	4b14      	ldr	r3, [pc, #80]	; (407e78 <loadSettings+0x1f4>)
  407e28:	4798      	blx	r3
		DebugLogBufPrint("Error: Cannot Open file\r\n");
  407e2a:	480a      	ldr	r0, [pc, #40]	; (407e54 <loadSettings+0x1d0>)
  407e2c:	4b06      	ldr	r3, [pc, #24]	; (407e48 <loadSettings+0x1c4>)
  407e2e:	4798      	blx	r3
		return STATUS_FAIL;
  407e30:	2301      	movs	r3, #1
  407e32:	e003      	b.n	407e3c <loadSettings+0x1b8>
	}
	brainSettings.isLoaded = 1; 	
  407e34:	4b12      	ldr	r3, [pc, #72]	; (407e80 <loadSettings+0x1fc>)
  407e36:	2201      	movs	r2, #1
  407e38:	601a      	str	r2, [r3, #0]
	return STATUS_PASS; 	
  407e3a:	2300      	movs	r3, #0
	
}
  407e3c:	4618      	mov	r0, r3
  407e3e:	372c      	adds	r7, #44	; 0x2c
  407e40:	46bd      	mov	sp, r7
  407e42:	bd90      	pop	{r4, r7, pc}
  407e44:	00416590 	.word	0x00416590
  407e48:	00407f29 	.word	0x00407f29
  407e4c:	20001ab4 	.word	0x20001ab4
  407e50:	00404fc1 	.word	0x00404fc1
  407e54:	004165ac 	.word	0x004165ac
  407e58:	004165c8 	.word	0x004165c8
  407e5c:	200011e4 	.word	0x200011e4
  407e60:	004053f5 	.word	0x004053f5
  407e64:	200011b0 	.word	0x200011b0
  407e68:	00407e99 	.word	0x00407e99
  407e6c:	004165f0 	.word	0x004165f0
  407e70:	0040d259 	.word	0x0040d259
  407e74:	004165f8 	.word	0x004165f8
  407e78:	0040c921 	.word	0x0040c921
  407e7c:	0040d65d 	.word	0x0040d65d
  407e80:	200019e4 	.word	0x200019e4
  407e84:	00416614 	.word	0x00416614
  407e88:	0041661c 	.word	0x0041661c
  407e8c:	0041663c 	.word	0x0041663c
  407e90:	004165dc 	.word	0x004165dc
  407e94:	00405b95 	.word	0x00405b95

00407e98 <getLineFromBuf>:


//Static functions

status_t getLineFromBuf(char* bufPtr, char* resp, size_t respSize)
{
  407e98:	b580      	push	{r7, lr}
  407e9a:	b088      	sub	sp, #32
  407e9c:	af00      	add	r7, sp, #0
  407e9e:	60f8      	str	r0, [r7, #12]
  407ea0:	60b9      	str	r1, [r7, #8]
  407ea2:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_FAIL; 
  407ea4:	2301      	movs	r3, #1
  407ea6:	77fb      	strb	r3, [r7, #31]
	int bufLen = strlen(bufPtr); 
  407ea8:	68f8      	ldr	r0, [r7, #12]
  407eaa:	4b1e      	ldr	r3, [pc, #120]	; (407f24 <getLineFromBuf+0x8c>)
  407eac:	4798      	blx	r3
  407eae:	4603      	mov	r3, r0
  407eb0:	617b      	str	r3, [r7, #20]
	int i = 0;
  407eb2:	2300      	movs	r3, #0
  407eb4:	61bb      	str	r3, [r7, #24]
	if(bufLen == 0)
  407eb6:	697b      	ldr	r3, [r7, #20]
  407eb8:	2b00      	cmp	r3, #0
  407eba:	d101      	bne.n	407ec0 <getLineFromBuf+0x28>
	{
		return STATUS_FAIL; 
  407ebc:	2301      	movs	r3, #1
  407ebe:	e02d      	b.n	407f1c <getLineFromBuf+0x84>
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  407ec0:	2300      	movs	r3, #0
  407ec2:	61bb      	str	r3, [r7, #24]
  407ec4:	e019      	b.n	407efa <getLineFromBuf+0x62>
	{
		resp[i] = bufPtr[i]; 
  407ec6:	69bb      	ldr	r3, [r7, #24]
  407ec8:	68ba      	ldr	r2, [r7, #8]
  407eca:	4413      	add	r3, r2
  407ecc:	69ba      	ldr	r2, [r7, #24]
  407ece:	68f9      	ldr	r1, [r7, #12]
  407ed0:	440a      	add	r2, r1
  407ed2:	7812      	ldrb	r2, [r2, #0]
  407ed4:	701a      	strb	r2, [r3, #0]
		if(resp[i] == '\n')
  407ed6:	69bb      	ldr	r3, [r7, #24]
  407ed8:	68ba      	ldr	r2, [r7, #8]
  407eda:	4413      	add	r3, r2
  407edc:	781b      	ldrb	r3, [r3, #0]
  407ede:	2b0a      	cmp	r3, #10
  407ee0:	d108      	bne.n	407ef4 <getLineFromBuf+0x5c>
		{
			result = STATUS_PASS;
  407ee2:	2300      	movs	r3, #0
  407ee4:	77fb      	strb	r3, [r7, #31]
			resp[i+1] = 0; //terminate the string! 
  407ee6:	69bb      	ldr	r3, [r7, #24]
  407ee8:	3301      	adds	r3, #1
  407eea:	68ba      	ldr	r2, [r7, #8]
  407eec:	4413      	add	r3, r2
  407eee:	2200      	movs	r2, #0
  407ef0:	701a      	strb	r2, [r3, #0]
			break; 			
  407ef2:	e00a      	b.n	407f0a <getLineFromBuf+0x72>
	int i = 0;
	if(bufLen == 0)
	{
		return STATUS_FAIL; 
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  407ef4:	69bb      	ldr	r3, [r7, #24]
  407ef6:	3301      	adds	r3, #1
  407ef8:	61bb      	str	r3, [r7, #24]
  407efa:	69ba      	ldr	r2, [r7, #24]
  407efc:	697b      	ldr	r3, [r7, #20]
  407efe:	429a      	cmp	r2, r3
  407f00:	da03      	bge.n	407f0a <getLineFromBuf+0x72>
  407f02:	69ba      	ldr	r2, [r7, #24]
  407f04:	687b      	ldr	r3, [r7, #4]
  407f06:	429a      	cmp	r2, r3
  407f08:	d3dd      	bcc.n	407ec6 <getLineFromBuf+0x2e>
			result = STATUS_PASS;
			resp[i+1] = 0; //terminate the string! 
			break; 			
		}		
	}
	if(result == STATUS_PASS)
  407f0a:	7ffb      	ldrb	r3, [r7, #31]
  407f0c:	2b00      	cmp	r3, #0
  407f0e:	d104      	bne.n	407f1a <getLineFromBuf+0x82>
	{
		bufPtr += i+1; 
  407f10:	69bb      	ldr	r3, [r7, #24]
  407f12:	3301      	adds	r3, #1
  407f14:	68fa      	ldr	r2, [r7, #12]
  407f16:	4413      	add	r3, r2
  407f18:	60fb      	str	r3, [r7, #12]
	}
	return result; 
  407f1a:	7ffb      	ldrb	r3, [r7, #31]
  407f1c:	4618      	mov	r0, r3
  407f1e:	3720      	adds	r7, #32
  407f20:	46bd      	mov	sp, r7
  407f22:	bd80      	pop	{r7, pc}
  407f24:	0040d65d 	.word	0x0040d65d

00407f28 <DebugLogBufPrint>:

/**
 * \brief This function prints the input string to a buffer which is later stored in SD Card
 */
void DebugLogBufPrint(char* InputString)
{
  407f28:	b590      	push	{r4, r7, lr}
  407f2a:	b085      	sub	sp, #20
  407f2c:	af02      	add	r7, sp, #8
  407f2e:	6078      	str	r0, [r7, #4]
	sgSDWriteLockBit = false;
  407f30:	4b24      	ldr	r3, [pc, #144]	; (407fc4 <DebugLogBufPrint+0x9c>)
  407f32:	2200      	movs	r2, #0
  407f34:	701a      	strb	r2, [r3, #0]
	if (DebugLogSemaphore != NULL)		//Check if Semaphore is defined
  407f36:	4b24      	ldr	r3, [pc, #144]	; (407fc8 <DebugLogBufPrint+0xa0>)
  407f38:	681b      	ldr	r3, [r3, #0]
  407f3a:	2b00      	cmp	r3, #0
  407f3c:	d03e      	beq.n	407fbc <DebugLogBufPrint+0x94>
	{
		if ((xSemaphoreTake(DebugLogSemaphore, (portTickType) 1000) == pdTRUE) )		//Semaphore available
  407f3e:	4b22      	ldr	r3, [pc, #136]	; (407fc8 <DebugLogBufPrint+0xa0>)
  407f40:	681b      	ldr	r3, [r3, #0]
  407f42:	4618      	mov	r0, r3
  407f44:	2100      	movs	r1, #0
  407f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  407f4a:	2300      	movs	r3, #0
  407f4c:	4c1f      	ldr	r4, [pc, #124]	; (407fcc <DebugLogBufPrint+0xa4>)
  407f4e:	47a0      	blx	r4
  407f50:	4603      	mov	r3, r0
  407f52:	2b01      	cmp	r3, #1
  407f54:	d12f      	bne.n	407fb6 <DebugLogBufPrint+0x8e>
		{
			//size = strlen(InputString);
			//memcpy(&(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]), InputString, size);	//Store the input String to the defined DebugLog buffer
			//printf("%s", &(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]));		//Debug Print function
			//DebugLog.DebugLogBufHead += size;
			size = snprintf(&(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]), (DATA_SIZE - DebugLog.DebugLogBufHead), "%d: %s", sgSysTickCount, InputString);
  407f56:	4b1e      	ldr	r3, [pc, #120]	; (407fd0 <DebugLogBufPrint+0xa8>)
  407f58:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  407f5c:	4b1c      	ldr	r3, [pc, #112]	; (407fd0 <DebugLogBufPrint+0xa8>)
  407f5e:	18d1      	adds	r1, r2, r3
  407f60:	4b1b      	ldr	r3, [pc, #108]	; (407fd0 <DebugLogBufPrint+0xa8>)
  407f62:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  407f66:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
  407f6a:	4b1a      	ldr	r3, [pc, #104]	; (407fd4 <DebugLogBufPrint+0xac>)
  407f6c:	681b      	ldr	r3, [r3, #0]
  407f6e:	6878      	ldr	r0, [r7, #4]
  407f70:	9000      	str	r0, [sp, #0]
  407f72:	4608      	mov	r0, r1
  407f74:	4611      	mov	r1, r2
  407f76:	4a18      	ldr	r2, [pc, #96]	; (407fd8 <DebugLogBufPrint+0xb0>)
  407f78:	4c18      	ldr	r4, [pc, #96]	; (407fdc <DebugLogBufPrint+0xb4>)
  407f7a:	47a0      	blx	r4
  407f7c:	4602      	mov	r2, r0
  407f7e:	4b18      	ldr	r3, [pc, #96]	; (407fe0 <DebugLogBufPrint+0xb8>)
  407f80:	601a      	str	r2, [r3, #0]
			DebugLog.DebugLogBufHead += size;
  407f82:	4b13      	ldr	r3, [pc, #76]	; (407fd0 <DebugLogBufPrint+0xa8>)
  407f84:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  407f88:	4b15      	ldr	r3, [pc, #84]	; (407fe0 <DebugLogBufPrint+0xb8>)
  407f8a:	681b      	ldr	r3, [r3, #0]
  407f8c:	441a      	add	r2, r3
  407f8e:	4b10      	ldr	r3, [pc, #64]	; (407fd0 <DebugLogBufPrint+0xa8>)
  407f90:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
			InputString = 0;	//Clear the variable to ensure no duplication
  407f94:	2300      	movs	r3, #0
  407f96:	607b      	str	r3, [r7, #4]
			if (DebugLog.DebugLogBufHead >= DATA_SIZE)	//Reset the Head to the beginning of array
			{
				//DebugLog.DebugLogBufHead = 0;
			}
			
			if(xSemaphoreGive(DebugLogSemaphore) != pdTRUE)
  407f98:	4b0b      	ldr	r3, [pc, #44]	; (407fc8 <DebugLogBufPrint+0xa0>)
  407f9a:	681b      	ldr	r3, [r3, #0]
  407f9c:	4618      	mov	r0, r3
  407f9e:	2100      	movs	r1, #0
  407fa0:	2200      	movs	r2, #0
  407fa2:	2300      	movs	r3, #0
  407fa4:	4c0f      	ldr	r4, [pc, #60]	; (407fe4 <DebugLogBufPrint+0xbc>)
  407fa6:	47a0      	blx	r4
  407fa8:	4603      	mov	r3, r0
  407faa:	2b01      	cmp	r3, #1
  407fac:	d006      	beq.n	407fbc <DebugLogBufPrint+0x94>
			{
				printf("Semaphore not released\r\n");
  407fae:	480e      	ldr	r0, [pc, #56]	; (407fe8 <DebugLogBufPrint+0xc0>)
  407fb0:	4b0e      	ldr	r3, [pc, #56]	; (407fec <DebugLogBufPrint+0xc4>)
  407fb2:	4798      	blx	r3
  407fb4:	e002      	b.n	407fbc <DebugLogBufPrint+0x94>
			}
		}
		else	//Semaphore unavailable
		{
			printf("Semaphore Unavailable to Debug Buffer function\r\n");			
  407fb6:	480e      	ldr	r0, [pc, #56]	; (407ff0 <DebugLogBufPrint+0xc8>)
  407fb8:	4b0c      	ldr	r3, [pc, #48]	; (407fec <DebugLogBufPrint+0xc4>)
  407fba:	4798      	blx	r3
		}
	}
}
  407fbc:	370c      	adds	r7, #12
  407fbe:	46bd      	mov	sp, r7
  407fc0:	bd90      	pop	{r4, r7, pc}
  407fc2:	bf00      	nop
  407fc4:	200000ac 	.word	0x200000ac
  407fc8:	200024bc 	.word	0x200024bc
  407fcc:	0040663d 	.word	0x0040663d
  407fd0:	200024d0 	.word	0x200024d0
  407fd4:	20002484 	.word	0x20002484
  407fd8:	0041669c 	.word	0x0041669c
  407fdc:	0040d1a5 	.word	0x0040d1a5
  407fe0:	20001cdc 	.word	0x20001cdc
  407fe4:	00406501 	.word	0x00406501
  407fe8:	004166a4 	.word	0x004166a4
  407fec:	0040c921 	.word	0x0040c921
  407ff0:	004166c0 	.word	0x004166c0

00407ff4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  407ff4:	b480      	push	{r7}
  407ff6:	b083      	sub	sp, #12
  407ff8:	af00      	add	r7, sp, #0
  407ffa:	4603      	mov	r3, r0
  407ffc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407ffe:	4b08      	ldr	r3, [pc, #32]	; (408020 <NVIC_EnableIRQ+0x2c>)
  408000:	f997 2007 	ldrsb.w	r2, [r7, #7]
  408004:	0952      	lsrs	r2, r2, #5
  408006:	79f9      	ldrb	r1, [r7, #7]
  408008:	f001 011f 	and.w	r1, r1, #31
  40800c:	2001      	movs	r0, #1
  40800e:	fa00 f101 	lsl.w	r1, r0, r1
  408012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408016:	370c      	adds	r7, #12
  408018:	46bd      	mov	sp, r7
  40801a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40801e:	4770      	bx	lr
  408020:	e000e100 	.word	0xe000e100

00408024 <drv_gpio_initializeAll>:
	{DRV_GPIO_ID_BLE3_RX,		DRV_GPIO_PIN_MODE_INPUT,  DRV_GPIO_PIN_STATE_LOW, DRV_GPIO_INTERRUPT_NONE, NULL,				TRUE,	TRUE,			0},
	{DRV_GPIO_ID_BLE3_TX,		DRV_GPIO_PIN_MODE_INPUT,  DRV_GPIO_PIN_STATE_LOW, DRV_GPIO_INTERRUPT_NONE, NULL,				TRUE,	TRUE,			0}	
};

status_t drv_gpio_initializeAll(void)
{
  408024:	b580      	push	{r7, lr}
  408026:	b084      	sub	sp, #16
  408028:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40802a:	2300      	movs	r3, #0
  40802c:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  40802e:	2311      	movs	r3, #17
  408030:	607b      	str	r3, [r7, #4]
	int i = 0; 
  408032:	2300      	movs	r3, #0
  408034:	60bb      	str	r3, [r7, #8]
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;
  408036:	4b14      	ldr	r3, [pc, #80]	; (408088 <drv_gpio_initializeAll+0x64>)
  408038:	4a13      	ldr	r2, [pc, #76]	; (408088 <drv_gpio_initializeAll+0x64>)
  40803a:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
  40803e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  408042:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	for(i = 0; i < numGpio ; i++)
  408046:	2300      	movs	r3, #0
  408048:	60bb      	str	r3, [r7, #8]
  40804a:	e014      	b.n	408076 <drv_gpio_initializeAll+0x52>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  40804c:	68bb      	ldr	r3, [r7, #8]
  40804e:	011a      	lsls	r2, r3, #4
  408050:	4b0e      	ldr	r3, [pc, #56]	; (40808c <drv_gpio_initializeAll+0x68>)
  408052:	4413      	add	r3, r2
  408054:	4618      	mov	r0, r3
  408056:	4b0e      	ldr	r3, [pc, #56]	; (408090 <drv_gpio_initializeAll+0x6c>)
  408058:	4798      	blx	r3
  40805a:	4603      	mov	r3, r0
  40805c:	2b00      	cmp	r3, #0
  40805e:	d007      	beq.n	408070 <drv_gpio_initializeAll+0x4c>
		{
			printf("failed to initialize GPIO at index %d", i);
  408060:	480c      	ldr	r0, [pc, #48]	; (408094 <drv_gpio_initializeAll+0x70>)
  408062:	68b9      	ldr	r1, [r7, #8]
  408064:	4b0c      	ldr	r3, [pc, #48]	; (408098 <drv_gpio_initializeAll+0x74>)
  408066:	4798      	blx	r3
			status |= STATUS_FAIL;
  408068:	7bfb      	ldrb	r3, [r7, #15]
  40806a:	f043 0301 	orr.w	r3, r3, #1
  40806e:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;

	for(i = 0; i < numGpio ; i++)
  408070:	68bb      	ldr	r3, [r7, #8]
  408072:	3301      	adds	r3, #1
  408074:	60bb      	str	r3, [r7, #8]
  408076:	68ba      	ldr	r2, [r7, #8]
  408078:	687b      	ldr	r3, [r7, #4]
  40807a:	429a      	cmp	r2, r3
  40807c:	dbe6      	blt.n	40804c <drv_gpio_initializeAll+0x28>
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST1]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST2]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST3]);
	
	
	return status; 
  40807e:	7bfb      	ldrb	r3, [r7, #15]
}
  408080:	4618      	mov	r0, r3
  408082:	3710      	adds	r7, #16
  408084:	46bd      	mov	sp, r7
  408086:	bd80      	pop	{r7, pc}
  408088:	400e0200 	.word	0x400e0200
  40808c:	200000b0 	.word	0x200000b0
  408090:	00408101 	.word	0x00408101
  408094:	0041671c 	.word	0x0041671c
  408098:	0040c921 	.word	0x0040c921

0040809c <drv_gpio_ConfigureBLEForProgramming>:


status_t drv_gpio_ConfigureBLEForProgramming(void)
{
  40809c:	b580      	push	{r7, lr}
  40809e:	b084      	sub	sp, #16
  4080a0:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  4080a2:	2300      	movs	r3, #0
  4080a4:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
  4080a6:	2306      	movs	r3, #6
  4080a8:	607b      	str	r3, [r7, #4]
	int i = 0;
  4080aa:	2300      	movs	r3, #0
  4080ac:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < numGpio ; i++)
  4080ae:	2300      	movs	r3, #0
  4080b0:	60bb      	str	r3, [r7, #8]
  4080b2:	e014      	b.n	4080de <drv_gpio_ConfigureBLEForProgramming+0x42>
	{
		if(drv_gpio_config(&programmingGpioConfig[i]) != STATUS_PASS)
  4080b4:	68bb      	ldr	r3, [r7, #8]
  4080b6:	011a      	lsls	r2, r3, #4
  4080b8:	4b0d      	ldr	r3, [pc, #52]	; (4080f0 <drv_gpio_ConfigureBLEForProgramming+0x54>)
  4080ba:	4413      	add	r3, r2
  4080bc:	4618      	mov	r0, r3
  4080be:	4b0d      	ldr	r3, [pc, #52]	; (4080f4 <drv_gpio_ConfigureBLEForProgramming+0x58>)
  4080c0:	4798      	blx	r3
  4080c2:	4603      	mov	r3, r0
  4080c4:	2b00      	cmp	r3, #0
  4080c6:	d007      	beq.n	4080d8 <drv_gpio_ConfigureBLEForProgramming+0x3c>
		{
			printf("failed to initialize GPIO at index %d", i);
  4080c8:	480b      	ldr	r0, [pc, #44]	; (4080f8 <drv_gpio_ConfigureBLEForProgramming+0x5c>)
  4080ca:	68b9      	ldr	r1, [r7, #8]
  4080cc:	4b0b      	ldr	r3, [pc, #44]	; (4080fc <drv_gpio_ConfigureBLEForProgramming+0x60>)
  4080ce:	4798      	blx	r3
			status |= STATUS_FAIL;
  4080d0:	7bfb      	ldrb	r3, [r7, #15]
  4080d2:	f043 0301 	orr.w	r3, r3, #1
  4080d6:	73fb      	strb	r3, [r7, #15]
{
	status_t status = STATUS_PASS;
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
	int i = 0;

	for(i = 0; i < numGpio ; i++)
  4080d8:	68bb      	ldr	r3, [r7, #8]
  4080da:	3301      	adds	r3, #1
  4080dc:	60bb      	str	r3, [r7, #8]
  4080de:	68ba      	ldr	r2, [r7, #8]
  4080e0:	687b      	ldr	r3, [r7, #4]
  4080e2:	429a      	cmp	r2, r3
  4080e4:	dbe6      	blt.n	4080b4 <drv_gpio_ConfigureBLEForProgramming+0x18>
		{
			printf("failed to initialize GPIO at index %d", i);
			status |= STATUS_FAIL;
		}
	}	
	return status;
  4080e6:	7bfb      	ldrb	r3, [r7, #15]
}
  4080e8:	4618      	mov	r0, r3
  4080ea:	3710      	adds	r7, #16
  4080ec:	46bd      	mov	sp, r7
  4080ee:	bd80      	pop	{r7, pc}
  4080f0:	200001c0 	.word	0x200001c0
  4080f4:	00408101 	.word	0x00408101
  4080f8:	0041671c 	.word	0x0041671c
  4080fc:	0040c921 	.word	0x0040c921

00408100 <drv_gpio_config>:

status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  408100:	b590      	push	{r4, r7, lr}
  408102:	b08b      	sub	sp, #44	; 0x2c
  408104:	af02      	add	r7, sp, #8
  408106:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  408108:	2300      	movs	r3, #0
  40810a:	76fb      	strb	r3, [r7, #27]
	unsigned long PinFlag = 0;	
  40810c:	2300      	movs	r3, #0
  40810e:	61fb      	str	r3, [r7, #28]
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  408110:	687b      	ldr	r3, [r7, #4]
  408112:	791b      	ldrb	r3, [r3, #4]
  408114:	2b01      	cmp	r3, #1
  408116:	d177      	bne.n	408208 <drv_gpio_config+0x108>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  408118:	69fb      	ldr	r3, [r7, #28]
  40811a:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  40811e:	61fb      	str	r3, [r7, #28]
		if (gpioConfig->pullUpEnabled == TRUE)
  408120:	687b      	ldr	r3, [r7, #4]
  408122:	7b1b      	ldrb	r3, [r3, #12]
  408124:	2b01      	cmp	r3, #1
  408126:	d103      	bne.n	408130 <drv_gpio_config+0x30>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  408128:	69fb      	ldr	r3, [r7, #28]
  40812a:	f043 0301 	orr.w	r3, r3, #1
  40812e:	61fb      	str	r3, [r7, #28]
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  408130:	687b      	ldr	r3, [r7, #4]
  408132:	7b5b      	ldrb	r3, [r3, #13]
  408134:	2b01      	cmp	r3, #1
  408136:	d103      	bne.n	408140 <drv_gpio_config+0x40>
		{
			PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
  408138:	69fb      	ldr	r3, [r7, #28]
  40813a:	f043 0308 	orr.w	r3, r3, #8
  40813e:	61fb      	str	r3, [r7, #28]
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  408140:	687b      	ldr	r3, [r7, #4]
  408142:	681b      	ldr	r3, [r3, #0]
  408144:	4618      	mov	r0, r3
  408146:	4b3f      	ldr	r3, [pc, #252]	; (408244 <drv_gpio_config+0x144>)
  408148:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40814a:	687b      	ldr	r3, [r7, #4]
  40814c:	681b      	ldr	r3, [r3, #0]
  40814e:	4618      	mov	r0, r3
  408150:	69f9      	ldr	r1, [r7, #28]
  408152:	4b3d      	ldr	r3, [pc, #244]	; (408248 <drv_gpio_config+0x148>)
  408154:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  408156:	2300      	movs	r3, #0
  408158:	61fb      	str	r3, [r7, #28]
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  40815a:	687b      	ldr	r3, [r7, #4]
  40815c:	799b      	ldrb	r3, [r3, #6]
  40815e:	2b03      	cmp	r3, #3
  408160:	d81e      	bhi.n	4081a0 <drv_gpio_config+0xa0>
  408162:	a201      	add	r2, pc, #4	; (adr r2, 408168 <drv_gpio_config+0x68>)
  408164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408168:	00408179 	.word	0x00408179
  40816c:	00408183 	.word	0x00408183
  408170:	0040818d 	.word	0x0040818d
  408174:	00408197 	.word	0x00408197
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  408178:	69fb      	ldr	r3, [r7, #28]
  40817a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40817e:	61fb      	str	r3, [r7, #28]
				break;
  408180:	e00f      	b.n	4081a2 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  408182:	69fb      	ldr	r3, [r7, #28]
  408184:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  408188:	61fb      	str	r3, [r7, #28]
				break;
  40818a:	e00a      	b.n	4081a2 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40818c:	69fb      	ldr	r3, [r7, #28]
  40818e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  408192:	61fb      	str	r3, [r7, #28]
				break;
  408194:	e005      	b.n	4081a2 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  408196:	69fb      	ldr	r3, [r7, #28]
  408198:	f043 0310 	orr.w	r3, r3, #16
  40819c:	61fb      	str	r3, [r7, #28]
				break;
  40819e:	e000      	b.n	4081a2 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  4081a0:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  4081a2:	687b      	ldr	r3, [r7, #4]
  4081a4:	681b      	ldr	r3, [r3, #0]
  4081a6:	4618      	mov	r0, r3
  4081a8:	4b28      	ldr	r3, [pc, #160]	; (40824c <drv_gpio_config+0x14c>)
  4081aa:	4798      	blx	r3
  4081ac:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4081ae:	687b      	ldr	r3, [r7, #4]
  4081b0:	681b      	ldr	r3, [r3, #0]
  4081b2:	4618      	mov	r0, r3
  4081b4:	4b26      	ldr	r3, [pc, #152]	; (408250 <drv_gpio_config+0x150>)
  4081b6:	4798      	blx	r3
  4081b8:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  4081ba:	69fb      	ldr	r3, [r7, #28]
  4081bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4081c0:	2b00      	cmp	r3, #0
  4081c2:	d018      	beq.n	4081f6 <drv_gpio_config+0xf6>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  4081c4:	687b      	ldr	r3, [r7, #4]
  4081c6:	681b      	ldr	r3, [r3, #0]
  4081c8:	4618      	mov	r0, r3
  4081ca:	4b22      	ldr	r3, [pc, #136]	; (408254 <drv_gpio_config+0x154>)
  4081cc:	4798      	blx	r3
  4081ce:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  4081d0:	687b      	ldr	r3, [r7, #4]
  4081d2:	689b      	ldr	r3, [r3, #8]
  4081d4:	9300      	str	r3, [sp, #0]
  4081d6:	6978      	ldr	r0, [r7, #20]
  4081d8:	68f9      	ldr	r1, [r7, #12]
  4081da:	693a      	ldr	r2, [r7, #16]
  4081dc:	69fb      	ldr	r3, [r7, #28]
  4081de:	4c1e      	ldr	r4, [pc, #120]	; (408258 <drv_gpio_config+0x158>)
  4081e0:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  4081e2:	6978      	ldr	r0, [r7, #20]
  4081e4:	6939      	ldr	r1, [r7, #16]
  4081e6:	4b1d      	ldr	r3, [pc, #116]	; (40825c <drv_gpio_config+0x15c>)
  4081e8:	4798      	blx	r3
			NVIC_EnableIRQ(PinPio);
  4081ea:	68fb      	ldr	r3, [r7, #12]
  4081ec:	b2db      	uxtb	r3, r3
  4081ee:	b25b      	sxtb	r3, r3
  4081f0:	4618      	mov	r0, r3
  4081f2:	4b1b      	ldr	r3, [pc, #108]	; (408260 <drv_gpio_config+0x160>)
  4081f4:	4798      	blx	r3
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  4081f6:	697b      	ldr	r3, [r7, #20]
  4081f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4081fc:	693b      	ldr	r3, [r7, #16]
  4081fe:	431a      	orrs	r2, r3
  408200:	697b      	ldr	r3, [r7, #20]
  408202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  408206:	e017      	b.n	408238 <drv_gpio_config+0x138>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  408208:	687b      	ldr	r3, [r7, #4]
  40820a:	795b      	ldrb	r3, [r3, #5]
  40820c:	2b01      	cmp	r3, #1
  40820e:	d104      	bne.n	40821a <drv_gpio_config+0x11a>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  408210:	69fb      	ldr	r3, [r7, #28]
  408212:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  408216:	61fb      	str	r3, [r7, #28]
  408218:	e003      	b.n	408222 <drv_gpio_config+0x122>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  40821a:	69fb      	ldr	r3, [r7, #28]
  40821c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  408220:	61fb      	str	r3, [r7, #28]
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  408222:	687b      	ldr	r3, [r7, #4]
  408224:	681b      	ldr	r3, [r3, #0]
  408226:	4618      	mov	r0, r3
  408228:	4b06      	ldr	r3, [pc, #24]	; (408244 <drv_gpio_config+0x144>)
  40822a:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40822c:	687b      	ldr	r3, [r7, #4]
  40822e:	681b      	ldr	r3, [r3, #0]
  408230:	4618      	mov	r0, r3
  408232:	69f9      	ldr	r1, [r7, #28]
  408234:	4b04      	ldr	r3, [pc, #16]	; (408248 <drv_gpio_config+0x148>)
  408236:	4798      	blx	r3
	}
	
	return status;
  408238:	7efb      	ldrb	r3, [r7, #27]
}
  40823a:	4618      	mov	r0, r3
  40823c:	3724      	adds	r7, #36	; 0x24
  40823e:	46bd      	mov	sp, r7
  408240:	bd90      	pop	{r4, r7, pc}
  408242:	bf00      	nop
  408244:	0040bca9 	.word	0x0040bca9
  408248:	0040b5a1 	.word	0x0040b5a1
  40824c:	0040b87d 	.word	0x0040b87d
  408250:	0040b8c5 	.word	0x0040b8c5
  408254:	0040b8a5 	.word	0x0040b8a5
  408258:	0040b9b5 	.word	0x0040b9b5
  40825c:	0040b485 	.word	0x0040b485
  408260:	00407ff5 	.word	0x00407ff5

00408264 <drv_gpio_setPinState>:

status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  408264:	b580      	push	{r7, lr}
  408266:	b084      	sub	sp, #16
  408268:	af00      	add	r7, sp, #0
  40826a:	4602      	mov	r2, r0
  40826c:	460b      	mov	r3, r1
  40826e:	71fa      	strb	r2, [r7, #7]
  408270:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  408272:	2300      	movs	r3, #0
  408274:	73fb      	strb	r3, [r7, #15]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  408276:	79fb      	ldrb	r3, [r7, #7]
  408278:	4a10      	ldr	r2, [pc, #64]	; (4082bc <drv_gpio_setPinState+0x58>)
  40827a:	011b      	lsls	r3, r3, #4
  40827c:	4413      	add	r3, r2
  40827e:	791b      	ldrb	r3, [r3, #4]
  408280:	2b00      	cmp	r3, #0
  408282:	d001      	beq.n	408288 <drv_gpio_setPinState+0x24>
	{
		return STATUS_FAIL; 
  408284:	2301      	movs	r3, #1
  408286:	e014      	b.n	4082b2 <drv_gpio_setPinState+0x4e>
	}
	if (state == DRV_GPIO_PIN_STATE_HIGH)
  408288:	79bb      	ldrb	r3, [r7, #6]
  40828a:	2b01      	cmp	r3, #1
  40828c:	d108      	bne.n	4082a0 <drv_gpio_setPinState+0x3c>
	{
		pio_set_pin_high(gpioConfig[pin].pinId);
  40828e:	79fb      	ldrb	r3, [r7, #7]
  408290:	4a0a      	ldr	r2, [pc, #40]	; (4082bc <drv_gpio_setPinState+0x58>)
  408292:	011b      	lsls	r3, r3, #4
  408294:	4413      	add	r3, r2
  408296:	681b      	ldr	r3, [r3, #0]
  408298:	4618      	mov	r0, r3
  40829a:	4b09      	ldr	r3, [pc, #36]	; (4082c0 <drv_gpio_setPinState+0x5c>)
  40829c:	4798      	blx	r3
  40829e:	e007      	b.n	4082b0 <drv_gpio_setPinState+0x4c>
	} 
	else
	{
		pio_set_pin_low(gpioConfig[pin].pinId);
  4082a0:	79fb      	ldrb	r3, [r7, #7]
  4082a2:	4a06      	ldr	r2, [pc, #24]	; (4082bc <drv_gpio_setPinState+0x58>)
  4082a4:	011b      	lsls	r3, r3, #4
  4082a6:	4413      	add	r3, r2
  4082a8:	681b      	ldr	r3, [r3, #0]
  4082aa:	4618      	mov	r0, r3
  4082ac:	4b05      	ldr	r3, [pc, #20]	; (4082c4 <drv_gpio_setPinState+0x60>)
  4082ae:	4798      	blx	r3
	}
	return status;
  4082b0:	7bfb      	ldrb	r3, [r7, #15]
}
  4082b2:	4618      	mov	r0, r3
  4082b4:	3710      	adds	r7, #16
  4082b6:	46bd      	mov	sp, r7
  4082b8:	bd80      	pop	{r7, pc}
  4082ba:	bf00      	nop
  4082bc:	200000b0 	.word	0x200000b0
  4082c0:	0040b4f1 	.word	0x0040b4f1
  4082c4:	0040b51d 	.word	0x0040b51d

004082c8 <drv_gpio_togglePin>:
	*state = pio_get_pin_value(gpioConfig[pin].pinId);
	return status;
}

status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  4082c8:	b580      	push	{r7, lr}
  4082ca:	b084      	sub	sp, #16
  4082cc:	af00      	add	r7, sp, #0
  4082ce:	4603      	mov	r3, r0
  4082d0:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  4082d2:	2300      	movs	r3, #0
  4082d4:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  4082d6:	79fb      	ldrb	r3, [r7, #7]
  4082d8:	4a05      	ldr	r2, [pc, #20]	; (4082f0 <drv_gpio_togglePin+0x28>)
  4082da:	011b      	lsls	r3, r3, #4
  4082dc:	4413      	add	r3, r2
  4082de:	681b      	ldr	r3, [r3, #0]
  4082e0:	4618      	mov	r0, r3
  4082e2:	4b04      	ldr	r3, [pc, #16]	; (4082f4 <drv_gpio_togglePin+0x2c>)
  4082e4:	4798      	blx	r3
	return status;
  4082e6:	7bfb      	ldrb	r3, [r7, #15]
}
  4082e8:	4618      	mov	r0, r3
  4082ea:	3710      	adds	r7, #16
  4082ec:	46bd      	mov	sp, r7
  4082ee:	bd80      	pop	{r7, pc}
  4082f0:	200000b0 	.word	0x200000b0
  4082f4:	0040b549 	.word	0x0040b549

004082f8 <drv_gpio_check_Int>:

bool drv_gpio_check_Int(drv_gpio_pins_t pin)
{
  4082f8:	b480      	push	{r7}
  4082fa:	b085      	sub	sp, #20
  4082fc:	af00      	add	r7, sp, #0
  4082fe:	4603      	mov	r3, r0
  408300:	71fb      	strb	r3, [r7, #7]
	bool returnVal;
	returnVal = gpioConfig[pin].gpioSetFlag;
  408302:	79fb      	ldrb	r3, [r7, #7]
  408304:	4a09      	ldr	r2, [pc, #36]	; (40832c <drv_gpio_check_Int+0x34>)
  408306:	011b      	lsls	r3, r3, #4
  408308:	4413      	add	r3, r2
  40830a:	3308      	adds	r3, #8
  40830c:	799b      	ldrb	r3, [r3, #6]
  40830e:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  408310:	79fb      	ldrb	r3, [r7, #7]
  408312:	4a06      	ldr	r2, [pc, #24]	; (40832c <drv_gpio_check_Int+0x34>)
  408314:	011b      	lsls	r3, r3, #4
  408316:	4413      	add	r3, r2
  408318:	3308      	adds	r3, #8
  40831a:	2200      	movs	r2, #0
  40831c:	719a      	strb	r2, [r3, #6]
	return	returnVal;
  40831e:	7bfb      	ldrb	r3, [r7, #15]
}
  408320:	4618      	mov	r0, r3
  408322:	3714      	adds	r7, #20
  408324:	46bd      	mov	sp, r7
  408326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40832a:	4770      	bx	lr
  40832c:	200000b0 	.word	0x200000b0

00408330 <drv_gpio_int_pw>:
	//}
	//pio_enable_interrupt(PIOA, PinMask);
//}

static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  408330:	b580      	push	{r7, lr}
  408332:	b084      	sub	sp, #16
  408334:	af00      	add	r7, sp, #0
  408336:	6078      	str	r0, [r7, #4]
  408338:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  40833a:	4b0d      	ldr	r3, [pc, #52]	; (408370 <drv_gpio_int_pw+0x40>)
  40833c:	681b      	ldr	r3, [r3, #0]
  40833e:	4618      	mov	r0, r3
  408340:	4b0c      	ldr	r3, [pc, #48]	; (408374 <drv_gpio_int_pw+0x44>)
  408342:	4798      	blx	r3
  408344:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  408346:	480c      	ldr	r0, [pc, #48]	; (408378 <drv_gpio_int_pw+0x48>)
  408348:	68f9      	ldr	r1, [r7, #12]
  40834a:	4b0c      	ldr	r3, [pc, #48]	; (40837c <drv_gpio_int_pw+0x4c>)
  40834c:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40834e:	4b0a      	ldr	r3, [pc, #40]	; (408378 <drv_gpio_int_pw+0x48>)
  408350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  408352:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  408354:	68fa      	ldr	r2, [r7, #12]
  408356:	683b      	ldr	r3, [r7, #0]
  408358:	429a      	cmp	r2, r3
  40835a:	d102      	bne.n	408362 <drv_gpio_int_pw+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_PW_SW].gpioSetFlag = 1;
  40835c:	4b04      	ldr	r3, [pc, #16]	; (408370 <drv_gpio_int_pw+0x40>)
  40835e:	2201      	movs	r2, #1
  408360:	739a      	strb	r2, [r3, #14]
	}
	pio_enable_interrupt(PIOA, PinMask);
  408362:	4805      	ldr	r0, [pc, #20]	; (408378 <drv_gpio_int_pw+0x48>)
  408364:	68f9      	ldr	r1, [r7, #12]
  408366:	4b06      	ldr	r3, [pc, #24]	; (408380 <drv_gpio_int_pw+0x50>)
  408368:	4798      	blx	r3
}
  40836a:	3710      	adds	r7, #16
  40836c:	46bd      	mov	sp, r7
  40836e:	bd80      	pop	{r7, pc}
  408370:	200000b0 	.word	0x200000b0
  408374:	0040b8c5 	.word	0x0040b8c5
  408378:	400e0e00 	.word	0x400e0e00
  40837c:	0040b4a5 	.word	0x0040b4a5
  408380:	0040b485 	.word	0x0040b485

00408384 <drv_gpio_int_sw1>:

static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
  408384:	b580      	push	{r7, lr}
  408386:	b084      	sub	sp, #16
  408388:	af00      	add	r7, sp, #0
  40838a:	6078      	str	r0, [r7, #4]
  40838c:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  40838e:	4b0d      	ldr	r3, [pc, #52]	; (4083c4 <drv_gpio_int_sw1+0x40>)
  408390:	691b      	ldr	r3, [r3, #16]
  408392:	4618      	mov	r0, r3
  408394:	4b0c      	ldr	r3, [pc, #48]	; (4083c8 <drv_gpio_int_sw1+0x44>)
  408396:	4798      	blx	r3
  408398:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40839a:	480c      	ldr	r0, [pc, #48]	; (4083cc <drv_gpio_int_sw1+0x48>)
  40839c:	68f9      	ldr	r1, [r7, #12]
  40839e:	4b0c      	ldr	r3, [pc, #48]	; (4083d0 <drv_gpio_int_sw1+0x4c>)
  4083a0:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4083a2:	4b0a      	ldr	r3, [pc, #40]	; (4083cc <drv_gpio_int_sw1+0x48>)
  4083a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4083a6:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4083a8:	68fa      	ldr	r2, [r7, #12]
  4083aa:	683b      	ldr	r3, [r7, #0]
  4083ac:	429a      	cmp	r2, r3
  4083ae:	d102      	bne.n	4083b6 <drv_gpio_int_sw1+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW1].gpioSetFlag = 1;
  4083b0:	4b04      	ldr	r3, [pc, #16]	; (4083c4 <drv_gpio_int_sw1+0x40>)
  4083b2:	2201      	movs	r2, #1
  4083b4:	779a      	strb	r2, [r3, #30]
	}
	pio_enable_interrupt(PIOA, PinMask);
  4083b6:	4805      	ldr	r0, [pc, #20]	; (4083cc <drv_gpio_int_sw1+0x48>)
  4083b8:	68f9      	ldr	r1, [r7, #12]
  4083ba:	4b06      	ldr	r3, [pc, #24]	; (4083d4 <drv_gpio_int_sw1+0x50>)
  4083bc:	4798      	blx	r3
}
  4083be:	3710      	adds	r7, #16
  4083c0:	46bd      	mov	sp, r7
  4083c2:	bd80      	pop	{r7, pc}
  4083c4:	200000b0 	.word	0x200000b0
  4083c8:	0040b8c5 	.word	0x0040b8c5
  4083cc:	400e0e00 	.word	0x400e0e00
  4083d0:	0040b4a5 	.word	0x0040b4a5
  4083d4:	0040b485 	.word	0x0040b485

004083d8 <drv_gpio_int_sw2>:

static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
  4083d8:	b580      	push	{r7, lr}
  4083da:	b084      	sub	sp, #16
  4083dc:	af00      	add	r7, sp, #0
  4083de:	6078      	str	r0, [r7, #4]
  4083e0:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  4083e2:	4b0e      	ldr	r3, [pc, #56]	; (40841c <drv_gpio_int_sw2+0x44>)
  4083e4:	6a1b      	ldr	r3, [r3, #32]
  4083e6:	4618      	mov	r0, r3
  4083e8:	4b0d      	ldr	r3, [pc, #52]	; (408420 <drv_gpio_int_sw2+0x48>)
  4083ea:	4798      	blx	r3
  4083ec:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4083ee:	480d      	ldr	r0, [pc, #52]	; (408424 <drv_gpio_int_sw2+0x4c>)
  4083f0:	68f9      	ldr	r1, [r7, #12]
  4083f2:	4b0d      	ldr	r3, [pc, #52]	; (408428 <drv_gpio_int_sw2+0x50>)
  4083f4:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4083f6:	4b0b      	ldr	r3, [pc, #44]	; (408424 <drv_gpio_int_sw2+0x4c>)
  4083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4083fa:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4083fc:	68fa      	ldr	r2, [r7, #12]
  4083fe:	683b      	ldr	r3, [r7, #0]
  408400:	429a      	cmp	r2, r3
  408402:	d103      	bne.n	40840c <drv_gpio_int_sw2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW2].gpioSetFlag = 1;
  408404:	4b05      	ldr	r3, [pc, #20]	; (40841c <drv_gpio_int_sw2+0x44>)
  408406:	2201      	movs	r2, #1
  408408:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40840c:	4805      	ldr	r0, [pc, #20]	; (408424 <drv_gpio_int_sw2+0x4c>)
  40840e:	68f9      	ldr	r1, [r7, #12]
  408410:	4b06      	ldr	r3, [pc, #24]	; (40842c <drv_gpio_int_sw2+0x54>)
  408412:	4798      	blx	r3
}
  408414:	3710      	adds	r7, #16
  408416:	46bd      	mov	sp, r7
  408418:	bd80      	pop	{r7, pc}
  40841a:	bf00      	nop
  40841c:	200000b0 	.word	0x200000b0
  408420:	0040b8c5 	.word	0x0040b8c5
  408424:	400e0e00 	.word	0x400e0e00
  408428:	0040b4a5 	.word	0x0040b4a5
  40842c:	0040b485 	.word	0x0040b485

00408430 <drv_gpio_int_oc1>:

static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
  408430:	b580      	push	{r7, lr}
  408432:	b084      	sub	sp, #16
  408434:	af00      	add	r7, sp, #0
  408436:	6078      	str	r0, [r7, #4]
  408438:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
  40843a:	4b0e      	ldr	r3, [pc, #56]	; (408474 <drv_gpio_int_oc1+0x44>)
  40843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40843e:	4618      	mov	r0, r3
  408440:	4b0d      	ldr	r3, [pc, #52]	; (408478 <drv_gpio_int_oc1+0x48>)
  408442:	4798      	blx	r3
  408444:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  408446:	480d      	ldr	r0, [pc, #52]	; (40847c <drv_gpio_int_oc1+0x4c>)
  408448:	68f9      	ldr	r1, [r7, #12]
  40844a:	4b0d      	ldr	r3, [pc, #52]	; (408480 <drv_gpio_int_oc1+0x50>)
  40844c:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40844e:	4b0b      	ldr	r3, [pc, #44]	; (40847c <drv_gpio_int_oc1+0x4c>)
  408450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  408452:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  408454:	68fa      	ldr	r2, [r7, #12]
  408456:	683b      	ldr	r3, [r7, #0]
  408458:	429a      	cmp	r2, r3
  40845a:	d103      	bne.n	408464 <drv_gpio_int_oc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC1].gpioSetFlag = 1;
  40845c:	4b05      	ldr	r3, [pc, #20]	; (408474 <drv_gpio_int_oc1+0x44>)
  40845e:	2201      	movs	r2, #1
  408460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  408464:	4805      	ldr	r0, [pc, #20]	; (40847c <drv_gpio_int_oc1+0x4c>)
  408466:	68f9      	ldr	r1, [r7, #12]
  408468:	4b06      	ldr	r3, [pc, #24]	; (408484 <drv_gpio_int_oc1+0x54>)
  40846a:	4798      	blx	r3
}
  40846c:	3710      	adds	r7, #16
  40846e:	46bd      	mov	sp, r7
  408470:	bd80      	pop	{r7, pc}
  408472:	bf00      	nop
  408474:	200000b0 	.word	0x200000b0
  408478:	0040b8c5 	.word	0x0040b8c5
  40847c:	400e0e00 	.word	0x400e0e00
  408480:	0040b4a5 	.word	0x0040b4a5
  408484:	0040b485 	.word	0x0040b485

00408488 <drv_gpio_int_oc2>:

static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
  408488:	b580      	push	{r7, lr}
  40848a:	b084      	sub	sp, #16
  40848c:	af00      	add	r7, sp, #0
  40848e:	6078      	str	r0, [r7, #4]
  408490:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
  408492:	4b0e      	ldr	r3, [pc, #56]	; (4084cc <drv_gpio_int_oc2+0x44>)
  408494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408496:	4618      	mov	r0, r3
  408498:	4b0d      	ldr	r3, [pc, #52]	; (4084d0 <drv_gpio_int_oc2+0x48>)
  40849a:	4798      	blx	r3
  40849c:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40849e:	480d      	ldr	r0, [pc, #52]	; (4084d4 <drv_gpio_int_oc2+0x4c>)
  4084a0:	68f9      	ldr	r1, [r7, #12]
  4084a2:	4b0d      	ldr	r3, [pc, #52]	; (4084d8 <drv_gpio_int_oc2+0x50>)
  4084a4:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4084a6:	4b0b      	ldr	r3, [pc, #44]	; (4084d4 <drv_gpio_int_oc2+0x4c>)
  4084a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4084aa:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4084ac:	68fa      	ldr	r2, [r7, #12]
  4084ae:	683b      	ldr	r3, [r7, #0]
  4084b0:	429a      	cmp	r2, r3
  4084b2:	d103      	bne.n	4084bc <drv_gpio_int_oc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC2].gpioSetFlag = 1;
  4084b4:	4b05      	ldr	r3, [pc, #20]	; (4084cc <drv_gpio_int_oc2+0x44>)
  4084b6:	2201      	movs	r2, #1
  4084b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	}
	pio_enable_interrupt(PIOA, PinMask);
  4084bc:	4805      	ldr	r0, [pc, #20]	; (4084d4 <drv_gpio_int_oc2+0x4c>)
  4084be:	68f9      	ldr	r1, [r7, #12]
  4084c0:	4b06      	ldr	r3, [pc, #24]	; (4084dc <drv_gpio_int_oc2+0x54>)
  4084c2:	4798      	blx	r3
}
  4084c4:	3710      	adds	r7, #16
  4084c6:	46bd      	mov	sp, r7
  4084c8:	bd80      	pop	{r7, pc}
  4084ca:	bf00      	nop
  4084cc:	200000b0 	.word	0x200000b0
  4084d0:	0040b8c5 	.word	0x0040b8c5
  4084d4:	400e0e00 	.word	0x400e0e00
  4084d8:	0040b4a5 	.word	0x0040b4a5
  4084dc:	0040b485 	.word	0x0040b485

004084e0 <drv_gpio_int_dc1>:

static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  4084e0:	b580      	push	{r7, lr}
  4084e2:	b084      	sub	sp, #16
  4084e4:	af00      	add	r7, sp, #0
  4084e6:	6078      	str	r0, [r7, #4]
  4084e8:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
  4084ea:	4b0e      	ldr	r3, [pc, #56]	; (408524 <drv_gpio_int_dc1+0x44>)
  4084ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  4084ee:	4618      	mov	r0, r3
  4084f0:	4b0d      	ldr	r3, [pc, #52]	; (408528 <drv_gpio_int_dc1+0x48>)
  4084f2:	4798      	blx	r3
  4084f4:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4084f6:	480d      	ldr	r0, [pc, #52]	; (40852c <drv_gpio_int_dc1+0x4c>)
  4084f8:	68f9      	ldr	r1, [r7, #12]
  4084fa:	4b0d      	ldr	r3, [pc, #52]	; (408530 <drv_gpio_int_dc1+0x50>)
  4084fc:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4084fe:	4b0b      	ldr	r3, [pc, #44]	; (40852c <drv_gpio_int_dc1+0x4c>)
  408500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  408502:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  408504:	68fa      	ldr	r2, [r7, #12]
  408506:	683b      	ldr	r3, [r7, #0]
  408508:	429a      	cmp	r2, r3
  40850a:	d103      	bne.n	408514 <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC1].gpioSetFlag = 1;
  40850c:	4b05      	ldr	r3, [pc, #20]	; (408524 <drv_gpio_int_dc1+0x44>)
  40850e:	2201      	movs	r2, #1
  408510:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	pio_enable_interrupt(PIOA, PinMask);
  408514:	4805      	ldr	r0, [pc, #20]	; (40852c <drv_gpio_int_dc1+0x4c>)
  408516:	68f9      	ldr	r1, [r7, #12]
  408518:	4b06      	ldr	r3, [pc, #24]	; (408534 <drv_gpio_int_dc1+0x54>)
  40851a:	4798      	blx	r3
}
  40851c:	3710      	adds	r7, #16
  40851e:	46bd      	mov	sp, r7
  408520:	bd80      	pop	{r7, pc}
  408522:	bf00      	nop
  408524:	200000b0 	.word	0x200000b0
  408528:	0040b8c5 	.word	0x0040b8c5
  40852c:	400e0e00 	.word	0x400e0e00
  408530:	0040b4a5 	.word	0x0040b4a5
  408534:	0040b485 	.word	0x0040b485

00408538 <drv_gpio_int_dc2>:

static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  408538:	b580      	push	{r7, lr}
  40853a:	b084      	sub	sp, #16
  40853c:	af00      	add	r7, sp, #0
  40853e:	6078      	str	r0, [r7, #4]
  408540:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
  408542:	4b0e      	ldr	r3, [pc, #56]	; (40857c <drv_gpio_int_dc2+0x44>)
  408544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  408546:	4618      	mov	r0, r3
  408548:	4b0d      	ldr	r3, [pc, #52]	; (408580 <drv_gpio_int_dc2+0x48>)
  40854a:	4798      	blx	r3
  40854c:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40854e:	480d      	ldr	r0, [pc, #52]	; (408584 <drv_gpio_int_dc2+0x4c>)
  408550:	68f9      	ldr	r1, [r7, #12]
  408552:	4b0d      	ldr	r3, [pc, #52]	; (408588 <drv_gpio_int_dc2+0x50>)
  408554:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  408556:	4b0b      	ldr	r3, [pc, #44]	; (408584 <drv_gpio_int_dc2+0x4c>)
  408558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40855a:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40855c:	68fa      	ldr	r2, [r7, #12]
  40855e:	683b      	ldr	r3, [r7, #0]
  408560:	429a      	cmp	r2, r3
  408562:	d103      	bne.n	40856c <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC2].gpioSetFlag = 1;
  408564:	4b05      	ldr	r3, [pc, #20]	; (40857c <drv_gpio_int_dc2+0x44>)
  408566:	2201      	movs	r2, #1
  408568:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40856c:	4805      	ldr	r0, [pc, #20]	; (408584 <drv_gpio_int_dc2+0x4c>)
  40856e:	68f9      	ldr	r1, [r7, #12]
  408570:	4b06      	ldr	r3, [pc, #24]	; (40858c <drv_gpio_int_dc2+0x54>)
  408572:	4798      	blx	r3
}
  408574:	3710      	adds	r7, #16
  408576:	46bd      	mov	sp, r7
  408578:	bd80      	pop	{r7, pc}
  40857a:	bf00      	nop
  40857c:	200000b0 	.word	0x200000b0
  408580:	0040b8c5 	.word	0x0040b8c5
  408584:	400e0e00 	.word	0x400e0e00
  408588:	0040b4a5 	.word	0x0040b4a5
  40858c:	0040b485 	.word	0x0040b485

00408590 <drv_gpio_int_lbo>:

static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
  408590:	b580      	push	{r7, lr}
  408592:	b084      	sub	sp, #16
  408594:	af00      	add	r7, sp, #0
  408596:	6078      	str	r0, [r7, #4]
  408598:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  40859a:	4b0e      	ldr	r3, [pc, #56]	; (4085d4 <drv_gpio_int_lbo+0x44>)
  40859c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
  4085a0:	4618      	mov	r0, r3
  4085a2:	4b0d      	ldr	r3, [pc, #52]	; (4085d8 <drv_gpio_int_lbo+0x48>)
  4085a4:	4798      	blx	r3
  4085a6:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4085a8:	480c      	ldr	r0, [pc, #48]	; (4085dc <drv_gpio_int_lbo+0x4c>)
  4085aa:	68f9      	ldr	r1, [r7, #12]
  4085ac:	4b0c      	ldr	r3, [pc, #48]	; (4085e0 <drv_gpio_int_lbo+0x50>)
  4085ae:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4085b0:	4b0a      	ldr	r3, [pc, #40]	; (4085dc <drv_gpio_int_lbo+0x4c>)
  4085b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4085b4:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4085b6:	68fa      	ldr	r2, [r7, #12]
  4085b8:	683b      	ldr	r3, [r7, #0]
  4085ba:	429a      	cmp	r2, r3
  4085bc:	d103      	bne.n	4085c6 <drv_gpio_int_lbo+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_LBO].gpioSetFlag = 1;
  4085be:	4b05      	ldr	r3, [pc, #20]	; (4085d4 <drv_gpio_int_lbo+0x44>)
  4085c0:	2201      	movs	r2, #1
  4085c2:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	}
	pio_enable_interrupt(PIOA, PinMask);
  4085c6:	4805      	ldr	r0, [pc, #20]	; (4085dc <drv_gpio_int_lbo+0x4c>)
  4085c8:	68f9      	ldr	r1, [r7, #12]
  4085ca:	4b06      	ldr	r3, [pc, #24]	; (4085e4 <drv_gpio_int_lbo+0x54>)
  4085cc:	4798      	blx	r3
}
  4085ce:	3710      	adds	r7, #16
  4085d0:	46bd      	mov	sp, r7
  4085d2:	bd80      	pop	{r7, pc}
  4085d4:	200000b0 	.word	0x200000b0
  4085d8:	0040b8c5 	.word	0x0040b8c5
  4085dc:	400e0e00 	.word	0x400e0e00
  4085e0:	0040b4a5 	.word	0x0040b4a5
  4085e4:	0040b485 	.word	0x0040b485

004085e8 <drv_gpio_int_cd>:
	}
	pio_enable_interrupt(PIOA, PinMask);
}

static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
  4085e8:	b580      	push	{r7, lr}
  4085ea:	b084      	sub	sp, #16
  4085ec:	af00      	add	r7, sp, #0
  4085ee:	6078      	str	r0, [r7, #4]
  4085f0:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  4085f2:	4b0e      	ldr	r3, [pc, #56]	; (40862c <drv_gpio_int_cd+0x44>)
  4085f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
  4085f8:	4618      	mov	r0, r3
  4085fa:	4b0d      	ldr	r3, [pc, #52]	; (408630 <drv_gpio_int_cd+0x48>)
  4085fc:	4798      	blx	r3
  4085fe:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOB, PinMask);
  408600:	480c      	ldr	r0, [pc, #48]	; (408634 <drv_gpio_int_cd+0x4c>)
  408602:	68f9      	ldr	r1, [r7, #12]
  408604:	4b0c      	ldr	r3, [pc, #48]	; (408638 <drv_gpio_int_cd+0x50>)
  408606:	4798      	blx	r3
	uint32_t ReadIsr = PIOB->PIO_ISR;
  408608:	4b0a      	ldr	r3, [pc, #40]	; (408634 <drv_gpio_int_cd+0x4c>)
  40860a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40860c:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40860e:	68fa      	ldr	r2, [r7, #12]
  408610:	683b      	ldr	r3, [r7, #0]
  408612:	429a      	cmp	r2, r3
  408614:	d103      	bne.n	40861e <drv_gpio_int_cd+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_SD_CD].gpioSetFlag = 1;
  408616:	4b05      	ldr	r3, [pc, #20]	; (40862c <drv_gpio_int_cd+0x44>)
  408618:	2201      	movs	r2, #1
  40861a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	}
	pio_enable_interrupt(PIOB, PinMask);
  40861e:	4805      	ldr	r0, [pc, #20]	; (408634 <drv_gpio_int_cd+0x4c>)
  408620:	68f9      	ldr	r1, [r7, #12]
  408622:	4b06      	ldr	r3, [pc, #24]	; (40863c <drv_gpio_int_cd+0x54>)
  408624:	4798      	blx	r3
}
  408626:	3710      	adds	r7, #16
  408628:	46bd      	mov	sp, r7
  40862a:	bd80      	pop	{r7, pc}
  40862c:	200000b0 	.word	0x200000b0
  408630:	0040b8c5 	.word	0x0040b8c5
  408634:	400e1000 	.word	0x400e1000
  408638:	0040b4a5 	.word	0x0040b4a5
  40863c:	0040b485 	.word	0x0040b485

00408640 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  408640:	b480      	push	{r7}
  408642:	b083      	sub	sp, #12
  408644:	af00      	add	r7, sp, #0
  408646:	4603      	mov	r3, r0
  408648:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40864a:	4b08      	ldr	r3, [pc, #32]	; (40866c <NVIC_EnableIRQ+0x2c>)
  40864c:	f997 2007 	ldrsb.w	r2, [r7, #7]
  408650:	0952      	lsrs	r2, r2, #5
  408652:	79f9      	ldrb	r1, [r7, #7]
  408654:	f001 011f 	and.w	r1, r1, #31
  408658:	2001      	movs	r0, #1
  40865a:	fa00 f101 	lsl.w	r1, r0, r1
  40865e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408662:	370c      	adds	r7, #12
  408664:	46bd      	mov	sp, r7
  408666:	f85d 7b04 	ldr.w	r7, [sp], #4
  40866a:	4770      	bx	lr
  40866c:	e000e100 	.word	0xe000e100

00408670 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  408670:	b480      	push	{r7}
  408672:	b083      	sub	sp, #12
  408674:	af00      	add	r7, sp, #0
  408676:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408678:	687b      	ldr	r3, [r7, #4]
  40867a:	2b07      	cmp	r3, #7
  40867c:	d825      	bhi.n	4086ca <osc_get_rate+0x5a>
  40867e:	a201      	add	r2, pc, #4	; (adr r2, 408684 <osc_get_rate+0x14>)
  408680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408684:	004086a5 	.word	0x004086a5
  408688:	004086ab 	.word	0x004086ab
  40868c:	004086b1 	.word	0x004086b1
  408690:	004086b7 	.word	0x004086b7
  408694:	004086bb 	.word	0x004086bb
  408698:	004086bf 	.word	0x004086bf
  40869c:	004086c3 	.word	0x004086c3
  4086a0:	004086c7 	.word	0x004086c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4086a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4086a8:	e010      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4086aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4086ae:	e00d      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4086b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4086b4:	e00a      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4086b6:	4b08      	ldr	r3, [pc, #32]	; (4086d8 <osc_get_rate+0x68>)
  4086b8:	e008      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4086ba:	4b08      	ldr	r3, [pc, #32]	; (4086dc <osc_get_rate+0x6c>)
  4086bc:	e006      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4086be:	4b08      	ldr	r3, [pc, #32]	; (4086e0 <osc_get_rate+0x70>)
  4086c0:	e004      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4086c2:	4b08      	ldr	r3, [pc, #32]	; (4086e4 <osc_get_rate+0x74>)
  4086c4:	e002      	b.n	4086cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4086c6:	4b07      	ldr	r3, [pc, #28]	; (4086e4 <osc_get_rate+0x74>)
  4086c8:	e000      	b.n	4086cc <osc_get_rate+0x5c>
	}

	return 0;
  4086ca:	2300      	movs	r3, #0
}
  4086cc:	4618      	mov	r0, r3
  4086ce:	370c      	adds	r7, #12
  4086d0:	46bd      	mov	sp, r7
  4086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4086d6:	4770      	bx	lr
  4086d8:	003d0900 	.word	0x003d0900
  4086dc:	007a1200 	.word	0x007a1200
  4086e0:	00b71b00 	.word	0x00b71b00
  4086e4:	00f42400 	.word	0x00f42400

004086e8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4086e8:	b580      	push	{r7, lr}
  4086ea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4086ec:	2006      	movs	r0, #6
  4086ee:	4b04      	ldr	r3, [pc, #16]	; (408700 <sysclk_get_main_hz+0x18>)
  4086f0:	4798      	blx	r3
  4086f2:	4602      	mov	r2, r0
  4086f4:	4613      	mov	r3, r2
  4086f6:	011b      	lsls	r3, r3, #4
  4086f8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4086fa:	4618      	mov	r0, r3
  4086fc:	bd80      	pop	{r7, pc}
  4086fe:	bf00      	nop
  408700:	00408671 	.word	0x00408671

00408704 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  408704:	b580      	push	{r7, lr}
  408706:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  408708:	4b02      	ldr	r3, [pc, #8]	; (408714 <sysclk_get_peripheral_hz+0x10>)
  40870a:	4798      	blx	r3
  40870c:	4603      	mov	r3, r0
  40870e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  408710:	4618      	mov	r0, r3
  408712:	bd80      	pop	{r7, pc}
  408714:	004086e9 	.word	0x004086e9

00408718 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  408718:	b580      	push	{r7, lr}
  40871a:	b082      	sub	sp, #8
  40871c:	af00      	add	r7, sp, #0
  40871e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  408720:	6878      	ldr	r0, [r7, #4]
  408722:	4b02      	ldr	r3, [pc, #8]	; (40872c <sysclk_enable_peripheral_clock+0x14>)
  408724:	4798      	blx	r3
}
  408726:	3708      	adds	r7, #8
  408728:	46bd      	mov	sp, r7
  40872a:	bd80      	pop	{r7, pc}
  40872c:	0040bca9 	.word	0x0040bca9

00408730 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  408730:	b580      	push	{r7, lr}
  408732:	b08c      	sub	sp, #48	; 0x30
  408734:	af00      	add	r7, sp, #0
  408736:	6078      	str	r0, [r7, #4]
  408738:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40873a:	4b31      	ldr	r3, [pc, #196]	; (408800 <usart_serial_init+0xd0>)
  40873c:	4798      	blx	r3
  40873e:	4603      	mov	r3, r0
  408740:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  408742:	683b      	ldr	r3, [r7, #0]
  408744:	681b      	ldr	r3, [r3, #0]
  408746:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  408748:	683b      	ldr	r3, [r7, #0]
  40874a:	689b      	ldr	r3, [r3, #8]
  40874c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40874e:	683b      	ldr	r3, [r7, #0]
  408750:	681b      	ldr	r3, [r3, #0]
  408752:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  408754:	683b      	ldr	r3, [r7, #0]
  408756:	685b      	ldr	r3, [r3, #4]
  408758:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40875a:	683b      	ldr	r3, [r7, #0]
  40875c:	689b      	ldr	r3, [r3, #8]
  40875e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  408760:	683b      	ldr	r3, [r7, #0]
  408762:	7b1b      	ldrb	r3, [r3, #12]
  408764:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  408766:	2300      	movs	r3, #0
  408768:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40876a:	687a      	ldr	r2, [r7, #4]
  40876c:	4b25      	ldr	r3, [pc, #148]	; (408804 <usart_serial_init+0xd4>)
  40876e:	429a      	cmp	r2, r3
  408770:	d108      	bne.n	408784 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  408772:	2008      	movs	r0, #8
  408774:	4b24      	ldr	r3, [pc, #144]	; (408808 <usart_serial_init+0xd8>)
  408776:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  408778:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40877c:	6878      	ldr	r0, [r7, #4]
  40877e:	4619      	mov	r1, r3
  408780:	4b22      	ldr	r3, [pc, #136]	; (40880c <usart_serial_init+0xdc>)
  408782:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  408784:	687a      	ldr	r2, [r7, #4]
  408786:	4b22      	ldr	r3, [pc, #136]	; (408810 <usart_serial_init+0xe0>)
  408788:	429a      	cmp	r2, r3
  40878a:	d108      	bne.n	40879e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40878c:	2009      	movs	r0, #9
  40878e:	4b1e      	ldr	r3, [pc, #120]	; (408808 <usart_serial_init+0xd8>)
  408790:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  408792:	f107 0324 	add.w	r3, r7, #36	; 0x24
  408796:	6878      	ldr	r0, [r7, #4]
  408798:	4619      	mov	r1, r3
  40879a:	4b1c      	ldr	r3, [pc, #112]	; (40880c <usart_serial_init+0xdc>)
  40879c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40879e:	687a      	ldr	r2, [r7, #4]
  4087a0:	4b1c      	ldr	r3, [pc, #112]	; (408814 <usart_serial_init+0xe4>)
  4087a2:	429a      	cmp	r2, r3
  4087a4:	d112      	bne.n	4087cc <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4087a6:	200e      	movs	r0, #14
  4087a8:	4b17      	ldr	r3, [pc, #92]	; (408808 <usart_serial_init+0xd8>)
  4087aa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4087ac:	4b14      	ldr	r3, [pc, #80]	; (408800 <usart_serial_init+0xd0>)
  4087ae:	4798      	blx	r3
  4087b0:	4603      	mov	r3, r0
  4087b2:	f107 020c 	add.w	r2, r7, #12
  4087b6:	6878      	ldr	r0, [r7, #4]
  4087b8:	4611      	mov	r1, r2
  4087ba:	461a      	mov	r2, r3
  4087bc:	4b16      	ldr	r3, [pc, #88]	; (408818 <usart_serial_init+0xe8>)
  4087be:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4087c0:	6878      	ldr	r0, [r7, #4]
  4087c2:	4b16      	ldr	r3, [pc, #88]	; (40881c <usart_serial_init+0xec>)
  4087c4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4087c6:	6878      	ldr	r0, [r7, #4]
  4087c8:	4b15      	ldr	r3, [pc, #84]	; (408820 <usart_serial_init+0xf0>)
  4087ca:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4087cc:	687a      	ldr	r2, [r7, #4]
  4087ce:	4b15      	ldr	r3, [pc, #84]	; (408824 <usart_serial_init+0xf4>)
  4087d0:	429a      	cmp	r2, r3
  4087d2:	d112      	bne.n	4087fa <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4087d4:	200f      	movs	r0, #15
  4087d6:	4b0c      	ldr	r3, [pc, #48]	; (408808 <usart_serial_init+0xd8>)
  4087d8:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4087da:	4b09      	ldr	r3, [pc, #36]	; (408800 <usart_serial_init+0xd0>)
  4087dc:	4798      	blx	r3
  4087de:	4603      	mov	r3, r0
  4087e0:	f107 020c 	add.w	r2, r7, #12
  4087e4:	6878      	ldr	r0, [r7, #4]
  4087e6:	4611      	mov	r1, r2
  4087e8:	461a      	mov	r2, r3
  4087ea:	4b0b      	ldr	r3, [pc, #44]	; (408818 <usart_serial_init+0xe8>)
  4087ec:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4087ee:	6878      	ldr	r0, [r7, #4]
  4087f0:	4b0a      	ldr	r3, [pc, #40]	; (40881c <usart_serial_init+0xec>)
  4087f2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4087f4:	6878      	ldr	r0, [r7, #4]
  4087f6:	4b0a      	ldr	r3, [pc, #40]	; (408820 <usart_serial_init+0xf0>)
  4087f8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4087fa:	3730      	adds	r7, #48	; 0x30
  4087fc:	46bd      	mov	sp, r7
  4087fe:	bd80      	pop	{r7, pc}
  408800:	00408705 	.word	0x00408705
  408804:	400e0600 	.word	0x400e0600
  408808:	00408719 	.word	0x00408719
  40880c:	004027f5 	.word	0x004027f5
  408810:	400e0800 	.word	0x400e0800
  408814:	40024000 	.word	0x40024000
  408818:	004029d9 	.word	0x004029d9
  40881c:	00402a5d 	.word	0x00402a5d
  408820:	00402a8d 	.word	0x00402a8d
  408824:	40028000 	.word	0x40028000

00408828 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  408828:	b580      	push	{r7, lr}
  40882a:	b082      	sub	sp, #8
  40882c:	af00      	add	r7, sp, #0
  40882e:	6078      	str	r0, [r7, #4]
  408830:	460b      	mov	r3, r1
  408832:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  408834:	687a      	ldr	r2, [r7, #4]
  408836:	4b20      	ldr	r3, [pc, #128]	; (4088b8 <usart_serial_putchar+0x90>)
  408838:	429a      	cmp	r2, r3
  40883a:	d10a      	bne.n	408852 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40883c:	bf00      	nop
  40883e:	78fb      	ldrb	r3, [r7, #3]
  408840:	6878      	ldr	r0, [r7, #4]
  408842:	4619      	mov	r1, r3
  408844:	4b1d      	ldr	r3, [pc, #116]	; (4088bc <usart_serial_putchar+0x94>)
  408846:	4798      	blx	r3
  408848:	4603      	mov	r3, r0
  40884a:	2b00      	cmp	r3, #0
  40884c:	d1f7      	bne.n	40883e <usart_serial_putchar+0x16>
		return 1;
  40884e:	2301      	movs	r3, #1
  408850:	e02d      	b.n	4088ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  408852:	687a      	ldr	r2, [r7, #4]
  408854:	4b1a      	ldr	r3, [pc, #104]	; (4088c0 <usart_serial_putchar+0x98>)
  408856:	429a      	cmp	r2, r3
  408858:	d10a      	bne.n	408870 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40885a:	bf00      	nop
  40885c:	78fb      	ldrb	r3, [r7, #3]
  40885e:	6878      	ldr	r0, [r7, #4]
  408860:	4619      	mov	r1, r3
  408862:	4b16      	ldr	r3, [pc, #88]	; (4088bc <usart_serial_putchar+0x94>)
  408864:	4798      	blx	r3
  408866:	4603      	mov	r3, r0
  408868:	2b00      	cmp	r3, #0
  40886a:	d1f7      	bne.n	40885c <usart_serial_putchar+0x34>
		return 1;
  40886c:	2301      	movs	r3, #1
  40886e:	e01e      	b.n	4088ae <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  408870:	687a      	ldr	r2, [r7, #4]
  408872:	4b14      	ldr	r3, [pc, #80]	; (4088c4 <usart_serial_putchar+0x9c>)
  408874:	429a      	cmp	r2, r3
  408876:	d10a      	bne.n	40888e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  408878:	bf00      	nop
  40887a:	78fb      	ldrb	r3, [r7, #3]
  40887c:	6878      	ldr	r0, [r7, #4]
  40887e:	4619      	mov	r1, r3
  408880:	4b11      	ldr	r3, [pc, #68]	; (4088c8 <usart_serial_putchar+0xa0>)
  408882:	4798      	blx	r3
  408884:	4603      	mov	r3, r0
  408886:	2b00      	cmp	r3, #0
  408888:	d1f7      	bne.n	40887a <usart_serial_putchar+0x52>
		return 1;
  40888a:	2301      	movs	r3, #1
  40888c:	e00f      	b.n	4088ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40888e:	687a      	ldr	r2, [r7, #4]
  408890:	4b0e      	ldr	r3, [pc, #56]	; (4088cc <usart_serial_putchar+0xa4>)
  408892:	429a      	cmp	r2, r3
  408894:	d10a      	bne.n	4088ac <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  408896:	bf00      	nop
  408898:	78fb      	ldrb	r3, [r7, #3]
  40889a:	6878      	ldr	r0, [r7, #4]
  40889c:	4619      	mov	r1, r3
  40889e:	4b0a      	ldr	r3, [pc, #40]	; (4088c8 <usart_serial_putchar+0xa0>)
  4088a0:	4798      	blx	r3
  4088a2:	4603      	mov	r3, r0
  4088a4:	2b00      	cmp	r3, #0
  4088a6:	d1f7      	bne.n	408898 <usart_serial_putchar+0x70>
		return 1;
  4088a8:	2301      	movs	r3, #1
  4088aa:	e000      	b.n	4088ae <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4088ac:	2300      	movs	r3, #0
}
  4088ae:	4618      	mov	r0, r3
  4088b0:	3708      	adds	r7, #8
  4088b2:	46bd      	mov	sp, r7
  4088b4:	bd80      	pop	{r7, pc}
  4088b6:	bf00      	nop
  4088b8:	400e0600 	.word	0x400e0600
  4088bc:	0040288d 	.word	0x0040288d
  4088c0:	400e0800 	.word	0x400e0800
  4088c4:	40024000 	.word	0x40024000
  4088c8:	00402b49 	.word	0x00402b49
  4088cc:	40028000 	.word	0x40028000

004088d0 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  4088d0:	b580      	push	{r7, lr}
  4088d2:	b084      	sub	sp, #16
  4088d4:	af00      	add	r7, sp, #0
  4088d6:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  4088d8:	2300      	movs	r3, #0
  4088da:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  4088dc:	687b      	ldr	r3, [r7, #4]
  4088de:	681a      	ldr	r2, [r3, #0]
  4088e0:	4b9e      	ldr	r3, [pc, #632]	; (408b5c <drv_uart_init+0x28c>)
  4088e2:	429a      	cmp	r2, r3
  4088e4:	d103      	bne.n	4088ee <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  4088e6:	687b      	ldr	r3, [r7, #4]
  4088e8:	2200      	movs	r2, #0
  4088ea:	615a      	str	r2, [r3, #20]
  4088ec:	e01c      	b.n	408928 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == UART1)
  4088ee:	687b      	ldr	r3, [r7, #4]
  4088f0:	681a      	ldr	r2, [r3, #0]
  4088f2:	4b9b      	ldr	r3, [pc, #620]	; (408b60 <drv_uart_init+0x290>)
  4088f4:	429a      	cmp	r2, r3
  4088f6:	d103      	bne.n	408900 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  4088f8:	687b      	ldr	r3, [r7, #4]
  4088fa:	2201      	movs	r2, #1
  4088fc:	615a      	str	r2, [r3, #20]
  4088fe:	e013      	b.n	408928 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART0)
  408900:	687b      	ldr	r3, [r7, #4]
  408902:	681a      	ldr	r2, [r3, #0]
  408904:	4b97      	ldr	r3, [pc, #604]	; (408b64 <drv_uart_init+0x294>)
  408906:	429a      	cmp	r2, r3
  408908:	d103      	bne.n	408912 <drv_uart_init+0x42>
	{	
		uartConfig->mem_index = 2;
  40890a:	687b      	ldr	r3, [r7, #4]
  40890c:	2202      	movs	r2, #2
  40890e:	615a      	str	r2, [r3, #20]
  408910:	e00a      	b.n	408928 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART1)
  408912:	687b      	ldr	r3, [r7, #4]
  408914:	681a      	ldr	r2, [r3, #0]
  408916:	4b94      	ldr	r3, [pc, #592]	; (408b68 <drv_uart_init+0x298>)
  408918:	429a      	cmp	r2, r3
  40891a:	d103      	bne.n	408924 <drv_uart_init+0x54>
	{

		uartConfig->mem_index = 3;
  40891c:	687b      	ldr	r3, [r7, #4]
  40891e:	2203      	movs	r2, #3
  408920:	615a      	str	r2, [r3, #20]
  408922:	e001      	b.n	408928 <drv_uart_init+0x58>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  408924:	2301      	movs	r3, #1
  408926:	e147      	b.n	408bb8 <drv_uart_init+0x2e8>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 4)
  408928:	687b      	ldr	r3, [r7, #4]
  40892a:	695b      	ldr	r3, [r3, #20]
  40892c:	2b00      	cmp	r3, #0
  40892e:	db03      	blt.n	408938 <drv_uart_init+0x68>
  408930:	687b      	ldr	r3, [r7, #4]
  408932:	695b      	ldr	r3, [r3, #20]
  408934:	2b04      	cmp	r3, #4
  408936:	dd01      	ble.n	40893c <drv_uart_init+0x6c>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  408938:	2301      	movs	r3, #1
  40893a:	e13d      	b.n	408bb8 <drv_uart_init+0x2e8>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40893c:	687b      	ldr	r3, [r7, #4]
  40893e:	695a      	ldr	r2, [r3, #20]
  408940:	498a      	ldr	r1, [pc, #552]	; (408b6c <drv_uart_init+0x29c>)
  408942:	4613      	mov	r3, r2
  408944:	015b      	lsls	r3, r3, #5
  408946:	4413      	add	r3, r2
  408948:	015b      	lsls	r3, r3, #5
  40894a:	440b      	add	r3, r1
  40894c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408950:	799b      	ldrb	r3, [r3, #6]
  408952:	b2db      	uxtb	r3, r3
  408954:	2b01      	cmp	r3, #1
  408956:	d101      	bne.n	40895c <drv_uart_init+0x8c>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  408958:	2301      	movs	r3, #1
  40895a:	e12d      	b.n	408bb8 <drv_uart_init+0x2e8>
	}
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40895c:	687b      	ldr	r3, [r7, #4]
  40895e:	695a      	ldr	r2, [r3, #20]
  408960:	4613      	mov	r3, r2
  408962:	015b      	lsls	r3, r3, #5
  408964:	4413      	add	r3, r2
  408966:	015b      	lsls	r3, r3, #5
  408968:	4a80      	ldr	r2, [pc, #512]	; (408b6c <drv_uart_init+0x29c>)
  40896a:	4413      	add	r3, r2
  40896c:	4618      	mov	r0, r3
  40896e:	2100      	movs	r1, #0
  408970:	f44f 7200 	mov.w	r2, #512	; 0x200
  408974:	4b7e      	ldr	r3, [pc, #504]	; (408b70 <drv_uart_init+0x2a0>)
  408976:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  408978:	687b      	ldr	r3, [r7, #4]
  40897a:	695a      	ldr	r2, [r3, #20]
  40897c:	497b      	ldr	r1, [pc, #492]	; (408b6c <drv_uart_init+0x29c>)
  40897e:	4613      	mov	r3, r2
  408980:	015b      	lsls	r3, r3, #5
  408982:	4413      	add	r3, r2
  408984:	015b      	lsls	r3, r3, #5
  408986:	440b      	add	r3, r1
  408988:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40898c:	2200      	movs	r2, #0
  40898e:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  408990:	687b      	ldr	r3, [r7, #4]
  408992:	695a      	ldr	r2, [r3, #20]
  408994:	4975      	ldr	r1, [pc, #468]	; (408b6c <drv_uart_init+0x29c>)
  408996:	4613      	mov	r3, r2
  408998:	015b      	lsls	r3, r3, #5
  40899a:	4413      	add	r3, r2
  40899c:	015b      	lsls	r3, r3, #5
  40899e:	440b      	add	r3, r1
  4089a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4089a4:	2200      	movs	r2, #0
  4089a6:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  4089a8:	687b      	ldr	r3, [r7, #4]
  4089aa:	695a      	ldr	r2, [r3, #20]
  4089ac:	496f      	ldr	r1, [pc, #444]	; (408b6c <drv_uart_init+0x29c>)
  4089ae:	4613      	mov	r3, r2
  4089b0:	015b      	lsls	r3, r3, #5
  4089b2:	4413      	add	r3, r2
  4089b4:	015b      	lsls	r3, r3, #5
  4089b6:	440b      	add	r3, r1
  4089b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4089bc:	2200      	movs	r2, #0
  4089be:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  4089c0:	687b      	ldr	r3, [r7, #4]
  4089c2:	695a      	ldr	r2, [r3, #20]
  4089c4:	4969      	ldr	r1, [pc, #420]	; (408b6c <drv_uart_init+0x29c>)
  4089c6:	4613      	mov	r3, r2
  4089c8:	015b      	lsls	r3, r3, #5
  4089ca:	4413      	add	r3, r2
  4089cc:	015b      	lsls	r3, r3, #5
  4089ce:	440b      	add	r3, r1
  4089d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4089d4:	2200      	movs	r2, #0
  4089d6:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  4089d8:	687b      	ldr	r3, [r7, #4]
  4089da:	695a      	ldr	r2, [r3, #20]
  4089dc:	4963      	ldr	r1, [pc, #396]	; (408b6c <drv_uart_init+0x29c>)
  4089de:	4613      	mov	r3, r2
  4089e0:	015b      	lsls	r3, r3, #5
  4089e2:	4413      	add	r3, r2
  4089e4:	015b      	lsls	r3, r3, #5
  4089e6:	440b      	add	r3, r1
  4089e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4089ec:	2200      	movs	r2, #0
  4089ee:	705a      	strb	r2, [r3, #1]
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  4089f0:	687b      	ldr	r3, [r7, #4]
  4089f2:	681a      	ldr	r2, [r3, #0]
  4089f4:	687b      	ldr	r3, [r7, #4]
  4089f6:	3304      	adds	r3, #4
  4089f8:	4610      	mov	r0, r2
  4089fa:	4619      	mov	r1, r3
  4089fc:	4b5d      	ldr	r3, [pc, #372]	; (408b74 <drv_uart_init+0x2a4>)
  4089fe:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  408a00:	687b      	ldr	r3, [r7, #4]
  408a02:	681b      	ldr	r3, [r3, #0]
  408a04:	4618      	mov	r0, r3
  408a06:	f04f 31ff 	mov.w	r1, #4294967295
  408a0a:	4b5b      	ldr	r3, [pc, #364]	; (408b78 <drv_uart_init+0x2a8>)
  408a0c:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  408a0e:	687b      	ldr	r3, [r7, #4]
  408a10:	681a      	ldr	r2, [r3, #0]
  408a12:	4b52      	ldr	r3, [pc, #328]	; (408b5c <drv_uart_init+0x28c>)
  408a14:	429a      	cmp	r2, r3
  408a16:	d11e      	bne.n	408a56 <drv_uart_init+0x186>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  408a18:	200b      	movs	r0, #11
  408a1a:	4b58      	ldr	r3, [pc, #352]	; (408b7c <drv_uart_init+0x2ac>)
  408a1c:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  408a1e:	4b58      	ldr	r3, [pc, #352]	; (408b80 <drv_uart_init+0x2b0>)
  408a20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  408a24:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  408a26:	4b56      	ldr	r3, [pc, #344]	; (408b80 <drv_uart_init+0x2b0>)
  408a28:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  408a2c:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  408a2e:	4b54      	ldr	r3, [pc, #336]	; (408b80 <drv_uart_init+0x2b0>)
  408a30:	4a53      	ldr	r2, [pc, #332]	; (408b80 <drv_uart_init+0x2b0>)
  408a32:	6f12      	ldr	r2, [r2, #112]	; 0x70
  408a34:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  408a38:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  408a3a:	4b51      	ldr	r3, [pc, #324]	; (408b80 <drv_uart_init+0x2b0>)
  408a3c:	4a50      	ldr	r2, [pc, #320]	; (408b80 <drv_uart_init+0x2b0>)
  408a3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
  408a40:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  408a44:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
  408a46:	4b4e      	ldr	r3, [pc, #312]	; (408b80 <drv_uart_init+0x2b0>)
  408a48:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  408a4c:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART0_IRQn);
  408a4e:	2008      	movs	r0, #8
  408a50:	4b4c      	ldr	r3, [pc, #304]	; (408b84 <drv_uart_init+0x2b4>)
  408a52:	4798      	blx	r3
  408a54:	e09c      	b.n	408b90 <drv_uart_init+0x2c0>
	}
	else if(uartConfig->p_usart == UART1)
  408a56:	687b      	ldr	r3, [r7, #4]
  408a58:	681a      	ldr	r2, [r3, #0]
  408a5a:	4b41      	ldr	r3, [pc, #260]	; (408b60 <drv_uart_init+0x290>)
  408a5c:	429a      	cmp	r2, r3
  408a5e:	d11b      	bne.n	408a98 <drv_uart_init+0x1c8>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  408a60:	200c      	movs	r0, #12
  408a62:	4b46      	ldr	r3, [pc, #280]	; (408b7c <drv_uart_init+0x2ac>)
  408a64:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  408a66:	4b48      	ldr	r3, [pc, #288]	; (408b88 <drv_uart_init+0x2b8>)
  408a68:	220c      	movs	r2, #12
  408a6a:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  408a6c:	4b46      	ldr	r3, [pc, #280]	; (408b88 <drv_uart_init+0x2b8>)
  408a6e:	220c      	movs	r2, #12
  408a70:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  408a72:	4b45      	ldr	r3, [pc, #276]	; (408b88 <drv_uart_init+0x2b8>)
  408a74:	4a44      	ldr	r2, [pc, #272]	; (408b88 <drv_uart_init+0x2b8>)
  408a76:	6f12      	ldr	r2, [r2, #112]	; 0x70
  408a78:	f022 020c 	bic.w	r2, r2, #12
  408a7c:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  408a7e:	4b42      	ldr	r3, [pc, #264]	; (408b88 <drv_uart_init+0x2b8>)
  408a80:	4a41      	ldr	r2, [pc, #260]	; (408b88 <drv_uart_init+0x2b8>)
  408a82:	6f52      	ldr	r2, [r2, #116]	; 0x74
  408a84:	f022 020c 	bic.w	r2, r2, #12
  408a88:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);			
  408a8a:	4b3f      	ldr	r3, [pc, #252]	; (408b88 <drv_uart_init+0x2b8>)
  408a8c:	220c      	movs	r2, #12
  408a8e:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART1_IRQn);
  408a90:	2009      	movs	r0, #9
  408a92:	4b3c      	ldr	r3, [pc, #240]	; (408b84 <drv_uart_init+0x2b4>)
  408a94:	4798      	blx	r3
  408a96:	e07b      	b.n	408b90 <drv_uart_init+0x2c0>
	}
	else if(uartConfig->p_usart == USART0)
  408a98:	687b      	ldr	r3, [r7, #4]
  408a9a:	681a      	ldr	r2, [r3, #0]
  408a9c:	4b31      	ldr	r3, [pc, #196]	; (408b64 <drv_uart_init+0x294>)
  408a9e:	429a      	cmp	r2, r3
  408aa0:	d127      	bne.n	408af2 <drv_uart_init+0x222>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  408aa2:	200b      	movs	r0, #11
  408aa4:	4b35      	ldr	r3, [pc, #212]	; (408b7c <drv_uart_init+0x2ac>)
  408aa6:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  408aa8:	4b35      	ldr	r3, [pc, #212]	; (408b80 <drv_uart_init+0x2b0>)
  408aaa:	2260      	movs	r2, #96	; 0x60
  408aac:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  408aae:	4b34      	ldr	r3, [pc, #208]	; (408b80 <drv_uart_init+0x2b0>)
  408ab0:	2260      	movs	r2, #96	; 0x60
  408ab2:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  408ab4:	4b32      	ldr	r3, [pc, #200]	; (408b80 <drv_uart_init+0x2b0>)
  408ab6:	4a32      	ldr	r2, [pc, #200]	; (408b80 <drv_uart_init+0x2b0>)
  408ab8:	6f12      	ldr	r2, [r2, #112]	; 0x70
  408aba:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  408abe:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  408ac0:	4b2f      	ldr	r3, [pc, #188]	; (408b80 <drv_uart_init+0x2b0>)
  408ac2:	4a2f      	ldr	r2, [pc, #188]	; (408b80 <drv_uart_init+0x2b0>)
  408ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
  408ac6:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  408aca:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  408acc:	4b2c      	ldr	r3, [pc, #176]	; (408b80 <drv_uart_init+0x2b0>)
  408ace:	2260      	movs	r2, #96	; 0x60
  408ad0:	605a      	str	r2, [r3, #4]
	
		/* configure USART0 enable Pin (PA2) Peripheral-B */
		PIOA->PIO_PUDR   =  (PIO_PA2);
  408ad2:	4b2b      	ldr	r3, [pc, #172]	; (408b80 <drv_uart_init+0x2b0>)
  408ad4:	2204      	movs	r2, #4
  408ad6:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA2);
  408ad8:	4b29      	ldr	r3, [pc, #164]	; (408b80 <drv_uart_init+0x2b0>)
  408ada:	2204      	movs	r2, #4
  408adc:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA2);
  408ade:	4b28      	ldr	r3, [pc, #160]	; (408b80 <drv_uart_init+0x2b0>)
  408ae0:	2204      	movs	r2, #4
  408ae2:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA2);	
  408ae4:	4b26      	ldr	r3, [pc, #152]	; (408b80 <drv_uart_init+0x2b0>)
  408ae6:	2204      	movs	r2, #4
  408ae8:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART0_IRQn);
  408aea:	200e      	movs	r0, #14
  408aec:	4b25      	ldr	r3, [pc, #148]	; (408b84 <drv_uart_init+0x2b4>)
  408aee:	4798      	blx	r3
  408af0:	e04e      	b.n	408b90 <drv_uart_init+0x2c0>
	}
	else if(uartConfig->p_usart == USART1)
  408af2:	687b      	ldr	r3, [r7, #4]
  408af4:	681a      	ldr	r2, [r3, #0]
  408af6:	4b1c      	ldr	r3, [pc, #112]	; (408b68 <drv_uart_init+0x298>)
  408af8:	429a      	cmp	r2, r3
  408afa:	d147      	bne.n	408b8c <drv_uart_init+0x2bc>
	{		
		/* Configure USART1 Pins (PA22 = TX, PA21 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  408afc:	200b      	movs	r0, #11
  408afe:	4b1f      	ldr	r3, [pc, #124]	; (408b7c <drv_uart_init+0x2ac>)
  408b00:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  408b02:	4b1f      	ldr	r3, [pc, #124]	; (408b80 <drv_uart_init+0x2b0>)
  408b04:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  408b08:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA21A_RXD1 |  PIO_PA22A_TXD1);
  408b0a:	4b1d      	ldr	r3, [pc, #116]	; (408b80 <drv_uart_init+0x2b0>)
  408b0c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  408b10:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  408b12:	4b1b      	ldr	r3, [pc, #108]	; (408b80 <drv_uart_init+0x2b0>)
  408b14:	4a1a      	ldr	r2, [pc, #104]	; (408b80 <drv_uart_init+0x2b0>)
  408b16:	6f12      	ldr	r2, [r2, #112]	; 0x70
  408b18:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  408b1c:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  408b1e:	4b18      	ldr	r3, [pc, #96]	; (408b80 <drv_uart_init+0x2b0>)
  408b20:	4a17      	ldr	r2, [pc, #92]	; (408b80 <drv_uart_init+0x2b0>)
  408b22:	6f52      	ldr	r2, [r2, #116]	; 0x74
  408b24:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  408b28:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  408b2a:	4b15      	ldr	r3, [pc, #84]	; (408b80 <drv_uart_init+0x2b0>)
  408b2c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  408b30:	605a      	str	r2, [r3, #4]
	
		/* configure USART1 enable Pin (PA23) */
		PIOA->PIO_PUDR   =  (PIO_PA23);
  408b32:	4b13      	ldr	r3, [pc, #76]	; (408b80 <drv_uart_init+0x2b0>)
  408b34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408b38:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA23);
  408b3a:	4b11      	ldr	r3, [pc, #68]	; (408b80 <drv_uart_init+0x2b0>)
  408b3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408b40:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA23);
  408b42:	4b0f      	ldr	r3, [pc, #60]	; (408b80 <drv_uart_init+0x2b0>)
  408b44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408b48:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA23);		
  408b4a:	4b0d      	ldr	r3, [pc, #52]	; (408b80 <drv_uart_init+0x2b0>)
  408b4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  408b50:	601a      	str	r2, [r3, #0]
		
		NVIC_EnableIRQ(USART1_IRQn);
  408b52:	200f      	movs	r0, #15
  408b54:	4b0b      	ldr	r3, [pc, #44]	; (408b84 <drv_uart_init+0x2b4>)
  408b56:	4798      	blx	r3
  408b58:	e01a      	b.n	408b90 <drv_uart_init+0x2c0>
  408b5a:	bf00      	nop
  408b5c:	400e0600 	.word	0x400e0600
  408b60:	400e0800 	.word	0x400e0800
  408b64:	40024000 	.word	0x40024000
  408b68:	40028000 	.word	0x40028000
  408b6c:	20002cdc 	.word	0x20002cdc
  408b70:	0040cfd5 	.word	0x0040cfd5
  408b74:	00408731 	.word	0x00408731
  408b78:	00402ad9 	.word	0x00402ad9
  408b7c:	00408719 	.word	0x00408719
  408b80:	400e0e00 	.word	0x400e0e00
  408b84:	00408641 	.word	0x00408641
  408b88:	400e1000 	.word	0x400e1000
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  408b8c:	2301      	movs	r3, #1
  408b8e:	e013      	b.n	408bb8 <drv_uart_init+0x2e8>
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  408b90:	687b      	ldr	r3, [r7, #4]
  408b92:	695a      	ldr	r2, [r3, #20]
  408b94:	490a      	ldr	r1, [pc, #40]	; (408bc0 <drv_uart_init+0x2f0>)
  408b96:	4613      	mov	r3, r2
  408b98:	015b      	lsls	r3, r3, #5
  408b9a:	4413      	add	r3, r2
  408b9c:	015b      	lsls	r3, r3, #5
  408b9e:	440b      	add	r3, r1
  408ba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408ba4:	2201      	movs	r2, #1
  408ba6:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  408ba8:	687b      	ldr	r3, [r7, #4]
  408baa:	681b      	ldr	r3, [r3, #0]
  408bac:	4618      	mov	r0, r3
  408bae:	f240 2101 	movw	r1, #513	; 0x201
  408bb2:	4b04      	ldr	r3, [pc, #16]	; (408bc4 <drv_uart_init+0x2f4>)
  408bb4:	4798      	blx	r3
	
	return status; 
  408bb6:	7bfb      	ldrb	r3, [r7, #15]
}
  408bb8:	4618      	mov	r0, r3
  408bba:	3710      	adds	r7, #16
  408bbc:	46bd      	mov	sp, r7
  408bbe:	bd80      	pop	{r7, pc}
  408bc0:	20002cdc 	.word	0x20002cdc
  408bc4:	00402abd 	.word	0x00402abd

00408bc8 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  408bc8:	b580      	push	{r7, lr}
  408bca:	b086      	sub	sp, #24
  408bcc:	af00      	add	r7, sp, #0
  408bce:	6078      	str	r0, [r7, #4]
  408bd0:	460b      	mov	r3, r1
  408bd2:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  408bd4:	2300      	movs	r3, #0
  408bd6:	75fb      	strb	r3, [r7, #23]
		//if(usart_write(uartConfig->p_usart, c) != 0) 
		//{
			//status = STATUS_FAIL; 
		//}		
	//}
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);
  408bd8:	687b      	ldr	r3, [r7, #4]
  408bda:	681b      	ldr	r3, [r3, #0]
  408bdc:	4618      	mov	r0, r3
  408bde:	f44f 7100 	mov.w	r1, #512	; 0x200
  408be2:	4b30      	ldr	r3, [pc, #192]	; (408ca4 <drv_uart_putChar+0xdc>)
  408be4:	4798      	blx	r3
	//disable the interrupts so we don't fuck up the pointers		
	
	uint32_t val = 0;
  408be6:	2300      	movs	r3, #0
  408be8:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  408bea:	687b      	ldr	r3, [r7, #4]
  408bec:	695a      	ldr	r2, [r3, #20]
  408bee:	4613      	mov	r3, r2
  408bf0:	015b      	lsls	r3, r3, #5
  408bf2:	4413      	add	r3, r2
  408bf4:	015b      	lsls	r3, r3, #5
  408bf6:	4a2c      	ldr	r2, [pc, #176]	; (408ca8 <drv_uart_putChar+0xe0>)
  408bf8:	4413      	add	r3, r2
  408bfa:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  408bfc:	68fb      	ldr	r3, [r7, #12]
  408bfe:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  408c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c06:	d10b      	bne.n	408c20 <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  408c08:	68fb      	ldr	r3, [r7, #12]
  408c0a:	2201      	movs	r2, #1
  408c0c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  408c10:	68fb      	ldr	r3, [r7, #12]
  408c12:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  408c16:	1c5a      	adds	r2, r3, #1
  408c18:	68fb      	ldr	r3, [r7, #12]
  408c1a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  408c1e:	e01d      	b.n	408c5c <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  408c20:	68fb      	ldr	r3, [r7, #12]
  408c22:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  408c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c2a:	d217      	bcs.n	408c5c <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  408c2c:	68fb      	ldr	r3, [r7, #12]
  408c2e:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  408c32:	68fa      	ldr	r2, [r7, #12]
  408c34:	4413      	add	r3, r2
  408c36:	78fa      	ldrb	r2, [r7, #3]
  408c38:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  408c3c:	68fb      	ldr	r3, [r7, #12]
  408c3e:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  408c42:	3301      	adds	r3, #1
  408c44:	b29a      	uxth	r2, r3
  408c46:	68fb      	ldr	r3, [r7, #12]
  408c48:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  408c4c:	68fb      	ldr	r3, [r7, #12]
  408c4e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  408c52:	3301      	adds	r3, #1
  408c54:	b29a      	uxth	r2, r3
  408c56:	68fb      	ldr	r3, [r7, #12]
  408c58:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  408c5c:	68fb      	ldr	r3, [r7, #12]
  408c5e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  408c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c66:	d103      	bne.n	408c70 <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  408c68:	68fb      	ldr	r3, [r7, #12]
  408c6a:	2201      	movs	r2, #1
  408c6c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  408c70:	68fb      	ldr	r3, [r7, #12]
  408c72:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  408c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c7a:	d103      	bne.n	408c84 <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  408c7c:	68fb      	ldr	r3, [r7, #12]
  408c7e:	2200      	movs	r2, #0
  408c80:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  408c84:	68fb      	ldr	r3, [r7, #12]
  408c86:	2201      	movs	r2, #1
  408c88:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  408c8c:	687b      	ldr	r3, [r7, #4]
  408c8e:	681b      	ldr	r3, [r3, #0]
  408c90:	4618      	mov	r0, r3
  408c92:	f44f 7100 	mov.w	r1, #512	; 0x200
  408c96:	4b05      	ldr	r3, [pc, #20]	; (408cac <drv_uart_putChar+0xe4>)
  408c98:	4798      	blx	r3
	return status;	
  408c9a:	7dfb      	ldrb	r3, [r7, #23]
}
  408c9c:	4618      	mov	r0, r3
  408c9e:	3718      	adds	r7, #24
  408ca0:	46bd      	mov	sp, r7
  408ca2:	bd80      	pop	{r7, pc}
  408ca4:	00402ad9 	.word	0x00402ad9
  408ca8:	20002cdc 	.word	0x20002cdc
  408cac:	00402abd 	.word	0x00402abd

00408cb0 <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  408cb0:	b580      	push	{r7, lr}
  408cb2:	b084      	sub	sp, #16
  408cb4:	af00      	add	r7, sp, #0
  408cb6:	6078      	str	r0, [r7, #4]
  408cb8:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  408cba:	2300      	movs	r3, #0
  408cbc:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  408cbe:	687b      	ldr	r3, [r7, #4]
  408cc0:	695a      	ldr	r2, [r3, #20]
  408cc2:	4917      	ldr	r1, [pc, #92]	; (408d20 <drv_uart_getChar+0x70>)
  408cc4:	4613      	mov	r3, r2
  408cc6:	015b      	lsls	r3, r3, #5
  408cc8:	4413      	add	r3, r2
  408cca:	015b      	lsls	r3, r3, #5
  408ccc:	440b      	add	r3, r1
  408cce:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408cd2:	79db      	ldrb	r3, [r3, #7]
  408cd4:	b2db      	uxtb	r3, r3
  408cd6:	2b01      	cmp	r3, #1
  408cd8:	d11a      	bne.n	408d10 <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  408cda:	687b      	ldr	r3, [r7, #4]
  408cdc:	681b      	ldr	r3, [r3, #0]
  408cde:	4618      	mov	r0, r3
  408ce0:	2101      	movs	r1, #1
  408ce2:	4b10      	ldr	r3, [pc, #64]	; (408d24 <drv_uart_getChar+0x74>)
  408ce4:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  408ce6:	687b      	ldr	r3, [r7, #4]
  408ce8:	695a      	ldr	r2, [r3, #20]
  408cea:	4613      	mov	r3, r2
  408cec:	015b      	lsls	r3, r3, #5
  408cee:	4413      	add	r3, r2
  408cf0:	015b      	lsls	r3, r3, #5
  408cf2:	4a0b      	ldr	r2, [pc, #44]	; (408d20 <drv_uart_getChar+0x70>)
  408cf4:	4413      	add	r3, r2
  408cf6:	4618      	mov	r0, r3
  408cf8:	6839      	ldr	r1, [r7, #0]
  408cfa:	4b0b      	ldr	r3, [pc, #44]	; (408d28 <drv_uart_getChar+0x78>)
  408cfc:	4798      	blx	r3
  408cfe:	4603      	mov	r3, r0
  408d00:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  408d02:	687b      	ldr	r3, [r7, #4]
  408d04:	681b      	ldr	r3, [r3, #0]
  408d06:	4618      	mov	r0, r3
  408d08:	2101      	movs	r1, #1
  408d0a:	4b08      	ldr	r3, [pc, #32]	; (408d2c <drv_uart_getChar+0x7c>)
  408d0c:	4798      	blx	r3
  408d0e:	e001      	b.n	408d14 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  408d10:	2302      	movs	r3, #2
  408d12:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  408d14:	7bfb      	ldrb	r3, [r7, #15]
}
  408d16:	4618      	mov	r0, r3
  408d18:	3710      	adds	r7, #16
  408d1a:	46bd      	mov	sp, r7
  408d1c:	bd80      	pop	{r7, pc}
  408d1e:	bf00      	nop
  408d20:	20002cdc 	.word	0x20002cdc
  408d24:	00402ad9 	.word	0x00402ad9
  408d28:	0040911d 	.word	0x0040911d
  408d2c:	00402abd 	.word	0x00402abd

00408d30 <drv_uart_deInit>:
 * @brief puts the uart driver in a deinitialized state
 * @param uartConfig, the configuration structure for the uart, 
 * @return STATUS_PASS if successful,	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_deInit(drv_uart_config_t* uartConfig)
{
  408d30:	b580      	push	{r7, lr}
  408d32:	b084      	sub	sp, #16
  408d34:	af00      	add	r7, sp, #0
  408d36:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  408d38:	2300      	movs	r3, #0
  408d3a:	73fb      	strb	r3, [r7, #15]
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  408d3c:	687b      	ldr	r3, [r7, #4]
  408d3e:	681b      	ldr	r3, [r3, #0]
  408d40:	4618      	mov	r0, r3
  408d42:	f04f 31ff 	mov.w	r1, #4294967295
  408d46:	4b09      	ldr	r3, [pc, #36]	; (408d6c <drv_uart_deInit+0x3c>)
  408d48:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].isinit = false;	
  408d4a:	687b      	ldr	r3, [r7, #4]
  408d4c:	695a      	ldr	r2, [r3, #20]
  408d4e:	4908      	ldr	r1, [pc, #32]	; (408d70 <drv_uart_deInit+0x40>)
  408d50:	4613      	mov	r3, r2
  408d52:	015b      	lsls	r3, r3, #5
  408d54:	4413      	add	r3, r2
  408d56:	015b      	lsls	r3, r3, #5
  408d58:	440b      	add	r3, r1
  408d5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408d5e:	2200      	movs	r2, #0
  408d60:	719a      	strb	r2, [r3, #6]
	return status;	
  408d62:	7bfb      	ldrb	r3, [r7, #15]
}
  408d64:	4618      	mov	r0, r3
  408d66:	3710      	adds	r7, #16
  408d68:	46bd      	mov	sp, r7
  408d6a:	bd80      	pop	{r7, pc}
  408d6c:	00402ad9 	.word	0x00402ad9
  408d70:	20002cdc 	.word	0x20002cdc

00408d74 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  408d74:	b480      	push	{r7}
  408d76:	b083      	sub	sp, #12
  408d78:	af00      	add	r7, sp, #0
  408d7a:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  408d7c:	687b      	ldr	r3, [r7, #4]
  408d7e:	695a      	ldr	r2, [r3, #20]
  408d80:	490a      	ldr	r1, [pc, #40]	; (408dac <drv_uart_isInit+0x38>)
  408d82:	4613      	mov	r3, r2
  408d84:	015b      	lsls	r3, r3, #5
  408d86:	4413      	add	r3, r2
  408d88:	015b      	lsls	r3, r3, #5
  408d8a:	440b      	add	r3, r1
  408d8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408d90:	799b      	ldrb	r3, [r3, #6]
  408d92:	b2db      	uxtb	r3, r3
  408d94:	2b00      	cmp	r3, #0
  408d96:	d001      	beq.n	408d9c <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  408d98:	2300      	movs	r3, #0
  408d9a:	e000      	b.n	408d9e <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  408d9c:	2301      	movs	r3, #1
	}
}
  408d9e:	4618      	mov	r0, r3
  408da0:	370c      	adds	r7, #12
  408da2:	46bd      	mov	sp, r7
  408da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  408da8:	4770      	bx	lr
  408daa:	bf00      	nop
  408dac:	20002cdc 	.word	0x20002cdc

00408db0 <drv_uart_getDroppedBytes>:
uint32_t drv_uart_getDroppedBytes(drv_uart_config_t* uartConfig)
{
  408db0:	b480      	push	{r7}
  408db2:	b083      	sub	sp, #12
  408db4:	af00      	add	r7, sp, #0
  408db6:	6078      	str	r0, [r7, #4]
	return uartMemBuf[uartConfig->mem_index].uart_rx_fifo_dropped_bytes;
  408db8:	687b      	ldr	r3, [r7, #4]
  408dba:	695a      	ldr	r2, [r3, #20]
  408dbc:	4907      	ldr	r1, [pc, #28]	; (408ddc <drv_uart_getDroppedBytes+0x2c>)
  408dbe:	4613      	mov	r3, r2
  408dc0:	015b      	lsls	r3, r3, #5
  408dc2:	4413      	add	r3, r2
  408dc4:	015b      	lsls	r3, r3, #5
  408dc6:	440b      	add	r3, r1
  408dc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
  408dcc:	685b      	ldr	r3, [r3, #4]
}
  408dce:	4618      	mov	r0, r3
  408dd0:	370c      	adds	r7, #12
  408dd2:	46bd      	mov	sp, r7
  408dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  408dd8:	4770      	bx	lr
  408dda:	bf00      	nop
  408ddc:	20002cdc 	.word	0x20002cdc

00408de0 <drv_uart_getline>:
status_t drv_uart_getline(drv_uart_config_t* uartConfig, char* str, size_t strSize)
{
  408de0:	b580      	push	{r7, lr}
  408de2:	b088      	sub	sp, #32
  408de4:	af00      	add	r7, sp, #0
  408de6:	60f8      	str	r0, [r7, #12]
  408de8:	60b9      	str	r1, [r7, #8]
  408dea:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_PASS;
  408dec:	2300      	movs	r3, #0
  408dee:	77fb      	strb	r3, [r7, #31]
	char val;
	int pointer = 0;
  408df0:	2300      	movs	r3, #0
  408df2:	61bb      	str	r3, [r7, #24]
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
  408df4:	f107 0317 	add.w	r3, r7, #23
  408df8:	68f8      	ldr	r0, [r7, #12]
  408dfa:	4619      	mov	r1, r3
  408dfc:	4b1b      	ldr	r3, [pc, #108]	; (408e6c <drv_uart_getline+0x8c>)
  408dfe:	4798      	blx	r3
  408e00:	4603      	mov	r3, r0
  408e02:	77fb      	strb	r3, [r7, #31]
		if(result != STATUS_EOF && val != NULL)
  408e04:	7ffb      	ldrb	r3, [r7, #31]
  408e06:	2b02      	cmp	r3, #2
  408e08:	d027      	beq.n	408e5a <drv_uart_getline+0x7a>
  408e0a:	7dfb      	ldrb	r3, [r7, #23]
  408e0c:	2b00      	cmp	r3, #0
  408e0e:	d024      	beq.n	408e5a <drv_uart_getline+0x7a>
		{
			if(pointer < strSize)
  408e10:	69ba      	ldr	r2, [r7, #24]
  408e12:	687b      	ldr	r3, [r7, #4]
  408e14:	429a      	cmp	r2, r3
  408e16:	d213      	bcs.n	408e40 <drv_uart_getline+0x60>
			{
				str[pointer++] = val; //add the result;
  408e18:	69bb      	ldr	r3, [r7, #24]
  408e1a:	1c5a      	adds	r2, r3, #1
  408e1c:	61ba      	str	r2, [r7, #24]
  408e1e:	68ba      	ldr	r2, [r7, #8]
  408e20:	4413      	add	r3, r2
  408e22:	7dfa      	ldrb	r2, [r7, #23]
  408e24:	701a      	strb	r2, [r3, #0]
				if(val == '\n')
  408e26:	7dfb      	ldrb	r3, [r7, #23]
  408e28:	2b0a      	cmp	r3, #10
  408e2a:	d114      	bne.n	408e56 <drv_uart_getline+0x76>
				{
					str[pointer] = NULL; //terminate the string
  408e2c:	69bb      	ldr	r3, [r7, #24]
  408e2e:	68ba      	ldr	r2, [r7, #8]
  408e30:	4413      	add	r3, r2
  408e32:	2200      	movs	r2, #0
  408e34:	701a      	strb	r2, [r3, #0]
					result = STATUS_PASS;
  408e36:	2300      	movs	r3, #0
  408e38:	77fb      	strb	r3, [r7, #31]
					pointer = 0; //reset the pointer.
  408e3a:	2300      	movs	r3, #0
  408e3c:	61bb      	str	r3, [r7, #24]
					break;
  408e3e:	e010      	b.n	408e62 <drv_uart_getline+0x82>
				}
			}
			else
			{
				//we overwrote the buffer
				result = STATUS_FAIL;
  408e40:	2301      	movs	r3, #1
  408e42:	77fb      	strb	r3, [r7, #31]
				str[strSize - 1] = NULL; //terminate what's in the buffer.
  408e44:	687b      	ldr	r3, [r7, #4]
  408e46:	3b01      	subs	r3, #1
  408e48:	68ba      	ldr	r2, [r7, #8]
  408e4a:	4413      	add	r3, r2
  408e4c:	2200      	movs	r2, #0
  408e4e:	701a      	strb	r2, [r3, #0]
				pointer = 0;
  408e50:	2300      	movs	r3, #0
  408e52:	61bb      	str	r3, [r7, #24]
				break;
  408e54:	e005      	b.n	408e62 <drv_uart_getline+0x82>
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
		if(result != STATUS_EOF && val != NULL)
		{
			if(pointer < strSize)
  408e56:	bf00      	nop
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
		}
		
	}
  408e58:	e7cc      	b.n	408df4 <drv_uart_getline+0x14>
			//vTaskDelay(1);
		}
		else
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
  408e5a:	2001      	movs	r0, #1
  408e5c:	4b04      	ldr	r3, [pc, #16]	; (408e70 <drv_uart_getline+0x90>)
  408e5e:	4798      	blx	r3
		}
		
	}
  408e60:	e7c8      	b.n	408df4 <drv_uart_getline+0x14>
	return result; 
  408e62:	7ffb      	ldrb	r3, [r7, #31]
}
  408e64:	4618      	mov	r0, r3
  408e66:	3720      	adds	r7, #32
  408e68:	46bd      	mov	sp, r7
  408e6a:	bd80      	pop	{r7, pc}
  408e6c:	00408cb1 	.word	0x00408cb1
  408e70:	00406ba5 	.word	0x00406ba5

00408e74 <drv_uart_putString>:

void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
  408e74:	b580      	push	{r7, lr}
  408e76:	b084      	sub	sp, #16
  408e78:	af00      	add	r7, sp, #0
  408e7a:	6078      	str	r0, [r7, #4]
  408e7c:	6039      	str	r1, [r7, #0]
	int i=0;
  408e7e:	2300      	movs	r3, #0
  408e80:	60fb      	str	r3, [r7, #12]
	int size = strlen(str);
  408e82:	6838      	ldr	r0, [r7, #0]
  408e84:	4b0d      	ldr	r3, [pc, #52]	; (408ebc <drv_uart_putString+0x48>)
  408e86:	4798      	blx	r3
  408e88:	4603      	mov	r3, r0
  408e8a:	60bb      	str	r3, [r7, #8]

	for (i=0;i<size;)
  408e8c:	2300      	movs	r3, #0
  408e8e:	60fb      	str	r3, [r7, #12]
  408e90:	e00d      	b.n	408eae <drv_uart_putString+0x3a>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  408e92:	68fb      	ldr	r3, [r7, #12]
  408e94:	683a      	ldr	r2, [r7, #0]
  408e96:	4413      	add	r3, r2
  408e98:	781b      	ldrb	r3, [r3, #0]
  408e9a:	6878      	ldr	r0, [r7, #4]
  408e9c:	4619      	mov	r1, r3
  408e9e:	4b08      	ldr	r3, [pc, #32]	; (408ec0 <drv_uart_putString+0x4c>)
  408ea0:	4798      	blx	r3
  408ea2:	4603      	mov	r3, r0
  408ea4:	2b00      	cmp	r3, #0
  408ea6:	d102      	bne.n	408eae <drv_uart_putString+0x3a>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  408ea8:	68fb      	ldr	r3, [r7, #12]
  408eaa:	3301      	adds	r3, #1
  408eac:	60fb      	str	r3, [r7, #12]
void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
	int i=0;
	int size = strlen(str);

	for (i=0;i<size;)
  408eae:	68fa      	ldr	r2, [r7, #12]
  408eb0:	68bb      	ldr	r3, [r7, #8]
  408eb2:	429a      	cmp	r2, r3
  408eb4:	dbed      	blt.n	408e92 <drv_uart_putString+0x1e>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  408eb6:	3710      	adds	r7, #16
  408eb8:	46bd      	mov	sp, r7
  408eba:	bd80      	pop	{r7, pc}
  408ebc:	0040d65d 	.word	0x0040d65d
  408ec0:	00408bc9 	.word	0x00408bc9

00408ec4 <drv_uart_flushRx>:

void drv_uart_flushRx(drv_uart_config_t* uartConfig)
{
  408ec4:	b580      	push	{r7, lr}
  408ec6:	b082      	sub	sp, #8
  408ec8:	af00      	add	r7, sp, #0
  408eca:	6078      	str	r0, [r7, #4]
	//clear the buffer
	if(drv_uart_isInit(uartConfig) == STATUS_PASS)
  408ecc:	6878      	ldr	r0, [r7, #4]
  408ece:	4b29      	ldr	r3, [pc, #164]	; (408f74 <drv_uart_flushRx+0xb0>)
  408ed0:	4798      	blx	r3
  408ed2:	4603      	mov	r3, r0
  408ed4:	2b00      	cmp	r3, #0
  408ed6:	d149      	bne.n	408f6c <drv_uart_flushRx+0xa8>
	{	
		memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  408ed8:	687b      	ldr	r3, [r7, #4]
  408eda:	695a      	ldr	r2, [r3, #20]
  408edc:	4613      	mov	r3, r2
  408ede:	015b      	lsls	r3, r3, #5
  408ee0:	4413      	add	r3, r2
  408ee2:	015b      	lsls	r3, r3, #5
  408ee4:	4a24      	ldr	r2, [pc, #144]	; (408f78 <drv_uart_flushRx+0xb4>)
  408ee6:	4413      	add	r3, r2
  408ee8:	4618      	mov	r0, r3
  408eea:	2100      	movs	r1, #0
  408eec:	f44f 7200 	mov.w	r2, #512	; 0x200
  408ef0:	4b22      	ldr	r3, [pc, #136]	; (408f7c <drv_uart_flushRx+0xb8>)
  408ef2:	4798      	blx	r3
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  408ef4:	687b      	ldr	r3, [r7, #4]
  408ef6:	695a      	ldr	r2, [r3, #20]
  408ef8:	491f      	ldr	r1, [pc, #124]	; (408f78 <drv_uart_flushRx+0xb4>)
  408efa:	4613      	mov	r3, r2
  408efc:	015b      	lsls	r3, r3, #5
  408efe:	4413      	add	r3, r2
  408f00:	015b      	lsls	r3, r3, #5
  408f02:	440b      	add	r3, r1
  408f04:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408f08:	2200      	movs	r2, #0
  408f0a:	801a      	strh	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  408f0c:	687b      	ldr	r3, [r7, #4]
  408f0e:	695a      	ldr	r2, [r3, #20]
  408f10:	4919      	ldr	r1, [pc, #100]	; (408f78 <drv_uart_flushRx+0xb4>)
  408f12:	4613      	mov	r3, r2
  408f14:	015b      	lsls	r3, r3, #5
  408f16:	4413      	add	r3, r2
  408f18:	015b      	lsls	r3, r3, #5
  408f1a:	440b      	add	r3, r1
  408f1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408f20:	2200      	movs	r2, #0
  408f22:	805a      	strh	r2, [r3, #2]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  408f24:	687b      	ldr	r3, [r7, #4]
  408f26:	695a      	ldr	r2, [r3, #20]
  408f28:	4913      	ldr	r1, [pc, #76]	; (408f78 <drv_uart_flushRx+0xb4>)
  408f2a:	4613      	mov	r3, r2
  408f2c:	015b      	lsls	r3, r3, #5
  408f2e:	4413      	add	r3, r2
  408f30:	015b      	lsls	r3, r3, #5
  408f32:	440b      	add	r3, r1
  408f34:	f503 7302 	add.w	r3, r3, #520	; 0x208
  408f38:	2200      	movs	r2, #0
  408f3a:	701a      	strb	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  408f3c:	687b      	ldr	r3, [r7, #4]
  408f3e:	695a      	ldr	r2, [r3, #20]
  408f40:	490d      	ldr	r1, [pc, #52]	; (408f78 <drv_uart_flushRx+0xb4>)
  408f42:	4613      	mov	r3, r2
  408f44:	015b      	lsls	r3, r3, #5
  408f46:	4413      	add	r3, r2
  408f48:	015b      	lsls	r3, r3, #5
  408f4a:	440b      	add	r3, r1
  408f4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  408f50:	2200      	movs	r2, #0
  408f52:	71da      	strb	r2, [r3, #7]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;	
  408f54:	687b      	ldr	r3, [r7, #4]
  408f56:	695a      	ldr	r2, [r3, #20]
  408f58:	4907      	ldr	r1, [pc, #28]	; (408f78 <drv_uart_flushRx+0xb4>)
  408f5a:	4613      	mov	r3, r2
  408f5c:	015b      	lsls	r3, r3, #5
  408f5e:	4413      	add	r3, r2
  408f60:	015b      	lsls	r3, r3, #5
  408f62:	440b      	add	r3, r1
  408f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
  408f68:	2200      	movs	r2, #0
  408f6a:	705a      	strb	r2, [r3, #1]
	}
}
  408f6c:	3708      	adds	r7, #8
  408f6e:	46bd      	mov	sp, r7
  408f70:	bd80      	pop	{r7, pc}
  408f72:	bf00      	nop
  408f74:	00408d75 	.word	0x00408d75
  408f78:	20002cdc 	.word	0x20002cdc
  408f7c:	0040cfd5 	.word	0x0040cfd5

00408f80 <UART0_Handler>:

// interrupt handlers
void UART0_Handler()
{	
  408f80:	b580      	push	{r7, lr}
  408f82:	b082      	sub	sp, #8
  408f84:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  408f86:	4812      	ldr	r0, [pc, #72]	; (408fd0 <UART0_Handler+0x50>)
  408f88:	4b12      	ldr	r3, [pc, #72]	; (408fd4 <UART0_Handler+0x54>)
  408f8a:	4798      	blx	r3
  408f8c:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  408f8e:	687b      	ldr	r3, [r7, #4]
  408f90:	f003 0301 	and.w	r3, r3, #1
  408f94:	2b00      	cmp	r3, #0
  408f96:	d009      	beq.n	408fac <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  408f98:	4b0f      	ldr	r3, [pc, #60]	; (408fd8 <UART0_Handler+0x58>)
  408f9a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  408f9e:	b2db      	uxtb	r3, r3
  408fa0:	2b00      	cmp	r3, #0
  408fa2:	d003      	beq.n	408fac <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  408fa4:	480a      	ldr	r0, [pc, #40]	; (408fd0 <UART0_Handler+0x50>)
  408fa6:	490c      	ldr	r1, [pc, #48]	; (408fd8 <UART0_Handler+0x58>)
  408fa8:	4b0c      	ldr	r3, [pc, #48]	; (408fdc <UART0_Handler+0x5c>)
  408faa:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  408fac:	687b      	ldr	r3, [r7, #4]
  408fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
  408fb2:	2b00      	cmp	r3, #0
  408fb4:	d009      	beq.n	408fca <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  408fb6:	4b08      	ldr	r3, [pc, #32]	; (408fd8 <UART0_Handler+0x58>)
  408fb8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  408fbc:	b2db      	uxtb	r3, r3
  408fbe:	2b00      	cmp	r3, #0
  408fc0:	d003      	beq.n	408fca <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  408fc2:	4803      	ldr	r0, [pc, #12]	; (408fd0 <UART0_Handler+0x50>)
  408fc4:	4904      	ldr	r1, [pc, #16]	; (408fd8 <UART0_Handler+0x58>)
  408fc6:	4b06      	ldr	r3, [pc, #24]	; (408fe0 <UART0_Handler+0x60>)
  408fc8:	4798      	blx	r3
		}
	}	
}
  408fca:	3708      	adds	r7, #8
  408fcc:	46bd      	mov	sp, r7
  408fce:	bd80      	pop	{r7, pc}
  408fd0:	400e0600 	.word	0x400e0600
  408fd4:	00402875 	.word	0x00402875
  408fd8:	20002cdc 	.word	0x20002cdc
  408fdc:	004091a9 	.word	0x004091a9
  408fe0:	0040926d 	.word	0x0040926d

00408fe4 <UART1_Handler>:

void UART1_Handler()
{
  408fe4:	b580      	push	{r7, lr}
  408fe6:	b082      	sub	sp, #8
  408fe8:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  408fea:	4812      	ldr	r0, [pc, #72]	; (409034 <UART1_Handler+0x50>)
  408fec:	4b12      	ldr	r3, [pc, #72]	; (409038 <UART1_Handler+0x54>)
  408fee:	4798      	blx	r3
  408ff0:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  408ff2:	687b      	ldr	r3, [r7, #4]
  408ff4:	f003 0301 	and.w	r3, r3, #1
  408ff8:	2b00      	cmp	r3, #0
  408ffa:	d009      	beq.n	409010 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  408ffc:	4b0f      	ldr	r3, [pc, #60]	; (40903c <UART1_Handler+0x58>)
  408ffe:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  409002:	b2db      	uxtb	r3, r3
  409004:	2b00      	cmp	r3, #0
  409006:	d003      	beq.n	409010 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  409008:	480a      	ldr	r0, [pc, #40]	; (409034 <UART1_Handler+0x50>)
  40900a:	490d      	ldr	r1, [pc, #52]	; (409040 <UART1_Handler+0x5c>)
  40900c:	4b0d      	ldr	r3, [pc, #52]	; (409044 <UART1_Handler+0x60>)
  40900e:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  409010:	687b      	ldr	r3, [r7, #4]
  409012:	f403 7300 	and.w	r3, r3, #512	; 0x200
  409016:	2b00      	cmp	r3, #0
  409018:	d009      	beq.n	40902e <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  40901a:	4b08      	ldr	r3, [pc, #32]	; (40903c <UART1_Handler+0x58>)
  40901c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  409020:	b2db      	uxtb	r3, r3
  409022:	2b00      	cmp	r3, #0
  409024:	d003      	beq.n	40902e <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  409026:	4803      	ldr	r0, [pc, #12]	; (409034 <UART1_Handler+0x50>)
  409028:	4905      	ldr	r1, [pc, #20]	; (409040 <UART1_Handler+0x5c>)
  40902a:	4b07      	ldr	r3, [pc, #28]	; (409048 <UART1_Handler+0x64>)
  40902c:	4798      	blx	r3
		}
	}
}
  40902e:	3708      	adds	r7, #8
  409030:	46bd      	mov	sp, r7
  409032:	bd80      	pop	{r7, pc}
  409034:	400e0800 	.word	0x400e0800
  409038:	00402875 	.word	0x00402875
  40903c:	20002cdc 	.word	0x20002cdc
  409040:	200030fc 	.word	0x200030fc
  409044:	004091a9 	.word	0x004091a9
  409048:	0040926d 	.word	0x0040926d

0040904c <USART0_Handler>:

void USART0_Handler()
{
  40904c:	b580      	push	{r7, lr}
  40904e:	b082      	sub	sp, #8
  409050:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  409052:	4812      	ldr	r0, [pc, #72]	; (40909c <USART0_Handler+0x50>)
  409054:	4b12      	ldr	r3, [pc, #72]	; (4090a0 <USART0_Handler+0x54>)
  409056:	4798      	blx	r3
  409058:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40905a:	687b      	ldr	r3, [r7, #4]
  40905c:	f003 0301 	and.w	r3, r3, #1
  409060:	2b00      	cmp	r3, #0
  409062:	d009      	beq.n	409078 <USART0_Handler+0x2c>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  409064:	4b0f      	ldr	r3, [pc, #60]	; (4090a4 <USART0_Handler+0x58>)
  409066:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  40906a:	b2db      	uxtb	r3, r3
  40906c:	2b00      	cmp	r3, #0
  40906e:	d003      	beq.n	409078 <USART0_Handler+0x2c>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  409070:	480a      	ldr	r0, [pc, #40]	; (40909c <USART0_Handler+0x50>)
  409072:	490d      	ldr	r1, [pc, #52]	; (4090a8 <USART0_Handler+0x5c>)
  409074:	4b0d      	ldr	r3, [pc, #52]	; (4090ac <USART0_Handler+0x60>)
  409076:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  409078:	687b      	ldr	r3, [r7, #4]
  40907a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40907e:	2b00      	cmp	r3, #0
  409080:	d009      	beq.n	409096 <USART0_Handler+0x4a>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  409082:	4b08      	ldr	r3, [pc, #32]	; (4090a4 <USART0_Handler+0x58>)
  409084:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  409088:	b2db      	uxtb	r3, r3
  40908a:	2b00      	cmp	r3, #0
  40908c:	d003      	beq.n	409096 <USART0_Handler+0x4a>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  40908e:	4803      	ldr	r0, [pc, #12]	; (40909c <USART0_Handler+0x50>)
  409090:	4905      	ldr	r1, [pc, #20]	; (4090a8 <USART0_Handler+0x5c>)
  409092:	4b07      	ldr	r3, [pc, #28]	; (4090b0 <USART0_Handler+0x64>)
  409094:	4798      	blx	r3
		}
	}	
}
  409096:	3708      	adds	r7, #8
  409098:	46bd      	mov	sp, r7
  40909a:	bd80      	pop	{r7, pc}
  40909c:	40024000 	.word	0x40024000
  4090a0:	00402875 	.word	0x00402875
  4090a4:	20002cdc 	.word	0x20002cdc
  4090a8:	2000351c 	.word	0x2000351c
  4090ac:	004091a9 	.word	0x004091a9
  4090b0:	0040926d 	.word	0x0040926d

004090b4 <USART1_Handler>:

void USART1_Handler()
{
  4090b4:	b580      	push	{r7, lr}
  4090b6:	b082      	sub	sp, #8
  4090b8:	af00      	add	r7, sp, #0
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  4090ba:	4812      	ldr	r0, [pc, #72]	; (409104 <USART1_Handler+0x50>)
  4090bc:	4b12      	ldr	r3, [pc, #72]	; (409108 <USART1_Handler+0x54>)
  4090be:	4798      	blx	r3
  4090c0:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  4090c2:	687b      	ldr	r3, [r7, #4]
  4090c4:	f003 0301 	and.w	r3, r3, #1
  4090c8:	2b00      	cmp	r3, #0
  4090ca:	d009      	beq.n	4090e0 <USART1_Handler+0x2c>
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  4090cc:	4b0f      	ldr	r3, [pc, #60]	; (40910c <USART1_Handler+0x58>)
  4090ce:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  4090d2:	b2db      	uxtb	r3, r3
  4090d4:	2b00      	cmp	r3, #0
  4090d6:	d003      	beq.n	4090e0 <USART1_Handler+0x2c>
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
  4090d8:	480a      	ldr	r0, [pc, #40]	; (409104 <USART1_Handler+0x50>)
  4090da:	490d      	ldr	r1, [pc, #52]	; (409110 <USART1_Handler+0x5c>)
  4090dc:	4b0d      	ldr	r3, [pc, #52]	; (409114 <USART1_Handler+0x60>)
  4090de:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  4090e0:	687b      	ldr	r3, [r7, #4]
  4090e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4090e6:	2b00      	cmp	r3, #0
  4090e8:	d009      	beq.n	4090fe <USART1_Handler+0x4a>
	{
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  4090ea:	4b08      	ldr	r3, [pc, #32]	; (40910c <USART1_Handler+0x58>)
  4090ec:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  4090f0:	b2db      	uxtb	r3, r3
  4090f2:	2b00      	cmp	r3, #0
  4090f4:	d003      	beq.n	4090fe <USART1_Handler+0x4a>
		{
			uart_process_tx_byte(USART1, &(uartMemBuf[3])); 	
  4090f6:	4803      	ldr	r0, [pc, #12]	; (409104 <USART1_Handler+0x50>)
  4090f8:	4905      	ldr	r1, [pc, #20]	; (409110 <USART1_Handler+0x5c>)
  4090fa:	4b07      	ldr	r3, [pc, #28]	; (409118 <USART1_Handler+0x64>)
  4090fc:	4798      	blx	r3
		}
	}	
}
  4090fe:	3708      	adds	r7, #8
  409100:	46bd      	mov	sp, r7
  409102:	bd80      	pop	{r7, pc}
  409104:	40028000 	.word	0x40028000
  409108:	00402875 	.word	0x00402875
  40910c:	20002cdc 	.word	0x20002cdc
  409110:	2000393c 	.word	0x2000393c
  409114:	004091a9 	.word	0x004091a9
  409118:	0040926d 	.word	0x0040926d

0040911c <uart_get_byte>:


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  40911c:	b480      	push	{r7}
  40911e:	b085      	sub	sp, #20
  409120:	af00      	add	r7, sp, #0
  409122:	6078      	str	r0, [r7, #4]
  409124:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  409126:	2300      	movs	r3, #0
  409128:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40912a:	687b      	ldr	r3, [r7, #4]
  40912c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  409130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409134:	d103      	bne.n	40913e <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  409136:	687b      	ldr	r3, [r7, #4]
  409138:	2200      	movs	r2, #0
  40913a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  40913e:	687b      	ldr	r3, [r7, #4]
  409140:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  409144:	2b00      	cmp	r3, #0
  409146:	d017      	beq.n	409178 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  409148:	687b      	ldr	r3, [r7, #4]
  40914a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40914e:	687a      	ldr	r2, [r7, #4]
  409150:	5cd2      	ldrb	r2, [r2, r3]
  409152:	683b      	ldr	r3, [r7, #0]
  409154:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  409156:	687b      	ldr	r3, [r7, #4]
  409158:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40915c:	3301      	adds	r3, #1
  40915e:	b29a      	uxth	r2, r3
  409160:	687b      	ldr	r3, [r7, #4]
  409162:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  409166:	687b      	ldr	r3, [r7, #4]
  409168:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40916c:	3b01      	subs	r3, #1
  40916e:	b29a      	uxth	r2, r3
  409170:	687b      	ldr	r3, [r7, #4]
  409172:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  409176:	e005      	b.n	409184 <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  409178:	687b      	ldr	r3, [r7, #4]
  40917a:	2200      	movs	r2, #0
  40917c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		status = STATUS_EOF;
  409180:	2302      	movs	r3, #2
  409182:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  409184:	687b      	ldr	r3, [r7, #4]
  409186:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40918a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40918e:	d103      	bne.n	409198 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  409190:	687b      	ldr	r3, [r7, #4]
  409192:	2200      	movs	r2, #0
  409194:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}		
	return status;
  409198:	7bfb      	ldrb	r3, [r7, #15]
}
  40919a:	4618      	mov	r0, r3
  40919c:	3714      	adds	r7, #20
  40919e:	46bd      	mov	sp, r7
  4091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4091a4:	4770      	bx	lr
  4091a6:	bf00      	nop

004091a8 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  4091a8:	b580      	push	{r7, lr}
  4091aa:	b084      	sub	sp, #16
  4091ac:	af00      	add	r7, sp, #0
  4091ae:	6078      	str	r0, [r7, #4]
  4091b0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4091b2:	2300      	movs	r3, #0
  4091b4:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  4091b6:	683b      	ldr	r3, [r7, #0]
  4091b8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  4091bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4091c0:	d111      	bne.n	4091e6 <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  4091c2:	683b      	ldr	r3, [r7, #0]
  4091c4:	2201      	movs	r2, #1
  4091c6:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  4091ca:	683b      	ldr	r3, [r7, #0]
  4091cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  4091d0:	1c5a      	adds	r2, r3, #1
  4091d2:	683b      	ldr	r3, [r7, #0]
  4091d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  4091d8:	f107 030c 	add.w	r3, r7, #12
  4091dc:	6878      	ldr	r0, [r7, #4]
  4091de:	4619      	mov	r1, r3
  4091e0:	4b21      	ldr	r3, [pc, #132]	; (409268 <uart_process_byte+0xc0>)
  4091e2:	4798      	blx	r3
  4091e4:	e025      	b.n	409232 <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  4091e6:	683b      	ldr	r3, [r7, #0]
  4091e8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  4091ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4091f0:	d21f      	bcs.n	409232 <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  4091f2:	f107 030c 	add.w	r3, r7, #12
  4091f6:	6878      	ldr	r0, [r7, #4]
  4091f8:	4619      	mov	r1, r3
  4091fa:	4b1b      	ldr	r3, [pc, #108]	; (409268 <uart_process_byte+0xc0>)
  4091fc:	4798      	blx	r3
  4091fe:	4603      	mov	r3, r0
  409200:	2b00      	cmp	r3, #0
  409202:	d116      	bne.n	409232 <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  409204:	683b      	ldr	r3, [r7, #0]
  409206:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40920a:	68fa      	ldr	r2, [r7, #12]
  40920c:	b2d1      	uxtb	r1, r2
  40920e:	683a      	ldr	r2, [r7, #0]
  409210:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  409212:	683b      	ldr	r3, [r7, #0]
  409214:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  409218:	3301      	adds	r3, #1
  40921a:	b29a      	uxth	r2, r3
  40921c:	683b      	ldr	r3, [r7, #0]
  40921e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  409222:	683b      	ldr	r3, [r7, #0]
  409224:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  409228:	3301      	adds	r3, #1
  40922a:	b29a      	uxth	r2, r3
  40922c:	683b      	ldr	r3, [r7, #0]
  40922e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		//if(p_usart == USART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  409232:	683b      	ldr	r3, [r7, #0]
  409234:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  409238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40923c:	d103      	bne.n	409246 <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  40923e:	683b      	ldr	r3, [r7, #0]
  409240:	2201      	movs	r2, #1
  409242:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  409246:	683b      	ldr	r3, [r7, #0]
  409248:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409250:	d103      	bne.n	40925a <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  409252:	683b      	ldr	r3, [r7, #0]
  409254:	2200      	movs	r2, #0
  409256:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  40925a:	683b      	ldr	r3, [r7, #0]
  40925c:	2201      	movs	r2, #1
  40925e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
}
  409262:	3710      	adds	r7, #16
  409264:	46bd      	mov	sp, r7
  409266:	bd80      	pop	{r7, pc}
  409268:	00402bb1 	.word	0x00402bb1

0040926c <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  40926c:	b580      	push	{r7, lr}
  40926e:	b082      	sub	sp, #8
  409270:	af00      	add	r7, sp, #0
  409272:	6078      	str	r0, [r7, #4]
  409274:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  409276:	683b      	ldr	r3, [r7, #0]
  409278:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40927c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409280:	d103      	bne.n	40928a <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  409282:	683b      	ldr	r3, [r7, #0]
  409284:	2200      	movs	r2, #0
  409286:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  40928a:	683b      	ldr	r3, [r7, #0]
  40928c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  409290:	2b00      	cmp	r3, #0
  409292:	d01b      	beq.n	4092cc <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  409294:	683b      	ldr	r3, [r7, #0]
  409296:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40929a:	683a      	ldr	r2, [r7, #0]
  40929c:	4413      	add	r3, r2
  40929e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
  4092a2:	6878      	ldr	r0, [r7, #4]
  4092a4:	4619      	mov	r1, r3
  4092a6:	4b14      	ldr	r3, [pc, #80]	; (4092f8 <uart_process_tx_byte+0x8c>)
  4092a8:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  4092aa:	683b      	ldr	r3, [r7, #0]
  4092ac:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  4092b0:	3301      	adds	r3, #1
  4092b2:	b29a      	uxth	r2, r3
  4092b4:	683b      	ldr	r3, [r7, #0]
  4092b6:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  4092ba:	683b      	ldr	r3, [r7, #0]
  4092bc:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  4092c0:	3b01      	subs	r3, #1
  4092c2:	b29a      	uxth	r2, r3
  4092c4:	683b      	ldr	r3, [r7, #0]
  4092c6:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  4092ca:	e008      	b.n	4092de <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  4092cc:	683b      	ldr	r3, [r7, #0]
  4092ce:	2200      	movs	r2, #0
  4092d0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  4092d4:	6878      	ldr	r0, [r7, #4]
  4092d6:	f44f 7100 	mov.w	r1, #512	; 0x200
  4092da:	4b08      	ldr	r3, [pc, #32]	; (4092fc <uart_process_tx_byte+0x90>)
  4092dc:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  4092de:	683b      	ldr	r3, [r7, #0]
  4092e0:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  4092e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4092e8:	d103      	bne.n	4092f2 <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  4092ea:	683b      	ldr	r3, [r7, #0]
  4092ec:	2200      	movs	r2, #0
  4092ee:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}	
  4092f2:	3708      	adds	r7, #8
  4092f4:	46bd      	mov	sp, r7
  4092f6:	bd80      	pop	{r7, pc}
  4092f8:	00408829 	.word	0x00408829
  4092fc:	00402859 	.word	0x00402859

00409300 <task_sdCardWrite>:
#define SD_CARD_BUFFER_SIZE 512
volatile char sdCardBuffer[SD_CARD_BUFFER_SIZE] = {0};
volatile char tempBuf[SD_CARD_BUFFER_SIZE] = {0};	
volatile uint32_t sdCardBufferPointer = 0; 	
void task_sdCardWrite(void *pvParameters)
{
  409300:	b590      	push	{r4, r7, lr}
  409302:	b087      	sub	sp, #28
  409304:	af00      	add	r7, sp, #0
  409306:	6078      	str	r0, [r7, #4]
	
	uint32_t numBytesToWrite = 0, numBytesWritten = 0;
  409308:	2300      	movs	r3, #0
  40930a:	617b      	str	r3, [r7, #20]
  40930c:	2300      	movs	r3, #0
  40930e:	613b      	str	r3, [r7, #16]
	uint32_t numBytes = 0;  
  409310:	2300      	movs	r3, #0
  409312:	60fb      	str	r3, [r7, #12]
	static FRESULT res = FR_OK;	
	semaphore_sdCardWrite = xSemaphoreCreateMutex(); 
  409314:	4b3b      	ldr	r3, [pc, #236]	; (409404 <task_sdCardWrite+0x104>)
  409316:	4798      	blx	r3
  409318:	4602      	mov	r2, r0
  40931a:	4b3b      	ldr	r3, [pc, #236]	; (409408 <task_sdCardWrite+0x108>)
  40931c:	601a      	str	r2, [r3, #0]
	while(1)
	{		
		//take semaphore and copy data to a temporary buffer. 
		if(xSemaphoreTake(semaphore_sdCardWrite,10) == true)
  40931e:	4b3a      	ldr	r3, [pc, #232]	; (409408 <task_sdCardWrite+0x108>)
  409320:	681b      	ldr	r3, [r3, #0]
  409322:	4618      	mov	r0, r3
  409324:	2100      	movs	r1, #0
  409326:	220a      	movs	r2, #10
  409328:	2300      	movs	r3, #0
  40932a:	4c38      	ldr	r4, [pc, #224]	; (40940c <task_sdCardWrite+0x10c>)
  40932c:	47a0      	blx	r4
  40932e:	4603      	mov	r3, r0
  409330:	2b01      	cmp	r3, #1
  409332:	d11d      	bne.n	409370 <task_sdCardWrite+0x70>
		{			
			if(sdCardBufferPointer > 0 && sdCardBufferPointer <= SD_CARD_BUFFER_SIZE)
  409334:	4b36      	ldr	r3, [pc, #216]	; (409410 <task_sdCardWrite+0x110>)
  409336:	681b      	ldr	r3, [r3, #0]
  409338:	2b00      	cmp	r3, #0
  40933a:	d011      	beq.n	409360 <task_sdCardWrite+0x60>
  40933c:	4b34      	ldr	r3, [pc, #208]	; (409410 <task_sdCardWrite+0x110>)
  40933e:	681b      	ldr	r3, [r3, #0]
  409340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409344:	d80c      	bhi.n	409360 <task_sdCardWrite+0x60>
			{
				memcpy(tempBuf,sdCardBuffer,sdCardBufferPointer); 	
  409346:	4b32      	ldr	r3, [pc, #200]	; (409410 <task_sdCardWrite+0x110>)
  409348:	681b      	ldr	r3, [r3, #0]
  40934a:	4832      	ldr	r0, [pc, #200]	; (409414 <task_sdCardWrite+0x114>)
  40934c:	4932      	ldr	r1, [pc, #200]	; (409418 <task_sdCardWrite+0x118>)
  40934e:	461a      	mov	r2, r3
  409350:	4b32      	ldr	r3, [pc, #200]	; (40941c <task_sdCardWrite+0x11c>)
  409352:	4798      	blx	r3
				numBytesToWrite = sdCardBufferPointer; 
  409354:	4b2e      	ldr	r3, [pc, #184]	; (409410 <task_sdCardWrite+0x110>)
  409356:	681b      	ldr	r3, [r3, #0]
  409358:	617b      	str	r3, [r7, #20]
				sdCardBufferPointer = 0;
  40935a:	4b2d      	ldr	r3, [pc, #180]	; (409410 <task_sdCardWrite+0x110>)
  40935c:	2200      	movs	r2, #0
  40935e:	601a      	str	r2, [r3, #0]
			}			
			xSemaphoreGive(semaphore_sdCardWrite);
  409360:	4b29      	ldr	r3, [pc, #164]	; (409408 <task_sdCardWrite+0x108>)
  409362:	681b      	ldr	r3, [r3, #0]
  409364:	4618      	mov	r0, r3
  409366:	2100      	movs	r1, #0
  409368:	2200      	movs	r2, #0
  40936a:	2300      	movs	r3, #0
  40936c:	4c2c      	ldr	r4, [pc, #176]	; (409420 <task_sdCardWrite+0x120>)
  40936e:	47a0      	blx	r4
		}	
		if(numBytesToWrite > 0)
  409370:	697b      	ldr	r3, [r7, #20]
  409372:	2b00      	cmp	r3, #0
  409374:	d042      	beq.n	4093fc <task_sdCardWrite+0xfc>
		{
			numBytesWritten = 0;
  409376:	2300      	movs	r3, #0
  409378:	613b      	str	r3, [r7, #16]
			while(numBytesToWrite > 0)
  40937a:	e028      	b.n	4093ce <task_sdCardWrite+0xce>
			{					
				res = f_write(&log_file_object, tempBuf+numBytesWritten, numBytesToWrite, &numBytes);
  40937c:	693a      	ldr	r2, [r7, #16]
  40937e:	4b25      	ldr	r3, [pc, #148]	; (409414 <task_sdCardWrite+0x114>)
  409380:	441a      	add	r2, r3
  409382:	f107 030c 	add.w	r3, r7, #12
  409386:	4827      	ldr	r0, [pc, #156]	; (409424 <task_sdCardWrite+0x124>)
  409388:	4611      	mov	r1, r2
  40938a:	697a      	ldr	r2, [r7, #20]
  40938c:	4c26      	ldr	r4, [pc, #152]	; (409428 <task_sdCardWrite+0x128>)
  40938e:	47a0      	blx	r4
  409390:	4603      	mov	r3, r0
  409392:	461a      	mov	r2, r3
  409394:	4b25      	ldr	r3, [pc, #148]	; (40942c <task_sdCardWrite+0x12c>)
  409396:	701a      	strb	r2, [r3, #0]
				if(res != FR_OK)
  409398:	4b24      	ldr	r3, [pc, #144]	; (40942c <task_sdCardWrite+0x12c>)
  40939a:	781b      	ldrb	r3, [r3, #0]
  40939c:	2b00      	cmp	r3, #0
  40939e:	d005      	beq.n	4093ac <task_sdCardWrite+0xac>
				{
					printf("file write failed with code %d\r\n", res);
  4093a0:	4b22      	ldr	r3, [pc, #136]	; (40942c <task_sdCardWrite+0x12c>)
  4093a2:	781b      	ldrb	r3, [r3, #0]
  4093a4:	4822      	ldr	r0, [pc, #136]	; (409430 <task_sdCardWrite+0x130>)
  4093a6:	4619      	mov	r1, r3
  4093a8:	4b22      	ldr	r3, [pc, #136]	; (409434 <task_sdCardWrite+0x134>)
  4093aa:	4798      	blx	r3
				}
				numBytesToWrite -= numBytes;
  4093ac:	68fb      	ldr	r3, [r7, #12]
  4093ae:	697a      	ldr	r2, [r7, #20]
  4093b0:	1ad3      	subs	r3, r2, r3
  4093b2:	617b      	str	r3, [r7, #20]
				numBytesWritten += numBytes; 
  4093b4:	68fb      	ldr	r3, [r7, #12]
  4093b6:	693a      	ldr	r2, [r7, #16]
  4093b8:	4413      	add	r3, r2
  4093ba:	613b      	str	r3, [r7, #16]
				totalBytesWritten += numBytes;	
  4093bc:	4b1e      	ldr	r3, [pc, #120]	; (409438 <task_sdCardWrite+0x138>)
  4093be:	681a      	ldr	r2, [r3, #0]
  4093c0:	68fb      	ldr	r3, [r7, #12]
  4093c2:	441a      	add	r2, r3
  4093c4:	4b1c      	ldr	r3, [pc, #112]	; (409438 <task_sdCardWrite+0x138>)
  4093c6:	601a      	str	r2, [r3, #0]
				vTaskDelay(1); 	
  4093c8:	2001      	movs	r0, #1
  4093ca:	4b1c      	ldr	r3, [pc, #112]	; (40943c <task_sdCardWrite+0x13c>)
  4093cc:	4798      	blx	r3
			xSemaphoreGive(semaphore_sdCardWrite);
		}	
		if(numBytesToWrite > 0)
		{
			numBytesWritten = 0;
			while(numBytesToWrite > 0)
  4093ce:	697b      	ldr	r3, [r7, #20]
  4093d0:	2b00      	cmp	r3, #0
  4093d2:	d1d3      	bne.n	40937c <task_sdCardWrite+0x7c>
				numBytesWritten += numBytes; 
				totalBytesWritten += numBytes;	
				vTaskDelay(1); 	

			}
			res = f_sync(&log_file_object); //sync the file
  4093d4:	4813      	ldr	r0, [pc, #76]	; (409424 <task_sdCardWrite+0x124>)
  4093d6:	4b1a      	ldr	r3, [pc, #104]	; (409440 <task_sdCardWrite+0x140>)
  4093d8:	4798      	blx	r3
  4093da:	4603      	mov	r3, r0
  4093dc:	461a      	mov	r2, r3
  4093de:	4b13      	ldr	r3, [pc, #76]	; (40942c <task_sdCardWrite+0x12c>)
  4093e0:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
  4093e2:	4b12      	ldr	r3, [pc, #72]	; (40942c <task_sdCardWrite+0x12c>)
  4093e4:	781b      	ldrb	r3, [r3, #0]
  4093e6:	2b00      	cmp	r3, #0
  4093e8:	d005      	beq.n	4093f6 <task_sdCardWrite+0xf6>
			{
				printf("file sync failed with code %d\r\n", res);
  4093ea:	4b10      	ldr	r3, [pc, #64]	; (40942c <task_sdCardWrite+0x12c>)
  4093ec:	781b      	ldrb	r3, [r3, #0]
  4093ee:	4815      	ldr	r0, [pc, #84]	; (409444 <task_sdCardWrite+0x144>)
  4093f0:	4619      	mov	r1, r3
  4093f2:	4b10      	ldr	r3, [pc, #64]	; (409434 <task_sdCardWrite+0x134>)
  4093f4:	4798      	blx	r3
			}
			vTaskDelay(1);
  4093f6:	2001      	movs	r0, #1
  4093f8:	4b10      	ldr	r3, [pc, #64]	; (40943c <task_sdCardWrite+0x13c>)
  4093fa:	4798      	blx	r3
		}
		vTaskDelay(10); 
  4093fc:	200a      	movs	r0, #10
  4093fe:	4b0f      	ldr	r3, [pc, #60]	; (40943c <task_sdCardWrite+0x13c>)
  409400:	4798      	blx	r3
	}	
  409402:	e78c      	b.n	40931e <task_sdCardWrite+0x1e>
  409404:	0040647d 	.word	0x0040647d
  409408:	20001cf0 	.word	0x20001cf0
  40940c:	0040663d 	.word	0x0040663d
  409410:	200020f4 	.word	0x200020f4
  409414:	20001ef4 	.word	0x20001ef4
  409418:	20001cf4 	.word	0x20001cf4
  40941c:	0040cea1 	.word	0x0040cea1
  409420:	00406501 	.word	0x00406501
  409424:	20003d5c 	.word	0x20003d5c
  409428:	004056c9 	.word	0x004056c9
  40942c:	200021c0 	.word	0x200021c0
  409430:	00416744 	.word	0x00416744
  409434:	0040c921 	.word	0x0040c921
  409438:	20001ce8 	.word	0x20001ce8
  40943c:	00406ba5 	.word	0x00406ba5
  409440:	004059fd 	.word	0x004059fd
  409444:	00416768 	.word	0x00416768

00409448 <task_dataHandler>:

static status_t processPackets(); 
void timer_sendDataCallback(xTimerHandle pxTimer);

void task_dataHandler(void *pvParameters)
{
  409448:	b5f0      	push	{r4, r5, r6, r7, lr}
  40944a:	b093      	sub	sp, #76	; 0x4c
  40944c:	af04      	add	r7, sp, #16
  40944e:	6078      	str	r0, [r7, #4]
	static FRESULT res = FR_OK;
	dataLogFileName[0] = LUN_ID_SD_MMC_0_MEM + '0';
  409450:	4b72      	ldr	r3, [pc, #456]	; (40961c <task_dataHandler+0x1d4>)
  409452:	2230      	movs	r2, #48	; 0x30
  409454:	701a      	strb	r2, [r3, #0]
	res = f_open(&log_file_object, (char const *)dataLogFileName, FA_OPEN_ALWAYS | FA_WRITE);
  409456:	4872      	ldr	r0, [pc, #456]	; (409620 <task_dataHandler+0x1d8>)
  409458:	4970      	ldr	r1, [pc, #448]	; (40961c <task_dataHandler+0x1d4>)
  40945a:	2212      	movs	r2, #18
  40945c:	4b71      	ldr	r3, [pc, #452]	; (409624 <task_dataHandler+0x1dc>)
  40945e:	4798      	blx	r3
  409460:	4603      	mov	r3, r0
  409462:	461a      	mov	r2, r3
  409464:	4b70      	ldr	r3, [pc, #448]	; (409628 <task_dataHandler+0x1e0>)
  409466:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
  409468:	4b6f      	ldr	r3, [pc, #444]	; (409628 <task_dataHandler+0x1e0>)
  40946a:	781b      	ldrb	r3, [r3, #0]
  40946c:	2b00      	cmp	r3, #0
  40946e:	d103      	bne.n	409478 <task_dataHandler+0x30>
	{
		printf("log open\r\n");
  409470:	486e      	ldr	r0, [pc, #440]	; (40962c <task_dataHandler+0x1e4>)
  409472:	4b6f      	ldr	r3, [pc, #444]	; (409630 <task_dataHandler+0x1e8>)
  409474:	4798      	blx	r3
  409476:	e002      	b.n	40947e <task_dataHandler+0x36>
	}
	else
	{
		printf("log failed to open\r\n");
  409478:	486e      	ldr	r0, [pc, #440]	; (409634 <task_dataHandler+0x1ec>)
  40947a:	4b6d      	ldr	r3, [pc, #436]	; (409630 <task_dataHandler+0x1e8>)
  40947c:	4798      	blx	r3
	}
	
	res = f_lseek(&log_file_object, log_file_object.fsize);	
  40947e:	4b68      	ldr	r3, [pc, #416]	; (409620 <task_dataHandler+0x1d8>)
  409480:	68db      	ldr	r3, [r3, #12]
  409482:	4867      	ldr	r0, [pc, #412]	; (409620 <task_dataHandler+0x1d8>)
  409484:	4619      	mov	r1, r3
  409486:	4b6c      	ldr	r3, [pc, #432]	; (409638 <task_dataHandler+0x1f0>)
  409488:	4798      	blx	r3
  40948a:	4603      	mov	r3, r0
  40948c:	461a      	mov	r2, r3
  40948e:	4b66      	ldr	r3, [pc, #408]	; (409628 <task_dataHandler+0x1e0>)
  409490:	701a      	strb	r2, [r3, #0]
	//setup the queue
	queue_dataHandler = xQueueCreate( 50, sizeof(dataPacket_t));
  409492:	2032      	movs	r0, #50	; 0x32
  409494:	2123      	movs	r1, #35	; 0x23
  409496:	4b69      	ldr	r3, [pc, #420]	; (40963c <task_dataHandler+0x1f4>)
  409498:	4798      	blx	r3
  40949a:	4602      	mov	r2, r0
  40949c:	4b68      	ldr	r3, [pc, #416]	; (409640 <task_dataHandler+0x1f8>)
  40949e:	601a      	str	r2, [r3, #0]
	if(queue_dataHandler == 0)
  4094a0:	4b67      	ldr	r3, [pc, #412]	; (409640 <task_dataHandler+0x1f8>)
  4094a2:	681b      	ldr	r3, [r3, #0]
  4094a4:	2b00      	cmp	r3, #0
  4094a6:	d103      	bne.n	4094b0 <task_dataHandler+0x68>
	{
		// Queue was not created this is an error!
		printf("an error has occurred, data handler queue failure\r\n"); 
  4094a8:	4866      	ldr	r0, [pc, #408]	; (409644 <task_dataHandler+0x1fc>)
  4094aa:	4b61      	ldr	r3, [pc, #388]	; (409630 <task_dataHandler+0x1e8>)
  4094ac:	4798      	blx	r3
		return; 
  4094ae:	e0b2      	b.n	409616 <task_dataHandler+0x1ce>
	}
	int timerId = 0;
  4094b0:	2300      	movs	r3, #0
  4094b2:	637b      	str	r3, [r7, #52]	; 0x34

	int retCode = xTaskCreate(task_sdCardWrite, "SD", TASK_QUINTIC_STACK_SIZE, NULL, TASK_QUINTIC_STACK_PRIORITY - 1, NULL );
  4094b4:	2304      	movs	r3, #4
  4094b6:	9300      	str	r3, [sp, #0]
  4094b8:	2300      	movs	r3, #0
  4094ba:	9301      	str	r3, [sp, #4]
  4094bc:	2300      	movs	r3, #0
  4094be:	9302      	str	r3, [sp, #8]
  4094c0:	2300      	movs	r3, #0
  4094c2:	9303      	str	r3, [sp, #12]
  4094c4:	4860      	ldr	r0, [pc, #384]	; (409648 <task_dataHandler+0x200>)
  4094c6:	4961      	ldr	r1, [pc, #388]	; (40964c <task_dataHandler+0x204>)
  4094c8:	f240 22ee 	movw	r2, #750	; 0x2ee
  4094cc:	2300      	movs	r3, #0
  4094ce:	4c60      	ldr	r4, [pc, #384]	; (409650 <task_dataHandler+0x208>)
  4094d0:	47a0      	blx	r4
  4094d2:	6338      	str	r0, [r7, #48]	; 0x30
	if (retCode != pdPASS)
  4094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4094d6:	2b01      	cmp	r3, #1
  4094d8:	d003      	beq.n	4094e2 <task_dataHandler+0x9a>
	{
		printf("Failed to sd card task code %d\r\n", retCode);
  4094da:	485e      	ldr	r0, [pc, #376]	; (409654 <task_dataHandler+0x20c>)
  4094dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4094de:	4b54      	ldr	r3, [pc, #336]	; (409630 <task_dataHandler+0x1e8>)
  4094e0:	4798      	blx	r3
	}
	
	//open file to read. 
	dataPacket_t packet; 
	int i =0; 
  4094e2:	2300      	movs	r3, #0
  4094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	//int index = dataFrameTail; 
	while(1)
	{
		
		if(xQueueReceive( queue_dataHandler, &( packet ), 1000) == TRUE)
  4094e6:	4b56      	ldr	r3, [pc, #344]	; (409640 <task_dataHandler+0x1f8>)
  4094e8:	681a      	ldr	r2, [r3, #0]
  4094ea:	f107 0308 	add.w	r3, r7, #8
  4094ee:	4610      	mov	r0, r2
  4094f0:	4619      	mov	r1, r3
  4094f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4094f6:	2300      	movs	r3, #0
  4094f8:	4c57      	ldr	r4, [pc, #348]	; (409658 <task_dataHandler+0x210>)
  4094fa:	47a0      	blx	r4
  4094fc:	4603      	mov	r3, r0
  4094fe:	2b01      	cmp	r3, #1
  409500:	f040 8085 	bne.w	40960e <task_dataHandler+0x1c6>
		{			
			//handle packet
			if(packet.type == DATA_PACKET_TYPE_IMU)
  409504:	7a3b      	ldrb	r3, [r7, #8]
  409506:	2b00      	cmp	r3, #0
  409508:	d14f      	bne.n	4095aa <task_dataHandler+0x162>
					//{
						//index = 0; 
					//}
															//
				//}
				if(packetReceivedFlags & (uint16_t)(1 << packet.imuId))
  40950a:	7a7b      	ldrb	r3, [r7, #9]
  40950c:	2201      	movs	r2, #1
  40950e:	fa02 f303 	lsl.w	r3, r2, r3
  409512:	b29a      	uxth	r2, r3
  409514:	4b51      	ldr	r3, [pc, #324]	; (40965c <task_dataHandler+0x214>)
  409516:	881b      	ldrh	r3, [r3, #0]
  409518:	4013      	ands	r3, r2
  40951a:	b29b      	uxth	r3, r3
  40951c:	2b00      	cmp	r3, #0
  40951e:	d013      	beq.n	409548 <task_dataHandler+0x100>
				{
					//we've already received data for this sensor, copy over it...
					imuConfig[packet.imuIndex].stats.droppedPackets++; //we're dropping a packet. 	TODO must fix this case														
  409520:	7abb      	ldrb	r3, [r7, #10]
  409522:	461a      	mov	r2, r3
  409524:	494e      	ldr	r1, [pc, #312]	; (409660 <task_dataHandler+0x218>)
  409526:	4613      	mov	r3, r2
  409528:	00db      	lsls	r3, r3, #3
  40952a:	1a9b      	subs	r3, r3, r2
  40952c:	00db      	lsls	r3, r3, #3
  40952e:	440b      	add	r3, r1
  409530:	3320      	adds	r3, #32
  409532:	689b      	ldr	r3, [r3, #8]
  409534:	1c59      	adds	r1, r3, #1
  409536:	484a      	ldr	r0, [pc, #296]	; (409660 <task_dataHandler+0x218>)
  409538:	4613      	mov	r3, r2
  40953a:	00db      	lsls	r3, r3, #3
  40953c:	1a9b      	subs	r3, r3, r2
  40953e:	00db      	lsls	r3, r3, #3
  409540:	4403      	add	r3, r0
  409542:	3320      	adds	r3, #32
  409544:	6099      	str	r1, [r3, #8]
  409546:	e056      	b.n	4095f6 <task_dataHandler+0x1ae>
				}
				else
				{
					//make sure the index is alright. 
					if(packet.imuId < NUMBER_OF_SENSORS)
  409548:	7a7b      	ldrb	r3, [r7, #9]
  40954a:	2b09      	cmp	r3, #9
  40954c:	d853      	bhi.n	4095f6 <task_dataHandler+0x1ae>
					{
						memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
  40954e:	7a7b      	ldrb	r3, [r7, #9]
  409550:	461a      	mov	r2, r3
  409552:	4613      	mov	r3, r2
  409554:	009b      	lsls	r3, r3, #2
  409556:	4413      	add	r3, r2
  409558:	00da      	lsls	r2, r3, #3
  40955a:	1ad2      	subs	r2, r2, r3
  40955c:	4b41      	ldr	r3, [pc, #260]	; (409664 <task_dataHandler+0x21c>)
  40955e:	4413      	add	r3, r2
  409560:	f107 0408 	add.w	r4, r7, #8
  409564:	461d      	mov	r5, r3
  409566:	f104 0c20 	add.w	ip, r4, #32
  40956a:	462e      	mov	r6, r5
  40956c:	46a6      	mov	lr, r4
  40956e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  409572:	6030      	str	r0, [r6, #0]
  409574:	6071      	str	r1, [r6, #4]
  409576:	60b2      	str	r2, [r6, #8]
  409578:	60f3      	str	r3, [r6, #12]
  40957a:	3410      	adds	r4, #16
  40957c:	3510      	adds	r5, #16
  40957e:	4564      	cmp	r4, ip
  409580:	d1f3      	bne.n	40956a <task_dataHandler+0x122>
  409582:	462b      	mov	r3, r5
  409584:	4622      	mov	r2, r4
  409586:	8811      	ldrh	r1, [r2, #0]
  409588:	7892      	ldrb	r2, [r2, #2]
  40958a:	8019      	strh	r1, [r3, #0]
  40958c:	709a      	strb	r2, [r3, #2]
						packetReceivedFlags |= (1 << packet.imuId); //set flag
  40958e:	7a7b      	ldrb	r3, [r7, #9]
  409590:	2201      	movs	r2, #1
  409592:	fa02 f303 	lsl.w	r3, r2, r3
  409596:	b29a      	uxth	r2, r3
  409598:	4b30      	ldr	r3, [pc, #192]	; (40965c <task_dataHandler+0x214>)
  40959a:	881b      	ldrh	r3, [r3, #0]
  40959c:	b29b      	uxth	r3, r3
  40959e:	4313      	orrs	r3, r2
  4095a0:	b29b      	uxth	r3, r3
  4095a2:	b29a      	uxth	r2, r3
  4095a4:	4b2d      	ldr	r3, [pc, #180]	; (40965c <task_dataHandler+0x214>)
  4095a6:	801a      	strh	r2, [r3, #0]
  4095a8:	e025      	b.n	4095f6 <task_dataHandler+0x1ae>
					}
				}	
			}
			else
			{
				if(packetReceivedFlags & (uint16_t)(1 << NUMBER_OF_SENSORS -1))
  4095aa:	4b2c      	ldr	r3, [pc, #176]	; (40965c <task_dataHandler+0x214>)
  4095ac:	881b      	ldrh	r3, [r3, #0]
  4095ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4095b2:	2b00      	cmp	r3, #0
  4095b4:	d11f      	bne.n	4095f6 <task_dataHandler+0x1ae>
					//we've already received data for this sensor, process all the bytes as is.					
				}
				else
				{
					//FabSense data always stored at end of buffer
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));
  4095b6:	4b2b      	ldr	r3, [pc, #172]	; (409664 <task_dataHandler+0x21c>)
  4095b8:	f107 0408 	add.w	r4, r7, #8
  4095bc:	f203 153b 	addw	r5, r3, #315	; 0x13b
  4095c0:	f104 0c20 	add.w	ip, r4, #32
  4095c4:	462e      	mov	r6, r5
  4095c6:	46a6      	mov	lr, r4
  4095c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4095cc:	6030      	str	r0, [r6, #0]
  4095ce:	6071      	str	r1, [r6, #4]
  4095d0:	60b2      	str	r2, [r6, #8]
  4095d2:	60f3      	str	r3, [r6, #12]
  4095d4:	3410      	adds	r4, #16
  4095d6:	3510      	adds	r5, #16
  4095d8:	4564      	cmp	r4, ip
  4095da:	d1f3      	bne.n	4095c4 <task_dataHandler+0x17c>
  4095dc:	462b      	mov	r3, r5
  4095de:	4622      	mov	r2, r4
  4095e0:	8811      	ldrh	r1, [r2, #0]
  4095e2:	7892      	ldrb	r2, [r2, #2]
  4095e4:	8019      	strh	r1, [r3, #0]
  4095e6:	709a      	strb	r2, [r3, #2]
					packetReceivedFlags |= (1 << NUMBER_OF_SENSORS -1); //set flag
  4095e8:	4b1c      	ldr	r3, [pc, #112]	; (40965c <task_dataHandler+0x214>)
  4095ea:	881b      	ldrh	r3, [r3, #0]
  4095ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4095f0:	b29a      	uxth	r2, r3
  4095f2:	4b1a      	ldr	r3, [pc, #104]	; (40965c <task_dataHandler+0x214>)
  4095f4:	801a      	strh	r2, [r3, #0]
				}				
			}
			
			if(packetReceivedFlags == packetReceivedMask)
  4095f6:	4b19      	ldr	r3, [pc, #100]	; (40965c <task_dataHandler+0x214>)
  4095f8:	881a      	ldrh	r2, [r3, #0]
  4095fa:	4b1b      	ldr	r3, [pc, #108]	; (409668 <task_dataHandler+0x220>)
  4095fc:	881b      	ldrh	r3, [r3, #0]
  4095fe:	429a      	cmp	r2, r3
  409600:	d105      	bne.n	40960e <task_dataHandler+0x1c6>
			{				
				if(packetReceivedMask != 0x0000)
  409602:	4b19      	ldr	r3, [pc, #100]	; (409668 <task_dataHandler+0x220>)
  409604:	881b      	ldrh	r3, [r3, #0]
  409606:	2b00      	cmp	r3, #0
  409608:	d001      	beq.n	40960e <task_dataHandler+0x1c6>
				{
					processPackets();
  40960a:	4b18      	ldr	r3, [pc, #96]	; (40966c <task_dataHandler+0x224>)
  40960c:	4798      	blx	r3
				}				
			}			
		}		
		vTaskDelay(1);
  40960e:	2001      	movs	r0, #1
  409610:	4b17      	ldr	r3, [pc, #92]	; (409670 <task_dataHandler+0x228>)
  409612:	4798      	blx	r3
	}
  409614:	e767      	b.n	4094e6 <task_dataHandler+0x9e>
	
}
  409616:	373c      	adds	r7, #60	; 0x3c
  409618:	46bd      	mov	sp, r7
  40961a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40961c:	20000220 	.word	0x20000220
  409620:	20003d5c 	.word	0x20003d5c
  409624:	00404fc1 	.word	0x00404fc1
  409628:	200021c1 	.word	0x200021c1
  40962c:	00416788 	.word	0x00416788
  409630:	0040c921 	.word	0x0040c921
  409634:	00416794 	.word	0x00416794
  409638:	00405bd9 	.word	0x00405bd9
  40963c:	004063b5 	.word	0x004063b5
  409640:	20001ce0 	.word	0x20001ce0
  409644:	004167ac 	.word	0x004167ac
  409648:	00409301 	.word	0x00409301
  40964c:	004167e0 	.word	0x004167e0
  409650:	00406a2d 	.word	0x00406a2d
  409654:	004167e4 	.word	0x004167e4
  409658:	0040663d 	.word	0x0040663d
  40965c:	20001ce4 	.word	0x20001ce4
  409660:	20000230 	.word	0x20000230
  409664:	20003f84 	.word	0x20003f84
  409668:	20001ce6 	.word	0x20001ce6
  40966c:	00409675 	.word	0x00409675
  409670:	00406ba5 	.word	0x00406ba5

00409674 <processPackets>:
#define IMU_PACKET_DATA_SIZE 4 
#define FS_PACKET_LENGTH 5  //There are 5 channels on the fabric sense
#define FS_PACKET_DATA_SIZE 4 //each data point is 4 characters
char entryBuffer[200] = {0};
static status_t processPackets()
{
  409674:	b590      	push	{r4, r7, lr}
  409676:	b089      	sub	sp, #36	; 0x24
  409678:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40967a:	2300      	movs	r3, #0
  40967c:	73fb      	strb	r3, [r7, #15]
	int packetIndex = 0, i, j, k, sensorIndex;	  
  40967e:	2300      	movs	r3, #0
  409680:	60bb      	str	r3, [r7, #8]
	int entryBufferPtr = 0; 
  409682:	2300      	movs	r3, #0
  409684:	613b      	str	r3, [r7, #16]
	int res = 0; 
  409686:	2300      	movs	r3, #0
  409688:	607b      	str	r3, [r7, #4]
	int numberBytes = 0; 
  40968a:	2300      	movs	r3, #0
  40968c:	603b      	str	r3, [r7, #0]
	//char* entryBuffer = NULL; 	
	
	entryBufferPtr = snprintf(entryBuffer, 12, "%010d,", sgSysTickCount);
  40968e:	4b78      	ldr	r3, [pc, #480]	; (409870 <processPackets+0x1fc>)
  409690:	681b      	ldr	r3, [r3, #0]
  409692:	4878      	ldr	r0, [pc, #480]	; (409874 <processPackets+0x200>)
  409694:	210c      	movs	r1, #12
  409696:	4a78      	ldr	r2, [pc, #480]	; (409878 <processPackets+0x204>)
  409698:	4c78      	ldr	r4, [pc, #480]	; (40987c <processPackets+0x208>)
  40969a:	47a0      	blx	r4
  40969c:	6138      	str	r0, [r7, #16]
	for(i = 0; i < 10; i++) //sensor reading
  40969e:	2300      	movs	r3, #0
  4096a0:	61fb      	str	r3, [r7, #28]
  4096a2:	e092      	b.n	4097ca <processPackets+0x156>
	{
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
  4096a4:	4976      	ldr	r1, [pc, #472]	; (409880 <processPackets+0x20c>)
  4096a6:	69fa      	ldr	r2, [r7, #28]
  4096a8:	4613      	mov	r3, r2
  4096aa:	009b      	lsls	r3, r3, #2
  4096ac:	4413      	add	r3, r2
  4096ae:	00da      	lsls	r2, r3, #3
  4096b0:	1ad2      	subs	r2, r2, r3
  4096b2:	188b      	adds	r3, r1, r2
  4096b4:	781b      	ldrb	r3, [r3, #0]
  4096b6:	2b00      	cmp	r3, #0
  4096b8:	d13e      	bne.n	409738 <processPackets+0xc4>
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  4096ba:	2300      	movs	r3, #0
  4096bc:	61bb      	str	r3, [r7, #24]
  4096be:	e037      	b.n	409730 <processPackets+0xbc>
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  4096c0:	2300      	movs	r3, #0
  4096c2:	617b      	str	r3, [r7, #20]
  4096c4:	e025      	b.n	409712 <processPackets+0x9e>
				{				
					//copy the asci data to the entry buffer
					if(packetBuffer[i].data != NULL)
					{
						entryBuffer[entryBufferPtr++] = packetBuffer[i].data[(packetIndex*12)+(j*4)+k];	
  4096c6:	6939      	ldr	r1, [r7, #16]
  4096c8:	1c4b      	adds	r3, r1, #1
  4096ca:	613b      	str	r3, [r7, #16]
  4096cc:	68ba      	ldr	r2, [r7, #8]
  4096ce:	4613      	mov	r3, r2
  4096d0:	005b      	lsls	r3, r3, #1
  4096d2:	441a      	add	r2, r3
  4096d4:	69bb      	ldr	r3, [r7, #24]
  4096d6:	4413      	add	r3, r2
  4096d8:	009a      	lsls	r2, r3, #2
  4096da:	697b      	ldr	r3, [r7, #20]
  4096dc:	18d4      	adds	r4, r2, r3
  4096de:	4868      	ldr	r0, [pc, #416]	; (409880 <processPackets+0x20c>)
  4096e0:	69fa      	ldr	r2, [r7, #28]
  4096e2:	4613      	mov	r3, r2
  4096e4:	009b      	lsls	r3, r3, #2
  4096e6:	4413      	add	r3, r2
  4096e8:	00da      	lsls	r2, r3, #3
  4096ea:	1ad2      	subs	r2, r2, r3
  4096ec:	1913      	adds	r3, r2, r4
  4096ee:	4403      	add	r3, r0
  4096f0:	78da      	ldrb	r2, [r3, #3]
  4096f2:	4b60      	ldr	r3, [pc, #384]	; (409874 <processPackets+0x200>)
  4096f4:	545a      	strb	r2, [r3, r1]
					else
					{
						entryBuffer[entryBufferPtr++] = 0;
					}
						
					if(entryBuffer[entryBufferPtr-1] == 0)
  4096f6:	693b      	ldr	r3, [r7, #16]
  4096f8:	3b01      	subs	r3, #1
  4096fa:	4a5e      	ldr	r2, [pc, #376]	; (409874 <processPackets+0x200>)
  4096fc:	5cd3      	ldrb	r3, [r2, r3]
  4096fe:	2b00      	cmp	r3, #0
  409700:	d104      	bne.n	40970c <processPackets+0x98>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0'; 
  409702:	693b      	ldr	r3, [r7, #16]
  409704:	3b01      	subs	r3, #1
  409706:	4a5b      	ldr	r2, [pc, #364]	; (409874 <processPackets+0x200>)
  409708:	2130      	movs	r1, #48	; 0x30
  40970a:	54d1      	strb	r1, [r2, r3]
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  40970c:	697b      	ldr	r3, [r7, #20]
  40970e:	3301      	adds	r3, #1
  409710:	617b      	str	r3, [r7, #20]
  409712:	697b      	ldr	r3, [r7, #20]
  409714:	2b03      	cmp	r3, #3
  409716:	ddd6      	ble.n	4096c6 <processPackets+0x52>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0'; 
					}
				}
				if(j != IMU_PACKET_LENGTH-1)
  409718:	69bb      	ldr	r3, [r7, #24]
  40971a:	2b02      	cmp	r3, #2
  40971c:	d005      	beq.n	40972a <processPackets+0xb6>
				{
					entryBuffer[entryBufferPtr++] = ';';	
  40971e:	693b      	ldr	r3, [r7, #16]
  409720:	1c5a      	adds	r2, r3, #1
  409722:	613a      	str	r2, [r7, #16]
  409724:	4a53      	ldr	r2, [pc, #332]	; (409874 <processPackets+0x200>)
  409726:	213b      	movs	r1, #59	; 0x3b
  409728:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 10; i++) //sensor reading
	{
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  40972a:	69bb      	ldr	r3, [r7, #24]
  40972c:	3301      	adds	r3, #1
  40972e:	61bb      	str	r3, [r7, #24]
  409730:	69bb      	ldr	r3, [r7, #24]
  409732:	2b02      	cmp	r3, #2
  409734:	ddc4      	ble.n	4096c0 <processPackets+0x4c>
  409736:	e03f      	b.n	4097b8 <processPackets+0x144>
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  409738:	2300      	movs	r3, #0
  40973a:	61bb      	str	r3, [r7, #24]
  40973c:	e039      	b.n	4097b2 <processPackets+0x13e>
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40973e:	2300      	movs	r3, #0
  409740:	617b      	str	r3, [r7, #20]
  409742:	e027      	b.n	409794 <processPackets+0x120>
				{
					if(packetBuffer[i].data != NULL)
					{
						//copy the asci data to the entry buffer
						entryBuffer[entryBufferPtr++] = packetBuffer[i].data[(packetIndex*30)+(j*4)+k];							
  409744:	6939      	ldr	r1, [r7, #16]
  409746:	1c4b      	adds	r3, r1, #1
  409748:	613b      	str	r3, [r7, #16]
  40974a:	68ba      	ldr	r2, [r7, #8]
  40974c:	4613      	mov	r3, r2
  40974e:	011b      	lsls	r3, r3, #4
  409750:	1a9b      	subs	r3, r3, r2
  409752:	005b      	lsls	r3, r3, #1
  409754:	461a      	mov	r2, r3
  409756:	69bb      	ldr	r3, [r7, #24]
  409758:	009b      	lsls	r3, r3, #2
  40975a:	441a      	add	r2, r3
  40975c:	697b      	ldr	r3, [r7, #20]
  40975e:	18d4      	adds	r4, r2, r3
  409760:	4847      	ldr	r0, [pc, #284]	; (409880 <processPackets+0x20c>)
  409762:	69fa      	ldr	r2, [r7, #28]
  409764:	4613      	mov	r3, r2
  409766:	009b      	lsls	r3, r3, #2
  409768:	4413      	add	r3, r2
  40976a:	00da      	lsls	r2, r3, #3
  40976c:	1ad2      	subs	r2, r2, r3
  40976e:	1913      	adds	r3, r2, r4
  409770:	4403      	add	r3, r0
  409772:	78da      	ldrb	r2, [r3, #3]
  409774:	4b3f      	ldr	r3, [pc, #252]	; (409874 <processPackets+0x200>)
  409776:	545a      	strb	r2, [r3, r1]
					else
					{
						//there is no data, set to zero. 
						entryBuffer[entryBufferPtr++] = 0;
					}
					if(entryBuffer[entryBufferPtr-1] == 0)
  409778:	693b      	ldr	r3, [r7, #16]
  40977a:	3b01      	subs	r3, #1
  40977c:	4a3d      	ldr	r2, [pc, #244]	; (409874 <processPackets+0x200>)
  40977e:	5cd3      	ldrb	r3, [r2, r3]
  409780:	2b00      	cmp	r3, #0
  409782:	d104      	bne.n	40978e <processPackets+0x11a>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0';
  409784:	693b      	ldr	r3, [r7, #16]
  409786:	3b01      	subs	r3, #1
  409788:	4a3a      	ldr	r2, [pc, #232]	; (409874 <processPackets+0x200>)
  40978a:	2130      	movs	r1, #48	; 0x30
  40978c:	54d1      	strb	r1, [r2, r3]
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40978e:	697b      	ldr	r3, [r7, #20]
  409790:	3301      	adds	r3, #1
  409792:	617b      	str	r3, [r7, #20]
  409794:	697b      	ldr	r3, [r7, #20]
  409796:	2b03      	cmp	r3, #3
  409798:	ddd4      	ble.n	409744 <processPackets+0xd0>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0';
					}
				}
				if(j != FS_PACKET_LENGTH-1)
  40979a:	69bb      	ldr	r3, [r7, #24]
  40979c:	2b04      	cmp	r3, #4
  40979e:	d005      	beq.n	4097ac <processPackets+0x138>
				{
					entryBuffer[entryBufferPtr++] = ';';
  4097a0:	693b      	ldr	r3, [r7, #16]
  4097a2:	1c5a      	adds	r2, r3, #1
  4097a4:	613a      	str	r2, [r7, #16]
  4097a6:	4a33      	ldr	r2, [pc, #204]	; (409874 <processPackets+0x200>)
  4097a8:	213b      	movs	r1, #59	; 0x3b
  4097aa:	54d1      	strb	r1, [r2, r3]
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  4097ac:	69bb      	ldr	r3, [r7, #24]
  4097ae:	3301      	adds	r3, #1
  4097b0:	61bb      	str	r3, [r7, #24]
  4097b2:	69bb      	ldr	r3, [r7, #24]
  4097b4:	2b04      	cmp	r3, #4
  4097b6:	ddc2      	ble.n	40973e <processPackets+0xca>
				{
					entryBuffer[entryBufferPtr++] = ';';
				}
			}				
		}			 			
		entryBuffer[entryBufferPtr++] = ',';		
  4097b8:	693b      	ldr	r3, [r7, #16]
  4097ba:	1c5a      	adds	r2, r3, #1
  4097bc:	613a      	str	r2, [r7, #16]
  4097be:	4a2d      	ldr	r2, [pc, #180]	; (409874 <processPackets+0x200>)
  4097c0:	212c      	movs	r1, #44	; 0x2c
  4097c2:	54d1      	strb	r1, [r2, r3]
	int res = 0; 
	int numberBytes = 0; 
	//char* entryBuffer = NULL; 	
	
	entryBufferPtr = snprintf(entryBuffer, 12, "%010d,", sgSysTickCount);
	for(i = 0; i < 10; i++) //sensor reading
  4097c4:	69fb      	ldr	r3, [r7, #28]
  4097c6:	3301      	adds	r3, #1
  4097c8:	61fb      	str	r3, [r7, #28]
  4097ca:	69fb      	ldr	r3, [r7, #28]
  4097cc:	2b09      	cmp	r3, #9
  4097ce:	f77f af69 	ble.w	4096a4 <processPackets+0x30>
				}
			}				
		}			 			
		entryBuffer[entryBufferPtr++] = ',';		
	}	
	entryBuffer[entryBufferPtr++] = '\r';
  4097d2:	693b      	ldr	r3, [r7, #16]
  4097d4:	1c5a      	adds	r2, r3, #1
  4097d6:	613a      	str	r2, [r7, #16]
  4097d8:	4a26      	ldr	r2, [pc, #152]	; (409874 <processPackets+0x200>)
  4097da:	210d      	movs	r1, #13
  4097dc:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferPtr++] = '\n';
  4097de:	693b      	ldr	r3, [r7, #16]
  4097e0:	1c5a      	adds	r2, r3, #1
  4097e2:	613a      	str	r2, [r7, #16]
  4097e4:	4a23      	ldr	r2, [pc, #140]	; (409874 <processPackets+0x200>)
  4097e6:	210a      	movs	r1, #10
  4097e8:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferPtr] = 0; //terminate the string
  4097ea:	4a22      	ldr	r2, [pc, #136]	; (409874 <processPackets+0x200>)
  4097ec:	693b      	ldr	r3, [r7, #16]
  4097ee:	4413      	add	r3, r2
  4097f0:	2200      	movs	r2, #0
  4097f2:	701a      	strb	r2, [r3, #0]
		
	drv_uart_putString(&uart0Config, entryBuffer);	
  4097f4:	4823      	ldr	r0, [pc, #140]	; (409884 <processPackets+0x210>)
  4097f6:	491f      	ldr	r1, [pc, #124]	; (409874 <processPackets+0x200>)
  4097f8:	4b23      	ldr	r3, [pc, #140]	; (409888 <processPackets+0x214>)
  4097fa:	4798      	blx	r3
	totalFramesWritten++;	
  4097fc:	4b23      	ldr	r3, [pc, #140]	; (40988c <processPackets+0x218>)
  4097fe:	681b      	ldr	r3, [r3, #0]
  409800:	1c5a      	adds	r2, r3, #1
  409802:	4b22      	ldr	r3, [pc, #136]	; (40988c <processPackets+0x218>)
  409804:	601a      	str	r2, [r3, #0]
	if(xSemaphoreTake(semaphore_sdCardWrite,1) == true)
  409806:	4b22      	ldr	r3, [pc, #136]	; (409890 <processPackets+0x21c>)
  409808:	681b      	ldr	r3, [r3, #0]
  40980a:	4618      	mov	r0, r3
  40980c:	2100      	movs	r1, #0
  40980e:	2201      	movs	r2, #1
  409810:	2300      	movs	r3, #0
  409812:	4c20      	ldr	r4, [pc, #128]	; (409894 <processPackets+0x220>)
  409814:	47a0      	blx	r4
  409816:	4603      	mov	r3, r0
  409818:	2b01      	cmp	r3, #1
  40981a:	d11e      	bne.n	40985a <processPackets+0x1e6>
	{
		//copy data to sdCard buffer; 
		if(sdCardBufferPointer + entryBufferPtr < SD_CARD_BUFFER_SIZE)
  40981c:	4b1e      	ldr	r3, [pc, #120]	; (409898 <processPackets+0x224>)
  40981e:	681a      	ldr	r2, [r3, #0]
  409820:	693b      	ldr	r3, [r7, #16]
  409822:	4413      	add	r3, r2
  409824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409828:	d20f      	bcs.n	40984a <processPackets+0x1d6>
		{		
			memcpy(sdCardBuffer+sdCardBufferPointer,entryBuffer,entryBufferPtr); 
  40982a:	4b1b      	ldr	r3, [pc, #108]	; (409898 <processPackets+0x224>)
  40982c:	681a      	ldr	r2, [r3, #0]
  40982e:	4b1b      	ldr	r3, [pc, #108]	; (40989c <processPackets+0x228>)
  409830:	441a      	add	r2, r3
  409832:	693b      	ldr	r3, [r7, #16]
  409834:	4610      	mov	r0, r2
  409836:	490f      	ldr	r1, [pc, #60]	; (409874 <processPackets+0x200>)
  409838:	461a      	mov	r2, r3
  40983a:	4b19      	ldr	r3, [pc, #100]	; (4098a0 <processPackets+0x22c>)
  40983c:	4798      	blx	r3
			sdCardBufferPointer += entryBufferPtr;
  40983e:	4b16      	ldr	r3, [pc, #88]	; (409898 <processPackets+0x224>)
  409840:	681a      	ldr	r2, [r3, #0]
  409842:	693b      	ldr	r3, [r7, #16]
  409844:	441a      	add	r2, r3
  409846:	4b14      	ldr	r3, [pc, #80]	; (409898 <processPackets+0x224>)
  409848:	601a      	str	r2, [r3, #0]
		}
		xSemaphoreGive(semaphore_sdCardWrite);
  40984a:	4b11      	ldr	r3, [pc, #68]	; (409890 <processPackets+0x21c>)
  40984c:	681b      	ldr	r3, [r3, #0]
  40984e:	4618      	mov	r0, r3
  409850:	2100      	movs	r1, #0
  409852:	2200      	movs	r2, #0
  409854:	2300      	movs	r3, #0
  409856:	4c13      	ldr	r4, [pc, #76]	; (4098a4 <processPackets+0x230>)
  409858:	47a0      	blx	r4
	}
	entryBufferPtr = 0; //reset pointer.		
  40985a:	2300      	movs	r3, #0
  40985c:	613b      	str	r3, [r7, #16]
	//clear flag at the end 
	packetReceivedFlags = 0x0000; 		
  40985e:	4b12      	ldr	r3, [pc, #72]	; (4098a8 <processPackets+0x234>)
  409860:	2200      	movs	r2, #0
  409862:	801a      	strh	r2, [r3, #0]
	return status; 
  409864:	7bfb      	ldrb	r3, [r7, #15]
}
  409866:	4618      	mov	r0, r3
  409868:	3724      	adds	r7, #36	; 0x24
  40986a:	46bd      	mov	sp, r7
  40986c:	bd90      	pop	{r4, r7, pc}
  40986e:	bf00      	nop
  409870:	20002484 	.word	0x20002484
  409874:	200020f8 	.word	0x200020f8
  409878:	00416808 	.word	0x00416808
  40987c:	0040d1a5 	.word	0x0040d1a5
  409880:	20003f84 	.word	0x20003f84
  409884:	2000004c 	.word	0x2000004c
  409888:	00408e75 	.word	0x00408e75
  40988c:	20001cec 	.word	0x20001cec
  409890:	20001cf0 	.word	0x20001cf0
  409894:	0040663d 	.word	0x0040663d
  409898:	200020f4 	.word	0x200020f4
  40989c:	20001cf4 	.word	0x20001cf4
  4098a0:	0040cea1 	.word	0x0040cea1
  4098a4:	00406501 	.word	0x00406501
  4098a8:	20001ce4 	.word	0x20001ce4

004098ac <task_fabSenseHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
void task_fabSenseHandler(void *pvParameters)
{
  4098ac:	b5b0      	push	{r4, r5, r7, lr}
  4098ae:	b0d0      	sub	sp, #320	; 0x140
  4098b0:	af00      	add	r7, sp, #0
  4098b2:	1d3b      	adds	r3, r7, #4
  4098b4:	6018      	str	r0, [r3, #0]
	//cast void pointer to fabric sense config type.
	fabricSenseConfig_t *fsConfig = (fabricSenseConfig_t*)pvParameters;
  4098b6:	1d3b      	adds	r3, r7, #4
  4098b8:	681b      	ldr	r3, [r3, #0]
  4098ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	//check that uart device is initialized
	if(drv_uart_isInit(fsConfig->uartDevice) != STATUS_PASS)
  4098be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  4098c2:	689b      	ldr	r3, [r3, #8]
  4098c4:	4618      	mov	r0, r3
  4098c6:	4b35      	ldr	r3, [pc, #212]	; (40999c <task_fabSenseHandler+0xf0>)
  4098c8:	4798      	blx	r3
  4098ca:	4603      	mov	r3, r0
  4098cc:	2b00      	cmp	r3, #0
  4098ce:	d000      	beq.n	4098d2 <task_fabSenseHandler+0x26>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		return;
  4098d0:	e05f      	b.n	409992 <task_fabSenseHandler+0xe6>
	}
	//initialize the module, send configuration values. 
	if(initializeFabSense(fsConfig) != STATUS_PASS)
  4098d2:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
  4098d6:	4b32      	ldr	r3, [pc, #200]	; (4099a0 <task_fabSenseHandler+0xf4>)
  4098d8:	4798      	blx	r3
  4098da:	4603      	mov	r3, r0
  4098dc:	2b00      	cmp	r3, #0
  4098de:	d000      	beq.n	4098e2 <task_fabSenseHandler+0x36>
	{
		//this is an error, we should do something here!
		return; 
  4098e0:	e057      	b.n	409992 <task_fabSenseHandler+0xe6>
	} 
	dataPacket_t packet;
	packet.type = DATA_PACKET_TYPE_SS;
  4098e2:	2301      	movs	r3, #1
  4098e4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	//main loop of task, this is where we request information and store it.
	char buf[FS_RESPONSE_BUF_SIZE] = {0};
  4098e8:	f107 030c 	add.w	r3, r7, #12
  4098ec:	461a      	mov	r2, r3
  4098ee:	23ff      	movs	r3, #255	; 0xff
  4098f0:	4610      	mov	r0, r2
  4098f2:	2100      	movs	r1, #0
  4098f4:	461a      	mov	r2, r3
  4098f6:	4b2b      	ldr	r3, [pc, #172]	; (4099a4 <task_fabSenseHandler+0xf8>)
  4098f8:	4798      	blx	r3
	uint8_t numPacketsReceived = 0; 
  4098fa:	2300      	movs	r3, #0
  4098fc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint32_t sequenceNumber = 0;
  409900:	2300      	movs	r3, #0
  409902:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t packetsReceived = 0; 
  409906:	2300      	movs	r3, #0
  409908:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	packetReceivedMask |= 1<<9; //add mask for fabric sense
  40990c:	4b26      	ldr	r3, [pc, #152]	; (4099a8 <task_fabSenseHandler+0xfc>)
  40990e:	881b      	ldrh	r3, [r3, #0]
  409910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  409914:	b29a      	uxth	r2, r3
  409916:	4b24      	ldr	r3, [pc, #144]	; (4099a8 <task_fabSenseHandler+0xfc>)
  409918:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(enableRecording)
  40991a:	4b24      	ldr	r3, [pc, #144]	; (4099ac <task_fabSenseHandler+0x100>)
  40991c:	781b      	ldrb	r3, [r3, #0]
  40991e:	2b00      	cmp	r3, #0
  409920:	d032      	beq.n	409988 <task_fabSenseHandler+0xdc>
		{		
			#ifdef CREATE_DUMMY_PACKETS
			vTaskDelay(20); 
  409922:	2014      	movs	r0, #20
  409924:	4b22      	ldr	r3, [pc, #136]	; (4099b0 <task_fabSenseHandler+0x104>)
  409926:	4798      	blx	r3
			createDummyFabSensePacket(buf, FS_RESPONSE_BUF_SIZE, sequenceNumber++); 
  409928:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40992c:	1c5a      	adds	r2, r3, #1
  40992e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
  409932:	f107 020c 	add.w	r2, r7, #12
  409936:	4610      	mov	r0, r2
  409938:	21ff      	movs	r1, #255	; 0xff
  40993a:	461a      	mov	r2, r3
  40993c:	4b1d      	ldr	r3, [pc, #116]	; (4099b4 <task_fabSenseHandler+0x108>)
  40993e:	4798      	blx	r3
			#endif
			//if this is our first packet in the set, assign memory for it. 
			memcpy(packet.data,buf,32); 
  409940:	f107 030c 	add.w	r3, r7, #12
  409944:	f207 140f 	addw	r4, r7, #271	; 0x10f
  409948:	461d      	mov	r5, r3
  40994a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40994c:	6020      	str	r0, [r4, #0]
  40994e:	6061      	str	r1, [r4, #4]
  409950:	60a2      	str	r2, [r4, #8]
  409952:	60e3      	str	r3, [r4, #12]
  409954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  409956:	6120      	str	r0, [r4, #16]
  409958:	6161      	str	r1, [r4, #20]
  40995a:	61a2      	str	r2, [r4, #24]
  40995c:	61e3      	str	r3, [r4, #28]
			//enqueue the packet for the data processor. 
			if(queue_dataHandler != NULL)
  40995e:	4b16      	ldr	r3, [pc, #88]	; (4099b8 <task_fabSenseHandler+0x10c>)
  409960:	681b      	ldr	r3, [r3, #0]
  409962:	2b00      	cmp	r3, #0
  409964:	d014      	beq.n	409990 <task_fabSenseHandler+0xe4>
			{
				if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,10 ) != TRUE)
  409966:	4b14      	ldr	r3, [pc, #80]	; (4099b8 <task_fabSenseHandler+0x10c>)
  409968:	681a      	ldr	r2, [r3, #0]
  40996a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
  40996e:	4610      	mov	r0, r2
  409970:	4619      	mov	r1, r3
  409972:	220a      	movs	r2, #10
  409974:	2300      	movs	r3, #0
  409976:	4c11      	ldr	r4, [pc, #68]	; (4099bc <task_fabSenseHandler+0x110>)
  409978:	47a0      	blx	r4
  40997a:	4603      	mov	r3, r0
  40997c:	2b01      	cmp	r3, #1
  40997e:	d007      	beq.n	409990 <task_fabSenseHandler+0xe4>
					//if(packet.data != NULL)
					//{
						//free(packet.data);
						//packet.data = NULL;
					//}
					vTaskDelay(1);
  409980:	2001      	movs	r0, #1
  409982:	4b0b      	ldr	r3, [pc, #44]	; (4099b0 <task_fabSenseHandler+0x104>)
  409984:	4798      	blx	r3
		else
		{
			vTaskDelay(10); 
		}
		
	}
  409986:	e7c8      	b.n	40991a <task_fabSenseHandler+0x6e>
				}
			}		
		}
		else
		{
			vTaskDelay(10); 
  409988:	200a      	movs	r0, #10
  40998a:	4b09      	ldr	r3, [pc, #36]	; (4099b0 <task_fabSenseHandler+0x104>)
  40998c:	4798      	blx	r3
		}
		
	}
  40998e:	e7c4      	b.n	40991a <task_fabSenseHandler+0x6e>
  409990:	e7c3      	b.n	40991a <task_fabSenseHandler+0x6e>
}
  409992:	f507 77a0 	add.w	r7, r7, #320	; 0x140
  409996:	46bd      	mov	sp, r7
  409998:	bdb0      	pop	{r4, r5, r7, pc}
  40999a:	bf00      	nop
  40999c:	00408d75 	.word	0x00408d75
  4099a0:	00409a09 	.word	0x00409a09
  4099a4:	0040cfd5 	.word	0x0040cfd5
  4099a8:	20001ce6 	.word	0x20001ce6
  4099ac:	200021c2 	.word	0x200021c2
  4099b0:	00406ba5 	.word	0x00406ba5
  4099b4:	00409a21 	.word	0x00409a21
  4099b8:	20001ce0 	.word	0x20001ce0
  4099bc:	00406501 	.word	0x00406501

004099c0 <task_fabSense_start>:

status_t task_fabSense_start(fabricSenseConfig_t* fabSenseConfig)
{
  4099c0:	b480      	push	{r7}
  4099c2:	b085      	sub	sp, #20
  4099c4:	af00      	add	r7, sp, #0
  4099c6:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  4099c8:	2300      	movs	r3, #0
  4099ca:	73fb      	strb	r3, [r7, #15]
	enableRecording = true; 
  4099cc:	4b04      	ldr	r3, [pc, #16]	; (4099e0 <task_fabSense_start+0x20>)
  4099ce:	2201      	movs	r2, #1
  4099d0:	701a      	strb	r2, [r3, #0]
	return status; 
  4099d2:	7bfb      	ldrb	r3, [r7, #15]
}
  4099d4:	4618      	mov	r0, r3
  4099d6:	3714      	adds	r7, #20
  4099d8:	46bd      	mov	sp, r7
  4099da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099de:	4770      	bx	lr
  4099e0:	200021c2 	.word	0x200021c2

004099e4 <task_fabSense_stop>:

status_t task_fabSense_stop(fabricSenseConfig_t* fabSenseConfig)
{
  4099e4:	b480      	push	{r7}
  4099e6:	b085      	sub	sp, #20
  4099e8:	af00      	add	r7, sp, #0
  4099ea:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  4099ec:	2300      	movs	r3, #0
  4099ee:	73fb      	strb	r3, [r7, #15]
	enableRecording = false; 
  4099f0:	4b04      	ldr	r3, [pc, #16]	; (409a04 <task_fabSense_stop+0x20>)
  4099f2:	2200      	movs	r2, #0
  4099f4:	701a      	strb	r2, [r3, #0]
	return status;	
  4099f6:	7bfb      	ldrb	r3, [r7, #15]
}
  4099f8:	4618      	mov	r0, r3
  4099fa:	3714      	adds	r7, #20
  4099fc:	46bd      	mov	sp, r7
  4099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a02:	4770      	bx	lr
  409a04:	200021c2 	.word	0x200021c2

00409a08 <initializeFabSense>:


//static functions
status_t initializeFabSense(fabricSenseConfig_t* fabSenseConfig)
{
  409a08:	b480      	push	{r7}
  409a0a:	b083      	sub	sp, #12
  409a0c:	af00      	add	r7, sp, #0
  409a0e:	6078      	str	r0, [r7, #4]
	return STATUS_PASS; 
  409a10:	2300      	movs	r3, #0
}
  409a12:	4618      	mov	r0, r3
  409a14:	370c      	adds	r7, #12
  409a16:	46bd      	mov	sp, r7
  409a18:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a1c:	4770      	bx	lr
  409a1e:	bf00      	nop

00409a20 <createDummyFabSensePacket>:

void createDummyFabSensePacket(char* dataPacket, size_t maxPacketSize, uint32_t seqNum)
{
  409a20:	b590      	push	{r4, r7, lr}
  409a22:	b089      	sub	sp, #36	; 0x24
  409a24:	af02      	add	r7, sp, #8
  409a26:	60f8      	str	r0, [r7, #12]
  409a28:	60b9      	str	r1, [r7, #8]
  409a2a:	607a      	str	r2, [r7, #4]
	int i = 0; 
  409a2c:	2300      	movs	r3, #0
  409a2e:	617b      	str	r3, [r7, #20]
	snprintf(dataPacket, maxPacketSize, "%04dBBBBCCCCDDDDEEEE%08d\r\n",seqNum%10000, sgSysTickCount); 
  409a30:	687a      	ldr	r2, [r7, #4]
  409a32:	4b0a      	ldr	r3, [pc, #40]	; (409a5c <createDummyFabSensePacket+0x3c>)
  409a34:	fba3 1302 	umull	r1, r3, r3, r2
  409a38:	0b5b      	lsrs	r3, r3, #13
  409a3a:	f242 7110 	movw	r1, #10000	; 0x2710
  409a3e:	fb01 f303 	mul.w	r3, r1, r3
  409a42:	1ad3      	subs	r3, r2, r3
  409a44:	4a06      	ldr	r2, [pc, #24]	; (409a60 <createDummyFabSensePacket+0x40>)
  409a46:	6812      	ldr	r2, [r2, #0]
  409a48:	9200      	str	r2, [sp, #0]
  409a4a:	68f8      	ldr	r0, [r7, #12]
  409a4c:	68b9      	ldr	r1, [r7, #8]
  409a4e:	4a05      	ldr	r2, [pc, #20]	; (409a64 <createDummyFabSensePacket+0x44>)
  409a50:	4c05      	ldr	r4, [pc, #20]	; (409a68 <createDummyFabSensePacket+0x48>)
  409a52:	47a0      	blx	r4

  409a54:	371c      	adds	r7, #28
  409a56:	46bd      	mov	sp, r7
  409a58:	bd90      	pop	{r4, r7, pc}
  409a5a:	bf00      	nop
  409a5c:	d1b71759 	.word	0xd1b71759
  409a60:	20002484 	.word	0x20002484
  409a64:	00416810 	.word	0x00416810
  409a68:	0040d1a5 	.word	0x0040d1a5

00409a6c <printStats>:
{
}

char runTimeStats[50*10] = {0}; 
void printStats()
{
  409a6c:	b580      	push	{r7, lr}
  409a6e:	b084      	sub	sp, #16
  409a70:	af00      	add	r7, sp, #0
	int i = 0; 
  409a72:	2300      	movs	r3, #0
  409a74:	60fb      	str	r3, [r7, #12]
	size_t numberOfImus = sizeof(imuConfig) / sizeof(imuConfiguration_t);
  409a76:	230a      	movs	r3, #10
  409a78:	60bb      	str	r3, [r7, #8]
	size_t numberOfQuintics = sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
  409a7a:	2303      	movs	r3, #3
  409a7c:	607b      	str	r3, [r7, #4]
	printf("QUINTIC STATS \r\n");
  409a7e:	485e      	ldr	r0, [pc, #376]	; (409bf8 <printStats+0x18c>)
  409a80:	4b5e      	ldr	r3, [pc, #376]	; (409bfc <printStats+0x190>)
  409a82:	4798      	blx	r3
	for(i = 0; i < numberOfQuintics; i++)
  409a84:	2300      	movs	r3, #0
  409a86:	60fb      	str	r3, [r7, #12]
  409a88:	e027      	b.n	409ada <printStats+0x6e>
	{
		printf("Q%d:\r\n", i);
  409a8a:	485d      	ldr	r0, [pc, #372]	; (409c00 <printStats+0x194>)
  409a8c:	68f9      	ldr	r1, [r7, #12]
  409a8e:	4b5b      	ldr	r3, [pc, #364]	; (409bfc <printStats+0x190>)
  409a90:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
  409a92:	495c      	ldr	r1, [pc, #368]	; (409c04 <printStats+0x198>)
  409a94:	68fa      	ldr	r2, [r7, #12]
  409a96:	4613      	mov	r3, r2
  409a98:	009b      	lsls	r3, r3, #2
  409a9a:	4413      	add	r3, r2
  409a9c:	00db      	lsls	r3, r3, #3
  409a9e:	440b      	add	r3, r1
  409aa0:	3318      	adds	r3, #24
  409aa2:	685b      	ldr	r3, [r3, #4]
  409aa4:	4858      	ldr	r0, [pc, #352]	; (409c08 <printStats+0x19c>)
  409aa6:	4619      	mov	r1, r3
  409aa8:	4b54      	ldr	r3, [pc, #336]	; (409bfc <printStats+0x190>)
  409aaa:	4798      	blx	r3
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
  409aac:	4955      	ldr	r1, [pc, #340]	; (409c04 <printStats+0x198>)
  409aae:	68fa      	ldr	r2, [r7, #12]
  409ab0:	4613      	mov	r3, r2
  409ab2:	009b      	lsls	r3, r3, #2
  409ab4:	4413      	add	r3, r2
  409ab6:	00db      	lsls	r3, r3, #3
  409ab8:	440b      	add	r3, r1
  409aba:	3310      	adds	r3, #16
  409abc:	685b      	ldr	r3, [r3, #4]
  409abe:	4618      	mov	r0, r3
  409ac0:	4b52      	ldr	r3, [pc, #328]	; (409c0c <printStats+0x1a0>)
  409ac2:	4798      	blx	r3
  409ac4:	4603      	mov	r3, r0
  409ac6:	4852      	ldr	r0, [pc, #328]	; (409c10 <printStats+0x1a4>)
  409ac8:	4619      	mov	r1, r3
  409aca:	4b4c      	ldr	r3, [pc, #304]	; (409bfc <printStats+0x190>)
  409acc:	4798      	blx	r3
		vTaskDelay(1);
  409ace:	2001      	movs	r0, #1
  409ad0:	4b50      	ldr	r3, [pc, #320]	; (409c14 <printStats+0x1a8>)
  409ad2:	4798      	blx	r3
{
	int i = 0; 
	size_t numberOfImus = sizeof(imuConfig) / sizeof(imuConfiguration_t);
	size_t numberOfQuintics = sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
	printf("QUINTIC STATS \r\n");
	for(i = 0; i < numberOfQuintics; i++)
  409ad4:	68fb      	ldr	r3, [r7, #12]
  409ad6:	3301      	adds	r3, #1
  409ad8:	60fb      	str	r3, [r7, #12]
  409ada:	68fa      	ldr	r2, [r7, #12]
  409adc:	687b      	ldr	r3, [r7, #4]
  409ade:	429a      	cmp	r2, r3
  409ae0:	d3d3      	bcc.n	409a8a <printStats+0x1e>
		printf("Q%d:\r\n", i);
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printf("IMU STATS \r\n");
  409ae2:	484d      	ldr	r0, [pc, #308]	; (409c18 <printStats+0x1ac>)
  409ae4:	4b45      	ldr	r3, [pc, #276]	; (409bfc <printStats+0x190>)
  409ae6:	4798      	blx	r3
	for(i = 0; i < numberOfImus; i++)
  409ae8:	2300      	movs	r3, #0
  409aea:	60fb      	str	r3, [r7, #12]
  409aec:	e055      	b.n	409b9a <printStats+0x12e>
	{		
		printf("IMU%d:\r\n", imuConfig[i].imuId);
  409aee:	494b      	ldr	r1, [pc, #300]	; (409c1c <printStats+0x1b0>)
  409af0:	68fa      	ldr	r2, [r7, #12]
  409af2:	4613      	mov	r3, r2
  409af4:	00db      	lsls	r3, r3, #3
  409af6:	1a9b      	subs	r3, r3, r2
  409af8:	00db      	lsls	r3, r3, #3
  409afa:	440b      	add	r3, r1
  409afc:	681b      	ldr	r3, [r3, #0]
  409afe:	4848      	ldr	r0, [pc, #288]	; (409c20 <printStats+0x1b4>)
  409b00:	4619      	mov	r1, r3
  409b02:	4b3e      	ldr	r3, [pc, #248]	; (409bfc <printStats+0x190>)
  409b04:	4798      	blx	r3
		printf("	IMU Present: %d\r\n", imuConfig[i].imuPresent);
  409b06:	4945      	ldr	r1, [pc, #276]	; (409c1c <printStats+0x1b0>)
  409b08:	68fa      	ldr	r2, [r7, #12]
  409b0a:	4613      	mov	r3, r2
  409b0c:	00db      	lsls	r3, r3, #3
  409b0e:	1a9b      	subs	r3, r3, r2
  409b10:	00db      	lsls	r3, r3, #3
  409b12:	440b      	add	r3, r1
  409b14:	3318      	adds	r3, #24
  409b16:	685b      	ldr	r3, [r3, #4]
  409b18:	4842      	ldr	r0, [pc, #264]	; (409c24 <printStats+0x1b8>)
  409b1a:	4619      	mov	r1, r3
  409b1c:	4b37      	ldr	r3, [pc, #220]	; (409bfc <printStats+0x190>)
  409b1e:	4798      	blx	r3
		printf("	IMU Connected: %d\r\n", imuConfig[i].imuConnected);
  409b20:	493e      	ldr	r1, [pc, #248]	; (409c1c <printStats+0x1b0>)
  409b22:	68fa      	ldr	r2, [r7, #12]
  409b24:	4613      	mov	r3, r2
  409b26:	00db      	lsls	r3, r3, #3
  409b28:	1a9b      	subs	r3, r3, r2
  409b2a:	00db      	lsls	r3, r3, #3
  409b2c:	440b      	add	r3, r1
  409b2e:	3320      	adds	r3, #32
  409b30:	681b      	ldr	r3, [r3, #0]
  409b32:	483d      	ldr	r0, [pc, #244]	; (409c28 <printStats+0x1bc>)
  409b34:	4619      	mov	r1, r3
  409b36:	4b31      	ldr	r3, [pc, #196]	; (409bfc <printStats+0x190>)
  409b38:	4798      	blx	r3
		vTaskDelay(1);
  409b3a:	2001      	movs	r0, #1
  409b3c:	4b35      	ldr	r3, [pc, #212]	; (409c14 <printStats+0x1a8>)
  409b3e:	4798      	blx	r3
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
  409b40:	4936      	ldr	r1, [pc, #216]	; (409c1c <printStats+0x1b0>)
  409b42:	68fa      	ldr	r2, [r7, #12]
  409b44:	4613      	mov	r3, r2
  409b46:	00db      	lsls	r3, r3, #3
  409b48:	1a9b      	subs	r3, r3, r2
  409b4a:	00db      	lsls	r3, r3, #3
  409b4c:	440b      	add	r3, r1
  409b4e:	3320      	adds	r3, #32
  409b50:	689b      	ldr	r3, [r3, #8]
  409b52:	4836      	ldr	r0, [pc, #216]	; (409c2c <printStats+0x1c0>)
  409b54:	4619      	mov	r1, r3
  409b56:	4b29      	ldr	r3, [pc, #164]	; (409bfc <printStats+0x190>)
  409b58:	4798      	blx	r3
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
  409b5a:	4930      	ldr	r1, [pc, #192]	; (409c1c <printStats+0x1b0>)
  409b5c:	68fa      	ldr	r2, [r7, #12]
  409b5e:	4613      	mov	r3, r2
  409b60:	00db      	lsls	r3, r3, #3
  409b62:	1a9b      	subs	r3, r3, r2
  409b64:	00db      	lsls	r3, r3, #3
  409b66:	440b      	add	r3, r1
  409b68:	3330      	adds	r3, #48	; 0x30
  409b6a:	685b      	ldr	r3, [r3, #4]
  409b6c:	4830      	ldr	r0, [pc, #192]	; (409c30 <printStats+0x1c4>)
  409b6e:	4619      	mov	r1, r3
  409b70:	4b22      	ldr	r3, [pc, #136]	; (409bfc <printStats+0x190>)
  409b72:	4798      	blx	r3
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
  409b74:	4929      	ldr	r1, [pc, #164]	; (409c1c <printStats+0x1b0>)
  409b76:	68fa      	ldr	r2, [r7, #12]
  409b78:	4613      	mov	r3, r2
  409b7a:	00db      	lsls	r3, r3, #3
  409b7c:	1a9b      	subs	r3, r3, r2
  409b7e:	00db      	lsls	r3, r3, #3
  409b80:	440b      	add	r3, r1
  409b82:	3320      	adds	r3, #32
  409b84:	685b      	ldr	r3, [r3, #4]
  409b86:	482b      	ldr	r0, [pc, #172]	; (409c34 <printStats+0x1c8>)
  409b88:	4619      	mov	r1, r3
  409b8a:	4b1c      	ldr	r3, [pc, #112]	; (409bfc <printStats+0x190>)
  409b8c:	4798      	blx	r3
		vTaskDelay(1);
  409b8e:	2001      	movs	r0, #1
  409b90:	4b20      	ldr	r3, [pc, #128]	; (409c14 <printStats+0x1a8>)
  409b92:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printf("IMU STATS \r\n");
	for(i = 0; i < numberOfImus; i++)
  409b94:	68fb      	ldr	r3, [r7, #12]
  409b96:	3301      	adds	r3, #1
  409b98:	60fb      	str	r3, [r7, #12]
  409b9a:	68fa      	ldr	r2, [r7, #12]
  409b9c:	68bb      	ldr	r3, [r7, #8]
  409b9e:	429a      	cmp	r2, r3
  409ba0:	d3a5      	bcc.n	409aee <printStats+0x82>
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
		vTaskDelay(1);
	}
	printf("Total Bytes Written: %d\r\n", totalBytesWritten); 
  409ba2:	4b25      	ldr	r3, [pc, #148]	; (409c38 <printStats+0x1cc>)
  409ba4:	681b      	ldr	r3, [r3, #0]
  409ba6:	4825      	ldr	r0, [pc, #148]	; (409c3c <printStats+0x1d0>)
  409ba8:	4619      	mov	r1, r3
  409baa:	4b14      	ldr	r3, [pc, #80]	; (409bfc <printStats+0x190>)
  409bac:	4798      	blx	r3
	vTaskDelay(1);
  409bae:	2001      	movs	r0, #1
  409bb0:	4b18      	ldr	r3, [pc, #96]	; (409c14 <printStats+0x1a8>)
  409bb2:	4798      	blx	r3
	printf("Total Frames Written: %d \r\n", totalFramesWritten); 
  409bb4:	4b22      	ldr	r3, [pc, #136]	; (409c40 <printStats+0x1d4>)
  409bb6:	681b      	ldr	r3, [r3, #0]
  409bb8:	4822      	ldr	r0, [pc, #136]	; (409c44 <printStats+0x1d8>)
  409bba:	4619      	mov	r1, r3
  409bbc:	4b0f      	ldr	r3, [pc, #60]	; (409bfc <printStats+0x190>)
  409bbe:	4798      	blx	r3
	int queuedMessages = uxQueueMessagesWaiting(queue_dataHandler);
  409bc0:	4b21      	ldr	r3, [pc, #132]	; (409c48 <printStats+0x1dc>)
  409bc2:	681b      	ldr	r3, [r3, #0]
  409bc4:	4618      	mov	r0, r3
  409bc6:	4b21      	ldr	r3, [pc, #132]	; (409c4c <printStats+0x1e0>)
  409bc8:	4798      	blx	r3
  409bca:	4603      	mov	r3, r0
  409bcc:	603b      	str	r3, [r7, #0]
	printf("Queued Messages: %d\r\n", queuedMessages); 
  409bce:	4820      	ldr	r0, [pc, #128]	; (409c50 <printStats+0x1e4>)
  409bd0:	6839      	ldr	r1, [r7, #0]
  409bd2:	4b0a      	ldr	r3, [pc, #40]	; (409bfc <printStats+0x190>)
  409bd4:	4798      	blx	r3
	printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());	
  409bd6:	4b1f      	ldr	r3, [pc, #124]	; (409c54 <printStats+0x1e8>)
  409bd8:	4798      	blx	r3
  409bda:	4603      	mov	r3, r0
  409bdc:	481e      	ldr	r0, [pc, #120]	; (409c58 <printStats+0x1ec>)
  409bde:	4619      	mov	r1, r3
  409be0:	4b06      	ldr	r3, [pc, #24]	; (409bfc <printStats+0x190>)
  409be2:	4798      	blx	r3
	vTaskList((signed portCHAR *)runTimeStats);
  409be4:	481d      	ldr	r0, [pc, #116]	; (409c5c <printStats+0x1f0>)
  409be6:	4b1e      	ldr	r3, [pc, #120]	; (409c60 <printStats+0x1f4>)
  409be8:	4798      	blx	r3
	printf(runTimeStats);
  409bea:	481c      	ldr	r0, [pc, #112]	; (409c5c <printStats+0x1f0>)
  409bec:	4b03      	ldr	r3, [pc, #12]	; (409bfc <printStats+0x190>)
  409bee:	4798      	blx	r3
}
  409bf0:	3710      	adds	r7, #16
  409bf2:	46bd      	mov	sp, r7
  409bf4:	bd80      	pop	{r7, pc}
  409bf6:	bf00      	nop
  409bf8:	0041682c 	.word	0x0041682c
  409bfc:	0040c921 	.word	0x0040c921
  409c00:	00416840 	.word	0x00416840
  409c04:	20000460 	.word	0x20000460
  409c08:	00416848 	.word	0x00416848
  409c0c:	00408db1 	.word	0x00408db1
  409c10:	00416860 	.word	0x00416860
  409c14:	00406ba5 	.word	0x00406ba5
  409c18:	00416878 	.word	0x00416878
  409c1c:	20000230 	.word	0x20000230
  409c20:	00416888 	.word	0x00416888
  409c24:	00416894 	.word	0x00416894
  409c28:	004168a8 	.word	0x004168a8
  409c2c:	004168c0 	.word	0x004168c0
  409c30:	004168d8 	.word	0x004168d8
  409c34:	004168fc 	.word	0x004168fc
  409c38:	20001ce8 	.word	0x20001ce8
  409c3c:	00416918 	.word	0x00416918
  409c40:	20001cec 	.word	0x20001cec
  409c44:	00416934 	.word	0x00416934
  409c48:	20001ce0 	.word	0x20001ce0
  409c4c:	004067e1 	.word	0x004067e1
  409c50:	00416950 	.word	0x00416950
  409c54:	00406d95 	.word	0x00406d95
  409c58:	00416968 	.word	0x00416968
  409c5c:	200021c4 	.word	0x200021c4
  409c60:	00406dad 	.word	0x00406dad

00409c64 <processCommand>:
status_t processCommand(char* command, size_t cmdSize)
{
  409c64:	b580      	push	{r7, lr}
  409c66:	b084      	sub	sp, #16
  409c68:	af00      	add	r7, sp, #0
  409c6a:	6078      	str	r0, [r7, #4]
  409c6c:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS; 
  409c6e:	2300      	movs	r3, #0
  409c70:	73fb      	strb	r3, [r7, #15]
	if(strncmp(command, "SDCardTest\r\n",cmdSize) == 0)
  409c72:	6878      	ldr	r0, [r7, #4]
  409c74:	496d      	ldr	r1, [pc, #436]	; (409e2c <processCommand+0x1c8>)
  409c76:	683a      	ldr	r2, [r7, #0]
  409c78:	4b6d      	ldr	r3, [pc, #436]	; (409e30 <processCommand+0x1cc>)
  409c7a:	4798      	blx	r3
  409c7c:	4603      	mov	r3, r0
  409c7e:	2b00      	cmp	r3, #0
  409c80:	d103      	bne.n	409c8a <processCommand+0x26>
	{
		printf("received the SD card test command\r\n");				
  409c82:	486c      	ldr	r0, [pc, #432]	; (409e34 <processCommand+0x1d0>)
  409c84:	4b6c      	ldr	r3, [pc, #432]	; (409e38 <processCommand+0x1d4>)
  409c86:	4798      	blx	r3
  409c88:	e0cb      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command, "dataBoardGpioTest\r\n",cmdSize) == 0)
  409c8a:	6878      	ldr	r0, [r7, #4]
  409c8c:	496b      	ldr	r1, [pc, #428]	; (409e3c <processCommand+0x1d8>)
  409c8e:	683a      	ldr	r2, [r7, #0]
  409c90:	4b67      	ldr	r3, [pc, #412]	; (409e30 <processCommand+0x1cc>)
  409c92:	4798      	blx	r3
  409c94:	4603      	mov	r3, r0
  409c96:	2b00      	cmp	r3, #0
  409c98:	d103      	bne.n	409ca2 <processCommand+0x3e>
	{
		printf("received the GPIO test command\r\n");
  409c9a:	4869      	ldr	r0, [pc, #420]	; (409e40 <processCommand+0x1dc>)
  409c9c:	4b66      	ldr	r3, [pc, #408]	; (409e38 <processCommand+0x1d4>)
  409c9e:	4798      	blx	r3
  409ca0:	e0bf      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command, "BLE Test\r\n",cmdSize) == 0)
  409ca2:	6878      	ldr	r0, [r7, #4]
  409ca4:	4967      	ldr	r1, [pc, #412]	; (409e44 <processCommand+0x1e0>)
  409ca6:	683a      	ldr	r2, [r7, #0]
  409ca8:	4b61      	ldr	r3, [pc, #388]	; (409e30 <processCommand+0x1cc>)
  409caa:	4798      	blx	r3
  409cac:	4603      	mov	r3, r0
  409cae:	2b00      	cmp	r3, #0
  409cb0:	d104      	bne.n	409cbc <processCommand+0x58>
	{
		printf("received the GPIO test command\r\n",cmdSize);
  409cb2:	4863      	ldr	r0, [pc, #396]	; (409e40 <processCommand+0x1dc>)
  409cb4:	6839      	ldr	r1, [r7, #0]
  409cb6:	4b60      	ldr	r3, [pc, #384]	; (409e38 <processCommand+0x1d4>)
  409cb8:	4798      	blx	r3
  409cba:	e0b2      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command, "StartImus\r\n",cmdSize) == 0)
  409cbc:	6878      	ldr	r0, [r7, #4]
  409cbe:	4962      	ldr	r1, [pc, #392]	; (409e48 <processCommand+0x1e4>)
  409cc0:	683a      	ldr	r2, [r7, #0]
  409cc2:	4b5b      	ldr	r3, [pc, #364]	; (409e30 <processCommand+0x1cc>)
  409cc4:	4798      	blx	r3
  409cc6:	4603      	mov	r3, r0
  409cc8:	2b00      	cmp	r3, #0
  409cca:	d112      	bne.n	409cf2 <processCommand+0x8e>
	{
		task_quintic_startRecording(&quinticConfig[0]);
  409ccc:	485f      	ldr	r0, [pc, #380]	; (409e4c <processCommand+0x1e8>)
  409cce:	4b60      	ldr	r3, [pc, #384]	; (409e50 <processCommand+0x1ec>)
  409cd0:	4798      	blx	r3
		task_quintic_startRecording(&quinticConfig[1]);
  409cd2:	4860      	ldr	r0, [pc, #384]	; (409e54 <processCommand+0x1f0>)
  409cd4:	4b5e      	ldr	r3, [pc, #376]	; (409e50 <processCommand+0x1ec>)
  409cd6:	4798      	blx	r3
		task_quintic_startRecording(&quinticConfig[2]);
  409cd8:	485f      	ldr	r0, [pc, #380]	; (409e58 <processCommand+0x1f4>)
  409cda:	4b5d      	ldr	r3, [pc, #372]	; (409e50 <processCommand+0x1ec>)
  409cdc:	4798      	blx	r3
		task_fabSense_start(&fsConfig); 
  409cde:	485f      	ldr	r0, [pc, #380]	; (409e5c <processCommand+0x1f8>)
  409ce0:	4b5f      	ldr	r3, [pc, #380]	; (409e60 <processCommand+0x1fc>)
  409ce2:	4798      	blx	r3
		printf("start command Issued\r\n"); 	
  409ce4:	485f      	ldr	r0, [pc, #380]	; (409e64 <processCommand+0x200>)
  409ce6:	4b54      	ldr	r3, [pc, #336]	; (409e38 <processCommand+0x1d4>)
  409ce8:	4798      	blx	r3
		enableRecording = true; 
  409cea:	4b5f      	ldr	r3, [pc, #380]	; (409e68 <processCommand+0x204>)
  409cec:	2201      	movs	r2, #1
  409cee:	701a      	strb	r2, [r3, #0]
  409cf0:	e097      	b.n	409e22 <processCommand+0x1be>
	}	
	else if(strncmp(command, "StopImus\r\n",cmdSize) == 0)
  409cf2:	6878      	ldr	r0, [r7, #4]
  409cf4:	495d      	ldr	r1, [pc, #372]	; (409e6c <processCommand+0x208>)
  409cf6:	683a      	ldr	r2, [r7, #0]
  409cf8:	4b4d      	ldr	r3, [pc, #308]	; (409e30 <processCommand+0x1cc>)
  409cfa:	4798      	blx	r3
  409cfc:	4603      	mov	r3, r0
  409cfe:	2b00      	cmp	r3, #0
  409d00:	d112      	bne.n	409d28 <processCommand+0xc4>
	{		
		task_quintic_stopRecording(&quinticConfig[0]);
  409d02:	4852      	ldr	r0, [pc, #328]	; (409e4c <processCommand+0x1e8>)
  409d04:	4b5a      	ldr	r3, [pc, #360]	; (409e70 <processCommand+0x20c>)
  409d06:	4798      	blx	r3
		task_quintic_stopRecording(&quinticConfig[1]);
  409d08:	4852      	ldr	r0, [pc, #328]	; (409e54 <processCommand+0x1f0>)
  409d0a:	4b59      	ldr	r3, [pc, #356]	; (409e70 <processCommand+0x20c>)
  409d0c:	4798      	blx	r3
		task_quintic_stopRecording(&quinticConfig[2]);	
  409d0e:	4852      	ldr	r0, [pc, #328]	; (409e58 <processCommand+0x1f4>)
  409d10:	4b57      	ldr	r3, [pc, #348]	; (409e70 <processCommand+0x20c>)
  409d12:	4798      	blx	r3
		task_fabSense_stop(&fsConfig); 
  409d14:	4851      	ldr	r0, [pc, #324]	; (409e5c <processCommand+0x1f8>)
  409d16:	4b57      	ldr	r3, [pc, #348]	; (409e74 <processCommand+0x210>)
  409d18:	4798      	blx	r3
		printf("stop command issued\r\n"); 	
  409d1a:	4857      	ldr	r0, [pc, #348]	; (409e78 <processCommand+0x214>)
  409d1c:	4b46      	ldr	r3, [pc, #280]	; (409e38 <processCommand+0x1d4>)
  409d1e:	4798      	blx	r3
		enableRecording = false; 
  409d20:	4b51      	ldr	r3, [pc, #324]	; (409e68 <processCommand+0x204>)
  409d22:	2200      	movs	r2, #0
  409d24:	701a      	strb	r2, [r3, #0]
  409d26:	e07c      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command, "setRst2Low\r\n",cmdSize) == 0)
  409d28:	6878      	ldr	r0, [r7, #4]
  409d2a:	4954      	ldr	r1, [pc, #336]	; (409e7c <processCommand+0x218>)
  409d2c:	683a      	ldr	r2, [r7, #0]
  409d2e:	4b40      	ldr	r3, [pc, #256]	; (409e30 <processCommand+0x1cc>)
  409d30:	4798      	blx	r3
  409d32:	4603      	mov	r3, r0
  409d34:	2b00      	cmp	r3, #0
  409d36:	d10a      	bne.n	409d4e <processCommand+0xea>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST2, DRV_GPIO_PIN_STATE_LOW);
  409d38:	200a      	movs	r0, #10
  409d3a:	2100      	movs	r1, #0
  409d3c:	4b50      	ldr	r3, [pc, #320]	; (409e80 <processCommand+0x21c>)
  409d3e:	4798      	blx	r3
		printf("Pin set low\r\n");
  409d40:	4850      	ldr	r0, [pc, #320]	; (409e84 <processCommand+0x220>)
  409d42:	4b3d      	ldr	r3, [pc, #244]	; (409e38 <processCommand+0x1d4>)
  409d44:	4798      	blx	r3
		enableRecording = false;
  409d46:	4b48      	ldr	r3, [pc, #288]	; (409e68 <processCommand+0x204>)
  409d48:	2200      	movs	r2, #0
  409d4a:	701a      	strb	r2, [r3, #0]
  409d4c:	e069      	b.n	409e22 <processCommand+0x1be>
	}	
	else if(strncmp(command, "setRst2High\r\n",cmdSize) == 0)
  409d4e:	6878      	ldr	r0, [r7, #4]
  409d50:	494d      	ldr	r1, [pc, #308]	; (409e88 <processCommand+0x224>)
  409d52:	683a      	ldr	r2, [r7, #0]
  409d54:	4b36      	ldr	r3, [pc, #216]	; (409e30 <processCommand+0x1cc>)
  409d56:	4798      	blx	r3
  409d58:	4603      	mov	r3, r0
  409d5a:	2b00      	cmp	r3, #0
  409d5c:	d10a      	bne.n	409d74 <processCommand+0x110>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST2, DRV_GPIO_PIN_STATE_HIGH);
  409d5e:	200a      	movs	r0, #10
  409d60:	2101      	movs	r1, #1
  409d62:	4b47      	ldr	r3, [pc, #284]	; (409e80 <processCommand+0x21c>)
  409d64:	4798      	blx	r3
		printf("Pin set high\r\n");
  409d66:	4849      	ldr	r0, [pc, #292]	; (409e8c <processCommand+0x228>)
  409d68:	4b33      	ldr	r3, [pc, #204]	; (409e38 <processCommand+0x1d4>)
  409d6a:	4798      	blx	r3
		enableRecording = false;
  409d6c:	4b3e      	ldr	r3, [pc, #248]	; (409e68 <processCommand+0x204>)
  409d6e:	2200      	movs	r2, #0
  409d70:	701a      	strb	r2, [r3, #0]
  409d72:	e056      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command, "rstBLE3\r\n",cmdSize) == 0)
  409d74:	6878      	ldr	r0, [r7, #4]
  409d76:	4946      	ldr	r1, [pc, #280]	; (409e90 <processCommand+0x22c>)
  409d78:	683a      	ldr	r2, [r7, #0]
  409d7a:	4b2d      	ldr	r3, [pc, #180]	; (409e30 <processCommand+0x1cc>)
  409d7c:	4798      	blx	r3
  409d7e:	4603      	mov	r3, r0
  409d80:	2b00      	cmp	r3, #0
  409d82:	d111      	bne.n	409da8 <processCommand+0x144>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST3, DRV_GPIO_PIN_STATE_LOW);
  409d84:	200b      	movs	r0, #11
  409d86:	2100      	movs	r1, #0
  409d88:	4b3d      	ldr	r3, [pc, #244]	; (409e80 <processCommand+0x21c>)
  409d8a:	4798      	blx	r3
		vTaskDelay(50);
  409d8c:	2032      	movs	r0, #50	; 0x32
  409d8e:	4b41      	ldr	r3, [pc, #260]	; (409e94 <processCommand+0x230>)
  409d90:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST3, DRV_GPIO_PIN_STATE_HIGH);
  409d92:	200b      	movs	r0, #11
  409d94:	2101      	movs	r1, #1
  409d96:	4b3a      	ldr	r3, [pc, #232]	; (409e80 <processCommand+0x21c>)
  409d98:	4798      	blx	r3
		printf("Pin reset\r\n");
  409d9a:	483f      	ldr	r0, [pc, #252]	; (409e98 <processCommand+0x234>)
  409d9c:	4b26      	ldr	r3, [pc, #152]	; (409e38 <processCommand+0x1d4>)
  409d9e:	4798      	blx	r3
		enableRecording = false;
  409da0:	4b31      	ldr	r3, [pc, #196]	; (409e68 <processCommand+0x204>)
  409da2:	2200      	movs	r2, #0
  409da4:	701a      	strb	r2, [r3, #0]
  409da6:	e03c      	b.n	409e22 <processCommand+0x1be>
	}	
	else if(strncmp(command, "disableUARTs\r\n",cmdSize) == 0)
  409da8:	6878      	ldr	r0, [r7, #4]
  409daa:	493c      	ldr	r1, [pc, #240]	; (409e9c <processCommand+0x238>)
  409dac:	683a      	ldr	r2, [r7, #0]
  409dae:	4b20      	ldr	r3, [pc, #128]	; (409e30 <processCommand+0x1cc>)
  409db0:	4798      	blx	r3
  409db2:	4603      	mov	r3, r0
  409db4:	2b00      	cmp	r3, #0
  409db6:	d111      	bne.n	409ddc <processCommand+0x178>
	{
		drv_uart_deInit(&uart1Config);
  409db8:	4839      	ldr	r0, [pc, #228]	; (409ea0 <processCommand+0x23c>)
  409dba:	4b3a      	ldr	r3, [pc, #232]	; (409ea4 <processCommand+0x240>)
  409dbc:	4798      	blx	r3
		drv_uart_deInit(&usart0Config);
  409dbe:	483a      	ldr	r0, [pc, #232]	; (409ea8 <processCommand+0x244>)
  409dc0:	4b38      	ldr	r3, [pc, #224]	; (409ea4 <processCommand+0x240>)
  409dc2:	4798      	blx	r3
		drv_uart_deInit(&usart1Config);
  409dc4:	4839      	ldr	r0, [pc, #228]	; (409eac <processCommand+0x248>)
  409dc6:	4b37      	ldr	r3, [pc, #220]	; (409ea4 <processCommand+0x240>)
  409dc8:	4798      	blx	r3
		drv_gpio_ConfigureBLEForProgramming(); 
  409dca:	4b39      	ldr	r3, [pc, #228]	; (409eb0 <processCommand+0x24c>)
  409dcc:	4798      	blx	r3
		printf("UARTs set as High impedance\r\n");
  409dce:	4839      	ldr	r0, [pc, #228]	; (409eb4 <processCommand+0x250>)
  409dd0:	4b19      	ldr	r3, [pc, #100]	; (409e38 <processCommand+0x1d4>)
  409dd2:	4798      	blx	r3
		enableRecording = false;
  409dd4:	4b24      	ldr	r3, [pc, #144]	; (409e68 <processCommand+0x204>)
  409dd6:	2200      	movs	r2, #0
  409dd8:	701a      	strb	r2, [r3, #0]
  409dda:	e022      	b.n	409e22 <processCommand+0x1be>
	}	
	else if(strncmp(command, "flushUarts\r\n",cmdSize) == 0)
  409ddc:	6878      	ldr	r0, [r7, #4]
  409dde:	4936      	ldr	r1, [pc, #216]	; (409eb8 <processCommand+0x254>)
  409de0:	683a      	ldr	r2, [r7, #0]
  409de2:	4b13      	ldr	r3, [pc, #76]	; (409e30 <processCommand+0x1cc>)
  409de4:	4798      	blx	r3
  409de6:	4603      	mov	r3, r0
  409de8:	2b00      	cmp	r3, #0
  409dea:	d109      	bne.n	409e00 <processCommand+0x19c>
	{
		drv_uart_flushRx(&usart1Config);
  409dec:	482f      	ldr	r0, [pc, #188]	; (409eac <processCommand+0x248>)
  409dee:	4b33      	ldr	r3, [pc, #204]	; (409ebc <processCommand+0x258>)
  409df0:	4798      	blx	r3
		drv_uart_flushRx(&uart0Config);
  409df2:	4833      	ldr	r0, [pc, #204]	; (409ec0 <processCommand+0x25c>)
  409df4:	4b31      	ldr	r3, [pc, #196]	; (409ebc <processCommand+0x258>)
  409df6:	4798      	blx	r3
		drv_uart_flushRx(&usart0Config);
  409df8:	482b      	ldr	r0, [pc, #172]	; (409ea8 <processCommand+0x244>)
  409dfa:	4b30      	ldr	r3, [pc, #192]	; (409ebc <processCommand+0x258>)
  409dfc:	4798      	blx	r3
  409dfe:	e010      	b.n	409e22 <processCommand+0x1be>
	}
	else if(strncmp(command,"getStats\r\n", cmdSize) == 0)
  409e00:	6878      	ldr	r0, [r7, #4]
  409e02:	4930      	ldr	r1, [pc, #192]	; (409ec4 <processCommand+0x260>)
  409e04:	683a      	ldr	r2, [r7, #0]
  409e06:	4b0a      	ldr	r3, [pc, #40]	; (409e30 <processCommand+0x1cc>)
  409e08:	4798      	blx	r3
  409e0a:	4603      	mov	r3, r0
  409e0c:	2b00      	cmp	r3, #0
  409e0e:	d102      	bne.n	409e16 <processCommand+0x1b2>
	{
		printStats(); 
  409e10:	4b2d      	ldr	r3, [pc, #180]	; (409ec8 <processCommand+0x264>)
  409e12:	4798      	blx	r3
  409e14:	e005      	b.n	409e22 <processCommand+0x1be>
	}	
	else
	{
		printf("Received unknown command: %s \r\n", command);
  409e16:	482d      	ldr	r0, [pc, #180]	; (409ecc <processCommand+0x268>)
  409e18:	6879      	ldr	r1, [r7, #4]
  409e1a:	4b07      	ldr	r3, [pc, #28]	; (409e38 <processCommand+0x1d4>)
  409e1c:	4798      	blx	r3
		status = STATUS_PASS; 
  409e1e:	2300      	movs	r3, #0
  409e20:	73fb      	strb	r3, [r7, #15]
	}
	return status;	
  409e22:	7bfb      	ldrb	r3, [r7, #15]
}
  409e24:	4618      	mov	r0, r3
  409e26:	3710      	adds	r7, #16
  409e28:	46bd      	mov	sp, r7
  409e2a:	bd80      	pop	{r7, pc}
  409e2c:	00416978 	.word	0x00416978
  409e30:	0040d6bd 	.word	0x0040d6bd
  409e34:	00416988 	.word	0x00416988
  409e38:	0040c921 	.word	0x0040c921
  409e3c:	004169ac 	.word	0x004169ac
  409e40:	004169c0 	.word	0x004169c0
  409e44:	004169e4 	.word	0x004169e4
  409e48:	004169f0 	.word	0x004169f0
  409e4c:	20000460 	.word	0x20000460
  409e50:	0040a675 	.word	0x0040a675
  409e54:	20000488 	.word	0x20000488
  409e58:	200004b0 	.word	0x200004b0
  409e5c:	200004d8 	.word	0x200004d8
  409e60:	004099c1 	.word	0x004099c1
  409e64:	004169fc 	.word	0x004169fc
  409e68:	200021c2 	.word	0x200021c2
  409e6c:	00416a14 	.word	0x00416a14
  409e70:	0040a69d 	.word	0x0040a69d
  409e74:	004099e5 	.word	0x004099e5
  409e78:	00416a20 	.word	0x00416a20
  409e7c:	00416a38 	.word	0x00416a38
  409e80:	00408265 	.word	0x00408265
  409e84:	00416a48 	.word	0x00416a48
  409e88:	00416a58 	.word	0x00416a58
  409e8c:	00416a68 	.word	0x00416a68
  409e90:	00416a78 	.word	0x00416a78
  409e94:	00406ba5 	.word	0x00406ba5
  409e98:	00416a84 	.word	0x00416a84
  409e9c:	00416a90 	.word	0x00416a90
  409ea0:	20000064 	.word	0x20000064
  409ea4:	00408d31 	.word	0x00408d31
  409ea8:	2000007c 	.word	0x2000007c
  409eac:	20000094 	.word	0x20000094
  409eb0:	0040809d 	.word	0x0040809d
  409eb4:	00416aa0 	.word	0x00416aa0
  409eb8:	00416ac0 	.word	0x00416ac0
  409ebc:	00408ec5 	.word	0x00408ec5
  409ec0:	2000004c 	.word	0x2000004c
  409ec4:	00416ad0 	.word	0x00416ad0
  409ec8:	00409a6d 	.word	0x00409a6d
  409ecc:	00416adc 	.word	0x00416adc

00409ed0 <task_serialReceiveTest>:

/**
 * \brief This task, when started will loop back \r\n terminated strings
 */
static void task_serialReceiveTest(void *pvParameters)
{
  409ed0:	b580      	push	{r7, lr}
  409ed2:	b09e      	sub	sp, #120	; 0x78
  409ed4:	af00      	add	r7, sp, #0
  409ed6:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	int result = 0;
  409ed8:	2300      	movs	r3, #0
  409eda:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100] = {0};
  409edc:	f107 020c 	add.w	r2, r7, #12
  409ee0:	2364      	movs	r3, #100	; 0x64
  409ee2:	4610      	mov	r0, r2
  409ee4:	2100      	movs	r1, #0
  409ee6:	461a      	mov	r2, r3
  409ee8:	4b0b      	ldr	r3, [pc, #44]	; (409f18 <task_serialReceiveTest+0x48>)
  409eea:	4798      	blx	r3
	int pointer = 0;
  409eec:	2300      	movs	r3, #0
  409eee:	673b      	str	r3, [r7, #112]	; 0x70
	//char val = 0xA5; 
	while(1)
	{
		if(drv_uart_getline(&uart0Config,buffer,sizeof(buffer)) == STATUS_PASS)
  409ef0:	f107 030c 	add.w	r3, r7, #12
  409ef4:	4809      	ldr	r0, [pc, #36]	; (409f1c <task_serialReceiveTest+0x4c>)
  409ef6:	4619      	mov	r1, r3
  409ef8:	2264      	movs	r2, #100	; 0x64
  409efa:	4b09      	ldr	r3, [pc, #36]	; (409f20 <task_serialReceiveTest+0x50>)
  409efc:	4798      	blx	r3
  409efe:	4603      	mov	r3, r0
  409f00:	2b00      	cmp	r3, #0
  409f02:	d105      	bne.n	409f10 <task_serialReceiveTest+0x40>
		{
			//drv_uart_putString(&uart1Config,buffer); 
			processCommand(buffer,sizeof(buffer)); 
  409f04:	f107 030c 	add.w	r3, r7, #12
  409f08:	4618      	mov	r0, r3
  409f0a:	2164      	movs	r1, #100	; 0x64
  409f0c:	4b05      	ldr	r3, [pc, #20]	; (409f24 <task_serialReceiveTest+0x54>)
  409f0e:	4798      	blx	r3
		}		
		vTaskDelay(10);
  409f10:	200a      	movs	r0, #10
  409f12:	4b05      	ldr	r3, [pc, #20]	; (409f28 <task_serialReceiveTest+0x58>)
  409f14:	4798      	blx	r3
		//taskYIELD(); 
	}
  409f16:	e7eb      	b.n	409ef0 <task_serialReceiveTest+0x20>
  409f18:	0040cfd5 	.word	0x0040cfd5
  409f1c:	2000004c 	.word	0x2000004c
  409f20:	00408de1 	.word	0x00408de1
  409f24:	00409c65 	.word	0x00409c65
  409f28:	00406ba5 	.word	0x00406ba5

00409f2c <TaskMain>:

/**
 * \brief This task is initialized first to initiate the board peripherals and run the initial tests
 */
void TaskMain(void *pvParameters)
{
  409f2c:	b590      	push	{r4, r7, lr}
  409f2e:	b089      	sub	sp, #36	; 0x24
  409f30:	af04      	add	r7, sp, #16
  409f32:	6078      	str	r0, [r7, #4]
	int retCode = 0; 
  409f34:	2300      	movs	r3, #0
  409f36:	60bb      	str	r3, [r7, #8]
	UNUSED(pvParameters);
	/*	Create a Semaphore to pass between tasks	*/
	//vSemaphoreCreateBinary(DebugLogSemaphore);
	powerOnInit();
  409f38:	4b59      	ldr	r3, [pc, #356]	; (40a0a0 <TaskMain+0x174>)
  409f3a:	4798      	blx	r3
	
	initializeImusAndQuintics();
  409f3c:	4b59      	ldr	r3, [pc, #356]	; (40a0a4 <TaskMain+0x178>)
  409f3e:	4798      	blx	r3

	retCode = xTaskCreate(task_quinticHandler, "Q1", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[0], TASK_QUINTIC_STACK_PRIORITY, NULL );
  409f40:	2305      	movs	r3, #5
  409f42:	9300      	str	r3, [sp, #0]
  409f44:	2300      	movs	r3, #0
  409f46:	9301      	str	r3, [sp, #4]
  409f48:	2300      	movs	r3, #0
  409f4a:	9302      	str	r3, [sp, #8]
  409f4c:	2300      	movs	r3, #0
  409f4e:	9303      	str	r3, [sp, #12]
  409f50:	4855      	ldr	r0, [pc, #340]	; (40a0a8 <TaskMain+0x17c>)
  409f52:	4956      	ldr	r1, [pc, #344]	; (40a0ac <TaskMain+0x180>)
  409f54:	f240 22ee 	movw	r2, #750	; 0x2ee
  409f58:	4b55      	ldr	r3, [pc, #340]	; (40a0b0 <TaskMain+0x184>)
  409f5a:	4c56      	ldr	r4, [pc, #344]	; (40a0b4 <TaskMain+0x188>)
  409f5c:	47a0      	blx	r4
  409f5e:	60b8      	str	r0, [r7, #8]
	if (retCode != pdPASS)
  409f60:	68bb      	ldr	r3, [r7, #8]
  409f62:	2b01      	cmp	r3, #1
  409f64:	d003      	beq.n	409f6e <TaskMain+0x42>
	{
		printf("Failed to create Q1 task code %d\r\n", retCode);
  409f66:	4854      	ldr	r0, [pc, #336]	; (40a0b8 <TaskMain+0x18c>)
  409f68:	68b9      	ldr	r1, [r7, #8]
  409f6a:	4b54      	ldr	r3, [pc, #336]	; (40a0bc <TaskMain+0x190>)
  409f6c:	4798      	blx	r3
	}
	vTaskDelay(15000);
  409f6e:	f643 2098 	movw	r0, #15000	; 0x3a98
  409f72:	4b53      	ldr	r3, [pc, #332]	; (40a0c0 <TaskMain+0x194>)
  409f74:	4798      	blx	r3
	//retCode = xTaskCreate(task_quinticHandler, "Q2", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[1], TASK_QUINTIC_STACK_PRIORITY, NULL );
	//if (retCode != pdPASS)
	//{
		//printf("Failed to create Q2 task code %d\r\n", retCode);
	//}
	retCode = xTaskCreate(task_quinticHandler, "Q3", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[2], TASK_QUINTIC_STACK_PRIORITY, NULL );
  409f76:	2305      	movs	r3, #5
  409f78:	9300      	str	r3, [sp, #0]
  409f7a:	2300      	movs	r3, #0
  409f7c:	9301      	str	r3, [sp, #4]
  409f7e:	2300      	movs	r3, #0
  409f80:	9302      	str	r3, [sp, #8]
  409f82:	2300      	movs	r3, #0
  409f84:	9303      	str	r3, [sp, #12]
  409f86:	4848      	ldr	r0, [pc, #288]	; (40a0a8 <TaskMain+0x17c>)
  409f88:	494e      	ldr	r1, [pc, #312]	; (40a0c4 <TaskMain+0x198>)
  409f8a:	f240 22ee 	movw	r2, #750	; 0x2ee
  409f8e:	4b4e      	ldr	r3, [pc, #312]	; (40a0c8 <TaskMain+0x19c>)
  409f90:	4c48      	ldr	r4, [pc, #288]	; (40a0b4 <TaskMain+0x188>)
  409f92:	47a0      	blx	r4
  409f94:	60b8      	str	r0, [r7, #8]
	if (retCode != pdPASS)
  409f96:	68bb      	ldr	r3, [r7, #8]
  409f98:	2b01      	cmp	r3, #1
  409f9a:	d003      	beq.n	409fa4 <TaskMain+0x78>
	{
		printf("Failed to Q3 task code %d\r\n", retCode);
  409f9c:	484b      	ldr	r0, [pc, #300]	; (40a0cc <TaskMain+0x1a0>)
  409f9e:	68b9      	ldr	r1, [r7, #8]
  409fa0:	4b46      	ldr	r3, [pc, #280]	; (40a0bc <TaskMain+0x190>)
  409fa2:	4798      	blx	r3
	}
	
	retCode = xTaskCreate(task_fabSenseHandler, "FS", TASK_FABSENSE_STACK_SIZE,(void*)&fsConfig, TASK_FABSENSE_STACK_PRIORITY, NULL );
  409fa4:	2305      	movs	r3, #5
  409fa6:	9300      	str	r3, [sp, #0]
  409fa8:	2300      	movs	r3, #0
  409faa:	9301      	str	r3, [sp, #4]
  409fac:	2300      	movs	r3, #0
  409fae:	9302      	str	r3, [sp, #8]
  409fb0:	2300      	movs	r3, #0
  409fb2:	9303      	str	r3, [sp, #12]
  409fb4:	4846      	ldr	r0, [pc, #280]	; (40a0d0 <TaskMain+0x1a4>)
  409fb6:	4947      	ldr	r1, [pc, #284]	; (40a0d4 <TaskMain+0x1a8>)
  409fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
  409fbc:	4b46      	ldr	r3, [pc, #280]	; (40a0d8 <TaskMain+0x1ac>)
  409fbe:	4c3d      	ldr	r4, [pc, #244]	; (40a0b4 <TaskMain+0x188>)
  409fc0:	47a0      	blx	r4
  409fc2:	60b8      	str	r0, [r7, #8]
	if (retCode != pdPASS)
  409fc4:	68bb      	ldr	r3, [r7, #8]
  409fc6:	2b01      	cmp	r3, #1
  409fc8:	d003      	beq.n	409fd2 <TaskMain+0xa6>
	{
		printf("Failed to fabric sense task code %d\r\n", retCode);
  409fca:	4844      	ldr	r0, [pc, #272]	; (40a0dc <TaskMain+0x1b0>)
  409fcc:	68b9      	ldr	r1, [r7, #8]
  409fce:	4b3b      	ldr	r3, [pc, #236]	; (40a0bc <TaskMain+0x190>)
  409fd0:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_serialReceiveTest, "cmd", TASK_SERIAL_RECEIVE_STACK_SIZE,NULL, TASK_SERIAL_RECEIVE_STACK_PRIORITY, NULL );
  409fd2:	2306      	movs	r3, #6
  409fd4:	9300      	str	r3, [sp, #0]
  409fd6:	2300      	movs	r3, #0
  409fd8:	9301      	str	r3, [sp, #4]
  409fda:	2300      	movs	r3, #0
  409fdc:	9302      	str	r3, [sp, #8]
  409fde:	2300      	movs	r3, #0
  409fe0:	9303      	str	r3, [sp, #12]
  409fe2:	483f      	ldr	r0, [pc, #252]	; (40a0e0 <TaskMain+0x1b4>)
  409fe4:	493f      	ldr	r1, [pc, #252]	; (40a0e4 <TaskMain+0x1b8>)
  409fe6:	f240 2271 	movw	r2, #625	; 0x271
  409fea:	2300      	movs	r3, #0
  409fec:	4c31      	ldr	r4, [pc, #196]	; (40a0b4 <TaskMain+0x188>)
  409fee:	47a0      	blx	r4
  409ff0:	60b8      	str	r0, [r7, #8]
	if (retCode != pdPASS)
  409ff2:	68bb      	ldr	r3, [r7, #8]
  409ff4:	2b01      	cmp	r3, #1
  409ff6:	d003      	beq.n	40a000 <TaskMain+0xd4>
	{
		printf("Failed to Serial handler task code %d\r\n", retCode);
  409ff8:	483b      	ldr	r0, [pc, #236]	; (40a0e8 <TaskMain+0x1bc>)
  409ffa:	68b9      	ldr	r1, [r7, #8]
  409ffc:	4b2f      	ldr	r3, [pc, #188]	; (40a0bc <TaskMain+0x190>)
  409ffe:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_dataHandler, "DH", TASK_DATA_HANDLER_STACK_SIZE, NULL, TASK_DATA_HANDLER_PRIORITY, NULL );
  40a000:	2307      	movs	r3, #7
  40a002:	9300      	str	r3, [sp, #0]
  40a004:	2300      	movs	r3, #0
  40a006:	9301      	str	r3, [sp, #4]
  40a008:	2300      	movs	r3, #0
  40a00a:	9302      	str	r3, [sp, #8]
  40a00c:	2300      	movs	r3, #0
  40a00e:	9303      	str	r3, [sp, #12]
  40a010:	4836      	ldr	r0, [pc, #216]	; (40a0ec <TaskMain+0x1c0>)
  40a012:	4937      	ldr	r1, [pc, #220]	; (40a0f0 <TaskMain+0x1c4>)
  40a014:	f240 22ee 	movw	r2, #750	; 0x2ee
  40a018:	2300      	movs	r3, #0
  40a01a:	4c26      	ldr	r4, [pc, #152]	; (40a0b4 <TaskMain+0x188>)
  40a01c:	47a0      	blx	r4
  40a01e:	60b8      	str	r0, [r7, #8]
	if (retCode != pdPASS)
  40a020:	68bb      	ldr	r3, [r7, #8]
  40a022:	2b01      	cmp	r3, #1
  40a024:	d003      	beq.n	40a02e <TaskMain+0x102>
	{
		printf("Failed to create data handler task code %d\r\n", retCode);
  40a026:	4833      	ldr	r0, [pc, #204]	; (40a0f4 <TaskMain+0x1c8>)
  40a028:	68b9      	ldr	r1, [r7, #8]
  40a02a:	4b24      	ldr	r3, [pc, #144]	; (40a0bc <TaskMain+0x190>)
  40a02c:	4798      	blx	r3
	}
	printf("Program start\r\n");
  40a02e:	4832      	ldr	r0, [pc, #200]	; (40a0f8 <TaskMain+0x1cc>)
  40a030:	4b22      	ldr	r3, [pc, #136]	; (40a0bc <TaskMain+0x190>)
  40a032:	4798      	blx	r3
	uint8_t interval = 0;
  40a034:	2300      	movs	r3, #0
  40a036:	73fb      	strb	r3, [r7, #15]
	for (;;) 
	{
		/*	Hardware Test routine	*/
		CheckInt();
  40a038:	4b30      	ldr	r3, [pc, #192]	; (40a0fc <TaskMain+0x1d0>)
  40a03a:	4798      	blx	r3
		
		/*	Blink LED according to the input Handler	*/
		
		/*	Debug code */
		
		if(((interval >> 0) & 0x01) == 1)
  40a03c:	7bfb      	ldrb	r3, [r7, #15]
  40a03e:	f003 0301 	and.w	r3, r3, #1
  40a042:	2b00      	cmp	r3, #0
  40a044:	d125      	bne.n	40a092 <TaskMain+0x166>
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED); 
			//drv_gpio_togglePin(DRV_GPIO_PIN_BLE_RST1); 
		}
		else if(((interval >> 1) & 0x01) == 1)
  40a046:	7bfb      	ldrb	r3, [r7, #15]
  40a048:	085b      	lsrs	r3, r3, #1
  40a04a:	b2db      	uxtb	r3, r3
  40a04c:	f003 0301 	and.w	r3, r3, #1
  40a050:	2b00      	cmp	r3, #0
  40a052:	d003      	beq.n	40a05c <TaskMain+0x130>
		{
			drv_gpio_togglePin(DRV_GPIO_PIN_BLUE_LED); 
  40a054:	200d      	movs	r0, #13
  40a056:	4b2a      	ldr	r3, [pc, #168]	; (40a100 <TaskMain+0x1d4>)
  40a058:	4798      	blx	r3
  40a05a:	e01a      	b.n	40a092 <TaskMain+0x166>
			//drv_gpio_togglePin(DRV_GPIO_PIN_BLE_RST2);
		}
		else if(((interval >> 2) & 0x01) == 1)
  40a05c:	7bfb      	ldrb	r3, [r7, #15]
  40a05e:	089b      	lsrs	r3, r3, #2
  40a060:	b2db      	uxtb	r3, r3
  40a062:	f003 0301 	and.w	r3, r3, #1
  40a066:	2b00      	cmp	r3, #0
  40a068:	d113      	bne.n	40a092 <TaskMain+0x166>
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED);
			//drv_gpio_togglePin(DRV_GPIO_PIN_BLE_RST3);
		}
		else if(((interval >> 3) & 0x01) == 1)
  40a06a:	7bfb      	ldrb	r3, [r7, #15]
  40a06c:	08db      	lsrs	r3, r3, #3
  40a06e:	b2db      	uxtb	r3, r3
  40a070:	f003 0301 	and.w	r3, r3, #1
  40a074:	2b00      	cmp	r3, #0
  40a076:	d10c      	bne.n	40a092 <TaskMain+0x166>
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_EN1);
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_OC1);
		}
		else if(((interval >> 4) & 0x01) == 1)
  40a078:	7bfb      	ldrb	r3, [r7, #15]
  40a07a:	091b      	lsrs	r3, r3, #4
  40a07c:	b2db      	uxtb	r3, r3
  40a07e:	f003 0301 	and.w	r3, r3, #1
  40a082:	2b00      	cmp	r3, #0
  40a084:	d105      	bne.n	40a092 <TaskMain+0x166>
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_EN2);
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_OC2);
		}								
		else if(((interval >> 5) & 0x01) == 1)
  40a086:	7bfb      	ldrb	r3, [r7, #15]
  40a088:	095b      	lsrs	r3, r3, #5
  40a08a:	b2db      	uxtb	r3, r3
  40a08c:	f003 0301 	and.w	r3, r3, #1
  40a090:	2b00      	cmp	r3, #0
		
		else if(((interval >> 6) & 0x01) == 1)
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_DC2);
		}
		interval++;	
  40a092:	7bfb      	ldrb	r3, [r7, #15]
  40a094:	3301      	adds	r3, #1
  40a096:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(250);
  40a098:	20fa      	movs	r0, #250	; 0xfa
  40a09a:	4b09      	ldr	r3, [pc, #36]	; (40a0c0 <TaskMain+0x194>)
  40a09c:	4798      	blx	r3
		//ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		//
		//
		
		
	}
  40a09e:	e7cb      	b.n	40a038 <TaskMain+0x10c>
  40a0a0:	00407b6d 	.word	0x00407b6d
  40a0a4:	0040a105 	.word	0x0040a105
  40a0a8:	0040a3e9 	.word	0x0040a3e9
  40a0ac:	00416afc 	.word	0x00416afc
  40a0b0:	20000460 	.word	0x20000460
  40a0b4:	00406a2d 	.word	0x00406a2d
  40a0b8:	00416b00 	.word	0x00416b00
  40a0bc:	0040c921 	.word	0x0040c921
  40a0c0:	00406ba5 	.word	0x00406ba5
  40a0c4:	00416b24 	.word	0x00416b24
  40a0c8:	200004b0 	.word	0x200004b0
  40a0cc:	00416b28 	.word	0x00416b28
  40a0d0:	004098ad 	.word	0x004098ad
  40a0d4:	00416b44 	.word	0x00416b44
  40a0d8:	200004d8 	.word	0x200004d8
  40a0dc:	00416b48 	.word	0x00416b48
  40a0e0:	00409ed1 	.word	0x00409ed1
  40a0e4:	00416b70 	.word	0x00416b70
  40a0e8:	00416b74 	.word	0x00416b74
  40a0ec:	00409449 	.word	0x00409449
  40a0f0:	00416b9c 	.word	0x00416b9c
  40a0f4:	00416ba0 	.word	0x00416ba0
  40a0f8:	00416bd0 	.word	0x00416bd0
  40a0fc:	0040a275 	.word	0x0040a275
  40a100:	004082c9 	.word	0x004082c9

0040a104 <initializeImusAndQuintics>:
}


//initializes the structures used by the
static status_t initializeImusAndQuintics()
{
  40a104:	b590      	push	{r4, r7, lr}
  40a106:	b087      	sub	sp, #28
  40a108:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40a10a:	2300      	movs	r3, #0
  40a10c:	75fb      	strb	r3, [r7, #23]
	int quinticNodIndex[] = {0,0,0};
  40a10e:	2300      	movs	r3, #0
  40a110:	607b      	str	r3, [r7, #4]
  40a112:	2300      	movs	r3, #0
  40a114:	60bb      	str	r3, [r7, #8]
  40a116:	2300      	movs	r3, #0
  40a118:	60fb      	str	r3, [r7, #12]
	quinticConfig[0].expectedNumberOfNods = 0; 
  40a11a:	4b50      	ldr	r3, [pc, #320]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a11c:	2200      	movs	r2, #0
  40a11e:	619a      	str	r2, [r3, #24]
	quinticConfig[1].expectedNumberOfNods = 0;
  40a120:	4b4e      	ldr	r3, [pc, #312]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a122:	2200      	movs	r2, #0
  40a124:	641a      	str	r2, [r3, #64]	; 0x40
	quinticConfig[2].expectedNumberOfNods = 0;
  40a126:	4b4d      	ldr	r3, [pc, #308]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a128:	2200      	movs	r2, #0
  40a12a:	669a      	str	r2, [r3, #104]	; 0x68
	if(brainSettings.isLoaded)
  40a12c:	4b4c      	ldr	r3, [pc, #304]	; (40a260 <initializeImusAndQuintics+0x15c>)
  40a12e:	681b      	ldr	r3, [r3, #0]
  40a130:	2b00      	cmp	r3, #0
  40a132:	f000 808b 	beq.w	40a24c <initializeImusAndQuintics+0x148>
	{
		int i = 0;
  40a136:	2300      	movs	r3, #0
  40a138:	613b      	str	r3, [r7, #16]
		for(i=0; i<brainSettings.numberOfImus; i++)
  40a13a:	2300      	movs	r3, #0
  40a13c:	613b      	str	r3, [r7, #16]
  40a13e:	e07d      	b.n	40a23c <initializeImusAndQuintics+0x138>
		{
			imuConfig[i].imuId = brainSettings.imuSettings[i].imuId;
  40a140:	4947      	ldr	r1, [pc, #284]	; (40a260 <initializeImusAndQuintics+0x15c>)
  40a142:	693a      	ldr	r2, [r7, #16]
  40a144:	4613      	mov	r3, r2
  40a146:	009b      	lsls	r3, r3, #2
  40a148:	4413      	add	r3, r2
  40a14a:	009b      	lsls	r3, r3, #2
  40a14c:	440b      	add	r3, r1
  40a14e:	3310      	adds	r3, #16
  40a150:	6859      	ldr	r1, [r3, #4]
  40a152:	4844      	ldr	r0, [pc, #272]	; (40a264 <initializeImusAndQuintics+0x160>)
  40a154:	693a      	ldr	r2, [r7, #16]
  40a156:	4613      	mov	r3, r2
  40a158:	00db      	lsls	r3, r3, #3
  40a15a:	1a9b      	subs	r3, r3, r2
  40a15c:	00db      	lsls	r3, r3, #3
  40a15e:	4403      	add	r3, r0
  40a160:	6019      	str	r1, [r3, #0]
			snprintf(imuConfig[i].macAddress,20, "%s\r\n",brainSettings.imuSettings[i].imuMacAddress);
  40a162:	693a      	ldr	r2, [r7, #16]
  40a164:	4613      	mov	r3, r2
  40a166:	00db      	lsls	r3, r3, #3
  40a168:	1a9b      	subs	r3, r3, r2
  40a16a:	00db      	lsls	r3, r3, #3
  40a16c:	4a3d      	ldr	r2, [pc, #244]	; (40a264 <initializeImusAndQuintics+0x160>)
  40a16e:	4413      	add	r3, r2
  40a170:	1d19      	adds	r1, r3, #4
  40a172:	693a      	ldr	r2, [r7, #16]
  40a174:	4613      	mov	r3, r2
  40a176:	009b      	lsls	r3, r3, #2
  40a178:	4413      	add	r3, r2
  40a17a:	009b      	lsls	r3, r3, #2
  40a17c:	4a38      	ldr	r2, [pc, #224]	; (40a260 <initializeImusAndQuintics+0x15c>)
  40a17e:	4413      	add	r3, r2
  40a180:	3304      	adds	r3, #4
  40a182:	4608      	mov	r0, r1
  40a184:	2114      	movs	r1, #20
  40a186:	4a38      	ldr	r2, [pc, #224]	; (40a268 <initializeImusAndQuintics+0x164>)
  40a188:	4c38      	ldr	r4, [pc, #224]	; (40a26c <initializeImusAndQuintics+0x168>)
  40a18a:	47a0      	blx	r4
			//strncpy(imuConfig[i].macAddress,brainSettings.imuSettings[i].imuMacAddress, 15);
			imuConfig[i].imuValid = true;
  40a18c:	4935      	ldr	r1, [pc, #212]	; (40a264 <initializeImusAndQuintics+0x160>)
  40a18e:	693a      	ldr	r2, [r7, #16]
  40a190:	4613      	mov	r3, r2
  40a192:	00db      	lsls	r3, r3, #3
  40a194:	1a9b      	subs	r3, r3, r2
  40a196:	00db      	lsls	r3, r3, #3
  40a198:	440b      	add	r3, r1
  40a19a:	3318      	adds	r3, #24
  40a19c:	2201      	movs	r2, #1
  40a19e:	601a      	str	r2, [r3, #0]
			//assign it to a quintic
			//use modulus 3 on the index to determine which quintic gets it. This allows for 3 
			quinticConfig[i%3].imuArray[quinticNodIndex[i%3]++] = &imuConfig[i];
  40a1a0:	6939      	ldr	r1, [r7, #16]
  40a1a2:	4b33      	ldr	r3, [pc, #204]	; (40a270 <initializeImusAndQuintics+0x16c>)
  40a1a4:	fb83 0201 	smull	r0, r2, r3, r1
  40a1a8:	17cb      	asrs	r3, r1, #31
  40a1aa:	1ad2      	subs	r2, r2, r3
  40a1ac:	4613      	mov	r3, r2
  40a1ae:	005b      	lsls	r3, r3, #1
  40a1b0:	4413      	add	r3, r2
  40a1b2:	1aca      	subs	r2, r1, r3
  40a1b4:	6938      	ldr	r0, [r7, #16]
  40a1b6:	4b2e      	ldr	r3, [pc, #184]	; (40a270 <initializeImusAndQuintics+0x16c>)
  40a1b8:	fb83 c100 	smull	ip, r1, r3, r0
  40a1bc:	17c3      	asrs	r3, r0, #31
  40a1be:	1acb      	subs	r3, r1, r3
  40a1c0:	4619      	mov	r1, r3
  40a1c2:	0049      	lsls	r1, r1, #1
  40a1c4:	4419      	add	r1, r3
  40a1c6:	1a43      	subs	r3, r0, r1
  40a1c8:	0099      	lsls	r1, r3, #2
  40a1ca:	f107 0018 	add.w	r0, r7, #24
  40a1ce:	4401      	add	r1, r0
  40a1d0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40a1d4:	1c48      	adds	r0, r1, #1
  40a1d6:	009b      	lsls	r3, r3, #2
  40a1d8:	f107 0c18 	add.w	ip, r7, #24
  40a1dc:	4463      	add	r3, ip
  40a1de:	f843 0c14 	str.w	r0, [r3, #-20]
  40a1e2:	6938      	ldr	r0, [r7, #16]
  40a1e4:	4603      	mov	r3, r0
  40a1e6:	00db      	lsls	r3, r3, #3
  40a1e8:	1a1b      	subs	r3, r3, r0
  40a1ea:	00db      	lsls	r3, r3, #3
  40a1ec:	481d      	ldr	r0, [pc, #116]	; (40a264 <initializeImusAndQuintics+0x160>)
  40a1ee:	181c      	adds	r4, r3, r0
  40a1f0:	481a      	ldr	r0, [pc, #104]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a1f2:	4613      	mov	r3, r2
  40a1f4:	009b      	lsls	r3, r3, #2
  40a1f6:	4413      	add	r3, r2
  40a1f8:	005b      	lsls	r3, r3, #1
  40a1fa:	440b      	add	r3, r1
  40a1fc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			quinticConfig[i%3].expectedNumberOfNods++; 			
  40a200:	6939      	ldr	r1, [r7, #16]
  40a202:	4b1b      	ldr	r3, [pc, #108]	; (40a270 <initializeImusAndQuintics+0x16c>)
  40a204:	fb83 0201 	smull	r0, r2, r3, r1
  40a208:	17cb      	asrs	r3, r1, #31
  40a20a:	1ad2      	subs	r2, r2, r3
  40a20c:	4613      	mov	r3, r2
  40a20e:	005b      	lsls	r3, r3, #1
  40a210:	4413      	add	r3, r2
  40a212:	1aca      	subs	r2, r1, r3
  40a214:	4911      	ldr	r1, [pc, #68]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a216:	4613      	mov	r3, r2
  40a218:	009b      	lsls	r3, r3, #2
  40a21a:	4413      	add	r3, r2
  40a21c:	00db      	lsls	r3, r3, #3
  40a21e:	440b      	add	r3, r1
  40a220:	3318      	adds	r3, #24
  40a222:	681b      	ldr	r3, [r3, #0]
  40a224:	1c59      	adds	r1, r3, #1
  40a226:	480d      	ldr	r0, [pc, #52]	; (40a25c <initializeImusAndQuintics+0x158>)
  40a228:	4613      	mov	r3, r2
  40a22a:	009b      	lsls	r3, r3, #2
  40a22c:	4413      	add	r3, r2
  40a22e:	00db      	lsls	r3, r3, #3
  40a230:	4403      	add	r3, r0
  40a232:	3318      	adds	r3, #24
  40a234:	6019      	str	r1, [r3, #0]
	quinticConfig[1].expectedNumberOfNods = 0;
	quinticConfig[2].expectedNumberOfNods = 0;
	if(brainSettings.isLoaded)
	{
		int i = 0;
		for(i=0; i<brainSettings.numberOfImus; i++)
  40a236:	693b      	ldr	r3, [r7, #16]
  40a238:	3301      	adds	r3, #1
  40a23a:	613b      	str	r3, [r7, #16]
  40a23c:	4b08      	ldr	r3, [pc, #32]	; (40a260 <initializeImusAndQuintics+0x15c>)
  40a23e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  40a242:	693b      	ldr	r3, [r7, #16]
  40a244:	429a      	cmp	r2, r3
  40a246:	f73f af7b 	bgt.w	40a140 <initializeImusAndQuintics+0x3c>
  40a24a:	e001      	b.n	40a250 <initializeImusAndQuintics+0x14c>
			quinticConfig[i%3].expectedNumberOfNods++; 			
		}
	}
	else
	{
		status = STATUS_FAIL;
  40a24c:	2301      	movs	r3, #1
  40a24e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
  40a250:	7dfb      	ldrb	r3, [r7, #23]
}
  40a252:	4618      	mov	r0, r3
  40a254:	371c      	adds	r7, #28
  40a256:	46bd      	mov	sp, r7
  40a258:	bd90      	pop	{r4, r7, pc}
  40a25a:	bf00      	nop
  40a25c:	20000460 	.word	0x20000460
  40a260:	200019e4 	.word	0x200019e4
  40a264:	20000230 	.word	0x20000230
  40a268:	00416be0 	.word	0x00416be0
  40a26c:	0040d1a5 	.word	0x0040d1a5
  40a270:	55555556 	.word	0x55555556

0040a274 <CheckInt>:

static void CheckInt(void)
{
  40a274:	b580      	push	{r7, lr}
  40a276:	af00      	add	r7, sp, #0
	//if (drv_gpio_check_Int(DRV_GPIO_PIN_SW0) == 1)
	//{
		////printf("SW0 pressed\r\n");
	//}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_PW_SW) == 1)
  40a278:	2000      	movs	r0, #0
  40a27a:	4b4b      	ldr	r3, [pc, #300]	; (40a3a8 <CheckInt+0x134>)
  40a27c:	4798      	blx	r3
  40a27e:	4603      	mov	r3, r0
  40a280:	2b00      	cmp	r3, #0
  40a282:	d005      	beq.n	40a290 <CheckInt+0x1c>
	{
		printf("PW SW pressed\r\n");
  40a284:	4849      	ldr	r0, [pc, #292]	; (40a3ac <CheckInt+0x138>)
  40a286:	4b4a      	ldr	r3, [pc, #296]	; (40a3b0 <CheckInt+0x13c>)
  40a288:	4798      	blx	r3
		vTaskDelay(1);
  40a28a:	2001      	movs	r0, #1
  40a28c:	4b49      	ldr	r3, [pc, #292]	; (40a3b4 <CheckInt+0x140>)
  40a28e:	4798      	blx	r3
	}
	if (drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW1) == 1)
  40a290:	2001      	movs	r0, #1
  40a292:	4b45      	ldr	r3, [pc, #276]	; (40a3a8 <CheckInt+0x134>)
  40a294:	4798      	blx	r3
  40a296:	4603      	mov	r3, r0
  40a298:	2b00      	cmp	r3, #0
  40a29a:	d008      	beq.n	40a2ae <CheckInt+0x3a>
	{
		printf("AC SW1 pressed\r\n");
  40a29c:	4846      	ldr	r0, [pc, #280]	; (40a3b8 <CheckInt+0x144>)
  40a29e:	4b44      	ldr	r3, [pc, #272]	; (40a3b0 <CheckInt+0x13c>)
  40a2a0:	4798      	blx	r3
		drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED); 
  40a2a2:	200c      	movs	r0, #12
  40a2a4:	4b45      	ldr	r3, [pc, #276]	; (40a3bc <CheckInt+0x148>)
  40a2a6:	4798      	blx	r3
		vTaskDelay(1);
  40a2a8:	2001      	movs	r0, #1
  40a2aa:	4b42      	ldr	r3, [pc, #264]	; (40a3b4 <CheckInt+0x140>)
  40a2ac:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW2) == 1)
  40a2ae:	2002      	movs	r0, #2
  40a2b0:	4b3d      	ldr	r3, [pc, #244]	; (40a3a8 <CheckInt+0x134>)
  40a2b2:	4798      	blx	r3
  40a2b4:	4603      	mov	r3, r0
  40a2b6:	2b00      	cmp	r3, #0
  40a2b8:	d008      	beq.n	40a2cc <CheckInt+0x58>
	{
		printf("AC SW2 pressed\r\n");
  40a2ba:	4841      	ldr	r0, [pc, #260]	; (40a3c0 <CheckInt+0x14c>)
  40a2bc:	4b3c      	ldr	r3, [pc, #240]	; (40a3b0 <CheckInt+0x13c>)
  40a2be:	4798      	blx	r3
		drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED); 
  40a2c0:	200e      	movs	r0, #14
  40a2c2:	4b3e      	ldr	r3, [pc, #248]	; (40a3bc <CheckInt+0x148>)
  40a2c4:	4798      	blx	r3
		vTaskDelay(1);
  40a2c6:	2001      	movs	r0, #1
  40a2c8:	4b3a      	ldr	r3, [pc, #232]	; (40a3b4 <CheckInt+0x140>)
  40a2ca:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC1) == 1)
  40a2cc:	2003      	movs	r0, #3
  40a2ce:	4b36      	ldr	r3, [pc, #216]	; (40a3a8 <CheckInt+0x134>)
  40a2d0:	4798      	blx	r3
  40a2d2:	4603      	mov	r3, r0
  40a2d4:	2b00      	cmp	r3, #0
  40a2d6:	d005      	beq.n	40a2e4 <CheckInt+0x70>
	{
		printf("JC OC1 detected\r\n");
  40a2d8:	483a      	ldr	r0, [pc, #232]	; (40a3c4 <CheckInt+0x150>)
  40a2da:	4b35      	ldr	r3, [pc, #212]	; (40a3b0 <CheckInt+0x13c>)
  40a2dc:	4798      	blx	r3
		vTaskDelay(1);
  40a2de:	2001      	movs	r0, #1
  40a2e0:	4b34      	ldr	r3, [pc, #208]	; (40a3b4 <CheckInt+0x140>)
  40a2e2:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC2) == 1)
  40a2e4:	2004      	movs	r0, #4
  40a2e6:	4b30      	ldr	r3, [pc, #192]	; (40a3a8 <CheckInt+0x134>)
  40a2e8:	4798      	blx	r3
  40a2ea:	4603      	mov	r3, r0
  40a2ec:	2b00      	cmp	r3, #0
  40a2ee:	d005      	beq.n	40a2fc <CheckInt+0x88>
	{
		printf("JC OC2 detected\r\n");
  40a2f0:	4835      	ldr	r0, [pc, #212]	; (40a3c8 <CheckInt+0x154>)
  40a2f2:	4b2f      	ldr	r3, [pc, #188]	; (40a3b0 <CheckInt+0x13c>)
  40a2f4:	4798      	blx	r3
		vTaskDelay(1);
  40a2f6:	2001      	movs	r0, #1
  40a2f8:	4b2e      	ldr	r3, [pc, #184]	; (40a3b4 <CheckInt+0x140>)
  40a2fa:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC1) == 1)
  40a2fc:	2005      	movs	r0, #5
  40a2fe:	4b2a      	ldr	r3, [pc, #168]	; (40a3a8 <CheckInt+0x134>)
  40a300:	4798      	blx	r3
  40a302:	4603      	mov	r3, r0
  40a304:	2b00      	cmp	r3, #0
  40a306:	d005      	beq.n	40a314 <CheckInt+0xa0>
	{
		printf("JC DC1 detected\r\n");
  40a308:	4830      	ldr	r0, [pc, #192]	; (40a3cc <CheckInt+0x158>)
  40a30a:	4b29      	ldr	r3, [pc, #164]	; (40a3b0 <CheckInt+0x13c>)
  40a30c:	4798      	blx	r3
		vTaskDelay(1);
  40a30e:	2001      	movs	r0, #1
  40a310:	4b28      	ldr	r3, [pc, #160]	; (40a3b4 <CheckInt+0x140>)
  40a312:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC2) == 1)
  40a314:	2006      	movs	r0, #6
  40a316:	4b24      	ldr	r3, [pc, #144]	; (40a3a8 <CheckInt+0x134>)
  40a318:	4798      	blx	r3
  40a31a:	4603      	mov	r3, r0
  40a31c:	2b00      	cmp	r3, #0
  40a31e:	d005      	beq.n	40a32c <CheckInt+0xb8>
	{
		printf("JC DC2 detected\r\n");
  40a320:	482b      	ldr	r0, [pc, #172]	; (40a3d0 <CheckInt+0x15c>)
  40a322:	4b23      	ldr	r3, [pc, #140]	; (40a3b0 <CheckInt+0x13c>)
  40a324:	4798      	blx	r3
		vTaskDelay(1);
  40a326:	2001      	movs	r0, #1
  40a328:	4b22      	ldr	r3, [pc, #136]	; (40a3b4 <CheckInt+0x140>)
  40a32a:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_EN1) == 1)
  40a32c:	2007      	movs	r0, #7
  40a32e:	4b1e      	ldr	r3, [pc, #120]	; (40a3a8 <CheckInt+0x134>)
  40a330:	4798      	blx	r3
  40a332:	4603      	mov	r3, r0
  40a334:	2b00      	cmp	r3, #0
  40a336:	d005      	beq.n	40a344 <CheckInt+0xd0>
	{
		printf("JC EN1 detected\r\n");
  40a338:	4826      	ldr	r0, [pc, #152]	; (40a3d4 <CheckInt+0x160>)
  40a33a:	4b1d      	ldr	r3, [pc, #116]	; (40a3b0 <CheckInt+0x13c>)
  40a33c:	4798      	blx	r3
		vTaskDelay(1);
  40a33e:	2001      	movs	r0, #1
  40a340:	4b1c      	ldr	r3, [pc, #112]	; (40a3b4 <CheckInt+0x140>)
  40a342:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_EN2) == 1)
  40a344:	2008      	movs	r0, #8
  40a346:	4b18      	ldr	r3, [pc, #96]	; (40a3a8 <CheckInt+0x134>)
  40a348:	4798      	blx	r3
  40a34a:	4603      	mov	r3, r0
  40a34c:	2b00      	cmp	r3, #0
  40a34e:	d005      	beq.n	40a35c <CheckInt+0xe8>
	{
		printf("JC EN2 detected\r\n");
  40a350:	4821      	ldr	r0, [pc, #132]	; (40a3d8 <CheckInt+0x164>)
  40a352:	4b17      	ldr	r3, [pc, #92]	; (40a3b0 <CheckInt+0x13c>)
  40a354:	4798      	blx	r3
		vTaskDelay(1);
  40a356:	2001      	movs	r0, #1
  40a358:	4b16      	ldr	r3, [pc, #88]	; (40a3b4 <CheckInt+0x140>)
  40a35a:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_LBO) == 1)
  40a35c:	200f      	movs	r0, #15
  40a35e:	4b12      	ldr	r3, [pc, #72]	; (40a3a8 <CheckInt+0x134>)
  40a360:	4798      	blx	r3
  40a362:	4603      	mov	r3, r0
  40a364:	2b00      	cmp	r3, #0
  40a366:	d005      	beq.n	40a374 <CheckInt+0x100>
	{
		printf("LBO detected\r\n");
  40a368:	481c      	ldr	r0, [pc, #112]	; (40a3dc <CheckInt+0x168>)
  40a36a:	4b11      	ldr	r3, [pc, #68]	; (40a3b0 <CheckInt+0x13c>)
  40a36c:	4798      	blx	r3
		vTaskDelay(1);
  40a36e:	2001      	movs	r0, #1
  40a370:	4b10      	ldr	r3, [pc, #64]	; (40a3b4 <CheckInt+0x140>)
  40a372:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_STAT) == 1)
  40a374:	2011      	movs	r0, #17
  40a376:	4b0c      	ldr	r3, [pc, #48]	; (40a3a8 <CheckInt+0x134>)
  40a378:	4798      	blx	r3
  40a37a:	4603      	mov	r3, r0
  40a37c:	2b00      	cmp	r3, #0
  40a37e:	d005      	beq.n	40a38c <CheckInt+0x118>
	{
		printf("STAT detected\r\n");
  40a380:	4817      	ldr	r0, [pc, #92]	; (40a3e0 <CheckInt+0x16c>)
  40a382:	4b0b      	ldr	r3, [pc, #44]	; (40a3b0 <CheckInt+0x13c>)
  40a384:	4798      	blx	r3
		vTaskDelay(1);
  40a386:	2001      	movs	r0, #1
  40a388:	4b0a      	ldr	r3, [pc, #40]	; (40a3b4 <CheckInt+0x140>)
  40a38a:	4798      	blx	r3
	}
	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_SD_CD) == 1)
  40a38c:	2010      	movs	r0, #16
  40a38e:	4b06      	ldr	r3, [pc, #24]	; (40a3a8 <CheckInt+0x134>)
  40a390:	4798      	blx	r3
  40a392:	4603      	mov	r3, r0
  40a394:	2b00      	cmp	r3, #0
  40a396:	d005      	beq.n	40a3a4 <CheckInt+0x130>
	{
		printf("SD CD detected\r\n");
  40a398:	4812      	ldr	r0, [pc, #72]	; (40a3e4 <CheckInt+0x170>)
  40a39a:	4b05      	ldr	r3, [pc, #20]	; (40a3b0 <CheckInt+0x13c>)
  40a39c:	4798      	blx	r3
		vTaskDelay(1);
  40a39e:	2001      	movs	r0, #1
  40a3a0:	4b04      	ldr	r3, [pc, #16]	; (40a3b4 <CheckInt+0x140>)
  40a3a2:	4798      	blx	r3
	}
  40a3a4:	bd80      	pop	{r7, pc}
  40a3a6:	bf00      	nop
  40a3a8:	004082f9 	.word	0x004082f9
  40a3ac:	00416be8 	.word	0x00416be8
  40a3b0:	0040c921 	.word	0x0040c921
  40a3b4:	00406ba5 	.word	0x00406ba5
  40a3b8:	00416bf8 	.word	0x00416bf8
  40a3bc:	004082c9 	.word	0x004082c9
  40a3c0:	00416c0c 	.word	0x00416c0c
  40a3c4:	00416c20 	.word	0x00416c20
  40a3c8:	00416c34 	.word	0x00416c34
  40a3cc:	00416c48 	.word	0x00416c48
  40a3d0:	00416c5c 	.word	0x00416c5c
  40a3d4:	00416c70 	.word	0x00416c70
  40a3d8:	00416c84 	.word	0x00416c84
  40a3dc:	00416c98 	.word	0x00416c98
  40a3e0:	00416ca8 	.word	0x00416ca8
  40a3e4:	00416cb8 	.word	0x00416cb8

0040a3e8 <task_quinticHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing quintic and imu configuration. 
 * @return void
 ***********************************************************************************************/
void task_quinticHandler(void *pvParameters)
{
  40a3e8:	b590      	push	{r4, r7, lr}
  40a3ea:	b0d1      	sub	sp, #324	; 0x144
  40a3ec:	af00      	add	r7, sp, #0
  40a3ee:	1d3b      	adds	r3, r7, #4
  40a3f0:	6018      	str	r0, [r3, #0]
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
  40a3f2:	1d3b      	adds	r3, r7, #4
  40a3f4:	681b      	ldr	r3, [r3, #0]
  40a3f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	//initialize all structures ,check everything is alright
	int i = 0;
  40a3fa:	2300      	movs	r3, #0
  40a3fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  40a400:	2300      	movs	r3, #0
  40a402:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  40a406:	e02d      	b.n	40a464 <task_quinticHandler+0x7c>
	{
		//qConfig->imuArray[i]->bufferEnd = 0;
		//qConfig->imuArray[i]->bufferHead = 0;
		//memset(qConfig->imuArray[i]->packetBuffer, 0 , IMU_BUFFER_SIZE*IMU_PACKET_LENGTH); 	
		qConfig->imuArray[i]->stats.avgPacketTime = 0;
  40a408:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a40c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40a410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a414:	2200      	movs	r2, #0
  40a416:	635a      	str	r2, [r3, #52]	; 0x34
		qConfig->imuArray[i]->stats.droppedPackets = 0;
  40a418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a41c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a424:	2200      	movs	r2, #0
  40a426:	629a      	str	r2, [r3, #40]	; 0x28
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
  40a428:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a42c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40a430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a434:	4a81      	ldr	r2, [pc, #516]	; (40a63c <task_quinticHandler+0x254>)
  40a436:	6812      	ldr	r2, [r2, #0]
  40a438:	62da      	str	r2, [r3, #44]	; 0x2c
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
  40a43a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a43e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a446:	2200      	movs	r2, #0
  40a448:	631a      	str	r2, [r3, #48]	; 0x30
		qConfig->imuArray[i]->stats.packetCnt = 0;
  40a44a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a44e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a456:	2200      	movs	r2, #0
  40a458:	625a      	str	r2, [r3, #36]	; 0x24
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
	//initialize all structures ,check everything is alright
	int i = 0;
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  40a45a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40a45e:	3301      	adds	r3, #1
  40a460:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  40a464:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40a468:	2b04      	cmp	r3, #4
  40a46a:	ddcd      	ble.n	40a408 <task_quinticHandler+0x20>
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
		qConfig->imuArray[i]->stats.packetCnt = 0;
	}
	
	if(drv_uart_isInit(qConfig->uartDevice) != STATUS_PASS)
  40a46c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a470:	695b      	ldr	r3, [r3, #20]
  40a472:	4618      	mov	r0, r3
  40a474:	4b72      	ldr	r3, [pc, #456]	; (40a640 <task_quinticHandler+0x258>)
  40a476:	4798      	blx	r3
  40a478:	4603      	mov	r3, r0
  40a47a:	2b00      	cmp	r3, #0
  40a47c:	d000      	beq.n	40a480 <task_quinticHandler+0x98>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		return; 
  40a47e:	e0d9      	b.n	40a634 <task_quinticHandler+0x24c>
	#ifdef DEBUG_DUMMY_DATA
	packetReceivedMask |= (1<<qConfig->imuArray[0]->imuId);
	packetReceivedMask |= (1<<qConfig->imuArray[1]->imuId);
	packetReceivedMask |= (1<<qConfig->imuArray[2]->imuId);
	#else
	initializeImus(qConfig);
  40a480:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
  40a484:	4b6f      	ldr	r3, [pc, #444]	; (40a644 <task_quinticHandler+0x25c>)
  40a486:	4798      	blx	r3
	#endif 
	dataPacket_t packet; 
	packet.type = DATA_PACKET_TYPE_IMU; 
  40a488:	2300      	movs	r3, #0
  40a48a:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	//main loop of task, this is where we request information and store it. 
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; 
  40a48e:	f107 0308 	add.w	r3, r7, #8
  40a492:	461a      	mov	r2, r3
  40a494:	23ff      	movs	r3, #255	; 0xff
  40a496:	4610      	mov	r0, r2
  40a498:	2100      	movs	r1, #0
  40a49a:	461a      	mov	r2, r3
  40a49c:	4b6a      	ldr	r3, [pc, #424]	; (40a648 <task_quinticHandler+0x260>)
  40a49e:	4798      	blx	r3
	int packetNumber = 0;
  40a4a0:	2300      	movs	r3, #0
  40a4a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint32_t timeNow = 0;
  40a4a6:	2300      	movs	r3, #0
  40a4a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	int index = -1; 
  40a4ac:	f04f 33ff 	mov.w	r3, #4294967295
  40a4b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	
	while(1)
	{

		#ifndef DEBUG_DUMMY_DATA
		if(drv_uart_getline(qConfig->uartDevice, buf, CMD_RESPONSE_BUF_SIZE) == STATUS_PASS)
  40a4b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a4b8:	695a      	ldr	r2, [r3, #20]
  40a4ba:	f107 0308 	add.w	r3, r7, #8
  40a4be:	4610      	mov	r0, r2
  40a4c0:	4619      	mov	r1, r3
  40a4c2:	22ff      	movs	r2, #255	; 0xff
  40a4c4:	4b61      	ldr	r3, [pc, #388]	; (40a64c <task_quinticHandler+0x264>)
  40a4c6:	4798      	blx	r3
  40a4c8:	4603      	mov	r3, r0
  40a4ca:	2b00      	cmp	r3, #0
  40a4cc:	f040 80af 	bne.w	40a62e <task_quinticHandler+0x246>
		{
			if(strncmp(buf, "00", 2) == 0)
  40a4d0:	f107 0308 	add.w	r3, r7, #8
  40a4d4:	4618      	mov	r0, r3
  40a4d6:	495e      	ldr	r1, [pc, #376]	; (40a650 <task_quinticHandler+0x268>)
  40a4d8:	2202      	movs	r2, #2
  40a4da:	4b5e      	ldr	r3, [pc, #376]	; (40a654 <task_quinticHandler+0x26c>)
  40a4dc:	4798      	blx	r3
  40a4de:	4603      	mov	r3, r0
  40a4e0:	2b00      	cmp	r3, #0
  40a4e2:	d103      	bne.n	40a4ec <task_quinticHandler+0x104>
			{
				index = 0;
  40a4e4:	2300      	movs	r3, #0
  40a4e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40a4ea:	e022      	b.n	40a532 <task_quinticHandler+0x14a>
			}
			else if(strncmp(buf, "11", 2) == 0)
  40a4ec:	f107 0308 	add.w	r3, r7, #8
  40a4f0:	4618      	mov	r0, r3
  40a4f2:	4959      	ldr	r1, [pc, #356]	; (40a658 <task_quinticHandler+0x270>)
  40a4f4:	2202      	movs	r2, #2
  40a4f6:	4b57      	ldr	r3, [pc, #348]	; (40a654 <task_quinticHandler+0x26c>)
  40a4f8:	4798      	blx	r3
  40a4fa:	4603      	mov	r3, r0
  40a4fc:	2b00      	cmp	r3, #0
  40a4fe:	d103      	bne.n	40a508 <task_quinticHandler+0x120>
			{
				index = 1;
  40a500:	2301      	movs	r3, #1
  40a502:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40a506:	e014      	b.n	40a532 <task_quinticHandler+0x14a>
			}
			else if(strncmp(buf, "22", 2) == 0)	
  40a508:	f107 0308 	add.w	r3, r7, #8
  40a50c:	4618      	mov	r0, r3
  40a50e:	4953      	ldr	r1, [pc, #332]	; (40a65c <task_quinticHandler+0x274>)
  40a510:	2202      	movs	r2, #2
  40a512:	4b50      	ldr	r3, [pc, #320]	; (40a654 <task_quinticHandler+0x26c>)
  40a514:	4798      	blx	r3
  40a516:	4603      	mov	r3, r0
  40a518:	2b00      	cmp	r3, #0
  40a51a:	d103      	bne.n	40a524 <task_quinticHandler+0x13c>
			{				
				index = 2;
  40a51c:	2302      	movs	r3, #2
  40a51e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40a522:	e006      	b.n	40a532 <task_quinticHandler+0x14a>
			}
			else
			{				
				//this is a corrupt packet, increment the count. 
				qConfig->corruptPacketCnt++;
  40a524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a528:	69db      	ldr	r3, [r3, #28]
  40a52a:	1c5a      	adds	r2, r3, #1
  40a52c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a530:	61da      	str	r2, [r3, #28]
				//vTaskDelay(10);
			}
			if(index >= 0 && index <= 2)
  40a532:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40a536:	2b00      	cmp	r3, #0
  40a538:	db79      	blt.n	40a62e <task_quinticHandler+0x246>
  40a53a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40a53e:	2b02      	cmp	r3, #2
  40a540:	dc75      	bgt.n	40a62e <task_quinticHandler+0x246>
			{
				packet.imuId = qConfig->imuArray[index]->imuId; 
  40a542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a546:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a54e:	681b      	ldr	r3, [r3, #0]
  40a550:	b2db      	uxtb	r3, r3
  40a552:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
				packet.imuIndex = packet.imuId; 
  40a556:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
  40a55a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
				qConfig->imuArray[index]->stats.packetCnt++; //increment the packets received count
  40a55e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a562:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a56a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40a56c:	3201      	adds	r2, #1
  40a56e:	625a      	str	r2, [r3, #36]	; 0x24
				timeNow = sgSysTickCount; 
  40a570:	4b32      	ldr	r3, [pc, #200]	; (40a63c <task_quinticHandler+0x254>)
  40a572:	681b      	ldr	r3, [r3, #0]
  40a574:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				//calculate the new running average packet time --> (average + (last packet received time - current Time)/2)
				qConfig->imuArray[index]->stats.avgPacketTime = (qConfig->imuArray[index]->stats.avgPacketTime + ( timeNow - qConfig->imuArray[index]->stats.lastPacketTime ))>>1;
  40a578:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a57c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a584:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
  40a588:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
  40a58c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40a590:	6b51      	ldr	r1, [r2, #52]	; 0x34
  40a592:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
  40a596:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
  40a59a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40a59e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40a5a0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
  40a5a4:	1a82      	subs	r2, r0, r2
  40a5a6:	440a      	add	r2, r1
  40a5a8:	0852      	lsrs	r2, r2, #1
  40a5aa:	635a      	str	r2, [r3, #52]	; 0x34
				qConfig->imuArray[index]->stats.lastPacketTime = timeNow; 
  40a5ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a5b0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a5b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
  40a5bc:	62da      	str	r2, [r3, #44]	; 0x2c
				packetReceivedMask |= (1<<qConfig->imuArray[index]->imuId); 
  40a5be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a5c2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a5ca:	681b      	ldr	r3, [r3, #0]
  40a5cc:	2201      	movs	r2, #1
  40a5ce:	fa02 f303 	lsl.w	r3, r2, r3
  40a5d2:	b29a      	uxth	r2, r3
  40a5d4:	4b22      	ldr	r3, [pc, #136]	; (40a660 <task_quinticHandler+0x278>)
  40a5d6:	881b      	ldrh	r3, [r3, #0]
  40a5d8:	b29b      	uxth	r3, r3
  40a5da:	4313      	orrs	r3, r2
  40a5dc:	b29b      	uxth	r3, r3
  40a5de:	b29a      	uxth	r2, r3
  40a5e0:	4b1f      	ldr	r3, [pc, #124]	; (40a660 <task_quinticHandler+0x278>)
  40a5e2:	801a      	strh	r2, [r3, #0]
				
				memcpy(packet.data,buf+2, 12+1);
  40a5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
  40a5e8:	1cda      	adds	r2, r3, #3
  40a5ea:	f107 0308 	add.w	r3, r7, #8
  40a5ee:	3302      	adds	r3, #2
  40a5f0:	4610      	mov	r0, r2
  40a5f2:	4619      	mov	r1, r3
  40a5f4:	220d      	movs	r2, #13
  40a5f6:	4b1b      	ldr	r3, [pc, #108]	; (40a664 <task_quinticHandler+0x27c>)
  40a5f8:	4798      	blx	r3
				
				if(queue_dataHandler != NULL)
  40a5fa:	4b1b      	ldr	r3, [pc, #108]	; (40a668 <task_quinticHandler+0x280>)
  40a5fc:	681b      	ldr	r3, [r3, #0]
  40a5fe:	2b00      	cmp	r3, #0
  40a600:	d015      	beq.n	40a62e <task_quinticHandler+0x246>
				{
					if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,5) != TRUE)
  40a602:	4b19      	ldr	r3, [pc, #100]	; (40a668 <task_quinticHandler+0x280>)
  40a604:	681a      	ldr	r2, [r3, #0]
  40a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
  40a60a:	4610      	mov	r0, r2
  40a60c:	4619      	mov	r1, r3
  40a60e:	2205      	movs	r2, #5
  40a610:	2300      	movs	r3, #0
  40a612:	4c16      	ldr	r4, [pc, #88]	; (40a66c <task_quinticHandler+0x284>)
  40a614:	47a0      	blx	r4
  40a616:	4603      	mov	r3, r0
  40a618:	2b01      	cmp	r3, #1
  40a61a:	d008      	beq.n	40a62e <task_quinticHandler+0x246>
					{
						//error failed to queue the packet.
						qConfig->imuArray[index]->stats.droppedPackets++; 
  40a61c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40a620:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40a624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40a62a:	3201      	adds	r2, #1
  40a62c:	629a      	str	r2, [r3, #40]	; 0x28
					}													
				}
				
			}
		}
		taskYIELD(); 
  40a62e:	4b10      	ldr	r3, [pc, #64]	; (40a670 <task_quinticHandler+0x288>)
  40a630:	4798      	blx	r3
			vTaskDelay(10); 	
		}
		#endif
					
		
	}	
  40a632:	e73f      	b.n	40a4b4 <task_quinticHandler+0xcc>
}
  40a634:	f507 77a2 	add.w	r7, r7, #324	; 0x144
  40a638:	46bd      	mov	sp, r7
  40a63a:	bd90      	pop	{r4, r7, pc}
  40a63c:	20002484 	.word	0x20002484
  40a640:	00408d75 	.word	0x00408d75
  40a644:	0040a9f5 	.word	0x0040a9f5
  40a648:	0040cfd5 	.word	0x0040cfd5
  40a64c:	00408de1 	.word	0x00408de1
  40a650:	00416ccc 	.word	0x00416ccc
  40a654:	0040d6bd 	.word	0x0040d6bd
  40a658:	00416cd0 	.word	0x00416cd0
  40a65c:	00416cd4 	.word	0x00416cd4
  40a660:	20001ce6 	.word	0x20001ce6
  40a664:	0040cea1 	.word	0x0040cea1
  40a668:	20001ce0 	.word	0x20001ce0
  40a66c:	00406501 	.word	0x00406501
  40a670:	0040624d 	.word	0x0040624d

0040a674 <task_quintic_startRecording>:
status_t task_quintic_startRecording(quinticConfiguration_t* qConfig)
{
  40a674:	b580      	push	{r7, lr}
  40a676:	b082      	sub	sp, #8
  40a678:	af00      	add	r7, sp, #0
  40a67a:	6078      	str	r0, [r7, #4]
	//send the start command. 	
	sendString(qConfig->uartDevice, "start\r\n");
  40a67c:	687b      	ldr	r3, [r7, #4]
  40a67e:	695b      	ldr	r3, [r3, #20]
  40a680:	4618      	mov	r0, r3
  40a682:	4904      	ldr	r1, [pc, #16]	; (40a694 <task_quintic_startRecording+0x20>)
  40a684:	4b04      	ldr	r3, [pc, #16]	; (40a698 <task_quintic_startRecording+0x24>)
  40a686:	4798      	blx	r3
	return STATUS_PASS; 
  40a688:	2300      	movs	r3, #0
}
  40a68a:	4618      	mov	r0, r3
  40a68c:	3708      	adds	r7, #8
  40a68e:	46bd      	mov	sp, r7
  40a690:	bd80      	pop	{r7, pc}
  40a692:	bf00      	nop
  40a694:	00416cd8 	.word	0x00416cd8
  40a698:	0040a6dd 	.word	0x0040a6dd

0040a69c <task_quintic_stopRecording>:

status_t task_quintic_stopRecording(quinticConfiguration_t* qConfig)
{
  40a69c:	b580      	push	{r7, lr}
  40a69e:	b082      	sub	sp, #8
  40a6a0:	af00      	add	r7, sp, #0
  40a6a2:	6078      	str	r0, [r7, #4]
	//send the stop
	sendString(qConfig->uartDevice, "stop\r\n");
  40a6a4:	687b      	ldr	r3, [r7, #4]
  40a6a6:	695b      	ldr	r3, [r3, #20]
  40a6a8:	4618      	mov	r0, r3
  40a6aa:	4908      	ldr	r1, [pc, #32]	; (40a6cc <task_quintic_stopRecording+0x30>)
  40a6ac:	4b08      	ldr	r3, [pc, #32]	; (40a6d0 <task_quintic_stopRecording+0x34>)
  40a6ae:	4798      	blx	r3
	//wait for a bit
	vTaskDelay(2);
  40a6b0:	2002      	movs	r0, #2
  40a6b2:	4b08      	ldr	r3, [pc, #32]	; (40a6d4 <task_quintic_stopRecording+0x38>)
  40a6b4:	4798      	blx	r3
	//flush the Rx buffer, it'll still have crap in it
	drv_uart_flushRx(qConfig->uartDevice);
  40a6b6:	687b      	ldr	r3, [r7, #4]
  40a6b8:	695b      	ldr	r3, [r3, #20]
  40a6ba:	4618      	mov	r0, r3
  40a6bc:	4b06      	ldr	r3, [pc, #24]	; (40a6d8 <task_quintic_stopRecording+0x3c>)
  40a6be:	4798      	blx	r3
	return STATUS_PASS;
  40a6c0:	2300      	movs	r3, #0
}
  40a6c2:	4618      	mov	r0, r3
  40a6c4:	3708      	adds	r7, #8
  40a6c6:	46bd      	mov	sp, r7
  40a6c8:	bd80      	pop	{r7, pc}
  40a6ca:	bf00      	nop
  40a6cc:	00416ce0 	.word	0x00416ce0
  40a6d0:	0040a6dd 	.word	0x0040a6dd
  40a6d4:	00406ba5 	.word	0x00406ba5
  40a6d8:	00408ec5 	.word	0x00408ec5

0040a6dc <sendString>:


//static functions

static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
  40a6dc:	b580      	push	{r7, lr}
  40a6de:	b084      	sub	sp, #16
  40a6e0:	af00      	add	r7, sp, #0
  40a6e2:	6078      	str	r0, [r7, #4]
  40a6e4:	6039      	str	r1, [r7, #0]
	int len = strlen(cmd); 
  40a6e6:	6838      	ldr	r0, [r7, #0]
  40a6e8:	4b0e      	ldr	r3, [pc, #56]	; (40a724 <sendString+0x48>)
  40a6ea:	4798      	blx	r3
  40a6ec:	4603      	mov	r3, r0
  40a6ee:	60bb      	str	r3, [r7, #8]
	int i = 0; 
  40a6f0:	2300      	movs	r3, #0
  40a6f2:	60fb      	str	r3, [r7, #12]
	for(;i<len;)
  40a6f4:	e00d      	b.n	40a712 <sendString+0x36>
	{
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
  40a6f6:	68fb      	ldr	r3, [r7, #12]
  40a6f8:	683a      	ldr	r2, [r7, #0]
  40a6fa:	4413      	add	r3, r2
  40a6fc:	781b      	ldrb	r3, [r3, #0]
  40a6fe:	6878      	ldr	r0, [r7, #4]
  40a700:	4619      	mov	r1, r3
  40a702:	4b09      	ldr	r3, [pc, #36]	; (40a728 <sendString+0x4c>)
  40a704:	4798      	blx	r3
  40a706:	4603      	mov	r3, r0
  40a708:	2b00      	cmp	r3, #0
  40a70a:	d102      	bne.n	40a712 <sendString+0x36>
		{
			i++;
  40a70c:	68fb      	ldr	r3, [r7, #12]
  40a70e:	3301      	adds	r3, #1
  40a710:	60fb      	str	r3, [r7, #12]

static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
	int len = strlen(cmd); 
	int i = 0; 
	for(;i<len;)
  40a712:	68fa      	ldr	r2, [r7, #12]
  40a714:	68bb      	ldr	r3, [r7, #8]
  40a716:	429a      	cmp	r2, r3
  40a718:	dbed      	blt.n	40a6f6 <sendString+0x1a>
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
		{
			i++;
		}
	}
}
  40a71a:	4618      	mov	r0, r3
  40a71c:	3710      	adds	r7, #16
  40a71e:	46bd      	mov	sp, r7
  40a720:	bd80      	pop	{r7, pc}
  40a722:	bf00      	nop
  40a724:	0040d65d 	.word	0x0040d65d
  40a728:	00408bc9 	.word	0x00408bc9

0040a72c <getAck>:

static status_t getAck(drv_uart_config_t* uartConfig)
{
  40a72c:	b580      	push	{r7, lr}
  40a72e:	b0c2      	sub	sp, #264	; 0x108
  40a730:	af00      	add	r7, sp, #0
  40a732:	1d3b      	adds	r3, r7, #4
  40a734:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_PASS; 
  40a736:	2300      	movs	r3, #0
  40a738:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; //should move to static buffer for each quintic?
  40a73c:	f107 0308 	add.w	r3, r7, #8
  40a740:	461a      	mov	r2, r3
  40a742:	23ff      	movs	r3, #255	; 0xff
  40a744:	4610      	mov	r0, r2
  40a746:	2100      	movs	r1, #0
  40a748:	461a      	mov	r2, r3
  40a74a:	4b12      	ldr	r3, [pc, #72]	; (40a794 <getAck+0x68>)
  40a74c:	4798      	blx	r3
	result = drv_uart_getline(uartConfig, buf,CMD_RESPONSE_BUF_SIZE);
  40a74e:	1d3a      	adds	r2, r7, #4
  40a750:	f107 0308 	add.w	r3, r7, #8
  40a754:	6810      	ldr	r0, [r2, #0]
  40a756:	4619      	mov	r1, r3
  40a758:	22ff      	movs	r2, #255	; 0xff
  40a75a:	4b0f      	ldr	r3, [pc, #60]	; (40a798 <getAck+0x6c>)
  40a75c:	4798      	blx	r3
  40a75e:	4603      	mov	r3, r0
  40a760:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if(result == STATUS_PASS)
  40a764:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
  40a768:	2b00      	cmp	r3, #0
  40a76a:	d10b      	bne.n	40a784 <getAck+0x58>
	{
		if(strcmp(buf,QCMD_QN_ACK) != 0)
  40a76c:	f107 0308 	add.w	r3, r7, #8
  40a770:	4618      	mov	r0, r3
  40a772:	490a      	ldr	r1, [pc, #40]	; (40a79c <getAck+0x70>)
  40a774:	4b0a      	ldr	r3, [pc, #40]	; (40a7a0 <getAck+0x74>)
  40a776:	4798      	blx	r3
  40a778:	4603      	mov	r3, r0
  40a77a:	2b00      	cmp	r3, #0
  40a77c:	d002      	beq.n	40a784 <getAck+0x58>
		{
			result = STATUS_FAIL;
  40a77e:	2301      	movs	r3, #1
  40a780:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		}
	}
	return result; 
  40a784:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
  40a788:	4618      	mov	r0, r3
  40a78a:	f507 7784 	add.w	r7, r7, #264	; 0x108
  40a78e:	46bd      	mov	sp, r7
  40a790:	bd80      	pop	{r7, pc}
  40a792:	bf00      	nop
  40a794:	0040cfd5 	.word	0x0040cfd5
  40a798:	00408de1 	.word	0x00408de1
  40a79c:	00416ce8 	.word	0x00416ce8
  40a7a0:	0040d385 	.word	0x0040d385

0040a7a4 <scanForImus>:
			break;
		}
	}
}
static status_t scanForImus(quinticConfiguration_t* qConfig)
{
  40a7a4:	b580      	push	{r7, lr}
  40a7a6:	b0ae      	sub	sp, #184	; 0xb8
  40a7a8:	af00      	add	r7, sp, #0
  40a7aa:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL; 
  40a7ac:	2301      	movs	r3, #1
  40a7ae:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0}; 
  40a7b2:	f107 020c 	add.w	r2, r7, #12
  40a7b6:	2396      	movs	r3, #150	; 0x96
  40a7b8:	4610      	mov	r0, r2
  40a7ba:	2100      	movs	r1, #0
  40a7bc:	461a      	mov	r2, r3
  40a7be:	4b40      	ldr	r3, [pc, #256]	; (40a8c0 <scanForImus+0x11c>)
  40a7c0:	4798      	blx	r3
	int i = 0;	
  40a7c2:	2300      	movs	r3, #0
  40a7c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf; 
  40a7c8:	f107 030c 	add.w	r3, r7, #12
  40a7cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int vScanLoopCount = 0;
  40a7d0:	2300      	movs	r3, #0
  40a7d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int presentImuCount = 0;
  40a7d6:	2300      	movs	r3, #0
  40a7d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	do
	{
		sendString(qConfig->uartDevice,QCMD_SCAN); //send the scan command
  40a7dc:	687b      	ldr	r3, [r7, #4]
  40a7de:	695b      	ldr	r3, [r3, #20]
  40a7e0:	4618      	mov	r0, r3
  40a7e2:	4938      	ldr	r1, [pc, #224]	; (40a8c4 <scanForImus+0x120>)
  40a7e4:	4b38      	ldr	r3, [pc, #224]	; (40a8c8 <scanForImus+0x124>)
  40a7e6:	4798      	blx	r3
		vTaskDelay(1);
  40a7e8:	2001      	movs	r0, #1
  40a7ea:	4b38      	ldr	r3, [pc, #224]	; (40a8cc <scanForImus+0x128>)
  40a7ec:	4798      	blx	r3
		if(drv_uart_getline(qConfig->uartDevice,buf, sizeof(buf)) == STATUS_PASS)
  40a7ee:	687b      	ldr	r3, [r7, #4]
  40a7f0:	695a      	ldr	r2, [r3, #20]
  40a7f2:	f107 030c 	add.w	r3, r7, #12
  40a7f6:	4610      	mov	r0, r2
  40a7f8:	4619      	mov	r1, r3
  40a7fa:	2296      	movs	r2, #150	; 0x96
  40a7fc:	4b34      	ldr	r3, [pc, #208]	; (40a8d0 <scanForImus+0x12c>)
  40a7fe:	4798      	blx	r3
  40a800:	4603      	mov	r3, r0
  40a802:	2b00      	cmp	r3, #0
  40a804:	d14a      	bne.n	40a89c <scanForImus+0xf8>
		{
			sendString(&uart0Config,buf);
  40a806:	f107 030c 	add.w	r3, r7, #12
  40a80a:	4832      	ldr	r0, [pc, #200]	; (40a8d4 <scanForImus+0x130>)
  40a80c:	4619      	mov	r1, r3
  40a80e:	4b2e      	ldr	r3, [pc, #184]	; (40a8c8 <scanForImus+0x124>)
  40a810:	4798      	blx	r3
			if(strncmp(buf,"ScanResp",8) == 0)
  40a812:	f107 030c 	add.w	r3, r7, #12
  40a816:	4618      	mov	r0, r3
  40a818:	492f      	ldr	r1, [pc, #188]	; (40a8d8 <scanForImus+0x134>)
  40a81a:	2208      	movs	r2, #8
  40a81c:	4b2f      	ldr	r3, [pc, #188]	; (40a8dc <scanForImus+0x138>)
  40a81e:	4798      	blx	r3
  40a820:	4603      	mov	r3, r0
  40a822:	2b00      	cmp	r3, #0
  40a824:	d13a      	bne.n	40a89c <scanForImus+0xf8>
			{
				bufPtr = buf + 8; 
  40a826:	f107 030c 	add.w	r3, r7, #12
  40a82a:	3308      	adds	r3, #8
  40a82c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				presentImuCount = 0;
  40a830:	2300      	movs	r3, #0
  40a832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				for(i=0;i<5;i++)
  40a836:	2300      	movs	r3, #0
  40a838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40a83c:	e020      	b.n	40a880 <scanForImus+0xdc>
				{
					if(bufPtr[i] == '1')
  40a83e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a842:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
  40a846:	4413      	add	r3, r2
  40a848:	781b      	ldrb	r3, [r3, #0]
  40a84a:	2b31      	cmp	r3, #49	; 0x31
  40a84c:	d10c      	bne.n	40a868 <scanForImus+0xc4>
					{
						qConfig->imuArray[i]->imuPresent = 1; 	
  40a84e:	687b      	ldr	r3, [r7, #4]
  40a850:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a858:	2201      	movs	r2, #1
  40a85a:	61da      	str	r2, [r3, #28]
						presentImuCount++;					
  40a85c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  40a860:	3301      	adds	r3, #1
  40a862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  40a866:	e006      	b.n	40a876 <scanForImus+0xd2>
					}
					else
					{
						qConfig->imuArray[i]->imuPresent = 0; 
  40a868:	687b      	ldr	r3, [r7, #4]
  40a86a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a872:	2200      	movs	r2, #0
  40a874:	61da      	str	r2, [r3, #28]
			sendString(&uart0Config,buf);
			if(strncmp(buf,"ScanResp",8) == 0)
			{
				bufPtr = buf + 8; 
				presentImuCount = 0;
				for(i=0;i<5;i++)
  40a876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a87a:	3301      	adds	r3, #1
  40a87c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40a880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a884:	2b04      	cmp	r3, #4
  40a886:	ddda      	ble.n	40a83e <scanForImus+0x9a>
					else
					{
						qConfig->imuArray[i]->imuPresent = 0; 
					}			
				}
				if(presentImuCount >= qConfig->expectedNumberOfNods)
  40a888:	687b      	ldr	r3, [r7, #4]
  40a88a:	699a      	ldr	r2, [r3, #24]
  40a88c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  40a890:	429a      	cmp	r2, r3
  40a892:	dc03      	bgt.n	40a89c <scanForImus+0xf8>
				{
					status = STATUS_PASS; 
  40a894:	2300      	movs	r3, #0
  40a896:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					break; 
  40a89a:	e00b      	b.n	40a8b4 <scanForImus+0x110>
				}
			}
		}		
		vTaskDelay(10);
  40a89c:	200a      	movs	r0, #10
  40a89e:	4b0b      	ldr	r3, [pc, #44]	; (40a8cc <scanForImus+0x128>)
  40a8a0:	4798      	blx	r3
		vScanLoopCount++;
  40a8a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40a8a6:	3301      	adds	r3, #1
  40a8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	}while(vScanLoopCount<=QN_MAX_CONN);	
  40a8ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40a8b0:	2b05      	cmp	r3, #5
  40a8b2:	dd93      	ble.n	40a7dc <scanForImus+0x38>
	return status; 
  40a8b4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  40a8b8:	4618      	mov	r0, r3
  40a8ba:	37b8      	adds	r7, #184	; 0xb8
  40a8bc:	46bd      	mov	sp, r7
  40a8be:	bd80      	pop	{r7, pc}
  40a8c0:	0040cfd5 	.word	0x0040cfd5
  40a8c4:	00416d00 	.word	0x00416d00
  40a8c8:	0040a6dd 	.word	0x0040a6dd
  40a8cc:	00406ba5 	.word	0x00406ba5
  40a8d0:	00408de1 	.word	0x00408de1
  40a8d4:	2000004c 	.word	0x2000004c
  40a8d8:	00416d08 	.word	0x00416d08
  40a8dc:	0040d6bd 	.word	0x0040d6bd

0040a8e0 <connectToImus>:

static status_t connectToImus(quinticConfiguration_t* qConfig)
{
  40a8e0:	b580      	push	{r7, lr}
  40a8e2:	b0ae      	sub	sp, #184	; 0xb8
  40a8e4:	af00      	add	r7, sp, #0
  40a8e6:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  40a8e8:	2301      	movs	r3, #1
  40a8ea:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0};
  40a8ee:	f107 020c 	add.w	r2, r7, #12
  40a8f2:	2396      	movs	r3, #150	; 0x96
  40a8f4:	4610      	mov	r0, r2
  40a8f6:	2100      	movs	r1, #0
  40a8f8:	461a      	mov	r2, r3
  40a8fa:	4b37      	ldr	r3, [pc, #220]	; (40a9d8 <connectToImus+0xf8>)
  40a8fc:	4798      	blx	r3
	int i = 0;
  40a8fe:	2300      	movs	r3, #0
  40a900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf;
  40a904:	f107 030c 	add.w	r3, r7, #12
  40a908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int vConnectionLoopCount = 0;
  40a90c:	2300      	movs	r3, #0
  40a90e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int connectedImuCount = 0;
  40a912:	2300      	movs	r3, #0
  40a914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	sendString(qConfig->uartDevice,QCMD_CONNECT); //send the connect command
  40a918:	687b      	ldr	r3, [r7, #4]
  40a91a:	695b      	ldr	r3, [r3, #20]
  40a91c:	4618      	mov	r0, r3
  40a91e:	492f      	ldr	r1, [pc, #188]	; (40a9dc <connectToImus+0xfc>)
  40a920:	4b2f      	ldr	r3, [pc, #188]	; (40a9e0 <connectToImus+0x100>)
  40a922:	4798      	blx	r3
	vTaskDelay(1);
  40a924:	2001      	movs	r0, #1
  40a926:	4b2f      	ldr	r3, [pc, #188]	; (40a9e4 <connectToImus+0x104>)
  40a928:	4798      	blx	r3
	if(drv_uart_getline(qConfig->uartDevice,buf, sizeof(buf)) == STATUS_PASS)
  40a92a:	687b      	ldr	r3, [r7, #4]
  40a92c:	695a      	ldr	r2, [r3, #20]
  40a92e:	f107 030c 	add.w	r3, r7, #12
  40a932:	4610      	mov	r0, r2
  40a934:	4619      	mov	r1, r3
  40a936:	2296      	movs	r2, #150	; 0x96
  40a938:	4b2b      	ldr	r3, [pc, #172]	; (40a9e8 <connectToImus+0x108>)
  40a93a:	4798      	blx	r3
  40a93c:	4603      	mov	r3, r0
  40a93e:	2b00      	cmp	r3, #0
  40a940:	d143      	bne.n	40a9ca <connectToImus+0xea>
	{
		if(strncmp(buf,"ConnResp",8) == 0)
  40a942:	f107 030c 	add.w	r3, r7, #12
  40a946:	4618      	mov	r0, r3
  40a948:	4928      	ldr	r1, [pc, #160]	; (40a9ec <connectToImus+0x10c>)
  40a94a:	2208      	movs	r2, #8
  40a94c:	4b28      	ldr	r3, [pc, #160]	; (40a9f0 <connectToImus+0x110>)
  40a94e:	4798      	blx	r3
  40a950:	4603      	mov	r3, r0
  40a952:	2b00      	cmp	r3, #0
  40a954:	d139      	bne.n	40a9ca <connectToImus+0xea>
		{
			bufPtr = buf + 8;
  40a956:	f107 030c 	add.w	r3, r7, #12
  40a95a:	3308      	adds	r3, #8
  40a95c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			connectedImuCount = 0;
  40a960:	2300      	movs	r3, #0
  40a962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			for(i=0;i<5;i++)
  40a966:	2300      	movs	r3, #0
  40a968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40a96c:	e020      	b.n	40a9b0 <connectToImus+0xd0>
			{
				if(bufPtr[i] == '1')
  40a96e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
  40a976:	4413      	add	r3, r2
  40a978:	781b      	ldrb	r3, [r3, #0]
  40a97a:	2b31      	cmp	r3, #49	; 0x31
  40a97c:	d10c      	bne.n	40a998 <connectToImus+0xb8>
				{
					qConfig->imuArray[i]->imuConnected = 1;
  40a97e:	687b      	ldr	r3, [r7, #4]
  40a980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a988:	2201      	movs	r2, #1
  40a98a:	621a      	str	r2, [r3, #32]
					connectedImuCount++;
  40a98c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40a990:	3301      	adds	r3, #1
  40a992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  40a996:	e006      	b.n	40a9a6 <connectToImus+0xc6>
				}
				else
				{
					qConfig->imuArray[i]->imuConnected = 0;
  40a998:	687b      	ldr	r3, [r7, #4]
  40a99a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40a99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40a9a2:	2200      	movs	r2, #0
  40a9a4:	621a      	str	r2, [r3, #32]
	{
		if(strncmp(buf,"ConnResp",8) == 0)
		{
			bufPtr = buf + 8;
			connectedImuCount = 0;
			for(i=0;i<5;i++)
  40a9a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a9aa:	3301      	adds	r3, #1
  40a9ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40a9b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40a9b4:	2b04      	cmp	r3, #4
  40a9b6:	ddda      	ble.n	40a96e <connectToImus+0x8e>
				else
				{
					qConfig->imuArray[i]->imuConnected = 0;
				}
			}
			if(connectedImuCount >= qConfig->expectedNumberOfNods)
  40a9b8:	687b      	ldr	r3, [r7, #4]
  40a9ba:	699a      	ldr	r2, [r3, #24]
  40a9bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40a9c0:	429a      	cmp	r2, r3
  40a9c2:	dc02      	bgt.n	40a9ca <connectToImus+0xea>
			{
				status = STATUS_PASS;
  40a9c4:	2300      	movs	r3, #0
  40a9c6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			}
		}
	}
	return status;
  40a9ca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  40a9ce:	4618      	mov	r0, r3
  40a9d0:	37b8      	adds	r7, #184	; 0xb8
  40a9d2:	46bd      	mov	sp, r7
  40a9d4:	bd80      	pop	{r7, pc}
  40a9d6:	bf00      	nop
  40a9d8:	0040cfd5 	.word	0x0040cfd5
  40a9dc:	00416d14 	.word	0x00416d14
  40a9e0:	0040a6dd 	.word	0x0040a6dd
  40a9e4:	00406ba5 	.word	0x00406ba5
  40a9e8:	00408de1 	.word	0x00408de1
  40a9ec:	00416d20 	.word	0x00416d20
  40a9f0:	0040d6bd 	.word	0x0040d6bd

0040a9f4 <initializeImus>:

static status_t initializeImus(quinticConfiguration_t* qConfig)
{
  40a9f4:	b590      	push	{r4, r7, lr}
  40a9f6:	b087      	sub	sp, #28
  40a9f8:	af00      	add	r7, sp, #0
  40a9fa:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS; 
  40a9fc:	2300      	movs	r3, #0
  40a9fe:	75fb      	strb	r3, [r7, #23]
	status_t scanSuccess=STATUS_FAIL, connSuccess=STATUS_FAIL;
  40aa00:	2301      	movs	r3, #1
  40aa02:	75bb      	strb	r3, [r7, #22]
  40aa04:	2301      	movs	r3, #1
  40aa06:	757b      	strb	r3, [r7, #21]
	int vScanLoopCount=0;
  40aa08:	2300      	movs	r3, #0
  40aa0a:	60fb      	str	r3, [r7, #12]
	vTaskDelay(1000); 
  40aa0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40aa10:	4b5a      	ldr	r3, [pc, #360]	; (40ab7c <initializeImus+0x188>)
  40aa12:	4798      	blx	r3
	//reset the quintic here...
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  40aa14:	687b      	ldr	r3, [r7, #4]
  40aa16:	695b      	ldr	r3, [r3, #20]
  40aa18:	4618      	mov	r0, r3
  40aa1a:	4b59      	ldr	r3, [pc, #356]	; (40ab80 <initializeImus+0x18c>)
  40aa1c:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_LOW);
  40aa1e:	687b      	ldr	r3, [r7, #4]
  40aa20:	f893 3020 	ldrb.w	r3, [r3, #32]
  40aa24:	4618      	mov	r0, r3
  40aa26:	2100      	movs	r1, #0
  40aa28:	4b56      	ldr	r3, [pc, #344]	; (40ab84 <initializeImus+0x190>)
  40aa2a:	4798      	blx	r3
	vTaskDelay(100); 
  40aa2c:	2064      	movs	r0, #100	; 0x64
  40aa2e:	4b53      	ldr	r3, [pc, #332]	; (40ab7c <initializeImus+0x188>)
  40aa30:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_HIGH); 
  40aa32:	687b      	ldr	r3, [r7, #4]
  40aa34:	f893 3020 	ldrb.w	r3, [r3, #32]
  40aa38:	4618      	mov	r0, r3
  40aa3a:	2101      	movs	r1, #1
  40aa3c:	4b51      	ldr	r3, [pc, #324]	; (40ab84 <initializeImus+0x190>)
  40aa3e:	4798      	blx	r3
	//wait for first ACK	
	result = getAck(qConfig->uartDevice); 
  40aa40:	687b      	ldr	r3, [r7, #4]
  40aa42:	695b      	ldr	r3, [r3, #20]
  40aa44:	4618      	mov	r0, r3
  40aa46:	4b50      	ldr	r3, [pc, #320]	; (40ab88 <initializeImus+0x194>)
  40aa48:	4798      	blx	r3
  40aa4a:	4603      	mov	r3, r0
  40aa4c:	75fb      	strb	r3, [r7, #23]
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  40aa4e:	687b      	ldr	r3, [r7, #4]
  40aa50:	695b      	ldr	r3, [r3, #20]
  40aa52:	4618      	mov	r0, r3
  40aa54:	4b4a      	ldr	r3, [pc, #296]	; (40ab80 <initializeImus+0x18c>)
  40aa56:	4798      	blx	r3
	vTaskDelay(10); 
  40aa58:	200a      	movs	r0, #10
  40aa5a:	4b48      	ldr	r3, [pc, #288]	; (40ab7c <initializeImus+0x188>)
  40aa5c:	4798      	blx	r3
	//get quintic ready to receive the 	
	sendString(qConfig->uartDevice,QCMD_BEGIN); 
  40aa5e:	687b      	ldr	r3, [r7, #4]
  40aa60:	695b      	ldr	r3, [r3, #20]
  40aa62:	4618      	mov	r0, r3
  40aa64:	4949      	ldr	r1, [pc, #292]	; (40ab8c <initializeImus+0x198>)
  40aa66:	4b4a      	ldr	r3, [pc, #296]	; (40ab90 <initializeImus+0x19c>)
  40aa68:	4798      	blx	r3
	vTaskDelay(10); 
  40aa6a:	200a      	movs	r0, #10
  40aa6c:	4b43      	ldr	r3, [pc, #268]	; (40ab7c <initializeImus+0x188>)
  40aa6e:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice); 
  40aa70:	687b      	ldr	r3, [r7, #4]
  40aa72:	695b      	ldr	r3, [r3, #20]
  40aa74:	4618      	mov	r0, r3
  40aa76:	4b44      	ldr	r3, [pc, #272]	; (40ab88 <initializeImus+0x194>)
  40aa78:	4798      	blx	r3
  40aa7a:	4603      	mov	r3, r0
  40aa7c:	461a      	mov	r2, r3
  40aa7e:	7dfb      	ldrb	r3, [r7, #23]
  40aa80:	4313      	orrs	r3, r2
  40aa82:	75fb      	strb	r3, [r7, #23]
	
	//send MAC addresses for each NOD
	int i = 0;
  40aa84:	2300      	movs	r3, #0
  40aa86:	613b      	str	r3, [r7, #16]
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  40aa88:	2300      	movs	r3, #0
  40aa8a:	613b      	str	r3, [r7, #16]
  40aa8c:	e01a      	b.n	40aac4 <initializeImus+0xd0>
	{
		sendString(qConfig->uartDevice,qConfig->imuArray[i]->macAddress); 
  40aa8e:	687b      	ldr	r3, [r7, #4]
  40aa90:	695a      	ldr	r2, [r3, #20]
  40aa92:	687b      	ldr	r3, [r7, #4]
  40aa94:	6939      	ldr	r1, [r7, #16]
  40aa96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40aa9a:	3304      	adds	r3, #4
  40aa9c:	4610      	mov	r0, r2
  40aa9e:	4619      	mov	r1, r3
  40aaa0:	4b3b      	ldr	r3, [pc, #236]	; (40ab90 <initializeImus+0x19c>)
  40aaa2:	4798      	blx	r3
		vTaskDelay(10); 
  40aaa4:	200a      	movs	r0, #10
  40aaa6:	4b35      	ldr	r3, [pc, #212]	; (40ab7c <initializeImus+0x188>)
  40aaa8:	4798      	blx	r3
		result |= getAck(qConfig->uartDevice);	
  40aaaa:	687b      	ldr	r3, [r7, #4]
  40aaac:	695b      	ldr	r3, [r3, #20]
  40aaae:	4618      	mov	r0, r3
  40aab0:	4b35      	ldr	r3, [pc, #212]	; (40ab88 <initializeImus+0x194>)
  40aab2:	4798      	blx	r3
  40aab4:	4603      	mov	r3, r0
  40aab6:	461a      	mov	r2, r3
  40aab8:	7dfb      	ldrb	r3, [r7, #23]
  40aaba:	4313      	orrs	r3, r2
  40aabc:	75fb      	strb	r3, [r7, #23]
	vTaskDelay(10); 
	result |= getAck(qConfig->uartDevice); 
	
	//send MAC addresses for each NOD
	int i = 0;
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  40aabe:	693b      	ldr	r3, [r7, #16]
  40aac0:	3301      	adds	r3, #1
  40aac2:	613b      	str	r3, [r7, #16]
  40aac4:	687b      	ldr	r3, [r7, #4]
  40aac6:	699a      	ldr	r2, [r3, #24]
  40aac8:	693b      	ldr	r3, [r7, #16]
  40aaca:	429a      	cmp	r2, r3
  40aacc:	dcdf      	bgt.n	40aa8e <initializeImus+0x9a>
	{
		sendString(qConfig->uartDevice,qConfig->imuArray[i]->macAddress); 
		vTaskDelay(10); 
		result |= getAck(qConfig->uartDevice);	
	}
	sendString(qConfig->uartDevice,"end\r\n");
  40aace:	687b      	ldr	r3, [r7, #4]
  40aad0:	695b      	ldr	r3, [r3, #20]
  40aad2:	4618      	mov	r0, r3
  40aad4:	492f      	ldr	r1, [pc, #188]	; (40ab94 <initializeImus+0x1a0>)
  40aad6:	4b2e      	ldr	r3, [pc, #184]	; (40ab90 <initializeImus+0x19c>)
  40aad8:	4798      	blx	r3
	vTaskDelay(10); 
  40aada:	200a      	movs	r0, #10
  40aadc:	4b27      	ldr	r3, [pc, #156]	; (40ab7c <initializeImus+0x188>)
  40aade:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice); 
  40aae0:	687b      	ldr	r3, [r7, #4]
  40aae2:	695b      	ldr	r3, [r3, #20]
  40aae4:	4618      	mov	r0, r3
  40aae6:	4b28      	ldr	r3, [pc, #160]	; (40ab88 <initializeImus+0x194>)
  40aae8:	4798      	blx	r3
  40aaea:	4603      	mov	r3, r0
  40aaec:	461a      	mov	r2, r3
  40aaee:	7dfb      	ldrb	r3, [r7, #23]
  40aaf0:	4313      	orrs	r3, r2
  40aaf2:	75fb      	strb	r3, [r7, #23]
	scanSuccess = scanForImus(qConfig); 	
  40aaf4:	6878      	ldr	r0, [r7, #4]
  40aaf6:	4b28      	ldr	r3, [pc, #160]	; (40ab98 <initializeImus+0x1a4>)
  40aaf8:	4798      	blx	r3
  40aafa:	4603      	mov	r3, r0
  40aafc:	75bb      	strb	r3, [r7, #22]
	if(scanSuccess == STATUS_PASS)
  40aafe:	7dbb      	ldrb	r3, [r7, #22]
  40ab00:	2b00      	cmp	r3, #0
  40ab02:	d104      	bne.n	40ab0e <initializeImus+0x11a>
	{
		connSuccess = connectToImus(qConfig); 
  40ab04:	6878      	ldr	r0, [r7, #4]
  40ab06:	4b25      	ldr	r3, [pc, #148]	; (40ab9c <initializeImus+0x1a8>)
  40ab08:	4798      	blx	r3
  40ab0a:	4603      	mov	r3, r0
  40ab0c:	757b      	strb	r3, [r7, #21]
	}
	if(connSuccess != STATUS_PASS)
  40ab0e:	7d7b      	ldrb	r3, [r7, #21]
  40ab10:	2b00      	cmp	r3, #0
  40ab12:	d00c      	beq.n	40ab2e <initializeImus+0x13a>
	{
		scanSuccess = scanForImus(qConfig);
  40ab14:	6878      	ldr	r0, [r7, #4]
  40ab16:	4b20      	ldr	r3, [pc, #128]	; (40ab98 <initializeImus+0x1a4>)
  40ab18:	4798      	blx	r3
  40ab1a:	4603      	mov	r3, r0
  40ab1c:	75bb      	strb	r3, [r7, #22]
		if(scanSuccess == STATUS_PASS)
  40ab1e:	7dbb      	ldrb	r3, [r7, #22]
  40ab20:	2b00      	cmp	r3, #0
  40ab22:	d104      	bne.n	40ab2e <initializeImus+0x13a>
		{
			connSuccess = connectToImus(qConfig);
  40ab24:	6878      	ldr	r0, [r7, #4]
  40ab26:	4b1d      	ldr	r3, [pc, #116]	; (40ab9c <initializeImus+0x1a8>)
  40ab28:	4798      	blx	r3
  40ab2a:	4603      	mov	r3, r0
  40ab2c:	757b      	strb	r3, [r7, #21]
		}
	}
	if(scanSuccess == STATUS_PASS && connSuccess == STATUS_PASS)
  40ab2e:	7dbb      	ldrb	r3, [r7, #22]
  40ab30:	2b00      	cmp	r3, #0
  40ab32:	d112      	bne.n	40ab5a <initializeImus+0x166>
  40ab34:	7d7b      	ldrb	r3, [r7, #21]
  40ab36:	2b00      	cmp	r3, #0
  40ab38:	d10f      	bne.n	40ab5a <initializeImus+0x166>
	{
		qConfig->isinit = true; 
  40ab3a:	687b      	ldr	r3, [r7, #4]
  40ab3c:	2201      	movs	r2, #1
  40ab3e:	625a      	str	r2, [r3, #36]	; 0x24
		printf("connected to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);		
  40ab40:	687b      	ldr	r3, [r7, #4]
  40ab42:	681b      	ldr	r3, [r3, #0]
  40ab44:	6819      	ldr	r1, [r3, #0]
  40ab46:	687b      	ldr	r3, [r7, #4]
  40ab48:	685b      	ldr	r3, [r3, #4]
  40ab4a:	681a      	ldr	r2, [r3, #0]
  40ab4c:	687b      	ldr	r3, [r7, #4]
  40ab4e:	689b      	ldr	r3, [r3, #8]
  40ab50:	681b      	ldr	r3, [r3, #0]
  40ab52:	4813      	ldr	r0, [pc, #76]	; (40aba0 <initializeImus+0x1ac>)
  40ab54:	4c13      	ldr	r4, [pc, #76]	; (40aba4 <initializeImus+0x1b0>)
  40ab56:	47a0      	blx	r4
  40ab58:	e00b      	b.n	40ab72 <initializeImus+0x17e>
	}
	else
	{
		printf("Failed connection to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);		
  40ab5a:	687b      	ldr	r3, [r7, #4]
  40ab5c:	681b      	ldr	r3, [r3, #0]
  40ab5e:	6819      	ldr	r1, [r3, #0]
  40ab60:	687b      	ldr	r3, [r7, #4]
  40ab62:	685b      	ldr	r3, [r3, #4]
  40ab64:	681a      	ldr	r2, [r3, #0]
  40ab66:	687b      	ldr	r3, [r7, #4]
  40ab68:	689b      	ldr	r3, [r3, #8]
  40ab6a:	681b      	ldr	r3, [r3, #0]
  40ab6c:	480e      	ldr	r0, [pc, #56]	; (40aba8 <initializeImus+0x1b4>)
  40ab6e:	4c0d      	ldr	r4, [pc, #52]	; (40aba4 <initializeImus+0x1b0>)
  40ab70:	47a0      	blx	r4
	}
	
	//return the result; 
	return result; 
  40ab72:	7dfb      	ldrb	r3, [r7, #23]

  40ab74:	4618      	mov	r0, r3
  40ab76:	371c      	adds	r7, #28
  40ab78:	46bd      	mov	sp, r7
  40ab7a:	bd90      	pop	{r4, r7, pc}
  40ab7c:	00406ba5 	.word	0x00406ba5
  40ab80:	00408ec5 	.word	0x00408ec5
  40ab84:	00408265 	.word	0x00408265
  40ab88:	0040a72d 	.word	0x0040a72d
  40ab8c:	00416d2c 	.word	0x00416d2c
  40ab90:	0040a6dd 	.word	0x0040a6dd
  40ab94:	00416d34 	.word	0x00416d34
  40ab98:	0040a7a5 	.word	0x0040a7a5
  40ab9c:	0040a8e1 	.word	0x0040a8e1
  40aba0:	00416d3c 	.word	0x00416d3c
  40aba4:	0040c921 	.word	0x0040c921
  40aba8:	00416d5c 	.word	0x00416d5c

0040abac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40abac:	b580      	push	{r7, lr}
  40abae:	b082      	sub	sp, #8
  40abb0:	af00      	add	r7, sp, #0
  40abb2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40abb4:	687b      	ldr	r3, [r7, #4]
  40abb6:	2b07      	cmp	r3, #7
  40abb8:	d830      	bhi.n	40ac1c <osc_enable+0x70>
  40abba:	a201      	add	r2, pc, #4	; (adr r2, 40abc0 <osc_enable+0x14>)
  40abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40abc0:	0040ac1d 	.word	0x0040ac1d
  40abc4:	0040abe1 	.word	0x0040abe1
  40abc8:	0040abe9 	.word	0x0040abe9
  40abcc:	0040abf1 	.word	0x0040abf1
  40abd0:	0040abf9 	.word	0x0040abf9
  40abd4:	0040ac01 	.word	0x0040ac01
  40abd8:	0040ac09 	.word	0x0040ac09
  40abdc:	0040ac13 	.word	0x0040ac13
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40abe0:	2000      	movs	r0, #0
  40abe2:	4b10      	ldr	r3, [pc, #64]	; (40ac24 <osc_enable+0x78>)
  40abe4:	4798      	blx	r3
		break;
  40abe6:	e019      	b.n	40ac1c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40abe8:	2001      	movs	r0, #1
  40abea:	4b0e      	ldr	r3, [pc, #56]	; (40ac24 <osc_enable+0x78>)
  40abec:	4798      	blx	r3
		break;
  40abee:	e015      	b.n	40ac1c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40abf0:	2000      	movs	r0, #0
  40abf2:	4b0d      	ldr	r3, [pc, #52]	; (40ac28 <osc_enable+0x7c>)
  40abf4:	4798      	blx	r3
		break;
  40abf6:	e011      	b.n	40ac1c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40abf8:	2010      	movs	r0, #16
  40abfa:	4b0b      	ldr	r3, [pc, #44]	; (40ac28 <osc_enable+0x7c>)
  40abfc:	4798      	blx	r3
		break;
  40abfe:	e00d      	b.n	40ac1c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40ac00:	2020      	movs	r0, #32
  40ac02:	4b09      	ldr	r3, [pc, #36]	; (40ac28 <osc_enable+0x7c>)
  40ac04:	4798      	blx	r3
		break;
  40ac06:	e009      	b.n	40ac1c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40ac08:	2000      	movs	r0, #0
  40ac0a:	213e      	movs	r1, #62	; 0x3e
  40ac0c:	4b07      	ldr	r3, [pc, #28]	; (40ac2c <osc_enable+0x80>)
  40ac0e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40ac10:	e004      	b.n	40ac1c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40ac12:	2001      	movs	r0, #1
  40ac14:	213e      	movs	r1, #62	; 0x3e
  40ac16:	4b05      	ldr	r3, [pc, #20]	; (40ac2c <osc_enable+0x80>)
  40ac18:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40ac1a:	bf00      	nop
	}
}
  40ac1c:	3708      	adds	r7, #8
  40ac1e:	46bd      	mov	sp, r7
  40ac20:	bd80      	pop	{r7, pc}
  40ac22:	bf00      	nop
  40ac24:	0040bad1 	.word	0x0040bad1
  40ac28:	0040bb3d 	.word	0x0040bb3d
  40ac2c:	0040bbad 	.word	0x0040bbad

0040ac30 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40ac30:	b580      	push	{r7, lr}
  40ac32:	b082      	sub	sp, #8
  40ac34:	af00      	add	r7, sp, #0
  40ac36:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40ac38:	687b      	ldr	r3, [r7, #4]
  40ac3a:	2b07      	cmp	r3, #7
  40ac3c:	d826      	bhi.n	40ac8c <osc_is_ready+0x5c>
  40ac3e:	a201      	add	r2, pc, #4	; (adr r2, 40ac44 <osc_is_ready+0x14>)
  40ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40ac44:	0040ac65 	.word	0x0040ac65
  40ac48:	0040ac69 	.word	0x0040ac69
  40ac4c:	0040ac69 	.word	0x0040ac69
  40ac50:	0040ac7b 	.word	0x0040ac7b
  40ac54:	0040ac7b 	.word	0x0040ac7b
  40ac58:	0040ac7b 	.word	0x0040ac7b
  40ac5c:	0040ac7b 	.word	0x0040ac7b
  40ac60:	0040ac7b 	.word	0x0040ac7b
	case OSC_SLCK_32K_RC:
		return 1;
  40ac64:	2301      	movs	r3, #1
  40ac66:	e012      	b.n	40ac8e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40ac68:	4b0b      	ldr	r3, [pc, #44]	; (40ac98 <osc_is_ready+0x68>)
  40ac6a:	4798      	blx	r3
  40ac6c:	4603      	mov	r3, r0
  40ac6e:	2b00      	cmp	r3, #0
  40ac70:	bf0c      	ite	eq
  40ac72:	2300      	moveq	r3, #0
  40ac74:	2301      	movne	r3, #1
  40ac76:	b2db      	uxtb	r3, r3
  40ac78:	e009      	b.n	40ac8e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40ac7a:	4b08      	ldr	r3, [pc, #32]	; (40ac9c <osc_is_ready+0x6c>)
  40ac7c:	4798      	blx	r3
  40ac7e:	4603      	mov	r3, r0
  40ac80:	2b00      	cmp	r3, #0
  40ac82:	bf0c      	ite	eq
  40ac84:	2300      	moveq	r3, #0
  40ac86:	2301      	movne	r3, #1
  40ac88:	b2db      	uxtb	r3, r3
  40ac8a:	e000      	b.n	40ac8e <osc_is_ready+0x5e>
	}

	return 0;
  40ac8c:	2300      	movs	r3, #0
}
  40ac8e:	4618      	mov	r0, r3
  40ac90:	3708      	adds	r7, #8
  40ac92:	46bd      	mov	sp, r7
  40ac94:	bd80      	pop	{r7, pc}
  40ac96:	bf00      	nop
  40ac98:	0040bb09 	.word	0x0040bb09
  40ac9c:	0040bc25 	.word	0x0040bc25

0040aca0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40aca0:	b480      	push	{r7}
  40aca2:	b083      	sub	sp, #12
  40aca4:	af00      	add	r7, sp, #0
  40aca6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40aca8:	687b      	ldr	r3, [r7, #4]
  40acaa:	2b07      	cmp	r3, #7
  40acac:	d825      	bhi.n	40acfa <osc_get_rate+0x5a>
  40acae:	a201      	add	r2, pc, #4	; (adr r2, 40acb4 <osc_get_rate+0x14>)
  40acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40acb4:	0040acd5 	.word	0x0040acd5
  40acb8:	0040acdb 	.word	0x0040acdb
  40acbc:	0040ace1 	.word	0x0040ace1
  40acc0:	0040ace7 	.word	0x0040ace7
  40acc4:	0040aceb 	.word	0x0040aceb
  40acc8:	0040acef 	.word	0x0040acef
  40accc:	0040acf3 	.word	0x0040acf3
  40acd0:	0040acf7 	.word	0x0040acf7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40acd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40acd8:	e010      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40acda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40acde:	e00d      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40ace0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40ace4:	e00a      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40ace6:	4b08      	ldr	r3, [pc, #32]	; (40ad08 <osc_get_rate+0x68>)
  40ace8:	e008      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40acea:	4b08      	ldr	r3, [pc, #32]	; (40ad0c <osc_get_rate+0x6c>)
  40acec:	e006      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40acee:	4b08      	ldr	r3, [pc, #32]	; (40ad10 <osc_get_rate+0x70>)
  40acf0:	e004      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40acf2:	4b08      	ldr	r3, [pc, #32]	; (40ad14 <osc_get_rate+0x74>)
  40acf4:	e002      	b.n	40acfc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40acf6:	4b07      	ldr	r3, [pc, #28]	; (40ad14 <osc_get_rate+0x74>)
  40acf8:	e000      	b.n	40acfc <osc_get_rate+0x5c>
	}

	return 0;
  40acfa:	2300      	movs	r3, #0
}
  40acfc:	4618      	mov	r0, r3
  40acfe:	370c      	adds	r7, #12
  40ad00:	46bd      	mov	sp, r7
  40ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad06:	4770      	bx	lr
  40ad08:	003d0900 	.word	0x003d0900
  40ad0c:	007a1200 	.word	0x007a1200
  40ad10:	00b71b00 	.word	0x00b71b00
  40ad14:	00f42400 	.word	0x00f42400

0040ad18 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40ad18:	b580      	push	{r7, lr}
  40ad1a:	b082      	sub	sp, #8
  40ad1c:	af00      	add	r7, sp, #0
  40ad1e:	4603      	mov	r3, r0
  40ad20:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40ad22:	bf00      	nop
  40ad24:	79fb      	ldrb	r3, [r7, #7]
  40ad26:	4618      	mov	r0, r3
  40ad28:	4b05      	ldr	r3, [pc, #20]	; (40ad40 <osc_wait_ready+0x28>)
  40ad2a:	4798      	blx	r3
  40ad2c:	4603      	mov	r3, r0
  40ad2e:	f083 0301 	eor.w	r3, r3, #1
  40ad32:	b2db      	uxtb	r3, r3
  40ad34:	2b00      	cmp	r3, #0
  40ad36:	d1f5      	bne.n	40ad24 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40ad38:	3708      	adds	r7, #8
  40ad3a:	46bd      	mov	sp, r7
  40ad3c:	bd80      	pop	{r7, pc}
  40ad3e:	bf00      	nop
  40ad40:	0040ac31 	.word	0x0040ac31

0040ad44 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40ad44:	b580      	push	{r7, lr}
  40ad46:	b086      	sub	sp, #24
  40ad48:	af00      	add	r7, sp, #0
  40ad4a:	60f8      	str	r0, [r7, #12]
  40ad4c:	607a      	str	r2, [r7, #4]
  40ad4e:	603b      	str	r3, [r7, #0]
  40ad50:	460b      	mov	r3, r1
  40ad52:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40ad54:	7afb      	ldrb	r3, [r7, #11]
  40ad56:	4618      	mov	r0, r3
  40ad58:	4b0d      	ldr	r3, [pc, #52]	; (40ad90 <pll_config_init+0x4c>)
  40ad5a:	4798      	blx	r3
  40ad5c:	4602      	mov	r2, r0
  40ad5e:	687b      	ldr	r3, [r7, #4]
  40ad60:	fbb2 f3f3 	udiv	r3, r2, r3
  40ad64:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40ad66:	697b      	ldr	r3, [r7, #20]
  40ad68:	683a      	ldr	r2, [r7, #0]
  40ad6a:	fb02 f303 	mul.w	r3, r2, r3
  40ad6e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40ad70:	683b      	ldr	r3, [r7, #0]
  40ad72:	3b01      	subs	r3, #1
  40ad74:	041a      	lsls	r2, r3, #16
  40ad76:	4b07      	ldr	r3, [pc, #28]	; (40ad94 <pll_config_init+0x50>)
  40ad78:	4013      	ands	r3, r2
  40ad7a:	687a      	ldr	r2, [r7, #4]
  40ad7c:	b2d2      	uxtb	r2, r2
  40ad7e:	4313      	orrs	r3, r2
  40ad80:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40ad84:	68fb      	ldr	r3, [r7, #12]
  40ad86:	601a      	str	r2, [r3, #0]
}
  40ad88:	3718      	adds	r7, #24
  40ad8a:	46bd      	mov	sp, r7
  40ad8c:	bd80      	pop	{r7, pc}
  40ad8e:	bf00      	nop
  40ad90:	0040aca1 	.word	0x0040aca1
  40ad94:	07ff0000 	.word	0x07ff0000

0040ad98 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40ad98:	b580      	push	{r7, lr}
  40ad9a:	b082      	sub	sp, #8
  40ad9c:	af00      	add	r7, sp, #0
  40ad9e:	6078      	str	r0, [r7, #4]
  40ada0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40ada2:	683b      	ldr	r3, [r7, #0]
  40ada4:	2b00      	cmp	r3, #0
  40ada6:	d108      	bne.n	40adba <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40ada8:	4b08      	ldr	r3, [pc, #32]	; (40adcc <pll_enable+0x34>)
  40adaa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40adac:	4b08      	ldr	r3, [pc, #32]	; (40add0 <pll_enable+0x38>)
  40adae:	687a      	ldr	r2, [r7, #4]
  40adb0:	6812      	ldr	r2, [r2, #0]
  40adb2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40adb6:	629a      	str	r2, [r3, #40]	; 0x28
  40adb8:	e005      	b.n	40adc6 <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  40adba:	4b06      	ldr	r3, [pc, #24]	; (40add4 <pll_enable+0x3c>)
  40adbc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40adbe:	4b04      	ldr	r3, [pc, #16]	; (40add0 <pll_enable+0x38>)
  40adc0:	687a      	ldr	r2, [r7, #4]
  40adc2:	6812      	ldr	r2, [r2, #0]
  40adc4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  40adc6:	3708      	adds	r7, #8
  40adc8:	46bd      	mov	sp, r7
  40adca:	bd80      	pop	{r7, pc}
  40adcc:	0040bc41 	.word	0x0040bc41
  40add0:	400e0400 	.word	0x400e0400
  40add4:	0040bc75 	.word	0x0040bc75

0040add8 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40add8:	b580      	push	{r7, lr}
  40adda:	b082      	sub	sp, #8
  40addc:	af00      	add	r7, sp, #0
  40adde:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40ade0:	687b      	ldr	r3, [r7, #4]
  40ade2:	2b00      	cmp	r3, #0
  40ade4:	d103      	bne.n	40adee <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40ade6:	4b05      	ldr	r3, [pc, #20]	; (40adfc <pll_is_locked+0x24>)
  40ade8:	4798      	blx	r3
  40adea:	4603      	mov	r3, r0
  40adec:	e002      	b.n	40adf4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40adee:	4b04      	ldr	r3, [pc, #16]	; (40ae00 <pll_is_locked+0x28>)
  40adf0:	4798      	blx	r3
  40adf2:	4603      	mov	r3, r0
	}
}
  40adf4:	4618      	mov	r0, r3
  40adf6:	3708      	adds	r7, #8
  40adf8:	46bd      	mov	sp, r7
  40adfa:	bd80      	pop	{r7, pc}
  40adfc:	0040bc59 	.word	0x0040bc59
  40ae00:	0040bc8d 	.word	0x0040bc8d

0040ae04 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40ae04:	b580      	push	{r7, lr}
  40ae06:	b082      	sub	sp, #8
  40ae08:	af00      	add	r7, sp, #0
  40ae0a:	4603      	mov	r3, r0
  40ae0c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40ae0e:	79fb      	ldrb	r3, [r7, #7]
  40ae10:	3b03      	subs	r3, #3
  40ae12:	2b04      	cmp	r3, #4
  40ae14:	d808      	bhi.n	40ae28 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40ae16:	79fb      	ldrb	r3, [r7, #7]
  40ae18:	4618      	mov	r0, r3
  40ae1a:	4b05      	ldr	r3, [pc, #20]	; (40ae30 <pll_enable_source+0x2c>)
  40ae1c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40ae1e:	79fb      	ldrb	r3, [r7, #7]
  40ae20:	4618      	mov	r0, r3
  40ae22:	4b04      	ldr	r3, [pc, #16]	; (40ae34 <pll_enable_source+0x30>)
  40ae24:	4798      	blx	r3
		break;
  40ae26:	e000      	b.n	40ae2a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40ae28:	bf00      	nop
	}
}
  40ae2a:	3708      	adds	r7, #8
  40ae2c:	46bd      	mov	sp, r7
  40ae2e:	bd80      	pop	{r7, pc}
  40ae30:	0040abad 	.word	0x0040abad
  40ae34:	0040ad19 	.word	0x0040ad19

0040ae38 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40ae38:	b580      	push	{r7, lr}
  40ae3a:	b082      	sub	sp, #8
  40ae3c:	af00      	add	r7, sp, #0
  40ae3e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40ae40:	bf00      	nop
  40ae42:	6878      	ldr	r0, [r7, #4]
  40ae44:	4b04      	ldr	r3, [pc, #16]	; (40ae58 <pll_wait_for_lock+0x20>)
  40ae46:	4798      	blx	r3
  40ae48:	4603      	mov	r3, r0
  40ae4a:	2b00      	cmp	r3, #0
  40ae4c:	d0f9      	beq.n	40ae42 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40ae4e:	2300      	movs	r3, #0
}
  40ae50:	4618      	mov	r0, r3
  40ae52:	3708      	adds	r7, #8
  40ae54:	46bd      	mov	sp, r7
  40ae56:	bd80      	pop	{r7, pc}
  40ae58:	0040add9 	.word	0x0040add9

0040ae5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40ae5c:	b580      	push	{r7, lr}
  40ae5e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40ae60:	2006      	movs	r0, #6
  40ae62:	4b04      	ldr	r3, [pc, #16]	; (40ae74 <sysclk_get_main_hz+0x18>)
  40ae64:	4798      	blx	r3
  40ae66:	4602      	mov	r2, r0
  40ae68:	4613      	mov	r3, r2
  40ae6a:	011b      	lsls	r3, r3, #4
  40ae6c:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40ae6e:	4618      	mov	r0, r3
  40ae70:	bd80      	pop	{r7, pc}
  40ae72:	bf00      	nop
  40ae74:	0040aca1 	.word	0x0040aca1

0040ae78 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40ae78:	b580      	push	{r7, lr}
  40ae7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40ae7c:	4b02      	ldr	r3, [pc, #8]	; (40ae88 <sysclk_get_cpu_hz+0x10>)
  40ae7e:	4798      	blx	r3
  40ae80:	4603      	mov	r3, r0
  40ae82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40ae84:	4618      	mov	r0, r3
  40ae86:	bd80      	pop	{r7, pc}
  40ae88:	0040ae5d 	.word	0x0040ae5d

0040ae8c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40ae8c:	b590      	push	{r4, r7, lr}
  40ae8e:	b083      	sub	sp, #12
  40ae90:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40ae92:	4811      	ldr	r0, [pc, #68]	; (40aed8 <sysclk_init+0x4c>)
  40ae94:	4b11      	ldr	r3, [pc, #68]	; (40aedc <sysclk_init+0x50>)
  40ae96:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40ae98:	2006      	movs	r0, #6
  40ae9a:	4b11      	ldr	r3, [pc, #68]	; (40aee0 <sysclk_init+0x54>)
  40ae9c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40ae9e:	1d3b      	adds	r3, r7, #4
  40aea0:	4618      	mov	r0, r3
  40aea2:	2106      	movs	r1, #6
  40aea4:	2201      	movs	r2, #1
  40aea6:	230f      	movs	r3, #15
  40aea8:	4c0e      	ldr	r4, [pc, #56]	; (40aee4 <sysclk_init+0x58>)
  40aeaa:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40aeac:	1d3b      	adds	r3, r7, #4
  40aeae:	4618      	mov	r0, r3
  40aeb0:	2100      	movs	r1, #0
  40aeb2:	4b0d      	ldr	r3, [pc, #52]	; (40aee8 <sysclk_init+0x5c>)
  40aeb4:	4798      	blx	r3
		pll_wait_for_lock(0);
  40aeb6:	2000      	movs	r0, #0
  40aeb8:	4b0c      	ldr	r3, [pc, #48]	; (40aeec <sysclk_init+0x60>)
  40aeba:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40aebc:	2010      	movs	r0, #16
  40aebe:	4b0c      	ldr	r3, [pc, #48]	; (40aef0 <sysclk_init+0x64>)
  40aec0:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40aec2:	4b0c      	ldr	r3, [pc, #48]	; (40aef4 <sysclk_init+0x68>)
  40aec4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40aec6:	4b0c      	ldr	r3, [pc, #48]	; (40aef8 <sysclk_init+0x6c>)
  40aec8:	4798      	blx	r3
  40aeca:	4603      	mov	r3, r0
  40aecc:	4618      	mov	r0, r3
  40aece:	4b03      	ldr	r3, [pc, #12]	; (40aedc <sysclk_init+0x50>)
  40aed0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40aed2:	370c      	adds	r7, #12
  40aed4:	46bd      	mov	sp, r7
  40aed6:	bd90      	pop	{r4, r7, pc}
  40aed8:	07270e00 	.word	0x07270e00
  40aedc:	0040bfb5 	.word	0x0040bfb5
  40aee0:	0040ae05 	.word	0x0040ae05
  40aee4:	0040ad45 	.word	0x0040ad45
  40aee8:	0040ad99 	.word	0x0040ad99
  40aeec:	0040ae39 	.word	0x0040ae39
  40aef0:	0040ba4d 	.word	0x0040ba4d
  40aef4:	0040be19 	.word	0x0040be19
  40aef8:	0040ae79 	.word	0x0040ae79

0040aefc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40aefc:	b580      	push	{r7, lr}
  40aefe:	b082      	sub	sp, #8
  40af00:	af00      	add	r7, sp, #0
  40af02:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40af04:	6878      	ldr	r0, [r7, #4]
  40af06:	4b02      	ldr	r3, [pc, #8]	; (40af10 <sysclk_enable_peripheral_clock+0x14>)
  40af08:	4798      	blx	r3
}
  40af0a:	3708      	adds	r7, #8
  40af0c:	46bd      	mov	sp, r7
  40af0e:	bd80      	pop	{r7, pc}
  40af10:	0040bca9 	.word	0x0040bca9

0040af14 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40af14:	b580      	push	{r7, lr}
  40af16:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40af18:	200b      	movs	r0, #11
  40af1a:	4b03      	ldr	r3, [pc, #12]	; (40af28 <ioport_init+0x14>)
  40af1c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40af1e:	200c      	movs	r0, #12
  40af20:	4b01      	ldr	r3, [pc, #4]	; (40af28 <ioport_init+0x14>)
  40af22:	4798      	blx	r3
	arch_ioport_init();
}
  40af24:	bd80      	pop	{r7, pc}
  40af26:	bf00      	nop
  40af28:	0040aefd 	.word	0x0040aefd

0040af2c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40af2c:	b480      	push	{r7}
  40af2e:	b08d      	sub	sp, #52	; 0x34
  40af30:	af00      	add	r7, sp, #0
  40af32:	6078      	str	r0, [r7, #4]
  40af34:	6039      	str	r1, [r7, #0]
  40af36:	687b      	ldr	r3, [r7, #4]
  40af38:	62fb      	str	r3, [r7, #44]	; 0x2c
  40af3a:	683b      	ldr	r3, [r7, #0]
  40af3c:	62bb      	str	r3, [r7, #40]	; 0x28
  40af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40af40:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40af44:	095a      	lsrs	r2, r3, #5
  40af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40af48:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40af4a:	6a3b      	ldr	r3, [r7, #32]
  40af4c:	f003 031f 	and.w	r3, r3, #31
  40af50:	2101      	movs	r1, #1
  40af52:	fa01 f303 	lsl.w	r3, r1, r3
  40af56:	61fa      	str	r2, [r7, #28]
  40af58:	61bb      	str	r3, [r7, #24]
  40af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40af5c:	617b      	str	r3, [r7, #20]
  40af5e:	69fb      	ldr	r3, [r7, #28]
  40af60:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40af62:	693b      	ldr	r3, [r7, #16]
  40af64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40af68:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40af6c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40af6e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  40af70:	697b      	ldr	r3, [r7, #20]
  40af72:	f003 0308 	and.w	r3, r3, #8
  40af76:	2b00      	cmp	r3, #0
  40af78:	d003      	beq.n	40af82 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40af7a:	68fb      	ldr	r3, [r7, #12]
  40af7c:	69ba      	ldr	r2, [r7, #24]
  40af7e:	665a      	str	r2, [r3, #100]	; 0x64
  40af80:	e002      	b.n	40af88 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40af82:	68fb      	ldr	r3, [r7, #12]
  40af84:	69ba      	ldr	r2, [r7, #24]
  40af86:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40af88:	697b      	ldr	r3, [r7, #20]
  40af8a:	f003 0310 	and.w	r3, r3, #16
  40af8e:	2b00      	cmp	r3, #0
  40af90:	d004      	beq.n	40af9c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40af92:	68fb      	ldr	r3, [r7, #12]
  40af94:	69ba      	ldr	r2, [r7, #24]
  40af96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40af9a:	e003      	b.n	40afa4 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  40af9c:	68fb      	ldr	r3, [r7, #12]
  40af9e:	69ba      	ldr	r2, [r7, #24]
  40afa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40afa4:	697b      	ldr	r3, [r7, #20]
  40afa6:	f003 0320 	and.w	r3, r3, #32
  40afaa:	2b00      	cmp	r3, #0
  40afac:	d003      	beq.n	40afb6 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40afae:	68fb      	ldr	r3, [r7, #12]
  40afb0:	69ba      	ldr	r2, [r7, #24]
  40afb2:	651a      	str	r2, [r3, #80]	; 0x50
  40afb4:	e002      	b.n	40afbc <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40afb6:	68fb      	ldr	r3, [r7, #12]
  40afb8:	69ba      	ldr	r2, [r7, #24]
  40afba:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40afbc:	697b      	ldr	r3, [r7, #20]
  40afbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40afc2:	2b00      	cmp	r3, #0
  40afc4:	d003      	beq.n	40afce <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40afc6:	68fb      	ldr	r3, [r7, #12]
  40afc8:	69ba      	ldr	r2, [r7, #24]
  40afca:	621a      	str	r2, [r3, #32]
  40afcc:	e002      	b.n	40afd4 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40afce:	68fb      	ldr	r3, [r7, #12]
  40afd0:	69ba      	ldr	r2, [r7, #24]
  40afd2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40afd4:	697b      	ldr	r3, [r7, #20]
  40afd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40afda:	2b00      	cmp	r3, #0
  40afdc:	d004      	beq.n	40afe8 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40afde:	68fb      	ldr	r3, [r7, #12]
  40afe0:	69ba      	ldr	r2, [r7, #24]
  40afe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40afe6:	e003      	b.n	40aff0 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40afe8:	68fb      	ldr	r3, [r7, #12]
  40afea:	69ba      	ldr	r2, [r7, #24]
  40afec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40aff0:	697b      	ldr	r3, [r7, #20]
  40aff2:	f003 0301 	and.w	r3, r3, #1
  40aff6:	2b00      	cmp	r3, #0
  40aff8:	d006      	beq.n	40b008 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40affa:	68fb      	ldr	r3, [r7, #12]
  40affc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40affe:	69bb      	ldr	r3, [r7, #24]
  40b000:	431a      	orrs	r2, r3
  40b002:	68fb      	ldr	r3, [r7, #12]
  40b004:	671a      	str	r2, [r3, #112]	; 0x70
  40b006:	e006      	b.n	40b016 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40b008:	68fb      	ldr	r3, [r7, #12]
  40b00a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40b00c:	69bb      	ldr	r3, [r7, #24]
  40b00e:	43db      	mvns	r3, r3
  40b010:	401a      	ands	r2, r3
  40b012:	68fb      	ldr	r3, [r7, #12]
  40b014:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40b016:	697b      	ldr	r3, [r7, #20]
  40b018:	f003 0302 	and.w	r3, r3, #2
  40b01c:	2b00      	cmp	r3, #0
  40b01e:	d006      	beq.n	40b02e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40b020:	68fb      	ldr	r3, [r7, #12]
  40b022:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b024:	69bb      	ldr	r3, [r7, #24]
  40b026:	431a      	orrs	r2, r3
  40b028:	68fb      	ldr	r3, [r7, #12]
  40b02a:	675a      	str	r2, [r3, #116]	; 0x74
  40b02c:	e006      	b.n	40b03c <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40b02e:	68fb      	ldr	r3, [r7, #12]
  40b030:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b032:	69bb      	ldr	r3, [r7, #24]
  40b034:	43db      	mvns	r3, r3
  40b036:	401a      	ands	r2, r3
  40b038:	68fb      	ldr	r3, [r7, #12]
  40b03a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40b03c:	3734      	adds	r7, #52	; 0x34
  40b03e:	46bd      	mov	sp, r7
  40b040:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b044:	4770      	bx	lr
  40b046:	bf00      	nop

0040b048 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  40b048:	b480      	push	{r7}
  40b04a:	b08d      	sub	sp, #52	; 0x34
  40b04c:	af00      	add	r7, sp, #0
  40b04e:	6078      	str	r0, [r7, #4]
  40b050:	460b      	mov	r3, r1
  40b052:	70fb      	strb	r3, [r7, #3]
  40b054:	687b      	ldr	r3, [r7, #4]
  40b056:	62fb      	str	r3, [r7, #44]	; 0x2c
  40b058:	78fb      	ldrb	r3, [r7, #3]
  40b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b060:	627b      	str	r3, [r7, #36]	; 0x24
  40b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b064:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40b066:	6a3b      	ldr	r3, [r7, #32]
  40b068:	095b      	lsrs	r3, r3, #5
  40b06a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40b06c:	69fb      	ldr	r3, [r7, #28]
  40b06e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40b072:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40b076:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40b078:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40b07a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40b07e:	2b01      	cmp	r3, #1
  40b080:	d109      	bne.n	40b096 <ioport_set_pin_dir+0x4e>
  40b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b084:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40b086:	697b      	ldr	r3, [r7, #20]
  40b088:	f003 031f 	and.w	r3, r3, #31
  40b08c:	2201      	movs	r2, #1
  40b08e:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40b090:	69bb      	ldr	r3, [r7, #24]
  40b092:	611a      	str	r2, [r3, #16]
  40b094:	e00c      	b.n	40b0b0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40b096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40b09a:	2b00      	cmp	r3, #0
  40b09c:	d108      	bne.n	40b0b0 <ioport_set_pin_dir+0x68>
  40b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b0a0:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40b0a2:	693b      	ldr	r3, [r7, #16]
  40b0a4:	f003 031f 	and.w	r3, r3, #31
  40b0a8:	2201      	movs	r2, #1
  40b0aa:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40b0ac:	69bb      	ldr	r3, [r7, #24]
  40b0ae:	615a      	str	r2, [r3, #20]
  40b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b0b2:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40b0b4:	68fb      	ldr	r3, [r7, #12]
  40b0b6:	f003 031f 	and.w	r3, r3, #31
  40b0ba:	2201      	movs	r2, #1
  40b0bc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40b0be:	69bb      	ldr	r3, [r7, #24]
  40b0c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40b0c4:	3734      	adds	r7, #52	; 0x34
  40b0c6:	46bd      	mov	sp, r7
  40b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b0cc:	4770      	bx	lr
  40b0ce:	bf00      	nop

0040b0d0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40b0d0:	b480      	push	{r7}
  40b0d2:	b08b      	sub	sp, #44	; 0x2c
  40b0d4:	af00      	add	r7, sp, #0
  40b0d6:	6078      	str	r0, [r7, #4]
  40b0d8:	460b      	mov	r3, r1
  40b0da:	70fb      	strb	r3, [r7, #3]
  40b0dc:	687b      	ldr	r3, [r7, #4]
  40b0de:	627b      	str	r3, [r7, #36]	; 0x24
  40b0e0:	78fb      	ldrb	r3, [r7, #3]
  40b0e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b0e8:	61fb      	str	r3, [r7, #28]
  40b0ea:	69fb      	ldr	r3, [r7, #28]
  40b0ec:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40b0ee:	69bb      	ldr	r3, [r7, #24]
  40b0f0:	095b      	lsrs	r3, r3, #5
  40b0f2:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40b0f4:	697b      	ldr	r3, [r7, #20]
  40b0f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40b0fa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40b0fe:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40b100:	613b      	str	r3, [r7, #16]

	if (level) {
  40b102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40b106:	2b00      	cmp	r3, #0
  40b108:	d009      	beq.n	40b11e <ioport_set_pin_level+0x4e>
  40b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b10c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40b10e:	68fb      	ldr	r3, [r7, #12]
  40b110:	f003 031f 	and.w	r3, r3, #31
  40b114:	2201      	movs	r2, #1
  40b116:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40b118:	693b      	ldr	r3, [r7, #16]
  40b11a:	631a      	str	r2, [r3, #48]	; 0x30
  40b11c:	e008      	b.n	40b130 <ioport_set_pin_level+0x60>
  40b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b120:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40b122:	68bb      	ldr	r3, [r7, #8]
  40b124:	f003 031f 	and.w	r3, r3, #31
  40b128:	2201      	movs	r2, #1
  40b12a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40b12c:	693b      	ldr	r3, [r7, #16]
  40b12e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40b130:	372c      	adds	r7, #44	; 0x2c
  40b132:	46bd      	mov	sp, r7
  40b134:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b138:	4770      	bx	lr
  40b13a:	bf00      	nop

0040b13c <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40b13c:	b580      	push	{r7, lr}
  40b13e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40b140:	4824      	ldr	r0, [pc, #144]	; (40b1d4 <board_init+0x98>)
  40b142:	4b25      	ldr	r3, [pc, #148]	; (40b1d8 <board_init+0x9c>)
  40b144:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  40b146:	4b25      	ldr	r3, [pc, #148]	; (40b1dc <board_init+0xa0>)
  40b148:	4798      	blx	r3
	//ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
				//IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  40b14a:	2054      	movs	r0, #84	; 0x54
  40b14c:	2101      	movs	r1, #1
  40b14e:	4b24      	ldr	r3, [pc, #144]	; (40b1e0 <board_init+0xa4>)
  40b150:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  40b152:	2054      	movs	r0, #84	; 0x54
  40b154:	2101      	movs	r1, #1
  40b156:	4b23      	ldr	r3, [pc, #140]	; (40b1e4 <board_init+0xa8>)
  40b158:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  40b15a:	2010      	movs	r0, #16
  40b15c:	2101      	movs	r1, #1
  40b15e:	4b20      	ldr	r3, [pc, #128]	; (40b1e0 <board_init+0xa4>)
  40b160:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  40b162:	2010      	movs	r0, #16
  40b164:	2101      	movs	r1, #1
  40b166:	4b1f      	ldr	r3, [pc, #124]	; (40b1e4 <board_init+0xa8>)
  40b168:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  40b16a:	2056      	movs	r0, #86	; 0x56
  40b16c:	2101      	movs	r1, #1
  40b16e:	4b1c      	ldr	r3, [pc, #112]	; (40b1e0 <board_init+0xa4>)
  40b170:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  40b172:	2056      	movs	r0, #86	; 0x56
  40b174:	2101      	movs	r1, #1
  40b176:	4b1b      	ldr	r3, [pc, #108]	; (40b1e4 <board_init+0xa8>)
  40b178:	4798      	blx	r3
	
	
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  40b17a:	201c      	movs	r0, #28
  40b17c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b180:	4b19      	ldr	r3, [pc, #100]	; (40b1e8 <board_init+0xac>)
  40b182:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  40b184:	201d      	movs	r0, #29
  40b186:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b18a:	4b17      	ldr	r3, [pc, #92]	; (40b1e8 <board_init+0xac>)
  40b18c:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  40b18e:	201e      	movs	r0, #30
  40b190:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b194:	4b14      	ldr	r3, [pc, #80]	; (40b1e8 <board_init+0xac>)
  40b196:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  40b198:	201f      	movs	r0, #31
  40b19a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b19e:	4b12      	ldr	r3, [pc, #72]	; (40b1e8 <board_init+0xac>)
  40b1a0:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  40b1a2:	201a      	movs	r0, #26
  40b1a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b1a8:	4b0f      	ldr	r3, [pc, #60]	; (40b1e8 <board_init+0xac>)
  40b1aa:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  40b1ac:	201b      	movs	r0, #27
  40b1ae:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b1b2:	4b0d      	ldr	r3, [pc, #52]	; (40b1e8 <board_init+0xac>)
  40b1b4:	4798      	blx	r3

	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  40b1b6:	202b      	movs	r0, #43	; 0x2b
  40b1b8:	490c      	ldr	r1, [pc, #48]	; (40b1ec <board_init+0xb0>)
  40b1ba:	4b0b      	ldr	r3, [pc, #44]	; (40b1e8 <board_init+0xac>)
  40b1bc:	4798      	blx	r3

//#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40b1be:	480c      	ldr	r0, [pc, #48]	; (40b1f0 <board_init+0xb4>)
  40b1c0:	210c      	movs	r1, #12
  40b1c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40b1c6:	4b0b      	ldr	r3, [pc, #44]	; (40b1f4 <board_init+0xb8>)
  40b1c8:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  40b1ca:	2002      	movs	r0, #2
  40b1cc:	2108      	movs	r1, #8
  40b1ce:	4b0a      	ldr	r3, [pc, #40]	; (40b1f8 <board_init+0xbc>)
  40b1d0:	4798      	blx	r3

#endif  



}
  40b1d2:	bd80      	pop	{r7, pc}
  40b1d4:	400e1450 	.word	0x400e1450
  40b1d8:	0040bd2d 	.word	0x0040bd2d
  40b1dc:	0040af15 	.word	0x0040af15
  40b1e0:	0040b0d1 	.word	0x0040b0d1
  40b1e4:	0040b049 	.word	0x0040b049
  40b1e8:	0040b5a1 	.word	0x0040b5a1
  40b1ec:	28000001 	.word	0x28000001
  40b1f0:	400e1000 	.word	0x400e1000
  40b1f4:	0040b755 	.word	0x0040b755
  40b1f8:	0040af2d 	.word	0x0040af2d

0040b1fc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40b1fc:	b480      	push	{r7}
  40b1fe:	b085      	sub	sp, #20
  40b200:	af00      	add	r7, sp, #0
  40b202:	60f8      	str	r0, [r7, #12]
  40b204:	60b9      	str	r1, [r7, #8]
  40b206:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40b208:	687b      	ldr	r3, [r7, #4]
  40b20a:	2b00      	cmp	r3, #0
  40b20c:	d003      	beq.n	40b216 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40b20e:	68fb      	ldr	r3, [r7, #12]
  40b210:	68ba      	ldr	r2, [r7, #8]
  40b212:	665a      	str	r2, [r3, #100]	; 0x64
  40b214:	e002      	b.n	40b21c <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40b216:	68fb      	ldr	r3, [r7, #12]
  40b218:	68ba      	ldr	r2, [r7, #8]
  40b21a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40b21c:	3714      	adds	r7, #20
  40b21e:	46bd      	mov	sp, r7
  40b220:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b224:	4770      	bx	lr
  40b226:	bf00      	nop

0040b228 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40b228:	b480      	push	{r7}
  40b22a:	b087      	sub	sp, #28
  40b22c:	af00      	add	r7, sp, #0
  40b22e:	60f8      	str	r0, [r7, #12]
  40b230:	60b9      	str	r1, [r7, #8]
  40b232:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40b234:	68fb      	ldr	r3, [r7, #12]
  40b236:	687a      	ldr	r2, [r7, #4]
  40b238:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40b23a:	68bb      	ldr	r3, [r7, #8]
  40b23c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40b240:	d04a      	beq.n	40b2d8 <pio_set_peripheral+0xb0>
  40b242:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40b246:	d808      	bhi.n	40b25a <pio_set_peripheral+0x32>
  40b248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40b24c:	d016      	beq.n	40b27c <pio_set_peripheral+0x54>
  40b24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40b252:	d02c      	beq.n	40b2ae <pio_set_peripheral+0x86>
  40b254:	2b00      	cmp	r3, #0
  40b256:	d069      	beq.n	40b32c <pio_set_peripheral+0x104>
  40b258:	e064      	b.n	40b324 <pio_set_peripheral+0xfc>
  40b25a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40b25e:	d065      	beq.n	40b32c <pio_set_peripheral+0x104>
  40b260:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40b264:	d803      	bhi.n	40b26e <pio_set_peripheral+0x46>
  40b266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b26a:	d04a      	beq.n	40b302 <pio_set_peripheral+0xda>
  40b26c:	e05a      	b.n	40b324 <pio_set_peripheral+0xfc>
  40b26e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40b272:	d05b      	beq.n	40b32c <pio_set_peripheral+0x104>
  40b274:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b278:	d058      	beq.n	40b32c <pio_set_peripheral+0x104>
  40b27a:	e053      	b.n	40b324 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40b27c:	68fb      	ldr	r3, [r7, #12]
  40b27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b280:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40b282:	68fb      	ldr	r3, [r7, #12]
  40b284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40b286:	687b      	ldr	r3, [r7, #4]
  40b288:	43d9      	mvns	r1, r3
  40b28a:	697b      	ldr	r3, [r7, #20]
  40b28c:	400b      	ands	r3, r1
  40b28e:	401a      	ands	r2, r3
  40b290:	68fb      	ldr	r3, [r7, #12]
  40b292:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40b294:	68fb      	ldr	r3, [r7, #12]
  40b296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40b298:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40b29a:	68fb      	ldr	r3, [r7, #12]
  40b29c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b29e:	687b      	ldr	r3, [r7, #4]
  40b2a0:	43d9      	mvns	r1, r3
  40b2a2:	697b      	ldr	r3, [r7, #20]
  40b2a4:	400b      	ands	r3, r1
  40b2a6:	401a      	ands	r2, r3
  40b2a8:	68fb      	ldr	r3, [r7, #12]
  40b2aa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40b2ac:	e03a      	b.n	40b324 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40b2ae:	68fb      	ldr	r3, [r7, #12]
  40b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b2b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40b2b4:	687a      	ldr	r2, [r7, #4]
  40b2b6:	697b      	ldr	r3, [r7, #20]
  40b2b8:	431a      	orrs	r2, r3
  40b2ba:	68fb      	ldr	r3, [r7, #12]
  40b2bc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40b2be:	68fb      	ldr	r3, [r7, #12]
  40b2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40b2c2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40b2c4:	68fb      	ldr	r3, [r7, #12]
  40b2c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40b2c8:	687b      	ldr	r3, [r7, #4]
  40b2ca:	43d9      	mvns	r1, r3
  40b2cc:	697b      	ldr	r3, [r7, #20]
  40b2ce:	400b      	ands	r3, r1
  40b2d0:	401a      	ands	r2, r3
  40b2d2:	68fb      	ldr	r3, [r7, #12]
  40b2d4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40b2d6:	e025      	b.n	40b324 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40b2d8:	68fb      	ldr	r3, [r7, #12]
  40b2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b2dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40b2de:	68fb      	ldr	r3, [r7, #12]
  40b2e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40b2e2:	687b      	ldr	r3, [r7, #4]
  40b2e4:	43d9      	mvns	r1, r3
  40b2e6:	697b      	ldr	r3, [r7, #20]
  40b2e8:	400b      	ands	r3, r1
  40b2ea:	401a      	ands	r2, r3
  40b2ec:	68fb      	ldr	r3, [r7, #12]
  40b2ee:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40b2f0:	68fb      	ldr	r3, [r7, #12]
  40b2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40b2f4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40b2f6:	687a      	ldr	r2, [r7, #4]
  40b2f8:	697b      	ldr	r3, [r7, #20]
  40b2fa:	431a      	orrs	r2, r3
  40b2fc:	68fb      	ldr	r3, [r7, #12]
  40b2fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40b300:	e010      	b.n	40b324 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40b302:	68fb      	ldr	r3, [r7, #12]
  40b304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b306:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40b308:	687a      	ldr	r2, [r7, #4]
  40b30a:	697b      	ldr	r3, [r7, #20]
  40b30c:	431a      	orrs	r2, r3
  40b30e:	68fb      	ldr	r3, [r7, #12]
  40b310:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40b312:	68fb      	ldr	r3, [r7, #12]
  40b314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40b316:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40b318:	687a      	ldr	r2, [r7, #4]
  40b31a:	697b      	ldr	r3, [r7, #20]
  40b31c:	431a      	orrs	r2, r3
  40b31e:	68fb      	ldr	r3, [r7, #12]
  40b320:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40b322:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40b324:	68fb      	ldr	r3, [r7, #12]
  40b326:	687a      	ldr	r2, [r7, #4]
  40b328:	605a      	str	r2, [r3, #4]
  40b32a:	e000      	b.n	40b32e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40b32c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40b32e:	371c      	adds	r7, #28
  40b330:	46bd      	mov	sp, r7
  40b332:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b336:	4770      	bx	lr

0040b338 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40b338:	b580      	push	{r7, lr}
  40b33a:	b084      	sub	sp, #16
  40b33c:	af00      	add	r7, sp, #0
  40b33e:	60f8      	str	r0, [r7, #12]
  40b340:	60b9      	str	r1, [r7, #8]
  40b342:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40b344:	68f8      	ldr	r0, [r7, #12]
  40b346:	68b9      	ldr	r1, [r7, #8]
  40b348:	4b18      	ldr	r3, [pc, #96]	; (40b3ac <pio_set_input+0x74>)
  40b34a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40b34c:	687b      	ldr	r3, [r7, #4]
  40b34e:	f003 0301 	and.w	r3, r3, #1
  40b352:	68f8      	ldr	r0, [r7, #12]
  40b354:	68b9      	ldr	r1, [r7, #8]
  40b356:	461a      	mov	r2, r3
  40b358:	4b15      	ldr	r3, [pc, #84]	; (40b3b0 <pio_set_input+0x78>)
  40b35a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40b35c:	687b      	ldr	r3, [r7, #4]
  40b35e:	f003 030a 	and.w	r3, r3, #10
  40b362:	2b00      	cmp	r3, #0
  40b364:	d003      	beq.n	40b36e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40b366:	68fb      	ldr	r3, [r7, #12]
  40b368:	68ba      	ldr	r2, [r7, #8]
  40b36a:	621a      	str	r2, [r3, #32]
  40b36c:	e002      	b.n	40b374 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40b36e:	68fb      	ldr	r3, [r7, #12]
  40b370:	68ba      	ldr	r2, [r7, #8]
  40b372:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40b374:	687b      	ldr	r3, [r7, #4]
  40b376:	f003 0302 	and.w	r3, r3, #2
  40b37a:	2b00      	cmp	r3, #0
  40b37c:	d004      	beq.n	40b388 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40b37e:	68fb      	ldr	r3, [r7, #12]
  40b380:	68ba      	ldr	r2, [r7, #8]
  40b382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40b386:	e008      	b.n	40b39a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40b388:	687b      	ldr	r3, [r7, #4]
  40b38a:	f003 0308 	and.w	r3, r3, #8
  40b38e:	2b00      	cmp	r3, #0
  40b390:	d003      	beq.n	40b39a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40b392:	68fb      	ldr	r3, [r7, #12]
  40b394:	68ba      	ldr	r2, [r7, #8]
  40b396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40b39a:	68fb      	ldr	r3, [r7, #12]
  40b39c:	68ba      	ldr	r2, [r7, #8]
  40b39e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40b3a0:	68fb      	ldr	r3, [r7, #12]
  40b3a2:	68ba      	ldr	r2, [r7, #8]
  40b3a4:	601a      	str	r2, [r3, #0]
}
  40b3a6:	3710      	adds	r7, #16
  40b3a8:	46bd      	mov	sp, r7
  40b3aa:	bd80      	pop	{r7, pc}
  40b3ac:	0040b4a5 	.word	0x0040b4a5
  40b3b0:	0040b1fd 	.word	0x0040b1fd

0040b3b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40b3b4:	b580      	push	{r7, lr}
  40b3b6:	b084      	sub	sp, #16
  40b3b8:	af00      	add	r7, sp, #0
  40b3ba:	60f8      	str	r0, [r7, #12]
  40b3bc:	60b9      	str	r1, [r7, #8]
  40b3be:	607a      	str	r2, [r7, #4]
  40b3c0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40b3c2:	68f8      	ldr	r0, [r7, #12]
  40b3c4:	68b9      	ldr	r1, [r7, #8]
  40b3c6:	4b12      	ldr	r3, [pc, #72]	; (40b410 <pio_set_output+0x5c>)
  40b3c8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40b3ca:	68f8      	ldr	r0, [r7, #12]
  40b3cc:	68b9      	ldr	r1, [r7, #8]
  40b3ce:	69ba      	ldr	r2, [r7, #24]
  40b3d0:	4b10      	ldr	r3, [pc, #64]	; (40b414 <pio_set_output+0x60>)
  40b3d2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40b3d4:	683b      	ldr	r3, [r7, #0]
  40b3d6:	2b00      	cmp	r3, #0
  40b3d8:	d003      	beq.n	40b3e2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40b3da:	68fb      	ldr	r3, [r7, #12]
  40b3dc:	68ba      	ldr	r2, [r7, #8]
  40b3de:	651a      	str	r2, [r3, #80]	; 0x50
  40b3e0:	e002      	b.n	40b3e8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40b3e2:	68fb      	ldr	r3, [r7, #12]
  40b3e4:	68ba      	ldr	r2, [r7, #8]
  40b3e6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40b3e8:	687b      	ldr	r3, [r7, #4]
  40b3ea:	2b00      	cmp	r3, #0
  40b3ec:	d003      	beq.n	40b3f6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40b3ee:	68fb      	ldr	r3, [r7, #12]
  40b3f0:	68ba      	ldr	r2, [r7, #8]
  40b3f2:	631a      	str	r2, [r3, #48]	; 0x30
  40b3f4:	e002      	b.n	40b3fc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40b3f6:	68fb      	ldr	r3, [r7, #12]
  40b3f8:	68ba      	ldr	r2, [r7, #8]
  40b3fa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40b3fc:	68fb      	ldr	r3, [r7, #12]
  40b3fe:	68ba      	ldr	r2, [r7, #8]
  40b400:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40b402:	68fb      	ldr	r3, [r7, #12]
  40b404:	68ba      	ldr	r2, [r7, #8]
  40b406:	601a      	str	r2, [r3, #0]
}
  40b408:	3710      	adds	r7, #16
  40b40a:	46bd      	mov	sp, r7
  40b40c:	bd80      	pop	{r7, pc}
  40b40e:	bf00      	nop
  40b410:	0040b4a5 	.word	0x0040b4a5
  40b414:	0040b1fd 	.word	0x0040b1fd

0040b418 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40b418:	b480      	push	{r7}
  40b41a:	b085      	sub	sp, #20
  40b41c:	af00      	add	r7, sp, #0
  40b41e:	60f8      	str	r0, [r7, #12]
  40b420:	60b9      	str	r1, [r7, #8]
  40b422:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40b424:	687b      	ldr	r3, [r7, #4]
  40b426:	f003 0310 	and.w	r3, r3, #16
  40b42a:	2b00      	cmp	r3, #0
  40b42c:	d020      	beq.n	40b470 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40b42e:	68fb      	ldr	r3, [r7, #12]
  40b430:	68ba      	ldr	r2, [r7, #8]
  40b432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40b436:	687b      	ldr	r3, [r7, #4]
  40b438:	f003 0320 	and.w	r3, r3, #32
  40b43c:	2b00      	cmp	r3, #0
  40b43e:	d004      	beq.n	40b44a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40b440:	68fb      	ldr	r3, [r7, #12]
  40b442:	68ba      	ldr	r2, [r7, #8]
  40b444:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40b448:	e003      	b.n	40b452 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40b44a:	68fb      	ldr	r3, [r7, #12]
  40b44c:	68ba      	ldr	r2, [r7, #8]
  40b44e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40b452:	687b      	ldr	r3, [r7, #4]
  40b454:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40b458:	2b00      	cmp	r3, #0
  40b45a:	d004      	beq.n	40b466 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40b45c:	68fb      	ldr	r3, [r7, #12]
  40b45e:	68ba      	ldr	r2, [r7, #8]
  40b460:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  40b464:	e008      	b.n	40b478 <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40b466:	68fb      	ldr	r3, [r7, #12]
  40b468:	68ba      	ldr	r2, [r7, #8]
  40b46a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  40b46e:	e003      	b.n	40b478 <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40b470:	68fb      	ldr	r3, [r7, #12]
  40b472:	68ba      	ldr	r2, [r7, #8]
  40b474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  40b478:	3714      	adds	r7, #20
  40b47a:	46bd      	mov	sp, r7
  40b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b480:	4770      	bx	lr
  40b482:	bf00      	nop

0040b484 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40b484:	b480      	push	{r7}
  40b486:	b083      	sub	sp, #12
  40b488:	af00      	add	r7, sp, #0
  40b48a:	6078      	str	r0, [r7, #4]
  40b48c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  40b48e:	687b      	ldr	r3, [r7, #4]
  40b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40b492:	687b      	ldr	r3, [r7, #4]
  40b494:	683a      	ldr	r2, [r7, #0]
  40b496:	641a      	str	r2, [r3, #64]	; 0x40
}
  40b498:	370c      	adds	r7, #12
  40b49a:	46bd      	mov	sp, r7
  40b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b4a0:	4770      	bx	lr
  40b4a2:	bf00      	nop

0040b4a4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40b4a4:	b480      	push	{r7}
  40b4a6:	b083      	sub	sp, #12
  40b4a8:	af00      	add	r7, sp, #0
  40b4aa:	6078      	str	r0, [r7, #4]
  40b4ac:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40b4ae:	687b      	ldr	r3, [r7, #4]
  40b4b0:	683a      	ldr	r2, [r7, #0]
  40b4b2:	645a      	str	r2, [r3, #68]	; 0x44
}
  40b4b4:	370c      	adds	r7, #12
  40b4b6:	46bd      	mov	sp, r7
  40b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b4bc:	4770      	bx	lr
  40b4be:	bf00      	nop

0040b4c0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40b4c0:	b480      	push	{r7}
  40b4c2:	b083      	sub	sp, #12
  40b4c4:	af00      	add	r7, sp, #0
  40b4c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40b4c8:	687b      	ldr	r3, [r7, #4]
  40b4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40b4cc:	4618      	mov	r0, r3
  40b4ce:	370c      	adds	r7, #12
  40b4d0:	46bd      	mov	sp, r7
  40b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b4d6:	4770      	bx	lr

0040b4d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40b4d8:	b480      	push	{r7}
  40b4da:	b083      	sub	sp, #12
  40b4dc:	af00      	add	r7, sp, #0
  40b4de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40b4e0:	687b      	ldr	r3, [r7, #4]
  40b4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40b4e4:	4618      	mov	r0, r3
  40b4e6:	370c      	adds	r7, #12
  40b4e8:	46bd      	mov	sp, r7
  40b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b4ee:	4770      	bx	lr

0040b4f0 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  40b4f0:	b580      	push	{r7, lr}
  40b4f2:	b084      	sub	sp, #16
  40b4f4:	af00      	add	r7, sp, #0
  40b4f6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b4f8:	6878      	ldr	r0, [r7, #4]
  40b4fa:	4b07      	ldr	r3, [pc, #28]	; (40b518 <pio_set_pin_high+0x28>)
  40b4fc:	4798      	blx	r3
  40b4fe:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40b500:	687b      	ldr	r3, [r7, #4]
  40b502:	f003 031f 	and.w	r3, r3, #31
  40b506:	2201      	movs	r2, #1
  40b508:	fa02 f303 	lsl.w	r3, r2, r3
  40b50c:	461a      	mov	r2, r3
  40b50e:	68fb      	ldr	r3, [r7, #12]
  40b510:	631a      	str	r2, [r3, #48]	; 0x30
}
  40b512:	3710      	adds	r7, #16
  40b514:	46bd      	mov	sp, r7
  40b516:	bd80      	pop	{r7, pc}
  40b518:	0040b87d 	.word	0x0040b87d

0040b51c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40b51c:	b580      	push	{r7, lr}
  40b51e:	b084      	sub	sp, #16
  40b520:	af00      	add	r7, sp, #0
  40b522:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b524:	6878      	ldr	r0, [r7, #4]
  40b526:	4b07      	ldr	r3, [pc, #28]	; (40b544 <pio_set_pin_low+0x28>)
  40b528:	4798      	blx	r3
  40b52a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40b52c:	687b      	ldr	r3, [r7, #4]
  40b52e:	f003 031f 	and.w	r3, r3, #31
  40b532:	2201      	movs	r2, #1
  40b534:	fa02 f303 	lsl.w	r3, r2, r3
  40b538:	461a      	mov	r2, r3
  40b53a:	68fb      	ldr	r3, [r7, #12]
  40b53c:	635a      	str	r2, [r3, #52]	; 0x34
}
  40b53e:	3710      	adds	r7, #16
  40b540:	46bd      	mov	sp, r7
  40b542:	bd80      	pop	{r7, pc}
  40b544:	0040b87d 	.word	0x0040b87d

0040b548 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  40b548:	b580      	push	{r7, lr}
  40b54a:	b084      	sub	sp, #16
  40b54c:	af00      	add	r7, sp, #0
  40b54e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b550:	6878      	ldr	r0, [r7, #4]
  40b552:	4b12      	ldr	r3, [pc, #72]	; (40b59c <pio_toggle_pin+0x54>)
  40b554:	4798      	blx	r3
  40b556:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  40b558:	68fb      	ldr	r3, [r7, #12]
  40b55a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40b55c:	687b      	ldr	r3, [r7, #4]
  40b55e:	f003 031f 	and.w	r3, r3, #31
  40b562:	2101      	movs	r1, #1
  40b564:	fa01 f303 	lsl.w	r3, r1, r3
  40b568:	4013      	ands	r3, r2
  40b56a:	2b00      	cmp	r3, #0
  40b56c:	d009      	beq.n	40b582 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40b56e:	687b      	ldr	r3, [r7, #4]
  40b570:	f003 031f 	and.w	r3, r3, #31
  40b574:	2201      	movs	r2, #1
  40b576:	fa02 f303 	lsl.w	r3, r2, r3
  40b57a:	461a      	mov	r2, r3
  40b57c:	68fb      	ldr	r3, [r7, #12]
  40b57e:	635a      	str	r2, [r3, #52]	; 0x34
  40b580:	e008      	b.n	40b594 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40b582:	687b      	ldr	r3, [r7, #4]
  40b584:	f003 031f 	and.w	r3, r3, #31
  40b588:	2201      	movs	r2, #1
  40b58a:	fa02 f303 	lsl.w	r3, r2, r3
  40b58e:	461a      	mov	r2, r3
  40b590:	68fb      	ldr	r3, [r7, #12]
  40b592:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  40b594:	3710      	adds	r7, #16
  40b596:	46bd      	mov	sp, r7
  40b598:	bd80      	pop	{r7, pc}
  40b59a:	bf00      	nop
  40b59c:	0040b87d 	.word	0x0040b87d

0040b5a0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40b5a0:	b590      	push	{r4, r7, lr}
  40b5a2:	b087      	sub	sp, #28
  40b5a4:	af02      	add	r7, sp, #8
  40b5a6:	6078      	str	r0, [r7, #4]
  40b5a8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b5aa:	6878      	ldr	r0, [r7, #4]
  40b5ac:	4b64      	ldr	r3, [pc, #400]	; (40b740 <pio_configure_pin+0x1a0>)
  40b5ae:	4798      	blx	r3
  40b5b0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40b5b2:	683b      	ldr	r3, [r7, #0]
  40b5b4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b5bc:	d06b      	beq.n	40b696 <pio_configure_pin+0xf6>
  40b5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b5c2:	d809      	bhi.n	40b5d8 <pio_configure_pin+0x38>
  40b5c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40b5c8:	d02d      	beq.n	40b626 <pio_configure_pin+0x86>
  40b5ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40b5ce:	d046      	beq.n	40b65e <pio_configure_pin+0xbe>
  40b5d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40b5d4:	d00b      	beq.n	40b5ee <pio_configure_pin+0x4e>
  40b5d6:	e0ac      	b.n	40b732 <pio_configure_pin+0x192>
  40b5d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40b5dc:	f000 8083 	beq.w	40b6e6 <pio_configure_pin+0x146>
  40b5e0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b5e4:	d07f      	beq.n	40b6e6 <pio_configure_pin+0x146>
  40b5e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40b5ea:	d070      	beq.n	40b6ce <pio_configure_pin+0x12e>
  40b5ec:	e0a1      	b.n	40b732 <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40b5ee:	687b      	ldr	r3, [r7, #4]
  40b5f0:	f003 031f 	and.w	r3, r3, #31
  40b5f4:	2201      	movs	r2, #1
  40b5f6:	fa02 f303 	lsl.w	r3, r2, r3
  40b5fa:	68f8      	ldr	r0, [r7, #12]
  40b5fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40b600:	461a      	mov	r2, r3
  40b602:	4b50      	ldr	r3, [pc, #320]	; (40b744 <pio_configure_pin+0x1a4>)
  40b604:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b606:	687b      	ldr	r3, [r7, #4]
  40b608:	f003 031f 	and.w	r3, r3, #31
  40b60c:	2201      	movs	r2, #1
  40b60e:	fa02 f303 	lsl.w	r3, r2, r3
  40b612:	461a      	mov	r2, r3
  40b614:	683b      	ldr	r3, [r7, #0]
  40b616:	f003 0301 	and.w	r3, r3, #1
  40b61a:	68f8      	ldr	r0, [r7, #12]
  40b61c:	4611      	mov	r1, r2
  40b61e:	461a      	mov	r2, r3
  40b620:	4b49      	ldr	r3, [pc, #292]	; (40b748 <pio_configure_pin+0x1a8>)
  40b622:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b624:	e087      	b.n	40b736 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40b626:	687b      	ldr	r3, [r7, #4]
  40b628:	f003 031f 	and.w	r3, r3, #31
  40b62c:	2201      	movs	r2, #1
  40b62e:	fa02 f303 	lsl.w	r3, r2, r3
  40b632:	68f8      	ldr	r0, [r7, #12]
  40b634:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40b638:	461a      	mov	r2, r3
  40b63a:	4b42      	ldr	r3, [pc, #264]	; (40b744 <pio_configure_pin+0x1a4>)
  40b63c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b63e:	687b      	ldr	r3, [r7, #4]
  40b640:	f003 031f 	and.w	r3, r3, #31
  40b644:	2201      	movs	r2, #1
  40b646:	fa02 f303 	lsl.w	r3, r2, r3
  40b64a:	461a      	mov	r2, r3
  40b64c:	683b      	ldr	r3, [r7, #0]
  40b64e:	f003 0301 	and.w	r3, r3, #1
  40b652:	68f8      	ldr	r0, [r7, #12]
  40b654:	4611      	mov	r1, r2
  40b656:	461a      	mov	r2, r3
  40b658:	4b3b      	ldr	r3, [pc, #236]	; (40b748 <pio_configure_pin+0x1a8>)
  40b65a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b65c:	e06b      	b.n	40b736 <pio_configure_pin+0x196>
//#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40b65e:	687b      	ldr	r3, [r7, #4]
  40b660:	f003 031f 	and.w	r3, r3, #31
  40b664:	2201      	movs	r2, #1
  40b666:	fa02 f303 	lsl.w	r3, r2, r3
  40b66a:	68f8      	ldr	r0, [r7, #12]
  40b66c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b670:	461a      	mov	r2, r3
  40b672:	4b34      	ldr	r3, [pc, #208]	; (40b744 <pio_configure_pin+0x1a4>)
  40b674:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b676:	687b      	ldr	r3, [r7, #4]
  40b678:	f003 031f 	and.w	r3, r3, #31
  40b67c:	2201      	movs	r2, #1
  40b67e:	fa02 f303 	lsl.w	r3, r2, r3
  40b682:	461a      	mov	r2, r3
  40b684:	683b      	ldr	r3, [r7, #0]
  40b686:	f003 0301 	and.w	r3, r3, #1
  40b68a:	68f8      	ldr	r0, [r7, #12]
  40b68c:	4611      	mov	r1, r2
  40b68e:	461a      	mov	r2, r3
  40b690:	4b2d      	ldr	r3, [pc, #180]	; (40b748 <pio_configure_pin+0x1a8>)
  40b692:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b694:	e04f      	b.n	40b736 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40b696:	687b      	ldr	r3, [r7, #4]
  40b698:	f003 031f 	and.w	r3, r3, #31
  40b69c:	2201      	movs	r2, #1
  40b69e:	fa02 f303 	lsl.w	r3, r2, r3
  40b6a2:	68f8      	ldr	r0, [r7, #12]
  40b6a4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40b6a8:	461a      	mov	r2, r3
  40b6aa:	4b26      	ldr	r3, [pc, #152]	; (40b744 <pio_configure_pin+0x1a4>)
  40b6ac:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b6ae:	687b      	ldr	r3, [r7, #4]
  40b6b0:	f003 031f 	and.w	r3, r3, #31
  40b6b4:	2201      	movs	r2, #1
  40b6b6:	fa02 f303 	lsl.w	r3, r2, r3
  40b6ba:	461a      	mov	r2, r3
  40b6bc:	683b      	ldr	r3, [r7, #0]
  40b6be:	f003 0301 	and.w	r3, r3, #1
  40b6c2:	68f8      	ldr	r0, [r7, #12]
  40b6c4:	4611      	mov	r1, r2
  40b6c6:	461a      	mov	r2, r3
  40b6c8:	4b1f      	ldr	r3, [pc, #124]	; (40b748 <pio_configure_pin+0x1a8>)
  40b6ca:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b6cc:	e033      	b.n	40b736 <pio_configure_pin+0x196>
//#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40b6ce:	687b      	ldr	r3, [r7, #4]
  40b6d0:	f003 031f 	and.w	r3, r3, #31
  40b6d4:	2201      	movs	r2, #1
  40b6d6:	fa02 f303 	lsl.w	r3, r2, r3
  40b6da:	68f8      	ldr	r0, [r7, #12]
  40b6dc:	4619      	mov	r1, r3
  40b6de:	683a      	ldr	r2, [r7, #0]
  40b6e0:	4b1a      	ldr	r3, [pc, #104]	; (40b74c <pio_configure_pin+0x1ac>)
  40b6e2:	4798      	blx	r3
		break;
  40b6e4:	e027      	b.n	40b736 <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b6e6:	687b      	ldr	r3, [r7, #4]
  40b6e8:	f003 031f 	and.w	r3, r3, #31
  40b6ec:	2201      	movs	r2, #1
  40b6ee:	fa02 f303 	lsl.w	r3, r2, r3
  40b6f2:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40b6f4:	683b      	ldr	r3, [r7, #0]
  40b6f6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b6fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b6fe:	bf14      	ite	ne
  40b700:	2300      	movne	r3, #0
  40b702:	2301      	moveq	r3, #1
  40b704:	b2db      	uxtb	r3, r3
  40b706:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40b708:	683b      	ldr	r3, [r7, #0]
  40b70a:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b70e:	2b00      	cmp	r3, #0
  40b710:	bf0c      	ite	eq
  40b712:	2300      	moveq	r3, #0
  40b714:	2301      	movne	r3, #1
  40b716:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40b718:	6838      	ldr	r0, [r7, #0]
  40b71a:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b71e:	2800      	cmp	r0, #0
  40b720:	bf0c      	ite	eq
  40b722:	2000      	moveq	r0, #0
  40b724:	2001      	movne	r0, #1
  40b726:	b2c0      	uxtb	r0, r0
  40b728:	9000      	str	r0, [sp, #0]
  40b72a:	68f8      	ldr	r0, [r7, #12]
  40b72c:	4c08      	ldr	r4, [pc, #32]	; (40b750 <pio_configure_pin+0x1b0>)
  40b72e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40b730:	e001      	b.n	40b736 <pio_configure_pin+0x196>

	default:
		return 0;
  40b732:	2300      	movs	r3, #0
  40b734:	e000      	b.n	40b738 <pio_configure_pin+0x198>
	}

	return 1;
  40b736:	2301      	movs	r3, #1
}
  40b738:	4618      	mov	r0, r3
  40b73a:	3714      	adds	r7, #20
  40b73c:	46bd      	mov	sp, r7
  40b73e:	bd90      	pop	{r4, r7, pc}
  40b740:	0040b87d 	.word	0x0040b87d
  40b744:	0040b229 	.word	0x0040b229
  40b748:	0040b1fd 	.word	0x0040b1fd
  40b74c:	0040b339 	.word	0x0040b339
  40b750:	0040b3b5 	.word	0x0040b3b5

0040b754 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40b754:	b590      	push	{r4, r7, lr}
  40b756:	b087      	sub	sp, #28
  40b758:	af02      	add	r7, sp, #8
  40b75a:	60f8      	str	r0, [r7, #12]
  40b75c:	60b9      	str	r1, [r7, #8]
  40b75e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40b760:	687b      	ldr	r3, [r7, #4]
  40b762:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40b766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b76a:	d043      	beq.n	40b7f4 <pio_configure_pin_group+0xa0>
  40b76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b770:	d809      	bhi.n	40b786 <pio_configure_pin_group+0x32>
  40b772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40b776:	d01f      	beq.n	40b7b8 <pio_configure_pin_group+0x64>
  40b778:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40b77c:	d02b      	beq.n	40b7d6 <pio_configure_pin_group+0x82>
  40b77e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40b782:	d00a      	beq.n	40b79a <pio_configure_pin_group+0x46>
  40b784:	e06b      	b.n	40b85e <pio_configure_pin_group+0x10a>
  40b786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40b78a:	d048      	beq.n	40b81e <pio_configure_pin_group+0xca>
  40b78c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b790:	d045      	beq.n	40b81e <pio_configure_pin_group+0xca>
  40b792:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40b796:	d03c      	beq.n	40b812 <pio_configure_pin_group+0xbe>
  40b798:	e061      	b.n	40b85e <pio_configure_pin_group+0x10a>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40b79a:	68f8      	ldr	r0, [r7, #12]
  40b79c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40b7a0:	68ba      	ldr	r2, [r7, #8]
  40b7a2:	4b32      	ldr	r3, [pc, #200]	; (40b86c <pio_configure_pin_group+0x118>)
  40b7a4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40b7a6:	687b      	ldr	r3, [r7, #4]
  40b7a8:	f003 0301 	and.w	r3, r3, #1
  40b7ac:	68f8      	ldr	r0, [r7, #12]
  40b7ae:	68b9      	ldr	r1, [r7, #8]
  40b7b0:	461a      	mov	r2, r3
  40b7b2:	4b2f      	ldr	r3, [pc, #188]	; (40b870 <pio_configure_pin_group+0x11c>)
  40b7b4:	4798      	blx	r3
		break;
  40b7b6:	e054      	b.n	40b862 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40b7b8:	68f8      	ldr	r0, [r7, #12]
  40b7ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40b7be:	68ba      	ldr	r2, [r7, #8]
  40b7c0:	4b2a      	ldr	r3, [pc, #168]	; (40b86c <pio_configure_pin_group+0x118>)
  40b7c2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40b7c4:	687b      	ldr	r3, [r7, #4]
  40b7c6:	f003 0301 	and.w	r3, r3, #1
  40b7ca:	68f8      	ldr	r0, [r7, #12]
  40b7cc:	68b9      	ldr	r1, [r7, #8]
  40b7ce:	461a      	mov	r2, r3
  40b7d0:	4b27      	ldr	r3, [pc, #156]	; (40b870 <pio_configure_pin_group+0x11c>)
  40b7d2:	4798      	blx	r3
		break;
  40b7d4:	e045      	b.n	40b862 <pio_configure_pin_group+0x10e>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40b7d6:	68f8      	ldr	r0, [r7, #12]
  40b7d8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b7dc:	68ba      	ldr	r2, [r7, #8]
  40b7de:	4b23      	ldr	r3, [pc, #140]	; (40b86c <pio_configure_pin_group+0x118>)
  40b7e0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40b7e2:	687b      	ldr	r3, [r7, #4]
  40b7e4:	f003 0301 	and.w	r3, r3, #1
  40b7e8:	68f8      	ldr	r0, [r7, #12]
  40b7ea:	68b9      	ldr	r1, [r7, #8]
  40b7ec:	461a      	mov	r2, r3
  40b7ee:	4b20      	ldr	r3, [pc, #128]	; (40b870 <pio_configure_pin_group+0x11c>)
  40b7f0:	4798      	blx	r3
		break;
  40b7f2:	e036      	b.n	40b862 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40b7f4:	68f8      	ldr	r0, [r7, #12]
  40b7f6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40b7fa:	68ba      	ldr	r2, [r7, #8]
  40b7fc:	4b1b      	ldr	r3, [pc, #108]	; (40b86c <pio_configure_pin_group+0x118>)
  40b7fe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40b800:	687b      	ldr	r3, [r7, #4]
  40b802:	f003 0301 	and.w	r3, r3, #1
  40b806:	68f8      	ldr	r0, [r7, #12]
  40b808:	68b9      	ldr	r1, [r7, #8]
  40b80a:	461a      	mov	r2, r3
  40b80c:	4b18      	ldr	r3, [pc, #96]	; (40b870 <pio_configure_pin_group+0x11c>)
  40b80e:	4798      	blx	r3
		break;
  40b810:	e027      	b.n	40b862 <pio_configure_pin_group+0x10e>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40b812:	68f8      	ldr	r0, [r7, #12]
  40b814:	68b9      	ldr	r1, [r7, #8]
  40b816:	687a      	ldr	r2, [r7, #4]
  40b818:	4b16      	ldr	r3, [pc, #88]	; (40b874 <pio_configure_pin_group+0x120>)
  40b81a:	4798      	blx	r3
		break;
  40b81c:	e021      	b.n	40b862 <pio_configure_pin_group+0x10e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40b81e:	687b      	ldr	r3, [r7, #4]
  40b820:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40b824:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b828:	bf14      	ite	ne
  40b82a:	2300      	movne	r3, #0
  40b82c:	2301      	moveq	r3, #1
  40b82e:	b2db      	uxtb	r3, r3
  40b830:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40b832:	687b      	ldr	r3, [r7, #4]
  40b834:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40b838:	2b00      	cmp	r3, #0
  40b83a:	bf0c      	ite	eq
  40b83c:	2300      	moveq	r3, #0
  40b83e:	2301      	movne	r3, #1
  40b840:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40b842:	6879      	ldr	r1, [r7, #4]
  40b844:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40b848:	2900      	cmp	r1, #0
  40b84a:	bf0c      	ite	eq
  40b84c:	2100      	moveq	r1, #0
  40b84e:	2101      	movne	r1, #1
  40b850:	b2c9      	uxtb	r1, r1
  40b852:	9100      	str	r1, [sp, #0]
  40b854:	68f8      	ldr	r0, [r7, #12]
  40b856:	68b9      	ldr	r1, [r7, #8]
  40b858:	4c07      	ldr	r4, [pc, #28]	; (40b878 <pio_configure_pin_group+0x124>)
  40b85a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40b85c:	e001      	b.n	40b862 <pio_configure_pin_group+0x10e>

	default:
		return 0;
  40b85e:	2300      	movs	r3, #0
  40b860:	e000      	b.n	40b864 <pio_configure_pin_group+0x110>
	}

	return 1;
  40b862:	2301      	movs	r3, #1
}
  40b864:	4618      	mov	r0, r3
  40b866:	3714      	adds	r7, #20
  40b868:	46bd      	mov	sp, r7
  40b86a:	bd90      	pop	{r4, r7, pc}
  40b86c:	0040b229 	.word	0x0040b229
  40b870:	0040b1fd 	.word	0x0040b1fd
  40b874:	0040b339 	.word	0x0040b339
  40b878:	0040b3b5 	.word	0x0040b3b5

0040b87c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40b87c:	b480      	push	{r7}
  40b87e:	b085      	sub	sp, #20
  40b880:	af00      	add	r7, sp, #0
  40b882:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40b884:	687b      	ldr	r3, [r7, #4]
  40b886:	095b      	lsrs	r3, r3, #5
  40b888:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40b88c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40b890:	025b      	lsls	r3, r3, #9
  40b892:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40b894:	68fb      	ldr	r3, [r7, #12]
}
  40b896:	4618      	mov	r0, r3
  40b898:	3714      	adds	r7, #20
  40b89a:	46bd      	mov	sp, r7
  40b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b8a0:	4770      	bx	lr
  40b8a2:	bf00      	nop

0040b8a4 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  40b8a4:	b480      	push	{r7}
  40b8a6:	b085      	sub	sp, #20
  40b8a8:	af00      	add	r7, sp, #0
  40b8aa:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  40b8ac:	687b      	ldr	r3, [r7, #4]
  40b8ae:	095b      	lsrs	r3, r3, #5
  40b8b0:	330b      	adds	r3, #11
  40b8b2:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  40b8b4:	68fb      	ldr	r3, [r7, #12]
}
  40b8b6:	4618      	mov	r0, r3
  40b8b8:	3714      	adds	r7, #20
  40b8ba:	46bd      	mov	sp, r7
  40b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b8c0:	4770      	bx	lr
  40b8c2:	bf00      	nop

0040b8c4 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  40b8c4:	b480      	push	{r7}
  40b8c6:	b085      	sub	sp, #20
  40b8c8:	af00      	add	r7, sp, #0
  40b8ca:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  40b8cc:	687b      	ldr	r3, [r7, #4]
  40b8ce:	f003 031f 	and.w	r3, r3, #31
  40b8d2:	2201      	movs	r2, #1
  40b8d4:	fa02 f303 	lsl.w	r3, r2, r3
  40b8d8:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  40b8da:	68fb      	ldr	r3, [r7, #12]
}
  40b8dc:	4618      	mov	r0, r3
  40b8de:	3714      	adds	r7, #20
  40b8e0:	46bd      	mov	sp, r7
  40b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b8e6:	4770      	bx	lr

0040b8e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40b8e8:	b580      	push	{r7, lr}
  40b8ea:	b084      	sub	sp, #16
  40b8ec:	af00      	add	r7, sp, #0
  40b8ee:	6078      	str	r0, [r7, #4]
  40b8f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40b8f2:	6878      	ldr	r0, [r7, #4]
  40b8f4:	4b2a      	ldr	r3, [pc, #168]	; (40b9a0 <pio_handler_process+0xb8>)
  40b8f6:	4798      	blx	r3
  40b8f8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40b8fa:	6878      	ldr	r0, [r7, #4]
  40b8fc:	4b29      	ldr	r3, [pc, #164]	; (40b9a4 <pio_handler_process+0xbc>)
  40b8fe:	4798      	blx	r3
  40b900:	4603      	mov	r3, r0
  40b902:	68fa      	ldr	r2, [r7, #12]
  40b904:	4013      	ands	r3, r2
  40b906:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40b908:	68fb      	ldr	r3, [r7, #12]
  40b90a:	2b00      	cmp	r3, #0
  40b90c:	d039      	beq.n	40b982 <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  40b90e:	2300      	movs	r3, #0
  40b910:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40b912:	e033      	b.n	40b97c <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40b914:	4a24      	ldr	r2, [pc, #144]	; (40b9a8 <pio_handler_process+0xc0>)
  40b916:	68bb      	ldr	r3, [r7, #8]
  40b918:	011b      	lsls	r3, r3, #4
  40b91a:	4413      	add	r3, r2
  40b91c:	681a      	ldr	r2, [r3, #0]
  40b91e:	683b      	ldr	r3, [r7, #0]
  40b920:	429a      	cmp	r2, r3
  40b922:	d124      	bne.n	40b96e <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40b924:	4a20      	ldr	r2, [pc, #128]	; (40b9a8 <pio_handler_process+0xc0>)
  40b926:	68bb      	ldr	r3, [r7, #8]
  40b928:	011b      	lsls	r3, r3, #4
  40b92a:	4413      	add	r3, r2
  40b92c:	685a      	ldr	r2, [r3, #4]
  40b92e:	68fb      	ldr	r3, [r7, #12]
  40b930:	4013      	ands	r3, r2
  40b932:	2b00      	cmp	r3, #0
  40b934:	d01b      	beq.n	40b96e <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40b936:	4a1c      	ldr	r2, [pc, #112]	; (40b9a8 <pio_handler_process+0xc0>)
  40b938:	68bb      	ldr	r3, [r7, #8]
  40b93a:	011b      	lsls	r3, r3, #4
  40b93c:	4413      	add	r3, r2
  40b93e:	3308      	adds	r3, #8
  40b940:	685b      	ldr	r3, [r3, #4]
  40b942:	4919      	ldr	r1, [pc, #100]	; (40b9a8 <pio_handler_process+0xc0>)
  40b944:	68ba      	ldr	r2, [r7, #8]
  40b946:	0112      	lsls	r2, r2, #4
  40b948:	440a      	add	r2, r1
  40b94a:	6811      	ldr	r1, [r2, #0]
  40b94c:	4816      	ldr	r0, [pc, #88]	; (40b9a8 <pio_handler_process+0xc0>)
  40b94e:	68ba      	ldr	r2, [r7, #8]
  40b950:	0112      	lsls	r2, r2, #4
  40b952:	4402      	add	r2, r0
  40b954:	6852      	ldr	r2, [r2, #4]
  40b956:	4608      	mov	r0, r1
  40b958:	4611      	mov	r1, r2
  40b95a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40b95c:	4a12      	ldr	r2, [pc, #72]	; (40b9a8 <pio_handler_process+0xc0>)
  40b95e:	68bb      	ldr	r3, [r7, #8]
  40b960:	011b      	lsls	r3, r3, #4
  40b962:	4413      	add	r3, r2
  40b964:	685b      	ldr	r3, [r3, #4]
  40b966:	43db      	mvns	r3, r3
  40b968:	68fa      	ldr	r2, [r7, #12]
  40b96a:	4013      	ands	r3, r2
  40b96c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40b96e:	68bb      	ldr	r3, [r7, #8]
  40b970:	3301      	adds	r3, #1
  40b972:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40b974:	68bb      	ldr	r3, [r7, #8]
  40b976:	2b0b      	cmp	r3, #11
  40b978:	d900      	bls.n	40b97c <pio_handler_process+0x94>
				break;
  40b97a:	e002      	b.n	40b982 <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40b97c:	68fb      	ldr	r3, [r7, #12]
  40b97e:	2b00      	cmp	r3, #0
  40b980:	d1c8      	bne.n	40b914 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40b982:	4b0a      	ldr	r3, [pc, #40]	; (40b9ac <pio_handler_process+0xc4>)
  40b984:	681b      	ldr	r3, [r3, #0]
  40b986:	2b00      	cmp	r3, #0
  40b988:	d007      	beq.n	40b99a <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  40b98a:	4b09      	ldr	r3, [pc, #36]	; (40b9b0 <pio_handler_process+0xc8>)
  40b98c:	681b      	ldr	r3, [r3, #0]
  40b98e:	2b00      	cmp	r3, #0
  40b990:	d003      	beq.n	40b99a <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  40b992:	4b07      	ldr	r3, [pc, #28]	; (40b9b0 <pio_handler_process+0xc8>)
  40b994:	681b      	ldr	r3, [r3, #0]
  40b996:	6878      	ldr	r0, [r7, #4]
  40b998:	4798      	blx	r3
		}
	}
#endif
}
  40b99a:	3710      	adds	r7, #16
  40b99c:	46bd      	mov	sp, r7
  40b99e:	bd80      	pop	{r7, pc}
  40b9a0:	0040b4c1 	.word	0x0040b4c1
  40b9a4:	0040b4d9 	.word	0x0040b4d9
  40b9a8:	200023b8 	.word	0x200023b8
  40b9ac:	200040e4 	.word	0x200040e4
  40b9b0:	2000247c 	.word	0x2000247c

0040b9b4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40b9b4:	b580      	push	{r7, lr}
  40b9b6:	b086      	sub	sp, #24
  40b9b8:	af00      	add	r7, sp, #0
  40b9ba:	60f8      	str	r0, [r7, #12]
  40b9bc:	60b9      	str	r1, [r7, #8]
  40b9be:	607a      	str	r2, [r7, #4]
  40b9c0:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40b9c2:	4b13      	ldr	r3, [pc, #76]	; (40ba10 <pio_handler_set+0x5c>)
  40b9c4:	681b      	ldr	r3, [r3, #0]
  40b9c6:	2b0b      	cmp	r3, #11
  40b9c8:	d901      	bls.n	40b9ce <pio_handler_set+0x1a>
		return 1;
  40b9ca:	2301      	movs	r3, #1
  40b9cc:	e01c      	b.n	40ba08 <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40b9ce:	4b10      	ldr	r3, [pc, #64]	; (40ba10 <pio_handler_set+0x5c>)
  40b9d0:	681b      	ldr	r3, [r3, #0]
  40b9d2:	011a      	lsls	r2, r3, #4
  40b9d4:	4b0f      	ldr	r3, [pc, #60]	; (40ba14 <pio_handler_set+0x60>)
  40b9d6:	4413      	add	r3, r2
  40b9d8:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  40b9da:	697b      	ldr	r3, [r7, #20]
  40b9dc:	68ba      	ldr	r2, [r7, #8]
  40b9de:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40b9e0:	697b      	ldr	r3, [r7, #20]
  40b9e2:	687a      	ldr	r2, [r7, #4]
  40b9e4:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40b9e6:	697b      	ldr	r3, [r7, #20]
  40b9e8:	683a      	ldr	r2, [r7, #0]
  40b9ea:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40b9ec:	697b      	ldr	r3, [r7, #20]
  40b9ee:	6a3a      	ldr	r2, [r7, #32]
  40b9f0:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  40b9f2:	4b07      	ldr	r3, [pc, #28]	; (40ba10 <pio_handler_set+0x5c>)
  40b9f4:	681b      	ldr	r3, [r3, #0]
  40b9f6:	1c5a      	adds	r2, r3, #1
  40b9f8:	4b05      	ldr	r3, [pc, #20]	; (40ba10 <pio_handler_set+0x5c>)
  40b9fa:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40b9fc:	68f8      	ldr	r0, [r7, #12]
  40b9fe:	6879      	ldr	r1, [r7, #4]
  40ba00:	683a      	ldr	r2, [r7, #0]
  40ba02:	4b05      	ldr	r3, [pc, #20]	; (40ba18 <pio_handler_set+0x64>)
  40ba04:	4798      	blx	r3

	return 0;
  40ba06:	2300      	movs	r3, #0
}
  40ba08:	4618      	mov	r0, r3
  40ba0a:	3718      	adds	r7, #24
  40ba0c:	46bd      	mov	sp, r7
  40ba0e:	bd80      	pop	{r7, pc}
  40ba10:	20002478 	.word	0x20002478
  40ba14:	200023b8 	.word	0x200023b8
  40ba18:	0040b419 	.word	0x0040b419

0040ba1c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40ba1c:	b580      	push	{r7, lr}
  40ba1e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40ba20:	4802      	ldr	r0, [pc, #8]	; (40ba2c <PIOA_Handler+0x10>)
  40ba22:	210b      	movs	r1, #11
  40ba24:	4b02      	ldr	r3, [pc, #8]	; (40ba30 <PIOA_Handler+0x14>)
  40ba26:	4798      	blx	r3
}
  40ba28:	bd80      	pop	{r7, pc}
  40ba2a:	bf00      	nop
  40ba2c:	400e0e00 	.word	0x400e0e00
  40ba30:	0040b8e9 	.word	0x0040b8e9

0040ba34 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40ba34:	b580      	push	{r7, lr}
  40ba36:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40ba38:	4802      	ldr	r0, [pc, #8]	; (40ba44 <PIOB_Handler+0x10>)
  40ba3a:	210c      	movs	r1, #12
  40ba3c:	4b02      	ldr	r3, [pc, #8]	; (40ba48 <PIOB_Handler+0x14>)
  40ba3e:	4798      	blx	r3
}
  40ba40:	bd80      	pop	{r7, pc}
  40ba42:	bf00      	nop
  40ba44:	400e1000 	.word	0x400e1000
  40ba48:	0040b8e9 	.word	0x0040b8e9

0040ba4c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40ba4c:	b480      	push	{r7}
  40ba4e:	b085      	sub	sp, #20
  40ba50:	af00      	add	r7, sp, #0
  40ba52:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40ba54:	4b1d      	ldr	r3, [pc, #116]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40ba56:	4a1d      	ldr	r2, [pc, #116]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40ba58:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40ba5a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40ba5e:	687a      	ldr	r2, [r7, #4]
  40ba60:	430a      	orrs	r2, r1
  40ba62:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40ba64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40ba68:	60fb      	str	r3, [r7, #12]
  40ba6a:	e007      	b.n	40ba7c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40ba6c:	68fb      	ldr	r3, [r7, #12]
  40ba6e:	2b00      	cmp	r3, #0
  40ba70:	d101      	bne.n	40ba76 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40ba72:	2301      	movs	r3, #1
  40ba74:	e023      	b.n	40babe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40ba76:	68fb      	ldr	r3, [r7, #12]
  40ba78:	3b01      	subs	r3, #1
  40ba7a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40ba7c:	4b13      	ldr	r3, [pc, #76]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40ba7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40ba80:	f003 0308 	and.w	r3, r3, #8
  40ba84:	2b00      	cmp	r3, #0
  40ba86:	d0f1      	beq.n	40ba6c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40ba88:	4b10      	ldr	r3, [pc, #64]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40ba8a:	4a10      	ldr	r2, [pc, #64]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40ba8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40ba8e:	f022 0203 	bic.w	r2, r2, #3
  40ba92:	f042 0202 	orr.w	r2, r2, #2
  40ba96:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40ba98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40ba9c:	60fb      	str	r3, [r7, #12]
  40ba9e:	e007      	b.n	40bab0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40baa0:	68fb      	ldr	r3, [r7, #12]
  40baa2:	2b00      	cmp	r3, #0
  40baa4:	d101      	bne.n	40baaa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40baa6:	2301      	movs	r3, #1
  40baa8:	e009      	b.n	40babe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40baaa:	68fb      	ldr	r3, [r7, #12]
  40baac:	3b01      	subs	r3, #1
  40baae:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40bab0:	4b06      	ldr	r3, [pc, #24]	; (40bacc <pmc_switch_mck_to_pllack+0x80>)
  40bab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bab4:	f003 0308 	and.w	r3, r3, #8
  40bab8:	2b00      	cmp	r3, #0
  40baba:	d0f1      	beq.n	40baa0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40babc:	2300      	movs	r3, #0
}
  40babe:	4618      	mov	r0, r3
  40bac0:	3714      	adds	r7, #20
  40bac2:	46bd      	mov	sp, r7
  40bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bac8:	4770      	bx	lr
  40baca:	bf00      	nop
  40bacc:	400e0400 	.word	0x400e0400

0040bad0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40bad0:	b480      	push	{r7}
  40bad2:	b083      	sub	sp, #12
  40bad4:	af00      	add	r7, sp, #0
  40bad6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40bad8:	687b      	ldr	r3, [r7, #4]
  40bada:	2b01      	cmp	r3, #1
  40badc:	d107      	bne.n	40baee <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40bade:	4a08      	ldr	r2, [pc, #32]	; (40bb00 <pmc_switch_sclk_to_32kxtal+0x30>)
  40bae0:	4b07      	ldr	r3, [pc, #28]	; (40bb00 <pmc_switch_sclk_to_32kxtal+0x30>)
  40bae2:	689b      	ldr	r3, [r3, #8]
  40bae4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40bae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40baec:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40baee:	4b04      	ldr	r3, [pc, #16]	; (40bb00 <pmc_switch_sclk_to_32kxtal+0x30>)
  40baf0:	4a04      	ldr	r2, [pc, #16]	; (40bb04 <pmc_switch_sclk_to_32kxtal+0x34>)
  40baf2:	601a      	str	r2, [r3, #0]
}
  40baf4:	370c      	adds	r7, #12
  40baf6:	46bd      	mov	sp, r7
  40baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bafc:	4770      	bx	lr
  40bafe:	bf00      	nop
  40bb00:	400e1410 	.word	0x400e1410
  40bb04:	a5000008 	.word	0xa5000008

0040bb08 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40bb08:	b480      	push	{r7}
  40bb0a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40bb0c:	4b09      	ldr	r3, [pc, #36]	; (40bb34 <pmc_osc_is_ready_32kxtal+0x2c>)
  40bb0e:	695b      	ldr	r3, [r3, #20]
  40bb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40bb14:	2b00      	cmp	r3, #0
  40bb16:	d007      	beq.n	40bb28 <pmc_osc_is_ready_32kxtal+0x20>
  40bb18:	4b07      	ldr	r3, [pc, #28]	; (40bb38 <pmc_osc_is_ready_32kxtal+0x30>)
  40bb1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40bb20:	2b00      	cmp	r3, #0
  40bb22:	d001      	beq.n	40bb28 <pmc_osc_is_ready_32kxtal+0x20>
  40bb24:	2301      	movs	r3, #1
  40bb26:	e000      	b.n	40bb2a <pmc_osc_is_ready_32kxtal+0x22>
  40bb28:	2300      	movs	r3, #0
}
  40bb2a:	4618      	mov	r0, r3
  40bb2c:	46bd      	mov	sp, r7
  40bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb32:	4770      	bx	lr
  40bb34:	400e1410 	.word	0x400e1410
  40bb38:	400e0400 	.word	0x400e0400

0040bb3c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40bb3c:	b480      	push	{r7}
  40bb3e:	b083      	sub	sp, #12
  40bb40:	af00      	add	r7, sp, #0
  40bb42:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40bb44:	4a18      	ldr	r2, [pc, #96]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb46:	4b18      	ldr	r3, [pc, #96]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb48:	6a1b      	ldr	r3, [r3, #32]
  40bb4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bb4e:	f043 0308 	orr.w	r3, r3, #8
  40bb52:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40bb54:	bf00      	nop
  40bb56:	4b14      	ldr	r3, [pc, #80]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40bb5e:	2b00      	cmp	r3, #0
  40bb60:	d0f9      	beq.n	40bb56 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40bb62:	4a11      	ldr	r2, [pc, #68]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb64:	4b10      	ldr	r3, [pc, #64]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb66:	6a1b      	ldr	r3, [r3, #32]
  40bb68:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40bb70:	6879      	ldr	r1, [r7, #4]
  40bb72:	430b      	orrs	r3, r1
  40bb74:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40bb78:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40bb7a:	bf00      	nop
  40bb7c:	4b0a      	ldr	r3, [pc, #40]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40bb84:	2b00      	cmp	r3, #0
  40bb86:	d0f9      	beq.n	40bb7c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40bb88:	4a07      	ldr	r2, [pc, #28]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb8a:	4b07      	ldr	r3, [pc, #28]	; (40bba8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40bb8c:	6a1b      	ldr	r3, [r3, #32]
  40bb8e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40bb92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40bb96:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bb9a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40bb9c:	370c      	adds	r7, #12
  40bb9e:	46bd      	mov	sp, r7
  40bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bba4:	4770      	bx	lr
  40bba6:	bf00      	nop
  40bba8:	400e0400 	.word	0x400e0400

0040bbac <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40bbac:	b480      	push	{r7}
  40bbae:	b083      	sub	sp, #12
  40bbb0:	af00      	add	r7, sp, #0
  40bbb2:	6078      	str	r0, [r7, #4]
  40bbb4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40bbb6:	687b      	ldr	r3, [r7, #4]
  40bbb8:	2b00      	cmp	r3, #0
  40bbba:	d008      	beq.n	40bbce <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40bbbc:	4916      	ldr	r1, [pc, #88]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbbe:	4b16      	ldr	r3, [pc, #88]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbc0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40bbc2:	4a16      	ldr	r2, [pc, #88]	; (40bc1c <pmc_switch_mainck_to_xtal+0x70>)
  40bbc4:	401a      	ands	r2, r3
  40bbc6:	4b16      	ldr	r3, [pc, #88]	; (40bc20 <pmc_switch_mainck_to_xtal+0x74>)
  40bbc8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40bbca:	620b      	str	r3, [r1, #32]
  40bbcc:	e01e      	b.n	40bc0c <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40bbce:	4a12      	ldr	r2, [pc, #72]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbd0:	4b11      	ldr	r3, [pc, #68]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbd2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40bbd4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bbd8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40bbdc:	6839      	ldr	r1, [r7, #0]
  40bbde:	0209      	lsls	r1, r1, #8
  40bbe0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40bbe2:	430b      	orrs	r3, r1
  40bbe4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bbe8:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40bbec:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40bbee:	bf00      	nop
  40bbf0:	4b09      	ldr	r3, [pc, #36]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bbf4:	f003 0301 	and.w	r3, r3, #1
  40bbf8:	2b00      	cmp	r3, #0
  40bbfa:	d0f9      	beq.n	40bbf0 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40bbfc:	4a06      	ldr	r2, [pc, #24]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bbfe:	4b06      	ldr	r3, [pc, #24]	; (40bc18 <pmc_switch_mainck_to_xtal+0x6c>)
  40bc00:	6a1b      	ldr	r3, [r3, #32]
  40bc02:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40bc06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40bc0a:	6213      	str	r3, [r2, #32]
	}
}
  40bc0c:	370c      	adds	r7, #12
  40bc0e:	46bd      	mov	sp, r7
  40bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc14:	4770      	bx	lr
  40bc16:	bf00      	nop
  40bc18:	400e0400 	.word	0x400e0400
  40bc1c:	fec8fffc 	.word	0xfec8fffc
  40bc20:	01370002 	.word	0x01370002

0040bc24 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40bc24:	b480      	push	{r7}
  40bc26:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40bc28:	4b04      	ldr	r3, [pc, #16]	; (40bc3c <pmc_osc_is_ready_mainck+0x18>)
  40bc2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bc2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40bc30:	4618      	mov	r0, r3
  40bc32:	46bd      	mov	sp, r7
  40bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc38:	4770      	bx	lr
  40bc3a:	bf00      	nop
  40bc3c:	400e0400 	.word	0x400e0400

0040bc40 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40bc40:	b480      	push	{r7}
  40bc42:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40bc44:	4b03      	ldr	r3, [pc, #12]	; (40bc54 <pmc_disable_pllack+0x14>)
  40bc46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40bc4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40bc4c:	46bd      	mov	sp, r7
  40bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc52:	4770      	bx	lr
  40bc54:	400e0400 	.word	0x400e0400

0040bc58 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40bc58:	b480      	push	{r7}
  40bc5a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40bc5c:	4b04      	ldr	r3, [pc, #16]	; (40bc70 <pmc_is_locked_pllack+0x18>)
  40bc5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bc60:	f003 0302 	and.w	r3, r3, #2
}
  40bc64:	4618      	mov	r0, r3
  40bc66:	46bd      	mov	sp, r7
  40bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc6c:	4770      	bx	lr
  40bc6e:	bf00      	nop
  40bc70:	400e0400 	.word	0x400e0400

0040bc74 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40bc74:	b480      	push	{r7}
  40bc76:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40bc78:	4b03      	ldr	r3, [pc, #12]	; (40bc88 <pmc_disable_pllbck+0x14>)
  40bc7a:	2200      	movs	r2, #0
  40bc7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40bc7e:	46bd      	mov	sp, r7
  40bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc84:	4770      	bx	lr
  40bc86:	bf00      	nop
  40bc88:	400e0400 	.word	0x400e0400

0040bc8c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40bc8c:	b480      	push	{r7}
  40bc8e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40bc90:	4b04      	ldr	r3, [pc, #16]	; (40bca4 <pmc_is_locked_pllbck+0x18>)
  40bc92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bc94:	f003 0304 	and.w	r3, r3, #4
}
  40bc98:	4618      	mov	r0, r3
  40bc9a:	46bd      	mov	sp, r7
  40bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bca0:	4770      	bx	lr
  40bca2:	bf00      	nop
  40bca4:	400e0400 	.word	0x400e0400

0040bca8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40bca8:	b480      	push	{r7}
  40bcaa:	b083      	sub	sp, #12
  40bcac:	af00      	add	r7, sp, #0
  40bcae:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40bcb0:	687b      	ldr	r3, [r7, #4]
  40bcb2:	2b22      	cmp	r3, #34	; 0x22
  40bcb4:	d901      	bls.n	40bcba <pmc_enable_periph_clk+0x12>
		return 1;
  40bcb6:	2301      	movs	r3, #1
  40bcb8:	e02f      	b.n	40bd1a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40bcba:	687b      	ldr	r3, [r7, #4]
  40bcbc:	2b1f      	cmp	r3, #31
  40bcbe:	d813      	bhi.n	40bce8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40bcc0:	4b19      	ldr	r3, [pc, #100]	; (40bd28 <pmc_enable_periph_clk+0x80>)
  40bcc2:	699a      	ldr	r2, [r3, #24]
  40bcc4:	687b      	ldr	r3, [r7, #4]
  40bcc6:	2101      	movs	r1, #1
  40bcc8:	fa01 f303 	lsl.w	r3, r1, r3
  40bccc:	401a      	ands	r2, r3
  40bcce:	687b      	ldr	r3, [r7, #4]
  40bcd0:	2101      	movs	r1, #1
  40bcd2:	fa01 f303 	lsl.w	r3, r1, r3
  40bcd6:	429a      	cmp	r2, r3
  40bcd8:	d01e      	beq.n	40bd18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40bcda:	4b13      	ldr	r3, [pc, #76]	; (40bd28 <pmc_enable_periph_clk+0x80>)
  40bcdc:	687a      	ldr	r2, [r7, #4]
  40bcde:	2101      	movs	r1, #1
  40bce0:	fa01 f202 	lsl.w	r2, r1, r2
  40bce4:	611a      	str	r2, [r3, #16]
  40bce6:	e017      	b.n	40bd18 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40bce8:	687b      	ldr	r3, [r7, #4]
  40bcea:	3b20      	subs	r3, #32
  40bcec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40bcee:	4b0e      	ldr	r3, [pc, #56]	; (40bd28 <pmc_enable_periph_clk+0x80>)
  40bcf0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40bcf4:	687b      	ldr	r3, [r7, #4]
  40bcf6:	2101      	movs	r1, #1
  40bcf8:	fa01 f303 	lsl.w	r3, r1, r3
  40bcfc:	401a      	ands	r2, r3
  40bcfe:	687b      	ldr	r3, [r7, #4]
  40bd00:	2101      	movs	r1, #1
  40bd02:	fa01 f303 	lsl.w	r3, r1, r3
  40bd06:	429a      	cmp	r2, r3
  40bd08:	d006      	beq.n	40bd18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40bd0a:	4b07      	ldr	r3, [pc, #28]	; (40bd28 <pmc_enable_periph_clk+0x80>)
  40bd0c:	687a      	ldr	r2, [r7, #4]
  40bd0e:	2101      	movs	r1, #1
  40bd10:	fa01 f202 	lsl.w	r2, r1, r2
  40bd14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40bd18:	2300      	movs	r3, #0
}
  40bd1a:	4618      	mov	r0, r3
  40bd1c:	370c      	adds	r7, #12
  40bd1e:	46bd      	mov	sp, r7
  40bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd24:	4770      	bx	lr
  40bd26:	bf00      	nop
  40bd28:	400e0400 	.word	0x400e0400

0040bd2c <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  40bd2c:	b480      	push	{r7}
  40bd2e:	b083      	sub	sp, #12
  40bd30:	af00      	add	r7, sp, #0
  40bd32:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40bd34:	687b      	ldr	r3, [r7, #4]
  40bd36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40bd3a:	605a      	str	r2, [r3, #4]

}
  40bd3c:	370c      	adds	r7, #12
  40bd3e:	46bd      	mov	sp, r7
  40bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd44:	4770      	bx	lr
  40bd46:	bf00      	nop

0040bd48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40bd48:	b580      	push	{r7, lr}
  40bd4a:	b084      	sub	sp, #16
  40bd4c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40bd4e:	4b27      	ldr	r3, [pc, #156]	; (40bdec <Reset_Handler+0xa4>)
  40bd50:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40bd52:	4b27      	ldr	r3, [pc, #156]	; (40bdf0 <Reset_Handler+0xa8>)
  40bd54:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40bd56:	68fa      	ldr	r2, [r7, #12]
  40bd58:	68bb      	ldr	r3, [r7, #8]
  40bd5a:	429a      	cmp	r2, r3
  40bd5c:	d90d      	bls.n	40bd7a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40bd5e:	e007      	b.n	40bd70 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40bd60:	68bb      	ldr	r3, [r7, #8]
  40bd62:	1d1a      	adds	r2, r3, #4
  40bd64:	60ba      	str	r2, [r7, #8]
  40bd66:	68fa      	ldr	r2, [r7, #12]
  40bd68:	1d11      	adds	r1, r2, #4
  40bd6a:	60f9      	str	r1, [r7, #12]
  40bd6c:	6812      	ldr	r2, [r2, #0]
  40bd6e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40bd70:	68ba      	ldr	r2, [r7, #8]
  40bd72:	4b20      	ldr	r3, [pc, #128]	; (40bdf4 <Reset_Handler+0xac>)
  40bd74:	429a      	cmp	r2, r3
  40bd76:	d3f3      	bcc.n	40bd60 <Reset_Handler+0x18>
  40bd78:	e020      	b.n	40bdbc <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40bd7a:	68fa      	ldr	r2, [r7, #12]
  40bd7c:	68bb      	ldr	r3, [r7, #8]
  40bd7e:	429a      	cmp	r2, r3
  40bd80:	d21c      	bcs.n	40bdbc <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40bd82:	4a1c      	ldr	r2, [pc, #112]	; (40bdf4 <Reset_Handler+0xac>)
  40bd84:	4b1a      	ldr	r3, [pc, #104]	; (40bdf0 <Reset_Handler+0xa8>)
  40bd86:	1ad3      	subs	r3, r2, r3
  40bd88:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40bd8a:	68fa      	ldr	r2, [r7, #12]
  40bd8c:	687b      	ldr	r3, [r7, #4]
  40bd8e:	4413      	add	r3, r2
  40bd90:	3b04      	subs	r3, #4
  40bd92:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40bd94:	68ba      	ldr	r2, [r7, #8]
  40bd96:	687b      	ldr	r3, [r7, #4]
  40bd98:	4413      	add	r3, r2
  40bd9a:	3b04      	subs	r3, #4
  40bd9c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40bd9e:	e00a      	b.n	40bdb6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40bda0:	68bb      	ldr	r3, [r7, #8]
  40bda2:	1f1a      	subs	r2, r3, #4
  40bda4:	60ba      	str	r2, [r7, #8]
  40bda6:	68fa      	ldr	r2, [r7, #12]
  40bda8:	1f11      	subs	r1, r2, #4
  40bdaa:	60f9      	str	r1, [r7, #12]
  40bdac:	6812      	ldr	r2, [r2, #0]
  40bdae:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40bdb0:	687b      	ldr	r3, [r7, #4]
  40bdb2:	3b04      	subs	r3, #4
  40bdb4:	607b      	str	r3, [r7, #4]
  40bdb6:	687b      	ldr	r3, [r7, #4]
  40bdb8:	2b00      	cmp	r3, #0
  40bdba:	d1f1      	bne.n	40bda0 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40bdbc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bdbe:	4b0e      	ldr	r3, [pc, #56]	; (40bdf8 <Reset_Handler+0xb0>)
  40bdc0:	60bb      	str	r3, [r7, #8]
  40bdc2:	e004      	b.n	40bdce <Reset_Handler+0x86>
		*pDest++ = 0;
  40bdc4:	68bb      	ldr	r3, [r7, #8]
  40bdc6:	1d1a      	adds	r2, r3, #4
  40bdc8:	60ba      	str	r2, [r7, #8]
  40bdca:	2200      	movs	r2, #0
  40bdcc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bdce:	68ba      	ldr	r2, [r7, #8]
  40bdd0:	4b0a      	ldr	r3, [pc, #40]	; (40bdfc <Reset_Handler+0xb4>)
  40bdd2:	429a      	cmp	r2, r3
  40bdd4:	d3f6      	bcc.n	40bdc4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40bdd6:	4b0a      	ldr	r3, [pc, #40]	; (40be00 <Reset_Handler+0xb8>)
  40bdd8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40bdda:	4b0a      	ldr	r3, [pc, #40]	; (40be04 <Reset_Handler+0xbc>)
  40bddc:	68fa      	ldr	r2, [r7, #12]
  40bdde:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40bde0:	4b09      	ldr	r3, [pc, #36]	; (40be08 <Reset_Handler+0xc0>)
  40bde2:	4798      	blx	r3

	/* Branch to main function */
	main();
  40bde4:	4b09      	ldr	r3, [pc, #36]	; (40be0c <Reset_Handler+0xc4>)
  40bde6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40bde8:	e7fe      	b.n	40bde8 <Reset_Handler+0xa0>
  40bdea:	bf00      	nop
  40bdec:	00417214 	.word	0x00417214
  40bdf0:	20000000 	.word	0x20000000
  40bdf4:	20000d94 	.word	0x20000d94
  40bdf8:	20000d94 	.word	0x20000d94
  40bdfc:	200040ec 	.word	0x200040ec
  40be00:	00400000 	.word	0x00400000
  40be04:	e000ed00 	.word	0xe000ed00
  40be08:	0040c8d1 	.word	0x0040c8d1
  40be0c:	0040c1f1 	.word	0x0040c1f1

0040be10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40be10:	b480      	push	{r7}
  40be12:	af00      	add	r7, sp, #0
	while (1) {
	}
  40be14:	e7fe      	b.n	40be14 <Dummy_Handler+0x4>
  40be16:	bf00      	nop

0040be18 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40be18:	b480      	push	{r7}
  40be1a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40be1c:	4b5d      	ldr	r3, [pc, #372]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40be1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40be20:	f003 0303 	and.w	r3, r3, #3
  40be24:	2b03      	cmp	r3, #3
  40be26:	f200 8096 	bhi.w	40bf56 <SystemCoreClockUpdate+0x13e>
  40be2a:	a101      	add	r1, pc, #4	; (adr r1, 40be30 <SystemCoreClockUpdate+0x18>)
  40be2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40be30:	0040be41 	.word	0x0040be41
  40be34:	0040be61 	.word	0x0040be61
  40be38:	0040beab 	.word	0x0040beab
  40be3c:	0040beab 	.word	0x0040beab
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40be40:	4b55      	ldr	r3, [pc, #340]	; (40bf98 <SystemCoreClockUpdate+0x180>)
  40be42:	695b      	ldr	r3, [r3, #20]
  40be44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40be48:	2b00      	cmp	r3, #0
  40be4a:	d004      	beq.n	40be56 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40be4c:	4b53      	ldr	r3, [pc, #332]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40be52:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40be54:	e080      	b.n	40bf58 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40be56:	4b51      	ldr	r3, [pc, #324]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be58:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40be5c:	601a      	str	r2, [r3, #0]
			}
		break;
  40be5e:	e07b      	b.n	40bf58 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40be60:	4b4c      	ldr	r3, [pc, #304]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40be62:	6a1b      	ldr	r3, [r3, #32]
  40be64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40be68:	2b00      	cmp	r3, #0
  40be6a:	d003      	beq.n	40be74 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40be6c:	4b4b      	ldr	r3, [pc, #300]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be6e:	4a4c      	ldr	r2, [pc, #304]	; (40bfa0 <SystemCoreClockUpdate+0x188>)
  40be70:	601a      	str	r2, [r3, #0]
  40be72:	e019      	b.n	40bea8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40be74:	4b49      	ldr	r3, [pc, #292]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be76:	4a4b      	ldr	r2, [pc, #300]	; (40bfa4 <SystemCoreClockUpdate+0x18c>)
  40be78:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40be7a:	4b46      	ldr	r3, [pc, #280]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40be7c:	6a1b      	ldr	r3, [r3, #32]
  40be7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40be82:	2b10      	cmp	r3, #16
  40be84:	d008      	beq.n	40be98 <SystemCoreClockUpdate+0x80>
  40be86:	2b20      	cmp	r3, #32
  40be88:	d00a      	beq.n	40bea0 <SystemCoreClockUpdate+0x88>
  40be8a:	2b00      	cmp	r3, #0
  40be8c:	d000      	beq.n	40be90 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40be8e:	e00b      	b.n	40bea8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40be90:	4b42      	ldr	r3, [pc, #264]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be92:	4a44      	ldr	r2, [pc, #272]	; (40bfa4 <SystemCoreClockUpdate+0x18c>)
  40be94:	601a      	str	r2, [r3, #0]
			break;
  40be96:	e007      	b.n	40bea8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40be98:	4b40      	ldr	r3, [pc, #256]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40be9a:	4a43      	ldr	r2, [pc, #268]	; (40bfa8 <SystemCoreClockUpdate+0x190>)
  40be9c:	601a      	str	r2, [r3, #0]
			break;
  40be9e:	e003      	b.n	40bea8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40bea0:	4b3e      	ldr	r3, [pc, #248]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bea2:	4a3f      	ldr	r2, [pc, #252]	; (40bfa0 <SystemCoreClockUpdate+0x188>)
  40bea4:	601a      	str	r2, [r3, #0]
			break;
  40bea6:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40bea8:	e056      	b.n	40bf58 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40beaa:	4b3a      	ldr	r3, [pc, #232]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40beac:	6a1b      	ldr	r3, [r3, #32]
  40beae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40beb2:	2b00      	cmp	r3, #0
  40beb4:	d003      	beq.n	40bebe <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40beb6:	4b39      	ldr	r3, [pc, #228]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40beb8:	4a39      	ldr	r2, [pc, #228]	; (40bfa0 <SystemCoreClockUpdate+0x188>)
  40beba:	601a      	str	r2, [r3, #0]
  40bebc:	e019      	b.n	40bef2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40bebe:	4b37      	ldr	r3, [pc, #220]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bec0:	4a38      	ldr	r2, [pc, #224]	; (40bfa4 <SystemCoreClockUpdate+0x18c>)
  40bec2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40bec4:	4b33      	ldr	r3, [pc, #204]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bec6:	6a1b      	ldr	r3, [r3, #32]
  40bec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40becc:	2b10      	cmp	r3, #16
  40bece:	d008      	beq.n	40bee2 <SystemCoreClockUpdate+0xca>
  40bed0:	2b20      	cmp	r3, #32
  40bed2:	d00a      	beq.n	40beea <SystemCoreClockUpdate+0xd2>
  40bed4:	2b00      	cmp	r3, #0
  40bed6:	d000      	beq.n	40beda <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40bed8:	e00b      	b.n	40bef2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40beda:	4b30      	ldr	r3, [pc, #192]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bedc:	4a31      	ldr	r2, [pc, #196]	; (40bfa4 <SystemCoreClockUpdate+0x18c>)
  40bede:	601a      	str	r2, [r3, #0]
					break;
  40bee0:	e007      	b.n	40bef2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40bee2:	4b2e      	ldr	r3, [pc, #184]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bee4:	4a30      	ldr	r2, [pc, #192]	; (40bfa8 <SystemCoreClockUpdate+0x190>)
  40bee6:	601a      	str	r2, [r3, #0]
					break;
  40bee8:	e003      	b.n	40bef2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40beea:	4b2c      	ldr	r3, [pc, #176]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40beec:	4a2c      	ldr	r2, [pc, #176]	; (40bfa0 <SystemCoreClockUpdate+0x188>)
  40beee:	601a      	str	r2, [r3, #0]
					break;
  40bef0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40bef2:	4b28      	ldr	r3, [pc, #160]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bef6:	f003 0303 	and.w	r3, r3, #3
  40befa:	2b02      	cmp	r3, #2
  40befc:	d115      	bne.n	40bf2a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40befe:	4b25      	ldr	r3, [pc, #148]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40bf02:	4b2a      	ldr	r3, [pc, #168]	; (40bfac <SystemCoreClockUpdate+0x194>)
  40bf04:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40bf06:	0c1b      	lsrs	r3, r3, #16
  40bf08:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40bf0a:	4a24      	ldr	r2, [pc, #144]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf0c:	6812      	ldr	r2, [r2, #0]
  40bf0e:	fb02 f203 	mul.w	r2, r2, r3
  40bf12:	4b22      	ldr	r3, [pc, #136]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf14:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40bf16:	4b21      	ldr	r3, [pc, #132]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf18:	681a      	ldr	r2, [r3, #0]
  40bf1a:	4b1e      	ldr	r3, [pc, #120]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40bf1e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40bf20:	fbb2 f2f3 	udiv	r2, r2, r3
  40bf24:	4b1d      	ldr	r3, [pc, #116]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf26:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40bf28:	e016      	b.n	40bf58 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40bf2a:	4b1a      	ldr	r3, [pc, #104]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bf2e:	4b1f      	ldr	r3, [pc, #124]	; (40bfac <SystemCoreClockUpdate+0x194>)
  40bf30:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40bf32:	0c1b      	lsrs	r3, r3, #16
  40bf34:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40bf36:	4a19      	ldr	r2, [pc, #100]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf38:	6812      	ldr	r2, [r2, #0]
  40bf3a:	fb02 f203 	mul.w	r2, r2, r3
  40bf3e:	4b17      	ldr	r3, [pc, #92]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf40:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40bf42:	4b16      	ldr	r3, [pc, #88]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf44:	681a      	ldr	r2, [r3, #0]
  40bf46:	4b13      	ldr	r3, [pc, #76]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40bf4a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40bf4c:	fbb2 f2f3 	udiv	r2, r2, r3
  40bf50:	4b12      	ldr	r3, [pc, #72]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf52:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40bf54:	e000      	b.n	40bf58 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40bf56:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40bf58:	4b0e      	ldr	r3, [pc, #56]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bf5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bf60:	2b70      	cmp	r3, #112	; 0x70
  40bf62:	d108      	bne.n	40bf76 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  40bf64:	4b0d      	ldr	r3, [pc, #52]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf66:	681a      	ldr	r2, [r3, #0]
  40bf68:	4b11      	ldr	r3, [pc, #68]	; (40bfb0 <SystemCoreClockUpdate+0x198>)
  40bf6a:	fba3 1302 	umull	r1, r3, r3, r2
  40bf6e:	085a      	lsrs	r2, r3, #1
  40bf70:	4b0a      	ldr	r3, [pc, #40]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf72:	601a      	str	r2, [r3, #0]
  40bf74:	e009      	b.n	40bf8a <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  40bf76:	4b09      	ldr	r3, [pc, #36]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf78:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40bf7a:	4b06      	ldr	r3, [pc, #24]	; (40bf94 <SystemCoreClockUpdate+0x17c>)
  40bf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bf7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bf82:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40bf84:	40da      	lsrs	r2, r3
  40bf86:	4b05      	ldr	r3, [pc, #20]	; (40bf9c <SystemCoreClockUpdate+0x184>)
  40bf88:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40bf8a:	46bd      	mov	sp, r7
  40bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf90:	4770      	bx	lr
  40bf92:	bf00      	nop
  40bf94:	400e0400 	.word	0x400e0400
  40bf98:	400e1410 	.word	0x400e1410
  40bf9c:	200004e8 	.word	0x200004e8
  40bfa0:	00b71b00 	.word	0x00b71b00
  40bfa4:	003d0900 	.word	0x003d0900
  40bfa8:	007a1200 	.word	0x007a1200
  40bfac:	07ff0000 	.word	0x07ff0000
  40bfb0:	aaaaaaab 	.word	0xaaaaaaab

0040bfb4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40bfb4:	b480      	push	{r7}
  40bfb6:	b083      	sub	sp, #12
  40bfb8:	af00      	add	r7, sp, #0
  40bfba:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40bfbc:	687a      	ldr	r2, [r7, #4]
  40bfbe:	4b18      	ldr	r3, [pc, #96]	; (40c020 <system_init_flash+0x6c>)
  40bfc0:	429a      	cmp	r2, r3
  40bfc2:	d804      	bhi.n	40bfce <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40bfc4:	4b17      	ldr	r3, [pc, #92]	; (40c024 <system_init_flash+0x70>)
  40bfc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40bfca:	601a      	str	r2, [r3, #0]
  40bfcc:	e023      	b.n	40c016 <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40bfce:	687a      	ldr	r2, [r7, #4]
  40bfd0:	4b15      	ldr	r3, [pc, #84]	; (40c028 <system_init_flash+0x74>)
  40bfd2:	429a      	cmp	r2, r3
  40bfd4:	d803      	bhi.n	40bfde <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40bfd6:	4b13      	ldr	r3, [pc, #76]	; (40c024 <system_init_flash+0x70>)
  40bfd8:	4a14      	ldr	r2, [pc, #80]	; (40c02c <system_init_flash+0x78>)
  40bfda:	601a      	str	r2, [r3, #0]
  40bfdc:	e01b      	b.n	40c016 <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40bfde:	687a      	ldr	r2, [r7, #4]
  40bfe0:	4b13      	ldr	r3, [pc, #76]	; (40c030 <system_init_flash+0x7c>)
  40bfe2:	429a      	cmp	r2, r3
  40bfe4:	d803      	bhi.n	40bfee <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40bfe6:	4b0f      	ldr	r3, [pc, #60]	; (40c024 <system_init_flash+0x70>)
  40bfe8:	4a12      	ldr	r2, [pc, #72]	; (40c034 <system_init_flash+0x80>)
  40bfea:	601a      	str	r2, [r3, #0]
  40bfec:	e013      	b.n	40c016 <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40bfee:	687a      	ldr	r2, [r7, #4]
  40bff0:	4b11      	ldr	r3, [pc, #68]	; (40c038 <system_init_flash+0x84>)
  40bff2:	429a      	cmp	r2, r3
  40bff4:	d803      	bhi.n	40bffe <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40bff6:	4b0b      	ldr	r3, [pc, #44]	; (40c024 <system_init_flash+0x70>)
  40bff8:	4a10      	ldr	r2, [pc, #64]	; (40c03c <system_init_flash+0x88>)
  40bffa:	601a      	str	r2, [r3, #0]
  40bffc:	e00b      	b.n	40c016 <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40bffe:	687a      	ldr	r2, [r7, #4]
  40c000:	4b0f      	ldr	r3, [pc, #60]	; (40c040 <system_init_flash+0x8c>)
  40c002:	429a      	cmp	r2, r3
  40c004:	d804      	bhi.n	40c010 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40c006:	4b07      	ldr	r3, [pc, #28]	; (40c024 <system_init_flash+0x70>)
  40c008:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40c00c:	601a      	str	r2, [r3, #0]
  40c00e:	e002      	b.n	40c016 <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40c010:	4b04      	ldr	r3, [pc, #16]	; (40c024 <system_init_flash+0x70>)
  40c012:	4a0c      	ldr	r2, [pc, #48]	; (40c044 <system_init_flash+0x90>)
  40c014:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40c016:	370c      	adds	r7, #12
  40c018:	46bd      	mov	sp, r7
  40c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c01e:	4770      	bx	lr
  40c020:	01ba813f 	.word	0x01ba813f
  40c024:	400e0a00 	.word	0x400e0a00
  40c028:	0375027f 	.word	0x0375027f
  40c02c:	04000100 	.word	0x04000100
  40c030:	053ec5ff 	.word	0x053ec5ff
  40c034:	04000200 	.word	0x04000200
  40c038:	00a4cb7f 	.word	0x00a4cb7f
  40c03c:	04000300 	.word	0x04000300
  40c040:	07270dff 	.word	0x07270dff
  40c044:	04000500 	.word	0x04000500

0040c048 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40c048:	b480      	push	{r7}
  40c04a:	b085      	sub	sp, #20
  40c04c:	af00      	add	r7, sp, #0
  40c04e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40c050:	4b10      	ldr	r3, [pc, #64]	; (40c094 <_sbrk+0x4c>)
  40c052:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40c054:	4b10      	ldr	r3, [pc, #64]	; (40c098 <_sbrk+0x50>)
  40c056:	681b      	ldr	r3, [r3, #0]
  40c058:	2b00      	cmp	r3, #0
  40c05a:	d102      	bne.n	40c062 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40c05c:	4b0e      	ldr	r3, [pc, #56]	; (40c098 <_sbrk+0x50>)
  40c05e:	4a0f      	ldr	r2, [pc, #60]	; (40c09c <_sbrk+0x54>)
  40c060:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40c062:	4b0d      	ldr	r3, [pc, #52]	; (40c098 <_sbrk+0x50>)
  40c064:	681b      	ldr	r3, [r3, #0]
  40c066:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40c068:	68ba      	ldr	r2, [r7, #8]
  40c06a:	687b      	ldr	r3, [r7, #4]
  40c06c:	441a      	add	r2, r3
  40c06e:	68fb      	ldr	r3, [r7, #12]
  40c070:	429a      	cmp	r2, r3
  40c072:	dd02      	ble.n	40c07a <_sbrk+0x32>
		return (caddr_t) -1;	
  40c074:	f04f 33ff 	mov.w	r3, #4294967295
  40c078:	e006      	b.n	40c088 <_sbrk+0x40>
	}

	heap += incr;
  40c07a:	4b07      	ldr	r3, [pc, #28]	; (40c098 <_sbrk+0x50>)
  40c07c:	681a      	ldr	r2, [r3, #0]
  40c07e:	687b      	ldr	r3, [r7, #4]
  40c080:	441a      	add	r2, r3
  40c082:	4b05      	ldr	r3, [pc, #20]	; (40c098 <_sbrk+0x50>)
  40c084:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  40c086:	68bb      	ldr	r3, [r7, #8]
}
  40c088:	4618      	mov	r0, r3
  40c08a:	3714      	adds	r7, #20
  40c08c:	46bd      	mov	sp, r7
  40c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c092:	4770      	bx	lr
  40c094:	2000fffc 	.word	0x2000fffc
  40c098:	20002480 	.word	0x20002480
  40c09c:	200070f0 	.word	0x200070f0

0040c0a0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40c0a0:	b480      	push	{r7}
  40c0a2:	b083      	sub	sp, #12
  40c0a4:	af00      	add	r7, sp, #0
  40c0a6:	6078      	str	r0, [r7, #4]
	return -1;
  40c0a8:	f04f 33ff 	mov.w	r3, #4294967295
}
  40c0ac:	4618      	mov	r0, r3
  40c0ae:	370c      	adds	r7, #12
  40c0b0:	46bd      	mov	sp, r7
  40c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0b6:	4770      	bx	lr

0040c0b8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40c0b8:	b480      	push	{r7}
  40c0ba:	b083      	sub	sp, #12
  40c0bc:	af00      	add	r7, sp, #0
  40c0be:	6078      	str	r0, [r7, #4]
  40c0c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40c0c2:	683b      	ldr	r3, [r7, #0]
  40c0c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40c0c8:	605a      	str	r2, [r3, #4]

	return 0;
  40c0ca:	2300      	movs	r3, #0
}
  40c0cc:	4618      	mov	r0, r3
  40c0ce:	370c      	adds	r7, #12
  40c0d0:	46bd      	mov	sp, r7
  40c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0d6:	4770      	bx	lr

0040c0d8 <_isatty>:

extern int _isatty(int file)
{
  40c0d8:	b480      	push	{r7}
  40c0da:	b083      	sub	sp, #12
  40c0dc:	af00      	add	r7, sp, #0
  40c0de:	6078      	str	r0, [r7, #4]
	return 1;
  40c0e0:	2301      	movs	r3, #1
}
  40c0e2:	4618      	mov	r0, r3
  40c0e4:	370c      	adds	r7, #12
  40c0e6:	46bd      	mov	sp, r7
  40c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0ec:	4770      	bx	lr
  40c0ee:	bf00      	nop

0040c0f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40c0f0:	b480      	push	{r7}
  40c0f2:	b085      	sub	sp, #20
  40c0f4:	af00      	add	r7, sp, #0
  40c0f6:	60f8      	str	r0, [r7, #12]
  40c0f8:	60b9      	str	r1, [r7, #8]
  40c0fa:	607a      	str	r2, [r7, #4]
	return 0;
  40c0fc:	2300      	movs	r3, #0
}
  40c0fe:	4618      	mov	r0, r3
  40c100:	3714      	adds	r7, #20
  40c102:	46bd      	mov	sp, r7
  40c104:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c108:	4770      	bx	lr
  40c10a:	bf00      	nop

0040c10c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40c10c:	b480      	push	{r7}
  40c10e:	b083      	sub	sp, #12
  40c110:	af00      	add	r7, sp, #0
  40c112:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40c114:	687b      	ldr	r3, [r7, #4]
  40c116:	2b07      	cmp	r3, #7
  40c118:	d825      	bhi.n	40c166 <osc_get_rate+0x5a>
  40c11a:	a201      	add	r2, pc, #4	; (adr r2, 40c120 <osc_get_rate+0x14>)
  40c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c120:	0040c141 	.word	0x0040c141
  40c124:	0040c147 	.word	0x0040c147
  40c128:	0040c14d 	.word	0x0040c14d
  40c12c:	0040c153 	.word	0x0040c153
  40c130:	0040c157 	.word	0x0040c157
  40c134:	0040c15b 	.word	0x0040c15b
  40c138:	0040c15f 	.word	0x0040c15f
  40c13c:	0040c163 	.word	0x0040c163
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40c140:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40c144:	e010      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40c146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c14a:	e00d      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40c14c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c150:	e00a      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40c152:	4b08      	ldr	r3, [pc, #32]	; (40c174 <osc_get_rate+0x68>)
  40c154:	e008      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40c156:	4b08      	ldr	r3, [pc, #32]	; (40c178 <osc_get_rate+0x6c>)
  40c158:	e006      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40c15a:	4b08      	ldr	r3, [pc, #32]	; (40c17c <osc_get_rate+0x70>)
  40c15c:	e004      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40c15e:	4b08      	ldr	r3, [pc, #32]	; (40c180 <osc_get_rate+0x74>)
  40c160:	e002      	b.n	40c168 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40c162:	4b07      	ldr	r3, [pc, #28]	; (40c180 <osc_get_rate+0x74>)
  40c164:	e000      	b.n	40c168 <osc_get_rate+0x5c>
	}

	return 0;
  40c166:	2300      	movs	r3, #0
}
  40c168:	4618      	mov	r0, r3
  40c16a:	370c      	adds	r7, #12
  40c16c:	46bd      	mov	sp, r7
  40c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c172:	4770      	bx	lr
  40c174:	003d0900 	.word	0x003d0900
  40c178:	007a1200 	.word	0x007a1200
  40c17c:	00b71b00 	.word	0x00b71b00
  40c180:	00f42400 	.word	0x00f42400

0040c184 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40c184:	b580      	push	{r7, lr}
  40c186:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40c188:	2006      	movs	r0, #6
  40c18a:	4b04      	ldr	r3, [pc, #16]	; (40c19c <sysclk_get_main_hz+0x18>)
  40c18c:	4798      	blx	r3
  40c18e:	4602      	mov	r2, r0
  40c190:	4613      	mov	r3, r2
  40c192:	011b      	lsls	r3, r3, #4
  40c194:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40c196:	4618      	mov	r0, r3
  40c198:	bd80      	pop	{r7, pc}
  40c19a:	bf00      	nop
  40c19c:	0040c10d 	.word	0x0040c10d

0040c1a0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40c1a0:	b580      	push	{r7, lr}
  40c1a2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40c1a4:	4b02      	ldr	r3, [pc, #8]	; (40c1b0 <sysclk_get_cpu_hz+0x10>)
  40c1a6:	4798      	blx	r3
  40c1a8:	4603      	mov	r3, r0
  40c1aa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40c1ac:	4618      	mov	r0, r3
  40c1ae:	bd80      	pop	{r7, pc}
  40c1b0:	0040c185 	.word	0x0040c185

0040c1b4 <HardFault_Handler>:
extern drv_uart_config_t usart1Config;
extern brainSettings_t brainSettings; 
volatile unsigned long sgSysTickCount = 0;

void HardFault_Handler()
{
  40c1b4:	b480      	push	{r7}
  40c1b6:	af00      	add	r7, sp, #0
	while(1); 
  40c1b8:	e7fe      	b.n	40c1b8 <HardFault_Handler+0x4>
  40c1ba:	bf00      	nop

0040c1bc <MemManage_Handler>:
}
void MemManage_Handler()
{
  40c1bc:	b480      	push	{r7}
  40c1be:	af00      	add	r7, sp, #0
	while(1); 
  40c1c0:	e7fe      	b.n	40c1c0 <MemManage_Handler+0x4>
  40c1c2:	bf00      	nop

0040c1c4 <BusFault_Handler>:
}
void BusFault_Handler()
{
  40c1c4:	b480      	push	{r7}
  40c1c6:	af00      	add	r7, sp, #0
	while(1); 
  40c1c8:	e7fe      	b.n	40c1c8 <BusFault_Handler+0x4>
  40c1ca:	bf00      	nop

0040c1cc <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  40c1cc:	b480      	push	{r7}
  40c1ce:	af00      	add	r7, sp, #0
	while(1); 
  40c1d0:	e7fe      	b.n	40c1d0 <UsageFault_Handler+0x4>
  40c1d2:	bf00      	nop

0040c1d4 <SysTick_Handler>:

/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
  40c1d4:	b580      	push	{r7, lr}
  40c1d6:	af00      	add	r7, sp, #0
	sgSysTickCount++;
  40c1d8:	4b03      	ldr	r3, [pc, #12]	; (40c1e8 <SysTick_Handler+0x14>)
  40c1da:	681b      	ldr	r3, [r3, #0]
  40c1dc:	1c5a      	adds	r2, r3, #1
  40c1de:	4b02      	ldr	r3, [pc, #8]	; (40c1e8 <SysTick_Handler+0x14>)
  40c1e0:	601a      	str	r2, [r3, #0]
	xPortSysTickHandler();
  40c1e2:	4b02      	ldr	r3, [pc, #8]	; (40c1ec <SysTick_Handler+0x18>)
  40c1e4:	4798      	blx	r3
}
  40c1e6:	bd80      	pop	{r7, pc}
  40c1e8:	20002484 	.word	0x20002484
  40c1ec:	004062f1 	.word	0x004062f1

0040c1f0 <main>:

int main (void)
{
  40c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c1f4:	b087      	sub	sp, #28
  40c1f6:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  40c1f8:	4b3b      	ldr	r3, [pc, #236]	; (40c2e8 <main+0xf8>)
  40c1fa:	2201      	movs	r2, #1
  40c1fc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40c1fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40c202:	b662      	cpsie	i
	//Initialize system clock and peripherals
	sysclk_init();
  40c204:	4b39      	ldr	r3, [pc, #228]	; (40c2ec <main+0xfc>)
  40c206:	4798      	blx	r3
	//turn on pullups for SWDIO (PB5) and SWDIO (PB6)
	PIOB->PIO_PUER |= PIO_PB5 | PIO_PB6; 
  40c208:	4b39      	ldr	r3, [pc, #228]	; (40c2f0 <main+0x100>)
  40c20a:	4a39      	ldr	r2, [pc, #228]	; (40c2f0 <main+0x100>)
  40c20c:	6e52      	ldr	r2, [r2, #100]	; 0x64
  40c20e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  40c212:	665a      	str	r2, [r3, #100]	; 0x64
	board_init();
  40c214:	4b37      	ldr	r3, [pc, #220]	; (40c2f4 <main+0x104>)
  40c216:	4798      	blx	r3
	//
	//
	//
	//
	/*	Create task Main	*/
	if (xTaskCreate(TaskMain, "Main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_STACK_PRIORITY, NULL ) != pdPASS)
  40c218:	2302      	movs	r3, #2
  40c21a:	9300      	str	r3, [sp, #0]
  40c21c:	2300      	movs	r3, #0
  40c21e:	9301      	str	r3, [sp, #4]
  40c220:	2300      	movs	r3, #0
  40c222:	9302      	str	r3, [sp, #8]
  40c224:	2300      	movs	r3, #0
  40c226:	9303      	str	r3, [sp, #12]
  40c228:	4833      	ldr	r0, [pc, #204]	; (40c2f8 <main+0x108>)
  40c22a:	4934      	ldr	r1, [pc, #208]	; (40c2fc <main+0x10c>)
  40c22c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40c230:	2300      	movs	r3, #0
  40c232:	4e33      	ldr	r6, [pc, #204]	; (40c300 <main+0x110>)
  40c234:	47b0      	blx	r6
  40c236:	4603      	mov	r3, r0
  40c238:	2b01      	cmp	r3, #1
  40c23a:	d002      	beq.n	40c242 <main+0x52>
	{
		printf("Failed to create Main task\r\n");
  40c23c:	4831      	ldr	r0, [pc, #196]	; (40c304 <main+0x114>)
  40c23e:	4b32      	ldr	r3, [pc, #200]	; (40c308 <main+0x118>)
  40c240:	4798      	blx	r3
	//snprintf(buf,sizeof(buf), "Starting RTOS \n\r");
	
	//SerialPrint(SS,buf);

	/* Start the scheduler. */
	vTaskStartScheduler();
  40c242:	4b32      	ldr	r3, [pc, #200]	; (40c30c <main+0x11c>)
  40c244:	4798      	blx	r3
	//we should never get here. 
	//while(1);
    drv_gpio_initializeAll();
  40c246:	4b32      	ldr	r3, [pc, #200]	; (40c310 <main+0x120>)
  40c248:	4798      	blx	r3
	uint8_t interval = 0;
  40c24a:	2300      	movs	r3, #0
  40c24c:	71fb      	strb	r3, [r7, #7]
		
		/*	Blink LED according to the input Handler	*/
		
		/*	Debug code */
		
		if(((interval >> 0) & 0x01) == 1)
  40c24e:	79fb      	ldrb	r3, [r7, #7]
  40c250:	f003 0301 	and.w	r3, r3, #1
  40c254:	2b00      	cmp	r3, #0
  40c256:	d109      	bne.n	40c26c <main+0x7c>
		{
			//drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED);
			//drv_gpio_togglePin(DRV_GPIO_PIN_BLE_RST1);
		}
		else if(((interval >> 1) & 0x01) == 1)
  40c258:	79fb      	ldrb	r3, [r7, #7]
  40c25a:	085b      	lsrs	r3, r3, #1
  40c25c:	b2db      	uxtb	r3, r3
  40c25e:	f003 0301 	and.w	r3, r3, #1
  40c262:	2b00      	cmp	r3, #0
  40c264:	d002      	beq.n	40c26c <main+0x7c>
		{
			drv_gpio_togglePin(DRV_GPIO_PIN_BLUE_LED);
  40c266:	200d      	movs	r0, #13
  40c268:	4b2a      	ldr	r3, [pc, #168]	; (40c314 <main+0x124>)
  40c26a:	4798      	blx	r3
		//}		
		//else if(((interval >> 6) & 0x01) == 0)
		//{
			//drv_gpio_togglePin(DRV_GPIO_PIN_JC_DC2);
		//}
		interval++;
  40c26c:	79fb      	ldrb	r3, [r7, #7]
  40c26e:	3301      	adds	r3, #1
  40c270:	71fb      	strb	r3, [r7, #7]
		delay_ms(1000);
  40c272:	4b29      	ldr	r3, [pc, #164]	; (40c318 <main+0x128>)
  40c274:	4798      	blx	r3
  40c276:	4603      	mov	r3, r0
  40c278:	4618      	mov	r0, r3
  40c27a:	f04f 0100 	mov.w	r1, #0
  40c27e:	4602      	mov	r2, r0
  40c280:	460b      	mov	r3, r1
  40c282:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  40c286:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  40c28a:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  40c28e:	4652      	mov	r2, sl
  40c290:	465b      	mov	r3, fp
  40c292:	015d      	lsls	r5, r3, #5
  40c294:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  40c298:	0154      	lsls	r4, r2, #5
  40c29a:	1aa4      	subs	r4, r4, r2
  40c29c:	eb65 0503 	sbc.w	r5, r5, r3
  40c2a0:	1824      	adds	r4, r4, r0
  40c2a2:	eb45 0501 	adc.w	r5, r5, r1
  40c2a6:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  40c2aa:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  40c2ae:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  40c2b2:	4644      	mov	r4, r8
  40c2b4:	464d      	mov	r5, r9
  40c2b6:	4620      	mov	r0, r4
  40c2b8:	4629      	mov	r1, r5
  40c2ba:	f243 62af 	movw	r2, #13999	; 0x36af
  40c2be:	f04f 0300 	mov.w	r3, #0
  40c2c2:	1812      	adds	r2, r2, r0
  40c2c4:	eb43 0301 	adc.w	r3, r3, r1
  40c2c8:	4e14      	ldr	r6, [pc, #80]	; (40c31c <main+0x12c>)
  40c2ca:	4610      	mov	r0, r2
  40c2cc:	4619      	mov	r1, r3
  40c2ce:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40c2d2:	f04f 0300 	mov.w	r3, #0
  40c2d6:	47b0      	blx	r6
  40c2d8:	4602      	mov	r2, r0
  40c2da:	460b      	mov	r3, r1
  40c2dc:	4613      	mov	r3, r2
  40c2de:	4618      	mov	r0, r3
  40c2e0:	4b0f      	ldr	r3, [pc, #60]	; (40c320 <main+0x130>)
  40c2e2:	4798      	blx	r3
	}
  40c2e4:	e7b3      	b.n	40c24e <main+0x5e>
  40c2e6:	bf00      	nop
  40c2e8:	200004e4 	.word	0x200004e4
  40c2ec:	0040ae8d 	.word	0x0040ae8d
  40c2f0:	400e1000 	.word	0x400e1000
  40c2f4:	0040b13d 	.word	0x0040b13d
  40c2f8:	00409f2d 	.word	0x00409f2d
  40c2fc:	00416d84 	.word	0x00416d84
  40c300:	00406a2d 	.word	0x00406a2d
  40c304:	00416d8c 	.word	0x00416d8c
  40c308:	0040c921 	.word	0x0040c921
  40c30c:	00406c09 	.word	0x00406c09
  40c310:	00408025 	.word	0x00408025
  40c314:	004082c9 	.word	0x004082c9
  40c318:	0040c1a1 	.word	0x0040c1a1
  40c31c:	0040c325 	.word	0x0040c325
  40c320:	20000001 	.word	0x20000001

0040c324 <__aeabi_uldivmod>:
  40c324:	b94b      	cbnz	r3, 40c33a <__aeabi_uldivmod+0x16>
  40c326:	b942      	cbnz	r2, 40c33a <__aeabi_uldivmod+0x16>
  40c328:	2900      	cmp	r1, #0
  40c32a:	bf08      	it	eq
  40c32c:	2800      	cmpeq	r0, #0
  40c32e:	d002      	beq.n	40c336 <__aeabi_uldivmod+0x12>
  40c330:	f04f 31ff 	mov.w	r1, #4294967295
  40c334:	4608      	mov	r0, r1
  40c336:	f000 b83b 	b.w	40c3b0 <__aeabi_idiv0>
  40c33a:	b082      	sub	sp, #8
  40c33c:	46ec      	mov	ip, sp
  40c33e:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c342:	f000 f81d 	bl	40c380 <__gnu_uldivmod_helper>
  40c346:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c34a:	b002      	add	sp, #8
  40c34c:	bc0c      	pop	{r2, r3}
  40c34e:	4770      	bx	lr

0040c350 <__gnu_ldivmod_helper>:
  40c350:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c354:	9e06      	ldr	r6, [sp, #24]
  40c356:	4614      	mov	r4, r2
  40c358:	461d      	mov	r5, r3
  40c35a:	4680      	mov	r8, r0
  40c35c:	4689      	mov	r9, r1
  40c35e:	f000 f829 	bl	40c3b4 <__divdi3>
  40c362:	fb04 f301 	mul.w	r3, r4, r1
  40c366:	fb00 3305 	mla	r3, r0, r5, r3
  40c36a:	fba4 4500 	umull	r4, r5, r4, r0
  40c36e:	441d      	add	r5, r3
  40c370:	ebb8 0404 	subs.w	r4, r8, r4
  40c374:	eb69 0505 	sbc.w	r5, r9, r5
  40c378:	e9c6 4500 	strd	r4, r5, [r6]
  40c37c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c380 <__gnu_uldivmod_helper>:
  40c380:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c384:	9e06      	ldr	r6, [sp, #24]
  40c386:	4614      	mov	r4, r2
  40c388:	4680      	mov	r8, r0
  40c38a:	4689      	mov	r9, r1
  40c38c:	461d      	mov	r5, r3
  40c38e:	f000 f95d 	bl	40c64c <__udivdi3>
  40c392:	fb00 f505 	mul.w	r5, r0, r5
  40c396:	fb04 5301 	mla	r3, r4, r1, r5
  40c39a:	fba0 4504 	umull	r4, r5, r0, r4
  40c39e:	441d      	add	r5, r3
  40c3a0:	ebb8 0404 	subs.w	r4, r8, r4
  40c3a4:	eb69 0505 	sbc.w	r5, r9, r5
  40c3a8:	e9c6 4500 	strd	r4, r5, [r6]
  40c3ac:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c3b0 <__aeabi_idiv0>:
  40c3b0:	4770      	bx	lr
  40c3b2:	bf00      	nop

0040c3b4 <__divdi3>:
  40c3b4:	2900      	cmp	r1, #0
  40c3b6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c3ba:	f2c0 809f 	blt.w	40c4fc <__divdi3+0x148>
  40c3be:	2400      	movs	r4, #0
  40c3c0:	2b00      	cmp	r3, #0
  40c3c2:	f2c0 8096 	blt.w	40c4f2 <__divdi3+0x13e>
  40c3c6:	4615      	mov	r5, r2
  40c3c8:	4606      	mov	r6, r0
  40c3ca:	460f      	mov	r7, r1
  40c3cc:	2b00      	cmp	r3, #0
  40c3ce:	d13e      	bne.n	40c44e <__divdi3+0x9a>
  40c3d0:	428a      	cmp	r2, r1
  40c3d2:	d957      	bls.n	40c484 <__divdi3+0xd0>
  40c3d4:	fab2 f382 	clz	r3, r2
  40c3d8:	b14b      	cbz	r3, 40c3ee <__divdi3+0x3a>
  40c3da:	f1c3 0220 	rsb	r2, r3, #32
  40c3de:	fa01 f703 	lsl.w	r7, r1, r3
  40c3e2:	fa20 f202 	lsr.w	r2, r0, r2
  40c3e6:	409d      	lsls	r5, r3
  40c3e8:	4317      	orrs	r7, r2
  40c3ea:	fa00 f603 	lsl.w	r6, r0, r3
  40c3ee:	0c29      	lsrs	r1, r5, #16
  40c3f0:	fbb7 f2f1 	udiv	r2, r7, r1
  40c3f4:	0c33      	lsrs	r3, r6, #16
  40c3f6:	fb01 7c12 	mls	ip, r1, r2, r7
  40c3fa:	b2a8      	uxth	r0, r5
  40c3fc:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40c400:	fb00 f302 	mul.w	r3, r0, r2
  40c404:	42bb      	cmp	r3, r7
  40c406:	d909      	bls.n	40c41c <__divdi3+0x68>
  40c408:	197f      	adds	r7, r7, r5
  40c40a:	f102 3cff 	add.w	ip, r2, #4294967295
  40c40e:	f080 8101 	bcs.w	40c614 <__divdi3+0x260>
  40c412:	42bb      	cmp	r3, r7
  40c414:	f240 80fe 	bls.w	40c614 <__divdi3+0x260>
  40c418:	3a02      	subs	r2, #2
  40c41a:	442f      	add	r7, r5
  40c41c:	1aff      	subs	r7, r7, r3
  40c41e:	fbb7 f3f1 	udiv	r3, r7, r1
  40c422:	b2b6      	uxth	r6, r6
  40c424:	fb01 7113 	mls	r1, r1, r3, r7
  40c428:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40c42c:	fb00 f003 	mul.w	r0, r0, r3
  40c430:	4288      	cmp	r0, r1
  40c432:	d908      	bls.n	40c446 <__divdi3+0x92>
  40c434:	1949      	adds	r1, r1, r5
  40c436:	f103 37ff 	add.w	r7, r3, #4294967295
  40c43a:	f080 80ed 	bcs.w	40c618 <__divdi3+0x264>
  40c43e:	4288      	cmp	r0, r1
  40c440:	f240 80ea 	bls.w	40c618 <__divdi3+0x264>
  40c444:	3b02      	subs	r3, #2
  40c446:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c44a:	2300      	movs	r3, #0
  40c44c:	e003      	b.n	40c456 <__divdi3+0xa2>
  40c44e:	428b      	cmp	r3, r1
  40c450:	d90a      	bls.n	40c468 <__divdi3+0xb4>
  40c452:	2300      	movs	r3, #0
  40c454:	461a      	mov	r2, r3
  40c456:	4610      	mov	r0, r2
  40c458:	4619      	mov	r1, r3
  40c45a:	b114      	cbz	r4, 40c462 <__divdi3+0xae>
  40c45c:	4240      	negs	r0, r0
  40c45e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c462:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c466:	4770      	bx	lr
  40c468:	fab3 f883 	clz	r8, r3
  40c46c:	f1b8 0f00 	cmp.w	r8, #0
  40c470:	f040 8084 	bne.w	40c57c <__divdi3+0x1c8>
  40c474:	428b      	cmp	r3, r1
  40c476:	d302      	bcc.n	40c47e <__divdi3+0xca>
  40c478:	4282      	cmp	r2, r0
  40c47a:	f200 80de 	bhi.w	40c63a <__divdi3+0x286>
  40c47e:	2300      	movs	r3, #0
  40c480:	2201      	movs	r2, #1
  40c482:	e7e8      	b.n	40c456 <__divdi3+0xa2>
  40c484:	b912      	cbnz	r2, 40c48c <__divdi3+0xd8>
  40c486:	2301      	movs	r3, #1
  40c488:	fbb3 f5f2 	udiv	r5, r3, r2
  40c48c:	fab5 f285 	clz	r2, r5
  40c490:	2a00      	cmp	r2, #0
  40c492:	d139      	bne.n	40c508 <__divdi3+0x154>
  40c494:	1b7f      	subs	r7, r7, r5
  40c496:	0c28      	lsrs	r0, r5, #16
  40c498:	fa1f fc85 	uxth.w	ip, r5
  40c49c:	2301      	movs	r3, #1
  40c49e:	fbb7 f1f0 	udiv	r1, r7, r0
  40c4a2:	0c32      	lsrs	r2, r6, #16
  40c4a4:	fb00 7711 	mls	r7, r0, r1, r7
  40c4a8:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c4ac:	fb0c f201 	mul.w	r2, ip, r1
  40c4b0:	42ba      	cmp	r2, r7
  40c4b2:	d907      	bls.n	40c4c4 <__divdi3+0x110>
  40c4b4:	197f      	adds	r7, r7, r5
  40c4b6:	f101 38ff 	add.w	r8, r1, #4294967295
  40c4ba:	d202      	bcs.n	40c4c2 <__divdi3+0x10e>
  40c4bc:	42ba      	cmp	r2, r7
  40c4be:	f200 80c1 	bhi.w	40c644 <__divdi3+0x290>
  40c4c2:	4641      	mov	r1, r8
  40c4c4:	1abf      	subs	r7, r7, r2
  40c4c6:	fbb7 f2f0 	udiv	r2, r7, r0
  40c4ca:	b2b6      	uxth	r6, r6
  40c4cc:	fb00 7012 	mls	r0, r0, r2, r7
  40c4d0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40c4d4:	fb0c fc02 	mul.w	ip, ip, r2
  40c4d8:	4584      	cmp	ip, r0
  40c4da:	d907      	bls.n	40c4ec <__divdi3+0x138>
  40c4dc:	1940      	adds	r0, r0, r5
  40c4de:	f102 37ff 	add.w	r7, r2, #4294967295
  40c4e2:	d202      	bcs.n	40c4ea <__divdi3+0x136>
  40c4e4:	4584      	cmp	ip, r0
  40c4e6:	f200 80ab 	bhi.w	40c640 <__divdi3+0x28c>
  40c4ea:	463a      	mov	r2, r7
  40c4ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40c4f0:	e7b1      	b.n	40c456 <__divdi3+0xa2>
  40c4f2:	43e4      	mvns	r4, r4
  40c4f4:	4252      	negs	r2, r2
  40c4f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c4fa:	e764      	b.n	40c3c6 <__divdi3+0x12>
  40c4fc:	4240      	negs	r0, r0
  40c4fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c502:	f04f 34ff 	mov.w	r4, #4294967295
  40c506:	e75b      	b.n	40c3c0 <__divdi3+0xc>
  40c508:	4095      	lsls	r5, r2
  40c50a:	f1c2 0320 	rsb	r3, r2, #32
  40c50e:	fa27 f103 	lsr.w	r1, r7, r3
  40c512:	0c28      	lsrs	r0, r5, #16
  40c514:	fa26 f303 	lsr.w	r3, r6, r3
  40c518:	4097      	lsls	r7, r2
  40c51a:	fbb1 f8f0 	udiv	r8, r1, r0
  40c51e:	431f      	orrs	r7, r3
  40c520:	0c3b      	lsrs	r3, r7, #16
  40c522:	fb00 1118 	mls	r1, r0, r8, r1
  40c526:	fa1f fc85 	uxth.w	ip, r5
  40c52a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40c52e:	fb0c f308 	mul.w	r3, ip, r8
  40c532:	428b      	cmp	r3, r1
  40c534:	fa06 f602 	lsl.w	r6, r6, r2
  40c538:	d908      	bls.n	40c54c <__divdi3+0x198>
  40c53a:	1949      	adds	r1, r1, r5
  40c53c:	f108 32ff 	add.w	r2, r8, #4294967295
  40c540:	d279      	bcs.n	40c636 <__divdi3+0x282>
  40c542:	428b      	cmp	r3, r1
  40c544:	d977      	bls.n	40c636 <__divdi3+0x282>
  40c546:	f1a8 0802 	sub.w	r8, r8, #2
  40c54a:	4429      	add	r1, r5
  40c54c:	1ac9      	subs	r1, r1, r3
  40c54e:	fbb1 f3f0 	udiv	r3, r1, r0
  40c552:	b2bf      	uxth	r7, r7
  40c554:	fb00 1113 	mls	r1, r0, r3, r1
  40c558:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  40c55c:	fb0c f203 	mul.w	r2, ip, r3
  40c560:	42ba      	cmp	r2, r7
  40c562:	d907      	bls.n	40c574 <__divdi3+0x1c0>
  40c564:	197f      	adds	r7, r7, r5
  40c566:	f103 31ff 	add.w	r1, r3, #4294967295
  40c56a:	d260      	bcs.n	40c62e <__divdi3+0x27a>
  40c56c:	42ba      	cmp	r2, r7
  40c56e:	d95e      	bls.n	40c62e <__divdi3+0x27a>
  40c570:	3b02      	subs	r3, #2
  40c572:	442f      	add	r7, r5
  40c574:	1abf      	subs	r7, r7, r2
  40c576:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c57a:	e790      	b.n	40c49e <__divdi3+0xea>
  40c57c:	f1c8 0220 	rsb	r2, r8, #32
  40c580:	fa03 fc08 	lsl.w	ip, r3, r8
  40c584:	fa25 f302 	lsr.w	r3, r5, r2
  40c588:	ea43 0c0c 	orr.w	ip, r3, ip
  40c58c:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40c590:	fa21 f302 	lsr.w	r3, r1, r2
  40c594:	fa01 f708 	lsl.w	r7, r1, r8
  40c598:	fa20 f202 	lsr.w	r2, r0, r2
  40c59c:	fbb3 f1f9 	udiv	r1, r3, r9
  40c5a0:	4317      	orrs	r7, r2
  40c5a2:	fb09 3311 	mls	r3, r9, r1, r3
  40c5a6:	0c3a      	lsrs	r2, r7, #16
  40c5a8:	fa1f fb8c 	uxth.w	fp, ip
  40c5ac:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40c5b0:	fb0b fa01 	mul.w	sl, fp, r1
  40c5b4:	459a      	cmp	sl, r3
  40c5b6:	fa05 f008 	lsl.w	r0, r5, r8
  40c5ba:	d908      	bls.n	40c5ce <__divdi3+0x21a>
  40c5bc:	eb13 030c 	adds.w	r3, r3, ip
  40c5c0:	f101 32ff 	add.w	r2, r1, #4294967295
  40c5c4:	d235      	bcs.n	40c632 <__divdi3+0x27e>
  40c5c6:	459a      	cmp	sl, r3
  40c5c8:	d933      	bls.n	40c632 <__divdi3+0x27e>
  40c5ca:	3902      	subs	r1, #2
  40c5cc:	4463      	add	r3, ip
  40c5ce:	ebca 0303 	rsb	r3, sl, r3
  40c5d2:	fbb3 f2f9 	udiv	r2, r3, r9
  40c5d6:	fb09 3312 	mls	r3, r9, r2, r3
  40c5da:	b2bf      	uxth	r7, r7
  40c5dc:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c5e0:	fb0b f902 	mul.w	r9, fp, r2
  40c5e4:	45b9      	cmp	r9, r7
  40c5e6:	d908      	bls.n	40c5fa <__divdi3+0x246>
  40c5e8:	eb17 070c 	adds.w	r7, r7, ip
  40c5ec:	f102 33ff 	add.w	r3, r2, #4294967295
  40c5f0:	d21b      	bcs.n	40c62a <__divdi3+0x276>
  40c5f2:	45b9      	cmp	r9, r7
  40c5f4:	d919      	bls.n	40c62a <__divdi3+0x276>
  40c5f6:	3a02      	subs	r2, #2
  40c5f8:	4467      	add	r7, ip
  40c5fa:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40c5fe:	fba5 0100 	umull	r0, r1, r5, r0
  40c602:	ebc9 0707 	rsb	r7, r9, r7
  40c606:	428f      	cmp	r7, r1
  40c608:	f04f 0300 	mov.w	r3, #0
  40c60c:	d30a      	bcc.n	40c624 <__divdi3+0x270>
  40c60e:	d005      	beq.n	40c61c <__divdi3+0x268>
  40c610:	462a      	mov	r2, r5
  40c612:	e720      	b.n	40c456 <__divdi3+0xa2>
  40c614:	4662      	mov	r2, ip
  40c616:	e701      	b.n	40c41c <__divdi3+0x68>
  40c618:	463b      	mov	r3, r7
  40c61a:	e714      	b.n	40c446 <__divdi3+0x92>
  40c61c:	fa06 f608 	lsl.w	r6, r6, r8
  40c620:	4286      	cmp	r6, r0
  40c622:	d2f5      	bcs.n	40c610 <__divdi3+0x25c>
  40c624:	1e6a      	subs	r2, r5, #1
  40c626:	2300      	movs	r3, #0
  40c628:	e715      	b.n	40c456 <__divdi3+0xa2>
  40c62a:	461a      	mov	r2, r3
  40c62c:	e7e5      	b.n	40c5fa <__divdi3+0x246>
  40c62e:	460b      	mov	r3, r1
  40c630:	e7a0      	b.n	40c574 <__divdi3+0x1c0>
  40c632:	4611      	mov	r1, r2
  40c634:	e7cb      	b.n	40c5ce <__divdi3+0x21a>
  40c636:	4690      	mov	r8, r2
  40c638:	e788      	b.n	40c54c <__divdi3+0x198>
  40c63a:	4643      	mov	r3, r8
  40c63c:	4642      	mov	r2, r8
  40c63e:	e70a      	b.n	40c456 <__divdi3+0xa2>
  40c640:	3a02      	subs	r2, #2
  40c642:	e753      	b.n	40c4ec <__divdi3+0x138>
  40c644:	3902      	subs	r1, #2
  40c646:	442f      	add	r7, r5
  40c648:	e73c      	b.n	40c4c4 <__divdi3+0x110>
  40c64a:	bf00      	nop

0040c64c <__udivdi3>:
  40c64c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c650:	4614      	mov	r4, r2
  40c652:	4605      	mov	r5, r0
  40c654:	460e      	mov	r6, r1
  40c656:	2b00      	cmp	r3, #0
  40c658:	d143      	bne.n	40c6e2 <__udivdi3+0x96>
  40c65a:	428a      	cmp	r2, r1
  40c65c:	d953      	bls.n	40c706 <__udivdi3+0xba>
  40c65e:	fab2 f782 	clz	r7, r2
  40c662:	b157      	cbz	r7, 40c67a <__udivdi3+0x2e>
  40c664:	f1c7 0620 	rsb	r6, r7, #32
  40c668:	fa20 f606 	lsr.w	r6, r0, r6
  40c66c:	fa01 f307 	lsl.w	r3, r1, r7
  40c670:	fa02 f407 	lsl.w	r4, r2, r7
  40c674:	431e      	orrs	r6, r3
  40c676:	fa00 f507 	lsl.w	r5, r0, r7
  40c67a:	0c21      	lsrs	r1, r4, #16
  40c67c:	fbb6 f2f1 	udiv	r2, r6, r1
  40c680:	0c2b      	lsrs	r3, r5, #16
  40c682:	fb01 6712 	mls	r7, r1, r2, r6
  40c686:	b2a0      	uxth	r0, r4
  40c688:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40c68c:	fb00 f302 	mul.w	r3, r0, r2
  40c690:	42b3      	cmp	r3, r6
  40c692:	d909      	bls.n	40c6a8 <__udivdi3+0x5c>
  40c694:	1936      	adds	r6, r6, r4
  40c696:	f102 37ff 	add.w	r7, r2, #4294967295
  40c69a:	f080 80f6 	bcs.w	40c88a <__udivdi3+0x23e>
  40c69e:	42b3      	cmp	r3, r6
  40c6a0:	f240 80f3 	bls.w	40c88a <__udivdi3+0x23e>
  40c6a4:	3a02      	subs	r2, #2
  40c6a6:	4426      	add	r6, r4
  40c6a8:	1af6      	subs	r6, r6, r3
  40c6aa:	fbb6 f3f1 	udiv	r3, r6, r1
  40c6ae:	b2ad      	uxth	r5, r5
  40c6b0:	fb01 6113 	mls	r1, r1, r3, r6
  40c6b4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40c6b8:	fb00 f003 	mul.w	r0, r0, r3
  40c6bc:	4288      	cmp	r0, r1
  40c6be:	d908      	bls.n	40c6d2 <__udivdi3+0x86>
  40c6c0:	1909      	adds	r1, r1, r4
  40c6c2:	f103 36ff 	add.w	r6, r3, #4294967295
  40c6c6:	f080 80e2 	bcs.w	40c88e <__udivdi3+0x242>
  40c6ca:	4288      	cmp	r0, r1
  40c6cc:	f240 80df 	bls.w	40c88e <__udivdi3+0x242>
  40c6d0:	3b02      	subs	r3, #2
  40c6d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c6d6:	2300      	movs	r3, #0
  40c6d8:	4610      	mov	r0, r2
  40c6da:	4619      	mov	r1, r3
  40c6dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c6e0:	4770      	bx	lr
  40c6e2:	428b      	cmp	r3, r1
  40c6e4:	d84a      	bhi.n	40c77c <__udivdi3+0x130>
  40c6e6:	fab3 f683 	clz	r6, r3
  40c6ea:	2e00      	cmp	r6, #0
  40c6ec:	d14d      	bne.n	40c78a <__udivdi3+0x13e>
  40c6ee:	428b      	cmp	r3, r1
  40c6f0:	d302      	bcc.n	40c6f8 <__udivdi3+0xac>
  40c6f2:	4282      	cmp	r2, r0
  40c6f4:	f200 80d6 	bhi.w	40c8a4 <__udivdi3+0x258>
  40c6f8:	2300      	movs	r3, #0
  40c6fa:	2201      	movs	r2, #1
  40c6fc:	4610      	mov	r0, r2
  40c6fe:	4619      	mov	r1, r3
  40c700:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c704:	4770      	bx	lr
  40c706:	b912      	cbnz	r2, 40c70e <__udivdi3+0xc2>
  40c708:	2401      	movs	r4, #1
  40c70a:	fbb4 f4f2 	udiv	r4, r4, r2
  40c70e:	fab4 f284 	clz	r2, r4
  40c712:	2a00      	cmp	r2, #0
  40c714:	d17c      	bne.n	40c810 <__udivdi3+0x1c4>
  40c716:	1b09      	subs	r1, r1, r4
  40c718:	0c26      	lsrs	r6, r4, #16
  40c71a:	b2a7      	uxth	r7, r4
  40c71c:	2301      	movs	r3, #1
  40c71e:	fbb1 f0f6 	udiv	r0, r1, r6
  40c722:	0c2a      	lsrs	r2, r5, #16
  40c724:	fb06 1110 	mls	r1, r6, r0, r1
  40c728:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40c72c:	fb07 f200 	mul.w	r2, r7, r0
  40c730:	428a      	cmp	r2, r1
  40c732:	d907      	bls.n	40c744 <__udivdi3+0xf8>
  40c734:	1909      	adds	r1, r1, r4
  40c736:	f100 3cff 	add.w	ip, r0, #4294967295
  40c73a:	d202      	bcs.n	40c742 <__udivdi3+0xf6>
  40c73c:	428a      	cmp	r2, r1
  40c73e:	f200 80c3 	bhi.w	40c8c8 <__udivdi3+0x27c>
  40c742:	4660      	mov	r0, ip
  40c744:	1a89      	subs	r1, r1, r2
  40c746:	fbb1 f2f6 	udiv	r2, r1, r6
  40c74a:	b2ad      	uxth	r5, r5
  40c74c:	fb06 1112 	mls	r1, r6, r2, r1
  40c750:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40c754:	fb07 f702 	mul.w	r7, r7, r2
  40c758:	42af      	cmp	r7, r5
  40c75a:	d908      	bls.n	40c76e <__udivdi3+0x122>
  40c75c:	192c      	adds	r4, r5, r4
  40c75e:	f102 31ff 	add.w	r1, r2, #4294967295
  40c762:	f080 8096 	bcs.w	40c892 <__udivdi3+0x246>
  40c766:	42a7      	cmp	r7, r4
  40c768:	f240 8093 	bls.w	40c892 <__udivdi3+0x246>
  40c76c:	3a02      	subs	r2, #2
  40c76e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40c772:	4610      	mov	r0, r2
  40c774:	4619      	mov	r1, r3
  40c776:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c77a:	4770      	bx	lr
  40c77c:	2300      	movs	r3, #0
  40c77e:	461a      	mov	r2, r3
  40c780:	4610      	mov	r0, r2
  40c782:	4619      	mov	r1, r3
  40c784:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c788:	4770      	bx	lr
  40c78a:	f1c6 0520 	rsb	r5, r6, #32
  40c78e:	fa22 f405 	lsr.w	r4, r2, r5
  40c792:	40b3      	lsls	r3, r6
  40c794:	431c      	orrs	r4, r3
  40c796:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40c79a:	fa21 f305 	lsr.w	r3, r1, r5
  40c79e:	fa01 f706 	lsl.w	r7, r1, r6
  40c7a2:	fa20 f505 	lsr.w	r5, r0, r5
  40c7a6:	fbb3 fcf8 	udiv	ip, r3, r8
  40c7aa:	432f      	orrs	r7, r5
  40c7ac:	fb08 331c 	mls	r3, r8, ip, r3
  40c7b0:	0c3d      	lsrs	r5, r7, #16
  40c7b2:	fa1f fa84 	uxth.w	sl, r4
  40c7b6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40c7ba:	fb0a f90c 	mul.w	r9, sl, ip
  40c7be:	4599      	cmp	r9, r3
  40c7c0:	fa02 fb06 	lsl.w	fp, r2, r6
  40c7c4:	d904      	bls.n	40c7d0 <__udivdi3+0x184>
  40c7c6:	191b      	adds	r3, r3, r4
  40c7c8:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c7cc:	d36d      	bcc.n	40c8aa <__udivdi3+0x25e>
  40c7ce:	4694      	mov	ip, r2
  40c7d0:	ebc9 0303 	rsb	r3, r9, r3
  40c7d4:	fbb3 f5f8 	udiv	r5, r3, r8
  40c7d8:	fb08 3315 	mls	r3, r8, r5, r3
  40c7dc:	b2bf      	uxth	r7, r7
  40c7de:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c7e2:	fb0a f805 	mul.w	r8, sl, r5
  40c7e6:	45b8      	cmp	r8, r7
  40c7e8:	d904      	bls.n	40c7f4 <__udivdi3+0x1a8>
  40c7ea:	193f      	adds	r7, r7, r4
  40c7ec:	f105 33ff 	add.w	r3, r5, #4294967295
  40c7f0:	d361      	bcc.n	40c8b6 <__udivdi3+0x26a>
  40c7f2:	461d      	mov	r5, r3
  40c7f4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40c7f8:	fbac 230b 	umull	r2, r3, ip, fp
  40c7fc:	ebc8 0707 	rsb	r7, r8, r7
  40c800:	429f      	cmp	r7, r3
  40c802:	f04f 0500 	mov.w	r5, #0
  40c806:	d349      	bcc.n	40c89c <__udivdi3+0x250>
  40c808:	d045      	beq.n	40c896 <__udivdi3+0x24a>
  40c80a:	4662      	mov	r2, ip
  40c80c:	462b      	mov	r3, r5
  40c80e:	e763      	b.n	40c6d8 <__udivdi3+0x8c>
  40c810:	4094      	lsls	r4, r2
  40c812:	f1c2 0320 	rsb	r3, r2, #32
  40c816:	fa21 fc03 	lsr.w	ip, r1, r3
  40c81a:	0c26      	lsrs	r6, r4, #16
  40c81c:	fa20 f303 	lsr.w	r3, r0, r3
  40c820:	fa01 f502 	lsl.w	r5, r1, r2
  40c824:	fbbc f8f6 	udiv	r8, ip, r6
  40c828:	ea43 0105 	orr.w	r1, r3, r5
  40c82c:	0c0b      	lsrs	r3, r1, #16
  40c82e:	fb06 cc18 	mls	ip, r6, r8, ip
  40c832:	b2a7      	uxth	r7, r4
  40c834:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40c838:	fb07 f308 	mul.w	r3, r7, r8
  40c83c:	4563      	cmp	r3, ip
  40c83e:	fa00 f502 	lsl.w	r5, r0, r2
  40c842:	d909      	bls.n	40c858 <__udivdi3+0x20c>
  40c844:	eb1c 0c04 	adds.w	ip, ip, r4
  40c848:	f108 32ff 	add.w	r2, r8, #4294967295
  40c84c:	d23a      	bcs.n	40c8c4 <__udivdi3+0x278>
  40c84e:	4563      	cmp	r3, ip
  40c850:	d938      	bls.n	40c8c4 <__udivdi3+0x278>
  40c852:	f1a8 0802 	sub.w	r8, r8, #2
  40c856:	44a4      	add	ip, r4
  40c858:	ebc3 0c0c 	rsb	ip, r3, ip
  40c85c:	fbbc f3f6 	udiv	r3, ip, r6
  40c860:	b289      	uxth	r1, r1
  40c862:	fb06 cc13 	mls	ip, r6, r3, ip
  40c866:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40c86a:	fb07 f203 	mul.w	r2, r7, r3
  40c86e:	428a      	cmp	r2, r1
  40c870:	d907      	bls.n	40c882 <__udivdi3+0x236>
  40c872:	1909      	adds	r1, r1, r4
  40c874:	f103 30ff 	add.w	r0, r3, #4294967295
  40c878:	d222      	bcs.n	40c8c0 <__udivdi3+0x274>
  40c87a:	428a      	cmp	r2, r1
  40c87c:	d920      	bls.n	40c8c0 <__udivdi3+0x274>
  40c87e:	3b02      	subs	r3, #2
  40c880:	4421      	add	r1, r4
  40c882:	1a89      	subs	r1, r1, r2
  40c884:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c888:	e749      	b.n	40c71e <__udivdi3+0xd2>
  40c88a:	463a      	mov	r2, r7
  40c88c:	e70c      	b.n	40c6a8 <__udivdi3+0x5c>
  40c88e:	4633      	mov	r3, r6
  40c890:	e71f      	b.n	40c6d2 <__udivdi3+0x86>
  40c892:	460a      	mov	r2, r1
  40c894:	e76b      	b.n	40c76e <__udivdi3+0x122>
  40c896:	40b0      	lsls	r0, r6
  40c898:	4290      	cmp	r0, r2
  40c89a:	d2b6      	bcs.n	40c80a <__udivdi3+0x1be>
  40c89c:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c8a0:	2300      	movs	r3, #0
  40c8a2:	e719      	b.n	40c6d8 <__udivdi3+0x8c>
  40c8a4:	4633      	mov	r3, r6
  40c8a6:	4632      	mov	r2, r6
  40c8a8:	e716      	b.n	40c6d8 <__udivdi3+0x8c>
  40c8aa:	4599      	cmp	r9, r3
  40c8ac:	d98f      	bls.n	40c7ce <__udivdi3+0x182>
  40c8ae:	f1ac 0c02 	sub.w	ip, ip, #2
  40c8b2:	4423      	add	r3, r4
  40c8b4:	e78c      	b.n	40c7d0 <__udivdi3+0x184>
  40c8b6:	45b8      	cmp	r8, r7
  40c8b8:	d99b      	bls.n	40c7f2 <__udivdi3+0x1a6>
  40c8ba:	3d02      	subs	r5, #2
  40c8bc:	4427      	add	r7, r4
  40c8be:	e799      	b.n	40c7f4 <__udivdi3+0x1a8>
  40c8c0:	4603      	mov	r3, r0
  40c8c2:	e7de      	b.n	40c882 <__udivdi3+0x236>
  40c8c4:	4690      	mov	r8, r2
  40c8c6:	e7c7      	b.n	40c858 <__udivdi3+0x20c>
  40c8c8:	3802      	subs	r0, #2
  40c8ca:	4421      	add	r1, r4
  40c8cc:	e73a      	b.n	40c744 <__udivdi3+0xf8>
  40c8ce:	bf00      	nop

0040c8d0 <__libc_init_array>:
  40c8d0:	b570      	push	{r4, r5, r6, lr}
  40c8d2:	4e0f      	ldr	r6, [pc, #60]	; (40c910 <__libc_init_array+0x40>)
  40c8d4:	4d0f      	ldr	r5, [pc, #60]	; (40c914 <__libc_init_array+0x44>)
  40c8d6:	1b76      	subs	r6, r6, r5
  40c8d8:	10b6      	asrs	r6, r6, #2
  40c8da:	d007      	beq.n	40c8ec <__libc_init_array+0x1c>
  40c8dc:	3d04      	subs	r5, #4
  40c8de:	2400      	movs	r4, #0
  40c8e0:	3401      	adds	r4, #1
  40c8e2:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40c8e6:	4798      	blx	r3
  40c8e8:	42a6      	cmp	r6, r4
  40c8ea:	d1f9      	bne.n	40c8e0 <__libc_init_array+0x10>
  40c8ec:	4e0a      	ldr	r6, [pc, #40]	; (40c918 <__libc_init_array+0x48>)
  40c8ee:	4d0b      	ldr	r5, [pc, #44]	; (40c91c <__libc_init_array+0x4c>)
  40c8f0:	1b76      	subs	r6, r6, r5
  40c8f2:	f00a fc79 	bl	4171e8 <_init>
  40c8f6:	10b6      	asrs	r6, r6, #2
  40c8f8:	d008      	beq.n	40c90c <__libc_init_array+0x3c>
  40c8fa:	3d04      	subs	r5, #4
  40c8fc:	2400      	movs	r4, #0
  40c8fe:	3401      	adds	r4, #1
  40c900:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40c904:	4798      	blx	r3
  40c906:	42a6      	cmp	r6, r4
  40c908:	d1f9      	bne.n	40c8fe <__libc_init_array+0x2e>
  40c90a:	bd70      	pop	{r4, r5, r6, pc}
  40c90c:	bd70      	pop	{r4, r5, r6, pc}
  40c90e:	bf00      	nop
  40c910:	004171f4 	.word	0x004171f4
  40c914:	004171f4 	.word	0x004171f4
  40c918:	004171fc 	.word	0x004171fc
  40c91c:	004171f4 	.word	0x004171f4

0040c920 <iprintf>:
  40c920:	b40f      	push	{r0, r1, r2, r3}
  40c922:	b500      	push	{lr}
  40c924:	4a07      	ldr	r2, [pc, #28]	; (40c944 <iprintf+0x24>)
  40c926:	b083      	sub	sp, #12
  40c928:	ab04      	add	r3, sp, #16
  40c92a:	6810      	ldr	r0, [r2, #0]
  40c92c:	f853 2b04 	ldr.w	r2, [r3], #4
  40c930:	6881      	ldr	r1, [r0, #8]
  40c932:	9301      	str	r3, [sp, #4]
  40c934:	f003 f944 	bl	40fbc0 <_vfiprintf_r>
  40c938:	b003      	add	sp, #12
  40c93a:	f85d eb04 	ldr.w	lr, [sp], #4
  40c93e:	b004      	add	sp, #16
  40c940:	4770      	bx	lr
  40c942:	bf00      	nop
  40c944:	20000918 	.word	0x20000918

0040c948 <malloc>:
  40c948:	4b02      	ldr	r3, [pc, #8]	; (40c954 <malloc+0xc>)
  40c94a:	4601      	mov	r1, r0
  40c94c:	6818      	ldr	r0, [r3, #0]
  40c94e:	f000 b80b 	b.w	40c968 <_malloc_r>
  40c952:	bf00      	nop
  40c954:	20000918 	.word	0x20000918

0040c958 <free>:
  40c958:	4b02      	ldr	r3, [pc, #8]	; (40c964 <free+0xc>)
  40c95a:	4601      	mov	r1, r0
  40c95c:	6818      	ldr	r0, [r3, #0]
  40c95e:	f005 b9eb 	b.w	411d38 <_free_r>
  40c962:	bf00      	nop
  40c964:	20000918 	.word	0x20000918

0040c968 <_malloc_r>:
  40c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c96c:	f101 050b 	add.w	r5, r1, #11
  40c970:	2d16      	cmp	r5, #22
  40c972:	b083      	sub	sp, #12
  40c974:	4606      	mov	r6, r0
  40c976:	d927      	bls.n	40c9c8 <_malloc_r+0x60>
  40c978:	f035 0507 	bics.w	r5, r5, #7
  40c97c:	d427      	bmi.n	40c9ce <_malloc_r+0x66>
  40c97e:	42a9      	cmp	r1, r5
  40c980:	d825      	bhi.n	40c9ce <_malloc_r+0x66>
  40c982:	4630      	mov	r0, r6
  40c984:	f000 fb70 	bl	40d068 <__malloc_lock>
  40c988:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40c98c:	d226      	bcs.n	40c9dc <_malloc_r+0x74>
  40c98e:	4fc1      	ldr	r7, [pc, #772]	; (40cc94 <_malloc_r+0x32c>)
  40c990:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  40c994:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  40c998:	68dc      	ldr	r4, [r3, #12]
  40c99a:	429c      	cmp	r4, r3
  40c99c:	f000 81d2 	beq.w	40cd44 <_malloc_r+0x3dc>
  40c9a0:	6863      	ldr	r3, [r4, #4]
  40c9a2:	68e2      	ldr	r2, [r4, #12]
  40c9a4:	68a1      	ldr	r1, [r4, #8]
  40c9a6:	f023 0303 	bic.w	r3, r3, #3
  40c9aa:	4423      	add	r3, r4
  40c9ac:	4630      	mov	r0, r6
  40c9ae:	685d      	ldr	r5, [r3, #4]
  40c9b0:	60ca      	str	r2, [r1, #12]
  40c9b2:	f045 0501 	orr.w	r5, r5, #1
  40c9b6:	6091      	str	r1, [r2, #8]
  40c9b8:	605d      	str	r5, [r3, #4]
  40c9ba:	f000 fb57 	bl	40d06c <__malloc_unlock>
  40c9be:	3408      	adds	r4, #8
  40c9c0:	4620      	mov	r0, r4
  40c9c2:	b003      	add	sp, #12
  40c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9c8:	2510      	movs	r5, #16
  40c9ca:	42a9      	cmp	r1, r5
  40c9cc:	d9d9      	bls.n	40c982 <_malloc_r+0x1a>
  40c9ce:	2400      	movs	r4, #0
  40c9d0:	230c      	movs	r3, #12
  40c9d2:	4620      	mov	r0, r4
  40c9d4:	6033      	str	r3, [r6, #0]
  40c9d6:	b003      	add	sp, #12
  40c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9dc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  40c9e0:	f000 808a 	beq.w	40caf8 <_malloc_r+0x190>
  40c9e4:	f1bc 0f04 	cmp.w	ip, #4
  40c9e8:	f200 8160 	bhi.w	40ccac <_malloc_r+0x344>
  40c9ec:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  40c9f0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40c9f4:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40c9f8:	4fa6      	ldr	r7, [pc, #664]	; (40cc94 <_malloc_r+0x32c>)
  40c9fa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40c9fe:	68cc      	ldr	r4, [r1, #12]
  40ca00:	42a1      	cmp	r1, r4
  40ca02:	d105      	bne.n	40ca10 <_malloc_r+0xa8>
  40ca04:	e00c      	b.n	40ca20 <_malloc_r+0xb8>
  40ca06:	2b00      	cmp	r3, #0
  40ca08:	da7a      	bge.n	40cb00 <_malloc_r+0x198>
  40ca0a:	68e4      	ldr	r4, [r4, #12]
  40ca0c:	42a1      	cmp	r1, r4
  40ca0e:	d007      	beq.n	40ca20 <_malloc_r+0xb8>
  40ca10:	6862      	ldr	r2, [r4, #4]
  40ca12:	f022 0203 	bic.w	r2, r2, #3
  40ca16:	1b53      	subs	r3, r2, r5
  40ca18:	2b0f      	cmp	r3, #15
  40ca1a:	ddf4      	ble.n	40ca06 <_malloc_r+0x9e>
  40ca1c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ca20:	f10c 0c01 	add.w	ip, ip, #1
  40ca24:	4b9b      	ldr	r3, [pc, #620]	; (40cc94 <_malloc_r+0x32c>)
  40ca26:	693c      	ldr	r4, [r7, #16]
  40ca28:	f103 0e08 	add.w	lr, r3, #8
  40ca2c:	4574      	cmp	r4, lr
  40ca2e:	f000 817e 	beq.w	40cd2e <_malloc_r+0x3c6>
  40ca32:	6861      	ldr	r1, [r4, #4]
  40ca34:	f021 0103 	bic.w	r1, r1, #3
  40ca38:	1b4a      	subs	r2, r1, r5
  40ca3a:	2a0f      	cmp	r2, #15
  40ca3c:	f300 8164 	bgt.w	40cd08 <_malloc_r+0x3a0>
  40ca40:	2a00      	cmp	r2, #0
  40ca42:	f8c3 e014 	str.w	lr, [r3, #20]
  40ca46:	f8c3 e010 	str.w	lr, [r3, #16]
  40ca4a:	da6a      	bge.n	40cb22 <_malloc_r+0x1ba>
  40ca4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40ca50:	f080 813a 	bcs.w	40ccc8 <_malloc_r+0x360>
  40ca54:	08c9      	lsrs	r1, r1, #3
  40ca56:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40ca5a:	ea4f 08a1 	mov.w	r8, r1, asr #2
  40ca5e:	685a      	ldr	r2, [r3, #4]
  40ca60:	6881      	ldr	r1, [r0, #8]
  40ca62:	60a1      	str	r1, [r4, #8]
  40ca64:	f04f 0901 	mov.w	r9, #1
  40ca68:	fa09 f808 	lsl.w	r8, r9, r8
  40ca6c:	ea48 0202 	orr.w	r2, r8, r2
  40ca70:	60e0      	str	r0, [r4, #12]
  40ca72:	605a      	str	r2, [r3, #4]
  40ca74:	6084      	str	r4, [r0, #8]
  40ca76:	60cc      	str	r4, [r1, #12]
  40ca78:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40ca7c:	2001      	movs	r0, #1
  40ca7e:	4098      	lsls	r0, r3
  40ca80:	4290      	cmp	r0, r2
  40ca82:	d85b      	bhi.n	40cb3c <_malloc_r+0x1d4>
  40ca84:	4202      	tst	r2, r0
  40ca86:	d106      	bne.n	40ca96 <_malloc_r+0x12e>
  40ca88:	f02c 0c03 	bic.w	ip, ip, #3
  40ca8c:	0040      	lsls	r0, r0, #1
  40ca8e:	4202      	tst	r2, r0
  40ca90:	f10c 0c04 	add.w	ip, ip, #4
  40ca94:	d0fa      	beq.n	40ca8c <_malloc_r+0x124>
  40ca96:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  40ca9a:	4644      	mov	r4, r8
  40ca9c:	46e1      	mov	r9, ip
  40ca9e:	68e3      	ldr	r3, [r4, #12]
  40caa0:	429c      	cmp	r4, r3
  40caa2:	d107      	bne.n	40cab4 <_malloc_r+0x14c>
  40caa4:	e145      	b.n	40cd32 <_malloc_r+0x3ca>
  40caa6:	2a00      	cmp	r2, #0
  40caa8:	f280 8156 	bge.w	40cd58 <_malloc_r+0x3f0>
  40caac:	68db      	ldr	r3, [r3, #12]
  40caae:	429c      	cmp	r4, r3
  40cab0:	f000 813f 	beq.w	40cd32 <_malloc_r+0x3ca>
  40cab4:	6859      	ldr	r1, [r3, #4]
  40cab6:	f021 0103 	bic.w	r1, r1, #3
  40caba:	1b4a      	subs	r2, r1, r5
  40cabc:	2a0f      	cmp	r2, #15
  40cabe:	ddf2      	ble.n	40caa6 <_malloc_r+0x13e>
  40cac0:	461c      	mov	r4, r3
  40cac2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40cac6:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40caca:	1959      	adds	r1, r3, r5
  40cacc:	f045 0901 	orr.w	r9, r5, #1
  40cad0:	f042 0501 	orr.w	r5, r2, #1
  40cad4:	f8c3 9004 	str.w	r9, [r3, #4]
  40cad8:	4630      	mov	r0, r6
  40cada:	f8c8 c00c 	str.w	ip, [r8, #12]
  40cade:	f8cc 8008 	str.w	r8, [ip, #8]
  40cae2:	6179      	str	r1, [r7, #20]
  40cae4:	6139      	str	r1, [r7, #16]
  40cae6:	f8c1 e00c 	str.w	lr, [r1, #12]
  40caea:	f8c1 e008 	str.w	lr, [r1, #8]
  40caee:	604d      	str	r5, [r1, #4]
  40caf0:	508a      	str	r2, [r1, r2]
  40caf2:	f000 fabb 	bl	40d06c <__malloc_unlock>
  40caf6:	e763      	b.n	40c9c0 <_malloc_r+0x58>
  40caf8:	217e      	movs	r1, #126	; 0x7e
  40cafa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40cafe:	e77b      	b.n	40c9f8 <_malloc_r+0x90>
  40cb00:	4422      	add	r2, r4
  40cb02:	68e3      	ldr	r3, [r4, #12]
  40cb04:	6850      	ldr	r0, [r2, #4]
  40cb06:	68a1      	ldr	r1, [r4, #8]
  40cb08:	f040 0501 	orr.w	r5, r0, #1
  40cb0c:	60cb      	str	r3, [r1, #12]
  40cb0e:	4630      	mov	r0, r6
  40cb10:	6099      	str	r1, [r3, #8]
  40cb12:	6055      	str	r5, [r2, #4]
  40cb14:	f000 faaa 	bl	40d06c <__malloc_unlock>
  40cb18:	3408      	adds	r4, #8
  40cb1a:	4620      	mov	r0, r4
  40cb1c:	b003      	add	sp, #12
  40cb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb22:	4421      	add	r1, r4
  40cb24:	4630      	mov	r0, r6
  40cb26:	684b      	ldr	r3, [r1, #4]
  40cb28:	f043 0301 	orr.w	r3, r3, #1
  40cb2c:	604b      	str	r3, [r1, #4]
  40cb2e:	f000 fa9d 	bl	40d06c <__malloc_unlock>
  40cb32:	3408      	adds	r4, #8
  40cb34:	4620      	mov	r0, r4
  40cb36:	b003      	add	sp, #12
  40cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb3c:	68bc      	ldr	r4, [r7, #8]
  40cb3e:	6863      	ldr	r3, [r4, #4]
  40cb40:	f023 0903 	bic.w	r9, r3, #3
  40cb44:	45a9      	cmp	r9, r5
  40cb46:	d304      	bcc.n	40cb52 <_malloc_r+0x1ea>
  40cb48:	ebc5 0309 	rsb	r3, r5, r9
  40cb4c:	2b0f      	cmp	r3, #15
  40cb4e:	f300 8091 	bgt.w	40cc74 <_malloc_r+0x30c>
  40cb52:	4b51      	ldr	r3, [pc, #324]	; (40cc98 <_malloc_r+0x330>)
  40cb54:	4a51      	ldr	r2, [pc, #324]	; (40cc9c <_malloc_r+0x334>)
  40cb56:	6819      	ldr	r1, [r3, #0]
  40cb58:	6813      	ldr	r3, [r2, #0]
  40cb5a:	3301      	adds	r3, #1
  40cb5c:	eb05 0a01 	add.w	sl, r5, r1
  40cb60:	eb04 0b09 	add.w	fp, r4, r9
  40cb64:	f000 8161 	beq.w	40ce2a <_malloc_r+0x4c2>
  40cb68:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40cb6c:	f10a 0a0f 	add.w	sl, sl, #15
  40cb70:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  40cb74:	f02a 0a0f 	bic.w	sl, sl, #15
  40cb78:	4630      	mov	r0, r6
  40cb7a:	4651      	mov	r1, sl
  40cb7c:	9201      	str	r2, [sp, #4]
  40cb7e:	f000 fa77 	bl	40d070 <_sbrk_r>
  40cb82:	f1b0 3fff 	cmp.w	r0, #4294967295
  40cb86:	4680      	mov	r8, r0
  40cb88:	9a01      	ldr	r2, [sp, #4]
  40cb8a:	f000 8100 	beq.w	40cd8e <_malloc_r+0x426>
  40cb8e:	4583      	cmp	fp, r0
  40cb90:	f200 80fa 	bhi.w	40cd88 <_malloc_r+0x420>
  40cb94:	f8df c110 	ldr.w	ip, [pc, #272]	; 40cca8 <_malloc_r+0x340>
  40cb98:	f8dc 3000 	ldr.w	r3, [ip]
  40cb9c:	45c3      	cmp	fp, r8
  40cb9e:	4453      	add	r3, sl
  40cba0:	f8cc 3000 	str.w	r3, [ip]
  40cba4:	f000 814a 	beq.w	40ce3c <_malloc_r+0x4d4>
  40cba8:	6812      	ldr	r2, [r2, #0]
  40cbaa:	493c      	ldr	r1, [pc, #240]	; (40cc9c <_malloc_r+0x334>)
  40cbac:	3201      	adds	r2, #1
  40cbae:	bf1b      	ittet	ne
  40cbb0:	ebcb 0b08 	rsbne	fp, fp, r8
  40cbb4:	445b      	addne	r3, fp
  40cbb6:	f8c1 8000 	streq.w	r8, [r1]
  40cbba:	f8cc 3000 	strne.w	r3, [ip]
  40cbbe:	f018 0307 	ands.w	r3, r8, #7
  40cbc2:	f000 8113 	beq.w	40cdec <_malloc_r+0x484>
  40cbc6:	f1c3 0208 	rsb	r2, r3, #8
  40cbca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  40cbce:	4490      	add	r8, r2
  40cbd0:	3308      	adds	r3, #8
  40cbd2:	44c2      	add	sl, r8
  40cbd4:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  40cbd8:	ebca 0a03 	rsb	sl, sl, r3
  40cbdc:	4651      	mov	r1, sl
  40cbde:	4630      	mov	r0, r6
  40cbe0:	f8cd c004 	str.w	ip, [sp, #4]
  40cbe4:	f000 fa44 	bl	40d070 <_sbrk_r>
  40cbe8:	1c43      	adds	r3, r0, #1
  40cbea:	f8dd c004 	ldr.w	ip, [sp, #4]
  40cbee:	f000 8135 	beq.w	40ce5c <_malloc_r+0x4f4>
  40cbf2:	ebc8 0200 	rsb	r2, r8, r0
  40cbf6:	4452      	add	r2, sl
  40cbf8:	f042 0201 	orr.w	r2, r2, #1
  40cbfc:	f8dc 3000 	ldr.w	r3, [ip]
  40cc00:	f8c7 8008 	str.w	r8, [r7, #8]
  40cc04:	4453      	add	r3, sl
  40cc06:	42bc      	cmp	r4, r7
  40cc08:	f8c8 2004 	str.w	r2, [r8, #4]
  40cc0c:	f8cc 3000 	str.w	r3, [ip]
  40cc10:	f8df a094 	ldr.w	sl, [pc, #148]	; 40cca8 <_malloc_r+0x340>
  40cc14:	d015      	beq.n	40cc42 <_malloc_r+0x2da>
  40cc16:	f1b9 0f0f 	cmp.w	r9, #15
  40cc1a:	f240 80ea 	bls.w	40cdf2 <_malloc_r+0x48a>
  40cc1e:	6861      	ldr	r1, [r4, #4]
  40cc20:	f1a9 020c 	sub.w	r2, r9, #12
  40cc24:	f022 0207 	bic.w	r2, r2, #7
  40cc28:	f001 0e01 	and.w	lr, r1, #1
  40cc2c:	18a1      	adds	r1, r4, r2
  40cc2e:	2005      	movs	r0, #5
  40cc30:	ea42 0e0e 	orr.w	lr, r2, lr
  40cc34:	2a0f      	cmp	r2, #15
  40cc36:	f8c4 e004 	str.w	lr, [r4, #4]
  40cc3a:	6048      	str	r0, [r1, #4]
  40cc3c:	6088      	str	r0, [r1, #8]
  40cc3e:	f200 8111 	bhi.w	40ce64 <_malloc_r+0x4fc>
  40cc42:	4a17      	ldr	r2, [pc, #92]	; (40cca0 <_malloc_r+0x338>)
  40cc44:	68bc      	ldr	r4, [r7, #8]
  40cc46:	6811      	ldr	r1, [r2, #0]
  40cc48:	428b      	cmp	r3, r1
  40cc4a:	bf88      	it	hi
  40cc4c:	6013      	strhi	r3, [r2, #0]
  40cc4e:	4a15      	ldr	r2, [pc, #84]	; (40cca4 <_malloc_r+0x33c>)
  40cc50:	6811      	ldr	r1, [r2, #0]
  40cc52:	428b      	cmp	r3, r1
  40cc54:	bf88      	it	hi
  40cc56:	6013      	strhi	r3, [r2, #0]
  40cc58:	6862      	ldr	r2, [r4, #4]
  40cc5a:	f022 0203 	bic.w	r2, r2, #3
  40cc5e:	4295      	cmp	r5, r2
  40cc60:	ebc5 0302 	rsb	r3, r5, r2
  40cc64:	d801      	bhi.n	40cc6a <_malloc_r+0x302>
  40cc66:	2b0f      	cmp	r3, #15
  40cc68:	dc04      	bgt.n	40cc74 <_malloc_r+0x30c>
  40cc6a:	4630      	mov	r0, r6
  40cc6c:	f000 f9fe 	bl	40d06c <__malloc_unlock>
  40cc70:	2400      	movs	r4, #0
  40cc72:	e6a5      	b.n	40c9c0 <_malloc_r+0x58>
  40cc74:	1962      	adds	r2, r4, r5
  40cc76:	f043 0301 	orr.w	r3, r3, #1
  40cc7a:	f045 0501 	orr.w	r5, r5, #1
  40cc7e:	6065      	str	r5, [r4, #4]
  40cc80:	4630      	mov	r0, r6
  40cc82:	60ba      	str	r2, [r7, #8]
  40cc84:	6053      	str	r3, [r2, #4]
  40cc86:	f000 f9f1 	bl	40d06c <__malloc_unlock>
  40cc8a:	3408      	adds	r4, #8
  40cc8c:	4620      	mov	r0, r4
  40cc8e:	b003      	add	sp, #12
  40cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc94:	2000091c 	.word	0x2000091c
  40cc98:	20002490 	.word	0x20002490
  40cc9c:	20000d28 	.word	0x20000d28
  40cca0:	2000248c 	.word	0x2000248c
  40cca4:	20002488 	.word	0x20002488
  40cca8:	20002494 	.word	0x20002494
  40ccac:	f1bc 0f14 	cmp.w	ip, #20
  40ccb0:	d961      	bls.n	40cd76 <_malloc_r+0x40e>
  40ccb2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40ccb6:	f200 808f 	bhi.w	40cdd8 <_malloc_r+0x470>
  40ccba:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40ccbe:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40ccc2:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40ccc6:	e697      	b.n	40c9f8 <_malloc_r+0x90>
  40ccc8:	0a4b      	lsrs	r3, r1, #9
  40ccca:	2b04      	cmp	r3, #4
  40cccc:	d958      	bls.n	40cd80 <_malloc_r+0x418>
  40ccce:	2b14      	cmp	r3, #20
  40ccd0:	f200 80ae 	bhi.w	40ce30 <_malloc_r+0x4c8>
  40ccd4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  40ccd8:	0050      	lsls	r0, r2, #1
  40ccda:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40ccde:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 40ce9c <_malloc_r+0x534>
  40cce2:	6883      	ldr	r3, [r0, #8]
  40cce4:	4283      	cmp	r3, r0
  40cce6:	f000 808a 	beq.w	40cdfe <_malloc_r+0x496>
  40ccea:	685a      	ldr	r2, [r3, #4]
  40ccec:	f022 0203 	bic.w	r2, r2, #3
  40ccf0:	4291      	cmp	r1, r2
  40ccf2:	d202      	bcs.n	40ccfa <_malloc_r+0x392>
  40ccf4:	689b      	ldr	r3, [r3, #8]
  40ccf6:	4298      	cmp	r0, r3
  40ccf8:	d1f7      	bne.n	40ccea <_malloc_r+0x382>
  40ccfa:	68d9      	ldr	r1, [r3, #12]
  40ccfc:	687a      	ldr	r2, [r7, #4]
  40ccfe:	60e1      	str	r1, [r4, #12]
  40cd00:	60a3      	str	r3, [r4, #8]
  40cd02:	608c      	str	r4, [r1, #8]
  40cd04:	60dc      	str	r4, [r3, #12]
  40cd06:	e6b7      	b.n	40ca78 <_malloc_r+0x110>
  40cd08:	1961      	adds	r1, r4, r5
  40cd0a:	f042 0701 	orr.w	r7, r2, #1
  40cd0e:	f045 0501 	orr.w	r5, r5, #1
  40cd12:	6065      	str	r5, [r4, #4]
  40cd14:	4630      	mov	r0, r6
  40cd16:	6159      	str	r1, [r3, #20]
  40cd18:	6119      	str	r1, [r3, #16]
  40cd1a:	f8c1 e00c 	str.w	lr, [r1, #12]
  40cd1e:	f8c1 e008 	str.w	lr, [r1, #8]
  40cd22:	604f      	str	r7, [r1, #4]
  40cd24:	508a      	str	r2, [r1, r2]
  40cd26:	3408      	adds	r4, #8
  40cd28:	f000 f9a0 	bl	40d06c <__malloc_unlock>
  40cd2c:	e648      	b.n	40c9c0 <_malloc_r+0x58>
  40cd2e:	685a      	ldr	r2, [r3, #4]
  40cd30:	e6a2      	b.n	40ca78 <_malloc_r+0x110>
  40cd32:	f109 0901 	add.w	r9, r9, #1
  40cd36:	f019 0f03 	tst.w	r9, #3
  40cd3a:	f104 0408 	add.w	r4, r4, #8
  40cd3e:	f47f aeae 	bne.w	40ca9e <_malloc_r+0x136>
  40cd42:	e02d      	b.n	40cda0 <_malloc_r+0x438>
  40cd44:	f104 0308 	add.w	r3, r4, #8
  40cd48:	6964      	ldr	r4, [r4, #20]
  40cd4a:	42a3      	cmp	r3, r4
  40cd4c:	bf08      	it	eq
  40cd4e:	f10c 0c02 	addeq.w	ip, ip, #2
  40cd52:	f43f ae67 	beq.w	40ca24 <_malloc_r+0xbc>
  40cd56:	e623      	b.n	40c9a0 <_malloc_r+0x38>
  40cd58:	4419      	add	r1, r3
  40cd5a:	461c      	mov	r4, r3
  40cd5c:	6848      	ldr	r0, [r1, #4]
  40cd5e:	68db      	ldr	r3, [r3, #12]
  40cd60:	f854 2f08 	ldr.w	r2, [r4, #8]!
  40cd64:	f040 0501 	orr.w	r5, r0, #1
  40cd68:	604d      	str	r5, [r1, #4]
  40cd6a:	4630      	mov	r0, r6
  40cd6c:	60d3      	str	r3, [r2, #12]
  40cd6e:	609a      	str	r2, [r3, #8]
  40cd70:	f000 f97c 	bl	40d06c <__malloc_unlock>
  40cd74:	e624      	b.n	40c9c0 <_malloc_r+0x58>
  40cd76:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40cd7a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40cd7e:	e63b      	b.n	40c9f8 <_malloc_r+0x90>
  40cd80:	098a      	lsrs	r2, r1, #6
  40cd82:	3238      	adds	r2, #56	; 0x38
  40cd84:	0050      	lsls	r0, r2, #1
  40cd86:	e7a8      	b.n	40ccda <_malloc_r+0x372>
  40cd88:	42bc      	cmp	r4, r7
  40cd8a:	f43f af03 	beq.w	40cb94 <_malloc_r+0x22c>
  40cd8e:	68bc      	ldr	r4, [r7, #8]
  40cd90:	6862      	ldr	r2, [r4, #4]
  40cd92:	f022 0203 	bic.w	r2, r2, #3
  40cd96:	e762      	b.n	40cc5e <_malloc_r+0x2f6>
  40cd98:	f8d8 8000 	ldr.w	r8, [r8]
  40cd9c:	4598      	cmp	r8, r3
  40cd9e:	d17b      	bne.n	40ce98 <_malloc_r+0x530>
  40cda0:	f01c 0f03 	tst.w	ip, #3
  40cda4:	f1a8 0308 	sub.w	r3, r8, #8
  40cda8:	f10c 3cff 	add.w	ip, ip, #4294967295
  40cdac:	d1f4      	bne.n	40cd98 <_malloc_r+0x430>
  40cdae:	687b      	ldr	r3, [r7, #4]
  40cdb0:	ea23 0300 	bic.w	r3, r3, r0
  40cdb4:	607b      	str	r3, [r7, #4]
  40cdb6:	0040      	lsls	r0, r0, #1
  40cdb8:	4298      	cmp	r0, r3
  40cdba:	f63f aebf 	bhi.w	40cb3c <_malloc_r+0x1d4>
  40cdbe:	2800      	cmp	r0, #0
  40cdc0:	f43f aebc 	beq.w	40cb3c <_malloc_r+0x1d4>
  40cdc4:	4203      	tst	r3, r0
  40cdc6:	46cc      	mov	ip, r9
  40cdc8:	f47f ae65 	bne.w	40ca96 <_malloc_r+0x12e>
  40cdcc:	0040      	lsls	r0, r0, #1
  40cdce:	4203      	tst	r3, r0
  40cdd0:	f10c 0c04 	add.w	ip, ip, #4
  40cdd4:	d0fa      	beq.n	40cdcc <_malloc_r+0x464>
  40cdd6:	e65e      	b.n	40ca96 <_malloc_r+0x12e>
  40cdd8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40cddc:	d81a      	bhi.n	40ce14 <_malloc_r+0x4ac>
  40cdde:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40cde2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40cde6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40cdea:	e605      	b.n	40c9f8 <_malloc_r+0x90>
  40cdec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40cdf0:	e6ef      	b.n	40cbd2 <_malloc_r+0x26a>
  40cdf2:	2301      	movs	r3, #1
  40cdf4:	f8c8 3004 	str.w	r3, [r8, #4]
  40cdf8:	4644      	mov	r4, r8
  40cdfa:	2200      	movs	r2, #0
  40cdfc:	e72f      	b.n	40cc5e <_malloc_r+0x2f6>
  40cdfe:	1091      	asrs	r1, r2, #2
  40ce00:	2001      	movs	r0, #1
  40ce02:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40ce06:	fa00 f101 	lsl.w	r1, r0, r1
  40ce0a:	430a      	orrs	r2, r1
  40ce0c:	f8c8 2004 	str.w	r2, [r8, #4]
  40ce10:	4619      	mov	r1, r3
  40ce12:	e774      	b.n	40ccfe <_malloc_r+0x396>
  40ce14:	f240 5354 	movw	r3, #1364	; 0x554
  40ce18:	459c      	cmp	ip, r3
  40ce1a:	d81b      	bhi.n	40ce54 <_malloc_r+0x4ec>
  40ce1c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40ce20:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40ce24:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40ce28:	e5e6      	b.n	40c9f8 <_malloc_r+0x90>
  40ce2a:	f10a 0a10 	add.w	sl, sl, #16
  40ce2e:	e6a3      	b.n	40cb78 <_malloc_r+0x210>
  40ce30:	2b54      	cmp	r3, #84	; 0x54
  40ce32:	d81f      	bhi.n	40ce74 <_malloc_r+0x50c>
  40ce34:	0b0a      	lsrs	r2, r1, #12
  40ce36:	326e      	adds	r2, #110	; 0x6e
  40ce38:	0050      	lsls	r0, r2, #1
  40ce3a:	e74e      	b.n	40ccda <_malloc_r+0x372>
  40ce3c:	f3cb 010b 	ubfx	r1, fp, #0, #12
  40ce40:	2900      	cmp	r1, #0
  40ce42:	f47f aeb1 	bne.w	40cba8 <_malloc_r+0x240>
  40ce46:	eb0a 0109 	add.w	r1, sl, r9
  40ce4a:	68ba      	ldr	r2, [r7, #8]
  40ce4c:	f041 0101 	orr.w	r1, r1, #1
  40ce50:	6051      	str	r1, [r2, #4]
  40ce52:	e6f6      	b.n	40cc42 <_malloc_r+0x2da>
  40ce54:	21fc      	movs	r1, #252	; 0xfc
  40ce56:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40ce5a:	e5cd      	b.n	40c9f8 <_malloc_r+0x90>
  40ce5c:	2201      	movs	r2, #1
  40ce5e:	f04f 0a00 	mov.w	sl, #0
  40ce62:	e6cb      	b.n	40cbfc <_malloc_r+0x294>
  40ce64:	f104 0108 	add.w	r1, r4, #8
  40ce68:	4630      	mov	r0, r6
  40ce6a:	f004 ff65 	bl	411d38 <_free_r>
  40ce6e:	f8da 3000 	ldr.w	r3, [sl]
  40ce72:	e6e6      	b.n	40cc42 <_malloc_r+0x2da>
  40ce74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ce78:	d803      	bhi.n	40ce82 <_malloc_r+0x51a>
  40ce7a:	0bca      	lsrs	r2, r1, #15
  40ce7c:	3277      	adds	r2, #119	; 0x77
  40ce7e:	0050      	lsls	r0, r2, #1
  40ce80:	e72b      	b.n	40ccda <_malloc_r+0x372>
  40ce82:	f240 5254 	movw	r2, #1364	; 0x554
  40ce86:	4293      	cmp	r3, r2
  40ce88:	d803      	bhi.n	40ce92 <_malloc_r+0x52a>
  40ce8a:	0c8a      	lsrs	r2, r1, #18
  40ce8c:	327c      	adds	r2, #124	; 0x7c
  40ce8e:	0050      	lsls	r0, r2, #1
  40ce90:	e723      	b.n	40ccda <_malloc_r+0x372>
  40ce92:	20fc      	movs	r0, #252	; 0xfc
  40ce94:	227e      	movs	r2, #126	; 0x7e
  40ce96:	e720      	b.n	40ccda <_malloc_r+0x372>
  40ce98:	687b      	ldr	r3, [r7, #4]
  40ce9a:	e78c      	b.n	40cdb6 <_malloc_r+0x44e>
  40ce9c:	2000091c 	.word	0x2000091c

0040cea0 <memcpy>:
  40cea0:	4684      	mov	ip, r0
  40cea2:	ea41 0300 	orr.w	r3, r1, r0
  40cea6:	f013 0303 	ands.w	r3, r3, #3
  40ceaa:	d16d      	bne.n	40cf88 <memcpy+0xe8>
  40ceac:	3a40      	subs	r2, #64	; 0x40
  40ceae:	d341      	bcc.n	40cf34 <memcpy+0x94>
  40ceb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ceb4:	f840 3b04 	str.w	r3, [r0], #4
  40ceb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cebc:	f840 3b04 	str.w	r3, [r0], #4
  40cec0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cec4:	f840 3b04 	str.w	r3, [r0], #4
  40cec8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cecc:	f840 3b04 	str.w	r3, [r0], #4
  40ced0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ced4:	f840 3b04 	str.w	r3, [r0], #4
  40ced8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cedc:	f840 3b04 	str.w	r3, [r0], #4
  40cee0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cee4:	f840 3b04 	str.w	r3, [r0], #4
  40cee8:	f851 3b04 	ldr.w	r3, [r1], #4
  40ceec:	f840 3b04 	str.w	r3, [r0], #4
  40cef0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cef4:	f840 3b04 	str.w	r3, [r0], #4
  40cef8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cefc:	f840 3b04 	str.w	r3, [r0], #4
  40cf00:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf04:	f840 3b04 	str.w	r3, [r0], #4
  40cf08:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf0c:	f840 3b04 	str.w	r3, [r0], #4
  40cf10:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf14:	f840 3b04 	str.w	r3, [r0], #4
  40cf18:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf1c:	f840 3b04 	str.w	r3, [r0], #4
  40cf20:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf24:	f840 3b04 	str.w	r3, [r0], #4
  40cf28:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf2c:	f840 3b04 	str.w	r3, [r0], #4
  40cf30:	3a40      	subs	r2, #64	; 0x40
  40cf32:	d2bd      	bcs.n	40ceb0 <memcpy+0x10>
  40cf34:	3230      	adds	r2, #48	; 0x30
  40cf36:	d311      	bcc.n	40cf5c <memcpy+0xbc>
  40cf38:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf3c:	f840 3b04 	str.w	r3, [r0], #4
  40cf40:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf44:	f840 3b04 	str.w	r3, [r0], #4
  40cf48:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf4c:	f840 3b04 	str.w	r3, [r0], #4
  40cf50:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf54:	f840 3b04 	str.w	r3, [r0], #4
  40cf58:	3a10      	subs	r2, #16
  40cf5a:	d2ed      	bcs.n	40cf38 <memcpy+0x98>
  40cf5c:	320c      	adds	r2, #12
  40cf5e:	d305      	bcc.n	40cf6c <memcpy+0xcc>
  40cf60:	f851 3b04 	ldr.w	r3, [r1], #4
  40cf64:	f840 3b04 	str.w	r3, [r0], #4
  40cf68:	3a04      	subs	r2, #4
  40cf6a:	d2f9      	bcs.n	40cf60 <memcpy+0xc0>
  40cf6c:	3204      	adds	r2, #4
  40cf6e:	d008      	beq.n	40cf82 <memcpy+0xe2>
  40cf70:	07d2      	lsls	r2, r2, #31
  40cf72:	bf1c      	itt	ne
  40cf74:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cf78:	f800 3b01 	strbne.w	r3, [r0], #1
  40cf7c:	d301      	bcc.n	40cf82 <memcpy+0xe2>
  40cf7e:	880b      	ldrh	r3, [r1, #0]
  40cf80:	8003      	strh	r3, [r0, #0]
  40cf82:	4660      	mov	r0, ip
  40cf84:	4770      	bx	lr
  40cf86:	bf00      	nop
  40cf88:	2a08      	cmp	r2, #8
  40cf8a:	d313      	bcc.n	40cfb4 <memcpy+0x114>
  40cf8c:	078b      	lsls	r3, r1, #30
  40cf8e:	d08d      	beq.n	40ceac <memcpy+0xc>
  40cf90:	f010 0303 	ands.w	r3, r0, #3
  40cf94:	d08a      	beq.n	40ceac <memcpy+0xc>
  40cf96:	f1c3 0304 	rsb	r3, r3, #4
  40cf9a:	1ad2      	subs	r2, r2, r3
  40cf9c:	07db      	lsls	r3, r3, #31
  40cf9e:	bf1c      	itt	ne
  40cfa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cfa4:	f800 3b01 	strbne.w	r3, [r0], #1
  40cfa8:	d380      	bcc.n	40ceac <memcpy+0xc>
  40cfaa:	f831 3b02 	ldrh.w	r3, [r1], #2
  40cfae:	f820 3b02 	strh.w	r3, [r0], #2
  40cfb2:	e77b      	b.n	40ceac <memcpy+0xc>
  40cfb4:	3a04      	subs	r2, #4
  40cfb6:	d3d9      	bcc.n	40cf6c <memcpy+0xcc>
  40cfb8:	3a01      	subs	r2, #1
  40cfba:	f811 3b01 	ldrb.w	r3, [r1], #1
  40cfbe:	f800 3b01 	strb.w	r3, [r0], #1
  40cfc2:	d2f9      	bcs.n	40cfb8 <memcpy+0x118>
  40cfc4:	780b      	ldrb	r3, [r1, #0]
  40cfc6:	7003      	strb	r3, [r0, #0]
  40cfc8:	784b      	ldrb	r3, [r1, #1]
  40cfca:	7043      	strb	r3, [r0, #1]
  40cfcc:	788b      	ldrb	r3, [r1, #2]
  40cfce:	7083      	strb	r3, [r0, #2]
  40cfd0:	4660      	mov	r0, ip
  40cfd2:	4770      	bx	lr

0040cfd4 <memset>:
  40cfd4:	b4f0      	push	{r4, r5, r6, r7}
  40cfd6:	0784      	lsls	r4, r0, #30
  40cfd8:	d043      	beq.n	40d062 <memset+0x8e>
  40cfda:	1e54      	subs	r4, r2, #1
  40cfdc:	2a00      	cmp	r2, #0
  40cfde:	d03e      	beq.n	40d05e <memset+0x8a>
  40cfe0:	b2cd      	uxtb	r5, r1
  40cfe2:	4603      	mov	r3, r0
  40cfe4:	e003      	b.n	40cfee <memset+0x1a>
  40cfe6:	1e62      	subs	r2, r4, #1
  40cfe8:	2c00      	cmp	r4, #0
  40cfea:	d038      	beq.n	40d05e <memset+0x8a>
  40cfec:	4614      	mov	r4, r2
  40cfee:	f803 5b01 	strb.w	r5, [r3], #1
  40cff2:	079a      	lsls	r2, r3, #30
  40cff4:	d1f7      	bne.n	40cfe6 <memset+0x12>
  40cff6:	2c03      	cmp	r4, #3
  40cff8:	d92a      	bls.n	40d050 <memset+0x7c>
  40cffa:	b2cd      	uxtb	r5, r1
  40cffc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40d000:	2c0f      	cmp	r4, #15
  40d002:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40d006:	d915      	bls.n	40d034 <memset+0x60>
  40d008:	f1a4 0710 	sub.w	r7, r4, #16
  40d00c:	093f      	lsrs	r7, r7, #4
  40d00e:	f103 0610 	add.w	r6, r3, #16
  40d012:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40d016:	461a      	mov	r2, r3
  40d018:	6015      	str	r5, [r2, #0]
  40d01a:	6055      	str	r5, [r2, #4]
  40d01c:	6095      	str	r5, [r2, #8]
  40d01e:	60d5      	str	r5, [r2, #12]
  40d020:	3210      	adds	r2, #16
  40d022:	42b2      	cmp	r2, r6
  40d024:	d1f8      	bne.n	40d018 <memset+0x44>
  40d026:	f004 040f 	and.w	r4, r4, #15
  40d02a:	3701      	adds	r7, #1
  40d02c:	2c03      	cmp	r4, #3
  40d02e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40d032:	d90d      	bls.n	40d050 <memset+0x7c>
  40d034:	461e      	mov	r6, r3
  40d036:	4622      	mov	r2, r4
  40d038:	3a04      	subs	r2, #4
  40d03a:	2a03      	cmp	r2, #3
  40d03c:	f846 5b04 	str.w	r5, [r6], #4
  40d040:	d8fa      	bhi.n	40d038 <memset+0x64>
  40d042:	1f22      	subs	r2, r4, #4
  40d044:	f022 0203 	bic.w	r2, r2, #3
  40d048:	3204      	adds	r2, #4
  40d04a:	4413      	add	r3, r2
  40d04c:	f004 0403 	and.w	r4, r4, #3
  40d050:	b12c      	cbz	r4, 40d05e <memset+0x8a>
  40d052:	b2c9      	uxtb	r1, r1
  40d054:	441c      	add	r4, r3
  40d056:	f803 1b01 	strb.w	r1, [r3], #1
  40d05a:	42a3      	cmp	r3, r4
  40d05c:	d1fb      	bne.n	40d056 <memset+0x82>
  40d05e:	bcf0      	pop	{r4, r5, r6, r7}
  40d060:	4770      	bx	lr
  40d062:	4614      	mov	r4, r2
  40d064:	4603      	mov	r3, r0
  40d066:	e7c6      	b.n	40cff6 <memset+0x22>

0040d068 <__malloc_lock>:
  40d068:	4770      	bx	lr
  40d06a:	bf00      	nop

0040d06c <__malloc_unlock>:
  40d06c:	4770      	bx	lr
  40d06e:	bf00      	nop

0040d070 <_sbrk_r>:
  40d070:	b538      	push	{r3, r4, r5, lr}
  40d072:	4c07      	ldr	r4, [pc, #28]	; (40d090 <_sbrk_r+0x20>)
  40d074:	2300      	movs	r3, #0
  40d076:	4605      	mov	r5, r0
  40d078:	4608      	mov	r0, r1
  40d07a:	6023      	str	r3, [r4, #0]
  40d07c:	f7fe ffe4 	bl	40c048 <_sbrk>
  40d080:	1c43      	adds	r3, r0, #1
  40d082:	d000      	beq.n	40d086 <_sbrk_r+0x16>
  40d084:	bd38      	pop	{r3, r4, r5, pc}
  40d086:	6823      	ldr	r3, [r4, #0]
  40d088:	2b00      	cmp	r3, #0
  40d08a:	d0fb      	beq.n	40d084 <_sbrk_r+0x14>
  40d08c:	602b      	str	r3, [r5, #0]
  40d08e:	bd38      	pop	{r3, r4, r5, pc}
  40d090:	200040e8 	.word	0x200040e8

0040d094 <setbuf>:
  40d094:	2900      	cmp	r1, #0
  40d096:	bf0c      	ite	eq
  40d098:	2202      	moveq	r2, #2
  40d09a:	2200      	movne	r2, #0
  40d09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d0a0:	f000 b800 	b.w	40d0a4 <setvbuf>

0040d0a4 <setvbuf>:
  40d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d0a8:	4c3c      	ldr	r4, [pc, #240]	; (40d19c <setvbuf+0xf8>)
  40d0aa:	6825      	ldr	r5, [r4, #0]
  40d0ac:	4688      	mov	r8, r1
  40d0ae:	4604      	mov	r4, r0
  40d0b0:	4616      	mov	r6, r2
  40d0b2:	461f      	mov	r7, r3
  40d0b4:	b115      	cbz	r5, 40d0bc <setvbuf+0x18>
  40d0b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40d0b8:	2b00      	cmp	r3, #0
  40d0ba:	d04f      	beq.n	40d15c <setvbuf+0xb8>
  40d0bc:	2e02      	cmp	r6, #2
  40d0be:	d830      	bhi.n	40d122 <setvbuf+0x7e>
  40d0c0:	2f00      	cmp	r7, #0
  40d0c2:	db2e      	blt.n	40d122 <setvbuf+0x7e>
  40d0c4:	4628      	mov	r0, r5
  40d0c6:	4621      	mov	r1, r4
  40d0c8:	f004 fcd8 	bl	411a7c <_fflush_r>
  40d0cc:	89a3      	ldrh	r3, [r4, #12]
  40d0ce:	2200      	movs	r2, #0
  40d0d0:	6062      	str	r2, [r4, #4]
  40d0d2:	61a2      	str	r2, [r4, #24]
  40d0d4:	061a      	lsls	r2, r3, #24
  40d0d6:	d428      	bmi.n	40d12a <setvbuf+0x86>
  40d0d8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40d0dc:	b29b      	uxth	r3, r3
  40d0de:	2e02      	cmp	r6, #2
  40d0e0:	81a3      	strh	r3, [r4, #12]
  40d0e2:	d02d      	beq.n	40d140 <setvbuf+0x9c>
  40d0e4:	f1b8 0f00 	cmp.w	r8, #0
  40d0e8:	d03c      	beq.n	40d164 <setvbuf+0xc0>
  40d0ea:	2e01      	cmp	r6, #1
  40d0ec:	d013      	beq.n	40d116 <setvbuf+0x72>
  40d0ee:	b29b      	uxth	r3, r3
  40d0f0:	f003 0008 	and.w	r0, r3, #8
  40d0f4:	4a2a      	ldr	r2, [pc, #168]	; (40d1a0 <setvbuf+0xfc>)
  40d0f6:	63ea      	str	r2, [r5, #60]	; 0x3c
  40d0f8:	b280      	uxth	r0, r0
  40d0fa:	f8c4 8000 	str.w	r8, [r4]
  40d0fe:	f8c4 8010 	str.w	r8, [r4, #16]
  40d102:	6167      	str	r7, [r4, #20]
  40d104:	b178      	cbz	r0, 40d126 <setvbuf+0x82>
  40d106:	f013 0f03 	tst.w	r3, #3
  40d10a:	bf18      	it	ne
  40d10c:	2700      	movne	r7, #0
  40d10e:	60a7      	str	r7, [r4, #8]
  40d110:	2000      	movs	r0, #0
  40d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d116:	f043 0301 	orr.w	r3, r3, #1
  40d11a:	427a      	negs	r2, r7
  40d11c:	81a3      	strh	r3, [r4, #12]
  40d11e:	61a2      	str	r2, [r4, #24]
  40d120:	e7e5      	b.n	40d0ee <setvbuf+0x4a>
  40d122:	f04f 30ff 	mov.w	r0, #4294967295
  40d126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d12a:	4628      	mov	r0, r5
  40d12c:	6921      	ldr	r1, [r4, #16]
  40d12e:	f004 fe03 	bl	411d38 <_free_r>
  40d132:	89a3      	ldrh	r3, [r4, #12]
  40d134:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40d138:	b29b      	uxth	r3, r3
  40d13a:	2e02      	cmp	r6, #2
  40d13c:	81a3      	strh	r3, [r4, #12]
  40d13e:	d1d1      	bne.n	40d0e4 <setvbuf+0x40>
  40d140:	2000      	movs	r0, #0
  40d142:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40d146:	f043 0302 	orr.w	r3, r3, #2
  40d14a:	2500      	movs	r5, #0
  40d14c:	2101      	movs	r1, #1
  40d14e:	81a3      	strh	r3, [r4, #12]
  40d150:	60a5      	str	r5, [r4, #8]
  40d152:	6022      	str	r2, [r4, #0]
  40d154:	6122      	str	r2, [r4, #16]
  40d156:	6161      	str	r1, [r4, #20]
  40d158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d15c:	4628      	mov	r0, r5
  40d15e:	f004 fca9 	bl	411ab4 <__sinit>
  40d162:	e7ab      	b.n	40d0bc <setvbuf+0x18>
  40d164:	2f00      	cmp	r7, #0
  40d166:	bf08      	it	eq
  40d168:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40d16c:	4638      	mov	r0, r7
  40d16e:	f7ff fbeb 	bl	40c948 <malloc>
  40d172:	4680      	mov	r8, r0
  40d174:	b128      	cbz	r0, 40d182 <setvbuf+0xde>
  40d176:	89a3      	ldrh	r3, [r4, #12]
  40d178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d17c:	b29b      	uxth	r3, r3
  40d17e:	81a3      	strh	r3, [r4, #12]
  40d180:	e7b3      	b.n	40d0ea <setvbuf+0x46>
  40d182:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40d186:	f7ff fbdf 	bl	40c948 <malloc>
  40d18a:	4680      	mov	r8, r0
  40d18c:	b918      	cbnz	r0, 40d196 <setvbuf+0xf2>
  40d18e:	89a3      	ldrh	r3, [r4, #12]
  40d190:	f04f 30ff 	mov.w	r0, #4294967295
  40d194:	e7d5      	b.n	40d142 <setvbuf+0x9e>
  40d196:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40d19a:	e7ec      	b.n	40d176 <setvbuf+0xd2>
  40d19c:	20000918 	.word	0x20000918
  40d1a0:	00411aa9 	.word	0x00411aa9

0040d1a4 <snprintf>:
  40d1a4:	b40c      	push	{r2, r3}
  40d1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d1a8:	4b17      	ldr	r3, [pc, #92]	; (40d208 <snprintf+0x64>)
  40d1aa:	1e0c      	subs	r4, r1, #0
  40d1ac:	b09d      	sub	sp, #116	; 0x74
  40d1ae:	681f      	ldr	r7, [r3, #0]
  40d1b0:	db24      	blt.n	40d1fc <snprintf+0x58>
  40d1b2:	f44f 7302 	mov.w	r3, #520	; 0x208
  40d1b6:	ad23      	add	r5, sp, #140	; 0x8c
  40d1b8:	bf14      	ite	ne
  40d1ba:	f104 36ff 	addne.w	r6, r4, #4294967295
  40d1be:	4626      	moveq	r6, r4
  40d1c0:	9002      	str	r0, [sp, #8]
  40d1c2:	9006      	str	r0, [sp, #24]
  40d1c4:	f8ad 3014 	strh.w	r3, [sp, #20]
  40d1c8:	f64f 7eff 	movw	lr, #65535	; 0xffff
  40d1cc:	462b      	mov	r3, r5
  40d1ce:	4638      	mov	r0, r7
  40d1d0:	a902      	add	r1, sp, #8
  40d1d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d1d4:	9604      	str	r6, [sp, #16]
  40d1d6:	9607      	str	r6, [sp, #28]
  40d1d8:	9501      	str	r5, [sp, #4]
  40d1da:	f8ad e016 	strh.w	lr, [sp, #22]
  40d1de:	f000 faf9 	bl	40d7d4 <_svfprintf_r>
  40d1e2:	1c43      	adds	r3, r0, #1
  40d1e4:	bfbc      	itt	lt
  40d1e6:	238b      	movlt	r3, #139	; 0x8b
  40d1e8:	603b      	strlt	r3, [r7, #0]
  40d1ea:	b114      	cbz	r4, 40d1f2 <snprintf+0x4e>
  40d1ec:	9b02      	ldr	r3, [sp, #8]
  40d1ee:	2200      	movs	r2, #0
  40d1f0:	701a      	strb	r2, [r3, #0]
  40d1f2:	b01d      	add	sp, #116	; 0x74
  40d1f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40d1f8:	b002      	add	sp, #8
  40d1fa:	4770      	bx	lr
  40d1fc:	238b      	movs	r3, #139	; 0x8b
  40d1fe:	603b      	str	r3, [r7, #0]
  40d200:	f04f 30ff 	mov.w	r0, #4294967295
  40d204:	e7f5      	b.n	40d1f2 <snprintf+0x4e>
  40d206:	bf00      	nop
  40d208:	20000918 	.word	0x20000918

0040d20c <sprintf>:
  40d20c:	b40e      	push	{r1, r2, r3}
  40d20e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d210:	b09c      	sub	sp, #112	; 0x70
  40d212:	ab21      	add	r3, sp, #132	; 0x84
  40d214:	490f      	ldr	r1, [pc, #60]	; (40d254 <sprintf+0x48>)
  40d216:	f853 2b04 	ldr.w	r2, [r3], #4
  40d21a:	9301      	str	r3, [sp, #4]
  40d21c:	4605      	mov	r5, r0
  40d21e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40d222:	6808      	ldr	r0, [r1, #0]
  40d224:	9502      	str	r5, [sp, #8]
  40d226:	f44f 7702 	mov.w	r7, #520	; 0x208
  40d22a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40d22e:	a902      	add	r1, sp, #8
  40d230:	9506      	str	r5, [sp, #24]
  40d232:	f8ad 7014 	strh.w	r7, [sp, #20]
  40d236:	9404      	str	r4, [sp, #16]
  40d238:	9407      	str	r4, [sp, #28]
  40d23a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40d23e:	f000 fac9 	bl	40d7d4 <_svfprintf_r>
  40d242:	9b02      	ldr	r3, [sp, #8]
  40d244:	2200      	movs	r2, #0
  40d246:	701a      	strb	r2, [r3, #0]
  40d248:	b01c      	add	sp, #112	; 0x70
  40d24a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40d24e:	b003      	add	sp, #12
  40d250:	4770      	bx	lr
  40d252:	bf00      	nop
  40d254:	20000918 	.word	0x20000918

0040d258 <sscanf>:
  40d258:	b40e      	push	{r1, r2, r3}
  40d25a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d25c:	b09c      	sub	sp, #112	; 0x70
  40d25e:	ac21      	add	r4, sp, #132	; 0x84
  40d260:	f44f 7201 	mov.w	r2, #516	; 0x204
  40d264:	f854 6b04 	ldr.w	r6, [r4], #4
  40d268:	f8ad 2014 	strh.w	r2, [sp, #20]
  40d26c:	9002      	str	r0, [sp, #8]
  40d26e:	9006      	str	r0, [sp, #24]
  40d270:	f000 f9f4 	bl	40d65c <strlen>
  40d274:	4b0c      	ldr	r3, [pc, #48]	; (40d2a8 <sscanf+0x50>)
  40d276:	9401      	str	r4, [sp, #4]
  40d278:	4605      	mov	r5, r0
  40d27a:	4632      	mov	r2, r6
  40d27c:	4f0b      	ldr	r7, [pc, #44]	; (40d2ac <sscanf+0x54>)
  40d27e:	6818      	ldr	r0, [r3, #0]
  40d280:	9503      	str	r5, [sp, #12]
  40d282:	4623      	mov	r3, r4
  40d284:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40d288:	2400      	movs	r4, #0
  40d28a:	a902      	add	r1, sp, #8
  40d28c:	9507      	str	r5, [sp, #28]
  40d28e:	970a      	str	r7, [sp, #40]	; 0x28
  40d290:	940e      	str	r4, [sp, #56]	; 0x38
  40d292:	9413      	str	r4, [sp, #76]	; 0x4c
  40d294:	f8ad 6016 	strh.w	r6, [sp, #22]
  40d298:	f001 fd18 	bl	40eccc <__ssvfscanf_r>
  40d29c:	b01c      	add	sp, #112	; 0x70
  40d29e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40d2a2:	b003      	add	sp, #12
  40d2a4:	4770      	bx	lr
  40d2a6:	bf00      	nop
  40d2a8:	20000918 	.word	0x20000918
  40d2ac:	0040d2d5 	.word	0x0040d2d5

0040d2b0 <__sread>:
  40d2b0:	b510      	push	{r4, lr}
  40d2b2:	460c      	mov	r4, r1
  40d2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d2b8:	f005 fd96 	bl	412de8 <_read_r>
  40d2bc:	2800      	cmp	r0, #0
  40d2be:	db03      	blt.n	40d2c8 <__sread+0x18>
  40d2c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d2c2:	4403      	add	r3, r0
  40d2c4:	6523      	str	r3, [r4, #80]	; 0x50
  40d2c6:	bd10      	pop	{r4, pc}
  40d2c8:	89a3      	ldrh	r3, [r4, #12]
  40d2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40d2ce:	81a3      	strh	r3, [r4, #12]
  40d2d0:	bd10      	pop	{r4, pc}
  40d2d2:	bf00      	nop

0040d2d4 <__seofread>:
  40d2d4:	2000      	movs	r0, #0
  40d2d6:	4770      	bx	lr

0040d2d8 <__swrite>:
  40d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d2dc:	460c      	mov	r4, r1
  40d2de:	8989      	ldrh	r1, [r1, #12]
  40d2e0:	461d      	mov	r5, r3
  40d2e2:	05cb      	lsls	r3, r1, #23
  40d2e4:	4616      	mov	r6, r2
  40d2e6:	4607      	mov	r7, r0
  40d2e8:	d506      	bpl.n	40d2f8 <__swrite+0x20>
  40d2ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d2ee:	2200      	movs	r2, #0
  40d2f0:	2302      	movs	r3, #2
  40d2f2:	f004 ffbd 	bl	412270 <_lseek_r>
  40d2f6:	89a1      	ldrh	r1, [r4, #12]
  40d2f8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40d2fc:	81a1      	strh	r1, [r4, #12]
  40d2fe:	4638      	mov	r0, r7
  40d300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d304:	4632      	mov	r2, r6
  40d306:	462b      	mov	r3, r5
  40d308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d30c:	f003 babe 	b.w	41088c <_write_r>

0040d310 <__sseek>:
  40d310:	b510      	push	{r4, lr}
  40d312:	460c      	mov	r4, r1
  40d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d318:	f004 ffaa 	bl	412270 <_lseek_r>
  40d31c:	89a3      	ldrh	r3, [r4, #12]
  40d31e:	1c42      	adds	r2, r0, #1
  40d320:	bf0e      	itee	eq
  40d322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40d326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40d32a:	6520      	strne	r0, [r4, #80]	; 0x50
  40d32c:	81a3      	strh	r3, [r4, #12]
  40d32e:	bd10      	pop	{r4, pc}

0040d330 <__sclose>:
  40d330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d334:	f003 bb30 	b.w	410998 <_close_r>

0040d338 <strcat>:
  40d338:	0783      	lsls	r3, r0, #30
  40d33a:	b570      	push	{r4, r5, r6, lr}
  40d33c:	4606      	mov	r6, r0
  40d33e:	d11f      	bne.n	40d380 <strcat+0x48>
  40d340:	6803      	ldr	r3, [r0, #0]
  40d342:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40d346:	ea22 0303 	bic.w	r3, r2, r3
  40d34a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40d34e:	bf08      	it	eq
  40d350:	1d03      	addeq	r3, r0, #4
  40d352:	d115      	bne.n	40d380 <strcat+0x48>
  40d354:	4618      	mov	r0, r3
  40d356:	f853 4b04 	ldr.w	r4, [r3], #4
  40d35a:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40d35e:	ea25 0404 	bic.w	r4, r5, r4
  40d362:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40d366:	d0f5      	beq.n	40d354 <strcat+0x1c>
  40d368:	7803      	ldrb	r3, [r0, #0]
  40d36a:	b12b      	cbz	r3, 40d378 <strcat+0x40>
  40d36c:	1c43      	adds	r3, r0, #1
  40d36e:	4618      	mov	r0, r3
  40d370:	3301      	adds	r3, #1
  40d372:	7804      	ldrb	r4, [r0, #0]
  40d374:	2c00      	cmp	r4, #0
  40d376:	d1fa      	bne.n	40d36e <strcat+0x36>
  40d378:	f000 f912 	bl	40d5a0 <strcpy>
  40d37c:	4630      	mov	r0, r6
  40d37e:	bd70      	pop	{r4, r5, r6, pc}
  40d380:	4630      	mov	r0, r6
  40d382:	e7f1      	b.n	40d368 <strcat+0x30>

0040d384 <strcmp>:
  40d384:	ea40 0c01 	orr.w	ip, r0, r1
  40d388:	f01c 0f07 	tst.w	ip, #7
  40d38c:	d123      	bne.n	40d3d6 <strcmp+0x52>
  40d38e:	f1bd 0d10 	subs.w	sp, sp, #16
  40d392:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40d396:	e9cd 6700 	strd	r6, r7, [sp]
  40d39a:	f06f 0600 	mvn.w	r6, #0
  40d39e:	f04f 0700 	mov.w	r7, #0
  40d3a2:	bf00      	nop
  40d3a4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  40d3a8:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  40d3ac:	42a2      	cmp	r2, r4
  40d3ae:	fa82 fc46 	uadd8	ip, r2, r6
  40d3b2:	faa7 fc86 	sel	ip, r7, r6
  40d3b6:	bf08      	it	eq
  40d3b8:	f1bc 0f00 	cmpeq.w	ip, #0
  40d3bc:	f040 80d7 	bne.w	40d56e <strcmp+0x1ea>
  40d3c0:	42ab      	cmp	r3, r5
  40d3c2:	fa83 fc46 	uadd8	ip, r3, r6
  40d3c6:	faa7 fc86 	sel	ip, r7, r6
  40d3ca:	bf08      	it	eq
  40d3cc:	f1bc 0f00 	cmpeq.w	ip, #0
  40d3d0:	f040 80ca 	bne.w	40d568 <strcmp+0x1e4>
  40d3d4:	e7e6      	b.n	40d3a4 <strcmp+0x20>
  40d3d6:	f010 0c03 	ands.w	ip, r0, #3
  40d3da:	d021      	beq.n	40d420 <strcmp+0x9c>
  40d3dc:	f020 0003 	bic.w	r0, r0, #3
  40d3e0:	f850 2b04 	ldr.w	r2, [r0], #4
  40d3e4:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
  40d3e8:	d008      	beq.n	40d3fc <strcmp+0x78>
  40d3ea:	d20f      	bcs.n	40d40c <strcmp+0x88>
  40d3ec:	f811 cb01 	ldrb.w	ip, [r1], #1
  40d3f0:	fa5f f392 	uxtb.w	r3, r2, ror #8
  40d3f4:	ebb3 0c0c 	subs.w	ip, r3, ip
  40d3f8:	d110      	bne.n	40d41c <strcmp+0x98>
  40d3fa:	b17b      	cbz	r3, 40d41c <strcmp+0x98>
  40d3fc:	f811 cb01 	ldrb.w	ip, [r1], #1
  40d400:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
  40d404:	ebb3 0c0c 	subs.w	ip, r3, ip
  40d408:	d108      	bne.n	40d41c <strcmp+0x98>
  40d40a:	b13b      	cbz	r3, 40d41c <strcmp+0x98>
  40d40c:	f811 cb01 	ldrb.w	ip, [r1], #1
  40d410:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
  40d414:	ebb3 0c0c 	subs.w	ip, r3, ip
  40d418:	d100      	bne.n	40d41c <strcmp+0x98>
  40d41a:	b90b      	cbnz	r3, 40d420 <strcmp+0x9c>
  40d41c:	4660      	mov	r0, ip
  40d41e:	4770      	bx	lr
  40d420:	f1bd 0d10 	subs.w	sp, sp, #16
  40d424:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40d428:	e9cd 6700 	strd	r6, r7, [sp]
  40d42c:	f06f 0600 	mvn.w	r6, #0
  40d430:	f04f 0700 	mov.w	r7, #0
  40d434:	f011 0c03 	ands.w	ip, r1, #3
  40d438:	d12d      	bne.n	40d496 <strcmp+0x112>
  40d43a:	f010 0f04 	tst.w	r0, #4
  40d43e:	d00d      	beq.n	40d45c <strcmp+0xd8>
  40d440:	f850 2b04 	ldr.w	r2, [r0], #4
  40d444:	f851 4b04 	ldr.w	r4, [r1], #4
  40d448:	42a2      	cmp	r2, r4
  40d44a:	fa82 fc46 	uadd8	ip, r2, r6
  40d44e:	faa7 fc86 	sel	ip, r7, r6
  40d452:	bf08      	it	eq
  40d454:	f1bc 0f00 	cmpeq.w	ip, #0
  40d458:	f040 8089 	bne.w	40d56e <strcmp+0x1ea>
  40d45c:	f011 0f04 	tst.w	r1, #4
  40d460:	d09f      	beq.n	40d3a2 <strcmp+0x1e>
  40d462:	f851 5b04 	ldr.w	r5, [r1], #4
  40d466:	bf00      	nop
  40d468:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  40d46c:	42aa      	cmp	r2, r5
  40d46e:	fa82 fc46 	uadd8	ip, r2, r6
  40d472:	faa7 fc86 	sel	ip, r7, r6
  40d476:	bf08      	it	eq
  40d478:	f1bc 0f00 	cmpeq.w	ip, #0
  40d47c:	d171      	bne.n	40d562 <strcmp+0x1de>
  40d47e:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  40d482:	42a3      	cmp	r3, r4
  40d484:	fa83 fc46 	uadd8	ip, r3, r6
  40d488:	faa7 fc86 	sel	ip, r7, r6
  40d48c:	bf08      	it	eq
  40d48e:	f1bc 0f00 	cmpeq.w	ip, #0
  40d492:	d163      	bne.n	40d55c <strcmp+0x1d8>
  40d494:	e7e8      	b.n	40d468 <strcmp+0xe4>
  40d496:	f021 0103 	bic.w	r1, r1, #3
  40d49a:	f1bc 0f02 	cmp.w	ip, #2
  40d49e:	d01e      	beq.n	40d4de <strcmp+0x15a>
  40d4a0:	da3b      	bge.n	40d51a <strcmp+0x196>
  40d4a2:	f851 5b04 	ldr.w	r5, [r1], #4
  40d4a6:	bf00      	nop
  40d4a8:	f850 3b04 	ldr.w	r3, [r0], #4
  40d4ac:	ea4f 2515 	mov.w	r5, r5, lsr #8
  40d4b0:	fa83 fc46 	uadd8	ip, r3, r6
  40d4b4:	faa7 fc86 	sel	ip, r7, r6
  40d4b8:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
  40d4bc:	ea03 2216 	and.w	r2, r3, r6, lsr #8
  40d4c0:	bf08      	it	eq
  40d4c2:	42aa      	cmpeq	r2, r5
  40d4c4:	d14d      	bne.n	40d562 <strcmp+0x1de>
  40d4c6:	f851 5b04 	ldr.w	r5, [r1], #4
  40d4ca:	f1bc 0f00 	cmp.w	ip, #0
  40d4ce:	ea82 0303 	eor.w	r3, r2, r3
  40d4d2:	ea4f 6205 	mov.w	r2, r5, lsl #24
  40d4d6:	bf08      	it	eq
  40d4d8:	4293      	cmpeq	r3, r2
  40d4da:	d13c      	bne.n	40d556 <strcmp+0x1d2>
  40d4dc:	e7e4      	b.n	40d4a8 <strcmp+0x124>
  40d4de:	f851 5b04 	ldr.w	r5, [r1], #4
  40d4e2:	bf00      	nop
  40d4e4:	f850 3b04 	ldr.w	r3, [r0], #4
  40d4e8:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40d4ec:	fa83 fc46 	uadd8	ip, r3, r6
  40d4f0:	faa7 fc86 	sel	ip, r7, r6
  40d4f4:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
  40d4f8:	ea03 4216 	and.w	r2, r3, r6, lsr #16
  40d4fc:	bf08      	it	eq
  40d4fe:	42aa      	cmpeq	r2, r5
  40d500:	d12f      	bne.n	40d562 <strcmp+0x1de>
  40d502:	f851 5b04 	ldr.w	r5, [r1], #4
  40d506:	f1bc 0f00 	cmp.w	ip, #0
  40d50a:	ea82 0303 	eor.w	r3, r2, r3
  40d50e:	ea4f 4205 	mov.w	r2, r5, lsl #16
  40d512:	bf08      	it	eq
  40d514:	4293      	cmpeq	r3, r2
  40d516:	d11e      	bne.n	40d556 <strcmp+0x1d2>
  40d518:	e7e4      	b.n	40d4e4 <strcmp+0x160>
  40d51a:	f851 5b04 	ldr.w	r5, [r1], #4
  40d51e:	bf00      	nop
  40d520:	f850 3b04 	ldr.w	r3, [r0], #4
  40d524:	ea4f 6515 	mov.w	r5, r5, lsr #24
  40d528:	fa83 fc46 	uadd8	ip, r3, r6
  40d52c:	faa7 fc86 	sel	ip, r7, r6
  40d530:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
  40d534:	ea03 6216 	and.w	r2, r3, r6, lsr #24
  40d538:	bf08      	it	eq
  40d53a:	42aa      	cmpeq	r2, r5
  40d53c:	d111      	bne.n	40d562 <strcmp+0x1de>
  40d53e:	f851 5b04 	ldr.w	r5, [r1], #4
  40d542:	f1bc 0f00 	cmp.w	ip, #0
  40d546:	ea82 0303 	eor.w	r3, r2, r3
  40d54a:	ea4f 2205 	mov.w	r2, r5, lsl #8
  40d54e:	bf08      	it	eq
  40d550:	4293      	cmpeq	r3, r2
  40d552:	d100      	bne.n	40d556 <strcmp+0x1d2>
  40d554:	e7e4      	b.n	40d520 <strcmp+0x19c>
  40d556:	ba19      	rev	r1, r3
  40d558:	ba12      	rev	r2, r2
  40d55a:	e00a      	b.n	40d572 <strcmp+0x1ee>
  40d55c:	ba19      	rev	r1, r3
  40d55e:	ba22      	rev	r2, r4
  40d560:	e007      	b.n	40d572 <strcmp+0x1ee>
  40d562:	ba11      	rev	r1, r2
  40d564:	ba2a      	rev	r2, r5
  40d566:	e004      	b.n	40d572 <strcmp+0x1ee>
  40d568:	ba19      	rev	r1, r3
  40d56a:	ba2a      	rev	r2, r5
  40d56c:	e001      	b.n	40d572 <strcmp+0x1ee>
  40d56e:	ba11      	rev	r1, r2
  40d570:	ba22      	rev	r2, r4
  40d572:	fa9c f08c 	rev.w	r0, ip
  40d576:	e9dd 6700 	ldrd	r6, r7, [sp]
  40d57a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40d57e:	f11d 0d10 	adds.w	sp, sp, #16
  40d582:	b138      	cbz	r0, 40d594 <strcmp+0x210>
  40d584:	fab0 f080 	clz	r0, r0
  40d588:	f1c0 0018 	rsb	r0, r0, #24
  40d58c:	fa21 f100 	lsr.w	r1, r1, r0
  40d590:	fa22 f200 	lsr.w	r2, r2, r0
  40d594:	2001      	movs	r0, #1
  40d596:	4291      	cmp	r1, r2
  40d598:	bf98      	it	ls
  40d59a:	4180      	sbcls	r0, r0
  40d59c:	4770      	bx	lr
  40d59e:	bf00      	nop

0040d5a0 <strcpy>:
  40d5a0:	ea80 0201 	eor.w	r2, r0, r1
  40d5a4:	4684      	mov	ip, r0
  40d5a6:	f012 0f03 	tst.w	r2, #3
  40d5aa:	d14f      	bne.n	40d64c <strcpy+0xac>
  40d5ac:	f011 0f03 	tst.w	r1, #3
  40d5b0:	d132      	bne.n	40d618 <strcpy+0x78>
  40d5b2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40d5b6:	f011 0f04 	tst.w	r1, #4
  40d5ba:	f851 3b04 	ldr.w	r3, [r1], #4
  40d5be:	d00b      	beq.n	40d5d8 <strcpy+0x38>
  40d5c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40d5c4:	439a      	bics	r2, r3
  40d5c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40d5ca:	bf04      	itt	eq
  40d5cc:	f84c 3b04 	streq.w	r3, [ip], #4
  40d5d0:	f851 3b04 	ldreq.w	r3, [r1], #4
  40d5d4:	d116      	bne.n	40d604 <strcpy+0x64>
  40d5d6:	bf00      	nop
  40d5d8:	f851 4b04 	ldr.w	r4, [r1], #4
  40d5dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40d5e0:	439a      	bics	r2, r3
  40d5e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40d5e6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40d5ea:	d10b      	bne.n	40d604 <strcpy+0x64>
  40d5ec:	f84c 3b04 	str.w	r3, [ip], #4
  40d5f0:	43a2      	bics	r2, r4
  40d5f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40d5f6:	bf04      	itt	eq
  40d5f8:	f851 3b04 	ldreq.w	r3, [r1], #4
  40d5fc:	f84c 4b04 	streq.w	r4, [ip], #4
  40d600:	d0ea      	beq.n	40d5d8 <strcpy+0x38>
  40d602:	4623      	mov	r3, r4
  40d604:	f80c 3b01 	strb.w	r3, [ip], #1
  40d608:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d60c:	ea4f 2333 	mov.w	r3, r3, ror #8
  40d610:	d1f8      	bne.n	40d604 <strcpy+0x64>
  40d612:	f85d 4b04 	ldr.w	r4, [sp], #4
  40d616:	4770      	bx	lr
  40d618:	f011 0f01 	tst.w	r1, #1
  40d61c:	d006      	beq.n	40d62c <strcpy+0x8c>
  40d61e:	f811 2b01 	ldrb.w	r2, [r1], #1
  40d622:	f80c 2b01 	strb.w	r2, [ip], #1
  40d626:	2a00      	cmp	r2, #0
  40d628:	bf08      	it	eq
  40d62a:	4770      	bxeq	lr
  40d62c:	f011 0f02 	tst.w	r1, #2
  40d630:	d0bf      	beq.n	40d5b2 <strcpy+0x12>
  40d632:	f831 2b02 	ldrh.w	r2, [r1], #2
  40d636:	f012 0fff 	tst.w	r2, #255	; 0xff
  40d63a:	bf16      	itet	ne
  40d63c:	f82c 2b02 	strhne.w	r2, [ip], #2
  40d640:	f88c 2000 	strbeq.w	r2, [ip]
  40d644:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40d648:	d1b3      	bne.n	40d5b2 <strcpy+0x12>
  40d64a:	4770      	bx	lr
  40d64c:	f811 2b01 	ldrb.w	r2, [r1], #1
  40d650:	f80c 2b01 	strb.w	r2, [ip], #1
  40d654:	2a00      	cmp	r2, #0
  40d656:	d1f9      	bne.n	40d64c <strcpy+0xac>
  40d658:	4770      	bx	lr
  40d65a:	bf00      	nop

0040d65c <strlen>:
  40d65c:	f020 0103 	bic.w	r1, r0, #3
  40d660:	f010 0003 	ands.w	r0, r0, #3
  40d664:	f1c0 0000 	rsb	r0, r0, #0
  40d668:	f851 3b04 	ldr.w	r3, [r1], #4
  40d66c:	f100 0c04 	add.w	ip, r0, #4
  40d670:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40d674:	f06f 0200 	mvn.w	r2, #0
  40d678:	bf1c      	itt	ne
  40d67a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40d67e:	4313      	orrne	r3, r2
  40d680:	f04f 0c01 	mov.w	ip, #1
  40d684:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40d688:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40d68c:	eba3 020c 	sub.w	r2, r3, ip
  40d690:	ea22 0203 	bic.w	r2, r2, r3
  40d694:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40d698:	bf04      	itt	eq
  40d69a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40d69e:	3004      	addeq	r0, #4
  40d6a0:	d0f4      	beq.n	40d68c <strlen+0x30>
  40d6a2:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d6a6:	bf1f      	itttt	ne
  40d6a8:	3001      	addne	r0, #1
  40d6aa:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40d6ae:	3001      	addne	r0, #1
  40d6b0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40d6b4:	bf18      	it	ne
  40d6b6:	3001      	addne	r0, #1
  40d6b8:	4770      	bx	lr
  40d6ba:	bf00      	nop

0040d6bc <strncmp>:
  40d6bc:	b430      	push	{r4, r5}
  40d6be:	2a00      	cmp	r2, #0
  40d6c0:	d04a      	beq.n	40d758 <strncmp+0x9c>
  40d6c2:	ea40 0301 	orr.w	r3, r0, r1
  40d6c6:	f013 0303 	ands.w	r3, r3, #3
  40d6ca:	d12d      	bne.n	40d728 <strncmp+0x6c>
  40d6cc:	2a03      	cmp	r2, #3
  40d6ce:	d92b      	bls.n	40d728 <strncmp+0x6c>
  40d6d0:	6804      	ldr	r4, [r0, #0]
  40d6d2:	680d      	ldr	r5, [r1, #0]
  40d6d4:	42ac      	cmp	r4, r5
  40d6d6:	d127      	bne.n	40d728 <strncmp+0x6c>
  40d6d8:	3a04      	subs	r2, #4
  40d6da:	d03d      	beq.n	40d758 <strncmp+0x9c>
  40d6dc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40d6e0:	ea25 0404 	bic.w	r4, r5, r4
  40d6e4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40d6e8:	d13c      	bne.n	40d764 <strncmp+0xa8>
  40d6ea:	460c      	mov	r4, r1
  40d6ec:	4603      	mov	r3, r0
  40d6ee:	e00e      	b.n	40d70e <strncmp+0x52>
  40d6f0:	685b      	ldr	r3, [r3, #4]
  40d6f2:	6864      	ldr	r4, [r4, #4]
  40d6f4:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40d6f8:	42a3      	cmp	r3, r4
  40d6fa:	ea25 0503 	bic.w	r5, r5, r3
  40d6fe:	d113      	bne.n	40d728 <strncmp+0x6c>
  40d700:	3a04      	subs	r2, #4
  40d702:	d029      	beq.n	40d758 <strncmp+0x9c>
  40d704:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40d708:	d129      	bne.n	40d75e <strncmp+0xa2>
  40d70a:	4603      	mov	r3, r0
  40d70c:	460c      	mov	r4, r1
  40d70e:	2a03      	cmp	r2, #3
  40d710:	f100 0004 	add.w	r0, r0, #4
  40d714:	f101 0104 	add.w	r1, r1, #4
  40d718:	d8ea      	bhi.n	40d6f0 <strncmp+0x34>
  40d71a:	1e55      	subs	r5, r2, #1
  40d71c:	b92a      	cbnz	r2, 40d72a <strncmp+0x6e>
  40d71e:	7918      	ldrb	r0, [r3, #4]
  40d720:	7922      	ldrb	r2, [r4, #4]
  40d722:	1a80      	subs	r0, r0, r2
  40d724:	bc30      	pop	{r4, r5}
  40d726:	4770      	bx	lr
  40d728:	1e55      	subs	r5, r2, #1
  40d72a:	7803      	ldrb	r3, [r0, #0]
  40d72c:	780a      	ldrb	r2, [r1, #0]
  40d72e:	4293      	cmp	r3, r2
  40d730:	d11a      	bne.n	40d768 <strncmp+0xac>
  40d732:	b1dd      	cbz	r5, 40d76c <strncmp+0xb0>
  40d734:	b1b3      	cbz	r3, 40d764 <strncmp+0xa8>
  40d736:	1c6c      	adds	r4, r5, #1
  40d738:	440c      	add	r4, r1
  40d73a:	1c8b      	adds	r3, r1, #2
  40d73c:	4601      	mov	r1, r0
  40d73e:	e004      	b.n	40d74a <strncmp+0x8e>
  40d740:	42a3      	cmp	r3, r4
  40d742:	d00c      	beq.n	40d75e <strncmp+0xa2>
  40d744:	3301      	adds	r3, #1
  40d746:	2800      	cmp	r0, #0
  40d748:	d0ec      	beq.n	40d724 <strncmp+0x68>
  40d74a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40d74e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40d752:	4290      	cmp	r0, r2
  40d754:	d0f4      	beq.n	40d740 <strncmp+0x84>
  40d756:	e7e4      	b.n	40d722 <strncmp+0x66>
  40d758:	4610      	mov	r0, r2
  40d75a:	bc30      	pop	{r4, r5}
  40d75c:	4770      	bx	lr
  40d75e:	2000      	movs	r0, #0
  40d760:	bc30      	pop	{r4, r5}
  40d762:	4770      	bx	lr
  40d764:	4618      	mov	r0, r3
  40d766:	e7dd      	b.n	40d724 <strncmp+0x68>
  40d768:	4618      	mov	r0, r3
  40d76a:	e7da      	b.n	40d722 <strncmp+0x66>
  40d76c:	4628      	mov	r0, r5
  40d76e:	e7d9      	b.n	40d724 <strncmp+0x68>

0040d770 <strncpy>:
  40d770:	ea40 0301 	orr.w	r3, r0, r1
  40d774:	079b      	lsls	r3, r3, #30
  40d776:	b470      	push	{r4, r5, r6}
  40d778:	d12a      	bne.n	40d7d0 <strncpy+0x60>
  40d77a:	2a03      	cmp	r2, #3
  40d77c:	d928      	bls.n	40d7d0 <strncpy+0x60>
  40d77e:	460c      	mov	r4, r1
  40d780:	4603      	mov	r3, r0
  40d782:	4621      	mov	r1, r4
  40d784:	f854 5b04 	ldr.w	r5, [r4], #4
  40d788:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40d78c:	ea26 0605 	bic.w	r6, r6, r5
  40d790:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40d794:	d105      	bne.n	40d7a2 <strncpy+0x32>
  40d796:	3a04      	subs	r2, #4
  40d798:	2a03      	cmp	r2, #3
  40d79a:	f843 5b04 	str.w	r5, [r3], #4
  40d79e:	4621      	mov	r1, r4
  40d7a0:	d8ef      	bhi.n	40d782 <strncpy+0x12>
  40d7a2:	b19a      	cbz	r2, 40d7cc <strncpy+0x5c>
  40d7a4:	780c      	ldrb	r4, [r1, #0]
  40d7a6:	701c      	strb	r4, [r3, #0]
  40d7a8:	3a01      	subs	r2, #1
  40d7aa:	3301      	adds	r3, #1
  40d7ac:	b13c      	cbz	r4, 40d7be <strncpy+0x4e>
  40d7ae:	b16a      	cbz	r2, 40d7cc <strncpy+0x5c>
  40d7b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40d7b4:	f803 4b01 	strb.w	r4, [r3], #1
  40d7b8:	3a01      	subs	r2, #1
  40d7ba:	2c00      	cmp	r4, #0
  40d7bc:	d1f7      	bne.n	40d7ae <strncpy+0x3e>
  40d7be:	b12a      	cbz	r2, 40d7cc <strncpy+0x5c>
  40d7c0:	441a      	add	r2, r3
  40d7c2:	2100      	movs	r1, #0
  40d7c4:	f803 1b01 	strb.w	r1, [r3], #1
  40d7c8:	4293      	cmp	r3, r2
  40d7ca:	d1fb      	bne.n	40d7c4 <strncpy+0x54>
  40d7cc:	bc70      	pop	{r4, r5, r6}
  40d7ce:	4770      	bx	lr
  40d7d0:	4603      	mov	r3, r0
  40d7d2:	e7e6      	b.n	40d7a2 <strncpy+0x32>

0040d7d4 <_svfprintf_r>:
  40d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d7d8:	b0c9      	sub	sp, #292	; 0x124
  40d7da:	4691      	mov	r9, r2
  40d7dc:	9310      	str	r3, [sp, #64]	; 0x40
  40d7de:	910c      	str	r1, [sp, #48]	; 0x30
  40d7e0:	900d      	str	r0, [sp, #52]	; 0x34
  40d7e2:	f004 fd41 	bl	412268 <_localeconv_r>
  40d7e6:	6800      	ldr	r0, [r0, #0]
  40d7e8:	9015      	str	r0, [sp, #84]	; 0x54
  40d7ea:	f7ff ff37 	bl	40d65c <strlen>
  40d7ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d7f0:	9018      	str	r0, [sp, #96]	; 0x60
  40d7f2:	89a3      	ldrh	r3, [r4, #12]
  40d7f4:	061a      	lsls	r2, r3, #24
  40d7f6:	d503      	bpl.n	40d800 <_svfprintf_r+0x2c>
  40d7f8:	6923      	ldr	r3, [r4, #16]
  40d7fa:	2b00      	cmp	r3, #0
  40d7fc:	f001 808d 	beq.w	40e91a <_svfprintf_r+0x1146>
  40d800:	ac38      	add	r4, sp, #224	; 0xe0
  40d802:	46a4      	mov	ip, r4
  40d804:	9408      	str	r4, [sp, #32]
  40d806:	942b      	str	r4, [sp, #172]	; 0xac
  40d808:	2500      	movs	r5, #0
  40d80a:	2400      	movs	r4, #0
  40d80c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40d810:	2300      	movs	r3, #0
  40d812:	9311      	str	r3, [sp, #68]	; 0x44
  40d814:	932d      	str	r3, [sp, #180]	; 0xb4
  40d816:	932c      	str	r3, [sp, #176]	; 0xb0
  40d818:	931a      	str	r3, [sp, #104]	; 0x68
  40d81a:	9319      	str	r3, [sp, #100]	; 0x64
  40d81c:	930e      	str	r3, [sp, #56]	; 0x38
  40d81e:	4666      	mov	r6, ip
  40d820:	f899 3000 	ldrb.w	r3, [r9]
  40d824:	2b00      	cmp	r3, #0
  40d826:	f000 80f8 	beq.w	40da1a <_svfprintf_r+0x246>
  40d82a:	2b25      	cmp	r3, #37	; 0x25
  40d82c:	f000 80f5 	beq.w	40da1a <_svfprintf_r+0x246>
  40d830:	f109 0201 	add.w	r2, r9, #1
  40d834:	e001      	b.n	40d83a <_svfprintf_r+0x66>
  40d836:	2b25      	cmp	r3, #37	; 0x25
  40d838:	d004      	beq.n	40d844 <_svfprintf_r+0x70>
  40d83a:	4614      	mov	r4, r2
  40d83c:	3201      	adds	r2, #1
  40d83e:	7823      	ldrb	r3, [r4, #0]
  40d840:	2b00      	cmp	r3, #0
  40d842:	d1f8      	bne.n	40d836 <_svfprintf_r+0x62>
  40d844:	ebc9 0504 	rsb	r5, r9, r4
  40d848:	b17d      	cbz	r5, 40d86a <_svfprintf_r+0x96>
  40d84a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d84c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d84e:	f8c6 9000 	str.w	r9, [r6]
  40d852:	3301      	adds	r3, #1
  40d854:	442a      	add	r2, r5
  40d856:	2b07      	cmp	r3, #7
  40d858:	6075      	str	r5, [r6, #4]
  40d85a:	922d      	str	r2, [sp, #180]	; 0xb4
  40d85c:	932c      	str	r3, [sp, #176]	; 0xb0
  40d85e:	f300 80c2 	bgt.w	40d9e6 <_svfprintf_r+0x212>
  40d862:	3608      	adds	r6, #8
  40d864:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d866:	4428      	add	r0, r5
  40d868:	900e      	str	r0, [sp, #56]	; 0x38
  40d86a:	7823      	ldrb	r3, [r4, #0]
  40d86c:	2b00      	cmp	r3, #0
  40d86e:	f000 80c2 	beq.w	40d9f6 <_svfprintf_r+0x222>
  40d872:	2300      	movs	r3, #0
  40d874:	f894 8001 	ldrb.w	r8, [r4, #1]
  40d878:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d87c:	461a      	mov	r2, r3
  40d87e:	930f      	str	r3, [sp, #60]	; 0x3c
  40d880:	9309      	str	r3, [sp, #36]	; 0x24
  40d882:	f104 0901 	add.w	r9, r4, #1
  40d886:	f04f 34ff 	mov.w	r4, #4294967295
  40d88a:	940a      	str	r4, [sp, #40]	; 0x28
  40d88c:	f109 0901 	add.w	r9, r9, #1
  40d890:	f1a8 0320 	sub.w	r3, r8, #32
  40d894:	2b58      	cmp	r3, #88	; 0x58
  40d896:	f200 83c7 	bhi.w	40e028 <_svfprintf_r+0x854>
  40d89a:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d89e:	026a      	.short	0x026a
  40d8a0:	03c503c5 	.word	0x03c503c5
  40d8a4:	03c50271 	.word	0x03c50271
  40d8a8:	03c503c5 	.word	0x03c503c5
  40d8ac:	03c503c5 	.word	0x03c503c5
  40d8b0:	031403c5 	.word	0x031403c5
  40d8b4:	03c50364 	.word	0x03c50364
  40d8b8:	00c0009d 	.word	0x00c0009d
  40d8bc:	027803c5 	.word	0x027803c5
  40d8c0:	027f027f 	.word	0x027f027f
  40d8c4:	027f027f 	.word	0x027f027f
  40d8c8:	027f027f 	.word	0x027f027f
  40d8cc:	027f027f 	.word	0x027f027f
  40d8d0:	03c5027f 	.word	0x03c5027f
  40d8d4:	03c503c5 	.word	0x03c503c5
  40d8d8:	03c503c5 	.word	0x03c503c5
  40d8dc:	03c503c5 	.word	0x03c503c5
  40d8e0:	03c503c5 	.word	0x03c503c5
  40d8e4:	029003c5 	.word	0x029003c5
  40d8e8:	03c5036f 	.word	0x03c5036f
  40d8ec:	03c5036f 	.word	0x03c5036f
  40d8f0:	03c503c5 	.word	0x03c503c5
  40d8f4:	036803c5 	.word	0x036803c5
  40d8f8:	03c503c5 	.word	0x03c503c5
  40d8fc:	03c50078 	.word	0x03c50078
  40d900:	03c503c5 	.word	0x03c503c5
  40d904:	03c503c5 	.word	0x03c503c5
  40d908:	03c50059 	.word	0x03c50059
  40d90c:	02af03c5 	.word	0x02af03c5
  40d910:	03c503c5 	.word	0x03c503c5
  40d914:	03c503c5 	.word	0x03c503c5
  40d918:	03c503c5 	.word	0x03c503c5
  40d91c:	03c503c5 	.word	0x03c503c5
  40d920:	03c503c5 	.word	0x03c503c5
  40d924:	03480337 	.word	0x03480337
  40d928:	036f036f 	.word	0x036f036f
  40d92c:	02ff036f 	.word	0x02ff036f
  40d930:	03c50348 	.word	0x03c50348
  40d934:	030803c5 	.word	0x030803c5
  40d938:	02c503c5 	.word	0x02c503c5
  40d93c:	0321007c 	.word	0x0321007c
  40d940:	03c503a5 	.word	0x03c503a5
  40d944:	03c502d9 	.word	0x03c502d9
  40d948:	03c5005f 	.word	0x03c5005f
  40d94c:	00de03c5 	.word	0x00de03c5
  40d950:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d954:	f04c 0c10 	orr.w	ip, ip, #16
  40d958:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d95c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d95e:	06a2      	lsls	r2, r4, #26
  40d960:	f100 8356 	bmi.w	40e010 <_svfprintf_r+0x83c>
  40d964:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d966:	06e3      	lsls	r3, r4, #27
  40d968:	f100 85e0 	bmi.w	40e52c <_svfprintf_r+0xd58>
  40d96c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d970:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40d974:	f000 85da 	beq.w	40e52c <_svfprintf_r+0xd58>
  40d978:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d97c:	f8bc 4000 	ldrh.w	r4, [ip]
  40d980:	f10c 0c04 	add.w	ip, ip, #4
  40d984:	2500      	movs	r5, #0
  40d986:	2301      	movs	r3, #1
  40d988:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d98c:	e08c      	b.n	40daa8 <_svfprintf_r+0x2d4>
  40d98e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d990:	f045 0510 	orr.w	r5, r5, #16
  40d994:	9509      	str	r5, [sp, #36]	; 0x24
  40d996:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d99a:	f01c 0320 	ands.w	r3, ip, #32
  40d99e:	f040 832c 	bne.w	40dffa <_svfprintf_r+0x826>
  40d9a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d9a6:	f01c 0210 	ands.w	r2, ip, #16
  40d9aa:	f040 85b8 	bne.w	40e51e <_svfprintf_r+0xd4a>
  40d9ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d9b2:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40d9b6:	f000 85b2 	beq.w	40e51e <_svfprintf_r+0xd4a>
  40d9ba:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d9be:	f8bc 4000 	ldrh.w	r4, [ip]
  40d9c2:	f10c 0c04 	add.w	ip, ip, #4
  40d9c6:	4613      	mov	r3, r2
  40d9c8:	2500      	movs	r5, #0
  40d9ca:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d9ce:	e06b      	b.n	40daa8 <_svfprintf_r+0x2d4>
  40d9d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40d9d2:	9310      	str	r3, [sp, #64]	; 0x40
  40d9d4:	4264      	negs	r4, r4
  40d9d6:	940f      	str	r4, [sp, #60]	; 0x3c
  40d9d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d9da:	f045 0504 	orr.w	r5, r5, #4
  40d9de:	9509      	str	r5, [sp, #36]	; 0x24
  40d9e0:	f899 8000 	ldrb.w	r8, [r9]
  40d9e4:	e752      	b.n	40d88c <_svfprintf_r+0xb8>
  40d9e6:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d9e8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d9ea:	aa2b      	add	r2, sp, #172	; 0xac
  40d9ec:	f006 fecc 	bl	414788 <__ssprint_r>
  40d9f0:	b940      	cbnz	r0, 40da04 <_svfprintf_r+0x230>
  40d9f2:	ae38      	add	r6, sp, #224	; 0xe0
  40d9f4:	e736      	b.n	40d864 <_svfprintf_r+0x90>
  40d9f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40d9f8:	b123      	cbz	r3, 40da04 <_svfprintf_r+0x230>
  40d9fa:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d9fc:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d9fe:	aa2b      	add	r2, sp, #172	; 0xac
  40da00:	f006 fec2 	bl	414788 <__ssprint_r>
  40da04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40da06:	980e      	ldr	r0, [sp, #56]	; 0x38
  40da08:	89a3      	ldrh	r3, [r4, #12]
  40da0a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40da0e:	bf18      	it	ne
  40da10:	f04f 30ff 	movne.w	r0, #4294967295
  40da14:	b049      	add	sp, #292	; 0x124
  40da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40da1a:	464c      	mov	r4, r9
  40da1c:	e725      	b.n	40d86a <_svfprintf_r+0x96>
  40da1e:	f899 8000 	ldrb.w	r8, [r9]
  40da22:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40da26:	f109 0001 	add.w	r0, r9, #1
  40da2a:	f001 8118 	beq.w	40ec5e <_svfprintf_r+0x148a>
  40da2e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40da32:	2b09      	cmp	r3, #9
  40da34:	bf98      	it	ls
  40da36:	2100      	movls	r1, #0
  40da38:	f201 8077 	bhi.w	40eb2a <_svfprintf_r+0x1356>
  40da3c:	f810 8b01 	ldrb.w	r8, [r0], #1
  40da40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40da44:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40da48:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40da4c:	2b09      	cmp	r3, #9
  40da4e:	d9f5      	bls.n	40da3c <_svfprintf_r+0x268>
  40da50:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40da54:	910a      	str	r1, [sp, #40]	; 0x28
  40da56:	4681      	mov	r9, r0
  40da58:	e71a      	b.n	40d890 <_svfprintf_r+0xbc>
  40da5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40da5c:	4ca1      	ldr	r4, [pc, #644]	; (40dce4 <_svfprintf_r+0x510>)
  40da5e:	941a      	str	r4, [sp, #104]	; 0x68
  40da60:	06af      	lsls	r7, r5, #26
  40da62:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40da66:	f140 81d1 	bpl.w	40de0c <_svfprintf_r+0x638>
  40da6a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40da6e:	f10c 0307 	add.w	r3, ip, #7
  40da72:	f023 0307 	bic.w	r3, r3, #7
  40da76:	f103 0408 	add.w	r4, r3, #8
  40da7a:	9410      	str	r4, [sp, #64]	; 0x40
  40da7c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40da80:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40da84:	f01c 0f01 	tst.w	ip, #1
  40da88:	f000 8464 	beq.w	40e354 <_svfprintf_r+0xb80>
  40da8c:	ea54 0005 	orrs.w	r0, r4, r5
  40da90:	f000 8460 	beq.w	40e354 <_svfprintf_r+0xb80>
  40da94:	2330      	movs	r3, #48	; 0x30
  40da96:	f04c 0c02 	orr.w	ip, ip, #2
  40da9a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40da9e:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40daa2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40daa6:	2302      	movs	r3, #2
  40daa8:	f04f 0a00 	mov.w	sl, #0
  40daac:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40dab0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40dab2:	2900      	cmp	r1, #0
  40dab4:	db05      	blt.n	40dac2 <_svfprintf_r+0x2ee>
  40dab6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40daba:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40dabe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40dac2:	ea54 0005 	orrs.w	r0, r4, r5
  40dac6:	f040 82c7 	bne.w	40e058 <_svfprintf_r+0x884>
  40daca:	990a      	ldr	r1, [sp, #40]	; 0x28
  40dacc:	2900      	cmp	r1, #0
  40dace:	f040 82c3 	bne.w	40e058 <_svfprintf_r+0x884>
  40dad2:	2b00      	cmp	r3, #0
  40dad4:	f040 843a 	bne.w	40e34c <_svfprintf_r+0xb78>
  40dad8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dadc:	f01c 0f01 	tst.w	ip, #1
  40dae0:	f000 8434 	beq.w	40e34c <_svfprintf_r+0xb78>
  40dae4:	af48      	add	r7, sp, #288	; 0x120
  40dae6:	2330      	movs	r3, #48	; 0x30
  40dae8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40daec:	9d08      	ldr	r5, [sp, #32]
  40daee:	1bec      	subs	r4, r5, r7
  40daf0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40daf4:	2500      	movs	r5, #0
  40daf6:	4564      	cmp	r4, ip
  40daf8:	bfa8      	it	ge
  40dafa:	46a4      	movge	ip, r4
  40dafc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40db00:	9514      	str	r5, [sp, #80]	; 0x50
  40db02:	f1ba 0f00 	cmp.w	sl, #0
  40db06:	d002      	beq.n	40db0e <_svfprintf_r+0x33a>
  40db08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40db0a:	3501      	adds	r5, #1
  40db0c:	950b      	str	r5, [sp, #44]	; 0x2c
  40db0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40db10:	f013 0302 	ands.w	r3, r3, #2
  40db14:	9312      	str	r3, [sp, #72]	; 0x48
  40db16:	d002      	beq.n	40db1e <_svfprintf_r+0x34a>
  40db18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40db1a:	3502      	adds	r5, #2
  40db1c:	950b      	str	r5, [sp, #44]	; 0x2c
  40db1e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40db22:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40db26:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40db2a:	f040 8292 	bne.w	40e052 <_svfprintf_r+0x87e>
  40db2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40db30:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40db34:	ebcc 0b05 	rsb	fp, ip, r5
  40db38:	f1bb 0f00 	cmp.w	fp, #0
  40db3c:	f340 8289 	ble.w	40e052 <_svfprintf_r+0x87e>
  40db40:	f1bb 0f10 	cmp.w	fp, #16
  40db44:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40db46:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40db48:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40dcec <_svfprintf_r+0x518>
  40db4c:	dd2c      	ble.n	40dba8 <_svfprintf_r+0x3d4>
  40db4e:	971b      	str	r7, [sp, #108]	; 0x6c
  40db50:	4630      	mov	r0, r6
  40db52:	4657      	mov	r7, sl
  40db54:	2510      	movs	r5, #16
  40db56:	46ca      	mov	sl, r9
  40db58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40db5a:	46a1      	mov	r9, r4
  40db5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40db5e:	e006      	b.n	40db6e <_svfprintf_r+0x39a>
  40db60:	f1ab 0b10 	sub.w	fp, fp, #16
  40db64:	f1bb 0f10 	cmp.w	fp, #16
  40db68:	f100 0008 	add.w	r0, r0, #8
  40db6c:	dd17      	ble.n	40db9e <_svfprintf_r+0x3ca>
  40db6e:	3201      	adds	r2, #1
  40db70:	3110      	adds	r1, #16
  40db72:	2a07      	cmp	r2, #7
  40db74:	912d      	str	r1, [sp, #180]	; 0xb4
  40db76:	922c      	str	r2, [sp, #176]	; 0xb0
  40db78:	6007      	str	r7, [r0, #0]
  40db7a:	6045      	str	r5, [r0, #4]
  40db7c:	ddf0      	ble.n	40db60 <_svfprintf_r+0x38c>
  40db7e:	4620      	mov	r0, r4
  40db80:	4631      	mov	r1, r6
  40db82:	aa2b      	add	r2, sp, #172	; 0xac
  40db84:	f006 fe00 	bl	414788 <__ssprint_r>
  40db88:	2800      	cmp	r0, #0
  40db8a:	f47f af3b 	bne.w	40da04 <_svfprintf_r+0x230>
  40db8e:	f1ab 0b10 	sub.w	fp, fp, #16
  40db92:	f1bb 0f10 	cmp.w	fp, #16
  40db96:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40db98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40db9a:	a838      	add	r0, sp, #224	; 0xe0
  40db9c:	dce7      	bgt.n	40db6e <_svfprintf_r+0x39a>
  40db9e:	464c      	mov	r4, r9
  40dba0:	46d1      	mov	r9, sl
  40dba2:	46ba      	mov	sl, r7
  40dba4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40dba6:	4606      	mov	r6, r0
  40dba8:	3201      	adds	r2, #1
  40dbaa:	eb0b 0c01 	add.w	ip, fp, r1
  40dbae:	2a07      	cmp	r2, #7
  40dbb0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dbb4:	922c      	str	r2, [sp, #176]	; 0xb0
  40dbb6:	e886 0c00 	stmia.w	r6, {sl, fp}
  40dbba:	f300 841c 	bgt.w	40e3f6 <_svfprintf_r+0xc22>
  40dbbe:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40dbc2:	3608      	adds	r6, #8
  40dbc4:	f1ba 0f00 	cmp.w	sl, #0
  40dbc8:	d00f      	beq.n	40dbea <_svfprintf_r+0x416>
  40dbca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dbcc:	3301      	adds	r3, #1
  40dbce:	f10c 0c01 	add.w	ip, ip, #1
  40dbd2:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40dbd6:	2201      	movs	r2, #1
  40dbd8:	2b07      	cmp	r3, #7
  40dbda:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dbde:	932c      	str	r3, [sp, #176]	; 0xb0
  40dbe0:	e886 0006 	stmia.w	r6, {r1, r2}
  40dbe4:	f300 839a 	bgt.w	40e31c <_svfprintf_r+0xb48>
  40dbe8:	3608      	adds	r6, #8
  40dbea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dbec:	b173      	cbz	r3, 40dc0c <_svfprintf_r+0x438>
  40dbee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dbf0:	3301      	adds	r3, #1
  40dbf2:	f10c 0c02 	add.w	ip, ip, #2
  40dbf6:	a924      	add	r1, sp, #144	; 0x90
  40dbf8:	2202      	movs	r2, #2
  40dbfa:	2b07      	cmp	r3, #7
  40dbfc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dc00:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc02:	e886 0006 	stmia.w	r6, {r1, r2}
  40dc06:	f300 8395 	bgt.w	40e334 <_svfprintf_r+0xb60>
  40dc0a:	3608      	adds	r6, #8
  40dc0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40dc0e:	2d80      	cmp	r5, #128	; 0x80
  40dc10:	f000 82cc 	beq.w	40e1ac <_svfprintf_r+0x9d8>
  40dc14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40dc16:	ebc4 0a05 	rsb	sl, r4, r5
  40dc1a:	f1ba 0f00 	cmp.w	sl, #0
  40dc1e:	dd3b      	ble.n	40dc98 <_svfprintf_r+0x4c4>
  40dc20:	f1ba 0f10 	cmp.w	sl, #16
  40dc24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dc26:	4d30      	ldr	r5, [pc, #192]	; (40dce8 <_svfprintf_r+0x514>)
  40dc28:	dd2b      	ble.n	40dc82 <_svfprintf_r+0x4ae>
  40dc2a:	940a      	str	r4, [sp, #40]	; 0x28
  40dc2c:	4632      	mov	r2, r6
  40dc2e:	f04f 0b10 	mov.w	fp, #16
  40dc32:	462e      	mov	r6, r5
  40dc34:	4661      	mov	r1, ip
  40dc36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40dc38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40dc3a:	e006      	b.n	40dc4a <_svfprintf_r+0x476>
  40dc3c:	f1aa 0a10 	sub.w	sl, sl, #16
  40dc40:	f1ba 0f10 	cmp.w	sl, #16
  40dc44:	f102 0208 	add.w	r2, r2, #8
  40dc48:	dd17      	ble.n	40dc7a <_svfprintf_r+0x4a6>
  40dc4a:	3301      	adds	r3, #1
  40dc4c:	3110      	adds	r1, #16
  40dc4e:	2b07      	cmp	r3, #7
  40dc50:	912d      	str	r1, [sp, #180]	; 0xb4
  40dc52:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc54:	e882 0840 	stmia.w	r2, {r6, fp}
  40dc58:	ddf0      	ble.n	40dc3c <_svfprintf_r+0x468>
  40dc5a:	4620      	mov	r0, r4
  40dc5c:	4629      	mov	r1, r5
  40dc5e:	aa2b      	add	r2, sp, #172	; 0xac
  40dc60:	f006 fd92 	bl	414788 <__ssprint_r>
  40dc64:	2800      	cmp	r0, #0
  40dc66:	f47f aecd 	bne.w	40da04 <_svfprintf_r+0x230>
  40dc6a:	f1aa 0a10 	sub.w	sl, sl, #16
  40dc6e:	f1ba 0f10 	cmp.w	sl, #16
  40dc72:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40dc74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dc76:	aa38      	add	r2, sp, #224	; 0xe0
  40dc78:	dce7      	bgt.n	40dc4a <_svfprintf_r+0x476>
  40dc7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40dc7c:	4635      	mov	r5, r6
  40dc7e:	468c      	mov	ip, r1
  40dc80:	4616      	mov	r6, r2
  40dc82:	3301      	adds	r3, #1
  40dc84:	44d4      	add	ip, sl
  40dc86:	2b07      	cmp	r3, #7
  40dc88:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dc8c:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc8e:	e886 0420 	stmia.w	r6, {r5, sl}
  40dc92:	f300 8337 	bgt.w	40e304 <_svfprintf_r+0xb30>
  40dc96:	3608      	adds	r6, #8
  40dc98:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dc9a:	05ed      	lsls	r5, r5, #23
  40dc9c:	f100 8226 	bmi.w	40e0ec <_svfprintf_r+0x918>
  40dca0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dca2:	6037      	str	r7, [r6, #0]
  40dca4:	3301      	adds	r3, #1
  40dca6:	44a4      	add	ip, r4
  40dca8:	2b07      	cmp	r3, #7
  40dcaa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dcae:	6074      	str	r4, [r6, #4]
  40dcb0:	932c      	str	r3, [sp, #176]	; 0xb0
  40dcb2:	f300 8311 	bgt.w	40e2d8 <_svfprintf_r+0xb04>
  40dcb6:	3608      	adds	r6, #8
  40dcb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40dcba:	0763      	lsls	r3, r4, #29
  40dcbc:	d549      	bpl.n	40dd52 <_svfprintf_r+0x57e>
  40dcbe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40dcc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40dcc2:	1a2c      	subs	r4, r5, r0
  40dcc4:	2c00      	cmp	r4, #0
  40dcc6:	dd44      	ble.n	40dd52 <_svfprintf_r+0x57e>
  40dcc8:	2c10      	cmp	r4, #16
  40dcca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dccc:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40dcec <_svfprintf_r+0x518>
  40dcd0:	dd2b      	ble.n	40dd2a <_svfprintf_r+0x556>
  40dcd2:	4657      	mov	r7, sl
  40dcd4:	2510      	movs	r5, #16
  40dcd6:	4662      	mov	r2, ip
  40dcd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40dcdc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40dce0:	e00b      	b.n	40dcfa <_svfprintf_r+0x526>
  40dce2:	bf00      	nop
  40dce4:	00416de8 	.word	0x00416de8
  40dce8:	00416db4 	.word	0x00416db4
  40dcec:	00416e08 	.word	0x00416e08
  40dcf0:	3c10      	subs	r4, #16
  40dcf2:	2c10      	cmp	r4, #16
  40dcf4:	f106 0608 	add.w	r6, r6, #8
  40dcf8:	dd15      	ble.n	40dd26 <_svfprintf_r+0x552>
  40dcfa:	3301      	adds	r3, #1
  40dcfc:	3210      	adds	r2, #16
  40dcfe:	2b07      	cmp	r3, #7
  40dd00:	922d      	str	r2, [sp, #180]	; 0xb4
  40dd02:	932c      	str	r3, [sp, #176]	; 0xb0
  40dd04:	6037      	str	r7, [r6, #0]
  40dd06:	6075      	str	r5, [r6, #4]
  40dd08:	ddf2      	ble.n	40dcf0 <_svfprintf_r+0x51c>
  40dd0a:	4650      	mov	r0, sl
  40dd0c:	4641      	mov	r1, r8
  40dd0e:	aa2b      	add	r2, sp, #172	; 0xac
  40dd10:	f006 fd3a 	bl	414788 <__ssprint_r>
  40dd14:	2800      	cmp	r0, #0
  40dd16:	f47f ae75 	bne.w	40da04 <_svfprintf_r+0x230>
  40dd1a:	3c10      	subs	r4, #16
  40dd1c:	2c10      	cmp	r4, #16
  40dd1e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40dd20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dd22:	ae38      	add	r6, sp, #224	; 0xe0
  40dd24:	dce9      	bgt.n	40dcfa <_svfprintf_r+0x526>
  40dd26:	4694      	mov	ip, r2
  40dd28:	46ba      	mov	sl, r7
  40dd2a:	3301      	adds	r3, #1
  40dd2c:	44a4      	add	ip, r4
  40dd2e:	2b07      	cmp	r3, #7
  40dd30:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dd34:	932c      	str	r3, [sp, #176]	; 0xb0
  40dd36:	f8c6 a000 	str.w	sl, [r6]
  40dd3a:	6074      	str	r4, [r6, #4]
  40dd3c:	dd09      	ble.n	40dd52 <_svfprintf_r+0x57e>
  40dd3e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dd40:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dd42:	aa2b      	add	r2, sp, #172	; 0xac
  40dd44:	f006 fd20 	bl	414788 <__ssprint_r>
  40dd48:	2800      	cmp	r0, #0
  40dd4a:	f47f ae5b 	bne.w	40da04 <_svfprintf_r+0x230>
  40dd4e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dd52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40dd54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40dd56:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40dd58:	42a8      	cmp	r0, r5
  40dd5a:	bfac      	ite	ge
  40dd5c:	1824      	addge	r4, r4, r0
  40dd5e:	1964      	addlt	r4, r4, r5
  40dd60:	940e      	str	r4, [sp, #56]	; 0x38
  40dd62:	f1bc 0f00 	cmp.w	ip, #0
  40dd66:	f040 82c3 	bne.w	40e2f0 <_svfprintf_r+0xb1c>
  40dd6a:	2300      	movs	r3, #0
  40dd6c:	932c      	str	r3, [sp, #176]	; 0xb0
  40dd6e:	ae38      	add	r6, sp, #224	; 0xe0
  40dd70:	e556      	b.n	40d820 <_svfprintf_r+0x4c>
  40dd72:	f899 8000 	ldrb.w	r8, [r9]
  40dd76:	2a00      	cmp	r2, #0
  40dd78:	f47f ad88 	bne.w	40d88c <_svfprintf_r+0xb8>
  40dd7c:	2220      	movs	r2, #32
  40dd7e:	e585      	b.n	40d88c <_svfprintf_r+0xb8>
  40dd80:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dd82:	f045 0501 	orr.w	r5, r5, #1
  40dd86:	9509      	str	r5, [sp, #36]	; 0x24
  40dd88:	f899 8000 	ldrb.w	r8, [r9]
  40dd8c:	e57e      	b.n	40d88c <_svfprintf_r+0xb8>
  40dd8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dd90:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40dd94:	9509      	str	r5, [sp, #36]	; 0x24
  40dd96:	f899 8000 	ldrb.w	r8, [r9]
  40dd9a:	e577      	b.n	40d88c <_svfprintf_r+0xb8>
  40dd9c:	2400      	movs	r4, #0
  40dd9e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40dda2:	940f      	str	r4, [sp, #60]	; 0x3c
  40dda4:	4621      	mov	r1, r4
  40dda6:	f819 8b01 	ldrb.w	r8, [r9], #1
  40ddaa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40ddae:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40ddb2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ddb6:	2b09      	cmp	r3, #9
  40ddb8:	d9f5      	bls.n	40dda6 <_svfprintf_r+0x5d2>
  40ddba:	910f      	str	r1, [sp, #60]	; 0x3c
  40ddbc:	e568      	b.n	40d890 <_svfprintf_r+0xbc>
  40ddbe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ddc2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ddc6:	f04c 0c10 	orr.w	ip, ip, #16
  40ddca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ddce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ddd0:	06a3      	lsls	r3, r4, #26
  40ddd2:	f140 80b2 	bpl.w	40df3a <_svfprintf_r+0x766>
  40ddd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ddd8:	1de9      	adds	r1, r5, #7
  40ddda:	f021 0107 	bic.w	r1, r1, #7
  40ddde:	e9d1 2300 	ldrd	r2, r3, [r1]
  40dde2:	3108      	adds	r1, #8
  40dde4:	9110      	str	r1, [sp, #64]	; 0x40
  40dde6:	4614      	mov	r4, r2
  40dde8:	461d      	mov	r5, r3
  40ddea:	2a00      	cmp	r2, #0
  40ddec:	f173 0000 	sbcs.w	r0, r3, #0
  40ddf0:	f2c0 838b 	blt.w	40e50a <_svfprintf_r+0xd36>
  40ddf4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ddf8:	2301      	movs	r3, #1
  40ddfa:	e659      	b.n	40dab0 <_svfprintf_r+0x2dc>
  40ddfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ddfe:	4cb7      	ldr	r4, [pc, #732]	; (40e0dc <_svfprintf_r+0x908>)
  40de00:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40de04:	06af      	lsls	r7, r5, #26
  40de06:	941a      	str	r4, [sp, #104]	; 0x68
  40de08:	f53f ae2f 	bmi.w	40da6a <_svfprintf_r+0x296>
  40de0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40de0e:	06ed      	lsls	r5, r5, #27
  40de10:	f140 845d 	bpl.w	40e6ce <_svfprintf_r+0xefa>
  40de14:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40de18:	f8dc 4000 	ldr.w	r4, [ip]
  40de1c:	f10c 0c04 	add.w	ip, ip, #4
  40de20:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40de24:	2500      	movs	r5, #0
  40de26:	e62b      	b.n	40da80 <_svfprintf_r+0x2ac>
  40de28:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40de2c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40de30:	f01c 0f20 	tst.w	ip, #32
  40de34:	f000 843d 	beq.w	40e6b2 <_svfprintf_r+0xede>
  40de38:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40de3a:	6821      	ldr	r1, [r4, #0]
  40de3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40de3e:	17e5      	asrs	r5, r4, #31
  40de40:	462b      	mov	r3, r5
  40de42:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40de44:	4622      	mov	r2, r4
  40de46:	3504      	adds	r5, #4
  40de48:	9510      	str	r5, [sp, #64]	; 0x40
  40de4a:	e9c1 2300 	strd	r2, r3, [r1]
  40de4e:	e4e7      	b.n	40d820 <_svfprintf_r+0x4c>
  40de50:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40de52:	6827      	ldr	r7, [r4, #0]
  40de54:	f04f 0a00 	mov.w	sl, #0
  40de58:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40de5c:	1d25      	adds	r5, r4, #4
  40de5e:	2f00      	cmp	r7, #0
  40de60:	f000 85f5 	beq.w	40ea4e <_svfprintf_r+0x127a>
  40de64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40de66:	2c00      	cmp	r4, #0
  40de68:	4638      	mov	r0, r7
  40de6a:	f2c0 85a7 	blt.w	40e9bc <_svfprintf_r+0x11e8>
  40de6e:	4651      	mov	r1, sl
  40de70:	4622      	mov	r2, r4
  40de72:	f004 fac5 	bl	412400 <memchr>
  40de76:	2800      	cmp	r0, #0
  40de78:	f000 861f 	beq.w	40eaba <_svfprintf_r+0x12e6>
  40de7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40de7e:	9510      	str	r5, [sp, #64]	; 0x40
  40de80:	1bc0      	subs	r0, r0, r7
  40de82:	42a0      	cmp	r0, r4
  40de84:	bfb8      	it	lt
  40de86:	4604      	movlt	r4, r0
  40de88:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40de8c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40de90:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  40de94:	950b      	str	r5, [sp, #44]	; 0x2c
  40de96:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40de9a:	e632      	b.n	40db02 <_svfprintf_r+0x32e>
  40de9c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dea0:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  40dea4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40dea8:	f899 8000 	ldrb.w	r8, [r9]
  40deac:	e4ee      	b.n	40d88c <_svfprintf_r+0xb8>
  40deae:	f899 8000 	ldrb.w	r8, [r9]
  40deb2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40deb6:	464b      	mov	r3, r9
  40deb8:	f000 848b 	beq.w	40e7d2 <_svfprintf_r+0xffe>
  40debc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40debe:	f045 0510 	orr.w	r5, r5, #16
  40dec2:	9509      	str	r5, [sp, #36]	; 0x24
  40dec4:	e4e2      	b.n	40d88c <_svfprintf_r+0xb8>
  40dec6:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40dec8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40deca:	6824      	ldr	r4, [r4, #0]
  40decc:	940f      	str	r4, [sp, #60]	; 0x3c
  40dece:	2c00      	cmp	r4, #0
  40ded0:	f105 0304 	add.w	r3, r5, #4
  40ded4:	f6ff ad7c 	blt.w	40d9d0 <_svfprintf_r+0x1fc>
  40ded8:	9310      	str	r3, [sp, #64]	; 0x40
  40deda:	f899 8000 	ldrb.w	r8, [r9]
  40dede:	e4d5      	b.n	40d88c <_svfprintf_r+0xb8>
  40dee0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dee2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dee6:	487e      	ldr	r0, [pc, #504]	; (40e0e0 <_svfprintf_r+0x90c>)
  40dee8:	6814      	ldr	r4, [r2, #0]
  40deea:	901a      	str	r0, [sp, #104]	; 0x68
  40deec:	2330      	movs	r3, #48	; 0x30
  40deee:	1d15      	adds	r5, r2, #4
  40def0:	f04f 0878 	mov.w	r8, #120	; 0x78
  40def4:	f04c 0c02 	orr.w	ip, ip, #2
  40def8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40defc:	9510      	str	r5, [sp, #64]	; 0x40
  40defe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40df02:	2500      	movs	r5, #0
  40df04:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40df08:	2302      	movs	r3, #2
  40df0a:	e5cd      	b.n	40daa8 <_svfprintf_r+0x2d4>
  40df0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40df0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40df10:	6812      	ldr	r2, [r2, #0]
  40df12:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  40df16:	2300      	movs	r3, #0
  40df18:	2401      	movs	r4, #1
  40df1a:	3504      	adds	r5, #4
  40df1c:	469a      	mov	sl, r3
  40df1e:	940b      	str	r4, [sp, #44]	; 0x2c
  40df20:	9510      	str	r5, [sp, #64]	; 0x40
  40df22:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40df26:	930a      	str	r3, [sp, #40]	; 0x28
  40df28:	9314      	str	r3, [sp, #80]	; 0x50
  40df2a:	af2e      	add	r7, sp, #184	; 0xb8
  40df2c:	e5ef      	b.n	40db0e <_svfprintf_r+0x33a>
  40df2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40df30:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40df34:	06a3      	lsls	r3, r4, #26
  40df36:	f53f af4e 	bmi.w	40ddd6 <_svfprintf_r+0x602>
  40df3a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40df3e:	f01c 0f10 	tst.w	ip, #16
  40df42:	f040 82d2 	bne.w	40e4ea <_svfprintf_r+0xd16>
  40df46:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40df48:	0667      	lsls	r7, r4, #25
  40df4a:	f140 82ce 	bpl.w	40e4ea <_svfprintf_r+0xd16>
  40df4e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40df52:	f9bc 4000 	ldrsh.w	r4, [ip]
  40df56:	f10c 0c04 	add.w	ip, ip, #4
  40df5a:	17e5      	asrs	r5, r4, #31
  40df5c:	4622      	mov	r2, r4
  40df5e:	462b      	mov	r3, r5
  40df60:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40df64:	e741      	b.n	40ddea <_svfprintf_r+0x616>
  40df66:	f899 8000 	ldrb.w	r8, [r9]
  40df6a:	222b      	movs	r2, #43	; 0x2b
  40df6c:	e48e      	b.n	40d88c <_svfprintf_r+0xb8>
  40df6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40df70:	f045 0508 	orr.w	r5, r5, #8
  40df74:	9509      	str	r5, [sp, #36]	; 0x24
  40df76:	f899 8000 	ldrb.w	r8, [r9]
  40df7a:	e487      	b.n	40d88c <_svfprintf_r+0xb8>
  40df7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40df7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40df80:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40df84:	1deb      	adds	r3, r5, #7
  40df86:	0725      	lsls	r5, r4, #28
  40df88:	f023 0307 	bic.w	r3, r3, #7
  40df8c:	f140 838a 	bpl.w	40e6a4 <_svfprintf_r+0xed0>
  40df90:	e9d3 4500 	ldrd	r4, r5, [r3]
  40df94:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40df98:	f103 0c08 	add.w	ip, r3, #8
  40df9c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40dfa0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40dfa4:	f005 f91a 	bl	4131dc <__fpclassifyd>
  40dfa8:	2801      	cmp	r0, #1
  40dfaa:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40dfae:	f040 835f 	bne.w	40e670 <_svfprintf_r+0xe9c>
  40dfb2:	2200      	movs	r2, #0
  40dfb4:	2300      	movs	r3, #0
  40dfb6:	f007 fe99 	bl	415cec <__aeabi_dcmplt>
  40dfba:	2800      	cmp	r0, #0
  40dfbc:	f040 856d 	bne.w	40ea9a <_svfprintf_r+0x12c6>
  40dfc0:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40dfc4:	2503      	movs	r5, #3
  40dfc6:	950b      	str	r5, [sp, #44]	; 0x2c
  40dfc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dfca:	4f46      	ldr	r7, [pc, #280]	; (40e0e4 <_svfprintf_r+0x910>)
  40dfcc:	4b46      	ldr	r3, [pc, #280]	; (40e0e8 <_svfprintf_r+0x914>)
  40dfce:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  40dfd2:	2400      	movs	r4, #0
  40dfd4:	9509      	str	r5, [sp, #36]	; 0x24
  40dfd6:	2500      	movs	r5, #0
  40dfd8:	940a      	str	r4, [sp, #40]	; 0x28
  40dfda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40dfde:	bfd8      	it	le
  40dfe0:	461f      	movle	r7, r3
  40dfe2:	2403      	movs	r4, #3
  40dfe4:	9514      	str	r5, [sp, #80]	; 0x50
  40dfe6:	e58c      	b.n	40db02 <_svfprintf_r+0x32e>
  40dfe8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dfec:	f04c 0c20 	orr.w	ip, ip, #32
  40dff0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40dff4:	f899 8000 	ldrb.w	r8, [r9]
  40dff8:	e448      	b.n	40d88c <_svfprintf_r+0xb8>
  40dffa:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40dffc:	1de3      	adds	r3, r4, #7
  40dffe:	f023 0307 	bic.w	r3, r3, #7
  40e002:	f103 0508 	add.w	r5, r3, #8
  40e006:	9510      	str	r5, [sp, #64]	; 0x40
  40e008:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e00c:	2300      	movs	r3, #0
  40e00e:	e54b      	b.n	40daa8 <_svfprintf_r+0x2d4>
  40e010:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e012:	1deb      	adds	r3, r5, #7
  40e014:	f023 0307 	bic.w	r3, r3, #7
  40e018:	f103 0c08 	add.w	ip, r3, #8
  40e01c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e020:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40e024:	2301      	movs	r3, #1
  40e026:	e53f      	b.n	40daa8 <_svfprintf_r+0x2d4>
  40e028:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40e02c:	f1b8 0f00 	cmp.w	r8, #0
  40e030:	f43f ace1 	beq.w	40d9f6 <_svfprintf_r+0x222>
  40e034:	2300      	movs	r3, #0
  40e036:	f04f 0c01 	mov.w	ip, #1
  40e03a:	469a      	mov	sl, r3
  40e03c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e040:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  40e044:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40e048:	930a      	str	r3, [sp, #40]	; 0x28
  40e04a:	9314      	str	r3, [sp, #80]	; 0x50
  40e04c:	4664      	mov	r4, ip
  40e04e:	af2e      	add	r7, sp, #184	; 0xb8
  40e050:	e55d      	b.n	40db0e <_svfprintf_r+0x33a>
  40e052:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e056:	e5b5      	b.n	40dbc4 <_svfprintf_r+0x3f0>
  40e058:	2b01      	cmp	r3, #1
  40e05a:	f000 80ec 	beq.w	40e236 <_svfprintf_r+0xa62>
  40e05e:	2b02      	cmp	r3, #2
  40e060:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  40e064:	d118      	bne.n	40e098 <_svfprintf_r+0x8c4>
  40e066:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  40e06a:	4619      	mov	r1, r3
  40e06c:	f004 000f 	and.w	r0, r4, #15
  40e070:	0922      	lsrs	r2, r4, #4
  40e072:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40e076:	460f      	mov	r7, r1
  40e078:	092b      	lsrs	r3, r5, #4
  40e07a:	f81c 1000 	ldrb.w	r1, [ip, r0]
  40e07e:	7039      	strb	r1, [r7, #0]
  40e080:	ea52 0003 	orrs.w	r0, r2, r3
  40e084:	4614      	mov	r4, r2
  40e086:	461d      	mov	r5, r3
  40e088:	f107 31ff 	add.w	r1, r7, #4294967295
  40e08c:	d1ee      	bne.n	40e06c <_svfprintf_r+0x898>
  40e08e:	9d08      	ldr	r5, [sp, #32]
  40e090:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40e094:	1bec      	subs	r4, r5, r7
  40e096:	e52b      	b.n	40daf0 <_svfprintf_r+0x31c>
  40e098:	08e0      	lsrs	r0, r4, #3
  40e09a:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40e09e:	f004 0207 	and.w	r2, r4, #7
  40e0a2:	08e9      	lsrs	r1, r5, #3
  40e0a4:	3230      	adds	r2, #48	; 0x30
  40e0a6:	ea50 0c01 	orrs.w	ip, r0, r1
  40e0aa:	461f      	mov	r7, r3
  40e0ac:	701a      	strb	r2, [r3, #0]
  40e0ae:	4604      	mov	r4, r0
  40e0b0:	460d      	mov	r5, r1
  40e0b2:	f103 33ff 	add.w	r3, r3, #4294967295
  40e0b6:	d1ef      	bne.n	40e098 <_svfprintf_r+0x8c4>
  40e0b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e0ba:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40e0be:	07e0      	lsls	r0, r4, #31
  40e0c0:	4639      	mov	r1, r7
  40e0c2:	f140 80c1 	bpl.w	40e248 <_svfprintf_r+0xa74>
  40e0c6:	2a30      	cmp	r2, #48	; 0x30
  40e0c8:	f000 80be 	beq.w	40e248 <_svfprintf_r+0xa74>
  40e0cc:	9d08      	ldr	r5, [sp, #32]
  40e0ce:	461f      	mov	r7, r3
  40e0d0:	2330      	movs	r3, #48	; 0x30
  40e0d2:	1bec      	subs	r4, r5, r7
  40e0d4:	f801 3c01 	strb.w	r3, [r1, #-1]
  40e0d8:	e50a      	b.n	40daf0 <_svfprintf_r+0x31c>
  40e0da:	bf00      	nop
  40e0dc:	00416dd4 	.word	0x00416dd4
  40e0e0:	00416de8 	.word	0x00416de8
  40e0e4:	00416dc8 	.word	0x00416dc8
  40e0e8:	00416dc4 	.word	0x00416dc4
  40e0ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40e0f0:	f340 80ad 	ble.w	40e24e <_svfprintf_r+0xa7a>
  40e0f4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40e0f8:	2200      	movs	r2, #0
  40e0fa:	2300      	movs	r3, #0
  40e0fc:	f8cd c01c 	str.w	ip, [sp, #28]
  40e100:	f007 fdea 	bl	415cd8 <__aeabi_dcmpeq>
  40e104:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40e108:	2800      	cmp	r0, #0
  40e10a:	f000 8126 	beq.w	40e35a <_svfprintf_r+0xb86>
  40e10e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e110:	4aaa      	ldr	r2, [pc, #680]	; (40e3bc <_svfprintf_r+0xbe8>)
  40e112:	6032      	str	r2, [r6, #0]
  40e114:	3301      	adds	r3, #1
  40e116:	f10c 0c01 	add.w	ip, ip, #1
  40e11a:	2201      	movs	r2, #1
  40e11c:	2b07      	cmp	r3, #7
  40e11e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e122:	932c      	str	r3, [sp, #176]	; 0xb0
  40e124:	6072      	str	r2, [r6, #4]
  40e126:	f300 82f7 	bgt.w	40e718 <_svfprintf_r+0xf44>
  40e12a:	3608      	adds	r6, #8
  40e12c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e12e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e130:	42a3      	cmp	r3, r4
  40e132:	db03      	blt.n	40e13c <_svfprintf_r+0x968>
  40e134:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e136:	07ec      	lsls	r4, r5, #31
  40e138:	f57f adbe 	bpl.w	40dcb8 <_svfprintf_r+0x4e4>
  40e13c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e13e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40e140:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40e142:	6034      	str	r4, [r6, #0]
  40e144:	3301      	adds	r3, #1
  40e146:	44ac      	add	ip, r5
  40e148:	2b07      	cmp	r3, #7
  40e14a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e14e:	6075      	str	r5, [r6, #4]
  40e150:	932c      	str	r3, [sp, #176]	; 0xb0
  40e152:	f300 8348 	bgt.w	40e7e6 <_svfprintf_r+0x1012>
  40e156:	3608      	adds	r6, #8
  40e158:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e15a:	1e6c      	subs	r4, r5, #1
  40e15c:	2c00      	cmp	r4, #0
  40e15e:	f77f adab 	ble.w	40dcb8 <_svfprintf_r+0x4e4>
  40e162:	2c10      	cmp	r4, #16
  40e164:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e166:	4d96      	ldr	r5, [pc, #600]	; (40e3c0 <_svfprintf_r+0xbec>)
  40e168:	f340 8197 	ble.w	40e49a <_svfprintf_r+0xcc6>
  40e16c:	2710      	movs	r7, #16
  40e16e:	4662      	mov	r2, ip
  40e170:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e174:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40e178:	e004      	b.n	40e184 <_svfprintf_r+0x9b0>
  40e17a:	3608      	adds	r6, #8
  40e17c:	3c10      	subs	r4, #16
  40e17e:	2c10      	cmp	r4, #16
  40e180:	f340 818a 	ble.w	40e498 <_svfprintf_r+0xcc4>
  40e184:	3301      	adds	r3, #1
  40e186:	3210      	adds	r2, #16
  40e188:	2b07      	cmp	r3, #7
  40e18a:	922d      	str	r2, [sp, #180]	; 0xb4
  40e18c:	932c      	str	r3, [sp, #176]	; 0xb0
  40e18e:	e886 00a0 	stmia.w	r6, {r5, r7}
  40e192:	ddf2      	ble.n	40e17a <_svfprintf_r+0x9a6>
  40e194:	4640      	mov	r0, r8
  40e196:	4651      	mov	r1, sl
  40e198:	aa2b      	add	r2, sp, #172	; 0xac
  40e19a:	f006 faf5 	bl	414788 <__ssprint_r>
  40e19e:	2800      	cmp	r0, #0
  40e1a0:	f47f ac30 	bne.w	40da04 <_svfprintf_r+0x230>
  40e1a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40e1a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e1a8:	ae38      	add	r6, sp, #224	; 0xe0
  40e1aa:	e7e7      	b.n	40e17c <_svfprintf_r+0x9a8>
  40e1ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e1ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e1b0:	ebc0 0a05 	rsb	sl, r0, r5
  40e1b4:	f1ba 0f00 	cmp.w	sl, #0
  40e1b8:	f77f ad2c 	ble.w	40dc14 <_svfprintf_r+0x440>
  40e1bc:	f1ba 0f10 	cmp.w	sl, #16
  40e1c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e1c2:	4d7f      	ldr	r5, [pc, #508]	; (40e3c0 <_svfprintf_r+0xbec>)
  40e1c4:	dd2b      	ble.n	40e21e <_svfprintf_r+0xa4a>
  40e1c6:	9412      	str	r4, [sp, #72]	; 0x48
  40e1c8:	4632      	mov	r2, r6
  40e1ca:	f04f 0b10 	mov.w	fp, #16
  40e1ce:	462e      	mov	r6, r5
  40e1d0:	4661      	mov	r1, ip
  40e1d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40e1d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40e1d6:	e006      	b.n	40e1e6 <_svfprintf_r+0xa12>
  40e1d8:	f1aa 0a10 	sub.w	sl, sl, #16
  40e1dc:	f1ba 0f10 	cmp.w	sl, #16
  40e1e0:	f102 0208 	add.w	r2, r2, #8
  40e1e4:	dd17      	ble.n	40e216 <_svfprintf_r+0xa42>
  40e1e6:	3301      	adds	r3, #1
  40e1e8:	3110      	adds	r1, #16
  40e1ea:	2b07      	cmp	r3, #7
  40e1ec:	912d      	str	r1, [sp, #180]	; 0xb4
  40e1ee:	932c      	str	r3, [sp, #176]	; 0xb0
  40e1f0:	e882 0840 	stmia.w	r2, {r6, fp}
  40e1f4:	ddf0      	ble.n	40e1d8 <_svfprintf_r+0xa04>
  40e1f6:	4620      	mov	r0, r4
  40e1f8:	4629      	mov	r1, r5
  40e1fa:	aa2b      	add	r2, sp, #172	; 0xac
  40e1fc:	f006 fac4 	bl	414788 <__ssprint_r>
  40e200:	2800      	cmp	r0, #0
  40e202:	f47f abff 	bne.w	40da04 <_svfprintf_r+0x230>
  40e206:	f1aa 0a10 	sub.w	sl, sl, #16
  40e20a:	f1ba 0f10 	cmp.w	sl, #16
  40e20e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40e210:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e212:	aa38      	add	r2, sp, #224	; 0xe0
  40e214:	dce7      	bgt.n	40e1e6 <_svfprintf_r+0xa12>
  40e216:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40e218:	4635      	mov	r5, r6
  40e21a:	468c      	mov	ip, r1
  40e21c:	4616      	mov	r6, r2
  40e21e:	3301      	adds	r3, #1
  40e220:	44d4      	add	ip, sl
  40e222:	2b07      	cmp	r3, #7
  40e224:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e228:	932c      	str	r3, [sp, #176]	; 0xb0
  40e22a:	e886 0420 	stmia.w	r6, {r5, sl}
  40e22e:	f300 8212 	bgt.w	40e656 <_svfprintf_r+0xe82>
  40e232:	3608      	adds	r6, #8
  40e234:	e4ee      	b.n	40dc14 <_svfprintf_r+0x440>
  40e236:	2d00      	cmp	r5, #0
  40e238:	bf08      	it	eq
  40e23a:	2c0a      	cmpeq	r4, #10
  40e23c:	f080 8138 	bcs.w	40e4b0 <_svfprintf_r+0xcdc>
  40e240:	af48      	add	r7, sp, #288	; 0x120
  40e242:	3430      	adds	r4, #48	; 0x30
  40e244:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40e248:	9d08      	ldr	r5, [sp, #32]
  40e24a:	1bec      	subs	r4, r5, r7
  40e24c:	e450      	b.n	40daf0 <_svfprintf_r+0x31c>
  40e24e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e250:	2c01      	cmp	r4, #1
  40e252:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40e254:	f340 81d5 	ble.w	40e602 <_svfprintf_r+0xe2e>
  40e258:	3401      	adds	r4, #1
  40e25a:	f10c 0301 	add.w	r3, ip, #1
  40e25e:	2201      	movs	r2, #1
  40e260:	2c07      	cmp	r4, #7
  40e262:	6037      	str	r7, [r6, #0]
  40e264:	932d      	str	r3, [sp, #180]	; 0xb4
  40e266:	942c      	str	r4, [sp, #176]	; 0xb0
  40e268:	6072      	str	r2, [r6, #4]
  40e26a:	f300 81db 	bgt.w	40e624 <_svfprintf_r+0xe50>
  40e26e:	3608      	adds	r6, #8
  40e270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40e274:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40e276:	6035      	str	r5, [r6, #0]
  40e278:	3401      	adds	r4, #1
  40e27a:	4498      	add	r8, r3
  40e27c:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40e27e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40e282:	2c07      	cmp	r4, #7
  40e284:	942c      	str	r4, [sp, #176]	; 0xb0
  40e286:	6075      	str	r5, [r6, #4]
  40e288:	f300 81d8 	bgt.w	40e63c <_svfprintf_r+0xe68>
  40e28c:	3608      	adds	r6, #8
  40e28e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40e292:	2200      	movs	r2, #0
  40e294:	2300      	movs	r3, #0
  40e296:	f007 fd1f 	bl	415cd8 <__aeabi_dcmpeq>
  40e29a:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e29c:	2800      	cmp	r0, #0
  40e29e:	f040 80b9 	bne.w	40e414 <_svfprintf_r+0xc40>
  40e2a2:	1e6b      	subs	r3, r5, #1
  40e2a4:	3401      	adds	r4, #1
  40e2a6:	3701      	adds	r7, #1
  40e2a8:	4498      	add	r8, r3
  40e2aa:	2c07      	cmp	r4, #7
  40e2ac:	942c      	str	r4, [sp, #176]	; 0xb0
  40e2ae:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40e2b2:	6037      	str	r7, [r6, #0]
  40e2b4:	6073      	str	r3, [r6, #4]
  40e2b6:	f300 80e2 	bgt.w	40e47e <_svfprintf_r+0xcaa>
  40e2ba:	3608      	adds	r6, #8
  40e2bc:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40e2c0:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40e2c2:	3401      	adds	r4, #1
  40e2c4:	44c4      	add	ip, r8
  40e2c6:	ab27      	add	r3, sp, #156	; 0x9c
  40e2c8:	2c07      	cmp	r4, #7
  40e2ca:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e2ce:	942c      	str	r4, [sp, #176]	; 0xb0
  40e2d0:	e886 0028 	stmia.w	r6, {r3, r5}
  40e2d4:	f77f acef 	ble.w	40dcb6 <_svfprintf_r+0x4e2>
  40e2d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e2da:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e2dc:	aa2b      	add	r2, sp, #172	; 0xac
  40e2de:	f006 fa53 	bl	414788 <__ssprint_r>
  40e2e2:	2800      	cmp	r0, #0
  40e2e4:	f47f ab8e 	bne.w	40da04 <_svfprintf_r+0x230>
  40e2e8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e2ec:	ae38      	add	r6, sp, #224	; 0xe0
  40e2ee:	e4e3      	b.n	40dcb8 <_svfprintf_r+0x4e4>
  40e2f0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e2f2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e2f4:	aa2b      	add	r2, sp, #172	; 0xac
  40e2f6:	f006 fa47 	bl	414788 <__ssprint_r>
  40e2fa:	2800      	cmp	r0, #0
  40e2fc:	f43f ad35 	beq.w	40dd6a <_svfprintf_r+0x596>
  40e300:	f7ff bb80 	b.w	40da04 <_svfprintf_r+0x230>
  40e304:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e306:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e308:	aa2b      	add	r2, sp, #172	; 0xac
  40e30a:	f006 fa3d 	bl	414788 <__ssprint_r>
  40e30e:	2800      	cmp	r0, #0
  40e310:	f47f ab78 	bne.w	40da04 <_svfprintf_r+0x230>
  40e314:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e318:	ae38      	add	r6, sp, #224	; 0xe0
  40e31a:	e4bd      	b.n	40dc98 <_svfprintf_r+0x4c4>
  40e31c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e31e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e320:	aa2b      	add	r2, sp, #172	; 0xac
  40e322:	f006 fa31 	bl	414788 <__ssprint_r>
  40e326:	2800      	cmp	r0, #0
  40e328:	f47f ab6c 	bne.w	40da04 <_svfprintf_r+0x230>
  40e32c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e330:	ae38      	add	r6, sp, #224	; 0xe0
  40e332:	e45a      	b.n	40dbea <_svfprintf_r+0x416>
  40e334:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e336:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e338:	aa2b      	add	r2, sp, #172	; 0xac
  40e33a:	f006 fa25 	bl	414788 <__ssprint_r>
  40e33e:	2800      	cmp	r0, #0
  40e340:	f47f ab60 	bne.w	40da04 <_svfprintf_r+0x230>
  40e344:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e348:	ae38      	add	r6, sp, #224	; 0xe0
  40e34a:	e45f      	b.n	40dc0c <_svfprintf_r+0x438>
  40e34c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e34e:	af38      	add	r7, sp, #224	; 0xe0
  40e350:	f7ff bbce 	b.w	40daf0 <_svfprintf_r+0x31c>
  40e354:	2302      	movs	r3, #2
  40e356:	f7ff bba7 	b.w	40daa8 <_svfprintf_r+0x2d4>
  40e35a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e35c:	2b00      	cmp	r3, #0
  40e35e:	f340 81e7 	ble.w	40e730 <_svfprintf_r+0xf5c>
  40e362:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e364:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e366:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40e36a:	42ac      	cmp	r4, r5
  40e36c:	bfa8      	it	ge
  40e36e:	462c      	movge	r4, r5
  40e370:	2c00      	cmp	r4, #0
  40e372:	44ba      	add	sl, r7
  40e374:	dd0b      	ble.n	40e38e <_svfprintf_r+0xbba>
  40e376:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e378:	6037      	str	r7, [r6, #0]
  40e37a:	3301      	adds	r3, #1
  40e37c:	44a4      	add	ip, r4
  40e37e:	2b07      	cmp	r3, #7
  40e380:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e384:	6074      	str	r4, [r6, #4]
  40e386:	932c      	str	r3, [sp, #176]	; 0xb0
  40e388:	f300 8328 	bgt.w	40e9dc <_svfprintf_r+0x1208>
  40e38c:	3608      	adds	r6, #8
  40e38e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e390:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40e394:	1b2c      	subs	r4, r5, r4
  40e396:	2c00      	cmp	r4, #0
  40e398:	f340 80db 	ble.w	40e552 <_svfprintf_r+0xd7e>
  40e39c:	2c10      	cmp	r4, #16
  40e39e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e3a0:	4d07      	ldr	r5, [pc, #28]	; (40e3c0 <_svfprintf_r+0xbec>)
  40e3a2:	f340 81ad 	ble.w	40e700 <_svfprintf_r+0xf2c>
  40e3a6:	970a      	str	r7, [sp, #40]	; 0x28
  40e3a8:	f04f 0810 	mov.w	r8, #16
  40e3ac:	462f      	mov	r7, r5
  40e3ae:	4662      	mov	r2, ip
  40e3b0:	4625      	mov	r5, r4
  40e3b2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40e3b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40e3b8:	e009      	b.n	40e3ce <_svfprintf_r+0xbfa>
  40e3ba:	bf00      	nop
  40e3bc:	00416e04 	.word	0x00416e04
  40e3c0:	00416db4 	.word	0x00416db4
  40e3c4:	3608      	adds	r6, #8
  40e3c6:	3d10      	subs	r5, #16
  40e3c8:	2d10      	cmp	r5, #16
  40e3ca:	f340 8195 	ble.w	40e6f8 <_svfprintf_r+0xf24>
  40e3ce:	3301      	adds	r3, #1
  40e3d0:	3210      	adds	r2, #16
  40e3d2:	2b07      	cmp	r3, #7
  40e3d4:	922d      	str	r2, [sp, #180]	; 0xb4
  40e3d6:	932c      	str	r3, [sp, #176]	; 0xb0
  40e3d8:	e886 0180 	stmia.w	r6, {r7, r8}
  40e3dc:	ddf2      	ble.n	40e3c4 <_svfprintf_r+0xbf0>
  40e3de:	4658      	mov	r0, fp
  40e3e0:	4621      	mov	r1, r4
  40e3e2:	aa2b      	add	r2, sp, #172	; 0xac
  40e3e4:	f006 f9d0 	bl	414788 <__ssprint_r>
  40e3e8:	2800      	cmp	r0, #0
  40e3ea:	f47f ab0b 	bne.w	40da04 <_svfprintf_r+0x230>
  40e3ee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40e3f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e3f2:	ae38      	add	r6, sp, #224	; 0xe0
  40e3f4:	e7e7      	b.n	40e3c6 <_svfprintf_r+0xbf2>
  40e3f6:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e3f8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e3fa:	aa2b      	add	r2, sp, #172	; 0xac
  40e3fc:	f006 f9c4 	bl	414788 <__ssprint_r>
  40e400:	2800      	cmp	r0, #0
  40e402:	f47f aaff 	bne.w	40da04 <_svfprintf_r+0x230>
  40e406:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e40a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e40e:	ae38      	add	r6, sp, #224	; 0xe0
  40e410:	f7ff bbd8 	b.w	40dbc4 <_svfprintf_r+0x3f0>
  40e414:	1e6f      	subs	r7, r5, #1
  40e416:	2f00      	cmp	r7, #0
  40e418:	f77f af50 	ble.w	40e2bc <_svfprintf_r+0xae8>
  40e41c:	2f10      	cmp	r7, #16
  40e41e:	4db3      	ldr	r5, [pc, #716]	; (40e6ec <_svfprintf_r+0xf18>)
  40e420:	dd23      	ble.n	40e46a <_svfprintf_r+0xc96>
  40e422:	4643      	mov	r3, r8
  40e424:	f04f 0a10 	mov.w	sl, #16
  40e428:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e42c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40e430:	e004      	b.n	40e43c <_svfprintf_r+0xc68>
  40e432:	3f10      	subs	r7, #16
  40e434:	2f10      	cmp	r7, #16
  40e436:	f106 0608 	add.w	r6, r6, #8
  40e43a:	dd15      	ble.n	40e468 <_svfprintf_r+0xc94>
  40e43c:	3401      	adds	r4, #1
  40e43e:	3310      	adds	r3, #16
  40e440:	2c07      	cmp	r4, #7
  40e442:	932d      	str	r3, [sp, #180]	; 0xb4
  40e444:	942c      	str	r4, [sp, #176]	; 0xb0
  40e446:	e886 0420 	stmia.w	r6, {r5, sl}
  40e44a:	ddf2      	ble.n	40e432 <_svfprintf_r+0xc5e>
  40e44c:	4640      	mov	r0, r8
  40e44e:	4659      	mov	r1, fp
  40e450:	aa2b      	add	r2, sp, #172	; 0xac
  40e452:	f006 f999 	bl	414788 <__ssprint_r>
  40e456:	2800      	cmp	r0, #0
  40e458:	f47f aad4 	bne.w	40da04 <_svfprintf_r+0x230>
  40e45c:	3f10      	subs	r7, #16
  40e45e:	2f10      	cmp	r7, #16
  40e460:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40e462:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40e464:	ae38      	add	r6, sp, #224	; 0xe0
  40e466:	dce9      	bgt.n	40e43c <_svfprintf_r+0xc68>
  40e468:	4698      	mov	r8, r3
  40e46a:	3401      	adds	r4, #1
  40e46c:	44b8      	add	r8, r7
  40e46e:	2c07      	cmp	r4, #7
  40e470:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40e474:	942c      	str	r4, [sp, #176]	; 0xb0
  40e476:	e886 00a0 	stmia.w	r6, {r5, r7}
  40e47a:	f77f af1e 	ble.w	40e2ba <_svfprintf_r+0xae6>
  40e47e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e480:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e482:	aa2b      	add	r2, sp, #172	; 0xac
  40e484:	f006 f980 	bl	414788 <__ssprint_r>
  40e488:	2800      	cmp	r0, #0
  40e48a:	f47f aabb 	bne.w	40da04 <_svfprintf_r+0x230>
  40e48e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40e492:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40e494:	ae38      	add	r6, sp, #224	; 0xe0
  40e496:	e711      	b.n	40e2bc <_svfprintf_r+0xae8>
  40e498:	4694      	mov	ip, r2
  40e49a:	3301      	adds	r3, #1
  40e49c:	44a4      	add	ip, r4
  40e49e:	2b07      	cmp	r3, #7
  40e4a0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e4a4:	932c      	str	r3, [sp, #176]	; 0xb0
  40e4a6:	6035      	str	r5, [r6, #0]
  40e4a8:	6074      	str	r4, [r6, #4]
  40e4aa:	f77f ac04 	ble.w	40dcb6 <_svfprintf_r+0x4e2>
  40e4ae:	e713      	b.n	40e2d8 <_svfprintf_r+0xb04>
  40e4b0:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40e4b4:	4620      	mov	r0, r4
  40e4b6:	4629      	mov	r1, r5
  40e4b8:	220a      	movs	r2, #10
  40e4ba:	2300      	movs	r3, #0
  40e4bc:	f7fd ff32 	bl	40c324 <__aeabi_uldivmod>
  40e4c0:	3230      	adds	r2, #48	; 0x30
  40e4c2:	f88b 2000 	strb.w	r2, [fp]
  40e4c6:	4620      	mov	r0, r4
  40e4c8:	4629      	mov	r1, r5
  40e4ca:	220a      	movs	r2, #10
  40e4cc:	2300      	movs	r3, #0
  40e4ce:	f7fd ff29 	bl	40c324 <__aeabi_uldivmod>
  40e4d2:	4604      	mov	r4, r0
  40e4d4:	460d      	mov	r5, r1
  40e4d6:	ea54 0c05 	orrs.w	ip, r4, r5
  40e4da:	465f      	mov	r7, fp
  40e4dc:	f10b 3bff 	add.w	fp, fp, #4294967295
  40e4e0:	d1e8      	bne.n	40e4b4 <_svfprintf_r+0xce0>
  40e4e2:	9d08      	ldr	r5, [sp, #32]
  40e4e4:	1bec      	subs	r4, r5, r7
  40e4e6:	f7ff bb03 	b.w	40daf0 <_svfprintf_r+0x31c>
  40e4ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e4ec:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40e4f0:	682c      	ldr	r4, [r5, #0]
  40e4f2:	17e5      	asrs	r5, r4, #31
  40e4f4:	4622      	mov	r2, r4
  40e4f6:	462b      	mov	r3, r5
  40e4f8:	f10c 0c04 	add.w	ip, ip, #4
  40e4fc:	2a00      	cmp	r2, #0
  40e4fe:	f173 0000 	sbcs.w	r0, r3, #0
  40e502:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40e506:	f6bf ac75 	bge.w	40ddf4 <_svfprintf_r+0x620>
  40e50a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40e50e:	4264      	negs	r4, r4
  40e510:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40e514:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40e518:	2301      	movs	r3, #1
  40e51a:	f7ff bac9 	b.w	40dab0 <_svfprintf_r+0x2dc>
  40e51e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e520:	682c      	ldr	r4, [r5, #0]
  40e522:	3504      	adds	r5, #4
  40e524:	9510      	str	r5, [sp, #64]	; 0x40
  40e526:	2500      	movs	r5, #0
  40e528:	f7ff babe 	b.w	40daa8 <_svfprintf_r+0x2d4>
  40e52c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e52e:	682c      	ldr	r4, [r5, #0]
  40e530:	3504      	adds	r5, #4
  40e532:	9510      	str	r5, [sp, #64]	; 0x40
  40e534:	2301      	movs	r3, #1
  40e536:	2500      	movs	r5, #0
  40e538:	f7ff bab6 	b.w	40daa8 <_svfprintf_r+0x2d4>
  40e53c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e53e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e540:	aa2b      	add	r2, sp, #172	; 0xac
  40e542:	f006 f921 	bl	414788 <__ssprint_r>
  40e546:	2800      	cmp	r0, #0
  40e548:	f47f aa5c 	bne.w	40da04 <_svfprintf_r+0x230>
  40e54c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e550:	ae38      	add	r6, sp, #224	; 0xe0
  40e552:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e554:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e556:	442f      	add	r7, r5
  40e558:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e55a:	42ac      	cmp	r4, r5
  40e55c:	db42      	blt.n	40e5e4 <_svfprintf_r+0xe10>
  40e55e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e560:	07e9      	lsls	r1, r5, #31
  40e562:	d43f      	bmi.n	40e5e4 <_svfprintf_r+0xe10>
  40e564:	9811      	ldr	r0, [sp, #68]	; 0x44
  40e566:	ebc7 050a 	rsb	r5, r7, sl
  40e56a:	1b04      	subs	r4, r0, r4
  40e56c:	42ac      	cmp	r4, r5
  40e56e:	bfb8      	it	lt
  40e570:	4625      	movlt	r5, r4
  40e572:	2d00      	cmp	r5, #0
  40e574:	dd0b      	ble.n	40e58e <_svfprintf_r+0xdba>
  40e576:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e578:	6037      	str	r7, [r6, #0]
  40e57a:	3301      	adds	r3, #1
  40e57c:	44ac      	add	ip, r5
  40e57e:	2b07      	cmp	r3, #7
  40e580:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e584:	6075      	str	r5, [r6, #4]
  40e586:	932c      	str	r3, [sp, #176]	; 0xb0
  40e588:	f300 8252 	bgt.w	40ea30 <_svfprintf_r+0x125c>
  40e58c:	3608      	adds	r6, #8
  40e58e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40e592:	1b64      	subs	r4, r4, r5
  40e594:	2c00      	cmp	r4, #0
  40e596:	f77f ab8f 	ble.w	40dcb8 <_svfprintf_r+0x4e4>
  40e59a:	2c10      	cmp	r4, #16
  40e59c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e59e:	4d53      	ldr	r5, [pc, #332]	; (40e6ec <_svfprintf_r+0xf18>)
  40e5a0:	f77f af7b 	ble.w	40e49a <_svfprintf_r+0xcc6>
  40e5a4:	2710      	movs	r7, #16
  40e5a6:	4662      	mov	r2, ip
  40e5a8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e5ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40e5b0:	e004      	b.n	40e5bc <_svfprintf_r+0xde8>
  40e5b2:	3608      	adds	r6, #8
  40e5b4:	3c10      	subs	r4, #16
  40e5b6:	2c10      	cmp	r4, #16
  40e5b8:	f77f af6e 	ble.w	40e498 <_svfprintf_r+0xcc4>
  40e5bc:	3301      	adds	r3, #1
  40e5be:	3210      	adds	r2, #16
  40e5c0:	2b07      	cmp	r3, #7
  40e5c2:	922d      	str	r2, [sp, #180]	; 0xb4
  40e5c4:	932c      	str	r3, [sp, #176]	; 0xb0
  40e5c6:	e886 00a0 	stmia.w	r6, {r5, r7}
  40e5ca:	ddf2      	ble.n	40e5b2 <_svfprintf_r+0xdde>
  40e5cc:	4640      	mov	r0, r8
  40e5ce:	4651      	mov	r1, sl
  40e5d0:	aa2b      	add	r2, sp, #172	; 0xac
  40e5d2:	f006 f8d9 	bl	414788 <__ssprint_r>
  40e5d6:	2800      	cmp	r0, #0
  40e5d8:	f47f aa14 	bne.w	40da04 <_svfprintf_r+0x230>
  40e5dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40e5de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e5e0:	ae38      	add	r6, sp, #224	; 0xe0
  40e5e2:	e7e7      	b.n	40e5b4 <_svfprintf_r+0xde0>
  40e5e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e5e6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40e5e8:	6035      	str	r5, [r6, #0]
  40e5ea:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40e5ec:	6075      	str	r5, [r6, #4]
  40e5ee:	3301      	adds	r3, #1
  40e5f0:	44ac      	add	ip, r5
  40e5f2:	2b07      	cmp	r3, #7
  40e5f4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e5f8:	932c      	str	r3, [sp, #176]	; 0xb0
  40e5fa:	f300 81fb 	bgt.w	40e9f4 <_svfprintf_r+0x1220>
  40e5fe:	3608      	adds	r6, #8
  40e600:	e7b0      	b.n	40e564 <_svfprintf_r+0xd90>
  40e602:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e604:	07ea      	lsls	r2, r5, #31
  40e606:	f53f ae27 	bmi.w	40e258 <_svfprintf_r+0xa84>
  40e60a:	3401      	adds	r4, #1
  40e60c:	f10c 0801 	add.w	r8, ip, #1
  40e610:	2301      	movs	r3, #1
  40e612:	2c07      	cmp	r4, #7
  40e614:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40e618:	942c      	str	r4, [sp, #176]	; 0xb0
  40e61a:	6037      	str	r7, [r6, #0]
  40e61c:	6073      	str	r3, [r6, #4]
  40e61e:	f77f ae4c 	ble.w	40e2ba <_svfprintf_r+0xae6>
  40e622:	e72c      	b.n	40e47e <_svfprintf_r+0xcaa>
  40e624:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e626:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e628:	aa2b      	add	r2, sp, #172	; 0xac
  40e62a:	f006 f8ad 	bl	414788 <__ssprint_r>
  40e62e:	2800      	cmp	r0, #0
  40e630:	f47f a9e8 	bne.w	40da04 <_svfprintf_r+0x230>
  40e634:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40e636:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40e638:	ae38      	add	r6, sp, #224	; 0xe0
  40e63a:	e619      	b.n	40e270 <_svfprintf_r+0xa9c>
  40e63c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e63e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e640:	aa2b      	add	r2, sp, #172	; 0xac
  40e642:	f006 f8a1 	bl	414788 <__ssprint_r>
  40e646:	2800      	cmp	r0, #0
  40e648:	f47f a9dc 	bne.w	40da04 <_svfprintf_r+0x230>
  40e64c:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40e650:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40e652:	ae38      	add	r6, sp, #224	; 0xe0
  40e654:	e61b      	b.n	40e28e <_svfprintf_r+0xaba>
  40e656:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e658:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e65a:	aa2b      	add	r2, sp, #172	; 0xac
  40e65c:	f006 f894 	bl	414788 <__ssprint_r>
  40e660:	2800      	cmp	r0, #0
  40e662:	f47f a9cf 	bne.w	40da04 <_svfprintf_r+0x230>
  40e666:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e66a:	ae38      	add	r6, sp, #224	; 0xe0
  40e66c:	f7ff bad2 	b.w	40dc14 <_svfprintf_r+0x440>
  40e670:	f004 fdb4 	bl	4131dc <__fpclassifyd>
  40e674:	2800      	cmp	r0, #0
  40e676:	f040 80c2 	bne.w	40e7fe <_svfprintf_r+0x102a>
  40e67a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e67c:	4f1c      	ldr	r7, [pc, #112]	; (40e6f0 <_svfprintf_r+0xf1c>)
  40e67e:	4b1d      	ldr	r3, [pc, #116]	; (40e6f4 <_svfprintf_r+0xf20>)
  40e680:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e684:	900a      	str	r0, [sp, #40]	; 0x28
  40e686:	f04f 0c03 	mov.w	ip, #3
  40e68a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40e68e:	9409      	str	r4, [sp, #36]	; 0x24
  40e690:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e694:	9014      	str	r0, [sp, #80]	; 0x50
  40e696:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40e69a:	bfd8      	it	le
  40e69c:	461f      	movle	r7, r3
  40e69e:	4664      	mov	r4, ip
  40e6a0:	f7ff ba2f 	b.w	40db02 <_svfprintf_r+0x32e>
  40e6a4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e6a8:	3308      	adds	r3, #8
  40e6aa:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40e6ae:	9310      	str	r3, [sp, #64]	; 0x40
  40e6b0:	e476      	b.n	40dfa0 <_svfprintf_r+0x7cc>
  40e6b2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e6b6:	f01c 0f10 	tst.w	ip, #16
  40e6ba:	f000 8155 	beq.w	40e968 <_svfprintf_r+0x1194>
  40e6be:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40e6c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40e6c2:	6823      	ldr	r3, [r4, #0]
  40e6c4:	3404      	adds	r4, #4
  40e6c6:	9410      	str	r4, [sp, #64]	; 0x40
  40e6c8:	601d      	str	r5, [r3, #0]
  40e6ca:	f7ff b8a9 	b.w	40d820 <_svfprintf_r+0x4c>
  40e6ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e6d0:	0664      	lsls	r4, r4, #25
  40e6d2:	f140 8142 	bpl.w	40e95a <_svfprintf_r+0x1186>
  40e6d6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40e6da:	f8bc 4000 	ldrh.w	r4, [ip]
  40e6de:	f10c 0c04 	add.w	ip, ip, #4
  40e6e2:	2500      	movs	r5, #0
  40e6e4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40e6e8:	f7ff b9ca 	b.w	40da80 <_svfprintf_r+0x2ac>
  40e6ec:	00416db4 	.word	0x00416db4
  40e6f0:	00416dd0 	.word	0x00416dd0
  40e6f4:	00416dcc 	.word	0x00416dcc
  40e6f8:	462c      	mov	r4, r5
  40e6fa:	463d      	mov	r5, r7
  40e6fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40e6fe:	4694      	mov	ip, r2
  40e700:	3301      	adds	r3, #1
  40e702:	44a4      	add	ip, r4
  40e704:	2b07      	cmp	r3, #7
  40e706:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e70a:	932c      	str	r3, [sp, #176]	; 0xb0
  40e70c:	6035      	str	r5, [r6, #0]
  40e70e:	6074      	str	r4, [r6, #4]
  40e710:	f73f af14 	bgt.w	40e53c <_svfprintf_r+0xd68>
  40e714:	3608      	adds	r6, #8
  40e716:	e71c      	b.n	40e552 <_svfprintf_r+0xd7e>
  40e718:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e71a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e71c:	aa2b      	add	r2, sp, #172	; 0xac
  40e71e:	f006 f833 	bl	414788 <__ssprint_r>
  40e722:	2800      	cmp	r0, #0
  40e724:	f47f a96e 	bne.w	40da04 <_svfprintf_r+0x230>
  40e728:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e72c:	ae38      	add	r6, sp, #224	; 0xe0
  40e72e:	e4fd      	b.n	40e12c <_svfprintf_r+0x958>
  40e730:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40e732:	49b7      	ldr	r1, [pc, #732]	; (40ea10 <_svfprintf_r+0x123c>)
  40e734:	6031      	str	r1, [r6, #0]
  40e736:	3201      	adds	r2, #1
  40e738:	f10c 0c01 	add.w	ip, ip, #1
  40e73c:	2101      	movs	r1, #1
  40e73e:	2a07      	cmp	r2, #7
  40e740:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e744:	922c      	str	r2, [sp, #176]	; 0xb0
  40e746:	6071      	str	r1, [r6, #4]
  40e748:	f300 80f7 	bgt.w	40e93a <_svfprintf_r+0x1166>
  40e74c:	3608      	adds	r6, #8
  40e74e:	461c      	mov	r4, r3
  40e750:	b92c      	cbnz	r4, 40e75e <_svfprintf_r+0xf8a>
  40e752:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e754:	b91d      	cbnz	r5, 40e75e <_svfprintf_r+0xf8a>
  40e756:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e758:	07e8      	lsls	r0, r5, #31
  40e75a:	f57f aaad 	bpl.w	40dcb8 <_svfprintf_r+0x4e4>
  40e75e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e760:	9918      	ldr	r1, [sp, #96]	; 0x60
  40e762:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40e764:	6035      	str	r5, [r6, #0]
  40e766:	3301      	adds	r3, #1
  40e768:	4461      	add	r1, ip
  40e76a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40e76c:	912d      	str	r1, [sp, #180]	; 0xb4
  40e76e:	2b07      	cmp	r3, #7
  40e770:	6075      	str	r5, [r6, #4]
  40e772:	932c      	str	r3, [sp, #176]	; 0xb0
  40e774:	f300 81de 	bgt.w	40eb34 <_svfprintf_r+0x1360>
  40e778:	f106 0208 	add.w	r2, r6, #8
  40e77c:	4264      	negs	r4, r4
  40e77e:	2c00      	cmp	r4, #0
  40e780:	f340 810b 	ble.w	40e99a <_svfprintf_r+0x11c6>
  40e784:	2c10      	cmp	r4, #16
  40e786:	4da3      	ldr	r5, [pc, #652]	; (40ea14 <_svfprintf_r+0x1240>)
  40e788:	f340 8148 	ble.w	40ea1c <_svfprintf_r+0x1248>
  40e78c:	46a3      	mov	fp, r4
  40e78e:	2610      	movs	r6, #16
  40e790:	460c      	mov	r4, r1
  40e792:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e796:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40e79a:	e006      	b.n	40e7aa <_svfprintf_r+0xfd6>
  40e79c:	3208      	adds	r2, #8
  40e79e:	f1ab 0b10 	sub.w	fp, fp, #16
  40e7a2:	f1bb 0f10 	cmp.w	fp, #16
  40e7a6:	f340 8137 	ble.w	40ea18 <_svfprintf_r+0x1244>
  40e7aa:	3301      	adds	r3, #1
  40e7ac:	3410      	adds	r4, #16
  40e7ae:	2b07      	cmp	r3, #7
  40e7b0:	942d      	str	r4, [sp, #180]	; 0xb4
  40e7b2:	932c      	str	r3, [sp, #176]	; 0xb0
  40e7b4:	e882 0060 	stmia.w	r2, {r5, r6}
  40e7b8:	ddf0      	ble.n	40e79c <_svfprintf_r+0xfc8>
  40e7ba:	4640      	mov	r0, r8
  40e7bc:	4651      	mov	r1, sl
  40e7be:	aa2b      	add	r2, sp, #172	; 0xac
  40e7c0:	f005 ffe2 	bl	414788 <__ssprint_r>
  40e7c4:	2800      	cmp	r0, #0
  40e7c6:	f47f a91d 	bne.w	40da04 <_svfprintf_r+0x230>
  40e7ca:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40e7cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e7ce:	aa38      	add	r2, sp, #224	; 0xe0
  40e7d0:	e7e5      	b.n	40e79e <_svfprintf_r+0xfca>
  40e7d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e7d4:	f893 8001 	ldrb.w	r8, [r3, #1]
  40e7d8:	f044 0420 	orr.w	r4, r4, #32
  40e7dc:	f109 0901 	add.w	r9, r9, #1
  40e7e0:	9409      	str	r4, [sp, #36]	; 0x24
  40e7e2:	f7ff b853 	b.w	40d88c <_svfprintf_r+0xb8>
  40e7e6:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e7e8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e7ea:	aa2b      	add	r2, sp, #172	; 0xac
  40e7ec:	f005 ffcc 	bl	414788 <__ssprint_r>
  40e7f0:	2800      	cmp	r0, #0
  40e7f2:	f47f a907 	bne.w	40da04 <_svfprintf_r+0x230>
  40e7f6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e7fa:	ae38      	add	r6, sp, #224	; 0xe0
  40e7fc:	e4ac      	b.n	40e158 <_svfprintf_r+0x984>
  40e7fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e800:	3501      	adds	r5, #1
  40e802:	f028 0a20 	bic.w	sl, r8, #32
  40e806:	f000 80a5 	beq.w	40e954 <_svfprintf_r+0x1180>
  40e80a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40e80e:	d104      	bne.n	40e81a <_svfprintf_r+0x1046>
  40e810:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e812:	2d00      	cmp	r5, #0
  40e814:	bf08      	it	eq
  40e816:	2501      	moveq	r5, #1
  40e818:	950a      	str	r5, [sp, #40]	; 0x28
  40e81a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40e81e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e822:	2b00      	cmp	r3, #0
  40e824:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40e828:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40e82c:	f2c0 819c 	blt.w	40eb68 <_svfprintf_r+0x1394>
  40e830:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40e834:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40e838:	f04f 0b00 	mov.w	fp, #0
  40e83c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40e840:	f000 819b 	beq.w	40eb7a <_svfprintf_r+0x13a6>
  40e844:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40e848:	f000 81a9 	beq.w	40eb9e <_svfprintf_r+0x13ca>
  40e84c:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40e850:	bf0a      	itet	eq
  40e852:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40e854:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40e856:	1c65      	addeq	r5, r4, #1
  40e858:	2002      	movs	r0, #2
  40e85a:	a925      	add	r1, sp, #148	; 0x94
  40e85c:	aa26      	add	r2, sp, #152	; 0x98
  40e85e:	ab29      	add	r3, sp, #164	; 0xa4
  40e860:	e88d 0021 	stmia.w	sp, {r0, r5}
  40e864:	9203      	str	r2, [sp, #12]
  40e866:	9304      	str	r3, [sp, #16]
  40e868:	9102      	str	r1, [sp, #8]
  40e86a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e86c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40e870:	f002 f93e 	bl	410af0 <_dtoa_r>
  40e874:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40e878:	4607      	mov	r7, r0
  40e87a:	d002      	beq.n	40e882 <_svfprintf_r+0x10ae>
  40e87c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40e880:	d105      	bne.n	40e88e <_svfprintf_r+0x10ba>
  40e882:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e886:	f01c 0f01 	tst.w	ip, #1
  40e88a:	f000 819c 	beq.w	40ebc6 <_svfprintf_r+0x13f2>
  40e88e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40e892:	eb07 0405 	add.w	r4, r7, r5
  40e896:	f000 811c 	beq.w	40ead2 <_svfprintf_r+0x12fe>
  40e89a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40e89e:	2200      	movs	r2, #0
  40e8a0:	2300      	movs	r3, #0
  40e8a2:	f007 fa19 	bl	415cd8 <__aeabi_dcmpeq>
  40e8a6:	2800      	cmp	r0, #0
  40e8a8:	f040 8105 	bne.w	40eab6 <_svfprintf_r+0x12e2>
  40e8ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e8ae:	429c      	cmp	r4, r3
  40e8b0:	d906      	bls.n	40e8c0 <_svfprintf_r+0x10ec>
  40e8b2:	2130      	movs	r1, #48	; 0x30
  40e8b4:	1c5a      	adds	r2, r3, #1
  40e8b6:	9229      	str	r2, [sp, #164]	; 0xa4
  40e8b8:	7019      	strb	r1, [r3, #0]
  40e8ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e8bc:	429c      	cmp	r4, r3
  40e8be:	d8f9      	bhi.n	40e8b4 <_svfprintf_r+0x10e0>
  40e8c0:	1bdb      	subs	r3, r3, r7
  40e8c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40e8c6:	9311      	str	r3, [sp, #68]	; 0x44
  40e8c8:	f000 80ed 	beq.w	40eaa6 <_svfprintf_r+0x12d2>
  40e8cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40e8d0:	f340 81f2 	ble.w	40ecb8 <_svfprintf_r+0x14e4>
  40e8d4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40e8d8:	f000 8168 	beq.w	40ebac <_svfprintf_r+0x13d8>
  40e8dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e8de:	9414      	str	r4, [sp, #80]	; 0x50
  40e8e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e8e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e8e4:	42ac      	cmp	r4, r5
  40e8e6:	f300 8132 	bgt.w	40eb4e <_svfprintf_r+0x137a>
  40e8ea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e8ee:	f01c 0f01 	tst.w	ip, #1
  40e8f2:	f040 81ad 	bne.w	40ec50 <_svfprintf_r+0x147c>
  40e8f6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40e8fa:	462c      	mov	r4, r5
  40e8fc:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e900:	f1bb 0f00 	cmp.w	fp, #0
  40e904:	f040 80b2 	bne.w	40ea6c <_svfprintf_r+0x1298>
  40e908:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40e90a:	930b      	str	r3, [sp, #44]	; 0x2c
  40e90c:	9509      	str	r5, [sp, #36]	; 0x24
  40e90e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40e912:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e916:	f7ff b8f4 	b.w	40db02 <_svfprintf_r+0x32e>
  40e91a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e91c:	2140      	movs	r1, #64	; 0x40
  40e91e:	f7fe f823 	bl	40c968 <_malloc_r>
  40e922:	6020      	str	r0, [r4, #0]
  40e924:	6120      	str	r0, [r4, #16]
  40e926:	2800      	cmp	r0, #0
  40e928:	f000 81bf 	beq.w	40ecaa <_svfprintf_r+0x14d6>
  40e92c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40e930:	2340      	movs	r3, #64	; 0x40
  40e932:	f8cc 3014 	str.w	r3, [ip, #20]
  40e936:	f7fe bf63 	b.w	40d800 <_svfprintf_r+0x2c>
  40e93a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e93c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e93e:	aa2b      	add	r2, sp, #172	; 0xac
  40e940:	f005 ff22 	bl	414788 <__ssprint_r>
  40e944:	2800      	cmp	r0, #0
  40e946:	f47f a85d 	bne.w	40da04 <_svfprintf_r+0x230>
  40e94a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e94c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e950:	ae38      	add	r6, sp, #224	; 0xe0
  40e952:	e6fd      	b.n	40e750 <_svfprintf_r+0xf7c>
  40e954:	2406      	movs	r4, #6
  40e956:	940a      	str	r4, [sp, #40]	; 0x28
  40e958:	e75f      	b.n	40e81a <_svfprintf_r+0x1046>
  40e95a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e95c:	682c      	ldr	r4, [r5, #0]
  40e95e:	3504      	adds	r5, #4
  40e960:	9510      	str	r5, [sp, #64]	; 0x40
  40e962:	2500      	movs	r5, #0
  40e964:	f7ff b88c 	b.w	40da80 <_svfprintf_r+0x2ac>
  40e968:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e96c:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40e970:	f000 8087 	beq.w	40ea82 <_svfprintf_r+0x12ae>
  40e974:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40e976:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40e978:	6823      	ldr	r3, [r4, #0]
  40e97a:	3404      	adds	r4, #4
  40e97c:	9410      	str	r4, [sp, #64]	; 0x40
  40e97e:	801d      	strh	r5, [r3, #0]
  40e980:	f7fe bf4e 	b.w	40d820 <_svfprintf_r+0x4c>
  40e984:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e986:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e988:	aa2b      	add	r2, sp, #172	; 0xac
  40e98a:	f005 fefd 	bl	414788 <__ssprint_r>
  40e98e:	2800      	cmp	r0, #0
  40e990:	f47f a838 	bne.w	40da04 <_svfprintf_r+0x230>
  40e994:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40e996:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e998:	aa38      	add	r2, sp, #224	; 0xe0
  40e99a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40e99e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e9a0:	6017      	str	r7, [r2, #0]
  40e9a2:	3301      	adds	r3, #1
  40e9a4:	448c      	add	ip, r1
  40e9a6:	2b07      	cmp	r3, #7
  40e9a8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e9ac:	932c      	str	r3, [sp, #176]	; 0xb0
  40e9ae:	6054      	str	r4, [r2, #4]
  40e9b0:	f73f ac92 	bgt.w	40e2d8 <_svfprintf_r+0xb04>
  40e9b4:	f102 0608 	add.w	r6, r2, #8
  40e9b8:	f7ff b97e 	b.w	40dcb8 <_svfprintf_r+0x4e4>
  40e9bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40e9c0:	f7fe fe4c 	bl	40d65c <strlen>
  40e9c4:	9510      	str	r5, [sp, #64]	; 0x40
  40e9c6:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40e9ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e9cc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e9d0:	4604      	mov	r4, r0
  40e9d2:	9514      	str	r5, [sp, #80]	; 0x50
  40e9d4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e9d8:	f7ff b893 	b.w	40db02 <_svfprintf_r+0x32e>
  40e9dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e9de:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e9e0:	aa2b      	add	r2, sp, #172	; 0xac
  40e9e2:	f005 fed1 	bl	414788 <__ssprint_r>
  40e9e6:	2800      	cmp	r0, #0
  40e9e8:	f47f a80c 	bne.w	40da04 <_svfprintf_r+0x230>
  40e9ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e9f0:	ae38      	add	r6, sp, #224	; 0xe0
  40e9f2:	e4cc      	b.n	40e38e <_svfprintf_r+0xbba>
  40e9f4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e9f6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e9f8:	aa2b      	add	r2, sp, #172	; 0xac
  40e9fa:	f005 fec5 	bl	414788 <__ssprint_r>
  40e9fe:	2800      	cmp	r0, #0
  40ea00:	f47f a800 	bne.w	40da04 <_svfprintf_r+0x230>
  40ea04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ea06:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40ea0a:	ae38      	add	r6, sp, #224	; 0xe0
  40ea0c:	e5aa      	b.n	40e564 <_svfprintf_r+0xd90>
  40ea0e:	bf00      	nop
  40ea10:	00416e04 	.word	0x00416e04
  40ea14:	00416db4 	.word	0x00416db4
  40ea18:	4621      	mov	r1, r4
  40ea1a:	465c      	mov	r4, fp
  40ea1c:	3301      	adds	r3, #1
  40ea1e:	4421      	add	r1, r4
  40ea20:	2b07      	cmp	r3, #7
  40ea22:	912d      	str	r1, [sp, #180]	; 0xb4
  40ea24:	932c      	str	r3, [sp, #176]	; 0xb0
  40ea26:	6015      	str	r5, [r2, #0]
  40ea28:	6054      	str	r4, [r2, #4]
  40ea2a:	dcab      	bgt.n	40e984 <_svfprintf_r+0x11b0>
  40ea2c:	3208      	adds	r2, #8
  40ea2e:	e7b4      	b.n	40e99a <_svfprintf_r+0x11c6>
  40ea30:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ea32:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ea34:	aa2b      	add	r2, sp, #172	; 0xac
  40ea36:	f005 fea7 	bl	414788 <__ssprint_r>
  40ea3a:	2800      	cmp	r0, #0
  40ea3c:	f47e afe2 	bne.w	40da04 <_svfprintf_r+0x230>
  40ea40:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ea42:	9911      	ldr	r1, [sp, #68]	; 0x44
  40ea44:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40ea48:	1b0c      	subs	r4, r1, r4
  40ea4a:	ae38      	add	r6, sp, #224	; 0xe0
  40ea4c:	e59f      	b.n	40e58e <_svfprintf_r+0xdba>
  40ea4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ea50:	9714      	str	r7, [sp, #80]	; 0x50
  40ea52:	2c06      	cmp	r4, #6
  40ea54:	bf28      	it	cs
  40ea56:	2406      	movcs	r4, #6
  40ea58:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40ea5c:	46ba      	mov	sl, r7
  40ea5e:	970a      	str	r7, [sp, #40]	; 0x28
  40ea60:	9510      	str	r5, [sp, #64]	; 0x40
  40ea62:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40ea66:	4f97      	ldr	r7, [pc, #604]	; (40ecc4 <_svfprintf_r+0x14f0>)
  40ea68:	f7ff b84b 	b.w	40db02 <_svfprintf_r+0x32e>
  40ea6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40ea6e:	9509      	str	r5, [sp, #36]	; 0x24
  40ea70:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40ea74:	2500      	movs	r5, #0
  40ea76:	930b      	str	r3, [sp, #44]	; 0x2c
  40ea78:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40ea7c:	950a      	str	r5, [sp, #40]	; 0x28
  40ea7e:	f7ff b843 	b.w	40db08 <_svfprintf_r+0x334>
  40ea82:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ea86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ea88:	f8dc 3000 	ldr.w	r3, [ip]
  40ea8c:	f10c 0c04 	add.w	ip, ip, #4
  40ea90:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ea94:	601c      	str	r4, [r3, #0]
  40ea96:	f7fe bec3 	b.w	40d820 <_svfprintf_r+0x4c>
  40ea9a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40ea9e:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40eaa2:	f7ff ba8f 	b.w	40dfc4 <_svfprintf_r+0x7f0>
  40eaa6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40eaa8:	1cdc      	adds	r4, r3, #3
  40eaaa:	db19      	blt.n	40eae0 <_svfprintf_r+0x130c>
  40eaac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40eaae:	429c      	cmp	r4, r3
  40eab0:	db16      	blt.n	40eae0 <_svfprintf_r+0x130c>
  40eab2:	9314      	str	r3, [sp, #80]	; 0x50
  40eab4:	e714      	b.n	40e8e0 <_svfprintf_r+0x110c>
  40eab6:	4623      	mov	r3, r4
  40eab8:	e702      	b.n	40e8c0 <_svfprintf_r+0x10ec>
  40eaba:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40eabe:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40eac2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40eac4:	9510      	str	r5, [sp, #64]	; 0x40
  40eac6:	900a      	str	r0, [sp, #40]	; 0x28
  40eac8:	9014      	str	r0, [sp, #80]	; 0x50
  40eaca:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40eace:	f7ff b818 	b.w	40db02 <_svfprintf_r+0x32e>
  40ead2:	783b      	ldrb	r3, [r7, #0]
  40ead4:	2b30      	cmp	r3, #48	; 0x30
  40ead6:	f000 80ad 	beq.w	40ec34 <_svfprintf_r+0x1460>
  40eada:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40eadc:	442c      	add	r4, r5
  40eade:	e6dc      	b.n	40e89a <_svfprintf_r+0x10c6>
  40eae0:	f1a8 0802 	sub.w	r8, r8, #2
  40eae4:	3b01      	subs	r3, #1
  40eae6:	2b00      	cmp	r3, #0
  40eae8:	9325      	str	r3, [sp, #148]	; 0x94
  40eaea:	bfba      	itte	lt
  40eaec:	425b      	neglt	r3, r3
  40eaee:	222d      	movlt	r2, #45	; 0x2d
  40eaf0:	222b      	movge	r2, #43	; 0x2b
  40eaf2:	2b09      	cmp	r3, #9
  40eaf4:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40eaf8:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40eafc:	dc65      	bgt.n	40ebca <_svfprintf_r+0x13f6>
  40eafe:	3330      	adds	r3, #48	; 0x30
  40eb00:	2230      	movs	r2, #48	; 0x30
  40eb02:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40eb06:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  40eb0a:	ab28      	add	r3, sp, #160	; 0xa0
  40eb0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40eb0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40eb10:	aa27      	add	r2, sp, #156	; 0x9c
  40eb12:	1a9a      	subs	r2, r3, r2
  40eb14:	2d01      	cmp	r5, #1
  40eb16:	9219      	str	r2, [sp, #100]	; 0x64
  40eb18:	4414      	add	r4, r2
  40eb1a:	f340 80b7 	ble.w	40ec8c <_svfprintf_r+0x14b8>
  40eb1e:	3401      	adds	r4, #1
  40eb20:	2500      	movs	r5, #0
  40eb22:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40eb26:	9514      	str	r5, [sp, #80]	; 0x50
  40eb28:	e6ea      	b.n	40e900 <_svfprintf_r+0x112c>
  40eb2a:	2400      	movs	r4, #0
  40eb2c:	4681      	mov	r9, r0
  40eb2e:	940a      	str	r4, [sp, #40]	; 0x28
  40eb30:	f7fe beae 	b.w	40d890 <_svfprintf_r+0xbc>
  40eb34:	980d      	ldr	r0, [sp, #52]	; 0x34
  40eb36:	990c      	ldr	r1, [sp, #48]	; 0x30
  40eb38:	aa2b      	add	r2, sp, #172	; 0xac
  40eb3a:	f005 fe25 	bl	414788 <__ssprint_r>
  40eb3e:	2800      	cmp	r0, #0
  40eb40:	f47e af60 	bne.w	40da04 <_svfprintf_r+0x230>
  40eb44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40eb46:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40eb48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40eb4a:	aa38      	add	r2, sp, #224	; 0xe0
  40eb4c:	e616      	b.n	40e77c <_svfprintf_r+0xfa8>
  40eb4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40eb50:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40eb52:	2c00      	cmp	r4, #0
  40eb54:	bfd4      	ite	le
  40eb56:	f1c4 0402 	rsble	r4, r4, #2
  40eb5a:	2401      	movgt	r4, #1
  40eb5c:	442c      	add	r4, r5
  40eb5e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40eb62:	f04f 0867 	mov.w	r8, #103	; 0x67
  40eb66:	e6cb      	b.n	40e900 <_svfprintf_r+0x112c>
  40eb68:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40eb6a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40eb6c:	9020      	str	r0, [sp, #128]	; 0x80
  40eb6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40eb72:	9121      	str	r1, [sp, #132]	; 0x84
  40eb74:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40eb78:	e660      	b.n	40e83c <_svfprintf_r+0x1068>
  40eb7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40eb7c:	9501      	str	r5, [sp, #4]
  40eb7e:	2003      	movs	r0, #3
  40eb80:	a925      	add	r1, sp, #148	; 0x94
  40eb82:	aa26      	add	r2, sp, #152	; 0x98
  40eb84:	ab29      	add	r3, sp, #164	; 0xa4
  40eb86:	9000      	str	r0, [sp, #0]
  40eb88:	9203      	str	r2, [sp, #12]
  40eb8a:	9304      	str	r3, [sp, #16]
  40eb8c:	9102      	str	r1, [sp, #8]
  40eb8e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40eb90:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40eb94:	f001 ffac 	bl	410af0 <_dtoa_r>
  40eb98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40eb9a:	4607      	mov	r7, r0
  40eb9c:	e677      	b.n	40e88e <_svfprintf_r+0x10ba>
  40eb9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40eba0:	9401      	str	r4, [sp, #4]
  40eba2:	2003      	movs	r0, #3
  40eba4:	a925      	add	r1, sp, #148	; 0x94
  40eba6:	aa26      	add	r2, sp, #152	; 0x98
  40eba8:	ab29      	add	r3, sp, #164	; 0xa4
  40ebaa:	e7ec      	b.n	40eb86 <_svfprintf_r+0x13b2>
  40ebac:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40ebae:	9514      	str	r5, [sp, #80]	; 0x50
  40ebb0:	2d00      	cmp	r5, #0
  40ebb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ebb4:	dd63      	ble.n	40ec7e <_svfprintf_r+0x14aa>
  40ebb6:	bbb4      	cbnz	r4, 40ec26 <_svfprintf_r+0x1452>
  40ebb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ebba:	07e8      	lsls	r0, r5, #31
  40ebbc:	d433      	bmi.n	40ec26 <_svfprintf_r+0x1452>
  40ebbe:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40ebc0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ebc4:	e69c      	b.n	40e900 <_svfprintf_r+0x112c>
  40ebc6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ebc8:	e67a      	b.n	40e8c0 <_svfprintf_r+0x10ec>
  40ebca:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40ebce:	4d3e      	ldr	r5, [pc, #248]	; (40ecc8 <_svfprintf_r+0x14f4>)
  40ebd0:	17da      	asrs	r2, r3, #31
  40ebd2:	fb85 5103 	smull	r5, r1, r5, r3
  40ebd6:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40ebda:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40ebde:	4602      	mov	r2, r0
  40ebe0:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  40ebe4:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40ebe8:	2909      	cmp	r1, #9
  40ebea:	7010      	strb	r0, [r2, #0]
  40ebec:	460b      	mov	r3, r1
  40ebee:	f102 30ff 	add.w	r0, r2, #4294967295
  40ebf2:	dcec      	bgt.n	40ebce <_svfprintf_r+0x13fa>
  40ebf4:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40ebf8:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40ebfc:	b2d9      	uxtb	r1, r3
  40ebfe:	4284      	cmp	r4, r0
  40ec00:	f802 1c01 	strb.w	r1, [r2, #-1]
  40ec04:	d95a      	bls.n	40ecbc <_svfprintf_r+0x14e8>
  40ec06:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  40ec0a:	4613      	mov	r3, r2
  40ec0c:	e001      	b.n	40ec12 <_svfprintf_r+0x143e>
  40ec0e:	f813 1b01 	ldrb.w	r1, [r3], #1
  40ec12:	42a3      	cmp	r3, r4
  40ec14:	f800 1f01 	strb.w	r1, [r0, #1]!
  40ec18:	d1f9      	bne.n	40ec0e <_svfprintf_r+0x143a>
  40ec1a:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  40ec1e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  40ec22:	3bf6      	subs	r3, #246	; 0xf6
  40ec24:	e772      	b.n	40eb0c <_svfprintf_r+0x1338>
  40ec26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ec28:	1c6c      	adds	r4, r5, #1
  40ec2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ec2c:	442c      	add	r4, r5
  40ec2e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ec32:	e665      	b.n	40e900 <_svfprintf_r+0x112c>
  40ec34:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40ec38:	2200      	movs	r2, #0
  40ec3a:	2300      	movs	r3, #0
  40ec3c:	f007 f84c 	bl	415cd8 <__aeabi_dcmpeq>
  40ec40:	2800      	cmp	r0, #0
  40ec42:	f47f af4a 	bne.w	40eada <_svfprintf_r+0x1306>
  40ec46:	f1c5 0501 	rsb	r5, r5, #1
  40ec4a:	9525      	str	r5, [sp, #148]	; 0x94
  40ec4c:	442c      	add	r4, r5
  40ec4e:	e624      	b.n	40e89a <_svfprintf_r+0x10c6>
  40ec50:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ec52:	1c6c      	adds	r4, r5, #1
  40ec54:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ec58:	f04f 0867 	mov.w	r8, #103	; 0x67
  40ec5c:	e650      	b.n	40e900 <_svfprintf_r+0x112c>
  40ec5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ec60:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ec64:	682d      	ldr	r5, [r5, #0]
  40ec66:	f899 8001 	ldrb.w	r8, [r9, #1]
  40ec6a:	950a      	str	r5, [sp, #40]	; 0x28
  40ec6c:	f10c 0304 	add.w	r3, ip, #4
  40ec70:	2d00      	cmp	r5, #0
  40ec72:	9310      	str	r3, [sp, #64]	; 0x40
  40ec74:	4681      	mov	r9, r0
  40ec76:	f6be ae09 	bge.w	40d88c <_svfprintf_r+0xb8>
  40ec7a:	f7fe be04 	b.w	40d886 <_svfprintf_r+0xb2>
  40ec7e:	b97c      	cbnz	r4, 40eca0 <_svfprintf_r+0x14cc>
  40ec80:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ec82:	07e9      	lsls	r1, r5, #31
  40ec84:	d40c      	bmi.n	40eca0 <_svfprintf_r+0x14cc>
  40ec86:	2301      	movs	r3, #1
  40ec88:	461c      	mov	r4, r3
  40ec8a:	e639      	b.n	40e900 <_svfprintf_r+0x112c>
  40ec8c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ec90:	f01c 0301 	ands.w	r3, ip, #1
  40ec94:	f47f af43 	bne.w	40eb1e <_svfprintf_r+0x134a>
  40ec98:	9314      	str	r3, [sp, #80]	; 0x50
  40ec9a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ec9e:	e62f      	b.n	40e900 <_svfprintf_r+0x112c>
  40eca0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40eca2:	1cac      	adds	r4, r5, #2
  40eca4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40eca8:	e62a      	b.n	40e900 <_svfprintf_r+0x112c>
  40ecaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40ecac:	230c      	movs	r3, #12
  40ecae:	602b      	str	r3, [r5, #0]
  40ecb0:	f04f 30ff 	mov.w	r0, #4294967295
  40ecb4:	f7fe beae 	b.w	40da14 <_svfprintf_r+0x240>
  40ecb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40ecba:	e713      	b.n	40eae4 <_svfprintf_r+0x1310>
  40ecbc:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  40ecc0:	e724      	b.n	40eb0c <_svfprintf_r+0x1338>
  40ecc2:	bf00      	nop
  40ecc4:	00416dfc 	.word	0x00416dfc
  40ecc8:	66666667 	.word	0x66666667

0040eccc <__ssvfscanf_r>:
  40eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ecd0:	460d      	mov	r5, r1
  40ecd2:	8989      	ldrh	r1, [r1, #12]
  40ecd4:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  40ecd8:	048c      	lsls	r4, r1, #18
  40ecda:	900e      	str	r0, [sp, #56]	; 0x38
  40ecdc:	9306      	str	r3, [sp, #24]
  40ecde:	d406      	bmi.n	40ecee <__ssvfscanf_r+0x22>
  40ece0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40ece2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40ece6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40ecea:	81a9      	strh	r1, [r5, #12]
  40ecec:	666b      	str	r3, [r5, #100]	; 0x64
  40ecee:	4692      	mov	sl, r2
  40ecf0:	2400      	movs	r4, #0
  40ecf2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ecf6:	9409      	str	r4, [sp, #36]	; 0x24
  40ecf8:	940c      	str	r4, [sp, #48]	; 0x30
  40ecfa:	46a1      	mov	r9, r4
  40ecfc:	940b      	str	r4, [sp, #44]	; 0x2c
  40ecfe:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 40f0e4 <__ssvfscanf_r+0x418>
  40ed02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ed04:	9313      	str	r3, [sp, #76]	; 0x4c
  40ed06:	b343      	cbz	r3, 40ed5a <__ssvfscanf_r+0x8e>
  40ed08:	f8d8 1000 	ldr.w	r1, [r8]
  40ed0c:	18c8      	adds	r0, r1, r3
  40ed0e:	7840      	ldrb	r0, [r0, #1]
  40ed10:	f000 0008 	and.w	r0, r0, #8
  40ed14:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40ed18:	b320      	cbz	r0, 40ed64 <__ssvfscanf_r+0x98>
  40ed1a:	686b      	ldr	r3, [r5, #4]
  40ed1c:	e00e      	b.n	40ed3c <__ssvfscanf_r+0x70>
  40ed1e:	682b      	ldr	r3, [r5, #0]
  40ed20:	f8d8 2000 	ldr.w	r2, [r8]
  40ed24:	7819      	ldrb	r1, [r3, #0]
  40ed26:	440a      	add	r2, r1
  40ed28:	3301      	adds	r3, #1
  40ed2a:	7852      	ldrb	r2, [r2, #1]
  40ed2c:	0710      	lsls	r0, r2, #28
  40ed2e:	d50d      	bpl.n	40ed4c <__ssvfscanf_r+0x80>
  40ed30:	686a      	ldr	r2, [r5, #4]
  40ed32:	602b      	str	r3, [r5, #0]
  40ed34:	1e53      	subs	r3, r2, #1
  40ed36:	f109 0901 	add.w	r9, r9, #1
  40ed3a:	606b      	str	r3, [r5, #4]
  40ed3c:	2b00      	cmp	r3, #0
  40ed3e:	dcee      	bgt.n	40ed1e <__ssvfscanf_r+0x52>
  40ed40:	4630      	mov	r0, r6
  40ed42:	4629      	mov	r1, r5
  40ed44:	f005 fde0 	bl	414908 <__ssrefill_r>
  40ed48:	2800      	cmp	r0, #0
  40ed4a:	d0e8      	beq.n	40ed1e <__ssvfscanf_r+0x52>
  40ed4c:	4652      	mov	r2, sl
  40ed4e:	4692      	mov	sl, r2
  40ed50:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ed54:	9313      	str	r3, [sp, #76]	; 0x4c
  40ed56:	2b00      	cmp	r3, #0
  40ed58:	d1d6      	bne.n	40ed08 <__ssvfscanf_r+0x3c>
  40ed5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ed5c:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40ed60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed64:	2b25      	cmp	r3, #37	; 0x25
  40ed66:	f040 8084 	bne.w	40ee72 <__ssvfscanf_r+0x1a6>
  40ed6a:	7853      	ldrb	r3, [r2, #1]
  40ed6c:	463c      	mov	r4, r7
  40ed6e:	f10a 0201 	add.w	r2, sl, #1
  40ed72:	2b78      	cmp	r3, #120	; 0x78
  40ed74:	f200 82e5 	bhi.w	40f342 <__ssvfscanf_r+0x676>
  40ed78:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ed7c:	02e3008f 	.word	0x02e3008f
  40ed80:	02e302e3 	.word	0x02e302e3
  40ed84:	02e302e3 	.word	0x02e302e3
  40ed88:	02e302e3 	.word	0x02e302e3
  40ed8c:	02e302e3 	.word	0x02e302e3
  40ed90:	02e302e3 	.word	0x02e302e3
  40ed94:	02e302e3 	.word	0x02e302e3
  40ed98:	02e302e3 	.word	0x02e302e3
  40ed9c:	02e302e3 	.word	0x02e302e3
  40eda0:	02e302e3 	.word	0x02e302e3
  40eda4:	02e302e3 	.word	0x02e302e3
  40eda8:	02e302e3 	.word	0x02e302e3
  40edac:	02e302e3 	.word	0x02e302e3
  40edb0:	02e302e3 	.word	0x02e302e3
  40edb4:	02e302e3 	.word	0x02e302e3
  40edb8:	02e302e3 	.word	0x02e302e3
  40edbc:	02e302e3 	.word	0x02e302e3
  40edc0:	02e302e3 	.word	0x02e302e3
  40edc4:	007902e3 	.word	0x007902e3
  40edc8:	02e302e3 	.word	0x02e302e3
  40edcc:	02e302e3 	.word	0x02e302e3
  40edd0:	02e30226 	.word	0x02e30226
  40edd4:	02e302e3 	.word	0x02e302e3
  40edd8:	02e302e3 	.word	0x02e302e3
  40eddc:	024f024f 	.word	0x024f024f
  40ede0:	024f024f 	.word	0x024f024f
  40ede4:	024f024f 	.word	0x024f024f
  40ede8:	024f024f 	.word	0x024f024f
  40edec:	024f024f 	.word	0x024f024f
  40edf0:	02e302e3 	.word	0x02e302e3
  40edf4:	02e302e3 	.word	0x02e302e3
  40edf8:	02e302e3 	.word	0x02e302e3
  40edfc:	02e302e3 	.word	0x02e302e3
  40ee00:	02e302e3 	.word	0x02e302e3
  40ee04:	0273022c 	.word	0x0273022c
  40ee08:	027302e3 	.word	0x027302e3
  40ee0c:	02e302e3 	.word	0x02e302e3
  40ee10:	02e302e3 	.word	0x02e302e3
  40ee14:	02e3026d 	.word	0x02e3026d
  40ee18:	026302e3 	.word	0x026302e3
  40ee1c:	02e302e3 	.word	0x02e302e3
  40ee20:	02e302e3 	.word	0x02e302e3
  40ee24:	02e302e3 	.word	0x02e302e3
  40ee28:	02e302e3 	.word	0x02e302e3
  40ee2c:	02e30259 	.word	0x02e30259
  40ee30:	029302e3 	.word	0x029302e3
  40ee34:	02e302e3 	.word	0x02e302e3
  40ee38:	02e302e3 	.word	0x02e302e3
  40ee3c:	02e302e3 	.word	0x02e302e3
  40ee40:	028d02e3 	.word	0x028d02e3
  40ee44:	0273029e 	.word	0x0273029e
  40ee48:	02730273 	.word	0x02730273
  40ee4c:	00950287 	.word	0x00950287
  40ee50:	02e302e3 	.word	0x02e302e3
  40ee54:	02e302b6 	.word	0x02e302b6
  40ee58:	02770279 	.word	0x02770279
  40ee5c:	02e302ac 	.word	0x02e302ac
  40ee60:	02a802e3 	.word	0x02a802e3
  40ee64:	02a002e3 	.word	0x02a002e3
  40ee68:	02e302e3 	.word	0x02e302e3
  40ee6c:	0259      	.short	0x0259
  40ee6e:	9207      	str	r2, [sp, #28]
  40ee70:	4692      	mov	sl, r2
  40ee72:	686b      	ldr	r3, [r5, #4]
  40ee74:	2b00      	cmp	r3, #0
  40ee76:	f340 8557 	ble.w	40f928 <__ssvfscanf_r+0xc5c>
  40ee7a:	682b      	ldr	r3, [r5, #0]
  40ee7c:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  40ee80:	7819      	ldrb	r1, [r3, #0]
  40ee82:	4291      	cmp	r1, r2
  40ee84:	f47f af69 	bne.w	40ed5a <__ssvfscanf_r+0x8e>
  40ee88:	686a      	ldr	r2, [r5, #4]
  40ee8a:	3301      	adds	r3, #1
  40ee8c:	3a01      	subs	r2, #1
  40ee8e:	606a      	str	r2, [r5, #4]
  40ee90:	602b      	str	r3, [r5, #0]
  40ee92:	f109 0901 	add.w	r9, r9, #1
  40ee96:	4652      	mov	r2, sl
  40ee98:	e759      	b.n	40ed4e <__ssvfscanf_r+0x82>
  40ee9a:	f04f 30ff 	mov.w	r0, #4294967295
  40ee9e:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eea6:	9207      	str	r2, [sp, #28]
  40eea8:	2300      	movs	r3, #0
  40eeaa:	4a8d      	ldr	r2, [pc, #564]	; (40f0e0 <__ssvfscanf_r+0x414>)
  40eeac:	9209      	str	r2, [sp, #36]	; 0x24
  40eeae:	930c      	str	r3, [sp, #48]	; 0x30
  40eeb0:	f04f 0a03 	mov.w	sl, #3
  40eeb4:	686b      	ldr	r3, [r5, #4]
  40eeb6:	2b00      	cmp	r3, #0
  40eeb8:	f340 8199 	ble.w	40f1ee <__ssvfscanf_r+0x522>
  40eebc:	0679      	lsls	r1, r7, #25
  40eebe:	d512      	bpl.n	40eee6 <__ssvfscanf_r+0x21a>
  40eec0:	f10a 3aff 	add.w	sl, sl, #4294967295
  40eec4:	f1ba 0f03 	cmp.w	sl, #3
  40eec8:	f200 80b7 	bhi.w	40f03a <__ssvfscanf_r+0x36e>
  40eecc:	e8df f01a 	tbh	[pc, sl, lsl #1]
  40eed0:	008e00da 	.word	0x008e00da
  40eed4:	0244001e 	.word	0x0244001e
  40eed8:	4630      	mov	r0, r6
  40eeda:	4629      	mov	r1, r5
  40eedc:	f005 fd14 	bl	414908 <__ssrefill_r>
  40eee0:	2800      	cmp	r0, #0
  40eee2:	f040 818b 	bne.w	40f1fc <__ssvfscanf_r+0x530>
  40eee6:	f8d8 1000 	ldr.w	r1, [r8]
  40eeea:	682b      	ldr	r3, [r5, #0]
  40eeec:	e000      	b.n	40eef0 <__ssvfscanf_r+0x224>
  40eeee:	602b      	str	r3, [r5, #0]
  40eef0:	781a      	ldrb	r2, [r3, #0]
  40eef2:	440a      	add	r2, r1
  40eef4:	3301      	adds	r3, #1
  40eef6:	7852      	ldrb	r2, [r2, #1]
  40eef8:	0712      	lsls	r2, r2, #28
  40eefa:	d5e1      	bpl.n	40eec0 <__ssvfscanf_r+0x1f4>
  40eefc:	686a      	ldr	r2, [r5, #4]
  40eefe:	3a01      	subs	r2, #1
  40ef00:	2a00      	cmp	r2, #0
  40ef02:	f109 0901 	add.w	r9, r9, #1
  40ef06:	606a      	str	r2, [r5, #4]
  40ef08:	dcf1      	bgt.n	40eeee <__ssvfscanf_r+0x222>
  40ef0a:	e7e5      	b.n	40eed8 <__ssvfscanf_r+0x20c>
  40ef0c:	1e63      	subs	r3, r4, #1
  40ef0e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40ef12:	bf86      	itte	hi
  40ef14:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  40ef18:	1863      	addhi	r3, r4, r1
  40ef1a:	2300      	movls	r3, #0
  40ef1c:	f04f 0b00 	mov.w	fp, #0
  40ef20:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40ef24:	9308      	str	r3, [sp, #32]
  40ef26:	465b      	mov	r3, fp
  40ef28:	46b3      	mov	fp, r6
  40ef2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ef2c:	f8cd c014 	str.w	ip, [sp, #20]
  40ef30:	46e2      	mov	sl, ip
  40ef32:	bf88      	it	hi
  40ef34:	f240 145d 	movwhi	r4, #349	; 0x15d
  40ef38:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  40ef3c:	46cc      	mov	ip, r9
  40ef3e:	6828      	ldr	r0, [r5, #0]
  40ef40:	7801      	ldrb	r1, [r0, #0]
  40ef42:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  40ef46:	2a4d      	cmp	r2, #77	; 0x4d
  40ef48:	f200 80e2 	bhi.w	40f110 <__ssvfscanf_r+0x444>
  40ef4c:	e8df f012 	tbh	[pc, r2, lsl #1]
  40ef50:	00e00126 	.word	0x00e00126
  40ef54:	00e00126 	.word	0x00e00126
  40ef58:	00fd00e0 	.word	0x00fd00e0
  40ef5c:	00cc00cc 	.word	0x00cc00cc
  40ef60:	00cc00cc 	.word	0x00cc00cc
  40ef64:	00cc00cc 	.word	0x00cc00cc
  40ef68:	013600cc 	.word	0x013600cc
  40ef6c:	00e00136 	.word	0x00e00136
  40ef70:	00e000e0 	.word	0x00e000e0
  40ef74:	00e000e0 	.word	0x00e000e0
  40ef78:	00e000e0 	.word	0x00e000e0
  40ef7c:	01210121 	.word	0x01210121
  40ef80:	01210121 	.word	0x01210121
  40ef84:	01210121 	.word	0x01210121
  40ef88:	00e000e0 	.word	0x00e000e0
  40ef8c:	00e000e0 	.word	0x00e000e0
  40ef90:	00e000e0 	.word	0x00e000e0
  40ef94:	00e000e0 	.word	0x00e000e0
  40ef98:	00e000e0 	.word	0x00e000e0
  40ef9c:	00e000e0 	.word	0x00e000e0
  40efa0:	00e000e0 	.word	0x00e000e0
  40efa4:	00e000e0 	.word	0x00e000e0
  40efa8:	012b00e0 	.word	0x012b00e0
  40efac:	00e000e0 	.word	0x00e000e0
  40efb0:	00e000e0 	.word	0x00e000e0
  40efb4:	00e000e0 	.word	0x00e000e0
  40efb8:	00e000e0 	.word	0x00e000e0
  40efbc:	01210121 	.word	0x01210121
  40efc0:	01210121 	.word	0x01210121
  40efc4:	01210121 	.word	0x01210121
  40efc8:	00e000e0 	.word	0x00e000e0
  40efcc:	00e000e0 	.word	0x00e000e0
  40efd0:	00e000e0 	.word	0x00e000e0
  40efd4:	00e000e0 	.word	0x00e000e0
  40efd8:	00e000e0 	.word	0x00e000e0
  40efdc:	00e000e0 	.word	0x00e000e0
  40efe0:	00e000e0 	.word	0x00e000e0
  40efe4:	00e000e0 	.word	0x00e000e0
  40efe8:	012b00e0 	.word	0x012b00e0
  40efec:	2c00      	cmp	r4, #0
  40efee:	bf08      	it	eq
  40eff0:	f04f 34ff 	moveq.w	r4, #4294967295
  40eff4:	f017 0301 	ands.w	r3, r7, #1
  40eff8:	f040 817f 	bne.w	40f2fa <__ssvfscanf_r+0x62e>
  40effc:	06f9      	lsls	r1, r7, #27
  40effe:	f140 8390 	bpl.w	40f722 <__ssvfscanf_r+0xa56>
  40f002:	461f      	mov	r7, r3
  40f004:	f8d8 1000 	ldr.w	r1, [r8]
  40f008:	682b      	ldr	r3, [r5, #0]
  40f00a:	781a      	ldrb	r2, [r3, #0]
  40f00c:	440a      	add	r2, r1
  40f00e:	3301      	adds	r3, #1
  40f010:	7852      	ldrb	r2, [r2, #1]
  40f012:	0712      	lsls	r2, r2, #28
  40f014:	d431      	bmi.n	40f07a <__ssvfscanf_r+0x3ae>
  40f016:	686a      	ldr	r2, [r5, #4]
  40f018:	602b      	str	r3, [r5, #0]
  40f01a:	3701      	adds	r7, #1
  40f01c:	3a01      	subs	r2, #1
  40f01e:	42bc      	cmp	r4, r7
  40f020:	606a      	str	r2, [r5, #4]
  40f022:	d02a      	beq.n	40f07a <__ssvfscanf_r+0x3ae>
  40f024:	2a00      	cmp	r2, #0
  40f026:	dcf0      	bgt.n	40f00a <__ssvfscanf_r+0x33e>
  40f028:	4630      	mov	r0, r6
  40f02a:	4629      	mov	r1, r5
  40f02c:	f005 fc6c 	bl	414908 <__ssrefill_r>
  40f030:	bb18      	cbnz	r0, 40f07a <__ssvfscanf_r+0x3ae>
  40f032:	f8d8 1000 	ldr.w	r1, [r8]
  40f036:	682b      	ldr	r3, [r5, #0]
  40f038:	e7e7      	b.n	40f00a <__ssvfscanf_r+0x33e>
  40f03a:	2c00      	cmp	r4, #0
  40f03c:	bf08      	it	eq
  40f03e:	2401      	moveq	r4, #1
  40f040:	f017 0301 	ands.w	r3, r7, #1
  40f044:	f040 839f 	bne.w	40f786 <__ssvfscanf_r+0xaba>
  40f048:	06f9      	lsls	r1, r7, #27
  40f04a:	f140 8454 	bpl.w	40f8f6 <__ssvfscanf_r+0xc2a>
  40f04e:	461f      	mov	r7, r3
  40f050:	e008      	b.n	40f064 <__ssvfscanf_r+0x398>
  40f052:	441a      	add	r2, r3
  40f054:	602a      	str	r2, [r5, #0]
  40f056:	441f      	add	r7, r3
  40f058:	1ae4      	subs	r4, r4, r3
  40f05a:	f005 fc55 	bl	414908 <__ssrefill_r>
  40f05e:	2800      	cmp	r0, #0
  40f060:	f040 8441 	bne.w	40f8e6 <__ssvfscanf_r+0xc1a>
  40f064:	686b      	ldr	r3, [r5, #4]
  40f066:	682a      	ldr	r2, [r5, #0]
  40f068:	42a3      	cmp	r3, r4
  40f06a:	4630      	mov	r0, r6
  40f06c:	4629      	mov	r1, r5
  40f06e:	dbf0      	blt.n	40f052 <__ssvfscanf_r+0x386>
  40f070:	1b1b      	subs	r3, r3, r4
  40f072:	4422      	add	r2, r4
  40f074:	606b      	str	r3, [r5, #4]
  40f076:	4427      	add	r7, r4
  40f078:	602a      	str	r2, [r5, #0]
  40f07a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f07e:	44b9      	add	r9, r7
  40f080:	4652      	mov	r2, sl
  40f082:	e664      	b.n	40ed4e <__ssvfscanf_r+0x82>
  40f084:	2c00      	cmp	r4, #0
  40f086:	bf08      	it	eq
  40f088:	f04f 34ff 	moveq.w	r4, #4294967295
  40f08c:	06fa      	lsls	r2, r7, #27
  40f08e:	f140 8315 	bpl.w	40f6bc <__ssvfscanf_r+0x9f0>
  40f092:	682b      	ldr	r3, [r5, #0]
  40f094:	2700      	movs	r7, #0
  40f096:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40f09a:	781a      	ldrb	r2, [r3, #0]
  40f09c:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40f0a0:	3301      	adds	r3, #1
  40f0a2:	b1aa      	cbz	r2, 40f0d0 <__ssvfscanf_r+0x404>
  40f0a4:	686a      	ldr	r2, [r5, #4]
  40f0a6:	602b      	str	r3, [r5, #0]
  40f0a8:	3701      	adds	r7, #1
  40f0aa:	3a01      	subs	r2, #1
  40f0ac:	42bc      	cmp	r4, r7
  40f0ae:	606a      	str	r2, [r5, #4]
  40f0b0:	d0e3      	beq.n	40f07a <__ssvfscanf_r+0x3ae>
  40f0b2:	2a00      	cmp	r2, #0
  40f0b4:	dcf1      	bgt.n	40f09a <__ssvfscanf_r+0x3ce>
  40f0b6:	4630      	mov	r0, r6
  40f0b8:	4629      	mov	r1, r5
  40f0ba:	f005 fc25 	bl	414908 <__ssrefill_r>
  40f0be:	2800      	cmp	r0, #0
  40f0c0:	d1db      	bne.n	40f07a <__ssvfscanf_r+0x3ae>
  40f0c2:	682b      	ldr	r3, [r5, #0]
  40f0c4:	781a      	ldrb	r2, [r3, #0]
  40f0c6:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40f0ca:	3301      	adds	r3, #1
  40f0cc:	2a00      	cmp	r2, #0
  40f0ce:	d1e9      	bne.n	40f0a4 <__ssvfscanf_r+0x3d8>
  40f0d0:	2f00      	cmp	r7, #0
  40f0d2:	f43f ae42 	beq.w	40ed5a <__ssvfscanf_r+0x8e>
  40f0d6:	44b9      	add	r9, r7
  40f0d8:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f0dc:	e7d0      	b.n	40f080 <__ssvfscanf_r+0x3b4>
  40f0de:	bf00      	nop
  40f0e0:	00414229 	.word	0x00414229
  40f0e4:	20000d2c 	.word	0x20000d2c
  40f0e8:	f8df 9364 	ldr.w	r9, [pc, #868]	; 40f450 <__ssvfscanf_r+0x784>
  40f0ec:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  40f0f0:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40f0f4:	686a      	ldr	r2, [r5, #4]
  40f0f6:	f88a 1000 	strb.w	r1, [sl]
  40f0fa:	3a01      	subs	r2, #1
  40f0fc:	2a00      	cmp	r2, #0
  40f0fe:	f10a 0a01 	add.w	sl, sl, #1
  40f102:	606a      	str	r2, [r5, #4]
  40f104:	dd38      	ble.n	40f178 <__ssvfscanf_r+0x4ac>
  40f106:	3001      	adds	r0, #1
  40f108:	6028      	str	r0, [r5, #0]
  40f10a:	3c01      	subs	r4, #1
  40f10c:	f47f af17 	bne.w	40ef3e <__ssvfscanf_r+0x272>
  40f110:	05f9      	lsls	r1, r7, #23
  40f112:	960c      	str	r6, [sp, #48]	; 0x30
  40f114:	46e1      	mov	r9, ip
  40f116:	465e      	mov	r6, fp
  40f118:	469b      	mov	fp, r3
  40f11a:	d508      	bpl.n	40f12e <__ssvfscanf_r+0x462>
  40f11c:	9c05      	ldr	r4, [sp, #20]
  40f11e:	45a2      	cmp	sl, r4
  40f120:	f200 840a 	bhi.w	40f938 <__ssvfscanf_r+0xc6c>
  40f124:	f8dd c014 	ldr.w	ip, [sp, #20]
  40f128:	45e2      	cmp	sl, ip
  40f12a:	f43f ae16 	beq.w	40ed5a <__ssvfscanf_r+0x8e>
  40f12e:	f017 0410 	ands.w	r4, r7, #16
  40f132:	f000 8372 	beq.w	40f81a <__ssvfscanf_r+0xb4e>
  40f136:	f8dd c014 	ldr.w	ip, [sp, #20]
  40f13a:	ebcc 0a0a 	rsb	sl, ip, sl
  40f13e:	44d3      	add	fp, sl
  40f140:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f144:	44d9      	add	r9, fp
  40f146:	4652      	mov	r2, sl
  40f148:	e601      	b.n	40ed4e <__ssvfscanf_r+0x82>
  40f14a:	053a      	lsls	r2, r7, #20
  40f14c:	d5d2      	bpl.n	40f0f4 <__ssvfscanf_r+0x428>
  40f14e:	b916      	cbnz	r6, 40f156 <__ssvfscanf_r+0x48a>
  40f150:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40f154:	2608      	movs	r6, #8
  40f156:	057a      	lsls	r2, r7, #21
  40f158:	f100 837d 	bmi.w	40f856 <__ssvfscanf_r+0xb8a>
  40f15c:	9a08      	ldr	r2, [sp, #32]
  40f15e:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  40f162:	b112      	cbz	r2, 40f16a <__ssvfscanf_r+0x49e>
  40f164:	3a01      	subs	r2, #1
  40f166:	9208      	str	r2, [sp, #32]
  40f168:	3401      	adds	r4, #1
  40f16a:	686a      	ldr	r2, [r5, #4]
  40f16c:	3a01      	subs	r2, #1
  40f16e:	2a00      	cmp	r2, #0
  40f170:	f103 0301 	add.w	r3, r3, #1
  40f174:	606a      	str	r2, [r5, #4]
  40f176:	dcc6      	bgt.n	40f106 <__ssvfscanf_r+0x43a>
  40f178:	4658      	mov	r0, fp
  40f17a:	4629      	mov	r1, r5
  40f17c:	9303      	str	r3, [sp, #12]
  40f17e:	f8cd c010 	str.w	ip, [sp, #16]
  40f182:	f005 fbc1 	bl	414908 <__ssrefill_r>
  40f186:	9b03      	ldr	r3, [sp, #12]
  40f188:	f8dd c010 	ldr.w	ip, [sp, #16]
  40f18c:	2800      	cmp	r0, #0
  40f18e:	d0bc      	beq.n	40f10a <__ssvfscanf_r+0x43e>
  40f190:	e7be      	b.n	40f110 <__ssvfscanf_r+0x444>
  40f192:	2e0a      	cmp	r6, #10
  40f194:	ddbc      	ble.n	40f110 <__ssvfscanf_r+0x444>
  40f196:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40f19a:	e7ab      	b.n	40f0f4 <__ssvfscanf_r+0x428>
  40f19c:	063a      	lsls	r2, r7, #24
  40f19e:	d5b7      	bpl.n	40f110 <__ssvfscanf_r+0x444>
  40f1a0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40f1a4:	e7a6      	b.n	40f0f4 <__ssvfscanf_r+0x428>
  40f1a6:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  40f1aa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40f1ae:	d1af      	bne.n	40f110 <__ssvfscanf_r+0x444>
  40f1b0:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40f1b4:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  40f1b8:	2610      	movs	r6, #16
  40f1ba:	e79b      	b.n	40f0f4 <__ssvfscanf_r+0x428>
  40f1bc:	4aa4      	ldr	r2, [pc, #656]	; (40f450 <__ssvfscanf_r+0x784>)
  40f1be:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  40f1c2:	2e08      	cmp	r6, #8
  40f1c4:	dce7      	bgt.n	40f196 <__ssvfscanf_r+0x4ca>
  40f1c6:	e7a3      	b.n	40f110 <__ssvfscanf_r+0x444>
  40f1c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f1cc:	f047 0710 	orr.w	r7, r7, #16
  40f1d0:	4692      	mov	sl, r2
  40f1d2:	e5cc      	b.n	40ed6e <__ssvfscanf_r+0xa2>
  40f1d4:	9207      	str	r2, [sp, #28]
  40f1d6:	f047 0701 	orr.w	r7, r7, #1
  40f1da:	686b      	ldr	r3, [r5, #4]
  40f1dc:	489d      	ldr	r0, [pc, #628]	; (40f454 <__ssvfscanf_r+0x788>)
  40f1de:	9009      	str	r0, [sp, #36]	; 0x24
  40f1e0:	210a      	movs	r1, #10
  40f1e2:	2b00      	cmp	r3, #0
  40f1e4:	910c      	str	r1, [sp, #48]	; 0x30
  40f1e6:	f04f 0a03 	mov.w	sl, #3
  40f1ea:	f73f ae67 	bgt.w	40eebc <__ssvfscanf_r+0x1f0>
  40f1ee:	4630      	mov	r0, r6
  40f1f0:	4629      	mov	r1, r5
  40f1f2:	f005 fb89 	bl	414908 <__ssrefill_r>
  40f1f6:	2800      	cmp	r0, #0
  40f1f8:	f43f ae60 	beq.w	40eebc <__ssvfscanf_r+0x1f0>
  40f1fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f1fe:	2c00      	cmp	r4, #0
  40f200:	f43f ae4b 	beq.w	40ee9a <__ssvfscanf_r+0x1ce>
  40f204:	89ab      	ldrh	r3, [r5, #12]
  40f206:	4620      	mov	r0, r4
  40f208:	f013 0f40 	tst.w	r3, #64	; 0x40
  40f20c:	bf18      	it	ne
  40f20e:	f04f 30ff 	movne.w	r0, #4294967295
  40f212:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40f216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f21a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40f21e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40f222:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  40f226:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f22a:	4692      	mov	sl, r2
  40f22c:	e59f      	b.n	40ed6e <__ssvfscanf_r+0xa2>
  40f22e:	9207      	str	r2, [sp, #28]
  40f230:	2310      	movs	r3, #16
  40f232:	4a89      	ldr	r2, [pc, #548]	; (40f458 <__ssvfscanf_r+0x78c>)
  40f234:	9209      	str	r2, [sp, #36]	; 0x24
  40f236:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40f23a:	930c      	str	r3, [sp, #48]	; 0x30
  40f23c:	f04f 0a03 	mov.w	sl, #3
  40f240:	e638      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f242:	9207      	str	r2, [sp, #28]
  40f244:	f047 0701 	orr.w	r7, r7, #1
  40f248:	4a83      	ldr	r2, [pc, #524]	; (40f458 <__ssvfscanf_r+0x78c>)
  40f24a:	9209      	str	r2, [sp, #36]	; 0x24
  40f24c:	2308      	movs	r3, #8
  40f24e:	930c      	str	r3, [sp, #48]	; 0x30
  40f250:	f04f 0a03 	mov.w	sl, #3
  40f254:	e62e      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f256:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f25a:	f047 0702 	orr.w	r7, r7, #2
  40f25e:	4692      	mov	sl, r2
  40f260:	e585      	b.n	40ed6e <__ssvfscanf_r+0xa2>
  40f262:	9207      	str	r2, [sp, #28]
  40f264:	f04f 0a04 	mov.w	sl, #4
  40f268:	e624      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f26a:	9207      	str	r2, [sp, #28]
  40f26c:	e7ec      	b.n	40f248 <__ssvfscanf_r+0x57c>
  40f26e:	06f9      	lsls	r1, r7, #27
  40f270:	9207      	str	r2, [sp, #28]
  40f272:	d462      	bmi.n	40f33a <__ssvfscanf_r+0x66e>
  40f274:	077b      	lsls	r3, r7, #29
  40f276:	f140 8381 	bpl.w	40f97c <__ssvfscanf_r+0xcb0>
  40f27a:	9c06      	ldr	r4, [sp, #24]
  40f27c:	6823      	ldr	r3, [r4, #0]
  40f27e:	3404      	adds	r4, #4
  40f280:	4692      	mov	sl, r2
  40f282:	f8a3 9000 	strh.w	r9, [r3]
  40f286:	9406      	str	r4, [sp, #24]
  40f288:	e560      	b.n	40ed4c <__ssvfscanf_r+0x80>
  40f28a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f28e:	f047 0704 	orr.w	r7, r7, #4
  40f292:	4692      	mov	sl, r2
  40f294:	e56b      	b.n	40ed6e <__ssvfscanf_r+0xa2>
  40f296:	9207      	str	r2, [sp, #28]
  40f298:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40f29c:	f04f 0a00 	mov.w	sl, #0
  40f2a0:	e608      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f2a2:	4611      	mov	r1, r2
  40f2a4:	a816      	add	r0, sp, #88	; 0x58
  40f2a6:	9207      	str	r2, [sp, #28]
  40f2a8:	f003 ffc0 	bl	41322c <__sccl>
  40f2ac:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40f2b0:	9007      	str	r0, [sp, #28]
  40f2b2:	f04f 0a01 	mov.w	sl, #1
  40f2b6:	e5fd      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f2b8:	9207      	str	r2, [sp, #28]
  40f2ba:	e78e      	b.n	40f1da <__ssvfscanf_r+0x50e>
  40f2bc:	4866      	ldr	r0, [pc, #408]	; (40f458 <__ssvfscanf_r+0x78c>)
  40f2be:	9207      	str	r2, [sp, #28]
  40f2c0:	210a      	movs	r1, #10
  40f2c2:	9009      	str	r0, [sp, #36]	; 0x24
  40f2c4:	910c      	str	r1, [sp, #48]	; 0x30
  40f2c6:	f04f 0a03 	mov.w	sl, #3
  40f2ca:	e5f3      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f2cc:	9207      	str	r2, [sp, #28]
  40f2ce:	f04f 0a02 	mov.w	sl, #2
  40f2d2:	e5ef      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f2d4:	4860      	ldr	r0, [pc, #384]	; (40f458 <__ssvfscanf_r+0x78c>)
  40f2d6:	9207      	str	r2, [sp, #28]
  40f2d8:	2110      	movs	r1, #16
  40f2da:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40f2de:	9009      	str	r0, [sp, #36]	; 0x24
  40f2e0:	910c      	str	r1, [sp, #48]	; 0x30
  40f2e2:	f04f 0a03 	mov.w	sl, #3
  40f2e6:	e5e5      	b.n	40eeb4 <__ssvfscanf_r+0x1e8>
  40f2e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f2ec:	2b6c      	cmp	r3, #108	; 0x6c
  40f2ee:	f000 8336 	beq.w	40f95e <__ssvfscanf_r+0xc92>
  40f2f2:	f047 0701 	orr.w	r7, r7, #1
  40f2f6:	4692      	mov	sl, r2
  40f2f8:	e539      	b.n	40ed6e <__ssvfscanf_r+0xa2>
  40f2fa:	a814      	add	r0, sp, #80	; 0x50
  40f2fc:	2100      	movs	r1, #0
  40f2fe:	2208      	movs	r2, #8
  40f300:	900a      	str	r0, [sp, #40]	; 0x28
  40f302:	f7fd fe67 	bl	40cfd4 <memset>
  40f306:	f017 0b10 	ands.w	fp, r7, #16
  40f30a:	f000 82bd 	beq.w	40f888 <__ssvfscanf_r+0xbbc>
  40f30e:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  40f312:	2200      	movs	r2, #0
  40f314:	6829      	ldr	r1, [r5, #0]
  40f316:	f8d8 3000 	ldr.w	r3, [r8]
  40f31a:	7809      	ldrb	r1, [r1, #0]
  40f31c:	440b      	add	r3, r1
  40f31e:	785b      	ldrb	r3, [r3, #1]
  40f320:	0718      	lsls	r0, r3, #28
  40f322:	d402      	bmi.n	40f32a <__ssvfscanf_r+0x65e>
  40f324:	2c00      	cmp	r4, #0
  40f326:	f040 8372 	bne.w	40fa0e <__ssvfscanf_r+0xd42>
  40f32a:	f1bb 0f00 	cmp.w	fp, #0
  40f32e:	d104      	bne.n	40f33a <__ssvfscanf_r+0x66e>
  40f330:	f8ca b000 	str.w	fp, [sl]
  40f334:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f336:	3401      	adds	r4, #1
  40f338:	940b      	str	r4, [sp, #44]	; 0x2c
  40f33a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f33e:	4652      	mov	r2, sl
  40f340:	e505      	b.n	40ed4e <__ssvfscanf_r+0x82>
  40f342:	440b      	add	r3, r1
  40f344:	9207      	str	r2, [sp, #28]
  40f346:	785b      	ldrb	r3, [r3, #1]
  40f348:	f003 0303 	and.w	r3, r3, #3
  40f34c:	2b01      	cmp	r3, #1
  40f34e:	f47f af44 	bne.w	40f1da <__ssvfscanf_r+0x50e>
  40f352:	f047 0701 	orr.w	r7, r7, #1
  40f356:	e740      	b.n	40f1da <__ssvfscanf_r+0x50e>
  40f358:	4630      	mov	r0, r6
  40f35a:	f002 ff85 	bl	412268 <_localeconv_r>
  40f35e:	1e63      	subs	r3, r4, #1
  40f360:	6800      	ldr	r0, [r0, #0]
  40f362:	900f      	str	r0, [sp, #60]	; 0x3c
  40f364:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40f368:	f240 81a5 	bls.w	40f6b6 <__ssvfscanf_r+0x9ea>
  40f36c:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  40f370:	4404      	add	r4, r0
  40f372:	940d      	str	r4, [sp, #52]	; 0x34
  40f374:	f240 145d 	movw	r4, #349	; 0x15d
  40f378:	f04f 0a00 	mov.w	sl, #0
  40f37c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40f380:	960e      	str	r6, [sp, #56]	; 0x38
  40f382:	f8cd c014 	str.w	ip, [sp, #20]
  40f386:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  40f38a:	4653      	mov	r3, sl
  40f38c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40f390:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40f394:	f8cd a020 	str.w	sl, [sp, #32]
  40f398:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40f39c:	46e3      	mov	fp, ip
  40f39e:	4656      	mov	r6, sl
  40f3a0:	6828      	ldr	r0, [r5, #0]
  40f3a2:	7802      	ldrb	r2, [r0, #0]
  40f3a4:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  40f3a8:	294e      	cmp	r1, #78	; 0x4e
  40f3aa:	f200 8156 	bhi.w	40f65a <__ssvfscanf_r+0x98e>
  40f3ae:	e8df f011 	tbh	[pc, r1, lsl #1]
  40f3b2:	007e      	.short	0x007e
  40f3b4:	007e0154 	.word	0x007e0154
  40f3b8:	01540154 	.word	0x01540154
  40f3bc:	00550072 	.word	0x00550072
  40f3c0:	00550055 	.word	0x00550055
  40f3c4:	00550055 	.word	0x00550055
  40f3c8:	00550055 	.word	0x00550055
  40f3cc:	00550055 	.word	0x00550055
  40f3d0:	01540154 	.word	0x01540154
  40f3d4:	01540154 	.word	0x01540154
  40f3d8:	01540154 	.word	0x01540154
  40f3dc:	014f0154 	.word	0x014f0154
  40f3e0:	01540154 	.word	0x01540154
  40f3e4:	01350154 	.word	0x01350154
  40f3e8:	0154012e 	.word	0x0154012e
  40f3ec:	00a40154 	.word	0x00a40154
  40f3f0:	01540154 	.word	0x01540154
  40f3f4:	01540154 	.word	0x01540154
  40f3f8:	0154008f 	.word	0x0154008f
  40f3fc:	01540154 	.word	0x01540154
  40f400:	01540154 	.word	0x01540154
  40f404:	01540089 	.word	0x01540089
  40f408:	01540154 	.word	0x01540154
  40f40c:	00830154 	.word	0x00830154
  40f410:	01540154 	.word	0x01540154
  40f414:	01540154 	.word	0x01540154
  40f418:	01540154 	.word	0x01540154
  40f41c:	014f0154 	.word	0x014f0154
  40f420:	01540154 	.word	0x01540154
  40f424:	01350154 	.word	0x01350154
  40f428:	0154012e 	.word	0x0154012e
  40f42c:	00a40154 	.word	0x00a40154
  40f430:	01540154 	.word	0x01540154
  40f434:	01540154 	.word	0x01540154
  40f438:	0154008f 	.word	0x0154008f
  40f43c:	01540154 	.word	0x01540154
  40f440:	01540154 	.word	0x01540154
  40f444:	01540089 	.word	0x01540089
  40f448:	01540154 	.word	0x01540154
  40f44c:	00830154 	.word	0x00830154
  40f450:	00416e18 	.word	0x00416e18
  40f454:	00414229 	.word	0x00414229
  40f458:	004144d9 	.word	0x004144d9
  40f45c:	eb03 010a 	add.w	r1, r3, sl
  40f460:	b999      	cbnz	r1, 40f48a <__ssvfscanf_r+0x7be>
  40f462:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  40f466:	f88b 2000 	strb.w	r2, [fp]
  40f46a:	f10b 0b01 	add.w	fp, fp, #1
  40f46e:	686a      	ldr	r2, [r5, #4]
  40f470:	3a01      	subs	r2, #1
  40f472:	2a00      	cmp	r2, #0
  40f474:	f104 34ff 	add.w	r4, r4, #4294967295
  40f478:	f109 0901 	add.w	r9, r9, #1
  40f47c:	606a      	str	r2, [r5, #4]
  40f47e:	f340 80fa 	ble.w	40f676 <__ssvfscanf_r+0x9aa>
  40f482:	3001      	adds	r0, #1
  40f484:	6028      	str	r0, [r5, #0]
  40f486:	2c00      	cmp	r4, #0
  40f488:	d18a      	bne.n	40f3a0 <__ssvfscanf_r+0x6d4>
  40f48a:	9608      	str	r6, [sp, #32]
  40f48c:	9c08      	ldr	r4, [sp, #32]
  40f48e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40f490:	2c00      	cmp	r4, #0
  40f492:	d041      	beq.n	40f518 <__ssvfscanf_r+0x84c>
  40f494:	e10c      	b.n	40f6b0 <__ssvfscanf_r+0x9e4>
  40f496:	05f9      	lsls	r1, r7, #23
  40f498:	d5e0      	bpl.n	40f45c <__ssvfscanf_r+0x790>
  40f49a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40f49c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40f4a0:	3601      	adds	r6, #1
  40f4a2:	2a00      	cmp	r2, #0
  40f4a4:	d0e3      	beq.n	40f46e <__ssvfscanf_r+0x7a2>
  40f4a6:	3a01      	subs	r2, #1
  40f4a8:	920d      	str	r2, [sp, #52]	; 0x34
  40f4aa:	3401      	adds	r4, #1
  40f4ac:	e7df      	b.n	40f46e <__ssvfscanf_r+0x7a2>
  40f4ae:	0639      	lsls	r1, r7, #24
  40f4b0:	d5eb      	bpl.n	40f48a <__ssvfscanf_r+0x7be>
  40f4b2:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40f4b6:	e7d6      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f4b8:	f1ba 0f07 	cmp.w	sl, #7
  40f4bc:	d1e5      	bne.n	40f48a <__ssvfscanf_r+0x7be>
  40f4be:	f04f 0a08 	mov.w	sl, #8
  40f4c2:	e7d0      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f4c4:	f1ba 0f06 	cmp.w	sl, #6
  40f4c8:	d1df      	bne.n	40f48a <__ssvfscanf_r+0x7be>
  40f4ca:	f04f 0a07 	mov.w	sl, #7
  40f4ce:	e7ca      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f4d0:	2b00      	cmp	r3, #0
  40f4d2:	f040 80e6 	bne.w	40f6a2 <__ssvfscanf_r+0x9d6>
  40f4d6:	b92e      	cbnz	r6, 40f4e4 <__ssvfscanf_r+0x818>
  40f4d8:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40f4dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40f4e0:	f000 8239 	beq.w	40f956 <__ssvfscanf_r+0xc8a>
  40f4e4:	f1ba 0f01 	cmp.w	sl, #1
  40f4e8:	d002      	beq.n	40f4f0 <__ssvfscanf_r+0x824>
  40f4ea:	f1ba 0f04 	cmp.w	sl, #4
  40f4ee:	d1cc      	bne.n	40f48a <__ssvfscanf_r+0x7be>
  40f4f0:	f10a 0a01 	add.w	sl, sl, #1
  40f4f4:	fa5f fa8a 	uxtb.w	sl, sl
  40f4f8:	e7b5      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f4fa:	f1ba 0f00 	cmp.w	sl, #0
  40f4fe:	f040 80c7 	bne.w	40f690 <__ssvfscanf_r+0x9c4>
  40f502:	2e00      	cmp	r6, #0
  40f504:	f040 80d2 	bne.w	40f6ac <__ssvfscanf_r+0x9e0>
  40f508:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40f50c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40f510:	f000 821c 	beq.w	40f94c <__ssvfscanf_r+0xc80>
  40f514:	9608      	str	r6, [sp, #32]
  40f516:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40f518:	f103 3cff 	add.w	ip, r3, #4294967295
  40f51c:	f1bc 0f01 	cmp.w	ip, #1
  40f520:	f240 82dc 	bls.w	40fadc <__ssvfscanf_r+0xe10>
  40f524:	f10a 32ff 	add.w	r2, sl, #4294967295
  40f528:	2a06      	cmp	r2, #6
  40f52a:	d822      	bhi.n	40f572 <__ssvfscanf_r+0x8a6>
  40f52c:	f1ba 0f02 	cmp.w	sl, #2
  40f530:	f240 82ad 	bls.w	40fa8e <__ssvfscanf_r+0xdc2>
  40f534:	f1ba 0f03 	cmp.w	sl, #3
  40f538:	d01b      	beq.n	40f572 <__ssvfscanf_r+0x8a6>
  40f53a:	f1aa 0a04 	sub.w	sl, sl, #4
  40f53e:	fa5f fa8a 	uxtb.w	sl, sl
  40f542:	f10b 34ff 	add.w	r4, fp, #4294967295
  40f546:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40f54a:	ebca 0404 	rsb	r4, sl, r4
  40f54e:	46da      	mov	sl, fp
  40f550:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  40f554:	4630      	mov	r0, r6
  40f556:	462a      	mov	r2, r5
  40f558:	f005 f996 	bl	414888 <_sungetc_r>
  40f55c:	45a2      	cmp	sl, r4
  40f55e:	d1f7      	bne.n	40f550 <__ssvfscanf_r+0x884>
  40f560:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40f564:	f109 39ff 	add.w	r9, r9, #4294967295
  40f568:	ea6f 020c 	mvn.w	r2, ip
  40f56c:	ebcc 0909 	rsb	r9, ip, r9
  40f570:	4493      	add	fp, r2
  40f572:	05f8      	lsls	r0, r7, #23
  40f574:	d51c      	bpl.n	40f5b0 <__ssvfscanf_r+0x8e4>
  40f576:	0579      	lsls	r1, r7, #21
  40f578:	f100 829b 	bmi.w	40fab2 <__ssvfscanf_r+0xde6>
  40f57c:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  40f580:	2965      	cmp	r1, #101	; 0x65
  40f582:	f10b 34ff 	add.w	r4, fp, #4294967295
  40f586:	f109 3aff 	add.w	sl, r9, #4294967295
  40f58a:	d00b      	beq.n	40f5a4 <__ssvfscanf_r+0x8d8>
  40f58c:	2945      	cmp	r1, #69	; 0x45
  40f58e:	d009      	beq.n	40f5a4 <__ssvfscanf_r+0x8d8>
  40f590:	4630      	mov	r0, r6
  40f592:	462a      	mov	r2, r5
  40f594:	f005 f978 	bl	414888 <_sungetc_r>
  40f598:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  40f59c:	f1a9 0a02 	sub.w	sl, r9, #2
  40f5a0:	f1ab 0402 	sub.w	r4, fp, #2
  40f5a4:	4630      	mov	r0, r6
  40f5a6:	462a      	mov	r2, r5
  40f5a8:	f005 f96e 	bl	414888 <_sungetc_r>
  40f5ac:	46d1      	mov	r9, sl
  40f5ae:	46a3      	mov	fp, r4
  40f5b0:	f017 0210 	ands.w	r2, r7, #16
  40f5b4:	f47f aec1 	bne.w	40f33a <__ssvfscanf_r+0x66e>
  40f5b8:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  40f5bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40f5c0:	f88b 2000 	strb.w	r2, [fp]
  40f5c4:	f000 81d3 	beq.w	40f96e <__ssvfscanf_r+0xca2>
  40f5c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40f5ca:	2c00      	cmp	r4, #0
  40f5cc:	f040 816e 	bne.w	40f8ac <__ssvfscanf_r+0xbe0>
  40f5d0:	2200      	movs	r2, #0
  40f5d2:	9905      	ldr	r1, [sp, #20]
  40f5d4:	4630      	mov	r0, r6
  40f5d6:	f003 fe87 	bl	4132e8 <_strtod_r>
  40f5da:	07fa      	lsls	r2, r7, #31
  40f5dc:	4682      	mov	sl, r0
  40f5de:	468b      	mov	fp, r1
  40f5e0:	f100 8132 	bmi.w	40f848 <__ssvfscanf_r+0xb7c>
  40f5e4:	07bb      	lsls	r3, r7, #30
  40f5e6:	f140 81e8 	bpl.w	40f9ba <__ssvfscanf_r+0xcee>
  40f5ea:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f5ee:	f8dc 3000 	ldr.w	r3, [ip]
  40f5f2:	f10c 0c04 	add.w	ip, ip, #4
  40f5f6:	f8cd c018 	str.w	ip, [sp, #24]
  40f5fa:	e9c3 ab00 	strd	sl, fp, [r3]
  40f5fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f600:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f604:	3401      	adds	r4, #1
  40f606:	940b      	str	r4, [sp, #44]	; 0x2c
  40f608:	4652      	mov	r2, sl
  40f60a:	f7ff bba0 	b.w	40ed4e <__ssvfscanf_r+0x82>
  40f60e:	f1ba 0f02 	cmp.w	sl, #2
  40f612:	f47f af3a 	bne.w	40f48a <__ssvfscanf_r+0x7be>
  40f616:	f04f 0a03 	mov.w	sl, #3
  40f61a:	e724      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f61c:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  40f620:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40f624:	d005      	beq.n	40f632 <__ssvfscanf_r+0x966>
  40f626:	0579      	lsls	r1, r7, #21
  40f628:	f57f af2f 	bpl.w	40f48a <__ssvfscanf_r+0x7be>
  40f62c:	2e00      	cmp	r6, #0
  40f62e:	f43f af71 	beq.w	40f514 <__ssvfscanf_r+0x848>
  40f632:	05b9      	lsls	r1, r7, #22
  40f634:	d406      	bmi.n	40f644 <__ssvfscanf_r+0x978>
  40f636:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40f63a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40f63e:	ebcc 0606 	rsb	r6, ip, r6
  40f642:	9610      	str	r6, [sp, #64]	; 0x40
  40f644:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40f648:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40f64c:	2600      	movs	r6, #0
  40f64e:	e70a      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f650:	2b01      	cmp	r3, #1
  40f652:	f47f af1a 	bne.w	40f48a <__ssvfscanf_r+0x7be>
  40f656:	2302      	movs	r3, #2
  40f658:	e705      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f65a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40f65e:	f89c 1000 	ldrb.w	r1, [ip]
  40f662:	4291      	cmp	r1, r2
  40f664:	f47f af11 	bne.w	40f48a <__ssvfscanf_r+0x7be>
  40f668:	05b9      	lsls	r1, r7, #22
  40f66a:	f57f af0e 	bpl.w	40f48a <__ssvfscanf_r+0x7be>
  40f66e:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  40f672:	960a      	str	r6, [sp, #40]	; 0x28
  40f674:	e6f7      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f676:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f678:	9303      	str	r3, [sp, #12]
  40f67a:	4629      	mov	r1, r5
  40f67c:	f005 f944 	bl	414908 <__ssrefill_r>
  40f680:	9b03      	ldr	r3, [sp, #12]
  40f682:	2800      	cmp	r0, #0
  40f684:	f47f af01 	bne.w	40f48a <__ssvfscanf_r+0x7be>
  40f688:	2c00      	cmp	r4, #0
  40f68a:	f47f ae89 	bne.w	40f3a0 <__ssvfscanf_r+0x6d4>
  40f68e:	e6fc      	b.n	40f48a <__ssvfscanf_r+0x7be>
  40f690:	f1ba 0f03 	cmp.w	sl, #3
  40f694:	f43f af2c 	beq.w	40f4f0 <__ssvfscanf_r+0x824>
  40f698:	f1ba 0f05 	cmp.w	sl, #5
  40f69c:	f43f af28 	beq.w	40f4f0 <__ssvfscanf_r+0x824>
  40f6a0:	e6f3      	b.n	40f48a <__ssvfscanf_r+0x7be>
  40f6a2:	2b02      	cmp	r3, #2
  40f6a4:	f47f af1e 	bne.w	40f4e4 <__ssvfscanf_r+0x818>
  40f6a8:	2303      	movs	r3, #3
  40f6aa:	e6dc      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f6ac:	9608      	str	r6, [sp, #32]
  40f6ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40f6b0:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  40f6b4:	e730      	b.n	40f518 <__ssvfscanf_r+0x84c>
  40f6b6:	2200      	movs	r2, #0
  40f6b8:	920d      	str	r2, [sp, #52]	; 0x34
  40f6ba:	e65d      	b.n	40f378 <__ssvfscanf_r+0x6ac>
  40f6bc:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f6c0:	f8dc 7000 	ldr.w	r7, [ip]
  40f6c4:	f10c 0204 	add.w	r2, ip, #4
  40f6c8:	9206      	str	r2, [sp, #24]
  40f6ca:	46ba      	mov	sl, r7
  40f6cc:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40f6d0:	682b      	ldr	r3, [r5, #0]
  40f6d2:	781a      	ldrb	r2, [r3, #0]
  40f6d4:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40f6d8:	1c59      	adds	r1, r3, #1
  40f6da:	b1a2      	cbz	r2, 40f706 <__ssvfscanf_r+0xa3a>
  40f6dc:	686a      	ldr	r2, [r5, #4]
  40f6de:	6029      	str	r1, [r5, #0]
  40f6e0:	3a01      	subs	r2, #1
  40f6e2:	606a      	str	r2, [r5, #4]
  40f6e4:	781b      	ldrb	r3, [r3, #0]
  40f6e6:	f80a 3b01 	strb.w	r3, [sl], #1
  40f6ea:	3c01      	subs	r4, #1
  40f6ec:	d00b      	beq.n	40f706 <__ssvfscanf_r+0xa3a>
  40f6ee:	686b      	ldr	r3, [r5, #4]
  40f6f0:	2b00      	cmp	r3, #0
  40f6f2:	dced      	bgt.n	40f6d0 <__ssvfscanf_r+0xa04>
  40f6f4:	4630      	mov	r0, r6
  40f6f6:	4629      	mov	r1, r5
  40f6f8:	f005 f906 	bl	414908 <__ssrefill_r>
  40f6fc:	2800      	cmp	r0, #0
  40f6fe:	d0e7      	beq.n	40f6d0 <__ssvfscanf_r+0xa04>
  40f700:	4557      	cmp	r7, sl
  40f702:	f43f ad7b 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40f706:	ebba 0707 	subs.w	r7, sl, r7
  40f70a:	f43f ab26 	beq.w	40ed5a <__ssvfscanf_r+0x8e>
  40f70e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f710:	2300      	movs	r3, #0
  40f712:	3401      	adds	r4, #1
  40f714:	f88a 3000 	strb.w	r3, [sl]
  40f718:	940b      	str	r4, [sp, #44]	; 0x2c
  40f71a:	44b9      	add	r9, r7
  40f71c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f720:	e4ae      	b.n	40f080 <__ssvfscanf_r+0x3b4>
  40f722:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f726:	f8dc 7000 	ldr.w	r7, [ip]
  40f72a:	f10c 0a04 	add.w	sl, ip, #4
  40f72e:	46bb      	mov	fp, r7
  40f730:	682b      	ldr	r3, [r5, #0]
  40f732:	f8d8 2000 	ldr.w	r2, [r8]
  40f736:	7819      	ldrb	r1, [r3, #0]
  40f738:	440a      	add	r2, r1
  40f73a:	1c59      	adds	r1, r3, #1
  40f73c:	7852      	ldrb	r2, [r2, #1]
  40f73e:	0710      	lsls	r0, r2, #28
  40f740:	d411      	bmi.n	40f766 <__ssvfscanf_r+0xa9a>
  40f742:	686a      	ldr	r2, [r5, #4]
  40f744:	6029      	str	r1, [r5, #0]
  40f746:	3a01      	subs	r2, #1
  40f748:	606a      	str	r2, [r5, #4]
  40f74a:	781b      	ldrb	r3, [r3, #0]
  40f74c:	f80b 3b01 	strb.w	r3, [fp], #1
  40f750:	3c01      	subs	r4, #1
  40f752:	d008      	beq.n	40f766 <__ssvfscanf_r+0xa9a>
  40f754:	686b      	ldr	r3, [r5, #4]
  40f756:	2b00      	cmp	r3, #0
  40f758:	dcea      	bgt.n	40f730 <__ssvfscanf_r+0xa64>
  40f75a:	4630      	mov	r0, r6
  40f75c:	4629      	mov	r1, r5
  40f75e:	f005 f8d3 	bl	414908 <__ssrefill_r>
  40f762:	2800      	cmp	r0, #0
  40f764:	d0e4      	beq.n	40f730 <__ssvfscanf_r+0xa64>
  40f766:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f768:	f8cd a018 	str.w	sl, [sp, #24]
  40f76c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f770:	ebc7 070b 	rsb	r7, r7, fp
  40f774:	2300      	movs	r3, #0
  40f776:	3401      	adds	r4, #1
  40f778:	44b9      	add	r9, r7
  40f77a:	940b      	str	r4, [sp, #44]	; 0x2c
  40f77c:	f88b 3000 	strb.w	r3, [fp]
  40f780:	4652      	mov	r2, sl
  40f782:	f7ff bae4 	b.w	40ed4e <__ssvfscanf_r+0x82>
  40f786:	ab14      	add	r3, sp, #80	; 0x50
  40f788:	4618      	mov	r0, r3
  40f78a:	2100      	movs	r1, #0
  40f78c:	2208      	movs	r2, #8
  40f78e:	930a      	str	r3, [sp, #40]	; 0x28
  40f790:	f7fd fc20 	bl	40cfd4 <memset>
  40f794:	f017 0710 	ands.w	r7, r7, #16
  40f798:	970d      	str	r7, [sp, #52]	; 0x34
  40f79a:	d06c      	beq.n	40f876 <__ssvfscanf_r+0xbaa>
  40f79c:	f04f 0a00 	mov.w	sl, #0
  40f7a0:	9608      	str	r6, [sp, #32]
  40f7a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40f7a4:	f8cd 9014 	str.w	r9, [sp, #20]
  40f7a8:	f04f 0b00 	mov.w	fp, #0
  40f7ac:	af56      	add	r7, sp, #344	; 0x158
  40f7ae:	f002 fd55 	bl	41225c <__locale_mb_cur_max>
  40f7b2:	4558      	cmp	r0, fp
  40f7b4:	f43f ad22 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40f7b8:	682b      	ldr	r3, [r5, #0]
  40f7ba:	6869      	ldr	r1, [r5, #4]
  40f7bc:	f813 eb01 	ldrb.w	lr, [r3], #1
  40f7c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f7c2:	602b      	str	r3, [r5, #0]
  40f7c4:	3901      	subs	r1, #1
  40f7c6:	f10b 0901 	add.w	r9, fp, #1
  40f7ca:	9000      	str	r0, [sp, #0]
  40f7cc:	464b      	mov	r3, r9
  40f7ce:	6069      	str	r1, [r5, #4]
  40f7d0:	9808      	ldr	r0, [sp, #32]
  40f7d2:	f807 e00b 	strb.w	lr, [r7, fp]
  40f7d6:	4651      	mov	r1, sl
  40f7d8:	463a      	mov	r2, r7
  40f7da:	f002 fdcd 	bl	412378 <_mbrtowc_r>
  40f7de:	1c43      	adds	r3, r0, #1
  40f7e0:	f43f ad0c 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40f7e4:	2800      	cmp	r0, #0
  40f7e6:	d177      	bne.n	40f8d8 <__ssvfscanf_r+0xc0c>
  40f7e8:	b90e      	cbnz	r6, 40f7ee <__ssvfscanf_r+0xb22>
  40f7ea:	f8ca 6000 	str.w	r6, [sl]
  40f7ee:	9905      	ldr	r1, [sp, #20]
  40f7f0:	4449      	add	r1, r9
  40f7f2:	9105      	str	r1, [sp, #20]
  40f7f4:	3c01      	subs	r4, #1
  40f7f6:	2e00      	cmp	r6, #0
  40f7f8:	d172      	bne.n	40f8e0 <__ssvfscanf_r+0xc14>
  40f7fa:	f10a 0a04 	add.w	sl, sl, #4
  40f7fe:	46b3      	mov	fp, r6
  40f800:	686b      	ldr	r3, [r5, #4]
  40f802:	2b00      	cmp	r3, #0
  40f804:	dd2a      	ble.n	40f85c <__ssvfscanf_r+0xb90>
  40f806:	2c00      	cmp	r4, #0
  40f808:	d1d1      	bne.n	40f7ae <__ssvfscanf_r+0xae2>
  40f80a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f80e:	9e08      	ldr	r6, [sp, #32]
  40f810:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40f812:	2c00      	cmp	r4, #0
  40f814:	f43f ad8e 	beq.w	40f334 <__ssvfscanf_r+0x668>
  40f818:	e58f      	b.n	40f33a <__ssvfscanf_r+0x66e>
  40f81a:	4622      	mov	r2, r4
  40f81c:	f88a 4000 	strb.w	r4, [sl]
  40f820:	4630      	mov	r0, r6
  40f822:	9905      	ldr	r1, [sp, #20]
  40f824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f826:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f828:	47a0      	blx	r4
  40f82a:	06ba      	lsls	r2, r7, #26
  40f82c:	d535      	bpl.n	40f89a <__ssvfscanf_r+0xbce>
  40f82e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f832:	f8dc 3000 	ldr.w	r3, [ip]
  40f836:	f10c 0c04 	add.w	ip, ip, #4
  40f83a:	f8cd c018 	str.w	ip, [sp, #24]
  40f83e:	6018      	str	r0, [r3, #0]
  40f840:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f842:	3401      	adds	r4, #1
  40f844:	940b      	str	r4, [sp, #44]	; 0x2c
  40f846:	e476      	b.n	40f136 <__ssvfscanf_r+0x46a>
  40f848:	9c06      	ldr	r4, [sp, #24]
  40f84a:	6823      	ldr	r3, [r4, #0]
  40f84c:	3404      	adds	r4, #4
  40f84e:	9406      	str	r4, [sp, #24]
  40f850:	e9c3 ab00 	strd	sl, fp, [r3]
  40f854:	e6d3      	b.n	40f5fe <__ssvfscanf_r+0x932>
  40f856:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40f85a:	e44b      	b.n	40f0f4 <__ssvfscanf_r+0x428>
  40f85c:	9808      	ldr	r0, [sp, #32]
  40f85e:	4629      	mov	r1, r5
  40f860:	f005 f852 	bl	414908 <__ssrefill_r>
  40f864:	2800      	cmp	r0, #0
  40f866:	d0ce      	beq.n	40f806 <__ssvfscanf_r+0xb3a>
  40f868:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f86c:	9e08      	ldr	r6, [sp, #32]
  40f86e:	f1bb 0f00 	cmp.w	fp, #0
  40f872:	d0cd      	beq.n	40f810 <__ssvfscanf_r+0xb44>
  40f874:	e4c2      	b.n	40f1fc <__ssvfscanf_r+0x530>
  40f876:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f87a:	f8dc a000 	ldr.w	sl, [ip]
  40f87e:	f10c 0c04 	add.w	ip, ip, #4
  40f882:	f8cd c018 	str.w	ip, [sp, #24]
  40f886:	e78b      	b.n	40f7a0 <__ssvfscanf_r+0xad4>
  40f888:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f88c:	f8dc a000 	ldr.w	sl, [ip]
  40f890:	f10c 0c04 	add.w	ip, ip, #4
  40f894:	f8cd c018 	str.w	ip, [sp, #24]
  40f898:	e53b      	b.n	40f312 <__ssvfscanf_r+0x646>
  40f89a:	077b      	lsls	r3, r7, #29
  40f89c:	f140 809b 	bpl.w	40f9d6 <__ssvfscanf_r+0xd0a>
  40f8a0:	9c06      	ldr	r4, [sp, #24]
  40f8a2:	6823      	ldr	r3, [r4, #0]
  40f8a4:	3404      	adds	r4, #4
  40f8a6:	9406      	str	r4, [sp, #24]
  40f8a8:	8018      	strh	r0, [r3, #0]
  40f8aa:	e7c9      	b.n	40f840 <__ssvfscanf_r+0xb74>
  40f8ac:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40f8b0:	4630      	mov	r0, r6
  40f8b2:	f10c 0101 	add.w	r1, ip, #1
  40f8b6:	230a      	movs	r3, #10
  40f8b8:	f004 fcb6 	bl	414228 <_strtol_r>
  40f8bc:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  40f8c0:	1b02      	subs	r2, r0, r4
  40f8c2:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  40f8c6:	458b      	cmp	fp, r1
  40f8c8:	bf28      	it	cs
  40f8ca:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  40f8ce:	4658      	mov	r0, fp
  40f8d0:	499b      	ldr	r1, [pc, #620]	; (40fb40 <__ssvfscanf_r+0xe74>)
  40f8d2:	f7fd fc9b 	bl	40d20c <sprintf>
  40f8d6:	e67b      	b.n	40f5d0 <__ssvfscanf_r+0x904>
  40f8d8:	3002      	adds	r0, #2
  40f8da:	d188      	bne.n	40f7ee <__ssvfscanf_r+0xb22>
  40f8dc:	46cb      	mov	fp, r9
  40f8de:	e78f      	b.n	40f800 <__ssvfscanf_r+0xb34>
  40f8e0:	f04f 0b00 	mov.w	fp, #0
  40f8e4:	e78c      	b.n	40f800 <__ssvfscanf_r+0xb34>
  40f8e6:	2f00      	cmp	r7, #0
  40f8e8:	f43f ac88 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40f8ec:	44b9      	add	r9, r7
  40f8ee:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f8f2:	f7ff bbc5 	b.w	40f080 <__ssvfscanf_r+0x3b4>
  40f8f6:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f8fa:	4623      	mov	r3, r4
  40f8fc:	f8dc 1000 	ldr.w	r1, [ip]
  40f900:	9500      	str	r5, [sp, #0]
  40f902:	4630      	mov	r0, r6
  40f904:	2201      	movs	r2, #1
  40f906:	f005 f81d 	bl	414944 <_sfread_r>
  40f90a:	9c06      	ldr	r4, [sp, #24]
  40f90c:	1d23      	adds	r3, r4, #4
  40f90e:	2800      	cmp	r0, #0
  40f910:	f43f ac74 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40f914:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f916:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f91a:	9306      	str	r3, [sp, #24]
  40f91c:	3401      	adds	r4, #1
  40f91e:	4481      	add	r9, r0
  40f920:	940b      	str	r4, [sp, #44]	; 0x2c
  40f922:	4652      	mov	r2, sl
  40f924:	f7ff ba13 	b.w	40ed4e <__ssvfscanf_r+0x82>
  40f928:	4630      	mov	r0, r6
  40f92a:	4629      	mov	r1, r5
  40f92c:	f004 ffec 	bl	414908 <__ssrefill_r>
  40f930:	2800      	cmp	r0, #0
  40f932:	f43f aaa2 	beq.w	40ee7a <__ssvfscanf_r+0x1ae>
  40f936:	e461      	b.n	40f1fc <__ssvfscanf_r+0x530>
  40f938:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40f93c:	4630      	mov	r0, r6
  40f93e:	462a      	mov	r2, r5
  40f940:	f004 ffa2 	bl	414888 <_sungetc_r>
  40f944:	f10a 3aff 	add.w	sl, sl, #4294967295
  40f948:	f7ff bbec 	b.w	40f124 <__ssvfscanf_r+0x458>
  40f94c:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40f950:	f04f 0a01 	mov.w	sl, #1
  40f954:	e587      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f956:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40f95a:	2301      	movs	r3, #1
  40f95c:	e583      	b.n	40f466 <__ssvfscanf_r+0x79a>
  40f95e:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40f962:	f047 0702 	orr.w	r7, r7, #2
  40f966:	f10a 0a02 	add.w	sl, sl, #2
  40f96a:	f7ff ba00 	b.w	40ed6e <__ssvfscanf_r+0xa2>
  40f96e:	9b08      	ldr	r3, [sp, #32]
  40f970:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40f972:	1b19      	subs	r1, r3, r4
  40f974:	424a      	negs	r2, r1
  40f976:	2900      	cmp	r1, #0
  40f978:	d1a3      	bne.n	40f8c2 <__ssvfscanf_r+0xbf6>
  40f97a:	e629      	b.n	40f5d0 <__ssvfscanf_r+0x904>
  40f97c:	07fc      	lsls	r4, r7, #31
  40f97e:	d40e      	bmi.n	40f99e <__ssvfscanf_r+0xcd2>
  40f980:	07b8      	lsls	r0, r7, #30
  40f982:	d50c      	bpl.n	40f99e <__ssvfscanf_r+0xcd2>
  40f984:	9c06      	ldr	r4, [sp, #24]
  40f986:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f98a:	6821      	ldr	r1, [r4, #0]
  40f98c:	464a      	mov	r2, r9
  40f98e:	ea4f 73e9 	mov.w	r3, r9, asr #31
  40f992:	3404      	adds	r4, #4
  40f994:	9406      	str	r4, [sp, #24]
  40f996:	e9c1 2300 	strd	r2, r3, [r1]
  40f99a:	f7ff b9d7 	b.w	40ed4c <__ssvfscanf_r+0x80>
  40f99e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f9a2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f9a6:	f8dc 3000 	ldr.w	r3, [ip]
  40f9aa:	f10c 0c04 	add.w	ip, ip, #4
  40f9ae:	f8c3 9000 	str.w	r9, [r3]
  40f9b2:	f8cd c018 	str.w	ip, [sp, #24]
  40f9b6:	f7ff b9c9 	b.w	40ed4c <__ssvfscanf_r+0x80>
  40f9ba:	9c06      	ldr	r4, [sp, #24]
  40f9bc:	1d27      	adds	r7, r4, #4
  40f9be:	6824      	ldr	r4, [r4, #0]
  40f9c0:	f003 fc0c 	bl	4131dc <__fpclassifyd>
  40f9c4:	2800      	cmp	r0, #0
  40f9c6:	d056      	beq.n	40fa76 <__ssvfscanf_r+0xdaa>
  40f9c8:	4650      	mov	r0, sl
  40f9ca:	4659      	mov	r1, fp
  40f9cc:	f006 f9fe 	bl	415dcc <__aeabi_d2f>
  40f9d0:	9706      	str	r7, [sp, #24]
  40f9d2:	6020      	str	r0, [r4, #0]
  40f9d4:	e613      	b.n	40f5fe <__ssvfscanf_r+0x932>
  40f9d6:	f017 0201 	ands.w	r2, r7, #1
  40f9da:	f47f af28 	bne.w	40f82e <__ssvfscanf_r+0xb62>
  40f9de:	07bc      	lsls	r4, r7, #30
  40f9e0:	f140 8097 	bpl.w	40fb12 <__ssvfscanf_r+0xe46>
  40f9e4:	4b57      	ldr	r3, [pc, #348]	; (40fb44 <__ssvfscanf_r+0xe78>)
  40f9e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f9e8:	9905      	ldr	r1, [sp, #20]
  40f9ea:	429c      	cmp	r4, r3
  40f9ec:	4630      	mov	r0, r6
  40f9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f9f0:	f000 80a2 	beq.w	40fb38 <__ssvfscanf_r+0xe6c>
  40f9f4:	f004 fca2 	bl	41433c <_strtoll_r>
  40f9f8:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f9fc:	f8dc 3000 	ldr.w	r3, [ip]
  40fa00:	f10c 0c04 	add.w	ip, ip, #4
  40fa04:	f8cd c018 	str.w	ip, [sp, #24]
  40fa08:	e9c3 0100 	strd	r0, r1, [r3]
  40fa0c:	e718      	b.n	40f840 <__ssvfscanf_r+0xb74>
  40fa0e:	9204      	str	r2, [sp, #16]
  40fa10:	f002 fc24 	bl	41225c <__locale_mb_cur_max>
  40fa14:	9a04      	ldr	r2, [sp, #16]
  40fa16:	4290      	cmp	r0, r2
  40fa18:	f43f abf0 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40fa1c:	682b      	ldr	r3, [r5, #0]
  40fa1e:	6869      	ldr	r1, [r5, #4]
  40fa20:	f813 eb01 	ldrb.w	lr, [r3], #1
  40fa24:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fa26:	602b      	str	r3, [r5, #0]
  40fa28:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40fa2c:	1c57      	adds	r7, r2, #1
  40fa2e:	3901      	subs	r1, #1
  40fa30:	9000      	str	r0, [sp, #0]
  40fa32:	463b      	mov	r3, r7
  40fa34:	6069      	str	r1, [r5, #4]
  40fa36:	f80c e002 	strb.w	lr, [ip, r2]
  40fa3a:	4630      	mov	r0, r6
  40fa3c:	4651      	mov	r1, sl
  40fa3e:	4662      	mov	r2, ip
  40fa40:	f002 fc9a 	bl	412378 <_mbrtowc_r>
  40fa44:	1c43      	adds	r3, r0, #1
  40fa46:	f43f abd9 	beq.w	40f1fc <__ssvfscanf_r+0x530>
  40fa4a:	b9c8      	cbnz	r0, 40fa80 <__ssvfscanf_r+0xdb4>
  40fa4c:	f8ca 0000 	str.w	r0, [sl]
  40fa50:	f002 fbf2 	bl	412238 <iswspace>
  40fa54:	2800      	cmp	r0, #0
  40fa56:	d053      	beq.n	40fb00 <__ssvfscanf_r+0xe34>
  40fa58:	2f00      	cmp	r7, #0
  40fa5a:	f43f ac66 	beq.w	40f32a <__ssvfscanf_r+0x65e>
  40fa5e:	ac56      	add	r4, sp, #344	; 0x158
  40fa60:	443c      	add	r4, r7
  40fa62:	3f01      	subs	r7, #1
  40fa64:	4630      	mov	r0, r6
  40fa66:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40fa6a:	462a      	mov	r2, r5
  40fa6c:	f004 ff0c 	bl	414888 <_sungetc_r>
  40fa70:	2f00      	cmp	r7, #0
  40fa72:	d1f6      	bne.n	40fa62 <__ssvfscanf_r+0xd96>
  40fa74:	e459      	b.n	40f32a <__ssvfscanf_r+0x65e>
  40fa76:	f003 fc11 	bl	41329c <nanf>
  40fa7a:	9706      	str	r7, [sp, #24]
  40fa7c:	6020      	str	r0, [r4, #0]
  40fa7e:	e5be      	b.n	40f5fe <__ssvfscanf_r+0x932>
  40fa80:	3002      	adds	r0, #2
  40fa82:	d128      	bne.n	40fad6 <__ssvfscanf_r+0xe0a>
  40fa84:	686b      	ldr	r3, [r5, #4]
  40fa86:	2b00      	cmp	r3, #0
  40fa88:	dd4b      	ble.n	40fb22 <__ssvfscanf_r+0xe56>
  40fa8a:	463a      	mov	r2, r7
  40fa8c:	e442      	b.n	40f314 <__ssvfscanf_r+0x648>
  40fa8e:	9c05      	ldr	r4, [sp, #20]
  40fa90:	45a3      	cmp	fp, r4
  40fa92:	bf88      	it	hi
  40fa94:	465c      	movhi	r4, fp
  40fa96:	f67f a960 	bls.w	40ed5a <__ssvfscanf_r+0x8e>
  40fa9a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40fa9e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40faa0:	462a      	mov	r2, r5
  40faa2:	f004 fef1 	bl	414888 <_sungetc_r>
  40faa6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40faaa:	454c      	cmp	r4, r9
  40faac:	d1f5      	bne.n	40fa9a <__ssvfscanf_r+0xdce>
  40faae:	f7ff b954 	b.w	40ed5a <__ssvfscanf_r+0x8e>
  40fab2:	f8dd c014 	ldr.w	ip, [sp, #20]
  40fab6:	45e3      	cmp	fp, ip
  40fab8:	f67f a94f 	bls.w	40ed5a <__ssvfscanf_r+0x8e>
  40fabc:	465c      	mov	r4, fp
  40fabe:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40fac2:	980e      	ldr	r0, [sp, #56]	; 0x38
  40fac4:	462a      	mov	r2, r5
  40fac6:	f004 fedf 	bl	414888 <_sungetc_r>
  40faca:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40face:	454c      	cmp	r4, r9
  40fad0:	d1f5      	bne.n	40fabe <__ssvfscanf_r+0xdf2>
  40fad2:	f7ff b942 	b.w	40ed5a <__ssvfscanf_r+0x8e>
  40fad6:	f8da 0000 	ldr.w	r0, [sl]
  40fada:	e7b9      	b.n	40fa50 <__ssvfscanf_r+0xd84>
  40fadc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40fae0:	45cb      	cmp	fp, r9
  40fae2:	f67f a93a 	bls.w	40ed5a <__ssvfscanf_r+0x8e>
  40fae6:	465c      	mov	r4, fp
  40fae8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40faec:	980e      	ldr	r0, [sp, #56]	; 0x38
  40faee:	462a      	mov	r2, r5
  40faf0:	f004 feca 	bl	414888 <_sungetc_r>
  40faf4:	f8dd c014 	ldr.w	ip, [sp, #20]
  40faf8:	4564      	cmp	r4, ip
  40fafa:	d1f5      	bne.n	40fae8 <__ssvfscanf_r+0xe1c>
  40fafc:	f7ff b92d 	b.w	40ed5a <__ssvfscanf_r+0x8e>
  40fb00:	44b9      	add	r9, r7
  40fb02:	3c01      	subs	r4, #1
  40fb04:	f1bb 0f00 	cmp.w	fp, #0
  40fb08:	d109      	bne.n	40fb1e <__ssvfscanf_r+0xe52>
  40fb0a:	f10a 0a04 	add.w	sl, sl, #4
  40fb0e:	465f      	mov	r7, fp
  40fb10:	e7b8      	b.n	40fa84 <__ssvfscanf_r+0xdb8>
  40fb12:	9c06      	ldr	r4, [sp, #24]
  40fb14:	6823      	ldr	r3, [r4, #0]
  40fb16:	3404      	adds	r4, #4
  40fb18:	9406      	str	r4, [sp, #24]
  40fb1a:	6018      	str	r0, [r3, #0]
  40fb1c:	e690      	b.n	40f840 <__ssvfscanf_r+0xb74>
  40fb1e:	4607      	mov	r7, r0
  40fb20:	e7b0      	b.n	40fa84 <__ssvfscanf_r+0xdb8>
  40fb22:	4630      	mov	r0, r6
  40fb24:	4629      	mov	r1, r5
  40fb26:	f004 feef 	bl	414908 <__ssrefill_r>
  40fb2a:	2800      	cmp	r0, #0
  40fb2c:	d0ad      	beq.n	40fa8a <__ssvfscanf_r+0xdbe>
  40fb2e:	2f00      	cmp	r7, #0
  40fb30:	f47f ab64 	bne.w	40f1fc <__ssvfscanf_r+0x530>
  40fb34:	f7ff bbf9 	b.w	40f32a <__ssvfscanf_r+0x65e>
  40fb38:	f004 fd5e 	bl	4145f8 <_strtoull_r>
  40fb3c:	e75c      	b.n	40f9f8 <__ssvfscanf_r+0xd2c>
  40fb3e:	bf00      	nop
  40fb40:	00416e3c 	.word	0x00416e3c
  40fb44:	004144d9 	.word	0x004144d9

0040fb48 <__sprint_r.part.0>:
  40fb48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40fb4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fb4e:	049c      	lsls	r4, r3, #18
  40fb50:	460e      	mov	r6, r1
  40fb52:	4680      	mov	r8, r0
  40fb54:	4691      	mov	r9, r2
  40fb56:	d52a      	bpl.n	40fbae <__sprint_r.part.0+0x66>
  40fb58:	6893      	ldr	r3, [r2, #8]
  40fb5a:	6812      	ldr	r2, [r2, #0]
  40fb5c:	f102 0a08 	add.w	sl, r2, #8
  40fb60:	b31b      	cbz	r3, 40fbaa <__sprint_r.part.0+0x62>
  40fb62:	e91a 00a0 	ldmdb	sl, {r5, r7}
  40fb66:	08bf      	lsrs	r7, r7, #2
  40fb68:	d017      	beq.n	40fb9a <__sprint_r.part.0+0x52>
  40fb6a:	3d04      	subs	r5, #4
  40fb6c:	2400      	movs	r4, #0
  40fb6e:	e001      	b.n	40fb74 <__sprint_r.part.0+0x2c>
  40fb70:	42a7      	cmp	r7, r4
  40fb72:	d010      	beq.n	40fb96 <__sprint_r.part.0+0x4e>
  40fb74:	4640      	mov	r0, r8
  40fb76:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40fb7a:	4632      	mov	r2, r6
  40fb7c:	f002 f830 	bl	411be0 <_fputwc_r>
  40fb80:	1c43      	adds	r3, r0, #1
  40fb82:	f104 0401 	add.w	r4, r4, #1
  40fb86:	d1f3      	bne.n	40fb70 <__sprint_r.part.0+0x28>
  40fb88:	2300      	movs	r3, #0
  40fb8a:	f8c9 3008 	str.w	r3, [r9, #8]
  40fb8e:	f8c9 3004 	str.w	r3, [r9, #4]
  40fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fb96:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40fb9a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  40fb9e:	f8c9 3008 	str.w	r3, [r9, #8]
  40fba2:	f10a 0a08 	add.w	sl, sl, #8
  40fba6:	2b00      	cmp	r3, #0
  40fba8:	d1db      	bne.n	40fb62 <__sprint_r.part.0+0x1a>
  40fbaa:	2000      	movs	r0, #0
  40fbac:	e7ec      	b.n	40fb88 <__sprint_r.part.0+0x40>
  40fbae:	f002 f991 	bl	411ed4 <__sfvwrite_r>
  40fbb2:	2300      	movs	r3, #0
  40fbb4:	f8c9 3008 	str.w	r3, [r9, #8]
  40fbb8:	f8c9 3004 	str.w	r3, [r9, #4]
  40fbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040fbc0 <_vfiprintf_r>:
  40fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fbc4:	b0b1      	sub	sp, #196	; 0xc4
  40fbc6:	461c      	mov	r4, r3
  40fbc8:	9102      	str	r1, [sp, #8]
  40fbca:	4690      	mov	r8, r2
  40fbcc:	9308      	str	r3, [sp, #32]
  40fbce:	9006      	str	r0, [sp, #24]
  40fbd0:	b118      	cbz	r0, 40fbda <_vfiprintf_r+0x1a>
  40fbd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40fbd4:	2b00      	cmp	r3, #0
  40fbd6:	f000 80e8 	beq.w	40fdaa <_vfiprintf_r+0x1ea>
  40fbda:	9d02      	ldr	r5, [sp, #8]
  40fbdc:	89ab      	ldrh	r3, [r5, #12]
  40fbde:	b29a      	uxth	r2, r3
  40fbe0:	0490      	lsls	r0, r2, #18
  40fbe2:	d407      	bmi.n	40fbf4 <_vfiprintf_r+0x34>
  40fbe4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40fbe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40fbea:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40fbee:	81ab      	strh	r3, [r5, #12]
  40fbf0:	b29a      	uxth	r2, r3
  40fbf2:	6669      	str	r1, [r5, #100]	; 0x64
  40fbf4:	0711      	lsls	r1, r2, #28
  40fbf6:	f140 80b7 	bpl.w	40fd68 <_vfiprintf_r+0x1a8>
  40fbfa:	f8dd b008 	ldr.w	fp, [sp, #8]
  40fbfe:	f8db 3010 	ldr.w	r3, [fp, #16]
  40fc02:	2b00      	cmp	r3, #0
  40fc04:	f000 80b0 	beq.w	40fd68 <_vfiprintf_r+0x1a8>
  40fc08:	f002 021a 	and.w	r2, r2, #26
  40fc0c:	2a0a      	cmp	r2, #10
  40fc0e:	f000 80b7 	beq.w	40fd80 <_vfiprintf_r+0x1c0>
  40fc12:	2300      	movs	r3, #0
  40fc14:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40fc18:	930a      	str	r3, [sp, #40]	; 0x28
  40fc1a:	9315      	str	r3, [sp, #84]	; 0x54
  40fc1c:	9314      	str	r3, [sp, #80]	; 0x50
  40fc1e:	9309      	str	r3, [sp, #36]	; 0x24
  40fc20:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  40fc24:	464e      	mov	r6, r9
  40fc26:	f898 3000 	ldrb.w	r3, [r8]
  40fc2a:	2b00      	cmp	r3, #0
  40fc2c:	f000 84c4 	beq.w	4105b8 <_vfiprintf_r+0x9f8>
  40fc30:	2b25      	cmp	r3, #37	; 0x25
  40fc32:	f000 84c1 	beq.w	4105b8 <_vfiprintf_r+0x9f8>
  40fc36:	f108 0201 	add.w	r2, r8, #1
  40fc3a:	e001      	b.n	40fc40 <_vfiprintf_r+0x80>
  40fc3c:	2b25      	cmp	r3, #37	; 0x25
  40fc3e:	d004      	beq.n	40fc4a <_vfiprintf_r+0x8a>
  40fc40:	4614      	mov	r4, r2
  40fc42:	3201      	adds	r2, #1
  40fc44:	7823      	ldrb	r3, [r4, #0]
  40fc46:	2b00      	cmp	r3, #0
  40fc48:	d1f8      	bne.n	40fc3c <_vfiprintf_r+0x7c>
  40fc4a:	ebc8 0504 	rsb	r5, r8, r4
  40fc4e:	b195      	cbz	r5, 40fc76 <_vfiprintf_r+0xb6>
  40fc50:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fc52:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fc54:	f8c6 8000 	str.w	r8, [r6]
  40fc58:	3301      	adds	r3, #1
  40fc5a:	442a      	add	r2, r5
  40fc5c:	2b07      	cmp	r3, #7
  40fc5e:	6075      	str	r5, [r6, #4]
  40fc60:	9215      	str	r2, [sp, #84]	; 0x54
  40fc62:	9314      	str	r3, [sp, #80]	; 0x50
  40fc64:	dd7b      	ble.n	40fd5e <_vfiprintf_r+0x19e>
  40fc66:	2a00      	cmp	r2, #0
  40fc68:	f040 84d4 	bne.w	410614 <_vfiprintf_r+0xa54>
  40fc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40fc6e:	9214      	str	r2, [sp, #80]	; 0x50
  40fc70:	4428      	add	r0, r5
  40fc72:	464e      	mov	r6, r9
  40fc74:	9009      	str	r0, [sp, #36]	; 0x24
  40fc76:	7823      	ldrb	r3, [r4, #0]
  40fc78:	2b00      	cmp	r3, #0
  40fc7a:	f000 83e9 	beq.w	410450 <_vfiprintf_r+0x890>
  40fc7e:	2100      	movs	r1, #0
  40fc80:	f04f 0200 	mov.w	r2, #0
  40fc84:	f04f 3cff 	mov.w	ip, #4294967295
  40fc88:	7863      	ldrb	r3, [r4, #1]
  40fc8a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  40fc8e:	9104      	str	r1, [sp, #16]
  40fc90:	468a      	mov	sl, r1
  40fc92:	f104 0801 	add.w	r8, r4, #1
  40fc96:	4608      	mov	r0, r1
  40fc98:	4665      	mov	r5, ip
  40fc9a:	f108 0801 	add.w	r8, r8, #1
  40fc9e:	f1a3 0220 	sub.w	r2, r3, #32
  40fca2:	2a58      	cmp	r2, #88	; 0x58
  40fca4:	f200 82d5 	bhi.w	410252 <_vfiprintf_r+0x692>
  40fca8:	e8df f012 	tbh	[pc, r2, lsl #1]
  40fcac:	02d302c7 	.word	0x02d302c7
  40fcb0:	02ce02d3 	.word	0x02ce02d3
  40fcb4:	02d302d3 	.word	0x02d302d3
  40fcb8:	02d302d3 	.word	0x02d302d3
  40fcbc:	02d302d3 	.word	0x02d302d3
  40fcc0:	028b027e 	.word	0x028b027e
  40fcc4:	008402d3 	.word	0x008402d3
  40fcc8:	02d3028f 	.word	0x02d3028f
  40fccc:	0194012b 	.word	0x0194012b
  40fcd0:	01940194 	.word	0x01940194
  40fcd4:	01940194 	.word	0x01940194
  40fcd8:	01940194 	.word	0x01940194
  40fcdc:	01940194 	.word	0x01940194
  40fce0:	02d302d3 	.word	0x02d302d3
  40fce4:	02d302d3 	.word	0x02d302d3
  40fce8:	02d302d3 	.word	0x02d302d3
  40fcec:	02d302d3 	.word	0x02d302d3
  40fcf0:	02d302d3 	.word	0x02d302d3
  40fcf4:	02d30130 	.word	0x02d30130
  40fcf8:	02d302d3 	.word	0x02d302d3
  40fcfc:	02d302d3 	.word	0x02d302d3
  40fd00:	02d302d3 	.word	0x02d302d3
  40fd04:	02d302d3 	.word	0x02d302d3
  40fd08:	017902d3 	.word	0x017902d3
  40fd0c:	02d302d3 	.word	0x02d302d3
  40fd10:	02d302d3 	.word	0x02d302d3
  40fd14:	01a202d3 	.word	0x01a202d3
  40fd18:	02d302d3 	.word	0x02d302d3
  40fd1c:	02d301bd 	.word	0x02d301bd
  40fd20:	02d302d3 	.word	0x02d302d3
  40fd24:	02d302d3 	.word	0x02d302d3
  40fd28:	02d302d3 	.word	0x02d302d3
  40fd2c:	02d302d3 	.word	0x02d302d3
  40fd30:	01e202d3 	.word	0x01e202d3
  40fd34:	02d301f8 	.word	0x02d301f8
  40fd38:	02d302d3 	.word	0x02d302d3
  40fd3c:	01f80214 	.word	0x01f80214
  40fd40:	02d302d3 	.word	0x02d302d3
  40fd44:	02d30219 	.word	0x02d30219
  40fd48:	00890226 	.word	0x00890226
  40fd4c:	02790264 	.word	0x02790264
  40fd50:	023802d3 	.word	0x023802d3
  40fd54:	011902d3 	.word	0x011902d3
  40fd58:	02d302d3 	.word	0x02d302d3
  40fd5c:	02ab      	.short	0x02ab
  40fd5e:	3608      	adds	r6, #8
  40fd60:	9809      	ldr	r0, [sp, #36]	; 0x24
  40fd62:	4428      	add	r0, r5
  40fd64:	9009      	str	r0, [sp, #36]	; 0x24
  40fd66:	e786      	b.n	40fc76 <_vfiprintf_r+0xb6>
  40fd68:	9806      	ldr	r0, [sp, #24]
  40fd6a:	9902      	ldr	r1, [sp, #8]
  40fd6c:	f000 fda2 	bl	4108b4 <__swsetup_r>
  40fd70:	b9b0      	cbnz	r0, 40fda0 <_vfiprintf_r+0x1e0>
  40fd72:	9d02      	ldr	r5, [sp, #8]
  40fd74:	89aa      	ldrh	r2, [r5, #12]
  40fd76:	f002 021a 	and.w	r2, r2, #26
  40fd7a:	2a0a      	cmp	r2, #10
  40fd7c:	f47f af49 	bne.w	40fc12 <_vfiprintf_r+0x52>
  40fd80:	f8dd b008 	ldr.w	fp, [sp, #8]
  40fd84:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40fd88:	2b00      	cmp	r3, #0
  40fd8a:	f6ff af42 	blt.w	40fc12 <_vfiprintf_r+0x52>
  40fd8e:	9806      	ldr	r0, [sp, #24]
  40fd90:	4659      	mov	r1, fp
  40fd92:	4642      	mov	r2, r8
  40fd94:	4623      	mov	r3, r4
  40fd96:	f000 fd3d 	bl	410814 <__sbprintf>
  40fd9a:	b031      	add	sp, #196	; 0xc4
  40fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fda0:	f04f 30ff 	mov.w	r0, #4294967295
  40fda4:	b031      	add	sp, #196	; 0xc4
  40fda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fdaa:	f001 fe83 	bl	411ab4 <__sinit>
  40fdae:	e714      	b.n	40fbda <_vfiprintf_r+0x1a>
  40fdb0:	4240      	negs	r0, r0
  40fdb2:	9308      	str	r3, [sp, #32]
  40fdb4:	f04a 0a04 	orr.w	sl, sl, #4
  40fdb8:	f898 3000 	ldrb.w	r3, [r8]
  40fdbc:	e76d      	b.n	40fc9a <_vfiprintf_r+0xda>
  40fdbe:	f01a 0320 	ands.w	r3, sl, #32
  40fdc2:	9004      	str	r0, [sp, #16]
  40fdc4:	46ac      	mov	ip, r5
  40fdc6:	f000 80f2 	beq.w	40ffae <_vfiprintf_r+0x3ee>
  40fdca:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fdce:	f10b 0307 	add.w	r3, fp, #7
  40fdd2:	f023 0307 	bic.w	r3, r3, #7
  40fdd6:	f103 0408 	add.w	r4, r3, #8
  40fdda:	9408      	str	r4, [sp, #32]
  40fddc:	e9d3 4500 	ldrd	r4, r5, [r3]
  40fde0:	2300      	movs	r3, #0
  40fde2:	f04f 0000 	mov.w	r0, #0
  40fde6:	2100      	movs	r1, #0
  40fde8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40fdec:	f8cd c014 	str.w	ip, [sp, #20]
  40fdf0:	9107      	str	r1, [sp, #28]
  40fdf2:	f1bc 0f00 	cmp.w	ip, #0
  40fdf6:	bfa8      	it	ge
  40fdf8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40fdfc:	ea54 0205 	orrs.w	r2, r4, r5
  40fe00:	f040 80ad 	bne.w	40ff5e <_vfiprintf_r+0x39e>
  40fe04:	f1bc 0f00 	cmp.w	ip, #0
  40fe08:	f040 80a9 	bne.w	40ff5e <_vfiprintf_r+0x39e>
  40fe0c:	2b00      	cmp	r3, #0
  40fe0e:	f040 83bc 	bne.w	41058a <_vfiprintf_r+0x9ca>
  40fe12:	f01a 0f01 	tst.w	sl, #1
  40fe16:	f000 83b8 	beq.w	41058a <_vfiprintf_r+0x9ca>
  40fe1a:	af30      	add	r7, sp, #192	; 0xc0
  40fe1c:	2330      	movs	r3, #48	; 0x30
  40fe1e:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40fe22:	ebc7 0409 	rsb	r4, r7, r9
  40fe26:	9405      	str	r4, [sp, #20]
  40fe28:	f8dd b014 	ldr.w	fp, [sp, #20]
  40fe2c:	9c07      	ldr	r4, [sp, #28]
  40fe2e:	45e3      	cmp	fp, ip
  40fe30:	bfb8      	it	lt
  40fe32:	46e3      	movlt	fp, ip
  40fe34:	f8cd b00c 	str.w	fp, [sp, #12]
  40fe38:	b11c      	cbz	r4, 40fe42 <_vfiprintf_r+0x282>
  40fe3a:	f10b 0b01 	add.w	fp, fp, #1
  40fe3e:	f8cd b00c 	str.w	fp, [sp, #12]
  40fe42:	f01a 0502 	ands.w	r5, sl, #2
  40fe46:	9507      	str	r5, [sp, #28]
  40fe48:	d005      	beq.n	40fe56 <_vfiprintf_r+0x296>
  40fe4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fe4e:	f10b 0b02 	add.w	fp, fp, #2
  40fe52:	f8cd b00c 	str.w	fp, [sp, #12]
  40fe56:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  40fe5a:	930b      	str	r3, [sp, #44]	; 0x2c
  40fe5c:	f040 8217 	bne.w	41028e <_vfiprintf_r+0x6ce>
  40fe60:	9d04      	ldr	r5, [sp, #16]
  40fe62:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fe66:	ebcb 0405 	rsb	r4, fp, r5
  40fe6a:	2c00      	cmp	r4, #0
  40fe6c:	f340 820f 	ble.w	41028e <_vfiprintf_r+0x6ce>
  40fe70:	2c10      	cmp	r4, #16
  40fe72:	f340 8488 	ble.w	410786 <_vfiprintf_r+0xbc6>
  40fe76:	4dbd      	ldr	r5, [pc, #756]	; (41016c <_vfiprintf_r+0x5ac>)
  40fe78:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fe7a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40fe7c:	462b      	mov	r3, r5
  40fe7e:	f04f 0b10 	mov.w	fp, #16
  40fe82:	4625      	mov	r5, r4
  40fe84:	4664      	mov	r4, ip
  40fe86:	46b4      	mov	ip, r6
  40fe88:	461e      	mov	r6, r3
  40fe8a:	e006      	b.n	40fe9a <_vfiprintf_r+0x2da>
  40fe8c:	1c83      	adds	r3, r0, #2
  40fe8e:	f10c 0c08 	add.w	ip, ip, #8
  40fe92:	4608      	mov	r0, r1
  40fe94:	3d10      	subs	r5, #16
  40fe96:	2d10      	cmp	r5, #16
  40fe98:	dd11      	ble.n	40febe <_vfiprintf_r+0x2fe>
  40fe9a:	1c41      	adds	r1, r0, #1
  40fe9c:	3210      	adds	r2, #16
  40fe9e:	2907      	cmp	r1, #7
  40fea0:	9215      	str	r2, [sp, #84]	; 0x54
  40fea2:	e88c 0840 	stmia.w	ip, {r6, fp}
  40fea6:	9114      	str	r1, [sp, #80]	; 0x50
  40fea8:	ddf0      	ble.n	40fe8c <_vfiprintf_r+0x2cc>
  40feaa:	2a00      	cmp	r2, #0
  40feac:	f040 81e2 	bne.w	410274 <_vfiprintf_r+0x6b4>
  40feb0:	3d10      	subs	r5, #16
  40feb2:	2d10      	cmp	r5, #16
  40feb4:	f04f 0301 	mov.w	r3, #1
  40feb8:	4610      	mov	r0, r2
  40feba:	46cc      	mov	ip, r9
  40febc:	dced      	bgt.n	40fe9a <_vfiprintf_r+0x2da>
  40febe:	4631      	mov	r1, r6
  40fec0:	4666      	mov	r6, ip
  40fec2:	46a4      	mov	ip, r4
  40fec4:	462c      	mov	r4, r5
  40fec6:	460d      	mov	r5, r1
  40fec8:	4422      	add	r2, r4
  40feca:	2b07      	cmp	r3, #7
  40fecc:	9215      	str	r2, [sp, #84]	; 0x54
  40fece:	6035      	str	r5, [r6, #0]
  40fed0:	6074      	str	r4, [r6, #4]
  40fed2:	9314      	str	r3, [sp, #80]	; 0x50
  40fed4:	f300 8369 	bgt.w	4105aa <_vfiprintf_r+0x9ea>
  40fed8:	3608      	adds	r6, #8
  40feda:	1c59      	adds	r1, r3, #1
  40fedc:	e1da      	b.n	410294 <_vfiprintf_r+0x6d4>
  40fede:	f01a 0f20 	tst.w	sl, #32
  40fee2:	9004      	str	r0, [sp, #16]
  40fee4:	46ac      	mov	ip, r5
  40fee6:	f000 808b 	beq.w	410000 <_vfiprintf_r+0x440>
  40feea:	9d08      	ldr	r5, [sp, #32]
  40feec:	1deb      	adds	r3, r5, #7
  40feee:	f023 0307 	bic.w	r3, r3, #7
  40fef2:	f103 0b08 	add.w	fp, r3, #8
  40fef6:	e9d3 4500 	ldrd	r4, r5, [r3]
  40fefa:	f8cd b020 	str.w	fp, [sp, #32]
  40fefe:	2301      	movs	r3, #1
  40ff00:	e76f      	b.n	40fde2 <_vfiprintf_r+0x222>
  40ff02:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  40ff06:	f898 3000 	ldrb.w	r3, [r8]
  40ff0a:	e6c6      	b.n	40fc9a <_vfiprintf_r+0xda>
  40ff0c:	f04a 0a10 	orr.w	sl, sl, #16
  40ff10:	f01a 0f20 	tst.w	sl, #32
  40ff14:	9004      	str	r0, [sp, #16]
  40ff16:	46ac      	mov	ip, r5
  40ff18:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40ff1c:	f000 80c6 	beq.w	4100ac <_vfiprintf_r+0x4ec>
  40ff20:	9c08      	ldr	r4, [sp, #32]
  40ff22:	1de1      	adds	r1, r4, #7
  40ff24:	f021 0107 	bic.w	r1, r1, #7
  40ff28:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ff2c:	3108      	adds	r1, #8
  40ff2e:	9108      	str	r1, [sp, #32]
  40ff30:	4614      	mov	r4, r2
  40ff32:	461d      	mov	r5, r3
  40ff34:	2a00      	cmp	r2, #0
  40ff36:	f173 0000 	sbcs.w	r0, r3, #0
  40ff3a:	f2c0 83cd 	blt.w	4106d8 <_vfiprintf_r+0xb18>
  40ff3e:	f1bc 0f00 	cmp.w	ip, #0
  40ff42:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  40ff46:	9107      	str	r1, [sp, #28]
  40ff48:	bfa8      	it	ge
  40ff4a:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40ff4e:	ea54 0205 	orrs.w	r2, r4, r5
  40ff52:	f8cd c014 	str.w	ip, [sp, #20]
  40ff56:	f04f 0301 	mov.w	r3, #1
  40ff5a:	f43f af53 	beq.w	40fe04 <_vfiprintf_r+0x244>
  40ff5e:	2b01      	cmp	r3, #1
  40ff60:	f000 8315 	beq.w	41058e <_vfiprintf_r+0x9ce>
  40ff64:	2b02      	cmp	r3, #2
  40ff66:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40ff6a:	f040 8248 	bne.w	4103fe <_vfiprintf_r+0x83e>
  40ff6e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ff70:	4619      	mov	r1, r3
  40ff72:	0922      	lsrs	r2, r4, #4
  40ff74:	f004 040f 	and.w	r4, r4, #15
  40ff78:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40ff7c:	460f      	mov	r7, r1
  40ff7e:	092b      	lsrs	r3, r5, #4
  40ff80:	5d01      	ldrb	r1, [r0, r4]
  40ff82:	7039      	strb	r1, [r7, #0]
  40ff84:	ea52 0b03 	orrs.w	fp, r2, r3
  40ff88:	4614      	mov	r4, r2
  40ff8a:	461d      	mov	r5, r3
  40ff8c:	f107 31ff 	add.w	r1, r7, #4294967295
  40ff90:	d1ef      	bne.n	40ff72 <_vfiprintf_r+0x3b2>
  40ff92:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40ff96:	ebc7 0309 	rsb	r3, r7, r9
  40ff9a:	9305      	str	r3, [sp, #20]
  40ff9c:	e744      	b.n	40fe28 <_vfiprintf_r+0x268>
  40ff9e:	f04a 0a10 	orr.w	sl, sl, #16
  40ffa2:	f01a 0320 	ands.w	r3, sl, #32
  40ffa6:	9004      	str	r0, [sp, #16]
  40ffa8:	46ac      	mov	ip, r5
  40ffaa:	f47f af0e 	bne.w	40fdca <_vfiprintf_r+0x20a>
  40ffae:	f01a 0210 	ands.w	r2, sl, #16
  40ffb2:	f040 830f 	bne.w	4105d4 <_vfiprintf_r+0xa14>
  40ffb6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40ffba:	f000 830b 	beq.w	4105d4 <_vfiprintf_r+0xa14>
  40ffbe:	f8dd b020 	ldr.w	fp, [sp, #32]
  40ffc2:	f8bb 4000 	ldrh.w	r4, [fp]
  40ffc6:	f10b 0b04 	add.w	fp, fp, #4
  40ffca:	4613      	mov	r3, r2
  40ffcc:	2500      	movs	r5, #0
  40ffce:	f8cd b020 	str.w	fp, [sp, #32]
  40ffd2:	e706      	b.n	40fde2 <_vfiprintf_r+0x222>
  40ffd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ffd8:	2000      	movs	r0, #0
  40ffda:	f818 3b01 	ldrb.w	r3, [r8], #1
  40ffde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40ffe2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40ffe6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ffea:	2a09      	cmp	r2, #9
  40ffec:	d9f5      	bls.n	40ffda <_vfiprintf_r+0x41a>
  40ffee:	e656      	b.n	40fc9e <_vfiprintf_r+0xde>
  40fff0:	f04a 0a10 	orr.w	sl, sl, #16
  40fff4:	f01a 0f20 	tst.w	sl, #32
  40fff8:	9004      	str	r0, [sp, #16]
  40fffa:	46ac      	mov	ip, r5
  40fffc:	f47f af75 	bne.w	40feea <_vfiprintf_r+0x32a>
  410000:	f01a 0f10 	tst.w	sl, #16
  410004:	f040 82ec 	bne.w	4105e0 <_vfiprintf_r+0xa20>
  410008:	f01a 0f40 	tst.w	sl, #64	; 0x40
  41000c:	f000 82e8 	beq.w	4105e0 <_vfiprintf_r+0xa20>
  410010:	f8dd b020 	ldr.w	fp, [sp, #32]
  410014:	f8bb 4000 	ldrh.w	r4, [fp]
  410018:	f10b 0b04 	add.w	fp, fp, #4
  41001c:	2500      	movs	r5, #0
  41001e:	2301      	movs	r3, #1
  410020:	f8cd b020 	str.w	fp, [sp, #32]
  410024:	e6dd      	b.n	40fde2 <_vfiprintf_r+0x222>
  410026:	46ac      	mov	ip, r5
  410028:	f01a 0f20 	tst.w	sl, #32
  41002c:	4d50      	ldr	r5, [pc, #320]	; (410170 <_vfiprintf_r+0x5b0>)
  41002e:	9004      	str	r0, [sp, #16]
  410030:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  410034:	950a      	str	r5, [sp, #40]	; 0x28
  410036:	f000 80ee 	beq.w	410216 <_vfiprintf_r+0x656>
  41003a:	9d08      	ldr	r5, [sp, #32]
  41003c:	1dea      	adds	r2, r5, #7
  41003e:	f022 0207 	bic.w	r2, r2, #7
  410042:	e9d2 4500 	ldrd	r4, r5, [r2]
  410046:	f102 0b08 	add.w	fp, r2, #8
  41004a:	f8cd b020 	str.w	fp, [sp, #32]
  41004e:	f01a 0f01 	tst.w	sl, #1
  410052:	f000 82a8 	beq.w	4105a6 <_vfiprintf_r+0x9e6>
  410056:	ea54 0b05 	orrs.w	fp, r4, r5
  41005a:	f000 82a4 	beq.w	4105a6 <_vfiprintf_r+0x9e6>
  41005e:	2230      	movs	r2, #48	; 0x30
  410060:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  410064:	f04a 0a02 	orr.w	sl, sl, #2
  410068:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  41006c:	2302      	movs	r3, #2
  41006e:	e6b8      	b.n	40fde2 <_vfiprintf_r+0x222>
  410070:	9b08      	ldr	r3, [sp, #32]
  410072:	f8dd b020 	ldr.w	fp, [sp, #32]
  410076:	681b      	ldr	r3, [r3, #0]
  410078:	9004      	str	r0, [sp, #16]
  41007a:	2401      	movs	r4, #1
  41007c:	f04f 0500 	mov.w	r5, #0
  410080:	f10b 0b04 	add.w	fp, fp, #4
  410084:	9403      	str	r4, [sp, #12]
  410086:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  41008a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  41008e:	f8cd b020 	str.w	fp, [sp, #32]
  410092:	9405      	str	r4, [sp, #20]
  410094:	af16      	add	r7, sp, #88	; 0x58
  410096:	f04f 0c00 	mov.w	ip, #0
  41009a:	e6d2      	b.n	40fe42 <_vfiprintf_r+0x282>
  41009c:	f01a 0f20 	tst.w	sl, #32
  4100a0:	9004      	str	r0, [sp, #16]
  4100a2:	46ac      	mov	ip, r5
  4100a4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4100a8:	f47f af3a 	bne.w	40ff20 <_vfiprintf_r+0x360>
  4100ac:	f01a 0f10 	tst.w	sl, #16
  4100b0:	f040 82a4 	bne.w	4105fc <_vfiprintf_r+0xa3c>
  4100b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4100b8:	f000 82a0 	beq.w	4105fc <_vfiprintf_r+0xa3c>
  4100bc:	f8dd b020 	ldr.w	fp, [sp, #32]
  4100c0:	f9bb 4000 	ldrsh.w	r4, [fp]
  4100c4:	f10b 0b04 	add.w	fp, fp, #4
  4100c8:	17e5      	asrs	r5, r4, #31
  4100ca:	4622      	mov	r2, r4
  4100cc:	462b      	mov	r3, r5
  4100ce:	f8cd b020 	str.w	fp, [sp, #32]
  4100d2:	e72f      	b.n	40ff34 <_vfiprintf_r+0x374>
  4100d4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  4100d8:	f898 3000 	ldrb.w	r3, [r8]
  4100dc:	e5dd      	b.n	40fc9a <_vfiprintf_r+0xda>
  4100de:	f898 3000 	ldrb.w	r3, [r8]
  4100e2:	4642      	mov	r2, r8
  4100e4:	2b6c      	cmp	r3, #108	; 0x6c
  4100e6:	bf03      	ittte	eq
  4100e8:	f108 0801 	addeq.w	r8, r8, #1
  4100ec:	f04a 0a20 	orreq.w	sl, sl, #32
  4100f0:	7853      	ldrbeq	r3, [r2, #1]
  4100f2:	f04a 0a10 	orrne.w	sl, sl, #16
  4100f6:	e5d0      	b.n	40fc9a <_vfiprintf_r+0xda>
  4100f8:	f01a 0f20 	tst.w	sl, #32
  4100fc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  410100:	f000 82f8 	beq.w	4106f4 <_vfiprintf_r+0xb34>
  410104:	9c08      	ldr	r4, [sp, #32]
  410106:	6821      	ldr	r1, [r4, #0]
  410108:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41010a:	17e5      	asrs	r5, r4, #31
  41010c:	462b      	mov	r3, r5
  41010e:	9d08      	ldr	r5, [sp, #32]
  410110:	4622      	mov	r2, r4
  410112:	3504      	adds	r5, #4
  410114:	9508      	str	r5, [sp, #32]
  410116:	e9c1 2300 	strd	r2, r3, [r1]
  41011a:	e584      	b.n	40fc26 <_vfiprintf_r+0x66>
  41011c:	9c08      	ldr	r4, [sp, #32]
  41011e:	9004      	str	r0, [sp, #16]
  410120:	6827      	ldr	r7, [r4, #0]
  410122:	46ac      	mov	ip, r5
  410124:	f04f 0500 	mov.w	r5, #0
  410128:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  41012c:	3404      	adds	r4, #4
  41012e:	2f00      	cmp	r7, #0
  410130:	f000 8334 	beq.w	41079c <_vfiprintf_r+0xbdc>
  410134:	f1bc 0f00 	cmp.w	ip, #0
  410138:	4638      	mov	r0, r7
  41013a:	f2c0 8308 	blt.w	41074e <_vfiprintf_r+0xb8e>
  41013e:	4662      	mov	r2, ip
  410140:	2100      	movs	r1, #0
  410142:	f8cd c004 	str.w	ip, [sp, #4]
  410146:	f002 f95b 	bl	412400 <memchr>
  41014a:	f8dd c004 	ldr.w	ip, [sp, #4]
  41014e:	2800      	cmp	r0, #0
  410150:	f000 833c 	beq.w	4107cc <_vfiprintf_r+0xc0c>
  410154:	1bc0      	subs	r0, r0, r7
  410156:	4560      	cmp	r0, ip
  410158:	bfa8      	it	ge
  41015a:	4660      	movge	r0, ip
  41015c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  410160:	9005      	str	r0, [sp, #20]
  410162:	9408      	str	r4, [sp, #32]
  410164:	9507      	str	r5, [sp, #28]
  410166:	f04f 0c00 	mov.w	ip, #0
  41016a:	e65d      	b.n	40fe28 <_vfiprintf_r+0x268>
  41016c:	00416e54 	.word	0x00416e54
  410170:	00416dd4 	.word	0x00416dd4
  410174:	9a08      	ldr	r2, [sp, #32]
  410176:	9004      	str	r0, [sp, #16]
  410178:	2330      	movs	r3, #48	; 0x30
  41017a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  41017e:	f102 0b04 	add.w	fp, r2, #4
  410182:	2378      	movs	r3, #120	; 0x78
  410184:	48af      	ldr	r0, [pc, #700]	; (410444 <_vfiprintf_r+0x884>)
  410186:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  41018a:	46ac      	mov	ip, r5
  41018c:	6814      	ldr	r4, [r2, #0]
  41018e:	f8cd b020 	str.w	fp, [sp, #32]
  410192:	f04a 0a02 	orr.w	sl, sl, #2
  410196:	2500      	movs	r5, #0
  410198:	900a      	str	r0, [sp, #40]	; 0x28
  41019a:	2302      	movs	r3, #2
  41019c:	e621      	b.n	40fde2 <_vfiprintf_r+0x222>
  41019e:	f04a 0a20 	orr.w	sl, sl, #32
  4101a2:	f898 3000 	ldrb.w	r3, [r8]
  4101a6:	e578      	b.n	40fc9a <_vfiprintf_r+0xda>
  4101a8:	f8dd b020 	ldr.w	fp, [sp, #32]
  4101ac:	f8db 0000 	ldr.w	r0, [fp]
  4101b0:	2800      	cmp	r0, #0
  4101b2:	f10b 0304 	add.w	r3, fp, #4
  4101b6:	f6ff adfb 	blt.w	40fdb0 <_vfiprintf_r+0x1f0>
  4101ba:	9308      	str	r3, [sp, #32]
  4101bc:	f898 3000 	ldrb.w	r3, [r8]
  4101c0:	e56b      	b.n	40fc9a <_vfiprintf_r+0xda>
  4101c2:	f898 3000 	ldrb.w	r3, [r8]
  4101c6:	212b      	movs	r1, #43	; 0x2b
  4101c8:	e567      	b.n	40fc9a <_vfiprintf_r+0xda>
  4101ca:	f898 3000 	ldrb.w	r3, [r8]
  4101ce:	2b2a      	cmp	r3, #42	; 0x2a
  4101d0:	f108 0401 	add.w	r4, r8, #1
  4101d4:	f000 8309 	beq.w	4107ea <_vfiprintf_r+0xc2a>
  4101d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4101dc:	2a09      	cmp	r2, #9
  4101de:	bf98      	it	ls
  4101e0:	2500      	movls	r5, #0
  4101e2:	f200 82fe 	bhi.w	4107e2 <_vfiprintf_r+0xc22>
  4101e6:	f814 3b01 	ldrb.w	r3, [r4], #1
  4101ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4101ee:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4101f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4101f6:	2a09      	cmp	r2, #9
  4101f8:	d9f5      	bls.n	4101e6 <_vfiprintf_r+0x626>
  4101fa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4101fe:	46a0      	mov	r8, r4
  410200:	e54d      	b.n	40fc9e <_vfiprintf_r+0xde>
  410202:	4c90      	ldr	r4, [pc, #576]	; (410444 <_vfiprintf_r+0x884>)
  410204:	9004      	str	r0, [sp, #16]
  410206:	f01a 0f20 	tst.w	sl, #32
  41020a:	46ac      	mov	ip, r5
  41020c:	940a      	str	r4, [sp, #40]	; 0x28
  41020e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  410212:	f47f af12 	bne.w	41003a <_vfiprintf_r+0x47a>
  410216:	f01a 0f10 	tst.w	sl, #16
  41021a:	f040 81e9 	bne.w	4105f0 <_vfiprintf_r+0xa30>
  41021e:	f01a 0f40 	tst.w	sl, #64	; 0x40
  410222:	f000 81e5 	beq.w	4105f0 <_vfiprintf_r+0xa30>
  410226:	f8dd b020 	ldr.w	fp, [sp, #32]
  41022a:	f8bb 4000 	ldrh.w	r4, [fp]
  41022e:	f10b 0b04 	add.w	fp, fp, #4
  410232:	2500      	movs	r5, #0
  410234:	f8cd b020 	str.w	fp, [sp, #32]
  410238:	e709      	b.n	41004e <_vfiprintf_r+0x48e>
  41023a:	f898 3000 	ldrb.w	r3, [r8]
  41023e:	2900      	cmp	r1, #0
  410240:	f47f ad2b 	bne.w	40fc9a <_vfiprintf_r+0xda>
  410244:	2120      	movs	r1, #32
  410246:	e528      	b.n	40fc9a <_vfiprintf_r+0xda>
  410248:	f04a 0a01 	orr.w	sl, sl, #1
  41024c:	f898 3000 	ldrb.w	r3, [r8]
  410250:	e523      	b.n	40fc9a <_vfiprintf_r+0xda>
  410252:	9004      	str	r0, [sp, #16]
  410254:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  410258:	2b00      	cmp	r3, #0
  41025a:	f000 80f9 	beq.w	410450 <_vfiprintf_r+0x890>
  41025e:	2501      	movs	r5, #1
  410260:	f04f 0b00 	mov.w	fp, #0
  410264:	9503      	str	r5, [sp, #12]
  410266:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  41026a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  41026e:	9505      	str	r5, [sp, #20]
  410270:	af16      	add	r7, sp, #88	; 0x58
  410272:	e710      	b.n	410096 <_vfiprintf_r+0x4d6>
  410274:	9806      	ldr	r0, [sp, #24]
  410276:	9902      	ldr	r1, [sp, #8]
  410278:	aa13      	add	r2, sp, #76	; 0x4c
  41027a:	f7ff fc65 	bl	40fb48 <__sprint_r.part.0>
  41027e:	2800      	cmp	r0, #0
  410280:	f040 80ed 	bne.w	41045e <_vfiprintf_r+0x89e>
  410284:	9814      	ldr	r0, [sp, #80]	; 0x50
  410286:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410288:	1c43      	adds	r3, r0, #1
  41028a:	46cc      	mov	ip, r9
  41028c:	e602      	b.n	40fe94 <_vfiprintf_r+0x2d4>
  41028e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410290:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410292:	1c59      	adds	r1, r3, #1
  410294:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  410298:	b168      	cbz	r0, 4102b6 <_vfiprintf_r+0x6f6>
  41029a:	3201      	adds	r2, #1
  41029c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  4102a0:	2301      	movs	r3, #1
  4102a2:	2907      	cmp	r1, #7
  4102a4:	9215      	str	r2, [sp, #84]	; 0x54
  4102a6:	9114      	str	r1, [sp, #80]	; 0x50
  4102a8:	e886 0009 	stmia.w	r6, {r0, r3}
  4102ac:	f300 8160 	bgt.w	410570 <_vfiprintf_r+0x9b0>
  4102b0:	460b      	mov	r3, r1
  4102b2:	3608      	adds	r6, #8
  4102b4:	3101      	adds	r1, #1
  4102b6:	9c07      	ldr	r4, [sp, #28]
  4102b8:	b164      	cbz	r4, 4102d4 <_vfiprintf_r+0x714>
  4102ba:	3202      	adds	r2, #2
  4102bc:	a812      	add	r0, sp, #72	; 0x48
  4102be:	2302      	movs	r3, #2
  4102c0:	2907      	cmp	r1, #7
  4102c2:	9215      	str	r2, [sp, #84]	; 0x54
  4102c4:	9114      	str	r1, [sp, #80]	; 0x50
  4102c6:	e886 0009 	stmia.w	r6, {r0, r3}
  4102ca:	f300 8157 	bgt.w	41057c <_vfiprintf_r+0x9bc>
  4102ce:	460b      	mov	r3, r1
  4102d0:	3608      	adds	r6, #8
  4102d2:	3101      	adds	r1, #1
  4102d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4102d6:	2d80      	cmp	r5, #128	; 0x80
  4102d8:	f000 8101 	beq.w	4104de <_vfiprintf_r+0x91e>
  4102dc:	9d05      	ldr	r5, [sp, #20]
  4102de:	ebc5 040c 	rsb	r4, r5, ip
  4102e2:	2c00      	cmp	r4, #0
  4102e4:	dd2f      	ble.n	410346 <_vfiprintf_r+0x786>
  4102e6:	2c10      	cmp	r4, #16
  4102e8:	4d57      	ldr	r5, [pc, #348]	; (410448 <_vfiprintf_r+0x888>)
  4102ea:	dd22      	ble.n	410332 <_vfiprintf_r+0x772>
  4102ec:	4630      	mov	r0, r6
  4102ee:	f04f 0b10 	mov.w	fp, #16
  4102f2:	462e      	mov	r6, r5
  4102f4:	4625      	mov	r5, r4
  4102f6:	9c06      	ldr	r4, [sp, #24]
  4102f8:	e006      	b.n	410308 <_vfiprintf_r+0x748>
  4102fa:	f103 0c02 	add.w	ip, r3, #2
  4102fe:	3008      	adds	r0, #8
  410300:	460b      	mov	r3, r1
  410302:	3d10      	subs	r5, #16
  410304:	2d10      	cmp	r5, #16
  410306:	dd10      	ble.n	41032a <_vfiprintf_r+0x76a>
  410308:	1c59      	adds	r1, r3, #1
  41030a:	3210      	adds	r2, #16
  41030c:	2907      	cmp	r1, #7
  41030e:	9215      	str	r2, [sp, #84]	; 0x54
  410310:	e880 0840 	stmia.w	r0, {r6, fp}
  410314:	9114      	str	r1, [sp, #80]	; 0x50
  410316:	ddf0      	ble.n	4102fa <_vfiprintf_r+0x73a>
  410318:	2a00      	cmp	r2, #0
  41031a:	d163      	bne.n	4103e4 <_vfiprintf_r+0x824>
  41031c:	3d10      	subs	r5, #16
  41031e:	2d10      	cmp	r5, #16
  410320:	f04f 0c01 	mov.w	ip, #1
  410324:	4613      	mov	r3, r2
  410326:	4648      	mov	r0, r9
  410328:	dcee      	bgt.n	410308 <_vfiprintf_r+0x748>
  41032a:	462c      	mov	r4, r5
  41032c:	4661      	mov	r1, ip
  41032e:	4635      	mov	r5, r6
  410330:	4606      	mov	r6, r0
  410332:	4422      	add	r2, r4
  410334:	2907      	cmp	r1, #7
  410336:	9215      	str	r2, [sp, #84]	; 0x54
  410338:	6035      	str	r5, [r6, #0]
  41033a:	6074      	str	r4, [r6, #4]
  41033c:	9114      	str	r1, [sp, #80]	; 0x50
  41033e:	f300 80c1 	bgt.w	4104c4 <_vfiprintf_r+0x904>
  410342:	3608      	adds	r6, #8
  410344:	3101      	adds	r1, #1
  410346:	9d05      	ldr	r5, [sp, #20]
  410348:	6037      	str	r7, [r6, #0]
  41034a:	442a      	add	r2, r5
  41034c:	2907      	cmp	r1, #7
  41034e:	9215      	str	r2, [sp, #84]	; 0x54
  410350:	6075      	str	r5, [r6, #4]
  410352:	9114      	str	r1, [sp, #80]	; 0x50
  410354:	f340 80c1 	ble.w	4104da <_vfiprintf_r+0x91a>
  410358:	2a00      	cmp	r2, #0
  41035a:	f040 8130 	bne.w	4105be <_vfiprintf_r+0x9fe>
  41035e:	9214      	str	r2, [sp, #80]	; 0x50
  410360:	464e      	mov	r6, r9
  410362:	f01a 0f04 	tst.w	sl, #4
  410366:	f000 808b 	beq.w	410480 <_vfiprintf_r+0x8c0>
  41036a:	9d04      	ldr	r5, [sp, #16]
  41036c:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410370:	ebcb 0405 	rsb	r4, fp, r5
  410374:	2c00      	cmp	r4, #0
  410376:	f340 8083 	ble.w	410480 <_vfiprintf_r+0x8c0>
  41037a:	2c10      	cmp	r4, #16
  41037c:	f340 8222 	ble.w	4107c4 <_vfiprintf_r+0xc04>
  410380:	9914      	ldr	r1, [sp, #80]	; 0x50
  410382:	4d32      	ldr	r5, [pc, #200]	; (41044c <_vfiprintf_r+0x88c>)
  410384:	f8dd a018 	ldr.w	sl, [sp, #24]
  410388:	f8dd b008 	ldr.w	fp, [sp, #8]
  41038c:	2710      	movs	r7, #16
  41038e:	e005      	b.n	41039c <_vfiprintf_r+0x7dc>
  410390:	1c88      	adds	r0, r1, #2
  410392:	3608      	adds	r6, #8
  410394:	4619      	mov	r1, r3
  410396:	3c10      	subs	r4, #16
  410398:	2c10      	cmp	r4, #16
  41039a:	dd10      	ble.n	4103be <_vfiprintf_r+0x7fe>
  41039c:	1c4b      	adds	r3, r1, #1
  41039e:	3210      	adds	r2, #16
  4103a0:	2b07      	cmp	r3, #7
  4103a2:	9215      	str	r2, [sp, #84]	; 0x54
  4103a4:	e886 00a0 	stmia.w	r6, {r5, r7}
  4103a8:	9314      	str	r3, [sp, #80]	; 0x50
  4103aa:	ddf1      	ble.n	410390 <_vfiprintf_r+0x7d0>
  4103ac:	2a00      	cmp	r2, #0
  4103ae:	d17d      	bne.n	4104ac <_vfiprintf_r+0x8ec>
  4103b0:	3c10      	subs	r4, #16
  4103b2:	2c10      	cmp	r4, #16
  4103b4:	f04f 0001 	mov.w	r0, #1
  4103b8:	4611      	mov	r1, r2
  4103ba:	464e      	mov	r6, r9
  4103bc:	dcee      	bgt.n	41039c <_vfiprintf_r+0x7dc>
  4103be:	4422      	add	r2, r4
  4103c0:	2807      	cmp	r0, #7
  4103c2:	9215      	str	r2, [sp, #84]	; 0x54
  4103c4:	6035      	str	r5, [r6, #0]
  4103c6:	6074      	str	r4, [r6, #4]
  4103c8:	9014      	str	r0, [sp, #80]	; 0x50
  4103ca:	dd59      	ble.n	410480 <_vfiprintf_r+0x8c0>
  4103cc:	2a00      	cmp	r2, #0
  4103ce:	d14f      	bne.n	410470 <_vfiprintf_r+0x8b0>
  4103d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4103d2:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4103d6:	9d04      	ldr	r5, [sp, #16]
  4103d8:	45ab      	cmp	fp, r5
  4103da:	bfac      	ite	ge
  4103dc:	445c      	addge	r4, fp
  4103de:	1964      	addlt	r4, r4, r5
  4103e0:	9409      	str	r4, [sp, #36]	; 0x24
  4103e2:	e05e      	b.n	4104a2 <_vfiprintf_r+0x8e2>
  4103e4:	4620      	mov	r0, r4
  4103e6:	9902      	ldr	r1, [sp, #8]
  4103e8:	aa13      	add	r2, sp, #76	; 0x4c
  4103ea:	f7ff fbad 	bl	40fb48 <__sprint_r.part.0>
  4103ee:	2800      	cmp	r0, #0
  4103f0:	d135      	bne.n	41045e <_vfiprintf_r+0x89e>
  4103f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4103f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4103f6:	f103 0c01 	add.w	ip, r3, #1
  4103fa:	4648      	mov	r0, r9
  4103fc:	e781      	b.n	410302 <_vfiprintf_r+0x742>
  4103fe:	08e0      	lsrs	r0, r4, #3
  410400:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  410404:	f004 0207 	and.w	r2, r4, #7
  410408:	08e9      	lsrs	r1, r5, #3
  41040a:	3230      	adds	r2, #48	; 0x30
  41040c:	ea50 0b01 	orrs.w	fp, r0, r1
  410410:	461f      	mov	r7, r3
  410412:	701a      	strb	r2, [r3, #0]
  410414:	4604      	mov	r4, r0
  410416:	460d      	mov	r5, r1
  410418:	f103 33ff 	add.w	r3, r3, #4294967295
  41041c:	d1ef      	bne.n	4103fe <_vfiprintf_r+0x83e>
  41041e:	f01a 0f01 	tst.w	sl, #1
  410422:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  410426:	4639      	mov	r1, r7
  410428:	f000 80b9 	beq.w	41059e <_vfiprintf_r+0x9de>
  41042c:	2a30      	cmp	r2, #48	; 0x30
  41042e:	f43f acf8 	beq.w	40fe22 <_vfiprintf_r+0x262>
  410432:	461f      	mov	r7, r3
  410434:	ebc7 0509 	rsb	r5, r7, r9
  410438:	2330      	movs	r3, #48	; 0x30
  41043a:	9505      	str	r5, [sp, #20]
  41043c:	f801 3c01 	strb.w	r3, [r1, #-1]
  410440:	e4f2      	b.n	40fe28 <_vfiprintf_r+0x268>
  410442:	bf00      	nop
  410444:	00416de8 	.word	0x00416de8
  410448:	00416e44 	.word	0x00416e44
  41044c:	00416e54 	.word	0x00416e54
  410450:	9b15      	ldr	r3, [sp, #84]	; 0x54
  410452:	b123      	cbz	r3, 41045e <_vfiprintf_r+0x89e>
  410454:	9806      	ldr	r0, [sp, #24]
  410456:	9902      	ldr	r1, [sp, #8]
  410458:	aa13      	add	r2, sp, #76	; 0x4c
  41045a:	f7ff fb75 	bl	40fb48 <__sprint_r.part.0>
  41045e:	9c02      	ldr	r4, [sp, #8]
  410460:	89a3      	ldrh	r3, [r4, #12]
  410462:	065b      	lsls	r3, r3, #25
  410464:	f53f ac9c 	bmi.w	40fda0 <_vfiprintf_r+0x1e0>
  410468:	9809      	ldr	r0, [sp, #36]	; 0x24
  41046a:	b031      	add	sp, #196	; 0xc4
  41046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410470:	9806      	ldr	r0, [sp, #24]
  410472:	9902      	ldr	r1, [sp, #8]
  410474:	aa13      	add	r2, sp, #76	; 0x4c
  410476:	f7ff fb67 	bl	40fb48 <__sprint_r.part.0>
  41047a:	2800      	cmp	r0, #0
  41047c:	d1ef      	bne.n	41045e <_vfiprintf_r+0x89e>
  41047e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410480:	9c09      	ldr	r4, [sp, #36]	; 0x24
  410482:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410486:	9d04      	ldr	r5, [sp, #16]
  410488:	45ab      	cmp	fp, r5
  41048a:	bfac      	ite	ge
  41048c:	445c      	addge	r4, fp
  41048e:	1964      	addlt	r4, r4, r5
  410490:	9409      	str	r4, [sp, #36]	; 0x24
  410492:	b132      	cbz	r2, 4104a2 <_vfiprintf_r+0x8e2>
  410494:	9806      	ldr	r0, [sp, #24]
  410496:	9902      	ldr	r1, [sp, #8]
  410498:	aa13      	add	r2, sp, #76	; 0x4c
  41049a:	f7ff fb55 	bl	40fb48 <__sprint_r.part.0>
  41049e:	2800      	cmp	r0, #0
  4104a0:	d1dd      	bne.n	41045e <_vfiprintf_r+0x89e>
  4104a2:	2000      	movs	r0, #0
  4104a4:	9014      	str	r0, [sp, #80]	; 0x50
  4104a6:	464e      	mov	r6, r9
  4104a8:	f7ff bbbd 	b.w	40fc26 <_vfiprintf_r+0x66>
  4104ac:	4650      	mov	r0, sl
  4104ae:	4659      	mov	r1, fp
  4104b0:	aa13      	add	r2, sp, #76	; 0x4c
  4104b2:	f7ff fb49 	bl	40fb48 <__sprint_r.part.0>
  4104b6:	2800      	cmp	r0, #0
  4104b8:	d1d1      	bne.n	41045e <_vfiprintf_r+0x89e>
  4104ba:	9914      	ldr	r1, [sp, #80]	; 0x50
  4104bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4104be:	1c48      	adds	r0, r1, #1
  4104c0:	464e      	mov	r6, r9
  4104c2:	e768      	b.n	410396 <_vfiprintf_r+0x7d6>
  4104c4:	2a00      	cmp	r2, #0
  4104c6:	f040 80fa 	bne.w	4106be <_vfiprintf_r+0xafe>
  4104ca:	9c05      	ldr	r4, [sp, #20]
  4104cc:	9720      	str	r7, [sp, #128]	; 0x80
  4104ce:	2301      	movs	r3, #1
  4104d0:	9421      	str	r4, [sp, #132]	; 0x84
  4104d2:	9415      	str	r4, [sp, #84]	; 0x54
  4104d4:	4622      	mov	r2, r4
  4104d6:	9314      	str	r3, [sp, #80]	; 0x50
  4104d8:	464e      	mov	r6, r9
  4104da:	3608      	adds	r6, #8
  4104dc:	e741      	b.n	410362 <_vfiprintf_r+0x7a2>
  4104de:	9d04      	ldr	r5, [sp, #16]
  4104e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4104e4:	ebcb 0405 	rsb	r4, fp, r5
  4104e8:	2c00      	cmp	r4, #0
  4104ea:	f77f aef7 	ble.w	4102dc <_vfiprintf_r+0x71c>
  4104ee:	2c10      	cmp	r4, #16
  4104f0:	4da8      	ldr	r5, [pc, #672]	; (410794 <_vfiprintf_r+0xbd4>)
  4104f2:	f340 8174 	ble.w	4107de <_vfiprintf_r+0xc1e>
  4104f6:	4629      	mov	r1, r5
  4104f8:	f04f 0b10 	mov.w	fp, #16
  4104fc:	4625      	mov	r5, r4
  4104fe:	4664      	mov	r4, ip
  410500:	46b4      	mov	ip, r6
  410502:	460e      	mov	r6, r1
  410504:	e006      	b.n	410514 <_vfiprintf_r+0x954>
  410506:	1c98      	adds	r0, r3, #2
  410508:	f10c 0c08 	add.w	ip, ip, #8
  41050c:	460b      	mov	r3, r1
  41050e:	3d10      	subs	r5, #16
  410510:	2d10      	cmp	r5, #16
  410512:	dd0f      	ble.n	410534 <_vfiprintf_r+0x974>
  410514:	1c59      	adds	r1, r3, #1
  410516:	3210      	adds	r2, #16
  410518:	2907      	cmp	r1, #7
  41051a:	9215      	str	r2, [sp, #84]	; 0x54
  41051c:	e88c 0840 	stmia.w	ip, {r6, fp}
  410520:	9114      	str	r1, [sp, #80]	; 0x50
  410522:	ddf0      	ble.n	410506 <_vfiprintf_r+0x946>
  410524:	b9ba      	cbnz	r2, 410556 <_vfiprintf_r+0x996>
  410526:	3d10      	subs	r5, #16
  410528:	2d10      	cmp	r5, #16
  41052a:	f04f 0001 	mov.w	r0, #1
  41052e:	4613      	mov	r3, r2
  410530:	46cc      	mov	ip, r9
  410532:	dcef      	bgt.n	410514 <_vfiprintf_r+0x954>
  410534:	4633      	mov	r3, r6
  410536:	4666      	mov	r6, ip
  410538:	46a4      	mov	ip, r4
  41053a:	462c      	mov	r4, r5
  41053c:	461d      	mov	r5, r3
  41053e:	4422      	add	r2, r4
  410540:	2807      	cmp	r0, #7
  410542:	9215      	str	r2, [sp, #84]	; 0x54
  410544:	6035      	str	r5, [r6, #0]
  410546:	6074      	str	r4, [r6, #4]
  410548:	9014      	str	r0, [sp, #80]	; 0x50
  41054a:	f300 80b2 	bgt.w	4106b2 <_vfiprintf_r+0xaf2>
  41054e:	3608      	adds	r6, #8
  410550:	1c41      	adds	r1, r0, #1
  410552:	4603      	mov	r3, r0
  410554:	e6c2      	b.n	4102dc <_vfiprintf_r+0x71c>
  410556:	9806      	ldr	r0, [sp, #24]
  410558:	9902      	ldr	r1, [sp, #8]
  41055a:	aa13      	add	r2, sp, #76	; 0x4c
  41055c:	f7ff faf4 	bl	40fb48 <__sprint_r.part.0>
  410560:	2800      	cmp	r0, #0
  410562:	f47f af7c 	bne.w	41045e <_vfiprintf_r+0x89e>
  410566:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410568:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41056a:	1c58      	adds	r0, r3, #1
  41056c:	46cc      	mov	ip, r9
  41056e:	e7ce      	b.n	41050e <_vfiprintf_r+0x94e>
  410570:	2a00      	cmp	r2, #0
  410572:	d17c      	bne.n	41066e <_vfiprintf_r+0xaae>
  410574:	4619      	mov	r1, r3
  410576:	464e      	mov	r6, r9
  410578:	4613      	mov	r3, r2
  41057a:	e69c      	b.n	4102b6 <_vfiprintf_r+0x6f6>
  41057c:	2a00      	cmp	r2, #0
  41057e:	f040 8087 	bne.w	410690 <_vfiprintf_r+0xad0>
  410582:	2101      	movs	r1, #1
  410584:	4613      	mov	r3, r2
  410586:	464e      	mov	r6, r9
  410588:	e6a4      	b.n	4102d4 <_vfiprintf_r+0x714>
  41058a:	464f      	mov	r7, r9
  41058c:	e44c      	b.n	40fe28 <_vfiprintf_r+0x268>
  41058e:	2d00      	cmp	r5, #0
  410590:	bf08      	it	eq
  410592:	2c0a      	cmpeq	r4, #10
  410594:	d249      	bcs.n	41062a <_vfiprintf_r+0xa6a>
  410596:	af30      	add	r7, sp, #192	; 0xc0
  410598:	3430      	adds	r4, #48	; 0x30
  41059a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  41059e:	ebc7 0309 	rsb	r3, r7, r9
  4105a2:	9305      	str	r3, [sp, #20]
  4105a4:	e440      	b.n	40fe28 <_vfiprintf_r+0x268>
  4105a6:	2302      	movs	r3, #2
  4105a8:	e41b      	b.n	40fde2 <_vfiprintf_r+0x222>
  4105aa:	2a00      	cmp	r2, #0
  4105ac:	f040 80b2 	bne.w	410714 <_vfiprintf_r+0xb54>
  4105b0:	4613      	mov	r3, r2
  4105b2:	2101      	movs	r1, #1
  4105b4:	464e      	mov	r6, r9
  4105b6:	e66d      	b.n	410294 <_vfiprintf_r+0x6d4>
  4105b8:	4644      	mov	r4, r8
  4105ba:	f7ff bb5c 	b.w	40fc76 <_vfiprintf_r+0xb6>
  4105be:	9806      	ldr	r0, [sp, #24]
  4105c0:	9902      	ldr	r1, [sp, #8]
  4105c2:	aa13      	add	r2, sp, #76	; 0x4c
  4105c4:	f7ff fac0 	bl	40fb48 <__sprint_r.part.0>
  4105c8:	2800      	cmp	r0, #0
  4105ca:	f47f af48 	bne.w	41045e <_vfiprintf_r+0x89e>
  4105ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4105d0:	464e      	mov	r6, r9
  4105d2:	e6c6      	b.n	410362 <_vfiprintf_r+0x7a2>
  4105d4:	9d08      	ldr	r5, [sp, #32]
  4105d6:	682c      	ldr	r4, [r5, #0]
  4105d8:	3504      	adds	r5, #4
  4105da:	9508      	str	r5, [sp, #32]
  4105dc:	2500      	movs	r5, #0
  4105de:	e400      	b.n	40fde2 <_vfiprintf_r+0x222>
  4105e0:	9d08      	ldr	r5, [sp, #32]
  4105e2:	682c      	ldr	r4, [r5, #0]
  4105e4:	3504      	adds	r5, #4
  4105e6:	9508      	str	r5, [sp, #32]
  4105e8:	2301      	movs	r3, #1
  4105ea:	2500      	movs	r5, #0
  4105ec:	f7ff bbf9 	b.w	40fde2 <_vfiprintf_r+0x222>
  4105f0:	9d08      	ldr	r5, [sp, #32]
  4105f2:	682c      	ldr	r4, [r5, #0]
  4105f4:	3504      	adds	r5, #4
  4105f6:	9508      	str	r5, [sp, #32]
  4105f8:	2500      	movs	r5, #0
  4105fa:	e528      	b.n	41004e <_vfiprintf_r+0x48e>
  4105fc:	9d08      	ldr	r5, [sp, #32]
  4105fe:	f8dd b020 	ldr.w	fp, [sp, #32]
  410602:	682c      	ldr	r4, [r5, #0]
  410604:	f10b 0b04 	add.w	fp, fp, #4
  410608:	17e5      	asrs	r5, r4, #31
  41060a:	f8cd b020 	str.w	fp, [sp, #32]
  41060e:	4622      	mov	r2, r4
  410610:	462b      	mov	r3, r5
  410612:	e48f      	b.n	40ff34 <_vfiprintf_r+0x374>
  410614:	9806      	ldr	r0, [sp, #24]
  410616:	9902      	ldr	r1, [sp, #8]
  410618:	aa13      	add	r2, sp, #76	; 0x4c
  41061a:	f7ff fa95 	bl	40fb48 <__sprint_r.part.0>
  41061e:	2800      	cmp	r0, #0
  410620:	f47f af1d 	bne.w	41045e <_vfiprintf_r+0x89e>
  410624:	464e      	mov	r6, r9
  410626:	f7ff bb9b 	b.w	40fd60 <_vfiprintf_r+0x1a0>
  41062a:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  41062e:	9603      	str	r6, [sp, #12]
  410630:	465e      	mov	r6, fp
  410632:	46e3      	mov	fp, ip
  410634:	4620      	mov	r0, r4
  410636:	4629      	mov	r1, r5
  410638:	220a      	movs	r2, #10
  41063a:	2300      	movs	r3, #0
  41063c:	f7fb fe72 	bl	40c324 <__aeabi_uldivmod>
  410640:	3230      	adds	r2, #48	; 0x30
  410642:	7032      	strb	r2, [r6, #0]
  410644:	4620      	mov	r0, r4
  410646:	4629      	mov	r1, r5
  410648:	220a      	movs	r2, #10
  41064a:	2300      	movs	r3, #0
  41064c:	f7fb fe6a 	bl	40c324 <__aeabi_uldivmod>
  410650:	4604      	mov	r4, r0
  410652:	460d      	mov	r5, r1
  410654:	ea54 0005 	orrs.w	r0, r4, r5
  410658:	4637      	mov	r7, r6
  41065a:	f106 36ff 	add.w	r6, r6, #4294967295
  41065e:	d1e9      	bne.n	410634 <_vfiprintf_r+0xa74>
  410660:	ebc7 0309 	rsb	r3, r7, r9
  410664:	46dc      	mov	ip, fp
  410666:	9e03      	ldr	r6, [sp, #12]
  410668:	9305      	str	r3, [sp, #20]
  41066a:	f7ff bbdd 	b.w	40fe28 <_vfiprintf_r+0x268>
  41066e:	9806      	ldr	r0, [sp, #24]
  410670:	9902      	ldr	r1, [sp, #8]
  410672:	f8cd c004 	str.w	ip, [sp, #4]
  410676:	aa13      	add	r2, sp, #76	; 0x4c
  410678:	f7ff fa66 	bl	40fb48 <__sprint_r.part.0>
  41067c:	f8dd c004 	ldr.w	ip, [sp, #4]
  410680:	2800      	cmp	r0, #0
  410682:	f47f aeec 	bne.w	41045e <_vfiprintf_r+0x89e>
  410686:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410688:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41068a:	1c59      	adds	r1, r3, #1
  41068c:	464e      	mov	r6, r9
  41068e:	e612      	b.n	4102b6 <_vfiprintf_r+0x6f6>
  410690:	9806      	ldr	r0, [sp, #24]
  410692:	9902      	ldr	r1, [sp, #8]
  410694:	f8cd c004 	str.w	ip, [sp, #4]
  410698:	aa13      	add	r2, sp, #76	; 0x4c
  41069a:	f7ff fa55 	bl	40fb48 <__sprint_r.part.0>
  41069e:	f8dd c004 	ldr.w	ip, [sp, #4]
  4106a2:	2800      	cmp	r0, #0
  4106a4:	f47f aedb 	bne.w	41045e <_vfiprintf_r+0x89e>
  4106a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4106aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4106ac:	1c59      	adds	r1, r3, #1
  4106ae:	464e      	mov	r6, r9
  4106b0:	e610      	b.n	4102d4 <_vfiprintf_r+0x714>
  4106b2:	2a00      	cmp	r2, #0
  4106b4:	d156      	bne.n	410764 <_vfiprintf_r+0xba4>
  4106b6:	2101      	movs	r1, #1
  4106b8:	4613      	mov	r3, r2
  4106ba:	464e      	mov	r6, r9
  4106bc:	e60e      	b.n	4102dc <_vfiprintf_r+0x71c>
  4106be:	9806      	ldr	r0, [sp, #24]
  4106c0:	9902      	ldr	r1, [sp, #8]
  4106c2:	aa13      	add	r2, sp, #76	; 0x4c
  4106c4:	f7ff fa40 	bl	40fb48 <__sprint_r.part.0>
  4106c8:	2800      	cmp	r0, #0
  4106ca:	f47f aec8 	bne.w	41045e <_vfiprintf_r+0x89e>
  4106ce:	9914      	ldr	r1, [sp, #80]	; 0x50
  4106d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4106d2:	3101      	adds	r1, #1
  4106d4:	464e      	mov	r6, r9
  4106d6:	e636      	b.n	410346 <_vfiprintf_r+0x786>
  4106d8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  4106dc:	4264      	negs	r4, r4
  4106de:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4106e2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  4106e6:	f8cd b01c 	str.w	fp, [sp, #28]
  4106ea:	f8cd c014 	str.w	ip, [sp, #20]
  4106ee:	2301      	movs	r3, #1
  4106f0:	f7ff bb7f 	b.w	40fdf2 <_vfiprintf_r+0x232>
  4106f4:	f01a 0f10 	tst.w	sl, #16
  4106f8:	d11d      	bne.n	410736 <_vfiprintf_r+0xb76>
  4106fa:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4106fe:	d059      	beq.n	4107b4 <_vfiprintf_r+0xbf4>
  410700:	9d08      	ldr	r5, [sp, #32]
  410702:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410706:	682b      	ldr	r3, [r5, #0]
  410708:	3504      	adds	r5, #4
  41070a:	9508      	str	r5, [sp, #32]
  41070c:	f8a3 b000 	strh.w	fp, [r3]
  410710:	f7ff ba89 	b.w	40fc26 <_vfiprintf_r+0x66>
  410714:	9806      	ldr	r0, [sp, #24]
  410716:	9902      	ldr	r1, [sp, #8]
  410718:	f8cd c004 	str.w	ip, [sp, #4]
  41071c:	aa13      	add	r2, sp, #76	; 0x4c
  41071e:	f7ff fa13 	bl	40fb48 <__sprint_r.part.0>
  410722:	f8dd c004 	ldr.w	ip, [sp, #4]
  410726:	2800      	cmp	r0, #0
  410728:	f47f ae99 	bne.w	41045e <_vfiprintf_r+0x89e>
  41072c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41072e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410730:	1c59      	adds	r1, r3, #1
  410732:	464e      	mov	r6, r9
  410734:	e5ae      	b.n	410294 <_vfiprintf_r+0x6d4>
  410736:	f8dd b020 	ldr.w	fp, [sp, #32]
  41073a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41073c:	f8db 3000 	ldr.w	r3, [fp]
  410740:	f10b 0b04 	add.w	fp, fp, #4
  410744:	f8cd b020 	str.w	fp, [sp, #32]
  410748:	601c      	str	r4, [r3, #0]
  41074a:	f7ff ba6c 	b.w	40fc26 <_vfiprintf_r+0x66>
  41074e:	9408      	str	r4, [sp, #32]
  410750:	f7fc ff84 	bl	40d65c <strlen>
  410754:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  410758:	9005      	str	r0, [sp, #20]
  41075a:	9407      	str	r4, [sp, #28]
  41075c:	f04f 0c00 	mov.w	ip, #0
  410760:	f7ff bb62 	b.w	40fe28 <_vfiprintf_r+0x268>
  410764:	9806      	ldr	r0, [sp, #24]
  410766:	9902      	ldr	r1, [sp, #8]
  410768:	f8cd c004 	str.w	ip, [sp, #4]
  41076c:	aa13      	add	r2, sp, #76	; 0x4c
  41076e:	f7ff f9eb 	bl	40fb48 <__sprint_r.part.0>
  410772:	f8dd c004 	ldr.w	ip, [sp, #4]
  410776:	2800      	cmp	r0, #0
  410778:	f47f ae71 	bne.w	41045e <_vfiprintf_r+0x89e>
  41077c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41077e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410780:	1c59      	adds	r1, r3, #1
  410782:	464e      	mov	r6, r9
  410784:	e5aa      	b.n	4102dc <_vfiprintf_r+0x71c>
  410786:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410788:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41078a:	4d03      	ldr	r5, [pc, #12]	; (410798 <_vfiprintf_r+0xbd8>)
  41078c:	3301      	adds	r3, #1
  41078e:	f7ff bb9b 	b.w	40fec8 <_vfiprintf_r+0x308>
  410792:	bf00      	nop
  410794:	00416e44 	.word	0x00416e44
  410798:	00416e54 	.word	0x00416e54
  41079c:	f1bc 0f06 	cmp.w	ip, #6
  4107a0:	bf34      	ite	cc
  4107a2:	4663      	movcc	r3, ip
  4107a4:	2306      	movcs	r3, #6
  4107a6:	9408      	str	r4, [sp, #32]
  4107a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  4107ac:	9305      	str	r3, [sp, #20]
  4107ae:	9403      	str	r4, [sp, #12]
  4107b0:	4f16      	ldr	r7, [pc, #88]	; (41080c <_vfiprintf_r+0xc4c>)
  4107b2:	e470      	b.n	410096 <_vfiprintf_r+0x4d6>
  4107b4:	9c08      	ldr	r4, [sp, #32]
  4107b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4107b8:	6823      	ldr	r3, [r4, #0]
  4107ba:	3404      	adds	r4, #4
  4107bc:	9408      	str	r4, [sp, #32]
  4107be:	601d      	str	r5, [r3, #0]
  4107c0:	f7ff ba31 	b.w	40fc26 <_vfiprintf_r+0x66>
  4107c4:	9814      	ldr	r0, [sp, #80]	; 0x50
  4107c6:	4d12      	ldr	r5, [pc, #72]	; (410810 <_vfiprintf_r+0xc50>)
  4107c8:	3001      	adds	r0, #1
  4107ca:	e5f8      	b.n	4103be <_vfiprintf_r+0x7fe>
  4107cc:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  4107d0:	f8cd c014 	str.w	ip, [sp, #20]
  4107d4:	9507      	str	r5, [sp, #28]
  4107d6:	9408      	str	r4, [sp, #32]
  4107d8:	4684      	mov	ip, r0
  4107da:	f7ff bb25 	b.w	40fe28 <_vfiprintf_r+0x268>
  4107de:	4608      	mov	r0, r1
  4107e0:	e6ad      	b.n	41053e <_vfiprintf_r+0x97e>
  4107e2:	46a0      	mov	r8, r4
  4107e4:	2500      	movs	r5, #0
  4107e6:	f7ff ba5a 	b.w	40fc9e <_vfiprintf_r+0xde>
  4107ea:	f8dd b020 	ldr.w	fp, [sp, #32]
  4107ee:	f898 3001 	ldrb.w	r3, [r8, #1]
  4107f2:	f8db 5000 	ldr.w	r5, [fp]
  4107f6:	f10b 0204 	add.w	r2, fp, #4
  4107fa:	2d00      	cmp	r5, #0
  4107fc:	9208      	str	r2, [sp, #32]
  4107fe:	46a0      	mov	r8, r4
  410800:	f6bf aa4b 	bge.w	40fc9a <_vfiprintf_r+0xda>
  410804:	f04f 35ff 	mov.w	r5, #4294967295
  410808:	f7ff ba47 	b.w	40fc9a <_vfiprintf_r+0xda>
  41080c:	00416dfc 	.word	0x00416dfc
  410810:	00416e54 	.word	0x00416e54

00410814 <__sbprintf>:
  410814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  410818:	460c      	mov	r4, r1
  41081a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  41081e:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  410822:	69e7      	ldr	r7, [r4, #28]
  410824:	6e49      	ldr	r1, [r1, #100]	; 0x64
  410826:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  41082a:	9119      	str	r1, [sp, #100]	; 0x64
  41082c:	ad1a      	add	r5, sp, #104	; 0x68
  41082e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  410832:	f04f 0e00 	mov.w	lr, #0
  410836:	9707      	str	r7, [sp, #28]
  410838:	f029 0902 	bic.w	r9, r9, #2
  41083c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41083e:	9500      	str	r5, [sp, #0]
  410840:	4669      	mov	r1, sp
  410842:	9504      	str	r5, [sp, #16]
  410844:	9602      	str	r6, [sp, #8]
  410846:	9605      	str	r6, [sp, #20]
  410848:	f8ad 900c 	strh.w	r9, [sp, #12]
  41084c:	f8ad 800e 	strh.w	r8, [sp, #14]
  410850:	9709      	str	r7, [sp, #36]	; 0x24
  410852:	f8cd e018 	str.w	lr, [sp, #24]
  410856:	4606      	mov	r6, r0
  410858:	f7ff f9b2 	bl	40fbc0 <_vfiprintf_r>
  41085c:	1e05      	subs	r5, r0, #0
  41085e:	db07      	blt.n	410870 <__sbprintf+0x5c>
  410860:	4630      	mov	r0, r6
  410862:	4669      	mov	r1, sp
  410864:	f001 f90a 	bl	411a7c <_fflush_r>
  410868:	2800      	cmp	r0, #0
  41086a:	bf18      	it	ne
  41086c:	f04f 35ff 	movne.w	r5, #4294967295
  410870:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  410874:	065b      	lsls	r3, r3, #25
  410876:	d503      	bpl.n	410880 <__sbprintf+0x6c>
  410878:	89a3      	ldrh	r3, [r4, #12]
  41087a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41087e:	81a3      	strh	r3, [r4, #12]
  410880:	4628      	mov	r0, r5
  410882:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  410886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41088a:	bf00      	nop

0041088c <_write_r>:
  41088c:	b570      	push	{r4, r5, r6, lr}
  41088e:	4c08      	ldr	r4, [pc, #32]	; (4108b0 <_write_r+0x24>)
  410890:	4606      	mov	r6, r0
  410892:	2500      	movs	r5, #0
  410894:	4608      	mov	r0, r1
  410896:	4611      	mov	r1, r2
  410898:	461a      	mov	r2, r3
  41089a:	6025      	str	r5, [r4, #0]
  41089c:	f7f1 f9e0 	bl	401c60 <_write>
  4108a0:	1c43      	adds	r3, r0, #1
  4108a2:	d000      	beq.n	4108a6 <_write_r+0x1a>
  4108a4:	bd70      	pop	{r4, r5, r6, pc}
  4108a6:	6823      	ldr	r3, [r4, #0]
  4108a8:	2b00      	cmp	r3, #0
  4108aa:	d0fb      	beq.n	4108a4 <_write_r+0x18>
  4108ac:	6033      	str	r3, [r6, #0]
  4108ae:	bd70      	pop	{r4, r5, r6, pc}
  4108b0:	200040e8 	.word	0x200040e8

004108b4 <__swsetup_r>:
  4108b4:	4b2f      	ldr	r3, [pc, #188]	; (410974 <__swsetup_r+0xc0>)
  4108b6:	681b      	ldr	r3, [r3, #0]
  4108b8:	b570      	push	{r4, r5, r6, lr}
  4108ba:	4606      	mov	r6, r0
  4108bc:	460c      	mov	r4, r1
  4108be:	b113      	cbz	r3, 4108c6 <__swsetup_r+0x12>
  4108c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4108c2:	2a00      	cmp	r2, #0
  4108c4:	d036      	beq.n	410934 <__swsetup_r+0x80>
  4108c6:	89a5      	ldrh	r5, [r4, #12]
  4108c8:	b2ab      	uxth	r3, r5
  4108ca:	0719      	lsls	r1, r3, #28
  4108cc:	d50c      	bpl.n	4108e8 <__swsetup_r+0x34>
  4108ce:	6922      	ldr	r2, [r4, #16]
  4108d0:	b1aa      	cbz	r2, 4108fe <__swsetup_r+0x4a>
  4108d2:	f013 0101 	ands.w	r1, r3, #1
  4108d6:	d01e      	beq.n	410916 <__swsetup_r+0x62>
  4108d8:	6963      	ldr	r3, [r4, #20]
  4108da:	2100      	movs	r1, #0
  4108dc:	425b      	negs	r3, r3
  4108de:	61a3      	str	r3, [r4, #24]
  4108e0:	60a1      	str	r1, [r4, #8]
  4108e2:	b1f2      	cbz	r2, 410922 <__swsetup_r+0x6e>
  4108e4:	2000      	movs	r0, #0
  4108e6:	bd70      	pop	{r4, r5, r6, pc}
  4108e8:	06da      	lsls	r2, r3, #27
  4108ea:	d53b      	bpl.n	410964 <__swsetup_r+0xb0>
  4108ec:	075b      	lsls	r3, r3, #29
  4108ee:	d425      	bmi.n	41093c <__swsetup_r+0x88>
  4108f0:	6922      	ldr	r2, [r4, #16]
  4108f2:	f045 0308 	orr.w	r3, r5, #8
  4108f6:	81a3      	strh	r3, [r4, #12]
  4108f8:	b29b      	uxth	r3, r3
  4108fa:	2a00      	cmp	r2, #0
  4108fc:	d1e9      	bne.n	4108d2 <__swsetup_r+0x1e>
  4108fe:	f403 7120 	and.w	r1, r3, #640	; 0x280
  410902:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  410906:	d0e4      	beq.n	4108d2 <__swsetup_r+0x1e>
  410908:	4630      	mov	r0, r6
  41090a:	4621      	mov	r1, r4
  41090c:	f001 fcc4 	bl	412298 <__smakebuf_r>
  410910:	89a3      	ldrh	r3, [r4, #12]
  410912:	6922      	ldr	r2, [r4, #16]
  410914:	e7dd      	b.n	4108d2 <__swsetup_r+0x1e>
  410916:	0798      	lsls	r0, r3, #30
  410918:	bf58      	it	pl
  41091a:	6961      	ldrpl	r1, [r4, #20]
  41091c:	60a1      	str	r1, [r4, #8]
  41091e:	2a00      	cmp	r2, #0
  410920:	d1e0      	bne.n	4108e4 <__swsetup_r+0x30>
  410922:	89a3      	ldrh	r3, [r4, #12]
  410924:	061a      	lsls	r2, r3, #24
  410926:	d5dd      	bpl.n	4108e4 <__swsetup_r+0x30>
  410928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41092c:	81a3      	strh	r3, [r4, #12]
  41092e:	f04f 30ff 	mov.w	r0, #4294967295
  410932:	bd70      	pop	{r4, r5, r6, pc}
  410934:	4618      	mov	r0, r3
  410936:	f001 f8bd 	bl	411ab4 <__sinit>
  41093a:	e7c4      	b.n	4108c6 <__swsetup_r+0x12>
  41093c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41093e:	b149      	cbz	r1, 410954 <__swsetup_r+0xa0>
  410940:	f104 0340 	add.w	r3, r4, #64	; 0x40
  410944:	4299      	cmp	r1, r3
  410946:	d003      	beq.n	410950 <__swsetup_r+0x9c>
  410948:	4630      	mov	r0, r6
  41094a:	f001 f9f5 	bl	411d38 <_free_r>
  41094e:	89a5      	ldrh	r5, [r4, #12]
  410950:	2300      	movs	r3, #0
  410952:	6323      	str	r3, [r4, #48]	; 0x30
  410954:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  410958:	2300      	movs	r3, #0
  41095a:	6922      	ldr	r2, [r4, #16]
  41095c:	6063      	str	r3, [r4, #4]
  41095e:	b2ad      	uxth	r5, r5
  410960:	6022      	str	r2, [r4, #0]
  410962:	e7c6      	b.n	4108f2 <__swsetup_r+0x3e>
  410964:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  410968:	2309      	movs	r3, #9
  41096a:	6033      	str	r3, [r6, #0]
  41096c:	f04f 30ff 	mov.w	r0, #4294967295
  410970:	81a5      	strh	r5, [r4, #12]
  410972:	bd70      	pop	{r4, r5, r6, pc}
  410974:	20000918 	.word	0x20000918

00410978 <register_fini>:
  410978:	4b02      	ldr	r3, [pc, #8]	; (410984 <register_fini+0xc>)
  41097a:	b113      	cbz	r3, 410982 <register_fini+0xa>
  41097c:	4802      	ldr	r0, [pc, #8]	; (410988 <register_fini+0x10>)
  41097e:	f000 b805 	b.w	41098c <atexit>
  410982:	4770      	bx	lr
  410984:	00000000 	.word	0x00000000
  410988:	00411bb1 	.word	0x00411bb1

0041098c <atexit>:
  41098c:	4601      	mov	r1, r0
  41098e:	2000      	movs	r0, #0
  410990:	4602      	mov	r2, r0
  410992:	4603      	mov	r3, r0
  410994:	f004 b8dc 	b.w	414b50 <__register_exitproc>

00410998 <_close_r>:
  410998:	b538      	push	{r3, r4, r5, lr}
  41099a:	4c07      	ldr	r4, [pc, #28]	; (4109b8 <_close_r+0x20>)
  41099c:	2300      	movs	r3, #0
  41099e:	4605      	mov	r5, r0
  4109a0:	4608      	mov	r0, r1
  4109a2:	6023      	str	r3, [r4, #0]
  4109a4:	f7fb fb7c 	bl	40c0a0 <_close>
  4109a8:	1c43      	adds	r3, r0, #1
  4109aa:	d000      	beq.n	4109ae <_close_r+0x16>
  4109ac:	bd38      	pop	{r3, r4, r5, pc}
  4109ae:	6823      	ldr	r3, [r4, #0]
  4109b0:	2b00      	cmp	r3, #0
  4109b2:	d0fb      	beq.n	4109ac <_close_r+0x14>
  4109b4:	602b      	str	r3, [r5, #0]
  4109b6:	bd38      	pop	{r3, r4, r5, pc}
  4109b8:	200040e8 	.word	0x200040e8

004109bc <quorem>:
  4109bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4109c0:	6903      	ldr	r3, [r0, #16]
  4109c2:	690d      	ldr	r5, [r1, #16]
  4109c4:	429d      	cmp	r5, r3
  4109c6:	b083      	sub	sp, #12
  4109c8:	4683      	mov	fp, r0
  4109ca:	f300 808b 	bgt.w	410ae4 <quorem+0x128>
  4109ce:	3d01      	subs	r5, #1
  4109d0:	f101 0414 	add.w	r4, r1, #20
  4109d4:	f100 0a14 	add.w	sl, r0, #20
  4109d8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  4109dc:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  4109e0:	3201      	adds	r2, #1
  4109e2:	fbb3 f8f2 	udiv	r8, r3, r2
  4109e6:	00aa      	lsls	r2, r5, #2
  4109e8:	4691      	mov	r9, r2
  4109ea:	9200      	str	r2, [sp, #0]
  4109ec:	4452      	add	r2, sl
  4109ee:	44a1      	add	r9, r4
  4109f0:	9201      	str	r2, [sp, #4]
  4109f2:	f1b8 0f00 	cmp.w	r8, #0
  4109f6:	d03d      	beq.n	410a74 <quorem+0xb8>
  4109f8:	f04f 0e00 	mov.w	lr, #0
  4109fc:	4670      	mov	r0, lr
  4109fe:	4622      	mov	r2, r4
  410a00:	4653      	mov	r3, sl
  410a02:	468c      	mov	ip, r1
  410a04:	f852 6b04 	ldr.w	r6, [r2], #4
  410a08:	6819      	ldr	r1, [r3, #0]
  410a0a:	b2b7      	uxth	r7, r6
  410a0c:	0c36      	lsrs	r6, r6, #16
  410a0e:	fb07 ee08 	mla	lr, r7, r8, lr
  410a12:	fb06 f608 	mul.w	r6, r6, r8
  410a16:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  410a1a:	fa1f f78e 	uxth.w	r7, lr
  410a1e:	1bc7      	subs	r7, r0, r7
  410a20:	b2b0      	uxth	r0, r6
  410a22:	fa17 f781 	uxtah	r7, r7, r1
  410a26:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  410a2a:	eb00 4027 	add.w	r0, r0, r7, asr #16
  410a2e:	b2bf      	uxth	r7, r7
  410a30:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  410a34:	4591      	cmp	r9, r2
  410a36:	f843 7b04 	str.w	r7, [r3], #4
  410a3a:	ea4f 4020 	mov.w	r0, r0, asr #16
  410a3e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  410a42:	d2df      	bcs.n	410a04 <quorem+0x48>
  410a44:	9a00      	ldr	r2, [sp, #0]
  410a46:	f85a 3002 	ldr.w	r3, [sl, r2]
  410a4a:	4661      	mov	r1, ip
  410a4c:	b993      	cbnz	r3, 410a74 <quorem+0xb8>
  410a4e:	9a01      	ldr	r2, [sp, #4]
  410a50:	1f13      	subs	r3, r2, #4
  410a52:	459a      	cmp	sl, r3
  410a54:	d20c      	bcs.n	410a70 <quorem+0xb4>
  410a56:	f852 3c04 	ldr.w	r3, [r2, #-4]
  410a5a:	b94b      	cbnz	r3, 410a70 <quorem+0xb4>
  410a5c:	f1a2 0308 	sub.w	r3, r2, #8
  410a60:	e002      	b.n	410a68 <quorem+0xac>
  410a62:	681a      	ldr	r2, [r3, #0]
  410a64:	3b04      	subs	r3, #4
  410a66:	b91a      	cbnz	r2, 410a70 <quorem+0xb4>
  410a68:	459a      	cmp	sl, r3
  410a6a:	f105 35ff 	add.w	r5, r5, #4294967295
  410a6e:	d3f8      	bcc.n	410a62 <quorem+0xa6>
  410a70:	f8cb 5010 	str.w	r5, [fp, #16]
  410a74:	4658      	mov	r0, fp
  410a76:	f001 ffd5 	bl	412a24 <__mcmp>
  410a7a:	2800      	cmp	r0, #0
  410a7c:	db2e      	blt.n	410adc <quorem+0x120>
  410a7e:	f108 0801 	add.w	r8, r8, #1
  410a82:	4653      	mov	r3, sl
  410a84:	2200      	movs	r2, #0
  410a86:	f854 6b04 	ldr.w	r6, [r4], #4
  410a8a:	6818      	ldr	r0, [r3, #0]
  410a8c:	b2b1      	uxth	r1, r6
  410a8e:	1a52      	subs	r2, r2, r1
  410a90:	0c36      	lsrs	r6, r6, #16
  410a92:	fa12 f180 	uxtah	r1, r2, r0
  410a96:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  410a9a:	eb02 4221 	add.w	r2, r2, r1, asr #16
  410a9e:	b289      	uxth	r1, r1
  410aa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  410aa4:	45a1      	cmp	r9, r4
  410aa6:	f843 1b04 	str.w	r1, [r3], #4
  410aaa:	ea4f 4222 	mov.w	r2, r2, asr #16
  410aae:	d2ea      	bcs.n	410a86 <quorem+0xca>
  410ab0:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  410ab4:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  410ab8:	b982      	cbnz	r2, 410adc <quorem+0x120>
  410aba:	1f1a      	subs	r2, r3, #4
  410abc:	4592      	cmp	sl, r2
  410abe:	d20b      	bcs.n	410ad8 <quorem+0x11c>
  410ac0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  410ac4:	b942      	cbnz	r2, 410ad8 <quorem+0x11c>
  410ac6:	3b08      	subs	r3, #8
  410ac8:	e002      	b.n	410ad0 <quorem+0x114>
  410aca:	681a      	ldr	r2, [r3, #0]
  410acc:	3b04      	subs	r3, #4
  410ace:	b91a      	cbnz	r2, 410ad8 <quorem+0x11c>
  410ad0:	459a      	cmp	sl, r3
  410ad2:	f105 35ff 	add.w	r5, r5, #4294967295
  410ad6:	d3f8      	bcc.n	410aca <quorem+0x10e>
  410ad8:	f8cb 5010 	str.w	r5, [fp, #16]
  410adc:	4640      	mov	r0, r8
  410ade:	b003      	add	sp, #12
  410ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410ae4:	2000      	movs	r0, #0
  410ae6:	b003      	add	sp, #12
  410ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410aec:	0000      	movs	r0, r0
	...

00410af0 <_dtoa_r>:
  410af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410af4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  410af6:	b09b      	sub	sp, #108	; 0x6c
  410af8:	4604      	mov	r4, r0
  410afa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  410afc:	4692      	mov	sl, r2
  410afe:	469b      	mov	fp, r3
  410b00:	b149      	cbz	r1, 410b16 <_dtoa_r+0x26>
  410b02:	6c43      	ldr	r3, [r0, #68]	; 0x44
  410b04:	604b      	str	r3, [r1, #4]
  410b06:	2201      	movs	r2, #1
  410b08:	fa02 f303 	lsl.w	r3, r2, r3
  410b0c:	608b      	str	r3, [r1, #8]
  410b0e:	f001 fd45 	bl	41259c <_Bfree>
  410b12:	2300      	movs	r3, #0
  410b14:	6423      	str	r3, [r4, #64]	; 0x40
  410b16:	f1bb 0f00 	cmp.w	fp, #0
  410b1a:	46d9      	mov	r9, fp
  410b1c:	db33      	blt.n	410b86 <_dtoa_r+0x96>
  410b1e:	2300      	movs	r3, #0
  410b20:	602b      	str	r3, [r5, #0]
  410b22:	4ba5      	ldr	r3, [pc, #660]	; (410db8 <_dtoa_r+0x2c8>)
  410b24:	461a      	mov	r2, r3
  410b26:	ea09 0303 	and.w	r3, r9, r3
  410b2a:	4293      	cmp	r3, r2
  410b2c:	d014      	beq.n	410b58 <_dtoa_r+0x68>
  410b2e:	4650      	mov	r0, sl
  410b30:	4659      	mov	r1, fp
  410b32:	2200      	movs	r2, #0
  410b34:	2300      	movs	r3, #0
  410b36:	f005 f8cf 	bl	415cd8 <__aeabi_dcmpeq>
  410b3a:	4680      	mov	r8, r0
  410b3c:	b348      	cbz	r0, 410b92 <_dtoa_r+0xa2>
  410b3e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  410b40:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  410b42:	2301      	movs	r3, #1
  410b44:	6033      	str	r3, [r6, #0]
  410b46:	2d00      	cmp	r5, #0
  410b48:	f000 80c9 	beq.w	410cde <_dtoa_r+0x1ee>
  410b4c:	489b      	ldr	r0, [pc, #620]	; (410dbc <_dtoa_r+0x2cc>)
  410b4e:	6028      	str	r0, [r5, #0]
  410b50:	3801      	subs	r0, #1
  410b52:	b01b      	add	sp, #108	; 0x6c
  410b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410b58:	9d26      	ldr	r5, [sp, #152]	; 0x98
  410b5a:	f242 730f 	movw	r3, #9999	; 0x270f
  410b5e:	602b      	str	r3, [r5, #0]
  410b60:	f1ba 0f00 	cmp.w	sl, #0
  410b64:	f000 80a4 	beq.w	410cb0 <_dtoa_r+0x1c0>
  410b68:	4895      	ldr	r0, [pc, #596]	; (410dc0 <_dtoa_r+0x2d0>)
  410b6a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  410b6c:	2e00      	cmp	r6, #0
  410b6e:	d0f0      	beq.n	410b52 <_dtoa_r+0x62>
  410b70:	78c3      	ldrb	r3, [r0, #3]
  410b72:	2b00      	cmp	r3, #0
  410b74:	f000 80b5 	beq.w	410ce2 <_dtoa_r+0x1f2>
  410b78:	f100 0308 	add.w	r3, r0, #8
  410b7c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  410b7e:	602b      	str	r3, [r5, #0]
  410b80:	b01b      	add	sp, #108	; 0x6c
  410b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410b86:	2301      	movs	r3, #1
  410b88:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  410b8c:	602b      	str	r3, [r5, #0]
  410b8e:	46cb      	mov	fp, r9
  410b90:	e7c7      	b.n	410b22 <_dtoa_r+0x32>
  410b92:	aa19      	add	r2, sp, #100	; 0x64
  410b94:	ab18      	add	r3, sp, #96	; 0x60
  410b96:	e88d 000c 	stmia.w	sp, {r2, r3}
  410b9a:	4620      	mov	r0, r4
  410b9c:	4652      	mov	r2, sl
  410b9e:	465b      	mov	r3, fp
  410ba0:	f002 f848 	bl	412c34 <__d2b>
  410ba4:	ea5f 5519 	movs.w	r5, r9, lsr #20
  410ba8:	900a      	str	r0, [sp, #40]	; 0x28
  410baa:	f040 808a 	bne.w	410cc2 <_dtoa_r+0x1d2>
  410bae:	9f18      	ldr	r7, [sp, #96]	; 0x60
  410bb0:	9d19      	ldr	r5, [sp, #100]	; 0x64
  410bb2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  410bb6:	443d      	add	r5, r7
  410bb8:	429d      	cmp	r5, r3
  410bba:	f2c0 8294 	blt.w	4110e6 <_dtoa_r+0x5f6>
  410bbe:	331f      	adds	r3, #31
  410bc0:	f205 4212 	addw	r2, r5, #1042	; 0x412
  410bc4:	1b5b      	subs	r3, r3, r5
  410bc6:	fa09 f303 	lsl.w	r3, r9, r3
  410bca:	fa2a f202 	lsr.w	r2, sl, r2
  410bce:	ea43 0002 	orr.w	r0, r3, r2
  410bd2:	f004 fda3 	bl	41571c <__aeabi_ui2d>
  410bd6:	2601      	movs	r6, #1
  410bd8:	3d01      	subs	r5, #1
  410bda:	46b8      	mov	r8, r7
  410bdc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  410be0:	9616      	str	r6, [sp, #88]	; 0x58
  410be2:	2200      	movs	r2, #0
  410be4:	4b77      	ldr	r3, [pc, #476]	; (410dc4 <_dtoa_r+0x2d4>)
  410be6:	f004 fc5b 	bl	4154a0 <__aeabi_dsub>
  410bea:	a36d      	add	r3, pc, #436	; (adr r3, 410da0 <_dtoa_r+0x2b0>)
  410bec:	e9d3 2300 	ldrd	r2, r3, [r3]
  410bf0:	f004 fe0a 	bl	415808 <__aeabi_dmul>
  410bf4:	a36c      	add	r3, pc, #432	; (adr r3, 410da8 <_dtoa_r+0x2b8>)
  410bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
  410bfa:	f004 fc53 	bl	4154a4 <__adddf3>
  410bfe:	4606      	mov	r6, r0
  410c00:	4628      	mov	r0, r5
  410c02:	460f      	mov	r7, r1
  410c04:	f004 fd9a 	bl	41573c <__aeabi_i2d>
  410c08:	a369      	add	r3, pc, #420	; (adr r3, 410db0 <_dtoa_r+0x2c0>)
  410c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  410c0e:	f004 fdfb 	bl	415808 <__aeabi_dmul>
  410c12:	4602      	mov	r2, r0
  410c14:	460b      	mov	r3, r1
  410c16:	4630      	mov	r0, r6
  410c18:	4639      	mov	r1, r7
  410c1a:	f004 fc43 	bl	4154a4 <__adddf3>
  410c1e:	4606      	mov	r6, r0
  410c20:	460f      	mov	r7, r1
  410c22:	f005 f88b 	bl	415d3c <__aeabi_d2iz>
  410c26:	4639      	mov	r1, r7
  410c28:	9007      	str	r0, [sp, #28]
  410c2a:	2200      	movs	r2, #0
  410c2c:	4630      	mov	r0, r6
  410c2e:	2300      	movs	r3, #0
  410c30:	f005 f85c 	bl	415cec <__aeabi_dcmplt>
  410c34:	2800      	cmp	r0, #0
  410c36:	f040 8228 	bne.w	41108a <_dtoa_r+0x59a>
  410c3a:	9e07      	ldr	r6, [sp, #28]
  410c3c:	2e16      	cmp	r6, #22
  410c3e:	f200 8221 	bhi.w	411084 <_dtoa_r+0x594>
  410c42:	4b61      	ldr	r3, [pc, #388]	; (410dc8 <_dtoa_r+0x2d8>)
  410c44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  410c48:	e9d3 0100 	ldrd	r0, r1, [r3]
  410c4c:	4652      	mov	r2, sl
  410c4e:	465b      	mov	r3, fp
  410c50:	f005 f86a 	bl	415d28 <__aeabi_dcmpgt>
  410c54:	2800      	cmp	r0, #0
  410c56:	f000 824b 	beq.w	4110f0 <_dtoa_r+0x600>
  410c5a:	3e01      	subs	r6, #1
  410c5c:	9607      	str	r6, [sp, #28]
  410c5e:	2600      	movs	r6, #0
  410c60:	960e      	str	r6, [sp, #56]	; 0x38
  410c62:	ebc5 0508 	rsb	r5, r5, r8
  410c66:	3d01      	subs	r5, #1
  410c68:	9506      	str	r5, [sp, #24]
  410c6a:	f100 8225 	bmi.w	4110b8 <_dtoa_r+0x5c8>
  410c6e:	2500      	movs	r5, #0
  410c70:	9508      	str	r5, [sp, #32]
  410c72:	9e07      	ldr	r6, [sp, #28]
  410c74:	2e00      	cmp	r6, #0
  410c76:	f2c0 8216 	blt.w	4110a6 <_dtoa_r+0x5b6>
  410c7a:	9d06      	ldr	r5, [sp, #24]
  410c7c:	960d      	str	r6, [sp, #52]	; 0x34
  410c7e:	4435      	add	r5, r6
  410c80:	2600      	movs	r6, #0
  410c82:	9506      	str	r5, [sp, #24]
  410c84:	960c      	str	r6, [sp, #48]	; 0x30
  410c86:	9d24      	ldr	r5, [sp, #144]	; 0x90
  410c88:	2d09      	cmp	r5, #9
  410c8a:	d82c      	bhi.n	410ce6 <_dtoa_r+0x1f6>
  410c8c:	2d05      	cmp	r5, #5
  410c8e:	bfc4      	itt	gt
  410c90:	3d04      	subgt	r5, #4
  410c92:	9524      	strgt	r5, [sp, #144]	; 0x90
  410c94:	9e24      	ldr	r6, [sp, #144]	; 0x90
  410c96:	f1a6 0302 	sub.w	r3, r6, #2
  410c9a:	bfcc      	ite	gt
  410c9c:	2500      	movgt	r5, #0
  410c9e:	2501      	movle	r5, #1
  410ca0:	2b03      	cmp	r3, #3
  410ca2:	d822      	bhi.n	410cea <_dtoa_r+0x1fa>
  410ca4:	e8df f013 	tbh	[pc, r3, lsl #1]
  410ca8:	029e03b7 	.word	0x029e03b7
  410cac:	049a03c0 	.word	0x049a03c0
  410cb0:	4a46      	ldr	r2, [pc, #280]	; (410dcc <_dtoa_r+0x2dc>)
  410cb2:	4b43      	ldr	r3, [pc, #268]	; (410dc0 <_dtoa_r+0x2d0>)
  410cb4:	f3c9 0013 	ubfx	r0, r9, #0, #20
  410cb8:	2800      	cmp	r0, #0
  410cba:	bf0c      	ite	eq
  410cbc:	4610      	moveq	r0, r2
  410cbe:	4618      	movne	r0, r3
  410cc0:	e753      	b.n	410b6a <_dtoa_r+0x7a>
  410cc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  410cc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  410cca:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  410cce:	4650      	mov	r0, sl
  410cd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  410cd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  410cd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  410cdc:	e781      	b.n	410be2 <_dtoa_r+0xf2>
  410cde:	483c      	ldr	r0, [pc, #240]	; (410dd0 <_dtoa_r+0x2e0>)
  410ce0:	e737      	b.n	410b52 <_dtoa_r+0x62>
  410ce2:	1cc3      	adds	r3, r0, #3
  410ce4:	e74a      	b.n	410b7c <_dtoa_r+0x8c>
  410ce6:	2500      	movs	r5, #0
  410ce8:	9524      	str	r5, [sp, #144]	; 0x90
  410cea:	2500      	movs	r5, #0
  410cec:	6465      	str	r5, [r4, #68]	; 0x44
  410cee:	4629      	mov	r1, r5
  410cf0:	4620      	mov	r0, r4
  410cf2:	f001 fc2d 	bl	412550 <_Balloc>
  410cf6:	f04f 39ff 	mov.w	r9, #4294967295
  410cfa:	2601      	movs	r6, #1
  410cfc:	9009      	str	r0, [sp, #36]	; 0x24
  410cfe:	9525      	str	r5, [sp, #148]	; 0x94
  410d00:	6420      	str	r0, [r4, #64]	; 0x40
  410d02:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  410d06:	960b      	str	r6, [sp, #44]	; 0x2c
  410d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
  410d0a:	2b00      	cmp	r3, #0
  410d0c:	f2c0 80d2 	blt.w	410eb4 <_dtoa_r+0x3c4>
  410d10:	9e07      	ldr	r6, [sp, #28]
  410d12:	2e0e      	cmp	r6, #14
  410d14:	f300 80ce 	bgt.w	410eb4 <_dtoa_r+0x3c4>
  410d18:	4b2b      	ldr	r3, [pc, #172]	; (410dc8 <_dtoa_r+0x2d8>)
  410d1a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  410d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
  410d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
  410d26:	9925      	ldr	r1, [sp, #148]	; 0x94
  410d28:	2900      	cmp	r1, #0
  410d2a:	f2c0 8380 	blt.w	41142e <_dtoa_r+0x93e>
  410d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410d32:	4659      	mov	r1, fp
  410d34:	4650      	mov	r0, sl
  410d36:	f004 fe91 	bl	415a5c <__aeabi_ddiv>
  410d3a:	f004 ffff 	bl	415d3c <__aeabi_d2iz>
  410d3e:	4605      	mov	r5, r0
  410d40:	f004 fcfc 	bl	41573c <__aeabi_i2d>
  410d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410d48:	f004 fd5e 	bl	415808 <__aeabi_dmul>
  410d4c:	4602      	mov	r2, r0
  410d4e:	460b      	mov	r3, r1
  410d50:	4650      	mov	r0, sl
  410d52:	4659      	mov	r1, fp
  410d54:	f004 fba4 	bl	4154a0 <__aeabi_dsub>
  410d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410d5a:	f105 0330 	add.w	r3, r5, #48	; 0x30
  410d5e:	f1b9 0f01 	cmp.w	r9, #1
  410d62:	4606      	mov	r6, r0
  410d64:	460f      	mov	r7, r1
  410d66:	7013      	strb	r3, [r2, #0]
  410d68:	f102 0b01 	add.w	fp, r2, #1
  410d6c:	d064      	beq.n	410e38 <_dtoa_r+0x348>
  410d6e:	2200      	movs	r2, #0
  410d70:	4b18      	ldr	r3, [pc, #96]	; (410dd4 <_dtoa_r+0x2e4>)
  410d72:	f004 fd49 	bl	415808 <__aeabi_dmul>
  410d76:	2200      	movs	r2, #0
  410d78:	2300      	movs	r3, #0
  410d7a:	4606      	mov	r6, r0
  410d7c:	460f      	mov	r7, r1
  410d7e:	f004 ffab 	bl	415cd8 <__aeabi_dcmpeq>
  410d82:	2800      	cmp	r0, #0
  410d84:	f040 8081 	bne.w	410e8a <_dtoa_r+0x39a>
  410d88:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  410d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410d8e:	9403      	str	r4, [sp, #12]
  410d90:	44c8      	add	r8, r9
  410d92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  410d96:	f105 0902 	add.w	r9, r5, #2
  410d9a:	e028      	b.n	410dee <_dtoa_r+0x2fe>
  410d9c:	f3af 8000 	nop.w
  410da0:	636f4361 	.word	0x636f4361
  410da4:	3fd287a7 	.word	0x3fd287a7
  410da8:	8b60c8b3 	.word	0x8b60c8b3
  410dac:	3fc68a28 	.word	0x3fc68a28
  410db0:	509f79fb 	.word	0x509f79fb
  410db4:	3fd34413 	.word	0x3fd34413
  410db8:	7ff00000 	.word	0x7ff00000
  410dbc:	00416e05 	.word	0x00416e05
  410dc0:	00416f74 	.word	0x00416f74
  410dc4:	3ff80000 	.word	0x3ff80000
  410dc8:	00416f88 	.word	0x00416f88
  410dcc:	00416f68 	.word	0x00416f68
  410dd0:	00416e04 	.word	0x00416e04
  410dd4:	40240000 	.word	0x40240000
  410dd8:	f004 fd16 	bl	415808 <__aeabi_dmul>
  410ddc:	2200      	movs	r2, #0
  410dde:	2300      	movs	r3, #0
  410de0:	4606      	mov	r6, r0
  410de2:	460f      	mov	r7, r1
  410de4:	f004 ff78 	bl	415cd8 <__aeabi_dcmpeq>
  410de8:	2800      	cmp	r0, #0
  410dea:	f040 83c1 	bne.w	411570 <_dtoa_r+0xa80>
  410dee:	4652      	mov	r2, sl
  410df0:	465b      	mov	r3, fp
  410df2:	4630      	mov	r0, r6
  410df4:	4639      	mov	r1, r7
  410df6:	f004 fe31 	bl	415a5c <__aeabi_ddiv>
  410dfa:	f004 ff9f 	bl	415d3c <__aeabi_d2iz>
  410dfe:	4605      	mov	r5, r0
  410e00:	f004 fc9c 	bl	41573c <__aeabi_i2d>
  410e04:	4652      	mov	r2, sl
  410e06:	465b      	mov	r3, fp
  410e08:	f004 fcfe 	bl	415808 <__aeabi_dmul>
  410e0c:	4602      	mov	r2, r0
  410e0e:	460b      	mov	r3, r1
  410e10:	4630      	mov	r0, r6
  410e12:	4639      	mov	r1, r7
  410e14:	f004 fb44 	bl	4154a0 <__aeabi_dsub>
  410e18:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  410e1c:	45c1      	cmp	r9, r8
  410e1e:	f809 ec01 	strb.w	lr, [r9, #-1]
  410e22:	464c      	mov	r4, r9
  410e24:	4606      	mov	r6, r0
  410e26:	460f      	mov	r7, r1
  410e28:	f04f 0200 	mov.w	r2, #0
  410e2c:	4ba7      	ldr	r3, [pc, #668]	; (4110cc <_dtoa_r+0x5dc>)
  410e2e:	f109 0901 	add.w	r9, r9, #1
  410e32:	d1d1      	bne.n	410dd8 <_dtoa_r+0x2e8>
  410e34:	46a3      	mov	fp, r4
  410e36:	9c03      	ldr	r4, [sp, #12]
  410e38:	4632      	mov	r2, r6
  410e3a:	463b      	mov	r3, r7
  410e3c:	4630      	mov	r0, r6
  410e3e:	4639      	mov	r1, r7
  410e40:	f004 fb30 	bl	4154a4 <__adddf3>
  410e44:	4606      	mov	r6, r0
  410e46:	460f      	mov	r7, r1
  410e48:	4632      	mov	r2, r6
  410e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  410e4e:	463b      	mov	r3, r7
  410e50:	f004 ff4c 	bl	415cec <__aeabi_dcmplt>
  410e54:	b940      	cbnz	r0, 410e68 <_dtoa_r+0x378>
  410e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  410e5a:	4632      	mov	r2, r6
  410e5c:	463b      	mov	r3, r7
  410e5e:	f004 ff3b 	bl	415cd8 <__aeabi_dcmpeq>
  410e62:	b190      	cbz	r0, 410e8a <_dtoa_r+0x39a>
  410e64:	07eb      	lsls	r3, r5, #31
  410e66:	d510      	bpl.n	410e8a <_dtoa_r+0x39a>
  410e68:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  410e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410e6e:	e005      	b.n	410e7c <_dtoa_r+0x38c>
  410e70:	429a      	cmp	r2, r3
  410e72:	f000 8428 	beq.w	4116c6 <_dtoa_r+0xbd6>
  410e76:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  410e7a:	469b      	mov	fp, r3
  410e7c:	2d39      	cmp	r5, #57	; 0x39
  410e7e:	f10b 33ff 	add.w	r3, fp, #4294967295
  410e82:	d0f5      	beq.n	410e70 <_dtoa_r+0x380>
  410e84:	1c6a      	adds	r2, r5, #1
  410e86:	b2d2      	uxtb	r2, r2
  410e88:	701a      	strb	r2, [r3, #0]
  410e8a:	4620      	mov	r0, r4
  410e8c:	990a      	ldr	r1, [sp, #40]	; 0x28
  410e8e:	f001 fb85 	bl	41259c <_Bfree>
  410e92:	9e07      	ldr	r6, [sp, #28]
  410e94:	9d26      	ldr	r5, [sp, #152]	; 0x98
  410e96:	1c73      	adds	r3, r6, #1
  410e98:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  410e9a:	2200      	movs	r2, #0
  410e9c:	f88b 2000 	strb.w	r2, [fp]
  410ea0:	602b      	str	r3, [r5, #0]
  410ea2:	2e00      	cmp	r6, #0
  410ea4:	f000 8325 	beq.w	4114f2 <_dtoa_r+0xa02>
  410ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
  410eaa:	f8c6 b000 	str.w	fp, [r6]
  410eae:	b01b      	add	sp, #108	; 0x6c
  410eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410eb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410eb6:	2d00      	cmp	r5, #0
  410eb8:	f000 8103 	beq.w	4110c2 <_dtoa_r+0x5d2>
  410ebc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  410ebe:	2e01      	cmp	r6, #1
  410ec0:	f340 82dc 	ble.w	41147c <_dtoa_r+0x98c>
  410ec4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  410ec6:	f109 37ff 	add.w	r7, r9, #4294967295
  410eca:	42be      	cmp	r6, r7
  410ecc:	f2c0 8389 	blt.w	4115e2 <_dtoa_r+0xaf2>
  410ed0:	1bf7      	subs	r7, r6, r7
  410ed2:	f1b9 0f00 	cmp.w	r9, #0
  410ed6:	f2c0 8486 	blt.w	4117e6 <_dtoa_r+0xcf6>
  410eda:	9d08      	ldr	r5, [sp, #32]
  410edc:	464b      	mov	r3, r9
  410ede:	9e08      	ldr	r6, [sp, #32]
  410ee0:	441e      	add	r6, r3
  410ee2:	9608      	str	r6, [sp, #32]
  410ee4:	9e06      	ldr	r6, [sp, #24]
  410ee6:	4620      	mov	r0, r4
  410ee8:	441e      	add	r6, r3
  410eea:	2101      	movs	r1, #1
  410eec:	9606      	str	r6, [sp, #24]
  410eee:	f001 fc45 	bl	41277c <__i2b>
  410ef2:	4606      	mov	r6, r0
  410ef4:	b165      	cbz	r5, 410f10 <_dtoa_r+0x420>
  410ef6:	9806      	ldr	r0, [sp, #24]
  410ef8:	2800      	cmp	r0, #0
  410efa:	dd09      	ble.n	410f10 <_dtoa_r+0x420>
  410efc:	4603      	mov	r3, r0
  410efe:	9908      	ldr	r1, [sp, #32]
  410f00:	42ab      	cmp	r3, r5
  410f02:	bfa8      	it	ge
  410f04:	462b      	movge	r3, r5
  410f06:	1ac9      	subs	r1, r1, r3
  410f08:	1ac0      	subs	r0, r0, r3
  410f0a:	9108      	str	r1, [sp, #32]
  410f0c:	1aed      	subs	r5, r5, r3
  410f0e:	9006      	str	r0, [sp, #24]
  410f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410f12:	2a00      	cmp	r2, #0
  410f14:	dd1d      	ble.n	410f52 <_dtoa_r+0x462>
  410f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410f18:	2b00      	cmp	r3, #0
  410f1a:	f000 8358 	beq.w	4115ce <_dtoa_r+0xade>
  410f1e:	2f00      	cmp	r7, #0
  410f20:	dd11      	ble.n	410f46 <_dtoa_r+0x456>
  410f22:	4631      	mov	r1, r6
  410f24:	463a      	mov	r2, r7
  410f26:	4620      	mov	r0, r4
  410f28:	f001 fcd0 	bl	4128cc <__pow5mult>
  410f2c:	4606      	mov	r6, r0
  410f2e:	4631      	mov	r1, r6
  410f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410f32:	4620      	mov	r0, r4
  410f34:	f001 fc2c 	bl	412790 <__multiply>
  410f38:	990a      	ldr	r1, [sp, #40]	; 0x28
  410f3a:	4680      	mov	r8, r0
  410f3c:	4620      	mov	r0, r4
  410f3e:	f001 fb2d 	bl	41259c <_Bfree>
  410f42:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  410f46:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  410f4a:	ebbe 0207 	subs.w	r2, lr, r7
  410f4e:	f040 828f 	bne.w	411470 <_dtoa_r+0x980>
  410f52:	4620      	mov	r0, r4
  410f54:	2101      	movs	r1, #1
  410f56:	f001 fc11 	bl	41277c <__i2b>
  410f5a:	4680      	mov	r8, r0
  410f5c:	980d      	ldr	r0, [sp, #52]	; 0x34
  410f5e:	2800      	cmp	r0, #0
  410f60:	dd05      	ble.n	410f6e <_dtoa_r+0x47e>
  410f62:	4641      	mov	r1, r8
  410f64:	4620      	mov	r0, r4
  410f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410f68:	f001 fcb0 	bl	4128cc <__pow5mult>
  410f6c:	4680      	mov	r8, r0
  410f6e:	9924      	ldr	r1, [sp, #144]	; 0x90
  410f70:	2901      	cmp	r1, #1
  410f72:	f340 82c1 	ble.w	4114f8 <_dtoa_r+0xa08>
  410f76:	2700      	movs	r7, #0
  410f78:	980d      	ldr	r0, [sp, #52]	; 0x34
  410f7a:	2800      	cmp	r0, #0
  410f7c:	f040 82af 	bne.w	4114de <_dtoa_r+0x9ee>
  410f80:	2001      	movs	r0, #1
  410f82:	9b06      	ldr	r3, [sp, #24]
  410f84:	4403      	add	r3, r0
  410f86:	f013 031f 	ands.w	r3, r3, #31
  410f8a:	f000 80a1 	beq.w	4110d0 <_dtoa_r+0x5e0>
  410f8e:	f1c3 0220 	rsb	r2, r3, #32
  410f92:	2a04      	cmp	r2, #4
  410f94:	f340 84b5 	ble.w	411902 <_dtoa_r+0xe12>
  410f98:	9908      	ldr	r1, [sp, #32]
  410f9a:	9a06      	ldr	r2, [sp, #24]
  410f9c:	f1c3 031c 	rsb	r3, r3, #28
  410fa0:	4419      	add	r1, r3
  410fa2:	441a      	add	r2, r3
  410fa4:	9108      	str	r1, [sp, #32]
  410fa6:	441d      	add	r5, r3
  410fa8:	9206      	str	r2, [sp, #24]
  410faa:	9908      	ldr	r1, [sp, #32]
  410fac:	2900      	cmp	r1, #0
  410fae:	dd05      	ble.n	410fbc <_dtoa_r+0x4cc>
  410fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
  410fb2:	9a08      	ldr	r2, [sp, #32]
  410fb4:	4620      	mov	r0, r4
  410fb6:	f001 fcd7 	bl	412968 <__lshift>
  410fba:	900a      	str	r0, [sp, #40]	; 0x28
  410fbc:	9a06      	ldr	r2, [sp, #24]
  410fbe:	2a00      	cmp	r2, #0
  410fc0:	dd04      	ble.n	410fcc <_dtoa_r+0x4dc>
  410fc2:	4641      	mov	r1, r8
  410fc4:	4620      	mov	r0, r4
  410fc6:	f001 fccf 	bl	412968 <__lshift>
  410fca:	4680      	mov	r8, r0
  410fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410fce:	2b00      	cmp	r3, #0
  410fd0:	f040 826a 	bne.w	4114a8 <_dtoa_r+0x9b8>
  410fd4:	f1b9 0f00 	cmp.w	r9, #0
  410fd8:	f340 82a6 	ble.w	411528 <_dtoa_r+0xa38>
  410fdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410fde:	2800      	cmp	r0, #0
  410fe0:	f040 8088 	bne.w	4110f4 <_dtoa_r+0x604>
  410fe4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410fe6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  410fe8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410fec:	e006      	b.n	410ffc <_dtoa_r+0x50c>
  410fee:	4639      	mov	r1, r7
  410ff0:	4620      	mov	r0, r4
  410ff2:	220a      	movs	r2, #10
  410ff4:	2300      	movs	r3, #0
  410ff6:	f001 fadb 	bl	4125b0 <__multadd>
  410ffa:	4607      	mov	r7, r0
  410ffc:	4638      	mov	r0, r7
  410ffe:	4641      	mov	r1, r8
  411000:	f7ff fcdc 	bl	4109bc <quorem>
  411004:	3030      	adds	r0, #48	; 0x30
  411006:	f80b 0005 	strb.w	r0, [fp, r5]
  41100a:	3501      	adds	r5, #1
  41100c:	45a9      	cmp	r9, r5
  41100e:	dcee      	bgt.n	410fee <_dtoa_r+0x4fe>
  411010:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  411014:	970a      	str	r7, [sp, #40]	; 0x28
  411016:	4682      	mov	sl, r0
  411018:	f1b9 0f01 	cmp.w	r9, #1
  41101c:	bfac      	ite	ge
  41101e:	44cb      	addge	fp, r9
  411020:	f10b 0b01 	addlt.w	fp, fp, #1
  411024:	2500      	movs	r5, #0
  411026:	990a      	ldr	r1, [sp, #40]	; 0x28
  411028:	2201      	movs	r2, #1
  41102a:	4620      	mov	r0, r4
  41102c:	f001 fc9c 	bl	412968 <__lshift>
  411030:	4641      	mov	r1, r8
  411032:	900a      	str	r0, [sp, #40]	; 0x28
  411034:	f001 fcf6 	bl	412a24 <__mcmp>
  411038:	2800      	cmp	r0, #0
  41103a:	f340 8309 	ble.w	411650 <_dtoa_r+0xb60>
  41103e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  411042:	9909      	ldr	r1, [sp, #36]	; 0x24
  411044:	e005      	b.n	411052 <_dtoa_r+0x562>
  411046:	4299      	cmp	r1, r3
  411048:	f000 828b 	beq.w	411562 <_dtoa_r+0xa72>
  41104c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  411050:	469b      	mov	fp, r3
  411052:	2a39      	cmp	r2, #57	; 0x39
  411054:	f10b 33ff 	add.w	r3, fp, #4294967295
  411058:	d0f5      	beq.n	411046 <_dtoa_r+0x556>
  41105a:	3201      	adds	r2, #1
  41105c:	701a      	strb	r2, [r3, #0]
  41105e:	4641      	mov	r1, r8
  411060:	4620      	mov	r0, r4
  411062:	f001 fa9b 	bl	41259c <_Bfree>
  411066:	2e00      	cmp	r6, #0
  411068:	f43f af0f 	beq.w	410e8a <_dtoa_r+0x39a>
  41106c:	b12d      	cbz	r5, 41107a <_dtoa_r+0x58a>
  41106e:	42b5      	cmp	r5, r6
  411070:	d003      	beq.n	41107a <_dtoa_r+0x58a>
  411072:	4629      	mov	r1, r5
  411074:	4620      	mov	r0, r4
  411076:	f001 fa91 	bl	41259c <_Bfree>
  41107a:	4631      	mov	r1, r6
  41107c:	4620      	mov	r0, r4
  41107e:	f001 fa8d 	bl	41259c <_Bfree>
  411082:	e702      	b.n	410e8a <_dtoa_r+0x39a>
  411084:	2601      	movs	r6, #1
  411086:	960e      	str	r6, [sp, #56]	; 0x38
  411088:	e5eb      	b.n	410c62 <_dtoa_r+0x172>
  41108a:	9807      	ldr	r0, [sp, #28]
  41108c:	f004 fb56 	bl	41573c <__aeabi_i2d>
  411090:	4632      	mov	r2, r6
  411092:	463b      	mov	r3, r7
  411094:	f004 fe20 	bl	415cd8 <__aeabi_dcmpeq>
  411098:	2800      	cmp	r0, #0
  41109a:	f47f adce 	bne.w	410c3a <_dtoa_r+0x14a>
  41109e:	9e07      	ldr	r6, [sp, #28]
  4110a0:	3e01      	subs	r6, #1
  4110a2:	9607      	str	r6, [sp, #28]
  4110a4:	e5c9      	b.n	410c3a <_dtoa_r+0x14a>
  4110a6:	9e07      	ldr	r6, [sp, #28]
  4110a8:	9d08      	ldr	r5, [sp, #32]
  4110aa:	1bad      	subs	r5, r5, r6
  4110ac:	9508      	str	r5, [sp, #32]
  4110ae:	4275      	negs	r5, r6
  4110b0:	2600      	movs	r6, #0
  4110b2:	950c      	str	r5, [sp, #48]	; 0x30
  4110b4:	960d      	str	r6, [sp, #52]	; 0x34
  4110b6:	e5e6      	b.n	410c86 <_dtoa_r+0x196>
  4110b8:	426d      	negs	r5, r5
  4110ba:	2600      	movs	r6, #0
  4110bc:	9508      	str	r5, [sp, #32]
  4110be:	9606      	str	r6, [sp, #24]
  4110c0:	e5d7      	b.n	410c72 <_dtoa_r+0x182>
  4110c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4110c4:	9d08      	ldr	r5, [sp, #32]
  4110c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4110c8:	e714      	b.n	410ef4 <_dtoa_r+0x404>
  4110ca:	bf00      	nop
  4110cc:	40240000 	.word	0x40240000
  4110d0:	231c      	movs	r3, #28
  4110d2:	f8dd e020 	ldr.w	lr, [sp, #32]
  4110d6:	9806      	ldr	r0, [sp, #24]
  4110d8:	449e      	add	lr, r3
  4110da:	4418      	add	r0, r3
  4110dc:	f8cd e020 	str.w	lr, [sp, #32]
  4110e0:	441d      	add	r5, r3
  4110e2:	9006      	str	r0, [sp, #24]
  4110e4:	e761      	b.n	410faa <_dtoa_r+0x4ba>
  4110e6:	48a7      	ldr	r0, [pc, #668]	; (411384 <_dtoa_r+0x894>)
  4110e8:	1b40      	subs	r0, r0, r5
  4110ea:	fa0a f000 	lsl.w	r0, sl, r0
  4110ee:	e570      	b.n	410bd2 <_dtoa_r+0xe2>
  4110f0:	900e      	str	r0, [sp, #56]	; 0x38
  4110f2:	e5b6      	b.n	410c62 <_dtoa_r+0x172>
  4110f4:	2d00      	cmp	r5, #0
  4110f6:	dd05      	ble.n	411104 <_dtoa_r+0x614>
  4110f8:	4631      	mov	r1, r6
  4110fa:	462a      	mov	r2, r5
  4110fc:	4620      	mov	r0, r4
  4110fe:	f001 fc33 	bl	412968 <__lshift>
  411102:	4606      	mov	r6, r0
  411104:	2f00      	cmp	r7, #0
  411106:	f040 82e8 	bne.w	4116da <_dtoa_r+0xbea>
  41110a:	4637      	mov	r7, r6
  41110c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41110e:	9809      	ldr	r0, [sp, #36]	; 0x24
  411110:	444d      	add	r5, r9
  411112:	9508      	str	r5, [sp, #32]
  411114:	f00a 0501 	and.w	r5, sl, #1
  411118:	950b      	str	r5, [sp, #44]	; 0x2c
  41111a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  41111e:	1c45      	adds	r5, r0, #1
  411120:	e00a      	b.n	411138 <_dtoa_r+0x648>
  411122:	f001 fa45 	bl	4125b0 <__multadd>
  411126:	4639      	mov	r1, r7
  411128:	4606      	mov	r6, r0
  41112a:	220a      	movs	r2, #10
  41112c:	4620      	mov	r0, r4
  41112e:	2300      	movs	r3, #0
  411130:	f001 fa3e 	bl	4125b0 <__multadd>
  411134:	4607      	mov	r7, r0
  411136:	3501      	adds	r5, #1
  411138:	4641      	mov	r1, r8
  41113a:	4648      	mov	r0, r9
  41113c:	f7ff fc3e 	bl	4109bc <quorem>
  411140:	4631      	mov	r1, r6
  411142:	4683      	mov	fp, r0
  411144:	4648      	mov	r0, r9
  411146:	f001 fc6d 	bl	412a24 <__mcmp>
  41114a:	4641      	mov	r1, r8
  41114c:	9003      	str	r0, [sp, #12]
  41114e:	463a      	mov	r2, r7
  411150:	4620      	mov	r0, r4
  411152:	f001 fc8b 	bl	412a6c <__mdiff>
  411156:	68c2      	ldr	r2, [r0, #12]
  411158:	1e69      	subs	r1, r5, #1
  41115a:	4603      	mov	r3, r0
  41115c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  411160:	9106      	str	r1, [sp, #24]
  411162:	2a00      	cmp	r2, #0
  411164:	f040 8193 	bne.w	41148e <_dtoa_r+0x99e>
  411168:	4619      	mov	r1, r3
  41116a:	4648      	mov	r0, r9
  41116c:	9302      	str	r3, [sp, #8]
  41116e:	f001 fc59 	bl	412a24 <__mcmp>
  411172:	9b02      	ldr	r3, [sp, #8]
  411174:	4602      	mov	r2, r0
  411176:	4619      	mov	r1, r3
  411178:	4620      	mov	r0, r4
  41117a:	9202      	str	r2, [sp, #8]
  41117c:	f001 fa0e 	bl	41259c <_Bfree>
  411180:	9a02      	ldr	r2, [sp, #8]
  411182:	b92a      	cbnz	r2, 411190 <_dtoa_r+0x6a0>
  411184:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411186:	b91b      	cbnz	r3, 411190 <_dtoa_r+0x6a0>
  411188:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41118a:	2800      	cmp	r0, #0
  41118c:	f000 8391 	beq.w	4118b2 <_dtoa_r+0xdc2>
  411190:	9b03      	ldr	r3, [sp, #12]
  411192:	2b00      	cmp	r3, #0
  411194:	f2c0 8234 	blt.w	411600 <_dtoa_r+0xb10>
  411198:	d105      	bne.n	4111a6 <_dtoa_r+0x6b6>
  41119a:	9824      	ldr	r0, [sp, #144]	; 0x90
  41119c:	b918      	cbnz	r0, 4111a6 <_dtoa_r+0x6b6>
  41119e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4111a0:	2900      	cmp	r1, #0
  4111a2:	f000 822d 	beq.w	411600 <_dtoa_r+0xb10>
  4111a6:	2a00      	cmp	r2, #0
  4111a8:	f300 82ab 	bgt.w	411702 <_dtoa_r+0xc12>
  4111ac:	f8dd e020 	ldr.w	lr, [sp, #32]
  4111b0:	f805 ac01 	strb.w	sl, [r5, #-1]
  4111b4:	4575      	cmp	r5, lr
  4111b6:	46ab      	mov	fp, r5
  4111b8:	f000 82b3 	beq.w	411722 <_dtoa_r+0xc32>
  4111bc:	4649      	mov	r1, r9
  4111be:	220a      	movs	r2, #10
  4111c0:	2300      	movs	r3, #0
  4111c2:	4620      	mov	r0, r4
  4111c4:	f001 f9f4 	bl	4125b0 <__multadd>
  4111c8:	42be      	cmp	r6, r7
  4111ca:	4681      	mov	r9, r0
  4111cc:	4631      	mov	r1, r6
  4111ce:	4620      	mov	r0, r4
  4111d0:	f04f 020a 	mov.w	r2, #10
  4111d4:	f04f 0300 	mov.w	r3, #0
  4111d8:	d1a3      	bne.n	411122 <_dtoa_r+0x632>
  4111da:	f001 f9e9 	bl	4125b0 <__multadd>
  4111de:	4606      	mov	r6, r0
  4111e0:	4607      	mov	r7, r0
  4111e2:	e7a8      	b.n	411136 <_dtoa_r+0x646>
  4111e4:	2600      	movs	r6, #0
  4111e6:	960b      	str	r6, [sp, #44]	; 0x2c
  4111e8:	9e07      	ldr	r6, [sp, #28]
  4111ea:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  4111ee:	44b6      	add	lr, r6
  4111f0:	f10e 0901 	add.w	r9, lr, #1
  4111f4:	f1b9 0f00 	cmp.w	r9, #0
  4111f8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  4111fc:	464e      	mov	r6, r9
  4111fe:	f340 8150 	ble.w	4114a2 <_dtoa_r+0x9b2>
  411202:	2100      	movs	r1, #0
  411204:	2e17      	cmp	r6, #23
  411206:	6461      	str	r1, [r4, #68]	; 0x44
  411208:	d90a      	bls.n	411220 <_dtoa_r+0x730>
  41120a:	2201      	movs	r2, #1
  41120c:	2304      	movs	r3, #4
  41120e:	005b      	lsls	r3, r3, #1
  411210:	f103 0014 	add.w	r0, r3, #20
  411214:	42b0      	cmp	r0, r6
  411216:	4611      	mov	r1, r2
  411218:	f102 0201 	add.w	r2, r2, #1
  41121c:	d9f7      	bls.n	41120e <_dtoa_r+0x71e>
  41121e:	6461      	str	r1, [r4, #68]	; 0x44
  411220:	4620      	mov	r0, r4
  411222:	f001 f995 	bl	412550 <_Balloc>
  411226:	2e0e      	cmp	r6, #14
  411228:	9009      	str	r0, [sp, #36]	; 0x24
  41122a:	6420      	str	r0, [r4, #64]	; 0x40
  41122c:	f63f ad6c 	bhi.w	410d08 <_dtoa_r+0x218>
  411230:	2d00      	cmp	r5, #0
  411232:	f43f ad69 	beq.w	410d08 <_dtoa_r+0x218>
  411236:	9d07      	ldr	r5, [sp, #28]
  411238:	2d00      	cmp	r5, #0
  41123a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  41123e:	f340 821b 	ble.w	411678 <_dtoa_r+0xb88>
  411242:	4b51      	ldr	r3, [pc, #324]	; (411388 <_dtoa_r+0x898>)
  411244:	f005 020f 	and.w	r2, r5, #15
  411248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  41124c:	112d      	asrs	r5, r5, #4
  41124e:	e9d3 6700 	ldrd	r6, r7, [r3]
  411252:	06eb      	lsls	r3, r5, #27
  411254:	f140 81cd 	bpl.w	4115f2 <_dtoa_r+0xb02>
  411258:	4b4c      	ldr	r3, [pc, #304]	; (41138c <_dtoa_r+0x89c>)
  41125a:	4650      	mov	r0, sl
  41125c:	4659      	mov	r1, fp
  41125e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  411262:	f004 fbfb 	bl	415a5c <__aeabi_ddiv>
  411266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  41126a:	f005 050f 	and.w	r5, r5, #15
  41126e:	f04f 0803 	mov.w	r8, #3
  411272:	b18d      	cbz	r5, 411298 <_dtoa_r+0x7a8>
  411274:	f8df a114 	ldr.w	sl, [pc, #276]	; 41138c <_dtoa_r+0x89c>
  411278:	4630      	mov	r0, r6
  41127a:	4639      	mov	r1, r7
  41127c:	07ee      	lsls	r6, r5, #31
  41127e:	d505      	bpl.n	41128c <_dtoa_r+0x79c>
  411280:	e9da 2300 	ldrd	r2, r3, [sl]
  411284:	f108 0801 	add.w	r8, r8, #1
  411288:	f004 fabe 	bl	415808 <__aeabi_dmul>
  41128c:	106d      	asrs	r5, r5, #1
  41128e:	f10a 0a08 	add.w	sl, sl, #8
  411292:	d1f3      	bne.n	41127c <_dtoa_r+0x78c>
  411294:	4606      	mov	r6, r0
  411296:	460f      	mov	r7, r1
  411298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  41129c:	4632      	mov	r2, r6
  41129e:	463b      	mov	r3, r7
  4112a0:	f004 fbdc 	bl	415a5c <__aeabi_ddiv>
  4112a4:	4682      	mov	sl, r0
  4112a6:	468b      	mov	fp, r1
  4112a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4112aa:	b145      	cbz	r5, 4112be <_dtoa_r+0x7ce>
  4112ac:	4650      	mov	r0, sl
  4112ae:	4659      	mov	r1, fp
  4112b0:	2200      	movs	r2, #0
  4112b2:	4b37      	ldr	r3, [pc, #220]	; (411390 <_dtoa_r+0x8a0>)
  4112b4:	f004 fd1a 	bl	415cec <__aeabi_dcmplt>
  4112b8:	2800      	cmp	r0, #0
  4112ba:	f040 82a9 	bne.w	411810 <_dtoa_r+0xd20>
  4112be:	4640      	mov	r0, r8
  4112c0:	f004 fa3c 	bl	41573c <__aeabi_i2d>
  4112c4:	4652      	mov	r2, sl
  4112c6:	465b      	mov	r3, fp
  4112c8:	f004 fa9e 	bl	415808 <__aeabi_dmul>
  4112cc:	2200      	movs	r2, #0
  4112ce:	4b31      	ldr	r3, [pc, #196]	; (411394 <_dtoa_r+0x8a4>)
  4112d0:	f004 f8e8 	bl	4154a4 <__adddf3>
  4112d4:	4606      	mov	r6, r0
  4112d6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4112da:	f1b9 0f00 	cmp.w	r9, #0
  4112de:	f000 815a 	beq.w	411596 <_dtoa_r+0xaa6>
  4112e2:	9d07      	ldr	r5, [sp, #28]
  4112e4:	9517      	str	r5, [sp, #92]	; 0x5c
  4112e6:	46c8      	mov	r8, r9
  4112e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4112ea:	2d00      	cmp	r5, #0
  4112ec:	f000 8222 	beq.w	411734 <_dtoa_r+0xc44>
  4112f0:	4b25      	ldr	r3, [pc, #148]	; (411388 <_dtoa_r+0x898>)
  4112f2:	4929      	ldr	r1, [pc, #164]	; (411398 <_dtoa_r+0x8a8>)
  4112f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4112f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4112fc:	2000      	movs	r0, #0
  4112fe:	f004 fbad 	bl	415a5c <__aeabi_ddiv>
  411302:	4632      	mov	r2, r6
  411304:	463b      	mov	r3, r7
  411306:	f004 f8cb 	bl	4154a0 <__aeabi_dsub>
  41130a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  41130e:	4659      	mov	r1, fp
  411310:	4650      	mov	r0, sl
  411312:	f004 fd13 	bl	415d3c <__aeabi_d2iz>
  411316:	4605      	mov	r5, r0
  411318:	f004 fa10 	bl	41573c <__aeabi_i2d>
  41131c:	4602      	mov	r2, r0
  41131e:	460b      	mov	r3, r1
  411320:	4650      	mov	r0, sl
  411322:	4659      	mov	r1, fp
  411324:	f004 f8bc 	bl	4154a0 <__aeabi_dsub>
  411328:	3530      	adds	r5, #48	; 0x30
  41132a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  41132c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  411330:	b2ed      	uxtb	r5, r5
  411332:	7035      	strb	r5, [r6, #0]
  411334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  411338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  41133c:	f106 0b01 	add.w	fp, r6, #1
  411340:	f004 fcf2 	bl	415d28 <__aeabi_dcmpgt>
  411344:	2800      	cmp	r0, #0
  411346:	f040 82a9 	bne.w	41189c <_dtoa_r+0xdac>
  41134a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  41134e:	2000      	movs	r0, #0
  411350:	490f      	ldr	r1, [pc, #60]	; (411390 <_dtoa_r+0x8a0>)
  411352:	f004 f8a5 	bl	4154a0 <__aeabi_dsub>
  411356:	4602      	mov	r2, r0
  411358:	460b      	mov	r3, r1
  41135a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  41135e:	f004 fce3 	bl	415d28 <__aeabi_dcmpgt>
  411362:	2800      	cmp	r0, #0
  411364:	f040 82a0 	bne.w	4118a8 <_dtoa_r+0xdb8>
  411368:	f1b8 0f01 	cmp.w	r8, #1
  41136c:	f340 8180 	ble.w	411670 <_dtoa_r+0xb80>
  411370:	44b0      	add	r8, r6
  411372:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  411376:	46a2      	mov	sl, r4
  411378:	46c1      	mov	r9, r8
  41137a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  41137e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  411382:	e019      	b.n	4113b8 <_dtoa_r+0x8c8>
  411384:	fffffbee 	.word	0xfffffbee
  411388:	00416f88 	.word	0x00416f88
  41138c:	00417050 	.word	0x00417050
  411390:	3ff00000 	.word	0x3ff00000
  411394:	401c0000 	.word	0x401c0000
  411398:	3fe00000 	.word	0x3fe00000
  41139c:	2000      	movs	r0, #0
  41139e:	49a8      	ldr	r1, [pc, #672]	; (411640 <_dtoa_r+0xb50>)
  4113a0:	f004 f87e 	bl	4154a0 <__aeabi_dsub>
  4113a4:	4622      	mov	r2, r4
  4113a6:	462b      	mov	r3, r5
  4113a8:	f004 fca0 	bl	415cec <__aeabi_dcmplt>
  4113ac:	2800      	cmp	r0, #0
  4113ae:	f040 8279 	bne.w	4118a4 <_dtoa_r+0xdb4>
  4113b2:	45cb      	cmp	fp, r9
  4113b4:	f000 8159 	beq.w	41166a <_dtoa_r+0xb7a>
  4113b8:	4620      	mov	r0, r4
  4113ba:	4629      	mov	r1, r5
  4113bc:	2200      	movs	r2, #0
  4113be:	4ba1      	ldr	r3, [pc, #644]	; (411644 <_dtoa_r+0xb54>)
  4113c0:	f004 fa22 	bl	415808 <__aeabi_dmul>
  4113c4:	2200      	movs	r2, #0
  4113c6:	4b9f      	ldr	r3, [pc, #636]	; (411644 <_dtoa_r+0xb54>)
  4113c8:	4604      	mov	r4, r0
  4113ca:	460d      	mov	r5, r1
  4113cc:	4630      	mov	r0, r6
  4113ce:	4639      	mov	r1, r7
  4113d0:	f004 fa1a 	bl	415808 <__aeabi_dmul>
  4113d4:	460f      	mov	r7, r1
  4113d6:	4606      	mov	r6, r0
  4113d8:	f004 fcb0 	bl	415d3c <__aeabi_d2iz>
  4113dc:	4680      	mov	r8, r0
  4113de:	f004 f9ad 	bl	41573c <__aeabi_i2d>
  4113e2:	4602      	mov	r2, r0
  4113e4:	460b      	mov	r3, r1
  4113e6:	4630      	mov	r0, r6
  4113e8:	4639      	mov	r1, r7
  4113ea:	f004 f859 	bl	4154a0 <__aeabi_dsub>
  4113ee:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4113f2:	fa5f f888 	uxtb.w	r8, r8
  4113f6:	4622      	mov	r2, r4
  4113f8:	462b      	mov	r3, r5
  4113fa:	f80b 8b01 	strb.w	r8, [fp], #1
  4113fe:	4606      	mov	r6, r0
  411400:	460f      	mov	r7, r1
  411402:	f004 fc73 	bl	415cec <__aeabi_dcmplt>
  411406:	4632      	mov	r2, r6
  411408:	463b      	mov	r3, r7
  41140a:	2800      	cmp	r0, #0
  41140c:	d0c6      	beq.n	41139c <_dtoa_r+0x8ac>
  41140e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  411410:	9607      	str	r6, [sp, #28]
  411412:	4654      	mov	r4, sl
  411414:	e539      	b.n	410e8a <_dtoa_r+0x39a>
  411416:	2600      	movs	r6, #0
  411418:	960b      	str	r6, [sp, #44]	; 0x2c
  41141a:	9825      	ldr	r0, [sp, #148]	; 0x94
  41141c:	2800      	cmp	r0, #0
  41141e:	dd3c      	ble.n	41149a <_dtoa_r+0x9aa>
  411420:	4606      	mov	r6, r0
  411422:	900f      	str	r0, [sp, #60]	; 0x3c
  411424:	4681      	mov	r9, r0
  411426:	e6ec      	b.n	411202 <_dtoa_r+0x712>
  411428:	2601      	movs	r6, #1
  41142a:	960b      	str	r6, [sp, #44]	; 0x2c
  41142c:	e7f5      	b.n	41141a <_dtoa_r+0x92a>
  41142e:	f1b9 0f00 	cmp.w	r9, #0
  411432:	f73f ac7c 	bgt.w	410d2e <_dtoa_r+0x23e>
  411436:	f040 80c6 	bne.w	4115c6 <_dtoa_r+0xad6>
  41143a:	2200      	movs	r2, #0
  41143c:	4b82      	ldr	r3, [pc, #520]	; (411648 <_dtoa_r+0xb58>)
  41143e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  411442:	f004 f9e1 	bl	415808 <__aeabi_dmul>
  411446:	4652      	mov	r2, sl
  411448:	465b      	mov	r3, fp
  41144a:	f004 fc63 	bl	415d14 <__aeabi_dcmpge>
  41144e:	46c8      	mov	r8, r9
  411450:	464e      	mov	r6, r9
  411452:	2800      	cmp	r0, #0
  411454:	d07c      	beq.n	411550 <_dtoa_r+0xa60>
  411456:	9d25      	ldr	r5, [sp, #148]	; 0x94
  411458:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  41145c:	43ed      	mvns	r5, r5
  41145e:	9507      	str	r5, [sp, #28]
  411460:	4641      	mov	r1, r8
  411462:	4620      	mov	r0, r4
  411464:	f001 f89a 	bl	41259c <_Bfree>
  411468:	2e00      	cmp	r6, #0
  41146a:	f47f ae06 	bne.w	41107a <_dtoa_r+0x58a>
  41146e:	e50c      	b.n	410e8a <_dtoa_r+0x39a>
  411470:	990a      	ldr	r1, [sp, #40]	; 0x28
  411472:	4620      	mov	r0, r4
  411474:	f001 fa2a 	bl	4128cc <__pow5mult>
  411478:	900a      	str	r0, [sp, #40]	; 0x28
  41147a:	e56a      	b.n	410f52 <_dtoa_r+0x462>
  41147c:	9d16      	ldr	r5, [sp, #88]	; 0x58
  41147e:	2d00      	cmp	r5, #0
  411480:	f000 81b7 	beq.w	4117f2 <_dtoa_r+0xd02>
  411484:	f203 4333 	addw	r3, r3, #1075	; 0x433
  411488:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41148a:	9d08      	ldr	r5, [sp, #32]
  41148c:	e527      	b.n	410ede <_dtoa_r+0x3ee>
  41148e:	4601      	mov	r1, r0
  411490:	4620      	mov	r0, r4
  411492:	f001 f883 	bl	41259c <_Bfree>
  411496:	2201      	movs	r2, #1
  411498:	e67a      	b.n	411190 <_dtoa_r+0x6a0>
  41149a:	2601      	movs	r6, #1
  41149c:	9625      	str	r6, [sp, #148]	; 0x94
  41149e:	960f      	str	r6, [sp, #60]	; 0x3c
  4114a0:	46b1      	mov	r9, r6
  4114a2:	2100      	movs	r1, #0
  4114a4:	6461      	str	r1, [r4, #68]	; 0x44
  4114a6:	e6bb      	b.n	411220 <_dtoa_r+0x730>
  4114a8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4114aa:	4641      	mov	r1, r8
  4114ac:	f001 faba 	bl	412a24 <__mcmp>
  4114b0:	2800      	cmp	r0, #0
  4114b2:	f6bf ad8f 	bge.w	410fd4 <_dtoa_r+0x4e4>
  4114b6:	f8dd e01c 	ldr.w	lr, [sp, #28]
  4114ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4114bc:	f10e 3eff 	add.w	lr, lr, #4294967295
  4114c0:	4620      	mov	r0, r4
  4114c2:	220a      	movs	r2, #10
  4114c4:	2300      	movs	r3, #0
  4114c6:	f8cd e01c 	str.w	lr, [sp, #28]
  4114ca:	f001 f871 	bl	4125b0 <__multadd>
  4114ce:	900a      	str	r0, [sp, #40]	; 0x28
  4114d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4114d2:	2800      	cmp	r0, #0
  4114d4:	f040 8207 	bne.w	4118e6 <_dtoa_r+0xdf6>
  4114d8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4114dc:	e57a      	b.n	410fd4 <_dtoa_r+0x4e4>
  4114de:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4114e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4114e6:	6918      	ldr	r0, [r3, #16]
  4114e8:	f001 f8fa 	bl	4126e0 <__hi0bits>
  4114ec:	f1c0 0020 	rsb	r0, r0, #32
  4114f0:	e547      	b.n	410f82 <_dtoa_r+0x492>
  4114f2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4114f4:	f7ff bb2d 	b.w	410b52 <_dtoa_r+0x62>
  4114f8:	f1ba 0f00 	cmp.w	sl, #0
  4114fc:	f47f ad3b 	bne.w	410f76 <_dtoa_r+0x486>
  411500:	f3cb 0313 	ubfx	r3, fp, #0, #20
  411504:	2b00      	cmp	r3, #0
  411506:	f040 817b 	bne.w	411800 <_dtoa_r+0xd10>
  41150a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  41150e:	0d3f      	lsrs	r7, r7, #20
  411510:	053f      	lsls	r7, r7, #20
  411512:	2f00      	cmp	r7, #0
  411514:	f43f ad30 	beq.w	410f78 <_dtoa_r+0x488>
  411518:	9a08      	ldr	r2, [sp, #32]
  41151a:	9b06      	ldr	r3, [sp, #24]
  41151c:	3201      	adds	r2, #1
  41151e:	3301      	adds	r3, #1
  411520:	9208      	str	r2, [sp, #32]
  411522:	9306      	str	r3, [sp, #24]
  411524:	2701      	movs	r7, #1
  411526:	e527      	b.n	410f78 <_dtoa_r+0x488>
  411528:	9924      	ldr	r1, [sp, #144]	; 0x90
  41152a:	2902      	cmp	r1, #2
  41152c:	f77f ad56 	ble.w	410fdc <_dtoa_r+0x4ec>
  411530:	f1b9 0f00 	cmp.w	r9, #0
  411534:	d18f      	bne.n	411456 <_dtoa_r+0x966>
  411536:	4641      	mov	r1, r8
  411538:	464b      	mov	r3, r9
  41153a:	2205      	movs	r2, #5
  41153c:	4620      	mov	r0, r4
  41153e:	f001 f837 	bl	4125b0 <__multadd>
  411542:	4680      	mov	r8, r0
  411544:	4641      	mov	r1, r8
  411546:	980a      	ldr	r0, [sp, #40]	; 0x28
  411548:	f001 fa6c 	bl	412a24 <__mcmp>
  41154c:	2800      	cmp	r0, #0
  41154e:	dd82      	ble.n	411456 <_dtoa_r+0x966>
  411550:	9d07      	ldr	r5, [sp, #28]
  411552:	3501      	adds	r5, #1
  411554:	9507      	str	r5, [sp, #28]
  411556:	9d09      	ldr	r5, [sp, #36]	; 0x24
  411558:	2331      	movs	r3, #49	; 0x31
  41155a:	702b      	strb	r3, [r5, #0]
  41155c:	f105 0b01 	add.w	fp, r5, #1
  411560:	e77e      	b.n	411460 <_dtoa_r+0x970>
  411562:	9807      	ldr	r0, [sp, #28]
  411564:	9909      	ldr	r1, [sp, #36]	; 0x24
  411566:	2331      	movs	r3, #49	; 0x31
  411568:	3001      	adds	r0, #1
  41156a:	9007      	str	r0, [sp, #28]
  41156c:	700b      	strb	r3, [r1, #0]
  41156e:	e576      	b.n	41105e <_dtoa_r+0x56e>
  411570:	46a3      	mov	fp, r4
  411572:	9c03      	ldr	r4, [sp, #12]
  411574:	e489      	b.n	410e8a <_dtoa_r+0x39a>
  411576:	4640      	mov	r0, r8
  411578:	f004 f8e0 	bl	41573c <__aeabi_i2d>
  41157c:	4602      	mov	r2, r0
  41157e:	460b      	mov	r3, r1
  411580:	4650      	mov	r0, sl
  411582:	4659      	mov	r1, fp
  411584:	f004 f940 	bl	415808 <__aeabi_dmul>
  411588:	2200      	movs	r2, #0
  41158a:	4b30      	ldr	r3, [pc, #192]	; (41164c <_dtoa_r+0xb5c>)
  41158c:	f003 ff8a 	bl	4154a4 <__adddf3>
  411590:	4606      	mov	r6, r0
  411592:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  411596:	4650      	mov	r0, sl
  411598:	4659      	mov	r1, fp
  41159a:	2200      	movs	r2, #0
  41159c:	4b2a      	ldr	r3, [pc, #168]	; (411648 <_dtoa_r+0xb58>)
  41159e:	f003 ff7f 	bl	4154a0 <__aeabi_dsub>
  4115a2:	4632      	mov	r2, r6
  4115a4:	463b      	mov	r3, r7
  4115a6:	4682      	mov	sl, r0
  4115a8:	468b      	mov	fp, r1
  4115aa:	f004 fbbd 	bl	415d28 <__aeabi_dcmpgt>
  4115ae:	2800      	cmp	r0, #0
  4115b0:	f040 80bc 	bne.w	41172c <_dtoa_r+0xc3c>
  4115b4:	4632      	mov	r2, r6
  4115b6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4115ba:	4650      	mov	r0, sl
  4115bc:	4659      	mov	r1, fp
  4115be:	f004 fb95 	bl	415cec <__aeabi_dcmplt>
  4115c2:	2800      	cmp	r0, #0
  4115c4:	d054      	beq.n	411670 <_dtoa_r+0xb80>
  4115c6:	f04f 0800 	mov.w	r8, #0
  4115ca:	4646      	mov	r6, r8
  4115cc:	e743      	b.n	411456 <_dtoa_r+0x966>
  4115ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4115d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4115d2:	4620      	mov	r0, r4
  4115d4:	f001 f97a 	bl	4128cc <__pow5mult>
  4115d8:	900a      	str	r0, [sp, #40]	; 0x28
  4115da:	e4ba      	b.n	410f52 <_dtoa_r+0x462>
  4115dc:	2601      	movs	r6, #1
  4115de:	960b      	str	r6, [sp, #44]	; 0x2c
  4115e0:	e602      	b.n	4111e8 <_dtoa_r+0x6f8>
  4115e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4115e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  4115e6:	970c      	str	r7, [sp, #48]	; 0x30
  4115e8:	1b7b      	subs	r3, r7, r5
  4115ea:	441e      	add	r6, r3
  4115ec:	960d      	str	r6, [sp, #52]	; 0x34
  4115ee:	2700      	movs	r7, #0
  4115f0:	e46f      	b.n	410ed2 <_dtoa_r+0x3e2>
  4115f2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4115f6:	f04f 0802 	mov.w	r8, #2
  4115fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4115fe:	e638      	b.n	411272 <_dtoa_r+0x782>
  411600:	2a00      	cmp	r2, #0
  411602:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  411606:	46d9      	mov	r9, fp
  411608:	dd11      	ble.n	41162e <_dtoa_r+0xb3e>
  41160a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41160c:	2201      	movs	r2, #1
  41160e:	4620      	mov	r0, r4
  411610:	f001 f9aa 	bl	412968 <__lshift>
  411614:	4641      	mov	r1, r8
  411616:	900a      	str	r0, [sp, #40]	; 0x28
  411618:	f001 fa04 	bl	412a24 <__mcmp>
  41161c:	2800      	cmp	r0, #0
  41161e:	f340 815b 	ble.w	4118d8 <_dtoa_r+0xde8>
  411622:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  411626:	f000 811a 	beq.w	41185e <_dtoa_r+0xd6e>
  41162a:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  41162e:	9b06      	ldr	r3, [sp, #24]
  411630:	4635      	mov	r5, r6
  411632:	f883 a000 	strb.w	sl, [r3]
  411636:	f103 0b01 	add.w	fp, r3, #1
  41163a:	463e      	mov	r6, r7
  41163c:	e50f      	b.n	41105e <_dtoa_r+0x56e>
  41163e:	bf00      	nop
  411640:	3ff00000 	.word	0x3ff00000
  411644:	40240000 	.word	0x40240000
  411648:	40140000 	.word	0x40140000
  41164c:	401c0000 	.word	0x401c0000
  411650:	d103      	bne.n	41165a <_dtoa_r+0xb6a>
  411652:	f01a 0f01 	tst.w	sl, #1
  411656:	f47f acf2 	bne.w	41103e <_dtoa_r+0x54e>
  41165a:	465b      	mov	r3, fp
  41165c:	469b      	mov	fp, r3
  41165e:	3b01      	subs	r3, #1
  411660:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  411664:	2a30      	cmp	r2, #48	; 0x30
  411666:	d0f9      	beq.n	41165c <_dtoa_r+0xb6c>
  411668:	e4f9      	b.n	41105e <_dtoa_r+0x56e>
  41166a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  41166e:	4654      	mov	r4, sl
  411670:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  411674:	f7ff bb48 	b.w	410d08 <_dtoa_r+0x218>
  411678:	9e07      	ldr	r6, [sp, #28]
  41167a:	4275      	negs	r5, r6
  41167c:	2d00      	cmp	r5, #0
  41167e:	f000 80c2 	beq.w	411806 <_dtoa_r+0xd16>
  411682:	4ba3      	ldr	r3, [pc, #652]	; (411910 <_dtoa_r+0xe20>)
  411684:	f005 020f 	and.w	r2, r5, #15
  411688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  41168c:	e9d3 2300 	ldrd	r2, r3, [r3]
  411690:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  411694:	f004 f8b8 	bl	415808 <__aeabi_dmul>
  411698:	112d      	asrs	r5, r5, #4
  41169a:	4682      	mov	sl, r0
  41169c:	468b      	mov	fp, r1
  41169e:	f000 812d 	beq.w	4118fc <_dtoa_r+0xe0c>
  4116a2:	4e9c      	ldr	r6, [pc, #624]	; (411914 <_dtoa_r+0xe24>)
  4116a4:	f04f 0802 	mov.w	r8, #2
  4116a8:	07ea      	lsls	r2, r5, #31
  4116aa:	d505      	bpl.n	4116b8 <_dtoa_r+0xbc8>
  4116ac:	e9d6 2300 	ldrd	r2, r3, [r6]
  4116b0:	f108 0801 	add.w	r8, r8, #1
  4116b4:	f004 f8a8 	bl	415808 <__aeabi_dmul>
  4116b8:	106d      	asrs	r5, r5, #1
  4116ba:	f106 0608 	add.w	r6, r6, #8
  4116be:	d1f3      	bne.n	4116a8 <_dtoa_r+0xbb8>
  4116c0:	4682      	mov	sl, r0
  4116c2:	468b      	mov	fp, r1
  4116c4:	e5f0      	b.n	4112a8 <_dtoa_r+0x7b8>
  4116c6:	9e07      	ldr	r6, [sp, #28]
  4116c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4116ca:	2230      	movs	r2, #48	; 0x30
  4116cc:	702a      	strb	r2, [r5, #0]
  4116ce:	3601      	adds	r6, #1
  4116d0:	2231      	movs	r2, #49	; 0x31
  4116d2:	9607      	str	r6, [sp, #28]
  4116d4:	701a      	strb	r2, [r3, #0]
  4116d6:	f7ff bbd8 	b.w	410e8a <_dtoa_r+0x39a>
  4116da:	6871      	ldr	r1, [r6, #4]
  4116dc:	4620      	mov	r0, r4
  4116de:	f000 ff37 	bl	412550 <_Balloc>
  4116e2:	6933      	ldr	r3, [r6, #16]
  4116e4:	1c9a      	adds	r2, r3, #2
  4116e6:	4605      	mov	r5, r0
  4116e8:	0092      	lsls	r2, r2, #2
  4116ea:	f106 010c 	add.w	r1, r6, #12
  4116ee:	300c      	adds	r0, #12
  4116f0:	f7fb fbd6 	bl	40cea0 <memcpy>
  4116f4:	4620      	mov	r0, r4
  4116f6:	4629      	mov	r1, r5
  4116f8:	2201      	movs	r2, #1
  4116fa:	f001 f935 	bl	412968 <__lshift>
  4116fe:	4607      	mov	r7, r0
  411700:	e504      	b.n	41110c <_dtoa_r+0x61c>
  411702:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  411706:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  41170a:	f000 80a8 	beq.w	41185e <_dtoa_r+0xd6e>
  41170e:	9d06      	ldr	r5, [sp, #24]
  411710:	f10a 0301 	add.w	r3, sl, #1
  411714:	702b      	strb	r3, [r5, #0]
  411716:	4635      	mov	r5, r6
  411718:	9e06      	ldr	r6, [sp, #24]
  41171a:	f106 0b01 	add.w	fp, r6, #1
  41171e:	463e      	mov	r6, r7
  411720:	e49d      	b.n	41105e <_dtoa_r+0x56e>
  411722:	4635      	mov	r5, r6
  411724:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  411728:	463e      	mov	r6, r7
  41172a:	e47c      	b.n	411026 <_dtoa_r+0x536>
  41172c:	f04f 0800 	mov.w	r8, #0
  411730:	4646      	mov	r6, r8
  411732:	e70d      	b.n	411550 <_dtoa_r+0xa60>
  411734:	4976      	ldr	r1, [pc, #472]	; (411910 <_dtoa_r+0xe20>)
  411736:	f108 35ff 	add.w	r5, r8, #4294967295
  41173a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  41173e:	4632      	mov	r2, r6
  411740:	463b      	mov	r3, r7
  411742:	e9d1 0100 	ldrd	r0, r1, [r1]
  411746:	9510      	str	r5, [sp, #64]	; 0x40
  411748:	f004 f85e 	bl	415808 <__aeabi_dmul>
  41174c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  411750:	4659      	mov	r1, fp
  411752:	4650      	mov	r0, sl
  411754:	f004 faf2 	bl	415d3c <__aeabi_d2iz>
  411758:	4605      	mov	r5, r0
  41175a:	f003 ffef 	bl	41573c <__aeabi_i2d>
  41175e:	4602      	mov	r2, r0
  411760:	460b      	mov	r3, r1
  411762:	4650      	mov	r0, sl
  411764:	4659      	mov	r1, fp
  411766:	f003 fe9b 	bl	4154a0 <__aeabi_dsub>
  41176a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  41176e:	3530      	adds	r5, #48	; 0x30
  411770:	f1b8 0f01 	cmp.w	r8, #1
  411774:	4606      	mov	r6, r0
  411776:	460f      	mov	r7, r1
  411778:	f88e 5000 	strb.w	r5, [lr]
  41177c:	f10e 0b01 	add.w	fp, lr, #1
  411780:	d01e      	beq.n	4117c0 <_dtoa_r+0xcd0>
  411782:	9d09      	ldr	r5, [sp, #36]	; 0x24
  411784:	1e6b      	subs	r3, r5, #1
  411786:	eb03 0a08 	add.w	sl, r3, r8
  41178a:	2200      	movs	r2, #0
  41178c:	4b62      	ldr	r3, [pc, #392]	; (411918 <_dtoa_r+0xe28>)
  41178e:	f004 f83b 	bl	415808 <__aeabi_dmul>
  411792:	460f      	mov	r7, r1
  411794:	4606      	mov	r6, r0
  411796:	f004 fad1 	bl	415d3c <__aeabi_d2iz>
  41179a:	4680      	mov	r8, r0
  41179c:	f003 ffce 	bl	41573c <__aeabi_i2d>
  4117a0:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4117a4:	4602      	mov	r2, r0
  4117a6:	460b      	mov	r3, r1
  4117a8:	4630      	mov	r0, r6
  4117aa:	4639      	mov	r1, r7
  4117ac:	f003 fe78 	bl	4154a0 <__aeabi_dsub>
  4117b0:	f805 8f01 	strb.w	r8, [r5, #1]!
  4117b4:	4555      	cmp	r5, sl
  4117b6:	d1e8      	bne.n	41178a <_dtoa_r+0xc9a>
  4117b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4117ba:	4606      	mov	r6, r0
  4117bc:	460f      	mov	r7, r1
  4117be:	44ab      	add	fp, r5
  4117c0:	2200      	movs	r2, #0
  4117c2:	4b56      	ldr	r3, [pc, #344]	; (41191c <_dtoa_r+0xe2c>)
  4117c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  4117c8:	f003 fe6c 	bl	4154a4 <__adddf3>
  4117cc:	4632      	mov	r2, r6
  4117ce:	463b      	mov	r3, r7
  4117d0:	f004 fa8c 	bl	415cec <__aeabi_dcmplt>
  4117d4:	2800      	cmp	r0, #0
  4117d6:	d04d      	beq.n	411874 <_dtoa_r+0xd84>
  4117d8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4117da:	9607      	str	r6, [sp, #28]
  4117dc:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  4117e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4117e2:	f7ff bb4b 	b.w	410e7c <_dtoa_r+0x38c>
  4117e6:	9e08      	ldr	r6, [sp, #32]
  4117e8:	2300      	movs	r3, #0
  4117ea:	ebc9 0506 	rsb	r5, r9, r6
  4117ee:	f7ff bb76 	b.w	410ede <_dtoa_r+0x3ee>
  4117f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4117f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4117f6:	9d08      	ldr	r5, [sp, #32]
  4117f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4117fc:	f7ff bb6f 	b.w	410ede <_dtoa_r+0x3ee>
  411800:	4657      	mov	r7, sl
  411802:	f7ff bbb9 	b.w	410f78 <_dtoa_r+0x488>
  411806:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  41180a:	f04f 0802 	mov.w	r8, #2
  41180e:	e54b      	b.n	4112a8 <_dtoa_r+0x7b8>
  411810:	f1b9 0f00 	cmp.w	r9, #0
  411814:	f43f aeaf 	beq.w	411576 <_dtoa_r+0xa86>
  411818:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  41181a:	2e00      	cmp	r6, #0
  41181c:	f77f af28 	ble.w	411670 <_dtoa_r+0xb80>
  411820:	2200      	movs	r2, #0
  411822:	4b3d      	ldr	r3, [pc, #244]	; (411918 <_dtoa_r+0xe28>)
  411824:	4650      	mov	r0, sl
  411826:	4659      	mov	r1, fp
  411828:	f003 ffee 	bl	415808 <__aeabi_dmul>
  41182c:	4682      	mov	sl, r0
  41182e:	f108 0001 	add.w	r0, r8, #1
  411832:	468b      	mov	fp, r1
  411834:	f003 ff82 	bl	41573c <__aeabi_i2d>
  411838:	4602      	mov	r2, r0
  41183a:	460b      	mov	r3, r1
  41183c:	4650      	mov	r0, sl
  41183e:	4659      	mov	r1, fp
  411840:	f003 ffe2 	bl	415808 <__aeabi_dmul>
  411844:	2200      	movs	r2, #0
  411846:	4b36      	ldr	r3, [pc, #216]	; (411920 <_dtoa_r+0xe30>)
  411848:	f003 fe2c 	bl	4154a4 <__adddf3>
  41184c:	9d07      	ldr	r5, [sp, #28]
  41184e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  411852:	3d01      	subs	r5, #1
  411854:	4606      	mov	r6, r0
  411856:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  41185a:	9517      	str	r5, [sp, #92]	; 0x5c
  41185c:	e544      	b.n	4112e8 <_dtoa_r+0x7f8>
  41185e:	4635      	mov	r5, r6
  411860:	9b06      	ldr	r3, [sp, #24]
  411862:	9e06      	ldr	r6, [sp, #24]
  411864:	9909      	ldr	r1, [sp, #36]	; 0x24
  411866:	2239      	movs	r2, #57	; 0x39
  411868:	7032      	strb	r2, [r6, #0]
  41186a:	f103 0b01 	add.w	fp, r3, #1
  41186e:	463e      	mov	r6, r7
  411870:	f7ff bbef 	b.w	411052 <_dtoa_r+0x562>
  411874:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  411878:	2000      	movs	r0, #0
  41187a:	4928      	ldr	r1, [pc, #160]	; (41191c <_dtoa_r+0xe2c>)
  41187c:	f003 fe10 	bl	4154a0 <__aeabi_dsub>
  411880:	4632      	mov	r2, r6
  411882:	463b      	mov	r3, r7
  411884:	f004 fa50 	bl	415d28 <__aeabi_dcmpgt>
  411888:	2800      	cmp	r0, #0
  41188a:	f43f aef1 	beq.w	411670 <_dtoa_r+0xb80>
  41188e:	465b      	mov	r3, fp
  411890:	469b      	mov	fp, r3
  411892:	3b01      	subs	r3, #1
  411894:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  411898:	2a30      	cmp	r2, #48	; 0x30
  41189a:	d0f9      	beq.n	411890 <_dtoa_r+0xda0>
  41189c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  41189e:	9507      	str	r5, [sp, #28]
  4118a0:	f7ff baf3 	b.w	410e8a <_dtoa_r+0x39a>
  4118a4:	4645      	mov	r5, r8
  4118a6:	4654      	mov	r4, sl
  4118a8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4118aa:	9607      	str	r6, [sp, #28]
  4118ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4118ae:	f7ff bae5 	b.w	410e7c <_dtoa_r+0x38c>
  4118b2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4118b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4118ba:	d0d0      	beq.n	41185e <_dtoa_r+0xd6e>
  4118bc:	9b03      	ldr	r3, [sp, #12]
  4118be:	4635      	mov	r5, r6
  4118c0:	2b00      	cmp	r3, #0
  4118c2:	9e06      	ldr	r6, [sp, #24]
  4118c4:	bfc8      	it	gt
  4118c6:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  4118ca:	f886 a000 	strb.w	sl, [r6]
  4118ce:	f106 0b01 	add.w	fp, r6, #1
  4118d2:	463e      	mov	r6, r7
  4118d4:	f7ff bbc3 	b.w	41105e <_dtoa_r+0x56e>
  4118d8:	f47f aea9 	bne.w	41162e <_dtoa_r+0xb3e>
  4118dc:	f01a 0f01 	tst.w	sl, #1
  4118e0:	f43f aea5 	beq.w	41162e <_dtoa_r+0xb3e>
  4118e4:	e69d      	b.n	411622 <_dtoa_r+0xb32>
  4118e6:	4631      	mov	r1, r6
  4118e8:	4620      	mov	r0, r4
  4118ea:	220a      	movs	r2, #10
  4118ec:	2300      	movs	r3, #0
  4118ee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4118f2:	f000 fe5d 	bl	4125b0 <__multadd>
  4118f6:	4606      	mov	r6, r0
  4118f8:	f7ff bb6c 	b.w	410fd4 <_dtoa_r+0x4e4>
  4118fc:	f04f 0802 	mov.w	r8, #2
  411900:	e4d2      	b.n	4112a8 <_dtoa_r+0x7b8>
  411902:	f43f ab52 	beq.w	410faa <_dtoa_r+0x4ba>
  411906:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  41190a:	f7ff bbe2 	b.w	4110d2 <_dtoa_r+0x5e2>
  41190e:	bf00      	nop
  411910:	00416f88 	.word	0x00416f88
  411914:	00417050 	.word	0x00417050
  411918:	40240000 	.word	0x40240000
  41191c:	3fe00000 	.word	0x3fe00000
  411920:	401c0000 	.word	0x401c0000
  411924:	f3af 8000 	nop.w

00411928 <__sflush_r>:
  411928:	898b      	ldrh	r3, [r1, #12]
  41192a:	b29a      	uxth	r2, r3
  41192c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411930:	460d      	mov	r5, r1
  411932:	0711      	lsls	r1, r2, #28
  411934:	4680      	mov	r8, r0
  411936:	d43c      	bmi.n	4119b2 <__sflush_r+0x8a>
  411938:	686a      	ldr	r2, [r5, #4]
  41193a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41193e:	2a00      	cmp	r2, #0
  411940:	81ab      	strh	r3, [r5, #12]
  411942:	dd59      	ble.n	4119f8 <__sflush_r+0xd0>
  411944:	6aac      	ldr	r4, [r5, #40]	; 0x28
  411946:	2c00      	cmp	r4, #0
  411948:	d04b      	beq.n	4119e2 <__sflush_r+0xba>
  41194a:	b29b      	uxth	r3, r3
  41194c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  411950:	2100      	movs	r1, #0
  411952:	b292      	uxth	r2, r2
  411954:	f8d8 6000 	ldr.w	r6, [r8]
  411958:	f8c8 1000 	str.w	r1, [r8]
  41195c:	2a00      	cmp	r2, #0
  41195e:	d04f      	beq.n	411a00 <__sflush_r+0xd8>
  411960:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  411962:	075f      	lsls	r7, r3, #29
  411964:	d505      	bpl.n	411972 <__sflush_r+0x4a>
  411966:	6869      	ldr	r1, [r5, #4]
  411968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  41196a:	1a52      	subs	r2, r2, r1
  41196c:	b10b      	cbz	r3, 411972 <__sflush_r+0x4a>
  41196e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  411970:	1ad2      	subs	r2, r2, r3
  411972:	4640      	mov	r0, r8
  411974:	69e9      	ldr	r1, [r5, #28]
  411976:	2300      	movs	r3, #0
  411978:	47a0      	blx	r4
  41197a:	1c44      	adds	r4, r0, #1
  41197c:	d04a      	beq.n	411a14 <__sflush_r+0xec>
  41197e:	89aa      	ldrh	r2, [r5, #12]
  411980:	692b      	ldr	r3, [r5, #16]
  411982:	602b      	str	r3, [r5, #0]
  411984:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  411988:	b29b      	uxth	r3, r3
  41198a:	2200      	movs	r2, #0
  41198c:	606a      	str	r2, [r5, #4]
  41198e:	04da      	lsls	r2, r3, #19
  411990:	81ab      	strh	r3, [r5, #12]
  411992:	d44c      	bmi.n	411a2e <__sflush_r+0x106>
  411994:	6b29      	ldr	r1, [r5, #48]	; 0x30
  411996:	f8c8 6000 	str.w	r6, [r8]
  41199a:	b311      	cbz	r1, 4119e2 <__sflush_r+0xba>
  41199c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4119a0:	4299      	cmp	r1, r3
  4119a2:	d002      	beq.n	4119aa <__sflush_r+0x82>
  4119a4:	4640      	mov	r0, r8
  4119a6:	f000 f9c7 	bl	411d38 <_free_r>
  4119aa:	2000      	movs	r0, #0
  4119ac:	6328      	str	r0, [r5, #48]	; 0x30
  4119ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4119b2:	692e      	ldr	r6, [r5, #16]
  4119b4:	b1ae      	cbz	r6, 4119e2 <__sflush_r+0xba>
  4119b6:	682c      	ldr	r4, [r5, #0]
  4119b8:	602e      	str	r6, [r5, #0]
  4119ba:	0791      	lsls	r1, r2, #30
  4119bc:	bf0c      	ite	eq
  4119be:	696b      	ldreq	r3, [r5, #20]
  4119c0:	2300      	movne	r3, #0
  4119c2:	1ba4      	subs	r4, r4, r6
  4119c4:	60ab      	str	r3, [r5, #8]
  4119c6:	e00a      	b.n	4119de <__sflush_r+0xb6>
  4119c8:	4632      	mov	r2, r6
  4119ca:	4623      	mov	r3, r4
  4119cc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4119ce:	69e9      	ldr	r1, [r5, #28]
  4119d0:	4640      	mov	r0, r8
  4119d2:	47b8      	blx	r7
  4119d4:	2800      	cmp	r0, #0
  4119d6:	ebc0 0404 	rsb	r4, r0, r4
  4119da:	4406      	add	r6, r0
  4119dc:	dd04      	ble.n	4119e8 <__sflush_r+0xc0>
  4119de:	2c00      	cmp	r4, #0
  4119e0:	dcf2      	bgt.n	4119c8 <__sflush_r+0xa0>
  4119e2:	2000      	movs	r0, #0
  4119e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4119e8:	89ab      	ldrh	r3, [r5, #12]
  4119ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4119ee:	81ab      	strh	r3, [r5, #12]
  4119f0:	f04f 30ff 	mov.w	r0, #4294967295
  4119f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4119f8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4119fa:	2a00      	cmp	r2, #0
  4119fc:	dca2      	bgt.n	411944 <__sflush_r+0x1c>
  4119fe:	e7f0      	b.n	4119e2 <__sflush_r+0xba>
  411a00:	2301      	movs	r3, #1
  411a02:	4640      	mov	r0, r8
  411a04:	69e9      	ldr	r1, [r5, #28]
  411a06:	47a0      	blx	r4
  411a08:	1c43      	adds	r3, r0, #1
  411a0a:	4602      	mov	r2, r0
  411a0c:	d01e      	beq.n	411a4c <__sflush_r+0x124>
  411a0e:	89ab      	ldrh	r3, [r5, #12]
  411a10:	6aac      	ldr	r4, [r5, #40]	; 0x28
  411a12:	e7a6      	b.n	411962 <__sflush_r+0x3a>
  411a14:	f8d8 3000 	ldr.w	r3, [r8]
  411a18:	b95b      	cbnz	r3, 411a32 <__sflush_r+0x10a>
  411a1a:	89a9      	ldrh	r1, [r5, #12]
  411a1c:	606b      	str	r3, [r5, #4]
  411a1e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  411a22:	b29b      	uxth	r3, r3
  411a24:	692a      	ldr	r2, [r5, #16]
  411a26:	81ab      	strh	r3, [r5, #12]
  411a28:	04db      	lsls	r3, r3, #19
  411a2a:	602a      	str	r2, [r5, #0]
  411a2c:	d5b2      	bpl.n	411994 <__sflush_r+0x6c>
  411a2e:	6528      	str	r0, [r5, #80]	; 0x50
  411a30:	e7b0      	b.n	411994 <__sflush_r+0x6c>
  411a32:	2b1d      	cmp	r3, #29
  411a34:	d001      	beq.n	411a3a <__sflush_r+0x112>
  411a36:	2b16      	cmp	r3, #22
  411a38:	d119      	bne.n	411a6e <__sflush_r+0x146>
  411a3a:	89aa      	ldrh	r2, [r5, #12]
  411a3c:	692b      	ldr	r3, [r5, #16]
  411a3e:	602b      	str	r3, [r5, #0]
  411a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  411a44:	2300      	movs	r3, #0
  411a46:	81aa      	strh	r2, [r5, #12]
  411a48:	606b      	str	r3, [r5, #4]
  411a4a:	e7a3      	b.n	411994 <__sflush_r+0x6c>
  411a4c:	f8d8 3000 	ldr.w	r3, [r8]
  411a50:	2b00      	cmp	r3, #0
  411a52:	d0dc      	beq.n	411a0e <__sflush_r+0xe6>
  411a54:	2b1d      	cmp	r3, #29
  411a56:	d007      	beq.n	411a68 <__sflush_r+0x140>
  411a58:	2b16      	cmp	r3, #22
  411a5a:	d005      	beq.n	411a68 <__sflush_r+0x140>
  411a5c:	89ab      	ldrh	r3, [r5, #12]
  411a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411a62:	81ab      	strh	r3, [r5, #12]
  411a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411a68:	f8c8 6000 	str.w	r6, [r8]
  411a6c:	e7b9      	b.n	4119e2 <__sflush_r+0xba>
  411a6e:	89ab      	ldrh	r3, [r5, #12]
  411a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411a74:	81ab      	strh	r3, [r5, #12]
  411a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411a7a:	bf00      	nop

00411a7c <_fflush_r>:
  411a7c:	b510      	push	{r4, lr}
  411a7e:	4604      	mov	r4, r0
  411a80:	b082      	sub	sp, #8
  411a82:	b108      	cbz	r0, 411a88 <_fflush_r+0xc>
  411a84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411a86:	b153      	cbz	r3, 411a9e <_fflush_r+0x22>
  411a88:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  411a8c:	b908      	cbnz	r0, 411a92 <_fflush_r+0x16>
  411a8e:	b002      	add	sp, #8
  411a90:	bd10      	pop	{r4, pc}
  411a92:	4620      	mov	r0, r4
  411a94:	b002      	add	sp, #8
  411a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  411a9a:	f7ff bf45 	b.w	411928 <__sflush_r>
  411a9e:	9101      	str	r1, [sp, #4]
  411aa0:	f000 f808 	bl	411ab4 <__sinit>
  411aa4:	9901      	ldr	r1, [sp, #4]
  411aa6:	e7ef      	b.n	411a88 <_fflush_r+0xc>

00411aa8 <_cleanup_r>:
  411aa8:	4901      	ldr	r1, [pc, #4]	; (411ab0 <_cleanup_r+0x8>)
  411aaa:	f000 bb9f 	b.w	4121ec <_fwalk>
  411aae:	bf00      	nop
  411ab0:	00414cd9 	.word	0x00414cd9

00411ab4 <__sinit>:
  411ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ab8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  411aba:	b083      	sub	sp, #12
  411abc:	4607      	mov	r7, r0
  411abe:	2c00      	cmp	r4, #0
  411ac0:	d165      	bne.n	411b8e <__sinit+0xda>
  411ac2:	6845      	ldr	r5, [r0, #4]
  411ac4:	4833      	ldr	r0, [pc, #204]	; (411b94 <__sinit+0xe0>)
  411ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
  411ac8:	2304      	movs	r3, #4
  411aca:	2103      	movs	r1, #3
  411acc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  411ad0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  411ad4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  411ad8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  411adc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  411ae0:	81ab      	strh	r3, [r5, #12]
  411ae2:	602c      	str	r4, [r5, #0]
  411ae4:	606c      	str	r4, [r5, #4]
  411ae6:	60ac      	str	r4, [r5, #8]
  411ae8:	666c      	str	r4, [r5, #100]	; 0x64
  411aea:	81ec      	strh	r4, [r5, #14]
  411aec:	612c      	str	r4, [r5, #16]
  411aee:	616c      	str	r4, [r5, #20]
  411af0:	61ac      	str	r4, [r5, #24]
  411af2:	4621      	mov	r1, r4
  411af4:	2208      	movs	r2, #8
  411af6:	f7fb fa6d 	bl	40cfd4 <memset>
  411afa:	68be      	ldr	r6, [r7, #8]
  411afc:	f8df b098 	ldr.w	fp, [pc, #152]	; 411b98 <__sinit+0xe4>
  411b00:	f8df a098 	ldr.w	sl, [pc, #152]	; 411b9c <__sinit+0xe8>
  411b04:	f8df 9098 	ldr.w	r9, [pc, #152]	; 411ba0 <__sinit+0xec>
  411b08:	f8df 8098 	ldr.w	r8, [pc, #152]	; 411ba4 <__sinit+0xf0>
  411b0c:	61ed      	str	r5, [r5, #28]
  411b0e:	2301      	movs	r3, #1
  411b10:	2209      	movs	r2, #9
  411b12:	f8c5 b020 	str.w	fp, [r5, #32]
  411b16:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  411b1a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411b1e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411b22:	4621      	mov	r1, r4
  411b24:	81f3      	strh	r3, [r6, #14]
  411b26:	81b2      	strh	r2, [r6, #12]
  411b28:	6034      	str	r4, [r6, #0]
  411b2a:	6074      	str	r4, [r6, #4]
  411b2c:	60b4      	str	r4, [r6, #8]
  411b2e:	6674      	str	r4, [r6, #100]	; 0x64
  411b30:	6134      	str	r4, [r6, #16]
  411b32:	6174      	str	r4, [r6, #20]
  411b34:	61b4      	str	r4, [r6, #24]
  411b36:	2208      	movs	r2, #8
  411b38:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  411b3c:	9301      	str	r3, [sp, #4]
  411b3e:	f7fb fa49 	bl	40cfd4 <memset>
  411b42:	68fd      	ldr	r5, [r7, #12]
  411b44:	61f6      	str	r6, [r6, #28]
  411b46:	2012      	movs	r0, #18
  411b48:	2202      	movs	r2, #2
  411b4a:	f8c6 b020 	str.w	fp, [r6, #32]
  411b4e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  411b52:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  411b56:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  411b5a:	4621      	mov	r1, r4
  411b5c:	81a8      	strh	r0, [r5, #12]
  411b5e:	81ea      	strh	r2, [r5, #14]
  411b60:	602c      	str	r4, [r5, #0]
  411b62:	606c      	str	r4, [r5, #4]
  411b64:	60ac      	str	r4, [r5, #8]
  411b66:	666c      	str	r4, [r5, #100]	; 0x64
  411b68:	612c      	str	r4, [r5, #16]
  411b6a:	616c      	str	r4, [r5, #20]
  411b6c:	61ac      	str	r4, [r5, #24]
  411b6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  411b72:	2208      	movs	r2, #8
  411b74:	f7fb fa2e 	bl	40cfd4 <memset>
  411b78:	9b01      	ldr	r3, [sp, #4]
  411b7a:	61ed      	str	r5, [r5, #28]
  411b7c:	f8c5 b020 	str.w	fp, [r5, #32]
  411b80:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  411b84:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411b88:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  411b8e:	b003      	add	sp, #12
  411b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411b94:	00411aa9 	.word	0x00411aa9
  411b98:	0040d2b1 	.word	0x0040d2b1
  411b9c:	0040d2d9 	.word	0x0040d2d9
  411ba0:	0040d311 	.word	0x0040d311
  411ba4:	0040d331 	.word	0x0040d331

00411ba8 <__sfp_lock_acquire>:
  411ba8:	4770      	bx	lr
  411baa:	bf00      	nop

00411bac <__sfp_lock_release>:
  411bac:	4770      	bx	lr
  411bae:	bf00      	nop

00411bb0 <__libc_fini_array>:
  411bb0:	b538      	push	{r3, r4, r5, lr}
  411bb2:	4d09      	ldr	r5, [pc, #36]	; (411bd8 <__libc_fini_array+0x28>)
  411bb4:	4c09      	ldr	r4, [pc, #36]	; (411bdc <__libc_fini_array+0x2c>)
  411bb6:	1b64      	subs	r4, r4, r5
  411bb8:	10a4      	asrs	r4, r4, #2
  411bba:	bf18      	it	ne
  411bbc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  411bc0:	d005      	beq.n	411bce <__libc_fini_array+0x1e>
  411bc2:	3c01      	subs	r4, #1
  411bc4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  411bc8:	4798      	blx	r3
  411bca:	2c00      	cmp	r4, #0
  411bcc:	d1f9      	bne.n	411bc2 <__libc_fini_array+0x12>
  411bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  411bd2:	f005 bb13 	b.w	4171fc <_fini>
  411bd6:	bf00      	nop
  411bd8:	00417208 	.word	0x00417208
  411bdc:	0041720c 	.word	0x0041720c

00411be0 <_fputwc_r>:
  411be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411be4:	8993      	ldrh	r3, [r2, #12]
  411be6:	460f      	mov	r7, r1
  411be8:	0499      	lsls	r1, r3, #18
  411bea:	b082      	sub	sp, #8
  411bec:	4614      	mov	r4, r2
  411bee:	4680      	mov	r8, r0
  411bf0:	d406      	bmi.n	411c00 <_fputwc_r+0x20>
  411bf2:	6e52      	ldr	r2, [r2, #100]	; 0x64
  411bf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  411bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  411bfc:	81a3      	strh	r3, [r4, #12]
  411bfe:	6662      	str	r2, [r4, #100]	; 0x64
  411c00:	f000 fb2c 	bl	41225c <__locale_mb_cur_max>
  411c04:	2801      	cmp	r0, #1
  411c06:	d03d      	beq.n	411c84 <_fputwc_r+0xa4>
  411c08:	463a      	mov	r2, r7
  411c0a:	4640      	mov	r0, r8
  411c0c:	a901      	add	r1, sp, #4
  411c0e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  411c12:	f002 ff67 	bl	414ae4 <_wcrtomb_r>
  411c16:	1c42      	adds	r2, r0, #1
  411c18:	4606      	mov	r6, r0
  411c1a:	d02c      	beq.n	411c76 <_fputwc_r+0x96>
  411c1c:	2800      	cmp	r0, #0
  411c1e:	d039      	beq.n	411c94 <_fputwc_r+0xb4>
  411c20:	f89d 1004 	ldrb.w	r1, [sp, #4]
  411c24:	2500      	movs	r5, #0
  411c26:	e009      	b.n	411c3c <_fputwc_r+0x5c>
  411c28:	6823      	ldr	r3, [r4, #0]
  411c2a:	7019      	strb	r1, [r3, #0]
  411c2c:	6823      	ldr	r3, [r4, #0]
  411c2e:	3301      	adds	r3, #1
  411c30:	6023      	str	r3, [r4, #0]
  411c32:	3501      	adds	r5, #1
  411c34:	42b5      	cmp	r5, r6
  411c36:	d22d      	bcs.n	411c94 <_fputwc_r+0xb4>
  411c38:	ab01      	add	r3, sp, #4
  411c3a:	5ce9      	ldrb	r1, [r5, r3]
  411c3c:	68a3      	ldr	r3, [r4, #8]
  411c3e:	3b01      	subs	r3, #1
  411c40:	2b00      	cmp	r3, #0
  411c42:	60a3      	str	r3, [r4, #8]
  411c44:	daf0      	bge.n	411c28 <_fputwc_r+0x48>
  411c46:	69a2      	ldr	r2, [r4, #24]
  411c48:	4293      	cmp	r3, r2
  411c4a:	db05      	blt.n	411c58 <_fputwc_r+0x78>
  411c4c:	6823      	ldr	r3, [r4, #0]
  411c4e:	7019      	strb	r1, [r3, #0]
  411c50:	6823      	ldr	r3, [r4, #0]
  411c52:	7819      	ldrb	r1, [r3, #0]
  411c54:	290a      	cmp	r1, #10
  411c56:	d1ea      	bne.n	411c2e <_fputwc_r+0x4e>
  411c58:	4640      	mov	r0, r8
  411c5a:	4622      	mov	r2, r4
  411c5c:	f002 feee 	bl	414a3c <__swbuf_r>
  411c60:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  411c64:	4258      	negs	r0, r3
  411c66:	4158      	adcs	r0, r3
  411c68:	2800      	cmp	r0, #0
  411c6a:	d0e2      	beq.n	411c32 <_fputwc_r+0x52>
  411c6c:	f04f 30ff 	mov.w	r0, #4294967295
  411c70:	b002      	add	sp, #8
  411c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411c76:	89a3      	ldrh	r3, [r4, #12]
  411c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411c7c:	81a3      	strh	r3, [r4, #12]
  411c7e:	b002      	add	sp, #8
  411c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411c84:	1e7b      	subs	r3, r7, #1
  411c86:	2bfe      	cmp	r3, #254	; 0xfe
  411c88:	d8be      	bhi.n	411c08 <_fputwc_r+0x28>
  411c8a:	b2f9      	uxtb	r1, r7
  411c8c:	4606      	mov	r6, r0
  411c8e:	f88d 1004 	strb.w	r1, [sp, #4]
  411c92:	e7c7      	b.n	411c24 <_fputwc_r+0x44>
  411c94:	4638      	mov	r0, r7
  411c96:	b002      	add	sp, #8
  411c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00411c9c <_malloc_trim_r>:
  411c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411c9e:	4d23      	ldr	r5, [pc, #140]	; (411d2c <_malloc_trim_r+0x90>)
  411ca0:	460f      	mov	r7, r1
  411ca2:	4604      	mov	r4, r0
  411ca4:	f7fb f9e0 	bl	40d068 <__malloc_lock>
  411ca8:	68ab      	ldr	r3, [r5, #8]
  411caa:	685e      	ldr	r6, [r3, #4]
  411cac:	f026 0603 	bic.w	r6, r6, #3
  411cb0:	1bf1      	subs	r1, r6, r7
  411cb2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  411cb6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  411cba:	f021 010f 	bic.w	r1, r1, #15
  411cbe:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  411cc2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  411cc6:	db07      	blt.n	411cd8 <_malloc_trim_r+0x3c>
  411cc8:	4620      	mov	r0, r4
  411cca:	2100      	movs	r1, #0
  411ccc:	f7fb f9d0 	bl	40d070 <_sbrk_r>
  411cd0:	68ab      	ldr	r3, [r5, #8]
  411cd2:	4433      	add	r3, r6
  411cd4:	4298      	cmp	r0, r3
  411cd6:	d004      	beq.n	411ce2 <_malloc_trim_r+0x46>
  411cd8:	4620      	mov	r0, r4
  411cda:	f7fb f9c7 	bl	40d06c <__malloc_unlock>
  411cde:	2000      	movs	r0, #0
  411ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411ce2:	4620      	mov	r0, r4
  411ce4:	4279      	negs	r1, r7
  411ce6:	f7fb f9c3 	bl	40d070 <_sbrk_r>
  411cea:	3001      	adds	r0, #1
  411cec:	d00d      	beq.n	411d0a <_malloc_trim_r+0x6e>
  411cee:	4b10      	ldr	r3, [pc, #64]	; (411d30 <_malloc_trim_r+0x94>)
  411cf0:	68aa      	ldr	r2, [r5, #8]
  411cf2:	6819      	ldr	r1, [r3, #0]
  411cf4:	1bf6      	subs	r6, r6, r7
  411cf6:	f046 0601 	orr.w	r6, r6, #1
  411cfa:	4620      	mov	r0, r4
  411cfc:	1bc9      	subs	r1, r1, r7
  411cfe:	6056      	str	r6, [r2, #4]
  411d00:	6019      	str	r1, [r3, #0]
  411d02:	f7fb f9b3 	bl	40d06c <__malloc_unlock>
  411d06:	2001      	movs	r0, #1
  411d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411d0a:	4620      	mov	r0, r4
  411d0c:	2100      	movs	r1, #0
  411d0e:	f7fb f9af 	bl	40d070 <_sbrk_r>
  411d12:	68ab      	ldr	r3, [r5, #8]
  411d14:	1ac2      	subs	r2, r0, r3
  411d16:	2a0f      	cmp	r2, #15
  411d18:	ddde      	ble.n	411cd8 <_malloc_trim_r+0x3c>
  411d1a:	4d06      	ldr	r5, [pc, #24]	; (411d34 <_malloc_trim_r+0x98>)
  411d1c:	4904      	ldr	r1, [pc, #16]	; (411d30 <_malloc_trim_r+0x94>)
  411d1e:	682d      	ldr	r5, [r5, #0]
  411d20:	f042 0201 	orr.w	r2, r2, #1
  411d24:	1b40      	subs	r0, r0, r5
  411d26:	605a      	str	r2, [r3, #4]
  411d28:	6008      	str	r0, [r1, #0]
  411d2a:	e7d5      	b.n	411cd8 <_malloc_trim_r+0x3c>
  411d2c:	2000091c 	.word	0x2000091c
  411d30:	20002494 	.word	0x20002494
  411d34:	20000d28 	.word	0x20000d28

00411d38 <_free_r>:
  411d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411d3c:	460d      	mov	r5, r1
  411d3e:	4606      	mov	r6, r0
  411d40:	2900      	cmp	r1, #0
  411d42:	d055      	beq.n	411df0 <_free_r+0xb8>
  411d44:	f7fb f990 	bl	40d068 <__malloc_lock>
  411d48:	f855 1c04 	ldr.w	r1, [r5, #-4]
  411d4c:	f8df c174 	ldr.w	ip, [pc, #372]	; 411ec4 <_free_r+0x18c>
  411d50:	f021 0301 	bic.w	r3, r1, #1
  411d54:	f1a5 0408 	sub.w	r4, r5, #8
  411d58:	18e2      	adds	r2, r4, r3
  411d5a:	f8dc 0008 	ldr.w	r0, [ip, #8]
  411d5e:	6857      	ldr	r7, [r2, #4]
  411d60:	4290      	cmp	r0, r2
  411d62:	f027 0703 	bic.w	r7, r7, #3
  411d66:	d069      	beq.n	411e3c <_free_r+0x104>
  411d68:	f011 0101 	ands.w	r1, r1, #1
  411d6c:	6057      	str	r7, [r2, #4]
  411d6e:	d032      	beq.n	411dd6 <_free_r+0x9e>
  411d70:	2100      	movs	r1, #0
  411d72:	19d0      	adds	r0, r2, r7
  411d74:	6840      	ldr	r0, [r0, #4]
  411d76:	07c0      	lsls	r0, r0, #31
  411d78:	d406      	bmi.n	411d88 <_free_r+0x50>
  411d7a:	443b      	add	r3, r7
  411d7c:	6890      	ldr	r0, [r2, #8]
  411d7e:	2900      	cmp	r1, #0
  411d80:	d04e      	beq.n	411e20 <_free_r+0xe8>
  411d82:	68d2      	ldr	r2, [r2, #12]
  411d84:	60c2      	str	r2, [r0, #12]
  411d86:	6090      	str	r0, [r2, #8]
  411d88:	f043 0201 	orr.w	r2, r3, #1
  411d8c:	6062      	str	r2, [r4, #4]
  411d8e:	50e3      	str	r3, [r4, r3]
  411d90:	b9e1      	cbnz	r1, 411dcc <_free_r+0x94>
  411d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  411d96:	d32d      	bcc.n	411df4 <_free_r+0xbc>
  411d98:	0a5a      	lsrs	r2, r3, #9
  411d9a:	2a04      	cmp	r2, #4
  411d9c:	d86a      	bhi.n	411e74 <_free_r+0x13c>
  411d9e:	0998      	lsrs	r0, r3, #6
  411da0:	3038      	adds	r0, #56	; 0x38
  411da2:	0041      	lsls	r1, r0, #1
  411da4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  411da8:	4946      	ldr	r1, [pc, #280]	; (411ec4 <_free_r+0x18c>)
  411daa:	f8dc 2008 	ldr.w	r2, [ip, #8]
  411dae:	4562      	cmp	r2, ip
  411db0:	d066      	beq.n	411e80 <_free_r+0x148>
  411db2:	6851      	ldr	r1, [r2, #4]
  411db4:	f021 0103 	bic.w	r1, r1, #3
  411db8:	428b      	cmp	r3, r1
  411dba:	d202      	bcs.n	411dc2 <_free_r+0x8a>
  411dbc:	6892      	ldr	r2, [r2, #8]
  411dbe:	4594      	cmp	ip, r2
  411dc0:	d1f7      	bne.n	411db2 <_free_r+0x7a>
  411dc2:	68d3      	ldr	r3, [r2, #12]
  411dc4:	60e3      	str	r3, [r4, #12]
  411dc6:	60a2      	str	r2, [r4, #8]
  411dc8:	609c      	str	r4, [r3, #8]
  411dca:	60d4      	str	r4, [r2, #12]
  411dcc:	4630      	mov	r0, r6
  411dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411dd2:	f7fb b94b 	b.w	40d06c <__malloc_unlock>
  411dd6:	f855 5c08 	ldr.w	r5, [r5, #-8]
  411dda:	1b64      	subs	r4, r4, r5
  411ddc:	f10c 0808 	add.w	r8, ip, #8
  411de0:	68a0      	ldr	r0, [r4, #8]
  411de2:	4540      	cmp	r0, r8
  411de4:	442b      	add	r3, r5
  411de6:	d043      	beq.n	411e70 <_free_r+0x138>
  411de8:	68e5      	ldr	r5, [r4, #12]
  411dea:	60c5      	str	r5, [r0, #12]
  411dec:	60a8      	str	r0, [r5, #8]
  411dee:	e7c0      	b.n	411d72 <_free_r+0x3a>
  411df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411df4:	08db      	lsrs	r3, r3, #3
  411df6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  411dfa:	2501      	movs	r5, #1
  411dfc:	f8dc 0004 	ldr.w	r0, [ip, #4]
  411e00:	6891      	ldr	r1, [r2, #8]
  411e02:	60a1      	str	r1, [r4, #8]
  411e04:	109b      	asrs	r3, r3, #2
  411e06:	fa05 f303 	lsl.w	r3, r5, r3
  411e0a:	4318      	orrs	r0, r3
  411e0c:	60e2      	str	r2, [r4, #12]
  411e0e:	f8cc 0004 	str.w	r0, [ip, #4]
  411e12:	6094      	str	r4, [r2, #8]
  411e14:	4630      	mov	r0, r6
  411e16:	60cc      	str	r4, [r1, #12]
  411e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411e1c:	f7fb b926 	b.w	40d06c <__malloc_unlock>
  411e20:	4d29      	ldr	r5, [pc, #164]	; (411ec8 <_free_r+0x190>)
  411e22:	42a8      	cmp	r0, r5
  411e24:	d1ad      	bne.n	411d82 <_free_r+0x4a>
  411e26:	f043 0201 	orr.w	r2, r3, #1
  411e2a:	f8cc 4014 	str.w	r4, [ip, #20]
  411e2e:	f8cc 4010 	str.w	r4, [ip, #16]
  411e32:	60e0      	str	r0, [r4, #12]
  411e34:	60a0      	str	r0, [r4, #8]
  411e36:	6062      	str	r2, [r4, #4]
  411e38:	50e3      	str	r3, [r4, r3]
  411e3a:	e7c7      	b.n	411dcc <_free_r+0x94>
  411e3c:	441f      	add	r7, r3
  411e3e:	07cb      	lsls	r3, r1, #31
  411e40:	d407      	bmi.n	411e52 <_free_r+0x11a>
  411e42:	f855 3c08 	ldr.w	r3, [r5, #-8]
  411e46:	1ae4      	subs	r4, r4, r3
  411e48:	441f      	add	r7, r3
  411e4a:	68a2      	ldr	r2, [r4, #8]
  411e4c:	68e3      	ldr	r3, [r4, #12]
  411e4e:	60d3      	str	r3, [r2, #12]
  411e50:	609a      	str	r2, [r3, #8]
  411e52:	4b1e      	ldr	r3, [pc, #120]	; (411ecc <_free_r+0x194>)
  411e54:	681b      	ldr	r3, [r3, #0]
  411e56:	f047 0201 	orr.w	r2, r7, #1
  411e5a:	429f      	cmp	r7, r3
  411e5c:	6062      	str	r2, [r4, #4]
  411e5e:	f8cc 4008 	str.w	r4, [ip, #8]
  411e62:	d3b3      	bcc.n	411dcc <_free_r+0x94>
  411e64:	4b1a      	ldr	r3, [pc, #104]	; (411ed0 <_free_r+0x198>)
  411e66:	4630      	mov	r0, r6
  411e68:	6819      	ldr	r1, [r3, #0]
  411e6a:	f7ff ff17 	bl	411c9c <_malloc_trim_r>
  411e6e:	e7ad      	b.n	411dcc <_free_r+0x94>
  411e70:	2101      	movs	r1, #1
  411e72:	e77e      	b.n	411d72 <_free_r+0x3a>
  411e74:	2a14      	cmp	r2, #20
  411e76:	d80c      	bhi.n	411e92 <_free_r+0x15a>
  411e78:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  411e7c:	0041      	lsls	r1, r0, #1
  411e7e:	e791      	b.n	411da4 <_free_r+0x6c>
  411e80:	684b      	ldr	r3, [r1, #4]
  411e82:	1080      	asrs	r0, r0, #2
  411e84:	2501      	movs	r5, #1
  411e86:	fa05 f000 	lsl.w	r0, r5, r0
  411e8a:	4303      	orrs	r3, r0
  411e8c:	604b      	str	r3, [r1, #4]
  411e8e:	4613      	mov	r3, r2
  411e90:	e798      	b.n	411dc4 <_free_r+0x8c>
  411e92:	2a54      	cmp	r2, #84	; 0x54
  411e94:	d803      	bhi.n	411e9e <_free_r+0x166>
  411e96:	0b18      	lsrs	r0, r3, #12
  411e98:	306e      	adds	r0, #110	; 0x6e
  411e9a:	0041      	lsls	r1, r0, #1
  411e9c:	e782      	b.n	411da4 <_free_r+0x6c>
  411e9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  411ea2:	d803      	bhi.n	411eac <_free_r+0x174>
  411ea4:	0bd8      	lsrs	r0, r3, #15
  411ea6:	3077      	adds	r0, #119	; 0x77
  411ea8:	0041      	lsls	r1, r0, #1
  411eaa:	e77b      	b.n	411da4 <_free_r+0x6c>
  411eac:	f240 5154 	movw	r1, #1364	; 0x554
  411eb0:	428a      	cmp	r2, r1
  411eb2:	d803      	bhi.n	411ebc <_free_r+0x184>
  411eb4:	0c98      	lsrs	r0, r3, #18
  411eb6:	307c      	adds	r0, #124	; 0x7c
  411eb8:	0041      	lsls	r1, r0, #1
  411eba:	e773      	b.n	411da4 <_free_r+0x6c>
  411ebc:	21fc      	movs	r1, #252	; 0xfc
  411ebe:	207e      	movs	r0, #126	; 0x7e
  411ec0:	e770      	b.n	411da4 <_free_r+0x6c>
  411ec2:	bf00      	nop
  411ec4:	2000091c 	.word	0x2000091c
  411ec8:	20000924 	.word	0x20000924
  411ecc:	20000d24 	.word	0x20000d24
  411ed0:	20002490 	.word	0x20002490

00411ed4 <__sfvwrite_r>:
  411ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ed8:	6893      	ldr	r3, [r2, #8]
  411eda:	b083      	sub	sp, #12
  411edc:	4616      	mov	r6, r2
  411ede:	4681      	mov	r9, r0
  411ee0:	460c      	mov	r4, r1
  411ee2:	b32b      	cbz	r3, 411f30 <__sfvwrite_r+0x5c>
  411ee4:	898b      	ldrh	r3, [r1, #12]
  411ee6:	0719      	lsls	r1, r3, #28
  411ee8:	d526      	bpl.n	411f38 <__sfvwrite_r+0x64>
  411eea:	6922      	ldr	r2, [r4, #16]
  411eec:	b322      	cbz	r2, 411f38 <__sfvwrite_r+0x64>
  411eee:	f003 0202 	and.w	r2, r3, #2
  411ef2:	b292      	uxth	r2, r2
  411ef4:	6835      	ldr	r5, [r6, #0]
  411ef6:	2a00      	cmp	r2, #0
  411ef8:	d02c      	beq.n	411f54 <__sfvwrite_r+0x80>
  411efa:	f04f 0a00 	mov.w	sl, #0
  411efe:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 4121e8 <__sfvwrite_r+0x314>
  411f02:	46d0      	mov	r8, sl
  411f04:	45d8      	cmp	r8, fp
  411f06:	bf34      	ite	cc
  411f08:	4643      	movcc	r3, r8
  411f0a:	465b      	movcs	r3, fp
  411f0c:	4652      	mov	r2, sl
  411f0e:	4648      	mov	r0, r9
  411f10:	f1b8 0f00 	cmp.w	r8, #0
  411f14:	d04f      	beq.n	411fb6 <__sfvwrite_r+0xe2>
  411f16:	69e1      	ldr	r1, [r4, #28]
  411f18:	6a67      	ldr	r7, [r4, #36]	; 0x24
  411f1a:	47b8      	blx	r7
  411f1c:	2800      	cmp	r0, #0
  411f1e:	dd56      	ble.n	411fce <__sfvwrite_r+0xfa>
  411f20:	68b3      	ldr	r3, [r6, #8]
  411f22:	1a1b      	subs	r3, r3, r0
  411f24:	4482      	add	sl, r0
  411f26:	ebc0 0808 	rsb	r8, r0, r8
  411f2a:	60b3      	str	r3, [r6, #8]
  411f2c:	2b00      	cmp	r3, #0
  411f2e:	d1e9      	bne.n	411f04 <__sfvwrite_r+0x30>
  411f30:	2000      	movs	r0, #0
  411f32:	b003      	add	sp, #12
  411f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f38:	4648      	mov	r0, r9
  411f3a:	4621      	mov	r1, r4
  411f3c:	f7fe fcba 	bl	4108b4 <__swsetup_r>
  411f40:	2800      	cmp	r0, #0
  411f42:	f040 8148 	bne.w	4121d6 <__sfvwrite_r+0x302>
  411f46:	89a3      	ldrh	r3, [r4, #12]
  411f48:	6835      	ldr	r5, [r6, #0]
  411f4a:	f003 0202 	and.w	r2, r3, #2
  411f4e:	b292      	uxth	r2, r2
  411f50:	2a00      	cmp	r2, #0
  411f52:	d1d2      	bne.n	411efa <__sfvwrite_r+0x26>
  411f54:	f013 0a01 	ands.w	sl, r3, #1
  411f58:	d142      	bne.n	411fe0 <__sfvwrite_r+0x10c>
  411f5a:	46d0      	mov	r8, sl
  411f5c:	f1b8 0f00 	cmp.w	r8, #0
  411f60:	d023      	beq.n	411faa <__sfvwrite_r+0xd6>
  411f62:	059a      	lsls	r2, r3, #22
  411f64:	68a7      	ldr	r7, [r4, #8]
  411f66:	d576      	bpl.n	412056 <__sfvwrite_r+0x182>
  411f68:	45b8      	cmp	r8, r7
  411f6a:	f0c0 80a4 	bcc.w	4120b6 <__sfvwrite_r+0x1e2>
  411f6e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  411f72:	f040 80b2 	bne.w	4120da <__sfvwrite_r+0x206>
  411f76:	6820      	ldr	r0, [r4, #0]
  411f78:	46bb      	mov	fp, r7
  411f7a:	4651      	mov	r1, sl
  411f7c:	465a      	mov	r2, fp
  411f7e:	f000 fa87 	bl	412490 <memmove>
  411f82:	68a2      	ldr	r2, [r4, #8]
  411f84:	6821      	ldr	r1, [r4, #0]
  411f86:	1bd2      	subs	r2, r2, r7
  411f88:	eb01 030b 	add.w	r3, r1, fp
  411f8c:	60a2      	str	r2, [r4, #8]
  411f8e:	6023      	str	r3, [r4, #0]
  411f90:	4642      	mov	r2, r8
  411f92:	68b3      	ldr	r3, [r6, #8]
  411f94:	1a9b      	subs	r3, r3, r2
  411f96:	4492      	add	sl, r2
  411f98:	ebc2 0808 	rsb	r8, r2, r8
  411f9c:	60b3      	str	r3, [r6, #8]
  411f9e:	2b00      	cmp	r3, #0
  411fa0:	d0c6      	beq.n	411f30 <__sfvwrite_r+0x5c>
  411fa2:	89a3      	ldrh	r3, [r4, #12]
  411fa4:	f1b8 0f00 	cmp.w	r8, #0
  411fa8:	d1db      	bne.n	411f62 <__sfvwrite_r+0x8e>
  411faa:	f8d5 a000 	ldr.w	sl, [r5]
  411fae:	f8d5 8004 	ldr.w	r8, [r5, #4]
  411fb2:	3508      	adds	r5, #8
  411fb4:	e7d2      	b.n	411f5c <__sfvwrite_r+0x88>
  411fb6:	f8d5 a000 	ldr.w	sl, [r5]
  411fba:	f8d5 8004 	ldr.w	r8, [r5, #4]
  411fbe:	3508      	adds	r5, #8
  411fc0:	e7a0      	b.n	411f04 <__sfvwrite_r+0x30>
  411fc2:	4648      	mov	r0, r9
  411fc4:	4621      	mov	r1, r4
  411fc6:	f7ff fd59 	bl	411a7c <_fflush_r>
  411fca:	2800      	cmp	r0, #0
  411fcc:	d059      	beq.n	412082 <__sfvwrite_r+0x1ae>
  411fce:	89a3      	ldrh	r3, [r4, #12]
  411fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411fd4:	f04f 30ff 	mov.w	r0, #4294967295
  411fd8:	81a3      	strh	r3, [r4, #12]
  411fda:	b003      	add	sp, #12
  411fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411fe0:	4692      	mov	sl, r2
  411fe2:	9201      	str	r2, [sp, #4]
  411fe4:	4693      	mov	fp, r2
  411fe6:	4690      	mov	r8, r2
  411fe8:	f1b8 0f00 	cmp.w	r8, #0
  411fec:	d02b      	beq.n	412046 <__sfvwrite_r+0x172>
  411fee:	9f01      	ldr	r7, [sp, #4]
  411ff0:	2f00      	cmp	r7, #0
  411ff2:	d064      	beq.n	4120be <__sfvwrite_r+0x1ea>
  411ff4:	6820      	ldr	r0, [r4, #0]
  411ff6:	6921      	ldr	r1, [r4, #16]
  411ff8:	f8d4 c008 	ldr.w	ip, [r4, #8]
  411ffc:	6962      	ldr	r2, [r4, #20]
  411ffe:	45c2      	cmp	sl, r8
  412000:	bf34      	ite	cc
  412002:	4653      	movcc	r3, sl
  412004:	4643      	movcs	r3, r8
  412006:	4288      	cmp	r0, r1
  412008:	461f      	mov	r7, r3
  41200a:	d903      	bls.n	412014 <__sfvwrite_r+0x140>
  41200c:	4494      	add	ip, r2
  41200e:	4563      	cmp	r3, ip
  412010:	f300 80ae 	bgt.w	412170 <__sfvwrite_r+0x29c>
  412014:	4293      	cmp	r3, r2
  412016:	db36      	blt.n	412086 <__sfvwrite_r+0x1b2>
  412018:	4613      	mov	r3, r2
  41201a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41201c:	69e1      	ldr	r1, [r4, #28]
  41201e:	4648      	mov	r0, r9
  412020:	465a      	mov	r2, fp
  412022:	47b8      	blx	r7
  412024:	1e07      	subs	r7, r0, #0
  412026:	ddd2      	ble.n	411fce <__sfvwrite_r+0xfa>
  412028:	ebba 0a07 	subs.w	sl, sl, r7
  41202c:	d03a      	beq.n	4120a4 <__sfvwrite_r+0x1d0>
  41202e:	68b3      	ldr	r3, [r6, #8]
  412030:	1bdb      	subs	r3, r3, r7
  412032:	44bb      	add	fp, r7
  412034:	ebc7 0808 	rsb	r8, r7, r8
  412038:	60b3      	str	r3, [r6, #8]
  41203a:	2b00      	cmp	r3, #0
  41203c:	f43f af78 	beq.w	411f30 <__sfvwrite_r+0x5c>
  412040:	f1b8 0f00 	cmp.w	r8, #0
  412044:	d1d3      	bne.n	411fee <__sfvwrite_r+0x11a>
  412046:	2700      	movs	r7, #0
  412048:	f8d5 b000 	ldr.w	fp, [r5]
  41204c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  412050:	9701      	str	r7, [sp, #4]
  412052:	3508      	adds	r5, #8
  412054:	e7c8      	b.n	411fe8 <__sfvwrite_r+0x114>
  412056:	6820      	ldr	r0, [r4, #0]
  412058:	6923      	ldr	r3, [r4, #16]
  41205a:	4298      	cmp	r0, r3
  41205c:	d802      	bhi.n	412064 <__sfvwrite_r+0x190>
  41205e:	6963      	ldr	r3, [r4, #20]
  412060:	4598      	cmp	r8, r3
  412062:	d272      	bcs.n	41214a <__sfvwrite_r+0x276>
  412064:	45b8      	cmp	r8, r7
  412066:	bf38      	it	cc
  412068:	4647      	movcc	r7, r8
  41206a:	463a      	mov	r2, r7
  41206c:	4651      	mov	r1, sl
  41206e:	f000 fa0f 	bl	412490 <memmove>
  412072:	68a3      	ldr	r3, [r4, #8]
  412074:	6822      	ldr	r2, [r4, #0]
  412076:	1bdb      	subs	r3, r3, r7
  412078:	443a      	add	r2, r7
  41207a:	60a3      	str	r3, [r4, #8]
  41207c:	6022      	str	r2, [r4, #0]
  41207e:	2b00      	cmp	r3, #0
  412080:	d09f      	beq.n	411fc2 <__sfvwrite_r+0xee>
  412082:	463a      	mov	r2, r7
  412084:	e785      	b.n	411f92 <__sfvwrite_r+0xbe>
  412086:	461a      	mov	r2, r3
  412088:	4659      	mov	r1, fp
  41208a:	9300      	str	r3, [sp, #0]
  41208c:	f000 fa00 	bl	412490 <memmove>
  412090:	9b00      	ldr	r3, [sp, #0]
  412092:	68a1      	ldr	r1, [r4, #8]
  412094:	6822      	ldr	r2, [r4, #0]
  412096:	1ac9      	subs	r1, r1, r3
  412098:	ebba 0a07 	subs.w	sl, sl, r7
  41209c:	4413      	add	r3, r2
  41209e:	60a1      	str	r1, [r4, #8]
  4120a0:	6023      	str	r3, [r4, #0]
  4120a2:	d1c4      	bne.n	41202e <__sfvwrite_r+0x15a>
  4120a4:	4648      	mov	r0, r9
  4120a6:	4621      	mov	r1, r4
  4120a8:	f7ff fce8 	bl	411a7c <_fflush_r>
  4120ac:	2800      	cmp	r0, #0
  4120ae:	d18e      	bne.n	411fce <__sfvwrite_r+0xfa>
  4120b0:	f8cd a004 	str.w	sl, [sp, #4]
  4120b4:	e7bb      	b.n	41202e <__sfvwrite_r+0x15a>
  4120b6:	6820      	ldr	r0, [r4, #0]
  4120b8:	4647      	mov	r7, r8
  4120ba:	46c3      	mov	fp, r8
  4120bc:	e75d      	b.n	411f7a <__sfvwrite_r+0xa6>
  4120be:	4658      	mov	r0, fp
  4120c0:	210a      	movs	r1, #10
  4120c2:	4642      	mov	r2, r8
  4120c4:	f000 f99c 	bl	412400 <memchr>
  4120c8:	2800      	cmp	r0, #0
  4120ca:	d07f      	beq.n	4121cc <__sfvwrite_r+0x2f8>
  4120cc:	f100 0a01 	add.w	sl, r0, #1
  4120d0:	2701      	movs	r7, #1
  4120d2:	ebcb 0a0a 	rsb	sl, fp, sl
  4120d6:	9701      	str	r7, [sp, #4]
  4120d8:	e78c      	b.n	411ff4 <__sfvwrite_r+0x120>
  4120da:	6822      	ldr	r2, [r4, #0]
  4120dc:	6921      	ldr	r1, [r4, #16]
  4120de:	6967      	ldr	r7, [r4, #20]
  4120e0:	ebc1 0c02 	rsb	ip, r1, r2
  4120e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4120e8:	f10c 0201 	add.w	r2, ip, #1
  4120ec:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4120f0:	4442      	add	r2, r8
  4120f2:	107f      	asrs	r7, r7, #1
  4120f4:	4297      	cmp	r7, r2
  4120f6:	bf34      	ite	cc
  4120f8:	4617      	movcc	r7, r2
  4120fa:	463a      	movcs	r2, r7
  4120fc:	055b      	lsls	r3, r3, #21
  4120fe:	d54f      	bpl.n	4121a0 <__sfvwrite_r+0x2cc>
  412100:	4611      	mov	r1, r2
  412102:	4648      	mov	r0, r9
  412104:	f8cd c000 	str.w	ip, [sp]
  412108:	f7fa fc2e 	bl	40c968 <_malloc_r>
  41210c:	f8dd c000 	ldr.w	ip, [sp]
  412110:	4683      	mov	fp, r0
  412112:	2800      	cmp	r0, #0
  412114:	d062      	beq.n	4121dc <__sfvwrite_r+0x308>
  412116:	4662      	mov	r2, ip
  412118:	6921      	ldr	r1, [r4, #16]
  41211a:	f8cd c000 	str.w	ip, [sp]
  41211e:	f7fa febf 	bl	40cea0 <memcpy>
  412122:	89a2      	ldrh	r2, [r4, #12]
  412124:	f8dd c000 	ldr.w	ip, [sp]
  412128:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  41212c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  412130:	81a2      	strh	r2, [r4, #12]
  412132:	eb0b 000c 	add.w	r0, fp, ip
  412136:	ebcc 0207 	rsb	r2, ip, r7
  41213a:	f8c4 b010 	str.w	fp, [r4, #16]
  41213e:	6167      	str	r7, [r4, #20]
  412140:	6020      	str	r0, [r4, #0]
  412142:	60a2      	str	r2, [r4, #8]
  412144:	4647      	mov	r7, r8
  412146:	46c3      	mov	fp, r8
  412148:	e717      	b.n	411f7a <__sfvwrite_r+0xa6>
  41214a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  41214e:	4590      	cmp	r8, r2
  412150:	bf38      	it	cc
  412152:	4642      	movcc	r2, r8
  412154:	fb92 f2f3 	sdiv	r2, r2, r3
  412158:	fb02 f303 	mul.w	r3, r2, r3
  41215c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41215e:	69e1      	ldr	r1, [r4, #28]
  412160:	4648      	mov	r0, r9
  412162:	4652      	mov	r2, sl
  412164:	47b8      	blx	r7
  412166:	2800      	cmp	r0, #0
  412168:	f77f af31 	ble.w	411fce <__sfvwrite_r+0xfa>
  41216c:	4602      	mov	r2, r0
  41216e:	e710      	b.n	411f92 <__sfvwrite_r+0xbe>
  412170:	4662      	mov	r2, ip
  412172:	4659      	mov	r1, fp
  412174:	f8cd c000 	str.w	ip, [sp]
  412178:	f000 f98a 	bl	412490 <memmove>
  41217c:	f8dd c000 	ldr.w	ip, [sp]
  412180:	6823      	ldr	r3, [r4, #0]
  412182:	4463      	add	r3, ip
  412184:	6023      	str	r3, [r4, #0]
  412186:	4648      	mov	r0, r9
  412188:	4621      	mov	r1, r4
  41218a:	f8cd c000 	str.w	ip, [sp]
  41218e:	f7ff fc75 	bl	411a7c <_fflush_r>
  412192:	f8dd c000 	ldr.w	ip, [sp]
  412196:	2800      	cmp	r0, #0
  412198:	f47f af19 	bne.w	411fce <__sfvwrite_r+0xfa>
  41219c:	4667      	mov	r7, ip
  41219e:	e743      	b.n	412028 <__sfvwrite_r+0x154>
  4121a0:	4648      	mov	r0, r9
  4121a2:	f8cd c000 	str.w	ip, [sp]
  4121a6:	f000 fe33 	bl	412e10 <_realloc_r>
  4121aa:	f8dd c000 	ldr.w	ip, [sp]
  4121ae:	4683      	mov	fp, r0
  4121b0:	2800      	cmp	r0, #0
  4121b2:	d1be      	bne.n	412132 <__sfvwrite_r+0x25e>
  4121b4:	4648      	mov	r0, r9
  4121b6:	6921      	ldr	r1, [r4, #16]
  4121b8:	f7ff fdbe 	bl	411d38 <_free_r>
  4121bc:	89a3      	ldrh	r3, [r4, #12]
  4121be:	220c      	movs	r2, #12
  4121c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4121c4:	b29b      	uxth	r3, r3
  4121c6:	f8c9 2000 	str.w	r2, [r9]
  4121ca:	e701      	b.n	411fd0 <__sfvwrite_r+0xfc>
  4121cc:	2701      	movs	r7, #1
  4121ce:	f108 0a01 	add.w	sl, r8, #1
  4121d2:	9701      	str	r7, [sp, #4]
  4121d4:	e70e      	b.n	411ff4 <__sfvwrite_r+0x120>
  4121d6:	f04f 30ff 	mov.w	r0, #4294967295
  4121da:	e6aa      	b.n	411f32 <__sfvwrite_r+0x5e>
  4121dc:	230c      	movs	r3, #12
  4121de:	f8c9 3000 	str.w	r3, [r9]
  4121e2:	89a3      	ldrh	r3, [r4, #12]
  4121e4:	e6f4      	b.n	411fd0 <__sfvwrite_r+0xfc>
  4121e6:	bf00      	nop
  4121e8:	7ffffc00 	.word	0x7ffffc00

004121ec <_fwalk>:
  4121ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4121f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4121f4:	4688      	mov	r8, r1
  4121f6:	d01a      	beq.n	41222e <_fwalk+0x42>
  4121f8:	2600      	movs	r6, #0
  4121fa:	687d      	ldr	r5, [r7, #4]
  4121fc:	68bc      	ldr	r4, [r7, #8]
  4121fe:	3d01      	subs	r5, #1
  412200:	d40f      	bmi.n	412222 <_fwalk+0x36>
  412202:	89a3      	ldrh	r3, [r4, #12]
  412204:	2b01      	cmp	r3, #1
  412206:	f105 35ff 	add.w	r5, r5, #4294967295
  41220a:	d906      	bls.n	41221a <_fwalk+0x2e>
  41220c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  412210:	3301      	adds	r3, #1
  412212:	4620      	mov	r0, r4
  412214:	d001      	beq.n	41221a <_fwalk+0x2e>
  412216:	47c0      	blx	r8
  412218:	4306      	orrs	r6, r0
  41221a:	1c6b      	adds	r3, r5, #1
  41221c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  412220:	d1ef      	bne.n	412202 <_fwalk+0x16>
  412222:	683f      	ldr	r7, [r7, #0]
  412224:	2f00      	cmp	r7, #0
  412226:	d1e8      	bne.n	4121fa <_fwalk+0xe>
  412228:	4630      	mov	r0, r6
  41222a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41222e:	463e      	mov	r6, r7
  412230:	4630      	mov	r0, r6
  412232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412236:	bf00      	nop

00412238 <iswspace>:
  412238:	28ff      	cmp	r0, #255	; 0xff
  41223a:	d807      	bhi.n	41224c <iswspace+0x14>
  41223c:	4b04      	ldr	r3, [pc, #16]	; (412250 <iswspace+0x18>)
  41223e:	681b      	ldr	r3, [r3, #0]
  412240:	4418      	add	r0, r3
  412242:	7840      	ldrb	r0, [r0, #1]
  412244:	f000 0008 	and.w	r0, r0, #8
  412248:	b2c0      	uxtb	r0, r0
  41224a:	4770      	bx	lr
  41224c:	2000      	movs	r0, #0
  41224e:	4770      	bx	lr
  412250:	20000d2c 	.word	0x20000d2c

00412254 <__locale_charset>:
  412254:	4800      	ldr	r0, [pc, #0]	; (412258 <__locale_charset+0x4>)
  412256:	4770      	bx	lr
  412258:	20000d68 	.word	0x20000d68

0041225c <__locale_mb_cur_max>:
  41225c:	4b01      	ldr	r3, [pc, #4]	; (412264 <__locale_mb_cur_max+0x8>)
  41225e:	6818      	ldr	r0, [r3, #0]
  412260:	4770      	bx	lr
  412262:	bf00      	nop
  412264:	20000d88 	.word	0x20000d88

00412268 <_localeconv_r>:
  412268:	4800      	ldr	r0, [pc, #0]	; (41226c <_localeconv_r+0x4>)
  41226a:	4770      	bx	lr
  41226c:	20000d30 	.word	0x20000d30

00412270 <_lseek_r>:
  412270:	b570      	push	{r4, r5, r6, lr}
  412272:	4c08      	ldr	r4, [pc, #32]	; (412294 <_lseek_r+0x24>)
  412274:	4606      	mov	r6, r0
  412276:	2500      	movs	r5, #0
  412278:	4608      	mov	r0, r1
  41227a:	4611      	mov	r1, r2
  41227c:	461a      	mov	r2, r3
  41227e:	6025      	str	r5, [r4, #0]
  412280:	f7f9 ff36 	bl	40c0f0 <_lseek>
  412284:	1c43      	adds	r3, r0, #1
  412286:	d000      	beq.n	41228a <_lseek_r+0x1a>
  412288:	bd70      	pop	{r4, r5, r6, pc}
  41228a:	6823      	ldr	r3, [r4, #0]
  41228c:	2b00      	cmp	r3, #0
  41228e:	d0fb      	beq.n	412288 <_lseek_r+0x18>
  412290:	6033      	str	r3, [r6, #0]
  412292:	bd70      	pop	{r4, r5, r6, pc}
  412294:	200040e8 	.word	0x200040e8

00412298 <__smakebuf_r>:
  412298:	b5f0      	push	{r4, r5, r6, r7, lr}
  41229a:	898b      	ldrh	r3, [r1, #12]
  41229c:	b29a      	uxth	r2, r3
  41229e:	0796      	lsls	r6, r2, #30
  4122a0:	b091      	sub	sp, #68	; 0x44
  4122a2:	460c      	mov	r4, r1
  4122a4:	4605      	mov	r5, r0
  4122a6:	d437      	bmi.n	412318 <__smakebuf_r+0x80>
  4122a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4122ac:	2900      	cmp	r1, #0
  4122ae:	db17      	blt.n	4122e0 <__smakebuf_r+0x48>
  4122b0:	aa01      	add	r2, sp, #4
  4122b2:	f002 fd19 	bl	414ce8 <_fstat_r>
  4122b6:	2800      	cmp	r0, #0
  4122b8:	db10      	blt.n	4122dc <__smakebuf_r+0x44>
  4122ba:	9b02      	ldr	r3, [sp, #8]
  4122bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4122c0:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  4122c4:	424f      	negs	r7, r1
  4122c6:	414f      	adcs	r7, r1
  4122c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4122cc:	d02c      	beq.n	412328 <__smakebuf_r+0x90>
  4122ce:	89a3      	ldrh	r3, [r4, #12]
  4122d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4122d4:	81a3      	strh	r3, [r4, #12]
  4122d6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4122da:	e00b      	b.n	4122f4 <__smakebuf_r+0x5c>
  4122dc:	89a3      	ldrh	r3, [r4, #12]
  4122de:	b29a      	uxth	r2, r3
  4122e0:	f012 0f80 	tst.w	r2, #128	; 0x80
  4122e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4122e8:	81a3      	strh	r3, [r4, #12]
  4122ea:	bf14      	ite	ne
  4122ec:	2640      	movne	r6, #64	; 0x40
  4122ee:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4122f2:	2700      	movs	r7, #0
  4122f4:	4628      	mov	r0, r5
  4122f6:	4631      	mov	r1, r6
  4122f8:	f7fa fb36 	bl	40c968 <_malloc_r>
  4122fc:	89a3      	ldrh	r3, [r4, #12]
  4122fe:	2800      	cmp	r0, #0
  412300:	d029      	beq.n	412356 <__smakebuf_r+0xbe>
  412302:	4a1b      	ldr	r2, [pc, #108]	; (412370 <__smakebuf_r+0xd8>)
  412304:	63ea      	str	r2, [r5, #60]	; 0x3c
  412306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41230a:	81a3      	strh	r3, [r4, #12]
  41230c:	6020      	str	r0, [r4, #0]
  41230e:	6120      	str	r0, [r4, #16]
  412310:	6166      	str	r6, [r4, #20]
  412312:	b9a7      	cbnz	r7, 41233e <__smakebuf_r+0xa6>
  412314:	b011      	add	sp, #68	; 0x44
  412316:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412318:	f101 0343 	add.w	r3, r1, #67	; 0x43
  41231c:	2201      	movs	r2, #1
  41231e:	600b      	str	r3, [r1, #0]
  412320:	610b      	str	r3, [r1, #16]
  412322:	614a      	str	r2, [r1, #20]
  412324:	b011      	add	sp, #68	; 0x44
  412326:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412328:	4a12      	ldr	r2, [pc, #72]	; (412374 <__smakebuf_r+0xdc>)
  41232a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41232c:	4293      	cmp	r3, r2
  41232e:	d1ce      	bne.n	4122ce <__smakebuf_r+0x36>
  412330:	89a3      	ldrh	r3, [r4, #12]
  412332:	f44f 6680 	mov.w	r6, #1024	; 0x400
  412336:	4333      	orrs	r3, r6
  412338:	81a3      	strh	r3, [r4, #12]
  41233a:	64e6      	str	r6, [r4, #76]	; 0x4c
  41233c:	e7da      	b.n	4122f4 <__smakebuf_r+0x5c>
  41233e:	4628      	mov	r0, r5
  412340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  412344:	f003 f896 	bl	415474 <_isatty_r>
  412348:	2800      	cmp	r0, #0
  41234a:	d0e3      	beq.n	412314 <__smakebuf_r+0x7c>
  41234c:	89a3      	ldrh	r3, [r4, #12]
  41234e:	f043 0301 	orr.w	r3, r3, #1
  412352:	81a3      	strh	r3, [r4, #12]
  412354:	e7de      	b.n	412314 <__smakebuf_r+0x7c>
  412356:	059a      	lsls	r2, r3, #22
  412358:	d4dc      	bmi.n	412314 <__smakebuf_r+0x7c>
  41235a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41235e:	f043 0302 	orr.w	r3, r3, #2
  412362:	2101      	movs	r1, #1
  412364:	81a3      	strh	r3, [r4, #12]
  412366:	6022      	str	r2, [r4, #0]
  412368:	6122      	str	r2, [r4, #16]
  41236a:	6161      	str	r1, [r4, #20]
  41236c:	e7d2      	b.n	412314 <__smakebuf_r+0x7c>
  41236e:	bf00      	nop
  412370:	00411aa9 	.word	0x00411aa9
  412374:	0040d311 	.word	0x0040d311

00412378 <_mbrtowc_r>:
  412378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41237c:	b083      	sub	sp, #12
  41237e:	461f      	mov	r7, r3
  412380:	4614      	mov	r4, r2
  412382:	4605      	mov	r5, r0
  412384:	4688      	mov	r8, r1
  412386:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  412388:	4b10      	ldr	r3, [pc, #64]	; (4123cc <_mbrtowc_r+0x54>)
  41238a:	b19a      	cbz	r2, 4123b4 <_mbrtowc_r+0x3c>
  41238c:	f8d3 9000 	ldr.w	r9, [r3]
  412390:	f7ff ff60 	bl	412254 <__locale_charset>
  412394:	4641      	mov	r1, r8
  412396:	e88d 0041 	stmia.w	sp, {r0, r6}
  41239a:	4622      	mov	r2, r4
  41239c:	463b      	mov	r3, r7
  41239e:	4628      	mov	r0, r5
  4123a0:	47c8      	blx	r9
  4123a2:	1c43      	adds	r3, r0, #1
  4123a4:	d103      	bne.n	4123ae <_mbrtowc_r+0x36>
  4123a6:	2200      	movs	r2, #0
  4123a8:	238a      	movs	r3, #138	; 0x8a
  4123aa:	6032      	str	r2, [r6, #0]
  4123ac:	602b      	str	r3, [r5, #0]
  4123ae:	b003      	add	sp, #12
  4123b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4123b4:	681f      	ldr	r7, [r3, #0]
  4123b6:	f7ff ff4d 	bl	412254 <__locale_charset>
  4123ba:	4621      	mov	r1, r4
  4123bc:	e88d 0041 	stmia.w	sp, {r0, r6}
  4123c0:	4a03      	ldr	r2, [pc, #12]	; (4123d0 <_mbrtowc_r+0x58>)
  4123c2:	4628      	mov	r0, r5
  4123c4:	2301      	movs	r3, #1
  4123c6:	47b8      	blx	r7
  4123c8:	e7eb      	b.n	4123a2 <_mbrtowc_r+0x2a>
  4123ca:	bf00      	nop
  4123cc:	20000d8c 	.word	0x20000d8c
  4123d0:	00416de4 	.word	0x00416de4

004123d4 <__ascii_mbtowc>:
  4123d4:	b082      	sub	sp, #8
  4123d6:	b149      	cbz	r1, 4123ec <__ascii_mbtowc+0x18>
  4123d8:	b15a      	cbz	r2, 4123f2 <__ascii_mbtowc+0x1e>
  4123da:	b16b      	cbz	r3, 4123f8 <__ascii_mbtowc+0x24>
  4123dc:	7813      	ldrb	r3, [r2, #0]
  4123de:	600b      	str	r3, [r1, #0]
  4123e0:	7810      	ldrb	r0, [r2, #0]
  4123e2:	3000      	adds	r0, #0
  4123e4:	bf18      	it	ne
  4123e6:	2001      	movne	r0, #1
  4123e8:	b002      	add	sp, #8
  4123ea:	4770      	bx	lr
  4123ec:	a901      	add	r1, sp, #4
  4123ee:	2a00      	cmp	r2, #0
  4123f0:	d1f3      	bne.n	4123da <__ascii_mbtowc+0x6>
  4123f2:	4610      	mov	r0, r2
  4123f4:	b002      	add	sp, #8
  4123f6:	4770      	bx	lr
  4123f8:	f06f 0001 	mvn.w	r0, #1
  4123fc:	e7f4      	b.n	4123e8 <__ascii_mbtowc+0x14>
  4123fe:	bf00      	nop

00412400 <memchr>:
  412400:	0783      	lsls	r3, r0, #30
  412402:	b470      	push	{r4, r5, r6}
  412404:	b2c9      	uxtb	r1, r1
  412406:	d03f      	beq.n	412488 <memchr+0x88>
  412408:	1e54      	subs	r4, r2, #1
  41240a:	b32a      	cbz	r2, 412458 <memchr+0x58>
  41240c:	7803      	ldrb	r3, [r0, #0]
  41240e:	428b      	cmp	r3, r1
  412410:	d023      	beq.n	41245a <memchr+0x5a>
  412412:	1c43      	adds	r3, r0, #1
  412414:	e004      	b.n	412420 <memchr+0x20>
  412416:	b1fc      	cbz	r4, 412458 <memchr+0x58>
  412418:	7804      	ldrb	r4, [r0, #0]
  41241a:	428c      	cmp	r4, r1
  41241c:	d01d      	beq.n	41245a <memchr+0x5a>
  41241e:	4614      	mov	r4, r2
  412420:	f013 0f03 	tst.w	r3, #3
  412424:	4618      	mov	r0, r3
  412426:	f104 32ff 	add.w	r2, r4, #4294967295
  41242a:	f103 0301 	add.w	r3, r3, #1
  41242e:	d1f2      	bne.n	412416 <memchr+0x16>
  412430:	2c03      	cmp	r4, #3
  412432:	d814      	bhi.n	41245e <memchr+0x5e>
  412434:	1e65      	subs	r5, r4, #1
  412436:	b34c      	cbz	r4, 41248c <memchr+0x8c>
  412438:	7803      	ldrb	r3, [r0, #0]
  41243a:	428b      	cmp	r3, r1
  41243c:	d00d      	beq.n	41245a <memchr+0x5a>
  41243e:	1c42      	adds	r2, r0, #1
  412440:	2300      	movs	r3, #0
  412442:	e002      	b.n	41244a <memchr+0x4a>
  412444:	7804      	ldrb	r4, [r0, #0]
  412446:	428c      	cmp	r4, r1
  412448:	d007      	beq.n	41245a <memchr+0x5a>
  41244a:	42ab      	cmp	r3, r5
  41244c:	4610      	mov	r0, r2
  41244e:	f103 0301 	add.w	r3, r3, #1
  412452:	f102 0201 	add.w	r2, r2, #1
  412456:	d1f5      	bne.n	412444 <memchr+0x44>
  412458:	2000      	movs	r0, #0
  41245a:	bc70      	pop	{r4, r5, r6}
  41245c:	4770      	bx	lr
  41245e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  412462:	4603      	mov	r3, r0
  412464:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  412468:	4618      	mov	r0, r3
  41246a:	3304      	adds	r3, #4
  41246c:	6802      	ldr	r2, [r0, #0]
  41246e:	4072      	eors	r2, r6
  412470:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  412474:	ea25 0202 	bic.w	r2, r5, r2
  412478:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  41247c:	d1da      	bne.n	412434 <memchr+0x34>
  41247e:	3c04      	subs	r4, #4
  412480:	2c03      	cmp	r4, #3
  412482:	4618      	mov	r0, r3
  412484:	d8f0      	bhi.n	412468 <memchr+0x68>
  412486:	e7d5      	b.n	412434 <memchr+0x34>
  412488:	4614      	mov	r4, r2
  41248a:	e7d1      	b.n	412430 <memchr+0x30>
  41248c:	4620      	mov	r0, r4
  41248e:	e7e4      	b.n	41245a <memchr+0x5a>

00412490 <memmove>:
  412490:	4288      	cmp	r0, r1
  412492:	b4f0      	push	{r4, r5, r6, r7}
  412494:	d910      	bls.n	4124b8 <memmove+0x28>
  412496:	188c      	adds	r4, r1, r2
  412498:	42a0      	cmp	r0, r4
  41249a:	d20d      	bcs.n	4124b8 <memmove+0x28>
  41249c:	1885      	adds	r5, r0, r2
  41249e:	1e53      	subs	r3, r2, #1
  4124a0:	b142      	cbz	r2, 4124b4 <memmove+0x24>
  4124a2:	4621      	mov	r1, r4
  4124a4:	462a      	mov	r2, r5
  4124a6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4124aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4124ae:	3b01      	subs	r3, #1
  4124b0:	1c5c      	adds	r4, r3, #1
  4124b2:	d1f8      	bne.n	4124a6 <memmove+0x16>
  4124b4:	bcf0      	pop	{r4, r5, r6, r7}
  4124b6:	4770      	bx	lr
  4124b8:	2a0f      	cmp	r2, #15
  4124ba:	d93f      	bls.n	41253c <memmove+0xac>
  4124bc:	ea40 0301 	orr.w	r3, r0, r1
  4124c0:	079b      	lsls	r3, r3, #30
  4124c2:	d13f      	bne.n	412544 <memmove+0xb4>
  4124c4:	f1a2 0710 	sub.w	r7, r2, #16
  4124c8:	093f      	lsrs	r7, r7, #4
  4124ca:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4124ce:	3610      	adds	r6, #16
  4124d0:	460c      	mov	r4, r1
  4124d2:	4603      	mov	r3, r0
  4124d4:	6825      	ldr	r5, [r4, #0]
  4124d6:	601d      	str	r5, [r3, #0]
  4124d8:	6865      	ldr	r5, [r4, #4]
  4124da:	605d      	str	r5, [r3, #4]
  4124dc:	68a5      	ldr	r5, [r4, #8]
  4124de:	609d      	str	r5, [r3, #8]
  4124e0:	68e5      	ldr	r5, [r4, #12]
  4124e2:	60dd      	str	r5, [r3, #12]
  4124e4:	3310      	adds	r3, #16
  4124e6:	42b3      	cmp	r3, r6
  4124e8:	f104 0410 	add.w	r4, r4, #16
  4124ec:	d1f2      	bne.n	4124d4 <memmove+0x44>
  4124ee:	1c7b      	adds	r3, r7, #1
  4124f0:	f002 0c0f 	and.w	ip, r2, #15
  4124f4:	011b      	lsls	r3, r3, #4
  4124f6:	f1bc 0f03 	cmp.w	ip, #3
  4124fa:	4419      	add	r1, r3
  4124fc:	4403      	add	r3, r0
  4124fe:	d923      	bls.n	412548 <memmove+0xb8>
  412500:	460e      	mov	r6, r1
  412502:	461d      	mov	r5, r3
  412504:	4664      	mov	r4, ip
  412506:	3c04      	subs	r4, #4
  412508:	f856 7b04 	ldr.w	r7, [r6], #4
  41250c:	f845 7b04 	str.w	r7, [r5], #4
  412510:	2c03      	cmp	r4, #3
  412512:	d8f8      	bhi.n	412506 <memmove+0x76>
  412514:	f1ac 0404 	sub.w	r4, ip, #4
  412518:	f024 0403 	bic.w	r4, r4, #3
  41251c:	3404      	adds	r4, #4
  41251e:	f002 0203 	and.w	r2, r2, #3
  412522:	4423      	add	r3, r4
  412524:	4421      	add	r1, r4
  412526:	2a00      	cmp	r2, #0
  412528:	d0c4      	beq.n	4124b4 <memmove+0x24>
  41252a:	441a      	add	r2, r3
  41252c:	f811 4b01 	ldrb.w	r4, [r1], #1
  412530:	f803 4b01 	strb.w	r4, [r3], #1
  412534:	4293      	cmp	r3, r2
  412536:	d1f9      	bne.n	41252c <memmove+0x9c>
  412538:	bcf0      	pop	{r4, r5, r6, r7}
  41253a:	4770      	bx	lr
  41253c:	4603      	mov	r3, r0
  41253e:	2a00      	cmp	r2, #0
  412540:	d1f3      	bne.n	41252a <memmove+0x9a>
  412542:	e7b7      	b.n	4124b4 <memmove+0x24>
  412544:	4603      	mov	r3, r0
  412546:	e7f0      	b.n	41252a <memmove+0x9a>
  412548:	4662      	mov	r2, ip
  41254a:	2a00      	cmp	r2, #0
  41254c:	d1ed      	bne.n	41252a <memmove+0x9a>
  41254e:	e7b1      	b.n	4124b4 <memmove+0x24>

00412550 <_Balloc>:
  412550:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  412552:	b570      	push	{r4, r5, r6, lr}
  412554:	4605      	mov	r5, r0
  412556:	460c      	mov	r4, r1
  412558:	b14a      	cbz	r2, 41256e <_Balloc+0x1e>
  41255a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  41255e:	b180      	cbz	r0, 412582 <_Balloc+0x32>
  412560:	6801      	ldr	r1, [r0, #0]
  412562:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  412566:	2200      	movs	r2, #0
  412568:	6102      	str	r2, [r0, #16]
  41256a:	60c2      	str	r2, [r0, #12]
  41256c:	bd70      	pop	{r4, r5, r6, pc}
  41256e:	2221      	movs	r2, #33	; 0x21
  412570:	2104      	movs	r1, #4
  412572:	f002 fb41 	bl	414bf8 <_calloc_r>
  412576:	64e8      	str	r0, [r5, #76]	; 0x4c
  412578:	4602      	mov	r2, r0
  41257a:	2800      	cmp	r0, #0
  41257c:	d1ed      	bne.n	41255a <_Balloc+0xa>
  41257e:	2000      	movs	r0, #0
  412580:	bd70      	pop	{r4, r5, r6, pc}
  412582:	2101      	movs	r1, #1
  412584:	fa01 f604 	lsl.w	r6, r1, r4
  412588:	1d72      	adds	r2, r6, #5
  41258a:	4628      	mov	r0, r5
  41258c:	0092      	lsls	r2, r2, #2
  41258e:	f002 fb33 	bl	414bf8 <_calloc_r>
  412592:	2800      	cmp	r0, #0
  412594:	d0f3      	beq.n	41257e <_Balloc+0x2e>
  412596:	6044      	str	r4, [r0, #4]
  412598:	6086      	str	r6, [r0, #8]
  41259a:	e7e4      	b.n	412566 <_Balloc+0x16>

0041259c <_Bfree>:
  41259c:	b131      	cbz	r1, 4125ac <_Bfree+0x10>
  41259e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4125a0:	684a      	ldr	r2, [r1, #4]
  4125a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4125a6:	6008      	str	r0, [r1, #0]
  4125a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4125ac:	4770      	bx	lr
  4125ae:	bf00      	nop

004125b0 <__multadd>:
  4125b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4125b4:	f8d1 8010 	ldr.w	r8, [r1, #16]
  4125b8:	b082      	sub	sp, #8
  4125ba:	4689      	mov	r9, r1
  4125bc:	4682      	mov	sl, r0
  4125be:	f101 0514 	add.w	r5, r1, #20
  4125c2:	2400      	movs	r4, #0
  4125c4:	682f      	ldr	r7, [r5, #0]
  4125c6:	b2be      	uxth	r6, r7
  4125c8:	0c3f      	lsrs	r7, r7, #16
  4125ca:	fb02 3606 	mla	r6, r2, r6, r3
  4125ce:	fb02 f307 	mul.w	r3, r2, r7
  4125d2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  4125d6:	3401      	adds	r4, #1
  4125d8:	b2b6      	uxth	r6, r6
  4125da:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  4125de:	45a0      	cmp	r8, r4
  4125e0:	f845 6b04 	str.w	r6, [r5], #4
  4125e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4125e8:	dcec      	bgt.n	4125c4 <__multadd+0x14>
  4125ea:	b153      	cbz	r3, 412602 <__multadd+0x52>
  4125ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4125f0:	4590      	cmp	r8, r2
  4125f2:	da0a      	bge.n	41260a <__multadd+0x5a>
  4125f4:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  4125f8:	f108 0201 	add.w	r2, r8, #1
  4125fc:	614b      	str	r3, [r1, #20]
  4125fe:	f8c9 2010 	str.w	r2, [r9, #16]
  412602:	4648      	mov	r0, r9
  412604:	b002      	add	sp, #8
  412606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41260a:	f8d9 1004 	ldr.w	r1, [r9, #4]
  41260e:	9301      	str	r3, [sp, #4]
  412610:	3101      	adds	r1, #1
  412612:	4650      	mov	r0, sl
  412614:	f7ff ff9c 	bl	412550 <_Balloc>
  412618:	f8d9 2010 	ldr.w	r2, [r9, #16]
  41261c:	3202      	adds	r2, #2
  41261e:	f109 010c 	add.w	r1, r9, #12
  412622:	4604      	mov	r4, r0
  412624:	0092      	lsls	r2, r2, #2
  412626:	300c      	adds	r0, #12
  412628:	f7fa fc3a 	bl	40cea0 <memcpy>
  41262c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  412630:	f8d9 1004 	ldr.w	r1, [r9, #4]
  412634:	9b01      	ldr	r3, [sp, #4]
  412636:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41263a:	f8c9 0000 	str.w	r0, [r9]
  41263e:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  412642:	46a1      	mov	r9, r4
  412644:	e7d6      	b.n	4125f4 <__multadd+0x44>
  412646:	bf00      	nop

00412648 <__s2b>:
  412648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41264c:	4699      	mov	r9, r3
  41264e:	4b23      	ldr	r3, [pc, #140]	; (4126dc <__s2b+0x94>)
  412650:	9e08      	ldr	r6, [sp, #32]
  412652:	f109 0408 	add.w	r4, r9, #8
  412656:	fb83 5304 	smull	r5, r3, r3, r4
  41265a:	17e4      	asrs	r4, r4, #31
  41265c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  412660:	2b01      	cmp	r3, #1
  412662:	4607      	mov	r7, r0
  412664:	460c      	mov	r4, r1
  412666:	4690      	mov	r8, r2
  412668:	dd35      	ble.n	4126d6 <__s2b+0x8e>
  41266a:	2501      	movs	r5, #1
  41266c:	2100      	movs	r1, #0
  41266e:	006d      	lsls	r5, r5, #1
  412670:	42ab      	cmp	r3, r5
  412672:	f101 0101 	add.w	r1, r1, #1
  412676:	dcfa      	bgt.n	41266e <__s2b+0x26>
  412678:	4638      	mov	r0, r7
  41267a:	f7ff ff69 	bl	412550 <_Balloc>
  41267e:	2301      	movs	r3, #1
  412680:	f1b8 0f09 	cmp.w	r8, #9
  412684:	6146      	str	r6, [r0, #20]
  412686:	6103      	str	r3, [r0, #16]
  412688:	dd21      	ble.n	4126ce <__s2b+0x86>
  41268a:	f104 0609 	add.w	r6, r4, #9
  41268e:	4635      	mov	r5, r6
  412690:	4444      	add	r4, r8
  412692:	f815 3b01 	ldrb.w	r3, [r5], #1
  412696:	4601      	mov	r1, r0
  412698:	3b30      	subs	r3, #48	; 0x30
  41269a:	4638      	mov	r0, r7
  41269c:	220a      	movs	r2, #10
  41269e:	f7ff ff87 	bl	4125b0 <__multadd>
  4126a2:	42a5      	cmp	r5, r4
  4126a4:	d1f5      	bne.n	412692 <__s2b+0x4a>
  4126a6:	eb06 0408 	add.w	r4, r6, r8
  4126aa:	3c08      	subs	r4, #8
  4126ac:	45c1      	cmp	r9, r8
  4126ae:	dd0c      	ble.n	4126ca <__s2b+0x82>
  4126b0:	ebc8 0809 	rsb	r8, r8, r9
  4126b4:	44a0      	add	r8, r4
  4126b6:	f814 3b01 	ldrb.w	r3, [r4], #1
  4126ba:	4601      	mov	r1, r0
  4126bc:	3b30      	subs	r3, #48	; 0x30
  4126be:	4638      	mov	r0, r7
  4126c0:	220a      	movs	r2, #10
  4126c2:	f7ff ff75 	bl	4125b0 <__multadd>
  4126c6:	4544      	cmp	r4, r8
  4126c8:	d1f5      	bne.n	4126b6 <__s2b+0x6e>
  4126ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4126ce:	340a      	adds	r4, #10
  4126d0:	f04f 0809 	mov.w	r8, #9
  4126d4:	e7ea      	b.n	4126ac <__s2b+0x64>
  4126d6:	2100      	movs	r1, #0
  4126d8:	e7ce      	b.n	412678 <__s2b+0x30>
  4126da:	bf00      	nop
  4126dc:	38e38e39 	.word	0x38e38e39

004126e0 <__hi0bits>:
  4126e0:	0c03      	lsrs	r3, r0, #16
  4126e2:	041b      	lsls	r3, r3, #16
  4126e4:	b9b3      	cbnz	r3, 412714 <__hi0bits+0x34>
  4126e6:	0400      	lsls	r0, r0, #16
  4126e8:	2310      	movs	r3, #16
  4126ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4126ee:	bf04      	itt	eq
  4126f0:	0200      	lsleq	r0, r0, #8
  4126f2:	3308      	addeq	r3, #8
  4126f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4126f8:	bf04      	itt	eq
  4126fa:	0100      	lsleq	r0, r0, #4
  4126fc:	3304      	addeq	r3, #4
  4126fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  412702:	bf04      	itt	eq
  412704:	0080      	lsleq	r0, r0, #2
  412706:	3302      	addeq	r3, #2
  412708:	2800      	cmp	r0, #0
  41270a:	db07      	blt.n	41271c <__hi0bits+0x3c>
  41270c:	0042      	lsls	r2, r0, #1
  41270e:	d403      	bmi.n	412718 <__hi0bits+0x38>
  412710:	2020      	movs	r0, #32
  412712:	4770      	bx	lr
  412714:	2300      	movs	r3, #0
  412716:	e7e8      	b.n	4126ea <__hi0bits+0xa>
  412718:	1c58      	adds	r0, r3, #1
  41271a:	4770      	bx	lr
  41271c:	4618      	mov	r0, r3
  41271e:	4770      	bx	lr

00412720 <__lo0bits>:
  412720:	6803      	ldr	r3, [r0, #0]
  412722:	f013 0207 	ands.w	r2, r3, #7
  412726:	d007      	beq.n	412738 <__lo0bits+0x18>
  412728:	07d9      	lsls	r1, r3, #31
  41272a:	d420      	bmi.n	41276e <__lo0bits+0x4e>
  41272c:	079a      	lsls	r2, r3, #30
  41272e:	d420      	bmi.n	412772 <__lo0bits+0x52>
  412730:	089b      	lsrs	r3, r3, #2
  412732:	6003      	str	r3, [r0, #0]
  412734:	2002      	movs	r0, #2
  412736:	4770      	bx	lr
  412738:	b299      	uxth	r1, r3
  41273a:	b909      	cbnz	r1, 412740 <__lo0bits+0x20>
  41273c:	0c1b      	lsrs	r3, r3, #16
  41273e:	2210      	movs	r2, #16
  412740:	f013 0fff 	tst.w	r3, #255	; 0xff
  412744:	bf04      	itt	eq
  412746:	0a1b      	lsreq	r3, r3, #8
  412748:	3208      	addeq	r2, #8
  41274a:	0719      	lsls	r1, r3, #28
  41274c:	bf04      	itt	eq
  41274e:	091b      	lsreq	r3, r3, #4
  412750:	3204      	addeq	r2, #4
  412752:	0799      	lsls	r1, r3, #30
  412754:	bf04      	itt	eq
  412756:	089b      	lsreq	r3, r3, #2
  412758:	3202      	addeq	r2, #2
  41275a:	07d9      	lsls	r1, r3, #31
  41275c:	d404      	bmi.n	412768 <__lo0bits+0x48>
  41275e:	085b      	lsrs	r3, r3, #1
  412760:	d101      	bne.n	412766 <__lo0bits+0x46>
  412762:	2020      	movs	r0, #32
  412764:	4770      	bx	lr
  412766:	3201      	adds	r2, #1
  412768:	6003      	str	r3, [r0, #0]
  41276a:	4610      	mov	r0, r2
  41276c:	4770      	bx	lr
  41276e:	2000      	movs	r0, #0
  412770:	4770      	bx	lr
  412772:	085b      	lsrs	r3, r3, #1
  412774:	6003      	str	r3, [r0, #0]
  412776:	2001      	movs	r0, #1
  412778:	4770      	bx	lr
  41277a:	bf00      	nop

0041277c <__i2b>:
  41277c:	b510      	push	{r4, lr}
  41277e:	460c      	mov	r4, r1
  412780:	2101      	movs	r1, #1
  412782:	f7ff fee5 	bl	412550 <_Balloc>
  412786:	2201      	movs	r2, #1
  412788:	6144      	str	r4, [r0, #20]
  41278a:	6102      	str	r2, [r0, #16]
  41278c:	bd10      	pop	{r4, pc}
  41278e:	bf00      	nop

00412790 <__multiply>:
  412790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412794:	690d      	ldr	r5, [r1, #16]
  412796:	f8d2 9010 	ldr.w	r9, [r2, #16]
  41279a:	454d      	cmp	r5, r9
  41279c:	b085      	sub	sp, #20
  41279e:	460c      	mov	r4, r1
  4127a0:	4692      	mov	sl, r2
  4127a2:	da04      	bge.n	4127ae <__multiply+0x1e>
  4127a4:	462a      	mov	r2, r5
  4127a6:	4654      	mov	r4, sl
  4127a8:	464d      	mov	r5, r9
  4127aa:	468a      	mov	sl, r1
  4127ac:	4691      	mov	r9, r2
  4127ae:	68a3      	ldr	r3, [r4, #8]
  4127b0:	6861      	ldr	r1, [r4, #4]
  4127b2:	eb05 0709 	add.w	r7, r5, r9
  4127b6:	429f      	cmp	r7, r3
  4127b8:	bfc8      	it	gt
  4127ba:	3101      	addgt	r1, #1
  4127bc:	f7ff fec8 	bl	412550 <_Balloc>
  4127c0:	f100 0614 	add.w	r6, r0, #20
  4127c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  4127c8:	4546      	cmp	r6, r8
  4127ca:	9001      	str	r0, [sp, #4]
  4127cc:	d205      	bcs.n	4127da <__multiply+0x4a>
  4127ce:	4633      	mov	r3, r6
  4127d0:	2000      	movs	r0, #0
  4127d2:	f843 0b04 	str.w	r0, [r3], #4
  4127d6:	4598      	cmp	r8, r3
  4127d8:	d8fb      	bhi.n	4127d2 <__multiply+0x42>
  4127da:	f10a 0c14 	add.w	ip, sl, #20
  4127de:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  4127e2:	3414      	adds	r4, #20
  4127e4:	45cc      	cmp	ip, r9
  4127e6:	9400      	str	r4, [sp, #0]
  4127e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4127ec:	d25b      	bcs.n	4128a6 <__multiply+0x116>
  4127ee:	f8cd 8008 	str.w	r8, [sp, #8]
  4127f2:	9703      	str	r7, [sp, #12]
  4127f4:	46c8      	mov	r8, r9
  4127f6:	f85c 3b04 	ldr.w	r3, [ip], #4
  4127fa:	b29c      	uxth	r4, r3
  4127fc:	b324      	cbz	r4, 412848 <__multiply+0xb8>
  4127fe:	9a00      	ldr	r2, [sp, #0]
  412800:	4633      	mov	r3, r6
  412802:	f04f 0900 	mov.w	r9, #0
  412806:	e000      	b.n	41280a <__multiply+0x7a>
  412808:	460b      	mov	r3, r1
  41280a:	f852 7b04 	ldr.w	r7, [r2], #4
  41280e:	6819      	ldr	r1, [r3, #0]
  412810:	fa1f fb87 	uxth.w	fp, r7
  412814:	fa1f fa81 	uxth.w	sl, r1
  412818:	0c38      	lsrs	r0, r7, #16
  41281a:	0c09      	lsrs	r1, r1, #16
  41281c:	fb04 a70b 	mla	r7, r4, fp, sl
  412820:	44b9      	add	r9, r7
  412822:	fb04 1000 	mla	r0, r4, r0, r1
  412826:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  41282a:	4619      	mov	r1, r3
  41282c:	fa1f f989 	uxth.w	r9, r9
  412830:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  412834:	4295      	cmp	r5, r2
  412836:	ea4f 4910 	mov.w	r9, r0, lsr #16
  41283a:	f841 7b04 	str.w	r7, [r1], #4
  41283e:	d8e3      	bhi.n	412808 <__multiply+0x78>
  412840:	f8c3 9004 	str.w	r9, [r3, #4]
  412844:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  412848:	ea5f 4913 	movs.w	r9, r3, lsr #16
  41284c:	d024      	beq.n	412898 <__multiply+0x108>
  41284e:	f8d6 a000 	ldr.w	sl, [r6]
  412852:	9b00      	ldr	r3, [sp, #0]
  412854:	4650      	mov	r0, sl
  412856:	4631      	mov	r1, r6
  412858:	f04f 0b00 	mov.w	fp, #0
  41285c:	e000      	b.n	412860 <__multiply+0xd0>
  41285e:	4611      	mov	r1, r2
  412860:	881a      	ldrh	r2, [r3, #0]
  412862:	0c00      	lsrs	r0, r0, #16
  412864:	fb09 0002 	mla	r0, r9, r2, r0
  412868:	4483      	add	fp, r0
  41286a:	fa1f fa8a 	uxth.w	sl, sl
  41286e:	460a      	mov	r2, r1
  412870:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  412874:	f842 0b04 	str.w	r0, [r2], #4
  412878:	f853 7b04 	ldr.w	r7, [r3], #4
  41287c:	6848      	ldr	r0, [r1, #4]
  41287e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  412882:	b284      	uxth	r4, r0
  412884:	fb09 4a0a 	mla	sl, r9, sl, r4
  412888:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  41288c:	429d      	cmp	r5, r3
  41288e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  412892:	d8e4      	bhi.n	41285e <__multiply+0xce>
  412894:	f8c1 a004 	str.w	sl, [r1, #4]
  412898:	45e0      	cmp	r8, ip
  41289a:	f106 0604 	add.w	r6, r6, #4
  41289e:	d8aa      	bhi.n	4127f6 <__multiply+0x66>
  4128a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4128a4:	9f03      	ldr	r7, [sp, #12]
  4128a6:	2f00      	cmp	r7, #0
  4128a8:	dd0a      	ble.n	4128c0 <__multiply+0x130>
  4128aa:	f858 3c04 	ldr.w	r3, [r8, #-4]
  4128ae:	f1a8 0804 	sub.w	r8, r8, #4
  4128b2:	b11b      	cbz	r3, 4128bc <__multiply+0x12c>
  4128b4:	e004      	b.n	4128c0 <__multiply+0x130>
  4128b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4128ba:	b90b      	cbnz	r3, 4128c0 <__multiply+0x130>
  4128bc:	3f01      	subs	r7, #1
  4128be:	d1fa      	bne.n	4128b6 <__multiply+0x126>
  4128c0:	9b01      	ldr	r3, [sp, #4]
  4128c2:	4618      	mov	r0, r3
  4128c4:	611f      	str	r7, [r3, #16]
  4128c6:	b005      	add	sp, #20
  4128c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004128cc <__pow5mult>:
  4128cc:	f012 0303 	ands.w	r3, r2, #3
  4128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4128d4:	4614      	mov	r4, r2
  4128d6:	4607      	mov	r7, r0
  4128d8:	460e      	mov	r6, r1
  4128da:	d12c      	bne.n	412936 <__pow5mult+0x6a>
  4128dc:	10a4      	asrs	r4, r4, #2
  4128de:	d01c      	beq.n	41291a <__pow5mult+0x4e>
  4128e0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4128e2:	2d00      	cmp	r5, #0
  4128e4:	d030      	beq.n	412948 <__pow5mult+0x7c>
  4128e6:	f04f 0800 	mov.w	r8, #0
  4128ea:	e004      	b.n	4128f6 <__pow5mult+0x2a>
  4128ec:	1064      	asrs	r4, r4, #1
  4128ee:	d014      	beq.n	41291a <__pow5mult+0x4e>
  4128f0:	6828      	ldr	r0, [r5, #0]
  4128f2:	b1a8      	cbz	r0, 412920 <__pow5mult+0x54>
  4128f4:	4605      	mov	r5, r0
  4128f6:	07e3      	lsls	r3, r4, #31
  4128f8:	d5f8      	bpl.n	4128ec <__pow5mult+0x20>
  4128fa:	4638      	mov	r0, r7
  4128fc:	4631      	mov	r1, r6
  4128fe:	462a      	mov	r2, r5
  412900:	f7ff ff46 	bl	412790 <__multiply>
  412904:	b1ae      	cbz	r6, 412932 <__pow5mult+0x66>
  412906:	6872      	ldr	r2, [r6, #4]
  412908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  41290a:	1064      	asrs	r4, r4, #1
  41290c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412910:	6031      	str	r1, [r6, #0]
  412912:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  412916:	4606      	mov	r6, r0
  412918:	d1ea      	bne.n	4128f0 <__pow5mult+0x24>
  41291a:	4630      	mov	r0, r6
  41291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412920:	4638      	mov	r0, r7
  412922:	4629      	mov	r1, r5
  412924:	462a      	mov	r2, r5
  412926:	f7ff ff33 	bl	412790 <__multiply>
  41292a:	6028      	str	r0, [r5, #0]
  41292c:	f8c0 8000 	str.w	r8, [r0]
  412930:	e7e0      	b.n	4128f4 <__pow5mult+0x28>
  412932:	4606      	mov	r6, r0
  412934:	e7da      	b.n	4128ec <__pow5mult+0x20>
  412936:	1e5d      	subs	r5, r3, #1
  412938:	4a0a      	ldr	r2, [pc, #40]	; (412964 <__pow5mult+0x98>)
  41293a:	2300      	movs	r3, #0
  41293c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  412940:	f7ff fe36 	bl	4125b0 <__multadd>
  412944:	4606      	mov	r6, r0
  412946:	e7c9      	b.n	4128dc <__pow5mult+0x10>
  412948:	2101      	movs	r1, #1
  41294a:	4638      	mov	r0, r7
  41294c:	f7ff fe00 	bl	412550 <_Balloc>
  412950:	f240 2171 	movw	r1, #625	; 0x271
  412954:	2201      	movs	r2, #1
  412956:	2300      	movs	r3, #0
  412958:	6141      	str	r1, [r0, #20]
  41295a:	6102      	str	r2, [r0, #16]
  41295c:	4605      	mov	r5, r0
  41295e:	64b8      	str	r0, [r7, #72]	; 0x48
  412960:	6003      	str	r3, [r0, #0]
  412962:	e7c0      	b.n	4128e6 <__pow5mult+0x1a>
  412964:	00417078 	.word	0x00417078

00412968 <__lshift>:
  412968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41296c:	4693      	mov	fp, r2
  41296e:	690a      	ldr	r2, [r1, #16]
  412970:	688b      	ldr	r3, [r1, #8]
  412972:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  412976:	eb0a 0902 	add.w	r9, sl, r2
  41297a:	f109 0601 	add.w	r6, r9, #1
  41297e:	429e      	cmp	r6, r3
  412980:	460f      	mov	r7, r1
  412982:	4680      	mov	r8, r0
  412984:	6849      	ldr	r1, [r1, #4]
  412986:	dd04      	ble.n	412992 <__lshift+0x2a>
  412988:	005b      	lsls	r3, r3, #1
  41298a:	429e      	cmp	r6, r3
  41298c:	f101 0101 	add.w	r1, r1, #1
  412990:	dcfa      	bgt.n	412988 <__lshift+0x20>
  412992:	4640      	mov	r0, r8
  412994:	f7ff fddc 	bl	412550 <_Balloc>
  412998:	f1ba 0f00 	cmp.w	sl, #0
  41299c:	f100 0414 	add.w	r4, r0, #20
  4129a0:	dd09      	ble.n	4129b6 <__lshift+0x4e>
  4129a2:	2300      	movs	r3, #0
  4129a4:	461a      	mov	r2, r3
  4129a6:	4625      	mov	r5, r4
  4129a8:	3301      	adds	r3, #1
  4129aa:	4553      	cmp	r3, sl
  4129ac:	f845 2b04 	str.w	r2, [r5], #4
  4129b0:	d1fa      	bne.n	4129a8 <__lshift+0x40>
  4129b2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  4129b6:	693a      	ldr	r2, [r7, #16]
  4129b8:	f107 0314 	add.w	r3, r7, #20
  4129bc:	f01b 0b1f 	ands.w	fp, fp, #31
  4129c0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  4129c4:	d021      	beq.n	412a0a <__lshift+0xa2>
  4129c6:	f1cb 0a20 	rsb	sl, fp, #32
  4129ca:	2200      	movs	r2, #0
  4129cc:	e000      	b.n	4129d0 <__lshift+0x68>
  4129ce:	462c      	mov	r4, r5
  4129d0:	6819      	ldr	r1, [r3, #0]
  4129d2:	4625      	mov	r5, r4
  4129d4:	fa01 f10b 	lsl.w	r1, r1, fp
  4129d8:	430a      	orrs	r2, r1
  4129da:	f845 2b04 	str.w	r2, [r5], #4
  4129de:	f853 2b04 	ldr.w	r2, [r3], #4
  4129e2:	4563      	cmp	r3, ip
  4129e4:	fa22 f20a 	lsr.w	r2, r2, sl
  4129e8:	d3f1      	bcc.n	4129ce <__lshift+0x66>
  4129ea:	6062      	str	r2, [r4, #4]
  4129ec:	b10a      	cbz	r2, 4129f2 <__lshift+0x8a>
  4129ee:	f109 0602 	add.w	r6, r9, #2
  4129f2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  4129f6:	687a      	ldr	r2, [r7, #4]
  4129f8:	3e01      	subs	r6, #1
  4129fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4129fe:	6106      	str	r6, [r0, #16]
  412a00:	6039      	str	r1, [r7, #0]
  412a02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  412a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412a0a:	f853 2b04 	ldr.w	r2, [r3], #4
  412a0e:	f844 2b04 	str.w	r2, [r4], #4
  412a12:	459c      	cmp	ip, r3
  412a14:	d9ed      	bls.n	4129f2 <__lshift+0x8a>
  412a16:	f853 2b04 	ldr.w	r2, [r3], #4
  412a1a:	f844 2b04 	str.w	r2, [r4], #4
  412a1e:	459c      	cmp	ip, r3
  412a20:	d8f3      	bhi.n	412a0a <__lshift+0xa2>
  412a22:	e7e6      	b.n	4129f2 <__lshift+0x8a>

00412a24 <__mcmp>:
  412a24:	6902      	ldr	r2, [r0, #16]
  412a26:	690b      	ldr	r3, [r1, #16]
  412a28:	1ad2      	subs	r2, r2, r3
  412a2a:	b410      	push	{r4}
  412a2c:	d115      	bne.n	412a5a <__mcmp+0x36>
  412a2e:	009b      	lsls	r3, r3, #2
  412a30:	3014      	adds	r0, #20
  412a32:	3114      	adds	r1, #20
  412a34:	4419      	add	r1, r3
  412a36:	4403      	add	r3, r0
  412a38:	e001      	b.n	412a3e <__mcmp+0x1a>
  412a3a:	4298      	cmp	r0, r3
  412a3c:	d211      	bcs.n	412a62 <__mcmp+0x3e>
  412a3e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412a42:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  412a46:	42a2      	cmp	r2, r4
  412a48:	d0f7      	beq.n	412a3a <__mcmp+0x16>
  412a4a:	4294      	cmp	r4, r2
  412a4c:	bf94      	ite	ls
  412a4e:	2001      	movls	r0, #1
  412a50:	f04f 30ff 	movhi.w	r0, #4294967295
  412a54:	f85d 4b04 	ldr.w	r4, [sp], #4
  412a58:	4770      	bx	lr
  412a5a:	4610      	mov	r0, r2
  412a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  412a60:	4770      	bx	lr
  412a62:	2000      	movs	r0, #0
  412a64:	f85d 4b04 	ldr.w	r4, [sp], #4
  412a68:	4770      	bx	lr
  412a6a:	bf00      	nop

00412a6c <__mdiff>:
  412a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412a70:	460d      	mov	r5, r1
  412a72:	4604      	mov	r4, r0
  412a74:	4611      	mov	r1, r2
  412a76:	4628      	mov	r0, r5
  412a78:	4616      	mov	r6, r2
  412a7a:	f7ff ffd3 	bl	412a24 <__mcmp>
  412a7e:	1e07      	subs	r7, r0, #0
  412a80:	d055      	beq.n	412b2e <__mdiff+0xc2>
  412a82:	db4e      	blt.n	412b22 <__mdiff+0xb6>
  412a84:	f04f 0800 	mov.w	r8, #0
  412a88:	6869      	ldr	r1, [r5, #4]
  412a8a:	4620      	mov	r0, r4
  412a8c:	f7ff fd60 	bl	412550 <_Balloc>
  412a90:	692f      	ldr	r7, [r5, #16]
  412a92:	6932      	ldr	r2, [r6, #16]
  412a94:	f8c0 800c 	str.w	r8, [r0, #12]
  412a98:	3514      	adds	r5, #20
  412a9a:	3614      	adds	r6, #20
  412a9c:	f100 0314 	add.w	r3, r0, #20
  412aa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  412aa4:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  412aa8:	2100      	movs	r1, #0
  412aaa:	f856 2b04 	ldr.w	r2, [r6], #4
  412aae:	f855 4b04 	ldr.w	r4, [r5], #4
  412ab2:	fa1f f982 	uxth.w	r9, r2
  412ab6:	fa11 fa84 	uxtah	sl, r1, r4
  412aba:	0c11      	lsrs	r1, r2, #16
  412abc:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  412ac0:	ebc9 020a 	rsb	r2, r9, sl
  412ac4:	eb01 4122 	add.w	r1, r1, r2, asr #16
  412ac8:	b292      	uxth	r2, r2
  412aca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  412ace:	45b0      	cmp	r8, r6
  412ad0:	f843 2b04 	str.w	r2, [r3], #4
  412ad4:	ea4f 4121 	mov.w	r1, r1, asr #16
  412ad8:	462c      	mov	r4, r5
  412ada:	d8e6      	bhi.n	412aaa <__mdiff+0x3e>
  412adc:	45ac      	cmp	ip, r5
  412ade:	4698      	mov	r8, r3
  412ae0:	d915      	bls.n	412b0e <__mdiff+0xa2>
  412ae2:	f854 6b04 	ldr.w	r6, [r4], #4
  412ae6:	fa11 f186 	uxtah	r1, r1, r6
  412aea:	0c36      	lsrs	r6, r6, #16
  412aec:	eb06 4621 	add.w	r6, r6, r1, asr #16
  412af0:	b289      	uxth	r1, r1
  412af2:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  412af6:	45a4      	cmp	ip, r4
  412af8:	f843 2b04 	str.w	r2, [r3], #4
  412afc:	ea4f 4126 	mov.w	r1, r6, asr #16
  412b00:	d8ef      	bhi.n	412ae2 <__mdiff+0x76>
  412b02:	43eb      	mvns	r3, r5
  412b04:	4463      	add	r3, ip
  412b06:	f023 0303 	bic.w	r3, r3, #3
  412b0a:	3304      	adds	r3, #4
  412b0c:	4443      	add	r3, r8
  412b0e:	3b04      	subs	r3, #4
  412b10:	b922      	cbnz	r2, 412b1c <__mdiff+0xb0>
  412b12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412b16:	3f01      	subs	r7, #1
  412b18:	2a00      	cmp	r2, #0
  412b1a:	d0fa      	beq.n	412b12 <__mdiff+0xa6>
  412b1c:	6107      	str	r7, [r0, #16]
  412b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412b22:	462b      	mov	r3, r5
  412b24:	f04f 0801 	mov.w	r8, #1
  412b28:	4635      	mov	r5, r6
  412b2a:	461e      	mov	r6, r3
  412b2c:	e7ac      	b.n	412a88 <__mdiff+0x1c>
  412b2e:	4620      	mov	r0, r4
  412b30:	4639      	mov	r1, r7
  412b32:	f7ff fd0d 	bl	412550 <_Balloc>
  412b36:	2301      	movs	r3, #1
  412b38:	6147      	str	r7, [r0, #20]
  412b3a:	6103      	str	r3, [r0, #16]
  412b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00412b40 <__ulp>:
  412b40:	4b0e      	ldr	r3, [pc, #56]	; (412b7c <__ulp+0x3c>)
  412b42:	400b      	ands	r3, r1
  412b44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  412b48:	2b00      	cmp	r3, #0
  412b4a:	dd02      	ble.n	412b52 <__ulp+0x12>
  412b4c:	4619      	mov	r1, r3
  412b4e:	2000      	movs	r0, #0
  412b50:	4770      	bx	lr
  412b52:	425b      	negs	r3, r3
  412b54:	151b      	asrs	r3, r3, #20
  412b56:	2b13      	cmp	r3, #19
  412b58:	dd0a      	ble.n	412b70 <__ulp+0x30>
  412b5a:	2b32      	cmp	r3, #50	; 0x32
  412b5c:	bfdd      	ittte	le
  412b5e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  412b62:	2201      	movle	r2, #1
  412b64:	fa02 f303 	lslle.w	r3, r2, r3
  412b68:	2301      	movgt	r3, #1
  412b6a:	2100      	movs	r1, #0
  412b6c:	4618      	mov	r0, r3
  412b6e:	4770      	bx	lr
  412b70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  412b74:	fa42 f103 	asr.w	r1, r2, r3
  412b78:	2000      	movs	r0, #0
  412b7a:	4770      	bx	lr
  412b7c:	7ff00000 	.word	0x7ff00000

00412b80 <__b2d>:
  412b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412b82:	6904      	ldr	r4, [r0, #16]
  412b84:	f100 0614 	add.w	r6, r0, #20
  412b88:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  412b8c:	460f      	mov	r7, r1
  412b8e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  412b92:	4628      	mov	r0, r5
  412b94:	f7ff fda4 	bl	4126e0 <__hi0bits>
  412b98:	f1c0 0320 	rsb	r3, r0, #32
  412b9c:	280a      	cmp	r0, #10
  412b9e:	603b      	str	r3, [r7, #0]
  412ba0:	f1a4 0104 	sub.w	r1, r4, #4
  412ba4:	dc19      	bgt.n	412bda <__b2d+0x5a>
  412ba6:	428e      	cmp	r6, r1
  412ba8:	f1c0 070b 	rsb	r7, r0, #11
  412bac:	bf38      	it	cc
  412bae:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  412bb2:	fa25 fc07 	lsr.w	ip, r5, r7
  412bb6:	f100 0015 	add.w	r0, r0, #21
  412bba:	bf38      	it	cc
  412bbc:	fa21 f707 	lsrcc.w	r7, r1, r7
  412bc0:	fa05 f500 	lsl.w	r5, r5, r0
  412bc4:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  412bc8:	bf28      	it	cs
  412bca:	2700      	movcs	r7, #0
  412bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  412bd0:	ea47 0205 	orr.w	r2, r7, r5
  412bd4:	4610      	mov	r0, r2
  412bd6:	4619      	mov	r1, r3
  412bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412bda:	428e      	cmp	r6, r1
  412bdc:	bf36      	itet	cc
  412bde:	f1a4 0108 	subcc.w	r1, r4, #8
  412be2:	2400      	movcs	r4, #0
  412be4:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  412be8:	f1b0 070b 	subs.w	r7, r0, #11
  412bec:	d019      	beq.n	412c22 <__b2d+0xa2>
  412bee:	42b1      	cmp	r1, r6
  412bf0:	bf88      	it	hi
  412bf2:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  412bf6:	fa05 f507 	lsl.w	r5, r5, r7
  412bfa:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  412bfe:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  412c02:	fa24 fc00 	lsr.w	ip, r4, r0
  412c06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  412c0a:	bf8c      	ite	hi
  412c0c:	fa21 f000 	lsrhi.w	r0, r1, r0
  412c10:	2000      	movls	r0, #0
  412c12:	40bc      	lsls	r4, r7
  412c14:	ea45 030c 	orr.w	r3, r5, ip
  412c18:	ea40 0204 	orr.w	r2, r0, r4
  412c1c:	4610      	mov	r0, r2
  412c1e:	4619      	mov	r1, r3
  412c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412c22:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  412c26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  412c2a:	4622      	mov	r2, r4
  412c2c:	4610      	mov	r0, r2
  412c2e:	4619      	mov	r1, r3
  412c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412c32:	bf00      	nop

00412c34 <__d2b>:
  412c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412c38:	b083      	sub	sp, #12
  412c3a:	2101      	movs	r1, #1
  412c3c:	461d      	mov	r5, r3
  412c3e:	f3c3 560a 	ubfx	r6, r3, #20, #11
  412c42:	4614      	mov	r4, r2
  412c44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  412c46:	f7ff fc83 	bl	412550 <_Balloc>
  412c4a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  412c4e:	4680      	mov	r8, r0
  412c50:	b10e      	cbz	r6, 412c56 <__d2b+0x22>
  412c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  412c56:	9301      	str	r3, [sp, #4]
  412c58:	b324      	cbz	r4, 412ca4 <__d2b+0x70>
  412c5a:	a802      	add	r0, sp, #8
  412c5c:	f840 4d08 	str.w	r4, [r0, #-8]!
  412c60:	4668      	mov	r0, sp
  412c62:	f7ff fd5d 	bl	412720 <__lo0bits>
  412c66:	2800      	cmp	r0, #0
  412c68:	d135      	bne.n	412cd6 <__d2b+0xa2>
  412c6a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412c6e:	f8c8 2014 	str.w	r2, [r8, #20]
  412c72:	2b00      	cmp	r3, #0
  412c74:	bf0c      	ite	eq
  412c76:	2401      	moveq	r4, #1
  412c78:	2402      	movne	r4, #2
  412c7a:	f8c8 3018 	str.w	r3, [r8, #24]
  412c7e:	f8c8 4010 	str.w	r4, [r8, #16]
  412c82:	b9de      	cbnz	r6, 412cbc <__d2b+0x88>
  412c84:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  412c88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  412c8c:	6038      	str	r0, [r7, #0]
  412c8e:	6918      	ldr	r0, [r3, #16]
  412c90:	f7ff fd26 	bl	4126e0 <__hi0bits>
  412c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412c96:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  412c9a:	6018      	str	r0, [r3, #0]
  412c9c:	4640      	mov	r0, r8
  412c9e:	b003      	add	sp, #12
  412ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412ca4:	a801      	add	r0, sp, #4
  412ca6:	f7ff fd3b 	bl	412720 <__lo0bits>
  412caa:	2401      	movs	r4, #1
  412cac:	9b01      	ldr	r3, [sp, #4]
  412cae:	f8c8 3014 	str.w	r3, [r8, #20]
  412cb2:	3020      	adds	r0, #32
  412cb4:	f8c8 4010 	str.w	r4, [r8, #16]
  412cb8:	2e00      	cmp	r6, #0
  412cba:	d0e3      	beq.n	412c84 <__d2b+0x50>
  412cbc:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  412cc0:	eb09 0300 	add.w	r3, r9, r0
  412cc4:	603b      	str	r3, [r7, #0]
  412cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  412ccc:	6018      	str	r0, [r3, #0]
  412cce:	4640      	mov	r0, r8
  412cd0:	b003      	add	sp, #12
  412cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412cd6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412cda:	f1c0 0120 	rsb	r1, r0, #32
  412cde:	fa03 f101 	lsl.w	r1, r3, r1
  412ce2:	430a      	orrs	r2, r1
  412ce4:	40c3      	lsrs	r3, r0
  412ce6:	9301      	str	r3, [sp, #4]
  412ce8:	f8c8 2014 	str.w	r2, [r8, #20]
  412cec:	e7c1      	b.n	412c72 <__d2b+0x3e>
  412cee:	bf00      	nop

00412cf0 <__ratio>:
  412cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  412cf2:	b083      	sub	sp, #12
  412cf4:	460e      	mov	r6, r1
  412cf6:	4669      	mov	r1, sp
  412cf8:	4607      	mov	r7, r0
  412cfa:	f7ff ff41 	bl	412b80 <__b2d>
  412cfe:	4604      	mov	r4, r0
  412d00:	460d      	mov	r5, r1
  412d02:	4630      	mov	r0, r6
  412d04:	a901      	add	r1, sp, #4
  412d06:	f7ff ff3b 	bl	412b80 <__b2d>
  412d0a:	4602      	mov	r2, r0
  412d0c:	460b      	mov	r3, r1
  412d0e:	e89d 0003 	ldmia.w	sp, {r0, r1}
  412d12:	693f      	ldr	r7, [r7, #16]
  412d14:	6936      	ldr	r6, [r6, #16]
  412d16:	1a41      	subs	r1, r0, r1
  412d18:	ebc6 0e07 	rsb	lr, r6, r7
  412d1c:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  412d20:	f1be 0f00 	cmp.w	lr, #0
  412d24:	dd08      	ble.n	412d38 <__ratio+0x48>
  412d26:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  412d2a:	460d      	mov	r5, r1
  412d2c:	4620      	mov	r0, r4
  412d2e:	4629      	mov	r1, r5
  412d30:	f002 fe94 	bl	415a5c <__aeabi_ddiv>
  412d34:	b003      	add	sp, #12
  412d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412d38:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  412d3c:	463b      	mov	r3, r7
  412d3e:	e7f5      	b.n	412d2c <__ratio+0x3c>

00412d40 <__copybits>:
  412d40:	b470      	push	{r4, r5, r6}
  412d42:	6915      	ldr	r5, [r2, #16]
  412d44:	f102 0314 	add.w	r3, r2, #20
  412d48:	3901      	subs	r1, #1
  412d4a:	114e      	asrs	r6, r1, #5
  412d4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  412d50:	3601      	adds	r6, #1
  412d52:	42ab      	cmp	r3, r5
  412d54:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  412d58:	d20c      	bcs.n	412d74 <__copybits+0x34>
  412d5a:	4601      	mov	r1, r0
  412d5c:	f853 4b04 	ldr.w	r4, [r3], #4
  412d60:	f841 4b04 	str.w	r4, [r1], #4
  412d64:	429d      	cmp	r5, r3
  412d66:	d8f9      	bhi.n	412d5c <__copybits+0x1c>
  412d68:	1aab      	subs	r3, r5, r2
  412d6a:	3b15      	subs	r3, #21
  412d6c:	f023 0303 	bic.w	r3, r3, #3
  412d70:	3304      	adds	r3, #4
  412d72:	4418      	add	r0, r3
  412d74:	4286      	cmp	r6, r0
  412d76:	d904      	bls.n	412d82 <__copybits+0x42>
  412d78:	2300      	movs	r3, #0
  412d7a:	f840 3b04 	str.w	r3, [r0], #4
  412d7e:	4286      	cmp	r6, r0
  412d80:	d8fb      	bhi.n	412d7a <__copybits+0x3a>
  412d82:	bc70      	pop	{r4, r5, r6}
  412d84:	4770      	bx	lr
  412d86:	bf00      	nop

00412d88 <__any_on>:
  412d88:	6903      	ldr	r3, [r0, #16]
  412d8a:	114a      	asrs	r2, r1, #5
  412d8c:	4293      	cmp	r3, r2
  412d8e:	b410      	push	{r4}
  412d90:	f100 0414 	add.w	r4, r0, #20
  412d94:	da10      	bge.n	412db8 <__any_on+0x30>
  412d96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412d9a:	429c      	cmp	r4, r3
  412d9c:	d221      	bcs.n	412de2 <__any_on+0x5a>
  412d9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
  412da2:	3b04      	subs	r3, #4
  412da4:	b118      	cbz	r0, 412dae <__any_on+0x26>
  412da6:	e015      	b.n	412dd4 <__any_on+0x4c>
  412da8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412dac:	b992      	cbnz	r2, 412dd4 <__any_on+0x4c>
  412dae:	429c      	cmp	r4, r3
  412db0:	d3fa      	bcc.n	412da8 <__any_on+0x20>
  412db2:	f85d 4b04 	ldr.w	r4, [sp], #4
  412db6:	4770      	bx	lr
  412db8:	dd10      	ble.n	412ddc <__any_on+0x54>
  412dba:	f011 011f 	ands.w	r1, r1, #31
  412dbe:	d00d      	beq.n	412ddc <__any_on+0x54>
  412dc0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  412dc4:	fa20 f301 	lsr.w	r3, r0, r1
  412dc8:	fa03 f101 	lsl.w	r1, r3, r1
  412dcc:	4281      	cmp	r1, r0
  412dce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412dd2:	d0e2      	beq.n	412d9a <__any_on+0x12>
  412dd4:	2001      	movs	r0, #1
  412dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  412dda:	4770      	bx	lr
  412ddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412de0:	e7db      	b.n	412d9a <__any_on+0x12>
  412de2:	2000      	movs	r0, #0
  412de4:	e7e5      	b.n	412db2 <__any_on+0x2a>
  412de6:	bf00      	nop

00412de8 <_read_r>:
  412de8:	b570      	push	{r4, r5, r6, lr}
  412dea:	4c08      	ldr	r4, [pc, #32]	; (412e0c <_read_r+0x24>)
  412dec:	4606      	mov	r6, r0
  412dee:	2500      	movs	r5, #0
  412df0:	4608      	mov	r0, r1
  412df2:	4611      	mov	r1, r2
  412df4:	461a      	mov	r2, r3
  412df6:	6025      	str	r5, [r4, #0]
  412df8:	f7ee ff06 	bl	401c08 <_read>
  412dfc:	1c43      	adds	r3, r0, #1
  412dfe:	d000      	beq.n	412e02 <_read_r+0x1a>
  412e00:	bd70      	pop	{r4, r5, r6, pc}
  412e02:	6823      	ldr	r3, [r4, #0]
  412e04:	2b00      	cmp	r3, #0
  412e06:	d0fb      	beq.n	412e00 <_read_r+0x18>
  412e08:	6033      	str	r3, [r6, #0]
  412e0a:	bd70      	pop	{r4, r5, r6, pc}
  412e0c:	200040e8 	.word	0x200040e8

00412e10 <_realloc_r>:
  412e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412e14:	460c      	mov	r4, r1
  412e16:	b083      	sub	sp, #12
  412e18:	4690      	mov	r8, r2
  412e1a:	4681      	mov	r9, r0
  412e1c:	2900      	cmp	r1, #0
  412e1e:	f000 80e2 	beq.w	412fe6 <_realloc_r+0x1d6>
  412e22:	f7fa f921 	bl	40d068 <__malloc_lock>
  412e26:	f108 060b 	add.w	r6, r8, #11
  412e2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412e2e:	2e16      	cmp	r6, #22
  412e30:	f023 0503 	bic.w	r5, r3, #3
  412e34:	f1a4 0708 	sub.w	r7, r4, #8
  412e38:	d84b      	bhi.n	412ed2 <_realloc_r+0xc2>
  412e3a:	2110      	movs	r1, #16
  412e3c:	460e      	mov	r6, r1
  412e3e:	45b0      	cmp	r8, r6
  412e40:	d84c      	bhi.n	412edc <_realloc_r+0xcc>
  412e42:	428d      	cmp	r5, r1
  412e44:	da78      	bge.n	412f38 <_realloc_r+0x128>
  412e46:	f8df b390 	ldr.w	fp, [pc, #912]	; 4131d8 <_realloc_r+0x3c8>
  412e4a:	f8db e008 	ldr.w	lr, [fp, #8]
  412e4e:	1978      	adds	r0, r7, r5
  412e50:	4586      	cmp	lr, r0
  412e52:	f000 80ce 	beq.w	412ff2 <_realloc_r+0x1e2>
  412e56:	6842      	ldr	r2, [r0, #4]
  412e58:	f022 0c01 	bic.w	ip, r2, #1
  412e5c:	4484      	add	ip, r0
  412e5e:	f8dc c004 	ldr.w	ip, [ip, #4]
  412e62:	f01c 0f01 	tst.w	ip, #1
  412e66:	d07a      	beq.n	412f5e <_realloc_r+0x14e>
  412e68:	2200      	movs	r2, #0
  412e6a:	4610      	mov	r0, r2
  412e6c:	07db      	lsls	r3, r3, #31
  412e6e:	f100 8092 	bmi.w	412f96 <_realloc_r+0x186>
  412e72:	f854 3c08 	ldr.w	r3, [r4, #-8]
  412e76:	ebc3 0a07 	rsb	sl, r3, r7
  412e7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  412e7e:	f023 0303 	bic.w	r3, r3, #3
  412e82:	442b      	add	r3, r5
  412e84:	b388      	cbz	r0, 412eea <_realloc_r+0xda>
  412e86:	4570      	cmp	r0, lr
  412e88:	f000 80ed 	beq.w	413066 <_realloc_r+0x256>
  412e8c:	eb02 0e03 	add.w	lr, r2, r3
  412e90:	458e      	cmp	lr, r1
  412e92:	db2a      	blt.n	412eea <_realloc_r+0xda>
  412e94:	68c3      	ldr	r3, [r0, #12]
  412e96:	6882      	ldr	r2, [r0, #8]
  412e98:	4657      	mov	r7, sl
  412e9a:	60d3      	str	r3, [r2, #12]
  412e9c:	609a      	str	r2, [r3, #8]
  412e9e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  412ea2:	f8da 300c 	ldr.w	r3, [sl, #12]
  412ea6:	60cb      	str	r3, [r1, #12]
  412ea8:	1f2a      	subs	r2, r5, #4
  412eaa:	2a24      	cmp	r2, #36	; 0x24
  412eac:	6099      	str	r1, [r3, #8]
  412eae:	f200 8126 	bhi.w	4130fe <_realloc_r+0x2ee>
  412eb2:	2a13      	cmp	r2, #19
  412eb4:	f240 80b3 	bls.w	41301e <_realloc_r+0x20e>
  412eb8:	6823      	ldr	r3, [r4, #0]
  412eba:	f8ca 3008 	str.w	r3, [sl, #8]
  412ebe:	6863      	ldr	r3, [r4, #4]
  412ec0:	f8ca 300c 	str.w	r3, [sl, #12]
  412ec4:	2a1b      	cmp	r2, #27
  412ec6:	f200 8130 	bhi.w	41312a <_realloc_r+0x31a>
  412eca:	3408      	adds	r4, #8
  412ecc:	f10a 0310 	add.w	r3, sl, #16
  412ed0:	e0a6      	b.n	413020 <_realloc_r+0x210>
  412ed2:	f026 0607 	bic.w	r6, r6, #7
  412ed6:	2e00      	cmp	r6, #0
  412ed8:	4631      	mov	r1, r6
  412eda:	dab0      	bge.n	412e3e <_realloc_r+0x2e>
  412edc:	230c      	movs	r3, #12
  412ede:	2000      	movs	r0, #0
  412ee0:	f8c9 3000 	str.w	r3, [r9]
  412ee4:	b003      	add	sp, #12
  412ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412eea:	428b      	cmp	r3, r1
  412eec:	db53      	blt.n	412f96 <_realloc_r+0x186>
  412eee:	4657      	mov	r7, sl
  412ef0:	f8da 100c 	ldr.w	r1, [sl, #12]
  412ef4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  412ef8:	1f2a      	subs	r2, r5, #4
  412efa:	2a24      	cmp	r2, #36	; 0x24
  412efc:	60c1      	str	r1, [r0, #12]
  412efe:	6088      	str	r0, [r1, #8]
  412f00:	f200 8109 	bhi.w	413116 <_realloc_r+0x306>
  412f04:	2a13      	cmp	r2, #19
  412f06:	f240 8104 	bls.w	413112 <_realloc_r+0x302>
  412f0a:	6821      	ldr	r1, [r4, #0]
  412f0c:	f8ca 1008 	str.w	r1, [sl, #8]
  412f10:	6861      	ldr	r1, [r4, #4]
  412f12:	f8ca 100c 	str.w	r1, [sl, #12]
  412f16:	2a1b      	cmp	r2, #27
  412f18:	f200 811c 	bhi.w	413154 <_realloc_r+0x344>
  412f1c:	3408      	adds	r4, #8
  412f1e:	f10a 0210 	add.w	r2, sl, #16
  412f22:	6821      	ldr	r1, [r4, #0]
  412f24:	6011      	str	r1, [r2, #0]
  412f26:	6861      	ldr	r1, [r4, #4]
  412f28:	6051      	str	r1, [r2, #4]
  412f2a:	68a1      	ldr	r1, [r4, #8]
  412f2c:	6091      	str	r1, [r2, #8]
  412f2e:	461d      	mov	r5, r3
  412f30:	f8da 3004 	ldr.w	r3, [sl, #4]
  412f34:	463c      	mov	r4, r7
  412f36:	4657      	mov	r7, sl
  412f38:	1baa      	subs	r2, r5, r6
  412f3a:	2a0f      	cmp	r2, #15
  412f3c:	f003 0301 	and.w	r3, r3, #1
  412f40:	d819      	bhi.n	412f76 <_realloc_r+0x166>
  412f42:	432b      	orrs	r3, r5
  412f44:	443d      	add	r5, r7
  412f46:	607b      	str	r3, [r7, #4]
  412f48:	686b      	ldr	r3, [r5, #4]
  412f4a:	f043 0301 	orr.w	r3, r3, #1
  412f4e:	606b      	str	r3, [r5, #4]
  412f50:	4648      	mov	r0, r9
  412f52:	f7fa f88b 	bl	40d06c <__malloc_unlock>
  412f56:	4620      	mov	r0, r4
  412f58:	b003      	add	sp, #12
  412f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412f5e:	f022 0203 	bic.w	r2, r2, #3
  412f62:	eb02 0c05 	add.w	ip, r2, r5
  412f66:	458c      	cmp	ip, r1
  412f68:	db80      	blt.n	412e6c <_realloc_r+0x5c>
  412f6a:	68c2      	ldr	r2, [r0, #12]
  412f6c:	6881      	ldr	r1, [r0, #8]
  412f6e:	4665      	mov	r5, ip
  412f70:	60ca      	str	r2, [r1, #12]
  412f72:	6091      	str	r1, [r2, #8]
  412f74:	e7e0      	b.n	412f38 <_realloc_r+0x128>
  412f76:	19b9      	adds	r1, r7, r6
  412f78:	f042 0001 	orr.w	r0, r2, #1
  412f7c:	431e      	orrs	r6, r3
  412f7e:	440a      	add	r2, r1
  412f80:	607e      	str	r6, [r7, #4]
  412f82:	6048      	str	r0, [r1, #4]
  412f84:	6853      	ldr	r3, [r2, #4]
  412f86:	f043 0301 	orr.w	r3, r3, #1
  412f8a:	3108      	adds	r1, #8
  412f8c:	6053      	str	r3, [r2, #4]
  412f8e:	4648      	mov	r0, r9
  412f90:	f7fe fed2 	bl	411d38 <_free_r>
  412f94:	e7dc      	b.n	412f50 <_realloc_r+0x140>
  412f96:	4641      	mov	r1, r8
  412f98:	4648      	mov	r0, r9
  412f9a:	f7f9 fce5 	bl	40c968 <_malloc_r>
  412f9e:	4680      	mov	r8, r0
  412fa0:	b1d0      	cbz	r0, 412fd8 <_realloc_r+0x1c8>
  412fa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412fa6:	f023 0201 	bic.w	r2, r3, #1
  412faa:	443a      	add	r2, r7
  412fac:	f1a0 0108 	sub.w	r1, r0, #8
  412fb0:	4291      	cmp	r1, r2
  412fb2:	f000 809e 	beq.w	4130f2 <_realloc_r+0x2e2>
  412fb6:	1f2a      	subs	r2, r5, #4
  412fb8:	2a24      	cmp	r2, #36	; 0x24
  412fba:	d850      	bhi.n	41305e <_realloc_r+0x24e>
  412fbc:	2a13      	cmp	r2, #19
  412fbe:	d823      	bhi.n	413008 <_realloc_r+0x1f8>
  412fc0:	4603      	mov	r3, r0
  412fc2:	4622      	mov	r2, r4
  412fc4:	6811      	ldr	r1, [r2, #0]
  412fc6:	6019      	str	r1, [r3, #0]
  412fc8:	6851      	ldr	r1, [r2, #4]
  412fca:	6059      	str	r1, [r3, #4]
  412fcc:	6892      	ldr	r2, [r2, #8]
  412fce:	609a      	str	r2, [r3, #8]
  412fd0:	4621      	mov	r1, r4
  412fd2:	4648      	mov	r0, r9
  412fd4:	f7fe feb0 	bl	411d38 <_free_r>
  412fd8:	4648      	mov	r0, r9
  412fda:	f7fa f847 	bl	40d06c <__malloc_unlock>
  412fde:	4640      	mov	r0, r8
  412fe0:	b003      	add	sp, #12
  412fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412fe6:	4611      	mov	r1, r2
  412fe8:	b003      	add	sp, #12
  412fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412fee:	f7f9 bcbb 	b.w	40c968 <_malloc_r>
  412ff2:	f8de 2004 	ldr.w	r2, [lr, #4]
  412ff6:	f022 0203 	bic.w	r2, r2, #3
  412ffa:	1950      	adds	r0, r2, r5
  412ffc:	f106 0c10 	add.w	ip, r6, #16
  413000:	4560      	cmp	r0, ip
  413002:	da19      	bge.n	413038 <_realloc_r+0x228>
  413004:	4670      	mov	r0, lr
  413006:	e731      	b.n	412e6c <_realloc_r+0x5c>
  413008:	6823      	ldr	r3, [r4, #0]
  41300a:	6003      	str	r3, [r0, #0]
  41300c:	6863      	ldr	r3, [r4, #4]
  41300e:	6043      	str	r3, [r0, #4]
  413010:	2a1b      	cmp	r2, #27
  413012:	d863      	bhi.n	4130dc <_realloc_r+0x2cc>
  413014:	f100 0308 	add.w	r3, r0, #8
  413018:	f104 0208 	add.w	r2, r4, #8
  41301c:	e7d2      	b.n	412fc4 <_realloc_r+0x1b4>
  41301e:	463b      	mov	r3, r7
  413020:	6822      	ldr	r2, [r4, #0]
  413022:	601a      	str	r2, [r3, #0]
  413024:	6862      	ldr	r2, [r4, #4]
  413026:	605a      	str	r2, [r3, #4]
  413028:	68a2      	ldr	r2, [r4, #8]
  41302a:	609a      	str	r2, [r3, #8]
  41302c:	463c      	mov	r4, r7
  41302e:	4675      	mov	r5, lr
  413030:	f8da 3004 	ldr.w	r3, [sl, #4]
  413034:	4657      	mov	r7, sl
  413036:	e77f      	b.n	412f38 <_realloc_r+0x128>
  413038:	4437      	add	r7, r6
  41303a:	1b83      	subs	r3, r0, r6
  41303c:	f043 0301 	orr.w	r3, r3, #1
  413040:	f8cb 7008 	str.w	r7, [fp, #8]
  413044:	607b      	str	r3, [r7, #4]
  413046:	f854 3c04 	ldr.w	r3, [r4, #-4]
  41304a:	f003 0301 	and.w	r3, r3, #1
  41304e:	431e      	orrs	r6, r3
  413050:	4648      	mov	r0, r9
  413052:	f844 6c04 	str.w	r6, [r4, #-4]
  413056:	f7fa f809 	bl	40d06c <__malloc_unlock>
  41305a:	4620      	mov	r0, r4
  41305c:	e77c      	b.n	412f58 <_realloc_r+0x148>
  41305e:	4621      	mov	r1, r4
  413060:	f7ff fa16 	bl	412490 <memmove>
  413064:	e7b4      	b.n	412fd0 <_realloc_r+0x1c0>
  413066:	eb02 0c03 	add.w	ip, r2, r3
  41306a:	f106 0210 	add.w	r2, r6, #16
  41306e:	4594      	cmp	ip, r2
  413070:	f6ff af3b 	blt.w	412eea <_realloc_r+0xda>
  413074:	4657      	mov	r7, sl
  413076:	f8da 300c 	ldr.w	r3, [sl, #12]
  41307a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41307e:	1f2a      	subs	r2, r5, #4
  413080:	2a24      	cmp	r2, #36	; 0x24
  413082:	60cb      	str	r3, [r1, #12]
  413084:	6099      	str	r1, [r3, #8]
  413086:	f200 8087 	bhi.w	413198 <_realloc_r+0x388>
  41308a:	2a13      	cmp	r2, #19
  41308c:	d978      	bls.n	413180 <_realloc_r+0x370>
  41308e:	6823      	ldr	r3, [r4, #0]
  413090:	f8ca 3008 	str.w	r3, [sl, #8]
  413094:	6863      	ldr	r3, [r4, #4]
  413096:	f8ca 300c 	str.w	r3, [sl, #12]
  41309a:	2a1b      	cmp	r2, #27
  41309c:	f200 8085 	bhi.w	4131aa <_realloc_r+0x39a>
  4130a0:	3408      	adds	r4, #8
  4130a2:	f10a 0310 	add.w	r3, sl, #16
  4130a6:	6822      	ldr	r2, [r4, #0]
  4130a8:	601a      	str	r2, [r3, #0]
  4130aa:	6862      	ldr	r2, [r4, #4]
  4130ac:	605a      	str	r2, [r3, #4]
  4130ae:	68a2      	ldr	r2, [r4, #8]
  4130b0:	609a      	str	r2, [r3, #8]
  4130b2:	eb0a 0306 	add.w	r3, sl, r6
  4130b6:	ebc6 020c 	rsb	r2, r6, ip
  4130ba:	f042 0201 	orr.w	r2, r2, #1
  4130be:	f8cb 3008 	str.w	r3, [fp, #8]
  4130c2:	605a      	str	r2, [r3, #4]
  4130c4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4130c8:	f003 0301 	and.w	r3, r3, #1
  4130cc:	431e      	orrs	r6, r3
  4130ce:	4648      	mov	r0, r9
  4130d0:	f8ca 6004 	str.w	r6, [sl, #4]
  4130d4:	f7f9 ffca 	bl	40d06c <__malloc_unlock>
  4130d8:	4638      	mov	r0, r7
  4130da:	e73d      	b.n	412f58 <_realloc_r+0x148>
  4130dc:	68a3      	ldr	r3, [r4, #8]
  4130de:	6083      	str	r3, [r0, #8]
  4130e0:	68e3      	ldr	r3, [r4, #12]
  4130e2:	60c3      	str	r3, [r0, #12]
  4130e4:	2a24      	cmp	r2, #36	; 0x24
  4130e6:	d02c      	beq.n	413142 <_realloc_r+0x332>
  4130e8:	f100 0310 	add.w	r3, r0, #16
  4130ec:	f104 0210 	add.w	r2, r4, #16
  4130f0:	e768      	b.n	412fc4 <_realloc_r+0x1b4>
  4130f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4130f6:	f022 0203 	bic.w	r2, r2, #3
  4130fa:	4415      	add	r5, r2
  4130fc:	e71c      	b.n	412f38 <_realloc_r+0x128>
  4130fe:	4621      	mov	r1, r4
  413100:	4638      	mov	r0, r7
  413102:	4675      	mov	r5, lr
  413104:	463c      	mov	r4, r7
  413106:	f7ff f9c3 	bl	412490 <memmove>
  41310a:	4657      	mov	r7, sl
  41310c:	f8da 3004 	ldr.w	r3, [sl, #4]
  413110:	e712      	b.n	412f38 <_realloc_r+0x128>
  413112:	463a      	mov	r2, r7
  413114:	e705      	b.n	412f22 <_realloc_r+0x112>
  413116:	4621      	mov	r1, r4
  413118:	4638      	mov	r0, r7
  41311a:	461d      	mov	r5, r3
  41311c:	463c      	mov	r4, r7
  41311e:	f7ff f9b7 	bl	412490 <memmove>
  413122:	4657      	mov	r7, sl
  413124:	f8da 3004 	ldr.w	r3, [sl, #4]
  413128:	e706      	b.n	412f38 <_realloc_r+0x128>
  41312a:	68a3      	ldr	r3, [r4, #8]
  41312c:	f8ca 3010 	str.w	r3, [sl, #16]
  413130:	68e3      	ldr	r3, [r4, #12]
  413132:	f8ca 3014 	str.w	r3, [sl, #20]
  413136:	2a24      	cmp	r2, #36	; 0x24
  413138:	d018      	beq.n	41316c <_realloc_r+0x35c>
  41313a:	3410      	adds	r4, #16
  41313c:	f10a 0318 	add.w	r3, sl, #24
  413140:	e76e      	b.n	413020 <_realloc_r+0x210>
  413142:	6923      	ldr	r3, [r4, #16]
  413144:	6103      	str	r3, [r0, #16]
  413146:	6963      	ldr	r3, [r4, #20]
  413148:	6143      	str	r3, [r0, #20]
  41314a:	f104 0218 	add.w	r2, r4, #24
  41314e:	f100 0318 	add.w	r3, r0, #24
  413152:	e737      	b.n	412fc4 <_realloc_r+0x1b4>
  413154:	68a1      	ldr	r1, [r4, #8]
  413156:	f8ca 1010 	str.w	r1, [sl, #16]
  41315a:	68e1      	ldr	r1, [r4, #12]
  41315c:	f8ca 1014 	str.w	r1, [sl, #20]
  413160:	2a24      	cmp	r2, #36	; 0x24
  413162:	d00f      	beq.n	413184 <_realloc_r+0x374>
  413164:	3410      	adds	r4, #16
  413166:	f10a 0218 	add.w	r2, sl, #24
  41316a:	e6da      	b.n	412f22 <_realloc_r+0x112>
  41316c:	6923      	ldr	r3, [r4, #16]
  41316e:	f8ca 3018 	str.w	r3, [sl, #24]
  413172:	6963      	ldr	r3, [r4, #20]
  413174:	f8ca 301c 	str.w	r3, [sl, #28]
  413178:	3418      	adds	r4, #24
  41317a:	f10a 0320 	add.w	r3, sl, #32
  41317e:	e74f      	b.n	413020 <_realloc_r+0x210>
  413180:	463b      	mov	r3, r7
  413182:	e790      	b.n	4130a6 <_realloc_r+0x296>
  413184:	6922      	ldr	r2, [r4, #16]
  413186:	f8ca 2018 	str.w	r2, [sl, #24]
  41318a:	6962      	ldr	r2, [r4, #20]
  41318c:	f8ca 201c 	str.w	r2, [sl, #28]
  413190:	3418      	adds	r4, #24
  413192:	f10a 0220 	add.w	r2, sl, #32
  413196:	e6c4      	b.n	412f22 <_realloc_r+0x112>
  413198:	4621      	mov	r1, r4
  41319a:	4638      	mov	r0, r7
  41319c:	f8cd c004 	str.w	ip, [sp, #4]
  4131a0:	f7ff f976 	bl	412490 <memmove>
  4131a4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4131a8:	e783      	b.n	4130b2 <_realloc_r+0x2a2>
  4131aa:	68a3      	ldr	r3, [r4, #8]
  4131ac:	f8ca 3010 	str.w	r3, [sl, #16]
  4131b0:	68e3      	ldr	r3, [r4, #12]
  4131b2:	f8ca 3014 	str.w	r3, [sl, #20]
  4131b6:	2a24      	cmp	r2, #36	; 0x24
  4131b8:	d003      	beq.n	4131c2 <_realloc_r+0x3b2>
  4131ba:	3410      	adds	r4, #16
  4131bc:	f10a 0318 	add.w	r3, sl, #24
  4131c0:	e771      	b.n	4130a6 <_realloc_r+0x296>
  4131c2:	6923      	ldr	r3, [r4, #16]
  4131c4:	f8ca 3018 	str.w	r3, [sl, #24]
  4131c8:	6963      	ldr	r3, [r4, #20]
  4131ca:	f8ca 301c 	str.w	r3, [sl, #28]
  4131ce:	3418      	adds	r4, #24
  4131d0:	f10a 0320 	add.w	r3, sl, #32
  4131d4:	e767      	b.n	4130a6 <_realloc_r+0x296>
  4131d6:	bf00      	nop
  4131d8:	2000091c 	.word	0x2000091c

004131dc <__fpclassifyd>:
  4131dc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4131e0:	b410      	push	{r4}
  4131e2:	d008      	beq.n	4131f6 <__fpclassifyd+0x1a>
  4131e4:	4a0f      	ldr	r2, [pc, #60]	; (413224 <__fpclassifyd+0x48>)
  4131e6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  4131ea:	4294      	cmp	r4, r2
  4131ec:	d80a      	bhi.n	413204 <__fpclassifyd+0x28>
  4131ee:	2004      	movs	r0, #4
  4131f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4131f4:	4770      	bx	lr
  4131f6:	2800      	cmp	r0, #0
  4131f8:	bf0c      	ite	eq
  4131fa:	2002      	moveq	r0, #2
  4131fc:	2003      	movne	r0, #3
  4131fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  413202:	4770      	bx	lr
  413204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  413208:	d201      	bcs.n	41320e <__fpclassifyd+0x32>
  41320a:	2003      	movs	r0, #3
  41320c:	e7f7      	b.n	4131fe <__fpclassifyd+0x22>
  41320e:	4a06      	ldr	r2, [pc, #24]	; (413228 <__fpclassifyd+0x4c>)
  413210:	4293      	cmp	r3, r2
  413212:	d001      	beq.n	413218 <__fpclassifyd+0x3c>
  413214:	2000      	movs	r0, #0
  413216:	e7f2      	b.n	4131fe <__fpclassifyd+0x22>
  413218:	f1d0 0001 	rsbs	r0, r0, #1
  41321c:	bf38      	it	cc
  41321e:	2000      	movcc	r0, #0
  413220:	e7ed      	b.n	4131fe <__fpclassifyd+0x22>
  413222:	bf00      	nop
  413224:	7fdfffff 	.word	0x7fdfffff
  413228:	7ff00000 	.word	0x7ff00000

0041322c <__sccl>:
  41322c:	b470      	push	{r4, r5, r6}
  41322e:	780c      	ldrb	r4, [r1, #0]
  413230:	2c5e      	cmp	r4, #94	; 0x5e
  413232:	d02e      	beq.n	413292 <__sccl+0x66>
  413234:	2200      	movs	r2, #0
  413236:	1c4d      	adds	r5, r1, #1
  413238:	4616      	mov	r6, r2
  41323a:	2300      	movs	r3, #0
  41323c:	54c2      	strb	r2, [r0, r3]
  41323e:	3301      	adds	r3, #1
  413240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  413244:	d1fa      	bne.n	41323c <__sccl+0x10>
  413246:	b184      	cbz	r4, 41326a <__sccl+0x3e>
  413248:	f086 0201 	eor.w	r2, r6, #1
  41324c:	5502      	strb	r2, [r0, r4]
  41324e:	1c6e      	adds	r6, r5, #1
  413250:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  413254:	2b2d      	cmp	r3, #45	; 0x2d
  413256:	d00e      	beq.n	413276 <__sccl+0x4a>
  413258:	2b5d      	cmp	r3, #93	; 0x5d
  41325a:	d009      	beq.n	413270 <__sccl+0x44>
  41325c:	b113      	cbz	r3, 413264 <__sccl+0x38>
  41325e:	461c      	mov	r4, r3
  413260:	4635      	mov	r5, r6
  413262:	e7f3      	b.n	41324c <__sccl+0x20>
  413264:	4628      	mov	r0, r5
  413266:	bc70      	pop	{r4, r5, r6}
  413268:	4770      	bx	lr
  41326a:	1e68      	subs	r0, r5, #1
  41326c:	bc70      	pop	{r4, r5, r6}
  41326e:	4770      	bx	lr
  413270:	4630      	mov	r0, r6
  413272:	bc70      	pop	{r4, r5, r6}
  413274:	4770      	bx	lr
  413276:	7869      	ldrb	r1, [r5, #1]
  413278:	295d      	cmp	r1, #93	; 0x5d
  41327a:	d0f0      	beq.n	41325e <__sccl+0x32>
  41327c:	428c      	cmp	r4, r1
  41327e:	dcee      	bgt.n	41325e <__sccl+0x32>
  413280:	3502      	adds	r5, #2
  413282:	1903      	adds	r3, r0, r4
  413284:	3401      	adds	r4, #1
  413286:	42a1      	cmp	r1, r4
  413288:	f803 2f01 	strb.w	r2, [r3, #1]!
  41328c:	dcfa      	bgt.n	413284 <__sccl+0x58>
  41328e:	3602      	adds	r6, #2
  413290:	e7de      	b.n	413250 <__sccl+0x24>
  413292:	2201      	movs	r2, #1
  413294:	784c      	ldrb	r4, [r1, #1]
  413296:	4616      	mov	r6, r2
  413298:	1c8d      	adds	r5, r1, #2
  41329a:	e7ce      	b.n	41323a <__sccl+0xe>

0041329c <nanf>:
  41329c:	4800      	ldr	r0, [pc, #0]	; (4132a0 <nanf+0x4>)
  41329e:	4770      	bx	lr
  4132a0:	7fc00000 	.word	0x7fc00000

004132a4 <sulp>:
  4132a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4132a8:	460d      	mov	r5, r1
  4132aa:	4690      	mov	r8, r2
  4132ac:	f7ff fc48 	bl	412b40 <__ulp>
  4132b0:	4606      	mov	r6, r0
  4132b2:	460f      	mov	r7, r1
  4132b4:	f1b8 0f00 	cmp.w	r8, #0
  4132b8:	d00f      	beq.n	4132da <sulp+0x36>
  4132ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
  4132be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4132c2:	2b00      	cmp	r3, #0
  4132c4:	dd09      	ble.n	4132da <sulp+0x36>
  4132c6:	051c      	lsls	r4, r3, #20
  4132c8:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4132cc:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4132d0:	2200      	movs	r2, #0
  4132d2:	f002 fa99 	bl	415808 <__aeabi_dmul>
  4132d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4132da:	4630      	mov	r0, r6
  4132dc:	4639      	mov	r1, r7
  4132de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4132e2:	bf00      	nop
  4132e4:	0000      	movs	r0, r0
	...

004132e8 <_strtod_r>:
  4132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4132ec:	b09f      	sub	sp, #124	; 0x7c
  4132ee:	460d      	mov	r5, r1
  4132f0:	9119      	str	r1, [sp, #100]	; 0x64
  4132f2:	4683      	mov	fp, r0
  4132f4:	9205      	str	r2, [sp, #20]
  4132f6:	2000      	movs	r0, #0
  4132f8:	460a      	mov	r2, r1
  4132fa:	2100      	movs	r1, #0
  4132fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413300:	2300      	movs	r3, #0
  413302:	931a      	str	r3, [sp, #104]	; 0x68
  413304:	4616      	mov	r6, r2
  413306:	f812 4b01 	ldrb.w	r4, [r2], #1
  41330a:	2c2d      	cmp	r4, #45	; 0x2d
  41330c:	f200 8158 	bhi.w	4135c0 <_strtod_r+0x2d8>
  413310:	e8df f014 	tbh	[pc, r4, lsl #1]
  413314:	01560039 	.word	0x01560039
  413318:	01560156 	.word	0x01560156
  41331c:	01560156 	.word	0x01560156
  413320:	01560156 	.word	0x01560156
  413324:	007d0156 	.word	0x007d0156
  413328:	007d007d 	.word	0x007d007d
  41332c:	007d007d 	.word	0x007d007d
  413330:	01560156 	.word	0x01560156
  413334:	01560156 	.word	0x01560156
  413338:	01560156 	.word	0x01560156
  41333c:	01560156 	.word	0x01560156
  413340:	01560156 	.word	0x01560156
  413344:	01560156 	.word	0x01560156
  413348:	01560156 	.word	0x01560156
  41334c:	01560156 	.word	0x01560156
  413350:	01560156 	.word	0x01560156
  413354:	0156007d 	.word	0x0156007d
  413358:	01560156 	.word	0x01560156
  41335c:	01560156 	.word	0x01560156
  413360:	01560156 	.word	0x01560156
  413364:	01560156 	.word	0x01560156
  413368:	004d0156 	.word	0x004d0156
  41336c:	007f0156 	.word	0x007f0156
  413370:	2300      	movs	r3, #0
  413372:	2101      	movs	r1, #1
  413374:	469a      	mov	sl, r3
  413376:	910b      	str	r1, [sp, #44]	; 0x2c
  413378:	2800      	cmp	r0, #0
  41337a:	f040 8151 	bne.w	413620 <_strtod_r+0x338>
  41337e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413380:	2a00      	cmp	r2, #0
  413382:	f040 814d 	bne.w	413620 <_strtod_r+0x338>
  413386:	2000      	movs	r0, #0
  413388:	f04f 0800 	mov.w	r8, #0
  41338c:	f04f 0900 	mov.w	r9, #0
  413390:	9519      	str	r5, [sp, #100]	; 0x64
  413392:	9007      	str	r0, [sp, #28]
  413394:	9805      	ldr	r0, [sp, #20]
  413396:	b108      	cbz	r0, 41339c <_strtod_r+0xb4>
  413398:	9b19      	ldr	r3, [sp, #100]	; 0x64
  41339a:	6003      	str	r3, [r0, #0]
  41339c:	9907      	ldr	r1, [sp, #28]
  41339e:	2900      	cmp	r1, #0
  4133a0:	f040 809e 	bne.w	4134e0 <_strtod_r+0x1f8>
  4133a4:	4640      	mov	r0, r8
  4133a6:	4649      	mov	r1, r9
  4133a8:	b01f      	add	sp, #124	; 0x7c
  4133aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4133ae:	2300      	movs	r3, #0
  4133b0:	9307      	str	r3, [sp, #28]
  4133b2:	1c73      	adds	r3, r6, #1
  4133b4:	9319      	str	r3, [sp, #100]	; 0x64
  4133b6:	7874      	ldrb	r4, [r6, #1]
  4133b8:	2c00      	cmp	r4, #0
  4133ba:	d0e4      	beq.n	413386 <_strtod_r+0x9e>
  4133bc:	2c30      	cmp	r4, #48	; 0x30
  4133be:	461e      	mov	r6, r3
  4133c0:	f000 8103 	beq.w	4135ca <_strtod_r+0x2e2>
  4133c4:	2300      	movs	r3, #0
  4133c6:	9606      	str	r6, [sp, #24]
  4133c8:	930a      	str	r3, [sp, #40]	; 0x28
  4133ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4133ce:	2700      	movs	r7, #0
  4133d0:	2b09      	cmp	r3, #9
  4133d2:	46b9      	mov	r9, r7
  4133d4:	463e      	mov	r6, r7
  4133d6:	d81f      	bhi.n	413418 <_strtod_r+0x130>
  4133d8:	9806      	ldr	r0, [sp, #24]
  4133da:	1c43      	adds	r3, r0, #1
  4133dc:	e00f      	b.n	4133fe <_strtod_r+0x116>
  4133de:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4133e2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  4133e6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  4133ea:	9319      	str	r3, [sp, #100]	; 0x64
  4133ec:	4698      	mov	r8, r3
  4133ee:	f813 4b01 	ldrb.w	r4, [r3], #1
  4133f2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4133f6:	2a09      	cmp	r2, #9
  4133f8:	f106 0601 	add.w	r6, r6, #1
  4133fc:	d80e      	bhi.n	41341c <_strtod_r+0x134>
  4133fe:	2e08      	cmp	r6, #8
  413400:	dded      	ble.n	4133de <_strtod_r+0xf6>
  413402:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  413406:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  41340a:	3f30      	subs	r7, #48	; 0x30
  41340c:	e7ed      	b.n	4133ea <_strtod_r+0x102>
  41340e:	9219      	str	r2, [sp, #100]	; 0x64
  413410:	e778      	b.n	413304 <_strtod_r+0x1c>
  413412:	2201      	movs	r2, #1
  413414:	9207      	str	r2, [sp, #28]
  413416:	e7cc      	b.n	4133b2 <_strtod_r+0xca>
  413418:	f8dd 8018 	ldr.w	r8, [sp, #24]
  41341c:	4658      	mov	r0, fp
  41341e:	f7fe ff23 	bl	412268 <_localeconv_r>
  413422:	f8d0 a000 	ldr.w	sl, [r0]
  413426:	4658      	mov	r0, fp
  413428:	f7fe ff1e 	bl	412268 <_localeconv_r>
  41342c:	6800      	ldr	r0, [r0, #0]
  41342e:	f7fa f915 	bl	40d65c <strlen>
  413432:	4651      	mov	r1, sl
  413434:	4602      	mov	r2, r0
  413436:	4640      	mov	r0, r8
  413438:	f7fa f940 	bl	40d6bc <strncmp>
  41343c:	4680      	mov	r8, r0
  41343e:	2800      	cmp	r0, #0
  413440:	f000 8146 	beq.w	4136d0 <_strtod_r+0x3e8>
  413444:	2000      	movs	r0, #0
  413446:	4603      	mov	r3, r0
  413448:	900b      	str	r0, [sp, #44]	; 0x2c
  41344a:	46b2      	mov	sl, r6
  41344c:	f024 0220 	bic.w	r2, r4, #32
  413450:	2a45      	cmp	r2, #69	; 0x45
  413452:	f000 80e1 	beq.w	413618 <_strtod_r+0x330>
  413456:	2100      	movs	r1, #0
  413458:	f1ba 0f00 	cmp.w	sl, #0
  41345c:	d054      	beq.n	413508 <_strtod_r+0x220>
  41345e:	1acb      	subs	r3, r1, r3
  413460:	4648      	mov	r0, r9
  413462:	9308      	str	r3, [sp, #32]
  413464:	f002 f95a 	bl	41571c <__aeabi_ui2d>
  413468:	f1ba 0f10 	cmp.w	sl, #16
  41346c:	bfb4      	ite	lt
  41346e:	46d0      	movlt	r8, sl
  413470:	f04f 0810 	movge.w	r8, #16
  413474:	2e00      	cmp	r6, #0
  413476:	bf08      	it	eq
  413478:	4656      	moveq	r6, sl
  41347a:	f1b8 0f09 	cmp.w	r8, #9
  41347e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413482:	dd13      	ble.n	4134ac <_strtod_r+0x1c4>
  413484:	4ba0      	ldr	r3, [pc, #640]	; (413708 <_strtod_r+0x420>)
  413486:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  41348a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  41348e:	f002 f9bb 	bl	415808 <__aeabi_dmul>
  413492:	4604      	mov	r4, r0
  413494:	4638      	mov	r0, r7
  413496:	460d      	mov	r5, r1
  413498:	f002 f940 	bl	41571c <__aeabi_ui2d>
  41349c:	4602      	mov	r2, r0
  41349e:	460b      	mov	r3, r1
  4134a0:	4620      	mov	r0, r4
  4134a2:	4629      	mov	r1, r5
  4134a4:	f001 fffe 	bl	4154a4 <__adddf3>
  4134a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4134ac:	f1ba 0f0f 	cmp.w	sl, #15
  4134b0:	f300 812c 	bgt.w	41370c <_strtod_r+0x424>
  4134b4:	9908      	ldr	r1, [sp, #32]
  4134b6:	2900      	cmp	r1, #0
  4134b8:	f000 80ab 	beq.w	413612 <_strtod_r+0x32a>
  4134bc:	f340 8580 	ble.w	413fc0 <_strtod_r+0xcd8>
  4134c0:	9a08      	ldr	r2, [sp, #32]
  4134c2:	2a16      	cmp	r2, #22
  4134c4:	f300 84ef 	bgt.w	413ea6 <_strtod_r+0xbbe>
  4134c8:	4b8f      	ldr	r3, [pc, #572]	; (413708 <_strtod_r+0x420>)
  4134ca:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  4134ce:	e9da 0100 	ldrd	r0, r1, [sl]
  4134d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4134d6:	f002 f997 	bl	415808 <__aeabi_dmul>
  4134da:	4680      	mov	r8, r0
  4134dc:	4689      	mov	r9, r1
  4134de:	e759      	b.n	413394 <_strtod_r+0xac>
  4134e0:	4640      	mov	r0, r8
  4134e2:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  4134e6:	b01f      	add	sp, #124	; 0x7c
  4134e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4134ec:	4633      	mov	r3, r6
  4134ee:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  4134f2:	2a08      	cmp	r2, #8
  4134f4:	f240 833c 	bls.w	413b70 <_strtod_r+0x888>
  4134f8:	f024 0220 	bic.w	r2, r4, #32
  4134fc:	2a45      	cmp	r2, #69	; 0x45
  4134fe:	4618      	mov	r0, r3
  413500:	f43f af36 	beq.w	413370 <_strtod_r+0x88>
  413504:	2101      	movs	r1, #1
  413506:	910b      	str	r1, [sp, #44]	; 0x2c
  413508:	2800      	cmp	r0, #0
  41350a:	d171      	bne.n	4135f0 <_strtod_r+0x308>
  41350c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41350e:	2b00      	cmp	r3, #0
  413510:	d16e      	bne.n	4135f0 <_strtod_r+0x308>
  413512:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413514:	2800      	cmp	r0, #0
  413516:	f47f af36 	bne.w	413386 <_strtod_r+0x9e>
  41351a:	3c49      	subs	r4, #73	; 0x49
  41351c:	2c25      	cmp	r4, #37	; 0x25
  41351e:	f63f af32 	bhi.w	413386 <_strtod_r+0x9e>
  413522:	a101      	add	r1, pc, #4	; (adr r1, 413528 <_strtod_r+0x240>)
  413524:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  413528:	00413beb 	.word	0x00413beb
  41352c:	00413387 	.word	0x00413387
  413530:	00413387 	.word	0x00413387
  413534:	00413387 	.word	0x00413387
  413538:	00413387 	.word	0x00413387
  41353c:	00413bb3 	.word	0x00413bb3
  413540:	00413387 	.word	0x00413387
  413544:	00413387 	.word	0x00413387
  413548:	00413387 	.word	0x00413387
  41354c:	00413387 	.word	0x00413387
  413550:	00413387 	.word	0x00413387
  413554:	00413387 	.word	0x00413387
  413558:	00413387 	.word	0x00413387
  41355c:	00413387 	.word	0x00413387
  413560:	00413387 	.word	0x00413387
  413564:	00413387 	.word	0x00413387
  413568:	00413387 	.word	0x00413387
  41356c:	00413387 	.word	0x00413387
  413570:	00413387 	.word	0x00413387
  413574:	00413387 	.word	0x00413387
  413578:	00413387 	.word	0x00413387
  41357c:	00413387 	.word	0x00413387
  413580:	00413387 	.word	0x00413387
  413584:	00413387 	.word	0x00413387
  413588:	00413387 	.word	0x00413387
  41358c:	00413387 	.word	0x00413387
  413590:	00413387 	.word	0x00413387
  413594:	00413387 	.word	0x00413387
  413598:	00413387 	.word	0x00413387
  41359c:	00413387 	.word	0x00413387
  4135a0:	00413387 	.word	0x00413387
  4135a4:	00413387 	.word	0x00413387
  4135a8:	00413beb 	.word	0x00413beb
  4135ac:	00413387 	.word	0x00413387
  4135b0:	00413387 	.word	0x00413387
  4135b4:	00413387 	.word	0x00413387
  4135b8:	00413387 	.word	0x00413387
  4135bc:	00413bb3 	.word	0x00413bb3
  4135c0:	2000      	movs	r0, #0
  4135c2:	2c30      	cmp	r4, #48	; 0x30
  4135c4:	9007      	str	r0, [sp, #28]
  4135c6:	f47f aefd 	bne.w	4133c4 <_strtod_r+0xdc>
  4135ca:	7873      	ldrb	r3, [r6, #1]
  4135cc:	2b58      	cmp	r3, #88	; 0x58
  4135ce:	f000 8336 	beq.w	413c3e <_strtod_r+0x956>
  4135d2:	2b78      	cmp	r3, #120	; 0x78
  4135d4:	f000 8333 	beq.w	413c3e <_strtod_r+0x956>
  4135d8:	3601      	adds	r6, #1
  4135da:	9619      	str	r6, [sp, #100]	; 0x64
  4135dc:	4633      	mov	r3, r6
  4135de:	f816 4b01 	ldrb.w	r4, [r6], #1
  4135e2:	2c30      	cmp	r4, #48	; 0x30
  4135e4:	d0f9      	beq.n	4135da <_strtod_r+0x2f2>
  4135e6:	b11c      	cbz	r4, 4135f0 <_strtod_r+0x308>
  4135e8:	9306      	str	r3, [sp, #24]
  4135ea:	2301      	movs	r3, #1
  4135ec:	930a      	str	r3, [sp, #40]	; 0x28
  4135ee:	e6ec      	b.n	4133ca <_strtod_r+0xe2>
  4135f0:	f04f 0800 	mov.w	r8, #0
  4135f4:	f04f 0900 	mov.w	r9, #0
  4135f8:	e6cc      	b.n	413394 <_strtod_r+0xac>
  4135fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4135fe:	f04f 30ff 	mov.w	r0, #4294967295
  413602:	9303      	str	r3, [sp, #12]
  413604:	9002      	str	r0, [sp, #8]
  413606:	0722      	lsls	r2, r4, #28
  413608:	bf42      	ittt	mi
  41360a:	9903      	ldrmi	r1, [sp, #12]
  41360c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  413610:	9103      	strmi	r1, [sp, #12]
  413612:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413616:	e6bd      	b.n	413394 <_strtod_r+0xac>
  413618:	f1ba 0f00 	cmp.w	sl, #0
  41361c:	f43f aeac 	beq.w	413378 <_strtod_r+0x90>
  413620:	9d19      	ldr	r5, [sp, #100]	; 0x64
  413622:	1c6a      	adds	r2, r5, #1
  413624:	9219      	str	r2, [sp, #100]	; 0x64
  413626:	786c      	ldrb	r4, [r5, #1]
  413628:	2c2b      	cmp	r4, #43	; 0x2b
  41362a:	f000 824b 	beq.w	413ac4 <_strtod_r+0x7dc>
  41362e:	2c2d      	cmp	r4, #45	; 0x2d
  413630:	f040 8245 	bne.w	413abe <_strtod_r+0x7d6>
  413634:	2101      	movs	r1, #1
  413636:	9108      	str	r1, [sp, #32]
  413638:	1caa      	adds	r2, r5, #2
  41363a:	9219      	str	r2, [sp, #100]	; 0x64
  41363c:	78ac      	ldrb	r4, [r5, #2]
  41363e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  413642:	2a09      	cmp	r2, #9
  413644:	f200 81e5 	bhi.w	413a12 <_strtod_r+0x72a>
  413648:	2c30      	cmp	r4, #48	; 0x30
  41364a:	d106      	bne.n	41365a <_strtod_r+0x372>
  41364c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  41364e:	3201      	adds	r2, #1
  413650:	9219      	str	r2, [sp, #100]	; 0x64
  413652:	f812 4b01 	ldrb.w	r4, [r2], #1
  413656:	2c30      	cmp	r4, #48	; 0x30
  413658:	d0fa      	beq.n	413650 <_strtod_r+0x368>
  41365a:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  41365e:	2a08      	cmp	r2, #8
  413660:	f63f aef9 	bhi.w	413456 <_strtod_r+0x16e>
  413664:	9a19      	ldr	r2, [sp, #100]	; 0x64
  413666:	920e      	str	r2, [sp, #56]	; 0x38
  413668:	f102 0801 	add.w	r8, r2, #1
  41366c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  413670:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  413674:	7854      	ldrb	r4, [r2, #1]
  413676:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41367a:	2a09      	cmp	r2, #9
  41367c:	d812      	bhi.n	4136a4 <_strtod_r+0x3bc>
  41367e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  413680:	f102 0c02 	add.w	ip, r2, #2
  413684:	4662      	mov	r2, ip
  413686:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  41368a:	9219      	str	r2, [sp, #100]	; 0x64
  41368c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  413690:	4690      	mov	r8, r2
  413692:	f812 4b01 	ldrb.w	r4, [r2], #1
  413696:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  41369a:	f1bc 0f09 	cmp.w	ip, #9
  41369e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  4136a2:	d9f0      	bls.n	413686 <_strtod_r+0x39e>
  4136a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4136a6:	ebc2 0808 	rsb	r8, r2, r8
  4136aa:	f1b8 0f08 	cmp.w	r8, #8
  4136ae:	f300 83f2 	bgt.w	413e96 <_strtod_r+0xbae>
  4136b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
  4136b6:	4291      	cmp	r1, r2
  4136b8:	bfa8      	it	ge
  4136ba:	4611      	movge	r1, r2
  4136bc:	9a08      	ldr	r2, [sp, #32]
  4136be:	2a00      	cmp	r2, #0
  4136c0:	f43f aeca 	beq.w	413458 <_strtod_r+0x170>
  4136c4:	4249      	negs	r1, r1
  4136c6:	f1ba 0f00 	cmp.w	sl, #0
  4136ca:	f47f aec8 	bne.w	41345e <_strtod_r+0x176>
  4136ce:	e71b      	b.n	413508 <_strtod_r+0x220>
  4136d0:	4658      	mov	r0, fp
  4136d2:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4136d4:	f7fe fdc8 	bl	412268 <_localeconv_r>
  4136d8:	6800      	ldr	r0, [r0, #0]
  4136da:	f7f9 ffbf 	bl	40d65c <strlen>
  4136de:	1823      	adds	r3, r4, r0
  4136e0:	9319      	str	r3, [sp, #100]	; 0x64
  4136e2:	5c24      	ldrb	r4, [r4, r0]
  4136e4:	2e00      	cmp	r6, #0
  4136e6:	f040 81c3 	bne.w	413a70 <_strtod_r+0x788>
  4136ea:	2c30      	cmp	r4, #48	; 0x30
  4136ec:	f47f aefe 	bne.w	4134ec <_strtod_r+0x204>
  4136f0:	461a      	mov	r2, r3
  4136f2:	4633      	mov	r3, r6
  4136f4:	e000      	b.n	4136f8 <_strtod_r+0x410>
  4136f6:	460a      	mov	r2, r1
  4136f8:	1c51      	adds	r1, r2, #1
  4136fa:	9119      	str	r1, [sp, #100]	; 0x64
  4136fc:	7854      	ldrb	r4, [r2, #1]
  4136fe:	2c30      	cmp	r4, #48	; 0x30
  413700:	f103 0301 	add.w	r3, r3, #1
  413704:	d0f7      	beq.n	4136f6 <_strtod_r+0x40e>
  413706:	e6f2      	b.n	4134ee <_strtod_r+0x206>
  413708:	00416f88 	.word	0x00416f88
  41370c:	9908      	ldr	r1, [sp, #32]
  41370e:	ebc8 080a 	rsb	r8, r8, sl
  413712:	4488      	add	r8, r1
  413714:	f1b8 0f00 	cmp.w	r8, #0
  413718:	f340 8369 	ble.w	413dee <_strtod_r+0xb06>
  41371c:	f018 030f 	ands.w	r3, r8, #15
  413720:	d00a      	beq.n	413738 <_strtod_r+0x450>
  413722:	49a7      	ldr	r1, [pc, #668]	; (4139c0 <_strtod_r+0x6d8>)
  413724:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  413728:	e9d1 0100 	ldrd	r0, r1, [r1]
  41372c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413730:	f002 f86a 	bl	415808 <__aeabi_dmul>
  413734:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413738:	f038 040f 	bics.w	r4, r8, #15
  41373c:	f040 81c8 	bne.w	413ad0 <_strtod_r+0x7e8>
  413740:	2200      	movs	r2, #0
  413742:	920a      	str	r2, [sp, #40]	; 0x28
  413744:	f8cd 9000 	str.w	r9, [sp]
  413748:	9906      	ldr	r1, [sp, #24]
  41374a:	4632      	mov	r2, r6
  41374c:	4653      	mov	r3, sl
  41374e:	4658      	mov	r0, fp
  413750:	f7fe ff7a 	bl	412648 <__s2b>
  413754:	900b      	str	r0, [sp, #44]	; 0x2c
  413756:	2800      	cmp	r0, #0
  413758:	f000 82d5 	beq.w	413d06 <_strtod_r+0xa1e>
  41375c:	9908      	ldr	r1, [sp, #32]
  41375e:	2200      	movs	r2, #0
  413760:	2900      	cmp	r1, #0
  413762:	f1c1 0300 	rsb	r3, r1, #0
  413766:	bfa8      	it	ge
  413768:	4613      	movge	r3, r2
  41376a:	930e      	str	r3, [sp, #56]	; 0x38
  41376c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  413770:	9206      	str	r2, [sp, #24]
  413772:	930f      	str	r3, [sp, #60]	; 0x3c
  413774:	4617      	mov	r7, r2
  413776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  413778:	4658      	mov	r0, fp
  41377a:	6851      	ldr	r1, [r2, #4]
  41377c:	f7fe fee8 	bl	412550 <_Balloc>
  413780:	4606      	mov	r6, r0
  413782:	2800      	cmp	r0, #0
  413784:	f000 82cd 	beq.w	413d22 <_strtod_r+0xa3a>
  413788:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41378a:	6903      	ldr	r3, [r0, #16]
  41378c:	1c9a      	adds	r2, r3, #2
  41378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413790:	0092      	lsls	r2, r2, #2
  413792:	f103 010c 	add.w	r1, r3, #12
  413796:	f106 000c 	add.w	r0, r6, #12
  41379a:	f7f9 fb81 	bl	40cea0 <memcpy>
  41379e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4137a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4137a6:	a81b      	add	r0, sp, #108	; 0x6c
  4137a8:	a91c      	add	r1, sp, #112	; 0x70
  4137aa:	e88d 0003 	stmia.w	sp, {r0, r1}
  4137ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4137b2:	4658      	mov	r0, fp
  4137b4:	f7ff fa3e 	bl	412c34 <__d2b>
  4137b8:	901a      	str	r0, [sp, #104]	; 0x68
  4137ba:	2800      	cmp	r0, #0
  4137bc:	f000 8412 	beq.w	413fe4 <_strtod_r+0xcfc>
  4137c0:	4658      	mov	r0, fp
  4137c2:	2101      	movs	r1, #1
  4137c4:	f7fe ffda 	bl	41277c <__i2b>
  4137c8:	4607      	mov	r7, r0
  4137ca:	2800      	cmp	r0, #0
  4137cc:	f000 82a9 	beq.w	413d22 <_strtod_r+0xa3a>
  4137d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4137d2:	2b00      	cmp	r3, #0
  4137d4:	f2c0 8110 	blt.w	4139f8 <_strtod_r+0x710>
  4137d8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4137dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4137de:	4499      	add	r9, r3
  4137e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4137e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4137e4:	1a1b      	subs	r3, r3, r0
  4137e6:	4413      	add	r3, r2
  4137e8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  4137ec:	428b      	cmp	r3, r1
  4137ee:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  4137f2:	f280 80da 	bge.w	4139aa <_strtod_r+0x6c2>
  4137f6:	1aca      	subs	r2, r1, r3
  4137f8:	2a1f      	cmp	r2, #31
  4137fa:	ebc2 0a0a 	rsb	sl, r2, sl
  4137fe:	f300 8100 	bgt.w	413a02 <_strtod_r+0x71a>
  413802:	f04f 0801 	mov.w	r8, #1
  413806:	2300      	movs	r3, #0
  413808:	fa08 f802 	lsl.w	r8, r8, r2
  41380c:	930c      	str	r3, [sp, #48]	; 0x30
  41380e:	980a      	ldr	r0, [sp, #40]	; 0x28
  413810:	4455      	add	r5, sl
  413812:	44ca      	add	sl, r9
  413814:	45ca      	cmp	sl, r9
  413816:	bfb4      	ite	lt
  413818:	4653      	movlt	r3, sl
  41381a:	464b      	movge	r3, r9
  41381c:	4405      	add	r5, r0
  41381e:	42ab      	cmp	r3, r5
  413820:	bfa8      	it	ge
  413822:	462b      	movge	r3, r5
  413824:	2b00      	cmp	r3, #0
  413826:	dd04      	ble.n	413832 <_strtod_r+0x54a>
  413828:	ebc3 0a0a 	rsb	sl, r3, sl
  41382c:	1aed      	subs	r5, r5, r3
  41382e:	ebc3 0909 	rsb	r9, r3, r9
  413832:	990e      	ldr	r1, [sp, #56]	; 0x38
  413834:	b1b1      	cbz	r1, 413864 <_strtod_r+0x57c>
  413836:	4639      	mov	r1, r7
  413838:	4658      	mov	r0, fp
  41383a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41383c:	f7ff f846 	bl	4128cc <__pow5mult>
  413840:	4607      	mov	r7, r0
  413842:	2800      	cmp	r0, #0
  413844:	f000 826d 	beq.w	413d22 <_strtod_r+0xa3a>
  413848:	4658      	mov	r0, fp
  41384a:	4639      	mov	r1, r7
  41384c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  41384e:	f7fe ff9f 	bl	412790 <__multiply>
  413852:	4604      	mov	r4, r0
  413854:	2800      	cmp	r0, #0
  413856:	f000 8264 	beq.w	413d22 <_strtod_r+0xa3a>
  41385a:	4658      	mov	r0, fp
  41385c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41385e:	f7fe fe9d 	bl	41259c <_Bfree>
  413862:	941a      	str	r4, [sp, #104]	; 0x68
  413864:	f1ba 0f00 	cmp.w	sl, #0
  413868:	dd08      	ble.n	41387c <_strtod_r+0x594>
  41386a:	4652      	mov	r2, sl
  41386c:	4658      	mov	r0, fp
  41386e:	991a      	ldr	r1, [sp, #104]	; 0x68
  413870:	f7ff f87a 	bl	412968 <__lshift>
  413874:	901a      	str	r0, [sp, #104]	; 0x68
  413876:	2800      	cmp	r0, #0
  413878:	f000 83b4 	beq.w	413fe4 <_strtod_r+0xcfc>
  41387c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41387e:	b142      	cbz	r2, 413892 <_strtod_r+0x5aa>
  413880:	4631      	mov	r1, r6
  413882:	4658      	mov	r0, fp
  413884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  413886:	f7ff f821 	bl	4128cc <__pow5mult>
  41388a:	4606      	mov	r6, r0
  41388c:	2800      	cmp	r0, #0
  41388e:	f000 8248 	beq.w	413d22 <_strtod_r+0xa3a>
  413892:	2d00      	cmp	r5, #0
  413894:	dd08      	ble.n	4138a8 <_strtod_r+0x5c0>
  413896:	4631      	mov	r1, r6
  413898:	462a      	mov	r2, r5
  41389a:	4658      	mov	r0, fp
  41389c:	f7ff f864 	bl	412968 <__lshift>
  4138a0:	4606      	mov	r6, r0
  4138a2:	2800      	cmp	r0, #0
  4138a4:	f000 823d 	beq.w	413d22 <_strtod_r+0xa3a>
  4138a8:	f1b9 0f00 	cmp.w	r9, #0
  4138ac:	dd08      	ble.n	4138c0 <_strtod_r+0x5d8>
  4138ae:	4639      	mov	r1, r7
  4138b0:	464a      	mov	r2, r9
  4138b2:	4658      	mov	r0, fp
  4138b4:	f7ff f858 	bl	412968 <__lshift>
  4138b8:	4607      	mov	r7, r0
  4138ba:	2800      	cmp	r0, #0
  4138bc:	f000 8231 	beq.w	413d22 <_strtod_r+0xa3a>
  4138c0:	4658      	mov	r0, fp
  4138c2:	991a      	ldr	r1, [sp, #104]	; 0x68
  4138c4:	4632      	mov	r2, r6
  4138c6:	f7ff f8d1 	bl	412a6c <__mdiff>
  4138ca:	9006      	str	r0, [sp, #24]
  4138cc:	2800      	cmp	r0, #0
  4138ce:	f000 8228 	beq.w	413d22 <_strtod_r+0xa3a>
  4138d2:	9906      	ldr	r1, [sp, #24]
  4138d4:	2300      	movs	r3, #0
  4138d6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  4138da:	60cb      	str	r3, [r1, #12]
  4138dc:	4639      	mov	r1, r7
  4138de:	f7ff f8a1 	bl	412a24 <__mcmp>
  4138e2:	2800      	cmp	r0, #0
  4138e4:	f2c0 83cb 	blt.w	41407e <_strtod_r+0xd96>
  4138e8:	f000 8388 	beq.w	413ffc <_strtod_r+0xd14>
  4138ec:	9806      	ldr	r0, [sp, #24]
  4138ee:	4639      	mov	r1, r7
  4138f0:	f7ff f9fe 	bl	412cf0 <__ratio>
  4138f4:	2200      	movs	r2, #0
  4138f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4138fa:	4604      	mov	r4, r0
  4138fc:	460d      	mov	r5, r1
  4138fe:	f002 f9ff 	bl	415d00 <__aeabi_dcmple>
  413902:	2800      	cmp	r0, #0
  413904:	d064      	beq.n	4139d0 <_strtod_r+0x6e8>
  413906:	f1ba 0f00 	cmp.w	sl, #0
  41390a:	f000 808e 	beq.w	413a2a <_strtod_r+0x742>
  41390e:	4d2d      	ldr	r5, [pc, #180]	; (4139c4 <_strtod_r+0x6dc>)
  413910:	f8dd 900c 	ldr.w	r9, [sp, #12]
  413914:	2400      	movs	r4, #0
  413916:	4622      	mov	r2, r4
  413918:	462b      	mov	r3, r5
  41391a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  41391e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4139cc <_strtod_r+0x6e4>
  413922:	4b29      	ldr	r3, [pc, #164]	; (4139c8 <_strtod_r+0x6e0>)
  413924:	ea09 0808 	and.w	r8, r9, r8
  413928:	4598      	cmp	r8, r3
  41392a:	f000 81bf 	beq.w	413cac <_strtod_r+0x9c4>
  41392e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413930:	b182      	cbz	r2, 413954 <_strtod_r+0x66c>
  413932:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  413936:	d80d      	bhi.n	413954 <_strtod_r+0x66c>
  413938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41393c:	a31e      	add	r3, pc, #120	; (adr r3, 4139b8 <_strtod_r+0x6d0>)
  41393e:	e9d3 2300 	ldrd	r2, r3, [r3]
  413942:	f002 f9dd 	bl	415d00 <__aeabi_dcmple>
  413946:	2800      	cmp	r0, #0
  413948:	f040 811b 	bne.w	413b82 <_strtod_r+0x89a>
  41394c:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  413950:	ebc8 0503 	rsb	r5, r8, r3
  413954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413958:	f7ff f8f2 	bl	412b40 <__ulp>
  41395c:	4602      	mov	r2, r0
  41395e:	460b      	mov	r3, r1
  413960:	4620      	mov	r0, r4
  413962:	4629      	mov	r1, r5
  413964:	f001 ff50 	bl	415808 <__aeabi_dmul>
  413968:	4602      	mov	r2, r0
  41396a:	460b      	mov	r3, r1
  41396c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413970:	f001 fd98 	bl	4154a4 <__adddf3>
  413974:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413978:	9c03      	ldr	r4, [sp, #12]
  41397a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41397c:	b921      	cbnz	r1, 413988 <_strtod_r+0x6a0>
  41397e:	4b13      	ldr	r3, [pc, #76]	; (4139cc <_strtod_r+0x6e4>)
  413980:	4023      	ands	r3, r4
  413982:	4598      	cmp	r8, r3
  413984:	f000 81ed 	beq.w	413d62 <_strtod_r+0xa7a>
  413988:	4658      	mov	r0, fp
  41398a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41398c:	f7fe fe06 	bl	41259c <_Bfree>
  413990:	4658      	mov	r0, fp
  413992:	4631      	mov	r1, r6
  413994:	f7fe fe02 	bl	41259c <_Bfree>
  413998:	4658      	mov	r0, fp
  41399a:	4639      	mov	r1, r7
  41399c:	f7fe fdfe 	bl	41259c <_Bfree>
  4139a0:	4658      	mov	r0, fp
  4139a2:	9906      	ldr	r1, [sp, #24]
  4139a4:	f7fe fdfa 	bl	41259c <_Bfree>
  4139a8:	e6e5      	b.n	413776 <_strtod_r+0x48e>
  4139aa:	2300      	movs	r3, #0
  4139ac:	930c      	str	r3, [sp, #48]	; 0x30
  4139ae:	f04f 0801 	mov.w	r8, #1
  4139b2:	e72c      	b.n	41380e <_strtod_r+0x526>
  4139b4:	f3af 8000 	nop.w
  4139b8:	ffc00000 	.word	0xffc00000
  4139bc:	41dfffff 	.word	0x41dfffff
  4139c0:	00416f88 	.word	0x00416f88
  4139c4:	3ff00000 	.word	0x3ff00000
  4139c8:	7fe00000 	.word	0x7fe00000
  4139cc:	7ff00000 	.word	0x7ff00000
  4139d0:	4620      	mov	r0, r4
  4139d2:	4629      	mov	r1, r5
  4139d4:	2200      	movs	r2, #0
  4139d6:	4ba8      	ldr	r3, [pc, #672]	; (413c78 <_strtod_r+0x990>)
  4139d8:	f001 ff16 	bl	415808 <__aeabi_dmul>
  4139dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4139e0:	f1ba 0f00 	cmp.w	sl, #0
  4139e4:	d11c      	bne.n	413a20 <_strtod_r+0x738>
  4139e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4139ea:	9010      	str	r0, [sp, #64]	; 0x40
  4139ec:	9111      	str	r1, [sp, #68]	; 0x44
  4139ee:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  4139f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4139f6:	e792      	b.n	41391e <_strtod_r+0x636>
  4139f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4139fa:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4139fe:	1acd      	subs	r5, r1, r3
  413a00:	e6ee      	b.n	4137e0 <_strtod_r+0x4f8>
  413a02:	4c9e      	ldr	r4, [pc, #632]	; (413c7c <_strtod_r+0x994>)
  413a04:	f04f 0801 	mov.w	r8, #1
  413a08:	1ae4      	subs	r4, r4, r3
  413a0a:	fa08 f404 	lsl.w	r4, r8, r4
  413a0e:	940c      	str	r4, [sp, #48]	; 0x30
  413a10:	e6fd      	b.n	41380e <_strtod_r+0x526>
  413a12:	9519      	str	r5, [sp, #100]	; 0x64
  413a14:	2100      	movs	r1, #0
  413a16:	f1ba 0f00 	cmp.w	sl, #0
  413a1a:	f47f ad20 	bne.w	41345e <_strtod_r+0x176>
  413a1e:	e573      	b.n	413508 <_strtod_r+0x220>
  413a20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  413a24:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  413a28:	e7e1      	b.n	4139ee <_strtod_r+0x706>
  413a2a:	9b02      	ldr	r3, [sp, #8]
  413a2c:	2b00      	cmp	r3, #0
  413a2e:	f040 8092 	bne.w	413b56 <_strtod_r+0x86e>
  413a32:	9803      	ldr	r0, [sp, #12]
  413a34:	f3c0 0313 	ubfx	r3, r0, #0, #20
  413a38:	4681      	mov	r9, r0
  413a3a:	2b00      	cmp	r3, #0
  413a3c:	f040 8091 	bne.w	413b62 <_strtod_r+0x87a>
  413a40:	4620      	mov	r0, r4
  413a42:	4629      	mov	r1, r5
  413a44:	2200      	movs	r2, #0
  413a46:	4b8e      	ldr	r3, [pc, #568]	; (413c80 <_strtod_r+0x998>)
  413a48:	f002 f950 	bl	415cec <__aeabi_dcmplt>
  413a4c:	2800      	cmp	r0, #0
  413a4e:	f040 8356 	bne.w	4140fe <_strtod_r+0xe16>
  413a52:	4620      	mov	r0, r4
  413a54:	4629      	mov	r1, r5
  413a56:	2200      	movs	r2, #0
  413a58:	4b87      	ldr	r3, [pc, #540]	; (413c78 <_strtod_r+0x990>)
  413a5a:	f001 fed5 	bl	415808 <__aeabi_dmul>
  413a5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413a62:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  413a66:	9016      	str	r0, [sp, #88]	; 0x58
  413a68:	9117      	str	r1, [sp, #92]	; 0x5c
  413a6a:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  413a6e:	e756      	b.n	41391e <_strtod_r+0x636>
  413a70:	4640      	mov	r0, r8
  413a72:	4643      	mov	r3, r8
  413a74:	46b2      	mov	sl, r6
  413a76:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  413a7a:	2a09      	cmp	r2, #9
  413a7c:	d825      	bhi.n	413aca <_strtod_r+0x7e2>
  413a7e:	9c19      	ldr	r4, [sp, #100]	; 0x64
  413a80:	3001      	adds	r0, #1
  413a82:	2a00      	cmp	r2, #0
  413a84:	f000 81af 	beq.w	413de6 <_strtod_r+0xafe>
  413a88:	2801      	cmp	r0, #1
  413a8a:	4403      	add	r3, r0
  413a8c:	f000 81a0 	beq.w	413dd0 <_strtod_r+0xae8>
  413a90:	4450      	add	r0, sl
  413a92:	3801      	subs	r0, #1
  413a94:	e006      	b.n	413aa4 <_strtod_r+0x7bc>
  413a96:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  413a9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
  413a9e:	4582      	cmp	sl, r0
  413aa0:	f000 8197 	beq.w	413dd2 <_strtod_r+0xaea>
  413aa4:	f10a 0a01 	add.w	sl, sl, #1
  413aa8:	f10a 31ff 	add.w	r1, sl, #4294967295
  413aac:	2908      	cmp	r1, #8
  413aae:	ddf2      	ble.n	413a96 <_strtod_r+0x7ae>
  413ab0:	f1ba 0f10 	cmp.w	sl, #16
  413ab4:	bfdc      	itt	le
  413ab6:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  413aba:	007f      	lslle	r7, r7, #1
  413abc:	e7ef      	b.n	413a9e <_strtod_r+0x7b6>
  413abe:	2200      	movs	r2, #0
  413ac0:	9208      	str	r2, [sp, #32]
  413ac2:	e5bc      	b.n	41363e <_strtod_r+0x356>
  413ac4:	2100      	movs	r1, #0
  413ac6:	9108      	str	r1, [sp, #32]
  413ac8:	e5b6      	b.n	413638 <_strtod_r+0x350>
  413aca:	2201      	movs	r2, #1
  413acc:	920b      	str	r2, [sp, #44]	; 0x2c
  413ace:	e4bd      	b.n	41344c <_strtod_r+0x164>
  413ad0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  413ad4:	f300 8117 	bgt.w	413d06 <_strtod_r+0xa1e>
  413ad8:	1124      	asrs	r4, r4, #4
  413ada:	2c01      	cmp	r4, #1
  413adc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 413ca8 <_strtod_r+0x9c0>
  413ae0:	f340 832a 	ble.w	414138 <_strtod_r+0xe50>
  413ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413ae8:	4645      	mov	r5, r8
  413aea:	2700      	movs	r7, #0
  413aec:	f014 0f01 	tst.w	r4, #1
  413af0:	f107 0701 	add.w	r7, r7, #1
  413af4:	ea4f 0464 	mov.w	r4, r4, asr #1
  413af8:	d003      	beq.n	413b02 <_strtod_r+0x81a>
  413afa:	e9d5 2300 	ldrd	r2, r3, [r5]
  413afe:	f001 fe83 	bl	415808 <__aeabi_dmul>
  413b02:	2c01      	cmp	r4, #1
  413b04:	f105 0508 	add.w	r5, r5, #8
  413b08:	dcf0      	bgt.n	413aec <_strtod_r+0x804>
  413b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413b0e:	9b03      	ldr	r3, [sp, #12]
  413b10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  413b14:	9303      	str	r3, [sp, #12]
  413b16:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  413b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
  413b22:	f001 fe71 	bl	415808 <__aeabi_dmul>
  413b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413b2a:	9803      	ldr	r0, [sp, #12]
  413b2c:	4a55      	ldr	r2, [pc, #340]	; (413c84 <_strtod_r+0x99c>)
  413b2e:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  413b32:	0d1b      	lsrs	r3, r3, #20
  413b34:	051b      	lsls	r3, r3, #20
  413b36:	4293      	cmp	r3, r2
  413b38:	f200 80e5 	bhi.w	413d06 <_strtod_r+0xa1e>
  413b3c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  413b40:	4293      	cmp	r3, r2
  413b42:	f240 82d5 	bls.w	4140f0 <_strtod_r+0xe08>
  413b46:	4950      	ldr	r1, [pc, #320]	; (413c88 <_strtod_r+0x9a0>)
  413b48:	9103      	str	r1, [sp, #12]
  413b4a:	2200      	movs	r2, #0
  413b4c:	f04f 33ff 	mov.w	r3, #4294967295
  413b50:	920a      	str	r2, [sp, #40]	; 0x28
  413b52:	9302      	str	r3, [sp, #8]
  413b54:	e5f6      	b.n	413744 <_strtod_r+0x45c>
  413b56:	9902      	ldr	r1, [sp, #8]
  413b58:	f8dd 900c 	ldr.w	r9, [sp, #12]
  413b5c:	2901      	cmp	r1, #1
  413b5e:	f000 81c9 	beq.w	413ef4 <_strtod_r+0xc0c>
  413b62:	4947      	ldr	r1, [pc, #284]	; (413c80 <_strtod_r+0x998>)
  413b64:	4d49      	ldr	r5, [pc, #292]	; (413c8c <_strtod_r+0x9a4>)
  413b66:	2000      	movs	r0, #0
  413b68:	2400      	movs	r4, #0
  413b6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413b6e:	e6d6      	b.n	41391e <_strtod_r+0x636>
  413b70:	9919      	ldr	r1, [sp, #100]	; 0x64
  413b72:	9106      	str	r1, [sp, #24]
  413b74:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  413b78:	f04f 0a00 	mov.w	sl, #0
  413b7c:	460c      	mov	r4, r1
  413b7e:	2001      	movs	r0, #1
  413b80:	e77f      	b.n	413a82 <_strtod_r+0x79a>
  413b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413b86:	f002 f901 	bl	415d8c <__aeabi_d2uiz>
  413b8a:	2800      	cmp	r0, #0
  413b8c:	f000 81ad 	beq.w	413eea <_strtod_r+0xc02>
  413b90:	f001 fdc4 	bl	41571c <__aeabi_ui2d>
  413b94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413b98:	f1ba 0f00 	cmp.w	sl, #0
  413b9c:	f040 81a0 	bne.w	413ee0 <_strtod_r+0xbf8>
  413ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413ba2:	990c      	ldr	r1, [sp, #48]	; 0x30
  413ba4:	9114      	str	r1, [sp, #80]	; 0x50
  413ba6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  413baa:	9215      	str	r2, [sp, #84]	; 0x54
  413bac:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  413bb0:	e6cc      	b.n	41394c <_strtod_r+0x664>
  413bb2:	4837      	ldr	r0, [pc, #220]	; (413c90 <_strtod_r+0x9a8>)
  413bb4:	9919      	ldr	r1, [sp, #100]	; 0x64
  413bb6:	e009      	b.n	413bcc <_strtod_r+0x8e4>
  413bb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  413bbc:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  413bc0:	2c19      	cmp	r4, #25
  413bc2:	bf98      	it	ls
  413bc4:	3320      	addls	r3, #32
  413bc6:	4293      	cmp	r3, r2
  413bc8:	f47f abdd 	bne.w	413386 <_strtod_r+0x9e>
  413bcc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  413bd0:	2a00      	cmp	r2, #0
  413bd2:	d1f1      	bne.n	413bb8 <_strtod_r+0x8d0>
  413bd4:	1c4b      	adds	r3, r1, #1
  413bd6:	9319      	str	r3, [sp, #100]	; 0x64
  413bd8:	784b      	ldrb	r3, [r1, #1]
  413bda:	2b28      	cmp	r3, #40	; 0x28
  413bdc:	f000 82e2 	beq.w	4141a4 <_strtod_r+0xebc>
  413be0:	4a2c      	ldr	r2, [pc, #176]	; (413c94 <_strtod_r+0x9ac>)
  413be2:	9203      	str	r2, [sp, #12]
  413be4:	2300      	movs	r3, #0
  413be6:	9302      	str	r3, [sp, #8]
  413be8:	e513      	b.n	413612 <_strtod_r+0x32a>
  413bea:	482b      	ldr	r0, [pc, #172]	; (413c98 <_strtod_r+0x9b0>)
  413bec:	9919      	ldr	r1, [sp, #100]	; 0x64
  413bee:	e009      	b.n	413c04 <_strtod_r+0x91c>
  413bf0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  413bf4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  413bf8:	2c19      	cmp	r4, #25
  413bfa:	bf98      	it	ls
  413bfc:	3320      	addls	r3, #32
  413bfe:	4293      	cmp	r3, r2
  413c00:	f47f abc1 	bne.w	413386 <_strtod_r+0x9e>
  413c04:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  413c08:	2a00      	cmp	r2, #0
  413c0a:	d1f1      	bne.n	413bf0 <_strtod_r+0x908>
  413c0c:	9119      	str	r1, [sp, #100]	; 0x64
  413c0e:	4c23      	ldr	r4, [pc, #140]	; (413c9c <_strtod_r+0x9b4>)
  413c10:	4608      	mov	r0, r1
  413c12:	e009      	b.n	413c28 <_strtod_r+0x940>
  413c14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  413c18:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  413c1c:	2d19      	cmp	r5, #25
  413c1e:	bf98      	it	ls
  413c20:	3320      	addls	r3, #32
  413c22:	4293      	cmp	r3, r2
  413c24:	f040 8285 	bne.w	414132 <_strtod_r+0xe4a>
  413c28:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  413c2c:	2a00      	cmp	r2, #0
  413c2e:	d1f1      	bne.n	413c14 <_strtod_r+0x92c>
  413c30:	3001      	adds	r0, #1
  413c32:	9019      	str	r0, [sp, #100]	; 0x64
  413c34:	4a1a      	ldr	r2, [pc, #104]	; (413ca0 <_strtod_r+0x9b8>)
  413c36:	9203      	str	r2, [sp, #12]
  413c38:	2300      	movs	r3, #0
  413c3a:	9302      	str	r3, [sp, #8]
  413c3c:	e4e9      	b.n	413612 <_strtod_r+0x32a>
  413c3e:	9907      	ldr	r1, [sp, #28]
  413c40:	9101      	str	r1, [sp, #4]
  413c42:	ab1a      	add	r3, sp, #104	; 0x68
  413c44:	9300      	str	r3, [sp, #0]
  413c46:	4658      	mov	r0, fp
  413c48:	a919      	add	r1, sp, #100	; 0x64
  413c4a:	4a16      	ldr	r2, [pc, #88]	; (413ca4 <_strtod_r+0x9bc>)
  413c4c:	ab1b      	add	r3, sp, #108	; 0x6c
  413c4e:	f001 f8af 	bl	414db0 <__gethex>
  413c52:	f010 0507 	ands.w	r5, r0, #7
  413c56:	4604      	mov	r4, r0
  413c58:	f43f acca 	beq.w	4135f0 <_strtod_r+0x308>
  413c5c:	2d06      	cmp	r5, #6
  413c5e:	f040 8157 	bne.w	413f10 <_strtod_r+0xc28>
  413c62:	3601      	adds	r6, #1
  413c64:	2200      	movs	r2, #0
  413c66:	9619      	str	r6, [sp, #100]	; 0x64
  413c68:	f04f 0800 	mov.w	r8, #0
  413c6c:	f04f 0900 	mov.w	r9, #0
  413c70:	9207      	str	r2, [sp, #28]
  413c72:	f7ff bb8f 	b.w	413394 <_strtod_r+0xac>
  413c76:	bf00      	nop
  413c78:	3fe00000 	.word	0x3fe00000
  413c7c:	fffffbe3 	.word	0xfffffbe3
  413c80:	3ff00000 	.word	0x3ff00000
  413c84:	7ca00000 	.word	0x7ca00000
  413c88:	7fefffff 	.word	0x7fefffff
  413c8c:	bff00000 	.word	0xbff00000
  413c90:	004170a3 	.word	0x004170a3
  413c94:	fff80000 	.word	0xfff80000
  413c98:	00417097 	.word	0x00417097
  413c9c:	0041709b 	.word	0x0041709b
  413ca0:	7ff00000 	.word	0x7ff00000
  413ca4:	00417084 	.word	0x00417084
  413ca8:	00417050 	.word	0x00417050
  413cac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  413cb0:	f8cd 900c 	str.w	r9, [sp, #12]
  413cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413cb8:	f7fe ff42 	bl	412b40 <__ulp>
  413cbc:	4602      	mov	r2, r0
  413cbe:	460b      	mov	r3, r1
  413cc0:	4620      	mov	r0, r4
  413cc2:	4629      	mov	r1, r5
  413cc4:	f001 fda0 	bl	415808 <__aeabi_dmul>
  413cc8:	4602      	mov	r2, r0
  413cca:	460b      	mov	r3, r1
  413ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413cd0:	f001 fbe8 	bl	4154a4 <__adddf3>
  413cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413cd8:	9903      	ldr	r1, [sp, #12]
  413cda:	4aad      	ldr	r2, [pc, #692]	; (413f90 <_strtod_r+0xca8>)
  413cdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  413ce0:	0d1b      	lsrs	r3, r3, #20
  413ce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413ce6:	051b      	lsls	r3, r3, #20
  413ce8:	4293      	cmp	r3, r2
  413cea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  413cee:	f240 80d5 	bls.w	413e9c <_strtod_r+0xbb4>
  413cf2:	4ba8      	ldr	r3, [pc, #672]	; (413f94 <_strtod_r+0xcac>)
  413cf4:	9913      	ldr	r1, [sp, #76]	; 0x4c
  413cf6:	4299      	cmp	r1, r3
  413cf8:	d010      	beq.n	413d1c <_strtod_r+0xa34>
  413cfa:	4ba6      	ldr	r3, [pc, #664]	; (413f94 <_strtod_r+0xcac>)
  413cfc:	9303      	str	r3, [sp, #12]
  413cfe:	f04f 30ff 	mov.w	r0, #4294967295
  413d02:	9002      	str	r0, [sp, #8]
  413d04:	e640      	b.n	413988 <_strtod_r+0x6a0>
  413d06:	4aa4      	ldr	r2, [pc, #656]	; (413f98 <_strtod_r+0xcb0>)
  413d08:	9203      	str	r2, [sp, #12]
  413d0a:	2000      	movs	r0, #0
  413d0c:	2322      	movs	r3, #34	; 0x22
  413d0e:	9002      	str	r0, [sp, #8]
  413d10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413d14:	f8cb 3000 	str.w	r3, [fp]
  413d18:	f7ff bb3c 	b.w	413394 <_strtod_r+0xac>
  413d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  413d1e:	3201      	adds	r2, #1
  413d20:	d1eb      	bne.n	413cfa <_strtod_r+0xa12>
  413d22:	46b2      	mov	sl, r6
  413d24:	991a      	ldr	r1, [sp, #104]	; 0x68
  413d26:	4a9c      	ldr	r2, [pc, #624]	; (413f98 <_strtod_r+0xcb0>)
  413d28:	9203      	str	r2, [sp, #12]
  413d2a:	2000      	movs	r0, #0
  413d2c:	9002      	str	r0, [sp, #8]
  413d2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413d32:	2322      	movs	r3, #34	; 0x22
  413d34:	f8cb 3000 	str.w	r3, [fp]
  413d38:	4658      	mov	r0, fp
  413d3a:	f7fe fc2f 	bl	41259c <_Bfree>
  413d3e:	4658      	mov	r0, fp
  413d40:	4651      	mov	r1, sl
  413d42:	f7fe fc2b 	bl	41259c <_Bfree>
  413d46:	4658      	mov	r0, fp
  413d48:	4639      	mov	r1, r7
  413d4a:	f7fe fc27 	bl	41259c <_Bfree>
  413d4e:	4658      	mov	r0, fp
  413d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  413d52:	f7fe fc23 	bl	41259c <_Bfree>
  413d56:	4658      	mov	r0, fp
  413d58:	9906      	ldr	r1, [sp, #24]
  413d5a:	f7fe fc1f 	bl	41259c <_Bfree>
  413d5e:	f7ff bb19 	b.w	413394 <_strtod_r+0xac>
  413d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413d66:	f001 ffe9 	bl	415d3c <__aeabi_d2iz>
  413d6a:	f001 fce7 	bl	41573c <__aeabi_i2d>
  413d6e:	4602      	mov	r2, r0
  413d70:	460b      	mov	r3, r1
  413d72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413d76:	f001 fb93 	bl	4154a0 <__aeabi_dsub>
  413d7a:	4680      	mov	r8, r0
  413d7c:	4689      	mov	r9, r1
  413d7e:	f1ba 0f00 	cmp.w	sl, #0
  413d82:	d111      	bne.n	413da8 <_strtod_r+0xac0>
  413d84:	9a02      	ldr	r2, [sp, #8]
  413d86:	b97a      	cbnz	r2, 413da8 <_strtod_r+0xac0>
  413d88:	f3c4 0413 	ubfx	r4, r4, #0, #20
  413d8c:	b964      	cbnz	r4, 413da8 <_strtod_r+0xac0>
  413d8e:	a37a      	add	r3, pc, #488	; (adr r3, 413f78 <_strtod_r+0xc90>)
  413d90:	e9d3 2300 	ldrd	r2, r3, [r3]
  413d94:	f001 ffaa 	bl	415cec <__aeabi_dcmplt>
  413d98:	2800      	cmp	r0, #0
  413d9a:	f43f adf5 	beq.w	413988 <_strtod_r+0x6a0>
  413d9e:	46b2      	mov	sl, r6
  413da0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413da4:	991a      	ldr	r1, [sp, #104]	; 0x68
  413da6:	e7c7      	b.n	413d38 <_strtod_r+0xa50>
  413da8:	4640      	mov	r0, r8
  413daa:	4649      	mov	r1, r9
  413dac:	a374      	add	r3, pc, #464	; (adr r3, 413f80 <_strtod_r+0xc98>)
  413dae:	e9d3 2300 	ldrd	r2, r3, [r3]
  413db2:	f001 ff9b 	bl	415cec <__aeabi_dcmplt>
  413db6:	2800      	cmp	r0, #0
  413db8:	d1f1      	bne.n	413d9e <_strtod_r+0xab6>
  413dba:	4640      	mov	r0, r8
  413dbc:	4649      	mov	r1, r9
  413dbe:	a372      	add	r3, pc, #456	; (adr r3, 413f88 <_strtod_r+0xca0>)
  413dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  413dc4:	f001 ffb0 	bl	415d28 <__aeabi_dcmpgt>
  413dc8:	2800      	cmp	r0, #0
  413dca:	f43f addd 	beq.w	413988 <_strtod_r+0x6a0>
  413dce:	e7e6      	b.n	413d9e <_strtod_r+0xab6>
  413dd0:	4650      	mov	r0, sl
  413dd2:	2808      	cmp	r0, #8
  413dd4:	f100 0a01 	add.w	sl, r0, #1
  413dd8:	f300 8107 	bgt.w	413fea <_strtod_r+0xd02>
  413ddc:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  413de0:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  413de4:	2000      	movs	r0, #0
  413de6:	1c62      	adds	r2, r4, #1
  413de8:	9219      	str	r2, [sp, #100]	; 0x64
  413dea:	7864      	ldrb	r4, [r4, #1]
  413dec:	e643      	b.n	413a76 <_strtod_r+0x78e>
  413dee:	f43f aca7 	beq.w	413740 <_strtod_r+0x458>
  413df2:	f1c8 0400 	rsb	r4, r8, #0
  413df6:	f014 030f 	ands.w	r3, r4, #15
  413dfa:	d00a      	beq.n	413e12 <_strtod_r+0xb2a>
  413dfc:	4a67      	ldr	r2, [pc, #412]	; (413f9c <_strtod_r+0xcb4>)
  413dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  413e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413e06:	e9d3 2300 	ldrd	r2, r3, [r3]
  413e0a:	f001 fe27 	bl	415a5c <__aeabi_ddiv>
  413e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413e12:	1124      	asrs	r4, r4, #4
  413e14:	f43f ac94 	beq.w	413740 <_strtod_r+0x458>
  413e18:	2c1f      	cmp	r4, #31
  413e1a:	dc33      	bgt.n	413e84 <_strtod_r+0xb9c>
  413e1c:	f014 0f10 	tst.w	r4, #16
  413e20:	bf14      	ite	ne
  413e22:	216a      	movne	r1, #106	; 0x6a
  413e24:	2100      	moveq	r1, #0
  413e26:	2c00      	cmp	r4, #0
  413e28:	910a      	str	r1, [sp, #40]	; 0x28
  413e2a:	dd0e      	ble.n	413e4a <_strtod_r+0xb62>
  413e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413e30:	4d5b      	ldr	r5, [pc, #364]	; (413fa0 <_strtod_r+0xcb8>)
  413e32:	07e3      	lsls	r3, r4, #31
  413e34:	d503      	bpl.n	413e3e <_strtod_r+0xb56>
  413e36:	e9d5 2300 	ldrd	r2, r3, [r5]
  413e3a:	f001 fce5 	bl	415808 <__aeabi_dmul>
  413e3e:	1064      	asrs	r4, r4, #1
  413e40:	f105 0508 	add.w	r5, r5, #8
  413e44:	d1f5      	bne.n	413e32 <_strtod_r+0xb4a>
  413e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413e4c:	b18a      	cbz	r2, 413e72 <_strtod_r+0xb8a>
  413e4e:	9803      	ldr	r0, [sp, #12]
  413e50:	f3c0 530a 	ubfx	r3, r0, #20, #11
  413e54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  413e58:	2b00      	cmp	r3, #0
  413e5a:	dd0a      	ble.n	413e72 <_strtod_r+0xb8a>
  413e5c:	2b1f      	cmp	r3, #31
  413e5e:	f340 81bd 	ble.w	4141dc <_strtod_r+0xef4>
  413e62:	2100      	movs	r1, #0
  413e64:	2b34      	cmp	r3, #52	; 0x34
  413e66:	9102      	str	r1, [sp, #8]
  413e68:	f340 81c0 	ble.w	4141ec <_strtod_r+0xf04>
  413e6c:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  413e70:	9203      	str	r2, [sp, #12]
  413e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413e76:	2200      	movs	r2, #0
  413e78:	2300      	movs	r3, #0
  413e7a:	f001 ff2d 	bl	415cd8 <__aeabi_dcmpeq>
  413e7e:	2800      	cmp	r0, #0
  413e80:	f43f ac60 	beq.w	413744 <_strtod_r+0x45c>
  413e84:	2322      	movs	r3, #34	; 0x22
  413e86:	f8cb 3000 	str.w	r3, [fp]
  413e8a:	f04f 0800 	mov.w	r8, #0
  413e8e:	f04f 0900 	mov.w	r9, #0
  413e92:	f7ff ba7f 	b.w	413394 <_strtod_r+0xac>
  413e96:	f644 611f 	movw	r1, #19999	; 0x4e1f
  413e9a:	e40f      	b.n	4136bc <_strtod_r+0x3d4>
  413e9c:	9903      	ldr	r1, [sp, #12]
  413e9e:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  413ea2:	9403      	str	r4, [sp, #12]
  413ea4:	e569      	b.n	41397a <_strtod_r+0x692>
  413ea6:	9808      	ldr	r0, [sp, #32]
  413ea8:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  413eac:	4298      	cmp	r0, r3
  413eae:	f73f ac2d 	bgt.w	41370c <_strtod_r+0x424>
  413eb2:	4c3a      	ldr	r4, [pc, #232]	; (413f9c <_strtod_r+0xcb4>)
  413eb4:	f1ca 050f 	rsb	r5, sl, #15
  413eb8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  413ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
  413ec4:	f001 fca0 	bl	415808 <__aeabi_dmul>
  413ec8:	9a08      	ldr	r2, [sp, #32]
  413eca:	1b55      	subs	r5, r2, r5
  413ecc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  413ed0:	e9d4 2300 	ldrd	r2, r3, [r4]
  413ed4:	f001 fc98 	bl	415808 <__aeabi_dmul>
  413ed8:	4680      	mov	r8, r0
  413eda:	4689      	mov	r9, r1
  413edc:	f7ff ba5a 	b.w	413394 <_strtod_r+0xac>
  413ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413ee4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  413ee8:	e660      	b.n	413bac <_strtod_r+0x8c4>
  413eea:	492e      	ldr	r1, [pc, #184]	; (413fa4 <_strtod_r+0xcbc>)
  413eec:	2000      	movs	r0, #0
  413eee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413ef2:	e651      	b.n	413b98 <_strtod_r+0x8b0>
  413ef4:	464a      	mov	r2, r9
  413ef6:	2a00      	cmp	r2, #0
  413ef8:	f47f ae33 	bne.w	413b62 <_strtod_r+0x87a>
  413efc:	46b2      	mov	sl, r6
  413efe:	2322      	movs	r3, #34	; 0x22
  413f00:	f8cb 3000 	str.w	r3, [fp]
  413f04:	991a      	ldr	r1, [sp, #104]	; 0x68
  413f06:	f04f 0800 	mov.w	r8, #0
  413f0a:	f04f 0900 	mov.w	r9, #0
  413f0e:	e713      	b.n	413d38 <_strtod_r+0xa50>
  413f10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  413f12:	b13a      	cbz	r2, 413f24 <_strtod_r+0xc3c>
  413f14:	a81c      	add	r0, sp, #112	; 0x70
  413f16:	2135      	movs	r1, #53	; 0x35
  413f18:	f7fe ff12 	bl	412d40 <__copybits>
  413f1c:	4658      	mov	r0, fp
  413f1e:	991a      	ldr	r1, [sp, #104]	; 0x68
  413f20:	f7fe fb3c 	bl	41259c <_Bfree>
  413f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  413f26:	2d06      	cmp	r5, #6
  413f28:	f63f ab6d 	bhi.w	413606 <_strtod_r+0x31e>
  413f2c:	a001      	add	r0, pc, #4	; (adr r0, 413f34 <_strtod_r+0xc4c>)
  413f2e:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  413f32:	bf00      	nop
  413f34:	00413f69 	.word	0x00413f69
  413f38:	00413fa9 	.word	0x00413fa9
  413f3c:	00413f5d 	.word	0x00413f5d
  413f40:	00413f51 	.word	0x00413f51
  413f44:	004135fb 	.word	0x004135fb
  413f48:	00413fa9 	.word	0x00413fa9
  413f4c:	00413f69 	.word	0x00413f69
  413f50:	4911      	ldr	r1, [pc, #68]	; (413f98 <_strtod_r+0xcb0>)
  413f52:	9103      	str	r1, [sp, #12]
  413f54:	2200      	movs	r2, #0
  413f56:	9202      	str	r2, [sp, #8]
  413f58:	f7ff bb55 	b.w	413606 <_strtod_r+0x31e>
  413f5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  413f5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  413f60:	9202      	str	r2, [sp, #8]
  413f62:	9303      	str	r3, [sp, #12]
  413f64:	f7ff bb4f 	b.w	413606 <_strtod_r+0x31e>
  413f68:	2100      	movs	r1, #0
  413f6a:	9103      	str	r1, [sp, #12]
  413f6c:	9102      	str	r1, [sp, #8]
  413f6e:	f7ff bb4a 	b.w	413606 <_strtod_r+0x31e>
  413f72:	bf00      	nop
  413f74:	f3af 8000 	nop.w
  413f78:	94a03595 	.word	0x94a03595
  413f7c:	3fcfffff 	.word	0x3fcfffff
  413f80:	94a03595 	.word	0x94a03595
  413f84:	3fdfffff 	.word	0x3fdfffff
  413f88:	35afe535 	.word	0x35afe535
  413f8c:	3fe00000 	.word	0x3fe00000
  413f90:	7c9fffff 	.word	0x7c9fffff
  413f94:	7fefffff 	.word	0x7fefffff
  413f98:	7ff00000 	.word	0x7ff00000
  413f9c:	00416f88 	.word	0x00416f88
  413fa0:	004170c0 	.word	0x004170c0
  413fa4:	3ff00000 	.word	0x3ff00000
  413fa8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  413faa:	981c      	ldr	r0, [sp, #112]	; 0x70
  413fac:	9002      	str	r0, [sp, #8]
  413fae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  413fb2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  413fb6:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  413fba:	9203      	str	r2, [sp, #12]
  413fbc:	f7ff bb23 	b.w	413606 <_strtod_r+0x31e>
  413fc0:	9b08      	ldr	r3, [sp, #32]
  413fc2:	3316      	adds	r3, #22
  413fc4:	f6ff aba2 	blt.w	41370c <_strtod_r+0x424>
  413fc8:	4b8e      	ldr	r3, [pc, #568]	; (414204 <_strtod_r+0xf1c>)
  413fca:	9808      	ldr	r0, [sp, #32]
  413fcc:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  413fd0:	e9da 2300 	ldrd	r2, r3, [sl]
  413fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413fd8:	f001 fd40 	bl	415a5c <__aeabi_ddiv>
  413fdc:	4680      	mov	r8, r0
  413fde:	4689      	mov	r9, r1
  413fe0:	f7ff b9d8 	b.w	413394 <_strtod_r+0xac>
  413fe4:	46b2      	mov	sl, r6
  413fe6:	4601      	mov	r1, r0
  413fe8:	e69d      	b.n	413d26 <_strtod_r+0xa3e>
  413fea:	f1ba 0f10 	cmp.w	sl, #16
  413fee:	bfdc      	itt	le
  413ff0:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  413ff4:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  413ff8:	2000      	movs	r0, #0
  413ffa:	e6f4      	b.n	413de6 <_strtod_r+0xafe>
  413ffc:	4655      	mov	r5, sl
  413ffe:	46c4      	mov	ip, r8
  414000:	46b2      	mov	sl, r6
  414002:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  414006:	2d00      	cmp	r5, #0
  414008:	f000 8082 	beq.w	414110 <_strtod_r+0xe28>
  41400c:	9a03      	ldr	r2, [sp, #12]
  41400e:	4b7e      	ldr	r3, [pc, #504]	; (414208 <_strtod_r+0xf20>)
  414010:	f3c2 0113 	ubfx	r1, r2, #0, #20
  414014:	4299      	cmp	r1, r3
  414016:	f000 80a3 	beq.w	414160 <_strtod_r+0xe78>
  41401a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41401c:	2b00      	cmp	r3, #0
  41401e:	f000 8083 	beq.w	414128 <_strtod_r+0xe40>
  414022:	9803      	ldr	r0, [sp, #12]
  414024:	4203      	tst	r3, r0
  414026:	d00f      	beq.n	414048 <_strtod_r+0xd60>
  414028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41402c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41402e:	2d00      	cmp	r5, #0
  414030:	f000 8084 	beq.w	41413c <_strtod_r+0xe54>
  414034:	f7ff f936 	bl	4132a4 <sulp>
  414038:	4602      	mov	r2, r0
  41403a:	460b      	mov	r3, r1
  41403c:	4640      	mov	r0, r8
  41403e:	4649      	mov	r1, r9
  414040:	f001 fa30 	bl	4154a4 <__adddf3>
  414044:	4680      	mov	r8, r0
  414046:	4689      	mov	r9, r1
  414048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41404a:	b1b3      	cbz	r3, 41407a <_strtod_r+0xd92>
  41404c:	486f      	ldr	r0, [pc, #444]	; (41420c <_strtod_r+0xf24>)
  41404e:	9013      	str	r0, [sp, #76]	; 0x4c
  414050:	2100      	movs	r1, #0
  414052:	9112      	str	r1, [sp, #72]	; 0x48
  414054:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  414058:	4640      	mov	r0, r8
  41405a:	4649      	mov	r1, r9
  41405c:	f001 fbd4 	bl	415808 <__aeabi_dmul>
  414060:	4680      	mov	r8, r0
  414062:	4689      	mov	r9, r1
  414064:	e9cd 8902 	strd	r8, r9, [sp, #8]
  414068:	9a03      	ldr	r2, [sp, #12]
  41406a:	b932      	cbnz	r2, 41407a <_strtod_r+0xd92>
  41406c:	9b02      	ldr	r3, [sp, #8]
  41406e:	b923      	cbnz	r3, 41407a <_strtod_r+0xd92>
  414070:	2322      	movs	r3, #34	; 0x22
  414072:	991a      	ldr	r1, [sp, #104]	; 0x68
  414074:	f8cb 3000 	str.w	r3, [fp]
  414078:	e65e      	b.n	413d38 <_strtod_r+0xa50>
  41407a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41407c:	e65c      	b.n	413d38 <_strtod_r+0xa50>
  41407e:	4655      	mov	r5, sl
  414080:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  414084:	46b2      	mov	sl, r6
  414086:	2d00      	cmp	r5, #0
  414088:	d1de      	bne.n	414048 <_strtod_r+0xd60>
  41408a:	9a02      	ldr	r2, [sp, #8]
  41408c:	2a00      	cmp	r2, #0
  41408e:	d1db      	bne.n	414048 <_strtod_r+0xd60>
  414090:	9803      	ldr	r0, [sp, #12]
  414092:	f3c0 0313 	ubfx	r3, r0, #0, #20
  414096:	4604      	mov	r4, r0
  414098:	2b00      	cmp	r3, #0
  41409a:	d1d5      	bne.n	414048 <_strtod_r+0xd60>
  41409c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4140a0:	0d1b      	lsrs	r3, r3, #20
  4140a2:	051b      	lsls	r3, r3, #20
  4140a4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4140a8:	d9ce      	bls.n	414048 <_strtod_r+0xd60>
  4140aa:	9906      	ldr	r1, [sp, #24]
  4140ac:	694b      	ldr	r3, [r1, #20]
  4140ae:	b913      	cbnz	r3, 4140b6 <_strtod_r+0xdce>
  4140b0:	690b      	ldr	r3, [r1, #16]
  4140b2:	2b01      	cmp	r3, #1
  4140b4:	ddc8      	ble.n	414048 <_strtod_r+0xd60>
  4140b6:	9906      	ldr	r1, [sp, #24]
  4140b8:	2201      	movs	r2, #1
  4140ba:	4658      	mov	r0, fp
  4140bc:	f7fe fc54 	bl	412968 <__lshift>
  4140c0:	4639      	mov	r1, r7
  4140c2:	9006      	str	r0, [sp, #24]
  4140c4:	f7fe fcae 	bl	412a24 <__mcmp>
  4140c8:	2800      	cmp	r0, #0
  4140ca:	ddbd      	ble.n	414048 <_strtod_r+0xd60>
  4140cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4140ce:	2b00      	cmp	r3, #0
  4140d0:	d17a      	bne.n	4141c8 <_strtod_r+0xee0>
  4140d2:	4b4f      	ldr	r3, [pc, #316]	; (414210 <_strtod_r+0xf28>)
  4140d4:	4023      	ands	r3, r4
  4140d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4140da:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  4140de:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  4140e2:	f04f 31ff 	mov.w	r1, #4294967295
  4140e6:	9003      	str	r0, [sp, #12]
  4140e8:	9102      	str	r1, [sp, #8]
  4140ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4140ee:	e7ab      	b.n	414048 <_strtod_r+0xd60>
  4140f0:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  4140f4:	2000      	movs	r0, #0
  4140f6:	9103      	str	r1, [sp, #12]
  4140f8:	900a      	str	r0, [sp, #40]	; 0x28
  4140fa:	f7ff bb23 	b.w	413744 <_strtod_r+0x45c>
  4140fe:	4b45      	ldr	r3, [pc, #276]	; (414214 <_strtod_r+0xf2c>)
  414100:	4945      	ldr	r1, [pc, #276]	; (414218 <_strtod_r+0xf30>)
  414102:	2200      	movs	r2, #0
  414104:	2000      	movs	r0, #0
  414106:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  41410a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41410e:	e4ac      	b.n	413a6a <_strtod_r+0x782>
  414110:	9903      	ldr	r1, [sp, #12]
  414112:	f3c1 0313 	ubfx	r3, r1, #0, #20
  414116:	460c      	mov	r4, r1
  414118:	2b00      	cmp	r3, #0
  41411a:	f47f af7e 	bne.w	41401a <_strtod_r+0xd32>
  41411e:	9a02      	ldr	r2, [sp, #8]
  414120:	2a00      	cmp	r2, #0
  414122:	f47f af7a 	bne.w	41401a <_strtod_r+0xd32>
  414126:	e7d1      	b.n	4140cc <_strtod_r+0xde4>
  414128:	9902      	ldr	r1, [sp, #8]
  41412a:	ea1c 0f01 	tst.w	ip, r1
  41412e:	d08b      	beq.n	414048 <_strtod_r+0xd60>
  414130:	e77a      	b.n	414028 <_strtod_r+0xd40>
  414132:	3101      	adds	r1, #1
  414134:	9119      	str	r1, [sp, #100]	; 0x64
  414136:	e57d      	b.n	413c34 <_strtod_r+0x94c>
  414138:	2700      	movs	r7, #0
  41413a:	e4e8      	b.n	413b0e <_strtod_r+0x826>
  41413c:	f7ff f8b2 	bl	4132a4 <sulp>
  414140:	4602      	mov	r2, r0
  414142:	460b      	mov	r3, r1
  414144:	4640      	mov	r0, r8
  414146:	4649      	mov	r1, r9
  414148:	f001 f9aa 	bl	4154a0 <__aeabi_dsub>
  41414c:	2200      	movs	r2, #0
  41414e:	2300      	movs	r3, #0
  414150:	4680      	mov	r8, r0
  414152:	4689      	mov	r9, r1
  414154:	f001 fdc0 	bl	415cd8 <__aeabi_dcmpeq>
  414158:	2800      	cmp	r0, #0
  41415a:	f47f aed0 	bne.w	413efe <_strtod_r+0xc16>
  41415e:	e773      	b.n	414048 <_strtod_r+0xd60>
  414160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  414162:	9902      	ldr	r1, [sp, #8]
  414164:	b1db      	cbz	r3, 41419e <_strtod_r+0xeb6>
  414166:	4b2a      	ldr	r3, [pc, #168]	; (414210 <_strtod_r+0xf28>)
  414168:	4013      	ands	r3, r2
  41416a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  41416e:	d816      	bhi.n	41419e <_strtod_r+0xeb6>
  414170:	0d1b      	lsrs	r3, r3, #20
  414172:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  414176:	f04f 30ff 	mov.w	r0, #4294967295
  41417a:	fa00 f303 	lsl.w	r3, r0, r3
  41417e:	4299      	cmp	r1, r3
  414180:	f47f af4b 	bne.w	41401a <_strtod_r+0xd32>
  414184:	4b25      	ldr	r3, [pc, #148]	; (41421c <_strtod_r+0xf34>)
  414186:	429a      	cmp	r2, r3
  414188:	d038      	beq.n	4141fc <_strtod_r+0xf14>
  41418a:	4b21      	ldr	r3, [pc, #132]	; (414210 <_strtod_r+0xf28>)
  41418c:	4013      	ands	r3, r2
  41418e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  414192:	2000      	movs	r0, #0
  414194:	9303      	str	r3, [sp, #12]
  414196:	9002      	str	r0, [sp, #8]
  414198:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41419c:	e754      	b.n	414048 <_strtod_r+0xd60>
  41419e:	f04f 33ff 	mov.w	r3, #4294967295
  4141a2:	e7ec      	b.n	41417e <_strtod_r+0xe96>
  4141a4:	a819      	add	r0, sp, #100	; 0x64
  4141a6:	491e      	ldr	r1, [pc, #120]	; (414220 <_strtod_r+0xf38>)
  4141a8:	aa1c      	add	r2, sp, #112	; 0x70
  4141aa:	f001 f899 	bl	4152e0 <__hexnan>
  4141ae:	2805      	cmp	r0, #5
  4141b0:	f47f ad16 	bne.w	413be0 <_strtod_r+0x8f8>
  4141b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4141b6:	991c      	ldr	r1, [sp, #112]	; 0x70
  4141b8:	9102      	str	r1, [sp, #8]
  4141ba:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  4141be:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  4141c2:	9003      	str	r0, [sp, #12]
  4141c4:	f7ff ba25 	b.w	413612 <_strtod_r+0x32a>
  4141c8:	4b11      	ldr	r3, [pc, #68]	; (414210 <_strtod_r+0xf28>)
  4141ca:	4023      	ands	r3, r4
  4141cc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4141d0:	d881      	bhi.n	4140d6 <_strtod_r+0xdee>
  4141d2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4141d6:	f63f af39 	bhi.w	41404c <_strtod_r+0xd64>
  4141da:	e690      	b.n	413efe <_strtod_r+0xc16>
  4141dc:	9802      	ldr	r0, [sp, #8]
  4141de:	f04f 32ff 	mov.w	r2, #4294967295
  4141e2:	fa02 f303 	lsl.w	r3, r2, r3
  4141e6:	4003      	ands	r3, r0
  4141e8:	9302      	str	r3, [sp, #8]
  4141ea:	e642      	b.n	413e72 <_strtod_r+0xb8a>
  4141ec:	3b20      	subs	r3, #32
  4141ee:	f04f 31ff 	mov.w	r1, #4294967295
  4141f2:	fa01 f303 	lsl.w	r3, r1, r3
  4141f6:	4003      	ands	r3, r0
  4141f8:	9303      	str	r3, [sp, #12]
  4141fa:	e63a      	b.n	413e72 <_strtod_r+0xb8a>
  4141fc:	3101      	adds	r1, #1
  4141fe:	d1c4      	bne.n	41418a <_strtod_r+0xea2>
  414200:	e590      	b.n	413d24 <_strtod_r+0xa3c>
  414202:	bf00      	nop
  414204:	00416f88 	.word	0x00416f88
  414208:	000fffff 	.word	0x000fffff
  41420c:	39500000 	.word	0x39500000
  414210:	7ff00000 	.word	0x7ff00000
  414214:	bfe00000 	.word	0xbfe00000
  414218:	3fe00000 	.word	0x3fe00000
  41421c:	7fefffff 	.word	0x7fefffff
  414220:	004170a8 	.word	0x004170a8
  414224:	f3af 8000 	nop.w

00414228 <_strtol_r>:
  414228:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41422c:	4c42      	ldr	r4, [pc, #264]	; (414338 <_strtol_r+0x110>)
  41422e:	b082      	sub	sp, #8
  414230:	f8d4 c000 	ldr.w	ip, [r4]
  414234:	9001      	str	r0, [sp, #4]
  414236:	460e      	mov	r6, r1
  414238:	e000      	b.n	41423c <_strtol_r+0x14>
  41423a:	4626      	mov	r6, r4
  41423c:	4634      	mov	r4, r6
  41423e:	f814 5b01 	ldrb.w	r5, [r4], #1
  414242:	eb0c 0005 	add.w	r0, ip, r5
  414246:	7840      	ldrb	r0, [r0, #1]
  414248:	f000 0008 	and.w	r0, r0, #8
  41424c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  414250:	2800      	cmp	r0, #0
  414252:	d1f2      	bne.n	41423a <_strtol_r+0x12>
  414254:	2d2d      	cmp	r5, #45	; 0x2d
  414256:	d05b      	beq.n	414310 <_strtol_r+0xe8>
  414258:	2d2b      	cmp	r5, #43	; 0x2b
  41425a:	bf04      	itt	eq
  41425c:	7875      	ldrbeq	r5, [r6, #1]
  41425e:	1cb4      	addeq	r4, r6, #2
  414260:	f033 0010 	bics.w	r0, r3, #16
  414264:	d03c      	beq.n	4142e0 <_strtol_r+0xb8>
  414266:	4699      	mov	r9, r3
  414268:	f1ba 0f00 	cmp.w	sl, #0
  41426c:	bf0c      	ite	eq
  41426e:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  414272:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  414276:	fbbb f8f9 	udiv	r8, fp, r9
  41427a:	2700      	movs	r7, #0
  41427c:	fb09 bb18 	mls	fp, r9, r8, fp
  414280:	4638      	mov	r0, r7
  414282:	e00c      	b.n	41429e <_strtol_r+0x76>
  414284:	3d30      	subs	r5, #48	; 0x30
  414286:	42ab      	cmp	r3, r5
  414288:	dd19      	ble.n	4142be <_strtol_r+0x96>
  41428a:	1c7e      	adds	r6, r7, #1
  41428c:	d005      	beq.n	41429a <_strtol_r+0x72>
  41428e:	4540      	cmp	r0, r8
  414290:	d823      	bhi.n	4142da <_strtol_r+0xb2>
  414292:	d020      	beq.n	4142d6 <_strtol_r+0xae>
  414294:	fb09 5000 	mla	r0, r9, r0, r5
  414298:	2701      	movs	r7, #1
  41429a:	f814 5b01 	ldrb.w	r5, [r4], #1
  41429e:	eb0c 0605 	add.w	r6, ip, r5
  4142a2:	7876      	ldrb	r6, [r6, #1]
  4142a4:	f016 0f04 	tst.w	r6, #4
  4142a8:	d1ec      	bne.n	414284 <_strtol_r+0x5c>
  4142aa:	f016 0603 	ands.w	r6, r6, #3
  4142ae:	d006      	beq.n	4142be <_strtol_r+0x96>
  4142b0:	2e01      	cmp	r6, #1
  4142b2:	bf14      	ite	ne
  4142b4:	2657      	movne	r6, #87	; 0x57
  4142b6:	2637      	moveq	r6, #55	; 0x37
  4142b8:	1bad      	subs	r5, r5, r6
  4142ba:	42ab      	cmp	r3, r5
  4142bc:	dce5      	bgt.n	41428a <_strtol_r+0x62>
  4142be:	1c7b      	adds	r3, r7, #1
  4142c0:	d015      	beq.n	4142ee <_strtol_r+0xc6>
  4142c2:	f1ba 0f00 	cmp.w	sl, #0
  4142c6:	d121      	bne.n	41430c <_strtol_r+0xe4>
  4142c8:	b10a      	cbz	r2, 4142ce <_strtol_r+0xa6>
  4142ca:	b9ef      	cbnz	r7, 414308 <_strtol_r+0xe0>
  4142cc:	6011      	str	r1, [r2, #0]
  4142ce:	b002      	add	sp, #8
  4142d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4142d4:	4770      	bx	lr
  4142d6:	455d      	cmp	r5, fp
  4142d8:	dddc      	ble.n	414294 <_strtol_r+0x6c>
  4142da:	f04f 37ff 	mov.w	r7, #4294967295
  4142de:	e7dc      	b.n	41429a <_strtol_r+0x72>
  4142e0:	2d30      	cmp	r5, #48	; 0x30
  4142e2:	d01a      	beq.n	41431a <_strtol_r+0xf2>
  4142e4:	2b00      	cmp	r3, #0
  4142e6:	d1be      	bne.n	414266 <_strtol_r+0x3e>
  4142e8:	230a      	movs	r3, #10
  4142ea:	4699      	mov	r9, r3
  4142ec:	e7bc      	b.n	414268 <_strtol_r+0x40>
  4142ee:	9901      	ldr	r1, [sp, #4]
  4142f0:	f1ba 0f00 	cmp.w	sl, #0
  4142f4:	f04f 0322 	mov.w	r3, #34	; 0x22
  4142f8:	bf0c      	ite	eq
  4142fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4142fe:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  414302:	600b      	str	r3, [r1, #0]
  414304:	2a00      	cmp	r2, #0
  414306:	d0e2      	beq.n	4142ce <_strtol_r+0xa6>
  414308:	1e61      	subs	r1, r4, #1
  41430a:	e7df      	b.n	4142cc <_strtol_r+0xa4>
  41430c:	4240      	negs	r0, r0
  41430e:	e7db      	b.n	4142c8 <_strtol_r+0xa0>
  414310:	1cb4      	adds	r4, r6, #2
  414312:	7875      	ldrb	r5, [r6, #1]
  414314:	f04f 0a01 	mov.w	sl, #1
  414318:	e7a2      	b.n	414260 <_strtol_r+0x38>
  41431a:	7820      	ldrb	r0, [r4, #0]
  41431c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  414320:	2858      	cmp	r0, #88	; 0x58
  414322:	d003      	beq.n	41432c <_strtol_r+0x104>
  414324:	2b00      	cmp	r3, #0
  414326:	d19e      	bne.n	414266 <_strtol_r+0x3e>
  414328:	2308      	movs	r3, #8
  41432a:	e79c      	b.n	414266 <_strtol_r+0x3e>
  41432c:	2310      	movs	r3, #16
  41432e:	7865      	ldrb	r5, [r4, #1]
  414330:	4699      	mov	r9, r3
  414332:	3402      	adds	r4, #2
  414334:	e798      	b.n	414268 <_strtol_r+0x40>
  414336:	bf00      	nop
  414338:	20000d2c 	.word	0x20000d2c

0041433c <_strtoll_r>:
  41433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414340:	4c64      	ldr	r4, [pc, #400]	; (4144d4 <_strtoll_r+0x198>)
  414342:	b087      	sub	sp, #28
  414344:	4694      	mov	ip, r2
  414346:	9104      	str	r1, [sp, #16]
  414348:	f8d4 8000 	ldr.w	r8, [r4]
  41434c:	9005      	str	r0, [sp, #20]
  41434e:	4699      	mov	r9, r3
  414350:	460a      	mov	r2, r1
  414352:	e000      	b.n	414356 <_strtoll_r+0x1a>
  414354:	4632      	mov	r2, r6
  414356:	4616      	mov	r6, r2
  414358:	f816 7b01 	ldrb.w	r7, [r6], #1
  41435c:	eb08 0307 	add.w	r3, r8, r7
  414360:	785b      	ldrb	r3, [r3, #1]
  414362:	f003 0308 	and.w	r3, r3, #8
  414366:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  41436a:	2b00      	cmp	r3, #0
  41436c:	d1f2      	bne.n	414354 <_strtoll_r+0x18>
  41436e:	2f2d      	cmp	r7, #45	; 0x2d
  414370:	f000 808d 	beq.w	41448e <_strtoll_r+0x152>
  414374:	2f2b      	cmp	r7, #43	; 0x2b
  414376:	bf08      	it	eq
  414378:	7857      	ldrbeq	r7, [r2, #1]
  41437a:	9102      	str	r1, [sp, #8]
  41437c:	bf08      	it	eq
  41437e:	1c96      	addeq	r6, r2, #2
  414380:	f039 0110 	bics.w	r1, r9, #16
  414384:	d05e      	beq.n	414444 <_strtoll_r+0x108>
  414386:	46ca      	mov	sl, r9
  414388:	ea4f 7be9 	mov.w	fp, r9, asr #31
  41438c:	9c02      	ldr	r4, [sp, #8]
  41438e:	2c00      	cmp	r4, #0
  414390:	d066      	beq.n	414460 <_strtoll_r+0x124>
  414392:	2400      	movs	r4, #0
  414394:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  414398:	4620      	mov	r0, r4
  41439a:	4629      	mov	r1, r5
  41439c:	4652      	mov	r2, sl
  41439e:	465b      	mov	r3, fp
  4143a0:	f8cd c004 	str.w	ip, [sp, #4]
  4143a4:	f7f7 ffbe 	bl	40c324 <__aeabi_uldivmod>
  4143a8:	4620      	mov	r0, r4
  4143aa:	9203      	str	r2, [sp, #12]
  4143ac:	465b      	mov	r3, fp
  4143ae:	4652      	mov	r2, sl
  4143b0:	4629      	mov	r1, r5
  4143b2:	f7f7 ffb7 	bl	40c324 <__aeabi_uldivmod>
  4143b6:	2400      	movs	r4, #0
  4143b8:	2200      	movs	r2, #0
  4143ba:	2300      	movs	r3, #0
  4143bc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4143c0:	e019      	b.n	4143f6 <_strtoll_r+0xba>
  4143c2:	3f30      	subs	r7, #48	; 0x30
  4143c4:	45b9      	cmp	r9, r7
  4143c6:	dd26      	ble.n	414416 <_strtoll_r+0xda>
  4143c8:	1c65      	adds	r5, r4, #1
  4143ca:	d012      	beq.n	4143f2 <_strtoll_r+0xb6>
  4143cc:	4299      	cmp	r1, r3
  4143ce:	bf08      	it	eq
  4143d0:	4290      	cmpeq	r0, r2
  4143d2:	d334      	bcc.n	41443e <_strtoll_r+0x102>
  4143d4:	428b      	cmp	r3, r1
  4143d6:	bf08      	it	eq
  4143d8:	4282      	cmpeq	r2, r0
  4143da:	d02d      	beq.n	414438 <_strtoll_r+0xfc>
  4143dc:	fb02 f40b 	mul.w	r4, r2, fp
  4143e0:	fb0a 4403 	mla	r4, sl, r3, r4
  4143e4:	fba2 230a 	umull	r2, r3, r2, sl
  4143e8:	4423      	add	r3, r4
  4143ea:	19d2      	adds	r2, r2, r7
  4143ec:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  4143f0:	2401      	movs	r4, #1
  4143f2:	f816 7b01 	ldrb.w	r7, [r6], #1
  4143f6:	eb08 0507 	add.w	r5, r8, r7
  4143fa:	786d      	ldrb	r5, [r5, #1]
  4143fc:	f015 0f04 	tst.w	r5, #4
  414400:	d1df      	bne.n	4143c2 <_strtoll_r+0x86>
  414402:	f015 0503 	ands.w	r5, r5, #3
  414406:	d006      	beq.n	414416 <_strtoll_r+0xda>
  414408:	2d01      	cmp	r5, #1
  41440a:	bf14      	ite	ne
  41440c:	2557      	movne	r5, #87	; 0x57
  41440e:	2537      	moveq	r5, #55	; 0x37
  414410:	1b7f      	subs	r7, r7, r5
  414412:	45b9      	cmp	r9, r7
  414414:	dcd8      	bgt.n	4143c8 <_strtoll_r+0x8c>
  414416:	1c61      	adds	r1, r4, #1
  414418:	d027      	beq.n	41446a <_strtoll_r+0x12e>
  41441a:	9902      	ldr	r1, [sp, #8]
  41441c:	2900      	cmp	r1, #0
  41441e:	d132      	bne.n	414486 <_strtoll_r+0x14a>
  414420:	4610      	mov	r0, r2
  414422:	4619      	mov	r1, r3
  414424:	f1bc 0f00 	cmp.w	ip, #0
  414428:	d003      	beq.n	414432 <_strtoll_r+0xf6>
  41442a:	bb54      	cbnz	r4, 414482 <_strtoll_r+0x146>
  41442c:	9e04      	ldr	r6, [sp, #16]
  41442e:	f8cc 6000 	str.w	r6, [ip]
  414432:	b007      	add	sp, #28
  414434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414438:	9c03      	ldr	r4, [sp, #12]
  41443a:	42a7      	cmp	r7, r4
  41443c:	ddce      	ble.n	4143dc <_strtoll_r+0xa0>
  41443e:	f04f 34ff 	mov.w	r4, #4294967295
  414442:	e7d6      	b.n	4143f2 <_strtoll_r+0xb6>
  414444:	2f30      	cmp	r7, #48	; 0x30
  414446:	d027      	beq.n	414498 <_strtoll_r+0x15c>
  414448:	f1b9 0f00 	cmp.w	r9, #0
  41444c:	d19b      	bne.n	414386 <_strtoll_r+0x4a>
  41444e:	9c02      	ldr	r4, [sp, #8]
  414450:	f04f 0a0a 	mov.w	sl, #10
  414454:	f04f 0b00 	mov.w	fp, #0
  414458:	f04f 090a 	mov.w	r9, #10
  41445c:	2c00      	cmp	r4, #0
  41445e:	d198      	bne.n	414392 <_strtoll_r+0x56>
  414460:	f04f 34ff 	mov.w	r4, #4294967295
  414464:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  414468:	e796      	b.n	414398 <_strtoll_r+0x5c>
  41446a:	9c02      	ldr	r4, [sp, #8]
  41446c:	bb24      	cbnz	r4, 4144b8 <_strtoll_r+0x17c>
  41446e:	f04f 30ff 	mov.w	r0, #4294967295
  414472:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  414476:	9c05      	ldr	r4, [sp, #20]
  414478:	2322      	movs	r3, #34	; 0x22
  41447a:	6023      	str	r3, [r4, #0]
  41447c:	f1bc 0f00 	cmp.w	ip, #0
  414480:	d0d7      	beq.n	414432 <_strtoll_r+0xf6>
  414482:	3e01      	subs	r6, #1
  414484:	e7d3      	b.n	41442e <_strtoll_r+0xf2>
  414486:	4252      	negs	r2, r2
  414488:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41448c:	e7c8      	b.n	414420 <_strtoll_r+0xe4>
  41448e:	2401      	movs	r4, #1
  414490:	1c96      	adds	r6, r2, #2
  414492:	7857      	ldrb	r7, [r2, #1]
  414494:	9402      	str	r4, [sp, #8]
  414496:	e773      	b.n	414380 <_strtoll_r+0x44>
  414498:	7833      	ldrb	r3, [r6, #0]
  41449a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41449e:	2b58      	cmp	r3, #88	; 0x58
  4144a0:	d00e      	beq.n	4144c0 <_strtoll_r+0x184>
  4144a2:	f1b9 0f00 	cmp.w	r9, #0
  4144a6:	f47f af6e 	bne.w	414386 <_strtoll_r+0x4a>
  4144aa:	f04f 0a08 	mov.w	sl, #8
  4144ae:	f04f 0b00 	mov.w	fp, #0
  4144b2:	f04f 0908 	mov.w	r9, #8
  4144b6:	e769      	b.n	41438c <_strtoll_r+0x50>
  4144b8:	2000      	movs	r0, #0
  4144ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4144be:	e7da      	b.n	414476 <_strtoll_r+0x13a>
  4144c0:	7877      	ldrb	r7, [r6, #1]
  4144c2:	f04f 0a10 	mov.w	sl, #16
  4144c6:	f04f 0b00 	mov.w	fp, #0
  4144ca:	3602      	adds	r6, #2
  4144cc:	f04f 0910 	mov.w	r9, #16
  4144d0:	e75c      	b.n	41438c <_strtoll_r+0x50>
  4144d2:	bf00      	nop
  4144d4:	20000d2c 	.word	0x20000d2c

004144d8 <_strtoul_r>:
  4144d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4144dc:	4c44      	ldr	r4, [pc, #272]	; (4145f0 <_strtoul_r+0x118>)
  4144de:	b082      	sub	sp, #8
  4144e0:	f8d4 c000 	ldr.w	ip, [r4]
  4144e4:	9001      	str	r0, [sp, #4]
  4144e6:	460e      	mov	r6, r1
  4144e8:	e000      	b.n	4144ec <_strtoul_r+0x14>
  4144ea:	4626      	mov	r6, r4
  4144ec:	4634      	mov	r4, r6
  4144ee:	f814 5b01 	ldrb.w	r5, [r4], #1
  4144f2:	eb0c 0005 	add.w	r0, ip, r5
  4144f6:	7840      	ldrb	r0, [r0, #1]
  4144f8:	f000 0008 	and.w	r0, r0, #8
  4144fc:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  414500:	2800      	cmp	r0, #0
  414502:	d1f2      	bne.n	4144ea <_strtoul_r+0x12>
  414504:	2d2d      	cmp	r5, #45	; 0x2d
  414506:	d057      	beq.n	4145b8 <_strtoul_r+0xe0>
  414508:	2d2b      	cmp	r5, #43	; 0x2b
  41450a:	bf08      	it	eq
  41450c:	7875      	ldrbeq	r5, [r6, #1]
  41450e:	46ba      	mov	sl, r7
  414510:	bf08      	it	eq
  414512:	1cb4      	addeq	r4, r6, #2
  414514:	f033 0010 	bics.w	r0, r3, #16
  414518:	d039      	beq.n	41458e <_strtoul_r+0xb6>
  41451a:	f04f 38ff 	mov.w	r8, #4294967295
  41451e:	fbb8 f8f3 	udiv	r8, r8, r3
  414522:	fb03 fb08 	mul.w	fp, r3, r8
  414526:	ea6f 0b0b 	mvn.w	fp, fp
  41452a:	4699      	mov	r9, r3
  41452c:	2700      	movs	r7, #0
  41452e:	4638      	mov	r0, r7
  414530:	e00c      	b.n	41454c <_strtoul_r+0x74>
  414532:	3d30      	subs	r5, #48	; 0x30
  414534:	42ab      	cmp	r3, r5
  414536:	dd19      	ble.n	41456c <_strtoul_r+0x94>
  414538:	2f00      	cmp	r7, #0
  41453a:	db25      	blt.n	414588 <_strtoul_r+0xb0>
  41453c:	4540      	cmp	r0, r8
  41453e:	d823      	bhi.n	414588 <_strtoul_r+0xb0>
  414540:	d020      	beq.n	414584 <_strtoul_r+0xac>
  414542:	fb09 5000 	mla	r0, r9, r0, r5
  414546:	2701      	movs	r7, #1
  414548:	f814 5b01 	ldrb.w	r5, [r4], #1
  41454c:	eb0c 0605 	add.w	r6, ip, r5
  414550:	7876      	ldrb	r6, [r6, #1]
  414552:	f016 0f04 	tst.w	r6, #4
  414556:	d1ec      	bne.n	414532 <_strtoul_r+0x5a>
  414558:	f016 0603 	ands.w	r6, r6, #3
  41455c:	d006      	beq.n	41456c <_strtoul_r+0x94>
  41455e:	2e01      	cmp	r6, #1
  414560:	bf14      	ite	ne
  414562:	2657      	movne	r6, #87	; 0x57
  414564:	2637      	moveq	r6, #55	; 0x37
  414566:	1bad      	subs	r5, r5, r6
  414568:	42ab      	cmp	r3, r5
  41456a:	dce5      	bgt.n	414538 <_strtoul_r+0x60>
  41456c:	2f00      	cmp	r7, #0
  41456e:	db1d      	blt.n	4145ac <_strtoul_r+0xd4>
  414570:	f1ba 0f00 	cmp.w	sl, #0
  414574:	d118      	bne.n	4145a8 <_strtoul_r+0xd0>
  414576:	b10a      	cbz	r2, 41457c <_strtoul_r+0xa4>
  414578:	b9a7      	cbnz	r7, 4145a4 <_strtoul_r+0xcc>
  41457a:	6011      	str	r1, [r2, #0]
  41457c:	b002      	add	sp, #8
  41457e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414582:	4770      	bx	lr
  414584:	455d      	cmp	r5, fp
  414586:	dddc      	ble.n	414542 <_strtoul_r+0x6a>
  414588:	f04f 37ff 	mov.w	r7, #4294967295
  41458c:	e7dc      	b.n	414548 <_strtoul_r+0x70>
  41458e:	2d30      	cmp	r5, #48	; 0x30
  414590:	d017      	beq.n	4145c2 <_strtoul_r+0xea>
  414592:	2b00      	cmp	r3, #0
  414594:	d1c1      	bne.n	41451a <_strtoul_r+0x42>
  414596:	230a      	movs	r3, #10
  414598:	4699      	mov	r9, r3
  41459a:	f04f 0b05 	mov.w	fp, #5
  41459e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4145f4 <_strtoul_r+0x11c>
  4145a2:	e7c3      	b.n	41452c <_strtoul_r+0x54>
  4145a4:	1e61      	subs	r1, r4, #1
  4145a6:	e7e8      	b.n	41457a <_strtoul_r+0xa2>
  4145a8:	4240      	negs	r0, r0
  4145aa:	e7e4      	b.n	414576 <_strtoul_r+0x9e>
  4145ac:	9801      	ldr	r0, [sp, #4]
  4145ae:	2322      	movs	r3, #34	; 0x22
  4145b0:	6003      	str	r3, [r0, #0]
  4145b2:	f04f 30ff 	mov.w	r0, #4294967295
  4145b6:	e7de      	b.n	414576 <_strtoul_r+0x9e>
  4145b8:	1cb4      	adds	r4, r6, #2
  4145ba:	7875      	ldrb	r5, [r6, #1]
  4145bc:	f04f 0a01 	mov.w	sl, #1
  4145c0:	e7a8      	b.n	414514 <_strtoul_r+0x3c>
  4145c2:	7820      	ldrb	r0, [r4, #0]
  4145c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4145c8:	2858      	cmp	r0, #88	; 0x58
  4145ca:	d008      	beq.n	4145de <_strtoul_r+0x106>
  4145cc:	2b00      	cmp	r3, #0
  4145ce:	d1a4      	bne.n	41451a <_strtoul_r+0x42>
  4145d0:	2308      	movs	r3, #8
  4145d2:	4699      	mov	r9, r3
  4145d4:	f04f 0b07 	mov.w	fp, #7
  4145d8:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  4145dc:	e7a6      	b.n	41452c <_strtoul_r+0x54>
  4145de:	2310      	movs	r3, #16
  4145e0:	7865      	ldrb	r5, [r4, #1]
  4145e2:	4699      	mov	r9, r3
  4145e4:	f04f 0b0f 	mov.w	fp, #15
  4145e8:	3402      	adds	r4, #2
  4145ea:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  4145ee:	e79d      	b.n	41452c <_strtoul_r+0x54>
  4145f0:	20000d2c 	.word	0x20000d2c
  4145f4:	19999999 	.word	0x19999999

004145f8 <_strtoull_r>:
  4145f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4145fc:	4c60      	ldr	r4, [pc, #384]	; (414780 <_strtoull_r+0x188>)
  4145fe:	b085      	sub	sp, #20
  414600:	f8d4 8000 	ldr.w	r8, [r4]
  414604:	9200      	str	r2, [sp, #0]
  414606:	9101      	str	r1, [sp, #4]
  414608:	9003      	str	r0, [sp, #12]
  41460a:	4699      	mov	r9, r3
  41460c:	460a      	mov	r2, r1
  41460e:	e000      	b.n	414612 <_strtoull_r+0x1a>
  414610:	4632      	mov	r2, r6
  414612:	4616      	mov	r6, r2
  414614:	f816 7b01 	ldrb.w	r7, [r6], #1
  414618:	eb08 0307 	add.w	r3, r8, r7
  41461c:	785b      	ldrb	r3, [r3, #1]
  41461e:	f003 0308 	and.w	r3, r3, #8
  414622:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  414626:	2b00      	cmp	r3, #0
  414628:	d1f2      	bne.n	414610 <_strtoull_r+0x18>
  41462a:	2f2d      	cmp	r7, #45	; 0x2d
  41462c:	d07d      	beq.n	41472a <_strtoull_r+0x132>
  41462e:	2f2b      	cmp	r7, #43	; 0x2b
  414630:	bf08      	it	eq
  414632:	7857      	ldrbeq	r7, [r2, #1]
  414634:	9102      	str	r1, [sp, #8]
  414636:	bf08      	it	eq
  414638:	1c96      	addeq	r6, r2, #2
  41463a:	f039 0210 	bics.w	r2, r9, #16
  41463e:	d055      	beq.n	4146ec <_strtoull_r+0xf4>
  414640:	ea4f 7be9 	mov.w	fp, r9, asr #31
  414644:	464a      	mov	r2, r9
  414646:	465b      	mov	r3, fp
  414648:	f04f 30ff 	mov.w	r0, #4294967295
  41464c:	f04f 31ff 	mov.w	r1, #4294967295
  414650:	f7f7 fe68 	bl	40c324 <__aeabi_uldivmod>
  414654:	464a      	mov	r2, r9
  414656:	4604      	mov	r4, r0
  414658:	460d      	mov	r5, r1
  41465a:	465b      	mov	r3, fp
  41465c:	f04f 30ff 	mov.w	r0, #4294967295
  414660:	f04f 31ff 	mov.w	r1, #4294967295
  414664:	f7f7 fe5e 	bl	40c324 <__aeabi_uldivmod>
  414668:	46ca      	mov	sl, r9
  41466a:	4694      	mov	ip, r2
  41466c:	2300      	movs	r3, #0
  41466e:	2000      	movs	r0, #0
  414670:	2100      	movs	r1, #0
  414672:	e019      	b.n	4146a8 <_strtoull_r+0xb0>
  414674:	3f30      	subs	r7, #48	; 0x30
  414676:	45b9      	cmp	r9, r7
  414678:	dd26      	ble.n	4146c8 <_strtoull_r+0xd0>
  41467a:	2b00      	cmp	r3, #0
  41467c:	db33      	blt.n	4146e6 <_strtoull_r+0xee>
  41467e:	428d      	cmp	r5, r1
  414680:	bf08      	it	eq
  414682:	4284      	cmpeq	r4, r0
  414684:	d32f      	bcc.n	4146e6 <_strtoull_r+0xee>
  414686:	42a9      	cmp	r1, r5
  414688:	bf08      	it	eq
  41468a:	42a0      	cmpeq	r0, r4
  41468c:	d029      	beq.n	4146e2 <_strtoull_r+0xea>
  41468e:	fb00 f30b 	mul.w	r3, r0, fp
  414692:	fb0a 3301 	mla	r3, sl, r1, r3
  414696:	fba0 010a 	umull	r0, r1, r0, sl
  41469a:	4419      	add	r1, r3
  41469c:	19c0      	adds	r0, r0, r7
  41469e:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  4146a2:	2301      	movs	r3, #1
  4146a4:	f816 7b01 	ldrb.w	r7, [r6], #1
  4146a8:	eb08 0207 	add.w	r2, r8, r7
  4146ac:	7852      	ldrb	r2, [r2, #1]
  4146ae:	f012 0f04 	tst.w	r2, #4
  4146b2:	d1df      	bne.n	414674 <_strtoull_r+0x7c>
  4146b4:	f012 0203 	ands.w	r2, r2, #3
  4146b8:	d006      	beq.n	4146c8 <_strtoull_r+0xd0>
  4146ba:	2a01      	cmp	r2, #1
  4146bc:	bf14      	ite	ne
  4146be:	2257      	movne	r2, #87	; 0x57
  4146c0:	2237      	moveq	r2, #55	; 0x37
  4146c2:	1abf      	subs	r7, r7, r2
  4146c4:	45b9      	cmp	r9, r7
  4146c6:	dcd8      	bgt.n	41467a <_strtoull_r+0x82>
  4146c8:	2b00      	cmp	r3, #0
  4146ca:	db26      	blt.n	41471a <_strtoull_r+0x122>
  4146cc:	9a02      	ldr	r2, [sp, #8]
  4146ce:	bb02      	cbnz	r2, 414712 <_strtoull_r+0x11a>
  4146d0:	9a00      	ldr	r2, [sp, #0]
  4146d2:	b11a      	cbz	r2, 4146dc <_strtoull_r+0xe4>
  4146d4:	b9db      	cbnz	r3, 41470e <_strtoull_r+0x116>
  4146d6:	9e01      	ldr	r6, [sp, #4]
  4146d8:	9b00      	ldr	r3, [sp, #0]
  4146da:	601e      	str	r6, [r3, #0]
  4146dc:	b005      	add	sp, #20
  4146de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4146e2:	4567      	cmp	r7, ip
  4146e4:	ddd3      	ble.n	41468e <_strtoull_r+0x96>
  4146e6:	f04f 33ff 	mov.w	r3, #4294967295
  4146ea:	e7db      	b.n	4146a4 <_strtoull_r+0xac>
  4146ec:	2f30      	cmp	r7, #48	; 0x30
  4146ee:	d021      	beq.n	414734 <_strtoull_r+0x13c>
  4146f0:	f1b9 0f00 	cmp.w	r9, #0
  4146f4:	d1a4      	bne.n	414640 <_strtoull_r+0x48>
  4146f6:	f04f 0c05 	mov.w	ip, #5
  4146fa:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  4146fe:	4d21      	ldr	r5, [pc, #132]	; (414784 <_strtoull_r+0x18c>)
  414700:	f04f 0a0a 	mov.w	sl, #10
  414704:	f04f 0b00 	mov.w	fp, #0
  414708:	f04f 090a 	mov.w	r9, #10
  41470c:	e7ae      	b.n	41466c <_strtoull_r+0x74>
  41470e:	3e01      	subs	r6, #1
  414710:	e7e2      	b.n	4146d8 <_strtoull_r+0xe0>
  414712:	4240      	negs	r0, r0
  414714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  414718:	e7da      	b.n	4146d0 <_strtoull_r+0xd8>
  41471a:	9903      	ldr	r1, [sp, #12]
  41471c:	2222      	movs	r2, #34	; 0x22
  41471e:	600a      	str	r2, [r1, #0]
  414720:	f04f 30ff 	mov.w	r0, #4294967295
  414724:	f04f 31ff 	mov.w	r1, #4294967295
  414728:	e7d2      	b.n	4146d0 <_strtoull_r+0xd8>
  41472a:	2101      	movs	r1, #1
  41472c:	1c96      	adds	r6, r2, #2
  41472e:	7857      	ldrb	r7, [r2, #1]
  414730:	9102      	str	r1, [sp, #8]
  414732:	e782      	b.n	41463a <_strtoull_r+0x42>
  414734:	7833      	ldrb	r3, [r6, #0]
  414736:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41473a:	2b58      	cmp	r3, #88	; 0x58
  41473c:	d010      	beq.n	414760 <_strtoull_r+0x168>
  41473e:	f1b9 0f00 	cmp.w	r9, #0
  414742:	f47f af7d 	bne.w	414640 <_strtoull_r+0x48>
  414746:	f04f 0c07 	mov.w	ip, #7
  41474a:	f04f 34ff 	mov.w	r4, #4294967295
  41474e:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  414752:	f04f 0a08 	mov.w	sl, #8
  414756:	f04f 0b00 	mov.w	fp, #0
  41475a:	f04f 0908 	mov.w	r9, #8
  41475e:	e785      	b.n	41466c <_strtoull_r+0x74>
  414760:	7877      	ldrb	r7, [r6, #1]
  414762:	f04f 0c0f 	mov.w	ip, #15
  414766:	3602      	adds	r6, #2
  414768:	f04f 34ff 	mov.w	r4, #4294967295
  41476c:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  414770:	f04f 0a10 	mov.w	sl, #16
  414774:	f04f 0b00 	mov.w	fp, #0
  414778:	f04f 0910 	mov.w	r9, #16
  41477c:	e776      	b.n	41466c <_strtoull_r+0x74>
  41477e:	bf00      	nop
  414780:	20000d2c 	.word	0x20000d2c
  414784:	19999999 	.word	0x19999999

00414788 <__ssprint_r>:
  414788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41478c:	6894      	ldr	r4, [r2, #8]
  41478e:	6816      	ldr	r6, [r2, #0]
  414790:	b083      	sub	sp, #12
  414792:	4692      	mov	sl, r2
  414794:	4680      	mov	r8, r0
  414796:	460d      	mov	r5, r1
  414798:	2c00      	cmp	r4, #0
  41479a:	d06f      	beq.n	41487c <__ssprint_r+0xf4>
  41479c:	f04f 0b00 	mov.w	fp, #0
  4147a0:	6808      	ldr	r0, [r1, #0]
  4147a2:	688b      	ldr	r3, [r1, #8]
  4147a4:	465c      	mov	r4, fp
  4147a6:	2c00      	cmp	r4, #0
  4147a8:	d043      	beq.n	414832 <__ssprint_r+0xaa>
  4147aa:	429c      	cmp	r4, r3
  4147ac:	461f      	mov	r7, r3
  4147ae:	d345      	bcc.n	41483c <__ssprint_r+0xb4>
  4147b0:	89ab      	ldrh	r3, [r5, #12]
  4147b2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4147b6:	d044      	beq.n	414842 <__ssprint_r+0xba>
  4147b8:	696f      	ldr	r7, [r5, #20]
  4147ba:	6929      	ldr	r1, [r5, #16]
  4147bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4147c0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4147c4:	ebc1 0900 	rsb	r9, r1, r0
  4147c8:	1c62      	adds	r2, r4, #1
  4147ca:	107f      	asrs	r7, r7, #1
  4147cc:	444a      	add	r2, r9
  4147ce:	4297      	cmp	r7, r2
  4147d0:	bf34      	ite	cc
  4147d2:	4617      	movcc	r7, r2
  4147d4:	463a      	movcs	r2, r7
  4147d6:	055b      	lsls	r3, r3, #21
  4147d8:	d535      	bpl.n	414846 <__ssprint_r+0xbe>
  4147da:	4611      	mov	r1, r2
  4147dc:	4640      	mov	r0, r8
  4147de:	f7f8 f8c3 	bl	40c968 <_malloc_r>
  4147e2:	2800      	cmp	r0, #0
  4147e4:	d039      	beq.n	41485a <__ssprint_r+0xd2>
  4147e6:	6929      	ldr	r1, [r5, #16]
  4147e8:	9001      	str	r0, [sp, #4]
  4147ea:	464a      	mov	r2, r9
  4147ec:	f7f8 fb58 	bl	40cea0 <memcpy>
  4147f0:	89aa      	ldrh	r2, [r5, #12]
  4147f2:	9b01      	ldr	r3, [sp, #4]
  4147f4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4147f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4147fc:	81aa      	strh	r2, [r5, #12]
  4147fe:	ebc9 0207 	rsb	r2, r9, r7
  414802:	eb03 0009 	add.w	r0, r3, r9
  414806:	616f      	str	r7, [r5, #20]
  414808:	612b      	str	r3, [r5, #16]
  41480a:	6028      	str	r0, [r5, #0]
  41480c:	60aa      	str	r2, [r5, #8]
  41480e:	4627      	mov	r7, r4
  414810:	46a1      	mov	r9, r4
  414812:	464a      	mov	r2, r9
  414814:	4659      	mov	r1, fp
  414816:	f7fd fe3b 	bl	412490 <memmove>
  41481a:	f8da 2008 	ldr.w	r2, [sl, #8]
  41481e:	68ab      	ldr	r3, [r5, #8]
  414820:	6828      	ldr	r0, [r5, #0]
  414822:	1bdb      	subs	r3, r3, r7
  414824:	4448      	add	r0, r9
  414826:	1b14      	subs	r4, r2, r4
  414828:	60ab      	str	r3, [r5, #8]
  41482a:	6028      	str	r0, [r5, #0]
  41482c:	f8ca 4008 	str.w	r4, [sl, #8]
  414830:	b324      	cbz	r4, 41487c <__ssprint_r+0xf4>
  414832:	f8d6 b000 	ldr.w	fp, [r6]
  414836:	6874      	ldr	r4, [r6, #4]
  414838:	3608      	adds	r6, #8
  41483a:	e7b4      	b.n	4147a6 <__ssprint_r+0x1e>
  41483c:	4627      	mov	r7, r4
  41483e:	46a1      	mov	r9, r4
  414840:	e7e7      	b.n	414812 <__ssprint_r+0x8a>
  414842:	46b9      	mov	r9, r7
  414844:	e7e5      	b.n	414812 <__ssprint_r+0x8a>
  414846:	4640      	mov	r0, r8
  414848:	f7fe fae2 	bl	412e10 <_realloc_r>
  41484c:	4603      	mov	r3, r0
  41484e:	2800      	cmp	r0, #0
  414850:	d1d5      	bne.n	4147fe <__ssprint_r+0x76>
  414852:	4640      	mov	r0, r8
  414854:	6929      	ldr	r1, [r5, #16]
  414856:	f7fd fa6f 	bl	411d38 <_free_r>
  41485a:	89aa      	ldrh	r2, [r5, #12]
  41485c:	230c      	movs	r3, #12
  41485e:	f8c8 3000 	str.w	r3, [r8]
  414862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  414866:	2300      	movs	r3, #0
  414868:	f04f 30ff 	mov.w	r0, #4294967295
  41486c:	81aa      	strh	r2, [r5, #12]
  41486e:	f8ca 3008 	str.w	r3, [sl, #8]
  414872:	f8ca 3004 	str.w	r3, [sl, #4]
  414876:	b003      	add	sp, #12
  414878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41487c:	4620      	mov	r0, r4
  41487e:	f8ca 4004 	str.w	r4, [sl, #4]
  414882:	b003      	add	sp, #12
  414884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414888 <_sungetc_r>:
  414888:	b538      	push	{r3, r4, r5, lr}
  41488a:	1c4b      	adds	r3, r1, #1
  41488c:	4614      	mov	r4, r2
  41488e:	d019      	beq.n	4148c4 <_sungetc_r+0x3c>
  414890:	8992      	ldrh	r2, [r2, #12]
  414892:	6b23      	ldr	r3, [r4, #48]	; 0x30
  414894:	f022 0220 	bic.w	r2, r2, #32
  414898:	b2cd      	uxtb	r5, r1
  41489a:	81a2      	strh	r2, [r4, #12]
  41489c:	b1ab      	cbz	r3, 4148ca <_sungetc_r+0x42>
  41489e:	6862      	ldr	r2, [r4, #4]
  4148a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4148a2:	429a      	cmp	r2, r3
  4148a4:	da09      	bge.n	4148ba <_sungetc_r+0x32>
  4148a6:	6823      	ldr	r3, [r4, #0]
  4148a8:	1e5a      	subs	r2, r3, #1
  4148aa:	6022      	str	r2, [r4, #0]
  4148ac:	f803 5c01 	strb.w	r5, [r3, #-1]
  4148b0:	6863      	ldr	r3, [r4, #4]
  4148b2:	3301      	adds	r3, #1
  4148b4:	4628      	mov	r0, r5
  4148b6:	6063      	str	r3, [r4, #4]
  4148b8:	bd38      	pop	{r3, r4, r5, pc}
  4148ba:	4621      	mov	r1, r4
  4148bc:	f000 f882 	bl	4149c4 <__submore>
  4148c0:	2800      	cmp	r0, #0
  4148c2:	d0f0      	beq.n	4148a6 <_sungetc_r+0x1e>
  4148c4:	f04f 30ff 	mov.w	r0, #4294967295
  4148c8:	bd38      	pop	{r3, r4, r5, pc}
  4148ca:	6923      	ldr	r3, [r4, #16]
  4148cc:	6822      	ldr	r2, [r4, #0]
  4148ce:	b12b      	cbz	r3, 4148dc <_sungetc_r+0x54>
  4148d0:	4293      	cmp	r3, r2
  4148d2:	d203      	bcs.n	4148dc <_sungetc_r+0x54>
  4148d4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  4148d8:	42a8      	cmp	r0, r5
  4148da:	d00f      	beq.n	4148fc <_sungetc_r+0x74>
  4148dc:	4623      	mov	r3, r4
  4148de:	6861      	ldr	r1, [r4, #4]
  4148e0:	63a2      	str	r2, [r4, #56]	; 0x38
  4148e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
  4148e6:	2203      	movs	r2, #3
  4148e8:	6320      	str	r0, [r4, #48]	; 0x30
  4148ea:	6362      	str	r2, [r4, #52]	; 0x34
  4148ec:	63e1      	str	r1, [r4, #60]	; 0x3c
  4148ee:	f803 5f42 	strb.w	r5, [r3, #66]!
  4148f2:	2201      	movs	r2, #1
  4148f4:	6023      	str	r3, [r4, #0]
  4148f6:	4628      	mov	r0, r5
  4148f8:	6062      	str	r2, [r4, #4]
  4148fa:	bd38      	pop	{r3, r4, r5, pc}
  4148fc:	6863      	ldr	r3, [r4, #4]
  4148fe:	3a01      	subs	r2, #1
  414900:	3301      	adds	r3, #1
  414902:	e884 000c 	stmia.w	r4, {r2, r3}
  414906:	bd38      	pop	{r3, r4, r5, pc}

00414908 <__ssrefill_r>:
  414908:	b510      	push	{r4, lr}
  41490a:	460c      	mov	r4, r1
  41490c:	6b09      	ldr	r1, [r1, #48]	; 0x30
  41490e:	b169      	cbz	r1, 41492c <__ssrefill_r+0x24>
  414910:	f104 0340 	add.w	r3, r4, #64	; 0x40
  414914:	4299      	cmp	r1, r3
  414916:	d001      	beq.n	41491c <__ssrefill_r+0x14>
  414918:	f7fd fa0e 	bl	411d38 <_free_r>
  41491c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  41491e:	6063      	str	r3, [r4, #4]
  414920:	2000      	movs	r0, #0
  414922:	6320      	str	r0, [r4, #48]	; 0x30
  414924:	b113      	cbz	r3, 41492c <__ssrefill_r+0x24>
  414926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414928:	6023      	str	r3, [r4, #0]
  41492a:	bd10      	pop	{r4, pc}
  41492c:	89a2      	ldrh	r2, [r4, #12]
  41492e:	6923      	ldr	r3, [r4, #16]
  414930:	6023      	str	r3, [r4, #0]
  414932:	f042 0220 	orr.w	r2, r2, #32
  414936:	2300      	movs	r3, #0
  414938:	81a2      	strh	r2, [r4, #12]
  41493a:	6063      	str	r3, [r4, #4]
  41493c:	f04f 30ff 	mov.w	r0, #4294967295
  414940:	bd10      	pop	{r4, pc}
  414942:	bf00      	nop

00414944 <_sfread_r>:
  414944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414948:	b083      	sub	sp, #12
  41494a:	fb02 f903 	mul.w	r9, r2, r3
  41494e:	9201      	str	r2, [sp, #4]
  414950:	469a      	mov	sl, r3
  414952:	4607      	mov	r7, r0
  414954:	460e      	mov	r6, r1
  414956:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  414958:	f1b9 0f00 	cmp.w	r9, #0
  41495c:	d026      	beq.n	4149ac <_sfread_r+0x68>
  41495e:	464d      	mov	r5, r9
  414960:	f04f 0800 	mov.w	r8, #0
  414964:	e00e      	b.n	414984 <_sfread_r+0x40>
  414966:	f7f8 fa9b 	bl	40cea0 <memcpy>
  41496a:	6822      	ldr	r2, [r4, #0]
  41496c:	f8c4 8004 	str.w	r8, [r4, #4]
  414970:	445a      	add	r2, fp
  414972:	6022      	str	r2, [r4, #0]
  414974:	4638      	mov	r0, r7
  414976:	4621      	mov	r1, r4
  414978:	445e      	add	r6, fp
  41497a:	ebcb 0505 	rsb	r5, fp, r5
  41497e:	f7ff ffc3 	bl	414908 <__ssrefill_r>
  414982:	b9b8      	cbnz	r0, 4149b4 <_sfread_r+0x70>
  414984:	f8d4 b004 	ldr.w	fp, [r4, #4]
  414988:	6821      	ldr	r1, [r4, #0]
  41498a:	455d      	cmp	r5, fp
  41498c:	4630      	mov	r0, r6
  41498e:	465a      	mov	r2, fp
  414990:	d8e9      	bhi.n	414966 <_sfread_r+0x22>
  414992:	462a      	mov	r2, r5
  414994:	f7f8 fa84 	bl	40cea0 <memcpy>
  414998:	6862      	ldr	r2, [r4, #4]
  41499a:	6823      	ldr	r3, [r4, #0]
  41499c:	1b52      	subs	r2, r2, r5
  41499e:	442b      	add	r3, r5
  4149a0:	4650      	mov	r0, sl
  4149a2:	6062      	str	r2, [r4, #4]
  4149a4:	6023      	str	r3, [r4, #0]
  4149a6:	b003      	add	sp, #12
  4149a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4149ac:	4648      	mov	r0, r9
  4149ae:	b003      	add	sp, #12
  4149b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4149b4:	9b01      	ldr	r3, [sp, #4]
  4149b6:	ebc5 0909 	rsb	r9, r5, r9
  4149ba:	fbb9 f0f3 	udiv	r0, r9, r3
  4149be:	b003      	add	sp, #12
  4149c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004149c4 <__submore>:
  4149c4:	f101 0340 	add.w	r3, r1, #64	; 0x40
  4149c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4149cc:	460c      	mov	r4, r1
  4149ce:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4149d0:	4299      	cmp	r1, r3
  4149d2:	d014      	beq.n	4149fe <__submore+0x3a>
  4149d4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  4149d6:	0077      	lsls	r7, r6, #1
  4149d8:	463a      	mov	r2, r7
  4149da:	f7fe fa19 	bl	412e10 <_realloc_r>
  4149de:	4605      	mov	r5, r0
  4149e0:	b340      	cbz	r0, 414a34 <__submore+0x70>
  4149e2:	eb00 0806 	add.w	r8, r0, r6
  4149e6:	4632      	mov	r2, r6
  4149e8:	4640      	mov	r0, r8
  4149ea:	4629      	mov	r1, r5
  4149ec:	f7f8 fa58 	bl	40cea0 <memcpy>
  4149f0:	f8c4 8000 	str.w	r8, [r4]
  4149f4:	6325      	str	r5, [r4, #48]	; 0x30
  4149f6:	6367      	str	r7, [r4, #52]	; 0x34
  4149f8:	2000      	movs	r0, #0
  4149fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4149fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
  414a02:	f7f7 ffb1 	bl	40c968 <_malloc_r>
  414a06:	b1a8      	cbz	r0, 414a34 <__submore+0x70>
  414a08:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  414a0c:	6320      	str	r0, [r4, #48]	; 0x30
  414a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  414a12:	6362      	str	r2, [r4, #52]	; 0x34
  414a14:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  414a18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  414a1c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  414a20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  414a24:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  414a28:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  414a2c:	6020      	str	r0, [r4, #0]
  414a2e:	2000      	movs	r0, #0
  414a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414a34:	f04f 30ff 	mov.w	r0, #4294967295
  414a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00414a3c <__swbuf_r>:
  414a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414a3e:	460d      	mov	r5, r1
  414a40:	4614      	mov	r4, r2
  414a42:	4607      	mov	r7, r0
  414a44:	b110      	cbz	r0, 414a4c <__swbuf_r+0x10>
  414a46:	6b83      	ldr	r3, [r0, #56]	; 0x38
  414a48:	2b00      	cmp	r3, #0
  414a4a:	d048      	beq.n	414ade <__swbuf_r+0xa2>
  414a4c:	89a2      	ldrh	r2, [r4, #12]
  414a4e:	69a3      	ldr	r3, [r4, #24]
  414a50:	60a3      	str	r3, [r4, #8]
  414a52:	b293      	uxth	r3, r2
  414a54:	0718      	lsls	r0, r3, #28
  414a56:	d538      	bpl.n	414aca <__swbuf_r+0x8e>
  414a58:	6926      	ldr	r6, [r4, #16]
  414a5a:	2e00      	cmp	r6, #0
  414a5c:	d035      	beq.n	414aca <__swbuf_r+0x8e>
  414a5e:	0499      	lsls	r1, r3, #18
  414a60:	b2ed      	uxtb	r5, r5
  414a62:	d515      	bpl.n	414a90 <__swbuf_r+0x54>
  414a64:	6823      	ldr	r3, [r4, #0]
  414a66:	6962      	ldr	r2, [r4, #20]
  414a68:	1b9e      	subs	r6, r3, r6
  414a6a:	4296      	cmp	r6, r2
  414a6c:	da1c      	bge.n	414aa8 <__swbuf_r+0x6c>
  414a6e:	3601      	adds	r6, #1
  414a70:	68a2      	ldr	r2, [r4, #8]
  414a72:	1c59      	adds	r1, r3, #1
  414a74:	3a01      	subs	r2, #1
  414a76:	60a2      	str	r2, [r4, #8]
  414a78:	6021      	str	r1, [r4, #0]
  414a7a:	701d      	strb	r5, [r3, #0]
  414a7c:	6963      	ldr	r3, [r4, #20]
  414a7e:	42b3      	cmp	r3, r6
  414a80:	d01a      	beq.n	414ab8 <__swbuf_r+0x7c>
  414a82:	89a3      	ldrh	r3, [r4, #12]
  414a84:	07db      	lsls	r3, r3, #31
  414a86:	d501      	bpl.n	414a8c <__swbuf_r+0x50>
  414a88:	2d0a      	cmp	r5, #10
  414a8a:	d015      	beq.n	414ab8 <__swbuf_r+0x7c>
  414a8c:	4628      	mov	r0, r5
  414a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  414a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  414a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  414a9a:	6663      	str	r3, [r4, #100]	; 0x64
  414a9c:	6823      	ldr	r3, [r4, #0]
  414a9e:	81a2      	strh	r2, [r4, #12]
  414aa0:	6962      	ldr	r2, [r4, #20]
  414aa2:	1b9e      	subs	r6, r3, r6
  414aa4:	4296      	cmp	r6, r2
  414aa6:	dbe2      	blt.n	414a6e <__swbuf_r+0x32>
  414aa8:	4638      	mov	r0, r7
  414aaa:	4621      	mov	r1, r4
  414aac:	f7fc ffe6 	bl	411a7c <_fflush_r>
  414ab0:	b940      	cbnz	r0, 414ac4 <__swbuf_r+0x88>
  414ab2:	6823      	ldr	r3, [r4, #0]
  414ab4:	2601      	movs	r6, #1
  414ab6:	e7db      	b.n	414a70 <__swbuf_r+0x34>
  414ab8:	4638      	mov	r0, r7
  414aba:	4621      	mov	r1, r4
  414abc:	f7fc ffde 	bl	411a7c <_fflush_r>
  414ac0:	2800      	cmp	r0, #0
  414ac2:	d0e3      	beq.n	414a8c <__swbuf_r+0x50>
  414ac4:	f04f 30ff 	mov.w	r0, #4294967295
  414ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414aca:	4638      	mov	r0, r7
  414acc:	4621      	mov	r1, r4
  414ace:	f7fb fef1 	bl	4108b4 <__swsetup_r>
  414ad2:	2800      	cmp	r0, #0
  414ad4:	d1f6      	bne.n	414ac4 <__swbuf_r+0x88>
  414ad6:	89a2      	ldrh	r2, [r4, #12]
  414ad8:	6926      	ldr	r6, [r4, #16]
  414ada:	b293      	uxth	r3, r2
  414adc:	e7bf      	b.n	414a5e <__swbuf_r+0x22>
  414ade:	f7fc ffe9 	bl	411ab4 <__sinit>
  414ae2:	e7b3      	b.n	414a4c <__swbuf_r+0x10>

00414ae4 <_wcrtomb_r>:
  414ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414ae8:	461e      	mov	r6, r3
  414aea:	b086      	sub	sp, #24
  414aec:	460c      	mov	r4, r1
  414aee:	4605      	mov	r5, r0
  414af0:	4617      	mov	r7, r2
  414af2:	4b0f      	ldr	r3, [pc, #60]	; (414b30 <_wcrtomb_r+0x4c>)
  414af4:	b191      	cbz	r1, 414b1c <_wcrtomb_r+0x38>
  414af6:	f8d3 8000 	ldr.w	r8, [r3]
  414afa:	f7fd fbab 	bl	412254 <__locale_charset>
  414afe:	9600      	str	r6, [sp, #0]
  414b00:	4603      	mov	r3, r0
  414b02:	4621      	mov	r1, r4
  414b04:	463a      	mov	r2, r7
  414b06:	4628      	mov	r0, r5
  414b08:	47c0      	blx	r8
  414b0a:	1c43      	adds	r3, r0, #1
  414b0c:	d103      	bne.n	414b16 <_wcrtomb_r+0x32>
  414b0e:	2200      	movs	r2, #0
  414b10:	238a      	movs	r3, #138	; 0x8a
  414b12:	6032      	str	r2, [r6, #0]
  414b14:	602b      	str	r3, [r5, #0]
  414b16:	b006      	add	sp, #24
  414b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414b1c:	681f      	ldr	r7, [r3, #0]
  414b1e:	f7fd fb99 	bl	412254 <__locale_charset>
  414b22:	9600      	str	r6, [sp, #0]
  414b24:	4603      	mov	r3, r0
  414b26:	4622      	mov	r2, r4
  414b28:	4628      	mov	r0, r5
  414b2a:	a903      	add	r1, sp, #12
  414b2c:	47b8      	blx	r7
  414b2e:	e7ec      	b.n	414b0a <_wcrtomb_r+0x26>
  414b30:	20000d90 	.word	0x20000d90

00414b34 <__ascii_wctomb>:
  414b34:	b121      	cbz	r1, 414b40 <__ascii_wctomb+0xc>
  414b36:	2aff      	cmp	r2, #255	; 0xff
  414b38:	d804      	bhi.n	414b44 <__ascii_wctomb+0x10>
  414b3a:	700a      	strb	r2, [r1, #0]
  414b3c:	2001      	movs	r0, #1
  414b3e:	4770      	bx	lr
  414b40:	4608      	mov	r0, r1
  414b42:	4770      	bx	lr
  414b44:	238a      	movs	r3, #138	; 0x8a
  414b46:	6003      	str	r3, [r0, #0]
  414b48:	f04f 30ff 	mov.w	r0, #4294967295
  414b4c:	4770      	bx	lr
  414b4e:	bf00      	nop

00414b50 <__register_exitproc>:
  414b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  414b52:	4c27      	ldr	r4, [pc, #156]	; (414bf0 <__register_exitproc+0xa0>)
  414b54:	6826      	ldr	r6, [r4, #0]
  414b56:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  414b5a:	b085      	sub	sp, #20
  414b5c:	4607      	mov	r7, r0
  414b5e:	2c00      	cmp	r4, #0
  414b60:	d041      	beq.n	414be6 <__register_exitproc+0x96>
  414b62:	6865      	ldr	r5, [r4, #4]
  414b64:	2d1f      	cmp	r5, #31
  414b66:	dd1e      	ble.n	414ba6 <__register_exitproc+0x56>
  414b68:	4822      	ldr	r0, [pc, #136]	; (414bf4 <__register_exitproc+0xa4>)
  414b6a:	b918      	cbnz	r0, 414b74 <__register_exitproc+0x24>
  414b6c:	f04f 30ff 	mov.w	r0, #4294967295
  414b70:	b005      	add	sp, #20
  414b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414b74:	f44f 70c8 	mov.w	r0, #400	; 0x190
  414b78:	9103      	str	r1, [sp, #12]
  414b7a:	9202      	str	r2, [sp, #8]
  414b7c:	9301      	str	r3, [sp, #4]
  414b7e:	f7f7 fee3 	bl	40c948 <malloc>
  414b82:	9903      	ldr	r1, [sp, #12]
  414b84:	9a02      	ldr	r2, [sp, #8]
  414b86:	9b01      	ldr	r3, [sp, #4]
  414b88:	4604      	mov	r4, r0
  414b8a:	2800      	cmp	r0, #0
  414b8c:	d0ee      	beq.n	414b6c <__register_exitproc+0x1c>
  414b8e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  414b92:	6025      	str	r5, [r4, #0]
  414b94:	2000      	movs	r0, #0
  414b96:	6060      	str	r0, [r4, #4]
  414b98:	4605      	mov	r5, r0
  414b9a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  414b9e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  414ba2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  414ba6:	b93f      	cbnz	r7, 414bb8 <__register_exitproc+0x68>
  414ba8:	1cab      	adds	r3, r5, #2
  414baa:	2000      	movs	r0, #0
  414bac:	3501      	adds	r5, #1
  414bae:	6065      	str	r5, [r4, #4]
  414bb0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  414bb4:	b005      	add	sp, #20
  414bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414bb8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  414bbc:	f04f 0c01 	mov.w	ip, #1
  414bc0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  414bc4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  414bc8:	fa0c f205 	lsl.w	r2, ip, r5
  414bcc:	4316      	orrs	r6, r2
  414bce:	2f02      	cmp	r7, #2
  414bd0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  414bd4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  414bd8:	d1e6      	bne.n	414ba8 <__register_exitproc+0x58>
  414bda:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  414bde:	431a      	orrs	r2, r3
  414be0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  414be4:	e7e0      	b.n	414ba8 <__register_exitproc+0x58>
  414be6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  414bea:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  414bee:	e7b8      	b.n	414b62 <__register_exitproc+0x12>
  414bf0:	00416db0 	.word	0x00416db0
  414bf4:	0040c949 	.word	0x0040c949

00414bf8 <_calloc_r>:
  414bf8:	b510      	push	{r4, lr}
  414bfa:	fb02 f101 	mul.w	r1, r2, r1
  414bfe:	f7f7 feb3 	bl	40c968 <_malloc_r>
  414c02:	4604      	mov	r4, r0
  414c04:	b168      	cbz	r0, 414c22 <_calloc_r+0x2a>
  414c06:	f850 2c04 	ldr.w	r2, [r0, #-4]
  414c0a:	f022 0203 	bic.w	r2, r2, #3
  414c0e:	3a04      	subs	r2, #4
  414c10:	2a24      	cmp	r2, #36	; 0x24
  414c12:	d818      	bhi.n	414c46 <_calloc_r+0x4e>
  414c14:	2a13      	cmp	r2, #19
  414c16:	d806      	bhi.n	414c26 <_calloc_r+0x2e>
  414c18:	4603      	mov	r3, r0
  414c1a:	2200      	movs	r2, #0
  414c1c:	601a      	str	r2, [r3, #0]
  414c1e:	605a      	str	r2, [r3, #4]
  414c20:	609a      	str	r2, [r3, #8]
  414c22:	4620      	mov	r0, r4
  414c24:	bd10      	pop	{r4, pc}
  414c26:	2300      	movs	r3, #0
  414c28:	2a1b      	cmp	r2, #27
  414c2a:	6003      	str	r3, [r0, #0]
  414c2c:	6043      	str	r3, [r0, #4]
  414c2e:	d90f      	bls.n	414c50 <_calloc_r+0x58>
  414c30:	2a24      	cmp	r2, #36	; 0x24
  414c32:	6083      	str	r3, [r0, #8]
  414c34:	60c3      	str	r3, [r0, #12]
  414c36:	bf05      	ittet	eq
  414c38:	6103      	streq	r3, [r0, #16]
  414c3a:	6143      	streq	r3, [r0, #20]
  414c3c:	f100 0310 	addne.w	r3, r0, #16
  414c40:	f100 0318 	addeq.w	r3, r0, #24
  414c44:	e7e9      	b.n	414c1a <_calloc_r+0x22>
  414c46:	2100      	movs	r1, #0
  414c48:	f7f8 f9c4 	bl	40cfd4 <memset>
  414c4c:	4620      	mov	r0, r4
  414c4e:	bd10      	pop	{r4, pc}
  414c50:	f100 0308 	add.w	r3, r0, #8
  414c54:	e7e1      	b.n	414c1a <_calloc_r+0x22>
  414c56:	bf00      	nop

00414c58 <_fclose_r>:
  414c58:	b570      	push	{r4, r5, r6, lr}
  414c5a:	460c      	mov	r4, r1
  414c5c:	4605      	mov	r5, r0
  414c5e:	b131      	cbz	r1, 414c6e <_fclose_r+0x16>
  414c60:	b110      	cbz	r0, 414c68 <_fclose_r+0x10>
  414c62:	6b83      	ldr	r3, [r0, #56]	; 0x38
  414c64:	2b00      	cmp	r3, #0
  414c66:	d02f      	beq.n	414cc8 <_fclose_r+0x70>
  414c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  414c6c:	b90b      	cbnz	r3, 414c72 <_fclose_r+0x1a>
  414c6e:	2000      	movs	r0, #0
  414c70:	bd70      	pop	{r4, r5, r6, pc}
  414c72:	4628      	mov	r0, r5
  414c74:	4621      	mov	r1, r4
  414c76:	f7fc ff01 	bl	411a7c <_fflush_r>
  414c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  414c7c:	4606      	mov	r6, r0
  414c7e:	b133      	cbz	r3, 414c8e <_fclose_r+0x36>
  414c80:	4628      	mov	r0, r5
  414c82:	69e1      	ldr	r1, [r4, #28]
  414c84:	4798      	blx	r3
  414c86:	2800      	cmp	r0, #0
  414c88:	bfb8      	it	lt
  414c8a:	f04f 36ff 	movlt.w	r6, #4294967295
  414c8e:	89a3      	ldrh	r3, [r4, #12]
  414c90:	061b      	lsls	r3, r3, #24
  414c92:	d41c      	bmi.n	414cce <_fclose_r+0x76>
  414c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
  414c96:	b141      	cbz	r1, 414caa <_fclose_r+0x52>
  414c98:	f104 0340 	add.w	r3, r4, #64	; 0x40
  414c9c:	4299      	cmp	r1, r3
  414c9e:	d002      	beq.n	414ca6 <_fclose_r+0x4e>
  414ca0:	4628      	mov	r0, r5
  414ca2:	f7fd f849 	bl	411d38 <_free_r>
  414ca6:	2300      	movs	r3, #0
  414ca8:	6323      	str	r3, [r4, #48]	; 0x30
  414caa:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414cac:	b121      	cbz	r1, 414cb8 <_fclose_r+0x60>
  414cae:	4628      	mov	r0, r5
  414cb0:	f7fd f842 	bl	411d38 <_free_r>
  414cb4:	2300      	movs	r3, #0
  414cb6:	6463      	str	r3, [r4, #68]	; 0x44
  414cb8:	f7fc ff76 	bl	411ba8 <__sfp_lock_acquire>
  414cbc:	2300      	movs	r3, #0
  414cbe:	81a3      	strh	r3, [r4, #12]
  414cc0:	f7fc ff74 	bl	411bac <__sfp_lock_release>
  414cc4:	4630      	mov	r0, r6
  414cc6:	bd70      	pop	{r4, r5, r6, pc}
  414cc8:	f7fc fef4 	bl	411ab4 <__sinit>
  414ccc:	e7cc      	b.n	414c68 <_fclose_r+0x10>
  414cce:	4628      	mov	r0, r5
  414cd0:	6921      	ldr	r1, [r4, #16]
  414cd2:	f7fd f831 	bl	411d38 <_free_r>
  414cd6:	e7dd      	b.n	414c94 <_fclose_r+0x3c>

00414cd8 <fclose>:
  414cd8:	4b02      	ldr	r3, [pc, #8]	; (414ce4 <fclose+0xc>)
  414cda:	4601      	mov	r1, r0
  414cdc:	6818      	ldr	r0, [r3, #0]
  414cde:	f7ff bfbb 	b.w	414c58 <_fclose_r>
  414ce2:	bf00      	nop
  414ce4:	20000918 	.word	0x20000918

00414ce8 <_fstat_r>:
  414ce8:	b538      	push	{r3, r4, r5, lr}
  414cea:	4c08      	ldr	r4, [pc, #32]	; (414d0c <_fstat_r+0x24>)
  414cec:	2300      	movs	r3, #0
  414cee:	4605      	mov	r5, r0
  414cf0:	4608      	mov	r0, r1
  414cf2:	4611      	mov	r1, r2
  414cf4:	6023      	str	r3, [r4, #0]
  414cf6:	f7f7 f9df 	bl	40c0b8 <_fstat>
  414cfa:	1c43      	adds	r3, r0, #1
  414cfc:	d000      	beq.n	414d00 <_fstat_r+0x18>
  414cfe:	bd38      	pop	{r3, r4, r5, pc}
  414d00:	6823      	ldr	r3, [r4, #0]
  414d02:	2b00      	cmp	r3, #0
  414d04:	d0fb      	beq.n	414cfe <_fstat_r+0x16>
  414d06:	602b      	str	r3, [r5, #0]
  414d08:	bd38      	pop	{r3, r4, r5, pc}
  414d0a:	bf00      	nop
  414d0c:	200040e8 	.word	0x200040e8

00414d10 <rshift>:
  414d10:	6902      	ldr	r2, [r0, #16]
  414d12:	114b      	asrs	r3, r1, #5
  414d14:	4293      	cmp	r3, r2
  414d16:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  414d1a:	f100 0814 	add.w	r8, r0, #20
  414d1e:	da28      	bge.n	414d72 <rshift+0x62>
  414d20:	f011 0c1f 	ands.w	ip, r1, #31
  414d24:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  414d28:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  414d2c:	d028      	beq.n	414d80 <rshift+0x70>
  414d2e:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  414d32:	1d3b      	adds	r3, r7, #4
  414d34:	429a      	cmp	r2, r3
  414d36:	fa24 f40c 	lsr.w	r4, r4, ip
  414d3a:	f1cc 0120 	rsb	r1, ip, #32
  414d3e:	d935      	bls.n	414dac <rshift+0x9c>
  414d40:	4645      	mov	r5, r8
  414d42:	681e      	ldr	r6, [r3, #0]
  414d44:	408e      	lsls	r6, r1
  414d46:	4334      	orrs	r4, r6
  414d48:	f845 4b04 	str.w	r4, [r5], #4
  414d4c:	f853 4b04 	ldr.w	r4, [r3], #4
  414d50:	4293      	cmp	r3, r2
  414d52:	fa24 f40c 	lsr.w	r4, r4, ip
  414d56:	d3f4      	bcc.n	414d42 <rshift+0x32>
  414d58:	1bd3      	subs	r3, r2, r7
  414d5a:	3b05      	subs	r3, #5
  414d5c:	f023 0303 	bic.w	r3, r3, #3
  414d60:	3304      	adds	r3, #4
  414d62:	4443      	add	r3, r8
  414d64:	601c      	str	r4, [r3, #0]
  414d66:	b104      	cbz	r4, 414d6a <rshift+0x5a>
  414d68:	3304      	adds	r3, #4
  414d6a:	ebc8 0303 	rsb	r3, r8, r3
  414d6e:	109b      	asrs	r3, r3, #2
  414d70:	e016      	b.n	414da0 <rshift+0x90>
  414d72:	2300      	movs	r3, #0
  414d74:	6103      	str	r3, [r0, #16]
  414d76:	2300      	movs	r3, #0
  414d78:	6143      	str	r3, [r0, #20]
  414d7a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  414d7e:	4770      	bx	lr
  414d80:	42ba      	cmp	r2, r7
  414d82:	d9f6      	bls.n	414d72 <rshift+0x62>
  414d84:	4641      	mov	r1, r8
  414d86:	463b      	mov	r3, r7
  414d88:	f853 4b04 	ldr.w	r4, [r3], #4
  414d8c:	f841 4b04 	str.w	r4, [r1], #4
  414d90:	429a      	cmp	r2, r3
  414d92:	d8f9      	bhi.n	414d88 <rshift+0x78>
  414d94:	43fb      	mvns	r3, r7
  414d96:	4413      	add	r3, r2
  414d98:	f023 0303 	bic.w	r3, r3, #3
  414d9c:	3304      	adds	r3, #4
  414d9e:	109b      	asrs	r3, r3, #2
  414da0:	6103      	str	r3, [r0, #16]
  414da2:	2b00      	cmp	r3, #0
  414da4:	d0e7      	beq.n	414d76 <rshift+0x66>
  414da6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  414daa:	4770      	bx	lr
  414dac:	4643      	mov	r3, r8
  414dae:	e7d9      	b.n	414d64 <rshift+0x54>

00414db0 <__gethex>:
  414db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414db4:	b08b      	sub	sp, #44	; 0x2c
  414db6:	4688      	mov	r8, r1
  414db8:	9206      	str	r2, [sp, #24]
  414dba:	9309      	str	r3, [sp, #36]	; 0x24
  414dbc:	9007      	str	r0, [sp, #28]
  414dbe:	f7fd fa53 	bl	412268 <_localeconv_r>
  414dc2:	6800      	ldr	r0, [r0, #0]
  414dc4:	9002      	str	r0, [sp, #8]
  414dc6:	f7f8 fc49 	bl	40d65c <strlen>
  414dca:	f8d8 3000 	ldr.w	r3, [r8]
  414dce:	9902      	ldr	r1, [sp, #8]
  414dd0:	789a      	ldrb	r2, [r3, #2]
  414dd2:	9003      	str	r0, [sp, #12]
  414dd4:	4401      	add	r1, r0
  414dd6:	2a30      	cmp	r2, #48	; 0x30
  414dd8:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  414ddc:	f103 0502 	add.w	r5, r3, #2
  414de0:	f040 81a6 	bne.w	415130 <__gethex+0x380>
  414de4:	3303      	adds	r3, #3
  414de6:	2700      	movs	r7, #0
  414de8:	461d      	mov	r5, r3
  414dea:	f813 2b01 	ldrb.w	r2, [r3], #1
  414dee:	2a30      	cmp	r2, #48	; 0x30
  414df0:	f107 0701 	add.w	r7, r7, #1
  414df4:	d0f8      	beq.n	414de8 <__gethex+0x38>
  414df6:	4eb1      	ldr	r6, [pc, #708]	; (4150bc <__gethex+0x30c>)
  414df8:	5cb4      	ldrb	r4, [r6, r2]
  414dfa:	2c00      	cmp	r4, #0
  414dfc:	f000 80f4 	beq.w	414fe8 <__gethex+0x238>
  414e00:	782b      	ldrb	r3, [r5, #0]
  414e02:	f04f 0900 	mov.w	r9, #0
  414e06:	5cf3      	ldrb	r3, [r6, r3]
  414e08:	46cb      	mov	fp, r9
  414e0a:	2b00      	cmp	r3, #0
  414e0c:	f000 8198 	beq.w	415140 <__gethex+0x390>
  414e10:	1c6b      	adds	r3, r5, #1
  414e12:	461c      	mov	r4, r3
  414e14:	3301      	adds	r3, #1
  414e16:	7822      	ldrb	r2, [r4, #0]
  414e18:	5cb2      	ldrb	r2, [r6, r2]
  414e1a:	2a00      	cmp	r2, #0
  414e1c:	d1f9      	bne.n	414e12 <__gethex+0x62>
  414e1e:	4620      	mov	r0, r4
  414e20:	9902      	ldr	r1, [sp, #8]
  414e22:	9a03      	ldr	r2, [sp, #12]
  414e24:	f7f8 fc4a 	bl	40d6bc <strncmp>
  414e28:	b1e0      	cbz	r0, 414e64 <__gethex+0xb4>
  414e2a:	7823      	ldrb	r3, [r4, #0]
  414e2c:	f1bb 0f00 	cmp.w	fp, #0
  414e30:	f000 816c 	beq.w	41510c <__gethex+0x35c>
  414e34:	ebc4 0b0b 	rsb	fp, r4, fp
  414e38:	ea4f 028b 	mov.w	r2, fp, lsl #2
  414e3c:	9204      	str	r2, [sp, #16]
  414e3e:	2b50      	cmp	r3, #80	; 0x50
  414e40:	f000 809d 	beq.w	414f7e <__gethex+0x1ce>
  414e44:	2b70      	cmp	r3, #112	; 0x70
  414e46:	f000 809a 	beq.w	414f7e <__gethex+0x1ce>
  414e4a:	4623      	mov	r3, r4
  414e4c:	f8c8 3000 	str.w	r3, [r8]
  414e50:	f1b9 0f00 	cmp.w	r9, #0
  414e54:	d00c      	beq.n	414e70 <__gethex+0xc0>
  414e56:	2f00      	cmp	r7, #0
  414e58:	bf0c      	ite	eq
  414e5a:	2006      	moveq	r0, #6
  414e5c:	2000      	movne	r0, #0
  414e5e:	b00b      	add	sp, #44	; 0x2c
  414e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414e64:	f1bb 0f00 	cmp.w	fp, #0
  414e68:	f000 818c 	beq.w	415184 <__gethex+0x3d4>
  414e6c:	7823      	ldrb	r3, [r4, #0]
  414e6e:	e7e1      	b.n	414e34 <__gethex+0x84>
  414e70:	1b63      	subs	r3, r4, r5
  414e72:	3b01      	subs	r3, #1
  414e74:	2b07      	cmp	r3, #7
  414e76:	4649      	mov	r1, r9
  414e78:	dd04      	ble.n	414e84 <__gethex+0xd4>
  414e7a:	105b      	asrs	r3, r3, #1
  414e7c:	2b07      	cmp	r3, #7
  414e7e:	f101 0101 	add.w	r1, r1, #1
  414e82:	dcfa      	bgt.n	414e7a <__gethex+0xca>
  414e84:	9807      	ldr	r0, [sp, #28]
  414e86:	f7fd fb63 	bl	412550 <_Balloc>
  414e8a:	42a5      	cmp	r5, r4
  414e8c:	f100 0314 	add.w	r3, r0, #20
  414e90:	9005      	str	r0, [sp, #20]
  414e92:	9308      	str	r3, [sp, #32]
  414e94:	f080 81cd 	bcs.w	415232 <__gethex+0x482>
  414e98:	469b      	mov	fp, r3
  414e9a:	9b03      	ldr	r3, [sp, #12]
  414e9c:	f04f 0900 	mov.w	r9, #0
  414ea0:	464f      	mov	r7, r9
  414ea2:	f1c3 0c01 	rsb	ip, r3, #1
  414ea6:	e00e      	b.n	414ec6 <__gethex+0x116>
  414ea8:	2f20      	cmp	r7, #32
  414eaa:	d05f      	beq.n	414f6c <__gethex+0x1bc>
  414eac:	463a      	mov	r2, r7
  414eae:	3704      	adds	r7, #4
  414eb0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  414eb4:	5cf3      	ldrb	r3, [r6, r3]
  414eb6:	f003 030f 	and.w	r3, r3, #15
  414eba:	4093      	lsls	r3, r2
  414ebc:	4545      	cmp	r5, r8
  414ebe:	ea49 0903 	orr.w	r9, r9, r3
  414ec2:	d21a      	bcs.n	414efa <__gethex+0x14a>
  414ec4:	4644      	mov	r4, r8
  414ec6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  414eca:	4553      	cmp	r3, sl
  414ecc:	f104 38ff 	add.w	r8, r4, #4294967295
  414ed0:	d1ea      	bne.n	414ea8 <__gethex+0xf8>
  414ed2:	eb08 030c 	add.w	r3, r8, ip
  414ed6:	429d      	cmp	r5, r3
  414ed8:	d8e6      	bhi.n	414ea8 <__gethex+0xf8>
  414eda:	4618      	mov	r0, r3
  414edc:	9902      	ldr	r1, [sp, #8]
  414ede:	9a03      	ldr	r2, [sp, #12]
  414ee0:	9301      	str	r3, [sp, #4]
  414ee2:	f8cd c000 	str.w	ip, [sp]
  414ee6:	f7f8 fbe9 	bl	40d6bc <strncmp>
  414eea:	9b01      	ldr	r3, [sp, #4]
  414eec:	f8dd c000 	ldr.w	ip, [sp]
  414ef0:	2800      	cmp	r0, #0
  414ef2:	d1d9      	bne.n	414ea8 <__gethex+0xf8>
  414ef4:	4698      	mov	r8, r3
  414ef6:	4545      	cmp	r5, r8
  414ef8:	d3e4      	bcc.n	414ec4 <__gethex+0x114>
  414efa:	f84b 9b04 	str.w	r9, [fp], #4
  414efe:	9b08      	ldr	r3, [sp, #32]
  414f00:	9905      	ldr	r1, [sp, #20]
  414f02:	ebc3 0b0b 	rsb	fp, r3, fp
  414f06:	ea4f 03ab 	mov.w	r3, fp, asr #2
  414f0a:	4648      	mov	r0, r9
  414f0c:	610b      	str	r3, [r1, #16]
  414f0e:	015d      	lsls	r5, r3, #5
  414f10:	f7fd fbe6 	bl	4126e0 <__hi0bits>
  414f14:	9a06      	ldr	r2, [sp, #24]
  414f16:	6814      	ldr	r4, [r2, #0]
  414f18:	1a28      	subs	r0, r5, r0
  414f1a:	42a0      	cmp	r0, r4
  414f1c:	f300 80d0 	bgt.w	4150c0 <__gethex+0x310>
  414f20:	f2c0 80f7 	blt.w	415112 <__gethex+0x362>
  414f24:	2600      	movs	r6, #0
  414f26:	9806      	ldr	r0, [sp, #24]
  414f28:	9904      	ldr	r1, [sp, #16]
  414f2a:	6883      	ldr	r3, [r0, #8]
  414f2c:	4299      	cmp	r1, r3
  414f2e:	f300 8092 	bgt.w	415056 <__gethex+0x2a6>
  414f32:	9806      	ldr	r0, [sp, #24]
  414f34:	9904      	ldr	r1, [sp, #16]
  414f36:	6843      	ldr	r3, [r0, #4]
  414f38:	4299      	cmp	r1, r3
  414f3a:	f280 80a2 	bge.w	415082 <__gethex+0x2d2>
  414f3e:	1a5d      	subs	r5, r3, r1
  414f40:	42ac      	cmp	r4, r5
  414f42:	f300 80ff 	bgt.w	415144 <__gethex+0x394>
  414f46:	68c2      	ldr	r2, [r0, #12]
  414f48:	2a02      	cmp	r2, #2
  414f4a:	f000 8188 	beq.w	41525e <__gethex+0x4ae>
  414f4e:	2a03      	cmp	r2, #3
  414f50:	f000 8156 	beq.w	415200 <__gethex+0x450>
  414f54:	2a01      	cmp	r2, #1
  414f56:	f000 8173 	beq.w	415240 <__gethex+0x490>
  414f5a:	9807      	ldr	r0, [sp, #28]
  414f5c:	9905      	ldr	r1, [sp, #20]
  414f5e:	f7fd fb1d 	bl	41259c <_Bfree>
  414f62:	9a14      	ldr	r2, [sp, #80]	; 0x50
  414f64:	2300      	movs	r3, #0
  414f66:	6013      	str	r3, [r2, #0]
  414f68:	2050      	movs	r0, #80	; 0x50
  414f6a:	e778      	b.n	414e5e <__gethex+0xae>
  414f6c:	f8cb 9000 	str.w	r9, [fp]
  414f70:	f04f 0900 	mov.w	r9, #0
  414f74:	f10b 0b04 	add.w	fp, fp, #4
  414f78:	464a      	mov	r2, r9
  414f7a:	2704      	movs	r7, #4
  414f7c:	e798      	b.n	414eb0 <__gethex+0x100>
  414f7e:	7863      	ldrb	r3, [r4, #1]
  414f80:	2b2b      	cmp	r3, #43	; 0x2b
  414f82:	f000 8097 	beq.w	4150b4 <__gethex+0x304>
  414f86:	2b2d      	cmp	r3, #45	; 0x2d
  414f88:	d070      	beq.n	41506c <__gethex+0x2bc>
  414f8a:	1c60      	adds	r0, r4, #1
  414f8c:	f04f 0b00 	mov.w	fp, #0
  414f90:	5cf2      	ldrb	r2, [r6, r3]
  414f92:	494a      	ldr	r1, [pc, #296]	; (4150bc <__gethex+0x30c>)
  414f94:	1e53      	subs	r3, r2, #1
  414f96:	2b18      	cmp	r3, #24
  414f98:	f63f af57 	bhi.w	414e4a <__gethex+0x9a>
  414f9c:	7843      	ldrb	r3, [r0, #1]
  414f9e:	5cc9      	ldrb	r1, [r1, r3]
  414fa0:	f101 3cff 	add.w	ip, r1, #4294967295
  414fa4:	f1bc 0f18 	cmp.w	ip, #24
  414fa8:	f1a2 0210 	sub.w	r2, r2, #16
  414fac:	f100 0301 	add.w	r3, r0, #1
  414fb0:	d812      	bhi.n	414fd8 <__gethex+0x228>
  414fb2:	3002      	adds	r0, #2
  414fb4:	f890 c000 	ldrb.w	ip, [r0]
  414fb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  414fbc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  414fc0:	f816 100c 	ldrb.w	r1, [r6, ip]
  414fc4:	f101 3cff 	add.w	ip, r1, #4294967295
  414fc8:	f1bc 0f18 	cmp.w	ip, #24
  414fcc:	4603      	mov	r3, r0
  414fce:	f1a2 0210 	sub.w	r2, r2, #16
  414fd2:	f100 0001 	add.w	r0, r0, #1
  414fd6:	d9ed      	bls.n	414fb4 <__gethex+0x204>
  414fd8:	f1bb 0f00 	cmp.w	fp, #0
  414fdc:	d000      	beq.n	414fe0 <__gethex+0x230>
  414fde:	4252      	negs	r2, r2
  414fe0:	9804      	ldr	r0, [sp, #16]
  414fe2:	4410      	add	r0, r2
  414fe4:	9004      	str	r0, [sp, #16]
  414fe6:	e731      	b.n	414e4c <__gethex+0x9c>
  414fe8:	4628      	mov	r0, r5
  414fea:	9902      	ldr	r1, [sp, #8]
  414fec:	9a03      	ldr	r2, [sp, #12]
  414fee:	f7f8 fb65 	bl	40d6bc <strncmp>
  414ff2:	2800      	cmp	r0, #0
  414ff4:	d13f      	bne.n	415076 <__gethex+0x2c6>
  414ff6:	9803      	ldr	r0, [sp, #12]
  414ff8:	5c2b      	ldrb	r3, [r5, r0]
  414ffa:	5cf2      	ldrb	r2, [r6, r3]
  414ffc:	4604      	mov	r4, r0
  414ffe:	442c      	add	r4, r5
  415000:	2a00      	cmp	r2, #0
  415002:	f000 8097 	beq.w	415134 <__gethex+0x384>
  415006:	2b30      	cmp	r3, #48	; 0x30
  415008:	f040 8142 	bne.w	415290 <__gethex+0x4e0>
  41500c:	1c62      	adds	r2, r4, #1
  41500e:	4615      	mov	r5, r2
  415010:	3201      	adds	r2, #1
  415012:	782b      	ldrb	r3, [r5, #0]
  415014:	2b30      	cmp	r3, #48	; 0x30
  415016:	d0fa      	beq.n	41500e <__gethex+0x25e>
  415018:	5cf3      	ldrb	r3, [r6, r3]
  41501a:	f1d3 0901 	rsbs	r9, r3, #1
  41501e:	46a3      	mov	fp, r4
  415020:	bf38      	it	cc
  415022:	f04f 0900 	movcc.w	r9, #0
  415026:	2701      	movs	r7, #1
  415028:	e6ef      	b.n	414e0a <__gethex+0x5a>
  41502a:	4447      	add	r7, r8
  41502c:	f857 0c04 	ldr.w	r0, [r7, #-4]
  415030:	f7fd fb56 	bl	4126e0 <__hi0bits>
  415034:	f1c4 0320 	rsb	r3, r4, #32
  415038:	4298      	cmp	r0, r3
  41503a:	f280 80dd 	bge.w	4151f8 <__gethex+0x448>
  41503e:	9805      	ldr	r0, [sp, #20]
  415040:	2101      	movs	r1, #1
  415042:	f7ff fe65 	bl	414d10 <rshift>
  415046:	9806      	ldr	r0, [sp, #24]
  415048:	9904      	ldr	r1, [sp, #16]
  41504a:	6883      	ldr	r3, [r0, #8]
  41504c:	3101      	adds	r1, #1
  41504e:	4299      	cmp	r1, r3
  415050:	9104      	str	r1, [sp, #16]
  415052:	f340 80d1 	ble.w	4151f8 <__gethex+0x448>
  415056:	9807      	ldr	r0, [sp, #28]
  415058:	9905      	ldr	r1, [sp, #20]
  41505a:	f7fd fa9f 	bl	41259c <_Bfree>
  41505e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  415060:	2300      	movs	r3, #0
  415062:	20a3      	movs	r0, #163	; 0xa3
  415064:	6013      	str	r3, [r2, #0]
  415066:	b00b      	add	sp, #44	; 0x2c
  415068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41506c:	f04f 0b01 	mov.w	fp, #1
  415070:	78a3      	ldrb	r3, [r4, #2]
  415072:	1ca0      	adds	r0, r4, #2
  415074:	e78c      	b.n	414f90 <__gethex+0x1e0>
  415076:	9404      	str	r4, [sp, #16]
  415078:	782b      	ldrb	r3, [r5, #0]
  41507a:	462c      	mov	r4, r5
  41507c:	f04f 0901 	mov.w	r9, #1
  415080:	e6dd      	b.n	414e3e <__gethex+0x8e>
  415082:	2501      	movs	r5, #1
  415084:	b166      	cbz	r6, 4150a0 <__gethex+0x2f0>
  415086:	9806      	ldr	r0, [sp, #24]
  415088:	68c3      	ldr	r3, [r0, #12]
  41508a:	2b02      	cmp	r3, #2
  41508c:	f000 808b 	beq.w	4151a6 <__gethex+0x3f6>
  415090:	2b03      	cmp	r3, #3
  415092:	f000 808c 	beq.w	4151ae <__gethex+0x3fe>
  415096:	2b01      	cmp	r3, #1
  415098:	f000 80c2 	beq.w	415220 <__gethex+0x470>
  41509c:	f045 0510 	orr.w	r5, r5, #16
  4150a0:	9814      	ldr	r0, [sp, #80]	; 0x50
  4150a2:	9b05      	ldr	r3, [sp, #20]
  4150a4:	6003      	str	r3, [r0, #0]
  4150a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4150a8:	9b04      	ldr	r3, [sp, #16]
  4150aa:	600b      	str	r3, [r1, #0]
  4150ac:	4628      	mov	r0, r5
  4150ae:	b00b      	add	sp, #44	; 0x2c
  4150b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4150b4:	f04f 0b00 	mov.w	fp, #0
  4150b8:	e7da      	b.n	415070 <__gethex+0x2c0>
  4150ba:	bf00      	nop
  4150bc:	004170e8 	.word	0x004170e8
  4150c0:	1b05      	subs	r5, r0, r4
  4150c2:	4629      	mov	r1, r5
  4150c4:	9805      	ldr	r0, [sp, #20]
  4150c6:	f7fd fe5f 	bl	412d88 <__any_on>
  4150ca:	2800      	cmp	r0, #0
  4150cc:	d036      	beq.n	41513c <__gethex+0x38c>
  4150ce:	1e6b      	subs	r3, r5, #1
  4150d0:	115a      	asrs	r2, r3, #5
  4150d2:	9808      	ldr	r0, [sp, #32]
  4150d4:	f003 011f 	and.w	r1, r3, #31
  4150d8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4150dc:	2601      	movs	r6, #1
  4150de:	fa06 f101 	lsl.w	r1, r6, r1
  4150e2:	4211      	tst	r1, r2
  4150e4:	d00a      	beq.n	4150fc <__gethex+0x34c>
  4150e6:	42b3      	cmp	r3, r6
  4150e8:	f340 80a8 	ble.w	41523c <__gethex+0x48c>
  4150ec:	9805      	ldr	r0, [sp, #20]
  4150ee:	1ea9      	subs	r1, r5, #2
  4150f0:	f7fd fe4a 	bl	412d88 <__any_on>
  4150f4:	2800      	cmp	r0, #0
  4150f6:	f000 80a1 	beq.w	41523c <__gethex+0x48c>
  4150fa:	2603      	movs	r6, #3
  4150fc:	9b04      	ldr	r3, [sp, #16]
  4150fe:	9805      	ldr	r0, [sp, #20]
  415100:	442b      	add	r3, r5
  415102:	4629      	mov	r1, r5
  415104:	9304      	str	r3, [sp, #16]
  415106:	f7ff fe03 	bl	414d10 <rshift>
  41510a:	e70c      	b.n	414f26 <__gethex+0x176>
  41510c:	f8cd b010 	str.w	fp, [sp, #16]
  415110:	e695      	b.n	414e3e <__gethex+0x8e>
  415112:	1a25      	subs	r5, r4, r0
  415114:	9905      	ldr	r1, [sp, #20]
  415116:	9807      	ldr	r0, [sp, #28]
  415118:	462a      	mov	r2, r5
  41511a:	f7fd fc25 	bl	412968 <__lshift>
  41511e:	9b04      	ldr	r3, [sp, #16]
  415120:	9005      	str	r0, [sp, #20]
  415122:	1b5b      	subs	r3, r3, r5
  415124:	9304      	str	r3, [sp, #16]
  415126:	f100 0314 	add.w	r3, r0, #20
  41512a:	9308      	str	r3, [sp, #32]
  41512c:	2600      	movs	r6, #0
  41512e:	e6fa      	b.n	414f26 <__gethex+0x176>
  415130:	2700      	movs	r7, #0
  415132:	e660      	b.n	414df6 <__gethex+0x46>
  415134:	9204      	str	r2, [sp, #16]
  415136:	f04f 0901 	mov.w	r9, #1
  41513a:	e680      	b.n	414e3e <__gethex+0x8e>
  41513c:	4606      	mov	r6, r0
  41513e:	e7dd      	b.n	4150fc <__gethex+0x34c>
  415140:	462c      	mov	r4, r5
  415142:	e66c      	b.n	414e1e <__gethex+0x6e>
  415144:	1e6f      	subs	r7, r5, #1
  415146:	2e00      	cmp	r6, #0
  415148:	d158      	bne.n	4151fc <__gethex+0x44c>
  41514a:	2f00      	cmp	r7, #0
  41514c:	dd04      	ble.n	415158 <__gethex+0x3a8>
  41514e:	9805      	ldr	r0, [sp, #20]
  415150:	4639      	mov	r1, r7
  415152:	f7fd fe19 	bl	412d88 <__any_on>
  415156:	4606      	mov	r6, r0
  415158:	9808      	ldr	r0, [sp, #32]
  41515a:	117b      	asrs	r3, r7, #5
  41515c:	2201      	movs	r2, #1
  41515e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  415162:	9805      	ldr	r0, [sp, #20]
  415164:	f007 071f 	and.w	r7, r7, #31
  415168:	40ba      	lsls	r2, r7
  41516a:	421a      	tst	r2, r3
  41516c:	4629      	mov	r1, r5
  41516e:	bf18      	it	ne
  415170:	f046 0602 	orrne.w	r6, r6, #2
  415174:	f7ff fdcc 	bl	414d10 <rshift>
  415178:	9b06      	ldr	r3, [sp, #24]
  41517a:	685b      	ldr	r3, [r3, #4]
  41517c:	9304      	str	r3, [sp, #16]
  41517e:	1b64      	subs	r4, r4, r5
  415180:	2502      	movs	r5, #2
  415182:	e77f      	b.n	415084 <__gethex+0x2d4>
  415184:	9903      	ldr	r1, [sp, #12]
  415186:	5c63      	ldrb	r3, [r4, r1]
  415188:	5cf2      	ldrb	r2, [r6, r3]
  41518a:	468b      	mov	fp, r1
  41518c:	44a3      	add	fp, r4
  41518e:	2a00      	cmp	r2, #0
  415190:	f000 8081 	beq.w	415296 <__gethex+0x4e6>
  415194:	f10b 0201 	add.w	r2, fp, #1
  415198:	4614      	mov	r4, r2
  41519a:	3201      	adds	r2, #1
  41519c:	7823      	ldrb	r3, [r4, #0]
  41519e:	5cf1      	ldrb	r1, [r6, r3]
  4151a0:	2900      	cmp	r1, #0
  4151a2:	d1f9      	bne.n	415198 <__gethex+0x3e8>
  4151a4:	e646      	b.n	414e34 <__gethex+0x84>
  4151a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4151a8:	f1c2 0201 	rsb	r2, r2, #1
  4151ac:	9215      	str	r2, [sp, #84]	; 0x54
  4151ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4151b0:	2b00      	cmp	r3, #0
  4151b2:	f43f af73 	beq.w	41509c <__gethex+0x2ec>
  4151b6:	9b05      	ldr	r3, [sp, #20]
  4151b8:	9f08      	ldr	r7, [sp, #32]
  4151ba:	691e      	ldr	r6, [r3, #16]
  4151bc:	9b08      	ldr	r3, [sp, #32]
  4151be:	ea4f 0886 	mov.w	r8, r6, lsl #2
  4151c2:	4447      	add	r7, r8
  4151c4:	2000      	movs	r0, #0
  4151c6:	e003      	b.n	4151d0 <__gethex+0x420>
  4151c8:	429f      	cmp	r7, r3
  4151ca:	f843 0c04 	str.w	r0, [r3, #-4]
  4151ce:	d94a      	bls.n	415266 <__gethex+0x4b6>
  4151d0:	4619      	mov	r1, r3
  4151d2:	f853 2b04 	ldr.w	r2, [r3], #4
  4151d6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4151da:	d0f5      	beq.n	4151c8 <__gethex+0x418>
  4151dc:	3201      	adds	r2, #1
  4151de:	9f08      	ldr	r7, [sp, #32]
  4151e0:	600a      	str	r2, [r1, #0]
  4151e2:	2d02      	cmp	r5, #2
  4151e4:	d04d      	beq.n	415282 <__gethex+0x4d2>
  4151e6:	9a05      	ldr	r2, [sp, #20]
  4151e8:	6913      	ldr	r3, [r2, #16]
  4151ea:	429e      	cmp	r6, r3
  4151ec:	f6ff af27 	blt.w	41503e <__gethex+0x28e>
  4151f0:	f014 041f 	ands.w	r4, r4, #31
  4151f4:	f47f af19 	bne.w	41502a <__gethex+0x27a>
  4151f8:	2521      	movs	r5, #33	; 0x21
  4151fa:	e751      	b.n	4150a0 <__gethex+0x2f0>
  4151fc:	2601      	movs	r6, #1
  4151fe:	e7ab      	b.n	415158 <__gethex+0x3a8>
  415200:	9915      	ldr	r1, [sp, #84]	; 0x54
  415202:	2900      	cmp	r1, #0
  415204:	f43f aea9 	beq.w	414f5a <__gethex+0x1aa>
  415208:	9809      	ldr	r0, [sp, #36]	; 0x24
  41520a:	9914      	ldr	r1, [sp, #80]	; 0x50
  41520c:	6003      	str	r3, [r0, #0]
  41520e:	9b05      	ldr	r3, [sp, #20]
  415210:	2201      	movs	r2, #1
  415212:	611a      	str	r2, [r3, #16]
  415214:	9b08      	ldr	r3, [sp, #32]
  415216:	601a      	str	r2, [r3, #0]
  415218:	9b05      	ldr	r3, [sp, #20]
  41521a:	600b      	str	r3, [r1, #0]
  41521c:	2062      	movs	r0, #98	; 0x62
  41521e:	e61e      	b.n	414e5e <__gethex+0xae>
  415220:	07b2      	lsls	r2, r6, #30
  415222:	f57f af3b 	bpl.w	41509c <__gethex+0x2ec>
  415226:	9908      	ldr	r1, [sp, #32]
  415228:	680b      	ldr	r3, [r1, #0]
  41522a:	4333      	orrs	r3, r6
  41522c:	07db      	lsls	r3, r3, #31
  41522e:	d4c2      	bmi.n	4151b6 <__gethex+0x406>
  415230:	e734      	b.n	41509c <__gethex+0x2ec>
  415232:	f8dd b020 	ldr.w	fp, [sp, #32]
  415236:	f04f 0900 	mov.w	r9, #0
  41523a:	e65e      	b.n	414efa <__gethex+0x14a>
  41523c:	2602      	movs	r6, #2
  41523e:	e75d      	b.n	4150fc <__gethex+0x34c>
  415240:	42a5      	cmp	r5, r4
  415242:	f47f ae8a 	bne.w	414f5a <__gethex+0x1aa>
  415246:	2c01      	cmp	r4, #1
  415248:	ddde      	ble.n	415208 <__gethex+0x458>
  41524a:	1e61      	subs	r1, r4, #1
  41524c:	9805      	ldr	r0, [sp, #20]
  41524e:	f7fd fd9b 	bl	412d88 <__any_on>
  415252:	2800      	cmp	r0, #0
  415254:	f43f ae81 	beq.w	414f5a <__gethex+0x1aa>
  415258:	9a06      	ldr	r2, [sp, #24]
  41525a:	6853      	ldr	r3, [r2, #4]
  41525c:	e7d4      	b.n	415208 <__gethex+0x458>
  41525e:	9815      	ldr	r0, [sp, #84]	; 0x54
  415260:	2800      	cmp	r0, #0
  415262:	d0d1      	beq.n	415208 <__gethex+0x458>
  415264:	e679      	b.n	414f5a <__gethex+0x1aa>
  415266:	9805      	ldr	r0, [sp, #20]
  415268:	6883      	ldr	r3, [r0, #8]
  41526a:	429e      	cmp	r6, r3
  41526c:	da15      	bge.n	41529a <__gethex+0x4ea>
  41526e:	9f08      	ldr	r7, [sp, #32]
  415270:	4633      	mov	r3, r6
  415272:	9805      	ldr	r0, [sp, #20]
  415274:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  415278:	2101      	movs	r1, #1
  41527a:	3301      	adds	r3, #1
  41527c:	6103      	str	r3, [r0, #16]
  41527e:	6151      	str	r1, [r2, #20]
  415280:	e7af      	b.n	4151e2 <__gethex+0x432>
  415282:	9906      	ldr	r1, [sp, #24]
  415284:	680b      	ldr	r3, [r1, #0]
  415286:	3b01      	subs	r3, #1
  415288:	42a3      	cmp	r3, r4
  41528a:	d01c      	beq.n	4152c6 <__gethex+0x516>
  41528c:	2522      	movs	r5, #34	; 0x22
  41528e:	e707      	b.n	4150a0 <__gethex+0x2f0>
  415290:	4613      	mov	r3, r2
  415292:	4625      	mov	r5, r4
  415294:	e6c1      	b.n	41501a <__gethex+0x26a>
  415296:	465c      	mov	r4, fp
  415298:	e5cc      	b.n	414e34 <__gethex+0x84>
  41529a:	6841      	ldr	r1, [r0, #4]
  41529c:	9807      	ldr	r0, [sp, #28]
  41529e:	3101      	adds	r1, #1
  4152a0:	f7fd f956 	bl	412550 <_Balloc>
  4152a4:	9905      	ldr	r1, [sp, #20]
  4152a6:	690b      	ldr	r3, [r1, #16]
  4152a8:	1c9a      	adds	r2, r3, #2
  4152aa:	4607      	mov	r7, r0
  4152ac:	0092      	lsls	r2, r2, #2
  4152ae:	310c      	adds	r1, #12
  4152b0:	300c      	adds	r0, #12
  4152b2:	f7f7 fdf5 	bl	40cea0 <memcpy>
  4152b6:	9807      	ldr	r0, [sp, #28]
  4152b8:	9905      	ldr	r1, [sp, #20]
  4152ba:	f7fd f96f 	bl	41259c <_Bfree>
  4152be:	9705      	str	r7, [sp, #20]
  4152c0:	693b      	ldr	r3, [r7, #16]
  4152c2:	3714      	adds	r7, #20
  4152c4:	e7d5      	b.n	415272 <__gethex+0x4c2>
  4152c6:	1163      	asrs	r3, r4, #5
  4152c8:	2201      	movs	r2, #1
  4152ca:	f004 041f 	and.w	r4, r4, #31
  4152ce:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  4152d2:	40a2      	lsls	r2, r4
  4152d4:	421a      	tst	r2, r3
  4152d6:	bf14      	ite	ne
  4152d8:	2521      	movne	r5, #33	; 0x21
  4152da:	2522      	moveq	r5, #34	; 0x22
  4152dc:	e6e0      	b.n	4150a0 <__gethex+0x2f0>
  4152de:	bf00      	nop

004152e0 <__hexnan>:
  4152e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4152e4:	680b      	ldr	r3, [r1, #0]
  4152e6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 415470 <__hexnan+0x190>
  4152ea:	b084      	sub	sp, #16
  4152ec:	4691      	mov	r9, r2
  4152ee:	115a      	asrs	r2, r3, #5
  4152f0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  4152f4:	f013 031f 	ands.w	r3, r3, #31
  4152f8:	9200      	str	r2, [sp, #0]
  4152fa:	9001      	str	r0, [sp, #4]
  4152fc:	bf1c      	itt	ne
  4152fe:	3204      	addne	r2, #4
  415300:	9200      	strne	r2, [sp, #0]
  415302:	9a01      	ldr	r2, [sp, #4]
  415304:	9800      	ldr	r0, [sp, #0]
  415306:	9303      	str	r3, [sp, #12]
  415308:	6811      	ldr	r1, [r2, #0]
  41530a:	2300      	movs	r3, #0
  41530c:	f840 3c04 	str.w	r3, [r0, #-4]
  415310:	469a      	mov	sl, r3
  415312:	461d      	mov	r5, r3
  415314:	461e      	mov	r6, r3
  415316:	784b      	ldrb	r3, [r1, #1]
  415318:	1f07      	subs	r7, r0, #4
  41531a:	46bc      	mov	ip, r7
  41531c:	4638      	mov	r0, r7
  41531e:	9702      	str	r7, [sp, #8]
  415320:	b33b      	cbz	r3, 415372 <__hexnan+0x92>
  415322:	f818 2003 	ldrb.w	r2, [r8, r3]
  415326:	2a00      	cmp	r2, #0
  415328:	d148      	bne.n	4153bc <__hexnan+0xdc>
  41532a:	2b20      	cmp	r3, #32
  41532c:	d866      	bhi.n	4153fc <__hexnan+0x11c>
  41532e:	42ae      	cmp	r6, r5
  415330:	dd1b      	ble.n	41536a <__hexnan+0x8a>
  415332:	4560      	cmp	r0, ip
  415334:	d215      	bcs.n	415362 <__hexnan+0x82>
  415336:	f1ba 0f07 	cmp.w	sl, #7
  41533a:	dc12      	bgt.n	415362 <__hexnan+0x82>
  41533c:	f1ca 0a08 	rsb	sl, sl, #8
  415340:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  415344:	6802      	ldr	r2, [r0, #0]
  415346:	f1ca 0b20 	rsb	fp, sl, #32
  41534a:	4603      	mov	r3, r0
  41534c:	685c      	ldr	r4, [r3, #4]
  41534e:	fa04 f70b 	lsl.w	r7, r4, fp
  415352:	4317      	orrs	r7, r2
  415354:	fa24 f20a 	lsr.w	r2, r4, sl
  415358:	601f      	str	r7, [r3, #0]
  41535a:	f843 2f04 	str.w	r2, [r3, #4]!
  41535e:	459c      	cmp	ip, r3
  415360:	d8f4      	bhi.n	41534c <__hexnan+0x6c>
  415362:	4548      	cmp	r0, r9
  415364:	d841      	bhi.n	4153ea <__hexnan+0x10a>
  415366:	f04f 0a08 	mov.w	sl, #8
  41536a:	3101      	adds	r1, #1
  41536c:	784b      	ldrb	r3, [r1, #1]
  41536e:	2b00      	cmp	r3, #0
  415370:	d1d7      	bne.n	415322 <__hexnan+0x42>
  415372:	9f02      	ldr	r7, [sp, #8]
  415374:	2e00      	cmp	r6, #0
  415376:	d044      	beq.n	415402 <__hexnan+0x122>
  415378:	4560      	cmp	r0, ip
  41537a:	d202      	bcs.n	415382 <__hexnan+0xa2>
  41537c:	f1ba 0f07 	cmp.w	sl, #7
  415380:	dd62      	ble.n	415448 <__hexnan+0x168>
  415382:	4581      	cmp	r9, r0
  415384:	d242      	bcs.n	41540c <__hexnan+0x12c>
  415386:	464b      	mov	r3, r9
  415388:	f850 2b04 	ldr.w	r2, [r0], #4
  41538c:	f843 2b04 	str.w	r2, [r3], #4
  415390:	4287      	cmp	r7, r0
  415392:	d2f9      	bcs.n	415388 <__hexnan+0xa8>
  415394:	2200      	movs	r2, #0
  415396:	f843 2b04 	str.w	r2, [r3], #4
  41539a:	429f      	cmp	r7, r3
  41539c:	d2fb      	bcs.n	415396 <__hexnan+0xb6>
  41539e:	9800      	ldr	r0, [sp, #0]
  4153a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4153a4:	b92b      	cbnz	r3, 4153b2 <__hexnan+0xd2>
  4153a6:	45b9      	cmp	r9, r7
  4153a8:	d041      	beq.n	41542e <__hexnan+0x14e>
  4153aa:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  4153ae:	2b00      	cmp	r3, #0
  4153b0:	d0f9      	beq.n	4153a6 <__hexnan+0xc6>
  4153b2:	2005      	movs	r0, #5
  4153b4:	b004      	add	sp, #16
  4153b6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4153ba:	4770      	bx	lr
  4153bc:	f10a 0a01 	add.w	sl, sl, #1
  4153c0:	f1ba 0f08 	cmp.w	sl, #8
  4153c4:	f106 0601 	add.w	r6, r6, #1
  4153c8:	dc06      	bgt.n	4153d8 <__hexnan+0xf8>
  4153ca:	6803      	ldr	r3, [r0, #0]
  4153cc:	011b      	lsls	r3, r3, #4
  4153ce:	f002 020f 	and.w	r2, r2, #15
  4153d2:	431a      	orrs	r2, r3
  4153d4:	6002      	str	r2, [r0, #0]
  4153d6:	e7c8      	b.n	41536a <__hexnan+0x8a>
  4153d8:	4548      	cmp	r0, r9
  4153da:	d9c6      	bls.n	41536a <__hexnan+0x8a>
  4153dc:	2300      	movs	r3, #0
  4153de:	f840 3c04 	str.w	r3, [r0, #-4]
  4153e2:	f04f 0a01 	mov.w	sl, #1
  4153e6:	3804      	subs	r0, #4
  4153e8:	e7f1      	b.n	4153ce <__hexnan+0xee>
  4153ea:	2300      	movs	r3, #0
  4153ec:	f1a0 0c04 	sub.w	ip, r0, #4
  4153f0:	f840 3c04 	str.w	r3, [r0, #-4]
  4153f4:	4635      	mov	r5, r6
  4153f6:	4660      	mov	r0, ip
  4153f8:	469a      	mov	sl, r3
  4153fa:	e7b6      	b.n	41536a <__hexnan+0x8a>
  4153fc:	2b29      	cmp	r3, #41	; 0x29
  4153fe:	9f02      	ldr	r7, [sp, #8]
  415400:	d01c      	beq.n	41543c <__hexnan+0x15c>
  415402:	2004      	movs	r0, #4
  415404:	b004      	add	sp, #16
  415406:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41540a:	4770      	bx	lr
  41540c:	9a03      	ldr	r2, [sp, #12]
  41540e:	2a00      	cmp	r2, #0
  415410:	d0c5      	beq.n	41539e <__hexnan+0xbe>
  415412:	9b03      	ldr	r3, [sp, #12]
  415414:	9800      	ldr	r0, [sp, #0]
  415416:	f1c3 0220 	rsb	r2, r3, #32
  41541a:	f04f 31ff 	mov.w	r1, #4294967295
  41541e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  415422:	fa21 f202 	lsr.w	r2, r1, r2
  415426:	4013      	ands	r3, r2
  415428:	f840 3c04 	str.w	r3, [r0, #-4]
  41542c:	e7ba      	b.n	4153a4 <__hexnan+0xc4>
  41542e:	2301      	movs	r3, #1
  415430:	2005      	movs	r0, #5
  415432:	603b      	str	r3, [r7, #0]
  415434:	b004      	add	sp, #16
  415436:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41543a:	4770      	bx	lr
  41543c:	9a01      	ldr	r2, [sp, #4]
  41543e:	3102      	adds	r1, #2
  415440:	6011      	str	r1, [r2, #0]
  415442:	2e00      	cmp	r6, #0
  415444:	d198      	bne.n	415378 <__hexnan+0x98>
  415446:	e7dc      	b.n	415402 <__hexnan+0x122>
  415448:	f1ca 0508 	rsb	r5, sl, #8
  41544c:	00ad      	lsls	r5, r5, #2
  41544e:	6802      	ldr	r2, [r0, #0]
  415450:	f1c5 0620 	rsb	r6, r5, #32
  415454:	4603      	mov	r3, r0
  415456:	6859      	ldr	r1, [r3, #4]
  415458:	fa01 f406 	lsl.w	r4, r1, r6
  41545c:	4314      	orrs	r4, r2
  41545e:	fa21 f205 	lsr.w	r2, r1, r5
  415462:	601c      	str	r4, [r3, #0]
  415464:	f843 2f04 	str.w	r2, [r3, #4]!
  415468:	4563      	cmp	r3, ip
  41546a:	d3f4      	bcc.n	415456 <__hexnan+0x176>
  41546c:	e789      	b.n	415382 <__hexnan+0xa2>
  41546e:	bf00      	nop
  415470:	004170e8 	.word	0x004170e8

00415474 <_isatty_r>:
  415474:	b538      	push	{r3, r4, r5, lr}
  415476:	4c07      	ldr	r4, [pc, #28]	; (415494 <_isatty_r+0x20>)
  415478:	2300      	movs	r3, #0
  41547a:	4605      	mov	r5, r0
  41547c:	4608      	mov	r0, r1
  41547e:	6023      	str	r3, [r4, #0]
  415480:	f7f6 fe2a 	bl	40c0d8 <_isatty>
  415484:	1c43      	adds	r3, r0, #1
  415486:	d000      	beq.n	41548a <_isatty_r+0x16>
  415488:	bd38      	pop	{r3, r4, r5, pc}
  41548a:	6823      	ldr	r3, [r4, #0]
  41548c:	2b00      	cmp	r3, #0
  41548e:	d0fb      	beq.n	415488 <_isatty_r+0x14>
  415490:	602b      	str	r3, [r5, #0]
  415492:	bd38      	pop	{r3, r4, r5, pc}
  415494:	200040e8 	.word	0x200040e8

00415498 <__aeabi_drsub>:
  415498:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  41549c:	e002      	b.n	4154a4 <__adddf3>
  41549e:	bf00      	nop

004154a0 <__aeabi_dsub>:
  4154a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004154a4 <__adddf3>:
  4154a4:	b530      	push	{r4, r5, lr}
  4154a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4154aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4154ae:	ea94 0f05 	teq	r4, r5
  4154b2:	bf08      	it	eq
  4154b4:	ea90 0f02 	teqeq	r0, r2
  4154b8:	bf1f      	itttt	ne
  4154ba:	ea54 0c00 	orrsne.w	ip, r4, r0
  4154be:	ea55 0c02 	orrsne.w	ip, r5, r2
  4154c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4154c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4154ca:	f000 80e2 	beq.w	415692 <__adddf3+0x1ee>
  4154ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4154d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4154d6:	bfb8      	it	lt
  4154d8:	426d      	neglt	r5, r5
  4154da:	dd0c      	ble.n	4154f6 <__adddf3+0x52>
  4154dc:	442c      	add	r4, r5
  4154de:	ea80 0202 	eor.w	r2, r0, r2
  4154e2:	ea81 0303 	eor.w	r3, r1, r3
  4154e6:	ea82 0000 	eor.w	r0, r2, r0
  4154ea:	ea83 0101 	eor.w	r1, r3, r1
  4154ee:	ea80 0202 	eor.w	r2, r0, r2
  4154f2:	ea81 0303 	eor.w	r3, r1, r3
  4154f6:	2d36      	cmp	r5, #54	; 0x36
  4154f8:	bf88      	it	hi
  4154fa:	bd30      	pophi	{r4, r5, pc}
  4154fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  415500:	ea4f 3101 	mov.w	r1, r1, lsl #12
  415504:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  415508:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  41550c:	d002      	beq.n	415514 <__adddf3+0x70>
  41550e:	4240      	negs	r0, r0
  415510:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  415514:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  415518:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41551c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  415520:	d002      	beq.n	415528 <__adddf3+0x84>
  415522:	4252      	negs	r2, r2
  415524:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  415528:	ea94 0f05 	teq	r4, r5
  41552c:	f000 80a7 	beq.w	41567e <__adddf3+0x1da>
  415530:	f1a4 0401 	sub.w	r4, r4, #1
  415534:	f1d5 0e20 	rsbs	lr, r5, #32
  415538:	db0d      	blt.n	415556 <__adddf3+0xb2>
  41553a:	fa02 fc0e 	lsl.w	ip, r2, lr
  41553e:	fa22 f205 	lsr.w	r2, r2, r5
  415542:	1880      	adds	r0, r0, r2
  415544:	f141 0100 	adc.w	r1, r1, #0
  415548:	fa03 f20e 	lsl.w	r2, r3, lr
  41554c:	1880      	adds	r0, r0, r2
  41554e:	fa43 f305 	asr.w	r3, r3, r5
  415552:	4159      	adcs	r1, r3
  415554:	e00e      	b.n	415574 <__adddf3+0xd0>
  415556:	f1a5 0520 	sub.w	r5, r5, #32
  41555a:	f10e 0e20 	add.w	lr, lr, #32
  41555e:	2a01      	cmp	r2, #1
  415560:	fa03 fc0e 	lsl.w	ip, r3, lr
  415564:	bf28      	it	cs
  415566:	f04c 0c02 	orrcs.w	ip, ip, #2
  41556a:	fa43 f305 	asr.w	r3, r3, r5
  41556e:	18c0      	adds	r0, r0, r3
  415570:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  415574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  415578:	d507      	bpl.n	41558a <__adddf3+0xe6>
  41557a:	f04f 0e00 	mov.w	lr, #0
  41557e:	f1dc 0c00 	rsbs	ip, ip, #0
  415582:	eb7e 0000 	sbcs.w	r0, lr, r0
  415586:	eb6e 0101 	sbc.w	r1, lr, r1
  41558a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41558e:	d31b      	bcc.n	4155c8 <__adddf3+0x124>
  415590:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  415594:	d30c      	bcc.n	4155b0 <__adddf3+0x10c>
  415596:	0849      	lsrs	r1, r1, #1
  415598:	ea5f 0030 	movs.w	r0, r0, rrx
  41559c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4155a0:	f104 0401 	add.w	r4, r4, #1
  4155a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4155a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4155ac:	f080 809a 	bcs.w	4156e4 <__adddf3+0x240>
  4155b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4155b4:	bf08      	it	eq
  4155b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4155ba:	f150 0000 	adcs.w	r0, r0, #0
  4155be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4155c2:	ea41 0105 	orr.w	r1, r1, r5
  4155c6:	bd30      	pop	{r4, r5, pc}
  4155c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4155cc:	4140      	adcs	r0, r0
  4155ce:	eb41 0101 	adc.w	r1, r1, r1
  4155d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4155d6:	f1a4 0401 	sub.w	r4, r4, #1
  4155da:	d1e9      	bne.n	4155b0 <__adddf3+0x10c>
  4155dc:	f091 0f00 	teq	r1, #0
  4155e0:	bf04      	itt	eq
  4155e2:	4601      	moveq	r1, r0
  4155e4:	2000      	moveq	r0, #0
  4155e6:	fab1 f381 	clz	r3, r1
  4155ea:	bf08      	it	eq
  4155ec:	3320      	addeq	r3, #32
  4155ee:	f1a3 030b 	sub.w	r3, r3, #11
  4155f2:	f1b3 0220 	subs.w	r2, r3, #32
  4155f6:	da0c      	bge.n	415612 <__adddf3+0x16e>
  4155f8:	320c      	adds	r2, #12
  4155fa:	dd08      	ble.n	41560e <__adddf3+0x16a>
  4155fc:	f102 0c14 	add.w	ip, r2, #20
  415600:	f1c2 020c 	rsb	r2, r2, #12
  415604:	fa01 f00c 	lsl.w	r0, r1, ip
  415608:	fa21 f102 	lsr.w	r1, r1, r2
  41560c:	e00c      	b.n	415628 <__adddf3+0x184>
  41560e:	f102 0214 	add.w	r2, r2, #20
  415612:	bfd8      	it	le
  415614:	f1c2 0c20 	rsble	ip, r2, #32
  415618:	fa01 f102 	lsl.w	r1, r1, r2
  41561c:	fa20 fc0c 	lsr.w	ip, r0, ip
  415620:	bfdc      	itt	le
  415622:	ea41 010c 	orrle.w	r1, r1, ip
  415626:	4090      	lslle	r0, r2
  415628:	1ae4      	subs	r4, r4, r3
  41562a:	bfa2      	ittt	ge
  41562c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  415630:	4329      	orrge	r1, r5
  415632:	bd30      	popge	{r4, r5, pc}
  415634:	ea6f 0404 	mvn.w	r4, r4
  415638:	3c1f      	subs	r4, #31
  41563a:	da1c      	bge.n	415676 <__adddf3+0x1d2>
  41563c:	340c      	adds	r4, #12
  41563e:	dc0e      	bgt.n	41565e <__adddf3+0x1ba>
  415640:	f104 0414 	add.w	r4, r4, #20
  415644:	f1c4 0220 	rsb	r2, r4, #32
  415648:	fa20 f004 	lsr.w	r0, r0, r4
  41564c:	fa01 f302 	lsl.w	r3, r1, r2
  415650:	ea40 0003 	orr.w	r0, r0, r3
  415654:	fa21 f304 	lsr.w	r3, r1, r4
  415658:	ea45 0103 	orr.w	r1, r5, r3
  41565c:	bd30      	pop	{r4, r5, pc}
  41565e:	f1c4 040c 	rsb	r4, r4, #12
  415662:	f1c4 0220 	rsb	r2, r4, #32
  415666:	fa20 f002 	lsr.w	r0, r0, r2
  41566a:	fa01 f304 	lsl.w	r3, r1, r4
  41566e:	ea40 0003 	orr.w	r0, r0, r3
  415672:	4629      	mov	r1, r5
  415674:	bd30      	pop	{r4, r5, pc}
  415676:	fa21 f004 	lsr.w	r0, r1, r4
  41567a:	4629      	mov	r1, r5
  41567c:	bd30      	pop	{r4, r5, pc}
  41567e:	f094 0f00 	teq	r4, #0
  415682:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  415686:	bf06      	itte	eq
  415688:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  41568c:	3401      	addeq	r4, #1
  41568e:	3d01      	subne	r5, #1
  415690:	e74e      	b.n	415530 <__adddf3+0x8c>
  415692:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  415696:	bf18      	it	ne
  415698:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41569c:	d029      	beq.n	4156f2 <__adddf3+0x24e>
  41569e:	ea94 0f05 	teq	r4, r5
  4156a2:	bf08      	it	eq
  4156a4:	ea90 0f02 	teqeq	r0, r2
  4156a8:	d005      	beq.n	4156b6 <__adddf3+0x212>
  4156aa:	ea54 0c00 	orrs.w	ip, r4, r0
  4156ae:	bf04      	itt	eq
  4156b0:	4619      	moveq	r1, r3
  4156b2:	4610      	moveq	r0, r2
  4156b4:	bd30      	pop	{r4, r5, pc}
  4156b6:	ea91 0f03 	teq	r1, r3
  4156ba:	bf1e      	ittt	ne
  4156bc:	2100      	movne	r1, #0
  4156be:	2000      	movne	r0, #0
  4156c0:	bd30      	popne	{r4, r5, pc}
  4156c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4156c6:	d105      	bne.n	4156d4 <__adddf3+0x230>
  4156c8:	0040      	lsls	r0, r0, #1
  4156ca:	4149      	adcs	r1, r1
  4156cc:	bf28      	it	cs
  4156ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4156d2:	bd30      	pop	{r4, r5, pc}
  4156d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4156d8:	bf3c      	itt	cc
  4156da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4156de:	bd30      	popcc	{r4, r5, pc}
  4156e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4156e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4156e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4156ec:	f04f 0000 	mov.w	r0, #0
  4156f0:	bd30      	pop	{r4, r5, pc}
  4156f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4156f6:	bf1a      	itte	ne
  4156f8:	4619      	movne	r1, r3
  4156fa:	4610      	movne	r0, r2
  4156fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  415700:	bf1c      	itt	ne
  415702:	460b      	movne	r3, r1
  415704:	4602      	movne	r2, r0
  415706:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41570a:	bf06      	itte	eq
  41570c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  415710:	ea91 0f03 	teqeq	r1, r3
  415714:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  415718:	bd30      	pop	{r4, r5, pc}
  41571a:	bf00      	nop

0041571c <__aeabi_ui2d>:
  41571c:	f090 0f00 	teq	r0, #0
  415720:	bf04      	itt	eq
  415722:	2100      	moveq	r1, #0
  415724:	4770      	bxeq	lr
  415726:	b530      	push	{r4, r5, lr}
  415728:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41572c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  415730:	f04f 0500 	mov.w	r5, #0
  415734:	f04f 0100 	mov.w	r1, #0
  415738:	e750      	b.n	4155dc <__adddf3+0x138>
  41573a:	bf00      	nop

0041573c <__aeabi_i2d>:
  41573c:	f090 0f00 	teq	r0, #0
  415740:	bf04      	itt	eq
  415742:	2100      	moveq	r1, #0
  415744:	4770      	bxeq	lr
  415746:	b530      	push	{r4, r5, lr}
  415748:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41574c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  415750:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  415754:	bf48      	it	mi
  415756:	4240      	negmi	r0, r0
  415758:	f04f 0100 	mov.w	r1, #0
  41575c:	e73e      	b.n	4155dc <__adddf3+0x138>
  41575e:	bf00      	nop

00415760 <__aeabi_f2d>:
  415760:	0042      	lsls	r2, r0, #1
  415762:	ea4f 01e2 	mov.w	r1, r2, asr #3
  415766:	ea4f 0131 	mov.w	r1, r1, rrx
  41576a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41576e:	bf1f      	itttt	ne
  415770:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  415774:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  415778:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  41577c:	4770      	bxne	lr
  41577e:	f092 0f00 	teq	r2, #0
  415782:	bf14      	ite	ne
  415784:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  415788:	4770      	bxeq	lr
  41578a:	b530      	push	{r4, r5, lr}
  41578c:	f44f 7460 	mov.w	r4, #896	; 0x380
  415790:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  415794:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  415798:	e720      	b.n	4155dc <__adddf3+0x138>
  41579a:	bf00      	nop

0041579c <__aeabi_ul2d>:
  41579c:	ea50 0201 	orrs.w	r2, r0, r1
  4157a0:	bf08      	it	eq
  4157a2:	4770      	bxeq	lr
  4157a4:	b530      	push	{r4, r5, lr}
  4157a6:	f04f 0500 	mov.w	r5, #0
  4157aa:	e00a      	b.n	4157c2 <__aeabi_l2d+0x16>

004157ac <__aeabi_l2d>:
  4157ac:	ea50 0201 	orrs.w	r2, r0, r1
  4157b0:	bf08      	it	eq
  4157b2:	4770      	bxeq	lr
  4157b4:	b530      	push	{r4, r5, lr}
  4157b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4157ba:	d502      	bpl.n	4157c2 <__aeabi_l2d+0x16>
  4157bc:	4240      	negs	r0, r0
  4157be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4157c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4157c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4157ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4157ce:	f43f aedc 	beq.w	41558a <__adddf3+0xe6>
  4157d2:	f04f 0203 	mov.w	r2, #3
  4157d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4157da:	bf18      	it	ne
  4157dc:	3203      	addne	r2, #3
  4157de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4157e2:	bf18      	it	ne
  4157e4:	3203      	addne	r2, #3
  4157e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4157ea:	f1c2 0320 	rsb	r3, r2, #32
  4157ee:	fa00 fc03 	lsl.w	ip, r0, r3
  4157f2:	fa20 f002 	lsr.w	r0, r0, r2
  4157f6:	fa01 fe03 	lsl.w	lr, r1, r3
  4157fa:	ea40 000e 	orr.w	r0, r0, lr
  4157fe:	fa21 f102 	lsr.w	r1, r1, r2
  415802:	4414      	add	r4, r2
  415804:	e6c1      	b.n	41558a <__adddf3+0xe6>
  415806:	bf00      	nop

00415808 <__aeabi_dmul>:
  415808:	b570      	push	{r4, r5, r6, lr}
  41580a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41580e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  415812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  415816:	bf1d      	ittte	ne
  415818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41581c:	ea94 0f0c 	teqne	r4, ip
  415820:	ea95 0f0c 	teqne	r5, ip
  415824:	f000 f8de 	bleq	4159e4 <__aeabi_dmul+0x1dc>
  415828:	442c      	add	r4, r5
  41582a:	ea81 0603 	eor.w	r6, r1, r3
  41582e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  415832:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  415836:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41583a:	bf18      	it	ne
  41583c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  415840:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  415848:	d038      	beq.n	4158bc <__aeabi_dmul+0xb4>
  41584a:	fba0 ce02 	umull	ip, lr, r0, r2
  41584e:	f04f 0500 	mov.w	r5, #0
  415852:	fbe1 e502 	umlal	lr, r5, r1, r2
  415856:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41585a:	fbe0 e503 	umlal	lr, r5, r0, r3
  41585e:	f04f 0600 	mov.w	r6, #0
  415862:	fbe1 5603 	umlal	r5, r6, r1, r3
  415866:	f09c 0f00 	teq	ip, #0
  41586a:	bf18      	it	ne
  41586c:	f04e 0e01 	orrne.w	lr, lr, #1
  415870:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  415874:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  415878:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  41587c:	d204      	bcs.n	415888 <__aeabi_dmul+0x80>
  41587e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  415882:	416d      	adcs	r5, r5
  415884:	eb46 0606 	adc.w	r6, r6, r6
  415888:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  41588c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  415890:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  415894:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  415898:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  41589c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4158a0:	bf88      	it	hi
  4158a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4158a6:	d81e      	bhi.n	4158e6 <__aeabi_dmul+0xde>
  4158a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4158ac:	bf08      	it	eq
  4158ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4158b2:	f150 0000 	adcs.w	r0, r0, #0
  4158b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4158ba:	bd70      	pop	{r4, r5, r6, pc}
  4158bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4158c0:	ea46 0101 	orr.w	r1, r6, r1
  4158c4:	ea40 0002 	orr.w	r0, r0, r2
  4158c8:	ea81 0103 	eor.w	r1, r1, r3
  4158cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4158d0:	bfc2      	ittt	gt
  4158d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4158d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4158da:	bd70      	popgt	{r4, r5, r6, pc}
  4158dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4158e0:	f04f 0e00 	mov.w	lr, #0
  4158e4:	3c01      	subs	r4, #1
  4158e6:	f300 80ab 	bgt.w	415a40 <__aeabi_dmul+0x238>
  4158ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4158ee:	bfde      	ittt	le
  4158f0:	2000      	movle	r0, #0
  4158f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4158f6:	bd70      	pople	{r4, r5, r6, pc}
  4158f8:	f1c4 0400 	rsb	r4, r4, #0
  4158fc:	3c20      	subs	r4, #32
  4158fe:	da35      	bge.n	41596c <__aeabi_dmul+0x164>
  415900:	340c      	adds	r4, #12
  415902:	dc1b      	bgt.n	41593c <__aeabi_dmul+0x134>
  415904:	f104 0414 	add.w	r4, r4, #20
  415908:	f1c4 0520 	rsb	r5, r4, #32
  41590c:	fa00 f305 	lsl.w	r3, r0, r5
  415910:	fa20 f004 	lsr.w	r0, r0, r4
  415914:	fa01 f205 	lsl.w	r2, r1, r5
  415918:	ea40 0002 	orr.w	r0, r0, r2
  41591c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  415920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  415924:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  415928:	fa21 f604 	lsr.w	r6, r1, r4
  41592c:	eb42 0106 	adc.w	r1, r2, r6
  415930:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415934:	bf08      	it	eq
  415936:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41593a:	bd70      	pop	{r4, r5, r6, pc}
  41593c:	f1c4 040c 	rsb	r4, r4, #12
  415940:	f1c4 0520 	rsb	r5, r4, #32
  415944:	fa00 f304 	lsl.w	r3, r0, r4
  415948:	fa20 f005 	lsr.w	r0, r0, r5
  41594c:	fa01 f204 	lsl.w	r2, r1, r4
  415950:	ea40 0002 	orr.w	r0, r0, r2
  415954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415958:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41595c:	f141 0100 	adc.w	r1, r1, #0
  415960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415964:	bf08      	it	eq
  415966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41596a:	bd70      	pop	{r4, r5, r6, pc}
  41596c:	f1c4 0520 	rsb	r5, r4, #32
  415970:	fa00 f205 	lsl.w	r2, r0, r5
  415974:	ea4e 0e02 	orr.w	lr, lr, r2
  415978:	fa20 f304 	lsr.w	r3, r0, r4
  41597c:	fa01 f205 	lsl.w	r2, r1, r5
  415980:	ea43 0302 	orr.w	r3, r3, r2
  415984:	fa21 f004 	lsr.w	r0, r1, r4
  415988:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41598c:	fa21 f204 	lsr.w	r2, r1, r4
  415990:	ea20 0002 	bic.w	r0, r0, r2
  415994:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  415998:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41599c:	bf08      	it	eq
  41599e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4159a2:	bd70      	pop	{r4, r5, r6, pc}
  4159a4:	f094 0f00 	teq	r4, #0
  4159a8:	d10f      	bne.n	4159ca <__aeabi_dmul+0x1c2>
  4159aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4159ae:	0040      	lsls	r0, r0, #1
  4159b0:	eb41 0101 	adc.w	r1, r1, r1
  4159b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4159b8:	bf08      	it	eq
  4159ba:	3c01      	subeq	r4, #1
  4159bc:	d0f7      	beq.n	4159ae <__aeabi_dmul+0x1a6>
  4159be:	ea41 0106 	orr.w	r1, r1, r6
  4159c2:	f095 0f00 	teq	r5, #0
  4159c6:	bf18      	it	ne
  4159c8:	4770      	bxne	lr
  4159ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4159ce:	0052      	lsls	r2, r2, #1
  4159d0:	eb43 0303 	adc.w	r3, r3, r3
  4159d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4159d8:	bf08      	it	eq
  4159da:	3d01      	subeq	r5, #1
  4159dc:	d0f7      	beq.n	4159ce <__aeabi_dmul+0x1c6>
  4159de:	ea43 0306 	orr.w	r3, r3, r6
  4159e2:	4770      	bx	lr
  4159e4:	ea94 0f0c 	teq	r4, ip
  4159e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4159ec:	bf18      	it	ne
  4159ee:	ea95 0f0c 	teqne	r5, ip
  4159f2:	d00c      	beq.n	415a0e <__aeabi_dmul+0x206>
  4159f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4159f8:	bf18      	it	ne
  4159fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4159fe:	d1d1      	bne.n	4159a4 <__aeabi_dmul+0x19c>
  415a00:	ea81 0103 	eor.w	r1, r1, r3
  415a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415a08:	f04f 0000 	mov.w	r0, #0
  415a0c:	bd70      	pop	{r4, r5, r6, pc}
  415a0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  415a12:	bf06      	itte	eq
  415a14:	4610      	moveq	r0, r2
  415a16:	4619      	moveq	r1, r3
  415a18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  415a1c:	d019      	beq.n	415a52 <__aeabi_dmul+0x24a>
  415a1e:	ea94 0f0c 	teq	r4, ip
  415a22:	d102      	bne.n	415a2a <__aeabi_dmul+0x222>
  415a24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  415a28:	d113      	bne.n	415a52 <__aeabi_dmul+0x24a>
  415a2a:	ea95 0f0c 	teq	r5, ip
  415a2e:	d105      	bne.n	415a3c <__aeabi_dmul+0x234>
  415a30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  415a34:	bf1c      	itt	ne
  415a36:	4610      	movne	r0, r2
  415a38:	4619      	movne	r1, r3
  415a3a:	d10a      	bne.n	415a52 <__aeabi_dmul+0x24a>
  415a3c:	ea81 0103 	eor.w	r1, r1, r3
  415a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415a44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  415a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  415a4c:	f04f 0000 	mov.w	r0, #0
  415a50:	bd70      	pop	{r4, r5, r6, pc}
  415a52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  415a56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  415a5a:	bd70      	pop	{r4, r5, r6, pc}

00415a5c <__aeabi_ddiv>:
  415a5c:	b570      	push	{r4, r5, r6, lr}
  415a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  415a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  415a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  415a6a:	bf1d      	ittte	ne
  415a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  415a70:	ea94 0f0c 	teqne	r4, ip
  415a74:	ea95 0f0c 	teqne	r5, ip
  415a78:	f000 f8a7 	bleq	415bca <__aeabi_ddiv+0x16e>
  415a7c:	eba4 0405 	sub.w	r4, r4, r5
  415a80:	ea81 0e03 	eor.w	lr, r1, r3
  415a84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415a88:	ea4f 3101 	mov.w	r1, r1, lsl #12
  415a8c:	f000 8088 	beq.w	415ba0 <__aeabi_ddiv+0x144>
  415a90:	ea4f 3303 	mov.w	r3, r3, lsl #12
  415a94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  415a98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  415a9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  415aa0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  415aa4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  415aa8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  415aac:	ea4f 2600 	mov.w	r6, r0, lsl #8
  415ab0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  415ab4:	429d      	cmp	r5, r3
  415ab6:	bf08      	it	eq
  415ab8:	4296      	cmpeq	r6, r2
  415aba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  415abe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  415ac2:	d202      	bcs.n	415aca <__aeabi_ddiv+0x6e>
  415ac4:	085b      	lsrs	r3, r3, #1
  415ac6:	ea4f 0232 	mov.w	r2, r2, rrx
  415aca:	1ab6      	subs	r6, r6, r2
  415acc:	eb65 0503 	sbc.w	r5, r5, r3
  415ad0:	085b      	lsrs	r3, r3, #1
  415ad2:	ea4f 0232 	mov.w	r2, r2, rrx
  415ad6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  415ada:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  415ade:	ebb6 0e02 	subs.w	lr, r6, r2
  415ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
  415ae6:	bf22      	ittt	cs
  415ae8:	1ab6      	subcs	r6, r6, r2
  415aea:	4675      	movcs	r5, lr
  415aec:	ea40 000c 	orrcs.w	r0, r0, ip
  415af0:	085b      	lsrs	r3, r3, #1
  415af2:	ea4f 0232 	mov.w	r2, r2, rrx
  415af6:	ebb6 0e02 	subs.w	lr, r6, r2
  415afa:	eb75 0e03 	sbcs.w	lr, r5, r3
  415afe:	bf22      	ittt	cs
  415b00:	1ab6      	subcs	r6, r6, r2
  415b02:	4675      	movcs	r5, lr
  415b04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  415b08:	085b      	lsrs	r3, r3, #1
  415b0a:	ea4f 0232 	mov.w	r2, r2, rrx
  415b0e:	ebb6 0e02 	subs.w	lr, r6, r2
  415b12:	eb75 0e03 	sbcs.w	lr, r5, r3
  415b16:	bf22      	ittt	cs
  415b18:	1ab6      	subcs	r6, r6, r2
  415b1a:	4675      	movcs	r5, lr
  415b1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  415b20:	085b      	lsrs	r3, r3, #1
  415b22:	ea4f 0232 	mov.w	r2, r2, rrx
  415b26:	ebb6 0e02 	subs.w	lr, r6, r2
  415b2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  415b2e:	bf22      	ittt	cs
  415b30:	1ab6      	subcs	r6, r6, r2
  415b32:	4675      	movcs	r5, lr
  415b34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  415b38:	ea55 0e06 	orrs.w	lr, r5, r6
  415b3c:	d018      	beq.n	415b70 <__aeabi_ddiv+0x114>
  415b3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  415b42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  415b46:	ea4f 1606 	mov.w	r6, r6, lsl #4
  415b4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  415b4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  415b52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  415b56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  415b5a:	d1c0      	bne.n	415ade <__aeabi_ddiv+0x82>
  415b5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415b60:	d10b      	bne.n	415b7a <__aeabi_ddiv+0x11e>
  415b62:	ea41 0100 	orr.w	r1, r1, r0
  415b66:	f04f 0000 	mov.w	r0, #0
  415b6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  415b6e:	e7b6      	b.n	415ade <__aeabi_ddiv+0x82>
  415b70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415b74:	bf04      	itt	eq
  415b76:	4301      	orreq	r1, r0
  415b78:	2000      	moveq	r0, #0
  415b7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  415b7e:	bf88      	it	hi
  415b80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  415b84:	f63f aeaf 	bhi.w	4158e6 <__aeabi_dmul+0xde>
  415b88:	ebb5 0c03 	subs.w	ip, r5, r3
  415b8c:	bf04      	itt	eq
  415b8e:	ebb6 0c02 	subseq.w	ip, r6, r2
  415b92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  415b96:	f150 0000 	adcs.w	r0, r0, #0
  415b9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  415b9e:	bd70      	pop	{r4, r5, r6, pc}
  415ba0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  415ba4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  415ba8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  415bac:	bfc2      	ittt	gt
  415bae:	ebd4 050c 	rsbsgt	r5, r4, ip
  415bb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  415bb6:	bd70      	popgt	{r4, r5, r6, pc}
  415bb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415bbc:	f04f 0e00 	mov.w	lr, #0
  415bc0:	3c01      	subs	r4, #1
  415bc2:	e690      	b.n	4158e6 <__aeabi_dmul+0xde>
  415bc4:	ea45 0e06 	orr.w	lr, r5, r6
  415bc8:	e68d      	b.n	4158e6 <__aeabi_dmul+0xde>
  415bca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  415bce:	ea94 0f0c 	teq	r4, ip
  415bd2:	bf08      	it	eq
  415bd4:	ea95 0f0c 	teqeq	r5, ip
  415bd8:	f43f af3b 	beq.w	415a52 <__aeabi_dmul+0x24a>
  415bdc:	ea94 0f0c 	teq	r4, ip
  415be0:	d10a      	bne.n	415bf8 <__aeabi_ddiv+0x19c>
  415be2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  415be6:	f47f af34 	bne.w	415a52 <__aeabi_dmul+0x24a>
  415bea:	ea95 0f0c 	teq	r5, ip
  415bee:	f47f af25 	bne.w	415a3c <__aeabi_dmul+0x234>
  415bf2:	4610      	mov	r0, r2
  415bf4:	4619      	mov	r1, r3
  415bf6:	e72c      	b.n	415a52 <__aeabi_dmul+0x24a>
  415bf8:	ea95 0f0c 	teq	r5, ip
  415bfc:	d106      	bne.n	415c0c <__aeabi_ddiv+0x1b0>
  415bfe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415c02:	f43f aefd 	beq.w	415a00 <__aeabi_dmul+0x1f8>
  415c06:	4610      	mov	r0, r2
  415c08:	4619      	mov	r1, r3
  415c0a:	e722      	b.n	415a52 <__aeabi_dmul+0x24a>
  415c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  415c10:	bf18      	it	ne
  415c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  415c16:	f47f aec5 	bne.w	4159a4 <__aeabi_dmul+0x19c>
  415c1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  415c1e:	f47f af0d 	bne.w	415a3c <__aeabi_dmul+0x234>
  415c22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  415c26:	f47f aeeb 	bne.w	415a00 <__aeabi_dmul+0x1f8>
  415c2a:	e712      	b.n	415a52 <__aeabi_dmul+0x24a>

00415c2c <__gedf2>:
  415c2c:	f04f 3cff 	mov.w	ip, #4294967295
  415c30:	e006      	b.n	415c40 <__cmpdf2+0x4>
  415c32:	bf00      	nop

00415c34 <__ledf2>:
  415c34:	f04f 0c01 	mov.w	ip, #1
  415c38:	e002      	b.n	415c40 <__cmpdf2+0x4>
  415c3a:	bf00      	nop

00415c3c <__cmpdf2>:
  415c3c:	f04f 0c01 	mov.w	ip, #1
  415c40:	f84d cd04 	str.w	ip, [sp, #-4]!
  415c44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  415c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  415c50:	bf18      	it	ne
  415c52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  415c56:	d01b      	beq.n	415c90 <__cmpdf2+0x54>
  415c58:	b001      	add	sp, #4
  415c5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  415c5e:	bf0c      	ite	eq
  415c60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  415c64:	ea91 0f03 	teqne	r1, r3
  415c68:	bf02      	ittt	eq
  415c6a:	ea90 0f02 	teqeq	r0, r2
  415c6e:	2000      	moveq	r0, #0
  415c70:	4770      	bxeq	lr
  415c72:	f110 0f00 	cmn.w	r0, #0
  415c76:	ea91 0f03 	teq	r1, r3
  415c7a:	bf58      	it	pl
  415c7c:	4299      	cmppl	r1, r3
  415c7e:	bf08      	it	eq
  415c80:	4290      	cmpeq	r0, r2
  415c82:	bf2c      	ite	cs
  415c84:	17d8      	asrcs	r0, r3, #31
  415c86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  415c8a:	f040 0001 	orr.w	r0, r0, #1
  415c8e:	4770      	bx	lr
  415c90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  415c94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415c98:	d102      	bne.n	415ca0 <__cmpdf2+0x64>
  415c9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  415c9e:	d107      	bne.n	415cb0 <__cmpdf2+0x74>
  415ca0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  415ca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415ca8:	d1d6      	bne.n	415c58 <__cmpdf2+0x1c>
  415caa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  415cae:	d0d3      	beq.n	415c58 <__cmpdf2+0x1c>
  415cb0:	f85d 0b04 	ldr.w	r0, [sp], #4
  415cb4:	4770      	bx	lr
  415cb6:	bf00      	nop

00415cb8 <__aeabi_cdrcmple>:
  415cb8:	4684      	mov	ip, r0
  415cba:	4610      	mov	r0, r2
  415cbc:	4662      	mov	r2, ip
  415cbe:	468c      	mov	ip, r1
  415cc0:	4619      	mov	r1, r3
  415cc2:	4663      	mov	r3, ip
  415cc4:	e000      	b.n	415cc8 <__aeabi_cdcmpeq>
  415cc6:	bf00      	nop

00415cc8 <__aeabi_cdcmpeq>:
  415cc8:	b501      	push	{r0, lr}
  415cca:	f7ff ffb7 	bl	415c3c <__cmpdf2>
  415cce:	2800      	cmp	r0, #0
  415cd0:	bf48      	it	mi
  415cd2:	f110 0f00 	cmnmi.w	r0, #0
  415cd6:	bd01      	pop	{r0, pc}

00415cd8 <__aeabi_dcmpeq>:
  415cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
  415cdc:	f7ff fff4 	bl	415cc8 <__aeabi_cdcmpeq>
  415ce0:	bf0c      	ite	eq
  415ce2:	2001      	moveq	r0, #1
  415ce4:	2000      	movne	r0, #0
  415ce6:	f85d fb08 	ldr.w	pc, [sp], #8
  415cea:	bf00      	nop

00415cec <__aeabi_dcmplt>:
  415cec:	f84d ed08 	str.w	lr, [sp, #-8]!
  415cf0:	f7ff ffea 	bl	415cc8 <__aeabi_cdcmpeq>
  415cf4:	bf34      	ite	cc
  415cf6:	2001      	movcc	r0, #1
  415cf8:	2000      	movcs	r0, #0
  415cfa:	f85d fb08 	ldr.w	pc, [sp], #8
  415cfe:	bf00      	nop

00415d00 <__aeabi_dcmple>:
  415d00:	f84d ed08 	str.w	lr, [sp, #-8]!
  415d04:	f7ff ffe0 	bl	415cc8 <__aeabi_cdcmpeq>
  415d08:	bf94      	ite	ls
  415d0a:	2001      	movls	r0, #1
  415d0c:	2000      	movhi	r0, #0
  415d0e:	f85d fb08 	ldr.w	pc, [sp], #8
  415d12:	bf00      	nop

00415d14 <__aeabi_dcmpge>:
  415d14:	f84d ed08 	str.w	lr, [sp, #-8]!
  415d18:	f7ff ffce 	bl	415cb8 <__aeabi_cdrcmple>
  415d1c:	bf94      	ite	ls
  415d1e:	2001      	movls	r0, #1
  415d20:	2000      	movhi	r0, #0
  415d22:	f85d fb08 	ldr.w	pc, [sp], #8
  415d26:	bf00      	nop

00415d28 <__aeabi_dcmpgt>:
  415d28:	f84d ed08 	str.w	lr, [sp, #-8]!
  415d2c:	f7ff ffc4 	bl	415cb8 <__aeabi_cdrcmple>
  415d30:	bf34      	ite	cc
  415d32:	2001      	movcc	r0, #1
  415d34:	2000      	movcs	r0, #0
  415d36:	f85d fb08 	ldr.w	pc, [sp], #8
  415d3a:	bf00      	nop

00415d3c <__aeabi_d2iz>:
  415d3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415d40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  415d44:	d215      	bcs.n	415d72 <__aeabi_d2iz+0x36>
  415d46:	d511      	bpl.n	415d6c <__aeabi_d2iz+0x30>
  415d48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  415d4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  415d50:	d912      	bls.n	415d78 <__aeabi_d2iz+0x3c>
  415d52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  415d5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  415d5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  415d62:	fa23 f002 	lsr.w	r0, r3, r2
  415d66:	bf18      	it	ne
  415d68:	4240      	negne	r0, r0
  415d6a:	4770      	bx	lr
  415d6c:	f04f 0000 	mov.w	r0, #0
  415d70:	4770      	bx	lr
  415d72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  415d76:	d105      	bne.n	415d84 <__aeabi_d2iz+0x48>
  415d78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  415d7c:	bf08      	it	eq
  415d7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  415d82:	4770      	bx	lr
  415d84:	f04f 0000 	mov.w	r0, #0
  415d88:	4770      	bx	lr
  415d8a:	bf00      	nop

00415d8c <__aeabi_d2uiz>:
  415d8c:	004a      	lsls	r2, r1, #1
  415d8e:	d211      	bcs.n	415db4 <__aeabi_d2uiz+0x28>
  415d90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  415d94:	d211      	bcs.n	415dba <__aeabi_d2uiz+0x2e>
  415d96:	d50d      	bpl.n	415db4 <__aeabi_d2uiz+0x28>
  415d98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  415d9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  415da0:	d40e      	bmi.n	415dc0 <__aeabi_d2uiz+0x34>
  415da2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  415daa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  415dae:	fa23 f002 	lsr.w	r0, r3, r2
  415db2:	4770      	bx	lr
  415db4:	f04f 0000 	mov.w	r0, #0
  415db8:	4770      	bx	lr
  415dba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  415dbe:	d102      	bne.n	415dc6 <__aeabi_d2uiz+0x3a>
  415dc0:	f04f 30ff 	mov.w	r0, #4294967295
  415dc4:	4770      	bx	lr
  415dc6:	f04f 0000 	mov.w	r0, #0
  415dca:	4770      	bx	lr

00415dcc <__aeabi_d2f>:
  415dcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415dd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  415dd4:	bf24      	itt	cs
  415dd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  415dda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  415dde:	d90d      	bls.n	415dfc <__aeabi_d2f+0x30>
  415de0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  415de4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  415de8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  415dec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  415df0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  415df4:	bf08      	it	eq
  415df6:	f020 0001 	biceq.w	r0, r0, #1
  415dfa:	4770      	bx	lr
  415dfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  415e00:	d121      	bne.n	415e46 <__aeabi_d2f+0x7a>
  415e02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  415e06:	bfbc      	itt	lt
  415e08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  415e0c:	4770      	bxlt	lr
  415e0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415e12:	ea4f 5252 	mov.w	r2, r2, lsr #21
  415e16:	f1c2 0218 	rsb	r2, r2, #24
  415e1a:	f1c2 0c20 	rsb	ip, r2, #32
  415e1e:	fa10 f30c 	lsls.w	r3, r0, ip
  415e22:	fa20 f002 	lsr.w	r0, r0, r2
  415e26:	bf18      	it	ne
  415e28:	f040 0001 	orrne.w	r0, r0, #1
  415e2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415e30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  415e34:	fa03 fc0c 	lsl.w	ip, r3, ip
  415e38:	ea40 000c 	orr.w	r0, r0, ip
  415e3c:	fa23 f302 	lsr.w	r3, r3, r2
  415e40:	ea4f 0343 	mov.w	r3, r3, lsl #1
  415e44:	e7cc      	b.n	415de0 <__aeabi_d2f+0x14>
  415e46:	ea7f 5362 	mvns.w	r3, r2, asr #21
  415e4a:	d107      	bne.n	415e5c <__aeabi_d2f+0x90>
  415e4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  415e50:	bf1e      	ittt	ne
  415e52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  415e56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  415e5a:	4770      	bxne	lr
  415e5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  415e60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  415e64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  415e68:	4770      	bx	lr
  415e6a:	bf00      	nop

00415e6c <sd_mmc_trans_units>:
  415e6c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00415e88 <sd_trans_multipliers>:
  415e88:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  415e98:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  415ea8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  415eb8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00415ec8 <mmc_trans_multipliers>:
  415ec8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  415ed8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  415ee8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  415ef8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  415f08:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
  415f18:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
  415f28:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

00415f38 <lun_desc>:
  415f38:	17c9 0040 1829 0040 1891 0040 18f9 0040     ..@.).@...@...@.
  415f48:	1939 0040 19c9 0040 1a79 0040 5f08 0041     9.@...@.y.@.._A.
  415f58:	17dd 0040 1849 0040 18b5 0040 190d 0040     ..@.I.@...@...@.
  415f68:	194d 0040 19ed 0040 1a9d 0040 5f20 0041     M.@...@...@. _A.

00415f78 <LfnOfs>:
  415f78:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
  415f88:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  415f98:	5d5b 0000                                   []..

00415f9c <excvt.4554>:
  415f9c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  415fac:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  415fbc:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  415fcc:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  415fdc:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  415fec:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  415ffc:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  41600c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0041601c <Tbl>:
  41601c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  41602c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  41603c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  41604c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  41605c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  41606c:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  41607c:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  41608c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  41609c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  4160ac:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  4160bc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  4160cc:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  4160dc:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  4160ec:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  4160fc:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  41610c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0041611c <tbl_lower.4258>:
  41611c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  41612c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  41613c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  41614c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  41615c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  41616c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  41617c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  41618c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  41619c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  4161ac:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  4161bc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4161cc:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  4161dc:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  4161ec:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  4161fc:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  41620c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  41621c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  41622c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  41623c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  41624c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  41625c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  41626c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  41627c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  41628c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  41629c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  4162ac:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  4162bc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4162cc:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  4162dc:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  4162ec:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

004162fc <tbl_upper.4259>:
  4162fc:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  41630c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  41631c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  41632c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  41633c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  41634c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  41635c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  41636c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  41637c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  41638c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  41639c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  4163ac:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  4163bc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  4163cc:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  4163dc:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  4163ec:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  4163fc:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  41640c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  41641c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  41642c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  41643c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  41644c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  41645c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  41646c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  41647c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  41648c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  41649c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  4164ac:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  4164bc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  4164cc:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  4164dc:	4449 454c 0000 0000 0a0d 0000 7325 0909     IDLE........%s..
  4164ec:	6325 2509 0975 7525 2509 0d75 000a 0000     %c.%u.%u.%u.....
  4164fc:	c200 0001 0000 0000 0800 0000 0000 0000     ................
  41650c:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  41651c:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  41652c:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  41653c:	2065 6163 6472 0a2e 000d 0000 7245 6f72     e card......Erro
  41654c:	3a72 4920 766e 6c61 6469 4420 6972 6576     r: Invalid Drive
  41655c:	0a0d 0000 3a30 6573 7474 6e69 7367 632e     ....0:settings.c
  41656c:	7673 0000 6166 6c69 6465 7420 206f 6567     sv..failed to ge
  41657c:	2074 6572 6461 7320 7465 6974 676e 0d73     t read settings.
  41658c:	000a 0000 704f 6e65 6e69 2067 4453 4320     ....Opening SD C
  41659c:	7261 2064 6f74 7220 6165 0d64 000a 0000     ard to read.....
  4165ac:	7245 6f72 3a72 4320 6e61 6f6e 2074 704f     Error: Cannot Op
  4165bc:	6e65 6620 6c69 0d65 000a 0000 6552 6461     en file.....Read
  4165cc:	6e69 2067 7266 6d6f 5320 0d44 000a 0000     ing from SD.....
  4165dc:	6c43 736f 6e69 2067 6874 2065 6966 656c     Closing the file
  4165ec:	0a0d 0000 6425 0d2c 000a 0000 6166 6c69     ....%d,.....fail
  4165fc:	6465 7420 206f 6572 6461 7320 7465 6974     ed to read setti
  41660c:	676e 0d73 000a 0000 6425 252c 0d73 000a     ngs.....%d,%s...
  41661c:	6166 6c69 6465 7420 206f 6170 7372 2065     failed to parse 
  41662c:	4d49 2055 6573 7474 6e69 7367 0a0d 0000     IMU settings....
  41663c:	6f6c 6461 6465 7320 7465 6974 676e 2073     loaded settings 
  41664c:	6f66 2072 4d49 2055 6425 202c 7325 0a0d     for IMU %d, %s..
  41665c:	0000 0000 6544 7562 2067 6f4c 2067 706f     ....Debug Log op
  41666c:	6e65 7320 6375 6563 7373 7566 0d6c 000a     en successful...
  41667c:	6544 7562 2067 6f4c 2067 706f 6e65 7520     Debug Log open u
  41668c:	736e 6375 6563 7373 7566 0d6c 000a 0000     nsuccessful.....
  41669c:	6425 203a 7325 0000 6553 616d 6870 726f     %d: %s..Semaphor
  4166ac:	2065 6f6e 2074 6572 656c 7361 6465 0a0d     e not released..
  4166bc:	0000 0000 6553 616d 6870 726f 2065 6e55     ....Semaphore Un
  4166cc:	7661 6961 616c 6c62 2065 6f74 4420 6265     available to Deb
  4166dc:	6775 4220 6675 6566 2072 7566 636e 6974     ug Buffer functi
  4166ec:	6e6f 0a0d 0000 0000 6553 616d 6870 726f     on......Semaphor
  4166fc:	2065 6e55 7661 6961 616c 6c62 2065 6f74     e Unavailable to
  41670c:	7020 6972 746e 7420 7361 0d6b 000a 0000      print task.....
  41671c:	6166 6c69 6465 7420 206f 6e69 7469 6169     failed to initia
  41672c:	696c 657a 4720 4950 204f 7461 6920 646e     lize GPIO at ind
  41673c:	7865 2520 0064 0000 6966 656c 7720 6972     ex %d...file wri
  41674c:	6574 6620 6961 656c 2064 6977 6874 6320     te failed with c
  41675c:	646f 2065 6425 0a0d 0000 0000 6966 656c     ode %d......file
  41676c:	7320 6e79 2063 6166 6c69 6465 7720 7469      sync failed wit
  41677c:	2068 6f63 6564 2520 0d64 000a 6f6c 2067     h code %d...log 
  41678c:	706f 6e65 0a0d 0000 6f6c 2067 6166 6c69     open....log fail
  41679c:	6465 7420 206f 706f 6e65 0a0d 0000 0000     ed to open......
  4167ac:	6e61 6520 7272 726f 6820 7361 6f20 6363     an error has occ
  4167bc:	7275 6572 2c64 6420 7461 2061 6168 646e     urred, data hand
  4167cc:	656c 2072 7571 7565 2065 6166 6c69 7275     ler queue failur
  4167dc:	0d65 000a 4453 0000 6146 6c69 6465 7420     e...SD..Failed t
  4167ec:	206f 6473 6320 7261 2064 6174 6b73 6320     o sd card task c
  4167fc:	646f 2065 6425 0a0d 0000 0000 3025 3031     ode %d......%010
  41680c:	2c64 0000 3025 6434 4242 4242 4343 4343     d,..%04dBBBBCCCC
  41681c:	4444 4444 4545 4545 3025 6438 0a0d 0000     DDDDEEEE%08d....
  41682c:	5551 4e49 4954 2043 5453 5441 2053 0a0d     QUINTIC STATS ..
  41683c:	0000 0000 2551 3a64 0a0d 0000 4309 726f     ....Q%d:.....Cor
  41684c:	7572 7470 5020 6361 656b 7374 203a 6425     rupt Packets: %d
  41685c:	0a0d 0000 4409 6f72 7070 6465 4220 7479     .....Dropped Byt
  41686c:	7365 203a 2020 6425 0a0d 0000 4d49 2055     es:   %d....IMU 
  41687c:	5453 5441 2053 0a0d 0000 0000 4d49 2555     STATS ......IMU%
  41688c:	3a64 0a0d 0000 0000 4909 554d 5020 6572     d:.......IMU Pre
  41689c:	6573 746e 203a 6425 0a0d 0000 4909 554d     sent: %d.....IMU
  4168ac:	4320 6e6f 656e 7463 6465 203a 6425 0a0d      Connected: %d..
  4168bc:	0000 0000 4409 6f72 7070 6465 5020 6361     .....Dropped Pac
  4168cc:	656b 7374 203a 6425 0a0d 0000 4109 6576     kets: %d.....Ave
  4168dc:	6172 6567 5220 2078 6e69 6574 7672 6c61     rage Rx interval
  4168ec:	7428 6369 736b 3a29 2520 0d64 000a 0000     (ticks): %d.....
  4168fc:	5009 6361 656b 2074 7852 4320 756f 746e     .Packet Rx Count
  41690c:	203a 2020 6425 0a0d 0000 0000 6f54 6174     :   %d......Tota
  41691c:	206c 7942 6574 2073 7257 7469 6574 3a6e     l Bytes Written:
  41692c:	2520 0d64 000a 0000 6f54 6174 206c 7246      %d.....Total Fr
  41693c:	6d61 7365 5720 6972 7474 6e65 203a 6425     ames Written: %d
  41694c:	0d20 000a 7551 7565 6465 4d20 7365 6173      ...Queued Messa
  41695c:	6567 3a73 2520 0d64 000a 0000 2d2d 202d     ges: %d.....--- 
  41696c:	6174 6b73 2320 2023 7525 0000 4453 6143     task ## %u..SDCa
  41697c:	6472 6554 7473 0a0d 0000 0000 6572 6563     rdTest......rece
  41698c:	7669 6465 7420 6568 5320 2044 6163 6472     ived the SD card
  41699c:	7420 7365 2074 6f63 6d6d 6e61 0d64 000a      test command...
  4169ac:	6164 6174 6f42 7261 4764 6970 546f 7365     dataBoardGpioTes
  4169bc:	0d74 000a 6572 6563 7669 6465 7420 6568     t...received the
  4169cc:	4720 4950 204f 6574 7473 6320 6d6f 616d      GPIO test comma
  4169dc:	646e 0a0d 0000 0000 4c42 2045 6554 7473     nd......BLE Test
  4169ec:	0a0d 0000 7453 7261 4974 756d 0d73 000a     ....StartImus...
  4169fc:	7473 7261 2074 6f63 6d6d 6e61 2064 7349     start command Is
  416a0c:	7573 6465 0a0d 0000 7453 706f 6d49 7375     sued....StopImus
  416a1c:	0a0d 0000 7473 706f 6320 6d6f 616d 646e     ....stop command
  416a2c:	6920 7373 6575 0d64 000a 0000 6573 5274      issued.....setR
  416a3c:	7473 4c32 776f 0a0d 0000 0000 6950 206e     st2Low......Pin 
  416a4c:	6573 2074 6f6c 0d77 000a 0000 6573 5274     set low.....setR
  416a5c:	7473 4832 6769 0d68 000a 0000 6950 206e     st2High.....Pin 
  416a6c:	6573 2074 6968 6867 0a0d 0000 7372 4274     set high....rstB
  416a7c:	454c 0d33 000a 0000 6950 206e 6572 6573     LE3.....Pin rese
  416a8c:	0d74 000a 6964 6173 6c62 5565 5241 7354     t...disableUARTs
  416a9c:	0a0d 0000 4155 5452 2073 6573 2074 7361     ....UARTs set as
  416aac:	4820 6769 2068 6d69 6570 6164 636e 0d65      High impedance.
  416abc:	000a 0000 6c66 7375 5568 7261 7374 0a0d     ....flushUarts..
  416acc:	0000 0000 6567 5374 6174 7374 0a0d 0000     ....getStats....
  416adc:	6552 6563 7669 6465 7520 6b6e 6f6e 6e77     Received unknown
  416aec:	6320 6d6f 616d 646e 203a 7325 0d20 000a      command: %s ...
  416afc:	3151 0000 6146 6c69 6465 7420 206f 7263     Q1..Failed to cr
  416b0c:	6165 6574 5120 2031 6174 6b73 6320 646f     eate Q1 task cod
  416b1c:	2065 6425 0a0d 0000 3351 0000 6146 6c69     e %d....Q3..Fail
  416b2c:	6465 7420 206f 3351 7420 7361 206b 6f63     ed to Q3 task co
  416b3c:	6564 2520 0d64 000a 5346 0000 6146 6c69     de %d...FS..Fail
  416b4c:	6465 7420 206f 6166 7262 6369 7320 6e65     ed to fabric sen
  416b5c:	6573 7420 7361 206b 6f63 6564 2520 0d64     se task code %d.
  416b6c:	000a 0000 6d63 0064 6146 6c69 6465 7420     ....cmd.Failed t
  416b7c:	206f 6553 6972 6c61 6820 6e61 6c64 7265     o Serial handler
  416b8c:	7420 7361 206b 6f63 6564 2520 0d64 000a      task code %d...
  416b9c:	4844 0000 6146 6c69 6465 7420 206f 7263     DH..Failed to cr
  416bac:	6165 6574 6420 7461 2061 6168 646e 656c     eate data handle
  416bbc:	2072 6174 6b73 6320 646f 2065 6425 0a0d     r task code %d..
  416bcc:	0000 0000 7250 676f 6172 206d 7473 7261     ....Program star
  416bdc:	0d74 000a 7325 0a0d 0000 0000 5750 5320     t...%s......PW S
  416bec:	2057 7270 7365 6573 0d64 000a 4341 5320     W pressed...AC S
  416bfc:	3157 7020 6572 7373 6465 0a0d 0000 0000     W1 pressed......
  416c0c:	4341 5320 3257 7020 6572 7373 6465 0a0d     AC SW2 pressed..
  416c1c:	0000 0000 434a 4f20 3143 6420 7465 6365     ....JC OC1 detec
  416c2c:	6574 0d64 000a 0000 434a 4f20 3243 6420     ted.....JC OC2 d
  416c3c:	7465 6365 6574 0d64 000a 0000 434a 4420     etected.....JC D
  416c4c:	3143 6420 7465 6365 6574 0d64 000a 0000     C1 detected.....
  416c5c:	434a 4420 3243 6420 7465 6365 6574 0d64     JC DC2 detected.
  416c6c:	000a 0000 434a 4520 314e 6420 7465 6365     ....JC EN1 detec
  416c7c:	6574 0d64 000a 0000 434a 4520 324e 6420     ted.....JC EN2 d
  416c8c:	7465 6365 6574 0d64 000a 0000 424c 204f     etected.....LBO 
  416c9c:	6564 6574 7463 6465 0a0d 0000 5453 5441     detected....STAT
  416cac:	6420 7465 6365 6574 0d64 000a 4453 4320      detected...SD C
  416cbc:	2044 6564 6574 7463 6465 0a0d 0000 0000     D detected......
  416ccc:	3030 0000 3131 0000 3232 0000 7473 7261     00..11..22..star
  416cdc:	0d74 000a 7473 706f 0a0d 0000 6e51 6341     t...stop....QnAc
  416cec:	0d6b 000a 3025 6432 5959 3025 6434 5252     k...%02dYY%04dRR
  416cfc:	2552 0064 6373 6e61 0a0d 0000 6353 6e61     R%d.scan....Scan
  416d0c:	6552 7073 0000 0000 6f63 6e6e 6365 0d74     Resp....connect.
  416d1c:	000a 0000 6f43 6e6e 6552 7073 0000 0000     ....ConnResp....
  416d2c:	6562 6967 0d6e 000a 6e65 0d64 000a 0000     begin...end.....
  416d3c:	6f63 6e6e 6365 6574 2064 6f74 4920 554d     connected to IMU
  416d4c:	2073 6425 202c 6425 202c 6425 0a0d 0000     s %d, %d, %d....
  416d5c:	6146 6c69 6465 6320 6e6f 656e 7463 6f69     Failed connectio
  416d6c:	206e 6f74 4920 554d 2073 6425 202c 6425     n to IMUs %d, %d
  416d7c:	202c 6425 0a0d 0000 614d 6e69 0000 0000     , %d....Main....
  416d8c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  416d9c:	4d20 6961 206e 6174 6b73 0a0d 0000 0000      Main task......
  416dac:	0043 0000                                   C...

00416db0 <_global_impure_ptr>:
  416db0:	04f0 2000                                   ... 

00416db4 <zeroes.6763>:
  416db4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  416dc4:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  416dd4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  416de4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  416df4:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  416e04:	0030 0000                                   0...

00416e08 <blanks.6762>:
  416e08:	2020 2020 2020 2020 2020 2020 2020 2020                     

00416e18 <basefix.6714>:
  416e18:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  416e28:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  416e38:	0010 0000 2565 646c 0000 0000               ....e%ld....

00416e44 <zeroes.6721>:
  416e44:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00416e54 <blanks.6720>:
  416e54:	2020 2020 2020 2020 2020 2020 2020 2020                     

00416e64 <_ctype_>:
  416e64:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  416e74:	2020 2020 2020 2020 2020 2020 2020 2020                     
  416e84:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  416e94:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  416ea4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  416eb4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  416ec4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  416ed4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  416ee4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  416f68:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  416f78:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00416f88 <__mprec_tens>:
  416f88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  416f98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  416fa8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  416fb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  416fc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  416fd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  416fe8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  416ff8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  417008:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  417018:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  417028:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  417038:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  417048:	9db4 79d9 7843 44ea                         ...yCx.D

00417050 <__mprec_bigtens>:
  417050:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  417060:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  417070:	bf3c 7f73 4fdd 7515                         <.s..O.u

00417078 <p05.5269>:
  417078:	0005 0000 0019 0000 007d 0000               ........}...

00417084 <fpi.5238>:
  417084:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  417094:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  4170a4:	6e61 0000                                   an..

004170a8 <fpinan.5274>:
  4170a8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

004170c0 <tinytens>:
  4170c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  4170d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  4170e0:	6f43 64ac 0628 1168                         Co.d(.h.

004170e8 <__hexdig>:
	...
  417118:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  417128:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  417148:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

004171e8 <_init>:
  4171e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4171ea:	bf00      	nop
  4171ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4171ee:	bc08      	pop	{r3}
  4171f0:	469e      	mov	lr, r3
  4171f2:	4770      	bx	lr

004171f4 <__init_array_start>:
  4171f4:	00410979 	.word	0x00410979

004171f8 <__frame_dummy_init_array_entry>:
  4171f8:	004000f1                                ..@.

004171fc <_fini>:
  4171fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4171fe:	bf00      	nop
  417200:	bcf8      	pop	{r3, r4, r5, r6, r7}
  417202:	bc08      	pop	{r3}
  417204:	469e      	mov	lr, r3
  417206:	4770      	bx	lr

00417208 <__fini_array_start>:
  417208:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <sd_mmc_cards>:
	...
20000024:	002b 0000 0000 0000 0000 0000 0000 0000     +...............
	...

20000040 <uxCriticalNesting>:
20000040:	aaaa aaaa                                   ....

20000044 <xNextTaskUnblockTime>:
20000044:	ffff ffff                                   ....

20000048 <uxPreviousTask>:
20000048:	00ff 0000                                   ....

2000004c <uart0Config>:
2000004c:	0600 400e c200 0001 00c0 0000 0800 0000     ...@............
	...

20000064 <uart1Config>:
20000064:	0800 400e c200 0001 00c0 0000 0800 0000     ...@............
20000074:	0000 0000 0001 0000                         ........

2000007c <usart0Config>:
2000007c:	4000 4002 c200 0001 00c0 0000 0800 0000     .@.@............
2000008c:	0000 0000 0002 0000                         ........

20000094 <usart1Config>:
20000094:	8000 4002 c200 0001 00c0 0000 0800 0000     ...@............
200000a4:	0000 0000 0003 0000                         ........

200000ac <sgSDWriteLockBit>:
200000ac:	0001 0000                                   ....

200000b0 <gpioConfig>:
200000b0:	0000 0000 0001 0001 8331 0040 0101 0000     ........1.@.....
200000c0:	0001 0000 0001 0001 8385 0040 0101 0000     ..........@.....
200000d0:	0014 0000 0001 0001 83d9 0040 0101 0000     ..........@.....
200000e0:	0010 0000 0001 0001 8431 0040 0101 0000     ........1.@.....
200000f0:	000f 0000 0001 0001 8489 0040 0101 0000     ..........@.....
20000100:	0018 0000 0001 0001 84e1 0040 0101 0000     ..........@.....
20000110:	0019 0000 0001 0001 8539 0040 0101 0000     ........9.@.....
20000120:	0013 0000 0000 0004 0000 0000 0000 0000     ................
20000130:	0008 0000 0000 0004 0000 0000 0000 0000     ................
20000140:	002a 0000 0100 0004 0000 0000 0100 0000     *...............
20000150:	0011 0000 0100 0004 0000 0000 0100 0000     ................
20000160:	0012 0000 0100 0004 0000 0000 0100 0000     ................
20000170:	002d 0000 0100 0004 0000 0000 0000 0000     -...............
20000180:	0020 0000 0100 0004 0000 0000 0000 0000      ...............
20000190:	0021 0000 0100 0004 0000 0000 0000 0000     !...............
200001a0:	000b 0000 0001 0001 8591 0040 0101 0000     ..........@.....
200001b0:	002b 0000 0001 0001 85e9 0040 0101 0000     +.........@.....

200001c0 <programmingGpioConfig>:
200001c0:	0023 0000 0001 0004 0000 0000 0101 0000     #...............
200001d0:	0022 0000 0001 0004 0000 0000 0101 0000     "...............
200001e0:	0006 0000 0001 0004 0000 0000 0101 0000     ................
200001f0:	0005 0000 0001 0004 0000 0000 0101 0000     ................
20000200:	0016 0000 0001 0004 0000 0000 0101 0000     ................
20000210:	0012 0000 0001 0004 0000 0000 0101 0000     ................

20000220 <dataLogFileName>:
20000220:	3a30 6164 6174 6f4c 5f67 2e74 7363 0076     0:dataLog_t.csv.

20000230 <imuConfig>:
20000230:	0000 0000 4131 4242 4343 4444 4545 4646     ....1ABBCCDDEEFF
	...
20000268:	0001 0000 4132 4242 4343 4444 4545 4646     ....2ABBCCDDEEFF
	...
200002a0:	0002 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200002d8:	0003 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000310:	0004 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000348:	0005 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000380:	0006 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200003b8:	0007 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200003f0:	0008 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000428:	0009 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...

20000460 <quinticConfig>:
20000460:	0230 2000 0268 2000 02a0 2000 0000 0000     0.. h.. ... ....
20000470:	0000 0000 0064 2000 0003 0000 0000 0000     ....d.. ........
20000480:	0009 0000 0000 0000 02d8 2000 0310 2000     ........... ... 
20000490:	0348 2000 0000 0000 0000 0000 007c 2000     H.. ........|.. 
200004a0:	0003 0000 0000 0000 000a 0000 0000 0000     ................
200004b0:	0380 2000 03b8 2000 03f0 2000 0000 0000     ... ... ... ....
200004c0:	0000 0000 0094 2000 0003 0000 0000 0000     ....... ........
200004d0:	000b 0000 0000 0000                         ........

200004d8 <fsConfig>:
200004d8:	0014 0000 0014 0000 004c 2000               ........L.. 

200004e4 <g_interrupt_enabled>:
200004e4:	0001 0000                                   ....

200004e8 <SystemCoreClock>:
200004e8:	0900 003d 0000 0000                         ..=.....

200004f0 <impure_data>:
200004f0:	0000 0000 07dc 2000 0844 2000 08ac 2000     ....... D.. ... 
	...
20000524:	6dac 0041 0000 0000 0000 0000 0000 0000     .mA.............
	...
20000598:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200005a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000918 <_impure_ptr>:
20000918:	04f0 2000                                   ... 

2000091c <__malloc_av_>:
	...
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 
20000c04:	0bfc 2000 0bfc 2000 0c04 2000 0c04 2000     ... ... ... ... 
20000c14:	0c0c 2000 0c0c 2000 0c14 2000 0c14 2000     ... ... ... ... 
20000c24:	0c1c 2000 0c1c 2000 0c24 2000 0c24 2000     ... ... $.. $.. 
20000c34:	0c2c 2000 0c2c 2000 0c34 2000 0c34 2000     ,.. ,.. 4.. 4.. 
20000c44:	0c3c 2000 0c3c 2000 0c44 2000 0c44 2000     <.. <.. D.. D.. 
20000c54:	0c4c 2000 0c4c 2000 0c54 2000 0c54 2000     L.. L.. T.. T.. 
20000c64:	0c5c 2000 0c5c 2000 0c64 2000 0c64 2000     \.. \.. d.. d.. 
20000c74:	0c6c 2000 0c6c 2000 0c74 2000 0c74 2000     l.. l.. t.. t.. 
20000c84:	0c7c 2000 0c7c 2000 0c84 2000 0c84 2000     |.. |.. ... ... 
20000c94:	0c8c 2000 0c8c 2000 0c94 2000 0c94 2000     ... ... ... ... 
20000ca4:	0c9c 2000 0c9c 2000 0ca4 2000 0ca4 2000     ... ... ... ... 
20000cb4:	0cac 2000 0cac 2000 0cb4 2000 0cb4 2000     ... ... ... ... 
20000cc4:	0cbc 2000 0cbc 2000 0cc4 2000 0cc4 2000     ... ... ... ... 
20000cd4:	0ccc 2000 0ccc 2000 0cd4 2000 0cd4 2000     ... ... ... ... 
20000ce4:	0cdc 2000 0cdc 2000 0ce4 2000 0ce4 2000     ... ... ... ... 
20000cf4:	0cec 2000 0cec 2000 0cf4 2000 0cf4 2000     ... ... ... ... 
20000d04:	0cfc 2000 0cfc 2000 0d04 2000 0d04 2000     ... ... ... ... 
20000d14:	0d0c 2000 0d0c 2000 0d14 2000 0d14 2000     ... ... ... ... 

20000d24 <__malloc_trim_threshold>:
20000d24:	0000 0002                                   ....

20000d28 <__malloc_sbrk_base>:
20000d28:	ffff ffff                                   ....

20000d2c <__ctype_ptr__>:
20000d2c:	6e64 0041                                   dnA.

20000d30 <lconv>:
20000d30:	6f80 0041 6de4 0041 6de4 0041 6de4 0041     .oA..mA..mA..mA.
20000d40:	6de4 0041 6de4 0041 6de4 0041 6de4 0041     .mA..mA..mA..mA.
20000d50:	6de4 0041 6de4 0041 ffff ffff ffff ffff     .mA..mA.........
20000d60:	ffff ffff ffff 0000                         ........

20000d68 <lc_ctype_charset>:
20000d68:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000d88 <__mb_cur_max>:
20000d88:	0001 0000                                   ....

20000d8c <__mbtowc>:
20000d8c:	23d5 0041                                   .#A.

20000d90 <__wctomb>:
20000d90:	4b35 0041                                   5KA.
