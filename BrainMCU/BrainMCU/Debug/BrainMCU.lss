
BrainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001e1ec  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041e1ec  0041e1ec  000261ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000102c  20000000  0041e1f4  00028000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004080  2000102c  0041f220  0002902c  2**2
                  ALLOC
  4 .stack        00003004  200050ac  004232a0  0002902c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002902c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00029056  2**0
                  CONTENTS, READONLY
  7 .debug_info   00025c56  00000000  00000000  000290b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005ae4  00000000  00000000  0004ed07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ad4d  00000000  00000000  000547eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e40  00000000  00000000  0005f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b20  00000000  00000000  00061378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011c0c  00000000  00000000  00062e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002c9be  00000000  00000000  00074aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005e6b5  00000000  00000000  000a1462  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007680  00000000  00000000  000ffb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200080b0 	.word	0x200080b0
  400004:	00411e59 	.word	0x00411e59
  400008:	00411f21 	.word	0x00411f21
  40000c:	004122c5 	.word	0x004122c5
  400010:	004122cd 	.word	0x004122cd
  400014:	004122d5 	.word	0x004122d5
  400018:	004122dd 	.word	0x004122dd
	...
  40002c:	0040a6ed 	.word	0x0040a6ed
  400030:	00411f21 	.word	0x00411f21
  400034:	00000000 	.word	0x00000000
  400038:	0040a7c5 	.word	0x0040a7c5
  40003c:	004122e5 	.word	0x004122e5
  400040:	00411f21 	.word	0x00411f21
  400044:	00411f21 	.word	0x00411f21
  400048:	00411f21 	.word	0x00411f21
  40004c:	00411f21 	.word	0x00411f21
  400050:	0040cb01 	.word	0x0040cb01
  400054:	00411f21 	.word	0x00411f21
  400058:	00411f21 	.word	0x00411f21
  40005c:	00000000 	.word	0x00000000
  400060:	0040e881 	.word	0x0040e881
  400064:	0040e8e5 	.word	0x0040e8e5
  400068:	00000000 	.word	0x00000000
  40006c:	00411a81 	.word	0x00411a81
  400070:	00411a99 	.word	0x00411a99
  400074:	00000000 	.word	0x00000000
  400078:	0040e94d 	.word	0x0040e94d
  40007c:	0040e9b5 	.word	0x0040e9b5
	...
  400088:	00411f21 	.word	0x00411f21
  40008c:	0040044d 	.word	0x0040044d
  400090:	0040045d 	.word	0x0040045d
  400094:	00411f21 	.word	0x00411f21
  400098:	00411f21 	.word	0x00411f21
  40009c:	00411f21 	.word	0x00411f21
  4000a0:	00411f21 	.word	0x00411f21
  4000a4:	00411f21 	.word	0x00411f21
	...
  4000b4:	00411f21 	.word	0x00411f21
  4000b8:	00411f21 	.word	0x00411f21
  4000bc:	00411f21 	.word	0x00411f21
  4000c0:	00411f21 	.word	0x00411f21
  4000c4:	00411f21 	.word	0x00411f21
  4000c8:	00411f21 	.word	0x00411f21

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000102c 	.word	0x2000102c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0041e1f4 	.word	0x0041e1f4

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	0041e1f4 	.word	0x0041e1f4
  400114:	20001030 	.word	0x20001030
  400118:	0041e1f4 	.word	0x0041e1f4
  40011c:	00000000 	.word	0x00000000

00400120 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400120:	b590      	push	{r4, r7, lr}
  400122:	b08b      	sub	sp, #44	; 0x2c
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400128:	2300      	movs	r3, #0
  40012a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40012c:	2300      	movs	r3, #0
  40012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400132:	4a81      	ldr	r2, [pc, #516]	; (400338 <local_twi_handler+0x218>)
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	011b      	lsls	r3, r3, #4
  400138:	4413      	add	r3, r2
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40013e:	69b8      	ldr	r0, [r7, #24]
  400140:	4b7e      	ldr	r3, [pc, #504]	; (40033c <local_twi_handler+0x21c>)
  400142:	4798      	blx	r3
  400144:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  400146:	69b8      	ldr	r0, [r7, #24]
  400148:	4b7d      	ldr	r3, [pc, #500]	; (400340 <local_twi_handler+0x220>)
  40014a:	4798      	blx	r3
  40014c:	4603      	mov	r3, r0
  40014e:	697a      	ldr	r2, [r7, #20]
  400150:	4013      	ands	r3, r2
  400152:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40015a:	2b00      	cmp	r3, #0
  40015c:	d076      	beq.n	40024c <local_twi_handler+0x12c>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  40015e:	4a76      	ldr	r2, [pc, #472]	; (400338 <local_twi_handler+0x218>)
  400160:	687b      	ldr	r3, [r7, #4]
  400162:	011b      	lsls	r3, r3, #4
  400164:	4413      	add	r3, r2
  400166:	685b      	ldr	r3, [r3, #4]
  400168:	4618      	mov	r0, r3
  40016a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40016e:	4b75      	ldr	r3, [pc, #468]	; (400344 <local_twi_handler+0x224>)
  400170:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  400172:	69b8      	ldr	r0, [r7, #24]
  400174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400178:	4b73      	ldr	r3, [pc, #460]	; (400348 <local_twi_handler+0x228>)
  40017a:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400180:	69bb      	ldr	r3, [r7, #24]
  400182:	6a1b      	ldr	r3, [r3, #32]
  400184:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  400186:	7cfb      	ldrb	r3, [r7, #19]
  400188:	f003 0304 	and.w	r3, r3, #4
  40018c:	2b00      	cmp	r3, #0
  40018e:	d000      	beq.n	400192 <local_twi_handler+0x72>
				break;
  400190:	e00b      	b.n	4001aa <local_twi_handler+0x8a>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400192:	6a3b      	ldr	r3, [r7, #32]
  400194:	3301      	adds	r3, #1
  400196:	623b      	str	r3, [r7, #32]
  400198:	6a3b      	ldr	r3, [r7, #32]
  40019a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40019e:	d103      	bne.n	4001a8 <local_twi_handler+0x88>
				transfer_timeout = true;
  4001a0:	2301      	movs	r3, #1
  4001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001a6:	e000      	b.n	4001aa <local_twi_handler+0x8a>
			}
		}
  4001a8:	e7ea      	b.n	400180 <local_twi_handler+0x60>
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4001aa:	69bb      	ldr	r3, [r7, #24]
  4001ac:	2202      	movs	r2, #2
  4001ae:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4001b0:	4b66      	ldr	r3, [pc, #408]	; (40034c <local_twi_handler+0x22c>)
  4001b2:	687a      	ldr	r2, [r7, #4]
  4001b4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4001b8:	4964      	ldr	r1, [pc, #400]	; (40034c <local_twi_handler+0x22c>)
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	00db      	lsls	r3, r3, #3
  4001be:	440b      	add	r3, r1
  4001c0:	685b      	ldr	r3, [r3, #4]
  4001c2:	3b01      	subs	r3, #1
  4001c4:	4413      	add	r3, r2
  4001c6:	781b      	ldrb	r3, [r3, #0]
  4001c8:	461a      	mov	r2, r3
  4001ca:	69bb      	ldr	r3, [r7, #24]
  4001cc:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4001ce:	69bb      	ldr	r3, [r7, #24]
  4001d0:	6a1b      	ldr	r3, [r3, #32]
  4001d2:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  4001d4:	7cfb      	ldrb	r3, [r7, #19]
  4001d6:	f003 0301 	and.w	r3, r3, #1
  4001da:	2b00      	cmp	r3, #0
  4001dc:	d000      	beq.n	4001e0 <local_twi_handler+0xc0>
				break;
  4001de:	e00b      	b.n	4001f8 <local_twi_handler+0xd8>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4001e0:	6a3b      	ldr	r3, [r7, #32]
  4001e2:	3301      	adds	r3, #1
  4001e4:	623b      	str	r3, [r7, #32]
  4001e6:	6a3b      	ldr	r3, [r7, #32]
  4001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001ec:	d103      	bne.n	4001f6 <local_twi_handler+0xd6>
				transfer_timeout = true;
  4001ee:	2301      	movs	r3, #1
  4001f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001f4:	e000      	b.n	4001f8 <local_twi_handler+0xd8>
			}
		}
  4001f6:	e7ea      	b.n	4001ce <local_twi_handler+0xae>
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4001f8:	4a55      	ldr	r2, [pc, #340]	; (400350 <local_twi_handler+0x230>)
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	00db      	lsls	r3, r3, #3
  4001fe:	4413      	add	r3, r2
  400200:	685b      	ldr	r3, [r3, #4]
  400202:	2b00      	cmp	r3, #0
  400204:	d00c      	beq.n	400220 <local_twi_handler+0x100>
			xSemaphoreGiveFromISR(
  400206:	4a52      	ldr	r2, [pc, #328]	; (400350 <local_twi_handler+0x230>)
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	4413      	add	r3, r2
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	f107 0308 	add.w	r3, r7, #8
  400214:	4610      	mov	r0, r2
  400216:	2100      	movs	r1, #0
  400218:	461a      	mov	r2, r3
  40021a:	2300      	movs	r3, #0
  40021c:	4c4d      	ldr	r4, [pc, #308]	; (400354 <local_twi_handler+0x234>)
  40021e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400220:	6a3b      	ldr	r3, [r7, #32]
  400222:	f1b3 3fff 	cmp.w	r3, #4294967295
  400226:	d011      	beq.n	40024c <local_twi_handler+0x12c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400228:	4b49      	ldr	r3, [pc, #292]	; (400350 <local_twi_handler+0x230>)
  40022a:	687a      	ldr	r2, [r7, #4]
  40022c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400230:	2b00      	cmp	r3, #0
  400232:	d00b      	beq.n	40024c <local_twi_handler+0x12c>
				xSemaphoreGiveFromISR(
  400234:	4b46      	ldr	r3, [pc, #280]	; (400350 <local_twi_handler+0x230>)
  400236:	687a      	ldr	r2, [r7, #4]
  400238:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40023c:	f107 0308 	add.w	r3, r7, #8
  400240:	4610      	mov	r0, r2
  400242:	2100      	movs	r1, #0
  400244:	461a      	mov	r2, r3
  400246:	2300      	movs	r3, #0
  400248:	4c42      	ldr	r4, [pc, #264]	; (400354 <local_twi_handler+0x234>)
  40024a:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40024c:	697b      	ldr	r3, [r7, #20]
  40024e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400252:	2b00      	cmp	r3, #0
  400254:	f000 80aa 	beq.w	4003ac <local_twi_handler+0x28c>
		uint32_t timeout_counter = 0;
  400258:	2300      	movs	r3, #0
  40025a:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40025c:	4a36      	ldr	r2, [pc, #216]	; (400338 <local_twi_handler+0x218>)
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	011b      	lsls	r3, r3, #4
  400262:	4413      	add	r3, r2
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	4618      	mov	r0, r3
  400268:	2102      	movs	r1, #2
  40026a:	4b36      	ldr	r3, [pc, #216]	; (400344 <local_twi_handler+0x224>)
  40026c:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40026e:	69b8      	ldr	r0, [r7, #24]
  400270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400274:	4b34      	ldr	r3, [pc, #208]	; (400348 <local_twi_handler+0x228>)
  400276:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400278:	69bb      	ldr	r3, [r7, #24]
  40027a:	6a1b      	ldr	r3, [r3, #32]
  40027c:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	f003 0302 	and.w	r3, r3, #2
  400284:	2b00      	cmp	r3, #0
  400286:	d000      	beq.n	40028a <local_twi_handler+0x16a>
				break;
  400288:	e008      	b.n	40029c <local_twi_handler+0x17c>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40028a:	69fb      	ldr	r3, [r7, #28]
  40028c:	3301      	adds	r3, #1
  40028e:	61fb      	str	r3, [r7, #28]
  400290:	69fb      	ldr	r3, [r7, #28]
  400292:	f1b3 3fff 	cmp.w	r3, #4294967295
  400296:	d100      	bne.n	40029a <local_twi_handler+0x17a>
				break;
  400298:	e000      	b.n	40029c <local_twi_handler+0x17c>
			}
		}
  40029a:	e7ed      	b.n	400278 <local_twi_handler+0x158>
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  40029c:	69bb      	ldr	r3, [r7, #24]
  40029e:	2202      	movs	r2, #2
  4002a0:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4002a2:	4b2a      	ldr	r3, [pc, #168]	; (40034c <local_twi_handler+0x22c>)
  4002a4:	687a      	ldr	r2, [r7, #4]
  4002a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002aa:	4928      	ldr	r1, [pc, #160]	; (40034c <local_twi_handler+0x22c>)
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	00db      	lsls	r3, r3, #3
  4002b0:	440b      	add	r3, r1
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	3b02      	subs	r3, #2
  4002b6:	4413      	add	r3, r2
  4002b8:	69ba      	ldr	r2, [r7, #24]
  4002ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4002bc:	b2d2      	uxtb	r2, r2
  4002be:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4002c0:	69bb      	ldr	r3, [r7, #24]
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	f003 0302 	and.w	r3, r3, #2
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d000      	beq.n	4002d2 <local_twi_handler+0x1b2>
				break;
  4002d0:	e008      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4002d2:	69fb      	ldr	r3, [r7, #28]
  4002d4:	3301      	adds	r3, #1
  4002d6:	61fb      	str	r3, [r7, #28]
  4002d8:	69fb      	ldr	r3, [r7, #28]
  4002da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002de:	d100      	bne.n	4002e2 <local_twi_handler+0x1c2>
				break;
  4002e0:	e000      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
		}
  4002e2:	e7ed      	b.n	4002c0 <local_twi_handler+0x1a0>

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ea:	d035      	beq.n	400358 <local_twi_handler+0x238>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  4002ec:	4b17      	ldr	r3, [pc, #92]	; (40034c <local_twi_handler+0x22c>)
  4002ee:	687a      	ldr	r2, [r7, #4]
  4002f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002f4:	4915      	ldr	r1, [pc, #84]	; (40034c <local_twi_handler+0x22c>)
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	00db      	lsls	r3, r3, #3
  4002fa:	440b      	add	r3, r1
  4002fc:	685b      	ldr	r3, [r3, #4]
  4002fe:	3b01      	subs	r3, #1
  400300:	4413      	add	r3, r2
  400302:	69ba      	ldr	r2, [r7, #24]
  400304:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400306:	b2d2      	uxtb	r2, r2
  400308:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40030a:	2300      	movs	r3, #0
  40030c:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40030e:	69bb      	ldr	r3, [r7, #24]
  400310:	6a1b      	ldr	r3, [r3, #32]
  400312:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	f003 0301 	and.w	r3, r3, #1
  40031a:	2b00      	cmp	r3, #0
  40031c:	d000      	beq.n	400320 <local_twi_handler+0x200>
					break;
  40031e:	e01b      	b.n	400358 <local_twi_handler+0x238>
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	3301      	adds	r3, #1
  400324:	61fb      	str	r3, [r7, #28]
  400326:	69fb      	ldr	r3, [r7, #28]
  400328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40032c:	d103      	bne.n	400336 <local_twi_handler+0x216>
					transfer_timeout = true;
  40032e:	2301      	movs	r3, #1
  400330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  400334:	e010      	b.n	400358 <local_twi_handler+0x238>
				}
			}
  400336:	e7ea      	b.n	40030e <local_twi_handler+0x1ee>
  400338:	0041bf94 	.word	0x0041bf94
  40033c:	004005c9 	.word	0x004005c9
  400340:	004005e1 	.word	0x004005e1
  400344:	00405869 	.word	0x00405869
  400348:	004005a9 	.word	0x004005a9
  40034c:	20001068 	.word	0x20001068
  400350:	20001048 	.word	0x20001048
  400354:	0040ab4d 	.word	0x0040ab4d
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400358:	4a35      	ldr	r2, [pc, #212]	; (400430 <local_twi_handler+0x310>)
  40035a:	687b      	ldr	r3, [r7, #4]
  40035c:	00db      	lsls	r3, r3, #3
  40035e:	4413      	add	r3, r2
  400360:	685b      	ldr	r3, [r3, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d00c      	beq.n	400380 <local_twi_handler+0x260>
			xSemaphoreGiveFromISR(
  400366:	4a32      	ldr	r2, [pc, #200]	; (400430 <local_twi_handler+0x310>)
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	00db      	lsls	r3, r3, #3
  40036c:	4413      	add	r3, r2
  40036e:	685a      	ldr	r2, [r3, #4]
  400370:	f107 0308 	add.w	r3, r7, #8
  400374:	4610      	mov	r0, r2
  400376:	2100      	movs	r1, #0
  400378:	461a      	mov	r2, r3
  40037a:	2300      	movs	r3, #0
  40037c:	4c2d      	ldr	r4, [pc, #180]	; (400434 <local_twi_handler+0x314>)
  40037e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	f1b3 3fff 	cmp.w	r3, #4294967295
  400386:	d011      	beq.n	4003ac <local_twi_handler+0x28c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <local_twi_handler+0x318>)
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400390:	2b00      	cmp	r3, #0
  400392:	d00b      	beq.n	4003ac <local_twi_handler+0x28c>
				xSemaphoreGiveFromISR(
  400394:	4b28      	ldr	r3, [pc, #160]	; (400438 <local_twi_handler+0x318>)
  400396:	687a      	ldr	r2, [r7, #4]
  400398:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40039c:	f107 0308 	add.w	r3, r7, #8
  4003a0:	4610      	mov	r0, r2
  4003a2:	2100      	movs	r1, #0
  4003a4:	461a      	mov	r2, r3
  4003a6:	2300      	movs	r3, #0
  4003a8:	4c22      	ldr	r4, [pc, #136]	; (400434 <local_twi_handler+0x314>)
  4003aa:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4003b2:	2b00      	cmp	r3, #0
  4003b4:	d103      	bne.n	4003be <local_twi_handler+0x29e>
  4003b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003ba:	2b00      	cmp	r3, #0
  4003bc:	d02f      	beq.n	40041e <local_twi_handler+0x2fe>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4003be:	4a1f      	ldr	r2, [pc, #124]	; (40043c <local_twi_handler+0x31c>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	011b      	lsls	r3, r3, #4
  4003c4:	4413      	add	r3, r2
  4003c6:	685b      	ldr	r3, [r3, #4]
  4003c8:	4618      	mov	r0, r3
  4003ca:	f240 2102 	movw	r1, #514	; 0x202
  4003ce:	4b1c      	ldr	r3, [pc, #112]	; (400440 <local_twi_handler+0x320>)
  4003d0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  4003d2:	697b      	ldr	r3, [r7, #20]
  4003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4003d8:	2b00      	cmp	r3, #0
  4003da:	d102      	bne.n	4003e2 <local_twi_handler+0x2c2>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  4003dc:	69bb      	ldr	r3, [r7, #24]
  4003de:	2202      	movs	r2, #2
  4003e0:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003e2:	69b8      	ldr	r0, [r7, #24]
  4003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003e8:	4b16      	ldr	r3, [pc, #88]	; (400444 <local_twi_handler+0x324>)
  4003ea:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4003ec:	69b8      	ldr	r0, [r7, #24]
  4003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4003f2:	4b14      	ldr	r3, [pc, #80]	; (400444 <local_twi_handler+0x324>)
  4003f4:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4003f6:	4a0e      	ldr	r2, [pc, #56]	; (400430 <local_twi_handler+0x310>)
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	00db      	lsls	r3, r3, #3
  4003fc:	4413      	add	r3, r2
  4003fe:	685b      	ldr	r3, [r3, #4]
  400400:	2b00      	cmp	r3, #0
  400402:	d00c      	beq.n	40041e <local_twi_handler+0x2fe>
			xSemaphoreGiveFromISR(
  400404:	4a0a      	ldr	r2, [pc, #40]	; (400430 <local_twi_handler+0x310>)
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	00db      	lsls	r3, r3, #3
  40040a:	4413      	add	r3, r2
  40040c:	685a      	ldr	r2, [r3, #4]
  40040e:	f107 0308 	add.w	r3, r7, #8
  400412:	4610      	mov	r0, r2
  400414:	2100      	movs	r1, #0
  400416:	461a      	mov	r2, r3
  400418:	2300      	movs	r3, #0
  40041a:	4c06      	ldr	r4, [pc, #24]	; (400434 <local_twi_handler+0x314>)
  40041c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	2b00      	cmp	r3, #0
  400422:	d001      	beq.n	400428 <local_twi_handler+0x308>
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <local_twi_handler+0x328>)
  400426:	4798      	blx	r3
}
  400428:	372c      	adds	r7, #44	; 0x2c
  40042a:	46bd      	mov	sp, r7
  40042c:	bd90      	pop	{r4, r7, pc}
  40042e:	bf00      	nop
  400430:	20001048 	.word	0x20001048
  400434:	0040ab4d 	.word	0x0040ab4d
  400438:	20001058 	.word	0x20001058
  40043c:	0041bf94 	.word	0x0041bf94
  400440:	00405869 	.word	0x00405869
  400444:	004005a9 	.word	0x004005a9
  400448:	0040a75d 	.word	0x0040a75d

0040044c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  400450:	2000      	movs	r0, #0
  400452:	4b01      	ldr	r3, [pc, #4]	; (400458 <TWI0_Handler+0xc>)
  400454:	4798      	blx	r3
}
  400456:	bd80      	pop	{r7, pc}
  400458:	00400121 	.word	0x00400121

0040045c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  400460:	2001      	movs	r0, #1
  400462:	4b01      	ldr	r3, [pc, #4]	; (400468 <TWI1_Handler+0xc>)
  400464:	4798      	blx	r3
}
  400466:	bd80      	pop	{r7, pc}
  400468:	00400121 	.word	0x00400121

0040046c <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  40046c:	b580      	push	{r7, lr}
  40046e:	b084      	sub	sp, #16
  400470:	af00      	add	r7, sp, #0
  400472:	60f8      	str	r0, [r7, #12]
  400474:	60b9      	str	r1, [r7, #8]
  400476:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400478:	68bb      	ldr	r3, [r7, #8]
  40047a:	2b0e      	cmp	r3, #14
  40047c:	d002      	beq.n	400484 <efc_perform_command+0x18>
  40047e:	68bb      	ldr	r3, [r7, #8]
  400480:	2b0f      	cmp	r3, #15
  400482:	d102      	bne.n	40048a <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  400484:	f04f 33ff 	mov.w	r3, #4294967295
  400488:	e00f      	b.n	4004aa <efc_perform_command+0x3e>
	}

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  40048a:	687b      	ldr	r3, [r7, #4]
  40048c:	021b      	lsls	r3, r3, #8
  40048e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  400496:	68ba      	ldr	r2, [r7, #8]
  400498:	b2d2      	uxtb	r2, r2
		return EFC_RC_NOT_SUPPORT;
	}

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  40049a:	4313      	orrs	r3, r2
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
		return EFC_RC_NOT_SUPPORT;
	}

	/* Use RAM Function. */
	return efc_perform_fcr(p_efc,
  40049c:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  4004a0:	68f8      	ldr	r0, [r7, #12]
  4004a2:	4619      	mov	r1, r3
  4004a4:	4b03      	ldr	r3, [pc, #12]	; (4004b4 <efc_perform_command+0x48>)
  4004a6:	4798      	blx	r3
  4004a8:	4603      	mov	r3, r0
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
}
  4004aa:	4618      	mov	r0, r3
  4004ac:	3710      	adds	r7, #16
  4004ae:	46bd      	mov	sp, r7
  4004b0:	bd80      	pop	{r7, pc}
  4004b2:	bf00      	nop
  4004b4:	200000c1 	.word	0x200000c1

004004b8 <flash_read_user_signature>:
 * \param ul_size Data buffer size in 32 bit words.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_user_signature(uint32_t *p_data, uint32_t ul_size)
{
  4004b8:	b590      	push	{r4, r7, lr}
  4004ba:	b085      	sub	sp, #20
  4004bc:	af02      	add	r7, sp, #8
  4004be:	6078      	str	r0, [r7, #4]
  4004c0:	6039      	str	r1, [r7, #0]
	if (ul_size > (FLASH_USER_SIG_SIZE / sizeof(uint32_t))) {
  4004c2:	683b      	ldr	r3, [r7, #0]
  4004c4:	2b80      	cmp	r3, #128	; 0x80
  4004c6:	d901      	bls.n	4004cc <flash_read_user_signature+0x14>
		/* Only 512 byte to store user signature */
		ul_size = FLASH_USER_SIG_SIZE / sizeof(uint32_t);
  4004c8:	2380      	movs	r3, #128	; 0x80
  4004ca:	603b      	str	r3, [r7, #0]
	}

	/* Send the read user signature commands */
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUS,
  4004cc:	683b      	ldr	r3, [r7, #0]
  4004ce:	9300      	str	r3, [sp, #0]
  4004d0:	4807      	ldr	r0, [pc, #28]	; (4004f0 <flash_read_user_signature+0x38>)
  4004d2:	2114      	movs	r1, #20
  4004d4:	2215      	movs	r2, #21
  4004d6:	687b      	ldr	r3, [r7, #4]
  4004d8:	4c06      	ldr	r4, [pc, #24]	; (4004f4 <flash_read_user_signature+0x3c>)
  4004da:	47a0      	blx	r4
  4004dc:	4603      	mov	r3, r0
  4004de:	2b00      	cmp	r3, #0
  4004e0:	d001      	beq.n	4004e6 <flash_read_user_signature+0x2e>
			EFC_FCMD_SPUS, p_data, ul_size)) {
		return FLASH_RC_ERROR;
  4004e2:	2310      	movs	r3, #16
  4004e4:	e000      	b.n	4004e8 <flash_read_user_signature+0x30>
	}

	return FLASH_RC_OK;
  4004e6:	2300      	movs	r3, #0
}
  4004e8:	4618      	mov	r0, r3
  4004ea:	370c      	adds	r7, #12
  4004ec:	46bd      	mov	sp, r7
  4004ee:	bd90      	pop	{r4, r7, pc}
  4004f0:	400e0a00 	.word	0x400e0a00
  4004f4:	20000001 	.word	0x20000001

004004f8 <flash_write_user_signature>:
 * \param ul_size Data buffer size in 32 bit words.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_write_user_signature(const void *p_buffer, uint32_t ul_size)
{
  4004f8:	b580      	push	{r7, lr}
  4004fa:	b084      	sub	sp, #16
  4004fc:	af00      	add	r7, sp, #0
  4004fe:	6078      	str	r0, [r7, #4]
  400500:	6039      	str	r1, [r7, #0]
	uint32_t ul_idx;
	uint32_t *p_dest;

	/* The user signature should be no longer than 512 bytes */
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
  400502:	683b      	ldr	r3, [r7, #0]
  400504:	2b80      	cmp	r3, #128	; 0x80
  400506:	d901      	bls.n	40050c <flash_write_user_signature+0x14>
		return FLASH_RC_INVALID;
  400508:	2311      	movs	r3, #17
  40050a:	e025      	b.n	400558 <flash_write_user_signature+0x60>
	}

	/* Copy Buffer data */
	memcpy((uint8_t *) gs_ul_page_buffer, p_buffer, 
			ul_size * sizeof(uint32_t));
  40050c:	683b      	ldr	r3, [r7, #0]
  40050e:	009b      	lsls	r3, r3, #2
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
		return FLASH_RC_INVALID;
	}

	/* Copy Buffer data */
	memcpy((uint8_t *) gs_ul_page_buffer, p_buffer, 
  400510:	4813      	ldr	r0, [pc, #76]	; (400560 <flash_write_user_signature+0x68>)
  400512:	6879      	ldr	r1, [r7, #4]
  400514:	461a      	mov	r2, r3
  400516:	4b13      	ldr	r3, [pc, #76]	; (400564 <flash_write_user_signature+0x6c>)
  400518:	4798      	blx	r3

	/* Write page buffer.
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
  40051a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  40051e:	60bb      	str	r3, [r7, #8]
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
  400520:	2300      	movs	r3, #0
  400522:	60fb      	str	r3, [r7, #12]
  400524:	e00a      	b.n	40053c <flash_write_user_signature+0x44>
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
  400526:	68bb      	ldr	r3, [r7, #8]
  400528:	1d1a      	adds	r2, r3, #4
  40052a:	60ba      	str	r2, [r7, #8]
  40052c:	4a0c      	ldr	r2, [pc, #48]	; (400560 <flash_write_user_signature+0x68>)
  40052e:	68f9      	ldr	r1, [r7, #12]
  400530:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  400534:	601a      	str	r2, [r3, #0]
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
			ul_idx++) {
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	3301      	adds	r3, #1
  40053a:	60fb      	str	r3, [r7, #12]
	/* Write page buffer.
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
  40053c:	68fb      	ldr	r3, [r7, #12]
  40053e:	2b7f      	cmp	r3, #127	; 0x7f
  400540:	d9f1      	bls.n	400526 <flash_write_user_signature+0x2e>
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
	}

	/* Send the write signature command */
	if (FLASH_RC_OK != efc_perform_command(EFC, EFC_FCMD_WUS, 0)) {
  400542:	4809      	ldr	r0, [pc, #36]	; (400568 <flash_write_user_signature+0x70>)
  400544:	2112      	movs	r1, #18
  400546:	2200      	movs	r2, #0
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <flash_write_user_signature+0x74>)
  40054a:	4798      	blx	r3
  40054c:	4603      	mov	r3, r0
  40054e:	2b00      	cmp	r3, #0
  400550:	d001      	beq.n	400556 <flash_write_user_signature+0x5e>
		return FLASH_RC_ERROR;
  400552:	2310      	movs	r3, #16
  400554:	e000      	b.n	400558 <flash_write_user_signature+0x60>
	}

	return FLASH_RC_OK;
  400556:	2300      	movs	r3, #0
}
  400558:	4618      	mov	r0, r3
  40055a:	3710      	adds	r7, #16
  40055c:	46bd      	mov	sp, r7
  40055e:	bd80      	pop	{r7, pc}
  400560:	20001078 	.word	0x20001078
  400564:	00412f69 	.word	0x00412f69
  400568:	400e0a00 	.word	0x400e0a00
  40056c:	0040046d 	.word	0x0040046d

00400570 <flash_erase_user_signature>:
 * \brief Erase the flash user signature.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_user_signature(void)
{
  400570:	b580      	push	{r7, lr}
  400572:	af00      	add	r7, sp, #0
	/* Perform the erase user signature command */
	return efc_perform_command(EFC, EFC_FCMD_EUS, 0);
  400574:	4803      	ldr	r0, [pc, #12]	; (400584 <flash_erase_user_signature+0x14>)
  400576:	2113      	movs	r1, #19
  400578:	2200      	movs	r2, #0
  40057a:	4b03      	ldr	r3, [pc, #12]	; (400588 <flash_erase_user_signature+0x18>)
  40057c:	4798      	blx	r3
  40057e:	4603      	mov	r3, r0
}
  400580:	4618      	mov	r0, r3
  400582:	bd80      	pop	{r7, pc}
  400584:	400e0a00 	.word	0x400e0a00
  400588:	0040046d 	.word	0x0040046d

0040058c <rstc_start_software_reset>:
 * \brief Perform software reset.
 *
 * \param p_rstc Pointer to an RSTC instance.
 */
void rstc_start_software_reset(Rstc *p_rstc)
{
  40058c:	b480      	push	{r7}
  40058e:	b083      	sub	sp, #12
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  400594:	687b      	ldr	r3, [r7, #4]
  400596:	4a03      	ldr	r2, [pc, #12]	; (4005a4 <rstc_start_software_reset+0x18>)
  400598:	601a      	str	r2, [r3, #0]
}
  40059a:	370c      	adds	r7, #12
  40059c:	46bd      	mov	sp, r7
  40059e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005a2:	4770      	bx	lr
  4005a4:	a5000005 	.word	0xa5000005

004005a8 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  4005a8:	b480      	push	{r7}
  4005aa:	b083      	sub	sp, #12
  4005ac:	af00      	add	r7, sp, #0
  4005ae:	6078      	str	r0, [r7, #4]
  4005b0:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  4005b2:	687b      	ldr	r3, [r7, #4]
  4005b4:	683a      	ldr	r2, [r7, #0]
  4005b6:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  4005b8:	687b      	ldr	r3, [r7, #4]
  4005ba:	6a1b      	ldr	r3, [r3, #32]
}
  4005bc:	370c      	adds	r7, #12
  4005be:	46bd      	mov	sp, r7
  4005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop

004005c8 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  4005c8:	b480      	push	{r7}
  4005ca:	b083      	sub	sp, #12
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	6a1b      	ldr	r3, [r3, #32]
}
  4005d4:	4618      	mov	r0, r3
  4005d6:	370c      	adds	r7, #12
  4005d8:	46bd      	mov	sp, r7
  4005da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005de:	4770      	bx	lr

004005e0 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  4005e0:	b480      	push	{r7}
  4005e2:	b083      	sub	sp, #12
  4005e4:	af00      	add	r7, sp, #0
  4005e6:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  4005e8:	687b      	ldr	r3, [r7, #4]
  4005ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  4005ec:	4618      	mov	r0, r3
  4005ee:	370c      	adds	r7, #12
  4005f0:	46bd      	mov	sp, r7
  4005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005f6:	4770      	bx	lr

004005f8 <vLedTimerCallback>:

/**
 * @brief: Timer callback function. Used for the blink functionality of LEDs
 **/
void vLedTimerCallback( xTimerHandle xTimer )
{
  4005f8:	b590      	push	{r4, r7, lr}
  4005fa:	b087      	sub	sp, #28
  4005fc:	af02      	add	r7, sp, #8
  4005fe:	6078      	str	r0, [r7, #4]
	if((vledState != DRV_LED_SOLID) && (vEnableAlternateBlink == FALSE))	//perform the action only if state is flashing
  400600:	4b68      	ldr	r3, [pc, #416]	; (4007a4 <vLedTimerCallback+0x1ac>)
  400602:	781b      	ldrb	r3, [r3, #0]
  400604:	2b01      	cmp	r3, #1
  400606:	d070      	beq.n	4006ea <vLedTimerCallback+0xf2>
  400608:	4b67      	ldr	r3, [pc, #412]	; (4007a8 <vLedTimerCallback+0x1b0>)
  40060a:	781b      	ldrb	r3, [r3, #0]
  40060c:	f083 0301 	eor.w	r3, r3, #1
  400610:	b2db      	uxtb	r3, r3
  400612:	2b00      	cmp	r3, #0
  400614:	d069      	beq.n	4006ea <vLedTimerCallback+0xf2>
	{
		//check which led color is set and toggle the pin state
		toggle_led_color(vledColor);
  400616:	4b65      	ldr	r3, [pc, #404]	; (4007ac <vLedTimerCallback+0x1b4>)
  400618:	781b      	ldrb	r3, [r3, #0]
  40061a:	4618      	mov	r0, r3
  40061c:	4b64      	ldr	r3, [pc, #400]	; (4007b0 <vLedTimerCallback+0x1b8>)
  40061e:	4798      	blx	r3
		
		//set multiple blink patterns here
		if ((vledState != DRV_LED_FLASH) && (vledState != DRV_LED_SOLID))
  400620:	4b60      	ldr	r3, [pc, #384]	; (4007a4 <vLedTimerCallback+0x1ac>)
  400622:	781b      	ldrb	r3, [r3, #0]
  400624:	2b00      	cmp	r3, #0
  400626:	d05f      	beq.n	4006e8 <vLedTimerCallback+0xf0>
  400628:	4b5e      	ldr	r3, [pc, #376]	; (4007a4 <vLedTimerCallback+0x1ac>)
  40062a:	781b      	ldrb	r3, [r3, #0]
  40062c:	2b01      	cmp	r3, #1
  40062e:	d05b      	beq.n	4006e8 <vLedTimerCallback+0xf0>
		{
			if (ledBlinkCount > 0)
  400630:	4b60      	ldr	r3, [pc, #384]	; (4007b4 <vLedTimerCallback+0x1bc>)
  400632:	781b      	ldrb	r3, [r3, #0]
  400634:	2b00      	cmp	r3, #0
  400636:	d057      	beq.n	4006e8 <vLedTimerCallback+0xf0>
			{
				if (vtoggleLedBlinkRate == TRUE)
  400638:	4b5f      	ldr	r3, [pc, #380]	; (4007b8 <vLedTimerCallback+0x1c0>)
  40063a:	781b      	ldrb	r3, [r3, #0]
  40063c:	2b00      	cmp	r3, #0
  40063e:	d01f      	beq.n	400680 <vLedTimerCallback+0x88>
				{
					if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  400640:	4b5e      	ldr	r3, [pc, #376]	; (4007bc <vLedTimerCallback+0x1c4>)
  400642:	681b      	ldr	r3, [r3, #0]
  400644:	4618      	mov	r0, r3
  400646:	4b5e      	ldr	r3, [pc, #376]	; (4007c0 <vLedTimerCallback+0x1c8>)
  400648:	4798      	blx	r3
  40064a:	4603      	mov	r3, r0
  40064c:	2b00      	cmp	r3, #0
  40064e:	d009      	beq.n	400664 <vLedTimerCallback+0x6c>
					{
						//timer is active, stop it
						xTimerStop(LedTimer, 0);
  400650:	4b5a      	ldr	r3, [pc, #360]	; (4007bc <vLedTimerCallback+0x1c4>)
  400652:	681b      	ldr	r3, [r3, #0]
  400654:	2200      	movs	r2, #0
  400656:	9200      	str	r2, [sp, #0]
  400658:	4618      	mov	r0, r3
  40065a:	2101      	movs	r1, #1
  40065c:	2200      	movs	r2, #0
  40065e:	2300      	movs	r3, #0
  400660:	4c58      	ldr	r4, [pc, #352]	; (4007c4 <vLedTimerCallback+0x1cc>)
  400662:	47a0      	blx	r4
					}
					portBASE_TYPE result = xTimerChangePeriod(LedTimer, (LED_BLINK_RATE/portTICK_RATE_MS), 0);	//reconfiguring timer restarts it
  400664:	4b55      	ldr	r3, [pc, #340]	; (4007bc <vLedTimerCallback+0x1c4>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2200      	movs	r2, #0
  40066a:	9200      	str	r2, [sp, #0]
  40066c:	4618      	mov	r0, r3
  40066e:	2102      	movs	r1, #2
  400670:	22fa      	movs	r2, #250	; 0xfa
  400672:	2300      	movs	r3, #0
  400674:	4c53      	ldr	r4, [pc, #332]	; (4007c4 <vLedTimerCallback+0x1cc>)
  400676:	47a0      	blx	r4
  400678:	60f8      	str	r0, [r7, #12]
					vtoggleLedBlinkRate = FALSE;
  40067a:	4b4f      	ldr	r3, [pc, #316]	; (4007b8 <vLedTimerCallback+0x1c0>)
  40067c:	2200      	movs	r2, #0
  40067e:	701a      	strb	r2, [r3, #0]
				}
				ledBlinkCount--;
  400680:	4b4c      	ldr	r3, [pc, #304]	; (4007b4 <vLedTimerCallback+0x1bc>)
  400682:	781b      	ldrb	r3, [r3, #0]
  400684:	3b01      	subs	r3, #1
  400686:	b2da      	uxtb	r2, r3
  400688:	4b4a      	ldr	r3, [pc, #296]	; (4007b4 <vLedTimerCallback+0x1bc>)
  40068a:	701a      	strb	r2, [r3, #0]
				if (ledBlinkCount == 1)
  40068c:	4b49      	ldr	r3, [pc, #292]	; (4007b4 <vLedTimerCallback+0x1bc>)
  40068e:	781b      	ldrb	r3, [r3, #0]
  400690:	2b01      	cmp	r3, #1
  400692:	d129      	bne.n	4006e8 <vLedTimerCallback+0xf0>
				{
					if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  400694:	4b49      	ldr	r3, [pc, #292]	; (4007bc <vLedTimerCallback+0x1c4>)
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	4618      	mov	r0, r3
  40069a:	4b49      	ldr	r3, [pc, #292]	; (4007c0 <vLedTimerCallback+0x1c8>)
  40069c:	4798      	blx	r3
  40069e:	4603      	mov	r3, r0
  4006a0:	2b00      	cmp	r3, #0
  4006a2:	d009      	beq.n	4006b8 <vLedTimerCallback+0xc0>
					{
						//timer is active, stop it
						xTimerStop(LedTimer, 0);
  4006a4:	4b45      	ldr	r3, [pc, #276]	; (4007bc <vLedTimerCallback+0x1c4>)
  4006a6:	681b      	ldr	r3, [r3, #0]
  4006a8:	2200      	movs	r2, #0
  4006aa:	9200      	str	r2, [sp, #0]
  4006ac:	4618      	mov	r0, r3
  4006ae:	2101      	movs	r1, #1
  4006b0:	2200      	movs	r2, #0
  4006b2:	2300      	movs	r3, #0
  4006b4:	4c43      	ldr	r4, [pc, #268]	; (4007c4 <vLedTimerCallback+0x1cc>)
  4006b6:	47a0      	blx	r4
					}
					portBASE_TYPE res = xTimerChangePeriod(LedTimer, (BLINK_DELAY/portTICK_RATE_MS), 0);	//reconfiguring timer restarts it
  4006b8:	4b40      	ldr	r3, [pc, #256]	; (4007bc <vLedTimerCallback+0x1c4>)
  4006ba:	681b      	ldr	r3, [r3, #0]
  4006bc:	2200      	movs	r2, #0
  4006be:	9200      	str	r2, [sp, #0]
  4006c0:	4618      	mov	r0, r3
  4006c2:	2102      	movs	r1, #2
  4006c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4006c8:	2300      	movs	r3, #0
  4006ca:	4c3e      	ldr	r4, [pc, #248]	; (4007c4 <vLedTimerCallback+0x1cc>)
  4006cc:	47a0      	blx	r4
  4006ce:	60b8      	str	r0, [r7, #8]
					vtoggleLedBlinkRate = TRUE;
  4006d0:	4b39      	ldr	r3, [pc, #228]	; (4007b8 <vLedTimerCallback+0x1c0>)
  4006d2:	2201      	movs	r2, #1
  4006d4:	701a      	strb	r2, [r3, #0]
					ledBlinkCount = 2*vledState +1;	//reload the ledBlinkCount
  4006d6:	4b33      	ldr	r3, [pc, #204]	; (4007a4 <vLedTimerCallback+0x1ac>)
  4006d8:	781b      	ldrb	r3, [r3, #0]
  4006da:	005b      	lsls	r3, r3, #1
  4006dc:	b2db      	uxtb	r3, r3
  4006de:	3301      	adds	r3, #1
  4006e0:	b2da      	uxtb	r2, r3
  4006e2:	4b34      	ldr	r3, [pc, #208]	; (4007b4 <vLedTimerCallback+0x1bc>)
  4006e4:	701a      	strb	r2, [r3, #0]
	{
		//check which led color is set and toggle the pin state
		toggle_led_color(vledColor);
		
		//set multiple blink patterns here
		if ((vledState != DRV_LED_FLASH) && (vledState != DRV_LED_SOLID))
  4006e6:	e05a      	b.n	40079e <vLedTimerCallback+0x1a6>
  4006e8:	e059      	b.n	40079e <vLedTimerCallback+0x1a6>
			}
		}
	}
	
	//Blink two colors alternately
	else if ((vledState != DRV_LED_SOLID) && (vEnableAlternateBlink == TRUE))
  4006ea:	4b2e      	ldr	r3, [pc, #184]	; (4007a4 <vLedTimerCallback+0x1ac>)
  4006ec:	781b      	ldrb	r3, [r3, #0]
  4006ee:	2b01      	cmp	r3, #1
  4006f0:	d04b      	beq.n	40078a <vLedTimerCallback+0x192>
  4006f2:	4b2d      	ldr	r3, [pc, #180]	; (4007a8 <vLedTimerCallback+0x1b0>)
  4006f4:	781b      	ldrb	r3, [r3, #0]
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d047      	beq.n	40078a <vLedTimerCallback+0x192>
	{
		ledBlinkCount--;
  4006fa:	4b2e      	ldr	r3, [pc, #184]	; (4007b4 <vLedTimerCallback+0x1bc>)
  4006fc:	781b      	ldrb	r3, [r3, #0]
  4006fe:	3b01      	subs	r3, #1
  400700:	b2da      	uxtb	r2, r3
  400702:	4b2c      	ldr	r3, [pc, #176]	; (4007b4 <vLedTimerCallback+0x1bc>)
  400704:	701a      	strb	r2, [r3, #0]
		if (ledBlinkCount == 4)
  400706:	4b2b      	ldr	r3, [pc, #172]	; (4007b4 <vLedTimerCallback+0x1bc>)
  400708:	781b      	ldrb	r3, [r3, #0]
  40070a:	2b04      	cmp	r3, #4
  40070c:	d105      	bne.n	40071a <vLedTimerCallback+0x122>
		{
			set_led_color(vledColor);
  40070e:	4b27      	ldr	r3, [pc, #156]	; (4007ac <vLedTimerCallback+0x1b4>)
  400710:	781b      	ldrb	r3, [r3, #0]
  400712:	4618      	mov	r0, r3
  400714:	4b2c      	ldr	r3, [pc, #176]	; (4007c8 <vLedTimerCallback+0x1d0>)
  400716:	4798      	blx	r3
  400718:	e036      	b.n	400788 <vLedTimerCallback+0x190>
		}
		else if (ledBlinkCount == 3)
  40071a:	4b26      	ldr	r3, [pc, #152]	; (4007b4 <vLedTimerCallback+0x1bc>)
  40071c:	781b      	ldrb	r3, [r3, #0]
  40071e:	2b03      	cmp	r3, #3
  400720:	d112      	bne.n	400748 <vLedTimerCallback+0x150>
		{
			//switch off all LEDs
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  400722:	4b2a      	ldr	r3, [pc, #168]	; (4007cc <vLedTimerCallback+0x1d4>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	4618      	mov	r0, r3
  400728:	2101      	movs	r1, #1
  40072a:	4b29      	ldr	r3, [pc, #164]	; (4007d0 <vLedTimerCallback+0x1d8>)
  40072c:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  40072e:	4b27      	ldr	r3, [pc, #156]	; (4007cc <vLedTimerCallback+0x1d4>)
  400730:	785b      	ldrb	r3, [r3, #1]
  400732:	4618      	mov	r0, r3
  400734:	2101      	movs	r1, #1
  400736:	4b26      	ldr	r3, [pc, #152]	; (4007d0 <vLedTimerCallback+0x1d8>)
  400738:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  40073a:	4b24      	ldr	r3, [pc, #144]	; (4007cc <vLedTimerCallback+0x1d4>)
  40073c:	789b      	ldrb	r3, [r3, #2]
  40073e:	4618      	mov	r0, r3
  400740:	2101      	movs	r1, #1
  400742:	4b23      	ldr	r3, [pc, #140]	; (4007d0 <vLedTimerCallback+0x1d8>)
  400744:	4798      	blx	r3
  400746:	e01f      	b.n	400788 <vLedTimerCallback+0x190>
		}
		else if (ledBlinkCount == 2)
  400748:	4b1a      	ldr	r3, [pc, #104]	; (4007b4 <vLedTimerCallback+0x1bc>)
  40074a:	781b      	ldrb	r3, [r3, #0]
  40074c:	2b02      	cmp	r3, #2
  40074e:	d105      	bne.n	40075c <vLedTimerCallback+0x164>
		{
			set_led_color(vAlternateColor);
  400750:	4b20      	ldr	r3, [pc, #128]	; (4007d4 <vLedTimerCallback+0x1dc>)
  400752:	781b      	ldrb	r3, [r3, #0]
  400754:	4618      	mov	r0, r3
  400756:	4b1c      	ldr	r3, [pc, #112]	; (4007c8 <vLedTimerCallback+0x1d0>)
  400758:	4798      	blx	r3
  40075a:	e015      	b.n	400788 <vLedTimerCallback+0x190>
		}
		else
		{
			//switch off all LEDs
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  40075c:	4b1b      	ldr	r3, [pc, #108]	; (4007cc <vLedTimerCallback+0x1d4>)
  40075e:	781b      	ldrb	r3, [r3, #0]
  400760:	4618      	mov	r0, r3
  400762:	2101      	movs	r1, #1
  400764:	4b1a      	ldr	r3, [pc, #104]	; (4007d0 <vLedTimerCallback+0x1d8>)
  400766:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  400768:	4b18      	ldr	r3, [pc, #96]	; (4007cc <vLedTimerCallback+0x1d4>)
  40076a:	785b      	ldrb	r3, [r3, #1]
  40076c:	4618      	mov	r0, r3
  40076e:	2101      	movs	r1, #1
  400770:	4b17      	ldr	r3, [pc, #92]	; (4007d0 <vLedTimerCallback+0x1d8>)
  400772:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  400774:	4b15      	ldr	r3, [pc, #84]	; (4007cc <vLedTimerCallback+0x1d4>)
  400776:	789b      	ldrb	r3, [r3, #2]
  400778:	4618      	mov	r0, r3
  40077a:	2101      	movs	r1, #1
  40077c:	4b14      	ldr	r3, [pc, #80]	; (4007d0 <vLedTimerCallback+0x1d8>)
  40077e:	4798      	blx	r3
			ledBlinkCount = 5;
  400780:	4b0c      	ldr	r3, [pc, #48]	; (4007b4 <vLedTimerCallback+0x1bc>)
  400782:	2205      	movs	r2, #5
  400784:	701a      	strb	r2, [r3, #0]
	
	//Blink two colors alternately
	else if ((vledState != DRV_LED_SOLID) && (vEnableAlternateBlink == TRUE))
	{
		ledBlinkCount--;
		if (ledBlinkCount == 4)
  400786:	e00a      	b.n	40079e <vLedTimerCallback+0x1a6>
  400788:	e009      	b.n	40079e <vLedTimerCallback+0x1a6>
	}
	else
	{
		//usually shouldn't end up here
		//if it does the timer was not stopped while initializing led to SOLID state
		xTimerStop(LedTimer, 0);
  40078a:	4b0c      	ldr	r3, [pc, #48]	; (4007bc <vLedTimerCallback+0x1c4>)
  40078c:	681b      	ldr	r3, [r3, #0]
  40078e:	2200      	movs	r2, #0
  400790:	9200      	str	r2, [sp, #0]
  400792:	4618      	mov	r0, r3
  400794:	2101      	movs	r1, #1
  400796:	2200      	movs	r2, #0
  400798:	2300      	movs	r3, #0
  40079a:	4c0a      	ldr	r4, [pc, #40]	; (4007c4 <vLedTimerCallback+0x1cc>)
  40079c:	47a0      	blx	r4
	}
}
  40079e:	3714      	adds	r7, #20
  4007a0:	46bd      	mov	sp, r7
  4007a2:	bd90      	pop	{r4, r7, pc}
  4007a4:	20003a1c 	.word	0x20003a1c
  4007a8:	2000127a 	.word	0x2000127a
  4007ac:	20003a14 	.word	0x20003a14
  4007b0:	00400aa9 	.word	0x00400aa9
  4007b4:	20001278 	.word	0x20001278
  4007b8:	20001279 	.word	0x20001279
  4007bc:	20003a18 	.word	0x20003a18
  4007c0:	0040c50d 	.word	0x0040c50d
  4007c4:	0040c029 	.word	0x0040c029
  4007c8:	004009b9 	.word	0x004009b9
  4007cc:	20003a20 	.word	0x20003a20
  4007d0:	0040d7b5 	.word	0x0040d7b5
  4007d4:	20003a23 	.word	0x20003a23

004007d8 <drv_led_init>:
 * @brief initialize LED driver and the timer
 * @param configLed, the configuration structure for the LED, contains gpio mappings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_led_init(drv_led_config_t* configLed)
{
  4007d8:	b590      	push	{r4, r7, lr}
  4007da:	b087      	sub	sp, #28
  4007dc:	af02      	add	r7, sp, #8
  4007de:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  4007e0:	2300      	movs	r3, #0
  4007e2:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  4007e4:	687b      	ldr	r3, [r7, #4]
  4007e6:	781a      	ldrb	r2, [r3, #0]
  4007e8:	4b0f      	ldr	r3, [pc, #60]	; (400828 <drv_led_init+0x50>)
  4007ea:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	785a      	ldrb	r2, [r3, #1]
  4007f0:	4b0d      	ldr	r3, [pc, #52]	; (400828 <drv_led_init+0x50>)
  4007f2:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  4007f4:	687b      	ldr	r3, [r7, #4]
  4007f6:	789a      	ldrb	r2, [r3, #2]
  4007f8:	4b0b      	ldr	r3, [pc, #44]	; (400828 <drv_led_init+0x50>)
  4007fa:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, NULL, vLedTimerCallback);
  4007fc:	4b0b      	ldr	r3, [pc, #44]	; (40082c <drv_led_init+0x54>)
  4007fe:	9300      	str	r3, [sp, #0]
  400800:	480b      	ldr	r0, [pc, #44]	; (400830 <drv_led_init+0x58>)
  400802:	21fa      	movs	r1, #250	; 0xfa
  400804:	2201      	movs	r2, #1
  400806:	2300      	movs	r3, #0
  400808:	4c0a      	ldr	r4, [pc, #40]	; (400834 <drv_led_init+0x5c>)
  40080a:	47a0      	blx	r4
  40080c:	4602      	mov	r2, r0
  40080e:	4b0a      	ldr	r3, [pc, #40]	; (400838 <drv_led_init+0x60>)
  400810:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  400812:	4b09      	ldr	r3, [pc, #36]	; (400838 <drv_led_init+0x60>)
  400814:	681b      	ldr	r3, [r3, #0]
  400816:	2b00      	cmp	r3, #0
  400818:	d101      	bne.n	40081e <drv_led_init+0x46>
	{
		result = STATUS_FAIL;
  40081a:	2301      	movs	r3, #1
  40081c:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  40081e:	7bfb      	ldrb	r3, [r7, #15]
}
  400820:	4618      	mov	r0, r3
  400822:	3714      	adds	r7, #20
  400824:	46bd      	mov	sp, r7
  400826:	bd90      	pop	{r4, r7, pc}
  400828:	20003a20 	.word	0x20003a20
  40082c:	004005f9 	.word	0x004005f9
  400830:	0041bfb4 	.word	0x0041bfb4
  400834:	0040bfbd 	.word	0x0040bfbd
  400838:	20003a18 	.word	0x20003a18

0040083c <drv_led_set>:
 * @brief Set the LED color and blink pattern
 * @param ledColor- the color to be set, ledState- one of the states enumerated in drv_led_state_type_t   
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  40083c:	b590      	push	{r4, r7, lr}
  40083e:	b087      	sub	sp, #28
  400840:	af02      	add	r7, sp, #8
  400842:	4602      	mov	r2, r0
  400844:	460b      	mov	r3, r1
  400846:	71fa      	strb	r2, [r7, #7]
  400848:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  40084a:	2300      	movs	r3, #0
  40084c:	73fb      	strb	r3, [r7, #15]
	if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  40084e:	4b41      	ldr	r3, [pc, #260]	; (400954 <drv_led_set+0x118>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	4618      	mov	r0, r3
  400854:	4b40      	ldr	r3, [pc, #256]	; (400958 <drv_led_set+0x11c>)
  400856:	4798      	blx	r3
  400858:	4603      	mov	r3, r0
  40085a:	2b00      	cmp	r3, #0
  40085c:	d009      	beq.n	400872 <drv_led_set+0x36>
	{
		//timer is active, stop it
		xTimerStop(LedTimer, 0);		
  40085e:	4b3d      	ldr	r3, [pc, #244]	; (400954 <drv_led_set+0x118>)
  400860:	681b      	ldr	r3, [r3, #0]
  400862:	2200      	movs	r2, #0
  400864:	9200      	str	r2, [sp, #0]
  400866:	4618      	mov	r0, r3
  400868:	2101      	movs	r1, #1
  40086a:	2200      	movs	r2, #0
  40086c:	2300      	movs	r3, #0
  40086e:	4c3b      	ldr	r4, [pc, #236]	; (40095c <drv_led_set+0x120>)
  400870:	47a0      	blx	r4
	}
	//configure the multiple blink pattern here
	if ((ledState == DRV_LED_SOLID) || (ledState == DRV_LED_FLASH))
  400872:	79bb      	ldrb	r3, [r7, #6]
  400874:	2b01      	cmp	r3, #1
  400876:	d002      	beq.n	40087e <drv_led_set+0x42>
  400878:	79bb      	ldrb	r3, [r7, #6]
  40087a:	2b00      	cmp	r3, #0
  40087c:	d103      	bne.n	400886 <drv_led_set+0x4a>
	{
		ledBlinkCount = 0;
  40087e:	4b38      	ldr	r3, [pc, #224]	; (400960 <drv_led_set+0x124>)
  400880:	2200      	movs	r2, #0
  400882:	701a      	strb	r2, [r3, #0]
  400884:	e004      	b.n	400890 <drv_led_set+0x54>
	}
	else
	{
		ledBlinkCount = 2*ledState;
  400886:	79bb      	ldrb	r3, [r7, #6]
  400888:	005b      	lsls	r3, r3, #1
  40088a:	b2da      	uxtb	r2, r3
  40088c:	4b34      	ldr	r3, [pc, #208]	; (400960 <drv_led_set+0x124>)
  40088e:	701a      	strb	r2, [r3, #0]
	}
	
	//switch off all LEDs
	drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  400890:	4b34      	ldr	r3, [pc, #208]	; (400964 <drv_led_set+0x128>)
  400892:	781b      	ldrb	r3, [r3, #0]
  400894:	4618      	mov	r0, r3
  400896:	2101      	movs	r1, #1
  400898:	4b33      	ldr	r3, [pc, #204]	; (400968 <drv_led_set+0x12c>)
  40089a:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  40089c:	4b31      	ldr	r3, [pc, #196]	; (400964 <drv_led_set+0x128>)
  40089e:	785b      	ldrb	r3, [r3, #1]
  4008a0:	4618      	mov	r0, r3
  4008a2:	2101      	movs	r1, #1
  4008a4:	4b30      	ldr	r3, [pc, #192]	; (400968 <drv_led_set+0x12c>)
  4008a6:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  4008a8:	4b2e      	ldr	r3, [pc, #184]	; (400964 <drv_led_set+0x128>)
  4008aa:	789b      	ldrb	r3, [r3, #2]
  4008ac:	4618      	mov	r0, r3
  4008ae:	2101      	movs	r1, #1
  4008b0:	4b2d      	ldr	r3, [pc, #180]	; (400968 <drv_led_set+0x12c>)
  4008b2:	4798      	blx	r3
	
	vEnableAlternateBlink = FALSE;	//clear the alternate blink flag
  4008b4:	4b2d      	ldr	r3, [pc, #180]	; (40096c <drv_led_set+0x130>)
  4008b6:	2200      	movs	r2, #0
  4008b8:	701a      	strb	r2, [r3, #0]
	vAlternateColor = DRV_LED_OFF;	//clear the alternate blink color
  4008ba:	4b2d      	ldr	r3, [pc, #180]	; (400970 <drv_led_set+0x134>)
  4008bc:	2206      	movs	r2, #6
  4008be:	701a      	strb	r2, [r3, #0]
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  4008c0:	4b2c      	ldr	r3, [pc, #176]	; (400974 <drv_led_set+0x138>)
  4008c2:	79fa      	ldrb	r2, [r7, #7]
  4008c4:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  4008c6:	4b2c      	ldr	r3, [pc, #176]	; (400978 <drv_led_set+0x13c>)
  4008c8:	79ba      	ldrb	r2, [r7, #6]
  4008ca:	701a      	strb	r2, [r3, #0]
	
	set_led_color(ledColor);
  4008cc:	79fb      	ldrb	r3, [r7, #7]
  4008ce:	4618      	mov	r0, r3
  4008d0:	4b2a      	ldr	r3, [pc, #168]	; (40097c <drv_led_set+0x140>)
  4008d2:	4798      	blx	r3
	
	if ((ledState != DRV_LED_SOLID) & (ledColor != DRV_LED_OFF))
  4008d4:	79bb      	ldrb	r3, [r7, #6]
  4008d6:	2b01      	cmp	r3, #1
  4008d8:	bf0c      	ite	eq
  4008da:	2300      	moveq	r3, #0
  4008dc:	2301      	movne	r3, #1
  4008de:	b2da      	uxtb	r2, r3
  4008e0:	79fb      	ldrb	r3, [r7, #7]
  4008e2:	2b06      	cmp	r3, #6
  4008e4:	bf0c      	ite	eq
  4008e6:	2300      	moveq	r3, #0
  4008e8:	2301      	movne	r3, #1
  4008ea:	b2db      	uxtb	r3, r3
  4008ec:	4013      	ands	r3, r2
  4008ee:	b2db      	uxtb	r3, r3
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	d017      	beq.n	400924 <drv_led_set+0xe8>
	{
		xTimerChangePeriod(LedTimer, (LED_BLINK_RATE/portTICK_RATE_MS), 0);
  4008f4:	4b17      	ldr	r3, [pc, #92]	; (400954 <drv_led_set+0x118>)
  4008f6:	681b      	ldr	r3, [r3, #0]
  4008f8:	2200      	movs	r2, #0
  4008fa:	9200      	str	r2, [sp, #0]
  4008fc:	4618      	mov	r0, r3
  4008fe:	2102      	movs	r1, #2
  400900:	22fa      	movs	r2, #250	; 0xfa
  400902:	2300      	movs	r3, #0
  400904:	4c15      	ldr	r4, [pc, #84]	; (40095c <drv_led_set+0x120>)
  400906:	47a0      	blx	r4
		xTimerReset(LedTimer, 0);
  400908:	4b12      	ldr	r3, [pc, #72]	; (400954 <drv_led_set+0x118>)
  40090a:	681c      	ldr	r4, [r3, #0]
  40090c:	4b1c      	ldr	r3, [pc, #112]	; (400980 <drv_led_set+0x144>)
  40090e:	4798      	blx	r3
  400910:	4603      	mov	r3, r0
  400912:	2200      	movs	r2, #0
  400914:	9200      	str	r2, [sp, #0]
  400916:	4620      	mov	r0, r4
  400918:	2100      	movs	r1, #0
  40091a:	461a      	mov	r2, r3
  40091c:	2300      	movs	r3, #0
  40091e:	4c0f      	ldr	r4, [pc, #60]	; (40095c <drv_led_set+0x120>)
  400920:	47a0      	blx	r4
  400922:	e011      	b.n	400948 <drv_led_set+0x10c>
	}
	else
	{
		//stop the timer
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  400924:	4b0b      	ldr	r3, [pc, #44]	; (400954 <drv_led_set+0x118>)
  400926:	681b      	ldr	r3, [r3, #0]
  400928:	4618      	mov	r0, r3
  40092a:	4b0b      	ldr	r3, [pc, #44]	; (400958 <drv_led_set+0x11c>)
  40092c:	4798      	blx	r3
  40092e:	4603      	mov	r3, r0
  400930:	2b00      	cmp	r3, #0
  400932:	d009      	beq.n	400948 <drv_led_set+0x10c>
		{
			xTimerStop(LedTimer, 0);
  400934:	4b07      	ldr	r3, [pc, #28]	; (400954 <drv_led_set+0x118>)
  400936:	681b      	ldr	r3, [r3, #0]
  400938:	2200      	movs	r2, #0
  40093a:	9200      	str	r2, [sp, #0]
  40093c:	4618      	mov	r0, r3
  40093e:	2101      	movs	r1, #1
  400940:	2200      	movs	r2, #0
  400942:	2300      	movs	r3, #0
  400944:	4c05      	ldr	r4, [pc, #20]	; (40095c <drv_led_set+0x120>)
  400946:	47a0      	blx	r4
		}
	}
	return result;
  400948:	7bfb      	ldrb	r3, [r7, #15]
}
  40094a:	4618      	mov	r0, r3
  40094c:	3714      	adds	r7, #20
  40094e:	46bd      	mov	sp, r7
  400950:	bd90      	pop	{r4, r7, pc}
  400952:	bf00      	nop
  400954:	20003a18 	.word	0x20003a18
  400958:	0040c50d 	.word	0x0040c50d
  40095c:	0040c029 	.word	0x0040c029
  400960:	20001278 	.word	0x20001278
  400964:	20003a20 	.word	0x20003a20
  400968:	0040d7b5 	.word	0x0040d7b5
  40096c:	2000127a 	.word	0x2000127a
  400970:	20003a23 	.word	0x20003a23
  400974:	20003a14 	.word	0x20003a14
  400978:	20003a1c 	.word	0x20003a1c
  40097c:	004009b9 	.word	0x004009b9
  400980:	0040b44d 	.word	0x0040b44d

00400984 <drv_led_activate_timer>:
 * @brief Activate or start the LED timer.
 * @param Void
 * @return Void
 ***********************************************************************************************/
void drv_led_activate_timer()
{
  400984:	b590      	push	{r4, r7, lr}
  400986:	b083      	sub	sp, #12
  400988:	af02      	add	r7, sp, #8
	xTimerStart(LedTimer, 0);
  40098a:	4b08      	ldr	r3, [pc, #32]	; (4009ac <drv_led_activate_timer+0x28>)
  40098c:	681c      	ldr	r4, [r3, #0]
  40098e:	4b08      	ldr	r3, [pc, #32]	; (4009b0 <drv_led_activate_timer+0x2c>)
  400990:	4798      	blx	r3
  400992:	4603      	mov	r3, r0
  400994:	2200      	movs	r2, #0
  400996:	9200      	str	r2, [sp, #0]
  400998:	4620      	mov	r0, r4
  40099a:	2100      	movs	r1, #0
  40099c:	461a      	mov	r2, r3
  40099e:	2300      	movs	r3, #0
  4009a0:	4c04      	ldr	r4, [pc, #16]	; (4009b4 <drv_led_activate_timer+0x30>)
  4009a2:	47a0      	blx	r4
}
  4009a4:	3704      	adds	r7, #4
  4009a6:	46bd      	mov	sp, r7
  4009a8:	bd90      	pop	{r4, r7, pc}
  4009aa:	bf00      	nop
  4009ac:	20003a18 	.word	0x20003a18
  4009b0:	0040b44d 	.word	0x0040b44d
  4009b4:	0040c029 	.word	0x0040c029

004009b8 <set_led_color>:

/**
 * @brief: Turn on LEDs corresponding to specified color
 **/
static void set_led_color(drv_led_color_type_t ledColor)
{
  4009b8:	b580      	push	{r7, lr}
  4009ba:	b082      	sub	sp, #8
  4009bc:	af00      	add	r7, sp, #0
  4009be:	4603      	mov	r3, r0
  4009c0:	71fb      	strb	r3, [r7, #7]
	switch (ledColor)
  4009c2:	79fb      	ldrb	r3, [r7, #7]
  4009c4:	2b06      	cmp	r3, #6
  4009c6:	d866      	bhi.n	400a96 <set_led_color+0xde>
  4009c8:	a201      	add	r2, pc, #4	; (adr r2, 4009d0 <set_led_color+0x18>)
  4009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009ce:	bf00      	nop
  4009d0:	004009ed 	.word	0x004009ed
  4009d4:	004009fb 	.word	0x004009fb
  4009d8:	00400a09 	.word	0x00400a09
  4009dc:	00400a17 	.word	0x00400a17
  4009e0:	00400a31 	.word	0x00400a31
  4009e4:	00400a57 	.word	0x00400a57
  4009e8:	00400a71 	.word	0x00400a71
		{
			case DRV_LED_RED:
				drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  4009ec:	4b2c      	ldr	r3, [pc, #176]	; (400aa0 <set_led_color+0xe8>)
  4009ee:	781b      	ldrb	r3, [r3, #0]
  4009f0:	4618      	mov	r0, r3
  4009f2:	2100      	movs	r1, #0
  4009f4:	4b2b      	ldr	r3, [pc, #172]	; (400aa4 <set_led_color+0xec>)
  4009f6:	4798      	blx	r3
				break;
  4009f8:	e04e      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_BLUE:
				drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4009fa:	4b29      	ldr	r3, [pc, #164]	; (400aa0 <set_led_color+0xe8>)
  4009fc:	785b      	ldrb	r3, [r3, #1]
  4009fe:	4618      	mov	r0, r3
  400a00:	2100      	movs	r1, #0
  400a02:	4b28      	ldr	r3, [pc, #160]	; (400aa4 <set_led_color+0xec>)
  400a04:	4798      	blx	r3
				break;
  400a06:	e047      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_GREEN:
				drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  400a08:	4b25      	ldr	r3, [pc, #148]	; (400aa0 <set_led_color+0xe8>)
  400a0a:	789b      	ldrb	r3, [r3, #2]
  400a0c:	4618      	mov	r0, r3
  400a0e:	2100      	movs	r1, #0
  400a10:	4b24      	ldr	r3, [pc, #144]	; (400aa4 <set_led_color+0xec>)
  400a12:	4798      	blx	r3
				break;
  400a14:	e040      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_YELLOW:
				drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  400a16:	4b22      	ldr	r3, [pc, #136]	; (400aa0 <set_led_color+0xe8>)
  400a18:	781b      	ldrb	r3, [r3, #0]
  400a1a:	4618      	mov	r0, r3
  400a1c:	2100      	movs	r1, #0
  400a1e:	4b21      	ldr	r3, [pc, #132]	; (400aa4 <set_led_color+0xec>)
  400a20:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  400a22:	4b1f      	ldr	r3, [pc, #124]	; (400aa0 <set_led_color+0xe8>)
  400a24:	789b      	ldrb	r3, [r3, #2]
  400a26:	4618      	mov	r0, r3
  400a28:	2100      	movs	r1, #0
  400a2a:	4b1e      	ldr	r3, [pc, #120]	; (400aa4 <set_led_color+0xec>)
  400a2c:	4798      	blx	r3
				break;
  400a2e:	e033      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_WHITE:
				drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  400a30:	4b1b      	ldr	r3, [pc, #108]	; (400aa0 <set_led_color+0xe8>)
  400a32:	781b      	ldrb	r3, [r3, #0]
  400a34:	4618      	mov	r0, r3
  400a36:	2100      	movs	r1, #0
  400a38:	4b1a      	ldr	r3, [pc, #104]	; (400aa4 <set_led_color+0xec>)
  400a3a:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  400a3c:	4b18      	ldr	r3, [pc, #96]	; (400aa0 <set_led_color+0xe8>)
  400a3e:	789b      	ldrb	r3, [r3, #2]
  400a40:	4618      	mov	r0, r3
  400a42:	2100      	movs	r1, #0
  400a44:	4b17      	ldr	r3, [pc, #92]	; (400aa4 <set_led_color+0xec>)
  400a46:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  400a48:	4b15      	ldr	r3, [pc, #84]	; (400aa0 <set_led_color+0xe8>)
  400a4a:	785b      	ldrb	r3, [r3, #1]
  400a4c:	4618      	mov	r0, r3
  400a4e:	2100      	movs	r1, #0
  400a50:	4b14      	ldr	r3, [pc, #80]	; (400aa4 <set_led_color+0xec>)
  400a52:	4798      	blx	r3
				break;
  400a54:	e020      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_TURQUOISE:
				drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  400a56:	4b12      	ldr	r3, [pc, #72]	; (400aa0 <set_led_color+0xe8>)
  400a58:	789b      	ldrb	r3, [r3, #2]
  400a5a:	4618      	mov	r0, r3
  400a5c:	2100      	movs	r1, #0
  400a5e:	4b11      	ldr	r3, [pc, #68]	; (400aa4 <set_led_color+0xec>)
  400a60:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  400a62:	4b0f      	ldr	r3, [pc, #60]	; (400aa0 <set_led_color+0xe8>)
  400a64:	785b      	ldrb	r3, [r3, #1]
  400a66:	4618      	mov	r0, r3
  400a68:	2100      	movs	r1, #0
  400a6a:	4b0e      	ldr	r3, [pc, #56]	; (400aa4 <set_led_color+0xec>)
  400a6c:	4798      	blx	r3
				break;
  400a6e:	e013      	b.n	400a98 <set_led_color+0xe0>
			case DRV_LED_OFF:
				drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  400a70:	4b0b      	ldr	r3, [pc, #44]	; (400aa0 <set_led_color+0xe8>)
  400a72:	781b      	ldrb	r3, [r3, #0]
  400a74:	4618      	mov	r0, r3
  400a76:	2101      	movs	r1, #1
  400a78:	4b0a      	ldr	r3, [pc, #40]	; (400aa4 <set_led_color+0xec>)
  400a7a:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  400a7c:	4b08      	ldr	r3, [pc, #32]	; (400aa0 <set_led_color+0xe8>)
  400a7e:	789b      	ldrb	r3, [r3, #2]
  400a80:	4618      	mov	r0, r3
  400a82:	2101      	movs	r1, #1
  400a84:	4b07      	ldr	r3, [pc, #28]	; (400aa4 <set_led_color+0xec>)
  400a86:	4798      	blx	r3
				drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  400a88:	4b05      	ldr	r3, [pc, #20]	; (400aa0 <set_led_color+0xe8>)
  400a8a:	785b      	ldrb	r3, [r3, #1]
  400a8c:	4618      	mov	r0, r3
  400a8e:	2101      	movs	r1, #1
  400a90:	4b04      	ldr	r3, [pc, #16]	; (400aa4 <set_led_color+0xec>)
  400a92:	4798      	blx	r3
				break;
  400a94:	e000      	b.n	400a98 <set_led_color+0xe0>
			default:
				break;
  400a96:	bf00      	nop
		}
}
  400a98:	3708      	adds	r7, #8
  400a9a:	46bd      	mov	sp, r7
  400a9c:	bd80      	pop	{r7, pc}
  400a9e:	bf00      	nop
  400aa0:	20003a20 	.word	0x20003a20
  400aa4:	0040d7b5 	.word	0x0040d7b5

00400aa8 <toggle_led_color>:

/**
 * @brief: Toggle LEDs corresponding to specified color
 **/
static void toggle_led_color(drv_led_color_type_t ledColor)
{
  400aa8:	b580      	push	{r7, lr}
  400aaa:	b082      	sub	sp, #8
  400aac:	af00      	add	r7, sp, #0
  400aae:	4603      	mov	r3, r0
  400ab0:	71fb      	strb	r3, [r7, #7]
	switch(ledColor)
  400ab2:	79fb      	ldrb	r3, [r7, #7]
  400ab4:	2b05      	cmp	r3, #5
  400ab6:	d847      	bhi.n	400b48 <toggle_led_color+0xa0>
  400ab8:	a201      	add	r2, pc, #4	; (adr r2, 400ac0 <toggle_led_color+0x18>)
  400aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400abe:	bf00      	nop
  400ac0:	00400ad9 	.word	0x00400ad9
  400ac4:	00400ae5 	.word	0x00400ae5
  400ac8:	00400af1 	.word	0x00400af1
  400acc:	00400afd 	.word	0x00400afd
  400ad0:	00400b13 	.word	0x00400b13
  400ad4:	00400b33 	.word	0x00400b33
	{
		case DRV_LED_RED:
		drv_gpio_togglePin(ledConfig.redLed);
  400ad8:	4b1d      	ldr	r3, [pc, #116]	; (400b50 <toggle_led_color+0xa8>)
  400ada:	781b      	ldrb	r3, [r3, #0]
  400adc:	4618      	mov	r0, r3
  400ade:	4b1d      	ldr	r3, [pc, #116]	; (400b54 <toggle_led_color+0xac>)
  400ae0:	4798      	blx	r3
		break;
  400ae2:	e032      	b.n	400b4a <toggle_led_color+0xa2>
		case DRV_LED_BLUE:
		drv_gpio_togglePin(ledConfig.blueLed);
  400ae4:	4b1a      	ldr	r3, [pc, #104]	; (400b50 <toggle_led_color+0xa8>)
  400ae6:	785b      	ldrb	r3, [r3, #1]
  400ae8:	4618      	mov	r0, r3
  400aea:	4b1a      	ldr	r3, [pc, #104]	; (400b54 <toggle_led_color+0xac>)
  400aec:	4798      	blx	r3
		break;
  400aee:	e02c      	b.n	400b4a <toggle_led_color+0xa2>
		case DRV_LED_GREEN:
		drv_gpio_togglePin(ledConfig.greenLed);
  400af0:	4b17      	ldr	r3, [pc, #92]	; (400b50 <toggle_led_color+0xa8>)
  400af2:	789b      	ldrb	r3, [r3, #2]
  400af4:	4618      	mov	r0, r3
  400af6:	4b17      	ldr	r3, [pc, #92]	; (400b54 <toggle_led_color+0xac>)
  400af8:	4798      	blx	r3
		break;
  400afa:	e026      	b.n	400b4a <toggle_led_color+0xa2>
		case DRV_LED_YELLOW:
		drv_gpio_togglePin(ledConfig.redLed);
  400afc:	4b14      	ldr	r3, [pc, #80]	; (400b50 <toggle_led_color+0xa8>)
  400afe:	781b      	ldrb	r3, [r3, #0]
  400b00:	4618      	mov	r0, r3
  400b02:	4b14      	ldr	r3, [pc, #80]	; (400b54 <toggle_led_color+0xac>)
  400b04:	4798      	blx	r3
		drv_gpio_togglePin(ledConfig.greenLed);
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <toggle_led_color+0xa8>)
  400b08:	789b      	ldrb	r3, [r3, #2]
  400b0a:	4618      	mov	r0, r3
  400b0c:	4b11      	ldr	r3, [pc, #68]	; (400b54 <toggle_led_color+0xac>)
  400b0e:	4798      	blx	r3
		break;
  400b10:	e01b      	b.n	400b4a <toggle_led_color+0xa2>
		case DRV_LED_WHITE:
		drv_gpio_togglePin(ledConfig.redLed);
  400b12:	4b0f      	ldr	r3, [pc, #60]	; (400b50 <toggle_led_color+0xa8>)
  400b14:	781b      	ldrb	r3, [r3, #0]
  400b16:	4618      	mov	r0, r3
  400b18:	4b0e      	ldr	r3, [pc, #56]	; (400b54 <toggle_led_color+0xac>)
  400b1a:	4798      	blx	r3
		drv_gpio_togglePin(ledConfig.greenLed);
  400b1c:	4b0c      	ldr	r3, [pc, #48]	; (400b50 <toggle_led_color+0xa8>)
  400b1e:	789b      	ldrb	r3, [r3, #2]
  400b20:	4618      	mov	r0, r3
  400b22:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <toggle_led_color+0xac>)
  400b24:	4798      	blx	r3
		drv_gpio_togglePin(ledConfig.blueLed);
  400b26:	4b0a      	ldr	r3, [pc, #40]	; (400b50 <toggle_led_color+0xa8>)
  400b28:	785b      	ldrb	r3, [r3, #1]
  400b2a:	4618      	mov	r0, r3
  400b2c:	4b09      	ldr	r3, [pc, #36]	; (400b54 <toggle_led_color+0xac>)
  400b2e:	4798      	blx	r3
		break;
  400b30:	e00b      	b.n	400b4a <toggle_led_color+0xa2>
		case DRV_LED_TURQUOISE:
		drv_gpio_togglePin(ledConfig.greenLed);
  400b32:	4b07      	ldr	r3, [pc, #28]	; (400b50 <toggle_led_color+0xa8>)
  400b34:	789b      	ldrb	r3, [r3, #2]
  400b36:	4618      	mov	r0, r3
  400b38:	4b06      	ldr	r3, [pc, #24]	; (400b54 <toggle_led_color+0xac>)
  400b3a:	4798      	blx	r3
		drv_gpio_togglePin(ledConfig.blueLed);
  400b3c:	4b04      	ldr	r3, [pc, #16]	; (400b50 <toggle_led_color+0xa8>)
  400b3e:	785b      	ldrb	r3, [r3, #1]
  400b40:	4618      	mov	r0, r3
  400b42:	4b04      	ldr	r3, [pc, #16]	; (400b54 <toggle_led_color+0xac>)
  400b44:	4798      	blx	r3
		break;
  400b46:	e000      	b.n	400b4a <toggle_led_color+0xa2>
		default:
		break;
  400b48:	bf00      	nop
		
	}
  400b4a:	3708      	adds	r7, #8
  400b4c:	46bd      	mov	sp, r7
  400b4e:	bd80      	pop	{r7, pc}
  400b50:	20003a20 	.word	0x20003a20
  400b54:	0040d8f9 	.word	0x0040d8f9

00400b58 <task_commandHandler>:
};	
/**
 * \brief This task, when started will loop back \r\n terminated strings
 */
void task_commandHandler(void *pvParameters)
{
  400b58:	b580      	push	{r7, lr}
  400b5a:	b09e      	sub	sp, #120	; 0x78
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	int result = 0;
  400b60:	2300      	movs	r3, #0
  400b62:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100] = {0};
  400b64:	f107 020c 	add.w	r2, r7, #12
  400b68:	2364      	movs	r3, #100	; 0x64
  400b6a:	4610      	mov	r0, r2
  400b6c:	2100      	movs	r1, #0
  400b6e:	461a      	mov	r2, r3
  400b70:	4b0e      	ldr	r3, [pc, #56]	; (400bac <task_commandHandler+0x54>)
  400b72:	4798      	blx	r3
	int pointer = 0;
  400b74:	2300      	movs	r3, #0
  400b76:	673b      	str	r3, [r7, #112]	; 0x70
	config = (commandProcConfig_t*)pvParameters; 
  400b78:	4b0d      	ldr	r3, [pc, #52]	; (400bb0 <task_commandHandler+0x58>)
  400b7a:	687a      	ldr	r2, [r7, #4]
  400b7c:	601a      	str	r2, [r3, #0]
	//drv_uart_init(config->uart);
	
	//char val = 0xA5; 
	while(1)
	{
		if(drv_uart_getline(config->uart,buffer,sizeof(buffer)) == STATUS_PASS)
  400b7e:	4b0c      	ldr	r3, [pc, #48]	; (400bb0 <task_commandHandler+0x58>)
  400b80:	681b      	ldr	r3, [r3, #0]
  400b82:	681a      	ldr	r2, [r3, #0]
  400b84:	f107 030c 	add.w	r3, r7, #12
  400b88:	4610      	mov	r0, r2
  400b8a:	4619      	mov	r1, r3
  400b8c:	2264      	movs	r2, #100	; 0x64
  400b8e:	4b09      	ldr	r3, [pc, #36]	; (400bb4 <task_commandHandler+0x5c>)
  400b90:	4798      	blx	r3
  400b92:	4603      	mov	r3, r0
  400b94:	2b00      	cmp	r3, #0
  400b96:	d105      	bne.n	400ba4 <task_commandHandler+0x4c>
		{
			//drv_uart_putString(&uart1Config,buffer); 
			processCommand(buffer,sizeof(buffer)); 
  400b98:	f107 030c 	add.w	r3, r7, #12
  400b9c:	4618      	mov	r0, r3
  400b9e:	2164      	movs	r1, #100	; 0x64
  400ba0:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <task_commandHandler+0x60>)
  400ba2:	4798      	blx	r3
		}		
		vTaskDelay(10); 
  400ba4:	200a      	movs	r0, #10
  400ba6:	4b05      	ldr	r3, [pc, #20]	; (400bbc <task_commandHandler+0x64>)
  400ba8:	4798      	blx	r3
	}
  400baa:	e7e8      	b.n	400b7e <task_commandHandler+0x26>
  400bac:	0041309d 	.word	0x0041309d
  400bb0:	20001470 	.word	0x20001470
  400bb4:	0040e521 	.word	0x0040e521
  400bb8:	00400dd9 	.word	0x00400dd9
  400bbc:	0040b24d 	.word	0x0040b24d

00400bc0 <cmd_sendJackToggleToPowerBoard>:
}

void cmd_sendJackToggleToPowerBoard()
{
  400bc0:	b580      	push	{r7, lr}
  400bc2:	af00      	add	r7, sp, #0
	drv_uart_putChar(config->uart, 0xAA); 
  400bc4:	4b03      	ldr	r3, [pc, #12]	; (400bd4 <cmd_sendJackToggleToPowerBoard+0x14>)
  400bc6:	681b      	ldr	r3, [r3, #0]
  400bc8:	681b      	ldr	r3, [r3, #0]
  400bca:	4618      	mov	r0, r3
  400bcc:	21aa      	movs	r1, #170	; 0xaa
  400bce:	4b02      	ldr	r3, [pc, #8]	; (400bd8 <cmd_sendJackToggleToPowerBoard+0x18>)
  400bd0:	4798      	blx	r3
}
  400bd2:	bd80      	pop	{r7, pc}
  400bd4:	20001470 	.word	0x20001470
  400bd8:	0040e2f9 	.word	0x0040e2f9

00400bdc <printStats>:
 * @brief Prints the Stats of the system to serial terminal
 * @param 
 * @return 
 ***********************************************************************************************/
static void printStats()
{
  400bdc:	b580      	push	{r7, lr}
  400bde:	b084      	sub	sp, #16
  400be0:	af00      	add	r7, sp, #0
	int i = 0; 
  400be2:	2300      	movs	r3, #0
  400be4:	60fb      	str	r3, [r7, #12]
	size_t numberOfImus = 9;//sizeof(imuConfig) / sizeof(imuConfiguration_t);
  400be6:	2309      	movs	r3, #9
  400be8:	60bb      	str	r3, [r7, #8]
	size_t numberOfQuintics = 3;//sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
  400bea:	2303      	movs	r3, #3
  400bec:	607b      	str	r3, [r7, #4]
	printString("QUINTIC STATS \r\n");
  400bee:	485e      	ldr	r0, [pc, #376]	; (400d68 <printStats+0x18c>)
  400bf0:	4b5e      	ldr	r3, [pc, #376]	; (400d6c <printStats+0x190>)
  400bf2:	4798      	blx	r3
	for(i = 0; i < numberOfQuintics; i++)
  400bf4:	2300      	movs	r3, #0
  400bf6:	60fb      	str	r3, [r7, #12]
  400bf8:	e027      	b.n	400c4a <printStats+0x6e>
	{
		printf("Q%d:\r\n", i);
  400bfa:	485d      	ldr	r0, [pc, #372]	; (400d70 <printStats+0x194>)
  400bfc:	68f9      	ldr	r1, [r7, #12]
  400bfe:	4b5d      	ldr	r3, [pc, #372]	; (400d74 <printStats+0x198>)
  400c00:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
  400c02:	495d      	ldr	r1, [pc, #372]	; (400d78 <printStats+0x19c>)
  400c04:	68fa      	ldr	r2, [r7, #12]
  400c06:	4613      	mov	r3, r2
  400c08:	011b      	lsls	r3, r3, #4
  400c0a:	1a9b      	subs	r3, r3, r2
  400c0c:	009b      	lsls	r3, r3, #2
  400c0e:	440b      	add	r3, r1
  400c10:	3318      	adds	r3, #24
  400c12:	685b      	ldr	r3, [r3, #4]
  400c14:	4859      	ldr	r0, [pc, #356]	; (400d7c <printStats+0x1a0>)
  400c16:	4619      	mov	r1, r3
  400c18:	4b56      	ldr	r3, [pc, #344]	; (400d74 <printStats+0x198>)
  400c1a:	4798      	blx	r3
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
  400c1c:	4956      	ldr	r1, [pc, #344]	; (400d78 <printStats+0x19c>)
  400c1e:	68fa      	ldr	r2, [r7, #12]
  400c20:	4613      	mov	r3, r2
  400c22:	011b      	lsls	r3, r3, #4
  400c24:	1a9b      	subs	r3, r3, r2
  400c26:	009b      	lsls	r3, r3, #2
  400c28:	440b      	add	r3, r1
  400c2a:	3310      	adds	r3, #16
  400c2c:	685b      	ldr	r3, [r3, #4]
  400c2e:	4618      	mov	r0, r3
  400c30:	4b53      	ldr	r3, [pc, #332]	; (400d80 <printStats+0x1a4>)
  400c32:	4798      	blx	r3
  400c34:	4603      	mov	r3, r0
  400c36:	4853      	ldr	r0, [pc, #332]	; (400d84 <printStats+0x1a8>)
  400c38:	4619      	mov	r1, r3
  400c3a:	4b4e      	ldr	r3, [pc, #312]	; (400d74 <printStats+0x198>)
  400c3c:	4798      	blx	r3
		vTaskDelay(1);
  400c3e:	2001      	movs	r0, #1
  400c40:	4b51      	ldr	r3, [pc, #324]	; (400d88 <printStats+0x1ac>)
  400c42:	4798      	blx	r3
{
	int i = 0; 
	size_t numberOfImus = 9;//sizeof(imuConfig) / sizeof(imuConfiguration_t);
	size_t numberOfQuintics = 3;//sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
	printString("QUINTIC STATS \r\n");
	for(i = 0; i < numberOfQuintics; i++)
  400c44:	68fb      	ldr	r3, [r7, #12]
  400c46:	3301      	adds	r3, #1
  400c48:	60fb      	str	r3, [r7, #12]
  400c4a:	68fa      	ldr	r2, [r7, #12]
  400c4c:	687b      	ldr	r3, [r7, #4]
  400c4e:	429a      	cmp	r2, r3
  400c50:	d3d3      	bcc.n	400bfa <printStats+0x1e>
		printf("Q%d:\r\n", i);
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printString("IMU STATS \r\n");
  400c52:	484e      	ldr	r0, [pc, #312]	; (400d8c <printStats+0x1b0>)
  400c54:	4b45      	ldr	r3, [pc, #276]	; (400d6c <printStats+0x190>)
  400c56:	4798      	blx	r3
	for(i = 0; i < numberOfImus; i++)
  400c58:	2300      	movs	r3, #0
  400c5a:	60fb      	str	r3, [r7, #12]
  400c5c:	e055      	b.n	400d0a <printStats+0x12e>
	{		
		printf("IMU%d:\r\n", imuConfig[i].imuId);
  400c5e:	494c      	ldr	r1, [pc, #304]	; (400d90 <printStats+0x1b4>)
  400c60:	68fa      	ldr	r2, [r7, #12]
  400c62:	4613      	mov	r3, r2
  400c64:	00db      	lsls	r3, r3, #3
  400c66:	1a9b      	subs	r3, r3, r2
  400c68:	00db      	lsls	r3, r3, #3
  400c6a:	440b      	add	r3, r1
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	4849      	ldr	r0, [pc, #292]	; (400d94 <printStats+0x1b8>)
  400c70:	4619      	mov	r1, r3
  400c72:	4b40      	ldr	r3, [pc, #256]	; (400d74 <printStats+0x198>)
  400c74:	4798      	blx	r3
		printf("	IMU Present: %d\r\n", imuConfig[i].imuPresent);
  400c76:	4946      	ldr	r1, [pc, #280]	; (400d90 <printStats+0x1b4>)
  400c78:	68fa      	ldr	r2, [r7, #12]
  400c7a:	4613      	mov	r3, r2
  400c7c:	00db      	lsls	r3, r3, #3
  400c7e:	1a9b      	subs	r3, r3, r2
  400c80:	00db      	lsls	r3, r3, #3
  400c82:	440b      	add	r3, r1
  400c84:	3318      	adds	r3, #24
  400c86:	685b      	ldr	r3, [r3, #4]
  400c88:	4843      	ldr	r0, [pc, #268]	; (400d98 <printStats+0x1bc>)
  400c8a:	4619      	mov	r1, r3
  400c8c:	4b39      	ldr	r3, [pc, #228]	; (400d74 <printStats+0x198>)
  400c8e:	4798      	blx	r3
		printf("	IMU Connected: %d\r\n", imuConfig[i].imuConnected);
  400c90:	493f      	ldr	r1, [pc, #252]	; (400d90 <printStats+0x1b4>)
  400c92:	68fa      	ldr	r2, [r7, #12]
  400c94:	4613      	mov	r3, r2
  400c96:	00db      	lsls	r3, r3, #3
  400c98:	1a9b      	subs	r3, r3, r2
  400c9a:	00db      	lsls	r3, r3, #3
  400c9c:	440b      	add	r3, r1
  400c9e:	3320      	adds	r3, #32
  400ca0:	681b      	ldr	r3, [r3, #0]
  400ca2:	483e      	ldr	r0, [pc, #248]	; (400d9c <printStats+0x1c0>)
  400ca4:	4619      	mov	r1, r3
  400ca6:	4b33      	ldr	r3, [pc, #204]	; (400d74 <printStats+0x198>)
  400ca8:	4798      	blx	r3
		vTaskDelay(1);
  400caa:	2001      	movs	r0, #1
  400cac:	4b36      	ldr	r3, [pc, #216]	; (400d88 <printStats+0x1ac>)
  400cae:	4798      	blx	r3
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
  400cb0:	4937      	ldr	r1, [pc, #220]	; (400d90 <printStats+0x1b4>)
  400cb2:	68fa      	ldr	r2, [r7, #12]
  400cb4:	4613      	mov	r3, r2
  400cb6:	00db      	lsls	r3, r3, #3
  400cb8:	1a9b      	subs	r3, r3, r2
  400cba:	00db      	lsls	r3, r3, #3
  400cbc:	440b      	add	r3, r1
  400cbe:	3320      	adds	r3, #32
  400cc0:	689b      	ldr	r3, [r3, #8]
  400cc2:	4837      	ldr	r0, [pc, #220]	; (400da0 <printStats+0x1c4>)
  400cc4:	4619      	mov	r1, r3
  400cc6:	4b2b      	ldr	r3, [pc, #172]	; (400d74 <printStats+0x198>)
  400cc8:	4798      	blx	r3
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
  400cca:	4931      	ldr	r1, [pc, #196]	; (400d90 <printStats+0x1b4>)
  400ccc:	68fa      	ldr	r2, [r7, #12]
  400cce:	4613      	mov	r3, r2
  400cd0:	00db      	lsls	r3, r3, #3
  400cd2:	1a9b      	subs	r3, r3, r2
  400cd4:	00db      	lsls	r3, r3, #3
  400cd6:	440b      	add	r3, r1
  400cd8:	3330      	adds	r3, #48	; 0x30
  400cda:	685b      	ldr	r3, [r3, #4]
  400cdc:	4831      	ldr	r0, [pc, #196]	; (400da4 <printStats+0x1c8>)
  400cde:	4619      	mov	r1, r3
  400ce0:	4b24      	ldr	r3, [pc, #144]	; (400d74 <printStats+0x198>)
  400ce2:	4798      	blx	r3
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
  400ce4:	492a      	ldr	r1, [pc, #168]	; (400d90 <printStats+0x1b4>)
  400ce6:	68fa      	ldr	r2, [r7, #12]
  400ce8:	4613      	mov	r3, r2
  400cea:	00db      	lsls	r3, r3, #3
  400cec:	1a9b      	subs	r3, r3, r2
  400cee:	00db      	lsls	r3, r3, #3
  400cf0:	440b      	add	r3, r1
  400cf2:	3320      	adds	r3, #32
  400cf4:	685b      	ldr	r3, [r3, #4]
  400cf6:	482c      	ldr	r0, [pc, #176]	; (400da8 <printStats+0x1cc>)
  400cf8:	4619      	mov	r1, r3
  400cfa:	4b1e      	ldr	r3, [pc, #120]	; (400d74 <printStats+0x198>)
  400cfc:	4798      	blx	r3
		vTaskDelay(1);
  400cfe:	2001      	movs	r0, #1
  400d00:	4b21      	ldr	r3, [pc, #132]	; (400d88 <printStats+0x1ac>)
  400d02:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printString("IMU STATS \r\n");
	for(i = 0; i < numberOfImus; i++)
  400d04:	68fb      	ldr	r3, [r7, #12]
  400d06:	3301      	adds	r3, #1
  400d08:	60fb      	str	r3, [r7, #12]
  400d0a:	68fa      	ldr	r2, [r7, #12]
  400d0c:	68bb      	ldr	r3, [r7, #8]
  400d0e:	429a      	cmp	r2, r3
  400d10:	d3a5      	bcc.n	400c5e <printStats+0x82>
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
		vTaskDelay(1);
	}
	printf("Total Bytes Written: %d\r\n", totalBytesWritten); 
  400d12:	4b26      	ldr	r3, [pc, #152]	; (400dac <printStats+0x1d0>)
  400d14:	681b      	ldr	r3, [r3, #0]
  400d16:	4826      	ldr	r0, [pc, #152]	; (400db0 <printStats+0x1d4>)
  400d18:	4619      	mov	r1, r3
  400d1a:	4b16      	ldr	r3, [pc, #88]	; (400d74 <printStats+0x198>)
  400d1c:	4798      	blx	r3
	vTaskDelay(1);
  400d1e:	2001      	movs	r0, #1
  400d20:	4b19      	ldr	r3, [pc, #100]	; (400d88 <printStats+0x1ac>)
  400d22:	4798      	blx	r3
	printf("Total Frames Written: %d \r\n", totalFramesWritten); 
  400d24:	4b23      	ldr	r3, [pc, #140]	; (400db4 <printStats+0x1d8>)
  400d26:	681b      	ldr	r3, [r3, #0]
  400d28:	4823      	ldr	r0, [pc, #140]	; (400db8 <printStats+0x1dc>)
  400d2a:	4619      	mov	r1, r3
  400d2c:	4b11      	ldr	r3, [pc, #68]	; (400d74 <printStats+0x198>)
  400d2e:	4798      	blx	r3
	int queuedMessages = uxQueueMessagesWaiting(queue_dataHandler);
  400d30:	4b22      	ldr	r3, [pc, #136]	; (400dbc <printStats+0x1e0>)
  400d32:	681b      	ldr	r3, [r3, #0]
  400d34:	4618      	mov	r0, r3
  400d36:	4b22      	ldr	r3, [pc, #136]	; (400dc0 <printStats+0x1e4>)
  400d38:	4798      	blx	r3
  400d3a:	4603      	mov	r3, r0
  400d3c:	603b      	str	r3, [r7, #0]
	printf("Queued Messages: %d\r\n", queuedMessages); 
  400d3e:	4821      	ldr	r0, [pc, #132]	; (400dc4 <printStats+0x1e8>)
  400d40:	6839      	ldr	r1, [r7, #0]
  400d42:	4b0c      	ldr	r3, [pc, #48]	; (400d74 <printStats+0x198>)
  400d44:	4798      	blx	r3
	printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());	
  400d46:	4b20      	ldr	r3, [pc, #128]	; (400dc8 <printStats+0x1ec>)
  400d48:	4798      	blx	r3
  400d4a:	4603      	mov	r3, r0
  400d4c:	481f      	ldr	r0, [pc, #124]	; (400dcc <printStats+0x1f0>)
  400d4e:	4619      	mov	r1, r3
  400d50:	4b08      	ldr	r3, [pc, #32]	; (400d74 <printStats+0x198>)
  400d52:	4798      	blx	r3
	vTaskList((signed portCHAR *)stringBuf);
  400d54:	481e      	ldr	r0, [pc, #120]	; (400dd0 <printStats+0x1f4>)
  400d56:	4b1f      	ldr	r3, [pc, #124]	; (400dd4 <printStats+0x1f8>)
  400d58:	4798      	blx	r3
	printf(stringBuf);
  400d5a:	481d      	ldr	r0, [pc, #116]	; (400dd0 <printStats+0x1f4>)
  400d5c:	4b05      	ldr	r3, [pc, #20]	; (400d74 <printStats+0x198>)
  400d5e:	4798      	blx	r3
}
  400d60:	3710      	adds	r7, #16
  400d62:	46bd      	mov	sp, r7
  400d64:	bd80      	pop	{r7, pc}
  400d66:	bf00      	nop
  400d68:	0041bfc0 	.word	0x0041bfc0
  400d6c:	004017a1 	.word	0x004017a1
  400d70:	0041bfd4 	.word	0x0041bfd4
  400d74:	004129e9 	.word	0x004129e9
  400d78:	20000508 	.word	0x20000508
  400d7c:	0041bfdc 	.word	0x0041bfdc
  400d80:	0040e4f1 	.word	0x0040e4f1
  400d84:	0041bff4 	.word	0x0041bff4
  400d88:	0040b24d 	.word	0x0040b24d
  400d8c:	0041c00c 	.word	0x0041c00c
  400d90:	200002d8 	.word	0x200002d8
  400d94:	0041c01c 	.word	0x0041c01c
  400d98:	0041c028 	.word	0x0041c028
  400d9c:	0041c03c 	.word	0x0041c03c
  400da0:	0041c054 	.word	0x0041c054
  400da4:	0041c06c 	.word	0x0041c06c
  400da8:	0041c090 	.word	0x0041c090
  400dac:	200022e8 	.word	0x200022e8
  400db0:	0041c0ac 	.word	0x0041c0ac
  400db4:	20003824 	.word	0x20003824
  400db8:	0041c0c8 	.word	0x0041c0c8
  400dbc:	20003814 	.word	0x20003814
  400dc0:	0040ad79 	.word	0x0040ad79
  400dc4:	0041c0e4 	.word	0x0041c0e4
  400dc8:	0040b479 	.word	0x0040b479
  400dcc:	0041c0fc 	.word	0x0041c0fc
  400dd0:	2000127c 	.word	0x2000127c
  400dd4:	0040b491 	.word	0x0040b491

00400dd8 <processCommand>:
 * @brief A general Command processor which receives commands from Serial terminal and executes them
 * @param char* command, size_t cmdSize
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error 
 ***********************************************************************************************/
static status_t processCommand(char* command, size_t cmdSize)
{
  400dd8:	b590      	push	{r4, r7, lr}
  400dda:	b085      	sub	sp, #20
  400ddc:	af00      	add	r7, sp, #0
  400dde:	6078      	str	r0, [r7, #4]
  400de0:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS; 
  400de2:	2300      	movs	r3, #0
  400de4:	73fb      	strb	r3, [r7, #15]
	if(strncmp(command, "Record\r\n",cmdSize) == 0)
  400de6:	6878      	ldr	r0, [r7, #4]
  400de8:	498e      	ldr	r1, [pc, #568]	; (401024 <processCommand+0x24c>)
  400dea:	683a      	ldr	r2, [r7, #0]
  400dec:	4b8e      	ldr	r3, [pc, #568]	; (401028 <processCommand+0x250>)
  400dee:	4798      	blx	r3
  400df0:	4603      	mov	r3, r0
  400df2:	2b00      	cmp	r3, #0
  400df4:	d107      	bne.n	400e06 <processCommand+0x2e>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RECORD_SWITCH,0);
  400df6:	2002      	movs	r0, #2
  400df8:	2100      	movs	r1, #0
  400dfa:	4b8c      	ldr	r3, [pc, #560]	; (40102c <processCommand+0x254>)
  400dfc:	4798      	blx	r3
		printString( "ACK\r\n");
  400dfe:	488c      	ldr	r0, [pc, #560]	; (401030 <processCommand+0x258>)
  400e00:	4b8c      	ldr	r3, [pc, #560]	; (401034 <processCommand+0x25c>)
  400e02:	4798      	blx	r3
  400e04:	e341      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "Reset\r\n",cmdSize) == 0)
  400e06:	6878      	ldr	r0, [r7, #4]
  400e08:	498b      	ldr	r1, [pc, #556]	; (401038 <processCommand+0x260>)
  400e0a:	683a      	ldr	r2, [r7, #0]
  400e0c:	4b86      	ldr	r3, [pc, #536]	; (401028 <processCommand+0x250>)
  400e0e:	4798      	blx	r3
  400e10:	4603      	mov	r3, r0
  400e12:	2b00      	cmp	r3, #0
  400e14:	d107      	bne.n	400e26 <processCommand+0x4e>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_SWITCH,0);
  400e16:	2001      	movs	r0, #1
  400e18:	2100      	movs	r1, #0
  400e1a:	4b84      	ldr	r3, [pc, #528]	; (40102c <processCommand+0x254>)
  400e1c:	4798      	blx	r3
		printString( "ACK\r\n");
  400e1e:	4884      	ldr	r0, [pc, #528]	; (401030 <processCommand+0x258>)
  400e20:	4b84      	ldr	r3, [pc, #528]	; (401034 <processCommand+0x25c>)
  400e22:	4798      	blx	r3
  400e24:	e331      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "Power\r\n",cmdSize) == 0)
  400e26:	6878      	ldr	r0, [r7, #4]
  400e28:	4984      	ldr	r1, [pc, #528]	; (40103c <processCommand+0x264>)
  400e2a:	683a      	ldr	r2, [r7, #0]
  400e2c:	4b7e      	ldr	r3, [pc, #504]	; (401028 <processCommand+0x250>)
  400e2e:	4798      	blx	r3
  400e30:	4603      	mov	r3, r0
  400e32:	2b00      	cmp	r3, #0
  400e34:	d107      	bne.n	400e46 <processCommand+0x6e>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_POWER_SWITCH,0);
  400e36:	2000      	movs	r0, #0
  400e38:	2100      	movs	r1, #0
  400e3a:	4b7c      	ldr	r3, [pc, #496]	; (40102c <processCommand+0x254>)
  400e3c:	4798      	blx	r3
		printString( "ACK\r\n");
  400e3e:	487c      	ldr	r0, [pc, #496]	; (401030 <processCommand+0x258>)
  400e40:	4b7c      	ldr	r3, [pc, #496]	; (401034 <processCommand+0x25c>)
  400e42:	4798      	blx	r3
  400e44:	e321      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "GetState\r\n",cmdSize) == 0)
  400e46:	6878      	ldr	r0, [r7, #4]
  400e48:	497d      	ldr	r1, [pc, #500]	; (401040 <processCommand+0x268>)
  400e4a:	683a      	ldr	r2, [r7, #0]
  400e4c:	4b76      	ldr	r3, [pc, #472]	; (401028 <processCommand+0x250>)
  400e4e:	4798      	blx	r3
  400e50:	4603      	mov	r3, r0
  400e52:	2b00      	cmp	r3, #0
  400e54:	d127      	bne.n	400ea6 <processCommand+0xce>
	{
		switch(getCurrentState())
  400e56:	4b7b      	ldr	r3, [pc, #492]	; (401044 <processCommand+0x26c>)
  400e58:	4798      	blx	r3
  400e5a:	4603      	mov	r3, r0
  400e5c:	3b02      	subs	r3, #2
  400e5e:	2b04      	cmp	r3, #4
  400e60:	d81c      	bhi.n	400e9c <processCommand+0xc4>
  400e62:	a201      	add	r2, pc, #4	; (adr r2, 400e68 <processCommand+0x90>)
  400e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e68:	00400e85 	.word	0x00400e85
  400e6c:	00400e7d 	.word	0x00400e7d
  400e70:	00400e8d 	.word	0x00400e8d
  400e74:	00400e95 	.word	0x00400e95
  400e78:	00400e8d 	.word	0x00400e8d
		{
			case SYS_STATE_IDLE: 
			printString("Idle\r\n"); 
  400e7c:	4872      	ldr	r0, [pc, #456]	; (401048 <processCommand+0x270>)
  400e7e:	4b6d      	ldr	r3, [pc, #436]	; (401034 <processCommand+0x25c>)
  400e80:	4798      	blx	r3
			break; 
  400e82:	e00f      	b.n	400ea4 <processCommand+0xcc>
			case SYS_STATE_RESET:
			printString("Reset\r\n");
  400e84:	486c      	ldr	r0, [pc, #432]	; (401038 <processCommand+0x260>)
  400e86:	4b6b      	ldr	r3, [pc, #428]	; (401034 <processCommand+0x25c>)
  400e88:	4798      	blx	r3
			break;
  400e8a:	e00b      	b.n	400ea4 <processCommand+0xcc>
			//get accel data is part of the recording state.
			case SYS_STATE_GET_ACCEL_DATA:
			case SYS_STATE_RECORDING:
			printString("Recording\r\n");
  400e8c:	486f      	ldr	r0, [pc, #444]	; (40104c <processCommand+0x274>)
  400e8e:	4b69      	ldr	r3, [pc, #420]	; (401034 <processCommand+0x25c>)
  400e90:	4798      	blx	r3
			break;
  400e92:	e007      	b.n	400ea4 <processCommand+0xcc>
			case SYS_STATE_ERROR:
			printString("Error\r\n");
  400e94:	486e      	ldr	r0, [pc, #440]	; (401050 <processCommand+0x278>)
  400e96:	4b67      	ldr	r3, [pc, #412]	; (401034 <processCommand+0x25c>)
  400e98:	4798      	blx	r3
			break;
  400e9a:	e003      	b.n	400ea4 <processCommand+0xcc>
			default: 
			printString("UnDef\r\n");
  400e9c:	486d      	ldr	r0, [pc, #436]	; (401054 <processCommand+0x27c>)
  400e9e:	4b65      	ldr	r3, [pc, #404]	; (401034 <processCommand+0x25c>)
  400ea0:	4798      	blx	r3
			break;			
  400ea2:	bf00      	nop
  400ea4:	e2f1      	b.n	40148a <processCommand+0x6b2>
		}
	}
	else if(strncmp(command, "AutoOff",7) == 0)
  400ea6:	6878      	ldr	r0, [r7, #4]
  400ea8:	496b      	ldr	r1, [pc, #428]	; (401058 <processCommand+0x280>)
  400eaa:	2207      	movs	r2, #7
  400eac:	4b5e      	ldr	r3, [pc, #376]	; (401028 <processCommand+0x250>)
  400eae:	4798      	blx	r3
  400eb0:	4603      	mov	r3, r0
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d111      	bne.n	400eda <processCommand+0x102>
	{
		if(*(command+7) == '1')
  400eb6:	687b      	ldr	r3, [r7, #4]
  400eb8:	3307      	adds	r3, #7
  400eba:	781b      	ldrb	r3, [r3, #0]
  400ebc:	2b31      	cmp	r3, #49	; 0x31
  400ebe:	d104      	bne.n	400eca <processCommand+0xf2>
		{
			brainSettings.autoTurnOff = true; 
  400ec0:	4b66      	ldr	r3, [pc, #408]	; (40105c <processCommand+0x284>)
  400ec2:	2201      	movs	r2, #1
  400ec4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
  400ec8:	e003      	b.n	400ed2 <processCommand+0xfa>
		}
		else
		{
			brainSettings.autoTurnOff = false; 
  400eca:	4b64      	ldr	r3, [pc, #400]	; (40105c <processCommand+0x284>)
  400ecc:	2200      	movs	r2, #0
  400ece:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		}
		printString( "ACK\r\n");
  400ed2:	4857      	ldr	r0, [pc, #348]	; (401030 <processCommand+0x258>)
  400ed4:	4b57      	ldr	r3, [pc, #348]	; (401034 <processCommand+0x25c>)
  400ed6:	4798      	blx	r3
  400ed8:	e2d7      	b.n	40148a <processCommand+0x6b2>
	}	
	else if(strncmp(command, "SetSerial",9) == 0)
  400eda:	6878      	ldr	r0, [r7, #4]
  400edc:	4960      	ldr	r1, [pc, #384]	; (401060 <processCommand+0x288>)
  400ede:	2209      	movs	r2, #9
  400ee0:	4b51      	ldr	r3, [pc, #324]	; (401028 <processCommand+0x250>)
  400ee2:	4798      	blx	r3
  400ee4:	4603      	mov	r3, r0
  400ee6:	2b00      	cmp	r3, #0
  400ee8:	d121      	bne.n	400f2e <processCommand+0x156>
	{
		//check that the size makes sense
		cmdSize = strlen(command);
  400eea:	6878      	ldr	r0, [r7, #4]
  400eec:	4b5d      	ldr	r3, [pc, #372]	; (401064 <processCommand+0x28c>)
  400eee:	4798      	blx	r3
  400ef0:	6038      	str	r0, [r7, #0]
		if((cmdSize -9) > 3)
  400ef2:	683b      	ldr	r3, [r7, #0]
  400ef4:	3b09      	subs	r3, #9
  400ef6:	2b03      	cmp	r3, #3
  400ef8:	d915      	bls.n	400f26 <processCommand+0x14e>
		{
			//get rid of the \r\n
			command[cmdSize-2] = NULL;
  400efa:	683b      	ldr	r3, [r7, #0]
  400efc:	3b02      	subs	r3, #2
  400efe:	687a      	ldr	r2, [r7, #4]
  400f00:	4413      	add	r3, r2
  400f02:	2200      	movs	r2, #0
  400f04:	701a      	strb	r2, [r3, #0]
			strncpy(nvmSettings.suitNumber, command+9, 7);	//restrict the suit number size to 6
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	3309      	adds	r3, #9
  400f0a:	4857      	ldr	r0, [pc, #348]	; (401068 <processCommand+0x290>)
  400f0c:	4619      	mov	r1, r3
  400f0e:	2207      	movs	r2, #7
  400f10:	4b56      	ldr	r3, [pc, #344]	; (40106c <processCommand+0x294>)
  400f12:	4798      	blx	r3
			if(saveNvmSettings() == STATUS_PASS)
  400f14:	4b56      	ldr	r3, [pc, #344]	; (401070 <processCommand+0x298>)
  400f16:	4798      	blx	r3
  400f18:	4603      	mov	r3, r0
  400f1a:	2b00      	cmp	r3, #0
  400f1c:	d103      	bne.n	400f26 <processCommand+0x14e>
			{
				printString("ACK\r\n");
  400f1e:	4844      	ldr	r0, [pc, #272]	; (401030 <processCommand+0x258>)
  400f20:	4b44      	ldr	r3, [pc, #272]	; (401034 <processCommand+0x25c>)
  400f22:	4798      	blx	r3
				return;
  400f24:	e2b3      	b.n	40148e <processCommand+0x6b6>
			}
		}
		printString( "NACK\r\n");
  400f26:	4853      	ldr	r0, [pc, #332]	; (401074 <processCommand+0x29c>)
  400f28:	4b42      	ldr	r3, [pc, #264]	; (401034 <processCommand+0x25c>)
  400f2a:	4798      	blx	r3
  400f2c:	e2ad      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command, "GetSerial",9) == 0)
  400f2e:	6878      	ldr	r0, [r7, #4]
  400f30:	4951      	ldr	r1, [pc, #324]	; (401078 <processCommand+0x2a0>)
  400f32:	2209      	movs	r2, #9
  400f34:	4b3c      	ldr	r3, [pc, #240]	; (401028 <processCommand+0x250>)
  400f36:	4798      	blx	r3
  400f38:	4603      	mov	r3, r0
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d106      	bne.n	400f4c <processCommand+0x174>
	{
		printString(nvmSettings.suitNumber);
  400f3e:	484a      	ldr	r0, [pc, #296]	; (401068 <processCommand+0x290>)
  400f40:	4b3c      	ldr	r3, [pc, #240]	; (401034 <processCommand+0x25c>)
  400f42:	4798      	blx	r3
		printString("\r\nACK\r\n");		
  400f44:	484d      	ldr	r0, [pc, #308]	; (40107c <processCommand+0x2a4>)
  400f46:	4b3b      	ldr	r3, [pc, #236]	; (401034 <processCommand+0x25c>)
  400f48:	4798      	blx	r3
  400f4a:	e29e      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command, "EnableCSV", 9) == 0)
  400f4c:	6878      	ldr	r0, [r7, #4]
  400f4e:	494c      	ldr	r1, [pc, #304]	; (401080 <processCommand+0x2a8>)
  400f50:	2209      	movs	r2, #9
  400f52:	4b35      	ldr	r3, [pc, #212]	; (401028 <processCommand+0x250>)
  400f54:	4798      	blx	r3
  400f56:	4603      	mov	r3, r0
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d132      	bne.n	400fc2 <processCommand+0x1ea>
	{
		cmdSize = strlen(command);
  400f5c:	6878      	ldr	r0, [r7, #4]
  400f5e:	4b41      	ldr	r3, [pc, #260]	; (401064 <processCommand+0x28c>)
  400f60:	4798      	blx	r3
  400f62:	6038      	str	r0, [r7, #0]
		if ((cmdSize - 9) >= 1)
  400f64:	683b      	ldr	r3, [r7, #0]
  400f66:	2b09      	cmp	r3, #9
  400f68:	d027      	beq.n	400fba <processCommand+0x1e2>
		{
			command[cmdSize - 2] = NULL;
  400f6a:	683b      	ldr	r3, [r7, #0]
  400f6c:	3b02      	subs	r3, #2
  400f6e:	687a      	ldr	r2, [r7, #4]
  400f70:	4413      	add	r3, r2
  400f72:	2200      	movs	r2, #0
  400f74:	701a      	strb	r2, [r3, #0]
			if (command[9] == '0')
  400f76:	687b      	ldr	r3, [r7, #4]
  400f78:	3309      	adds	r3, #9
  400f7a:	781b      	ldrb	r3, [r3, #0]
  400f7c:	2b30      	cmp	r3, #48	; 0x30
  400f7e:	d10b      	bne.n	400f98 <processCommand+0x1c0>
			{
				nvmSettings.enableCsvFormat = 0;
  400f80:	4b39      	ldr	r3, [pc, #228]	; (401068 <processCommand+0x290>)
  400f82:	2200      	movs	r2, #0
  400f84:	611a      	str	r2, [r3, #16]
				if(saveNvmSettings() == STATUS_PASS)
  400f86:	4b3a      	ldr	r3, [pc, #232]	; (401070 <processCommand+0x298>)
  400f88:	4798      	blx	r3
  400f8a:	4603      	mov	r3, r0
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d114      	bne.n	400fba <processCommand+0x1e2>
				{
					printString("ACK\r\n");
  400f90:	4827      	ldr	r0, [pc, #156]	; (401030 <processCommand+0x258>)
  400f92:	4b28      	ldr	r3, [pc, #160]	; (401034 <processCommand+0x25c>)
  400f94:	4798      	blx	r3
					return;
  400f96:	e27a      	b.n	40148e <processCommand+0x6b6>
				}
			}
			else if(command[9] == '1')
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	3309      	adds	r3, #9
  400f9c:	781b      	ldrb	r3, [r3, #0]
  400f9e:	2b31      	cmp	r3, #49	; 0x31
  400fa0:	d10b      	bne.n	400fba <processCommand+0x1e2>
			{
				nvmSettings.enableCsvFormat = 1;
  400fa2:	4b31      	ldr	r3, [pc, #196]	; (401068 <processCommand+0x290>)
  400fa4:	2201      	movs	r2, #1
  400fa6:	611a      	str	r2, [r3, #16]
				if(saveNvmSettings() == STATUS_PASS)
  400fa8:	4b31      	ldr	r3, [pc, #196]	; (401070 <processCommand+0x298>)
  400faa:	4798      	blx	r3
  400fac:	4603      	mov	r3, r0
  400fae:	2b00      	cmp	r3, #0
  400fb0:	d103      	bne.n	400fba <processCommand+0x1e2>
				{
					printString("ACK\r\n");
  400fb2:	481f      	ldr	r0, [pc, #124]	; (401030 <processCommand+0x258>)
  400fb4:	4b1f      	ldr	r3, [pc, #124]	; (401034 <processCommand+0x25c>)
  400fb6:	4798      	blx	r3
					return;
  400fb8:	e269      	b.n	40148e <processCommand+0x6b6>
				}
			}
		}
		printString( "NACK\r\n");
  400fba:	482e      	ldr	r0, [pc, #184]	; (401074 <processCommand+0x29c>)
  400fbc:	4b1d      	ldr	r3, [pc, #116]	; (401034 <processCommand+0x25c>)
  400fbe:	4798      	blx	r3
  400fc0:	e263      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command, "SetRecordName",13) == 0)
  400fc2:	6878      	ldr	r0, [r7, #4]
  400fc4:	492f      	ldr	r1, [pc, #188]	; (401084 <processCommand+0x2ac>)
  400fc6:	220d      	movs	r2, #13
  400fc8:	4b17      	ldr	r3, [pc, #92]	; (401028 <processCommand+0x250>)
  400fca:	4798      	blx	r3
  400fcc:	4603      	mov	r3, r0
  400fce:	2b00      	cmp	r3, #0
  400fd0:	d15e      	bne.n	401090 <processCommand+0x2b8>
	{
		//check if size makes sense
		cmdSize = strlen(command);
  400fd2:	6878      	ldr	r0, [r7, #4]
  400fd4:	4b23      	ldr	r3, [pc, #140]	; (401064 <processCommand+0x28c>)
  400fd6:	4798      	blx	r3
  400fd8:	6038      	str	r0, [r7, #0]
		if (((cmdSize - 13) < MAX_FILE_NAME_LENGTH) && ((cmdSize - 13) > 0))
  400fda:	683b      	ldr	r3, [r7, #0]
  400fdc:	3b0d      	subs	r3, #13
  400fde:	2b4e      	cmp	r3, #78	; 0x4e
  400fe0:	d81b      	bhi.n	40101a <processCommand+0x242>
  400fe2:	683b      	ldr	r3, [r7, #0]
  400fe4:	2b0d      	cmp	r3, #13
  400fe6:	d018      	beq.n	40101a <processCommand+0x242>
		{
			//get rid of the \r\n
			command[cmdSize - 2] = NULL;
  400fe8:	683b      	ldr	r3, [r7, #0]
  400fea:	3b02      	subs	r3, #2
  400fec:	687a      	ldr	r2, [r7, #4]
  400fee:	4413      	add	r3, r2
  400ff0:	2200      	movs	r2, #0
  400ff2:	701a      	strb	r2, [r3, #0]
			memset(brainSettings.fileName, NULL, sizeof(brainSettings.fileName));	//clear the existing name first
  400ff4:	4824      	ldr	r0, [pc, #144]	; (401088 <processCommand+0x2b0>)
  400ff6:	2100      	movs	r1, #0
  400ff8:	224f      	movs	r2, #79	; 0x4f
  400ffa:	4b24      	ldr	r3, [pc, #144]	; (40108c <processCommand+0x2b4>)
  400ffc:	4798      	blx	r3
			strncpy(brainSettings.fileName, (command + 13), (cmdSize - 13));	//write the new name to settings file
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	f103 020d 	add.w	r2, r3, #13
  401004:	683b      	ldr	r3, [r7, #0]
  401006:	3b0d      	subs	r3, #13
  401008:	481f      	ldr	r0, [pc, #124]	; (401088 <processCommand+0x2b0>)
  40100a:	4611      	mov	r1, r2
  40100c:	461a      	mov	r2, r3
  40100e:	4b17      	ldr	r3, [pc, #92]	; (40106c <processCommand+0x294>)
  401010:	4798      	blx	r3
			printString("ACK\r\n");
  401012:	4807      	ldr	r0, [pc, #28]	; (401030 <processCommand+0x258>)
  401014:	4b07      	ldr	r3, [pc, #28]	; (401034 <processCommand+0x25c>)
  401016:	4798      	blx	r3
			return;
  401018:	e239      	b.n	40148e <processCommand+0x6b6>
		}
		printString("NACK\r\n");
  40101a:	4816      	ldr	r0, [pc, #88]	; (401074 <processCommand+0x29c>)
  40101c:	4b05      	ldr	r3, [pc, #20]	; (401034 <processCommand+0x25c>)
  40101e:	4798      	blx	r3
  401020:	e233      	b.n	40148a <processCommand+0x6b2>
  401022:	bf00      	nop
  401024:	0041c10c 	.word	0x0041c10c
  401028:	004137e9 	.word	0x004137e9
  40102c:	00402581 	.word	0x00402581
  401030:	0041c118 	.word	0x0041c118
  401034:	004017a1 	.word	0x004017a1
  401038:	0041c120 	.word	0x0041c120
  40103c:	0041c128 	.word	0x0041c128
  401040:	0041c130 	.word	0x0041c130
  401044:	004025e9 	.word	0x004025e9
  401048:	0041c13c 	.word	0x0041c13c
  40104c:	0041c144 	.word	0x0041c144
  401050:	0041c150 	.word	0x0041c150
  401054:	0041c158 	.word	0x0041c158
  401058:	0041c160 	.word	0x0041c160
  40105c:	20000220 	.word	0x20000220
  401060:	0041c168 	.word	0x0041c168
  401064:	00413725 	.word	0x00413725
  401068:	20003e80 	.word	0x20003e80
  40106c:	0041389d 	.word	0x0041389d
  401070:	0040d2a1 	.word	0x0040d2a1
  401074:	0041c174 	.word	0x0041c174
  401078:	0041c17c 	.word	0x0041c17c
  40107c:	0041c188 	.word	0x0041c188
  401080:	0041c190 	.word	0x0041c190
  401084:	0041c19c 	.word	0x0041c19c
  401088:	2000025a 	.word	0x2000025a
  40108c:	0041309d 	.word	0x0041309d
	}
	else if (strncmp(command, "GetRecordName",13) == 0)
  401090:	6878      	ldr	r0, [r7, #4]
  401092:	4987      	ldr	r1, [pc, #540]	; (4012b0 <processCommand+0x4d8>)
  401094:	220d      	movs	r2, #13
  401096:	4b87      	ldr	r3, [pc, #540]	; (4012b4 <processCommand+0x4dc>)
  401098:	4798      	blx	r3
  40109a:	4603      	mov	r3, r0
  40109c:	2b00      	cmp	r3, #0
  40109e:	d10a      	bne.n	4010b6 <processCommand+0x2de>
	{
		snprintf(stringBuf, sizeof(stringBuf), "%s\r\n",dataLogFileName);
  4010a0:	4885      	ldr	r0, [pc, #532]	; (4012b8 <processCommand+0x4e0>)
  4010a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  4010a6:	4a85      	ldr	r2, [pc, #532]	; (4012bc <processCommand+0x4e4>)
  4010a8:	4b85      	ldr	r3, [pc, #532]	; (4012c0 <processCommand+0x4e8>)
  4010aa:	4c86      	ldr	r4, [pc, #536]	; (4012c4 <processCommand+0x4ec>)
  4010ac:	47a0      	blx	r4
		printString(stringBuf);
  4010ae:	4882      	ldr	r0, [pc, #520]	; (4012b8 <processCommand+0x4e0>)
  4010b0:	4b85      	ldr	r3, [pc, #532]	; (4012c8 <processCommand+0x4f0>)
  4010b2:	4798      	blx	r3
  4010b4:	e1e9      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "DebugEn",7) == 0)
  4010b6:	6878      	ldr	r0, [r7, #4]
  4010b8:	4984      	ldr	r1, [pc, #528]	; (4012cc <processCommand+0x4f4>)
  4010ba:	2207      	movs	r2, #7
  4010bc:	4b7d      	ldr	r3, [pc, #500]	; (4012b4 <processCommand+0x4dc>)
  4010be:	4798      	blx	r3
  4010c0:	4603      	mov	r3, r0
  4010c2:	2b00      	cmp	r3, #0
  4010c4:	d111      	bne.n	4010ea <processCommand+0x312>
	{
		if(*(command+7) == '1')
  4010c6:	687b      	ldr	r3, [r7, #4]
  4010c8:	3307      	adds	r3, #7
  4010ca:	781b      	ldrb	r3, [r3, #0]
  4010cc:	2b31      	cmp	r3, #49	; 0x31
  4010ce:	d104      	bne.n	4010da <processCommand+0x302>
		{
			brainSettings.debugPrintsEnabled = true; 
  4010d0:	4b7f      	ldr	r3, [pc, #508]	; (4012d0 <processCommand+0x4f8>)
  4010d2:	2201      	movs	r2, #1
  4010d4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
  4010d8:	e003      	b.n	4010e2 <processCommand+0x30a>
		}
		else
		{
			brainSettings.debugPrintsEnabled = false; 
  4010da:	4b7d      	ldr	r3, [pc, #500]	; (4012d0 <processCommand+0x4f8>)
  4010dc:	2200      	movs	r2, #0
  4010de:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		}
		printString( "ACK\r\n");
  4010e2:	487c      	ldr	r0, [pc, #496]	; (4012d4 <processCommand+0x4fc>)
  4010e4:	4b78      	ldr	r3, [pc, #480]	; (4012c8 <processCommand+0x4f0>)
  4010e6:	4798      	blx	r3
  4010e8:	e1cf      	b.n	40148a <processCommand+0x6b2>
	}				
	else if (strncmp(command, "CheckRssi\r\n",cmdSize) == 0)
  4010ea:	6878      	ldr	r0, [r7, #4]
  4010ec:	497a      	ldr	r1, [pc, #488]	; (4012d8 <processCommand+0x500>)
  4010ee:	683a      	ldr	r2, [r7, #0]
  4010f0:	4b70      	ldr	r3, [pc, #448]	; (4012b4 <processCommand+0x4dc>)
  4010f2:	4798      	blx	r3
  4010f4:	4603      	mov	r3, r0
  4010f6:	2b00      	cmp	r3, #0
  4010f8:	d10c      	bne.n	401114 <processCommand+0x33c>
	{
		printString("RSSI level:\r\n");
  4010fa:	4878      	ldr	r0, [pc, #480]	; (4012dc <processCommand+0x504>)
  4010fc:	4b72      	ldr	r3, [pc, #456]	; (4012c8 <processCommand+0x4f0>)
  4010fe:	4798      	blx	r3
		task_quintic_checkRssiLevel(&quinticConfig[0]);
  401100:	4877      	ldr	r0, [pc, #476]	; (4012e0 <processCommand+0x508>)
  401102:	4b78      	ldr	r3, [pc, #480]	; (4012e4 <processCommand+0x50c>)
  401104:	4798      	blx	r3
		task_quintic_checkRssiLevel(&quinticConfig[1]);
  401106:	4878      	ldr	r0, [pc, #480]	; (4012e8 <processCommand+0x510>)
  401108:	4b76      	ldr	r3, [pc, #472]	; (4012e4 <processCommand+0x50c>)
  40110a:	4798      	blx	r3
		task_quintic_checkRssiLevel(&quinticConfig[2]);
  40110c:	4877      	ldr	r0, [pc, #476]	; (4012ec <processCommand+0x514>)
  40110e:	4b75      	ldr	r3, [pc, #468]	; (4012e4 <processCommand+0x50c>)
  401110:	4798      	blx	r3
  401112:	e1ba      	b.n	40148a <processCommand+0x6b2>
	}	
	else if(strncmp(command, "rstBLE\r\n",cmdSize) == 0)
  401114:	6878      	ldr	r0, [r7, #4]
  401116:	4976      	ldr	r1, [pc, #472]	; (4012f0 <processCommand+0x518>)
  401118:	683a      	ldr	r2, [r7, #0]
  40111a:	4b66      	ldr	r3, [pc, #408]	; (4012b4 <processCommand+0x4dc>)
  40111c:	4798      	blx	r3
  40111e:	4603      	mov	r3, r0
  401120:	2b00      	cmp	r3, #0
  401122:	d125      	bne.n	401170 <processCommand+0x398>
	{
		drv_gpio_setPinState(quinticConfig[0].resetPin, DRV_GPIO_PIN_STATE_LOW);
  401124:	4b6e      	ldr	r3, [pc, #440]	; (4012e0 <processCommand+0x508>)
  401126:	f893 3020 	ldrb.w	r3, [r3, #32]
  40112a:	4618      	mov	r0, r3
  40112c:	2100      	movs	r1, #0
  40112e:	4b71      	ldr	r3, [pc, #452]	; (4012f4 <processCommand+0x51c>)
  401130:	4798      	blx	r3
		drv_gpio_setPinState(quinticConfig[2].resetPin, DRV_GPIO_PIN_STATE_LOW);
  401132:	4b6b      	ldr	r3, [pc, #428]	; (4012e0 <processCommand+0x508>)
  401134:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
  401138:	4618      	mov	r0, r3
  40113a:	2100      	movs	r1, #0
  40113c:	4b6d      	ldr	r3, [pc, #436]	; (4012f4 <processCommand+0x51c>)
  40113e:	4798      	blx	r3
		vTaskDelay(50);
  401140:	2032      	movs	r0, #50	; 0x32
  401142:	4b6d      	ldr	r3, [pc, #436]	; (4012f8 <processCommand+0x520>)
  401144:	4798      	blx	r3
		drv_gpio_setPinState(quinticConfig[0].resetPin, DRV_GPIO_PIN_STATE_HIGH);
  401146:	4b66      	ldr	r3, [pc, #408]	; (4012e0 <processCommand+0x508>)
  401148:	f893 3020 	ldrb.w	r3, [r3, #32]
  40114c:	4618      	mov	r0, r3
  40114e:	2101      	movs	r1, #1
  401150:	4b68      	ldr	r3, [pc, #416]	; (4012f4 <processCommand+0x51c>)
  401152:	4798      	blx	r3
		drv_gpio_setPinState(quinticConfig[2].resetPin, DRV_GPIO_PIN_STATE_HIGH);
  401154:	4b62      	ldr	r3, [pc, #392]	; (4012e0 <processCommand+0x508>)
  401156:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
  40115a:	4618      	mov	r0, r3
  40115c:	2101      	movs	r1, #1
  40115e:	4b65      	ldr	r3, [pc, #404]	; (4012f4 <processCommand+0x51c>)
  401160:	4798      	blx	r3
		printString("Pin reset\r\n");
  401162:	4866      	ldr	r0, [pc, #408]	; (4012fc <processCommand+0x524>)
  401164:	4b58      	ldr	r3, [pc, #352]	; (4012c8 <processCommand+0x4f0>)
  401166:	4798      	blx	r3
		enableRecording = false;
  401168:	4b65      	ldr	r3, [pc, #404]	; (401300 <processCommand+0x528>)
  40116a:	2200      	movs	r2, #0
  40116c:	701a      	strb	r2, [r3, #0]
  40116e:	e18c      	b.n	40148a <processCommand+0x6b2>
	}
		
	else if(strncmp(command, "disableUARTs\r\n",cmdSize) == 0)
  401170:	6878      	ldr	r0, [r7, #4]
  401172:	4964      	ldr	r1, [pc, #400]	; (401304 <processCommand+0x52c>)
  401174:	683a      	ldr	r2, [r7, #0]
  401176:	4b4f      	ldr	r3, [pc, #316]	; (4012b4 <processCommand+0x4dc>)
  401178:	4798      	blx	r3
  40117a:	4603      	mov	r3, r0
  40117c:	2b00      	cmp	r3, #0
  40117e:	d111      	bne.n	4011a4 <processCommand+0x3cc>
	{
		drv_uart_deInit(&uart1Config);
  401180:	4861      	ldr	r0, [pc, #388]	; (401308 <processCommand+0x530>)
  401182:	4b62      	ldr	r3, [pc, #392]	; (40130c <processCommand+0x534>)
  401184:	4798      	blx	r3
		drv_uart_deInit(&usart0Config);
  401186:	4862      	ldr	r0, [pc, #392]	; (401310 <processCommand+0x538>)
  401188:	4b60      	ldr	r3, [pc, #384]	; (40130c <processCommand+0x534>)
  40118a:	4798      	blx	r3
		drv_uart_deInit(&usart1Config);
  40118c:	4861      	ldr	r0, [pc, #388]	; (401314 <processCommand+0x53c>)
  40118e:	4b5f      	ldr	r3, [pc, #380]	; (40130c <processCommand+0x534>)
  401190:	4798      	blx	r3
		drv_gpio_ConfigureBLEForProgramming(); 
  401192:	4b61      	ldr	r3, [pc, #388]	; (401318 <processCommand+0x540>)
  401194:	4798      	blx	r3
		printString("UARTs set as High impedance\r\n");
  401196:	4861      	ldr	r0, [pc, #388]	; (40131c <processCommand+0x544>)
  401198:	4b4b      	ldr	r3, [pc, #300]	; (4012c8 <processCommand+0x4f0>)
  40119a:	4798      	blx	r3
		enableRecording = false;
  40119c:	4b58      	ldr	r3, [pc, #352]	; (401300 <processCommand+0x528>)
  40119e:	2200      	movs	r2, #0
  4011a0:	701a      	strb	r2, [r3, #0]
  4011a2:	e172      	b.n	40148a <processCommand+0x6b2>
	}	
	else if(strncmp(command, "setTime",7) == 0)
  4011a4:	6878      	ldr	r0, [r7, #4]
  4011a6:	495e      	ldr	r1, [pc, #376]	; (401320 <processCommand+0x548>)
  4011a8:	2207      	movs	r2, #7
  4011aa:	4b42      	ldr	r3, [pc, #264]	; (4012b4 <processCommand+0x4dc>)
  4011ac:	4798      	blx	r3
  4011ae:	4603      	mov	r3, r0
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d10c      	bne.n	4011ce <processCommand+0x3f6>
	{
		if(strlen(command) >= 24)
  4011b4:	6878      	ldr	r0, [r7, #4]
  4011b6:	4b5b      	ldr	r3, [pc, #364]	; (401324 <processCommand+0x54c>)
  4011b8:	4798      	blx	r3
  4011ba:	4603      	mov	r3, r0
  4011bc:	2b17      	cmp	r3, #23
  4011be:	f240 8164 	bls.w	40148a <processCommand+0x6b2>
		{
			setTimeFromString(command+7); 
  4011c2:	687b      	ldr	r3, [r7, #4]
  4011c4:	3307      	adds	r3, #7
  4011c6:	4618      	mov	r0, r3
  4011c8:	4b57      	ldr	r3, [pc, #348]	; (401328 <processCommand+0x550>)
  4011ca:	4798      	blx	r3
  4011cc:	e15d      	b.n	40148a <processCommand+0x6b2>
		}
	}
	else if(strncmp(command, "?\r\n",3) == 0)
  4011ce:	6878      	ldr	r0, [r7, #4]
  4011d0:	4956      	ldr	r1, [pc, #344]	; (40132c <processCommand+0x554>)
  4011d2:	2203      	movs	r2, #3
  4011d4:	4b37      	ldr	r3, [pc, #220]	; (4012b4 <processCommand+0x4dc>)
  4011d6:	4798      	blx	r3
  4011d8:	4603      	mov	r3, r0
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d114      	bne.n	401208 <processCommand+0x430>
	{
		printf("HEDDOKO BRAIN PACK %s\r\n", VERSION); 
  4011de:	4854      	ldr	r0, [pc, #336]	; (401330 <processCommand+0x558>)
  4011e0:	4954      	ldr	r1, [pc, #336]	; (401334 <processCommand+0x55c>)
  4011e2:	4b55      	ldr	r3, [pc, #340]	; (401338 <processCommand+0x560>)
  4011e4:	4798      	blx	r3
		printf("BUILD DATE: %s %s\r\n", __DATE__,__TIME__);
  4011e6:	4855      	ldr	r0, [pc, #340]	; (40133c <processCommand+0x564>)
  4011e8:	4955      	ldr	r1, [pc, #340]	; (401340 <processCommand+0x568>)
  4011ea:	4a56      	ldr	r2, [pc, #344]	; (401344 <processCommand+0x56c>)
  4011ec:	4b52      	ldr	r3, [pc, #328]	; (401338 <processCommand+0x560>)
  4011ee:	4798      	blx	r3
		printf("SUIT NUMBER: %s\r\n",brainSettings.suitNumber); 
  4011f0:	4855      	ldr	r0, [pc, #340]	; (401348 <processCommand+0x570>)
  4011f2:	4956      	ldr	r1, [pc, #344]	; (40134c <processCommand+0x574>)
  4011f4:	4b50      	ldr	r3, [pc, #320]	; (401338 <processCommand+0x560>)
  4011f6:	4798      	blx	r3
		printf("SUIT TIME: %s \r\n",getTimeString());  		
  4011f8:	4b55      	ldr	r3, [pc, #340]	; (401350 <processCommand+0x578>)
  4011fa:	4798      	blx	r3
  4011fc:	4603      	mov	r3, r0
  4011fe:	4855      	ldr	r0, [pc, #340]	; (401354 <processCommand+0x57c>)
  401200:	4619      	mov	r1, r3
  401202:	4b4d      	ldr	r3, [pc, #308]	; (401338 <processCommand+0x560>)
  401204:	4798      	blx	r3
  401206:	e140      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "flushUarts\r\n",cmdSize) == 0)
  401208:	6878      	ldr	r0, [r7, #4]
  40120a:	4953      	ldr	r1, [pc, #332]	; (401358 <processCommand+0x580>)
  40120c:	683a      	ldr	r2, [r7, #0]
  40120e:	4b29      	ldr	r3, [pc, #164]	; (4012b4 <processCommand+0x4dc>)
  401210:	4798      	blx	r3
  401212:	4603      	mov	r3, r0
  401214:	2b00      	cmp	r3, #0
  401216:	d10c      	bne.n	401232 <processCommand+0x45a>
	{
		drv_uart_flushRx(&uart0Config);		
  401218:	4850      	ldr	r0, [pc, #320]	; (40135c <processCommand+0x584>)
  40121a:	4b51      	ldr	r3, [pc, #324]	; (401360 <processCommand+0x588>)
  40121c:	4798      	blx	r3
		drv_uart_flushRx(&uart1Config);		
  40121e:	483a      	ldr	r0, [pc, #232]	; (401308 <processCommand+0x530>)
  401220:	4b4f      	ldr	r3, [pc, #316]	; (401360 <processCommand+0x588>)
  401222:	4798      	blx	r3
		drv_uart_flushRx(&usart0Config);
  401224:	483a      	ldr	r0, [pc, #232]	; (401310 <processCommand+0x538>)
  401226:	4b4e      	ldr	r3, [pc, #312]	; (401360 <processCommand+0x588>)
  401228:	4798      	blx	r3
		drv_uart_flushRx(&usart1Config);
  40122a:	483a      	ldr	r0, [pc, #232]	; (401314 <processCommand+0x53c>)
  40122c:	4b4c      	ldr	r3, [pc, #304]	; (401360 <processCommand+0x588>)
  40122e:	4798      	blx	r3
  401230:	e12b      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command,"getStats\r\n", cmdSize) == 0)
  401232:	6878      	ldr	r0, [r7, #4]
  401234:	494b      	ldr	r1, [pc, #300]	; (401364 <processCommand+0x58c>)
  401236:	683a      	ldr	r2, [r7, #0]
  401238:	4b1e      	ldr	r3, [pc, #120]	; (4012b4 <processCommand+0x4dc>)
  40123a:	4798      	blx	r3
  40123c:	4603      	mov	r3, r0
  40123e:	2b00      	cmp	r3, #0
  401240:	d102      	bne.n	401248 <processCommand+0x470>
	{
		printStats(); 
  401242:	4b49      	ldr	r3, [pc, #292]	; (401368 <processCommand+0x590>)
  401244:	4798      	blx	r3
  401246:	e120      	b.n	40148a <processCommand+0x6b2>
	}	
	else if(strncmp(command,"HardReset\r\n", cmdSize) == 0)	
  401248:	6878      	ldr	r0, [r7, #4]
  40124a:	4948      	ldr	r1, [pc, #288]	; (40136c <processCommand+0x594>)
  40124c:	683a      	ldr	r2, [r7, #0]
  40124e:	4b19      	ldr	r3, [pc, #100]	; (4012b4 <processCommand+0x4dc>)
  401250:	4798      	blx	r3
  401252:	4603      	mov	r3, r0
  401254:	2b00      	cmp	r3, #0
  401256:	d103      	bne.n	401260 <processCommand+0x488>
	{
		rstc_start_software_reset(RSTC);
  401258:	4845      	ldr	r0, [pc, #276]	; (401370 <processCommand+0x598>)
  40125a:	4b46      	ldr	r3, [pc, #280]	; (401374 <processCommand+0x59c>)
  40125c:	4798      	blx	r3
  40125e:	e114      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command,"debugPackets\r\n", cmdSize) == 0)
  401260:	6878      	ldr	r0, [r7, #4]
  401262:	4945      	ldr	r1, [pc, #276]	; (401378 <processCommand+0x5a0>)
  401264:	683a      	ldr	r2, [r7, #0]
  401266:	4b13      	ldr	r3, [pc, #76]	; (4012b4 <processCommand+0x4dc>)
  401268:	4798      	blx	r3
  40126a:	4603      	mov	r3, r0
  40126c:	2b00      	cmp	r3, #0
  40126e:	d104      	bne.n	40127a <processCommand+0x4a2>
	{
		//turns on the zeroing of missing packets in the output data. 
		brainSettings.debugPackets = true; 
  401270:	4b17      	ldr	r3, [pc, #92]	; (4012d0 <processCommand+0x4f8>)
  401272:	2201      	movs	r2, #1
  401274:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
  401278:	e107      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command,"chMap ", 6) == 0)
  40127a:	6878      	ldr	r0, [r7, #4]
  40127c:	493f      	ldr	r1, [pc, #252]	; (40137c <processCommand+0x5a4>)
  40127e:	2206      	movs	r2, #6
  401280:	4b0c      	ldr	r3, [pc, #48]	; (4012b4 <processCommand+0x4dc>)
  401282:	4798      	blx	r3
  401284:	4603      	mov	r3, r0
  401286:	2b00      	cmp	r3, #0
  401288:	f040 8082 	bne.w	401390 <processCommand+0x5b8>
	{
		// Save the received channel map to settings.
		strncpy(brainSettings.channelmap, command+6, 10);
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	3306      	adds	r3, #6
  401290:	483b      	ldr	r0, [pc, #236]	; (401380 <processCommand+0x5a8>)
  401292:	4619      	mov	r1, r3
  401294:	220a      	movs	r2, #10
  401296:	4b3b      	ldr	r3, [pc, #236]	; (401384 <processCommand+0x5ac>)
  401298:	4798      	blx	r3
		strncpy((brainSettings.channelmap)+10, "\r\n", 2);	//Add CR+LF at the end of the srting
  40129a:	4b3b      	ldr	r3, [pc, #236]	; (401388 <processCommand+0x5b0>)
  40129c:	f640 220d 	movw	r2, #2573	; 0xa0d
  4012a0:	801a      	strh	r2, [r3, #0]
		printString("Received new channel map request:\r\n");
  4012a2:	483a      	ldr	r0, [pc, #232]	; (40138c <processCommand+0x5b4>)
  4012a4:	4b08      	ldr	r3, [pc, #32]	; (4012c8 <processCommand+0x4f0>)
  4012a6:	4798      	blx	r3
		printString(brainSettings.channelmap);
  4012a8:	4835      	ldr	r0, [pc, #212]	; (401380 <processCommand+0x5a8>)
  4012aa:	4b07      	ldr	r3, [pc, #28]	; (4012c8 <processCommand+0x4f0>)
  4012ac:	4798      	blx	r3
  4012ae:	e0ec      	b.n	40148a <processCommand+0x6b2>
  4012b0:	0041c1ac 	.word	0x0041c1ac
  4012b4:	004137e9 	.word	0x004137e9
  4012b8:	2000127c 	.word	0x2000127c
  4012bc:	0041c1bc 	.word	0x0041c1bc
  4012c0:	200030f4 	.word	0x200030f4
  4012c4:	0041326d 	.word	0x0041326d
  4012c8:	004017a1 	.word	0x004017a1
  4012cc:	0041c1c4 	.word	0x0041c1c4
  4012d0:	20000220 	.word	0x20000220
  4012d4:	0041c118 	.word	0x0041c118
  4012d8:	0041c1cc 	.word	0x0041c1cc
  4012dc:	0041c1d8 	.word	0x0041c1d8
  4012e0:	20000508 	.word	0x20000508
  4012e4:	00410811 	.word	0x00410811
  4012e8:	20000544 	.word	0x20000544
  4012ec:	20000580 	.word	0x20000580
  4012f0:	0041c1e8 	.word	0x0041c1e8
  4012f4:	0040d7b5 	.word	0x0040d7b5
  4012f8:	0040b24d 	.word	0x0040b24d
  4012fc:	0041c1f4 	.word	0x0041c1f4
  401300:	2000127b 	.word	0x2000127b
  401304:	0041c200 	.word	0x0041c200
  401308:	200001d4 	.word	0x200001d4
  40130c:	0040e471 	.word	0x0040e471
  401310:	200001ec 	.word	0x200001ec
  401314:	20000204 	.word	0x20000204
  401318:	0040d595 	.word	0x0040d595
  40131c:	0041c210 	.word	0x0041c210
  401320:	0041c230 	.word	0x0041c230
  401324:	00413725 	.word	0x00413725
  401328:	004014f1 	.word	0x004014f1
  40132c:	0041c238 	.word	0x0041c238
  401330:	0041c23c 	.word	0x0041c23c
  401334:	0041c254 	.word	0x0041c254
  401338:	004129e9 	.word	0x004129e9
  40133c:	0041c25c 	.word	0x0041c25c
  401340:	0041c270 	.word	0x0041c270
  401344:	0041c27c 	.word	0x0041c27c
  401348:	0041c288 	.word	0x0041c288
  40134c:	20000228 	.word	0x20000228
  401350:	0040157d 	.word	0x0040157d
  401354:	0041c29c 	.word	0x0041c29c
  401358:	0041c2b0 	.word	0x0041c2b0
  40135c:	200001bc 	.word	0x200001bc
  401360:	0040e6fd 	.word	0x0040e6fd
  401364:	0041c2c0 	.word	0x0041c2c0
  401368:	00400bdd 	.word	0x00400bdd
  40136c:	0041c2cc 	.word	0x0041c2cc
  401370:	400e1400 	.word	0x400e1400
  401374:	0040058d 	.word	0x0040058d
  401378:	0041c2d8 	.word	0x0041c2d8
  40137c:	0041c2e8 	.word	0x0041c2e8
  401380:	200002c0 	.word	0x200002c0
  401384:	0041389d 	.word	0x0041389d
  401388:	200002ca 	.word	0x200002ca
  40138c:	0041c2f0 	.word	0x0041c2f0
	}
	else if (strncmp(command, "setLedConfig", 12) == 0)
  401390:	6878      	ldr	r0, [r7, #4]
  401392:	4941      	ldr	r1, [pc, #260]	; (401498 <processCommand+0x6c0>)
  401394:	220c      	movs	r2, #12
  401396:	4b41      	ldr	r3, [pc, #260]	; (40149c <processCommand+0x6c4>)
  401398:	4798      	blx	r3
  40139a:	4603      	mov	r3, r0
  40139c:	2b00      	cmp	r3, #0
  40139e:	d124      	bne.n	4013ea <processCommand+0x612>
	{
		if (*(command + 12) == '0')
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	330c      	adds	r3, #12
  4013a4:	781b      	ldrb	r3, [r3, #0]
  4013a6:	2b30      	cmp	r3, #48	; 0x30
  4013a8:	d109      	bne.n	4013be <processCommand+0x5e6>
		{
			nvmSettings.ledConfiguration.redLed = DRV_GPIO_PIN_RED_LED;
  4013aa:	4b3d      	ldr	r3, [pc, #244]	; (4014a0 <processCommand+0x6c8>)
  4013ac:	220e      	movs	r2, #14
  4013ae:	751a      	strb	r2, [r3, #20]
			nvmSettings.ledConfiguration.greenLed = DRV_GPIO_PIN_GREEN_LED;
  4013b0:	4b3b      	ldr	r3, [pc, #236]	; (4014a0 <processCommand+0x6c8>)
  4013b2:	220c      	movs	r2, #12
  4013b4:	759a      	strb	r2, [r3, #22]
			nvmSettings.ledConfiguration.blueLed = DRV_GPIO_PIN_BLUE_LED;
  4013b6:	4b3a      	ldr	r3, [pc, #232]	; (4014a0 <processCommand+0x6c8>)
  4013b8:	220d      	movs	r2, #13
  4013ba:	755a      	strb	r2, [r3, #21]
  4013bc:	e008      	b.n	4013d0 <processCommand+0x5f8>
		}
		else
		{
			nvmSettings.ledConfiguration.redLed = DRV_GPIO_PIN_BLUE_LED;
  4013be:	4b38      	ldr	r3, [pc, #224]	; (4014a0 <processCommand+0x6c8>)
  4013c0:	220d      	movs	r2, #13
  4013c2:	751a      	strb	r2, [r3, #20]
			nvmSettings.ledConfiguration.greenLed = DRV_GPIO_PIN_GREEN_LED;
  4013c4:	4b36      	ldr	r3, [pc, #216]	; (4014a0 <processCommand+0x6c8>)
  4013c6:	220c      	movs	r2, #12
  4013c8:	759a      	strb	r2, [r3, #22]
			nvmSettings.ledConfiguration.blueLed = DRV_GPIO_PIN_RED_LED;
  4013ca:	4b35      	ldr	r3, [pc, #212]	; (4014a0 <processCommand+0x6c8>)
  4013cc:	220e      	movs	r2, #14
  4013ce:	755a      	strb	r2, [r3, #21]
		}
		if(saveNvmSettings() == STATUS_PASS)
  4013d0:	4b34      	ldr	r3, [pc, #208]	; (4014a4 <processCommand+0x6cc>)
  4013d2:	4798      	blx	r3
  4013d4:	4603      	mov	r3, r0
  4013d6:	2b00      	cmp	r3, #0
  4013d8:	d103      	bne.n	4013e2 <processCommand+0x60a>
		{
			printString("ACK\r\n");
  4013da:	4833      	ldr	r0, [pc, #204]	; (4014a8 <processCommand+0x6d0>)
  4013dc:	4b33      	ldr	r3, [pc, #204]	; (4014ac <processCommand+0x6d4>)
  4013de:	4798      	blx	r3
			return;
  4013e0:	e055      	b.n	40148e <processCommand+0x6b6>
		}
		printString("NACK\r\n");
  4013e2:	4833      	ldr	r0, [pc, #204]	; (4014b0 <processCommand+0x6d8>)
  4013e4:	4b31      	ldr	r3, [pc, #196]	; (4014ac <processCommand+0x6d4>)
  4013e6:	4798      	blx	r3
  4013e8:	e04f      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command, "getSdCdValue", 12) == 0)
  4013ea:	6878      	ldr	r0, [r7, #4]
  4013ec:	4931      	ldr	r1, [pc, #196]	; (4014b4 <processCommand+0x6dc>)
  4013ee:	220c      	movs	r2, #12
  4013f0:	4b2a      	ldr	r3, [pc, #168]	; (40149c <processCommand+0x6c4>)
  4013f2:	4798      	blx	r3
  4013f4:	4603      	mov	r3, r0
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d114      	bne.n	401424 <processCommand+0x64c>
	{
		drv_gpio_pin_state_t sdCdPinState;
		drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD, &sdCdPinState);
  4013fa:	f107 030e 	add.w	r3, r7, #14
  4013fe:	2010      	movs	r0, #16
  401400:	4619      	mov	r1, r3
  401402:	4b2d      	ldr	r3, [pc, #180]	; (4014b8 <processCommand+0x6e0>)
  401404:	4798      	blx	r3
		if (sdCdPinState == DRV_GPIO_PIN_STATE_HIGH)
  401406:	7bbb      	ldrb	r3, [r7, #14]
  401408:	2b01      	cmp	r3, #1
  40140a:	d103      	bne.n	401414 <processCommand+0x63c>
		{
			printString("High\r\n");
  40140c:	482b      	ldr	r0, [pc, #172]	; (4014bc <processCommand+0x6e4>)
  40140e:	4b27      	ldr	r3, [pc, #156]	; (4014ac <processCommand+0x6d4>)
  401410:	4798      	blx	r3
  401412:	e006      	b.n	401422 <processCommand+0x64a>
		}
		else if (sdCdPinState == DRV_GPIO_PIN_STATE_LOW)
  401414:	7bbb      	ldrb	r3, [r7, #14]
  401416:	2b00      	cmp	r3, #0
  401418:	d103      	bne.n	401422 <processCommand+0x64a>
		{
			printString("Low\r\n");
  40141a:	4829      	ldr	r0, [pc, #164]	; (4014c0 <processCommand+0x6e8>)
  40141c:	4b23      	ldr	r3, [pc, #140]	; (4014ac <processCommand+0x6d4>)
  40141e:	4798      	blx	r3
  401420:	e033      	b.n	40148a <processCommand+0x6b2>
  401422:	e032      	b.n	40148a <processCommand+0x6b2>
		}
	}
	else if (strncmp(command, "disconnectImus", 14) == 0)
  401424:	6878      	ldr	r0, [r7, #4]
  401426:	4927      	ldr	r1, [pc, #156]	; (4014c4 <processCommand+0x6ec>)
  401428:	220e      	movs	r2, #14
  40142a:	4b1c      	ldr	r3, [pc, #112]	; (40149c <processCommand+0x6c4>)
  40142c:	4798      	blx	r3
  40142e:	4603      	mov	r3, r0
  401430:	2b00      	cmp	r3, #0
  401432:	d109      	bne.n	401448 <processCommand+0x670>
	{
		DisconnectImus(&quinticConfig[0]);
  401434:	4824      	ldr	r0, [pc, #144]	; (4014c8 <processCommand+0x6f0>)
  401436:	4b25      	ldr	r3, [pc, #148]	; (4014cc <processCommand+0x6f4>)
  401438:	4798      	blx	r3
		DisconnectImus(&quinticConfig[1]);
  40143a:	4825      	ldr	r0, [pc, #148]	; (4014d0 <processCommand+0x6f8>)
  40143c:	4b23      	ldr	r3, [pc, #140]	; (4014cc <processCommand+0x6f4>)
  40143e:	4798      	blx	r3
		DisconnectImus(&quinticConfig[2]);
  401440:	4824      	ldr	r0, [pc, #144]	; (4014d4 <processCommand+0x6fc>)
  401442:	4b22      	ldr	r3, [pc, #136]	; (4014cc <processCommand+0x6f4>)
  401444:	4798      	blx	r3
  401446:	e020      	b.n	40148a <processCommand+0x6b2>
	}
	else if (strncmp(command, "LowBattery", 10) == 0)
  401448:	6878      	ldr	r0, [r7, #4]
  40144a:	4923      	ldr	r1, [pc, #140]	; (4014d8 <processCommand+0x700>)
  40144c:	220a      	movs	r2, #10
  40144e:	4b13      	ldr	r3, [pc, #76]	; (40149c <processCommand+0x6c4>)
  401450:	4798      	blx	r3
  401452:	4603      	mov	r3, r0
  401454:	2b00      	cmp	r3, #0
  401456:	d107      	bne.n	401468 <processCommand+0x690>
	{
		//this message is sent from the power board to indicate that the battery is low
		debugPrintString("Low Battery\r\n");		
  401458:	4820      	ldr	r0, [pc, #128]	; (4014dc <processCommand+0x704>)
  40145a:	4b21      	ldr	r3, [pc, #132]	; (4014e0 <processCommand+0x708>)
  40145c:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_LOW_BATTERY,0);		
  40145e:	2009      	movs	r0, #9
  401460:	2100      	movs	r1, #0
  401462:	4b20      	ldr	r3, [pc, #128]	; (4014e4 <processCommand+0x70c>)
  401464:	4798      	blx	r3
  401466:	e010      	b.n	40148a <processCommand+0x6b2>
	}
	else if(strncmp(command, "PwrBrdMsg:", 10) == 0)
  401468:	6878      	ldr	r0, [r7, #4]
  40146a:	491f      	ldr	r1, [pc, #124]	; (4014e8 <processCommand+0x710>)
  40146c:	220a      	movs	r2, #10
  40146e:	4b0b      	ldr	r3, [pc, #44]	; (40149c <processCommand+0x6c4>)
  401470:	4798      	blx	r3
  401472:	4603      	mov	r3, r0
  401474:	2b00      	cmp	r3, #0
  401476:	d103      	bne.n	401480 <processCommand+0x6a8>
	{
		//do nothing, the message will be logged to file below. 
		
		debugPrintString(command);
  401478:	6878      	ldr	r0, [r7, #4]
  40147a:	4b19      	ldr	r3, [pc, #100]	; (4014e0 <processCommand+0x708>)
  40147c:	4798      	blx	r3
  40147e:	e004      	b.n	40148a <processCommand+0x6b2>
	}	
	else
	{		
		debugPrintString("Received invalid command\r\n");
  401480:	481a      	ldr	r0, [pc, #104]	; (4014ec <processCommand+0x714>)
  401482:	4b17      	ldr	r3, [pc, #92]	; (4014e0 <processCommand+0x708>)
  401484:	4798      	blx	r3
		status = STATUS_PASS; 
  401486:	2300      	movs	r3, #0
  401488:	73fb      	strb	r3, [r7, #15]
	}
	//snprintf(stringBuf,50*10,"Received Command: %s \r\n",command);
	//debugPrintString(stringBuf);
	return status;	
  40148a:	7bfb      	ldrb	r3, [r7, #15]
  40148c:	e7ff      	b.n	40148e <processCommand+0x6b6>
}
  40148e:	4618      	mov	r0, r3
  401490:	3714      	adds	r7, #20
  401492:	46bd      	mov	sp, r7
  401494:	bd90      	pop	{r4, r7, pc}
  401496:	bf00      	nop
  401498:	0041c314 	.word	0x0041c314
  40149c:	004137e9 	.word	0x004137e9
  4014a0:	20003e80 	.word	0x20003e80
  4014a4:	0040d2a1 	.word	0x0040d2a1
  4014a8:	0041c118 	.word	0x0041c118
  4014ac:	004017a1 	.word	0x004017a1
  4014b0:	0041c174 	.word	0x0041c174
  4014b4:	0041c324 	.word	0x0041c324
  4014b8:	0040d8a9 	.word	0x0040d8a9
  4014bc:	0041c334 	.word	0x0041c334
  4014c0:	0041c33c 	.word	0x0041c33c
  4014c4:	0041c344 	.word	0x0041c344
  4014c8:	20000508 	.word	0x20000508
  4014cc:	00410d61 	.word	0x00410d61
  4014d0:	20000544 	.word	0x20000544
  4014d4:	20000580 	.word	0x20000580
  4014d8:	0041c354 	.word	0x0041c354
  4014dc:	0041c360 	.word	0x0041c360
  4014e0:	004016d5 	.word	0x004016d5
  4014e4:	00402581 	.word	0x00402581
  4014e8:	0041c370 	.word	0x0041c370
  4014ec:	0041c37c 	.word	0x0041c37c

004014f0 <setTimeFromString>:

static void setTimeFromString(char* dateTime)
{
  4014f0:	b590      	push	{r4, r7, lr}
  4014f2:	b091      	sub	sp, #68	; 0x44
  4014f4:	af06      	add	r7, sp, #24
  4014f6:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second; 
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  4014f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
  4014fc:	f107 0320 	add.w	r3, r7, #32
  401500:	f107 011c 	add.w	r1, r7, #28
  401504:	9100      	str	r1, [sp, #0]
  401506:	f107 0118 	add.w	r1, r7, #24
  40150a:	9101      	str	r1, [sp, #4]
  40150c:	f107 0114 	add.w	r1, r7, #20
  401510:	9102      	str	r1, [sp, #8]
  401512:	f107 0110 	add.w	r1, r7, #16
  401516:	9103      	str	r1, [sp, #12]
  401518:	f107 010c 	add.w	r1, r7, #12
  40151c:	9104      	str	r1, [sp, #16]
  40151e:	6878      	ldr	r0, [r7, #4]
  401520:	490e      	ldr	r1, [pc, #56]	; (40155c <setTimeFromString+0x6c>)
  401522:	4c0f      	ldr	r4, [pc, #60]	; (401560 <setTimeFromString+0x70>)
  401524:	47a0      	blx	r4
  401526:	4603      	mov	r3, r0
  401528:	2b07      	cmp	r3, #7
  40152a:	d111      	bne.n	401550 <setTimeFromString+0x60>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second); 
  40152c:	6979      	ldr	r1, [r7, #20]
  40152e:	693a      	ldr	r2, [r7, #16]
  401530:	68fb      	ldr	r3, [r7, #12]
  401532:	480c      	ldr	r0, [pc, #48]	; (401564 <setTimeFromString+0x74>)
  401534:	4c0c      	ldr	r4, [pc, #48]	; (401568 <setTimeFromString+0x78>)
  401536:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow); 
  401538:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40153a:	6a3a      	ldr	r2, [r7, #32]
  40153c:	69fb      	ldr	r3, [r7, #28]
  40153e:	69b8      	ldr	r0, [r7, #24]
  401540:	9000      	str	r0, [sp, #0]
  401542:	4808      	ldr	r0, [pc, #32]	; (401564 <setTimeFromString+0x74>)
  401544:	4c09      	ldr	r4, [pc, #36]	; (40156c <setTimeFromString+0x7c>)
  401546:	47a0      	blx	r4
		printString("ACK\r\n");
  401548:	4809      	ldr	r0, [pc, #36]	; (401570 <setTimeFromString+0x80>)
  40154a:	4b0a      	ldr	r3, [pc, #40]	; (401574 <setTimeFromString+0x84>)
  40154c:	4798      	blx	r3
  40154e:	e002      	b.n	401556 <setTimeFromString+0x66>
	}
	else
	{
		printString("NACK\r\n");
  401550:	4809      	ldr	r0, [pc, #36]	; (401578 <setTimeFromString+0x88>)
  401552:	4b08      	ldr	r3, [pc, #32]	; (401574 <setTimeFromString+0x84>)
  401554:	4798      	blx	r3
	}
}
  401556:	372c      	adds	r7, #44	; 0x2c
  401558:	46bd      	mov	sp, r7
  40155a:	bd90      	pop	{r4, r7, pc}
  40155c:	0041c398 	.word	0x0041c398
  401560:	00413321 	.word	0x00413321
  401564:	400e1460 	.word	0x400e1460
  401568:	00405981 	.word	0x00405981
  40156c:	00405b71 	.word	0x00405b71
  401570:	0041c118 	.word	0x0041c118
  401574:	004017a1 	.word	0x004017a1
  401578:	0041c174 	.word	0x0041c174

0040157c <getTimeString>:
char timeString[100] = {0}; 
static char* getTimeString()
{
  40157c:	b590      	push	{r4, r7, lr}
  40157e:	b087      	sub	sp, #28
  401580:	af02      	add	r7, sp, #8
	uint32_t hour, minute, second; 
	rtc_get_time(RTC,&hour,&minute,&second); 
  401582:	f107 010c 	add.w	r1, r7, #12
  401586:	f107 0208 	add.w	r2, r7, #8
  40158a:	1d3b      	adds	r3, r7, #4
  40158c:	4807      	ldr	r0, [pc, #28]	; (4015ac <getTimeString+0x30>)
  40158e:	4c08      	ldr	r4, [pc, #32]	; (4015b0 <getTimeString+0x34>)
  401590:	47a0      	blx	r4
	sprintf(timeString,"%02d:%02d:%02d",hour,minute,second); 
  401592:	68fa      	ldr	r2, [r7, #12]
  401594:	68bb      	ldr	r3, [r7, #8]
  401596:	6879      	ldr	r1, [r7, #4]
  401598:	9100      	str	r1, [sp, #0]
  40159a:	4806      	ldr	r0, [pc, #24]	; (4015b4 <getTimeString+0x38>)
  40159c:	4906      	ldr	r1, [pc, #24]	; (4015b8 <getTimeString+0x3c>)
  40159e:	4c07      	ldr	r4, [pc, #28]	; (4015bc <getTimeString+0x40>)
  4015a0:	47a0      	blx	r4
	return timeString; 
  4015a2:	4b04      	ldr	r3, [pc, #16]	; (4015b4 <getTimeString+0x38>)
} 
  4015a4:	4618      	mov	r0, r3
  4015a6:	3714      	adds	r7, #20
  4015a8:	46bd      	mov	sp, r7
  4015aa:	bd90      	pop	{r4, r7, pc}
  4015ac:	400e1460 	.word	0x400e1460
  4015b0:	004058bd 	.word	0x004058bd
  4015b4:	20001474 	.word	0x20001474
  4015b8:	0041c3b0 	.word	0x0041c3b0
  4015bc:	004132d5 	.word	0x004132d5

004015c0 <debugPrintStringInt>:

void __attribute__((optimize("O0"))) debugPrintStringInt(char* str, int number)
{
  4015c0:	b580      	push	{r7, lr}
  4015c2:	b0b6      	sub	sp, #216	; 0xd8
  4015c4:	af00      	add	r7, sp, #0
  4015c6:	6078      	str	r0, [r7, #4]
  4015c8:	6039      	str	r1, [r7, #0]
	size_t length = 0;
  4015ca:	2300      	movs	r3, #0
  4015cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char timeStampedStr[MAX_DEBUG_STRING_LENGTH];
	int len = itoa(sgSysTickCount, timeStampedStr, 10);
  4015d0:	4b38      	ldr	r3, [pc, #224]	; (4016b4 <debugPrintStringInt+0xf4>)
  4015d2:	681b      	ldr	r3, [r3, #0]
  4015d4:	461a      	mov	r2, r3
  4015d6:	f107 0308 	add.w	r3, r7, #8
  4015da:	4610      	mov	r0, r2
  4015dc:	4619      	mov	r1, r3
  4015de:	220a      	movs	r2, #10
  4015e0:	4b35      	ldr	r3, [pc, #212]	; (4016b8 <debugPrintStringInt+0xf8>)
  4015e2:	4798      	blx	r3
  4015e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	timeStampedStr[len++] = ',';
  4015e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  4015ec:	1c5a      	adds	r2, r3, #1
  4015ee:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
  4015f2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
  4015f6:	4413      	add	r3, r2
  4015f8:	222c      	movs	r2, #44	; 0x2c
  4015fa:	f803 2cd0 	strb.w	r2, [r3, #-208]
	length = len;
  4015fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  401602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	len = itoa(number, timeStampedStr+length, 10);
  401606:	f107 0208 	add.w	r2, r7, #8
  40160a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40160e:	4413      	add	r3, r2
  401610:	6838      	ldr	r0, [r7, #0]
  401612:	4619      	mov	r1, r3
  401614:	220a      	movs	r2, #10
  401616:	4b28      	ldr	r3, [pc, #160]	; (4016b8 <debugPrintStringInt+0xf8>)
  401618:	4798      	blx	r3
  40161a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	timeStampedStr[length+len] = ',';
  40161e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
  401622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  401626:	4413      	add	r3, r2
  401628:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
  40162c:	4413      	add	r3, r2
  40162e:	222c      	movs	r2, #44	; 0x2c
  401630:	f803 2cd0 	strb.w	r2, [r3, #-208]
	length += len + 1;
  401634:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
  401638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40163c:	4413      	add	r3, r2
  40163e:	3301      	adds	r3, #1
  401640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	strncpy(timeStampedStr+length, str, MAX_DEBUG_STRING_LENGTH-length);
  401644:	f107 0208 	add.w	r2, r7, #8
  401648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40164c:	441a      	add	r2, r3
  40164e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  401652:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  401656:	4610      	mov	r0, r2
  401658:	6879      	ldr	r1, [r7, #4]
  40165a:	461a      	mov	r2, r3
  40165c:	4b17      	ldr	r3, [pc, #92]	; (4016bc <debugPrintStringInt+0xfc>)
  40165e:	4798      	blx	r3
	length = strlen(timeStampedStr);	
  401660:	f107 0308 	add.w	r3, r7, #8
  401664:	4618      	mov	r0, r3
  401666:	4b16      	ldr	r3, [pc, #88]	; (4016c0 <debugPrintStringInt+0x100>)
  401668:	4798      	blx	r3
  40166a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	//length = snprintf(timeStampedStr,200,"%08d,%s %d\r\n",sgSysTickCount,str,number);
	if(length > 0)
  40166e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  401672:	2b00      	cmp	r3, #0
  401674:	d01a      	beq.n	4016ac <debugPrintStringInt+0xec>
	{
		if(brainSettings.debugPrintsEnabled)
  401676:	4b13      	ldr	r3, [pc, #76]	; (4016c4 <debugPrintStringInt+0x104>)
  401678:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
  40167c:	2b00      	cmp	r3, #0
  40167e:	d00e      	beq.n	40169e <debugPrintStringInt+0xde>
		{
			if(config != NULL)
  401680:	4b11      	ldr	r3, [pc, #68]	; (4016c8 <debugPrintStringInt+0x108>)
  401682:	681b      	ldr	r3, [r3, #0]
  401684:	2b00      	cmp	r3, #0
  401686:	d00a      	beq.n	40169e <debugPrintStringInt+0xde>
			{		
				drv_uart_putData((config->uart), timeStampedStr, length);
  401688:	4b0f      	ldr	r3, [pc, #60]	; (4016c8 <debugPrintStringInt+0x108>)
  40168a:	681b      	ldr	r3, [r3, #0]
  40168c:	681a      	ldr	r2, [r3, #0]
  40168e:	f107 0308 	add.w	r3, r7, #8
  401692:	4610      	mov	r0, r2
  401694:	4619      	mov	r1, r3
  401696:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
  40169a:	4b0c      	ldr	r3, [pc, #48]	; (4016cc <debugPrintStringInt+0x10c>)
  40169c:	4798      	blx	r3
			}
		}
		task_debugLogWriteEntry(timeStampedStr, length);
  40169e:	f107 0308 	add.w	r3, r7, #8
  4016a2:	4618      	mov	r0, r3
  4016a4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
  4016a8:	4b09      	ldr	r3, [pc, #36]	; (4016d0 <debugPrintStringInt+0x110>)
  4016aa:	4798      	blx	r3
	}
}
  4016ac:	37d8      	adds	r7, #216	; 0xd8
  4016ae:	46bd      	mov	sp, r7
  4016b0:	bd80      	pop	{r7, pc}
  4016b2:	bf00      	nop
  4016b4:	200039dc 	.word	0x200039dc
  4016b8:	0040cba5 	.word	0x0040cba5
  4016bc:	0041389d 	.word	0x0041389d
  4016c0:	00413725 	.word	0x00413725
  4016c4:	20000220 	.word	0x20000220
  4016c8:	20001470 	.word	0x20001470
  4016cc:	0040e6b9 	.word	0x0040e6b9
  4016d0:	00401c69 	.word	0x00401c69

004016d4 <debugPrintString>:

void __attribute__((optimize("O0"))) debugPrintString(char* str)
{
  4016d4:	b580      	push	{r7, lr}
  4016d6:	b0b6      	sub	sp, #216	; 0xd8
  4016d8:	af00      	add	r7, sp, #0
  4016da:	6078      	str	r0, [r7, #4]
	size_t length = 0;
  4016dc:	2300      	movs	r3, #0
  4016de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char timeStampedStr[MAX_DEBUG_STRING_LENGTH];
	int len = itoa(sgSysTickCount, timeStampedStr, 10);
  4016e2:	4b27      	ldr	r3, [pc, #156]	; (401780 <debugPrintString+0xac>)
  4016e4:	681b      	ldr	r3, [r3, #0]
  4016e6:	461a      	mov	r2, r3
  4016e8:	f107 0308 	add.w	r3, r7, #8
  4016ec:	4610      	mov	r0, r2
  4016ee:	4619      	mov	r1, r3
  4016f0:	220a      	movs	r2, #10
  4016f2:	4b24      	ldr	r3, [pc, #144]	; (401784 <debugPrintString+0xb0>)
  4016f4:	4798      	blx	r3
  4016f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	timeStampedStr[len++] = ',';
  4016fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  4016fe:	1c5a      	adds	r2, r3, #1
  401700:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
  401704:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
  401708:	4413      	add	r3, r2
  40170a:	222c      	movs	r2, #44	; 0x2c
  40170c:	f803 2cd0 	strb.w	r2, [r3, #-208]
	strncpy(timeStampedStr+len, str, MAX_DEBUG_STRING_LENGTH-len);	
  401710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  401714:	f107 0208 	add.w	r2, r7, #8
  401718:	441a      	add	r2, r3
  40171a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  40171e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
  401722:	4610      	mov	r0, r2
  401724:	6879      	ldr	r1, [r7, #4]
  401726:	461a      	mov	r2, r3
  401728:	4b17      	ldr	r3, [pc, #92]	; (401788 <debugPrintString+0xb4>)
  40172a:	4798      	blx	r3
	length = strlen(timeStampedStr); 
  40172c:	f107 0308 	add.w	r3, r7, #8
  401730:	4618      	mov	r0, r3
  401732:	4b16      	ldr	r3, [pc, #88]	; (40178c <debugPrintString+0xb8>)
  401734:	4798      	blx	r3
  401736:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if(length > 0)
  40173a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40173e:	2b00      	cmp	r3, #0
  401740:	d01a      	beq.n	401778 <debugPrintString+0xa4>
	{
		if(brainSettings.debugPrintsEnabled)
  401742:	4b13      	ldr	r3, [pc, #76]	; (401790 <debugPrintString+0xbc>)
  401744:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
  401748:	2b00      	cmp	r3, #0
  40174a:	d00e      	beq.n	40176a <debugPrintString+0x96>
		{
			if(config != NULL)
  40174c:	4b11      	ldr	r3, [pc, #68]	; (401794 <debugPrintString+0xc0>)
  40174e:	681b      	ldr	r3, [r3, #0]
  401750:	2b00      	cmp	r3, #0
  401752:	d00a      	beq.n	40176a <debugPrintString+0x96>
			{
				drv_uart_putData((config->uart), timeStampedStr, length);
  401754:	4b0f      	ldr	r3, [pc, #60]	; (401794 <debugPrintString+0xc0>)
  401756:	681b      	ldr	r3, [r3, #0]
  401758:	681a      	ldr	r2, [r3, #0]
  40175a:	f107 0308 	add.w	r3, r7, #8
  40175e:	4610      	mov	r0, r2
  401760:	4619      	mov	r1, r3
  401762:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
  401766:	4b0c      	ldr	r3, [pc, #48]	; (401798 <debugPrintString+0xc4>)
  401768:	4798      	blx	r3
			}
		}
		task_debugLogWriteEntry(timeStampedStr, length);
  40176a:	f107 0308 	add.w	r3, r7, #8
  40176e:	4618      	mov	r0, r3
  401770:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
  401774:	4b09      	ldr	r3, [pc, #36]	; (40179c <debugPrintString+0xc8>)
  401776:	4798      	blx	r3
	}
}
  401778:	37d8      	adds	r7, #216	; 0xd8
  40177a:	46bd      	mov	sp, r7
  40177c:	bd80      	pop	{r7, pc}
  40177e:	bf00      	nop
  401780:	200039dc 	.word	0x200039dc
  401784:	0040cba5 	.word	0x0040cba5
  401788:	0041389d 	.word	0x0041389d
  40178c:	00413725 	.word	0x00413725
  401790:	20000220 	.word	0x20000220
  401794:	20001470 	.word	0x20001470
  401798:	0040e6b9 	.word	0x0040e6b9
  40179c:	00401c69 	.word	0x00401c69

004017a0 <printString>:

void printString(char* str)
{
  4017a0:	b580      	push	{r7, lr}
  4017a2:	b082      	sub	sp, #8
  4017a4:	af00      	add	r7, sp, #0
  4017a6:	6078      	str	r0, [r7, #4]
	drv_uart_putString((config->uart), str);
  4017a8:	4b04      	ldr	r3, [pc, #16]	; (4017bc <printString+0x1c>)
  4017aa:	681b      	ldr	r3, [r3, #0]
  4017ac:	681b      	ldr	r3, [r3, #0]
  4017ae:	4618      	mov	r0, r3
  4017b0:	6879      	ldr	r1, [r7, #4]
  4017b2:	4b03      	ldr	r3, [pc, #12]	; (4017c0 <printString+0x20>)
  4017b4:	4798      	blx	r3
}
  4017b6:	3708      	adds	r7, #8
  4017b8:	46bd      	mov	sp, r7
  4017ba:	bd80      	pop	{r7, pc}
  4017bc:	20001470 	.word	0x20001470
  4017c0:	0040e669 	.word	0x0040e669

004017c4 <sendPacket>:

void sendPacket(char* buf, size_t length)
{
  4017c4:	b580      	push	{r7, lr}
  4017c6:	b082      	sub	sp, #8
  4017c8:	af00      	add	r7, sp, #0
  4017ca:	6078      	str	r0, [r7, #4]
  4017cc:	6039      	str	r1, [r7, #0]
	drv_uart_putData((config->uart), buf, length);
  4017ce:	4b05      	ldr	r3, [pc, #20]	; (4017e4 <sendPacket+0x20>)
  4017d0:	681b      	ldr	r3, [r3, #0]
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	4618      	mov	r0, r3
  4017d6:	6879      	ldr	r1, [r7, #4]
  4017d8:	683a      	ldr	r2, [r7, #0]
  4017da:	4b03      	ldr	r3, [pc, #12]	; (4017e8 <sendPacket+0x24>)
  4017dc:	4798      	blx	r3
  4017de:	3708      	adds	r7, #8
  4017e0:	46bd      	mov	sp, r7
  4017e2:	bd80      	pop	{r7, pc}
  4017e4:	20001470 	.word	0x20001470
  4017e8:	0040e6b9 	.word	0x0040e6b9

004017ec <task_sdCardHandler>:
volatile char dataLogFileName[SD_CARD_FILENAME_LENGTH] = {0};
	
char debugLogNewFileName[] = "0:sysHdk.bin", debugLogOldFileName[] = "0:sysHdk_old.bin";
	
void task_sdCardHandler(void *pvParameters)
{
  4017ec:	b590      	push	{r4, r7, lr}
  4017ee:	b08b      	sub	sp, #44	; 0x2c
  4017f0:	af00      	add	r7, sp, #0
  4017f2:	6078      	str	r0, [r7, #4]
	
	uint32_t numBytesToWrite = 0, numBytesWritten = 0;
  4017f4:	2300      	movs	r3, #0
  4017f6:	627b      	str	r3, [r7, #36]	; 0x24
  4017f8:	2300      	movs	r3, #0
  4017fa:	623b      	str	r3, [r7, #32]
	uint32_t debugNumBytesToWrite = 0, debugNumBytesWritten = 0;
  4017fc:	2300      	movs	r3, #0
  4017fe:	61fb      	str	r3, [r7, #28]
  401800:	2300      	movs	r3, #0
  401802:	61bb      	str	r3, [r7, #24]
	uint32_t numBytes = 0, debugNumBytes = 0;
  401804:	2300      	movs	r3, #0
  401806:	60fb      	str	r3, [r7, #12]
  401808:	2300      	movs	r3, #0
  40180a:	60bb      	str	r3, [r7, #8]
	semaphore_sdCardWrite = xSemaphoreCreateMutex();
  40180c:	4b7f      	ldr	r3, [pc, #508]	; (401a0c <task_sdCardHandler+0x220>)
  40180e:	4798      	blx	r3
  401810:	4602      	mov	r2, r0
  401812:	4b7f      	ldr	r3, [pc, #508]	; (401a10 <task_sdCardHandler+0x224>)
  401814:	601a      	str	r2, [r3, #0]
	semaphore_fatFsAccess = xSemaphoreCreateMutex();
  401816:	4b7d      	ldr	r3, [pc, #500]	; (401a0c <task_sdCardHandler+0x220>)
  401818:	4798      	blx	r3
  40181a:	4602      	mov	r2, r0
  40181c:	4b7d      	ldr	r3, [pc, #500]	; (401a14 <task_sdCardHandler+0x228>)
  40181e:	601a      	str	r2, [r3, #0]
	static FRESULT res = FR_OK;
	uint32_t writeStart = 0;
  401820:	2300      	movs	r3, #0
  401822:	613b      	str	r3, [r7, #16]
	uint32_t maxWriteTime = 0; 
  401824:	2300      	movs	r3, #0
  401826:	617b      	str	r3, [r7, #20]
	dataLogFileName[0] = LUN_ID_SD_MMC_0_MEM + '0';
  401828:	4b7b      	ldr	r3, [pc, #492]	; (401a18 <task_sdCardHandler+0x22c>)
  40182a:	2230      	movs	r2, #48	; 0x30
  40182c:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		//take semaphore and copy data to a temporary buffer.
		writeStart = sgSysTickCount;
  40182e:	4b7b      	ldr	r3, [pc, #492]	; (401a1c <task_sdCardHandler+0x230>)
  401830:	681b      	ldr	r3, [r3, #0]
  401832:	613b      	str	r3, [r7, #16]
		if(xSemaphoreTake(semaphore_sdCardWrite,10) == true)
  401834:	4b76      	ldr	r3, [pc, #472]	; (401a10 <task_sdCardHandler+0x224>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	4618      	mov	r0, r3
  40183a:	2100      	movs	r1, #0
  40183c:	220a      	movs	r2, #10
  40183e:	2300      	movs	r3, #0
  401840:	4c77      	ldr	r4, [pc, #476]	; (401a20 <task_sdCardHandler+0x234>)
  401842:	47a0      	blx	r4
  401844:	4603      	mov	r3, r0
  401846:	2b01      	cmp	r3, #1
  401848:	d133      	bne.n	4018b2 <task_sdCardHandler+0xc6>
		{
			if(sdCardBufferPointer > 0 && sdCardBufferPointer <= SD_CARD_BUFFER_SIZE)
  40184a:	4b76      	ldr	r3, [pc, #472]	; (401a24 <task_sdCardHandler+0x238>)
  40184c:	681b      	ldr	r3, [r3, #0]
  40184e:	2b00      	cmp	r3, #0
  401850:	d011      	beq.n	401876 <task_sdCardHandler+0x8a>
  401852:	4b74      	ldr	r3, [pc, #464]	; (401a24 <task_sdCardHandler+0x238>)
  401854:	681b      	ldr	r3, [r3, #0]
  401856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  40185a:	d80c      	bhi.n	401876 <task_sdCardHandler+0x8a>
			{
				memcpy(tempBuf,sdCardBuffer,sdCardBufferPointer);
  40185c:	4b71      	ldr	r3, [pc, #452]	; (401a24 <task_sdCardHandler+0x238>)
  40185e:	681b      	ldr	r3, [r3, #0]
  401860:	4871      	ldr	r0, [pc, #452]	; (401a28 <task_sdCardHandler+0x23c>)
  401862:	4972      	ldr	r1, [pc, #456]	; (401a2c <task_sdCardHandler+0x240>)
  401864:	461a      	mov	r2, r3
  401866:	4b72      	ldr	r3, [pc, #456]	; (401a30 <task_sdCardHandler+0x244>)
  401868:	4798      	blx	r3
				numBytesToWrite = sdCardBufferPointer;
  40186a:	4b6e      	ldr	r3, [pc, #440]	; (401a24 <task_sdCardHandler+0x238>)
  40186c:	681b      	ldr	r3, [r3, #0]
  40186e:	627b      	str	r3, [r7, #36]	; 0x24
				sdCardBufferPointer = 0;
  401870:	4b6c      	ldr	r3, [pc, #432]	; (401a24 <task_sdCardHandler+0x238>)
  401872:	2200      	movs	r2, #0
  401874:	601a      	str	r2, [r3, #0]
			}
			
			if (debugLogBufferPointer > 0 && debugLogBufferPointer <= DEBUG_LOG_BUFFER_SIZE)
  401876:	4b6f      	ldr	r3, [pc, #444]	; (401a34 <task_sdCardHandler+0x248>)
  401878:	681b      	ldr	r3, [r3, #0]
  40187a:	2b00      	cmp	r3, #0
  40187c:	d011      	beq.n	4018a2 <task_sdCardHandler+0xb6>
  40187e:	4b6d      	ldr	r3, [pc, #436]	; (401a34 <task_sdCardHandler+0x248>)
  401880:	681b      	ldr	r3, [r3, #0]
  401882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401886:	d80c      	bhi.n	4018a2 <task_sdCardHandler+0xb6>
			{
				memcpy(debugLogTempBuf, debugLogBuffer, debugLogBufferPointer);
  401888:	4b6a      	ldr	r3, [pc, #424]	; (401a34 <task_sdCardHandler+0x248>)
  40188a:	681b      	ldr	r3, [r3, #0]
  40188c:	486a      	ldr	r0, [pc, #424]	; (401a38 <task_sdCardHandler+0x24c>)
  40188e:	496b      	ldr	r1, [pc, #428]	; (401a3c <task_sdCardHandler+0x250>)
  401890:	461a      	mov	r2, r3
  401892:	4b67      	ldr	r3, [pc, #412]	; (401a30 <task_sdCardHandler+0x244>)
  401894:	4798      	blx	r3
				debugNumBytesToWrite = debugLogBufferPointer;
  401896:	4b67      	ldr	r3, [pc, #412]	; (401a34 <task_sdCardHandler+0x248>)
  401898:	681b      	ldr	r3, [r3, #0]
  40189a:	61fb      	str	r3, [r7, #28]
				debugLogBufferPointer = 0;
  40189c:	4b65      	ldr	r3, [pc, #404]	; (401a34 <task_sdCardHandler+0x248>)
  40189e:	2200      	movs	r2, #0
  4018a0:	601a      	str	r2, [r3, #0]
			}
			xSemaphoreGive(semaphore_sdCardWrite);
  4018a2:	4b5b      	ldr	r3, [pc, #364]	; (401a10 <task_sdCardHandler+0x224>)
  4018a4:	681b      	ldr	r3, [r3, #0]
  4018a6:	4618      	mov	r0, r3
  4018a8:	2100      	movs	r1, #0
  4018aa:	2200      	movs	r2, #0
  4018ac:	2300      	movs	r3, #0
  4018ae:	4c64      	ldr	r4, [pc, #400]	; (401a40 <task_sdCardHandler+0x254>)
  4018b0:	47a0      	blx	r4
		}
		//if the close file flag is set, close the file. 
		if(closeLogFileFlag == 1)
  4018b2:	4b64      	ldr	r3, [pc, #400]	; (401a44 <task_sdCardHandler+0x258>)
  4018b4:	781b      	ldrb	r3, [r3, #0]
  4018b6:	2b01      	cmp	r3, #1
  4018b8:	d108      	bne.n	4018cc <task_sdCardHandler+0xe0>
		{
			f_close(&dataLogFile_obj); 
  4018ba:	4863      	ldr	r0, [pc, #396]	; (401a48 <task_sdCardHandler+0x25c>)
  4018bc:	4b63      	ldr	r3, [pc, #396]	; (401a4c <task_sdCardHandler+0x260>)
  4018be:	4798      	blx	r3
			dataLogFileOpen = false; 
  4018c0:	4b63      	ldr	r3, [pc, #396]	; (401a50 <task_sdCardHandler+0x264>)
  4018c2:	2200      	movs	r2, #0
  4018c4:	701a      	strb	r2, [r3, #0]
			//clear the flag. 
			closeLogFileFlag = 0;
  4018c6:	4b5f      	ldr	r3, [pc, #380]	; (401a44 <task_sdCardHandler+0x258>)
  4018c8:	2200      	movs	r2, #0
  4018ca:	701a      	strb	r2, [r3, #0]
		}
		if(closeDebugLogFileFlag == 1)
  4018cc:	4b61      	ldr	r3, [pc, #388]	; (401a54 <task_sdCardHandler+0x268>)
  4018ce:	781b      	ldrb	r3, [r3, #0]
  4018d0:	2b01      	cmp	r3, #1
  4018d2:	d108      	bne.n	4018e6 <task_sdCardHandler+0xfa>
		{
			f_close(&debugLogFile_Obj);
  4018d4:	4860      	ldr	r0, [pc, #384]	; (401a58 <task_sdCardHandler+0x26c>)
  4018d6:	4b5d      	ldr	r3, [pc, #372]	; (401a4c <task_sdCardHandler+0x260>)
  4018d8:	4798      	blx	r3
			debugLogFileOpen = false;
  4018da:	4b60      	ldr	r3, [pc, #384]	; (401a5c <task_sdCardHandler+0x270>)
  4018dc:	2200      	movs	r2, #0
  4018de:	701a      	strb	r2, [r3, #0]
			//clear the flag
			closeDebugLogFileFlag = 0;
  4018e0:	4b5c      	ldr	r3, [pc, #368]	; (401a54 <task_sdCardHandler+0x268>)
  4018e2:	2200      	movs	r2, #0
  4018e4:	701a      	strb	r2, [r3, #0]
		}
		
		if (debugLogFile_Obj.fsize >= DEBUG_LOG_MAX_FILE_SIZE)	//Check if the file is above its size limit
  4018e6:	4b5c      	ldr	r3, [pc, #368]	; (401a58 <task_sdCardHandler+0x26c>)
  4018e8:	68da      	ldr	r2, [r3, #12]
  4018ea:	4b5d      	ldr	r3, [pc, #372]	; (401a60 <task_sdCardHandler+0x274>)
  4018ec:	429a      	cmp	r2, r3
  4018ee:	d907      	bls.n	401900 <task_sdCardHandler+0x114>
		{
			//Close the current file
			f_close(&debugLogFile_Obj);
  4018f0:	4859      	ldr	r0, [pc, #356]	; (401a58 <task_sdCardHandler+0x26c>)
  4018f2:	4b56      	ldr	r3, [pc, #344]	; (401a4c <task_sdCardHandler+0x260>)
  4018f4:	4798      	blx	r3
			debugLogFileOpen = false;
  4018f6:	4b59      	ldr	r3, [pc, #356]	; (401a5c <task_sdCardHandler+0x270>)
  4018f8:	2200      	movs	r2, #0
  4018fa:	701a      	strb	r2, [r3, #0]
			//Rename and switch the file
			task_debugLog_OpenFile();
  4018fc:	4b59      	ldr	r3, [pc, #356]	; (401a64 <task_sdCardHandler+0x278>)
  4018fe:	4798      	blx	r3
		}
		
		if (xSemaphoreTake(semaphore_fatFsAccess, 1) == true)
  401900:	4b44      	ldr	r3, [pc, #272]	; (401a14 <task_sdCardHandler+0x228>)
  401902:	681b      	ldr	r3, [r3, #0]
  401904:	4618      	mov	r0, r3
  401906:	2100      	movs	r1, #0
  401908:	2201      	movs	r2, #1
  40190a:	2300      	movs	r3, #0
  40190c:	4c44      	ldr	r4, [pc, #272]	; (401a20 <task_sdCardHandler+0x234>)
  40190e:	47a0      	blx	r4
  401910:	4603      	mov	r3, r0
  401912:	2b01      	cmp	r3, #1
  401914:	f040 80ef 	bne.w	401af6 <task_sdCardHandler+0x30a>
		{
			//if the data file is open, then write to log
			if(dataLogFileOpen)
  401918:	4b4d      	ldr	r3, [pc, #308]	; (401a50 <task_sdCardHandler+0x264>)
  40191a:	781b      	ldrb	r3, [r3, #0]
  40191c:	b2db      	uxtb	r3, r3
  40191e:	2b00      	cmp	r3, #0
  401920:	d048      	beq.n	4019b4 <task_sdCardHandler+0x1c8>
			{	
				if(numBytesToWrite > 0)
  401922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401924:	2b00      	cmp	r3, #0
  401926:	d045      	beq.n	4019b4 <task_sdCardHandler+0x1c8>
				{
					numBytesWritten = 0;			
  401928:	2300      	movs	r3, #0
  40192a:	623b      	str	r3, [r7, #32]
					while(numBytesToWrite > 0)
  40192c:	e02e      	b.n	40198c <task_sdCardHandler+0x1a0>
					{			
						res = f_write(&dataLogFile_obj,  (void*)(tempBuf+numBytesWritten), numBytesToWrite, &numBytes);
  40192e:	6a3a      	ldr	r2, [r7, #32]
  401930:	4b3d      	ldr	r3, [pc, #244]	; (401a28 <task_sdCardHandler+0x23c>)
  401932:	441a      	add	r2, r3
  401934:	f107 030c 	add.w	r3, r7, #12
  401938:	4843      	ldr	r0, [pc, #268]	; (401a48 <task_sdCardHandler+0x25c>)
  40193a:	4611      	mov	r1, r2
  40193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40193e:	4c4a      	ldr	r4, [pc, #296]	; (401a68 <task_sdCardHandler+0x27c>)
  401940:	47a0      	blx	r4
  401942:	4603      	mov	r3, r0
  401944:	461a      	mov	r2, r3
  401946:	4b49      	ldr	r3, [pc, #292]	; (401a6c <task_sdCardHandler+0x280>)
  401948:	701a      	strb	r2, [r3, #0]
						if (res != FR_OK)
  40194a:	4b48      	ldr	r3, [pc, #288]	; (401a6c <task_sdCardHandler+0x280>)
  40194c:	781b      	ldrb	r3, [r3, #0]
  40194e:	2b00      	cmp	r3, #0
  401950:	d00b      	beq.n	40196a <task_sdCardHandler+0x17e>
						{								
							if(res == FR_DISK_ERR)
  401952:	4b46      	ldr	r3, [pc, #280]	; (401a6c <task_sdCardHandler+0x280>)
  401954:	781b      	ldrb	r3, [r3, #0]
  401956:	2b01      	cmp	r3, #1
  401958:	d103      	bne.n	401962 <task_sdCardHandler+0x176>
							{
								debugPrintString("Write to log file failed: Disk Error\r\n");	
  40195a:	4845      	ldr	r0, [pc, #276]	; (401a70 <task_sdCardHandler+0x284>)
  40195c:	4b45      	ldr	r3, [pc, #276]	; (401a74 <task_sdCardHandler+0x288>)
  40195e:	4798      	blx	r3
							else
							{
								debugPrintString("Write to log file failed\r\n");	
							}
							//this is a serious error, break the loop. 								
							break; 
  401960:	e017      	b.n	401992 <task_sdCardHandler+0x1a6>
							{
								debugPrintString("Write to log file failed: Disk Error\r\n");	
							}
							else
							{
								debugPrintString("Write to log file failed\r\n");	
  401962:	4845      	ldr	r0, [pc, #276]	; (401a78 <task_sdCardHandler+0x28c>)
  401964:	4b43      	ldr	r3, [pc, #268]	; (401a74 <task_sdCardHandler+0x288>)
  401966:	4798      	blx	r3
							}
							//this is a serious error, break the loop. 								
							break; 
  401968:	e013      	b.n	401992 <task_sdCardHandler+0x1a6>
						}				
						numBytesToWrite -= numBytes;
  40196a:	68fb      	ldr	r3, [r7, #12]
  40196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40196e:	1ad3      	subs	r3, r2, r3
  401970:	627b      	str	r3, [r7, #36]	; 0x24
						numBytesWritten += numBytes;
  401972:	68fb      	ldr	r3, [r7, #12]
  401974:	6a3a      	ldr	r2, [r7, #32]
  401976:	4413      	add	r3, r2
  401978:	623b      	str	r3, [r7, #32]
						totalBytesWritten += numBytes;
  40197a:	4b40      	ldr	r3, [pc, #256]	; (401a7c <task_sdCardHandler+0x290>)
  40197c:	681a      	ldr	r2, [r3, #0]
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	441a      	add	r2, r3
  401982:	4b3e      	ldr	r3, [pc, #248]	; (401a7c <task_sdCardHandler+0x290>)
  401984:	601a      	str	r2, [r3, #0]
						vTaskDelay(1);
  401986:	2001      	movs	r0, #1
  401988:	4b3d      	ldr	r3, [pc, #244]	; (401a80 <task_sdCardHandler+0x294>)
  40198a:	4798      	blx	r3
			if(dataLogFileOpen)
			{	
				if(numBytesToWrite > 0)
				{
					numBytesWritten = 0;			
					while(numBytesToWrite > 0)
  40198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40198e:	2b00      	cmp	r3, #0
  401990:	d1cd      	bne.n	40192e <task_sdCardHandler+0x142>
						numBytesToWrite -= numBytes;
						numBytesWritten += numBytes;
						totalBytesWritten += numBytes;
						vTaskDelay(1);
					}
					res = f_sync(&dataLogFile_obj); //sync the file
  401992:	482d      	ldr	r0, [pc, #180]	; (401a48 <task_sdCardHandler+0x25c>)
  401994:	4b3b      	ldr	r3, [pc, #236]	; (401a84 <task_sdCardHandler+0x298>)
  401996:	4798      	blx	r3
  401998:	4603      	mov	r3, r0
  40199a:	461a      	mov	r2, r3
  40199c:	4b33      	ldr	r3, [pc, #204]	; (401a6c <task_sdCardHandler+0x280>)
  40199e:	701a      	strb	r2, [r3, #0]
					if(res != FR_OK)
  4019a0:	4b32      	ldr	r3, [pc, #200]	; (401a6c <task_sdCardHandler+0x280>)
  4019a2:	781b      	ldrb	r3, [r3, #0]
  4019a4:	2b00      	cmp	r3, #0
  4019a6:	d002      	beq.n	4019ae <task_sdCardHandler+0x1c2>
					{
						debugPrintString("file sync failed\r\n");
  4019a8:	4837      	ldr	r0, [pc, #220]	; (401a88 <task_sdCardHandler+0x29c>)
  4019aa:	4b32      	ldr	r3, [pc, #200]	; (401a74 <task_sdCardHandler+0x288>)
  4019ac:	4798      	blx	r3
					}
					vTaskDelay(1);
  4019ae:	2001      	movs	r0, #1
  4019b0:	4b33      	ldr	r3, [pc, #204]	; (401a80 <task_sdCardHandler+0x294>)
  4019b2:	4798      	blx	r3
				}
			}
		
			if(debugLogFileOpen)
  4019b4:	4b29      	ldr	r3, [pc, #164]	; (401a5c <task_sdCardHandler+0x270>)
  4019b6:	781b      	ldrb	r3, [r3, #0]
  4019b8:	b2db      	uxtb	r3, r3
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	f000 8092 	beq.w	401ae4 <task_sdCardHandler+0x2f8>
			{
				if(debugNumBytesToWrite > 0)
  4019c0:	69fb      	ldr	r3, [r7, #28]
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	f000 808e 	beq.w	401ae4 <task_sdCardHandler+0x2f8>
				{
					debugNumBytesWritten = 0;
  4019c8:	2300      	movs	r3, #0
  4019ca:	61bb      	str	r3, [r7, #24]
					while(debugNumBytesToWrite > 0)
  4019cc:	e073      	b.n	401ab6 <task_sdCardHandler+0x2ca>
					{
						res = f_write(&debugLogFile_Obj,  (void*)(debugLogTempBuf+debugNumBytesWritten), debugNumBytesToWrite, &debugNumBytes);
  4019ce:	69ba      	ldr	r2, [r7, #24]
  4019d0:	4b19      	ldr	r3, [pc, #100]	; (401a38 <task_sdCardHandler+0x24c>)
  4019d2:	441a      	add	r2, r3
  4019d4:	f107 0308 	add.w	r3, r7, #8
  4019d8:	481f      	ldr	r0, [pc, #124]	; (401a58 <task_sdCardHandler+0x26c>)
  4019da:	4611      	mov	r1, r2
  4019dc:	69fa      	ldr	r2, [r7, #28]
  4019de:	4c22      	ldr	r4, [pc, #136]	; (401a68 <task_sdCardHandler+0x27c>)
  4019e0:	47a0      	blx	r4
  4019e2:	4603      	mov	r3, r0
  4019e4:	461a      	mov	r2, r3
  4019e6:	4b21      	ldr	r3, [pc, #132]	; (401a6c <task_sdCardHandler+0x280>)
  4019e8:	701a      	strb	r2, [r3, #0]
						if (res != FR_OK)
  4019ea:	4b20      	ldr	r3, [pc, #128]	; (401a6c <task_sdCardHandler+0x280>)
  4019ec:	781b      	ldrb	r3, [r3, #0]
  4019ee:	2b00      	cmp	r3, #0
  4019f0:	d050      	beq.n	401a94 <task_sdCardHandler+0x2a8>
						{								
							if(res == FR_DISK_ERR)
  4019f2:	4b1e      	ldr	r3, [pc, #120]	; (401a6c <task_sdCardHandler+0x280>)
  4019f4:	781b      	ldrb	r3, [r3, #0]
  4019f6:	2b01      	cmp	r3, #1
  4019f8:	d103      	bne.n	401a02 <task_sdCardHandler+0x216>
							{
								debugPrintString("Write to debug log file failed: Disk Error\r\n");	
  4019fa:	4824      	ldr	r0, [pc, #144]	; (401a8c <task_sdCardHandler+0x2a0>)
  4019fc:	4b1d      	ldr	r3, [pc, #116]	; (401a74 <task_sdCardHandler+0x288>)
  4019fe:	4798      	blx	r3
							else
							{
								debugPrintString("Write to debug log file failed\r\n");	
							}
							//this is a serious error, break the loop. 								
							break; 
  401a00:	e05c      	b.n	401abc <task_sdCardHandler+0x2d0>
							{
								debugPrintString("Write to debug log file failed: Disk Error\r\n");	
							}
							else
							{
								debugPrintString("Write to debug log file failed\r\n");	
  401a02:	4823      	ldr	r0, [pc, #140]	; (401a90 <task_sdCardHandler+0x2a4>)
  401a04:	4b1b      	ldr	r3, [pc, #108]	; (401a74 <task_sdCardHandler+0x288>)
  401a06:	4798      	blx	r3
							}
							//this is a serious error, break the loop. 								
							break; 
  401a08:	e058      	b.n	401abc <task_sdCardHandler+0x2d0>
  401a0a:	bf00      	nop
  401a0c:	0040a98d 	.word	0x0040a98d
  401a10:	200014d8 	.word	0x200014d8
  401a14:	200014dc 	.word	0x200014dc
  401a18:	200030f4 	.word	0x200030f4
  401a1c:	200039dc 	.word	0x200039dc
  401a20:	0040abd5 	.word	0x0040abd5
  401a24:	200022e0 	.word	0x200022e0
  401a28:	200022f0 	.word	0x200022f0
  401a2c:	200014e0 	.word	0x200014e0
  401a30:	00412f69 	.word	0x00412f69
  401a34:	200022e4 	.word	0x200022e4
  401a38:	20002ef0 	.word	0x20002ef0
  401a3c:	200020e0 	.word	0x200020e0
  401a40:	0040aa11 	.word	0x0040aa11
  401a44:	200030f2 	.word	0x200030f2
  401a48:	20003c4c 	.word	0x20003c4c
  401a4c:	004094f5 	.word	0x004094f5
  401a50:	200030f0 	.word	0x200030f0
  401a54:	200030f3 	.word	0x200030f3
  401a58:	20003a24 	.word	0x20003a24
  401a5c:	200030f1 	.word	0x200030f1
  401a60:	001e847f 	.word	0x001e847f
  401a64:	00402105 	.word	0x00402105
  401a68:	00409029 	.word	0x00409029
  401a6c:	2000318c 	.word	0x2000318c
  401a70:	0041c3c0 	.word	0x0041c3c0
  401a74:	004016d5 	.word	0x004016d5
  401a78:	0041c3e8 	.word	0x0041c3e8
  401a7c:	200022e8 	.word	0x200022e8
  401a80:	0040b24d 	.word	0x0040b24d
  401a84:	0040935d 	.word	0x0040935d
  401a88:	0041c404 	.word	0x0041c404
  401a8c:	0041c418 	.word	0x0041c418
  401a90:	0041c448 	.word	0x0041c448
						}					
						debugNumBytesToWrite -= debugNumBytes;
  401a94:	68bb      	ldr	r3, [r7, #8]
  401a96:	69fa      	ldr	r2, [r7, #28]
  401a98:	1ad3      	subs	r3, r2, r3
  401a9a:	61fb      	str	r3, [r7, #28]
						debugNumBytesWritten += debugNumBytes;
  401a9c:	68bb      	ldr	r3, [r7, #8]
  401a9e:	69ba      	ldr	r2, [r7, #24]
  401aa0:	4413      	add	r3, r2
  401aa2:	61bb      	str	r3, [r7, #24]
						debugLogTotalBytesWritten += debugNumBytes;
  401aa4:	4b26      	ldr	r3, [pc, #152]	; (401b40 <task_sdCardHandler+0x354>)
  401aa6:	681a      	ldr	r2, [r3, #0]
  401aa8:	68bb      	ldr	r3, [r7, #8]
  401aaa:	441a      	add	r2, r3
  401aac:	4b24      	ldr	r3, [pc, #144]	; (401b40 <task_sdCardHandler+0x354>)
  401aae:	601a      	str	r2, [r3, #0]
						vTaskDelay(1);
  401ab0:	2001      	movs	r0, #1
  401ab2:	4b24      	ldr	r3, [pc, #144]	; (401b44 <task_sdCardHandler+0x358>)
  401ab4:	4798      	blx	r3
			if(debugLogFileOpen)
			{
				if(debugNumBytesToWrite > 0)
				{
					debugNumBytesWritten = 0;
					while(debugNumBytesToWrite > 0)
  401ab6:	69fb      	ldr	r3, [r7, #28]
  401ab8:	2b00      	cmp	r3, #0
  401aba:	d188      	bne.n	4019ce <task_sdCardHandler+0x1e2>
						debugNumBytesToWrite -= debugNumBytes;
						debugNumBytesWritten += debugNumBytes;
						debugLogTotalBytesWritten += debugNumBytes;
						vTaskDelay(1);
					}
					res = f_sync(&debugLogFile_Obj); //sync the file
  401abc:	4822      	ldr	r0, [pc, #136]	; (401b48 <task_sdCardHandler+0x35c>)
  401abe:	4b23      	ldr	r3, [pc, #140]	; (401b4c <task_sdCardHandler+0x360>)
  401ac0:	4798      	blx	r3
  401ac2:	4603      	mov	r3, r0
  401ac4:	461a      	mov	r2, r3
  401ac6:	4b22      	ldr	r3, [pc, #136]	; (401b50 <task_sdCardHandler+0x364>)
  401ac8:	701a      	strb	r2, [r3, #0]
					if(res != FR_OK)
  401aca:	4b21      	ldr	r3, [pc, #132]	; (401b50 <task_sdCardHandler+0x364>)
  401acc:	781b      	ldrb	r3, [r3, #0]
  401ace:	2b00      	cmp	r3, #0
  401ad0:	d005      	beq.n	401ade <task_sdCardHandler+0x2f2>
					{
						printf("debug sync failed with code %d\r\n", res);
  401ad2:	4b1f      	ldr	r3, [pc, #124]	; (401b50 <task_sdCardHandler+0x364>)
  401ad4:	781b      	ldrb	r3, [r3, #0]
  401ad6:	481f      	ldr	r0, [pc, #124]	; (401b54 <task_sdCardHandler+0x368>)
  401ad8:	4619      	mov	r1, r3
  401ada:	4b1f      	ldr	r3, [pc, #124]	; (401b58 <task_sdCardHandler+0x36c>)
  401adc:	4798      	blx	r3
					}
					vTaskDelay(1);
  401ade:	2001      	movs	r0, #1
  401ae0:	4b18      	ldr	r3, [pc, #96]	; (401b44 <task_sdCardHandler+0x358>)
  401ae2:	4798      	blx	r3
				}
			}
			xSemaphoreGive(semaphore_fatFsAccess);
  401ae4:	4b1d      	ldr	r3, [pc, #116]	; (401b5c <task_sdCardHandler+0x370>)
  401ae6:	681b      	ldr	r3, [r3, #0]
  401ae8:	4618      	mov	r0, r3
  401aea:	2100      	movs	r1, #0
  401aec:	2200      	movs	r2, #0
  401aee:	2300      	movs	r3, #0
  401af0:	4c1b      	ldr	r4, [pc, #108]	; (401b60 <task_sdCardHandler+0x374>)
  401af2:	47a0      	blx	r4
  401af4:	e002      	b.n	401afc <task_sdCardHandler+0x310>
		}
		else
		{
			debugPrintString("Waiting for semaphore to write to SD-card\r\n");
  401af6:	481b      	ldr	r0, [pc, #108]	; (401b64 <task_sdCardHandler+0x378>)
  401af8:	4b1b      	ldr	r3, [pc, #108]	; (401b68 <task_sdCardHandler+0x37c>)
  401afa:	4798      	blx	r3
		}
		if(brainSettings.debugPrintsEnabled)
  401afc:	4b1b      	ldr	r3, [pc, #108]	; (401b6c <task_sdCardHandler+0x380>)
  401afe:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
  401b02:	2b00      	cmp	r3, #0
  401b04:	d010      	beq.n	401b28 <task_sdCardHandler+0x33c>
		{		
			if((sgSysTickCount - writeStart) > maxWriteTime)
  401b06:	4b1a      	ldr	r3, [pc, #104]	; (401b70 <task_sdCardHandler+0x384>)
  401b08:	681a      	ldr	r2, [r3, #0]
  401b0a:	693b      	ldr	r3, [r7, #16]
  401b0c:	1ad2      	subs	r2, r2, r3
  401b0e:	697b      	ldr	r3, [r7, #20]
  401b10:	429a      	cmp	r2, r3
  401b12:	d909      	bls.n	401b28 <task_sdCardHandler+0x33c>
			{
				maxWriteTime = sgSysTickCount - writeStart; 
  401b14:	4b16      	ldr	r3, [pc, #88]	; (401b70 <task_sdCardHandler+0x384>)
  401b16:	681a      	ldr	r2, [r3, #0]
  401b18:	693b      	ldr	r3, [r7, #16]
  401b1a:	1ad3      	subs	r3, r2, r3
  401b1c:	617b      	str	r3, [r7, #20]
				debugPrintStringInt("new max write Time\r\n",maxWriteTime);
  401b1e:	697b      	ldr	r3, [r7, #20]
  401b20:	4814      	ldr	r0, [pc, #80]	; (401b74 <task_sdCardHandler+0x388>)
  401b22:	4619      	mov	r1, r3
  401b24:	4b14      	ldr	r3, [pc, #80]	; (401b78 <task_sdCardHandler+0x38c>)
  401b26:	4798      	blx	r3
			}
		}
		//only delay if the write time was less than 200, or else we'll get a buffer error. 
		if((sgSysTickCount - writeStart) < 200)
  401b28:	4b11      	ldr	r3, [pc, #68]	; (401b70 <task_sdCardHandler+0x384>)
  401b2a:	681a      	ldr	r2, [r3, #0]
  401b2c:	693b      	ldr	r3, [r7, #16]
  401b2e:	1ad3      	subs	r3, r2, r3
  401b30:	2bc7      	cmp	r3, #199	; 0xc7
  401b32:	d803      	bhi.n	401b3c <task_sdCardHandler+0x350>
		{
			vTaskDelay(100);
  401b34:	2064      	movs	r0, #100	; 0x64
  401b36:	4b03      	ldr	r3, [pc, #12]	; (401b44 <task_sdCardHandler+0x358>)
  401b38:	4798      	blx	r3
		}
		
		
	}
  401b3a:	e678      	b.n	40182e <task_sdCardHandler+0x42>
  401b3c:	e677      	b.n	40182e <task_sdCardHandler+0x42>
  401b3e:	bf00      	nop
  401b40:	200022ec 	.word	0x200022ec
  401b44:	0040b24d 	.word	0x0040b24d
  401b48:	20003a24 	.word	0x20003a24
  401b4c:	0040935d 	.word	0x0040935d
  401b50:	2000318c 	.word	0x2000318c
  401b54:	0041c46c 	.word	0x0041c46c
  401b58:	004129e9 	.word	0x004129e9
  401b5c:	200014dc 	.word	0x200014dc
  401b60:	0040aa11 	.word	0x0040aa11
  401b64:	0041c490 	.word	0x0041c490
  401b68:	004016d5 	.word	0x004016d5
  401b6c:	20000220 	.word	0x20000220
  401b70:	200039dc 	.word	0x200039dc
  401b74:	0041c4bc 	.word	0x0041c4bc
  401b78:	004015c1 	.word	0x004015c1

00401b7c <task_sdCardWriteEntry>:
}
status_t task_sdCardWriteEntry(char* entry, size_t length)
{
  401b7c:	b590      	push	{r4, r7, lr}
  401b7e:	b085      	sub	sp, #20
  401b80:	af00      	add	r7, sp, #0
  401b82:	6078      	str	r0, [r7, #4]
  401b84:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS; 
  401b86:	2300      	movs	r3, #0
  401b88:	73fb      	strb	r3, [r7, #15]
	
	//take the semaphore	
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
  401b8a:	4b2d      	ldr	r3, [pc, #180]	; (401c40 <task_sdCardWriteEntry+0xc4>)
  401b8c:	681b      	ldr	r3, [r3, #0]
  401b8e:	4618      	mov	r0, r3
  401b90:	2100      	movs	r1, #0
  401b92:	2205      	movs	r2, #5
  401b94:	2300      	movs	r3, #0
  401b96:	4c2b      	ldr	r4, [pc, #172]	; (401c44 <task_sdCardWriteEntry+0xc8>)
  401b98:	47a0      	blx	r4
  401b9a:	4603      	mov	r3, r0
  401b9c:	2b01      	cmp	r3, #1
  401b9e:	d145      	bne.n	401c2c <task_sdCardWriteEntry+0xb0>
	{
		//copy data to sdCard buffer, make sure we have room first
		if(sdCardBufferPointer + length < SD_CARD_BUFFER_SIZE)
  401ba0:	4b29      	ldr	r3, [pc, #164]	; (401c48 <task_sdCardWriteEntry+0xcc>)
  401ba2:	681a      	ldr	r2, [r3, #0]
  401ba4:	683b      	ldr	r3, [r7, #0]
  401ba6:	4413      	add	r3, r2
  401ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  401bac:	d22d      	bcs.n	401c0a <task_sdCardWriteEntry+0x8e>
		{
			if(nvmSettings.enableCsvFormat == 0)
  401bae:	4b27      	ldr	r3, [pc, #156]	; (401c4c <task_sdCardWriteEntry+0xd0>)
  401bb0:	691b      	ldr	r3, [r3, #16]
  401bb2:	2b00      	cmp	r3, #0
  401bb4:	d119      	bne.n	401bea <task_sdCardWriteEntry+0x6e>
			{
				int i = 0;
  401bb6:	2300      	movs	r3, #0
  401bb8:	60bb      	str	r3, [r7, #8]
				for(i=0; i<length; i++)
  401bba:	2300      	movs	r3, #0
  401bbc:	60bb      	str	r3, [r7, #8]
  401bbe:	e00f      	b.n	401be0 <task_sdCardWriteEntry+0x64>
				{
					(sdCardBuffer+sdCardBufferPointer)[i] = entry[i] + 0x80; //add 128 to make it not ascii
  401bc0:	4b21      	ldr	r3, [pc, #132]	; (401c48 <task_sdCardWriteEntry+0xcc>)
  401bc2:	681a      	ldr	r2, [r3, #0]
  401bc4:	68bb      	ldr	r3, [r7, #8]
  401bc6:	441a      	add	r2, r3
  401bc8:	4b21      	ldr	r3, [pc, #132]	; (401c50 <task_sdCardWriteEntry+0xd4>)
  401bca:	4413      	add	r3, r2
  401bcc:	68ba      	ldr	r2, [r7, #8]
  401bce:	6879      	ldr	r1, [r7, #4]
  401bd0:	440a      	add	r2, r1
  401bd2:	7812      	ldrb	r2, [r2, #0]
  401bd4:	3a80      	subs	r2, #128	; 0x80
  401bd6:	b2d2      	uxtb	r2, r2
  401bd8:	701a      	strb	r2, [r3, #0]
		if(sdCardBufferPointer + length < SD_CARD_BUFFER_SIZE)
		{
			if(nvmSettings.enableCsvFormat == 0)
			{
				int i = 0;
				for(i=0; i<length; i++)
  401bda:	68bb      	ldr	r3, [r7, #8]
  401bdc:	3301      	adds	r3, #1
  401bde:	60bb      	str	r3, [r7, #8]
  401be0:	68ba      	ldr	r2, [r7, #8]
  401be2:	683b      	ldr	r3, [r7, #0]
  401be4:	429a      	cmp	r2, r3
  401be6:	d3eb      	bcc.n	401bc0 <task_sdCardWriteEntry+0x44>
  401be8:	e008      	b.n	401bfc <task_sdCardWriteEntry+0x80>
					(sdCardBuffer+sdCardBufferPointer)[i] = entry[i] + 0x80; //add 128 to make it not ascii
				}
			}
			else
			{
				memcpy(sdCardBuffer+sdCardBufferPointer,entry,length);
  401bea:	4b17      	ldr	r3, [pc, #92]	; (401c48 <task_sdCardWriteEntry+0xcc>)
  401bec:	681a      	ldr	r2, [r3, #0]
  401bee:	4b18      	ldr	r3, [pc, #96]	; (401c50 <task_sdCardWriteEntry+0xd4>)
  401bf0:	4413      	add	r3, r2
  401bf2:	4618      	mov	r0, r3
  401bf4:	6879      	ldr	r1, [r7, #4]
  401bf6:	683a      	ldr	r2, [r7, #0]
  401bf8:	4b16      	ldr	r3, [pc, #88]	; (401c54 <task_sdCardWriteEntry+0xd8>)
  401bfa:	4798      	blx	r3
			}
			sdCardBufferPointer += length;
  401bfc:	4b12      	ldr	r3, [pc, #72]	; (401c48 <task_sdCardWriteEntry+0xcc>)
  401bfe:	681a      	ldr	r2, [r3, #0]
  401c00:	683b      	ldr	r3, [r7, #0]
  401c02:	441a      	add	r2, r3
  401c04:	4b10      	ldr	r3, [pc, #64]	; (401c48 <task_sdCardWriteEntry+0xcc>)
  401c06:	601a      	str	r2, [r3, #0]
  401c08:	e001      	b.n	401c0e <task_sdCardWriteEntry+0x92>
		}
		else
		{
			status = STATUS_FAIL;
  401c0a:	2301      	movs	r3, #1
  401c0c:	73fb      	strb	r3, [r7, #15]
			
		}
		xSemaphoreGive(semaphore_sdCardWrite);
  401c0e:	4b0c      	ldr	r3, [pc, #48]	; (401c40 <task_sdCardWriteEntry+0xc4>)
  401c10:	681b      	ldr	r3, [r3, #0]
  401c12:	4618      	mov	r0, r3
  401c14:	2100      	movs	r1, #0
  401c16:	2200      	movs	r2, #0
  401c18:	2300      	movs	r3, #0
  401c1a:	4c0f      	ldr	r4, [pc, #60]	; (401c58 <task_sdCardWriteEntry+0xdc>)
  401c1c:	47a0      	blx	r4
		if(status == STATUS_FAIL)
  401c1e:	7bfb      	ldrb	r3, [r7, #15]
  401c20:	2b01      	cmp	r3, #1
  401c22:	d108      	bne.n	401c36 <task_sdCardWriteEntry+0xba>
		{
			debugPrintString("Write failed: Buffer full\r\n");
  401c24:	480d      	ldr	r0, [pc, #52]	; (401c5c <task_sdCardWriteEntry+0xe0>)
  401c26:	4b0e      	ldr	r3, [pc, #56]	; (401c60 <task_sdCardWriteEntry+0xe4>)
  401c28:	4798      	blx	r3
  401c2a:	e004      	b.n	401c36 <task_sdCardWriteEntry+0xba>
		}
	}
	else
	{		
		status = STATUS_FAIL; 
  401c2c:	2301      	movs	r3, #1
  401c2e:	73fb      	strb	r3, [r7, #15]
		debugPrintString("Write failed: semaphore locked\r\n");
  401c30:	480c      	ldr	r0, [pc, #48]	; (401c64 <task_sdCardWriteEntry+0xe8>)
  401c32:	4b0b      	ldr	r3, [pc, #44]	; (401c60 <task_sdCardWriteEntry+0xe4>)
  401c34:	4798      	blx	r3
	}	

	return status; 
  401c36:	7bfb      	ldrb	r3, [r7, #15]
}
  401c38:	4618      	mov	r0, r3
  401c3a:	3714      	adds	r7, #20
  401c3c:	46bd      	mov	sp, r7
  401c3e:	bd90      	pop	{r4, r7, pc}
  401c40:	200014d8 	.word	0x200014d8
  401c44:	0040abd5 	.word	0x0040abd5
  401c48:	200022e0 	.word	0x200022e0
  401c4c:	20003e80 	.word	0x20003e80
  401c50:	200014e0 	.word	0x200014e0
  401c54:	00412f69 	.word	0x00412f69
  401c58:	0040aa11 	.word	0x0040aa11
  401c5c:	0041c4d4 	.word	0x0041c4d4
  401c60:	004016d5 	.word	0x004016d5
  401c64:	0041c4f0 	.word	0x0041c4f0

00401c68 <task_debugLogWriteEntry>:

status_t task_debugLogWriteEntry(char* entry, size_t length)
{
  401c68:	b590      	push	{r4, r7, lr}
  401c6a:	b085      	sub	sp, #20
  401c6c:	af00      	add	r7, sp, #0
  401c6e:	6078      	str	r0, [r7, #4]
  401c70:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  401c72:	2300      	movs	r3, #0
  401c74:	73fb      	strb	r3, [r7, #15]
	//take the semaphore
	if(semaphore_sdCardWrite == NULL)
  401c76:	4b1d      	ldr	r3, [pc, #116]	; (401cec <task_debugLogWriteEntry+0x84>)
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d101      	bne.n	401c82 <task_debugLogWriteEntry+0x1a>
	{
		return STATUS_FAIL; 
  401c7e:	2301      	movs	r3, #1
  401c80:	e02f      	b.n	401ce2 <task_debugLogWriteEntry+0x7a>
	}	
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
  401c82:	4b1a      	ldr	r3, [pc, #104]	; (401cec <task_debugLogWriteEntry+0x84>)
  401c84:	681b      	ldr	r3, [r3, #0]
  401c86:	4618      	mov	r0, r3
  401c88:	2100      	movs	r1, #0
  401c8a:	2205      	movs	r2, #5
  401c8c:	2300      	movs	r3, #0
  401c8e:	4c18      	ldr	r4, [pc, #96]	; (401cf0 <task_debugLogWriteEntry+0x88>)
  401c90:	47a0      	blx	r4
  401c92:	4603      	mov	r3, r0
  401c94:	2b01      	cmp	r3, #1
  401c96:	d121      	bne.n	401cdc <task_debugLogWriteEntry+0x74>
	{
		//copy data to sdCard buffer, make sure we have room first
		if(debugLogBufferPointer + length < DEBUG_LOG_BUFFER_SIZE)
  401c98:	4b16      	ldr	r3, [pc, #88]	; (401cf4 <task_debugLogWriteEntry+0x8c>)
  401c9a:	681a      	ldr	r2, [r3, #0]
  401c9c:	683b      	ldr	r3, [r7, #0]
  401c9e:	4413      	add	r3, r2
  401ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401ca4:	d20f      	bcs.n	401cc6 <task_debugLogWriteEntry+0x5e>
		{
			memcpy(debugLogBuffer+debugLogBufferPointer,entry,length);
  401ca6:	4b13      	ldr	r3, [pc, #76]	; (401cf4 <task_debugLogWriteEntry+0x8c>)
  401ca8:	681a      	ldr	r2, [r3, #0]
  401caa:	4b13      	ldr	r3, [pc, #76]	; (401cf8 <task_debugLogWriteEntry+0x90>)
  401cac:	4413      	add	r3, r2
  401cae:	4618      	mov	r0, r3
  401cb0:	6879      	ldr	r1, [r7, #4]
  401cb2:	683a      	ldr	r2, [r7, #0]
  401cb4:	4b11      	ldr	r3, [pc, #68]	; (401cfc <task_debugLogWriteEntry+0x94>)
  401cb6:	4798      	blx	r3
			debugLogBufferPointer += length;
  401cb8:	4b0e      	ldr	r3, [pc, #56]	; (401cf4 <task_debugLogWriteEntry+0x8c>)
  401cba:	681a      	ldr	r2, [r3, #0]
  401cbc:	683b      	ldr	r3, [r7, #0]
  401cbe:	441a      	add	r2, r3
  401cc0:	4b0c      	ldr	r3, [pc, #48]	; (401cf4 <task_debugLogWriteEntry+0x8c>)
  401cc2:	601a      	str	r2, [r3, #0]
  401cc4:	e001      	b.n	401cca <task_debugLogWriteEntry+0x62>
		}
		else
		{
			status = STATUS_FAIL;
  401cc6:	2301      	movs	r3, #1
  401cc8:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGive(semaphore_sdCardWrite);
  401cca:	4b08      	ldr	r3, [pc, #32]	; (401cec <task_debugLogWriteEntry+0x84>)
  401ccc:	681b      	ldr	r3, [r3, #0]
  401cce:	4618      	mov	r0, r3
  401cd0:	2100      	movs	r1, #0
  401cd2:	2200      	movs	r2, #0
  401cd4:	2300      	movs	r3, #0
  401cd6:	4c0a      	ldr	r4, [pc, #40]	; (401d00 <task_debugLogWriteEntry+0x98>)
  401cd8:	47a0      	blx	r4
  401cda:	e001      	b.n	401ce0 <task_debugLogWriteEntry+0x78>
	}
	else
	{
		status = STATUS_FAIL;
  401cdc:	2301      	movs	r3, #1
  401cde:	73fb      	strb	r3, [r7, #15]
	}	
	return status;
  401ce0:	7bfb      	ldrb	r3, [r7, #15]
	
}
  401ce2:	4618      	mov	r0, r3
  401ce4:	3714      	adds	r7, #20
  401ce6:	46bd      	mov	sp, r7
  401ce8:	bd90      	pop	{r4, r7, pc}
  401cea:	bf00      	nop
  401cec:	200014d8 	.word	0x200014d8
  401cf0:	0040abd5 	.word	0x0040abd5
  401cf4:	200022e4 	.word	0x200022e4
  401cf8:	200020e0 	.word	0x200020e0
  401cfc:	00412f69 	.word	0x00412f69
  401d00:	0040aa11 	.word	0x0040aa11

00401d04 <task_sdCard_OpenNewFile>:

status_t task_sdCard_OpenNewFile()
{
  401d04:	b5b0      	push	{r4, r5, r7, lr}
  401d06:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
  401d0a:	af04      	add	r7, sp, #16
	uint8_t data_buffer[100], vFileIndexAlgoCount = 0;
  401d0c:	2300      	movs	r3, #0
  401d0e:	f887 356e 	strb.w	r3, [r7, #1390]	; 0x56e
	char fileIndexLog[SD_CARD_FILENAME_LENGTH] = "0:logIndex.dat";
  401d12:	f507 658b 	add.w	r5, r7, #1112	; 0x458
  401d16:	4b9b      	ldr	r3, [pc, #620]	; (401f84 <task_sdCard_OpenNewFile+0x280>)
  401d18:	462c      	mov	r4, r5
  401d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401d1c:	c407      	stmia	r4!, {r0, r1, r2}
  401d1e:	8023      	strh	r3, [r4, #0]
  401d20:	3402      	adds	r4, #2
  401d22:	0c1b      	lsrs	r3, r3, #16
  401d24:	7023      	strb	r3, [r4, #0]
  401d26:	f105 020f 	add.w	r2, r5, #15
  401d2a:	2387      	movs	r3, #135	; 0x87
  401d2c:	4610      	mov	r0, r2
  401d2e:	2100      	movs	r1, #0
  401d30:	461a      	mov	r2, r3
  401d32:	4b95      	ldr	r3, [pc, #596]	; (401f88 <task_sdCard_OpenNewFile+0x284>)
  401d34:	4798      	blx	r3
	char dirName[SD_CARD_FILENAME_LENGTH] = "0:MovementLog"; 
  401d36:	f507 7570 	add.w	r5, r7, #960	; 0x3c0
  401d3a:	4b94      	ldr	r3, [pc, #592]	; (401f8c <task_sdCard_OpenNewFile+0x288>)
  401d3c:	462c      	mov	r4, r5
  401d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401d40:	c407      	stmia	r4!, {r0, r1, r2}
  401d42:	8023      	strh	r3, [r4, #0]
  401d44:	f105 020e 	add.w	r2, r5, #14
  401d48:	2388      	movs	r3, #136	; 0x88
  401d4a:	4610      	mov	r0, r2
  401d4c:	2100      	movs	r1, #0
  401d4e:	461a      	mov	r2, r3
  401d50:	4b8d      	ldr	r3, [pc, #564]	; (401f88 <task_sdCard_OpenNewFile+0x284>)
  401d52:	4798      	blx	r3
	char dirPath[] = "0:MovementLog/";
  401d54:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
  401d58:	4b8d      	ldr	r3, [pc, #564]	; (401f90 <task_sdCard_OpenNewFile+0x28c>)
  401d5a:	4614      	mov	r4, r2
  401d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401d5e:	c407      	stmia	r4!, {r0, r1, r2}
  401d60:	8023      	strh	r3, [r4, #0]
  401d62:	3402      	adds	r4, #2
  401d64:	0c1b      	lsrs	r3, r3, #16
  401d66:	7023      	strb	r3, [r4, #0]
	DIR dir;
	char logFileName[SD_CARD_FILENAME_LENGTH] = {0};
  401d68:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
  401d6c:	461a      	mov	r2, r3
  401d6e:	2396      	movs	r3, #150	; 0x96
  401d70:	4610      	mov	r0, r2
  401d72:	2100      	movs	r1, #0
  401d74:	461a      	mov	r2, r3
  401d76:	4b84      	ldr	r3, [pc, #528]	; (401f88 <task_sdCard_OpenNewFile+0x284>)
  401d78:	4798      	blx	r3
	char temp[153] = {0}; 
  401d7a:	f507 7316 	add.w	r3, r7, #600	; 0x258
  401d7e:	461a      	mov	r2, r3
  401d80:	2399      	movs	r3, #153	; 0x99
  401d82:	4610      	mov	r0, r2
  401d84:	2100      	movs	r1, #0
  401d86:	461a      	mov	r2, r3
  401d88:	4b7f      	ldr	r3, [pc, #508]	; (401f88 <task_sdCard_OpenNewFile+0x284>)
  401d8a:	4798      	blx	r3
	uint32_t byte_to_read, byte_read, bytes_written;
	FRESULT res;
	uint32_t fileIndexNumber = 0, maxFileIndex = 0, fileIndexJumpCount = 0, sgSysTickCountOld = 0; 
  401d8c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401d90:	2200      	movs	r2, #0
  401d92:	601a      	str	r2, [r3, #0]
  401d94:	2300      	movs	r3, #0
  401d96:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  401d9a:	2300      	movs	r3, #0
  401d9c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  401da0:	2300      	movs	r3, #0
  401da2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	FIL indexFile_obj;
	FILINFO vDataLogFileInfo;
	bool exitFileSearchLoop = FALSE;
  401da6:	2300      	movs	r3, #0
  401da8:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
	status_t status = STATUS_PASS; 
  401dac:	2300      	movs	r3, #0
  401dae:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
	int avg_time = 0;
  401db2:	2300      	movs	r3, #0
  401db4:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	//if the log file is open, then return an error
	if(dataLogFileOpen == true)
  401db8:	4b76      	ldr	r3, [pc, #472]	; (401f94 <task_sdCard_OpenNewFile+0x290>)
  401dba:	781b      	ldrb	r3, [r3, #0]
  401dbc:	b2db      	uxtb	r3, r3
  401dbe:	2b01      	cmp	r3, #1
  401dc0:	d105      	bne.n	401dce <task_sdCard_OpenNewFile+0xca>
	{
		status = STATUS_FAIL; 
  401dc2:	2301      	movs	r3, #1
  401dc4:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
		return status; 
  401dc8:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
  401dcc:	e170      	b.n	4020b0 <task_sdCard_OpenNewFile+0x3ac>
	}	
	if (xSemaphoreTake(semaphore_fatFsAccess, 100) == true)
  401dce:	4b72      	ldr	r3, [pc, #456]	; (401f98 <task_sdCard_OpenNewFile+0x294>)
  401dd0:	681b      	ldr	r3, [r3, #0]
  401dd2:	4618      	mov	r0, r3
  401dd4:	2100      	movs	r1, #0
  401dd6:	2264      	movs	r2, #100	; 0x64
  401dd8:	2300      	movs	r3, #0
  401dda:	4c70      	ldr	r4, [pc, #448]	; (401f9c <task_sdCard_OpenNewFile+0x298>)
  401ddc:	47a0      	blx	r4
  401dde:	4603      	mov	r3, r0
  401de0:	2b01      	cmp	r3, #1
  401de2:	f040 815d 	bne.w	4020a0 <task_sdCard_OpenNewFile+0x39c>
		}
		avg_time = sgSysTickCount - sgSysTickCountOld;
		//latest index calculation complete
		
		#else
		snprintf(dirName, SD_CARD_FILENAME_LENGTH, "0:%s", brainSettings.fileName);
  401de6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  401dea:	4618      	mov	r0, r3
  401dec:	2196      	movs	r1, #150	; 0x96
  401dee:	4a6c      	ldr	r2, [pc, #432]	; (401fa0 <task_sdCard_OpenNewFile+0x29c>)
  401df0:	4b6c      	ldr	r3, [pc, #432]	; (401fa4 <task_sdCard_OpenNewFile+0x2a0>)
  401df2:	4c6d      	ldr	r4, [pc, #436]	; (401fa8 <task_sdCard_OpenNewFile+0x2a4>)
  401df4:	47a0      	blx	r4
		res = f_opendir(&dir, &dirName);	//open the specified directory
  401df6:	f507 7263 	add.w	r2, r7, #908	; 0x38c
  401dfa:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  401dfe:	4610      	mov	r0, r2
  401e00:	4619      	mov	r1, r3
  401e02:	4b6a      	ldr	r3, [pc, #424]	; (401fac <task_sdCard_OpenNewFile+0x2a8>)
  401e04:	4798      	blx	r3
  401e06:	4603      	mov	r3, r0
  401e08:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		if (res == FR_NO_PATH)
  401e0c:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
  401e10:	2b05      	cmp	r3, #5
  401e12:	d111      	bne.n	401e38 <task_sdCard_OpenNewFile+0x134>
		{
			res = f_mkdir(&dirName);	//the requested directory doesn't exist, create new one
  401e14:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  401e18:	4618      	mov	r0, r3
  401e1a:	4b65      	ldr	r3, [pc, #404]	; (401fb0 <task_sdCard_OpenNewFile+0x2ac>)
  401e1c:	4798      	blx	r3
  401e1e:	4603      	mov	r3, r0
  401e20:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
			if (res != FR_OK)
  401e24:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d005      	beq.n	401e38 <task_sdCard_OpenNewFile+0x134>
			{
				status = STATUS_FAIL;
  401e2c:	2301      	movs	r3, #1
  401e2e:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
				debugPrintString("Failed on creating new movement log directory\r\n");
  401e32:	4860      	ldr	r0, [pc, #384]	; (401fb4 <task_sdCard_OpenNewFile+0x2b0>)
  401e34:	4b60      	ldr	r3, [pc, #384]	; (401fb8 <task_sdCard_OpenNewFile+0x2b4>)
  401e36:	4798      	blx	r3
			}
		}
		snprintf(logFileName, SD_CARD_FILENAME_LENGTH, "%s/%s", dirName, &fileIndexLog[2]);
  401e38:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
  401e3c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  401e40:	f507 618b 	add.w	r1, r7, #1112	; 0x458
  401e44:	3102      	adds	r1, #2
  401e46:	9100      	str	r1, [sp, #0]
  401e48:	4610      	mov	r0, r2
  401e4a:	2196      	movs	r1, #150	; 0x96
  401e4c:	4a5b      	ldr	r2, [pc, #364]	; (401fbc <task_sdCard_OpenNewFile+0x2b8>)
  401e4e:	4c56      	ldr	r4, [pc, #344]	; (401fa8 <task_sdCard_OpenNewFile+0x2a4>)
  401e50:	47a0      	blx	r4
		strncpy(fileIndexLog, logFileName, sizeof(logFileName));
  401e52:	f507 628b 	add.w	r2, r7, #1112	; 0x458
  401e56:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
  401e5a:	4610      	mov	r0, r2
  401e5c:	4619      	mov	r1, r3
  401e5e:	2296      	movs	r2, #150	; 0x96
  401e60:	4b57      	ldr	r3, [pc, #348]	; (401fc0 <task_sdCard_OpenNewFile+0x2bc>)
  401e62:	4798      	blx	r3
		res = f_open(&indexFile_obj, (char const *)fileIndexLog, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
  401e64:	f107 0224 	add.w	r2, r7, #36	; 0x24
  401e68:	f507 638b 	add.w	r3, r7, #1112	; 0x458
  401e6c:	4610      	mov	r0, r2
  401e6e:	4619      	mov	r1, r3
  401e70:	2213      	movs	r2, #19
  401e72:	4b54      	ldr	r3, [pc, #336]	; (401fc4 <task_sdCard_OpenNewFile+0x2c0>)
  401e74:	4798      	blx	r3
  401e76:	4603      	mov	r3, r0
  401e78:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		if (res != FR_OK)
  401e7c:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
  401e80:	2b00      	cmp	r3, #0
  401e82:	d005      	beq.n	401e90 <task_sdCard_OpenNewFile+0x18c>
		{
			status = STATUS_FAIL;
  401e84:	2301      	movs	r3, #1
  401e86:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
			debugPrintString("Failed on creating new movement log file\r\n");
  401e8a:	484f      	ldr	r0, [pc, #316]	; (401fc8 <task_sdCard_OpenNewFile+0x2c4>)
  401e8c:	4b4a      	ldr	r3, [pc, #296]	; (401fb8 <task_sdCard_OpenNewFile+0x2b4>)
  401e8e:	4798      	blx	r3
		}
		if(status == STATUS_PASS)
  401e90:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
  401e94:	2b00      	cmp	r3, #0
  401e96:	d12e      	bne.n	401ef6 <task_sdCard_OpenNewFile+0x1f2>
		{
			//if the filesize is 0, it means it's never been created, set index to 1.
			if(indexFile_obj.fsize == 0)
  401e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401e9c:	68db      	ldr	r3, [r3, #12]
  401e9e:	2b00      	cmp	r3, #0
  401ea0:	d104      	bne.n	401eac <task_sdCard_OpenNewFile+0x1a8>
			{
				fileIndexNumber = 1;
  401ea2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401ea6:	2201      	movs	r2, #1
  401ea8:	601a      	str	r2, [r3, #0]
  401eaa:	e024      	b.n	401ef6 <task_sdCard_OpenNewFile+0x1f2>
			}
			else
			{
				if(f_read(&indexFile_obj, (void*)data_buffer, 100, &byte_read) != FR_OK)
  401eac:	f107 0124 	add.w	r1, r7, #36	; 0x24
  401eb0:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
  401eb4:	f507 7315 	add.w	r3, r7, #596	; 0x254
  401eb8:	4608      	mov	r0, r1
  401eba:	4611      	mov	r1, r2
  401ebc:	2264      	movs	r2, #100	; 0x64
  401ebe:	4c43      	ldr	r4, [pc, #268]	; (401fcc <task_sdCard_OpenNewFile+0x2c8>)
  401ec0:	47a0      	blx	r4
  401ec2:	4603      	mov	r3, r0
  401ec4:	2b00      	cmp	r3, #0
  401ec6:	d002      	beq.n	401ece <task_sdCard_OpenNewFile+0x1ca>
				{
					status = STATUS_FAIL;
  401ec8:	2301      	movs	r3, #1
  401eca:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
				}
				if(status == STATUS_PASS)
  401ece:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d10f      	bne.n	401ef6 <task_sdCard_OpenNewFile+0x1f2>
				{
					sscanf(data_buffer,"%d\r\n",&fileIndexNumber);
  401ed6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
  401eda:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401ede:	4610      	mov	r0, r2
  401ee0:	493b      	ldr	r1, [pc, #236]	; (401fd0 <task_sdCard_OpenNewFile+0x2cc>)
  401ee2:	461a      	mov	r2, r3
  401ee4:	4b3b      	ldr	r3, [pc, #236]	; (401fd4 <task_sdCard_OpenNewFile+0x2d0>)
  401ee6:	4798      	blx	r3
					fileIndexNumber++;
  401ee8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401eec:	681b      	ldr	r3, [r3, #0]
  401eee:	1c5a      	adds	r2, r3, #1
  401ef0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401ef4:	601a      	str	r2, [r3, #0]
				}
				
			}
		}
		if(status == STATUS_PASS)
  401ef6:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
  401efa:	2b00      	cmp	r3, #0
  401efc:	d129      	bne.n	401f52 <task_sdCard_OpenNewFile+0x24e>
		{
			//write the update index back to the file.
			sprintf(data_buffer, "%05d\r\n", fileIndexNumber);
  401efe:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
  401f08:	4610      	mov	r0, r2
  401f0a:	4933      	ldr	r1, [pc, #204]	; (401fd8 <task_sdCard_OpenNewFile+0x2d4>)
  401f0c:	461a      	mov	r2, r3
  401f0e:	4b33      	ldr	r3, [pc, #204]	; (401fdc <task_sdCard_OpenNewFile+0x2d8>)
  401f10:	4798      	blx	r3
			f_lseek(&indexFile_obj,0);
  401f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401f16:	4618      	mov	r0, r3
  401f18:	2100      	movs	r1, #0
  401f1a:	4b31      	ldr	r3, [pc, #196]	; (401fe0 <task_sdCard_OpenNewFile+0x2dc>)
  401f1c:	4798      	blx	r3
			if(f_write(&indexFile_obj, (void*)data_buffer,strlen(data_buffer),&bytes_written) != FR_OK)
  401f1e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
  401f22:	4618      	mov	r0, r3
  401f24:	4b2f      	ldr	r3, [pc, #188]	; (401fe4 <task_sdCard_OpenNewFile+0x2e0>)
  401f26:	4798      	blx	r3
  401f28:	4602      	mov	r2, r0
  401f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
  401f2e:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
  401f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
  401f36:	4c2c      	ldr	r4, [pc, #176]	; (401fe8 <task_sdCard_OpenNewFile+0x2e4>)
  401f38:	47a0      	blx	r4
  401f3a:	4603      	mov	r3, r0
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d003      	beq.n	401f48 <task_sdCard_OpenNewFile+0x244>
			{
				status = STATUS_FAIL;
  401f40:	2301      	movs	r3, #1
  401f42:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
  401f46:	e004      	b.n	401f52 <task_sdCard_OpenNewFile+0x24e>
			}
			else
			{
				f_close(&indexFile_obj);
  401f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401f4c:	4618      	mov	r0, r3
  401f4e:	4b27      	ldr	r3, [pc, #156]	; (401fec <task_sdCard_OpenNewFile+0x2e8>)
  401f50:	4798      	blx	r3
			}
		}
		#endif
		
		if(status == STATUS_PASS)
  401f52:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
  401f56:	2b00      	cmp	r3, #0
  401f58:	f040 8099 	bne.w	40208e <task_sdCard_OpenNewFile+0x38a>
		{
			//create the filename
			if(nvmSettings.enableCsvFormat == 0)
  401f5c:	4b24      	ldr	r3, [pc, #144]	; (401ff0 <task_sdCard_OpenNewFile+0x2ec>)
  401f5e:	691b      	ldr	r3, [r3, #16]
  401f60:	2b00      	cmp	r3, #0
  401f62:	d14d      	bne.n	402000 <task_sdCard_OpenNewFile+0x2fc>
			{
				snprintf(dataLogFileName, SD_CARD_FILENAME_LENGTH, "%s/%s_%s%05d.dat",dirName, brainSettings.suitNumber, brainSettings.fileName, fileIndexNumber); 
  401f64:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  401f68:	681a      	ldr	r2, [r3, #0]
  401f6a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  401f6e:	4921      	ldr	r1, [pc, #132]	; (401ff4 <task_sdCard_OpenNewFile+0x2f0>)
  401f70:	9100      	str	r1, [sp, #0]
  401f72:	490c      	ldr	r1, [pc, #48]	; (401fa4 <task_sdCard_OpenNewFile+0x2a0>)
  401f74:	9101      	str	r1, [sp, #4]
  401f76:	9202      	str	r2, [sp, #8]
  401f78:	481f      	ldr	r0, [pc, #124]	; (401ff8 <task_sdCard_OpenNewFile+0x2f4>)
  401f7a:	2196      	movs	r1, #150	; 0x96
  401f7c:	4a1f      	ldr	r2, [pc, #124]	; (401ffc <task_sdCard_OpenNewFile+0x2f8>)
  401f7e:	4c0a      	ldr	r4, [pc, #40]	; (401fa8 <task_sdCard_OpenNewFile+0x2a4>)
  401f80:	47a0      	blx	r4
  401f82:	e04c      	b.n	40201e <task_sdCard_OpenNewFile+0x31a>
  401f84:	0041c5fc 	.word	0x0041c5fc
  401f88:	0041309d 	.word	0x0041309d
  401f8c:	0041c694 	.word	0x0041c694
  401f90:	0041c72c 	.word	0x0041c72c
  401f94:	200030f0 	.word	0x200030f0
  401f98:	200014dc 	.word	0x200014dc
  401f9c:	0040abd5 	.word	0x0040abd5
  401fa0:	0041c514 	.word	0x0041c514
  401fa4:	2000025a 	.word	0x2000025a
  401fa8:	0041326d 	.word	0x0041326d
  401fac:	00409805 	.word	0x00409805
  401fb0:	00409d49 	.word	0x00409d49
  401fb4:	0041c51c 	.word	0x0041c51c
  401fb8:	004016d5 	.word	0x004016d5
  401fbc:	0041c54c 	.word	0x0041c54c
  401fc0:	0041389d 	.word	0x0041389d
  401fc4:	00408921 	.word	0x00408921
  401fc8:	0041c554 	.word	0x0041c554
  401fcc:	00408d55 	.word	0x00408d55
  401fd0:	0041c580 	.word	0x0041c580
  401fd4:	00413321 	.word	0x00413321
  401fd8:	0041c588 	.word	0x0041c588
  401fdc:	004132d5 	.word	0x004132d5
  401fe0:	00409539 	.word	0x00409539
  401fe4:	00413725 	.word	0x00413725
  401fe8:	00409029 	.word	0x00409029
  401fec:	004094f5 	.word	0x004094f5
  401ff0:	20003e80 	.word	0x20003e80
  401ff4:	20000228 	.word	0x20000228
  401ff8:	200030f4 	.word	0x200030f4
  401ffc:	0041c590 	.word	0x0041c590
			}
			else
			{
				snprintf(dataLogFileName, SD_CARD_FILENAME_LENGTH, "%s/%s_%s%05d.csv",dirName, brainSettings.suitNumber, brainSettings.fileName, fileIndexNumber); 
  402000:	f507 7313 	add.w	r3, r7, #588	; 0x24c
  402004:	681a      	ldr	r2, [r3, #0]
  402006:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
  40200a:	492c      	ldr	r1, [pc, #176]	; (4020bc <task_sdCard_OpenNewFile+0x3b8>)
  40200c:	9100      	str	r1, [sp, #0]
  40200e:	492c      	ldr	r1, [pc, #176]	; (4020c0 <task_sdCard_OpenNewFile+0x3bc>)
  402010:	9101      	str	r1, [sp, #4]
  402012:	9202      	str	r2, [sp, #8]
  402014:	482b      	ldr	r0, [pc, #172]	; (4020c4 <task_sdCard_OpenNewFile+0x3c0>)
  402016:	2196      	movs	r1, #150	; 0x96
  402018:	4a2b      	ldr	r2, [pc, #172]	; (4020c8 <task_sdCard_OpenNewFile+0x3c4>)
  40201a:	4c2c      	ldr	r4, [pc, #176]	; (4020cc <task_sdCard_OpenNewFile+0x3c8>)
  40201c:	47a0      	blx	r4
			}
			
			if (f_open(&dataLogFile_obj, (char const *)dataLogFileName, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
  40201e:	482c      	ldr	r0, [pc, #176]	; (4020d0 <task_sdCard_OpenNewFile+0x3cc>)
  402020:	4928      	ldr	r1, [pc, #160]	; (4020c4 <task_sdCard_OpenNewFile+0x3c0>)
  402022:	2212      	movs	r2, #18
  402024:	4b2b      	ldr	r3, [pc, #172]	; (4020d4 <task_sdCard_OpenNewFile+0x3d0>)
  402026:	4798      	blx	r3
  402028:	4603      	mov	r3, r0
  40202a:	2b00      	cmp	r3, #0
  40202c:	d129      	bne.n	402082 <task_sdCard_OpenNewFile+0x37e>
			{
				debugPrintString(brainSettings.imuSet);
  40202e:	482a      	ldr	r0, [pc, #168]	; (4020d8 <task_sdCard_OpenNewFile+0x3d4>)
  402030:	4b2a      	ldr	r3, [pc, #168]	; (4020dc <task_sdCard_OpenNewFile+0x3d8>)
  402032:	4798      	blx	r3
				strncpy(temp, dataLogFileName, sizeof(dataLogFileName));
  402034:	f507 7316 	add.w	r3, r7, #600	; 0x258
  402038:	4618      	mov	r0, r3
  40203a:	4922      	ldr	r1, [pc, #136]	; (4020c4 <task_sdCard_OpenNewFile+0x3c0>)
  40203c:	2296      	movs	r2, #150	; 0x96
  40203e:	4b28      	ldr	r3, [pc, #160]	; (4020e0 <task_sdCard_OpenNewFile+0x3dc>)
  402040:	4798      	blx	r3
				strncat(temp, "\r\n", 2);
  402042:	f507 7316 	add.w	r3, r7, #600	; 0x258
  402046:	4618      	mov	r0, r3
  402048:	4b26      	ldr	r3, [pc, #152]	; (4020e4 <task_sdCard_OpenNewFile+0x3e0>)
  40204a:	4798      	blx	r3
  40204c:	4603      	mov	r3, r0
  40204e:	f507 7216 	add.w	r2, r7, #600	; 0x258
  402052:	4413      	add	r3, r2
  402054:	4a24      	ldr	r2, [pc, #144]	; (4020e8 <task_sdCard_OpenNewFile+0x3e4>)
  402056:	8811      	ldrh	r1, [r2, #0]
  402058:	7892      	ldrb	r2, [r2, #2]
  40205a:	8019      	strh	r1, [r3, #0]
  40205c:	709a      	strb	r2, [r3, #2]
				debugPrintString(temp);
  40205e:	f507 7316 	add.w	r3, r7, #600	; 0x258
  402062:	4618      	mov	r0, r3
  402064:	4b1d      	ldr	r3, [pc, #116]	; (4020dc <task_sdCard_OpenNewFile+0x3d8>)
  402066:	4798      	blx	r3
				res = f_lseek(&dataLogFile_obj, dataLogFile_obj.fsize);
  402068:	4b19      	ldr	r3, [pc, #100]	; (4020d0 <task_sdCard_OpenNewFile+0x3cc>)
  40206a:	68db      	ldr	r3, [r3, #12]
  40206c:	4818      	ldr	r0, [pc, #96]	; (4020d0 <task_sdCard_OpenNewFile+0x3cc>)
  40206e:	4619      	mov	r1, r3
  402070:	4b1e      	ldr	r3, [pc, #120]	; (4020ec <task_sdCard_OpenNewFile+0x3e8>)
  402072:	4798      	blx	r3
  402074:	4603      	mov	r3, r0
  402076:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				dataLogFileOpen = true;
  40207a:	4b1d      	ldr	r3, [pc, #116]	; (4020f0 <task_sdCard_OpenNewFile+0x3ec>)
  40207c:	2201      	movs	r2, #1
  40207e:	701a      	strb	r2, [r3, #0]
  402080:	e005      	b.n	40208e <task_sdCard_OpenNewFile+0x38a>
			}
			else
			{
				debugPrintString("log failed to open\r\n");
  402082:	481c      	ldr	r0, [pc, #112]	; (4020f4 <task_sdCard_OpenNewFile+0x3f0>)
  402084:	4b15      	ldr	r3, [pc, #84]	; (4020dc <task_sdCard_OpenNewFile+0x3d8>)
  402086:	4798      	blx	r3
				status = STATUS_FAIL; 
  402088:	2301      	movs	r3, #1
  40208a:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
			}
		}
		xSemaphoreGive(semaphore_fatFsAccess);
  40208e:	4b1a      	ldr	r3, [pc, #104]	; (4020f8 <task_sdCard_OpenNewFile+0x3f4>)
  402090:	681b      	ldr	r3, [r3, #0]
  402092:	4618      	mov	r0, r3
  402094:	2100      	movs	r1, #0
  402096:	2200      	movs	r2, #0
  402098:	2300      	movs	r3, #0
  40209a:	4c18      	ldr	r4, [pc, #96]	; (4020fc <task_sdCard_OpenNewFile+0x3f8>)
  40209c:	47a0      	blx	r4
  40209e:	e005      	b.n	4020ac <task_sdCard_OpenNewFile+0x3a8>
	}
	else
	{
		debugPrintString("Can't get semaphore to open log file\r\n");
  4020a0:	4817      	ldr	r0, [pc, #92]	; (402100 <task_sdCard_OpenNewFile+0x3fc>)
  4020a2:	4b0e      	ldr	r3, [pc, #56]	; (4020dc <task_sdCard_OpenNewFile+0x3d8>)
  4020a4:	4798      	blx	r3
		status = STATUS_FAIL;
  4020a6:	2301      	movs	r3, #1
  4020a8:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
	}
	return status; 
  4020ac:	f897 356f 	ldrb.w	r3, [r7, #1391]	; 0x56f
}
  4020b0:	4618      	mov	r0, r3
  4020b2:	f507 67ae 	add.w	r7, r7, #1392	; 0x570
  4020b6:	46bd      	mov	sp, r7
  4020b8:	bdb0      	pop	{r4, r5, r7, pc}
  4020ba:	bf00      	nop
  4020bc:	20000228 	.word	0x20000228
  4020c0:	2000025a 	.word	0x2000025a
  4020c4:	200030f4 	.word	0x200030f4
  4020c8:	0041c5a4 	.word	0x0041c5a4
  4020cc:	0041326d 	.word	0x0041326d
  4020d0:	20003c4c 	.word	0x20003c4c
  4020d4:	00408921 	.word	0x00408921
  4020d8:	200002a9 	.word	0x200002a9
  4020dc:	004016d5 	.word	0x004016d5
  4020e0:	0041389d 	.word	0x0041389d
  4020e4:	00413725 	.word	0x00413725
  4020e8:	0041c5b8 	.word	0x0041c5b8
  4020ec:	00409539 	.word	0x00409539
  4020f0:	200030f0 	.word	0x200030f0
  4020f4:	0041c5bc 	.word	0x0041c5bc
  4020f8:	200014dc 	.word	0x200014dc
  4020fc:	0040aa11 	.word	0x0040aa11
  402100:	0041c5d4 	.word	0x0041c5d4

00402104 <task_debugLog_OpenFile>:

status_t task_debugLog_OpenFile()
{
  402104:	b590      	push	{r4, r7, lr}
  402106:	b08f      	sub	sp, #60	; 0x3c
  402108:	af00      	add	r7, sp, #0
	char debugLogFileName[20] = {0};
  40210a:	f107 0320 	add.w	r3, r7, #32
  40210e:	2200      	movs	r2, #0
  402110:	601a      	str	r2, [r3, #0]
  402112:	3304      	adds	r3, #4
  402114:	2200      	movs	r2, #0
  402116:	601a      	str	r2, [r3, #0]
  402118:	3304      	adds	r3, #4
  40211a:	2200      	movs	r2, #0
  40211c:	601a      	str	r2, [r3, #0]
  40211e:	3304      	adds	r3, #4
  402120:	2200      	movs	r2, #0
  402122:	601a      	str	r2, [r3, #0]
  402124:	3304      	adds	r3, #4
  402126:	2200      	movs	r2, #0
  402128:	601a      	str	r2, [r3, #0]
  40212a:	3304      	adds	r3, #4
	uint8_t vDebugLogFileIndex = 0;
  40212c:	2300      	movs	r3, #0
  40212e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	FRESULT res;
	FILINFO vDebugLogFileInfo;
	status_t status = STATUS_PASS;
  402132:	2300      	movs	r3, #0
  402134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	
	//if the log file is open, then return an error
	if(debugLogFileOpen == true)
  402138:	4b3d      	ldr	r3, [pc, #244]	; (402230 <task_debugLog_OpenFile+0x12c>)
  40213a:	781b      	ldrb	r3, [r3, #0]
  40213c:	b2db      	uxtb	r3, r3
  40213e:	2b01      	cmp	r3, #1
  402140:	d105      	bne.n	40214e <task_debugLog_OpenFile+0x4a>
	{
		status = STATUS_FAIL;
  402142:	2301      	movs	r3, #1
  402144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return status;
  402148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40214c:	e06c      	b.n	402228 <task_debugLog_OpenFile+0x124>
	}	
	if(xSemaphoreTake(semaphore_fatFsAccess, 100) == true)
  40214e:	4b39      	ldr	r3, [pc, #228]	; (402234 <task_debugLog_OpenFile+0x130>)
  402150:	681b      	ldr	r3, [r3, #0]
  402152:	4618      	mov	r0, r3
  402154:	2100      	movs	r1, #0
  402156:	2264      	movs	r2, #100	; 0x64
  402158:	2300      	movs	r3, #0
  40215a:	4c37      	ldr	r4, [pc, #220]	; (402238 <task_debugLog_OpenFile+0x134>)
  40215c:	47a0      	blx	r4
  40215e:	4603      	mov	r3, r0
  402160:	2b01      	cmp	r3, #1
  402162:	d159      	bne.n	402218 <task_debugLog_OpenFile+0x114>
	{
		res = f_stat(debugLogNewFileName, &vDebugLogFileInfo);
  402164:	463b      	mov	r3, r7
  402166:	4835      	ldr	r0, [pc, #212]	; (40223c <task_debugLog_OpenFile+0x138>)
  402168:	4619      	mov	r1, r3
  40216a:	4b35      	ldr	r3, [pc, #212]	; (402240 <task_debugLog_OpenFile+0x13c>)
  40216c:	4798      	blx	r3
  40216e:	4603      	mov	r3, r0
  402170:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		if (res == FR_OK)
  402174:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402178:	2b00      	cmp	r3, #0
  40217a:	d10c      	bne.n	402196 <task_debugLog_OpenFile+0x92>
		{
			//file exist, do a check on size
			if (vDebugLogFileInfo.fsize >= DEBUG_LOG_MAX_FILE_SIZE)
  40217c:	683a      	ldr	r2, [r7, #0]
  40217e:	4b31      	ldr	r3, [pc, #196]	; (402244 <task_debugLog_OpenFile+0x140>)
  402180:	429a      	cmp	r2, r3
  402182:	d913      	bls.n	4021ac <task_debugLog_OpenFile+0xa8>
			{
				if(task_debugLog_ChangeFile() != STATUS_PASS)
  402184:	4b30      	ldr	r3, [pc, #192]	; (402248 <task_debugLog_OpenFile+0x144>)
  402186:	4798      	blx	r3
  402188:	4603      	mov	r3, r0
  40218a:	2b00      	cmp	r3, #0
  40218c:	d00e      	beq.n	4021ac <task_debugLog_OpenFile+0xa8>
				{
					status = STATUS_FAIL;
  40218e:	2301      	movs	r3, #1
  402190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402194:	e00a      	b.n	4021ac <task_debugLog_OpenFile+0xa8>
				}
			}
		}
		else if (res == FR_NO_FILE)
  402196:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  40219a:	2b04      	cmp	r3, #4
  40219c:	d103      	bne.n	4021a6 <task_debugLog_OpenFile+0xa2>
		{
			debugPrintString("File does not exist, creating new file\r\n");
  40219e:	482b      	ldr	r0, [pc, #172]	; (40224c <task_debugLog_OpenFile+0x148>)
  4021a0:	4b2b      	ldr	r3, [pc, #172]	; (402250 <task_debugLog_OpenFile+0x14c>)
  4021a2:	4798      	blx	r3
  4021a4:	e002      	b.n	4021ac <task_debugLog_OpenFile+0xa8>
		}
		else
		{			
			debugPrintString("DebugLog file open failed\r\n");
  4021a6:	482b      	ldr	r0, [pc, #172]	; (402254 <task_debugLog_OpenFile+0x150>)
  4021a8:	4b29      	ldr	r3, [pc, #164]	; (402250 <task_debugLog_OpenFile+0x14c>)
  4021aa:	4798      	blx	r3
		}
		if(status == STATUS_PASS)
  4021ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	d118      	bne.n	4021e6 <task_debugLog_OpenFile+0xe2>
		{
			//Open the Log file DebugLog.txt
			res = f_open(&debugLogFile_Obj, (char const *)debugLogNewFileName, FA_OPEN_ALWAYS | FA_WRITE);
  4021b4:	4828      	ldr	r0, [pc, #160]	; (402258 <task_debugLog_OpenFile+0x154>)
  4021b6:	4921      	ldr	r1, [pc, #132]	; (40223c <task_debugLog_OpenFile+0x138>)
  4021b8:	2212      	movs	r2, #18
  4021ba:	4b28      	ldr	r3, [pc, #160]	; (40225c <task_debugLog_OpenFile+0x158>)
  4021bc:	4798      	blx	r3
  4021be:	4603      	mov	r3, r0
  4021c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (res == FR_OK)
  4021c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d106      	bne.n	4021da <task_debugLog_OpenFile+0xd6>
			{
				debugPrintString("\r\n\r\n\r\nProgram start Brain Pack " VERSION " \r\n");
  4021cc:	4824      	ldr	r0, [pc, #144]	; (402260 <task_debugLog_OpenFile+0x15c>)
  4021ce:	4b20      	ldr	r3, [pc, #128]	; (402250 <task_debugLog_OpenFile+0x14c>)
  4021d0:	4798      	blx	r3
				debugPrintString("DebugLog open\r\n");
  4021d2:	4824      	ldr	r0, [pc, #144]	; (402264 <task_debugLog_OpenFile+0x160>)
  4021d4:	4b1e      	ldr	r3, [pc, #120]	; (402250 <task_debugLog_OpenFile+0x14c>)
  4021d6:	4798      	blx	r3
  4021d8:	e005      	b.n	4021e6 <task_debugLog_OpenFile+0xe2>
			}
			else
			{
				debugPrintString("DebugLog failed to open\r\n");
  4021da:	4823      	ldr	r0, [pc, #140]	; (402268 <task_debugLog_OpenFile+0x164>)
  4021dc:	4b1c      	ldr	r3, [pc, #112]	; (402250 <task_debugLog_OpenFile+0x14c>)
  4021de:	4798      	blx	r3
				status = STATUS_FAIL;
  4021e0:	2301      	movs	r3, #1
  4021e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}			
		}
		if(status == STATUS_PASS)
  4021e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4021ea:	2b00      	cmp	r3, #0
  4021ec:	d10b      	bne.n	402206 <task_debugLog_OpenFile+0x102>
		{
			res = f_lseek(&debugLogFile_Obj, debugLogFile_Obj.fsize);
  4021ee:	4b1a      	ldr	r3, [pc, #104]	; (402258 <task_debugLog_OpenFile+0x154>)
  4021f0:	68db      	ldr	r3, [r3, #12]
  4021f2:	4819      	ldr	r0, [pc, #100]	; (402258 <task_debugLog_OpenFile+0x154>)
  4021f4:	4619      	mov	r1, r3
  4021f6:	4b1d      	ldr	r3, [pc, #116]	; (40226c <task_debugLog_OpenFile+0x168>)
  4021f8:	4798      	blx	r3
  4021fa:	4603      	mov	r3, r0
  4021fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			debugLogFileOpen = true;
  402200:	4b0b      	ldr	r3, [pc, #44]	; (402230 <task_debugLog_OpenFile+0x12c>)
  402202:	2201      	movs	r2, #1
  402204:	701a      	strb	r2, [r3, #0]
			//the file is open and we're good to go, the status should be PASS here. 	
		}
		xSemaphoreGive(semaphore_fatFsAccess);	
  402206:	4b0b      	ldr	r3, [pc, #44]	; (402234 <task_debugLog_OpenFile+0x130>)
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	4618      	mov	r0, r3
  40220c:	2100      	movs	r1, #0
  40220e:	2200      	movs	r2, #0
  402210:	2300      	movs	r3, #0
  402212:	4c17      	ldr	r4, [pc, #92]	; (402270 <task_debugLog_OpenFile+0x16c>)
  402214:	47a0      	blx	r4
  402216:	e005      	b.n	402224 <task_debugLog_OpenFile+0x120>
	}
	else
	{
		debugPrintString("Can't get semaphore to open DebugLog file\r\n");
  402218:	4816      	ldr	r0, [pc, #88]	; (402274 <task_debugLog_OpenFile+0x170>)
  40221a:	4b0d      	ldr	r3, [pc, #52]	; (402250 <task_debugLog_OpenFile+0x14c>)
  40221c:	4798      	blx	r3
		status = STATUS_FAIL; 
  40221e:	2301      	movs	r3, #1
  402220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	return status; 
  402224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
  402228:	4618      	mov	r0, r3
  40222a:	373c      	adds	r7, #60	; 0x3c
  40222c:	46bd      	mov	sp, r7
  40222e:	bd90      	pop	{r4, r7, pc}
  402230:	200030f1 	.word	0x200030f1
  402234:	200014dc 	.word	0x200014dc
  402238:	0040abd5 	.word	0x0040abd5
  40223c:	20000110 	.word	0x20000110
  402240:	0040991d 	.word	0x0040991d
  402244:	001e847f 	.word	0x001e847f
  402248:	00402355 	.word	0x00402355
  40224c:	0041c73c 	.word	0x0041c73c
  402250:	004016d5 	.word	0x004016d5
  402254:	0041c768 	.word	0x0041c768
  402258:	20003a24 	.word	0x20003a24
  40225c:	00408921 	.word	0x00408921
  402260:	0041c784 	.word	0x0041c784
  402264:	0041c7ac 	.word	0x0041c7ac
  402268:	0041c7bc 	.word	0x0041c7bc
  40226c:	00409539 	.word	0x00409539
  402270:	0040aa11 	.word	0x0040aa11
  402274:	0041c7d8 	.word	0x0041c7d8

00402278 <task_sdCard_CloseFile>:

status_t task_sdCard_CloseFile()
{
  402278:	b590      	push	{r4, r7, lr}
  40227a:	b083      	sub	sp, #12
  40227c:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40227e:	2300      	movs	r3, #0
  402280:	71fb      	strb	r3, [r7, #7]
	//if the filelog is not open, return and error
	if(dataLogFileOpen == false)
  402282:	4b12      	ldr	r3, [pc, #72]	; (4022cc <task_sdCard_CloseFile+0x54>)
  402284:	781b      	ldrb	r3, [r3, #0]
  402286:	b2db      	uxtb	r3, r3
  402288:	2b00      	cmp	r3, #0
  40228a:	d101      	bne.n	402290 <task_sdCard_CloseFile+0x18>
	{
		return STATUS_FAIL;
  40228c:	2301      	movs	r3, #1
  40228e:	e019      	b.n	4022c4 <task_sdCard_CloseFile+0x4c>
	}		
	if(xSemaphoreTake(semaphore_fatFsAccess,200) == true)
  402290:	4b0f      	ldr	r3, [pc, #60]	; (4022d0 <task_sdCard_CloseFile+0x58>)
  402292:	681b      	ldr	r3, [r3, #0]
  402294:	4618      	mov	r0, r3
  402296:	2100      	movs	r1, #0
  402298:	22c8      	movs	r2, #200	; 0xc8
  40229a:	2300      	movs	r3, #0
  40229c:	4c0d      	ldr	r4, [pc, #52]	; (4022d4 <task_sdCard_CloseFile+0x5c>)
  40229e:	47a0      	blx	r4
  4022a0:	4603      	mov	r3, r0
  4022a2:	2b01      	cmp	r3, #1
  4022a4:	d10b      	bne.n	4022be <task_sdCard_CloseFile+0x46>
	{
		//set the flag to have the main sd card thread close the file. 
		//we don't want to close the file in the middle of a write. 
		closeLogFileFlag = 1; 
  4022a6:	4b0c      	ldr	r3, [pc, #48]	; (4022d8 <task_sdCard_CloseFile+0x60>)
  4022a8:	2201      	movs	r2, #1
  4022aa:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(semaphore_fatFsAccess);
  4022ac:	4b08      	ldr	r3, [pc, #32]	; (4022d0 <task_sdCard_CloseFile+0x58>)
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	4618      	mov	r0, r3
  4022b2:	2100      	movs	r1, #0
  4022b4:	2200      	movs	r2, #0
  4022b6:	2300      	movs	r3, #0
  4022b8:	4c08      	ldr	r4, [pc, #32]	; (4022dc <task_sdCard_CloseFile+0x64>)
  4022ba:	47a0      	blx	r4
  4022bc:	e001      	b.n	4022c2 <task_sdCard_CloseFile+0x4a>
	}
	else
	{		
		status = STATUS_FAIL;
  4022be:	2301      	movs	r3, #1
  4022c0:	71fb      	strb	r3, [r7, #7]
	}
	return status; 	
  4022c2:	79fb      	ldrb	r3, [r7, #7]
}
  4022c4:	4618      	mov	r0, r3
  4022c6:	370c      	adds	r7, #12
  4022c8:	46bd      	mov	sp, r7
  4022ca:	bd90      	pop	{r4, r7, pc}
  4022cc:	200030f0 	.word	0x200030f0
  4022d0:	200014dc 	.word	0x200014dc
  4022d4:	0040abd5 	.word	0x0040abd5
  4022d8:	200030f2 	.word	0x200030f2
  4022dc:	0040aa11 	.word	0x0040aa11

004022e0 <task_debugLog_CloseFile>:

status_t task_debugLog_CloseFile()
{
  4022e0:	b590      	push	{r4, r7, lr}
  4022e2:	b083      	sub	sp, #12
  4022e4:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  4022e6:	2300      	movs	r3, #0
  4022e8:	71fb      	strb	r3, [r7, #7]
	//if DebugLog file is not open, return error
	if (debugLogFileOpen == false)
  4022ea:	4b14      	ldr	r3, [pc, #80]	; (40233c <task_debugLog_CloseFile+0x5c>)
  4022ec:	781b      	ldrb	r3, [r3, #0]
  4022ee:	b2db      	uxtb	r3, r3
  4022f0:	2b00      	cmp	r3, #0
  4022f2:	d101      	bne.n	4022f8 <task_debugLog_CloseFile+0x18>
	{
		return STATUS_FAIL;
  4022f4:	2301      	movs	r3, #1
  4022f6:	e01c      	b.n	402332 <task_debugLog_CloseFile+0x52>
	}
	vTaskDelay(200);	//wait to write everything before closing the file
  4022f8:	20c8      	movs	r0, #200	; 0xc8
  4022fa:	4b11      	ldr	r3, [pc, #68]	; (402340 <task_debugLog_CloseFile+0x60>)
  4022fc:	4798      	blx	r3
	if (xSemaphoreTake(semaphore_fatFsAccess, 100) == true)
  4022fe:	4b11      	ldr	r3, [pc, #68]	; (402344 <task_debugLog_CloseFile+0x64>)
  402300:	681b      	ldr	r3, [r3, #0]
  402302:	4618      	mov	r0, r3
  402304:	2100      	movs	r1, #0
  402306:	2264      	movs	r2, #100	; 0x64
  402308:	2300      	movs	r3, #0
  40230a:	4c0f      	ldr	r4, [pc, #60]	; (402348 <task_debugLog_CloseFile+0x68>)
  40230c:	47a0      	blx	r4
  40230e:	4603      	mov	r3, r0
  402310:	2b01      	cmp	r3, #1
  402312:	d10b      	bne.n	40232c <task_debugLog_CloseFile+0x4c>
	{
		//set the flag to have the main sd card thread close the file
		//we don't want to close the file in the middle of a write
		closeDebugLogFileFlag = 1;
  402314:	4b0d      	ldr	r3, [pc, #52]	; (40234c <task_debugLog_CloseFile+0x6c>)
  402316:	2201      	movs	r2, #1
  402318:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(semaphore_fatFsAccess);
  40231a:	4b0a      	ldr	r3, [pc, #40]	; (402344 <task_debugLog_CloseFile+0x64>)
  40231c:	681b      	ldr	r3, [r3, #0]
  40231e:	4618      	mov	r0, r3
  402320:	2100      	movs	r1, #0
  402322:	2200      	movs	r2, #0
  402324:	2300      	movs	r3, #0
  402326:	4c0a      	ldr	r4, [pc, #40]	; (402350 <task_debugLog_CloseFile+0x70>)
  402328:	47a0      	blx	r4
  40232a:	e001      	b.n	402330 <task_debugLog_CloseFile+0x50>
	}
	else
	{		
		status = STATUS_FAIL;
  40232c:	2301      	movs	r3, #1
  40232e:	71fb      	strb	r3, [r7, #7]
	}
	return status; 
  402330:	79fb      	ldrb	r3, [r7, #7]
	
}
  402332:	4618      	mov	r0, r3
  402334:	370c      	adds	r7, #12
  402336:	46bd      	mov	sp, r7
  402338:	bd90      	pop	{r4, r7, pc}
  40233a:	bf00      	nop
  40233c:	200030f1 	.word	0x200030f1
  402340:	0040b24d 	.word	0x0040b24d
  402344:	200014dc 	.word	0x200014dc
  402348:	0040abd5 	.word	0x0040abd5
  40234c:	200030f3 	.word	0x200030f3
  402350:	0040aa11 	.word	0x0040aa11

00402354 <task_debugLog_ChangeFile>:

status_t task_debugLog_ChangeFile()
{	
  402354:	b580      	push	{r7, lr}
  402356:	b08a      	sub	sp, #40	; 0x28
  402358:	af00      	add	r7, sp, #0
	//the file size exceeds the limit, change the log file
	//it is assumed that this file is only called when the file system semaphore is taken. 
	FRESULT res;
	FILINFO vDebugLogFileInfo;
	status_t status = STATUS_PASS;
  40235a:	2300      	movs	r3, #0
  40235c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//check if the old file exits
	res = f_stat(debugLogOldFileName, &vDebugLogFileInfo);
  402360:	1d3b      	adds	r3, r7, #4
  402362:	4812      	ldr	r0, [pc, #72]	; (4023ac <task_debugLog_ChangeFile+0x58>)
  402364:	4619      	mov	r1, r3
  402366:	4b12      	ldr	r3, [pc, #72]	; (4023b0 <task_debugLog_ChangeFile+0x5c>)
  402368:	4798      	blx	r3
  40236a:	4603      	mov	r3, r0
  40236c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (res == FR_OK)
  402370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  402374:	2b00      	cmp	r3, #0
  402376:	d102      	bne.n	40237e <task_debugLog_ChangeFile+0x2a>
	{
		//delete the old file before renaming the current file
		f_unlink(debugLogOldFileName);
  402378:	480c      	ldr	r0, [pc, #48]	; (4023ac <task_debugLog_ChangeFile+0x58>)
  40237a:	4b0e      	ldr	r3, [pc, #56]	; (4023b4 <task_debugLog_ChangeFile+0x60>)
  40237c:	4798      	blx	r3
	}
	//TODO can you really change the file name without closing it first?
	//rename the current file to the name of old file
	res = f_rename(&debugLogNewFileName[2], &debugLogOldFileName[2]);
  40237e:	480e      	ldr	r0, [pc, #56]	; (4023b8 <task_debugLog_ChangeFile+0x64>)
  402380:	490e      	ldr	r1, [pc, #56]	; (4023bc <task_debugLog_ChangeFile+0x68>)
  402382:	4b0f      	ldr	r3, [pc, #60]	; (4023c0 <task_debugLog_ChangeFile+0x6c>)
  402384:	4798      	blx	r3
  402386:	4603      	mov	r3, r0
  402388:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (res != FR_OK)
  40238c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  402390:	2b00      	cmp	r3, #0
  402392:	d005      	beq.n	4023a0 <task_debugLog_ChangeFile+0x4c>
	{
		debugPrintString("Rename of Debug Log file failed\r\n");
  402394:	480b      	ldr	r0, [pc, #44]	; (4023c4 <task_debugLog_ChangeFile+0x70>)
  402396:	4b0c      	ldr	r3, [pc, #48]	; (4023c8 <task_debugLog_ChangeFile+0x74>)
  402398:	4798      	blx	r3
		status = STATUS_FAIL;
  40239a:	2301      	movs	r3, #1
  40239c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return status;
  4023a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
  4023a4:	4618      	mov	r0, r3
  4023a6:	3728      	adds	r7, #40	; 0x28
  4023a8:	46bd      	mov	sp, r7
  4023aa:	bd80      	pop	{r7, pc}
  4023ac:	20000120 	.word	0x20000120
  4023b0:	0040991d 	.word	0x0040991d
  4023b4:	00409b59 	.word	0x00409b59
  4023b8:	20000112 	.word	0x20000112
  4023bc:	20000122 	.word	0x20000122
  4023c0:	0040a0fd 	.word	0x0040a0fd
  4023c4:	0041c804 	.word	0x0041c804
  4023c8:	004016d5 	.word	0x004016d5

004023cc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4023cc:	b480      	push	{r7}
  4023ce:	b083      	sub	sp, #12
  4023d0:	af00      	add	r7, sp, #0
  4023d2:	4603      	mov	r3, r0
  4023d4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4023d6:	4b08      	ldr	r3, [pc, #32]	; (4023f8 <NVIC_EnableIRQ+0x2c>)
  4023d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4023dc:	0952      	lsrs	r2, r2, #5
  4023de:	79f9      	ldrb	r1, [r7, #7]
  4023e0:	f001 011f 	and.w	r1, r1, #31
  4023e4:	2001      	movs	r0, #1
  4023e6:	fa00 f101 	lsl.w	r1, r0, r1
  4023ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4023ee:	370c      	adds	r7, #12
  4023f0:	46bd      	mov	sp, r7
  4023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023f6:	4770      	bx	lr
  4023f8:	e000e100 	.word	0xe000e100

004023fc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4023fc:	b480      	push	{r7}
  4023fe:	b083      	sub	sp, #12
  402400:	af00      	add	r7, sp, #0
  402402:	4603      	mov	r3, r0
  402404:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402406:	4b09      	ldr	r3, [pc, #36]	; (40242c <NVIC_DisableIRQ+0x30>)
  402408:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40240c:	0952      	lsrs	r2, r2, #5
  40240e:	79f9      	ldrb	r1, [r7, #7]
  402410:	f001 011f 	and.w	r1, r1, #31
  402414:	2001      	movs	r0, #1
  402416:	fa00 f101 	lsl.w	r1, r0, r1
  40241a:	3220      	adds	r2, #32
  40241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  402420:	370c      	adds	r7, #12
  402422:	46bd      	mov	sp, r7
  402424:	f85d 7b04 	ldr.w	r7, [sp], #4
  402428:	4770      	bx	lr
  40242a:	bf00      	nop
  40242c:	e000e100 	.word	0xe000e100

00402430 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402430:	b480      	push	{r7}
  402432:	b083      	sub	sp, #12
  402434:	af00      	add	r7, sp, #0
  402436:	4603      	mov	r3, r0
  402438:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40243a:	4b09      	ldr	r3, [pc, #36]	; (402460 <NVIC_ClearPendingIRQ+0x30>)
  40243c:	f997 2007 	ldrsb.w	r2, [r7, #7]
  402440:	0952      	lsrs	r2, r2, #5
  402442:	79f9      	ldrb	r1, [r7, #7]
  402444:	f001 011f 	and.w	r1, r1, #31
  402448:	2001      	movs	r0, #1
  40244a:	fa00 f101 	lsl.w	r1, r0, r1
  40244e:	3260      	adds	r2, #96	; 0x60
  402450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  402454:	370c      	adds	r7, #12
  402456:	46bd      	mov	sp, r7
  402458:	f85d 7b04 	ldr.w	r7, [sp], #4
  40245c:	4770      	bx	lr
  40245e:	bf00      	nop
  402460:	e000e100 	.word	0xe000e100

00402464 <vTimeOutTimerCallback>:

xTimerHandle TimeOutTimer = NULL, sdTimeOutTimer = NULL;
volatile bool sdInsertWaitTimeoutFlag = FALSE;

void vTimeOutTimerCallback( xTimerHandle xTimer )
{
  402464:	b580      	push	{r7, lr}
  402466:	b082      	sub	sp, #8
  402468:	af00      	add	r7, sp, #0
  40246a:	6078      	str	r0, [r7, #4]
	//if auto off is enabled. 
	if(brainSettings.autoTurnOff)
  40246c:	4b05      	ldr	r3, [pc, #20]	; (402484 <vTimeOutTimerCallback+0x20>)
  40246e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
  402472:	2b00      	cmp	r3, #0
  402474:	d003      	beq.n	40247e <vTimeOutTimerCallback+0x1a>
	{
		#ifdef USES_NEW_POWER_BOARD 
		//if we use the new power board, set the PB_GPIO low to indicate that we need to power down
		drv_gpio_setPinState(DRV_GPIO_PIN_PB_GPIO, DRV_GPIO_PIN_STATE_LOW); 
  402476:	2012      	movs	r0, #18
  402478:	2100      	movs	r1, #0
  40247a:	4b03      	ldr	r3, [pc, #12]	; (402488 <vTimeOutTimerCallback+0x24>)
  40247c:	4798      	blx	r3
		#else
		 task_stateMachine_EnqueueEvent(SYS_EVENT_POWER_SWITCH, 0x00);
		#endif
		
	}
}
  40247e:	3708      	adds	r7, #8
  402480:	46bd      	mov	sp, r7
  402482:	bd80      	pop	{r7, pc}
  402484:	20000220 	.word	0x20000220
  402488:	0040d7b5 	.word	0x0040d7b5

0040248c <vSdTimeOutTimerCallback>:

void vSdTimeOutTimerCallback( xTimerHandle xTimer )
{
  40248c:	b480      	push	{r7}
  40248e:	b083      	sub	sp, #12
  402490:	af00      	add	r7, sp, #0
  402492:	6078      	str	r0, [r7, #4]
	sdInsertWaitTimeoutFlag = TRUE;
  402494:	4b03      	ldr	r3, [pc, #12]	; (4024a4 <vSdTimeOutTimerCallback+0x18>)
  402496:	2201      	movs	r2, #1
  402498:	701a      	strb	r2, [r3, #0]
}
  40249a:	370c      	adds	r7, #12
  40249c:	46bd      	mov	sp, r7
  40249e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024a2:	4770      	bx	lr
  4024a4:	200031a4 	.word	0x200031a4

004024a8 <task_stateMachineHandler>:

//task to handle the events
void task_stateMachineHandler(void *pvParameters)
{
  4024a8:	b590      	push	{r4, r7, lr}
  4024aa:	b087      	sub	sp, #28
  4024ac:	af02      	add	r7, sp, #8
  4024ae:	6078      	str	r0, [r7, #4]
	//Start Idle-time out timer 
	TimeOutTimer = xTimerCreate("Time Out Timer", (MAX_IDLE_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vTimeOutTimerCallback);
  4024b0:	4b24      	ldr	r3, [pc, #144]	; (402544 <task_stateMachineHandler+0x9c>)
  4024b2:	9300      	str	r3, [sp, #0]
  4024b4:	4824      	ldr	r0, [pc, #144]	; (402548 <task_stateMachineHandler+0xa0>)
  4024b6:	4925      	ldr	r1, [pc, #148]	; (40254c <task_stateMachineHandler+0xa4>)
  4024b8:	2200      	movs	r2, #0
  4024ba:	2300      	movs	r3, #0
  4024bc:	4c24      	ldr	r4, [pc, #144]	; (402550 <task_stateMachineHandler+0xa8>)
  4024be:	47a0      	blx	r4
  4024c0:	4602      	mov	r2, r0
  4024c2:	4b24      	ldr	r3, [pc, #144]	; (402554 <task_stateMachineHandler+0xac>)
  4024c4:	601a      	str	r2, [r3, #0]
	if (TimeOutTimer == NULL)
  4024c6:	4b23      	ldr	r3, [pc, #140]	; (402554 <task_stateMachineHandler+0xac>)
  4024c8:	681b      	ldr	r3, [r3, #0]
  4024ca:	2b00      	cmp	r3, #0
  4024cc:	d105      	bne.n	4024da <task_stateMachineHandler+0x32>
	{
		printf("Failed to create timer task code %d\r\n", TimeOutTimer);
  4024ce:	4b21      	ldr	r3, [pc, #132]	; (402554 <task_stateMachineHandler+0xac>)
  4024d0:	681b      	ldr	r3, [r3, #0]
  4024d2:	4821      	ldr	r0, [pc, #132]	; (402558 <task_stateMachineHandler+0xb0>)
  4024d4:	4619      	mov	r1, r3
  4024d6:	4b21      	ldr	r3, [pc, #132]	; (40255c <task_stateMachineHandler+0xb4>)
  4024d8:	4798      	blx	r3
	}	
	queue_stateMachineEvents = xQueueCreate( 10, sizeof(eventMessage_t));
  4024da:	200a      	movs	r0, #10
  4024dc:	2104      	movs	r1, #4
  4024de:	4b20      	ldr	r3, [pc, #128]	; (402560 <task_stateMachineHandler+0xb8>)
  4024e0:	4798      	blx	r3
  4024e2:	4602      	mov	r2, r0
  4024e4:	4b1f      	ldr	r3, [pc, #124]	; (402564 <task_stateMachineHandler+0xbc>)
  4024e6:	601a      	str	r2, [r3, #0]
	if(queue_stateMachineEvents == 0)
  4024e8:	4b1e      	ldr	r3, [pc, #120]	; (402564 <task_stateMachineHandler+0xbc>)
  4024ea:	681b      	ldr	r3, [r3, #0]
  4024ec:	2b00      	cmp	r3, #0
  4024ee:	d103      	bne.n	4024f8 <task_stateMachineHandler+0x50>
	{
		// Queue was not created this is an error!
		debugPrintString("an error has occurred, state machine queue creation failed. \r\n");
  4024f0:	481d      	ldr	r0, [pc, #116]	; (402568 <task_stateMachineHandler+0xc0>)
  4024f2:	4b1e      	ldr	r3, [pc, #120]	; (40256c <task_stateMachineHandler+0xc4>)
  4024f4:	4798      	blx	r3
		return;
  4024f6:	e021      	b.n	40253c <task_stateMachineHandler+0x94>
	}	
	eventMessage_t eventMessage = {.sysEvent = SYS_EVENT_POWER_SWITCH, .data = 0x0000}; 
  4024f8:	2300      	movs	r3, #0
  4024fa:	733b      	strb	r3, [r7, #12]
  4024fc:	2300      	movs	r3, #0
  4024fe:	81fb      	strh	r3, [r7, #14]
	//from start immediately put the system into power down mode. 
	xQueueSendToBack( queue_stateMachineEvents,( void * ) &eventMessage,5); 
  402500:	4b18      	ldr	r3, [pc, #96]	; (402564 <task_stateMachineHandler+0xbc>)
  402502:	681a      	ldr	r2, [r3, #0]
  402504:	f107 030c 	add.w	r3, r7, #12
  402508:	4610      	mov	r0, r2
  40250a:	4619      	mov	r1, r3
  40250c:	2205      	movs	r2, #5
  40250e:	2300      	movs	r3, #0
  402510:	4c17      	ldr	r4, [pc, #92]	; (402570 <task_stateMachineHandler+0xc8>)
  402512:	47a0      	blx	r4
	while(1)
	{
		if(xQueueReceive(queue_stateMachineEvents, &(eventMessage), 100) == TRUE)
  402514:	4b13      	ldr	r3, [pc, #76]	; (402564 <task_stateMachineHandler+0xbc>)
  402516:	681a      	ldr	r2, [r3, #0]
  402518:	f107 030c 	add.w	r3, r7, #12
  40251c:	4610      	mov	r0, r2
  40251e:	4619      	mov	r1, r3
  402520:	2264      	movs	r2, #100	; 0x64
  402522:	2300      	movs	r3, #0
  402524:	4c13      	ldr	r4, [pc, #76]	; (402574 <task_stateMachineHandler+0xcc>)
  402526:	47a0      	blx	r4
  402528:	4603      	mov	r3, r0
  40252a:	2b01      	cmp	r3, #1
  40252c:	d102      	bne.n	402534 <task_stateMachineHandler+0x8c>
		{
			processEvent(eventMessage); 
  40252e:	68f8      	ldr	r0, [r7, #12]
  402530:	4b11      	ldr	r3, [pc, #68]	; (402578 <task_stateMachineHandler+0xd0>)
  402532:	4798      	blx	r3
		}
		vTaskDelay(50); 	
  402534:	2032      	movs	r0, #50	; 0x32
  402536:	4b11      	ldr	r3, [pc, #68]	; (40257c <task_stateMachineHandler+0xd4>)
  402538:	4798      	blx	r3
	}		
  40253a:	e7eb      	b.n	402514 <task_stateMachineHandler+0x6c>
}
  40253c:	3714      	adds	r7, #20
  40253e:	46bd      	mov	sp, r7
  402540:	bd90      	pop	{r4, r7, pc}
  402542:	bf00      	nop
  402544:	00402465 	.word	0x00402465
  402548:	0041cb5c 	.word	0x0041cb5c
  40254c:	000493e0 	.word	0x000493e0
  402550:	0040bfbd 	.word	0x0040bfbd
  402554:	2000319c 	.word	0x2000319c
  402558:	0041cb6c 	.word	0x0041cb6c
  40255c:	004129e9 	.word	0x004129e9
  402560:	0040a8c5 	.word	0x0040a8c5
  402564:	20003190 	.word	0x20003190
  402568:	0041cb94 	.word	0x0041cb94
  40256c:	004016d5 	.word	0x004016d5
  402570:	0040aa11 	.word	0x0040aa11
  402574:	0040abd5 	.word	0x0040abd5
  402578:	00402601 	.word	0x00402601
  40257c:	0040b24d 	.word	0x0040b24d

00402580 <task_stateMachine_EnqueueEvent>:

status_t task_stateMachine_EnqueueEvent(systemEvents_t eventType, uint16_t data)
{
  402580:	b590      	push	{r4, r7, lr}
  402582:	b085      	sub	sp, #20
  402584:	af00      	add	r7, sp, #0
  402586:	4602      	mov	r2, r0
  402588:	460b      	mov	r3, r1
  40258a:	71fa      	strb	r2, [r7, #7]
  40258c:	80bb      	strh	r3, [r7, #4]
	status_t status = STATUS_PASS; 
  40258e:	2300      	movs	r3, #0
  402590:	73fb      	strb	r3, [r7, #15]
	eventMessage_t msg; 
	msg.sysEvent = eventType; 
  402592:	79fb      	ldrb	r3, [r7, #7]
  402594:	723b      	strb	r3, [r7, #8]
	msg.data = data; 
  402596:	88bb      	ldrh	r3, [r7, #4]
  402598:	817b      	strh	r3, [r7, #10]
	debugPrintString(systemEventNameString[eventType]);
  40259a:	79fa      	ldrb	r2, [r7, #7]
  40259c:	4b0e      	ldr	r3, [pc, #56]	; (4025d8 <task_stateMachine_EnqueueEvent+0x58>)
  40259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025a2:	4618      	mov	r0, r3
  4025a4:	4b0d      	ldr	r3, [pc, #52]	; (4025dc <task_stateMachine_EnqueueEvent+0x5c>)
  4025a6:	4798      	blx	r3
	if(queue_stateMachineEvents != NULL)
  4025a8:	4b0d      	ldr	r3, [pc, #52]	; (4025e0 <task_stateMachine_EnqueueEvent+0x60>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	2b00      	cmp	r3, #0
  4025ae:	d00e      	beq.n	4025ce <task_stateMachine_EnqueueEvent+0x4e>
	{
		if(xQueueSendToBack( queue_stateMachineEvents,( void * ) &msg,5) != TRUE)
  4025b0:	4b0b      	ldr	r3, [pc, #44]	; (4025e0 <task_stateMachine_EnqueueEvent+0x60>)
  4025b2:	681a      	ldr	r2, [r3, #0]
  4025b4:	f107 0308 	add.w	r3, r7, #8
  4025b8:	4610      	mov	r0, r2
  4025ba:	4619      	mov	r1, r3
  4025bc:	2205      	movs	r2, #5
  4025be:	2300      	movs	r3, #0
  4025c0:	4c08      	ldr	r4, [pc, #32]	; (4025e4 <task_stateMachine_EnqueueEvent+0x64>)
  4025c2:	47a0      	blx	r4
  4025c4:	4603      	mov	r3, r0
  4025c6:	2b01      	cmp	r3, #1
  4025c8:	d001      	beq.n	4025ce <task_stateMachine_EnqueueEvent+0x4e>
		{
			status = STATUS_FAIL; 
  4025ca:	2301      	movs	r3, #1
  4025cc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status; 
  4025ce:	7bfb      	ldrb	r3, [r7, #15]
}
  4025d0:	4618      	mov	r0, r3
  4025d2:	3714      	adds	r7, #20
  4025d4:	46bd      	mov	sp, r7
  4025d6:	bd90      	pop	{r4, r7, pc}
  4025d8:	20000134 	.word	0x20000134
  4025dc:	004016d5 	.word	0x004016d5
  4025e0:	20003190 	.word	0x20003190
  4025e4:	0040aa11 	.word	0x0040aa11

004025e8 <getCurrentState>:
systemStates_t getCurrentState()
{
  4025e8:	b480      	push	{r7}
  4025ea:	af00      	add	r7, sp, #0
	return currentSystemState;
  4025ec:	4b03      	ldr	r3, [pc, #12]	; (4025fc <getCurrentState+0x14>)
  4025ee:	781b      	ldrb	r3, [r3, #0]
}
  4025f0:	4618      	mov	r0, r3
  4025f2:	46bd      	mov	sp, r7
  4025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f8:	4770      	bx	lr
  4025fa:	bf00      	nop
  4025fc:	20003194 	.word	0x20003194

00402600 <processEvent>:
//static functions
//event processor
void processEvent(eventMessage_t eventMsg)
{
  402600:	b580      	push	{r7, lr}
  402602:	b084      	sub	sp, #16
  402604:	af00      	add	r7, sp, #0
  402606:	6078      	str	r0, [r7, #4]
	switch(eventMsg.sysEvent)
  402608:	793b      	ldrb	r3, [r7, #4]
  40260a:	2b0d      	cmp	r3, #13
  40260c:	f200 81b3 	bhi.w	402976 <processEvent+0x376>
  402610:	a201      	add	r2, pc, #4	; (adr r2, 402618 <processEvent+0x18>)
  402612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402616:	bf00      	nop
  402618:	00402651 	.word	0x00402651
  40261c:	004026d1 	.word	0x004026d1
  402620:	004026ab 	.word	0x004026ab
  402624:	00402771 	.word	0x00402771
  402628:	0040290d 	.word	0x0040290d
  40262c:	004027b3 	.word	0x004027b3
  402630:	0040275d 	.word	0x0040275d
  402634:	00402771 	.word	0x00402771
  402638:	00402771 	.word	0x00402771
  40263c:	004027ff 	.word	0x004027ff
  402640:	00402851 	.word	0x00402851
  402644:	004027a1 	.word	0x004027a1
  402648:	00402933 	.word	0x00402933
  40264c:	00402963 	.word	0x00402963
	{
		case SYS_EVENT_POWER_SWITCH:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  402650:	4b83      	ldr	r3, [pc, #524]	; (402860 <processEvent+0x260>)
  402652:	781b      	ldrb	r3, [r3, #0]
  402654:	2b04      	cmp	r3, #4
  402656:	d102      	bne.n	40265e <processEvent+0x5e>
			{
				//stop recording, then go to the off state. 
				stateExit_Recording(); 
  402658:	4b82      	ldr	r3, [pc, #520]	; (402864 <processEvent+0x264>)
  40265a:	4798      	blx	r3
  40265c:	e022      	b.n	4026a4 <processEvent+0xa4>
			}
			else if (currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  40265e:	4b80      	ldr	r3, [pc, #512]	; (402860 <processEvent+0x260>)
  402660:	781b      	ldrb	r3, [r3, #0]
  402662:	2b06      	cmp	r3, #6
  402664:	d104      	bne.n	402670 <processEvent+0x70>
			{
				stateExit_GetAccelData(); 
  402666:	4b80      	ldr	r3, [pc, #512]	; (402868 <processEvent+0x268>)
  402668:	4798      	blx	r3
				stateExit_Recording(); 
  40266a:	4b7e      	ldr	r3, [pc, #504]	; (402864 <processEvent+0x264>)
  40266c:	4798      	blx	r3
  40266e:	e019      	b.n	4026a4 <processEvent+0xa4>
			}			
			else if (currentSystemState == SYS_STATE_RESET)
  402670:	4b7b      	ldr	r3, [pc, #492]	; (402860 <processEvent+0x260>)
  402672:	781b      	ldrb	r3, [r3, #0]
  402674:	2b02      	cmp	r3, #2
  402676:	d102      	bne.n	40267e <processEvent+0x7e>
			{				
				stateExit_Reset();
  402678:	4b7c      	ldr	r3, [pc, #496]	; (40286c <processEvent+0x26c>)
  40267a:	4798      	blx	r3
  40267c:	e012      	b.n	4026a4 <processEvent+0xa4>
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  40267e:	4b78      	ldr	r3, [pc, #480]	; (402860 <processEvent+0x260>)
  402680:	781b      	ldrb	r3, [r3, #0]
  402682:	2b03      	cmp	r3, #3
  402684:	d102      	bne.n	40268c <processEvent+0x8c>
			{
				stateExit_Idle();
  402686:	4b7a      	ldr	r3, [pc, #488]	; (402870 <processEvent+0x270>)
  402688:	4798      	blx	r3
  40268a:	e00b      	b.n	4026a4 <processEvent+0xa4>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  40268c:	4b74      	ldr	r3, [pc, #464]	; (402860 <processEvent+0x260>)
  40268e:	781b      	ldrb	r3, [r3, #0]
  402690:	2b05      	cmp	r3, #5
  402692:	d102      	bne.n	40269a <processEvent+0x9a>
			{
				stateExit_Error();
  402694:	4b77      	ldr	r3, [pc, #476]	; (402874 <processEvent+0x274>)
  402696:	4798      	blx	r3
  402698:	e004      	b.n	4026a4 <processEvent+0xa4>
			}
			else if(currentSystemState == SYS_STATE_POWER_DOWN)
  40269a:	4b71      	ldr	r3, [pc, #452]	; (402860 <processEvent+0x260>)
  40269c:	781b      	ldrb	r3, [r3, #0]
  40269e:	2b01      	cmp	r3, #1
  4026a0:	d100      	bne.n	4026a4 <processEvent+0xa4>
			{
				//we should already be off, ignore
				break; 
  4026a2:	e169      	b.n	402978 <processEvent+0x378>
			}
			//go to the power down state. 
			stateEntry_PowerDown(); 	
  4026a4:	4b74      	ldr	r3, [pc, #464]	; (402878 <processEvent+0x278>)
  4026a6:	4798      	blx	r3
		}
		break;
  4026a8:	e166      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_RECORD_SWITCH:
		{
			if(currentSystemState == SYS_STATE_IDLE)
  4026aa:	4b6d      	ldr	r3, [pc, #436]	; (402860 <processEvent+0x260>)
  4026ac:	781b      	ldrb	r3, [r3, #0]
  4026ae:	2b03      	cmp	r3, #3
  4026b0:	d104      	bne.n	4026bc <processEvent+0xbc>
			{
				//start recording
				stateExit_Idle();
  4026b2:	4b6f      	ldr	r3, [pc, #444]	; (402870 <processEvent+0x270>)
  4026b4:	4798      	blx	r3
				//go to get accel data first. 
				stateEntry_GetAccelData();
  4026b6:	4b71      	ldr	r3, [pc, #452]	; (40287c <processEvent+0x27c>)
  4026b8:	4798      	blx	r3
  4026ba:	e008      	b.n	4026ce <processEvent+0xce>
				//go to recording state
			}
			else if(currentSystemState == SYS_STATE_RECORDING)
  4026bc:	4b68      	ldr	r3, [pc, #416]	; (402860 <processEvent+0x260>)
  4026be:	781b      	ldrb	r3, [r3, #0]
  4026c0:	2b04      	cmp	r3, #4
  4026c2:	d104      	bne.n	4026ce <processEvent+0xce>
			{
				//stop recording
				stateExit_Recording();
  4026c4:	4b67      	ldr	r3, [pc, #412]	; (402864 <processEvent+0x264>)
  4026c6:	4798      	blx	r3
				//go to IDLE state
				stateEntry_Idle(); 
  4026c8:	4b6d      	ldr	r3, [pc, #436]	; (402880 <processEvent+0x280>)
  4026ca:	4798      	blx	r3
			}
		}
		break;
  4026cc:	e154      	b.n	402978 <processEvent+0x378>
  4026ce:	e153      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_RESET_SWITCH:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  4026d0:	4b63      	ldr	r3, [pc, #396]	; (402860 <processEvent+0x260>)
  4026d2:	781b      	ldrb	r3, [r3, #0]
  4026d4:	2b04      	cmp	r3, #4
  4026d6:	d102      	bne.n	4026de <processEvent+0xde>
			{
				//stop recording
				stateExit_Recording();
  4026d8:	4b62      	ldr	r3, [pc, #392]	; (402864 <processEvent+0x264>)
  4026da:	4798      	blx	r3
  4026dc:	e023      	b.n	402726 <processEvent+0x126>
			}
			else if (currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  4026de:	4b60      	ldr	r3, [pc, #384]	; (402860 <processEvent+0x260>)
  4026e0:	781b      	ldrb	r3, [r3, #0]
  4026e2:	2b06      	cmp	r3, #6
  4026e4:	d104      	bne.n	4026f0 <processEvent+0xf0>
			{
				stateExit_GetAccelData();
  4026e6:	4b60      	ldr	r3, [pc, #384]	; (402868 <processEvent+0x268>)
  4026e8:	4798      	blx	r3
				stateExit_Recording();
  4026ea:	4b5e      	ldr	r3, [pc, #376]	; (402864 <processEvent+0x264>)
  4026ec:	4798      	blx	r3
  4026ee:	e01a      	b.n	402726 <processEvent+0x126>
			}
			else if(currentSystemState == SYS_STATE_RESET)
  4026f0:	4b5b      	ldr	r3, [pc, #364]	; (402860 <processEvent+0x260>)
  4026f2:	781b      	ldrb	r3, [r3, #0]
  4026f4:	2b02      	cmp	r3, #2
  4026f6:	d109      	bne.n	40270c <processEvent+0x10c>
			{

				//Delete the on going Reset task to re-spawn again.
				if (ResetHandle != NULL)
  4026f8:	4b62      	ldr	r3, [pc, #392]	; (402884 <processEvent+0x284>)
  4026fa:	681b      	ldr	r3, [r3, #0]
  4026fc:	2b00      	cmp	r3, #0
  4026fe:	d012      	beq.n	402726 <processEvent+0x126>
				{
					vTaskDelete(ResetHandle);
  402700:	4b60      	ldr	r3, [pc, #384]	; (402884 <processEvent+0x284>)
  402702:	681b      	ldr	r3, [r3, #0]
  402704:	4618      	mov	r0, r3
  402706:	4b60      	ldr	r3, [pc, #384]	; (402888 <processEvent+0x288>)
  402708:	4798      	blx	r3
  40270a:	e00c      	b.n	402726 <processEvent+0x126>
				}
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  40270c:	4b54      	ldr	r3, [pc, #336]	; (402860 <processEvent+0x260>)
  40270e:	781b      	ldrb	r3, [r3, #0]
  402710:	2b03      	cmp	r3, #3
  402712:	d102      	bne.n	40271a <processEvent+0x11a>
			{
				stateExit_Idle();
  402714:	4b56      	ldr	r3, [pc, #344]	; (402870 <processEvent+0x270>)
  402716:	4798      	blx	r3
  402718:	e005      	b.n	402726 <processEvent+0x126>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  40271a:	4b51      	ldr	r3, [pc, #324]	; (402860 <processEvent+0x260>)
  40271c:	781b      	ldrb	r3, [r3, #0]
  40271e:	2b05      	cmp	r3, #5
  402720:	d101      	bne.n	402726 <processEvent+0x126>
			{
				stateExit_Error();
  402722:	4b54      	ldr	r3, [pc, #336]	; (402874 <processEvent+0x274>)
  402724:	4798      	blx	r3
			}
						 
			//start the reset process... 
			if (brainSettings.isLoaded == 1)
  402726:	4b59      	ldr	r3, [pc, #356]	; (40288c <processEvent+0x28c>)
  402728:	681b      	ldr	r3, [r3, #0]
  40272a:	2b01      	cmp	r3, #1
  40272c:	d102      	bne.n	402734 <processEvent+0x134>
			{
				stateEntry_Reset();
  40272e:	4b58      	ldr	r3, [pc, #352]	; (402890 <processEvent+0x290>)
  402730:	4798      	blx	r3
  402732:	e012      	b.n	40275a <processEvent+0x15a>
			}
			else
			{
				if(reloadConfigSettings() == STATUS_PASS)
  402734:	4b57      	ldr	r3, [pc, #348]	; (402894 <processEvent+0x294>)
  402736:	4798      	blx	r3
  402738:	4603      	mov	r3, r0
  40273a:	2b00      	cmp	r3, #0
  40273c:	d10a      	bne.n	402754 <processEvent+0x154>
				{
					if(task_debugLog_OpenFile() == STATUS_PASS)
  40273e:	4b56      	ldr	r3, [pc, #344]	; (402898 <processEvent+0x298>)
  402740:	4798      	blx	r3
  402742:	4603      	mov	r3, r0
  402744:	2b00      	cmp	r3, #0
  402746:	d102      	bne.n	40274e <processEvent+0x14e>
					{
						//perform reset only if loading the settings was successful
						stateEntry_Reset();
  402748:	4b51      	ldr	r3, [pc, #324]	; (402890 <processEvent+0x290>)
  40274a:	4798      	blx	r3
  40274c:	e005      	b.n	40275a <processEvent+0x15a>
					}
					else
					{
						stateEntry_Error();
  40274e:	4b53      	ldr	r3, [pc, #332]	; (40289c <processEvent+0x29c>)
  402750:	4798      	blx	r3
					stateEntry_Error();
				}
			}
			 
		}
		break;
  402752:	e111      	b.n	402978 <processEvent+0x378>
						stateEntry_Error();
					}
				}
				else
				{
					stateEntry_Error();
  402754:	4b51      	ldr	r3, [pc, #324]	; (40289c <processEvent+0x29c>)
  402756:	4798      	blx	r3
				}
			}
			 
		}
		break;
  402758:	e10e      	b.n	402978 <processEvent+0x378>
  40275a:	e10d      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_IMU_DISCONNECT:
		{		
			if(currentSystemState == SYS_STATE_POWER_DOWN)
  40275c:	4b40      	ldr	r3, [pc, #256]	; (402860 <processEvent+0x260>)
  40275e:	781b      	ldrb	r3, [r3, #0]
  402760:	2b01      	cmp	r3, #1
  402762:	d100      	bne.n	402766 <processEvent+0x166>
			{
				//do nothing, this is expected
				break;
  402764:	e108      	b.n	402978 <processEvent+0x378>
			}
			if (currentSystemState == SYS_STATE_ERROR)
  402766:	4b3e      	ldr	r3, [pc, #248]	; (402860 <processEvent+0x260>)
  402768:	781b      	ldrb	r3, [r3, #0]
  40276a:	2b05      	cmp	r3, #5
  40276c:	d100      	bne.n	402770 <processEvent+0x170>
			{
				break;
  40276e:	e103      	b.n	402978 <processEvent+0x378>
			}
		}		
		case SYS_EVENT_OVER_CURRENT:
		case SYS_EVENT_BLE_ERROR:
		case SYS_EVENT_JACK_DETECT:
		if (currentSystemState == SYS_STATE_RESET)
  402770:	4b3b      	ldr	r3, [pc, #236]	; (402860 <processEvent+0x260>)
  402772:	781b      	ldrb	r3, [r3, #0]
  402774:	2b02      	cmp	r3, #2
  402776:	d101      	bne.n	40277c <processEvent+0x17c>
		{
			stateExit_Reset();
  402778:	4b3c      	ldr	r3, [pc, #240]	; (40286c <processEvent+0x26c>)
  40277a:	4798      	blx	r3
		}
		if(currentSystemState == SYS_STATE_RECORDING)
  40277c:	4b38      	ldr	r3, [pc, #224]	; (402860 <processEvent+0x260>)
  40277e:	781b      	ldrb	r3, [r3, #0]
  402780:	2b04      	cmp	r3, #4
  402782:	d102      	bne.n	40278a <processEvent+0x18a>
		{
			//stop recording
			stateExit_Recording();
  402784:	4b37      	ldr	r3, [pc, #220]	; (402864 <processEvent+0x264>)
  402786:	4798      	blx	r3
  402788:	e007      	b.n	40279a <processEvent+0x19a>
		}
		else if (currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  40278a:	4b35      	ldr	r3, [pc, #212]	; (402860 <processEvent+0x260>)
  40278c:	781b      	ldrb	r3, [r3, #0]
  40278e:	2b06      	cmp	r3, #6
  402790:	d103      	bne.n	40279a <processEvent+0x19a>
		{
			stateExit_GetAccelData();
  402792:	4b35      	ldr	r3, [pc, #212]	; (402868 <processEvent+0x268>)
  402794:	4798      	blx	r3
			stateExit_Recording();
  402796:	4b33      	ldr	r3, [pc, #204]	; (402864 <processEvent+0x264>)
  402798:	4798      	blx	r3
		}		
		stateEntry_Error(); 
  40279a:	4b40      	ldr	r3, [pc, #256]	; (40289c <processEvent+0x29c>)
  40279c:	4798      	blx	r3
		break;
  40279e:	e0eb      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_RESET_FAILED:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  4027a0:	4b2f      	ldr	r3, [pc, #188]	; (402860 <processEvent+0x260>)
  4027a2:	781b      	ldrb	r3, [r3, #0]
  4027a4:	2b04      	cmp	r3, #4
  4027a6:	d101      	bne.n	4027ac <processEvent+0x1ac>
			{
				//stop recording.
				stateExit_Recording();
  4027a8:	4b2e      	ldr	r3, [pc, #184]	; (402864 <processEvent+0x264>)
  4027aa:	4798      	blx	r3
			}
			stateEntry_Error(); 			
  4027ac:	4b3b      	ldr	r3, [pc, #236]	; (40289c <processEvent+0x29c>)
  4027ae:	4798      	blx	r3
		}
		break;
  4027b0:	e0e2      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_SD_FILE_ERROR:
		{
			if (currentSystemState == SYS_STATE_RESET)
  4027b2:	4b2b      	ldr	r3, [pc, #172]	; (402860 <processEvent+0x260>)
  4027b4:	781b      	ldrb	r3, [r3, #0]
  4027b6:	2b02      	cmp	r3, #2
  4027b8:	d101      	bne.n	4027be <processEvent+0x1be>
			{
				stateExit_Reset();
  4027ba:	4b2c      	ldr	r3, [pc, #176]	; (40286c <processEvent+0x26c>)
  4027bc:	4798      	blx	r3
			}
			if (currentSystemState == SYS_STATE_RECORDING)
  4027be:	4b28      	ldr	r3, [pc, #160]	; (402860 <processEvent+0x260>)
  4027c0:	781b      	ldrb	r3, [r3, #0]
  4027c2:	2b04      	cmp	r3, #4
  4027c4:	d102      	bne.n	4027cc <processEvent+0x1cc>
			{
				stateExit_Recording();
  4027c6:	4b27      	ldr	r3, [pc, #156]	; (402864 <processEvent+0x264>)
  4027c8:	4798      	blx	r3
  4027ca:	e007      	b.n	4027dc <processEvent+0x1dc>
			}
			else if (currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  4027cc:	4b24      	ldr	r3, [pc, #144]	; (402860 <processEvent+0x260>)
  4027ce:	781b      	ldrb	r3, [r3, #0]
  4027d0:	2b06      	cmp	r3, #6
  4027d2:	d103      	bne.n	4027dc <processEvent+0x1dc>
			{
				stateExit_GetAccelData();
  4027d4:	4b24      	ldr	r3, [pc, #144]	; (402868 <processEvent+0x268>)
  4027d6:	4798      	blx	r3
				stateExit_Recording();
  4027d8:	4b22      	ldr	r3, [pc, #136]	; (402864 <processEvent+0x264>)
  4027da:	4798      	blx	r3
			}
			//SD card was removed clear all file open / loaded flags
			brainSettings.isLoaded = 0;
  4027dc:	4b2b      	ldr	r3, [pc, #172]	; (40288c <processEvent+0x28c>)
  4027de:	2200      	movs	r2, #0
  4027e0:	601a      	str	r2, [r3, #0]
			//get the SD card task to actually close the files. 
			task_sdCard_CloseFile();
  4027e2:	4b2f      	ldr	r3, [pc, #188]	; (4028a0 <processEvent+0x2a0>)
  4027e4:	4798      	blx	r3
			task_debugLog_CloseFile(); 
  4027e6:	4b2f      	ldr	r3, [pc, #188]	; (4028a4 <processEvent+0x2a4>)
  4027e8:	4798      	blx	r3
			vTaskDelay(200); //wait for the files to get closed in the SD card task. 
  4027ea:	20c8      	movs	r0, #200	; 0xc8
  4027ec:	4b2e      	ldr	r3, [pc, #184]	; (4028a8 <processEvent+0x2a8>)
  4027ee:	4798      	blx	r3
			f_mount(LUN_ID_SD_MMC_0_MEM, NULL);
  4027f0:	2000      	movs	r0, #0
  4027f2:	2100      	movs	r1, #0
  4027f4:	4b2d      	ldr	r3, [pc, #180]	; (4028ac <processEvent+0x2ac>)
  4027f6:	4798      	blx	r3
			stateEntry_Error(); 
  4027f8:	4b28      	ldr	r3, [pc, #160]	; (40289c <processEvent+0x29c>)
  4027fa:	4798      	blx	r3
		}
		break;
  4027fc:	e0bc      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_LOW_BATTERY:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  4027fe:	4b18      	ldr	r3, [pc, #96]	; (402860 <processEvent+0x260>)
  402800:	781b      	ldrb	r3, [r3, #0]
  402802:	2b04      	cmp	r3, #4
  402804:	d102      	bne.n	40280c <processEvent+0x20c>
			{
				//stop recording
				stateExit_Recording();
  402806:	4b17      	ldr	r3, [pc, #92]	; (402864 <processEvent+0x264>)
  402808:	4798      	blx	r3
  40280a:	e01c      	b.n	402846 <processEvent+0x246>
			}
			else if (currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  40280c:	4b14      	ldr	r3, [pc, #80]	; (402860 <processEvent+0x260>)
  40280e:	781b      	ldrb	r3, [r3, #0]
  402810:	2b06      	cmp	r3, #6
  402812:	d104      	bne.n	40281e <processEvent+0x21e>
			{
				stateExit_GetAccelData();
  402814:	4b14      	ldr	r3, [pc, #80]	; (402868 <processEvent+0x268>)
  402816:	4798      	blx	r3
				stateExit_Recording();
  402818:	4b12      	ldr	r3, [pc, #72]	; (402864 <processEvent+0x264>)
  40281a:	4798      	blx	r3
  40281c:	e013      	b.n	402846 <processEvent+0x246>
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  40281e:	4b10      	ldr	r3, [pc, #64]	; (402860 <processEvent+0x260>)
  402820:	781b      	ldrb	r3, [r3, #0]
  402822:	2b03      	cmp	r3, #3
  402824:	d102      	bne.n	40282c <processEvent+0x22c>
			{
				stateExit_Idle();
  402826:	4b12      	ldr	r3, [pc, #72]	; (402870 <processEvent+0x270>)
  402828:	4798      	blx	r3
  40282a:	e00c      	b.n	402846 <processEvent+0x246>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  40282c:	4b0c      	ldr	r3, [pc, #48]	; (402860 <processEvent+0x260>)
  40282e:	781b      	ldrb	r3, [r3, #0]
  402830:	2b05      	cmp	r3, #5
  402832:	d102      	bne.n	40283a <processEvent+0x23a>
			{
				stateExit_Error();
  402834:	4b0f      	ldr	r3, [pc, #60]	; (402874 <processEvent+0x274>)
  402836:	4798      	blx	r3
  402838:	e005      	b.n	402846 <processEvent+0x246>
			}
			else if (currentSystemState == SYS_STATE_RESET)
  40283a:	4b09      	ldr	r3, [pc, #36]	; (402860 <processEvent+0x260>)
  40283c:	781b      	ldrb	r3, [r3, #0]
  40283e:	2b02      	cmp	r3, #2
  402840:	d101      	bne.n	402846 <processEvent+0x246>
			{
				stateExit_Reset();
  402842:	4b0a      	ldr	r3, [pc, #40]	; (40286c <processEvent+0x26c>)
  402844:	4798      	blx	r3
			}
			//go to the power down state. 
			lowBatteryBlink();	
  402846:	4b1a      	ldr	r3, [pc, #104]	; (4028b0 <processEvent+0x2b0>)
  402848:	4798      	blx	r3
			stateEntry_PowerDown(); 		
  40284a:	4b0b      	ldr	r3, [pc, #44]	; (402878 <processEvent+0x278>)
  40284c:	4798      	blx	r3
		}
		break;
  40284e:	e093      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_RESET_COMPLETE:
		{
			if(currentSystemState != SYS_STATE_RESET)
  402850:	4b03      	ldr	r3, [pc, #12]	; (402860 <processEvent+0x260>)
  402852:	781b      	ldrb	r3, [r3, #0]
  402854:	2b02      	cmp	r3, #2
  402856:	d000      	beq.n	40285a <processEvent+0x25a>
			{
				//do nothing, this is weird, should not get here. 
				break;
  402858:	e08e      	b.n	402978 <processEvent+0x378>
			}
			//QResetCount++;	//Check if all three Quintics are past the initialization process
			int z;
			for (z=0; z<3; z++)
  40285a:	2300      	movs	r3, #0
  40285c:	60fb      	str	r3, [r7, #12]
  40285e:	e03c      	b.n	4028da <processEvent+0x2da>
  402860:	20003194 	.word	0x20003194
  402864:	00402c75 	.word	0x00402c75
  402868:	00402e75 	.word	0x00402e75
  40286c:	00402c0d 	.word	0x00402c0d
  402870:	00402d05 	.word	0x00402d05
  402874:	00402d95 	.word	0x00402d95
  402878:	004029b5 	.word	0x004029b5
  40287c:	00402dbd 	.word	0x00402dbd
  402880:	00402cbd 	.word	0x00402cbd
  402884:	20003198 	.word	0x20003198
  402888:	0040b1a1 	.word	0x0040b1a1
  40288c:	20000220 	.word	0x20000220
  402890:	00402b7d 	.word	0x00402b7d
  402894:	004030a9 	.word	0x004030a9
  402898:	00402105 	.word	0x00402105
  40289c:	00402d2d 	.word	0x00402d2d
  4028a0:	00402279 	.word	0x00402279
  4028a4:	004022e1 	.word	0x004022e1
  4028a8:	0040b24d 	.word	0x0040b24d
  4028ac:	004088c5 	.word	0x004088c5
  4028b0:	00403369 	.word	0x00403369
			{
				if (eventMsg.data == z)	//check for which Quintic is successfully initialized
  4028b4:	88fb      	ldrh	r3, [r7, #6]
  4028b6:	461a      	mov	r2, r3
  4028b8:	68fb      	ldr	r3, [r7, #12]
  4028ba:	429a      	cmp	r2, r3
  4028bc:	d10a      	bne.n	4028d4 <processEvent+0x2d4>
				{
					ResetStatus |= (1u<<(z));	//Save the result to a result flag
  4028be:	2201      	movs	r2, #1
  4028c0:	68fb      	ldr	r3, [r7, #12]
  4028c2:	fa02 f303 	lsl.w	r3, r2, r3
  4028c6:	b2da      	uxtb	r2, r3
  4028c8:	4b2d      	ldr	r3, [pc, #180]	; (402980 <processEvent+0x380>)
  4028ca:	781b      	ldrb	r3, [r3, #0]
  4028cc:	4313      	orrs	r3, r2
  4028ce:	b2da      	uxtb	r2, r3
  4028d0:	4b2b      	ldr	r3, [pc, #172]	; (402980 <processEvent+0x380>)
  4028d2:	701a      	strb	r2, [r3, #0]
				//do nothing, this is weird, should not get here. 
				break;
			}
			//QResetCount++;	//Check if all three Quintics are past the initialization process
			int z;
			for (z=0; z<3; z++)
  4028d4:	68fb      	ldr	r3, [r7, #12]
  4028d6:	3301      	adds	r3, #1
  4028d8:	60fb      	str	r3, [r7, #12]
  4028da:	68fb      	ldr	r3, [r7, #12]
  4028dc:	2b02      	cmp	r3, #2
  4028de:	dde9      	ble.n	4028b4 <processEvent+0x2b4>
				{
					ResetStatus |= (1u<<(z));	//Save the result to a result flag
				}
			}
			//go to the idle state
			if (QResetCount < 3)	//If not all Quintic were initialized,
  4028e0:	4b28      	ldr	r3, [pc, #160]	; (402984 <processEvent+0x384>)
  4028e2:	781b      	ldrb	r3, [r3, #0]
  4028e4:	2b02      	cmp	r3, #2
  4028e6:	d802      	bhi.n	4028ee <processEvent+0x2ee>
			{
				CheckInitQuintic();	// pass the init command to the next one
  4028e8:	4b27      	ldr	r3, [pc, #156]	; (402988 <processEvent+0x388>)
  4028ea:	4798      	blx	r3
  4028ec:	e00d      	b.n	40290a <processEvent+0x30a>
			}
			else
			{
				if (ResetStatus == vExpectedResetStatus)	//Check if all of them were initialized
  4028ee:	4b24      	ldr	r3, [pc, #144]	; (402980 <processEvent+0x380>)
  4028f0:	781a      	ldrb	r2, [r3, #0]
  4028f2:	4b26      	ldr	r3, [pc, #152]	; (40298c <processEvent+0x38c>)
  4028f4:	781b      	ldrb	r3, [r3, #0]
  4028f6:	429a      	cmp	r2, r3
  4028f8:	d102      	bne.n	402900 <processEvent+0x300>
				{
					//go to the idle state
					stateEntry_Idle();
  4028fa:	4b25      	ldr	r3, [pc, #148]	; (402990 <processEvent+0x390>)
  4028fc:	4798      	blx	r3
  4028fe:	e004      	b.n	40290a <processEvent+0x30a>
				}
				else
				{
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0);	//Assert Reset failed as one or more failed to initialize
  402900:	200b      	movs	r0, #11
  402902:	2100      	movs	r1, #0
  402904:	4b23      	ldr	r3, [pc, #140]	; (402994 <processEvent+0x394>)
  402906:	4798      	blx	r3
				}
			}			
		}
		break;
  402908:	e036      	b.n	402978 <processEvent+0x378>
  40290a:	e035      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_SD_CARD_DETECT:
		{
			if(reloadConfigSettings() == STATUS_PASS)
  40290c:	4b22      	ldr	r3, [pc, #136]	; (402998 <processEvent+0x398>)
  40290e:	4798      	blx	r3
  402910:	4603      	mov	r3, r0
  402912:	2b00      	cmp	r3, #0
  402914:	d10a      	bne.n	40292c <processEvent+0x32c>
			{
				if(task_debugLog_OpenFile() == STATUS_PASS)
  402916:	4b21      	ldr	r3, [pc, #132]	; (40299c <processEvent+0x39c>)
  402918:	4798      	blx	r3
  40291a:	4603      	mov	r3, r0
  40291c:	2b00      	cmp	r3, #0
  40291e:	d102      	bne.n	402926 <processEvent+0x326>
				{
					//perform reset only if loading the settings was successful
					stateEntry_Reset();
  402920:	4b1f      	ldr	r3, [pc, #124]	; (4029a0 <processEvent+0x3a0>)
  402922:	4798      	blx	r3
			else
			{
				stateEntry_Error();
			}
		}
		break;
  402924:	e028      	b.n	402978 <processEvent+0x378>
					//perform reset only if loading the settings was successful
					stateEntry_Reset();
				}
				else
				{
					stateEntry_Error();
  402926:	4b1f      	ldr	r3, [pc, #124]	; (4029a4 <processEvent+0x3a4>)
  402928:	4798      	blx	r3
			else
			{
				stateEntry_Error();
			}
		}
		break;
  40292a:	e025      	b.n	402978 <processEvent+0x378>
					stateEntry_Error();
				}
			}
			else
			{
				stateEntry_Error();
  40292c:	4b1d      	ldr	r3, [pc, #116]	; (4029a4 <processEvent+0x3a4>)
  40292e:	4798      	blx	r3
			}
		}
		break;
  402930:	e022      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_POWER_UP_COMPLETE:
		{
			if(currentSystemState != SYS_STATE_POWER_DOWN)
  402932:	4b1d      	ldr	r3, [pc, #116]	; (4029a8 <processEvent+0x3a8>)
  402934:	781b      	ldrb	r3, [r3, #0]
  402936:	2b01      	cmp	r3, #1
  402938:	d000      	beq.n	40293c <processEvent+0x33c>
			{
				//we should not have gotten this event here
				break;
  40293a:	e01d      	b.n	402978 <processEvent+0x378>
			}
			//first thing to do after the power up is reload config settings 
			if(reloadConfigSettings() == STATUS_PASS)
  40293c:	4b16      	ldr	r3, [pc, #88]	; (402998 <processEvent+0x398>)
  40293e:	4798      	blx	r3
  402940:	4603      	mov	r3, r0
  402942:	2b00      	cmp	r3, #0
  402944:	d10a      	bne.n	40295c <processEvent+0x35c>
			{	
				if(task_debugLog_OpenFile() == STATUS_PASS)
  402946:	4b15      	ldr	r3, [pc, #84]	; (40299c <processEvent+0x39c>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
  40294c:	2b00      	cmp	r3, #0
  40294e:	d102      	bne.n	402956 <processEvent+0x356>
				{
					//perform reset only if loading the settings was successful
					stateEntry_Reset();
  402950:	4b13      	ldr	r3, [pc, #76]	; (4029a0 <processEvent+0x3a0>)
  402952:	4798      	blx	r3
			else
			{
				stateEntry_Error();
			}
		}		
		break; 		
  402954:	e010      	b.n	402978 <processEvent+0x378>
					//perform reset only if loading the settings was successful
					stateEntry_Reset();
				}
				else
				{
					stateEntry_Error();
  402956:	4b13      	ldr	r3, [pc, #76]	; (4029a4 <processEvent+0x3a4>)
  402958:	4798      	blx	r3
			else
			{
				stateEntry_Error();
			}
		}		
		break; 		
  40295a:	e00d      	b.n	402978 <processEvent+0x378>
					stateEntry_Error();
				}
			}
			else
			{
				stateEntry_Error();
  40295c:	4b11      	ldr	r3, [pc, #68]	; (4029a4 <processEvent+0x3a4>)
  40295e:	4798      	blx	r3
			}
		}		
		break; 		
  402960:	e00a      	b.n	402978 <processEvent+0x378>
		case SYS_EVENT_GET_ACCEL_DATA_COMPLETE:
		{
			if(currentSystemState == SYS_STATE_GET_ACCEL_DATA)
  402962:	4b11      	ldr	r3, [pc, #68]	; (4029a8 <processEvent+0x3a8>)
  402964:	781b      	ldrb	r3, [r3, #0]
  402966:	2b06      	cmp	r3, #6
  402968:	d104      	bne.n	402974 <processEvent+0x374>
			{
				stateExit_GetAccelData(); 
  40296a:	4b10      	ldr	r3, [pc, #64]	; (4029ac <processEvent+0x3ac>)
  40296c:	4798      	blx	r3
				stateEntry_Recording(); 				
  40296e:	4b10      	ldr	r3, [pc, #64]	; (4029b0 <processEvent+0x3b0>)
  402970:	4798      	blx	r3
			}
			
		}
		break;
  402972:	e001      	b.n	402978 <processEvent+0x378>
  402974:	e000      	b.n	402978 <processEvent+0x378>
		default:
		//do nothing, should never reach here
		break; 										
  402976:	bf00      	nop
	}
}
  402978:	3710      	adds	r7, #16
  40297a:	46bd      	mov	sp, r7
  40297c:	bd80      	pop	{r7, pc}
  40297e:	bf00      	nop
  402980:	20003195 	.word	0x20003195
  402984:	20003197 	.word	0x20003197
  402988:	00402e9d 	.word	0x00402e9d
  40298c:	20003196 	.word	0x20003196
  402990:	00402cbd 	.word	0x00402cbd
  402994:	00402581 	.word	0x00402581
  402998:	004030a9 	.word	0x004030a9
  40299c:	00402105 	.word	0x00402105
  4029a0:	00402b7d 	.word	0x00402b7d
  4029a4:	00402d2d 	.word	0x00402d2d
  4029a8:	20003194 	.word	0x20003194
  4029ac:	00402e75 	.word	0x00402e75
  4029b0:	00402c2d 	.word	0x00402c2d

004029b4 <stateEntry_PowerDown>:
 * @return void
 ***********************************************************************************************/
//entry and exit functions
//power down function (handles entry and exit)
void stateEntry_PowerDown()
{
  4029b4:	b590      	push	{r4, r7, lr}
  4029b6:	b087      	sub	sp, #28
  4029b8:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH, lboState = DRV_GPIO_PIN_STATE_HIGH;
  4029ba:	2301      	movs	r3, #1
  4029bc:	73fb      	strb	r3, [r7, #15]
  4029be:	2301      	movs	r3, #1
  4029c0:	73bb      	strb	r3, [r7, #14]
	bool pwrSwFlag = FALSE; 
  4029c2:	2300      	movs	r3, #0
  4029c4:	737b      	strb	r3, [r7, #13]
	setCurrentSystemState(SYS_STATE_POWER_DOWN);	
  4029c6:	2001      	movs	r0, #1
  4029c8:	4b55      	ldr	r3, [pc, #340]	; (402b20 <stateEntry_PowerDown+0x16c>)
  4029ca:	4798      	blx	r3
	drv_led_set(DRV_LED_OFF, DRV_LED_SOLID);
  4029cc:	2006      	movs	r0, #6
  4029ce:	2101      	movs	r1, #1
  4029d0:	4b54      	ldr	r3, [pc, #336]	; (402b24 <stateEntry_PowerDown+0x170>)
  4029d2:	4798      	blx	r3
		//drv_gpio_setPinState(quinticConfig[0].resetPin, DRV_GPIO_PIN_STATE_LOW);
		//drv_gpio_setPinState(quinticConfig[1].resetPin, DRV_GPIO_PIN_STATE_LOW);
		//drv_gpio_setPinState(quinticConfig[2].resetPin, DRV_GPIO_PIN_STATE_LOW);
	}
	
	if (firstBoot == FALSE)
  4029d4:	4b54      	ldr	r3, [pc, #336]	; (402b28 <stateEntry_PowerDown+0x174>)
  4029d6:	781b      	ldrb	r3, [r3, #0]
  4029d8:	f083 0301 	eor.w	r3, r3, #1
  4029dc:	b2db      	uxtb	r3, r3
  4029de:	2b00      	cmp	r3, #0
  4029e0:	d050      	beq.n	402a84 <stateEntry_PowerDown+0xd0>
	{
		//disable the interrupts, except for the power button
		//it is assumed that the button has already been held for 5 seconds
		DisconnectImus(&quinticConfig[0]);
  4029e2:	4852      	ldr	r0, [pc, #328]	; (402b2c <stateEntry_PowerDown+0x178>)
  4029e4:	4b52      	ldr	r3, [pc, #328]	; (402b30 <stateEntry_PowerDown+0x17c>)
  4029e6:	4798      	blx	r3
		DisconnectImus(&quinticConfig[1]);
  4029e8:	4852      	ldr	r0, [pc, #328]	; (402b34 <stateEntry_PowerDown+0x180>)
  4029ea:	4b51      	ldr	r3, [pc, #324]	; (402b30 <stateEntry_PowerDown+0x17c>)
  4029ec:	4798      	blx	r3
		DisconnectImus(&quinticConfig[2]);
  4029ee:	4852      	ldr	r0, [pc, #328]	; (402b38 <stateEntry_PowerDown+0x184>)
  4029f0:	4b4f      	ldr	r3, [pc, #316]	; (402b30 <stateEntry_PowerDown+0x17c>)
  4029f2:	4798      	blx	r3
		task_fabSense_stop(&fsConfig);
  4029f4:	4851      	ldr	r0, [pc, #324]	; (402b3c <stateEntry_PowerDown+0x188>)
  4029f6:	4b52      	ldr	r3, [pc, #328]	; (402b40 <stateEntry_PowerDown+0x18c>)
  4029f8:	4798      	blx	r3
		task_debugLog_CloseFile();
  4029fa:	4b52      	ldr	r3, [pc, #328]	; (402b44 <stateEntry_PowerDown+0x190>)
  4029fc:	4798      	blx	r3
	
		//clear the settings loaded bit
		brainSettings.isLoaded = 0;
  4029fe:	4b52      	ldr	r3, [pc, #328]	; (402b48 <stateEntry_PowerDown+0x194>)
  402a00:	2200      	movs	r2, #0
  402a02:	601a      	str	r2, [r3, #0]
	
		//turn off the JACK power supplies (they're negatively asserted) 
		//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
		//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
		toggleJackEnables(DRV_GPIO_PIN_STATE_HIGH);
  402a04:	2001      	movs	r0, #1
  402a06:	4b51      	ldr	r3, [pc, #324]	; (402b4c <stateEntry_PowerDown+0x198>)
  402a08:	4798      	blx	r3
		//Put the BLE's in reset. 
		drv_gpio_setPinState(quinticConfig[0].resetPin, DRV_GPIO_PIN_STATE_LOW);
  402a0a:	4b48      	ldr	r3, [pc, #288]	; (402b2c <stateEntry_PowerDown+0x178>)
  402a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
  402a10:	4618      	mov	r0, r3
  402a12:	2100      	movs	r1, #0
  402a14:	4b4e      	ldr	r3, [pc, #312]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a16:	4798      	blx	r3
		drv_gpio_setPinState(quinticConfig[1].resetPin, DRV_GPIO_PIN_STATE_LOW);
  402a18:	4b44      	ldr	r3, [pc, #272]	; (402b2c <stateEntry_PowerDown+0x178>)
  402a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  402a1e:	4618      	mov	r0, r3
  402a20:	2100      	movs	r1, #0
  402a22:	4b4b      	ldr	r3, [pc, #300]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a24:	4798      	blx	r3
		drv_gpio_setPinState(quinticConfig[2].resetPin, DRV_GPIO_PIN_STATE_LOW);	
  402a26:	4b41      	ldr	r3, [pc, #260]	; (402b2c <stateEntry_PowerDown+0x178>)
  402a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
  402a2c:	4618      	mov	r0, r3
  402a2e:	2100      	movs	r1, #0
  402a30:	4b47      	ldr	r3, [pc, #284]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a32:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_BT_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
  402a34:	2011      	movs	r0, #17
  402a36:	2100      	movs	r1, #0
  402a38:	4b45      	ldr	r3, [pc, #276]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a3a:	4798      	blx	r3
		/* Put the processor to sleep, in this context with the systick timer
		*  dead, we will never leave, so initialization has to be done here too. 
		*   
		*/	
		debugPrintString("Sleep mode enabled\r\n");
  402a3c:	4845      	ldr	r0, [pc, #276]	; (402b54 <stateEntry_PowerDown+0x1a0>)
  402a3e:	4b46      	ldr	r3, [pc, #280]	; (402b58 <stateEntry_PowerDown+0x1a4>)
  402a40:	4798      	blx	r3
		PreSleepProcess();
  402a42:	4b46      	ldr	r3, [pc, #280]	; (402b5c <stateEntry_PowerDown+0x1a8>)
  402a44:	4798      	blx	r3
		//
	
		while (pwrSwFlag == FALSE)	//Stay in sleep mode until wakeup
  402a46:	bf00      	nop
  402a48:	7b7b      	ldrb	r3, [r7, #13]
  402a4a:	f083 0301 	eor.w	r3, r3, #1
  402a4e:	b2db      	uxtb	r3, r3
  402a50:	2b00      	cmp	r3, #0
  402a52:	d013      	beq.n	402a7c <stateEntry_PowerDown+0xc8>
		{
			//if first boot, don't go to sleep, wake up. 
			if(firstBoot == true)
  402a54:	4b34      	ldr	r3, [pc, #208]	; (402b28 <stateEntry_PowerDown+0x174>)
  402a56:	781b      	ldrb	r3, [r3, #0]
  402a58:	2b00      	cmp	r3, #0
  402a5a:	d007      	beq.n	402a6c <stateEntry_PowerDown+0xb8>
			{			
				firstBoot = false; 
  402a5c:	4b32      	ldr	r3, [pc, #200]	; (402b28 <stateEntry_PowerDown+0x174>)
  402a5e:	2200      	movs	r2, #0
  402a60:	701a      	strb	r2, [r3, #0]
				#ifdef USES_NEW_POWER_BOARD
				drv_gpio_setPinState(DRV_GPIO_PIN_PB_GPIO, DRV_GPIO_PIN_STATE_HIGH);
  402a62:	2012      	movs	r0, #18
  402a64:	2101      	movs	r1, #1
  402a66:	4b3a      	ldr	r3, [pc, #232]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a68:	4798      	blx	r3
  402a6a:	e056      	b.n	402b1a <stateEntry_PowerDown+0x166>
				return;
			}
			else
			{
				#ifdef USES_NEW_POWER_BOARD			
				drv_gpio_setPinState(DRV_GPIO_PIN_PB_GPIO, DRV_GPIO_PIN_STATE_LOW);
  402a6c:	2012      	movs	r0, #18
  402a6e:	2100      	movs	r1, #0
  402a70:	4b37      	ldr	r3, [pc, #220]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402a72:	4798      	blx	r3
				while(1)
				{
					vTaskDelay(10); //loop here forever... wait for power board to turn us off
  402a74:	200a      	movs	r0, #10
  402a76:	4b3a      	ldr	r3, [pc, #232]	; (402b60 <stateEntry_PowerDown+0x1ac>)
  402a78:	4798      	blx	r3
				}
  402a7a:	e7fb      	b.n	402a74 <stateEntry_PowerDown+0xc0>
			{
				pwrSwFlag = FALSE;
			}
			#endif
		}
		PostSleepProcess();
  402a7c:	4b39      	ldr	r3, [pc, #228]	; (402b64 <stateEntry_PowerDown+0x1b0>)
  402a7e:	4798      	blx	r3
		//blink BLUE to indicate wake up
		drv_led_activate_timer();
  402a80:	4b39      	ldr	r3, [pc, #228]	; (402b68 <stateEntry_PowerDown+0x1b4>)
  402a82:	4798      	blx	r3
	}
	if (firstBoot == TRUE)
  402a84:	4b28      	ldr	r3, [pc, #160]	; (402b28 <stateEntry_PowerDown+0x174>)
  402a86:	781b      	ldrb	r3, [r3, #0]
  402a88:	2b00      	cmp	r3, #0
  402a8a:	d005      	beq.n	402a98 <stateEntry_PowerDown+0xe4>
	{
		vTaskDelay(100);
  402a8c:	2064      	movs	r0, #100	; 0x64
  402a8e:	4b34      	ldr	r3, [pc, #208]	; (402b60 <stateEntry_PowerDown+0x1ac>)
  402a90:	4798      	blx	r3
		//drv_gpio_setPinState(quinticConfig[0].resetPin, DRV_GPIO_PIN_STATE_HIGH);
		//drv_gpio_setPinState(quinticConfig[1].resetPin, DRV_GPIO_PIN_STATE_HIGH);
		//drv_gpio_setPinState(quinticConfig[2].resetPin, DRV_GPIO_PIN_STATE_HIGH);
		firstBoot = FALSE;
  402a92:	4b25      	ldr	r3, [pc, #148]	; (402b28 <stateEntry_PowerDown+0x174>)
  402a94:	2200      	movs	r2, #0
  402a96:	701a      	strb	r2, [r3, #0]
	}
	
	drv_led_set(DRV_LED_BLUE, DRV_LED_SOLID);
  402a98:	2001      	movs	r0, #1
  402a9a:	2101      	movs	r1, #1
  402a9c:	4b21      	ldr	r3, [pc, #132]	; (402b24 <stateEntry_PowerDown+0x170>)
  402a9e:	4798      	blx	r3
	//enable the jacks
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
	toggleJackEnables(DRV_GPIO_PIN_STATE_LOW);
  402aa0:	2000      	movs	r0, #0
  402aa2:	4b2a      	ldr	r3, [pc, #168]	; (402b4c <stateEntry_PowerDown+0x198>)
  402aa4:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_BT_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  402aa6:	2011      	movs	r0, #17
  402aa8:	2101      	movs	r1, #1
  402aaa:	4b29      	ldr	r3, [pc, #164]	; (402b50 <stateEntry_PowerDown+0x19c>)
  402aac:	4798      	blx	r3
	//clear the queue of any messages
	uint32_t numberOfMessages = 0; 
  402aae:	2300      	movs	r3, #0
  402ab0:	617b      	str	r3, [r7, #20]
	if(queue_stateMachineEvents != NULL)
  402ab2:	4b2e      	ldr	r3, [pc, #184]	; (402b6c <stateEntry_PowerDown+0x1b8>)
  402ab4:	681b      	ldr	r3, [r3, #0]
  402ab6:	2b00      	cmp	r3, #0
  402ab8:	d005      	beq.n	402ac6 <stateEntry_PowerDown+0x112>
	{
		numberOfMessages = uxQueueMessagesWaiting(queue_stateMachineEvents); 
  402aba:	4b2c      	ldr	r3, [pc, #176]	; (402b6c <stateEntry_PowerDown+0x1b8>)
  402abc:	681b      	ldr	r3, [r3, #0]
  402abe:	4618      	mov	r0, r3
  402ac0:	4b2b      	ldr	r3, [pc, #172]	; (402b70 <stateEntry_PowerDown+0x1bc>)
  402ac2:	4798      	blx	r3
  402ac4:	6178      	str	r0, [r7, #20]
	}	
	int i = 0; 
  402ac6:	2300      	movs	r3, #0
  402ac8:	613b      	str	r3, [r7, #16]
	eventMessage_t eventMessage;
	if(numberOfMessages > 0)
  402aca:	697b      	ldr	r3, [r7, #20]
  402acc:	2b00      	cmp	r3, #0
  402ace:	d013      	beq.n	402af8 <stateEntry_PowerDown+0x144>
	{
		for(i=0;i<numberOfMessages;i++)
  402ad0:	2300      	movs	r3, #0
  402ad2:	613b      	str	r3, [r7, #16]
  402ad4:	e00c      	b.n	402af0 <stateEntry_PowerDown+0x13c>
		{
			xQueueReceive(queue_stateMachineEvents, &(eventMessage), 10); 						
  402ad6:	4b25      	ldr	r3, [pc, #148]	; (402b6c <stateEntry_PowerDown+0x1b8>)
  402ad8:	681a      	ldr	r2, [r3, #0]
  402ada:	f107 0308 	add.w	r3, r7, #8
  402ade:	4610      	mov	r0, r2
  402ae0:	4619      	mov	r1, r3
  402ae2:	220a      	movs	r2, #10
  402ae4:	2300      	movs	r3, #0
  402ae6:	4c23      	ldr	r4, [pc, #140]	; (402b74 <stateEntry_PowerDown+0x1c0>)
  402ae8:	47a0      	blx	r4
	}	
	int i = 0; 
	eventMessage_t eventMessage;
	if(numberOfMessages > 0)
	{
		for(i=0;i<numberOfMessages;i++)
  402aea:	693b      	ldr	r3, [r7, #16]
  402aec:	3301      	adds	r3, #1
  402aee:	613b      	str	r3, [r7, #16]
  402af0:	693a      	ldr	r2, [r7, #16]
  402af2:	697b      	ldr	r3, [r7, #20]
  402af4:	429a      	cmp	r2, r3
  402af6:	d3ee      	bcc.n	402ad6 <stateEntry_PowerDown+0x122>
		}
	}
	//TODO check which jacks are connected to determine which IMUs are there	
	
	//send power up complete event
	eventMessage_t msg = {.sysEvent = SYS_EVENT_POWER_UP_COMPLETE, .data = 0};
  402af8:	230c      	movs	r3, #12
  402afa:	713b      	strb	r3, [r7, #4]
  402afc:	2300      	movs	r3, #0
  402afe:	80fb      	strh	r3, [r7, #6]
	if(queue_stateMachineEvents != NULL)
  402b00:	4b1a      	ldr	r3, [pc, #104]	; (402b6c <stateEntry_PowerDown+0x1b8>)
  402b02:	681b      	ldr	r3, [r3, #0]
  402b04:	2b00      	cmp	r3, #0
  402b06:	d008      	beq.n	402b1a <stateEntry_PowerDown+0x166>
	{
		xQueueSendToBack(queue_stateMachineEvents, &msg,5);
  402b08:	4b18      	ldr	r3, [pc, #96]	; (402b6c <stateEntry_PowerDown+0x1b8>)
  402b0a:	681a      	ldr	r2, [r3, #0]
  402b0c:	1d3b      	adds	r3, r7, #4
  402b0e:	4610      	mov	r0, r2
  402b10:	4619      	mov	r1, r3
  402b12:	2205      	movs	r2, #5
  402b14:	2300      	movs	r3, #0
  402b16:	4c18      	ldr	r4, [pc, #96]	; (402b78 <stateEntry_PowerDown+0x1c4>)
  402b18:	47a0      	blx	r4
	}
		
}
  402b1a:	371c      	adds	r7, #28
  402b1c:	46bd      	mov	sp, r7
  402b1e:	bd90      	pop	{r4, r7, pc}
  402b20:	00403335 	.word	0x00403335
  402b24:	0040083d 	.word	0x0040083d
  402b28:	20000188 	.word	0x20000188
  402b2c:	20000508 	.word	0x20000508
  402b30:	00410d61 	.word	0x00410d61
  402b34:	20000544 	.word	0x20000544
  402b38:	20000580 	.word	0x20000580
  402b3c:	200005c0 	.word	0x200005c0
  402b40:	0040f511 	.word	0x0040f511
  402b44:	004022e1 	.word	0x004022e1
  402b48:	20000220 	.word	0x20000220
  402b4c:	00410005 	.word	0x00410005
  402b50:	0040d7b5 	.word	0x0040d7b5
  402b54:	0041cbd4 	.word	0x0041cbd4
  402b58:	004016d5 	.word	0x004016d5
  402b5c:	00403001 	.word	0x00403001
  402b60:	0040b24d 	.word	0x0040b24d
  402b64:	00403065 	.word	0x00403065
  402b68:	00400985 	.word	0x00400985
  402b6c:	20003190 	.word	0x20003190
  402b70:	0040ad79 	.word	0x0040ad79
  402b74:	0040abd5 	.word	0x0040abd5
  402b78:	0040aa11 	.word	0x0040aa11

00402b7c <stateEntry_Reset>:
 * @param void
 * @return void
 ***********************************************************************************************/
//reset entry
void stateEntry_Reset()
{
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b082      	sub	sp, #8
  402b80:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  402b82:	2300      	movs	r3, #0
  402b84:	71fb      	strb	r3, [r7, #7]
	ResetStatus = 0;
  402b86:	4b16      	ldr	r3, [pc, #88]	; (402be0 <stateEntry_Reset+0x64>)
  402b88:	2200      	movs	r2, #0
  402b8a:	701a      	strb	r2, [r3, #0]
	eventMessage_t msg = {.sysEvent = SYS_EVENT_RESET_COMPLETE, .data = 0};
  402b8c:	230a      	movs	r3, #10
  402b8e:	703b      	strb	r3, [r7, #0]
  402b90:	2300      	movs	r3, #0
  402b92:	807b      	strh	r3, [r7, #2]
	//set current state to reset.
	setCurrentSystemState(SYS_STATE_RESET);
  402b94:	2002      	movs	r0, #2
  402b96:	4b13      	ldr	r3, [pc, #76]	; (402be4 <stateEntry_Reset+0x68>)
  402b98:	4798      	blx	r3
	//set LED to blue
	drv_led_set(DRV_LED_BLUE, DRV_LED_FLASH);
  402b9a:	2001      	movs	r0, #1
  402b9c:	2100      	movs	r1, #0
  402b9e:	4b12      	ldr	r3, [pc, #72]	; (402be8 <stateEntry_Reset+0x6c>)
  402ba0:	4798      	blx	r3
	QResetCount = 0;
  402ba2:	4b12      	ldr	r3, [pc, #72]	; (402bec <stateEntry_Reset+0x70>)
  402ba4:	2200      	movs	r2, #0
  402ba6:	701a      	strb	r2, [r3, #0]
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW); 
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW); 
	toggleJackEnables(DRV_GPIO_PIN_STATE_LOW);
	vTaskDelay(400); 
	#else
	vTaskDelay(500);
  402ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402bac:	4b10      	ldr	r3, [pc, #64]	; (402bf0 <stateEntry_Reset+0x74>)
  402bae:	4798      	blx	r3
	#endif
	
	//Reset/init Qn
	CheckInitQuintic();
  402bb0:	4b10      	ldr	r3, [pc, #64]	; (402bf4 <stateEntry_Reset+0x78>)
  402bb2:	4798      	blx	r3
	
	//initialize fabric sense module
	status |= task_fabSense_init(&fsConfig); 
  402bb4:	4810      	ldr	r0, [pc, #64]	; (402bf8 <stateEntry_Reset+0x7c>)
  402bb6:	4b11      	ldr	r3, [pc, #68]	; (402bfc <stateEntry_Reset+0x80>)
  402bb8:	4798      	blx	r3
  402bba:	4603      	mov	r3, r0
  402bbc:	461a      	mov	r2, r3
  402bbe:	79fb      	ldrb	r3, [r7, #7]
  402bc0:	4313      	orrs	r3, r2
  402bc2:	71fb      	strb	r3, [r7, #7]
	if(status != STATUS_PASS)
  402bc4:	79fb      	ldrb	r3, [r7, #7]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d006      	beq.n	402bd8 <stateEntry_Reset+0x5c>
	{
		debugPrintString("FabSense initialization failed\r\n");
  402bca:	480d      	ldr	r0, [pc, #52]	; (402c00 <stateEntry_Reset+0x84>)
  402bcc:	4b0d      	ldr	r3, [pc, #52]	; (402c04 <stateEntry_Reset+0x88>)
  402bce:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0x00);  		
  402bd0:	200b      	movs	r0, #11
  402bd2:	2100      	movs	r1, #0
  402bd4:	4b0c      	ldr	r3, [pc, #48]	; (402c08 <stateEntry_Reset+0x8c>)
  402bd6:	4798      	blx	r3
	}
}
  402bd8:	3708      	adds	r7, #8
  402bda:	46bd      	mov	sp, r7
  402bdc:	bd80      	pop	{r7, pc}
  402bde:	bf00      	nop
  402be0:	20003195 	.word	0x20003195
  402be4:	00403335 	.word	0x00403335
  402be8:	0040083d 	.word	0x0040083d
  402bec:	20003197 	.word	0x20003197
  402bf0:	0040b24d 	.word	0x0040b24d
  402bf4:	00402e9d 	.word	0x00402e9d
  402bf8:	200005c0 	.word	0x200005c0
  402bfc:	0040f4a5 	.word	0x0040f4a5
  402c00:	0041cbec 	.word	0x0041cbec
  402c04:	004016d5 	.word	0x004016d5
  402c08:	00402581 	.word	0x00402581

00402c0c <stateExit_Reset>:
 * @brief This initializes the Exit from Reset state
 * @param void
 * @return void
 ***********************************************************************************************/
void stateExit_Reset()
{
  402c0c:	b580      	push	{r7, lr}
  402c0e:	af00      	add	r7, sp, #0
	if (ResetHandle != NULL)
  402c10:	4b04      	ldr	r3, [pc, #16]	; (402c24 <stateExit_Reset+0x18>)
  402c12:	681b      	ldr	r3, [r3, #0]
  402c14:	2b00      	cmp	r3, #0
  402c16:	d004      	beq.n	402c22 <stateExit_Reset+0x16>
	{
		vTaskDelete(ResetHandle);
  402c18:	4b02      	ldr	r3, [pc, #8]	; (402c24 <stateExit_Reset+0x18>)
  402c1a:	681b      	ldr	r3, [r3, #0]
  402c1c:	4618      	mov	r0, r3
  402c1e:	4b02      	ldr	r3, [pc, #8]	; (402c28 <stateExit_Reset+0x1c>)
  402c20:	4798      	blx	r3
	}
}
  402c22:	bd80      	pop	{r7, pc}
  402c24:	20003198 	.word	0x20003198
  402c28:	0040b1a1 	.word	0x0040b1a1

00402c2c <stateEntry_Recording>:
 * @param void
 * @return void
 ***********************************************************************************************/
//recording entry
void stateEntry_Recording()
{
  402c2c:	b580      	push	{r7, lr}
  402c2e:	af00      	add	r7, sp, #0
	status_t status;
	setCurrentSystemState(SYS_STATE_RECORDING);
  402c30:	2004      	movs	r0, #4
  402c32:	4b08      	ldr	r3, [pc, #32]	; (402c54 <stateEntry_Recording+0x28>)
  402c34:	4798      	blx	r3
	task_dataProcessor_startRecording();
  402c36:	4b08      	ldr	r3, [pc, #32]	; (402c58 <stateEntry_Recording+0x2c>)
  402c38:	4798      	blx	r3
	//send start command to quintics and fabric sense
	task_quintic_startRecording(&quinticConfig[0]);
  402c3a:	4808      	ldr	r0, [pc, #32]	; (402c5c <stateEntry_Recording+0x30>)
  402c3c:	4b08      	ldr	r3, [pc, #32]	; (402c60 <stateEntry_Recording+0x34>)
  402c3e:	4798      	blx	r3
	task_quintic_startRecording(&quinticConfig[1]);
  402c40:	4808      	ldr	r0, [pc, #32]	; (402c64 <stateEntry_Recording+0x38>)
  402c42:	4b07      	ldr	r3, [pc, #28]	; (402c60 <stateEntry_Recording+0x34>)
  402c44:	4798      	blx	r3
	task_quintic_startRecording(&quinticConfig[2]);
  402c46:	4808      	ldr	r0, [pc, #32]	; (402c68 <stateEntry_Recording+0x3c>)
  402c48:	4b05      	ldr	r3, [pc, #20]	; (402c60 <stateEntry_Recording+0x34>)
  402c4a:	4798      	blx	r3
	task_fabSense_start(&fsConfig);				
  402c4c:	4807      	ldr	r0, [pc, #28]	; (402c6c <stateEntry_Recording+0x40>)
  402c4e:	4b08      	ldr	r3, [pc, #32]	; (402c70 <stateEntry_Recording+0x44>)
  402c50:	4798      	blx	r3
}
  402c52:	bd80      	pop	{r7, pc}
  402c54:	00403335 	.word	0x00403335
  402c58:	0040f125 	.word	0x0040f125
  402c5c:	20000508 	.word	0x20000508
  402c60:	00410789 	.word	0x00410789
  402c64:	20000544 	.word	0x20000544
  402c68:	20000580 	.word	0x20000580
  402c6c:	200005c0 	.word	0x200005c0
  402c70:	0040f4d9 	.word	0x0040f4d9

00402c74 <stateExit_Recording>:
 * @param void
 * @return void
 ***********************************************************************************************/
//recording exit
void stateExit_Recording()
{
  402c74:	b580      	push	{r7, lr}
  402c76:	af00      	add	r7, sp, #0
	//send stop command to quintics and fabric sense
	task_quintic_stopRecording(&quinticConfig[0]);
  402c78:	4808      	ldr	r0, [pc, #32]	; (402c9c <stateExit_Recording+0x28>)
  402c7a:	4b09      	ldr	r3, [pc, #36]	; (402ca0 <stateExit_Recording+0x2c>)
  402c7c:	4798      	blx	r3
	task_quintic_stopRecording(&quinticConfig[1]);
  402c7e:	4809      	ldr	r0, [pc, #36]	; (402ca4 <stateExit_Recording+0x30>)
  402c80:	4b07      	ldr	r3, [pc, #28]	; (402ca0 <stateExit_Recording+0x2c>)
  402c82:	4798      	blx	r3
	task_quintic_stopRecording(&quinticConfig[2]);
  402c84:	4808      	ldr	r0, [pc, #32]	; (402ca8 <stateExit_Recording+0x34>)
  402c86:	4b06      	ldr	r3, [pc, #24]	; (402ca0 <stateExit_Recording+0x2c>)
  402c88:	4798      	blx	r3
	task_fabSense_stop(&fsConfig);	
  402c8a:	4808      	ldr	r0, [pc, #32]	; (402cac <stateExit_Recording+0x38>)
  402c8c:	4b08      	ldr	r3, [pc, #32]	; (402cb0 <stateExit_Recording+0x3c>)
  402c8e:	4798      	blx	r3
	//wait for a bit for the data to be processed.
	vTaskDelay(100);
  402c90:	2064      	movs	r0, #100	; 0x64
  402c92:	4b08      	ldr	r3, [pc, #32]	; (402cb4 <stateExit_Recording+0x40>)
  402c94:	4798      	blx	r3
	//close the data file for the current recording
	task_sdCard_CloseFile();	
  402c96:	4b08      	ldr	r3, [pc, #32]	; (402cb8 <stateExit_Recording+0x44>)
  402c98:	4798      	blx	r3
}
  402c9a:	bd80      	pop	{r7, pc}
  402c9c:	20000508 	.word	0x20000508
  402ca0:	004107c1 	.word	0x004107c1
  402ca4:	20000544 	.word	0x20000544
  402ca8:	20000580 	.word	0x20000580
  402cac:	200005c0 	.word	0x200005c0
  402cb0:	0040f511 	.word	0x0040f511
  402cb4:	0040b24d 	.word	0x0040b24d
  402cb8:	00402279 	.word	0x00402279

00402cbc <stateEntry_Idle>:
 * @param void
 * @return void
 ***********************************************************************************************/
//idle entry
void stateEntry_Idle()
{
  402cbc:	b590      	push	{r4, r7, lr}
  402cbe:	b083      	sub	sp, #12
  402cc0:	af02      	add	r7, sp, #8
	setCurrentSystemState(SYS_STATE_IDLE);
  402cc2:	2003      	movs	r0, #3
  402cc4:	4b0a      	ldr	r3, [pc, #40]	; (402cf0 <stateEntry_Idle+0x34>)
  402cc6:	4798      	blx	r3
	xTimerReset(TimeOutTimer, 0); 
  402cc8:	4b0a      	ldr	r3, [pc, #40]	; (402cf4 <stateEntry_Idle+0x38>)
  402cca:	681c      	ldr	r4, [r3, #0]
  402ccc:	4b0a      	ldr	r3, [pc, #40]	; (402cf8 <stateEntry_Idle+0x3c>)
  402cce:	4798      	blx	r3
  402cd0:	4603      	mov	r3, r0
  402cd2:	2200      	movs	r2, #0
  402cd4:	9200      	str	r2, [sp, #0]
  402cd6:	4620      	mov	r0, r4
  402cd8:	2100      	movs	r1, #0
  402cda:	461a      	mov	r2, r3
  402cdc:	2300      	movs	r3, #0
  402cde:	4c07      	ldr	r4, [pc, #28]	; (402cfc <stateEntry_Idle+0x40>)
  402ce0:	47a0      	blx	r4
	drv_led_set(DRV_LED_GREEN, DRV_LED_SOLID);
  402ce2:	2002      	movs	r0, #2
  402ce4:	2101      	movs	r1, #1
  402ce6:	4b06      	ldr	r3, [pc, #24]	; (402d00 <stateEntry_Idle+0x44>)
  402ce8:	4798      	blx	r3
}
  402cea:	3704      	adds	r7, #4
  402cec:	46bd      	mov	sp, r7
  402cee:	bd90      	pop	{r4, r7, pc}
  402cf0:	00403335 	.word	0x00403335
  402cf4:	2000319c 	.word	0x2000319c
  402cf8:	0040b44d 	.word	0x0040b44d
  402cfc:	0040c029 	.word	0x0040c029
  402d00:	0040083d 	.word	0x0040083d

00402d04 <stateExit_Idle>:
 * @param void
 * @return void
 ***********************************************************************************************/
//idle exit
void stateExit_Idle()
{
  402d04:	b590      	push	{r4, r7, lr}
  402d06:	b083      	sub	sp, #12
  402d08:	af02      	add	r7, sp, #8
	xTimerStop(TimeOutTimer, 0); 
  402d0a:	4b06      	ldr	r3, [pc, #24]	; (402d24 <stateExit_Idle+0x20>)
  402d0c:	681b      	ldr	r3, [r3, #0]
  402d0e:	2200      	movs	r2, #0
  402d10:	9200      	str	r2, [sp, #0]
  402d12:	4618      	mov	r0, r3
  402d14:	2101      	movs	r1, #1
  402d16:	2200      	movs	r2, #0
  402d18:	2300      	movs	r3, #0
  402d1a:	4c03      	ldr	r4, [pc, #12]	; (402d28 <stateExit_Idle+0x24>)
  402d1c:	47a0      	blx	r4
}
  402d1e:	3704      	adds	r7, #4
  402d20:	46bd      	mov	sp, r7
  402d22:	bd90      	pop	{r4, r7, pc}
  402d24:	2000319c 	.word	0x2000319c
  402d28:	0040c029 	.word	0x0040c029

00402d2c <stateEntry_Error>:
 * @param void
 * @return void
 ***********************************************************************************************/
//Error state entry
void stateEntry_Error()
{
  402d2c:	b590      	push	{r4, r7, lr}
  402d2e:	b083      	sub	sp, #12
  402d30:	af02      	add	r7, sp, #8
	setCurrentSystemState(SYS_STATE_ERROR);
  402d32:	2005      	movs	r0, #5
  402d34:	4b0f      	ldr	r3, [pc, #60]	; (402d74 <stateEntry_Error+0x48>)
  402d36:	4798      	blx	r3
	debugPrintString(systemStateNameString[currentSystemState]);	
  402d38:	4b0f      	ldr	r3, [pc, #60]	; (402d78 <stateEntry_Error+0x4c>)
  402d3a:	781b      	ldrb	r3, [r3, #0]
  402d3c:	461a      	mov	r2, r3
  402d3e:	4b0f      	ldr	r3, [pc, #60]	; (402d7c <stateEntry_Error+0x50>)
  402d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402d44:	4618      	mov	r0, r3
  402d46:	4b0e      	ldr	r3, [pc, #56]	; (402d80 <stateEntry_Error+0x54>)
  402d48:	4798      	blx	r3
	xTimerReset(TimeOutTimer, 0);
  402d4a:	4b0e      	ldr	r3, [pc, #56]	; (402d84 <stateEntry_Error+0x58>)
  402d4c:	681c      	ldr	r4, [r3, #0]
  402d4e:	4b0e      	ldr	r3, [pc, #56]	; (402d88 <stateEntry_Error+0x5c>)
  402d50:	4798      	blx	r3
  402d52:	4603      	mov	r3, r0
  402d54:	2200      	movs	r2, #0
  402d56:	9200      	str	r2, [sp, #0]
  402d58:	4620      	mov	r0, r4
  402d5a:	2100      	movs	r1, #0
  402d5c:	461a      	mov	r2, r3
  402d5e:	2300      	movs	r3, #0
  402d60:	4c0a      	ldr	r4, [pc, #40]	; (402d8c <stateEntry_Error+0x60>)
  402d62:	47a0      	blx	r4
	drv_led_set(DRV_LED_YELLOW, DRV_LED_FLASH);
  402d64:	2003      	movs	r0, #3
  402d66:	2100      	movs	r1, #0
  402d68:	4b09      	ldr	r3, [pc, #36]	; (402d90 <stateEntry_Error+0x64>)
  402d6a:	4798      	blx	r3
}
  402d6c:	3704      	adds	r7, #4
  402d6e:	46bd      	mov	sp, r7
  402d70:	bd90      	pop	{r4, r7, pc}
  402d72:	bf00      	nop
  402d74:	00403335 	.word	0x00403335
  402d78:	20003194 	.word	0x20003194
  402d7c:	2000016c 	.word	0x2000016c
  402d80:	004016d5 	.word	0x004016d5
  402d84:	2000319c 	.word	0x2000319c
  402d88:	0040b44d 	.word	0x0040b44d
  402d8c:	0040c029 	.word	0x0040c029
  402d90:	0040083d 	.word	0x0040083d

00402d94 <stateExit_Error>:
 * @param void
 * @return void
 ***********************************************************************************************/
//Error state exit
void stateExit_Error()
{
  402d94:	b590      	push	{r4, r7, lr}
  402d96:	b083      	sub	sp, #12
  402d98:	af02      	add	r7, sp, #8
	xTimerStop(TimeOutTimer, 0);
  402d9a:	4b06      	ldr	r3, [pc, #24]	; (402db4 <stateExit_Error+0x20>)
  402d9c:	681b      	ldr	r3, [r3, #0]
  402d9e:	2200      	movs	r2, #0
  402da0:	9200      	str	r2, [sp, #0]
  402da2:	4618      	mov	r0, r3
  402da4:	2101      	movs	r1, #1
  402da6:	2200      	movs	r2, #0
  402da8:	2300      	movs	r3, #0
  402daa:	4c03      	ldr	r4, [pc, #12]	; (402db8 <stateExit_Error+0x24>)
  402dac:	47a0      	blx	r4
}
  402dae:	3704      	adds	r7, #4
  402db0:	46bd      	mov	sp, r7
  402db2:	bd90      	pop	{r4, r7, pc}
  402db4:	2000319c 	.word	0x2000319c
  402db8:	0040c029 	.word	0x0040c029

00402dbc <stateEntry_GetAccelData>:
 * @brief This initializes the Entry to the get acceleration data state
 * @param void
 * @return void
 ***********************************************************************************************/
void stateEntry_GetAccelData()
{
  402dbc:	b580      	push	{r7, lr}
  402dbe:	af00      	add	r7, sp, #0
	task_quintic_sendConnectMsg(&quinticConfig[0]);
  402dc0:	481e      	ldr	r0, [pc, #120]	; (402e3c <stateEntry_GetAccelData+0x80>)
  402dc2:	4b1f      	ldr	r3, [pc, #124]	; (402e40 <stateEntry_GetAccelData+0x84>)
  402dc4:	4798      	blx	r3
	task_quintic_sendConnectMsg(&quinticConfig[1]);
  402dc6:	481f      	ldr	r0, [pc, #124]	; (402e44 <stateEntry_GetAccelData+0x88>)
  402dc8:	4b1d      	ldr	r3, [pc, #116]	; (402e40 <stateEntry_GetAccelData+0x84>)
  402dca:	4798      	blx	r3
	task_quintic_sendConnectMsg(&quinticConfig[2]);
  402dcc:	481e      	ldr	r0, [pc, #120]	; (402e48 <stateEntry_GetAccelData+0x8c>)
  402dce:	4b1c      	ldr	r3, [pc, #112]	; (402e40 <stateEntry_GetAccelData+0x84>)
  402dd0:	4798      	blx	r3
	//wait for a bit.
	vTaskDelay(100);
  402dd2:	2064      	movs	r0, #100	; 0x64
  402dd4:	4b1d      	ldr	r3, [pc, #116]	; (402e4c <stateEntry_GetAccelData+0x90>)
  402dd6:	4798      	blx	r3
	setCurrentSystemState(SYS_STATE_GET_ACCEL_DATA);
  402dd8:	2006      	movs	r0, #6
  402dda:	4b1d      	ldr	r3, [pc, #116]	; (402e50 <stateEntry_GetAccelData+0x94>)
  402ddc:	4798      	blx	r3
	drv_led_set(DRV_LED_RED, DRV_LED_FLASH);
  402dde:	2000      	movs	r0, #0
  402de0:	2100      	movs	r1, #0
  402de2:	4b1c      	ldr	r3, [pc, #112]	; (402e54 <stateEntry_GetAccelData+0x98>)
  402de4:	4798      	blx	r3
	//open new log file
	if(task_sdCard_OpenNewFile() != STATUS_PASS)
  402de6:	4b1c      	ldr	r3, [pc, #112]	; (402e58 <stateEntry_GetAccelData+0x9c>)
  402de8:	4798      	blx	r3
  402dea:	4603      	mov	r3, r0
  402dec:	2b00      	cmp	r3, #0
  402dee:	d007      	beq.n	402e00 <stateEntry_GetAccelData+0x44>
	{
		//this is an error, we should probably do something
		debugPrintString("Cannot open new file to write records\r\n");
  402df0:	481a      	ldr	r0, [pc, #104]	; (402e5c <stateEntry_GetAccelData+0xa0>)
  402df2:	4b1b      	ldr	r3, [pc, #108]	; (402e60 <stateEntry_GetAccelData+0xa4>)
  402df4:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_SD_FILE_ERROR, 0);
  402df6:	2005      	movs	r0, #5
  402df8:	2100      	movs	r1, #0
  402dfa:	4b1a      	ldr	r3, [pc, #104]	; (402e64 <stateEntry_GetAccelData+0xa8>)
  402dfc:	4798      	blx	r3
		return;
  402dfe:	e01c      	b.n	402e3a <stateEntry_GetAccelData+0x7e>
	}
	//wait for user to get into position
	vTaskDelay(2500);
  402e00:	f640 10c4 	movw	r0, #2500	; 0x9c4
  402e04:	4b11      	ldr	r3, [pc, #68]	; (402e4c <stateEntry_GetAccelData+0x90>)
  402e06:	4798      	blx	r3
	if(brainSettings.numberOfAccelFrames > 0)
  402e08:	4b17      	ldr	r3, [pc, #92]	; (402e68 <stateEntry_GetAccelData+0xac>)
  402e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  402e0e:	2b00      	cmp	r3, #0
  402e10:	dd0f      	ble.n	402e32 <stateEntry_GetAccelData+0x76>
	{
		task_quintic_startGetAccelData(&quinticConfig[0]);
  402e12:	480a      	ldr	r0, [pc, #40]	; (402e3c <stateEntry_GetAccelData+0x80>)
  402e14:	4b15      	ldr	r3, [pc, #84]	; (402e6c <stateEntry_GetAccelData+0xb0>)
  402e16:	4798      	blx	r3
		task_quintic_startGetAccelData(&quinticConfig[1]);
  402e18:	480a      	ldr	r0, [pc, #40]	; (402e44 <stateEntry_GetAccelData+0x88>)
  402e1a:	4b14      	ldr	r3, [pc, #80]	; (402e6c <stateEntry_GetAccelData+0xb0>)
  402e1c:	4798      	blx	r3
		task_quintic_startGetAccelData(&quinticConfig[2]);
  402e1e:	480a      	ldr	r0, [pc, #40]	; (402e48 <stateEntry_GetAccelData+0x8c>)
  402e20:	4b12      	ldr	r3, [pc, #72]	; (402e6c <stateEntry_GetAccelData+0xb0>)
  402e22:	4798      	blx	r3
		task_dataProcessor_startGetAccelData(brainSettings.numberOfAccelFrames); 
  402e24:	4b10      	ldr	r3, [pc, #64]	; (402e68 <stateEntry_GetAccelData+0xac>)
  402e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  402e2a:	4618      	mov	r0, r3
  402e2c:	4b10      	ldr	r3, [pc, #64]	; (402e70 <stateEntry_GetAccelData+0xb4>)
  402e2e:	4798      	blx	r3
  402e30:	e003      	b.n	402e3a <stateEntry_GetAccelData+0x7e>
	}
	else
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_GET_ACCEL_DATA_COMPLETE, 0x00); 
  402e32:	200d      	movs	r0, #13
  402e34:	2100      	movs	r1, #0
  402e36:	4b0b      	ldr	r3, [pc, #44]	; (402e64 <stateEntry_GetAccelData+0xa8>)
  402e38:	4798      	blx	r3
	}	
}
  402e3a:	bd80      	pop	{r7, pc}
  402e3c:	20000508 	.word	0x20000508
  402e40:	00410759 	.word	0x00410759
  402e44:	20000544 	.word	0x20000544
  402e48:	20000580 	.word	0x20000580
  402e4c:	0040b24d 	.word	0x0040b24d
  402e50:	00403335 	.word	0x00403335
  402e54:	0040083d 	.word	0x0040083d
  402e58:	00401d05 	.word	0x00401d05
  402e5c:	0041cc10 	.word	0x0041cc10
  402e60:	004016d5 	.word	0x004016d5
  402e64:	00402581 	.word	0x00402581
  402e68:	20000220 	.word	0x20000220
  402e6c:	00410849 	.word	0x00410849
  402e70:	0040f09d 	.word	0x0040f09d

00402e74 <stateExit_GetAccelData>:
 * @brief This initializes the exit from the acceleration data state
 * @param void
 * @return void
 ***********************************************************************************************/
void stateExit_GetAccelData()
{
  402e74:	b580      	push	{r7, lr}
  402e76:	af00      	add	r7, sp, #0
	task_quintic_stopGetAccelData(&quinticConfig[0]);
  402e78:	4804      	ldr	r0, [pc, #16]	; (402e8c <stateExit_GetAccelData+0x18>)
  402e7a:	4b05      	ldr	r3, [pc, #20]	; (402e90 <stateExit_GetAccelData+0x1c>)
  402e7c:	4798      	blx	r3
	task_quintic_stopGetAccelData(&quinticConfig[1]);
  402e7e:	4805      	ldr	r0, [pc, #20]	; (402e94 <stateExit_GetAccelData+0x20>)
  402e80:	4b03      	ldr	r3, [pc, #12]	; (402e90 <stateExit_GetAccelData+0x1c>)
  402e82:	4798      	blx	r3
	task_quintic_stopGetAccelData(&quinticConfig[2]);	
  402e84:	4804      	ldr	r0, [pc, #16]	; (402e98 <stateExit_GetAccelData+0x24>)
  402e86:	4b02      	ldr	r3, [pc, #8]	; (402e90 <stateExit_GetAccelData+0x1c>)
  402e88:	4798      	blx	r3
}
  402e8a:	bd80      	pop	{r7, pc}
  402e8c:	20000508 	.word	0x20000508
  402e90:	00410899 	.word	0x00410899
  402e94:	20000544 	.word	0x20000544
  402e98:	20000580 	.word	0x20000580

00402e9c <CheckInitQuintic>:
 * @brief This creates quintic initializing task for the next  quintic
 * @param void
 * @return void
 ***********************************************************************************************/
static void CheckInitQuintic()
{
  402e9c:	b590      	push	{r4, r7, lr}
  402e9e:	b089      	sub	sp, #36	; 0x24
  402ea0:	af04      	add	r7, sp, #16
	switch(QResetCount)
  402ea2:	4b49      	ldr	r3, [pc, #292]	; (402fc8 <CheckInitQuintic+0x12c>)
  402ea4:	781b      	ldrb	r3, [r3, #0]
  402ea6:	2b01      	cmp	r3, #1
  402ea8:	d030      	beq.n	402f0c <CheckInitQuintic+0x70>
  402eaa:	2b02      	cmp	r3, #2
  402eac:	d05b      	beq.n	402f66 <CheckInitQuintic+0xca>
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d000      	beq.n	402eb4 <CheckInitQuintic+0x18>
			}
			QResetCount = 3;	//the init task has been spawned, move to next quintic.
		break;
		default:
		// do nothing, should never reach here.
		break;
  402eb2:	e086      	b.n	402fc2 <CheckInitQuintic+0x126>
{
	switch(QResetCount)
	{
		//Check if the specific Quintic task is spawned and any IMUs are assigned to it.
		case 0:
			if((quinticConfig[0].isinit) && (quinticConfig[0].expectedNumberOfNods > 0))
  402eb4:	4b45      	ldr	r3, [pc, #276]	; (402fcc <CheckInitQuintic+0x130>)
  402eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402eb8:	2b00      	cmp	r3, #0
  402eba:	d01f      	beq.n	402efc <CheckInitQuintic+0x60>
  402ebc:	4b43      	ldr	r3, [pc, #268]	; (402fcc <CheckInitQuintic+0x130>)
  402ebe:	699b      	ldr	r3, [r3, #24]
  402ec0:	2b00      	cmp	r3, #0
  402ec2:	dd1b      	ble.n	402efc <CheckInitQuintic+0x60>
			{
				//status |= task_quintic_initializeImus(&quinticConfig[i]);
				int retCode = xTaskCreate(task_quintic_initializeImus, "Qi", TASK_IMU_INIT_STACK_SIZE, (void*)&quinticConfig[0], TASK_IMU_INIT_PRIORITY, &ResetHandle );
  402ec4:	2307      	movs	r3, #7
  402ec6:	9300      	str	r3, [sp, #0]
  402ec8:	4b41      	ldr	r3, [pc, #260]	; (402fd0 <CheckInitQuintic+0x134>)
  402eca:	9301      	str	r3, [sp, #4]
  402ecc:	2300      	movs	r3, #0
  402ece:	9302      	str	r3, [sp, #8]
  402ed0:	2300      	movs	r3, #0
  402ed2:	9303      	str	r3, [sp, #12]
  402ed4:	483f      	ldr	r0, [pc, #252]	; (402fd4 <CheckInitQuintic+0x138>)
  402ed6:	4940      	ldr	r1, [pc, #256]	; (402fd8 <CheckInitQuintic+0x13c>)
  402ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
  402edc:	4b3b      	ldr	r3, [pc, #236]	; (402fcc <CheckInitQuintic+0x130>)
  402ede:	4c3f      	ldr	r4, [pc, #252]	; (402fdc <CheckInitQuintic+0x140>)
  402ee0:	47a0      	blx	r4
  402ee2:	60f8      	str	r0, [r7, #12]
				if (retCode != pdPASS)
  402ee4:	68fb      	ldr	r3, [r7, #12]
  402ee6:	2b01      	cmp	r3, #1
  402ee8:	d007      	beq.n	402efa <CheckInitQuintic+0x5e>
				{
					debugPrintString("Failed to create Q0 init task \r\n");
  402eea:	483d      	ldr	r0, [pc, #244]	; (402fe0 <CheckInitQuintic+0x144>)
  402eec:	4b3d      	ldr	r3, [pc, #244]	; (402fe4 <CheckInitQuintic+0x148>)
  402eee:	4798      	blx	r3
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0x00);
  402ef0:	200b      	movs	r0, #11
  402ef2:	2100      	movs	r1, #0
  402ef4:	4b3c      	ldr	r3, [pc, #240]	; (402fe8 <CheckInitQuintic+0x14c>)
  402ef6:	4798      	blx	r3
	switch(QResetCount)
	{
		//Check if the specific Quintic task is spawned and any IMUs are assigned to it.
		case 0:
			if((quinticConfig[0].isinit) && (quinticConfig[0].expectedNumberOfNods > 0))
			{
  402ef8:	e004      	b.n	402f04 <CheckInitQuintic+0x68>
  402efa:	e003      	b.n	402f04 <CheckInitQuintic+0x68>
				}
			}
			else
			{
				//the quintic is absent in the settings file, send an event 
				task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  402efc:	200a      	movs	r0, #10
  402efe:	21ff      	movs	r1, #255	; 0xff
  402f00:	4b39      	ldr	r3, [pc, #228]	; (402fe8 <CheckInitQuintic+0x14c>)
  402f02:	4798      	blx	r3
			}
			QResetCount = 1;	//the init task has been spawned, move to next quintic.
  402f04:	4b30      	ldr	r3, [pc, #192]	; (402fc8 <CheckInitQuintic+0x12c>)
  402f06:	2201      	movs	r2, #1
  402f08:	701a      	strb	r2, [r3, #0]
		break;
  402f0a:	e05a      	b.n	402fc2 <CheckInitQuintic+0x126>
		case 1:
			if ((quinticConfig[1].isinit) && (quinticConfig[1].expectedNumberOfNods > 0))
  402f0c:	4b2f      	ldr	r3, [pc, #188]	; (402fcc <CheckInitQuintic+0x130>)
  402f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  402f10:	2b00      	cmp	r3, #0
  402f12:	d020      	beq.n	402f56 <CheckInitQuintic+0xba>
  402f14:	4b2d      	ldr	r3, [pc, #180]	; (402fcc <CheckInitQuintic+0x130>)
  402f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  402f18:	2b00      	cmp	r3, #0
  402f1a:	dd1c      	ble.n	402f56 <CheckInitQuintic+0xba>
			{
				int retCode = xTaskCreate(task_quintic_initializeImus, "Qi", TASK_IMU_INIT_STACK_SIZE, (void*)&quinticConfig[1], TASK_IMU_INIT_PRIORITY, &ResetHandle );
  402f1c:	2307      	movs	r3, #7
  402f1e:	9300      	str	r3, [sp, #0]
  402f20:	4b2b      	ldr	r3, [pc, #172]	; (402fd0 <CheckInitQuintic+0x134>)
  402f22:	9301      	str	r3, [sp, #4]
  402f24:	2300      	movs	r3, #0
  402f26:	9302      	str	r3, [sp, #8]
  402f28:	2300      	movs	r3, #0
  402f2a:	9303      	str	r3, [sp, #12]
  402f2c:	4829      	ldr	r0, [pc, #164]	; (402fd4 <CheckInitQuintic+0x138>)
  402f2e:	492a      	ldr	r1, [pc, #168]	; (402fd8 <CheckInitQuintic+0x13c>)
  402f30:	f44f 7280 	mov.w	r2, #256	; 0x100
  402f34:	4b2d      	ldr	r3, [pc, #180]	; (402fec <CheckInitQuintic+0x150>)
  402f36:	4c29      	ldr	r4, [pc, #164]	; (402fdc <CheckInitQuintic+0x140>)
  402f38:	47a0      	blx	r4
  402f3a:	60b8      	str	r0, [r7, #8]
				if (retCode != pdPASS)
  402f3c:	68bb      	ldr	r3, [r7, #8]
  402f3e:	2b01      	cmp	r3, #1
  402f40:	d008      	beq.n	402f54 <CheckInitQuintic+0xb8>
				{
					debugPrintStringInt("Failed to create Q1 init task \r\n", retCode);
  402f42:	482b      	ldr	r0, [pc, #172]	; (402ff0 <CheckInitQuintic+0x154>)
  402f44:	68b9      	ldr	r1, [r7, #8]
  402f46:	4b2b      	ldr	r3, [pc, #172]	; (402ff4 <CheckInitQuintic+0x158>)
  402f48:	4798      	blx	r3
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0x00);
  402f4a:	200b      	movs	r0, #11
  402f4c:	2100      	movs	r1, #0
  402f4e:	4b26      	ldr	r3, [pc, #152]	; (402fe8 <CheckInitQuintic+0x14c>)
  402f50:	4798      	blx	r3
			}
			QResetCount = 1;	//the init task has been spawned, move to next quintic.
		break;
		case 1:
			if ((quinticConfig[1].isinit) && (quinticConfig[1].expectedNumberOfNods > 0))
			{
  402f52:	e004      	b.n	402f5e <CheckInitQuintic+0xc2>
  402f54:	e003      	b.n	402f5e <CheckInitQuintic+0xc2>
				}
			}
			else
			{
				//the quintic is absent in the settings file, send an event
				task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  402f56:	200a      	movs	r0, #10
  402f58:	21ff      	movs	r1, #255	; 0xff
  402f5a:	4b23      	ldr	r3, [pc, #140]	; (402fe8 <CheckInitQuintic+0x14c>)
  402f5c:	4798      	blx	r3
			}
			QResetCount = 2;	//the init task has been spawned, move to next quintic.
  402f5e:	4b1a      	ldr	r3, [pc, #104]	; (402fc8 <CheckInitQuintic+0x12c>)
  402f60:	2202      	movs	r2, #2
  402f62:	701a      	strb	r2, [r3, #0]
		break;
  402f64:	e02d      	b.n	402fc2 <CheckInitQuintic+0x126>
		case 2:
			if ((quinticConfig[2].isinit) && (quinticConfig[2].expectedNumberOfNods > 0))
  402f66:	4b19      	ldr	r3, [pc, #100]	; (402fcc <CheckInitQuintic+0x130>)
  402f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	d020      	beq.n	402fb2 <CheckInitQuintic+0x116>
  402f70:	4b16      	ldr	r3, [pc, #88]	; (402fcc <CheckInitQuintic+0x130>)
  402f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  402f76:	2b00      	cmp	r3, #0
  402f78:	dd1b      	ble.n	402fb2 <CheckInitQuintic+0x116>
			{
				int retCode = xTaskCreate(task_quintic_initializeImus, "Qi", TASK_IMU_INIT_STACK_SIZE, (void*)&quinticConfig[2], TASK_IMU_INIT_PRIORITY, &ResetHandle );
  402f7a:	2307      	movs	r3, #7
  402f7c:	9300      	str	r3, [sp, #0]
  402f7e:	4b14      	ldr	r3, [pc, #80]	; (402fd0 <CheckInitQuintic+0x134>)
  402f80:	9301      	str	r3, [sp, #4]
  402f82:	2300      	movs	r3, #0
  402f84:	9302      	str	r3, [sp, #8]
  402f86:	2300      	movs	r3, #0
  402f88:	9303      	str	r3, [sp, #12]
  402f8a:	4812      	ldr	r0, [pc, #72]	; (402fd4 <CheckInitQuintic+0x138>)
  402f8c:	4912      	ldr	r1, [pc, #72]	; (402fd8 <CheckInitQuintic+0x13c>)
  402f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402f92:	4b19      	ldr	r3, [pc, #100]	; (402ff8 <CheckInitQuintic+0x15c>)
  402f94:	4c11      	ldr	r4, [pc, #68]	; (402fdc <CheckInitQuintic+0x140>)
  402f96:	47a0      	blx	r4
  402f98:	6078      	str	r0, [r7, #4]
				if (retCode != pdPASS)
  402f9a:	687b      	ldr	r3, [r7, #4]
  402f9c:	2b01      	cmp	r3, #1
  402f9e:	d007      	beq.n	402fb0 <CheckInitQuintic+0x114>
				{
					debugPrintString("Failed to create Q2 init task \r\n");
  402fa0:	4816      	ldr	r0, [pc, #88]	; (402ffc <CheckInitQuintic+0x160>)
  402fa2:	4b10      	ldr	r3, [pc, #64]	; (402fe4 <CheckInitQuintic+0x148>)
  402fa4:	4798      	blx	r3
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0x00);
  402fa6:	200b      	movs	r0, #11
  402fa8:	2100      	movs	r1, #0
  402faa:	4b0f      	ldr	r3, [pc, #60]	; (402fe8 <CheckInitQuintic+0x14c>)
  402fac:	4798      	blx	r3
			}
			QResetCount = 2;	//the init task has been spawned, move to next quintic.
		break;
		case 2:
			if ((quinticConfig[2].isinit) && (quinticConfig[2].expectedNumberOfNods > 0))
			{
  402fae:	e004      	b.n	402fba <CheckInitQuintic+0x11e>
  402fb0:	e003      	b.n	402fba <CheckInitQuintic+0x11e>
				}
			}
			else
			{
				//the quintic is absent in the settings file, send an event
				task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  402fb2:	200a      	movs	r0, #10
  402fb4:	21ff      	movs	r1, #255	; 0xff
  402fb6:	4b0c      	ldr	r3, [pc, #48]	; (402fe8 <CheckInitQuintic+0x14c>)
  402fb8:	4798      	blx	r3
			}
			QResetCount = 3;	//the init task has been spawned, move to next quintic.
  402fba:	4b03      	ldr	r3, [pc, #12]	; (402fc8 <CheckInitQuintic+0x12c>)
  402fbc:	2203      	movs	r2, #3
  402fbe:	701a      	strb	r2, [r3, #0]
		break;
  402fc0:	bf00      	nop
		default:
		// do nothing, should never reach here.
		break;
	}

}
  402fc2:	3714      	adds	r7, #20
  402fc4:	46bd      	mov	sp, r7
  402fc6:	bd90      	pop	{r4, r7, pc}
  402fc8:	20003197 	.word	0x20003197
  402fcc:	20000508 	.word	0x20000508
  402fd0:	20003198 	.word	0x20003198
  402fd4:	00410449 	.word	0x00410449
  402fd8:	0041cc38 	.word	0x0041cc38
  402fdc:	0040b029 	.word	0x0040b029
  402fe0:	0041cc3c 	.word	0x0041cc3c
  402fe4:	004016d5 	.word	0x004016d5
  402fe8:	00402581 	.word	0x00402581
  402fec:	20000544 	.word	0x20000544
  402ff0:	0041cc60 	.word	0x0041cc60
  402ff4:	004015c1 	.word	0x004015c1
  402ff8:	20000580 	.word	0x20000580
  402ffc:	0041cc84 	.word	0x0041cc84

00403000 <PreSleepProcess>:
 * @brief This does the necessary processing before putting the processor to sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PreSleepProcess()
{
  403000:	b580      	push	{r7, lr}
  403002:	af00      	add	r7, sp, #0
	//supc_disable_brownout_detector(SUPC);	
	//unmount the SD card. 
	static FRESULT res;
	res = f_mount(LUN_ID_SD_MMC_0_MEM, NULL);
  403004:	2000      	movs	r0, #0
  403006:	2100      	movs	r1, #0
  403008:	4b0d      	ldr	r3, [pc, #52]	; (403040 <PreSleepProcess+0x40>)
  40300a:	4798      	blx	r3
  40300c:	4603      	mov	r3, r0
  40300e:	461a      	mov	r2, r3
  403010:	4b0c      	ldr	r3, [pc, #48]	; (403044 <PreSleepProcess+0x44>)
  403012:	701a      	strb	r2, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;	//disable the systick timer
  403014:	4b0c      	ldr	r3, [pc, #48]	; (403048 <PreSleepProcess+0x48>)
  403016:	2205      	movs	r2, #5
  403018:	601a      	str	r2, [r3, #0]
	deInitAllUarts();
  40301a:	4b0c      	ldr	r3, [pc, #48]	; (40304c <PreSleepProcess+0x4c>)
  40301c:	4798      	blx	r3
	drv_gpio_disable_interrupt_all();
  40301e:	4b0c      	ldr	r3, [pc, #48]	; (403050 <PreSleepProcess+0x50>)
  403020:	4798      	blx	r3
	NVIC_DisableIRQ(WDT_IRQn);
  403022:	2004      	movs	r0, #4
  403024:	4b0b      	ldr	r3, [pc, #44]	; (403054 <PreSleepProcess+0x54>)
  403026:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);	
  403028:	2004      	movs	r0, #4
  40302a:	4b0b      	ldr	r3, [pc, #44]	; (403058 <PreSleepProcess+0x58>)
  40302c:	4798      	blx	r3
	drv_gpio_config_interrupt(DRV_GPIO_PIN_PW_SW, DRV_GPIO_INTERRUPT_LOW_EDGE);
  40302e:	2000      	movs	r0, #0
  403030:	2101      	movs	r1, #1
  403032:	4b0a      	ldr	r3, [pc, #40]	; (40305c <PreSleepProcess+0x5c>)
  403034:	4798      	blx	r3
	drv_gpio_enable_interrupt(DRV_GPIO_PIN_PW_SW); 		
  403036:	2000      	movs	r0, #0
  403038:	4b09      	ldr	r3, [pc, #36]	; (403060 <PreSleepProcess+0x60>)
  40303a:	4798      	blx	r3
}
  40303c:	bd80      	pop	{r7, pc}
  40303e:	bf00      	nop
  403040:	004088c5 	.word	0x004088c5
  403044:	200031a5 	.word	0x200031a5
  403048:	e000e010 	.word	0xe000e010
  40304c:	0040cacd 	.word	0x0040cacd
  403050:	0040dab5 	.word	0x0040dab5
  403054:	004023fd 	.word	0x004023fd
  403058:	00402431 	.word	0x00402431
  40305c:	0040d929 	.word	0x0040d929
  403060:	0040da35 	.word	0x0040da35

00403064 <PostSleepProcess>:
 * @brief This does the necessary processing required after waking up the processor from sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PostSleepProcess()
{
  403064:	b580      	push	{r7, lr}
  403066:	af00      	add	r7, sp, #0
	drv_gpio_clear_Int(DRV_GPIO_PIN_PW_SW);	//Clear the interrupt generated by power switch flag
  403068:	2000      	movs	r0, #0
  40306a:	4b08      	ldr	r3, [pc, #32]	; (40308c <PostSleepProcess+0x28>)
  40306c:	4798      	blx	r3
	drv_gpio_initializeAll();
  40306e:	4b08      	ldr	r3, [pc, #32]	; (403090 <PostSleepProcess+0x2c>)
  403070:	4798      	blx	r3
	initAllUarts();
  403072:	4b08      	ldr	r3, [pc, #32]	; (403094 <PostSleepProcess+0x30>)
  403074:	4798      	blx	r3
	debugPrintString("Exit Sleep mode\r\n");
  403076:	4808      	ldr	r0, [pc, #32]	; (403098 <PostSleepProcess+0x34>)
  403078:	4b08      	ldr	r3, [pc, #32]	; (40309c <PostSleepProcess+0x38>)
  40307a:	4798      	blx	r3
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	//enable the systick timer
  40307c:	4b08      	ldr	r3, [pc, #32]	; (4030a0 <PostSleepProcess+0x3c>)
  40307e:	2207      	movs	r2, #7
  403080:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);		
  403082:	2004      	movs	r0, #4
  403084:	4b07      	ldr	r3, [pc, #28]	; (4030a4 <PostSleepProcess+0x40>)
  403086:	4798      	blx	r3
}
  403088:	bd80      	pop	{r7, pc}
  40308a:	bf00      	nop
  40308c:	0040d9fd 	.word	0x0040d9fd
  403090:	0040d52d 	.word	0x0040d52d
  403094:	0040ca79 	.word	0x0040ca79
  403098:	0041cca8 	.word	0x0041cca8
  40309c:	004016d5 	.word	0x004016d5
  4030a0:	e000e010 	.word	0xe000e010
  4030a4:	004023cd 	.word	0x004023cd

004030a8 <reloadConfigSettings>:
 * @brief Reload the config settings from SD card 
 * @param void
 * @return void
 ***********************************************************************************************/
status_t  __attribute__((optimize("O0"))) reloadConfigSettings()
{
  4030a8:	b590      	push	{r4, r7, lr}
  4030aa:	b087      	sub	sp, #28
  4030ac:	af02      	add	r7, sp, #8
	static FATFS fs;
	static FATFS* fs1;	//pointer to FATFS structure used to check free space
	static FRESULT res;
	static DWORD freeClusters, freeSectors, totalSectors;
	status_t result = STATUS_FAIL;
  4030ae:	2301      	movs	r3, #1
  4030b0:	73fb      	strb	r3, [r7, #15]
	Ctrl_status status; 
	drv_gpio_pin_state_t sdCdPinState;
	int i;
	
	drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD, &sdCdPinState);
  4030b2:	1dbb      	adds	r3, r7, #6
  4030b4:	2010      	movs	r0, #16
  4030b6:	4619      	mov	r1, r3
  4030b8:	4b7a      	ldr	r3, [pc, #488]	; (4032a4 <reloadConfigSettings+0x1fc>)
  4030ba:	4798      	blx	r3
	//check the pin value to see if the card is detected. 
	if (sdCdPinState != SD_MMC_0_CD_DETECT_VALUE)
  4030bc:	79bb      	ldrb	r3, [r7, #6]
  4030be:	2b01      	cmp	r3, #1
  4030c0:	d004      	beq.n	4030cc <reloadConfigSettings+0x24>
	{
		//card has not been detected.
		sdInsertWaitTimeoutFlag = FALSE;	//clear the flag for resuse
  4030c2:	4b79      	ldr	r3, [pc, #484]	; (4032a8 <reloadConfigSettings+0x200>)
  4030c4:	2200      	movs	r2, #0
  4030c6:	701a      	strb	r2, [r3, #0]
		return result;
  4030c8:	7bfb      	ldrb	r3, [r7, #15]
  4030ca:	e0e7      	b.n	40329c <reloadConfigSettings+0x1f4>
	}
	//SD-Card present, reconfigure the interrupt to use it for detecting removal
	drv_gpio_config_interrupt(DRV_GPIO_PIN_SD_CD, DRV_GPIO_INTERRUPT_LOW_EDGE);
  4030cc:	2010      	movs	r0, #16
  4030ce:	2101      	movs	r1, #1
  4030d0:	4b76      	ldr	r3, [pc, #472]	; (4032ac <reloadConfigSettings+0x204>)
  4030d2:	4798      	blx	r3
	//initialize the sd card... assuming that the card has not been initialized? 
	sd_mmc_init();
  4030d4:	4b76      	ldr	r3, [pc, #472]	; (4032b0 <reloadConfigSettings+0x208>)
  4030d6:	4798      	blx	r3
	sdTimeOutTimer = xTimerCreate("SD insert tmr", (SD_INSERT_WAIT_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vSdTimeOutTimerCallback);
  4030d8:	4b76      	ldr	r3, [pc, #472]	; (4032b4 <reloadConfigSettings+0x20c>)
  4030da:	9300      	str	r3, [sp, #0]
  4030dc:	4876      	ldr	r0, [pc, #472]	; (4032b8 <reloadConfigSettings+0x210>)
  4030de:	f241 3188 	movw	r1, #5000	; 0x1388
  4030e2:	2200      	movs	r2, #0
  4030e4:	2300      	movs	r3, #0
  4030e6:	4c75      	ldr	r4, [pc, #468]	; (4032bc <reloadConfigSettings+0x214>)
  4030e8:	47a0      	blx	r4
  4030ea:	4602      	mov	r2, r0
  4030ec:	4b74      	ldr	r3, [pc, #464]	; (4032c0 <reloadConfigSettings+0x218>)
  4030ee:	601a      	str	r2, [r3, #0]
	if (sdTimeOutTimer == NULL)
  4030f0:	4b73      	ldr	r3, [pc, #460]	; (4032c0 <reloadConfigSettings+0x218>)
  4030f2:	681b      	ldr	r3, [r3, #0]
  4030f4:	2b00      	cmp	r3, #0
  4030f6:	d102      	bne.n	4030fe <reloadConfigSettings+0x56>
	{
		debugPrintString("Failed to create SD card timer\r\n");
  4030f8:	4872      	ldr	r0, [pc, #456]	; (4032c4 <reloadConfigSettings+0x21c>)
  4030fa:	4b73      	ldr	r3, [pc, #460]	; (4032c8 <reloadConfigSettings+0x220>)
  4030fc:	4798      	blx	r3
	}
	xTimerStart(sdTimeOutTimer, 0);
  4030fe:	4b70      	ldr	r3, [pc, #448]	; (4032c0 <reloadConfigSettings+0x218>)
  403100:	681c      	ldr	r4, [r3, #0]
  403102:	4b72      	ldr	r3, [pc, #456]	; (4032cc <reloadConfigSettings+0x224>)
  403104:	4798      	blx	r3
  403106:	4603      	mov	r3, r0
  403108:	2200      	movs	r2, #0
  40310a:	9200      	str	r2, [sp, #0]
  40310c:	4620      	mov	r0, r4
  40310e:	2100      	movs	r1, #0
  403110:	461a      	mov	r2, r3
  403112:	2300      	movs	r3, #0
  403114:	4c6e      	ldr	r4, [pc, #440]	; (4032d0 <reloadConfigSettings+0x228>)
  403116:	47a0      	blx	r4
	do
	{
		status = sd_mmc_test_unit_ready(0);
  403118:	2000      	movs	r0, #0
  40311a:	4b6e      	ldr	r3, [pc, #440]	; (4032d4 <reloadConfigSettings+0x22c>)
  40311c:	4798      	blx	r3
  40311e:	4603      	mov	r3, r0
  403120:	71fb      	strb	r3, [r7, #7]
		if (CTRL_FAIL == status)
  403122:	79fb      	ldrb	r3, [r7, #7]
  403124:	2b01      	cmp	r3, #1
  403126:	d117      	bne.n	403158 <reloadConfigSettings+0xb0>
		{
			debugPrintString("Card install FAIL\n\r");
  403128:	486b      	ldr	r0, [pc, #428]	; (4032d8 <reloadConfigSettings+0x230>)
  40312a:	4b67      	ldr	r3, [pc, #412]	; (4032c8 <reloadConfigSettings+0x220>)
  40312c:	4798      	blx	r3
			debugPrintString("Please unplug and re-plug the card.\n\r");
  40312e:	486b      	ldr	r0, [pc, #428]	; (4032dc <reloadConfigSettings+0x234>)
  403130:	4b65      	ldr	r3, [pc, #404]	; (4032c8 <reloadConfigSettings+0x220>)
  403132:	4798      	blx	r3
			while ((CTRL_NO_PRESENT != sd_mmc_check(0)) && (sdInsertWaitTimeoutFlag == FALSE))
  403134:	e002      	b.n	40313c <reloadConfigSettings+0x94>
			{
				vTaskDelay(1);
  403136:	2001      	movs	r0, #1
  403138:	4b69      	ldr	r3, [pc, #420]	; (4032e0 <reloadConfigSettings+0x238>)
  40313a:	4798      	blx	r3
		status = sd_mmc_test_unit_ready(0);
		if (CTRL_FAIL == status)
		{
			debugPrintString("Card install FAIL\n\r");
			debugPrintString("Please unplug and re-plug the card.\n\r");
			while ((CTRL_NO_PRESENT != sd_mmc_check(0)) && (sdInsertWaitTimeoutFlag == FALSE))
  40313c:	2000      	movs	r0, #0
  40313e:	4b69      	ldr	r3, [pc, #420]	; (4032e4 <reloadConfigSettings+0x23c>)
  403140:	4798      	blx	r3
  403142:	4603      	mov	r3, r0
  403144:	2b02      	cmp	r3, #2
  403146:	d007      	beq.n	403158 <reloadConfigSettings+0xb0>
  403148:	4b57      	ldr	r3, [pc, #348]	; (4032a8 <reloadConfigSettings+0x200>)
  40314a:	781b      	ldrb	r3, [r3, #0]
  40314c:	b2db      	uxtb	r3, r3
  40314e:	f083 0301 	eor.w	r3, r3, #1
  403152:	b2db      	uxtb	r3, r3
  403154:	2b00      	cmp	r3, #0
  403156:	d1ee      	bne.n	403136 <reloadConfigSettings+0x8e>
			{
				vTaskDelay(1);
			}
		}
		vTaskDelay(1);
  403158:	2001      	movs	r0, #1
  40315a:	4b61      	ldr	r3, [pc, #388]	; (4032e0 <reloadConfigSettings+0x238>)
  40315c:	4798      	blx	r3
	} while ((CTRL_GOOD != status) && (sdInsertWaitTimeoutFlag == FALSE));
  40315e:	79fb      	ldrb	r3, [r7, #7]
  403160:	2b00      	cmp	r3, #0
  403162:	d007      	beq.n	403174 <reloadConfigSettings+0xcc>
  403164:	4b50      	ldr	r3, [pc, #320]	; (4032a8 <reloadConfigSettings+0x200>)
  403166:	781b      	ldrb	r3, [r3, #0]
  403168:	b2db      	uxtb	r3, r3
  40316a:	f083 0301 	eor.w	r3, r3, #1
  40316e:	b2db      	uxtb	r3, r3
  403170:	2b00      	cmp	r3, #0
  403172:	d1d1      	bne.n	403118 <reloadConfigSettings+0x70>
	
	sdInsertWaitTimeoutFlag = FALSE;	//clear the flag for reuse
  403174:	4b4c      	ldr	r3, [pc, #304]	; (4032a8 <reloadConfigSettings+0x200>)
  403176:	2200      	movs	r2, #0
  403178:	701a      	strb	r2, [r3, #0]
	xTimerStop(sdTimeOutTimer, 0);
  40317a:	4b51      	ldr	r3, [pc, #324]	; (4032c0 <reloadConfigSettings+0x218>)
  40317c:	681b      	ldr	r3, [r3, #0]
  40317e:	2200      	movs	r2, #0
  403180:	9200      	str	r2, [sp, #0]
  403182:	4618      	mov	r0, r3
  403184:	2101      	movs	r1, #1
  403186:	2200      	movs	r2, #0
  403188:	2300      	movs	r3, #0
  40318a:	4c51      	ldr	r4, [pc, #324]	; (4032d0 <reloadConfigSettings+0x228>)
  40318c:	47a0      	blx	r4
	xTimerDelete(sdTimeOutTimer, 0);
  40318e:	4b4c      	ldr	r3, [pc, #304]	; (4032c0 <reloadConfigSettings+0x218>)
  403190:	681b      	ldr	r3, [r3, #0]
  403192:	2200      	movs	r2, #0
  403194:	9200      	str	r2, [sp, #0]
  403196:	4618      	mov	r0, r3
  403198:	2103      	movs	r1, #3
  40319a:	2200      	movs	r2, #0
  40319c:	2300      	movs	r3, #0
  40319e:	4c4c      	ldr	r4, [pc, #304]	; (4032d0 <reloadConfigSettings+0x228>)
  4031a0:	47a0      	blx	r4
	
	/*	Mount the SD card	*/
	if(status == CTRL_GOOD)
  4031a2:	79fb      	ldrb	r3, [r7, #7]
  4031a4:	2b00      	cmp	r3, #0
  4031a6:	d178      	bne.n	40329a <reloadConfigSettings+0x1f2>
	{
		memset(&fs, 0, sizeof(FATFS));
  4031a8:	484f      	ldr	r0, [pc, #316]	; (4032e8 <reloadConfigSettings+0x240>)
  4031aa:	2100      	movs	r1, #0
  4031ac:	f44f 720c 	mov.w	r2, #560	; 0x230
  4031b0:	4b4e      	ldr	r3, [pc, #312]	; (4032ec <reloadConfigSettings+0x244>)
  4031b2:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  4031b4:	2000      	movs	r0, #0
  4031b6:	494c      	ldr	r1, [pc, #304]	; (4032e8 <reloadConfigSettings+0x240>)
  4031b8:	4b4d      	ldr	r3, [pc, #308]	; (4032f0 <reloadConfigSettings+0x248>)
  4031ba:	4798      	blx	r3
  4031bc:	4603      	mov	r3, r0
  4031be:	461a      	mov	r2, r3
  4031c0:	4b4c      	ldr	r3, [pc, #304]	; (4032f4 <reloadConfigSettings+0x24c>)
  4031c2:	701a      	strb	r2, [r3, #0]
		if (res == FR_INVALID_DRIVE)
  4031c4:	4b4b      	ldr	r3, [pc, #300]	; (4032f4 <reloadConfigSettings+0x24c>)
  4031c6:	781b      	ldrb	r3, [r3, #0]
  4031c8:	2b0b      	cmp	r3, #11
  4031ca:	d104      	bne.n	4031d6 <reloadConfigSettings+0x12e>
		{
			debugPrintString("Error: Invalid Drive\r\n");
  4031cc:	484a      	ldr	r0, [pc, #296]	; (4032f8 <reloadConfigSettings+0x250>)
  4031ce:	4b3e      	ldr	r3, [pc, #248]	; (4032c8 <reloadConfigSettings+0x220>)
  4031d0:	4798      	blx	r3
			return result;
  4031d2:	7bfb      	ldrb	r3, [r7, #15]
  4031d4:	e062      	b.n	40329c <reloadConfigSettings+0x1f4>
		}
		
		//Check the free space on card
		result = f_getfree("0:", &freeClusters, &fs1);
  4031d6:	4849      	ldr	r0, [pc, #292]	; (4032fc <reloadConfigSettings+0x254>)
  4031d8:	4949      	ldr	r1, [pc, #292]	; (403300 <reloadConfigSettings+0x258>)
  4031da:	4a4a      	ldr	r2, [pc, #296]	; (403304 <reloadConfigSettings+0x25c>)
  4031dc:	4b4a      	ldr	r3, [pc, #296]	; (403308 <reloadConfigSettings+0x260>)
  4031de:	4798      	blx	r3
  4031e0:	4603      	mov	r3, r0
  4031e2:	73fb      	strb	r3, [r7, #15]
		if (result != FR_OK)
  4031e4:	7bfb      	ldrb	r3, [r7, #15]
  4031e6:	2b00      	cmp	r3, #0
  4031e8:	d006      	beq.n	4031f8 <reloadConfigSettings+0x150>
		{
			result = STATUS_FAIL;
  4031ea:	2301      	movs	r3, #1
  4031ec:	73fb      	strb	r3, [r7, #15]
			debugPrintString("Error: Cannot calculate free space\r\n");
  4031ee:	4847      	ldr	r0, [pc, #284]	; (40330c <reloadConfigSettings+0x264>)
  4031f0:	4b35      	ldr	r3, [pc, #212]	; (4032c8 <reloadConfigSettings+0x220>)
  4031f2:	4798      	blx	r3
			return result;
  4031f4:	7bfb      	ldrb	r3, [r7, #15]
  4031f6:	e051      	b.n	40329c <reloadConfigSettings+0x1f4>
		}
		totalSectors = (fs1->n_fatent -2) * fs1->csize;	//only needed to calculate used space
  4031f8:	4b42      	ldr	r3, [pc, #264]	; (403304 <reloadConfigSettings+0x25c>)
  4031fa:	681b      	ldr	r3, [r3, #0]
  4031fc:	699b      	ldr	r3, [r3, #24]
  4031fe:	3b02      	subs	r3, #2
  403200:	4a40      	ldr	r2, [pc, #256]	; (403304 <reloadConfigSettings+0x25c>)
  403202:	6812      	ldr	r2, [r2, #0]
  403204:	7892      	ldrb	r2, [r2, #2]
  403206:	fb02 f203 	mul.w	r2, r2, r3
  40320a:	4b41      	ldr	r3, [pc, #260]	; (403310 <reloadConfigSettings+0x268>)
  40320c:	601a      	str	r2, [r3, #0]
		freeSectors = freeClusters * fs1->csize;	//assuming 512 bytes/sector
  40320e:	4b3d      	ldr	r3, [pc, #244]	; (403304 <reloadConfigSettings+0x25c>)
  403210:	681b      	ldr	r3, [r3, #0]
  403212:	789b      	ldrb	r3, [r3, #2]
  403214:	4a3a      	ldr	r2, [pc, #232]	; (403300 <reloadConfigSettings+0x258>)
  403216:	6812      	ldr	r2, [r2, #0]
  403218:	fb02 f203 	mul.w	r2, r2, r3
  40321c:	4b3d      	ldr	r3, [pc, #244]	; (403314 <reloadConfigSettings+0x26c>)
  40321e:	601a      	str	r2, [r3, #0]
		if ((freeSectors/2) < SD_DISK_SPACE_LOW_THRESHOLD)	
  403220:	4b3c      	ldr	r3, [pc, #240]	; (403314 <reloadConfigSettings+0x26c>)
  403222:	681b      	ldr	r3, [r3, #0]
  403224:	f5b3 2f16 	cmp.w	r3, #614400	; 0x96000
  403228:	d206      	bcs.n	403238 <reloadConfigSettings+0x190>
		{
			result = STATUS_FAIL;
  40322a:	2301      	movs	r3, #1
  40322c:	73fb      	strb	r3, [r7, #15]
			debugPrintString("Error: Low disk space on SD-card\r\n");
  40322e:	483a      	ldr	r0, [pc, #232]	; (403318 <reloadConfigSettings+0x270>)
  403230:	4b25      	ldr	r3, [pc, #148]	; (4032c8 <reloadConfigSettings+0x220>)
  403232:	4798      	blx	r3
			return result;
  403234:	7bfb      	ldrb	r3, [r7, #15]
  403236:	e031      	b.n	40329c <reloadConfigSettings+0x1f4>
		}
		
		//prevent system to go in reset state on button press event after a failed config load
		result = STATUS_PASS;
  403238:	2300      	movs	r3, #0
  40323a:	73fb      	strb	r3, [r7, #15]
		if(loadSettings(SETTINGS_FILENAME) != STATUS_PASS)
  40323c:	4837      	ldr	r0, [pc, #220]	; (40331c <reloadConfigSettings+0x274>)
  40323e:	4b38      	ldr	r3, [pc, #224]	; (403320 <reloadConfigSettings+0x278>)
  403240:	4798      	blx	r3
  403242:	4603      	mov	r3, r0
  403244:	2b00      	cmp	r3, #0
  403246:	d006      	beq.n	403256 <reloadConfigSettings+0x1ae>
		{
			result = STATUS_FAIL;
  403248:	2301      	movs	r3, #1
  40324a:	73fb      	strb	r3, [r7, #15]
			debugPrintString("failed to get read settings\r\n");
  40324c:	4835      	ldr	r0, [pc, #212]	; (403324 <reloadConfigSettings+0x27c>)
  40324e:	4b1e      	ldr	r3, [pc, #120]	; (4032c8 <reloadConfigSettings+0x220>)
  403250:	4798      	blx	r3
			return result;
  403252:	7bfb      	ldrb	r3, [r7, #15]
  403254:	e022      	b.n	40329c <reloadConfigSettings+0x1f4>
		}
		brainSettings.isLoaded = 1;
  403256:	4b34      	ldr	r3, [pc, #208]	; (403328 <reloadConfigSettings+0x280>)
  403258:	2201      	movs	r2, #1
  40325a:	601a      	str	r2, [r3, #0]
		for (i=0; i<3; i++)	//Update the vExpectedResetStatus value according to new settings file
  40325c:	2300      	movs	r3, #0
  40325e:	60bb      	str	r3, [r7, #8]
  403260:	e018      	b.n	403294 <reloadConfigSettings+0x1ec>
		{
			if (quinticConfig[i].expectedNumberOfNods > 0)
  403262:	4932      	ldr	r1, [pc, #200]	; (40332c <reloadConfigSettings+0x284>)
  403264:	68ba      	ldr	r2, [r7, #8]
  403266:	4613      	mov	r3, r2
  403268:	011b      	lsls	r3, r3, #4
  40326a:	1a9b      	subs	r3, r3, r2
  40326c:	009b      	lsls	r3, r3, #2
  40326e:	440b      	add	r3, r1
  403270:	3318      	adds	r3, #24
  403272:	681b      	ldr	r3, [r3, #0]
  403274:	2b00      	cmp	r3, #0
  403276:	dd0a      	ble.n	40328e <reloadConfigSettings+0x1e6>
			{
				vExpectedResetStatus |= (1u<<i);
  403278:	2201      	movs	r2, #1
  40327a:	68bb      	ldr	r3, [r7, #8]
  40327c:	fa02 f303 	lsl.w	r3, r2, r3
  403280:	b2da      	uxtb	r2, r3
  403282:	4b2b      	ldr	r3, [pc, #172]	; (403330 <reloadConfigSettings+0x288>)
  403284:	781b      	ldrb	r3, [r3, #0]
  403286:	4313      	orrs	r3, r2
  403288:	b2da      	uxtb	r2, r3
  40328a:	4b29      	ldr	r3, [pc, #164]	; (403330 <reloadConfigSettings+0x288>)
  40328c:	701a      	strb	r2, [r3, #0]
			result = STATUS_FAIL;
			debugPrintString("failed to get read settings\r\n");
			return result;
		}
		brainSettings.isLoaded = 1;
		for (i=0; i<3; i++)	//Update the vExpectedResetStatus value according to new settings file
  40328e:	68bb      	ldr	r3, [r7, #8]
  403290:	3301      	adds	r3, #1
  403292:	60bb      	str	r3, [r7, #8]
  403294:	68bb      	ldr	r3, [r7, #8]
  403296:	2b02      	cmp	r3, #2
  403298:	dde3      	ble.n	403262 <reloadConfigSettings+0x1ba>
			{
				vExpectedResetStatus |= (1u<<i);
			}
		}
	}
	return result;
  40329a:	7bfb      	ldrb	r3, [r7, #15]
}
  40329c:	4618      	mov	r0, r3
  40329e:	3714      	adds	r7, #20
  4032a0:	46bd      	mov	sp, r7
  4032a2:	bd90      	pop	{r4, r7, pc}
  4032a4:	0040d8a9 	.word	0x0040d8a9
  4032a8:	200031a4 	.word	0x200031a4
  4032ac:	0040d929 	.word	0x0040d929
  4032b0:	004044f5 	.word	0x004044f5
  4032b4:	0040248d 	.word	0x0040248d
  4032b8:	0041ccbc 	.word	0x0041ccbc
  4032bc:	0040bfbd 	.word	0x0040bfbd
  4032c0:	200031a0 	.word	0x200031a0
  4032c4:	0041cccc 	.word	0x0041cccc
  4032c8:	004016d5 	.word	0x004016d5
  4032cc:	0040b44d 	.word	0x0040b44d
  4032d0:	0040c029 	.word	0x0040c029
  4032d4:	004049ad 	.word	0x004049ad
  4032d8:	0041ccf0 	.word	0x0041ccf0
  4032dc:	0041cd04 	.word	0x0041cd04
  4032e0:	0040b24d 	.word	0x0040b24d
  4032e4:	0040453d 	.word	0x0040453d
  4032e8:	200031a8 	.word	0x200031a8
  4032ec:	0041309d 	.word	0x0041309d
  4032f0:	004088c5 	.word	0x004088c5
  4032f4:	200033d8 	.word	0x200033d8
  4032f8:	0041cd2c 	.word	0x0041cd2c
  4032fc:	0041cd44 	.word	0x0041cd44
  403300:	200033dc 	.word	0x200033dc
  403304:	200033e0 	.word	0x200033e0
  403308:	004099b1 	.word	0x004099b1
  40330c:	0041cd48 	.word	0x0041cd48
  403310:	200033e4 	.word	0x200033e4
  403314:	200033e8 	.word	0x200033e8
  403318:	0041cd70 	.word	0x0041cd70
  40331c:	0041cd94 	.word	0x0041cd94
  403320:	0040cc81 	.word	0x0040cc81
  403324:	0041cda4 	.word	0x0041cda4
  403328:	20000220 	.word	0x20000220
  40332c:	20000508 	.word	0x20000508
  403330:	20003196 	.word	0x20003196

00403334 <setCurrentSystemState>:
 * @brief Sets the current system state 
 * @param systemStates_t state
 * @return void
 ***********************************************************************************************/
static void setCurrentSystemState(systemStates_t state)
{
  403334:	b580      	push	{r7, lr}
  403336:	b082      	sub	sp, #8
  403338:	af00      	add	r7, sp, #0
  40333a:	4603      	mov	r3, r0
  40333c:	71fb      	strb	r3, [r7, #7]
	currentSystemState = state; 
  40333e:	4b07      	ldr	r3, [pc, #28]	; (40335c <setCurrentSystemState+0x28>)
  403340:	79fa      	ldrb	r2, [r7, #7]
  403342:	701a      	strb	r2, [r3, #0]
	debugPrintString(systemStateNameString[currentSystemState]);	
  403344:	4b05      	ldr	r3, [pc, #20]	; (40335c <setCurrentSystemState+0x28>)
  403346:	781b      	ldrb	r3, [r3, #0]
  403348:	461a      	mov	r2, r3
  40334a:	4b05      	ldr	r3, [pc, #20]	; (403360 <setCurrentSystemState+0x2c>)
  40334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403350:	4618      	mov	r0, r3
  403352:	4b04      	ldr	r3, [pc, #16]	; (403364 <setCurrentSystemState+0x30>)
  403354:	4798      	blx	r3
}
  403356:	3708      	adds	r7, #8
  403358:	46bd      	mov	sp, r7
  40335a:	bd80      	pop	{r7, pc}
  40335c:	20003194 	.word	0x20003194
  403360:	2000016c 	.word	0x2000016c
  403364:	004016d5 	.word	0x004016d5

00403368 <lowBatteryBlink>:
 * @brief Blink the LED to indicate low battery 
 * @param void
 * @return void
 ***********************************************************************************************/
void lowBatteryBlink()
{
  403368:	b480      	push	{r7}
  40336a:	af00      	add	r7, sp, #0
		delay_ms(LED_BLINK_RATE);
		drv_gpio_setPinState(DRV_GPIO_PIN_PB_GPIO, DRV_GPIO_PIN_STATE_LOW);
		delay_ms(LED_BLINK_RATE);
	}
	#endif
  40336c:	46bd      	mov	sp, r7
  40336e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403372:	4770      	bx	lr

00403374 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  403374:	b480      	push	{r7}
  403376:	b087      	sub	sp, #28
  403378:	af00      	add	r7, sp, #0
  40337a:	60f8      	str	r0, [r7, #12]
  40337c:	8179      	strh	r1, [r7, #10]
  40337e:	813a      	strh	r2, [r7, #8]
  403380:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403382:	897a      	ldrh	r2, [r7, #10]
  403384:	893b      	ldrh	r3, [r7, #8]
  403386:	1ad3      	subs	r3, r2, r3
  403388:	3307      	adds	r3, #7
  40338a:	2b00      	cmp	r3, #0
  40338c:	da00      	bge.n	403390 <SDMMC_UNSTUFF_BITS+0x1c>
  40338e:	3307      	adds	r3, #7
  403390:	10db      	asrs	r3, r3, #3
  403392:	3b01      	subs	r3, #1
  403394:	68fa      	ldr	r2, [r7, #12]
  403396:	4413      	add	r3, r2
  403398:	781b      	ldrb	r3, [r3, #0]
  40339a:	461a      	mov	r2, r3
  40339c:	893b      	ldrh	r3, [r7, #8]
  40339e:	f003 0307 	and.w	r3, r3, #7
  4033a2:	fa42 f303 	asr.w	r3, r2, r3
  4033a6:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  4033a8:	893b      	ldrh	r3, [r7, #8]
  4033aa:	f003 0207 	and.w	r2, r3, #7
  4033ae:	79fb      	ldrb	r3, [r7, #7]
  4033b0:	4413      	add	r3, r2
  4033b2:	2b08      	cmp	r3, #8
  4033b4:	dd16      	ble.n	4033e4 <SDMMC_UNSTUFF_BITS+0x70>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4033b6:	897a      	ldrh	r2, [r7, #10]
  4033b8:	893b      	ldrh	r3, [r7, #8]
  4033ba:	1ad3      	subs	r3, r2, r3
  4033bc:	3307      	adds	r3, #7
  4033be:	2b00      	cmp	r3, #0
  4033c0:	da00      	bge.n	4033c4 <SDMMC_UNSTUFF_BITS+0x50>
  4033c2:	3307      	adds	r3, #7
  4033c4:	10db      	asrs	r3, r3, #3
  4033c6:	3b02      	subs	r3, #2
  4033c8:	68fa      	ldr	r2, [r7, #12]
  4033ca:	4413      	add	r3, r2
  4033cc:	781b      	ldrb	r3, [r3, #0]
  4033ce:	461a      	mov	r2, r3
  4033d0:	893b      	ldrh	r3, [r7, #8]
  4033d2:	f003 0307 	and.w	r3, r3, #7
  4033d6:	f1c3 0308 	rsb	r3, r3, #8
  4033da:	fa02 f303 	lsl.w	r3, r2, r3
  4033de:	697a      	ldr	r2, [r7, #20]
  4033e0:	4313      	orrs	r3, r2
  4033e2:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  4033e4:	893b      	ldrh	r3, [r7, #8]
  4033e6:	f003 0207 	and.w	r2, r3, #7
  4033ea:	79fb      	ldrb	r3, [r7, #7]
  4033ec:	4413      	add	r3, r2
  4033ee:	2b10      	cmp	r3, #16
  4033f0:	dd16      	ble.n	403420 <SDMMC_UNSTUFF_BITS+0xac>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4033f2:	897a      	ldrh	r2, [r7, #10]
  4033f4:	893b      	ldrh	r3, [r7, #8]
  4033f6:	1ad3      	subs	r3, r2, r3
  4033f8:	3307      	adds	r3, #7
  4033fa:	2b00      	cmp	r3, #0
  4033fc:	da00      	bge.n	403400 <SDMMC_UNSTUFF_BITS+0x8c>
  4033fe:	3307      	adds	r3, #7
  403400:	10db      	asrs	r3, r3, #3
  403402:	3b03      	subs	r3, #3
  403404:	68fa      	ldr	r2, [r7, #12]
  403406:	4413      	add	r3, r2
  403408:	781b      	ldrb	r3, [r3, #0]
  40340a:	461a      	mov	r2, r3
  40340c:	893b      	ldrh	r3, [r7, #8]
  40340e:	f003 0307 	and.w	r3, r3, #7
  403412:	f1c3 0310 	rsb	r3, r3, #16
  403416:	fa02 f303 	lsl.w	r3, r2, r3
  40341a:	697a      	ldr	r2, [r7, #20]
  40341c:	4313      	orrs	r3, r2
  40341e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  403420:	893b      	ldrh	r3, [r7, #8]
  403422:	f003 0207 	and.w	r2, r3, #7
  403426:	79fb      	ldrb	r3, [r7, #7]
  403428:	4413      	add	r3, r2
  40342a:	2b10      	cmp	r3, #16
  40342c:	dd16      	ble.n	40345c <SDMMC_UNSTUFF_BITS+0xe8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40342e:	897a      	ldrh	r2, [r7, #10]
  403430:	893b      	ldrh	r3, [r7, #8]
  403432:	1ad3      	subs	r3, r2, r3
  403434:	3307      	adds	r3, #7
  403436:	2b00      	cmp	r3, #0
  403438:	da00      	bge.n	40343c <SDMMC_UNSTUFF_BITS+0xc8>
  40343a:	3307      	adds	r3, #7
  40343c:	10db      	asrs	r3, r3, #3
  40343e:	3b03      	subs	r3, #3
  403440:	68fa      	ldr	r2, [r7, #12]
  403442:	4413      	add	r3, r2
  403444:	781b      	ldrb	r3, [r3, #0]
  403446:	461a      	mov	r2, r3
  403448:	893b      	ldrh	r3, [r7, #8]
  40344a:	f003 0307 	and.w	r3, r3, #7
  40344e:	f1c3 0310 	rsb	r3, r3, #16
  403452:	fa02 f303 	lsl.w	r3, r2, r3
  403456:	697a      	ldr	r2, [r7, #20]
  403458:	4313      	orrs	r3, r2
  40345a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  40345c:	79fb      	ldrb	r3, [r7, #7]
  40345e:	2201      	movs	r2, #1
  403460:	fa02 f303 	lsl.w	r3, r2, r3
  403464:	3b01      	subs	r3, #1
  403466:	697a      	ldr	r2, [r7, #20]
  403468:	4013      	ands	r3, r2
  40346a:	617b      	str	r3, [r7, #20]
	return value;
  40346c:	697b      	ldr	r3, [r7, #20]
}
  40346e:	4618      	mov	r0, r3
  403470:	371c      	adds	r7, #28
  403472:	46bd      	mov	sp, r7
  403474:	f85d 7b04 	ldr.w	r7, [sp], #4
  403478:	4770      	bx	lr
  40347a:	bf00      	nop

0040347c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40347c:	b480      	push	{r7}
  40347e:	b083      	sub	sp, #12
  403480:	af00      	add	r7, sp, #0
  403482:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403484:	687b      	ldr	r3, [r7, #4]
  403486:	2b07      	cmp	r3, #7
  403488:	d825      	bhi.n	4034d6 <osc_get_rate+0x5a>
  40348a:	a201      	add	r2, pc, #4	; (adr r2, 403490 <osc_get_rate+0x14>)
  40348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403490:	004034b1 	.word	0x004034b1
  403494:	004034b7 	.word	0x004034b7
  403498:	004034bd 	.word	0x004034bd
  40349c:	004034c3 	.word	0x004034c3
  4034a0:	004034c7 	.word	0x004034c7
  4034a4:	004034cb 	.word	0x004034cb
  4034a8:	004034cf 	.word	0x004034cf
  4034ac:	004034d3 	.word	0x004034d3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4034b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4034b4:	e010      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034ba:	e00d      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4034bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034c0:	e00a      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4034c2:	4b08      	ldr	r3, [pc, #32]	; (4034e4 <osc_get_rate+0x68>)
  4034c4:	e008      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4034c6:	4b08      	ldr	r3, [pc, #32]	; (4034e8 <osc_get_rate+0x6c>)
  4034c8:	e006      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4034ca:	4b08      	ldr	r3, [pc, #32]	; (4034ec <osc_get_rate+0x70>)
  4034cc:	e004      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4034ce:	4b08      	ldr	r3, [pc, #32]	; (4034f0 <osc_get_rate+0x74>)
  4034d0:	e002      	b.n	4034d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4034d2:	4b07      	ldr	r3, [pc, #28]	; (4034f0 <osc_get_rate+0x74>)
  4034d4:	e000      	b.n	4034d8 <osc_get_rate+0x5c>
	}

	return 0;
  4034d6:	2300      	movs	r3, #0
}
  4034d8:	4618      	mov	r0, r3
  4034da:	370c      	adds	r7, #12
  4034dc:	46bd      	mov	sp, r7
  4034de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4034e2:	4770      	bx	lr
  4034e4:	003d0900 	.word	0x003d0900
  4034e8:	007a1200 	.word	0x007a1200
  4034ec:	00b71b00 	.word	0x00b71b00
  4034f0:	00f42400 	.word	0x00f42400

004034f4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4034f4:	b580      	push	{r7, lr}
  4034f6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4034f8:	2006      	movs	r0, #6
  4034fa:	4b04      	ldr	r3, [pc, #16]	; (40350c <sysclk_get_main_hz+0x18>)
  4034fc:	4798      	blx	r3
  4034fe:	4602      	mov	r2, r0
  403500:	4613      	mov	r3, r2
  403502:	011b      	lsls	r3, r3, #4
  403504:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403506:	4618      	mov	r0, r3
  403508:	bd80      	pop	{r7, pc}
  40350a:	bf00      	nop
  40350c:	0040347d 	.word	0x0040347d

00403510 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  403510:	b580      	push	{r7, lr}
  403512:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403514:	4b02      	ldr	r3, [pc, #8]	; (403520 <sysclk_get_cpu_hz+0x10>)
  403516:	4798      	blx	r3
  403518:	4603      	mov	r3, r0
  40351a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40351c:	4618      	mov	r0, r3
  40351e:	bd80      	pop	{r7, pc}
  403520:	004034f5 	.word	0x004034f5

00403524 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  403524:	b480      	push	{r7}
  403526:	b089      	sub	sp, #36	; 0x24
  403528:	af00      	add	r7, sp, #0
  40352a:	6078      	str	r0, [r7, #4]
  40352c:	687b      	ldr	r3, [r7, #4]
  40352e:	61fb      	str	r3, [r7, #28]
  403530:	69fb      	ldr	r3, [r7, #28]
  403532:	61bb      	str	r3, [r7, #24]
  403534:	69bb      	ldr	r3, [r7, #24]
  403536:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403538:	697b      	ldr	r3, [r7, #20]
  40353a:	095b      	lsrs	r3, r3, #5
  40353c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40353e:	693b      	ldr	r3, [r7, #16]
  403540:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403544:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403548:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40354a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40354c:	69fb      	ldr	r3, [r7, #28]
  40354e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403550:	68fb      	ldr	r3, [r7, #12]
  403552:	f003 031f 	and.w	r3, r3, #31
  403556:	2101      	movs	r1, #1
  403558:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40355c:	4013      	ands	r3, r2
  40355e:	2b00      	cmp	r3, #0
  403560:	bf0c      	ite	eq
  403562:	2300      	moveq	r3, #0
  403564:	2301      	movne	r3, #1
  403566:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  403568:	4618      	mov	r0, r3
  40356a:	3724      	adds	r7, #36	; 0x24
  40356c:	46bd      	mov	sp, r7
  40356e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403572:	4770      	bx	lr

00403574 <SD_MMC_START_TIMEOUT>:
#  ifdef FREERTOS_USED
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
  403574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  403578:	af00      	add	r7, sp, #0
	if (!SysTick->CTRL) {
  40357a:	4b2b      	ldr	r3, [pc, #172]	; (403628 <SD_MMC_START_TIMEOUT+0xb4>)
  40357c:	681b      	ldr	r3, [r3, #0]
  40357e:	2b00      	cmp	r3, #0
  403580:	d113      	bne.n	4035aa <SD_MMC_START_TIMEOUT+0x36>
		sd_mmc_sam_systick_used = true;
  403582:	4b2a      	ldr	r3, [pc, #168]	; (40362c <SD_MMC_START_TIMEOUT+0xb8>)
  403584:	2201      	movs	r2, #1
  403586:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  403588:	4c27      	ldr	r4, [pc, #156]	; (403628 <SD_MMC_START_TIMEOUT+0xb4>)
  40358a:	4b29      	ldr	r3, [pc, #164]	; (403630 <SD_MMC_START_TIMEOUT+0xbc>)
  40358c:	4798      	blx	r3
  40358e:	4602      	mov	r2, r0
  403590:	4b28      	ldr	r3, [pc, #160]	; (403634 <SD_MMC_START_TIMEOUT+0xc0>)
  403592:	fba3 1302 	umull	r1, r3, r3, r2
  403596:	0a5b      	lsrs	r3, r3, #9
				* SD_MMC_DEBOUNCE_TIMEOUT;
  403598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40359c:	fb02 f303 	mul.w	r3, r2, r3

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  4035a0:	6063      	str	r3, [r4, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  4035a2:	4b21      	ldr	r3, [pc, #132]	; (403628 <SD_MMC_START_TIMEOUT+0xb4>)
  4035a4:	2201      	movs	r2, #1
  4035a6:	601a      	str	r2, [r3, #0]
  4035a8:	e03b      	b.n	403622 <SD_MMC_START_TIMEOUT+0xae>
	} else {
		sd_mmc_sam_systick_used = false;
  4035aa:	4b20      	ldr	r3, [pc, #128]	; (40362c <SD_MMC_START_TIMEOUT+0xb8>)
  4035ac:	2200      	movs	r2, #0
  4035ae:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  4035b0:	4b1f      	ldr	r3, [pc, #124]	; (403630 <SD_MMC_START_TIMEOUT+0xbc>)
  4035b2:	4798      	blx	r3
  4035b4:	4603      	mov	r3, r0
  4035b6:	4618      	mov	r0, r3
  4035b8:	f04f 0100 	mov.w	r1, #0
  4035bc:	4602      	mov	r2, r0
  4035be:	460b      	mov	r3, r1
  4035c0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  4035c4:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  4035c8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  4035cc:	4652      	mov	r2, sl
  4035ce:	465b      	mov	r3, fp
  4035d0:	015d      	lsls	r5, r3, #5
  4035d2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4035d6:	0154      	lsls	r4, r2, #5
  4035d8:	1aa4      	subs	r4, r4, r2
  4035da:	eb65 0503 	sbc.w	r5, r5, r3
  4035de:	1824      	adds	r4, r4, r0
  4035e0:	eb45 0501 	adc.w	r5, r5, r1
  4035e4:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  4035e8:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  4035ec:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  4035f0:	4644      	mov	r4, r8
  4035f2:	464d      	mov	r5, r9
  4035f4:	4620      	mov	r0, r4
  4035f6:	4629      	mov	r1, r5
  4035f8:	f243 62af 	movw	r2, #13999	; 0x36af
  4035fc:	f04f 0300 	mov.w	r3, #0
  403600:	1812      	adds	r2, r2, r0
  403602:	eb43 0301 	adc.w	r3, r3, r1
  403606:	4c0c      	ldr	r4, [pc, #48]	; (403638 <SD_MMC_START_TIMEOUT+0xc4>)
  403608:	4610      	mov	r0, r2
  40360a:	4619      	mov	r1, r3
  40360c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403610:	f04f 0300 	mov.w	r3, #0
  403614:	47a0      	blx	r4
  403616:	4602      	mov	r2, r0
  403618:	460b      	mov	r3, r1
  40361a:	4613      	mov	r3, r2
  40361c:	4618      	mov	r0, r3
  40361e:	4b07      	ldr	r3, [pc, #28]	; (40363c <SD_MMC_START_TIMEOUT+0xc8>)
  403620:	4798      	blx	r3
#endif
	}
}
  403622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  403626:	bf00      	nop
  403628:	e000e010 	.word	0xe000e010
  40362c:	200033f8 	.word	0x200033f8
  403630:	00403511 	.word	0x00403511
  403634:	10624dd3 	.word	0x10624dd3
  403638:	004123ed 	.word	0x004123ed
  40363c:	200000f5 	.word	0x200000f5

00403640 <SD_MMC_IS_TIMEOUT>:

static inline bool SD_MMC_IS_TIMEOUT(void)
{
  403640:	b480      	push	{r7}
  403642:	af00      	add	r7, sp, #0
	if (!sd_mmc_sam_systick_used) {
  403644:	4b0c      	ldr	r3, [pc, #48]	; (403678 <SD_MMC_IS_TIMEOUT+0x38>)
  403646:	781b      	ldrb	r3, [r3, #0]
  403648:	f083 0301 	eor.w	r3, r3, #1
  40364c:	b2db      	uxtb	r3, r3
  40364e:	2b00      	cmp	r3, #0
  403650:	d001      	beq.n	403656 <SD_MMC_IS_TIMEOUT+0x16>
#ifdef FREERTOS_USED
		portTickType xTicksToWait =
				SD_MMC_DEBOUNCE_TIMEOUT / portTICK_RATE_MS;
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
  403652:	2301      	movs	r3, #1
  403654:	e00b      	b.n	40366e <SD_MMC_IS_TIMEOUT+0x2e>
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  403656:	4b09      	ldr	r3, [pc, #36]	; (40367c <SD_MMC_IS_TIMEOUT+0x3c>)
  403658:	681b      	ldr	r3, [r3, #0]
  40365a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40365e:	2b00      	cmp	r3, #0
  403660:	d004      	beq.n	40366c <SD_MMC_IS_TIMEOUT+0x2c>
		SysTick->CTRL = 0;
  403662:	4b06      	ldr	r3, [pc, #24]	; (40367c <SD_MMC_IS_TIMEOUT+0x3c>)
  403664:	2200      	movs	r2, #0
  403666:	601a      	str	r2, [r3, #0]
		return true;
  403668:	2301      	movs	r3, #1
  40366a:	e000      	b.n	40366e <SD_MMC_IS_TIMEOUT+0x2e>
	}
	return false;
  40366c:	2300      	movs	r3, #0
}
  40366e:	4618      	mov	r0, r3
  403670:	46bd      	mov	sp, r7
  403672:	f85d 7b04 	ldr.w	r7, [sp], #4
  403676:	4770      	bx	lr
  403678:	200033f8 	.word	0x200033f8
  40367c:	e000e010 	.word	0xe000e010

00403680 <SD_MMC_STOP_TIMEOUT>:

static inline void SD_MMC_STOP_TIMEOUT(void)
{
  403680:	b480      	push	{r7}
  403682:	af00      	add	r7, sp, #0
	if (sd_mmc_sam_systick_used) {
  403684:	4b05      	ldr	r3, [pc, #20]	; (40369c <SD_MMC_STOP_TIMEOUT+0x1c>)
  403686:	781b      	ldrb	r3, [r3, #0]
  403688:	2b00      	cmp	r3, #0
  40368a:	d002      	beq.n	403692 <SD_MMC_STOP_TIMEOUT+0x12>
		SysTick->CTRL = 0;
  40368c:	4b04      	ldr	r3, [pc, #16]	; (4036a0 <SD_MMC_STOP_TIMEOUT+0x20>)
  40368e:	2200      	movs	r2, #0
  403690:	601a      	str	r2, [r3, #0]
	}
}
  403692:	46bd      	mov	sp, r7
  403694:	f85d 7b04 	ldr.w	r7, [sp], #4
  403698:	4770      	bx	lr
  40369a:	bf00      	nop
  40369c:	200033f8 	.word	0x200033f8
  4036a0:	e000e010 	.word	0xe000e010

004036a4 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  4036a4:	b580      	push	{r7, lr}
  4036a6:	b082      	sub	sp, #8
  4036a8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  4036aa:	f241 0368 	movw	r3, #4200	; 0x1068
  4036ae:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4036b0:	f244 5001 	movw	r0, #17665	; 0x4501
  4036b4:	4917      	ldr	r1, [pc, #92]	; (403714 <mmc_mci_op_cond+0x70>)
  4036b6:	4b18      	ldr	r3, [pc, #96]	; (403718 <mmc_mci_op_cond+0x74>)
  4036b8:	4798      	blx	r3
  4036ba:	4603      	mov	r3, r0
  4036bc:	f083 0301 	eor.w	r3, r3, #1
  4036c0:	b2db      	uxtb	r3, r3
  4036c2:	2b00      	cmp	r3, #0
  4036c4:	d001      	beq.n	4036ca <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  4036c6:	2300      	movs	r3, #0
  4036c8:	e01f      	b.n	40370a <mmc_mci_op_cond+0x66>
		}
		// Check busy flag
		resp = driver_get_response();
  4036ca:	4b14      	ldr	r3, [pc, #80]	; (40371c <mmc_mci_op_cond+0x78>)
  4036cc:	4798      	blx	r3
  4036ce:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  4036d0:	683b      	ldr	r3, [r7, #0]
  4036d2:	2b00      	cmp	r3, #0
  4036d4:	da10      	bge.n	4036f8 <mmc_mci_op_cond+0x54>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  4036d6:	683b      	ldr	r3, [r7, #0]
  4036d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  4036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  4036e0:	d109      	bne.n	4036f6 <mmc_mci_op_cond+0x52>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4036e2:	4b0f      	ldr	r3, [pc, #60]	; (403720 <mmc_mci_op_cond+0x7c>)
  4036e4:	681b      	ldr	r3, [r3, #0]
  4036e6:	4a0e      	ldr	r2, [pc, #56]	; (403720 <mmc_mci_op_cond+0x7c>)
  4036e8:	6812      	ldr	r2, [r2, #0]
  4036ea:	7bd2      	ldrb	r2, [r2, #15]
  4036ec:	f042 0208 	orr.w	r2, r2, #8
  4036f0:	b2d2      	uxtb	r2, r2
  4036f2:	73da      	strb	r2, [r3, #15]
			}
			break;
  4036f4:	e008      	b.n	403708 <mmc_mci_op_cond+0x64>
  4036f6:	e007      	b.n	403708 <mmc_mci_op_cond+0x64>
		}
		if (retry-- == 0) {
  4036f8:	687b      	ldr	r3, [r7, #4]
  4036fa:	1e5a      	subs	r2, r3, #1
  4036fc:	607a      	str	r2, [r7, #4]
  4036fe:	2b00      	cmp	r3, #0
  403700:	d101      	bne.n	403706 <mmc_mci_op_cond+0x62>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  403702:	2300      	movs	r3, #0
  403704:	e001      	b.n	40370a <mmc_mci_op_cond+0x66>
		}
	} while (1);
  403706:	e7d3      	b.n	4036b0 <mmc_mci_op_cond+0xc>
	return true;
  403708:	2301      	movs	r3, #1
}
  40370a:	4618      	mov	r0, r3
  40370c:	3708      	adds	r7, #8
  40370e:	46bd      	mov	sp, r7
  403710:	bd80      	pop	{r7, pc}
  403712:	bf00      	nop
  403714:	401f8000 	.word	0x401f8000
  403718:	0040534d 	.word	0x0040534d
  40371c:	00405399 	.word	0x00405399
  403720:	200033f0 	.word	0x200033f0

00403724 <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  403724:	b580      	push	{r7, lr}
  403726:	b086      	sub	sp, #24
  403728:	af00      	add	r7, sp, #0
  40372a:	4603      	mov	r3, r0
  40372c:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  40372e:	f640 0334 	movw	r3, #2100	; 0x834
  403732:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  403734:	f241 1037 	movw	r0, #4407	; 0x1137
  403738:	2100      	movs	r1, #0
  40373a:	4b22      	ldr	r3, [pc, #136]	; (4037c4 <sd_mci_op_cond+0xa0>)
  40373c:	4798      	blx	r3
  40373e:	4603      	mov	r3, r0
  403740:	f083 0301 	eor.w	r3, r3, #1
  403744:	b2db      	uxtb	r3, r3
  403746:	2b00      	cmp	r3, #0
  403748:	d001      	beq.n	40374e <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  40374a:	2300      	movs	r3, #0
  40374c:	e035      	b.n	4037ba <sd_mci_op_cond+0x96>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  40374e:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  403752:	617b      	str	r3, [r7, #20]
		if (v2) {
  403754:	79fb      	ldrb	r3, [r7, #7]
  403756:	2b00      	cmp	r3, #0
  403758:	d003      	beq.n	403762 <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  40375a:	697b      	ldr	r3, [r7, #20]
  40375c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403760:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  403762:	f244 5029 	movw	r0, #17705	; 0x4529
  403766:	6979      	ldr	r1, [r7, #20]
  403768:	4b16      	ldr	r3, [pc, #88]	; (4037c4 <sd_mci_op_cond+0xa0>)
  40376a:	4798      	blx	r3
  40376c:	4603      	mov	r3, r0
  40376e:	f083 0301 	eor.w	r3, r3, #1
  403772:	b2db      	uxtb	r3, r3
  403774:	2b00      	cmp	r3, #0
  403776:	d001      	beq.n	40377c <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  403778:	2300      	movs	r3, #0
  40377a:	e01e      	b.n	4037ba <sd_mci_op_cond+0x96>
		}
		resp = driver_get_response();
  40377c:	4b12      	ldr	r3, [pc, #72]	; (4037c8 <sd_mci_op_cond+0xa4>)
  40377e:	4798      	blx	r3
  403780:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  403782:	68fb      	ldr	r3, [r7, #12]
  403784:	2b00      	cmp	r3, #0
  403786:	da0f      	bge.n	4037a8 <sd_mci_op_cond+0x84>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  403788:	68fb      	ldr	r3, [r7, #12]
  40378a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  40378e:	2b00      	cmp	r3, #0
  403790:	d009      	beq.n	4037a6 <sd_mci_op_cond+0x82>
				sd_mmc_card->type |= CARD_TYPE_HC;
  403792:	4b0e      	ldr	r3, [pc, #56]	; (4037cc <sd_mci_op_cond+0xa8>)
  403794:	681b      	ldr	r3, [r3, #0]
  403796:	4a0d      	ldr	r2, [pc, #52]	; (4037cc <sd_mci_op_cond+0xa8>)
  403798:	6812      	ldr	r2, [r2, #0]
  40379a:	7bd2      	ldrb	r2, [r2, #15]
  40379c:	f042 0208 	orr.w	r2, r2, #8
  4037a0:	b2d2      	uxtb	r2, r2
  4037a2:	73da      	strb	r2, [r3, #15]
			}
			break;
  4037a4:	e008      	b.n	4037b8 <sd_mci_op_cond+0x94>
  4037a6:	e007      	b.n	4037b8 <sd_mci_op_cond+0x94>
		}
		if (retry-- == 0) {
  4037a8:	693b      	ldr	r3, [r7, #16]
  4037aa:	1e5a      	subs	r2, r3, #1
  4037ac:	613a      	str	r2, [r7, #16]
  4037ae:	2b00      	cmp	r3, #0
  4037b0:	d101      	bne.n	4037b6 <sd_mci_op_cond+0x92>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  4037b2:	2300      	movs	r3, #0
  4037b4:	e001      	b.n	4037ba <sd_mci_op_cond+0x96>
		}
	} while (1);
  4037b6:	e7bd      	b.n	403734 <sd_mci_op_cond+0x10>
	return true;
  4037b8:	2301      	movs	r3, #1
}
  4037ba:	4618      	mov	r0, r3
  4037bc:	3718      	adds	r7, #24
  4037be:	46bd      	mov	sp, r7
  4037c0:	bd80      	pop	{r7, pc}
  4037c2:	bf00      	nop
  4037c4:	0040534d 	.word	0x0040534d
  4037c8:	00405399 	.word	0x00405399
  4037cc:	200033f0 	.word	0x200033f0

004037d0 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
  4037d0:	b480      	push	{r7}
  4037d2:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
  4037d4:	2301      	movs	r3, #1
}
  4037d6:	4618      	mov	r0, r3
  4037d8:	46bd      	mov	sp, r7
  4037da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037de:	4770      	bx	lr

004037e0 <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  4037e0:	b590      	push	{r4, r7, lr}
  4037e2:	b093      	sub	sp, #76	; 0x4c
  4037e4:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4037e6:	2301      	movs	r3, #1
  4037e8:	9300      	str	r3, [sp, #0]
  4037ea:	482e      	ldr	r0, [pc, #184]	; (4038a4 <sd_cm6_set_high_speed+0xc4>)
  4037ec:	492e      	ldr	r1, [pc, #184]	; (4038a8 <sd_cm6_set_high_speed+0xc8>)
  4037ee:	2240      	movs	r2, #64	; 0x40
  4037f0:	2301      	movs	r3, #1
  4037f2:	4c2e      	ldr	r4, [pc, #184]	; (4038ac <sd_cm6_set_high_speed+0xcc>)
  4037f4:	47a0      	blx	r4
  4037f6:	4603      	mov	r3, r0
  4037f8:	f083 0301 	eor.w	r3, r3, #1
  4037fc:	b2db      	uxtb	r3, r3
  4037fe:	2b00      	cmp	r3, #0
  403800:	d001      	beq.n	403806 <sd_cm6_set_high_speed+0x26>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  403802:	2300      	movs	r3, #0
  403804:	e04a      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  403806:	463b      	mov	r3, r7
  403808:	4618      	mov	r0, r3
  40380a:	2101      	movs	r1, #1
  40380c:	4b28      	ldr	r3, [pc, #160]	; (4038b0 <sd_cm6_set_high_speed+0xd0>)
  40380e:	4798      	blx	r3
  403810:	4603      	mov	r3, r0
  403812:	f083 0301 	eor.w	r3, r3, #1
  403816:	b2db      	uxtb	r3, r3
  403818:	2b00      	cmp	r3, #0
  40381a:	d001      	beq.n	403820 <sd_cm6_set_high_speed+0x40>
		return false;
  40381c:	2300      	movs	r3, #0
  40381e:	e03d      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  403820:	4b24      	ldr	r3, [pc, #144]	; (4038b4 <sd_cm6_set_high_speed+0xd4>)
  403822:	4798      	blx	r3
  403824:	4603      	mov	r3, r0
  403826:	f083 0301 	eor.w	r3, r3, #1
  40382a:	b2db      	uxtb	r3, r3
  40382c:	2b00      	cmp	r3, #0
  40382e:	d001      	beq.n	403834 <sd_cm6_set_high_speed+0x54>
		return false;
  403830:	2300      	movs	r3, #0
  403832:	e033      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403834:	4b20      	ldr	r3, [pc, #128]	; (4038b8 <sd_cm6_set_high_speed+0xd8>)
  403836:	4798      	blx	r3
  403838:	4603      	mov	r3, r0
  40383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40383e:	2b00      	cmp	r3, #0
  403840:	d001      	beq.n	403846 <sd_cm6_set_high_speed+0x66>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  403842:	2300      	movs	r3, #0
  403844:	e02a      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  403846:	463b      	mov	r3, r7
  403848:	4618      	mov	r0, r3
  40384a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40384e:	f44f 72bc 	mov.w	r2, #376	; 0x178
  403852:	2304      	movs	r3, #4
  403854:	4c19      	ldr	r4, [pc, #100]	; (4038bc <sd_cm6_set_high_speed+0xdc>)
  403856:	47a0      	blx	r4
  403858:	4603      	mov	r3, r0
  40385a:	2b0f      	cmp	r3, #15
  40385c:	d101      	bne.n	403862 <sd_cm6_set_high_speed+0x82>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  40385e:	2301      	movs	r3, #1
  403860:	e01c      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  403862:	463b      	mov	r3, r7
  403864:	4618      	mov	r0, r3
  403866:	f44f 7100 	mov.w	r1, #512	; 0x200
  40386a:	f44f 7288 	mov.w	r2, #272	; 0x110
  40386e:	2310      	movs	r3, #16
  403870:	4c12      	ldr	r4, [pc, #72]	; (4038bc <sd_cm6_set_high_speed+0xdc>)
  403872:	47a0      	blx	r4
  403874:	4603      	mov	r3, r0
  403876:	2b00      	cmp	r3, #0
  403878:	d001      	beq.n	40387e <sd_cm6_set_high_speed+0x9e>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  40387a:	2300      	movs	r3, #0
  40387c:	e00e      	b.n	40389c <sd_cm6_set_high_speed+0xbc>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  40387e:	4b10      	ldr	r3, [pc, #64]	; (4038c0 <sd_cm6_set_high_speed+0xe0>)
  403880:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  403882:	4b10      	ldr	r3, [pc, #64]	; (4038c4 <sd_cm6_set_high_speed+0xe4>)
  403884:	681b      	ldr	r3, [r3, #0]
  403886:	2201      	movs	r2, #1
  403888:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  40388c:	4b0d      	ldr	r3, [pc, #52]	; (4038c4 <sd_cm6_set_high_speed+0xe4>)
  40388e:	681b      	ldr	r3, [r3, #0]
  403890:	4a0c      	ldr	r2, [pc, #48]	; (4038c4 <sd_cm6_set_high_speed+0xe4>)
  403892:	6812      	ldr	r2, [r2, #0]
  403894:	6812      	ldr	r2, [r2, #0]
  403896:	0052      	lsls	r2, r2, #1
  403898:	601a      	str	r2, [r3, #0]
	return true;
  40389a:	2301      	movs	r3, #1
}
  40389c:	4618      	mov	r0, r3
  40389e:	3744      	adds	r7, #68	; 0x44
  4038a0:	46bd      	mov	sp, r7
  4038a2:	bd90      	pop	{r4, r7, pc}
  4038a4:	00081106 	.word	0x00081106
  4038a8:	80ffff01 	.word	0x80ffff01
  4038ac:	00405419 	.word	0x00405419
  4038b0:	004055e9 	.word	0x004055e9
  4038b4:	00405699 	.word	0x00405699
  4038b8:	00405399 	.word	0x00405399
  4038bc:	00403375 	.word	0x00403375
  4038c0:	0040530d 	.word	0x0040530d
  4038c4:	200033f0 	.word	0x200033f0

004038c8 <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  4038c8:	b580      	push	{r7, lr}
  4038ca:	b084      	sub	sp, #16
  4038cc:	af00      	add	r7, sp, #0
  4038ce:	4603      	mov	r3, r0
  4038d0:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  4038d2:	79fb      	ldrb	r3, [r7, #7]
  4038d4:	2b04      	cmp	r3, #4
  4038d6:	d004      	beq.n	4038e2 <mmc_cmd6_set_bus_width+0x1a>
  4038d8:	2b08      	cmp	r3, #8
  4038da:	d105      	bne.n	4038e8 <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4038dc:	4b13      	ldr	r3, [pc, #76]	; (40392c <mmc_cmd6_set_bus_width+0x64>)
  4038de:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  4038e0:	e005      	b.n	4038ee <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4038e2:	4b13      	ldr	r3, [pc, #76]	; (403930 <mmc_cmd6_set_bus_width+0x68>)
  4038e4:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  4038e6:	e002      	b.n	4038ee <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4038e8:	4b12      	ldr	r3, [pc, #72]	; (403934 <mmc_cmd6_set_bus_width+0x6c>)
  4038ea:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  4038ec:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4038ee:	f243 1006 	movw	r0, #12550	; 0x3106
  4038f2:	68f9      	ldr	r1, [r7, #12]
  4038f4:	4b10      	ldr	r3, [pc, #64]	; (403938 <mmc_cmd6_set_bus_width+0x70>)
  4038f6:	4798      	blx	r3
  4038f8:	4603      	mov	r3, r0
  4038fa:	f083 0301 	eor.w	r3, r3, #1
  4038fe:	b2db      	uxtb	r3, r3
  403900:	2b00      	cmp	r3, #0
  403902:	d001      	beq.n	403908 <mmc_cmd6_set_bus_width+0x40>
		return false;
  403904:	2300      	movs	r3, #0
  403906:	e00d      	b.n	403924 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403908:	4b0c      	ldr	r3, [pc, #48]	; (40393c <mmc_cmd6_set_bus_width+0x74>)
  40390a:	4798      	blx	r3
  40390c:	4603      	mov	r3, r0
  40390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403912:	2b00      	cmp	r3, #0
  403914:	d001      	beq.n	40391a <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  403916:	2300      	movs	r3, #0
  403918:	e004      	b.n	403924 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  40391a:	4b09      	ldr	r3, [pc, #36]	; (403940 <mmc_cmd6_set_bus_width+0x78>)
  40391c:	681b      	ldr	r3, [r3, #0]
  40391e:	79fa      	ldrb	r2, [r7, #7]
  403920:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  403922:	2301      	movs	r3, #1
}
  403924:	4618      	mov	r0, r3
  403926:	3710      	adds	r7, #16
  403928:	46bd      	mov	sp, r7
  40392a:	bd80      	pop	{r7, pc}
  40392c:	01b70200 	.word	0x01b70200
  403930:	01b70100 	.word	0x01b70100
  403934:	01b70000 	.word	0x01b70000
  403938:	0040534d 	.word	0x0040534d
  40393c:	00405399 	.word	0x00405399
  403940:	200033f0 	.word	0x200033f0

00403944 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  403944:	b580      	push	{r7, lr}
  403946:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  403948:	f243 1006 	movw	r0, #12550	; 0x3106
  40394c:	490f      	ldr	r1, [pc, #60]	; (40398c <mmc_cmd6_set_high_speed+0x48>)
  40394e:	4b10      	ldr	r3, [pc, #64]	; (403990 <mmc_cmd6_set_high_speed+0x4c>)
  403950:	4798      	blx	r3
  403952:	4603      	mov	r3, r0
  403954:	f083 0301 	eor.w	r3, r3, #1
  403958:	b2db      	uxtb	r3, r3
  40395a:	2b00      	cmp	r3, #0
  40395c:	d001      	beq.n	403962 <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  40395e:	2300      	movs	r3, #0
  403960:	e012      	b.n	403988 <mmc_cmd6_set_high_speed+0x44>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403962:	4b0c      	ldr	r3, [pc, #48]	; (403994 <mmc_cmd6_set_high_speed+0x50>)
  403964:	4798      	blx	r3
  403966:	4603      	mov	r3, r0
  403968:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40396c:	2b00      	cmp	r3, #0
  40396e:	d001      	beq.n	403974 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  403970:	2300      	movs	r3, #0
  403972:	e009      	b.n	403988 <mmc_cmd6_set_high_speed+0x44>
	}
	sd_mmc_card->high_speed = 1;
  403974:	4b08      	ldr	r3, [pc, #32]	; (403998 <mmc_cmd6_set_high_speed+0x54>)
  403976:	681b      	ldr	r3, [r3, #0]
  403978:	2201      	movs	r2, #1
  40397a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40397e:	4b06      	ldr	r3, [pc, #24]	; (403998 <mmc_cmd6_set_high_speed+0x54>)
  403980:	681b      	ldr	r3, [r3, #0]
  403982:	4a06      	ldr	r2, [pc, #24]	; (40399c <mmc_cmd6_set_high_speed+0x58>)
  403984:	601a      	str	r2, [r3, #0]
	return true;
  403986:	2301      	movs	r3, #1
}
  403988:	4618      	mov	r0, r3
  40398a:	bd80      	pop	{r7, pc}
  40398c:	03b90100 	.word	0x03b90100
  403990:	0040534d 	.word	0x0040534d
  403994:	00405399 	.word	0x00405399
  403998:	200033f0 	.word	0x200033f0
  40399c:	03197500 	.word	0x03197500

004039a0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  4039a0:	b580      	push	{r7, lr}
  4039a2:	b084      	sub	sp, #16
  4039a4:	af00      	add	r7, sp, #0
  4039a6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  4039a8:	687b      	ldr	r3, [r7, #4]
  4039aa:	2200      	movs	r2, #0
  4039ac:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4039ae:	f245 5008 	movw	r0, #21768	; 0x5508
  4039b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4039b6:	4b11      	ldr	r3, [pc, #68]	; (4039fc <sd_cmd8+0x5c>)
  4039b8:	4798      	blx	r3
  4039ba:	4603      	mov	r3, r0
  4039bc:	f083 0301 	eor.w	r3, r3, #1
  4039c0:	b2db      	uxtb	r3, r3
  4039c2:	2b00      	cmp	r3, #0
  4039c4:	d001      	beq.n	4039ca <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  4039c6:	2301      	movs	r3, #1
  4039c8:	e014      	b.n	4039f4 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  4039ca:	4b0d      	ldr	r3, [pc, #52]	; (403a00 <sd_cmd8+0x60>)
  4039cc:	4798      	blx	r3
  4039ce:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  4039d0:	68fb      	ldr	r3, [r7, #12]
  4039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4039d6:	d101      	bne.n	4039dc <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  4039d8:	2301      	movs	r3, #1
  4039da:	e00b      	b.n	4039f4 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4039dc:	68fb      	ldr	r3, [r7, #12]
  4039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4039e2:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  4039e6:	d001      	beq.n	4039ec <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  4039e8:	2300      	movs	r3, #0
  4039ea:	e003      	b.n	4039f4 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4039ec:	687b      	ldr	r3, [r7, #4]
  4039ee:	2201      	movs	r2, #1
  4039f0:	701a      	strb	r2, [r3, #0]
	return true;
  4039f2:	2301      	movs	r3, #1
}
  4039f4:	4618      	mov	r0, r3
  4039f6:	3710      	adds	r7, #16
  4039f8:	46bd      	mov	sp, r7
  4039fa:	bd80      	pop	{r7, pc}
  4039fc:	0040534d 	.word	0x0040534d
  403a00:	00405399 	.word	0x00405399

00403a04 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  403a04:	b590      	push	{r4, r7, lr}
  403a06:	b089      	sub	sp, #36	; 0x24
  403a08:	af02      	add	r7, sp, #8
  403a0a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  403a0c:	2300      	movs	r3, #0
  403a0e:	9300      	str	r3, [sp, #0]
  403a10:	4836      	ldr	r0, [pc, #216]	; (403aec <mmc_cmd8+0xe8>)
  403a12:	2100      	movs	r1, #0
  403a14:	f44f 7200 	mov.w	r2, #512	; 0x200
  403a18:	2301      	movs	r3, #1
  403a1a:	4c35      	ldr	r4, [pc, #212]	; (403af0 <mmc_cmd8+0xec>)
  403a1c:	47a0      	blx	r4
  403a1e:	4603      	mov	r3, r0
  403a20:	f083 0301 	eor.w	r3, r3, #1
  403a24:	b2db      	uxtb	r3, r3
  403a26:	2b00      	cmp	r3, #0
  403a28:	d001      	beq.n	403a2e <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  403a2a:	2300      	movs	r3, #0
  403a2c:	e059      	b.n	403ae2 <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  403a2e:	2300      	movs	r3, #0
  403a30:	82fb      	strh	r3, [r7, #22]
  403a32:	e00f      	b.n	403a54 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  403a34:	f107 0310 	add.w	r3, r7, #16
  403a38:	4618      	mov	r0, r3
  403a3a:	4b2e      	ldr	r3, [pc, #184]	; (403af4 <mmc_cmd8+0xf0>)
  403a3c:	4798      	blx	r3
  403a3e:	4603      	mov	r3, r0
  403a40:	f083 0301 	eor.w	r3, r3, #1
  403a44:	b2db      	uxtb	r3, r3
  403a46:	2b00      	cmp	r3, #0
  403a48:	d001      	beq.n	403a4e <mmc_cmd8+0x4a>
			return false;
  403a4a:	2300      	movs	r3, #0
  403a4c:	e049      	b.n	403ae2 <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  403a4e:	8afb      	ldrh	r3, [r7, #22]
  403a50:	3301      	adds	r3, #1
  403a52:	82fb      	strh	r3, [r7, #22]
  403a54:	8afb      	ldrh	r3, [r7, #22]
  403a56:	2b31      	cmp	r3, #49	; 0x31
  403a58:	d9ec      	bls.n	403a34 <mmc_cmd8+0x30>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  403a5a:	693b      	ldr	r3, [r7, #16]
  403a5c:	b2db      	uxtb	r3, r3
  403a5e:	f003 0302 	and.w	r3, r3, #2
  403a62:	b2da      	uxtb	r2, r3
  403a64:	687b      	ldr	r3, [r7, #4]
  403a66:	701a      	strb	r2, [r3, #0]
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  403a68:	4b23      	ldr	r3, [pc, #140]	; (403af8 <mmc_cmd8+0xf4>)
  403a6a:	681b      	ldr	r3, [r3, #0]
  403a6c:	3312      	adds	r3, #18
  403a6e:	4618      	mov	r0, r3
  403a70:	2180      	movs	r1, #128	; 0x80
  403a72:	223e      	movs	r2, #62	; 0x3e
  403a74:	230c      	movs	r3, #12
  403a76:	4c21      	ldr	r4, [pc, #132]	; (403afc <mmc_cmd8+0xf8>)
  403a78:	47a0      	blx	r4
  403a7a:	4602      	mov	r2, r0
  403a7c:	f640 73ff 	movw	r3, #4095	; 0xfff
  403a80:	429a      	cmp	r2, r3
  403a82:	d119      	bne.n	403ab8 <mmc_cmd8+0xb4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403a84:	e00f      	b.n	403aa6 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  403a86:	f107 030c 	add.w	r3, r7, #12
  403a8a:	4618      	mov	r0, r3
  403a8c:	4b19      	ldr	r3, [pc, #100]	; (403af4 <mmc_cmd8+0xf0>)
  403a8e:	4798      	blx	r3
  403a90:	4603      	mov	r3, r0
  403a92:	f083 0301 	eor.w	r3, r3, #1
  403a96:	b2db      	uxtb	r3, r3
  403a98:	2b00      	cmp	r3, #0
  403a9a:	d001      	beq.n	403aa0 <mmc_cmd8+0x9c>
				return false;
  403a9c:	2300      	movs	r3, #0
  403a9e:	e020      	b.n	403ae2 <mmc_cmd8+0xde>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403aa0:	8afb      	ldrh	r3, [r7, #22]
  403aa2:	3301      	adds	r3, #1
  403aa4:	82fb      	strh	r3, [r7, #22]
  403aa6:	8afb      	ldrh	r3, [r7, #22]
  403aa8:	2b35      	cmp	r3, #53	; 0x35
  403aaa:	d9ec      	bls.n	403a86 <mmc_cmd8+0x82>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  403aac:	4b12      	ldr	r3, [pc, #72]	; (403af8 <mmc_cmd8+0xf4>)
  403aae:	681b      	ldr	r3, [r3, #0]
  403ab0:	68fa      	ldr	r2, [r7, #12]
  403ab2:	0852      	lsrs	r2, r2, #1
  403ab4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403ab6:	e010      	b.n	403ada <mmc_cmd8+0xd6>
  403ab8:	e00f      	b.n	403ada <mmc_cmd8+0xd6>
		if (!driver_read_word(&sec_count)) {
  403aba:	f107 030c 	add.w	r3, r7, #12
  403abe:	4618      	mov	r0, r3
  403ac0:	4b0c      	ldr	r3, [pc, #48]	; (403af4 <mmc_cmd8+0xf0>)
  403ac2:	4798      	blx	r3
  403ac4:	4603      	mov	r3, r0
  403ac6:	f083 0301 	eor.w	r3, r3, #1
  403aca:	b2db      	uxtb	r3, r3
  403acc:	2b00      	cmp	r3, #0
  403ace:	d001      	beq.n	403ad4 <mmc_cmd8+0xd0>
			return false;
  403ad0:	2300      	movs	r3, #0
  403ad2:	e006      	b.n	403ae2 <mmc_cmd8+0xde>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403ad4:	8afb      	ldrh	r3, [r7, #22]
  403ad6:	3301      	adds	r3, #1
  403ad8:	82fb      	strh	r3, [r7, #22]
  403ada:	8afb      	ldrh	r3, [r7, #22]
  403adc:	2b7f      	cmp	r3, #127	; 0x7f
  403ade:	d9ec      	bls.n	403aba <mmc_cmd8+0xb6>
		if (!driver_read_word(&sec_count)) {
			return false;
		}
	}
	return true;
  403ae0:	2301      	movs	r3, #1
}
  403ae2:	4618      	mov	r0, r3
  403ae4:	371c      	adds	r7, #28
  403ae6:	46bd      	mov	sp, r7
  403ae8:	bd90      	pop	{r4, r7, pc}
  403aea:	bf00      	nop
  403aec:	00081108 	.word	0x00081108
  403af0:	00405419 	.word	0x00405419
  403af4:	0040554d 	.word	0x0040554d
  403af8:	200033f0 	.word	0x200033f0
  403afc:	00403375 	.word	0x00403375

00403b00 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  403b00:	b580      	push	{r7, lr}
  403b02:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  403b04:	4b0c      	ldr	r3, [pc, #48]	; (403b38 <sd_mmc_cmd9_mci+0x38>)
  403b06:	681b      	ldr	r3, [r3, #0]
  403b08:	899b      	ldrh	r3, [r3, #12]
  403b0a:	041b      	lsls	r3, r3, #16
  403b0c:	f641 3009 	movw	r0, #6921	; 0x1b09
  403b10:	4619      	mov	r1, r3
  403b12:	4b0a      	ldr	r3, [pc, #40]	; (403b3c <sd_mmc_cmd9_mci+0x3c>)
  403b14:	4798      	blx	r3
  403b16:	4603      	mov	r3, r0
  403b18:	f083 0301 	eor.w	r3, r3, #1
  403b1c:	b2db      	uxtb	r3, r3
  403b1e:	2b00      	cmp	r3, #0
  403b20:	d001      	beq.n	403b26 <sd_mmc_cmd9_mci+0x26>
		return false;
  403b22:	2300      	movs	r3, #0
  403b24:	e006      	b.n	403b34 <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  403b26:	4b04      	ldr	r3, [pc, #16]	; (403b38 <sd_mmc_cmd9_mci+0x38>)
  403b28:	681b      	ldr	r3, [r3, #0]
  403b2a:	3312      	adds	r3, #18
  403b2c:	4618      	mov	r0, r3
  403b2e:	4b04      	ldr	r3, [pc, #16]	; (403b40 <sd_mmc_cmd9_mci+0x40>)
  403b30:	4798      	blx	r3
	return true;
  403b32:	2301      	movs	r3, #1
}
  403b34:	4618      	mov	r0, r3
  403b36:	bd80      	pop	{r7, pc}
  403b38:	200033f0 	.word	0x200033f0
  403b3c:	0040534d 	.word	0x0040534d
  403b40:	004053ad 	.word	0x004053ad

00403b44 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  403b44:	b5b0      	push	{r4, r5, r7, lr}
  403b46:	b084      	sub	sp, #16
  403b48:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  403b4a:	4b48      	ldr	r3, [pc, #288]	; (403c6c <mmc_decode_csd+0x128>)
  403b4c:	681b      	ldr	r3, [r3, #0]
  403b4e:	3312      	adds	r3, #18
  403b50:	4618      	mov	r0, r3
  403b52:	2180      	movs	r1, #128	; 0x80
  403b54:	227a      	movs	r2, #122	; 0x7a
  403b56:	2304      	movs	r3, #4
  403b58:	4c45      	ldr	r4, [pc, #276]	; (403c70 <mmc_decode_csd+0x12c>)
  403b5a:	47a0      	blx	r4
  403b5c:	4603      	mov	r3, r0
  403b5e:	3b01      	subs	r3, #1
  403b60:	2b03      	cmp	r3, #3
  403b62:	d80b      	bhi.n	403b7c <mmc_decode_csd+0x38>
  403b64:	a201      	add	r2, pc, #4	; (adr r2, 403b6c <mmc_decode_csd+0x28>)
  403b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403b6a:	bf00      	nop
  403b6c:	00403b87 	.word	0x00403b87
  403b70:	00403b91 	.word	0x00403b91
  403b74:	00403b9b 	.word	0x00403b9b
  403b78:	00403ba5 	.word	0x00403ba5
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  403b7c:	4b3b      	ldr	r3, [pc, #236]	; (403c6c <mmc_decode_csd+0x128>)
  403b7e:	681b      	ldr	r3, [r3, #0]
  403b80:	2212      	movs	r2, #18
  403b82:	741a      	strb	r2, [r3, #16]
		break;
  403b84:	e013      	b.n	403bae <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  403b86:	4b39      	ldr	r3, [pc, #228]	; (403c6c <mmc_decode_csd+0x128>)
  403b88:	681b      	ldr	r3, [r3, #0]
  403b8a:	2214      	movs	r2, #20
  403b8c:	741a      	strb	r2, [r3, #16]
		break;
  403b8e:	e00e      	b.n	403bae <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  403b90:	4b36      	ldr	r3, [pc, #216]	; (403c6c <mmc_decode_csd+0x128>)
  403b92:	681b      	ldr	r3, [r3, #0]
  403b94:	2222      	movs	r2, #34	; 0x22
  403b96:	741a      	strb	r2, [r3, #16]
		break;
  403b98:	e009      	b.n	403bae <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  403b9a:	4b34      	ldr	r3, [pc, #208]	; (403c6c <mmc_decode_csd+0x128>)
  403b9c:	681b      	ldr	r3, [r3, #0]
  403b9e:	2230      	movs	r2, #48	; 0x30
  403ba0:	741a      	strb	r2, [r3, #16]
		break;
  403ba2:	e004      	b.n	403bae <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  403ba4:	4b31      	ldr	r3, [pc, #196]	; (403c6c <mmc_decode_csd+0x128>)
  403ba6:	681b      	ldr	r3, [r3, #0]
  403ba8:	2240      	movs	r2, #64	; 0x40
  403baa:	741a      	strb	r2, [r3, #16]
		break;
  403bac:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403bae:	4b2f      	ldr	r3, [pc, #188]	; (403c6c <mmc_decode_csd+0x128>)
  403bb0:	681b      	ldr	r3, [r3, #0]
  403bb2:	3312      	adds	r3, #18
  403bb4:	4618      	mov	r0, r3
  403bb6:	2180      	movs	r1, #128	; 0x80
  403bb8:	2260      	movs	r2, #96	; 0x60
  403bba:	2308      	movs	r3, #8
  403bbc:	4c2c      	ldr	r4, [pc, #176]	; (403c70 <mmc_decode_csd+0x12c>)
  403bbe:	47a0      	blx	r4
  403bc0:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403bc2:	68fb      	ldr	r3, [r7, #12]
  403bc4:	f003 0207 	and.w	r2, r3, #7
  403bc8:	4b2a      	ldr	r3, [pc, #168]	; (403c74 <mmc_decode_csd+0x130>)
  403bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bce:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  403bd0:	68fb      	ldr	r3, [r7, #12]
  403bd2:	08db      	lsrs	r3, r3, #3
  403bd4:	f003 020f 	and.w	r2, r3, #15
  403bd8:	4b27      	ldr	r3, [pc, #156]	; (403c78 <mmc_decode_csd+0x134>)
  403bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bde:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403be0:	4b22      	ldr	r3, [pc, #136]	; (403c6c <mmc_decode_csd+0x128>)
  403be2:	681b      	ldr	r3, [r3, #0]
  403be4:	68ba      	ldr	r2, [r7, #8]
  403be6:	6879      	ldr	r1, [r7, #4]
  403be8:	fb01 f202 	mul.w	r2, r1, r2
  403bec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403bf0:	fb01 f202 	mul.w	r2, r1, r2
  403bf4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  403bf6:	4b1d      	ldr	r3, [pc, #116]	; (403c6c <mmc_decode_csd+0x128>)
  403bf8:	681b      	ldr	r3, [r3, #0]
  403bfa:	3312      	adds	r3, #18
  403bfc:	4618      	mov	r0, r3
  403bfe:	2180      	movs	r1, #128	; 0x80
  403c00:	223e      	movs	r2, #62	; 0x3e
  403c02:	230c      	movs	r3, #12
  403c04:	4c1a      	ldr	r4, [pc, #104]	; (403c70 <mmc_decode_csd+0x12c>)
  403c06:	47a0      	blx	r4
  403c08:	4602      	mov	r2, r0
  403c0a:	f640 73ff 	movw	r3, #4095	; 0xfff
  403c0e:	429a      	cmp	r2, r3
  403c10:	d029      	beq.n	403c66 <mmc_decode_csd+0x122>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403c12:	4b16      	ldr	r3, [pc, #88]	; (403c6c <mmc_decode_csd+0x128>)
  403c14:	681b      	ldr	r3, [r3, #0]
  403c16:	3312      	adds	r3, #18
  403c18:	4618      	mov	r0, r3
  403c1a:	2180      	movs	r1, #128	; 0x80
  403c1c:	223e      	movs	r2, #62	; 0x3e
  403c1e:	230c      	movs	r3, #12
  403c20:	4c13      	ldr	r4, [pc, #76]	; (403c70 <mmc_decode_csd+0x12c>)
  403c22:	47a0      	blx	r4
  403c24:	4603      	mov	r3, r0
  403c26:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  403c28:	4b10      	ldr	r3, [pc, #64]	; (403c6c <mmc_decode_csd+0x128>)
  403c2a:	681b      	ldr	r3, [r3, #0]
  403c2c:	3312      	adds	r3, #18
  403c2e:	4618      	mov	r0, r3
  403c30:	2180      	movs	r1, #128	; 0x80
  403c32:	222f      	movs	r2, #47	; 0x2f
  403c34:	2303      	movs	r3, #3
  403c36:	4d0e      	ldr	r5, [pc, #56]	; (403c70 <mmc_decode_csd+0x12c>)
  403c38:	47a8      	blx	r5
  403c3a:	4603      	mov	r3, r0
  403c3c:	3302      	adds	r3, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403c3e:	fa04 f303 	lsl.w	r3, r4, r3
  403c42:	603b      	str	r3, [r7, #0]
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403c44:	4b09      	ldr	r3, [pc, #36]	; (403c6c <mmc_decode_csd+0x128>)
  403c46:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403c48:	4b08      	ldr	r3, [pc, #32]	; (403c6c <mmc_decode_csd+0x128>)
  403c4a:	681b      	ldr	r3, [r3, #0]
  403c4c:	3312      	adds	r3, #18
  403c4e:	4618      	mov	r0, r3
  403c50:	2180      	movs	r1, #128	; 0x80
  403c52:	2250      	movs	r2, #80	; 0x50
  403c54:	2304      	movs	r3, #4
  403c56:	4d06      	ldr	r5, [pc, #24]	; (403c70 <mmc_decode_csd+0x12c>)
  403c58:	47a8      	blx	r5
  403c5a:	4603      	mov	r3, r0
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403c5c:	683a      	ldr	r2, [r7, #0]
  403c5e:	fa02 f303 	lsl.w	r3, r2, r3
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403c62:	0a9b      	lsrs	r3, r3, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403c64:	6063      	str	r3, [r4, #4]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
	}
}
  403c66:	3710      	adds	r7, #16
  403c68:	46bd      	mov	sp, r7
  403c6a:	bdb0      	pop	{r4, r5, r7, pc}
  403c6c:	200033f0 	.word	0x200033f0
  403c70:	00403375 	.word	0x00403375
  403c74:	0041cdc4 	.word	0x0041cdc4
  403c78:	0041ce20 	.word	0x0041ce20

00403c7c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  403c7c:	b5b0      	push	{r4, r5, r7, lr}
  403c7e:	b084      	sub	sp, #16
  403c80:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403c82:	4b36      	ldr	r3, [pc, #216]	; (403d5c <sd_decode_csd+0xe0>)
  403c84:	681b      	ldr	r3, [r3, #0]
  403c86:	3312      	adds	r3, #18
  403c88:	4618      	mov	r0, r3
  403c8a:	2180      	movs	r1, #128	; 0x80
  403c8c:	2260      	movs	r2, #96	; 0x60
  403c8e:	2308      	movs	r3, #8
  403c90:	4c33      	ldr	r4, [pc, #204]	; (403d60 <sd_decode_csd+0xe4>)
  403c92:	47a0      	blx	r4
  403c94:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403c96:	68fb      	ldr	r3, [r7, #12]
  403c98:	f003 0207 	and.w	r2, r3, #7
  403c9c:	4b31      	ldr	r3, [pc, #196]	; (403d64 <sd_decode_csd+0xe8>)
  403c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403ca2:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  403ca4:	68fb      	ldr	r3, [r7, #12]
  403ca6:	08db      	lsrs	r3, r3, #3
  403ca8:	f003 020f 	and.w	r2, r3, #15
  403cac:	4b2e      	ldr	r3, [pc, #184]	; (403d68 <sd_decode_csd+0xec>)
  403cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403cb2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403cb4:	4b29      	ldr	r3, [pc, #164]	; (403d5c <sd_decode_csd+0xe0>)
  403cb6:	681b      	ldr	r3, [r3, #0]
  403cb8:	68ba      	ldr	r2, [r7, #8]
  403cba:	6879      	ldr	r1, [r7, #4]
  403cbc:	fb01 f202 	mul.w	r2, r1, r2
  403cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403cc4:	fb01 f202 	mul.w	r2, r1, r2
  403cc8:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  403cca:	4b24      	ldr	r3, [pc, #144]	; (403d5c <sd_decode_csd+0xe0>)
  403ccc:	681b      	ldr	r3, [r3, #0]
  403cce:	3312      	adds	r3, #18
  403cd0:	4618      	mov	r0, r3
  403cd2:	2180      	movs	r1, #128	; 0x80
  403cd4:	227e      	movs	r2, #126	; 0x7e
  403cd6:	2302      	movs	r3, #2
  403cd8:	4c21      	ldr	r4, [pc, #132]	; (403d60 <sd_decode_csd+0xe4>)
  403cda:	47a0      	blx	r4
  403cdc:	4603      	mov	r3, r0
  403cde:	2b00      	cmp	r3, #0
  403ce0:	d00f      	beq.n	403d02 <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  403ce2:	4b1e      	ldr	r3, [pc, #120]	; (403d5c <sd_decode_csd+0xe0>)
  403ce4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  403ce6:	4b1d      	ldr	r3, [pc, #116]	; (403d5c <sd_decode_csd+0xe0>)
  403ce8:	681b      	ldr	r3, [r3, #0]
  403cea:	3312      	adds	r3, #18
  403cec:	4618      	mov	r0, r3
  403cee:	2180      	movs	r1, #128	; 0x80
  403cf0:	2230      	movs	r2, #48	; 0x30
  403cf2:	2316      	movs	r3, #22
  403cf4:	4d1a      	ldr	r5, [pc, #104]	; (403d60 <sd_decode_csd+0xe4>)
  403cf6:	47a8      	blx	r5
  403cf8:	4603      	mov	r3, r0
				* 512;
  403cfa:	3301      	adds	r3, #1
  403cfc:	025b      	lsls	r3, r3, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  403cfe:	6063      	str	r3, [r4, #4]
  403d00:	e029      	b.n	403d56 <sd_decode_csd+0xda>
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  403d02:	4b16      	ldr	r3, [pc, #88]	; (403d5c <sd_decode_csd+0xe0>)
  403d04:	681b      	ldr	r3, [r3, #0]
  403d06:	3312      	adds	r3, #18
  403d08:	4618      	mov	r0, r3
  403d0a:	2180      	movs	r1, #128	; 0x80
  403d0c:	223e      	movs	r2, #62	; 0x3e
  403d0e:	230c      	movs	r3, #12
  403d10:	4c13      	ldr	r4, [pc, #76]	; (403d60 <sd_decode_csd+0xe4>)
  403d12:	47a0      	blx	r4
  403d14:	4603      	mov	r3, r0
  403d16:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  403d18:	4b10      	ldr	r3, [pc, #64]	; (403d5c <sd_decode_csd+0xe0>)
  403d1a:	681b      	ldr	r3, [r3, #0]
  403d1c:	3312      	adds	r3, #18
  403d1e:	4618      	mov	r0, r3
  403d20:	2180      	movs	r1, #128	; 0x80
  403d22:	222f      	movs	r2, #47	; 0x2f
  403d24:	2303      	movs	r3, #3
  403d26:	4d0e      	ldr	r5, [pc, #56]	; (403d60 <sd_decode_csd+0xe4>)
  403d28:	47a8      	blx	r5
  403d2a:	4603      	mov	r3, r0
  403d2c:	3302      	adds	r3, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  403d2e:	fa04 f303 	lsl.w	r3, r4, r3
  403d32:	603b      	str	r3, [r7, #0]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403d34:	4b09      	ldr	r3, [pc, #36]	; (403d5c <sd_decode_csd+0xe0>)
  403d36:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  403d38:	4b08      	ldr	r3, [pc, #32]	; (403d5c <sd_decode_csd+0xe0>)
  403d3a:	681b      	ldr	r3, [r3, #0]
  403d3c:	3312      	adds	r3, #18
  403d3e:	4618      	mov	r0, r3
  403d40:	2180      	movs	r1, #128	; 0x80
  403d42:	2250      	movs	r2, #80	; 0x50
  403d44:	2304      	movs	r3, #4
  403d46:	4d06      	ldr	r5, [pc, #24]	; (403d60 <sd_decode_csd+0xe4>)
  403d48:	47a8      	blx	r5
  403d4a:	4603      	mov	r3, r0
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403d4c:	683a      	ldr	r2, [r7, #0]
  403d4e:	fa02 f303 	lsl.w	r3, r2, r3
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  403d52:	0a9b      	lsrs	r3, r3, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  403d54:	6063      	str	r3, [r4, #4]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  403d56:	3710      	adds	r7, #16
  403d58:	46bd      	mov	sp, r7
  403d5a:	bdb0      	pop	{r4, r5, r7, pc}
  403d5c:	200033f0 	.word	0x200033f0
  403d60:	00403375 	.word	0x00403375
  403d64:	0041cdc4 	.word	0x0041cdc4
  403d68:	0041cde0 	.word	0x0041cde0

00403d6c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  403d6c:	b580      	push	{r7, lr}
  403d6e:	b082      	sub	sp, #8
  403d70:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
  403d72:	4b14      	ldr	r3, [pc, #80]	; (403dc4 <sd_mmc_cmd13+0x58>)
  403d74:	607b      	str	r3, [r7, #4]
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  403d76:	4b14      	ldr	r3, [pc, #80]	; (403dc8 <sd_mmc_cmd13+0x5c>)
  403d78:	681b      	ldr	r3, [r3, #0]
  403d7a:	899b      	ldrh	r3, [r3, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  403d7c:	041b      	lsls	r3, r3, #16
  403d7e:	f241 100d 	movw	r0, #4365	; 0x110d
  403d82:	4619      	mov	r1, r3
  403d84:	4b11      	ldr	r3, [pc, #68]	; (403dcc <sd_mmc_cmd13+0x60>)
  403d86:	4798      	blx	r3
  403d88:	4603      	mov	r3, r0
  403d8a:	f083 0301 	eor.w	r3, r3, #1
  403d8e:	b2db      	uxtb	r3, r3
  403d90:	2b00      	cmp	r3, #0
  403d92:	d001      	beq.n	403d98 <sd_mmc_cmd13+0x2c>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
  403d94:	2300      	movs	r3, #0
  403d96:	e011      	b.n	403dbc <sd_mmc_cmd13+0x50>
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  403d98:	4b0d      	ldr	r3, [pc, #52]	; (403dd0 <sd_mmc_cmd13+0x64>)
  403d9a:	4798      	blx	r3
  403d9c:	4603      	mov	r3, r0
  403d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403da2:	2b00      	cmp	r3, #0
  403da4:	d002      	beq.n	403dac <sd_mmc_cmd13+0x40>
				break;
  403da6:	bf00      	nop
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
		}
	} while (1);

	return true;
  403da8:	2301      	movs	r3, #1
  403daa:	e007      	b.n	403dbc <sd_mmc_cmd13+0x50>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  403dac:	687b      	ldr	r3, [r7, #4]
  403dae:	1e5a      	subs	r2, r3, #1
  403db0:	607a      	str	r2, [r7, #4]
  403db2:	2b00      	cmp	r3, #0
  403db4:	d101      	bne.n	403dba <sd_mmc_cmd13+0x4e>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  403db6:	2300      	movs	r3, #0
  403db8:	e000      	b.n	403dbc <sd_mmc_cmd13+0x50>
		}
	} while (1);
  403dba:	e7dc      	b.n	403d76 <sd_mmc_cmd13+0xa>

	return true;
}
  403dbc:	4618      	mov	r0, r3
  403dbe:	3708      	adds	r7, #8
  403dc0:	46bd      	mov	sp, r7
  403dc2:	bd80      	pop	{r7, pc}
  403dc4:	00030d40 	.word	0x00030d40
  403dc8:	200033f0 	.word	0x200033f0
  403dcc:	0040534d 	.word	0x0040534d
  403dd0:	00405399 	.word	0x00405399

00403dd4 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  403dd4:	b580      	push	{r7, lr}
  403dd6:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403dd8:	4b12      	ldr	r3, [pc, #72]	; (403e24 <sd_acmd6+0x50>)
  403dda:	681b      	ldr	r3, [r3, #0]
  403ddc:	899b      	ldrh	r3, [r3, #12]
  403dde:	041b      	lsls	r3, r3, #16
  403de0:	f241 1037 	movw	r0, #4407	; 0x1137
  403de4:	4619      	mov	r1, r3
  403de6:	4b10      	ldr	r3, [pc, #64]	; (403e28 <sd_acmd6+0x54>)
  403de8:	4798      	blx	r3
  403dea:	4603      	mov	r3, r0
  403dec:	f083 0301 	eor.w	r3, r3, #1
  403df0:	b2db      	uxtb	r3, r3
  403df2:	2b00      	cmp	r3, #0
  403df4:	d001      	beq.n	403dfa <sd_acmd6+0x26>
		return false;
  403df6:	2300      	movs	r3, #0
  403df8:	e011      	b.n	403e1e <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  403dfa:	f241 1006 	movw	r0, #4358	; 0x1106
  403dfe:	2102      	movs	r1, #2
  403e00:	4b09      	ldr	r3, [pc, #36]	; (403e28 <sd_acmd6+0x54>)
  403e02:	4798      	blx	r3
  403e04:	4603      	mov	r3, r0
  403e06:	f083 0301 	eor.w	r3, r3, #1
  403e0a:	b2db      	uxtb	r3, r3
  403e0c:	2b00      	cmp	r3, #0
  403e0e:	d001      	beq.n	403e14 <sd_acmd6+0x40>
		return false;
  403e10:	2300      	movs	r3, #0
  403e12:	e004      	b.n	403e1e <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  403e14:	4b03      	ldr	r3, [pc, #12]	; (403e24 <sd_acmd6+0x50>)
  403e16:	681b      	ldr	r3, [r3, #0]
  403e18:	2204      	movs	r2, #4
  403e1a:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  403e1c:	2301      	movs	r3, #1
}
  403e1e:	4618      	mov	r0, r3
  403e20:	bd80      	pop	{r7, pc}
  403e22:	bf00      	nop
  403e24:	200033f0 	.word	0x200033f0
  403e28:	0040534d 	.word	0x0040534d

00403e2c <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  403e2c:	b590      	push	{r4, r7, lr}
  403e2e:	b085      	sub	sp, #20
  403e30:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403e32:	4b37      	ldr	r3, [pc, #220]	; (403f10 <sd_acmd51+0xe4>)
  403e34:	681b      	ldr	r3, [r3, #0]
  403e36:	899b      	ldrh	r3, [r3, #12]
  403e38:	041b      	lsls	r3, r3, #16
  403e3a:	f241 1037 	movw	r0, #4407	; 0x1137
  403e3e:	4619      	mov	r1, r3
  403e40:	4b34      	ldr	r3, [pc, #208]	; (403f14 <sd_acmd51+0xe8>)
  403e42:	4798      	blx	r3
  403e44:	4603      	mov	r3, r0
  403e46:	f083 0301 	eor.w	r3, r3, #1
  403e4a:	b2db      	uxtb	r3, r3
  403e4c:	2b00      	cmp	r3, #0
  403e4e:	d001      	beq.n	403e54 <sd_acmd51+0x28>
		return false;
  403e50:	2300      	movs	r3, #0
  403e52:	e059      	b.n	403f08 <sd_acmd51+0xdc>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  403e54:	2301      	movs	r3, #1
  403e56:	9300      	str	r3, [sp, #0]
  403e58:	482f      	ldr	r0, [pc, #188]	; (403f18 <sd_acmd51+0xec>)
  403e5a:	2100      	movs	r1, #0
  403e5c:	2208      	movs	r2, #8
  403e5e:	2301      	movs	r3, #1
  403e60:	4c2e      	ldr	r4, [pc, #184]	; (403f1c <sd_acmd51+0xf0>)
  403e62:	47a0      	blx	r4
  403e64:	4603      	mov	r3, r0
  403e66:	f083 0301 	eor.w	r3, r3, #1
  403e6a:	b2db      	uxtb	r3, r3
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	d001      	beq.n	403e74 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  403e70:	2300      	movs	r3, #0
  403e72:	e049      	b.n	403f08 <sd_acmd51+0xdc>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  403e74:	463b      	mov	r3, r7
  403e76:	4618      	mov	r0, r3
  403e78:	2101      	movs	r1, #1
  403e7a:	4b29      	ldr	r3, [pc, #164]	; (403f20 <sd_acmd51+0xf4>)
  403e7c:	4798      	blx	r3
  403e7e:	4603      	mov	r3, r0
  403e80:	f083 0301 	eor.w	r3, r3, #1
  403e84:	b2db      	uxtb	r3, r3
  403e86:	2b00      	cmp	r3, #0
  403e88:	d001      	beq.n	403e8e <sd_acmd51+0x62>
		return false;
  403e8a:	2300      	movs	r3, #0
  403e8c:	e03c      	b.n	403f08 <sd_acmd51+0xdc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  403e8e:	4b25      	ldr	r3, [pc, #148]	; (403f24 <sd_acmd51+0xf8>)
  403e90:	4798      	blx	r3
  403e92:	4603      	mov	r3, r0
  403e94:	f083 0301 	eor.w	r3, r3, #1
  403e98:	b2db      	uxtb	r3, r3
  403e9a:	2b00      	cmp	r3, #0
  403e9c:	d001      	beq.n	403ea2 <sd_acmd51+0x76>
		return false;
  403e9e:	2300      	movs	r3, #0
  403ea0:	e032      	b.n	403f08 <sd_acmd51+0xdc>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  403ea2:	463b      	mov	r3, r7
  403ea4:	4618      	mov	r0, r3
  403ea6:	2140      	movs	r1, #64	; 0x40
  403ea8:	2238      	movs	r2, #56	; 0x38
  403eaa:	2304      	movs	r3, #4
  403eac:	4c1e      	ldr	r4, [pc, #120]	; (403f28 <sd_acmd51+0xfc>)
  403eae:	47a0      	blx	r4
  403eb0:	4603      	mov	r3, r0
  403eb2:	2b01      	cmp	r3, #1
  403eb4:	d009      	beq.n	403eca <sd_acmd51+0x9e>
  403eb6:	2b01      	cmp	r3, #1
  403eb8:	d302      	bcc.n	403ec0 <sd_acmd51+0x94>
  403eba:	2b02      	cmp	r3, #2
  403ebc:	d00a      	beq.n	403ed4 <sd_acmd51+0xa8>
  403ebe:	e01d      	b.n	403efc <sd_acmd51+0xd0>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403ec0:	4b13      	ldr	r3, [pc, #76]	; (403f10 <sd_acmd51+0xe4>)
  403ec2:	681b      	ldr	r3, [r3, #0]
  403ec4:	2210      	movs	r2, #16
  403ec6:	741a      	strb	r2, [r3, #16]
		break;
  403ec8:	e01d      	b.n	403f06 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  403eca:	4b11      	ldr	r3, [pc, #68]	; (403f10 <sd_acmd51+0xe4>)
  403ecc:	681b      	ldr	r3, [r3, #0]
  403ece:	221a      	movs	r2, #26
  403ed0:	741a      	strb	r2, [r3, #16]
		break;
  403ed2:	e018      	b.n	403f06 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  403ed4:	463b      	mov	r3, r7
  403ed6:	4618      	mov	r0, r3
  403ed8:	2140      	movs	r1, #64	; 0x40
  403eda:	222f      	movs	r2, #47	; 0x2f
  403edc:	2301      	movs	r3, #1
  403ede:	4c12      	ldr	r4, [pc, #72]	; (403f28 <sd_acmd51+0xfc>)
  403ee0:	47a0      	blx	r4
  403ee2:	4603      	mov	r3, r0
  403ee4:	2b01      	cmp	r3, #1
  403ee6:	d104      	bne.n	403ef2 <sd_acmd51+0xc6>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  403ee8:	4b09      	ldr	r3, [pc, #36]	; (403f10 <sd_acmd51+0xe4>)
  403eea:	681b      	ldr	r3, [r3, #0]
  403eec:	2230      	movs	r2, #48	; 0x30
  403eee:	741a      	strb	r2, [r3, #16]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  403ef0:	e009      	b.n	403f06 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
			sd_mmc_card->version = CARD_VER_SD_3_0;
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  403ef2:	4b07      	ldr	r3, [pc, #28]	; (403f10 <sd_acmd51+0xe4>)
  403ef4:	681b      	ldr	r3, [r3, #0]
  403ef6:	2220      	movs	r2, #32
  403ef8:	741a      	strb	r2, [r3, #16]
		}
		break;
  403efa:	e004      	b.n	403f06 <sd_acmd51+0xda>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403efc:	4b04      	ldr	r3, [pc, #16]	; (403f10 <sd_acmd51+0xe4>)
  403efe:	681b      	ldr	r3, [r3, #0]
  403f00:	2210      	movs	r2, #16
  403f02:	741a      	strb	r2, [r3, #16]
		break;
  403f04:	bf00      	nop
	}
	return true;
  403f06:	2301      	movs	r3, #1
}
  403f08:	4618      	mov	r0, r3
  403f0a:	370c      	adds	r7, #12
  403f0c:	46bd      	mov	sp, r7
  403f0e:	bd90      	pop	{r4, r7, pc}
  403f10:	200033f0 	.word	0x200033f0
  403f14:	0040534d 	.word	0x0040534d
  403f18:	00081133 	.word	0x00081133
  403f1c:	00405419 	.word	0x00405419
  403f20:	004055e9 	.word	0x004055e9
  403f24:	00405699 	.word	0x00405699
  403f28:	00403375 	.word	0x00403375

00403f2c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  403f2c:	b580      	push	{r7, lr}
  403f2e:	b082      	sub	sp, #8
  403f30:	af00      	add	r7, sp, #0
  403f32:	4603      	mov	r3, r0
  403f34:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  403f36:	79fb      	ldrb	r3, [r7, #7]
  403f38:	2b00      	cmp	r3, #0
  403f3a:	d001      	beq.n	403f40 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  403f3c:	2304      	movs	r3, #4
  403f3e:	e0a8      	b.n	404092 <sd_mmc_select_slot+0x166>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  403f40:	79fa      	ldrb	r2, [r7, #7]
  403f42:	4956      	ldr	r1, [pc, #344]	; (40409c <sd_mmc_select_slot+0x170>)
  403f44:	4613      	mov	r3, r2
  403f46:	00db      	lsls	r3, r3, #3
  403f48:	4413      	add	r3, r2
  403f4a:	009b      	lsls	r3, r3, #2
  403f4c:	440b      	add	r3, r1
  403f4e:	3308      	adds	r3, #8
  403f50:	681b      	ldr	r3, [r3, #0]
  403f52:	4618      	mov	r0, r3
  403f54:	4b52      	ldr	r3, [pc, #328]	; (4040a0 <sd_mmc_select_slot+0x174>)
  403f56:	4798      	blx	r3
  403f58:	4603      	mov	r3, r0
			!= SD_MMC_0_CD_DETECT_VALUE) {
  403f5a:	f083 0301 	eor.w	r3, r3, #1
  403f5e:	b2db      	uxtb	r3, r3
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  403f60:	2b00      	cmp	r3, #0
  403f62:	d018      	beq.n	403f96 <sd_mmc_select_slot+0x6a>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  403f64:	79fa      	ldrb	r2, [r7, #7]
  403f66:	494d      	ldr	r1, [pc, #308]	; (40409c <sd_mmc_select_slot+0x170>)
  403f68:	4613      	mov	r3, r2
  403f6a:	00db      	lsls	r3, r3, #3
  403f6c:	4413      	add	r3, r2
  403f6e:	009b      	lsls	r3, r3, #2
  403f70:	440b      	add	r3, r1
  403f72:	3308      	adds	r3, #8
  403f74:	799b      	ldrb	r3, [r3, #6]
  403f76:	2b01      	cmp	r3, #1
  403f78:	d101      	bne.n	403f7e <sd_mmc_select_slot+0x52>
			SD_MMC_STOP_TIMEOUT();
  403f7a:	4b4a      	ldr	r3, [pc, #296]	; (4040a4 <sd_mmc_select_slot+0x178>)
  403f7c:	4798      	blx	r3
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  403f7e:	79fa      	ldrb	r2, [r7, #7]
  403f80:	4946      	ldr	r1, [pc, #280]	; (40409c <sd_mmc_select_slot+0x170>)
  403f82:	4613      	mov	r3, r2
  403f84:	00db      	lsls	r3, r3, #3
  403f86:	4413      	add	r3, r2
  403f88:	009b      	lsls	r3, r3, #2
  403f8a:	440b      	add	r3, r1
  403f8c:	3308      	adds	r3, #8
  403f8e:	2204      	movs	r2, #4
  403f90:	719a      	strb	r2, [r3, #6]
		return SD_MMC_ERR_NO_CARD;
  403f92:	2302      	movs	r3, #2
  403f94:	e07d      	b.n	404092 <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  403f96:	79fa      	ldrb	r2, [r7, #7]
  403f98:	4940      	ldr	r1, [pc, #256]	; (40409c <sd_mmc_select_slot+0x170>)
  403f9a:	4613      	mov	r3, r2
  403f9c:	00db      	lsls	r3, r3, #3
  403f9e:	4413      	add	r3, r2
  403fa0:	009b      	lsls	r3, r3, #2
  403fa2:	440b      	add	r3, r1
  403fa4:	3308      	adds	r3, #8
  403fa6:	799b      	ldrb	r3, [r3, #6]
  403fa8:	2b04      	cmp	r3, #4
  403faa:	d10d      	bne.n	403fc8 <sd_mmc_select_slot+0x9c>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  403fac:	79fa      	ldrb	r2, [r7, #7]
  403fae:	493b      	ldr	r1, [pc, #236]	; (40409c <sd_mmc_select_slot+0x170>)
  403fb0:	4613      	mov	r3, r2
  403fb2:	00db      	lsls	r3, r3, #3
  403fb4:	4413      	add	r3, r2
  403fb6:	009b      	lsls	r3, r3, #2
  403fb8:	440b      	add	r3, r1
  403fba:	3308      	adds	r3, #8
  403fbc:	2201      	movs	r2, #1
  403fbe:	719a      	strb	r2, [r3, #6]
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
  403fc0:	4b39      	ldr	r3, [pc, #228]	; (4040a8 <sd_mmc_select_slot+0x17c>)
  403fc2:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  403fc4:	2302      	movs	r3, #2
  403fc6:	e064      	b.n	404092 <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  403fc8:	79fa      	ldrb	r2, [r7, #7]
  403fca:	4934      	ldr	r1, [pc, #208]	; (40409c <sd_mmc_select_slot+0x170>)
  403fcc:	4613      	mov	r3, r2
  403fce:	00db      	lsls	r3, r3, #3
  403fd0:	4413      	add	r3, r2
  403fd2:	009b      	lsls	r3, r3, #2
  403fd4:	440b      	add	r3, r1
  403fd6:	3308      	adds	r3, #8
  403fd8:	799b      	ldrb	r3, [r3, #6]
  403fda:	2b01      	cmp	r3, #1
  403fdc:	d130      	bne.n	404040 <sd_mmc_select_slot+0x114>
		if (!SD_MMC_IS_TIMEOUT()) {
  403fde:	4b33      	ldr	r3, [pc, #204]	; (4040ac <sd_mmc_select_slot+0x180>)
  403fe0:	4798      	blx	r3
  403fe2:	4603      	mov	r3, r0
  403fe4:	f083 0301 	eor.w	r3, r3, #1
  403fe8:	b2db      	uxtb	r3, r3
  403fea:	2b00      	cmp	r3, #0
  403fec:	d001      	beq.n	403ff2 <sd_mmc_select_slot+0xc6>
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  403fee:	2302      	movs	r3, #2
  403ff0:	e04f      	b.n	404092 <sd_mmc_select_slot+0x166>
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  403ff2:	79fa      	ldrb	r2, [r7, #7]
  403ff4:	4929      	ldr	r1, [pc, #164]	; (40409c <sd_mmc_select_slot+0x170>)
  403ff6:	4613      	mov	r3, r2
  403ff8:	00db      	lsls	r3, r3, #3
  403ffa:	4413      	add	r3, r2
  403ffc:	009b      	lsls	r3, r3, #2
  403ffe:	440b      	add	r3, r1
  404000:	3308      	adds	r3, #8
  404002:	2202      	movs	r2, #2
  404004:	719a      	strb	r2, [r3, #6]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  404006:	79fa      	ldrb	r2, [r7, #7]
  404008:	4924      	ldr	r1, [pc, #144]	; (40409c <sd_mmc_select_slot+0x170>)
  40400a:	4613      	mov	r3, r2
  40400c:	00db      	lsls	r3, r3, #3
  40400e:	4413      	add	r3, r2
  404010:	009b      	lsls	r3, r3, #2
  404012:	440b      	add	r3, r1
  404014:	4a26      	ldr	r2, [pc, #152]	; (4040b0 <sd_mmc_select_slot+0x184>)
  404016:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  404018:	79fa      	ldrb	r2, [r7, #7]
  40401a:	4920      	ldr	r1, [pc, #128]	; (40409c <sd_mmc_select_slot+0x170>)
  40401c:	4613      	mov	r3, r2
  40401e:	00db      	lsls	r3, r3, #3
  404020:	4413      	add	r3, r2
  404022:	009b      	lsls	r3, r3, #2
  404024:	440b      	add	r3, r1
  404026:	3310      	adds	r3, #16
  404028:	2201      	movs	r2, #1
  40402a:	705a      	strb	r2, [r3, #1]
		sd_mmc_cards[slot].high_speed = 0;
  40402c:	79fa      	ldrb	r2, [r7, #7]
  40402e:	491b      	ldr	r1, [pc, #108]	; (40409c <sd_mmc_select_slot+0x170>)
  404030:	4613      	mov	r3, r2
  404032:	00db      	lsls	r3, r3, #3
  404034:	4413      	add	r3, r2
  404036:	009b      	lsls	r3, r3, #2
  404038:	440b      	add	r3, r1
  40403a:	3320      	adds	r3, #32
  40403c:	2200      	movs	r2, #0
  40403e:	709a      	strb	r2, [r3, #2]
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  404040:	79fa      	ldrb	r2, [r7, #7]
  404042:	4916      	ldr	r1, [pc, #88]	; (40409c <sd_mmc_select_slot+0x170>)
  404044:	4613      	mov	r3, r2
  404046:	00db      	lsls	r3, r3, #3
  404048:	4413      	add	r3, r2
  40404a:	009b      	lsls	r3, r3, #2
  40404c:	440b      	add	r3, r1
  40404e:	3308      	adds	r3, #8
  404050:	799b      	ldrb	r3, [r3, #6]
  404052:	2b03      	cmp	r3, #3
  404054:	d101      	bne.n	40405a <sd_mmc_select_slot+0x12e>
		return SD_MMC_ERR_UNUSABLE;
  404056:	2303      	movs	r3, #3
  404058:	e01b      	b.n	404092 <sd_mmc_select_slot+0x166>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  40405a:	4b16      	ldr	r3, [pc, #88]	; (4040b4 <sd_mmc_select_slot+0x188>)
  40405c:	79fa      	ldrb	r2, [r7, #7]
  40405e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  404060:	79fa      	ldrb	r2, [r7, #7]
  404062:	4613      	mov	r3, r2
  404064:	00db      	lsls	r3, r3, #3
  404066:	4413      	add	r3, r2
  404068:	009b      	lsls	r3, r3, #2
  40406a:	4a0c      	ldr	r2, [pc, #48]	; (40409c <sd_mmc_select_slot+0x170>)
  40406c:	441a      	add	r2, r3
  40406e:	4b12      	ldr	r3, [pc, #72]	; (4040b8 <sd_mmc_select_slot+0x18c>)
  404070:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
  404072:	4b12      	ldr	r3, [pc, #72]	; (4040bc <sd_mmc_select_slot+0x190>)
  404074:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  404076:	79fa      	ldrb	r2, [r7, #7]
  404078:	4908      	ldr	r1, [pc, #32]	; (40409c <sd_mmc_select_slot+0x170>)
  40407a:	4613      	mov	r3, r2
  40407c:	00db      	lsls	r3, r3, #3
  40407e:	4413      	add	r3, r2
  404080:	009b      	lsls	r3, r3, #2
  404082:	440b      	add	r3, r1
  404084:	3308      	adds	r3, #8
  404086:	799b      	ldrb	r3, [r3, #6]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  404088:	2b02      	cmp	r3, #2
  40408a:	bf14      	ite	ne
  40408c:	2300      	movne	r3, #0
  40408e:	2301      	moveq	r3, #1
  404090:	b2db      	uxtb	r3, r3
}
  404092:	4618      	mov	r0, r3
  404094:	3708      	adds	r7, #8
  404096:	46bd      	mov	sp, r7
  404098:	bd80      	pop	{r7, pc}
  40409a:	bf00      	nop
  40409c:	2000018c 	.word	0x2000018c
  4040a0:	00403525 	.word	0x00403525
  4040a4:	00403681 	.word	0x00403681
  4040a8:	00403575 	.word	0x00403575
  4040ac:	00403641 	.word	0x00403641
  4040b0:	00061a80 	.word	0x00061a80
  4040b4:	200033ec 	.word	0x200033ec
  4040b8:	200033f0 	.word	0x200033f0
  4040bc:	004040c1 	.word	0x004040c1

004040c0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4040c0:	b598      	push	{r3, r4, r7, lr}
  4040c2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4040c4:	4b09      	ldr	r3, [pc, #36]	; (4040ec <sd_mmc_configure_slot+0x2c>)
  4040c6:	7818      	ldrb	r0, [r3, #0]
  4040c8:	4b09      	ldr	r3, [pc, #36]	; (4040f0 <sd_mmc_configure_slot+0x30>)
  4040ca:	681b      	ldr	r3, [r3, #0]
  4040cc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  4040ce:	4b08      	ldr	r3, [pc, #32]	; (4040f0 <sd_mmc_configure_slot+0x30>)
  4040d0:	681b      	ldr	r3, [r3, #0]
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4040d2:	7c5a      	ldrb	r2, [r3, #17]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  4040d4:	4b06      	ldr	r3, [pc, #24]	; (4040f0 <sd_mmc_configure_slot+0x30>)
  4040d6:	681b      	ldr	r3, [r3, #0]
  4040d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4040dc:	2b00      	cmp	r3, #0
  4040de:	bf0c      	ite	eq
  4040e0:	2300      	moveq	r3, #0
  4040e2:	2301      	movne	r3, #1
  4040e4:	b2db      	uxtb	r3, r3
  4040e6:	4c03      	ldr	r4, [pc, #12]	; (4040f4 <sd_mmc_configure_slot+0x34>)
  4040e8:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
  4040ea:	bd98      	pop	{r3, r4, r7, pc}
  4040ec:	200033ec 	.word	0x200033ec
  4040f0:	200033f0 	.word	0x200033f0
  4040f4:	00405265 	.word	0x00405265

004040f8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4040f8:	b580      	push	{r7, lr}
  4040fa:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4040fc:	4b04      	ldr	r3, [pc, #16]	; (404110 <sd_mmc_deselect_slot+0x18>)
  4040fe:	781b      	ldrb	r3, [r3, #0]
  404100:	2b00      	cmp	r3, #0
  404102:	d104      	bne.n	40410e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  404104:	4b02      	ldr	r3, [pc, #8]	; (404110 <sd_mmc_deselect_slot+0x18>)
  404106:	781b      	ldrb	r3, [r3, #0]
  404108:	4618      	mov	r0, r3
  40410a:	4b02      	ldr	r3, [pc, #8]	; (404114 <sd_mmc_deselect_slot+0x1c>)
  40410c:	4798      	blx	r3
	}
}
  40410e:	bd80      	pop	{r7, pc}
  404110:	200033ec 	.word	0x200033ec
  404114:	004052f9 	.word	0x004052f9

00404118 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  404118:	b590      	push	{r4, r7, lr}
  40411a:	b083      	sub	sp, #12
  40411c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
  40411e:	2300      	movs	r3, #0
  404120:	71fb      	strb	r3, [r7, #7]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  404122:	4b7d      	ldr	r3, [pc, #500]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404124:	681b      	ldr	r3, [r3, #0]
  404126:	2201      	movs	r2, #1
  404128:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40412a:	4b7b      	ldr	r3, [pc, #492]	; (404318 <sd_mmc_mci_card_init+0x200>)
  40412c:	681b      	ldr	r3, [r3, #0]
  40412e:	2200      	movs	r2, #0
  404130:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
  404132:	4b79      	ldr	r3, [pc, #484]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404134:	681b      	ldr	r3, [r3, #0]
  404136:	2200      	movs	r2, #0
  404138:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  40413a:	4b78      	ldr	r3, [pc, #480]	; (40431c <sd_mmc_mci_card_init+0x204>)
  40413c:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40413e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  404142:	2100      	movs	r1, #0
  404144:	4b76      	ldr	r3, [pc, #472]	; (404320 <sd_mmc_mci_card_init+0x208>)
  404146:	4798      	blx	r3
  404148:	4603      	mov	r3, r0
  40414a:	f083 0301 	eor.w	r3, r3, #1
  40414e:	b2db      	uxtb	r3, r3
  404150:	2b00      	cmp	r3, #0
  404152:	d001      	beq.n	404158 <sd_mmc_mci_card_init+0x40>
		return false;
  404154:	2300      	movs	r3, #0
  404156:	e0da      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	}
	if (!sd_cmd8(&v2)) {
  404158:	1dfb      	adds	r3, r7, #7
  40415a:	4618      	mov	r0, r3
  40415c:	4b71      	ldr	r3, [pc, #452]	; (404324 <sd_mmc_mci_card_init+0x20c>)
  40415e:	4798      	blx	r3
  404160:	4603      	mov	r3, r0
  404162:	f083 0301 	eor.w	r3, r3, #1
  404166:	b2db      	uxtb	r3, r3
  404168:	2b00      	cmp	r3, #0
  40416a:	d001      	beq.n	404170 <sd_mmc_mci_card_init+0x58>
		return false;
  40416c:	2300      	movs	r3, #0
  40416e:	e0ce      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  404170:	4b6d      	ldr	r3, [pc, #436]	; (404328 <sd_mmc_mci_card_init+0x210>)
  404172:	4798      	blx	r3
  404174:	4603      	mov	r3, r0
  404176:	f083 0301 	eor.w	r3, r3, #1
  40417a:	b2db      	uxtb	r3, r3
  40417c:	2b00      	cmp	r3, #0
  40417e:	d001      	beq.n	404184 <sd_mmc_mci_card_init+0x6c>
		return false;
  404180:	2300      	movs	r3, #0
  404182:	e0c4      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404184:	4b64      	ldr	r3, [pc, #400]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404186:	681b      	ldr	r3, [r3, #0]
  404188:	7bdb      	ldrb	r3, [r3, #15]
  40418a:	f003 0301 	and.w	r3, r3, #1
  40418e:	2b00      	cmp	r3, #0
  404190:	d011      	beq.n	4041b6 <sd_mmc_mci_card_init+0x9e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  404192:	79fb      	ldrb	r3, [r7, #7]
  404194:	4618      	mov	r0, r3
  404196:	4b65      	ldr	r3, [pc, #404]	; (40432c <sd_mmc_mci_card_init+0x214>)
  404198:	4798      	blx	r3
  40419a:	4603      	mov	r3, r0
  40419c:	f083 0301 	eor.w	r3, r3, #1
  4041a0:	b2db      	uxtb	r3, r3
  4041a2:	2b00      	cmp	r3, #0
  4041a4:	d007      	beq.n	4041b6 <sd_mmc_mci_card_init+0x9e>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  4041a6:	4b5c      	ldr	r3, [pc, #368]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4041a8:	681b      	ldr	r3, [r3, #0]
  4041aa:	2202      	movs	r2, #2
  4041ac:	73da      	strb	r2, [r3, #15]
			return sd_mmc_mci_install_mmc();
  4041ae:	4b60      	ldr	r3, [pc, #384]	; (404330 <sd_mmc_mci_card_init+0x218>)
  4041b0:	4798      	blx	r3
  4041b2:	4603      	mov	r3, r0
  4041b4:	e0ab      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4041b6:	4b58      	ldr	r3, [pc, #352]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4041b8:	681b      	ldr	r3, [r3, #0]
  4041ba:	7bdb      	ldrb	r3, [r3, #15]
  4041bc:	f003 0301 	and.w	r3, r3, #1
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	d00c      	beq.n	4041de <sd_mmc_mci_card_init+0xc6>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4041c4:	f645 3002 	movw	r0, #23298	; 0x5b02
  4041c8:	2100      	movs	r1, #0
  4041ca:	4b55      	ldr	r3, [pc, #340]	; (404320 <sd_mmc_mci_card_init+0x208>)
  4041cc:	4798      	blx	r3
  4041ce:	4603      	mov	r3, r0
  4041d0:	f083 0301 	eor.w	r3, r3, #1
  4041d4:	b2db      	uxtb	r3, r3
  4041d6:	2b00      	cmp	r3, #0
  4041d8:	d001      	beq.n	4041de <sd_mmc_mci_card_init+0xc6>
			return false;
  4041da:	2300      	movs	r3, #0
  4041dc:	e097      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  4041de:	f245 1003 	movw	r0, #20739	; 0x5103
  4041e2:	2100      	movs	r1, #0
  4041e4:	4b4e      	ldr	r3, [pc, #312]	; (404320 <sd_mmc_mci_card_init+0x208>)
  4041e6:	4798      	blx	r3
  4041e8:	4603      	mov	r3, r0
  4041ea:	f083 0301 	eor.w	r3, r3, #1
  4041ee:	b2db      	uxtb	r3, r3
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	d001      	beq.n	4041f8 <sd_mmc_mci_card_init+0xe0>
		return false;
  4041f4:	2300      	movs	r3, #0
  4041f6:	e08a      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  4041f8:	4b47      	ldr	r3, [pc, #284]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4041fa:	681c      	ldr	r4, [r3, #0]
  4041fc:	4b4d      	ldr	r3, [pc, #308]	; (404334 <sd_mmc_mci_card_init+0x21c>)
  4041fe:	4798      	blx	r3
  404200:	4603      	mov	r3, r0
  404202:	0c1b      	lsrs	r3, r3, #16
  404204:	b29b      	uxth	r3, r3
  404206:	81a3      	strh	r3, [r4, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404208:	4b43      	ldr	r3, [pc, #268]	; (404318 <sd_mmc_mci_card_init+0x200>)
  40420a:	681b      	ldr	r3, [r3, #0]
  40420c:	7bdb      	ldrb	r3, [r3, #15]
  40420e:	f003 0301 	and.w	r3, r3, #1
  404212:	2b00      	cmp	r3, #0
  404214:	d00b      	beq.n	40422e <sd_mmc_mci_card_init+0x116>
		if (!sd_mmc_cmd9_mci()) {
  404216:	4b48      	ldr	r3, [pc, #288]	; (404338 <sd_mmc_mci_card_init+0x220>)
  404218:	4798      	blx	r3
  40421a:	4603      	mov	r3, r0
  40421c:	f083 0301 	eor.w	r3, r3, #1
  404220:	b2db      	uxtb	r3, r3
  404222:	2b00      	cmp	r3, #0
  404224:	d001      	beq.n	40422a <sd_mmc_mci_card_init+0x112>
			return false;
  404226:	2300      	movs	r3, #0
  404228:	e071      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
		}
		sd_decode_csd();
  40422a:	4b44      	ldr	r3, [pc, #272]	; (40433c <sd_mmc_mci_card_init+0x224>)
  40422c:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  40422e:	4b3a      	ldr	r3, [pc, #232]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404230:	681b      	ldr	r3, [r3, #0]
  404232:	899b      	ldrh	r3, [r3, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  404234:	041b      	lsls	r3, r3, #16
  404236:	f243 1007 	movw	r0, #12551	; 0x3107
  40423a:	4619      	mov	r1, r3
  40423c:	4b38      	ldr	r3, [pc, #224]	; (404320 <sd_mmc_mci_card_init+0x208>)
  40423e:	4798      	blx	r3
  404240:	4603      	mov	r3, r0
  404242:	f083 0301 	eor.w	r3, r3, #1
  404246:	b2db      	uxtb	r3, r3
  404248:	2b00      	cmp	r3, #0
  40424a:	d001      	beq.n	404250 <sd_mmc_mci_card_init+0x138>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  40424c:	2300      	movs	r3, #0
  40424e:	e05e      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404250:	4b31      	ldr	r3, [pc, #196]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404252:	681b      	ldr	r3, [r3, #0]
  404254:	7bdb      	ldrb	r3, [r3, #15]
  404256:	f003 0301 	and.w	r3, r3, #1
  40425a:	2b00      	cmp	r3, #0
  40425c:	d009      	beq.n	404272 <sd_mmc_mci_card_init+0x15a>
		if (!sd_acmd51()) {
  40425e:	4b38      	ldr	r3, [pc, #224]	; (404340 <sd_mmc_mci_card_init+0x228>)
  404260:	4798      	blx	r3
  404262:	4603      	mov	r3, r0
  404264:	f083 0301 	eor.w	r3, r3, #1
  404268:	b2db      	uxtb	r3, r3
  40426a:	2b00      	cmp	r3, #0
  40426c:	d001      	beq.n	404272 <sd_mmc_mci_card_init+0x15a>
			return false;
  40426e:	2300      	movs	r3, #0
  404270:	e04d      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  404272:	4b34      	ldr	r3, [pc, #208]	; (404344 <sd_mmc_mci_card_init+0x22c>)
  404274:	781b      	ldrb	r3, [r3, #0]
  404276:	4618      	mov	r0, r3
  404278:	4b33      	ldr	r3, [pc, #204]	; (404348 <sd_mmc_mci_card_init+0x230>)
  40427a:	4798      	blx	r3
  40427c:	4603      	mov	r3, r0
  40427e:	2b03      	cmp	r3, #3
  404280:	d912      	bls.n	4042a8 <sd_mmc_mci_card_init+0x190>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  404282:	4b25      	ldr	r3, [pc, #148]	; (404318 <sd_mmc_mci_card_init+0x200>)
  404284:	681b      	ldr	r3, [r3, #0]
  404286:	7bdb      	ldrb	r3, [r3, #15]
  404288:	f003 0301 	and.w	r3, r3, #1
  40428c:	2b00      	cmp	r3, #0
  40428e:	d009      	beq.n	4042a4 <sd_mmc_mci_card_init+0x18c>
			if (!sd_acmd6()) {
  404290:	4b2e      	ldr	r3, [pc, #184]	; (40434c <sd_mmc_mci_card_init+0x234>)
  404292:	4798      	blx	r3
  404294:	4603      	mov	r3, r0
  404296:	f083 0301 	eor.w	r3, r3, #1
  40429a:	b2db      	uxtb	r3, r3
  40429c:	2b00      	cmp	r3, #0
  40429e:	d001      	beq.n	4042a4 <sd_mmc_mci_card_init+0x18c>
				return false;
  4042a0:	2300      	movs	r3, #0
  4042a2:	e034      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  4042a4:	4b2a      	ldr	r3, [pc, #168]	; (404350 <sd_mmc_mci_card_init+0x238>)
  4042a6:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  4042a8:	4b2a      	ldr	r3, [pc, #168]	; (404354 <sd_mmc_mci_card_init+0x23c>)
  4042aa:	4798      	blx	r3
  4042ac:	4603      	mov	r3, r0
  4042ae:	2b00      	cmp	r3, #0
  4042b0:	d017      	beq.n	4042e2 <sd_mmc_mci_card_init+0x1ca>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4042b2:	4b19      	ldr	r3, [pc, #100]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4042b4:	681b      	ldr	r3, [r3, #0]
  4042b6:	7bdb      	ldrb	r3, [r3, #15]
  4042b8:	f003 0301 	and.w	r3, r3, #1
  4042bc:	2b00      	cmp	r3, #0
  4042be:	d00e      	beq.n	4042de <sd_mmc_mci_card_init+0x1c6>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  4042c0:	4b15      	ldr	r3, [pc, #84]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4042c2:	681b      	ldr	r3, [r3, #0]
  4042c4:	7c1b      	ldrb	r3, [r3, #16]
  4042c6:	2b10      	cmp	r3, #16
  4042c8:	d909      	bls.n	4042de <sd_mmc_mci_card_init+0x1c6>
				if (!sd_cm6_set_high_speed()) {
  4042ca:	4b23      	ldr	r3, [pc, #140]	; (404358 <sd_mmc_mci_card_init+0x240>)
  4042cc:	4798      	blx	r3
  4042ce:	4603      	mov	r3, r0
  4042d0:	f083 0301 	eor.w	r3, r3, #1
  4042d4:	b2db      	uxtb	r3, r3
  4042d6:	2b00      	cmp	r3, #0
  4042d8:	d001      	beq.n	4042de <sd_mmc_mci_card_init+0x1c6>
					return false;
  4042da:	2300      	movs	r3, #0
  4042dc:	e017      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  4042de:	4b1c      	ldr	r3, [pc, #112]	; (404350 <sd_mmc_mci_card_init+0x238>)
  4042e0:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4042e2:	4b0d      	ldr	r3, [pc, #52]	; (404318 <sd_mmc_mci_card_init+0x200>)
  4042e4:	681b      	ldr	r3, [r3, #0]
  4042e6:	7bdb      	ldrb	r3, [r3, #15]
  4042e8:	f003 0301 	and.w	r3, r3, #1
  4042ec:	2b00      	cmp	r3, #0
  4042ee:	d00d      	beq.n	40430c <sd_mmc_mci_card_init+0x1f4>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4042f0:	f241 1010 	movw	r0, #4368	; 0x1110
  4042f4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4042f8:	4b09      	ldr	r3, [pc, #36]	; (404320 <sd_mmc_mci_card_init+0x208>)
  4042fa:	4798      	blx	r3
  4042fc:	4603      	mov	r3, r0
  4042fe:	f083 0301 	eor.w	r3, r3, #1
  404302:	b2db      	uxtb	r3, r3
  404304:	2b00      	cmp	r3, #0
  404306:	d001      	beq.n	40430c <sd_mmc_mci_card_init+0x1f4>
			return false;
  404308:	2300      	movs	r3, #0
  40430a:	e000      	b.n	40430e <sd_mmc_mci_card_init+0x1f6>
		}
	}
	return true;
  40430c:	2301      	movs	r3, #1
}
  40430e:	4618      	mov	r0, r3
  404310:	370c      	adds	r7, #12
  404312:	46bd      	mov	sp, r7
  404314:	bd90      	pop	{r4, r7, pc}
  404316:	bf00      	nop
  404318:	200033f0 	.word	0x200033f0
  40431c:	0040530d 	.word	0x0040530d
  404320:	0040534d 	.word	0x0040534d
  404324:	004039a1 	.word	0x004039a1
  404328:	004037d1 	.word	0x004037d1
  40432c:	00403725 	.word	0x00403725
  404330:	0040435d 	.word	0x0040435d
  404334:	00405399 	.word	0x00405399
  404338:	00403b01 	.word	0x00403b01
  40433c:	00403c7d 	.word	0x00403c7d
  404340:	00403e2d 	.word	0x00403e2d
  404344:	200033ec 	.word	0x200033ec
  404348:	00405231 	.word	0x00405231
  40434c:	00403dd5 	.word	0x00403dd5
  404350:	004040c1 	.word	0x004040c1
  404354:	00405255 	.word	0x00405255
  404358:	004037e1 	.word	0x004037e1

0040435c <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  40435c:	b580      	push	{r7, lr}
  40435e:	b082      	sub	sp, #8
  404360:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  404362:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  404366:	2100      	movs	r1, #0
  404368:	4b56      	ldr	r3, [pc, #344]	; (4044c4 <sd_mmc_mci_install_mmc+0x168>)
  40436a:	4798      	blx	r3
  40436c:	4603      	mov	r3, r0
  40436e:	f083 0301 	eor.w	r3, r3, #1
  404372:	b2db      	uxtb	r3, r3
  404374:	2b00      	cmp	r3, #0
  404376:	d001      	beq.n	40437c <sd_mmc_mci_install_mmc+0x20>
		return false;
  404378:	2300      	movs	r3, #0
  40437a:	e09f      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  40437c:	4b52      	ldr	r3, [pc, #328]	; (4044c8 <sd_mmc_mci_install_mmc+0x16c>)
  40437e:	4798      	blx	r3
  404380:	4603      	mov	r3, r0
  404382:	f083 0301 	eor.w	r3, r3, #1
  404386:	b2db      	uxtb	r3, r3
  404388:	2b00      	cmp	r3, #0
  40438a:	d001      	beq.n	404390 <sd_mmc_mci_install_mmc+0x34>
		return false;
  40438c:	2300      	movs	r3, #0
  40438e:	e095      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  404390:	f645 3002 	movw	r0, #23298	; 0x5b02
  404394:	2100      	movs	r1, #0
  404396:	4b4b      	ldr	r3, [pc, #300]	; (4044c4 <sd_mmc_mci_install_mmc+0x168>)
  404398:	4798      	blx	r3
  40439a:	4603      	mov	r3, r0
  40439c:	f083 0301 	eor.w	r3, r3, #1
  4043a0:	b2db      	uxtb	r3, r3
  4043a2:	2b00      	cmp	r3, #0
  4043a4:	d001      	beq.n	4043aa <sd_mmc_mci_install_mmc+0x4e>
		return false;
  4043a6:	2300      	movs	r3, #0
  4043a8:	e088      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4043aa:	4b48      	ldr	r3, [pc, #288]	; (4044cc <sd_mmc_mci_install_mmc+0x170>)
  4043ac:	681b      	ldr	r3, [r3, #0]
  4043ae:	2201      	movs	r2, #1
  4043b0:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4043b2:	4b46      	ldr	r3, [pc, #280]	; (4044cc <sd_mmc_mci_install_mmc+0x170>)
  4043b4:	681b      	ldr	r3, [r3, #0]
  4043b6:	899b      	ldrh	r3, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4043b8:	041b      	lsls	r3, r3, #16
  4043ba:	f241 1003 	movw	r0, #4355	; 0x1103
  4043be:	4619      	mov	r1, r3
  4043c0:	4b40      	ldr	r3, [pc, #256]	; (4044c4 <sd_mmc_mci_install_mmc+0x168>)
  4043c2:	4798      	blx	r3
  4043c4:	4603      	mov	r3, r0
  4043c6:	f083 0301 	eor.w	r3, r3, #1
  4043ca:	b2db      	uxtb	r3, r3
  4043cc:	2b00      	cmp	r3, #0
  4043ce:	d001      	beq.n	4043d4 <sd_mmc_mci_install_mmc+0x78>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  4043d0:	2300      	movs	r3, #0
  4043d2:	e073      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  4043d4:	4b3e      	ldr	r3, [pc, #248]	; (4044d0 <sd_mmc_mci_install_mmc+0x174>)
  4043d6:	4798      	blx	r3
  4043d8:	4603      	mov	r3, r0
  4043da:	f083 0301 	eor.w	r3, r3, #1
  4043de:	b2db      	uxtb	r3, r3
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	d001      	beq.n	4043e8 <sd_mmc_mci_install_mmc+0x8c>
		return false;
  4043e4:	2300      	movs	r3, #0
  4043e6:	e069      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  4043e8:	4b3a      	ldr	r3, [pc, #232]	; (4044d4 <sd_mmc_mci_install_mmc+0x178>)
  4043ea:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4043ec:	4b37      	ldr	r3, [pc, #220]	; (4044cc <sd_mmc_mci_install_mmc+0x170>)
  4043ee:	681b      	ldr	r3, [r3, #0]
  4043f0:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4043f2:	041b      	lsls	r3, r3, #16
  4043f4:	f243 1007 	movw	r0, #12551	; 0x3107
  4043f8:	4619      	mov	r1, r3
  4043fa:	4b32      	ldr	r3, [pc, #200]	; (4044c4 <sd_mmc_mci_install_mmc+0x168>)
  4043fc:	4798      	blx	r3
  4043fe:	4603      	mov	r3, r0
  404400:	f083 0301 	eor.w	r3, r3, #1
  404404:	b2db      	uxtb	r3, r3
  404406:	2b00      	cmp	r3, #0
  404408:	d001      	beq.n	40440e <sd_mmc_mci_install_mmc+0xb2>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  40440a:	2300      	movs	r3, #0
  40440c:	e056      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40440e:	4b2f      	ldr	r3, [pc, #188]	; (4044cc <sd_mmc_mci_install_mmc+0x170>)
  404410:	681b      	ldr	r3, [r3, #0]
  404412:	7c1b      	ldrb	r3, [r3, #16]
  404414:	2b3f      	cmp	r3, #63	; 0x3f
  404416:	d93b      	bls.n	404490 <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  404418:	1dbb      	adds	r3, r7, #6
  40441a:	4618      	mov	r0, r3
  40441c:	4b2e      	ldr	r3, [pc, #184]	; (4044d8 <sd_mmc_mci_install_mmc+0x17c>)
  40441e:	4798      	blx	r3
  404420:	4603      	mov	r3, r0
  404422:	f083 0301 	eor.w	r3, r3, #1
  404426:	b2db      	uxtb	r3, r3
  404428:	2b00      	cmp	r3, #0
  40442a:	d001      	beq.n	404430 <sd_mmc_mci_install_mmc+0xd4>
			return false;
  40442c:	2300      	movs	r3, #0
  40442e:	e045      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  404430:	4b2a      	ldr	r3, [pc, #168]	; (4044dc <sd_mmc_mci_install_mmc+0x180>)
  404432:	781b      	ldrb	r3, [r3, #0]
  404434:	4618      	mov	r0, r3
  404436:	4b2a      	ldr	r3, [pc, #168]	; (4044e0 <sd_mmc_mci_install_mmc+0x184>)
  404438:	4798      	blx	r3
  40443a:	4603      	mov	r3, r0
  40443c:	2b03      	cmp	r3, #3
  40443e:	d912      	bls.n	404466 <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  404440:	4b26      	ldr	r3, [pc, #152]	; (4044dc <sd_mmc_mci_install_mmc+0x180>)
  404442:	781b      	ldrb	r3, [r3, #0]
  404444:	4618      	mov	r0, r3
  404446:	4b26      	ldr	r3, [pc, #152]	; (4044e0 <sd_mmc_mci_install_mmc+0x184>)
  404448:	4798      	blx	r3
  40444a:	4603      	mov	r3, r0
  40444c:	4618      	mov	r0, r3
  40444e:	4b25      	ldr	r3, [pc, #148]	; (4044e4 <sd_mmc_mci_install_mmc+0x188>)
  404450:	4798      	blx	r3
  404452:	4603      	mov	r3, r0
  404454:	f083 0301 	eor.w	r3, r3, #1
  404458:	b2db      	uxtb	r3, r3
  40445a:	2b00      	cmp	r3, #0
  40445c:	d001      	beq.n	404462 <sd_mmc_mci_install_mmc+0x106>
				return false;
  40445e:	2300      	movs	r3, #0
  404460:	e02c      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  404462:	4b21      	ldr	r3, [pc, #132]	; (4044e8 <sd_mmc_mci_install_mmc+0x18c>)
  404464:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  404466:	4b21      	ldr	r3, [pc, #132]	; (4044ec <sd_mmc_mci_install_mmc+0x190>)
  404468:	4798      	blx	r3
  40446a:	4603      	mov	r3, r0
  40446c:	2b00      	cmp	r3, #0
  40446e:	d011      	beq.n	404494 <sd_mmc_mci_install_mmc+0x138>
  404470:	79bb      	ldrb	r3, [r7, #6]
  404472:	2b00      	cmp	r3, #0
  404474:	d00e      	beq.n	404494 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  404476:	4b1e      	ldr	r3, [pc, #120]	; (4044f0 <sd_mmc_mci_install_mmc+0x194>)
  404478:	4798      	blx	r3
  40447a:	4603      	mov	r3, r0
  40447c:	f083 0301 	eor.w	r3, r3, #1
  404480:	b2db      	uxtb	r3, r3
  404482:	2b00      	cmp	r3, #0
  404484:	d001      	beq.n	40448a <sd_mmc_mci_install_mmc+0x12e>
				return false;
  404486:	2300      	movs	r3, #0
  404488:	e018      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  40448a:	4b17      	ldr	r3, [pc, #92]	; (4044e8 <sd_mmc_mci_install_mmc+0x18c>)
  40448c:	4798      	blx	r3
  40448e:	e001      	b.n	404494 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  404490:	4b15      	ldr	r3, [pc, #84]	; (4044e8 <sd_mmc_mci_install_mmc+0x18c>)
  404492:	4798      	blx	r3
	}

	uint8_t retry = 10;
  404494:	230a      	movs	r3, #10
  404496:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  404498:	e00a      	b.n	4044b0 <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40449a:	f241 1010 	movw	r0, #4368	; 0x1110
  40449e:	f44f 7100 	mov.w	r1, #512	; 0x200
  4044a2:	4b08      	ldr	r3, [pc, #32]	; (4044c4 <sd_mmc_mci_install_mmc+0x168>)
  4044a4:	4798      	blx	r3
  4044a6:	4603      	mov	r3, r0
  4044a8:	2b00      	cmp	r3, #0
  4044aa:	d001      	beq.n	4044b0 <sd_mmc_mci_install_mmc+0x154>
			return true;
  4044ac:	2301      	movs	r3, #1
  4044ae:	e005      	b.n	4044bc <sd_mmc_mci_install_mmc+0x160>
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4044b0:	79fb      	ldrb	r3, [r7, #7]
  4044b2:	1e5a      	subs	r2, r3, #1
  4044b4:	71fa      	strb	r2, [r7, #7]
  4044b6:	2b00      	cmp	r3, #0
  4044b8:	d1ef      	bne.n	40449a <sd_mmc_mci_install_mmc+0x13e>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
  4044ba:	2300      	movs	r3, #0
}
  4044bc:	4618      	mov	r0, r3
  4044be:	3708      	adds	r7, #8
  4044c0:	46bd      	mov	sp, r7
  4044c2:	bd80      	pop	{r7, pc}
  4044c4:	0040534d 	.word	0x0040534d
  4044c8:	004036a5 	.word	0x004036a5
  4044cc:	200033f0 	.word	0x200033f0
  4044d0:	00403b01 	.word	0x00403b01
  4044d4:	00403b45 	.word	0x00403b45
  4044d8:	00403a05 	.word	0x00403a05
  4044dc:	200033ec 	.word	0x200033ec
  4044e0:	00405231 	.word	0x00405231
  4044e4:	004038c9 	.word	0x004038c9
  4044e8:	004040c1 	.word	0x004040c1
  4044ec:	00405255 	.word	0x00405255
  4044f0:	00403945 	.word	0x00403945

004044f4 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4044f4:	b580      	push	{r7, lr}
  4044f6:	b082      	sub	sp, #8
  4044f8:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  4044fa:	2300      	movs	r3, #0
  4044fc:	71fb      	strb	r3, [r7, #7]
  4044fe:	e00c      	b.n	40451a <sd_mmc_init+0x26>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  404500:	79fa      	ldrb	r2, [r7, #7]
  404502:	490b      	ldr	r1, [pc, #44]	; (404530 <sd_mmc_init+0x3c>)
  404504:	4613      	mov	r3, r2
  404506:	00db      	lsls	r3, r3, #3
  404508:	4413      	add	r3, r2
  40450a:	009b      	lsls	r3, r3, #2
  40450c:	440b      	add	r3, r1
  40450e:	3308      	adds	r3, #8
  404510:	2204      	movs	r2, #4
  404512:	719a      	strb	r2, [r3, #6]
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  404514:	79fb      	ldrb	r3, [r7, #7]
  404516:	3301      	adds	r3, #1
  404518:	71fb      	strb	r3, [r7, #7]
  40451a:	79fb      	ldrb	r3, [r7, #7]
  40451c:	2b00      	cmp	r3, #0
  40451e:	d0ef      	beq.n	404500 <sd_mmc_init+0xc>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  404520:	4b04      	ldr	r3, [pc, #16]	; (404534 <sd_mmc_init+0x40>)
  404522:	22ff      	movs	r2, #255	; 0xff
  404524:	701a      	strb	r2, [r3, #0]
	driver_init();
  404526:	4b04      	ldr	r3, [pc, #16]	; (404538 <sd_mmc_init+0x44>)
  404528:	4798      	blx	r3
}
  40452a:	3708      	adds	r7, #8
  40452c:	46bd      	mov	sp, r7
  40452e:	bd80      	pop	{r7, pc}
  404530:	2000018c 	.word	0x2000018c
  404534:	200033ec 	.word	0x200033ec
  404538:	004051f5 	.word	0x004051f5

0040453c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40453c:	b580      	push	{r7, lr}
  40453e:	b084      	sub	sp, #16
  404540:	af00      	add	r7, sp, #0
  404542:	4603      	mov	r3, r0
  404544:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404546:	79fb      	ldrb	r3, [r7, #7]
  404548:	4618      	mov	r0, r3
  40454a:	4b11      	ldr	r3, [pc, #68]	; (404590 <sd_mmc_check+0x54>)
  40454c:	4798      	blx	r3
  40454e:	4603      	mov	r3, r0
  404550:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  404552:	7bfb      	ldrb	r3, [r7, #15]
  404554:	2b01      	cmp	r3, #1
  404556:	d003      	beq.n	404560 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  404558:	4b0e      	ldr	r3, [pc, #56]	; (404594 <sd_mmc_check+0x58>)
  40455a:	4798      	blx	r3
		return sd_mmc_err;
  40455c:	7bfb      	ldrb	r3, [r7, #15]
  40455e:	e013      	b.n	404588 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	//if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			//: sd_mmc_mci_card_init())
	if(sd_mmc_mci_card_init()) 
  404560:	4b0d      	ldr	r3, [pc, #52]	; (404598 <sd_mmc_check+0x5c>)
  404562:	4798      	blx	r3
  404564:	4603      	mov	r3, r0
  404566:	2b00      	cmp	r3, #0
  404568:	d007      	beq.n	40457a <sd_mmc_check+0x3e>
	{
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  40456a:	4b0c      	ldr	r3, [pc, #48]	; (40459c <sd_mmc_check+0x60>)
  40456c:	681b      	ldr	r3, [r3, #0]
  40456e:	2200      	movs	r2, #0
  404570:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  404572:	4b08      	ldr	r3, [pc, #32]	; (404594 <sd_mmc_check+0x58>)
  404574:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  404576:	2301      	movs	r3, #1
  404578:	e006      	b.n	404588 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40457a:	4b08      	ldr	r3, [pc, #32]	; (40459c <sd_mmc_check+0x60>)
  40457c:	681b      	ldr	r3, [r3, #0]
  40457e:	2203      	movs	r2, #3
  404580:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
  404582:	4b04      	ldr	r3, [pc, #16]	; (404594 <sd_mmc_check+0x58>)
  404584:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  404586:	2303      	movs	r3, #3
}
  404588:	4618      	mov	r0, r3
  40458a:	3710      	adds	r7, #16
  40458c:	46bd      	mov	sp, r7
  40458e:	bd80      	pop	{r7, pc}
  404590:	00403f2d 	.word	0x00403f2d
  404594:	004040f9 	.word	0x004040f9
  404598:	00404119 	.word	0x00404119
  40459c:	200033f0 	.word	0x200033f0

004045a0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4045a0:	b580      	push	{r7, lr}
  4045a2:	b082      	sub	sp, #8
  4045a4:	af00      	add	r7, sp, #0
  4045a6:	4603      	mov	r3, r0
  4045a8:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4045aa:	79fb      	ldrb	r3, [r7, #7]
  4045ac:	4618      	mov	r0, r3
  4045ae:	4b08      	ldr	r3, [pc, #32]	; (4045d0 <sd_mmc_get_type+0x30>)
  4045b0:	4798      	blx	r3
  4045b2:	4603      	mov	r3, r0
  4045b4:	2b00      	cmp	r3, #0
  4045b6:	d001      	beq.n	4045bc <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  4045b8:	2300      	movs	r3, #0
  4045ba:	e004      	b.n	4045c6 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  4045bc:	4b05      	ldr	r3, [pc, #20]	; (4045d4 <sd_mmc_get_type+0x34>)
  4045be:	4798      	blx	r3
	return sd_mmc_card->type;
  4045c0:	4b05      	ldr	r3, [pc, #20]	; (4045d8 <sd_mmc_get_type+0x38>)
  4045c2:	681b      	ldr	r3, [r3, #0]
  4045c4:	7bdb      	ldrb	r3, [r3, #15]
}
  4045c6:	4618      	mov	r0, r3
  4045c8:	3708      	adds	r7, #8
  4045ca:	46bd      	mov	sp, r7
  4045cc:	bd80      	pop	{r7, pc}
  4045ce:	bf00      	nop
  4045d0:	00403f2d 	.word	0x00403f2d
  4045d4:	004040f9 	.word	0x004040f9
  4045d8:	200033f0 	.word	0x200033f0

004045dc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  4045dc:	b580      	push	{r7, lr}
  4045de:	b082      	sub	sp, #8
  4045e0:	af00      	add	r7, sp, #0
  4045e2:	4603      	mov	r3, r0
  4045e4:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4045e6:	79fb      	ldrb	r3, [r7, #7]
  4045e8:	4618      	mov	r0, r3
  4045ea:	4b08      	ldr	r3, [pc, #32]	; (40460c <sd_mmc_get_capacity+0x30>)
  4045ec:	4798      	blx	r3
  4045ee:	4603      	mov	r3, r0
  4045f0:	2b00      	cmp	r3, #0
  4045f2:	d001      	beq.n	4045f8 <sd_mmc_get_capacity+0x1c>
		return 0;
  4045f4:	2300      	movs	r3, #0
  4045f6:	e004      	b.n	404602 <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
  4045f8:	4b05      	ldr	r3, [pc, #20]	; (404610 <sd_mmc_get_capacity+0x34>)
  4045fa:	4798      	blx	r3
	return sd_mmc_card->capacity;
  4045fc:	4b05      	ldr	r3, [pc, #20]	; (404614 <sd_mmc_get_capacity+0x38>)
  4045fe:	681b      	ldr	r3, [r3, #0]
  404600:	685b      	ldr	r3, [r3, #4]
}
  404602:	4618      	mov	r0, r3
  404604:	3708      	adds	r7, #8
  404606:	46bd      	mov	sp, r7
  404608:	bd80      	pop	{r7, pc}
  40460a:	bf00      	nop
  40460c:	00403f2d 	.word	0x00403f2d
  404610:	004040f9 	.word	0x004040f9
  404614:	200033f0 	.word	0x200033f0

00404618 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
  404618:	b480      	push	{r7}
  40461a:	b083      	sub	sp, #12
  40461c:	af00      	add	r7, sp, #0
  40461e:	4603      	mov	r3, r0
  404620:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
  404622:	2300      	movs	r3, #0
}
  404624:	4618      	mov	r0, r3
  404626:	370c      	adds	r7, #12
  404628:	46bd      	mov	sp, r7
  40462a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40462e:	4770      	bx	lr

00404630 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  404630:	b590      	push	{r4, r7, lr}
  404632:	b089      	sub	sp, #36	; 0x24
  404634:	af02      	add	r7, sp, #8
  404636:	6039      	str	r1, [r7, #0]
  404638:	4613      	mov	r3, r2
  40463a:	4602      	mov	r2, r0
  40463c:	71fa      	strb	r2, [r7, #7]
  40463e:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404640:	79fb      	ldrb	r3, [r7, #7]
  404642:	4618      	mov	r0, r3
  404644:	4b29      	ldr	r3, [pc, #164]	; (4046ec <sd_mmc_init_read_blocks+0xbc>)
  404646:	4798      	blx	r3
  404648:	4603      	mov	r3, r0
  40464a:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  40464c:	7bfb      	ldrb	r3, [r7, #15]
  40464e:	2b00      	cmp	r3, #0
  404650:	d001      	beq.n	404656 <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
  404652:	7bfb      	ldrb	r3, [r7, #15]
  404654:	e046      	b.n	4046e4 <sd_mmc_init_read_blocks+0xb4>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  404656:	4b26      	ldr	r3, [pc, #152]	; (4046f0 <sd_mmc_init_read_blocks+0xc0>)
  404658:	4798      	blx	r3
  40465a:	4603      	mov	r3, r0
  40465c:	f083 0301 	eor.w	r3, r3, #1
  404660:	b2db      	uxtb	r3, r3
  404662:	2b00      	cmp	r3, #0
  404664:	d003      	beq.n	40466e <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
  404666:	4b23      	ldr	r3, [pc, #140]	; (4046f4 <sd_mmc_init_read_blocks+0xc4>)
  404668:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40466a:	2305      	movs	r3, #5
  40466c:	e03a      	b.n	4046e4 <sd_mmc_init_read_blocks+0xb4>
	}

	if (nb_block > 1) {
  40466e:	88bb      	ldrh	r3, [r7, #4]
  404670:	2b01      	cmp	r3, #1
  404672:	d902      	bls.n	40467a <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  404674:	4b20      	ldr	r3, [pc, #128]	; (4046f8 <sd_mmc_init_read_blocks+0xc8>)
  404676:	617b      	str	r3, [r7, #20]
  404678:	e001      	b.n	40467e <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  40467a:	4b20      	ldr	r3, [pc, #128]	; (4046fc <sd_mmc_init_read_blocks+0xcc>)
  40467c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40467e:	4b20      	ldr	r3, [pc, #128]	; (404700 <sd_mmc_init_read_blocks+0xd0>)
  404680:	681b      	ldr	r3, [r3, #0]
  404682:	7bdb      	ldrb	r3, [r3, #15]
  404684:	f003 0308 	and.w	r3, r3, #8
  404688:	2b00      	cmp	r3, #0
  40468a:	d002      	beq.n	404692 <sd_mmc_init_read_blocks+0x62>
		arg = start;
  40468c:	683b      	ldr	r3, [r7, #0]
  40468e:	613b      	str	r3, [r7, #16]
  404690:	e002      	b.n	404698 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  404692:	683b      	ldr	r3, [r7, #0]
  404694:	025b      	lsls	r3, r3, #9
  404696:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  404698:	88bb      	ldrh	r3, [r7, #4]
  40469a:	2201      	movs	r2, #1
  40469c:	9200      	str	r2, [sp, #0]
  40469e:	6978      	ldr	r0, [r7, #20]
  4046a0:	6939      	ldr	r1, [r7, #16]
  4046a2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4046a6:	4c17      	ldr	r4, [pc, #92]	; (404704 <sd_mmc_init_read_blocks+0xd4>)
  4046a8:	47a0      	blx	r4
  4046aa:	4603      	mov	r3, r0
  4046ac:	f083 0301 	eor.w	r3, r3, #1
  4046b0:	b2db      	uxtb	r3, r3
  4046b2:	2b00      	cmp	r3, #0
  4046b4:	d003      	beq.n	4046be <sd_mmc_init_read_blocks+0x8e>
		sd_mmc_deselect_slot();
  4046b6:	4b0f      	ldr	r3, [pc, #60]	; (4046f4 <sd_mmc_init_read_blocks+0xc4>)
  4046b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4046ba:	2305      	movs	r3, #5
  4046bc:	e012      	b.n	4046e4 <sd_mmc_init_read_blocks+0xb4>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  4046be:	4b12      	ldr	r3, [pc, #72]	; (404708 <sd_mmc_init_read_blocks+0xd8>)
  4046c0:	4798      	blx	r3
  4046c2:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  4046c4:	68ba      	ldr	r2, [r7, #8]
  4046c6:	4b11      	ldr	r3, [pc, #68]	; (40470c <sd_mmc_init_read_blocks+0xdc>)
  4046c8:	4013      	ands	r3, r2
  4046ca:	2b00      	cmp	r3, #0
  4046cc:	d003      	beq.n	4046d6 <sd_mmc_init_read_blocks+0xa6>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  4046ce:	4b09      	ldr	r3, [pc, #36]	; (4046f4 <sd_mmc_init_read_blocks+0xc4>)
  4046d0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4046d2:	2305      	movs	r3, #5
  4046d4:	e006      	b.n	4046e4 <sd_mmc_init_read_blocks+0xb4>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4046d6:	4b0e      	ldr	r3, [pc, #56]	; (404710 <sd_mmc_init_read_blocks+0xe0>)
  4046d8:	88ba      	ldrh	r2, [r7, #4]
  4046da:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4046dc:	4b0d      	ldr	r3, [pc, #52]	; (404714 <sd_mmc_init_read_blocks+0xe4>)
  4046de:	88ba      	ldrh	r2, [r7, #4]
  4046e0:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  4046e2:	2300      	movs	r3, #0
}
  4046e4:	4618      	mov	r0, r3
  4046e6:	371c      	adds	r7, #28
  4046e8:	46bd      	mov	sp, r7
  4046ea:	bd90      	pop	{r4, r7, pc}
  4046ec:	00403f2d 	.word	0x00403f2d
  4046f0:	00403d6d 	.word	0x00403d6d
  4046f4:	004040f9 	.word	0x004040f9
  4046f8:	00101112 	.word	0x00101112
  4046fc:	00081111 	.word	0x00081111
  404700:	200033f0 	.word	0x200033f0
  404704:	00405419 	.word	0x00405419
  404708:	00405399 	.word	0x00405399
  40470c:	e4580000 	.word	0xe4580000
  404710:	200033f6 	.word	0x200033f6
  404714:	200033f4 	.word	0x200033f4

00404718 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  404718:	b580      	push	{r7, lr}
  40471a:	b082      	sub	sp, #8
  40471c:	af00      	add	r7, sp, #0
  40471e:	6078      	str	r0, [r7, #4]
  404720:	460b      	mov	r3, r1
  404722:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  404724:	887b      	ldrh	r3, [r7, #2]
  404726:	6878      	ldr	r0, [r7, #4]
  404728:	4619      	mov	r1, r3
  40472a:	4b0c      	ldr	r3, [pc, #48]	; (40475c <sd_mmc_start_read_blocks+0x44>)
  40472c:	4798      	blx	r3
  40472e:	4603      	mov	r3, r0
  404730:	f083 0301 	eor.w	r3, r3, #1
  404734:	b2db      	uxtb	r3, r3
  404736:	2b00      	cmp	r3, #0
  404738:	d004      	beq.n	404744 <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  40473a:	4b09      	ldr	r3, [pc, #36]	; (404760 <sd_mmc_start_read_blocks+0x48>)
  40473c:	2200      	movs	r2, #0
  40473e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  404740:	2305      	movs	r3, #5
  404742:	e007      	b.n	404754 <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  404744:	4b06      	ldr	r3, [pc, #24]	; (404760 <sd_mmc_start_read_blocks+0x48>)
  404746:	881a      	ldrh	r2, [r3, #0]
  404748:	887b      	ldrh	r3, [r7, #2]
  40474a:	1ad3      	subs	r3, r2, r3
  40474c:	b29a      	uxth	r2, r3
  40474e:	4b04      	ldr	r3, [pc, #16]	; (404760 <sd_mmc_start_read_blocks+0x48>)
  404750:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  404752:	2300      	movs	r3, #0
}
  404754:	4618      	mov	r0, r3
  404756:	3708      	adds	r7, #8
  404758:	46bd      	mov	sp, r7
  40475a:	bd80      	pop	{r7, pc}
  40475c:	004055e9 	.word	0x004055e9
  404760:	200033f6 	.word	0x200033f6

00404764 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  404764:	b580      	push	{r7, lr}
  404766:	b082      	sub	sp, #8
  404768:	af00      	add	r7, sp, #0
  40476a:	4603      	mov	r3, r0
  40476c:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
  40476e:	4b1b      	ldr	r3, [pc, #108]	; (4047dc <sd_mmc_wait_end_of_read_blocks+0x78>)
  404770:	4798      	blx	r3
  404772:	4603      	mov	r3, r0
  404774:	f083 0301 	eor.w	r3, r3, #1
  404778:	b2db      	uxtb	r3, r3
  40477a:	2b00      	cmp	r3, #0
  40477c:	d001      	beq.n	404782 <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  40477e:	2305      	movs	r3, #5
  404780:	e027      	b.n	4047d2 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
  404782:	79fb      	ldrb	r3, [r7, #7]
  404784:	2b00      	cmp	r3, #0
  404786:	d003      	beq.n	404790 <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  404788:	4b15      	ldr	r3, [pc, #84]	; (4047e0 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  40478a:	2200      	movs	r2, #0
  40478c:	801a      	strh	r2, [r3, #0]
  40478e:	e005      	b.n	40479c <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  404790:	4b13      	ldr	r3, [pc, #76]	; (4047e0 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  404792:	881b      	ldrh	r3, [r3, #0]
  404794:	2b00      	cmp	r3, #0
  404796:	d001      	beq.n	40479c <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
  404798:	2300      	movs	r3, #0
  40479a:	e01a      	b.n	4047d2 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  40479c:	4b11      	ldr	r3, [pc, #68]	; (4047e4 <sd_mmc_wait_end_of_read_blocks+0x80>)
  40479e:	881b      	ldrh	r3, [r3, #0]
  4047a0:	2b01      	cmp	r3, #1
  4047a2:	d103      	bne.n	4047ac <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  4047a4:	4b10      	ldr	r3, [pc, #64]	; (4047e8 <sd_mmc_wait_end_of_read_blocks+0x84>)
  4047a6:	4798      	blx	r3
		return SD_MMC_OK;
  4047a8:	2300      	movs	r3, #0
  4047aa:	e012      	b.n	4047d2 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4047ac:	f243 100c 	movw	r0, #12556	; 0x310c
  4047b0:	2100      	movs	r1, #0
  4047b2:	4b0e      	ldr	r3, [pc, #56]	; (4047ec <sd_mmc_wait_end_of_read_blocks+0x88>)
  4047b4:	4798      	blx	r3
  4047b6:	4603      	mov	r3, r0
  4047b8:	f083 0301 	eor.w	r3, r3, #1
  4047bc:	b2db      	uxtb	r3, r3
  4047be:	2b00      	cmp	r3, #0
  4047c0:	d004      	beq.n	4047cc <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  4047c2:	f243 100c 	movw	r0, #12556	; 0x310c
  4047c6:	2100      	movs	r1, #0
  4047c8:	4b08      	ldr	r3, [pc, #32]	; (4047ec <sd_mmc_wait_end_of_read_blocks+0x88>)
  4047ca:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  4047cc:	4b06      	ldr	r3, [pc, #24]	; (4047e8 <sd_mmc_wait_end_of_read_blocks+0x84>)
  4047ce:	4798      	blx	r3
	return SD_MMC_OK;
  4047d0:	2300      	movs	r3, #0
}
  4047d2:	4618      	mov	r0, r3
  4047d4:	3708      	adds	r7, #8
  4047d6:	46bd      	mov	sp, r7
  4047d8:	bd80      	pop	{r7, pc}
  4047da:	bf00      	nop
  4047dc:	00405699 	.word	0x00405699
  4047e0:	200033f6 	.word	0x200033f6
  4047e4:	200033f4 	.word	0x200033f4
  4047e8:	004040f9 	.word	0x004040f9
  4047ec:	0040534d 	.word	0x0040534d

004047f0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  4047f0:	b590      	push	{r4, r7, lr}
  4047f2:	b089      	sub	sp, #36	; 0x24
  4047f4:	af02      	add	r7, sp, #8
  4047f6:	6039      	str	r1, [r7, #0]
  4047f8:	4613      	mov	r3, r2
  4047fa:	4602      	mov	r2, r0
  4047fc:	71fa      	strb	r2, [r7, #7]
  4047fe:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404800:	79fb      	ldrb	r3, [r7, #7]
  404802:	4618      	mov	r0, r3
  404804:	4b29      	ldr	r3, [pc, #164]	; (4048ac <sd_mmc_init_write_blocks+0xbc>)
  404806:	4798      	blx	r3
  404808:	4603      	mov	r3, r0
  40480a:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  40480c:	7bfb      	ldrb	r3, [r7, #15]
  40480e:	2b00      	cmp	r3, #0
  404810:	d001      	beq.n	404816 <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
  404812:	7bfb      	ldrb	r3, [r7, #15]
  404814:	e045      	b.n	4048a2 <sd_mmc_init_write_blocks+0xb2>
	}
	if (sd_mmc_is_write_protected(slot)) {
  404816:	79fb      	ldrb	r3, [r7, #7]
  404818:	4618      	mov	r0, r3
  40481a:	4b25      	ldr	r3, [pc, #148]	; (4048b0 <sd_mmc_init_write_blocks+0xc0>)
  40481c:	4798      	blx	r3
  40481e:	4603      	mov	r3, r0
  404820:	2b00      	cmp	r3, #0
  404822:	d003      	beq.n	40482c <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
  404824:	4b23      	ldr	r3, [pc, #140]	; (4048b4 <sd_mmc_init_write_blocks+0xc4>)
  404826:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  404828:	2307      	movs	r3, #7
  40482a:	e03a      	b.n	4048a2 <sd_mmc_init_write_blocks+0xb2>
	}

	if (nb_block > 1) {
  40482c:	88bb      	ldrh	r3, [r7, #4]
  40482e:	2b01      	cmp	r3, #1
  404830:	d902      	bls.n	404838 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  404832:	4b21      	ldr	r3, [pc, #132]	; (4048b8 <sd_mmc_init_write_blocks+0xc8>)
  404834:	617b      	str	r3, [r7, #20]
  404836:	e001      	b.n	40483c <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  404838:	4b20      	ldr	r3, [pc, #128]	; (4048bc <sd_mmc_init_write_blocks+0xcc>)
  40483a:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40483c:	4b20      	ldr	r3, [pc, #128]	; (4048c0 <sd_mmc_init_write_blocks+0xd0>)
  40483e:	681b      	ldr	r3, [r3, #0]
  404840:	7bdb      	ldrb	r3, [r3, #15]
  404842:	f003 0308 	and.w	r3, r3, #8
  404846:	2b00      	cmp	r3, #0
  404848:	d002      	beq.n	404850 <sd_mmc_init_write_blocks+0x60>
		arg = start;
  40484a:	683b      	ldr	r3, [r7, #0]
  40484c:	613b      	str	r3, [r7, #16]
  40484e:	e002      	b.n	404856 <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  404850:	683b      	ldr	r3, [r7, #0]
  404852:	025b      	lsls	r3, r3, #9
  404854:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  404856:	88bb      	ldrh	r3, [r7, #4]
  404858:	2201      	movs	r2, #1
  40485a:	9200      	str	r2, [sp, #0]
  40485c:	6978      	ldr	r0, [r7, #20]
  40485e:	6939      	ldr	r1, [r7, #16]
  404860:	f44f 7200 	mov.w	r2, #512	; 0x200
  404864:	4c17      	ldr	r4, [pc, #92]	; (4048c4 <sd_mmc_init_write_blocks+0xd4>)
  404866:	47a0      	blx	r4
  404868:	4603      	mov	r3, r0
  40486a:	f083 0301 	eor.w	r3, r3, #1
  40486e:	b2db      	uxtb	r3, r3
  404870:	2b00      	cmp	r3, #0
  404872:	d003      	beq.n	40487c <sd_mmc_init_write_blocks+0x8c>
		sd_mmc_deselect_slot();
  404874:	4b0f      	ldr	r3, [pc, #60]	; (4048b4 <sd_mmc_init_write_blocks+0xc4>)
  404876:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  404878:	2305      	movs	r3, #5
  40487a:	e012      	b.n	4048a2 <sd_mmc_init_write_blocks+0xb2>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  40487c:	4b12      	ldr	r3, [pc, #72]	; (4048c8 <sd_mmc_init_write_blocks+0xd8>)
  40487e:	4798      	blx	r3
  404880:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  404882:	68ba      	ldr	r2, [r7, #8]
  404884:	4b11      	ldr	r3, [pc, #68]	; (4048cc <sd_mmc_init_write_blocks+0xdc>)
  404886:	4013      	ands	r3, r2
  404888:	2b00      	cmp	r3, #0
  40488a:	d003      	beq.n	404894 <sd_mmc_init_write_blocks+0xa4>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  40488c:	4b09      	ldr	r3, [pc, #36]	; (4048b4 <sd_mmc_init_write_blocks+0xc4>)
  40488e:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  404890:	2305      	movs	r3, #5
  404892:	e006      	b.n	4048a2 <sd_mmc_init_write_blocks+0xb2>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  404894:	4b0e      	ldr	r3, [pc, #56]	; (4048d0 <sd_mmc_init_write_blocks+0xe0>)
  404896:	88ba      	ldrh	r2, [r7, #4]
  404898:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  40489a:	4b0e      	ldr	r3, [pc, #56]	; (4048d4 <sd_mmc_init_write_blocks+0xe4>)
  40489c:	88ba      	ldrh	r2, [r7, #4]
  40489e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  4048a0:	2300      	movs	r3, #0
}
  4048a2:	4618      	mov	r0, r3
  4048a4:	371c      	adds	r7, #28
  4048a6:	46bd      	mov	sp, r7
  4048a8:	bd90      	pop	{r4, r7, pc}
  4048aa:	bf00      	nop
  4048ac:	00403f2d 	.word	0x00403f2d
  4048b0:	00404619 	.word	0x00404619
  4048b4:	004040f9 	.word	0x004040f9
  4048b8:	00109119 	.word	0x00109119
  4048bc:	00089118 	.word	0x00089118
  4048c0:	200033f0 	.word	0x200033f0
  4048c4:	00405419 	.word	0x00405419
  4048c8:	00405399 	.word	0x00405399
  4048cc:	e4580000 	.word	0xe4580000
  4048d0:	200033f6 	.word	0x200033f6
  4048d4:	200033f4 	.word	0x200033f4

004048d8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4048d8:	b580      	push	{r7, lr}
  4048da:	b082      	sub	sp, #8
  4048dc:	af00      	add	r7, sp, #0
  4048de:	6078      	str	r0, [r7, #4]
  4048e0:	460b      	mov	r3, r1
  4048e2:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  4048e4:	887b      	ldrh	r3, [r7, #2]
  4048e6:	6878      	ldr	r0, [r7, #4]
  4048e8:	4619      	mov	r1, r3
  4048ea:	4b0c      	ldr	r3, [pc, #48]	; (40491c <sd_mmc_start_write_blocks+0x44>)
  4048ec:	4798      	blx	r3
  4048ee:	4603      	mov	r3, r0
  4048f0:	f083 0301 	eor.w	r3, r3, #1
  4048f4:	b2db      	uxtb	r3, r3
  4048f6:	2b00      	cmp	r3, #0
  4048f8:	d004      	beq.n	404904 <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4048fa:	4b09      	ldr	r3, [pc, #36]	; (404920 <sd_mmc_start_write_blocks+0x48>)
  4048fc:	2200      	movs	r2, #0
  4048fe:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  404900:	2305      	movs	r3, #5
  404902:	e007      	b.n	404914 <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  404904:	4b06      	ldr	r3, [pc, #24]	; (404920 <sd_mmc_start_write_blocks+0x48>)
  404906:	881a      	ldrh	r2, [r3, #0]
  404908:	887b      	ldrh	r3, [r7, #2]
  40490a:	1ad3      	subs	r3, r2, r3
  40490c:	b29a      	uxth	r2, r3
  40490e:	4b04      	ldr	r3, [pc, #16]	; (404920 <sd_mmc_start_write_blocks+0x48>)
  404910:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  404912:	2300      	movs	r3, #0
}
  404914:	4618      	mov	r0, r3
  404916:	3708      	adds	r7, #8
  404918:	46bd      	mov	sp, r7
  40491a:	bd80      	pop	{r7, pc}
  40491c:	00405729 	.word	0x00405729
  404920:	200033f6 	.word	0x200033f6

00404924 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  404924:	b580      	push	{r7, lr}
  404926:	b082      	sub	sp, #8
  404928:	af00      	add	r7, sp, #0
  40492a:	4603      	mov	r3, r0
  40492c:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
  40492e:	4b1a      	ldr	r3, [pc, #104]	; (404998 <sd_mmc_wait_end_of_write_blocks+0x74>)
  404930:	4798      	blx	r3
  404932:	4603      	mov	r3, r0
  404934:	f083 0301 	eor.w	r3, r3, #1
  404938:	b2db      	uxtb	r3, r3
  40493a:	2b00      	cmp	r3, #0
  40493c:	d001      	beq.n	404942 <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  40493e:	2305      	movs	r3, #5
  404940:	e026      	b.n	404990 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}
	if (abort) {
  404942:	79fb      	ldrb	r3, [r7, #7]
  404944:	2b00      	cmp	r3, #0
  404946:	d003      	beq.n	404950 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  404948:	4b14      	ldr	r3, [pc, #80]	; (40499c <sd_mmc_wait_end_of_write_blocks+0x78>)
  40494a:	2200      	movs	r2, #0
  40494c:	801a      	strh	r2, [r3, #0]
  40494e:	e005      	b.n	40495c <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  404950:	4b12      	ldr	r3, [pc, #72]	; (40499c <sd_mmc_wait_end_of_write_blocks+0x78>)
  404952:	881b      	ldrh	r3, [r3, #0]
  404954:	2b00      	cmp	r3, #0
  404956:	d001      	beq.n	40495c <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
  404958:	2300      	movs	r3, #0
  40495a:	e019      	b.n	404990 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  40495c:	4b10      	ldr	r3, [pc, #64]	; (4049a0 <sd_mmc_wait_end_of_write_blocks+0x7c>)
  40495e:	881b      	ldrh	r3, [r3, #0]
  404960:	2b01      	cmp	r3, #1
  404962:	d103      	bne.n	40496c <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  404964:	4b0f      	ldr	r3, [pc, #60]	; (4049a4 <sd_mmc_wait_end_of_write_blocks+0x80>)
  404966:	4798      	blx	r3
		return SD_MMC_OK;
  404968:	2300      	movs	r3, #0
  40496a:	e011      	b.n	404990 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  40496c:	f243 100c 	movw	r0, #12556	; 0x310c
  404970:	2100      	movs	r1, #0
  404972:	4b0d      	ldr	r3, [pc, #52]	; (4049a8 <sd_mmc_wait_end_of_write_blocks+0x84>)
  404974:	4798      	blx	r3
  404976:	4603      	mov	r3, r0
  404978:	f083 0301 	eor.w	r3, r3, #1
  40497c:	b2db      	uxtb	r3, r3
  40497e:	2b00      	cmp	r3, #0
  404980:	d003      	beq.n	40498a <sd_mmc_wait_end_of_write_blocks+0x66>
			sd_mmc_deselect_slot();
  404982:	4b08      	ldr	r3, [pc, #32]	; (4049a4 <sd_mmc_wait_end_of_write_blocks+0x80>)
  404984:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  404986:	2305      	movs	r3, #5
  404988:	e002      	b.n	404990 <sd_mmc_wait_end_of_write_blocks+0x6c>
		}
	}
	sd_mmc_deselect_slot();
  40498a:	4b06      	ldr	r3, [pc, #24]	; (4049a4 <sd_mmc_wait_end_of_write_blocks+0x80>)
  40498c:	4798      	blx	r3
	return SD_MMC_OK;
  40498e:	2300      	movs	r3, #0
}
  404990:	4618      	mov	r0, r3
  404992:	3708      	adds	r7, #8
  404994:	46bd      	mov	sp, r7
  404996:	bd80      	pop	{r7, pc}
  404998:	004057d9 	.word	0x004057d9
  40499c:	200033f6 	.word	0x200033f6
  4049a0:	200033f4 	.word	0x200033f4
  4049a4:	004040f9 	.word	0x004040f9
  4049a8:	0040534d 	.word	0x0040534d

004049ac <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4049ac:	b580      	push	{r7, lr}
  4049ae:	b082      	sub	sp, #8
  4049b0:	af00      	add	r7, sp, #0
  4049b2:	4603      	mov	r3, r0
  4049b4:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  4049b6:	79fb      	ldrb	r3, [r7, #7]
  4049b8:	4618      	mov	r0, r3
  4049ba:	4b15      	ldr	r3, [pc, #84]	; (404a10 <sd_mmc_test_unit_ready+0x64>)
  4049bc:	4798      	blx	r3
  4049be:	4603      	mov	r3, r0
  4049c0:	2b01      	cmp	r3, #1
  4049c2:	d017      	beq.n	4049f4 <sd_mmc_test_unit_ready+0x48>
  4049c4:	2b02      	cmp	r3, #2
  4049c6:	d017      	beq.n	4049f8 <sd_mmc_test_unit_ready+0x4c>
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	d11b      	bne.n	404a04 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  4049cc:	79fb      	ldrb	r3, [r7, #7]
  4049ce:	4a11      	ldr	r2, [pc, #68]	; (404a14 <sd_mmc_test_unit_ready+0x68>)
  4049d0:	5cd3      	ldrb	r3, [r2, r3]
  4049d2:	2b00      	cmp	r3, #0
  4049d4:	d001      	beq.n	4049da <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  4049d6:	2302      	movs	r3, #2
  4049d8:	e015      	b.n	404a06 <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  4049da:	79fb      	ldrb	r3, [r7, #7]
  4049dc:	4618      	mov	r0, r3
  4049de:	4b0e      	ldr	r3, [pc, #56]	; (404a18 <sd_mmc_test_unit_ready+0x6c>)
  4049e0:	4798      	blx	r3
  4049e2:	4603      	mov	r3, r0
  4049e4:	f003 0303 	and.w	r3, r3, #3
  4049e8:	2b00      	cmp	r3, #0
  4049ea:	d001      	beq.n	4049f0 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  4049ec:	2300      	movs	r3, #0
  4049ee:	e00a      	b.n	404a06 <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  4049f0:	2302      	movs	r3, #2
  4049f2:	e008      	b.n	404a06 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  4049f4:	2303      	movs	r3, #3
  4049f6:	e006      	b.n	404a06 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  4049f8:	79fb      	ldrb	r3, [r7, #7]
  4049fa:	4a06      	ldr	r2, [pc, #24]	; (404a14 <sd_mmc_test_unit_ready+0x68>)
  4049fc:	2100      	movs	r1, #0
  4049fe:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  404a00:	2302      	movs	r3, #2
  404a02:	e000      	b.n	404a06 <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  404a04:	2301      	movs	r3, #1
	}
}
  404a06:	4618      	mov	r0, r3
  404a08:	3708      	adds	r7, #8
  404a0a:	46bd      	mov	sp, r7
  404a0c:	bd80      	pop	{r7, pc}
  404a0e:	bf00      	nop
  404a10:	0040453d 	.word	0x0040453d
  404a14:	200033fc 	.word	0x200033fc
  404a18:	004045a1 	.word	0x004045a1

00404a1c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  404a1c:	b580      	push	{r7, lr}
  404a1e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
  404a20:	2000      	movs	r0, #0
  404a22:	4b02      	ldr	r3, [pc, #8]	; (404a2c <sd_mmc_test_unit_ready_0+0x10>)
  404a24:	4798      	blx	r3
  404a26:	4603      	mov	r3, r0
}
  404a28:	4618      	mov	r0, r3
  404a2a:	bd80      	pop	{r7, pc}
  404a2c:	004049ad 	.word	0x004049ad

00404a30 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  404a30:	b580      	push	{r7, lr}
  404a32:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
  404a34:	2001      	movs	r0, #1
  404a36:	4b02      	ldr	r3, [pc, #8]	; (404a40 <sd_mmc_test_unit_ready_1+0x10>)
  404a38:	4798      	blx	r3
  404a3a:	4603      	mov	r3, r0
}
  404a3c:	4618      	mov	r0, r3
  404a3e:	bd80      	pop	{r7, pc}
  404a40:	004049ad 	.word	0x004049ad

00404a44 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  404a44:	b580      	push	{r7, lr}
  404a46:	b082      	sub	sp, #8
  404a48:	af00      	add	r7, sp, #0
  404a4a:	4603      	mov	r3, r0
  404a4c:	6039      	str	r1, [r7, #0]
  404a4e:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  404a50:	79fb      	ldrb	r3, [r7, #7]
  404a52:	4618      	mov	r0, r3
  404a54:	4b07      	ldr	r3, [pc, #28]	; (404a74 <sd_mmc_read_capacity+0x30>)
  404a56:	4798      	blx	r3
  404a58:	4603      	mov	r3, r0
  404a5a:	005b      	lsls	r3, r3, #1
  404a5c:	1e5a      	subs	r2, r3, #1
  404a5e:	683b      	ldr	r3, [r7, #0]
  404a60:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
  404a62:	79fb      	ldrb	r3, [r7, #7]
  404a64:	4618      	mov	r0, r3
  404a66:	4b04      	ldr	r3, [pc, #16]	; (404a78 <sd_mmc_read_capacity+0x34>)
  404a68:	4798      	blx	r3
  404a6a:	4603      	mov	r3, r0
}
  404a6c:	4618      	mov	r0, r3
  404a6e:	3708      	adds	r7, #8
  404a70:	46bd      	mov	sp, r7
  404a72:	bd80      	pop	{r7, pc}
  404a74:	004045dd 	.word	0x004045dd
  404a78:	004049ad 	.word	0x004049ad

00404a7c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  404a7c:	b580      	push	{r7, lr}
  404a7e:	b082      	sub	sp, #8
  404a80:	af00      	add	r7, sp, #0
  404a82:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
  404a84:	2000      	movs	r0, #0
  404a86:	6879      	ldr	r1, [r7, #4]
  404a88:	4b03      	ldr	r3, [pc, #12]	; (404a98 <sd_mmc_read_capacity_0+0x1c>)
  404a8a:	4798      	blx	r3
  404a8c:	4603      	mov	r3, r0
}
  404a8e:	4618      	mov	r0, r3
  404a90:	3708      	adds	r7, #8
  404a92:	46bd      	mov	sp, r7
  404a94:	bd80      	pop	{r7, pc}
  404a96:	bf00      	nop
  404a98:	00404a45 	.word	0x00404a45

00404a9c <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  404a9c:	b580      	push	{r7, lr}
  404a9e:	b082      	sub	sp, #8
  404aa0:	af00      	add	r7, sp, #0
  404aa2:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
  404aa4:	2001      	movs	r0, #1
  404aa6:	6879      	ldr	r1, [r7, #4]
  404aa8:	4b03      	ldr	r3, [pc, #12]	; (404ab8 <sd_mmc_read_capacity_1+0x1c>)
  404aaa:	4798      	blx	r3
  404aac:	4603      	mov	r3, r0
}
  404aae:	4618      	mov	r0, r3
  404ab0:	3708      	adds	r7, #8
  404ab2:	46bd      	mov	sp, r7
  404ab4:	bd80      	pop	{r7, pc}
  404ab6:	bf00      	nop
  404ab8:	00404a45 	.word	0x00404a45

00404abc <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
  404abc:	b480      	push	{r7}
  404abe:	b083      	sub	sp, #12
  404ac0:	af00      	add	r7, sp, #0
  404ac2:	4602      	mov	r2, r0
  404ac4:	460b      	mov	r3, r1
  404ac6:	71fa      	strb	r2, [r7, #7]
  404ac8:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
  404aca:	79fb      	ldrb	r3, [r7, #7]
  404acc:	4a04      	ldr	r2, [pc, #16]	; (404ae0 <sd_mmc_unload+0x24>)
  404ace:	79b9      	ldrb	r1, [r7, #6]
  404ad0:	54d1      	strb	r1, [r2, r3]
	return true;
  404ad2:	2301      	movs	r3, #1
}
  404ad4:	4618      	mov	r0, r3
  404ad6:	370c      	adds	r7, #12
  404ad8:	46bd      	mov	sp, r7
  404ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ade:	4770      	bx	lr
  404ae0:	200033fc 	.word	0x200033fc

00404ae4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
  404ae4:	b580      	push	{r7, lr}
  404ae6:	b082      	sub	sp, #8
  404ae8:	af00      	add	r7, sp, #0
  404aea:	4603      	mov	r3, r0
  404aec:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
  404aee:	79fb      	ldrb	r3, [r7, #7]
  404af0:	2000      	movs	r0, #0
  404af2:	4619      	mov	r1, r3
  404af4:	4b03      	ldr	r3, [pc, #12]	; (404b04 <sd_mmc_unload_0+0x20>)
  404af6:	4798      	blx	r3
  404af8:	4603      	mov	r3, r0
}
  404afa:	4618      	mov	r0, r3
  404afc:	3708      	adds	r7, #8
  404afe:	46bd      	mov	sp, r7
  404b00:	bd80      	pop	{r7, pc}
  404b02:	bf00      	nop
  404b04:	00404abd 	.word	0x00404abd

00404b08 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
  404b08:	b580      	push	{r7, lr}
  404b0a:	b082      	sub	sp, #8
  404b0c:	af00      	add	r7, sp, #0
  404b0e:	4603      	mov	r3, r0
  404b10:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(1, unload);
  404b12:	79fb      	ldrb	r3, [r7, #7]
  404b14:	2001      	movs	r0, #1
  404b16:	4619      	mov	r1, r3
  404b18:	4b03      	ldr	r3, [pc, #12]	; (404b28 <sd_mmc_unload_1+0x20>)
  404b1a:	4798      	blx	r3
  404b1c:	4603      	mov	r3, r0
}
  404b1e:	4618      	mov	r0, r3
  404b20:	3708      	adds	r7, #8
  404b22:	46bd      	mov	sp, r7
  404b24:	bd80      	pop	{r7, pc}
  404b26:	bf00      	nop
  404b28:	00404abd 	.word	0x00404abd

00404b2c <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
  404b2c:	b580      	push	{r7, lr}
  404b2e:	b082      	sub	sp, #8
  404b30:	af00      	add	r7, sp, #0
  404b32:	4603      	mov	r3, r0
  404b34:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
  404b36:	79fb      	ldrb	r3, [r7, #7]
  404b38:	4618      	mov	r0, r3
  404b3a:	4b03      	ldr	r3, [pc, #12]	; (404b48 <sd_mmc_wr_protect+0x1c>)
  404b3c:	4798      	blx	r3
  404b3e:	4603      	mov	r3, r0
}
  404b40:	4618      	mov	r0, r3
  404b42:	3708      	adds	r7, #8
  404b44:	46bd      	mov	sp, r7
  404b46:	bd80      	pop	{r7, pc}
  404b48:	00404619 	.word	0x00404619

00404b4c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  404b4c:	b580      	push	{r7, lr}
  404b4e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
  404b50:	2000      	movs	r0, #0
  404b52:	4b02      	ldr	r3, [pc, #8]	; (404b5c <sd_mmc_wr_protect_0+0x10>)
  404b54:	4798      	blx	r3
  404b56:	4603      	mov	r3, r0
}
  404b58:	4618      	mov	r0, r3
  404b5a:	bd80      	pop	{r7, pc}
  404b5c:	00404b2d 	.word	0x00404b2d

00404b60 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  404b60:	b580      	push	{r7, lr}
  404b62:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
  404b64:	2001      	movs	r0, #1
  404b66:	4b02      	ldr	r3, [pc, #8]	; (404b70 <sd_mmc_wr_protect_1+0x10>)
  404b68:	4798      	blx	r3
  404b6a:	4603      	mov	r3, r0
}
  404b6c:	4618      	mov	r0, r3
  404b6e:	bd80      	pop	{r7, pc}
  404b70:	00404b2d 	.word	0x00404b2d

00404b74 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
  404b74:	b480      	push	{r7}
  404b76:	b083      	sub	sp, #12
  404b78:	af00      	add	r7, sp, #0
  404b7a:	4603      	mov	r3, r0
  404b7c:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
  404b7e:	2301      	movs	r3, #1
}
  404b80:	4618      	mov	r0, r3
  404b82:	370c      	adds	r7, #12
  404b84:	46bd      	mov	sp, r7
  404b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b8a:	4770      	bx	lr

00404b8c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
  404b8c:	b580      	push	{r7, lr}
  404b8e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
  404b90:	2000      	movs	r0, #0
  404b92:	4b02      	ldr	r3, [pc, #8]	; (404b9c <sd_mmc_removal_0+0x10>)
  404b94:	4798      	blx	r3
  404b96:	4603      	mov	r3, r0
}
  404b98:	4618      	mov	r0, r3
  404b9a:	bd80      	pop	{r7, pc}
  404b9c:	00404b75 	.word	0x00404b75

00404ba0 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
  404ba0:	b580      	push	{r7, lr}
  404ba2:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
  404ba4:	2001      	movs	r0, #1
  404ba6:	4b02      	ldr	r3, [pc, #8]	; (404bb0 <sd_mmc_removal_1+0x10>)
  404ba8:	4798      	blx	r3
  404baa:	4603      	mov	r3, r0
}
  404bac:	4618      	mov	r0, r3
  404bae:	bd80      	pop	{r7, pc}
  404bb0:	00404b75 	.word	0x00404b75

00404bb4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  404bb4:	b580      	push	{r7, lr}
  404bb6:	b084      	sub	sp, #16
  404bb8:	af00      	add	r7, sp, #0
  404bba:	4603      	mov	r3, r0
  404bbc:	60b9      	str	r1, [r7, #8]
  404bbe:	607a      	str	r2, [r7, #4]
  404bc0:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  404bc2:	7bfb      	ldrb	r3, [r7, #15]
  404bc4:	4618      	mov	r0, r3
  404bc6:	68b9      	ldr	r1, [r7, #8]
  404bc8:	2201      	movs	r2, #1
  404bca:	4b11      	ldr	r3, [pc, #68]	; (404c10 <sd_mmc_mem_2_ram+0x5c>)
  404bcc:	4798      	blx	r3
  404bce:	4603      	mov	r3, r0
  404bd0:	2b00      	cmp	r3, #0
  404bd2:	d005      	beq.n	404be0 <sd_mmc_mem_2_ram+0x2c>
  404bd4:	2b02      	cmp	r3, #2
  404bd6:	d101      	bne.n	404bdc <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  404bd8:	2302      	movs	r3, #2
  404bda:	e014      	b.n	404c06 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
  404bdc:	2301      	movs	r3, #1
  404bde:	e012      	b.n	404c06 <sd_mmc_mem_2_ram+0x52>
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  404be0:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  404be2:	6878      	ldr	r0, [r7, #4]
  404be4:	2101      	movs	r1, #1
  404be6:	4b0b      	ldr	r3, [pc, #44]	; (404c14 <sd_mmc_mem_2_ram+0x60>)
  404be8:	4798      	blx	r3
  404bea:	4603      	mov	r3, r0
  404bec:	2b00      	cmp	r3, #0
  404bee:	d001      	beq.n	404bf4 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
  404bf0:	2301      	movs	r3, #1
  404bf2:	e008      	b.n	404c06 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  404bf4:	2000      	movs	r0, #0
  404bf6:	4b08      	ldr	r3, [pc, #32]	; (404c18 <sd_mmc_mem_2_ram+0x64>)
  404bf8:	4798      	blx	r3
  404bfa:	4603      	mov	r3, r0
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d001      	beq.n	404c04 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
  404c00:	2301      	movs	r3, #1
  404c02:	e000      	b.n	404c06 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
  404c04:	2300      	movs	r3, #0
}
  404c06:	4618      	mov	r0, r3
  404c08:	3710      	adds	r7, #16
  404c0a:	46bd      	mov	sp, r7
  404c0c:	bd80      	pop	{r7, pc}
  404c0e:	bf00      	nop
  404c10:	00404631 	.word	0x00404631
  404c14:	00404719 	.word	0x00404719
  404c18:	00404765 	.word	0x00404765

00404c1c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  404c1c:	b580      	push	{r7, lr}
  404c1e:	b082      	sub	sp, #8
  404c20:	af00      	add	r7, sp, #0
  404c22:	6078      	str	r0, [r7, #4]
  404c24:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
  404c26:	2000      	movs	r0, #0
  404c28:	6879      	ldr	r1, [r7, #4]
  404c2a:	683a      	ldr	r2, [r7, #0]
  404c2c:	4b03      	ldr	r3, [pc, #12]	; (404c3c <sd_mmc_mem_2_ram_0+0x20>)
  404c2e:	4798      	blx	r3
  404c30:	4603      	mov	r3, r0
}
  404c32:	4618      	mov	r0, r3
  404c34:	3708      	adds	r7, #8
  404c36:	46bd      	mov	sp, r7
  404c38:	bd80      	pop	{r7, pc}
  404c3a:	bf00      	nop
  404c3c:	00404bb5 	.word	0x00404bb5

00404c40 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  404c40:	b580      	push	{r7, lr}
  404c42:	b082      	sub	sp, #8
  404c44:	af00      	add	r7, sp, #0
  404c46:	6078      	str	r0, [r7, #4]
  404c48:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
  404c4a:	2001      	movs	r0, #1
  404c4c:	6879      	ldr	r1, [r7, #4]
  404c4e:	683a      	ldr	r2, [r7, #0]
  404c50:	4b03      	ldr	r3, [pc, #12]	; (404c60 <sd_mmc_mem_2_ram_1+0x20>)
  404c52:	4798      	blx	r3
  404c54:	4603      	mov	r3, r0
}
  404c56:	4618      	mov	r0, r3
  404c58:	3708      	adds	r7, #8
  404c5a:	46bd      	mov	sp, r7
  404c5c:	bd80      	pop	{r7, pc}
  404c5e:	bf00      	nop
  404c60:	00404bb5 	.word	0x00404bb5

00404c64 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  404c64:	b580      	push	{r7, lr}
  404c66:	b084      	sub	sp, #16
  404c68:	af00      	add	r7, sp, #0
  404c6a:	4603      	mov	r3, r0
  404c6c:	60b9      	str	r1, [r7, #8]
  404c6e:	607a      	str	r2, [r7, #4]
  404c70:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  404c72:	7bfb      	ldrb	r3, [r7, #15]
  404c74:	4618      	mov	r0, r3
  404c76:	68b9      	ldr	r1, [r7, #8]
  404c78:	2201      	movs	r2, #1
  404c7a:	4b11      	ldr	r3, [pc, #68]	; (404cc0 <sd_mmc_ram_2_mem+0x5c>)
  404c7c:	4798      	blx	r3
  404c7e:	4603      	mov	r3, r0
  404c80:	2b00      	cmp	r3, #0
  404c82:	d005      	beq.n	404c90 <sd_mmc_ram_2_mem+0x2c>
  404c84:	2b02      	cmp	r3, #2
  404c86:	d101      	bne.n	404c8c <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  404c88:	2302      	movs	r3, #2
  404c8a:	e014      	b.n	404cb6 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
  404c8c:	2301      	movs	r3, #1
  404c8e:	e012      	b.n	404cb6 <sd_mmc_ram_2_mem+0x52>

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  404c90:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  404c92:	6878      	ldr	r0, [r7, #4]
  404c94:	2101      	movs	r1, #1
  404c96:	4b0b      	ldr	r3, [pc, #44]	; (404cc4 <sd_mmc_ram_2_mem+0x60>)
  404c98:	4798      	blx	r3
  404c9a:	4603      	mov	r3, r0
  404c9c:	2b00      	cmp	r3, #0
  404c9e:	d001      	beq.n	404ca4 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
  404ca0:	2301      	movs	r3, #1
  404ca2:	e008      	b.n	404cb6 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  404ca4:	2000      	movs	r0, #0
  404ca6:	4b08      	ldr	r3, [pc, #32]	; (404cc8 <sd_mmc_ram_2_mem+0x64>)
  404ca8:	4798      	blx	r3
  404caa:	4603      	mov	r3, r0
  404cac:	2b00      	cmp	r3, #0
  404cae:	d001      	beq.n	404cb4 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
  404cb0:	2301      	movs	r3, #1
  404cb2:	e000      	b.n	404cb6 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
  404cb4:	2300      	movs	r3, #0
}
  404cb6:	4618      	mov	r0, r3
  404cb8:	3710      	adds	r7, #16
  404cba:	46bd      	mov	sp, r7
  404cbc:	bd80      	pop	{r7, pc}
  404cbe:	bf00      	nop
  404cc0:	004047f1 	.word	0x004047f1
  404cc4:	004048d9 	.word	0x004048d9
  404cc8:	00404925 	.word	0x00404925

00404ccc <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  404ccc:	b580      	push	{r7, lr}
  404cce:	b082      	sub	sp, #8
  404cd0:	af00      	add	r7, sp, #0
  404cd2:	6078      	str	r0, [r7, #4]
  404cd4:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
  404cd6:	2000      	movs	r0, #0
  404cd8:	6879      	ldr	r1, [r7, #4]
  404cda:	683a      	ldr	r2, [r7, #0]
  404cdc:	4b03      	ldr	r3, [pc, #12]	; (404cec <sd_mmc_ram_2_mem_0+0x20>)
  404cde:	4798      	blx	r3
  404ce0:	4603      	mov	r3, r0
}
  404ce2:	4618      	mov	r0, r3
  404ce4:	3708      	adds	r7, #8
  404ce6:	46bd      	mov	sp, r7
  404ce8:	bd80      	pop	{r7, pc}
  404cea:	bf00      	nop
  404cec:	00404c65 	.word	0x00404c65

00404cf0 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  404cf0:	b580      	push	{r7, lr}
  404cf2:	b082      	sub	sp, #8
  404cf4:	af00      	add	r7, sp, #0
  404cf6:	6078      	str	r0, [r7, #4]
  404cf8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
  404cfa:	2001      	movs	r0, #1
  404cfc:	6879      	ldr	r1, [r7, #4]
  404cfe:	683a      	ldr	r2, [r7, #0]
  404d00:	4b03      	ldr	r3, [pc, #12]	; (404d10 <sd_mmc_ram_2_mem_1+0x20>)
  404d02:	4798      	blx	r3
  404d04:	4603      	mov	r3, r0
}
  404d06:	4618      	mov	r0, r3
  404d08:	3708      	adds	r7, #8
  404d0a:	46bd      	mov	sp, r7
  404d0c:	bd80      	pop	{r7, pc}
  404d0e:	bf00      	nop
  404d10:	00404c65 	.word	0x00404c65

00404d14 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  404d14:	b580      	push	{r7, lr}
  404d16:	b084      	sub	sp, #16
  404d18:	af00      	add	r7, sp, #0
  404d1a:	4603      	mov	r3, r0
  404d1c:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  404d1e:	79fb      	ldrb	r3, [r7, #7]
  404d20:	2b01      	cmp	r3, #1
  404d22:	d807      	bhi.n	404d34 <mem_test_unit_ready+0x20>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  404d24:	79fb      	ldrb	r3, [r7, #7]
  404d26:	4a07      	ldr	r2, [pc, #28]	; (404d44 <mem_test_unit_ready+0x30>)
  404d28:	015b      	lsls	r3, r3, #5
  404d2a:	4413      	add	r3, r2
  404d2c:	681b      	ldr	r3, [r3, #0]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  404d2e:	4798      	blx	r3
  404d30:	4603      	mov	r3, r0
  404d32:	e000      	b.n	404d36 <mem_test_unit_ready+0x22>
  404d34:	2301      	movs	r3, #1
  404d36:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  404d38:	7bfb      	ldrb	r3, [r7, #15]
}
  404d3a:	4618      	mov	r0, r3
  404d3c:	3710      	adds	r7, #16
  404d3e:	46bd      	mov	sp, r7
  404d40:	bd80      	pop	{r7, pc}
  404d42:	bf00      	nop
  404d44:	0041ce90 	.word	0x0041ce90

00404d48 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  404d48:	b580      	push	{r7, lr}
  404d4a:	b084      	sub	sp, #16
  404d4c:	af00      	add	r7, sp, #0
  404d4e:	4603      	mov	r3, r0
  404d50:	6039      	str	r1, [r7, #0]
  404d52:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  404d54:	79fb      	ldrb	r3, [r7, #7]
  404d56:	2b01      	cmp	r3, #1
  404d58:	d808      	bhi.n	404d6c <mem_read_capacity+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  404d5a:	79fb      	ldrb	r3, [r7, #7]
  404d5c:	4a07      	ldr	r2, [pc, #28]	; (404d7c <mem_read_capacity+0x34>)
  404d5e:	015b      	lsls	r3, r3, #5
  404d60:	4413      	add	r3, r2
  404d62:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  404d64:	6838      	ldr	r0, [r7, #0]
  404d66:	4798      	blx	r3
  404d68:	4603      	mov	r3, r0
  404d6a:	e000      	b.n	404d6e <mem_read_capacity+0x26>
  404d6c:	2301      	movs	r3, #1
  404d6e:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  404d70:	7bfb      	ldrb	r3, [r7, #15]
}
  404d72:	4618      	mov	r0, r3
  404d74:	3710      	adds	r7, #16
  404d76:	46bd      	mov	sp, r7
  404d78:	bd80      	pop	{r7, pc}
  404d7a:	bf00      	nop
  404d7c:	0041ce90 	.word	0x0041ce90

00404d80 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
  404d80:	b480      	push	{r7}
  404d82:	b085      	sub	sp, #20
  404d84:	af00      	add	r7, sp, #0
  404d86:	4603      	mov	r3, r0
  404d88:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
  404d8a:	79fb      	ldrb	r3, [r7, #7]
  404d8c:	2b01      	cmp	r3, #1
  404d8e:	bf8c      	ite	hi
  404d90:	2300      	movhi	r3, #0
  404d92:	2301      	movls	r3, #1
  404d94:	b2db      	uxtb	r3, r3
{
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
  404d96:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
  404d98:	7bfb      	ldrb	r3, [r7, #15]
}
  404d9a:	4618      	mov	r0, r3
  404d9c:	3714      	adds	r7, #20
  404d9e:	46bd      	mov	sp, r7
  404da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404da4:	4770      	bx	lr
  404da6:	bf00      	nop

00404da8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  404da8:	b580      	push	{r7, lr}
  404daa:	b084      	sub	sp, #16
  404dac:	af00      	add	r7, sp, #0
  404dae:	4603      	mov	r3, r0
  404db0:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  404db2:	79fb      	ldrb	r3, [r7, #7]
  404db4:	2b01      	cmp	r3, #1
  404db6:	d809      	bhi.n	404dcc <mem_wr_protect+0x24>
  404db8:	79fb      	ldrb	r3, [r7, #7]
  404dba:	4a09      	ldr	r2, [pc, #36]	; (404de0 <mem_wr_protect+0x38>)
  404dbc:	015b      	lsls	r3, r3, #5
  404dbe:	4413      	add	r3, r2
  404dc0:	3308      	adds	r3, #8
  404dc2:	685b      	ldr	r3, [r3, #4]
  404dc4:	4798      	blx	r3
  404dc6:	4603      	mov	r3, r0
  404dc8:	2b00      	cmp	r3, #0
  404dca:	d001      	beq.n	404dd0 <mem_wr_protect+0x28>
  404dcc:	2301      	movs	r3, #1
  404dce:	e000      	b.n	404dd2 <mem_wr_protect+0x2a>
  404dd0:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
  404dd2:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
  404dd4:	7bfb      	ldrb	r3, [r7, #15]
}
  404dd6:	4618      	mov	r0, r3
  404dd8:	3710      	adds	r7, #16
  404dda:	46bd      	mov	sp, r7
  404ddc:	bd80      	pop	{r7, pc}
  404dde:	bf00      	nop
  404de0:	0041ce90 	.word	0x0041ce90

00404de4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  404de4:	b580      	push	{r7, lr}
  404de6:	b086      	sub	sp, #24
  404de8:	af00      	add	r7, sp, #0
  404dea:	4603      	mov	r3, r0
  404dec:	60b9      	str	r1, [r7, #8]
  404dee:	607a      	str	r2, [r7, #4]
  404df0:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  404df2:	7bfb      	ldrb	r3, [r7, #15]
  404df4:	2b01      	cmp	r3, #1
  404df6:	d80a      	bhi.n	404e0e <memory_2_ram+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  404df8:	7bfb      	ldrb	r3, [r7, #15]
  404dfa:	4a08      	ldr	r2, [pc, #32]	; (404e1c <memory_2_ram+0x38>)
  404dfc:	015b      	lsls	r3, r3, #5
  404dfe:	4413      	add	r3, r2
  404e00:	3310      	adds	r3, #16
  404e02:	685b      	ldr	r3, [r3, #4]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  404e04:	68b8      	ldr	r0, [r7, #8]
  404e06:	6879      	ldr	r1, [r7, #4]
  404e08:	4798      	blx	r3
  404e0a:	4603      	mov	r3, r0
  404e0c:	e000      	b.n	404e10 <memory_2_ram+0x2c>
  404e0e:	2301      	movs	r3, #1
  404e10:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
  404e12:	7dfb      	ldrb	r3, [r7, #23]
}
  404e14:	4618      	mov	r0, r3
  404e16:	3718      	adds	r7, #24
  404e18:	46bd      	mov	sp, r7
  404e1a:	bd80      	pop	{r7, pc}
  404e1c:	0041ce90 	.word	0x0041ce90

00404e20 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  404e20:	b580      	push	{r7, lr}
  404e22:	b086      	sub	sp, #24
  404e24:	af00      	add	r7, sp, #0
  404e26:	4603      	mov	r3, r0
  404e28:	60b9      	str	r1, [r7, #8]
  404e2a:	607a      	str	r2, [r7, #4]
  404e2c:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  404e2e:	7bfb      	ldrb	r3, [r7, #15]
  404e30:	2b01      	cmp	r3, #1
  404e32:	d80a      	bhi.n	404e4a <ram_2_memory+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  404e34:	7bfb      	ldrb	r3, [r7, #15]
  404e36:	4a08      	ldr	r2, [pc, #32]	; (404e58 <ram_2_memory+0x38>)
  404e38:	015b      	lsls	r3, r3, #5
  404e3a:	4413      	add	r3, r2
  404e3c:	3318      	adds	r3, #24
  404e3e:	681b      	ldr	r3, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  404e40:	68b8      	ldr	r0, [r7, #8]
  404e42:	6879      	ldr	r1, [r7, #4]
  404e44:	4798      	blx	r3
  404e46:	4603      	mov	r3, r0
  404e48:	e000      	b.n	404e4c <ram_2_memory+0x2c>
  404e4a:	2301      	movs	r3, #1
  404e4c:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
  404e4e:	7dfb      	ldrb	r3, [r7, #23]
}
  404e50:	4618      	mov	r0, r3
  404e52:	3718      	adds	r7, #24
  404e54:	46bd      	mov	sp, r7
  404e56:	bd80      	pop	{r7, pc}
  404e58:	0041ce90 	.word	0x0041ce90

00404e5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404e5c:	b580      	push	{r7, lr}
  404e5e:	b086      	sub	sp, #24
  404e60:	af00      	add	r7, sp, #0
  404e62:	60f8      	str	r0, [r7, #12]
  404e64:	60b9      	str	r1, [r7, #8]
  404e66:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404e68:	2300      	movs	r3, #0
  404e6a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  404e6c:	68fb      	ldr	r3, [r7, #12]
  404e6e:	2b00      	cmp	r3, #0
  404e70:	d002      	beq.n	404e78 <_read+0x1c>
		return -1;
  404e72:	f04f 33ff 	mov.w	r3, #4294967295
  404e76:	e014      	b.n	404ea2 <_read+0x46>
	}

	for (; len > 0; --len) {
  404e78:	e00f      	b.n	404e9a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  404e7a:	4b0c      	ldr	r3, [pc, #48]	; (404eac <_read+0x50>)
  404e7c:	681b      	ldr	r3, [r3, #0]
  404e7e:	4a0c      	ldr	r2, [pc, #48]	; (404eb0 <_read+0x54>)
  404e80:	6812      	ldr	r2, [r2, #0]
  404e82:	4610      	mov	r0, r2
  404e84:	68b9      	ldr	r1, [r7, #8]
  404e86:	4798      	blx	r3
		ptr++;
  404e88:	68bb      	ldr	r3, [r7, #8]
  404e8a:	3301      	adds	r3, #1
  404e8c:	60bb      	str	r3, [r7, #8]
		nChars++;
  404e8e:	697b      	ldr	r3, [r7, #20]
  404e90:	3301      	adds	r3, #1
  404e92:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404e94:	687b      	ldr	r3, [r7, #4]
  404e96:	3b01      	subs	r3, #1
  404e98:	607b      	str	r3, [r7, #4]
  404e9a:	687b      	ldr	r3, [r7, #4]
  404e9c:	2b00      	cmp	r3, #0
  404e9e:	dcec      	bgt.n	404e7a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  404ea0:	697b      	ldr	r3, [r7, #20]
}
  404ea2:	4618      	mov	r0, r3
  404ea4:	3718      	adds	r7, #24
  404ea6:	46bd      	mov	sp, r7
  404ea8:	bd80      	pop	{r7, pc}
  404eaa:	bf00      	nop
  404eac:	20003e74 	.word	0x20003e74
  404eb0:	20003e7c 	.word	0x20003e7c

00404eb4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  404eb4:	b580      	push	{r7, lr}
  404eb6:	b086      	sub	sp, #24
  404eb8:	af00      	add	r7, sp, #0
  404eba:	60f8      	str	r0, [r7, #12]
  404ebc:	60b9      	str	r1, [r7, #8]
  404ebe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404ec0:	2300      	movs	r3, #0
  404ec2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  404ec4:	68fb      	ldr	r3, [r7, #12]
  404ec6:	2b01      	cmp	r3, #1
  404ec8:	d008      	beq.n	404edc <_write+0x28>
  404eca:	68fb      	ldr	r3, [r7, #12]
  404ecc:	2b02      	cmp	r3, #2
  404ece:	d005      	beq.n	404edc <_write+0x28>
  404ed0:	68fb      	ldr	r3, [r7, #12]
  404ed2:	2b03      	cmp	r3, #3
  404ed4:	d002      	beq.n	404edc <_write+0x28>
		return -1;
  404ed6:	f04f 33ff 	mov.w	r3, #4294967295
  404eda:	e01b      	b.n	404f14 <_write+0x60>
	}

	for (; len != 0; --len) {
  404edc:	e016      	b.n	404f0c <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404ede:	4b0f      	ldr	r3, [pc, #60]	; (404f1c <_write+0x68>)
  404ee0:	681a      	ldr	r2, [r3, #0]
  404ee2:	4b0f      	ldr	r3, [pc, #60]	; (404f20 <_write+0x6c>)
  404ee4:	6819      	ldr	r1, [r3, #0]
  404ee6:	68bb      	ldr	r3, [r7, #8]
  404ee8:	1c58      	adds	r0, r3, #1
  404eea:	60b8      	str	r0, [r7, #8]
  404eec:	781b      	ldrb	r3, [r3, #0]
  404eee:	4608      	mov	r0, r1
  404ef0:	4619      	mov	r1, r3
  404ef2:	4790      	blx	r2
  404ef4:	4603      	mov	r3, r0
  404ef6:	2b00      	cmp	r3, #0
  404ef8:	da02      	bge.n	404f00 <_write+0x4c>
			return -1;
  404efa:	f04f 33ff 	mov.w	r3, #4294967295
  404efe:	e009      	b.n	404f14 <_write+0x60>
		}
		++nChars;
  404f00:	697b      	ldr	r3, [r7, #20]
  404f02:	3301      	adds	r3, #1
  404f04:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  404f06:	687b      	ldr	r3, [r7, #4]
  404f08:	3b01      	subs	r3, #1
  404f0a:	607b      	str	r3, [r7, #4]
  404f0c:	687b      	ldr	r3, [r7, #4]
  404f0e:	2b00      	cmp	r3, #0
  404f10:	d1e5      	bne.n	404ede <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  404f12:	697b      	ldr	r3, [r7, #20]
}
  404f14:	4618      	mov	r0, r3
  404f16:	3718      	adds	r7, #24
  404f18:	46bd      	mov	sp, r7
  404f1a:	bd80      	pop	{r7, pc}
  404f1c:	20003e78 	.word	0x20003e78
  404f20:	20003e7c 	.word	0x20003e7c

00404f24 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404f24:	b480      	push	{r7}
  404f26:	b083      	sub	sp, #12
  404f28:	af00      	add	r7, sp, #0
  404f2a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404f2c:	687b      	ldr	r3, [r7, #4]
  404f2e:	2b07      	cmp	r3, #7
  404f30:	d825      	bhi.n	404f7e <osc_get_rate+0x5a>
  404f32:	a201      	add	r2, pc, #4	; (adr r2, 404f38 <osc_get_rate+0x14>)
  404f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404f38:	00404f59 	.word	0x00404f59
  404f3c:	00404f5f 	.word	0x00404f5f
  404f40:	00404f65 	.word	0x00404f65
  404f44:	00404f6b 	.word	0x00404f6b
  404f48:	00404f6f 	.word	0x00404f6f
  404f4c:	00404f73 	.word	0x00404f73
  404f50:	00404f77 	.word	0x00404f77
  404f54:	00404f7b 	.word	0x00404f7b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404f58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404f5c:	e010      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f62:	e00d      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f68:	e00a      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  404f6a:	4b08      	ldr	r3, [pc, #32]	; (404f8c <osc_get_rate+0x68>)
  404f6c:	e008      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404f6e:	4b08      	ldr	r3, [pc, #32]	; (404f90 <osc_get_rate+0x6c>)
  404f70:	e006      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  404f72:	4b08      	ldr	r3, [pc, #32]	; (404f94 <osc_get_rate+0x70>)
  404f74:	e004      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404f76:	4b08      	ldr	r3, [pc, #32]	; (404f98 <osc_get_rate+0x74>)
  404f78:	e002      	b.n	404f80 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404f7a:	4b07      	ldr	r3, [pc, #28]	; (404f98 <osc_get_rate+0x74>)
  404f7c:	e000      	b.n	404f80 <osc_get_rate+0x5c>
	}

	return 0;
  404f7e:	2300      	movs	r3, #0
}
  404f80:	4618      	mov	r0, r3
  404f82:	370c      	adds	r7, #12
  404f84:	46bd      	mov	sp, r7
  404f86:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f8a:	4770      	bx	lr
  404f8c:	003d0900 	.word	0x003d0900
  404f90:	007a1200 	.word	0x007a1200
  404f94:	00b71b00 	.word	0x00b71b00
  404f98:	00f42400 	.word	0x00f42400

00404f9c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404f9c:	b580      	push	{r7, lr}
  404f9e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404fa0:	2006      	movs	r0, #6
  404fa2:	4b04      	ldr	r3, [pc, #16]	; (404fb4 <sysclk_get_main_hz+0x18>)
  404fa4:	4798      	blx	r3
  404fa6:	4602      	mov	r2, r0
  404fa8:	4613      	mov	r3, r2
  404faa:	011b      	lsls	r3, r3, #4
  404fac:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404fae:	4618      	mov	r0, r3
  404fb0:	bd80      	pop	{r7, pc}
  404fb2:	bf00      	nop
  404fb4:	00404f25 	.word	0x00404f25

00404fb8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404fb8:	b580      	push	{r7, lr}
  404fba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404fbc:	4b02      	ldr	r3, [pc, #8]	; (404fc8 <sysclk_get_cpu_hz+0x10>)
  404fbe:	4798      	blx	r3
  404fc0:	4603      	mov	r3, r0
  404fc2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404fc4:	4618      	mov	r0, r3
  404fc6:	bd80      	pop	{r7, pc}
  404fc8:	00404f9d 	.word	0x00404f9d

00404fcc <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  404fcc:	b480      	push	{r7}
  404fce:	b087      	sub	sp, #28
  404fd0:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  404fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404fd6:	685b      	ldr	r3, [r3, #4]
  404fd8:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  404fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404fde:	689b      	ldr	r3, [r3, #8]
  404fe0:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  404fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404fe6:	68db      	ldr	r3, [r3, #12]
  404fe8:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  404fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404fee:	69db      	ldr	r3, [r3, #28]
  404ff0:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  404ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404ff8:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  404ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404ffe:	2280      	movs	r2, #128	; 0x80
  405000:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  405002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405006:	697a      	ldr	r2, [r7, #20]
  405008:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40500a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40500e:	693a      	ldr	r2, [r7, #16]
  405010:	609a      	str	r2, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  405012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405016:	68fa      	ldr	r2, [r7, #12]
  405018:	60da      	str	r2, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  40501a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40501e:	68ba      	ldr	r2, [r7, #8]
  405020:	61da      	str	r2, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  405022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405026:	687a      	ldr	r2, [r7, #4]
  405028:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40502a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40502e:	2205      	movs	r2, #5
  405030:	601a      	str	r2, [r3, #0]
}
  405032:	371c      	adds	r7, #28
  405034:	46bd      	mov	sp, r7
  405036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40503a:	4770      	bx	lr

0040503c <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  40503c:	b480      	push	{r7}
  40503e:	b085      	sub	sp, #20
  405040:	af00      	add	r7, sp, #0
  405042:	6078      	str	r0, [r7, #4]
  405044:	6039      	str	r1, [r7, #0]
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
	}
#else
	uint32_t clkdiv = 0;
  405046:	2300      	movs	r3, #0
  405048:	60fb      	str	r3, [r7, #12]
	uint32_t rest = 0;
  40504a:	2300      	movs	r3, #0
  40504c:	60bb      	str	r3, [r7, #8]

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  40504e:	687b      	ldr	r3, [r7, #4]
  405050:	005a      	lsls	r2, r3, #1
  405052:	683b      	ldr	r3, [r7, #0]
  405054:	429a      	cmp	r2, r3
  405056:	d21b      	bcs.n	405090 <hsmci_set_speed+0x54>
		clkdiv = mck / (2 * speed);
  405058:	687b      	ldr	r3, [r7, #4]
  40505a:	005b      	lsls	r3, r3, #1
  40505c:	683a      	ldr	r2, [r7, #0]
  40505e:	fbb2 f3f3 	udiv	r3, r2, r3
  405062:	60fb      	str	r3, [r7, #12]
		rest = mck % (2 * speed);
  405064:	687b      	ldr	r3, [r7, #4]
  405066:	005a      	lsls	r2, r3, #1
  405068:	683b      	ldr	r3, [r7, #0]
  40506a:	fbb3 f1f2 	udiv	r1, r3, r2
  40506e:	fb02 f201 	mul.w	r2, r2, r1
  405072:	1a9b      	subs	r3, r3, r2
  405074:	60bb      	str	r3, [r7, #8]
		if (rest > 0) {
  405076:	68bb      	ldr	r3, [r7, #8]
  405078:	2b00      	cmp	r3, #0
  40507a:	d002      	beq.n	405082 <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  40507c:	68fb      	ldr	r3, [r7, #12]
  40507e:	3301      	adds	r3, #1
  405080:	60fb      	str	r3, [r7, #12]
		}
		if (clkdiv > 0) {
  405082:	68fb      	ldr	r3, [r7, #12]
  405084:	2b00      	cmp	r3, #0
  405086:	d005      	beq.n	405094 <hsmci_set_speed+0x58>
			clkdiv -= 1;
  405088:	68fb      	ldr	r3, [r7, #12]
  40508a:	3b01      	subs	r3, #1
  40508c:	60fb      	str	r3, [r7, #12]
  40508e:	e001      	b.n	405094 <hsmci_set_speed+0x58>
		}
	} else {
		clkdiv = 0;
  405090:	2300      	movs	r3, #0
  405092:	60fb      	str	r3, [r7, #12]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  405094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40509c:	6852      	ldr	r2, [r2, #4]
  40509e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  4050a2:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4050a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4050a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4050ac:	6851      	ldr	r1, [r2, #4]
  4050ae:	68fa      	ldr	r2, [r7, #12]
  4050b0:	b2d2      	uxtb	r2, r2
  4050b2:	430a      	orrs	r2, r1
  4050b4:	605a      	str	r2, [r3, #4]
#endif

}
  4050b6:	3714      	adds	r7, #20
  4050b8:	46bd      	mov	sp, r7
  4050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050be:	4770      	bx	lr

004050c0 <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  4050c0:	b580      	push	{r7, lr}
  4050c2:	b082      	sub	sp, #8
  4050c4:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  4050c6:	f04f 33ff 	mov.w	r3, #4294967295
  4050ca:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4050cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4050d2:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  4050d4:	687b      	ldr	r3, [r7, #4]
  4050d6:	1e5a      	subs	r2, r3, #1
  4050d8:	607a      	str	r2, [r7, #4]
  4050da:	2b00      	cmp	r3, #0
  4050dc:	d103      	bne.n	4050e6 <hsmci_wait_busy+0x26>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  4050de:	4b09      	ldr	r3, [pc, #36]	; (405104 <hsmci_wait_busy+0x44>)
  4050e0:	4798      	blx	r3
			return false;
  4050e2:	2300      	movs	r3, #0
  4050e4:	e00a      	b.n	4050fc <hsmci_wait_busy+0x3c>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4050e6:	683b      	ldr	r3, [r7, #0]
  4050e8:	f003 0320 	and.w	r3, r3, #32
  4050ec:	2b00      	cmp	r3, #0
  4050ee:	d0ed      	beq.n	4050cc <hsmci_wait_busy+0xc>
  4050f0:	683b      	ldr	r3, [r7, #0]
  4050f2:	f003 0310 	and.w	r3, r3, #16
  4050f6:	2b00      	cmp	r3, #0
  4050f8:	d1e8      	bne.n	4050cc <hsmci_wait_busy+0xc>
	return true;
  4050fa:	2301      	movs	r3, #1
}
  4050fc:	4618      	mov	r0, r3
  4050fe:	3708      	adds	r7, #8
  405100:	46bd      	mov	sp, r7
  405102:	bd80      	pop	{r7, pc}
  405104:	00404fcd 	.word	0x00404fcd

00405108 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  405108:	b580      	push	{r7, lr}
  40510a:	b086      	sub	sp, #24
  40510c:	af00      	add	r7, sp, #0
  40510e:	60f8      	str	r0, [r7, #12]
  405110:	60b9      	str	r1, [r7, #8]
  405112:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  405114:	68bb      	ldr	r3, [r7, #8]
  405116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40511a:	68fa      	ldr	r2, [r7, #12]
  40511c:	4313      	orrs	r3, r2
  40511e:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  405120:	68bb      	ldr	r3, [r7, #8]
  405122:	f403 7380 	and.w	r3, r3, #256	; 0x100
  405126:	2b00      	cmp	r3, #0
  405128:	d01b      	beq.n	405162 <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  40512a:	68fb      	ldr	r3, [r7, #12]
  40512c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  405130:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  405132:	68bb      	ldr	r3, [r7, #8]
  405134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  405138:	2b00      	cmp	r3, #0
  40513a:	d004      	beq.n	405146 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40513c:	68fb      	ldr	r3, [r7, #12]
  40513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405142:	60fb      	str	r3, [r7, #12]
  405144:	e00d      	b.n	405162 <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  405146:	68bb      	ldr	r3, [r7, #8]
  405148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40514c:	2b00      	cmp	r3, #0
  40514e:	d004      	beq.n	40515a <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  405150:	68fb      	ldr	r3, [r7, #12]
  405152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  405156:	60fb      	str	r3, [r7, #12]
  405158:	e003      	b.n	405162 <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  40515a:	68fb      	ldr	r3, [r7, #12]
  40515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405160:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  405162:	68bb      	ldr	r3, [r7, #8]
  405164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  405168:	2b00      	cmp	r3, #0
  40516a:	d003      	beq.n	405174 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  40516c:	68fb      	ldr	r3, [r7, #12]
  40516e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405172:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  405174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405178:	687a      	ldr	r2, [r7, #4]
  40517a:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  40517c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405180:	68fa      	ldr	r2, [r7, #12]
  405182:	615a      	str	r2, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  405184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40518a:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  40518c:	68bb      	ldr	r3, [r7, #8]
  40518e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  405192:	2b00      	cmp	r3, #0
  405194:	d008      	beq.n	4051a8 <hsmci_send_cmd_execute+0xa0>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  405196:	697b      	ldr	r3, [r7, #20]
  405198:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  40519c:	2b00      	cmp	r3, #0
  40519e:	d00c      	beq.n	4051ba <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4051a0:	4b12      	ldr	r3, [pc, #72]	; (4051ec <hsmci_send_cmd_execute+0xe4>)
  4051a2:	4798      	blx	r3
				return false;
  4051a4:	2300      	movs	r3, #0
  4051a6:	e01d      	b.n	4051e4 <hsmci_send_cmd_execute+0xdc>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4051a8:	697b      	ldr	r3, [r7, #20]
  4051aa:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  4051ae:	2b00      	cmp	r3, #0
  4051b0:	d003      	beq.n	4051ba <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4051b2:	4b0e      	ldr	r3, [pc, #56]	; (4051ec <hsmci_send_cmd_execute+0xe4>)
  4051b4:	4798      	blx	r3
				return false;
  4051b6:	2300      	movs	r3, #0
  4051b8:	e014      	b.n	4051e4 <hsmci_send_cmd_execute+0xdc>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4051ba:	697b      	ldr	r3, [r7, #20]
  4051bc:	f003 0301 	and.w	r3, r3, #1
  4051c0:	2b00      	cmp	r3, #0
  4051c2:	d0df      	beq.n	405184 <hsmci_send_cmd_execute+0x7c>

	if (cmd & SDMMC_RESP_BUSY) {
  4051c4:	68bb      	ldr	r3, [r7, #8]
  4051c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4051ca:	2b00      	cmp	r3, #0
  4051cc:	d009      	beq.n	4051e2 <hsmci_send_cmd_execute+0xda>
		if (!hsmci_wait_busy()) {
  4051ce:	4b08      	ldr	r3, [pc, #32]	; (4051f0 <hsmci_send_cmd_execute+0xe8>)
  4051d0:	4798      	blx	r3
  4051d2:	4603      	mov	r3, r0
  4051d4:	f083 0301 	eor.w	r3, r3, #1
  4051d8:	b2db      	uxtb	r3, r3
  4051da:	2b00      	cmp	r3, #0
  4051dc:	d001      	beq.n	4051e2 <hsmci_send_cmd_execute+0xda>
			return false;
  4051de:	2300      	movs	r3, #0
  4051e0:	e000      	b.n	4051e4 <hsmci_send_cmd_execute+0xdc>
		}
	}
	return true;
  4051e2:	2301      	movs	r3, #1
}
  4051e4:	4618      	mov	r0, r3
  4051e6:	3718      	adds	r7, #24
  4051e8:	46bd      	mov	sp, r7
  4051ea:	bd80      	pop	{r7, pc}
  4051ec:	00404fcd 	.word	0x00404fcd
  4051f0:	004050c1 	.word	0x004050c1

004051f4 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4051f4:	b580      	push	{r7, lr}
  4051f6:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  4051f8:	2012      	movs	r0, #18
  4051fa:	4b0c      	ldr	r3, [pc, #48]	; (40522c <hsmci_init+0x38>)
  4051fc:	4798      	blx	r3
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4051fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405202:	2272      	movs	r2, #114	; 0x72
  405204:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  405206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40520a:	2272      	movs	r2, #114	; 0x72
  40520c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40520e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405212:	2211      	movs	r2, #17
  405214:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  405216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40521a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  40521e:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  405220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405224:	2205      	movs	r2, #5
  405226:	601a      	str	r2, [r3, #0]
}
  405228:	bd80      	pop	{r7, pc}
  40522a:	bf00      	nop
  40522c:	00411d0d 	.word	0x00411d0d

00405230 <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  405230:	b480      	push	{r7}
  405232:	b083      	sub	sp, #12
  405234:	af00      	add	r7, sp, #0
  405236:	4603      	mov	r3, r0
  405238:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  40523a:	79fb      	ldrb	r3, [r7, #7]
  40523c:	2b00      	cmp	r3, #0
  40523e:	d101      	bne.n	405244 <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  405240:	2304      	movs	r3, #4
  405242:	e000      	b.n	405246 <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  405244:	2300      	movs	r3, #0
	}
}
  405246:	4618      	mov	r0, r3
  405248:	370c      	adds	r7, #12
  40524a:	46bd      	mov	sp, r7
  40524c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405250:	4770      	bx	lr
  405252:	bf00      	nop

00405254 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  405254:	b480      	push	{r7}
  405256:	af00      	add	r7, sp, #0
	return true;
  405258:	2301      	movs	r3, #1
}
  40525a:	4618      	mov	r0, r3
  40525c:	46bd      	mov	sp, r7
  40525e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405262:	4770      	bx	lr

00405264 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  405264:	b580      	push	{r7, lr}
  405266:	b084      	sub	sp, #16
  405268:	af00      	add	r7, sp, #0
  40526a:	6039      	str	r1, [r7, #0]
  40526c:	4601      	mov	r1, r0
  40526e:	71f9      	strb	r1, [r7, #7]
  405270:	71ba      	strb	r2, [r7, #6]
  405272:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  405274:	2300      	movs	r3, #0
  405276:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  405278:	2300      	movs	r3, #0
  40527a:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  40527c:	797b      	ldrb	r3, [r7, #5]
  40527e:	2b00      	cmp	r3, #0
  405280:	d008      	beq.n	405294 <hsmci_select_device+0x30>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  405282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40528a:	6d52      	ldr	r2, [r2, #84]	; 0x54
  40528c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  405290:	655a      	str	r2, [r3, #84]	; 0x54
  405292:	e007      	b.n	4052a4 <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  405294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40529c:	6d52      	ldr	r2, [r2, #84]	; 0x54
  40529e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4052a2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_cpu_hz());
  4052a4:	4b12      	ldr	r3, [pc, #72]	; (4052f0 <hsmci_select_device+0x8c>)
  4052a6:	4798      	blx	r3
  4052a8:	4603      	mov	r3, r0
  4052aa:	6838      	ldr	r0, [r7, #0]
  4052ac:	4619      	mov	r1, r3
  4052ae:	4b11      	ldr	r3, [pc, #68]	; (4052f4 <hsmci_select_device+0x90>)
  4052b0:	4798      	blx	r3

	switch (slot) {
  4052b2:	79fb      	ldrb	r3, [r7, #7]
  4052b4:	2b00      	cmp	r3, #0
  4052b6:	d102      	bne.n	4052be <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  4052b8:	2300      	movs	r3, #0
  4052ba:	60fb      	str	r3, [r7, #12]
		break;
  4052bc:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4052be:	79bb      	ldrb	r3, [r7, #6]
  4052c0:	2b04      	cmp	r3, #4
  4052c2:	d006      	beq.n	4052d2 <hsmci_select_device+0x6e>
  4052c4:	2b08      	cmp	r3, #8
  4052c6:	d007      	beq.n	4052d8 <hsmci_select_device+0x74>
  4052c8:	2b01      	cmp	r3, #1
  4052ca:	d108      	bne.n	4052de <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4052cc:	2300      	movs	r3, #0
  4052ce:	60bb      	str	r3, [r7, #8]
		break;
  4052d0:	e005      	b.n	4052de <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4052d2:	2380      	movs	r3, #128	; 0x80
  4052d4:	60bb      	str	r3, [r7, #8]
		break;
  4052d6:	e002      	b.n	4052de <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  4052d8:	23c0      	movs	r3, #192	; 0xc0
  4052da:	60bb      	str	r3, [r7, #8]
		break;
  4052dc:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4052de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4052e2:	68f9      	ldr	r1, [r7, #12]
  4052e4:	68ba      	ldr	r2, [r7, #8]
  4052e6:	430a      	orrs	r2, r1
  4052e8:	60da      	str	r2, [r3, #12]
}
  4052ea:	3710      	adds	r7, #16
  4052ec:	46bd      	mov	sp, r7
  4052ee:	bd80      	pop	{r7, pc}
  4052f0:	00404fb9 	.word	0x00404fb9
  4052f4:	0040503d 	.word	0x0040503d

004052f8 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4052f8:	b480      	push	{r7}
  4052fa:	b083      	sub	sp, #12
  4052fc:	af00      	add	r7, sp, #0
  4052fe:	4603      	mov	r3, r0
  405300:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  405302:	370c      	adds	r7, #12
  405304:	46bd      	mov	sp, r7
  405306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40530a:	4770      	bx	lr

0040530c <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  40530c:	b480      	push	{r7}
  40530e:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  405310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405318:	6852      	ldr	r2, [r2, #4]
  40531a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  40531e:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  405320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405324:	2200      	movs	r2, #0
  405326:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  405328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40532c:	f44f 6210 	mov.w	r2, #2304	; 0x900
  405330:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  405332:	bf00      	nop
  405334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40533a:	f003 0301 	and.w	r3, r3, #1
  40533e:	2b00      	cmp	r3, #0
  405340:	d0f8      	beq.n	405334 <hsmci_send_clock+0x28>
}
  405342:	46bd      	mov	sp, r7
  405344:	f85d 7b04 	ldr.w	r7, [sp], #4
  405348:	4770      	bx	lr
  40534a:	bf00      	nop

0040534c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40534c:	b580      	push	{r7, lr}
  40534e:	b082      	sub	sp, #8
  405350:	af00      	add	r7, sp, #0
  405352:	6078      	str	r0, [r7, #4]
  405354:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  405356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40535a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40535e:	6852      	ldr	r2, [r2, #4]
  405360:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  405364:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  405366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40536a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40536e:	6852      	ldr	r2, [r2, #4]
  405370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  405374:	605a      	str	r2, [r3, #4]
#endif
	HSMCI->HSMCI_BLKR = 0;
  405376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40537a:	2200      	movs	r2, #0
  40537c:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40537e:	2000      	movs	r0, #0
  405380:	6879      	ldr	r1, [r7, #4]
  405382:	683a      	ldr	r2, [r7, #0]
  405384:	4b03      	ldr	r3, [pc, #12]	; (405394 <hsmci_send_cmd+0x48>)
  405386:	4798      	blx	r3
  405388:	4603      	mov	r3, r0
}
  40538a:	4618      	mov	r0, r3
  40538c:	3708      	adds	r7, #8
  40538e:	46bd      	mov	sp, r7
  405390:	bd80      	pop	{r7, pc}
  405392:	bf00      	nop
  405394:	00405109 	.word	0x00405109

00405398 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  405398:	b480      	push	{r7}
  40539a:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  40539c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4053a0:	6a1b      	ldr	r3, [r3, #32]
}
  4053a2:	4618      	mov	r0, r3
  4053a4:	46bd      	mov	sp, r7
  4053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053aa:	4770      	bx	lr

004053ac <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4053ac:	b480      	push	{r7}
  4053ae:	b085      	sub	sp, #20
  4053b0:	af00      	add	r7, sp, #0
  4053b2:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  4053b4:	2300      	movs	r3, #0
  4053b6:	73fb      	strb	r3, [r7, #15]
  4053b8:	e025      	b.n	405406 <hsmci_get_response_128+0x5a>
		response_32 = HSMCI->HSMCI_RSPR[0];
  4053ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4053be:	6a1b      	ldr	r3, [r3, #32]
  4053c0:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  4053c2:	68bb      	ldr	r3, [r7, #8]
  4053c4:	0e1b      	lsrs	r3, r3, #24
  4053c6:	b2da      	uxtb	r2, r3
  4053c8:	687b      	ldr	r3, [r7, #4]
  4053ca:	701a      	strb	r2, [r3, #0]
		response++;
  4053cc:	687b      	ldr	r3, [r7, #4]
  4053ce:	3301      	adds	r3, #1
  4053d0:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  4053d2:	68bb      	ldr	r3, [r7, #8]
  4053d4:	0c1b      	lsrs	r3, r3, #16
  4053d6:	b2da      	uxtb	r2, r3
  4053d8:	687b      	ldr	r3, [r7, #4]
  4053da:	701a      	strb	r2, [r3, #0]
		response++;
  4053dc:	687b      	ldr	r3, [r7, #4]
  4053de:	3301      	adds	r3, #1
  4053e0:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  4053e2:	68bb      	ldr	r3, [r7, #8]
  4053e4:	0a1b      	lsrs	r3, r3, #8
  4053e6:	b2da      	uxtb	r2, r3
  4053e8:	687b      	ldr	r3, [r7, #4]
  4053ea:	701a      	strb	r2, [r3, #0]
		response++;
  4053ec:	687b      	ldr	r3, [r7, #4]
  4053ee:	3301      	adds	r3, #1
  4053f0:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  4053f2:	68bb      	ldr	r3, [r7, #8]
  4053f4:	b2da      	uxtb	r2, r3
  4053f6:	687b      	ldr	r3, [r7, #4]
  4053f8:	701a      	strb	r2, [r3, #0]
		response++;
  4053fa:	687b      	ldr	r3, [r7, #4]
  4053fc:	3301      	adds	r3, #1
  4053fe:	607b      	str	r3, [r7, #4]

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  405400:	7bfb      	ldrb	r3, [r7, #15]
  405402:	3301      	adds	r3, #1
  405404:	73fb      	strb	r3, [r7, #15]
  405406:	7bfb      	ldrb	r3, [r7, #15]
  405408:	2b03      	cmp	r3, #3
  40540a:	d9d6      	bls.n	4053ba <hsmci_get_response_128+0xe>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  40540c:	3714      	adds	r7, #20
  40540e:	46bd      	mov	sp, r7
  405410:	f85d 7b04 	ldr.w	r7, [sp], #4
  405414:	4770      	bx	lr
  405416:	bf00      	nop

00405418 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  405418:	b580      	push	{r7, lr}
  40541a:	b086      	sub	sp, #24
  40541c:	af00      	add	r7, sp, #0
  40541e:	60f8      	str	r0, [r7, #12]
  405420:	60b9      	str	r1, [r7, #8]
  405422:	80fa      	strh	r2, [r7, #6]
  405424:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  405426:	f897 3020 	ldrb.w	r3, [r7, #32]
  40542a:	2b00      	cmp	r3, #0
  40542c:	d008      	beq.n	405440 <hsmci_adtc_start+0x28>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  40542e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405436:	6852      	ldr	r2, [r2, #4]
  405438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40543c:	605a      	str	r2, [r3, #4]
  40543e:	e007      	b.n	405450 <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  405440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405448:	6852      	ldr	r2, [r2, #4]
  40544a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  40544e:	605a      	str	r2, [r3, #4]
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  405450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405458:	6852      	ldr	r2, [r2, #4]
  40545a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
  40545e:	605a      	str	r2, [r3, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  405460:	88fb      	ldrh	r3, [r7, #6]
  405462:	f003 0303 	and.w	r3, r3, #3
  405466:	2b00      	cmp	r3, #0
  405468:	d008      	beq.n	40547c <hsmci_adtc_start+0x64>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40546a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40546e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405472:	6852      	ldr	r2, [r2, #4]
  405474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405478:	605a      	str	r2, [r3, #4]
  40547a:	e007      	b.n	40548c <hsmci_adtc_start+0x74>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40547c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405484:	6852      	ldr	r2, [r2, #4]
  405486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40548a:	605a      	str	r2, [r3, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  40548c:	68fb      	ldr	r3, [r7, #12]
  40548e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  405492:	2b00      	cmp	r3, #0
  405494:	d003      	beq.n	40549e <hsmci_adtc_start+0x86>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  405496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40549a:	617b      	str	r3, [r7, #20]
  40549c:	e002      	b.n	4054a4 <hsmci_adtc_start+0x8c>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40549e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  4054a2:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4054a4:	68fb      	ldr	r3, [r7, #12]
  4054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4054aa:	2b00      	cmp	r3, #0
  4054ac:	d00a      	beq.n	4054c4 <hsmci_adtc_start+0xac>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4054ae:	697b      	ldr	r3, [r7, #20]
  4054b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4054b4:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4054b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4054ba:	88fa      	ldrh	r2, [r7, #6]
  4054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
  4054c0:	619a      	str	r2, [r3, #24]
  4054c2:	e028      	b.n	405516 <hsmci_adtc_start+0xfe>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4054c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4054c8:	88fa      	ldrh	r2, [r7, #6]
  4054ca:	0411      	lsls	r1, r2, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  4054cc:	88ba      	ldrh	r2, [r7, #4]
	if (cmd & SDMMC_CMD_SDIO_BYTE) {
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4054ce:	430a      	orrs	r2, r1
  4054d0:	619a      	str	r2, [r3, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4054d2:	68fb      	ldr	r3, [r7, #12]
  4054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4054d8:	2b00      	cmp	r3, #0
  4054da:	d004      	beq.n	4054e6 <hsmci_adtc_start+0xce>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4054dc:	697b      	ldr	r3, [r7, #20]
  4054de:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  4054e2:	617b      	str	r3, [r7, #20]
  4054e4:	e017      	b.n	405516 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_STREAM) {
  4054e6:	68fb      	ldr	r3, [r7, #12]
  4054e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  4054ec:	2b00      	cmp	r3, #0
  4054ee:	d004      	beq.n	4054fa <hsmci_adtc_start+0xe2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4054f0:	697b      	ldr	r3, [r7, #20]
  4054f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4054f6:	617b      	str	r3, [r7, #20]
  4054f8:	e00d      	b.n	405516 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4054fa:	68fb      	ldr	r3, [r7, #12]
  4054fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  405500:	2b00      	cmp	r3, #0
  405502:	d108      	bne.n	405516 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  405504:	68fb      	ldr	r3, [r7, #12]
  405506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  40550a:	2b00      	cmp	r3, #0
  40550c:	d003      	beq.n	405516 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40550e:	697b      	ldr	r3, [r7, #20]
  405510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  405514:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  405516:	4b09      	ldr	r3, [pc, #36]	; (40553c <hsmci_adtc_start+0x124>)
  405518:	2200      	movs	r2, #0
  40551a:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  40551c:	4b08      	ldr	r3, [pc, #32]	; (405540 <hsmci_adtc_start+0x128>)
  40551e:	88fa      	ldrh	r2, [r7, #6]
  405520:	801a      	strh	r2, [r3, #0]
	hsmci_nb_block = nb_block;
  405522:	4b08      	ldr	r3, [pc, #32]	; (405544 <hsmci_adtc_start+0x12c>)
  405524:	88ba      	ldrh	r2, [r7, #4]
  405526:	801a      	strh	r2, [r3, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  405528:	6978      	ldr	r0, [r7, #20]
  40552a:	68f9      	ldr	r1, [r7, #12]
  40552c:	68ba      	ldr	r2, [r7, #8]
  40552e:	4b06      	ldr	r3, [pc, #24]	; (405548 <hsmci_adtc_start+0x130>)
  405530:	4798      	blx	r3
  405532:	4603      	mov	r3, r0
}
  405534:	4618      	mov	r0, r3
  405536:	3718      	adds	r7, #24
  405538:	46bd      	mov	sp, r7
  40553a:	bd80      	pop	{r7, pc}
  40553c:	20003400 	.word	0x20003400
  405540:	20003404 	.word	0x20003404
  405544:	20003406 	.word	0x20003406
  405548:	00405109 	.word	0x00405109

0040554c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40554c:	b580      	push	{r7, lr}
  40554e:	b084      	sub	sp, #16
  405550:	af00      	add	r7, sp, #0
  405552:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  405554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40555a:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40555c:	68fa      	ldr	r2, [r7, #12]
  40555e:	4b1d      	ldr	r3, [pc, #116]	; (4055d4 <hsmci_read_word+0x88>)
  405560:	4013      	ands	r3, r2
  405562:	2b00      	cmp	r3, #0
  405564:	d003      	beq.n	40556e <hsmci_read_word+0x22>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  405566:	4b1c      	ldr	r3, [pc, #112]	; (4055d8 <hsmci_read_word+0x8c>)
  405568:	4798      	blx	r3
			return false;
  40556a:	2300      	movs	r3, #0
  40556c:	e02d      	b.n	4055ca <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40556e:	68fb      	ldr	r3, [r7, #12]
  405570:	f003 0302 	and.w	r3, r3, #2
  405574:	2b00      	cmp	r3, #0
  405576:	d0ed      	beq.n	405554 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  405578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40557c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40557e:	687b      	ldr	r3, [r7, #4]
  405580:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  405582:	4b16      	ldr	r3, [pc, #88]	; (4055dc <hsmci_read_word+0x90>)
  405584:	681b      	ldr	r3, [r3, #0]
  405586:	1d1a      	adds	r2, r3, #4
  405588:	4b14      	ldr	r3, [pc, #80]	; (4055dc <hsmci_read_word+0x90>)
  40558a:	601a      	str	r2, [r3, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40558c:	4b14      	ldr	r3, [pc, #80]	; (4055e0 <hsmci_read_word+0x94>)
  40558e:	881b      	ldrh	r3, [r3, #0]
  405590:	4a14      	ldr	r2, [pc, #80]	; (4055e4 <hsmci_read_word+0x98>)
  405592:	8812      	ldrh	r2, [r2, #0]
  405594:	fb02 f203 	mul.w	r2, r2, r3
  405598:	4b10      	ldr	r3, [pc, #64]	; (4055dc <hsmci_read_word+0x90>)
  40559a:	681b      	ldr	r3, [r3, #0]
  40559c:	429a      	cmp	r2, r3
  40559e:	d901      	bls.n	4055a4 <hsmci_read_word+0x58>
		return true;
  4055a0:	2301      	movs	r3, #1
  4055a2:	e012      	b.n	4055ca <hsmci_read_word+0x7e>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4055a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4055aa:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4055ac:	68fa      	ldr	r2, [r7, #12]
  4055ae:	4b09      	ldr	r3, [pc, #36]	; (4055d4 <hsmci_read_word+0x88>)
  4055b0:	4013      	ands	r3, r2
  4055b2:	2b00      	cmp	r3, #0
  4055b4:	d003      	beq.n	4055be <hsmci_read_word+0x72>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4055b6:	4b08      	ldr	r3, [pc, #32]	; (4055d8 <hsmci_read_word+0x8c>)
  4055b8:	4798      	blx	r3
			return false;
  4055ba:	2300      	movs	r3, #0
  4055bc:	e005      	b.n	4055ca <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4055be:	68fb      	ldr	r3, [r7, #12]
  4055c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  4055c4:	2b00      	cmp	r3, #0
  4055c6:	d0ed      	beq.n	4055a4 <hsmci_read_word+0x58>
	return true;
  4055c8:	2301      	movs	r3, #1
}
  4055ca:	4618      	mov	r0, r3
  4055cc:	3710      	adds	r7, #16
  4055ce:	46bd      	mov	sp, r7
  4055d0:	bd80      	pop	{r7, pc}
  4055d2:	bf00      	nop
  4055d4:	c0600000 	.word	0xc0600000
  4055d8:	00404fcd 	.word	0x00404fcd
  4055dc:	20003400 	.word	0x20003400
  4055e0:	20003404 	.word	0x20003404
  4055e4:	20003406 	.word	0x20003406

004055e8 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4055e8:	b480      	push	{r7}
  4055ea:	b085      	sub	sp, #20
  4055ec:	af00      	add	r7, sp, #0
  4055ee:	6078      	str	r0, [r7, #4]
  4055f0:	460b      	mov	r3, r1
  4055f2:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4055f4:	887b      	ldrh	r3, [r7, #2]
  4055f6:	4a26      	ldr	r2, [pc, #152]	; (405690 <hsmci_start_read_blocks+0xa8>)
  4055f8:	8812      	ldrh	r2, [r2, #0]
  4055fa:	fb02 f303 	mul.w	r3, r2, r3
  4055fe:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  405600:	687b      	ldr	r3, [r7, #4]
  405602:	f003 0303 	and.w	r3, r3, #3
  405606:	2b00      	cmp	r3, #0
  405608:	d105      	bne.n	405616 <hsmci_start_read_blocks+0x2e>
  40560a:	4b21      	ldr	r3, [pc, #132]	; (405690 <hsmci_start_read_blocks+0xa8>)
  40560c:	881b      	ldrh	r3, [r3, #0]
  40560e:	f003 0303 	and.w	r3, r3, #3
  405612:	2b00      	cmp	r3, #0
  405614:	d008      	beq.n	405628 <hsmci_start_read_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  405616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40561a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40561e:	6852      	ldr	r2, [r2, #4]
  405620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405624:	605a      	str	r2, [r3, #4]
  405626:	e007      	b.n	405638 <hsmci_start_read_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  405628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40562c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405630:	6852      	ldr	r2, [r2, #4]
  405632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405636:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  405638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40563c:	687a      	ldr	r2, [r7, #4]
  40563e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  405642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40564a:	685b      	ldr	r3, [r3, #4]
  40564c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  405650:	2b00      	cmp	r3, #0
  405652:	d102      	bne.n	40565a <hsmci_start_read_blocks+0x72>
  405654:	68fb      	ldr	r3, [r7, #12]
  405656:	089b      	lsrs	r3, r3, #2
  405658:	e000      	b.n	40565c <hsmci_start_read_blocks+0x74>
  40565a:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40565c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  405660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405664:	2200      	movs	r2, #0
  405666:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  40566a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40566e:	2201      	movs	r2, #1
  405670:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  405674:	4b07      	ldr	r3, [pc, #28]	; (405694 <hsmci_start_read_blocks+0xac>)
  405676:	681a      	ldr	r2, [r3, #0]
  405678:	68fb      	ldr	r3, [r7, #12]
  40567a:	441a      	add	r2, r3
  40567c:	4b05      	ldr	r3, [pc, #20]	; (405694 <hsmci_start_read_blocks+0xac>)
  40567e:	601a      	str	r2, [r3, #0]
	return true;
  405680:	2301      	movs	r3, #1
}
  405682:	4618      	mov	r0, r3
  405684:	3714      	adds	r7, #20
  405686:	46bd      	mov	sp, r7
  405688:	f85d 7b04 	ldr.w	r7, [sp], #4
  40568c:	4770      	bx	lr
  40568e:	bf00      	nop
  405690:	20003404 	.word	0x20003404
  405694:	20003400 	.word	0x20003400

00405698 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  405698:	b580      	push	{r7, lr}
  40569a:	b082      	sub	sp, #8
  40569c:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40569e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4056a4:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4056a6:	687a      	ldr	r2, [r7, #4]
  4056a8:	4b1a      	ldr	r3, [pc, #104]	; (405714 <hsmci_wait_end_of_read_blocks+0x7c>)
  4056aa:	4013      	ands	r3, r2
  4056ac:	2b00      	cmp	r3, #0
  4056ae:	d009      	beq.n	4056c4 <hsmci_wait_end_of_read_blocks+0x2c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  4056b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4056b4:	f240 2202 	movw	r2, #514	; 0x202
  4056b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  4056bc:	4b16      	ldr	r3, [pc, #88]	; (405718 <hsmci_wait_end_of_read_blocks+0x80>)
  4056be:	4798      	blx	r3
			return false;
  4056c0:	2300      	movs	r3, #0
  4056c2:	e023      	b.n	40570c <hsmci_wait_end_of_read_blocks+0x74>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  4056c4:	687b      	ldr	r3, [r7, #4]
  4056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  4056ca:	2b00      	cmp	r3, #0
  4056cc:	d0e7      	beq.n	40569e <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4056ce:	4b13      	ldr	r3, [pc, #76]	; (40571c <hsmci_wait_end_of_read_blocks+0x84>)
  4056d0:	881b      	ldrh	r3, [r3, #0]
  4056d2:	4a13      	ldr	r2, [pc, #76]	; (405720 <hsmci_wait_end_of_read_blocks+0x88>)
  4056d4:	8812      	ldrh	r2, [r2, #0]
  4056d6:	fb02 f203 	mul.w	r2, r2, r3
  4056da:	4b12      	ldr	r3, [pc, #72]	; (405724 <hsmci_wait_end_of_read_blocks+0x8c>)
  4056dc:	681b      	ldr	r3, [r3, #0]
  4056de:	429a      	cmp	r2, r3
  4056e0:	d901      	bls.n	4056e6 <hsmci_wait_end_of_read_blocks+0x4e>
		return true;
  4056e2:	2301      	movs	r3, #1
  4056e4:	e012      	b.n	40570c <hsmci_wait_end_of_read_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4056e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4056ec:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4056ee:	687a      	ldr	r2, [r7, #4]
  4056f0:	4b08      	ldr	r3, [pc, #32]	; (405714 <hsmci_wait_end_of_read_blocks+0x7c>)
  4056f2:	4013      	ands	r3, r2
  4056f4:	2b00      	cmp	r3, #0
  4056f6:	d003      	beq.n	405700 <hsmci_wait_end_of_read_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4056f8:	4b07      	ldr	r3, [pc, #28]	; (405718 <hsmci_wait_end_of_read_blocks+0x80>)
  4056fa:	4798      	blx	r3
			return false;
  4056fc:	2300      	movs	r3, #0
  4056fe:	e005      	b.n	40570c <hsmci_wait_end_of_read_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  405700:	687b      	ldr	r3, [r7, #4]
  405702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  405706:	2b00      	cmp	r3, #0
  405708:	d0ed      	beq.n	4056e6 <hsmci_wait_end_of_read_blocks+0x4e>
	return true;
  40570a:	2301      	movs	r3, #1
}
  40570c:	4618      	mov	r0, r3
  40570e:	3708      	adds	r7, #8
  405710:	46bd      	mov	sp, r7
  405712:	bd80      	pop	{r7, pc}
  405714:	c0600000 	.word	0xc0600000
  405718:	00404fcd 	.word	0x00404fcd
  40571c:	20003404 	.word	0x20003404
  405720:	20003406 	.word	0x20003406
  405724:	20003400 	.word	0x20003400

00405728 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  405728:	b480      	push	{r7}
  40572a:	b085      	sub	sp, #20
  40572c:	af00      	add	r7, sp, #0
  40572e:	6078      	str	r0, [r7, #4]
  405730:	460b      	mov	r3, r1
  405732:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  405734:	887b      	ldrh	r3, [r7, #2]
  405736:	4a26      	ldr	r2, [pc, #152]	; (4057d0 <hsmci_start_write_blocks+0xa8>)
  405738:	8812      	ldrh	r2, [r2, #0]
  40573a:	fb02 f303 	mul.w	r3, r2, r3
  40573e:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  405740:	687b      	ldr	r3, [r7, #4]
  405742:	f003 0303 	and.w	r3, r3, #3
  405746:	2b00      	cmp	r3, #0
  405748:	d105      	bne.n	405756 <hsmci_start_write_blocks+0x2e>
  40574a:	4b21      	ldr	r3, [pc, #132]	; (4057d0 <hsmci_start_write_blocks+0xa8>)
  40574c:	881b      	ldrh	r3, [r3, #0]
  40574e:	f003 0303 	and.w	r3, r3, #3
  405752:	2b00      	cmp	r3, #0
  405754:	d008      	beq.n	405768 <hsmci_start_write_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  405756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40575a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40575e:	6852      	ldr	r2, [r2, #4]
  405760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405764:	605a      	str	r2, [r3, #4]
  405766:	e007      	b.n	405778 <hsmci_start_write_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  405768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40576c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405770:	6852      	ldr	r2, [r2, #4]
  405772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405776:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  405778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40577c:	687a      	ldr	r2, [r7, #4]
  40577e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  405782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40578a:	685b      	ldr	r3, [r3, #4]
  40578c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  405790:	2b00      	cmp	r3, #0
  405792:	d102      	bne.n	40579a <hsmci_start_write_blocks+0x72>
  405794:	68fb      	ldr	r3, [r7, #12]
  405796:	089b      	lsrs	r3, r3, #2
  405798:	e000      	b.n	40579c <hsmci_start_write_blocks+0x74>
  40579a:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40579c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  4057a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4057a4:	2200      	movs	r2, #0
  4057a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  4057aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4057ae:	f44f 7280 	mov.w	r2, #256	; 0x100
  4057b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  4057b6:	4b07      	ldr	r3, [pc, #28]	; (4057d4 <hsmci_start_write_blocks+0xac>)
  4057b8:	681a      	ldr	r2, [r3, #0]
  4057ba:	68fb      	ldr	r3, [r7, #12]
  4057bc:	441a      	add	r2, r3
  4057be:	4b05      	ldr	r3, [pc, #20]	; (4057d4 <hsmci_start_write_blocks+0xac>)
  4057c0:	601a      	str	r2, [r3, #0]
	return true;
  4057c2:	2301      	movs	r3, #1
}
  4057c4:	4618      	mov	r0, r3
  4057c6:	3714      	adds	r7, #20
  4057c8:	46bd      	mov	sp, r7
  4057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057ce:	4770      	bx	lr
  4057d0:	20003404 	.word	0x20003404
  4057d4:	20003400 	.word	0x20003400

004057d8 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  4057d8:	b580      	push	{r7, lr}
  4057da:	b082      	sub	sp, #8
  4057dc:	af00      	add	r7, sp, #0
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4057de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4057e4:	607b      	str	r3, [r7, #4]
		if (sr &
  4057e6:	687a      	ldr	r2, [r7, #4]
  4057e8:	4b1a      	ldr	r3, [pc, #104]	; (405854 <hsmci_wait_end_of_write_blocks+0x7c>)
  4057ea:	4013      	ands	r3, r2
  4057ec:	2b00      	cmp	r3, #0
  4057ee:	d009      	beq.n	405804 <hsmci_wait_end_of_write_blocks+0x2c>
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4057f0:	4b19      	ldr	r3, [pc, #100]	; (405858 <hsmci_wait_end_of_write_blocks+0x80>)
  4057f2:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  4057f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4057f8:	f240 2202 	movw	r2, #514	; 0x202
  4057fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  405800:	2300      	movs	r3, #0
  405802:	e023      	b.n	40584c <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  405804:	687b      	ldr	r3, [r7, #4]
  405806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  40580a:	2b00      	cmp	r3, #0
  40580c:	d0e7      	beq.n	4057de <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  40580e:	4b13      	ldr	r3, [pc, #76]	; (40585c <hsmci_wait_end_of_write_blocks+0x84>)
  405810:	881b      	ldrh	r3, [r3, #0]
  405812:	4a13      	ldr	r2, [pc, #76]	; (405860 <hsmci_wait_end_of_write_blocks+0x88>)
  405814:	8812      	ldrh	r2, [r2, #0]
  405816:	fb02 f203 	mul.w	r2, r2, r3
  40581a:	4b12      	ldr	r3, [pc, #72]	; (405864 <hsmci_wait_end_of_write_blocks+0x8c>)
  40581c:	681b      	ldr	r3, [r3, #0]
  40581e:	429a      	cmp	r2, r3
  405820:	d901      	bls.n	405826 <hsmci_wait_end_of_write_blocks+0x4e>
		return true;
  405822:	2301      	movs	r3, #1
  405824:	e012      	b.n	40584c <hsmci_wait_end_of_write_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  405826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40582c:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40582e:	687a      	ldr	r2, [r7, #4]
  405830:	4b08      	ldr	r3, [pc, #32]	; (405854 <hsmci_wait_end_of_write_blocks+0x7c>)
  405832:	4013      	ands	r3, r2
  405834:	2b00      	cmp	r3, #0
  405836:	d003      	beq.n	405840 <hsmci_wait_end_of_write_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  405838:	4b07      	ldr	r3, [pc, #28]	; (405858 <hsmci_wait_end_of_write_blocks+0x80>)
  40583a:	4798      	blx	r3
			return false;
  40583c:	2300      	movs	r3, #0
  40583e:	e005      	b.n	40584c <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  405840:	687b      	ldr	r3, [r7, #4]
  405842:	f003 0320 	and.w	r3, r3, #32
  405846:	2b00      	cmp	r3, #0
  405848:	d0ed      	beq.n	405826 <hsmci_wait_end_of_write_blocks+0x4e>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  40584a:	2301      	movs	r3, #1
}
  40584c:	4618      	mov	r0, r3
  40584e:	3708      	adds	r7, #8
  405850:	46bd      	mov	sp, r7
  405852:	bd80      	pop	{r7, pc}
  405854:	c0600000 	.word	0xc0600000
  405858:	00404fcd 	.word	0x00404fcd
  40585c:	20003404 	.word	0x20003404
  405860:	20003406 	.word	0x20003406
  405864:	20003400 	.word	0x20003400

00405868 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  405868:	b480      	push	{r7}
  40586a:	b083      	sub	sp, #12
  40586c:	af00      	add	r7, sp, #0
  40586e:	6078      	str	r0, [r7, #4]
  405870:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  405872:	683a      	ldr	r2, [r7, #0]
  405874:	f240 2302 	movw	r3, #514	; 0x202
  405878:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40587a:	687a      	ldr	r2, [r7, #4]
  40587c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40587e:	370c      	adds	r7, #12
  405880:	46bd      	mov	sp, r7
  405882:	f85d 7b04 	ldr.w	r7, [sp], #4
  405886:	4770      	bx	lr

00405888 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  405888:	b480      	push	{r7}
  40588a:	b083      	sub	sp, #12
  40588c:	af00      	add	r7, sp, #0
  40588e:	6078      	str	r0, [r7, #4]
  405890:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  405892:	683b      	ldr	r3, [r7, #0]
  405894:	2b00      	cmp	r3, #0
  405896:	d006      	beq.n	4058a6 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  405898:	687b      	ldr	r3, [r7, #4]
  40589a:	685b      	ldr	r3, [r3, #4]
  40589c:	f043 0201 	orr.w	r2, r3, #1
  4058a0:	687b      	ldr	r3, [r7, #4]
  4058a2:	605a      	str	r2, [r3, #4]
  4058a4:	e005      	b.n	4058b2 <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4058a6:	687b      	ldr	r3, [r7, #4]
  4058a8:	685b      	ldr	r3, [r3, #4]
  4058aa:	f023 0201 	bic.w	r2, r3, #1
  4058ae:	687b      	ldr	r3, [r7, #4]
  4058b0:	605a      	str	r2, [r3, #4]
	}
}
  4058b2:	370c      	adds	r7, #12
  4058b4:	46bd      	mov	sp, r7
  4058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058ba:	4770      	bx	lr

004058bc <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4058bc:	b480      	push	{r7}
  4058be:	b087      	sub	sp, #28
  4058c0:	af00      	add	r7, sp, #0
  4058c2:	60f8      	str	r0, [r7, #12]
  4058c4:	60b9      	str	r1, [r7, #8]
  4058c6:	607a      	str	r2, [r7, #4]
  4058c8:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4058ca:	68fb      	ldr	r3, [r7, #12]
  4058cc:	689b      	ldr	r3, [r3, #8]
  4058ce:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  4058d0:	e002      	b.n	4058d8 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  4058d2:	68fb      	ldr	r3, [r7, #12]
  4058d4:	689b      	ldr	r3, [r3, #8]
  4058d6:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  4058d8:	68fb      	ldr	r3, [r7, #12]
  4058da:	689a      	ldr	r2, [r3, #8]
  4058dc:	697b      	ldr	r3, [r7, #20]
  4058de:	429a      	cmp	r2, r3
  4058e0:	d1f7      	bne.n	4058d2 <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  4058e2:	68bb      	ldr	r3, [r7, #8]
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	d01c      	beq.n	405922 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  4058e8:	697b      	ldr	r3, [r7, #20]
  4058ea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  4058ee:	0c1b      	lsrs	r3, r3, #16
  4058f0:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4058f2:	693b      	ldr	r3, [r7, #16]
  4058f4:	091a      	lsrs	r2, r3, #4
  4058f6:	4613      	mov	r3, r2
  4058f8:	009b      	lsls	r3, r3, #2
  4058fa:	4413      	add	r3, r2
  4058fc:	005b      	lsls	r3, r3, #1
  4058fe:	461a      	mov	r2, r3
  405900:	693b      	ldr	r3, [r7, #16]
  405902:	f003 030f 	and.w	r3, r3, #15
  405906:	441a      	add	r2, r3
  405908:	68bb      	ldr	r3, [r7, #8]
  40590a:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40590c:	697b      	ldr	r3, [r7, #20]
  40590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  405912:	2b00      	cmp	r3, #0
  405914:	d005      	beq.n	405922 <rtc_get_time+0x66>
			*pul_hour += 12;
  405916:	68bb      	ldr	r3, [r7, #8]
  405918:	681b      	ldr	r3, [r3, #0]
  40591a:	f103 020c 	add.w	r2, r3, #12
  40591e:	68bb      	ldr	r3, [r7, #8]
  405920:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  405922:	687b      	ldr	r3, [r7, #4]
  405924:	2b00      	cmp	r3, #0
  405926:	d011      	beq.n	40594c <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  405928:	697b      	ldr	r3, [r7, #20]
  40592a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  40592e:	0a1b      	lsrs	r3, r3, #8
  405930:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  405932:	693b      	ldr	r3, [r7, #16]
  405934:	091a      	lsrs	r2, r3, #4
  405936:	4613      	mov	r3, r2
  405938:	009b      	lsls	r3, r3, #2
  40593a:	4413      	add	r3, r2
  40593c:	005b      	lsls	r3, r3, #1
  40593e:	461a      	mov	r2, r3
  405940:	693b      	ldr	r3, [r7, #16]
  405942:	f003 030f 	and.w	r3, r3, #15
  405946:	441a      	add	r2, r3
  405948:	687b      	ldr	r3, [r7, #4]
  40594a:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  40594c:	683b      	ldr	r3, [r7, #0]
  40594e:	2b00      	cmp	r3, #0
  405950:	d010      	beq.n	405974 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  405952:	697b      	ldr	r3, [r7, #20]
  405954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405958:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40595a:	693b      	ldr	r3, [r7, #16]
  40595c:	091a      	lsrs	r2, r3, #4
  40595e:	4613      	mov	r3, r2
  405960:	009b      	lsls	r3, r3, #2
  405962:	4413      	add	r3, r2
  405964:	005b      	lsls	r3, r3, #1
  405966:	461a      	mov	r2, r3
  405968:	693b      	ldr	r3, [r7, #16]
  40596a:	f003 030f 	and.w	r3, r3, #15
  40596e:	441a      	add	r2, r3
  405970:	683b      	ldr	r3, [r7, #0]
  405972:	601a      	str	r2, [r3, #0]
	}
}
  405974:	371c      	adds	r7, #28
  405976:	46bd      	mov	sp, r7
  405978:	f85d 7b04 	ldr.w	r7, [sp], #4
  40597c:	4770      	bx	lr
  40597e:	bf00      	nop

00405980 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  405980:	b480      	push	{r7}
  405982:	b087      	sub	sp, #28
  405984:	af00      	add	r7, sp, #0
  405986:	60f8      	str	r0, [r7, #12]
  405988:	60b9      	str	r1, [r7, #8]
  40598a:	607a      	str	r2, [r7, #4]
  40598c:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  40598e:	2300      	movs	r3, #0
  405990:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  405992:	68fb      	ldr	r3, [r7, #12]
  405994:	685b      	ldr	r3, [r3, #4]
  405996:	f003 0301 	and.w	r3, r3, #1
  40599a:	2b00      	cmp	r3, #0
  40599c:	d009      	beq.n	4059b2 <rtc_set_time+0x32>
		if (ul_hour > 12) {
  40599e:	68bb      	ldr	r3, [r7, #8]
  4059a0:	2b0c      	cmp	r3, #12
  4059a2:	d906      	bls.n	4059b2 <rtc_set_time+0x32>
			ul_hour -= 12;
  4059a4:	68bb      	ldr	r3, [r7, #8]
  4059a6:	3b0c      	subs	r3, #12
  4059a8:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  4059aa:	697b      	ldr	r3, [r7, #20]
  4059ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4059b0:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4059b2:	68ba      	ldr	r2, [r7, #8]
  4059b4:	4b33      	ldr	r3, [pc, #204]	; (405a84 <rtc_set_time+0x104>)
  4059b6:	fba3 1302 	umull	r1, r3, r3, r2
  4059ba:	08db      	lsrs	r3, r3, #3
  4059bc:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4059be:	68b9      	ldr	r1, [r7, #8]
  4059c0:	4b30      	ldr	r3, [pc, #192]	; (405a84 <rtc_set_time+0x104>)
  4059c2:	fba3 2301 	umull	r2, r3, r3, r1
  4059c6:	08da      	lsrs	r2, r3, #3
  4059c8:	4613      	mov	r3, r2
  4059ca:	009b      	lsls	r3, r3, #2
  4059cc:	4413      	add	r3, r2
  4059ce:	005b      	lsls	r3, r3, #1
  4059d0:	1aca      	subs	r2, r1, r3
  4059d2:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4059d4:	4303      	orrs	r3, r0
  4059d6:	697a      	ldr	r2, [r7, #20]
  4059d8:	4313      	orrs	r3, r2
  4059da:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4059dc:	687a      	ldr	r2, [r7, #4]
  4059de:	4b29      	ldr	r3, [pc, #164]	; (405a84 <rtc_set_time+0x104>)
  4059e0:	fba3 1302 	umull	r1, r3, r3, r2
  4059e4:	08db      	lsrs	r3, r3, #3
  4059e6:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4059e8:	6879      	ldr	r1, [r7, #4]
  4059ea:	4b26      	ldr	r3, [pc, #152]	; (405a84 <rtc_set_time+0x104>)
  4059ec:	fba3 2301 	umull	r2, r3, r3, r1
  4059f0:	08da      	lsrs	r2, r3, #3
  4059f2:	4613      	mov	r3, r2
  4059f4:	009b      	lsls	r3, r3, #2
  4059f6:	4413      	add	r3, r2
  4059f8:	005b      	lsls	r3, r3, #1
  4059fa:	1aca      	subs	r2, r1, r3
  4059fc:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4059fe:	4303      	orrs	r3, r0
  405a00:	697a      	ldr	r2, [r7, #20]
  405a02:	4313      	orrs	r3, r2
  405a04:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  405a06:	683a      	ldr	r2, [r7, #0]
  405a08:	4b1e      	ldr	r3, [pc, #120]	; (405a84 <rtc_set_time+0x104>)
  405a0a:	fba3 1302 	umull	r1, r3, r3, r2
  405a0e:	08db      	lsrs	r3, r3, #3
  405a10:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  405a12:	6839      	ldr	r1, [r7, #0]
  405a14:	4b1b      	ldr	r3, [pc, #108]	; (405a84 <rtc_set_time+0x104>)
  405a16:	fba3 2301 	umull	r2, r3, r3, r1
  405a1a:	08da      	lsrs	r2, r3, #3
  405a1c:	4613      	mov	r3, r2
  405a1e:	009b      	lsls	r3, r3, #2
  405a20:	4413      	add	r3, r2
  405a22:	005b      	lsls	r3, r3, #1
  405a24:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  405a26:	ea40 0302 	orr.w	r3, r0, r2
  405a2a:	697a      	ldr	r2, [r7, #20]
  405a2c:	4313      	orrs	r3, r2
  405a2e:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  405a30:	68fb      	ldr	r3, [r7, #12]
  405a32:	681b      	ldr	r3, [r3, #0]
  405a34:	f043 0201 	orr.w	r2, r3, #1
  405a38:	68fb      	ldr	r3, [r7, #12]
  405a3a:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  405a3c:	bf00      	nop
  405a3e:	68fb      	ldr	r3, [r7, #12]
  405a40:	699b      	ldr	r3, [r3, #24]
  405a42:	f003 0301 	and.w	r3, r3, #1
  405a46:	2b00      	cmp	r3, #0
  405a48:	d0f9      	beq.n	405a3e <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  405a4a:	68fb      	ldr	r3, [r7, #12]
  405a4c:	2201      	movs	r2, #1
  405a4e:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  405a50:	68fb      	ldr	r3, [r7, #12]
  405a52:	697a      	ldr	r2, [r7, #20]
  405a54:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  405a56:	68fb      	ldr	r3, [r7, #12]
  405a58:	681b      	ldr	r3, [r3, #0]
  405a5a:	f023 0201 	bic.w	r2, r3, #1
  405a5e:	68fb      	ldr	r3, [r7, #12]
  405a60:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  405a62:	68fb      	ldr	r3, [r7, #12]
  405a64:	69db      	ldr	r3, [r3, #28]
  405a66:	f043 0204 	orr.w	r2, r3, #4
  405a6a:	68fb      	ldr	r3, [r7, #12]
  405a6c:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  405a6e:	68fb      	ldr	r3, [r7, #12]
  405a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405a72:	f003 0301 	and.w	r3, r3, #1
}
  405a76:	4618      	mov	r0, r3
  405a78:	371c      	adds	r7, #28
  405a7a:	46bd      	mov	sp, r7
  405a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a80:	4770      	bx	lr
  405a82:	bf00      	nop
  405a84:	cccccccd 	.word	0xcccccccd

00405a88 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  405a88:	b480      	push	{r7}
  405a8a:	b089      	sub	sp, #36	; 0x24
  405a8c:	af00      	add	r7, sp, #0
  405a8e:	60f8      	str	r0, [r7, #12]
  405a90:	60b9      	str	r1, [r7, #8]
  405a92:	607a      	str	r2, [r7, #4]
  405a94:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  405a96:	68fb      	ldr	r3, [r7, #12]
  405a98:	68db      	ldr	r3, [r3, #12]
  405a9a:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  405a9c:	e002      	b.n	405aa4 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  405a9e:	68fb      	ldr	r3, [r7, #12]
  405aa0:	68db      	ldr	r3, [r3, #12]
  405aa2:	61fb      	str	r3, [r7, #28]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  405aa4:	68fb      	ldr	r3, [r7, #12]
  405aa6:	68da      	ldr	r2, [r3, #12]
  405aa8:	69fb      	ldr	r3, [r7, #28]
  405aaa:	429a      	cmp	r2, r3
  405aac:	d1f7      	bne.n	405a9e <rtc_get_date+0x16>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  405aae:	68bb      	ldr	r3, [r7, #8]
  405ab0:	2b00      	cmp	r3, #0
  405ab2:	d025      	beq.n	405b00 <rtc_get_date+0x78>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  405ab4:	69fb      	ldr	r3, [r7, #28]
  405ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405aba:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405abc:	69bb      	ldr	r3, [r7, #24]
  405abe:	091a      	lsrs	r2, r3, #4
  405ac0:	4613      	mov	r3, r2
  405ac2:	009b      	lsls	r3, r3, #2
  405ac4:	4413      	add	r3, r2
  405ac6:	005b      	lsls	r3, r3, #1
  405ac8:	461a      	mov	r2, r3
  405aca:	69bb      	ldr	r3, [r7, #24]
  405acc:	f003 030f 	and.w	r3, r3, #15
  405ad0:	4413      	add	r3, r2
  405ad2:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  405ad4:	69fb      	ldr	r3, [r7, #28]
  405ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  405ada:	0a1b      	lsrs	r3, r3, #8
  405adc:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405ade:	697b      	ldr	r3, [r7, #20]
  405ae0:	2264      	movs	r2, #100	; 0x64
  405ae2:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405ae6:	69bb      	ldr	r3, [r7, #24]
  405ae8:	091a      	lsrs	r2, r3, #4
  405aea:	4613      	mov	r3, r2
  405aec:	009b      	lsls	r3, r3, #2
  405aee:	4413      	add	r3, r2
  405af0:	005b      	lsls	r3, r3, #1
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405af2:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405af4:	69bb      	ldr	r3, [r7, #24]
  405af6:	f003 030f 	and.w	r3, r3, #15
  405afa:	441a      	add	r2, r3
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405afc:	68bb      	ldr	r3, [r7, #8]
  405afe:	601a      	str	r2, [r3, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  405b00:	687b      	ldr	r3, [r7, #4]
  405b02:	2b00      	cmp	r3, #0
  405b04:	d011      	beq.n	405b2a <rtc_get_date+0xa2>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  405b06:	69fb      	ldr	r3, [r7, #28]
  405b08:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  405b0c:	0c1b      	lsrs	r3, r3, #16
  405b0e:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405b10:	69bb      	ldr	r3, [r7, #24]
  405b12:	091a      	lsrs	r2, r3, #4
  405b14:	4613      	mov	r3, r2
  405b16:	009b      	lsls	r3, r3, #2
  405b18:	4413      	add	r3, r2
  405b1a:	005b      	lsls	r3, r3, #1
  405b1c:	461a      	mov	r2, r3
  405b1e:	69bb      	ldr	r3, [r7, #24]
  405b20:	f003 030f 	and.w	r3, r3, #15
  405b24:	441a      	add	r2, r3
  405b26:	687b      	ldr	r3, [r7, #4]
  405b28:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  405b2a:	683b      	ldr	r3, [r7, #0]
  405b2c:	2b00      	cmp	r3, #0
  405b2e:	d011      	beq.n	405b54 <rtc_get_date+0xcc>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  405b30:	69fb      	ldr	r3, [r7, #28]
  405b32:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  405b36:	0e1b      	lsrs	r3, r3, #24
  405b38:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405b3a:	69bb      	ldr	r3, [r7, #24]
  405b3c:	091a      	lsrs	r2, r3, #4
  405b3e:	4613      	mov	r3, r2
  405b40:	009b      	lsls	r3, r3, #2
  405b42:	4413      	add	r3, r2
  405b44:	005b      	lsls	r3, r3, #1
  405b46:	461a      	mov	r2, r3
  405b48:	69bb      	ldr	r3, [r7, #24]
  405b4a:	f003 030f 	and.w	r3, r3, #15
  405b4e:	441a      	add	r2, r3
  405b50:	683b      	ldr	r3, [r7, #0]
  405b52:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  405b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405b56:	2b00      	cmp	r3, #0
  405b58:	d005      	beq.n	405b66 <rtc_get_date+0xde>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  405b5a:	69fb      	ldr	r3, [r7, #28]
  405b5c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
  405b60:	0d5a      	lsrs	r2, r3, #21
  405b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405b64:	601a      	str	r2, [r3, #0]
	}
}
  405b66:	3724      	adds	r7, #36	; 0x24
  405b68:	46bd      	mov	sp, r7
  405b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b6e:	4770      	bx	lr

00405b70 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  405b70:	b480      	push	{r7}
  405b72:	b087      	sub	sp, #28
  405b74:	af00      	add	r7, sp, #0
  405b76:	60f8      	str	r0, [r7, #12]
  405b78:	60b9      	str	r1, [r7, #8]
  405b7a:	607a      	str	r2, [r7, #4]
  405b7c:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  405b7e:	2300      	movs	r3, #0
  405b80:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  405b82:	68ba      	ldr	r2, [r7, #8]
  405b84:	4b46      	ldr	r3, [pc, #280]	; (405ca0 <rtc_set_date+0x130>)
  405b86:	fba3 1302 	umull	r1, r3, r3, r2
  405b8a:	099b      	lsrs	r3, r3, #6
  405b8c:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  405b8e:	68ba      	ldr	r2, [r7, #8]
  405b90:	4b44      	ldr	r3, [pc, #272]	; (405ca4 <rtc_set_date+0x134>)
  405b92:	fba3 1302 	umull	r1, r3, r3, r2
  405b96:	0959      	lsrs	r1, r3, #5
  405b98:	4b43      	ldr	r3, [pc, #268]	; (405ca8 <rtc_set_date+0x138>)
  405b9a:	fba3 2301 	umull	r2, r3, r3, r1
  405b9e:	08da      	lsrs	r2, r3, #3
  405ba0:	4613      	mov	r3, r2
  405ba2:	009b      	lsls	r3, r3, #2
  405ba4:	4413      	add	r3, r2
  405ba6:	005b      	lsls	r3, r3, #1
  405ba8:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  405baa:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  405bae:	697a      	ldr	r2, [r7, #20]
  405bb0:	4313      	orrs	r3, r2
  405bb2:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  405bb4:	68ba      	ldr	r2, [r7, #8]
  405bb6:	4b3c      	ldr	r3, [pc, #240]	; (405ca8 <rtc_set_date+0x138>)
  405bb8:	fba3 1302 	umull	r1, r3, r3, r2
  405bbc:	08d9      	lsrs	r1, r3, #3
  405bbe:	4b3a      	ldr	r3, [pc, #232]	; (405ca8 <rtc_set_date+0x138>)
  405bc0:	fba3 2301 	umull	r2, r3, r3, r1
  405bc4:	08da      	lsrs	r2, r3, #3
  405bc6:	4613      	mov	r3, r2
  405bc8:	009b      	lsls	r3, r3, #2
  405bca:	4413      	add	r3, r2
  405bcc:	005b      	lsls	r3, r3, #1
  405bce:	1aca      	subs	r2, r1, r3
  405bd0:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  405bd2:	68b9      	ldr	r1, [r7, #8]
  405bd4:	4b34      	ldr	r3, [pc, #208]	; (405ca8 <rtc_set_date+0x138>)
  405bd6:	fba3 2301 	umull	r2, r3, r3, r1
  405bda:	08da      	lsrs	r2, r3, #3
  405bdc:	4613      	mov	r3, r2
  405bde:	009b      	lsls	r3, r3, #2
  405be0:	4413      	add	r3, r2
  405be2:	005b      	lsls	r3, r3, #1
  405be4:	1aca      	subs	r2, r1, r3
  405be6:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  405be8:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  405bea:	697a      	ldr	r2, [r7, #20]
  405bec:	4313      	orrs	r3, r2
  405bee:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  405bf0:	687a      	ldr	r2, [r7, #4]
  405bf2:	4b2d      	ldr	r3, [pc, #180]	; (405ca8 <rtc_set_date+0x138>)
  405bf4:	fba3 1302 	umull	r1, r3, r3, r2
  405bf8:	08db      	lsrs	r3, r3, #3
  405bfa:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  405bfc:	6879      	ldr	r1, [r7, #4]
  405bfe:	4b2a      	ldr	r3, [pc, #168]	; (405ca8 <rtc_set_date+0x138>)
  405c00:	fba3 2301 	umull	r2, r3, r3, r1
  405c04:	08da      	lsrs	r2, r3, #3
  405c06:	4613      	mov	r3, r2
  405c08:	009b      	lsls	r3, r3, #2
  405c0a:	4413      	add	r3, r2
  405c0c:	005b      	lsls	r3, r3, #1
  405c0e:	1aca      	subs	r2, r1, r3
  405c10:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  405c12:	4303      	orrs	r3, r0
  405c14:	697a      	ldr	r2, [r7, #20]
  405c16:	4313      	orrs	r3, r2
  405c18:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  405c1a:	6a3b      	ldr	r3, [r7, #32]
  405c1c:	055b      	lsls	r3, r3, #21
  405c1e:	697a      	ldr	r2, [r7, #20]
  405c20:	4313      	orrs	r3, r2
  405c22:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  405c24:	683a      	ldr	r2, [r7, #0]
  405c26:	4b20      	ldr	r3, [pc, #128]	; (405ca8 <rtc_set_date+0x138>)
  405c28:	fba3 1302 	umull	r1, r3, r3, r2
  405c2c:	08db      	lsrs	r3, r3, #3
  405c2e:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  405c30:	6839      	ldr	r1, [r7, #0]
  405c32:	4b1d      	ldr	r3, [pc, #116]	; (405ca8 <rtc_set_date+0x138>)
  405c34:	fba3 2301 	umull	r2, r3, r3, r1
  405c38:	08da      	lsrs	r2, r3, #3
  405c3a:	4613      	mov	r3, r2
  405c3c:	009b      	lsls	r3, r3, #2
  405c3e:	4413      	add	r3, r2
  405c40:	005b      	lsls	r3, r3, #1
  405c42:	1aca      	subs	r2, r1, r3
  405c44:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  405c46:	4303      	orrs	r3, r0
  405c48:	697a      	ldr	r2, [r7, #20]
  405c4a:	4313      	orrs	r3, r2
  405c4c:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  405c4e:	68fb      	ldr	r3, [r7, #12]
  405c50:	681b      	ldr	r3, [r3, #0]
  405c52:	f043 0202 	orr.w	r2, r3, #2
  405c56:	68fb      	ldr	r3, [r7, #12]
  405c58:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  405c5a:	bf00      	nop
  405c5c:	68fb      	ldr	r3, [r7, #12]
  405c5e:	699b      	ldr	r3, [r3, #24]
  405c60:	f003 0301 	and.w	r3, r3, #1
  405c64:	2b00      	cmp	r3, #0
  405c66:	d0f9      	beq.n	405c5c <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  405c68:	68fb      	ldr	r3, [r7, #12]
  405c6a:	2201      	movs	r2, #1
  405c6c:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  405c6e:	68fb      	ldr	r3, [r7, #12]
  405c70:	697a      	ldr	r2, [r7, #20]
  405c72:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  405c74:	68fb      	ldr	r3, [r7, #12]
  405c76:	681b      	ldr	r3, [r3, #0]
  405c78:	f023 0202 	bic.w	r2, r3, #2
  405c7c:	68fb      	ldr	r3, [r7, #12]
  405c7e:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  405c80:	68fb      	ldr	r3, [r7, #12]
  405c82:	69db      	ldr	r3, [r3, #28]
  405c84:	f043 0204 	orr.w	r2, r3, #4
  405c88:	68fb      	ldr	r3, [r7, #12]
  405c8a:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  405c8c:	68fb      	ldr	r3, [r7, #12]
  405c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405c90:	f003 0302 	and.w	r3, r3, #2
}
  405c94:	4618      	mov	r0, r3
  405c96:	371c      	adds	r7, #28
  405c98:	46bd      	mov	sp, r7
  405c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c9e:	4770      	bx	lr
  405ca0:	10624dd3 	.word	0x10624dd3
  405ca4:	51eb851f 	.word	0x51eb851f
  405ca8:	cccccccd 	.word	0xcccccccd

00405cac <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  405cac:	b480      	push	{r7}
  405cae:	b083      	sub	sp, #12
  405cb0:	af00      	add	r7, sp, #0
  405cb2:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  405cb4:	687b      	ldr	r3, [r7, #4]
  405cb6:	2200      	movs	r2, #0
  405cb8:	611a      	str	r2, [r3, #16]
}
  405cba:	370c      	adds	r7, #12
  405cbc:	46bd      	mov	sp, r7
  405cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cc2:	4770      	bx	lr

00405cc4 <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  405cc4:	b480      	push	{r7}
  405cc6:	b083      	sub	sp, #12
  405cc8:	af00      	add	r7, sp, #0
  405cca:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  405ccc:	687b      	ldr	r3, [r7, #4]
  405cce:	4a03      	ldr	r2, [pc, #12]	; (405cdc <rtc_clear_date_alarm+0x18>)
  405cd0:	615a      	str	r2, [r3, #20]
}
  405cd2:	370c      	adds	r7, #12
  405cd4:	46bd      	mov	sp, r7
  405cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cda:	4770      	bx	lr
  405cdc:	01010000 	.word	0x01010000

00405ce0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  405ce0:	b480      	push	{r7}
  405ce2:	b085      	sub	sp, #20
  405ce4:	af00      	add	r7, sp, #0
  405ce6:	6078      	str	r0, [r7, #4]
  405ce8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  405cea:	2300      	movs	r3, #0
  405cec:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  405cee:	687b      	ldr	r3, [r7, #4]
  405cf0:	22ac      	movs	r2, #172	; 0xac
  405cf2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  405cf4:	683b      	ldr	r3, [r7, #0]
  405cf6:	681a      	ldr	r2, [r3, #0]
  405cf8:	683b      	ldr	r3, [r7, #0]
  405cfa:	685b      	ldr	r3, [r3, #4]
  405cfc:	fbb2 f3f3 	udiv	r3, r2, r3
  405d00:	091b      	lsrs	r3, r3, #4
  405d02:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  405d04:	68fb      	ldr	r3, [r7, #12]
  405d06:	2b00      	cmp	r3, #0
  405d08:	d003      	beq.n	405d12 <uart_init+0x32>
  405d0a:	68fb      	ldr	r3, [r7, #12]
  405d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  405d10:	d301      	bcc.n	405d16 <uart_init+0x36>
		return 1;
  405d12:	2301      	movs	r3, #1
  405d14:	e00f      	b.n	405d36 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  405d16:	687b      	ldr	r3, [r7, #4]
  405d18:	68fa      	ldr	r2, [r7, #12]
  405d1a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  405d1c:	683b      	ldr	r3, [r7, #0]
  405d1e:	689a      	ldr	r2, [r3, #8]
  405d20:	687b      	ldr	r3, [r7, #4]
  405d22:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  405d24:	687b      	ldr	r3, [r7, #4]
  405d26:	f240 2202 	movw	r2, #514	; 0x202
  405d2a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405d2e:	687b      	ldr	r3, [r7, #4]
  405d30:	2250      	movs	r2, #80	; 0x50
  405d32:	601a      	str	r2, [r3, #0]

	return 0;
  405d34:	2300      	movs	r3, #0
}
  405d36:	4618      	mov	r0, r3
  405d38:	3714      	adds	r7, #20
  405d3a:	46bd      	mov	sp, r7
  405d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d40:	4770      	bx	lr
  405d42:	bf00      	nop

00405d44 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  405d44:	b480      	push	{r7}
  405d46:	b083      	sub	sp, #12
  405d48:	af00      	add	r7, sp, #0
  405d4a:	6078      	str	r0, [r7, #4]
  405d4c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  405d4e:	687b      	ldr	r3, [r7, #4]
  405d50:	683a      	ldr	r2, [r7, #0]
  405d52:	60da      	str	r2, [r3, #12]
}
  405d54:	370c      	adds	r7, #12
  405d56:	46bd      	mov	sp, r7
  405d58:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d5c:	4770      	bx	lr
  405d5e:	bf00      	nop

00405d60 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  405d60:	b480      	push	{r7}
  405d62:	b083      	sub	sp, #12
  405d64:	af00      	add	r7, sp, #0
  405d66:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  405d68:	687b      	ldr	r3, [r7, #4]
  405d6a:	695b      	ldr	r3, [r3, #20]
}
  405d6c:	4618      	mov	r0, r3
  405d6e:	370c      	adds	r7, #12
  405d70:	46bd      	mov	sp, r7
  405d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d76:	4770      	bx	lr

00405d78 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  405d78:	b480      	push	{r7}
  405d7a:	b083      	sub	sp, #12
  405d7c:	af00      	add	r7, sp, #0
  405d7e:	6078      	str	r0, [r7, #4]
  405d80:	460b      	mov	r3, r1
  405d82:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405d84:	687b      	ldr	r3, [r7, #4]
  405d86:	695b      	ldr	r3, [r3, #20]
  405d88:	f003 0302 	and.w	r3, r3, #2
  405d8c:	2b00      	cmp	r3, #0
  405d8e:	d101      	bne.n	405d94 <uart_write+0x1c>
		return 1;
  405d90:	2301      	movs	r3, #1
  405d92:	e003      	b.n	405d9c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  405d94:	78fa      	ldrb	r2, [r7, #3]
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	61da      	str	r2, [r3, #28]
	return 0;
  405d9a:	2300      	movs	r3, #0
}
  405d9c:	4618      	mov	r0, r3
  405d9e:	370c      	adds	r7, #12
  405da0:	46bd      	mov	sp, r7
  405da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405da6:	4770      	bx	lr

00405da8 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  405da8:	b480      	push	{r7}
  405daa:	b083      	sub	sp, #12
  405dac:	af00      	add	r7, sp, #0
  405dae:	6078      	str	r0, [r7, #4]
  405db0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405db2:	687b      	ldr	r3, [r7, #4]
  405db4:	695b      	ldr	r3, [r3, #20]
  405db6:	f003 0301 	and.w	r3, r3, #1
  405dba:	2b00      	cmp	r3, #0
  405dbc:	d101      	bne.n	405dc2 <uart_read+0x1a>
		return 1;
  405dbe:	2301      	movs	r3, #1
  405dc0:	e005      	b.n	405dce <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405dc2:	687b      	ldr	r3, [r7, #4]
  405dc4:	699b      	ldr	r3, [r3, #24]
  405dc6:	b2da      	uxtb	r2, r3
  405dc8:	683b      	ldr	r3, [r7, #0]
  405dca:	701a      	strb	r2, [r3, #0]
	return 0;
  405dcc:	2300      	movs	r3, #0
}
  405dce:	4618      	mov	r0, r3
  405dd0:	370c      	adds	r7, #12
  405dd2:	46bd      	mov	sp, r7
  405dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dd8:	4770      	bx	lr
  405dda:	bf00      	nop

00405ddc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  405ddc:	b480      	push	{r7}
  405dde:	b089      	sub	sp, #36	; 0x24
  405de0:	af00      	add	r7, sp, #0
  405de2:	60f8      	str	r0, [r7, #12]
  405de4:	60b9      	str	r1, [r7, #8]
  405de6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  405de8:	68bb      	ldr	r3, [r7, #8]
  405dea:	011a      	lsls	r2, r3, #4
  405dec:	687b      	ldr	r3, [r7, #4]
  405dee:	429a      	cmp	r2, r3
  405df0:	d802      	bhi.n	405df8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  405df2:	2310      	movs	r3, #16
  405df4:	61fb      	str	r3, [r7, #28]
  405df6:	e001      	b.n	405dfc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  405df8:	2308      	movs	r3, #8
  405dfa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405dfc:	687b      	ldr	r3, [r7, #4]
  405dfe:	00da      	lsls	r2, r3, #3
  405e00:	69fb      	ldr	r3, [r7, #28]
  405e02:	68b9      	ldr	r1, [r7, #8]
  405e04:	fb01 f303 	mul.w	r3, r1, r3
  405e08:	085b      	lsrs	r3, r3, #1
  405e0a:	441a      	add	r2, r3
  405e0c:	69fb      	ldr	r3, [r7, #28]
  405e0e:	68b9      	ldr	r1, [r7, #8]
  405e10:	fb01 f303 	mul.w	r3, r1, r3
  405e14:	fbb2 f3f3 	udiv	r3, r2, r3
  405e18:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  405e1a:	69bb      	ldr	r3, [r7, #24]
  405e1c:	08db      	lsrs	r3, r3, #3
  405e1e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  405e20:	69bb      	ldr	r3, [r7, #24]
  405e22:	f003 0307 	and.w	r3, r3, #7
  405e26:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405e28:	697b      	ldr	r3, [r7, #20]
  405e2a:	2b00      	cmp	r3, #0
  405e2c:	d003      	beq.n	405e36 <usart_set_async_baudrate+0x5a>
  405e2e:	697b      	ldr	r3, [r7, #20]
  405e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  405e34:	d301      	bcc.n	405e3a <usart_set_async_baudrate+0x5e>
		return 1;
  405e36:	2301      	movs	r3, #1
  405e38:	e00f      	b.n	405e5a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  405e3a:	69fb      	ldr	r3, [r7, #28]
  405e3c:	2b08      	cmp	r3, #8
  405e3e:	d105      	bne.n	405e4c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  405e40:	68fb      	ldr	r3, [r7, #12]
  405e42:	685b      	ldr	r3, [r3, #4]
  405e44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  405e48:	68fb      	ldr	r3, [r7, #12]
  405e4a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405e4c:	693b      	ldr	r3, [r7, #16]
  405e4e:	041a      	lsls	r2, r3, #16
  405e50:	697b      	ldr	r3, [r7, #20]
  405e52:	431a      	orrs	r2, r3
  405e54:	68fb      	ldr	r3, [r7, #12]
  405e56:	621a      	str	r2, [r3, #32]

	return 0;
  405e58:	2300      	movs	r3, #0
}
  405e5a:	4618      	mov	r0, r3
  405e5c:	3724      	adds	r7, #36	; 0x24
  405e5e:	46bd      	mov	sp, r7
  405e60:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e64:	4770      	bx	lr
  405e66:	bf00      	nop

00405e68 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  405e68:	b580      	push	{r7, lr}
  405e6a:	b082      	sub	sp, #8
  405e6c:	af00      	add	r7, sp, #0
  405e6e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  405e70:	6878      	ldr	r0, [r7, #4]
  405e72:	4b0e      	ldr	r3, [pc, #56]	; (405eac <usart_reset+0x44>)
  405e74:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  405e76:	687b      	ldr	r3, [r7, #4]
  405e78:	2200      	movs	r2, #0
  405e7a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  405e7c:	687b      	ldr	r3, [r7, #4]
  405e7e:	2200      	movs	r2, #0
  405e80:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405e82:	687b      	ldr	r3, [r7, #4]
  405e84:	2200      	movs	r2, #0
  405e86:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  405e88:	6878      	ldr	r0, [r7, #4]
  405e8a:	4b09      	ldr	r3, [pc, #36]	; (405eb0 <usart_reset+0x48>)
  405e8c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  405e8e:	6878      	ldr	r0, [r7, #4]
  405e90:	4b08      	ldr	r3, [pc, #32]	; (405eb4 <usart_reset+0x4c>)
  405e92:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  405e94:	6878      	ldr	r0, [r7, #4]
  405e96:	4b08      	ldr	r3, [pc, #32]	; (405eb8 <usart_reset+0x50>)
  405e98:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  405e9a:	6878      	ldr	r0, [r7, #4]
  405e9c:	4b07      	ldr	r3, [pc, #28]	; (405ebc <usart_reset+0x54>)
  405e9e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  405ea0:	6878      	ldr	r0, [r7, #4]
  405ea2:	4b07      	ldr	r3, [pc, #28]	; (405ec0 <usart_reset+0x58>)
  405ea4:	4798      	blx	r3
#endif
}
  405ea6:	3708      	adds	r7, #8
  405ea8:	46bd      	mov	sp, r7
  405eaa:	bd80      	pop	{r7, pc}
  405eac:	004060d1 	.word	0x004060d1
  405eb0:	00405f61 	.word	0x00405f61
  405eb4:	00405f91 	.word	0x00405f91
  405eb8:	00405fe1 	.word	0x00405fe1
  405ebc:	00406019 	.word	0x00406019
  405ec0:	00405ffd 	.word	0x00405ffd

00405ec4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  405ec4:	b580      	push	{r7, lr}
  405ec6:	b084      	sub	sp, #16
  405ec8:	af00      	add	r7, sp, #0
  405eca:	60f8      	str	r0, [r7, #12]
  405ecc:	60b9      	str	r1, [r7, #8]
  405ece:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  405ed0:	68f8      	ldr	r0, [r7, #12]
  405ed2:	4b1a      	ldr	r3, [pc, #104]	; (405f3c <usart_init_rs232+0x78>)
  405ed4:	4798      	blx	r3

	ul_reg_val = 0;
  405ed6:	4b1a      	ldr	r3, [pc, #104]	; (405f40 <usart_init_rs232+0x7c>)
  405ed8:	2200      	movs	r2, #0
  405eda:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405edc:	68bb      	ldr	r3, [r7, #8]
  405ede:	2b00      	cmp	r3, #0
  405ee0:	d009      	beq.n	405ef6 <usart_init_rs232+0x32>
  405ee2:	68bb      	ldr	r3, [r7, #8]
  405ee4:	681b      	ldr	r3, [r3, #0]
  405ee6:	68f8      	ldr	r0, [r7, #12]
  405ee8:	4619      	mov	r1, r3
  405eea:	687a      	ldr	r2, [r7, #4]
  405eec:	4b15      	ldr	r3, [pc, #84]	; (405f44 <usart_init_rs232+0x80>)
  405eee:	4798      	blx	r3
  405ef0:	4603      	mov	r3, r0
  405ef2:	2b00      	cmp	r3, #0
  405ef4:	d001      	beq.n	405efa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  405ef6:	2301      	movs	r3, #1
  405ef8:	e01b      	b.n	405f32 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405efa:	68bb      	ldr	r3, [r7, #8]
  405efc:	685a      	ldr	r2, [r3, #4]
  405efe:	68bb      	ldr	r3, [r7, #8]
  405f00:	689b      	ldr	r3, [r3, #8]
  405f02:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405f04:	68bb      	ldr	r3, [r7, #8]
  405f06:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405f08:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405f0a:	68bb      	ldr	r3, [r7, #8]
  405f0c:	68db      	ldr	r3, [r3, #12]
  405f0e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405f10:	4b0b      	ldr	r3, [pc, #44]	; (405f40 <usart_init_rs232+0x7c>)
  405f12:	681b      	ldr	r3, [r3, #0]
  405f14:	431a      	orrs	r2, r3
  405f16:	4b0a      	ldr	r3, [pc, #40]	; (405f40 <usart_init_rs232+0x7c>)
  405f18:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  405f1a:	4b09      	ldr	r3, [pc, #36]	; (405f40 <usart_init_rs232+0x7c>)
  405f1c:	681a      	ldr	r2, [r3, #0]
  405f1e:	4b08      	ldr	r3, [pc, #32]	; (405f40 <usart_init_rs232+0x7c>)
  405f20:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  405f22:	68fb      	ldr	r3, [r7, #12]
  405f24:	685a      	ldr	r2, [r3, #4]
  405f26:	4b06      	ldr	r3, [pc, #24]	; (405f40 <usart_init_rs232+0x7c>)
  405f28:	681b      	ldr	r3, [r3, #0]
  405f2a:	431a      	orrs	r2, r3
  405f2c:	68fb      	ldr	r3, [r7, #12]
  405f2e:	605a      	str	r2, [r3, #4]

	return 0;
  405f30:	2300      	movs	r3, #0
}
  405f32:	4618      	mov	r0, r3
  405f34:	3710      	adds	r7, #16
  405f36:	46bd      	mov	sp, r7
  405f38:	bd80      	pop	{r7, pc}
  405f3a:	bf00      	nop
  405f3c:	00405e69 	.word	0x00405e69
  405f40:	20003408 	.word	0x20003408
  405f44:	00405ddd 	.word	0x00405ddd

00405f48 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  405f48:	b480      	push	{r7}
  405f4a:	b083      	sub	sp, #12
  405f4c:	af00      	add	r7, sp, #0
  405f4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  405f50:	687b      	ldr	r3, [r7, #4]
  405f52:	2240      	movs	r2, #64	; 0x40
  405f54:	601a      	str	r2, [r3, #0]
}
  405f56:	370c      	adds	r7, #12
  405f58:	46bd      	mov	sp, r7
  405f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f5e:	4770      	bx	lr

00405f60 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  405f60:	b480      	push	{r7}
  405f62:	b083      	sub	sp, #12
  405f64:	af00      	add	r7, sp, #0
  405f66:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405f68:	687b      	ldr	r3, [r7, #4]
  405f6a:	2288      	movs	r2, #136	; 0x88
  405f6c:	601a      	str	r2, [r3, #0]
}
  405f6e:	370c      	adds	r7, #12
  405f70:	46bd      	mov	sp, r7
  405f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f76:	4770      	bx	lr

00405f78 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  405f78:	b480      	push	{r7}
  405f7a:	b083      	sub	sp, #12
  405f7c:	af00      	add	r7, sp, #0
  405f7e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  405f80:	687b      	ldr	r3, [r7, #4]
  405f82:	2210      	movs	r2, #16
  405f84:	601a      	str	r2, [r3, #0]
}
  405f86:	370c      	adds	r7, #12
  405f88:	46bd      	mov	sp, r7
  405f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f8e:	4770      	bx	lr

00405f90 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  405f90:	b480      	push	{r7}
  405f92:	b083      	sub	sp, #12
  405f94:	af00      	add	r7, sp, #0
  405f96:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  405f98:	687b      	ldr	r3, [r7, #4]
  405f9a:	2224      	movs	r2, #36	; 0x24
  405f9c:	601a      	str	r2, [r3, #0]
}
  405f9e:	370c      	adds	r7, #12
  405fa0:	46bd      	mov	sp, r7
  405fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fa6:	4770      	bx	lr

00405fa8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  405fa8:	b480      	push	{r7}
  405faa:	b083      	sub	sp, #12
  405fac:	af00      	add	r7, sp, #0
  405fae:	6078      	str	r0, [r7, #4]
  405fb0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  405fb2:	687b      	ldr	r3, [r7, #4]
  405fb4:	683a      	ldr	r2, [r7, #0]
  405fb6:	609a      	str	r2, [r3, #8]
}
  405fb8:	370c      	adds	r7, #12
  405fba:	46bd      	mov	sp, r7
  405fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fc0:	4770      	bx	lr
  405fc2:	bf00      	nop

00405fc4 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  405fc4:	b480      	push	{r7}
  405fc6:	b083      	sub	sp, #12
  405fc8:	af00      	add	r7, sp, #0
  405fca:	6078      	str	r0, [r7, #4]
  405fcc:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  405fce:	687b      	ldr	r3, [r7, #4]
  405fd0:	683a      	ldr	r2, [r7, #0]
  405fd2:	60da      	str	r2, [r3, #12]
}
  405fd4:	370c      	adds	r7, #12
  405fd6:	46bd      	mov	sp, r7
  405fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fdc:	4770      	bx	lr
  405fde:	bf00      	nop

00405fe0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  405fe0:	b480      	push	{r7}
  405fe2:	b083      	sub	sp, #12
  405fe4:	af00      	add	r7, sp, #0
  405fe6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  405fe8:	687b      	ldr	r3, [r7, #4]
  405fea:	f44f 7280 	mov.w	r2, #256	; 0x100
  405fee:	601a      	str	r2, [r3, #0]
}
  405ff0:	370c      	adds	r7, #12
  405ff2:	46bd      	mov	sp, r7
  405ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ff8:	4770      	bx	lr
  405ffa:	bf00      	nop

00405ffc <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  405ffc:	b480      	push	{r7}
  405ffe:	b083      	sub	sp, #12
  406000:	af00      	add	r7, sp, #0
  406002:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  406004:	687b      	ldr	r3, [r7, #4]
  406006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40600a:	601a      	str	r2, [r3, #0]
}
  40600c:	370c      	adds	r7, #12
  40600e:	46bd      	mov	sp, r7
  406010:	f85d 7b04 	ldr.w	r7, [sp], #4
  406014:	4770      	bx	lr
  406016:	bf00      	nop

00406018 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  406018:	b480      	push	{r7}
  40601a:	b083      	sub	sp, #12
  40601c:	af00      	add	r7, sp, #0
  40601e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  406020:	687b      	ldr	r3, [r7, #4]
  406022:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406026:	601a      	str	r2, [r3, #0]
}
  406028:	370c      	adds	r7, #12
  40602a:	46bd      	mov	sp, r7
  40602c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406030:	4770      	bx	lr
  406032:	bf00      	nop

00406034 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  406034:	b480      	push	{r7}
  406036:	b083      	sub	sp, #12
  406038:	af00      	add	r7, sp, #0
  40603a:	6078      	str	r0, [r7, #4]
  40603c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40603e:	687b      	ldr	r3, [r7, #4]
  406040:	695b      	ldr	r3, [r3, #20]
  406042:	f003 0302 	and.w	r3, r3, #2
  406046:	2b00      	cmp	r3, #0
  406048:	d101      	bne.n	40604e <usart_write+0x1a>
		return 1;
  40604a:	2301      	movs	r3, #1
  40604c:	e005      	b.n	40605a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40604e:	683b      	ldr	r3, [r7, #0]
  406050:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406054:	687b      	ldr	r3, [r7, #4]
  406056:	61da      	str	r2, [r3, #28]
	return 0;
  406058:	2300      	movs	r3, #0
}
  40605a:	4618      	mov	r0, r3
  40605c:	370c      	adds	r7, #12
  40605e:	46bd      	mov	sp, r7
  406060:	f85d 7b04 	ldr.w	r7, [sp], #4
  406064:	4770      	bx	lr
  406066:	bf00      	nop

00406068 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  406068:	b480      	push	{r7}
  40606a:	b083      	sub	sp, #12
  40606c:	af00      	add	r7, sp, #0
  40606e:	6078      	str	r0, [r7, #4]
  406070:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406072:	687b      	ldr	r3, [r7, #4]
  406074:	695b      	ldr	r3, [r3, #20]
  406076:	f003 0301 	and.w	r3, r3, #1
  40607a:	2b00      	cmp	r3, #0
  40607c:	d101      	bne.n	406082 <usart_read+0x1a>
		return 1;
  40607e:	2301      	movs	r3, #1
  406080:	e006      	b.n	406090 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406082:	687b      	ldr	r3, [r7, #4]
  406084:	699b      	ldr	r3, [r3, #24]
  406086:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40608a:	683b      	ldr	r3, [r7, #0]
  40608c:	601a      	str	r2, [r3, #0]

	return 0;
  40608e:	2300      	movs	r3, #0
}
  406090:	4618      	mov	r0, r3
  406092:	370c      	adds	r7, #12
  406094:	46bd      	mov	sp, r7
  406096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40609a:	4770      	bx	lr

0040609c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  40609c:	b480      	push	{r7}
  40609e:	b083      	sub	sp, #12
  4060a0:	af00      	add	r7, sp, #0
  4060a2:	6078      	str	r0, [r7, #4]
  4060a4:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4060a6:	bf00      	nop
  4060a8:	687b      	ldr	r3, [r7, #4]
  4060aa:	695b      	ldr	r3, [r3, #20]
  4060ac:	f003 0301 	and.w	r3, r3, #1
  4060b0:	2b00      	cmp	r3, #0
  4060b2:	d0f9      	beq.n	4060a8 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4060b4:	687b      	ldr	r3, [r7, #4]
  4060b6:	699b      	ldr	r3, [r3, #24]
  4060b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4060bc:	683b      	ldr	r3, [r7, #0]
  4060be:	601a      	str	r2, [r3, #0]

	return 0;
  4060c0:	2300      	movs	r3, #0
}
  4060c2:	4618      	mov	r0, r3
  4060c4:	370c      	adds	r7, #12
  4060c6:	46bd      	mov	sp, r7
  4060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060cc:	4770      	bx	lr
  4060ce:	bf00      	nop

004060d0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4060d0:	b480      	push	{r7}
  4060d2:	b083      	sub	sp, #12
  4060d4:	af00      	add	r7, sp, #0
  4060d6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4060d8:	687b      	ldr	r3, [r7, #4]
  4060da:	4a04      	ldr	r2, [pc, #16]	; (4060ec <usart_disable_writeprotect+0x1c>)
  4060dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4060e0:	370c      	adds	r7, #12
  4060e2:	46bd      	mov	sp, r7
  4060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060e8:	4770      	bx	lr
  4060ea:	bf00      	nop
  4060ec:	55534100 	.word	0x55534100

004060f0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  4060f0:	b580      	push	{r7, lr}
  4060f2:	b084      	sub	sp, #16
  4060f4:	af00      	add	r7, sp, #0
  4060f6:	4603      	mov	r3, r0
  4060f8:	71fb      	strb	r3, [r7, #7]
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  4060fa:	4817      	ldr	r0, [pc, #92]	; (406158 <disk_initialize+0x68>)
  4060fc:	2100      	movs	r1, #0
  4060fe:	4b17      	ldr	r3, [pc, #92]	; (40615c <disk_initialize+0x6c>)
  406100:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  406102:	79fb      	ldrb	r3, [r7, #7]
  406104:	2b02      	cmp	r3, #2
  406106:	d901      	bls.n	40610c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  406108:	2301      	movs	r3, #1
  40610a:	e021      	b.n	406150 <disk_initialize+0x60>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  40610c:	2300      	movs	r3, #0
  40610e:	60fb      	str	r3, [r7, #12]
  406110:	e00c      	b.n	40612c <disk_initialize+0x3c>
		mem_status = mem_test_unit_ready(drv);
  406112:	79fb      	ldrb	r3, [r7, #7]
  406114:	4618      	mov	r0, r3
  406116:	4b12      	ldr	r3, [pc, #72]	; (406160 <disk_initialize+0x70>)
  406118:	4798      	blx	r3
  40611a:	4603      	mov	r3, r0
  40611c:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
  40611e:	7afb      	ldrb	r3, [r7, #11]
  406120:	2b03      	cmp	r3, #3
  406122:	d000      	beq.n	406126 <disk_initialize+0x36>
			break;
  406124:	e005      	b.n	406132 <disk_initialize+0x42>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  406126:	68fb      	ldr	r3, [r7, #12]
  406128:	3301      	adds	r3, #1
  40612a:	60fb      	str	r3, [r7, #12]
  40612c:	68fb      	ldr	r3, [r7, #12]
  40612e:	2b01      	cmp	r3, #1
  406130:	ddef      	ble.n	406112 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  406132:	7afb      	ldrb	r3, [r7, #11]
  406134:	2b00      	cmp	r3, #0
  406136:	d001      	beq.n	40613c <disk_initialize+0x4c>
		return STA_NOINIT;
  406138:	2301      	movs	r3, #1
  40613a:	e009      	b.n	406150 <disk_initialize+0x60>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  40613c:	79fb      	ldrb	r3, [r7, #7]
  40613e:	4618      	mov	r0, r3
  406140:	4b08      	ldr	r3, [pc, #32]	; (406164 <disk_initialize+0x74>)
  406142:	4798      	blx	r3
  406144:	4603      	mov	r3, r0
  406146:	2b00      	cmp	r3, #0
  406148:	d001      	beq.n	40614e <disk_initialize+0x5e>
		return STA_PROTECT;
  40614a:	2304      	movs	r3, #4
  40614c:	e000      	b.n	406150 <disk_initialize+0x60>
	}

	/* The memory should already be initialized */
	return 0;
  40614e:	2300      	movs	r3, #0
}
  406150:	4618      	mov	r0, r3
  406152:	3710      	adds	r7, #16
  406154:	46bd      	mov	sp, r7
  406156:	bd80      	pop	{r7, pc}
  406158:	400e1460 	.word	0x400e1460
  40615c:	00405889 	.word	0x00405889
  406160:	00404d15 	.word	0x00404d15
  406164:	00404da9 	.word	0x00404da9

00406168 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  406168:	b580      	push	{r7, lr}
  40616a:	b082      	sub	sp, #8
  40616c:	af00      	add	r7, sp, #0
  40616e:	4603      	mov	r3, r0
  406170:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
  406172:	79fb      	ldrb	r3, [r7, #7]
  406174:	4618      	mov	r0, r3
  406176:	4b08      	ldr	r3, [pc, #32]	; (406198 <disk_status+0x30>)
  406178:	4798      	blx	r3
  40617a:	4603      	mov	r3, r0
  40617c:	2b00      	cmp	r3, #0
  40617e:	d002      	beq.n	406186 <disk_status+0x1e>
  406180:	2b02      	cmp	r3, #2
  406182:	d002      	beq.n	40618a <disk_status+0x22>
  406184:	e003      	b.n	40618e <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
  406186:	2300      	movs	r3, #0
  406188:	e002      	b.n	406190 <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
  40618a:	2303      	movs	r3, #3
  40618c:	e000      	b.n	406190 <disk_status+0x28>
	default:
		return STA_NOINIT;
  40618e:	2301      	movs	r3, #1
	}
}
  406190:	4618      	mov	r0, r3
  406192:	3708      	adds	r7, #8
  406194:	46bd      	mov	sp, r7
  406196:	bd80      	pop	{r7, pc}
  406198:	00404d15 	.word	0x00404d15

0040619c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  40619c:	b580      	push	{r7, lr}
  40619e:	b088      	sub	sp, #32
  4061a0:	af00      	add	r7, sp, #0
  4061a2:	60b9      	str	r1, [r7, #8]
  4061a4:	607a      	str	r2, [r7, #4]
  4061a6:	4602      	mov	r2, r0
  4061a8:	73fa      	strb	r2, [r7, #15]
  4061aa:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4061ac:	7bfb      	ldrb	r3, [r7, #15]
  4061ae:	4618      	mov	r0, r3
  4061b0:	4b23      	ldr	r3, [pc, #140]	; (406240 <disk_read+0xa4>)
  4061b2:	4798      	blx	r3
  4061b4:	4603      	mov	r3, r0
  4061b6:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4061b8:	7efb      	ldrb	r3, [r7, #27]
  4061ba:	2b00      	cmp	r3, #0
  4061bc:	d101      	bne.n	4061c2 <disk_read+0x26>
		return RES_ERROR;
  4061be:	2301      	movs	r3, #1
  4061c0:	e039      	b.n	406236 <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  4061c2:	7bfa      	ldrb	r2, [r7, #15]
  4061c4:	f107 0314 	add.w	r3, r7, #20
  4061c8:	4610      	mov	r0, r2
  4061ca:	4619      	mov	r1, r3
  4061cc:	4b1d      	ldr	r3, [pc, #116]	; (406244 <disk_read+0xa8>)
  4061ce:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  4061d0:	7bbb      	ldrb	r3, [r7, #14]
  4061d2:	7efa      	ldrb	r2, [r7, #27]
  4061d4:	fb02 f303 	mul.w	r3, r2, r3
  4061d8:	461a      	mov	r2, r3
  4061da:	687b      	ldr	r3, [r7, #4]
  4061dc:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4061de:	697b      	ldr	r3, [r7, #20]
  4061e0:	3301      	adds	r3, #1
  4061e2:	7ef9      	ldrb	r1, [r7, #27]
  4061e4:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4061e8:	429a      	cmp	r2, r3
  4061ea:	d901      	bls.n	4061f0 <disk_read+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4061ec:	2304      	movs	r3, #4
  4061ee:	e022      	b.n	406236 <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4061f0:	2300      	movs	r3, #0
  4061f2:	61fb      	str	r3, [r7, #28]
  4061f4:	e01a      	b.n	40622c <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4061f6:	7efb      	ldrb	r3, [r7, #27]
  4061f8:	69fa      	ldr	r2, [r7, #28]
  4061fa:	fb02 f203 	mul.w	r2, r2, r3
  4061fe:	687b      	ldr	r3, [r7, #4]
  406200:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  406202:	7efb      	ldrb	r3, [r7, #27]
  406204:	69f9      	ldr	r1, [r7, #28]
  406206:	fb01 f303 	mul.w	r3, r1, r3
  40620a:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40620c:	68b9      	ldr	r1, [r7, #8]
  40620e:	440b      	add	r3, r1
  406210:	7bf9      	ldrb	r1, [r7, #15]
  406212:	4608      	mov	r0, r1
  406214:	4611      	mov	r1, r2
  406216:	461a      	mov	r2, r3
  406218:	4b0b      	ldr	r3, [pc, #44]	; (406248 <disk_read+0xac>)
  40621a:	4798      	blx	r3
  40621c:	4603      	mov	r3, r0
  40621e:	2b00      	cmp	r3, #0
  406220:	d001      	beq.n	406226 <disk_read+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  406222:	2301      	movs	r3, #1
  406224:	e007      	b.n	406236 <disk_read+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  406226:	69fb      	ldr	r3, [r7, #28]
  406228:	3301      	adds	r3, #1
  40622a:	61fb      	str	r3, [r7, #28]
  40622c:	7bba      	ldrb	r2, [r7, #14]
  40622e:	69fb      	ldr	r3, [r7, #28]
  406230:	429a      	cmp	r2, r3
  406232:	d8e0      	bhi.n	4061f6 <disk_read+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  406234:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  406236:	4618      	mov	r0, r3
  406238:	3720      	adds	r7, #32
  40623a:	46bd      	mov	sp, r7
  40623c:	bd80      	pop	{r7, pc}
  40623e:	bf00      	nop
  406240:	00404d81 	.word	0x00404d81
  406244:	00404d49 	.word	0x00404d49
  406248:	00404de5 	.word	0x00404de5

0040624c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  40624c:	b580      	push	{r7, lr}
  40624e:	b088      	sub	sp, #32
  406250:	af00      	add	r7, sp, #0
  406252:	60b9      	str	r1, [r7, #8]
  406254:	607a      	str	r2, [r7, #4]
  406256:	4602      	mov	r2, r0
  406258:	73fa      	strb	r2, [r7, #15]
  40625a:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40625c:	7bfb      	ldrb	r3, [r7, #15]
  40625e:	4618      	mov	r0, r3
  406260:	4b23      	ldr	r3, [pc, #140]	; (4062f0 <disk_write+0xa4>)
  406262:	4798      	blx	r3
  406264:	4603      	mov	r3, r0
  406266:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  406268:	7efb      	ldrb	r3, [r7, #27]
  40626a:	2b00      	cmp	r3, #0
  40626c:	d101      	bne.n	406272 <disk_write+0x26>
		return RES_ERROR;
  40626e:	2301      	movs	r3, #1
  406270:	e039      	b.n	4062e6 <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  406272:	7bfa      	ldrb	r2, [r7, #15]
  406274:	f107 0314 	add.w	r3, r7, #20
  406278:	4610      	mov	r0, r2
  40627a:	4619      	mov	r1, r3
  40627c:	4b1d      	ldr	r3, [pc, #116]	; (4062f4 <disk_write+0xa8>)
  40627e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  406280:	7bbb      	ldrb	r3, [r7, #14]
  406282:	7efa      	ldrb	r2, [r7, #27]
  406284:	fb02 f303 	mul.w	r3, r2, r3
  406288:	461a      	mov	r2, r3
  40628a:	687b      	ldr	r3, [r7, #4]
  40628c:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40628e:	697b      	ldr	r3, [r7, #20]
  406290:	3301      	adds	r3, #1
  406292:	7ef9      	ldrb	r1, [r7, #27]
  406294:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  406298:	429a      	cmp	r2, r3
  40629a:	d901      	bls.n	4062a0 <disk_write+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40629c:	2304      	movs	r3, #4
  40629e:	e022      	b.n	4062e6 <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4062a0:	2300      	movs	r3, #0
  4062a2:	61fb      	str	r3, [r7, #28]
  4062a4:	e01a      	b.n	4062dc <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4062a6:	7efb      	ldrb	r3, [r7, #27]
  4062a8:	69fa      	ldr	r2, [r7, #28]
  4062aa:	fb02 f203 	mul.w	r2, r2, r3
  4062ae:	687b      	ldr	r3, [r7, #4]
  4062b0:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  4062b2:	7efb      	ldrb	r3, [r7, #27]
  4062b4:	69f9      	ldr	r1, [r7, #28]
  4062b6:	fb01 f303 	mul.w	r3, r1, r3
  4062ba:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4062bc:	68b9      	ldr	r1, [r7, #8]
  4062be:	440b      	add	r3, r1
  4062c0:	7bf9      	ldrb	r1, [r7, #15]
  4062c2:	4608      	mov	r0, r1
  4062c4:	4611      	mov	r1, r2
  4062c6:	461a      	mov	r2, r3
  4062c8:	4b0b      	ldr	r3, [pc, #44]	; (4062f8 <disk_write+0xac>)
  4062ca:	4798      	blx	r3
  4062cc:	4603      	mov	r3, r0
  4062ce:	2b00      	cmp	r3, #0
  4062d0:	d001      	beq.n	4062d6 <disk_write+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  4062d2:	2301      	movs	r3, #1
  4062d4:	e007      	b.n	4062e6 <disk_write+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4062d6:	69fb      	ldr	r3, [r7, #28]
  4062d8:	3301      	adds	r3, #1
  4062da:	61fb      	str	r3, [r7, #28]
  4062dc:	7bba      	ldrb	r2, [r7, #14]
  4062de:	69fb      	ldr	r3, [r7, #28]
  4062e0:	429a      	cmp	r2, r3
  4062e2:	d8e0      	bhi.n	4062a6 <disk_write+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  4062e4:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  4062e6:	4618      	mov	r0, r3
  4062e8:	3720      	adds	r7, #32
  4062ea:	46bd      	mov	sp, r7
  4062ec:	bd80      	pop	{r7, pc}
  4062ee:	bf00      	nop
  4062f0:	00404d81 	.word	0x00404d81
  4062f4:	00404d49 	.word	0x00404d49
  4062f8:	00404e21 	.word	0x00404e21

004062fc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4062fc:	b580      	push	{r7, lr}
  4062fe:	b084      	sub	sp, #16
  406300:	af00      	add	r7, sp, #0
  406302:	460b      	mov	r3, r1
  406304:	603a      	str	r2, [r7, #0]
  406306:	4602      	mov	r2, r0
  406308:	71fa      	strb	r2, [r7, #7]
  40630a:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
  40630c:	2304      	movs	r3, #4
  40630e:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
  406310:	79bb      	ldrb	r3, [r7, #6]
  406312:	2b03      	cmp	r3, #3
  406314:	d845      	bhi.n	4063a2 <disk_ioctl+0xa6>
  406316:	a201      	add	r2, pc, #4	; (adr r2, 40631c <disk_ioctl+0x20>)
  406318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40631c:	00406389 	.word	0x00406389
  406320:	00406339 	.word	0x00406339
  406324:	00406355 	.word	0x00406355
  406328:	0040632d 	.word	0x0040632d
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  40632c:	683b      	ldr	r3, [r7, #0]
  40632e:	2201      	movs	r2, #1
  406330:	601a      	str	r2, [r3, #0]
		res = RES_OK;
  406332:	2300      	movs	r3, #0
  406334:	73fb      	strb	r3, [r7, #15]
		break;
  406336:	e036      	b.n	4063a6 <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  406338:	79fa      	ldrb	r2, [r7, #7]
  40633a:	f107 0308 	add.w	r3, r7, #8
  40633e:	4610      	mov	r0, r2
  406340:	4619      	mov	r1, r3
  406342:	4b1b      	ldr	r3, [pc, #108]	; (4063b0 <disk_ioctl+0xb4>)
  406344:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  406346:	68bb      	ldr	r3, [r7, #8]
  406348:	1c5a      	adds	r2, r3, #1
  40634a:	683b      	ldr	r3, [r7, #0]
  40634c:	601a      	str	r2, [r3, #0]

		res = RES_OK;
  40634e:	2300      	movs	r3, #0
  406350:	73fb      	strb	r3, [r7, #15]
	}
	break;
  406352:	e028      	b.n	4063a6 <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  406354:	79fb      	ldrb	r3, [r7, #7]
  406356:	4618      	mov	r0, r3
  406358:	4b16      	ldr	r3, [pc, #88]	; (4063b4 <disk_ioctl+0xb8>)
  40635a:	4798      	blx	r3
  40635c:	4603      	mov	r3, r0
  40635e:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  406360:	7bbb      	ldrb	r3, [r7, #14]
  406362:	2b01      	cmp	r3, #1
  406364:	d00a      	beq.n	40637c <disk_ioctl+0x80>
  406366:	7bbb      	ldrb	r3, [r7, #14]
  406368:	2b02      	cmp	r3, #2
  40636a:	d007      	beq.n	40637c <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  40636c:	7bbb      	ldrb	r3, [r7, #14]
  40636e:	2b04      	cmp	r3, #4
  406370:	d004      	beq.n	40637c <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  406372:	7bbb      	ldrb	r3, [r7, #14]
  406374:	2b08      	cmp	r3, #8
  406376:	d001      	beq.n	40637c <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  406378:	2301      	movs	r3, #1
  40637a:	e015      	b.n	4063a8 <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40637c:	683b      	ldr	r3, [r7, #0]
  40637e:	2200      	movs	r2, #0
  406380:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
  406382:	2300      	movs	r3, #0
  406384:	73fb      	strb	r3, [r7, #15]
	}
	break;
  406386:	e00e      	b.n	4063a6 <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  406388:	79fb      	ldrb	r3, [r7, #7]
  40638a:	4618      	mov	r0, r3
  40638c:	4b0a      	ldr	r3, [pc, #40]	; (4063b8 <disk_ioctl+0xbc>)
  40638e:	4798      	blx	r3
  406390:	4603      	mov	r3, r0
  406392:	2b00      	cmp	r3, #0
  406394:	d102      	bne.n	40639c <disk_ioctl+0xa0>
			res = RES_OK;
  406396:	2300      	movs	r3, #0
  406398:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
  40639a:	e004      	b.n	4063a6 <disk_ioctl+0xaa>
	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
  40639c:	2303      	movs	r3, #3
  40639e:	73fb      	strb	r3, [r7, #15]
		}
		break;
  4063a0:	e001      	b.n	4063a6 <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
  4063a2:	2304      	movs	r3, #4
  4063a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  4063a6:	7bfb      	ldrb	r3, [r7, #15]
}
  4063a8:	4618      	mov	r0, r3
  4063aa:	3710      	adds	r7, #16
  4063ac:	46bd      	mov	sp, r7
  4063ae:	bd80      	pop	{r7, pc}
  4063b0:	00404d49 	.word	0x00404d49
  4063b4:	00404d81 	.word	0x00404d81
  4063b8:	00404d15 	.word	0x00404d15

004063bc <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  4063bc:	b590      	push	{r4, r7, lr}
  4063be:	b08b      	sub	sp, #44	; 0x2c
  4063c0:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  4063c2:	f107 0118 	add.w	r1, r7, #24
  4063c6:	f107 0214 	add.w	r2, r7, #20
  4063ca:	f107 0310 	add.w	r3, r7, #16
  4063ce:	4812      	ldr	r0, [pc, #72]	; (406418 <get_fattime+0x5c>)
  4063d0:	4c12      	ldr	r4, [pc, #72]	; (40641c <get_fattime+0x60>)
  4063d2:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  4063d4:	f107 010c 	add.w	r1, r7, #12
  4063d8:	f107 0208 	add.w	r2, r7, #8
  4063dc:	1d3b      	adds	r3, r7, #4
  4063de:	4638      	mov	r0, r7
  4063e0:	9000      	str	r0, [sp, #0]
  4063e2:	480d      	ldr	r0, [pc, #52]	; (406418 <get_fattime+0x5c>)
  4063e4:	4c0e      	ldr	r4, [pc, #56]	; (406420 <get_fattime+0x64>)
  4063e6:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  4063e8:	68fb      	ldr	r3, [r7, #12]
  4063ea:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
  4063ee:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
  4063f0:	68bb      	ldr	r3, [r7, #8]
  4063f2:	055b      	lsls	r3, r3, #21
  4063f4:	431a      	orrs	r2, r3
			| (ul_day << 16)
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	041b      	lsls	r3, r3, #16
  4063fa:	431a      	orrs	r2, r3
			| (ul_hour << 11)
  4063fc:	69bb      	ldr	r3, [r7, #24]
  4063fe:	02db      	lsls	r3, r3, #11
  406400:	431a      	orrs	r2, r3
			| (ul_minute << 5)
  406402:	697b      	ldr	r3, [r7, #20]
  406404:	015b      	lsls	r3, r3, #5
  406406:	431a      	orrs	r2, r3
			| (ul_second << 0);
  406408:	693b      	ldr	r3, [r7, #16]

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  40640a:	4313      	orrs	r3, r2
  40640c:	61fb      	str	r3, [r7, #28]
			| (ul_day << 16)
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
  40640e:	69fb      	ldr	r3, [r7, #28]
}
  406410:	4618      	mov	r0, r3
  406412:	3724      	adds	r7, #36	; 0x24
  406414:	46bd      	mov	sp, r7
  406416:	bd90      	pop	{r4, r7, pc}
  406418:	400e1460 	.word	0x400e1460
  40641c:	004058bd 	.word	0x004058bd
  406420:	00405a89 	.word	0x00405a89

00406424 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  406424:	b480      	push	{r7}
  406426:	b087      	sub	sp, #28
  406428:	af00      	add	r7, sp, #0
  40642a:	60f8      	str	r0, [r7, #12]
  40642c:	60b9      	str	r1, [r7, #8]
  40642e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  406430:	68fb      	ldr	r3, [r7, #12]
  406432:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
  406434:	68bb      	ldr	r3, [r7, #8]
  406436:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  406438:	e007      	b.n	40644a <mem_cpy+0x26>
		*d++ = *s++;
  40643a:	697b      	ldr	r3, [r7, #20]
  40643c:	1c5a      	adds	r2, r3, #1
  40643e:	617a      	str	r2, [r7, #20]
  406440:	693a      	ldr	r2, [r7, #16]
  406442:	1c51      	adds	r1, r2, #1
  406444:	6139      	str	r1, [r7, #16]
  406446:	7812      	ldrb	r2, [r2, #0]
  406448:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	1e5a      	subs	r2, r3, #1
  40644e:	607a      	str	r2, [r7, #4]
  406450:	2b00      	cmp	r3, #0
  406452:	d1f2      	bne.n	40643a <mem_cpy+0x16>
		*d++ = *s++;
}
  406454:	371c      	adds	r7, #28
  406456:	46bd      	mov	sp, r7
  406458:	f85d 7b04 	ldr.w	r7, [sp], #4
  40645c:	4770      	bx	lr
  40645e:	bf00      	nop

00406460 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  406460:	b480      	push	{r7}
  406462:	b087      	sub	sp, #28
  406464:	af00      	add	r7, sp, #0
  406466:	60f8      	str	r0, [r7, #12]
  406468:	60b9      	str	r1, [r7, #8]
  40646a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  40646c:	68fb      	ldr	r3, [r7, #12]
  40646e:	617b      	str	r3, [r7, #20]

	while (cnt--)
  406470:	e005      	b.n	40647e <mem_set+0x1e>
		*d++ = (BYTE)val;
  406472:	697b      	ldr	r3, [r7, #20]
  406474:	1c5a      	adds	r2, r3, #1
  406476:	617a      	str	r2, [r7, #20]
  406478:	68ba      	ldr	r2, [r7, #8]
  40647a:	b2d2      	uxtb	r2, r2
  40647c:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  40647e:	687b      	ldr	r3, [r7, #4]
  406480:	1e5a      	subs	r2, r3, #1
  406482:	607a      	str	r2, [r7, #4]
  406484:	2b00      	cmp	r3, #0
  406486:	d1f4      	bne.n	406472 <mem_set+0x12>
		*d++ = (BYTE)val;
}
  406488:	371c      	adds	r7, #28
  40648a:	46bd      	mov	sp, r7
  40648c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406490:	4770      	bx	lr
  406492:	bf00      	nop

00406494 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
  406494:	b480      	push	{r7}
  406496:	b089      	sub	sp, #36	; 0x24
  406498:	af00      	add	r7, sp, #0
  40649a:	60f8      	str	r0, [r7, #12]
  40649c:	60b9      	str	r1, [r7, #8]
  40649e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4064a0:	68fb      	ldr	r3, [r7, #12]
  4064a2:	61fb      	str	r3, [r7, #28]
  4064a4:	68bb      	ldr	r3, [r7, #8]
  4064a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
  4064a8:	2300      	movs	r3, #0
  4064aa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4064ac:	bf00      	nop
  4064ae:	687b      	ldr	r3, [r7, #4]
  4064b0:	1e5a      	subs	r2, r3, #1
  4064b2:	607a      	str	r2, [r7, #4]
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	d00d      	beq.n	4064d4 <mem_cmp+0x40>
  4064b8:	69fb      	ldr	r3, [r7, #28]
  4064ba:	1c5a      	adds	r2, r3, #1
  4064bc:	61fa      	str	r2, [r7, #28]
  4064be:	781b      	ldrb	r3, [r3, #0]
  4064c0:	461a      	mov	r2, r3
  4064c2:	69bb      	ldr	r3, [r7, #24]
  4064c4:	1c59      	adds	r1, r3, #1
  4064c6:	61b9      	str	r1, [r7, #24]
  4064c8:	781b      	ldrb	r3, [r3, #0]
  4064ca:	1ad3      	subs	r3, r2, r3
  4064cc:	617b      	str	r3, [r7, #20]
  4064ce:	697b      	ldr	r3, [r7, #20]
  4064d0:	2b00      	cmp	r3, #0
  4064d2:	d0ec      	beq.n	4064ae <mem_cmp+0x1a>
	return r;
  4064d4:	697b      	ldr	r3, [r7, #20]
}
  4064d6:	4618      	mov	r0, r3
  4064d8:	3724      	adds	r7, #36	; 0x24
  4064da:	46bd      	mov	sp, r7
  4064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064e0:	4770      	bx	lr
  4064e2:	bf00      	nop

004064e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  4064e4:	b480      	push	{r7}
  4064e6:	b083      	sub	sp, #12
  4064e8:	af00      	add	r7, sp, #0
  4064ea:	6078      	str	r0, [r7, #4]
  4064ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
  4064ee:	e002      	b.n	4064f6 <chk_chr+0x12>
  4064f0:	687b      	ldr	r3, [r7, #4]
  4064f2:	3301      	adds	r3, #1
  4064f4:	607b      	str	r3, [r7, #4]
  4064f6:	687b      	ldr	r3, [r7, #4]
  4064f8:	781b      	ldrb	r3, [r3, #0]
  4064fa:	2b00      	cmp	r3, #0
  4064fc:	d005      	beq.n	40650a <chk_chr+0x26>
  4064fe:	687b      	ldr	r3, [r7, #4]
  406500:	781b      	ldrb	r3, [r3, #0]
  406502:	461a      	mov	r2, r3
  406504:	683b      	ldr	r3, [r7, #0]
  406506:	429a      	cmp	r2, r3
  406508:	d1f2      	bne.n	4064f0 <chk_chr+0xc>
	return *str;
  40650a:	687b      	ldr	r3, [r7, #4]
  40650c:	781b      	ldrb	r3, [r3, #0]
}
  40650e:	4618      	mov	r0, r3
  406510:	370c      	adds	r7, #12
  406512:	46bd      	mov	sp, r7
  406514:	f85d 7b04 	ldr.w	r7, [sp], #4
  406518:	4770      	bx	lr
  40651a:	bf00      	nop

0040651c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dj,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
  40651c:	b480      	push	{r7}
  40651e:	b085      	sub	sp, #20
  406520:	af00      	add	r7, sp, #0
  406522:	6078      	str	r0, [r7, #4]
  406524:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  406526:	2300      	movs	r3, #0
  406528:	60bb      	str	r3, [r7, #8]
  40652a:	68bb      	ldr	r3, [r7, #8]
  40652c:	60fb      	str	r3, [r7, #12]
  40652e:	e035      	b.n	40659c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
  406530:	492e      	ldr	r1, [pc, #184]	; (4065ec <chk_lock+0xd0>)
  406532:	68fa      	ldr	r2, [r7, #12]
  406534:	4613      	mov	r3, r2
  406536:	005b      	lsls	r3, r3, #1
  406538:	4413      	add	r3, r2
  40653a:	009b      	lsls	r3, r3, #2
  40653c:	440b      	add	r3, r1
  40653e:	681b      	ldr	r3, [r3, #0]
  406540:	2b00      	cmp	r3, #0
  406542:	d025      	beq.n	406590 <chk_lock+0x74>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  406544:	4929      	ldr	r1, [pc, #164]	; (4065ec <chk_lock+0xd0>)
  406546:	68fa      	ldr	r2, [r7, #12]
  406548:	4613      	mov	r3, r2
  40654a:	005b      	lsls	r3, r3, #1
  40654c:	4413      	add	r3, r2
  40654e:	009b      	lsls	r3, r3, #2
  406550:	440b      	add	r3, r1
  406552:	681a      	ldr	r2, [r3, #0]
  406554:	687b      	ldr	r3, [r7, #4]
  406556:	681b      	ldr	r3, [r3, #0]
  406558:	429a      	cmp	r2, r3
  40655a:	d11c      	bne.n	406596 <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
  40655c:	4923      	ldr	r1, [pc, #140]	; (4065ec <chk_lock+0xd0>)
  40655e:	68fa      	ldr	r2, [r7, #12]
  406560:	4613      	mov	r3, r2
  406562:	005b      	lsls	r3, r3, #1
  406564:	4413      	add	r3, r2
  406566:	009b      	lsls	r3, r3, #2
  406568:	440b      	add	r3, r1
  40656a:	685a      	ldr	r2, [r3, #4]
  40656c:	687b      	ldr	r3, [r7, #4]
  40656e:	689b      	ldr	r3, [r3, #8]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  406570:	429a      	cmp	r2, r3
  406572:	d110      	bne.n	406596 <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
				Files[i].idx == dj->index) break;
  406574:	491d      	ldr	r1, [pc, #116]	; (4065ec <chk_lock+0xd0>)
  406576:	68fa      	ldr	r2, [r7, #12]
  406578:	4613      	mov	r3, r2
  40657a:	005b      	lsls	r3, r3, #1
  40657c:	4413      	add	r3, r2
  40657e:	009b      	lsls	r3, r3, #2
  406580:	440b      	add	r3, r1
  406582:	3308      	adds	r3, #8
  406584:	881a      	ldrh	r2, [r3, #0]
  406586:	687b      	ldr	r3, [r7, #4]
  406588:	88db      	ldrh	r3, [r3, #6]

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
				Files[i].clu == dj->sclust &&
  40658a:	429a      	cmp	r2, r3
  40658c:	d103      	bne.n	406596 <chk_lock+0x7a>
				Files[i].idx == dj->index) break;
  40658e:	e008      	b.n	4065a2 <chk_lock+0x86>
		} else {			/* Blank entry */
			be++;
  406590:	68bb      	ldr	r3, [r7, #8]
  406592:	3301      	adds	r3, #1
  406594:	60bb      	str	r3, [r7, #8]
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  406596:	68fb      	ldr	r3, [r7, #12]
  406598:	3301      	adds	r3, #1
  40659a:	60fb      	str	r3, [r7, #12]
  40659c:	68fb      	ldr	r3, [r7, #12]
  40659e:	2b02      	cmp	r3, #2
  4065a0:	d9c6      	bls.n	406530 <chk_lock+0x14>
				Files[i].idx == dj->index) break;
		} else {			/* Blank entry */
			be++;
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
  4065a2:	68fb      	ldr	r3, [r7, #12]
  4065a4:	2b03      	cmp	r3, #3
  4065a6:	d109      	bne.n	4065bc <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
  4065a8:	68bb      	ldr	r3, [r7, #8]
  4065aa:	2b00      	cmp	r3, #0
  4065ac:	d102      	bne.n	4065b4 <chk_lock+0x98>
  4065ae:	683b      	ldr	r3, [r7, #0]
  4065b0:	2b02      	cmp	r3, #2
  4065b2:	d101      	bne.n	4065b8 <chk_lock+0x9c>
  4065b4:	2300      	movs	r3, #0
  4065b6:	e013      	b.n	4065e0 <chk_lock+0xc4>
  4065b8:	2312      	movs	r3, #18
  4065ba:	e011      	b.n	4065e0 <chk_lock+0xc4>

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
  4065bc:	683b      	ldr	r3, [r7, #0]
  4065be:	2b00      	cmp	r3, #0
  4065c0:	d10b      	bne.n	4065da <chk_lock+0xbe>
  4065c2:	490a      	ldr	r1, [pc, #40]	; (4065ec <chk_lock+0xd0>)
  4065c4:	68fa      	ldr	r2, [r7, #12]
  4065c6:	4613      	mov	r3, r2
  4065c8:	005b      	lsls	r3, r3, #1
  4065ca:	4413      	add	r3, r2
  4065cc:	009b      	lsls	r3, r3, #2
  4065ce:	440b      	add	r3, r1
  4065d0:	3308      	adds	r3, #8
  4065d2:	885b      	ldrh	r3, [r3, #2]
  4065d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4065d8:	d101      	bne.n	4065de <chk_lock+0xc2>
  4065da:	2310      	movs	r3, #16
  4065dc:	e000      	b.n	4065e0 <chk_lock+0xc4>
  4065de:	2300      	movs	r3, #0
}
  4065e0:	4618      	mov	r0, r3
  4065e2:	3714      	adds	r7, #20
  4065e4:	46bd      	mov	sp, r7
  4065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065ea:	4770      	bx	lr
  4065ec:	20003414 	.word	0x20003414

004065f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new file */
{
  4065f0:	b480      	push	{r7}
  4065f2:	b083      	sub	sp, #12
  4065f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  4065f6:	2300      	movs	r3, #0
  4065f8:	607b      	str	r3, [r7, #4]
  4065fa:	e002      	b.n	406602 <enq_lock+0x12>
  4065fc:	687b      	ldr	r3, [r7, #4]
  4065fe:	3301      	adds	r3, #1
  406600:	607b      	str	r3, [r7, #4]
  406602:	687b      	ldr	r3, [r7, #4]
  406604:	2b02      	cmp	r3, #2
  406606:	d809      	bhi.n	40661c <enq_lock+0x2c>
  406608:	490a      	ldr	r1, [pc, #40]	; (406634 <enq_lock+0x44>)
  40660a:	687a      	ldr	r2, [r7, #4]
  40660c:	4613      	mov	r3, r2
  40660e:	005b      	lsls	r3, r3, #1
  406610:	4413      	add	r3, r2
  406612:	009b      	lsls	r3, r3, #2
  406614:	440b      	add	r3, r1
  406616:	681b      	ldr	r3, [r3, #0]
  406618:	2b00      	cmp	r3, #0
  40661a:	d1ef      	bne.n	4065fc <enq_lock+0xc>
	return (i == _FS_SHARE) ? 0 : 1;
  40661c:	687b      	ldr	r3, [r7, #4]
  40661e:	2b03      	cmp	r3, #3
  406620:	bf0c      	ite	eq
  406622:	2300      	moveq	r3, #0
  406624:	2301      	movne	r3, #1
  406626:	b2db      	uxtb	r3, r3
}
  406628:	4618      	mov	r0, r3
  40662a:	370c      	adds	r7, #12
  40662c:	46bd      	mov	sp, r7
  40662e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406632:	4770      	bx	lr
  406634:	20003414 	.word	0x20003414

00406638 <inc_lock>:
static
UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
	DIR* dj,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access mode (0:Read, !0:Write) */
)
{
  406638:	b480      	push	{r7}
  40663a:	b085      	sub	sp, #20
  40663c:	af00      	add	r7, sp, #0
  40663e:	6078      	str	r0, [r7, #4]
  406640:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  406642:	2300      	movs	r3, #0
  406644:	60fb      	str	r3, [r7, #12]
  406646:	e028      	b.n	40669a <inc_lock+0x62>
		if (Files[i].fs == dj->fs &&
  406648:	4951      	ldr	r1, [pc, #324]	; (406790 <inc_lock+0x158>)
  40664a:	68fa      	ldr	r2, [r7, #12]
  40664c:	4613      	mov	r3, r2
  40664e:	005b      	lsls	r3, r3, #1
  406650:	4413      	add	r3, r2
  406652:	009b      	lsls	r3, r3, #2
  406654:	440b      	add	r3, r1
  406656:	681a      	ldr	r2, [r3, #0]
  406658:	687b      	ldr	r3, [r7, #4]
  40665a:	681b      	ldr	r3, [r3, #0]
  40665c:	429a      	cmp	r2, r3
  40665e:	d119      	bne.n	406694 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
  406660:	494b      	ldr	r1, [pc, #300]	; (406790 <inc_lock+0x158>)
  406662:	68fa      	ldr	r2, [r7, #12]
  406664:	4613      	mov	r3, r2
  406666:	005b      	lsls	r3, r3, #1
  406668:	4413      	add	r3, r2
  40666a:	009b      	lsls	r3, r3, #2
  40666c:	440b      	add	r3, r1
  40666e:	685a      	ldr	r2, [r3, #4]
  406670:	687b      	ldr	r3, [r7, #4]
  406672:	689b      	ldr	r3, [r3, #8]
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
  406674:	429a      	cmp	r2, r3
  406676:	d10d      	bne.n	406694 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
  406678:	4945      	ldr	r1, [pc, #276]	; (406790 <inc_lock+0x158>)
  40667a:	68fa      	ldr	r2, [r7, #12]
  40667c:	4613      	mov	r3, r2
  40667e:	005b      	lsls	r3, r3, #1
  406680:	4413      	add	r3, r2
  406682:	009b      	lsls	r3, r3, #2
  406684:	440b      	add	r3, r1
  406686:	3308      	adds	r3, #8
  406688:	881a      	ldrh	r2, [r3, #0]
  40668a:	687b      	ldr	r3, [r7, #4]
  40668c:	88db      	ldrh	r3, [r3, #6]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
  40668e:	429a      	cmp	r2, r3
  406690:	d100      	bne.n	406694 <inc_lock+0x5c>
			Files[i].idx == dj->index) break;
  406692:	e005      	b.n	4066a0 <inc_lock+0x68>
)
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  406694:	68fb      	ldr	r3, [r7, #12]
  406696:	3301      	adds	r3, #1
  406698:	60fb      	str	r3, [r7, #12]
  40669a:	68fb      	ldr	r3, [r7, #12]
  40669c:	2b02      	cmp	r3, #2
  40669e:	d9d3      	bls.n	406648 <inc_lock+0x10>
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
  4066a0:	68fb      	ldr	r3, [r7, #12]
  4066a2:	2b03      	cmp	r3, #3
  4066a4:	d141      	bne.n	40672a <inc_lock+0xf2>
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  4066a6:	2300      	movs	r3, #0
  4066a8:	60fb      	str	r3, [r7, #12]
  4066aa:	e002      	b.n	4066b2 <inc_lock+0x7a>
  4066ac:	68fb      	ldr	r3, [r7, #12]
  4066ae:	3301      	adds	r3, #1
  4066b0:	60fb      	str	r3, [r7, #12]
  4066b2:	68fb      	ldr	r3, [r7, #12]
  4066b4:	2b02      	cmp	r3, #2
  4066b6:	d809      	bhi.n	4066cc <inc_lock+0x94>
  4066b8:	4935      	ldr	r1, [pc, #212]	; (406790 <inc_lock+0x158>)
  4066ba:	68fa      	ldr	r2, [r7, #12]
  4066bc:	4613      	mov	r3, r2
  4066be:	005b      	lsls	r3, r3, #1
  4066c0:	4413      	add	r3, r2
  4066c2:	009b      	lsls	r3, r3, #2
  4066c4:	440b      	add	r3, r1
  4066c6:	681b      	ldr	r3, [r3, #0]
  4066c8:	2b00      	cmp	r3, #0
  4066ca:	d1ef      	bne.n	4066ac <inc_lock+0x74>
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
  4066cc:	68fb      	ldr	r3, [r7, #12]
  4066ce:	2b03      	cmp	r3, #3
  4066d0:	d101      	bne.n	4066d6 <inc_lock+0x9e>
  4066d2:	2300      	movs	r3, #0
  4066d4:	e055      	b.n	406782 <inc_lock+0x14a>
		Files[i].fs = dj->fs;
  4066d6:	687b      	ldr	r3, [r7, #4]
  4066d8:	6819      	ldr	r1, [r3, #0]
  4066da:	482d      	ldr	r0, [pc, #180]	; (406790 <inc_lock+0x158>)
  4066dc:	68fa      	ldr	r2, [r7, #12]
  4066de:	4613      	mov	r3, r2
  4066e0:	005b      	lsls	r3, r3, #1
  4066e2:	4413      	add	r3, r2
  4066e4:	009b      	lsls	r3, r3, #2
  4066e6:	4403      	add	r3, r0
  4066e8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dj->sclust;
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	6899      	ldr	r1, [r3, #8]
  4066ee:	4828      	ldr	r0, [pc, #160]	; (406790 <inc_lock+0x158>)
  4066f0:	68fa      	ldr	r2, [r7, #12]
  4066f2:	4613      	mov	r3, r2
  4066f4:	005b      	lsls	r3, r3, #1
  4066f6:	4413      	add	r3, r2
  4066f8:	009b      	lsls	r3, r3, #2
  4066fa:	4403      	add	r3, r0
  4066fc:	6059      	str	r1, [r3, #4]
		Files[i].idx = dj->index;
  4066fe:	687b      	ldr	r3, [r7, #4]
  406700:	88d9      	ldrh	r1, [r3, #6]
  406702:	4823      	ldr	r0, [pc, #140]	; (406790 <inc_lock+0x158>)
  406704:	68fa      	ldr	r2, [r7, #12]
  406706:	4613      	mov	r3, r2
  406708:	005b      	lsls	r3, r3, #1
  40670a:	4413      	add	r3, r2
  40670c:	009b      	lsls	r3, r3, #2
  40670e:	4403      	add	r3, r0
  406710:	3308      	adds	r3, #8
  406712:	460a      	mov	r2, r1
  406714:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
  406716:	491e      	ldr	r1, [pc, #120]	; (406790 <inc_lock+0x158>)
  406718:	68fa      	ldr	r2, [r7, #12]
  40671a:	4613      	mov	r3, r2
  40671c:	005b      	lsls	r3, r3, #1
  40671e:	4413      	add	r3, r2
  406720:	009b      	lsls	r3, r3, #2
  406722:	440b      	add	r3, r1
  406724:	3308      	adds	r3, #8
  406726:	2200      	movs	r2, #0
  406728:	805a      	strh	r2, [r3, #2]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  40672a:	683b      	ldr	r3, [r7, #0]
  40672c:	2b00      	cmp	r3, #0
  40672e:	d00c      	beq.n	40674a <inc_lock+0x112>
  406730:	4917      	ldr	r1, [pc, #92]	; (406790 <inc_lock+0x158>)
  406732:	68fa      	ldr	r2, [r7, #12]
  406734:	4613      	mov	r3, r2
  406736:	005b      	lsls	r3, r3, #1
  406738:	4413      	add	r3, r2
  40673a:	009b      	lsls	r3, r3, #2
  40673c:	440b      	add	r3, r1
  40673e:	3308      	adds	r3, #8
  406740:	885b      	ldrh	r3, [r3, #2]
  406742:	2b00      	cmp	r3, #0
  406744:	d001      	beq.n	40674a <inc_lock+0x112>
  406746:	2300      	movs	r3, #0
  406748:	e01b      	b.n	406782 <inc_lock+0x14a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  40674a:	683b      	ldr	r3, [r7, #0]
  40674c:	2b00      	cmp	r3, #0
  40674e:	d10b      	bne.n	406768 <inc_lock+0x130>
  406750:	490f      	ldr	r1, [pc, #60]	; (406790 <inc_lock+0x158>)
  406752:	68fa      	ldr	r2, [r7, #12]
  406754:	4613      	mov	r3, r2
  406756:	005b      	lsls	r3, r3, #1
  406758:	4413      	add	r3, r2
  40675a:	009b      	lsls	r3, r3, #2
  40675c:	440b      	add	r3, r1
  40675e:	3308      	adds	r3, #8
  406760:	885b      	ldrh	r3, [r3, #2]
  406762:	3301      	adds	r3, #1
  406764:	b29a      	uxth	r2, r3
  406766:	e001      	b.n	40676c <inc_lock+0x134>
  406768:	f44f 7280 	mov.w	r2, #256	; 0x100
  40676c:	4808      	ldr	r0, [pc, #32]	; (406790 <inc_lock+0x158>)
  40676e:	68f9      	ldr	r1, [r7, #12]
  406770:	460b      	mov	r3, r1
  406772:	005b      	lsls	r3, r3, #1
  406774:	440b      	add	r3, r1
  406776:	009b      	lsls	r3, r3, #2
  406778:	4403      	add	r3, r0
  40677a:	3308      	adds	r3, #8
  40677c:	805a      	strh	r2, [r3, #2]

	return i + 1;
  40677e:	68fb      	ldr	r3, [r7, #12]
  406780:	3301      	adds	r3, #1
}
  406782:	4618      	mov	r0, r3
  406784:	3714      	adds	r7, #20
  406786:	46bd      	mov	sp, r7
  406788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40678c:	4770      	bx	lr
  40678e:	bf00      	nop
  406790:	20003414 	.word	0x20003414

00406794 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement file open counter */
	UINT i			/* Semaphore index */
)
{
  406794:	b480      	push	{r7}
  406796:	b085      	sub	sp, #20
  406798:	af00      	add	r7, sp, #0
  40679a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_SHARE) {
  40679c:	687b      	ldr	r3, [r7, #4]
  40679e:	3b01      	subs	r3, #1
  4067a0:	607b      	str	r3, [r7, #4]
  4067a2:	687b      	ldr	r3, [r7, #4]
  4067a4:	2b02      	cmp	r3, #2
  4067a6:	d82e      	bhi.n	406806 <dec_lock+0x72>
		n = Files[i].ctr;
  4067a8:	491b      	ldr	r1, [pc, #108]	; (406818 <dec_lock+0x84>)
  4067aa:	687a      	ldr	r2, [r7, #4]
  4067ac:	4613      	mov	r3, r2
  4067ae:	005b      	lsls	r3, r3, #1
  4067b0:	4413      	add	r3, r2
  4067b2:	009b      	lsls	r3, r3, #2
  4067b4:	440b      	add	r3, r1
  4067b6:	3308      	adds	r3, #8
  4067b8:	885b      	ldrh	r3, [r3, #2]
  4067ba:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;
  4067bc:	89fb      	ldrh	r3, [r7, #14]
  4067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4067c2:	d101      	bne.n	4067c8 <dec_lock+0x34>
  4067c4:	2300      	movs	r3, #0
  4067c6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;
  4067c8:	89fb      	ldrh	r3, [r7, #14]
  4067ca:	2b00      	cmp	r3, #0
  4067cc:	d002      	beq.n	4067d4 <dec_lock+0x40>
  4067ce:	89fb      	ldrh	r3, [r7, #14]
  4067d0:	3b01      	subs	r3, #1
  4067d2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
  4067d4:	4910      	ldr	r1, [pc, #64]	; (406818 <dec_lock+0x84>)
  4067d6:	687a      	ldr	r2, [r7, #4]
  4067d8:	4613      	mov	r3, r2
  4067da:	005b      	lsls	r3, r3, #1
  4067dc:	4413      	add	r3, r2
  4067de:	009b      	lsls	r3, r3, #2
  4067e0:	440b      	add	r3, r1
  4067e2:	3308      	adds	r3, #8
  4067e4:	89fa      	ldrh	r2, [r7, #14]
  4067e6:	805a      	strh	r2, [r3, #2]
		if (!n) Files[i].fs = 0;
  4067e8:	89fb      	ldrh	r3, [r7, #14]
  4067ea:	2b00      	cmp	r3, #0
  4067ec:	d108      	bne.n	406800 <dec_lock+0x6c>
  4067ee:	490a      	ldr	r1, [pc, #40]	; (406818 <dec_lock+0x84>)
  4067f0:	687a      	ldr	r2, [r7, #4]
  4067f2:	4613      	mov	r3, r2
  4067f4:	005b      	lsls	r3, r3, #1
  4067f6:	4413      	add	r3, r2
  4067f8:	009b      	lsls	r3, r3, #2
  4067fa:	440b      	add	r3, r1
  4067fc:	2200      	movs	r2, #0
  4067fe:	601a      	str	r2, [r3, #0]
		res = FR_OK;
  406800:	2300      	movs	r3, #0
  406802:	737b      	strb	r3, [r7, #13]
  406804:	e001      	b.n	40680a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;
  406806:	2302      	movs	r3, #2
  406808:	737b      	strb	r3, [r7, #13]
	}
	return res;
  40680a:	7b7b      	ldrb	r3, [r7, #13]
}
  40680c:	4618      	mov	r0, r3
  40680e:	3714      	adds	r7, #20
  406810:	46bd      	mov	sp, r7
  406812:	f85d 7b04 	ldr.w	r7, [sp], #4
  406816:	4770      	bx	lr
  406818:	20003414 	.word	0x20003414

0040681c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
  40681c:	b480      	push	{r7}
  40681e:	b085      	sub	sp, #20
  406820:	af00      	add	r7, sp, #0
  406822:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  406824:	2300      	movs	r3, #0
  406826:	60fb      	str	r3, [r7, #12]
  406828:	e016      	b.n	406858 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
  40682a:	490f      	ldr	r1, [pc, #60]	; (406868 <clear_lock+0x4c>)
  40682c:	68fa      	ldr	r2, [r7, #12]
  40682e:	4613      	mov	r3, r2
  406830:	005b      	lsls	r3, r3, #1
  406832:	4413      	add	r3, r2
  406834:	009b      	lsls	r3, r3, #2
  406836:	440b      	add	r3, r1
  406838:	681a      	ldr	r2, [r3, #0]
  40683a:	687b      	ldr	r3, [r7, #4]
  40683c:	429a      	cmp	r2, r3
  40683e:	d108      	bne.n	406852 <clear_lock+0x36>
  406840:	4909      	ldr	r1, [pc, #36]	; (406868 <clear_lock+0x4c>)
  406842:	68fa      	ldr	r2, [r7, #12]
  406844:	4613      	mov	r3, r2
  406846:	005b      	lsls	r3, r3, #1
  406848:	4413      	add	r3, r2
  40684a:	009b      	lsls	r3, r3, #2
  40684c:	440b      	add	r3, r1
  40684e:	2200      	movs	r2, #0
  406850:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  406852:	68fb      	ldr	r3, [r7, #12]
  406854:	3301      	adds	r3, #1
  406856:	60fb      	str	r3, [r7, #12]
  406858:	68fb      	ldr	r3, [r7, #12]
  40685a:	2b02      	cmp	r3, #2
  40685c:	d9e5      	bls.n	40682a <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
  40685e:	3714      	adds	r7, #20
  406860:	46bd      	mov	sp, r7
  406862:	f85d 7b04 	ldr.w	r7, [sp], #4
  406866:	4770      	bx	lr
  406868:	20003414 	.word	0x20003414

0040686c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  40686c:	b590      	push	{r4, r7, lr}
  40686e:	b085      	sub	sp, #20
  406870:	af00      	add	r7, sp, #0
  406872:	6078      	str	r0, [r7, #4]
  406874:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
  406876:	687b      	ldr	r3, [r7, #4]
  406878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40687a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
  40687c:	68fa      	ldr	r2, [r7, #12]
  40687e:	683b      	ldr	r3, [r7, #0]
  406880:	429a      	cmp	r2, r3
  406882:	d04b      	beq.n	40691c <move_window+0xb0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  406884:	687b      	ldr	r3, [r7, #4]
  406886:	791b      	ldrb	r3, [r3, #4]
  406888:	2b00      	cmp	r3, #0
  40688a:	d032      	beq.n	4068f2 <move_window+0x86>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40688c:	687b      	ldr	r3, [r7, #4]
  40688e:	785a      	ldrb	r2, [r3, #1]
  406890:	687b      	ldr	r3, [r7, #4]
  406892:	3330      	adds	r3, #48	; 0x30
  406894:	4610      	mov	r0, r2
  406896:	4619      	mov	r1, r3
  406898:	68fa      	ldr	r2, [r7, #12]
  40689a:	2301      	movs	r3, #1
  40689c:	4c22      	ldr	r4, [pc, #136]	; (406928 <move_window+0xbc>)
  40689e:	47a0      	blx	r4
  4068a0:	4603      	mov	r3, r0
  4068a2:	2b00      	cmp	r3, #0
  4068a4:	d001      	beq.n	4068aa <move_window+0x3e>
				return FR_DISK_ERR;
  4068a6:	2301      	movs	r3, #1
  4068a8:	e039      	b.n	40691e <move_window+0xb2>
			fs->wflag = 0;
  4068aa:	687b      	ldr	r3, [r7, #4]
  4068ac:	2200      	movs	r2, #0
  4068ae:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  4068b0:	687b      	ldr	r3, [r7, #4]
  4068b2:	6a1a      	ldr	r2, [r3, #32]
  4068b4:	687b      	ldr	r3, [r7, #4]
  4068b6:	69db      	ldr	r3, [r3, #28]
  4068b8:	441a      	add	r2, r3
  4068ba:	68fb      	ldr	r3, [r7, #12]
  4068bc:	429a      	cmp	r2, r3
  4068be:	d918      	bls.n	4068f2 <move_window+0x86>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4068c0:	687b      	ldr	r3, [r7, #4]
  4068c2:	78db      	ldrb	r3, [r3, #3]
  4068c4:	72fb      	strb	r3, [r7, #11]
  4068c6:	e011      	b.n	4068ec <move_window+0x80>
					wsect += fs->fsize;
  4068c8:	687b      	ldr	r3, [r7, #4]
  4068ca:	69db      	ldr	r3, [r3, #28]
  4068cc:	68fa      	ldr	r2, [r7, #12]
  4068ce:	4413      	add	r3, r2
  4068d0:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
  4068d2:	687b      	ldr	r3, [r7, #4]
  4068d4:	785a      	ldrb	r2, [r3, #1]
  4068d6:	687b      	ldr	r3, [r7, #4]
  4068d8:	3330      	adds	r3, #48	; 0x30
  4068da:	4610      	mov	r0, r2
  4068dc:	4619      	mov	r1, r3
  4068de:	68fa      	ldr	r2, [r7, #12]
  4068e0:	2301      	movs	r3, #1
  4068e2:	4c11      	ldr	r4, [pc, #68]	; (406928 <move_window+0xbc>)
  4068e4:	47a0      	blx	r4
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4068e6:	7afb      	ldrb	r3, [r7, #11]
  4068e8:	3b01      	subs	r3, #1
  4068ea:	72fb      	strb	r3, [r7, #11]
  4068ec:	7afb      	ldrb	r3, [r7, #11]
  4068ee:	2b01      	cmp	r3, #1
  4068f0:	d8ea      	bhi.n	4068c8 <move_window+0x5c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  4068f2:	683b      	ldr	r3, [r7, #0]
  4068f4:	2b00      	cmp	r3, #0
  4068f6:	d011      	beq.n	40691c <move_window+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  4068f8:	687b      	ldr	r3, [r7, #4]
  4068fa:	785a      	ldrb	r2, [r3, #1]
  4068fc:	687b      	ldr	r3, [r7, #4]
  4068fe:	3330      	adds	r3, #48	; 0x30
  406900:	4610      	mov	r0, r2
  406902:	4619      	mov	r1, r3
  406904:	683a      	ldr	r2, [r7, #0]
  406906:	2301      	movs	r3, #1
  406908:	4c08      	ldr	r4, [pc, #32]	; (40692c <move_window+0xc0>)
  40690a:	47a0      	blx	r4
  40690c:	4603      	mov	r3, r0
  40690e:	2b00      	cmp	r3, #0
  406910:	d001      	beq.n	406916 <move_window+0xaa>
				return FR_DISK_ERR;
  406912:	2301      	movs	r3, #1
  406914:	e003      	b.n	40691e <move_window+0xb2>
			fs->winsect = sector;
  406916:	687b      	ldr	r3, [r7, #4]
  406918:	683a      	ldr	r2, [r7, #0]
  40691a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
  40691c:	2300      	movs	r3, #0
}
  40691e:	4618      	mov	r0, r3
  406920:	3714      	adds	r7, #20
  406922:	46bd      	mov	sp, r7
  406924:	bd90      	pop	{r4, r7, pc}
  406926:	bf00      	nop
  406928:	0040624d 	.word	0x0040624d
  40692c:	0040619d 	.word	0x0040619d

00406930 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  406930:	b590      	push	{r4, r7, lr}
  406932:	b085      	sub	sp, #20
  406934:	af00      	add	r7, sp, #0
  406936:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
  406938:	6878      	ldr	r0, [r7, #4]
  40693a:	2100      	movs	r1, #0
  40693c:	4b4f      	ldr	r3, [pc, #316]	; (406a7c <sync+0x14c>)
  40693e:	4798      	blx	r3
  406940:	4603      	mov	r3, r0
  406942:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  406944:	7bfb      	ldrb	r3, [r7, #15]
  406946:	2b00      	cmp	r3, #0
  406948:	f040 8092 	bne.w	406a70 <sync+0x140>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40694c:	687b      	ldr	r3, [r7, #4]
  40694e:	781b      	ldrb	r3, [r3, #0]
  406950:	2b03      	cmp	r3, #3
  406952:	f040 8081 	bne.w	406a58 <sync+0x128>
  406956:	687b      	ldr	r3, [r7, #4]
  406958:	795b      	ldrb	r3, [r3, #5]
  40695a:	2b00      	cmp	r3, #0
  40695c:	d07c      	beq.n	406a58 <sync+0x128>
			fs->winsect = 0;
  40695e:	687b      	ldr	r3, [r7, #4]
  406960:	2200      	movs	r2, #0
  406962:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  406964:	687b      	ldr	r3, [r7, #4]
  406966:	3330      	adds	r3, #48	; 0x30
  406968:	4618      	mov	r0, r3
  40696a:	2100      	movs	r1, #0
  40696c:	f44f 7200 	mov.w	r2, #512	; 0x200
  406970:	4b43      	ldr	r3, [pc, #268]	; (406a80 <sync+0x150>)
  406972:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  406974:	687b      	ldr	r3, [r7, #4]
  406976:	2255      	movs	r2, #85	; 0x55
  406978:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  40697c:	687b      	ldr	r3, [r7, #4]
  40697e:	22aa      	movs	r2, #170	; 0xaa
  406980:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  406984:	687b      	ldr	r3, [r7, #4]
  406986:	2252      	movs	r2, #82	; 0x52
  406988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  40698c:	687b      	ldr	r3, [r7, #4]
  40698e:	2252      	movs	r2, #82	; 0x52
  406990:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  406994:	687b      	ldr	r3, [r7, #4]
  406996:	2261      	movs	r2, #97	; 0x61
  406998:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  40699c:	687b      	ldr	r3, [r7, #4]
  40699e:	2241      	movs	r2, #65	; 0x41
  4069a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4069a4:	687b      	ldr	r3, [r7, #4]
  4069a6:	2272      	movs	r2, #114	; 0x72
  4069a8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
  4069ac:	687b      	ldr	r3, [r7, #4]
  4069ae:	2272      	movs	r2, #114	; 0x72
  4069b0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  4069b4:	687b      	ldr	r3, [r7, #4]
  4069b6:	2241      	movs	r2, #65	; 0x41
  4069b8:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
  4069bc:	687b      	ldr	r3, [r7, #4]
  4069be:	2261      	movs	r2, #97	; 0x61
  4069c0:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4069c4:	687b      	ldr	r3, [r7, #4]
  4069c6:	691b      	ldr	r3, [r3, #16]
  4069c8:	b2da      	uxtb	r2, r3
  4069ca:	687b      	ldr	r3, [r7, #4]
  4069cc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  4069d0:	687b      	ldr	r3, [r7, #4]
  4069d2:	691b      	ldr	r3, [r3, #16]
  4069d4:	b29b      	uxth	r3, r3
  4069d6:	0a1b      	lsrs	r3, r3, #8
  4069d8:	b29b      	uxth	r3, r3
  4069da:	b2da      	uxtb	r2, r3
  4069dc:	687b      	ldr	r3, [r7, #4]
  4069de:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  4069e2:	687b      	ldr	r3, [r7, #4]
  4069e4:	691b      	ldr	r3, [r3, #16]
  4069e6:	0c1b      	lsrs	r3, r3, #16
  4069e8:	b2da      	uxtb	r2, r3
  4069ea:	687b      	ldr	r3, [r7, #4]
  4069ec:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  4069f0:	687b      	ldr	r3, [r7, #4]
  4069f2:	691b      	ldr	r3, [r3, #16]
  4069f4:	0e1b      	lsrs	r3, r3, #24
  4069f6:	b2da      	uxtb	r2, r3
  4069f8:	687b      	ldr	r3, [r7, #4]
  4069fa:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4069fe:	687b      	ldr	r3, [r7, #4]
  406a00:	68db      	ldr	r3, [r3, #12]
  406a02:	b2da      	uxtb	r2, r3
  406a04:	687b      	ldr	r3, [r7, #4]
  406a06:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  406a0a:	687b      	ldr	r3, [r7, #4]
  406a0c:	68db      	ldr	r3, [r3, #12]
  406a0e:	b29b      	uxth	r3, r3
  406a10:	0a1b      	lsrs	r3, r3, #8
  406a12:	b29b      	uxth	r3, r3
  406a14:	b2da      	uxtb	r2, r3
  406a16:	687b      	ldr	r3, [r7, #4]
  406a18:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  406a1c:	687b      	ldr	r3, [r7, #4]
  406a1e:	68db      	ldr	r3, [r3, #12]
  406a20:	0c1b      	lsrs	r3, r3, #16
  406a22:	b2da      	uxtb	r2, r3
  406a24:	687b      	ldr	r3, [r7, #4]
  406a26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
  406a2a:	687b      	ldr	r3, [r7, #4]
  406a2c:	68db      	ldr	r3, [r3, #12]
  406a2e:	0e1b      	lsrs	r3, r3, #24
  406a30:	b2da      	uxtb	r2, r3
  406a32:	687b      	ldr	r3, [r7, #4]
  406a34:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  406a38:	687b      	ldr	r3, [r7, #4]
  406a3a:	7859      	ldrb	r1, [r3, #1]
  406a3c:	687b      	ldr	r3, [r7, #4]
  406a3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
  406a42:	687b      	ldr	r3, [r7, #4]
  406a44:	695b      	ldr	r3, [r3, #20]
  406a46:	4608      	mov	r0, r1
  406a48:	4611      	mov	r1, r2
  406a4a:	461a      	mov	r2, r3
  406a4c:	2301      	movs	r3, #1
  406a4e:	4c0d      	ldr	r4, [pc, #52]	; (406a84 <sync+0x154>)
  406a50:	47a0      	blx	r4
			fs->fsi_flag = 0;
  406a52:	687b      	ldr	r3, [r7, #4]
  406a54:	2200      	movs	r2, #0
  406a56:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  406a58:	687b      	ldr	r3, [r7, #4]
  406a5a:	785b      	ldrb	r3, [r3, #1]
  406a5c:	4618      	mov	r0, r3
  406a5e:	2100      	movs	r1, #0
  406a60:	2200      	movs	r2, #0
  406a62:	4b09      	ldr	r3, [pc, #36]	; (406a88 <sync+0x158>)
  406a64:	4798      	blx	r3
  406a66:	4603      	mov	r3, r0
  406a68:	2b00      	cmp	r3, #0
  406a6a:	d001      	beq.n	406a70 <sync+0x140>
			res = FR_DISK_ERR;
  406a6c:	2301      	movs	r3, #1
  406a6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  406a70:	7bfb      	ldrb	r3, [r7, #15]
}
  406a72:	4618      	mov	r0, r3
  406a74:	3714      	adds	r7, #20
  406a76:	46bd      	mov	sp, r7
  406a78:	bd90      	pop	{r4, r7, pc}
  406a7a:	bf00      	nop
  406a7c:	0040686d 	.word	0x0040686d
  406a80:	00406461 	.word	0x00406461
  406a84:	0040624d 	.word	0x0040624d
  406a88:	004062fd 	.word	0x004062fd

00406a8c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
  406a8c:	b480      	push	{r7}
  406a8e:	b083      	sub	sp, #12
  406a90:	af00      	add	r7, sp, #0
  406a92:	6078      	str	r0, [r7, #4]
  406a94:	6039      	str	r1, [r7, #0]
	clst -= 2;
  406a96:	683b      	ldr	r3, [r7, #0]
  406a98:	3b02      	subs	r3, #2
  406a9a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  406a9c:	687b      	ldr	r3, [r7, #4]
  406a9e:	699b      	ldr	r3, [r3, #24]
  406aa0:	1e9a      	subs	r2, r3, #2
  406aa2:	683b      	ldr	r3, [r7, #0]
  406aa4:	429a      	cmp	r2, r3
  406aa6:	d801      	bhi.n	406aac <clust2sect+0x20>
  406aa8:	2300      	movs	r3, #0
  406aaa:	e007      	b.n	406abc <clust2sect+0x30>
	return clst * fs->csize + fs->database;
  406aac:	687b      	ldr	r3, [r7, #4]
  406aae:	789b      	ldrb	r3, [r3, #2]
  406ab0:	683a      	ldr	r2, [r7, #0]
  406ab2:	fb02 f203 	mul.w	r2, r2, r3
  406ab6:	687b      	ldr	r3, [r7, #4]
  406ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406aba:	4413      	add	r3, r2
}
  406abc:	4618      	mov	r0, r3
  406abe:	370c      	adds	r7, #12
  406ac0:	46bd      	mov	sp, r7
  406ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ac6:	4770      	bx	lr

00406ac8 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  406ac8:	b580      	push	{r7, lr}
  406aca:	b086      	sub	sp, #24
  406acc:	af00      	add	r7, sp, #0
  406ace:	6078      	str	r0, [r7, #4]
  406ad0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  406ad2:	683b      	ldr	r3, [r7, #0]
  406ad4:	2b01      	cmp	r3, #1
  406ad6:	d904      	bls.n	406ae2 <get_fat+0x1a>
  406ad8:	687b      	ldr	r3, [r7, #4]
  406ada:	699a      	ldr	r2, [r3, #24]
  406adc:	683b      	ldr	r3, [r7, #0]
  406ade:	429a      	cmp	r2, r3
  406ae0:	d801      	bhi.n	406ae6 <get_fat+0x1e>
		return 1;
  406ae2:	2301      	movs	r3, #1
  406ae4:	e096      	b.n	406c14 <get_fat+0x14c>

	switch (fs->fs_type) {
  406ae6:	687b      	ldr	r3, [r7, #4]
  406ae8:	781b      	ldrb	r3, [r3, #0]
  406aea:	2b02      	cmp	r3, #2
  406aec:	d047      	beq.n	406b7e <get_fat+0xb6>
  406aee:	2b03      	cmp	r3, #3
  406af0:	d065      	beq.n	406bbe <get_fat+0xf6>
  406af2:	2b01      	cmp	r3, #1
  406af4:	f040 808c 	bne.w	406c10 <get_fat+0x148>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  406af8:	683b      	ldr	r3, [r7, #0]
  406afa:	617b      	str	r3, [r7, #20]
  406afc:	697b      	ldr	r3, [r7, #20]
  406afe:	085b      	lsrs	r3, r3, #1
  406b00:	697a      	ldr	r2, [r7, #20]
  406b02:	4413      	add	r3, r2
  406b04:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  406b06:	687b      	ldr	r3, [r7, #4]
  406b08:	6a1a      	ldr	r2, [r3, #32]
  406b0a:	697b      	ldr	r3, [r7, #20]
  406b0c:	0a5b      	lsrs	r3, r3, #9
  406b0e:	4413      	add	r3, r2
  406b10:	6878      	ldr	r0, [r7, #4]
  406b12:	4619      	mov	r1, r3
  406b14:	4b41      	ldr	r3, [pc, #260]	; (406c1c <get_fat+0x154>)
  406b16:	4798      	blx	r3
  406b18:	4603      	mov	r3, r0
  406b1a:	2b00      	cmp	r3, #0
  406b1c:	d000      	beq.n	406b20 <get_fat+0x58>
  406b1e:	e077      	b.n	406c10 <get_fat+0x148>
		wc = fs->win[bc % SS(fs)]; bc++;
  406b20:	697b      	ldr	r3, [r7, #20]
  406b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406b26:	687a      	ldr	r2, [r7, #4]
  406b28:	4413      	add	r3, r2
  406b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  406b2e:	613b      	str	r3, [r7, #16]
  406b30:	697b      	ldr	r3, [r7, #20]
  406b32:	3301      	adds	r3, #1
  406b34:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  406b36:	687b      	ldr	r3, [r7, #4]
  406b38:	6a1a      	ldr	r2, [r3, #32]
  406b3a:	697b      	ldr	r3, [r7, #20]
  406b3c:	0a5b      	lsrs	r3, r3, #9
  406b3e:	4413      	add	r3, r2
  406b40:	6878      	ldr	r0, [r7, #4]
  406b42:	4619      	mov	r1, r3
  406b44:	4b35      	ldr	r3, [pc, #212]	; (406c1c <get_fat+0x154>)
  406b46:	4798      	blx	r3
  406b48:	4603      	mov	r3, r0
  406b4a:	2b00      	cmp	r3, #0
  406b4c:	d000      	beq.n	406b50 <get_fat+0x88>
  406b4e:	e05f      	b.n	406c10 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
  406b50:	697b      	ldr	r3, [r7, #20]
  406b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406b56:	687a      	ldr	r2, [r7, #4]
  406b58:	4413      	add	r3, r2
  406b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  406b5e:	021b      	lsls	r3, r3, #8
  406b60:	693a      	ldr	r2, [r7, #16]
  406b62:	4313      	orrs	r3, r2
  406b64:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  406b66:	683b      	ldr	r3, [r7, #0]
  406b68:	f003 0301 	and.w	r3, r3, #1
  406b6c:	2b00      	cmp	r3, #0
  406b6e:	d002      	beq.n	406b76 <get_fat+0xae>
  406b70:	693b      	ldr	r3, [r7, #16]
  406b72:	091b      	lsrs	r3, r3, #4
  406b74:	e002      	b.n	406b7c <get_fat+0xb4>
  406b76:	693b      	ldr	r3, [r7, #16]
  406b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
  406b7c:	e04a      	b.n	406c14 <get_fat+0x14c>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  406b7e:	687b      	ldr	r3, [r7, #4]
  406b80:	6a1a      	ldr	r2, [r3, #32]
  406b82:	683b      	ldr	r3, [r7, #0]
  406b84:	0a1b      	lsrs	r3, r3, #8
  406b86:	4413      	add	r3, r2
  406b88:	6878      	ldr	r0, [r7, #4]
  406b8a:	4619      	mov	r1, r3
  406b8c:	4b23      	ldr	r3, [pc, #140]	; (406c1c <get_fat+0x154>)
  406b8e:	4798      	blx	r3
  406b90:	4603      	mov	r3, r0
  406b92:	2b00      	cmp	r3, #0
  406b94:	d000      	beq.n	406b98 <get_fat+0xd0>
  406b96:	e03b      	b.n	406c10 <get_fat+0x148>
		p = &fs->win[clst * 2 % SS(fs)];
  406b98:	683b      	ldr	r3, [r7, #0]
  406b9a:	005b      	lsls	r3, r3, #1
  406b9c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  406ba0:	3330      	adds	r3, #48	; 0x30
  406ba2:	687a      	ldr	r2, [r7, #4]
  406ba4:	4413      	add	r3, r2
  406ba6:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
  406ba8:	68fb      	ldr	r3, [r7, #12]
  406baa:	3301      	adds	r3, #1
  406bac:	781b      	ldrb	r3, [r3, #0]
  406bae:	021b      	lsls	r3, r3, #8
  406bb0:	b29a      	uxth	r2, r3
  406bb2:	68fb      	ldr	r3, [r7, #12]
  406bb4:	781b      	ldrb	r3, [r3, #0]
  406bb6:	4313      	orrs	r3, r2
  406bb8:	b29b      	uxth	r3, r3
  406bba:	b29b      	uxth	r3, r3
  406bbc:	e02a      	b.n	406c14 <get_fat+0x14c>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  406bbe:	687b      	ldr	r3, [r7, #4]
  406bc0:	6a1a      	ldr	r2, [r3, #32]
  406bc2:	683b      	ldr	r3, [r7, #0]
  406bc4:	09db      	lsrs	r3, r3, #7
  406bc6:	4413      	add	r3, r2
  406bc8:	6878      	ldr	r0, [r7, #4]
  406bca:	4619      	mov	r1, r3
  406bcc:	4b13      	ldr	r3, [pc, #76]	; (406c1c <get_fat+0x154>)
  406bce:	4798      	blx	r3
  406bd0:	4603      	mov	r3, r0
  406bd2:	2b00      	cmp	r3, #0
  406bd4:	d000      	beq.n	406bd8 <get_fat+0x110>
  406bd6:	e01b      	b.n	406c10 <get_fat+0x148>
		p = &fs->win[clst * 4 % SS(fs)];
  406bd8:	683b      	ldr	r3, [r7, #0]
  406bda:	009b      	lsls	r3, r3, #2
  406bdc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  406be0:	3330      	adds	r3, #48	; 0x30
  406be2:	687a      	ldr	r2, [r7, #4]
  406be4:	4413      	add	r3, r2
  406be6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
  406be8:	68fb      	ldr	r3, [r7, #12]
  406bea:	3303      	adds	r3, #3
  406bec:	781b      	ldrb	r3, [r3, #0]
  406bee:	061a      	lsls	r2, r3, #24
  406bf0:	68fb      	ldr	r3, [r7, #12]
  406bf2:	3302      	adds	r3, #2
  406bf4:	781b      	ldrb	r3, [r3, #0]
  406bf6:	041b      	lsls	r3, r3, #16
  406bf8:	431a      	orrs	r2, r3
  406bfa:	68fb      	ldr	r3, [r7, #12]
  406bfc:	3301      	adds	r3, #1
  406bfe:	781b      	ldrb	r3, [r3, #0]
  406c00:	021b      	lsls	r3, r3, #8
  406c02:	431a      	orrs	r2, r3
  406c04:	68fb      	ldr	r3, [r7, #12]
  406c06:	781b      	ldrb	r3, [r3, #0]
  406c08:	4313      	orrs	r3, r2
  406c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  406c0e:	e001      	b.n	406c14 <get_fat+0x14c>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  406c10:	f04f 33ff 	mov.w	r3, #4294967295
}
  406c14:	4618      	mov	r0, r3
  406c16:	3718      	adds	r7, #24
  406c18:	46bd      	mov	sp, r7
  406c1a:	bd80      	pop	{r7, pc}
  406c1c:	0040686d 	.word	0x0040686d

00406c20 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  406c20:	b580      	push	{r7, lr}
  406c22:	b088      	sub	sp, #32
  406c24:	af00      	add	r7, sp, #0
  406c26:	60f8      	str	r0, [r7, #12]
  406c28:	60b9      	str	r1, [r7, #8]
  406c2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406c2c:	68bb      	ldr	r3, [r7, #8]
  406c2e:	2b01      	cmp	r3, #1
  406c30:	d904      	bls.n	406c3c <put_fat+0x1c>
  406c32:	68fb      	ldr	r3, [r7, #12]
  406c34:	699a      	ldr	r2, [r3, #24]
  406c36:	68bb      	ldr	r3, [r7, #8]
  406c38:	429a      	cmp	r2, r3
  406c3a:	d802      	bhi.n	406c42 <put_fat+0x22>
		res = FR_INT_ERR;
  406c3c:	2302      	movs	r3, #2
  406c3e:	77fb      	strb	r3, [r7, #31]
  406c40:	e0e3      	b.n	406e0a <put_fat+0x1ea>

	} else {
		switch (fs->fs_type) {
  406c42:	68fb      	ldr	r3, [r7, #12]
  406c44:	781b      	ldrb	r3, [r3, #0]
  406c46:	2b02      	cmp	r3, #2
  406c48:	d070      	beq.n	406d2c <put_fat+0x10c>
  406c4a:	2b03      	cmp	r3, #3
  406c4c:	f000 8092 	beq.w	406d74 <put_fat+0x154>
  406c50:	2b01      	cmp	r3, #1
  406c52:	f040 80d5 	bne.w	406e00 <put_fat+0x1e0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  406c56:	68bb      	ldr	r3, [r7, #8]
  406c58:	61bb      	str	r3, [r7, #24]
  406c5a:	69bb      	ldr	r3, [r7, #24]
  406c5c:	085b      	lsrs	r3, r3, #1
  406c5e:	69ba      	ldr	r2, [r7, #24]
  406c60:	4413      	add	r3, r2
  406c62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  406c64:	68fb      	ldr	r3, [r7, #12]
  406c66:	6a1a      	ldr	r2, [r3, #32]
  406c68:	69bb      	ldr	r3, [r7, #24]
  406c6a:	0a5b      	lsrs	r3, r3, #9
  406c6c:	4413      	add	r3, r2
  406c6e:	68f8      	ldr	r0, [r7, #12]
  406c70:	4619      	mov	r1, r3
  406c72:	4b68      	ldr	r3, [pc, #416]	; (406e14 <put_fat+0x1f4>)
  406c74:	4798      	blx	r3
  406c76:	4603      	mov	r3, r0
  406c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  406c7a:	7ffb      	ldrb	r3, [r7, #31]
  406c7c:	2b00      	cmp	r3, #0
  406c7e:	d000      	beq.n	406c82 <put_fat+0x62>
  406c80:	e0c0      	b.n	406e04 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  406c82:	69bb      	ldr	r3, [r7, #24]
  406c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406c88:	3330      	adds	r3, #48	; 0x30
  406c8a:	68fa      	ldr	r2, [r7, #12]
  406c8c:	4413      	add	r3, r2
  406c8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  406c90:	68bb      	ldr	r3, [r7, #8]
  406c92:	f003 0301 	and.w	r3, r3, #1
  406c96:	2b00      	cmp	r3, #0
  406c98:	d00d      	beq.n	406cb6 <put_fat+0x96>
  406c9a:	697b      	ldr	r3, [r7, #20]
  406c9c:	781b      	ldrb	r3, [r3, #0]
  406c9e:	b2db      	uxtb	r3, r3
  406ca0:	f003 030f 	and.w	r3, r3, #15
  406ca4:	b2da      	uxtb	r2, r3
  406ca6:	687b      	ldr	r3, [r7, #4]
  406ca8:	b2db      	uxtb	r3, r3
  406caa:	011b      	lsls	r3, r3, #4
  406cac:	b2db      	uxtb	r3, r3
  406cae:	4313      	orrs	r3, r2
  406cb0:	b2db      	uxtb	r3, r3
  406cb2:	b2db      	uxtb	r3, r3
  406cb4:	e001      	b.n	406cba <put_fat+0x9a>
  406cb6:	687b      	ldr	r3, [r7, #4]
  406cb8:	b2db      	uxtb	r3, r3
  406cba:	697a      	ldr	r2, [r7, #20]
  406cbc:	7013      	strb	r3, [r2, #0]
			bc++;
  406cbe:	69bb      	ldr	r3, [r7, #24]
  406cc0:	3301      	adds	r3, #1
  406cc2:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
  406cc4:	68fb      	ldr	r3, [r7, #12]
  406cc6:	2201      	movs	r2, #1
  406cc8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  406cca:	68fb      	ldr	r3, [r7, #12]
  406ccc:	6a1a      	ldr	r2, [r3, #32]
  406cce:	69bb      	ldr	r3, [r7, #24]
  406cd0:	0a5b      	lsrs	r3, r3, #9
  406cd2:	4413      	add	r3, r2
  406cd4:	68f8      	ldr	r0, [r7, #12]
  406cd6:	4619      	mov	r1, r3
  406cd8:	4b4e      	ldr	r3, [pc, #312]	; (406e14 <put_fat+0x1f4>)
  406cda:	4798      	blx	r3
  406cdc:	4603      	mov	r3, r0
  406cde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  406ce0:	7ffb      	ldrb	r3, [r7, #31]
  406ce2:	2b00      	cmp	r3, #0
  406ce4:	d000      	beq.n	406ce8 <put_fat+0xc8>
  406ce6:	e08d      	b.n	406e04 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  406ce8:	69bb      	ldr	r3, [r7, #24]
  406cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406cee:	3330      	adds	r3, #48	; 0x30
  406cf0:	68fa      	ldr	r2, [r7, #12]
  406cf2:	4413      	add	r3, r2
  406cf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  406cf6:	68bb      	ldr	r3, [r7, #8]
  406cf8:	f003 0301 	and.w	r3, r3, #1
  406cfc:	2b00      	cmp	r3, #0
  406cfe:	d003      	beq.n	406d08 <put_fat+0xe8>
  406d00:	687b      	ldr	r3, [r7, #4]
  406d02:	091b      	lsrs	r3, r3, #4
  406d04:	b2db      	uxtb	r3, r3
  406d06:	e00e      	b.n	406d26 <put_fat+0x106>
  406d08:	697b      	ldr	r3, [r7, #20]
  406d0a:	781b      	ldrb	r3, [r3, #0]
  406d0c:	b2db      	uxtb	r3, r3
  406d0e:	f023 030f 	bic.w	r3, r3, #15
  406d12:	b2da      	uxtb	r2, r3
  406d14:	687b      	ldr	r3, [r7, #4]
  406d16:	0a1b      	lsrs	r3, r3, #8
  406d18:	b2db      	uxtb	r3, r3
  406d1a:	f003 030f 	and.w	r3, r3, #15
  406d1e:	b2db      	uxtb	r3, r3
  406d20:	4313      	orrs	r3, r2
  406d22:	b2db      	uxtb	r3, r3
  406d24:	b2db      	uxtb	r3, r3
  406d26:	697a      	ldr	r2, [r7, #20]
  406d28:	7013      	strb	r3, [r2, #0]
			break;
  406d2a:	e06b      	b.n	406e04 <put_fat+0x1e4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  406d2c:	68fb      	ldr	r3, [r7, #12]
  406d2e:	6a1a      	ldr	r2, [r3, #32]
  406d30:	68bb      	ldr	r3, [r7, #8]
  406d32:	0a1b      	lsrs	r3, r3, #8
  406d34:	4413      	add	r3, r2
  406d36:	68f8      	ldr	r0, [r7, #12]
  406d38:	4619      	mov	r1, r3
  406d3a:	4b36      	ldr	r3, [pc, #216]	; (406e14 <put_fat+0x1f4>)
  406d3c:	4798      	blx	r3
  406d3e:	4603      	mov	r3, r0
  406d40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  406d42:	7ffb      	ldrb	r3, [r7, #31]
  406d44:	2b00      	cmp	r3, #0
  406d46:	d000      	beq.n	406d4a <put_fat+0x12a>
  406d48:	e05c      	b.n	406e04 <put_fat+0x1e4>
			p = &fs->win[clst * 2 % SS(fs)];
  406d4a:	68bb      	ldr	r3, [r7, #8]
  406d4c:	005b      	lsls	r3, r3, #1
  406d4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  406d52:	3330      	adds	r3, #48	; 0x30
  406d54:	68fa      	ldr	r2, [r7, #12]
  406d56:	4413      	add	r3, r2
  406d58:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
  406d5a:	687b      	ldr	r3, [r7, #4]
  406d5c:	b2da      	uxtb	r2, r3
  406d5e:	697b      	ldr	r3, [r7, #20]
  406d60:	701a      	strb	r2, [r3, #0]
  406d62:	697b      	ldr	r3, [r7, #20]
  406d64:	3301      	adds	r3, #1
  406d66:	687a      	ldr	r2, [r7, #4]
  406d68:	b292      	uxth	r2, r2
  406d6a:	0a12      	lsrs	r2, r2, #8
  406d6c:	b292      	uxth	r2, r2
  406d6e:	b2d2      	uxtb	r2, r2
  406d70:	701a      	strb	r2, [r3, #0]
			break;
  406d72:	e047      	b.n	406e04 <put_fat+0x1e4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  406d74:	68fb      	ldr	r3, [r7, #12]
  406d76:	6a1a      	ldr	r2, [r3, #32]
  406d78:	68bb      	ldr	r3, [r7, #8]
  406d7a:	09db      	lsrs	r3, r3, #7
  406d7c:	4413      	add	r3, r2
  406d7e:	68f8      	ldr	r0, [r7, #12]
  406d80:	4619      	mov	r1, r3
  406d82:	4b24      	ldr	r3, [pc, #144]	; (406e14 <put_fat+0x1f4>)
  406d84:	4798      	blx	r3
  406d86:	4603      	mov	r3, r0
  406d88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  406d8a:	7ffb      	ldrb	r3, [r7, #31]
  406d8c:	2b00      	cmp	r3, #0
  406d8e:	d000      	beq.n	406d92 <put_fat+0x172>
  406d90:	e038      	b.n	406e04 <put_fat+0x1e4>
			p = &fs->win[clst * 4 % SS(fs)];
  406d92:	68bb      	ldr	r3, [r7, #8]
  406d94:	009b      	lsls	r3, r3, #2
  406d96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  406d9a:	3330      	adds	r3, #48	; 0x30
  406d9c:	68fa      	ldr	r2, [r7, #12]
  406d9e:	4413      	add	r3, r2
  406da0:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
  406da2:	697b      	ldr	r3, [r7, #20]
  406da4:	3303      	adds	r3, #3
  406da6:	781b      	ldrb	r3, [r3, #0]
  406da8:	061a      	lsls	r2, r3, #24
  406daa:	697b      	ldr	r3, [r7, #20]
  406dac:	3302      	adds	r3, #2
  406dae:	781b      	ldrb	r3, [r3, #0]
  406db0:	041b      	lsls	r3, r3, #16
  406db2:	431a      	orrs	r2, r3
  406db4:	697b      	ldr	r3, [r7, #20]
  406db6:	3301      	adds	r3, #1
  406db8:	781b      	ldrb	r3, [r3, #0]
  406dba:	021b      	lsls	r3, r3, #8
  406dbc:	431a      	orrs	r2, r3
  406dbe:	697b      	ldr	r3, [r7, #20]
  406dc0:	781b      	ldrb	r3, [r3, #0]
  406dc2:	4313      	orrs	r3, r2
  406dc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  406dc8:	687a      	ldr	r2, [r7, #4]
  406dca:	4313      	orrs	r3, r2
  406dcc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
  406dce:	687b      	ldr	r3, [r7, #4]
  406dd0:	b2da      	uxtb	r2, r3
  406dd2:	697b      	ldr	r3, [r7, #20]
  406dd4:	701a      	strb	r2, [r3, #0]
  406dd6:	697b      	ldr	r3, [r7, #20]
  406dd8:	3301      	adds	r3, #1
  406dda:	687a      	ldr	r2, [r7, #4]
  406ddc:	b292      	uxth	r2, r2
  406dde:	0a12      	lsrs	r2, r2, #8
  406de0:	b292      	uxth	r2, r2
  406de2:	b2d2      	uxtb	r2, r2
  406de4:	701a      	strb	r2, [r3, #0]
  406de6:	697b      	ldr	r3, [r7, #20]
  406de8:	3302      	adds	r3, #2
  406dea:	687a      	ldr	r2, [r7, #4]
  406dec:	0c12      	lsrs	r2, r2, #16
  406dee:	b2d2      	uxtb	r2, r2
  406df0:	701a      	strb	r2, [r3, #0]
  406df2:	697b      	ldr	r3, [r7, #20]
  406df4:	3303      	adds	r3, #3
  406df6:	687a      	ldr	r2, [r7, #4]
  406df8:	0e12      	lsrs	r2, r2, #24
  406dfa:	b2d2      	uxtb	r2, r2
  406dfc:	701a      	strb	r2, [r3, #0]
			break;
  406dfe:	e001      	b.n	406e04 <put_fat+0x1e4>

		default :
			res = FR_INT_ERR;
  406e00:	2302      	movs	r3, #2
  406e02:	77fb      	strb	r3, [r7, #31]
		}
		fs->wflag = 1;
  406e04:	68fb      	ldr	r3, [r7, #12]
  406e06:	2201      	movs	r2, #1
  406e08:	711a      	strb	r2, [r3, #4]
	}

	return res;
  406e0a:	7ffb      	ldrb	r3, [r7, #31]
}
  406e0c:	4618      	mov	r0, r3
  406e0e:	3720      	adds	r7, #32
  406e10:	46bd      	mov	sp, r7
  406e12:	bd80      	pop	{r7, pc}
  406e14:	0040686d 	.word	0x0040686d

00406e18 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  406e18:	b580      	push	{r7, lr}
  406e1a:	b084      	sub	sp, #16
  406e1c:	af00      	add	r7, sp, #0
  406e1e:	6078      	str	r0, [r7, #4]
  406e20:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406e22:	683b      	ldr	r3, [r7, #0]
  406e24:	2b01      	cmp	r3, #1
  406e26:	d904      	bls.n	406e32 <remove_chain+0x1a>
  406e28:	687b      	ldr	r3, [r7, #4]
  406e2a:	699a      	ldr	r2, [r3, #24]
  406e2c:	683b      	ldr	r3, [r7, #0]
  406e2e:	429a      	cmp	r2, r3
  406e30:	d802      	bhi.n	406e38 <remove_chain+0x20>
		res = FR_INT_ERR;
  406e32:	2302      	movs	r3, #2
  406e34:	73fb      	strb	r3, [r7, #15]
  406e36:	e037      	b.n	406ea8 <remove_chain+0x90>

	} else {
		res = FR_OK;
  406e38:	2300      	movs	r3, #0
  406e3a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  406e3c:	e02f      	b.n	406e9e <remove_chain+0x86>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  406e3e:	6878      	ldr	r0, [r7, #4]
  406e40:	6839      	ldr	r1, [r7, #0]
  406e42:	4b1c      	ldr	r3, [pc, #112]	; (406eb4 <remove_chain+0x9c>)
  406e44:	4798      	blx	r3
  406e46:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
  406e48:	68bb      	ldr	r3, [r7, #8]
  406e4a:	2b00      	cmp	r3, #0
  406e4c:	d100      	bne.n	406e50 <remove_chain+0x38>
  406e4e:	e02b      	b.n	406ea8 <remove_chain+0x90>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  406e50:	68bb      	ldr	r3, [r7, #8]
  406e52:	2b01      	cmp	r3, #1
  406e54:	d102      	bne.n	406e5c <remove_chain+0x44>
  406e56:	2302      	movs	r3, #2
  406e58:	73fb      	strb	r3, [r7, #15]
  406e5a:	e025      	b.n	406ea8 <remove_chain+0x90>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  406e5c:	68bb      	ldr	r3, [r7, #8]
  406e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406e62:	d102      	bne.n	406e6a <remove_chain+0x52>
  406e64:	2301      	movs	r3, #1
  406e66:	73fb      	strb	r3, [r7, #15]
  406e68:	e01e      	b.n	406ea8 <remove_chain+0x90>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  406e6a:	6878      	ldr	r0, [r7, #4]
  406e6c:	6839      	ldr	r1, [r7, #0]
  406e6e:	2200      	movs	r2, #0
  406e70:	4b11      	ldr	r3, [pc, #68]	; (406eb8 <remove_chain+0xa0>)
  406e72:	4798      	blx	r3
  406e74:	4603      	mov	r3, r0
  406e76:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  406e78:	7bfb      	ldrb	r3, [r7, #15]
  406e7a:	2b00      	cmp	r3, #0
  406e7c:	d000      	beq.n	406e80 <remove_chain+0x68>
  406e7e:	e013      	b.n	406ea8 <remove_chain+0x90>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  406e80:	687b      	ldr	r3, [r7, #4]
  406e82:	691b      	ldr	r3, [r3, #16]
  406e84:	f1b3 3fff 	cmp.w	r3, #4294967295
  406e88:	d007      	beq.n	406e9a <remove_chain+0x82>
				fs->free_clust++;
  406e8a:	687b      	ldr	r3, [r7, #4]
  406e8c:	691b      	ldr	r3, [r3, #16]
  406e8e:	1c5a      	adds	r2, r3, #1
  406e90:	687b      	ldr	r3, [r7, #4]
  406e92:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
  406e94:	687b      	ldr	r3, [r7, #4]
  406e96:	2201      	movs	r2, #1
  406e98:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
  406e9a:	68bb      	ldr	r3, [r7, #8]
  406e9c:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  406e9e:	687b      	ldr	r3, [r7, #4]
  406ea0:	699a      	ldr	r2, [r3, #24]
  406ea2:	683b      	ldr	r3, [r7, #0]
  406ea4:	429a      	cmp	r2, r3
  406ea6:	d8ca      	bhi.n	406e3e <remove_chain+0x26>
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
  406ea8:	7bfb      	ldrb	r3, [r7, #15]
}
  406eaa:	4618      	mov	r0, r3
  406eac:	3710      	adds	r7, #16
  406eae:	46bd      	mov	sp, r7
  406eb0:	bd80      	pop	{r7, pc}
  406eb2:	bf00      	nop
  406eb4:	00406ac9 	.word	0x00406ac9
  406eb8:	00406c21 	.word	0x00406c21

00406ebc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  406ebc:	b580      	push	{r7, lr}
  406ebe:	b086      	sub	sp, #24
  406ec0:	af00      	add	r7, sp, #0
  406ec2:	6078      	str	r0, [r7, #4]
  406ec4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  406ec6:	683b      	ldr	r3, [r7, #0]
  406ec8:	2b00      	cmp	r3, #0
  406eca:	d10d      	bne.n	406ee8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
  406ecc:	687b      	ldr	r3, [r7, #4]
  406ece:	68db      	ldr	r3, [r3, #12]
  406ed0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  406ed2:	693b      	ldr	r3, [r7, #16]
  406ed4:	2b00      	cmp	r3, #0
  406ed6:	d004      	beq.n	406ee2 <create_chain+0x26>
  406ed8:	687b      	ldr	r3, [r7, #4]
  406eda:	699a      	ldr	r2, [r3, #24]
  406edc:	693b      	ldr	r3, [r7, #16]
  406ede:	429a      	cmp	r2, r3
  406ee0:	d815      	bhi.n	406f0e <create_chain+0x52>
  406ee2:	2301      	movs	r3, #1
  406ee4:	613b      	str	r3, [r7, #16]
  406ee6:	e012      	b.n	406f0e <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  406ee8:	6878      	ldr	r0, [r7, #4]
  406eea:	6839      	ldr	r1, [r7, #0]
  406eec:	4b39      	ldr	r3, [pc, #228]	; (406fd4 <create_chain+0x118>)
  406eee:	4798      	blx	r3
  406ef0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
  406ef2:	68bb      	ldr	r3, [r7, #8]
  406ef4:	2b01      	cmp	r3, #1
  406ef6:	d801      	bhi.n	406efc <create_chain+0x40>
  406ef8:	2301      	movs	r3, #1
  406efa:	e066      	b.n	406fca <create_chain+0x10e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  406efc:	687b      	ldr	r3, [r7, #4]
  406efe:	699a      	ldr	r2, [r3, #24]
  406f00:	68bb      	ldr	r3, [r7, #8]
  406f02:	429a      	cmp	r2, r3
  406f04:	d901      	bls.n	406f0a <create_chain+0x4e>
  406f06:	68bb      	ldr	r3, [r7, #8]
  406f08:	e05f      	b.n	406fca <create_chain+0x10e>
		scl = clst;
  406f0a:	683b      	ldr	r3, [r7, #0]
  406f0c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
  406f0e:	693b      	ldr	r3, [r7, #16]
  406f10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
  406f12:	697b      	ldr	r3, [r7, #20]
  406f14:	3301      	adds	r3, #1
  406f16:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  406f18:	687b      	ldr	r3, [r7, #4]
  406f1a:	699a      	ldr	r2, [r3, #24]
  406f1c:	697b      	ldr	r3, [r7, #20]
  406f1e:	429a      	cmp	r2, r3
  406f20:	d807      	bhi.n	406f32 <create_chain+0x76>
			ncl = 2;
  406f22:	2302      	movs	r3, #2
  406f24:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
  406f26:	697a      	ldr	r2, [r7, #20]
  406f28:	693b      	ldr	r3, [r7, #16]
  406f2a:	429a      	cmp	r2, r3
  406f2c:	d901      	bls.n	406f32 <create_chain+0x76>
  406f2e:	2300      	movs	r3, #0
  406f30:	e04b      	b.n	406fca <create_chain+0x10e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  406f32:	6878      	ldr	r0, [r7, #4]
  406f34:	6979      	ldr	r1, [r7, #20]
  406f36:	4b27      	ldr	r3, [pc, #156]	; (406fd4 <create_chain+0x118>)
  406f38:	4798      	blx	r3
  406f3a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
  406f3c:	68bb      	ldr	r3, [r7, #8]
  406f3e:	2b00      	cmp	r3, #0
  406f40:	d10c      	bne.n	406f5c <create_chain+0xa0>
  406f42:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  406f44:	6878      	ldr	r0, [r7, #4]
  406f46:	6979      	ldr	r1, [r7, #20]
  406f48:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  406f4c:	4b22      	ldr	r3, [pc, #136]	; (406fd8 <create_chain+0x11c>)
  406f4e:	4798      	blx	r3
  406f50:	4603      	mov	r3, r0
  406f52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
  406f54:	7bfb      	ldrb	r3, [r7, #15]
  406f56:	2b00      	cmp	r3, #0
  406f58:	d11a      	bne.n	406f90 <create_chain+0xd4>
  406f5a:	e00f      	b.n	406f7c <create_chain+0xc0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  406f5c:	68bb      	ldr	r3, [r7, #8]
  406f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406f62:	d002      	beq.n	406f6a <create_chain+0xae>
  406f64:	68bb      	ldr	r3, [r7, #8]
  406f66:	2b01      	cmp	r3, #1
  406f68:	d101      	bne.n	406f6e <create_chain+0xb2>
			return cs;
  406f6a:	68bb      	ldr	r3, [r7, #8]
  406f6c:	e02d      	b.n	406fca <create_chain+0x10e>
		if (ncl == scl) return 0;		/* No free cluster */
  406f6e:	697a      	ldr	r2, [r7, #20]
  406f70:	693b      	ldr	r3, [r7, #16]
  406f72:	429a      	cmp	r2, r3
  406f74:	d101      	bne.n	406f7a <create_chain+0xbe>
  406f76:	2300      	movs	r3, #0
  406f78:	e027      	b.n	406fca <create_chain+0x10e>
	}
  406f7a:	e7ca      	b.n	406f12 <create_chain+0x56>

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
  406f7c:	683b      	ldr	r3, [r7, #0]
  406f7e:	2b00      	cmp	r3, #0
  406f80:	d006      	beq.n	406f90 <create_chain+0xd4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  406f82:	6878      	ldr	r0, [r7, #4]
  406f84:	6839      	ldr	r1, [r7, #0]
  406f86:	697a      	ldr	r2, [r7, #20]
  406f88:	4b13      	ldr	r3, [pc, #76]	; (406fd8 <create_chain+0x11c>)
  406f8a:	4798      	blx	r3
  406f8c:	4603      	mov	r3, r0
  406f8e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
  406f90:	7bfb      	ldrb	r3, [r7, #15]
  406f92:	2b00      	cmp	r3, #0
  406f94:	d110      	bne.n	406fb8 <create_chain+0xfc>
		fs->last_clust = ncl;			/* Update FSINFO */
  406f96:	687b      	ldr	r3, [r7, #4]
  406f98:	697a      	ldr	r2, [r7, #20]
  406f9a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  406f9c:	687b      	ldr	r3, [r7, #4]
  406f9e:	691b      	ldr	r3, [r3, #16]
  406fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
  406fa4:	d010      	beq.n	406fc8 <create_chain+0x10c>
			fs->free_clust--;
  406fa6:	687b      	ldr	r3, [r7, #4]
  406fa8:	691b      	ldr	r3, [r3, #16]
  406faa:	1e5a      	subs	r2, r3, #1
  406fac:	687b      	ldr	r3, [r7, #4]
  406fae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
  406fb0:	687b      	ldr	r3, [r7, #4]
  406fb2:	2201      	movs	r2, #1
  406fb4:	715a      	strb	r2, [r3, #5]
  406fb6:	e007      	b.n	406fc8 <create_chain+0x10c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  406fb8:	7bfb      	ldrb	r3, [r7, #15]
  406fba:	2b01      	cmp	r3, #1
  406fbc:	d102      	bne.n	406fc4 <create_chain+0x108>
  406fbe:	f04f 33ff 	mov.w	r3, #4294967295
  406fc2:	e000      	b.n	406fc6 <create_chain+0x10a>
  406fc4:	2301      	movs	r3, #1
  406fc6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
  406fc8:	697b      	ldr	r3, [r7, #20]
}
  406fca:	4618      	mov	r0, r3
  406fcc:	3718      	adds	r7, #24
  406fce:	46bd      	mov	sp, r7
  406fd0:	bd80      	pop	{r7, pc}
  406fd2:	bf00      	nop
  406fd4:	00406ac9 	.word	0x00406ac9
  406fd8:	00406c21 	.word	0x00406c21

00406fdc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  406fdc:	b580      	push	{r7, lr}
  406fde:	b084      	sub	sp, #16
  406fe0:	af00      	add	r7, sp, #0
  406fe2:	6078      	str	r0, [r7, #4]
  406fe4:	460b      	mov	r3, r1
  406fe6:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
  406fe8:	687b      	ldr	r3, [r7, #4]
  406fea:	887a      	ldrh	r2, [r7, #2]
  406fec:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
  406fee:	687b      	ldr	r3, [r7, #4]
  406ff0:	689b      	ldr	r3, [r3, #8]
  406ff2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  406ff4:	68fb      	ldr	r3, [r7, #12]
  406ff6:	2b01      	cmp	r3, #1
  406ff8:	d005      	beq.n	407006 <dir_sdi+0x2a>
  406ffa:	687b      	ldr	r3, [r7, #4]
  406ffc:	681b      	ldr	r3, [r3, #0]
  406ffe:	699a      	ldr	r2, [r3, #24]
  407000:	68fb      	ldr	r3, [r7, #12]
  407002:	429a      	cmp	r2, r3
  407004:	d801      	bhi.n	40700a <dir_sdi+0x2e>
		return FR_INT_ERR;
  407006:	2302      	movs	r3, #2
  407008:	e064      	b.n	4070d4 <dir_sdi+0xf8>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  40700a:	68fb      	ldr	r3, [r7, #12]
  40700c:	2b00      	cmp	r3, #0
  40700e:	d108      	bne.n	407022 <dir_sdi+0x46>
  407010:	687b      	ldr	r3, [r7, #4]
  407012:	681b      	ldr	r3, [r3, #0]
  407014:	781b      	ldrb	r3, [r3, #0]
  407016:	2b03      	cmp	r3, #3
  407018:	d103      	bne.n	407022 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
  40701a:	687b      	ldr	r3, [r7, #4]
  40701c:	681b      	ldr	r3, [r3, #0]
  40701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407020:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  407022:	68fb      	ldr	r3, [r7, #12]
  407024:	2b00      	cmp	r3, #0
  407026:	d114      	bne.n	407052 <dir_sdi+0x76>
		dj->clust = clst;
  407028:	687b      	ldr	r3, [r7, #4]
  40702a:	68fa      	ldr	r2, [r7, #12]
  40702c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  40702e:	687b      	ldr	r3, [r7, #4]
  407030:	681b      	ldr	r3, [r3, #0]
  407032:	891b      	ldrh	r3, [r3, #8]
  407034:	887a      	ldrh	r2, [r7, #2]
  407036:	429a      	cmp	r2, r3
  407038:	d301      	bcc.n	40703e <dir_sdi+0x62>
			return FR_INT_ERR;
  40703a:	2302      	movs	r3, #2
  40703c:	e04a      	b.n	4070d4 <dir_sdi+0xf8>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40703e:	687b      	ldr	r3, [r7, #4]
  407040:	681b      	ldr	r3, [r3, #0]
  407042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  407044:	887b      	ldrh	r3, [r7, #2]
  407046:	091b      	lsrs	r3, r3, #4
  407048:	b29b      	uxth	r3, r3
  40704a:	441a      	add	r2, r3
  40704c:	687b      	ldr	r3, [r7, #4]
  40704e:	611a      	str	r2, [r3, #16]
  407050:	e035      	b.n	4070be <dir_sdi+0xe2>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  407052:	687b      	ldr	r3, [r7, #4]
  407054:	681b      	ldr	r3, [r3, #0]
  407056:	789b      	ldrb	r3, [r3, #2]
  407058:	011b      	lsls	r3, r3, #4
  40705a:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
  40705c:	e01b      	b.n	407096 <dir_sdi+0xba>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40705e:	687b      	ldr	r3, [r7, #4]
  407060:	681b      	ldr	r3, [r3, #0]
  407062:	4618      	mov	r0, r3
  407064:	68f9      	ldr	r1, [r7, #12]
  407066:	4b1d      	ldr	r3, [pc, #116]	; (4070dc <dir_sdi+0x100>)
  407068:	4798      	blx	r3
  40706a:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40706c:	68fb      	ldr	r3, [r7, #12]
  40706e:	f1b3 3fff 	cmp.w	r3, #4294967295
  407072:	d101      	bne.n	407078 <dir_sdi+0x9c>
  407074:	2301      	movs	r3, #1
  407076:	e02d      	b.n	4070d4 <dir_sdi+0xf8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  407078:	68fb      	ldr	r3, [r7, #12]
  40707a:	2b01      	cmp	r3, #1
  40707c:	d905      	bls.n	40708a <dir_sdi+0xae>
  40707e:	687b      	ldr	r3, [r7, #4]
  407080:	681b      	ldr	r3, [r3, #0]
  407082:	699a      	ldr	r2, [r3, #24]
  407084:	68fb      	ldr	r3, [r7, #12]
  407086:	429a      	cmp	r2, r3
  407088:	d801      	bhi.n	40708e <dir_sdi+0xb2>
				return FR_INT_ERR;
  40708a:	2302      	movs	r3, #2
  40708c:	e022      	b.n	4070d4 <dir_sdi+0xf8>
			idx -= ic;
  40708e:	887a      	ldrh	r2, [r7, #2]
  407090:	897b      	ldrh	r3, [r7, #10]
  407092:	1ad3      	subs	r3, r2, r3
  407094:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  407096:	887a      	ldrh	r2, [r7, #2]
  407098:	897b      	ldrh	r3, [r7, #10]
  40709a:	429a      	cmp	r2, r3
  40709c:	d2df      	bcs.n	40705e <dir_sdi+0x82>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  40709e:	687b      	ldr	r3, [r7, #4]
  4070a0:	68fa      	ldr	r2, [r7, #12]
  4070a2:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4070a4:	687b      	ldr	r3, [r7, #4]
  4070a6:	681b      	ldr	r3, [r3, #0]
  4070a8:	4618      	mov	r0, r3
  4070aa:	68f9      	ldr	r1, [r7, #12]
  4070ac:	4b0c      	ldr	r3, [pc, #48]	; (4070e0 <dir_sdi+0x104>)
  4070ae:	4798      	blx	r3
  4070b0:	4602      	mov	r2, r0
  4070b2:	887b      	ldrh	r3, [r7, #2]
  4070b4:	091b      	lsrs	r3, r3, #4
  4070b6:	b29b      	uxth	r3, r3
  4070b8:	441a      	add	r2, r3
  4070ba:	687b      	ldr	r3, [r7, #4]
  4070bc:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4070be:	687b      	ldr	r3, [r7, #4]
  4070c0:	681a      	ldr	r2, [r3, #0]
  4070c2:	887b      	ldrh	r3, [r7, #2]
  4070c4:	f003 030f 	and.w	r3, r3, #15
  4070c8:	015b      	lsls	r3, r3, #5
  4070ca:	3330      	adds	r3, #48	; 0x30
  4070cc:	441a      	add	r2, r3
  4070ce:	687b      	ldr	r3, [r7, #4]
  4070d0:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
  4070d2:	2300      	movs	r3, #0
}
  4070d4:	4618      	mov	r0, r3
  4070d6:	3710      	adds	r7, #16
  4070d8:	46bd      	mov	sp, r7
  4070da:	bd80      	pop	{r7, pc}
  4070dc:	00406ac9 	.word	0x00406ac9
  4070e0:	00406a8d 	.word	0x00406a8d

004070e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  4070e4:	b590      	push	{r4, r7, lr}
  4070e6:	b085      	sub	sp, #20
  4070e8:	af00      	add	r7, sp, #0
  4070ea:	6078      	str	r0, [r7, #4]
  4070ec:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  4070ee:	687b      	ldr	r3, [r7, #4]
  4070f0:	88db      	ldrh	r3, [r3, #6]
  4070f2:	3301      	adds	r3, #1
  4070f4:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4070f6:	893b      	ldrh	r3, [r7, #8]
  4070f8:	2b00      	cmp	r3, #0
  4070fa:	d003      	beq.n	407104 <dir_next+0x20>
  4070fc:	687b      	ldr	r3, [r7, #4]
  4070fe:	691b      	ldr	r3, [r3, #16]
  407100:	2b00      	cmp	r3, #0
  407102:	d101      	bne.n	407108 <dir_next+0x24>
		return FR_NO_FILE;
  407104:	2304      	movs	r3, #4
  407106:	e0bc      	b.n	407282 <dir_next+0x19e>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  407108:	893b      	ldrh	r3, [r7, #8]
  40710a:	f003 030f 	and.w	r3, r3, #15
  40710e:	b29b      	uxth	r3, r3
  407110:	2b00      	cmp	r3, #0
  407112:	f040 80a8 	bne.w	407266 <dir_next+0x182>
		dj->sect++;					/* Next sector */
  407116:	687b      	ldr	r3, [r7, #4]
  407118:	691b      	ldr	r3, [r3, #16]
  40711a:	1c5a      	adds	r2, r3, #1
  40711c:	687b      	ldr	r3, [r7, #4]
  40711e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
  407120:	687b      	ldr	r3, [r7, #4]
  407122:	68db      	ldr	r3, [r3, #12]
  407124:	2b00      	cmp	r3, #0
  407126:	d108      	bne.n	40713a <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  407128:	687b      	ldr	r3, [r7, #4]
  40712a:	681b      	ldr	r3, [r3, #0]
  40712c:	891b      	ldrh	r3, [r3, #8]
  40712e:	893a      	ldrh	r2, [r7, #8]
  407130:	429a      	cmp	r2, r3
  407132:	f0c0 8098 	bcc.w	407266 <dir_next+0x182>
				return FR_NO_FILE;
  407136:	2304      	movs	r3, #4
  407138:	e0a3      	b.n	407282 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  40713a:	893b      	ldrh	r3, [r7, #8]
  40713c:	091b      	lsrs	r3, r3, #4
  40713e:	b29b      	uxth	r3, r3
  407140:	461a      	mov	r2, r3
  407142:	687b      	ldr	r3, [r7, #4]
  407144:	681b      	ldr	r3, [r3, #0]
  407146:	789b      	ldrb	r3, [r3, #2]
  407148:	3b01      	subs	r3, #1
  40714a:	4013      	ands	r3, r2
  40714c:	2b00      	cmp	r3, #0
  40714e:	f040 808a 	bne.w	407266 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  407152:	687b      	ldr	r3, [r7, #4]
  407154:	681a      	ldr	r2, [r3, #0]
  407156:	687b      	ldr	r3, [r7, #4]
  407158:	68db      	ldr	r3, [r3, #12]
  40715a:	4610      	mov	r0, r2
  40715c:	4619      	mov	r1, r3
  40715e:	4b4b      	ldr	r3, [pc, #300]	; (40728c <dir_next+0x1a8>)
  407160:	4798      	blx	r3
  407162:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
  407164:	68fb      	ldr	r3, [r7, #12]
  407166:	2b01      	cmp	r3, #1
  407168:	d801      	bhi.n	40716e <dir_next+0x8a>
  40716a:	2302      	movs	r3, #2
  40716c:	e089      	b.n	407282 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40716e:	68fb      	ldr	r3, [r7, #12]
  407170:	f1b3 3fff 	cmp.w	r3, #4294967295
  407174:	d101      	bne.n	40717a <dir_next+0x96>
  407176:	2301      	movs	r3, #1
  407178:	e083      	b.n	407282 <dir_next+0x19e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40717a:	687b      	ldr	r3, [r7, #4]
  40717c:	681b      	ldr	r3, [r3, #0]
  40717e:	699a      	ldr	r2, [r3, #24]
  407180:	68fb      	ldr	r3, [r7, #12]
  407182:	429a      	cmp	r2, r3
  407184:	d863      	bhi.n	40724e <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  407186:	683b      	ldr	r3, [r7, #0]
  407188:	2b00      	cmp	r3, #0
  40718a:	d101      	bne.n	407190 <dir_next+0xac>
  40718c:	2304      	movs	r3, #4
  40718e:	e078      	b.n	407282 <dir_next+0x19e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  407190:	687b      	ldr	r3, [r7, #4]
  407192:	681a      	ldr	r2, [r3, #0]
  407194:	687b      	ldr	r3, [r7, #4]
  407196:	68db      	ldr	r3, [r3, #12]
  407198:	4610      	mov	r0, r2
  40719a:	4619      	mov	r1, r3
  40719c:	4b3c      	ldr	r3, [pc, #240]	; (407290 <dir_next+0x1ac>)
  40719e:	4798      	blx	r3
  4071a0:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4071a2:	68fb      	ldr	r3, [r7, #12]
  4071a4:	2b00      	cmp	r3, #0
  4071a6:	d101      	bne.n	4071ac <dir_next+0xc8>
  4071a8:	2307      	movs	r3, #7
  4071aa:	e06a      	b.n	407282 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
  4071ac:	68fb      	ldr	r3, [r7, #12]
  4071ae:	2b01      	cmp	r3, #1
  4071b0:	d101      	bne.n	4071b6 <dir_next+0xd2>
  4071b2:	2302      	movs	r3, #2
  4071b4:	e065      	b.n	407282 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4071b6:	68fb      	ldr	r3, [r7, #12]
  4071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4071bc:	d101      	bne.n	4071c2 <dir_next+0xde>
  4071be:	2301      	movs	r3, #1
  4071c0:	e05f      	b.n	407282 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4071c2:	687b      	ldr	r3, [r7, #4]
  4071c4:	681b      	ldr	r3, [r3, #0]
  4071c6:	4618      	mov	r0, r3
  4071c8:	2100      	movs	r1, #0
  4071ca:	4b32      	ldr	r3, [pc, #200]	; (407294 <dir_next+0x1b0>)
  4071cc:	4798      	blx	r3
  4071ce:	4603      	mov	r3, r0
  4071d0:	2b00      	cmp	r3, #0
  4071d2:	d001      	beq.n	4071d8 <dir_next+0xf4>
  4071d4:	2301      	movs	r3, #1
  4071d6:	e054      	b.n	407282 <dir_next+0x19e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4071d8:	687b      	ldr	r3, [r7, #4]
  4071da:	681b      	ldr	r3, [r3, #0]
  4071dc:	3330      	adds	r3, #48	; 0x30
  4071de:	4618      	mov	r0, r3
  4071e0:	2100      	movs	r1, #0
  4071e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4071e6:	4b2c      	ldr	r3, [pc, #176]	; (407298 <dir_next+0x1b4>)
  4071e8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4071ea:	687b      	ldr	r3, [r7, #4]
  4071ec:	681c      	ldr	r4, [r3, #0]
  4071ee:	687b      	ldr	r3, [r7, #4]
  4071f0:	681b      	ldr	r3, [r3, #0]
  4071f2:	4618      	mov	r0, r3
  4071f4:	68f9      	ldr	r1, [r7, #12]
  4071f6:	4b29      	ldr	r3, [pc, #164]	; (40729c <dir_next+0x1b8>)
  4071f8:	4798      	blx	r3
  4071fa:	4603      	mov	r3, r0
  4071fc:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4071fe:	2300      	movs	r3, #0
  407200:	72fb      	strb	r3, [r7, #11]
  407202:	e016      	b.n	407232 <dir_next+0x14e>
						dj->fs->wflag = 1;
  407204:	687b      	ldr	r3, [r7, #4]
  407206:	681b      	ldr	r3, [r3, #0]
  407208:	2201      	movs	r2, #1
  40720a:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40720c:	687b      	ldr	r3, [r7, #4]
  40720e:	681b      	ldr	r3, [r3, #0]
  407210:	4618      	mov	r0, r3
  407212:	2100      	movs	r1, #0
  407214:	4b1f      	ldr	r3, [pc, #124]	; (407294 <dir_next+0x1b0>)
  407216:	4798      	blx	r3
  407218:	4603      	mov	r3, r0
  40721a:	2b00      	cmp	r3, #0
  40721c:	d001      	beq.n	407222 <dir_next+0x13e>
  40721e:	2301      	movs	r3, #1
  407220:	e02f      	b.n	407282 <dir_next+0x19e>
						dj->fs->winsect++;
  407222:	687b      	ldr	r3, [r7, #4]
  407224:	681b      	ldr	r3, [r3, #0]
  407226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407228:	3201      	adds	r2, #1
  40722a:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40722c:	7afb      	ldrb	r3, [r7, #11]
  40722e:	3301      	adds	r3, #1
  407230:	72fb      	strb	r3, [r7, #11]
  407232:	687b      	ldr	r3, [r7, #4]
  407234:	681b      	ldr	r3, [r3, #0]
  407236:	789b      	ldrb	r3, [r3, #2]
  407238:	7afa      	ldrb	r2, [r7, #11]
  40723a:	429a      	cmp	r2, r3
  40723c:	d3e2      	bcc.n	407204 <dir_next+0x120>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  40723e:	687b      	ldr	r3, [r7, #4]
  407240:	681b      	ldr	r3, [r3, #0]
  407242:	687a      	ldr	r2, [r7, #4]
  407244:	6812      	ldr	r2, [r2, #0]
  407246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  407248:	7afa      	ldrb	r2, [r7, #11]
  40724a:	1a8a      	subs	r2, r1, r2
  40724c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  40724e:	687b      	ldr	r3, [r7, #4]
  407250:	68fa      	ldr	r2, [r7, #12]
  407252:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
  407254:	687b      	ldr	r3, [r7, #4]
  407256:	681b      	ldr	r3, [r3, #0]
  407258:	4618      	mov	r0, r3
  40725a:	68f9      	ldr	r1, [r7, #12]
  40725c:	4b0f      	ldr	r3, [pc, #60]	; (40729c <dir_next+0x1b8>)
  40725e:	4798      	blx	r3
  407260:	4602      	mov	r2, r0
  407262:	687b      	ldr	r3, [r7, #4]
  407264:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
  407266:	687b      	ldr	r3, [r7, #4]
  407268:	893a      	ldrh	r2, [r7, #8]
  40726a:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40726c:	687b      	ldr	r3, [r7, #4]
  40726e:	681a      	ldr	r2, [r3, #0]
  407270:	893b      	ldrh	r3, [r7, #8]
  407272:	f003 030f 	and.w	r3, r3, #15
  407276:	015b      	lsls	r3, r3, #5
  407278:	3330      	adds	r3, #48	; 0x30
  40727a:	441a      	add	r2, r3
  40727c:	687b      	ldr	r3, [r7, #4]
  40727e:	615a      	str	r2, [r3, #20]

	return FR_OK;
  407280:	2300      	movs	r3, #0
}
  407282:	4618      	mov	r0, r3
  407284:	3714      	adds	r7, #20
  407286:	46bd      	mov	sp, r7
  407288:	bd90      	pop	{r4, r7, pc}
  40728a:	bf00      	nop
  40728c:	00406ac9 	.word	0x00406ac9
  407290:	00406ebd 	.word	0x00406ebd
  407294:	0040686d 	.word	0x0040686d
  407298:	00406461 	.word	0x00406461
  40729c:	00406a8d 	.word	0x00406a8d

004072a0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
  4072a0:	b580      	push	{r7, lr}
  4072a2:	b086      	sub	sp, #24
  4072a4:	af00      	add	r7, sp, #0
  4072a6:	6078      	str	r0, [r7, #4]
  4072a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  4072aa:	683b      	ldr	r3, [r7, #0]
  4072ac:	781b      	ldrb	r3, [r3, #0]
  4072ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4072b2:	1e5a      	subs	r2, r3, #1
  4072b4:	4613      	mov	r3, r2
  4072b6:	005b      	lsls	r3, r3, #1
  4072b8:	4413      	add	r3, r2
  4072ba:	009b      	lsls	r3, r3, #2
  4072bc:	4413      	add	r3, r2
  4072be:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
  4072c0:	2300      	movs	r3, #0
  4072c2:	613b      	str	r3, [r7, #16]
  4072c4:	2301      	movs	r3, #1
  4072c6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4072c8:	4a29      	ldr	r2, [pc, #164]	; (407370 <cmp_lfn+0xd0>)
  4072ca:	693b      	ldr	r3, [r7, #16]
  4072cc:	4413      	add	r3, r2
  4072ce:	781b      	ldrb	r3, [r3, #0]
  4072d0:	3301      	adds	r3, #1
  4072d2:	683a      	ldr	r2, [r7, #0]
  4072d4:	4413      	add	r3, r2
  4072d6:	781b      	ldrb	r3, [r3, #0]
  4072d8:	021b      	lsls	r3, r3, #8
  4072da:	b29a      	uxth	r2, r3
  4072dc:	4924      	ldr	r1, [pc, #144]	; (407370 <cmp_lfn+0xd0>)
  4072de:	693b      	ldr	r3, [r7, #16]
  4072e0:	440b      	add	r3, r1
  4072e2:	781b      	ldrb	r3, [r3, #0]
  4072e4:	6839      	ldr	r1, [r7, #0]
  4072e6:	440b      	add	r3, r1
  4072e8:	781b      	ldrb	r3, [r3, #0]
  4072ea:	4313      	orrs	r3, r2
  4072ec:	b29b      	uxth	r3, r3
  4072ee:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  4072f0:	89fb      	ldrh	r3, [r7, #14]
  4072f2:	2b00      	cmp	r3, #0
  4072f4:	d018      	beq.n	407328 <cmp_lfn+0x88>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4072f6:	89bb      	ldrh	r3, [r7, #12]
  4072f8:	4618      	mov	r0, r3
  4072fa:	4b1e      	ldr	r3, [pc, #120]	; (407374 <cmp_lfn+0xd4>)
  4072fc:	4798      	blx	r3
  4072fe:	4603      	mov	r3, r0
  407300:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  407302:	697b      	ldr	r3, [r7, #20]
  407304:	2bfe      	cmp	r3, #254	; 0xfe
  407306:	d80d      	bhi.n	407324 <cmp_lfn+0x84>
  407308:	697b      	ldr	r3, [r7, #20]
  40730a:	1c5a      	adds	r2, r3, #1
  40730c:	617a      	str	r2, [r7, #20]
  40730e:	005b      	lsls	r3, r3, #1
  407310:	687a      	ldr	r2, [r7, #4]
  407312:	4413      	add	r3, r2
  407314:	881b      	ldrh	r3, [r3, #0]
  407316:	4618      	mov	r0, r3
  407318:	4b16      	ldr	r3, [pc, #88]	; (407374 <cmp_lfn+0xd4>)
  40731a:	4798      	blx	r3
  40731c:	4603      	mov	r3, r0
  40731e:	89fa      	ldrh	r2, [r7, #14]
  407320:	429a      	cmp	r2, r3
  407322:	d008      	beq.n	407336 <cmp_lfn+0x96>
				return 0;				/* Not matched */
  407324:	2300      	movs	r3, #0
  407326:	e01f      	b.n	407368 <cmp_lfn+0xc8>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  407328:	89ba      	ldrh	r2, [r7, #12]
  40732a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40732e:	429a      	cmp	r2, r3
  407330:	d001      	beq.n	407336 <cmp_lfn+0x96>
  407332:	2300      	movs	r3, #0
  407334:	e018      	b.n	407368 <cmp_lfn+0xc8>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  407336:	693b      	ldr	r3, [r7, #16]
  407338:	3301      	adds	r3, #1
  40733a:	613b      	str	r3, [r7, #16]
  40733c:	693b      	ldr	r3, [r7, #16]
  40733e:	2b0c      	cmp	r3, #12
  407340:	d9c2      	bls.n	4072c8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  407342:	683b      	ldr	r3, [r7, #0]
  407344:	781b      	ldrb	r3, [r3, #0]
  407346:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40734a:	2b00      	cmp	r3, #0
  40734c:	d00b      	beq.n	407366 <cmp_lfn+0xc6>
  40734e:	89fb      	ldrh	r3, [r7, #14]
  407350:	2b00      	cmp	r3, #0
  407352:	d008      	beq.n	407366 <cmp_lfn+0xc6>
  407354:	697b      	ldr	r3, [r7, #20]
  407356:	005b      	lsls	r3, r3, #1
  407358:	687a      	ldr	r2, [r7, #4]
  40735a:	4413      	add	r3, r2
  40735c:	881b      	ldrh	r3, [r3, #0]
  40735e:	2b00      	cmp	r3, #0
  407360:	d001      	beq.n	407366 <cmp_lfn+0xc6>
		return 0;
  407362:	2300      	movs	r3, #0
  407364:	e000      	b.n	407368 <cmp_lfn+0xc8>

	return 1;						/* The part of LFN matched */
  407366:	2301      	movs	r3, #1
}
  407368:	4618      	mov	r0, r3
  40736a:	3718      	adds	r7, #24
  40736c:	46bd      	mov	sp, r7
  40736e:	bd80      	pop	{r7, pc}
  407370:	0041ced0 	.word	0x0041ced0
  407374:	0040a42d 	.word	0x0040a42d

00407378 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
  407378:	b480      	push	{r7}
  40737a:	b087      	sub	sp, #28
  40737c:	af00      	add	r7, sp, #0
  40737e:	6078      	str	r0, [r7, #4]
  407380:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  407382:	683b      	ldr	r3, [r7, #0]
  407384:	781b      	ldrb	r3, [r3, #0]
  407386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40738a:	1e5a      	subs	r2, r3, #1
  40738c:	4613      	mov	r3, r2
  40738e:	005b      	lsls	r3, r3, #1
  407390:	4413      	add	r3, r2
  407392:	009b      	lsls	r3, r3, #2
  407394:	4413      	add	r3, r2
  407396:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
  407398:	2300      	movs	r3, #0
  40739a:	613b      	str	r3, [r7, #16]
  40739c:	2301      	movs	r3, #1
  40739e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  4073a0:	4a25      	ldr	r2, [pc, #148]	; (407438 <pick_lfn+0xc0>)
  4073a2:	693b      	ldr	r3, [r7, #16]
  4073a4:	4413      	add	r3, r2
  4073a6:	781b      	ldrb	r3, [r3, #0]
  4073a8:	3301      	adds	r3, #1
  4073aa:	683a      	ldr	r2, [r7, #0]
  4073ac:	4413      	add	r3, r2
  4073ae:	781b      	ldrb	r3, [r3, #0]
  4073b0:	021b      	lsls	r3, r3, #8
  4073b2:	b29a      	uxth	r2, r3
  4073b4:	4920      	ldr	r1, [pc, #128]	; (407438 <pick_lfn+0xc0>)
  4073b6:	693b      	ldr	r3, [r7, #16]
  4073b8:	440b      	add	r3, r1
  4073ba:	781b      	ldrb	r3, [r3, #0]
  4073bc:	6839      	ldr	r1, [r7, #0]
  4073be:	440b      	add	r3, r1
  4073c0:	781b      	ldrb	r3, [r3, #0]
  4073c2:	4313      	orrs	r3, r2
  4073c4:	b29b      	uxth	r3, r3
  4073c6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  4073c8:	89fb      	ldrh	r3, [r7, #14]
  4073ca:	2b00      	cmp	r3, #0
  4073cc:	d00f      	beq.n	4073ee <pick_lfn+0x76>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  4073ce:	697b      	ldr	r3, [r7, #20]
  4073d0:	2bfe      	cmp	r3, #254	; 0xfe
  4073d2:	d901      	bls.n	4073d8 <pick_lfn+0x60>
  4073d4:	2300      	movs	r3, #0
  4073d6:	e029      	b.n	40742c <pick_lfn+0xb4>
			lfnbuf[i++] = wc = uc;			/* Store it */
  4073d8:	697b      	ldr	r3, [r7, #20]
  4073da:	1c5a      	adds	r2, r3, #1
  4073dc:	617a      	str	r2, [r7, #20]
  4073de:	005b      	lsls	r3, r3, #1
  4073e0:	687a      	ldr	r2, [r7, #4]
  4073e2:	4413      	add	r3, r2
  4073e4:	89ba      	ldrh	r2, [r7, #12]
  4073e6:	81fa      	strh	r2, [r7, #14]
  4073e8:	89fa      	ldrh	r2, [r7, #14]
  4073ea:	801a      	strh	r2, [r3, #0]
  4073ec:	e006      	b.n	4073fc <pick_lfn+0x84>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
  4073ee:	89ba      	ldrh	r2, [r7, #12]
  4073f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4073f4:	429a      	cmp	r2, r3
  4073f6:	d001      	beq.n	4073fc <pick_lfn+0x84>
  4073f8:	2300      	movs	r3, #0
  4073fa:	e017      	b.n	40742c <pick_lfn+0xb4>
		}
	} while (++s < 13);						/* Read all character in the entry */
  4073fc:	693b      	ldr	r3, [r7, #16]
  4073fe:	3301      	adds	r3, #1
  407400:	613b      	str	r3, [r7, #16]
  407402:	693b      	ldr	r3, [r7, #16]
  407404:	2b0c      	cmp	r3, #12
  407406:	d9cb      	bls.n	4073a0 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  407408:	683b      	ldr	r3, [r7, #0]
  40740a:	781b      	ldrb	r3, [r3, #0]
  40740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407410:	2b00      	cmp	r3, #0
  407412:	d00a      	beq.n	40742a <pick_lfn+0xb2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  407414:	697b      	ldr	r3, [r7, #20]
  407416:	2bfe      	cmp	r3, #254	; 0xfe
  407418:	d901      	bls.n	40741e <pick_lfn+0xa6>
  40741a:	2300      	movs	r3, #0
  40741c:	e006      	b.n	40742c <pick_lfn+0xb4>
		lfnbuf[i] = 0;
  40741e:	697b      	ldr	r3, [r7, #20]
  407420:	005b      	lsls	r3, r3, #1
  407422:	687a      	ldr	r2, [r7, #4]
  407424:	4413      	add	r3, r2
  407426:	2200      	movs	r2, #0
  407428:	801a      	strh	r2, [r3, #0]
	}

	return 1;
  40742a:	2301      	movs	r3, #1
}
  40742c:	4618      	mov	r0, r3
  40742e:	371c      	adds	r7, #28
  407430:	46bd      	mov	sp, r7
  407432:	f85d 7b04 	ldr.w	r7, [sp], #4
  407436:	4770      	bx	lr
  407438:	0041ced0 	.word	0x0041ced0

0040743c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
  40743c:	b480      	push	{r7}
  40743e:	b089      	sub	sp, #36	; 0x24
  407440:	af00      	add	r7, sp, #0
  407442:	60f8      	str	r0, [r7, #12]
  407444:	60b9      	str	r1, [r7, #8]
  407446:	71fa      	strb	r2, [r7, #7]
  407448:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  40744a:	68bb      	ldr	r3, [r7, #8]
  40744c:	330d      	adds	r3, #13
  40744e:	79ba      	ldrb	r2, [r7, #6]
  407450:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  407452:	68bb      	ldr	r3, [r7, #8]
  407454:	330b      	adds	r3, #11
  407456:	220f      	movs	r2, #15
  407458:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
  40745a:	68bb      	ldr	r3, [r7, #8]
  40745c:	330c      	adds	r3, #12
  40745e:	2200      	movs	r2, #0
  407460:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  407462:	68bb      	ldr	r3, [r7, #8]
  407464:	331a      	adds	r3, #26
  407466:	2200      	movs	r2, #0
  407468:	701a      	strb	r2, [r3, #0]
  40746a:	68bb      	ldr	r3, [r7, #8]
  40746c:	331b      	adds	r3, #27
  40746e:	2200      	movs	r2, #0
  407470:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  407472:	79fb      	ldrb	r3, [r7, #7]
  407474:	1e5a      	subs	r2, r3, #1
  407476:	4613      	mov	r3, r2
  407478:	005b      	lsls	r3, r3, #1
  40747a:	4413      	add	r3, r2
  40747c:	009b      	lsls	r3, r3, #2
  40747e:	4413      	add	r3, r2
  407480:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
  407482:	2300      	movs	r3, #0
  407484:	82fb      	strh	r3, [r7, #22]
  407486:	2300      	movs	r3, #0
  407488:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40748a:	8afa      	ldrh	r2, [r7, #22]
  40748c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407490:	429a      	cmp	r2, r3
  407492:	d007      	beq.n	4074a4 <fit_lfn+0x68>
  407494:	69fb      	ldr	r3, [r7, #28]
  407496:	1c5a      	adds	r2, r3, #1
  407498:	61fa      	str	r2, [r7, #28]
  40749a:	005b      	lsls	r3, r3, #1
  40749c:	68fa      	ldr	r2, [r7, #12]
  40749e:	4413      	add	r3, r2
  4074a0:	881b      	ldrh	r3, [r3, #0]
  4074a2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4074a4:	4a1c      	ldr	r2, [pc, #112]	; (407518 <fit_lfn+0xdc>)
  4074a6:	69bb      	ldr	r3, [r7, #24]
  4074a8:	4413      	add	r3, r2
  4074aa:	781b      	ldrb	r3, [r3, #0]
  4074ac:	68ba      	ldr	r2, [r7, #8]
  4074ae:	4413      	add	r3, r2
  4074b0:	8afa      	ldrh	r2, [r7, #22]
  4074b2:	b2d2      	uxtb	r2, r2
  4074b4:	701a      	strb	r2, [r3, #0]
  4074b6:	4a18      	ldr	r2, [pc, #96]	; (407518 <fit_lfn+0xdc>)
  4074b8:	69bb      	ldr	r3, [r7, #24]
  4074ba:	4413      	add	r3, r2
  4074bc:	781b      	ldrb	r3, [r3, #0]
  4074be:	3301      	adds	r3, #1
  4074c0:	68ba      	ldr	r2, [r7, #8]
  4074c2:	4413      	add	r3, r2
  4074c4:	8afa      	ldrh	r2, [r7, #22]
  4074c6:	0a12      	lsrs	r2, r2, #8
  4074c8:	b292      	uxth	r2, r2
  4074ca:	b2d2      	uxtb	r2, r2
  4074cc:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4074ce:	8afb      	ldrh	r3, [r7, #22]
  4074d0:	2b00      	cmp	r3, #0
  4074d2:	d102      	bne.n	4074da <fit_lfn+0x9e>
  4074d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4074d8:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
  4074da:	69bb      	ldr	r3, [r7, #24]
  4074dc:	3301      	adds	r3, #1
  4074de:	61bb      	str	r3, [r7, #24]
  4074e0:	69bb      	ldr	r3, [r7, #24]
  4074e2:	2b0c      	cmp	r3, #12
  4074e4:	d9d1      	bls.n	40748a <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  4074e6:	8afa      	ldrh	r2, [r7, #22]
  4074e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4074ec:	429a      	cmp	r2, r3
  4074ee:	d006      	beq.n	4074fe <fit_lfn+0xc2>
  4074f0:	69fb      	ldr	r3, [r7, #28]
  4074f2:	005b      	lsls	r3, r3, #1
  4074f4:	68fa      	ldr	r2, [r7, #12]
  4074f6:	4413      	add	r3, r2
  4074f8:	881b      	ldrh	r3, [r3, #0]
  4074fa:	2b00      	cmp	r3, #0
  4074fc:	d103      	bne.n	407506 <fit_lfn+0xca>
  4074fe:	79fb      	ldrb	r3, [r7, #7]
  407500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407504:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  407506:	68bb      	ldr	r3, [r7, #8]
  407508:	79fa      	ldrb	r2, [r7, #7]
  40750a:	701a      	strb	r2, [r3, #0]
}
  40750c:	3724      	adds	r7, #36	; 0x24
  40750e:	46bd      	mov	sp, r7
  407510:	f85d 7b04 	ldr.w	r7, [sp], #4
  407514:	4770      	bx	lr
  407516:	bf00      	nop
  407518:	0041ced0 	.word	0x0041ced0

0040751c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
  40751c:	b580      	push	{r7, lr}
  40751e:	b08a      	sub	sp, #40	; 0x28
  407520:	af00      	add	r7, sp, #0
  407522:	60f8      	str	r0, [r7, #12]
  407524:	60b9      	str	r1, [r7, #8]
  407526:	607a      	str	r2, [r7, #4]
  407528:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  40752a:	68f8      	ldr	r0, [r7, #12]
  40752c:	68b9      	ldr	r1, [r7, #8]
  40752e:	220b      	movs	r2, #11
  407530:	4b33      	ldr	r3, [pc, #204]	; (407600 <gen_numname+0xe4>)
  407532:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  407534:	887b      	ldrh	r3, [r7, #2]
  407536:	2b05      	cmp	r3, #5
  407538:	d90f      	bls.n	40755a <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  40753a:	887b      	ldrh	r3, [r7, #2]
  40753c:	b29a      	uxth	r2, r3
  40753e:	0852      	lsrs	r2, r2, #1
  407540:	03db      	lsls	r3, r3, #15
  407542:	4313      	orrs	r3, r2
  407544:	b29a      	uxth	r2, r3
  407546:	687b      	ldr	r3, [r7, #4]
  407548:	1c99      	adds	r1, r3, #2
  40754a:	6079      	str	r1, [r7, #4]
  40754c:	881b      	ldrh	r3, [r3, #0]
  40754e:	4413      	add	r3, r2
  407550:	807b      	strh	r3, [r7, #2]
  407552:	687b      	ldr	r3, [r7, #4]
  407554:	881b      	ldrh	r3, [r3, #0]
  407556:	2b00      	cmp	r3, #0
  407558:	d1ef      	bne.n	40753a <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
  40755a:	2307      	movs	r3, #7
  40755c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
  40755e:	887b      	ldrh	r3, [r7, #2]
  407560:	b2db      	uxtb	r3, r3
  407562:	f003 030f 	and.w	r3, r3, #15
  407566:	b2db      	uxtb	r3, r3
  407568:	3330      	adds	r3, #48	; 0x30
  40756a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
  40756e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407572:	2b39      	cmp	r3, #57	; 0x39
  407574:	d904      	bls.n	407580 <gen_numname+0x64>
  407576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40757a:	3307      	adds	r3, #7
  40757c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
  407580:	6a3b      	ldr	r3, [r7, #32]
  407582:	1e5a      	subs	r2, r3, #1
  407584:	623a      	str	r2, [r7, #32]
  407586:	f107 0128 	add.w	r1, r7, #40	; 0x28
  40758a:	440b      	add	r3, r1
  40758c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  407590:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
  407594:	887b      	ldrh	r3, [r7, #2]
  407596:	091b      	lsrs	r3, r3, #4
  407598:	807b      	strh	r3, [r7, #2]
	} while (seq);
  40759a:	887b      	ldrh	r3, [r7, #2]
  40759c:	2b00      	cmp	r3, #0
  40759e:	d1de      	bne.n	40755e <gen_numname+0x42>
	ns[i] = '~';
  4075a0:	f107 0214 	add.w	r2, r7, #20
  4075a4:	6a3b      	ldr	r3, [r7, #32]
  4075a6:	4413      	add	r3, r2
  4075a8:	227e      	movs	r2, #126	; 0x7e
  4075aa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4075ac:	2300      	movs	r3, #0
  4075ae:	61fb      	str	r3, [r7, #28]
  4075b0:	e002      	b.n	4075b8 <gen_numname+0x9c>
  4075b2:	69fb      	ldr	r3, [r7, #28]
  4075b4:	3301      	adds	r3, #1
  4075b6:	61fb      	str	r3, [r7, #28]
  4075b8:	69fa      	ldr	r2, [r7, #28]
  4075ba:	6a3b      	ldr	r3, [r7, #32]
  4075bc:	429a      	cmp	r2, r3
  4075be:	d205      	bcs.n	4075cc <gen_numname+0xb0>
  4075c0:	68fa      	ldr	r2, [r7, #12]
  4075c2:	69fb      	ldr	r3, [r7, #28]
  4075c4:	4413      	add	r3, r2
  4075c6:	781b      	ldrb	r3, [r3, #0]
  4075c8:	2b20      	cmp	r3, #32
  4075ca:	d1f2      	bne.n	4075b2 <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4075cc:	69fb      	ldr	r3, [r7, #28]
  4075ce:	1c5a      	adds	r2, r3, #1
  4075d0:	61fa      	str	r2, [r7, #28]
  4075d2:	68fa      	ldr	r2, [r7, #12]
  4075d4:	441a      	add	r2, r3
  4075d6:	6a3b      	ldr	r3, [r7, #32]
  4075d8:	2b07      	cmp	r3, #7
  4075da:	d808      	bhi.n	4075ee <gen_numname+0xd2>
  4075dc:	6a3b      	ldr	r3, [r7, #32]
  4075de:	1c59      	adds	r1, r3, #1
  4075e0:	6239      	str	r1, [r7, #32]
  4075e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
  4075e6:	440b      	add	r3, r1
  4075e8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  4075ec:	e000      	b.n	4075f0 <gen_numname+0xd4>
  4075ee:	2320      	movs	r3, #32
  4075f0:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
  4075f2:	69fb      	ldr	r3, [r7, #28]
  4075f4:	2b07      	cmp	r3, #7
  4075f6:	d9e9      	bls.n	4075cc <gen_numname+0xb0>
}
  4075f8:	3728      	adds	r7, #40	; 0x28
  4075fa:	46bd      	mov	sp, r7
  4075fc:	bd80      	pop	{r7, pc}
  4075fe:	bf00      	nop
  407600:	00406425 	.word	0x00406425

00407604 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  407604:	b480      	push	{r7}
  407606:	b085      	sub	sp, #20
  407608:	af00      	add	r7, sp, #0
  40760a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
  40760c:	2300      	movs	r3, #0
  40760e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
  407610:	230b      	movs	r3, #11
  407612:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  407614:	7bfb      	ldrb	r3, [r7, #15]
  407616:	b2da      	uxtb	r2, r3
  407618:	0852      	lsrs	r2, r2, #1
  40761a:	01db      	lsls	r3, r3, #7
  40761c:	4313      	orrs	r3, r2
  40761e:	b2da      	uxtb	r2, r3
  407620:	687b      	ldr	r3, [r7, #4]
  407622:	1c59      	adds	r1, r3, #1
  407624:	6079      	str	r1, [r7, #4]
  407626:	781b      	ldrb	r3, [r3, #0]
  407628:	4413      	add	r3, r2
  40762a:	73fb      	strb	r3, [r7, #15]
  40762c:	68bb      	ldr	r3, [r7, #8]
  40762e:	3b01      	subs	r3, #1
  407630:	60bb      	str	r3, [r7, #8]
  407632:	68bb      	ldr	r3, [r7, #8]
  407634:	2b00      	cmp	r3, #0
  407636:	d1ed      	bne.n	407614 <sum_sfn+0x10>
	return sum;
  407638:	7bfb      	ldrb	r3, [r7, #15]
}
  40763a:	4618      	mov	r0, r3
  40763c:	3714      	adds	r7, #20
  40763e:	46bd      	mov	sp, r7
  407640:	f85d 7b04 	ldr.w	r7, [sp], #4
  407644:	4770      	bx	lr
  407646:	bf00      	nop

00407648 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  407648:	b580      	push	{r7, lr}
  40764a:	b086      	sub	sp, #24
  40764c:	af00      	add	r7, sp, #0
  40764e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  407650:	6878      	ldr	r0, [r7, #4]
  407652:	2100      	movs	r1, #0
  407654:	4b50      	ldr	r3, [pc, #320]	; (407798 <dir_find+0x150>)
  407656:	4798      	blx	r3
  407658:	4603      	mov	r3, r0
  40765a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
  40765c:	7dfb      	ldrb	r3, [r7, #23]
  40765e:	2b00      	cmp	r3, #0
  407660:	d001      	beq.n	407666 <dir_find+0x1e>
  407662:	7dfb      	ldrb	r3, [r7, #23]
  407664:	e093      	b.n	40778e <dir_find+0x146>

#if _USE_LFN
	ord = sum = 0xFF;
  407666:	23ff      	movs	r3, #255	; 0xff
  407668:	753b      	strb	r3, [r7, #20]
  40766a:	7d3b      	ldrb	r3, [r7, #20]
  40766c:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40766e:	687b      	ldr	r3, [r7, #4]
  407670:	681a      	ldr	r2, [r3, #0]
  407672:	687b      	ldr	r3, [r7, #4]
  407674:	691b      	ldr	r3, [r3, #16]
  407676:	4610      	mov	r0, r2
  407678:	4619      	mov	r1, r3
  40767a:	4b48      	ldr	r3, [pc, #288]	; (40779c <dir_find+0x154>)
  40767c:	4798      	blx	r3
  40767e:	4603      	mov	r3, r0
  407680:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  407682:	7dfb      	ldrb	r3, [r7, #23]
  407684:	2b00      	cmp	r3, #0
  407686:	d000      	beq.n	40768a <dir_find+0x42>
  407688:	e080      	b.n	40778c <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  40768a:	687b      	ldr	r3, [r7, #4]
  40768c:	695b      	ldr	r3, [r3, #20]
  40768e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  407690:	693b      	ldr	r3, [r7, #16]
  407692:	781b      	ldrb	r3, [r3, #0]
  407694:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  407696:	7dbb      	ldrb	r3, [r7, #22]
  407698:	2b00      	cmp	r3, #0
  40769a:	d102      	bne.n	4076a2 <dir_find+0x5a>
  40769c:	2304      	movs	r3, #4
  40769e:	75fb      	strb	r3, [r7, #23]
  4076a0:	e074      	b.n	40778c <dir_find+0x144>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  4076a2:	693b      	ldr	r3, [r7, #16]
  4076a4:	330b      	adds	r3, #11
  4076a6:	781b      	ldrb	r3, [r3, #0]
  4076a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4076ac:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4076ae:	7dbb      	ldrb	r3, [r7, #22]
  4076b0:	2be5      	cmp	r3, #229	; 0xe5
  4076b2:	d007      	beq.n	4076c4 <dir_find+0x7c>
  4076b4:	7bfb      	ldrb	r3, [r7, #15]
  4076b6:	f003 0308 	and.w	r3, r3, #8
  4076ba:	2b00      	cmp	r3, #0
  4076bc:	d005      	beq.n	4076ca <dir_find+0x82>
  4076be:	7bfb      	ldrb	r3, [r7, #15]
  4076c0:	2b0f      	cmp	r3, #15
  4076c2:	d002      	beq.n	4076ca <dir_find+0x82>
			ord = 0xFF;
  4076c4:	23ff      	movs	r3, #255	; 0xff
  4076c6:	757b      	strb	r3, [r7, #21]
  4076c8:	e056      	b.n	407778 <dir_find+0x130>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  4076ca:	7bfb      	ldrb	r3, [r7, #15]
  4076cc:	2b0f      	cmp	r3, #15
  4076ce:	d12f      	bne.n	407730 <dir_find+0xe8>
				if (dj->lfn) {
  4076d0:	687b      	ldr	r3, [r7, #4]
  4076d2:	69db      	ldr	r3, [r3, #28]
  4076d4:	2b00      	cmp	r3, #0
  4076d6:	d04f      	beq.n	407778 <dir_find+0x130>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4076d8:	7dbb      	ldrb	r3, [r7, #22]
  4076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4076de:	2b00      	cmp	r3, #0
  4076e0:	d00c      	beq.n	4076fc <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
  4076e2:	693b      	ldr	r3, [r7, #16]
  4076e4:	7b5b      	ldrb	r3, [r3, #13]
  4076e6:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
  4076e8:	7dbb      	ldrb	r3, [r7, #22]
  4076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4076ee:	75bb      	strb	r3, [r7, #22]
  4076f0:	7dbb      	ldrb	r3, [r7, #22]
  4076f2:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
  4076f4:	687b      	ldr	r3, [r7, #4]
  4076f6:	88da      	ldrh	r2, [r3, #6]
  4076f8:	687b      	ldr	r3, [r7, #4]
  4076fa:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4076fc:	7dba      	ldrb	r2, [r7, #22]
  4076fe:	7d7b      	ldrb	r3, [r7, #21]
  407700:	429a      	cmp	r2, r3
  407702:	d112      	bne.n	40772a <dir_find+0xe2>
  407704:	693b      	ldr	r3, [r7, #16]
  407706:	330d      	adds	r3, #13
  407708:	781b      	ldrb	r3, [r3, #0]
  40770a:	7d3a      	ldrb	r2, [r7, #20]
  40770c:	429a      	cmp	r2, r3
  40770e:	d10c      	bne.n	40772a <dir_find+0xe2>
  407710:	687b      	ldr	r3, [r7, #4]
  407712:	69db      	ldr	r3, [r3, #28]
  407714:	4618      	mov	r0, r3
  407716:	6939      	ldr	r1, [r7, #16]
  407718:	4b21      	ldr	r3, [pc, #132]	; (4077a0 <dir_find+0x158>)
  40771a:	4798      	blx	r3
  40771c:	4603      	mov	r3, r0
  40771e:	2b00      	cmp	r3, #0
  407720:	d003      	beq.n	40772a <dir_find+0xe2>
  407722:	7d7b      	ldrb	r3, [r7, #21]
  407724:	3b01      	subs	r3, #1
  407726:	b2db      	uxtb	r3, r3
  407728:	e000      	b.n	40772c <dir_find+0xe4>
  40772a:	23ff      	movs	r3, #255	; 0xff
  40772c:	757b      	strb	r3, [r7, #21]
  40772e:	e023      	b.n	407778 <dir_find+0x130>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  407730:	7d7b      	ldrb	r3, [r7, #21]
  407732:	2b00      	cmp	r3, #0
  407734:	d107      	bne.n	407746 <dir_find+0xfe>
  407736:	6938      	ldr	r0, [r7, #16]
  407738:	4b1a      	ldr	r3, [pc, #104]	; (4077a4 <dir_find+0x15c>)
  40773a:	4798      	blx	r3
  40773c:	4603      	mov	r3, r0
  40773e:	7d3a      	ldrb	r2, [r7, #20]
  407740:	429a      	cmp	r2, r3
  407742:	d100      	bne.n	407746 <dir_find+0xfe>
  407744:	e022      	b.n	40778c <dir_find+0x144>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  407746:	23ff      	movs	r3, #255	; 0xff
  407748:	757b      	strb	r3, [r7, #21]
  40774a:	687b      	ldr	r3, [r7, #4]
  40774c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407750:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  407752:	687b      	ldr	r3, [r7, #4]
  407754:	699b      	ldr	r3, [r3, #24]
  407756:	330b      	adds	r3, #11
  407758:	781b      	ldrb	r3, [r3, #0]
  40775a:	f003 0301 	and.w	r3, r3, #1
  40775e:	2b00      	cmp	r3, #0
  407760:	d10a      	bne.n	407778 <dir_find+0x130>
  407762:	687b      	ldr	r3, [r7, #4]
  407764:	699b      	ldr	r3, [r3, #24]
  407766:	6938      	ldr	r0, [r7, #16]
  407768:	4619      	mov	r1, r3
  40776a:	220b      	movs	r2, #11
  40776c:	4b0e      	ldr	r3, [pc, #56]	; (4077a8 <dir_find+0x160>)
  40776e:	4798      	blx	r3
  407770:	4603      	mov	r3, r0
  407772:	2b00      	cmp	r3, #0
  407774:	d100      	bne.n	407778 <dir_find+0x130>
  407776:	e009      	b.n	40778c <dir_find+0x144>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  407778:	6878      	ldr	r0, [r7, #4]
  40777a:	2100      	movs	r1, #0
  40777c:	4b0b      	ldr	r3, [pc, #44]	; (4077ac <dir_find+0x164>)
  40777e:	4798      	blx	r3
  407780:	4603      	mov	r3, r0
  407782:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
  407784:	7dfb      	ldrb	r3, [r7, #23]
  407786:	2b00      	cmp	r3, #0
  407788:	f43f af71 	beq.w	40766e <dir_find+0x26>

	return res;
  40778c:	7dfb      	ldrb	r3, [r7, #23]
}
  40778e:	4618      	mov	r0, r3
  407790:	3718      	adds	r7, #24
  407792:	46bd      	mov	sp, r7
  407794:	bd80      	pop	{r7, pc}
  407796:	bf00      	nop
  407798:	00406fdd 	.word	0x00406fdd
  40779c:	0040686d 	.word	0x0040686d
  4077a0:	004072a1 	.word	0x004072a1
  4077a4:	00407605 	.word	0x00407605
  4077a8:	00406495 	.word	0x00406495
  4077ac:	004070e5 	.word	0x004070e5

004077b0 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
  4077b0:	b580      	push	{r7, lr}
  4077b2:	b086      	sub	sp, #24
  4077b4:	af00      	add	r7, sp, #0
  4077b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
  4077b8:	23ff      	movs	r3, #255	; 0xff
  4077ba:	757b      	strb	r3, [r7, #21]
  4077bc:	23ff      	movs	r3, #255	; 0xff
  4077be:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
  4077c0:	2304      	movs	r3, #4
  4077c2:	75fb      	strb	r3, [r7, #23]
	while (dj->sect) {
  4077c4:	e079      	b.n	4078ba <dir_read+0x10a>
		res = move_window(dj->fs, dj->sect);
  4077c6:	687b      	ldr	r3, [r7, #4]
  4077c8:	681a      	ldr	r2, [r3, #0]
  4077ca:	687b      	ldr	r3, [r7, #4]
  4077cc:	691b      	ldr	r3, [r3, #16]
  4077ce:	4610      	mov	r0, r2
  4077d0:	4619      	mov	r1, r3
  4077d2:	4b41      	ldr	r3, [pc, #260]	; (4078d8 <dir_read+0x128>)
  4077d4:	4798      	blx	r3
  4077d6:	4603      	mov	r3, r0
  4077d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  4077da:	7dfb      	ldrb	r3, [r7, #23]
  4077dc:	2b00      	cmp	r3, #0
  4077de:	d000      	beq.n	4077e2 <dir_read+0x32>
  4077e0:	e06f      	b.n	4078c2 <dir_read+0x112>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4077e2:	687b      	ldr	r3, [r7, #4]
  4077e4:	695b      	ldr	r3, [r3, #20]
  4077e6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  4077e8:	693b      	ldr	r3, [r7, #16]
  4077ea:	781b      	ldrb	r3, [r3, #0]
  4077ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4077ee:	7dbb      	ldrb	r3, [r7, #22]
  4077f0:	2b00      	cmp	r3, #0
  4077f2:	d102      	bne.n	4077fa <dir_read+0x4a>
  4077f4:	2304      	movs	r3, #4
  4077f6:	75fb      	strb	r3, [r7, #23]
  4077f8:	e063      	b.n	4078c2 <dir_read+0x112>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  4077fa:	693b      	ldr	r3, [r7, #16]
  4077fc:	330b      	adds	r3, #11
  4077fe:	781b      	ldrb	r3, [r3, #0]
  407800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  407804:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  407806:	7dbb      	ldrb	r3, [r7, #22]
  407808:	2be5      	cmp	r3, #229	; 0xe5
  40780a:	d00a      	beq.n	407822 <dir_read+0x72>
  40780c:	7dbb      	ldrb	r3, [r7, #22]
  40780e:	2b2e      	cmp	r3, #46	; 0x2e
  407810:	d007      	beq.n	407822 <dir_read+0x72>
  407812:	7bfb      	ldrb	r3, [r7, #15]
  407814:	f003 0308 	and.w	r3, r3, #8
  407818:	2b00      	cmp	r3, #0
  40781a:	d005      	beq.n	407828 <dir_read+0x78>
  40781c:	7bfb      	ldrb	r3, [r7, #15]
  40781e:	2b0f      	cmp	r3, #15
  407820:	d002      	beq.n	407828 <dir_read+0x78>
			ord = 0xFF;
  407822:	23ff      	movs	r3, #255	; 0xff
  407824:	757b      	strb	r3, [r7, #21]
  407826:	e03e      	b.n	4078a6 <dir_read+0xf6>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  407828:	7bfb      	ldrb	r3, [r7, #15]
  40782a:	2b0f      	cmp	r3, #15
  40782c:	d12b      	bne.n	407886 <dir_read+0xd6>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  40782e:	7dbb      	ldrb	r3, [r7, #22]
  407830:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407834:	2b00      	cmp	r3, #0
  407836:	d00c      	beq.n	407852 <dir_read+0xa2>
					sum = dir[LDIR_Chksum];
  407838:	693b      	ldr	r3, [r7, #16]
  40783a:	7b5b      	ldrb	r3, [r3, #13]
  40783c:	753b      	strb	r3, [r7, #20]
					c &= ~LLE; ord = c;
  40783e:	7dbb      	ldrb	r3, [r7, #22]
  407840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  407844:	75bb      	strb	r3, [r7, #22]
  407846:	7dbb      	ldrb	r3, [r7, #22]
  407848:	757b      	strb	r3, [r7, #21]
					dj->lfn_idx = dj->index;
  40784a:	687b      	ldr	r3, [r7, #4]
  40784c:	88da      	ldrh	r2, [r3, #6]
  40784e:	687b      	ldr	r3, [r7, #4]
  407850:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  407852:	7dba      	ldrb	r2, [r7, #22]
  407854:	7d7b      	ldrb	r3, [r7, #21]
  407856:	429a      	cmp	r2, r3
  407858:	d112      	bne.n	407880 <dir_read+0xd0>
  40785a:	693b      	ldr	r3, [r7, #16]
  40785c:	330d      	adds	r3, #13
  40785e:	781b      	ldrb	r3, [r3, #0]
  407860:	7d3a      	ldrb	r2, [r7, #20]
  407862:	429a      	cmp	r2, r3
  407864:	d10c      	bne.n	407880 <dir_read+0xd0>
  407866:	687b      	ldr	r3, [r7, #4]
  407868:	69db      	ldr	r3, [r3, #28]
  40786a:	4618      	mov	r0, r3
  40786c:	6939      	ldr	r1, [r7, #16]
  40786e:	4b1b      	ldr	r3, [pc, #108]	; (4078dc <dir_read+0x12c>)
  407870:	4798      	blx	r3
  407872:	4603      	mov	r3, r0
  407874:	2b00      	cmp	r3, #0
  407876:	d003      	beq.n	407880 <dir_read+0xd0>
  407878:	7d7b      	ldrb	r3, [r7, #21]
  40787a:	3b01      	subs	r3, #1
  40787c:	b2db      	uxtb	r3, r3
  40787e:	e000      	b.n	407882 <dir_read+0xd2>
  407880:	23ff      	movs	r3, #255	; 0xff
  407882:	757b      	strb	r3, [r7, #21]
  407884:	e00f      	b.n	4078a6 <dir_read+0xf6>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  407886:	7d7b      	ldrb	r3, [r7, #21]
  407888:	2b00      	cmp	r3, #0
  40788a:	d106      	bne.n	40789a <dir_read+0xea>
  40788c:	6938      	ldr	r0, [r7, #16]
  40788e:	4b14      	ldr	r3, [pc, #80]	; (4078e0 <dir_read+0x130>)
  407890:	4798      	blx	r3
  407892:	4603      	mov	r3, r0
  407894:	7d3a      	ldrb	r2, [r7, #20]
  407896:	429a      	cmp	r2, r3
  407898:	d004      	beq.n	4078a4 <dir_read+0xf4>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  40789a:	687b      	ldr	r3, [r7, #4]
  40789c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4078a0:	841a      	strh	r2, [r3, #32]
				break;
  4078a2:	e00e      	b.n	4078c2 <dir_read+0x112>
  4078a4:	e00d      	b.n	4078c2 <dir_read+0x112>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
  4078a6:	6878      	ldr	r0, [r7, #4]
  4078a8:	2100      	movs	r1, #0
  4078aa:	4b0e      	ldr	r3, [pc, #56]	; (4078e4 <dir_read+0x134>)
  4078ac:	4798      	blx	r3
  4078ae:	4603      	mov	r3, r0
  4078b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  4078b2:	7dfb      	ldrb	r3, [r7, #23]
  4078b4:	2b00      	cmp	r3, #0
  4078b6:	d000      	beq.n	4078ba <dir_read+0x10a>
  4078b8:	e003      	b.n	4078c2 <dir_read+0x112>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
  4078ba:	687b      	ldr	r3, [r7, #4]
  4078bc:	691b      	ldr	r3, [r3, #16]
  4078be:	2b00      	cmp	r3, #0
  4078c0:	d181      	bne.n	4077c6 <dir_read+0x16>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
  4078c2:	7dfb      	ldrb	r3, [r7, #23]
  4078c4:	2b00      	cmp	r3, #0
  4078c6:	d002      	beq.n	4078ce <dir_read+0x11e>
  4078c8:	687b      	ldr	r3, [r7, #4]
  4078ca:	2200      	movs	r2, #0
  4078cc:	611a      	str	r2, [r3, #16]

	return res;
  4078ce:	7dfb      	ldrb	r3, [r7, #23]
}
  4078d0:	4618      	mov	r0, r3
  4078d2:	3718      	adds	r7, #24
  4078d4:	46bd      	mov	sp, r7
  4078d6:	bd80      	pop	{r7, pc}
  4078d8:	0040686d 	.word	0x0040686d
  4078dc:	00407379 	.word	0x00407379
  4078e0:	00407605 	.word	0x00407605
  4078e4:	004070e5 	.word	0x004070e5

004078e8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  4078e8:	b590      	push	{r4, r7, lr}
  4078ea:	b08d      	sub	sp, #52	; 0x34
  4078ec:	af00      	add	r7, sp, #0
  4078ee:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  4078f0:	687b      	ldr	r3, [r7, #4]
  4078f2:	699b      	ldr	r3, [r3, #24]
  4078f4:	627b      	str	r3, [r7, #36]	; 0x24
  4078f6:	687b      	ldr	r3, [r7, #4]
  4078f8:	69db      	ldr	r3, [r3, #28]
  4078fa:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
  4078fc:	f107 030c 	add.w	r3, r7, #12
  407900:	4618      	mov	r0, r3
  407902:	6a79      	ldr	r1, [r7, #36]	; 0x24
  407904:	220c      	movs	r2, #12
  407906:	4b92      	ldr	r3, [pc, #584]	; (407b50 <dir_register+0x268>)
  407908:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  40790a:	7dfb      	ldrb	r3, [r7, #23]
  40790c:	f003 0301 	and.w	r3, r3, #1
  407910:	2b00      	cmp	r3, #0
  407912:	d035      	beq.n	407980 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  407914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407916:	330b      	adds	r3, #11
  407918:	2200      	movs	r2, #0
  40791a:	701a      	strb	r2, [r3, #0]
  40791c:	687b      	ldr	r3, [r7, #4]
  40791e:	2200      	movs	r2, #0
  407920:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
  407922:	2301      	movs	r3, #1
  407924:	85bb      	strh	r3, [r7, #44]	; 0x2c
  407926:	e015      	b.n	407954 <dir_register+0x6c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
  407928:	f107 020c 	add.w	r2, r7, #12
  40792c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40792e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  407930:	4611      	mov	r1, r2
  407932:	6a3a      	ldr	r2, [r7, #32]
  407934:	4c87      	ldr	r4, [pc, #540]	; (407b54 <dir_register+0x26c>)
  407936:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  407938:	6878      	ldr	r0, [r7, #4]
  40793a:	4b87      	ldr	r3, [pc, #540]	; (407b58 <dir_register+0x270>)
  40793c:	4798      	blx	r3
  40793e:	4603      	mov	r3, r0
  407940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
  407944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407948:	2b00      	cmp	r3, #0
  40794a:	d000      	beq.n	40794e <dir_register+0x66>
  40794c:	e005      	b.n	40795a <dir_register+0x72>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  40794e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  407950:	3301      	adds	r3, #1
  407952:	85bb      	strh	r3, [r7, #44]	; 0x2c
  407954:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  407956:	2b63      	cmp	r3, #99	; 0x63
  407958:	d9e6      	bls.n	407928 <dir_register+0x40>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40795a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40795c:	2b64      	cmp	r3, #100	; 0x64
  40795e:	d101      	bne.n	407964 <dir_register+0x7c>
  407960:	2307      	movs	r3, #7
  407962:	e0f0      	b.n	407b46 <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  407964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407968:	2b04      	cmp	r3, #4
  40796a:	d002      	beq.n	407972 <dir_register+0x8a>
  40796c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407970:	e0e9      	b.n	407b46 <dir_register+0x25e>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  407972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407974:	330b      	adds	r3, #11
  407976:	7dfa      	ldrb	r2, [r7, #23]
  407978:	701a      	strb	r2, [r3, #0]
  40797a:	687b      	ldr	r3, [r7, #4]
  40797c:	6a3a      	ldr	r2, [r7, #32]
  40797e:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  407980:	7dfb      	ldrb	r3, [r7, #23]
  407982:	f003 0302 	and.w	r3, r3, #2
  407986:	2b00      	cmp	r3, #0
  407988:	d016      	beq.n	4079b8 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
  40798a:	2300      	movs	r3, #0
  40798c:	857b      	strh	r3, [r7, #42]	; 0x2a
  40798e:	e002      	b.n	407996 <dir_register+0xae>
  407990:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407992:	3301      	adds	r3, #1
  407994:	857b      	strh	r3, [r7, #42]	; 0x2a
  407996:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407998:	005b      	lsls	r3, r3, #1
  40799a:	6a3a      	ldr	r2, [r7, #32]
  40799c:	4413      	add	r3, r2
  40799e:	881b      	ldrh	r3, [r3, #0]
  4079a0:	2b00      	cmp	r3, #0
  4079a2:	d1f5      	bne.n	407990 <dir_register+0xa8>
		ne = (ne + 25) / 13;
  4079a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4079a6:	3319      	adds	r3, #25
  4079a8:	4a6c      	ldr	r2, [pc, #432]	; (407b5c <dir_register+0x274>)
  4079aa:	fb82 1203 	smull	r1, r2, r2, r3
  4079ae:	1092      	asrs	r2, r2, #2
  4079b0:	17db      	asrs	r3, r3, #31
  4079b2:	1ad3      	subs	r3, r2, r3
  4079b4:	857b      	strh	r3, [r7, #42]	; 0x2a
  4079b6:	e001      	b.n	4079bc <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  4079b8:	2301      	movs	r3, #1
  4079ba:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  4079bc:	6878      	ldr	r0, [r7, #4]
  4079be:	2100      	movs	r1, #0
  4079c0:	4b67      	ldr	r3, [pc, #412]	; (407b60 <dir_register+0x278>)
  4079c2:	4798      	blx	r3
  4079c4:	4603      	mov	r3, r0
  4079c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
  4079ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4079ce:	2b00      	cmp	r3, #0
  4079d0:	d002      	beq.n	4079d8 <dir_register+0xf0>
  4079d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4079d6:	e0b6      	b.n	407b46 <dir_register+0x25e>
	n = is = 0;
  4079d8:	2300      	movs	r3, #0
  4079da:	853b      	strh	r3, [r7, #40]	; 0x28
  4079dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4079de:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
  4079e0:	687b      	ldr	r3, [r7, #4]
  4079e2:	681a      	ldr	r2, [r3, #0]
  4079e4:	687b      	ldr	r3, [r7, #4]
  4079e6:	691b      	ldr	r3, [r3, #16]
  4079e8:	4610      	mov	r0, r2
  4079ea:	4619      	mov	r1, r3
  4079ec:	4b5d      	ldr	r3, [pc, #372]	; (407b64 <dir_register+0x27c>)
  4079ee:	4798      	blx	r3
  4079f0:	4603      	mov	r3, r0
  4079f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
  4079f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4079fa:	2b00      	cmp	r3, #0
  4079fc:	d000      	beq.n	407a00 <dir_register+0x118>
  4079fe:	e025      	b.n	407a4c <dir_register+0x164>
		c = *dj->dir;				/* Check the entry status */
  407a00:	687b      	ldr	r3, [r7, #4]
  407a02:	695b      	ldr	r3, [r3, #20]
  407a04:	781b      	ldrb	r3, [r3, #0]
  407a06:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  407a08:	7ffb      	ldrb	r3, [r7, #31]
  407a0a:	2be5      	cmp	r3, #229	; 0xe5
  407a0c:	d002      	beq.n	407a14 <dir_register+0x12c>
  407a0e:	7ffb      	ldrb	r3, [r7, #31]
  407a10:	2b00      	cmp	r3, #0
  407a12:	d10e      	bne.n	407a32 <dir_register+0x14a>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  407a14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  407a16:	2b00      	cmp	r3, #0
  407a18:	d102      	bne.n	407a20 <dir_register+0x138>
  407a1a:	687b      	ldr	r3, [r7, #4]
  407a1c:	88db      	ldrh	r3, [r3, #6]
  407a1e:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  407a20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  407a22:	3301      	adds	r3, #1
  407a24:	85bb      	strh	r3, [r7, #44]	; 0x2c
  407a26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  407a28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407a2a:	429a      	cmp	r2, r3
  407a2c:	d100      	bne.n	407a30 <dir_register+0x148>
  407a2e:	e00d      	b.n	407a4c <dir_register+0x164>
  407a30:	e001      	b.n	407a36 <dir_register+0x14e>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  407a32:	2300      	movs	r3, #0
  407a34:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  407a36:	6878      	ldr	r0, [r7, #4]
  407a38:	2101      	movs	r1, #1
  407a3a:	4b4b      	ldr	r3, [pc, #300]	; (407b68 <dir_register+0x280>)
  407a3c:	4798      	blx	r3
  407a3e:	4603      	mov	r3, r0
  407a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
  407a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407a48:	2b00      	cmp	r3, #0
  407a4a:	d0c9      	beq.n	4079e0 <dir_register+0xf8>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  407a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407a50:	2b00      	cmp	r3, #0
  407a52:	d146      	bne.n	407ae2 <dir_register+0x1fa>
  407a54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407a56:	2b01      	cmp	r3, #1
  407a58:	d943      	bls.n	407ae2 <dir_register+0x1fa>
		res = dir_sdi(dj, is);
  407a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  407a5c:	6878      	ldr	r0, [r7, #4]
  407a5e:	4619      	mov	r1, r3
  407a60:	4b3f      	ldr	r3, [pc, #252]	; (407b60 <dir_register+0x278>)
  407a62:	4798      	blx	r3
  407a64:	4603      	mov	r3, r0
  407a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  407a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407a6e:	2b00      	cmp	r3, #0
  407a70:	d137      	bne.n	407ae2 <dir_register+0x1fa>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  407a72:	687b      	ldr	r3, [r7, #4]
  407a74:	699b      	ldr	r3, [r3, #24]
  407a76:	4618      	mov	r0, r3
  407a78:	4b3c      	ldr	r3, [pc, #240]	; (407b6c <dir_register+0x284>)
  407a7a:	4798      	blx	r3
  407a7c:	4603      	mov	r3, r0
  407a7e:	77bb      	strb	r3, [r7, #30]
			ne--;
  407a80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407a82:	3b01      	subs	r3, #1
  407a84:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  407a86:	687b      	ldr	r3, [r7, #4]
  407a88:	681a      	ldr	r2, [r3, #0]
  407a8a:	687b      	ldr	r3, [r7, #4]
  407a8c:	691b      	ldr	r3, [r3, #16]
  407a8e:	4610      	mov	r0, r2
  407a90:	4619      	mov	r1, r3
  407a92:	4b34      	ldr	r3, [pc, #208]	; (407b64 <dir_register+0x27c>)
  407a94:	4798      	blx	r3
  407a96:	4603      	mov	r3, r0
  407a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
  407a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407aa0:	2b00      	cmp	r3, #0
  407aa2:	d000      	beq.n	407aa6 <dir_register+0x1be>
  407aa4:	e01d      	b.n	407ae2 <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  407aa6:	687b      	ldr	r3, [r7, #4]
  407aa8:	69d8      	ldr	r0, [r3, #28]
  407aaa:	687b      	ldr	r3, [r7, #4]
  407aac:	6959      	ldr	r1, [r3, #20]
  407aae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407ab0:	b2da      	uxtb	r2, r3
  407ab2:	7fbb      	ldrb	r3, [r7, #30]
  407ab4:	4c2e      	ldr	r4, [pc, #184]	; (407b70 <dir_register+0x288>)
  407ab6:	47a0      	blx	r4
				dj->fs->wflag = 1;
  407ab8:	687b      	ldr	r3, [r7, #4]
  407aba:	681b      	ldr	r3, [r3, #0]
  407abc:	2201      	movs	r2, #1
  407abe:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  407ac0:	6878      	ldr	r0, [r7, #4]
  407ac2:	2100      	movs	r1, #0
  407ac4:	4b28      	ldr	r3, [pc, #160]	; (407b68 <dir_register+0x280>)
  407ac6:	4798      	blx	r3
  407ac8:	4603      	mov	r3, r0
  407aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
  407ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407ad2:	2b00      	cmp	r3, #0
  407ad4:	d105      	bne.n	407ae2 <dir_register+0x1fa>
  407ad6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407ad8:	3b01      	subs	r3, #1
  407ada:	857b      	strh	r3, [r7, #42]	; 0x2a
  407adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407ade:	2b00      	cmp	r3, #0
  407ae0:	d1d1      	bne.n	407a86 <dir_register+0x19e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
  407ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407ae6:	2b00      	cmp	r3, #0
  407ae8:	d12b      	bne.n	407b42 <dir_register+0x25a>
		res = move_window(dj->fs, dj->sect);
  407aea:	687b      	ldr	r3, [r7, #4]
  407aec:	681a      	ldr	r2, [r3, #0]
  407aee:	687b      	ldr	r3, [r7, #4]
  407af0:	691b      	ldr	r3, [r3, #16]
  407af2:	4610      	mov	r0, r2
  407af4:	4619      	mov	r1, r3
  407af6:	4b1b      	ldr	r3, [pc, #108]	; (407b64 <dir_register+0x27c>)
  407af8:	4798      	blx	r3
  407afa:	4603      	mov	r3, r0
  407afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  407b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407b04:	2b00      	cmp	r3, #0
  407b06:	d11c      	bne.n	407b42 <dir_register+0x25a>
			dir = dj->dir;
  407b08:	687b      	ldr	r3, [r7, #4]
  407b0a:	695b      	ldr	r3, [r3, #20]
  407b0c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  407b0e:	69b8      	ldr	r0, [r7, #24]
  407b10:	2100      	movs	r1, #0
  407b12:	2220      	movs	r2, #32
  407b14:	4b17      	ldr	r3, [pc, #92]	; (407b74 <dir_register+0x28c>)
  407b16:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  407b18:	687b      	ldr	r3, [r7, #4]
  407b1a:	699b      	ldr	r3, [r3, #24]
  407b1c:	69b8      	ldr	r0, [r7, #24]
  407b1e:	4619      	mov	r1, r3
  407b20:	220b      	movs	r2, #11
  407b22:	4b0b      	ldr	r3, [pc, #44]	; (407b50 <dir_register+0x268>)
  407b24:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  407b26:	69bb      	ldr	r3, [r7, #24]
  407b28:	330c      	adds	r3, #12
  407b2a:	687a      	ldr	r2, [r7, #4]
  407b2c:	6992      	ldr	r2, [r2, #24]
  407b2e:	320b      	adds	r2, #11
  407b30:	7812      	ldrb	r2, [r2, #0]
  407b32:	f002 0218 	and.w	r2, r2, #24
  407b36:	b2d2      	uxtb	r2, r2
  407b38:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
  407b3a:	687b      	ldr	r3, [r7, #4]
  407b3c:	681b      	ldr	r3, [r3, #0]
  407b3e:	2201      	movs	r2, #1
  407b40:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
  407b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  407b46:	4618      	mov	r0, r3
  407b48:	3734      	adds	r7, #52	; 0x34
  407b4a:	46bd      	mov	sp, r7
  407b4c:	bd90      	pop	{r4, r7, pc}
  407b4e:	bf00      	nop
  407b50:	00406425 	.word	0x00406425
  407b54:	0040751d 	.word	0x0040751d
  407b58:	00407649 	.word	0x00407649
  407b5c:	4ec4ec4f 	.word	0x4ec4ec4f
  407b60:	00406fdd 	.word	0x00406fdd
  407b64:	0040686d 	.word	0x0040686d
  407b68:	004070e5 	.word	0x004070e5
  407b6c:	00407605 	.word	0x00407605
  407b70:	0040743d 	.word	0x0040743d
  407b74:	00406461 	.word	0x00406461

00407b78 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
  407b78:	b580      	push	{r7, lr}
  407b7a:	b084      	sub	sp, #16
  407b7c:	af00      	add	r7, sp, #0
  407b7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
  407b80:	687b      	ldr	r3, [r7, #4]
  407b82:	88db      	ldrh	r3, [r3, #6]
  407b84:	81bb      	strh	r3, [r7, #12]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
  407b86:	687b      	ldr	r3, [r7, #4]
  407b88:	8c1a      	ldrh	r2, [r3, #32]
  407b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407b8e:	429a      	cmp	r2, r3
  407b90:	d002      	beq.n	407b98 <dir_remove+0x20>
  407b92:	687b      	ldr	r3, [r7, #4]
  407b94:	8c1b      	ldrh	r3, [r3, #32]
  407b96:	e000      	b.n	407b9a <dir_remove+0x22>
  407b98:	89bb      	ldrh	r3, [r7, #12]
  407b9a:	6878      	ldr	r0, [r7, #4]
  407b9c:	4619      	mov	r1, r3
  407b9e:	4b1b      	ldr	r3, [pc, #108]	; (407c0c <dir_remove+0x94>)
  407ba0:	4798      	blx	r3
  407ba2:	4603      	mov	r3, r0
  407ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  407ba6:	7bfb      	ldrb	r3, [r7, #15]
  407ba8:	2b00      	cmp	r3, #0
  407baa:	d129      	bne.n	407c00 <dir_remove+0x88>
		do {
			res = move_window(dj->fs, dj->sect);
  407bac:	687b      	ldr	r3, [r7, #4]
  407bae:	681a      	ldr	r2, [r3, #0]
  407bb0:	687b      	ldr	r3, [r7, #4]
  407bb2:	691b      	ldr	r3, [r3, #16]
  407bb4:	4610      	mov	r0, r2
  407bb6:	4619      	mov	r1, r3
  407bb8:	4b15      	ldr	r3, [pc, #84]	; (407c10 <dir_remove+0x98>)
  407bba:	4798      	blx	r3
  407bbc:	4603      	mov	r3, r0
  407bbe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  407bc0:	7bfb      	ldrb	r3, [r7, #15]
  407bc2:	2b00      	cmp	r3, #0
  407bc4:	d000      	beq.n	407bc8 <dir_remove+0x50>
  407bc6:	e016      	b.n	407bf6 <dir_remove+0x7e>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
  407bc8:	687b      	ldr	r3, [r7, #4]
  407bca:	695b      	ldr	r3, [r3, #20]
  407bcc:	22e5      	movs	r2, #229	; 0xe5
  407bce:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
  407bd0:	687b      	ldr	r3, [r7, #4]
  407bd2:	681b      	ldr	r3, [r3, #0]
  407bd4:	2201      	movs	r2, #1
  407bd6:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
  407bd8:	687b      	ldr	r3, [r7, #4]
  407bda:	88db      	ldrh	r3, [r3, #6]
  407bdc:	89ba      	ldrh	r2, [r7, #12]
  407bde:	429a      	cmp	r2, r3
  407be0:	d800      	bhi.n	407be4 <dir_remove+0x6c>
  407be2:	e008      	b.n	407bf6 <dir_remove+0x7e>
			res = dir_next(dj, 0);		/* Next entry */
  407be4:	6878      	ldr	r0, [r7, #4]
  407be6:	2100      	movs	r1, #0
  407be8:	4b0a      	ldr	r3, [pc, #40]	; (407c14 <dir_remove+0x9c>)
  407bea:	4798      	blx	r3
  407bec:	4603      	mov	r3, r0
  407bee:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
  407bf0:	7bfb      	ldrb	r3, [r7, #15]
  407bf2:	2b00      	cmp	r3, #0
  407bf4:	d0da      	beq.n	407bac <dir_remove+0x34>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
  407bf6:	7bfb      	ldrb	r3, [r7, #15]
  407bf8:	2b04      	cmp	r3, #4
  407bfa:	d101      	bne.n	407c00 <dir_remove+0x88>
  407bfc:	2302      	movs	r3, #2
  407bfe:	73fb      	strb	r3, [r7, #15]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
  407c00:	7bfb      	ldrb	r3, [r7, #15]
}
  407c02:	4618      	mov	r0, r3
  407c04:	3710      	adds	r7, #16
  407c06:	46bd      	mov	sp, r7
  407c08:	bd80      	pop	{r7, pc}
  407c0a:	bf00      	nop
  407c0c:	00406fdd 	.word	0x00406fdd
  407c10:	0040686d 	.word	0x0040686d
  407c14:	004070e5 	.word	0x004070e5

00407c18 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
  407c18:	b580      	push	{r7, lr}
  407c1a:	b08a      	sub	sp, #40	; 0x28
  407c1c:	af00      	add	r7, sp, #0
  407c1e:	6078      	str	r0, [r7, #4]
  407c20:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  407c22:	683b      	ldr	r3, [r7, #0]
  407c24:	681b      	ldr	r3, [r3, #0]
  407c26:	613b      	str	r3, [r7, #16]
  407c28:	e002      	b.n	407c30 <create_name+0x18>
  407c2a:	693b      	ldr	r3, [r7, #16]
  407c2c:	3301      	adds	r3, #1
  407c2e:	613b      	str	r3, [r7, #16]
  407c30:	693b      	ldr	r3, [r7, #16]
  407c32:	781b      	ldrb	r3, [r3, #0]
  407c34:	2b2f      	cmp	r3, #47	; 0x2f
  407c36:	d0f8      	beq.n	407c2a <create_name+0x12>
  407c38:	693b      	ldr	r3, [r7, #16]
  407c3a:	781b      	ldrb	r3, [r3, #0]
  407c3c:	2b5c      	cmp	r3, #92	; 0x5c
  407c3e:	d0f4      	beq.n	407c2a <create_name+0x12>
	lfn = dj->lfn;
  407c40:	687b      	ldr	r3, [r7, #4]
  407c42:	69db      	ldr	r3, [r3, #28]
  407c44:	60fb      	str	r3, [r7, #12]
	si = di = 0;
  407c46:	2300      	movs	r3, #0
  407c48:	617b      	str	r3, [r7, #20]
  407c4a:	697b      	ldr	r3, [r7, #20]
  407c4c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
  407c4e:	69bb      	ldr	r3, [r7, #24]
  407c50:	1c5a      	adds	r2, r3, #1
  407c52:	61ba      	str	r2, [r7, #24]
  407c54:	693a      	ldr	r2, [r7, #16]
  407c56:	4413      	add	r3, r2
  407c58:	781b      	ldrb	r3, [r3, #0]
  407c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  407c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c5e:	2b1f      	cmp	r3, #31
  407c60:	d92f      	bls.n	407cc2 <create_name+0xaa>
  407c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c64:	2b2f      	cmp	r3, #47	; 0x2f
  407c66:	d02c      	beq.n	407cc2 <create_name+0xaa>
  407c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c6a:	2b5c      	cmp	r3, #92	; 0x5c
  407c6c:	d029      	beq.n	407cc2 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
  407c6e:	697b      	ldr	r3, [r7, #20]
  407c70:	2bfe      	cmp	r3, #254	; 0xfe
  407c72:	d901      	bls.n	407c78 <create_name+0x60>
			return FR_INVALID_NAME;
  407c74:	2306      	movs	r3, #6
  407c76:	e181      	b.n	407f7c <create_name+0x364>
#if !_LFN_UNICODE
		w &= 0xFF;
  407c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c7a:	b2db      	uxtb	r3, r3
  407c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  407c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c80:	4618      	mov	r0, r3
  407c82:	2101      	movs	r1, #1
  407c84:	4b93      	ldr	r3, [pc, #588]	; (407ed4 <create_name+0x2bc>)
  407c86:	4798      	blx	r3
  407c88:	4603      	mov	r3, r0
  407c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  407c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c8e:	2b00      	cmp	r3, #0
  407c90:	d101      	bne.n	407c96 <create_name+0x7e>
  407c92:	2306      	movs	r3, #6
  407c94:	e172      	b.n	407f7c <create_name+0x364>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  407c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c98:	2b7f      	cmp	r3, #127	; 0x7f
  407c9a:	d809      	bhi.n	407cb0 <create_name+0x98>
  407c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407c9e:	488e      	ldr	r0, [pc, #568]	; (407ed8 <create_name+0x2c0>)
  407ca0:	4619      	mov	r1, r3
  407ca2:	4b8e      	ldr	r3, [pc, #568]	; (407edc <create_name+0x2c4>)
  407ca4:	4798      	blx	r3
  407ca6:	4603      	mov	r3, r0
  407ca8:	2b00      	cmp	r3, #0
  407caa:	d001      	beq.n	407cb0 <create_name+0x98>
			return FR_INVALID_NAME;
  407cac:	2306      	movs	r3, #6
  407cae:	e165      	b.n	407f7c <create_name+0x364>
		lfn[di++] = w;					/* Store the Unicode char */
  407cb0:	697b      	ldr	r3, [r7, #20]
  407cb2:	1c5a      	adds	r2, r3, #1
  407cb4:	617a      	str	r2, [r7, #20]
  407cb6:	005b      	lsls	r3, r3, #1
  407cb8:	68fa      	ldr	r2, [r7, #12]
  407cba:	4413      	add	r3, r2
  407cbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  407cbe:	801a      	strh	r2, [r3, #0]
	}
  407cc0:	e7c5      	b.n	407c4e <create_name+0x36>
	*path = &p[si];						/* Return pointer to the next segment */
  407cc2:	693a      	ldr	r2, [r7, #16]
  407cc4:	69bb      	ldr	r3, [r7, #24]
  407cc6:	441a      	add	r2, r3
  407cc8:	683b      	ldr	r3, [r7, #0]
  407cca:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  407ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407cce:	2b1f      	cmp	r3, #31
  407cd0:	d801      	bhi.n	407cd6 <create_name+0xbe>
  407cd2:	2304      	movs	r3, #4
  407cd4:	e000      	b.n	407cd8 <create_name+0xc0>
  407cd6:	2300      	movs	r3, #0
  407cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  407cdc:	e012      	b.n	407d04 <create_name+0xec>
		w = lfn[di-1];
  407cde:	697b      	ldr	r3, [r7, #20]
  407ce0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  407ce4:	3b01      	subs	r3, #1
  407ce6:	005b      	lsls	r3, r3, #1
  407ce8:	68fa      	ldr	r2, [r7, #12]
  407cea:	4413      	add	r3, r2
  407cec:	881b      	ldrh	r3, [r3, #0]
  407cee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
  407cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407cf2:	2b20      	cmp	r3, #32
  407cf4:	d003      	beq.n	407cfe <create_name+0xe6>
  407cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407cf8:	2b2e      	cmp	r3, #46	; 0x2e
  407cfa:	d000      	beq.n	407cfe <create_name+0xe6>
  407cfc:	e005      	b.n	407d0a <create_name+0xf2>
		di--;
  407cfe:	697b      	ldr	r3, [r7, #20]
  407d00:	3b01      	subs	r3, #1
  407d02:	617b      	str	r3, [r7, #20]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  407d04:	697b      	ldr	r3, [r7, #20]
  407d06:	2b00      	cmp	r3, #0
  407d08:	d1e9      	bne.n	407cde <create_name+0xc6>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  407d0a:	697b      	ldr	r3, [r7, #20]
  407d0c:	2b00      	cmp	r3, #0
  407d0e:	d101      	bne.n	407d14 <create_name+0xfc>
  407d10:	2306      	movs	r3, #6
  407d12:	e133      	b.n	407f7c <create_name+0x364>

	lfn[di] = 0;						/* LFN is created */
  407d14:	697b      	ldr	r3, [r7, #20]
  407d16:	005b      	lsls	r3, r3, #1
  407d18:	68fa      	ldr	r2, [r7, #12]
  407d1a:	4413      	add	r3, r2
  407d1c:	2200      	movs	r2, #0
  407d1e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  407d20:	687b      	ldr	r3, [r7, #4]
  407d22:	699b      	ldr	r3, [r3, #24]
  407d24:	4618      	mov	r0, r3
  407d26:	2120      	movs	r1, #32
  407d28:	220b      	movs	r2, #11
  407d2a:	4b6d      	ldr	r3, [pc, #436]	; (407ee0 <create_name+0x2c8>)
  407d2c:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  407d2e:	2300      	movs	r3, #0
  407d30:	61bb      	str	r3, [r7, #24]
  407d32:	e002      	b.n	407d3a <create_name+0x122>
  407d34:	69bb      	ldr	r3, [r7, #24]
  407d36:	3301      	adds	r3, #1
  407d38:	61bb      	str	r3, [r7, #24]
  407d3a:	69bb      	ldr	r3, [r7, #24]
  407d3c:	005b      	lsls	r3, r3, #1
  407d3e:	68fa      	ldr	r2, [r7, #12]
  407d40:	4413      	add	r3, r2
  407d42:	881b      	ldrh	r3, [r3, #0]
  407d44:	2b20      	cmp	r3, #32
  407d46:	d0f5      	beq.n	407d34 <create_name+0x11c>
  407d48:	69bb      	ldr	r3, [r7, #24]
  407d4a:	005b      	lsls	r3, r3, #1
  407d4c:	68fa      	ldr	r2, [r7, #12]
  407d4e:	4413      	add	r3, r2
  407d50:	881b      	ldrh	r3, [r3, #0]
  407d52:	2b2e      	cmp	r3, #46	; 0x2e
  407d54:	d0ee      	beq.n	407d34 <create_name+0x11c>
	if (si) cf |= NS_LOSS | NS_LFN;
  407d56:	69bb      	ldr	r3, [r7, #24]
  407d58:	2b00      	cmp	r3, #0
  407d5a:	d006      	beq.n	407d6a <create_name+0x152>
  407d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407d60:	f043 0303 	orr.w	r3, r3, #3
  407d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  407d68:	e003      	b.n	407d72 <create_name+0x15a>
  407d6a:	e002      	b.n	407d72 <create_name+0x15a>
  407d6c:	697b      	ldr	r3, [r7, #20]
  407d6e:	3b01      	subs	r3, #1
  407d70:	617b      	str	r3, [r7, #20]
  407d72:	697b      	ldr	r3, [r7, #20]
  407d74:	2b00      	cmp	r3, #0
  407d76:	d009      	beq.n	407d8c <create_name+0x174>
  407d78:	697b      	ldr	r3, [r7, #20]
  407d7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  407d7e:	3b01      	subs	r3, #1
  407d80:	005b      	lsls	r3, r3, #1
  407d82:	68fa      	ldr	r2, [r7, #12]
  407d84:	4413      	add	r3, r2
  407d86:	881b      	ldrh	r3, [r3, #0]
  407d88:	2b2e      	cmp	r3, #46	; 0x2e
  407d8a:	d1ef      	bne.n	407d6c <create_name+0x154>

	b = i = 0; ni = 8;
  407d8c:	2300      	movs	r3, #0
  407d8e:	623b      	str	r3, [r7, #32]
  407d90:	2300      	movs	r3, #0
  407d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407d96:	2308      	movs	r3, #8
  407d98:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  407d9a:	69bb      	ldr	r3, [r7, #24]
  407d9c:	1c5a      	adds	r2, r3, #1
  407d9e:	61ba      	str	r2, [r7, #24]
  407da0:	005b      	lsls	r3, r3, #1
  407da2:	68fa      	ldr	r2, [r7, #12]
  407da4:	4413      	add	r3, r2
  407da6:	881b      	ldrh	r3, [r3, #0]
  407da8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
  407daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407dac:	2b00      	cmp	r3, #0
  407dae:	d100      	bne.n	407db2 <create_name+0x19a>
  407db0:	e09c      	b.n	407eec <create_name+0x2d4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  407db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407db4:	2b20      	cmp	r3, #32
  407db6:	d006      	beq.n	407dc6 <create_name+0x1ae>
  407db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407dba:	2b2e      	cmp	r3, #46	; 0x2e
  407dbc:	d10a      	bne.n	407dd4 <create_name+0x1bc>
  407dbe:	69ba      	ldr	r2, [r7, #24]
  407dc0:	697b      	ldr	r3, [r7, #20]
  407dc2:	429a      	cmp	r2, r3
  407dc4:	d006      	beq.n	407dd4 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
  407dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407dca:	f043 0303 	orr.w	r3, r3, #3
  407dce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  407dd2:	e07e      	b.n	407ed2 <create_name+0x2ba>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  407dd4:	6a3a      	ldr	r2, [r7, #32]
  407dd6:	69fb      	ldr	r3, [r7, #28]
  407dd8:	429a      	cmp	r2, r3
  407dda:	d203      	bcs.n	407de4 <create_name+0x1cc>
  407ddc:	69ba      	ldr	r2, [r7, #24]
  407dde:	697b      	ldr	r3, [r7, #20]
  407de0:	429a      	cmp	r2, r3
  407de2:	d124      	bne.n	407e2e <create_name+0x216>
			if (ni == 11) {				/* Long extension */
  407de4:	69fb      	ldr	r3, [r7, #28]
  407de6:	2b0b      	cmp	r3, #11
  407de8:	d106      	bne.n	407df8 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
  407dea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407dee:	f043 0303 	orr.w	r3, r3, #3
  407df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  407df6:	e079      	b.n	407eec <create_name+0x2d4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  407df8:	69ba      	ldr	r2, [r7, #24]
  407dfa:	697b      	ldr	r3, [r7, #20]
  407dfc:	429a      	cmp	r2, r3
  407dfe:	d005      	beq.n	407e0c <create_name+0x1f4>
  407e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407e04:	f043 0303 	orr.w	r3, r3, #3
  407e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
  407e0c:	69ba      	ldr	r2, [r7, #24]
  407e0e:	697b      	ldr	r3, [r7, #20]
  407e10:	429a      	cmp	r2, r3
  407e12:	d900      	bls.n	407e16 <create_name+0x1fe>
  407e14:	e06a      	b.n	407eec <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
  407e16:	697b      	ldr	r3, [r7, #20]
  407e18:	61bb      	str	r3, [r7, #24]
  407e1a:	2308      	movs	r3, #8
  407e1c:	623b      	str	r3, [r7, #32]
  407e1e:	230b      	movs	r3, #11
  407e20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
  407e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407e26:	009b      	lsls	r3, r3, #2
  407e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407e2c:	e051      	b.n	407ed2 <create_name+0x2ba>
		}

		if (w >= 0x80) {				/* Non ASCII char */
  407e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e30:	2b7f      	cmp	r3, #127	; 0x7f
  407e32:	d914      	bls.n	407e5e <create_name+0x246>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  407e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e36:	4618      	mov	r0, r3
  407e38:	2100      	movs	r1, #0
  407e3a:	4b26      	ldr	r3, [pc, #152]	; (407ed4 <create_name+0x2bc>)
  407e3c:	4798      	blx	r3
  407e3e:	4603      	mov	r3, r0
  407e40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  407e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e44:	2b00      	cmp	r3, #0
  407e46:	d004      	beq.n	407e52 <create_name+0x23a>
  407e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e4a:	3b80      	subs	r3, #128	; 0x80
  407e4c:	4a25      	ldr	r2, [pc, #148]	; (407ee4 <create_name+0x2cc>)
  407e4e:	5cd3      	ldrb	r3, [r2, r3]
  407e50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  407e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407e56:	f043 0302 	orr.w	r3, r3, #2
  407e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  407e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e60:	2b00      	cmp	r3, #0
  407e62:	d007      	beq.n	407e74 <create_name+0x25c>
  407e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e66:	4820      	ldr	r0, [pc, #128]	; (407ee8 <create_name+0x2d0>)
  407e68:	4619      	mov	r1, r3
  407e6a:	4b1c      	ldr	r3, [pc, #112]	; (407edc <create_name+0x2c4>)
  407e6c:	4798      	blx	r3
  407e6e:	4603      	mov	r3, r0
  407e70:	2b00      	cmp	r3, #0
  407e72:	d008      	beq.n	407e86 <create_name+0x26e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  407e74:	235f      	movs	r3, #95	; 0x5f
  407e76:	84bb      	strh	r3, [r7, #36]	; 0x24
  407e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407e7c:	f043 0303 	orr.w	r3, r3, #3
  407e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  407e84:	e01b      	b.n	407ebe <create_name+0x2a6>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  407e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e88:	2b40      	cmp	r3, #64	; 0x40
  407e8a:	d909      	bls.n	407ea0 <create_name+0x288>
  407e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407e8e:	2b5a      	cmp	r3, #90	; 0x5a
  407e90:	d806      	bhi.n	407ea0 <create_name+0x288>
					b |= 2;
  407e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407e96:	f043 0302 	orr.w	r3, r3, #2
  407e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407e9e:	e00e      	b.n	407ebe <create_name+0x2a6>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  407ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407ea2:	2b60      	cmp	r3, #96	; 0x60
  407ea4:	d90b      	bls.n	407ebe <create_name+0x2a6>
  407ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407ea8:	2b7a      	cmp	r3, #122	; 0x7a
  407eaa:	d808      	bhi.n	407ebe <create_name+0x2a6>
						b |= 1; w -= 0x20;
  407eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407eb0:	f043 0301 	orr.w	r3, r3, #1
  407eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407eba:	3b20      	subs	r3, #32
  407ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  407ebe:	687b      	ldr	r3, [r7, #4]
  407ec0:	699a      	ldr	r2, [r3, #24]
  407ec2:	6a3b      	ldr	r3, [r7, #32]
  407ec4:	1c59      	adds	r1, r3, #1
  407ec6:	6239      	str	r1, [r7, #32]
  407ec8:	4413      	add	r3, r2
  407eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  407ecc:	b2d2      	uxtb	r2, r2
  407ece:	701a      	strb	r2, [r3, #0]
	}
  407ed0:	e763      	b.n	407d9a <create_name+0x182>
  407ed2:	e762      	b.n	407d9a <create_name+0x182>
  407ed4:	0040a3b5 	.word	0x0040a3b5
  407ed8:	0041cee0 	.word	0x0041cee0
  407edc:	004064e5 	.word	0x004064e5
  407ee0:	00406461 	.word	0x00406461
  407ee4:	0041cef4 	.word	0x0041cef4
  407ee8:	0041ceec 	.word	0x0041ceec

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  407eec:	687b      	ldr	r3, [r7, #4]
  407eee:	699b      	ldr	r3, [r3, #24]
  407ef0:	781b      	ldrb	r3, [r3, #0]
  407ef2:	2be5      	cmp	r3, #229	; 0xe5
  407ef4:	d103      	bne.n	407efe <create_name+0x2e6>
  407ef6:	687b      	ldr	r3, [r7, #4]
  407ef8:	699b      	ldr	r3, [r3, #24]
  407efa:	2205      	movs	r2, #5
  407efc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  407efe:	69fb      	ldr	r3, [r7, #28]
  407f00:	2b08      	cmp	r3, #8
  407f02:	d104      	bne.n	407f0e <create_name+0x2f6>
  407f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f08:	009b      	lsls	r3, r3, #2
  407f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  407f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f12:	f003 030c 	and.w	r3, r3, #12
  407f16:	2b0c      	cmp	r3, #12
  407f18:	d005      	beq.n	407f26 <create_name+0x30e>
  407f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f1e:	f003 0303 	and.w	r3, r3, #3
  407f22:	2b03      	cmp	r3, #3
  407f24:	d105      	bne.n	407f32 <create_name+0x31a>
		cf |= NS_LFN;
  407f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407f2a:	f043 0302 	orr.w	r3, r3, #2
  407f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  407f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407f36:	f003 0302 	and.w	r3, r3, #2
  407f3a:	2b00      	cmp	r3, #0
  407f3c:	d117      	bne.n	407f6e <create_name+0x356>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  407f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f42:	f003 0303 	and.w	r3, r3, #3
  407f46:	2b01      	cmp	r3, #1
  407f48:	d105      	bne.n	407f56 <create_name+0x33e>
  407f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407f4e:	f043 0310 	orr.w	r3, r3, #16
  407f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  407f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f5a:	f003 030c 	and.w	r3, r3, #12
  407f5e:	2b04      	cmp	r3, #4
  407f60:	d105      	bne.n	407f6e <create_name+0x356>
  407f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407f66:	f043 0308 	orr.w	r3, r3, #8
  407f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
  407f6e:	687b      	ldr	r3, [r7, #4]
  407f70:	699b      	ldr	r3, [r3, #24]
  407f72:	330b      	adds	r3, #11
  407f74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  407f78:	701a      	strb	r2, [r3, #0]

	return FR_OK;
  407f7a:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
  407f7c:	4618      	mov	r0, r3
  407f7e:	3728      	adds	r7, #40	; 0x28
  407f80:	46bd      	mov	sp, r7
  407f82:	bd80      	pop	{r7, pc}

00407f84 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
  407f84:	b580      	push	{r7, lr}
  407f86:	b08a      	sub	sp, #40	; 0x28
  407f88:	af00      	add	r7, sp, #0
  407f8a:	6078      	str	r0, [r7, #4]
  407f8c:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
  407f8e:	683b      	ldr	r3, [r7, #0]
  407f90:	3309      	adds	r3, #9
  407f92:	623b      	str	r3, [r7, #32]
	if (dj->sect) {
  407f94:	687b      	ldr	r3, [r7, #4]
  407f96:	691b      	ldr	r3, [r3, #16]
  407f98:	2b00      	cmp	r3, #0
  407f9a:	f000 8091 	beq.w	4080c0 <get_fileinfo+0x13c>
		dir = dj->dir;
  407f9e:	687b      	ldr	r3, [r7, #4]
  407fa0:	695b      	ldr	r3, [r3, #20]
  407fa2:	617b      	str	r3, [r7, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  407fa4:	697b      	ldr	r3, [r7, #20]
  407fa6:	7b1b      	ldrb	r3, [r3, #12]
  407fa8:	74fb      	strb	r3, [r7, #19]
		for (i = 0; i < 8; i++) {	/* Copy name body */
  407faa:	2300      	movs	r3, #0
  407fac:	627b      	str	r3, [r7, #36]	; 0x24
  407fae:	e023      	b.n	407ff8 <get_fileinfo+0x74>
			c = dir[i];
  407fb0:	697a      	ldr	r2, [r7, #20]
  407fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407fb4:	4413      	add	r3, r2
  407fb6:	781b      	ldrb	r3, [r3, #0]
  407fb8:	77fb      	strb	r3, [r7, #31]
			if (c == ' ') break;
  407fba:	7ffb      	ldrb	r3, [r7, #31]
  407fbc:	2b20      	cmp	r3, #32
  407fbe:	d100      	bne.n	407fc2 <get_fileinfo+0x3e>
  407fc0:	e01d      	b.n	407ffe <get_fileinfo+0x7a>
			if (c == NDDE) c = (TCHAR)DDE;
  407fc2:	7ffb      	ldrb	r3, [r7, #31]
  407fc4:	2b05      	cmp	r3, #5
  407fc6:	d101      	bne.n	407fcc <get_fileinfo+0x48>
  407fc8:	23e5      	movs	r3, #229	; 0xe5
  407fca:	77fb      	strb	r3, [r7, #31]
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  407fcc:	7cfb      	ldrb	r3, [r7, #19]
  407fce:	f003 0308 	and.w	r3, r3, #8
  407fd2:	2b00      	cmp	r3, #0
  407fd4:	d008      	beq.n	407fe8 <get_fileinfo+0x64>
  407fd6:	7ffb      	ldrb	r3, [r7, #31]
  407fd8:	2b40      	cmp	r3, #64	; 0x40
  407fda:	d905      	bls.n	407fe8 <get_fileinfo+0x64>
  407fdc:	7ffb      	ldrb	r3, [r7, #31]
  407fde:	2b5a      	cmp	r3, #90	; 0x5a
  407fe0:	d802      	bhi.n	407fe8 <get_fileinfo+0x64>
  407fe2:	7ffb      	ldrb	r3, [r7, #31]
  407fe4:	3320      	adds	r3, #32
  407fe6:	77fb      	strb	r3, [r7, #31]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
  407fe8:	6a3b      	ldr	r3, [r7, #32]
  407fea:	1c5a      	adds	r2, r3, #1
  407fec:	623a      	str	r2, [r7, #32]
  407fee:	7ffa      	ldrb	r2, [r7, #31]
  407ff0:	701a      	strb	r2, [r3, #0]

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
  407ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407ff4:	3301      	adds	r3, #1
  407ff6:	627b      	str	r3, [r7, #36]	; 0x24
  407ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407ffa:	2b07      	cmp	r3, #7
  407ffc:	d9d8      	bls.n	407fb0 <get_fileinfo+0x2c>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
  407ffe:	697b      	ldr	r3, [r7, #20]
  408000:	3308      	adds	r3, #8
  408002:	781b      	ldrb	r3, [r3, #0]
  408004:	2b20      	cmp	r3, #32
  408006:	d029      	beq.n	40805c <get_fileinfo+0xd8>
			*p++ = '.';
  408008:	6a3b      	ldr	r3, [r7, #32]
  40800a:	1c5a      	adds	r2, r3, #1
  40800c:	623a      	str	r2, [r7, #32]
  40800e:	222e      	movs	r2, #46	; 0x2e
  408010:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
  408012:	2308      	movs	r3, #8
  408014:	627b      	str	r3, [r7, #36]	; 0x24
  408016:	e01e      	b.n	408056 <get_fileinfo+0xd2>
				c = dir[i];
  408018:	697a      	ldr	r2, [r7, #20]
  40801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40801c:	4413      	add	r3, r2
  40801e:	781b      	ldrb	r3, [r3, #0]
  408020:	77fb      	strb	r3, [r7, #31]
				if (c == ' ') break;
  408022:	7ffb      	ldrb	r3, [r7, #31]
  408024:	2b20      	cmp	r3, #32
  408026:	d100      	bne.n	40802a <get_fileinfo+0xa6>
  408028:	e018      	b.n	40805c <get_fileinfo+0xd8>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  40802a:	7cfb      	ldrb	r3, [r7, #19]
  40802c:	f003 0310 	and.w	r3, r3, #16
  408030:	2b00      	cmp	r3, #0
  408032:	d008      	beq.n	408046 <get_fileinfo+0xc2>
  408034:	7ffb      	ldrb	r3, [r7, #31]
  408036:	2b40      	cmp	r3, #64	; 0x40
  408038:	d905      	bls.n	408046 <get_fileinfo+0xc2>
  40803a:	7ffb      	ldrb	r3, [r7, #31]
  40803c:	2b5a      	cmp	r3, #90	; 0x5a
  40803e:	d802      	bhi.n	408046 <get_fileinfo+0xc2>
  408040:	7ffb      	ldrb	r3, [r7, #31]
  408042:	3320      	adds	r3, #32
  408044:	77fb      	strb	r3, [r7, #31]
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
  408046:	6a3b      	ldr	r3, [r7, #32]
  408048:	1c5a      	adds	r2, r3, #1
  40804a:	623a      	str	r2, [r7, #32]
  40804c:	7ffa      	ldrb	r2, [r7, #31]
  40804e:	701a      	strb	r2, [r3, #0]
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
  408050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408052:	3301      	adds	r3, #1
  408054:	627b      	str	r3, [r7, #36]	; 0x24
  408056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408058:	2b0a      	cmp	r3, #10
  40805a:	d9dd      	bls.n	408018 <get_fileinfo+0x94>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  40805c:	697b      	ldr	r3, [r7, #20]
  40805e:	7ada      	ldrb	r2, [r3, #11]
  408060:	683b      	ldr	r3, [r7, #0]
  408062:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  408064:	697b      	ldr	r3, [r7, #20]
  408066:	331f      	adds	r3, #31
  408068:	781b      	ldrb	r3, [r3, #0]
  40806a:	061a      	lsls	r2, r3, #24
  40806c:	697b      	ldr	r3, [r7, #20]
  40806e:	331e      	adds	r3, #30
  408070:	781b      	ldrb	r3, [r3, #0]
  408072:	041b      	lsls	r3, r3, #16
  408074:	431a      	orrs	r2, r3
  408076:	697b      	ldr	r3, [r7, #20]
  408078:	331d      	adds	r3, #29
  40807a:	781b      	ldrb	r3, [r3, #0]
  40807c:	021b      	lsls	r3, r3, #8
  40807e:	431a      	orrs	r2, r3
  408080:	697b      	ldr	r3, [r7, #20]
  408082:	331c      	adds	r3, #28
  408084:	781b      	ldrb	r3, [r3, #0]
  408086:	431a      	orrs	r2, r3
  408088:	683b      	ldr	r3, [r7, #0]
  40808a:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  40808c:	697b      	ldr	r3, [r7, #20]
  40808e:	3319      	adds	r3, #25
  408090:	781b      	ldrb	r3, [r3, #0]
  408092:	021b      	lsls	r3, r3, #8
  408094:	b29a      	uxth	r2, r3
  408096:	697b      	ldr	r3, [r7, #20]
  408098:	3318      	adds	r3, #24
  40809a:	781b      	ldrb	r3, [r3, #0]
  40809c:	4313      	orrs	r3, r2
  40809e:	b29b      	uxth	r3, r3
  4080a0:	b29a      	uxth	r2, r3
  4080a2:	683b      	ldr	r3, [r7, #0]
  4080a4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  4080a6:	697b      	ldr	r3, [r7, #20]
  4080a8:	3317      	adds	r3, #23
  4080aa:	781b      	ldrb	r3, [r3, #0]
  4080ac:	021b      	lsls	r3, r3, #8
  4080ae:	b29a      	uxth	r2, r3
  4080b0:	697b      	ldr	r3, [r7, #20]
  4080b2:	3316      	adds	r3, #22
  4080b4:	781b      	ldrb	r3, [r3, #0]
  4080b6:	4313      	orrs	r3, r2
  4080b8:	b29b      	uxth	r3, r3
  4080ba:	b29a      	uxth	r2, r3
  4080bc:	683b      	ldr	r3, [r7, #0]
  4080be:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
  4080c0:	6a3b      	ldr	r3, [r7, #32]
  4080c2:	2200      	movs	r2, #0
  4080c4:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
  4080c6:	683b      	ldr	r3, [r7, #0]
  4080c8:	699b      	ldr	r3, [r3, #24]
  4080ca:	2b00      	cmp	r3, #0
  4080cc:	d041      	beq.n	408152 <get_fileinfo+0x1ce>
  4080ce:	683b      	ldr	r3, [r7, #0]
  4080d0:	69db      	ldr	r3, [r3, #28]
  4080d2:	2b00      	cmp	r3, #0
  4080d4:	d03d      	beq.n	408152 <get_fileinfo+0x1ce>
		TCHAR *tp = fno->lfname;
  4080d6:	683b      	ldr	r3, [r7, #0]
  4080d8:	699b      	ldr	r3, [r3, #24]
  4080da:	60fb      	str	r3, [r7, #12]
		WCHAR w, *lfn;

		i = 0;
  4080dc:	2300      	movs	r3, #0
  4080de:	627b      	str	r3, [r7, #36]	; 0x24
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  4080e0:	687b      	ldr	r3, [r7, #4]
  4080e2:	691b      	ldr	r3, [r3, #16]
  4080e4:	2b00      	cmp	r3, #0
  4080e6:	d02f      	beq.n	408148 <get_fileinfo+0x1c4>
  4080e8:	687b      	ldr	r3, [r7, #4]
  4080ea:	8c1a      	ldrh	r2, [r3, #32]
  4080ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4080f0:	429a      	cmp	r2, r3
  4080f2:	d029      	beq.n	408148 <get_fileinfo+0x1c4>
			lfn = dj->lfn;
  4080f4:	687b      	ldr	r3, [r7, #4]
  4080f6:	69db      	ldr	r3, [r3, #28]
  4080f8:	61bb      	str	r3, [r7, #24]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  4080fa:	e01d      	b.n	408138 <get_fileinfo+0x1b4>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  4080fc:	897b      	ldrh	r3, [r7, #10]
  4080fe:	4618      	mov	r0, r3
  408100:	2100      	movs	r1, #0
  408102:	4b15      	ldr	r3, [pc, #84]	; (408158 <get_fileinfo+0x1d4>)
  408104:	4798      	blx	r3
  408106:	4603      	mov	r3, r0
  408108:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  40810a:	897b      	ldrh	r3, [r7, #10]
  40810c:	2b00      	cmp	r3, #0
  40810e:	d102      	bne.n	408116 <get_fileinfo+0x192>
  408110:	2300      	movs	r3, #0
  408112:	627b      	str	r3, [r7, #36]	; 0x24
  408114:	e018      	b.n	408148 <get_fileinfo+0x1c4>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  408116:	683b      	ldr	r3, [r7, #0]
  408118:	69db      	ldr	r3, [r3, #28]
  40811a:	1e5a      	subs	r2, r3, #1
  40811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40811e:	429a      	cmp	r2, r3
  408120:	d802      	bhi.n	408128 <get_fileinfo+0x1a4>
  408122:	2300      	movs	r3, #0
  408124:	627b      	str	r3, [r7, #36]	; 0x24
  408126:	e00f      	b.n	408148 <get_fileinfo+0x1c4>
				tp[i++] = (TCHAR)w;
  408128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40812a:	1c5a      	adds	r2, r3, #1
  40812c:	627a      	str	r2, [r7, #36]	; 0x24
  40812e:	68fa      	ldr	r2, [r7, #12]
  408130:	4413      	add	r3, r2
  408132:	897a      	ldrh	r2, [r7, #10]
  408134:	b2d2      	uxtb	r2, r2
  408136:	701a      	strb	r2, [r3, #0]
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  408138:	69bb      	ldr	r3, [r7, #24]
  40813a:	1c9a      	adds	r2, r3, #2
  40813c:	61ba      	str	r2, [r7, #24]
  40813e:	881b      	ldrh	r3, [r3, #0]
  408140:	817b      	strh	r3, [r7, #10]
  408142:	897b      	ldrh	r3, [r7, #10]
  408144:	2b00      	cmp	r3, #0
  408146:	d1d9      	bne.n	4080fc <get_fileinfo+0x178>
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  408148:	68fa      	ldr	r2, [r7, #12]
  40814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40814c:	4413      	add	r3, r2
  40814e:	2200      	movs	r2, #0
  408150:	701a      	strb	r2, [r3, #0]
	}
#endif
}
  408152:	3728      	adds	r7, #40	; 0x28
  408154:	46bd      	mov	sp, r7
  408156:	bd80      	pop	{r7, pc}
  408158:	0040a3b5 	.word	0x0040a3b5

0040815c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  40815c:	b580      	push	{r7, lr}
  40815e:	b084      	sub	sp, #16
  408160:	af00      	add	r7, sp, #0
  408162:	6078      	str	r0, [r7, #4]
  408164:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  408166:	683b      	ldr	r3, [r7, #0]
  408168:	781b      	ldrb	r3, [r3, #0]
  40816a:	2b2f      	cmp	r3, #47	; 0x2f
  40816c:	d003      	beq.n	408176 <follow_path+0x1a>
  40816e:	683b      	ldr	r3, [r7, #0]
  408170:	781b      	ldrb	r3, [r3, #0]
  408172:	2b5c      	cmp	r3, #92	; 0x5c
  408174:	d102      	bne.n	40817c <follow_path+0x20>
		path++;
  408176:	683b      	ldr	r3, [r7, #0]
  408178:	3301      	adds	r3, #1
  40817a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
  40817c:	687b      	ldr	r3, [r7, #4]
  40817e:	2200      	movs	r2, #0
  408180:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  408182:	683b      	ldr	r3, [r7, #0]
  408184:	781b      	ldrb	r3, [r3, #0]
  408186:	2b1f      	cmp	r3, #31
  408188:	d809      	bhi.n	40819e <follow_path+0x42>
		res = dir_sdi(dj, 0);
  40818a:	6878      	ldr	r0, [r7, #4]
  40818c:	2100      	movs	r1, #0
  40818e:	4b2f      	ldr	r3, [pc, #188]	; (40824c <follow_path+0xf0>)
  408190:	4798      	blx	r3
  408192:	4603      	mov	r3, r0
  408194:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
  408196:	687b      	ldr	r3, [r7, #4]
  408198:	2200      	movs	r2, #0
  40819a:	615a      	str	r2, [r3, #20]
  40819c:	e051      	b.n	408242 <follow_path+0xe6>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
  40819e:	463b      	mov	r3, r7
  4081a0:	6878      	ldr	r0, [r7, #4]
  4081a2:	4619      	mov	r1, r3
  4081a4:	4b2a      	ldr	r3, [pc, #168]	; (408250 <follow_path+0xf4>)
  4081a6:	4798      	blx	r3
  4081a8:	4603      	mov	r3, r0
  4081aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  4081ac:	7bfb      	ldrb	r3, [r7, #15]
  4081ae:	2b00      	cmp	r3, #0
  4081b0:	d000      	beq.n	4081b4 <follow_path+0x58>
  4081b2:	e046      	b.n	408242 <follow_path+0xe6>
			res = dir_find(dj);				/* Find it */
  4081b4:	6878      	ldr	r0, [r7, #4]
  4081b6:	4b27      	ldr	r3, [pc, #156]	; (408254 <follow_path+0xf8>)
  4081b8:	4798      	blx	r3
  4081ba:	4603      	mov	r3, r0
  4081bc:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
  4081be:	687b      	ldr	r3, [r7, #4]
  4081c0:	699b      	ldr	r3, [r3, #24]
  4081c2:	7adb      	ldrb	r3, [r3, #11]
  4081c4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
  4081c6:	7bfb      	ldrb	r3, [r7, #15]
  4081c8:	2b00      	cmp	r3, #0
  4081ca:	d00c      	beq.n	4081e6 <follow_path+0x8a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  4081cc:	7bfb      	ldrb	r3, [r7, #15]
  4081ce:	2b04      	cmp	r3, #4
  4081d0:	d000      	beq.n	4081d4 <follow_path+0x78>
  4081d2:	e036      	b.n	408242 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4081d4:	7bbb      	ldrb	r3, [r7, #14]
  4081d6:	f003 0304 	and.w	r3, r3, #4
  4081da:	2b00      	cmp	r3, #0
  4081dc:	d102      	bne.n	4081e4 <follow_path+0x88>
  4081de:	2305      	movs	r3, #5
  4081e0:	73fb      	strb	r3, [r7, #15]
				}
				break;
  4081e2:	e02e      	b.n	408242 <follow_path+0xe6>
  4081e4:	e02d      	b.n	408242 <follow_path+0xe6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4081e6:	7bbb      	ldrb	r3, [r7, #14]
  4081e8:	f003 0304 	and.w	r3, r3, #4
  4081ec:	2b00      	cmp	r3, #0
  4081ee:	d000      	beq.n	4081f2 <follow_path+0x96>
  4081f0:	e027      	b.n	408242 <follow_path+0xe6>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4081f2:	687b      	ldr	r3, [r7, #4]
  4081f4:	695b      	ldr	r3, [r3, #20]
  4081f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4081f8:	68bb      	ldr	r3, [r7, #8]
  4081fa:	330b      	adds	r3, #11
  4081fc:	781b      	ldrb	r3, [r3, #0]
  4081fe:	f003 0310 	and.w	r3, r3, #16
  408202:	2b00      	cmp	r3, #0
  408204:	d102      	bne.n	40820c <follow_path+0xb0>
				res = FR_NO_PATH; break;
  408206:	2305      	movs	r3, #5
  408208:	73fb      	strb	r3, [r7, #15]
  40820a:	e01a      	b.n	408242 <follow_path+0xe6>
			}
			dj->sclust = LD_CLUST(dir);
  40820c:	68bb      	ldr	r3, [r7, #8]
  40820e:	3315      	adds	r3, #21
  408210:	781b      	ldrb	r3, [r3, #0]
  408212:	021b      	lsls	r3, r3, #8
  408214:	b29a      	uxth	r2, r3
  408216:	68bb      	ldr	r3, [r7, #8]
  408218:	3314      	adds	r3, #20
  40821a:	781b      	ldrb	r3, [r3, #0]
  40821c:	4313      	orrs	r3, r2
  40821e:	b29b      	uxth	r3, r3
  408220:	b29b      	uxth	r3, r3
  408222:	041a      	lsls	r2, r3, #16
  408224:	68bb      	ldr	r3, [r7, #8]
  408226:	331b      	adds	r3, #27
  408228:	781b      	ldrb	r3, [r3, #0]
  40822a:	021b      	lsls	r3, r3, #8
  40822c:	b299      	uxth	r1, r3
  40822e:	68bb      	ldr	r3, [r7, #8]
  408230:	331a      	adds	r3, #26
  408232:	781b      	ldrb	r3, [r3, #0]
  408234:	430b      	orrs	r3, r1
  408236:	b29b      	uxth	r3, r3
  408238:	b29b      	uxth	r3, r3
  40823a:	431a      	orrs	r2, r3
  40823c:	687b      	ldr	r3, [r7, #4]
  40823e:	609a      	str	r2, [r3, #8]
		}
  408240:	e7ad      	b.n	40819e <follow_path+0x42>
	}

	return res;
  408242:	7bfb      	ldrb	r3, [r7, #15]
}
  408244:	4618      	mov	r0, r3
  408246:	3710      	adds	r7, #16
  408248:	46bd      	mov	sp, r7
  40824a:	bd80      	pop	{r7, pc}
  40824c:	00406fdd 	.word	0x00406fdd
  408250:	00407c19 	.word	0x00407c19
  408254:	00407649 	.word	0x00407649

00408258 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  408258:	b590      	push	{r4, r7, lr}
  40825a:	b083      	sub	sp, #12
  40825c:	af00      	add	r7, sp, #0
  40825e:	6078      	str	r0, [r7, #4]
  408260:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  408262:	687b      	ldr	r3, [r7, #4]
  408264:	785a      	ldrb	r2, [r3, #1]
  408266:	687b      	ldr	r3, [r7, #4]
  408268:	3330      	adds	r3, #48	; 0x30
  40826a:	4610      	mov	r0, r2
  40826c:	4619      	mov	r1, r3
  40826e:	683a      	ldr	r2, [r7, #0]
  408270:	2301      	movs	r3, #1
  408272:	4c27      	ldr	r4, [pc, #156]	; (408310 <check_fs+0xb8>)
  408274:	47a0      	blx	r4
  408276:	4603      	mov	r3, r0
  408278:	2b00      	cmp	r3, #0
  40827a:	d001      	beq.n	408280 <check_fs+0x28>
		return 3;
  40827c:	2303      	movs	r3, #3
  40827e:	e042      	b.n	408306 <check_fs+0xae>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  408280:	687b      	ldr	r3, [r7, #4]
  408282:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  408286:	021b      	lsls	r3, r3, #8
  408288:	b29a      	uxth	r2, r3
  40828a:	687b      	ldr	r3, [r7, #4]
  40828c:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  408290:	4313      	orrs	r3, r2
  408292:	b29b      	uxth	r3, r3
  408294:	b21a      	sxth	r2, r3
  408296:	4b1f      	ldr	r3, [pc, #124]	; (408314 <check_fs+0xbc>)
  408298:	429a      	cmp	r2, r3
  40829a:	d001      	beq.n	4082a0 <check_fs+0x48>
		return 2;
  40829c:	2302      	movs	r3, #2
  40829e:	e032      	b.n	408306 <check_fs+0xae>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  4082a0:	687b      	ldr	r3, [r7, #4]
  4082a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
  4082a6:	061a      	lsls	r2, r3, #24
  4082a8:	687b      	ldr	r3, [r7, #4]
  4082aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
  4082ae:	041b      	lsls	r3, r3, #16
  4082b0:	431a      	orrs	r2, r3
  4082b2:	687b      	ldr	r3, [r7, #4]
  4082b4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
  4082b8:	021b      	lsls	r3, r3, #8
  4082ba:	431a      	orrs	r2, r3
  4082bc:	687b      	ldr	r3, [r7, #4]
  4082be:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
  4082c2:	4313      	orrs	r3, r2
  4082c4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4082c8:	4b13      	ldr	r3, [pc, #76]	; (408318 <check_fs+0xc0>)
  4082ca:	429a      	cmp	r2, r3
  4082cc:	d101      	bne.n	4082d2 <check_fs+0x7a>
		return 0;
  4082ce:	2300      	movs	r3, #0
  4082d0:	e019      	b.n	408306 <check_fs+0xae>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  4082d2:	687b      	ldr	r3, [r7, #4]
  4082d4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
  4082d8:	061a      	lsls	r2, r3, #24
  4082da:	687b      	ldr	r3, [r7, #4]
  4082dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
  4082e0:	041b      	lsls	r3, r3, #16
  4082e2:	431a      	orrs	r2, r3
  4082e4:	687b      	ldr	r3, [r7, #4]
  4082e6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
  4082ea:	021b      	lsls	r3, r3, #8
  4082ec:	431a      	orrs	r2, r3
  4082ee:	687b      	ldr	r3, [r7, #4]
  4082f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
  4082f4:	4313      	orrs	r3, r2
  4082f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4082fa:	4b07      	ldr	r3, [pc, #28]	; (408318 <check_fs+0xc0>)
  4082fc:	429a      	cmp	r2, r3
  4082fe:	d101      	bne.n	408304 <check_fs+0xac>
		return 0;
  408300:	2300      	movs	r3, #0
  408302:	e000      	b.n	408306 <check_fs+0xae>

	return 1;
  408304:	2301      	movs	r3, #1
}
  408306:	4618      	mov	r0, r3
  408308:	370c      	adds	r7, #12
  40830a:	46bd      	mov	sp, r7
  40830c:	bd90      	pop	{r4, r7, pc}
  40830e:	bf00      	nop
  408310:	0040619d 	.word	0x0040619d
  408314:	ffffaa55 	.word	0xffffaa55
  408318:	00544146 	.word	0x00544146

0040831c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  40831c:	b590      	push	{r4, r7, lr}
  40831e:	b093      	sub	sp, #76	; 0x4c
  408320:	af00      	add	r7, sp, #0
  408322:	60f8      	str	r0, [r7, #12]
  408324:	60b9      	str	r1, [r7, #8]
  408326:	4613      	mov	r3, r2
  408328:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  40832a:	68fb      	ldr	r3, [r7, #12]
  40832c:	681b      	ldr	r3, [r3, #0]
  40832e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  408330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408332:	781b      	ldrb	r3, [r3, #0]
  408334:	3b30      	subs	r3, #48	; 0x30
  408336:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  408338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40833a:	2b09      	cmp	r3, #9
  40833c:	d80b      	bhi.n	408356 <chk_mounted+0x3a>
  40833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408340:	3301      	adds	r3, #1
  408342:	781b      	ldrb	r3, [r3, #0]
  408344:	2b3a      	cmp	r3, #58	; 0x3a
  408346:	d106      	bne.n	408356 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
  408348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40834a:	3302      	adds	r3, #2
  40834c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40834e:	68fb      	ldr	r3, [r7, #12]
  408350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  408352:	601a      	str	r2, [r3, #0]
  408354:	e001      	b.n	40835a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
  408356:	2300      	movs	r3, #0
  408358:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  40835a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40835c:	2b00      	cmp	r3, #0
  40835e:	d001      	beq.n	408364 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
  408360:	230b      	movs	r3, #11
  408362:	e277      	b.n	408854 <chk_mounted+0x538>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  408364:	4ba6      	ldr	r3, [pc, #664]	; (408600 <chk_mounted+0x2e4>)
  408366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  408368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40836c:	62bb      	str	r3, [r7, #40]	; 0x28
  40836e:	68bb      	ldr	r3, [r7, #8]
  408370:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408372:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  408374:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408376:	2b00      	cmp	r3, #0
  408378:	d101      	bne.n	40837e <chk_mounted+0x62>
  40837a:	230c      	movs	r3, #12
  40837c:	e26a      	b.n	408854 <chk_mounted+0x538>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  40837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408380:	781b      	ldrb	r3, [r3, #0]
  408382:	2b00      	cmp	r3, #0
  408384:	d01a      	beq.n	4083bc <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
  408386:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408388:	785b      	ldrb	r3, [r3, #1]
  40838a:	4618      	mov	r0, r3
  40838c:	4b9d      	ldr	r3, [pc, #628]	; (408604 <chk_mounted+0x2e8>)
  40838e:	4798      	blx	r3
  408390:	4603      	mov	r3, r0
  408392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  408396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40839a:	f003 0301 	and.w	r3, r3, #1
  40839e:	2b00      	cmp	r3, #0
  4083a0:	d10c      	bne.n	4083bc <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4083a2:	79fb      	ldrb	r3, [r7, #7]
  4083a4:	2b00      	cmp	r3, #0
  4083a6:	d007      	beq.n	4083b8 <chk_mounted+0x9c>
  4083a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4083ac:	f003 0304 	and.w	r3, r3, #4
  4083b0:	2b00      	cmp	r3, #0
  4083b2:	d001      	beq.n	4083b8 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
  4083b4:	230a      	movs	r3, #10
  4083b6:	e24d      	b.n	408854 <chk_mounted+0x538>
			return FR_OK;				/* The file system object is valid */
  4083b8:	2300      	movs	r3, #0
  4083ba:	e24b      	b.n	408854 <chk_mounted+0x538>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  4083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083be:	2200      	movs	r2, #0
  4083c0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4083c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4083c4:	b2da      	uxtb	r2, r3
  4083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083c8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083cc:	785b      	ldrb	r3, [r3, #1]
  4083ce:	4618      	mov	r0, r3
  4083d0:	4b8d      	ldr	r3, [pc, #564]	; (408608 <chk_mounted+0x2ec>)
  4083d2:	4798      	blx	r3
  4083d4:	4603      	mov	r3, r0
  4083d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  4083da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4083de:	f003 0301 	and.w	r3, r3, #1
  4083e2:	2b00      	cmp	r3, #0
  4083e4:	d001      	beq.n	4083ea <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  4083e6:	2303      	movs	r3, #3
  4083e8:	e234      	b.n	408854 <chk_mounted+0x538>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4083ea:	79fb      	ldrb	r3, [r7, #7]
  4083ec:	2b00      	cmp	r3, #0
  4083ee:	d007      	beq.n	408400 <chk_mounted+0xe4>
  4083f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4083f4:	f003 0304 	and.w	r3, r3, #4
  4083f8:	2b00      	cmp	r3, #0
  4083fa:	d001      	beq.n	408400 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
  4083fc:	230a      	movs	r3, #10
  4083fe:	e229      	b.n	408854 <chk_mounted+0x538>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  408400:	2300      	movs	r3, #0
  408402:	63fb      	str	r3, [r7, #60]	; 0x3c
  408404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  408406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  408408:	4b80      	ldr	r3, [pc, #512]	; (40860c <chk_mounted+0x2f0>)
  40840a:	4798      	blx	r3
  40840c:	4603      	mov	r3, r0
  40840e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  408412:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  408416:	2b01      	cmp	r3, #1
  408418:	d133      	bne.n	408482 <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
  40841a:	2300      	movs	r3, #0
  40841c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
  408420:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  408424:	2b00      	cmp	r3, #0
  408426:	d004      	beq.n	408432 <chk_mounted+0x116>
  408428:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40842c:	3b01      	subs	r3, #1
  40842e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  408432:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  408436:	011b      	lsls	r3, r3, #4
  408438:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  40843c:	3330      	adds	r3, #48	; 0x30
  40843e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408440:	4413      	add	r3, r2
  408442:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
  408444:	6a3b      	ldr	r3, [r7, #32]
  408446:	3304      	adds	r3, #4
  408448:	781b      	ldrb	r3, [r3, #0]
  40844a:	2b00      	cmp	r3, #0
  40844c:	d019      	beq.n	408482 <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  40844e:	6a3b      	ldr	r3, [r7, #32]
  408450:	330b      	adds	r3, #11
  408452:	781b      	ldrb	r3, [r3, #0]
  408454:	061a      	lsls	r2, r3, #24
  408456:	6a3b      	ldr	r3, [r7, #32]
  408458:	330a      	adds	r3, #10
  40845a:	781b      	ldrb	r3, [r3, #0]
  40845c:	041b      	lsls	r3, r3, #16
  40845e:	431a      	orrs	r2, r3
  408460:	6a3b      	ldr	r3, [r7, #32]
  408462:	3309      	adds	r3, #9
  408464:	781b      	ldrb	r3, [r3, #0]
  408466:	021b      	lsls	r3, r3, #8
  408468:	431a      	orrs	r2, r3
  40846a:	6a3b      	ldr	r3, [r7, #32]
  40846c:	3308      	adds	r3, #8
  40846e:	781b      	ldrb	r3, [r3, #0]
  408470:	4313      	orrs	r3, r2
  408472:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
  408474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  408476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  408478:	4b64      	ldr	r3, [pc, #400]	; (40860c <chk_mounted+0x2f0>)
  40847a:	4798      	blx	r3
  40847c:	4603      	mov	r3, r0
  40847e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  408482:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  408486:	2b03      	cmp	r3, #3
  408488:	d101      	bne.n	40848e <chk_mounted+0x172>
  40848a:	2301      	movs	r3, #1
  40848c:	e1e2      	b.n	408854 <chk_mounted+0x538>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  40848e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  408492:	2b00      	cmp	r3, #0
  408494:	d001      	beq.n	40849a <chk_mounted+0x17e>
  408496:	230d      	movs	r3, #13
  408498:	e1dc      	b.n	408854 <chk_mounted+0x538>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40849c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  4084a0:	021b      	lsls	r3, r3, #8
  4084a2:	b29a      	uxth	r2, r3
  4084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084a6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  4084aa:	4313      	orrs	r3, r2
  4084ac:	b29b      	uxth	r3, r3
  4084ae:	b21b      	sxth	r3, r3
  4084b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4084b4:	d001      	beq.n	4084ba <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
  4084b6:	230d      	movs	r3, #13
  4084b8:	e1cc      	b.n	408854 <chk_mounted+0x538>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  4084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084bc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4084c0:	021b      	lsls	r3, r3, #8
  4084c2:	b29a      	uxth	r2, r3
  4084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  4084ca:	4313      	orrs	r3, r2
  4084cc:	b29b      	uxth	r3, r3
  4084ce:	b29b      	uxth	r3, r3
  4084d0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  4084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4084d4:	2b00      	cmp	r3, #0
  4084d6:	d112      	bne.n	4084fe <chk_mounted+0x1e2>
  4084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084da:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
  4084de:	061a      	lsls	r2, r3, #24
  4084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
  4084e6:	041b      	lsls	r3, r3, #16
  4084e8:	431a      	orrs	r2, r3
  4084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
  4084f0:	021b      	lsls	r3, r3, #8
  4084f2:	431a      	orrs	r2, r3
  4084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4084f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
  4084fa:	4313      	orrs	r3, r2
  4084fc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
  4084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408500:	6bba      	ldr	r2, [r7, #56]	; 0x38
  408502:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  408504:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  40850a:	77fb      	strb	r3, [r7, #31]
  40850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40850e:	7ffa      	ldrb	r2, [r7, #31]
  408510:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  408512:	7ffb      	ldrb	r3, [r7, #31]
  408514:	2b01      	cmp	r3, #1
  408516:	d004      	beq.n	408522 <chk_mounted+0x206>
  408518:	7ffb      	ldrb	r3, [r7, #31]
  40851a:	2b02      	cmp	r3, #2
  40851c:	d001      	beq.n	408522 <chk_mounted+0x206>
  40851e:	230d      	movs	r3, #13
  408520:	e198      	b.n	408854 <chk_mounted+0x538>
	fasize *= b;										/* Number of sectors for FAT area */
  408522:	7ffa      	ldrb	r2, [r7, #31]
  408524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  408526:	fb02 f303 	mul.w	r3, r2, r3
  40852a:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  40852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40852e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
  408532:	77fb      	strb	r3, [r7, #31]
  408534:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408536:	7ffa      	ldrb	r2, [r7, #31]
  408538:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40853a:	7ffb      	ldrb	r3, [r7, #31]
  40853c:	2b00      	cmp	r3, #0
  40853e:	d005      	beq.n	40854c <chk_mounted+0x230>
  408540:	7ffa      	ldrb	r2, [r7, #31]
  408542:	7ffb      	ldrb	r3, [r7, #31]
  408544:	3b01      	subs	r3, #1
  408546:	4013      	ands	r3, r2
  408548:	2b00      	cmp	r3, #0
  40854a:	d001      	beq.n	408550 <chk_mounted+0x234>
  40854c:	230d      	movs	r3, #13
  40854e:	e181      	b.n	408854 <chk_mounted+0x538>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  408550:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  408556:	021b      	lsls	r3, r3, #8
  408558:	b29a      	uxth	r2, r3
  40855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40855c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  408560:	4313      	orrs	r3, r2
  408562:	b29b      	uxth	r3, r3
  408564:	b29a      	uxth	r2, r3
  408566:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408568:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  40856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40856c:	891b      	ldrh	r3, [r3, #8]
  40856e:	f003 030f 	and.w	r3, r3, #15
  408572:	b29b      	uxth	r3, r3
  408574:	2b00      	cmp	r3, #0
  408576:	d001      	beq.n	40857c <chk_mounted+0x260>
  408578:	230d      	movs	r3, #13
  40857a:	e16b      	b.n	408854 <chk_mounted+0x538>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  40857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40857e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  408582:	021b      	lsls	r3, r3, #8
  408584:	b29a      	uxth	r2, r3
  408586:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408588:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  40858c:	4313      	orrs	r3, r2
  40858e:	b29b      	uxth	r3, r3
  408590:	b29b      	uxth	r3, r3
  408592:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  408594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  408596:	2b00      	cmp	r3, #0
  408598:	d112      	bne.n	4085c0 <chk_mounted+0x2a4>
  40859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40859c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
  4085a0:	061a      	lsls	r2, r3, #24
  4085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
  4085a8:	041b      	lsls	r3, r3, #16
  4085aa:	431a      	orrs	r2, r3
  4085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
  4085b2:	021b      	lsls	r3, r3, #8
  4085b4:	431a      	orrs	r2, r3
  4085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4085bc:	4313      	orrs	r3, r2
  4085be:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  4085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  4085c6:	021b      	lsls	r3, r3, #8
  4085c8:	b29a      	uxth	r2, r3
  4085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  4085d0:	4313      	orrs	r3, r2
  4085d2:	b29b      	uxth	r3, r3
  4085d4:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4085d6:	8bbb      	ldrh	r3, [r7, #28]
  4085d8:	2b00      	cmp	r3, #0
  4085da:	d101      	bne.n	4085e0 <chk_mounted+0x2c4>
  4085dc:	230d      	movs	r3, #13
  4085de:	e139      	b.n	408854 <chk_mounted+0x538>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  4085e0:	8bba      	ldrh	r2, [r7, #28]
  4085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4085e4:	441a      	add	r2, r3
  4085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4085e8:	891b      	ldrh	r3, [r3, #8]
  4085ea:	091b      	lsrs	r3, r3, #4
  4085ec:	b29b      	uxth	r3, r3
  4085ee:	4413      	add	r3, r2
  4085f0:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4085f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4085f4:	69bb      	ldr	r3, [r7, #24]
  4085f6:	429a      	cmp	r2, r3
  4085f8:	d20a      	bcs.n	408610 <chk_mounted+0x2f4>
  4085fa:	230d      	movs	r3, #13
  4085fc:	e12a      	b.n	408854 <chk_mounted+0x538>
  4085fe:	bf00      	nop
  408600:	2000340c 	.word	0x2000340c
  408604:	00406169 	.word	0x00406169
  408608:	004060f1 	.word	0x004060f1
  40860c:	00408259 	.word	0x00408259
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  408610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  408612:	69bb      	ldr	r3, [r7, #24]
  408614:	1ad2      	subs	r2, r2, r3
  408616:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408618:	789b      	ldrb	r3, [r3, #2]
  40861a:	fbb2 f3f3 	udiv	r3, r2, r3
  40861e:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  408620:	697b      	ldr	r3, [r7, #20]
  408622:	2b00      	cmp	r3, #0
  408624:	d101      	bne.n	40862a <chk_mounted+0x30e>
  408626:	230d      	movs	r3, #13
  408628:	e114      	b.n	408854 <chk_mounted+0x538>
	fmt = FS_FAT12;
  40862a:	2301      	movs	r3, #1
  40862c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  408630:	697a      	ldr	r2, [r7, #20]
  408632:	f640 73f5 	movw	r3, #4085	; 0xff5
  408636:	429a      	cmp	r2, r3
  408638:	d902      	bls.n	408640 <chk_mounted+0x324>
  40863a:	2302      	movs	r3, #2
  40863c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  408640:	697a      	ldr	r2, [r7, #20]
  408642:	f64f 73f5 	movw	r3, #65525	; 0xfff5
  408646:	429a      	cmp	r2, r3
  408648:	d902      	bls.n	408650 <chk_mounted+0x334>
  40864a:	2303      	movs	r3, #3
  40864c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  408650:	697b      	ldr	r3, [r7, #20]
  408652:	1c9a      	adds	r2, r3, #2
  408654:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408656:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  408658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40865a:	69bb      	ldr	r3, [r7, #24]
  40865c:	441a      	add	r2, r3
  40865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408660:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  408662:	8bba      	ldrh	r2, [r7, #28]
  408664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  408666:	441a      	add	r2, r3
  408668:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40866a:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
  40866c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  408670:	2b03      	cmp	r3, #3
  408672:	d11e      	bne.n	4086b2 <chk_mounted+0x396>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  408674:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408676:	891b      	ldrh	r3, [r3, #8]
  408678:	2b00      	cmp	r3, #0
  40867a:	d001      	beq.n	408680 <chk_mounted+0x364>
  40867c:	230d      	movs	r3, #13
  40867e:	e0e9      	b.n	408854 <chk_mounted+0x538>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  408680:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408682:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
  408686:	061a      	lsls	r2, r3, #24
  408688:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40868a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
  40868e:	041b      	lsls	r3, r3, #16
  408690:	431a      	orrs	r2, r3
  408692:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
  408698:	021b      	lsls	r3, r3, #8
  40869a:	431a      	orrs	r2, r3
  40869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40869e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  4086a2:	431a      	orrs	r2, r3
  4086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086a6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  4086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086aa:	699b      	ldr	r3, [r3, #24]
  4086ac:	009b      	lsls	r3, r3, #2
  4086ae:	633b      	str	r3, [r7, #48]	; 0x30
  4086b0:	e01f      	b.n	4086f2 <chk_mounted+0x3d6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086b4:	891b      	ldrh	r3, [r3, #8]
  4086b6:	2b00      	cmp	r3, #0
  4086b8:	d101      	bne.n	4086be <chk_mounted+0x3a2>
  4086ba:	230d      	movs	r3, #13
  4086bc:	e0ca      	b.n	408854 <chk_mounted+0x538>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  4086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086c0:	6a1a      	ldr	r2, [r3, #32]
  4086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4086c4:	441a      	add	r2, r3
  4086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086c8:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4086ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4086ce:	2b02      	cmp	r3, #2
  4086d0:	d103      	bne.n	4086da <chk_mounted+0x3be>
  4086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086d4:	699b      	ldr	r3, [r3, #24]
  4086d6:	005b      	lsls	r3, r3, #1
  4086d8:	e00a      	b.n	4086f0 <chk_mounted+0x3d4>
  4086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086dc:	699a      	ldr	r2, [r3, #24]
  4086de:	4613      	mov	r3, r2
  4086e0:	005b      	lsls	r3, r3, #1
  4086e2:	4413      	add	r3, r2
  4086e4:	085a      	lsrs	r2, r3, #1
  4086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086e8:	699b      	ldr	r3, [r3, #24]
  4086ea:	f003 0301 	and.w	r3, r3, #1
  4086ee:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
  4086f0:	633b      	str	r3, [r7, #48]	; 0x30
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4086f4:	69da      	ldr	r2, [r3, #28]
  4086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4086f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4086fc:	0a5b      	lsrs	r3, r3, #9
  4086fe:	429a      	cmp	r2, r3
  408700:	d201      	bcs.n	408706 <chk_mounted+0x3ea>
		return FR_NO_FILESYSTEM;
  408702:	230d      	movs	r3, #13
  408704:	e0a6      	b.n	408854 <chk_mounted+0x538>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  408706:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408708:	f04f 32ff 	mov.w	r2, #4294967295
  40870c:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
  40870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408710:	2200      	movs	r2, #0
  408712:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  408714:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  408718:	2b03      	cmp	r3, #3
  40871a:	f040 8083 	bne.w	408824 <chk_mounted+0x508>
	 	fs->fsi_flag = 0;
  40871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408720:	2200      	movs	r2, #0
  408722:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  408724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408726:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  40872a:	021b      	lsls	r3, r3, #8
  40872c:	b29a      	uxth	r2, r3
  40872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408730:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  408734:	4313      	orrs	r3, r2
  408736:	b29b      	uxth	r3, r3
  408738:	b29b      	uxth	r3, r3
  40873a:	461a      	mov	r2, r3
  40873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40873e:	441a      	add	r2, r3
  408740:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408742:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  408744:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408746:	7859      	ldrb	r1, [r3, #1]
  408748:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40874a:	f103 0230 	add.w	r2, r3, #48	; 0x30
  40874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408750:	695b      	ldr	r3, [r3, #20]
  408752:	4608      	mov	r0, r1
  408754:	4611      	mov	r1, r2
  408756:	461a      	mov	r2, r3
  408758:	2301      	movs	r3, #1
  40875a:	4c40      	ldr	r4, [pc, #256]	; (40885c <chk_mounted+0x540>)
  40875c:	47a0      	blx	r4
  40875e:	4603      	mov	r3, r0
  408760:	2b00      	cmp	r3, #0
  408762:	d15f      	bne.n	408824 <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  408764:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408766:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  40876a:	021b      	lsls	r3, r3, #8
  40876c:	b29a      	uxth	r2, r3
  40876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408770:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  408774:	4313      	orrs	r3, r2
  408776:	b29b      	uxth	r3, r3

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  408778:	b21a      	sxth	r2, r3
  40877a:	4b39      	ldr	r3, [pc, #228]	; (408860 <chk_mounted+0x544>)
  40877c:	429a      	cmp	r2, r3
  40877e:	d151      	bne.n	408824 <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  408780:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408782:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  408786:	061a      	lsls	r2, r3, #24
  408788:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40878a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  40878e:	041b      	lsls	r3, r3, #16
  408790:	431a      	orrs	r2, r3
  408792:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  408798:	021b      	lsls	r3, r3, #8
  40879a:	431a      	orrs	r2, r3
  40879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40879e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  4087a2:	431a      	orrs	r2, r3
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  4087a4:	4b2f      	ldr	r3, [pc, #188]	; (408864 <chk_mounted+0x548>)
  4087a6:	429a      	cmp	r2, r3
  4087a8:	d13c      	bne.n	408824 <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087ac:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
  4087b0:	061a      	lsls	r2, r3, #24
  4087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087b4:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
  4087b8:	041b      	lsls	r3, r3, #16
  4087ba:	431a      	orrs	r2, r3
  4087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087be:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
  4087c2:	021b      	lsls	r3, r3, #8
  4087c4:	431a      	orrs	r2, r3
  4087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087c8:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
  4087cc:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4087ce:	4b26      	ldr	r3, [pc, #152]	; (408868 <chk_mounted+0x54c>)
  4087d0:	429a      	cmp	r2, r3
  4087d2:	d127      	bne.n	408824 <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087d6:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
  4087da:	061a      	lsls	r2, r3, #24
  4087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087de:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
  4087e2:	041b      	lsls	r3, r3, #16
  4087e4:	431a      	orrs	r2, r3
  4087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087e8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
  4087ec:	021b      	lsls	r3, r3, #8
  4087ee:	431a      	orrs	r2, r3
  4087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
  4087f6:	431a      	orrs	r2, r3
  4087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087fa:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4087fe:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
  408802:	061a      	lsls	r2, r3, #24
  408804:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408806:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
  40880a:	041b      	lsls	r3, r3, #16
  40880c:	431a      	orrs	r2, r3
  40880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408810:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
  408814:	021b      	lsls	r3, r3, #8
  408816:	431a      	orrs	r2, r3
  408818:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40881a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
  40881e:	431a      	orrs	r2, r3
  408820:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408822:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  408824:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408826:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  40882a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40882c:	4b0f      	ldr	r3, [pc, #60]	; (40886c <chk_mounted+0x550>)
  40882e:	881b      	ldrh	r3, [r3, #0]
  408830:	3301      	adds	r3, #1
  408832:	b29a      	uxth	r2, r3
  408834:	4b0d      	ldr	r3, [pc, #52]	; (40886c <chk_mounted+0x550>)
  408836:	801a      	strh	r2, [r3, #0]
  408838:	4b0c      	ldr	r3, [pc, #48]	; (40886c <chk_mounted+0x550>)
  40883a:	881a      	ldrh	r2, [r3, #0]
  40883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40883e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  408840:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408842:	2200      	movs	r2, #0
  408844:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
  408846:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408848:	2200      	movs	r2, #0
  40884a:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
  40884c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40884e:	4b08      	ldr	r3, [pc, #32]	; (408870 <chk_mounted+0x554>)
  408850:	4798      	blx	r3
#endif

	return FR_OK;
  408852:	2300      	movs	r3, #0
}
  408854:	4618      	mov	r0, r3
  408856:	374c      	adds	r7, #76	; 0x4c
  408858:	46bd      	mov	sp, r7
  40885a:	bd90      	pop	{r4, r7, pc}
  40885c:	0040619d 	.word	0x0040619d
  408860:	ffffaa55 	.word	0xffffaa55
  408864:	41615252 	.word	0x41615252
  408868:	61417272 	.word	0x61417272
  40886c:	20003410 	.word	0x20003410
  408870:	0040681d 	.word	0x0040681d

00408874 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  408874:	b580      	push	{r7, lr}
  408876:	b082      	sub	sp, #8
  408878:	af00      	add	r7, sp, #0
  40887a:	6078      	str	r0, [r7, #4]
  40887c:	460b      	mov	r3, r1
  40887e:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
  408880:	687b      	ldr	r3, [r7, #4]
  408882:	2b00      	cmp	r3, #0
  408884:	d008      	beq.n	408898 <validate+0x24>
  408886:	687b      	ldr	r3, [r7, #4]
  408888:	781b      	ldrb	r3, [r3, #0]
  40888a:	2b00      	cmp	r3, #0
  40888c:	d004      	beq.n	408898 <validate+0x24>
  40888e:	687b      	ldr	r3, [r7, #4]
  408890:	88db      	ldrh	r3, [r3, #6]
  408892:	887a      	ldrh	r2, [r7, #2]
  408894:	429a      	cmp	r2, r3
  408896:	d001      	beq.n	40889c <validate+0x28>
		return FR_INVALID_OBJECT;
  408898:	2309      	movs	r3, #9
  40889a:	e00c      	b.n	4088b6 <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  40889c:	687b      	ldr	r3, [r7, #4]
  40889e:	785b      	ldrb	r3, [r3, #1]
  4088a0:	4618      	mov	r0, r3
  4088a2:	4b07      	ldr	r3, [pc, #28]	; (4088c0 <validate+0x4c>)
  4088a4:	4798      	blx	r3
  4088a6:	4603      	mov	r3, r0
  4088a8:	f003 0301 	and.w	r3, r3, #1
  4088ac:	2b00      	cmp	r3, #0
  4088ae:	d001      	beq.n	4088b4 <validate+0x40>
		return FR_NOT_READY;
  4088b0:	2303      	movs	r3, #3
  4088b2:	e000      	b.n	4088b6 <validate+0x42>

	return FR_OK;
  4088b4:	2300      	movs	r3, #0
}
  4088b6:	4618      	mov	r0, r3
  4088b8:	3708      	adds	r7, #8
  4088ba:	46bd      	mov	sp, r7
  4088bc:	bd80      	pop	{r7, pc}
  4088be:	bf00      	nop
  4088c0:	00406169 	.word	0x00406169

004088c4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  4088c4:	b580      	push	{r7, lr}
  4088c6:	b084      	sub	sp, #16
  4088c8:	af00      	add	r7, sp, #0
  4088ca:	4603      	mov	r3, r0
  4088cc:	6039      	str	r1, [r7, #0]
  4088ce:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  4088d0:	79fb      	ldrb	r3, [r7, #7]
  4088d2:	2b00      	cmp	r3, #0
  4088d4:	d001      	beq.n	4088da <f_mount+0x16>
		return FR_INVALID_DRIVE;
  4088d6:	230b      	movs	r3, #11
  4088d8:	e019      	b.n	40890e <f_mount+0x4a>
	rfs = FatFs[vol];			/* Get current fs object */
  4088da:	79fa      	ldrb	r2, [r7, #7]
  4088dc:	4b0e      	ldr	r3, [pc, #56]	; (408918 <f_mount+0x54>)
  4088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4088e2:	60fb      	str	r3, [r7, #12]

	if (rfs) {
  4088e4:	68fb      	ldr	r3, [r7, #12]
  4088e6:	2b00      	cmp	r3, #0
  4088e8:	d005      	beq.n	4088f6 <f_mount+0x32>
#if _FS_SHARE
		clear_lock(rfs);
  4088ea:	68f8      	ldr	r0, [r7, #12]
  4088ec:	4b0b      	ldr	r3, [pc, #44]	; (40891c <f_mount+0x58>)
  4088ee:	4798      	blx	r3
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  4088f0:	68fb      	ldr	r3, [r7, #12]
  4088f2:	2200      	movs	r2, #0
  4088f4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  4088f6:	683b      	ldr	r3, [r7, #0]
  4088f8:	2b00      	cmp	r3, #0
  4088fa:	d002      	beq.n	408902 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
  4088fc:	683b      	ldr	r3, [r7, #0]
  4088fe:	2200      	movs	r2, #0
  408900:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  408902:	79fa      	ldrb	r2, [r7, #7]
  408904:	4b04      	ldr	r3, [pc, #16]	; (408918 <f_mount+0x54>)
  408906:	6839      	ldr	r1, [r7, #0]
  408908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
  40890c:	2300      	movs	r3, #0
}
  40890e:	4618      	mov	r0, r3
  408910:	3710      	adds	r7, #16
  408912:	46bd      	mov	sp, r7
  408914:	bd80      	pop	{r7, pc}
  408916:	bf00      	nop
  408918:	2000340c 	.word	0x2000340c
  40891c:	0040681d 	.word	0x0040681d

00408920 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  408920:	b580      	push	{r7, lr}
  408922:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  408926:	af00      	add	r7, sp, #0
  408928:	f107 030c 	add.w	r3, r7, #12
  40892c:	6018      	str	r0, [r3, #0]
  40892e:	f107 0308 	add.w	r3, r7, #8
  408932:	6019      	str	r1, [r3, #0]
  408934:	1dfb      	adds	r3, r7, #7
  408936:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  408938:	f107 030c 	add.w	r3, r7, #12
  40893c:	681b      	ldr	r3, [r3, #0]
  40893e:	2200      	movs	r2, #0
  408940:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  408942:	1dfb      	adds	r3, r7, #7
  408944:	1dfa      	adds	r2, r7, #7
  408946:	7812      	ldrb	r2, [r2, #0]
  408948:	f002 021f 	and.w	r2, r2, #31
  40894c:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  40894e:	1dfb      	adds	r3, r7, #7
  408950:	781b      	ldrb	r3, [r3, #0]
  408952:	f023 0301 	bic.w	r3, r3, #1
  408956:	b2db      	uxtb	r3, r3
  408958:	f107 0108 	add.w	r1, r7, #8
  40895c:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  408960:	4608      	mov	r0, r1
  408962:	4611      	mov	r1, r2
  408964:	461a      	mov	r2, r3
  408966:	4b9b      	ldr	r3, [pc, #620]	; (408bd4 <f_open+0x2b4>)
  408968:	4798      	blx	r3
  40896a:	4603      	mov	r3, r0
  40896c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  408970:	f507 7304 	add.w	r3, r7, #528	; 0x210
  408974:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  408978:	f107 0310 	add.w	r3, r7, #16
  40897c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
  408980:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408984:	2b00      	cmp	r3, #0
  408986:	d10b      	bne.n	4089a0 <f_open+0x80>
		res = follow_path(&dj, path);	/* Follow the file path */
  408988:	f107 0308 	add.w	r3, r7, #8
  40898c:	681b      	ldr	r3, [r3, #0]
  40898e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  408992:	4610      	mov	r0, r2
  408994:	4619      	mov	r1, r3
  408996:	4b90      	ldr	r3, [pc, #576]	; (408bd8 <f_open+0x2b8>)
  408998:	4798      	blx	r3
  40899a:	4603      	mov	r3, r0
  40899c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
  4089a0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  4089a4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  4089a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4089ac:	2b00      	cmp	r3, #0
  4089ae:	d119      	bne.n	4089e4 <f_open+0xc4>
		if (!dir)	/* Current dir itself */
  4089b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4089b4:	2b00      	cmp	r3, #0
  4089b6:	d103      	bne.n	4089c0 <f_open+0xa0>
			res = FR_INVALID_NAME;
  4089b8:	2306      	movs	r3, #6
  4089ba:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  4089be:	e011      	b.n	4089e4 <f_open+0xc4>
#if _FS_SHARE
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  4089c0:	1dfb      	adds	r3, r7, #7
  4089c2:	781b      	ldrb	r3, [r3, #0]
  4089c4:	f023 0301 	bic.w	r3, r3, #1
  4089c8:	2b00      	cmp	r3, #0
  4089ca:	bf0c      	ite	eq
  4089cc:	2300      	moveq	r3, #0
  4089ce:	2301      	movne	r3, #1
  4089d0:	b2db      	uxtb	r3, r3
  4089d2:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  4089d6:	4610      	mov	r0, r2
  4089d8:	4619      	mov	r1, r3
  4089da:	4b80      	ldr	r3, [pc, #512]	; (408bdc <f_open+0x2bc>)
  4089dc:	4798      	blx	r3
  4089de:	4603      	mov	r3, r0
  4089e0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4089e4:	1dfb      	adds	r3, r7, #7
  4089e6:	781b      	ldrb	r3, [r3, #0]
  4089e8:	f003 031c 	and.w	r3, r3, #28
  4089ec:	2b00      	cmp	r3, #0
  4089ee:	f000 80e0 	beq.w	408bb2 <f_open+0x292>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  4089f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4089f6:	2b00      	cmp	r3, #0
  4089f8:	d01d      	beq.n	408a36 <f_open+0x116>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  4089fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4089fe:	2b04      	cmp	r3, #4
  408a00:	d10e      	bne.n	408a20 <f_open+0x100>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
  408a02:	4b77      	ldr	r3, [pc, #476]	; (408be0 <f_open+0x2c0>)
  408a04:	4798      	blx	r3
  408a06:	4603      	mov	r3, r0
  408a08:	2b00      	cmp	r3, #0
  408a0a:	d006      	beq.n	408a1a <f_open+0xfa>
  408a0c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  408a10:	4618      	mov	r0, r3
  408a12:	4b74      	ldr	r3, [pc, #464]	; (408be4 <f_open+0x2c4>)
  408a14:	4798      	blx	r3
  408a16:	4603      	mov	r3, r0
  408a18:	e000      	b.n	408a1c <f_open+0xfc>
  408a1a:	2312      	movs	r3, #18
  408a1c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  408a20:	1dfb      	adds	r3, r7, #7
  408a22:	1dfa      	adds	r2, r7, #7
  408a24:	7812      	ldrb	r2, [r2, #0]
  408a26:	f042 0208 	orr.w	r2, r2, #8
  408a2a:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
  408a2c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  408a30:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  408a34:	e014      	b.n	408a60 <f_open+0x140>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  408a36:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408a3a:	330b      	adds	r3, #11
  408a3c:	781b      	ldrb	r3, [r3, #0]
  408a3e:	f003 0311 	and.w	r3, r3, #17
  408a42:	2b00      	cmp	r3, #0
  408a44:	d003      	beq.n	408a4e <f_open+0x12e>
				res = FR_DENIED;
  408a46:	2307      	movs	r3, #7
  408a48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  408a4c:	e008      	b.n	408a60 <f_open+0x140>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  408a4e:	1dfb      	adds	r3, r7, #7
  408a50:	781b      	ldrb	r3, [r3, #0]
  408a52:	f003 0304 	and.w	r3, r3, #4
  408a56:	2b00      	cmp	r3, #0
  408a58:	d002      	beq.n	408a60 <f_open+0x140>
					res = FR_EXIST;
  408a5a:	2308      	movs	r3, #8
  408a5c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  408a60:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408a64:	2b00      	cmp	r3, #0
  408a66:	f040 80a3 	bne.w	408bb0 <f_open+0x290>
  408a6a:	1dfb      	adds	r3, r7, #7
  408a6c:	781b      	ldrb	r3, [r3, #0]
  408a6e:	f003 0308 	and.w	r3, r3, #8
  408a72:	2b00      	cmp	r3, #0
  408a74:	f000 809c 	beq.w	408bb0 <f_open+0x290>
			dw = get_fattime();					/* Created time */
  408a78:	4b5b      	ldr	r3, [pc, #364]	; (408be8 <f_open+0x2c8>)
  408a7a:	4798      	blx	r3
  408a7c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
  408a80:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408a84:	330e      	adds	r3, #14
  408a86:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408a8a:	b2d2      	uxtb	r2, r2
  408a8c:	701a      	strb	r2, [r3, #0]
  408a8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408a92:	330f      	adds	r3, #15
  408a94:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408a98:	b292      	uxth	r2, r2
  408a9a:	0a12      	lsrs	r2, r2, #8
  408a9c:	b292      	uxth	r2, r2
  408a9e:	b2d2      	uxtb	r2, r2
  408aa0:	701a      	strb	r2, [r3, #0]
  408aa2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408aa6:	3310      	adds	r3, #16
  408aa8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408aac:	0c12      	lsrs	r2, r2, #16
  408aae:	b2d2      	uxtb	r2, r2
  408ab0:	701a      	strb	r2, [r3, #0]
  408ab2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ab6:	3311      	adds	r3, #17
  408ab8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408abc:	0e12      	lsrs	r2, r2, #24
  408abe:	b2d2      	uxtb	r2, r2
  408ac0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  408ac2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ac6:	330b      	adds	r3, #11
  408ac8:	2200      	movs	r2, #0
  408aca:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  408acc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ad0:	331c      	adds	r3, #28
  408ad2:	2200      	movs	r2, #0
  408ad4:	701a      	strb	r2, [r3, #0]
  408ad6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ada:	331d      	adds	r3, #29
  408adc:	2200      	movs	r2, #0
  408ade:	701a      	strb	r2, [r3, #0]
  408ae0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ae4:	331e      	adds	r3, #30
  408ae6:	2200      	movs	r2, #0
  408ae8:	701a      	strb	r2, [r3, #0]
  408aea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408aee:	331f      	adds	r3, #31
  408af0:	2200      	movs	r2, #0
  408af2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
  408af4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408af8:	3315      	adds	r3, #21
  408afa:	781b      	ldrb	r3, [r3, #0]
  408afc:	021b      	lsls	r3, r3, #8
  408afe:	b29a      	uxth	r2, r3
  408b00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b04:	3314      	adds	r3, #20
  408b06:	781b      	ldrb	r3, [r3, #0]
  408b08:	4313      	orrs	r3, r2
  408b0a:	b29b      	uxth	r3, r3
  408b0c:	b29b      	uxth	r3, r3
  408b0e:	041a      	lsls	r2, r3, #16
  408b10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b14:	331b      	adds	r3, #27
  408b16:	781b      	ldrb	r3, [r3, #0]
  408b18:	021b      	lsls	r3, r3, #8
  408b1a:	b299      	uxth	r1, r3
  408b1c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b20:	331a      	adds	r3, #26
  408b22:	781b      	ldrb	r3, [r3, #0]
  408b24:	430b      	orrs	r3, r1
  408b26:	b29b      	uxth	r3, r3
  408b28:	b29b      	uxth	r3, r3
  408b2a:	4313      	orrs	r3, r2
  408b2c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
  408b30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b34:	331a      	adds	r3, #26
  408b36:	2200      	movs	r2, #0
  408b38:	701a      	strb	r2, [r3, #0]
  408b3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b3e:	331b      	adds	r3, #27
  408b40:	2200      	movs	r2, #0
  408b42:	701a      	strb	r2, [r3, #0]
  408b44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b48:	3314      	adds	r3, #20
  408b4a:	2200      	movs	r2, #0
  408b4c:	701a      	strb	r2, [r3, #0]
  408b4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408b52:	3315      	adds	r3, #21
  408b54:	2200      	movs	r2, #0
  408b56:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
  408b58:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408b5c:	2201      	movs	r2, #1
  408b5e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  408b60:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  408b64:	2b00      	cmp	r3, #0
  408b66:	d023      	beq.n	408bb0 <f_open+0x290>
				dw = dj.fs->winsect;
  408b68:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  408b6e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
  408b72:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408b76:	4618      	mov	r0, r3
  408b78:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
  408b7c:	4b1b      	ldr	r3, [pc, #108]	; (408bec <f_open+0x2cc>)
  408b7e:	4798      	blx	r3
  408b80:	4603      	mov	r3, r0
  408b82:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
  408b86:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408b8a:	2b00      	cmp	r3, #0
  408b8c:	d110      	bne.n	408bb0 <f_open+0x290>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  408b8e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408b92:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  408b96:	3a01      	subs	r2, #1
  408b98:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
  408b9a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408b9e:	4618      	mov	r0, r3
  408ba0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
  408ba4:	4b12      	ldr	r3, [pc, #72]	; (408bf0 <f_open+0x2d0>)
  408ba6:	4798      	blx	r3
  408ba8:	4603      	mov	r3, r0
  408baa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  408bae:	e032      	b.n	408c16 <f_open+0x2f6>
  408bb0:	e031      	b.n	408c16 <f_open+0x2f6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  408bb2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408bb6:	2b00      	cmp	r3, #0
  408bb8:	d12d      	bne.n	408c16 <f_open+0x2f6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  408bba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408bbe:	330b      	adds	r3, #11
  408bc0:	781b      	ldrb	r3, [r3, #0]
  408bc2:	f003 0310 	and.w	r3, r3, #16
  408bc6:	2b00      	cmp	r3, #0
  408bc8:	d014      	beq.n	408bf4 <f_open+0x2d4>
				res = FR_NO_FILE;
  408bca:	2304      	movs	r3, #4
  408bcc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  408bd0:	e021      	b.n	408c16 <f_open+0x2f6>
  408bd2:	bf00      	nop
  408bd4:	0040831d 	.word	0x0040831d
  408bd8:	0040815d 	.word	0x0040815d
  408bdc:	0040651d 	.word	0x0040651d
  408be0:	004065f1 	.word	0x004065f1
  408be4:	004078e9 	.word	0x004078e9
  408be8:	004063bd 	.word	0x004063bd
  408bec:	00406e19 	.word	0x00406e19
  408bf0:	0040686d 	.word	0x0040686d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  408bf4:	1dfb      	adds	r3, r7, #7
  408bf6:	781b      	ldrb	r3, [r3, #0]
  408bf8:	f003 0302 	and.w	r3, r3, #2
  408bfc:	2b00      	cmp	r3, #0
  408bfe:	d00a      	beq.n	408c16 <f_open+0x2f6>
  408c00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408c04:	330b      	adds	r3, #11
  408c06:	781b      	ldrb	r3, [r3, #0]
  408c08:	f003 0301 	and.w	r3, r3, #1
  408c0c:	2b00      	cmp	r3, #0
  408c0e:	d002      	beq.n	408c16 <f_open+0x2f6>
					res = FR_DENIED;
  408c10:	2307      	movs	r3, #7
  408c12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
  408c16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408c1a:	2b00      	cmp	r3, #0
  408c1c:	d135      	bne.n	408c8a <f_open+0x36a>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  408c1e:	1dfb      	adds	r3, r7, #7
  408c20:	781b      	ldrb	r3, [r3, #0]
  408c22:	f003 0308 	and.w	r3, r3, #8
  408c26:	2b00      	cmp	r3, #0
  408c28:	d005      	beq.n	408c36 <f_open+0x316>
			mode |= FA__WRITTEN;
  408c2a:	1dfb      	adds	r3, r7, #7
  408c2c:	1dfa      	adds	r2, r7, #7
  408c2e:	7812      	ldrb	r2, [r2, #0]
  408c30:	f042 0220 	orr.w	r2, r2, #32
  408c34:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  408c36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408c3c:	f107 030c 	add.w	r3, r7, #12
  408c40:	681b      	ldr	r3, [r3, #0]
  408c42:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
  408c44:	f107 030c 	add.w	r3, r7, #12
  408c48:	681b      	ldr	r3, [r3, #0]
  408c4a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  408c4e:	621a      	str	r2, [r3, #32]
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  408c50:	1dfb      	adds	r3, r7, #7
  408c52:	781b      	ldrb	r3, [r3, #0]
  408c54:	f023 0301 	bic.w	r3, r3, #1
  408c58:	2b00      	cmp	r3, #0
  408c5a:	bf0c      	ite	eq
  408c5c:	2300      	moveq	r3, #0
  408c5e:	2301      	movne	r3, #1
  408c60:	b2db      	uxtb	r3, r3
  408c62:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  408c66:	4610      	mov	r0, r2
  408c68:	4619      	mov	r1, r3
  408c6a:	4b39      	ldr	r3, [pc, #228]	; (408d50 <f_open+0x430>)
  408c6c:	4798      	blx	r3
  408c6e:	4602      	mov	r2, r0
  408c70:	f107 030c 	add.w	r3, r7, #12
  408c74:	681b      	ldr	r3, [r3, #0]
  408c76:	625a      	str	r2, [r3, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
  408c78:	f107 030c 	add.w	r3, r7, #12
  408c7c:	681b      	ldr	r3, [r3, #0]
  408c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408c80:	2b00      	cmp	r3, #0
  408c82:	d102      	bne.n	408c8a <f_open+0x36a>
  408c84:	2302      	movs	r3, #2
  408c86:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  408c8a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408c8e:	2b00      	cmp	r3, #0
  408c90:	d156      	bne.n	408d40 <f_open+0x420>
		fp->flag = mode;					/* File access mode */
  408c92:	f107 030c 	add.w	r3, r7, #12
  408c96:	681b      	ldr	r3, [r3, #0]
  408c98:	1dfa      	adds	r2, r7, #7
  408c9a:	7812      	ldrb	r2, [r2, #0]
  408c9c:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  408c9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ca2:	3315      	adds	r3, #21
  408ca4:	781b      	ldrb	r3, [r3, #0]
  408ca6:	021b      	lsls	r3, r3, #8
  408ca8:	b29a      	uxth	r2, r3
  408caa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408cae:	3314      	adds	r3, #20
  408cb0:	781b      	ldrb	r3, [r3, #0]
  408cb2:	4313      	orrs	r3, r2
  408cb4:	b29b      	uxth	r3, r3
  408cb6:	b29b      	uxth	r3, r3
  408cb8:	041a      	lsls	r2, r3, #16
  408cba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408cbe:	331b      	adds	r3, #27
  408cc0:	781b      	ldrb	r3, [r3, #0]
  408cc2:	021b      	lsls	r3, r3, #8
  408cc4:	b299      	uxth	r1, r3
  408cc6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408cca:	331a      	adds	r3, #26
  408ccc:	781b      	ldrb	r3, [r3, #0]
  408cce:	430b      	orrs	r3, r1
  408cd0:	b29b      	uxth	r3, r3
  408cd2:	b29b      	uxth	r3, r3
  408cd4:	431a      	orrs	r2, r3
  408cd6:	f107 030c 	add.w	r3, r7, #12
  408cda:	681b      	ldr	r3, [r3, #0]
  408cdc:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  408cde:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408ce2:	331f      	adds	r3, #31
  408ce4:	781b      	ldrb	r3, [r3, #0]
  408ce6:	061a      	lsls	r2, r3, #24
  408ce8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408cec:	331e      	adds	r3, #30
  408cee:	781b      	ldrb	r3, [r3, #0]
  408cf0:	041b      	lsls	r3, r3, #16
  408cf2:	431a      	orrs	r2, r3
  408cf4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408cf8:	331d      	adds	r3, #29
  408cfa:	781b      	ldrb	r3, [r3, #0]
  408cfc:	021b      	lsls	r3, r3, #8
  408cfe:	431a      	orrs	r2, r3
  408d00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408d04:	331c      	adds	r3, #28
  408d06:	781b      	ldrb	r3, [r3, #0]
  408d08:	431a      	orrs	r2, r3
  408d0a:	f107 030c 	add.w	r3, r7, #12
  408d0e:	681b      	ldr	r3, [r3, #0]
  408d10:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
  408d12:	f107 030c 	add.w	r3, r7, #12
  408d16:	681b      	ldr	r3, [r3, #0]
  408d18:	2200      	movs	r2, #0
  408d1a:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
  408d1c:	f107 030c 	add.w	r3, r7, #12
  408d20:	681b      	ldr	r3, [r3, #0]
  408d22:	2200      	movs	r2, #0
  408d24:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  408d26:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
  408d2a:	f107 030c 	add.w	r3, r7, #12
  408d2e:	681b      	ldr	r3, [r3, #0]
  408d30:	601a      	str	r2, [r3, #0]
  408d32:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408d36:	88da      	ldrh	r2, [r3, #6]
  408d38:	f107 030c 	add.w	r3, r7, #12
  408d3c:	681b      	ldr	r3, [r3, #0]
  408d3e:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
  408d40:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  408d44:	4618      	mov	r0, r3
  408d46:	f507 7714 	add.w	r7, r7, #592	; 0x250
  408d4a:	46bd      	mov	sp, r7
  408d4c:	bd80      	pop	{r7, pc}
  408d4e:	bf00      	nop
  408d50:	00406639 	.word	0x00406639

00408d54 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  408d54:	b590      	push	{r4, r7, lr}
  408d56:	b08d      	sub	sp, #52	; 0x34
  408d58:	af00      	add	r7, sp, #0
  408d5a:	60f8      	str	r0, [r7, #12]
  408d5c:	60b9      	str	r1, [r7, #8]
  408d5e:	607a      	str	r2, [r7, #4]
  408d60:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
  408d62:	68bb      	ldr	r3, [r7, #8]
  408d64:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
  408d66:	683b      	ldr	r3, [r7, #0]
  408d68:	2200      	movs	r2, #0
  408d6a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
  408d6c:	68fb      	ldr	r3, [r7, #12]
  408d6e:	681a      	ldr	r2, [r3, #0]
  408d70:	68fb      	ldr	r3, [r7, #12]
  408d72:	889b      	ldrh	r3, [r3, #4]
  408d74:	4610      	mov	r0, r2
  408d76:	4619      	mov	r1, r3
  408d78:	4b87      	ldr	r3, [pc, #540]	; (408f98 <f_read+0x244>)
  408d7a:	4798      	blx	r3
  408d7c:	4603      	mov	r3, r0
  408d7e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  408d80:	7ffb      	ldrb	r3, [r7, #31]
  408d82:	2b00      	cmp	r3, #0
  408d84:	d001      	beq.n	408d8a <f_read+0x36>
  408d86:	7ffb      	ldrb	r3, [r7, #31]
  408d88:	e147      	b.n	40901a <f_read+0x2c6>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  408d8a:	68fb      	ldr	r3, [r7, #12]
  408d8c:	799b      	ldrb	r3, [r3, #6]
  408d8e:	b2db      	uxtb	r3, r3
  408d90:	b25b      	sxtb	r3, r3
  408d92:	2b00      	cmp	r3, #0
  408d94:	da01      	bge.n	408d9a <f_read+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  408d96:	2302      	movs	r3, #2
  408d98:	e13f      	b.n	40901a <f_read+0x2c6>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  408d9a:	68fb      	ldr	r3, [r7, #12]
  408d9c:	799b      	ldrb	r3, [r3, #6]
  408d9e:	f003 0301 	and.w	r3, r3, #1
  408da2:	2b00      	cmp	r3, #0
  408da4:	d101      	bne.n	408daa <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  408da6:	2307      	movs	r3, #7
  408da8:	e137      	b.n	40901a <f_read+0x2c6>
	remain = fp->fsize - fp->fptr;
  408daa:	68fb      	ldr	r3, [r7, #12]
  408dac:	68da      	ldr	r2, [r3, #12]
  408dae:	68fb      	ldr	r3, [r7, #12]
  408db0:	689b      	ldr	r3, [r3, #8]
  408db2:	1ad3      	subs	r3, r2, r3
  408db4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
  408db6:	687a      	ldr	r2, [r7, #4]
  408db8:	69bb      	ldr	r3, [r7, #24]
  408dba:	429a      	cmp	r2, r3
  408dbc:	d902      	bls.n	408dc4 <f_read+0x70>
  408dbe:	69bb      	ldr	r3, [r7, #24]
  408dc0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
  408dc2:	e125      	b.n	409010 <f_read+0x2bc>
  408dc4:	e124      	b.n	409010 <f_read+0x2bc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  408dc6:	68fb      	ldr	r3, [r7, #12]
  408dc8:	689b      	ldr	r3, [r3, #8]
  408dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408dce:	2b00      	cmp	r3, #0
  408dd0:	f040 80f1 	bne.w	408fb6 <f_read+0x262>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  408dd4:	68fb      	ldr	r3, [r7, #12]
  408dd6:	689b      	ldr	r3, [r3, #8]
  408dd8:	0a5b      	lsrs	r3, r3, #9
  408dda:	b2da      	uxtb	r2, r3
  408ddc:	68fb      	ldr	r3, [r7, #12]
  408dde:	681b      	ldr	r3, [r3, #0]
  408de0:	789b      	ldrb	r3, [r3, #2]
  408de2:	3b01      	subs	r3, #1
  408de4:	b2db      	uxtb	r3, r3
  408de6:	4013      	ands	r3, r2
  408de8:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
  408dea:	7dfb      	ldrb	r3, [r7, #23]
  408dec:	2b00      	cmp	r3, #0
  408dee:	d12c      	bne.n	408e4a <f_read+0xf6>
				if (fp->fptr == 0) {			/* On the top of the file? */
  408df0:	68fb      	ldr	r3, [r7, #12]
  408df2:	689b      	ldr	r3, [r3, #8]
  408df4:	2b00      	cmp	r3, #0
  408df6:	d103      	bne.n	408e00 <f_read+0xac>
					clst = fp->sclust;			/* Follow from the origin */
  408df8:	68fb      	ldr	r3, [r7, #12]
  408dfa:	691b      	ldr	r3, [r3, #16]
  408dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  408dfe:	e008      	b.n	408e12 <f_read+0xbe>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  408e00:	68fb      	ldr	r3, [r7, #12]
  408e02:	681a      	ldr	r2, [r3, #0]
  408e04:	68fb      	ldr	r3, [r7, #12]
  408e06:	695b      	ldr	r3, [r3, #20]
  408e08:	4610      	mov	r0, r2
  408e0a:	4619      	mov	r1, r3
  408e0c:	4b63      	ldr	r3, [pc, #396]	; (408f9c <f_read+0x248>)
  408e0e:	4798      	blx	r3
  408e10:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  408e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e14:	2b01      	cmp	r3, #1
  408e16:	d808      	bhi.n	408e2a <f_read+0xd6>
  408e18:	68fb      	ldr	r3, [r7, #12]
  408e1a:	799b      	ldrb	r3, [r3, #6]
  408e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e20:	b2da      	uxtb	r2, r3
  408e22:	68fb      	ldr	r3, [r7, #12]
  408e24:	719a      	strb	r2, [r3, #6]
  408e26:	2302      	movs	r3, #2
  408e28:	e0f7      	b.n	40901a <f_read+0x2c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  408e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
  408e30:	d108      	bne.n	408e44 <f_read+0xf0>
  408e32:	68fb      	ldr	r3, [r7, #12]
  408e34:	799b      	ldrb	r3, [r3, #6]
  408e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e3a:	b2da      	uxtb	r2, r3
  408e3c:	68fb      	ldr	r3, [r7, #12]
  408e3e:	719a      	strb	r2, [r3, #6]
  408e40:	2301      	movs	r3, #1
  408e42:	e0ea      	b.n	40901a <f_read+0x2c6>
				fp->clust = clst;				/* Update current cluster */
  408e44:	68fb      	ldr	r3, [r7, #12]
  408e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  408e48:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  408e4a:	68fb      	ldr	r3, [r7, #12]
  408e4c:	681a      	ldr	r2, [r3, #0]
  408e4e:	68fb      	ldr	r3, [r7, #12]
  408e50:	695b      	ldr	r3, [r3, #20]
  408e52:	4610      	mov	r0, r2
  408e54:	4619      	mov	r1, r3
  408e56:	4b52      	ldr	r3, [pc, #328]	; (408fa0 <f_read+0x24c>)
  408e58:	4798      	blx	r3
  408e5a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  408e5c:	693b      	ldr	r3, [r7, #16]
  408e5e:	2b00      	cmp	r3, #0
  408e60:	d108      	bne.n	408e74 <f_read+0x120>
  408e62:	68fb      	ldr	r3, [r7, #12]
  408e64:	799b      	ldrb	r3, [r3, #6]
  408e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e6a:	b2da      	uxtb	r2, r3
  408e6c:	68fb      	ldr	r3, [r7, #12]
  408e6e:	719a      	strb	r2, [r3, #6]
  408e70:	2302      	movs	r3, #2
  408e72:	e0d2      	b.n	40901a <f_read+0x2c6>
			sect += csect;
  408e74:	7dfb      	ldrb	r3, [r7, #23]
  408e76:	693a      	ldr	r2, [r7, #16]
  408e78:	4413      	add	r3, r2
  408e7a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
  408e7c:	687b      	ldr	r3, [r7, #4]
  408e7e:	0a5b      	lsrs	r3, r3, #9
  408e80:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
  408e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408e84:	2b00      	cmp	r3, #0
  408e86:	d044      	beq.n	408f12 <f_read+0x1be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  408e88:	7dfa      	ldrb	r2, [r7, #23]
  408e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408e8c:	441a      	add	r2, r3
  408e8e:	68fb      	ldr	r3, [r7, #12]
  408e90:	681b      	ldr	r3, [r3, #0]
  408e92:	789b      	ldrb	r3, [r3, #2]
  408e94:	429a      	cmp	r2, r3
  408e96:	d906      	bls.n	408ea6 <f_read+0x152>
					cc = fp->fs->csize - csect;
  408e98:	68fb      	ldr	r3, [r7, #12]
  408e9a:	681b      	ldr	r3, [r3, #0]
  408e9c:	789b      	ldrb	r3, [r3, #2]
  408e9e:	461a      	mov	r2, r3
  408ea0:	7dfb      	ldrb	r3, [r7, #23]
  408ea2:	1ad3      	subs	r3, r2, r3
  408ea4:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  408ea6:	68fb      	ldr	r3, [r7, #12]
  408ea8:	681b      	ldr	r3, [r3, #0]
  408eaa:	785a      	ldrb	r2, [r3, #1]
  408eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408eae:	b2db      	uxtb	r3, r3
  408eb0:	4610      	mov	r0, r2
  408eb2:	6a39      	ldr	r1, [r7, #32]
  408eb4:	693a      	ldr	r2, [r7, #16]
  408eb6:	4c3b      	ldr	r4, [pc, #236]	; (408fa4 <f_read+0x250>)
  408eb8:	47a0      	blx	r4
  408eba:	4603      	mov	r3, r0
  408ebc:	2b00      	cmp	r3, #0
  408ebe:	d008      	beq.n	408ed2 <f_read+0x17e>
					ABORT(fp->fs, FR_DISK_ERR);
  408ec0:	68fb      	ldr	r3, [r7, #12]
  408ec2:	799b      	ldrb	r3, [r3, #6]
  408ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408ec8:	b2da      	uxtb	r2, r3
  408eca:	68fb      	ldr	r3, [r7, #12]
  408ecc:	719a      	strb	r2, [r3, #6]
  408ece:	2301      	movs	r3, #1
  408ed0:	e0a3      	b.n	40901a <f_read+0x2c6>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  408ed2:	68fb      	ldr	r3, [r7, #12]
  408ed4:	799b      	ldrb	r3, [r3, #6]
  408ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408eda:	2b00      	cmp	r3, #0
  408edc:	d015      	beq.n	408f0a <f_read+0x1b6>
  408ede:	68fb      	ldr	r3, [r7, #12]
  408ee0:	699a      	ldr	r2, [r3, #24]
  408ee2:	693b      	ldr	r3, [r7, #16]
  408ee4:	1ad2      	subs	r2, r2, r3
  408ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408ee8:	429a      	cmp	r2, r3
  408eea:	d20e      	bcs.n	408f0a <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  408eec:	68fb      	ldr	r3, [r7, #12]
  408eee:	699a      	ldr	r2, [r3, #24]
  408ef0:	693b      	ldr	r3, [r7, #16]
  408ef2:	1ad3      	subs	r3, r2, r3
  408ef4:	025b      	lsls	r3, r3, #9
  408ef6:	6a3a      	ldr	r2, [r7, #32]
  408ef8:	441a      	add	r2, r3
  408efa:	68fb      	ldr	r3, [r7, #12]
  408efc:	3328      	adds	r3, #40	; 0x28
  408efe:	4610      	mov	r0, r2
  408f00:	4619      	mov	r1, r3
  408f02:	f44f 7200 	mov.w	r2, #512	; 0x200
  408f06:	4b28      	ldr	r3, [pc, #160]	; (408fa8 <f_read+0x254>)
  408f08:	4798      	blx	r3
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  408f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408f0c:	025b      	lsls	r3, r3, #9
  408f0e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
  408f10:	e06a      	b.n	408fe8 <f_read+0x294>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
  408f12:	68fb      	ldr	r3, [r7, #12]
  408f14:	699a      	ldr	r2, [r3, #24]
  408f16:	693b      	ldr	r3, [r7, #16]
  408f18:	429a      	cmp	r2, r3
  408f1a:	d049      	beq.n	408fb0 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  408f1c:	68fb      	ldr	r3, [r7, #12]
  408f1e:	799b      	ldrb	r3, [r3, #6]
  408f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408f24:	2b00      	cmp	r3, #0
  408f26:	d020      	beq.n	408f6a <f_read+0x216>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  408f28:	68fb      	ldr	r3, [r7, #12]
  408f2a:	681b      	ldr	r3, [r3, #0]
  408f2c:	7859      	ldrb	r1, [r3, #1]
  408f2e:	68fb      	ldr	r3, [r7, #12]
  408f30:	f103 0228 	add.w	r2, r3, #40	; 0x28
  408f34:	68fb      	ldr	r3, [r7, #12]
  408f36:	699b      	ldr	r3, [r3, #24]
  408f38:	4608      	mov	r0, r1
  408f3a:	4611      	mov	r1, r2
  408f3c:	461a      	mov	r2, r3
  408f3e:	2301      	movs	r3, #1
  408f40:	4c1a      	ldr	r4, [pc, #104]	; (408fac <f_read+0x258>)
  408f42:	47a0      	blx	r4
  408f44:	4603      	mov	r3, r0
  408f46:	2b00      	cmp	r3, #0
  408f48:	d008      	beq.n	408f5c <f_read+0x208>
						ABORT(fp->fs, FR_DISK_ERR);
  408f4a:	68fb      	ldr	r3, [r7, #12]
  408f4c:	799b      	ldrb	r3, [r3, #6]
  408f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408f52:	b2da      	uxtb	r2, r3
  408f54:	68fb      	ldr	r3, [r7, #12]
  408f56:	719a      	strb	r2, [r3, #6]
  408f58:	2301      	movs	r3, #1
  408f5a:	e05e      	b.n	40901a <f_read+0x2c6>
					fp->flag &= ~FA__DIRTY;
  408f5c:	68fb      	ldr	r3, [r7, #12]
  408f5e:	799b      	ldrb	r3, [r3, #6]
  408f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  408f64:	b2da      	uxtb	r2, r3
  408f66:	68fb      	ldr	r3, [r7, #12]
  408f68:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  408f6a:	68fb      	ldr	r3, [r7, #12]
  408f6c:	681b      	ldr	r3, [r3, #0]
  408f6e:	785a      	ldrb	r2, [r3, #1]
  408f70:	68fb      	ldr	r3, [r7, #12]
  408f72:	3328      	adds	r3, #40	; 0x28
  408f74:	4610      	mov	r0, r2
  408f76:	4619      	mov	r1, r3
  408f78:	693a      	ldr	r2, [r7, #16]
  408f7a:	2301      	movs	r3, #1
  408f7c:	4c09      	ldr	r4, [pc, #36]	; (408fa4 <f_read+0x250>)
  408f7e:	47a0      	blx	r4
  408f80:	4603      	mov	r3, r0
  408f82:	2b00      	cmp	r3, #0
  408f84:	d014      	beq.n	408fb0 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
  408f86:	68fb      	ldr	r3, [r7, #12]
  408f88:	799b      	ldrb	r3, [r3, #6]
  408f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408f8e:	b2da      	uxtb	r2, r3
  408f90:	68fb      	ldr	r3, [r7, #12]
  408f92:	719a      	strb	r2, [r3, #6]
  408f94:	2301      	movs	r3, #1
  408f96:	e040      	b.n	40901a <f_read+0x2c6>
  408f98:	00408875 	.word	0x00408875
  408f9c:	00406ac9 	.word	0x00406ac9
  408fa0:	00406a8d 	.word	0x00406a8d
  408fa4:	0040619d 	.word	0x0040619d
  408fa8:	00406425 	.word	0x00406425
  408fac:	0040624d 	.word	0x0040624d
			}
#endif
			fp->dsect = sect;
  408fb0:	68fb      	ldr	r3, [r7, #12]
  408fb2:	693a      	ldr	r2, [r7, #16]
  408fb4:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  408fb6:	68fb      	ldr	r3, [r7, #12]
  408fb8:	689b      	ldr	r3, [r3, #8]
  408fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408fbe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  408fc2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
  408fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408fc6:	687b      	ldr	r3, [r7, #4]
  408fc8:	429a      	cmp	r2, r3
  408fca:	d901      	bls.n	408fd0 <f_read+0x27c>
  408fcc:	687b      	ldr	r3, [r7, #4]
  408fce:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  408fd0:	68fb      	ldr	r3, [r7, #12]
  408fd2:	689b      	ldr	r3, [r3, #8]
  408fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408fd8:	3328      	adds	r3, #40	; 0x28
  408fda:	68fa      	ldr	r2, [r7, #12]
  408fdc:	4413      	add	r3, r2
  408fde:	6a38      	ldr	r0, [r7, #32]
  408fe0:	4619      	mov	r1, r3
  408fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408fe4:	4b0f      	ldr	r3, [pc, #60]	; (409024 <f_read+0x2d0>)
  408fe6:	4798      	blx	r3
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  408fe8:	6a3a      	ldr	r2, [r7, #32]
  408fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408fec:	4413      	add	r3, r2
  408fee:	623b      	str	r3, [r7, #32]
  408ff0:	68fb      	ldr	r3, [r7, #12]
  408ff2:	689a      	ldr	r2, [r3, #8]
  408ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408ff6:	441a      	add	r2, r3
  408ff8:	68fb      	ldr	r3, [r7, #12]
  408ffa:	609a      	str	r2, [r3, #8]
  408ffc:	683b      	ldr	r3, [r7, #0]
  408ffe:	681a      	ldr	r2, [r3, #0]
  409000:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409002:	441a      	add	r2, r3
  409004:	683b      	ldr	r3, [r7, #0]
  409006:	601a      	str	r2, [r3, #0]
  409008:	687a      	ldr	r2, [r7, #4]
  40900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40900c:	1ad3      	subs	r3, r2, r3
  40900e:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  409010:	687b      	ldr	r3, [r7, #4]
  409012:	2b00      	cmp	r3, #0
  409014:	f47f aed7 	bne.w	408dc6 <f_read+0x72>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
  409018:	2300      	movs	r3, #0
}
  40901a:	4618      	mov	r0, r3
  40901c:	3734      	adds	r7, #52	; 0x34
  40901e:	46bd      	mov	sp, r7
  409020:	bd90      	pop	{r4, r7, pc}
  409022:	bf00      	nop
  409024:	00406425 	.word	0x00406425

00409028 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  409028:	b590      	push	{r4, r7, lr}
  40902a:	b08b      	sub	sp, #44	; 0x2c
  40902c:	af00      	add	r7, sp, #0
  40902e:	60f8      	str	r0, [r7, #12]
  409030:	60b9      	str	r1, [r7, #8]
  409032:	607a      	str	r2, [r7, #4]
  409034:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
  409036:	68bb      	ldr	r3, [r7, #8]
  409038:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40903a:	683b      	ldr	r3, [r7, #0]
  40903c:	2200      	movs	r2, #0
  40903e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  409040:	68fb      	ldr	r3, [r7, #12]
  409042:	681a      	ldr	r2, [r3, #0]
  409044:	68fb      	ldr	r3, [r7, #12]
  409046:	889b      	ldrh	r3, [r3, #4]
  409048:	4610      	mov	r0, r2
  40904a:	4619      	mov	r1, r3
  40904c:	4b93      	ldr	r3, [pc, #588]	; (40929c <f_write+0x274>)
  40904e:	4798      	blx	r3
  409050:	4603      	mov	r3, r0
  409052:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  409054:	7dfb      	ldrb	r3, [r7, #23]
  409056:	2b00      	cmp	r3, #0
  409058:	d001      	beq.n	40905e <f_write+0x36>
  40905a:	7dfb      	ldrb	r3, [r7, #23]
  40905c:	e177      	b.n	40934e <f_write+0x326>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40905e:	68fb      	ldr	r3, [r7, #12]
  409060:	799b      	ldrb	r3, [r3, #6]
  409062:	b2db      	uxtb	r3, r3
  409064:	b25b      	sxtb	r3, r3
  409066:	2b00      	cmp	r3, #0
  409068:	da01      	bge.n	40906e <f_write+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40906a:	2302      	movs	r3, #2
  40906c:	e16f      	b.n	40934e <f_write+0x326>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40906e:	68fb      	ldr	r3, [r7, #12]
  409070:	799b      	ldrb	r3, [r3, #6]
  409072:	f003 0302 	and.w	r3, r3, #2
  409076:	2b00      	cmp	r3, #0
  409078:	d101      	bne.n	40907e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  40907a:	2307      	movs	r3, #7
  40907c:	e167      	b.n	40934e <f_write+0x326>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40907e:	68fb      	ldr	r3, [r7, #12]
  409080:	68da      	ldr	r2, [r3, #12]
  409082:	687b      	ldr	r3, [r7, #4]
  409084:	441a      	add	r2, r3
  409086:	68fb      	ldr	r3, [r7, #12]
  409088:	68db      	ldr	r3, [r3, #12]
  40908a:	429a      	cmp	r2, r3
  40908c:	d202      	bcs.n	409094 <f_write+0x6c>
  40908e:	2300      	movs	r3, #0
  409090:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
  409092:	e146      	b.n	409322 <f_write+0x2fa>
  409094:	e145      	b.n	409322 <f_write+0x2fa>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  409096:	68fb      	ldr	r3, [r7, #12]
  409098:	689b      	ldr	r3, [r3, #8]
  40909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40909e:	2b00      	cmp	r3, #0
  4090a0:	f040 810b 	bne.w	4092ba <f_write+0x292>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4090a4:	68fb      	ldr	r3, [r7, #12]
  4090a6:	689b      	ldr	r3, [r3, #8]
  4090a8:	0a5b      	lsrs	r3, r3, #9
  4090aa:	b2da      	uxtb	r2, r3
  4090ac:	68fb      	ldr	r3, [r7, #12]
  4090ae:	681b      	ldr	r3, [r3, #0]
  4090b0:	789b      	ldrb	r3, [r3, #2]
  4090b2:	3b01      	subs	r3, #1
  4090b4:	b2db      	uxtb	r3, r3
  4090b6:	4013      	ands	r3, r2
  4090b8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
  4090ba:	7dbb      	ldrb	r3, [r7, #22]
  4090bc:	2b00      	cmp	r3, #0
  4090be:	d13d      	bne.n	40913c <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
  4090c0:	68fb      	ldr	r3, [r7, #12]
  4090c2:	689b      	ldr	r3, [r3, #8]
  4090c4:	2b00      	cmp	r3, #0
  4090c6:	d110      	bne.n	4090ea <f_write+0xc2>
					clst = fp->sclust;		/* Follow from the origin */
  4090c8:	68fb      	ldr	r3, [r7, #12]
  4090ca:	691b      	ldr	r3, [r3, #16]
  4090cc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
  4090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4090d0:	2b00      	cmp	r3, #0
  4090d2:	d113      	bne.n	4090fc <f_write+0xd4>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  4090d4:	68fb      	ldr	r3, [r7, #12]
  4090d6:	681b      	ldr	r3, [r3, #0]
  4090d8:	4618      	mov	r0, r3
  4090da:	2100      	movs	r1, #0
  4090dc:	4b70      	ldr	r3, [pc, #448]	; (4092a0 <f_write+0x278>)
  4090de:	4798      	blx	r3
  4090e0:	6278      	str	r0, [r7, #36]	; 0x24
  4090e2:	68fb      	ldr	r3, [r7, #12]
  4090e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4090e6:	611a      	str	r2, [r3, #16]
  4090e8:	e008      	b.n	4090fc <f_write+0xd4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4090ea:	68fb      	ldr	r3, [r7, #12]
  4090ec:	681a      	ldr	r2, [r3, #0]
  4090ee:	68fb      	ldr	r3, [r7, #12]
  4090f0:	695b      	ldr	r3, [r3, #20]
  4090f2:	4610      	mov	r0, r2
  4090f4:	4619      	mov	r1, r3
  4090f6:	4b6a      	ldr	r3, [pc, #424]	; (4092a0 <f_write+0x278>)
  4090f8:	4798      	blx	r3
  4090fa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4090fe:	2b00      	cmp	r3, #0
  409100:	d100      	bne.n	409104 <f_write+0xdc>
  409102:	e112      	b.n	40932a <f_write+0x302>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  409104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409106:	2b01      	cmp	r3, #1
  409108:	d108      	bne.n	40911c <f_write+0xf4>
  40910a:	68fb      	ldr	r3, [r7, #12]
  40910c:	799b      	ldrb	r3, [r3, #6]
  40910e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409112:	b2da      	uxtb	r2, r3
  409114:	68fb      	ldr	r3, [r7, #12]
  409116:	719a      	strb	r2, [r3, #6]
  409118:	2302      	movs	r3, #2
  40911a:	e118      	b.n	40934e <f_write+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40911e:	f1b3 3fff 	cmp.w	r3, #4294967295
  409122:	d108      	bne.n	409136 <f_write+0x10e>
  409124:	68fb      	ldr	r3, [r7, #12]
  409126:	799b      	ldrb	r3, [r3, #6]
  409128:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40912c:	b2da      	uxtb	r2, r3
  40912e:	68fb      	ldr	r3, [r7, #12]
  409130:	719a      	strb	r2, [r3, #6]
  409132:	2301      	movs	r3, #1
  409134:	e10b      	b.n	40934e <f_write+0x326>
				fp->clust = clst;			/* Update current cluster */
  409136:	68fb      	ldr	r3, [r7, #12]
  409138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40913a:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  40913c:	68fb      	ldr	r3, [r7, #12]
  40913e:	799b      	ldrb	r3, [r3, #6]
  409140:	f003 0340 	and.w	r3, r3, #64	; 0x40
  409144:	2b00      	cmp	r3, #0
  409146:	d020      	beq.n	40918a <f_write+0x162>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  409148:	68fb      	ldr	r3, [r7, #12]
  40914a:	681b      	ldr	r3, [r3, #0]
  40914c:	7859      	ldrb	r1, [r3, #1]
  40914e:	68fb      	ldr	r3, [r7, #12]
  409150:	f103 0228 	add.w	r2, r3, #40	; 0x28
  409154:	68fb      	ldr	r3, [r7, #12]
  409156:	699b      	ldr	r3, [r3, #24]
  409158:	4608      	mov	r0, r1
  40915a:	4611      	mov	r1, r2
  40915c:	461a      	mov	r2, r3
  40915e:	2301      	movs	r3, #1
  409160:	4c50      	ldr	r4, [pc, #320]	; (4092a4 <f_write+0x27c>)
  409162:	47a0      	blx	r4
  409164:	4603      	mov	r3, r0
  409166:	2b00      	cmp	r3, #0
  409168:	d008      	beq.n	40917c <f_write+0x154>
					ABORT(fp->fs, FR_DISK_ERR);
  40916a:	68fb      	ldr	r3, [r7, #12]
  40916c:	799b      	ldrb	r3, [r3, #6]
  40916e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409172:	b2da      	uxtb	r2, r3
  409174:	68fb      	ldr	r3, [r7, #12]
  409176:	719a      	strb	r2, [r3, #6]
  409178:	2301      	movs	r3, #1
  40917a:	e0e8      	b.n	40934e <f_write+0x326>
				fp->flag &= ~FA__DIRTY;
  40917c:	68fb      	ldr	r3, [r7, #12]
  40917e:	799b      	ldrb	r3, [r3, #6]
  409180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  409184:	b2da      	uxtb	r2, r3
  409186:	68fb      	ldr	r3, [r7, #12]
  409188:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40918a:	68fb      	ldr	r3, [r7, #12]
  40918c:	681a      	ldr	r2, [r3, #0]
  40918e:	68fb      	ldr	r3, [r7, #12]
  409190:	695b      	ldr	r3, [r3, #20]
  409192:	4610      	mov	r0, r2
  409194:	4619      	mov	r1, r3
  409196:	4b44      	ldr	r3, [pc, #272]	; (4092a8 <f_write+0x280>)
  409198:	4798      	blx	r3
  40919a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40919c:	693b      	ldr	r3, [r7, #16]
  40919e:	2b00      	cmp	r3, #0
  4091a0:	d108      	bne.n	4091b4 <f_write+0x18c>
  4091a2:	68fb      	ldr	r3, [r7, #12]
  4091a4:	799b      	ldrb	r3, [r3, #6]
  4091a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4091aa:	b2da      	uxtb	r2, r3
  4091ac:	68fb      	ldr	r3, [r7, #12]
  4091ae:	719a      	strb	r2, [r3, #6]
  4091b0:	2302      	movs	r3, #2
  4091b2:	e0cc      	b.n	40934e <f_write+0x326>
			sect += csect;
  4091b4:	7dbb      	ldrb	r3, [r7, #22]
  4091b6:	693a      	ldr	r2, [r7, #16]
  4091b8:	4413      	add	r3, r2
  4091ba:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
  4091bc:	687b      	ldr	r3, [r7, #4]
  4091be:	0a5b      	lsrs	r3, r3, #9
  4091c0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
  4091c2:	69fb      	ldr	r3, [r7, #28]
  4091c4:	2b00      	cmp	r3, #0
  4091c6:	d046      	beq.n	409256 <f_write+0x22e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4091c8:	7dba      	ldrb	r2, [r7, #22]
  4091ca:	69fb      	ldr	r3, [r7, #28]
  4091cc:	441a      	add	r2, r3
  4091ce:	68fb      	ldr	r3, [r7, #12]
  4091d0:	681b      	ldr	r3, [r3, #0]
  4091d2:	789b      	ldrb	r3, [r3, #2]
  4091d4:	429a      	cmp	r2, r3
  4091d6:	d906      	bls.n	4091e6 <f_write+0x1be>
					cc = fp->fs->csize - csect;
  4091d8:	68fb      	ldr	r3, [r7, #12]
  4091da:	681b      	ldr	r3, [r3, #0]
  4091dc:	789b      	ldrb	r3, [r3, #2]
  4091de:	461a      	mov	r2, r3
  4091e0:	7dbb      	ldrb	r3, [r7, #22]
  4091e2:	1ad3      	subs	r3, r2, r3
  4091e4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4091e6:	68fb      	ldr	r3, [r7, #12]
  4091e8:	681b      	ldr	r3, [r3, #0]
  4091ea:	785a      	ldrb	r2, [r3, #1]
  4091ec:	69fb      	ldr	r3, [r7, #28]
  4091ee:	b2db      	uxtb	r3, r3
  4091f0:	4610      	mov	r0, r2
  4091f2:	69b9      	ldr	r1, [r7, #24]
  4091f4:	693a      	ldr	r2, [r7, #16]
  4091f6:	4c2b      	ldr	r4, [pc, #172]	; (4092a4 <f_write+0x27c>)
  4091f8:	47a0      	blx	r4
  4091fa:	4603      	mov	r3, r0
  4091fc:	2b00      	cmp	r3, #0
  4091fe:	d008      	beq.n	409212 <f_write+0x1ea>
					ABORT(fp->fs, FR_DISK_ERR);
  409200:	68fb      	ldr	r3, [r7, #12]
  409202:	799b      	ldrb	r3, [r3, #6]
  409204:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409208:	b2da      	uxtb	r2, r3
  40920a:	68fb      	ldr	r3, [r7, #12]
  40920c:	719a      	strb	r2, [r3, #6]
  40920e:	2301      	movs	r3, #1
  409210:	e09d      	b.n	40934e <f_write+0x326>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  409212:	68fb      	ldr	r3, [r7, #12]
  409214:	699a      	ldr	r2, [r3, #24]
  409216:	693b      	ldr	r3, [r7, #16]
  409218:	1ad2      	subs	r2, r2, r3
  40921a:	69fb      	ldr	r3, [r7, #28]
  40921c:	429a      	cmp	r2, r3
  40921e:	d216      	bcs.n	40924e <f_write+0x226>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  409220:	68fb      	ldr	r3, [r7, #12]
  409222:	f103 0228 	add.w	r2, r3, #40	; 0x28
  409226:	68fb      	ldr	r3, [r7, #12]
  409228:	6999      	ldr	r1, [r3, #24]
  40922a:	693b      	ldr	r3, [r7, #16]
  40922c:	1acb      	subs	r3, r1, r3
  40922e:	025b      	lsls	r3, r3, #9
  409230:	69b9      	ldr	r1, [r7, #24]
  409232:	440b      	add	r3, r1
  409234:	4610      	mov	r0, r2
  409236:	4619      	mov	r1, r3
  409238:	f44f 7200 	mov.w	r2, #512	; 0x200
  40923c:	4b1b      	ldr	r3, [pc, #108]	; (4092ac <f_write+0x284>)
  40923e:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  409240:	68fb      	ldr	r3, [r7, #12]
  409242:	799b      	ldrb	r3, [r3, #6]
  409244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  409248:	b2da      	uxtb	r2, r3
  40924a:	68fb      	ldr	r3, [r7, #12]
  40924c:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40924e:	69fb      	ldr	r3, [r7, #28]
  409250:	025b      	lsls	r3, r3, #9
  409252:	623b      	str	r3, [r7, #32]
				continue;
  409254:	e051      	b.n	4092fa <f_write+0x2d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  409256:	68fb      	ldr	r3, [r7, #12]
  409258:	699a      	ldr	r2, [r3, #24]
  40925a:	693b      	ldr	r3, [r7, #16]
  40925c:	429a      	cmp	r2, r3
  40925e:	d029      	beq.n	4092b4 <f_write+0x28c>
				if (fp->fptr < fp->fsize &&
  409260:	68fb      	ldr	r3, [r7, #12]
  409262:	689a      	ldr	r2, [r3, #8]
  409264:	68fb      	ldr	r3, [r7, #12]
  409266:	68db      	ldr	r3, [r3, #12]
  409268:	429a      	cmp	r2, r3
  40926a:	d223      	bcs.n	4092b4 <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40926c:	68fb      	ldr	r3, [r7, #12]
  40926e:	681b      	ldr	r3, [r3, #0]
  409270:	785a      	ldrb	r2, [r3, #1]
  409272:	68fb      	ldr	r3, [r7, #12]
  409274:	3328      	adds	r3, #40	; 0x28
  409276:	4610      	mov	r0, r2
  409278:	4619      	mov	r1, r3
  40927a:	693a      	ldr	r2, [r7, #16]
  40927c:	2301      	movs	r3, #1
  40927e:	4c0c      	ldr	r4, [pc, #48]	; (4092b0 <f_write+0x288>)
  409280:	47a0      	blx	r4
  409282:	4603      	mov	r3, r0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
  409284:	2b00      	cmp	r3, #0
  409286:	d015      	beq.n	4092b4 <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
  409288:	68fb      	ldr	r3, [r7, #12]
  40928a:	799b      	ldrb	r3, [r3, #6]
  40928c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409290:	b2da      	uxtb	r2, r3
  409292:	68fb      	ldr	r3, [r7, #12]
  409294:	719a      	strb	r2, [r3, #6]
  409296:	2301      	movs	r3, #1
  409298:	e059      	b.n	40934e <f_write+0x326>
  40929a:	bf00      	nop
  40929c:	00408875 	.word	0x00408875
  4092a0:	00406ebd 	.word	0x00406ebd
  4092a4:	0040624d 	.word	0x0040624d
  4092a8:	00406a8d 	.word	0x00406a8d
  4092ac:	00406425 	.word	0x00406425
  4092b0:	0040619d 	.word	0x0040619d
			}
#endif
			fp->dsect = sect;
  4092b4:	68fb      	ldr	r3, [r7, #12]
  4092b6:	693a      	ldr	r2, [r7, #16]
  4092b8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  4092ba:	68fb      	ldr	r3, [r7, #12]
  4092bc:	689b      	ldr	r3, [r3, #8]
  4092be:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4092c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  4092c6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
  4092c8:	6a3a      	ldr	r2, [r7, #32]
  4092ca:	687b      	ldr	r3, [r7, #4]
  4092cc:	429a      	cmp	r2, r3
  4092ce:	d901      	bls.n	4092d4 <f_write+0x2ac>
  4092d0:	687b      	ldr	r3, [r7, #4]
  4092d2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4092d4:	68fb      	ldr	r3, [r7, #12]
  4092d6:	689b      	ldr	r3, [r3, #8]
  4092d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4092dc:	3328      	adds	r3, #40	; 0x28
  4092de:	68fa      	ldr	r2, [r7, #12]
  4092e0:	4413      	add	r3, r2
  4092e2:	4618      	mov	r0, r3
  4092e4:	69b9      	ldr	r1, [r7, #24]
  4092e6:	6a3a      	ldr	r2, [r7, #32]
  4092e8:	4b1b      	ldr	r3, [pc, #108]	; (409358 <f_write+0x330>)
  4092ea:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  4092ec:	68fb      	ldr	r3, [r7, #12]
  4092ee:	799b      	ldrb	r3, [r3, #6]
  4092f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4092f4:	b2da      	uxtb	r2, r3
  4092f6:	68fb      	ldr	r3, [r7, #12]
  4092f8:	719a      	strb	r2, [r3, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4092fa:	69ba      	ldr	r2, [r7, #24]
  4092fc:	6a3b      	ldr	r3, [r7, #32]
  4092fe:	4413      	add	r3, r2
  409300:	61bb      	str	r3, [r7, #24]
  409302:	68fb      	ldr	r3, [r7, #12]
  409304:	689a      	ldr	r2, [r3, #8]
  409306:	6a3b      	ldr	r3, [r7, #32]
  409308:	441a      	add	r2, r3
  40930a:	68fb      	ldr	r3, [r7, #12]
  40930c:	609a      	str	r2, [r3, #8]
  40930e:	683b      	ldr	r3, [r7, #0]
  409310:	681a      	ldr	r2, [r3, #0]
  409312:	6a3b      	ldr	r3, [r7, #32]
  409314:	441a      	add	r2, r3
  409316:	683b      	ldr	r3, [r7, #0]
  409318:	601a      	str	r2, [r3, #0]
  40931a:	687a      	ldr	r2, [r7, #4]
  40931c:	6a3b      	ldr	r3, [r7, #32]
  40931e:	1ad3      	subs	r3, r2, r3
  409320:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  409322:	687b      	ldr	r3, [r7, #4]
  409324:	2b00      	cmp	r3, #0
  409326:	f47f aeb6 	bne.w	409096 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  40932a:	68fb      	ldr	r3, [r7, #12]
  40932c:	689a      	ldr	r2, [r3, #8]
  40932e:	68fb      	ldr	r3, [r7, #12]
  409330:	68db      	ldr	r3, [r3, #12]
  409332:	429a      	cmp	r2, r3
  409334:	d903      	bls.n	40933e <f_write+0x316>
  409336:	68fb      	ldr	r3, [r7, #12]
  409338:	689a      	ldr	r2, [r3, #8]
  40933a:	68fb      	ldr	r3, [r7, #12]
  40933c:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  40933e:	68fb      	ldr	r3, [r7, #12]
  409340:	799b      	ldrb	r3, [r3, #6]
  409342:	f043 0320 	orr.w	r3, r3, #32
  409346:	b2da      	uxtb	r2, r3
  409348:	68fb      	ldr	r3, [r7, #12]
  40934a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
  40934c:	2300      	movs	r3, #0
}
  40934e:	4618      	mov	r0, r3
  409350:	372c      	adds	r7, #44	; 0x2c
  409352:	46bd      	mov	sp, r7
  409354:	bd90      	pop	{r4, r7, pc}
  409356:	bf00      	nop
  409358:	00406425 	.word	0x00406425

0040935c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  40935c:	b590      	push	{r4, r7, lr}
  40935e:	b087      	sub	sp, #28
  409360:	af00      	add	r7, sp, #0
  409362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  409364:	687b      	ldr	r3, [r7, #4]
  409366:	681a      	ldr	r2, [r3, #0]
  409368:	687b      	ldr	r3, [r7, #4]
  40936a:	889b      	ldrh	r3, [r3, #4]
  40936c:	4610      	mov	r0, r2
  40936e:	4619      	mov	r1, r3
  409370:	4b5b      	ldr	r3, [pc, #364]	; (4094e0 <f_sync+0x184>)
  409372:	4798      	blx	r3
  409374:	4603      	mov	r3, r0
  409376:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
  409378:	7dfb      	ldrb	r3, [r7, #23]
  40937a:	2b00      	cmp	r3, #0
  40937c:	f040 80ab 	bne.w	4094d6 <f_sync+0x17a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  409380:	687b      	ldr	r3, [r7, #4]
  409382:	799b      	ldrb	r3, [r3, #6]
  409384:	f003 0320 	and.w	r3, r3, #32
  409388:	2b00      	cmp	r3, #0
  40938a:	f000 80a4 	beq.w	4094d6 <f_sync+0x17a>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  40938e:	687b      	ldr	r3, [r7, #4]
  409390:	799b      	ldrb	r3, [r3, #6]
  409392:	f003 0340 	and.w	r3, r3, #64	; 0x40
  409396:	2b00      	cmp	r3, #0
  409398:	d019      	beq.n	4093ce <f_sync+0x72>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40939a:	687b      	ldr	r3, [r7, #4]
  40939c:	681b      	ldr	r3, [r3, #0]
  40939e:	7859      	ldrb	r1, [r3, #1]
  4093a0:	687b      	ldr	r3, [r7, #4]
  4093a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4093a6:	687b      	ldr	r3, [r7, #4]
  4093a8:	699b      	ldr	r3, [r3, #24]
  4093aa:	4608      	mov	r0, r1
  4093ac:	4611      	mov	r1, r2
  4093ae:	461a      	mov	r2, r3
  4093b0:	2301      	movs	r3, #1
  4093b2:	4c4c      	ldr	r4, [pc, #304]	; (4094e4 <f_sync+0x188>)
  4093b4:	47a0      	blx	r4
  4093b6:	4603      	mov	r3, r0
  4093b8:	2b00      	cmp	r3, #0
  4093ba:	d001      	beq.n	4093c0 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  4093bc:	2301      	movs	r3, #1
  4093be:	e08b      	b.n	4094d8 <f_sync+0x17c>
				fp->flag &= ~FA__DIRTY;
  4093c0:	687b      	ldr	r3, [r7, #4]
  4093c2:	799b      	ldrb	r3, [r3, #6]
  4093c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4093c8:	b2da      	uxtb	r2, r3
  4093ca:	687b      	ldr	r3, [r7, #4]
  4093cc:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  4093ce:	687b      	ldr	r3, [r7, #4]
  4093d0:	681a      	ldr	r2, [r3, #0]
  4093d2:	687b      	ldr	r3, [r7, #4]
  4093d4:	69db      	ldr	r3, [r3, #28]
  4093d6:	4610      	mov	r0, r2
  4093d8:	4619      	mov	r1, r3
  4093da:	4b43      	ldr	r3, [pc, #268]	; (4094e8 <f_sync+0x18c>)
  4093dc:	4798      	blx	r3
  4093de:	4603      	mov	r3, r0
  4093e0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
  4093e2:	7dfb      	ldrb	r3, [r7, #23]
  4093e4:	2b00      	cmp	r3, #0
  4093e6:	d176      	bne.n	4094d6 <f_sync+0x17a>
				dir = fp->dir_ptr;
  4093e8:	687b      	ldr	r3, [r7, #4]
  4093ea:	6a1b      	ldr	r3, [r3, #32]
  4093ec:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4093ee:	693b      	ldr	r3, [r7, #16]
  4093f0:	330b      	adds	r3, #11
  4093f2:	693a      	ldr	r2, [r7, #16]
  4093f4:	320b      	adds	r2, #11
  4093f6:	7812      	ldrb	r2, [r2, #0]
  4093f8:	f042 0220 	orr.w	r2, r2, #32
  4093fc:	b2d2      	uxtb	r2, r2
  4093fe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  409400:	693b      	ldr	r3, [r7, #16]
  409402:	331c      	adds	r3, #28
  409404:	687a      	ldr	r2, [r7, #4]
  409406:	68d2      	ldr	r2, [r2, #12]
  409408:	b2d2      	uxtb	r2, r2
  40940a:	701a      	strb	r2, [r3, #0]
  40940c:	693b      	ldr	r3, [r7, #16]
  40940e:	331d      	adds	r3, #29
  409410:	687a      	ldr	r2, [r7, #4]
  409412:	68d2      	ldr	r2, [r2, #12]
  409414:	b292      	uxth	r2, r2
  409416:	0a12      	lsrs	r2, r2, #8
  409418:	b292      	uxth	r2, r2
  40941a:	b2d2      	uxtb	r2, r2
  40941c:	701a      	strb	r2, [r3, #0]
  40941e:	693b      	ldr	r3, [r7, #16]
  409420:	331e      	adds	r3, #30
  409422:	687a      	ldr	r2, [r7, #4]
  409424:	68d2      	ldr	r2, [r2, #12]
  409426:	0c12      	lsrs	r2, r2, #16
  409428:	b2d2      	uxtb	r2, r2
  40942a:	701a      	strb	r2, [r3, #0]
  40942c:	693b      	ldr	r3, [r7, #16]
  40942e:	331f      	adds	r3, #31
  409430:	687a      	ldr	r2, [r7, #4]
  409432:	68d2      	ldr	r2, [r2, #12]
  409434:	0e12      	lsrs	r2, r2, #24
  409436:	b2d2      	uxtb	r2, r2
  409438:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  40943a:	693b      	ldr	r3, [r7, #16]
  40943c:	331a      	adds	r3, #26
  40943e:	687a      	ldr	r2, [r7, #4]
  409440:	6912      	ldr	r2, [r2, #16]
  409442:	b2d2      	uxtb	r2, r2
  409444:	701a      	strb	r2, [r3, #0]
  409446:	693b      	ldr	r3, [r7, #16]
  409448:	331b      	adds	r3, #27
  40944a:	687a      	ldr	r2, [r7, #4]
  40944c:	6912      	ldr	r2, [r2, #16]
  40944e:	b292      	uxth	r2, r2
  409450:	0a12      	lsrs	r2, r2, #8
  409452:	b292      	uxth	r2, r2
  409454:	b2d2      	uxtb	r2, r2
  409456:	701a      	strb	r2, [r3, #0]
  409458:	693b      	ldr	r3, [r7, #16]
  40945a:	3314      	adds	r3, #20
  40945c:	687a      	ldr	r2, [r7, #4]
  40945e:	6912      	ldr	r2, [r2, #16]
  409460:	0c12      	lsrs	r2, r2, #16
  409462:	b2d2      	uxtb	r2, r2
  409464:	701a      	strb	r2, [r3, #0]
  409466:	693b      	ldr	r3, [r7, #16]
  409468:	3315      	adds	r3, #21
  40946a:	687a      	ldr	r2, [r7, #4]
  40946c:	6912      	ldr	r2, [r2, #16]
  40946e:	0c12      	lsrs	r2, r2, #16
  409470:	b292      	uxth	r2, r2
  409472:	0a12      	lsrs	r2, r2, #8
  409474:	b292      	uxth	r2, r2
  409476:	b2d2      	uxtb	r2, r2
  409478:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
  40947a:	4b1c      	ldr	r3, [pc, #112]	; (4094ec <f_sync+0x190>)
  40947c:	4798      	blx	r3
  40947e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
  409480:	693b      	ldr	r3, [r7, #16]
  409482:	3316      	adds	r3, #22
  409484:	68fa      	ldr	r2, [r7, #12]
  409486:	b2d2      	uxtb	r2, r2
  409488:	701a      	strb	r2, [r3, #0]
  40948a:	693b      	ldr	r3, [r7, #16]
  40948c:	3317      	adds	r3, #23
  40948e:	68fa      	ldr	r2, [r7, #12]
  409490:	b292      	uxth	r2, r2
  409492:	0a12      	lsrs	r2, r2, #8
  409494:	b292      	uxth	r2, r2
  409496:	b2d2      	uxtb	r2, r2
  409498:	701a      	strb	r2, [r3, #0]
  40949a:	693b      	ldr	r3, [r7, #16]
  40949c:	3318      	adds	r3, #24
  40949e:	68fa      	ldr	r2, [r7, #12]
  4094a0:	0c12      	lsrs	r2, r2, #16
  4094a2:	b2d2      	uxtb	r2, r2
  4094a4:	701a      	strb	r2, [r3, #0]
  4094a6:	693b      	ldr	r3, [r7, #16]
  4094a8:	3319      	adds	r3, #25
  4094aa:	68fa      	ldr	r2, [r7, #12]
  4094ac:	0e12      	lsrs	r2, r2, #24
  4094ae:	b2d2      	uxtb	r2, r2
  4094b0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
  4094b2:	687b      	ldr	r3, [r7, #4]
  4094b4:	799b      	ldrb	r3, [r3, #6]
  4094b6:	f023 0320 	bic.w	r3, r3, #32
  4094ba:	b2da      	uxtb	r2, r3
  4094bc:	687b      	ldr	r3, [r7, #4]
  4094be:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
  4094c0:	687b      	ldr	r3, [r7, #4]
  4094c2:	681b      	ldr	r3, [r3, #0]
  4094c4:	2201      	movs	r2, #1
  4094c6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4094c8:	687b      	ldr	r3, [r7, #4]
  4094ca:	681b      	ldr	r3, [r3, #0]
  4094cc:	4618      	mov	r0, r3
  4094ce:	4b08      	ldr	r3, [pc, #32]	; (4094f0 <f_sync+0x194>)
  4094d0:	4798      	blx	r3
  4094d2:	4603      	mov	r3, r0
  4094d4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
  4094d6:	7dfb      	ldrb	r3, [r7, #23]
}
  4094d8:	4618      	mov	r0, r3
  4094da:	371c      	adds	r7, #28
  4094dc:	46bd      	mov	sp, r7
  4094de:	bd90      	pop	{r4, r7, pc}
  4094e0:	00408875 	.word	0x00408875
  4094e4:	0040624d 	.word	0x0040624d
  4094e8:	0040686d 	.word	0x0040686d
  4094ec:	004063bd 	.word	0x004063bd
  4094f0:	00406931 	.word	0x00406931

004094f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4094f4:	b580      	push	{r7, lr}
  4094f6:	b084      	sub	sp, #16
  4094f8:	af00      	add	r7, sp, #0
  4094fa:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4094fc:	6878      	ldr	r0, [r7, #4]
  4094fe:	4b0c      	ldr	r3, [pc, #48]	; (409530 <f_close+0x3c>)
  409500:	4798      	blx	r3
  409502:	4603      	mov	r3, r0
  409504:	73fb      	strb	r3, [r7, #15]
#if _FS_SHARE
	if (res == FR_OK) {		/* Decrement open counter */
  409506:	7bfb      	ldrb	r3, [r7, #15]
  409508:	2b00      	cmp	r3, #0
  40950a:	d106      	bne.n	40951a <f_close+0x26>
		if (res == FR_OK) {
			res = dec_lock(fp->lockid);	
			unlock_fs(fp->fs, FR_OK);
		}
#else
		res = dec_lock(fp->lockid);
  40950c:	687b      	ldr	r3, [r7, #4]
  40950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409510:	4618      	mov	r0, r3
  409512:	4b08      	ldr	r3, [pc, #32]	; (409534 <f_close+0x40>)
  409514:	4798      	blx	r3
  409516:	4603      	mov	r3, r0
  409518:	73fb      	strb	r3, [r7, #15]
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40951a:	7bfb      	ldrb	r3, [r7, #15]
  40951c:	2b00      	cmp	r3, #0
  40951e:	d102      	bne.n	409526 <f_close+0x32>
  409520:	687b      	ldr	r3, [r7, #4]
  409522:	2200      	movs	r2, #0
  409524:	601a      	str	r2, [r3, #0]
	return res;
  409526:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
  409528:	4618      	mov	r0, r3
  40952a:	3710      	adds	r7, #16
  40952c:	46bd      	mov	sp, r7
  40952e:	bd80      	pop	{r7, pc}
  409530:	0040935d 	.word	0x0040935d
  409534:	00406795 	.word	0x00406795

00409538 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  409538:	b590      	push	{r4, r7, lr}
  40953a:	b089      	sub	sp, #36	; 0x24
  40953c:	af00      	add	r7, sp, #0
  40953e:	6078      	str	r0, [r7, #4]
  409540:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  409542:	687b      	ldr	r3, [r7, #4]
  409544:	681a      	ldr	r2, [r3, #0]
  409546:	687b      	ldr	r3, [r7, #4]
  409548:	889b      	ldrh	r3, [r3, #4]
  40954a:	4610      	mov	r0, r2
  40954c:	4619      	mov	r1, r3
  40954e:	4b8b      	ldr	r3, [pc, #556]	; (40977c <f_lseek+0x244>)
  409550:	4798      	blx	r3
  409552:	4603      	mov	r3, r0
  409554:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  409556:	7dfb      	ldrb	r3, [r7, #23]
  409558:	2b00      	cmp	r3, #0
  40955a:	d001      	beq.n	409560 <f_lseek+0x28>
  40955c:	7dfb      	ldrb	r3, [r7, #23]
  40955e:	e14a      	b.n	4097f6 <f_lseek+0x2be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  409560:	687b      	ldr	r3, [r7, #4]
  409562:	799b      	ldrb	r3, [r3, #6]
  409564:	b2db      	uxtb	r3, r3
  409566:	b25b      	sxtb	r3, r3
  409568:	2b00      	cmp	r3, #0
  40956a:	da01      	bge.n	409570 <f_lseek+0x38>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40956c:	2302      	movs	r3, #2
  40956e:	e142      	b.n	4097f6 <f_lseek+0x2be>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  409570:	687b      	ldr	r3, [r7, #4]
  409572:	68da      	ldr	r2, [r3, #12]
  409574:	683b      	ldr	r3, [r7, #0]
  409576:	429a      	cmp	r2, r3
  409578:	d208      	bcs.n	40958c <f_lseek+0x54>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  40957a:	687b      	ldr	r3, [r7, #4]
  40957c:	799b      	ldrb	r3, [r3, #6]
  40957e:	f003 0302 	and.w	r3, r3, #2
  409582:	2b00      	cmp	r3, #0
  409584:	d102      	bne.n	40958c <f_lseek+0x54>
#endif
			) ofs = fp->fsize;
  409586:	687b      	ldr	r3, [r7, #4]
  409588:	68db      	ldr	r3, [r3, #12]
  40958a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
  40958c:	687b      	ldr	r3, [r7, #4]
  40958e:	689b      	ldr	r3, [r3, #8]
  409590:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
  409592:	2300      	movs	r3, #0
  409594:	61bb      	str	r3, [r7, #24]
  409596:	687b      	ldr	r3, [r7, #4]
  409598:	69ba      	ldr	r2, [r7, #24]
  40959a:	609a      	str	r2, [r3, #8]
		if (ofs) {
  40959c:	683b      	ldr	r3, [r7, #0]
  40959e:	2b00      	cmp	r3, #0
  4095a0:	f000 80c1 	beq.w	409726 <f_lseek+0x1ee>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  4095a4:	687b      	ldr	r3, [r7, #4]
  4095a6:	681b      	ldr	r3, [r3, #0]
  4095a8:	789b      	ldrb	r3, [r3, #2]
  4095aa:	025b      	lsls	r3, r3, #9
  4095ac:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
  4095ae:	693b      	ldr	r3, [r7, #16]
  4095b0:	2b00      	cmp	r3, #0
  4095b2:	d01b      	beq.n	4095ec <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  4095b4:	683b      	ldr	r3, [r7, #0]
  4095b6:	1e5a      	subs	r2, r3, #1
  4095b8:	68fb      	ldr	r3, [r7, #12]
  4095ba:	fbb2 f2f3 	udiv	r2, r2, r3
  4095be:	693b      	ldr	r3, [r7, #16]
  4095c0:	1e59      	subs	r1, r3, #1
  4095c2:	68fb      	ldr	r3, [r7, #12]
  4095c4:	fbb1 f3f3 	udiv	r3, r1, r3

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
  4095c8:	429a      	cmp	r2, r3
  4095ca:	d30f      	bcc.n	4095ec <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  4095cc:	693b      	ldr	r3, [r7, #16]
  4095ce:	1e5a      	subs	r2, r3, #1
  4095d0:	68fb      	ldr	r3, [r7, #12]
  4095d2:	425b      	negs	r3, r3
  4095d4:	401a      	ands	r2, r3
  4095d6:	687b      	ldr	r3, [r7, #4]
  4095d8:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
  4095da:	687b      	ldr	r3, [r7, #4]
  4095dc:	689b      	ldr	r3, [r3, #8]
  4095de:	683a      	ldr	r2, [r7, #0]
  4095e0:	1ad3      	subs	r3, r2, r3
  4095e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
  4095e4:	687b      	ldr	r3, [r7, #4]
  4095e6:	695b      	ldr	r3, [r3, #20]
  4095e8:	61fb      	str	r3, [r7, #28]
  4095ea:	e02b      	b.n	409644 <f_lseek+0x10c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  4095ec:	687b      	ldr	r3, [r7, #4]
  4095ee:	691b      	ldr	r3, [r3, #16]
  4095f0:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  4095f2:	69fb      	ldr	r3, [r7, #28]
  4095f4:	2b00      	cmp	r3, #0
  4095f6:	d122      	bne.n	40963e <f_lseek+0x106>
					clst = create_chain(fp->fs, 0);
  4095f8:	687b      	ldr	r3, [r7, #4]
  4095fa:	681b      	ldr	r3, [r3, #0]
  4095fc:	4618      	mov	r0, r3
  4095fe:	2100      	movs	r1, #0
  409600:	4b5f      	ldr	r3, [pc, #380]	; (409780 <f_lseek+0x248>)
  409602:	4798      	blx	r3
  409604:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  409606:	69fb      	ldr	r3, [r7, #28]
  409608:	2b01      	cmp	r3, #1
  40960a:	d108      	bne.n	40961e <f_lseek+0xe6>
  40960c:	687b      	ldr	r3, [r7, #4]
  40960e:	799b      	ldrb	r3, [r3, #6]
  409610:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409614:	b2da      	uxtb	r2, r3
  409616:	687b      	ldr	r3, [r7, #4]
  409618:	719a      	strb	r2, [r3, #6]
  40961a:	2302      	movs	r3, #2
  40961c:	e0eb      	b.n	4097f6 <f_lseek+0x2be>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40961e:	69fb      	ldr	r3, [r7, #28]
  409620:	f1b3 3fff 	cmp.w	r3, #4294967295
  409624:	d108      	bne.n	409638 <f_lseek+0x100>
  409626:	687b      	ldr	r3, [r7, #4]
  409628:	799b      	ldrb	r3, [r3, #6]
  40962a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40962e:	b2da      	uxtb	r2, r3
  409630:	687b      	ldr	r3, [r7, #4]
  409632:	719a      	strb	r2, [r3, #6]
  409634:	2301      	movs	r3, #1
  409636:	e0de      	b.n	4097f6 <f_lseek+0x2be>
					fp->sclust = clst;
  409638:	687b      	ldr	r3, [r7, #4]
  40963a:	69fa      	ldr	r2, [r7, #28]
  40963c:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
  40963e:	687b      	ldr	r3, [r7, #4]
  409640:	69fa      	ldr	r2, [r7, #28]
  409642:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
  409644:	69fb      	ldr	r3, [r7, #28]
  409646:	2b00      	cmp	r3, #0
  409648:	d06d      	beq.n	409726 <f_lseek+0x1ee>
				while (ofs > bcs) {						/* Cluster following loop */
  40964a:	e045      	b.n	4096d8 <f_lseek+0x1a0>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  40964c:	687b      	ldr	r3, [r7, #4]
  40964e:	799b      	ldrb	r3, [r3, #6]
  409650:	f003 0302 	and.w	r3, r3, #2
  409654:	2b00      	cmp	r3, #0
  409656:	d00c      	beq.n	409672 <f_lseek+0x13a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  409658:	687b      	ldr	r3, [r7, #4]
  40965a:	681b      	ldr	r3, [r3, #0]
  40965c:	4618      	mov	r0, r3
  40965e:	69f9      	ldr	r1, [r7, #28]
  409660:	4b47      	ldr	r3, [pc, #284]	; (409780 <f_lseek+0x248>)
  409662:	4798      	blx	r3
  409664:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
  409666:	69fb      	ldr	r3, [r7, #28]
  409668:	2b00      	cmp	r3, #0
  40966a:	d109      	bne.n	409680 <f_lseek+0x148>
							ofs = bcs; break;
  40966c:	68fb      	ldr	r3, [r7, #12]
  40966e:	603b      	str	r3, [r7, #0]
  409670:	e036      	b.n	4096e0 <f_lseek+0x1a8>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  409672:	687b      	ldr	r3, [r7, #4]
  409674:	681b      	ldr	r3, [r3, #0]
  409676:	4618      	mov	r0, r3
  409678:	69f9      	ldr	r1, [r7, #28]
  40967a:	4b42      	ldr	r3, [pc, #264]	; (409784 <f_lseek+0x24c>)
  40967c:	4798      	blx	r3
  40967e:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  409680:	69fb      	ldr	r3, [r7, #28]
  409682:	f1b3 3fff 	cmp.w	r3, #4294967295
  409686:	d108      	bne.n	40969a <f_lseek+0x162>
  409688:	687b      	ldr	r3, [r7, #4]
  40968a:	799b      	ldrb	r3, [r3, #6]
  40968c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409690:	b2da      	uxtb	r2, r3
  409692:	687b      	ldr	r3, [r7, #4]
  409694:	719a      	strb	r2, [r3, #6]
  409696:	2301      	movs	r3, #1
  409698:	e0ad      	b.n	4097f6 <f_lseek+0x2be>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  40969a:	69fb      	ldr	r3, [r7, #28]
  40969c:	2b01      	cmp	r3, #1
  40969e:	d905      	bls.n	4096ac <f_lseek+0x174>
  4096a0:	687b      	ldr	r3, [r7, #4]
  4096a2:	681b      	ldr	r3, [r3, #0]
  4096a4:	699a      	ldr	r2, [r3, #24]
  4096a6:	69fb      	ldr	r3, [r7, #28]
  4096a8:	429a      	cmp	r2, r3
  4096aa:	d808      	bhi.n	4096be <f_lseek+0x186>
  4096ac:	687b      	ldr	r3, [r7, #4]
  4096ae:	799b      	ldrb	r3, [r3, #6]
  4096b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4096b4:	b2da      	uxtb	r2, r3
  4096b6:	687b      	ldr	r3, [r7, #4]
  4096b8:	719a      	strb	r2, [r3, #6]
  4096ba:	2302      	movs	r3, #2
  4096bc:	e09b      	b.n	4097f6 <f_lseek+0x2be>
					fp->clust = clst;
  4096be:	687b      	ldr	r3, [r7, #4]
  4096c0:	69fa      	ldr	r2, [r7, #28]
  4096c2:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
  4096c4:	687b      	ldr	r3, [r7, #4]
  4096c6:	689a      	ldr	r2, [r3, #8]
  4096c8:	68fb      	ldr	r3, [r7, #12]
  4096ca:	441a      	add	r2, r3
  4096cc:	687b      	ldr	r3, [r7, #4]
  4096ce:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
  4096d0:	683a      	ldr	r2, [r7, #0]
  4096d2:	68fb      	ldr	r3, [r7, #12]
  4096d4:	1ad3      	subs	r3, r2, r3
  4096d6:	603b      	str	r3, [r7, #0]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
  4096d8:	683a      	ldr	r2, [r7, #0]
  4096da:	68fb      	ldr	r3, [r7, #12]
  4096dc:	429a      	cmp	r2, r3
  4096de:	d8b5      	bhi.n	40964c <f_lseek+0x114>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
  4096e0:	687b      	ldr	r3, [r7, #4]
  4096e2:	689a      	ldr	r2, [r3, #8]
  4096e4:	683b      	ldr	r3, [r7, #0]
  4096e6:	441a      	add	r2, r3
  4096e8:	687b      	ldr	r3, [r7, #4]
  4096ea:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
  4096ec:	683b      	ldr	r3, [r7, #0]
  4096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4096f2:	2b00      	cmp	r3, #0
  4096f4:	d017      	beq.n	409726 <f_lseek+0x1ee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  4096f6:	687b      	ldr	r3, [r7, #4]
  4096f8:	681b      	ldr	r3, [r3, #0]
  4096fa:	4618      	mov	r0, r3
  4096fc:	69f9      	ldr	r1, [r7, #28]
  4096fe:	4b22      	ldr	r3, [pc, #136]	; (409788 <f_lseek+0x250>)
  409700:	4798      	blx	r3
  409702:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  409704:	69bb      	ldr	r3, [r7, #24]
  409706:	2b00      	cmp	r3, #0
  409708:	d108      	bne.n	40971c <f_lseek+0x1e4>
  40970a:	687b      	ldr	r3, [r7, #4]
  40970c:	799b      	ldrb	r3, [r3, #6]
  40970e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409712:	b2da      	uxtb	r2, r3
  409714:	687b      	ldr	r3, [r7, #4]
  409716:	719a      	strb	r2, [r3, #6]
  409718:	2302      	movs	r3, #2
  40971a:	e06c      	b.n	4097f6 <f_lseek+0x2be>
					nsect += ofs / SS(fp->fs);
  40971c:	683b      	ldr	r3, [r7, #0]
  40971e:	0a5b      	lsrs	r3, r3, #9
  409720:	69ba      	ldr	r2, [r7, #24]
  409722:	4413      	add	r3, r2
  409724:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  409726:	687b      	ldr	r3, [r7, #4]
  409728:	689b      	ldr	r3, [r3, #8]
  40972a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40972e:	2b00      	cmp	r3, #0
  409730:	d04f      	beq.n	4097d2 <f_lseek+0x29a>
  409732:	687b      	ldr	r3, [r7, #4]
  409734:	699a      	ldr	r2, [r3, #24]
  409736:	69bb      	ldr	r3, [r7, #24]
  409738:	429a      	cmp	r2, r3
  40973a:	d04a      	beq.n	4097d2 <f_lseek+0x29a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
  40973c:	687b      	ldr	r3, [r7, #4]
  40973e:	799b      	ldrb	r3, [r3, #6]
  409740:	f003 0340 	and.w	r3, r3, #64	; 0x40
  409744:	2b00      	cmp	r3, #0
  409746:	d02a      	beq.n	40979e <f_lseek+0x266>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  409748:	687b      	ldr	r3, [r7, #4]
  40974a:	681b      	ldr	r3, [r3, #0]
  40974c:	7859      	ldrb	r1, [r3, #1]
  40974e:	687b      	ldr	r3, [r7, #4]
  409750:	f103 0228 	add.w	r2, r3, #40	; 0x28
  409754:	687b      	ldr	r3, [r7, #4]
  409756:	699b      	ldr	r3, [r3, #24]
  409758:	4608      	mov	r0, r1
  40975a:	4611      	mov	r1, r2
  40975c:	461a      	mov	r2, r3
  40975e:	2301      	movs	r3, #1
  409760:	4c0a      	ldr	r4, [pc, #40]	; (40978c <f_lseek+0x254>)
  409762:	47a0      	blx	r4
  409764:	4603      	mov	r3, r0
  409766:	2b00      	cmp	r3, #0
  409768:	d012      	beq.n	409790 <f_lseek+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
  40976a:	687b      	ldr	r3, [r7, #4]
  40976c:	799b      	ldrb	r3, [r3, #6]
  40976e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409772:	b2da      	uxtb	r2, r3
  409774:	687b      	ldr	r3, [r7, #4]
  409776:	719a      	strb	r2, [r3, #6]
  409778:	2301      	movs	r3, #1
  40977a:	e03c      	b.n	4097f6 <f_lseek+0x2be>
  40977c:	00408875 	.word	0x00408875
  409780:	00406ebd 	.word	0x00406ebd
  409784:	00406ac9 	.word	0x00406ac9
  409788:	00406a8d 	.word	0x00406a8d
  40978c:	0040624d 	.word	0x0040624d
				fp->flag &= ~FA__DIRTY;
  409790:	687b      	ldr	r3, [r7, #4]
  409792:	799b      	ldrb	r3, [r3, #6]
  409794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  409798:	b2da      	uxtb	r2, r3
  40979a:	687b      	ldr	r3, [r7, #4]
  40979c:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
  40979e:	687b      	ldr	r3, [r7, #4]
  4097a0:	681b      	ldr	r3, [r3, #0]
  4097a2:	785a      	ldrb	r2, [r3, #1]
  4097a4:	687b      	ldr	r3, [r7, #4]
  4097a6:	3328      	adds	r3, #40	; 0x28
  4097a8:	4610      	mov	r0, r2
  4097aa:	4619      	mov	r1, r3
  4097ac:	69ba      	ldr	r2, [r7, #24]
  4097ae:	2301      	movs	r3, #1
  4097b0:	4c13      	ldr	r4, [pc, #76]	; (409800 <f_lseek+0x2c8>)
  4097b2:	47a0      	blx	r4
  4097b4:	4603      	mov	r3, r0
  4097b6:	2b00      	cmp	r3, #0
  4097b8:	d008      	beq.n	4097cc <f_lseek+0x294>
				ABORT(fp->fs, FR_DISK_ERR);
  4097ba:	687b      	ldr	r3, [r7, #4]
  4097bc:	799b      	ldrb	r3, [r3, #6]
  4097be:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4097c2:	b2da      	uxtb	r2, r3
  4097c4:	687b      	ldr	r3, [r7, #4]
  4097c6:	719a      	strb	r2, [r3, #6]
  4097c8:	2301      	movs	r3, #1
  4097ca:	e014      	b.n	4097f6 <f_lseek+0x2be>
#endif
			fp->dsect = nsect;
  4097cc:	687b      	ldr	r3, [r7, #4]
  4097ce:	69ba      	ldr	r2, [r7, #24]
  4097d0:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  4097d2:	687b      	ldr	r3, [r7, #4]
  4097d4:	689a      	ldr	r2, [r3, #8]
  4097d6:	687b      	ldr	r3, [r7, #4]
  4097d8:	68db      	ldr	r3, [r3, #12]
  4097da:	429a      	cmp	r2, r3
  4097dc:	d90a      	bls.n	4097f4 <f_lseek+0x2bc>
			fp->fsize = fp->fptr;
  4097de:	687b      	ldr	r3, [r7, #4]
  4097e0:	689a      	ldr	r2, [r3, #8]
  4097e2:	687b      	ldr	r3, [r7, #4]
  4097e4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
  4097e6:	687b      	ldr	r3, [r7, #4]
  4097e8:	799b      	ldrb	r3, [r3, #6]
  4097ea:	f043 0320 	orr.w	r3, r3, #32
  4097ee:	b2da      	uxtb	r2, r3
  4097f0:	687b      	ldr	r3, [r7, #4]
  4097f2:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
  4097f4:	7dfb      	ldrb	r3, [r7, #23]
}
  4097f6:	4618      	mov	r0, r3
  4097f8:	3724      	adds	r7, #36	; 0x24
  4097fa:	46bd      	mov	sp, r7
  4097fc:	bd90      	pop	{r4, r7, pc}
  4097fe:	bf00      	nop
  409800:	0040619d 	.word	0x0040619d

00409804 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  409804:	b580      	push	{r7, lr}
  409806:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  40980a:	af00      	add	r7, sp, #0
  40980c:	1d3b      	adds	r3, r7, #4
  40980e:	6018      	str	r0, [r3, #0]
  409810:	463b      	mov	r3, r7
  409812:	6019      	str	r1, [r3, #0]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  409814:	1d3b      	adds	r3, r7, #4
  409816:	681b      	ldr	r3, [r3, #0]
  409818:	463a      	mov	r2, r7
  40981a:	4610      	mov	r0, r2
  40981c:	4619      	mov	r1, r3
  40981e:	2200      	movs	r2, #0
  409820:	4b3b      	ldr	r3, [pc, #236]	; (409910 <f_opendir+0x10c>)
  409822:	4798      	blx	r3
  409824:	4603      	mov	r3, r0
  409826:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
  40982a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
  40982e:	2b00      	cmp	r3, #0
  409830:	d166      	bne.n	409900 <f_opendir+0xfc>
		INIT_BUF(*dj);
  409832:	1d3b      	adds	r3, r7, #4
  409834:	681b      	ldr	r3, [r3, #0]
  409836:	f507 7202 	add.w	r2, r7, #520	; 0x208
  40983a:	619a      	str	r2, [r3, #24]
  40983c:	1d3b      	adds	r3, r7, #4
  40983e:	681b      	ldr	r3, [r3, #0]
  409840:	f107 0208 	add.w	r2, r7, #8
  409844:	61da      	str	r2, [r3, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  409846:	463b      	mov	r3, r7
  409848:	681b      	ldr	r3, [r3, #0]
  40984a:	1d3a      	adds	r2, r7, #4
  40984c:	6810      	ldr	r0, [r2, #0]
  40984e:	4619      	mov	r1, r3
  409850:	4b30      	ldr	r3, [pc, #192]	; (409914 <f_opendir+0x110>)
  409852:	4798      	blx	r3
  409854:	4603      	mov	r3, r0
  409856:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
  40985a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
  40985e:	2b00      	cmp	r3, #0
  409860:	d147      	bne.n	4098f2 <f_opendir+0xee>
			if (dj->dir) {						/* It is not the root dir */
  409862:	1d3b      	adds	r3, r7, #4
  409864:	681b      	ldr	r3, [r3, #0]
  409866:	695b      	ldr	r3, [r3, #20]
  409868:	2b00      	cmp	r3, #0
  40986a:	d02f      	beq.n	4098cc <f_opendir+0xc8>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  40986c:	1d3b      	adds	r3, r7, #4
  40986e:	681b      	ldr	r3, [r3, #0]
  409870:	695b      	ldr	r3, [r3, #20]
  409872:	330b      	adds	r3, #11
  409874:	781b      	ldrb	r3, [r3, #0]
  409876:	f003 0310 	and.w	r3, r3, #16
  40987a:	2b00      	cmp	r3, #0
  40987c:	d023      	beq.n	4098c6 <f_opendir+0xc2>
					dj->sclust = LD_CLUST(dj->dir);
  40987e:	1d3b      	adds	r3, r7, #4
  409880:	681b      	ldr	r3, [r3, #0]
  409882:	695b      	ldr	r3, [r3, #20]
  409884:	3315      	adds	r3, #21
  409886:	781b      	ldrb	r3, [r3, #0]
  409888:	021b      	lsls	r3, r3, #8
  40988a:	b29a      	uxth	r2, r3
  40988c:	1d3b      	adds	r3, r7, #4
  40988e:	681b      	ldr	r3, [r3, #0]
  409890:	695b      	ldr	r3, [r3, #20]
  409892:	3314      	adds	r3, #20
  409894:	781b      	ldrb	r3, [r3, #0]
  409896:	4313      	orrs	r3, r2
  409898:	b29b      	uxth	r3, r3
  40989a:	b29b      	uxth	r3, r3
  40989c:	041a      	lsls	r2, r3, #16
  40989e:	1d3b      	adds	r3, r7, #4
  4098a0:	681b      	ldr	r3, [r3, #0]
  4098a2:	695b      	ldr	r3, [r3, #20]
  4098a4:	331b      	adds	r3, #27
  4098a6:	781b      	ldrb	r3, [r3, #0]
  4098a8:	021b      	lsls	r3, r3, #8
  4098aa:	b299      	uxth	r1, r3
  4098ac:	1d3b      	adds	r3, r7, #4
  4098ae:	681b      	ldr	r3, [r3, #0]
  4098b0:	695b      	ldr	r3, [r3, #20]
  4098b2:	331a      	adds	r3, #26
  4098b4:	781b      	ldrb	r3, [r3, #0]
  4098b6:	430b      	orrs	r3, r1
  4098b8:	b29b      	uxth	r3, r3
  4098ba:	b29b      	uxth	r3, r3
  4098bc:	431a      	orrs	r2, r3
  4098be:	1d3b      	adds	r3, r7, #4
  4098c0:	681b      	ldr	r3, [r3, #0]
  4098c2:	609a      	str	r2, [r3, #8]
  4098c4:	e002      	b.n	4098cc <f_opendir+0xc8>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
  4098c6:	2305      	movs	r3, #5
  4098c8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
  4098cc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
  4098d0:	2b00      	cmp	r3, #0
  4098d2:	d10e      	bne.n	4098f2 <f_opendir+0xee>
				dj->id = dj->fs->id;
  4098d4:	1d3b      	adds	r3, r7, #4
  4098d6:	681b      	ldr	r3, [r3, #0]
  4098d8:	681b      	ldr	r3, [r3, #0]
  4098da:	88da      	ldrh	r2, [r3, #6]
  4098dc:	1d3b      	adds	r3, r7, #4
  4098de:	681b      	ldr	r3, [r3, #0]
  4098e0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  4098e2:	1d3b      	adds	r3, r7, #4
  4098e4:	6818      	ldr	r0, [r3, #0]
  4098e6:	2100      	movs	r1, #0
  4098e8:	4b0b      	ldr	r3, [pc, #44]	; (409918 <f_opendir+0x114>)
  4098ea:	4798      	blx	r3
  4098ec:	4603      	mov	r3, r0
  4098ee:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  4098f2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
  4098f6:	2b04      	cmp	r3, #4
  4098f8:	d102      	bne.n	409900 <f_opendir+0xfc>
  4098fa:	2305      	movs	r3, #5
  4098fc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}

	LEAVE_FF(dj->fs, res);
  409900:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
  409904:	4618      	mov	r0, r3
  409906:	f507 7706 	add.w	r7, r7, #536	; 0x218
  40990a:	46bd      	mov	sp, r7
  40990c:	bd80      	pop	{r7, pc}
  40990e:	bf00      	nop
  409910:	0040831d 	.word	0x0040831d
  409914:	0040815d 	.word	0x0040815d
  409918:	00406fdd 	.word	0x00406fdd

0040991c <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  40991c:	b580      	push	{r7, lr}
  40991e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
  409922:	af00      	add	r7, sp, #0
  409924:	1d3b      	adds	r3, r7, #4
  409926:	6018      	str	r0, [r3, #0]
  409928:	463b      	mov	r3, r7
  40992a:	6019      	str	r1, [r3, #0]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
  40992c:	1d3a      	adds	r2, r7, #4
  40992e:	f507 7306 	add.w	r3, r7, #536	; 0x218
  409932:	4610      	mov	r0, r2
  409934:	4619      	mov	r1, r3
  409936:	2200      	movs	r2, #0
  409938:	4b1a      	ldr	r3, [pc, #104]	; (4099a4 <f_stat+0x88>)
  40993a:	4798      	blx	r3
  40993c:	4603      	mov	r3, r0
  40993e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
  409942:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
  409946:	2b00      	cmp	r3, #0
  409948:	d125      	bne.n	409996 <f_stat+0x7a>
		INIT_BUF(dj);
  40994a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
  40994e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  409952:	f107 030c 	add.w	r3, r7, #12
  409956:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		res = follow_path(&dj, path);	/* Follow the file path */
  40995a:	1d3b      	adds	r3, r7, #4
  40995c:	681b      	ldr	r3, [r3, #0]
  40995e:	f507 7206 	add.w	r2, r7, #536	; 0x218
  409962:	4610      	mov	r0, r2
  409964:	4619      	mov	r1, r3
  409966:	4b10      	ldr	r3, [pc, #64]	; (4099a8 <f_stat+0x8c>)
  409968:	4798      	blx	r3
  40996a:	4603      	mov	r3, r0
  40996c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
  409970:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
  409974:	2b00      	cmp	r3, #0
  409976:	d10e      	bne.n	409996 <f_stat+0x7a>
			if (dj.dir)		/* Found an object */
  409978:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40997c:	2b00      	cmp	r3, #0
  40997e:	d007      	beq.n	409990 <f_stat+0x74>
				get_fileinfo(&dj, fno);
  409980:	f507 7206 	add.w	r2, r7, #536	; 0x218
  409984:	463b      	mov	r3, r7
  409986:	4610      	mov	r0, r2
  409988:	6819      	ldr	r1, [r3, #0]
  40998a:	4b08      	ldr	r3, [pc, #32]	; (4099ac <f_stat+0x90>)
  40998c:	4798      	blx	r3
  40998e:	e002      	b.n	409996 <f_stat+0x7a>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
  409990:	2306      	movs	r3, #6
  409992:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
  409996:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
  40999a:	4618      	mov	r0, r3
  40999c:	f507 7710 	add.w	r7, r7, #576	; 0x240
  4099a0:	46bd      	mov	sp, r7
  4099a2:	bd80      	pop	{r7, pc}
  4099a4:	0040831d 	.word	0x0040831d
  4099a8:	0040815d 	.word	0x0040815d
  4099ac:	00407f85 	.word	0x00407f85

004099b0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
  4099b0:	b580      	push	{r7, lr}
  4099b2:	b08c      	sub	sp, #48	; 0x30
  4099b4:	af00      	add	r7, sp, #0
  4099b6:	60f8      	str	r0, [r7, #12]
  4099b8:	60b9      	str	r1, [r7, #8]
  4099ba:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
  4099bc:	f107 030c 	add.w	r3, r7, #12
  4099c0:	4618      	mov	r0, r3
  4099c2:	6879      	ldr	r1, [r7, #4]
  4099c4:	2200      	movs	r2, #0
  4099c6:	4b61      	ldr	r3, [pc, #388]	; (409b4c <f_getfree+0x19c>)
  4099c8:	4798      	blx	r3
  4099ca:	4603      	mov	r3, r0
  4099cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK) {
  4099d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4099d4:	2b00      	cmp	r3, #0
  4099d6:	f040 80b2 	bne.w	409b3e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  4099da:	687b      	ldr	r3, [r7, #4]
  4099dc:	681b      	ldr	r3, [r3, #0]
  4099de:	691a      	ldr	r2, [r3, #16]
  4099e0:	687b      	ldr	r3, [r7, #4]
  4099e2:	681b      	ldr	r3, [r3, #0]
  4099e4:	699b      	ldr	r3, [r3, #24]
  4099e6:	3b02      	subs	r3, #2
  4099e8:	429a      	cmp	r2, r3
  4099ea:	d805      	bhi.n	4099f8 <f_getfree+0x48>
			*nclst = (*fatfs)->free_clust;
  4099ec:	687b      	ldr	r3, [r7, #4]
  4099ee:	681b      	ldr	r3, [r3, #0]
  4099f0:	691a      	ldr	r2, [r3, #16]
  4099f2:	68bb      	ldr	r3, [r7, #8]
  4099f4:	601a      	str	r2, [r3, #0]
  4099f6:	e0a2      	b.n	409b3e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
  4099f8:	687b      	ldr	r3, [r7, #4]
  4099fa:	681b      	ldr	r3, [r3, #0]
  4099fc:	781b      	ldrb	r3, [r3, #0]
  4099fe:	75fb      	strb	r3, [r7, #23]
			n = 0;
  409a00:	2300      	movs	r3, #0
  409a02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (fat == FS_FAT12) {
  409a04:	7dfb      	ldrb	r3, [r7, #23]
  409a06:	2b01      	cmp	r3, #1
  409a08:	d128      	bne.n	409a5c <f_getfree+0xac>
				clst = 2;
  409a0a:	2302      	movs	r3, #2
  409a0c:	627b      	str	r3, [r7, #36]	; 0x24
				do {
					stat = get_fat(*fatfs, clst);
  409a0e:	687b      	ldr	r3, [r7, #4]
  409a10:	681b      	ldr	r3, [r3, #0]
  409a12:	4618      	mov	r0, r3
  409a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
  409a16:	4b4e      	ldr	r3, [pc, #312]	; (409b50 <f_getfree+0x1a0>)
  409a18:	4798      	blx	r3
  409a1a:	6138      	str	r0, [r7, #16]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  409a1c:	693b      	ldr	r3, [r7, #16]
  409a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  409a22:	d103      	bne.n	409a2c <f_getfree+0x7c>
  409a24:	2301      	movs	r3, #1
  409a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  409a2a:	e016      	b.n	409a5a <f_getfree+0xaa>
					if (stat == 1) { res = FR_INT_ERR; break; }
  409a2c:	693b      	ldr	r3, [r7, #16]
  409a2e:	2b01      	cmp	r3, #1
  409a30:	d103      	bne.n	409a3a <f_getfree+0x8a>
  409a32:	2302      	movs	r3, #2
  409a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  409a38:	e00f      	b.n	409a5a <f_getfree+0xaa>
					if (stat == 0) n++;
  409a3a:	693b      	ldr	r3, [r7, #16]
  409a3c:	2b00      	cmp	r3, #0
  409a3e:	d102      	bne.n	409a46 <f_getfree+0x96>
  409a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409a42:	3301      	adds	r3, #1
  409a44:	62bb      	str	r3, [r7, #40]	; 0x28
				} while (++clst < (*fatfs)->n_fatent);
  409a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409a48:	3301      	adds	r3, #1
  409a4a:	627b      	str	r3, [r7, #36]	; 0x24
  409a4c:	687b      	ldr	r3, [r7, #4]
  409a4e:	681b      	ldr	r3, [r3, #0]
  409a50:	699b      	ldr	r3, [r3, #24]
  409a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  409a54:	429a      	cmp	r2, r3
  409a56:	d3da      	bcc.n	409a0e <f_getfree+0x5e>
  409a58:	e063      	b.n	409b22 <f_getfree+0x172>
  409a5a:	e062      	b.n	409b22 <f_getfree+0x172>
			} else {
				clst = (*fatfs)->n_fatent;
  409a5c:	687b      	ldr	r3, [r7, #4]
  409a5e:	681b      	ldr	r3, [r3, #0]
  409a60:	699b      	ldr	r3, [r3, #24]
  409a62:	627b      	str	r3, [r7, #36]	; 0x24
				sect = (*fatfs)->fatbase;
  409a64:	687b      	ldr	r3, [r7, #4]
  409a66:	681b      	ldr	r3, [r3, #0]
  409a68:	6a1b      	ldr	r3, [r3, #32]
  409a6a:	623b      	str	r3, [r7, #32]
				i = 0; p = 0;
  409a6c:	2300      	movs	r3, #0
  409a6e:	61fb      	str	r3, [r7, #28]
  409a70:	2300      	movs	r3, #0
  409a72:	61bb      	str	r3, [r7, #24]
				do {
					if (!i) {
  409a74:	69fb      	ldr	r3, [r7, #28]
  409a76:	2b00      	cmp	r3, #0
  409a78:	d117      	bne.n	409aaa <f_getfree+0xfa>
						res = move_window(*fatfs, sect++);
  409a7a:	687b      	ldr	r3, [r7, #4]
  409a7c:	681a      	ldr	r2, [r3, #0]
  409a7e:	6a3b      	ldr	r3, [r7, #32]
  409a80:	1c59      	adds	r1, r3, #1
  409a82:	6239      	str	r1, [r7, #32]
  409a84:	4610      	mov	r0, r2
  409a86:	4619      	mov	r1, r3
  409a88:	4b32      	ldr	r3, [pc, #200]	; (409b54 <f_getfree+0x1a4>)
  409a8a:	4798      	blx	r3
  409a8c:	4603      	mov	r3, r0
  409a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						if (res != FR_OK) break;
  409a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  409a96:	2b00      	cmp	r3, #0
  409a98:	d000      	beq.n	409a9c <f_getfree+0xec>
  409a9a:	e042      	b.n	409b22 <f_getfree+0x172>
						p = (*fatfs)->win;
  409a9c:	687b      	ldr	r3, [r7, #4]
  409a9e:	681b      	ldr	r3, [r3, #0]
  409aa0:	3330      	adds	r3, #48	; 0x30
  409aa2:	61bb      	str	r3, [r7, #24]
						i = SS(*fatfs);
  409aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
  409aa8:	61fb      	str	r3, [r7, #28]
					}
					if (fat == FS_FAT16) {
  409aaa:	7dfb      	ldrb	r3, [r7, #23]
  409aac:	2b02      	cmp	r3, #2
  409aae:	d114      	bne.n	409ada <f_getfree+0x12a>
						if (LD_WORD(p) == 0) n++;
  409ab0:	69bb      	ldr	r3, [r7, #24]
  409ab2:	3301      	adds	r3, #1
  409ab4:	781b      	ldrb	r3, [r3, #0]
  409ab6:	021b      	lsls	r3, r3, #8
  409ab8:	b29a      	uxth	r2, r3
  409aba:	69bb      	ldr	r3, [r7, #24]
  409abc:	781b      	ldrb	r3, [r3, #0]
  409abe:	4313      	orrs	r3, r2
  409ac0:	b29b      	uxth	r3, r3
  409ac2:	2b00      	cmp	r3, #0
  409ac4:	d102      	bne.n	409acc <f_getfree+0x11c>
  409ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409ac8:	3301      	adds	r3, #1
  409aca:	62bb      	str	r3, [r7, #40]	; 0x28
						p += 2; i -= 2;
  409acc:	69bb      	ldr	r3, [r7, #24]
  409ace:	3302      	adds	r3, #2
  409ad0:	61bb      	str	r3, [r7, #24]
  409ad2:	69fb      	ldr	r3, [r7, #28]
  409ad4:	3b02      	subs	r3, #2
  409ad6:	61fb      	str	r3, [r7, #28]
  409ad8:	e01d      	b.n	409b16 <f_getfree+0x166>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  409ada:	69bb      	ldr	r3, [r7, #24]
  409adc:	3303      	adds	r3, #3
  409ade:	781b      	ldrb	r3, [r3, #0]
  409ae0:	061a      	lsls	r2, r3, #24
  409ae2:	69bb      	ldr	r3, [r7, #24]
  409ae4:	3302      	adds	r3, #2
  409ae6:	781b      	ldrb	r3, [r3, #0]
  409ae8:	041b      	lsls	r3, r3, #16
  409aea:	431a      	orrs	r2, r3
  409aec:	69bb      	ldr	r3, [r7, #24]
  409aee:	3301      	adds	r3, #1
  409af0:	781b      	ldrb	r3, [r3, #0]
  409af2:	021b      	lsls	r3, r3, #8
  409af4:	431a      	orrs	r2, r3
  409af6:	69bb      	ldr	r3, [r7, #24]
  409af8:	781b      	ldrb	r3, [r3, #0]
  409afa:	4313      	orrs	r3, r2
  409afc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  409b00:	2b00      	cmp	r3, #0
  409b02:	d102      	bne.n	409b0a <f_getfree+0x15a>
  409b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409b06:	3301      	adds	r3, #1
  409b08:	62bb      	str	r3, [r7, #40]	; 0x28
						p += 4; i -= 4;
  409b0a:	69bb      	ldr	r3, [r7, #24]
  409b0c:	3304      	adds	r3, #4
  409b0e:	61bb      	str	r3, [r7, #24]
  409b10:	69fb      	ldr	r3, [r7, #28]
  409b12:	3b04      	subs	r3, #4
  409b14:	61fb      	str	r3, [r7, #28]
					}
				} while (--clst);
  409b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409b18:	3b01      	subs	r3, #1
  409b1a:	627b      	str	r3, [r7, #36]	; 0x24
  409b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409b1e:	2b00      	cmp	r3, #0
  409b20:	d1a8      	bne.n	409a74 <f_getfree+0xc4>
			}
			(*fatfs)->free_clust = n;
  409b22:	687b      	ldr	r3, [r7, #4]
  409b24:	681b      	ldr	r3, [r3, #0]
  409b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
  409b28:	611a      	str	r2, [r3, #16]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  409b2a:	7dfb      	ldrb	r3, [r7, #23]
  409b2c:	2b03      	cmp	r3, #3
  409b2e:	d103      	bne.n	409b38 <f_getfree+0x188>
  409b30:	687b      	ldr	r3, [r7, #4]
  409b32:	681b      	ldr	r3, [r3, #0]
  409b34:	2201      	movs	r2, #1
  409b36:	715a      	strb	r2, [r3, #5]
			*nclst = n;
  409b38:	68bb      	ldr	r3, [r7, #8]
  409b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  409b3c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(*fatfs, res);
  409b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  409b42:	4618      	mov	r0, r3
  409b44:	3730      	adds	r7, #48	; 0x30
  409b46:	46bd      	mov	sp, r7
  409b48:	bd80      	pop	{r7, pc}
  409b4a:	bf00      	nop
  409b4c:	0040831d 	.word	0x0040831d
  409b50:	00406ac9 	.word	0x00406ac9
  409b54:	0040686d 	.word	0x0040686d

00409b58 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
  409b58:	b580      	push	{r7, lr}
  409b5a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
  409b5e:	af00      	add	r7, sp, #0
  409b60:	1d3b      	adds	r3, r7, #4
  409b62:	6018      	str	r0, [r3, #0]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  409b64:	1d3a      	adds	r2, r7, #4
  409b66:	f507 730e 	add.w	r3, r7, #568	; 0x238
  409b6a:	4610      	mov	r0, r2
  409b6c:	4619      	mov	r1, r3
  409b6e:	2201      	movs	r2, #1
  409b70:	4b6c      	ldr	r3, [pc, #432]	; (409d24 <f_unlink+0x1cc>)
  409b72:	4798      	blx	r3
  409b74:	4603      	mov	r3, r0
  409b76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
  409b7a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409b7e:	2b00      	cmp	r3, #0
  409b80:	f040 80c8 	bne.w	409d14 <f_unlink+0x1bc>
		INIT_BUF(dj);
  409b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
  409b88:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  409b8c:	f107 0308 	add.w	r3, r7, #8
  409b90:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		res = follow_path(&dj, path);		/* Follow the file path */
  409b94:	1d3b      	adds	r3, r7, #4
  409b96:	681b      	ldr	r3, [r3, #0]
  409b98:	f507 720e 	add.w	r2, r7, #568	; 0x238
  409b9c:	4610      	mov	r0, r2
  409b9e:	4619      	mov	r1, r3
  409ba0:	4b61      	ldr	r3, [pc, #388]	; (409d28 <f_unlink+0x1d0>)
  409ba2:	4798      	blx	r3
  409ba4:	4603      	mov	r3, r0
  409ba6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
  409baa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409bae:	2b00      	cmp	r3, #0
  409bb0:	d108      	bne.n	409bc4 <f_unlink+0x6c>
  409bb2:	f507 730e 	add.w	r3, r7, #568	; 0x238
  409bb6:	4618      	mov	r0, r3
  409bb8:	2102      	movs	r1, #2
  409bba:	4b5c      	ldr	r3, [pc, #368]	; (409d2c <f_unlink+0x1d4>)
  409bbc:	4798      	blx	r3
  409bbe:	4603      	mov	r3, r0
  409bc0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#endif
		if (res == FR_OK) {					/* The object is accessible */
  409bc4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409bc8:	2b00      	cmp	r3, #0
  409bca:	f040 80a3 	bne.w	409d14 <f_unlink+0x1bc>
			dir = dj.dir;
  409bce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
  409bd2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			if (!dir) {
  409bd6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409bda:	2b00      	cmp	r3, #0
  409bdc:	d103      	bne.n	409be6 <f_unlink+0x8e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
  409bde:	2306      	movs	r3, #6
  409be0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  409be4:	e00a      	b.n	409bfc <f_unlink+0xa4>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
  409be6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409bea:	330b      	adds	r3, #11
  409bec:	781b      	ldrb	r3, [r3, #0]
  409bee:	f003 0301 	and.w	r3, r3, #1
  409bf2:	2b00      	cmp	r3, #0
  409bf4:	d002      	beq.n	409bfc <f_unlink+0xa4>
					res = FR_DENIED;		/* Cannot remove R/O object */
  409bf6:	2307      	movs	r3, #7
  409bf8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
			dclst = LD_CLUST(dir);
  409bfc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409c00:	3315      	adds	r3, #21
  409c02:	781b      	ldrb	r3, [r3, #0]
  409c04:	021b      	lsls	r3, r3, #8
  409c06:	b29a      	uxth	r2, r3
  409c08:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409c0c:	3314      	adds	r3, #20
  409c0e:	781b      	ldrb	r3, [r3, #0]
  409c10:	4313      	orrs	r3, r2
  409c12:	b29b      	uxth	r3, r3
  409c14:	b29b      	uxth	r3, r3
  409c16:	041a      	lsls	r2, r3, #16
  409c18:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409c1c:	331b      	adds	r3, #27
  409c1e:	781b      	ldrb	r3, [r3, #0]
  409c20:	021b      	lsls	r3, r3, #8
  409c22:	b299      	uxth	r1, r3
  409c24:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409c28:	331a      	adds	r3, #26
  409c2a:	781b      	ldrb	r3, [r3, #0]
  409c2c:	430b      	orrs	r3, r1
  409c2e:	b29b      	uxth	r3, r3
  409c30:	b29b      	uxth	r3, r3
  409c32:	4313      	orrs	r3, r2
  409c34:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
  409c38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409c3c:	2b00      	cmp	r3, #0
  409c3e:	d13f      	bne.n	409cc0 <f_unlink+0x168>
  409c40:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
  409c44:	330b      	adds	r3, #11
  409c46:	781b      	ldrb	r3, [r3, #0]
  409c48:	f003 0310 	and.w	r3, r3, #16
  409c4c:	2b00      	cmp	r3, #0
  409c4e:	d037      	beq.n	409cc0 <f_unlink+0x168>
				if (dclst < 2) {
  409c50:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
  409c54:	2b01      	cmp	r3, #1
  409c56:	d803      	bhi.n	409c60 <f_unlink+0x108>
					res = FR_INT_ERR;
  409c58:	2302      	movs	r3, #2
  409c5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  409c5e:	e02f      	b.n	409cc0 <f_unlink+0x168>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
  409c60:	f507 7205 	add.w	r2, r7, #532	; 0x214
  409c64:	f507 730e 	add.w	r3, r7, #568	; 0x238
  409c68:	4610      	mov	r0, r2
  409c6a:	4619      	mov	r1, r3
  409c6c:	2224      	movs	r2, #36	; 0x24
  409c6e:	4b30      	ldr	r3, [pc, #192]	; (409d30 <f_unlink+0x1d8>)
  409c70:	4798      	blx	r3
					sdj.sclust = dclst;
  409c72:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
  409c76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
  409c7a:	f507 7305 	add.w	r3, r7, #532	; 0x214
  409c7e:	4618      	mov	r0, r3
  409c80:	2102      	movs	r1, #2
  409c82:	4b2c      	ldr	r3, [pc, #176]	; (409d34 <f_unlink+0x1dc>)
  409c84:	4798      	blx	r3
  409c86:	4603      	mov	r3, r0
  409c88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (res == FR_OK) {
  409c8c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409c90:	2b00      	cmp	r3, #0
  409c92:	d115      	bne.n	409cc0 <f_unlink+0x168>
						res = dir_read(&sdj);
  409c94:	f507 7305 	add.w	r3, r7, #532	; 0x214
  409c98:	4618      	mov	r0, r3
  409c9a:	4b27      	ldr	r3, [pc, #156]	; (409d38 <f_unlink+0x1e0>)
  409c9c:	4798      	blx	r3
  409c9e:	4603      	mov	r3, r0
  409ca0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK			/* Not empty dir */
  409ca4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409ca8:	2b00      	cmp	r3, #0
  409caa:	d102      	bne.n	409cb2 <f_unlink+0x15a>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
  409cac:	2307      	movs	r3, #7
  409cae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
  409cb2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409cb6:	2b04      	cmp	r3, #4
  409cb8:	d102      	bne.n	409cc0 <f_unlink+0x168>
  409cba:	2300      	movs	r3, #0
  409cbc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
			if (res == FR_OK) {
  409cc0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409cc4:	2b00      	cmp	r3, #0
  409cc6:	d125      	bne.n	409d14 <f_unlink+0x1bc>
				res = dir_remove(&dj);		/* Remove the directory entry */
  409cc8:	f507 730e 	add.w	r3, r7, #568	; 0x238
  409ccc:	4618      	mov	r0, r3
  409cce:	4b1b      	ldr	r3, [pc, #108]	; (409d3c <f_unlink+0x1e4>)
  409cd0:	4798      	blx	r3
  409cd2:	4603      	mov	r3, r0
  409cd4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				if (res == FR_OK) {
  409cd8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409cdc:	2b00      	cmp	r3, #0
  409cde:	d119      	bne.n	409d14 <f_unlink+0x1bc>
					if (dclst)				/* Remove the cluster chain if exist */
  409ce0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
  409ce4:	2b00      	cmp	r3, #0
  409ce6:	d009      	beq.n	409cfc <f_unlink+0x1a4>
						res = remove_chain(dj.fs, dclst);
  409ce8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409cec:	4618      	mov	r0, r3
  409cee:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
  409cf2:	4b13      	ldr	r3, [pc, #76]	; (409d40 <f_unlink+0x1e8>)
  409cf4:	4798      	blx	r3
  409cf6:	4603      	mov	r3, r0
  409cf8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (res == FR_OK) res = sync(dj.fs);
  409cfc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
  409d00:	2b00      	cmp	r3, #0
  409d02:	d107      	bne.n	409d14 <f_unlink+0x1bc>
  409d04:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409d08:	4618      	mov	r0, r3
  409d0a:	4b0e      	ldr	r3, [pc, #56]	; (409d44 <f_unlink+0x1ec>)
  409d0c:	4798      	blx	r3
  409d0e:	4603      	mov	r3, r0
  409d10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
  409d14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
  409d18:	4618      	mov	r0, r3
  409d1a:	f507 771a 	add.w	r7, r7, #616	; 0x268
  409d1e:	46bd      	mov	sp, r7
  409d20:	bd80      	pop	{r7, pc}
  409d22:	bf00      	nop
  409d24:	0040831d 	.word	0x0040831d
  409d28:	0040815d 	.word	0x0040815d
  409d2c:	0040651d 	.word	0x0040651d
  409d30:	00406425 	.word	0x00406425
  409d34:	00406fdd 	.word	0x00406fdd
  409d38:	004077b1 	.word	0x004077b1
  409d3c:	00407b79 	.word	0x00407b79
  409d40:	00406e19 	.word	0x00406e19
  409d44:	00406931 	.word	0x00406931

00409d48 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
  409d48:	b580      	push	{r7, lr}
  409d4a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  409d4e:	af00      	add	r7, sp, #0
  409d50:	1d3b      	adds	r3, r7, #4
  409d52:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
  409d54:	4bad      	ldr	r3, [pc, #692]	; (40a00c <f_mkdir+0x2c4>)
  409d56:	4798      	blx	r3
  409d58:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  409d5c:	1d3a      	adds	r2, r7, #4
  409d5e:	f507 7305 	add.w	r3, r7, #532	; 0x214
  409d62:	4610      	mov	r0, r2
  409d64:	4619      	mov	r1, r3
  409d66:	2201      	movs	r2, #1
  409d68:	4ba9      	ldr	r3, [pc, #676]	; (40a010 <f_mkdir+0x2c8>)
  409d6a:	4798      	blx	r3
  409d6c:	4603      	mov	r3, r0
  409d6e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	if (res == FR_OK) {
  409d72:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409d76:	2b00      	cmp	r3, #0
  409d78:	f040 81b6 	bne.w	40a0e8 <f_mkdir+0x3a0>
		INIT_BUF(dj);
  409d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
  409d80:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  409d84:	f107 0308 	add.w	r3, r7, #8
  409d88:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		res = follow_path(&dj, path);			/* Follow the file path */
  409d8c:	1d3b      	adds	r3, r7, #4
  409d8e:	681b      	ldr	r3, [r3, #0]
  409d90:	f507 7205 	add.w	r2, r7, #532	; 0x214
  409d94:	4610      	mov	r0, r2
  409d96:	4619      	mov	r1, r3
  409d98:	4b9e      	ldr	r3, [pc, #632]	; (40a014 <f_mkdir+0x2cc>)
  409d9a:	4798      	blx	r3
  409d9c:	4603      	mov	r3, r0
  409d9e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  409da2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409da6:	2b00      	cmp	r3, #0
  409da8:	d102      	bne.n	409db0 <f_mkdir+0x68>
  409daa:	2308      	movs	r3, #8
  409dac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
  409db0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409db4:	2b04      	cmp	r3, #4
  409db6:	f040 8197 	bne.w	40a0e8 <f_mkdir+0x3a0>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
  409dba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409dbe:	4618      	mov	r0, r3
  409dc0:	2100      	movs	r1, #0
  409dc2:	4b95      	ldr	r3, [pc, #596]	; (40a018 <f_mkdir+0x2d0>)
  409dc4:	4798      	blx	r3
  409dc6:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
			res = FR_OK;
  409dca:	2300      	movs	r3, #0
  409dcc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  409dd0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
  409dd4:	2b00      	cmp	r3, #0
  409dd6:	d102      	bne.n	409dde <f_mkdir+0x96>
  409dd8:	2307      	movs	r3, #7
  409dda:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (dcl == 1) res = FR_INT_ERR;
  409dde:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
  409de2:	2b01      	cmp	r3, #1
  409de4:	d102      	bne.n	409dec <f_mkdir+0xa4>
  409de6:	2302      	movs	r3, #2
  409de8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  409dec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
  409df0:	f1b3 3fff 	cmp.w	r3, #4294967295
  409df4:	d102      	bne.n	409dfc <f_mkdir+0xb4>
  409df6:	2301      	movs	r3, #1
  409df8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (res == FR_OK)					/* Flush FAT */
  409dfc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409e00:	2b00      	cmp	r3, #0
  409e02:	d108      	bne.n	409e16 <f_mkdir+0xce>
				res = move_window(dj.fs, 0);
  409e04:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409e08:	4618      	mov	r0, r3
  409e0a:	2100      	movs	r1, #0
  409e0c:	4b83      	ldr	r3, [pc, #524]	; (40a01c <f_mkdir+0x2d4>)
  409e0e:	4798      	blx	r3
  409e10:	4603      	mov	r3, r0
  409e12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (res == FR_OK) {					/* Initialize the new directory table */
  409e16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409e1a:	2b00      	cmp	r3, #0
  409e1c:	f040 80de 	bne.w	409fdc <f_mkdir+0x294>
				dsc = clust2sect(dj.fs, dcl);
  409e20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409e24:	4618      	mov	r0, r3
  409e26:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
  409e2a:	4b7d      	ldr	r3, [pc, #500]	; (40a020 <f_mkdir+0x2d8>)
  409e2c:	4798      	blx	r3
  409e2e:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				dir = dj.fs->win;
  409e32:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409e36:	3330      	adds	r3, #48	; 0x30
  409e38:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
				mem_set(dir, 0, SS(dj.fs));
  409e3c:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
  409e40:	2100      	movs	r1, #0
  409e42:	f44f 7200 	mov.w	r2, #512	; 0x200
  409e46:	4b77      	ldr	r3, [pc, #476]	; (40a024 <f_mkdir+0x2dc>)
  409e48:	4798      	blx	r3
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
  409e4a:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
  409e4e:	2120      	movs	r1, #32
  409e50:	220b      	movs	r2, #11
  409e52:	4b74      	ldr	r3, [pc, #464]	; (40a024 <f_mkdir+0x2dc>)
  409e54:	4798      	blx	r3
				dir[DIR_Name] = '.';
  409e56:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e5a:	222e      	movs	r2, #46	; 0x2e
  409e5c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = AM_DIR;
  409e5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e62:	330b      	adds	r3, #11
  409e64:	2210      	movs	r2, #16
  409e66:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_WrtTime, tim);
  409e68:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e6c:	3316      	adds	r3, #22
  409e6e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  409e72:	b2d2      	uxtb	r2, r2
  409e74:	701a      	strb	r2, [r3, #0]
  409e76:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e7a:	3317      	adds	r3, #23
  409e7c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  409e80:	b292      	uxth	r2, r2
  409e82:	0a12      	lsrs	r2, r2, #8
  409e84:	b292      	uxth	r2, r2
  409e86:	b2d2      	uxtb	r2, r2
  409e88:	701a      	strb	r2, [r3, #0]
  409e8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e8e:	3318      	adds	r3, #24
  409e90:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  409e94:	0c12      	lsrs	r2, r2, #16
  409e96:	b2d2      	uxtb	r2, r2
  409e98:	701a      	strb	r2, [r3, #0]
  409e9a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409e9e:	3319      	adds	r3, #25
  409ea0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  409ea4:	0e12      	lsrs	r2, r2, #24
  409ea6:	b2d2      	uxtb	r2, r2
  409ea8:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, dcl);
  409eaa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409eae:	331a      	adds	r3, #26
  409eb0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  409eb4:	b2d2      	uxtb	r2, r2
  409eb6:	701a      	strb	r2, [r3, #0]
  409eb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409ebc:	331b      	adds	r3, #27
  409ebe:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  409ec2:	b292      	uxth	r2, r2
  409ec4:	0a12      	lsrs	r2, r2, #8
  409ec6:	b292      	uxth	r2, r2
  409ec8:	b2d2      	uxtb	r2, r2
  409eca:	701a      	strb	r2, [r3, #0]
  409ecc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409ed0:	3314      	adds	r3, #20
  409ed2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  409ed6:	0c12      	lsrs	r2, r2, #16
  409ed8:	b2d2      	uxtb	r2, r2
  409eda:	701a      	strb	r2, [r3, #0]
  409edc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409ee0:	3315      	adds	r3, #21
  409ee2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  409ee6:	0c12      	lsrs	r2, r2, #16
  409ee8:	b292      	uxth	r2, r2
  409eea:	0a12      	lsrs	r2, r2, #8
  409eec:	b292      	uxth	r2, r2
  409eee:	b2d2      	uxtb	r2, r2
  409ef0:	701a      	strb	r2, [r3, #0]
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
  409ef2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409ef6:	3320      	adds	r3, #32
  409ef8:	4618      	mov	r0, r3
  409efa:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
  409efe:	2220      	movs	r2, #32
  409f00:	4b49      	ldr	r3, [pc, #292]	; (40a028 <f_mkdir+0x2e0>)
  409f02:	4798      	blx	r3
				dir[33] = '.'; pcl = dj.sclust;
  409f04:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409f08:	3321      	adds	r3, #33	; 0x21
  409f0a:	222e      	movs	r2, #46	; 0x2e
  409f0c:	701a      	strb	r2, [r3, #0]
  409f0e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  409f12:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  409f16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409f1a:	781b      	ldrb	r3, [r3, #0]
  409f1c:	2b03      	cmp	r3, #3
  409f1e:	d109      	bne.n	409f34 <f_mkdir+0x1ec>
  409f20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  409f26:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
  409f2a:	429a      	cmp	r2, r3
  409f2c:	d102      	bne.n	409f34 <f_mkdir+0x1ec>
					pcl = 0;
  409f2e:	2300      	movs	r3, #0
  409f30:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				ST_CLUST(dir+SZ_DIR, pcl);
  409f34:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409f38:	333a      	adds	r3, #58	; 0x3a
  409f3a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  409f3e:	b2d2      	uxtb	r2, r2
  409f40:	701a      	strb	r2, [r3, #0]
  409f42:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409f46:	333b      	adds	r3, #59	; 0x3b
  409f48:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  409f4c:	b292      	uxth	r2, r2
  409f4e:	0a12      	lsrs	r2, r2, #8
  409f50:	b292      	uxth	r2, r2
  409f52:	b2d2      	uxtb	r2, r2
  409f54:	701a      	strb	r2, [r3, #0]
  409f56:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409f5a:	3334      	adds	r3, #52	; 0x34
  409f5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  409f60:	0c12      	lsrs	r2, r2, #16
  409f62:	b2d2      	uxtb	r2, r2
  409f64:	701a      	strb	r2, [r3, #0]
  409f66:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  409f6a:	3335      	adds	r3, #53	; 0x35
  409f6c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  409f70:	0c12      	lsrs	r2, r2, #16
  409f72:	b292      	uxth	r2, r2
  409f74:	0a12      	lsrs	r2, r2, #8
  409f76:	b292      	uxth	r2, r2
  409f78:	b2d2      	uxtb	r2, r2
  409f7a:	701a      	strb	r2, [r3, #0]
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  409f7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409f80:	789b      	ldrb	r3, [r3, #2]
  409f82:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
  409f86:	e025      	b.n	409fd4 <f_mkdir+0x28c>
					dj.fs->winsect = dsc++;
  409f88:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
  409f8c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  409f90:	1c59      	adds	r1, r3, #1
  409f92:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
  409f96:	62d3      	str	r3, [r2, #44]	; 0x2c
					dj.fs->wflag = 1;
  409f98:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409f9c:	2201      	movs	r2, #1
  409f9e:	711a      	strb	r2, [r3, #4]
					res = move_window(dj.fs, 0);
  409fa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  409fa4:	4618      	mov	r0, r3
  409fa6:	2100      	movs	r1, #0
  409fa8:	4b1c      	ldr	r3, [pc, #112]	; (40a01c <f_mkdir+0x2d4>)
  409faa:	4798      	blx	r3
  409fac:	4603      	mov	r3, r0
  409fae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res != FR_OK) break;
  409fb2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409fb6:	2b00      	cmp	r3, #0
  409fb8:	d000      	beq.n	409fbc <f_mkdir+0x274>
  409fba:	e00f      	b.n	409fdc <f_mkdir+0x294>
					mem_set(dir, 0, SS(dj.fs));
  409fbc:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
  409fc0:	2100      	movs	r1, #0
  409fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
  409fc6:	4b17      	ldr	r3, [pc, #92]	; (40a024 <f_mkdir+0x2dc>)
  409fc8:	4798      	blx	r3
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  409fca:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
  409fce:	3b01      	subs	r3, #1
  409fd0:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
  409fd4:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
  409fd8:	2b00      	cmp	r3, #0
  409fda:	d1d5      	bne.n	409f88 <f_mkdir+0x240>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
  409fdc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409fe0:	2b00      	cmp	r3, #0
  409fe2:	d107      	bne.n	409ff4 <f_mkdir+0x2ac>
  409fe4:	f507 7305 	add.w	r3, r7, #532	; 0x214
  409fe8:	4618      	mov	r0, r3
  409fea:	4b10      	ldr	r3, [pc, #64]	; (40a02c <f_mkdir+0x2e4>)
  409fec:	4798      	blx	r3
  409fee:	4603      	mov	r3, r0
  409ff0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			if (res != FR_OK) {
  409ff4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  409ff8:	2b00      	cmp	r3, #0
  409ffa:	d01b      	beq.n	40a034 <f_mkdir+0x2ec>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
  409ffc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  40a000:	4618      	mov	r0, r3
  40a002:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
  40a006:	4b0a      	ldr	r3, [pc, #40]	; (40a030 <f_mkdir+0x2e8>)
  40a008:	4798      	blx	r3
  40a00a:	e06d      	b.n	40a0e8 <f_mkdir+0x3a0>
  40a00c:	004063bd 	.word	0x004063bd
  40a010:	0040831d 	.word	0x0040831d
  40a014:	0040815d 	.word	0x0040815d
  40a018:	00406ebd 	.word	0x00406ebd
  40a01c:	0040686d 	.word	0x0040686d
  40a020:	00406a8d 	.word	0x00406a8d
  40a024:	00406461 	.word	0x00406461
  40a028:	00406425 	.word	0x00406425
  40a02c:	004078e9 	.word	0x004078e9
  40a030:	00406e19 	.word	0x00406e19
			} else {
				dir = dj.dir;
  40a034:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
  40a038:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
  40a03c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a040:	330b      	adds	r3, #11
  40a042:	2210      	movs	r2, #16
  40a044:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
  40a046:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a04a:	3316      	adds	r3, #22
  40a04c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  40a050:	b2d2      	uxtb	r2, r2
  40a052:	701a      	strb	r2, [r3, #0]
  40a054:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a058:	3317      	adds	r3, #23
  40a05a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  40a05e:	b292      	uxth	r2, r2
  40a060:	0a12      	lsrs	r2, r2, #8
  40a062:	b292      	uxth	r2, r2
  40a064:	b2d2      	uxtb	r2, r2
  40a066:	701a      	strb	r2, [r3, #0]
  40a068:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a06c:	3318      	adds	r3, #24
  40a06e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  40a072:	0c12      	lsrs	r2, r2, #16
  40a074:	b2d2      	uxtb	r2, r2
  40a076:	701a      	strb	r2, [r3, #0]
  40a078:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a07c:	3319      	adds	r3, #25
  40a07e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  40a082:	0e12      	lsrs	r2, r2, #24
  40a084:	b2d2      	uxtb	r2, r2
  40a086:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, dcl);					/* Table start cluster */
  40a088:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a08c:	331a      	adds	r3, #26
  40a08e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  40a092:	b2d2      	uxtb	r2, r2
  40a094:	701a      	strb	r2, [r3, #0]
  40a096:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a09a:	331b      	adds	r3, #27
  40a09c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  40a0a0:	b292      	uxth	r2, r2
  40a0a2:	0a12      	lsrs	r2, r2, #8
  40a0a4:	b292      	uxth	r2, r2
  40a0a6:	b2d2      	uxtb	r2, r2
  40a0a8:	701a      	strb	r2, [r3, #0]
  40a0aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a0ae:	3314      	adds	r3, #20
  40a0b0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  40a0b4:	0c12      	lsrs	r2, r2, #16
  40a0b6:	b2d2      	uxtb	r2, r2
  40a0b8:	701a      	strb	r2, [r3, #0]
  40a0ba:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
  40a0be:	3315      	adds	r3, #21
  40a0c0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
  40a0c4:	0c12      	lsrs	r2, r2, #16
  40a0c6:	b292      	uxth	r2, r2
  40a0c8:	0a12      	lsrs	r2, r2, #8
  40a0ca:	b292      	uxth	r2, r2
  40a0cc:	b2d2      	uxtb	r2, r2
  40a0ce:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
  40a0d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  40a0d4:	2201      	movs	r2, #1
  40a0d6:	711a      	strb	r2, [r3, #4]
				res = sync(dj.fs);
  40a0d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
  40a0dc:	4618      	mov	r0, r3
  40a0de:	4b06      	ldr	r3, [pc, #24]	; (40a0f8 <f_mkdir+0x3b0>)
  40a0e0:	4798      	blx	r3
  40a0e2:	4603      	mov	r3, r0
  40a0e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
  40a0e8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  40a0ec:	4618      	mov	r0, r3
  40a0ee:	f507 7714 	add.w	r7, r7, #592	; 0x250
  40a0f2:	46bd      	mov	sp, r7
  40a0f4:	bd80      	pop	{r7, pc}
  40a0f6:	bf00      	nop
  40a0f8:	00406931 	.word	0x00406931

0040a0fc <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
  40a0fc:	b580      	push	{r7, lr}
  40a0fe:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  40a102:	af00      	add	r7, sp, #0
  40a104:	1d3b      	adds	r3, r7, #4
  40a106:	6018      	str	r0, [r3, #0]
  40a108:	463b      	mov	r3, r7
  40a10a:	6019      	str	r1, [r3, #0]
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
  40a10c:	1d3a      	adds	r2, r7, #4
  40a10e:	f507 7314 	add.w	r3, r7, #592	; 0x250
  40a112:	4610      	mov	r0, r2
  40a114:	4619      	mov	r1, r3
  40a116:	2201      	movs	r2, #1
  40a118:	4b9d      	ldr	r3, [pc, #628]	; (40a390 <f_rename+0x294>)
  40a11a:	4798      	blx	r3
  40a11c:	4603      	mov	r3, r0
  40a11e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	if (res == FR_OK) {
  40a122:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a126:	2b00      	cmp	r3, #0
  40a128:	f040 812a 	bne.w	40a380 <f_rename+0x284>
		djn.fs = djo.fs;
  40a12c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
  40a130:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		INIT_BUF(djo);
  40a134:	f507 7302 	add.w	r3, r7, #520	; 0x208
  40a138:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  40a13c:	f107 0308 	add.w	r3, r7, #8
  40a140:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		res = follow_path(&djo, path_old);		/* Check old object */
  40a144:	1d3b      	adds	r3, r7, #4
  40a146:	681b      	ldr	r3, [r3, #0]
  40a148:	f507 7214 	add.w	r2, r7, #592	; 0x250
  40a14c:	4610      	mov	r0, r2
  40a14e:	4619      	mov	r1, r3
  40a150:	4b90      	ldr	r3, [pc, #576]	; (40a394 <f_rename+0x298>)
  40a152:	4798      	blx	r3
  40a154:	4603      	mov	r3, r0
  40a156:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
  40a15a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a15e:	2b00      	cmp	r3, #0
  40a160:	d108      	bne.n	40a174 <f_rename+0x78>
  40a162:	f507 7314 	add.w	r3, r7, #592	; 0x250
  40a166:	4618      	mov	r0, r3
  40a168:	2102      	movs	r1, #2
  40a16a:	4b8b      	ldr	r3, [pc, #556]	; (40a398 <f_rename+0x29c>)
  40a16c:	4798      	blx	r3
  40a16e:	4603      	mov	r3, r0
  40a170:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {						/* Old object is found */
  40a174:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a178:	2b00      	cmp	r3, #0
  40a17a:	f040 8101 	bne.w	40a380 <f_rename+0x284>
			if (!djo.dir) {						/* Is root dir? */
  40a17e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
  40a182:	2b00      	cmp	r3, #0
  40a184:	d103      	bne.n	40a18e <f_rename+0x92>
				res = FR_NO_FILE;
  40a186:	2304      	movs	r3, #4
  40a188:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
  40a18c:	e0f8      	b.n	40a380 <f_rename+0x284>
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
  40a18e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
  40a192:	330b      	adds	r3, #11
  40a194:	f507 7205 	add.w	r2, r7, #532	; 0x214
  40a198:	4610      	mov	r0, r2
  40a19a:	4619      	mov	r1, r3
  40a19c:	2215      	movs	r2, #21
  40a19e:	4b7f      	ldr	r3, [pc, #508]	; (40a39c <f_rename+0x2a0>)
  40a1a0:	4798      	blx	r3
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
  40a1a2:	f507 720b 	add.w	r2, r7, #556	; 0x22c
  40a1a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
  40a1aa:	4610      	mov	r0, r2
  40a1ac:	4619      	mov	r1, r3
  40a1ae:	2224      	movs	r2, #36	; 0x24
  40a1b0:	4b7a      	ldr	r3, [pc, #488]	; (40a39c <f_rename+0x2a0>)
  40a1b2:	4798      	blx	r3
				res = follow_path(&djn, path_new);
  40a1b4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
  40a1b8:	463b      	mov	r3, r7
  40a1ba:	4610      	mov	r0, r2
  40a1bc:	6819      	ldr	r1, [r3, #0]
  40a1be:	4b75      	ldr	r3, [pc, #468]	; (40a394 <f_rename+0x298>)
  40a1c0:	4798      	blx	r3
  40a1c2:	4603      	mov	r3, r0
  40a1c4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
  40a1c8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a1cc:	2b00      	cmp	r3, #0
  40a1ce:	d102      	bne.n	40a1d6 <f_rename+0xda>
  40a1d0:	2308      	movs	r3, #8
  40a1d2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
  40a1d6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a1da:	2b04      	cmp	r3, #4
  40a1dc:	f040 80d0 	bne.w	40a380 <f_rename+0x284>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
  40a1e0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  40a1e4:	4618      	mov	r0, r3
  40a1e6:	4b6e      	ldr	r3, [pc, #440]	; (40a3a0 <f_rename+0x2a4>)
  40a1e8:	4798      	blx	r3
  40a1ea:	4603      	mov	r3, r0
  40a1ec:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
					if (res == FR_OK) {
  40a1f0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a1f4:	2b00      	cmp	r3, #0
  40a1f6:	f040 80c3 	bne.w	40a380 <f_rename+0x284>
						dir = djn.dir;					/* Copy object information except for name */
  40a1fa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  40a1fe:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
						mem_cpy(dir+13, buf+2, 19);
  40a202:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a206:	f103 020d 	add.w	r2, r3, #13
  40a20a:	f507 7305 	add.w	r3, r7, #532	; 0x214
  40a20e:	3302      	adds	r3, #2
  40a210:	4610      	mov	r0, r2
  40a212:	4619      	mov	r1, r3
  40a214:	2213      	movs	r2, #19
  40a216:	4b61      	ldr	r3, [pc, #388]	; (40a39c <f_rename+0x2a0>)
  40a218:	4798      	blx	r3
						dir[DIR_Attr] = buf[0] | AM_ARC;
  40a21a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a21e:	330b      	adds	r3, #11
  40a220:	f897 2214 	ldrb.w	r2, [r7, #532]	; 0x214
  40a224:	f042 0220 	orr.w	r2, r2, #32
  40a228:	b2d2      	uxtb	r2, r2
  40a22a:	701a      	strb	r2, [r3, #0]
						djo.fs->wflag = 1;
  40a22c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
  40a230:	2201      	movs	r2, #1
  40a232:	711a      	strb	r2, [r3, #4]
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
  40a234:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
  40a238:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
  40a23c:	429a      	cmp	r2, r3
  40a23e:	f000 8087 	beq.w	40a350 <f_rename+0x254>
  40a242:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a246:	330b      	adds	r3, #11
  40a248:	781b      	ldrb	r3, [r3, #0]
  40a24a:	f003 0310 	and.w	r3, r3, #16
  40a24e:	2b00      	cmp	r3, #0
  40a250:	d07e      	beq.n	40a350 <f_rename+0x254>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
  40a252:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
  40a256:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a25a:	3315      	adds	r3, #21
  40a25c:	781b      	ldrb	r3, [r3, #0]
  40a25e:	021b      	lsls	r3, r3, #8
  40a260:	b299      	uxth	r1, r3
  40a262:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a266:	3314      	adds	r3, #20
  40a268:	781b      	ldrb	r3, [r3, #0]
  40a26a:	430b      	orrs	r3, r1
  40a26c:	b29b      	uxth	r3, r3
  40a26e:	b29b      	uxth	r3, r3
  40a270:	0419      	lsls	r1, r3, #16
  40a272:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a276:	331b      	adds	r3, #27
  40a278:	781b      	ldrb	r3, [r3, #0]
  40a27a:	021b      	lsls	r3, r3, #8
  40a27c:	b298      	uxth	r0, r3
  40a27e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a282:	331a      	adds	r3, #26
  40a284:	781b      	ldrb	r3, [r3, #0]
  40a286:	4303      	orrs	r3, r0
  40a288:	b29b      	uxth	r3, r3
  40a28a:	b29b      	uxth	r3, r3
  40a28c:	430b      	orrs	r3, r1
  40a28e:	4610      	mov	r0, r2
  40a290:	4619      	mov	r1, r3
  40a292:	4b44      	ldr	r3, [pc, #272]	; (40a3a4 <f_rename+0x2a8>)
  40a294:	4798      	blx	r3
  40a296:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
							if (!dw) {
  40a29a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
  40a29e:	2b00      	cmp	r3, #0
  40a2a0:	d103      	bne.n	40a2aa <f_rename+0x1ae>
								res = FR_INT_ERR;
  40a2a2:	2302      	movs	r3, #2
  40a2a4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
  40a2a8:	e052      	b.n	40a350 <f_rename+0x254>
							} else {
								res = move_window(djn.fs, dw);
  40a2aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40a2ae:	4618      	mov	r0, r3
  40a2b0:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
  40a2b4:	4b3c      	ldr	r3, [pc, #240]	; (40a3a8 <f_rename+0x2ac>)
  40a2b6:	4798      	blx	r3
  40a2b8:	4603      	mov	r3, r0
  40a2ba:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
  40a2be:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40a2c2:	3350      	adds	r3, #80	; 0x50
  40a2c4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
								if (res == FR_OK && dir[1] == '.') {
  40a2c8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a2cc:	2b00      	cmp	r3, #0
  40a2ce:	d13f      	bne.n	40a350 <f_rename+0x254>
  40a2d0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a2d4:	3301      	adds	r3, #1
  40a2d6:	781b      	ldrb	r3, [r3, #0]
  40a2d8:	2b2e      	cmp	r3, #46	; 0x2e
  40a2da:	d139      	bne.n	40a350 <f_rename+0x254>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
  40a2dc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40a2e0:	781b      	ldrb	r3, [r3, #0]
  40a2e2:	2b03      	cmp	r3, #3
  40a2e4:	d106      	bne.n	40a2f4 <f_rename+0x1f8>
  40a2e6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
  40a2ea:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40a2f0:	429a      	cmp	r2, r3
  40a2f2:	d002      	beq.n	40a2fa <f_rename+0x1fe>
  40a2f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
  40a2f8:	e000      	b.n	40a2fc <f_rename+0x200>
  40a2fa:	2300      	movs	r3, #0
  40a2fc:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
									ST_CLUST(dir, dw);
  40a300:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a304:	331a      	adds	r3, #26
  40a306:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
  40a30a:	b2d2      	uxtb	r2, r2
  40a30c:	701a      	strb	r2, [r3, #0]
  40a30e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a312:	331b      	adds	r3, #27
  40a314:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
  40a318:	b292      	uxth	r2, r2
  40a31a:	0a12      	lsrs	r2, r2, #8
  40a31c:	b292      	uxth	r2, r2
  40a31e:	b2d2      	uxtb	r2, r2
  40a320:	701a      	strb	r2, [r3, #0]
  40a322:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a326:	3314      	adds	r3, #20
  40a328:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
  40a32c:	0c12      	lsrs	r2, r2, #16
  40a32e:	b2d2      	uxtb	r2, r2
  40a330:	701a      	strb	r2, [r3, #0]
  40a332:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
  40a336:	3315      	adds	r3, #21
  40a338:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
  40a33c:	0c12      	lsrs	r2, r2, #16
  40a33e:	b292      	uxth	r2, r2
  40a340:	0a12      	lsrs	r2, r2, #8
  40a342:	b292      	uxth	r2, r2
  40a344:	b2d2      	uxtb	r2, r2
  40a346:	701a      	strb	r2, [r3, #0]
									djn.fs->wflag = 1;
  40a348:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
  40a34c:	2201      	movs	r2, #1
  40a34e:	711a      	strb	r2, [r3, #4]
								}
							}
						}
						if (res == FR_OK) {
  40a350:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a354:	2b00      	cmp	r3, #0
  40a356:	d113      	bne.n	40a380 <f_rename+0x284>
							res = dir_remove(&djo);		/* Remove old entry */
  40a358:	f507 7314 	add.w	r3, r7, #592	; 0x250
  40a35c:	4618      	mov	r0, r3
  40a35e:	4b13      	ldr	r3, [pc, #76]	; (40a3ac <f_rename+0x2b0>)
  40a360:	4798      	blx	r3
  40a362:	4603      	mov	r3, r0
  40a364:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK)
  40a368:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
  40a36c:	2b00      	cmp	r3, #0
  40a36e:	d107      	bne.n	40a380 <f_rename+0x284>
								res = sync(djo.fs);
  40a370:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
  40a374:	4618      	mov	r0, r3
  40a376:	4b0e      	ldr	r3, [pc, #56]	; (40a3b0 <f_rename+0x2b4>)
  40a378:	4798      	blx	r3
  40a37a:	4603      	mov	r3, r0
  40a37c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
  40a380:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
  40a384:	4618      	mov	r0, r3
  40a386:	f507 7720 	add.w	r7, r7, #640	; 0x280
  40a38a:	46bd      	mov	sp, r7
  40a38c:	bd80      	pop	{r7, pc}
  40a38e:	bf00      	nop
  40a390:	0040831d 	.word	0x0040831d
  40a394:	0040815d 	.word	0x0040815d
  40a398:	0040651d 	.word	0x0040651d
  40a39c:	00406425 	.word	0x00406425
  40a3a0:	004078e9 	.word	0x004078e9
  40a3a4:	00406a8d 	.word	0x00406a8d
  40a3a8:	0040686d 	.word	0x0040686d
  40a3ac:	00407b79 	.word	0x00407b79
  40a3b0:	00406931 	.word	0x00406931

0040a3b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  40a3b4:	b480      	push	{r7}
  40a3b6:	b085      	sub	sp, #20
  40a3b8:	af00      	add	r7, sp, #0
  40a3ba:	4603      	mov	r3, r0
  40a3bc:	6039      	str	r1, [r7, #0]
  40a3be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  40a3c0:	88fb      	ldrh	r3, [r7, #6]
  40a3c2:	2b7f      	cmp	r3, #127	; 0x7f
  40a3c4:	d802      	bhi.n	40a3cc <ff_convert+0x18>
		c = src;
  40a3c6:	88fb      	ldrh	r3, [r7, #6]
  40a3c8:	81fb      	strh	r3, [r7, #14]
  40a3ca:	e025      	b.n	40a418 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
  40a3cc:	683b      	ldr	r3, [r7, #0]
  40a3ce:	2b00      	cmp	r3, #0
  40a3d0:	d00c      	beq.n	40a3ec <ff_convert+0x38>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40a3d2:	88fb      	ldrh	r3, [r7, #6]
  40a3d4:	2bff      	cmp	r3, #255	; 0xff
  40a3d6:	d806      	bhi.n	40a3e6 <ff_convert+0x32>
  40a3d8:	88fb      	ldrh	r3, [r7, #6]
  40a3da:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
  40a3de:	4b12      	ldr	r3, [pc, #72]	; (40a428 <ff_convert+0x74>)
  40a3e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a3e4:	e000      	b.n	40a3e8 <ff_convert+0x34>
  40a3e6:	2300      	movs	r3, #0
  40a3e8:	81fb      	strh	r3, [r7, #14]
  40a3ea:	e015      	b.n	40a418 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  40a3ec:	2300      	movs	r3, #0
  40a3ee:	81fb      	strh	r3, [r7, #14]
  40a3f0:	e00a      	b.n	40a408 <ff_convert+0x54>
				if (src == Tbl[c]) break;
  40a3f2:	89fa      	ldrh	r2, [r7, #14]
  40a3f4:	4b0c      	ldr	r3, [pc, #48]	; (40a428 <ff_convert+0x74>)
  40a3f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a3fa:	88fa      	ldrh	r2, [r7, #6]
  40a3fc:	429a      	cmp	r2, r3
  40a3fe:	d100      	bne.n	40a402 <ff_convert+0x4e>
  40a400:	e005      	b.n	40a40e <ff_convert+0x5a>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  40a402:	89fb      	ldrh	r3, [r7, #14]
  40a404:	3301      	adds	r3, #1
  40a406:	81fb      	strh	r3, [r7, #14]
  40a408:	89fb      	ldrh	r3, [r7, #14]
  40a40a:	2b7f      	cmp	r3, #127	; 0x7f
  40a40c:	d9f1      	bls.n	40a3f2 <ff_convert+0x3e>
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
  40a40e:	89fb      	ldrh	r3, [r7, #14]
  40a410:	3380      	adds	r3, #128	; 0x80
  40a412:	b29b      	uxth	r3, r3
  40a414:	b2db      	uxtb	r3, r3
  40a416:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
  40a418:	89fb      	ldrh	r3, [r7, #14]
}
  40a41a:	4618      	mov	r0, r3
  40a41c:	3714      	adds	r7, #20
  40a41e:	46bd      	mov	sp, r7
  40a420:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a424:	4770      	bx	lr
  40a426:	bf00      	nop
  40a428:	0041cf74 	.word	0x0041cf74

0040a42c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
  40a42c:	b480      	push	{r7}
  40a42e:	b085      	sub	sp, #20
  40a430:	af00      	add	r7, sp, #0
  40a432:	4603      	mov	r3, r0
  40a434:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40a436:	2300      	movs	r3, #0
  40a438:	60fb      	str	r3, [r7, #12]
  40a43a:	e002      	b.n	40a442 <ff_wtoupper+0x16>
  40a43c:	68fb      	ldr	r3, [r7, #12]
  40a43e:	3301      	adds	r3, #1
  40a440:	60fb      	str	r3, [r7, #12]
  40a442:	4b0f      	ldr	r3, [pc, #60]	; (40a480 <ff_wtoupper+0x54>)
  40a444:	68fa      	ldr	r2, [r7, #12]
  40a446:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a44a:	2b00      	cmp	r3, #0
  40a44c:	d006      	beq.n	40a45c <ff_wtoupper+0x30>
  40a44e:	4b0c      	ldr	r3, [pc, #48]	; (40a480 <ff_wtoupper+0x54>)
  40a450:	68fa      	ldr	r2, [r7, #12]
  40a452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a456:	88fa      	ldrh	r2, [r7, #6]
  40a458:	429a      	cmp	r2, r3
  40a45a:	d1ef      	bne.n	40a43c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40a45c:	4b08      	ldr	r3, [pc, #32]	; (40a480 <ff_wtoupper+0x54>)
  40a45e:	68fa      	ldr	r2, [r7, #12]
  40a460:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a464:	2b00      	cmp	r3, #0
  40a466:	d004      	beq.n	40a472 <ff_wtoupper+0x46>
  40a468:	4b06      	ldr	r3, [pc, #24]	; (40a484 <ff_wtoupper+0x58>)
  40a46a:	68fa      	ldr	r2, [r7, #12]
  40a46c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40a470:	e000      	b.n	40a474 <ff_wtoupper+0x48>
  40a472:	88fb      	ldrh	r3, [r7, #6]
}
  40a474:	4618      	mov	r0, r3
  40a476:	3714      	adds	r7, #20
  40a478:	46bd      	mov	sp, r7
  40a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a47e:	4770      	bx	lr
  40a480:	0041d074 	.word	0x0041d074
  40a484:	0041d254 	.word	0x0041d254

0040a488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  40a488:	b480      	push	{r7}
  40a48a:	b083      	sub	sp, #12
  40a48c:	af00      	add	r7, sp, #0
  40a48e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  40a490:	687b      	ldr	r3, [r7, #4]
  40a492:	f103 0208 	add.w	r2, r3, #8
  40a496:	687b      	ldr	r3, [r7, #4]
  40a498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40a49a:	687b      	ldr	r3, [r7, #4]
  40a49c:	f04f 32ff 	mov.w	r2, #4294967295
  40a4a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40a4a2:	687b      	ldr	r3, [r7, #4]
  40a4a4:	f103 0208 	add.w	r2, r3, #8
  40a4a8:	687b      	ldr	r3, [r7, #4]
  40a4aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  40a4ac:	687b      	ldr	r3, [r7, #4]
  40a4ae:	f103 0208 	add.w	r2, r3, #8
  40a4b2:	687b      	ldr	r3, [r7, #4]
  40a4b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40a4b6:	687b      	ldr	r3, [r7, #4]
  40a4b8:	2200      	movs	r2, #0
  40a4ba:	601a      	str	r2, [r3, #0]
}
  40a4bc:	370c      	adds	r7, #12
  40a4be:	46bd      	mov	sp, r7
  40a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a4c4:	4770      	bx	lr
  40a4c6:	bf00      	nop

0040a4c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  40a4c8:	b480      	push	{r7}
  40a4ca:	b083      	sub	sp, #12
  40a4cc:	af00      	add	r7, sp, #0
  40a4ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40a4d0:	687b      	ldr	r3, [r7, #4]
  40a4d2:	2200      	movs	r2, #0
  40a4d4:	611a      	str	r2, [r3, #16]
}
  40a4d6:	370c      	adds	r7, #12
  40a4d8:	46bd      	mov	sp, r7
  40a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a4de:	4770      	bx	lr

0040a4e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40a4e0:	b480      	push	{r7}
  40a4e2:	b085      	sub	sp, #20
  40a4e4:	af00      	add	r7, sp, #0
  40a4e6:	6078      	str	r0, [r7, #4]
  40a4e8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40a4ea:	687b      	ldr	r3, [r7, #4]
  40a4ec:	685b      	ldr	r3, [r3, #4]
  40a4ee:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40a4f0:	68fb      	ldr	r3, [r7, #12]
  40a4f2:	685a      	ldr	r2, [r3, #4]
  40a4f4:	683b      	ldr	r3, [r7, #0]
  40a4f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  40a4f8:	687b      	ldr	r3, [r7, #4]
  40a4fa:	685a      	ldr	r2, [r3, #4]
  40a4fc:	683b      	ldr	r3, [r7, #0]
  40a4fe:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40a500:	68fb      	ldr	r3, [r7, #12]
  40a502:	685b      	ldr	r3, [r3, #4]
  40a504:	683a      	ldr	r2, [r7, #0]
  40a506:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  40a508:	68fb      	ldr	r3, [r7, #12]
  40a50a:	683a      	ldr	r2, [r7, #0]
  40a50c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  40a50e:	687b      	ldr	r3, [r7, #4]
  40a510:	683a      	ldr	r2, [r7, #0]
  40a512:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40a514:	683b      	ldr	r3, [r7, #0]
  40a516:	687a      	ldr	r2, [r7, #4]
  40a518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40a51a:	687b      	ldr	r3, [r7, #4]
  40a51c:	681b      	ldr	r3, [r3, #0]
  40a51e:	1c5a      	adds	r2, r3, #1
  40a520:	687b      	ldr	r3, [r7, #4]
  40a522:	601a      	str	r2, [r3, #0]
}
  40a524:	3714      	adds	r7, #20
  40a526:	46bd      	mov	sp, r7
  40a528:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a52c:	4770      	bx	lr
  40a52e:	bf00      	nop

0040a530 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  40a530:	b480      	push	{r7}
  40a532:	b085      	sub	sp, #20
  40a534:	af00      	add	r7, sp, #0
  40a536:	6078      	str	r0, [r7, #4]
  40a538:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40a53a:	683b      	ldr	r3, [r7, #0]
  40a53c:	681b      	ldr	r3, [r3, #0]
  40a53e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40a540:	68bb      	ldr	r3, [r7, #8]
  40a542:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a546:	d103      	bne.n	40a550 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40a548:	687b      	ldr	r3, [r7, #4]
  40a54a:	691b      	ldr	r3, [r3, #16]
  40a54c:	60fb      	str	r3, [r7, #12]
  40a54e:	e00c      	b.n	40a56a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  40a550:	687b      	ldr	r3, [r7, #4]
  40a552:	3308      	adds	r3, #8
  40a554:	60fb      	str	r3, [r7, #12]
  40a556:	e002      	b.n	40a55e <vListInsert+0x2e>
  40a558:	68fb      	ldr	r3, [r7, #12]
  40a55a:	685b      	ldr	r3, [r3, #4]
  40a55c:	60fb      	str	r3, [r7, #12]
  40a55e:	68fb      	ldr	r3, [r7, #12]
  40a560:	685b      	ldr	r3, [r3, #4]
  40a562:	681a      	ldr	r2, [r3, #0]
  40a564:	68bb      	ldr	r3, [r7, #8]
  40a566:	429a      	cmp	r2, r3
  40a568:	d9f6      	bls.n	40a558 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40a56a:	68fb      	ldr	r3, [r7, #12]
  40a56c:	685a      	ldr	r2, [r3, #4]
  40a56e:	683b      	ldr	r3, [r7, #0]
  40a570:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40a572:	683b      	ldr	r3, [r7, #0]
  40a574:	685b      	ldr	r3, [r3, #4]
  40a576:	683a      	ldr	r2, [r7, #0]
  40a578:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40a57a:	683b      	ldr	r3, [r7, #0]
  40a57c:	68fa      	ldr	r2, [r7, #12]
  40a57e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40a580:	68fb      	ldr	r3, [r7, #12]
  40a582:	683a      	ldr	r2, [r7, #0]
  40a584:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40a586:	683b      	ldr	r3, [r7, #0]
  40a588:	687a      	ldr	r2, [r7, #4]
  40a58a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40a58c:	687b      	ldr	r3, [r7, #4]
  40a58e:	681b      	ldr	r3, [r3, #0]
  40a590:	1c5a      	adds	r2, r3, #1
  40a592:	687b      	ldr	r3, [r7, #4]
  40a594:	601a      	str	r2, [r3, #0]
}
  40a596:	3714      	adds	r7, #20
  40a598:	46bd      	mov	sp, r7
  40a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a59e:	4770      	bx	lr

0040a5a0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
  40a5a0:	b480      	push	{r7}
  40a5a2:	b085      	sub	sp, #20
  40a5a4:	af00      	add	r7, sp, #0
  40a5a6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40a5a8:	687b      	ldr	r3, [r7, #4]
  40a5aa:	685b      	ldr	r3, [r3, #4]
  40a5ac:	687a      	ldr	r2, [r7, #4]
  40a5ae:	6892      	ldr	r2, [r2, #8]
  40a5b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40a5b2:	687b      	ldr	r3, [r7, #4]
  40a5b4:	689b      	ldr	r3, [r3, #8]
  40a5b6:	687a      	ldr	r2, [r7, #4]
  40a5b8:	6852      	ldr	r2, [r2, #4]
  40a5ba:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40a5bc:	687b      	ldr	r3, [r7, #4]
  40a5be:	691b      	ldr	r3, [r3, #16]
  40a5c0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40a5c2:	68fb      	ldr	r3, [r7, #12]
  40a5c4:	685a      	ldr	r2, [r3, #4]
  40a5c6:	687b      	ldr	r3, [r7, #4]
  40a5c8:	429a      	cmp	r2, r3
  40a5ca:	d103      	bne.n	40a5d4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40a5cc:	687b      	ldr	r3, [r7, #4]
  40a5ce:	689a      	ldr	r2, [r3, #8]
  40a5d0:	68fb      	ldr	r3, [r7, #12]
  40a5d2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  40a5d4:	687b      	ldr	r3, [r7, #4]
  40a5d6:	2200      	movs	r2, #0
  40a5d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40a5da:	68fb      	ldr	r3, [r7, #12]
  40a5dc:	681b      	ldr	r3, [r3, #0]
  40a5de:	1e5a      	subs	r2, r3, #1
  40a5e0:	68fb      	ldr	r3, [r7, #12]
  40a5e2:	601a      	str	r2, [r3, #0]
}
  40a5e4:	3714      	adds	r7, #20
  40a5e6:	46bd      	mov	sp, r7
  40a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a5ec:	4770      	bx	lr
  40a5ee:	bf00      	nop

0040a5f0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40a5f0:	b480      	push	{r7}
  40a5f2:	b083      	sub	sp, #12
  40a5f4:	af00      	add	r7, sp, #0
  40a5f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40a5f8:	687b      	ldr	r3, [r7, #4]
  40a5fa:	2b07      	cmp	r3, #7
  40a5fc:	d825      	bhi.n	40a64a <osc_get_rate+0x5a>
  40a5fe:	a201      	add	r2, pc, #4	; (adr r2, 40a604 <osc_get_rate+0x14>)
  40a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a604:	0040a625 	.word	0x0040a625
  40a608:	0040a62b 	.word	0x0040a62b
  40a60c:	0040a631 	.word	0x0040a631
  40a610:	0040a637 	.word	0x0040a637
  40a614:	0040a63b 	.word	0x0040a63b
  40a618:	0040a63f 	.word	0x0040a63f
  40a61c:	0040a643 	.word	0x0040a643
  40a620:	0040a647 	.word	0x0040a647
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40a624:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40a628:	e010      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40a62a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a62e:	e00d      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40a630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a634:	e00a      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40a636:	4b08      	ldr	r3, [pc, #32]	; (40a658 <osc_get_rate+0x68>)
  40a638:	e008      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40a63a:	4b08      	ldr	r3, [pc, #32]	; (40a65c <osc_get_rate+0x6c>)
  40a63c:	e006      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40a63e:	4b08      	ldr	r3, [pc, #32]	; (40a660 <osc_get_rate+0x70>)
  40a640:	e004      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40a642:	4b08      	ldr	r3, [pc, #32]	; (40a664 <osc_get_rate+0x74>)
  40a644:	e002      	b.n	40a64c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40a646:	4b07      	ldr	r3, [pc, #28]	; (40a664 <osc_get_rate+0x74>)
  40a648:	e000      	b.n	40a64c <osc_get_rate+0x5c>
	}

	return 0;
  40a64a:	2300      	movs	r3, #0
}
  40a64c:	4618      	mov	r0, r3
  40a64e:	370c      	adds	r7, #12
  40a650:	46bd      	mov	sp, r7
  40a652:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a656:	4770      	bx	lr
  40a658:	003d0900 	.word	0x003d0900
  40a65c:	007a1200 	.word	0x007a1200
  40a660:	00b71b00 	.word	0x00b71b00
  40a664:	00f42400 	.word	0x00f42400

0040a668 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40a668:	b580      	push	{r7, lr}
  40a66a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40a66c:	2006      	movs	r0, #6
  40a66e:	4b04      	ldr	r3, [pc, #16]	; (40a680 <sysclk_get_main_hz+0x18>)
  40a670:	4798      	blx	r3
  40a672:	4602      	mov	r2, r0
  40a674:	4613      	mov	r3, r2
  40a676:	011b      	lsls	r3, r3, #4
  40a678:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40a67a:	4618      	mov	r0, r3
  40a67c:	bd80      	pop	{r7, pc}
  40a67e:	bf00      	nop
  40a680:	0040a5f1 	.word	0x0040a5f1

0040a684 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40a684:	b580      	push	{r7, lr}
  40a686:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40a688:	4b02      	ldr	r3, [pc, #8]	; (40a694 <sysclk_get_cpu_hz+0x10>)
  40a68a:	4798      	blx	r3
  40a68c:	4603      	mov	r3, r0
  40a68e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40a690:	4618      	mov	r0, r3
  40a692:	bd80      	pop	{r7, pc}
  40a694:	0040a669 	.word	0x0040a669

0040a698 <pxPortInitialiseStack>:
/**
 * \brief See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack(portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters)
{
  40a698:	b480      	push	{r7}
  40a69a:	b085      	sub	sp, #20
  40a69c:	af00      	add	r7, sp, #0
  40a69e:	60f8      	str	r0, [r7, #12]
  40a6a0:	60b9      	str	r1, [r7, #8]
  40a6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--;  /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  40a6a4:	68fb      	ldr	r3, [r7, #12]
  40a6a6:	3b04      	subs	r3, #4
  40a6a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;  /* xPSR */
  40a6aa:	68fb      	ldr	r3, [r7, #12]
  40a6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40a6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40a6b2:	68fb      	ldr	r3, [r7, #12]
  40a6b4:	3b04      	subs	r3, #4
  40a6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pxCode;  /* PC */
  40a6b8:	68ba      	ldr	r2, [r7, #8]
  40a6ba:	68fb      	ldr	r3, [r7, #12]
  40a6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40a6be:	68fb      	ldr	r3, [r7, #12]
  40a6c0:	3b04      	subs	r3, #4
  40a6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;  /* LR */
  40a6c4:	68fb      	ldr	r3, [r7, #12]
  40a6c6:	2200      	movs	r2, #0
  40a6c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;  /* R12, R3, R2 and R1. */
  40a6ca:	68fb      	ldr	r3, [r7, #12]
  40a6cc:	3b14      	subs	r3, #20
  40a6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pvParameters;  /* R0 */
  40a6d0:	687a      	ldr	r2, [r7, #4]
  40a6d2:	68fb      	ldr	r3, [r7, #12]
  40a6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;  /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  40a6d6:	68fb      	ldr	r3, [r7, #12]
  40a6d8:	3b20      	subs	r3, #32
  40a6da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40a6dc:	68fb      	ldr	r3, [r7, #12]
}
  40a6de:	4618      	mov	r0, r3
  40a6e0:	3714      	adds	r7, #20
  40a6e2:	46bd      	mov	sp, r7
  40a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a6e8:	4770      	bx	lr
  40a6ea:	bf00      	nop

0040a6ec <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
  40a6ec:	4b06      	ldr	r3, [pc, #24]	; (40a708 <pxCurrentTCBConst2>)
  40a6ee:	6819      	ldr	r1, [r3, #0]
  40a6f0:	6808      	ldr	r0, [r1, #0]
  40a6f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a6f6:	f380 8809 	msr	PSP, r0
  40a6fa:	f04f 0000 	mov.w	r0, #0
  40a6fe:	f380 8811 	msr	BASEPRI, r0
  40a702:	f04e 0e0d 	orr.w	lr, lr, #13
  40a706:	4770      	bx	lr

0040a708 <pxCurrentTCBConst2>:
  40a708:	20003438 	.word	0x20003438

0040a70c <vPortStartFirstTask>:
/**
 * \brief Start schedule first task.
 */
void vPortStartFirstTask(void)
{
	__asm volatile (" ldr r0, =0xE000ED08   \n"  /* Use the NVIC offset register to locate the stack. */
  40a70c:	4802      	ldr	r0, [pc, #8]	; (40a718 <vPortStartFirstTask+0xc>)
  40a70e:	6800      	ldr	r0, [r0, #0]
  40a710:	6800      	ldr	r0, [r0, #0]
  40a712:	f380 8808 	msr	MSP, r0
  40a716:	df00      	svc	0
  40a718:	e000ed08 	.word	0xe000ed08

0040a71c <xPortStartScheduler>:

/**
 * \brief See header file for description.
 */
portBASE_TYPE xPortStartScheduler(void)
{
  40a71c:	b580      	push	{r7, lr}
  40a71e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
  40a720:	4b0a      	ldr	r3, [pc, #40]	; (40a74c <xPortStartScheduler+0x30>)
  40a722:	4a0a      	ldr	r2, [pc, #40]	; (40a74c <xPortStartScheduler+0x30>)
  40a724:	6812      	ldr	r2, [r2, #0]
  40a726:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
  40a72a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
  40a72c:	4b07      	ldr	r3, [pc, #28]	; (40a74c <xPortStartScheduler+0x30>)
  40a72e:	4a07      	ldr	r2, [pc, #28]	; (40a74c <xPortStartScheduler+0x30>)
  40a730:	6812      	ldr	r2, [r2, #0]
  40a732:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
  40a736:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
  40a738:	4b05      	ldr	r3, [pc, #20]	; (40a750 <xPortStartScheduler+0x34>)
  40a73a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40a73c:	4b05      	ldr	r3, [pc, #20]	; (40a754 <xPortStartScheduler+0x38>)
  40a73e:	2200      	movs	r2, #0
  40a740:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
  40a742:	4b05      	ldr	r3, [pc, #20]	; (40a758 <xPortStartScheduler+0x3c>)
  40a744:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40a746:	2300      	movs	r3, #0
}
  40a748:	4618      	mov	r0, r3
  40a74a:	bd80      	pop	{r7, pc}
  40a74c:	e000ed20 	.word	0xe000ed20
  40a750:	0040a835 	.word	0x0040a835
  40a754:	200001b0 	.word	0x200001b0
  40a758:	0040a70d 	.word	0x0040a70d

0040a75c <vPortYieldFromISR>:

/**
 * \brief Yield PendSV to request a context switch.
 */
void vPortYieldFromISR(void)
{
  40a75c:	b480      	push	{r7}
  40a75e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  40a760:	4b03      	ldr	r3, [pc, #12]	; (40a770 <vPortYieldFromISR+0x14>)
  40a762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40a766:	601a      	str	r2, [r3, #0]
}
  40a768:	46bd      	mov	sp, r7
  40a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a76e:	4770      	bx	lr
  40a770:	e000ed04 	.word	0xe000ed04

0040a774 <vPortEnterCritical>:

/**
 * \brief Enter Critical code.
 */
void vPortEnterCritical(void)
{
  40a774:	b480      	push	{r7}
  40a776:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  40a778:	f04f 0000 	mov.w	r0, #0
  40a77c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
  40a780:	4b04      	ldr	r3, [pc, #16]	; (40a794 <vPortEnterCritical+0x20>)
  40a782:	681b      	ldr	r3, [r3, #0]
  40a784:	1c5a      	adds	r2, r3, #1
  40a786:	4b03      	ldr	r3, [pc, #12]	; (40a794 <vPortEnterCritical+0x20>)
  40a788:	601a      	str	r2, [r3, #0]
}
  40a78a:	46bd      	mov	sp, r7
  40a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a790:	4770      	bx	lr
  40a792:	bf00      	nop
  40a794:	200001b0 	.word	0x200001b0

0040a798 <vPortExitCritical>:

/**
 * \brief Exit Critical code.
 */
void vPortExitCritical(void)
{
  40a798:	b480      	push	{r7}
  40a79a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  40a79c:	4b08      	ldr	r3, [pc, #32]	; (40a7c0 <vPortExitCritical+0x28>)
  40a79e:	681b      	ldr	r3, [r3, #0]
  40a7a0:	1e5a      	subs	r2, r3, #1
  40a7a2:	4b07      	ldr	r3, [pc, #28]	; (40a7c0 <vPortExitCritical+0x28>)
  40a7a4:	601a      	str	r2, [r3, #0]
	if (uxCriticalNesting == 0) {
  40a7a6:	4b06      	ldr	r3, [pc, #24]	; (40a7c0 <vPortExitCritical+0x28>)
  40a7a8:	681b      	ldr	r3, [r3, #0]
  40a7aa:	2b00      	cmp	r3, #0
  40a7ac:	d103      	bne.n	40a7b6 <vPortExitCritical+0x1e>
		portENABLE_INTERRUPTS();
  40a7ae:	f04f 0000 	mov.w	r0, #0
  40a7b2:	f380 8811 	msr	BASEPRI, r0
	}
}
  40a7b6:	46bd      	mov	sp, r7
  40a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a7bc:	4770      	bx	lr
  40a7be:	bf00      	nop
  40a7c0:	200001b0 	.word	0x200001b0

0040a7c4 <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
  40a7c4:	f3ef 8009 	mrs	r0, PSP
  40a7c8:	4b0c      	ldr	r3, [pc, #48]	; (40a7fc <pxCurrentTCBConst>)
  40a7ca:	681a      	ldr	r2, [r3, #0]
  40a7cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a7d0:	6010      	str	r0, [r2, #0]
  40a7d2:	e92d 4008 	stmdb	sp!, {r3, lr}
  40a7d6:	f04f 0000 	mov.w	r0, #0
  40a7da:	f380 8811 	msr	BASEPRI, r0
  40a7de:	f000 ff6b 	bl	40b6b8 <vTaskSwitchContext>
  40a7e2:	f04f 0000 	mov.w	r0, #0
  40a7e6:	f380 8811 	msr	BASEPRI, r0
  40a7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40a7ee:	6819      	ldr	r1, [r3, #0]
  40a7f0:	6808      	ldr	r0, [r1, #0]
  40a7f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a7f6:	f380 8809 	msr	PSP, r0
  40a7fa:	4770      	bx	lr

0040a7fc <pxCurrentTCBConst>:
  40a7fc:	20003438 	.word	0x20003438

0040a800 <xPortSysTickHandler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void xPortSysTickHandler(void)
{
  40a800:	b580      	push	{r7, lr}
  40a802:	b082      	sub	sp, #8
  40a804:	af00      	add	r7, sp, #0
	unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  40a806:	4b09      	ldr	r3, [pc, #36]	; (40a82c <xPortSysTickHandler+0x2c>)
  40a808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40a80c:	601a      	str	r2, [r3, #0]
#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
  40a80e:	2300      	movs	r3, #0
  40a810:	607b      	str	r3, [r7, #4]
  40a812:	f04f 0000 	mov.w	r0, #0
  40a816:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
  40a81a:	4b05      	ldr	r3, [pc, #20]	; (40a830 <xPortSysTickHandler+0x30>)
  40a81c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulDummy);
  40a81e:	f04f 0000 	mov.w	r0, #0
  40a822:	f380 8811 	msr	BASEPRI, r0
}
  40a826:	3708      	adds	r7, #8
  40a828:	46bd      	mov	sp, r7
  40a82a:	bd80      	pop	{r7, pc}
  40a82c:	e000ed04 	.word	0xe000ed04
  40a830:	0040b585 	.word	0x0040b585

0040a834 <prvSetupTimerInterrupt>:
/**
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
  40a834:	b598      	push	{r3, r4, r7, lr}
  40a836:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  40a838:	4c06      	ldr	r4, [pc, #24]	; (40a854 <prvSetupTimerInterrupt+0x20>)
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40a83a:	4b07      	ldr	r3, [pc, #28]	; (40a858 <prvSetupTimerInterrupt+0x24>)
  40a83c:	4798      	blx	r3
  40a83e:	4602      	mov	r2, r0
  40a840:	4b06      	ldr	r3, [pc, #24]	; (40a85c <prvSetupTimerInterrupt+0x28>)
  40a842:	fba3 1302 	umull	r1, r3, r3, r2
  40a846:	099b      	lsrs	r3, r3, #6
  40a848:	3b01      	subs	r3, #1
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  40a84a:	6023      	str	r3, [r4, #0]
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
	*(portNVIC_SYSTICK_CTRL) =
  40a84c:	4b04      	ldr	r3, [pc, #16]	; (40a860 <prvSetupTimerInterrupt+0x2c>)
  40a84e:	2207      	movs	r2, #7
  40a850:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT |
			portNVIC_SYSTICK_ENABLE;
}
  40a852:	bd98      	pop	{r3, r4, r7, pc}
  40a854:	e000e014 	.word	0xe000e014
  40a858:	0040a685 	.word	0x0040a685
  40a85c:	10624dd3 	.word	0x10624dd3
  40a860:	e000e010 	.word	0xe000e010

0040a864 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  40a864:	b580      	push	{r7, lr}
  40a866:	b084      	sub	sp, #16
  40a868:	af00      	add	r7, sp, #0
  40a86a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
  40a86c:	4b06      	ldr	r3, [pc, #24]	; (40a888 <pvPortMalloc+0x24>)
  40a86e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  40a870:	6878      	ldr	r0, [r7, #4]
  40a872:	4b06      	ldr	r3, [pc, #24]	; (40a88c <pvPortMalloc+0x28>)
  40a874:	4798      	blx	r3
  40a876:	4603      	mov	r3, r0
  40a878:	60fb      	str	r3, [r7, #12]
	}
	xTaskResumeAll();
  40a87a:	4b05      	ldr	r3, [pc, #20]	; (40a890 <pvPortMalloc+0x2c>)
  40a87c:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  40a87e:	68fb      	ldr	r3, [r7, #12]
}
  40a880:	4618      	mov	r0, r3
  40a882:	3710      	adds	r7, #16
  40a884:	46bd      	mov	sp, r7
  40a886:	bd80      	pop	{r7, pc}
  40a888:	0040b325 	.word	0x0040b325
  40a88c:	00412a11 	.word	0x00412a11
  40a890:	0040b341 	.word	0x0040b341

0040a894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40a894:	b580      	push	{r7, lr}
  40a896:	b082      	sub	sp, #8
  40a898:	af00      	add	r7, sp, #0
  40a89a:	6078      	str	r0, [r7, #4]
	if( pv )
  40a89c:	687b      	ldr	r3, [r7, #4]
  40a89e:	2b00      	cmp	r3, #0
  40a8a0:	d006      	beq.n	40a8b0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
  40a8a2:	4b05      	ldr	r3, [pc, #20]	; (40a8b8 <vPortFree+0x24>)
  40a8a4:	4798      	blx	r3
		{
			free( pv );
  40a8a6:	6878      	ldr	r0, [r7, #4]
  40a8a8:	4b04      	ldr	r3, [pc, #16]	; (40a8bc <vPortFree+0x28>)
  40a8aa:	4798      	blx	r3
		}
		xTaskResumeAll();
  40a8ac:	4b04      	ldr	r3, [pc, #16]	; (40a8c0 <vPortFree+0x2c>)
  40a8ae:	4798      	blx	r3
	}
}
  40a8b0:	3708      	adds	r7, #8
  40a8b2:	46bd      	mov	sp, r7
  40a8b4:	bd80      	pop	{r7, pc}
  40a8b6:	bf00      	nop
  40a8b8:	0040b325 	.word	0x0040b325
  40a8bc:	00412a21 	.word	0x00412a21
  40a8c0:	0040b341 	.word	0x0040b341

0040a8c4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
  40a8c4:	b580      	push	{r7, lr}
  40a8c6:	b086      	sub	sp, #24
  40a8c8:	af00      	add	r7, sp, #0
  40a8ca:	6078      	str	r0, [r7, #4]
  40a8cc:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  40a8ce:	2300      	movs	r3, #0
  40a8d0:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40a8d2:	687b      	ldr	r3, [r7, #4]
  40a8d4:	2b00      	cmp	r3, #0
  40a8d6:	d04e      	beq.n	40a976 <xQueueCreate+0xb2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  40a8d8:	204c      	movs	r0, #76	; 0x4c
  40a8da:	4b29      	ldr	r3, [pc, #164]	; (40a980 <xQueueCreate+0xbc>)
  40a8dc:	4798      	blx	r3
  40a8de:	6138      	str	r0, [r7, #16]
		if( pxNewQueue != NULL )
  40a8e0:	693b      	ldr	r3, [r7, #16]
  40a8e2:	2b00      	cmp	r3, #0
  40a8e4:	d047      	beq.n	40a976 <xQueueCreate+0xb2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  40a8e6:	687b      	ldr	r3, [r7, #4]
  40a8e8:	683a      	ldr	r2, [r7, #0]
  40a8ea:	fb02 f303 	mul.w	r3, r2, r3
  40a8ee:	3301      	adds	r3, #1
  40a8f0:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  40a8f2:	68f8      	ldr	r0, [r7, #12]
  40a8f4:	4b22      	ldr	r3, [pc, #136]	; (40a980 <xQueueCreate+0xbc>)
  40a8f6:	4798      	blx	r3
  40a8f8:	4602      	mov	r2, r0
  40a8fa:	693b      	ldr	r3, [r7, #16]
  40a8fc:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  40a8fe:	693b      	ldr	r3, [r7, #16]
  40a900:	681b      	ldr	r3, [r3, #0]
  40a902:	2b00      	cmp	r3, #0
  40a904:	d034      	beq.n	40a970 <xQueueCreate+0xac>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
  40a906:	693b      	ldr	r3, [r7, #16]
  40a908:	681a      	ldr	r2, [r3, #0]
  40a90a:	687b      	ldr	r3, [r7, #4]
  40a90c:	6839      	ldr	r1, [r7, #0]
  40a90e:	fb01 f303 	mul.w	r3, r1, r3
  40a912:	441a      	add	r2, r3
  40a914:	693b      	ldr	r3, [r7, #16]
  40a916:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40a918:	693b      	ldr	r3, [r7, #16]
  40a91a:	2200      	movs	r2, #0
  40a91c:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
  40a91e:	693b      	ldr	r3, [r7, #16]
  40a920:	681a      	ldr	r2, [r3, #0]
  40a922:	693b      	ldr	r3, [r7, #16]
  40a924:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
  40a926:	693b      	ldr	r3, [r7, #16]
  40a928:	681a      	ldr	r2, [r3, #0]
  40a92a:	687b      	ldr	r3, [r7, #4]
  40a92c:	3b01      	subs	r3, #1
  40a92e:	6839      	ldr	r1, [r7, #0]
  40a930:	fb01 f303 	mul.w	r3, r1, r3
  40a934:	441a      	add	r2, r3
  40a936:	693b      	ldr	r3, [r7, #16]
  40a938:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
  40a93a:	693b      	ldr	r3, [r7, #16]
  40a93c:	687a      	ldr	r2, [r7, #4]
  40a93e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  40a940:	693b      	ldr	r3, [r7, #16]
  40a942:	683a      	ldr	r2, [r7, #0]
  40a944:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
  40a946:	693b      	ldr	r3, [r7, #16]
  40a948:	f04f 32ff 	mov.w	r2, #4294967295
  40a94c:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
  40a94e:	693b      	ldr	r3, [r7, #16]
  40a950:	f04f 32ff 	mov.w	r2, #4294967295
  40a954:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  40a956:	693b      	ldr	r3, [r7, #16]
  40a958:	3310      	adds	r3, #16
  40a95a:	4618      	mov	r0, r3
  40a95c:	4b09      	ldr	r3, [pc, #36]	; (40a984 <xQueueCreate+0xc0>)
  40a95e:	4798      	blx	r3
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  40a960:	693b      	ldr	r3, [r7, #16]
  40a962:	3324      	adds	r3, #36	; 0x24
  40a964:	4618      	mov	r0, r3
  40a966:	4b07      	ldr	r3, [pc, #28]	; (40a984 <xQueueCreate+0xc0>)
  40a968:	4798      	blx	r3

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  40a96a:	693b      	ldr	r3, [r7, #16]
  40a96c:	617b      	str	r3, [r7, #20]
  40a96e:	e002      	b.n	40a976 <xQueueCreate+0xb2>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
  40a970:	6938      	ldr	r0, [r7, #16]
  40a972:	4b05      	ldr	r3, [pc, #20]	; (40a988 <xQueueCreate+0xc4>)
  40a974:	4798      	blx	r3
		}
	}

	configASSERT( xReturn );

	return xReturn;
  40a976:	697b      	ldr	r3, [r7, #20]
}
  40a978:	4618      	mov	r0, r3
  40a97a:	3718      	adds	r7, #24
  40a97c:	46bd      	mov	sp, r7
  40a97e:	bd80      	pop	{r7, pc}
  40a980:	0040a865 	.word	0x0040a865
  40a984:	0040a489 	.word	0x0040a489
  40a988:	0040a895 	.word	0x0040a895

0040a98c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
  40a98c:	b590      	push	{r4, r7, lr}
  40a98e:	b083      	sub	sp, #12
  40a990:	af00      	add	r7, sp, #0
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  40a992:	204c      	movs	r0, #76	; 0x4c
  40a994:	4b1b      	ldr	r3, [pc, #108]	; (40aa04 <xQueueCreateMutex+0x78>)
  40a996:	4798      	blx	r3
  40a998:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
  40a99a:	687b      	ldr	r3, [r7, #4]
  40a99c:	2b00      	cmp	r3, #0
  40a99e:	d02c      	beq.n	40a9fa <xQueueCreateMutex+0x6e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  40a9a0:	687b      	ldr	r3, [r7, #4]
  40a9a2:	2200      	movs	r2, #0
  40a9a4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  40a9a6:	687b      	ldr	r3, [r7, #4]
  40a9a8:	2200      	movs	r2, #0
  40a9aa:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  40a9ac:	687b      	ldr	r3, [r7, #4]
  40a9ae:	2200      	movs	r2, #0
  40a9b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
  40a9b2:	687b      	ldr	r3, [r7, #4]
  40a9b4:	2200      	movs	r2, #0
  40a9b6:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40a9b8:	687b      	ldr	r3, [r7, #4]
  40a9ba:	2200      	movs	r2, #0
  40a9bc:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
  40a9be:	687b      	ldr	r3, [r7, #4]
  40a9c0:	2201      	movs	r2, #1
  40a9c2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
  40a9c4:	687b      	ldr	r3, [r7, #4]
  40a9c6:	2200      	movs	r2, #0
  40a9c8:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  40a9ca:	687b      	ldr	r3, [r7, #4]
  40a9cc:	f04f 32ff 	mov.w	r2, #4294967295
  40a9d0:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  40a9d2:	687b      	ldr	r3, [r7, #4]
  40a9d4:	f04f 32ff 	mov.w	r2, #4294967295
  40a9d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  40a9da:	687b      	ldr	r3, [r7, #4]
  40a9dc:	3310      	adds	r3, #16
  40a9de:	4618      	mov	r0, r3
  40a9e0:	4b09      	ldr	r3, [pc, #36]	; (40aa08 <xQueueCreateMutex+0x7c>)
  40a9e2:	4798      	blx	r3
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  40a9e4:	687b      	ldr	r3, [r7, #4]
  40a9e6:	3324      	adds	r3, #36	; 0x24
  40a9e8:	4618      	mov	r0, r3
  40a9ea:	4b07      	ldr	r3, [pc, #28]	; (40aa08 <xQueueCreateMutex+0x7c>)
  40a9ec:	4798      	blx	r3

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
  40a9ee:	6878      	ldr	r0, [r7, #4]
  40a9f0:	2100      	movs	r1, #0
  40a9f2:	2200      	movs	r2, #0
  40a9f4:	2300      	movs	r3, #0
  40a9f6:	4c05      	ldr	r4, [pc, #20]	; (40aa0c <xQueueCreateMutex+0x80>)
  40a9f8:	47a0      	blx	r4
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
  40a9fa:	687b      	ldr	r3, [r7, #4]
	}
  40a9fc:	4618      	mov	r0, r3
  40a9fe:	370c      	adds	r7, #12
  40aa00:	46bd      	mov	sp, r7
  40aa02:	bd90      	pop	{r4, r7, pc}
  40aa04:	0040a865 	.word	0x0040a865
  40aa08:	0040a489 	.word	0x0040a489
  40aa0c:	0040aa11 	.word	0x0040aa11

0040aa10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40aa10:	b580      	push	{r7, lr}
  40aa12:	b088      	sub	sp, #32
  40aa14:	af00      	add	r7, sp, #0
  40aa16:	60f8      	str	r0, [r7, #12]
  40aa18:	60b9      	str	r1, [r7, #8]
  40aa1a:	607a      	str	r2, [r7, #4]
  40aa1c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40aa1e:	2300      	movs	r3, #0
  40aa20:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40aa22:	4b3e      	ldr	r3, [pc, #248]	; (40ab1c <xQueueGenericSend+0x10c>)
  40aa24:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40aa26:	68fb      	ldr	r3, [r7, #12]
  40aa28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40aa2a:	68fb      	ldr	r3, [r7, #12]
  40aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40aa2e:	429a      	cmp	r2, r3
  40aa30:	d216      	bcs.n	40aa60 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40aa32:	68f8      	ldr	r0, [r7, #12]
  40aa34:	68b9      	ldr	r1, [r7, #8]
  40aa36:	683a      	ldr	r2, [r7, #0]
  40aa38:	4b39      	ldr	r3, [pc, #228]	; (40ab20 <xQueueGenericSend+0x110>)
  40aa3a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40aa3c:	68fb      	ldr	r3, [r7, #12]
  40aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40aa40:	2b00      	cmp	r3, #0
  40aa42:	d009      	beq.n	40aa58 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40aa44:	68fb      	ldr	r3, [r7, #12]
  40aa46:	3324      	adds	r3, #36	; 0x24
  40aa48:	4618      	mov	r0, r3
  40aa4a:	4b36      	ldr	r3, [pc, #216]	; (40ab24 <xQueueGenericSend+0x114>)
  40aa4c:	4798      	blx	r3
  40aa4e:	4603      	mov	r3, r0
  40aa50:	2b01      	cmp	r3, #1
  40aa52:	d101      	bne.n	40aa58 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40aa54:	4b34      	ldr	r3, [pc, #208]	; (40ab28 <xQueueGenericSend+0x118>)
  40aa56:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  40aa58:	4b34      	ldr	r3, [pc, #208]	; (40ab2c <xQueueGenericSend+0x11c>)
  40aa5a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  40aa5c:	2301      	movs	r3, #1
  40aa5e:	e059      	b.n	40ab14 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40aa60:	687b      	ldr	r3, [r7, #4]
  40aa62:	2b00      	cmp	r3, #0
  40aa64:	d103      	bne.n	40aa6e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40aa66:	4b31      	ldr	r3, [pc, #196]	; (40ab2c <xQueueGenericSend+0x11c>)
  40aa68:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  40aa6a:	2300      	movs	r3, #0
  40aa6c:	e052      	b.n	40ab14 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
  40aa6e:	69fb      	ldr	r3, [r7, #28]
  40aa70:	2b00      	cmp	r3, #0
  40aa72:	d106      	bne.n	40aa82 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40aa74:	f107 0314 	add.w	r3, r7, #20
  40aa78:	4618      	mov	r0, r3
  40aa7a:	4b2d      	ldr	r3, [pc, #180]	; (40ab30 <xQueueGenericSend+0x120>)
  40aa7c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40aa7e:	2301      	movs	r3, #1
  40aa80:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40aa82:	4b2a      	ldr	r3, [pc, #168]	; (40ab2c <xQueueGenericSend+0x11c>)
  40aa84:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40aa86:	4b2b      	ldr	r3, [pc, #172]	; (40ab34 <xQueueGenericSend+0x124>)
  40aa88:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40aa8a:	4b24      	ldr	r3, [pc, #144]	; (40ab1c <xQueueGenericSend+0x10c>)
  40aa8c:	4798      	blx	r3
  40aa8e:	68fb      	ldr	r3, [r7, #12]
  40aa90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
  40aa96:	d102      	bne.n	40aa9e <xQueueGenericSend+0x8e>
  40aa98:	68fb      	ldr	r3, [r7, #12]
  40aa9a:	2200      	movs	r2, #0
  40aa9c:	645a      	str	r2, [r3, #68]	; 0x44
  40aa9e:	68fb      	ldr	r3, [r7, #12]
  40aaa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295
  40aaa6:	d102      	bne.n	40aaae <xQueueGenericSend+0x9e>
  40aaa8:	68fb      	ldr	r3, [r7, #12]
  40aaaa:	2200      	movs	r2, #0
  40aaac:	649a      	str	r2, [r3, #72]	; 0x48
  40aaae:	4b1f      	ldr	r3, [pc, #124]	; (40ab2c <xQueueGenericSend+0x11c>)
  40aab0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40aab2:	f107 0214 	add.w	r2, r7, #20
  40aab6:	1d3b      	adds	r3, r7, #4
  40aab8:	4610      	mov	r0, r2
  40aaba:	4619      	mov	r1, r3
  40aabc:	4b1e      	ldr	r3, [pc, #120]	; (40ab38 <xQueueGenericSend+0x128>)
  40aabe:	4798      	blx	r3
  40aac0:	4603      	mov	r3, r0
  40aac2:	2b00      	cmp	r3, #0
  40aac4:	d11e      	bne.n	40ab04 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) )
  40aac6:	68f8      	ldr	r0, [r7, #12]
  40aac8:	4b1c      	ldr	r3, [pc, #112]	; (40ab3c <xQueueGenericSend+0x12c>)
  40aaca:	4798      	blx	r3
  40aacc:	4603      	mov	r3, r0
  40aace:	2b00      	cmp	r3, #0
  40aad0:	d012      	beq.n	40aaf8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40aad2:	68fb      	ldr	r3, [r7, #12]
  40aad4:	f103 0210 	add.w	r2, r3, #16
  40aad8:	687b      	ldr	r3, [r7, #4]
  40aada:	4610      	mov	r0, r2
  40aadc:	4619      	mov	r1, r3
  40aade:	4b18      	ldr	r3, [pc, #96]	; (40ab40 <xQueueGenericSend+0x130>)
  40aae0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40aae2:	68f8      	ldr	r0, [r7, #12]
  40aae4:	4b17      	ldr	r3, [pc, #92]	; (40ab44 <xQueueGenericSend+0x134>)
  40aae6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
  40aae8:	4b17      	ldr	r3, [pc, #92]	; (40ab48 <xQueueGenericSend+0x138>)
  40aaea:	4798      	blx	r3
  40aaec:	4603      	mov	r3, r0
  40aaee:	2b00      	cmp	r3, #0
  40aaf0:	d10f      	bne.n	40ab12 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
  40aaf2:	4b0d      	ldr	r3, [pc, #52]	; (40ab28 <xQueueGenericSend+0x118>)
  40aaf4:	4798      	blx	r3
  40aaf6:	e00c      	b.n	40ab12 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40aaf8:	68f8      	ldr	r0, [r7, #12]
  40aafa:	4b12      	ldr	r3, [pc, #72]	; (40ab44 <xQueueGenericSend+0x134>)
  40aafc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40aafe:	4b12      	ldr	r3, [pc, #72]	; (40ab48 <xQueueGenericSend+0x138>)
  40ab00:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  40ab02:	e78e      	b.n	40aa22 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40ab04:	68f8      	ldr	r0, [r7, #12]
  40ab06:	4b0f      	ldr	r3, [pc, #60]	; (40ab44 <xQueueGenericSend+0x134>)
  40ab08:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40ab0a:	4b0f      	ldr	r3, [pc, #60]	; (40ab48 <xQueueGenericSend+0x138>)
  40ab0c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40ab0e:	2300      	movs	r3, #0
  40ab10:	e000      	b.n	40ab14 <xQueueGenericSend+0x104>
		}
	}
  40ab12:	e786      	b.n	40aa22 <xQueueGenericSend+0x12>
}
  40ab14:	4618      	mov	r0, r3
  40ab16:	3720      	adds	r7, #32
  40ab18:	46bd      	mov	sp, r7
  40ab1a:	bd80      	pop	{r7, pc}
  40ab1c:	0040a775 	.word	0x0040a775
  40ab20:	0040ada1 	.word	0x0040ada1
  40ab24:	0040b881 	.word	0x0040b881
  40ab28:	0040a75d 	.word	0x0040a75d
  40ab2c:	0040a799 	.word	0x0040a799
  40ab30:	0040b929 	.word	0x0040b929
  40ab34:	0040b325 	.word	0x0040b325
  40ab38:	0040b955 	.word	0x0040b955
  40ab3c:	0040af8d 	.word	0x0040af8d
  40ab40:	0040b7c1 	.word	0x0040b7c1
  40ab44:	0040aeb1 	.word	0x0040aeb1
  40ab48:	0040b341 	.word	0x0040b341

0040ab4c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  40ab4c:	b580      	push	{r7, lr}
  40ab4e:	b086      	sub	sp, #24
  40ab50:	af00      	add	r7, sp, #0
  40ab52:	60f8      	str	r0, [r7, #12]
  40ab54:	60b9      	str	r1, [r7, #8]
  40ab56:	607a      	str	r2, [r7, #4]
  40ab58:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40ab5a:	2300      	movs	r3, #0
  40ab5c:	613b      	str	r3, [r7, #16]
  40ab5e:	f04f 0000 	mov.w	r0, #0
  40ab62:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40ab66:	68fb      	ldr	r3, [r7, #12]
  40ab68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40ab6a:	68fb      	ldr	r3, [r7, #12]
  40ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40ab6e:	429a      	cmp	r2, r3
  40ab70:	d221      	bcs.n	40abb6 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40ab72:	68f8      	ldr	r0, [r7, #12]
  40ab74:	68b9      	ldr	r1, [r7, #8]
  40ab76:	683a      	ldr	r2, [r7, #0]
  40ab78:	4b14      	ldr	r3, [pc, #80]	; (40abcc <xQueueGenericSendFromISR+0x80>)
  40ab7a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  40ab7c:	68fb      	ldr	r3, [r7, #12]
  40ab7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
  40ab84:	d10f      	bne.n	40aba6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40ab86:	68fb      	ldr	r3, [r7, #12]
  40ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab8a:	2b00      	cmp	r3, #0
  40ab8c:	d010      	beq.n	40abb0 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40ab8e:	68fb      	ldr	r3, [r7, #12]
  40ab90:	3324      	adds	r3, #36	; 0x24
  40ab92:	4618      	mov	r0, r3
  40ab94:	4b0e      	ldr	r3, [pc, #56]	; (40abd0 <xQueueGenericSendFromISR+0x84>)
  40ab96:	4798      	blx	r3
  40ab98:	4603      	mov	r3, r0
  40ab9a:	2b00      	cmp	r3, #0
  40ab9c:	d008      	beq.n	40abb0 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
  40ab9e:	687b      	ldr	r3, [r7, #4]
  40aba0:	2201      	movs	r2, #1
  40aba2:	601a      	str	r2, [r3, #0]
  40aba4:	e004      	b.n	40abb0 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40aba6:	68fb      	ldr	r3, [r7, #12]
  40aba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40abaa:	1c5a      	adds	r2, r3, #1
  40abac:	68fb      	ldr	r3, [r7, #12]
  40abae:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  40abb0:	2301      	movs	r3, #1
  40abb2:	617b      	str	r3, [r7, #20]
  40abb4:	e001      	b.n	40abba <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40abb6:	2300      	movs	r3, #0
  40abb8:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  40abba:	f04f 0000 	mov.w	r0, #0
  40abbe:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
  40abc2:	697b      	ldr	r3, [r7, #20]
}
  40abc4:	4618      	mov	r0, r3
  40abc6:	3718      	adds	r7, #24
  40abc8:	46bd      	mov	sp, r7
  40abca:	bd80      	pop	{r7, pc}
  40abcc:	0040ada1 	.word	0x0040ada1
  40abd0:	0040b881 	.word	0x0040b881

0040abd4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40abd4:	b580      	push	{r7, lr}
  40abd6:	b088      	sub	sp, #32
  40abd8:	af00      	add	r7, sp, #0
  40abda:	60f8      	str	r0, [r7, #12]
  40abdc:	60b9      	str	r1, [r7, #8]
  40abde:	607a      	str	r2, [r7, #4]
  40abe0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40abe2:	2300      	movs	r3, #0
  40abe4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40abe6:	4b56      	ldr	r3, [pc, #344]	; (40ad40 <xQueueGenericReceive+0x16c>)
  40abe8:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  40abea:	68fb      	ldr	r3, [r7, #12]
  40abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40abee:	2b00      	cmp	r3, #0
  40abf0:	d03b      	beq.n	40ac6a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40abf2:	68fb      	ldr	r3, [r7, #12]
  40abf4:	68db      	ldr	r3, [r3, #12]
  40abf6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40abf8:	68f8      	ldr	r0, [r7, #12]
  40abfa:	68b9      	ldr	r1, [r7, #8]
  40abfc:	4b51      	ldr	r3, [pc, #324]	; (40ad44 <xQueueGenericReceive+0x170>)
  40abfe:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  40ac00:	683b      	ldr	r3, [r7, #0]
  40ac02:	2b00      	cmp	r3, #0
  40ac04:	d11c      	bne.n	40ac40 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40ac06:	68fb      	ldr	r3, [r7, #12]
  40ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ac0a:	1e5a      	subs	r2, r3, #1
  40ac0c:	68fb      	ldr	r3, [r7, #12]
  40ac0e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40ac10:	68fb      	ldr	r3, [r7, #12]
  40ac12:	681b      	ldr	r3, [r3, #0]
  40ac14:	2b00      	cmp	r3, #0
  40ac16:	d104      	bne.n	40ac22 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  40ac18:	4b4b      	ldr	r3, [pc, #300]	; (40ad48 <xQueueGenericReceive+0x174>)
  40ac1a:	4798      	blx	r3
  40ac1c:	4602      	mov	r2, r0
  40ac1e:	68fb      	ldr	r3, [r7, #12]
  40ac20:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40ac22:	68fb      	ldr	r3, [r7, #12]
  40ac24:	691b      	ldr	r3, [r3, #16]
  40ac26:	2b00      	cmp	r3, #0
  40ac28:	d01b      	beq.n	40ac62 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40ac2a:	68fb      	ldr	r3, [r7, #12]
  40ac2c:	3310      	adds	r3, #16
  40ac2e:	4618      	mov	r0, r3
  40ac30:	4b46      	ldr	r3, [pc, #280]	; (40ad4c <xQueueGenericReceive+0x178>)
  40ac32:	4798      	blx	r3
  40ac34:	4603      	mov	r3, r0
  40ac36:	2b01      	cmp	r3, #1
  40ac38:	d113      	bne.n	40ac62 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
  40ac3a:	4b45      	ldr	r3, [pc, #276]	; (40ad50 <xQueueGenericReceive+0x17c>)
  40ac3c:	4798      	blx	r3
  40ac3e:	e010      	b.n	40ac62 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  40ac40:	68fb      	ldr	r3, [r7, #12]
  40ac42:	69ba      	ldr	r2, [r7, #24]
  40ac44:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40ac46:	68fb      	ldr	r3, [r7, #12]
  40ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ac4a:	2b00      	cmp	r3, #0
  40ac4c:	d009      	beq.n	40ac62 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40ac4e:	68fb      	ldr	r3, [r7, #12]
  40ac50:	3324      	adds	r3, #36	; 0x24
  40ac52:	4618      	mov	r0, r3
  40ac54:	4b3d      	ldr	r3, [pc, #244]	; (40ad4c <xQueueGenericReceive+0x178>)
  40ac56:	4798      	blx	r3
  40ac58:	4603      	mov	r3, r0
  40ac5a:	2b00      	cmp	r3, #0
  40ac5c:	d001      	beq.n	40ac62 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  40ac5e:	4b3c      	ldr	r3, [pc, #240]	; (40ad50 <xQueueGenericReceive+0x17c>)
  40ac60:	4798      	blx	r3
						}
					}

				}

				taskEXIT_CRITICAL();
  40ac62:	4b3c      	ldr	r3, [pc, #240]	; (40ad54 <xQueueGenericReceive+0x180>)
  40ac64:	4798      	blx	r3
				return pdPASS;
  40ac66:	2301      	movs	r3, #1
  40ac68:	e066      	b.n	40ad38 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40ac6a:	687b      	ldr	r3, [r7, #4]
  40ac6c:	2b00      	cmp	r3, #0
  40ac6e:	d103      	bne.n	40ac78 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40ac70:	4b38      	ldr	r3, [pc, #224]	; (40ad54 <xQueueGenericReceive+0x180>)
  40ac72:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40ac74:	2300      	movs	r3, #0
  40ac76:	e05f      	b.n	40ad38 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
  40ac78:	69fb      	ldr	r3, [r7, #28]
  40ac7a:	2b00      	cmp	r3, #0
  40ac7c:	d106      	bne.n	40ac8c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40ac7e:	f107 0310 	add.w	r3, r7, #16
  40ac82:	4618      	mov	r0, r3
  40ac84:	4b34      	ldr	r3, [pc, #208]	; (40ad58 <xQueueGenericReceive+0x184>)
  40ac86:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40ac88:	2301      	movs	r3, #1
  40ac8a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40ac8c:	4b31      	ldr	r3, [pc, #196]	; (40ad54 <xQueueGenericReceive+0x180>)
  40ac8e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40ac90:	4b32      	ldr	r3, [pc, #200]	; (40ad5c <xQueueGenericReceive+0x188>)
  40ac92:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40ac94:	4b2a      	ldr	r3, [pc, #168]	; (40ad40 <xQueueGenericReceive+0x16c>)
  40ac96:	4798      	blx	r3
  40ac98:	68fb      	ldr	r3, [r7, #12]
  40ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  40aca0:	d102      	bne.n	40aca8 <xQueueGenericReceive+0xd4>
  40aca2:	68fb      	ldr	r3, [r7, #12]
  40aca4:	2200      	movs	r2, #0
  40aca6:	645a      	str	r2, [r3, #68]	; 0x44
  40aca8:	68fb      	ldr	r3, [r7, #12]
  40acaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40acac:	f1b3 3fff 	cmp.w	r3, #4294967295
  40acb0:	d102      	bne.n	40acb8 <xQueueGenericReceive+0xe4>
  40acb2:	68fb      	ldr	r3, [r7, #12]
  40acb4:	2200      	movs	r2, #0
  40acb6:	649a      	str	r2, [r3, #72]	; 0x48
  40acb8:	4b26      	ldr	r3, [pc, #152]	; (40ad54 <xQueueGenericReceive+0x180>)
  40acba:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40acbc:	f107 0210 	add.w	r2, r7, #16
  40acc0:	1d3b      	adds	r3, r7, #4
  40acc2:	4610      	mov	r0, r2
  40acc4:	4619      	mov	r1, r3
  40acc6:	4b26      	ldr	r3, [pc, #152]	; (40ad60 <xQueueGenericReceive+0x18c>)
  40acc8:	4798      	blx	r3
  40acca:	4603      	mov	r3, r0
  40accc:	2b00      	cmp	r3, #0
  40acce:	d12b      	bne.n	40ad28 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) )
  40acd0:	68f8      	ldr	r0, [r7, #12]
  40acd2:	4b24      	ldr	r3, [pc, #144]	; (40ad64 <xQueueGenericReceive+0x190>)
  40acd4:	4798      	blx	r3
  40acd6:	4603      	mov	r3, r0
  40acd8:	2b00      	cmp	r3, #0
  40acda:	d01f      	beq.n	40ad1c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40acdc:	68fb      	ldr	r3, [r7, #12]
  40acde:	681b      	ldr	r3, [r3, #0]
  40ace0:	2b00      	cmp	r3, #0
  40ace2:	d108      	bne.n	40acf6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
  40ace4:	4b16      	ldr	r3, [pc, #88]	; (40ad40 <xQueueGenericReceive+0x16c>)
  40ace6:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40ace8:	68fb      	ldr	r3, [r7, #12]
  40acea:	685b      	ldr	r3, [r3, #4]
  40acec:	4618      	mov	r0, r3
  40acee:	4b1e      	ldr	r3, [pc, #120]	; (40ad68 <xQueueGenericReceive+0x194>)
  40acf0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  40acf2:	4b18      	ldr	r3, [pc, #96]	; (40ad54 <xQueueGenericReceive+0x180>)
  40acf4:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40acf6:	68fb      	ldr	r3, [r7, #12]
  40acf8:	f103 0224 	add.w	r2, r3, #36	; 0x24
  40acfc:	687b      	ldr	r3, [r7, #4]
  40acfe:	4610      	mov	r0, r2
  40ad00:	4619      	mov	r1, r3
  40ad02:	4b1a      	ldr	r3, [pc, #104]	; (40ad6c <xQueueGenericReceive+0x198>)
  40ad04:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40ad06:	68f8      	ldr	r0, [r7, #12]
  40ad08:	4b19      	ldr	r3, [pc, #100]	; (40ad70 <xQueueGenericReceive+0x19c>)
  40ad0a:	4798      	blx	r3
				if( !xTaskResumeAll() )
  40ad0c:	4b19      	ldr	r3, [pc, #100]	; (40ad74 <xQueueGenericReceive+0x1a0>)
  40ad0e:	4798      	blx	r3
  40ad10:	4603      	mov	r3, r0
  40ad12:	2b00      	cmp	r3, #0
  40ad14:	d10f      	bne.n	40ad36 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
  40ad16:	4b0e      	ldr	r3, [pc, #56]	; (40ad50 <xQueueGenericReceive+0x17c>)
  40ad18:	4798      	blx	r3
  40ad1a:	e00c      	b.n	40ad36 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40ad1c:	68f8      	ldr	r0, [r7, #12]
  40ad1e:	4b14      	ldr	r3, [pc, #80]	; (40ad70 <xQueueGenericReceive+0x19c>)
  40ad20:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40ad22:	4b14      	ldr	r3, [pc, #80]	; (40ad74 <xQueueGenericReceive+0x1a0>)
  40ad24:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  40ad26:	e75e      	b.n	40abe6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  40ad28:	68f8      	ldr	r0, [r7, #12]
  40ad2a:	4b11      	ldr	r3, [pc, #68]	; (40ad70 <xQueueGenericReceive+0x19c>)
  40ad2c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40ad2e:	4b11      	ldr	r3, [pc, #68]	; (40ad74 <xQueueGenericReceive+0x1a0>)
  40ad30:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40ad32:	2300      	movs	r3, #0
  40ad34:	e000      	b.n	40ad38 <xQueueGenericReceive+0x164>
		}
	}
  40ad36:	e756      	b.n	40abe6 <xQueueGenericReceive+0x12>
}
  40ad38:	4618      	mov	r0, r3
  40ad3a:	3720      	adds	r7, #32
  40ad3c:	46bd      	mov	sp, r7
  40ad3e:	bd80      	pop	{r7, pc}
  40ad40:	0040a775 	.word	0x0040a775
  40ad44:	0040ae61 	.word	0x0040ae61
  40ad48:	0040bddd 	.word	0x0040bddd
  40ad4c:	0040b881 	.word	0x0040b881
  40ad50:	0040a75d 	.word	0x0040a75d
  40ad54:	0040a799 	.word	0x0040a799
  40ad58:	0040b929 	.word	0x0040b929
  40ad5c:	0040b325 	.word	0x0040b325
  40ad60:	0040b955 	.word	0x0040b955
  40ad64:	0040af59 	.word	0x0040af59
  40ad68:	0040be39 	.word	0x0040be39
  40ad6c:	0040b7c1 	.word	0x0040b7c1
  40ad70:	0040aeb1 	.word	0x0040aeb1
  40ad74:	0040b341 	.word	0x0040b341

0040ad78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
  40ad78:	b580      	push	{r7, lr}
  40ad7a:	b084      	sub	sp, #16
  40ad7c:	af00      	add	r7, sp, #0
  40ad7e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
  40ad80:	4b05      	ldr	r3, [pc, #20]	; (40ad98 <uxQueueMessagesWaiting+0x20>)
  40ad82:	4798      	blx	r3
		uxReturn = pxQueue->uxMessagesWaiting;
  40ad84:	687b      	ldr	r3, [r7, #4]
  40ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ad88:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40ad8a:	4b04      	ldr	r3, [pc, #16]	; (40ad9c <uxQueueMessagesWaiting+0x24>)
  40ad8c:	4798      	blx	r3

	return uxReturn;
  40ad8e:	68fb      	ldr	r3, [r7, #12]
}
  40ad90:	4618      	mov	r0, r3
  40ad92:	3710      	adds	r7, #16
  40ad94:	46bd      	mov	sp, r7
  40ad96:	bd80      	pop	{r7, pc}
  40ad98:	0040a775 	.word	0x0040a775
  40ad9c:	0040a799 	.word	0x0040a799

0040ada0 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  40ada0:	b580      	push	{r7, lr}
  40ada2:	b084      	sub	sp, #16
  40ada4:	af00      	add	r7, sp, #0
  40ada6:	60f8      	str	r0, [r7, #12]
  40ada8:	60b9      	str	r1, [r7, #8]
  40adaa:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  40adac:	68fb      	ldr	r3, [r7, #12]
  40adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40adb0:	2b00      	cmp	r3, #0
  40adb2:	d10c      	bne.n	40adce <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40adb4:	68fb      	ldr	r3, [r7, #12]
  40adb6:	681b      	ldr	r3, [r3, #0]
  40adb8:	2b00      	cmp	r3, #0
  40adba:	d145      	bne.n	40ae48 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40adbc:	68fb      	ldr	r3, [r7, #12]
  40adbe:	685b      	ldr	r3, [r3, #4]
  40adc0:	4618      	mov	r0, r3
  40adc2:	4b25      	ldr	r3, [pc, #148]	; (40ae58 <prvCopyDataToQueue+0xb8>)
  40adc4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40adc6:	68fb      	ldr	r3, [r7, #12]
  40adc8:	2200      	movs	r2, #0
  40adca:	605a      	str	r2, [r3, #4]
  40adcc:	e03c      	b.n	40ae48 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  40adce:	687b      	ldr	r3, [r7, #4]
  40add0:	2b00      	cmp	r3, #0
  40add2:	d11a      	bne.n	40ae0a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40add4:	68fb      	ldr	r3, [r7, #12]
  40add6:	689a      	ldr	r2, [r3, #8]
  40add8:	68fb      	ldr	r3, [r7, #12]
  40adda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40addc:	4610      	mov	r0, r2
  40adde:	68b9      	ldr	r1, [r7, #8]
  40ade0:	461a      	mov	r2, r3
  40ade2:	4b1e      	ldr	r3, [pc, #120]	; (40ae5c <prvCopyDataToQueue+0xbc>)
  40ade4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40ade6:	68fb      	ldr	r3, [r7, #12]
  40ade8:	689a      	ldr	r2, [r3, #8]
  40adea:	68fb      	ldr	r3, [r7, #12]
  40adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40adee:	441a      	add	r2, r3
  40adf0:	68fb      	ldr	r3, [r7, #12]
  40adf2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40adf4:	68fb      	ldr	r3, [r7, #12]
  40adf6:	689a      	ldr	r2, [r3, #8]
  40adf8:	68fb      	ldr	r3, [r7, #12]
  40adfa:	685b      	ldr	r3, [r3, #4]
  40adfc:	429a      	cmp	r2, r3
  40adfe:	d323      	bcc.n	40ae48 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40ae00:	68fb      	ldr	r3, [r7, #12]
  40ae02:	681a      	ldr	r2, [r3, #0]
  40ae04:	68fb      	ldr	r3, [r7, #12]
  40ae06:	609a      	str	r2, [r3, #8]
  40ae08:	e01e      	b.n	40ae48 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40ae0a:	68fb      	ldr	r3, [r7, #12]
  40ae0c:	68da      	ldr	r2, [r3, #12]
  40ae0e:	68fb      	ldr	r3, [r7, #12]
  40ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ae12:	4610      	mov	r0, r2
  40ae14:	68b9      	ldr	r1, [r7, #8]
  40ae16:	461a      	mov	r2, r3
  40ae18:	4b10      	ldr	r3, [pc, #64]	; (40ae5c <prvCopyDataToQueue+0xbc>)
  40ae1a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40ae1c:	68fb      	ldr	r3, [r7, #12]
  40ae1e:	68da      	ldr	r2, [r3, #12]
  40ae20:	68fb      	ldr	r3, [r7, #12]
  40ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ae24:	425b      	negs	r3, r3
  40ae26:	441a      	add	r2, r3
  40ae28:	68fb      	ldr	r3, [r7, #12]
  40ae2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  40ae2c:	68fb      	ldr	r3, [r7, #12]
  40ae2e:	68da      	ldr	r2, [r3, #12]
  40ae30:	68fb      	ldr	r3, [r7, #12]
  40ae32:	681b      	ldr	r3, [r3, #0]
  40ae34:	429a      	cmp	r2, r3
  40ae36:	d207      	bcs.n	40ae48 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40ae38:	68fb      	ldr	r3, [r7, #12]
  40ae3a:	685a      	ldr	r2, [r3, #4]
  40ae3c:	68fb      	ldr	r3, [r7, #12]
  40ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ae40:	425b      	negs	r3, r3
  40ae42:	441a      	add	r2, r3
  40ae44:	68fb      	ldr	r3, [r7, #12]
  40ae46:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40ae48:	68fb      	ldr	r3, [r7, #12]
  40ae4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ae4c:	1c5a      	adds	r2, r3, #1
  40ae4e:	68fb      	ldr	r3, [r7, #12]
  40ae50:	639a      	str	r2, [r3, #56]	; 0x38
}
  40ae52:	3710      	adds	r7, #16
  40ae54:	46bd      	mov	sp, r7
  40ae56:	bd80      	pop	{r7, pc}
  40ae58:	0040bee5 	.word	0x0040bee5
  40ae5c:	00412f69 	.word	0x00412f69

0040ae60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  40ae60:	b580      	push	{r7, lr}
  40ae62:	b082      	sub	sp, #8
  40ae64:	af00      	add	r7, sp, #0
  40ae66:	6078      	str	r0, [r7, #4]
  40ae68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  40ae6a:	687b      	ldr	r3, [r7, #4]
  40ae6c:	681b      	ldr	r3, [r3, #0]
  40ae6e:	2b00      	cmp	r3, #0
  40ae70:	d019      	beq.n	40aea6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  40ae72:	687b      	ldr	r3, [r7, #4]
  40ae74:	68da      	ldr	r2, [r3, #12]
  40ae76:	687b      	ldr	r3, [r7, #4]
  40ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ae7a:	441a      	add	r2, r3
  40ae7c:	687b      	ldr	r3, [r7, #4]
  40ae7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  40ae80:	687b      	ldr	r3, [r7, #4]
  40ae82:	68da      	ldr	r2, [r3, #12]
  40ae84:	687b      	ldr	r3, [r7, #4]
  40ae86:	685b      	ldr	r3, [r3, #4]
  40ae88:	429a      	cmp	r2, r3
  40ae8a:	d303      	bcc.n	40ae94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  40ae8c:	687b      	ldr	r3, [r7, #4]
  40ae8e:	681a      	ldr	r2, [r3, #0]
  40ae90:	687b      	ldr	r3, [r7, #4]
  40ae92:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  40ae94:	687b      	ldr	r3, [r7, #4]
  40ae96:	68da      	ldr	r2, [r3, #12]
  40ae98:	687b      	ldr	r3, [r7, #4]
  40ae9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ae9c:	6838      	ldr	r0, [r7, #0]
  40ae9e:	4611      	mov	r1, r2
  40aea0:	461a      	mov	r2, r3
  40aea2:	4b02      	ldr	r3, [pc, #8]	; (40aeac <prvCopyDataFromQueue+0x4c>)
  40aea4:	4798      	blx	r3
	}
}
  40aea6:	3708      	adds	r7, #8
  40aea8:	46bd      	mov	sp, r7
  40aeaa:	bd80      	pop	{r7, pc}
  40aeac:	00412f69 	.word	0x00412f69

0040aeb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  40aeb0:	b580      	push	{r7, lr}
  40aeb2:	b082      	sub	sp, #8
  40aeb4:	af00      	add	r7, sp, #0
  40aeb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  40aeb8:	4b23      	ldr	r3, [pc, #140]	; (40af48 <prvUnlockQueue+0x98>)
  40aeba:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40aebc:	e014      	b.n	40aee8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40aebe:	687b      	ldr	r3, [r7, #4]
  40aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40aec2:	2b00      	cmp	r3, #0
  40aec4:	d00f      	beq.n	40aee6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40aec6:	687b      	ldr	r3, [r7, #4]
  40aec8:	3324      	adds	r3, #36	; 0x24
  40aeca:	4618      	mov	r0, r3
  40aecc:	4b1f      	ldr	r3, [pc, #124]	; (40af4c <prvUnlockQueue+0x9c>)
  40aece:	4798      	blx	r3
  40aed0:	4603      	mov	r3, r0
  40aed2:	2b00      	cmp	r3, #0
  40aed4:	d001      	beq.n	40aeda <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40aed6:	4b1e      	ldr	r3, [pc, #120]	; (40af50 <prvUnlockQueue+0xa0>)
  40aed8:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  40aeda:	687b      	ldr	r3, [r7, #4]
  40aedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40aede:	1e5a      	subs	r2, r3, #1
  40aee0:	687b      	ldr	r3, [r7, #4]
  40aee2:	649a      	str	r2, [r3, #72]	; 0x48
  40aee4:	e000      	b.n	40aee8 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  40aee6:	e003      	b.n	40aef0 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40aee8:	687b      	ldr	r3, [r7, #4]
  40aeea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40aeec:	2b00      	cmp	r3, #0
  40aeee:	dce6      	bgt.n	40aebe <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  40aef0:	687b      	ldr	r3, [r7, #4]
  40aef2:	f04f 32ff 	mov.w	r2, #4294967295
  40aef6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40aef8:	4b16      	ldr	r3, [pc, #88]	; (40af54 <prvUnlockQueue+0xa4>)
  40aefa:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40aefc:	4b12      	ldr	r3, [pc, #72]	; (40af48 <prvUnlockQueue+0x98>)
  40aefe:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40af00:	e014      	b.n	40af2c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40af02:	687b      	ldr	r3, [r7, #4]
  40af04:	691b      	ldr	r3, [r3, #16]
  40af06:	2b00      	cmp	r3, #0
  40af08:	d00f      	beq.n	40af2a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40af0a:	687b      	ldr	r3, [r7, #4]
  40af0c:	3310      	adds	r3, #16
  40af0e:	4618      	mov	r0, r3
  40af10:	4b0e      	ldr	r3, [pc, #56]	; (40af4c <prvUnlockQueue+0x9c>)
  40af12:	4798      	blx	r3
  40af14:	4603      	mov	r3, r0
  40af16:	2b00      	cmp	r3, #0
  40af18:	d001      	beq.n	40af1e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  40af1a:	4b0d      	ldr	r3, [pc, #52]	; (40af50 <prvUnlockQueue+0xa0>)
  40af1c:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  40af1e:	687b      	ldr	r3, [r7, #4]
  40af20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40af22:	1e5a      	subs	r2, r3, #1
  40af24:	687b      	ldr	r3, [r7, #4]
  40af26:	645a      	str	r2, [r3, #68]	; 0x44
  40af28:	e000      	b.n	40af2c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  40af2a:	e003      	b.n	40af34 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40af2c:	687b      	ldr	r3, [r7, #4]
  40af2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40af30:	2b00      	cmp	r3, #0
  40af32:	dce6      	bgt.n	40af02 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40af34:	687b      	ldr	r3, [r7, #4]
  40af36:	f04f 32ff 	mov.w	r2, #4294967295
  40af3a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40af3c:	4b05      	ldr	r3, [pc, #20]	; (40af54 <prvUnlockQueue+0xa4>)
  40af3e:	4798      	blx	r3
}
  40af40:	3708      	adds	r7, #8
  40af42:	46bd      	mov	sp, r7
  40af44:	bd80      	pop	{r7, pc}
  40af46:	bf00      	nop
  40af48:	0040a775 	.word	0x0040a775
  40af4c:	0040b881 	.word	0x0040b881
  40af50:	0040b9e9 	.word	0x0040b9e9
  40af54:	0040a799 	.word	0x0040a799

0040af58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  40af58:	b580      	push	{r7, lr}
  40af5a:	b084      	sub	sp, #16
  40af5c:	af00      	add	r7, sp, #0
  40af5e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  40af60:	4b08      	ldr	r3, [pc, #32]	; (40af84 <prvIsQueueEmpty+0x2c>)
  40af62:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  40af64:	687b      	ldr	r3, [r7, #4]
  40af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40af68:	2b00      	cmp	r3, #0
  40af6a:	bf14      	ite	ne
  40af6c:	2300      	movne	r3, #0
  40af6e:	2301      	moveq	r3, #1
  40af70:	b2db      	uxtb	r3, r3
  40af72:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40af74:	4b04      	ldr	r3, [pc, #16]	; (40af88 <prvIsQueueEmpty+0x30>)
  40af76:	4798      	blx	r3

	return xReturn;
  40af78:	68fb      	ldr	r3, [r7, #12]
}
  40af7a:	4618      	mov	r0, r3
  40af7c:	3710      	adds	r7, #16
  40af7e:	46bd      	mov	sp, r7
  40af80:	bd80      	pop	{r7, pc}
  40af82:	bf00      	nop
  40af84:	0040a775 	.word	0x0040a775
  40af88:	0040a799 	.word	0x0040a799

0040af8c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  40af8c:	b580      	push	{r7, lr}
  40af8e:	b084      	sub	sp, #16
  40af90:	af00      	add	r7, sp, #0
  40af92:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  40af94:	4b09      	ldr	r3, [pc, #36]	; (40afbc <prvIsQueueFull+0x30>)
  40af96:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  40af98:	687b      	ldr	r3, [r7, #4]
  40af9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40af9c:	687b      	ldr	r3, [r7, #4]
  40af9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40afa0:	429a      	cmp	r2, r3
  40afa2:	bf14      	ite	ne
  40afa4:	2300      	movne	r3, #0
  40afa6:	2301      	moveq	r3, #1
  40afa8:	b2db      	uxtb	r3, r3
  40afaa:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40afac:	4b04      	ldr	r3, [pc, #16]	; (40afc0 <prvIsQueueFull+0x34>)
  40afae:	4798      	blx	r3

	return xReturn;
  40afb0:	68fb      	ldr	r3, [r7, #12]
}
  40afb2:	4618      	mov	r0, r3
  40afb4:	3710      	adds	r7, #16
  40afb6:	46bd      	mov	sp, r7
  40afb8:	bd80      	pop	{r7, pc}
  40afba:	bf00      	nop
  40afbc:	0040a775 	.word	0x0040a775
  40afc0:	0040a799 	.word	0x0040a799

0040afc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  40afc4:	b580      	push	{r7, lr}
  40afc6:	b082      	sub	sp, #8
  40afc8:	af00      	add	r7, sp, #0
  40afca:	6078      	str	r0, [r7, #4]
  40afcc:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40afce:	4b12      	ldr	r3, [pc, #72]	; (40b018 <vQueueWaitForMessageRestricted+0x54>)
  40afd0:	4798      	blx	r3
  40afd2:	687b      	ldr	r3, [r7, #4]
  40afd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
  40afda:	d102      	bne.n	40afe2 <vQueueWaitForMessageRestricted+0x1e>
  40afdc:	687b      	ldr	r3, [r7, #4]
  40afde:	2200      	movs	r2, #0
  40afe0:	645a      	str	r2, [r3, #68]	; 0x44
  40afe2:	687b      	ldr	r3, [r7, #4]
  40afe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40afe6:	f1b3 3fff 	cmp.w	r3, #4294967295
  40afea:	d102      	bne.n	40aff2 <vQueueWaitForMessageRestricted+0x2e>
  40afec:	687b      	ldr	r3, [r7, #4]
  40afee:	2200      	movs	r2, #0
  40aff0:	649a      	str	r2, [r3, #72]	; 0x48
  40aff2:	4b0a      	ldr	r3, [pc, #40]	; (40b01c <vQueueWaitForMessageRestricted+0x58>)
  40aff4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40aff6:	687b      	ldr	r3, [r7, #4]
  40aff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40affa:	2b00      	cmp	r3, #0
  40affc:	d105      	bne.n	40b00a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40affe:	687b      	ldr	r3, [r7, #4]
  40b000:	3324      	adds	r3, #36	; 0x24
  40b002:	4618      	mov	r0, r3
  40b004:	6839      	ldr	r1, [r7, #0]
  40b006:	4b06      	ldr	r3, [pc, #24]	; (40b020 <vQueueWaitForMessageRestricted+0x5c>)
  40b008:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  40b00a:	6878      	ldr	r0, [r7, #4]
  40b00c:	4b05      	ldr	r3, [pc, #20]	; (40b024 <vQueueWaitForMessageRestricted+0x60>)
  40b00e:	4798      	blx	r3
	}
  40b010:	3708      	adds	r7, #8
  40b012:	46bd      	mov	sp, r7
  40b014:	bd80      	pop	{r7, pc}
  40b016:	bf00      	nop
  40b018:	0040a775 	.word	0x0040a775
  40b01c:	0040a799 	.word	0x0040a799
  40b020:	0040b831 	.word	0x0040b831
  40b024:	0040aeb1 	.word	0x0040aeb1

0040b028 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  40b028:	b590      	push	{r4, r7, lr}
  40b02a:	b08b      	sub	sp, #44	; 0x2c
  40b02c:	af02      	add	r7, sp, #8
  40b02e:	60f8      	str	r0, [r7, #12]
  40b030:	60b9      	str	r1, [r7, #8]
  40b032:	603b      	str	r3, [r7, #0]
  40b034:	4613      	mov	r3, r2
  40b036:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  40b038:	88fb      	ldrh	r3, [r7, #6]
  40b03a:	4618      	mov	r0, r3
  40b03c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  40b03e:	4b49      	ldr	r3, [pc, #292]	; (40b164 <xTaskGenericCreate+0x13c>)
  40b040:	4798      	blx	r3
  40b042:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40b044:	69bb      	ldr	r3, [r7, #24]
  40b046:	2b00      	cmp	r3, #0
  40b048:	d074      	beq.n	40b134 <xTaskGenericCreate+0x10c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  40b04a:	69bb      	ldr	r3, [r7, #24]
  40b04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40b04e:	88fb      	ldrh	r3, [r7, #6]
  40b050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40b054:	3b01      	subs	r3, #1
  40b056:	009b      	lsls	r3, r3, #2
  40b058:	4413      	add	r3, r2
  40b05a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
  40b05c:	697b      	ldr	r3, [r7, #20]
  40b05e:	f023 0307 	bic.w	r3, r3, #7
  40b062:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40b064:	88fb      	ldrh	r3, [r7, #6]
  40b066:	9300      	str	r3, [sp, #0]
  40b068:	69b8      	ldr	r0, [r7, #24]
  40b06a:	68b9      	ldr	r1, [r7, #8]
  40b06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40b06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40b070:	4c3d      	ldr	r4, [pc, #244]	; (40b168 <xTaskGenericCreate+0x140>)
  40b072:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40b074:	6978      	ldr	r0, [r7, #20]
  40b076:	68f9      	ldr	r1, [r7, #12]
  40b078:	683a      	ldr	r2, [r7, #0]
  40b07a:	4b3c      	ldr	r3, [pc, #240]	; (40b16c <xTaskGenericCreate+0x144>)
  40b07c:	4798      	blx	r3
  40b07e:	4602      	mov	r2, r0
  40b080:	69bb      	ldr	r3, [r7, #24]
  40b082:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  40b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40b086:	2b00      	cmp	r3, #0
  40b088:	d002      	beq.n	40b090 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  40b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40b08c:	69ba      	ldr	r2, [r7, #24]
  40b08e:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40b090:	4b37      	ldr	r3, [pc, #220]	; (40b170 <xTaskGenericCreate+0x148>)
  40b092:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40b094:	4b37      	ldr	r3, [pc, #220]	; (40b174 <xTaskGenericCreate+0x14c>)
  40b096:	681b      	ldr	r3, [r3, #0]
  40b098:	1c5a      	adds	r2, r3, #1
  40b09a:	4b36      	ldr	r3, [pc, #216]	; (40b174 <xTaskGenericCreate+0x14c>)
  40b09c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  40b09e:	4b36      	ldr	r3, [pc, #216]	; (40b178 <xTaskGenericCreate+0x150>)
  40b0a0:	681b      	ldr	r3, [r3, #0]
  40b0a2:	2b00      	cmp	r3, #0
  40b0a4:	d109      	bne.n	40b0ba <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40b0a6:	4b34      	ldr	r3, [pc, #208]	; (40b178 <xTaskGenericCreate+0x150>)
  40b0a8:	69ba      	ldr	r2, [r7, #24]
  40b0aa:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  40b0ac:	4b31      	ldr	r3, [pc, #196]	; (40b174 <xTaskGenericCreate+0x14c>)
  40b0ae:	681b      	ldr	r3, [r3, #0]
  40b0b0:	2b01      	cmp	r3, #1
  40b0b2:	d10f      	bne.n	40b0d4 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  40b0b4:	4b31      	ldr	r3, [pc, #196]	; (40b17c <xTaskGenericCreate+0x154>)
  40b0b6:	4798      	blx	r3
  40b0b8:	e00c      	b.n	40b0d4 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40b0ba:	4b31      	ldr	r3, [pc, #196]	; (40b180 <xTaskGenericCreate+0x158>)
  40b0bc:	681b      	ldr	r3, [r3, #0]
  40b0be:	2b00      	cmp	r3, #0
  40b0c0:	d108      	bne.n	40b0d4 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40b0c2:	4b2d      	ldr	r3, [pc, #180]	; (40b178 <xTaskGenericCreate+0x150>)
  40b0c4:	681b      	ldr	r3, [r3, #0]
  40b0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40b0ca:	429a      	cmp	r2, r3
  40b0cc:	d802      	bhi.n	40b0d4 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
  40b0ce:	4b2a      	ldr	r3, [pc, #168]	; (40b178 <xTaskGenericCreate+0x150>)
  40b0d0:	69ba      	ldr	r2, [r7, #24]
  40b0d2:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  40b0d4:	69bb      	ldr	r3, [r7, #24]
  40b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b0d8:	4b2a      	ldr	r3, [pc, #168]	; (40b184 <xTaskGenericCreate+0x15c>)
  40b0da:	681b      	ldr	r3, [r3, #0]
  40b0dc:	429a      	cmp	r2, r3
  40b0de:	d903      	bls.n	40b0e8 <xTaskGenericCreate+0xc0>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40b0e0:	69bb      	ldr	r3, [r7, #24]
  40b0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b0e4:	4b27      	ldr	r3, [pc, #156]	; (40b184 <xTaskGenericCreate+0x15c>)
  40b0e6:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40b0e8:	4b27      	ldr	r3, [pc, #156]	; (40b188 <xTaskGenericCreate+0x160>)
  40b0ea:	681a      	ldr	r2, [r3, #0]
  40b0ec:	69bb      	ldr	r3, [r7, #24]
  40b0ee:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
  40b0f0:	4b25      	ldr	r3, [pc, #148]	; (40b188 <xTaskGenericCreate+0x160>)
  40b0f2:	681b      	ldr	r3, [r3, #0]
  40b0f4:	1c5a      	adds	r2, r3, #1
  40b0f6:	4b24      	ldr	r3, [pc, #144]	; (40b188 <xTaskGenericCreate+0x160>)
  40b0f8:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40b0fa:	69bb      	ldr	r3, [r7, #24]
  40b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b0fe:	4b23      	ldr	r3, [pc, #140]	; (40b18c <xTaskGenericCreate+0x164>)
  40b100:	681b      	ldr	r3, [r3, #0]
  40b102:	429a      	cmp	r2, r3
  40b104:	d903      	bls.n	40b10e <xTaskGenericCreate+0xe6>
  40b106:	69bb      	ldr	r3, [r7, #24]
  40b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b10a:	4b20      	ldr	r3, [pc, #128]	; (40b18c <xTaskGenericCreate+0x164>)
  40b10c:	601a      	str	r2, [r3, #0]
  40b10e:	69bb      	ldr	r3, [r7, #24]
  40b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b112:	4613      	mov	r3, r2
  40b114:	009b      	lsls	r3, r3, #2
  40b116:	4413      	add	r3, r2
  40b118:	009b      	lsls	r3, r3, #2
  40b11a:	4a1d      	ldr	r2, [pc, #116]	; (40b190 <xTaskGenericCreate+0x168>)
  40b11c:	441a      	add	r2, r3
  40b11e:	69bb      	ldr	r3, [r7, #24]
  40b120:	3304      	adds	r3, #4
  40b122:	4610      	mov	r0, r2
  40b124:	4619      	mov	r1, r3
  40b126:	4b1b      	ldr	r3, [pc, #108]	; (40b194 <xTaskGenericCreate+0x16c>)
  40b128:	4798      	blx	r3

			xReturn = pdPASS;
  40b12a:	2301      	movs	r3, #1
  40b12c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40b12e:	4b1a      	ldr	r3, [pc, #104]	; (40b198 <xTaskGenericCreate+0x170>)
  40b130:	4798      	blx	r3
  40b132:	e002      	b.n	40b13a <xTaskGenericCreate+0x112>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40b134:	f04f 33ff 	mov.w	r3, #4294967295
  40b138:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  40b13a:	69fb      	ldr	r3, [r7, #28]
  40b13c:	2b01      	cmp	r3, #1
  40b13e:	d10b      	bne.n	40b158 <xTaskGenericCreate+0x130>
	{
		if( xSchedulerRunning != pdFALSE )
  40b140:	4b0f      	ldr	r3, [pc, #60]	; (40b180 <xTaskGenericCreate+0x158>)
  40b142:	681b      	ldr	r3, [r3, #0]
  40b144:	2b00      	cmp	r3, #0
  40b146:	d007      	beq.n	40b158 <xTaskGenericCreate+0x130>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40b148:	4b0b      	ldr	r3, [pc, #44]	; (40b178 <xTaskGenericCreate+0x150>)
  40b14a:	681b      	ldr	r3, [r3, #0]
  40b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40b150:	429a      	cmp	r2, r3
  40b152:	d201      	bcs.n	40b158 <xTaskGenericCreate+0x130>
			{
				portYIELD_WITHIN_API();
  40b154:	4b11      	ldr	r3, [pc, #68]	; (40b19c <xTaskGenericCreate+0x174>)
  40b156:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  40b158:	69fb      	ldr	r3, [r7, #28]
}
  40b15a:	4618      	mov	r0, r3
  40b15c:	3724      	adds	r7, #36	; 0x24
  40b15e:	46bd      	mov	sp, r7
  40b160:	bd90      	pop	{r4, r7, pc}
  40b162:	bf00      	nop
  40b164:	0040bc1d 	.word	0x0040bc1d
  40b168:	0040ba29 	.word	0x0040ba29
  40b16c:	0040a699 	.word	0x0040a699
  40b170:	0040a775 	.word	0x0040a775
  40b174:	2000354c 	.word	0x2000354c
  40b178:	20003438 	.word	0x20003438
  40b17c:	0040ba9d 	.word	0x0040ba9d
  40b180:	2000355c 	.word	0x2000355c
  40b184:	20003554 	.word	0x20003554
  40b188:	20003570 	.word	0x20003570
  40b18c:	20003558 	.word	0x20003558
  40b190:	2000343c 	.word	0x2000343c
  40b194:	0040a4e1 	.word	0x0040a4e1
  40b198:	0040a799 	.word	0x0040a799
  40b19c:	0040a75d 	.word	0x0040a75d

0040b1a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
  40b1a0:	b580      	push	{r7, lr}
  40b1a2:	b084      	sub	sp, #16
  40b1a4:	af00      	add	r7, sp, #0
  40b1a6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
  40b1a8:	4b1e      	ldr	r3, [pc, #120]	; (40b224 <vTaskDelete+0x84>)
  40b1aa:	4798      	blx	r3
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
  40b1ac:	4b1e      	ldr	r3, [pc, #120]	; (40b228 <vTaskDelete+0x88>)
  40b1ae:	681b      	ldr	r3, [r3, #0]
  40b1b0:	687a      	ldr	r2, [r7, #4]
  40b1b2:	429a      	cmp	r2, r3
  40b1b4:	d101      	bne.n	40b1ba <vTaskDelete+0x1a>
			{
				pxTaskToDelete = NULL;
  40b1b6:	2300      	movs	r3, #0
  40b1b8:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
  40b1ba:	687b      	ldr	r3, [r7, #4]
  40b1bc:	2b00      	cmp	r3, #0
  40b1be:	d102      	bne.n	40b1c6 <vTaskDelete+0x26>
  40b1c0:	4b19      	ldr	r3, [pc, #100]	; (40b228 <vTaskDelete+0x88>)
  40b1c2:	681b      	ldr	r3, [r3, #0]
  40b1c4:	e000      	b.n	40b1c8 <vTaskDelete+0x28>
  40b1c6:	687b      	ldr	r3, [r7, #4]
  40b1c8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
  40b1ca:	68fb      	ldr	r3, [r7, #12]
  40b1cc:	3304      	adds	r3, #4
  40b1ce:	4618      	mov	r0, r3
  40b1d0:	4b16      	ldr	r3, [pc, #88]	; (40b22c <vTaskDelete+0x8c>)
  40b1d2:	4798      	blx	r3

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
  40b1d4:	68fb      	ldr	r3, [r7, #12]
  40b1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40b1d8:	2b00      	cmp	r3, #0
  40b1da:	d004      	beq.n	40b1e6 <vTaskDelete+0x46>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
  40b1dc:	68fb      	ldr	r3, [r7, #12]
  40b1de:	3318      	adds	r3, #24
  40b1e0:	4618      	mov	r0, r3
  40b1e2:	4b12      	ldr	r3, [pc, #72]	; (40b22c <vTaskDelete+0x8c>)
  40b1e4:	4798      	blx	r3
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
  40b1e6:	68fb      	ldr	r3, [r7, #12]
  40b1e8:	3304      	adds	r3, #4
  40b1ea:	4811      	ldr	r0, [pc, #68]	; (40b230 <vTaskDelete+0x90>)
  40b1ec:	4619      	mov	r1, r3
  40b1ee:	4b11      	ldr	r3, [pc, #68]	; (40b234 <vTaskDelete+0x94>)
  40b1f0:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
  40b1f2:	4b11      	ldr	r3, [pc, #68]	; (40b238 <vTaskDelete+0x98>)
  40b1f4:	681b      	ldr	r3, [r3, #0]
  40b1f6:	1c5a      	adds	r2, r3, #1
  40b1f8:	4b0f      	ldr	r3, [pc, #60]	; (40b238 <vTaskDelete+0x98>)
  40b1fa:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
  40b1fc:	4b0f      	ldr	r3, [pc, #60]	; (40b23c <vTaskDelete+0x9c>)
  40b1fe:	681b      	ldr	r3, [r3, #0]
  40b200:	1c5a      	adds	r2, r3, #1
  40b202:	4b0e      	ldr	r3, [pc, #56]	; (40b23c <vTaskDelete+0x9c>)
  40b204:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
  40b206:	4b0e      	ldr	r3, [pc, #56]	; (40b240 <vTaskDelete+0xa0>)
  40b208:	4798      	blx	r3

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
  40b20a:	4b0e      	ldr	r3, [pc, #56]	; (40b244 <vTaskDelete+0xa4>)
  40b20c:	681b      	ldr	r3, [r3, #0]
  40b20e:	2b00      	cmp	r3, #0
  40b210:	d004      	beq.n	40b21c <vTaskDelete+0x7c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
  40b212:	687b      	ldr	r3, [r7, #4]
  40b214:	2b00      	cmp	r3, #0
  40b216:	d101      	bne.n	40b21c <vTaskDelete+0x7c>
			{
				portYIELD_WITHIN_API();
  40b218:	4b0b      	ldr	r3, [pc, #44]	; (40b248 <vTaskDelete+0xa8>)
  40b21a:	4798      	blx	r3
			}
		}
	}
  40b21c:	3710      	adds	r7, #16
  40b21e:	46bd      	mov	sp, r7
  40b220:	bd80      	pop	{r7, pc}
  40b222:	bf00      	nop
  40b224:	0040a775 	.word	0x0040a775
  40b228:	20003438 	.word	0x20003438
  40b22c:	0040a5a1 	.word	0x0040a5a1
  40b230:	20003520 	.word	0x20003520
  40b234:	0040a4e1 	.word	0x0040a4e1
  40b238:	20003534 	.word	0x20003534
  40b23c:	20003570 	.word	0x20003570
  40b240:	0040a799 	.word	0x0040a799
  40b244:	2000355c 	.word	0x2000355c
  40b248:	0040a75d 	.word	0x0040a75d

0040b24c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  40b24c:	b580      	push	{r7, lr}
  40b24e:	b084      	sub	sp, #16
  40b250:	af00      	add	r7, sp, #0
  40b252:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40b254:	2300      	movs	r3, #0
  40b256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
  40b258:	687b      	ldr	r3, [r7, #4]
  40b25a:	2b00      	cmp	r3, #0
  40b25c:	d012      	beq.n	40b284 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40b25e:	4b0d      	ldr	r3, [pc, #52]	; (40b294 <vTaskDelay+0x48>)
  40b260:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40b262:	4b0d      	ldr	r3, [pc, #52]	; (40b298 <vTaskDelay+0x4c>)
  40b264:	681a      	ldr	r2, [r3, #0]
  40b266:	687b      	ldr	r3, [r7, #4]
  40b268:	4413      	add	r3, r2
  40b26a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40b26c:	4b0b      	ldr	r3, [pc, #44]	; (40b29c <vTaskDelay+0x50>)
  40b26e:	681b      	ldr	r3, [r3, #0]
  40b270:	3304      	adds	r3, #4
  40b272:	4618      	mov	r0, r3
  40b274:	4b0a      	ldr	r3, [pc, #40]	; (40b2a0 <vTaskDelay+0x54>)
  40b276:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40b278:	68b8      	ldr	r0, [r7, #8]
  40b27a:	4b0a      	ldr	r3, [pc, #40]	; (40b2a4 <vTaskDelay+0x58>)
  40b27c:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  40b27e:	4b0a      	ldr	r3, [pc, #40]	; (40b2a8 <vTaskDelay+0x5c>)
  40b280:	4798      	blx	r3
  40b282:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
  40b284:	68fb      	ldr	r3, [r7, #12]
  40b286:	2b00      	cmp	r3, #0
  40b288:	d101      	bne.n	40b28e <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  40b28a:	4b08      	ldr	r3, [pc, #32]	; (40b2ac <vTaskDelay+0x60>)
  40b28c:	4798      	blx	r3
		}
	}
  40b28e:	3710      	adds	r7, #16
  40b290:	46bd      	mov	sp, r7
  40b292:	bd80      	pop	{r7, pc}
  40b294:	0040b325 	.word	0x0040b325
  40b298:	20003550 	.word	0x20003550
  40b29c:	20003438 	.word	0x20003438
  40b2a0:	0040a5a1 	.word	0x0040a5a1
  40b2a4:	0040bbad 	.word	0x0040bbad
  40b2a8:	0040b341 	.word	0x0040b341
  40b2ac:	0040a75d 	.word	0x0040a75d

0040b2b0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  40b2b0:	b590      	push	{r4, r7, lr}
  40b2b2:	b087      	sub	sp, #28
  40b2b4:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
  40b2b6:	2300      	movs	r3, #0
  40b2b8:	9300      	str	r3, [sp, #0]
  40b2ba:	2300      	movs	r3, #0
  40b2bc:	9301      	str	r3, [sp, #4]
  40b2be:	2300      	movs	r3, #0
  40b2c0:	9302      	str	r3, [sp, #8]
  40b2c2:	2300      	movs	r3, #0
  40b2c4:	9303      	str	r3, [sp, #12]
  40b2c6:	4810      	ldr	r0, [pc, #64]	; (40b308 <vTaskStartScheduler+0x58>)
  40b2c8:	4910      	ldr	r1, [pc, #64]	; (40b30c <vTaskStartScheduler+0x5c>)
  40b2ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  40b2ce:	2300      	movs	r3, #0
  40b2d0:	4c0f      	ldr	r4, [pc, #60]	; (40b310 <vTaskStartScheduler+0x60>)
  40b2d2:	47a0      	blx	r4
  40b2d4:	6078      	str	r0, [r7, #4]

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40b2d6:	687b      	ldr	r3, [r7, #4]
  40b2d8:	2b01      	cmp	r3, #1
  40b2da:	d102      	bne.n	40b2e2 <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
  40b2dc:	4b0d      	ldr	r3, [pc, #52]	; (40b314 <vTaskStartScheduler+0x64>)
  40b2de:	4798      	blx	r3
  40b2e0:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  40b2e2:	687b      	ldr	r3, [r7, #4]
  40b2e4:	2b01      	cmp	r3, #1
  40b2e6:	d10b      	bne.n	40b300 <vTaskStartScheduler+0x50>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40b2e8:	f04f 0000 	mov.w	r0, #0
  40b2ec:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
  40b2f0:	4b09      	ldr	r3, [pc, #36]	; (40b318 <vTaskStartScheduler+0x68>)
  40b2f2:	2201      	movs	r2, #1
  40b2f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0;
  40b2f6:	4b09      	ldr	r3, [pc, #36]	; (40b31c <vTaskStartScheduler+0x6c>)
  40b2f8:	2200      	movs	r2, #0
  40b2fa:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
  40b2fc:	4b08      	ldr	r3, [pc, #32]	; (40b320 <vTaskStartScheduler+0x70>)
  40b2fe:	4798      	blx	r3
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
  40b300:	370c      	adds	r7, #12
  40b302:	46bd      	mov	sp, r7
  40b304:	bd90      	pop	{r4, r7, pc}
  40b306:	bf00      	nop
  40b308:	0040ba01 	.word	0x0040ba01
  40b30c:	0041d434 	.word	0x0041d434
  40b310:	0040b029 	.word	0x0040b029
  40b314:	0040bf69 	.word	0x0040bf69
  40b318:	2000355c 	.word	0x2000355c
  40b31c:	20003550 	.word	0x20003550
  40b320:	0040a71d 	.word	0x0040a71d

0040b324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40b324:	b480      	push	{r7}
  40b326:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  40b328:	4b04      	ldr	r3, [pc, #16]	; (40b33c <vTaskSuspendAll+0x18>)
  40b32a:	681b      	ldr	r3, [r3, #0]
  40b32c:	1c5a      	adds	r2, r3, #1
  40b32e:	4b03      	ldr	r3, [pc, #12]	; (40b33c <vTaskSuspendAll+0x18>)
  40b330:	601a      	str	r2, [r3, #0]
}
  40b332:	46bd      	mov	sp, r7
  40b334:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b338:	4770      	bx	lr
  40b33a:	bf00      	nop
  40b33c:	20003560 	.word	0x20003560

0040b340 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  40b340:	b590      	push	{r4, r7, lr}
  40b342:	b083      	sub	sp, #12
  40b344:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40b346:	2300      	movs	r3, #0
  40b348:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  40b34a:	4b32      	ldr	r3, [pc, #200]	; (40b414 <xTaskResumeAll+0xd4>)
  40b34c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40b34e:	4b32      	ldr	r3, [pc, #200]	; (40b418 <xTaskResumeAll+0xd8>)
  40b350:	681b      	ldr	r3, [r3, #0]
  40b352:	1e5a      	subs	r2, r3, #1
  40b354:	4b30      	ldr	r3, [pc, #192]	; (40b418 <xTaskResumeAll+0xd8>)
  40b356:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40b358:	4b2f      	ldr	r3, [pc, #188]	; (40b418 <xTaskResumeAll+0xd8>)
  40b35a:	681b      	ldr	r3, [r3, #0]
  40b35c:	2b00      	cmp	r3, #0
  40b35e:	d152      	bne.n	40b406 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
  40b360:	4b2e      	ldr	r3, [pc, #184]	; (40b41c <xTaskResumeAll+0xdc>)
  40b362:	681b      	ldr	r3, [r3, #0]
  40b364:	2b00      	cmp	r3, #0
  40b366:	d04e      	beq.n	40b406 <xTaskResumeAll+0xc6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  40b368:	2300      	movs	r3, #0
  40b36a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40b36c:	e027      	b.n	40b3be <xTaskResumeAll+0x7e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  40b36e:	4b2c      	ldr	r3, [pc, #176]	; (40b420 <xTaskResumeAll+0xe0>)
  40b370:	68db      	ldr	r3, [r3, #12]
  40b372:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
  40b374:	f104 0318 	add.w	r3, r4, #24
  40b378:	4618      	mov	r0, r3
  40b37a:	4b2a      	ldr	r3, [pc, #168]	; (40b424 <xTaskResumeAll+0xe4>)
  40b37c:	4798      	blx	r3
					vListRemove( &( pxTCB->xGenericListItem ) );
  40b37e:	1d23      	adds	r3, r4, #4
  40b380:	4618      	mov	r0, r3
  40b382:	4b28      	ldr	r3, [pc, #160]	; (40b424 <xTaskResumeAll+0xe4>)
  40b384:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40b386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b388:	4b27      	ldr	r3, [pc, #156]	; (40b428 <xTaskResumeAll+0xe8>)
  40b38a:	681b      	ldr	r3, [r3, #0]
  40b38c:	429a      	cmp	r2, r3
  40b38e:	d902      	bls.n	40b396 <xTaskResumeAll+0x56>
  40b390:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b392:	4b25      	ldr	r3, [pc, #148]	; (40b428 <xTaskResumeAll+0xe8>)
  40b394:	601a      	str	r2, [r3, #0]
  40b396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b398:	4613      	mov	r3, r2
  40b39a:	009b      	lsls	r3, r3, #2
  40b39c:	4413      	add	r3, r2
  40b39e:	009b      	lsls	r3, r3, #2
  40b3a0:	4a22      	ldr	r2, [pc, #136]	; (40b42c <xTaskResumeAll+0xec>)
  40b3a2:	441a      	add	r2, r3
  40b3a4:	1d23      	adds	r3, r4, #4
  40b3a6:	4610      	mov	r0, r2
  40b3a8:	4619      	mov	r1, r3
  40b3aa:	4b21      	ldr	r3, [pc, #132]	; (40b430 <xTaskResumeAll+0xf0>)
  40b3ac:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40b3ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b3b0:	4b20      	ldr	r3, [pc, #128]	; (40b434 <xTaskResumeAll+0xf4>)
  40b3b2:	681b      	ldr	r3, [r3, #0]
  40b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b3b6:	429a      	cmp	r2, r3
  40b3b8:	d301      	bcc.n	40b3be <xTaskResumeAll+0x7e>
					{
						xYieldRequired = pdTRUE;
  40b3ba:	2301      	movs	r3, #1
  40b3bc:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40b3be:	4b18      	ldr	r3, [pc, #96]	; (40b420 <xTaskResumeAll+0xe0>)
  40b3c0:	681b      	ldr	r3, [r3, #0]
  40b3c2:	2b00      	cmp	r3, #0
  40b3c4:	d1d3      	bne.n	40b36e <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  40b3c6:	4b1c      	ldr	r3, [pc, #112]	; (40b438 <xTaskResumeAll+0xf8>)
  40b3c8:	681b      	ldr	r3, [r3, #0]
  40b3ca:	2b00      	cmp	r3, #0
  40b3cc:	d00d      	beq.n	40b3ea <xTaskResumeAll+0xaa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  40b3ce:	e006      	b.n	40b3de <xTaskResumeAll+0x9e>
					{
						vTaskIncrementTick();
  40b3d0:	4b1a      	ldr	r3, [pc, #104]	; (40b43c <xTaskResumeAll+0xfc>)
  40b3d2:	4798      	blx	r3
						--uxMissedTicks;
  40b3d4:	4b18      	ldr	r3, [pc, #96]	; (40b438 <xTaskResumeAll+0xf8>)
  40b3d6:	681b      	ldr	r3, [r3, #0]
  40b3d8:	1e5a      	subs	r2, r3, #1
  40b3da:	4b17      	ldr	r3, [pc, #92]	; (40b438 <xTaskResumeAll+0xf8>)
  40b3dc:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  40b3de:	4b16      	ldr	r3, [pc, #88]	; (40b438 <xTaskResumeAll+0xf8>)
  40b3e0:	681b      	ldr	r3, [r3, #0]
  40b3e2:	2b00      	cmp	r3, #0
  40b3e4:	d1f4      	bne.n	40b3d0 <xTaskResumeAll+0x90>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40b3e6:	2301      	movs	r3, #1
  40b3e8:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40b3ea:	683b      	ldr	r3, [r7, #0]
  40b3ec:	2b01      	cmp	r3, #1
  40b3ee:	d003      	beq.n	40b3f8 <xTaskResumeAll+0xb8>
  40b3f0:	4b13      	ldr	r3, [pc, #76]	; (40b440 <xTaskResumeAll+0x100>)
  40b3f2:	681b      	ldr	r3, [r3, #0]
  40b3f4:	2b01      	cmp	r3, #1
  40b3f6:	d106      	bne.n	40b406 <xTaskResumeAll+0xc6>
				{
					xAlreadyYielded = pdTRUE;
  40b3f8:	2301      	movs	r3, #1
  40b3fa:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  40b3fc:	4b10      	ldr	r3, [pc, #64]	; (40b440 <xTaskResumeAll+0x100>)
  40b3fe:	2200      	movs	r2, #0
  40b400:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40b402:	4b10      	ldr	r3, [pc, #64]	; (40b444 <xTaskResumeAll+0x104>)
  40b404:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40b406:	4b10      	ldr	r3, [pc, #64]	; (40b448 <xTaskResumeAll+0x108>)
  40b408:	4798      	blx	r3

	return xAlreadyYielded;
  40b40a:	687b      	ldr	r3, [r7, #4]
}
  40b40c:	4618      	mov	r0, r3
  40b40e:	370c      	adds	r7, #12
  40b410:	46bd      	mov	sp, r7
  40b412:	bd90      	pop	{r4, r7, pc}
  40b414:	0040a775 	.word	0x0040a775
  40b418:	20003560 	.word	0x20003560
  40b41c:	2000354c 	.word	0x2000354c
  40b420:	2000350c 	.word	0x2000350c
  40b424:	0040a5a1 	.word	0x0040a5a1
  40b428:	20003558 	.word	0x20003558
  40b42c:	2000343c 	.word	0x2000343c
  40b430:	0040a4e1 	.word	0x0040a4e1
  40b434:	20003438 	.word	0x20003438
  40b438:	20003564 	.word	0x20003564
  40b43c:	0040b585 	.word	0x0040b585
  40b440:	20003568 	.word	0x20003568
  40b444:	0040a75d 	.word	0x0040a75d
  40b448:	0040a799 	.word	0x0040a799

0040b44c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  40b44c:	b580      	push	{r7, lr}
  40b44e:	b082      	sub	sp, #8
  40b450:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40b452:	4b06      	ldr	r3, [pc, #24]	; (40b46c <xTaskGetTickCount+0x20>)
  40b454:	4798      	blx	r3
	{
		xTicks = xTickCount;
  40b456:	4b06      	ldr	r3, [pc, #24]	; (40b470 <xTaskGetTickCount+0x24>)
  40b458:	681b      	ldr	r3, [r3, #0]
  40b45a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  40b45c:	4b05      	ldr	r3, [pc, #20]	; (40b474 <xTaskGetTickCount+0x28>)
  40b45e:	4798      	blx	r3

	return xTicks;
  40b460:	687b      	ldr	r3, [r7, #4]
}
  40b462:	4618      	mov	r0, r3
  40b464:	3708      	adds	r7, #8
  40b466:	46bd      	mov	sp, r7
  40b468:	bd80      	pop	{r7, pc}
  40b46a:	bf00      	nop
  40b46c:	0040a775 	.word	0x0040a775
  40b470:	20003550 	.word	0x20003550
  40b474:	0040a799 	.word	0x0040a799

0040b478 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
  40b478:	b480      	push	{r7}
  40b47a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
  40b47c:	4b03      	ldr	r3, [pc, #12]	; (40b48c <uxTaskGetNumberOfTasks+0x14>)
  40b47e:	681b      	ldr	r3, [r3, #0]
}
  40b480:	4618      	mov	r0, r3
  40b482:	46bd      	mov	sp, r7
  40b484:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b488:	4770      	bx	lr
  40b48a:	bf00      	nop
  40b48c:	2000354c 	.word	0x2000354c

0040b490 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
  40b490:	b590      	push	{r4, r7, lr}
  40b492:	b085      	sub	sp, #20
  40b494:	af00      	add	r7, sp, #0
  40b496:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
  40b498:	4b2f      	ldr	r3, [pc, #188]	; (40b558 <vTaskList+0xc8>)
  40b49a:	4798      	blx	r3
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
  40b49c:	687b      	ldr	r3, [r7, #4]
  40b49e:	2200      	movs	r2, #0
  40b4a0:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
  40b4a2:	687c      	ldr	r4, [r7, #4]
  40b4a4:	4620      	mov	r0, r4
  40b4a6:	4b2d      	ldr	r3, [pc, #180]	; (40b55c <vTaskList+0xcc>)
  40b4a8:	4798      	blx	r3
  40b4aa:	4603      	mov	r3, r0
  40b4ac:	4423      	add	r3, r4
  40b4ae:	4a2c      	ldr	r2, [pc, #176]	; (40b560 <vTaskList+0xd0>)
  40b4b0:	8811      	ldrh	r1, [r2, #0]
  40b4b2:	7892      	ldrb	r2, [r2, #2]
  40b4b4:	8019      	strh	r1, [r3, #0]
  40b4b6:	709a      	strb	r2, [r3, #2]

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
  40b4b8:	4b2a      	ldr	r3, [pc, #168]	; (40b564 <vTaskList+0xd4>)
  40b4ba:	681b      	ldr	r3, [r3, #0]
  40b4bc:	3301      	adds	r3, #1
  40b4be:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
  40b4c0:	68fb      	ldr	r3, [r7, #12]
  40b4c2:	3b01      	subs	r3, #1
  40b4c4:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
  40b4c6:	4928      	ldr	r1, [pc, #160]	; (40b568 <vTaskList+0xd8>)
  40b4c8:	68fa      	ldr	r2, [r7, #12]
  40b4ca:	4613      	mov	r3, r2
  40b4cc:	009b      	lsls	r3, r3, #2
  40b4ce:	4413      	add	r3, r2
  40b4d0:	009b      	lsls	r3, r3, #2
  40b4d2:	440b      	add	r3, r1
  40b4d4:	681b      	ldr	r3, [r3, #0]
  40b4d6:	2b00      	cmp	r3, #0
  40b4d8:	d00b      	beq.n	40b4f2 <vTaskList+0x62>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
  40b4da:	68fa      	ldr	r2, [r7, #12]
  40b4dc:	4613      	mov	r3, r2
  40b4de:	009b      	lsls	r3, r3, #2
  40b4e0:	4413      	add	r3, r2
  40b4e2:	009b      	lsls	r3, r3, #2
  40b4e4:	4a20      	ldr	r2, [pc, #128]	; (40b568 <vTaskList+0xd8>)
  40b4e6:	4413      	add	r3, r2
  40b4e8:	6878      	ldr	r0, [r7, #4]
  40b4ea:	4619      	mov	r1, r3
  40b4ec:	2252      	movs	r2, #82	; 0x52
  40b4ee:	4b1f      	ldr	r3, [pc, #124]	; (40b56c <vTaskList+0xdc>)
  40b4f0:	4798      	blx	r3
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
  40b4f2:	68fb      	ldr	r3, [r7, #12]
  40b4f4:	2b00      	cmp	r3, #0
  40b4f6:	d1e3      	bne.n	40b4c0 <vTaskList+0x30>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
  40b4f8:	4b1d      	ldr	r3, [pc, #116]	; (40b570 <vTaskList+0xe0>)
  40b4fa:	681b      	ldr	r3, [r3, #0]
  40b4fc:	681b      	ldr	r3, [r3, #0]
  40b4fe:	2b00      	cmp	r3, #0
  40b500:	d006      	beq.n	40b510 <vTaskList+0x80>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
  40b502:	4b1b      	ldr	r3, [pc, #108]	; (40b570 <vTaskList+0xe0>)
  40b504:	681b      	ldr	r3, [r3, #0]
  40b506:	6878      	ldr	r0, [r7, #4]
  40b508:	4619      	mov	r1, r3
  40b50a:	2242      	movs	r2, #66	; 0x42
  40b50c:	4b17      	ldr	r3, [pc, #92]	; (40b56c <vTaskList+0xdc>)
  40b50e:	4798      	blx	r3
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
  40b510:	4b18      	ldr	r3, [pc, #96]	; (40b574 <vTaskList+0xe4>)
  40b512:	681b      	ldr	r3, [r3, #0]
  40b514:	681b      	ldr	r3, [r3, #0]
  40b516:	2b00      	cmp	r3, #0
  40b518:	d006      	beq.n	40b528 <vTaskList+0x98>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
  40b51a:	4b16      	ldr	r3, [pc, #88]	; (40b574 <vTaskList+0xe4>)
  40b51c:	681b      	ldr	r3, [r3, #0]
  40b51e:	6878      	ldr	r0, [r7, #4]
  40b520:	4619      	mov	r1, r3
  40b522:	2242      	movs	r2, #66	; 0x42
  40b524:	4b11      	ldr	r3, [pc, #68]	; (40b56c <vTaskList+0xdc>)
  40b526:	4798      	blx	r3
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
  40b528:	4b13      	ldr	r3, [pc, #76]	; (40b578 <vTaskList+0xe8>)
  40b52a:	681b      	ldr	r3, [r3, #0]
  40b52c:	2b00      	cmp	r3, #0
  40b52e:	d004      	beq.n	40b53a <vTaskList+0xaa>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
  40b530:	6878      	ldr	r0, [r7, #4]
  40b532:	4911      	ldr	r1, [pc, #68]	; (40b578 <vTaskList+0xe8>)
  40b534:	2244      	movs	r2, #68	; 0x44
  40b536:	4b0d      	ldr	r3, [pc, #52]	; (40b56c <vTaskList+0xdc>)
  40b538:	4798      	blx	r3
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
  40b53a:	4b10      	ldr	r3, [pc, #64]	; (40b57c <vTaskList+0xec>)
  40b53c:	681b      	ldr	r3, [r3, #0]
  40b53e:	2b00      	cmp	r3, #0
  40b540:	d004      	beq.n	40b54c <vTaskList+0xbc>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
  40b542:	6878      	ldr	r0, [r7, #4]
  40b544:	490d      	ldr	r1, [pc, #52]	; (40b57c <vTaskList+0xec>)
  40b546:	2253      	movs	r2, #83	; 0x53
  40b548:	4b08      	ldr	r3, [pc, #32]	; (40b56c <vTaskList+0xdc>)
  40b54a:	4798      	blx	r3
				}
			}
			#endif
		}
		xTaskResumeAll();
  40b54c:	4b0c      	ldr	r3, [pc, #48]	; (40b580 <vTaskList+0xf0>)
  40b54e:	4798      	blx	r3
	}
  40b550:	3714      	adds	r7, #20
  40b552:	46bd      	mov	sp, r7
  40b554:	bd90      	pop	{r4, r7, pc}
  40b556:	bf00      	nop
  40b558:	0040b325 	.word	0x0040b325
  40b55c:	00413725 	.word	0x00413725
  40b560:	0041d43c 	.word	0x0041d43c
  40b564:	20003554 	.word	0x20003554
  40b568:	2000343c 	.word	0x2000343c
  40b56c:	0040bc8d 	.word	0x0040bc8d
  40b570:	20003504 	.word	0x20003504
  40b574:	20003508 	.word	0x20003508
  40b578:	20003520 	.word	0x20003520
  40b57c:	20003538 	.word	0x20003538
  40b580:	0040b341 	.word	0x0040b341

0040b584 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
  40b584:	b580      	push	{r7, lr}
  40b586:	b084      	sub	sp, #16
  40b588:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40b58a:	4b40      	ldr	r3, [pc, #256]	; (40b68c <vTaskIncrementTick+0x108>)
  40b58c:	681b      	ldr	r3, [r3, #0]
  40b58e:	2b00      	cmp	r3, #0
  40b590:	d173      	bne.n	40b67a <vTaskIncrementTick+0xf6>
	{
		++xTickCount;
  40b592:	4b3f      	ldr	r3, [pc, #252]	; (40b690 <vTaskIncrementTick+0x10c>)
  40b594:	681b      	ldr	r3, [r3, #0]
  40b596:	1c5a      	adds	r2, r3, #1
  40b598:	4b3d      	ldr	r3, [pc, #244]	; (40b690 <vTaskIncrementTick+0x10c>)
  40b59a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0 )
  40b59c:	4b3c      	ldr	r3, [pc, #240]	; (40b690 <vTaskIncrementTick+0x10c>)
  40b59e:	681b      	ldr	r3, [r3, #0]
  40b5a0:	2b00      	cmp	r3, #0
  40b5a2:	d121      	bne.n	40b5e8 <vTaskIncrementTick+0x64>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
  40b5a4:	4b3b      	ldr	r3, [pc, #236]	; (40b694 <vTaskIncrementTick+0x110>)
  40b5a6:	681b      	ldr	r3, [r3, #0]
  40b5a8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  40b5aa:	4b3b      	ldr	r3, [pc, #236]	; (40b698 <vTaskIncrementTick+0x114>)
  40b5ac:	681a      	ldr	r2, [r3, #0]
  40b5ae:	4b39      	ldr	r3, [pc, #228]	; (40b694 <vTaskIncrementTick+0x110>)
  40b5b0:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  40b5b2:	4b39      	ldr	r3, [pc, #228]	; (40b698 <vTaskIncrementTick+0x114>)
  40b5b4:	68fa      	ldr	r2, [r7, #12]
  40b5b6:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  40b5b8:	4b38      	ldr	r3, [pc, #224]	; (40b69c <vTaskIncrementTick+0x118>)
  40b5ba:	681b      	ldr	r3, [r3, #0]
  40b5bc:	1c5a      	adds	r2, r3, #1
  40b5be:	4b37      	ldr	r3, [pc, #220]	; (40b69c <vTaskIncrementTick+0x118>)
  40b5c0:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40b5c2:	4b34      	ldr	r3, [pc, #208]	; (40b694 <vTaskIncrementTick+0x110>)
  40b5c4:	681b      	ldr	r3, [r3, #0]
  40b5c6:	681b      	ldr	r3, [r3, #0]
  40b5c8:	2b00      	cmp	r3, #0
  40b5ca:	d104      	bne.n	40b5d6 <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40b5cc:	4b34      	ldr	r3, [pc, #208]	; (40b6a0 <vTaskIncrementTick+0x11c>)
  40b5ce:	f04f 32ff 	mov.w	r2, #4294967295
  40b5d2:	601a      	str	r2, [r3, #0]
  40b5d4:	e008      	b.n	40b5e8 <vTaskIncrementTick+0x64>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40b5d6:	4b2f      	ldr	r3, [pc, #188]	; (40b694 <vTaskIncrementTick+0x110>)
  40b5d8:	681b      	ldr	r3, [r3, #0]
  40b5da:	68db      	ldr	r3, [r3, #12]
  40b5dc:	68db      	ldr	r3, [r3, #12]
  40b5de:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40b5e0:	68bb      	ldr	r3, [r7, #8]
  40b5e2:	685a      	ldr	r2, [r3, #4]
  40b5e4:	4b2e      	ldr	r3, [pc, #184]	; (40b6a0 <vTaskIncrementTick+0x11c>)
  40b5e6:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40b5e8:	4b29      	ldr	r3, [pc, #164]	; (40b690 <vTaskIncrementTick+0x10c>)
  40b5ea:	681a      	ldr	r2, [r3, #0]
  40b5ec:	4b2c      	ldr	r3, [pc, #176]	; (40b6a0 <vTaskIncrementTick+0x11c>)
  40b5ee:	681b      	ldr	r3, [r3, #0]
  40b5f0:	429a      	cmp	r2, r3
  40b5f2:	d341      	bcc.n	40b678 <vTaskIncrementTick+0xf4>
  40b5f4:	4b27      	ldr	r3, [pc, #156]	; (40b694 <vTaskIncrementTick+0x110>)
  40b5f6:	681b      	ldr	r3, [r3, #0]
  40b5f8:	681b      	ldr	r3, [r3, #0]
  40b5fa:	2b00      	cmp	r3, #0
  40b5fc:	d104      	bne.n	40b608 <vTaskIncrementTick+0x84>
  40b5fe:	4b28      	ldr	r3, [pc, #160]	; (40b6a0 <vTaskIncrementTick+0x11c>)
  40b600:	f04f 32ff 	mov.w	r2, #4294967295
  40b604:	601a      	str	r2, [r3, #0]
  40b606:	e037      	b.n	40b678 <vTaskIncrementTick+0xf4>
  40b608:	4b22      	ldr	r3, [pc, #136]	; (40b694 <vTaskIncrementTick+0x110>)
  40b60a:	681b      	ldr	r3, [r3, #0]
  40b60c:	68db      	ldr	r3, [r3, #12]
  40b60e:	68db      	ldr	r3, [r3, #12]
  40b610:	60bb      	str	r3, [r7, #8]
  40b612:	68bb      	ldr	r3, [r7, #8]
  40b614:	685b      	ldr	r3, [r3, #4]
  40b616:	607b      	str	r3, [r7, #4]
  40b618:	4b1d      	ldr	r3, [pc, #116]	; (40b690 <vTaskIncrementTick+0x10c>)
  40b61a:	681a      	ldr	r2, [r3, #0]
  40b61c:	687b      	ldr	r3, [r7, #4]
  40b61e:	429a      	cmp	r2, r3
  40b620:	d203      	bcs.n	40b62a <vTaskIncrementTick+0xa6>
  40b622:	4b1f      	ldr	r3, [pc, #124]	; (40b6a0 <vTaskIncrementTick+0x11c>)
  40b624:	687a      	ldr	r2, [r7, #4]
  40b626:	601a      	str	r2, [r3, #0]
  40b628:	e026      	b.n	40b678 <vTaskIncrementTick+0xf4>
  40b62a:	68bb      	ldr	r3, [r7, #8]
  40b62c:	3304      	adds	r3, #4
  40b62e:	4618      	mov	r0, r3
  40b630:	4b1c      	ldr	r3, [pc, #112]	; (40b6a4 <vTaskIncrementTick+0x120>)
  40b632:	4798      	blx	r3
  40b634:	68bb      	ldr	r3, [r7, #8]
  40b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40b638:	2b00      	cmp	r3, #0
  40b63a:	d004      	beq.n	40b646 <vTaskIncrementTick+0xc2>
  40b63c:	68bb      	ldr	r3, [r7, #8]
  40b63e:	3318      	adds	r3, #24
  40b640:	4618      	mov	r0, r3
  40b642:	4b18      	ldr	r3, [pc, #96]	; (40b6a4 <vTaskIncrementTick+0x120>)
  40b644:	4798      	blx	r3
  40b646:	68bb      	ldr	r3, [r7, #8]
  40b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b64a:	4b17      	ldr	r3, [pc, #92]	; (40b6a8 <vTaskIncrementTick+0x124>)
  40b64c:	681b      	ldr	r3, [r3, #0]
  40b64e:	429a      	cmp	r2, r3
  40b650:	d903      	bls.n	40b65a <vTaskIncrementTick+0xd6>
  40b652:	68bb      	ldr	r3, [r7, #8]
  40b654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b656:	4b14      	ldr	r3, [pc, #80]	; (40b6a8 <vTaskIncrementTick+0x124>)
  40b658:	601a      	str	r2, [r3, #0]
  40b65a:	68bb      	ldr	r3, [r7, #8]
  40b65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b65e:	4613      	mov	r3, r2
  40b660:	009b      	lsls	r3, r3, #2
  40b662:	4413      	add	r3, r2
  40b664:	009b      	lsls	r3, r3, #2
  40b666:	4a11      	ldr	r2, [pc, #68]	; (40b6ac <vTaskIncrementTick+0x128>)
  40b668:	441a      	add	r2, r3
  40b66a:	68bb      	ldr	r3, [r7, #8]
  40b66c:	3304      	adds	r3, #4
  40b66e:	4610      	mov	r0, r2
  40b670:	4619      	mov	r1, r3
  40b672:	4b0f      	ldr	r3, [pc, #60]	; (40b6b0 <vTaskIncrementTick+0x12c>)
  40b674:	4798      	blx	r3
  40b676:	e7bd      	b.n	40b5f4 <vTaskIncrementTick+0x70>
  40b678:	e004      	b.n	40b684 <vTaskIncrementTick+0x100>
	}
	else
	{
		++uxMissedTicks;
  40b67a:	4b0e      	ldr	r3, [pc, #56]	; (40b6b4 <vTaskIncrementTick+0x130>)
  40b67c:	681b      	ldr	r3, [r3, #0]
  40b67e:	1c5a      	adds	r2, r3, #1
  40b680:	4b0c      	ldr	r3, [pc, #48]	; (40b6b4 <vTaskIncrementTick+0x130>)
  40b682:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  40b684:	3710      	adds	r7, #16
  40b686:	46bd      	mov	sp, r7
  40b688:	bd80      	pop	{r7, pc}
  40b68a:	bf00      	nop
  40b68c:	20003560 	.word	0x20003560
  40b690:	20003550 	.word	0x20003550
  40b694:	20003504 	.word	0x20003504
  40b698:	20003508 	.word	0x20003508
  40b69c:	2000356c 	.word	0x2000356c
  40b6a0:	200001b4 	.word	0x200001b4
  40b6a4:	0040a5a1 	.word	0x0040a5a1
  40b6a8:	20003558 	.word	0x20003558
  40b6ac:	2000343c 	.word	0x2000343c
  40b6b0:	0040a4e1 	.word	0x0040a4e1
  40b6b4:	20003564 	.word	0x20003564

0040b6b8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40b6b8:	b480      	push	{r7}
  40b6ba:	b083      	sub	sp, #12
  40b6bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40b6be:	4b36      	ldr	r3, [pc, #216]	; (40b798 <vTaskSwitchContext+0xe0>)
  40b6c0:	681b      	ldr	r3, [r3, #0]
  40b6c2:	2b00      	cmp	r3, #0
  40b6c4:	d003      	beq.n	40b6ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40b6c6:	4b35      	ldr	r3, [pc, #212]	; (40b79c <vTaskSwitchContext+0xe4>)
  40b6c8:	2201      	movs	r2, #1
  40b6ca:	601a      	str	r2, [r3, #0]
  40b6cc:	e05e      	b.n	40b78c <vTaskSwitchContext+0xd4>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  40b6ce:	e004      	b.n	40b6da <vTaskSwitchContext+0x22>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
  40b6d0:	4b33      	ldr	r3, [pc, #204]	; (40b7a0 <vTaskSwitchContext+0xe8>)
  40b6d2:	681b      	ldr	r3, [r3, #0]
  40b6d4:	1e5a      	subs	r2, r3, #1
  40b6d6:	4b32      	ldr	r3, [pc, #200]	; (40b7a0 <vTaskSwitchContext+0xe8>)
  40b6d8:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  40b6da:	4b31      	ldr	r3, [pc, #196]	; (40b7a0 <vTaskSwitchContext+0xe8>)
  40b6dc:	681a      	ldr	r2, [r3, #0]
  40b6de:	4931      	ldr	r1, [pc, #196]	; (40b7a4 <vTaskSwitchContext+0xec>)
  40b6e0:	4613      	mov	r3, r2
  40b6e2:	009b      	lsls	r3, r3, #2
  40b6e4:	4413      	add	r3, r2
  40b6e6:	009b      	lsls	r3, r3, #2
  40b6e8:	440b      	add	r3, r1
  40b6ea:	681b      	ldr	r3, [r3, #0]
  40b6ec:	2b00      	cmp	r3, #0
  40b6ee:	d0ef      	beq.n	40b6d0 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  40b6f0:	4b2b      	ldr	r3, [pc, #172]	; (40b7a0 <vTaskSwitchContext+0xe8>)
  40b6f2:	681a      	ldr	r2, [r3, #0]
  40b6f4:	4613      	mov	r3, r2
  40b6f6:	009b      	lsls	r3, r3, #2
  40b6f8:	4413      	add	r3, r2
  40b6fa:	009b      	lsls	r3, r3, #2
  40b6fc:	4a29      	ldr	r2, [pc, #164]	; (40b7a4 <vTaskSwitchContext+0xec>)
  40b6fe:	4413      	add	r3, r2
  40b700:	607b      	str	r3, [r7, #4]
  40b702:	687b      	ldr	r3, [r7, #4]
  40b704:	685b      	ldr	r3, [r3, #4]
  40b706:	685a      	ldr	r2, [r3, #4]
  40b708:	687b      	ldr	r3, [r7, #4]
  40b70a:	605a      	str	r2, [r3, #4]
  40b70c:	687b      	ldr	r3, [r7, #4]
  40b70e:	685a      	ldr	r2, [r3, #4]
  40b710:	687b      	ldr	r3, [r7, #4]
  40b712:	3308      	adds	r3, #8
  40b714:	429a      	cmp	r2, r3
  40b716:	d104      	bne.n	40b722 <vTaskSwitchContext+0x6a>
  40b718:	687b      	ldr	r3, [r7, #4]
  40b71a:	685b      	ldr	r3, [r3, #4]
  40b71c:	685a      	ldr	r2, [r3, #4]
  40b71e:	687b      	ldr	r3, [r7, #4]
  40b720:	605a      	str	r2, [r3, #4]
  40b722:	687b      	ldr	r3, [r7, #4]
  40b724:	685b      	ldr	r3, [r3, #4]
  40b726:	68da      	ldr	r2, [r3, #12]
  40b728:	4b1f      	ldr	r3, [pc, #124]	; (40b7a8 <vTaskSwitchContext+0xf0>)
  40b72a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  40b72c:	4b1f      	ldr	r3, [pc, #124]	; (40b7ac <vTaskSwitchContext+0xf4>)
  40b72e:	681b      	ldr	r3, [r3, #0]
  40b730:	2b00      	cmp	r3, #0
  40b732:	d02b      	beq.n	40b78c <vTaskSwitchContext+0xd4>
  40b734:	4b1c      	ldr	r3, [pc, #112]	; (40b7a8 <vTaskSwitchContext+0xf0>)
  40b736:	681b      	ldr	r3, [r3, #0]
  40b738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40b73a:	4b1d      	ldr	r3, [pc, #116]	; (40b7b0 <vTaskSwitchContext+0xf8>)
  40b73c:	681b      	ldr	r3, [r3, #0]
  40b73e:	429a      	cmp	r2, r3
  40b740:	d024      	beq.n	40b78c <vTaskSwitchContext+0xd4>
  40b742:	4b1c      	ldr	r3, [pc, #112]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b744:	681b      	ldr	r3, [r3, #0]
  40b746:	f103 0208 	add.w	r2, r3, #8
  40b74a:	4b1b      	ldr	r3, [pc, #108]	; (40b7b8 <vTaskSwitchContext+0x100>)
  40b74c:	681b      	ldr	r3, [r3, #0]
  40b74e:	429a      	cmp	r2, r3
  40b750:	d219      	bcs.n	40b786 <vTaskSwitchContext+0xce>
  40b752:	4b15      	ldr	r3, [pc, #84]	; (40b7a8 <vTaskSwitchContext+0xf0>)
  40b754:	681b      	ldr	r3, [r3, #0]
  40b756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40b758:	4b15      	ldr	r3, [pc, #84]	; (40b7b0 <vTaskSwitchContext+0xf8>)
  40b75a:	601a      	str	r2, [r3, #0]
  40b75c:	4b15      	ldr	r3, [pc, #84]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b75e:	681b      	ldr	r3, [r3, #0]
  40b760:	4a16      	ldr	r2, [pc, #88]	; (40b7bc <vTaskSwitchContext+0x104>)
  40b762:	6812      	ldr	r2, [r2, #0]
  40b764:	601a      	str	r2, [r3, #0]
  40b766:	4b13      	ldr	r3, [pc, #76]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b768:	681b      	ldr	r3, [r3, #0]
  40b76a:	1d1a      	adds	r2, r3, #4
  40b76c:	4b11      	ldr	r3, [pc, #68]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b76e:	601a      	str	r2, [r3, #0]
  40b770:	4b10      	ldr	r3, [pc, #64]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b772:	681b      	ldr	r3, [r3, #0]
  40b774:	4a0e      	ldr	r2, [pc, #56]	; (40b7b0 <vTaskSwitchContext+0xf8>)
  40b776:	6812      	ldr	r2, [r2, #0]
  40b778:	601a      	str	r2, [r3, #0]
  40b77a:	4b0e      	ldr	r3, [pc, #56]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b77c:	681b      	ldr	r3, [r3, #0]
  40b77e:	1d1a      	adds	r2, r3, #4
  40b780:	4b0c      	ldr	r3, [pc, #48]	; (40b7b4 <vTaskSwitchContext+0xfc>)
  40b782:	601a      	str	r2, [r3, #0]
  40b784:	e002      	b.n	40b78c <vTaskSwitchContext+0xd4>
  40b786:	4b09      	ldr	r3, [pc, #36]	; (40b7ac <vTaskSwitchContext+0xf4>)
  40b788:	2200      	movs	r2, #0
  40b78a:	601a      	str	r2, [r3, #0]
	}
}
  40b78c:	370c      	adds	r7, #12
  40b78e:	46bd      	mov	sp, r7
  40b790:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b794:	4770      	bx	lr
  40b796:	bf00      	nop
  40b798:	20003560 	.word	0x20003560
  40b79c:	20003568 	.word	0x20003568
  40b7a0:	20003558 	.word	0x20003558
  40b7a4:	2000343c 	.word	0x2000343c
  40b7a8:	20003438 	.word	0x20003438
  40b7ac:	2000357c 	.word	0x2000357c
  40b7b0:	200001b8 	.word	0x200001b8
  40b7b4:	20003574 	.word	0x20003574
  40b7b8:	20003578 	.word	0x20003578
  40b7bc:	20003550 	.word	0x20003550

0040b7c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  40b7c0:	b580      	push	{r7, lr}
  40b7c2:	b084      	sub	sp, #16
  40b7c4:	af00      	add	r7, sp, #0
  40b7c6:	6078      	str	r0, [r7, #4]
  40b7c8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40b7ca:	4b12      	ldr	r3, [pc, #72]	; (40b814 <vTaskPlaceOnEventList+0x54>)
  40b7cc:	681b      	ldr	r3, [r3, #0]
  40b7ce:	3318      	adds	r3, #24
  40b7d0:	6878      	ldr	r0, [r7, #4]
  40b7d2:	4619      	mov	r1, r3
  40b7d4:	4b10      	ldr	r3, [pc, #64]	; (40b818 <vTaskPlaceOnEventList+0x58>)
  40b7d6:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40b7d8:	4b0e      	ldr	r3, [pc, #56]	; (40b814 <vTaskPlaceOnEventList+0x54>)
  40b7da:	681b      	ldr	r3, [r3, #0]
  40b7dc:	3304      	adds	r3, #4
  40b7de:	4618      	mov	r0, r3
  40b7e0:	4b0e      	ldr	r3, [pc, #56]	; (40b81c <vTaskPlaceOnEventList+0x5c>)
  40b7e2:	4798      	blx	r3


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40b7e4:	683b      	ldr	r3, [r7, #0]
  40b7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b7ea:	d107      	bne.n	40b7fc <vTaskPlaceOnEventList+0x3c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40b7ec:	4b09      	ldr	r3, [pc, #36]	; (40b814 <vTaskPlaceOnEventList+0x54>)
  40b7ee:	681b      	ldr	r3, [r3, #0]
  40b7f0:	3304      	adds	r3, #4
  40b7f2:	480b      	ldr	r0, [pc, #44]	; (40b820 <vTaskPlaceOnEventList+0x60>)
  40b7f4:	4619      	mov	r1, r3
  40b7f6:	4b0b      	ldr	r3, [pc, #44]	; (40b824 <vTaskPlaceOnEventList+0x64>)
  40b7f8:	4798      	blx	r3
  40b7fa:	e007      	b.n	40b80c <vTaskPlaceOnEventList+0x4c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  40b7fc:	4b0a      	ldr	r3, [pc, #40]	; (40b828 <vTaskPlaceOnEventList+0x68>)
  40b7fe:	681a      	ldr	r2, [r3, #0]
  40b800:	683b      	ldr	r3, [r7, #0]
  40b802:	4413      	add	r3, r2
  40b804:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40b806:	68f8      	ldr	r0, [r7, #12]
  40b808:	4b08      	ldr	r3, [pc, #32]	; (40b82c <vTaskPlaceOnEventList+0x6c>)
  40b80a:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  40b80c:	3710      	adds	r7, #16
  40b80e:	46bd      	mov	sp, r7
  40b810:	bd80      	pop	{r7, pc}
  40b812:	bf00      	nop
  40b814:	20003438 	.word	0x20003438
  40b818:	0040a531 	.word	0x0040a531
  40b81c:	0040a5a1 	.word	0x0040a5a1
  40b820:	20003538 	.word	0x20003538
  40b824:	0040a4e1 	.word	0x0040a4e1
  40b828:	20003550 	.word	0x20003550
  40b82c:	0040bbad 	.word	0x0040bbad

0040b830 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  40b830:	b580      	push	{r7, lr}
  40b832:	b084      	sub	sp, #16
  40b834:	af00      	add	r7, sp, #0
  40b836:	6078      	str	r0, [r7, #4]
  40b838:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40b83a:	4b0c      	ldr	r3, [pc, #48]	; (40b86c <vTaskPlaceOnEventListRestricted+0x3c>)
  40b83c:	681b      	ldr	r3, [r3, #0]
  40b83e:	3318      	adds	r3, #24
  40b840:	6878      	ldr	r0, [r7, #4]
  40b842:	4619      	mov	r1, r3
  40b844:	4b0a      	ldr	r3, [pc, #40]	; (40b870 <vTaskPlaceOnEventListRestricted+0x40>)
  40b846:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40b848:	4b08      	ldr	r3, [pc, #32]	; (40b86c <vTaskPlaceOnEventListRestricted+0x3c>)
  40b84a:	681b      	ldr	r3, [r3, #0]
  40b84c:	3304      	adds	r3, #4
  40b84e:	4618      	mov	r0, r3
  40b850:	4b08      	ldr	r3, [pc, #32]	; (40b874 <vTaskPlaceOnEventListRestricted+0x44>)
  40b852:	4798      	blx	r3

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  40b854:	4b08      	ldr	r3, [pc, #32]	; (40b878 <vTaskPlaceOnEventListRestricted+0x48>)
  40b856:	681a      	ldr	r2, [r3, #0]
  40b858:	683b      	ldr	r3, [r7, #0]
  40b85a:	4413      	add	r3, r2
  40b85c:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  40b85e:	68f8      	ldr	r0, [r7, #12]
  40b860:	4b06      	ldr	r3, [pc, #24]	; (40b87c <vTaskPlaceOnEventListRestricted+0x4c>)
  40b862:	4798      	blx	r3
	}
  40b864:	3710      	adds	r7, #16
  40b866:	46bd      	mov	sp, r7
  40b868:	bd80      	pop	{r7, pc}
  40b86a:	bf00      	nop
  40b86c:	20003438 	.word	0x20003438
  40b870:	0040a4e1 	.word	0x0040a4e1
  40b874:	0040a5a1 	.word	0x0040a5a1
  40b878:	20003550 	.word	0x20003550
  40b87c:	0040bbad 	.word	0x0040bbad

0040b880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40b880:	b580      	push	{r7, lr}
  40b882:	b084      	sub	sp, #16
  40b884:	af00      	add	r7, sp, #0
  40b886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40b888:	687b      	ldr	r3, [r7, #4]
  40b88a:	68db      	ldr	r3, [r3, #12]
  40b88c:	68db      	ldr	r3, [r3, #12]
  40b88e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40b890:	68bb      	ldr	r3, [r7, #8]
  40b892:	3318      	adds	r3, #24
  40b894:	4618      	mov	r0, r3
  40b896:	4b1d      	ldr	r3, [pc, #116]	; (40b90c <xTaskRemoveFromEventList+0x8c>)
  40b898:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40b89a:	4b1d      	ldr	r3, [pc, #116]	; (40b910 <xTaskRemoveFromEventList+0x90>)
  40b89c:	681b      	ldr	r3, [r3, #0]
  40b89e:	2b00      	cmp	r3, #0
  40b8a0:	d11d      	bne.n	40b8de <xTaskRemoveFromEventList+0x5e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40b8a2:	68bb      	ldr	r3, [r7, #8]
  40b8a4:	3304      	adds	r3, #4
  40b8a6:	4618      	mov	r0, r3
  40b8a8:	4b18      	ldr	r3, [pc, #96]	; (40b90c <xTaskRemoveFromEventList+0x8c>)
  40b8aa:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40b8ac:	68bb      	ldr	r3, [r7, #8]
  40b8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b8b0:	4b18      	ldr	r3, [pc, #96]	; (40b914 <xTaskRemoveFromEventList+0x94>)
  40b8b2:	681b      	ldr	r3, [r3, #0]
  40b8b4:	429a      	cmp	r2, r3
  40b8b6:	d903      	bls.n	40b8c0 <xTaskRemoveFromEventList+0x40>
  40b8b8:	68bb      	ldr	r3, [r7, #8]
  40b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b8bc:	4b15      	ldr	r3, [pc, #84]	; (40b914 <xTaskRemoveFromEventList+0x94>)
  40b8be:	601a      	str	r2, [r3, #0]
  40b8c0:	68bb      	ldr	r3, [r7, #8]
  40b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b8c4:	4613      	mov	r3, r2
  40b8c6:	009b      	lsls	r3, r3, #2
  40b8c8:	4413      	add	r3, r2
  40b8ca:	009b      	lsls	r3, r3, #2
  40b8cc:	4a12      	ldr	r2, [pc, #72]	; (40b918 <xTaskRemoveFromEventList+0x98>)
  40b8ce:	441a      	add	r2, r3
  40b8d0:	68bb      	ldr	r3, [r7, #8]
  40b8d2:	3304      	adds	r3, #4
  40b8d4:	4610      	mov	r0, r2
  40b8d6:	4619      	mov	r1, r3
  40b8d8:	4b10      	ldr	r3, [pc, #64]	; (40b91c <xTaskRemoveFromEventList+0x9c>)
  40b8da:	4798      	blx	r3
  40b8dc:	e005      	b.n	40b8ea <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40b8de:	68bb      	ldr	r3, [r7, #8]
  40b8e0:	3318      	adds	r3, #24
  40b8e2:	480f      	ldr	r0, [pc, #60]	; (40b920 <xTaskRemoveFromEventList+0xa0>)
  40b8e4:	4619      	mov	r1, r3
  40b8e6:	4b0d      	ldr	r3, [pc, #52]	; (40b91c <xTaskRemoveFromEventList+0x9c>)
  40b8e8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40b8ea:	68bb      	ldr	r3, [r7, #8]
  40b8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b8ee:	4b0d      	ldr	r3, [pc, #52]	; (40b924 <xTaskRemoveFromEventList+0xa4>)
  40b8f0:	681b      	ldr	r3, [r3, #0]
  40b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b8f4:	429a      	cmp	r2, r3
  40b8f6:	d302      	bcc.n	40b8fe <xTaskRemoveFromEventList+0x7e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40b8f8:	2301      	movs	r3, #1
  40b8fa:	60fb      	str	r3, [r7, #12]
  40b8fc:	e001      	b.n	40b902 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		xReturn = pdFALSE;
  40b8fe:	2300      	movs	r3, #0
  40b900:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  40b902:	68fb      	ldr	r3, [r7, #12]
}
  40b904:	4618      	mov	r0, r3
  40b906:	3710      	adds	r7, #16
  40b908:	46bd      	mov	sp, r7
  40b90a:	bd80      	pop	{r7, pc}
  40b90c:	0040a5a1 	.word	0x0040a5a1
  40b910:	20003560 	.word	0x20003560
  40b914:	20003558 	.word	0x20003558
  40b918:	2000343c 	.word	0x2000343c
  40b91c:	0040a4e1 	.word	0x0040a4e1
  40b920:	2000350c 	.word	0x2000350c
  40b924:	20003438 	.word	0x20003438

0040b928 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  40b928:	b480      	push	{r7}
  40b92a:	b083      	sub	sp, #12
  40b92c:	af00      	add	r7, sp, #0
  40b92e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40b930:	4b06      	ldr	r3, [pc, #24]	; (40b94c <vTaskSetTimeOutState+0x24>)
  40b932:	681a      	ldr	r2, [r3, #0]
  40b934:	687b      	ldr	r3, [r7, #4]
  40b936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40b938:	4b05      	ldr	r3, [pc, #20]	; (40b950 <vTaskSetTimeOutState+0x28>)
  40b93a:	681a      	ldr	r2, [r3, #0]
  40b93c:	687b      	ldr	r3, [r7, #4]
  40b93e:	605a      	str	r2, [r3, #4]
}
  40b940:	370c      	adds	r7, #12
  40b942:	46bd      	mov	sp, r7
  40b944:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b948:	4770      	bx	lr
  40b94a:	bf00      	nop
  40b94c:	2000356c 	.word	0x2000356c
  40b950:	20003550 	.word	0x20003550

0040b954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  40b954:	b580      	push	{r7, lr}
  40b956:	b084      	sub	sp, #16
  40b958:	af00      	add	r7, sp, #0
  40b95a:	6078      	str	r0, [r7, #4]
  40b95c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  40b95e:	4b1d      	ldr	r3, [pc, #116]	; (40b9d4 <xTaskCheckForTimeOut+0x80>)
  40b960:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40b962:	683b      	ldr	r3, [r7, #0]
  40b964:	681b      	ldr	r3, [r3, #0]
  40b966:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b96a:	d102      	bne.n	40b972 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
  40b96c:	2300      	movs	r3, #0
  40b96e:	60fb      	str	r3, [r7, #12]
  40b970:	e029      	b.n	40b9c6 <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40b972:	687b      	ldr	r3, [r7, #4]
  40b974:	681a      	ldr	r2, [r3, #0]
  40b976:	4b18      	ldr	r3, [pc, #96]	; (40b9d8 <xTaskCheckForTimeOut+0x84>)
  40b978:	681b      	ldr	r3, [r3, #0]
  40b97a:	429a      	cmp	r2, r3
  40b97c:	d008      	beq.n	40b990 <xTaskCheckForTimeOut+0x3c>
  40b97e:	687b      	ldr	r3, [r7, #4]
  40b980:	685a      	ldr	r2, [r3, #4]
  40b982:	4b16      	ldr	r3, [pc, #88]	; (40b9dc <xTaskCheckForTimeOut+0x88>)
  40b984:	681b      	ldr	r3, [r3, #0]
  40b986:	429a      	cmp	r2, r3
  40b988:	d802      	bhi.n	40b990 <xTaskCheckForTimeOut+0x3c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40b98a:	2301      	movs	r3, #1
  40b98c:	60fb      	str	r3, [r7, #12]
  40b98e:	e01a      	b.n	40b9c6 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  40b990:	4b12      	ldr	r3, [pc, #72]	; (40b9dc <xTaskCheckForTimeOut+0x88>)
  40b992:	681a      	ldr	r2, [r3, #0]
  40b994:	687b      	ldr	r3, [r7, #4]
  40b996:	685b      	ldr	r3, [r3, #4]
  40b998:	1ad2      	subs	r2, r2, r3
  40b99a:	683b      	ldr	r3, [r7, #0]
  40b99c:	681b      	ldr	r3, [r3, #0]
  40b99e:	429a      	cmp	r2, r3
  40b9a0:	d20f      	bcs.n	40b9c2 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40b9a2:	683b      	ldr	r3, [r7, #0]
  40b9a4:	681a      	ldr	r2, [r3, #0]
  40b9a6:	687b      	ldr	r3, [r7, #4]
  40b9a8:	6859      	ldr	r1, [r3, #4]
  40b9aa:	4b0c      	ldr	r3, [pc, #48]	; (40b9dc <xTaskCheckForTimeOut+0x88>)
  40b9ac:	681b      	ldr	r3, [r3, #0]
  40b9ae:	1acb      	subs	r3, r1, r3
  40b9b0:	441a      	add	r2, r3
  40b9b2:	683b      	ldr	r3, [r7, #0]
  40b9b4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40b9b6:	6878      	ldr	r0, [r7, #4]
  40b9b8:	4b09      	ldr	r3, [pc, #36]	; (40b9e0 <xTaskCheckForTimeOut+0x8c>)
  40b9ba:	4798      	blx	r3
			xReturn = pdFALSE;
  40b9bc:	2300      	movs	r3, #0
  40b9be:	60fb      	str	r3, [r7, #12]
  40b9c0:	e001      	b.n	40b9c6 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
  40b9c2:	2301      	movs	r3, #1
  40b9c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40b9c6:	4b07      	ldr	r3, [pc, #28]	; (40b9e4 <xTaskCheckForTimeOut+0x90>)
  40b9c8:	4798      	blx	r3

	return xReturn;
  40b9ca:	68fb      	ldr	r3, [r7, #12]
}
  40b9cc:	4618      	mov	r0, r3
  40b9ce:	3710      	adds	r7, #16
  40b9d0:	46bd      	mov	sp, r7
  40b9d2:	bd80      	pop	{r7, pc}
  40b9d4:	0040a775 	.word	0x0040a775
  40b9d8:	2000356c 	.word	0x2000356c
  40b9dc:	20003550 	.word	0x20003550
  40b9e0:	0040b929 	.word	0x0040b929
  40b9e4:	0040a799 	.word	0x0040a799

0040b9e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  40b9e8:	b480      	push	{r7}
  40b9ea:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  40b9ec:	4b03      	ldr	r3, [pc, #12]	; (40b9fc <vTaskMissedYield+0x14>)
  40b9ee:	2201      	movs	r2, #1
  40b9f0:	601a      	str	r2, [r3, #0]
}
  40b9f2:	46bd      	mov	sp, r7
  40b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b9f8:	4770      	bx	lr
  40b9fa:	bf00      	nop
  40b9fc:	20003568 	.word	0x20003568

0040ba00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  40ba00:	b580      	push	{r7, lr}
  40ba02:	b082      	sub	sp, #8
  40ba04:	af00      	add	r7, sp, #0
  40ba06:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  40ba08:	4b04      	ldr	r3, [pc, #16]	; (40ba1c <prvIdleTask+0x1c>)
  40ba0a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  40ba0c:	4b04      	ldr	r3, [pc, #16]	; (40ba20 <prvIdleTask+0x20>)
  40ba0e:	681b      	ldr	r3, [r3, #0]
  40ba10:	2b01      	cmp	r3, #1
  40ba12:	d902      	bls.n	40ba1a <prvIdleTask+0x1a>
			{
				taskYIELD();
  40ba14:	4b03      	ldr	r3, [pc, #12]	; (40ba24 <prvIdleTask+0x24>)
  40ba16:	4798      	blx	r3
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
  40ba18:	e7f6      	b.n	40ba08 <prvIdleTask+0x8>
  40ba1a:	e7f5      	b.n	40ba08 <prvIdleTask+0x8>
  40ba1c:	0040bb1d 	.word	0x0040bb1d
  40ba20:	2000343c 	.word	0x2000343c
  40ba24:	0040a75d 	.word	0x0040a75d

0040ba28 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  40ba28:	b580      	push	{r7, lr}
  40ba2a:	b084      	sub	sp, #16
  40ba2c:	af00      	add	r7, sp, #0
  40ba2e:	60f8      	str	r0, [r7, #12]
  40ba30:	60b9      	str	r1, [r7, #8]
  40ba32:	607a      	str	r2, [r7, #4]
  40ba34:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  40ba36:	68fb      	ldr	r3, [r7, #12]
  40ba38:	3334      	adds	r3, #52	; 0x34
  40ba3a:	4618      	mov	r0, r3
  40ba3c:	68b9      	ldr	r1, [r7, #8]
  40ba3e:	2210      	movs	r2, #16
  40ba40:	4b14      	ldr	r3, [pc, #80]	; (40ba94 <prvInitialiseTCBVariables+0x6c>)
  40ba42:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40ba44:	68fb      	ldr	r3, [r7, #12]
  40ba46:	2200      	movs	r2, #0
  40ba48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  40ba4c:	687b      	ldr	r3, [r7, #4]
  40ba4e:	2b07      	cmp	r3, #7
  40ba50:	d901      	bls.n	40ba56 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40ba52:	2307      	movs	r3, #7
  40ba54:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  40ba56:	68fb      	ldr	r3, [r7, #12]
  40ba58:	687a      	ldr	r2, [r7, #4]
  40ba5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  40ba5c:	68fb      	ldr	r3, [r7, #12]
  40ba5e:	687a      	ldr	r2, [r7, #4]
  40ba60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40ba62:	68fb      	ldr	r3, [r7, #12]
  40ba64:	3304      	adds	r3, #4
  40ba66:	4618      	mov	r0, r3
  40ba68:	4b0b      	ldr	r3, [pc, #44]	; (40ba98 <prvInitialiseTCBVariables+0x70>)
  40ba6a:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40ba6c:	68fb      	ldr	r3, [r7, #12]
  40ba6e:	3318      	adds	r3, #24
  40ba70:	4618      	mov	r0, r3
  40ba72:	4b09      	ldr	r3, [pc, #36]	; (40ba98 <prvInitialiseTCBVariables+0x70>)
  40ba74:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40ba76:	68fb      	ldr	r3, [r7, #12]
  40ba78:	68fa      	ldr	r2, [r7, #12]
  40ba7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  40ba7c:	687b      	ldr	r3, [r7, #4]
  40ba7e:	f1c3 0208 	rsb	r2, r3, #8
  40ba82:	68fb      	ldr	r3, [r7, #12]
  40ba84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40ba86:	68fb      	ldr	r3, [r7, #12]
  40ba88:	68fa      	ldr	r2, [r7, #12]
  40ba8a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  40ba8c:	3710      	adds	r7, #16
  40ba8e:	46bd      	mov	sp, r7
  40ba90:	bd80      	pop	{r7, pc}
  40ba92:	bf00      	nop
  40ba94:	0041389d 	.word	0x0041389d
  40ba98:	0040a4c9 	.word	0x0040a4c9

0040ba9c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  40ba9c:	b580      	push	{r7, lr}
  40ba9e:	b082      	sub	sp, #8
  40baa0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40baa2:	2300      	movs	r3, #0
  40baa4:	607b      	str	r3, [r7, #4]
  40baa6:	e00c      	b.n	40bac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  40baa8:	687a      	ldr	r2, [r7, #4]
  40baaa:	4613      	mov	r3, r2
  40baac:	009b      	lsls	r3, r3, #2
  40baae:	4413      	add	r3, r2
  40bab0:	009b      	lsls	r3, r3, #2
  40bab2:	4a11      	ldr	r2, [pc, #68]	; (40baf8 <prvInitialiseTaskLists+0x5c>)
  40bab4:	4413      	add	r3, r2
  40bab6:	4618      	mov	r0, r3
  40bab8:	4b10      	ldr	r3, [pc, #64]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40baba:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40babc:	687b      	ldr	r3, [r7, #4]
  40babe:	3301      	adds	r3, #1
  40bac0:	607b      	str	r3, [r7, #4]
  40bac2:	687b      	ldr	r3, [r7, #4]
  40bac4:	2b07      	cmp	r3, #7
  40bac6:	d9ef      	bls.n	40baa8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  40bac8:	480d      	ldr	r0, [pc, #52]	; (40bb00 <prvInitialiseTaskLists+0x64>)
  40baca:	4b0c      	ldr	r3, [pc, #48]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40bacc:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  40bace:	480d      	ldr	r0, [pc, #52]	; (40bb04 <prvInitialiseTaskLists+0x68>)
  40bad0:	4b0a      	ldr	r3, [pc, #40]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40bad2:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  40bad4:	480c      	ldr	r0, [pc, #48]	; (40bb08 <prvInitialiseTaskLists+0x6c>)
  40bad6:	4b09      	ldr	r3, [pc, #36]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40bad8:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40bada:	480c      	ldr	r0, [pc, #48]	; (40bb0c <prvInitialiseTaskLists+0x70>)
  40badc:	4b07      	ldr	r3, [pc, #28]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40bade:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  40bae0:	480b      	ldr	r0, [pc, #44]	; (40bb10 <prvInitialiseTaskLists+0x74>)
  40bae2:	4b06      	ldr	r3, [pc, #24]	; (40bafc <prvInitialiseTaskLists+0x60>)
  40bae4:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40bae6:	4b0b      	ldr	r3, [pc, #44]	; (40bb14 <prvInitialiseTaskLists+0x78>)
  40bae8:	4a05      	ldr	r2, [pc, #20]	; (40bb00 <prvInitialiseTaskLists+0x64>)
  40baea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40baec:	4b0a      	ldr	r3, [pc, #40]	; (40bb18 <prvInitialiseTaskLists+0x7c>)
  40baee:	4a05      	ldr	r2, [pc, #20]	; (40bb04 <prvInitialiseTaskLists+0x68>)
  40baf0:	601a      	str	r2, [r3, #0]
}
  40baf2:	3708      	adds	r7, #8
  40baf4:	46bd      	mov	sp, r7
  40baf6:	bd80      	pop	{r7, pc}
  40baf8:	2000343c 	.word	0x2000343c
  40bafc:	0040a489 	.word	0x0040a489
  40bb00:	200034dc 	.word	0x200034dc
  40bb04:	200034f0 	.word	0x200034f0
  40bb08:	2000350c 	.word	0x2000350c
  40bb0c:	20003520 	.word	0x20003520
  40bb10:	20003538 	.word	0x20003538
  40bb14:	20003504 	.word	0x20003504
  40bb18:	20003508 	.word	0x20003508

0040bb1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  40bb1c:	b580      	push	{r7, lr}
  40bb1e:	b082      	sub	sp, #8
  40bb20:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
  40bb22:	4b18      	ldr	r3, [pc, #96]	; (40bb84 <prvCheckTasksWaitingTermination+0x68>)
  40bb24:	681b      	ldr	r3, [r3, #0]
  40bb26:	2b00      	cmp	r3, #0
  40bb28:	d028      	beq.n	40bb7c <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
  40bb2a:	4b17      	ldr	r3, [pc, #92]	; (40bb88 <prvCheckTasksWaitingTermination+0x6c>)
  40bb2c:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40bb2e:	4b17      	ldr	r3, [pc, #92]	; (40bb8c <prvCheckTasksWaitingTermination+0x70>)
  40bb30:	681b      	ldr	r3, [r3, #0]
  40bb32:	2b00      	cmp	r3, #0
  40bb34:	bf14      	ite	ne
  40bb36:	2300      	movne	r3, #0
  40bb38:	2301      	moveq	r3, #1
  40bb3a:	b2db      	uxtb	r3, r3
  40bb3c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  40bb3e:	4b14      	ldr	r3, [pc, #80]	; (40bb90 <prvCheckTasksWaitingTermination+0x74>)
  40bb40:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  40bb42:	687b      	ldr	r3, [r7, #4]
  40bb44:	2b00      	cmp	r3, #0
  40bb46:	d119      	bne.n	40bb7c <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  40bb48:	4b12      	ldr	r3, [pc, #72]	; (40bb94 <prvCheckTasksWaitingTermination+0x78>)
  40bb4a:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  40bb4c:	4b12      	ldr	r3, [pc, #72]	; (40bb98 <prvCheckTasksWaitingTermination+0x7c>)
  40bb4e:	685b      	ldr	r3, [r3, #4]
  40bb50:	68db      	ldr	r3, [r3, #12]
  40bb52:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
  40bb54:	683b      	ldr	r3, [r7, #0]
  40bb56:	3304      	adds	r3, #4
  40bb58:	4618      	mov	r0, r3
  40bb5a:	4b10      	ldr	r3, [pc, #64]	; (40bb9c <prvCheckTasksWaitingTermination+0x80>)
  40bb5c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40bb5e:	4b10      	ldr	r3, [pc, #64]	; (40bba0 <prvCheckTasksWaitingTermination+0x84>)
  40bb60:	681b      	ldr	r3, [r3, #0]
  40bb62:	1e5a      	subs	r2, r3, #1
  40bb64:	4b0e      	ldr	r3, [pc, #56]	; (40bba0 <prvCheckTasksWaitingTermination+0x84>)
  40bb66:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  40bb68:	4b06      	ldr	r3, [pc, #24]	; (40bb84 <prvCheckTasksWaitingTermination+0x68>)
  40bb6a:	681b      	ldr	r3, [r3, #0]
  40bb6c:	1e5a      	subs	r2, r3, #1
  40bb6e:	4b05      	ldr	r3, [pc, #20]	; (40bb84 <prvCheckTasksWaitingTermination+0x68>)
  40bb70:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  40bb72:	4b0c      	ldr	r3, [pc, #48]	; (40bba4 <prvCheckTasksWaitingTermination+0x88>)
  40bb74:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  40bb76:	6838      	ldr	r0, [r7, #0]
  40bb78:	4b0b      	ldr	r3, [pc, #44]	; (40bba8 <prvCheckTasksWaitingTermination+0x8c>)
  40bb7a:	4798      	blx	r3
			}
		}
	}
	#endif
}
  40bb7c:	3708      	adds	r7, #8
  40bb7e:	46bd      	mov	sp, r7
  40bb80:	bd80      	pop	{r7, pc}
  40bb82:	bf00      	nop
  40bb84:	20003534 	.word	0x20003534
  40bb88:	0040b325 	.word	0x0040b325
  40bb8c:	20003520 	.word	0x20003520
  40bb90:	0040b341 	.word	0x0040b341
  40bb94:	0040a775 	.word	0x0040a775
  40bb98:	20003528 	.word	0x20003528
  40bb9c:	0040a5a1 	.word	0x0040a5a1
  40bba0:	2000354c 	.word	0x2000354c
  40bba4:	0040a799 	.word	0x0040a799
  40bba8:	0040bdb9 	.word	0x0040bdb9

0040bbac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  40bbac:	b580      	push	{r7, lr}
  40bbae:	b082      	sub	sp, #8
  40bbb0:	af00      	add	r7, sp, #0
  40bbb2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40bbb4:	4b13      	ldr	r3, [pc, #76]	; (40bc04 <prvAddCurrentTaskToDelayedList+0x58>)
  40bbb6:	681b      	ldr	r3, [r3, #0]
  40bbb8:	687a      	ldr	r2, [r7, #4]
  40bbba:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  40bbbc:	4b12      	ldr	r3, [pc, #72]	; (40bc08 <prvAddCurrentTaskToDelayedList+0x5c>)
  40bbbe:	681b      	ldr	r3, [r3, #0]
  40bbc0:	687a      	ldr	r2, [r7, #4]
  40bbc2:	429a      	cmp	r2, r3
  40bbc4:	d209      	bcs.n	40bbda <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40bbc6:	4b11      	ldr	r3, [pc, #68]	; (40bc0c <prvAddCurrentTaskToDelayedList+0x60>)
  40bbc8:	681a      	ldr	r2, [r3, #0]
  40bbca:	4b0e      	ldr	r3, [pc, #56]	; (40bc04 <prvAddCurrentTaskToDelayedList+0x58>)
  40bbcc:	681b      	ldr	r3, [r3, #0]
  40bbce:	3304      	adds	r3, #4
  40bbd0:	4610      	mov	r0, r2
  40bbd2:	4619      	mov	r1, r3
  40bbd4:	4b0e      	ldr	r3, [pc, #56]	; (40bc10 <prvAddCurrentTaskToDelayedList+0x64>)
  40bbd6:	4798      	blx	r3
  40bbd8:	e010      	b.n	40bbfc <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40bbda:	4b0e      	ldr	r3, [pc, #56]	; (40bc14 <prvAddCurrentTaskToDelayedList+0x68>)
  40bbdc:	681a      	ldr	r2, [r3, #0]
  40bbde:	4b09      	ldr	r3, [pc, #36]	; (40bc04 <prvAddCurrentTaskToDelayedList+0x58>)
  40bbe0:	681b      	ldr	r3, [r3, #0]
  40bbe2:	3304      	adds	r3, #4
  40bbe4:	4610      	mov	r0, r2
  40bbe6:	4619      	mov	r1, r3
  40bbe8:	4b09      	ldr	r3, [pc, #36]	; (40bc10 <prvAddCurrentTaskToDelayedList+0x64>)
  40bbea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  40bbec:	4b0a      	ldr	r3, [pc, #40]	; (40bc18 <prvAddCurrentTaskToDelayedList+0x6c>)
  40bbee:	681b      	ldr	r3, [r3, #0]
  40bbf0:	687a      	ldr	r2, [r7, #4]
  40bbf2:	429a      	cmp	r2, r3
  40bbf4:	d202      	bcs.n	40bbfc <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  40bbf6:	4b08      	ldr	r3, [pc, #32]	; (40bc18 <prvAddCurrentTaskToDelayedList+0x6c>)
  40bbf8:	687a      	ldr	r2, [r7, #4]
  40bbfa:	601a      	str	r2, [r3, #0]
		}
	}
}
  40bbfc:	3708      	adds	r7, #8
  40bbfe:	46bd      	mov	sp, r7
  40bc00:	bd80      	pop	{r7, pc}
  40bc02:	bf00      	nop
  40bc04:	20003438 	.word	0x20003438
  40bc08:	20003550 	.word	0x20003550
  40bc0c:	20003508 	.word	0x20003508
  40bc10:	0040a531 	.word	0x0040a531
  40bc14:	20003504 	.word	0x20003504
  40bc18:	200001b4 	.word	0x200001b4

0040bc1c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  40bc1c:	b580      	push	{r7, lr}
  40bc1e:	b084      	sub	sp, #16
  40bc20:	af00      	add	r7, sp, #0
  40bc22:	4603      	mov	r3, r0
  40bc24:	6039      	str	r1, [r7, #0]
  40bc26:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  40bc28:	204c      	movs	r0, #76	; 0x4c
  40bc2a:	4b15      	ldr	r3, [pc, #84]	; (40bc80 <prvAllocateTCBAndStack+0x64>)
  40bc2c:	4798      	blx	r3
  40bc2e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  40bc30:	68fb      	ldr	r3, [r7, #12]
  40bc32:	2b00      	cmp	r3, #0
  40bc34:	d01f      	beq.n	40bc76 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40bc36:	683b      	ldr	r3, [r7, #0]
  40bc38:	2b00      	cmp	r3, #0
  40bc3a:	d106      	bne.n	40bc4a <prvAllocateTCBAndStack+0x2e>
  40bc3c:	88fb      	ldrh	r3, [r7, #6]
  40bc3e:	009b      	lsls	r3, r3, #2
  40bc40:	4618      	mov	r0, r3
  40bc42:	4b0f      	ldr	r3, [pc, #60]	; (40bc80 <prvAllocateTCBAndStack+0x64>)
  40bc44:	4798      	blx	r3
  40bc46:	4603      	mov	r3, r0
  40bc48:	e000      	b.n	40bc4c <prvAllocateTCBAndStack+0x30>
  40bc4a:	683b      	ldr	r3, [r7, #0]
  40bc4c:	68fa      	ldr	r2, [r7, #12]
  40bc4e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  40bc50:	68fb      	ldr	r3, [r7, #12]
  40bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bc54:	2b00      	cmp	r3, #0
  40bc56:	d105      	bne.n	40bc64 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  40bc58:	68f8      	ldr	r0, [r7, #12]
  40bc5a:	4b0a      	ldr	r3, [pc, #40]	; (40bc84 <prvAllocateTCBAndStack+0x68>)
  40bc5c:	4798      	blx	r3
			pxNewTCB = NULL;
  40bc5e:	2300      	movs	r3, #0
  40bc60:	60fb      	str	r3, [r7, #12]
  40bc62:	e008      	b.n	40bc76 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
  40bc64:	68fb      	ldr	r3, [r7, #12]
  40bc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40bc68:	88fb      	ldrh	r3, [r7, #6]
  40bc6a:	009b      	lsls	r3, r3, #2
  40bc6c:	4610      	mov	r0, r2
  40bc6e:	21a5      	movs	r1, #165	; 0xa5
  40bc70:	461a      	mov	r2, r3
  40bc72:	4b05      	ldr	r3, [pc, #20]	; (40bc88 <prvAllocateTCBAndStack+0x6c>)
  40bc74:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40bc76:	68fb      	ldr	r3, [r7, #12]
}
  40bc78:	4618      	mov	r0, r3
  40bc7a:	3710      	adds	r7, #16
  40bc7c:	46bd      	mov	sp, r7
  40bc7e:	bd80      	pop	{r7, pc}
  40bc80:	0040a865 	.word	0x0040a865
  40bc84:	0040a895 	.word	0x0040a895
  40bc88:	0041309d 	.word	0x0041309d

0040bc8c <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
  40bc8c:	b590      	push	{r4, r7, lr}
  40bc8e:	b08f      	sub	sp, #60	; 0x3c
  40bc90:	af04      	add	r7, sp, #16
  40bc92:	60f8      	str	r0, [r7, #12]
  40bc94:	60b9      	str	r1, [r7, #8]
  40bc96:	4613      	mov	r3, r2
  40bc98:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  40bc9a:	68bb      	ldr	r3, [r7, #8]
  40bc9c:	627b      	str	r3, [r7, #36]	; 0x24
  40bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bca0:	685b      	ldr	r3, [r3, #4]
  40bca2:	685a      	ldr	r2, [r3, #4]
  40bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bca6:	605a      	str	r2, [r3, #4]
  40bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcaa:	685a      	ldr	r2, [r3, #4]
  40bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcae:	3308      	adds	r3, #8
  40bcb0:	429a      	cmp	r2, r3
  40bcb2:	d104      	bne.n	40bcbe <prvListTaskWithinSingleList+0x32>
  40bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcb6:	685b      	ldr	r3, [r3, #4]
  40bcb8:	685a      	ldr	r2, [r3, #4]
  40bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcbc:	605a      	str	r2, [r3, #4]
  40bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcc0:	685b      	ldr	r3, [r3, #4]
  40bcc2:	68db      	ldr	r3, [r3, #12]
  40bcc4:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  40bcc6:	68bb      	ldr	r3, [r7, #8]
  40bcc8:	61fb      	str	r3, [r7, #28]
  40bcca:	69fb      	ldr	r3, [r7, #28]
  40bccc:	685b      	ldr	r3, [r3, #4]
  40bcce:	685a      	ldr	r2, [r3, #4]
  40bcd0:	69fb      	ldr	r3, [r7, #28]
  40bcd2:	605a      	str	r2, [r3, #4]
  40bcd4:	69fb      	ldr	r3, [r7, #28]
  40bcd6:	685a      	ldr	r2, [r3, #4]
  40bcd8:	69fb      	ldr	r3, [r7, #28]
  40bcda:	3308      	adds	r3, #8
  40bcdc:	429a      	cmp	r2, r3
  40bcde:	d104      	bne.n	40bcea <prvListTaskWithinSingleList+0x5e>
  40bce0:	69fb      	ldr	r3, [r7, #28]
  40bce2:	685b      	ldr	r3, [r3, #4]
  40bce4:	685a      	ldr	r2, [r3, #4]
  40bce6:	69fb      	ldr	r3, [r7, #28]
  40bce8:	605a      	str	r2, [r3, #4]
  40bcea:	69fb      	ldr	r3, [r7, #28]
  40bcec:	685b      	ldr	r3, [r3, #4]
  40bcee:	68db      	ldr	r3, [r3, #12]
  40bcf0:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
  40bcf2:	69bb      	ldr	r3, [r7, #24]
  40bcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bcf6:	4618      	mov	r0, r3
  40bcf8:	4b0f      	ldr	r3, [pc, #60]	; (40bd38 <prvListTaskWithinSingleList+0xac>)
  40bcfa:	4798      	blx	r3
  40bcfc:	4603      	mov	r3, r0
  40bcfe:	82fb      	strh	r3, [r7, #22]
			}
			#endif

			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
  40bd00:	69bb      	ldr	r3, [r7, #24]
  40bd02:	f103 0234 	add.w	r2, r3, #52	; 0x34
  40bd06:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bd0a:	69b9      	ldr	r1, [r7, #24]
  40bd0c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  40bd0e:	8af8      	ldrh	r0, [r7, #22]
  40bd10:	69b9      	ldr	r1, [r7, #24]
  40bd12:	6c49      	ldr	r1, [r1, #68]	; 0x44
  40bd14:	9400      	str	r4, [sp, #0]
  40bd16:	9001      	str	r0, [sp, #4]
  40bd18:	9102      	str	r1, [sp, #8]
  40bd1a:	4808      	ldr	r0, [pc, #32]	; (40bd3c <prvListTaskWithinSingleList+0xb0>)
  40bd1c:	4908      	ldr	r1, [pc, #32]	; (40bd40 <prvListTaskWithinSingleList+0xb4>)
  40bd1e:	4c09      	ldr	r4, [pc, #36]	; (40bd44 <prvListTaskWithinSingleList+0xb8>)
  40bd20:	47a0      	blx	r4
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
  40bd22:	68f8      	ldr	r0, [r7, #12]
  40bd24:	4905      	ldr	r1, [pc, #20]	; (40bd3c <prvListTaskWithinSingleList+0xb0>)
  40bd26:	4b08      	ldr	r3, [pc, #32]	; (40bd48 <prvListTaskWithinSingleList+0xbc>)
  40bd28:	4798      	blx	r3

		} while( pxNextTCB != pxFirstTCB );
  40bd2a:	69ba      	ldr	r2, [r7, #24]
  40bd2c:	6a3b      	ldr	r3, [r7, #32]
  40bd2e:	429a      	cmp	r2, r3
  40bd30:	d1c9      	bne.n	40bcc6 <prvListTaskWithinSingleList+0x3a>
	}
  40bd32:	372c      	adds	r7, #44	; 0x2c
  40bd34:	46bd      	mov	sp, r7
  40bd36:	bd90      	pop	{r4, r7, pc}
  40bd38:	0040bd4d 	.word	0x0040bd4d
  40bd3c:	20003580 	.word	0x20003580
  40bd40:	0041d440 	.word	0x0041d440
  40bd44:	004132d5 	.word	0x004132d5
  40bd48:	00413401 	.word	0x00413401

0040bd4c <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
  40bd4c:	b490      	push	{r4, r7}
  40bd4e:	b082      	sub	sp, #8
  40bd50:	af00      	add	r7, sp, #0
  40bd52:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0;
  40bd54:	2400      	movs	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  40bd56:	e005      	b.n	40bd64 <usTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
  40bd58:	687b      	ldr	r3, [r7, #4]
  40bd5a:	3301      	adds	r3, #1
  40bd5c:	607b      	str	r3, [r7, #4]
			usCount++;
  40bd5e:	4623      	mov	r3, r4
  40bd60:	3301      	adds	r3, #1
  40bd62:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  40bd64:	687b      	ldr	r3, [r7, #4]
  40bd66:	781b      	ldrb	r3, [r3, #0]
  40bd68:	2ba5      	cmp	r3, #165	; 0xa5
  40bd6a:	d0f5      	beq.n	40bd58 <usTaskCheckFreeStackSpace+0xc>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
  40bd6c:	08a3      	lsrs	r3, r4, #2
  40bd6e:	b29c      	uxth	r4, r3

		return usCount;
  40bd70:	4623      	mov	r3, r4
	}
  40bd72:	4618      	mov	r0, r3
  40bd74:	3708      	adds	r7, #8
  40bd76:	46bd      	mov	sp, r7
  40bd78:	bc90      	pop	{r4, r7}
  40bd7a:	4770      	bx	lr

0040bd7c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
  40bd7c:	b580      	push	{r7, lr}
  40bd7e:	b086      	sub	sp, #24
  40bd80:	af00      	add	r7, sp, #0
  40bd82:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
  40bd84:	687b      	ldr	r3, [r7, #4]
  40bd86:	2b00      	cmp	r3, #0
  40bd88:	d102      	bne.n	40bd90 <uxTaskGetStackHighWaterMark+0x14>
  40bd8a:	4b09      	ldr	r3, [pc, #36]	; (40bdb0 <uxTaskGetStackHighWaterMark+0x34>)
  40bd8c:	681b      	ldr	r3, [r3, #0]
  40bd8e:	e000      	b.n	40bd92 <uxTaskGetStackHighWaterMark+0x16>
  40bd90:	687b      	ldr	r3, [r7, #4]
  40bd92:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
  40bd94:	697b      	ldr	r3, [r7, #20]
  40bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bd98:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
  40bd9a:	6938      	ldr	r0, [r7, #16]
  40bd9c:	4b05      	ldr	r3, [pc, #20]	; (40bdb4 <uxTaskGetStackHighWaterMark+0x38>)
  40bd9e:	4798      	blx	r3
  40bda0:	4603      	mov	r3, r0
  40bda2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
  40bda4:	68fb      	ldr	r3, [r7, #12]
	}
  40bda6:	4618      	mov	r0, r3
  40bda8:	3718      	adds	r7, #24
  40bdaa:	46bd      	mov	sp, r7
  40bdac:	bd80      	pop	{r7, pc}
  40bdae:	bf00      	nop
  40bdb0:	20003438 	.word	0x20003438
  40bdb4:	0040bd4d 	.word	0x0040bd4d

0040bdb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  40bdb8:	b580      	push	{r7, lr}
  40bdba:	b082      	sub	sp, #8
  40bdbc:	af00      	add	r7, sp, #0
  40bdbe:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40bdc0:	687b      	ldr	r3, [r7, #4]
  40bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bdc4:	4618      	mov	r0, r3
  40bdc6:	4b04      	ldr	r3, [pc, #16]	; (40bdd8 <prvDeleteTCB+0x20>)
  40bdc8:	4798      	blx	r3
		vPortFree( pxTCB );
  40bdca:	6878      	ldr	r0, [r7, #4]
  40bdcc:	4b02      	ldr	r3, [pc, #8]	; (40bdd8 <prvDeleteTCB+0x20>)
  40bdce:	4798      	blx	r3
	}
  40bdd0:	3708      	adds	r7, #8
  40bdd2:	46bd      	mov	sp, r7
  40bdd4:	bd80      	pop	{r7, pc}
  40bdd6:	bf00      	nop
  40bdd8:	0040a895 	.word	0x0040a895

0040bddc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  40bddc:	b480      	push	{r7}
  40bdde:	b083      	sub	sp, #12
  40bde0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  40bde2:	4b05      	ldr	r3, [pc, #20]	; (40bdf8 <xTaskGetCurrentTaskHandle+0x1c>)
  40bde4:	681b      	ldr	r3, [r3, #0]
  40bde6:	607b      	str	r3, [r7, #4]

		return xReturn;
  40bde8:	687b      	ldr	r3, [r7, #4]
	}
  40bdea:	4618      	mov	r0, r3
  40bdec:	370c      	adds	r7, #12
  40bdee:	46bd      	mov	sp, r7
  40bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdf4:	4770      	bx	lr
  40bdf6:	bf00      	nop
  40bdf8:	20003438 	.word	0x20003438

0040bdfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  40bdfc:	b480      	push	{r7}
  40bdfe:	b083      	sub	sp, #12
  40be00:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40be02:	4b0b      	ldr	r3, [pc, #44]	; (40be30 <xTaskGetSchedulerState+0x34>)
  40be04:	681b      	ldr	r3, [r3, #0]
  40be06:	2b00      	cmp	r3, #0
  40be08:	d102      	bne.n	40be10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  40be0a:	2300      	movs	r3, #0
  40be0c:	607b      	str	r3, [r7, #4]
  40be0e:	e008      	b.n	40be22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40be10:	4b08      	ldr	r3, [pc, #32]	; (40be34 <xTaskGetSchedulerState+0x38>)
  40be12:	681b      	ldr	r3, [r3, #0]
  40be14:	2b00      	cmp	r3, #0
  40be16:	d102      	bne.n	40be1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  40be18:	2301      	movs	r3, #1
  40be1a:	607b      	str	r3, [r7, #4]
  40be1c:	e001      	b.n	40be22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40be1e:	2302      	movs	r3, #2
  40be20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  40be22:	687b      	ldr	r3, [r7, #4]
	}
  40be24:	4618      	mov	r0, r3
  40be26:	370c      	adds	r7, #12
  40be28:	46bd      	mov	sp, r7
  40be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be2e:	4770      	bx	lr
  40be30:	2000355c 	.word	0x2000355c
  40be34:	20003560 	.word	0x20003560

0040be38 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  40be38:	b580      	push	{r7, lr}
  40be3a:	b084      	sub	sp, #16
  40be3c:	af00      	add	r7, sp, #0
  40be3e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40be40:	687b      	ldr	r3, [r7, #4]
  40be42:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40be44:	68fb      	ldr	r3, [r7, #12]
  40be46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40be48:	4b21      	ldr	r3, [pc, #132]	; (40bed0 <vTaskPriorityInherit+0x98>)
  40be4a:	681b      	ldr	r3, [r3, #0]
  40be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40be4e:	429a      	cmp	r2, r3
  40be50:	d23a      	bcs.n	40bec8 <vTaskPriorityInherit+0x90>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40be52:	4b1f      	ldr	r3, [pc, #124]	; (40bed0 <vTaskPriorityInherit+0x98>)
  40be54:	681b      	ldr	r3, [r3, #0]
  40be56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40be58:	f1c3 0208 	rsb	r2, r3, #8
  40be5c:	68fb      	ldr	r3, [r7, #12]
  40be5e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  40be60:	68fb      	ldr	r3, [r7, #12]
  40be62:	6959      	ldr	r1, [r3, #20]
  40be64:	68fb      	ldr	r3, [r7, #12]
  40be66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40be68:	4613      	mov	r3, r2
  40be6a:	009b      	lsls	r3, r3, #2
  40be6c:	4413      	add	r3, r2
  40be6e:	009b      	lsls	r3, r3, #2
  40be70:	4a18      	ldr	r2, [pc, #96]	; (40bed4 <vTaskPriorityInherit+0x9c>)
  40be72:	4413      	add	r3, r2
  40be74:	4299      	cmp	r1, r3
  40be76:	d122      	bne.n	40bebe <vTaskPriorityInherit+0x86>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
  40be78:	68fb      	ldr	r3, [r7, #12]
  40be7a:	3304      	adds	r3, #4
  40be7c:	4618      	mov	r0, r3
  40be7e:	4b16      	ldr	r3, [pc, #88]	; (40bed8 <vTaskPriorityInherit+0xa0>)
  40be80:	4798      	blx	r3

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40be82:	4b13      	ldr	r3, [pc, #76]	; (40bed0 <vTaskPriorityInherit+0x98>)
  40be84:	681b      	ldr	r3, [r3, #0]
  40be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40be88:	68fb      	ldr	r3, [r7, #12]
  40be8a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
  40be8c:	68fb      	ldr	r3, [r7, #12]
  40be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40be90:	4b12      	ldr	r3, [pc, #72]	; (40bedc <vTaskPriorityInherit+0xa4>)
  40be92:	681b      	ldr	r3, [r3, #0]
  40be94:	429a      	cmp	r2, r3
  40be96:	d903      	bls.n	40bea0 <vTaskPriorityInherit+0x68>
  40be98:	68fb      	ldr	r3, [r7, #12]
  40be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40be9c:	4b0f      	ldr	r3, [pc, #60]	; (40bedc <vTaskPriorityInherit+0xa4>)
  40be9e:	601a      	str	r2, [r3, #0]
  40bea0:	68fb      	ldr	r3, [r7, #12]
  40bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bea4:	4613      	mov	r3, r2
  40bea6:	009b      	lsls	r3, r3, #2
  40bea8:	4413      	add	r3, r2
  40beaa:	009b      	lsls	r3, r3, #2
  40beac:	4a09      	ldr	r2, [pc, #36]	; (40bed4 <vTaskPriorityInherit+0x9c>)
  40beae:	441a      	add	r2, r3
  40beb0:	68fb      	ldr	r3, [r7, #12]
  40beb2:	3304      	adds	r3, #4
  40beb4:	4610      	mov	r0, r2
  40beb6:	4619      	mov	r1, r3
  40beb8:	4b09      	ldr	r3, [pc, #36]	; (40bee0 <vTaskPriorityInherit+0xa8>)
  40beba:	4798      	blx	r3
  40bebc:	e004      	b.n	40bec8 <vTaskPriorityInherit+0x90>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40bebe:	4b04      	ldr	r3, [pc, #16]	; (40bed0 <vTaskPriorityInherit+0x98>)
  40bec0:	681b      	ldr	r3, [r3, #0]
  40bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bec4:	68fb      	ldr	r3, [r7, #12]
  40bec6:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
  40bec8:	3710      	adds	r7, #16
  40beca:	46bd      	mov	sp, r7
  40becc:	bd80      	pop	{r7, pc}
  40bece:	bf00      	nop
  40bed0:	20003438 	.word	0x20003438
  40bed4:	2000343c 	.word	0x2000343c
  40bed8:	0040a5a1 	.word	0x0040a5a1
  40bedc:	20003558 	.word	0x20003558
  40bee0:	0040a4e1 	.word	0x0040a4e1

0040bee4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  40bee4:	b580      	push	{r7, lr}
  40bee6:	b084      	sub	sp, #16
  40bee8:	af00      	add	r7, sp, #0
  40beea:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40beec:	687b      	ldr	r3, [r7, #4]
  40beee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  40bef0:	687b      	ldr	r3, [r7, #4]
  40bef2:	2b00      	cmp	r3, #0
  40bef4:	d02c      	beq.n	40bf50 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40bef6:	68fb      	ldr	r3, [r7, #12]
  40bef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40befa:	68fb      	ldr	r3, [r7, #12]
  40befc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40befe:	429a      	cmp	r2, r3
  40bf00:	d026      	beq.n	40bf50 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
  40bf02:	68fb      	ldr	r3, [r7, #12]
  40bf04:	3304      	adds	r3, #4
  40bf06:	4618      	mov	r0, r3
  40bf08:	4b13      	ldr	r3, [pc, #76]	; (40bf58 <vTaskPriorityDisinherit+0x74>)
  40bf0a:	4798      	blx	r3

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  40bf0c:	68fb      	ldr	r3, [r7, #12]
  40bf0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  40bf10:	68fb      	ldr	r3, [r7, #12]
  40bf12:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  40bf14:	68fb      	ldr	r3, [r7, #12]
  40bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bf18:	f1c3 0208 	rsb	r2, r3, #8
  40bf1c:	68fb      	ldr	r3, [r7, #12]
  40bf1e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  40bf20:	68fb      	ldr	r3, [r7, #12]
  40bf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bf24:	4b0d      	ldr	r3, [pc, #52]	; (40bf5c <vTaskPriorityDisinherit+0x78>)
  40bf26:	681b      	ldr	r3, [r3, #0]
  40bf28:	429a      	cmp	r2, r3
  40bf2a:	d903      	bls.n	40bf34 <vTaskPriorityDisinherit+0x50>
  40bf2c:	68fb      	ldr	r3, [r7, #12]
  40bf2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bf30:	4b0a      	ldr	r3, [pc, #40]	; (40bf5c <vTaskPriorityDisinherit+0x78>)
  40bf32:	601a      	str	r2, [r3, #0]
  40bf34:	68fb      	ldr	r3, [r7, #12]
  40bf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bf38:	4613      	mov	r3, r2
  40bf3a:	009b      	lsls	r3, r3, #2
  40bf3c:	4413      	add	r3, r2
  40bf3e:	009b      	lsls	r3, r3, #2
  40bf40:	4a07      	ldr	r2, [pc, #28]	; (40bf60 <vTaskPriorityDisinherit+0x7c>)
  40bf42:	441a      	add	r2, r3
  40bf44:	68fb      	ldr	r3, [r7, #12]
  40bf46:	3304      	adds	r3, #4
  40bf48:	4610      	mov	r0, r2
  40bf4a:	4619      	mov	r1, r3
  40bf4c:	4b05      	ldr	r3, [pc, #20]	; (40bf64 <vTaskPriorityDisinherit+0x80>)
  40bf4e:	4798      	blx	r3
			}
		}
	}
  40bf50:	3710      	adds	r7, #16
  40bf52:	46bd      	mov	sp, r7
  40bf54:	bd80      	pop	{r7, pc}
  40bf56:	bf00      	nop
  40bf58:	0040a5a1 	.word	0x0040a5a1
  40bf5c:	20003558 	.word	0x20003558
  40bf60:	2000343c 	.word	0x2000343c
  40bf64:	0040a4e1 	.word	0x0040a4e1

0040bf68 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  40bf68:	b590      	push	{r4, r7, lr}
  40bf6a:	b087      	sub	sp, #28
  40bf6c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  40bf6e:	2300      	movs	r3, #0
  40bf70:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  40bf72:	4b0d      	ldr	r3, [pc, #52]	; (40bfa8 <xTimerCreateTimerTask+0x40>)
  40bf74:	4798      	blx	r3

	if( xTimerQueue != NULL )
  40bf76:	4b0d      	ldr	r3, [pc, #52]	; (40bfac <xTimerCreateTimerTask+0x44>)
  40bf78:	681b      	ldr	r3, [r3, #0]
  40bf7a:	2b00      	cmp	r3, #0
  40bf7c:	d00f      	beq.n	40bf9e <xTimerCreateTimerTask+0x36>
	{
		xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
  40bf7e:	2301      	movs	r3, #1
  40bf80:	9300      	str	r3, [sp, #0]
  40bf82:	2300      	movs	r3, #0
  40bf84:	9301      	str	r3, [sp, #4]
  40bf86:	2300      	movs	r3, #0
  40bf88:	9302      	str	r3, [sp, #8]
  40bf8a:	2300      	movs	r3, #0
  40bf8c:	9303      	str	r3, [sp, #12]
  40bf8e:	4808      	ldr	r0, [pc, #32]	; (40bfb0 <xTimerCreateTimerTask+0x48>)
  40bf90:	4908      	ldr	r1, [pc, #32]	; (40bfb4 <xTimerCreateTimerTask+0x4c>)
  40bf92:	f44f 7280 	mov.w	r2, #256	; 0x100
  40bf96:	2300      	movs	r3, #0
  40bf98:	4c07      	ldr	r4, [pc, #28]	; (40bfb8 <xTimerCreateTimerTask+0x50>)
  40bf9a:	47a0      	blx	r4
  40bf9c:	6078      	str	r0, [r7, #4]
	}

	configASSERT( xReturn );
	return xReturn;
  40bf9e:	687b      	ldr	r3, [r7, #4]
}
  40bfa0:	4618      	mov	r0, r3
  40bfa2:	370c      	adds	r7, #12
  40bfa4:	46bd      	mov	sp, r7
  40bfa6:	bd90      	pop	{r4, r7, pc}
  40bfa8:	0040c4ad 	.word	0x0040c4ad
  40bfac:	200035e4 	.word	0x200035e4
  40bfb0:	0040c131 	.word	0x0040c131
  40bfb4:	0041d454 	.word	0x0041d454
  40bfb8:	0040b029 	.word	0x0040b029

0040bfbc <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  40bfbc:	b580      	push	{r7, lr}
  40bfbe:	b086      	sub	sp, #24
  40bfc0:	af00      	add	r7, sp, #0
  40bfc2:	60f8      	str	r0, [r7, #12]
  40bfc4:	60b9      	str	r1, [r7, #8]
  40bfc6:	607a      	str	r2, [r7, #4]
  40bfc8:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  40bfca:	68bb      	ldr	r3, [r7, #8]
  40bfcc:	2b00      	cmp	r3, #0
  40bfce:	d102      	bne.n	40bfd6 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
  40bfd0:	2300      	movs	r3, #0
  40bfd2:	617b      	str	r3, [r7, #20]
  40bfd4:	e01c      	b.n	40c010 <xTimerCreate+0x54>
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  40bfd6:	2028      	movs	r0, #40	; 0x28
  40bfd8:	4b10      	ldr	r3, [pc, #64]	; (40c01c <xTimerCreate+0x60>)
  40bfda:	4798      	blx	r3
  40bfdc:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  40bfde:	697b      	ldr	r3, [r7, #20]
  40bfe0:	2b00      	cmp	r3, #0
  40bfe2:	d015      	beq.n	40c010 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  40bfe4:	4b0e      	ldr	r3, [pc, #56]	; (40c020 <xTimerCreate+0x64>)
  40bfe6:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  40bfe8:	697b      	ldr	r3, [r7, #20]
  40bfea:	68fa      	ldr	r2, [r7, #12]
  40bfec:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  40bfee:	697b      	ldr	r3, [r7, #20]
  40bff0:	68ba      	ldr	r2, [r7, #8]
  40bff2:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  40bff4:	697b      	ldr	r3, [r7, #20]
  40bff6:	687a      	ldr	r2, [r7, #4]
  40bff8:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  40bffa:	697b      	ldr	r3, [r7, #20]
  40bffc:	683a      	ldr	r2, [r7, #0]
  40bffe:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  40c000:	697b      	ldr	r3, [r7, #20]
  40c002:	6a3a      	ldr	r2, [r7, #32]
  40c004:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  40c006:	697b      	ldr	r3, [r7, #20]
  40c008:	3304      	adds	r3, #4
  40c00a:	4618      	mov	r0, r3
  40c00c:	4b05      	ldr	r3, [pc, #20]	; (40c024 <xTimerCreate+0x68>)
  40c00e:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  40c010:	697b      	ldr	r3, [r7, #20]
}
  40c012:	4618      	mov	r0, r3
  40c014:	3718      	adds	r7, #24
  40c016:	46bd      	mov	sp, r7
  40c018:	bd80      	pop	{r7, pc}
  40c01a:	bf00      	nop
  40c01c:	0040a865 	.word	0x0040a865
  40c020:	0040c4ad 	.word	0x0040c4ad
  40c024:	0040a4c9 	.word	0x0040a4c9

0040c028 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  40c028:	b590      	push	{r4, r7, lr}
  40c02a:	b089      	sub	sp, #36	; 0x24
  40c02c:	af00      	add	r7, sp, #0
  40c02e:	60f8      	str	r0, [r7, #12]
  40c030:	60b9      	str	r1, [r7, #8]
  40c032:	607a      	str	r2, [r7, #4]
  40c034:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  40c036:	2300      	movs	r3, #0
  40c038:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40c03a:	4b1d      	ldr	r3, [pc, #116]	; (40c0b0 <xTimerGenericCommand+0x88>)
  40c03c:	681b      	ldr	r3, [r3, #0]
  40c03e:	2b00      	cmp	r3, #0
  40c040:	d030      	beq.n	40c0a4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40c042:	68bb      	ldr	r3, [r7, #8]
  40c044:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  40c046:	687b      	ldr	r3, [r7, #4]
  40c048:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40c04a:	68fb      	ldr	r3, [r7, #12]
  40c04c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  40c04e:	683b      	ldr	r3, [r7, #0]
  40c050:	2b00      	cmp	r3, #0
  40c052:	d11c      	bne.n	40c08e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40c054:	4b17      	ldr	r3, [pc, #92]	; (40c0b4 <xTimerGenericCommand+0x8c>)
  40c056:	4798      	blx	r3
  40c058:	4603      	mov	r3, r0
  40c05a:	2b01      	cmp	r3, #1
  40c05c:	d10b      	bne.n	40c076 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40c05e:	4b14      	ldr	r3, [pc, #80]	; (40c0b0 <xTimerGenericCommand+0x88>)
  40c060:	681a      	ldr	r2, [r3, #0]
  40c062:	f107 0310 	add.w	r3, r7, #16
  40c066:	4610      	mov	r0, r2
  40c068:	4619      	mov	r1, r3
  40c06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40c06c:	2300      	movs	r3, #0
  40c06e:	4c12      	ldr	r4, [pc, #72]	; (40c0b8 <xTimerGenericCommand+0x90>)
  40c070:	47a0      	blx	r4
  40c072:	61f8      	str	r0, [r7, #28]
  40c074:	e016      	b.n	40c0a4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40c076:	4b0e      	ldr	r3, [pc, #56]	; (40c0b0 <xTimerGenericCommand+0x88>)
  40c078:	681a      	ldr	r2, [r3, #0]
  40c07a:	f107 0310 	add.w	r3, r7, #16
  40c07e:	4610      	mov	r0, r2
  40c080:	4619      	mov	r1, r3
  40c082:	2200      	movs	r2, #0
  40c084:	2300      	movs	r3, #0
  40c086:	4c0c      	ldr	r4, [pc, #48]	; (40c0b8 <xTimerGenericCommand+0x90>)
  40c088:	47a0      	blx	r4
  40c08a:	61f8      	str	r0, [r7, #28]
  40c08c:	e00a      	b.n	40c0a4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40c08e:	4b08      	ldr	r3, [pc, #32]	; (40c0b0 <xTimerGenericCommand+0x88>)
  40c090:	681a      	ldr	r2, [r3, #0]
  40c092:	f107 0310 	add.w	r3, r7, #16
  40c096:	4610      	mov	r0, r2
  40c098:	4619      	mov	r1, r3
  40c09a:	683a      	ldr	r2, [r7, #0]
  40c09c:	2300      	movs	r3, #0
  40c09e:	4c07      	ldr	r4, [pc, #28]	; (40c0bc <xTimerGenericCommand+0x94>)
  40c0a0:	47a0      	blx	r4
  40c0a2:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  40c0a4:	69fb      	ldr	r3, [r7, #28]
}
  40c0a6:	4618      	mov	r0, r3
  40c0a8:	3724      	adds	r7, #36	; 0x24
  40c0aa:	46bd      	mov	sp, r7
  40c0ac:	bd90      	pop	{r4, r7, pc}
  40c0ae:	bf00      	nop
  40c0b0:	200035e4 	.word	0x200035e4
  40c0b4:	0040bdfd 	.word	0x0040bdfd
  40c0b8:	0040aa11 	.word	0x0040aa11
  40c0bc:	0040ab4d 	.word	0x0040ab4d

0040c0c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  40c0c0:	b590      	push	{r4, r7, lr}
  40c0c2:	b087      	sub	sp, #28
  40c0c4:	af02      	add	r7, sp, #8
  40c0c6:	6078      	str	r0, [r7, #4]
  40c0c8:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40c0ca:	4b15      	ldr	r3, [pc, #84]	; (40c120 <prvProcessExpiredTimer+0x60>)
  40c0cc:	681b      	ldr	r3, [r3, #0]
  40c0ce:	68db      	ldr	r3, [r3, #12]
  40c0d0:	68db      	ldr	r3, [r3, #12]
  40c0d2:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
  40c0d4:	68fb      	ldr	r3, [r7, #12]
  40c0d6:	3304      	adds	r3, #4
  40c0d8:	4618      	mov	r0, r3
  40c0da:	4b12      	ldr	r3, [pc, #72]	; (40c124 <prvProcessExpiredTimer+0x64>)
  40c0dc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40c0de:	68fb      	ldr	r3, [r7, #12]
  40c0e0:	69db      	ldr	r3, [r3, #28]
  40c0e2:	2b01      	cmp	r3, #1
  40c0e4:	d115      	bne.n	40c112 <prvProcessExpiredTimer+0x52>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40c0e6:	68fb      	ldr	r3, [r7, #12]
  40c0e8:	699a      	ldr	r2, [r3, #24]
  40c0ea:	687b      	ldr	r3, [r7, #4]
  40c0ec:	4413      	add	r3, r2
  40c0ee:	68f8      	ldr	r0, [r7, #12]
  40c0f0:	4619      	mov	r1, r3
  40c0f2:	683a      	ldr	r2, [r7, #0]
  40c0f4:	687b      	ldr	r3, [r7, #4]
  40c0f6:	4c0c      	ldr	r4, [pc, #48]	; (40c128 <prvProcessExpiredTimer+0x68>)
  40c0f8:	47a0      	blx	r4
  40c0fa:	4603      	mov	r3, r0
  40c0fc:	2b01      	cmp	r3, #1
  40c0fe:	d108      	bne.n	40c112 <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40c100:	2300      	movs	r3, #0
  40c102:	9300      	str	r3, [sp, #0]
  40c104:	68f8      	ldr	r0, [r7, #12]
  40c106:	2100      	movs	r1, #0
  40c108:	687a      	ldr	r2, [r7, #4]
  40c10a:	2300      	movs	r3, #0
  40c10c:	4c07      	ldr	r4, [pc, #28]	; (40c12c <prvProcessExpiredTimer+0x6c>)
  40c10e:	47a0      	blx	r4
  40c110:	60b8      	str	r0, [r7, #8]
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40c112:	68fb      	ldr	r3, [r7, #12]
  40c114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c116:	68f8      	ldr	r0, [r7, #12]
  40c118:	4798      	blx	r3
}
  40c11a:	3714      	adds	r7, #20
  40c11c:	46bd      	mov	sp, r7
  40c11e:	bd90      	pop	{r4, r7, pc}
  40c120:	200035dc 	.word	0x200035dc
  40c124:	0040a5a1 	.word	0x0040a5a1
  40c128:	0040c279 	.word	0x0040c279
  40c12c:	0040c029 	.word	0x0040c029

0040c130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40c130:	b580      	push	{r7, lr}
  40c132:	b084      	sub	sp, #16
  40c134:	af00      	add	r7, sp, #0
  40c136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  40c138:	f107 0308 	add.w	r3, r7, #8
  40c13c:	4618      	mov	r0, r3
  40c13e:	4b05      	ldr	r3, [pc, #20]	; (40c154 <prvTimerTask+0x24>)
  40c140:	4798      	blx	r3
  40c142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40c144:	68bb      	ldr	r3, [r7, #8]
  40c146:	68f8      	ldr	r0, [r7, #12]
  40c148:	4619      	mov	r1, r3
  40c14a:	4b03      	ldr	r3, [pc, #12]	; (40c158 <prvTimerTask+0x28>)
  40c14c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  40c14e:	4b03      	ldr	r3, [pc, #12]	; (40c15c <prvTimerTask+0x2c>)
  40c150:	4798      	blx	r3
	}
  40c152:	e7f1      	b.n	40c138 <prvTimerTask+0x8>
  40c154:	0040c1e5 	.word	0x0040c1e5
  40c158:	0040c161 	.word	0x0040c161
  40c15c:	0040c301 	.word	0x0040c301

0040c160 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  40c160:	b580      	push	{r7, lr}
  40c162:	b084      	sub	sp, #16
  40c164:	af00      	add	r7, sp, #0
  40c166:	6078      	str	r0, [r7, #4]
  40c168:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40c16a:	4b17      	ldr	r3, [pc, #92]	; (40c1c8 <prvProcessTimerOrBlockTask+0x68>)
  40c16c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40c16e:	f107 0308 	add.w	r3, r7, #8
  40c172:	4618      	mov	r0, r3
  40c174:	4b15      	ldr	r3, [pc, #84]	; (40c1cc <prvProcessTimerOrBlockTask+0x6c>)
  40c176:	4798      	blx	r3
  40c178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  40c17a:	68bb      	ldr	r3, [r7, #8]
  40c17c:	2b00      	cmp	r3, #0
  40c17e:	d11e      	bne.n	40c1be <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40c180:	683b      	ldr	r3, [r7, #0]
  40c182:	2b00      	cmp	r3, #0
  40c184:	d10a      	bne.n	40c19c <prvProcessTimerOrBlockTask+0x3c>
  40c186:	687a      	ldr	r2, [r7, #4]
  40c188:	68fb      	ldr	r3, [r7, #12]
  40c18a:	429a      	cmp	r2, r3
  40c18c:	d806      	bhi.n	40c19c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  40c18e:	4b10      	ldr	r3, [pc, #64]	; (40c1d0 <prvProcessTimerOrBlockTask+0x70>)
  40c190:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40c192:	6878      	ldr	r0, [r7, #4]
  40c194:	68f9      	ldr	r1, [r7, #12]
  40c196:	4b0f      	ldr	r3, [pc, #60]	; (40c1d4 <prvProcessTimerOrBlockTask+0x74>)
  40c198:	4798      	blx	r3
  40c19a:	e012      	b.n	40c1c2 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40c19c:	4b0e      	ldr	r3, [pc, #56]	; (40c1d8 <prvProcessTimerOrBlockTask+0x78>)
  40c19e:	681a      	ldr	r2, [r3, #0]
  40c1a0:	6879      	ldr	r1, [r7, #4]
  40c1a2:	68fb      	ldr	r3, [r7, #12]
  40c1a4:	1acb      	subs	r3, r1, r3
  40c1a6:	4610      	mov	r0, r2
  40c1a8:	4619      	mov	r1, r3
  40c1aa:	4b0c      	ldr	r3, [pc, #48]	; (40c1dc <prvProcessTimerOrBlockTask+0x7c>)
  40c1ac:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40c1ae:	4b08      	ldr	r3, [pc, #32]	; (40c1d0 <prvProcessTimerOrBlockTask+0x70>)
  40c1b0:	4798      	blx	r3
  40c1b2:	4603      	mov	r3, r0
  40c1b4:	2b00      	cmp	r3, #0
  40c1b6:	d104      	bne.n	40c1c2 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40c1b8:	4b09      	ldr	r3, [pc, #36]	; (40c1e0 <prvProcessTimerOrBlockTask+0x80>)
  40c1ba:	4798      	blx	r3
  40c1bc:	e001      	b.n	40c1c2 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  40c1be:	4b04      	ldr	r3, [pc, #16]	; (40c1d0 <prvProcessTimerOrBlockTask+0x70>)
  40c1c0:	4798      	blx	r3
		}
	}
}
  40c1c2:	3710      	adds	r7, #16
  40c1c4:	46bd      	mov	sp, r7
  40c1c6:	bd80      	pop	{r7, pc}
  40c1c8:	0040b325 	.word	0x0040b325
  40c1cc:	0040c22d 	.word	0x0040c22d
  40c1d0:	0040b341 	.word	0x0040b341
  40c1d4:	0040c0c1 	.word	0x0040c0c1
  40c1d8:	200035e4 	.word	0x200035e4
  40c1dc:	0040afc5 	.word	0x0040afc5
  40c1e0:	0040a75d 	.word	0x0040a75d

0040c1e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  40c1e4:	b480      	push	{r7}
  40c1e6:	b085      	sub	sp, #20
  40c1e8:	af00      	add	r7, sp, #0
  40c1ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40c1ec:	4b0e      	ldr	r3, [pc, #56]	; (40c228 <prvGetNextExpireTime+0x44>)
  40c1ee:	681b      	ldr	r3, [r3, #0]
  40c1f0:	681b      	ldr	r3, [r3, #0]
  40c1f2:	2b00      	cmp	r3, #0
  40c1f4:	bf14      	ite	ne
  40c1f6:	2300      	movne	r3, #0
  40c1f8:	2301      	moveq	r3, #1
  40c1fa:	b2db      	uxtb	r3, r3
  40c1fc:	461a      	mov	r2, r3
  40c1fe:	687b      	ldr	r3, [r7, #4]
  40c200:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40c202:	687b      	ldr	r3, [r7, #4]
  40c204:	681b      	ldr	r3, [r3, #0]
  40c206:	2b00      	cmp	r3, #0
  40c208:	d105      	bne.n	40c216 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40c20a:	4b07      	ldr	r3, [pc, #28]	; (40c228 <prvGetNextExpireTime+0x44>)
  40c20c:	681b      	ldr	r3, [r3, #0]
  40c20e:	68db      	ldr	r3, [r3, #12]
  40c210:	681b      	ldr	r3, [r3, #0]
  40c212:	60fb      	str	r3, [r7, #12]
  40c214:	e001      	b.n	40c21a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40c216:	2300      	movs	r3, #0
  40c218:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  40c21a:	68fb      	ldr	r3, [r7, #12]
}
  40c21c:	4618      	mov	r0, r3
  40c21e:	3714      	adds	r7, #20
  40c220:	46bd      	mov	sp, r7
  40c222:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c226:	4770      	bx	lr
  40c228:	200035dc 	.word	0x200035dc

0040c22c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  40c22c:	b580      	push	{r7, lr}
  40c22e:	b084      	sub	sp, #16
  40c230:	af00      	add	r7, sp, #0
  40c232:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40c234:	4b0d      	ldr	r3, [pc, #52]	; (40c26c <prvSampleTimeNow+0x40>)
  40c236:	4798      	blx	r3
  40c238:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  40c23a:	4b0d      	ldr	r3, [pc, #52]	; (40c270 <prvSampleTimeNow+0x44>)
  40c23c:	681b      	ldr	r3, [r3, #0]
  40c23e:	68fa      	ldr	r2, [r7, #12]
  40c240:	429a      	cmp	r2, r3
  40c242:	d208      	bcs.n	40c256 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  40c244:	4b0a      	ldr	r3, [pc, #40]	; (40c270 <prvSampleTimeNow+0x44>)
  40c246:	681b      	ldr	r3, [r3, #0]
  40c248:	4618      	mov	r0, r3
  40c24a:	4b0a      	ldr	r3, [pc, #40]	; (40c274 <prvSampleTimeNow+0x48>)
  40c24c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40c24e:	687b      	ldr	r3, [r7, #4]
  40c250:	2201      	movs	r2, #1
  40c252:	601a      	str	r2, [r3, #0]
  40c254:	e002      	b.n	40c25c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40c256:	687b      	ldr	r3, [r7, #4]
  40c258:	2200      	movs	r2, #0
  40c25a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  40c25c:	4b04      	ldr	r3, [pc, #16]	; (40c270 <prvSampleTimeNow+0x44>)
  40c25e:	68fa      	ldr	r2, [r7, #12]
  40c260:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  40c262:	68fb      	ldr	r3, [r7, #12]
}
  40c264:	4618      	mov	r0, r3
  40c266:	3710      	adds	r7, #16
  40c268:	46bd      	mov	sp, r7
  40c26a:	bd80      	pop	{r7, pc}
  40c26c:	0040b44d 	.word	0x0040b44d
  40c270:	200035e8 	.word	0x200035e8
  40c274:	0040c3f9 	.word	0x0040c3f9

0040c278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  40c278:	b580      	push	{r7, lr}
  40c27a:	b086      	sub	sp, #24
  40c27c:	af00      	add	r7, sp, #0
  40c27e:	60f8      	str	r0, [r7, #12]
  40c280:	60b9      	str	r1, [r7, #8]
  40c282:	607a      	str	r2, [r7, #4]
  40c284:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40c286:	2300      	movs	r3, #0
  40c288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40c28a:	68fb      	ldr	r3, [r7, #12]
  40c28c:	68ba      	ldr	r2, [r7, #8]
  40c28e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40c290:	68fb      	ldr	r3, [r7, #12]
  40c292:	68fa      	ldr	r2, [r7, #12]
  40c294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  40c296:	68ba      	ldr	r2, [r7, #8]
  40c298:	687b      	ldr	r3, [r7, #4]
  40c29a:	429a      	cmp	r2, r3
  40c29c:	d812      	bhi.n	40c2c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40c29e:	687a      	ldr	r2, [r7, #4]
  40c2a0:	683b      	ldr	r3, [r7, #0]
  40c2a2:	1ad2      	subs	r2, r2, r3
  40c2a4:	68fb      	ldr	r3, [r7, #12]
  40c2a6:	699b      	ldr	r3, [r3, #24]
  40c2a8:	429a      	cmp	r2, r3
  40c2aa:	d302      	bcc.n	40c2b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40c2ac:	2301      	movs	r3, #1
  40c2ae:	617b      	str	r3, [r7, #20]
  40c2b0:	e01b      	b.n	40c2ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40c2b2:	4b10      	ldr	r3, [pc, #64]	; (40c2f4 <prvInsertTimerInActiveList+0x7c>)
  40c2b4:	681a      	ldr	r2, [r3, #0]
  40c2b6:	68fb      	ldr	r3, [r7, #12]
  40c2b8:	3304      	adds	r3, #4
  40c2ba:	4610      	mov	r0, r2
  40c2bc:	4619      	mov	r1, r3
  40c2be:	4b0e      	ldr	r3, [pc, #56]	; (40c2f8 <prvInsertTimerInActiveList+0x80>)
  40c2c0:	4798      	blx	r3
  40c2c2:	e012      	b.n	40c2ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40c2c4:	687a      	ldr	r2, [r7, #4]
  40c2c6:	683b      	ldr	r3, [r7, #0]
  40c2c8:	429a      	cmp	r2, r3
  40c2ca:	d206      	bcs.n	40c2da <prvInsertTimerInActiveList+0x62>
  40c2cc:	68ba      	ldr	r2, [r7, #8]
  40c2ce:	683b      	ldr	r3, [r7, #0]
  40c2d0:	429a      	cmp	r2, r3
  40c2d2:	d302      	bcc.n	40c2da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40c2d4:	2301      	movs	r3, #1
  40c2d6:	617b      	str	r3, [r7, #20]
  40c2d8:	e007      	b.n	40c2ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40c2da:	4b08      	ldr	r3, [pc, #32]	; (40c2fc <prvInsertTimerInActiveList+0x84>)
  40c2dc:	681a      	ldr	r2, [r3, #0]
  40c2de:	68fb      	ldr	r3, [r7, #12]
  40c2e0:	3304      	adds	r3, #4
  40c2e2:	4610      	mov	r0, r2
  40c2e4:	4619      	mov	r1, r3
  40c2e6:	4b04      	ldr	r3, [pc, #16]	; (40c2f8 <prvInsertTimerInActiveList+0x80>)
  40c2e8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  40c2ea:	697b      	ldr	r3, [r7, #20]
}
  40c2ec:	4618      	mov	r0, r3
  40c2ee:	3718      	adds	r7, #24
  40c2f0:	46bd      	mov	sp, r7
  40c2f2:	bd80      	pop	{r7, pc}
  40c2f4:	200035e0 	.word	0x200035e0
  40c2f8:	0040a531 	.word	0x0040a531
  40c2fc:	200035dc 	.word	0x200035dc

0040c300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  40c300:	b590      	push	{r4, r7, lr}
  40c302:	b08b      	sub	sp, #44	; 0x2c
  40c304:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40c306:	1d3b      	adds	r3, r7, #4
  40c308:	4618      	mov	r0, r3
  40c30a:	4b34      	ldr	r3, [pc, #208]	; (40c3dc <prvProcessReceivedCommands+0xdc>)
  40c30c:	4798      	blx	r3
  40c30e:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40c310:	e053      	b.n	40c3ba <prvProcessReceivedCommands+0xba>
	{
		pxTimer = xMessage.pxTimer;
  40c312:	693b      	ldr	r3, [r7, #16]
  40c314:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40c316:	69bb      	ldr	r3, [r7, #24]
  40c318:	2b00      	cmp	r3, #0
  40c31a:	d008      	beq.n	40c32e <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40c31c:	69bb      	ldr	r3, [r7, #24]
  40c31e:	695b      	ldr	r3, [r3, #20]
  40c320:	2b00      	cmp	r3, #0
  40c322:	d004      	beq.n	40c32e <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
  40c324:	69bb      	ldr	r3, [r7, #24]
  40c326:	3304      	adds	r3, #4
  40c328:	4618      	mov	r0, r3
  40c32a:	4b2d      	ldr	r3, [pc, #180]	; (40c3e0 <prvProcessReceivedCommands+0xe0>)
  40c32c:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40c32e:	68bb      	ldr	r3, [r7, #8]
  40c330:	2b03      	cmp	r3, #3
  40c332:	d841      	bhi.n	40c3b8 <prvProcessReceivedCommands+0xb8>
  40c334:	a201      	add	r2, pc, #4	; (adr r2, 40c33c <prvProcessReceivedCommands+0x3c>)
  40c336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c33a:	bf00      	nop
  40c33c:	0040c34d 	.word	0x0040c34d
  40c340:	0040c3b9 	.word	0x0040c3b9
  40c344:	0040c395 	.word	0x0040c395
  40c348:	0040c3b1 	.word	0x0040c3b1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40c34c:	68fa      	ldr	r2, [r7, #12]
  40c34e:	69bb      	ldr	r3, [r7, #24]
  40c350:	699b      	ldr	r3, [r3, #24]
  40c352:	441a      	add	r2, r3
  40c354:	68fb      	ldr	r3, [r7, #12]
  40c356:	69b8      	ldr	r0, [r7, #24]
  40c358:	4611      	mov	r1, r2
  40c35a:	69fa      	ldr	r2, [r7, #28]
  40c35c:	4c21      	ldr	r4, [pc, #132]	; (40c3e4 <prvProcessReceivedCommands+0xe4>)
  40c35e:	47a0      	blx	r4
  40c360:	4603      	mov	r3, r0
  40c362:	2b01      	cmp	r3, #1
  40c364:	d115      	bne.n	40c392 <prvProcessReceivedCommands+0x92>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40c366:	69bb      	ldr	r3, [r7, #24]
  40c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c36a:	69b8      	ldr	r0, [r7, #24]
  40c36c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40c36e:	69bb      	ldr	r3, [r7, #24]
  40c370:	69db      	ldr	r3, [r3, #28]
  40c372:	2b01      	cmp	r3, #1
  40c374:	d10d      	bne.n	40c392 <prvProcessReceivedCommands+0x92>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40c376:	68fa      	ldr	r2, [r7, #12]
  40c378:	69bb      	ldr	r3, [r7, #24]
  40c37a:	699b      	ldr	r3, [r3, #24]
  40c37c:	4413      	add	r3, r2
  40c37e:	2200      	movs	r2, #0
  40c380:	9200      	str	r2, [sp, #0]
  40c382:	69b8      	ldr	r0, [r7, #24]
  40c384:	2100      	movs	r1, #0
  40c386:	461a      	mov	r2, r3
  40c388:	2300      	movs	r3, #0
  40c38a:	4c17      	ldr	r4, [pc, #92]	; (40c3e8 <prvProcessReceivedCommands+0xe8>)
  40c38c:	47a0      	blx	r4
  40c38e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
  40c390:	e013      	b.n	40c3ba <prvProcessReceivedCommands+0xba>
  40c392:	e012      	b.n	40c3ba <prvProcessReceivedCommands+0xba>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40c394:	68fa      	ldr	r2, [r7, #12]
  40c396:	69bb      	ldr	r3, [r7, #24]
  40c398:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40c39a:	69bb      	ldr	r3, [r7, #24]
  40c39c:	699a      	ldr	r2, [r3, #24]
  40c39e:	69fb      	ldr	r3, [r7, #28]
  40c3a0:	4413      	add	r3, r2
  40c3a2:	69b8      	ldr	r0, [r7, #24]
  40c3a4:	4619      	mov	r1, r3
  40c3a6:	69fa      	ldr	r2, [r7, #28]
  40c3a8:	69fb      	ldr	r3, [r7, #28]
  40c3aa:	4c0e      	ldr	r4, [pc, #56]	; (40c3e4 <prvProcessReceivedCommands+0xe4>)
  40c3ac:	47a0      	blx	r4
				break;
  40c3ae:	e004      	b.n	40c3ba <prvProcessReceivedCommands+0xba>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40c3b0:	69b8      	ldr	r0, [r7, #24]
  40c3b2:	4b0e      	ldr	r3, [pc, #56]	; (40c3ec <prvProcessReceivedCommands+0xec>)
  40c3b4:	4798      	blx	r3
				break;
  40c3b6:	e000      	b.n	40c3ba <prvProcessReceivedCommands+0xba>

			default	:
				/* Don't expect to get here. */
				break;
  40c3b8:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40c3ba:	4b0d      	ldr	r3, [pc, #52]	; (40c3f0 <prvProcessReceivedCommands+0xf0>)
  40c3bc:	681a      	ldr	r2, [r3, #0]
  40c3be:	f107 0308 	add.w	r3, r7, #8
  40c3c2:	4610      	mov	r0, r2
  40c3c4:	4619      	mov	r1, r3
  40c3c6:	2200      	movs	r2, #0
  40c3c8:	2300      	movs	r3, #0
  40c3ca:	4c0a      	ldr	r4, [pc, #40]	; (40c3f4 <prvProcessReceivedCommands+0xf4>)
  40c3cc:	47a0      	blx	r4
  40c3ce:	4603      	mov	r3, r0
  40c3d0:	2b00      	cmp	r3, #0
  40c3d2:	d19e      	bne.n	40c312 <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  40c3d4:	3724      	adds	r7, #36	; 0x24
  40c3d6:	46bd      	mov	sp, r7
  40c3d8:	bd90      	pop	{r4, r7, pc}
  40c3da:	bf00      	nop
  40c3dc:	0040c22d 	.word	0x0040c22d
  40c3e0:	0040a5a1 	.word	0x0040a5a1
  40c3e4:	0040c279 	.word	0x0040c279
  40c3e8:	0040c029 	.word	0x0040c029
  40c3ec:	0040a895 	.word	0x0040a895
  40c3f0:	200035e4 	.word	0x200035e4
  40c3f4:	0040abd5 	.word	0x0040abd5

0040c3f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  40c3f8:	b590      	push	{r4, r7, lr}
  40c3fa:	b08b      	sub	sp, #44	; 0x2c
  40c3fc:	af02      	add	r7, sp, #8
  40c3fe:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40c400:	e037      	b.n	40c472 <prvSwitchTimerLists+0x7a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40c402:	4b25      	ldr	r3, [pc, #148]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c404:	681b      	ldr	r3, [r3, #0]
  40c406:	68db      	ldr	r3, [r3, #12]
  40c408:	681b      	ldr	r3, [r3, #0]
  40c40a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40c40c:	4b22      	ldr	r3, [pc, #136]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c40e:	681b      	ldr	r3, [r3, #0]
  40c410:	68db      	ldr	r3, [r3, #12]
  40c412:	68db      	ldr	r3, [r3, #12]
  40c414:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
  40c416:	69bb      	ldr	r3, [r7, #24]
  40c418:	3304      	adds	r3, #4
  40c41a:	4618      	mov	r0, r3
  40c41c:	4b1f      	ldr	r3, [pc, #124]	; (40c49c <prvSwitchTimerLists+0xa4>)
  40c41e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40c420:	69bb      	ldr	r3, [r7, #24]
  40c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c424:	69b8      	ldr	r0, [r7, #24]
  40c426:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40c428:	69bb      	ldr	r3, [r7, #24]
  40c42a:	69db      	ldr	r3, [r3, #28]
  40c42c:	2b01      	cmp	r3, #1
  40c42e:	d120      	bne.n	40c472 <prvSwitchTimerLists+0x7a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40c430:	69bb      	ldr	r3, [r7, #24]
  40c432:	699a      	ldr	r2, [r3, #24]
  40c434:	69fb      	ldr	r3, [r7, #28]
  40c436:	4413      	add	r3, r2
  40c438:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40c43a:	697a      	ldr	r2, [r7, #20]
  40c43c:	69fb      	ldr	r3, [r7, #28]
  40c43e:	429a      	cmp	r2, r3
  40c440:	d90e      	bls.n	40c460 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40c442:	69bb      	ldr	r3, [r7, #24]
  40c444:	697a      	ldr	r2, [r7, #20]
  40c446:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40c448:	69bb      	ldr	r3, [r7, #24]
  40c44a:	69ba      	ldr	r2, [r7, #24]
  40c44c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40c44e:	4b12      	ldr	r3, [pc, #72]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c450:	681a      	ldr	r2, [r3, #0]
  40c452:	69bb      	ldr	r3, [r7, #24]
  40c454:	3304      	adds	r3, #4
  40c456:	4610      	mov	r0, r2
  40c458:	4619      	mov	r1, r3
  40c45a:	4b11      	ldr	r3, [pc, #68]	; (40c4a0 <prvSwitchTimerLists+0xa8>)
  40c45c:	4798      	blx	r3
  40c45e:	e008      	b.n	40c472 <prvSwitchTimerLists+0x7a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40c460:	2300      	movs	r3, #0
  40c462:	9300      	str	r3, [sp, #0]
  40c464:	69b8      	ldr	r0, [r7, #24]
  40c466:	2100      	movs	r1, #0
  40c468:	69fa      	ldr	r2, [r7, #28]
  40c46a:	2300      	movs	r3, #0
  40c46c:	4c0d      	ldr	r4, [pc, #52]	; (40c4a4 <prvSwitchTimerLists+0xac>)
  40c46e:	47a0      	blx	r4
  40c470:	6138      	str	r0, [r7, #16]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40c472:	4b09      	ldr	r3, [pc, #36]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c474:	681b      	ldr	r3, [r3, #0]
  40c476:	681b      	ldr	r3, [r3, #0]
  40c478:	2b00      	cmp	r3, #0
  40c47a:	d1c2      	bne.n	40c402 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40c47c:	4b06      	ldr	r3, [pc, #24]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c47e:	681b      	ldr	r3, [r3, #0]
  40c480:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  40c482:	4b09      	ldr	r3, [pc, #36]	; (40c4a8 <prvSwitchTimerLists+0xb0>)
  40c484:	681a      	ldr	r2, [r3, #0]
  40c486:	4b04      	ldr	r3, [pc, #16]	; (40c498 <prvSwitchTimerLists+0xa0>)
  40c488:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  40c48a:	4b07      	ldr	r3, [pc, #28]	; (40c4a8 <prvSwitchTimerLists+0xb0>)
  40c48c:	68fa      	ldr	r2, [r7, #12]
  40c48e:	601a      	str	r2, [r3, #0]
}
  40c490:	3724      	adds	r7, #36	; 0x24
  40c492:	46bd      	mov	sp, r7
  40c494:	bd90      	pop	{r4, r7, pc}
  40c496:	bf00      	nop
  40c498:	200035dc 	.word	0x200035dc
  40c49c:	0040a5a1 	.word	0x0040a5a1
  40c4a0:	0040a531 	.word	0x0040a531
  40c4a4:	0040c029 	.word	0x0040c029
  40c4a8:	200035e0 	.word	0x200035e0

0040c4ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40c4ac:	b580      	push	{r7, lr}
  40c4ae:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40c4b0:	4b0d      	ldr	r3, [pc, #52]	; (40c4e8 <prvCheckForValidListAndQueue+0x3c>)
  40c4b2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40c4b4:	4b0d      	ldr	r3, [pc, #52]	; (40c4ec <prvCheckForValidListAndQueue+0x40>)
  40c4b6:	681b      	ldr	r3, [r3, #0]
  40c4b8:	2b00      	cmp	r3, #0
  40c4ba:	d112      	bne.n	40c4e2 <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
  40c4bc:	480c      	ldr	r0, [pc, #48]	; (40c4f0 <prvCheckForValidListAndQueue+0x44>)
  40c4be:	4b0d      	ldr	r3, [pc, #52]	; (40c4f4 <prvCheckForValidListAndQueue+0x48>)
  40c4c0:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40c4c2:	480d      	ldr	r0, [pc, #52]	; (40c4f8 <prvCheckForValidListAndQueue+0x4c>)
  40c4c4:	4b0b      	ldr	r3, [pc, #44]	; (40c4f4 <prvCheckForValidListAndQueue+0x48>)
  40c4c6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40c4c8:	4b0c      	ldr	r3, [pc, #48]	; (40c4fc <prvCheckForValidListAndQueue+0x50>)
  40c4ca:	4a09      	ldr	r2, [pc, #36]	; (40c4f0 <prvCheckForValidListAndQueue+0x44>)
  40c4cc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40c4ce:	4b0c      	ldr	r3, [pc, #48]	; (40c500 <prvCheckForValidListAndQueue+0x54>)
  40c4d0:	4a09      	ldr	r2, [pc, #36]	; (40c4f8 <prvCheckForValidListAndQueue+0x4c>)
  40c4d2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40c4d4:	200f      	movs	r0, #15
  40c4d6:	210c      	movs	r1, #12
  40c4d8:	4b0a      	ldr	r3, [pc, #40]	; (40c504 <prvCheckForValidListAndQueue+0x58>)
  40c4da:	4798      	blx	r3
  40c4dc:	4602      	mov	r2, r0
  40c4de:	4b03      	ldr	r3, [pc, #12]	; (40c4ec <prvCheckForValidListAndQueue+0x40>)
  40c4e0:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40c4e2:	4b09      	ldr	r3, [pc, #36]	; (40c508 <prvCheckForValidListAndQueue+0x5c>)
  40c4e4:	4798      	blx	r3
}
  40c4e6:	bd80      	pop	{r7, pc}
  40c4e8:	0040a775 	.word	0x0040a775
  40c4ec:	200035e4 	.word	0x200035e4
  40c4f0:	200035b4 	.word	0x200035b4
  40c4f4:	0040a489 	.word	0x0040a489
  40c4f8:	200035c8 	.word	0x200035c8
  40c4fc:	200035dc 	.word	0x200035dc
  40c500:	200035e0 	.word	0x200035e0
  40c504:	0040a8c5 	.word	0x0040a8c5
  40c508:	0040a799 	.word	0x0040a799

0040c50c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  40c50c:	b580      	push	{r7, lr}
  40c50e:	b084      	sub	sp, #16
  40c510:	af00      	add	r7, sp, #0
  40c512:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  40c514:	687b      	ldr	r3, [r7, #4]
  40c516:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  40c518:	4b08      	ldr	r3, [pc, #32]	; (40c53c <xTimerIsTimerActive+0x30>)
  40c51a:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  40c51c:	68fb      	ldr	r3, [r7, #12]
  40c51e:	695b      	ldr	r3, [r3, #20]
  40c520:	2b00      	cmp	r3, #0
  40c522:	bf0c      	ite	eq
  40c524:	2300      	moveq	r3, #0
  40c526:	2301      	movne	r3, #1
  40c528:	b2db      	uxtb	r3, r3
  40c52a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  40c52c:	4b04      	ldr	r3, [pc, #16]	; (40c540 <xTimerIsTimerActive+0x34>)
  40c52e:	4798      	blx	r3

	return xTimerIsInActiveList;
  40c530:	68bb      	ldr	r3, [r7, #8]
}
  40c532:	4618      	mov	r0, r3
  40c534:	3710      	adds	r7, #16
  40c536:	46bd      	mov	sp, r7
  40c538:	bd80      	pop	{r7, pc}
  40c53a:	bf00      	nop
  40c53c:	0040a775 	.word	0x0040a775
  40c540:	0040a799 	.word	0x0040a799

0040c544 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40c544:	b480      	push	{r7}
  40c546:	b083      	sub	sp, #12
  40c548:	af00      	add	r7, sp, #0
  40c54a:	4603      	mov	r3, r0
  40c54c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40c54e:	4b08      	ldr	r3, [pc, #32]	; (40c570 <NVIC_EnableIRQ+0x2c>)
  40c550:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40c554:	0952      	lsrs	r2, r2, #5
  40c556:	79f9      	ldrb	r1, [r7, #7]
  40c558:	f001 011f 	and.w	r1, r1, #31
  40c55c:	2001      	movs	r0, #1
  40c55e:	fa00 f101 	lsl.w	r1, r0, r1
  40c562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40c566:	370c      	adds	r7, #12
  40c568:	46bd      	mov	sp, r7
  40c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c56e:	4770      	bx	lr
  40c570:	e000e100 	.word	0xe000e100

0040c574 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40c574:	b480      	push	{r7}
  40c576:	b083      	sub	sp, #12
  40c578:	af00      	add	r7, sp, #0
  40c57a:	4603      	mov	r3, r0
  40c57c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40c57e:	4b09      	ldr	r3, [pc, #36]	; (40c5a4 <NVIC_DisableIRQ+0x30>)
  40c580:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40c584:	0952      	lsrs	r2, r2, #5
  40c586:	79f9      	ldrb	r1, [r7, #7]
  40c588:	f001 011f 	and.w	r1, r1, #31
  40c58c:	2001      	movs	r0, #1
  40c58e:	fa00 f101 	lsl.w	r1, r0, r1
  40c592:	3220      	adds	r2, #32
  40c594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40c598:	370c      	adds	r7, #12
  40c59a:	46bd      	mov	sp, r7
  40c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c5a0:	4770      	bx	lr
  40c5a2:	bf00      	nop
  40c5a4:	e000e100 	.word	0xe000e100

0040c5a8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  40c5a8:	b480      	push	{r7}
  40c5aa:	b083      	sub	sp, #12
  40c5ac:	af00      	add	r7, sp, #0
  40c5ae:	4603      	mov	r3, r0
  40c5b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40c5b2:	4b09      	ldr	r3, [pc, #36]	; (40c5d8 <NVIC_ClearPendingIRQ+0x30>)
  40c5b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40c5b8:	0952      	lsrs	r2, r2, #5
  40c5ba:	79f9      	ldrb	r1, [r7, #7]
  40c5bc:	f001 011f 	and.w	r1, r1, #31
  40c5c0:	2001      	movs	r0, #1
  40c5c2:	fa00 f101 	lsl.w	r1, r0, r1
  40c5c6:	3260      	adds	r2, #96	; 0x60
  40c5c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40c5cc:	370c      	adds	r7, #12
  40c5ce:	46bd      	mov	sp, r7
  40c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c5d4:	4770      	bx	lr
  40c5d6:	bf00      	nop
  40c5d8:	e000e100 	.word	0xe000e100

0040c5dc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40c5dc:	b480      	push	{r7}
  40c5de:	b083      	sub	sp, #12
  40c5e0:	af00      	add	r7, sp, #0
  40c5e2:	4603      	mov	r3, r0
  40c5e4:	6039      	str	r1, [r7, #0]
  40c5e6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40c5e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40c5ec:	2b00      	cmp	r3, #0
  40c5ee:	da0b      	bge.n	40c608 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40c5f0:	490d      	ldr	r1, [pc, #52]	; (40c628 <NVIC_SetPriority+0x4c>)
  40c5f2:	79fb      	ldrb	r3, [r7, #7]
  40c5f4:	f003 030f 	and.w	r3, r3, #15
  40c5f8:	3b04      	subs	r3, #4
  40c5fa:	683a      	ldr	r2, [r7, #0]
  40c5fc:	b2d2      	uxtb	r2, r2
  40c5fe:	0112      	lsls	r2, r2, #4
  40c600:	b2d2      	uxtb	r2, r2
  40c602:	440b      	add	r3, r1
  40c604:	761a      	strb	r2, [r3, #24]
  40c606:	e009      	b.n	40c61c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40c608:	4908      	ldr	r1, [pc, #32]	; (40c62c <NVIC_SetPriority+0x50>)
  40c60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40c60e:	683a      	ldr	r2, [r7, #0]
  40c610:	b2d2      	uxtb	r2, r2
  40c612:	0112      	lsls	r2, r2, #4
  40c614:	b2d2      	uxtb	r2, r2
  40c616:	440b      	add	r3, r1
  40c618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40c61c:	370c      	adds	r7, #12
  40c61e:	46bd      	mov	sp, r7
  40c620:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c624:	4770      	bx	lr
  40c626:	bf00      	nop
  40c628:	e000ed00 	.word	0xe000ed00
  40c62c:	e000e100 	.word	0xe000e100

0040c630 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40c630:	b480      	push	{r7}
  40c632:	b083      	sub	sp, #12
  40c634:	af00      	add	r7, sp, #0
  40c636:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40c638:	687b      	ldr	r3, [r7, #4]
  40c63a:	2b07      	cmp	r3, #7
  40c63c:	d825      	bhi.n	40c68a <osc_get_rate+0x5a>
  40c63e:	a201      	add	r2, pc, #4	; (adr r2, 40c644 <osc_get_rate+0x14>)
  40c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c644:	0040c665 	.word	0x0040c665
  40c648:	0040c66b 	.word	0x0040c66b
  40c64c:	0040c671 	.word	0x0040c671
  40c650:	0040c677 	.word	0x0040c677
  40c654:	0040c67b 	.word	0x0040c67b
  40c658:	0040c67f 	.word	0x0040c67f
  40c65c:	0040c683 	.word	0x0040c683
  40c660:	0040c687 	.word	0x0040c687
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40c664:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40c668:	e010      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40c66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c66e:	e00d      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40c670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c674:	e00a      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40c676:	4b08      	ldr	r3, [pc, #32]	; (40c698 <osc_get_rate+0x68>)
  40c678:	e008      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40c67a:	4b08      	ldr	r3, [pc, #32]	; (40c69c <osc_get_rate+0x6c>)
  40c67c:	e006      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40c67e:	4b08      	ldr	r3, [pc, #32]	; (40c6a0 <osc_get_rate+0x70>)
  40c680:	e004      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40c682:	4b08      	ldr	r3, [pc, #32]	; (40c6a4 <osc_get_rate+0x74>)
  40c684:	e002      	b.n	40c68c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40c686:	4b07      	ldr	r3, [pc, #28]	; (40c6a4 <osc_get_rate+0x74>)
  40c688:	e000      	b.n	40c68c <osc_get_rate+0x5c>
	}

	return 0;
  40c68a:	2300      	movs	r3, #0
}
  40c68c:	4618      	mov	r0, r3
  40c68e:	370c      	adds	r7, #12
  40c690:	46bd      	mov	sp, r7
  40c692:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c696:	4770      	bx	lr
  40c698:	003d0900 	.word	0x003d0900
  40c69c:	007a1200 	.word	0x007a1200
  40c6a0:	00b71b00 	.word	0x00b71b00
  40c6a4:	00f42400 	.word	0x00f42400

0040c6a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40c6a8:	b580      	push	{r7, lr}
  40c6aa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40c6ac:	2006      	movs	r0, #6
  40c6ae:	4b04      	ldr	r3, [pc, #16]	; (40c6c0 <sysclk_get_main_hz+0x18>)
  40c6b0:	4798      	blx	r3
  40c6b2:	4602      	mov	r2, r0
  40c6b4:	4613      	mov	r3, r2
  40c6b6:	011b      	lsls	r3, r3, #4
  40c6b8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40c6ba:	4618      	mov	r0, r3
  40c6bc:	bd80      	pop	{r7, pc}
  40c6be:	bf00      	nop
  40c6c0:	0040c631 	.word	0x0040c631

0040c6c4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40c6c4:	b580      	push	{r7, lr}
  40c6c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40c6c8:	4b02      	ldr	r3, [pc, #8]	; (40c6d4 <sysclk_get_peripheral_hz+0x10>)
  40c6ca:	4798      	blx	r3
  40c6cc:	4603      	mov	r3, r0
  40c6ce:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40c6d0:	4618      	mov	r0, r3
  40c6d2:	bd80      	pop	{r7, pc}
  40c6d4:	0040c6a9 	.word	0x0040c6a9

0040c6d8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40c6d8:	b580      	push	{r7, lr}
  40c6da:	b082      	sub	sp, #8
  40c6dc:	af00      	add	r7, sp, #0
  40c6de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40c6e0:	6878      	ldr	r0, [r7, #4]
  40c6e2:	4b02      	ldr	r3, [pc, #8]	; (40c6ec <sysclk_enable_peripheral_clock+0x14>)
  40c6e4:	4798      	blx	r3
}
  40c6e6:	3708      	adds	r7, #8
  40c6e8:	46bd      	mov	sp, r7
  40c6ea:	bd80      	pop	{r7, pc}
  40c6ec:	00411d0d 	.word	0x00411d0d

0040c6f0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40c6f0:	b580      	push	{r7, lr}
  40c6f2:	b08c      	sub	sp, #48	; 0x30
  40c6f4:	af00      	add	r7, sp, #0
  40c6f6:	6078      	str	r0, [r7, #4]
  40c6f8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40c6fa:	4b31      	ldr	r3, [pc, #196]	; (40c7c0 <usart_serial_init+0xd0>)
  40c6fc:	4798      	blx	r3
  40c6fe:	4603      	mov	r3, r0
  40c700:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40c702:	683b      	ldr	r3, [r7, #0]
  40c704:	681b      	ldr	r3, [r3, #0]
  40c706:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40c708:	683b      	ldr	r3, [r7, #0]
  40c70a:	689b      	ldr	r3, [r3, #8]
  40c70c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40c70e:	683b      	ldr	r3, [r7, #0]
  40c710:	681b      	ldr	r3, [r3, #0]
  40c712:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40c714:	683b      	ldr	r3, [r7, #0]
  40c716:	685b      	ldr	r3, [r3, #4]
  40c718:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40c71a:	683b      	ldr	r3, [r7, #0]
  40c71c:	689b      	ldr	r3, [r3, #8]
  40c71e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40c720:	683b      	ldr	r3, [r7, #0]
  40c722:	7b1b      	ldrb	r3, [r3, #12]
  40c724:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40c726:	2300      	movs	r3, #0
  40c728:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40c72a:	687a      	ldr	r2, [r7, #4]
  40c72c:	4b25      	ldr	r3, [pc, #148]	; (40c7c4 <usart_serial_init+0xd4>)
  40c72e:	429a      	cmp	r2, r3
  40c730:	d108      	bne.n	40c744 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40c732:	2008      	movs	r0, #8
  40c734:	4b24      	ldr	r3, [pc, #144]	; (40c7c8 <usart_serial_init+0xd8>)
  40c736:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40c738:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40c73c:	6878      	ldr	r0, [r7, #4]
  40c73e:	4619      	mov	r1, r3
  40c740:	4b22      	ldr	r3, [pc, #136]	; (40c7cc <usart_serial_init+0xdc>)
  40c742:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40c744:	687a      	ldr	r2, [r7, #4]
  40c746:	4b22      	ldr	r3, [pc, #136]	; (40c7d0 <usart_serial_init+0xe0>)
  40c748:	429a      	cmp	r2, r3
  40c74a:	d108      	bne.n	40c75e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40c74c:	2009      	movs	r0, #9
  40c74e:	4b1e      	ldr	r3, [pc, #120]	; (40c7c8 <usart_serial_init+0xd8>)
  40c750:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40c752:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40c756:	6878      	ldr	r0, [r7, #4]
  40c758:	4619      	mov	r1, r3
  40c75a:	4b1c      	ldr	r3, [pc, #112]	; (40c7cc <usart_serial_init+0xdc>)
  40c75c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40c75e:	687a      	ldr	r2, [r7, #4]
  40c760:	4b1c      	ldr	r3, [pc, #112]	; (40c7d4 <usart_serial_init+0xe4>)
  40c762:	429a      	cmp	r2, r3
  40c764:	d112      	bne.n	40c78c <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40c766:	200e      	movs	r0, #14
  40c768:	4b17      	ldr	r3, [pc, #92]	; (40c7c8 <usart_serial_init+0xd8>)
  40c76a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40c76c:	4b14      	ldr	r3, [pc, #80]	; (40c7c0 <usart_serial_init+0xd0>)
  40c76e:	4798      	blx	r3
  40c770:	4603      	mov	r3, r0
  40c772:	f107 020c 	add.w	r2, r7, #12
  40c776:	6878      	ldr	r0, [r7, #4]
  40c778:	4611      	mov	r1, r2
  40c77a:	461a      	mov	r2, r3
  40c77c:	4b16      	ldr	r3, [pc, #88]	; (40c7d8 <usart_serial_init+0xe8>)
  40c77e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40c780:	6878      	ldr	r0, [r7, #4]
  40c782:	4b16      	ldr	r3, [pc, #88]	; (40c7dc <usart_serial_init+0xec>)
  40c784:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40c786:	6878      	ldr	r0, [r7, #4]
  40c788:	4b15      	ldr	r3, [pc, #84]	; (40c7e0 <usart_serial_init+0xf0>)
  40c78a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40c78c:	687a      	ldr	r2, [r7, #4]
  40c78e:	4b15      	ldr	r3, [pc, #84]	; (40c7e4 <usart_serial_init+0xf4>)
  40c790:	429a      	cmp	r2, r3
  40c792:	d112      	bne.n	40c7ba <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40c794:	200f      	movs	r0, #15
  40c796:	4b0c      	ldr	r3, [pc, #48]	; (40c7c8 <usart_serial_init+0xd8>)
  40c798:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40c79a:	4b09      	ldr	r3, [pc, #36]	; (40c7c0 <usart_serial_init+0xd0>)
  40c79c:	4798      	blx	r3
  40c79e:	4603      	mov	r3, r0
  40c7a0:	f107 020c 	add.w	r2, r7, #12
  40c7a4:	6878      	ldr	r0, [r7, #4]
  40c7a6:	4611      	mov	r1, r2
  40c7a8:	461a      	mov	r2, r3
  40c7aa:	4b0b      	ldr	r3, [pc, #44]	; (40c7d8 <usart_serial_init+0xe8>)
  40c7ac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40c7ae:	6878      	ldr	r0, [r7, #4]
  40c7b0:	4b0a      	ldr	r3, [pc, #40]	; (40c7dc <usart_serial_init+0xec>)
  40c7b2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40c7b4:	6878      	ldr	r0, [r7, #4]
  40c7b6:	4b0a      	ldr	r3, [pc, #40]	; (40c7e0 <usart_serial_init+0xf0>)
  40c7b8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40c7ba:	3730      	adds	r7, #48	; 0x30
  40c7bc:	46bd      	mov	sp, r7
  40c7be:	bd80      	pop	{r7, pc}
  40c7c0:	0040c6c5 	.word	0x0040c6c5
  40c7c4:	400e0600 	.word	0x400e0600
  40c7c8:	0040c6d9 	.word	0x0040c6d9
  40c7cc:	00405ce1 	.word	0x00405ce1
  40c7d0:	400e0800 	.word	0x400e0800
  40c7d4:	40024000 	.word	0x40024000
  40c7d8:	00405ec5 	.word	0x00405ec5
  40c7dc:	00405f49 	.word	0x00405f49
  40c7e0:	00405f79 	.word	0x00405f79
  40c7e4:	40028000 	.word	0x40028000

0040c7e8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40c7e8:	b580      	push	{r7, lr}
  40c7ea:	b082      	sub	sp, #8
  40c7ec:	af00      	add	r7, sp, #0
  40c7ee:	6078      	str	r0, [r7, #4]
  40c7f0:	460b      	mov	r3, r1
  40c7f2:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40c7f4:	687a      	ldr	r2, [r7, #4]
  40c7f6:	4b20      	ldr	r3, [pc, #128]	; (40c878 <usart_serial_putchar+0x90>)
  40c7f8:	429a      	cmp	r2, r3
  40c7fa:	d10a      	bne.n	40c812 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40c7fc:	bf00      	nop
  40c7fe:	78fb      	ldrb	r3, [r7, #3]
  40c800:	6878      	ldr	r0, [r7, #4]
  40c802:	4619      	mov	r1, r3
  40c804:	4b1d      	ldr	r3, [pc, #116]	; (40c87c <usart_serial_putchar+0x94>)
  40c806:	4798      	blx	r3
  40c808:	4603      	mov	r3, r0
  40c80a:	2b00      	cmp	r3, #0
  40c80c:	d1f7      	bne.n	40c7fe <usart_serial_putchar+0x16>
		return 1;
  40c80e:	2301      	movs	r3, #1
  40c810:	e02d      	b.n	40c86e <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40c812:	687a      	ldr	r2, [r7, #4]
  40c814:	4b1a      	ldr	r3, [pc, #104]	; (40c880 <usart_serial_putchar+0x98>)
  40c816:	429a      	cmp	r2, r3
  40c818:	d10a      	bne.n	40c830 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40c81a:	bf00      	nop
  40c81c:	78fb      	ldrb	r3, [r7, #3]
  40c81e:	6878      	ldr	r0, [r7, #4]
  40c820:	4619      	mov	r1, r3
  40c822:	4b16      	ldr	r3, [pc, #88]	; (40c87c <usart_serial_putchar+0x94>)
  40c824:	4798      	blx	r3
  40c826:	4603      	mov	r3, r0
  40c828:	2b00      	cmp	r3, #0
  40c82a:	d1f7      	bne.n	40c81c <usart_serial_putchar+0x34>
		return 1;
  40c82c:	2301      	movs	r3, #1
  40c82e:	e01e      	b.n	40c86e <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40c830:	687a      	ldr	r2, [r7, #4]
  40c832:	4b14      	ldr	r3, [pc, #80]	; (40c884 <usart_serial_putchar+0x9c>)
  40c834:	429a      	cmp	r2, r3
  40c836:	d10a      	bne.n	40c84e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40c838:	bf00      	nop
  40c83a:	78fb      	ldrb	r3, [r7, #3]
  40c83c:	6878      	ldr	r0, [r7, #4]
  40c83e:	4619      	mov	r1, r3
  40c840:	4b11      	ldr	r3, [pc, #68]	; (40c888 <usart_serial_putchar+0xa0>)
  40c842:	4798      	blx	r3
  40c844:	4603      	mov	r3, r0
  40c846:	2b00      	cmp	r3, #0
  40c848:	d1f7      	bne.n	40c83a <usart_serial_putchar+0x52>
		return 1;
  40c84a:	2301      	movs	r3, #1
  40c84c:	e00f      	b.n	40c86e <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40c84e:	687a      	ldr	r2, [r7, #4]
  40c850:	4b0e      	ldr	r3, [pc, #56]	; (40c88c <usart_serial_putchar+0xa4>)
  40c852:	429a      	cmp	r2, r3
  40c854:	d10a      	bne.n	40c86c <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40c856:	bf00      	nop
  40c858:	78fb      	ldrb	r3, [r7, #3]
  40c85a:	6878      	ldr	r0, [r7, #4]
  40c85c:	4619      	mov	r1, r3
  40c85e:	4b0a      	ldr	r3, [pc, #40]	; (40c888 <usart_serial_putchar+0xa0>)
  40c860:	4798      	blx	r3
  40c862:	4603      	mov	r3, r0
  40c864:	2b00      	cmp	r3, #0
  40c866:	d1f7      	bne.n	40c858 <usart_serial_putchar+0x70>
		return 1;
  40c868:	2301      	movs	r3, #1
  40c86a:	e000      	b.n	40c86e <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40c86c:	2300      	movs	r3, #0
}
  40c86e:	4618      	mov	r0, r3
  40c870:	3708      	adds	r7, #8
  40c872:	46bd      	mov	sp, r7
  40c874:	bd80      	pop	{r7, pc}
  40c876:	bf00      	nop
  40c878:	400e0600 	.word	0x400e0600
  40c87c:	00405d79 	.word	0x00405d79
  40c880:	400e0800 	.word	0x400e0800
  40c884:	40024000 	.word	0x40024000
  40c888:	00406035 	.word	0x00406035
  40c88c:	40028000 	.word	0x40028000

0040c890 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40c890:	b580      	push	{r7, lr}
  40c892:	b084      	sub	sp, #16
  40c894:	af00      	add	r7, sp, #0
  40c896:	6078      	str	r0, [r7, #4]
  40c898:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40c89a:	2300      	movs	r3, #0
  40c89c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40c89e:	687a      	ldr	r2, [r7, #4]
  40c8a0:	4b1e      	ldr	r3, [pc, #120]	; (40c91c <usart_serial_getchar+0x8c>)
  40c8a2:	429a      	cmp	r2, r3
  40c8a4:	d107      	bne.n	40c8b6 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40c8a6:	bf00      	nop
  40c8a8:	6878      	ldr	r0, [r7, #4]
  40c8aa:	6839      	ldr	r1, [r7, #0]
  40c8ac:	4b1c      	ldr	r3, [pc, #112]	; (40c920 <usart_serial_getchar+0x90>)
  40c8ae:	4798      	blx	r3
  40c8b0:	4603      	mov	r3, r0
  40c8b2:	2b00      	cmp	r3, #0
  40c8b4:	d1f8      	bne.n	40c8a8 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40c8b6:	687a      	ldr	r2, [r7, #4]
  40c8b8:	4b1a      	ldr	r3, [pc, #104]	; (40c924 <usart_serial_getchar+0x94>)
  40c8ba:	429a      	cmp	r2, r3
  40c8bc:	d107      	bne.n	40c8ce <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40c8be:	bf00      	nop
  40c8c0:	6878      	ldr	r0, [r7, #4]
  40c8c2:	6839      	ldr	r1, [r7, #0]
  40c8c4:	4b16      	ldr	r3, [pc, #88]	; (40c920 <usart_serial_getchar+0x90>)
  40c8c6:	4798      	blx	r3
  40c8c8:	4603      	mov	r3, r0
  40c8ca:	2b00      	cmp	r3, #0
  40c8cc:	d1f8      	bne.n	40c8c0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40c8ce:	687a      	ldr	r2, [r7, #4]
  40c8d0:	4b15      	ldr	r3, [pc, #84]	; (40c928 <usart_serial_getchar+0x98>)
  40c8d2:	429a      	cmp	r2, r3
  40c8d4:	d10d      	bne.n	40c8f2 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  40c8d6:	bf00      	nop
  40c8d8:	f107 030c 	add.w	r3, r7, #12
  40c8dc:	6878      	ldr	r0, [r7, #4]
  40c8de:	4619      	mov	r1, r3
  40c8e0:	4b12      	ldr	r3, [pc, #72]	; (40c92c <usart_serial_getchar+0x9c>)
  40c8e2:	4798      	blx	r3
  40c8e4:	4603      	mov	r3, r0
  40c8e6:	2b00      	cmp	r3, #0
  40c8e8:	d1f6      	bne.n	40c8d8 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40c8ea:	68fb      	ldr	r3, [r7, #12]
  40c8ec:	b2da      	uxtb	r2, r3
  40c8ee:	683b      	ldr	r3, [r7, #0]
  40c8f0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40c8f2:	687a      	ldr	r2, [r7, #4]
  40c8f4:	4b0e      	ldr	r3, [pc, #56]	; (40c930 <usart_serial_getchar+0xa0>)
  40c8f6:	429a      	cmp	r2, r3
  40c8f8:	d10d      	bne.n	40c916 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40c8fa:	bf00      	nop
  40c8fc:	f107 030c 	add.w	r3, r7, #12
  40c900:	6878      	ldr	r0, [r7, #4]
  40c902:	4619      	mov	r1, r3
  40c904:	4b09      	ldr	r3, [pc, #36]	; (40c92c <usart_serial_getchar+0x9c>)
  40c906:	4798      	blx	r3
  40c908:	4603      	mov	r3, r0
  40c90a:	2b00      	cmp	r3, #0
  40c90c:	d1f6      	bne.n	40c8fc <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40c90e:	68fb      	ldr	r3, [r7, #12]
  40c910:	b2da      	uxtb	r2, r3
  40c912:	683b      	ldr	r3, [r7, #0]
  40c914:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40c916:	3710      	adds	r7, #16
  40c918:	46bd      	mov	sp, r7
  40c91a:	bd80      	pop	{r7, pc}
  40c91c:	400e0600 	.word	0x400e0600
  40c920:	00405da9 	.word	0x00405da9
  40c924:	400e0800 	.word	0x400e0800
  40c928:	40024000 	.word	0x40024000
  40c92c:	00406069 	.word	0x00406069
  40c930:	40028000 	.word	0x40028000

0040c934 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40c934:	b580      	push	{r7, lr}
  40c936:	b082      	sub	sp, #8
  40c938:	af00      	add	r7, sp, #0
  40c93a:	6078      	str	r0, [r7, #4]
  40c93c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40c93e:	4b0f      	ldr	r3, [pc, #60]	; (40c97c <stdio_serial_init+0x48>)
  40c940:	687a      	ldr	r2, [r7, #4]
  40c942:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40c944:	4b0e      	ldr	r3, [pc, #56]	; (40c980 <stdio_serial_init+0x4c>)
  40c946:	4a0f      	ldr	r2, [pc, #60]	; (40c984 <stdio_serial_init+0x50>)
  40c948:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40c94a:	4b0f      	ldr	r3, [pc, #60]	; (40c988 <stdio_serial_init+0x54>)
  40c94c:	4a0f      	ldr	r2, [pc, #60]	; (40c98c <stdio_serial_init+0x58>)
  40c94e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40c950:	6878      	ldr	r0, [r7, #4]
  40c952:	6839      	ldr	r1, [r7, #0]
  40c954:	4b0e      	ldr	r3, [pc, #56]	; (40c990 <stdio_serial_init+0x5c>)
  40c956:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40c958:	4b0e      	ldr	r3, [pc, #56]	; (40c994 <stdio_serial_init+0x60>)
  40c95a:	681b      	ldr	r3, [r3, #0]
  40c95c:	689b      	ldr	r3, [r3, #8]
  40c95e:	4618      	mov	r0, r3
  40c960:	2100      	movs	r1, #0
  40c962:	4b0d      	ldr	r3, [pc, #52]	; (40c998 <stdio_serial_init+0x64>)
  40c964:	4798      	blx	r3
	setbuf(stdin, NULL);
  40c966:	4b0b      	ldr	r3, [pc, #44]	; (40c994 <stdio_serial_init+0x60>)
  40c968:	681b      	ldr	r3, [r3, #0]
  40c96a:	685b      	ldr	r3, [r3, #4]
  40c96c:	4618      	mov	r0, r3
  40c96e:	2100      	movs	r1, #0
  40c970:	4b09      	ldr	r3, [pc, #36]	; (40c998 <stdio_serial_init+0x64>)
  40c972:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40c974:	3708      	adds	r7, #8
  40c976:	46bd      	mov	sp, r7
  40c978:	bd80      	pop	{r7, pc}
  40c97a:	bf00      	nop
  40c97c:	20003e7c 	.word	0x20003e7c
  40c980:	20003e78 	.word	0x20003e78
  40c984:	0040c7e9 	.word	0x0040c7e9
  40c988:	20003e74 	.word	0x20003e74
  40c98c:	0040c891 	.word	0x0040c891
  40c990:	0040c6f1 	.word	0x0040c6f1
  40c994:	20000bb0 	.word	0x20000bb0
  40c998:	0041315d 	.word	0x0041315d

0040c99c <configure_console>:

/**
 * \brief Configure the console UART for using printf.
 */
static void configure_console(void)
{
  40c99c:	b590      	push	{r4, r7, lr}
  40c99e:	b085      	sub	sp, #20
  40c9a0:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = 
  40c9a2:	4b0a      	ldr	r3, [pc, #40]	; (40c9cc <configure_console+0x30>)
  40c9a4:	463c      	mov	r4, r7
  40c9a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40c9a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Configure console UART. */
	#ifdef USE_Q1_Q2
	stdio_serial_init(UART1, &usart_serial_options);
	#else
	stdio_serial_init(UART0, &usart_serial_options);
  40c9ac:	463b      	mov	r3, r7
  40c9ae:	4808      	ldr	r0, [pc, #32]	; (40c9d0 <configure_console+0x34>)
  40c9b0:	4619      	mov	r1, r3
  40c9b2:	4b08      	ldr	r3, [pc, #32]	; (40c9d4 <configure_console+0x38>)
  40c9b4:	4798      	blx	r3
	#endif
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  40c9b6:	4b08      	ldr	r3, [pc, #32]	; (40c9d8 <configure_console+0x3c>)
  40c9b8:	681b      	ldr	r3, [r3, #0]
  40c9ba:	689b      	ldr	r3, [r3, #8]
  40c9bc:	4618      	mov	r0, r3
  40c9be:	2100      	movs	r1, #0
  40c9c0:	4b06      	ldr	r3, [pc, #24]	; (40c9dc <configure_console+0x40>)
  40c9c2:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  40c9c4:	3714      	adds	r7, #20
  40c9c6:	46bd      	mov	sp, r7
  40c9c8:	bd90      	pop	{r4, r7, pc}
  40c9ca:	bf00      	nop
  40c9cc:	0041d45c 	.word	0x0041d45c
  40c9d0:	400e0600 	.word	0x400e0600
  40c9d4:	0040c935 	.word	0x0040c935
  40c9d8:	20000bb0 	.word	0x20000bb0
  40c9dc:	0041315d 	.word	0x0041315d

0040c9e0 <powerOnInit>:
/**
 * powerOnInit(void)
 * @brief Initialize the board after power up. 
 */
void powerOnInit(void) 
{		
  40c9e0:	b580      	push	{r7, lr}
  40c9e2:	af00      	add	r7, sp, #0
		static FRESULT res;
		Ctrl_status status;

		//configure the gpio
		drv_gpio_initializeAll();
  40c9e4:	4b15      	ldr	r3, [pc, #84]	; (40ca3c <powerOnInit+0x5c>)
  40c9e6:	4798      	blx	r3
		loadSerialNumberFromNvm();
  40c9e8:	4b15      	ldr	r3, [pc, #84]	; (40ca40 <powerOnInit+0x60>)
  40c9ea:	4798      	blx	r3
		drv_led_init(&ledConfiguration);
  40c9ec:	4815      	ldr	r0, [pc, #84]	; (40ca44 <powerOnInit+0x64>)
  40c9ee:	4b16      	ldr	r3, [pc, #88]	; (40ca48 <powerOnInit+0x68>)
  40c9f0:	4798      	blx	r3
		drv_led_set(DRV_LED_WHITE,DRV_LED_SOLID);
  40c9f2:	2004      	movs	r0, #4
  40c9f4:	2101      	movs	r1, #1
  40c9f6:	4b15      	ldr	r3, [pc, #84]	; (40ca4c <powerOnInit+0x6c>)
  40c9f8:	4798      	blx	r3
		vTaskDelay(200);
  40c9fa:	20c8      	movs	r0, #200	; 0xc8
  40c9fc:	4b14      	ldr	r3, [pc, #80]	; (40ca50 <powerOnInit+0x70>)
  40c9fe:	4798      	blx	r3
		
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40ca00:	2000      	movs	r0, #0
  40ca02:	4b14      	ldr	r3, [pc, #80]	; (40ca54 <powerOnInit+0x74>)
  40ca04:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
  40ca06:	bf00      	nop
  40ca08:	4b13      	ldr	r3, [pc, #76]	; (40ca58 <powerOnInit+0x78>)
  40ca0a:	4798      	blx	r3
  40ca0c:	4603      	mov	r3, r0
  40ca0e:	2b00      	cmp	r3, #0
  40ca10:	d0fa      	beq.n	40ca08 <powerOnInit+0x28>
		rtc_set_hour_mode(RTC, 0);
  40ca12:	4812      	ldr	r0, [pc, #72]	; (40ca5c <powerOnInit+0x7c>)
  40ca14:	2100      	movs	r1, #0
  40ca16:	4b12      	ldr	r3, [pc, #72]	; (40ca60 <powerOnInit+0x80>)
  40ca18:	4798      	blx	r3
		rtc_clear_date_alarm(RTC);
  40ca1a:	4810      	ldr	r0, [pc, #64]	; (40ca5c <powerOnInit+0x7c>)
  40ca1c:	4b11      	ldr	r3, [pc, #68]	; (40ca64 <powerOnInit+0x84>)
  40ca1e:	4798      	blx	r3
		rtc_clear_time_alarm(RTC);		
  40ca20:	480e      	ldr	r0, [pc, #56]	; (40ca5c <powerOnInit+0x7c>)
  40ca22:	4b11      	ldr	r3, [pc, #68]	; (40ca68 <powerOnInit+0x88>)
  40ca24:	4798      	blx	r3
		drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);
  40ca26:	2006      	movs	r0, #6
  40ca28:	2101      	movs	r1, #1
  40ca2a:	4b08      	ldr	r3, [pc, #32]	; (40ca4c <powerOnInit+0x6c>)
  40ca2c:	4798      	blx	r3
		//drv_gpio_ConfigureBLEForProgramming(); 

		configure_console();		
  40ca2e:	4b0f      	ldr	r3, [pc, #60]	; (40ca6c <powerOnInit+0x8c>)
  40ca30:	4798      	blx	r3
		initAllUarts();
  40ca32:	4b0f      	ldr	r3, [pc, #60]	; (40ca70 <powerOnInit+0x90>)
  40ca34:	4798      	blx	r3
		configureWatchDog();
  40ca36:	4b0f      	ldr	r3, [pc, #60]	; (40ca74 <powerOnInit+0x94>)
  40ca38:	4798      	blx	r3
}
  40ca3a:	bd80      	pop	{r7, pc}
  40ca3c:	0040d52d 	.word	0x0040d52d
  40ca40:	0040d1fd 	.word	0x0040d1fd
  40ca44:	2000021c 	.word	0x2000021c
  40ca48:	004007d9 	.word	0x004007d9
  40ca4c:	0040083d 	.word	0x0040083d
  40ca50:	0040b24d 	.word	0x0040b24d
  40ca54:	00411b35 	.word	0x00411b35
  40ca58:	00411b6d 	.word	0x00411b6d
  40ca5c:	400e1460 	.word	0x400e1460
  40ca60:	00405889 	.word	0x00405889
  40ca64:	00405cc5 	.word	0x00405cc5
  40ca68:	00405cad 	.word	0x00405cad
  40ca6c:	0040c99d 	.word	0x0040c99d
  40ca70:	0040ca79 	.word	0x0040ca79
  40ca74:	0040cb25 	.word	0x0040cb25

0040ca78 <initAllUarts>:

void initAllUarts()
{
  40ca78:	b580      	push	{r7, lr}
  40ca7a:	af00      	add	r7, sp, #0
	if(drv_uart_init(&uart0Config) != STATUS_PASS)
  40ca7c:	480e      	ldr	r0, [pc, #56]	; (40cab8 <initAllUarts+0x40>)
  40ca7e:	4b0f      	ldr	r3, [pc, #60]	; (40cabc <initAllUarts+0x44>)
  40ca80:	4798      	blx	r3
  40ca82:	4603      	mov	r3, r0
  40ca84:	2b00      	cmp	r3, #0
  40ca86:	d000      	beq.n	40ca8a <initAllUarts+0x12>
	{
		while(1); //spin here
  40ca88:	e7fe      	b.n	40ca88 <initAllUarts+0x10>
	}
	if(drv_uart_init(&uart1Config) != STATUS_PASS)
  40ca8a:	480d      	ldr	r0, [pc, #52]	; (40cac0 <initAllUarts+0x48>)
  40ca8c:	4b0b      	ldr	r3, [pc, #44]	; (40cabc <initAllUarts+0x44>)
  40ca8e:	4798      	blx	r3
  40ca90:	4603      	mov	r3, r0
  40ca92:	2b00      	cmp	r3, #0
  40ca94:	d000      	beq.n	40ca98 <initAllUarts+0x20>
	{
		while(1); //spin here
  40ca96:	e7fe      	b.n	40ca96 <initAllUarts+0x1e>
	}		
	if(drv_uart_init(&usart0Config) != STATUS_PASS)
  40ca98:	480a      	ldr	r0, [pc, #40]	; (40cac4 <initAllUarts+0x4c>)
  40ca9a:	4b08      	ldr	r3, [pc, #32]	; (40cabc <initAllUarts+0x44>)
  40ca9c:	4798      	blx	r3
  40ca9e:	4603      	mov	r3, r0
  40caa0:	2b00      	cmp	r3, #0
  40caa2:	d000      	beq.n	40caa6 <initAllUarts+0x2e>
	{
		while(1); //spin here
  40caa4:	e7fe      	b.n	40caa4 <initAllUarts+0x2c>
	}
	if(drv_uart_init(&usart1Config) != STATUS_PASS)
  40caa6:	4808      	ldr	r0, [pc, #32]	; (40cac8 <initAllUarts+0x50>)
  40caa8:	4b04      	ldr	r3, [pc, #16]	; (40cabc <initAllUarts+0x44>)
  40caaa:	4798      	blx	r3
  40caac:	4603      	mov	r3, r0
  40caae:	2b00      	cmp	r3, #0
  40cab0:	d000      	beq.n	40cab4 <initAllUarts+0x3c>
	{
		while(1); //spin here
  40cab2:	e7fe      	b.n	40cab2 <initAllUarts+0x3a>
	}
}
  40cab4:	bd80      	pop	{r7, pc}
  40cab6:	bf00      	nop
  40cab8:	200001bc 	.word	0x200001bc
  40cabc:	0040df39 	.word	0x0040df39
  40cac0:	200001d4 	.word	0x200001d4
  40cac4:	200001ec 	.word	0x200001ec
  40cac8:	20000204 	.word	0x20000204

0040cacc <deInitAllUarts>:

void deInitAllUarts()
{
  40cacc:	b580      	push	{r7, lr}
  40cace:	af00      	add	r7, sp, #0
	drv_uart_deInit(&uart0Config);
  40cad0:	4806      	ldr	r0, [pc, #24]	; (40caec <deInitAllUarts+0x20>)
  40cad2:	4b07      	ldr	r3, [pc, #28]	; (40caf0 <deInitAllUarts+0x24>)
  40cad4:	4798      	blx	r3
	drv_uart_deInit(&uart1Config);
  40cad6:	4807      	ldr	r0, [pc, #28]	; (40caf4 <deInitAllUarts+0x28>)
  40cad8:	4b05      	ldr	r3, [pc, #20]	; (40caf0 <deInitAllUarts+0x24>)
  40cada:	4798      	blx	r3
	drv_uart_deInit(&usart0Config);
  40cadc:	4806      	ldr	r0, [pc, #24]	; (40caf8 <deInitAllUarts+0x2c>)
  40cade:	4b04      	ldr	r3, [pc, #16]	; (40caf0 <deInitAllUarts+0x24>)
  40cae0:	4798      	blx	r3
	drv_uart_deInit(&usart1Config);
  40cae2:	4806      	ldr	r0, [pc, #24]	; (40cafc <deInitAllUarts+0x30>)
  40cae4:	4b02      	ldr	r3, [pc, #8]	; (40caf0 <deInitAllUarts+0x24>)
  40cae6:	4798      	blx	r3
}
  40cae8:	bd80      	pop	{r7, pc}
  40caea:	bf00      	nop
  40caec:	200001bc 	.word	0x200001bc
  40caf0:	0040e471 	.word	0x0040e471
  40caf4:	200001d4 	.word	0x200001d4
  40caf8:	200001ec 	.word	0x200001ec
  40cafc:	20000204 	.word	0x20000204

0040cb00 <WDT_Handler>:

/**
 *  \brief Handler for watchdog interrupt.
 */
void WDT_Handler(void)
{
  40cb00:	b580      	push	{r7, lr}
  40cb02:	af00      	add	r7, sp, #0

	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
  40cb04:	4803      	ldr	r0, [pc, #12]	; (40cb14 <WDT_Handler+0x14>)
  40cb06:	4b04      	ldr	r3, [pc, #16]	; (40cb18 <WDT_Handler+0x18>)
  40cb08:	4798      	blx	r3

	debugPrintString("Restarting system!!!\r");
  40cb0a:	4804      	ldr	r0, [pc, #16]	; (40cb1c <WDT_Handler+0x1c>)
  40cb0c:	4b04      	ldr	r3, [pc, #16]	; (40cb20 <WDT_Handler+0x20>)
  40cb0e:	4798      	blx	r3
	//rstc_start_software_reset(RSTC);
	
}
  40cb10:	bd80      	pop	{r7, pc}
  40cb12:	bf00      	nop
  40cb14:	400e1450 	.word	0x400e1450
  40cb18:	00411e41 	.word	0x00411e41
  40cb1c:	0041d46c 	.word	0x0041d46c
  40cb20:	004016d5 	.word	0x004016d5

0040cb24 <configureWatchDog>:
/**
 * powerOnInit(void)
 * @brief Initialize the watchdog timer, only done once on power up. 
 */
void configureWatchDog()
{
  40cb24:	b590      	push	{r4, r7, lr}
  40cb26:	b083      	sub	sp, #12
  40cb28:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_WDT);
  40cb2a:	2004      	movs	r0, #4
  40cb2c:	4b14      	ldr	r3, [pc, #80]	; (40cb80 <configureWatchDog+0x5c>)
  40cb2e:	4798      	blx	r3
	/* Get timeout value. */
	uint32_t timeout_value = wdt_get_timeout_value(WDT_PERIOD * 1000,
  40cb30:	4814      	ldr	r0, [pc, #80]	; (40cb84 <configureWatchDog+0x60>)
  40cb32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40cb36:	4b14      	ldr	r3, [pc, #80]	; (40cb88 <configureWatchDog+0x64>)
  40cb38:	4798      	blx	r3
  40cb3a:	6078      	str	r0, [r7, #4]
			BOARD_FREQ_SLCK_XTAL);
	if (timeout_value == WDT_INVALID_ARGUMENT) {
  40cb3c:	687a      	ldr	r2, [r7, #4]
  40cb3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40cb42:	429a      	cmp	r2, r3
  40cb44:	d100      	bne.n	40cb48 <configureWatchDog+0x24>
		while (1) {
			/* Invalid timeout value, error. */
		}
  40cb46:	e7fe      	b.n	40cb46 <configureWatchDog+0x22>
	}
	/* Configure WDT to trigger an interrupt (or reset). */
	uint32_t wdt_mode = WDT_MR_WDRSTEN | WDT_MR_WDFIEN |  /* Enable WDT fault interrupt. */
  40cb48:	f04f 2330 	mov.w	r3, #805318656	; 0x30003000
  40cb4c:	603b      	str	r3, [r7, #0]
			WDT_MR_WDDBGHLT  |  /* WDT stops in debug state. */
			WDT_MR_WDIDLEHLT;   /* WDT stops in idle state. */
	
	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  40cb4e:	687b      	ldr	r3, [r7, #4]
  40cb50:	b29a      	uxth	r2, r3
  40cb52:	687b      	ldr	r3, [r7, #4]
  40cb54:	b29b      	uxth	r3, r3
  40cb56:	480d      	ldr	r0, [pc, #52]	; (40cb8c <configureWatchDog+0x68>)
  40cb58:	6839      	ldr	r1, [r7, #0]
  40cb5a:	4c0d      	ldr	r4, [pc, #52]	; (40cb90 <configureWatchDog+0x6c>)
  40cb5c:	47a0      	blx	r4
			
	/* Configure and enable WDT interrupt. */
	NVIC_DisableIRQ(WDT_IRQn);
  40cb5e:	2004      	movs	r0, #4
  40cb60:	4b0c      	ldr	r3, [pc, #48]	; (40cb94 <configureWatchDog+0x70>)
  40cb62:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
  40cb64:	2004      	movs	r0, #4
  40cb66:	4b0c      	ldr	r3, [pc, #48]	; (40cb98 <configureWatchDog+0x74>)
  40cb68:	4798      	blx	r3
	NVIC_SetPriority(WDT_IRQn, 0);
  40cb6a:	2004      	movs	r0, #4
  40cb6c:	2100      	movs	r1, #0
  40cb6e:	4b0b      	ldr	r3, [pc, #44]	; (40cb9c <configureWatchDog+0x78>)
  40cb70:	4798      	blx	r3
	NVIC_EnableIRQ(WDT_IRQn);					
  40cb72:	2004      	movs	r0, #4
  40cb74:	4b0a      	ldr	r3, [pc, #40]	; (40cba0 <configureWatchDog+0x7c>)
  40cb76:	4798      	blx	r3
				
  40cb78:	370c      	adds	r7, #12
  40cb7a:	46bd      	mov	sp, r7
  40cb7c:	bd90      	pop	{r4, r7, pc}
  40cb7e:	bf00      	nop
  40cb80:	00411d0d 	.word	0x00411d0d
  40cb84:	00989680 	.word	0x00989680
  40cb88:	00411d91 	.word	0x00411d91
  40cb8c:	400e1450 	.word	0x400e1450
  40cb90:	00411de1 	.word	0x00411de1
  40cb94:	0040c575 	.word	0x0040c575
  40cb98:	0040c5a9 	.word	0x0040c5a9
  40cb9c:	0040c5dd 	.word	0x0040c5dd
  40cba0:	0040c545 	.word	0x0040c545

0040cba4 <itoa>:
 *  Author: sean
 * Copyright Heddoko(TM) 2015, all rights reserved
 */ 

int itoa(int value, char* sp, int radix)
{
  40cba4:	b480      	push	{r7}
  40cba6:	b08f      	sub	sp, #60	; 0x3c
  40cba8:	af00      	add	r7, sp, #0
  40cbaa:	60f8      	str	r0, [r7, #12]
  40cbac:	60b9      	str	r1, [r7, #8]
  40cbae:	607a      	str	r2, [r7, #4]
	 char tmp[16];		// be careful with the length of the buffer
	 char *tp = tmp;
  40cbb0:	f107 0314 	add.w	r3, r7, #20
  40cbb4:	637b      	str	r3, [r7, #52]	; 0x34
	 int i;
	 unsigned v;

	 int sign = (radix == 10 && value < 0);
  40cbb6:	687b      	ldr	r3, [r7, #4]
  40cbb8:	2b0a      	cmp	r3, #10
  40cbba:	d104      	bne.n	40cbc6 <itoa+0x22>
  40cbbc:	68fb      	ldr	r3, [r7, #12]
  40cbbe:	2b00      	cmp	r3, #0
  40cbc0:	da01      	bge.n	40cbc6 <itoa+0x22>
  40cbc2:	2301      	movs	r3, #1
  40cbc4:	e000      	b.n	40cbc8 <itoa+0x24>
  40cbc6:	2300      	movs	r3, #0
  40cbc8:	62bb      	str	r3, [r7, #40]	; 0x28
	 if (sign)
  40cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40cbcc:	2b00      	cmp	r3, #0
  40cbce:	d003      	beq.n	40cbd8 <itoa+0x34>
		 v = -value;
  40cbd0:	68fb      	ldr	r3, [r7, #12]
  40cbd2:	425b      	negs	r3, r3
  40cbd4:	633b      	str	r3, [r7, #48]	; 0x30
	 else
		v = (unsigned)value;

	 while (v || tp == tmp)
  40cbd6:	e023      	b.n	40cc20 <itoa+0x7c>

	 int sign = (radix == 10 && value < 0);
	 if (sign)
		 v = -value;
	 else
		v = (unsigned)value;
  40cbd8:	68fb      	ldr	r3, [r7, #12]
  40cbda:	633b      	str	r3, [r7, #48]	; 0x30

	 while (v || tp == tmp)
  40cbdc:	e020      	b.n	40cc20 <itoa+0x7c>
	 {
		 i = v % radix;
  40cbde:	687a      	ldr	r2, [r7, #4]
  40cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40cbe2:	fbb3 f1f2 	udiv	r1, r3, r2
  40cbe6:	fb02 f201 	mul.w	r2, r2, r1
  40cbea:	1a9b      	subs	r3, r3, r2
  40cbec:	627b      	str	r3, [r7, #36]	; 0x24
		 v /= radix;	// v/=radix uses less CPU clocks than v=v/radix does
  40cbee:	687b      	ldr	r3, [r7, #4]
  40cbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40cbf2:	fbb2 f3f3 	udiv	r3, r2, r3
  40cbf6:	633b      	str	r3, [r7, #48]	; 0x30
		 if (i < 10)
  40cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40cbfa:	2b09      	cmp	r3, #9
  40cbfc:	dc08      	bgt.n	40cc10 <itoa+0x6c>
			*tp++ = i+'0';
  40cbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40cc00:	1c5a      	adds	r2, r3, #1
  40cc02:	637a      	str	r2, [r7, #52]	; 0x34
  40cc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40cc06:	b2d2      	uxtb	r2, r2
  40cc08:	3230      	adds	r2, #48	; 0x30
  40cc0a:	b2d2      	uxtb	r2, r2
  40cc0c:	701a      	strb	r2, [r3, #0]
  40cc0e:	e007      	b.n	40cc20 <itoa+0x7c>
		 else
			*tp++ = i + 'a' - 10;
  40cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40cc12:	1c5a      	adds	r2, r3, #1
  40cc14:	637a      	str	r2, [r7, #52]	; 0x34
  40cc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40cc18:	b2d2      	uxtb	r2, r2
  40cc1a:	3257      	adds	r2, #87	; 0x57
  40cc1c:	b2d2      	uxtb	r2, r2
  40cc1e:	701a      	strb	r2, [r3, #0]
	 if (sign)
		 v = -value;
	 else
		v = (unsigned)value;

	 while (v || tp == tmp)
  40cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40cc22:	2b00      	cmp	r3, #0
  40cc24:	d1db      	bne.n	40cbde <itoa+0x3a>
  40cc26:	f107 0314 	add.w	r3, r7, #20
  40cc2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40cc2c:	429a      	cmp	r2, r3
  40cc2e:	d0d6      	beq.n	40cbde <itoa+0x3a>
			*tp++ = i+'0';
		 else
			*tp++ = i + 'a' - 10;
	 }

	 int len = tp - tmp;
  40cc30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40cc32:	f107 0314 	add.w	r3, r7, #20
  40cc36:	1ad3      	subs	r3, r2, r3
  40cc38:	62fb      	str	r3, [r7, #44]	; 0x2c

	 if (sign)
  40cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40cc3c:	2b00      	cmp	r3, #0
  40cc3e:	d008      	beq.n	40cc52 <itoa+0xae>
	 {
		 *sp++ = '-';
  40cc40:	68bb      	ldr	r3, [r7, #8]
  40cc42:	1c5a      	adds	r2, r3, #1
  40cc44:	60ba      	str	r2, [r7, #8]
  40cc46:	222d      	movs	r2, #45	; 0x2d
  40cc48:	701a      	strb	r2, [r3, #0]
		 len++;
  40cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40cc4c:	3301      	adds	r3, #1
  40cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	 }

	 while (tp > tmp)
  40cc50:	e009      	b.n	40cc66 <itoa+0xc2>
  40cc52:	e008      	b.n	40cc66 <itoa+0xc2>
	 *sp++ = *--tp;
  40cc54:	68bb      	ldr	r3, [r7, #8]
  40cc56:	1c5a      	adds	r2, r3, #1
  40cc58:	60ba      	str	r2, [r7, #8]
  40cc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40cc5c:	3a01      	subs	r2, #1
  40cc5e:	637a      	str	r2, [r7, #52]	; 0x34
  40cc60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40cc62:	7812      	ldrb	r2, [r2, #0]
  40cc64:	701a      	strb	r2, [r3, #0]
	 {
		 *sp++ = '-';
		 len++;
	 }

	 while (tp > tmp)
  40cc66:	f107 0314 	add.w	r3, r7, #20
  40cc6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40cc6c:	429a      	cmp	r2, r3
  40cc6e:	d8f1      	bhi.n	40cc54 <itoa+0xb0>
	 *sp++ = *--tp;

	 return len;
  40cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40cc72:	4618      	mov	r0, r3
  40cc74:	373c      	adds	r7, #60	; 0x3c
  40cc76:	46bd      	mov	sp, r7
  40cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
  40cc7c:	4770      	bx	lr
  40cc7e:	bf00      	nop

0040cc80 <loadSettings>:
/**
 * loadSettings(char* filename)
 * @brief Load configuration from SD-card file to memory
 */
status_t loadSettings(char* filename)
{	
  40cc80:	b5b0      	push	{r4, r5, r7, lr}
  40cc82:	b0f6      	sub	sp, #472	; 0x1d8
  40cc84:	af02      	add	r7, sp, #8
  40cc86:	1d3b      	adds	r3, r7, #4
  40cc88:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_PASS;
  40cc8a:	2300      	movs	r3, #0
  40cc8c:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
	static FIL configFileObj;
	packetReceivedMask = 0;
  40cc90:	4bad      	ldr	r3, [pc, #692]	; (40cf48 <loadSettings+0x2c8>)
  40cc92:	2200      	movs	r2, #0
  40cc94:	801a      	strh	r2, [r3, #0]
	accelPacketReceivedMask = 0;
  40cc96:	4bad      	ldr	r3, [pc, #692]	; (40cf4c <loadSettings+0x2cc>)
  40cc98:	2200      	movs	r2, #0
  40cc9a:	801a      	strh	r2, [r3, #0]
	debugPrintString("Opening SD Card to read\r\n");
  40cc9c:	48ac      	ldr	r0, [pc, #688]	; (40cf50 <loadSettings+0x2d0>)
  40cc9e:	4bad      	ldr	r3, [pc, #692]	; (40cf54 <loadSettings+0x2d4>)
  40cca0:	4798      	blx	r3
	//initialize the suitNumber
	//strncpy(brainSettings.suitNumber, "S0001", 10);
	strncpy(brainSettings.channelmap, "FFFFFFFF1F", 10);	//default for the channel mapping
  40cca2:	4bad      	ldr	r3, [pc, #692]	; (40cf58 <loadSettings+0x2d8>)
  40cca4:	4aad      	ldr	r2, [pc, #692]	; (40cf5c <loadSettings+0x2dc>)
  40cca6:	ca07      	ldmia	r2, {r0, r1, r2}
  40cca8:	c303      	stmia	r3!, {r0, r1}
  40ccaa:	801a      	strh	r2, [r3, #0]
	strncpy(brainSettings.fileName, "MovementLog", 12);	//default for the fileName
  40ccac:	4aac      	ldr	r2, [pc, #688]	; (40cf60 <loadSettings+0x2e0>)
  40ccae:	4bad      	ldr	r3, [pc, #692]	; (40cf64 <loadSettings+0x2e4>)
  40ccb0:	4614      	mov	r4, r2
  40ccb2:	cb07      	ldmia	r3!, {r0, r1, r2}
  40ccb4:	6020      	str	r0, [r4, #0]
  40ccb6:	6061      	str	r1, [r4, #4]
  40ccb8:	60a2      	str	r2, [r4, #8]
	//initialize the run time settings to their defaults. 
	brainSettings.debugPackets = false; 
  40ccba:	4bab      	ldr	r3, [pc, #684]	; (40cf68 <loadSettings+0x2e8>)
  40ccbc:	2200      	movs	r2, #0
  40ccbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	brainSettings.autoTurnOff = true; 
  40ccc2:	4ba9      	ldr	r3, [pc, #676]	; (40cf68 <loadSettings+0x2e8>)
  40ccc4:	2201      	movs	r2, #1
  40ccc6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	#ifdef DEBUG
	brainSettings.debugPrintsEnabled = true;
  40ccca:	4ba7      	ldr	r3, [pc, #668]	; (40cf68 <loadSettings+0x2e8>)
  40cccc:	2201      	movs	r2, #1
  40ccce:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	#endif
	filename[0] = LUN_ID_SD_MMC_0_MEM + '0'; //is this necessary? 
  40ccd2:	1d3b      	adds	r3, r7, #4
  40ccd4:	681b      	ldr	r3, [r3, #0]
  40ccd6:	2230      	movs	r2, #48	; 0x30
  40ccd8:	701a      	strb	r2, [r3, #0]
	FRESULT res = f_open(&configFileObj, (char const *)filename, FA_OPEN_EXISTING | FA_READ);
  40ccda:	1d3b      	adds	r3, r7, #4
  40ccdc:	48a3      	ldr	r0, [pc, #652]	; (40cf6c <loadSettings+0x2ec>)
  40ccde:	6819      	ldr	r1, [r3, #0]
  40cce0:	2201      	movs	r2, #1
  40cce2:	4ba3      	ldr	r3, [pc, #652]	; (40cf70 <loadSettings+0x2f0>)
  40cce4:	4798      	blx	r3
  40cce6:	4603      	mov	r3, r0
  40cce8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (res != FR_OK)
  40ccec:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
  40ccf0:	2b00      	cmp	r3, #0
  40ccf2:	d001      	beq.n	40ccf8 <loadSettings+0x78>
	{
		return STATUS_FAIL;
  40ccf4:	2301      	movs	r3, #1
  40ccf6:	e254      	b.n	40d1a2 <loadSettings+0x522>
	}
	//read the whole file into a buffer
	char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
  40ccf8:	f107 0390 	add.w	r3, r7, #144	; 0x90
  40ccfc:	461a      	mov	r2, r3
  40ccfe:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40cd02:	4610      	mov	r0, r2
  40cd04:	2100      	movs	r1, #0
  40cd06:	461a      	mov	r2, r3
  40cd08:	4b9a      	ldr	r3, [pc, #616]	; (40cf74 <loadSettings+0x2f4>)
  40cd0a:	4798      	blx	r3
	uint16_t bytes_read = 0, total_bytes_read = 0;	
  40cd0c:	f107 038e 	add.w	r3, r7, #142	; 0x8e
  40cd10:	2200      	movs	r2, #0
  40cd12:	801a      	strh	r2, [r3, #0]
  40cd14:	2300      	movs	r3, #0
  40cd16:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  40cd1a:	e019      	b.n	40cd50 <loadSettings+0xd0>
	{
		res = f_read(&configFileObj, buf+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
  40cd1c:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
  40cd20:	f107 0290 	add.w	r2, r7, #144	; 0x90
  40cd24:	18d1      	adds	r1, r2, r3
  40cd26:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
  40cd2a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
  40cd2e:	461a      	mov	r2, r3
  40cd30:	f107 038e 	add.w	r3, r7, #142	; 0x8e
  40cd34:	488d      	ldr	r0, [pc, #564]	; (40cf6c <loadSettings+0x2ec>)
  40cd36:	4c90      	ldr	r4, [pc, #576]	; (40cf78 <loadSettings+0x2f8>)
  40cd38:	47a0      	blx	r4
  40cd3a:	4603      	mov	r3, r0
  40cd3c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		total_bytes_read += bytes_read; 
  40cd40:	f107 038e 	add.w	r3, r7, #142	; 0x8e
  40cd44:	881a      	ldrh	r2, [r3, #0]
  40cd46:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
  40cd4a:	4413      	add	r3, r2
  40cd4c:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
		return STATUS_FAIL;
	}
	//read the whole file into a buffer
	char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
	uint16_t bytes_read = 0, total_bytes_read = 0;	
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  40cd50:	f8b7 21cc 	ldrh.w	r2, [r7, #460]	; 0x1cc
  40cd54:	4b85      	ldr	r3, [pc, #532]	; (40cf6c <loadSettings+0x2ec>)
  40cd56:	68db      	ldr	r3, [r3, #12]
  40cd58:	429a      	cmp	r2, r3
  40cd5a:	d203      	bcs.n	40cd64 <loadSettings+0xe4>
  40cd5c:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
  40cd60:	2b00      	cmp	r3, #0
  40cd62:	d0db      	beq.n	40cd1c <loadSettings+0x9c>
	{
		res = f_read(&configFileObj, buf+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
		total_bytes_read += bytes_read; 
	}
	char* bufPtr = 0;	//set pointer to start of buffer
  40cd64:	2300      	movs	r3, #0
  40cd66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	//Decrypt the data
	if (strncmp(buf, "ee", 2) == 0)		//check if the file is encrypted
  40cd6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
  40cd6e:	4618      	mov	r0, r3
  40cd70:	4982      	ldr	r1, [pc, #520]	; (40cf7c <loadSettings+0x2fc>)
  40cd72:	2202      	movs	r2, #2
  40cd74:	4b82      	ldr	r3, [pc, #520]	; (40cf80 <loadSettings+0x300>)
  40cd76:	4798      	blx	r3
  40cd78:	4603      	mov	r3, r0
  40cd7a:	2b00      	cmp	r3, #0
  40cd7c:	d10c      	bne.n	40cd98 <loadSettings+0x118>
	{
		bufPtr = buf + 2;
  40cd7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
  40cd82:	3302      	adds	r3, #2
  40cd84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		decryptBuf(bufPtr, total_bytes_read);
  40cd88:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
  40cd8c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
  40cd90:	4619      	mov	r1, r3
  40cd92:	4b7c      	ldr	r3, [pc, #496]	; (40cf84 <loadSettings+0x304>)
  40cd94:	4798      	blx	r3
  40cd96:	e003      	b.n	40cda0 <loadSettings+0x120>
	}
	else
	{
		bufPtr = buf;
  40cd98:	f107 0390 	add.w	r3, r7, #144	; 0x90
  40cd9c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	}
	//now parse the file and 
	status_t step_status = STATUS_PASS;
  40cda0:	2300      	movs	r3, #0
  40cda2:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
	char line[50] = {0}; 
  40cda6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40cdaa:	2200      	movs	r2, #0
  40cdac:	601a      	str	r2, [r3, #0]
  40cdae:	3304      	adds	r3, #4
  40cdb0:	2200      	movs	r2, #0
  40cdb2:	601a      	str	r2, [r3, #0]
  40cdb4:	3304      	adds	r3, #4
  40cdb6:	2200      	movs	r2, #0
  40cdb8:	601a      	str	r2, [r3, #0]
  40cdba:	3304      	adds	r3, #4
  40cdbc:	2200      	movs	r2, #0
  40cdbe:	601a      	str	r2, [r3, #0]
  40cdc0:	3304      	adds	r3, #4
  40cdc2:	2200      	movs	r2, #0
  40cdc4:	601a      	str	r2, [r3, #0]
  40cdc6:	3304      	adds	r3, #4
  40cdc8:	2200      	movs	r2, #0
  40cdca:	601a      	str	r2, [r3, #0]
  40cdcc:	3304      	adds	r3, #4
  40cdce:	2200      	movs	r2, #0
  40cdd0:	601a      	str	r2, [r3, #0]
  40cdd2:	3304      	adds	r3, #4
  40cdd4:	2200      	movs	r2, #0
  40cdd6:	601a      	str	r2, [r3, #0]
  40cdd8:	3304      	adds	r3, #4
  40cdda:	2200      	movs	r2, #0
  40cddc:	601a      	str	r2, [r3, #0]
  40cdde:	3304      	adds	r3, #4
  40cde0:	2200      	movs	r2, #0
  40cde2:	601a      	str	r2, [r3, #0]
  40cde4:	3304      	adds	r3, #4
  40cde6:	2200      	movs	r2, #0
  40cde8:	601a      	str	r2, [r3, #0]
  40cdea:	3304      	adds	r3, #4
  40cdec:	2200      	movs	r2, #0
  40cdee:	601a      	str	r2, [r3, #0]
  40cdf0:	3304      	adds	r3, #4
  40cdf2:	2200      	movs	r2, #0
  40cdf4:	801a      	strh	r2, [r3, #0]
  40cdf6:	3302      	adds	r3, #2
	char temp[50] = {0}; 
  40cdf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40cdfc:	2200      	movs	r2, #0
  40cdfe:	601a      	str	r2, [r3, #0]
  40ce00:	3304      	adds	r3, #4
  40ce02:	2200      	movs	r2, #0
  40ce04:	601a      	str	r2, [r3, #0]
  40ce06:	3304      	adds	r3, #4
  40ce08:	2200      	movs	r2, #0
  40ce0a:	601a      	str	r2, [r3, #0]
  40ce0c:	3304      	adds	r3, #4
  40ce0e:	2200      	movs	r2, #0
  40ce10:	601a      	str	r2, [r3, #0]
  40ce12:	3304      	adds	r3, #4
  40ce14:	2200      	movs	r2, #0
  40ce16:	601a      	str	r2, [r3, #0]
  40ce18:	3304      	adds	r3, #4
  40ce1a:	2200      	movs	r2, #0
  40ce1c:	601a      	str	r2, [r3, #0]
  40ce1e:	3304      	adds	r3, #4
  40ce20:	2200      	movs	r2, #0
  40ce22:	601a      	str	r2, [r3, #0]
  40ce24:	3304      	adds	r3, #4
  40ce26:	2200      	movs	r2, #0
  40ce28:	601a      	str	r2, [r3, #0]
  40ce2a:	3304      	adds	r3, #4
  40ce2c:	2200      	movs	r2, #0
  40ce2e:	601a      	str	r2, [r3, #0]
  40ce30:	3304      	adds	r3, #4
  40ce32:	2200      	movs	r2, #0
  40ce34:	601a      	str	r2, [r3, #0]
  40ce36:	3304      	adds	r3, #4
  40ce38:	2200      	movs	r2, #0
  40ce3a:	601a      	str	r2, [r3, #0]
  40ce3c:	3304      	adds	r3, #4
  40ce3e:	2200      	movs	r2, #0
  40ce40:	601a      	str	r2, [r3, #0]
  40ce42:	3304      	adds	r3, #4
  40ce44:	2200      	movs	r2, #0
  40ce46:	801a      	strh	r2, [r3, #0]
  40ce48:	3302      	adds	r3, #2
	int NumberOfNods = 0;	
  40ce4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40ce4e:	2200      	movs	r2, #0
  40ce50:	601a      	str	r2, [r3, #0]
	if(getLineFromBuf(bufPtr, line, sizeof(line)) == PASS)
  40ce52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40ce56:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
  40ce5a:	4619      	mov	r1, r3
  40ce5c:	2232      	movs	r2, #50	; 0x32
  40ce5e:	4b4a      	ldr	r3, [pc, #296]	; (40cf88 <loadSettings+0x308>)
  40ce60:	4798      	blx	r3
  40ce62:	4603      	mov	r3, r0
  40ce64:	2b00      	cmp	r3, #0
  40ce66:	d138      	bne.n	40ceda <loadSettings+0x25a>
	{
		if(sscanf(line, "%s ,%d, %s ,\r\n", brainSettings.imuSet, &NumberOfNods, brainSettings.channelmap) < 2)
  40ce68:	f107 025c 	add.w	r2, r7, #92	; 0x5c
  40ce6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40ce70:	4939      	ldr	r1, [pc, #228]	; (40cf58 <loadSettings+0x2d8>)
  40ce72:	9100      	str	r1, [sp, #0]
  40ce74:	4610      	mov	r0, r2
  40ce76:	4945      	ldr	r1, [pc, #276]	; (40cf8c <loadSettings+0x30c>)
  40ce78:	4a45      	ldr	r2, [pc, #276]	; (40cf90 <loadSettings+0x310>)
  40ce7a:	4c46      	ldr	r4, [pc, #280]	; (40cf94 <loadSettings+0x314>)
  40ce7c:	47a0      	blx	r4
  40ce7e:	4603      	mov	r3, r0
  40ce80:	2b01      	cmp	r3, #1
  40ce82:	dc04      	bgt.n	40ce8e <loadSettings+0x20e>
		{
			debugPrintString("failed to read settings\r\n");
  40ce84:	4844      	ldr	r0, [pc, #272]	; (40cf98 <loadSettings+0x318>)
  40ce86:	4b33      	ldr	r3, [pc, #204]	; (40cf54 <loadSettings+0x2d4>)
  40ce88:	4798      	blx	r3
			return STATUS_FAIL; 
  40ce8a:	2301      	movs	r3, #1
  40ce8c:	e189      	b.n	40d1a2 <loadSettings+0x522>
		}
		strcat(brainSettings.channelmap, "\r\n");	//Add CR+LF at the end of the srting
  40ce8e:	4832      	ldr	r0, [pc, #200]	; (40cf58 <loadSettings+0x2d8>)
  40ce90:	4b42      	ldr	r3, [pc, #264]	; (40cf9c <loadSettings+0x31c>)
  40ce92:	4798      	blx	r3
  40ce94:	4603      	mov	r3, r0
  40ce96:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
  40ce9a:	4b33      	ldr	r3, [pc, #204]	; (40cf68 <loadSettings+0x2e8>)
  40ce9c:	4413      	add	r3, r2
  40ce9e:	4a40      	ldr	r2, [pc, #256]	; (40cfa0 <loadSettings+0x320>)
  40cea0:	8811      	ldrh	r1, [r2, #0]
  40cea2:	7892      	ldrb	r2, [r2, #2]
  40cea4:	8019      	strh	r1, [r3, #0]
  40cea6:	709a      	strb	r2, [r3, #2]
		strcat(brainSettings.imuSet, "\r\n");
  40cea8:	4839      	ldr	r0, [pc, #228]	; (40cf90 <loadSettings+0x310>)
  40ceaa:	4b3c      	ldr	r3, [pc, #240]	; (40cf9c <loadSettings+0x31c>)
  40ceac:	4798      	blx	r3
  40ceae:	4603      	mov	r3, r0
  40ceb0:	f103 0288 	add.w	r2, r3, #136	; 0x88
  40ceb4:	4b2c      	ldr	r3, [pc, #176]	; (40cf68 <loadSettings+0x2e8>)
  40ceb6:	4413      	add	r3, r2
  40ceb8:	3301      	adds	r3, #1
  40ceba:	4a39      	ldr	r2, [pc, #228]	; (40cfa0 <loadSettings+0x320>)
  40cebc:	8811      	ldrh	r1, [r2, #0]
  40cebe:	7892      	ldrb	r2, [r2, #2]
  40cec0:	8019      	strh	r1, [r3, #0]
  40cec2:	709a      	strb	r2, [r3, #2]
		bufPtr += strlen(line); 		
  40cec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40cec8:	4618      	mov	r0, r3
  40ceca:	4b34      	ldr	r3, [pc, #208]	; (40cf9c <loadSettings+0x31c>)
  40cecc:	4798      	blx	r3
  40cece:	4603      	mov	r3, r0
  40ced0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
  40ced4:	4413      	add	r3, r2
  40ced6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	}
	brainSettings.numberOfAccelFrames = 0; 
  40ceda:	4b23      	ldr	r3, [pc, #140]	; (40cf68 <loadSettings+0x2e8>)
  40cedc:	2200      	movs	r2, #0
  40cede:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	brainSettings.numberOfImus = NumberOfNods; 
  40cee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40cee6:	681a      	ldr	r2, [r3, #0]
  40cee8:	4b1f      	ldr	r3, [pc, #124]	; (40cf68 <loadSettings+0x2e8>)
  40ceea:	605a      	str	r2, [r3, #4]
	//initialize the expectedNumberOfNods
	quinticConfig[0].expectedNumberOfNods = 0;
  40ceec:	4b2d      	ldr	r3, [pc, #180]	; (40cfa4 <loadSettings+0x324>)
  40ceee:	2200      	movs	r2, #0
  40cef0:	619a      	str	r2, [r3, #24]
	quinticConfig[1].expectedNumberOfNods = 0;
  40cef2:	4b2c      	ldr	r3, [pc, #176]	; (40cfa4 <loadSettings+0x324>)
  40cef4:	2200      	movs	r2, #0
  40cef6:	655a      	str	r2, [r3, #84]	; 0x54
	quinticConfig[2].expectedNumberOfNods = 0;	
  40cef8:	4b2a      	ldr	r3, [pc, #168]	; (40cfa4 <loadSettings+0x324>)
  40cefa:	2200      	movs	r2, #0
  40cefc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	int i=0, j=0; 
  40cf00:	2300      	movs	r3, #0
  40cf02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  40cf06:	2300      	movs	r3, #0
  40cf08:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	int quinticIndex = 0; 
  40cf0c:	f107 0320 	add.w	r3, r7, #32
  40cf10:	2200      	movs	r2, #0
  40cf12:	601a      	str	r2, [r3, #0]
	int imuId = 0;
  40cf14:	f107 031c 	add.w	r3, r7, #28
  40cf18:	2200      	movs	r2, #0
  40cf1a:	601a      	str	r2, [r3, #0]
	char tempMACAddress[20] = {0}; 
  40cf1c:	f107 0308 	add.w	r3, r7, #8
  40cf20:	2200      	movs	r2, #0
  40cf22:	601a      	str	r2, [r3, #0]
  40cf24:	3304      	adds	r3, #4
  40cf26:	2200      	movs	r2, #0
  40cf28:	601a      	str	r2, [r3, #0]
  40cf2a:	3304      	adds	r3, #4
  40cf2c:	2200      	movs	r2, #0
  40cf2e:	601a      	str	r2, [r3, #0]
  40cf30:	3304      	adds	r3, #4
  40cf32:	2200      	movs	r2, #0
  40cf34:	601a      	str	r2, [r3, #0]
  40cf36:	3304      	adds	r3, #4
  40cf38:	2200      	movs	r2, #0
  40cf3a:	601a      	str	r2, [r3, #0]
  40cf3c:	3304      	adds	r3, #4
	//packetReceivedMask = 0; //reset the mask	
	for(i = 0; i < NumberOfNods; i++)
  40cf3e:	2300      	movs	r3, #0
  40cf40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  40cf44:	e108      	b.n	40d158 <loadSettings+0x4d8>
  40cf46:	bf00      	nop
  40cf48:	2000381e 	.word	0x2000381e
  40cf4c:	20003820 	.word	0x20003820
  40cf50:	0041d484 	.word	0x0041d484
  40cf54:	004016d5 	.word	0x004016d5
  40cf58:	200002c0 	.word	0x200002c0
  40cf5c:	0041d4a0 	.word	0x0041d4a0
  40cf60:	2000025a 	.word	0x2000025a
  40cf64:	0041d4ac 	.word	0x0041d4ac
  40cf68:	20000220 	.word	0x20000220
  40cf6c:	200035ec 	.word	0x200035ec
  40cf70:	00408921 	.word	0x00408921
  40cf74:	0041309d 	.word	0x0041309d
  40cf78:	00408d55 	.word	0x00408d55
  40cf7c:	0041d4b8 	.word	0x0041d4b8
  40cf80:	004137e9 	.word	0x004137e9
  40cf84:	0040d3cd 	.word	0x0040d3cd
  40cf88:	0040d2f9 	.word	0x0040d2f9
  40cf8c:	0041d4bc 	.word	0x0041d4bc
  40cf90:	200002a9 	.word	0x200002a9
  40cf94:	00413321 	.word	0x00413321
  40cf98:	0041d4cc 	.word	0x0041d4cc
  40cf9c:	00413725 	.word	0x00413725
  40cfa0:	0041d4e8 	.word	0x0041d4e8
  40cfa4:	20000508 	.word	0x20000508
	{
		if(getLineFromBuf(bufPtr, line,sizeof(line)) == STATUS_PASS)
  40cfa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40cfac:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
  40cfb0:	4619      	mov	r1, r3
  40cfb2:	2232      	movs	r2, #50	; 0x32
  40cfb4:	4b7d      	ldr	r3, [pc, #500]	; (40d1ac <loadSettings+0x52c>)
  40cfb6:	4798      	blx	r3
  40cfb8:	4603      	mov	r3, r0
  40cfba:	2b00      	cmp	r3, #0
  40cfbc:	f040 80cb 	bne.w	40d156 <loadSettings+0x4d6>
		{			
			if(sscanf(line,"%d,%d,%s\r\n",&quinticIndex, &imuId, tempMACAddress) < 2)
  40cfc0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
  40cfc4:	f107 0220 	add.w	r2, r7, #32
  40cfc8:	f107 031c 	add.w	r3, r7, #28
  40cfcc:	f107 0008 	add.w	r0, r7, #8
  40cfd0:	9000      	str	r0, [sp, #0]
  40cfd2:	4608      	mov	r0, r1
  40cfd4:	4976      	ldr	r1, [pc, #472]	; (40d1b0 <loadSettings+0x530>)
  40cfd6:	4c77      	ldr	r4, [pc, #476]	; (40d1b4 <loadSettings+0x534>)
  40cfd8:	47a0      	blx	r4
  40cfda:	4603      	mov	r3, r0
  40cfdc:	2b01      	cmp	r3, #1
  40cfde:	dc03      	bgt.n	40cfe8 <loadSettings+0x368>
			{
				debugPrintString("failed to parse IMU settings\r\n"); 
  40cfe0:	4875      	ldr	r0, [pc, #468]	; (40d1b8 <loadSettings+0x538>)
  40cfe2:	4b76      	ldr	r3, [pc, #472]	; (40d1bc <loadSettings+0x53c>)
  40cfe4:	4798      	blx	r3
				break;
  40cfe6:	e0bf      	b.n	40d168 <loadSettings+0x4e8>
			}
			else
			{
				if(imuId < 0 || imuId > 9)
  40cfe8:	f107 031c 	add.w	r3, r7, #28
  40cfec:	681b      	ldr	r3, [r3, #0]
  40cfee:	2b00      	cmp	r3, #0
  40cff0:	db04      	blt.n	40cffc <loadSettings+0x37c>
  40cff2:	f107 031c 	add.w	r3, r7, #28
  40cff6:	681b      	ldr	r3, [r3, #0]
  40cff8:	2b09      	cmp	r3, #9
  40cffa:	dd07      	ble.n	40d00c <loadSettings+0x38c>
				{
					debugPrintStringInt("received incorrect imuId",imuId); 
  40cffc:	f107 031c 	add.w	r3, r7, #28
  40d000:	681b      	ldr	r3, [r3, #0]
  40d002:	486f      	ldr	r0, [pc, #444]	; (40d1c0 <loadSettings+0x540>)
  40d004:	4619      	mov	r1, r3
  40d006:	4b6f      	ldr	r3, [pc, #444]	; (40d1c4 <loadSettings+0x544>)
  40d008:	4798      	blx	r3
					break;	
  40d00a:	e0ad      	b.n	40d168 <loadSettings+0x4e8>
				}
				packetReceivedMask |= (1<<imuId);
  40d00c:	f107 031c 	add.w	r3, r7, #28
  40d010:	681b      	ldr	r3, [r3, #0]
  40d012:	2201      	movs	r2, #1
  40d014:	fa02 f303 	lsl.w	r3, r2, r3
  40d018:	b29a      	uxth	r2, r3
  40d01a:	4b6b      	ldr	r3, [pc, #428]	; (40d1c8 <loadSettings+0x548>)
  40d01c:	881b      	ldrh	r3, [r3, #0]
  40d01e:	b29b      	uxth	r3, r3
  40d020:	4313      	orrs	r3, r2
  40d022:	b29b      	uxth	r3, r3
  40d024:	b29a      	uxth	r2, r3
  40d026:	4b68      	ldr	r3, [pc, #416]	; (40d1c8 <loadSettings+0x548>)
  40d028:	801a      	strh	r2, [r3, #0]
				accelPacketReceivedMask |= (1<<imuId);
  40d02a:	f107 031c 	add.w	r3, r7, #28
  40d02e:	681b      	ldr	r3, [r3, #0]
  40d030:	2201      	movs	r2, #1
  40d032:	fa02 f303 	lsl.w	r3, r2, r3
  40d036:	b29a      	uxth	r2, r3
  40d038:	4b64      	ldr	r3, [pc, #400]	; (40d1cc <loadSettings+0x54c>)
  40d03a:	881b      	ldrh	r3, [r3, #0]
  40d03c:	b29b      	uxth	r3, r3
  40d03e:	4313      	orrs	r3, r2
  40d040:	b29b      	uxth	r3, r3
  40d042:	b29a      	uxth	r2, r3
  40d044:	4b61      	ldr	r3, [pc, #388]	; (40d1cc <loadSettings+0x54c>)
  40d046:	801a      	strh	r2, [r3, #0]
				imuConfig[imuId].imuId = imuId; 
  40d048:	f107 031c 	add.w	r3, r7, #28
  40d04c:	681a      	ldr	r2, [r3, #0]
  40d04e:	f107 031c 	add.w	r3, r7, #28
  40d052:	6819      	ldr	r1, [r3, #0]
  40d054:	485e      	ldr	r0, [pc, #376]	; (40d1d0 <loadSettings+0x550>)
  40d056:	4613      	mov	r3, r2
  40d058:	00db      	lsls	r3, r3, #3
  40d05a:	1a9b      	subs	r3, r3, r2
  40d05c:	00db      	lsls	r3, r3, #3
  40d05e:	4403      	add	r3, r0
  40d060:	6019      	str	r1, [r3, #0]
				snprintf(imuConfig[imuId].macAddress,20, "%s\r\n",tempMACAddress); 
  40d062:	f107 031c 	add.w	r3, r7, #28
  40d066:	681a      	ldr	r2, [r3, #0]
  40d068:	4613      	mov	r3, r2
  40d06a:	00db      	lsls	r3, r3, #3
  40d06c:	1a9b      	subs	r3, r3, r2
  40d06e:	00db      	lsls	r3, r3, #3
  40d070:	4a57      	ldr	r2, [pc, #348]	; (40d1d0 <loadSettings+0x550>)
  40d072:	4413      	add	r3, r2
  40d074:	1d1a      	adds	r2, r3, #4
  40d076:	f107 0308 	add.w	r3, r7, #8
  40d07a:	4610      	mov	r0, r2
  40d07c:	2114      	movs	r1, #20
  40d07e:	4a55      	ldr	r2, [pc, #340]	; (40d1d4 <loadSettings+0x554>)
  40d080:	4c55      	ldr	r4, [pc, #340]	; (40d1d8 <loadSettings+0x558>)
  40d082:	47a0      	blx	r4
				imuConfig[imuId].imuValid = true;
  40d084:	f107 031c 	add.w	r3, r7, #28
  40d088:	681a      	ldr	r2, [r3, #0]
  40d08a:	4951      	ldr	r1, [pc, #324]	; (40d1d0 <loadSettings+0x550>)
  40d08c:	4613      	mov	r3, r2
  40d08e:	00db      	lsls	r3, r3, #3
  40d090:	1a9b      	subs	r3, r3, r2
  40d092:	00db      	lsls	r3, r3, #3
  40d094:	440b      	add	r3, r1
  40d096:	3318      	adds	r3, #24
  40d098:	2201      	movs	r2, #1
  40d09a:	601a      	str	r2, [r3, #0]
				
				if(quinticIndex < 0 || quinticIndex > 2)
  40d09c:	f107 0320 	add.w	r3, r7, #32
  40d0a0:	681b      	ldr	r3, [r3, #0]
  40d0a2:	2b00      	cmp	r3, #0
  40d0a4:	db04      	blt.n	40d0b0 <loadSettings+0x430>
  40d0a6:	f107 0320 	add.w	r3, r7, #32
  40d0aa:	681b      	ldr	r3, [r3, #0]
  40d0ac:	2b02      	cmp	r3, #2
  40d0ae:	dd05      	ble.n	40d0bc <loadSettings+0x43c>
				{
					debugPrintStringInt("failed to assign IMU ",i); 
  40d0b0:	484a      	ldr	r0, [pc, #296]	; (40d1dc <loadSettings+0x55c>)
  40d0b2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
  40d0b6:	4b43      	ldr	r3, [pc, #268]	; (40d1c4 <loadSettings+0x544>)
  40d0b8:	4798      	blx	r3
					break;
  40d0ba:	e055      	b.n	40d168 <loadSettings+0x4e8>
				}
				if(quinticConfig[quinticIndex].expectedNumberOfNods >= MAX_NUMBER_OF_IMUS)
  40d0bc:	f107 0320 	add.w	r3, r7, #32
  40d0c0:	681a      	ldr	r2, [r3, #0]
  40d0c2:	4947      	ldr	r1, [pc, #284]	; (40d1e0 <loadSettings+0x560>)
  40d0c4:	4613      	mov	r3, r2
  40d0c6:	011b      	lsls	r3, r3, #4
  40d0c8:	1a9b      	subs	r3, r3, r2
  40d0ca:	009b      	lsls	r3, r3, #2
  40d0cc:	440b      	add	r3, r1
  40d0ce:	3318      	adds	r3, #24
  40d0d0:	681b      	ldr	r3, [r3, #0]
  40d0d2:	2b09      	cmp	r3, #9
  40d0d4:	dd07      	ble.n	40d0e6 <loadSettings+0x466>
				{
					debugPrintStringInt("failed to assign IMU ",imuId);
  40d0d6:	f107 031c 	add.w	r3, r7, #28
  40d0da:	681b      	ldr	r3, [r3, #0]
  40d0dc:	483f      	ldr	r0, [pc, #252]	; (40d1dc <loadSettings+0x55c>)
  40d0de:	4619      	mov	r1, r3
  40d0e0:	4b38      	ldr	r3, [pc, #224]	; (40d1c4 <loadSettings+0x544>)
  40d0e2:	4798      	blx	r3
					break;
  40d0e4:	e040      	b.n	40d168 <loadSettings+0x4e8>
				}
				quinticConfig[quinticIndex].imuArray[quinticConfig[quinticIndex].expectedNumberOfNods++] = &imuConfig[imuId]; 
  40d0e6:	f107 0320 	add.w	r3, r7, #32
  40d0ea:	6818      	ldr	r0, [r3, #0]
  40d0ec:	f107 0320 	add.w	r3, r7, #32
  40d0f0:	681a      	ldr	r2, [r3, #0]
  40d0f2:	493b      	ldr	r1, [pc, #236]	; (40d1e0 <loadSettings+0x560>)
  40d0f4:	4613      	mov	r3, r2
  40d0f6:	011b      	lsls	r3, r3, #4
  40d0f8:	1a9b      	subs	r3, r3, r2
  40d0fa:	009b      	lsls	r3, r3, #2
  40d0fc:	440b      	add	r3, r1
  40d0fe:	3318      	adds	r3, #24
  40d100:	6819      	ldr	r1, [r3, #0]
  40d102:	1c4c      	adds	r4, r1, #1
  40d104:	4d36      	ldr	r5, [pc, #216]	; (40d1e0 <loadSettings+0x560>)
  40d106:	4613      	mov	r3, r2
  40d108:	011b      	lsls	r3, r3, #4
  40d10a:	1a9b      	subs	r3, r3, r2
  40d10c:	009b      	lsls	r3, r3, #2
  40d10e:	442b      	add	r3, r5
  40d110:	3318      	adds	r3, #24
  40d112:	601c      	str	r4, [r3, #0]
  40d114:	f107 031c 	add.w	r3, r7, #28
  40d118:	681a      	ldr	r2, [r3, #0]
  40d11a:	4613      	mov	r3, r2
  40d11c:	00db      	lsls	r3, r3, #3
  40d11e:	1a9b      	subs	r3, r3, r2
  40d120:	00db      	lsls	r3, r3, #3
  40d122:	4a2b      	ldr	r2, [pc, #172]	; (40d1d0 <loadSettings+0x550>)
  40d124:	189c      	adds	r4, r3, r2
  40d126:	4a2e      	ldr	r2, [pc, #184]	; (40d1e0 <loadSettings+0x560>)
  40d128:	4603      	mov	r3, r0
  40d12a:	011b      	lsls	r3, r3, #4
  40d12c:	1a1b      	subs	r3, r3, r0
  40d12e:	440b      	add	r3, r1
  40d130:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
			}
			//debugPrintStringInt("loaded settings for IMU ",imuConfig[imuId].imuId);
			//debugPrintStringInt("On quintic ",quinticIndex);
			//debugPrintString(imuConfig[imuId].macAddress);
			//printf("loaded settings for IMU %d on Q%d, %s",imuConfig[imuId].imuId,quinticIndex, imuConfig[imuId].macAddress);
			bufPtr += strlen(line); 
  40d134:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40d138:	4618      	mov	r0, r3
  40d13a:	4b2a      	ldr	r3, [pc, #168]	; (40d1e4 <loadSettings+0x564>)
  40d13c:	4798      	blx	r3
  40d13e:	4603      	mov	r3, r0
  40d140:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
  40d144:	4413      	add	r3, r2
  40d146:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	int i=0, j=0; 
	int quinticIndex = 0; 
	int imuId = 0;
	char tempMACAddress[20] = {0}; 
	//packetReceivedMask = 0; //reset the mask	
	for(i = 0; i < NumberOfNods; i++)
  40d14a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
  40d14e:	3301      	adds	r3, #1
  40d150:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  40d154:	e000      	b.n	40d158 <loadSettings+0x4d8>
			//printf("loaded settings for IMU %d on Q%d, %s",imuConfig[imuId].imuId,quinticIndex, imuConfig[imuId].macAddress);
			bufPtr += strlen(line); 
		}
		else
		{
			break; 
  40d156:	e007      	b.n	40d168 <loadSettings+0x4e8>
	int i=0, j=0; 
	int quinticIndex = 0; 
	int imuId = 0;
	char tempMACAddress[20] = {0}; 
	//packetReceivedMask = 0; //reset the mask	
	for(i = 0; i < NumberOfNods; i++)
  40d158:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40d15c:	681b      	ldr	r3, [r3, #0]
  40d15e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
  40d162:	429a      	cmp	r2, r3
  40d164:	f6ff af20 	blt.w	40cfa8 <loadSettings+0x328>
		//for(j=0;j<quinticConfig[i].expectedNumberOfNods;j++)
		//{
			//quinticConfig[i].imuMask[j] = '1'; 
		//}
	//}	
	debugPrintString("Closing the file\r\n");
  40d168:	481f      	ldr	r0, [pc, #124]	; (40d1e8 <loadSettings+0x568>)
  40d16a:	4b14      	ldr	r3, [pc, #80]	; (40d1bc <loadSettings+0x53c>)
  40d16c:	4798      	blx	r3
	res = f_close(&configFileObj);
  40d16e:	481f      	ldr	r0, [pc, #124]	; (40d1ec <loadSettings+0x56c>)
  40d170:	4b1f      	ldr	r3, [pc, #124]	; (40d1f0 <loadSettings+0x570>)
  40d172:	4798      	blx	r3
  40d174:	4603      	mov	r3, r0
  40d176:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (res != FR_OK)
  40d17a:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
  40d17e:	2b00      	cmp	r3, #0
  40d180:	d004      	beq.n	40d18c <loadSettings+0x50c>
	{		
		debugPrintString("Error: Cannot Close file\r\n");
  40d182:	481c      	ldr	r0, [pc, #112]	; (40d1f4 <loadSettings+0x574>)
  40d184:	4b0d      	ldr	r3, [pc, #52]	; (40d1bc <loadSettings+0x53c>)
  40d186:	4798      	blx	r3
		return STATUS_FAIL;
  40d188:	2301      	movs	r3, #1
  40d18a:	e00a      	b.n	40d1a2 <loadSettings+0x522>
	}
	brainSettings.isLoaded = 1; 	
  40d18c:	4b1a      	ldr	r3, [pc, #104]	; (40d1f8 <loadSettings+0x578>)
  40d18e:	2201      	movs	r2, #1
  40d190:	601a      	str	r2, [r3, #0]
		
	packetReceivedMask |= 1<<9; //add mask for fabric sense
  40d192:	4b0d      	ldr	r3, [pc, #52]	; (40d1c8 <loadSettings+0x548>)
  40d194:	881b      	ldrh	r3, [r3, #0]
  40d196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40d19a:	b29a      	uxth	r2, r3
  40d19c:	4b0a      	ldr	r3, [pc, #40]	; (40d1c8 <loadSettings+0x548>)
  40d19e:	801a      	strh	r2, [r3, #0]
	return STATUS_PASS; 
  40d1a0:	2300      	movs	r3, #0
}
  40d1a2:	4618      	mov	r0, r3
  40d1a4:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
  40d1a8:	46bd      	mov	sp, r7
  40d1aa:	bdb0      	pop	{r4, r5, r7, pc}
  40d1ac:	0040d2f9 	.word	0x0040d2f9
  40d1b0:	0041d4ec 	.word	0x0041d4ec
  40d1b4:	00413321 	.word	0x00413321
  40d1b8:	0041d4f8 	.word	0x0041d4f8
  40d1bc:	004016d5 	.word	0x004016d5
  40d1c0:	0041d518 	.word	0x0041d518
  40d1c4:	004015c1 	.word	0x004015c1
  40d1c8:	2000381e 	.word	0x2000381e
  40d1cc:	20003820 	.word	0x20003820
  40d1d0:	200002d8 	.word	0x200002d8
  40d1d4:	0041d534 	.word	0x0041d534
  40d1d8:	0041326d 	.word	0x0041326d
  40d1dc:	0041d53c 	.word	0x0041d53c
  40d1e0:	20000508 	.word	0x20000508
  40d1e4:	00413725 	.word	0x00413725
  40d1e8:	0041d554 	.word	0x0041d554
  40d1ec:	200035ec 	.word	0x200035ec
  40d1f0:	004094f5 	.word	0x004094f5
  40d1f4:	0041d568 	.word	0x0041d568
  40d1f8:	20000220 	.word	0x20000220

0040d1fc <loadSerialNumberFromNvm>:
 * @brief Get one line from the buffer
 */
nvmSettings_t nvmSettings; 
extern drv_led_config_t ledConfiguration;
void loadSerialNumberFromNvm()
{
  40d1fc:	b580      	push	{r7, lr}
  40d1fe:	af00      	add	r7, sp, #0
	if(flash_read_user_signature(&nvmSettings, sizeof(nvmSettings)) == 0)
  40d200:	481c      	ldr	r0, [pc, #112]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d202:	2118      	movs	r1, #24
  40d204:	4b1c      	ldr	r3, [pc, #112]	; (40d278 <loadSerialNumberFromNvm+0x7c>)
  40d206:	4798      	blx	r3
  40d208:	4603      	mov	r3, r0
  40d20a:	2b00      	cmp	r3, #0
  40d20c:	d12e      	bne.n	40d26c <loadSerialNumberFromNvm+0x70>
	{
		if(nvmSettings.suitNumber[0] == 'S')
  40d20e:	4b19      	ldr	r3, [pc, #100]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d210:	781b      	ldrb	r3, [r3, #0]
  40d212:	2b53      	cmp	r3, #83	; 0x53
  40d214:	d105      	bne.n	40d222 <loadSerialNumberFromNvm+0x26>
		{
			strncpy(brainSettings.suitNumber, nvmSettings.suitNumber, sizeof(nvmSettings.suitNumber));
  40d216:	4819      	ldr	r0, [pc, #100]	; (40d27c <loadSerialNumberFromNvm+0x80>)
  40d218:	4916      	ldr	r1, [pc, #88]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d21a:	2210      	movs	r2, #16
  40d21c:	4b18      	ldr	r3, [pc, #96]	; (40d280 <loadSerialNumberFromNvm+0x84>)
  40d21e:	4798      	blx	r3
  40d220:	e007      	b.n	40d232 <loadSerialNumberFromNvm+0x36>
		}
		else
		{
			debugPrintString("Serial number not set\r\n");
  40d222:	4818      	ldr	r0, [pc, #96]	; (40d284 <loadSerialNumberFromNvm+0x88>)
  40d224:	4b18      	ldr	r3, [pc, #96]	; (40d288 <loadSerialNumberFromNvm+0x8c>)
  40d226:	4798      	blx	r3
			strncpy(brainSettings.suitNumber, "SXXXXX", 50);
  40d228:	4814      	ldr	r0, [pc, #80]	; (40d27c <loadSerialNumberFromNvm+0x80>)
  40d22a:	4918      	ldr	r1, [pc, #96]	; (40d28c <loadSerialNumberFromNvm+0x90>)
  40d22c:	2232      	movs	r2, #50	; 0x32
  40d22e:	4b14      	ldr	r3, [pc, #80]	; (40d280 <loadSerialNumberFromNvm+0x84>)
  40d230:	4798      	blx	r3
		}
		if (checkLedConfig(&nvmSettings.ledConfiguration) != STATUS_PASS)
  40d232:	4817      	ldr	r0, [pc, #92]	; (40d290 <loadSerialNumberFromNvm+0x94>)
  40d234:	4b17      	ldr	r3, [pc, #92]	; (40d294 <loadSerialNumberFromNvm+0x98>)
  40d236:	4798      	blx	r3
  40d238:	4603      	mov	r3, r0
  40d23a:	2b00      	cmp	r3, #0
  40d23c:	d009      	beq.n	40d252 <loadSerialNumberFromNvm+0x56>
		{
			ledConfiguration.redLed = DRV_GPIO_PIN_RED_LED;
  40d23e:	4b16      	ldr	r3, [pc, #88]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d240:	220e      	movs	r2, #14
  40d242:	701a      	strb	r2, [r3, #0]
			ledConfiguration.greenLed = DRV_GPIO_PIN_GREEN_LED;
  40d244:	4b14      	ldr	r3, [pc, #80]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d246:	220c      	movs	r2, #12
  40d248:	709a      	strb	r2, [r3, #2]
			ledConfiguration.blueLed = DRV_GPIO_PIN_BLUE_LED;
  40d24a:	4b13      	ldr	r3, [pc, #76]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d24c:	220d      	movs	r2, #13
  40d24e:	705a      	strb	r2, [r3, #1]
  40d250:	e00f      	b.n	40d272 <loadSerialNumberFromNvm+0x76>
		}
		else
		{
			ledConfiguration.redLed = nvmSettings.ledConfiguration.redLed;
  40d252:	4b08      	ldr	r3, [pc, #32]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d254:	7d1a      	ldrb	r2, [r3, #20]
  40d256:	4b10      	ldr	r3, [pc, #64]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d258:	701a      	strb	r2, [r3, #0]
			ledConfiguration.greenLed = nvmSettings.ledConfiguration.greenLed;
  40d25a:	4b06      	ldr	r3, [pc, #24]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d25c:	7d9a      	ldrb	r2, [r3, #22]
  40d25e:	4b0e      	ldr	r3, [pc, #56]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d260:	709a      	strb	r2, [r3, #2]
			ledConfiguration.blueLed = nvmSettings.ledConfiguration.blueLed;
  40d262:	4b04      	ldr	r3, [pc, #16]	; (40d274 <loadSerialNumberFromNvm+0x78>)
  40d264:	7d5a      	ldrb	r2, [r3, #21]
  40d266:	4b0c      	ldr	r3, [pc, #48]	; (40d298 <loadSerialNumberFromNvm+0x9c>)
  40d268:	705a      	strb	r2, [r3, #1]
  40d26a:	e002      	b.n	40d272 <loadSerialNumberFromNvm+0x76>
		}
	}
	else
	{
		debugPrintString("failed to load nvm settings"); 
  40d26c:	480b      	ldr	r0, [pc, #44]	; (40d29c <loadSerialNumberFromNvm+0xa0>)
  40d26e:	4b06      	ldr	r3, [pc, #24]	; (40d288 <loadSerialNumberFromNvm+0x8c>)
  40d270:	4798      	blx	r3
	}
}
  40d272:	bd80      	pop	{r7, pc}
  40d274:	20003e80 	.word	0x20003e80
  40d278:	004004b9 	.word	0x004004b9
  40d27c:	20000228 	.word	0x20000228
  40d280:	0041389d 	.word	0x0041389d
  40d284:	0041d584 	.word	0x0041d584
  40d288:	004016d5 	.word	0x004016d5
  40d28c:	0041d59c 	.word	0x0041d59c
  40d290:	20003e94 	.word	0x20003e94
  40d294:	0040d441 	.word	0x0040d441
  40d298:	2000021c 	.word	0x2000021c
  40d29c:	0041d5a4 	.word	0x0041d5a4

0040d2a0 <saveNvmSettings>:

status_t saveNvmSettings()
{
  40d2a0:	b580      	push	{r7, lr}
  40d2a2:	b082      	sub	sp, #8
  40d2a4:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40d2a6:	2300      	movs	r3, #0
  40d2a8:	71fb      	strb	r3, [r7, #7]
	flash_erase_user_signature();	//erase is mandatory before writing.
  40d2aa:	4b0c      	ldr	r3, [pc, #48]	; (40d2dc <saveNvmSettings+0x3c>)
  40d2ac:	4798      	blx	r3
	/*strncpy(tempSettingString, serialNumber, 50);*/
	if(flash_write_user_signature(&nvmSettings, sizeof(nvmSettings)) == 0)	
  40d2ae:	480c      	ldr	r0, [pc, #48]	; (40d2e0 <saveNvmSettings+0x40>)
  40d2b0:	2118      	movs	r1, #24
  40d2b2:	4b0c      	ldr	r3, [pc, #48]	; (40d2e4 <saveNvmSettings+0x44>)
  40d2b4:	4798      	blx	r3
  40d2b6:	4603      	mov	r3, r0
  40d2b8:	2b00      	cmp	r3, #0
  40d2ba:	d103      	bne.n	40d2c4 <saveNvmSettings+0x24>
	{
		debugPrintString("saved nvm settings\r\n"); 
  40d2bc:	480a      	ldr	r0, [pc, #40]	; (40d2e8 <saveNvmSettings+0x48>)
  40d2be:	4b0b      	ldr	r3, [pc, #44]	; (40d2ec <saveNvmSettings+0x4c>)
  40d2c0:	4798      	blx	r3
  40d2c2:	e004      	b.n	40d2ce <saveNvmSettings+0x2e>
	}
	else
	{
		debugPrintString("failed to save nvm settings\r\n"); 
  40d2c4:	480a      	ldr	r0, [pc, #40]	; (40d2f0 <saveNvmSettings+0x50>)
  40d2c6:	4b09      	ldr	r3, [pc, #36]	; (40d2ec <saveNvmSettings+0x4c>)
  40d2c8:	4798      	blx	r3
		status = STATUS_FAIL;
  40d2ca:	2301      	movs	r3, #1
  40d2cc:	71fb      	strb	r3, [r7, #7]
	}
	loadSerialNumberFromNvm();
  40d2ce:	4b09      	ldr	r3, [pc, #36]	; (40d2f4 <saveNvmSettings+0x54>)
  40d2d0:	4798      	blx	r3
	return status; 
  40d2d2:	79fb      	ldrb	r3, [r7, #7]
}
  40d2d4:	4618      	mov	r0, r3
  40d2d6:	3708      	adds	r7, #8
  40d2d8:	46bd      	mov	sp, r7
  40d2da:	bd80      	pop	{r7, pc}
  40d2dc:	00400571 	.word	0x00400571
  40d2e0:	20003e80 	.word	0x20003e80
  40d2e4:	004004f9 	.word	0x004004f9
  40d2e8:	0041d5c0 	.word	0x0041d5c0
  40d2ec:	004016d5 	.word	0x004016d5
  40d2f0:	0041d5d8 	.word	0x0041d5d8
  40d2f4:	0040d1fd 	.word	0x0040d1fd

0040d2f8 <getLineFromBuf>:
/**
 * getLineFromBuf(char* bufPtr, char* resp, size_t respSize)
 * @brief Get one line from the buffer
 */
status_t getLineFromBuf(char* bufPtr, char* resp, size_t respSize)
{
  40d2f8:	b580      	push	{r7, lr}
  40d2fa:	b088      	sub	sp, #32
  40d2fc:	af00      	add	r7, sp, #0
  40d2fe:	60f8      	str	r0, [r7, #12]
  40d300:	60b9      	str	r1, [r7, #8]
  40d302:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_FAIL; 
  40d304:	2301      	movs	r3, #1
  40d306:	77fb      	strb	r3, [r7, #31]
	int bufLen = strlen(bufPtr); 
  40d308:	68f8      	ldr	r0, [r7, #12]
  40d30a:	4b1e      	ldr	r3, [pc, #120]	; (40d384 <getLineFromBuf+0x8c>)
  40d30c:	4798      	blx	r3
  40d30e:	4603      	mov	r3, r0
  40d310:	617b      	str	r3, [r7, #20]
	int i = 0;
  40d312:	2300      	movs	r3, #0
  40d314:	61bb      	str	r3, [r7, #24]
	if(bufLen == 0)
  40d316:	697b      	ldr	r3, [r7, #20]
  40d318:	2b00      	cmp	r3, #0
  40d31a:	d101      	bne.n	40d320 <getLineFromBuf+0x28>
	{
		return STATUS_FAIL; 
  40d31c:	2301      	movs	r3, #1
  40d31e:	e02d      	b.n	40d37c <getLineFromBuf+0x84>
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  40d320:	2300      	movs	r3, #0
  40d322:	61bb      	str	r3, [r7, #24]
  40d324:	e019      	b.n	40d35a <getLineFromBuf+0x62>
	{
		resp[i] = bufPtr[i]; 
  40d326:	69bb      	ldr	r3, [r7, #24]
  40d328:	68ba      	ldr	r2, [r7, #8]
  40d32a:	4413      	add	r3, r2
  40d32c:	69ba      	ldr	r2, [r7, #24]
  40d32e:	68f9      	ldr	r1, [r7, #12]
  40d330:	440a      	add	r2, r1
  40d332:	7812      	ldrb	r2, [r2, #0]
  40d334:	701a      	strb	r2, [r3, #0]
		if(resp[i] == '\n')
  40d336:	69bb      	ldr	r3, [r7, #24]
  40d338:	68ba      	ldr	r2, [r7, #8]
  40d33a:	4413      	add	r3, r2
  40d33c:	781b      	ldrb	r3, [r3, #0]
  40d33e:	2b0a      	cmp	r3, #10
  40d340:	d108      	bne.n	40d354 <getLineFromBuf+0x5c>
		{
			result = STATUS_PASS;
  40d342:	2300      	movs	r3, #0
  40d344:	77fb      	strb	r3, [r7, #31]
			resp[i+1] = 0; //terminate the string! 
  40d346:	69bb      	ldr	r3, [r7, #24]
  40d348:	3301      	adds	r3, #1
  40d34a:	68ba      	ldr	r2, [r7, #8]
  40d34c:	4413      	add	r3, r2
  40d34e:	2200      	movs	r2, #0
  40d350:	701a      	strb	r2, [r3, #0]
			break; 			
  40d352:	e00a      	b.n	40d36a <getLineFromBuf+0x72>
	int i = 0;
	if(bufLen == 0)
	{
		return STATUS_FAIL; 
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  40d354:	69bb      	ldr	r3, [r7, #24]
  40d356:	3301      	adds	r3, #1
  40d358:	61bb      	str	r3, [r7, #24]
  40d35a:	69ba      	ldr	r2, [r7, #24]
  40d35c:	697b      	ldr	r3, [r7, #20]
  40d35e:	429a      	cmp	r2, r3
  40d360:	da03      	bge.n	40d36a <getLineFromBuf+0x72>
  40d362:	69ba      	ldr	r2, [r7, #24]
  40d364:	687b      	ldr	r3, [r7, #4]
  40d366:	429a      	cmp	r2, r3
  40d368:	d3dd      	bcc.n	40d326 <getLineFromBuf+0x2e>
			result = STATUS_PASS;
			resp[i+1] = 0; //terminate the string! 
			break; 			
		}		
	}
	if(result == STATUS_PASS)
  40d36a:	7ffb      	ldrb	r3, [r7, #31]
  40d36c:	2b00      	cmp	r3, #0
  40d36e:	d104      	bne.n	40d37a <getLineFromBuf+0x82>
	{
		bufPtr += i+1; 
  40d370:	69bb      	ldr	r3, [r7, #24]
  40d372:	3301      	adds	r3, #1
  40d374:	68fa      	ldr	r2, [r7, #12]
  40d376:	4413      	add	r3, r2
  40d378:	60fb      	str	r3, [r7, #12]
	}
	return result; 
  40d37a:	7ffb      	ldrb	r3, [r7, #31]
}
  40d37c:	4618      	mov	r0, r3
  40d37e:	3720      	adds	r7, #32
  40d380:	46bd      	mov	sp, r7
  40d382:	bd80      	pop	{r7, pc}
  40d384:	00413725 	.word	0x00413725

0040d388 <rotr32>:
/**
 * rotr32 (uint8_t value, unsigned int count)
 * @brief Circular rotate right
 */
uint8_t rotr32 (uint8_t value, unsigned int count)
{
  40d388:	b480      	push	{r7}
  40d38a:	b085      	sub	sp, #20
  40d38c:	af00      	add	r7, sp, #0
  40d38e:	4603      	mov	r3, r0
  40d390:	6039      	str	r1, [r7, #0]
  40d392:	71fb      	strb	r3, [r7, #7]
	const unsigned int mask = (CHAR_BIT*sizeof(value)-1);
  40d394:	2307      	movs	r3, #7
  40d396:	60fb      	str	r3, [r7, #12]
	count &= mask;
  40d398:	683a      	ldr	r2, [r7, #0]
  40d39a:	68fb      	ldr	r3, [r7, #12]
  40d39c:	4013      	ands	r3, r2
  40d39e:	603b      	str	r3, [r7, #0]
	return (value>>count) | (value<<( (-count) & mask ));
  40d3a0:	79fa      	ldrb	r2, [r7, #7]
  40d3a2:	683b      	ldr	r3, [r7, #0]
  40d3a4:	fa42 f303 	asr.w	r3, r2, r3
  40d3a8:	b2da      	uxtb	r2, r3
  40d3aa:	79f9      	ldrb	r1, [r7, #7]
  40d3ac:	683b      	ldr	r3, [r7, #0]
  40d3ae:	4258      	negs	r0, r3
  40d3b0:	68fb      	ldr	r3, [r7, #12]
  40d3b2:	4003      	ands	r3, r0
  40d3b4:	fa01 f303 	lsl.w	r3, r1, r3
  40d3b8:	b2db      	uxtb	r3, r3
  40d3ba:	4313      	orrs	r3, r2
  40d3bc:	b2db      	uxtb	r3, r3
  40d3be:	b2db      	uxtb	r3, r3
}
  40d3c0:	4618      	mov	r0, r3
  40d3c2:	3714      	adds	r7, #20
  40d3c4:	46bd      	mov	sp, r7
  40d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d3ca:	4770      	bx	lr

0040d3cc <decryptBuf>:
/**
 * decryptBuf(uint8_t* buffer, uint16_t length)
 * @brief Decrypt the input buffer and save its updated contents
 */
void decryptBuf(uint8_t* buffer, uint16_t length)
{
  40d3cc:	b590      	push	{r4, r7, lr}
  40d3ce:	b085      	sub	sp, #20
  40d3d0:	af00      	add	r7, sp, #0
  40d3d2:	6078      	str	r0, [r7, #4]
  40d3d4:	460b      	mov	r3, r1
  40d3d6:	807b      	strh	r3, [r7, #2]
	uint8_t shift = 0;
  40d3d8:	2300      	movs	r3, #0
  40d3da:	73fb      	strb	r3, [r7, #15]
	//decryption part
	for (int i = 0; i < length; i++)
  40d3dc:	2300      	movs	r3, #0
  40d3de:	60bb      	str	r3, [r7, #8]
  40d3e0:	e023      	b.n	40d42a <decryptBuf+0x5e>
	{
		shift = i % 7;
  40d3e2:	68b9      	ldr	r1, [r7, #8]
  40d3e4:	4b14      	ldr	r3, [pc, #80]	; (40d438 <decryptBuf+0x6c>)
  40d3e6:	fb81 2303 	smull	r2, r3, r1, r3
  40d3ea:	440b      	add	r3, r1
  40d3ec:	109a      	asrs	r2, r3, #2
  40d3ee:	17cb      	asrs	r3, r1, #31
  40d3f0:	1ad2      	subs	r2, r2, r3
  40d3f2:	4613      	mov	r3, r2
  40d3f4:	00db      	lsls	r3, r3, #3
  40d3f6:	1a9b      	subs	r3, r3, r2
  40d3f8:	1aca      	subs	r2, r1, r3
  40d3fa:	4613      	mov	r3, r2
  40d3fc:	73fb      	strb	r3, [r7, #15]
		if (shift == 0)
  40d3fe:	7bfb      	ldrb	r3, [r7, #15]
  40d400:	2b00      	cmp	r3, #0
  40d402:	d101      	bne.n	40d408 <decryptBuf+0x3c>
		{
			shift = 3;
  40d404:	2303      	movs	r3, #3
  40d406:	73fb      	strb	r3, [r7, #15]
		}
		buffer[i] = rotr32(buffer[i], shift);
  40d408:	68bb      	ldr	r3, [r7, #8]
  40d40a:	687a      	ldr	r2, [r7, #4]
  40d40c:	18d4      	adds	r4, r2, r3
  40d40e:	68bb      	ldr	r3, [r7, #8]
  40d410:	687a      	ldr	r2, [r7, #4]
  40d412:	4413      	add	r3, r2
  40d414:	781a      	ldrb	r2, [r3, #0]
  40d416:	7bfb      	ldrb	r3, [r7, #15]
  40d418:	4610      	mov	r0, r2
  40d41a:	4619      	mov	r1, r3
  40d41c:	4b07      	ldr	r3, [pc, #28]	; (40d43c <decryptBuf+0x70>)
  40d41e:	4798      	blx	r3
  40d420:	4603      	mov	r3, r0
  40d422:	7023      	strb	r3, [r4, #0]
 */
void decryptBuf(uint8_t* buffer, uint16_t length)
{
	uint8_t shift = 0;
	//decryption part
	for (int i = 0; i < length; i++)
  40d424:	68bb      	ldr	r3, [r7, #8]
  40d426:	3301      	adds	r3, #1
  40d428:	60bb      	str	r3, [r7, #8]
  40d42a:	887a      	ldrh	r2, [r7, #2]
  40d42c:	68bb      	ldr	r3, [r7, #8]
  40d42e:	429a      	cmp	r2, r3
  40d430:	dcd7      	bgt.n	40d3e2 <decryptBuf+0x16>
			shift = 3;
		}
		buffer[i] = rotr32(buffer[i], shift);
	}
	//printf("Decrypted string:\r\n%s\r\n", buffer);	//Debug prints
}
  40d432:	3714      	adds	r7, #20
  40d434:	46bd      	mov	sp, r7
  40d436:	bd90      	pop	{r4, r7, pc}
  40d438:	92492493 	.word	0x92492493
  40d43c:	0040d389 	.word	0x0040d389

0040d440 <checkLedConfig>:
 * @brief: Check the integrity of and validate the led configuration stored in NVM
 * @param: pointer to the led configuration structure in NVM settings
 * @return: STATUS_PASS if valid, STATUS_FAIL if not
 */
status_t checkLedConfig(drv_led_config_t* ledConfig)
{
  40d440:	b480      	push	{r7}
  40d442:	b085      	sub	sp, #20
  40d444:	af00      	add	r7, sp, #0
  40d446:	6078      	str	r0, [r7, #4]
	uint8_t sum = 0;
  40d448:	2300      	movs	r3, #0
  40d44a:	73fb      	strb	r3, [r7, #15]
	
	sum = ledConfig->redLed + ledConfig->greenLed + ledConfig->blueLed;
  40d44c:	687b      	ldr	r3, [r7, #4]
  40d44e:	781a      	ldrb	r2, [r3, #0]
  40d450:	687b      	ldr	r3, [r7, #4]
  40d452:	789b      	ldrb	r3, [r3, #2]
  40d454:	4413      	add	r3, r2
  40d456:	b2da      	uxtb	r2, r3
  40d458:	687b      	ldr	r3, [r7, #4]
  40d45a:	785b      	ldrb	r3, [r3, #1]
  40d45c:	4413      	add	r3, r2
  40d45e:	73fb      	strb	r3, [r7, #15]
	if (sum != (DRV_GPIO_PIN_RED_LED + DRV_GPIO_PIN_GREEN_LED + DRV_GPIO_PIN_BLUE_LED))
  40d460:	7bfb      	ldrb	r3, [r7, #15]
  40d462:	2b27      	cmp	r3, #39	; 0x27
  40d464:	d001      	beq.n	40d46a <checkLedConfig+0x2a>
	{	//The strucure is invalid
		return STATUS_FAIL;
  40d466:	2301      	movs	r3, #1
  40d468:	e000      	b.n	40d46c <checkLedConfig+0x2c>
	}
	else
	{	//it is valid
		return STATUS_PASS;
  40d46a:	2300      	movs	r3, #0
	}
  40d46c:	4618      	mov	r0, r3
  40d46e:	3714      	adds	r7, #20
  40d470:	46bd      	mov	sp, r7
  40d472:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d476:	4770      	bx	lr

0040d478 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40d478:	b480      	push	{r7}
  40d47a:	b083      	sub	sp, #12
  40d47c:	af00      	add	r7, sp, #0
  40d47e:	4603      	mov	r3, r0
  40d480:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40d482:	4b08      	ldr	r3, [pc, #32]	; (40d4a4 <NVIC_EnableIRQ+0x2c>)
  40d484:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40d488:	0952      	lsrs	r2, r2, #5
  40d48a:	79f9      	ldrb	r1, [r7, #7]
  40d48c:	f001 011f 	and.w	r1, r1, #31
  40d490:	2001      	movs	r0, #1
  40d492:	fa00 f101 	lsl.w	r1, r0, r1
  40d496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40d49a:	370c      	adds	r7, #12
  40d49c:	46bd      	mov	sp, r7
  40d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d4a2:	4770      	bx	lr
  40d4a4:	e000e100 	.word	0xe000e100

0040d4a8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40d4a8:	b480      	push	{r7}
  40d4aa:	b083      	sub	sp, #12
  40d4ac:	af00      	add	r7, sp, #0
  40d4ae:	4603      	mov	r3, r0
  40d4b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40d4b2:	4b09      	ldr	r3, [pc, #36]	; (40d4d8 <NVIC_DisableIRQ+0x30>)
  40d4b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40d4b8:	0952      	lsrs	r2, r2, #5
  40d4ba:	79f9      	ldrb	r1, [r7, #7]
  40d4bc:	f001 011f 	and.w	r1, r1, #31
  40d4c0:	2001      	movs	r0, #1
  40d4c2:	fa00 f101 	lsl.w	r1, r0, r1
  40d4c6:	3220      	adds	r2, #32
  40d4c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40d4cc:	370c      	adds	r7, #12
  40d4ce:	46bd      	mov	sp, r7
  40d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d4d4:	4770      	bx	lr
  40d4d6:	bf00      	nop
  40d4d8:	e000e100 	.word	0xe000e100

0040d4dc <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40d4dc:	b480      	push	{r7}
  40d4de:	b089      	sub	sp, #36	; 0x24
  40d4e0:	af00      	add	r7, sp, #0
  40d4e2:	6078      	str	r0, [r7, #4]
  40d4e4:	687b      	ldr	r3, [r7, #4]
  40d4e6:	61fb      	str	r3, [r7, #28]
  40d4e8:	69fb      	ldr	r3, [r7, #28]
  40d4ea:	61bb      	str	r3, [r7, #24]
  40d4ec:	69bb      	ldr	r3, [r7, #24]
  40d4ee:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40d4f0:	697b      	ldr	r3, [r7, #20]
  40d4f2:	095b      	lsrs	r3, r3, #5
  40d4f4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40d4f6:	693b      	ldr	r3, [r7, #16]
  40d4f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40d4fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40d500:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40d502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40d504:	69fb      	ldr	r3, [r7, #28]
  40d506:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40d508:	68fb      	ldr	r3, [r7, #12]
  40d50a:	f003 031f 	and.w	r3, r3, #31
  40d50e:	2101      	movs	r1, #1
  40d510:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40d514:	4013      	ands	r3, r2
  40d516:	2b00      	cmp	r3, #0
  40d518:	bf0c      	ite	eq
  40d51a:	2300      	moveq	r3, #0
  40d51c:	2301      	movne	r3, #1
  40d51e:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  40d520:	4618      	mov	r0, r3
  40d522:	3724      	adds	r7, #36	; 0x24
  40d524:	46bd      	mov	sp, r7
  40d526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d52a:	4770      	bx	lr

0040d52c <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  40d52c:	b580      	push	{r7, lr}
  40d52e:	b084      	sub	sp, #16
  40d530:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40d532:	2300      	movs	r3, #0
  40d534:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  40d536:	2313      	movs	r3, #19
  40d538:	607b      	str	r3, [r7, #4]
	int i = 0; 
  40d53a:	2300      	movs	r3, #0
  40d53c:	60bb      	str	r3, [r7, #8]
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;	
  40d53e:	4b12      	ldr	r3, [pc, #72]	; (40d588 <drv_gpio_initializeAll+0x5c>)
  40d540:	4a11      	ldr	r2, [pc, #68]	; (40d588 <drv_gpio_initializeAll+0x5c>)
  40d542:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
  40d546:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  40d54a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	for(i = 0; i < numGpio ; i++)
  40d54e:	2300      	movs	r3, #0
  40d550:	60bb      	str	r3, [r7, #8]
  40d552:	e010      	b.n	40d576 <drv_gpio_initializeAll+0x4a>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  40d554:	68bb      	ldr	r3, [r7, #8]
  40d556:	011a      	lsls	r2, r3, #4
  40d558:	4b0c      	ldr	r3, [pc, #48]	; (40d58c <drv_gpio_initializeAll+0x60>)
  40d55a:	4413      	add	r3, r2
  40d55c:	4618      	mov	r0, r3
  40d55e:	4b0c      	ldr	r3, [pc, #48]	; (40d590 <drv_gpio_initializeAll+0x64>)
  40d560:	4798      	blx	r3
  40d562:	4603      	mov	r3, r0
  40d564:	2b00      	cmp	r3, #0
  40d566:	d003      	beq.n	40d570 <drv_gpio_initializeAll+0x44>
		{
			//printf("failed to initialize GPIO at index %d", i);
			status |= STATUS_FAIL;
  40d568:	7bfb      	ldrb	r3, [r7, #15]
  40d56a:	f043 0301 	orr.w	r3, r3, #1
  40d56e:	73fb      	strb	r3, [r7, #15]
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;	
	for(i = 0; i < numGpio ; i++)
  40d570:	68bb      	ldr	r3, [r7, #8]
  40d572:	3301      	adds	r3, #1
  40d574:	60bb      	str	r3, [r7, #8]
  40d576:	68ba      	ldr	r2, [r7, #8]
  40d578:	687b      	ldr	r3, [r7, #4]
  40d57a:	429a      	cmp	r2, r3
  40d57c:	dbea      	blt.n	40d554 <drv_gpio_initializeAll+0x28>
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST1]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST2]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST3]);
	
	
	return status; 
  40d57e:	7bfb      	ldrb	r3, [r7, #15]
}
  40d580:	4618      	mov	r0, r3
  40d582:	3710      	adds	r7, #16
  40d584:	46bd      	mov	sp, r7
  40d586:	bd80      	pop	{r7, pc}
  40d588:	400e0200 	.word	0x400e0200
  40d58c:	200005cc 	.word	0x200005cc
  40d590:	0040d5e9 	.word	0x0040d5e9

0040d594 <drv_gpio_ConfigureBLEForProgramming>:
 * @brief Set the GPIO for Rx and Tx of all UARTs to High Impedance
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_ConfigureBLEForProgramming(void)
{
  40d594:	b580      	push	{r7, lr}
  40d596:	b084      	sub	sp, #16
  40d598:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40d59a:	2300      	movs	r3, #0
  40d59c:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
  40d59e:	2306      	movs	r3, #6
  40d5a0:	607b      	str	r3, [r7, #4]
	int i = 0;
  40d5a2:	2300      	movs	r3, #0
  40d5a4:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < numGpio ; i++)
  40d5a6:	2300      	movs	r3, #0
  40d5a8:	60bb      	str	r3, [r7, #8]
  40d5aa:	e010      	b.n	40d5ce <drv_gpio_ConfigureBLEForProgramming+0x3a>
	{
		if(drv_gpio_config(&programmingGpioConfig[i]) != STATUS_PASS)
  40d5ac:	68bb      	ldr	r3, [r7, #8]
  40d5ae:	011a      	lsls	r2, r3, #4
  40d5b0:	4b0b      	ldr	r3, [pc, #44]	; (40d5e0 <drv_gpio_ConfigureBLEForProgramming+0x4c>)
  40d5b2:	4413      	add	r3, r2
  40d5b4:	4618      	mov	r0, r3
  40d5b6:	4b0b      	ldr	r3, [pc, #44]	; (40d5e4 <drv_gpio_ConfigureBLEForProgramming+0x50>)
  40d5b8:	4798      	blx	r3
  40d5ba:	4603      	mov	r3, r0
  40d5bc:	2b00      	cmp	r3, #0
  40d5be:	d003      	beq.n	40d5c8 <drv_gpio_ConfigureBLEForProgramming+0x34>
		{
			status |= STATUS_FAIL;
  40d5c0:	7bfb      	ldrb	r3, [r7, #15]
  40d5c2:	f043 0301 	orr.w	r3, r3, #1
  40d5c6:	73fb      	strb	r3, [r7, #15]
{
	status_t status = STATUS_PASS;
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
	int i = 0;

	for(i = 0; i < numGpio ; i++)
  40d5c8:	68bb      	ldr	r3, [r7, #8]
  40d5ca:	3301      	adds	r3, #1
  40d5cc:	60bb      	str	r3, [r7, #8]
  40d5ce:	68ba      	ldr	r2, [r7, #8]
  40d5d0:	687b      	ldr	r3, [r7, #4]
  40d5d2:	429a      	cmp	r2, r3
  40d5d4:	dbea      	blt.n	40d5ac <drv_gpio_ConfigureBLEForProgramming+0x18>
		if(drv_gpio_config(&programmingGpioConfig[i]) != STATUS_PASS)
		{
			status |= STATUS_FAIL;
		}
	}	
	return status;
  40d5d6:	7bfb      	ldrb	r3, [r7, #15]
}
  40d5d8:	4618      	mov	r0, r3
  40d5da:	3710      	adds	r7, #16
  40d5dc:	46bd      	mov	sp, r7
  40d5de:	bd80      	pop	{r7, pc}
  40d5e0:	200006fc 	.word	0x200006fc
  40d5e4:	0040d5e9 	.word	0x0040d5e9

0040d5e8 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  40d5e8:	b590      	push	{r4, r7, lr}
  40d5ea:	b08d      	sub	sp, #52	; 0x34
  40d5ec:	af02      	add	r7, sp, #8
  40d5ee:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40d5f0:	2300      	movs	r3, #0
  40d5f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned long PinFlag = 0;	
  40d5f6:	2300      	movs	r3, #0
  40d5f8:	627b      	str	r3, [r7, #36]	; 0x24
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  40d5fa:	687b      	ldr	r3, [r7, #4]
  40d5fc:	791b      	ldrb	r3, [r3, #4]
  40d5fe:	2b01      	cmp	r3, #1
  40d600:	f040 80a2 	bne.w	40d748 <drv_gpio_config+0x160>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  40d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d606:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  40d60a:	627b      	str	r3, [r7, #36]	; 0x24
		if (gpioConfig->pullUpEnabled == TRUE)
  40d60c:	687b      	ldr	r3, [r7, #4]
  40d60e:	7b1b      	ldrb	r3, [r3, #12]
  40d610:	2b01      	cmp	r3, #1
  40d612:	d103      	bne.n	40d61c <drv_gpio_config+0x34>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  40d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d616:	f043 0301 	orr.w	r3, r3, #1
  40d61a:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  40d61c:	687b      	ldr	r3, [r7, #4]
  40d61e:	7b5b      	ldrb	r3, [r3, #13]
  40d620:	2b01      	cmp	r3, #1
  40d622:	d110      	bne.n	40d646 <drv_gpio_config+0x5e>
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  40d624:	687b      	ldr	r3, [r7, #4]
  40d626:	681b      	ldr	r3, [r3, #0]
  40d628:	4618      	mov	r0, r3
  40d62a:	4b56      	ldr	r3, [pc, #344]	; (40d784 <drv_gpio_config+0x19c>)
  40d62c:	4798      	blx	r3
  40d62e:	61f8      	str	r0, [r7, #28]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40d630:	687b      	ldr	r3, [r7, #4]
  40d632:	681b      	ldr	r3, [r3, #0]
  40d634:	4618      	mov	r0, r3
  40d636:	4b54      	ldr	r3, [pc, #336]	; (40d788 <drv_gpio_config+0x1a0>)
  40d638:	4798      	blx	r3
  40d63a:	61b8      	str	r0, [r7, #24]
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  40d63c:	69f8      	ldr	r0, [r7, #28]
  40d63e:	69b9      	ldr	r1, [r7, #24]
  40d640:	2205      	movs	r2, #5
  40d642:	4b52      	ldr	r3, [pc, #328]	; (40d78c <drv_gpio_config+0x1a4>)
  40d644:	4798      	blx	r3
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  40d646:	687b      	ldr	r3, [r7, #4]
  40d648:	681b      	ldr	r3, [r3, #0]
  40d64a:	4618      	mov	r0, r3
  40d64c:	4b50      	ldr	r3, [pc, #320]	; (40d790 <drv_gpio_config+0x1a8>)
  40d64e:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40d650:	687b      	ldr	r3, [r7, #4]
  40d652:	681b      	ldr	r3, [r3, #0]
  40d654:	4618      	mov	r0, r3
  40d656:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40d658:	4b4e      	ldr	r3, [pc, #312]	; (40d794 <drv_gpio_config+0x1ac>)
  40d65a:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  40d65c:	2300      	movs	r3, #0
  40d65e:	627b      	str	r3, [r7, #36]	; 0x24
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  40d660:	687b      	ldr	r3, [r7, #4]
  40d662:	799b      	ldrb	r3, [r3, #6]
  40d664:	2b03      	cmp	r3, #3
  40d666:	d81f      	bhi.n	40d6a8 <drv_gpio_config+0xc0>
  40d668:	a201      	add	r2, pc, #4	; (adr r2, 40d670 <drv_gpio_config+0x88>)
  40d66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d66e:	bf00      	nop
  40d670:	0040d681 	.word	0x0040d681
  40d674:	0040d68b 	.word	0x0040d68b
  40d678:	0040d695 	.word	0x0040d695
  40d67c:	0040d69f 	.word	0x0040d69f
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  40d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d682:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40d686:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40d688:	e00f      	b.n	40d6aa <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d68c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  40d690:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40d692:	e00a      	b.n	40d6aa <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d696:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40d69a:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40d69c:	e005      	b.n	40d6aa <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  40d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d6a0:	f043 0310 	orr.w	r3, r3, #16
  40d6a4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40d6a6:	e000      	b.n	40d6aa <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  40d6a8:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  40d6aa:	687b      	ldr	r3, [r7, #4]
  40d6ac:	681b      	ldr	r3, [r3, #0]
  40d6ae:	4618      	mov	r0, r3
  40d6b0:	4b34      	ldr	r3, [pc, #208]	; (40d784 <drv_gpio_config+0x19c>)
  40d6b2:	4798      	blx	r3
  40d6b4:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40d6b6:	687b      	ldr	r3, [r7, #4]
  40d6b8:	681b      	ldr	r3, [r3, #0]
  40d6ba:	4618      	mov	r0, r3
  40d6bc:	4b32      	ldr	r3, [pc, #200]	; (40d788 <drv_gpio_config+0x1a0>)
  40d6be:	4798      	blx	r3
  40d6c0:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  40d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d6c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40d6c8:	2b00      	cmp	r3, #0
  40d6ca:	d034      	beq.n	40d736 <drv_gpio_config+0x14e>
		{			
			if (gpioConfig->pinId == DRV_GPIO_ID_PIN_SD_CD)		//Set the SD-CD interrupt as per the current state of pin
  40d6cc:	687b      	ldr	r3, [r7, #4]
  40d6ce:	681b      	ldr	r3, [r3, #0]
  40d6d0:	2b2b      	cmp	r3, #43	; 0x2b
  40d6d2:	d10e      	bne.n	40d6f2 <drv_gpio_config+0x10a>
			{
				if (ioport_get_pin_level(gpioConfig->pinId) == false)
  40d6d4:	687b      	ldr	r3, [r7, #4]
  40d6d6:	681b      	ldr	r3, [r3, #0]
  40d6d8:	4618      	mov	r0, r3
  40d6da:	4b2f      	ldr	r3, [pc, #188]	; (40d798 <drv_gpio_config+0x1b0>)
  40d6dc:	4798      	blx	r3
  40d6de:	4603      	mov	r3, r0
  40d6e0:	f083 0301 	eor.w	r3, r3, #1
  40d6e4:	b2db      	uxtb	r3, r3
  40d6e6:	2b00      	cmp	r3, #0
  40d6e8:	d003      	beq.n	40d6f2 <drv_gpio_config+0x10a>
				{
					PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;	//SD-card not present, change the interrupt type
  40d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d6ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40d6f0:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  40d6f2:	687b      	ldr	r3, [r7, #4]
  40d6f4:	681b      	ldr	r3, [r3, #0]
  40d6f6:	4618      	mov	r0, r3
  40d6f8:	4b28      	ldr	r3, [pc, #160]	; (40d79c <drv_gpio_config+0x1b4>)
  40d6fa:	4798      	blx	r3
  40d6fc:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  40d6fe:	687b      	ldr	r3, [r7, #4]
  40d700:	689b      	ldr	r3, [r3, #8]
  40d702:	9300      	str	r3, [sp, #0]
  40d704:	6978      	ldr	r0, [r7, #20]
  40d706:	68f9      	ldr	r1, [r7, #12]
  40d708:	693a      	ldr	r2, [r7, #16]
  40d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d70c:	4c24      	ldr	r4, [pc, #144]	; (40d7a0 <drv_gpio_config+0x1b8>)
  40d70e:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  40d710:	6978      	ldr	r0, [r7, #20]
  40d712:	6939      	ldr	r1, [r7, #16]
  40d714:	4b23      	ldr	r3, [pc, #140]	; (40d7a4 <drv_gpio_config+0x1bc>)
  40d716:	4798      	blx	r3
			if (p_pio == PIOA)
  40d718:	697a      	ldr	r2, [r7, #20]
  40d71a:	4b23      	ldr	r3, [pc, #140]	; (40d7a8 <drv_gpio_config+0x1c0>)
  40d71c:	429a      	cmp	r2, r3
  40d71e:	d103      	bne.n	40d728 <drv_gpio_config+0x140>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
  40d720:	200b      	movs	r0, #11
  40d722:	4b22      	ldr	r3, [pc, #136]	; (40d7ac <drv_gpio_config+0x1c4>)
  40d724:	4798      	blx	r3
  40d726:	e006      	b.n	40d736 <drv_gpio_config+0x14e>
			}
			else if (p_pio == PIOB)
  40d728:	697a      	ldr	r2, [r7, #20]
  40d72a:	4b21      	ldr	r3, [pc, #132]	; (40d7b0 <drv_gpio_config+0x1c8>)
  40d72c:	429a      	cmp	r2, r3
  40d72e:	d102      	bne.n	40d736 <drv_gpio_config+0x14e>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
  40d730:	200c      	movs	r0, #12
  40d732:	4b1e      	ldr	r3, [pc, #120]	; (40d7ac <drv_gpio_config+0x1c4>)
  40d734:	4798      	blx	r3
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  40d736:	697b      	ldr	r3, [r7, #20]
  40d738:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  40d73c:	693b      	ldr	r3, [r7, #16]
  40d73e:	431a      	orrs	r2, r3
  40d740:	697b      	ldr	r3, [r7, #20]
  40d742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  40d746:	e017      	b.n	40d778 <drv_gpio_config+0x190>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  40d748:	687b      	ldr	r3, [r7, #4]
  40d74a:	795b      	ldrb	r3, [r3, #5]
  40d74c:	2b01      	cmp	r3, #1
  40d74e:	d104      	bne.n	40d75a <drv_gpio_config+0x172>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  40d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d752:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  40d756:	627b      	str	r3, [r7, #36]	; 0x24
  40d758:	e003      	b.n	40d762 <drv_gpio_config+0x17a>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  40d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40d75c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  40d760:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  40d762:	687b      	ldr	r3, [r7, #4]
  40d764:	681b      	ldr	r3, [r3, #0]
  40d766:	4618      	mov	r0, r3
  40d768:	4b09      	ldr	r3, [pc, #36]	; (40d790 <drv_gpio_config+0x1a8>)
  40d76a:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40d76c:	687b      	ldr	r3, [r7, #4]
  40d76e:	681b      	ldr	r3, [r3, #0]
  40d770:	4618      	mov	r0, r3
  40d772:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40d774:	4b07      	ldr	r3, [pc, #28]	; (40d794 <drv_gpio_config+0x1ac>)
  40d776:	4798      	blx	r3
	}
	
	return status;
  40d778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  40d77c:	4618      	mov	r0, r3
  40d77e:	372c      	adds	r7, #44	; 0x2c
  40d780:	46bd      	mov	sp, r7
  40d782:	bd90      	pop	{r4, r7, pc}
  40d784:	004118e1 	.word	0x004118e1
  40d788:	00411929 	.word	0x00411929
  40d78c:	00411255 	.word	0x00411255
  40d790:	00411d0d 	.word	0x00411d0d
  40d794:	00411605 	.word	0x00411605
  40d798:	0040d4dd 	.word	0x0040d4dd
  40d79c:	00411909 	.word	0x00411909
  40d7a0:	00411a19 	.word	0x00411a19
  40d7a4:	004114e9 	.word	0x004114e9
  40d7a8:	400e0e00 	.word	0x400e0e00
  40d7ac:	0040d479 	.word	0x0040d479
  40d7b0:	400e1000 	.word	0x400e1000

0040d7b4 <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  40d7b4:	b580      	push	{r7, lr}
  40d7b6:	b084      	sub	sp, #16
  40d7b8:	af00      	add	r7, sp, #0
  40d7ba:	4602      	mov	r2, r0
  40d7bc:	460b      	mov	r3, r1
  40d7be:	71fa      	strb	r2, [r7, #7]
  40d7c0:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  40d7c2:	2300      	movs	r3, #0
  40d7c4:	72fb      	strb	r3, [r7, #11]
	uint32_t pinFlag = 0x00; 
  40d7c6:	2300      	movs	r3, #0
  40d7c8:	60fb      	str	r3, [r7, #12]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  40d7ca:	79fb      	ldrb	r3, [r7, #7]
  40d7cc:	4a32      	ldr	r2, [pc, #200]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d7ce:	011b      	lsls	r3, r3, #4
  40d7d0:	4413      	add	r3, r2
  40d7d2:	791b      	ldrb	r3, [r3, #4]
  40d7d4:	2b00      	cmp	r3, #0
  40d7d6:	d001      	beq.n	40d7dc <drv_gpio_setPinState+0x28>
	{
		return STATUS_FAIL;
  40d7d8:	2301      	movs	r3, #1
  40d7da:	e059      	b.n	40d890 <drv_gpio_setPinState+0xdc>
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  40d7dc:	79fb      	ldrb	r3, [r7, #7]
  40d7de:	4a2e      	ldr	r2, [pc, #184]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d7e0:	011b      	lsls	r3, r3, #4
  40d7e2:	4413      	add	r3, r2
  40d7e4:	3308      	adds	r3, #8
  40d7e6:	79db      	ldrb	r3, [r3, #7]
  40d7e8:	2b02      	cmp	r3, #2
  40d7ea:	d007      	beq.n	40d7fc <drv_gpio_setPinState+0x48>
  40d7ec:	79fb      	ldrb	r3, [r7, #7]
  40d7ee:	4a2a      	ldr	r2, [pc, #168]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d7f0:	011b      	lsls	r3, r3, #4
  40d7f2:	4413      	add	r3, r2
  40d7f4:	3308      	adds	r3, #8
  40d7f6:	79db      	ldrb	r3, [r3, #7]
  40d7f8:	2b03      	cmp	r3, #3
  40d7fa:	d11a      	bne.n	40d832 <drv_gpio_setPinState+0x7e>
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  40d7fc:	79bb      	ldrb	r3, [r7, #6]
  40d7fe:	2b01      	cmp	r3, #1
  40d800:	d10a      	bne.n	40d818 <drv_gpio_setPinState+0x64>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
  40d802:	68fb      	ldr	r3, [r7, #12]
  40d804:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  40d808:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  40d80a:	4b23      	ldr	r3, [pc, #140]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d80c:	681b      	ldr	r3, [r3, #0]
  40d80e:	4618      	mov	r0, r3
  40d810:	68f9      	ldr	r1, [r7, #12]
  40d812:	4b22      	ldr	r3, [pc, #136]	; (40d89c <drv_gpio_setPinState+0xe8>)
  40d814:	4798      	blx	r3
  40d816:	e00c      	b.n	40d832 <drv_gpio_setPinState+0x7e>
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  40d818:	79bb      	ldrb	r3, [r7, #6]
  40d81a:	2b00      	cmp	r3, #0
  40d81c:	d109      	bne.n	40d832 <drv_gpio_setPinState+0x7e>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
  40d81e:	68fb      	ldr	r3, [r7, #12]
  40d820:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  40d824:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  40d826:	4b1c      	ldr	r3, [pc, #112]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d828:	681b      	ldr	r3, [r3, #0]
  40d82a:	4618      	mov	r0, r3
  40d82c:	68f9      	ldr	r1, [r7, #12]
  40d82e:	4b1b      	ldr	r3, [pc, #108]	; (40d89c <drv_gpio_setPinState+0xe8>)
  40d830:	4798      	blx	r3
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  40d832:	79bb      	ldrb	r3, [r7, #6]
  40d834:	2b03      	cmp	r3, #3
  40d836:	d82a      	bhi.n	40d88e <drv_gpio_setPinState+0xda>
  40d838:	a201      	add	r2, pc, #4	; (adr r2, 40d840 <drv_gpio_setPinState+0x8c>)
  40d83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d83e:	bf00      	nop
  40d840:	0040d863 	.word	0x0040d863
  40d844:	0040d851 	.word	0x0040d851
  40d848:	0040d875 	.word	0x0040d875
  40d84c:	0040d88f 	.word	0x0040d88f
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  40d850:	79fb      	ldrb	r3, [r7, #7]
  40d852:	4a11      	ldr	r2, [pc, #68]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d854:	011b      	lsls	r3, r3, #4
  40d856:	4413      	add	r3, r2
  40d858:	681b      	ldr	r3, [r3, #0]
  40d85a:	4618      	mov	r0, r3
  40d85c:	4b10      	ldr	r3, [pc, #64]	; (40d8a0 <drv_gpio_setPinState+0xec>)
  40d85e:	4798      	blx	r3
		break;
  40d860:	e015      	b.n	40d88e <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  40d862:	79fb      	ldrb	r3, [r7, #7]
  40d864:	4a0c      	ldr	r2, [pc, #48]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d866:	011b      	lsls	r3, r3, #4
  40d868:	4413      	add	r3, r2
  40d86a:	681b      	ldr	r3, [r3, #0]
  40d86c:	4618      	mov	r0, r3
  40d86e:	4b0d      	ldr	r3, [pc, #52]	; (40d8a4 <drv_gpio_setPinState+0xf0>)
  40d870:	4798      	blx	r3
		break;
  40d872:	e00c      	b.n	40d88e <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
  40d874:	68fb      	ldr	r3, [r7, #12]
  40d876:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  40d87a:	f043 0301 	orr.w	r3, r3, #1
  40d87e:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  40d880:	4b05      	ldr	r3, [pc, #20]	; (40d898 <drv_gpio_setPinState+0xe4>)
  40d882:	681b      	ldr	r3, [r3, #0]
  40d884:	4618      	mov	r0, r3
  40d886:	68f9      	ldr	r1, [r7, #12]
  40d888:	4b04      	ldr	r3, [pc, #16]	; (40d89c <drv_gpio_setPinState+0xe8>)
  40d88a:	4798      	blx	r3
		break;
  40d88c:	bf00      	nop
	}
	
	


	return status;
  40d88e:	7afb      	ldrb	r3, [r7, #11]
}
  40d890:	4618      	mov	r0, r3
  40d892:	3710      	adds	r7, #16
  40d894:	46bd      	mov	sp, r7
  40d896:	bd80      	pop	{r7, pc}
  40d898:	200005cc 	.word	0x200005cc
  40d89c:	00411605 	.word	0x00411605
  40d8a0:	00411555 	.word	0x00411555
  40d8a4:	00411581 	.word	0x00411581

0040d8a8 <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  40d8a8:	b580      	push	{r7, lr}
  40d8aa:	b084      	sub	sp, #16
  40d8ac:	af00      	add	r7, sp, #0
  40d8ae:	4603      	mov	r3, r0
  40d8b0:	6039      	str	r1, [r7, #0]
  40d8b2:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40d8b4:	2300      	movs	r3, #0
  40d8b6:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  40d8b8:	79fb      	ldrb	r3, [r7, #7]
  40d8ba:	4a0d      	ldr	r2, [pc, #52]	; (40d8f0 <drv_gpio_getPinState+0x48>)
  40d8bc:	011b      	lsls	r3, r3, #4
  40d8be:	4413      	add	r3, r2
  40d8c0:	681b      	ldr	r3, [r3, #0]
  40d8c2:	4618      	mov	r0, r3
  40d8c4:	4b0b      	ldr	r3, [pc, #44]	; (40d8f4 <drv_gpio_getPinState+0x4c>)
  40d8c6:	4798      	blx	r3
  40d8c8:	4603      	mov	r3, r0
  40d8ca:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  40d8cc:	7bbb      	ldrb	r3, [r7, #14]
  40d8ce:	f083 0301 	eor.w	r3, r3, #1
  40d8d2:	b2db      	uxtb	r3, r3
  40d8d4:	2b00      	cmp	r3, #0
  40d8d6:	d003      	beq.n	40d8e0 <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  40d8d8:	683b      	ldr	r3, [r7, #0]
  40d8da:	2200      	movs	r2, #0
  40d8dc:	701a      	strb	r2, [r3, #0]
  40d8de:	e002      	b.n	40d8e6 <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  40d8e0:	683b      	ldr	r3, [r7, #0]
  40d8e2:	2201      	movs	r2, #1
  40d8e4:	701a      	strb	r2, [r3, #0]
	}
	return status;
  40d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
  40d8e8:	4618      	mov	r0, r3
  40d8ea:	3710      	adds	r7, #16
  40d8ec:	46bd      	mov	sp, r7
  40d8ee:	bd80      	pop	{r7, pc}
  40d8f0:	200005cc 	.word	0x200005cc
  40d8f4:	0040d4dd 	.word	0x0040d4dd

0040d8f8 <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  40d8f8:	b580      	push	{r7, lr}
  40d8fa:	b084      	sub	sp, #16
  40d8fc:	af00      	add	r7, sp, #0
  40d8fe:	4603      	mov	r3, r0
  40d900:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40d902:	2300      	movs	r3, #0
  40d904:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  40d906:	79fb      	ldrb	r3, [r7, #7]
  40d908:	4a05      	ldr	r2, [pc, #20]	; (40d920 <drv_gpio_togglePin+0x28>)
  40d90a:	011b      	lsls	r3, r3, #4
  40d90c:	4413      	add	r3, r2
  40d90e:	681b      	ldr	r3, [r3, #0]
  40d910:	4618      	mov	r0, r3
  40d912:	4b04      	ldr	r3, [pc, #16]	; (40d924 <drv_gpio_togglePin+0x2c>)
  40d914:	4798      	blx	r3
	return status;
  40d916:	7bfb      	ldrb	r3, [r7, #15]
}
  40d918:	4618      	mov	r0, r3
  40d91a:	3710      	adds	r7, #16
  40d91c:	46bd      	mov	sp, r7
  40d91e:	bd80      	pop	{r7, pc}
  40d920:	200005cc 	.word	0x200005cc
  40d924:	004115ad 	.word	0x004115ad

0040d928 <drv_gpio_config_interrupt>:
 * @brief Set Interrupt Configuration for the requested pin
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt)
{
  40d928:	b580      	push	{r7, lr}
  40d92a:	b086      	sub	sp, #24
  40d92c:	af00      	add	r7, sp, #0
  40d92e:	4602      	mov	r2, r0
  40d930:	460b      	mov	r3, r1
  40d932:	71fa      	strb	r2, [r7, #7]
  40d934:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  40d936:	2301      	movs	r3, #1
  40d938:	75fb      	strb	r3, [r7, #23]
	unsigned long PinFlag = 0;
  40d93a:	2300      	movs	r3, #0
  40d93c:	613b      	str	r3, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  40d93e:	79fb      	ldrb	r3, [r7, #7]
  40d940:	4a1c      	ldr	r2, [pc, #112]	; (40d9b4 <drv_gpio_config_interrupt+0x8c>)
  40d942:	011b      	lsls	r3, r3, #4
  40d944:	4413      	add	r3, r2
  40d946:	681b      	ldr	r3, [r3, #0]
  40d948:	4618      	mov	r0, r3
  40d94a:	4b1b      	ldr	r3, [pc, #108]	; (40d9b8 <drv_gpio_config_interrupt+0x90>)
  40d94c:	4798      	blx	r3
  40d94e:	60f8      	str	r0, [r7, #12]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  40d950:	79fb      	ldrb	r3, [r7, #7]
  40d952:	4a18      	ldr	r2, [pc, #96]	; (40d9b4 <drv_gpio_config_interrupt+0x8c>)
  40d954:	011b      	lsls	r3, r3, #4
  40d956:	4413      	add	r3, r2
  40d958:	681b      	ldr	r3, [r3, #0]
  40d95a:	4618      	mov	r0, r3
  40d95c:	4b17      	ldr	r3, [pc, #92]	; (40d9bc <drv_gpio_config_interrupt+0x94>)
  40d95e:	4798      	blx	r3
  40d960:	60b8      	str	r0, [r7, #8]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  40d962:	79bb      	ldrb	r3, [r7, #6]
  40d964:	2b00      	cmp	r3, #0
  40d966:	d104      	bne.n	40d972 <drv_gpio_config_interrupt+0x4a>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  40d968:	2370      	movs	r3, #112	; 0x70
  40d96a:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40d96c:	2300      	movs	r3, #0
  40d96e:	75fb      	strb	r3, [r7, #23]
  40d970:	e016      	b.n	40d9a0 <drv_gpio_config_interrupt+0x78>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  40d972:	79bb      	ldrb	r3, [r7, #6]
  40d974:	2b01      	cmp	r3, #1
  40d976:	d104      	bne.n	40d982 <drv_gpio_config_interrupt+0x5a>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40d978:	2350      	movs	r3, #80	; 0x50
  40d97a:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40d97c:	2300      	movs	r3, #0
  40d97e:	75fb      	strb	r3, [r7, #23]
  40d980:	e00e      	b.n	40d9a0 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  40d982:	79bb      	ldrb	r3, [r7, #6]
  40d984:	2b02      	cmp	r3, #2
  40d986:	d104      	bne.n	40d992 <drv_gpio_config_interrupt+0x6a>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40d988:	2330      	movs	r3, #48	; 0x30
  40d98a:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40d98c:	2300      	movs	r3, #0
  40d98e:	75fb      	strb	r3, [r7, #23]
  40d990:	e006      	b.n	40d9a0 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  40d992:	79bb      	ldrb	r3, [r7, #6]
  40d994:	2b03      	cmp	r3, #3
  40d996:	d103      	bne.n	40d9a0 <drv_gpio_config_interrupt+0x78>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  40d998:	2310      	movs	r3, #16
  40d99a:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40d99c:	2300      	movs	r3, #0
  40d99e:	75fb      	strb	r3, [r7, #23]
	}
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  40d9a0:	68f8      	ldr	r0, [r7, #12]
  40d9a2:	68b9      	ldr	r1, [r7, #8]
  40d9a4:	693a      	ldr	r2, [r7, #16]
  40d9a6:	4b06      	ldr	r3, [pc, #24]	; (40d9c0 <drv_gpio_config_interrupt+0x98>)
  40d9a8:	4798      	blx	r3
	return status;
  40d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
  40d9ac:	4618      	mov	r0, r3
  40d9ae:	3718      	adds	r7, #24
  40d9b0:	46bd      	mov	sp, r7
  40d9b2:	bd80      	pop	{r7, pc}
  40d9b4:	200005cc 	.word	0x200005cc
  40d9b8:	004118e1 	.word	0x004118e1
  40d9bc:	00411929 	.word	0x00411929
  40d9c0:	0041147d 	.word	0x0041147d

0040d9c4 <drv_gpio_check_Int>:
 * @brief Check if Interrupt was generated on a Pin or GPIO input
 * @param drv_gpio_pins_t pin
 * @return gpioSetFlag
 ***********************************************************************************************/
bool drv_gpio_check_Int(drv_gpio_pins_t pin)
{
  40d9c4:	b480      	push	{r7}
  40d9c6:	b085      	sub	sp, #20
  40d9c8:	af00      	add	r7, sp, #0
  40d9ca:	4603      	mov	r3, r0
  40d9cc:	71fb      	strb	r3, [r7, #7]
	bool returnVal;
	returnVal = gpioConfig[pin].gpioSetFlag;
  40d9ce:	79fb      	ldrb	r3, [r7, #7]
  40d9d0:	4a09      	ldr	r2, [pc, #36]	; (40d9f8 <drv_gpio_check_Int+0x34>)
  40d9d2:	011b      	lsls	r3, r3, #4
  40d9d4:	4413      	add	r3, r2
  40d9d6:	3308      	adds	r3, #8
  40d9d8:	799b      	ldrb	r3, [r3, #6]
  40d9da:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40d9dc:	79fb      	ldrb	r3, [r7, #7]
  40d9de:	4a06      	ldr	r2, [pc, #24]	; (40d9f8 <drv_gpio_check_Int+0x34>)
  40d9e0:	011b      	lsls	r3, r3, #4
  40d9e2:	4413      	add	r3, r2
  40d9e4:	3308      	adds	r3, #8
  40d9e6:	2200      	movs	r2, #0
  40d9e8:	719a      	strb	r2, [r3, #6]
	return	returnVal;
  40d9ea:	7bfb      	ldrb	r3, [r7, #15]
}
  40d9ec:	4618      	mov	r0, r3
  40d9ee:	3714      	adds	r7, #20
  40d9f0:	46bd      	mov	sp, r7
  40d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d9f6:	4770      	bx	lr
  40d9f8:	200005cc 	.word	0x200005cc

0040d9fc <drv_gpio_clear_Int>:
 * @brief Clear the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
bool drv_gpio_clear_Int(drv_gpio_pins_t pin)
{
  40d9fc:	b480      	push	{r7}
  40d9fe:	b085      	sub	sp, #20
  40da00:	af00      	add	r7, sp, #0
  40da02:	4603      	mov	r3, r0
  40da04:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40da06:	2300      	movs	r3, #0
  40da08:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40da0a:	79fb      	ldrb	r3, [r7, #7]
  40da0c:	4a08      	ldr	r2, [pc, #32]	; (40da30 <drv_gpio_clear_Int+0x34>)
  40da0e:	011b      	lsls	r3, r3, #4
  40da10:	4413      	add	r3, r2
  40da12:	3308      	adds	r3, #8
  40da14:	2200      	movs	r2, #0
  40da16:	719a      	strb	r2, [r3, #6]
	return status;
  40da18:	7bfb      	ldrb	r3, [r7, #15]
  40da1a:	2b00      	cmp	r3, #0
  40da1c:	bf0c      	ite	eq
  40da1e:	2300      	moveq	r3, #0
  40da20:	2301      	movne	r3, #1
  40da22:	b2db      	uxtb	r3, r3
}
  40da24:	4618      	mov	r0, r3
  40da26:	3714      	adds	r7, #20
  40da28:	46bd      	mov	sp, r7
  40da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40da2e:	4770      	bx	lr
  40da30:	200005cc 	.word	0x200005cc

0040da34 <drv_gpio_enable_interrupt>:
 * @brief Enable the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_enable_interrupt(drv_gpio_pins_t pin)
{
  40da34:	b580      	push	{r7, lr}
  40da36:	b086      	sub	sp, #24
  40da38:	af00      	add	r7, sp, #0
  40da3a:	4603      	mov	r3, r0
  40da3c:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40da3e:	2300      	movs	r3, #0
  40da40:	75fb      	strb	r3, [r7, #23]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);
  40da42:	79fb      	ldrb	r3, [r7, #7]
  40da44:	4a14      	ldr	r2, [pc, #80]	; (40da98 <drv_gpio_enable_interrupt+0x64>)
  40da46:	011b      	lsls	r3, r3, #4
  40da48:	4413      	add	r3, r2
  40da4a:	681b      	ldr	r3, [r3, #0]
  40da4c:	4618      	mov	r0, r3
  40da4e:	4b13      	ldr	r3, [pc, #76]	; (40da9c <drv_gpio_enable_interrupt+0x68>)
  40da50:	4798      	blx	r3
  40da52:	6138      	str	r0, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);
  40da54:	79fb      	ldrb	r3, [r7, #7]
  40da56:	4a10      	ldr	r2, [pc, #64]	; (40da98 <drv_gpio_enable_interrupt+0x64>)
  40da58:	011b      	lsls	r3, r3, #4
  40da5a:	4413      	add	r3, r2
  40da5c:	681b      	ldr	r3, [r3, #0]
  40da5e:	4618      	mov	r0, r3
  40da60:	4b0f      	ldr	r3, [pc, #60]	; (40daa0 <drv_gpio_enable_interrupt+0x6c>)
  40da62:	4798      	blx	r3
  40da64:	60f8      	str	r0, [r7, #12]
	pio_enable_interrupt(p_pio, PinMask);
  40da66:	68f8      	ldr	r0, [r7, #12]
  40da68:	6939      	ldr	r1, [r7, #16]
  40da6a:	4b0e      	ldr	r3, [pc, #56]	; (40daa4 <drv_gpio_enable_interrupt+0x70>)
  40da6c:	4798      	blx	r3
	if (p_pio == PIOA)
  40da6e:	68fa      	ldr	r2, [r7, #12]
  40da70:	4b0d      	ldr	r3, [pc, #52]	; (40daa8 <drv_gpio_enable_interrupt+0x74>)
  40da72:	429a      	cmp	r2, r3
  40da74:	d103      	bne.n	40da7e <drv_gpio_enable_interrupt+0x4a>
	{
		NVIC_EnableIRQ(PIOA_IRQn);
  40da76:	200b      	movs	r0, #11
  40da78:	4b0c      	ldr	r3, [pc, #48]	; (40daac <drv_gpio_enable_interrupt+0x78>)
  40da7a:	4798      	blx	r3
  40da7c:	e006      	b.n	40da8c <drv_gpio_enable_interrupt+0x58>
	}
	else if (p_pio == PIOB)
  40da7e:	68fa      	ldr	r2, [r7, #12]
  40da80:	4b0b      	ldr	r3, [pc, #44]	; (40dab0 <drv_gpio_enable_interrupt+0x7c>)
  40da82:	429a      	cmp	r2, r3
  40da84:	d102      	bne.n	40da8c <drv_gpio_enable_interrupt+0x58>
	{
		NVIC_EnableIRQ(PIOB_IRQn);
  40da86:	200c      	movs	r0, #12
  40da88:	4b08      	ldr	r3, [pc, #32]	; (40daac <drv_gpio_enable_interrupt+0x78>)
  40da8a:	4798      	blx	r3
	}
	return status;
  40da8c:	7dfb      	ldrb	r3, [r7, #23]
}
  40da8e:	4618      	mov	r0, r3
  40da90:	3718      	adds	r7, #24
  40da92:	46bd      	mov	sp, r7
  40da94:	bd80      	pop	{r7, pc}
  40da96:	bf00      	nop
  40da98:	200005cc 	.word	0x200005cc
  40da9c:	00411929 	.word	0x00411929
  40daa0:	004118e1 	.word	0x004118e1
  40daa4:	004114e9 	.word	0x004114e9
  40daa8:	400e0e00 	.word	0x400e0e00
  40daac:	0040d479 	.word	0x0040d479
  40dab0:	400e1000 	.word	0x400e1000

0040dab4 <drv_gpio_disable_interrupt_all>:
 * @brief Disable interrupts on every gpio pin of every port
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_disable_interrupt_all(void)
{
  40dab4:	b580      	push	{r7, lr}
  40dab6:	b082      	sub	sp, #8
  40dab8:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40daba:	2300      	movs	r3, #0
  40dabc:	71fb      	strb	r3, [r7, #7]
	pio_disable_interrupt(PIOA, ALL_INTERRUPT_MASK);
  40dabe:	480a      	ldr	r0, [pc, #40]	; (40dae8 <drv_gpio_disable_interrupt_all+0x34>)
  40dac0:	f04f 31ff 	mov.w	r1, #4294967295
  40dac4:	4b09      	ldr	r3, [pc, #36]	; (40daec <drv_gpio_disable_interrupt_all+0x38>)
  40dac6:	4798      	blx	r3
	NVIC_DisableIRQ(PIOA_IRQn);
  40dac8:	200b      	movs	r0, #11
  40daca:	4b09      	ldr	r3, [pc, #36]	; (40daf0 <drv_gpio_disable_interrupt_all+0x3c>)
  40dacc:	4798      	blx	r3
	pio_disable_interrupt(PIOB, ALL_INTERRUPT_MASK);
  40dace:	4809      	ldr	r0, [pc, #36]	; (40daf4 <drv_gpio_disable_interrupt_all+0x40>)
  40dad0:	f04f 31ff 	mov.w	r1, #4294967295
  40dad4:	4b05      	ldr	r3, [pc, #20]	; (40daec <drv_gpio_disable_interrupt_all+0x38>)
  40dad6:	4798      	blx	r3
	NVIC_DisableIRQ(PIOB_IRQn);
  40dad8:	200c      	movs	r0, #12
  40dada:	4b05      	ldr	r3, [pc, #20]	; (40daf0 <drv_gpio_disable_interrupt_all+0x3c>)
  40dadc:	4798      	blx	r3
	return status;
  40dade:	79fb      	ldrb	r3, [r7, #7]
}
  40dae0:	4618      	mov	r0, r3
  40dae2:	3708      	adds	r7, #8
  40dae4:	46bd      	mov	sp, r7
  40dae6:	bd80      	pop	{r7, pc}
  40dae8:	400e0e00 	.word	0x400e0e00
  40daec:	00411509 	.word	0x00411509
  40daf0:	0040d4a9 	.word	0x0040d4a9
  40daf4:	400e1000 	.word	0x400e1000

0040daf8 <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  40daf8:	b580      	push	{r7, lr}
  40dafa:	b084      	sub	sp, #16
  40dafc:	af00      	add	r7, sp, #0
  40dafe:	6078      	str	r0, [r7, #4]
  40db00:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  40db02:	4b0d      	ldr	r3, [pc, #52]	; (40db38 <drv_gpio_int_pw+0x40>)
  40db04:	681b      	ldr	r3, [r3, #0]
  40db06:	4618      	mov	r0, r3
  40db08:	4b0c      	ldr	r3, [pc, #48]	; (40db3c <drv_gpio_int_pw+0x44>)
  40db0a:	4798      	blx	r3
  40db0c:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40db0e:	480c      	ldr	r0, [pc, #48]	; (40db40 <drv_gpio_int_pw+0x48>)
  40db10:	68f9      	ldr	r1, [r7, #12]
  40db12:	4b0c      	ldr	r3, [pc, #48]	; (40db44 <drv_gpio_int_pw+0x4c>)
  40db14:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40db16:	4b0a      	ldr	r3, [pc, #40]	; (40db40 <drv_gpio_int_pw+0x48>)
  40db18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40db1a:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40db1c:	68fa      	ldr	r2, [r7, #12]
  40db1e:	683b      	ldr	r3, [r7, #0]
  40db20:	429a      	cmp	r2, r3
  40db22:	d102      	bne.n	40db2a <drv_gpio_int_pw+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_PW_SW].gpioSetFlag = 1;
  40db24:	4b04      	ldr	r3, [pc, #16]	; (40db38 <drv_gpio_int_pw+0x40>)
  40db26:	2201      	movs	r2, #1
  40db28:	739a      	strb	r2, [r3, #14]
	}
	pio_enable_interrupt(PIOA, PinMask);
  40db2a:	4805      	ldr	r0, [pc, #20]	; (40db40 <drv_gpio_int_pw+0x48>)
  40db2c:	68f9      	ldr	r1, [r7, #12]
  40db2e:	4b06      	ldr	r3, [pc, #24]	; (40db48 <drv_gpio_int_pw+0x50>)
  40db30:	4798      	blx	r3
}
  40db32:	3710      	adds	r7, #16
  40db34:	46bd      	mov	sp, r7
  40db36:	bd80      	pop	{r7, pc}
  40db38:	200005cc 	.word	0x200005cc
  40db3c:	00411929 	.word	0x00411929
  40db40:	400e0e00 	.word	0x400e0e00
  40db44:	00411509 	.word	0x00411509
  40db48:	004114e9 	.word	0x004114e9

0040db4c <drv_gpio_int_sw1>:
 * @brief Interrupt routine for Action Switch-1
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
  40db4c:	b580      	push	{r7, lr}
  40db4e:	b084      	sub	sp, #16
  40db50:	af00      	add	r7, sp, #0
  40db52:	6078      	str	r0, [r7, #4]
  40db54:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  40db56:	4b0d      	ldr	r3, [pc, #52]	; (40db8c <drv_gpio_int_sw1+0x40>)
  40db58:	691b      	ldr	r3, [r3, #16]
  40db5a:	4618      	mov	r0, r3
  40db5c:	4b0c      	ldr	r3, [pc, #48]	; (40db90 <drv_gpio_int_sw1+0x44>)
  40db5e:	4798      	blx	r3
  40db60:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40db62:	480c      	ldr	r0, [pc, #48]	; (40db94 <drv_gpio_int_sw1+0x48>)
  40db64:	68f9      	ldr	r1, [r7, #12]
  40db66:	4b0c      	ldr	r3, [pc, #48]	; (40db98 <drv_gpio_int_sw1+0x4c>)
  40db68:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40db6a:	4b0a      	ldr	r3, [pc, #40]	; (40db94 <drv_gpio_int_sw1+0x48>)
  40db6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40db6e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40db70:	68fa      	ldr	r2, [r7, #12]
  40db72:	683b      	ldr	r3, [r7, #0]
  40db74:	429a      	cmp	r2, r3
  40db76:	d102      	bne.n	40db7e <drv_gpio_int_sw1+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW1].gpioSetFlag = 1;
  40db78:	4b04      	ldr	r3, [pc, #16]	; (40db8c <drv_gpio_int_sw1+0x40>)
  40db7a:	2201      	movs	r2, #1
  40db7c:	779a      	strb	r2, [r3, #30]
	}
	pio_enable_interrupt(PIOA, PinMask);
  40db7e:	4805      	ldr	r0, [pc, #20]	; (40db94 <drv_gpio_int_sw1+0x48>)
  40db80:	68f9      	ldr	r1, [r7, #12]
  40db82:	4b06      	ldr	r3, [pc, #24]	; (40db9c <drv_gpio_int_sw1+0x50>)
  40db84:	4798      	blx	r3
}
  40db86:	3710      	adds	r7, #16
  40db88:	46bd      	mov	sp, r7
  40db8a:	bd80      	pop	{r7, pc}
  40db8c:	200005cc 	.word	0x200005cc
  40db90:	00411929 	.word	0x00411929
  40db94:	400e0e00 	.word	0x400e0e00
  40db98:	00411509 	.word	0x00411509
  40db9c:	004114e9 	.word	0x004114e9

0040dba0 <drv_gpio_int_sw2>:
 * @brief Interrupt routine for Action Switch-2
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
  40dba0:	b580      	push	{r7, lr}
  40dba2:	b084      	sub	sp, #16
  40dba4:	af00      	add	r7, sp, #0
  40dba6:	6078      	str	r0, [r7, #4]
  40dba8:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  40dbaa:	4b0e      	ldr	r3, [pc, #56]	; (40dbe4 <drv_gpio_int_sw2+0x44>)
  40dbac:	6a1b      	ldr	r3, [r3, #32]
  40dbae:	4618      	mov	r0, r3
  40dbb0:	4b0d      	ldr	r3, [pc, #52]	; (40dbe8 <drv_gpio_int_sw2+0x48>)
  40dbb2:	4798      	blx	r3
  40dbb4:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40dbb6:	480d      	ldr	r0, [pc, #52]	; (40dbec <drv_gpio_int_sw2+0x4c>)
  40dbb8:	68f9      	ldr	r1, [r7, #12]
  40dbba:	4b0d      	ldr	r3, [pc, #52]	; (40dbf0 <drv_gpio_int_sw2+0x50>)
  40dbbc:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40dbbe:	4b0b      	ldr	r3, [pc, #44]	; (40dbec <drv_gpio_int_sw2+0x4c>)
  40dbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40dbc2:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40dbc4:	68fa      	ldr	r2, [r7, #12]
  40dbc6:	683b      	ldr	r3, [r7, #0]
  40dbc8:	429a      	cmp	r2, r3
  40dbca:	d103      	bne.n	40dbd4 <drv_gpio_int_sw2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW2].gpioSetFlag = 1;
  40dbcc:	4b05      	ldr	r3, [pc, #20]	; (40dbe4 <drv_gpio_int_sw2+0x44>)
  40dbce:	2201      	movs	r2, #1
  40dbd0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40dbd4:	4805      	ldr	r0, [pc, #20]	; (40dbec <drv_gpio_int_sw2+0x4c>)
  40dbd6:	68f9      	ldr	r1, [r7, #12]
  40dbd8:	4b06      	ldr	r3, [pc, #24]	; (40dbf4 <drv_gpio_int_sw2+0x54>)
  40dbda:	4798      	blx	r3
}
  40dbdc:	3710      	adds	r7, #16
  40dbde:	46bd      	mov	sp, r7
  40dbe0:	bd80      	pop	{r7, pc}
  40dbe2:	bf00      	nop
  40dbe4:	200005cc 	.word	0x200005cc
  40dbe8:	00411929 	.word	0x00411929
  40dbec:	400e0e00 	.word	0x400e0e00
  40dbf0:	00411509 	.word	0x00411509
  40dbf4:	004114e9 	.word	0x004114e9

0040dbf8 <drv_gpio_int_lbo>:
 * @brief Interrupt routine for Low Battery Out
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
  40dbf8:	b580      	push	{r7, lr}
  40dbfa:	b084      	sub	sp, #16
  40dbfc:	af00      	add	r7, sp, #0
  40dbfe:	6078      	str	r0, [r7, #4]
  40dc00:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  40dc02:	4b0e      	ldr	r3, [pc, #56]	; (40dc3c <drv_gpio_int_lbo+0x44>)
  40dc04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
  40dc08:	4618      	mov	r0, r3
  40dc0a:	4b0d      	ldr	r3, [pc, #52]	; (40dc40 <drv_gpio_int_lbo+0x48>)
  40dc0c:	4798      	blx	r3
  40dc0e:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40dc10:	480c      	ldr	r0, [pc, #48]	; (40dc44 <drv_gpio_int_lbo+0x4c>)
  40dc12:	68f9      	ldr	r1, [r7, #12]
  40dc14:	4b0c      	ldr	r3, [pc, #48]	; (40dc48 <drv_gpio_int_lbo+0x50>)
  40dc16:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40dc18:	4b0a      	ldr	r3, [pc, #40]	; (40dc44 <drv_gpio_int_lbo+0x4c>)
  40dc1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40dc1c:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40dc1e:	68fa      	ldr	r2, [r7, #12]
  40dc20:	683b      	ldr	r3, [r7, #0]
  40dc22:	429a      	cmp	r2, r3
  40dc24:	d103      	bne.n	40dc2e <drv_gpio_int_lbo+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_LBO].gpioSetFlag = 1;
  40dc26:	4b05      	ldr	r3, [pc, #20]	; (40dc3c <drv_gpio_int_lbo+0x44>)
  40dc28:	2201      	movs	r2, #1
  40dc2a:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	}
	pio_enable_interrupt(PIOA, PinMask);
  40dc2e:	4805      	ldr	r0, [pc, #20]	; (40dc44 <drv_gpio_int_lbo+0x4c>)
  40dc30:	68f9      	ldr	r1, [r7, #12]
  40dc32:	4b06      	ldr	r3, [pc, #24]	; (40dc4c <drv_gpio_int_lbo+0x54>)
  40dc34:	4798      	blx	r3
}
  40dc36:	3710      	adds	r7, #16
  40dc38:	46bd      	mov	sp, r7
  40dc3a:	bd80      	pop	{r7, pc}
  40dc3c:	200005cc 	.word	0x200005cc
  40dc40:	00411929 	.word	0x00411929
  40dc44:	400e0e00 	.word	0x400e0e00
  40dc48:	00411509 	.word	0x00411509
  40dc4c:	004114e9 	.word	0x004114e9

0040dc50 <drv_gpio_int_cd>:
 * @brief Interrupt routine for SD Card Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
  40dc50:	b580      	push	{r7, lr}
  40dc52:	b084      	sub	sp, #16
  40dc54:	af00      	add	r7, sp, #0
  40dc56:	6078      	str	r0, [r7, #4]
  40dc58:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  40dc5a:	4b0e      	ldr	r3, [pc, #56]	; (40dc94 <drv_gpio_int_cd+0x44>)
  40dc5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
  40dc60:	4618      	mov	r0, r3
  40dc62:	4b0d      	ldr	r3, [pc, #52]	; (40dc98 <drv_gpio_int_cd+0x48>)
  40dc64:	4798      	blx	r3
  40dc66:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOB, PinMask);
  40dc68:	480c      	ldr	r0, [pc, #48]	; (40dc9c <drv_gpio_int_cd+0x4c>)
  40dc6a:	68f9      	ldr	r1, [r7, #12]
  40dc6c:	4b0c      	ldr	r3, [pc, #48]	; (40dca0 <drv_gpio_int_cd+0x50>)
  40dc6e:	4798      	blx	r3
	uint32_t ReadIsr = PIOB->PIO_ISR;
  40dc70:	4b0a      	ldr	r3, [pc, #40]	; (40dc9c <drv_gpio_int_cd+0x4c>)
  40dc72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40dc74:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40dc76:	68fa      	ldr	r2, [r7, #12]
  40dc78:	683b      	ldr	r3, [r7, #0]
  40dc7a:	429a      	cmp	r2, r3
  40dc7c:	d103      	bne.n	40dc86 <drv_gpio_int_cd+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_SD_CD].gpioSetFlag = 1;
  40dc7e:	4b05      	ldr	r3, [pc, #20]	; (40dc94 <drv_gpio_int_cd+0x44>)
  40dc80:	2201      	movs	r2, #1
  40dc82:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	}
	pio_enable_interrupt(PIOB, PinMask);
  40dc86:	4805      	ldr	r0, [pc, #20]	; (40dc9c <drv_gpio_int_cd+0x4c>)
  40dc88:	68f9      	ldr	r1, [r7, #12]
  40dc8a:	4b06      	ldr	r3, [pc, #24]	; (40dca4 <drv_gpio_int_cd+0x54>)
  40dc8c:	4798      	blx	r3
}
  40dc8e:	3710      	adds	r7, #16
  40dc90:	46bd      	mov	sp, r7
  40dc92:	bd80      	pop	{r7, pc}
  40dc94:	200005cc 	.word	0x200005cc
  40dc98:	00411929 	.word	0x00411929
  40dc9c:	400e1000 	.word	0x400e1000
  40dca0:	00411509 	.word	0x00411509
  40dca4:	004114e9 	.word	0x004114e9

0040dca8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40dca8:	b480      	push	{r7}
  40dcaa:	b083      	sub	sp, #12
  40dcac:	af00      	add	r7, sp, #0
  40dcae:	4603      	mov	r3, r0
  40dcb0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40dcb2:	4b08      	ldr	r3, [pc, #32]	; (40dcd4 <NVIC_EnableIRQ+0x2c>)
  40dcb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40dcb8:	0952      	lsrs	r2, r2, #5
  40dcba:	79f9      	ldrb	r1, [r7, #7]
  40dcbc:	f001 011f 	and.w	r1, r1, #31
  40dcc0:	2001      	movs	r0, #1
  40dcc2:	fa00 f101 	lsl.w	r1, r0, r1
  40dcc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40dcca:	370c      	adds	r7, #12
  40dccc:	46bd      	mov	sp, r7
  40dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dcd2:	4770      	bx	lr
  40dcd4:	e000e100 	.word	0xe000e100

0040dcd8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40dcd8:	b480      	push	{r7}
  40dcda:	b083      	sub	sp, #12
  40dcdc:	af00      	add	r7, sp, #0
  40dcde:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40dce0:	687b      	ldr	r3, [r7, #4]
  40dce2:	2b07      	cmp	r3, #7
  40dce4:	d825      	bhi.n	40dd32 <osc_get_rate+0x5a>
  40dce6:	a201      	add	r2, pc, #4	; (adr r2, 40dcec <osc_get_rate+0x14>)
  40dce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40dcec:	0040dd0d 	.word	0x0040dd0d
  40dcf0:	0040dd13 	.word	0x0040dd13
  40dcf4:	0040dd19 	.word	0x0040dd19
  40dcf8:	0040dd1f 	.word	0x0040dd1f
  40dcfc:	0040dd23 	.word	0x0040dd23
  40dd00:	0040dd27 	.word	0x0040dd27
  40dd04:	0040dd2b 	.word	0x0040dd2b
  40dd08:	0040dd2f 	.word	0x0040dd2f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40dd0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40dd10:	e010      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40dd12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40dd16:	e00d      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40dd18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40dd1c:	e00a      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40dd1e:	4b08      	ldr	r3, [pc, #32]	; (40dd40 <osc_get_rate+0x68>)
  40dd20:	e008      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40dd22:	4b08      	ldr	r3, [pc, #32]	; (40dd44 <osc_get_rate+0x6c>)
  40dd24:	e006      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40dd26:	4b08      	ldr	r3, [pc, #32]	; (40dd48 <osc_get_rate+0x70>)
  40dd28:	e004      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40dd2a:	4b08      	ldr	r3, [pc, #32]	; (40dd4c <osc_get_rate+0x74>)
  40dd2c:	e002      	b.n	40dd34 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40dd2e:	4b07      	ldr	r3, [pc, #28]	; (40dd4c <osc_get_rate+0x74>)
  40dd30:	e000      	b.n	40dd34 <osc_get_rate+0x5c>
	}

	return 0;
  40dd32:	2300      	movs	r3, #0
}
  40dd34:	4618      	mov	r0, r3
  40dd36:	370c      	adds	r7, #12
  40dd38:	46bd      	mov	sp, r7
  40dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dd3e:	4770      	bx	lr
  40dd40:	003d0900 	.word	0x003d0900
  40dd44:	007a1200 	.word	0x007a1200
  40dd48:	00b71b00 	.word	0x00b71b00
  40dd4c:	00f42400 	.word	0x00f42400

0040dd50 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40dd50:	b580      	push	{r7, lr}
  40dd52:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40dd54:	2006      	movs	r0, #6
  40dd56:	4b04      	ldr	r3, [pc, #16]	; (40dd68 <sysclk_get_main_hz+0x18>)
  40dd58:	4798      	blx	r3
  40dd5a:	4602      	mov	r2, r0
  40dd5c:	4613      	mov	r3, r2
  40dd5e:	011b      	lsls	r3, r3, #4
  40dd60:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40dd62:	4618      	mov	r0, r3
  40dd64:	bd80      	pop	{r7, pc}
  40dd66:	bf00      	nop
  40dd68:	0040dcd9 	.word	0x0040dcd9

0040dd6c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40dd6c:	b580      	push	{r7, lr}
  40dd6e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40dd70:	4b02      	ldr	r3, [pc, #8]	; (40dd7c <sysclk_get_peripheral_hz+0x10>)
  40dd72:	4798      	blx	r3
  40dd74:	4603      	mov	r3, r0
  40dd76:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40dd78:	4618      	mov	r0, r3
  40dd7a:	bd80      	pop	{r7, pc}
  40dd7c:	0040dd51 	.word	0x0040dd51

0040dd80 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40dd80:	b580      	push	{r7, lr}
  40dd82:	b082      	sub	sp, #8
  40dd84:	af00      	add	r7, sp, #0
  40dd86:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40dd88:	6878      	ldr	r0, [r7, #4]
  40dd8a:	4b02      	ldr	r3, [pc, #8]	; (40dd94 <sysclk_enable_peripheral_clock+0x14>)
  40dd8c:	4798      	blx	r3
}
  40dd8e:	3708      	adds	r7, #8
  40dd90:	46bd      	mov	sp, r7
  40dd92:	bd80      	pop	{r7, pc}
  40dd94:	00411d0d 	.word	0x00411d0d

0040dd98 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40dd98:	b580      	push	{r7, lr}
  40dd9a:	b08c      	sub	sp, #48	; 0x30
  40dd9c:	af00      	add	r7, sp, #0
  40dd9e:	6078      	str	r0, [r7, #4]
  40dda0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40dda2:	4b31      	ldr	r3, [pc, #196]	; (40de68 <usart_serial_init+0xd0>)
  40dda4:	4798      	blx	r3
  40dda6:	4603      	mov	r3, r0
  40dda8:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40ddaa:	683b      	ldr	r3, [r7, #0]
  40ddac:	681b      	ldr	r3, [r3, #0]
  40ddae:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40ddb0:	683b      	ldr	r3, [r7, #0]
  40ddb2:	689b      	ldr	r3, [r3, #8]
  40ddb4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40ddb6:	683b      	ldr	r3, [r7, #0]
  40ddb8:	681b      	ldr	r3, [r3, #0]
  40ddba:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40ddbc:	683b      	ldr	r3, [r7, #0]
  40ddbe:	685b      	ldr	r3, [r3, #4]
  40ddc0:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40ddc2:	683b      	ldr	r3, [r7, #0]
  40ddc4:	689b      	ldr	r3, [r3, #8]
  40ddc6:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40ddc8:	683b      	ldr	r3, [r7, #0]
  40ddca:	7b1b      	ldrb	r3, [r3, #12]
  40ddcc:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40ddce:	2300      	movs	r3, #0
  40ddd0:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40ddd2:	687a      	ldr	r2, [r7, #4]
  40ddd4:	4b25      	ldr	r3, [pc, #148]	; (40de6c <usart_serial_init+0xd4>)
  40ddd6:	429a      	cmp	r2, r3
  40ddd8:	d108      	bne.n	40ddec <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40ddda:	2008      	movs	r0, #8
  40dddc:	4b24      	ldr	r3, [pc, #144]	; (40de70 <usart_serial_init+0xd8>)
  40ddde:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40dde0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40dde4:	6878      	ldr	r0, [r7, #4]
  40dde6:	4619      	mov	r1, r3
  40dde8:	4b22      	ldr	r3, [pc, #136]	; (40de74 <usart_serial_init+0xdc>)
  40ddea:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40ddec:	687a      	ldr	r2, [r7, #4]
  40ddee:	4b22      	ldr	r3, [pc, #136]	; (40de78 <usart_serial_init+0xe0>)
  40ddf0:	429a      	cmp	r2, r3
  40ddf2:	d108      	bne.n	40de06 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40ddf4:	2009      	movs	r0, #9
  40ddf6:	4b1e      	ldr	r3, [pc, #120]	; (40de70 <usart_serial_init+0xd8>)
  40ddf8:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40ddfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40ddfe:	6878      	ldr	r0, [r7, #4]
  40de00:	4619      	mov	r1, r3
  40de02:	4b1c      	ldr	r3, [pc, #112]	; (40de74 <usart_serial_init+0xdc>)
  40de04:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40de06:	687a      	ldr	r2, [r7, #4]
  40de08:	4b1c      	ldr	r3, [pc, #112]	; (40de7c <usart_serial_init+0xe4>)
  40de0a:	429a      	cmp	r2, r3
  40de0c:	d112      	bne.n	40de34 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40de0e:	200e      	movs	r0, #14
  40de10:	4b17      	ldr	r3, [pc, #92]	; (40de70 <usart_serial_init+0xd8>)
  40de12:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40de14:	4b14      	ldr	r3, [pc, #80]	; (40de68 <usart_serial_init+0xd0>)
  40de16:	4798      	blx	r3
  40de18:	4603      	mov	r3, r0
  40de1a:	f107 020c 	add.w	r2, r7, #12
  40de1e:	6878      	ldr	r0, [r7, #4]
  40de20:	4611      	mov	r1, r2
  40de22:	461a      	mov	r2, r3
  40de24:	4b16      	ldr	r3, [pc, #88]	; (40de80 <usart_serial_init+0xe8>)
  40de26:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40de28:	6878      	ldr	r0, [r7, #4]
  40de2a:	4b16      	ldr	r3, [pc, #88]	; (40de84 <usart_serial_init+0xec>)
  40de2c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40de2e:	6878      	ldr	r0, [r7, #4]
  40de30:	4b15      	ldr	r3, [pc, #84]	; (40de88 <usart_serial_init+0xf0>)
  40de32:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40de34:	687a      	ldr	r2, [r7, #4]
  40de36:	4b15      	ldr	r3, [pc, #84]	; (40de8c <usart_serial_init+0xf4>)
  40de38:	429a      	cmp	r2, r3
  40de3a:	d112      	bne.n	40de62 <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40de3c:	200f      	movs	r0, #15
  40de3e:	4b0c      	ldr	r3, [pc, #48]	; (40de70 <usart_serial_init+0xd8>)
  40de40:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40de42:	4b09      	ldr	r3, [pc, #36]	; (40de68 <usart_serial_init+0xd0>)
  40de44:	4798      	blx	r3
  40de46:	4603      	mov	r3, r0
  40de48:	f107 020c 	add.w	r2, r7, #12
  40de4c:	6878      	ldr	r0, [r7, #4]
  40de4e:	4611      	mov	r1, r2
  40de50:	461a      	mov	r2, r3
  40de52:	4b0b      	ldr	r3, [pc, #44]	; (40de80 <usart_serial_init+0xe8>)
  40de54:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40de56:	6878      	ldr	r0, [r7, #4]
  40de58:	4b0a      	ldr	r3, [pc, #40]	; (40de84 <usart_serial_init+0xec>)
  40de5a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40de5c:	6878      	ldr	r0, [r7, #4]
  40de5e:	4b0a      	ldr	r3, [pc, #40]	; (40de88 <usart_serial_init+0xf0>)
  40de60:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40de62:	3730      	adds	r7, #48	; 0x30
  40de64:	46bd      	mov	sp, r7
  40de66:	bd80      	pop	{r7, pc}
  40de68:	0040dd6d 	.word	0x0040dd6d
  40de6c:	400e0600 	.word	0x400e0600
  40de70:	0040dd81 	.word	0x0040dd81
  40de74:	00405ce1 	.word	0x00405ce1
  40de78:	400e0800 	.word	0x400e0800
  40de7c:	40024000 	.word	0x40024000
  40de80:	00405ec5 	.word	0x00405ec5
  40de84:	00405f49 	.word	0x00405f49
  40de88:	00405f79 	.word	0x00405f79
  40de8c:	40028000 	.word	0x40028000

0040de90 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40de90:	b580      	push	{r7, lr}
  40de92:	b082      	sub	sp, #8
  40de94:	af00      	add	r7, sp, #0
  40de96:	6078      	str	r0, [r7, #4]
  40de98:	460b      	mov	r3, r1
  40de9a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40de9c:	687a      	ldr	r2, [r7, #4]
  40de9e:	4b20      	ldr	r3, [pc, #128]	; (40df20 <usart_serial_putchar+0x90>)
  40dea0:	429a      	cmp	r2, r3
  40dea2:	d10a      	bne.n	40deba <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40dea4:	bf00      	nop
  40dea6:	78fb      	ldrb	r3, [r7, #3]
  40dea8:	6878      	ldr	r0, [r7, #4]
  40deaa:	4619      	mov	r1, r3
  40deac:	4b1d      	ldr	r3, [pc, #116]	; (40df24 <usart_serial_putchar+0x94>)
  40deae:	4798      	blx	r3
  40deb0:	4603      	mov	r3, r0
  40deb2:	2b00      	cmp	r3, #0
  40deb4:	d1f7      	bne.n	40dea6 <usart_serial_putchar+0x16>
		return 1;
  40deb6:	2301      	movs	r3, #1
  40deb8:	e02d      	b.n	40df16 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40deba:	687a      	ldr	r2, [r7, #4]
  40debc:	4b1a      	ldr	r3, [pc, #104]	; (40df28 <usart_serial_putchar+0x98>)
  40debe:	429a      	cmp	r2, r3
  40dec0:	d10a      	bne.n	40ded8 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40dec2:	bf00      	nop
  40dec4:	78fb      	ldrb	r3, [r7, #3]
  40dec6:	6878      	ldr	r0, [r7, #4]
  40dec8:	4619      	mov	r1, r3
  40deca:	4b16      	ldr	r3, [pc, #88]	; (40df24 <usart_serial_putchar+0x94>)
  40decc:	4798      	blx	r3
  40dece:	4603      	mov	r3, r0
  40ded0:	2b00      	cmp	r3, #0
  40ded2:	d1f7      	bne.n	40dec4 <usart_serial_putchar+0x34>
		return 1;
  40ded4:	2301      	movs	r3, #1
  40ded6:	e01e      	b.n	40df16 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40ded8:	687a      	ldr	r2, [r7, #4]
  40deda:	4b14      	ldr	r3, [pc, #80]	; (40df2c <usart_serial_putchar+0x9c>)
  40dedc:	429a      	cmp	r2, r3
  40dede:	d10a      	bne.n	40def6 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40dee0:	bf00      	nop
  40dee2:	78fb      	ldrb	r3, [r7, #3]
  40dee4:	6878      	ldr	r0, [r7, #4]
  40dee6:	4619      	mov	r1, r3
  40dee8:	4b11      	ldr	r3, [pc, #68]	; (40df30 <usart_serial_putchar+0xa0>)
  40deea:	4798      	blx	r3
  40deec:	4603      	mov	r3, r0
  40deee:	2b00      	cmp	r3, #0
  40def0:	d1f7      	bne.n	40dee2 <usart_serial_putchar+0x52>
		return 1;
  40def2:	2301      	movs	r3, #1
  40def4:	e00f      	b.n	40df16 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40def6:	687a      	ldr	r2, [r7, #4]
  40def8:	4b0e      	ldr	r3, [pc, #56]	; (40df34 <usart_serial_putchar+0xa4>)
  40defa:	429a      	cmp	r2, r3
  40defc:	d10a      	bne.n	40df14 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40defe:	bf00      	nop
  40df00:	78fb      	ldrb	r3, [r7, #3]
  40df02:	6878      	ldr	r0, [r7, #4]
  40df04:	4619      	mov	r1, r3
  40df06:	4b0a      	ldr	r3, [pc, #40]	; (40df30 <usart_serial_putchar+0xa0>)
  40df08:	4798      	blx	r3
  40df0a:	4603      	mov	r3, r0
  40df0c:	2b00      	cmp	r3, #0
  40df0e:	d1f7      	bne.n	40df00 <usart_serial_putchar+0x70>
		return 1;
  40df10:	2301      	movs	r3, #1
  40df12:	e000      	b.n	40df16 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40df14:	2300      	movs	r3, #0
}
  40df16:	4618      	mov	r0, r3
  40df18:	3708      	adds	r7, #8
  40df1a:	46bd      	mov	sp, r7
  40df1c:	bd80      	pop	{r7, pc}
  40df1e:	bf00      	nop
  40df20:	400e0600 	.word	0x400e0600
  40df24:	00405d79 	.word	0x00405d79
  40df28:	400e0800 	.word	0x400e0800
  40df2c:	40024000 	.word	0x40024000
  40df30:	00406035 	.word	0x00406035
  40df34:	40028000 	.word	0x40028000

0040df38 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  40df38:	b580      	push	{r7, lr}
  40df3a:	b084      	sub	sp, #16
  40df3c:	af00      	add	r7, sp, #0
  40df3e:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40df40:	2300      	movs	r3, #0
  40df42:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  40df44:	687b      	ldr	r3, [r7, #4]
  40df46:	681a      	ldr	r2, [r3, #0]
  40df48:	4b7a      	ldr	r3, [pc, #488]	; (40e134 <drv_uart_init+0x1fc>)
  40df4a:	429a      	cmp	r2, r3
  40df4c:	d103      	bne.n	40df56 <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  40df4e:	687b      	ldr	r3, [r7, #4]
  40df50:	2200      	movs	r2, #0
  40df52:	615a      	str	r2, [r3, #20]
  40df54:	e01c      	b.n	40df90 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == UART1)
  40df56:	687b      	ldr	r3, [r7, #4]
  40df58:	681a      	ldr	r2, [r3, #0]
  40df5a:	4b77      	ldr	r3, [pc, #476]	; (40e138 <drv_uart_init+0x200>)
  40df5c:	429a      	cmp	r2, r3
  40df5e:	d103      	bne.n	40df68 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  40df60:	687b      	ldr	r3, [r7, #4]
  40df62:	2201      	movs	r2, #1
  40df64:	615a      	str	r2, [r3, #20]
  40df66:	e013      	b.n	40df90 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART0)
  40df68:	687b      	ldr	r3, [r7, #4]
  40df6a:	681a      	ldr	r2, [r3, #0]
  40df6c:	4b73      	ldr	r3, [pc, #460]	; (40e13c <drv_uart_init+0x204>)
  40df6e:	429a      	cmp	r2, r3
  40df70:	d103      	bne.n	40df7a <drv_uart_init+0x42>
	{	
		uartConfig->mem_index = 2;
  40df72:	687b      	ldr	r3, [r7, #4]
  40df74:	2202      	movs	r2, #2
  40df76:	615a      	str	r2, [r3, #20]
  40df78:	e00a      	b.n	40df90 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART1)
  40df7a:	687b      	ldr	r3, [r7, #4]
  40df7c:	681a      	ldr	r2, [r3, #0]
  40df7e:	4b70      	ldr	r3, [pc, #448]	; (40e140 <drv_uart_init+0x208>)
  40df80:	429a      	cmp	r2, r3
  40df82:	d103      	bne.n	40df8c <drv_uart_init+0x54>
	{

		uartConfig->mem_index = 3;
  40df84:	687b      	ldr	r3, [r7, #4]
  40df86:	2203      	movs	r2, #3
  40df88:	615a      	str	r2, [r3, #20]
  40df8a:	e001      	b.n	40df90 <drv_uart_init+0x58>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40df8c:	2301      	movs	r3, #1
  40df8e:	e1a9      	b.n	40e2e4 <drv_uart_init+0x3ac>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 4)
  40df90:	687b      	ldr	r3, [r7, #4]
  40df92:	695b      	ldr	r3, [r3, #20]
  40df94:	2b00      	cmp	r3, #0
  40df96:	db03      	blt.n	40dfa0 <drv_uart_init+0x68>
  40df98:	687b      	ldr	r3, [r7, #4]
  40df9a:	695b      	ldr	r3, [r3, #20]
  40df9c:	2b04      	cmp	r3, #4
  40df9e:	dd01      	ble.n	40dfa4 <drv_uart_init+0x6c>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  40dfa0:	2301      	movs	r3, #1
  40dfa2:	e19f      	b.n	40e2e4 <drv_uart_init+0x3ac>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40dfa4:	687b      	ldr	r3, [r7, #4]
  40dfa6:	695a      	ldr	r2, [r3, #20]
  40dfa8:	4966      	ldr	r1, [pc, #408]	; (40e144 <drv_uart_init+0x20c>)
  40dfaa:	4613      	mov	r3, r2
  40dfac:	015b      	lsls	r3, r3, #5
  40dfae:	4413      	add	r3, r2
  40dfb0:	015b      	lsls	r3, r3, #5
  40dfb2:	440b      	add	r3, r1
  40dfb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40dfb8:	799b      	ldrb	r3, [r3, #6]
  40dfba:	b2db      	uxtb	r3, r3
  40dfbc:	2b01      	cmp	r3, #1
  40dfbe:	d101      	bne.n	40dfc4 <drv_uart_init+0x8c>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  40dfc0:	2301      	movs	r3, #1
  40dfc2:	e18f      	b.n	40e2e4 <drv_uart_init+0x3ac>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  40dfc4:	687b      	ldr	r3, [r7, #4]
  40dfc6:	681a      	ldr	r2, [r3, #0]
  40dfc8:	687b      	ldr	r3, [r7, #4]
  40dfca:	3304      	adds	r3, #4
  40dfcc:	4610      	mov	r0, r2
  40dfce:	4619      	mov	r1, r3
  40dfd0:	4b5d      	ldr	r3, [pc, #372]	; (40e148 <drv_uart_init+0x210>)
  40dfd2:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40dfd4:	687b      	ldr	r3, [r7, #4]
  40dfd6:	681b      	ldr	r3, [r3, #0]
  40dfd8:	4618      	mov	r0, r3
  40dfda:	f04f 31ff 	mov.w	r1, #4294967295
  40dfde:	4b5b      	ldr	r3, [pc, #364]	; (40e14c <drv_uart_init+0x214>)
  40dfe0:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  40dfe2:	687b      	ldr	r3, [r7, #4]
  40dfe4:	681a      	ldr	r2, [r3, #0]
  40dfe6:	4b53      	ldr	r3, [pc, #332]	; (40e134 <drv_uart_init+0x1fc>)
  40dfe8:	429a      	cmp	r2, r3
  40dfea:	d11e      	bne.n	40e02a <drv_uart_init+0xf2>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  40dfec:	200b      	movs	r0, #11
  40dfee:	4b58      	ldr	r3, [pc, #352]	; (40e150 <drv_uart_init+0x218>)
  40dff0:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40dff2:	4b58      	ldr	r3, [pc, #352]	; (40e154 <drv_uart_init+0x21c>)
  40dff4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40dff8:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40dffa:	4b56      	ldr	r3, [pc, #344]	; (40e154 <drv_uart_init+0x21c>)
  40dffc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40e000:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40e002:	4b54      	ldr	r3, [pc, #336]	; (40e154 <drv_uart_init+0x21c>)
  40e004:	4a53      	ldr	r2, [pc, #332]	; (40e154 <drv_uart_init+0x21c>)
  40e006:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40e008:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  40e00c:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40e00e:	4b51      	ldr	r3, [pc, #324]	; (40e154 <drv_uart_init+0x21c>)
  40e010:	4a50      	ldr	r2, [pc, #320]	; (40e154 <drv_uart_init+0x21c>)
  40e012:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40e014:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  40e018:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
  40e01a:	4b4e      	ldr	r3, [pc, #312]	; (40e154 <drv_uart_init+0x21c>)
  40e01c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40e020:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART0_IRQn);
  40e022:	2008      	movs	r0, #8
  40e024:	4b4c      	ldr	r3, [pc, #304]	; (40e158 <drv_uart_init+0x220>)
  40e026:	4798      	blx	r3
  40e028:	e09a      	b.n	40e160 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == UART1)
  40e02a:	687b      	ldr	r3, [r7, #4]
  40e02c:	681a      	ldr	r2, [r3, #0]
  40e02e:	4b42      	ldr	r3, [pc, #264]	; (40e138 <drv_uart_init+0x200>)
  40e030:	429a      	cmp	r2, r3
  40e032:	d11b      	bne.n	40e06c <drv_uart_init+0x134>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  40e034:	200c      	movs	r0, #12
  40e036:	4b46      	ldr	r3, [pc, #280]	; (40e150 <drv_uart_init+0x218>)
  40e038:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40e03a:	4b48      	ldr	r3, [pc, #288]	; (40e15c <drv_uart_init+0x224>)
  40e03c:	220c      	movs	r2, #12
  40e03e:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40e040:	4b46      	ldr	r3, [pc, #280]	; (40e15c <drv_uart_init+0x224>)
  40e042:	220c      	movs	r2, #12
  40e044:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40e046:	4b45      	ldr	r3, [pc, #276]	; (40e15c <drv_uart_init+0x224>)
  40e048:	4a44      	ldr	r2, [pc, #272]	; (40e15c <drv_uart_init+0x224>)
  40e04a:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40e04c:	f022 020c 	bic.w	r2, r2, #12
  40e050:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40e052:	4b42      	ldr	r3, [pc, #264]	; (40e15c <drv_uart_init+0x224>)
  40e054:	4a41      	ldr	r2, [pc, #260]	; (40e15c <drv_uart_init+0x224>)
  40e056:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40e058:	f022 020c 	bic.w	r2, r2, #12
  40e05c:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);			
  40e05e:	4b3f      	ldr	r3, [pc, #252]	; (40e15c <drv_uart_init+0x224>)
  40e060:	220c      	movs	r2, #12
  40e062:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART1_IRQn);
  40e064:	2009      	movs	r0, #9
  40e066:	4b3c      	ldr	r3, [pc, #240]	; (40e158 <drv_uart_init+0x220>)
  40e068:	4798      	blx	r3
  40e06a:	e079      	b.n	40e160 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART0)
  40e06c:	687b      	ldr	r3, [r7, #4]
  40e06e:	681a      	ldr	r2, [r3, #0]
  40e070:	4b32      	ldr	r3, [pc, #200]	; (40e13c <drv_uart_init+0x204>)
  40e072:	429a      	cmp	r2, r3
  40e074:	d127      	bne.n	40e0c6 <drv_uart_init+0x18e>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40e076:	200b      	movs	r0, #11
  40e078:	4b35      	ldr	r3, [pc, #212]	; (40e150 <drv_uart_init+0x218>)
  40e07a:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40e07c:	4b35      	ldr	r3, [pc, #212]	; (40e154 <drv_uart_init+0x21c>)
  40e07e:	2260      	movs	r2, #96	; 0x60
  40e080:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40e082:	4b34      	ldr	r3, [pc, #208]	; (40e154 <drv_uart_init+0x21c>)
  40e084:	2260      	movs	r2, #96	; 0x60
  40e086:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40e088:	4b32      	ldr	r3, [pc, #200]	; (40e154 <drv_uart_init+0x21c>)
  40e08a:	4a32      	ldr	r2, [pc, #200]	; (40e154 <drv_uart_init+0x21c>)
  40e08c:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40e08e:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40e092:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40e094:	4b2f      	ldr	r3, [pc, #188]	; (40e154 <drv_uart_init+0x21c>)
  40e096:	4a2f      	ldr	r2, [pc, #188]	; (40e154 <drv_uart_init+0x21c>)
  40e098:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40e09a:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40e09e:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40e0a0:	4b2c      	ldr	r3, [pc, #176]	; (40e154 <drv_uart_init+0x21c>)
  40e0a2:	2260      	movs	r2, #96	; 0x60
  40e0a4:	605a      	str	r2, [r3, #4]
	
		/* configure USART0 enable Pin (PA2) Peripheral-B */
		PIOA->PIO_PUDR   =  (PIO_PA2);
  40e0a6:	4b2b      	ldr	r3, [pc, #172]	; (40e154 <drv_uart_init+0x21c>)
  40e0a8:	2204      	movs	r2, #4
  40e0aa:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA2);
  40e0ac:	4b29      	ldr	r3, [pc, #164]	; (40e154 <drv_uart_init+0x21c>)
  40e0ae:	2204      	movs	r2, #4
  40e0b0:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA2);
  40e0b2:	4b28      	ldr	r3, [pc, #160]	; (40e154 <drv_uart_init+0x21c>)
  40e0b4:	2204      	movs	r2, #4
  40e0b6:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA2);	
  40e0b8:	4b26      	ldr	r3, [pc, #152]	; (40e154 <drv_uart_init+0x21c>)
  40e0ba:	2204      	movs	r2, #4
  40e0bc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART0_IRQn);
  40e0be:	200e      	movs	r0, #14
  40e0c0:	4b25      	ldr	r3, [pc, #148]	; (40e158 <drv_uart_init+0x220>)
  40e0c2:	4798      	blx	r3
  40e0c4:	e04c      	b.n	40e160 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART1)
  40e0c6:	687b      	ldr	r3, [r7, #4]
  40e0c8:	681a      	ldr	r2, [r3, #0]
  40e0ca:	4b1d      	ldr	r3, [pc, #116]	; (40e140 <drv_uart_init+0x208>)
  40e0cc:	429a      	cmp	r2, r3
  40e0ce:	d12e      	bne.n	40e12e <drv_uart_init+0x1f6>
	{		
		/* Configure USART1 Pins (PA22 = TX, PA21 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40e0d0:	200b      	movs	r0, #11
  40e0d2:	4b1f      	ldr	r3, [pc, #124]	; (40e150 <drv_uart_init+0x218>)
  40e0d4:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40e0d6:	4b1f      	ldr	r3, [pc, #124]	; (40e154 <drv_uart_init+0x21c>)
  40e0d8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40e0dc:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA21A_RXD1 |  PIO_PA22A_TXD1);
  40e0de:	4b1d      	ldr	r3, [pc, #116]	; (40e154 <drv_uart_init+0x21c>)
  40e0e0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40e0e4:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40e0e6:	4b1b      	ldr	r3, [pc, #108]	; (40e154 <drv_uart_init+0x21c>)
  40e0e8:	4a1a      	ldr	r2, [pc, #104]	; (40e154 <drv_uart_init+0x21c>)
  40e0ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40e0ec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  40e0f0:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40e0f2:	4b18      	ldr	r3, [pc, #96]	; (40e154 <drv_uart_init+0x21c>)
  40e0f4:	4a17      	ldr	r2, [pc, #92]	; (40e154 <drv_uart_init+0x21c>)
  40e0f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40e0f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  40e0fc:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40e0fe:	4b15      	ldr	r3, [pc, #84]	; (40e154 <drv_uart_init+0x21c>)
  40e100:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40e104:	605a      	str	r2, [r3, #4]
	
		/* configure USART1 enable Pin (PA23) */
		PIOA->PIO_PUDR   =  (PIO_PA23);
  40e106:	4b13      	ldr	r3, [pc, #76]	; (40e154 <drv_uart_init+0x21c>)
  40e108:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40e10c:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA23);
  40e10e:	4b11      	ldr	r3, [pc, #68]	; (40e154 <drv_uart_init+0x21c>)
  40e110:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40e114:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA23);
  40e116:	4b0f      	ldr	r3, [pc, #60]	; (40e154 <drv_uart_init+0x21c>)
  40e118:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40e11c:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA23);		
  40e11e:	4b0d      	ldr	r3, [pc, #52]	; (40e154 <drv_uart_init+0x21c>)
  40e120:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40e124:	601a      	str	r2, [r3, #0]
		
		NVIC_EnableIRQ(USART1_IRQn);
  40e126:	200f      	movs	r0, #15
  40e128:	4b0b      	ldr	r3, [pc, #44]	; (40e158 <drv_uart_init+0x220>)
  40e12a:	4798      	blx	r3
  40e12c:	e018      	b.n	40e160 <drv_uart_init+0x228>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40e12e:	2301      	movs	r3, #1
  40e130:	e0d8      	b.n	40e2e4 <drv_uart_init+0x3ac>
  40e132:	bf00      	nop
  40e134:	400e0600 	.word	0x400e0600
  40e138:	400e0800 	.word	0x400e0800
  40e13c:	40024000 	.word	0x40024000
  40e140:	40028000 	.word	0x40028000
  40e144:	20003e98 	.word	0x20003e98
  40e148:	0040dd99 	.word	0x0040dd99
  40e14c:	00405fc5 	.word	0x00405fc5
  40e150:	0040dd81 	.word	0x0040dd81
  40e154:	400e0e00 	.word	0x400e0e00
  40e158:	0040dca9 	.word	0x0040dca9
  40e15c:	400e1000 	.word	0x400e1000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  40e160:	687b      	ldr	r3, [r7, #4]
  40e162:	695a      	ldr	r2, [r3, #20]
  40e164:	4961      	ldr	r1, [pc, #388]	; (40e2ec <drv_uart_init+0x3b4>)
  40e166:	4613      	mov	r3, r2
  40e168:	015b      	lsls	r3, r3, #5
  40e16a:	4413      	add	r3, r2
  40e16c:	015b      	lsls	r3, r3, #5
  40e16e:	440b      	add	r3, r1
  40e170:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e174:	2201      	movs	r2, #1
  40e176:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  40e178:	687b      	ldr	r3, [r7, #4]
  40e17a:	681b      	ldr	r3, [r3, #0]
  40e17c:	4618      	mov	r0, r3
  40e17e:	f240 2101 	movw	r1, #513	; 0x201
  40e182:	4b5b      	ldr	r3, [pc, #364]	; (40e2f0 <drv_uart_init+0x3b8>)
  40e184:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40e186:	687b      	ldr	r3, [r7, #4]
  40e188:	695a      	ldr	r2, [r3, #20]
  40e18a:	4613      	mov	r3, r2
  40e18c:	015b      	lsls	r3, r3, #5
  40e18e:	4413      	add	r3, r2
  40e190:	015b      	lsls	r3, r3, #5
  40e192:	4a56      	ldr	r2, [pc, #344]	; (40e2ec <drv_uart_init+0x3b4>)
  40e194:	4413      	add	r3, r2
  40e196:	4618      	mov	r0, r3
  40e198:	2100      	movs	r1, #0
  40e19a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40e19e:	4b55      	ldr	r3, [pc, #340]	; (40e2f4 <drv_uart_init+0x3bc>)
  40e1a0:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40e1a2:	687b      	ldr	r3, [r7, #4]
  40e1a4:	695a      	ldr	r2, [r3, #20]
  40e1a6:	4951      	ldr	r1, [pc, #324]	; (40e2ec <drv_uart_init+0x3b4>)
  40e1a8:	4613      	mov	r3, r2
  40e1aa:	015b      	lsls	r3, r3, #5
  40e1ac:	4413      	add	r3, r2
  40e1ae:	015b      	lsls	r3, r3, #5
  40e1b0:	440b      	add	r3, r1
  40e1b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e1b6:	2200      	movs	r2, #0
  40e1b8:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  40e1ba:	687b      	ldr	r3, [r7, #4]
  40e1bc:	695a      	ldr	r2, [r3, #20]
  40e1be:	494b      	ldr	r1, [pc, #300]	; (40e2ec <drv_uart_init+0x3b4>)
  40e1c0:	4613      	mov	r3, r2
  40e1c2:	015b      	lsls	r3, r3, #5
  40e1c4:	4413      	add	r3, r2
  40e1c6:	015b      	lsls	r3, r3, #5
  40e1c8:	440b      	add	r3, r1
  40e1ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e1ce:	2200      	movs	r2, #0
  40e1d0:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40e1d2:	687b      	ldr	r3, [r7, #4]
  40e1d4:	695a      	ldr	r2, [r3, #20]
  40e1d6:	4945      	ldr	r1, [pc, #276]	; (40e2ec <drv_uart_init+0x3b4>)
  40e1d8:	4613      	mov	r3, r2
  40e1da:	015b      	lsls	r3, r3, #5
  40e1dc:	4413      	add	r3, r2
  40e1de:	015b      	lsls	r3, r3, #5
  40e1e0:	440b      	add	r3, r1
  40e1e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40e1e6:	2200      	movs	r2, #0
  40e1e8:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  40e1ea:	687b      	ldr	r3, [r7, #4]
  40e1ec:	695a      	ldr	r2, [r3, #20]
  40e1ee:	493f      	ldr	r1, [pc, #252]	; (40e2ec <drv_uart_init+0x3b4>)
  40e1f0:	4613      	mov	r3, r2
  40e1f2:	015b      	lsls	r3, r3, #5
  40e1f4:	4413      	add	r3, r2
  40e1f6:	015b      	lsls	r3, r3, #5
  40e1f8:	440b      	add	r3, r1
  40e1fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e1fe:	2200      	movs	r2, #0
  40e200:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  40e202:	687b      	ldr	r3, [r7, #4]
  40e204:	695a      	ldr	r2, [r3, #20]
  40e206:	4939      	ldr	r1, [pc, #228]	; (40e2ec <drv_uart_init+0x3b4>)
  40e208:	4613      	mov	r3, r2
  40e20a:	015b      	lsls	r3, r3, #5
  40e20c:	4413      	add	r3, r2
  40e20e:	015b      	lsls	r3, r3, #5
  40e210:	440b      	add	r3, r1
  40e212:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40e216:	2200      	movs	r2, #0
  40e218:	705a      	strb	r2, [r3, #1]
	uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  40e21a:	687b      	ldr	r3, [r7, #4]
  40e21c:	695a      	ldr	r2, [r3, #20]
  40e21e:	4933      	ldr	r1, [pc, #204]	; (40e2ec <drv_uart_init+0x3b4>)
  40e220:	4613      	mov	r3, r2
  40e222:	015b      	lsls	r3, r3, #5
  40e224:	4413      	add	r3, r2
  40e226:	015b      	lsls	r3, r3, #5
  40e228:	440b      	add	r3, r1
  40e22a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e22e:	2200      	movs	r2, #0
  40e230:	809a      	strh	r2, [r3, #4]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40e232:	687b      	ldr	r3, [r7, #4]
  40e234:	695a      	ldr	r2, [r3, #20]
  40e236:	4613      	mov	r3, r2
  40e238:	015b      	lsls	r3, r3, #5
  40e23a:	4413      	add	r3, r2
  40e23c:	015b      	lsls	r3, r3, #5
  40e23e:	f503 7204 	add.w	r2, r3, #528	; 0x210
  40e242:	4b2a      	ldr	r3, [pc, #168]	; (40e2ec <drv_uart_init+0x3b4>)
  40e244:	4413      	add	r3, r2
  40e246:	4618      	mov	r0, r3
  40e248:	2100      	movs	r1, #0
  40e24a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40e24e:	4b29      	ldr	r3, [pc, #164]	; (40e2f4 <drv_uart_init+0x3bc>)
  40e250:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  40e252:	687b      	ldr	r3, [r7, #4]
  40e254:	695a      	ldr	r2, [r3, #20]
  40e256:	4925      	ldr	r1, [pc, #148]	; (40e2ec <drv_uart_init+0x3b4>)
  40e258:	4613      	mov	r3, r2
  40e25a:	015b      	lsls	r3, r3, #5
  40e25c:	4413      	add	r3, r2
  40e25e:	015b      	lsls	r3, r3, #5
  40e260:	440b      	add	r3, r1
  40e262:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e266:	2200      	movs	r2, #0
  40e268:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  40e26a:	687b      	ldr	r3, [r7, #4]
  40e26c:	695a      	ldr	r2, [r3, #20]
  40e26e:	491f      	ldr	r1, [pc, #124]	; (40e2ec <drv_uart_init+0x3b4>)
  40e270:	4613      	mov	r3, r2
  40e272:	015b      	lsls	r3, r3, #5
  40e274:	4413      	add	r3, r2
  40e276:	015b      	lsls	r3, r3, #5
  40e278:	440b      	add	r3, r1
  40e27a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e27e:	2200      	movs	r2, #0
  40e280:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  40e282:	687b      	ldr	r3, [r7, #4]
  40e284:	695a      	ldr	r2, [r3, #20]
  40e286:	4919      	ldr	r1, [pc, #100]	; (40e2ec <drv_uart_init+0x3b4>)
  40e288:	4613      	mov	r3, r2
  40e28a:	015b      	lsls	r3, r3, #5
  40e28c:	4413      	add	r3, r2
  40e28e:	015b      	lsls	r3, r3, #5
  40e290:	440b      	add	r3, r1
  40e292:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e296:	2200      	movs	r2, #0
  40e298:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  40e29a:	687b      	ldr	r3, [r7, #4]
  40e29c:	695a      	ldr	r2, [r3, #20]
  40e29e:	4913      	ldr	r1, [pc, #76]	; (40e2ec <drv_uart_init+0x3b4>)
  40e2a0:	4613      	mov	r3, r2
  40e2a2:	015b      	lsls	r3, r3, #5
  40e2a4:	4413      	add	r3, r2
  40e2a6:	015b      	lsls	r3, r3, #5
  40e2a8:	440b      	add	r3, r1
  40e2aa:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e2ae:	2200      	movs	r2, #0
  40e2b0:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  40e2b2:	687b      	ldr	r3, [r7, #4]
  40e2b4:	695a      	ldr	r2, [r3, #20]
  40e2b6:	490d      	ldr	r1, [pc, #52]	; (40e2ec <drv_uart_init+0x3b4>)
  40e2b8:	4613      	mov	r3, r2
  40e2ba:	015b      	lsls	r3, r3, #5
  40e2bc:	4413      	add	r3, r2
  40e2be:	015b      	lsls	r3, r3, #5
  40e2c0:	440b      	add	r3, r1
  40e2c2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
  40e2c6:	2200      	movs	r2, #0
  40e2c8:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  40e2ca:	687b      	ldr	r3, [r7, #4]
  40e2cc:	695a      	ldr	r2, [r3, #20]
  40e2ce:	4907      	ldr	r1, [pc, #28]	; (40e2ec <drv_uart_init+0x3b4>)
  40e2d0:	4613      	mov	r3, r2
  40e2d2:	015b      	lsls	r3, r3, #5
  40e2d4:	4413      	add	r3, r2
  40e2d6:	015b      	lsls	r3, r3, #5
  40e2d8:	440b      	add	r3, r1
  40e2da:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e2de:	2200      	movs	r2, #0
  40e2e0:	809a      	strh	r2, [r3, #4]
	
	return status; 
  40e2e2:	7bfb      	ldrb	r3, [r7, #15]
}
  40e2e4:	4618      	mov	r0, r3
  40e2e6:	3710      	adds	r7, #16
  40e2e8:	46bd      	mov	sp, r7
  40e2ea:	bd80      	pop	{r7, pc}
  40e2ec:	20003e98 	.word	0x20003e98
  40e2f0:	00405fa9 	.word	0x00405fa9
  40e2f4:	0041309d 	.word	0x0041309d

0040e2f8 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  40e2f8:	b580      	push	{r7, lr}
  40e2fa:	b086      	sub	sp, #24
  40e2fc:	af00      	add	r7, sp, #0
  40e2fe:	6078      	str	r0, [r7, #4]
  40e300:	460b      	mov	r3, r1
  40e302:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  40e304:	2300      	movs	r3, #0
  40e306:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	taskENTER_CRITICAL();
  40e308:	4b34      	ldr	r3, [pc, #208]	; (40e3dc <drv_uart_putChar+0xe4>)
  40e30a:	4798      	blx	r3
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  40e30c:	687b      	ldr	r3, [r7, #4]
  40e30e:	681b      	ldr	r3, [r3, #0]
  40e310:	4618      	mov	r0, r3
  40e312:	f44f 7100 	mov.w	r1, #512	; 0x200
  40e316:	4b32      	ldr	r3, [pc, #200]	; (40e3e0 <drv_uart_putChar+0xe8>)
  40e318:	4798      	blx	r3
	uint32_t val = 0;
  40e31a:	2300      	movs	r3, #0
  40e31c:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  40e31e:	687b      	ldr	r3, [r7, #4]
  40e320:	695a      	ldr	r2, [r3, #20]
  40e322:	4613      	mov	r3, r2
  40e324:	015b      	lsls	r3, r3, #5
  40e326:	4413      	add	r3, r2
  40e328:	015b      	lsls	r3, r3, #5
  40e32a:	4a2e      	ldr	r2, [pc, #184]	; (40e3e4 <drv_uart_putChar+0xec>)
  40e32c:	4413      	add	r3, r2
  40e32e:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  40e330:	68fb      	ldr	r3, [r7, #12]
  40e332:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40e336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e33a:	d10b      	bne.n	40e354 <drv_uart_putChar+0x5c>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  40e33c:	68fb      	ldr	r3, [r7, #12]
  40e33e:	2201      	movs	r2, #1
  40e340:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  40e344:	68fb      	ldr	r3, [r7, #12]
  40e346:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  40e34a:	1c5a      	adds	r2, r3, #1
  40e34c:	68fb      	ldr	r3, [r7, #12]
  40e34e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  40e352:	e01d      	b.n	40e390 <drv_uart_putChar+0x98>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40e354:	68fb      	ldr	r3, [r7, #12]
  40e356:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40e35a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e35e:	d217      	bcs.n	40e390 <drv_uart_putChar+0x98>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  40e360:	68fb      	ldr	r3, [r7, #12]
  40e362:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40e366:	68fa      	ldr	r2, [r7, #12]
  40e368:	4413      	add	r3, r2
  40e36a:	78fa      	ldrb	r2, [r7, #3]
  40e36c:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  40e370:	68fb      	ldr	r3, [r7, #12]
  40e372:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40e376:	3301      	adds	r3, #1
  40e378:	b29a      	uxth	r2, r3
  40e37a:	68fb      	ldr	r3, [r7, #12]
  40e37c:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  40e380:	68fb      	ldr	r3, [r7, #12]
  40e382:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40e386:	3301      	adds	r3, #1
  40e388:	b29a      	uxth	r2, r3
  40e38a:	68fb      	ldr	r3, [r7, #12]
  40e38c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40e390:	68fb      	ldr	r3, [r7, #12]
  40e392:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40e396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e39a:	d103      	bne.n	40e3a4 <drv_uart_putChar+0xac>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  40e39c:	68fb      	ldr	r3, [r7, #12]
  40e39e:	2201      	movs	r2, #1
  40e3a0:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  40e3a4:	68fb      	ldr	r3, [r7, #12]
  40e3a6:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40e3aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e3ae:	d103      	bne.n	40e3b8 <drv_uart_putChar+0xc0>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  40e3b0:	68fb      	ldr	r3, [r7, #12]
  40e3b2:	2200      	movs	r2, #0
  40e3b4:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  40e3b8:	68fb      	ldr	r3, [r7, #12]
  40e3ba:	2201      	movs	r2, #1
  40e3bc:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	taskEXIT_CRITICAL();
  40e3c0:	4b09      	ldr	r3, [pc, #36]	; (40e3e8 <drv_uart_putChar+0xf0>)
  40e3c2:	4798      	blx	r3
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  40e3c4:	687b      	ldr	r3, [r7, #4]
  40e3c6:	681b      	ldr	r3, [r3, #0]
  40e3c8:	4618      	mov	r0, r3
  40e3ca:	f44f 7100 	mov.w	r1, #512	; 0x200
  40e3ce:	4b07      	ldr	r3, [pc, #28]	; (40e3ec <drv_uart_putChar+0xf4>)
  40e3d0:	4798      	blx	r3
	return status;	
  40e3d2:	7dfb      	ldrb	r3, [r7, #23]
}
  40e3d4:	4618      	mov	r0, r3
  40e3d6:	3718      	adds	r7, #24
  40e3d8:	46bd      	mov	sp, r7
  40e3da:	bd80      	pop	{r7, pc}
  40e3dc:	0040a775 	.word	0x0040a775
  40e3e0:	00405fc5 	.word	0x00405fc5
  40e3e4:	20003e98 	.word	0x20003e98
  40e3e8:	0040a799 	.word	0x0040a799
  40e3ec:	00405fa9 	.word	0x00405fa9

0040e3f0 <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  40e3f0:	b580      	push	{r7, lr}
  40e3f2:	b084      	sub	sp, #16
  40e3f4:	af00      	add	r7, sp, #0
  40e3f6:	6078      	str	r0, [r7, #4]
  40e3f8:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  40e3fa:	2300      	movs	r3, #0
  40e3fc:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  40e3fe:	687b      	ldr	r3, [r7, #4]
  40e400:	695a      	ldr	r2, [r3, #20]
  40e402:	4917      	ldr	r1, [pc, #92]	; (40e460 <drv_uart_getChar+0x70>)
  40e404:	4613      	mov	r3, r2
  40e406:	015b      	lsls	r3, r3, #5
  40e408:	4413      	add	r3, r2
  40e40a:	015b      	lsls	r3, r3, #5
  40e40c:	440b      	add	r3, r1
  40e40e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e412:	79db      	ldrb	r3, [r3, #7]
  40e414:	b2db      	uxtb	r3, r3
  40e416:	2b01      	cmp	r3, #1
  40e418:	d11a      	bne.n	40e450 <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  40e41a:	687b      	ldr	r3, [r7, #4]
  40e41c:	681b      	ldr	r3, [r3, #0]
  40e41e:	4618      	mov	r0, r3
  40e420:	2101      	movs	r1, #1
  40e422:	4b10      	ldr	r3, [pc, #64]	; (40e464 <drv_uart_getChar+0x74>)
  40e424:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  40e426:	687b      	ldr	r3, [r7, #4]
  40e428:	695a      	ldr	r2, [r3, #20]
  40e42a:	4613      	mov	r3, r2
  40e42c:	015b      	lsls	r3, r3, #5
  40e42e:	4413      	add	r3, r2
  40e430:	015b      	lsls	r3, r3, #5
  40e432:	4a0b      	ldr	r2, [pc, #44]	; (40e460 <drv_uart_getChar+0x70>)
  40e434:	4413      	add	r3, r2
  40e436:	4618      	mov	r0, r3
  40e438:	6839      	ldr	r1, [r7, #0]
  40e43a:	4b0b      	ldr	r3, [pc, #44]	; (40e468 <drv_uart_getChar+0x78>)
  40e43c:	4798      	blx	r3
  40e43e:	4603      	mov	r3, r0
  40e440:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  40e442:	687b      	ldr	r3, [r7, #4]
  40e444:	681b      	ldr	r3, [r3, #0]
  40e446:	4618      	mov	r0, r3
  40e448:	2101      	movs	r1, #1
  40e44a:	4b08      	ldr	r3, [pc, #32]	; (40e46c <drv_uart_getChar+0x7c>)
  40e44c:	4798      	blx	r3
  40e44e:	e001      	b.n	40e454 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  40e450:	2302      	movs	r3, #2
  40e452:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  40e454:	7bfb      	ldrb	r3, [r7, #15]
}
  40e456:	4618      	mov	r0, r3
  40e458:	3710      	adds	r7, #16
  40e45a:	46bd      	mov	sp, r7
  40e45c:	bd80      	pop	{r7, pc}
  40e45e:	bf00      	nop
  40e460:	20003e98 	.word	0x20003e98
  40e464:	00405fc5 	.word	0x00405fc5
  40e468:	0040ea1d 	.word	0x0040ea1d
  40e46c:	00405fa9 	.word	0x00405fa9

0040e470 <drv_uart_deInit>:
 * @brief puts the uart driver in a deinitialized state
 * @param uartConfig, the configuration structure for the uart, 
 * @return STATUS_PASS if successful,	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_deInit(drv_uart_config_t* uartConfig)
{
  40e470:	b580      	push	{r7, lr}
  40e472:	b084      	sub	sp, #16
  40e474:	af00      	add	r7, sp, #0
  40e476:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40e478:	2300      	movs	r3, #0
  40e47a:	73fb      	strb	r3, [r7, #15]
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40e47c:	687b      	ldr	r3, [r7, #4]
  40e47e:	681b      	ldr	r3, [r3, #0]
  40e480:	4618      	mov	r0, r3
  40e482:	f04f 31ff 	mov.w	r1, #4294967295
  40e486:	4b09      	ldr	r3, [pc, #36]	; (40e4ac <drv_uart_deInit+0x3c>)
  40e488:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].isinit = false;	
  40e48a:	687b      	ldr	r3, [r7, #4]
  40e48c:	695a      	ldr	r2, [r3, #20]
  40e48e:	4908      	ldr	r1, [pc, #32]	; (40e4b0 <drv_uart_deInit+0x40>)
  40e490:	4613      	mov	r3, r2
  40e492:	015b      	lsls	r3, r3, #5
  40e494:	4413      	add	r3, r2
  40e496:	015b      	lsls	r3, r3, #5
  40e498:	440b      	add	r3, r1
  40e49a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e49e:	2200      	movs	r2, #0
  40e4a0:	719a      	strb	r2, [r3, #6]
	return status;	
  40e4a2:	7bfb      	ldrb	r3, [r7, #15]
}
  40e4a4:	4618      	mov	r0, r3
  40e4a6:	3710      	adds	r7, #16
  40e4a8:	46bd      	mov	sp, r7
  40e4aa:	bd80      	pop	{r7, pc}
  40e4ac:	00405fc5 	.word	0x00405fc5
  40e4b0:	20003e98 	.word	0x20003e98

0040e4b4 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  40e4b4:	b480      	push	{r7}
  40e4b6:	b083      	sub	sp, #12
  40e4b8:	af00      	add	r7, sp, #0
  40e4ba:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  40e4bc:	687b      	ldr	r3, [r7, #4]
  40e4be:	695a      	ldr	r2, [r3, #20]
  40e4c0:	490a      	ldr	r1, [pc, #40]	; (40e4ec <drv_uart_isInit+0x38>)
  40e4c2:	4613      	mov	r3, r2
  40e4c4:	015b      	lsls	r3, r3, #5
  40e4c6:	4413      	add	r3, r2
  40e4c8:	015b      	lsls	r3, r3, #5
  40e4ca:	440b      	add	r3, r1
  40e4cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e4d0:	799b      	ldrb	r3, [r3, #6]
  40e4d2:	b2db      	uxtb	r3, r3
  40e4d4:	2b00      	cmp	r3, #0
  40e4d6:	d001      	beq.n	40e4dc <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  40e4d8:	2300      	movs	r3, #0
  40e4da:	e000      	b.n	40e4de <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  40e4dc:	2301      	movs	r3, #1
	}
}
  40e4de:	4618      	mov	r0, r3
  40e4e0:	370c      	adds	r7, #12
  40e4e2:	46bd      	mov	sp, r7
  40e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e4e8:	4770      	bx	lr
  40e4ea:	bf00      	nop
  40e4ec:	20003e98 	.word	0x20003e98

0040e4f0 <drv_uart_getDroppedBytes>:
uint32_t drv_uart_getDroppedBytes(drv_uart_config_t* uartConfig)
{
  40e4f0:	b480      	push	{r7}
  40e4f2:	b083      	sub	sp, #12
  40e4f4:	af00      	add	r7, sp, #0
  40e4f6:	6078      	str	r0, [r7, #4]
	return uartMemBuf[uartConfig->mem_index].uart_rx_fifo_dropped_bytes;
  40e4f8:	687b      	ldr	r3, [r7, #4]
  40e4fa:	695a      	ldr	r2, [r3, #20]
  40e4fc:	4907      	ldr	r1, [pc, #28]	; (40e51c <drv_uart_getDroppedBytes+0x2c>)
  40e4fe:	4613      	mov	r3, r2
  40e500:	015b      	lsls	r3, r3, #5
  40e502:	4413      	add	r3, r2
  40e504:	015b      	lsls	r3, r3, #5
  40e506:	440b      	add	r3, r1
  40e508:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40e50c:	685b      	ldr	r3, [r3, #4]
}
  40e50e:	4618      	mov	r0, r3
  40e510:	370c      	adds	r7, #12
  40e512:	46bd      	mov	sp, r7
  40e514:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e518:	4770      	bx	lr
  40e51a:	bf00      	nop
  40e51c:	20003e98 	.word	0x20003e98

0040e520 <drv_uart_getline>:
 * @param str the pointer to the buffer where the string will be stored
 * @param strSize the size of the buffer that can be used to store the string
 * @return STATUS_PASS if a string is returned,	STATUS_FAIL if the string found is larger than the buffer. 
 ***********************************************************************************************/	
status_t drv_uart_getline(drv_uart_config_t* uartConfig, char* str, size_t strSize)
{
  40e520:	b580      	push	{r7, lr}
  40e522:	b088      	sub	sp, #32
  40e524:	af00      	add	r7, sp, #0
  40e526:	60f8      	str	r0, [r7, #12]
  40e528:	60b9      	str	r1, [r7, #8]
  40e52a:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_PASS;
  40e52c:	2300      	movs	r3, #0
  40e52e:	77fb      	strb	r3, [r7, #31]
	char val;
	int pointer = 0;
  40e530:	2300      	movs	r3, #0
  40e532:	61bb      	str	r3, [r7, #24]
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
  40e534:	f107 0317 	add.w	r3, r7, #23
  40e538:	68f8      	ldr	r0, [r7, #12]
  40e53a:	4619      	mov	r1, r3
  40e53c:	4b1b      	ldr	r3, [pc, #108]	; (40e5ac <drv_uart_getline+0x8c>)
  40e53e:	4798      	blx	r3
  40e540:	4603      	mov	r3, r0
  40e542:	77fb      	strb	r3, [r7, #31]
		if(result != STATUS_EOF && val != NULL)
  40e544:	7ffb      	ldrb	r3, [r7, #31]
  40e546:	2b02      	cmp	r3, #2
  40e548:	d027      	beq.n	40e59a <drv_uart_getline+0x7a>
  40e54a:	7dfb      	ldrb	r3, [r7, #23]
  40e54c:	2b00      	cmp	r3, #0
  40e54e:	d024      	beq.n	40e59a <drv_uart_getline+0x7a>
		{
			if(pointer < strSize)
  40e550:	69ba      	ldr	r2, [r7, #24]
  40e552:	687b      	ldr	r3, [r7, #4]
  40e554:	429a      	cmp	r2, r3
  40e556:	d213      	bcs.n	40e580 <drv_uart_getline+0x60>
			{
				str[pointer++] = val; //add the result;
  40e558:	69bb      	ldr	r3, [r7, #24]
  40e55a:	1c5a      	adds	r2, r3, #1
  40e55c:	61ba      	str	r2, [r7, #24]
  40e55e:	68ba      	ldr	r2, [r7, #8]
  40e560:	4413      	add	r3, r2
  40e562:	7dfa      	ldrb	r2, [r7, #23]
  40e564:	701a      	strb	r2, [r3, #0]
				if(val == '\n')
  40e566:	7dfb      	ldrb	r3, [r7, #23]
  40e568:	2b0a      	cmp	r3, #10
  40e56a:	d114      	bne.n	40e596 <drv_uart_getline+0x76>
				{
					str[pointer] = NULL; //terminate the string
  40e56c:	69bb      	ldr	r3, [r7, #24]
  40e56e:	68ba      	ldr	r2, [r7, #8]
  40e570:	4413      	add	r3, r2
  40e572:	2200      	movs	r2, #0
  40e574:	701a      	strb	r2, [r3, #0]
					result = STATUS_PASS;
  40e576:	2300      	movs	r3, #0
  40e578:	77fb      	strb	r3, [r7, #31]
					pointer = 0; //reset the pointer.
  40e57a:	2300      	movs	r3, #0
  40e57c:	61bb      	str	r3, [r7, #24]
					break;
  40e57e:	e010      	b.n	40e5a2 <drv_uart_getline+0x82>
				}
			}
			else
			{
				//we overwrote the buffer
				result = STATUS_FAIL;
  40e580:	2301      	movs	r3, #1
  40e582:	77fb      	strb	r3, [r7, #31]
				str[strSize - 1] = NULL; //terminate what's in the buffer.
  40e584:	687b      	ldr	r3, [r7, #4]
  40e586:	3b01      	subs	r3, #1
  40e588:	68ba      	ldr	r2, [r7, #8]
  40e58a:	4413      	add	r3, r2
  40e58c:	2200      	movs	r2, #0
  40e58e:	701a      	strb	r2, [r3, #0]
				pointer = 0;
  40e590:	2300      	movs	r3, #0
  40e592:	61bb      	str	r3, [r7, #24]
				break;
  40e594:	e005      	b.n	40e5a2 <drv_uart_getline+0x82>
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
		if(result != STATUS_EOF && val != NULL)
		{
			if(pointer < strSize)
  40e596:	bf00      	nop
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
		}
		
	}
  40e598:	e7cc      	b.n	40e534 <drv_uart_getline+0x14>
			//vTaskDelay(1);
		}
		else
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
  40e59a:	2001      	movs	r0, #1
  40e59c:	4b04      	ldr	r3, [pc, #16]	; (40e5b0 <drv_uart_getline+0x90>)
  40e59e:	4798      	blx	r3
		}
		
	}
  40e5a0:	e7c8      	b.n	40e534 <drv_uart_getline+0x14>
	return result; 
  40e5a2:	7ffb      	ldrb	r3, [r7, #31]
}
  40e5a4:	4618      	mov	r0, r3
  40e5a6:	3720      	adds	r7, #32
  40e5a8:	46bd      	mov	sp, r7
  40e5aa:	bd80      	pop	{r7, pc}
  40e5ac:	0040e3f1 	.word	0x0040e3f1
  40e5b0:	0040b24d 	.word	0x0040b24d

0040e5b4 <drv_uart_getlineTimed>:
 * @param strSize the size of the buffer that can be used to store the string
 * @param maxTime the maximum time in ticks the function should wait for the response. 
 * @return STATUS_PASS if a string is returned,	STATUS_FAIL if the string found is larger than the buffer, or timed out
 ***********************************************************************************************/	
status_t drv_uart_getlineTimed(drv_uart_config_t* uartConfig, char* str, size_t strSize, uint32_t maxTime)
{
  40e5b4:	b580      	push	{r7, lr}
  40e5b6:	b088      	sub	sp, #32
  40e5b8:	af00      	add	r7, sp, #0
  40e5ba:	60f8      	str	r0, [r7, #12]
  40e5bc:	60b9      	str	r1, [r7, #8]
  40e5be:	607a      	str	r2, [r7, #4]
  40e5c0:	603b      	str	r3, [r7, #0]
	status_t result = STATUS_PASS;
  40e5c2:	2300      	movs	r3, #0
  40e5c4:	77fb      	strb	r3, [r7, #31]
	char val;
	int pointer = 0;
  40e5c6:	2300      	movs	r3, #0
  40e5c8:	61bb      	str	r3, [r7, #24]
	uint32_t startTime = sgSysTickCount;
  40e5ca:	4b24      	ldr	r3, [pc, #144]	; (40e65c <drv_uart_getlineTimed+0xa8>)
  40e5cc:	681b      	ldr	r3, [r3, #0]
  40e5ce:	617b      	str	r3, [r7, #20]
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
  40e5d0:	f107 0313 	add.w	r3, r7, #19
  40e5d4:	68f8      	ldr	r0, [r7, #12]
  40e5d6:	4619      	mov	r1, r3
  40e5d8:	4b21      	ldr	r3, [pc, #132]	; (40e660 <drv_uart_getlineTimed+0xac>)
  40e5da:	4798      	blx	r3
  40e5dc:	4603      	mov	r3, r0
  40e5de:	77fb      	strb	r3, [r7, #31]
		if(result != STATUS_EOF && val != NULL)
  40e5e0:	7ffb      	ldrb	r3, [r7, #31]
  40e5e2:	2b02      	cmp	r3, #2
  40e5e4:	d027      	beq.n	40e636 <drv_uart_getlineTimed+0x82>
  40e5e6:	7cfb      	ldrb	r3, [r7, #19]
  40e5e8:	2b00      	cmp	r3, #0
  40e5ea:	d024      	beq.n	40e636 <drv_uart_getlineTimed+0x82>
		{
			if(pointer < strSize)
  40e5ec:	69ba      	ldr	r2, [r7, #24]
  40e5ee:	687b      	ldr	r3, [r7, #4]
  40e5f0:	429a      	cmp	r2, r3
  40e5f2:	d213      	bcs.n	40e61c <drv_uart_getlineTimed+0x68>
			{
				str[pointer++] = val; //add the result;
  40e5f4:	69bb      	ldr	r3, [r7, #24]
  40e5f6:	1c5a      	adds	r2, r3, #1
  40e5f8:	61ba      	str	r2, [r7, #24]
  40e5fa:	68ba      	ldr	r2, [r7, #8]
  40e5fc:	4413      	add	r3, r2
  40e5fe:	7cfa      	ldrb	r2, [r7, #19]
  40e600:	701a      	strb	r2, [r3, #0]
				if(val == '\n')
  40e602:	7cfb      	ldrb	r3, [r7, #19]
  40e604:	2b0a      	cmp	r3, #10
  40e606:	d114      	bne.n	40e632 <drv_uart_getlineTimed+0x7e>
				{
					str[pointer] = NULL; //terminate the string
  40e608:	69bb      	ldr	r3, [r7, #24]
  40e60a:	68ba      	ldr	r2, [r7, #8]
  40e60c:	4413      	add	r3, r2
  40e60e:	2200      	movs	r2, #0
  40e610:	701a      	strb	r2, [r3, #0]
					result = STATUS_PASS;
  40e612:	2300      	movs	r3, #0
  40e614:	77fb      	strb	r3, [r7, #31]
					pointer = 0; //reset the pointer.
  40e616:	2300      	movs	r3, #0
  40e618:	61bb      	str	r3, [r7, #24]
					break;
  40e61a:	e01a      	b.n	40e652 <drv_uart_getlineTimed+0x9e>
				}
			}
			else
			{
				//we overwrote the buffer
				result = STATUS_FAIL;
  40e61c:	2301      	movs	r3, #1
  40e61e:	77fb      	strb	r3, [r7, #31]
				str[strSize - 1] = NULL; //terminate what's in the buffer.
  40e620:	687b      	ldr	r3, [r7, #4]
  40e622:	3b01      	subs	r3, #1
  40e624:	68ba      	ldr	r2, [r7, #8]
  40e626:	4413      	add	r3, r2
  40e628:	2200      	movs	r2, #0
  40e62a:	701a      	strb	r2, [r3, #0]
				pointer = 0;
  40e62c:	2300      	movs	r3, #0
  40e62e:	61bb      	str	r3, [r7, #24]
				break;
  40e630:	e00f      	b.n	40e652 <drv_uart_getlineTimed+0x9e>
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
		if(result != STATUS_EOF && val != NULL)
		{
			if(pointer < strSize)
  40e632:	bf00      	nop
				break;
			}
			vTaskDelay(1); //let the other processes do stuff	
		}
		
	}
  40e634:	e7cc      	b.n	40e5d0 <drv_uart_getlineTimed+0x1c>
			}
		}
		else
		{
			//check if we've timed out yet... 
			if(sgSysTickCount > (startTime + maxTime))
  40e636:	697a      	ldr	r2, [r7, #20]
  40e638:	683b      	ldr	r3, [r7, #0]
  40e63a:	441a      	add	r2, r3
  40e63c:	4b07      	ldr	r3, [pc, #28]	; (40e65c <drv_uart_getlineTimed+0xa8>)
  40e63e:	681b      	ldr	r3, [r3, #0]
  40e640:	429a      	cmp	r2, r3
  40e642:	d202      	bcs.n	40e64a <drv_uart_getlineTimed+0x96>
			{
				//return fail, we've timed out. 
				result = STATUS_FAIL; 
  40e644:	2301      	movs	r3, #1
  40e646:	77fb      	strb	r3, [r7, #31]
				break;
  40e648:	e003      	b.n	40e652 <drv_uart_getlineTimed+0x9e>
			}
			vTaskDelay(1); //let the other processes do stuff	
  40e64a:	2001      	movs	r0, #1
  40e64c:	4b05      	ldr	r3, [pc, #20]	; (40e664 <drv_uart_getlineTimed+0xb0>)
  40e64e:	4798      	blx	r3
		}
		
	}
  40e650:	e7be      	b.n	40e5d0 <drv_uart_getlineTimed+0x1c>
	return result; 
  40e652:	7ffb      	ldrb	r3, [r7, #31]
}
  40e654:	4618      	mov	r0, r3
  40e656:	3720      	adds	r7, #32
  40e658:	46bd      	mov	sp, r7
  40e65a:	bd80      	pop	{r7, pc}
  40e65c:	200039dc 	.word	0x200039dc
  40e660:	0040e3f1 	.word	0x0040e3f1
  40e664:	0040b24d 	.word	0x0040b24d

0040e668 <drv_uart_putString>:
	*strLength = pointer;
	return result; 
}

void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
  40e668:	b580      	push	{r7, lr}
  40e66a:	b084      	sub	sp, #16
  40e66c:	af00      	add	r7, sp, #0
  40e66e:	6078      	str	r0, [r7, #4]
  40e670:	6039      	str	r1, [r7, #0]
	int i=0;
  40e672:	2300      	movs	r3, #0
  40e674:	60fb      	str	r3, [r7, #12]
	int size = strlen(str);
  40e676:	6838      	ldr	r0, [r7, #0]
  40e678:	4b0d      	ldr	r3, [pc, #52]	; (40e6b0 <drv_uart_putString+0x48>)
  40e67a:	4798      	blx	r3
  40e67c:	4603      	mov	r3, r0
  40e67e:	60bb      	str	r3, [r7, #8]

	for (i=0;i<size;)
  40e680:	2300      	movs	r3, #0
  40e682:	60fb      	str	r3, [r7, #12]
  40e684:	e00d      	b.n	40e6a2 <drv_uart_putString+0x3a>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  40e686:	68fb      	ldr	r3, [r7, #12]
  40e688:	683a      	ldr	r2, [r7, #0]
  40e68a:	4413      	add	r3, r2
  40e68c:	781b      	ldrb	r3, [r3, #0]
  40e68e:	6878      	ldr	r0, [r7, #4]
  40e690:	4619      	mov	r1, r3
  40e692:	4b08      	ldr	r3, [pc, #32]	; (40e6b4 <drv_uart_putString+0x4c>)
  40e694:	4798      	blx	r3
  40e696:	4603      	mov	r3, r0
  40e698:	2b00      	cmp	r3, #0
  40e69a:	d102      	bne.n	40e6a2 <drv_uart_putString+0x3a>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  40e69c:	68fb      	ldr	r3, [r7, #12]
  40e69e:	3301      	adds	r3, #1
  40e6a0:	60fb      	str	r3, [r7, #12]
void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
	int i=0;
	int size = strlen(str);

	for (i=0;i<size;)
  40e6a2:	68fa      	ldr	r2, [r7, #12]
  40e6a4:	68bb      	ldr	r3, [r7, #8]
  40e6a6:	429a      	cmp	r2, r3
  40e6a8:	dbed      	blt.n	40e686 <drv_uart_putString+0x1e>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}		
	}
}
  40e6aa:	3710      	adds	r7, #16
  40e6ac:	46bd      	mov	sp, r7
  40e6ae:	bd80      	pop	{r7, pc}
  40e6b0:	00413725 	.word	0x00413725
  40e6b4:	0040e2f9 	.word	0x0040e2f9

0040e6b8 <drv_uart_putData>:

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  40e6b8:	b580      	push	{r7, lr}
  40e6ba:	b086      	sub	sp, #24
  40e6bc:	af00      	add	r7, sp, #0
  40e6be:	60f8      	str	r0, [r7, #12]
  40e6c0:	60b9      	str	r1, [r7, #8]
  40e6c2:	607a      	str	r2, [r7, #4]
	int i=0;
  40e6c4:	2300      	movs	r3, #0
  40e6c6:	617b      	str	r3, [r7, #20]
	for (i=0;i<length;)
  40e6c8:	2300      	movs	r3, #0
  40e6ca:	617b      	str	r3, [r7, #20]
  40e6cc:	e00d      	b.n	40e6ea <drv_uart_putData+0x32>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  40e6ce:	697b      	ldr	r3, [r7, #20]
  40e6d0:	68ba      	ldr	r2, [r7, #8]
  40e6d2:	4413      	add	r3, r2
  40e6d4:	781b      	ldrb	r3, [r3, #0]
  40e6d6:	68f8      	ldr	r0, [r7, #12]
  40e6d8:	4619      	mov	r1, r3
  40e6da:	4b07      	ldr	r3, [pc, #28]	; (40e6f8 <drv_uart_putData+0x40>)
  40e6dc:	4798      	blx	r3
  40e6de:	4603      	mov	r3, r0
  40e6e0:	2b00      	cmp	r3, #0
  40e6e2:	d102      	bne.n	40e6ea <drv_uart_putData+0x32>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  40e6e4:	697b      	ldr	r3, [r7, #20]
  40e6e6:	3301      	adds	r3, #1
  40e6e8:	617b      	str	r3, [r7, #20]
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  40e6ea:	697a      	ldr	r2, [r7, #20]
  40e6ec:	687b      	ldr	r3, [r7, #4]
  40e6ee:	429a      	cmp	r2, r3
  40e6f0:	d3ed      	bcc.n	40e6ce <drv_uart_putData+0x16>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  40e6f2:	3718      	adds	r7, #24
  40e6f4:	46bd      	mov	sp, r7
  40e6f6:	bd80      	pop	{r7, pc}
  40e6f8:	0040e2f9 	.word	0x0040e2f9

0040e6fc <drv_uart_flushRx>:
	}
	return 0;
}

void drv_uart_flushRx(drv_uart_config_t* uartConfig)
{
  40e6fc:	b580      	push	{r7, lr}
  40e6fe:	b082      	sub	sp, #8
  40e700:	af00      	add	r7, sp, #0
  40e702:	6078      	str	r0, [r7, #4]
	//clear the buffer
	if(drv_uart_isInit(uartConfig) == STATUS_PASS)
  40e704:	6878      	ldr	r0, [r7, #4]
  40e706:	4b59      	ldr	r3, [pc, #356]	; (40e86c <drv_uart_flushRx+0x170>)
  40e708:	4798      	blx	r3
  40e70a:	4603      	mov	r3, r0
  40e70c:	2b00      	cmp	r3, #0
  40e70e:	f040 80aa 	bne.w	40e866 <drv_uart_flushRx+0x16a>
	{	
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  40e712:	687b      	ldr	r3, [r7, #4]
  40e714:	681b      	ldr	r3, [r3, #0]
  40e716:	4618      	mov	r0, r3
  40e718:	2101      	movs	r1, #1
  40e71a:	4b55      	ldr	r3, [pc, #340]	; (40e870 <drv_uart_flushRx+0x174>)
  40e71c:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers				
		memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40e71e:	687b      	ldr	r3, [r7, #4]
  40e720:	695a      	ldr	r2, [r3, #20]
  40e722:	4613      	mov	r3, r2
  40e724:	015b      	lsls	r3, r3, #5
  40e726:	4413      	add	r3, r2
  40e728:	015b      	lsls	r3, r3, #5
  40e72a:	4a52      	ldr	r2, [pc, #328]	; (40e874 <drv_uart_flushRx+0x178>)
  40e72c:	4413      	add	r3, r2
  40e72e:	4618      	mov	r0, r3
  40e730:	2100      	movs	r1, #0
  40e732:	f44f 7200 	mov.w	r2, #512	; 0x200
  40e736:	4b50      	ldr	r3, [pc, #320]	; (40e878 <drv_uart_flushRx+0x17c>)
  40e738:	4798      	blx	r3
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40e73a:	687b      	ldr	r3, [r7, #4]
  40e73c:	695a      	ldr	r2, [r3, #20]
  40e73e:	494d      	ldr	r1, [pc, #308]	; (40e874 <drv_uart_flushRx+0x178>)
  40e740:	4613      	mov	r3, r2
  40e742:	015b      	lsls	r3, r3, #5
  40e744:	4413      	add	r3, r2
  40e746:	015b      	lsls	r3, r3, #5
  40e748:	440b      	add	r3, r1
  40e74a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e74e:	2200      	movs	r2, #0
  40e750:	801a      	strh	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  40e752:	687b      	ldr	r3, [r7, #4]
  40e754:	695a      	ldr	r2, [r3, #20]
  40e756:	4947      	ldr	r1, [pc, #284]	; (40e874 <drv_uart_flushRx+0x178>)
  40e758:	4613      	mov	r3, r2
  40e75a:	015b      	lsls	r3, r3, #5
  40e75c:	4413      	add	r3, r2
  40e75e:	015b      	lsls	r3, r3, #5
  40e760:	440b      	add	r3, r1
  40e762:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e766:	2200      	movs	r2, #0
  40e768:	805a      	strh	r2, [r3, #2]
		uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  40e76a:	687b      	ldr	r3, [r7, #4]
  40e76c:	695a      	ldr	r2, [r3, #20]
  40e76e:	4941      	ldr	r1, [pc, #260]	; (40e874 <drv_uart_flushRx+0x178>)
  40e770:	4613      	mov	r3, r2
  40e772:	015b      	lsls	r3, r3, #5
  40e774:	4413      	add	r3, r2
  40e776:	015b      	lsls	r3, r3, #5
  40e778:	440b      	add	r3, r1
  40e77a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e77e:	2200      	movs	r2, #0
  40e780:	809a      	strh	r2, [r3, #4]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40e782:	687b      	ldr	r3, [r7, #4]
  40e784:	695a      	ldr	r2, [r3, #20]
  40e786:	493b      	ldr	r1, [pc, #236]	; (40e874 <drv_uart_flushRx+0x178>)
  40e788:	4613      	mov	r3, r2
  40e78a:	015b      	lsls	r3, r3, #5
  40e78c:	4413      	add	r3, r2
  40e78e:	015b      	lsls	r3, r3, #5
  40e790:	440b      	add	r3, r1
  40e792:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40e796:	2200      	movs	r2, #0
  40e798:	701a      	strb	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  40e79a:	687b      	ldr	r3, [r7, #4]
  40e79c:	695a      	ldr	r2, [r3, #20]
  40e79e:	4935      	ldr	r1, [pc, #212]	; (40e874 <drv_uart_flushRx+0x178>)
  40e7a0:	4613      	mov	r3, r2
  40e7a2:	015b      	lsls	r3, r3, #5
  40e7a4:	4413      	add	r3, r2
  40e7a6:	015b      	lsls	r3, r3, #5
  40e7a8:	440b      	add	r3, r1
  40e7aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40e7ae:	2200      	movs	r2, #0
  40e7b0:	71da      	strb	r2, [r3, #7]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;		
  40e7b2:	687b      	ldr	r3, [r7, #4]
  40e7b4:	695a      	ldr	r2, [r3, #20]
  40e7b6:	492f      	ldr	r1, [pc, #188]	; (40e874 <drv_uart_flushRx+0x178>)
  40e7b8:	4613      	mov	r3, r2
  40e7ba:	015b      	lsls	r3, r3, #5
  40e7bc:	4413      	add	r3, r2
  40e7be:	015b      	lsls	r3, r3, #5
  40e7c0:	440b      	add	r3, r1
  40e7c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40e7c6:	2200      	movs	r2, #0
  40e7c8:	705a      	strb	r2, [r3, #1]
		//flush the RX buffer as well. 
		uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  40e7ca:	687b      	ldr	r3, [r7, #4]
  40e7cc:	695a      	ldr	r2, [r3, #20]
  40e7ce:	4929      	ldr	r1, [pc, #164]	; (40e874 <drv_uart_flushRx+0x178>)
  40e7d0:	4613      	mov	r3, r2
  40e7d2:	015b      	lsls	r3, r3, #5
  40e7d4:	4413      	add	r3, r2
  40e7d6:	015b      	lsls	r3, r3, #5
  40e7d8:	440b      	add	r3, r1
  40e7da:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e7de:	2200      	movs	r2, #0
  40e7e0:	801a      	strh	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  40e7e2:	687b      	ldr	r3, [r7, #4]
  40e7e4:	695a      	ldr	r2, [r3, #20]
  40e7e6:	4923      	ldr	r1, [pc, #140]	; (40e874 <drv_uart_flushRx+0x178>)
  40e7e8:	4613      	mov	r3, r2
  40e7ea:	015b      	lsls	r3, r3, #5
  40e7ec:	4413      	add	r3, r2
  40e7ee:	015b      	lsls	r3, r3, #5
  40e7f0:	440b      	add	r3, r1
  40e7f2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e7f6:	2200      	movs	r2, #0
  40e7f8:	805a      	strh	r2, [r3, #2]
		uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  40e7fa:	687b      	ldr	r3, [r7, #4]
  40e7fc:	695a      	ldr	r2, [r3, #20]
  40e7fe:	491d      	ldr	r1, [pc, #116]	; (40e874 <drv_uart_flushRx+0x178>)
  40e800:	4613      	mov	r3, r2
  40e802:	015b      	lsls	r3, r3, #5
  40e804:	4413      	add	r3, r2
  40e806:	015b      	lsls	r3, r3, #5
  40e808:	440b      	add	r3, r1
  40e80a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e80e:	2200      	movs	r2, #0
  40e810:	809a      	strh	r2, [r3, #4]
		uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  40e812:	687b      	ldr	r3, [r7, #4]
  40e814:	695a      	ldr	r2, [r3, #20]
  40e816:	4917      	ldr	r1, [pc, #92]	; (40e874 <drv_uart_flushRx+0x178>)
  40e818:	4613      	mov	r3, r2
  40e81a:	015b      	lsls	r3, r3, #5
  40e81c:	4413      	add	r3, r2
  40e81e:	015b      	lsls	r3, r3, #5
  40e820:	440b      	add	r3, r1
  40e822:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e826:	2200      	movs	r2, #0
  40e828:	71da      	strb	r2, [r3, #7]
		uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  40e82a:	687b      	ldr	r3, [r7, #4]
  40e82c:	695a      	ldr	r2, [r3, #20]
  40e82e:	4911      	ldr	r1, [pc, #68]	; (40e874 <drv_uart_flushRx+0x178>)
  40e830:	4613      	mov	r3, r2
  40e832:	015b      	lsls	r3, r3, #5
  40e834:	4413      	add	r3, r2
  40e836:	015b      	lsls	r3, r3, #5
  40e838:	440b      	add	r3, r1
  40e83a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40e83e:	2200      	movs	r2, #0
  40e840:	719a      	strb	r2, [r3, #6]
		uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  40e842:	687b      	ldr	r3, [r7, #4]
  40e844:	695a      	ldr	r2, [r3, #20]
  40e846:	490b      	ldr	r1, [pc, #44]	; (40e874 <drv_uart_flushRx+0x178>)
  40e848:	4613      	mov	r3, r2
  40e84a:	015b      	lsls	r3, r3, #5
  40e84c:	4413      	add	r3, r2
  40e84e:	015b      	lsls	r3, r3, #5
  40e850:	440b      	add	r3, r1
  40e852:	f503 6383 	add.w	r3, r3, #1048	; 0x418
  40e856:	2200      	movs	r2, #0
  40e858:	701a      	strb	r2, [r3, #0]
		//re-enable the interrupts		
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);	
  40e85a:	687b      	ldr	r3, [r7, #4]
  40e85c:	681b      	ldr	r3, [r3, #0]
  40e85e:	4618      	mov	r0, r3
  40e860:	2101      	movs	r1, #1
  40e862:	4b06      	ldr	r3, [pc, #24]	; (40e87c <drv_uart_flushRx+0x180>)
  40e864:	4798      	blx	r3
	}
}
  40e866:	3708      	adds	r7, #8
  40e868:	46bd      	mov	sp, r7
  40e86a:	bd80      	pop	{r7, pc}
  40e86c:	0040e4b5 	.word	0x0040e4b5
  40e870:	00405fc5 	.word	0x00405fc5
  40e874:	20003e98 	.word	0x20003e98
  40e878:	0041309d 	.word	0x0041309d
  40e87c:	00405fa9 	.word	0x00405fa9

0040e880 <UART0_Handler>:

// interrupt handlers
void UART0_Handler()
{	
  40e880:	b580      	push	{r7, lr}
  40e882:	b082      	sub	sp, #8
  40e884:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  40e886:	4812      	ldr	r0, [pc, #72]	; (40e8d0 <UART0_Handler+0x50>)
  40e888:	4b12      	ldr	r3, [pc, #72]	; (40e8d4 <UART0_Handler+0x54>)
  40e88a:	4798      	blx	r3
  40e88c:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40e88e:	687b      	ldr	r3, [r7, #4]
  40e890:	f003 0301 	and.w	r3, r3, #1
  40e894:	2b00      	cmp	r3, #0
  40e896:	d009      	beq.n	40e8ac <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  40e898:	4b0f      	ldr	r3, [pc, #60]	; (40e8d8 <UART0_Handler+0x58>)
  40e89a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  40e89e:	b2db      	uxtb	r3, r3
  40e8a0:	2b00      	cmp	r3, #0
  40e8a2:	d003      	beq.n	40e8ac <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  40e8a4:	480a      	ldr	r0, [pc, #40]	; (40e8d0 <UART0_Handler+0x50>)
  40e8a6:	490c      	ldr	r1, [pc, #48]	; (40e8d8 <UART0_Handler+0x58>)
  40e8a8:	4b0c      	ldr	r3, [pc, #48]	; (40e8dc <UART0_Handler+0x5c>)
  40e8aa:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40e8ac:	687b      	ldr	r3, [r7, #4]
  40e8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40e8b2:	2b00      	cmp	r3, #0
  40e8b4:	d009      	beq.n	40e8ca <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  40e8b6:	4b08      	ldr	r3, [pc, #32]	; (40e8d8 <UART0_Handler+0x58>)
  40e8b8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  40e8bc:	b2db      	uxtb	r3, r3
  40e8be:	2b00      	cmp	r3, #0
  40e8c0:	d003      	beq.n	40e8ca <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  40e8c2:	4803      	ldr	r0, [pc, #12]	; (40e8d0 <UART0_Handler+0x50>)
  40e8c4:	4904      	ldr	r1, [pc, #16]	; (40e8d8 <UART0_Handler+0x58>)
  40e8c6:	4b06      	ldr	r3, [pc, #24]	; (40e8e0 <UART0_Handler+0x60>)
  40e8c8:	4798      	blx	r3
		}
	}	
}
  40e8ca:	3708      	adds	r7, #8
  40e8cc:	46bd      	mov	sp, r7
  40e8ce:	bd80      	pop	{r7, pc}
  40e8d0:	400e0600 	.word	0x400e0600
  40e8d4:	00405d61 	.word	0x00405d61
  40e8d8:	20003e98 	.word	0x20003e98
  40e8dc:	0040eaa9 	.word	0x0040eaa9
  40e8e0:	0040eb6d 	.word	0x0040eb6d

0040e8e4 <UART1_Handler>:

void UART1_Handler()
{
  40e8e4:	b580      	push	{r7, lr}
  40e8e6:	b082      	sub	sp, #8
  40e8e8:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  40e8ea:	4812      	ldr	r0, [pc, #72]	; (40e934 <UART1_Handler+0x50>)
  40e8ec:	4b12      	ldr	r3, [pc, #72]	; (40e938 <UART1_Handler+0x54>)
  40e8ee:	4798      	blx	r3
  40e8f0:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40e8f2:	687b      	ldr	r3, [r7, #4]
  40e8f4:	f003 0301 	and.w	r3, r3, #1
  40e8f8:	2b00      	cmp	r3, #0
  40e8fa:	d009      	beq.n	40e910 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  40e8fc:	4b0f      	ldr	r3, [pc, #60]	; (40e93c <UART1_Handler+0x58>)
  40e8fe:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  40e902:	b2db      	uxtb	r3, r3
  40e904:	2b00      	cmp	r3, #0
  40e906:	d003      	beq.n	40e910 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  40e908:	480a      	ldr	r0, [pc, #40]	; (40e934 <UART1_Handler+0x50>)
  40e90a:	490d      	ldr	r1, [pc, #52]	; (40e940 <UART1_Handler+0x5c>)
  40e90c:	4b0d      	ldr	r3, [pc, #52]	; (40e944 <UART1_Handler+0x60>)
  40e90e:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40e910:	687b      	ldr	r3, [r7, #4]
  40e912:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40e916:	2b00      	cmp	r3, #0
  40e918:	d009      	beq.n	40e92e <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  40e91a:	4b08      	ldr	r3, [pc, #32]	; (40e93c <UART1_Handler+0x58>)
  40e91c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  40e920:	b2db      	uxtb	r3, r3
  40e922:	2b00      	cmp	r3, #0
  40e924:	d003      	beq.n	40e92e <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  40e926:	4803      	ldr	r0, [pc, #12]	; (40e934 <UART1_Handler+0x50>)
  40e928:	4905      	ldr	r1, [pc, #20]	; (40e940 <UART1_Handler+0x5c>)
  40e92a:	4b07      	ldr	r3, [pc, #28]	; (40e948 <UART1_Handler+0x64>)
  40e92c:	4798      	blx	r3
		}
	}
}
  40e92e:	3708      	adds	r7, #8
  40e930:	46bd      	mov	sp, r7
  40e932:	bd80      	pop	{r7, pc}
  40e934:	400e0800 	.word	0x400e0800
  40e938:	00405d61 	.word	0x00405d61
  40e93c:	20003e98 	.word	0x20003e98
  40e940:	200042b8 	.word	0x200042b8
  40e944:	0040eaa9 	.word	0x0040eaa9
  40e948:	0040eb6d 	.word	0x0040eb6d

0040e94c <USART0_Handler>:

void USART0_Handler()
{
  40e94c:	b580      	push	{r7, lr}
  40e94e:	b082      	sub	sp, #8
  40e950:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  40e952:	4812      	ldr	r0, [pc, #72]	; (40e99c <USART0_Handler+0x50>)
  40e954:	4b12      	ldr	r3, [pc, #72]	; (40e9a0 <USART0_Handler+0x54>)
  40e956:	4798      	blx	r3
  40e958:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40e95a:	687b      	ldr	r3, [r7, #4]
  40e95c:	f003 0301 	and.w	r3, r3, #1
  40e960:	2b00      	cmp	r3, #0
  40e962:	d009      	beq.n	40e978 <USART0_Handler+0x2c>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  40e964:	4b0f      	ldr	r3, [pc, #60]	; (40e9a4 <USART0_Handler+0x58>)
  40e966:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  40e96a:	b2db      	uxtb	r3, r3
  40e96c:	2b00      	cmp	r3, #0
  40e96e:	d003      	beq.n	40e978 <USART0_Handler+0x2c>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  40e970:	480a      	ldr	r0, [pc, #40]	; (40e99c <USART0_Handler+0x50>)
  40e972:	490d      	ldr	r1, [pc, #52]	; (40e9a8 <USART0_Handler+0x5c>)
  40e974:	4b0d      	ldr	r3, [pc, #52]	; (40e9ac <USART0_Handler+0x60>)
  40e976:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40e978:	687b      	ldr	r3, [r7, #4]
  40e97a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40e97e:	2b00      	cmp	r3, #0
  40e980:	d009      	beq.n	40e996 <USART0_Handler+0x4a>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  40e982:	4b08      	ldr	r3, [pc, #32]	; (40e9a4 <USART0_Handler+0x58>)
  40e984:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  40e988:	b2db      	uxtb	r3, r3
  40e98a:	2b00      	cmp	r3, #0
  40e98c:	d003      	beq.n	40e996 <USART0_Handler+0x4a>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  40e98e:	4803      	ldr	r0, [pc, #12]	; (40e99c <USART0_Handler+0x50>)
  40e990:	4905      	ldr	r1, [pc, #20]	; (40e9a8 <USART0_Handler+0x5c>)
  40e992:	4b07      	ldr	r3, [pc, #28]	; (40e9b0 <USART0_Handler+0x64>)
  40e994:	4798      	blx	r3
		}
	}	
}
  40e996:	3708      	adds	r7, #8
  40e998:	46bd      	mov	sp, r7
  40e99a:	bd80      	pop	{r7, pc}
  40e99c:	40024000 	.word	0x40024000
  40e9a0:	00405d61 	.word	0x00405d61
  40e9a4:	20003e98 	.word	0x20003e98
  40e9a8:	200046d8 	.word	0x200046d8
  40e9ac:	0040eaa9 	.word	0x0040eaa9
  40e9b0:	0040eb6d 	.word	0x0040eb6d

0040e9b4 <USART1_Handler>:

void USART1_Handler()
{
  40e9b4:	b580      	push	{r7, lr}
  40e9b6:	b082      	sub	sp, #8
  40e9b8:	af00      	add	r7, sp, #0
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  40e9ba:	4812      	ldr	r0, [pc, #72]	; (40ea04 <USART1_Handler+0x50>)
  40e9bc:	4b12      	ldr	r3, [pc, #72]	; (40ea08 <USART1_Handler+0x54>)
  40e9be:	4798      	blx	r3
  40e9c0:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40e9c2:	687b      	ldr	r3, [r7, #4]
  40e9c4:	f003 0301 	and.w	r3, r3, #1
  40e9c8:	2b00      	cmp	r3, #0
  40e9ca:	d009      	beq.n	40e9e0 <USART1_Handler+0x2c>
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  40e9cc:	4b0f      	ldr	r3, [pc, #60]	; (40ea0c <USART1_Handler+0x58>)
  40e9ce:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  40e9d2:	b2db      	uxtb	r3, r3
  40e9d4:	2b00      	cmp	r3, #0
  40e9d6:	d003      	beq.n	40e9e0 <USART1_Handler+0x2c>
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
  40e9d8:	480a      	ldr	r0, [pc, #40]	; (40ea04 <USART1_Handler+0x50>)
  40e9da:	490d      	ldr	r1, [pc, #52]	; (40ea10 <USART1_Handler+0x5c>)
  40e9dc:	4b0d      	ldr	r3, [pc, #52]	; (40ea14 <USART1_Handler+0x60>)
  40e9de:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40e9e0:	687b      	ldr	r3, [r7, #4]
  40e9e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40e9e6:	2b00      	cmp	r3, #0
  40e9e8:	d009      	beq.n	40e9fe <USART1_Handler+0x4a>
	{
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  40e9ea:	4b08      	ldr	r3, [pc, #32]	; (40ea0c <USART1_Handler+0x58>)
  40e9ec:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  40e9f0:	b2db      	uxtb	r3, r3
  40e9f2:	2b00      	cmp	r3, #0
  40e9f4:	d003      	beq.n	40e9fe <USART1_Handler+0x4a>
		{
			uart_process_tx_byte(USART1, &(uartMemBuf[3])); 	
  40e9f6:	4803      	ldr	r0, [pc, #12]	; (40ea04 <USART1_Handler+0x50>)
  40e9f8:	4905      	ldr	r1, [pc, #20]	; (40ea10 <USART1_Handler+0x5c>)
  40e9fa:	4b07      	ldr	r3, [pc, #28]	; (40ea18 <USART1_Handler+0x64>)
  40e9fc:	4798      	blx	r3
		}
	}	
}
  40e9fe:	3708      	adds	r7, #8
  40ea00:	46bd      	mov	sp, r7
  40ea02:	bd80      	pop	{r7, pc}
  40ea04:	40028000 	.word	0x40028000
  40ea08:	00405d61 	.word	0x00405d61
  40ea0c:	20003e98 	.word	0x20003e98
  40ea10:	20004af8 	.word	0x20004af8
  40ea14:	0040eaa9 	.word	0x0040eaa9
  40ea18:	0040eb6d 	.word	0x0040eb6d

0040ea1c <uart_get_byte>:


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  40ea1c:	b480      	push	{r7}
  40ea1e:	b085      	sub	sp, #20
  40ea20:	af00      	add	r7, sp, #0
  40ea22:	6078      	str	r0, [r7, #4]
  40ea24:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  40ea26:	2300      	movs	r3, #0
  40ea28:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40ea2a:	687b      	ldr	r3, [r7, #4]
  40ea2c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40ea30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ea34:	d103      	bne.n	40ea3e <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  40ea36:	687b      	ldr	r3, [r7, #4]
  40ea38:	2200      	movs	r2, #0
  40ea3a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  40ea3e:	687b      	ldr	r3, [r7, #4]
  40ea40:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40ea44:	2b00      	cmp	r3, #0
  40ea46:	d017      	beq.n	40ea78 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  40ea48:	687b      	ldr	r3, [r7, #4]
  40ea4a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40ea4e:	687a      	ldr	r2, [r7, #4]
  40ea50:	5cd2      	ldrb	r2, [r2, r3]
  40ea52:	683b      	ldr	r3, [r7, #0]
  40ea54:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  40ea56:	687b      	ldr	r3, [r7, #4]
  40ea58:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40ea5c:	3301      	adds	r3, #1
  40ea5e:	b29a      	uxth	r2, r3
  40ea60:	687b      	ldr	r3, [r7, #4]
  40ea62:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  40ea66:	687b      	ldr	r3, [r7, #4]
  40ea68:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40ea6c:	3b01      	subs	r3, #1
  40ea6e:	b29a      	uxth	r2, r3
  40ea70:	687b      	ldr	r3, [r7, #4]
  40ea72:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  40ea76:	e005      	b.n	40ea84 <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  40ea78:	687b      	ldr	r3, [r7, #4]
  40ea7a:	2200      	movs	r2, #0
  40ea7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		status = STATUS_EOF;
  40ea80:	2302      	movs	r3, #2
  40ea82:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  40ea84:	687b      	ldr	r3, [r7, #4]
  40ea86:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40ea8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ea8e:	d103      	bne.n	40ea98 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  40ea90:	687b      	ldr	r3, [r7, #4]
  40ea92:	2200      	movs	r2, #0
  40ea94:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}		
	return status;
  40ea98:	7bfb      	ldrb	r3, [r7, #15]
}
  40ea9a:	4618      	mov	r0, r3
  40ea9c:	3714      	adds	r7, #20
  40ea9e:	46bd      	mov	sp, r7
  40eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40eaa4:	4770      	bx	lr
  40eaa6:	bf00      	nop

0040eaa8 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  40eaa8:	b580      	push	{r7, lr}
  40eaaa:	b084      	sub	sp, #16
  40eaac:	af00      	add	r7, sp, #0
  40eaae:	6078      	str	r0, [r7, #4]
  40eab0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40eab2:	2300      	movs	r3, #0
  40eab4:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  40eab6:	683b      	ldr	r3, [r7, #0]
  40eab8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40eabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eac0:	d111      	bne.n	40eae6 <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  40eac2:	683b      	ldr	r3, [r7, #0]
  40eac4:	2201      	movs	r2, #1
  40eac6:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  40eaca:	683b      	ldr	r3, [r7, #0]
  40eacc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  40ead0:	1c5a      	adds	r2, r3, #1
  40ead2:	683b      	ldr	r3, [r7, #0]
  40ead4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  40ead8:	f107 030c 	add.w	r3, r7, #12
  40eadc:	6878      	ldr	r0, [r7, #4]
  40eade:	4619      	mov	r1, r3
  40eae0:	4b21      	ldr	r3, [pc, #132]	; (40eb68 <uart_process_byte+0xc0>)
  40eae2:	4798      	blx	r3
  40eae4:	e025      	b.n	40eb32 <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40eae6:	683b      	ldr	r3, [r7, #0]
  40eae8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40eaec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eaf0:	d21f      	bcs.n	40eb32 <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  40eaf2:	f107 030c 	add.w	r3, r7, #12
  40eaf6:	6878      	ldr	r0, [r7, #4]
  40eaf8:	4619      	mov	r1, r3
  40eafa:	4b1b      	ldr	r3, [pc, #108]	; (40eb68 <uart_process_byte+0xc0>)
  40eafc:	4798      	blx	r3
  40eafe:	4603      	mov	r3, r0
  40eb00:	2b00      	cmp	r3, #0
  40eb02:	d116      	bne.n	40eb32 <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  40eb04:	683b      	ldr	r3, [r7, #0]
  40eb06:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40eb0a:	68fa      	ldr	r2, [r7, #12]
  40eb0c:	b2d1      	uxtb	r1, r2
  40eb0e:	683a      	ldr	r2, [r7, #0]
  40eb10:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  40eb12:	683b      	ldr	r3, [r7, #0]
  40eb14:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40eb18:	3301      	adds	r3, #1
  40eb1a:	b29a      	uxth	r2, r3
  40eb1c:	683b      	ldr	r3, [r7, #0]
  40eb1e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  40eb22:	683b      	ldr	r3, [r7, #0]
  40eb24:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40eb28:	3301      	adds	r3, #1
  40eb2a:	b29a      	uxth	r2, r3
  40eb2c:	683b      	ldr	r3, [r7, #0]
  40eb2e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40eb32:	683b      	ldr	r3, [r7, #0]
  40eb34:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40eb38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eb3c:	d103      	bne.n	40eb46 <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  40eb3e:	683b      	ldr	r3, [r7, #0]
  40eb40:	2201      	movs	r2, #1
  40eb42:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  40eb46:	683b      	ldr	r3, [r7, #0]
  40eb48:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40eb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eb50:	d103      	bne.n	40eb5a <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  40eb52:	683b      	ldr	r3, [r7, #0]
  40eb54:	2200      	movs	r2, #0
  40eb56:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag
  40eb5a:	683b      	ldr	r3, [r7, #0]
  40eb5c:	2201      	movs	r2, #1
  40eb5e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
}
  40eb62:	3710      	adds	r7, #16
  40eb64:	46bd      	mov	sp, r7
  40eb66:	bd80      	pop	{r7, pc}
  40eb68:	0040609d 	.word	0x0040609d

0040eb6c <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  40eb6c:	b580      	push	{r7, lr}
  40eb6e:	b082      	sub	sp, #8
  40eb70:	af00      	add	r7, sp, #0
  40eb72:	6078      	str	r0, [r7, #4]
  40eb74:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40eb76:	683b      	ldr	r3, [r7, #0]
  40eb78:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40eb7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eb80:	d103      	bne.n	40eb8a <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  40eb82:	683b      	ldr	r3, [r7, #0]
  40eb84:	2200      	movs	r2, #0
  40eb86:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  40eb8a:	683b      	ldr	r3, [r7, #0]
  40eb8c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40eb90:	2b00      	cmp	r3, #0
  40eb92:	d01b      	beq.n	40ebcc <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  40eb94:	683b      	ldr	r3, [r7, #0]
  40eb96:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40eb9a:	683a      	ldr	r2, [r7, #0]
  40eb9c:	4413      	add	r3, r2
  40eb9e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
  40eba2:	6878      	ldr	r0, [r7, #4]
  40eba4:	4619      	mov	r1, r3
  40eba6:	4b14      	ldr	r3, [pc, #80]	; (40ebf8 <uart_process_tx_byte+0x8c>)
  40eba8:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  40ebaa:	683b      	ldr	r3, [r7, #0]
  40ebac:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40ebb0:	3301      	adds	r3, #1
  40ebb2:	b29a      	uxth	r2, r3
  40ebb4:	683b      	ldr	r3, [r7, #0]
  40ebb6:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  40ebba:	683b      	ldr	r3, [r7, #0]
  40ebbc:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40ebc0:	3b01      	subs	r3, #1
  40ebc2:	b29a      	uxth	r2, r3
  40ebc4:	683b      	ldr	r3, [r7, #0]
  40ebc6:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  40ebca:	e008      	b.n	40ebde <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  40ebcc:	683b      	ldr	r3, [r7, #0]
  40ebce:	2200      	movs	r2, #0
  40ebd0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  40ebd4:	6878      	ldr	r0, [r7, #4]
  40ebd6:	f44f 7100 	mov.w	r1, #512	; 0x200
  40ebda:	4b08      	ldr	r3, [pc, #32]	; (40ebfc <uart_process_tx_byte+0x90>)
  40ebdc:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  40ebde:	683b      	ldr	r3, [r7, #0]
  40ebe0:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40ebe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ebe8:	d103      	bne.n	40ebf2 <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  40ebea:	683b      	ldr	r3, [r7, #0]
  40ebec:	2200      	movs	r2, #0
  40ebee:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}	
};
  40ebf2:	3708      	adds	r7, #8
  40ebf4:	46bd      	mov	sp, r7
  40ebf6:	bd80      	pop	{r7, pc}
  40ebf8:	0040de91 	.word	0x0040de91
  40ebfc:	00405d45 	.word	0x00405d45

0040ec00 <vframeTimeOutTimerCallback>:

//static function declarations
static status_t processPackets(); 

void vframeTimeOutTimerCallback()
{
  40ec00:	b480      	push	{r7}
  40ec02:	af00      	add	r7, sp, #0
	vframeTimeOutFlag = 1;
  40ec04:	4b03      	ldr	r3, [pc, #12]	; (40ec14 <vframeTimeOutTimerCallback+0x14>)
  40ec06:	2201      	movs	r2, #1
  40ec08:	701a      	strb	r2, [r3, #0]
}
  40ec0a:	46bd      	mov	sp, r7
  40ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ec10:	4770      	bx	lr
  40ec12:	bf00      	nop
  40ec14:	20003818 	.word	0x20003818

0040ec18 <task_dataHandler>:
 * @brief Handles the incoming data from IMUs
 * @param void *pvParameters
 * @return 
 ***********************************************************************************************/
void task_dataHandler(void *pvParameters)
{
  40ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ec1a:	b091      	sub	sp, #68	; 0x44
  40ec1c:	af02      	add	r7, sp, #8
  40ec1e:	6078      	str	r0, [r7, #4]

	//setup the queue
	queue_dataHandler = xQueueCreate( 50, sizeof(dataPacket_t));
  40ec20:	2032      	movs	r0, #50	; 0x32
  40ec22:	2123      	movs	r1, #35	; 0x23
  40ec24:	4ba4      	ldr	r3, [pc, #656]	; (40eeb8 <task_dataHandler+0x2a0>)
  40ec26:	4798      	blx	r3
  40ec28:	4602      	mov	r2, r0
  40ec2a:	4ba4      	ldr	r3, [pc, #656]	; (40eebc <task_dataHandler+0x2a4>)
  40ec2c:	601a      	str	r2, [r3, #0]
	if(queue_dataHandler == 0)
  40ec2e:	4ba3      	ldr	r3, [pc, #652]	; (40eebc <task_dataHandler+0x2a4>)
  40ec30:	681b      	ldr	r3, [r3, #0]
  40ec32:	2b00      	cmp	r3, #0
  40ec34:	d103      	bne.n	40ec3e <task_dataHandler+0x26>
	{
		// Queue was not created this is an error!
		debugPrintString("an error has occurred, data handler queue failure\r\n"); 
  40ec36:	48a2      	ldr	r0, [pc, #648]	; (40eec0 <task_dataHandler+0x2a8>)
  40ec38:	4ba2      	ldr	r3, [pc, #648]	; (40eec4 <task_dataHandler+0x2ac>)
  40ec3a:	4798      	blx	r3
		return; 
  40ec3c:	e203      	b.n	40f046 <task_dataHandler+0x42e>
	}
	int timerId = 0;
  40ec3e:	2300      	movs	r3, #0
  40ec40:	633b      	str	r3, [r7, #48]	; 0x30

	frameTimeOutTimer = xTimerCreate("Frame Time Out Timer", (PACKET_WAIT_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vframeTimeOutTimerCallback);
  40ec42:	4ba1      	ldr	r3, [pc, #644]	; (40eec8 <task_dataHandler+0x2b0>)
  40ec44:	9300      	str	r3, [sp, #0]
  40ec46:	48a1      	ldr	r0, [pc, #644]	; (40eecc <task_dataHandler+0x2b4>)
  40ec48:	2116      	movs	r1, #22
  40ec4a:	2200      	movs	r2, #0
  40ec4c:	2300      	movs	r3, #0
  40ec4e:	4ca0      	ldr	r4, [pc, #640]	; (40eed0 <task_dataHandler+0x2b8>)
  40ec50:	47a0      	blx	r4
  40ec52:	4602      	mov	r2, r0
  40ec54:	4b9f      	ldr	r3, [pc, #636]	; (40eed4 <task_dataHandler+0x2bc>)
  40ec56:	601a      	str	r2, [r3, #0]
	if (frameTimeOutTimer == NULL)
  40ec58:	4b9e      	ldr	r3, [pc, #632]	; (40eed4 <task_dataHandler+0x2bc>)
  40ec5a:	681b      	ldr	r3, [r3, #0]
  40ec5c:	2b00      	cmp	r3, #0
  40ec5e:	d102      	bne.n	40ec66 <task_dataHandler+0x4e>
	{
		debugPrintString("Failed to create timer task\r\n");
  40ec60:	489d      	ldr	r0, [pc, #628]	; (40eed8 <task_dataHandler+0x2c0>)
  40ec62:	4b98      	ldr	r3, [pc, #608]	; (40eec4 <task_dataHandler+0x2ac>)
  40ec64:	4798      	blx	r3
	}
	
	
	//open file to read. 
	dataPacket_t packet; 
	int i =0; 
  40ec66:	2300      	movs	r3, #0
  40ec68:	637b      	str	r3, [r7, #52]	; 0x34
	//int index = dataFrameTail; 
	while(1)
	{		
		if(xQueueReceive( queue_dataHandler, &( packet ), 1000) == TRUE)
  40ec6a:	4b94      	ldr	r3, [pc, #592]	; (40eebc <task_dataHandler+0x2a4>)
  40ec6c:	681a      	ldr	r2, [r3, #0]
  40ec6e:	f107 030c 	add.w	r3, r7, #12
  40ec72:	4610      	mov	r0, r2
  40ec74:	4619      	mov	r1, r3
  40ec76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40ec7a:	2300      	movs	r3, #0
  40ec7c:	4c97      	ldr	r4, [pc, #604]	; (40eedc <task_dataHandler+0x2c4>)
  40ec7e:	47a0      	blx	r4
  40ec80:	4603      	mov	r3, r0
  40ec82:	2b01      	cmp	r3, #1
  40ec84:	f040 81db 	bne.w	40f03e <task_dataHandler+0x426>
		{			
			//handle packet
			if(packet.type == DATA_PACKET_TYPE_IMU && accelFramesToWrite == 0)
  40ec88:	7b3b      	ldrb	r3, [r7, #12]
  40ec8a:	2b00      	cmp	r3, #0
  40ec8c:	d174      	bne.n	40ed78 <task_dataHandler+0x160>
  40ec8e:	4b94      	ldr	r3, [pc, #592]	; (40eee0 <task_dataHandler+0x2c8>)
  40ec90:	681b      	ldr	r3, [r3, #0]
  40ec92:	2b00      	cmp	r3, #0
  40ec94:	d170      	bne.n	40ed78 <task_dataHandler+0x160>
			{
				if(packetReceivedFlags & (uint16_t)(1 << packet.imuId))
  40ec96:	7b7b      	ldrb	r3, [r7, #13]
  40ec98:	2201      	movs	r2, #1
  40ec9a:	fa02 f303 	lsl.w	r3, r2, r3
  40ec9e:	b29a      	uxth	r2, r3
  40eca0:	4b90      	ldr	r3, [pc, #576]	; (40eee4 <task_dataHandler+0x2cc>)
  40eca2:	881b      	ldrh	r3, [r3, #0]
  40eca4:	4013      	ands	r3, r2
  40eca6:	b29b      	uxth	r3, r3
  40eca8:	2b00      	cmp	r3, #0
  40ecaa:	d033      	beq.n	40ed14 <task_dataHandler+0xfc>
				{
					//we've already received data for this sensor, copy over it...
						memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
  40ecac:	7b7b      	ldrb	r3, [r7, #13]
  40ecae:	461a      	mov	r2, r3
  40ecb0:	4613      	mov	r3, r2
  40ecb2:	009b      	lsls	r3, r3, #2
  40ecb4:	4413      	add	r3, r2
  40ecb6:	00da      	lsls	r2, r3, #3
  40ecb8:	1ad2      	subs	r2, r2, r3
  40ecba:	4b8b      	ldr	r3, [pc, #556]	; (40eee8 <task_dataHandler+0x2d0>)
  40ecbc:	4413      	add	r3, r2
  40ecbe:	f107 040c 	add.w	r4, r7, #12
  40ecc2:	461d      	mov	r5, r3
  40ecc4:	f104 0c20 	add.w	ip, r4, #32
  40ecc8:	462e      	mov	r6, r5
  40ecca:	46a6      	mov	lr, r4
  40eccc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40ecd0:	6030      	str	r0, [r6, #0]
  40ecd2:	6071      	str	r1, [r6, #4]
  40ecd4:	60b2      	str	r2, [r6, #8]
  40ecd6:	60f3      	str	r3, [r6, #12]
  40ecd8:	3410      	adds	r4, #16
  40ecda:	3510      	adds	r5, #16
  40ecdc:	4564      	cmp	r4, ip
  40ecde:	d1f3      	bne.n	40ecc8 <task_dataHandler+0xb0>
  40ece0:	462b      	mov	r3, r5
  40ece2:	4622      	mov	r2, r4
  40ece4:	8811      	ldrh	r1, [r2, #0]
  40ece6:	7892      	ldrb	r2, [r2, #2]
  40ece8:	8019      	strh	r1, [r3, #0]
  40ecea:	709a      	strb	r2, [r3, #2]
						imuConfig[packet.imuIndex].stats.droppedPackets++; //we're dropping a packet. 	TODO must fix this case	
  40ecec:	7bbb      	ldrb	r3, [r7, #14]
  40ecee:	461a      	mov	r2, r3
  40ecf0:	497e      	ldr	r1, [pc, #504]	; (40eeec <task_dataHandler+0x2d4>)
  40ecf2:	4613      	mov	r3, r2
  40ecf4:	00db      	lsls	r3, r3, #3
  40ecf6:	1a9b      	subs	r3, r3, r2
  40ecf8:	00db      	lsls	r3, r3, #3
  40ecfa:	440b      	add	r3, r1
  40ecfc:	3320      	adds	r3, #32
  40ecfe:	689b      	ldr	r3, [r3, #8]
  40ed00:	1c59      	adds	r1, r3, #1
  40ed02:	487a      	ldr	r0, [pc, #488]	; (40eeec <task_dataHandler+0x2d4>)
  40ed04:	4613      	mov	r3, r2
  40ed06:	00db      	lsls	r3, r3, #3
  40ed08:	1a9b      	subs	r3, r3, r2
  40ed0a:	00db      	lsls	r3, r3, #3
  40ed0c:	4403      	add	r3, r0
  40ed0e:	3320      	adds	r3, #32
  40ed10:	6099      	str	r1, [r3, #8]
  40ed12:	e030      	b.n	40ed76 <task_dataHandler+0x15e>
				}
				else
				{
					//make sure the index is alright. 
					if(packet.imuId < NUMBER_OF_SENSORS)
  40ed14:	7b7b      	ldrb	r3, [r7, #13]
  40ed16:	2b09      	cmp	r3, #9
  40ed18:	d82d      	bhi.n	40ed76 <task_dataHandler+0x15e>
					{
						memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
  40ed1a:	7b7b      	ldrb	r3, [r7, #13]
  40ed1c:	461a      	mov	r2, r3
  40ed1e:	4613      	mov	r3, r2
  40ed20:	009b      	lsls	r3, r3, #2
  40ed22:	4413      	add	r3, r2
  40ed24:	00da      	lsls	r2, r3, #3
  40ed26:	1ad2      	subs	r2, r2, r3
  40ed28:	4b6f      	ldr	r3, [pc, #444]	; (40eee8 <task_dataHandler+0x2d0>)
  40ed2a:	4413      	add	r3, r2
  40ed2c:	f107 040c 	add.w	r4, r7, #12
  40ed30:	461d      	mov	r5, r3
  40ed32:	f104 0c20 	add.w	ip, r4, #32
  40ed36:	462e      	mov	r6, r5
  40ed38:	46a6      	mov	lr, r4
  40ed3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40ed3e:	6030      	str	r0, [r6, #0]
  40ed40:	6071      	str	r1, [r6, #4]
  40ed42:	60b2      	str	r2, [r6, #8]
  40ed44:	60f3      	str	r3, [r6, #12]
  40ed46:	3410      	adds	r4, #16
  40ed48:	3510      	adds	r5, #16
  40ed4a:	4564      	cmp	r4, ip
  40ed4c:	d1f3      	bne.n	40ed36 <task_dataHandler+0x11e>
  40ed4e:	462b      	mov	r3, r5
  40ed50:	4622      	mov	r2, r4
  40ed52:	8811      	ldrh	r1, [r2, #0]
  40ed54:	7892      	ldrb	r2, [r2, #2]
  40ed56:	8019      	strh	r1, [r3, #0]
  40ed58:	709a      	strb	r2, [r3, #2]
						packetReceivedFlags |= (1 << packet.imuId); //set flag
  40ed5a:	7b7b      	ldrb	r3, [r7, #13]
  40ed5c:	2201      	movs	r2, #1
  40ed5e:	fa02 f303 	lsl.w	r3, r2, r3
  40ed62:	b29a      	uxth	r2, r3
  40ed64:	4b5f      	ldr	r3, [pc, #380]	; (40eee4 <task_dataHandler+0x2cc>)
  40ed66:	881b      	ldrh	r3, [r3, #0]
  40ed68:	b29b      	uxth	r3, r3
  40ed6a:	4313      	orrs	r3, r2
  40ed6c:	b29b      	uxth	r3, r3
  40ed6e:	b29a      	uxth	r2, r3
  40ed70:	4b5c      	ldr	r3, [pc, #368]	; (40eee4 <task_dataHandler+0x2cc>)
  40ed72:	801a      	strh	r2, [r3, #0]
		if(xQueueReceive( queue_dataHandler, &( packet ), 1000) == TRUE)
		{			
			//handle packet
			if(packet.type == DATA_PACKET_TYPE_IMU && accelFramesToWrite == 0)
			{
				if(packetReceivedFlags & (uint16_t)(1 << packet.imuId))
  40ed74:	e08c      	b.n	40ee90 <task_dataHandler+0x278>
  40ed76:	e08b      	b.n	40ee90 <task_dataHandler+0x278>
						memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
						packetReceivedFlags |= (1 << packet.imuId); //set flag
					}
				}	
			}
			else if(packet.type == DATA_PACKET_TYPE_ACCEL && accelFramesToWrite > 0)
  40ed78:	7b3b      	ldrb	r3, [r7, #12]
  40ed7a:	2b03      	cmp	r3, #3
  40ed7c:	d131      	bne.n	40ede2 <task_dataHandler+0x1ca>
  40ed7e:	4b58      	ldr	r3, [pc, #352]	; (40eee0 <task_dataHandler+0x2c8>)
  40ed80:	681b      	ldr	r3, [r3, #0]
  40ed82:	2b00      	cmp	r3, #0
  40ed84:	d02d      	beq.n	40ede2 <task_dataHandler+0x1ca>
			{
				memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
  40ed86:	7b7b      	ldrb	r3, [r7, #13]
  40ed88:	461a      	mov	r2, r3
  40ed8a:	4613      	mov	r3, r2
  40ed8c:	009b      	lsls	r3, r3, #2
  40ed8e:	4413      	add	r3, r2
  40ed90:	00da      	lsls	r2, r3, #3
  40ed92:	1ad2      	subs	r2, r2, r3
  40ed94:	4b54      	ldr	r3, [pc, #336]	; (40eee8 <task_dataHandler+0x2d0>)
  40ed96:	4413      	add	r3, r2
  40ed98:	f107 040c 	add.w	r4, r7, #12
  40ed9c:	461d      	mov	r5, r3
  40ed9e:	f104 0c20 	add.w	ip, r4, #32
  40eda2:	462e      	mov	r6, r5
  40eda4:	46a6      	mov	lr, r4
  40eda6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40edaa:	6030      	str	r0, [r6, #0]
  40edac:	6071      	str	r1, [r6, #4]
  40edae:	60b2      	str	r2, [r6, #8]
  40edb0:	60f3      	str	r3, [r6, #12]
  40edb2:	3410      	adds	r4, #16
  40edb4:	3510      	adds	r5, #16
  40edb6:	4564      	cmp	r4, ip
  40edb8:	d1f3      	bne.n	40eda2 <task_dataHandler+0x18a>
  40edba:	462b      	mov	r3, r5
  40edbc:	4622      	mov	r2, r4
  40edbe:	8811      	ldrh	r1, [r2, #0]
  40edc0:	7892      	ldrb	r2, [r2, #2]
  40edc2:	8019      	strh	r1, [r3, #0]
  40edc4:	709a      	strb	r2, [r3, #2]
				accelPacketReceivedFlags |= (1 << packet.imuId); //set flag								
  40edc6:	7b7b      	ldrb	r3, [r7, #13]
  40edc8:	2201      	movs	r2, #1
  40edca:	fa02 f303 	lsl.w	r3, r2, r3
  40edce:	b29a      	uxth	r2, r3
  40edd0:	4b47      	ldr	r3, [pc, #284]	; (40eef0 <task_dataHandler+0x2d8>)
  40edd2:	881b      	ldrh	r3, [r3, #0]
  40edd4:	b29b      	uxth	r3, r3
  40edd6:	4313      	orrs	r3, r2
  40edd8:	b29b      	uxth	r3, r3
  40edda:	b29a      	uxth	r2, r3
  40eddc:	4b44      	ldr	r3, [pc, #272]	; (40eef0 <task_dataHandler+0x2d8>)
  40edde:	801a      	strh	r2, [r3, #0]
  40ede0:	e056      	b.n	40ee90 <task_dataHandler+0x278>
			}
			
			else if(packet.type == DATA_PACKET_TYPE_SS && accelFramesToWrite == 0)
  40ede2:	7b3b      	ldrb	r3, [r7, #12]
  40ede4:	2b01      	cmp	r3, #1
  40ede6:	d144      	bne.n	40ee72 <task_dataHandler+0x25a>
  40ede8:	4b3d      	ldr	r3, [pc, #244]	; (40eee0 <task_dataHandler+0x2c8>)
  40edea:	681b      	ldr	r3, [r3, #0]
  40edec:	2b00      	cmp	r3, #0
  40edee:	d140      	bne.n	40ee72 <task_dataHandler+0x25a>
			{
				if(packetReceivedFlags & (uint16_t)(1 << NUMBER_OF_SENSORS -1))
  40edf0:	4b3c      	ldr	r3, [pc, #240]	; (40eee4 <task_dataHandler+0x2cc>)
  40edf2:	881b      	ldrh	r3, [r3, #0]
  40edf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40edf8:	2b00      	cmp	r3, #0
  40edfa:	d019      	beq.n	40ee30 <task_dataHandler+0x218>
				{
					//we've already received data for this sensor, process all the bytes as is.	
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));				
  40edfc:	4b3a      	ldr	r3, [pc, #232]	; (40eee8 <task_dataHandler+0x2d0>)
  40edfe:	f107 040c 	add.w	r4, r7, #12
  40ee02:	f203 153b 	addw	r5, r3, #315	; 0x13b
  40ee06:	f104 0c20 	add.w	ip, r4, #32
  40ee0a:	462e      	mov	r6, r5
  40ee0c:	46a6      	mov	lr, r4
  40ee0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40ee12:	6030      	str	r0, [r6, #0]
  40ee14:	6071      	str	r1, [r6, #4]
  40ee16:	60b2      	str	r2, [r6, #8]
  40ee18:	60f3      	str	r3, [r6, #12]
  40ee1a:	3410      	adds	r4, #16
  40ee1c:	3510      	adds	r5, #16
  40ee1e:	4564      	cmp	r4, ip
  40ee20:	d1f3      	bne.n	40ee0a <task_dataHandler+0x1f2>
  40ee22:	462b      	mov	r3, r5
  40ee24:	4622      	mov	r2, r4
  40ee26:	8811      	ldrh	r1, [r2, #0]
  40ee28:	7892      	ldrb	r2, [r2, #2]
  40ee2a:	8019      	strh	r1, [r3, #0]
  40ee2c:	709a      	strb	r2, [r3, #2]
				accelPacketReceivedFlags |= (1 << packet.imuId); //set flag								
			}
			
			else if(packet.type == DATA_PACKET_TYPE_SS && accelFramesToWrite == 0)
			{
				if(packetReceivedFlags & (uint16_t)(1 << NUMBER_OF_SENSORS -1))
  40ee2e:	e02f      	b.n	40ee90 <task_dataHandler+0x278>
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));				
				}
				else
				{
					//FabSense data always stored at end of buffer
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));
  40ee30:	4b2d      	ldr	r3, [pc, #180]	; (40eee8 <task_dataHandler+0x2d0>)
  40ee32:	f107 040c 	add.w	r4, r7, #12
  40ee36:	f203 153b 	addw	r5, r3, #315	; 0x13b
  40ee3a:	f104 0c20 	add.w	ip, r4, #32
  40ee3e:	462e      	mov	r6, r5
  40ee40:	46a6      	mov	lr, r4
  40ee42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40ee46:	6030      	str	r0, [r6, #0]
  40ee48:	6071      	str	r1, [r6, #4]
  40ee4a:	60b2      	str	r2, [r6, #8]
  40ee4c:	60f3      	str	r3, [r6, #12]
  40ee4e:	3410      	adds	r4, #16
  40ee50:	3510      	adds	r5, #16
  40ee52:	4564      	cmp	r4, ip
  40ee54:	d1f3      	bne.n	40ee3e <task_dataHandler+0x226>
  40ee56:	462b      	mov	r3, r5
  40ee58:	4622      	mov	r2, r4
  40ee5a:	8811      	ldrh	r1, [r2, #0]
  40ee5c:	7892      	ldrb	r2, [r2, #2]
  40ee5e:	8019      	strh	r1, [r3, #0]
  40ee60:	709a      	strb	r2, [r3, #2]
					packetReceivedFlags |= (1 << NUMBER_OF_SENSORS -1); //set flag
  40ee62:	4b20      	ldr	r3, [pc, #128]	; (40eee4 <task_dataHandler+0x2cc>)
  40ee64:	881b      	ldrh	r3, [r3, #0]
  40ee66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40ee6a:	b29a      	uxth	r2, r3
  40ee6c:	4b1d      	ldr	r3, [pc, #116]	; (40eee4 <task_dataHandler+0x2cc>)
  40ee6e:	801a      	strh	r2, [r3, #0]
				accelPacketReceivedFlags |= (1 << packet.imuId); //set flag								
			}
			
			else if(packet.type == DATA_PACKET_TYPE_SS && accelFramesToWrite == 0)
			{
				if(packetReceivedFlags & (uint16_t)(1 << NUMBER_OF_SENSORS -1))
  40ee70:	e00e      	b.n	40ee90 <task_dataHandler+0x278>
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));
					packetReceivedFlags |= (1 << NUMBER_OF_SENSORS -1); //set flag
				}				
			}
			
			else if (packet.type == DATA_PACKET_TYPE_BUTTON && getCurrentState() == SYS_STATE_RECORDING)	//process the button event only while recording
  40ee72:	7b3b      	ldrb	r3, [r7, #12]
  40ee74:	2b05      	cmp	r3, #5
  40ee76:	d10b      	bne.n	40ee90 <task_dataHandler+0x278>
  40ee78:	4b1e      	ldr	r3, [pc, #120]	; (40eef4 <task_dataHandler+0x2dc>)
  40ee7a:	4798      	blx	r3
  40ee7c:	4603      	mov	r3, r0
  40ee7e:	2b04      	cmp	r3, #4
  40ee80:	d106      	bne.n	40ee90 <task_dataHandler+0x278>
			{
				if (sentFirstFrame == TRUE)
  40ee82:	4b1d      	ldr	r3, [pc, #116]	; (40eef8 <task_dataHandler+0x2e0>)
  40ee84:	781b      	ldrb	r3, [r3, #0]
  40ee86:	2b00      	cmp	r3, #0
  40ee88:	d002      	beq.n	40ee90 <task_dataHandler+0x278>
				{
					buttonEvent = TRUE;
  40ee8a:	4b1c      	ldr	r3, [pc, #112]	; (40eefc <task_dataHandler+0x2e4>)
  40ee8c:	2201      	movs	r2, #1
  40ee8e:	701a      	strb	r2, [r3, #0]
				}
			}
			
			if((packetReceivedFlags == packetReceivedMask) || (vframeTimeOutFlag == 1))
  40ee90:	4b14      	ldr	r3, [pc, #80]	; (40eee4 <task_dataHandler+0x2cc>)
  40ee92:	881a      	ldrh	r2, [r3, #0]
  40ee94:	4b1a      	ldr	r3, [pc, #104]	; (40ef00 <task_dataHandler+0x2e8>)
  40ee96:	881b      	ldrh	r3, [r3, #0]
  40ee98:	b29b      	uxth	r3, r3
  40ee9a:	429a      	cmp	r2, r3
  40ee9c:	d004      	beq.n	40eea8 <task_dataHandler+0x290>
  40ee9e:	4b19      	ldr	r3, [pc, #100]	; (40ef04 <task_dataHandler+0x2ec>)
  40eea0:	781b      	ldrb	r3, [r3, #0]
  40eea2:	2b01      	cmp	r3, #1
  40eea4:	f040 80aa 	bne.w	40effc <task_dataHandler+0x3e4>
			{
				
				if(vframeTimeOutFlag == 1)
  40eea8:	4b16      	ldr	r3, [pc, #88]	; (40ef04 <task_dataHandler+0x2ec>)
  40eeaa:	781b      	ldrb	r3, [r3, #0]
  40eeac:	2b01      	cmp	r3, #1
  40eeae:	d16f      	bne.n	40ef90 <task_dataHandler+0x378>
				{
					//since this is an incomplete frame, tally the total lost frames count
					for(i=0;i<NUMBER_OF_SENSORS;i++)
  40eeb0:	2300      	movs	r3, #0
  40eeb2:	637b      	str	r3, [r7, #52]	; 0x34
  40eeb4:	e069      	b.n	40ef8a <task_dataHandler+0x372>
  40eeb6:	bf00      	nop
  40eeb8:	0040a8c5 	.word	0x0040a8c5
  40eebc:	20003814 	.word	0x20003814
  40eec0:	0041d5f8 	.word	0x0041d5f8
  40eec4:	004016d5 	.word	0x004016d5
  40eec8:	0040ec01 	.word	0x0040ec01
  40eecc:	0041d62c 	.word	0x0041d62c
  40eed0:	0040bfbd 	.word	0x0040bfbd
  40eed4:	20004f2c 	.word	0x20004f2c
  40eed8:	0041d644 	.word	0x0041d644
  40eedc:	0040abd5 	.word	0x0040abd5
  40eee0:	20003828 	.word	0x20003828
  40eee4:	2000381c 	.word	0x2000381c
  40eee8:	20004f30 	.word	0x20004f30
  40eeec:	200002d8 	.word	0x200002d8
  40eef0:	20003822 	.word	0x20003822
  40eef4:	004025e9 	.word	0x004025e9
  40eef8:	20003819 	.word	0x20003819
  40eefc:	2000381a 	.word	0x2000381a
  40ef00:	2000381e 	.word	0x2000381e
  40ef04:	20003818 	.word	0x20003818
					{
						if(((packetReceivedFlags >> i) & 0x0001) == 0)
  40ef08:	4b50      	ldr	r3, [pc, #320]	; (40f04c <task_dataHandler+0x434>)
  40ef0a:	881b      	ldrh	r3, [r3, #0]
  40ef0c:	461a      	mov	r2, r3
  40ef0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40ef10:	fa42 f303 	asr.w	r3, r2, r3
  40ef14:	f003 0301 	and.w	r3, r3, #1
  40ef18:	2b00      	cmp	r3, #0
  40ef1a:	d12e      	bne.n	40ef7a <task_dataHandler+0x362>
						{
							missingSensorPacketCounts[i]++;
  40ef1c:	4b4c      	ldr	r3, [pc, #304]	; (40f050 <task_dataHandler+0x438>)
  40ef1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40ef24:	3301      	adds	r3, #1
  40ef26:	b299      	uxth	r1, r3
  40ef28:	4b49      	ldr	r3, [pc, #292]	; (40f050 <task_dataHandler+0x438>)
  40ef2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
							if(missingSensorPacketCounts[i] > PACKET_LOSS_COUNT_FOR_RECONNECT)
  40ef30:	4b47      	ldr	r3, [pc, #284]	; (40f050 <task_dataHandler+0x438>)
  40ef32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40ef38:	2b14      	cmp	r3, #20
  40ef3a:	d923      	bls.n	40ef84 <task_dataHandler+0x36c>
							{
								//send the connect command. 								
								if(sentReconnectToQuintics == FALSE)
  40ef3c:	4b45      	ldr	r3, [pc, #276]	; (40f054 <task_dataHandler+0x43c>)
  40ef3e:	781b      	ldrb	r3, [r3, #0]
  40ef40:	f083 0301 	eor.w	r3, r3, #1
  40ef44:	b2db      	uxtb	r3, r3
  40ef46:	2b00      	cmp	r3, #0
  40ef48:	d002      	beq.n	40ef50 <task_dataHandler+0x338>
								{							
									sentReconnectToQuintics = TRUE;
  40ef4a:	4b42      	ldr	r3, [pc, #264]	; (40f054 <task_dataHandler+0x43c>)
  40ef4c:	2201      	movs	r2, #1
  40ef4e:	701a      	strb	r2, [r3, #0]
								}
								if (missingSensorPacketCounts[i] >= PACKET_LOSS_COUNT_FOR_ERROR)	//if sensor stays disconnected for more than 100 frames
  40ef50:	4b3f      	ldr	r3, [pc, #252]	; (40f050 <task_dataHandler+0x438>)
  40ef52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40ef58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40ef5c:	d312      	bcc.n	40ef84 <task_dataHandler+0x36c>
								{
									missingSensorPacketCounts[i] = 0;
  40ef5e:	4b3c      	ldr	r3, [pc, #240]	; (40f050 <task_dataHandler+0x438>)
  40ef60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef62:	2100      	movs	r1, #0
  40ef64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
									debugPrintStringInt("Connection try out\r\n", i);
  40ef68:	483b      	ldr	r0, [pc, #236]	; (40f058 <task_dataHandler+0x440>)
  40ef6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
  40ef6c:	4b3b      	ldr	r3, [pc, #236]	; (40f05c <task_dataHandler+0x444>)
  40ef6e:	4798      	blx	r3
									task_stateMachine_EnqueueEvent(SYS_EVENT_IMU_DISCONNECT, 0x00);	//Send IMU_DISCONNECT event
  40ef70:	2006      	movs	r0, #6
  40ef72:	2100      	movs	r1, #0
  40ef74:	4b3a      	ldr	r3, [pc, #232]	; (40f060 <task_dataHandler+0x448>)
  40ef76:	4798      	blx	r3
  40ef78:	e004      	b.n	40ef84 <task_dataHandler+0x36c>
								}
							}	
						}
						else
						{
							missingSensorPacketCounts[i] = 0;
  40ef7a:	4b35      	ldr	r3, [pc, #212]	; (40f050 <task_dataHandler+0x438>)
  40ef7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40ef7e:	2100      	movs	r1, #0
  40ef80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			{
				
				if(vframeTimeOutFlag == 1)
				{
					//since this is an incomplete frame, tally the total lost frames count
					for(i=0;i<NUMBER_OF_SENSORS;i++)
  40ef84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40ef86:	3301      	adds	r3, #1
  40ef88:	637b      	str	r3, [r7, #52]	; 0x34
  40ef8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40ef8c:	2b09      	cmp	r3, #9
  40ef8e:	ddbb      	ble.n	40ef08 <task_dataHandler+0x2f0>
						{
							missingSensorPacketCounts[i] = 0;
						}						
					}					
				}
 				vframeTimeOutFlag = 0; 	
  40ef90:	4b34      	ldr	r3, [pc, #208]	; (40f064 <task_dataHandler+0x44c>)
  40ef92:	2200      	movs	r2, #0
  40ef94:	701a      	strb	r2, [r3, #0]
 				xTimerReset(frameTimeOutTimer, 0);
  40ef96:	4b34      	ldr	r3, [pc, #208]	; (40f068 <task_dataHandler+0x450>)
  40ef98:	681c      	ldr	r4, [r3, #0]
  40ef9a:	4b34      	ldr	r3, [pc, #208]	; (40f06c <task_dataHandler+0x454>)
  40ef9c:	4798      	blx	r3
  40ef9e:	4603      	mov	r3, r0
  40efa0:	2200      	movs	r2, #0
  40efa2:	9200      	str	r2, [sp, #0]
  40efa4:	4620      	mov	r0, r4
  40efa6:	2100      	movs	r1, #0
  40efa8:	461a      	mov	r2, r3
  40efaa:	2300      	movs	r3, #0
  40efac:	4c30      	ldr	r4, [pc, #192]	; (40f070 <task_dataHandler+0x458>)
  40efae:	47a0      	blx	r4
 				if (packetReceivedFlags == packetReceivedMask)
  40efb0:	4b26      	ldr	r3, [pc, #152]	; (40f04c <task_dataHandler+0x434>)
  40efb2:	881a      	ldrh	r2, [r3, #0]
  40efb4:	4b2f      	ldr	r3, [pc, #188]	; (40f074 <task_dataHandler+0x45c>)
  40efb6:	881b      	ldrh	r3, [r3, #0]
  40efb8:	b29b      	uxth	r3, r3
  40efba:	429a      	cmp	r2, r3
  40efbc:	d115      	bne.n	40efea <task_dataHandler+0x3d2>
 				{
					//set all the missing packet counts to zero. 
					memset(missingSensorPacketCounts, 0,sizeof(missingSensorPacketCounts)); 					
  40efbe:	4824      	ldr	r0, [pc, #144]	; (40f050 <task_dataHandler+0x438>)
  40efc0:	2100      	movs	r1, #0
  40efc2:	2214      	movs	r2, #20
  40efc4:	4b2c      	ldr	r3, [pc, #176]	; (40f078 <task_dataHandler+0x460>)
  40efc6:	4798      	blx	r3
					if(sentFirstFrame == FALSE)
  40efc8:	4b2c      	ldr	r3, [pc, #176]	; (40f07c <task_dataHandler+0x464>)
  40efca:	781b      	ldrb	r3, [r3, #0]
  40efcc:	f083 0301 	eor.w	r3, r3, #1
  40efd0:	b2db      	uxtb	r3, r3
  40efd2:	2b00      	cmp	r3, #0
  40efd4:	d006      	beq.n	40efe4 <task_dataHandler+0x3cc>
					{
						drv_led_set(DRV_LED_RED, DRV_LED_SOLID);	
  40efd6:	2000      	movs	r0, #0
  40efd8:	2101      	movs	r1, #1
  40efda:	4b29      	ldr	r3, [pc, #164]	; (40f080 <task_dataHandler+0x468>)
  40efdc:	4798      	blx	r3
						sentFirstFrame = TRUE;
  40efde:	4b27      	ldr	r3, [pc, #156]	; (40f07c <task_dataHandler+0x464>)
  40efe0:	2201      	movs	r2, #1
  40efe2:	701a      	strb	r2, [r3, #0]
					}	 				
					sentReconnectToQuintics = FALSE; 
  40efe4:	4b1b      	ldr	r3, [pc, #108]	; (40f054 <task_dataHandler+0x43c>)
  40efe6:	2200      	movs	r2, #0
  40efe8:	701a      	strb	r2, [r3, #0]
 				}
 				if (sentFirstFrame == TRUE)
  40efea:	4b24      	ldr	r3, [pc, #144]	; (40f07c <task_dataHandler+0x464>)
  40efec:	781b      	ldrb	r3, [r3, #0]
  40efee:	2b00      	cmp	r3, #0
  40eff0:	d004      	beq.n	40effc <task_dataHandler+0x3e4>
 				{
					processPackets();
  40eff2:	4b24      	ldr	r3, [pc, #144]	; (40f084 <task_dataHandler+0x46c>)
  40eff4:	4798      	blx	r3
					//clear flag at the end
					packetReceivedFlags = 0x0000;
  40eff6:	4b15      	ldr	r3, [pc, #84]	; (40f04c <task_dataHandler+0x434>)
  40eff8:	2200      	movs	r2, #0
  40effa:	801a      	strh	r2, [r3, #0]
				}				
			}				
			//if we're currently writing 
			if(accelFramesToWrite > 0)
  40effc:	4b22      	ldr	r3, [pc, #136]	; (40f088 <task_dataHandler+0x470>)
  40effe:	681b      	ldr	r3, [r3, #0]
  40f000:	2b00      	cmp	r3, #0
  40f002:	d01c      	beq.n	40f03e <task_dataHandler+0x426>
			{
				if(accelPacketReceivedFlags == accelPacketReceivedMask)
  40f004:	4b21      	ldr	r3, [pc, #132]	; (40f08c <task_dataHandler+0x474>)
  40f006:	881a      	ldrh	r2, [r3, #0]
  40f008:	4b21      	ldr	r3, [pc, #132]	; (40f090 <task_dataHandler+0x478>)
  40f00a:	881b      	ldrh	r3, [r3, #0]
  40f00c:	b29b      	uxth	r3, r3
  40f00e:	429a      	cmp	r2, r3
  40f010:	d115      	bne.n	40f03e <task_dataHandler+0x426>
				{
					//set the last packet to be stretchsense. 
					packetBuffer[NUMBER_OF_SENSORS -1].type = DATA_PACKET_TYPE_SS; 
  40f012:	4b20      	ldr	r3, [pc, #128]	; (40f094 <task_dataHandler+0x47c>)
  40f014:	2201      	movs	r2, #1
  40f016:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					processPackets(); 
  40f01a:	4b1a      	ldr	r3, [pc, #104]	; (40f084 <task_dataHandler+0x46c>)
  40f01c:	4798      	blx	r3
					//clear flag at the end
					accelPacketReceivedFlags = 0x0000;
  40f01e:	4b1b      	ldr	r3, [pc, #108]	; (40f08c <task_dataHandler+0x474>)
  40f020:	2200      	movs	r2, #0
  40f022:	801a      	strh	r2, [r3, #0]
					accelFramesToWrite--;
  40f024:	4b18      	ldr	r3, [pc, #96]	; (40f088 <task_dataHandler+0x470>)
  40f026:	681b      	ldr	r3, [r3, #0]
  40f028:	1e5a      	subs	r2, r3, #1
  40f02a:	4b17      	ldr	r3, [pc, #92]	; (40f088 <task_dataHandler+0x470>)
  40f02c:	601a      	str	r2, [r3, #0]
					if(accelFramesToWrite == 0)
  40f02e:	4b16      	ldr	r3, [pc, #88]	; (40f088 <task_dataHandler+0x470>)
  40f030:	681b      	ldr	r3, [r3, #0]
  40f032:	2b00      	cmp	r3, #0
  40f034:	d103      	bne.n	40f03e <task_dataHandler+0x426>
					{
						task_stateMachine_EnqueueEvent(SYS_EVENT_GET_ACCEL_DATA_COMPLETE,0x00); 
  40f036:	200d      	movs	r0, #13
  40f038:	2100      	movs	r1, #0
  40f03a:	4b09      	ldr	r3, [pc, #36]	; (40f060 <task_dataHandler+0x448>)
  40f03c:	4798      	blx	r3
					}
				}
			}						
		}		
		vTaskDelay(1);
  40f03e:	2001      	movs	r0, #1
  40f040:	4b15      	ldr	r3, [pc, #84]	; (40f098 <task_dataHandler+0x480>)
  40f042:	4798      	blx	r3
	}
  40f044:	e611      	b.n	40ec6a <task_dataHandler+0x52>
	
}
  40f046:	373c      	adds	r7, #60	; 0x3c
  40f048:	46bd      	mov	sp, r7
  40f04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f04c:	2000381c 	.word	0x2000381c
  40f050:	20004f18 	.word	0x20004f18
  40f054:	2000381b 	.word	0x2000381b
  40f058:	0041d664 	.word	0x0041d664
  40f05c:	004015c1 	.word	0x004015c1
  40f060:	00402581 	.word	0x00402581
  40f064:	20003818 	.word	0x20003818
  40f068:	20004f2c 	.word	0x20004f2c
  40f06c:	0040b44d 	.word	0x0040b44d
  40f070:	0040c029 	.word	0x0040c029
  40f074:	2000381e 	.word	0x2000381e
  40f078:	0041309d 	.word	0x0041309d
  40f07c:	20003819 	.word	0x20003819
  40f080:	0040083d 	.word	0x0040083d
  40f084:	0040f1a1 	.word	0x0040f1a1
  40f088:	20003828 	.word	0x20003828
  40f08c:	20003822 	.word	0x20003822
  40f090:	20003820 	.word	0x20003820
  40f094:	20004f30 	.word	0x20004f30
  40f098:	0040b24d 	.word	0x0040b24d

0040f09c <task_dataProcessor_startGetAccelData>:

void task_dataProcessor_startGetAccelData(uint32_t numberOfFrames)
{
  40f09c:	b590      	push	{r4, r7, lr}
  40f09e:	b085      	sub	sp, #20
  40f0a0:	af02      	add	r7, sp, #8
  40f0a2:	6078      	str	r0, [r7, #4]
	//this function resets the flags and clears the memory buffers before a recording.  
	sentFirstFrame = FALSE; //the system will only start streaming once all the sensor have checked in.
  40f0a4:	4b15      	ldr	r3, [pc, #84]	; (40f0fc <task_dataProcessor_startGetAccelData+0x60>)
  40f0a6:	2200      	movs	r2, #0
  40f0a8:	701a      	strb	r2, [r3, #0]
	memset(packetBuffer, 0x00, sizeof(packetBuffer));	
  40f0aa:	4815      	ldr	r0, [pc, #84]	; (40f100 <task_dataProcessor_startGetAccelData+0x64>)
  40f0ac:	2100      	movs	r1, #0
  40f0ae:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40f0b2:	4b14      	ldr	r3, [pc, #80]	; (40f104 <task_dataProcessor_startGetAccelData+0x68>)
  40f0b4:	4798      	blx	r3
	packetBuffer[NUMBER_OF_SENSORS -1].type = DATA_PACKET_TYPE_SS; 
  40f0b6:	4b12      	ldr	r3, [pc, #72]	; (40f100 <task_dataProcessor_startGetAccelData+0x64>)
  40f0b8:	2201      	movs	r2, #1
  40f0ba:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	accelPacketReceivedFlags = 0x0000;
  40f0be:	4b12      	ldr	r3, [pc, #72]	; (40f108 <task_dataProcessor_startGetAccelData+0x6c>)
  40f0c0:	2200      	movs	r2, #0
  40f0c2:	801a      	strh	r2, [r3, #0]
	packetReceivedFlags = 0x0000; // Set it to 0x0000 to indicate its an acceleration frame. 
  40f0c4:	4b11      	ldr	r3, [pc, #68]	; (40f10c <task_dataProcessor_startGetAccelData+0x70>)
  40f0c6:	2200      	movs	r2, #0
  40f0c8:	801a      	strh	r2, [r3, #0]
	memset(missingSensorPacketCounts, 0,sizeof(missingSensorPacketCounts));
  40f0ca:	4811      	ldr	r0, [pc, #68]	; (40f110 <task_dataProcessor_startGetAccelData+0x74>)
  40f0cc:	2100      	movs	r1, #0
  40f0ce:	2214      	movs	r2, #20
  40f0d0:	4b0c      	ldr	r3, [pc, #48]	; (40f104 <task_dataProcessor_startGetAccelData+0x68>)
  40f0d2:	4798      	blx	r3
	accelFramesToWrite = numberOfFrames;
  40f0d4:	4b0f      	ldr	r3, [pc, #60]	; (40f114 <task_dataProcessor_startGetAccelData+0x78>)
  40f0d6:	687a      	ldr	r2, [r7, #4]
  40f0d8:	601a      	str	r2, [r3, #0]
	xTimerStop(frameTimeOutTimer, 0);
  40f0da:	4b0f      	ldr	r3, [pc, #60]	; (40f118 <task_dataProcessor_startGetAccelData+0x7c>)
  40f0dc:	681b      	ldr	r3, [r3, #0]
  40f0de:	2200      	movs	r2, #0
  40f0e0:	9200      	str	r2, [sp, #0]
  40f0e2:	4618      	mov	r0, r3
  40f0e4:	2101      	movs	r1, #1
  40f0e6:	2200      	movs	r2, #0
  40f0e8:	2300      	movs	r3, #0
  40f0ea:	4c0c      	ldr	r4, [pc, #48]	; (40f11c <task_dataProcessor_startGetAccelData+0x80>)
  40f0ec:	47a0      	blx	r4
	vframeTimeOutFlag = 0;
  40f0ee:	4b0c      	ldr	r3, [pc, #48]	; (40f120 <task_dataProcessor_startGetAccelData+0x84>)
  40f0f0:	2200      	movs	r2, #0
  40f0f2:	701a      	strb	r2, [r3, #0]
}
  40f0f4:	370c      	adds	r7, #12
  40f0f6:	46bd      	mov	sp, r7
  40f0f8:	bd90      	pop	{r4, r7, pc}
  40f0fa:	bf00      	nop
  40f0fc:	20003819 	.word	0x20003819
  40f100:	20004f30 	.word	0x20004f30
  40f104:	0041309d 	.word	0x0041309d
  40f108:	20003822 	.word	0x20003822
  40f10c:	2000381c 	.word	0x2000381c
  40f110:	20004f18 	.word	0x20004f18
  40f114:	20003828 	.word	0x20003828
  40f118:	20004f2c 	.word	0x20004f2c
  40f11c:	0040c029 	.word	0x0040c029
  40f120:	20003818 	.word	0x20003818

0040f124 <task_dataProcessor_startRecording>:

void task_dataProcessor_startRecording()
{
  40f124:	b590      	push	{r4, r7, lr}
  40f126:	b083      	sub	sp, #12
  40f128:	af02      	add	r7, sp, #8
	//this function resets the flags and clears the memory buffers before a recording. 
	sentFirstFrame = FALSE; //the system will only start streaming once all the sensor have checked in. 
  40f12a:	4b13      	ldr	r3, [pc, #76]	; (40f178 <task_dataProcessor_startRecording+0x54>)
  40f12c:	2200      	movs	r2, #0
  40f12e:	701a      	strb	r2, [r3, #0]
	memset(packetBuffer, 0x00, sizeof(packetBuffer));
  40f130:	4812      	ldr	r0, [pc, #72]	; (40f17c <task_dataProcessor_startRecording+0x58>)
  40f132:	2100      	movs	r1, #0
  40f134:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40f138:	4b11      	ldr	r3, [pc, #68]	; (40f180 <task_dataProcessor_startRecording+0x5c>)
  40f13a:	4798      	blx	r3
	packetReceivedFlags = 0x0000;
  40f13c:	4b11      	ldr	r3, [pc, #68]	; (40f184 <task_dataProcessor_startRecording+0x60>)
  40f13e:	2200      	movs	r2, #0
  40f140:	801a      	strh	r2, [r3, #0]
	memset(missingSensorPacketCounts, 0,sizeof(missingSensorPacketCounts)); 
  40f142:	4811      	ldr	r0, [pc, #68]	; (40f188 <task_dataProcessor_startRecording+0x64>)
  40f144:	2100      	movs	r1, #0
  40f146:	2214      	movs	r2, #20
  40f148:	4b0d      	ldr	r3, [pc, #52]	; (40f180 <task_dataProcessor_startRecording+0x5c>)
  40f14a:	4798      	blx	r3
	xTimerReset(frameTimeOutTimer, 0);
  40f14c:	4b0f      	ldr	r3, [pc, #60]	; (40f18c <task_dataProcessor_startRecording+0x68>)
  40f14e:	681c      	ldr	r4, [r3, #0]
  40f150:	4b0f      	ldr	r3, [pc, #60]	; (40f190 <task_dataProcessor_startRecording+0x6c>)
  40f152:	4798      	blx	r3
  40f154:	4603      	mov	r3, r0
  40f156:	2200      	movs	r2, #0
  40f158:	9200      	str	r2, [sp, #0]
  40f15a:	4620      	mov	r0, r4
  40f15c:	2100      	movs	r1, #0
  40f15e:	461a      	mov	r2, r3
  40f160:	2300      	movs	r3, #0
  40f162:	4c0c      	ldr	r4, [pc, #48]	; (40f194 <task_dataProcessor_startRecording+0x70>)
  40f164:	47a0      	blx	r4
	vframeTimeOutFlag = 0;
  40f166:	4b0c      	ldr	r3, [pc, #48]	; (40f198 <task_dataProcessor_startRecording+0x74>)
  40f168:	2200      	movs	r2, #0
  40f16a:	701a      	strb	r2, [r3, #0]
	accelFramesToWrite = 0; //make sure the accelFramesToWrite is zero. 
  40f16c:	4b0b      	ldr	r3, [pc, #44]	; (40f19c <task_dataProcessor_startRecording+0x78>)
  40f16e:	2200      	movs	r2, #0
  40f170:	601a      	str	r2, [r3, #0]
}
  40f172:	3704      	adds	r7, #4
  40f174:	46bd      	mov	sp, r7
  40f176:	bd90      	pop	{r4, r7, pc}
  40f178:	20003819 	.word	0x20003819
  40f17c:	20004f30 	.word	0x20004f30
  40f180:	0041309d 	.word	0x0041309d
  40f184:	2000381c 	.word	0x2000381c
  40f188:	20004f18 	.word	0x20004f18
  40f18c:	20004f2c 	.word	0x20004f2c
  40f190:	0040b44d 	.word	0x0040b44d
  40f194:	0040c029 	.word	0x0040c029
  40f198:	20003818 	.word	0x20003818
  40f19c:	20003828 	.word	0x20003828

0040f1a0 <processPackets>:
 * @brief process the incoming packets and create a full frame. 
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error 
 ***********************************************************************************************/	
static status_t processPackets()
{
  40f1a0:	b590      	push	{r4, r7, lr}
  40f1a2:	b08b      	sub	sp, #44	; 0x2c
  40f1a4:	af02      	add	r7, sp, #8
	status_t status = STATUS_PASS; 
  40f1a6:	2300      	movs	r3, #0
  40f1a8:	73fb      	strb	r3, [r7, #15]
	int i, j, k;	  
	int entryBufferIdx = 0; 
  40f1aa:	2300      	movs	r3, #0
  40f1ac:	613b      	str	r3, [r7, #16]
	int res = 0; 
  40f1ae:	2300      	movs	r3, #0
  40f1b0:	60bb      	str	r3, [r7, #8]
	int numberBytes = 0; 
  40f1b2:	2300      	movs	r3, #0
  40f1b4:	607b      	str	r3, [r7, #4]
	//char* entryBuffer = NULL; 	
	
	entryBufferIdx = snprintf(entryBuffer, 17 ,"%010d,%04x,", sgSysTickCount,packetReceivedFlags);
  40f1b6:	4b6a      	ldr	r3, [pc, #424]	; (40f360 <processPackets+0x1c0>)
  40f1b8:	681b      	ldr	r3, [r3, #0]
  40f1ba:	4a6a      	ldr	r2, [pc, #424]	; (40f364 <processPackets+0x1c4>)
  40f1bc:	8812      	ldrh	r2, [r2, #0]
  40f1be:	9200      	str	r2, [sp, #0]
  40f1c0:	4869      	ldr	r0, [pc, #420]	; (40f368 <processPackets+0x1c8>)
  40f1c2:	2111      	movs	r1, #17
  40f1c4:	4a69      	ldr	r2, [pc, #420]	; (40f36c <processPackets+0x1cc>)
  40f1c6:	4c6a      	ldr	r4, [pc, #424]	; (40f370 <processPackets+0x1d0>)
  40f1c8:	47a0      	blx	r4
  40f1ca:	6138      	str	r0, [r7, #16]
	for(i = 0; i < 10; i++) //sensor reading
  40f1cc:	2300      	movs	r3, #0
  40f1ce:	61fb      	str	r3, [r7, #28]
  40f1d0:	e07e      	b.n	40f2d0 <processPackets+0x130>
	{
		//if imu or acceleration process this way, 
		if(i < NUMBER_OF_SENSORS -1)
  40f1d2:	69fb      	ldr	r3, [r7, #28]
  40f1d4:	2b08      	cmp	r3, #8
  40f1d6:	dc39      	bgt.n	40f24c <processPackets+0xac>
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  40f1d8:	2300      	movs	r3, #0
  40f1da:	61bb      	str	r3, [r7, #24]
  40f1dc:	e032      	b.n	40f244 <processPackets+0xa4>
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  40f1de:	2300      	movs	r3, #0
  40f1e0:	617b      	str	r3, [r7, #20]
  40f1e2:	e020      	b.n	40f226 <processPackets+0x86>
				{				
					//copy the asci data to the entry buffer
					if(packetBuffer[i].data != NULL)
					{
						entryBuffer[entryBufferIdx++] = packetBuffer[i].data[(j*4)+k];	
  40f1e4:	6939      	ldr	r1, [r7, #16]
  40f1e6:	1c4b      	adds	r3, r1, #1
  40f1e8:	613b      	str	r3, [r7, #16]
  40f1ea:	69bb      	ldr	r3, [r7, #24]
  40f1ec:	009a      	lsls	r2, r3, #2
  40f1ee:	697b      	ldr	r3, [r7, #20]
  40f1f0:	18d4      	adds	r4, r2, r3
  40f1f2:	4860      	ldr	r0, [pc, #384]	; (40f374 <processPackets+0x1d4>)
  40f1f4:	69fa      	ldr	r2, [r7, #28]
  40f1f6:	4613      	mov	r3, r2
  40f1f8:	009b      	lsls	r3, r3, #2
  40f1fa:	4413      	add	r3, r2
  40f1fc:	00da      	lsls	r2, r3, #3
  40f1fe:	1ad2      	subs	r2, r2, r3
  40f200:	1913      	adds	r3, r2, r4
  40f202:	4403      	add	r3, r0
  40f204:	78da      	ldrb	r2, [r3, #3]
  40f206:	4b58      	ldr	r3, [pc, #352]	; (40f368 <processPackets+0x1c8>)
  40f208:	545a      	strb	r2, [r3, r1]
					else
					{
						entryBuffer[entryBufferIdx++] = 0;
					}
						
					if(entryBuffer[entryBufferIdx-1] == 0)
  40f20a:	693b      	ldr	r3, [r7, #16]
  40f20c:	3b01      	subs	r3, #1
  40f20e:	4a56      	ldr	r2, [pc, #344]	; (40f368 <processPackets+0x1c8>)
  40f210:	5cd3      	ldrb	r3, [r2, r3]
  40f212:	2b00      	cmp	r3, #0
  40f214:	d104      	bne.n	40f220 <processPackets+0x80>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferIdx-1] = '0'; 
  40f216:	693b      	ldr	r3, [r7, #16]
  40f218:	3b01      	subs	r3, #1
  40f21a:	4a53      	ldr	r2, [pc, #332]	; (40f368 <processPackets+0x1c8>)
  40f21c:	2130      	movs	r1, #48	; 0x30
  40f21e:	54d1      	strb	r1, [r2, r3]
		//if imu or acceleration process this way, 
		if(i < NUMBER_OF_SENSORS -1)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  40f220:	697b      	ldr	r3, [r7, #20]
  40f222:	3301      	adds	r3, #1
  40f224:	617b      	str	r3, [r7, #20]
  40f226:	697b      	ldr	r3, [r7, #20]
  40f228:	2b03      	cmp	r3, #3
  40f22a:	dddb      	ble.n	40f1e4 <processPackets+0x44>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferIdx-1] = '0'; 
					}
				}
				if(j != IMU_PACKET_LENGTH-1)
  40f22c:	69bb      	ldr	r3, [r7, #24]
  40f22e:	2b02      	cmp	r3, #2
  40f230:	d005      	beq.n	40f23e <processPackets+0x9e>
				{
					entryBuffer[entryBufferIdx++] = ';';	
  40f232:	693b      	ldr	r3, [r7, #16]
  40f234:	1c5a      	adds	r2, r3, #1
  40f236:	613a      	str	r2, [r7, #16]
  40f238:	4a4b      	ldr	r2, [pc, #300]	; (40f368 <processPackets+0x1c8>)
  40f23a:	213b      	movs	r1, #59	; 0x3b
  40f23c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 10; i++) //sensor reading
	{
		//if imu or acceleration process this way, 
		if(i < NUMBER_OF_SENSORS -1)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  40f23e:	69bb      	ldr	r3, [r7, #24]
  40f240:	3301      	adds	r3, #1
  40f242:	61bb      	str	r3, [r7, #24]
  40f244:	69bb      	ldr	r3, [r7, #24]
  40f246:	2b02      	cmp	r3, #2
  40f248:	ddc9      	ble.n	40f1de <processPackets+0x3e>
  40f24a:	e038      	b.n	40f2be <processPackets+0x11e>
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  40f24c:	2300      	movs	r3, #0
  40f24e:	61bb      	str	r3, [r7, #24]
  40f250:	e032      	b.n	40f2b8 <processPackets+0x118>
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40f252:	2300      	movs	r3, #0
  40f254:	617b      	str	r3, [r7, #20]
  40f256:	e020      	b.n	40f29a <processPackets+0xfa>
				{
					if(packetBuffer[i].data != NULL)
					{
						//copy the ascii data to the entry buffer
						entryBuffer[entryBufferIdx++] = packetBuffer[i].data[(j*4)+k];							
  40f258:	6939      	ldr	r1, [r7, #16]
  40f25a:	1c4b      	adds	r3, r1, #1
  40f25c:	613b      	str	r3, [r7, #16]
  40f25e:	69bb      	ldr	r3, [r7, #24]
  40f260:	009a      	lsls	r2, r3, #2
  40f262:	697b      	ldr	r3, [r7, #20]
  40f264:	18d4      	adds	r4, r2, r3
  40f266:	4843      	ldr	r0, [pc, #268]	; (40f374 <processPackets+0x1d4>)
  40f268:	69fa      	ldr	r2, [r7, #28]
  40f26a:	4613      	mov	r3, r2
  40f26c:	009b      	lsls	r3, r3, #2
  40f26e:	4413      	add	r3, r2
  40f270:	00da      	lsls	r2, r3, #3
  40f272:	1ad2      	subs	r2, r2, r3
  40f274:	1913      	adds	r3, r2, r4
  40f276:	4403      	add	r3, r0
  40f278:	78da      	ldrb	r2, [r3, #3]
  40f27a:	4b3b      	ldr	r3, [pc, #236]	; (40f368 <processPackets+0x1c8>)
  40f27c:	545a      	strb	r2, [r3, r1]
					else
					{
						//there is no data, set to zero. 
						entryBuffer[entryBufferIdx++] = 0;
					}
					if(entryBuffer[entryBufferIdx-1] == 0)
  40f27e:	693b      	ldr	r3, [r7, #16]
  40f280:	3b01      	subs	r3, #1
  40f282:	4a39      	ldr	r2, [pc, #228]	; (40f368 <processPackets+0x1c8>)
  40f284:	5cd3      	ldrb	r3, [r2, r3]
  40f286:	2b00      	cmp	r3, #0
  40f288:	d104      	bne.n	40f294 <processPackets+0xf4>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferIdx-1] = '0';
  40f28a:	693b      	ldr	r3, [r7, #16]
  40f28c:	3b01      	subs	r3, #1
  40f28e:	4a36      	ldr	r2, [pc, #216]	; (40f368 <processPackets+0x1c8>)
  40f290:	2130      	movs	r1, #48	; 0x30
  40f292:	54d1      	strb	r1, [r2, r3]
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40f294:	697b      	ldr	r3, [r7, #20]
  40f296:	3301      	adds	r3, #1
  40f298:	617b      	str	r3, [r7, #20]
  40f29a:	697b      	ldr	r3, [r7, #20]
  40f29c:	2b03      	cmp	r3, #3
  40f29e:	dddb      	ble.n	40f258 <processPackets+0xb8>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferIdx-1] = '0';
					}
				}
				if(j != FS_PACKET_LENGTH-1)
  40f2a0:	69bb      	ldr	r3, [r7, #24]
  40f2a2:	2b04      	cmp	r3, #4
  40f2a4:	d005      	beq.n	40f2b2 <processPackets+0x112>
				{
					entryBuffer[entryBufferIdx++] = ';';
  40f2a6:	693b      	ldr	r3, [r7, #16]
  40f2a8:	1c5a      	adds	r2, r3, #1
  40f2aa:	613a      	str	r2, [r7, #16]
  40f2ac:	4a2e      	ldr	r2, [pc, #184]	; (40f368 <processPackets+0x1c8>)
  40f2ae:	213b      	movs	r1, #59	; 0x3b
  40f2b0:	54d1      	strb	r1, [r2, r3]
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  40f2b2:	69bb      	ldr	r3, [r7, #24]
  40f2b4:	3301      	adds	r3, #1
  40f2b6:	61bb      	str	r3, [r7, #24]
  40f2b8:	69bb      	ldr	r3, [r7, #24]
  40f2ba:	2b04      	cmp	r3, #4
  40f2bc:	ddc9      	ble.n	40f252 <processPackets+0xb2>
					entryBuffer[entryBufferIdx++] = ';';
				}
			}				
		}			
		 			
		entryBuffer[entryBufferIdx++] = ',';		
  40f2be:	693b      	ldr	r3, [r7, #16]
  40f2c0:	1c5a      	adds	r2, r3, #1
  40f2c2:	613a      	str	r2, [r7, #16]
  40f2c4:	4a28      	ldr	r2, [pc, #160]	; (40f368 <processPackets+0x1c8>)
  40f2c6:	212c      	movs	r1, #44	; 0x2c
  40f2c8:	54d1      	strb	r1, [r2, r3]
	int res = 0; 
	int numberBytes = 0; 
	//char* entryBuffer = NULL; 	
	
	entryBufferIdx = snprintf(entryBuffer, 17 ,"%010d,%04x,", sgSysTickCount,packetReceivedFlags);
	for(i = 0; i < 10; i++) //sensor reading
  40f2ca:	69fb      	ldr	r3, [r7, #28]
  40f2cc:	3301      	adds	r3, #1
  40f2ce:	61fb      	str	r3, [r7, #28]
  40f2d0:	69fb      	ldr	r3, [r7, #28]
  40f2d2:	2b09      	cmp	r3, #9
  40f2d4:	f77f af7d 	ble.w	40f1d2 <processPackets+0x32>
		}			
		 			
		entryBuffer[entryBufferIdx++] = ',';		
		
	}
	if(brainSettings.debugPackets)
  40f2d8:	4b27      	ldr	r3, [pc, #156]	; (40f378 <processPackets+0x1d8>)
  40f2da:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
  40f2de:	2b00      	cmp	r3, #0
  40f2e0:	d005      	beq.n	40f2ee <processPackets+0x14e>
	{
		memset(packetBuffer, 0x00, sizeof(packetBuffer));
  40f2e2:	4824      	ldr	r0, [pc, #144]	; (40f374 <processPackets+0x1d4>)
  40f2e4:	2100      	movs	r1, #0
  40f2e6:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40f2ea:	4b24      	ldr	r3, [pc, #144]	; (40f37c <processPackets+0x1dc>)
  40f2ec:	4798      	blx	r3
	}	
	if (buttonEvent)
  40f2ee:	4b24      	ldr	r3, [pc, #144]	; (40f380 <processPackets+0x1e0>)
  40f2f0:	781b      	ldrb	r3, [r3, #0]
  40f2f2:	2b00      	cmp	r3, #0
  40f2f4:	d00d      	beq.n	40f312 <processPackets+0x172>
	{
		memcpy(entryBuffer+entryBufferIdx, "BTN,", 4);
  40f2f6:	693a      	ldr	r2, [r7, #16]
  40f2f8:	4b1b      	ldr	r3, [pc, #108]	; (40f368 <processPackets+0x1c8>)
  40f2fa:	4413      	add	r3, r2
  40f2fc:	4618      	mov	r0, r3
  40f2fe:	4921      	ldr	r1, [pc, #132]	; (40f384 <processPackets+0x1e4>)
  40f300:	2204      	movs	r2, #4
  40f302:	4b21      	ldr	r3, [pc, #132]	; (40f388 <processPackets+0x1e8>)
  40f304:	4798      	blx	r3
		entryBufferIdx += 4;
  40f306:	693b      	ldr	r3, [r7, #16]
  40f308:	3304      	adds	r3, #4
  40f30a:	613b      	str	r3, [r7, #16]
		buttonEvent = FALSE;
  40f30c:	4b1c      	ldr	r3, [pc, #112]	; (40f380 <processPackets+0x1e0>)
  40f30e:	2200      	movs	r2, #0
  40f310:	701a      	strb	r2, [r3, #0]
	}
	entryBuffer[entryBufferIdx++] = '\r';
  40f312:	693b      	ldr	r3, [r7, #16]
  40f314:	1c5a      	adds	r2, r3, #1
  40f316:	613a      	str	r2, [r7, #16]
  40f318:	4a13      	ldr	r2, [pc, #76]	; (40f368 <processPackets+0x1c8>)
  40f31a:	210d      	movs	r1, #13
  40f31c:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferIdx++] = '\n';
  40f31e:	693b      	ldr	r3, [r7, #16]
  40f320:	1c5a      	adds	r2, r3, #1
  40f322:	613a      	str	r2, [r7, #16]
  40f324:	4a10      	ldr	r2, [pc, #64]	; (40f368 <processPackets+0x1c8>)
  40f326:	210a      	movs	r1, #10
  40f328:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferIdx] = 0; //terminate the string
  40f32a:	4a0f      	ldr	r2, [pc, #60]	; (40f368 <processPackets+0x1c8>)
  40f32c:	693b      	ldr	r3, [r7, #16]
  40f32e:	4413      	add	r3, r2
  40f330:	2200      	movs	r2, #0
  40f332:	701a      	strb	r2, [r3, #0]
		
	sendPacket(entryBuffer,entryBufferIdx); //don't want to print the null
  40f334:	693b      	ldr	r3, [r7, #16]
  40f336:	480c      	ldr	r0, [pc, #48]	; (40f368 <processPackets+0x1c8>)
  40f338:	4619      	mov	r1, r3
  40f33a:	4b14      	ldr	r3, [pc, #80]	; (40f38c <processPackets+0x1ec>)
  40f33c:	4798      	blx	r3
	totalFramesWritten++;	
  40f33e:	4b14      	ldr	r3, [pc, #80]	; (40f390 <processPackets+0x1f0>)
  40f340:	681b      	ldr	r3, [r3, #0]
  40f342:	1c5a      	adds	r2, r3, #1
  40f344:	4b12      	ldr	r3, [pc, #72]	; (40f390 <processPackets+0x1f0>)
  40f346:	601a      	str	r2, [r3, #0]
	//write the entry to file
	task_sdCardWriteEntry(entryBuffer,entryBufferIdx);
  40f348:	693b      	ldr	r3, [r7, #16]
  40f34a:	4807      	ldr	r0, [pc, #28]	; (40f368 <processPackets+0x1c8>)
  40f34c:	4619      	mov	r1, r3
  40f34e:	4b11      	ldr	r3, [pc, #68]	; (40f394 <processPackets+0x1f4>)
  40f350:	4798      	blx	r3
	entryBufferIdx = 0; //reset pointer.		
  40f352:	2300      	movs	r3, #0
  40f354:	613b      	str	r3, [r7, #16]

	return status; 
  40f356:	7bfb      	ldrb	r3, [r7, #15]
  40f358:	4618      	mov	r0, r3
  40f35a:	3724      	adds	r7, #36	; 0x24
  40f35c:	46bd      	mov	sp, r7
  40f35e:	bd90      	pop	{r4, r7, pc}
  40f360:	200039dc 	.word	0x200039dc
  40f364:	2000381c 	.word	0x2000381c
  40f368:	2000382c 	.word	0x2000382c
  40f36c:	0041d67c 	.word	0x0041d67c
  40f370:	0041326d 	.word	0x0041326d
  40f374:	20004f30 	.word	0x20004f30
  40f378:	20000220 	.word	0x20000220
  40f37c:	0041309d 	.word	0x0041309d
  40f380:	2000381a 	.word	0x2000381a
  40f384:	0041d688 	.word	0x0041d688
  40f388:	00412f69 	.word	0x00412f69
  40f38c:	004017c5 	.word	0x004017c5
  40f390:	20003824 	.word	0x20003824
  40f394:	00401b7d 	.word	0x00401b7d

0040f398 <task_fabSenseHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
void task_fabSenseHandler(void *pvParameters)
{
  40f398:	b590      	push	{r4, r7, lr}
  40f39a:	b0d1      	sub	sp, #324	; 0x144
  40f39c:	af00      	add	r7, sp, #0
  40f39e:	1d3b      	adds	r3, r7, #4
  40f3a0:	6018      	str	r0, [r3, #0]
	//cast void pointer to fabric sense config type.
	fabricSenseConfig_t *fsConfig = (fabricSenseConfig_t*)pvParameters;
  40f3a2:	1d3b      	adds	r3, r7, #4
  40f3a4:	681b      	ldr	r3, [r3, #0]
  40f3a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	//check that uart device is initialized
	if(drv_uart_isInit(fsConfig->uartDevice) != STATUS_PASS)
  40f3aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40f3ae:	689b      	ldr	r3, [r3, #8]
  40f3b0:	4618      	mov	r0, r3
  40f3b2:	4b31      	ldr	r3, [pc, #196]	; (40f478 <task_fabSenseHandler+0xe0>)
  40f3b4:	4798      	blx	r3
  40f3b6:	4603      	mov	r3, r0
  40f3b8:	2b00      	cmp	r3, #0
  40f3ba:	d006      	beq.n	40f3ca <task_fabSenseHandler+0x32>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		debugPrintString("FATAL: uart not initialized for FS\r\n");
  40f3bc:	482f      	ldr	r0, [pc, #188]	; (40f47c <task_fabSenseHandler+0xe4>)
  40f3be:	4b30      	ldr	r3, [pc, #192]	; (40f480 <task_fabSenseHandler+0xe8>)
  40f3c0:	4798      	blx	r3
		//spin forever, this is a fatal error.  
		while(1)
		{
			vTaskDelay(1);
  40f3c2:	2001      	movs	r0, #1
  40f3c4:	4b2f      	ldr	r3, [pc, #188]	; (40f484 <task_fabSenseHandler+0xec>)
  40f3c6:	4798      	blx	r3
		}
  40f3c8:	e7fb      	b.n	40f3c2 <task_fabSenseHandler+0x2a>
	//{
		////this is an error, we should do something here!
		//return; 
	//} 
	dataPacket_t packet;
	packet.type = DATA_PACKET_TYPE_SS;
  40f3ca:	2301      	movs	r3, #1
  40f3cc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	//main loop of task, this is where we request information and store it.
	char buf[FS_RESPONSE_BUF_SIZE] = {0};
  40f3d0:	f107 030c 	add.w	r3, r7, #12
  40f3d4:	461a      	mov	r2, r3
  40f3d6:	23ff      	movs	r3, #255	; 0xff
  40f3d8:	4610      	mov	r0, r2
  40f3da:	2100      	movs	r1, #0
  40f3dc:	461a      	mov	r2, r3
  40f3de:	4b2a      	ldr	r3, [pc, #168]	; (40f488 <task_fabSenseHandler+0xf0>)
  40f3e0:	4798      	blx	r3
	uint8_t numPacketsReceived = 0; 
  40f3e2:	2300      	movs	r3, #0
  40f3e4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint8_t dataSize = 0;
  40f3e8:	2300      	movs	r3, #0
  40f3ea:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	uint32_t sequenceNumber = 0;
  40f3ee:	2300      	movs	r3, #0
  40f3f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t packetsReceived = 0; 
  40f3f4:	2300      	movs	r3, #0
  40f3f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	packetReceivedMask |= 1<<9; //add mask for fabric sense
  40f3fa:	4b24      	ldr	r3, [pc, #144]	; (40f48c <task_fabSenseHandler+0xf4>)
  40f3fc:	881b      	ldrh	r3, [r3, #0]
  40f3fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40f402:	b29a      	uxth	r2, r3
  40f404:	4b21      	ldr	r3, [pc, #132]	; (40f48c <task_fabSenseHandler+0xf4>)
  40f406:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(enableRecording)
  40f408:	4b21      	ldr	r3, [pc, #132]	; (40f490 <task_fabSenseHandler+0xf8>)
  40f40a:	781b      	ldrb	r3, [r3, #0]
  40f40c:	2b00      	cmp	r3, #0
  40f40e:	d02d      	beq.n	40f46c <task_fabSenseHandler+0xd4>
		{		
			#ifdef CREATE_DUMMY_PACKETS
			vTaskDelay(20); 
  40f410:	2014      	movs	r0, #20
  40f412:	4b1c      	ldr	r3, [pc, #112]	; (40f484 <task_fabSenseHandler+0xec>)
  40f414:	4798      	blx	r3
			createDummyFabSensePacket(buf, FS_RESPONSE_BUF_SIZE, sequenceNumber++); 
  40f416:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40f41a:	1c5a      	adds	r2, r3, #1
  40f41c:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
  40f420:	f107 020c 	add.w	r2, r7, #12
  40f424:	4610      	mov	r0, r2
  40f426:	21ff      	movs	r1, #255	; 0xff
  40f428:	461a      	mov	r2, r3
  40f42a:	4b1a      	ldr	r3, [pc, #104]	; (40f494 <task_fabSenseHandler+0xfc>)
  40f42c:	4798      	blx	r3
			memcpy(packet.data, buf, 23);
  40f42e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
  40f432:	1cda      	adds	r2, r3, #3
  40f434:	f107 030c 	add.w	r3, r7, #12
  40f438:	4610      	mov	r0, r2
  40f43a:	4619      	mov	r1, r3
  40f43c:	2217      	movs	r2, #23
  40f43e:	4b16      	ldr	r3, [pc, #88]	; (40f498 <task_fabSenseHandler+0x100>)
  40f440:	4798      	blx	r3
			//enqueue the packet for the data processor.
			if(queue_dataHandler != NULL)
  40f442:	4b16      	ldr	r3, [pc, #88]	; (40f49c <task_fabSenseHandler+0x104>)
  40f444:	681b      	ldr	r3, [r3, #0]
  40f446:	2b00      	cmp	r3, #0
  40f448:	d014      	beq.n	40f474 <task_fabSenseHandler+0xdc>
			{
				if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,10 ) != TRUE)
  40f44a:	4b14      	ldr	r3, [pc, #80]	; (40f49c <task_fabSenseHandler+0x104>)
  40f44c:	681a      	ldr	r2, [r3, #0]
  40f44e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
  40f452:	4610      	mov	r0, r2
  40f454:	4619      	mov	r1, r3
  40f456:	220a      	movs	r2, #10
  40f458:	2300      	movs	r3, #0
  40f45a:	4c11      	ldr	r4, [pc, #68]	; (40f4a0 <task_fabSenseHandler+0x108>)
  40f45c:	47a0      	blx	r4
  40f45e:	4603      	mov	r3, r0
  40f460:	2b01      	cmp	r3, #1
  40f462:	d007      	beq.n	40f474 <task_fabSenseHandler+0xdc>
				{					
					vTaskDelay(1);
  40f464:	2001      	movs	r0, #1
  40f466:	4b07      	ldr	r3, [pc, #28]	; (40f484 <task_fabSenseHandler+0xec>)
  40f468:	4798      	blx	r3
		else
		{
			vTaskDelay(10); 
		}
		
	}
  40f46a:	e7cd      	b.n	40f408 <task_fabSenseHandler+0x70>
			#endif
	
		}
		else
		{
			vTaskDelay(10); 
  40f46c:	200a      	movs	r0, #10
  40f46e:	4b05      	ldr	r3, [pc, #20]	; (40f484 <task_fabSenseHandler+0xec>)
  40f470:	4798      	blx	r3
		}
		
	}
  40f472:	e7c9      	b.n	40f408 <task_fabSenseHandler+0x70>
  40f474:	e7c8      	b.n	40f408 <task_fabSenseHandler+0x70>
  40f476:	bf00      	nop
  40f478:	0040e4b5 	.word	0x0040e4b5
  40f47c:	0041d690 	.word	0x0041d690
  40f480:	004016d5 	.word	0x004016d5
  40f484:	0040b24d 	.word	0x0040b24d
  40f488:	0041309d 	.word	0x0041309d
  40f48c:	2000381e 	.word	0x2000381e
  40f490:	2000127b 	.word	0x2000127b
  40f494:	0040f535 	.word	0x0040f535
  40f498:	00412f69 	.word	0x00412f69
  40f49c:	20003814 	.word	0x20003814
  40f4a0:	0040aa11 	.word	0x0040aa11

0040f4a4 <task_fabSense_init>:
 * @brief Function called to initialize the fabric sense module parameters
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_init(fabricSenseConfig_t* fabSenseConfig)
{
  40f4a4:	b580      	push	{r7, lr}
  40f4a6:	b0aa      	sub	sp, #168	; 0xa8
  40f4a8:	af00      	add	r7, sp, #0
  40f4aa:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_FAIL;
  40f4ac:	2301      	movs	r3, #1
  40f4ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	char buf[150] = {0};
  40f4b2:	f107 0208 	add.w	r2, r7, #8
  40f4b6:	2396      	movs	r3, #150	; 0x96
  40f4b8:	4610      	mov	r0, r2
  40f4ba:	2100      	movs	r1, #0
  40f4bc:	461a      	mov	r2, r3
  40f4be:	4b05      	ldr	r3, [pc, #20]	; (40f4d4 <task_fabSense_init+0x30>)
  40f4c0:	4798      	blx	r3
	char* bufPtr = buf; 
  40f4c2:	f107 0308 	add.w	r3, r7, #8
  40f4c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	
	#ifdef CREATE_DUMMY_PACKETS
	return STATUS_PASS;
  40f4ca:	2300      	movs	r3, #0
	{
		debugPrintString("Init SS failed!\r\n");	
	}
	
	return result;
}
  40f4cc:	4618      	mov	r0, r3
  40f4ce:	37a8      	adds	r7, #168	; 0xa8
  40f4d0:	46bd      	mov	sp, r7
  40f4d2:	bd80      	pop	{r7, pc}
  40f4d4:	0041309d 	.word	0x0041309d

0040f4d8 <task_fabSense_start>:
 * @brief Function called to start the fabrix sense transmission of data. 
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_start(fabricSenseConfig_t* fabSenseConfig)
{
  40f4d8:	b480      	push	{r7}
  40f4da:	b085      	sub	sp, #20
  40f4dc:	af00      	add	r7, sp, #0
  40f4de:	6078      	str	r0, [r7, #4]
	
	status_t status = STATUS_PASS; 
  40f4e0:	2300      	movs	r3, #0
  40f4e2:	73fb      	strb	r3, [r7, #15]
	packetReceivedMask |= 1<<9;
  40f4e4:	4b08      	ldr	r3, [pc, #32]	; (40f508 <task_fabSense_start+0x30>)
  40f4e6:	881b      	ldrh	r3, [r3, #0]
  40f4e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40f4ec:	b29a      	uxth	r2, r3
  40f4ee:	4b06      	ldr	r3, [pc, #24]	; (40f508 <task_fabSense_start+0x30>)
  40f4f0:	801a      	strh	r2, [r3, #0]
	#ifndef CREATE_DUMMY_PACKETS
	drv_uart_putString(fabSenseConfig->uartDevice, "#s\r\n");
	#endif
	enableRecording = true; 
  40f4f2:	4b06      	ldr	r3, [pc, #24]	; (40f50c <task_fabSense_start+0x34>)
  40f4f4:	2201      	movs	r2, #1
  40f4f6:	701a      	strb	r2, [r3, #0]
	return status; 
  40f4f8:	7bfb      	ldrb	r3, [r7, #15]
}
  40f4fa:	4618      	mov	r0, r3
  40f4fc:	3714      	adds	r7, #20
  40f4fe:	46bd      	mov	sp, r7
  40f500:	f85d 7b04 	ldr.w	r7, [sp], #4
  40f504:	4770      	bx	lr
  40f506:	bf00      	nop
  40f508:	2000381e 	.word	0x2000381e
  40f50c:	2000127b 	.word	0x2000127b

0040f510 <task_fabSense_stop>:
 * @brief Function called to stop the fabric sense module  
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_stop(fabricSenseConfig_t* fabSenseConfig)
{	
  40f510:	b480      	push	{r7}
  40f512:	b085      	sub	sp, #20
  40f514:	af00      	add	r7, sp, #0
  40f516:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40f518:	2300      	movs	r3, #0
  40f51a:	73fb      	strb	r3, [r7, #15]
	#ifndef CREATE_DUMMY_PACKETS
	drv_uart_putString(fabSenseConfig->uartDevice, "#t\r\n");
	#endif	
	enableRecording = false; 
  40f51c:	4b04      	ldr	r3, [pc, #16]	; (40f530 <task_fabSense_stop+0x20>)
  40f51e:	2200      	movs	r2, #0
  40f520:	701a      	strb	r2, [r3, #0]
	return status;	
  40f522:	7bfb      	ldrb	r3, [r7, #15]
}
  40f524:	4618      	mov	r0, r3
  40f526:	3714      	adds	r7, #20
  40f528:	46bd      	mov	sp, r7
  40f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40f52e:	4770      	bx	lr
  40f530:	2000127b 	.word	0x2000127b

0040f534 <createDummyFabSensePacket>:

//static functions


void createDummyFabSensePacket(char* dataPacket, size_t maxPacketSize, uint32_t seqNum)
{
  40f534:	b4b0      	push	{r4, r5, r7}
  40f536:	b085      	sub	sp, #20
  40f538:	af00      	add	r7, sp, #0
  40f53a:	60f8      	str	r0, [r7, #12]
  40f53c:	60b9      	str	r1, [r7, #8]
  40f53e:	607a      	str	r2, [r7, #4]
	//int i = 0; 
	//snprintf(dataPacket, maxPacketSize, "%04dBBBBCCCCDDDDEEEE%08d\r\n",seqNum%10000, sgSysTickCount); 
	strcpy(dataPacket, "1234BBBBCCCCDDDDEEEE\r\n");
  40f540:	68fa      	ldr	r2, [r7, #12]
  40f542:	4b09      	ldr	r3, [pc, #36]	; (40f568 <createDummyFabSensePacket+0x34>)
  40f544:	4614      	mov	r4, r2
  40f546:	461d      	mov	r5, r3
  40f548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40f54a:	6020      	str	r0, [r4, #0]
  40f54c:	6061      	str	r1, [r4, #4]
  40f54e:	60a2      	str	r2, [r4, #8]
  40f550:	60e3      	str	r3, [r4, #12]
  40f552:	6828      	ldr	r0, [r5, #0]
  40f554:	6120      	str	r0, [r4, #16]
  40f556:	88aa      	ldrh	r2, [r5, #4]
  40f558:	79ab      	ldrb	r3, [r5, #6]
  40f55a:	82a2      	strh	r2, [r4, #20]
  40f55c:	75a3      	strb	r3, [r4, #22]
  40f55e:	3714      	adds	r7, #20
  40f560:	46bd      	mov	sp, r7
  40f562:	bcb0      	pop	{r4, r5, r7}
  40f564:	4770      	bx	lr
  40f566:	bf00      	nop
  40f568:	0041d6b8 	.word	0x0041d6b8

0040f56c <vSleepTimerCallback>:

//TEMP REMOVE THIS
extern FIL dataLogFile_obj; 

void vSleepTimerCallback( xTimerHandle xTimer )
{
  40f56c:	b580      	push	{r7, lr}
  40f56e:	b084      	sub	sp, #16
  40f570:	af00      	add	r7, sp, #0
  40f572:	6078      	str	r0, [r7, #4]
	drv_gpio_pin_state_t pinState;
	drv_gpio_getPinState(DRV_GPIO_PIN_PW_SW, &pinState);
  40f574:	f107 030f 	add.w	r3, r7, #15
  40f578:	2000      	movs	r0, #0
  40f57a:	4619      	mov	r1, r3
  40f57c:	4b08      	ldr	r3, [pc, #32]	; (40f5a0 <vSleepTimerCallback+0x34>)
  40f57e:	4798      	blx	r3
	if (pinState == DRV_GPIO_PIN_STATE_LOW)
  40f580:	7bfb      	ldrb	r3, [r7, #15]
  40f582:	2b00      	cmp	r3, #0
  40f584:	d109      	bne.n	40f59a <vSleepTimerCallback+0x2e>
	{
		pwSwitchTimerFlag = 1;
  40f586:	4b07      	ldr	r3, [pc, #28]	; (40f5a4 <vSleepTimerCallback+0x38>)
  40f588:	2201      	movs	r2, #1
  40f58a:	701a      	strb	r2, [r3, #0]
		debugPrintString("Sleep mode enabled\r\n");
  40f58c:	4806      	ldr	r0, [pc, #24]	; (40f5a8 <vSleepTimerCallback+0x3c>)
  40f58e:	4b07      	ldr	r3, [pc, #28]	; (40f5ac <vSleepTimerCallback+0x40>)
  40f590:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_POWER_SWITCH,0);	
  40f592:	2000      	movs	r0, #0
  40f594:	2100      	movs	r1, #0
  40f596:	4b06      	ldr	r3, [pc, #24]	; (40f5b0 <vSleepTimerCallback+0x44>)
  40f598:	4798      	blx	r3
	}
}
  40f59a:	3710      	adds	r7, #16
  40f59c:	46bd      	mov	sp, r7
  40f59e:	bd80      	pop	{r7, pc}
  40f5a0:	0040d8a9 	.word	0x0040d8a9
  40f5a4:	200038f9 	.word	0x200038f9
  40f5a8:	0041d6d0 	.word	0x0041d6d0
  40f5ac:	004016d5 	.word	0x004016d5
  40f5b0:	00402581 	.word	0x00402581

0040f5b4 <vSystemResetTimerCallback>:

void vSystemResetTimerCallback( xTimerHandle xTimer )
{
  40f5b4:	b580      	push	{r7, lr}
  40f5b6:	b084      	sub	sp, #16
  40f5b8:	af00      	add	r7, sp, #0
  40f5ba:	6078      	str	r0, [r7, #4]
	drv_gpio_pin_state_t pinState1, pinState2;

	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW1, &pinState1);
  40f5bc:	f107 030f 	add.w	r3, r7, #15
  40f5c0:	2001      	movs	r0, #1
  40f5c2:	4619      	mov	r1, r3
  40f5c4:	4b0e      	ldr	r3, [pc, #56]	; (40f600 <vSystemResetTimerCallback+0x4c>)
  40f5c6:	4798      	blx	r3
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2, &pinState2);
  40f5c8:	f107 030e 	add.w	r3, r7, #14
  40f5cc:	2002      	movs	r0, #2
  40f5ce:	4619      	mov	r1, r3
  40f5d0:	4b0b      	ldr	r3, [pc, #44]	; (40f600 <vSystemResetTimerCallback+0x4c>)
  40f5d2:	4798      	blx	r3
	//check if both the switches are still pressed
	if ((pinState1 == DRV_GPIO_PIN_STATE_LOW) & (pinState2 == DRV_GPIO_PIN_STATE_LOW))
  40f5d4:	7bfb      	ldrb	r3, [r7, #15]
  40f5d6:	2b00      	cmp	r3, #0
  40f5d8:	bf14      	ite	ne
  40f5da:	2300      	movne	r3, #0
  40f5dc:	2301      	moveq	r3, #1
  40f5de:	b2da      	uxtb	r2, r3
  40f5e0:	7bbb      	ldrb	r3, [r7, #14]
  40f5e2:	2b00      	cmp	r3, #0
  40f5e4:	bf14      	ite	ne
  40f5e6:	2300      	movne	r3, #0
  40f5e8:	2301      	moveq	r3, #1
  40f5ea:	b2db      	uxtb	r3, r3
  40f5ec:	4013      	ands	r3, r2
  40f5ee:	b2db      	uxtb	r3, r3
  40f5f0:	2b00      	cmp	r3, #0
  40f5f2:	d002      	beq.n	40f5fa <vSystemResetTimerCallback+0x46>
	{
		//if yes reset the system
		SystemResetTimerFlag = 1;
  40f5f4:	4b03      	ldr	r3, [pc, #12]	; (40f604 <vSystemResetTimerCallback+0x50>)
  40f5f6:	2201      	movs	r2, #1
  40f5f8:	701a      	strb	r2, [r3, #0]
		//rstc_start_software_reset(RSTC);
	}
}
  40f5fa:	3710      	adds	r7, #16
  40f5fc:	46bd      	mov	sp, r7
  40f5fe:	bd80      	pop	{r7, pc}
  40f600:	0040d8a9 	.word	0x0040d8a9
  40f604:	200038fa 	.word	0x200038fa

0040f608 <vResetButtonTimerCallback>:

void vResetButtonTimerCallback (xTimerHandle xTimer)
{
  40f608:	b580      	push	{r7, lr}
  40f60a:	b084      	sub	sp, #16
  40f60c:	af00      	add	r7, sp, #0
  40f60e:	6078      	str	r0, [r7, #4]
	drv_gpio_pin_state_t pinState1;
	drv_gpio_getPinState(DRV_GPIO_PIN_AC_SW2, &pinState1);
  40f610:	f107 030f 	add.w	r3, r7, #15
  40f614:	2002      	movs	r0, #2
  40f616:	4619      	mov	r1, r3
  40f618:	4b05      	ldr	r3, [pc, #20]	; (40f630 <vResetButtonTimerCallback+0x28>)
  40f61a:	4798      	blx	r3
	//Check if reset button is still pressed
	if (pinState1 == DRV_GPIO_PIN_STATE_LOW)
  40f61c:	7bfb      	ldrb	r3, [r7, #15]
  40f61e:	2b00      	cmp	r3, #0
  40f620:	d102      	bne.n	40f628 <vResetButtonTimerCallback+0x20>
	{
		ResetButtonTimerFlag = 1;
  40f622:	4b04      	ldr	r3, [pc, #16]	; (40f634 <vResetButtonTimerCallback+0x2c>)
  40f624:	2201      	movs	r2, #1
  40f626:	701a      	strb	r2, [r3, #0]
	}
}
  40f628:	3710      	adds	r7, #16
  40f62a:	46bd      	mov	sp, r7
  40f62c:	bd80      	pop	{r7, pc}
  40f62e:	bf00      	nop
  40f630:	0040d8a9 	.word	0x0040d8a9
  40f634:	200038fb 	.word	0x200038fb

0040f638 <TaskMain>:

/**
 * \brief This task is initialized first to initiate the board peripherals and run the initial tests
 */
void __attribute__((optimize("O0"))) TaskMain(void *pvParameters)
{
  40f638:	b590      	push	{r4, r7, lr}
  40f63a:	b08b      	sub	sp, #44	; 0x2c
  40f63c:	af04      	add	r7, sp, #16
  40f63e:	6078      	str	r0, [r7, #4]
	int retCode = 0, vLoopCount = 0, vCycleJcEnCount = 0; 
  40f640:	2300      	movs	r3, #0
  40f642:	60fb      	str	r3, [r7, #12]
  40f644:	2300      	movs	r3, #0
  40f646:	617b      	str	r3, [r7, #20]
  40f648:	2300      	movs	r3, #0
  40f64a:	613b      	str	r3, [r7, #16]
	drv_gpio_pin_state_t jcDc2 = DRV_GPIO_PIN_STATE_LOW, jcDc1 = DRV_GPIO_PIN_STATE_LOW;
  40f64c:	2300      	movs	r3, #0
  40f64e:	72fb      	strb	r3, [r7, #11]
  40f650:	2300      	movs	r3, #0
  40f652:	72bb      	strb	r3, [r7, #10]
	UNUSED(pvParameters);
	/*	Create a Semaphore to pass between tasks	*/
	//vSemaphoreCreateBinary(DebugLogSemaphore);
	powerOnInit();
  40f654:	4b90      	ldr	r3, [pc, #576]	; (40f898 <TaskMain+0x260>)
  40f656:	4798      	blx	r3
	
	SleepTimer = xTimerCreate("Sleep Timer", (SLEEP_ENTRY_WAIT_TIME/portTICK_RATE_MS), pdFALSE, NULL, vSleepTimerCallback);
  40f658:	4b90      	ldr	r3, [pc, #576]	; (40f89c <TaskMain+0x264>)
  40f65a:	9300      	str	r3, [sp, #0]
  40f65c:	4890      	ldr	r0, [pc, #576]	; (40f8a0 <TaskMain+0x268>)
  40f65e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
  40f662:	2200      	movs	r2, #0
  40f664:	2300      	movs	r3, #0
  40f666:	4c8f      	ldr	r4, [pc, #572]	; (40f8a4 <TaskMain+0x26c>)
  40f668:	47a0      	blx	r4
  40f66a:	4602      	mov	r2, r0
  40f66c:	4b8e      	ldr	r3, [pc, #568]	; (40f8a8 <TaskMain+0x270>)
  40f66e:	601a      	str	r2, [r3, #0]
	if (SleepTimer == NULL)
  40f670:	4b8d      	ldr	r3, [pc, #564]	; (40f8a8 <TaskMain+0x270>)
  40f672:	681b      	ldr	r3, [r3, #0]
  40f674:	2b00      	cmp	r3, #0
  40f676:	d105      	bne.n	40f684 <TaskMain+0x4c>
	{
		printf("Failed to create timer task code %d\r\n", SleepTimer);
  40f678:	4b8b      	ldr	r3, [pc, #556]	; (40f8a8 <TaskMain+0x270>)
  40f67a:	681b      	ldr	r3, [r3, #0]
  40f67c:	488b      	ldr	r0, [pc, #556]	; (40f8ac <TaskMain+0x274>)
  40f67e:	4619      	mov	r1, r3
  40f680:	4b8b      	ldr	r3, [pc, #556]	; (40f8b0 <TaskMain+0x278>)
  40f682:	4798      	blx	r3
	}
	
	SystemResetTimer = xTimerCreate("System Reset Timer", (FORCED_SYSTEM_RESET_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vSystemResetTimerCallback);
  40f684:	4b8b      	ldr	r3, [pc, #556]	; (40f8b4 <TaskMain+0x27c>)
  40f686:	9300      	str	r3, [sp, #0]
  40f688:	488b      	ldr	r0, [pc, #556]	; (40f8b8 <TaskMain+0x280>)
  40f68a:	f242 7110 	movw	r1, #10000	; 0x2710
  40f68e:	2200      	movs	r2, #0
  40f690:	2300      	movs	r3, #0
  40f692:	4c84      	ldr	r4, [pc, #528]	; (40f8a4 <TaskMain+0x26c>)
  40f694:	47a0      	blx	r4
  40f696:	4602      	mov	r2, r0
  40f698:	4b88      	ldr	r3, [pc, #544]	; (40f8bc <TaskMain+0x284>)
  40f69a:	601a      	str	r2, [r3, #0]
	if (SystemResetTimer == NULL)
  40f69c:	4b87      	ldr	r3, [pc, #540]	; (40f8bc <TaskMain+0x284>)
  40f69e:	681b      	ldr	r3, [r3, #0]
  40f6a0:	2b00      	cmp	r3, #0
  40f6a2:	d105      	bne.n	40f6b0 <TaskMain+0x78>
	{
		printf("Failed to create timer task code %d\r\n", SystemResetTimer);
  40f6a4:	4b85      	ldr	r3, [pc, #532]	; (40f8bc <TaskMain+0x284>)
  40f6a6:	681b      	ldr	r3, [r3, #0]
  40f6a8:	4880      	ldr	r0, [pc, #512]	; (40f8ac <TaskMain+0x274>)
  40f6aa:	4619      	mov	r1, r3
  40f6ac:	4b80      	ldr	r3, [pc, #512]	; (40f8b0 <TaskMain+0x278>)
  40f6ae:	4798      	blx	r3
	}
	
	ResetButtonTimer = xTimerCreate("Reset button timer", (RESET_SW_LONG_PRESS_DELAY/portTICK_RATE_MS), pdFALSE	, NULL, vResetButtonTimerCallback);
  40f6b0:	4b83      	ldr	r3, [pc, #524]	; (40f8c0 <TaskMain+0x288>)
  40f6b2:	9300      	str	r3, [sp, #0]
  40f6b4:	4883      	ldr	r0, [pc, #524]	; (40f8c4 <TaskMain+0x28c>)
  40f6b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40f6ba:	2200      	movs	r2, #0
  40f6bc:	2300      	movs	r3, #0
  40f6be:	4c79      	ldr	r4, [pc, #484]	; (40f8a4 <TaskMain+0x26c>)
  40f6c0:	47a0      	blx	r4
  40f6c2:	4602      	mov	r2, r0
  40f6c4:	4b80      	ldr	r3, [pc, #512]	; (40f8c8 <TaskMain+0x290>)
  40f6c6:	601a      	str	r2, [r3, #0]
	if (ResetButtonTimer == NULL)
  40f6c8:	4b7f      	ldr	r3, [pc, #508]	; (40f8c8 <TaskMain+0x290>)
  40f6ca:	681b      	ldr	r3, [r3, #0]
  40f6cc:	2b00      	cmp	r3, #0
  40f6ce:	d105      	bne.n	40f6dc <TaskMain+0xa4>
	{
		printf("Failed to create reset button timer task code %d\r\n", ResetButtonTimer);
  40f6d0:	4b7d      	ldr	r3, [pc, #500]	; (40f8c8 <TaskMain+0x290>)
  40f6d2:	681b      	ldr	r3, [r3, #0]
  40f6d4:	487d      	ldr	r0, [pc, #500]	; (40f8cc <TaskMain+0x294>)
  40f6d6:	4619      	mov	r1, r3
  40f6d8:	4b75      	ldr	r3, [pc, #468]	; (40f8b0 <TaskMain+0x278>)
  40f6da:	4798      	blx	r3
	}
	
	retCode = xTaskCreate(task_quinticHandler, "Q1", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[0], TASK_QUINTIC_PRIORITY, &quinticConfig[0].taskHandle );
  40f6dc:	2305      	movs	r3, #5
  40f6de:	9300      	str	r3, [sp, #0]
  40f6e0:	4b7b      	ldr	r3, [pc, #492]	; (40f8d0 <TaskMain+0x298>)
  40f6e2:	9301      	str	r3, [sp, #4]
  40f6e4:	2300      	movs	r3, #0
  40f6e6:	9302      	str	r3, [sp, #8]
  40f6e8:	2300      	movs	r3, #0
  40f6ea:	9303      	str	r3, [sp, #12]
  40f6ec:	4879      	ldr	r0, [pc, #484]	; (40f8d4 <TaskMain+0x29c>)
  40f6ee:	497a      	ldr	r1, [pc, #488]	; (40f8d8 <TaskMain+0x2a0>)
  40f6f0:	f240 1277 	movw	r2, #375	; 0x177
  40f6f4:	4b79      	ldr	r3, [pc, #484]	; (40f8dc <TaskMain+0x2a4>)
  40f6f6:	4c7a      	ldr	r4, [pc, #488]	; (40f8e0 <TaskMain+0x2a8>)
  40f6f8:	47a0      	blx	r4
  40f6fa:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f6fc:	68fb      	ldr	r3, [r7, #12]
  40f6fe:	2b01      	cmp	r3, #1
  40f700:	d003      	beq.n	40f70a <TaskMain+0xd2>
	{
		printf("Failed to create Q1 task code %d\r\n", retCode);
  40f702:	4878      	ldr	r0, [pc, #480]	; (40f8e4 <TaskMain+0x2ac>)
  40f704:	68f9      	ldr	r1, [r7, #12]
  40f706:	4b6a      	ldr	r3, [pc, #424]	; (40f8b0 <TaskMain+0x278>)
  40f708:	4798      	blx	r3
	}
	#ifdef USE_ALL_QUINTICS
	retCode = xTaskCreate(task_quinticHandler, "Q2", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[1], TASK_QUINTIC_PRIORITY, &quinticConfig[1].taskHandle );
  40f70a:	2305      	movs	r3, #5
  40f70c:	9300      	str	r3, [sp, #0]
  40f70e:	4b76      	ldr	r3, [pc, #472]	; (40f8e8 <TaskMain+0x2b0>)
  40f710:	9301      	str	r3, [sp, #4]
  40f712:	2300      	movs	r3, #0
  40f714:	9302      	str	r3, [sp, #8]
  40f716:	2300      	movs	r3, #0
  40f718:	9303      	str	r3, [sp, #12]
  40f71a:	486e      	ldr	r0, [pc, #440]	; (40f8d4 <TaskMain+0x29c>)
  40f71c:	4973      	ldr	r1, [pc, #460]	; (40f8ec <TaskMain+0x2b4>)
  40f71e:	f240 1277 	movw	r2, #375	; 0x177
  40f722:	4b73      	ldr	r3, [pc, #460]	; (40f8f0 <TaskMain+0x2b8>)
  40f724:	4c6e      	ldr	r4, [pc, #440]	; (40f8e0 <TaskMain+0x2a8>)
  40f726:	47a0      	blx	r4
  40f728:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f72a:	68fb      	ldr	r3, [r7, #12]
  40f72c:	2b01      	cmp	r3, #1
  40f72e:	d003      	beq.n	40f738 <TaskMain+0x100>
	{
		printf("Failed to create Q2 task code %d\r\n", retCode);
  40f730:	4870      	ldr	r0, [pc, #448]	; (40f8f4 <TaskMain+0x2bc>)
  40f732:	68f9      	ldr	r1, [r7, #12]
  40f734:	4b5e      	ldr	r3, [pc, #376]	; (40f8b0 <TaskMain+0x278>)
  40f736:	4798      	blx	r3
	}
	#endif
	retCode = xTaskCreate(task_quinticHandler, "Q3", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[2], TASK_QUINTIC_PRIORITY, &quinticConfig[2].taskHandle );
  40f738:	2305      	movs	r3, #5
  40f73a:	9300      	str	r3, [sp, #0]
  40f73c:	4b6e      	ldr	r3, [pc, #440]	; (40f8f8 <TaskMain+0x2c0>)
  40f73e:	9301      	str	r3, [sp, #4]
  40f740:	2300      	movs	r3, #0
  40f742:	9302      	str	r3, [sp, #8]
  40f744:	2300      	movs	r3, #0
  40f746:	9303      	str	r3, [sp, #12]
  40f748:	4862      	ldr	r0, [pc, #392]	; (40f8d4 <TaskMain+0x29c>)
  40f74a:	496c      	ldr	r1, [pc, #432]	; (40f8fc <TaskMain+0x2c4>)
  40f74c:	f240 1277 	movw	r2, #375	; 0x177
  40f750:	4b6b      	ldr	r3, [pc, #428]	; (40f900 <TaskMain+0x2c8>)
  40f752:	4c63      	ldr	r4, [pc, #396]	; (40f8e0 <TaskMain+0x2a8>)
  40f754:	47a0      	blx	r4
  40f756:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f758:	68fb      	ldr	r3, [r7, #12]
  40f75a:	2b01      	cmp	r3, #1
  40f75c:	d003      	beq.n	40f766 <TaskMain+0x12e>
	{
		printf("Failed to create Q3 task code %d\r\n", retCode);
  40f75e:	4869      	ldr	r0, [pc, #420]	; (40f904 <TaskMain+0x2cc>)
  40f760:	68f9      	ldr	r1, [r7, #12]
  40f762:	4b53      	ldr	r3, [pc, #332]	; (40f8b0 <TaskMain+0x278>)
  40f764:	4798      	blx	r3
	}
	
	retCode = xTaskCreate(task_fabSenseHandler, "FS", TASK_FABSENSE_STACK_SIZE,(void*)&fsConfig, TASK_FABSENSE_PRIORITY, &fabSenseTaskHandle);
  40f766:	2305      	movs	r3, #5
  40f768:	9300      	str	r3, [sp, #0]
  40f76a:	4b67      	ldr	r3, [pc, #412]	; (40f908 <TaskMain+0x2d0>)
  40f76c:	9301      	str	r3, [sp, #4]
  40f76e:	2300      	movs	r3, #0
  40f770:	9302      	str	r3, [sp, #8]
  40f772:	2300      	movs	r3, #0
  40f774:	9303      	str	r3, [sp, #12]
  40f776:	4865      	ldr	r0, [pc, #404]	; (40f90c <TaskMain+0x2d4>)
  40f778:	4965      	ldr	r1, [pc, #404]	; (40f910 <TaskMain+0x2d8>)
  40f77a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40f77e:	4b65      	ldr	r3, [pc, #404]	; (40f914 <TaskMain+0x2dc>)
  40f780:	4c57      	ldr	r4, [pc, #348]	; (40f8e0 <TaskMain+0x2a8>)
  40f782:	47a0      	blx	r4
  40f784:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f786:	68fb      	ldr	r3, [r7, #12]
  40f788:	2b01      	cmp	r3, #1
  40f78a:	d003      	beq.n	40f794 <TaskMain+0x15c>
	{
		printf("Failed to create fabric sense task code %d\r\n", retCode);
  40f78c:	4862      	ldr	r0, [pc, #392]	; (40f918 <TaskMain+0x2e0>)
  40f78e:	68f9      	ldr	r1, [r7, #12]
  40f790:	4b47      	ldr	r3, [pc, #284]	; (40f8b0 <TaskMain+0x278>)
  40f792:	4798      	blx	r3
	}

	retCode = xTaskCreate(task_commandHandler, "cmd", TASK_SERIAL_RECEIVE_STACK_SIZE,(void*)&cmdConfig, TASK_SERIAL_RECEIVE_PRIORITY, &cmdHandlerTaskHandle );
  40f794:	2306      	movs	r3, #6
  40f796:	9300      	str	r3, [sp, #0]
  40f798:	4b60      	ldr	r3, [pc, #384]	; (40f91c <TaskMain+0x2e4>)
  40f79a:	9301      	str	r3, [sp, #4]
  40f79c:	2300      	movs	r3, #0
  40f79e:	9302      	str	r3, [sp, #8]
  40f7a0:	2300      	movs	r3, #0
  40f7a2:	9303      	str	r3, [sp, #12]
  40f7a4:	485e      	ldr	r0, [pc, #376]	; (40f920 <TaskMain+0x2e8>)
  40f7a6:	495f      	ldr	r1, [pc, #380]	; (40f924 <TaskMain+0x2ec>)
  40f7a8:	f240 2271 	movw	r2, #625	; 0x271
  40f7ac:	4b5e      	ldr	r3, [pc, #376]	; (40f928 <TaskMain+0x2f0>)
  40f7ae:	4c4c      	ldr	r4, [pc, #304]	; (40f8e0 <TaskMain+0x2a8>)
  40f7b0:	47a0      	blx	r4
  40f7b2:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f7b4:	68fb      	ldr	r3, [r7, #12]
  40f7b6:	2b01      	cmp	r3, #1
  40f7b8:	d003      	beq.n	40f7c2 <TaskMain+0x18a>
	{
		printf("Failed to Serial handler task code %d\r\n", retCode);
  40f7ba:	485c      	ldr	r0, [pc, #368]	; (40f92c <TaskMain+0x2f4>)
  40f7bc:	68f9      	ldr	r1, [r7, #12]
  40f7be:	4b3c      	ldr	r3, [pc, #240]	; (40f8b0 <TaskMain+0x278>)
  40f7c0:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_dataHandler, "DH", TASK_DATA_HANDLER_STACK_SIZE, NULL, TASK_DATA_HANDLER_PRIORITY, &dataHandlerTaskHandle );
  40f7c2:	2307      	movs	r3, #7
  40f7c4:	9300      	str	r3, [sp, #0]
  40f7c6:	4b5a      	ldr	r3, [pc, #360]	; (40f930 <TaskMain+0x2f8>)
  40f7c8:	9301      	str	r3, [sp, #4]
  40f7ca:	2300      	movs	r3, #0
  40f7cc:	9302      	str	r3, [sp, #8]
  40f7ce:	2300      	movs	r3, #0
  40f7d0:	9303      	str	r3, [sp, #12]
  40f7d2:	4858      	ldr	r0, [pc, #352]	; (40f934 <TaskMain+0x2fc>)
  40f7d4:	4958      	ldr	r1, [pc, #352]	; (40f938 <TaskMain+0x300>)
  40f7d6:	f240 22ee 	movw	r2, #750	; 0x2ee
  40f7da:	2300      	movs	r3, #0
  40f7dc:	4c40      	ldr	r4, [pc, #256]	; (40f8e0 <TaskMain+0x2a8>)
  40f7de:	47a0      	blx	r4
  40f7e0:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f7e2:	68fb      	ldr	r3, [r7, #12]
  40f7e4:	2b01      	cmp	r3, #1
  40f7e6:	d003      	beq.n	40f7f0 <TaskMain+0x1b8>
	{
		printf("Failed to create data handler task code %d\r\n", retCode);
  40f7e8:	4854      	ldr	r0, [pc, #336]	; (40f93c <TaskMain+0x304>)
  40f7ea:	68f9      	ldr	r1, [r7, #12]
  40f7ec:	4b30      	ldr	r3, [pc, #192]	; (40f8b0 <TaskMain+0x278>)
  40f7ee:	4798      	blx	r3
	}	
	retCode = xTaskCreate(task_sdCardHandler, "SD", TASK_SD_CARD_WRITE_STACK_SIZE, NULL, TASK_SD_CARD_WRITE_PRIORITY, &sdCardTaskHandle );
  40f7f0:	2304      	movs	r3, #4
  40f7f2:	9300      	str	r3, [sp, #0]
  40f7f4:	4b52      	ldr	r3, [pc, #328]	; (40f940 <TaskMain+0x308>)
  40f7f6:	9301      	str	r3, [sp, #4]
  40f7f8:	2300      	movs	r3, #0
  40f7fa:	9302      	str	r3, [sp, #8]
  40f7fc:	2300      	movs	r3, #0
  40f7fe:	9303      	str	r3, [sp, #12]
  40f800:	4850      	ldr	r0, [pc, #320]	; (40f944 <TaskMain+0x30c>)
  40f802:	4951      	ldr	r1, [pc, #324]	; (40f948 <TaskMain+0x310>)
  40f804:	f44f 7200 	mov.w	r2, #512	; 0x200
  40f808:	2300      	movs	r3, #0
  40f80a:	4c35      	ldr	r4, [pc, #212]	; (40f8e0 <TaskMain+0x2a8>)
  40f80c:	47a0      	blx	r4
  40f80e:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f810:	68fb      	ldr	r3, [r7, #12]
  40f812:	2b01      	cmp	r3, #1
  40f814:	d003      	beq.n	40f81e <TaskMain+0x1e6>
	{
		printf("Failed to create sd card task code %d\r\n", retCode);
  40f816:	484d      	ldr	r0, [pc, #308]	; (40f94c <TaskMain+0x314>)
  40f818:	68f9      	ldr	r1, [r7, #12]
  40f81a:	4b25      	ldr	r3, [pc, #148]	; (40f8b0 <TaskMain+0x278>)
  40f81c:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_stateMachineHandler, "SM", TASK_STATE_MACHINE_STACK_SIZE, NULL, TASK_STATE_MACHINE_PRIORITY, &stateMachineTaskHandle );
  40f81e:	2303      	movs	r3, #3
  40f820:	9300      	str	r3, [sp, #0]
  40f822:	4b4b      	ldr	r3, [pc, #300]	; (40f950 <TaskMain+0x318>)
  40f824:	9301      	str	r3, [sp, #4]
  40f826:	2300      	movs	r3, #0
  40f828:	9302      	str	r3, [sp, #8]
  40f82a:	2300      	movs	r3, #0
  40f82c:	9303      	str	r3, [sp, #12]
  40f82e:	4849      	ldr	r0, [pc, #292]	; (40f954 <TaskMain+0x31c>)
  40f830:	4949      	ldr	r1, [pc, #292]	; (40f958 <TaskMain+0x320>)
  40f832:	f44f 7240 	mov.w	r2, #768	; 0x300
  40f836:	2300      	movs	r3, #0
  40f838:	4c29      	ldr	r4, [pc, #164]	; (40f8e0 <TaskMain+0x2a8>)
  40f83a:	47a0      	blx	r4
  40f83c:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40f83e:	68fb      	ldr	r3, [r7, #12]
  40f840:	2b01      	cmp	r3, #1
  40f842:	d003      	beq.n	40f84c <TaskMain+0x214>
	{
		printf("Failed to state machine task code %d\r\n", retCode);
  40f844:	4845      	ldr	r0, [pc, #276]	; (40f95c <TaskMain+0x324>)
  40f846:	68f9      	ldr	r1, [r7, #12]
  40f848:	4b19      	ldr	r3, [pc, #100]	; (40f8b0 <TaskMain+0x278>)
  40f84a:	4798      	blx	r3
	}
	
	uint8_t interval = 0;
  40f84c:	2300      	movs	r3, #0
  40f84e:	727b      	strb	r3, [r7, #9]
	for (;;) 
	{
		/*	Hardware Test routine	*/
		wdt_restart(WDT);
  40f850:	4843      	ldr	r0, [pc, #268]	; (40f960 <TaskMain+0x328>)
  40f852:	4b44      	ldr	r3, [pc, #272]	; (40f964 <TaskMain+0x32c>)
  40f854:	4798      	blx	r3
		checkInputGpio();
  40f856:	4b44      	ldr	r3, [pc, #272]	; (40f968 <TaskMain+0x330>)
  40f858:	4798      	blx	r3
		if (getCurrentState() != (SYS_STATE_OFF))
  40f85a:	4b44      	ldr	r3, [pc, #272]	; (40f96c <TaskMain+0x334>)
  40f85c:	4798      	blx	r3
  40f85e:	4603      	mov	r3, r0
  40f860:	2b00      	cmp	r3, #0
  40f862:	d00a      	beq.n	40f87a <TaskMain+0x242>
		{
			checkRtosStack(vLoopCount);
  40f864:	6978      	ldr	r0, [r7, #20]
  40f866:	4b42      	ldr	r3, [pc, #264]	; (40f970 <TaskMain+0x338>)
  40f868:	4798      	blx	r3
			(vLoopCount)++;
  40f86a:	697b      	ldr	r3, [r7, #20]
  40f86c:	3301      	adds	r3, #1
  40f86e:	617b      	str	r3, [r7, #20]
			 if (vLoopCount > 7)
  40f870:	697b      	ldr	r3, [r7, #20]
  40f872:	2b07      	cmp	r3, #7
  40f874:	dd01      	ble.n	40f87a <TaskMain+0x242>
			 {
				 vLoopCount = 0;
  40f876:	2300      	movs	r3, #0
  40f878:	617b      	str	r3, [r7, #20]
			 }
		}
		if (vCycleJcEnCount == 10)
  40f87a:	693b      	ldr	r3, [r7, #16]
  40f87c:	2b0a      	cmp	r3, #10
  40f87e:	d103      	bne.n	40f888 <TaskMain+0x250>
		{
			//Check for Jack Detects every 1000ms
			checkJackDetects();
  40f880:	4b3c      	ldr	r3, [pc, #240]	; (40f974 <TaskMain+0x33c>)
  40f882:	4798      	blx	r3
			vCycleJcEnCount = 0;
  40f884:	2300      	movs	r3, #0
  40f886:	613b      	str	r3, [r7, #16]
		}
		vCycleJcEnCount++;		
  40f888:	693b      	ldr	r3, [r7, #16]
  40f88a:	3301      	adds	r3, #1
  40f88c:	613b      	str	r3, [r7, #16]
		vTaskDelay(100);
  40f88e:	2064      	movs	r0, #100	; 0x64
  40f890:	4b39      	ldr	r3, [pc, #228]	; (40f978 <TaskMain+0x340>)
  40f892:	4798      	blx	r3
	}
  40f894:	e7dc      	b.n	40f850 <TaskMain+0x218>
  40f896:	bf00      	nop
  40f898:	0040c9e1 	.word	0x0040c9e1
  40f89c:	0040f56d 	.word	0x0040f56d
  40f8a0:	0041d6e8 	.word	0x0041d6e8
  40f8a4:	0040bfbd 	.word	0x0040bfbd
  40f8a8:	2000509c 	.word	0x2000509c
  40f8ac:	0041d6f4 	.word	0x0041d6f4
  40f8b0:	004129e9 	.word	0x004129e9
  40f8b4:	0040f5b5 	.word	0x0040f5b5
  40f8b8:	0041d71c 	.word	0x0041d71c
  40f8bc:	20005094 	.word	0x20005094
  40f8c0:	0040f609 	.word	0x0040f609
  40f8c4:	0041d730 	.word	0x0041d730
  40f8c8:	20005090 	.word	0x20005090
  40f8cc:	0041d744 	.word	0x0041d744
  40f8d0:	20000534 	.word	0x20000534
  40f8d4:	00410049 	.word	0x00410049
  40f8d8:	0041d778 	.word	0x0041d778
  40f8dc:	20000508 	.word	0x20000508
  40f8e0:	0040b029 	.word	0x0040b029
  40f8e4:	0041d77c 	.word	0x0041d77c
  40f8e8:	20000570 	.word	0x20000570
  40f8ec:	0041d7a0 	.word	0x0041d7a0
  40f8f0:	20000544 	.word	0x20000544
  40f8f4:	0041d7a4 	.word	0x0041d7a4
  40f8f8:	200005ac 	.word	0x200005ac
  40f8fc:	0041d7c8 	.word	0x0041d7c8
  40f900:	20000580 	.word	0x20000580
  40f904:	0041d7cc 	.word	0x0041d7cc
  40f908:	200038fc 	.word	0x200038fc
  40f90c:	0040f399 	.word	0x0040f399
  40f910:	0041d7f0 	.word	0x0041d7f0
  40f914:	200005c0 	.word	0x200005c0
  40f918:	0041d7f4 	.word	0x0041d7f4
  40f91c:	20003900 	.word	0x20003900
  40f920:	00400b59 	.word	0x00400b59
  40f924:	0041d824 	.word	0x0041d824
  40f928:	200005bc 	.word	0x200005bc
  40f92c:	0041d828 	.word	0x0041d828
  40f930:	20003904 	.word	0x20003904
  40f934:	0040ec19 	.word	0x0040ec19
  40f938:	0041d850 	.word	0x0041d850
  40f93c:	0041d854 	.word	0x0041d854
  40f940:	20003908 	.word	0x20003908
  40f944:	004017ed 	.word	0x004017ed
  40f948:	0041d884 	.word	0x0041d884
  40f94c:	0041d888 	.word	0x0041d888
  40f950:	2000390c 	.word	0x2000390c
  40f954:	004024a9 	.word	0x004024a9
  40f958:	0041d8b0 	.word	0x0041d8b0
  40f95c:	0041d8b4 	.word	0x0041d8b4
  40f960:	400e1450 	.word	0x400e1450
  40f964:	00411e19 	.word	0x00411e19
  40f968:	0040f97d 	.word	0x0040f97d
  40f96c:	004025e9 	.word	0x004025e9
  40f970:	0040fd75 	.word	0x0040fd75
  40f974:	0040ff5d 	.word	0x0040ff5d
  40f978:	0040b24d 	.word	0x0040b24d

0040f97c <checkInputGpio>:
 * @brief Check for interrupt flags on every GPIO pins, process them and raise State machine events
 * @param 
 * @return 
 ***********************************************************************************************/
static void checkInputGpio(void)
{
  40f97c:	b590      	push	{r4, r7, lr}
  40f97e:	b08d      	sub	sp, #52	; 0x34
  40f980:	af02      	add	r7, sp, #8
	dataPacket_t packet;
	//TODO maybe the enqueueing of event should be done in the interrupts??
	if ((drv_gpio_check_Int(DRV_GPIO_PIN_PW_SW) == 1) || (pwSwitchTimerFlag == 1))
  40f982:	2000      	movs	r0, #0
  40f984:	4b98      	ldr	r3, [pc, #608]	; (40fbe8 <checkInputGpio+0x26c>)
  40f986:	4798      	blx	r3
  40f988:	4603      	mov	r3, r0
  40f98a:	2b00      	cmp	r3, #0
  40f98c:	d103      	bne.n	40f996 <checkInputGpio+0x1a>
  40f98e:	4b97      	ldr	r3, [pc, #604]	; (40fbec <checkInputGpio+0x270>)
  40f990:	781b      	ldrb	r3, [r3, #0]
  40f992:	2b01      	cmp	r3, #1
  40f994:	d141      	bne.n	40fa1a <checkInputGpio+0x9e>
	{
		unsigned long PinFlag;		
		if (pwSwToggle == FALSE)
  40f996:	4b96      	ldr	r3, [pc, #600]	; (40fbf0 <checkInputGpio+0x274>)
  40f998:	781b      	ldrb	r3, [r3, #0]
  40f99a:	f083 0301 	eor.w	r3, r3, #1
  40f99e:	b2db      	uxtb	r3, r3
  40f9a0:	2b00      	cmp	r3, #0
  40f9a2:	d017      	beq.n	40f9d4 <checkInputGpio+0x58>
		{
			pwSwitchTimerFlag = 0;
  40f9a4:	4b91      	ldr	r3, [pc, #580]	; (40fbec <checkInputGpio+0x270>)
  40f9a6:	2200      	movs	r2, #0
  40f9a8:	701a      	strb	r2, [r3, #0]
			drv_gpio_config_interrupt(DRV_GPIO_PIN_PW_SW, DRV_GPIO_INTERRUPT_HIGH_EDGE);	//Power pin pressed; configure interrupt for Rising edge
  40f9aa:	2000      	movs	r0, #0
  40f9ac:	2100      	movs	r1, #0
  40f9ae:	4b91      	ldr	r3, [pc, #580]	; (40fbf4 <checkInputGpio+0x278>)
  40f9b0:	4798      	blx	r3
			xTimerReset(SleepTimer, 0);
  40f9b2:	4b91      	ldr	r3, [pc, #580]	; (40fbf8 <checkInputGpio+0x27c>)
  40f9b4:	681c      	ldr	r4, [r3, #0]
  40f9b6:	4b91      	ldr	r3, [pc, #580]	; (40fbfc <checkInputGpio+0x280>)
  40f9b8:	4798      	blx	r3
  40f9ba:	4603      	mov	r3, r0
  40f9bc:	2200      	movs	r2, #0
  40f9be:	9200      	str	r2, [sp, #0]
  40f9c0:	4620      	mov	r0, r4
  40f9c2:	2100      	movs	r1, #0
  40f9c4:	461a      	mov	r2, r3
  40f9c6:	2300      	movs	r3, #0
  40f9c8:	4c8d      	ldr	r4, [pc, #564]	; (40fc00 <checkInputGpio+0x284>)
  40f9ca:	47a0      	blx	r4
			pwSwToggle = TRUE;
  40f9cc:	4b88      	ldr	r3, [pc, #544]	; (40fbf0 <checkInputGpio+0x274>)
  40f9ce:	2201      	movs	r2, #1
  40f9d0:	701a      	strb	r2, [r3, #0]
  40f9d2:	e022      	b.n	40fa1a <checkInputGpio+0x9e>
		}
		else if((pwSwToggle == TRUE)||(pwSwitchTimerFlag == 1))
  40f9d4:	4b86      	ldr	r3, [pc, #536]	; (40fbf0 <checkInputGpio+0x274>)
  40f9d6:	781b      	ldrb	r3, [r3, #0]
  40f9d8:	2b00      	cmp	r3, #0
  40f9da:	d103      	bne.n	40f9e4 <checkInputGpio+0x68>
  40f9dc:	4b83      	ldr	r3, [pc, #524]	; (40fbec <checkInputGpio+0x270>)
  40f9de:	781b      	ldrb	r3, [r3, #0]
  40f9e0:	2b01      	cmp	r3, #1
  40f9e2:	d11a      	bne.n	40fa1a <checkInputGpio+0x9e>
		{
			xTimerStop(SleepTimer, 0);
  40f9e4:	4b84      	ldr	r3, [pc, #528]	; (40fbf8 <checkInputGpio+0x27c>)
  40f9e6:	681b      	ldr	r3, [r3, #0]
  40f9e8:	2200      	movs	r2, #0
  40f9ea:	9200      	str	r2, [sp, #0]
  40f9ec:	4618      	mov	r0, r3
  40f9ee:	2101      	movs	r1, #1
  40f9f0:	2200      	movs	r2, #0
  40f9f2:	2300      	movs	r3, #0
  40f9f4:	4c82      	ldr	r4, [pc, #520]	; (40fc00 <checkInputGpio+0x284>)
  40f9f6:	47a0      	blx	r4
			drv_gpio_config_interrupt(DRV_GPIO_ID_PIN_PW_SW, DRV_GPIO_INTERRUPT_LOW_EDGE);	//Power pin released; configure interrupt for Falling edge
  40f9f8:	2000      	movs	r0, #0
  40f9fa:	2101      	movs	r1, #1
  40f9fc:	4b7d      	ldr	r3, [pc, #500]	; (40fbf4 <checkInputGpio+0x278>)
  40f9fe:	4798      	blx	r3
			pwSwToggle = FALSE;
  40fa00:	4b7b      	ldr	r3, [pc, #492]	; (40fbf0 <checkInputGpio+0x274>)
  40fa02:	2200      	movs	r2, #0
  40fa04:	701a      	strb	r2, [r3, #0]
			if (pwSwitchTimerFlag != 1)
  40fa06:	4b79      	ldr	r3, [pc, #484]	; (40fbec <checkInputGpio+0x270>)
  40fa08:	781b      	ldrb	r3, [r3, #0]
  40fa0a:	2b01      	cmp	r3, #1
  40fa0c:	d002      	beq.n	40fa14 <checkInputGpio+0x98>
			{
				debugPrintString("PW SW pressed\r\n");
  40fa0e:	487d      	ldr	r0, [pc, #500]	; (40fc04 <checkInputGpio+0x288>)
  40fa10:	4b7d      	ldr	r3, [pc, #500]	; (40fc08 <checkInputGpio+0x28c>)
  40fa12:	4798      	blx	r3
			}
			pwSwitchTimerFlag = 0;
  40fa14:	4b75      	ldr	r3, [pc, #468]	; (40fbec <checkInputGpio+0x270>)
  40fa16:	2200      	movs	r2, #0
  40fa18:	701a      	strb	r2, [r3, #0]
		}
	}	
	
	if ((drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW1) == 1) || (SystemResetTimerFlag == 1))
  40fa1a:	2001      	movs	r0, #1
  40fa1c:	4b72      	ldr	r3, [pc, #456]	; (40fbe8 <checkInputGpio+0x26c>)
  40fa1e:	4798      	blx	r3
  40fa20:	4603      	mov	r3, r0
  40fa22:	2b00      	cmp	r3, #0
  40fa24:	d103      	bne.n	40fa2e <checkInputGpio+0xb2>
  40fa26:	4b79      	ldr	r3, [pc, #484]	; (40fc0c <checkInputGpio+0x290>)
  40fa28:	781b      	ldrb	r3, [r3, #0]
  40fa2a:	2b01      	cmp	r3, #1
  40fa2c:	d159      	bne.n	40fae2 <checkInputGpio+0x166>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_RECORD_SWITCH,0); 
		if (recordSwToggle == FALSE)
  40fa2e:	4b78      	ldr	r3, [pc, #480]	; (40fc10 <checkInputGpio+0x294>)
  40fa30:	781b      	ldrb	r3, [r3, #0]
  40fa32:	f083 0301 	eor.w	r3, r3, #1
  40fa36:	b2db      	uxtb	r3, r3
  40fa38:	2b00      	cmp	r3, #0
  40fa3a:	d01e      	beq.n	40fa7a <checkInputGpio+0xfe>
		{
			recordSwSet = TRUE;	//set the flag to as the pin is pulled low
  40fa3c:	4b75      	ldr	r3, [pc, #468]	; (40fc14 <checkInputGpio+0x298>)
  40fa3e:	2201      	movs	r2, #1
  40fa40:	701a      	strb	r2, [r3, #0]
			if (resetSwSet == TRUE)	//check if reset switch was previously pressed
  40fa42:	4b75      	ldr	r3, [pc, #468]	; (40fc18 <checkInputGpio+0x29c>)
  40fa44:	781b      	ldrb	r3, [r3, #0]
  40fa46:	2b00      	cmp	r3, #0
  40fa48:	d00f      	beq.n	40fa6a <checkInputGpio+0xee>
			{
				//initiate the timer as both the switches are pressed
				SystemResetTimerFlag = 0;
  40fa4a:	4b70      	ldr	r3, [pc, #448]	; (40fc0c <checkInputGpio+0x290>)
  40fa4c:	2200      	movs	r2, #0
  40fa4e:	701a      	strb	r2, [r3, #0]
				xTimerReset(SystemResetTimer, 0);
  40fa50:	4b72      	ldr	r3, [pc, #456]	; (40fc1c <checkInputGpio+0x2a0>)
  40fa52:	681c      	ldr	r4, [r3, #0]
  40fa54:	4b69      	ldr	r3, [pc, #420]	; (40fbfc <checkInputGpio+0x280>)
  40fa56:	4798      	blx	r3
  40fa58:	4603      	mov	r3, r0
  40fa5a:	2200      	movs	r2, #0
  40fa5c:	9200      	str	r2, [sp, #0]
  40fa5e:	4620      	mov	r0, r4
  40fa60:	2100      	movs	r1, #0
  40fa62:	461a      	mov	r2, r3
  40fa64:	2300      	movs	r3, #0
  40fa66:	4c66      	ldr	r4, [pc, #408]	; (40fc00 <checkInputGpio+0x284>)
  40fa68:	47a0      	blx	r4
			}
			drv_gpio_config_interrupt(DRV_GPIO_PIN_AC_SW1, DRV_GPIO_INTERRUPT_HIGH_EDGE);	//Record pin pressed; configure interrupt for Rising edge
  40fa6a:	2001      	movs	r0, #1
  40fa6c:	2100      	movs	r1, #0
  40fa6e:	4b61      	ldr	r3, [pc, #388]	; (40fbf4 <checkInputGpio+0x278>)
  40fa70:	4798      	blx	r3
			recordSwToggle = TRUE;
  40fa72:	4b67      	ldr	r3, [pc, #412]	; (40fc10 <checkInputGpio+0x294>)
  40fa74:	2201      	movs	r2, #1
  40fa76:	701a      	strb	r2, [r3, #0]
  40fa78:	e033      	b.n	40fae2 <checkInputGpio+0x166>
		}
		else if((recordSwToggle == TRUE) || (SystemResetTimerFlag == 1))
  40fa7a:	4b65      	ldr	r3, [pc, #404]	; (40fc10 <checkInputGpio+0x294>)
  40fa7c:	781b      	ldrb	r3, [r3, #0]
  40fa7e:	2b00      	cmp	r3, #0
  40fa80:	d103      	bne.n	40fa8a <checkInputGpio+0x10e>
  40fa82:	4b62      	ldr	r3, [pc, #392]	; (40fc0c <checkInputGpio+0x290>)
  40fa84:	781b      	ldrb	r3, [r3, #0]
  40fa86:	2b01      	cmp	r3, #1
  40fa88:	d12b      	bne.n	40fae2 <checkInputGpio+0x166>
		{
			recordSwSet = FALSE;
  40fa8a:	4b62      	ldr	r3, [pc, #392]	; (40fc14 <checkInputGpio+0x298>)
  40fa8c:	2200      	movs	r2, #0
  40fa8e:	701a      	strb	r2, [r3, #0]
			xTimerStop(SystemResetTimer, 0);
  40fa90:	4b62      	ldr	r3, [pc, #392]	; (40fc1c <checkInputGpio+0x2a0>)
  40fa92:	681b      	ldr	r3, [r3, #0]
  40fa94:	2200      	movs	r2, #0
  40fa96:	9200      	str	r2, [sp, #0]
  40fa98:	4618      	mov	r0, r3
  40fa9a:	2101      	movs	r1, #1
  40fa9c:	2200      	movs	r2, #0
  40fa9e:	2300      	movs	r3, #0
  40faa0:	4c57      	ldr	r4, [pc, #348]	; (40fc00 <checkInputGpio+0x284>)
  40faa2:	47a0      	blx	r4
			drv_gpio_config_interrupt(DRV_GPIO_PIN_AC_SW1, DRV_GPIO_INTERRUPT_LOW_EDGE);	//Record pin released; configure interrupt for Falling edge
  40faa4:	2001      	movs	r0, #1
  40faa6:	2101      	movs	r1, #1
  40faa8:	4b52      	ldr	r3, [pc, #328]	; (40fbf4 <checkInputGpio+0x278>)
  40faaa:	4798      	blx	r3
			recordSwToggle = FALSE;
  40faac:	4b58      	ldr	r3, [pc, #352]	; (40fc10 <checkInputGpio+0x294>)
  40faae:	2200      	movs	r2, #0
  40fab0:	701a      	strb	r2, [r3, #0]
			if (SystemResetTimerFlag == 1)
  40fab2:	4b56      	ldr	r3, [pc, #344]	; (40fc0c <checkInputGpio+0x290>)
  40fab4:	781b      	ldrb	r3, [r3, #0]
  40fab6:	2b01      	cmp	r3, #1
  40fab8:	d109      	bne.n	40face <checkInputGpio+0x152>
			{
				debugPrintString("System reset triggered\r\n");
  40faba:	4859      	ldr	r0, [pc, #356]	; (40fc20 <checkInputGpio+0x2a4>)
  40fabc:	4b52      	ldr	r3, [pc, #328]	; (40fc08 <checkInputGpio+0x28c>)
  40fabe:	4798      	blx	r3
				vTaskDelay(200); //wait for the log to be written
  40fac0:	20c8      	movs	r0, #200	; 0xc8
  40fac2:	4b58      	ldr	r3, [pc, #352]	; (40fc24 <checkInputGpio+0x2a8>)
  40fac4:	4798      	blx	r3
				rstc_start_software_reset(RSTC);
  40fac6:	4858      	ldr	r0, [pc, #352]	; (40fc28 <checkInputGpio+0x2ac>)
  40fac8:	4b58      	ldr	r3, [pc, #352]	; (40fc2c <checkInputGpio+0x2b0>)
  40faca:	4798      	blx	r3
  40facc:	e006      	b.n	40fadc <checkInputGpio+0x160>
			}
			else
			{
				task_stateMachine_EnqueueEvent(SYS_EVENT_RECORD_SWITCH,0);
  40face:	2002      	movs	r0, #2
  40fad0:	2100      	movs	r1, #0
  40fad2:	4b57      	ldr	r3, [pc, #348]	; (40fc30 <checkInputGpio+0x2b4>)
  40fad4:	4798      	blx	r3
				debugPrintString("Record switch pressed\r\n");
  40fad6:	4857      	ldr	r0, [pc, #348]	; (40fc34 <checkInputGpio+0x2b8>)
  40fad8:	4b4b      	ldr	r3, [pc, #300]	; (40fc08 <checkInputGpio+0x28c>)
  40fada:	4798      	blx	r3
			}
			SystemResetTimerFlag = 0;
  40fadc:	4b4b      	ldr	r3, [pc, #300]	; (40fc0c <checkInputGpio+0x290>)
  40fade:	2200      	movs	r2, #0
  40fae0:	701a      	strb	r2, [r3, #0]
		}
	}	
	
	if ((drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW2) == 1) || (SystemResetTimerFlag == 1) || (ResetButtonTimerFlag == 1))
  40fae2:	2002      	movs	r0, #2
  40fae4:	4b40      	ldr	r3, [pc, #256]	; (40fbe8 <checkInputGpio+0x26c>)
  40fae6:	4798      	blx	r3
  40fae8:	4603      	mov	r3, r0
  40faea:	2b00      	cmp	r3, #0
  40faec:	d108      	bne.n	40fb00 <checkInputGpio+0x184>
  40faee:	4b47      	ldr	r3, [pc, #284]	; (40fc0c <checkInputGpio+0x290>)
  40faf0:	781b      	ldrb	r3, [r3, #0]
  40faf2:	2b01      	cmp	r3, #1
  40faf4:	d004      	beq.n	40fb00 <checkInputGpio+0x184>
  40faf6:	4b50      	ldr	r3, [pc, #320]	; (40fc38 <checkInputGpio+0x2bc>)
  40faf8:	781b      	ldrb	r3, [r3, #0]
  40fafa:	2b01      	cmp	r3, #1
  40fafc:	f040 80c9 	bne.w	40fc92 <checkInputGpio+0x316>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_SWITCH,0); 		
		if (resetSwToggle == FALSE)
  40fb00:	4b4e      	ldr	r3, [pc, #312]	; (40fc3c <checkInputGpio+0x2c0>)
  40fb02:	781b      	ldrb	r3, [r3, #0]
  40fb04:	f083 0301 	eor.w	r3, r3, #1
  40fb08:	b2db      	uxtb	r3, r3
  40fb0a:	2b00      	cmp	r3, #0
  40fb0c:	d02e      	beq.n	40fb6c <checkInputGpio+0x1f0>
		{
			resetSwSet = TRUE;	//set the flag to as the pin is pulled low
  40fb0e:	4b42      	ldr	r3, [pc, #264]	; (40fc18 <checkInputGpio+0x29c>)
  40fb10:	2201      	movs	r2, #1
  40fb12:	701a      	strb	r2, [r3, #0]
			if (recordSwSet == TRUE)	//check if record switch was previously pressed
  40fb14:	4b3f      	ldr	r3, [pc, #252]	; (40fc14 <checkInputGpio+0x298>)
  40fb16:	781b      	ldrb	r3, [r3, #0]
  40fb18:	2b00      	cmp	r3, #0
  40fb1a:	d00f      	beq.n	40fb3c <checkInputGpio+0x1c0>
			{
				//initiate the timer as both the switches are pressed
				SystemResetTimerFlag = 0;
  40fb1c:	4b3b      	ldr	r3, [pc, #236]	; (40fc0c <checkInputGpio+0x290>)
  40fb1e:	2200      	movs	r2, #0
  40fb20:	701a      	strb	r2, [r3, #0]
				xTimerReset(SystemResetTimer, 0);
  40fb22:	4b3e      	ldr	r3, [pc, #248]	; (40fc1c <checkInputGpio+0x2a0>)
  40fb24:	681c      	ldr	r4, [r3, #0]
  40fb26:	4b35      	ldr	r3, [pc, #212]	; (40fbfc <checkInputGpio+0x280>)
  40fb28:	4798      	blx	r3
  40fb2a:	4603      	mov	r3, r0
  40fb2c:	2200      	movs	r2, #0
  40fb2e:	9200      	str	r2, [sp, #0]
  40fb30:	4620      	mov	r0, r4
  40fb32:	2100      	movs	r1, #0
  40fb34:	461a      	mov	r2, r3
  40fb36:	2300      	movs	r3, #0
  40fb38:	4c31      	ldr	r4, [pc, #196]	; (40fc00 <checkInputGpio+0x284>)
  40fb3a:	47a0      	blx	r4
			}
			//initiate the Reset button timer and clear the flag
			ResetButtonTimerFlag = 0;
  40fb3c:	4b3e      	ldr	r3, [pc, #248]	; (40fc38 <checkInputGpio+0x2bc>)
  40fb3e:	2200      	movs	r2, #0
  40fb40:	701a      	strb	r2, [r3, #0]
			xTimerReset(ResetButtonTimer, 0);
  40fb42:	4b3f      	ldr	r3, [pc, #252]	; (40fc40 <checkInputGpio+0x2c4>)
  40fb44:	681c      	ldr	r4, [r3, #0]
  40fb46:	4b2d      	ldr	r3, [pc, #180]	; (40fbfc <checkInputGpio+0x280>)
  40fb48:	4798      	blx	r3
  40fb4a:	4603      	mov	r3, r0
  40fb4c:	2200      	movs	r2, #0
  40fb4e:	9200      	str	r2, [sp, #0]
  40fb50:	4620      	mov	r0, r4
  40fb52:	2100      	movs	r1, #0
  40fb54:	461a      	mov	r2, r3
  40fb56:	2300      	movs	r3, #0
  40fb58:	4c29      	ldr	r4, [pc, #164]	; (40fc00 <checkInputGpio+0x284>)
  40fb5a:	47a0      	blx	r4
			drv_gpio_config_interrupt(DRV_GPIO_PIN_AC_SW2, DRV_GPIO_INTERRUPT_HIGH_EDGE);	//Reset pin pressed; configure interrupt for Rising edge
  40fb5c:	2002      	movs	r0, #2
  40fb5e:	2100      	movs	r1, #0
  40fb60:	4b24      	ldr	r3, [pc, #144]	; (40fbf4 <checkInputGpio+0x278>)
  40fb62:	4798      	blx	r3
			resetSwToggle = TRUE;
  40fb64:	4b35      	ldr	r3, [pc, #212]	; (40fc3c <checkInputGpio+0x2c0>)
  40fb66:	2201      	movs	r2, #1
  40fb68:	701a      	strb	r2, [r3, #0]
  40fb6a:	e092      	b.n	40fc92 <checkInputGpio+0x316>
		}
		else if((resetSwToggle == TRUE) || (SystemResetTimerFlag == 1) || (ResetButtonTimerFlag == 1))
  40fb6c:	4b33      	ldr	r3, [pc, #204]	; (40fc3c <checkInputGpio+0x2c0>)
  40fb6e:	781b      	ldrb	r3, [r3, #0]
  40fb70:	2b00      	cmp	r3, #0
  40fb72:	d108      	bne.n	40fb86 <checkInputGpio+0x20a>
  40fb74:	4b25      	ldr	r3, [pc, #148]	; (40fc0c <checkInputGpio+0x290>)
  40fb76:	781b      	ldrb	r3, [r3, #0]
  40fb78:	2b01      	cmp	r3, #1
  40fb7a:	d004      	beq.n	40fb86 <checkInputGpio+0x20a>
  40fb7c:	4b2e      	ldr	r3, [pc, #184]	; (40fc38 <checkInputGpio+0x2bc>)
  40fb7e:	781b      	ldrb	r3, [r3, #0]
  40fb80:	2b01      	cmp	r3, #1
  40fb82:	f040 8086 	bne.w	40fc92 <checkInputGpio+0x316>
		{
			resetSwSet = FALSE;
  40fb86:	4b24      	ldr	r3, [pc, #144]	; (40fc18 <checkInputGpio+0x29c>)
  40fb88:	2200      	movs	r2, #0
  40fb8a:	701a      	strb	r2, [r3, #0]
			if (SystemResetTimerFlag == 1)
  40fb8c:	4b1f      	ldr	r3, [pc, #124]	; (40fc0c <checkInputGpio+0x290>)
  40fb8e:	781b      	ldrb	r3, [r3, #0]
  40fb90:	2b01      	cmp	r3, #1
  40fb92:	d109      	bne.n	40fba8 <checkInputGpio+0x22c>
			{
				xTimerStop(SystemResetTimer, 0);	//only stop SystemReset timer if it was its event
  40fb94:	4b21      	ldr	r3, [pc, #132]	; (40fc1c <checkInputGpio+0x2a0>)
  40fb96:	681b      	ldr	r3, [r3, #0]
  40fb98:	2200      	movs	r2, #0
  40fb9a:	9200      	str	r2, [sp, #0]
  40fb9c:	4618      	mov	r0, r3
  40fb9e:	2101      	movs	r1, #1
  40fba0:	2200      	movs	r2, #0
  40fba2:	2300      	movs	r3, #0
  40fba4:	4c16      	ldr	r4, [pc, #88]	; (40fc00 <checkInputGpio+0x284>)
  40fba6:	47a0      	blx	r4
			}
			if (ResetButtonTimerFlag == 1)
  40fba8:	4b23      	ldr	r3, [pc, #140]	; (40fc38 <checkInputGpio+0x2bc>)
  40fbaa:	781b      	ldrb	r3, [r3, #0]
  40fbac:	2b01      	cmp	r3, #1
  40fbae:	d109      	bne.n	40fbc4 <checkInputGpio+0x248>
			{
				xTimerStop(ResetButtonTimer, 0);	//only stop ResetButton timer if it was its event
  40fbb0:	4b23      	ldr	r3, [pc, #140]	; (40fc40 <checkInputGpio+0x2c4>)
  40fbb2:	681b      	ldr	r3, [r3, #0]
  40fbb4:	2200      	movs	r2, #0
  40fbb6:	9200      	str	r2, [sp, #0]
  40fbb8:	4618      	mov	r0, r3
  40fbba:	2101      	movs	r1, #1
  40fbbc:	2200      	movs	r2, #0
  40fbbe:	2300      	movs	r3, #0
  40fbc0:	4c0f      	ldr	r4, [pc, #60]	; (40fc00 <checkInputGpio+0x284>)
  40fbc2:	47a0      	blx	r4
			}
			drv_gpio_config_interrupt(DRV_GPIO_PIN_AC_SW2, DRV_GPIO_INTERRUPT_LOW_EDGE);	//Reset pin released; configure interrupt for Falling edge
  40fbc4:	2002      	movs	r0, #2
  40fbc6:	2101      	movs	r1, #1
  40fbc8:	4b0a      	ldr	r3, [pc, #40]	; (40fbf4 <checkInputGpio+0x278>)
  40fbca:	4798      	blx	r3
			resetSwToggle = FALSE;
  40fbcc:	4b1b      	ldr	r3, [pc, #108]	; (40fc3c <checkInputGpio+0x2c0>)
  40fbce:	2200      	movs	r2, #0
  40fbd0:	701a      	strb	r2, [r3, #0]
			if (SystemResetTimerFlag == 1)
  40fbd2:	4b0e      	ldr	r3, [pc, #56]	; (40fc0c <checkInputGpio+0x290>)
  40fbd4:	781b      	ldrb	r3, [r3, #0]
  40fbd6:	2b01      	cmp	r3, #1
  40fbd8:	d134      	bne.n	40fc44 <checkInputGpio+0x2c8>
			{
				debugPrintString("System reset triggered\r\n");
  40fbda:	4811      	ldr	r0, [pc, #68]	; (40fc20 <checkInputGpio+0x2a4>)
  40fbdc:	4b0a      	ldr	r3, [pc, #40]	; (40fc08 <checkInputGpio+0x28c>)
  40fbde:	4798      	blx	r3
				rstc_start_software_reset(RSTC);
  40fbe0:	4811      	ldr	r0, [pc, #68]	; (40fc28 <checkInputGpio+0x2ac>)
  40fbe2:	4b12      	ldr	r3, [pc, #72]	; (40fc2c <checkInputGpio+0x2b0>)
  40fbe4:	4798      	blx	r3
  40fbe6:	e04e      	b.n	40fc86 <checkInputGpio+0x30a>
  40fbe8:	0040d9c5 	.word	0x0040d9c5
  40fbec:	200038f9 	.word	0x200038f9
  40fbf0:	200038f4 	.word	0x200038f4
  40fbf4:	0040d929 	.word	0x0040d929
  40fbf8:	2000509c 	.word	0x2000509c
  40fbfc:	0040b44d 	.word	0x0040b44d
  40fc00:	0040c029 	.word	0x0040c029
  40fc04:	0041d8dc 	.word	0x0041d8dc
  40fc08:	004016d5 	.word	0x004016d5
  40fc0c:	200038fa 	.word	0x200038fa
  40fc10:	200038f6 	.word	0x200038f6
  40fc14:	200038f8 	.word	0x200038f8
  40fc18:	200038f7 	.word	0x200038f7
  40fc1c:	20005094 	.word	0x20005094
  40fc20:	0041d8ec 	.word	0x0041d8ec
  40fc24:	0040b24d 	.word	0x0040b24d
  40fc28:	400e1400 	.word	0x400e1400
  40fc2c:	0040058d 	.word	0x0040058d
  40fc30:	00402581 	.word	0x00402581
  40fc34:	0041d908 	.word	0x0041d908
  40fc38:	200038fb 	.word	0x200038fb
  40fc3c:	200038f5 	.word	0x200038f5
  40fc40:	20005090 	.word	0x20005090
			}
			else
			{
				if (!ResetButtonTimerFlag)
  40fc44:	4b3a      	ldr	r3, [pc, #232]	; (40fd30 <checkInputGpio+0x3b4>)
  40fc46:	781b      	ldrb	r3, [r3, #0]
  40fc48:	2b00      	cmp	r3, #0
  40fc4a:	d115      	bne.n	40fc78 <checkInputGpio+0x2fc>
				{
					//Pass an event to dataProcessor to log button press
					packet.type = DATA_PACKET_TYPE_BUTTON;
  40fc4c:	2305      	movs	r3, #5
  40fc4e:	713b      	strb	r3, [r7, #4]
					if (queue_dataHandler != NULL)
  40fc50:	4b38      	ldr	r3, [pc, #224]	; (40fd34 <checkInputGpio+0x3b8>)
  40fc52:	681b      	ldr	r3, [r3, #0]
  40fc54:	2b00      	cmp	r3, #0
  40fc56:	d016      	beq.n	40fc86 <checkInputGpio+0x30a>
					{
						if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,5) != TRUE)
  40fc58:	4b36      	ldr	r3, [pc, #216]	; (40fd34 <checkInputGpio+0x3b8>)
  40fc5a:	681a      	ldr	r2, [r3, #0]
  40fc5c:	1d3b      	adds	r3, r7, #4
  40fc5e:	4610      	mov	r0, r2
  40fc60:	4619      	mov	r1, r3
  40fc62:	2205      	movs	r2, #5
  40fc64:	2300      	movs	r3, #0
  40fc66:	4c34      	ldr	r4, [pc, #208]	; (40fd38 <checkInputGpio+0x3bc>)
  40fc68:	47a0      	blx	r4
  40fc6a:	4603      	mov	r3, r0
  40fc6c:	2b01      	cmp	r3, #1
  40fc6e:	d00a      	beq.n	40fc86 <checkInputGpio+0x30a>
						{
							//error failed to queue the packet.
							debugPrintString("Queue Full Dropped packet\r\n");
  40fc70:	4832      	ldr	r0, [pc, #200]	; (40fd3c <checkInputGpio+0x3c0>)
  40fc72:	4b33      	ldr	r3, [pc, #204]	; (40fd40 <checkInputGpio+0x3c4>)
  40fc74:	4798      	blx	r3
  40fc76:	e006      	b.n	40fc86 <checkInputGpio+0x30a>
						}
					}
				}
				else
				{
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_SWITCH,0);
  40fc78:	2001      	movs	r0, #1
  40fc7a:	2100      	movs	r1, #0
  40fc7c:	4b31      	ldr	r3, [pc, #196]	; (40fd44 <checkInputGpio+0x3c8>)
  40fc7e:	4798      	blx	r3
					debugPrintString("Reset switch pressed\r\n");
  40fc80:	4831      	ldr	r0, [pc, #196]	; (40fd48 <checkInputGpio+0x3cc>)
  40fc82:	4b2f      	ldr	r3, [pc, #188]	; (40fd40 <checkInputGpio+0x3c4>)
  40fc84:	4798      	blx	r3
				}
			}
			ResetButtonTimerFlag = 0;
  40fc86:	4b2a      	ldr	r3, [pc, #168]	; (40fd30 <checkInputGpio+0x3b4>)
  40fc88:	2200      	movs	r2, #0
  40fc8a:	701a      	strb	r2, [r3, #0]
			SystemResetTimerFlag = 0;
  40fc8c:	4b2f      	ldr	r3, [pc, #188]	; (40fd4c <checkInputGpio+0x3d0>)
  40fc8e:	2200      	movs	r2, #0
  40fc90:	701a      	strb	r2, [r3, #0]
		}
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC1) == 1)
  40fc92:	2003      	movs	r0, #3
  40fc94:	4b2e      	ldr	r3, [pc, #184]	; (40fd50 <checkInputGpio+0x3d4>)
  40fc96:	4798      	blx	r3
  40fc98:	4603      	mov	r3, r0
  40fc9a:	2b00      	cmp	r3, #0
  40fc9c:	d002      	beq.n	40fca4 <checkInputGpio+0x328>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_OVER_CURRENT,1);
		debugPrintString("Jack 1 Over current\r\n");
  40fc9e:	482d      	ldr	r0, [pc, #180]	; (40fd54 <checkInputGpio+0x3d8>)
  40fca0:	4b27      	ldr	r3, [pc, #156]	; (40fd40 <checkInputGpio+0x3c4>)
  40fca2:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC2) == 1)
  40fca4:	2004      	movs	r0, #4
  40fca6:	4b2a      	ldr	r3, [pc, #168]	; (40fd50 <checkInputGpio+0x3d4>)
  40fca8:	4798      	blx	r3
  40fcaa:	4603      	mov	r3, r0
  40fcac:	2b00      	cmp	r3, #0
  40fcae:	d002      	beq.n	40fcb6 <checkInputGpio+0x33a>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_OVER_CURRENT,2);
		debugPrintString("Jack 2 Over current\r\n");
  40fcb0:	4829      	ldr	r0, [pc, #164]	; (40fd58 <checkInputGpio+0x3dc>)
  40fcb2:	4b23      	ldr	r3, [pc, #140]	; (40fd40 <checkInputGpio+0x3c4>)
  40fcb4:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC1) == 1)
  40fcb6:	2005      	movs	r0, #5
  40fcb8:	4b25      	ldr	r3, [pc, #148]	; (40fd50 <checkInputGpio+0x3d4>)
  40fcba:	4798      	blx	r3
  40fcbc:	4603      	mov	r3, r0
  40fcbe:	2b00      	cmp	r3, #0
  40fcc0:	d002      	beq.n	40fcc8 <checkInputGpio+0x34c>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_JACK_DETECT,1);
		debugPrintString("Jack 1 removed\r\n");	//inserted or removed?
  40fcc2:	4826      	ldr	r0, [pc, #152]	; (40fd5c <checkInputGpio+0x3e0>)
  40fcc4:	4b1e      	ldr	r3, [pc, #120]	; (40fd40 <checkInputGpio+0x3c4>)
  40fcc6:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC2) == 1)
  40fcc8:	2006      	movs	r0, #6
  40fcca:	4b21      	ldr	r3, [pc, #132]	; (40fd50 <checkInputGpio+0x3d4>)
  40fccc:	4798      	blx	r3
  40fcce:	4603      	mov	r3, r0
  40fcd0:	2b00      	cmp	r3, #0
  40fcd2:	d002      	beq.n	40fcda <checkInputGpio+0x35e>
	{
		//task_stateMachine_EnqueueEvent(SYS_EVENT_JACK_DETECT,2);
		debugPrintString("Jack 2 removed\r\n");	//inserted or removed?
  40fcd4:	4822      	ldr	r0, [pc, #136]	; (40fd60 <checkInputGpio+0x3e4>)
  40fcd6:	4b1a      	ldr	r3, [pc, #104]	; (40fd40 <checkInputGpio+0x3c4>)
  40fcd8:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_LBO) == 1)
  40fcda:	200f      	movs	r0, #15
  40fcdc:	4b1c      	ldr	r3, [pc, #112]	; (40fd50 <checkInputGpio+0x3d4>)
  40fcde:	4798      	blx	r3
		debugPrintString("Battery Low\r\n");
		task_stateMachine_EnqueueEvent(SYS_EVENT_LOW_BATTERY,0);
		#endif
	}

	if (drv_gpio_check_Int(DRV_GPIO_PIN_SD_CD) == 1)
  40fce0:	2010      	movs	r0, #16
  40fce2:	4b1b      	ldr	r3, [pc, #108]	; (40fd50 <checkInputGpio+0x3d4>)
  40fce4:	4798      	blx	r3
  40fce6:	4603      	mov	r3, r0
  40fce8:	2b00      	cmp	r3, #0
  40fcea:	d01d      	beq.n	40fd28 <checkInputGpio+0x3ac>
	{
		drv_gpio_pin_state_t sdCdPinState;
		drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD, &sdCdPinState);
  40fcec:	1cfb      	adds	r3, r7, #3
  40fcee:	2010      	movs	r0, #16
  40fcf0:	4619      	mov	r1, r3
  40fcf2:	4b1c      	ldr	r3, [pc, #112]	; (40fd64 <checkInputGpio+0x3e8>)
  40fcf4:	4798      	blx	r3
		if (sdCdPinState == DRV_GPIO_PIN_STATE_LOW)
  40fcf6:	78fb      	ldrb	r3, [r7, #3]
  40fcf8:	2b00      	cmp	r3, #0
  40fcfa:	d10b      	bne.n	40fd14 <checkInputGpio+0x398>
		{
			debugPrintString("SD-card removed\r\n");
  40fcfc:	481a      	ldr	r0, [pc, #104]	; (40fd68 <checkInputGpio+0x3ec>)
  40fcfe:	4b10      	ldr	r3, [pc, #64]	; (40fd40 <checkInputGpio+0x3c4>)
  40fd00:	4798      	blx	r3
			//SD card not present, set the respective event
			task_stateMachine_EnqueueEvent(SYS_EVENT_SD_FILE_ERROR,0);
  40fd02:	2005      	movs	r0, #5
  40fd04:	2100      	movs	r1, #0
  40fd06:	4b0f      	ldr	r3, [pc, #60]	; (40fd44 <checkInputGpio+0x3c8>)
  40fd08:	4798      	blx	r3
			//reconfigure the SD-card interrupt to look for insertion of card
			drv_gpio_config_interrupt(DRV_GPIO_PIN_SD_CD, DRV_GPIO_INTERRUPT_HIGH_EDGE);
  40fd0a:	2010      	movs	r0, #16
  40fd0c:	2100      	movs	r1, #0
  40fd0e:	4b17      	ldr	r3, [pc, #92]	; (40fd6c <checkInputGpio+0x3f0>)
  40fd10:	4798      	blx	r3
  40fd12:	e009      	b.n	40fd28 <checkInputGpio+0x3ac>
		}
		else if (sdCdPinState == DRV_GPIO_PIN_STATE_HIGH)
  40fd14:	78fb      	ldrb	r3, [r7, #3]
  40fd16:	2b01      	cmp	r3, #1
  40fd18:	d106      	bne.n	40fd28 <checkInputGpio+0x3ac>
		{
			debugPrintString("SD-card inserted\r\n");
  40fd1a:	4815      	ldr	r0, [pc, #84]	; (40fd70 <checkInputGpio+0x3f4>)
  40fd1c:	4b08      	ldr	r3, [pc, #32]	; (40fd40 <checkInputGpio+0x3c4>)
  40fd1e:	4798      	blx	r3
			//SD card present or inserted, set the respective event
			//drv_gpio_config_interrupt(DRV_GPIO_PIN_SD_CD, DRV_GPIO_INTERRUPT_LOW_EDGE);	//set in reloadConfigSettings()
			task_stateMachine_EnqueueEvent(SYS_EVENT_SD_CARD_DETECT,0);
  40fd20:	2004      	movs	r0, #4
  40fd22:	2100      	movs	r1, #0
  40fd24:	4b07      	ldr	r3, [pc, #28]	; (40fd44 <checkInputGpio+0x3c8>)
  40fd26:	4798      	blx	r3
		}
	}
}
  40fd28:	372c      	adds	r7, #44	; 0x2c
  40fd2a:	46bd      	mov	sp, r7
  40fd2c:	bd90      	pop	{r4, r7, pc}
  40fd2e:	bf00      	nop
  40fd30:	200038fb 	.word	0x200038fb
  40fd34:	20003814 	.word	0x20003814
  40fd38:	0040aa11 	.word	0x0040aa11
  40fd3c:	0041d920 	.word	0x0041d920
  40fd40:	004016d5 	.word	0x004016d5
  40fd44:	00402581 	.word	0x00402581
  40fd48:	0041d93c 	.word	0x0041d93c
  40fd4c:	200038fa 	.word	0x200038fa
  40fd50:	0040d9c5 	.word	0x0040d9c5
  40fd54:	0041d954 	.word	0x0041d954
  40fd58:	0041d96c 	.word	0x0041d96c
  40fd5c:	0041d984 	.word	0x0041d984
  40fd60:	0041d998 	.word	0x0041d998
  40fd64:	0040d8a9 	.word	0x0040d8a9
  40fd68:	0041d9ac 	.word	0x0041d9ac
  40fd6c:	0040d929 	.word	0x0040d929
  40fd70:	0041d9c0 	.word	0x0041d9c0

0040fd74 <checkRtosStack>:
 * @brief Check for Stack overflow for all Tasks on kernel
 * @param void
 * @return void
 ***********************************************************************************************/
static void checkRtosStack(int loopCount)
{
  40fd74:	b580      	push	{r7, lr}
  40fd76:	b084      	sub	sp, #16
  40fd78:	af00      	add	r7, sp, #0
  40fd7a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE vHighWaterMark;
 	switch (loopCount)
  40fd7c:	687b      	ldr	r3, [r7, #4]
  40fd7e:	2b07      	cmp	r3, #7
  40fd80:	f200 80c5 	bhi.w	40ff0e <checkRtosStack+0x19a>
  40fd84:	a201      	add	r2, pc, #4	; (adr r2, 40fd8c <checkRtosStack+0x18>)
  40fd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40fd8a:	bf00      	nop
  40fd8c:	0040fdad 	.word	0x0040fdad
  40fd90:	0040fdd9 	.word	0x0040fdd9
  40fd94:	0040fe05 	.word	0x0040fe05
  40fd98:	0040fe33 	.word	0x0040fe33
  40fd9c:	0040fe5f 	.word	0x0040fe5f
  40fda0:	0040fe8b 	.word	0x0040fe8b
  40fda4:	0040feb7 	.word	0x0040feb7
  40fda8:	0040fee3 	.word	0x0040fee3
 	{
	 	case 0:
	 		vHighWaterMark = uxTaskGetStackHighWaterMark(quinticConfig[0].taskHandle);
  40fdac:	4b5a      	ldr	r3, [pc, #360]	; (40ff18 <checkRtosStack+0x1a4>)
  40fdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40fdb0:	4618      	mov	r0, r3
  40fdb2:	4b5a      	ldr	r3, [pc, #360]	; (40ff1c <checkRtosStack+0x1a8>)
  40fdb4:	4798      	blx	r3
  40fdb6:	60f8      	str	r0, [r7, #12]
	 		//if (vHighWaterMark < 100)
	 		//{
				 if (vHighWaterMark < vTaskStackSize[0])
  40fdb8:	4b59      	ldr	r3, [pc, #356]	; (40ff20 <checkRtosStack+0x1ac>)
  40fdba:	681b      	ldr	r3, [r3, #0]
  40fdbc:	461a      	mov	r2, r3
  40fdbe:	68fb      	ldr	r3, [r7, #12]
  40fdc0:	429a      	cmp	r2, r3
  40fdc2:	d908      	bls.n	40fdd6 <checkRtosStack+0x62>
				 {
					 debugPrintStringInt("Quintic task Q0 stack new high water mark\r\n", vHighWaterMark);
  40fdc4:	68fb      	ldr	r3, [r7, #12]
  40fdc6:	4857      	ldr	r0, [pc, #348]	; (40ff24 <checkRtosStack+0x1b0>)
  40fdc8:	4619      	mov	r1, r3
  40fdca:	4b57      	ldr	r3, [pc, #348]	; (40ff28 <checkRtosStack+0x1b4>)
  40fdcc:	4798      	blx	r3
					 vTaskStackSize[0] = vHighWaterMark;
  40fdce:	68fa      	ldr	r2, [r7, #12]
  40fdd0:	4b53      	ldr	r3, [pc, #332]	; (40ff20 <checkRtosStack+0x1ac>)
  40fdd2:	601a      	str	r2, [r3, #0]
				 }
	 		//}
	 	break;
  40fdd4:	e09c      	b.n	40ff10 <checkRtosStack+0x19c>
  40fdd6:	e09b      	b.n	40ff10 <checkRtosStack+0x19c>
	 	case 1:
		 #ifdef USE_ALL_QUINTICS
		 	vHighWaterMark = uxTaskGetStackHighWaterMark(quinticConfig[1].taskHandle);
  40fdd8:	4b4f      	ldr	r3, [pc, #316]	; (40ff18 <checkRtosStack+0x1a4>)
  40fdda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40fddc:	4618      	mov	r0, r3
  40fdde:	4b4f      	ldr	r3, [pc, #316]	; (40ff1c <checkRtosStack+0x1a8>)
  40fde0:	4798      	blx	r3
  40fde2:	60f8      	str	r0, [r7, #12]
		 	//if (vHighWaterMark < 100)
		 	//{
			 	 if (vHighWaterMark < vTaskStackSize[1])
  40fde4:	4b4e      	ldr	r3, [pc, #312]	; (40ff20 <checkRtosStack+0x1ac>)
  40fde6:	685b      	ldr	r3, [r3, #4]
  40fde8:	461a      	mov	r2, r3
  40fdea:	68fb      	ldr	r3, [r7, #12]
  40fdec:	429a      	cmp	r2, r3
  40fdee:	d908      	bls.n	40fe02 <checkRtosStack+0x8e>
			 	 {
				 	 debugPrintStringInt("Quintic task Q1 stack new high water mark\r\n", vHighWaterMark);
  40fdf0:	68fb      	ldr	r3, [r7, #12]
  40fdf2:	484e      	ldr	r0, [pc, #312]	; (40ff2c <checkRtosStack+0x1b8>)
  40fdf4:	4619      	mov	r1, r3
  40fdf6:	4b4c      	ldr	r3, [pc, #304]	; (40ff28 <checkRtosStack+0x1b4>)
  40fdf8:	4798      	blx	r3
				 	 vTaskStackSize[1] = vHighWaterMark;
  40fdfa:	68fa      	ldr	r2, [r7, #12]
  40fdfc:	4b48      	ldr	r3, [pc, #288]	; (40ff20 <checkRtosStack+0x1ac>)
  40fdfe:	605a      	str	r2, [r3, #4]
			 	 }
		 	//}
		#endif
	 	break;
  40fe00:	e086      	b.n	40ff10 <checkRtosStack+0x19c>
  40fe02:	e085      	b.n	40ff10 <checkRtosStack+0x19c>
		case 2:
			vHighWaterMark = uxTaskGetStackHighWaterMark(quinticConfig[2].taskHandle);
  40fe04:	4b44      	ldr	r3, [pc, #272]	; (40ff18 <checkRtosStack+0x1a4>)
  40fe06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  40fe0a:	4618      	mov	r0, r3
  40fe0c:	4b43      	ldr	r3, [pc, #268]	; (40ff1c <checkRtosStack+0x1a8>)
  40fe0e:	4798      	blx	r3
  40fe10:	60f8      	str	r0, [r7, #12]
			//if (vHighWaterMark < 100)
			//{
				if (vHighWaterMark < vTaskStackSize[2])
  40fe12:	4b43      	ldr	r3, [pc, #268]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe14:	689b      	ldr	r3, [r3, #8]
  40fe16:	461a      	mov	r2, r3
  40fe18:	68fb      	ldr	r3, [r7, #12]
  40fe1a:	429a      	cmp	r2, r3
  40fe1c:	d908      	bls.n	40fe30 <checkRtosStack+0xbc>
				{
					debugPrintStringInt("Quintic task Q2 stack new high water mark\r\n", vHighWaterMark);
  40fe1e:	68fb      	ldr	r3, [r7, #12]
  40fe20:	4843      	ldr	r0, [pc, #268]	; (40ff30 <checkRtosStack+0x1bc>)
  40fe22:	4619      	mov	r1, r3
  40fe24:	4b40      	ldr	r3, [pc, #256]	; (40ff28 <checkRtosStack+0x1b4>)
  40fe26:	4798      	blx	r3
					vTaskStackSize[2] = vHighWaterMark;
  40fe28:	68fa      	ldr	r2, [r7, #12]
  40fe2a:	4b3d      	ldr	r3, [pc, #244]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe2c:	609a      	str	r2, [r3, #8]
				}
			//}
		break;
  40fe2e:	e06f      	b.n	40ff10 <checkRtosStack+0x19c>
  40fe30:	e06e      	b.n	40ff10 <checkRtosStack+0x19c>
		case 3:
		 	vHighWaterMark = uxTaskGetStackHighWaterMark(fabSenseTaskHandle);
  40fe32:	4b40      	ldr	r3, [pc, #256]	; (40ff34 <checkRtosStack+0x1c0>)
  40fe34:	681b      	ldr	r3, [r3, #0]
  40fe36:	4618      	mov	r0, r3
  40fe38:	4b38      	ldr	r3, [pc, #224]	; (40ff1c <checkRtosStack+0x1a8>)
  40fe3a:	4798      	blx	r3
  40fe3c:	60f8      	str	r0, [r7, #12]
		 	//if (vHighWaterMark < 100)
		 	//{
				if (vHighWaterMark < vTaskStackSize[3])
  40fe3e:	4b38      	ldr	r3, [pc, #224]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe40:	68db      	ldr	r3, [r3, #12]
  40fe42:	461a      	mov	r2, r3
  40fe44:	68fb      	ldr	r3, [r7, #12]
  40fe46:	429a      	cmp	r2, r3
  40fe48:	d908      	bls.n	40fe5c <checkRtosStack+0xe8>
				{
			 		debugPrintStringInt("Fabric Sense task stack new high water mark\r\n", vHighWaterMark);
  40fe4a:	68fb      	ldr	r3, [r7, #12]
  40fe4c:	483a      	ldr	r0, [pc, #232]	; (40ff38 <checkRtosStack+0x1c4>)
  40fe4e:	4619      	mov	r1, r3
  40fe50:	4b35      	ldr	r3, [pc, #212]	; (40ff28 <checkRtosStack+0x1b4>)
  40fe52:	4798      	blx	r3
					vTaskStackSize[3] = vHighWaterMark;
  40fe54:	68fa      	ldr	r2, [r7, #12]
  40fe56:	4b32      	ldr	r3, [pc, #200]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe58:	60da      	str	r2, [r3, #12]
				}
		 	//}
	 	break;
  40fe5a:	e059      	b.n	40ff10 <checkRtosStack+0x19c>
  40fe5c:	e058      	b.n	40ff10 <checkRtosStack+0x19c>
		case 4:
			vHighWaterMark = uxTaskGetStackHighWaterMark(cmdHandlerTaskHandle);
  40fe5e:	4b37      	ldr	r3, [pc, #220]	; (40ff3c <checkRtosStack+0x1c8>)
  40fe60:	681b      	ldr	r3, [r3, #0]
  40fe62:	4618      	mov	r0, r3
  40fe64:	4b2d      	ldr	r3, [pc, #180]	; (40ff1c <checkRtosStack+0x1a8>)
  40fe66:	4798      	blx	r3
  40fe68:	60f8      	str	r0, [r7, #12]
			//if (vHighWaterMark < 100)
			//{
				if (vHighWaterMark < vTaskStackSize[4])
  40fe6a:	4b2d      	ldr	r3, [pc, #180]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe6c:	691b      	ldr	r3, [r3, #16]
  40fe6e:	461a      	mov	r2, r3
  40fe70:	68fb      	ldr	r3, [r7, #12]
  40fe72:	429a      	cmp	r2, r3
  40fe74:	d908      	bls.n	40fe88 <checkRtosStack+0x114>
				{
					debugPrintStringInt("Command-Handler task stack new high water mark\r\n", vHighWaterMark);
  40fe76:	68fb      	ldr	r3, [r7, #12]
  40fe78:	4831      	ldr	r0, [pc, #196]	; (40ff40 <checkRtosStack+0x1cc>)
  40fe7a:	4619      	mov	r1, r3
  40fe7c:	4b2a      	ldr	r3, [pc, #168]	; (40ff28 <checkRtosStack+0x1b4>)
  40fe7e:	4798      	blx	r3
					vTaskStackSize[4] = vHighWaterMark;
  40fe80:	68fa      	ldr	r2, [r7, #12]
  40fe82:	4b27      	ldr	r3, [pc, #156]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe84:	611a      	str	r2, [r3, #16]
				}
			//}
		break;
  40fe86:	e043      	b.n	40ff10 <checkRtosStack+0x19c>
  40fe88:	e042      	b.n	40ff10 <checkRtosStack+0x19c>
		case 5:
			vHighWaterMark = uxTaskGetStackHighWaterMark(dataHandlerTaskHandle);
  40fe8a:	4b2e      	ldr	r3, [pc, #184]	; (40ff44 <checkRtosStack+0x1d0>)
  40fe8c:	681b      	ldr	r3, [r3, #0]
  40fe8e:	4618      	mov	r0, r3
  40fe90:	4b22      	ldr	r3, [pc, #136]	; (40ff1c <checkRtosStack+0x1a8>)
  40fe92:	4798      	blx	r3
  40fe94:	60f8      	str	r0, [r7, #12]
			//if (vHighWaterMark < 100)
			//{
				if (vHighWaterMark < vTaskStackSize[5])
  40fe96:	4b22      	ldr	r3, [pc, #136]	; (40ff20 <checkRtosStack+0x1ac>)
  40fe98:	695b      	ldr	r3, [r3, #20]
  40fe9a:	461a      	mov	r2, r3
  40fe9c:	68fb      	ldr	r3, [r7, #12]
  40fe9e:	429a      	cmp	r2, r3
  40fea0:	d908      	bls.n	40feb4 <checkRtosStack+0x140>
				{
					debugPrintStringInt("Data-Handler task stack new high water mark\r\n", vHighWaterMark);
  40fea2:	68fb      	ldr	r3, [r7, #12]
  40fea4:	4828      	ldr	r0, [pc, #160]	; (40ff48 <checkRtosStack+0x1d4>)
  40fea6:	4619      	mov	r1, r3
  40fea8:	4b1f      	ldr	r3, [pc, #124]	; (40ff28 <checkRtosStack+0x1b4>)
  40feaa:	4798      	blx	r3
					vTaskStackSize[5] = vHighWaterMark;
  40feac:	68fa      	ldr	r2, [r7, #12]
  40feae:	4b1c      	ldr	r3, [pc, #112]	; (40ff20 <checkRtosStack+0x1ac>)
  40feb0:	615a      	str	r2, [r3, #20]
				}
			//}
		break;
  40feb2:	e02d      	b.n	40ff10 <checkRtosStack+0x19c>
  40feb4:	e02c      	b.n	40ff10 <checkRtosStack+0x19c>
		case 6:
			vHighWaterMark = uxTaskGetStackHighWaterMark(sdCardTaskHandle);
  40feb6:	4b25      	ldr	r3, [pc, #148]	; (40ff4c <checkRtosStack+0x1d8>)
  40feb8:	681b      	ldr	r3, [r3, #0]
  40feba:	4618      	mov	r0, r3
  40febc:	4b17      	ldr	r3, [pc, #92]	; (40ff1c <checkRtosStack+0x1a8>)
  40febe:	4798      	blx	r3
  40fec0:	60f8      	str	r0, [r7, #12]
			//if (vHighWaterMark < 100)
			//{
				if (vHighWaterMark < vTaskStackSize[6])
  40fec2:	4b17      	ldr	r3, [pc, #92]	; (40ff20 <checkRtosStack+0x1ac>)
  40fec4:	699b      	ldr	r3, [r3, #24]
  40fec6:	461a      	mov	r2, r3
  40fec8:	68fb      	ldr	r3, [r7, #12]
  40feca:	429a      	cmp	r2, r3
  40fecc:	d908      	bls.n	40fee0 <checkRtosStack+0x16c>
				{
					debugPrintStringInt("SD-card task stack new high water mark\r\n", vHighWaterMark);
  40fece:	68fb      	ldr	r3, [r7, #12]
  40fed0:	481f      	ldr	r0, [pc, #124]	; (40ff50 <checkRtosStack+0x1dc>)
  40fed2:	4619      	mov	r1, r3
  40fed4:	4b14      	ldr	r3, [pc, #80]	; (40ff28 <checkRtosStack+0x1b4>)
  40fed6:	4798      	blx	r3
					vTaskStackSize[6] = vHighWaterMark;
  40fed8:	68fa      	ldr	r2, [r7, #12]
  40feda:	4b11      	ldr	r3, [pc, #68]	; (40ff20 <checkRtosStack+0x1ac>)
  40fedc:	619a      	str	r2, [r3, #24]
				}
			//}
		break;
  40fede:	e017      	b.n	40ff10 <checkRtosStack+0x19c>
  40fee0:	e016      	b.n	40ff10 <checkRtosStack+0x19c>
		case 7:
			vHighWaterMark = uxTaskGetStackHighWaterMark(stateMachineTaskHandle);
  40fee2:	4b1c      	ldr	r3, [pc, #112]	; (40ff54 <checkRtosStack+0x1e0>)
  40fee4:	681b      	ldr	r3, [r3, #0]
  40fee6:	4618      	mov	r0, r3
  40fee8:	4b0c      	ldr	r3, [pc, #48]	; (40ff1c <checkRtosStack+0x1a8>)
  40feea:	4798      	blx	r3
  40feec:	60f8      	str	r0, [r7, #12]
			//if (vHighWaterMark < 100)
			//{
				if (vHighWaterMark < vTaskStackSize[7])
  40feee:	4b0c      	ldr	r3, [pc, #48]	; (40ff20 <checkRtosStack+0x1ac>)
  40fef0:	69db      	ldr	r3, [r3, #28]
  40fef2:	461a      	mov	r2, r3
  40fef4:	68fb      	ldr	r3, [r7, #12]
  40fef6:	429a      	cmp	r2, r3
  40fef8:	d908      	bls.n	40ff0c <checkRtosStack+0x198>
				{
					debugPrintStringInt("State-Machine task stack new high water mark\r\n", vHighWaterMark);
  40fefa:	68fb      	ldr	r3, [r7, #12]
  40fefc:	4816      	ldr	r0, [pc, #88]	; (40ff58 <checkRtosStack+0x1e4>)
  40fefe:	4619      	mov	r1, r3
  40ff00:	4b09      	ldr	r3, [pc, #36]	; (40ff28 <checkRtosStack+0x1b4>)
  40ff02:	4798      	blx	r3
					vTaskStackSize[7] = vHighWaterMark;
  40ff04:	68fa      	ldr	r2, [r7, #12]
  40ff06:	4b06      	ldr	r3, [pc, #24]	; (40ff20 <checkRtosStack+0x1ac>)
  40ff08:	61da      	str	r2, [r3, #28]
				}
			//}
		break;
  40ff0a:	e001      	b.n	40ff10 <checkRtosStack+0x19c>
  40ff0c:	e000      	b.n	40ff10 <checkRtosStack+0x19c>
		default:
		break;
  40ff0e:	bf00      	nop
 	}
}
  40ff10:	3710      	adds	r7, #16
  40ff12:	46bd      	mov	sp, r7
  40ff14:	bd80      	pop	{r7, pc}
  40ff16:	bf00      	nop
  40ff18:	20000508 	.word	0x20000508
  40ff1c:	0040bd7d 	.word	0x0040bd7d
  40ff20:	20000760 	.word	0x20000760
  40ff24:	0041d9d4 	.word	0x0041d9d4
  40ff28:	004015c1 	.word	0x004015c1
  40ff2c:	0041da00 	.word	0x0041da00
  40ff30:	0041da2c 	.word	0x0041da2c
  40ff34:	200038fc 	.word	0x200038fc
  40ff38:	0041da58 	.word	0x0041da58
  40ff3c:	20003900 	.word	0x20003900
  40ff40:	0041da88 	.word	0x0041da88
  40ff44:	20003904 	.word	0x20003904
  40ff48:	0041dabc 	.word	0x0041dabc
  40ff4c:	20003908 	.word	0x20003908
  40ff50:	0041daec 	.word	0x0041daec
  40ff54:	2000390c 	.word	0x2000390c
  40ff58:	0041db18 	.word	0x0041db18

0040ff5c <checkJackDetects>:
 * @brief Checks for Jack Detects by pulling up the Jack enables
 * @param void
 * @return void
 ***********************************************************************************************/
static void checkJackDetects(void)
{
  40ff5c:	b580      	push	{r7, lr}
  40ff5e:	b082      	sub	sp, #8
  40ff60:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t jcDc1 = DRV_GPIO_PIN_STATE_LOW, jcDc2 = DRV_GPIO_PIN_STATE_LOW;
  40ff62:	2300      	movs	r3, #0
  40ff64:	71fb      	strb	r3, [r7, #7]
  40ff66:	2300      	movs	r3, #0
  40ff68:	71bb      	strb	r3, [r7, #6]
	//Check for Jack Detects
	drv_gpio_getPinState(DRV_GPIO_PIN_JC_DC1, &jcDc1);
  40ff6a:	1dfb      	adds	r3, r7, #7
  40ff6c:	2005      	movs	r0, #5
  40ff6e:	4619      	mov	r1, r3
  40ff70:	4b20      	ldr	r3, [pc, #128]	; (40fff4 <checkJackDetects+0x98>)
  40ff72:	4798      	blx	r3
	drv_gpio_getPinState(DRV_GPIO_PIN_JC_DC2, &jcDc2);
  40ff74:	1dbb      	adds	r3, r7, #6
  40ff76:	2006      	movs	r0, #6
  40ff78:	4619      	mov	r1, r3
  40ff7a:	4b1e      	ldr	r3, [pc, #120]	; (40fff4 <checkJackDetects+0x98>)
  40ff7c:	4798      	blx	r3
	//if there are no jacks in the socket move back to cycling state
	if (jcDc2 == DRV_GPIO_PIN_STATE_LOW && jcDc1 == DRV_GPIO_PIN_STATE_LOW)
  40ff7e:	79bb      	ldrb	r3, [r7, #6]
  40ff80:	2b00      	cmp	r3, #0
  40ff82:	d106      	bne.n	40ff92 <checkJackDetects+0x36>
  40ff84:	79fb      	ldrb	r3, [r7, #7]
  40ff86:	2b00      	cmp	r3, #0
  40ff88:	d103      	bne.n	40ff92 <checkJackDetects+0x36>
	{
		//either one of the jacks is not present.
		cycleJcEn = TRUE;
  40ff8a:	4b1b      	ldr	r3, [pc, #108]	; (40fff8 <checkJackDetects+0x9c>)
  40ff8c:	2201      	movs	r2, #1
  40ff8e:	701a      	strb	r2, [r3, #0]
  40ff90:	e002      	b.n	40ff98 <checkJackDetects+0x3c>
		drv_led_set(DRV_LED_TURQUOISE, DRV_LED_FLASH);
		#endif
	} 
	else
	{
		cycleJcEn = FALSE;
  40ff92:	4b19      	ldr	r3, [pc, #100]	; (40fff8 <checkJackDetects+0x9c>)
  40ff94:	2200      	movs	r2, #0
  40ff96:	701a      	strb	r2, [r3, #0]
	}
	
	if (cycleJcEn == TRUE)
  40ff98:	4b17      	ldr	r3, [pc, #92]	; (40fff8 <checkJackDetects+0x9c>)
  40ff9a:	781b      	ldrb	r3, [r3, #0]
  40ff9c:	2b00      	cmp	r3, #0
  40ff9e:	d026      	beq.n	40ffee <checkJackDetects+0x92>
	{
		//Drive the Jack enables low as they are active low.
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  40ffa0:	2007      	movs	r0, #7
  40ffa2:	2100      	movs	r1, #0
  40ffa4:	4b15      	ldr	r3, [pc, #84]	; (40fffc <checkJackDetects+0xa0>)
  40ffa6:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  40ffa8:	2008      	movs	r0, #8
  40ffaa:	2100      	movs	r1, #0
  40ffac:	4b13      	ldr	r3, [pc, #76]	; (40fffc <checkJackDetects+0xa0>)
  40ffae:	4798      	blx	r3
		vTaskDelay(10);
  40ffb0:	200a      	movs	r0, #10
  40ffb2:	4b13      	ldr	r3, [pc, #76]	; (410000 <checkJackDetects+0xa4>)
  40ffb4:	4798      	blx	r3
	
		//Check for Jack Detects
		drv_gpio_getPinState(DRV_GPIO_PIN_JC_DC1, &jcDc1);
  40ffb6:	1dfb      	adds	r3, r7, #7
  40ffb8:	2005      	movs	r0, #5
  40ffba:	4619      	mov	r1, r3
  40ffbc:	4b0d      	ldr	r3, [pc, #52]	; (40fff4 <checkJackDetects+0x98>)
  40ffbe:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_JC_DC2, &jcDc2);
  40ffc0:	1dbb      	adds	r3, r7, #6
  40ffc2:	2006      	movs	r0, #6
  40ffc4:	4619      	mov	r1, r3
  40ffc6:	4b0b      	ldr	r3, [pc, #44]	; (40fff4 <checkJackDetects+0x98>)
  40ffc8:	4798      	blx	r3
	
		if (jcDc2 == DRV_GPIO_PIN_STATE_HIGH || jcDc1 == DRV_GPIO_PIN_STATE_HIGH)
  40ffca:	79bb      	ldrb	r3, [r7, #6]
  40ffcc:	2b01      	cmp	r3, #1
  40ffce:	d002      	beq.n	40ffd6 <checkJackDetects+0x7a>
  40ffd0:	79fb      	ldrb	r3, [r7, #7]
  40ffd2:	2b01      	cmp	r3, #1
  40ffd4:	d103      	bne.n	40ffde <checkJackDetects+0x82>
		{
			//either one of the jacks detected, stop cycling of jack enables
			cycleJcEn = FALSE;
  40ffd6:	4b08      	ldr	r3, [pc, #32]	; (40fff8 <checkJackDetects+0x9c>)
  40ffd8:	2200      	movs	r2, #0
  40ffda:	701a      	strb	r2, [r3, #0]
  40ffdc:	e007      	b.n	40ffee <checkJackDetects+0x92>
			#endif
		}
	
		else
		{
			drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  40ffde:	2007      	movs	r0, #7
  40ffe0:	2101      	movs	r1, #1
  40ffe2:	4b06      	ldr	r3, [pc, #24]	; (40fffc <checkJackDetects+0xa0>)
  40ffe4:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  40ffe6:	2008      	movs	r0, #8
  40ffe8:	2101      	movs	r1, #1
  40ffea:	4b04      	ldr	r3, [pc, #16]	; (40fffc <checkJackDetects+0xa0>)
  40ffec:	4798      	blx	r3
		}
	}
}
  40ffee:	3708      	adds	r7, #8
  40fff0:	46bd      	mov	sp, r7
  40fff2:	bd80      	pop	{r7, pc}
  40fff4:	0040d8a9 	.word	0x0040d8a9
  40fff8:	2000075c 	.word	0x2000075c
  40fffc:	0040d7b5 	.word	0x0040d7b5
  410000:	0040b24d 	.word	0x0040b24d

00410004 <toggleJackEnables>:
 * @brief Toggles the Jack enables to High or Low
 * @param drv_gpio_pin_state_t pinState
 * @return void
 ***********************************************************************************************/
void toggleJackEnables(drv_gpio_pin_state_t pinState)
{
  410004:	b580      	push	{r7, lr}
  410006:	b082      	sub	sp, #8
  410008:	af00      	add	r7, sp, #0
  41000a:	4603      	mov	r3, r0
  41000c:	71fb      	strb	r3, [r7, #7]
	if (pinState == DRV_GPIO_PIN_STATE_HIGH)
  41000e:	79fb      	ldrb	r3, [r7, #7]
  410010:	2b01      	cmp	r3, #1
  410012:	d10b      	bne.n	41002c <toggleJackEnables+0x28>
	{
		//Disable the jack enables and stop cycling them.
		cycleJcEn = FALSE;
  410014:	4b0a      	ldr	r3, [pc, #40]	; (410040 <toggleJackEnables+0x3c>)
  410016:	2200      	movs	r2, #0
  410018:	701a      	strb	r2, [r3, #0]
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  41001a:	2007      	movs	r0, #7
  41001c:	2101      	movs	r1, #1
  41001e:	4b09      	ldr	r3, [pc, #36]	; (410044 <toggleJackEnables+0x40>)
  410020:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  410022:	2008      	movs	r0, #8
  410024:	2101      	movs	r1, #1
  410026:	4b07      	ldr	r3, [pc, #28]	; (410044 <toggleJackEnables+0x40>)
  410028:	4798      	blx	r3
  41002a:	e005      	b.n	410038 <toggleJackEnables+0x34>
		#ifdef TEST_JACK_DETECTS
		drv_led_set(DRV_LED_OFF, DRV_LED_SOLID);
		#endif
	}
	else if (pinState == DRV_GPIO_PIN_STATE_LOW)
  41002c:	79fb      	ldrb	r3, [r7, #7]
  41002e:	2b00      	cmp	r3, #0
  410030:	d102      	bne.n	410038 <toggleJackEnables+0x34>
	{
		//start polling the jack detects by cycling jack enables
		cycleJcEn = TRUE;
  410032:	4b03      	ldr	r3, [pc, #12]	; (410040 <toggleJackEnables+0x3c>)
  410034:	2201      	movs	r2, #1
  410036:	701a      	strb	r2, [r3, #0]
		#ifdef TEST_JACK_DETECTS 
		drv_led_set(DRV_LED_TURQUOISE, DRV_LED_FLASH);
		#endif
 	}
}
  410038:	3708      	adds	r7, #8
  41003a:	46bd      	mov	sp, r7
  41003c:	bd80      	pop	{r7, pc}
  41003e:	bf00      	nop
  410040:	2000075c 	.word	0x2000075c
  410044:	0040d7b5 	.word	0x0040d7b5

00410048 <task_quinticHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing quintic and imu configuration. 
 * @return void
 ***********************************************************************************************/
void task_quinticHandler(void *pvParameters)
{
  410048:	b590      	push	{r4, r7, lr}
  41004a:	b0e1      	sub	sp, #388	; 0x184
  41004c:	af00      	add	r7, sp, #0
  41004e:	1d3b      	adds	r3, r7, #4
  410050:	6018      	str	r0, [r3, #0]
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
  410052:	1d3b      	adds	r3, r7, #4
  410054:	681b      	ldr	r3, [r3, #0]
  410056:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	//initialize all structures ,check everything is alright
	int i = 0;
  41005a:	2300      	movs	r3, #0
  41005c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  410060:	2300      	movs	r3, #0
  410062:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  410066:	e02d      	b.n	4100c4 <task_quinticHandler+0x7c>
	{
		//qConfig->imuArray[i]->bufferEnd = 0;
		//qConfig->imuArray[i]->bufferHead = 0;
		//memset(qConfig->imuArray[i]->packetBuffer, 0 , IMU_BUFFER_SIZE*IMU_PACKET_LENGTH); 	
		qConfig->imuArray[i]->stats.avgPacketTime = 0;
  410068:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41006c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
  410070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410074:	2200      	movs	r2, #0
  410076:	635a      	str	r2, [r3, #52]	; 0x34
		qConfig->imuArray[i]->stats.droppedPackets = 0;
  410078:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41007c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
  410080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410084:	2200      	movs	r2, #0
  410086:	629a      	str	r2, [r3, #40]	; 0x28
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
  410088:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41008c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
  410090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410094:	4a8e      	ldr	r2, [pc, #568]	; (4102d0 <task_quinticHandler+0x288>)
  410096:	6812      	ldr	r2, [r2, #0]
  410098:	62da      	str	r2, [r3, #44]	; 0x2c
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
  41009a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41009e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
  4100a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4100a6:	2200      	movs	r2, #0
  4100a8:	631a      	str	r2, [r3, #48]	; 0x30
		qConfig->imuArray[i]->stats.packetCnt = 0;
  4100aa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4100ae:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
  4100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4100b6:	2200      	movs	r2, #0
  4100b8:	625a      	str	r2, [r3, #36]	; 0x24
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
	//initialize all structures ,check everything is alright
	int i = 0;
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  4100ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
  4100be:	3301      	adds	r3, #1
  4100c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  4100c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
  4100c8:	2b04      	cmp	r3, #4
  4100ca:	ddcd      	ble.n	410068 <task_quinticHandler+0x20>
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
		qConfig->imuArray[i]->stats.packetCnt = 0;
	}
	
	if(drv_uart_isInit(qConfig->uartDevice) != STATUS_PASS)
  4100cc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4100d0:	695b      	ldr	r3, [r3, #20]
  4100d2:	4618      	mov	r0, r3
  4100d4:	4b7f      	ldr	r3, [pc, #508]	; (4102d4 <task_quinticHandler+0x28c>)
  4100d6:	4798      	blx	r3
  4100d8:	4603      	mov	r3, r0
  4100da:	2b00      	cmp	r3, #0
  4100dc:	d000      	beq.n	4100e0 <task_quinticHandler+0x98>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		return; 
  4100de:	e19e      	b.n	41041e <task_quinticHandler+0x3d6>
	#ifdef DEBUG_DUMMY_DATA

	#else
	#endif 
	dataPacket_t packet; 
	packet.type = DATA_PACKET_TYPE_IMU; 
  4100e0:	2300      	movs	r3, #0
  4100e2:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
	//main loop of task, this is where we request information and store it. 
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; 
  4100e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4100ea:	461a      	mov	r2, r3
  4100ec:	23ff      	movs	r3, #255	; 0xff
  4100ee:	4610      	mov	r0, r2
  4100f0:	2100      	movs	r1, #0
  4100f2:	461a      	mov	r2, r3
  4100f4:	4b78      	ldr	r3, [pc, #480]	; (4102d8 <task_quinticHandler+0x290>)
  4100f6:	4798      	blx	r3
	int packetNumber = 0;
  4100f8:	2300      	movs	r3, #0
  4100fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	uint32_t timeNow = 0;
  4100fe:	2300      	movs	r3, #0
  410100:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	int index = -1; 
  410104:	f04f 33ff 	mov.w	r3, #4294967295
  410108:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	qConfig->isinit = true;
  41010c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410110:	2201      	movs	r2, #1
  410112:	625a      	str	r2, [r3, #36]	; 0x24
	char debugString[50]; 
	while(1)
	{
		#ifndef DEBUG_DUMMY_DATA
		if(getCurrentState() != SYS_STATE_RESET)
  410114:	4b71      	ldr	r3, [pc, #452]	; (4102dc <task_quinticHandler+0x294>)
  410116:	4798      	blx	r3
  410118:	4603      	mov	r3, r0
  41011a:	2b02      	cmp	r3, #2
  41011c:	f000 817b 	beq.w	410416 <task_quinticHandler+0x3ce>
		{		
			if(drv_uart_getlineTimed(qConfig->uartDevice, buf, CMD_RESPONSE_BUF_SIZE, 400) == STATUS_PASS)
  410120:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410124:	695a      	ldr	r2, [r3, #20]
  410126:	f107 0340 	add.w	r3, r7, #64	; 0x40
  41012a:	4610      	mov	r0, r2
  41012c:	4619      	mov	r1, r3
  41012e:	22ff      	movs	r2, #255	; 0xff
  410130:	f44f 73c8 	mov.w	r3, #400	; 0x190
  410134:	4c6a      	ldr	r4, [pc, #424]	; (4102e0 <task_quinticHandler+0x298>)
  410136:	47a0      	blx	r4
  410138:	4603      	mov	r3, r0
  41013a:	2b00      	cmp	r3, #0
  41013c:	f040 816b 	bne.w	410416 <task_quinticHandler+0x3ce>
			{
				index = -1; 
  410140:	f04f 33ff 	mov.w	r3, #4294967295
  410144:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
				if(buf[0] == '&') //euler data
  410148:	f107 0340 	add.w	r3, r7, #64	; 0x40
  41014c:	781b      	ldrb	r3, [r3, #0]
  41014e:	2b26      	cmp	r3, #38	; 0x26
  410150:	d10b      	bne.n	41016a <task_quinticHandler+0x122>
				{
					index = getIndex(buf[1]); 
  410152:	f107 0340 	add.w	r3, r7, #64	; 0x40
  410156:	785b      	ldrb	r3, [r3, #1]
  410158:	4618      	mov	r0, r3
  41015a:	4b62      	ldr	r3, [pc, #392]	; (4102e4 <task_quinticHandler+0x29c>)
  41015c:	4798      	blx	r3
  41015e:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
					packet.type = DATA_PACKET_TYPE_IMU; 
  410162:	2300      	movs	r3, #0
  410164:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
  410168:	e0db      	b.n	410322 <task_quinticHandler+0x2da>
				}
				else if(buf[0] == '@') //acceleration data
  41016a:	f107 0340 	add.w	r3, r7, #64	; 0x40
  41016e:	781b      	ldrb	r3, [r3, #0]
  410170:	2b40      	cmp	r3, #64	; 0x40
  410172:	d10b      	bne.n	41018c <task_quinticHandler+0x144>
				{
					index = getIndex(buf[1]);
  410174:	f107 0340 	add.w	r3, r7, #64	; 0x40
  410178:	785b      	ldrb	r3, [r3, #1]
  41017a:	4618      	mov	r0, r3
  41017c:	4b59      	ldr	r3, [pc, #356]	; (4102e4 <task_quinticHandler+0x29c>)
  41017e:	4798      	blx	r3
  410180:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
					packet.type = DATA_PACKET_TYPE_ACCEL;  					
  410184:	2303      	movs	r3, #3
  410186:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
  41018a:	e0ca      	b.n	410322 <task_quinticHandler+0x2da>
				}
				else if (strncmp(buf, "DiscResp", 8) == 0)
  41018c:	f107 0340 	add.w	r3, r7, #64	; 0x40
  410190:	4618      	mov	r0, r3
  410192:	4955      	ldr	r1, [pc, #340]	; (4102e8 <task_quinticHandler+0x2a0>)
  410194:	2208      	movs	r2, #8
  410196:	4b55      	ldr	r3, [pc, #340]	; (4102ec <task_quinticHandler+0x2a4>)
  410198:	4798      	blx	r3
  41019a:	4603      	mov	r3, r0
  41019c:	2b00      	cmp	r3, #0
  41019e:	d14a      	bne.n	410236 <task_quinticHandler+0x1ee>
				{
					debugPrintStringInt("Disconnection event from Quintic\r\n", qConfig->qId);
  4101a0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4101a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4101a6:	4852      	ldr	r0, [pc, #328]	; (4102f0 <task_quinticHandler+0x2a8>)
  4101a8:	4619      	mov	r1, r3
  4101aa:	4b52      	ldr	r3, [pc, #328]	; (4102f4 <task_quinticHandler+0x2ac>)
  4101ac:	4798      	blx	r3
					int i = 0;
  4101ae:	2300      	movs	r3, #0
  4101b0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
					char* bufPtr = buf;
  4101b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4101b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
					if(strncmp(buf,"DiscResp", 8) == 0)
  4101bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4101c0:	4618      	mov	r0, r3
  4101c2:	4949      	ldr	r1, [pc, #292]	; (4102e8 <task_quinticHandler+0x2a0>)
  4101c4:	2208      	movs	r2, #8
  4101c6:	4b49      	ldr	r3, [pc, #292]	; (4102ec <task_quinticHandler+0x2a4>)
  4101c8:	4798      	blx	r3
  4101ca:	4603      	mov	r3, r0
  4101cc:	2b00      	cmp	r3, #0
  4101ce:	d12a      	bne.n	410226 <task_quinticHandler+0x1de>
					{
						bufPtr = buf + 8;
  4101d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4101d4:	3308      	adds	r3, #8
  4101d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
						for (i=0; i<5; i++)
  4101da:	2300      	movs	r3, #0
  4101dc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  4101e0:	e01d      	b.n	41021e <task_quinticHandler+0x1d6>
						{
							if (bufPtr[i] == '1')
  4101e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
  4101e6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
  4101ea:	4413      	add	r3, r2
  4101ec:	781b      	ldrb	r3, [r3, #0]
  4101ee:	2b31      	cmp	r3, #49	; 0x31
  4101f0:	d108      	bne.n	410204 <task_quinticHandler+0x1bc>
							{
								qConfig->imuArray[i]->imuConnected = 1;
  4101f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4101f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
  4101fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4101fe:	2201      	movs	r2, #1
  410200:	621a      	str	r2, [r3, #32]
  410202:	e007      	b.n	410214 <task_quinticHandler+0x1cc>
							}
							else
							{
								qConfig->imuArray[i]->imuConnected = 0;
  410204:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410208:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
  41020c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410210:	2200      	movs	r2, #0
  410212:	621a      	str	r2, [r3, #32]
					int i = 0;
					char* bufPtr = buf;
					if(strncmp(buf,"DiscResp", 8) == 0)
					{
						bufPtr = buf + 8;
						for (i=0; i<5; i++)
  410214:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
  410218:	3301      	adds	r3, #1
  41021a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  41021e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
  410222:	2b04      	cmp	r3, #4
  410224:	dddd      	ble.n	4101e2 <task_quinticHandler+0x19a>
							}
						}
					}
					//task_stateMachine_EnqueueEvent(SYS_EVENT_IMU_DISCONNECT, qConfig->qId);
					//send the connect string twice, try to get it to reconnect to the missing NOD. 
					sendString(qConfig->uartDevice, "connect\r\n");
  410226:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41022a:	695b      	ldr	r3, [r3, #20]
  41022c:	4618      	mov	r0, r3
  41022e:	4932      	ldr	r1, [pc, #200]	; (4102f8 <task_quinticHandler+0x2b0>)
  410230:	4b32      	ldr	r3, [pc, #200]	; (4102fc <task_quinticHandler+0x2b4>)
  410232:	4798      	blx	r3
  410234:	e075      	b.n	410322 <task_quinticHandler+0x2da>
				}
				else if (strncmp(buf, "ConnResp", 8) == 0)
  410236:	f107 0340 	add.w	r3, r7, #64	; 0x40
  41023a:	4618      	mov	r0, r3
  41023c:	4930      	ldr	r1, [pc, #192]	; (410300 <task_quinticHandler+0x2b8>)
  41023e:	2208      	movs	r2, #8
  410240:	4b2a      	ldr	r3, [pc, #168]	; (4102ec <task_quinticHandler+0x2a4>)
  410242:	4798      	blx	r3
  410244:	4603      	mov	r3, r0
  410246:	2b00      	cmp	r3, #0
  410248:	d109      	bne.n	41025e <task_quinticHandler+0x216>
				{
					debugPrintStringInt(buf,qConfig->qId);
  41024a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410250:	f107 0240 	add.w	r2, r7, #64	; 0x40
  410254:	4610      	mov	r0, r2
  410256:	4619      	mov	r1, r3
  410258:	4b26      	ldr	r3, [pc, #152]	; (4102f4 <task_quinticHandler+0x2ac>)
  41025a:	4798      	blx	r3
  41025c:	e061      	b.n	410322 <task_quinticHandler+0x2da>
				}
				else if(strncmp(buf, "AppStart\r\n",10) == 0)
  41025e:	f107 0340 	add.w	r3, r7, #64	; 0x40
  410262:	4618      	mov	r0, r3
  410264:	4927      	ldr	r1, [pc, #156]	; (410304 <task_quinticHandler+0x2bc>)
  410266:	220a      	movs	r2, #10
  410268:	4b20      	ldr	r3, [pc, #128]	; (4102ec <task_quinticHandler+0x2a4>)
  41026a:	4798      	blx	r3
  41026c:	4603      	mov	r3, r0
  41026e:	2b00      	cmp	r3, #0
  410270:	d119      	bne.n	4102a6 <task_quinticHandler+0x25e>
				{
					//this means that the quintic has restarted, throw an error
					if(getCurrentState() == SYS_STATE_RECORDING || getCurrentState() == SYS_STATE_IDLE)
  410272:	4b1a      	ldr	r3, [pc, #104]	; (4102dc <task_quinticHandler+0x294>)
  410274:	4798      	blx	r3
  410276:	4603      	mov	r3, r0
  410278:	2b04      	cmp	r3, #4
  41027a:	d004      	beq.n	410286 <task_quinticHandler+0x23e>
  41027c:	4b17      	ldr	r3, [pc, #92]	; (4102dc <task_quinticHandler+0x294>)
  41027e:	4798      	blx	r3
  410280:	4603      	mov	r3, r0
  410282:	2b03      	cmp	r3, #3
  410284:	d14d      	bne.n	410322 <task_quinticHandler+0x2da>
					{				
						debugPrintStringInt("Quintic Crashed!",qConfig->qId); 
  410286:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  41028a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  41028c:	481e      	ldr	r0, [pc, #120]	; (410308 <task_quinticHandler+0x2c0>)
  41028e:	4619      	mov	r1, r3
  410290:	4b18      	ldr	r3, [pc, #96]	; (4102f4 <task_quinticHandler+0x2ac>)
  410292:	4798      	blx	r3
						task_stateMachine_EnqueueEvent(SYS_EVENT_IMU_DISCONNECT, qConfig->qId);	
  410294:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  41029a:	b29b      	uxth	r3, r3
  41029c:	2006      	movs	r0, #6
  41029e:	4619      	mov	r1, r3
  4102a0:	4b1a      	ldr	r3, [pc, #104]	; (41030c <task_quinticHandler+0x2c4>)
  4102a2:	4798      	blx	r3
  4102a4:	e03d      	b.n	410322 <task_quinticHandler+0x2da>
					}
				}
				else if ((strncmp(buf, "RSSI", 4) == 0))
  4102a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4102aa:	4618      	mov	r0, r3
  4102ac:	4918      	ldr	r1, [pc, #96]	; (410310 <task_quinticHandler+0x2c8>)
  4102ae:	2204      	movs	r2, #4
  4102b0:	4b0e      	ldr	r3, [pc, #56]	; (4102ec <task_quinticHandler+0x2a4>)
  4102b2:	4798      	blx	r3
  4102b4:	4603      	mov	r3, r0
  4102b6:	2b00      	cmp	r3, #0
  4102b8:	d12c      	bne.n	410314 <task_quinticHandler+0x2cc>
				{
					debugPrintStringInt(buf,qConfig->qId);
  4102ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4102be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4102c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
  4102c4:	4610      	mov	r0, r2
  4102c6:	4619      	mov	r1, r3
  4102c8:	4b0a      	ldr	r3, [pc, #40]	; (4102f4 <task_quinticHandler+0x2ac>)
  4102ca:	4798      	blx	r3
  4102cc:	e029      	b.n	410322 <task_quinticHandler+0x2da>
  4102ce:	bf00      	nop
  4102d0:	200039dc 	.word	0x200039dc
  4102d4:	0040e4b5 	.word	0x0040e4b5
  4102d8:	0041309d 	.word	0x0041309d
  4102dc:	004025e9 	.word	0x004025e9
  4102e0:	0040e5b5 	.word	0x0040e5b5
  4102e4:	00410dd1 	.word	0x00410dd1
  4102e8:	0041db48 	.word	0x0041db48
  4102ec:	004137e9 	.word	0x004137e9
  4102f0:	0041db54 	.word	0x0041db54
  4102f4:	004015c1 	.word	0x004015c1
  4102f8:	0041db78 	.word	0x0041db78
  4102fc:	004108e9 	.word	0x004108e9
  410300:	0041db84 	.word	0x0041db84
  410304:	0041db90 	.word	0x0041db90
  410308:	0041db9c 	.word	0x0041db9c
  41030c:	00402581 	.word	0x00402581
  410310:	0041dbb0 	.word	0x0041dbb0
				}
				else
				{				
					//this is a corrupt packet, increment the count. 
					qConfig->corruptPacketCnt++;
  410314:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410318:	69db      	ldr	r3, [r3, #28]
  41031a:	1c5a      	adds	r2, r3, #1
  41031c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410320:	61da      	str	r2, [r3, #28]
					//vTaskDelay(10);
				}
				//validate the index
				if((index >= 0 && index <= 4) && (index <= qConfig->expectedNumberOfNods))
  410322:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
  410326:	2b00      	cmp	r3, #0
  410328:	db75      	blt.n	410416 <task_quinticHandler+0x3ce>
  41032a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
  41032e:	2b04      	cmp	r3, #4
  410330:	dc71      	bgt.n	410416 <task_quinticHandler+0x3ce>
  410332:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410336:	699a      	ldr	r2, [r3, #24]
  410338:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
  41033c:	429a      	cmp	r2, r3
  41033e:	db6a      	blt.n	410416 <task_quinticHandler+0x3ce>
				{
					packet.imuId = qConfig->imuArray[index]->imuId; 
  410340:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410344:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
  410348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  41034c:	681b      	ldr	r3, [r3, #0]
  41034e:	b2db      	uxtb	r3, r3
  410350:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
					packet.imuIndex = packet.imuId; 
  410354:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
  410358:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
					qConfig->imuArray[index]->stats.packetCnt++; //increment the packets received count
  41035c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410360:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
  410364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  41036a:	3201      	adds	r2, #1
  41036c:	625a      	str	r2, [r3, #36]	; 0x24
					//disable the average packet time by default. 
					if(brainSettings.debugPackets == true)
  41036e:	4b2e      	ldr	r3, [pc, #184]	; (410428 <task_quinticHandler+0x3e0>)
  410370:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
  410374:	2b00      	cmp	r3, #0
  410376:	d026      	beq.n	4103c6 <task_quinticHandler+0x37e>
					{						
						timeNow = sgSysTickCount; 
  410378:	4b2c      	ldr	r3, [pc, #176]	; (41042c <task_quinticHandler+0x3e4>)
  41037a:	681b      	ldr	r3, [r3, #0]
  41037c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
						//calculate the new running average packet time --> (average + (last packet received time - current Time)/2)
						qConfig->imuArray[index]->stats.avgPacketTime = (qConfig->imuArray[index]->stats.avgPacketTime + ( timeNow - qConfig->imuArray[index]->stats.lastPacketTime ))>>1;
  410380:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410384:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
  410388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  41038c:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
  410390:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
  410394:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  410398:	6b51      	ldr	r1, [r2, #52]	; 0x34
  41039a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
  41039e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
  4103a2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  4103a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4103a8:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
  4103ac:	1a82      	subs	r2, r0, r2
  4103ae:	440a      	add	r2, r1
  4103b0:	0852      	lsrs	r2, r2, #1
  4103b2:	635a      	str	r2, [r3, #52]	; 0x34
						qConfig->imuArray[index]->stats.lastPacketTime = timeNow; 				
  4103b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  4103b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
  4103bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4103c0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
  4103c4:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					memcpy(packet.data,buf+2, 12+1);				
  4103c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
  4103ca:	1cda      	adds	r2, r3, #3
  4103cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4103d0:	3302      	adds	r3, #2
  4103d2:	4610      	mov	r0, r2
  4103d4:	4619      	mov	r1, r3
  4103d6:	220d      	movs	r2, #13
  4103d8:	4b15      	ldr	r3, [pc, #84]	; (410430 <task_quinticHandler+0x3e8>)
  4103da:	4798      	blx	r3
					if(queue_dataHandler != NULL)
  4103dc:	4b15      	ldr	r3, [pc, #84]	; (410434 <task_quinticHandler+0x3ec>)
  4103de:	681b      	ldr	r3, [r3, #0]
  4103e0:	2b00      	cmp	r3, #0
  4103e2:	d018      	beq.n	410416 <task_quinticHandler+0x3ce>
					{
						if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,5) != TRUE)
  4103e4:	4b13      	ldr	r3, [pc, #76]	; (410434 <task_quinticHandler+0x3ec>)
  4103e6:	681a      	ldr	r2, [r3, #0]
  4103e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
  4103ec:	4610      	mov	r0, r2
  4103ee:	4619      	mov	r1, r3
  4103f0:	2205      	movs	r2, #5
  4103f2:	2300      	movs	r3, #0
  4103f4:	4c10      	ldr	r4, [pc, #64]	; (410438 <task_quinticHandler+0x3f0>)
  4103f6:	47a0      	blx	r4
  4103f8:	4603      	mov	r3, r0
  4103fa:	2b01      	cmp	r3, #1
  4103fc:	d00b      	beq.n	410416 <task_quinticHandler+0x3ce>
						{
							//error failed to queue the packet.
							qConfig->imuArray[index]->stats.droppedPackets++;
  4103fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  410402:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
  410406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  41040a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  41040c:	3201      	adds	r2, #1
  41040e:	629a      	str	r2, [r3, #40]	; 0x28
							debugPrintString("Queue Full Dropped packet\r\n");
  410410:	480a      	ldr	r0, [pc, #40]	; (41043c <task_quinticHandler+0x3f4>)
  410412:	4b0b      	ldr	r3, [pc, #44]	; (410440 <task_quinticHandler+0x3f8>)
  410414:	4798      	blx	r3
					}				
				}
			}
		}
		//taskYIELD();
		vTaskDelay(1);
  410416:	2001      	movs	r0, #1
  410418:	4b0a      	ldr	r3, [pc, #40]	; (410444 <task_quinticHandler+0x3fc>)
  41041a:	4798      	blx	r3
		#else

		#endif
	}	
  41041c:	e67a      	b.n	410114 <task_quinticHandler+0xcc>
}
  41041e:	f507 77c2 	add.w	r7, r7, #388	; 0x184
  410422:	46bd      	mov	sp, r7
  410424:	bd90      	pop	{r4, r7, pc}
  410426:	bf00      	nop
  410428:	20000220 	.word	0x20000220
  41042c:	200039dc 	.word	0x200039dc
  410430:	00412f69 	.word	0x00412f69
  410434:	20003814 	.word	0x20003814
  410438:	0040aa11 	.word	0x0040aa11
  41043c:	0041dbb8 	.word	0x0041dbb8
  410440:	004016d5 	.word	0x004016d5
  410444:	0040b24d 	.word	0x0040b24d

00410448 <task_quintic_initializeImus>:
 * @brief Start the initializing process for IMUs.
 * @param pvParameters, void pointer to structure containing quintic and imu configuration. 
 * @return void
 ***********************************************************************************************/
void task_quintic_initializeImus(void *pvParameters)
{
  410448:	b590      	push	{r4, r7, lr}
  41044a:	b08d      	sub	sp, #52	; 0x34
  41044c:	af00      	add	r7, sp, #0
  41044e:	6078      	str	r0, [r7, #4]
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters;
  410450:	687b      	ldr	r3, [r7, #4]
  410452:	627b      	str	r3, [r7, #36]	; 0x24
	status_t result = STATUS_PASS;
  410454:	2300      	movs	r3, #0
  410456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	status_t scanSuccess=STATUS_FAIL, connSuccess=STATUS_FAIL;
  41045a:	2301      	movs	r3, #1
  41045c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  410460:	2301      	movs	r3, #1
  410462:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int vScanLoopCount=0;
  410466:	2300      	movs	r3, #0
  410468:	61fb      	str	r3, [r7, #28]
	//reset the quintic here...
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  41046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41046c:	695b      	ldr	r3, [r3, #20]
  41046e:	4618      	mov	r0, r3
  410470:	4b98      	ldr	r3, [pc, #608]	; (4106d4 <task_quintic_initializeImus+0x28c>)
  410472:	4798      	blx	r3

	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_LOW);
  410474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410476:	f893 3020 	ldrb.w	r3, [r3, #32]
  41047a:	4618      	mov	r0, r3
  41047c:	2100      	movs	r1, #0
  41047e:	4b96      	ldr	r3, [pc, #600]	; (4106d8 <task_quintic_initializeImus+0x290>)
  410480:	4798      	blx	r3
	vTaskDelay(100);
  410482:	2064      	movs	r0, #100	; 0x64
  410484:	4b95      	ldr	r3, [pc, #596]	; (4106dc <task_quintic_initializeImus+0x294>)
  410486:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_HIGH);
  410488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41048a:	f893 3020 	ldrb.w	r3, [r3, #32]
  41048e:	4618      	mov	r0, r3
  410490:	2101      	movs	r1, #1
  410492:	4b91      	ldr	r3, [pc, #580]	; (4106d8 <task_quintic_initializeImus+0x290>)
  410494:	4798      	blx	r3
	
	#ifdef USES_NEW_POWER_BOARD
	cmd_sendJackToggleToPowerBoard(); 
  410496:	4b92      	ldr	r3, [pc, #584]	; (4106e0 <task_quintic_initializeImus+0x298>)
  410498:	4798      	blx	r3
	#endif
	
	#ifndef USE_Q1_Q2
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
	toggleJackEnables(DRV_GPIO_PIN_STATE_HIGH);
  41049a:	2001      	movs	r0, #1
  41049c:	4b91      	ldr	r3, [pc, #580]	; (4106e4 <task_quintic_initializeImus+0x29c>)
  41049e:	4798      	blx	r3
	#endif
	vTaskDelay(100);
  4104a0:	2064      	movs	r0, #100	; 0x64
  4104a2:	4b8e      	ldr	r3, [pc, #568]	; (4106dc <task_quintic_initializeImus+0x294>)
  4104a4:	4798      	blx	r3
	#ifndef USE_Q1_Q2
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
	toggleJackEnables(DRV_GPIO_PIN_STATE_LOW);
  4104a6:	2000      	movs	r0, #0
  4104a8:	4b8e      	ldr	r3, [pc, #568]	; (4106e4 <task_quintic_initializeImus+0x29c>)
  4104aa:	4798      	blx	r3
	#endif
	vTaskDelay(100);
  4104ac:	2064      	movs	r0, #100	; 0x64
  4104ae:	4b8b      	ldr	r3, [pc, #556]	; (4106dc <task_quintic_initializeImus+0x294>)
  4104b0:	4798      	blx	r3
	//wait for first ACK
	result = getResponse(qConfig->uartDevice, "AppStart\r\n"); 
  4104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4104b4:	695b      	ldr	r3, [r3, #20]
  4104b6:	4618      	mov	r0, r3
  4104b8:	498b      	ldr	r1, [pc, #556]	; (4106e8 <task_quintic_initializeImus+0x2a0>)
  4104ba:	4b8c      	ldr	r3, [pc, #560]	; (4106ec <task_quintic_initializeImus+0x2a4>)
  4104bc:	4798      	blx	r3
  4104be:	4603      	mov	r3, r0
  4104c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	vTaskDelay(10);
  4104c4:	200a      	movs	r0, #10
  4104c6:	4b85      	ldr	r3, [pc, #532]	; (4106dc <task_quintic_initializeImus+0x294>)
  4104c8:	4798      	blx	r3
	//get quintic ready to receive the
	if (result != STATUS_PASS)
  4104ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4104ce:	2b00      	cmp	r3, #0
  4104d0:	d00a      	beq.n	4104e8 <task_quintic_initializeImus+0xa0>
	{
		debugPrintString("Did not receive first ACK from Q\r\n");
  4104d2:	4887      	ldr	r0, [pc, #540]	; (4106f0 <task_quintic_initializeImus+0x2a8>)
  4104d4:	4b87      	ldr	r3, [pc, #540]	; (4106f4 <task_quintic_initializeImus+0x2ac>)
  4104d6:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
  4104d8:	200b      	movs	r0, #11
  4104da:	21ff      	movs	r1, #255	; 0xff
  4104dc:	4b86      	ldr	r3, [pc, #536]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  4104de:	4798      	blx	r3
		vTaskDelete(NULL);
  4104e0:	2000      	movs	r0, #0
  4104e2:	4b86      	ldr	r3, [pc, #536]	; (4106fc <task_quintic_initializeImus+0x2b4>)
  4104e4:	4798      	blx	r3
		return;
  4104e6:	e130      	b.n	41074a <task_quintic_initializeImus+0x302>
	}
	
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  4104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4104ea:	695b      	ldr	r3, [r3, #20]
  4104ec:	4618      	mov	r0, r3
  4104ee:	4b79      	ldr	r3, [pc, #484]	; (4106d4 <task_quintic_initializeImus+0x28c>)
  4104f0:	4798      	blx	r3
	sendString(qConfig->uartDevice,QCMD_BEGIN);
  4104f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4104f4:	695b      	ldr	r3, [r3, #20]
  4104f6:	4618      	mov	r0, r3
  4104f8:	4981      	ldr	r1, [pc, #516]	; (410700 <task_quintic_initializeImus+0x2b8>)
  4104fa:	4b82      	ldr	r3, [pc, #520]	; (410704 <task_quintic_initializeImus+0x2bc>)
  4104fc:	4798      	blx	r3
	vTaskDelay(10);
  4104fe:	200a      	movs	r0, #10
  410500:	4b76      	ldr	r3, [pc, #472]	; (4106dc <task_quintic_initializeImus+0x294>)
  410502:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice);
  410504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410506:	695b      	ldr	r3, [r3, #20]
  410508:	4618      	mov	r0, r3
  41050a:	4b7f      	ldr	r3, [pc, #508]	; (410708 <task_quintic_initializeImus+0x2c0>)
  41050c:	4798      	blx	r3
  41050e:	4603      	mov	r3, r0
  410510:	461a      	mov	r2, r3
  410512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  410516:	4313      	orrs	r3, r2
  410518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != STATUS_PASS)
  41051c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  410520:	2b00      	cmp	r3, #0
  410522:	d00a      	beq.n	41053a <task_quintic_initializeImus+0xf2>
	{
		debugPrintString("No response on Begin command from Q\r\n");
  410524:	4879      	ldr	r0, [pc, #484]	; (41070c <task_quintic_initializeImus+0x2c4>)
  410526:	4b73      	ldr	r3, [pc, #460]	; (4106f4 <task_quintic_initializeImus+0x2ac>)
  410528:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
  41052a:	200b      	movs	r0, #11
  41052c:	21ff      	movs	r1, #255	; 0xff
  41052e:	4b72      	ldr	r3, [pc, #456]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  410530:	4798      	blx	r3
		vTaskDelete(NULL);
  410532:	2000      	movs	r0, #0
  410534:	4b71      	ldr	r3, [pc, #452]	; (4106fc <task_quintic_initializeImus+0x2b4>)
  410536:	4798      	blx	r3
		return;
  410538:	e107      	b.n	41074a <task_quintic_initializeImus+0x302>
	}
	
	//send MAC addresses for each NOD	
	int i = 0;
  41053a:	2300      	movs	r3, #0
  41053c:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  41053e:	2300      	movs	r3, #0
  410540:	62bb      	str	r3, [r7, #40]	; 0x28
  410542:	e02b      	b.n	41059c <task_quintic_initializeImus+0x154>
	{
		sendString(qConfig->uartDevice,qConfig->imuArray[i]->macAddress);
  410544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410546:	695a      	ldr	r2, [r3, #20]
  410548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41054a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  41054c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  410550:	3304      	adds	r3, #4
  410552:	4610      	mov	r0, r2
  410554:	4619      	mov	r1, r3
  410556:	4b6b      	ldr	r3, [pc, #428]	; (410704 <task_quintic_initializeImus+0x2bc>)
  410558:	4798      	blx	r3
		vTaskDelay(10);
  41055a:	200a      	movs	r0, #10
  41055c:	4b5f      	ldr	r3, [pc, #380]	; (4106dc <task_quintic_initializeImus+0x294>)
  41055e:	4798      	blx	r3
		result |= getAck(qConfig->uartDevice);
  410560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410562:	695b      	ldr	r3, [r3, #20]
  410564:	4618      	mov	r0, r3
  410566:	4b68      	ldr	r3, [pc, #416]	; (410708 <task_quintic_initializeImus+0x2c0>)
  410568:	4798      	blx	r3
  41056a:	4603      	mov	r3, r0
  41056c:	461a      	mov	r2, r3
  41056e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  410572:	4313      	orrs	r3, r2
  410574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (result != STATUS_PASS)
  410578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  41057c:	2b00      	cmp	r3, #0
  41057e:	d00a      	beq.n	410596 <task_quintic_initializeImus+0x14e>
		{
			debugPrintString("No ACK from Q after sending IMU address\r\n");
  410580:	4863      	ldr	r0, [pc, #396]	; (410710 <task_quintic_initializeImus+0x2c8>)
  410582:	4b5c      	ldr	r3, [pc, #368]	; (4106f4 <task_quintic_initializeImus+0x2ac>)
  410584:	4798      	blx	r3
			task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
  410586:	200b      	movs	r0, #11
  410588:	21ff      	movs	r1, #255	; 0xff
  41058a:	4b5b      	ldr	r3, [pc, #364]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  41058c:	4798      	blx	r3
			vTaskDelete(NULL);
  41058e:	2000      	movs	r0, #0
  410590:	4b5a      	ldr	r3, [pc, #360]	; (4106fc <task_quintic_initializeImus+0x2b4>)
  410592:	4798      	blx	r3
			return;
  410594:	e0d9      	b.n	41074a <task_quintic_initializeImus+0x302>
		return;
	}
	
	//send MAC addresses for each NOD	
	int i = 0;
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  410596:	6abb      	ldr	r3, [r7, #40]	; 0x28
  410598:	3301      	adds	r3, #1
  41059a:	62bb      	str	r3, [r7, #40]	; 0x28
  41059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41059e:	699a      	ldr	r2, [r3, #24]
  4105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4105a2:	429a      	cmp	r2, r3
  4105a4:	dcce      	bgt.n	410544 <task_quintic_initializeImus+0xfc>
			task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
			vTaskDelete(NULL);
			return;
		}
	}
	sendString(qConfig->uartDevice,"end\r\n");
  4105a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4105a8:	695b      	ldr	r3, [r3, #20]
  4105aa:	4618      	mov	r0, r3
  4105ac:	4959      	ldr	r1, [pc, #356]	; (410714 <task_quintic_initializeImus+0x2cc>)
  4105ae:	4b55      	ldr	r3, [pc, #340]	; (410704 <task_quintic_initializeImus+0x2bc>)
  4105b0:	4798      	blx	r3
	vTaskDelay(10);
  4105b2:	200a      	movs	r0, #10
  4105b4:	4b49      	ldr	r3, [pc, #292]	; (4106dc <task_quintic_initializeImus+0x294>)
  4105b6:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice);
  4105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4105ba:	695b      	ldr	r3, [r3, #20]
  4105bc:	4618      	mov	r0, r3
  4105be:	4b52      	ldr	r3, [pc, #328]	; (410708 <task_quintic_initializeImus+0x2c0>)
  4105c0:	4798      	blx	r3
  4105c2:	4603      	mov	r3, r0
  4105c4:	461a      	mov	r2, r3
  4105c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4105ca:	4313      	orrs	r3, r2
  4105cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != STATUS_PASS)
  4105d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4105d4:	2b00      	cmp	r3, #0
  4105d6:	d00a      	beq.n	4105ee <task_quintic_initializeImus+0x1a6>
	{
		debugPrintString("No ACK from Q after sending end\r\n");
  4105d8:	484f      	ldr	r0, [pc, #316]	; (410718 <task_quintic_initializeImus+0x2d0>)
  4105da:	4b46      	ldr	r3, [pc, #280]	; (4106f4 <task_quintic_initializeImus+0x2ac>)
  4105dc:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
  4105de:	200b      	movs	r0, #11
  4105e0:	21ff      	movs	r1, #255	; 0xff
  4105e2:	4b45      	ldr	r3, [pc, #276]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  4105e4:	4798      	blx	r3
		vTaskDelete(NULL);
  4105e6:	2000      	movs	r0, #0
  4105e8:	4b44      	ldr	r3, [pc, #272]	; (4106fc <task_quintic_initializeImus+0x2b4>)
  4105ea:	4798      	blx	r3
		return;
  4105ec:	e0ad      	b.n	41074a <task_quintic_initializeImus+0x302>
	}
	
	//send the latest channel mapping to quintics
	char buf[20] = {0};
  4105ee:	f107 0308 	add.w	r3, r7, #8
  4105f2:	2200      	movs	r2, #0
  4105f4:	601a      	str	r2, [r3, #0]
  4105f6:	3304      	adds	r3, #4
  4105f8:	2200      	movs	r2, #0
  4105fa:	601a      	str	r2, [r3, #0]
  4105fc:	3304      	adds	r3, #4
  4105fe:	2200      	movs	r2, #0
  410600:	601a      	str	r2, [r3, #0]
  410602:	3304      	adds	r3, #4
  410604:	2200      	movs	r2, #0
  410606:	601a      	str	r2, [r3, #0]
  410608:	3304      	adds	r3, #4
  41060a:	2200      	movs	r2, #0
  41060c:	601a      	str	r2, [r3, #0]
  41060e:	3304      	adds	r3, #4
	strncat(buf, "chmap ", 6);		//append the channel map command to the mask
  410610:	f107 0308 	add.w	r3, r7, #8
  410614:	4618      	mov	r0, r3
  410616:	4b41      	ldr	r3, [pc, #260]	; (41071c <task_quintic_initializeImus+0x2d4>)
  410618:	4798      	blx	r3
  41061a:	4603      	mov	r3, r0
  41061c:	f107 0208 	add.w	r2, r7, #8
  410620:	4413      	add	r3, r2
  410622:	4a3f      	ldr	r2, [pc, #252]	; (410720 <task_quintic_initializeImus+0x2d8>)
  410624:	6810      	ldr	r0, [r2, #0]
  410626:	6018      	str	r0, [r3, #0]
  410628:	8891      	ldrh	r1, [r2, #4]
  41062a:	7992      	ldrb	r2, [r2, #6]
  41062c:	8099      	strh	r1, [r3, #4]
  41062e:	719a      	strb	r2, [r3, #6]
	sendString(qConfig->uartDevice, strncat(buf, brainSettings.channelmap, 20-6));
  410630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410632:	695c      	ldr	r4, [r3, #20]
  410634:	f107 0308 	add.w	r3, r7, #8
  410638:	4618      	mov	r0, r3
  41063a:	493a      	ldr	r1, [pc, #232]	; (410724 <task_quintic_initializeImus+0x2dc>)
  41063c:	220e      	movs	r2, #14
  41063e:	4b3a      	ldr	r3, [pc, #232]	; (410728 <task_quintic_initializeImus+0x2e0>)
  410640:	4798      	blx	r3
  410642:	4603      	mov	r3, r0
  410644:	4620      	mov	r0, r4
  410646:	4619      	mov	r1, r3
  410648:	4b2e      	ldr	r3, [pc, #184]	; (410704 <task_quintic_initializeImus+0x2bc>)
  41064a:	4798      	blx	r3
	vTaskDelay(10);
  41064c:	200a      	movs	r0, #10
  41064e:	4b23      	ldr	r3, [pc, #140]	; (4106dc <task_quintic_initializeImus+0x294>)
  410650:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice);
  410652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  410654:	695b      	ldr	r3, [r3, #20]
  410656:	4618      	mov	r0, r3
  410658:	4b2b      	ldr	r3, [pc, #172]	; (410708 <task_quintic_initializeImus+0x2c0>)
  41065a:	4798      	blx	r3
  41065c:	4603      	mov	r3, r0
  41065e:	461a      	mov	r2, r3
  410660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  410664:	4313      	orrs	r3, r2
  410666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != STATUS_PASS)
  41066a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  41066e:	2b00      	cmp	r3, #0
  410670:	d00a      	beq.n	410688 <task_quintic_initializeImus+0x240>
	{
		debugPrintString("No ACK from Q after sending channel map\r\n");
  410672:	482e      	ldr	r0, [pc, #184]	; (41072c <task_quintic_initializeImus+0x2e4>)
  410674:	4b1f      	ldr	r3, [pc, #124]	; (4106f4 <task_quintic_initializeImus+0x2ac>)
  410676:	4798      	blx	r3
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0xff);
  410678:	200b      	movs	r0, #11
  41067a:	21ff      	movs	r1, #255	; 0xff
  41067c:	4b1e      	ldr	r3, [pc, #120]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  41067e:	4798      	blx	r3
		vTaskDelete(NULL);
  410680:	2000      	movs	r0, #0
  410682:	4b1e      	ldr	r3, [pc, #120]	; (4106fc <task_quintic_initializeImus+0x2b4>)
  410684:	4798      	blx	r3
		return;
  410686:	e060      	b.n	41074a <task_quintic_initializeImus+0x302>
	}
	//
	scanSuccess = scanForImus(qConfig);
  410688:	6a78      	ldr	r0, [r7, #36]	; 0x24
  41068a:	4b29      	ldr	r3, [pc, #164]	; (410730 <task_quintic_initializeImus+0x2e8>)
  41068c:	4798      	blx	r3
  41068e:	4603      	mov	r3, r0
  410690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(scanSuccess == STATUS_PASS)
  410694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  410698:	2b00      	cmp	r3, #0
  41069a:	d105      	bne.n	4106a8 <task_quintic_initializeImus+0x260>
	{
		connSuccess = connectToImus(qConfig);
  41069c:	6a78      	ldr	r0, [r7, #36]	; 0x24
  41069e:	4b25      	ldr	r3, [pc, #148]	; (410734 <task_quintic_initializeImus+0x2ec>)
  4106a0:	4798      	blx	r3
  4106a2:	4603      	mov	r3, r0
  4106a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}
		
	
	//pass command to implement the new channel map
	//can only be passed after the connection has been established with the IMUs.
	sendString(qConfig->uartDevice, "setMap\r\n");
  4106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4106aa:	695b      	ldr	r3, [r3, #20]
  4106ac:	4618      	mov	r0, r3
  4106ae:	4922      	ldr	r1, [pc, #136]	; (410738 <task_quintic_initializeImus+0x2f0>)
  4106b0:	4b14      	ldr	r3, [pc, #80]	; (410704 <task_quintic_initializeImus+0x2bc>)
  4106b2:	4798      	blx	r3
	
	if(scanSuccess == STATUS_PASS && connSuccess == STATUS_PASS)
  4106b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4106b8:	2b00      	cmp	r3, #0
  4106ba:	d13f      	bne.n	41073c <task_quintic_initializeImus+0x2f4>
  4106bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4106c0:	2b00      	cmp	r3, #0
  4106c2:	d13b      	bne.n	41073c <task_quintic_initializeImus+0x2f4>
	{		
		//printf("connected to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, qConfig->qId);			
  4106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4106c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4106c8:	b29b      	uxth	r3, r3
  4106ca:	200a      	movs	r0, #10
  4106cc:	4619      	mov	r1, r3
  4106ce:	4b0a      	ldr	r3, [pc, #40]	; (4106f8 <task_quintic_initializeImus+0x2b0>)
  4106d0:	4798      	blx	r3
  4106d2:	e037      	b.n	410744 <task_quintic_initializeImus+0x2fc>
  4106d4:	0040e6fd 	.word	0x0040e6fd
  4106d8:	0040d7b5 	.word	0x0040d7b5
  4106dc:	0040b24d 	.word	0x0040b24d
  4106e0:	00400bc1 	.word	0x00400bc1
  4106e4:	00410005 	.word	0x00410005
  4106e8:	0041db90 	.word	0x0041db90
  4106ec:	004109b5 	.word	0x004109b5
  4106f0:	0041dbd4 	.word	0x0041dbd4
  4106f4:	004016d5 	.word	0x004016d5
  4106f8:	00402581 	.word	0x00402581
  4106fc:	0040b1a1 	.word	0x0040b1a1
  410700:	0041dbf8 	.word	0x0041dbf8
  410704:	004108e9 	.word	0x004108e9
  410708:	00410939 	.word	0x00410939
  41070c:	0041dc00 	.word	0x0041dc00
  410710:	0041dc28 	.word	0x0041dc28
  410714:	0041dc54 	.word	0x0041dc54
  410718:	0041dc5c 	.word	0x0041dc5c
  41071c:	00413725 	.word	0x00413725
  410720:	0041dc80 	.word	0x0041dc80
  410724:	200002c0 	.word	0x200002c0
  410728:	00413785 	.word	0x00413785
  41072c:	0041dc88 	.word	0x0041dc88
  410730:	00410a29 	.word	0x00410a29
  410734:	00410ba9 	.word	0x00410ba9
  410738:	0041dcb4 	.word	0x0041dcb4
	}
	else
	{
		//printf("Failed connection to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);
		//result = STATUS_FAIL; 
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0x00);
  41073c:	200b      	movs	r0, #11
  41073e:	2100      	movs	r1, #0
  410740:	4b03      	ldr	r3, [pc, #12]	; (410750 <task_quintic_initializeImus+0x308>)
  410742:	4798      	blx	r3
	}
	vTaskDelete(NULL);
  410744:	2000      	movs	r0, #0
  410746:	4b03      	ldr	r3, [pc, #12]	; (410754 <task_quintic_initializeImus+0x30c>)
  410748:	4798      	blx	r3
	//return the result;
	//return result;

}
  41074a:	3734      	adds	r7, #52	; 0x34
  41074c:	46bd      	mov	sp, r7
  41074e:	bd90      	pop	{r4, r7, pc}
  410750:	00402581 	.word	0x00402581
  410754:	0040b1a1 	.word	0x0040b1a1

00410758 <task_quintic_sendConnectMsg>:
 * @brief Send the connect command to the quintic modules
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_sendConnectMsg(quinticConfiguration_t* qConfig)
{
  410758:	b580      	push	{r7, lr}
  41075a:	b082      	sub	sp, #8
  41075c:	af00      	add	r7, sp, #0
  41075e:	6078      	str	r0, [r7, #4]
	//send the start command. 	
	if(qConfig->isinit == 1)
  410760:	687b      	ldr	r3, [r7, #4]
  410762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  410764:	2b01      	cmp	r3, #1
  410766:	d105      	bne.n	410774 <task_quintic_sendConnectMsg+0x1c>
	{
		sendString(qConfig->uartDevice, "connect\r\n");	
  410768:	687b      	ldr	r3, [r7, #4]
  41076a:	695b      	ldr	r3, [r3, #20]
  41076c:	4618      	mov	r0, r3
  41076e:	4904      	ldr	r1, [pc, #16]	; (410780 <task_quintic_sendConnectMsg+0x28>)
  410770:	4b04      	ldr	r3, [pc, #16]	; (410784 <task_quintic_sendConnectMsg+0x2c>)
  410772:	4798      	blx	r3
	}	
	return STATUS_PASS; 
  410774:	2300      	movs	r3, #0
}
  410776:	4618      	mov	r0, r3
  410778:	3708      	adds	r7, #8
  41077a:	46bd      	mov	sp, r7
  41077c:	bd80      	pop	{r7, pc}
  41077e:	bf00      	nop
  410780:	0041db78 	.word	0x0041db78
  410784:	004108e9 	.word	0x004108e9

00410788 <task_quintic_startRecording>:
 * @brief Send the start command to the IMUs to request Notif data from them
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_startRecording(quinticConfiguration_t* qConfig)
{
  410788:	b580      	push	{r7, lr}
  41078a:	b082      	sub	sp, #8
  41078c:	af00      	add	r7, sp, #0
  41078e:	6078      	str	r0, [r7, #4]
	//send the start command. 
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  410790:	687b      	ldr	r3, [r7, #4]
  410792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  410794:	2b00      	cmp	r3, #0
  410796:	d009      	beq.n	4107ac <task_quintic_startRecording+0x24>
  410798:	687b      	ldr	r3, [r7, #4]
  41079a:	699b      	ldr	r3, [r3, #24]
  41079c:	2b00      	cmp	r3, #0
  41079e:	dd05      	ble.n	4107ac <task_quintic_startRecording+0x24>
	{	
		sendString(qConfig->uartDevice, "start\r\n");
  4107a0:	687b      	ldr	r3, [r7, #4]
  4107a2:	695b      	ldr	r3, [r3, #20]
  4107a4:	4618      	mov	r0, r3
  4107a6:	4904      	ldr	r1, [pc, #16]	; (4107b8 <task_quintic_startRecording+0x30>)
  4107a8:	4b04      	ldr	r3, [pc, #16]	; (4107bc <task_quintic_startRecording+0x34>)
  4107aa:	4798      	blx	r3
	}
	return STATUS_PASS; 
  4107ac:	2300      	movs	r3, #0
}
  4107ae:	4618      	mov	r0, r3
  4107b0:	3708      	adds	r7, #8
  4107b2:	46bd      	mov	sp, r7
  4107b4:	bd80      	pop	{r7, pc}
  4107b6:	bf00      	nop
  4107b8:	0041dcc0 	.word	0x0041dcc0
  4107bc:	004108e9 	.word	0x004108e9

004107c0 <task_quintic_stopRecording>:
 * @brief Send the stop command to the IMUs to stop Notif data from them
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_stopRecording(quinticConfiguration_t* qConfig)
{
  4107c0:	b580      	push	{r7, lr}
  4107c2:	b082      	sub	sp, #8
  4107c4:	af00      	add	r7, sp, #0
  4107c6:	6078      	str	r0, [r7, #4]
	//send the stop
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  4107c8:	687b      	ldr	r3, [r7, #4]
  4107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4107cc:	2b00      	cmp	r3, #0
  4107ce:	d011      	beq.n	4107f4 <task_quintic_stopRecording+0x34>
  4107d0:	687b      	ldr	r3, [r7, #4]
  4107d2:	699b      	ldr	r3, [r3, #24]
  4107d4:	2b00      	cmp	r3, #0
  4107d6:	dd0d      	ble.n	4107f4 <task_quintic_stopRecording+0x34>
	{	
		sendString(qConfig->uartDevice, "stop\r\n");
  4107d8:	687b      	ldr	r3, [r7, #4]
  4107da:	695b      	ldr	r3, [r3, #20]
  4107dc:	4618      	mov	r0, r3
  4107de:	4908      	ldr	r1, [pc, #32]	; (410800 <task_quintic_stopRecording+0x40>)
  4107e0:	4b08      	ldr	r3, [pc, #32]	; (410804 <task_quintic_stopRecording+0x44>)
  4107e2:	4798      	blx	r3
		//wait for a bit
		vTaskDelay(2);
  4107e4:	2002      	movs	r0, #2
  4107e6:	4b08      	ldr	r3, [pc, #32]	; (410808 <task_quintic_stopRecording+0x48>)
  4107e8:	4798      	blx	r3
		//flush the Rx buffer, it'll still have crap in it
		drv_uart_flushRx(qConfig->uartDevice);
  4107ea:	687b      	ldr	r3, [r7, #4]
  4107ec:	695b      	ldr	r3, [r3, #20]
  4107ee:	4618      	mov	r0, r3
  4107f0:	4b06      	ldr	r3, [pc, #24]	; (41080c <task_quintic_stopRecording+0x4c>)
  4107f2:	4798      	blx	r3
	}
	return STATUS_PASS;
  4107f4:	2300      	movs	r3, #0
}
  4107f6:	4618      	mov	r0, r3
  4107f8:	3708      	adds	r7, #8
  4107fa:	46bd      	mov	sp, r7
  4107fc:	bd80      	pop	{r7, pc}
  4107fe:	bf00      	nop
  410800:	0041dcc8 	.word	0x0041dcc8
  410804:	004108e9 	.word	0x004108e9
  410808:	0040b24d 	.word	0x0040b24d
  41080c:	0040e6fd 	.word	0x0040e6fd

00410810 <task_quintic_checkRssiLevel>:
 * @brief Send the "rssi" command to check RSSI level of each of the connected IMUs
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_checkRssiLevel(quinticConfiguration_t* qConfig)
{
  410810:	b580      	push	{r7, lr}
  410812:	b082      	sub	sp, #8
  410814:	af00      	add	r7, sp, #0
  410816:	6078      	str	r0, [r7, #4]
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  410818:	687b      	ldr	r3, [r7, #4]
  41081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  41081c:	2b00      	cmp	r3, #0
  41081e:	d009      	beq.n	410834 <task_quintic_checkRssiLevel+0x24>
  410820:	687b      	ldr	r3, [r7, #4]
  410822:	699b      	ldr	r3, [r3, #24]
  410824:	2b00      	cmp	r3, #0
  410826:	dd05      	ble.n	410834 <task_quintic_checkRssiLevel+0x24>
	{	
		//send the rssi check command. 	
		sendString(qConfig->uartDevice, "rssi\r\n");
  410828:	687b      	ldr	r3, [r7, #4]
  41082a:	695b      	ldr	r3, [r3, #20]
  41082c:	4618      	mov	r0, r3
  41082e:	4904      	ldr	r1, [pc, #16]	; (410840 <task_quintic_checkRssiLevel+0x30>)
  410830:	4b04      	ldr	r3, [pc, #16]	; (410844 <task_quintic_checkRssiLevel+0x34>)
  410832:	4798      	blx	r3
	}
	return STATUS_PASS; 
  410834:	2300      	movs	r3, #0
}
  410836:	4618      	mov	r0, r3
  410838:	3708      	adds	r7, #8
  41083a:	46bd      	mov	sp, r7
  41083c:	bd80      	pop	{r7, pc}
  41083e:	bf00      	nop
  410840:	0041dcd0 	.word	0x0041dcd0
  410844:	004108e9 	.word	0x004108e9

00410848 <task_quintic_startGetAccelData>:
 * @brief Send the start command to the IMUs to request acceleration data
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_startGetAccelData(quinticConfiguration_t* qConfig)
{
  410848:	b580      	push	{r7, lr}
  41084a:	b082      	sub	sp, #8
  41084c:	af00      	add	r7, sp, #0
  41084e:	6078      	str	r0, [r7, #4]
	//send the start command. 
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  410850:	687b      	ldr	r3, [r7, #4]
  410852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  410854:	2b00      	cmp	r3, #0
  410856:	d012      	beq.n	41087e <task_quintic_startGetAccelData+0x36>
  410858:	687b      	ldr	r3, [r7, #4]
  41085a:	699b      	ldr	r3, [r3, #24]
  41085c:	2b00      	cmp	r3, #0
  41085e:	dd0e      	ble.n	41087e <task_quintic_startGetAccelData+0x36>
	{	
		sendString(qConfig->uartDevice, "getAccel1\r\n");
  410860:	687b      	ldr	r3, [r7, #4]
  410862:	695b      	ldr	r3, [r3, #20]
  410864:	4618      	mov	r0, r3
  410866:	4908      	ldr	r1, [pc, #32]	; (410888 <task_quintic_startGetAccelData+0x40>)
  410868:	4b08      	ldr	r3, [pc, #32]	; (41088c <task_quintic_startGetAccelData+0x44>)
  41086a:	4798      	blx	r3
		vTaskDelay(100); 
  41086c:	2064      	movs	r0, #100	; 0x64
  41086e:	4b08      	ldr	r3, [pc, #32]	; (410890 <task_quintic_startGetAccelData+0x48>)
  410870:	4798      	blx	r3
		sendString(qConfig->uartDevice, "start\r\n");
  410872:	687b      	ldr	r3, [r7, #4]
  410874:	695b      	ldr	r3, [r3, #20]
  410876:	4618      	mov	r0, r3
  410878:	4906      	ldr	r1, [pc, #24]	; (410894 <task_quintic_startGetAccelData+0x4c>)
  41087a:	4b04      	ldr	r3, [pc, #16]	; (41088c <task_quintic_startGetAccelData+0x44>)
  41087c:	4798      	blx	r3
	}
	return STATUS_PASS; 
  41087e:	2300      	movs	r3, #0
}
  410880:	4618      	mov	r0, r3
  410882:	3708      	adds	r7, #8
  410884:	46bd      	mov	sp, r7
  410886:	bd80      	pop	{r7, pc}
  410888:	0041dcd8 	.word	0x0041dcd8
  41088c:	004108e9 	.word	0x004108e9
  410890:	0040b24d 	.word	0x0040b24d
  410894:	0041dcc0 	.word	0x0041dcc0

00410898 <task_quintic_stopGetAccelData>:
 * @brief Send the start command to the IMUs to request acceleration data
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_stopGetAccelData(quinticConfiguration_t* qConfig)
{
  410898:	b580      	push	{r7, lr}
  41089a:	b082      	sub	sp, #8
  41089c:	af00      	add	r7, sp, #0
  41089e:	6078      	str	r0, [r7, #4]
	//send the start command. 
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  4108a0:	687b      	ldr	r3, [r7, #4]
  4108a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4108a4:	2b00      	cmp	r3, #0
  4108a6:	d012      	beq.n	4108ce <task_quintic_stopGetAccelData+0x36>
  4108a8:	687b      	ldr	r3, [r7, #4]
  4108aa:	699b      	ldr	r3, [r3, #24]
  4108ac:	2b00      	cmp	r3, #0
  4108ae:	dd0e      	ble.n	4108ce <task_quintic_stopGetAccelData+0x36>
	{	
		sendString(qConfig->uartDevice, "getAccel0\r\n");
  4108b0:	687b      	ldr	r3, [r7, #4]
  4108b2:	695b      	ldr	r3, [r3, #20]
  4108b4:	4618      	mov	r0, r3
  4108b6:	4908      	ldr	r1, [pc, #32]	; (4108d8 <task_quintic_stopGetAccelData+0x40>)
  4108b8:	4b08      	ldr	r3, [pc, #32]	; (4108dc <task_quintic_stopGetAccelData+0x44>)
  4108ba:	4798      	blx	r3
		vTaskDelay(100); 
  4108bc:	2064      	movs	r0, #100	; 0x64
  4108be:	4b08      	ldr	r3, [pc, #32]	; (4108e0 <task_quintic_stopGetAccelData+0x48>)
  4108c0:	4798      	blx	r3
		sendString(qConfig->uartDevice, "stop\r\n");
  4108c2:	687b      	ldr	r3, [r7, #4]
  4108c4:	695b      	ldr	r3, [r3, #20]
  4108c6:	4618      	mov	r0, r3
  4108c8:	4906      	ldr	r1, [pc, #24]	; (4108e4 <task_quintic_stopGetAccelData+0x4c>)
  4108ca:	4b04      	ldr	r3, [pc, #16]	; (4108dc <task_quintic_stopGetAccelData+0x44>)
  4108cc:	4798      	blx	r3
	}
	return STATUS_PASS; 
  4108ce:	2300      	movs	r3, #0
}
  4108d0:	4618      	mov	r0, r3
  4108d2:	3708      	adds	r7, #8
  4108d4:	46bd      	mov	sp, r7
  4108d6:	bd80      	pop	{r7, pc}
  4108d8:	0041dce4 	.word	0x0041dce4
  4108dc:	004108e9 	.word	0x004108e9
  4108e0:	0040b24d 	.word	0x0040b24d
  4108e4:	0041dcc8 	.word	0x0041dcc8

004108e8 <sendString>:
 * @brief Send a string to requested serial port
 * @param drv_uart_config_t* uartConfig, char* cmd 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
  4108e8:	b580      	push	{r7, lr}
  4108ea:	b084      	sub	sp, #16
  4108ec:	af00      	add	r7, sp, #0
  4108ee:	6078      	str	r0, [r7, #4]
  4108f0:	6039      	str	r1, [r7, #0]
	int len = strlen(cmd); 
  4108f2:	6838      	ldr	r0, [r7, #0]
  4108f4:	4b0e      	ldr	r3, [pc, #56]	; (410930 <sendString+0x48>)
  4108f6:	4798      	blx	r3
  4108f8:	4603      	mov	r3, r0
  4108fa:	60bb      	str	r3, [r7, #8]
	int i = 0; 
  4108fc:	2300      	movs	r3, #0
  4108fe:	60fb      	str	r3, [r7, #12]
	for(;i<len;)
  410900:	e00d      	b.n	41091e <sendString+0x36>
	{
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
  410902:	68fb      	ldr	r3, [r7, #12]
  410904:	683a      	ldr	r2, [r7, #0]
  410906:	4413      	add	r3, r2
  410908:	781b      	ldrb	r3, [r3, #0]
  41090a:	6878      	ldr	r0, [r7, #4]
  41090c:	4619      	mov	r1, r3
  41090e:	4b09      	ldr	r3, [pc, #36]	; (410934 <sendString+0x4c>)
  410910:	4798      	blx	r3
  410912:	4603      	mov	r3, r0
  410914:	2b00      	cmp	r3, #0
  410916:	d102      	bne.n	41091e <sendString+0x36>
		{
			i++;
  410918:	68fb      	ldr	r3, [r7, #12]
  41091a:	3301      	adds	r3, #1
  41091c:	60fb      	str	r3, [r7, #12]
 ***********************************************************************************************/
static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
	int len = strlen(cmd); 
	int i = 0; 
	for(;i<len;)
  41091e:	68fa      	ldr	r2, [r7, #12]
  410920:	68bb      	ldr	r3, [r7, #8]
  410922:	429a      	cmp	r2, r3
  410924:	dbed      	blt.n	410902 <sendString+0x1a>
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
		{
			i++;
		}
	}
	return STATUS_PASS; 
  410926:	2300      	movs	r3, #0
}
  410928:	4618      	mov	r0, r3
  41092a:	3710      	adds	r7, #16
  41092c:	46bd      	mov	sp, r7
  41092e:	bd80      	pop	{r7, pc}
  410930:	00413725 	.word	0x00413725
  410934:	0040e2f9 	.word	0x0040e2f9

00410938 <getAck>:
 * @brief Look for an acknowledge from a Quintic
 * @param drv_uart_config_t* uartConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
static status_t getAck(drv_uart_config_t* uartConfig)
{
  410938:	b590      	push	{r4, r7, lr}
  41093a:	b0c3      	sub	sp, #268	; 0x10c
  41093c:	af00      	add	r7, sp, #0
  41093e:	1d3b      	adds	r3, r7, #4
  410940:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_FAIL; 
  410942:	2301      	movs	r3, #1
  410944:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; //should move to static buffer for each quintic?
  410948:	f107 0308 	add.w	r3, r7, #8
  41094c:	461a      	mov	r2, r3
  41094e:	23ff      	movs	r3, #255	; 0xff
  410950:	4610      	mov	r0, r2
  410952:	2100      	movs	r1, #0
  410954:	461a      	mov	r2, r3
  410956:	4b13      	ldr	r3, [pc, #76]	; (4109a4 <getAck+0x6c>)
  410958:	4798      	blx	r3
	/*result = drv_uart_getline(uartConfig, buf,CMD_RESPONSE_BUF_SIZE);*/
	result = drv_uart_getlineTimed(uartConfig, buf, CMD_RESPONSE_BUF_SIZE, 1000);
  41095a:	1d3a      	adds	r2, r7, #4
  41095c:	f107 0308 	add.w	r3, r7, #8
  410960:	6810      	ldr	r0, [r2, #0]
  410962:	4619      	mov	r1, r3
  410964:	22ff      	movs	r2, #255	; 0xff
  410966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  41096a:	4c0f      	ldr	r4, [pc, #60]	; (4109a8 <getAck+0x70>)
  41096c:	47a0      	blx	r4
  41096e:	4603      	mov	r3, r0
  410970:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if(result == STATUS_PASS)
  410974:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
  410978:	2b00      	cmp	r3, #0
  41097a:	d10b      	bne.n	410994 <getAck+0x5c>
	{
		if(strcmp(buf,QCMD_QN_ACK) != 0)
  41097c:	f107 0308 	add.w	r3, r7, #8
  410980:	4618      	mov	r0, r3
  410982:	490a      	ldr	r1, [pc, #40]	; (4109ac <getAck+0x74>)
  410984:	4b0a      	ldr	r3, [pc, #40]	; (4109b0 <getAck+0x78>)
  410986:	4798      	blx	r3
  410988:	4603      	mov	r3, r0
  41098a:	2b00      	cmp	r3, #0
  41098c:	d002      	beq.n	410994 <getAck+0x5c>
		{
			result = STATUS_FAIL;
  41098e:	2301      	movs	r3, #1
  410990:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		}
	}
	return result; 
  410994:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
  410998:	4618      	mov	r0, r3
  41099a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
  41099e:	46bd      	mov	sp, r7
  4109a0:	bd90      	pop	{r4, r7, pc}
  4109a2:	bf00      	nop
  4109a4:	0041309d 	.word	0x0041309d
  4109a8:	0040e5b5 	.word	0x0040e5b5
  4109ac:	0041dcf8 	.word	0x0041dcf8
  4109b0:	0041344d 	.word	0x0041344d

004109b4 <getResponse>:
 * @brief Look for a response from a Quintic
 * @param drv_uart_config_t* uartConfig, char* expectedResponse
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
static status_t getResponse(drv_uart_config_t* uartConfig, char* expectedResponse)
{
  4109b4:	b590      	push	{r4, r7, lr}
  4109b6:	b0c3      	sub	sp, #268	; 0x10c
  4109b8:	af00      	add	r7, sp, #0
  4109ba:	1d3b      	adds	r3, r7, #4
  4109bc:	6018      	str	r0, [r3, #0]
  4109be:	463b      	mov	r3, r7
  4109c0:	6019      	str	r1, [r3, #0]
	status_t result = STATUS_FAIL;
  4109c2:	2301      	movs	r3, #1
  4109c4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; //should move to static buffer for each quintic?
  4109c8:	f107 0308 	add.w	r3, r7, #8
  4109cc:	461a      	mov	r2, r3
  4109ce:	23ff      	movs	r3, #255	; 0xff
  4109d0:	4610      	mov	r0, r2
  4109d2:	2100      	movs	r1, #0
  4109d4:	461a      	mov	r2, r3
  4109d6:	4b11      	ldr	r3, [pc, #68]	; (410a1c <getResponse+0x68>)
  4109d8:	4798      	blx	r3
	if(drv_uart_getlineTimed(uartConfig, buf,CMD_RESPONSE_BUF_SIZE, 2000) == STATUS_PASS)
  4109da:	1d3a      	adds	r2, r7, #4
  4109dc:	f107 0308 	add.w	r3, r7, #8
  4109e0:	6810      	ldr	r0, [r2, #0]
  4109e2:	4619      	mov	r1, r3
  4109e4:	22ff      	movs	r2, #255	; 0xff
  4109e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  4109ea:	4c0d      	ldr	r4, [pc, #52]	; (410a20 <getResponse+0x6c>)
  4109ec:	47a0      	blx	r4
  4109ee:	4603      	mov	r3, r0
  4109f0:	2b00      	cmp	r3, #0
  4109f2:	d10c      	bne.n	410a0e <getResponse+0x5a>
	{
		if(strcmp(buf,expectedResponse) == 0)
  4109f4:	f107 0208 	add.w	r2, r7, #8
  4109f8:	463b      	mov	r3, r7
  4109fa:	4610      	mov	r0, r2
  4109fc:	6819      	ldr	r1, [r3, #0]
  4109fe:	4b09      	ldr	r3, [pc, #36]	; (410a24 <getResponse+0x70>)
  410a00:	4798      	blx	r3
  410a02:	4603      	mov	r3, r0
  410a04:	2b00      	cmp	r3, #0
  410a06:	d102      	bne.n	410a0e <getResponse+0x5a>
		{
			result = STATUS_PASS;
  410a08:	2300      	movs	r3, #0
  410a0a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		}
	}
	return result;     
  410a0e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
  410a12:	4618      	mov	r0, r3
  410a14:	f507 7786 	add.w	r7, r7, #268	; 0x10c
  410a18:	46bd      	mov	sp, r7
  410a1a:	bd90      	pop	{r4, r7, pc}
  410a1c:	0041309d 	.word	0x0041309d
  410a20:	0040e5b5 	.word	0x0040e5b5
  410a24:	0041344d 	.word	0x0041344d

00410a28 <scanForImus>:
 * @brief Issue Scan command to Quintics and check the response. If it fails it tries two more times
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
static status_t scanForImus(quinticConfiguration_t* qConfig)
{
  410a28:	b590      	push	{r4, r7, lr}
  410a2a:	b0af      	sub	sp, #188	; 0xbc
  410a2c:	af00      	add	r7, sp, #0
  410a2e:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL; 
  410a30:	2301      	movs	r3, #1
  410a32:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0}; 
  410a36:	f107 020c 	add.w	r2, r7, #12
  410a3a:	2396      	movs	r3, #150	; 0x96
  410a3c:	4610      	mov	r0, r2
  410a3e:	2100      	movs	r1, #0
  410a40:	461a      	mov	r2, r3
  410a42:	4b4f      	ldr	r3, [pc, #316]	; (410b80 <scanForImus+0x158>)
  410a44:	4798      	blx	r3
	int i = 0;	
  410a46:	2300      	movs	r3, #0
  410a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf; 
  410a4c:	f107 030c 	add.w	r3, r7, #12
  410a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int vScanLoopCount = 0;
  410a54:	2300      	movs	r3, #0
  410a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int presentImuCount = 0;
  410a5a:	2300      	movs	r3, #0
  410a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	do
	{
		sendString(qConfig->uartDevice,QCMD_SCAN); //send the scan command
  410a60:	687b      	ldr	r3, [r7, #4]
  410a62:	695b      	ldr	r3, [r3, #20]
  410a64:	4618      	mov	r0, r3
  410a66:	4947      	ldr	r1, [pc, #284]	; (410b84 <scanForImus+0x15c>)
  410a68:	4b47      	ldr	r3, [pc, #284]	; (410b88 <scanForImus+0x160>)
  410a6a:	4798      	blx	r3
		vTaskDelay(1);
  410a6c:	2001      	movs	r0, #1
  410a6e:	4b47      	ldr	r3, [pc, #284]	; (410b8c <scanForImus+0x164>)
  410a70:	4798      	blx	r3
		if(drv_uart_getlineTimed(qConfig->uartDevice, buf, sizeof(buf),16000) == STATUS_PASS)
  410a72:	687b      	ldr	r3, [r7, #4]
  410a74:	695a      	ldr	r2, [r3, #20]
  410a76:	f107 030c 	add.w	r3, r7, #12
  410a7a:	4610      	mov	r0, r2
  410a7c:	4619      	mov	r1, r3
  410a7e:	2296      	movs	r2, #150	; 0x96
  410a80:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
  410a84:	4c42      	ldr	r4, [pc, #264]	; (410b90 <scanForImus+0x168>)
  410a86:	47a0      	blx	r4
  410a88:	4603      	mov	r3, r0
  410a8a:	2b00      	cmp	r3, #0
  410a8c:	d15e      	bne.n	410b4c <scanForImus+0x124>
		{
			debugPrintStringInt(buf, qConfig->qId);
  410a8e:	687b      	ldr	r3, [r7, #4]
  410a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410a92:	f107 020c 	add.w	r2, r7, #12
  410a96:	4610      	mov	r0, r2
  410a98:	4619      	mov	r1, r3
  410a9a:	4b3e      	ldr	r3, [pc, #248]	; (410b94 <scanForImus+0x16c>)
  410a9c:	4798      	blx	r3
			if(strncmp(buf,"ScanResp",8) == 0)
  410a9e:	f107 030c 	add.w	r3, r7, #12
  410aa2:	4618      	mov	r0, r3
  410aa4:	493c      	ldr	r1, [pc, #240]	; (410b98 <scanForImus+0x170>)
  410aa6:	2208      	movs	r2, #8
  410aa8:	4b3c      	ldr	r3, [pc, #240]	; (410b9c <scanForImus+0x174>)
  410aaa:	4798      	blx	r3
  410aac:	4603      	mov	r3, r0
  410aae:	2b00      	cmp	r3, #0
  410ab0:	d152      	bne.n	410b58 <scanForImus+0x130>
			{
				bufPtr = buf + 8; 
  410ab2:	f107 030c 	add.w	r3, r7, #12
  410ab6:	3308      	adds	r3, #8
  410ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				presentImuCount = 0;
  410abc:	2300      	movs	r3, #0
  410abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				for(i=0;i<qConfig->expectedNumberOfNods;i++)
  410ac2:	2300      	movs	r3, #0
  410ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  410ac8:	e030      	b.n	410b2c <scanForImus+0x104>
				{
					if(bufPtr[i] == '1')
  410aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410ace:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
  410ad2:	4413      	add	r3, r2
  410ad4:	781b      	ldrb	r3, [r3, #0]
  410ad6:	2b31      	cmp	r3, #49	; 0x31
  410ad8:	d10c      	bne.n	410af4 <scanForImus+0xcc>
					{
						qConfig->imuArray[i]->imuPresent = 1; 	
  410ada:	687b      	ldr	r3, [r7, #4]
  410adc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410ae4:	2201      	movs	r2, #1
  410ae6:	61da      	str	r2, [r3, #28]
						presentImuCount++;					
  410ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  410aec:	3301      	adds	r3, #1
  410aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  410af2:	e016      	b.n	410b22 <scanForImus+0xfa>
					}
					else
					{
						qConfig->imuArray[i]->imuPresent = 0; 
  410af4:	687b      	ldr	r3, [r7, #4]
  410af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410afe:	2200      	movs	r2, #0
  410b00:	61da      	str	r2, [r3, #28]
						if (i < qConfig->expectedNumberOfNods)
  410b02:	687b      	ldr	r3, [r7, #4]
  410b04:	699a      	ldr	r2, [r3, #24]
  410b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410b0a:	429a      	cmp	r2, r3
  410b0c:	dd09      	ble.n	410b22 <scanForImus+0xfa>
						{
							debugPrintStringInt("Failed on IMU Id\r\n", qConfig->imuArray[i]->imuId);
  410b0e:	687b      	ldr	r3, [r7, #4]
  410b10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410b18:	681b      	ldr	r3, [r3, #0]
  410b1a:	4821      	ldr	r0, [pc, #132]	; (410ba0 <scanForImus+0x178>)
  410b1c:	4619      	mov	r1, r3
  410b1e:	4b1d      	ldr	r3, [pc, #116]	; (410b94 <scanForImus+0x16c>)
  410b20:	4798      	blx	r3
			debugPrintStringInt(buf, qConfig->qId);
			if(strncmp(buf,"ScanResp",8) == 0)
			{
				bufPtr = buf + 8; 
				presentImuCount = 0;
				for(i=0;i<qConfig->expectedNumberOfNods;i++)
  410b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410b26:	3301      	adds	r3, #1
  410b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  410b2c:	687b      	ldr	r3, [r7, #4]
  410b2e:	699a      	ldr	r2, [r3, #24]
  410b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410b34:	429a      	cmp	r2, r3
  410b36:	dcc8      	bgt.n	410aca <scanForImus+0xa2>
						{
							debugPrintStringInt("Failed on IMU Id\r\n", qConfig->imuArray[i]->imuId);
						}
					}			
				}
				if(presentImuCount >= qConfig->expectedNumberOfNods)
  410b38:	687b      	ldr	r3, [r7, #4]
  410b3a:	699a      	ldr	r2, [r3, #24]
  410b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  410b40:	429a      	cmp	r2, r3
  410b42:	dc09      	bgt.n	410b58 <scanForImus+0x130>
				{
					status = STATUS_PASS; 
  410b44:	2300      	movs	r3, #0
  410b46:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					break; 
  410b4a:	e012      	b.n	410b72 <scanForImus+0x14a>
				}
			}
		}
		else
		{
			debugPrintStringInt("No response on scan\r\n", qConfig->qId);
  410b4c:	687b      	ldr	r3, [r7, #4]
  410b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410b50:	4814      	ldr	r0, [pc, #80]	; (410ba4 <scanForImus+0x17c>)
  410b52:	4619      	mov	r1, r3
  410b54:	4b0f      	ldr	r3, [pc, #60]	; (410b94 <scanForImus+0x16c>)
  410b56:	4798      	blx	r3
		}		
		vTaskDelay(10);
  410b58:	200a      	movs	r0, #10
  410b5a:	4b0c      	ldr	r3, [pc, #48]	; (410b8c <scanForImus+0x164>)
  410b5c:	4798      	blx	r3
		vScanLoopCount++;
  410b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  410b62:	3301      	adds	r3, #1
  410b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	}while(vScanLoopCount<=QUINTIC_MAX_SCAN_ATTEMPTS);	
  410b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  410b6c:	2b04      	cmp	r3, #4
  410b6e:	f77f af77 	ble.w	410a60 <scanForImus+0x38>
	return status; 
  410b72:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  410b76:	4618      	mov	r0, r3
  410b78:	37bc      	adds	r7, #188	; 0xbc
  410b7a:	46bd      	mov	sp, r7
  410b7c:	bd90      	pop	{r4, r7, pc}
  410b7e:	bf00      	nop
  410b80:	0041309d 	.word	0x0041309d
  410b84:	0041dd18 	.word	0x0041dd18
  410b88:	004108e9 	.word	0x004108e9
  410b8c:	0040b24d 	.word	0x0040b24d
  410b90:	0040e5b5 	.word	0x0040e5b5
  410b94:	004015c1 	.word	0x004015c1
  410b98:	0041dd20 	.word	0x0041dd20
  410b9c:	004137e9 	.word	0x004137e9
  410ba0:	0041dd2c 	.word	0x0041dd2c
  410ba4:	0041dd40 	.word	0x0041dd40

00410ba8 <connectToImus>:
 * @brief Issue Connect command to Quintics and check the response. If it fails it tries two more times
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
static status_t connectToImus(quinticConfiguration_t* qConfig)
{
  410ba8:	b590      	push	{r4, r7, lr}
  410baa:	b0af      	sub	sp, #188	; 0xbc
  410bac:	af00      	add	r7, sp, #0
  410bae:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  410bb0:	2301      	movs	r3, #1
  410bb2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0};
  410bb6:	f107 0208 	add.w	r2, r7, #8
  410bba:	2396      	movs	r3, #150	; 0x96
  410bbc:	4610      	mov	r0, r2
  410bbe:	2100      	movs	r1, #0
  410bc0:	461a      	mov	r2, r3
  410bc2:	4b5b      	ldr	r3, [pc, #364]	; (410d30 <connectToImus+0x188>)
  410bc4:	4798      	blx	r3
	int i = 0;
  410bc6:	2300      	movs	r3, #0
  410bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf;
  410bcc:	f107 0308 	add.w	r3, r7, #8
  410bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int vConnectionLoopCount = 0;
  410bd4:	2300      	movs	r3, #0
  410bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int connectedImuCount = 0;
  410bda:	2300      	movs	r3, #0
  410bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint32_t startTime = 0; 
  410be0:	2300      	movs	r3, #0
  410be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	while(vConnectionLoopCount < 4)
  410be6:	e098      	b.n	410d1a <connectToImus+0x172>
	{
		//flush the buffer before sending the command. 
		//drv_uart_flushRx(qConfig->uartDevice);
		debugPrintStringInt("sent connect\r\n", qConfig->qId);
  410be8:	687b      	ldr	r3, [r7, #4]
  410bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410bec:	4851      	ldr	r0, [pc, #324]	; (410d34 <connectToImus+0x18c>)
  410bee:	4619      	mov	r1, r3
  410bf0:	4b51      	ldr	r3, [pc, #324]	; (410d38 <connectToImus+0x190>)
  410bf2:	4798      	blx	r3
		sendString(qConfig->uartDevice,QCMD_CONNECT); //send the connect command
  410bf4:	687b      	ldr	r3, [r7, #4]
  410bf6:	695b      	ldr	r3, [r3, #20]
  410bf8:	4618      	mov	r0, r3
  410bfa:	4950      	ldr	r1, [pc, #320]	; (410d3c <connectToImus+0x194>)
  410bfc:	4b50      	ldr	r3, [pc, #320]	; (410d40 <connectToImus+0x198>)
  410bfe:	4798      	blx	r3
		vTaskDelay(1);
  410c00:	2001      	movs	r0, #1
  410c02:	4b50      	ldr	r3, [pc, #320]	; (410d44 <connectToImus+0x19c>)
  410c04:	4798      	blx	r3
		//wait for 16 seconds trying to get the connect response from the quintic. 
		startTime = sgSysTickCount; 
  410c06:	4b50      	ldr	r3, [pc, #320]	; (410d48 <connectToImus+0x1a0>)
  410c08:	681b      	ldr	r3, [r3, #0]
  410c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		while(sgSysTickCount < (startTime + 16000))
  410c0e:	e072      	b.n	410cf6 <connectToImus+0x14e>
		{
			if(drv_uart_getlineTimed(qConfig->uartDevice, buf, sizeof(buf), 4000) == STATUS_PASS)
  410c10:	687b      	ldr	r3, [r7, #4]
  410c12:	695a      	ldr	r2, [r3, #20]
  410c14:	f107 0308 	add.w	r3, r7, #8
  410c18:	4610      	mov	r0, r2
  410c1a:	4619      	mov	r1, r3
  410c1c:	2296      	movs	r2, #150	; 0x96
  410c1e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  410c22:	4c4a      	ldr	r4, [pc, #296]	; (410d4c <connectToImus+0x1a4>)
  410c24:	47a0      	blx	r4
  410c26:	4603      	mov	r3, r0
  410c28:	2b00      	cmp	r3, #0
  410c2a:	d15e      	bne.n	410cea <connectToImus+0x142>
			{
				debugPrintStringInt(buf, qConfig->qId);
  410c2c:	687b      	ldr	r3, [r7, #4]
  410c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410c30:	f107 0208 	add.w	r2, r7, #8
  410c34:	4610      	mov	r0, r2
  410c36:	4619      	mov	r1, r3
  410c38:	4b3f      	ldr	r3, [pc, #252]	; (410d38 <connectToImus+0x190>)
  410c3a:	4798      	blx	r3
				if(strncmp(buf,"ConnResp",8) == 0)
  410c3c:	f107 0308 	add.w	r3, r7, #8
  410c40:	4618      	mov	r0, r3
  410c42:	4943      	ldr	r1, [pc, #268]	; (410d50 <connectToImus+0x1a8>)
  410c44:	2208      	movs	r2, #8
  410c46:	4b43      	ldr	r3, [pc, #268]	; (410d54 <connectToImus+0x1ac>)
  410c48:	4798      	blx	r3
  410c4a:	4603      	mov	r3, r0
  410c4c:	2b00      	cmp	r3, #0
  410c4e:	d152      	bne.n	410cf6 <connectToImus+0x14e>
				{
					bufPtr = buf + 8;
  410c50:	f107 0308 	add.w	r3, r7, #8
  410c54:	3308      	adds	r3, #8
  410c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					connectedImuCount = 0;
  410c5a:	2300      	movs	r3, #0
  410c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					for(i=0;i<qConfig->expectedNumberOfNods;i++)
  410c60:	2300      	movs	r3, #0
  410c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  410c66:	e030      	b.n	410cca <connectToImus+0x122>
					{
						if(bufPtr[i] == '1')
  410c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410c6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
  410c70:	4413      	add	r3, r2
  410c72:	781b      	ldrb	r3, [r3, #0]
  410c74:	2b31      	cmp	r3, #49	; 0x31
  410c76:	d10c      	bne.n	410c92 <connectToImus+0xea>
						{
							qConfig->imuArray[i]->imuConnected = 1;
  410c78:	687b      	ldr	r3, [r7, #4]
  410c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410c82:	2201      	movs	r2, #1
  410c84:	621a      	str	r2, [r3, #32]
							connectedImuCount++;
  410c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  410c8a:	3301      	adds	r3, #1
  410c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  410c90:	e016      	b.n	410cc0 <connectToImus+0x118>
						}
						else
						{
							qConfig->imuArray[i]->imuConnected = 0;
  410c92:	687b      	ldr	r3, [r7, #4]
  410c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410c9c:	2200      	movs	r2, #0
  410c9e:	621a      	str	r2, [r3, #32]
							if (i < qConfig->expectedNumberOfNods)
  410ca0:	687b      	ldr	r3, [r7, #4]
  410ca2:	699a      	ldr	r2, [r3, #24]
  410ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410ca8:	429a      	cmp	r2, r3
  410caa:	dd09      	ble.n	410cc0 <connectToImus+0x118>
							{
								debugPrintStringInt("Failed on IMU Id\r\n", qConfig->imuArray[i]->imuId);
  410cac:	687b      	ldr	r3, [r7, #4]
  410cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  410cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  410cb6:	681b      	ldr	r3, [r3, #0]
  410cb8:	4827      	ldr	r0, [pc, #156]	; (410d58 <connectToImus+0x1b0>)
  410cba:	4619      	mov	r1, r3
  410cbc:	4b1e      	ldr	r3, [pc, #120]	; (410d38 <connectToImus+0x190>)
  410cbe:	4798      	blx	r3
				debugPrintStringInt(buf, qConfig->qId);
				if(strncmp(buf,"ConnResp",8) == 0)
				{
					bufPtr = buf + 8;
					connectedImuCount = 0;
					for(i=0;i<qConfig->expectedNumberOfNods;i++)
  410cc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410cc4:	3301      	adds	r3, #1
  410cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  410cca:	687b      	ldr	r3, [r7, #4]
  410ccc:	699a      	ldr	r2, [r3, #24]
  410cce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  410cd2:	429a      	cmp	r2, r3
  410cd4:	dcc8      	bgt.n	410c68 <connectToImus+0xc0>
							{
								debugPrintStringInt("Failed on IMU Id\r\n", qConfig->imuArray[i]->imuId);
							}
						}
					}
					if(connectedImuCount >= qConfig->expectedNumberOfNods)
  410cd6:	687b      	ldr	r3, [r7, #4]
  410cd8:	699a      	ldr	r2, [r3, #24]
  410cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  410cde:	429a      	cmp	r2, r3
  410ce0:	dc09      	bgt.n	410cf6 <connectToImus+0x14e>
					{
						status = STATUS_PASS;
  410ce2:	2300      	movs	r3, #0
  410ce4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
						break;
  410ce8:	e00d      	b.n	410d06 <connectToImus+0x15e>
					}
				}			
			}
			else
			{
				debugPrintStringInt("No response on connect\r\n", qConfig->qId);
  410cea:	687b      	ldr	r3, [r7, #4]
  410cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  410cee:	481b      	ldr	r0, [pc, #108]	; (410d5c <connectToImus+0x1b4>)
  410cf0:	4619      	mov	r1, r3
  410cf2:	4b11      	ldr	r3, [pc, #68]	; (410d38 <connectToImus+0x190>)
  410cf4:	4798      	blx	r3
		debugPrintStringInt("sent connect\r\n", qConfig->qId);
		sendString(qConfig->uartDevice,QCMD_CONNECT); //send the connect command
		vTaskDelay(1);
		//wait for 16 seconds trying to get the connect response from the quintic. 
		startTime = sgSysTickCount; 
		while(sgSysTickCount < (startTime + 16000))
  410cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  410cfa:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
  410cfe:	4b12      	ldr	r3, [pc, #72]	; (410d48 <connectToImus+0x1a0>)
  410d00:	681b      	ldr	r3, [r3, #0]
  410d02:	429a      	cmp	r2, r3
  410d04:	d884      	bhi.n	410c10 <connectToImus+0x68>
			else
			{
				debugPrintStringInt("No response on connect\r\n", qConfig->qId);
			}			
		}
		if(status == STATUS_PASS)
  410d06:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
  410d0a:	2b00      	cmp	r3, #0
  410d0c:	d100      	bne.n	410d10 <connectToImus+0x168>
		{
			break;
  410d0e:	e009      	b.n	410d24 <connectToImus+0x17c>
		}
		vConnectionLoopCount++;
  410d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  410d14:	3301      	adds	r3, #1
  410d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char* bufPtr = buf;
	int vConnectionLoopCount = 0;
	int connectedImuCount = 0;
	uint32_t startTime = 0; 

	while(vConnectionLoopCount < 4)
  410d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  410d1e:	2b03      	cmp	r3, #3
  410d20:	f77f af62 	ble.w	410be8 <connectToImus+0x40>
		{
			break;
		}
		vConnectionLoopCount++;
	}
	return status;
  410d24:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  410d28:	4618      	mov	r0, r3
  410d2a:	37bc      	adds	r7, #188	; 0xbc
  410d2c:	46bd      	mov	sp, r7
  410d2e:	bd90      	pop	{r4, r7, pc}
  410d30:	0041309d 	.word	0x0041309d
  410d34:	0041dd58 	.word	0x0041dd58
  410d38:	004015c1 	.word	0x004015c1
  410d3c:	0041db78 	.word	0x0041db78
  410d40:	004108e9 	.word	0x004108e9
  410d44:	0040b24d 	.word	0x0040b24d
  410d48:	200039dc 	.word	0x200039dc
  410d4c:	0040e5b5 	.word	0x0040e5b5
  410d50:	0041db84 	.word	0x0041db84
  410d54:	004137e9 	.word	0x004137e9
  410d58:	0041dd2c 	.word	0x0041dd2c
  410d5c:	0041dd68 	.word	0x0041dd68

00410d60 <DisconnectImus>:
 * @brief Issue begin command to Quintics to disconnect and power cycle them
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
void DisconnectImus(quinticConfiguration_t* qConfig)
{
  410d60:	b580      	push	{r7, lr}
  410d62:	b082      	sub	sp, #8
  410d64:	af00      	add	r7, sp, #0
  410d66:	6078      	str	r0, [r7, #4]
	if ((qConfig->isinit) && (qConfig->expectedNumberOfNods > 0))
  410d68:	687b      	ldr	r3, [r7, #4]
  410d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  410d6c:	2b00      	cmp	r3, #0
  410d6e:	d022      	beq.n	410db6 <DisconnectImus+0x56>
  410d70:	687b      	ldr	r3, [r7, #4]
  410d72:	699b      	ldr	r3, [r3, #24]
  410d74:	2b00      	cmp	r3, #0
  410d76:	dd1e      	ble.n	410db6 <DisconnectImus+0x56>
	{
		sendString(qConfig->uartDevice,QCMD_BEGIN);
  410d78:	687b      	ldr	r3, [r7, #4]
  410d7a:	695b      	ldr	r3, [r3, #20]
  410d7c:	4618      	mov	r0, r3
  410d7e:	490f      	ldr	r1, [pc, #60]	; (410dbc <DisconnectImus+0x5c>)
  410d80:	4b0f      	ldr	r3, [pc, #60]	; (410dc0 <DisconnectImus+0x60>)
  410d82:	4798      	blx	r3
		vTaskDelay(100);
  410d84:	2064      	movs	r0, #100	; 0x64
  410d86:	4b0f      	ldr	r3, [pc, #60]	; (410dc4 <DisconnectImus+0x64>)
  410d88:	4798      	blx	r3
		getAck(qConfig->uartDevice);
  410d8a:	687b      	ldr	r3, [r7, #4]
  410d8c:	695b      	ldr	r3, [r3, #20]
  410d8e:	4618      	mov	r0, r3
  410d90:	4b0d      	ldr	r3, [pc, #52]	; (410dc8 <DisconnectImus+0x68>)
  410d92:	4798      	blx	r3
		drv_gpio_setPinState(qConfig->resetPin, DRV_GPIO_PIN_STATE_LOW);
  410d94:	687b      	ldr	r3, [r7, #4]
  410d96:	f893 3020 	ldrb.w	r3, [r3, #32]
  410d9a:	4618      	mov	r0, r3
  410d9c:	2100      	movs	r1, #0
  410d9e:	4b0b      	ldr	r3, [pc, #44]	; (410dcc <DisconnectImus+0x6c>)
  410da0:	4798      	blx	r3
		vTaskDelay(100);
  410da2:	2064      	movs	r0, #100	; 0x64
  410da4:	4b07      	ldr	r3, [pc, #28]	; (410dc4 <DisconnectImus+0x64>)
  410da6:	4798      	blx	r3
		drv_gpio_setPinState(qConfig->resetPin, DRV_GPIO_PIN_STATE_HIGH);
  410da8:	687b      	ldr	r3, [r7, #4]
  410daa:	f893 3020 	ldrb.w	r3, [r3, #32]
  410dae:	4618      	mov	r0, r3
  410db0:	2101      	movs	r1, #1
  410db2:	4b06      	ldr	r3, [pc, #24]	; (410dcc <DisconnectImus+0x6c>)
  410db4:	4798      	blx	r3
	}
}
  410db6:	3708      	adds	r7, #8
  410db8:	46bd      	mov	sp, r7
  410dba:	bd80      	pop	{r7, pc}
  410dbc:	0041dbf8 	.word	0x0041dbf8
  410dc0:	004108e9 	.word	0x004108e9
  410dc4:	0040b24d 	.word	0x0040b24d
  410dc8:	00410939 	.word	0x00410939
  410dcc:	0040d7b5 	.word	0x0040d7b5

00410dd0 <getIndex>:

static int getIndex(char c)
{
  410dd0:	b480      	push	{r7}
  410dd2:	b085      	sub	sp, #20
  410dd4:	af00      	add	r7, sp, #0
  410dd6:	4603      	mov	r3, r0
  410dd8:	71fb      	strb	r3, [r7, #7]
	int index = -1; 
  410dda:	f04f 33ff 	mov.w	r3, #4294967295
  410dde:	60fb      	str	r3, [r7, #12]
	switch(c)
  410de0:	79fb      	ldrb	r3, [r7, #7]
  410de2:	3b30      	subs	r3, #48	; 0x30
  410de4:	2b04      	cmp	r3, #4
  410de6:	d81c      	bhi.n	410e22 <getIndex+0x52>
  410de8:	a201      	add	r2, pc, #4	; (adr r2, 410df0 <getIndex+0x20>)
  410dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  410dee:	bf00      	nop
  410df0:	00410e05 	.word	0x00410e05
  410df4:	00410e0b 	.word	0x00410e0b
  410df8:	00410e11 	.word	0x00410e11
  410dfc:	00410e17 	.word	0x00410e17
  410e00:	00410e1d 	.word	0x00410e1d
	{
		case '0':
		index = 0;
  410e04:	2300      	movs	r3, #0
  410e06:	60fb      	str	r3, [r7, #12]
		break;
  410e08:	e00f      	b.n	410e2a <getIndex+0x5a>
		case '1':
		index = 1;
  410e0a:	2301      	movs	r3, #1
  410e0c:	60fb      	str	r3, [r7, #12]
		break;
  410e0e:	e00c      	b.n	410e2a <getIndex+0x5a>
		case '2':
		index = 2;
  410e10:	2302      	movs	r3, #2
  410e12:	60fb      	str	r3, [r7, #12]
		break;
  410e14:	e009      	b.n	410e2a <getIndex+0x5a>
		case '3':
		index = 3;
  410e16:	2303      	movs	r3, #3
  410e18:	60fb      	str	r3, [r7, #12]
		break;
  410e1a:	e006      	b.n	410e2a <getIndex+0x5a>
		case '4':
		index = 4;
  410e1c:	2304      	movs	r3, #4
  410e1e:	60fb      	str	r3, [r7, #12]
		break;
  410e20:	e003      	b.n	410e2a <getIndex+0x5a>
		default:
		index = -1;
  410e22:	f04f 33ff 	mov.w	r3, #4294967295
  410e26:	60fb      	str	r3, [r7, #12]
		break;
  410e28:	bf00      	nop
	}
	return index; 
  410e2a:	68fb      	ldr	r3, [r7, #12]
  410e2c:	4618      	mov	r0, r3
  410e2e:	3714      	adds	r7, #20
  410e30:	46bd      	mov	sp, r7
  410e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  410e36:	4770      	bx	lr

00410e38 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  410e38:	b580      	push	{r7, lr}
  410e3a:	b082      	sub	sp, #8
  410e3c:	af00      	add	r7, sp, #0
  410e3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  410e40:	687b      	ldr	r3, [r7, #4]
  410e42:	2b07      	cmp	r3, #7
  410e44:	d830      	bhi.n	410ea8 <osc_enable+0x70>
  410e46:	a201      	add	r2, pc, #4	; (adr r2, 410e4c <osc_enable+0x14>)
  410e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  410e4c:	00410ea9 	.word	0x00410ea9
  410e50:	00410e6d 	.word	0x00410e6d
  410e54:	00410e75 	.word	0x00410e75
  410e58:	00410e7d 	.word	0x00410e7d
  410e5c:	00410e85 	.word	0x00410e85
  410e60:	00410e8d 	.word	0x00410e8d
  410e64:	00410e95 	.word	0x00410e95
  410e68:	00410e9f 	.word	0x00410e9f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  410e6c:	2000      	movs	r0, #0
  410e6e:	4b10      	ldr	r3, [pc, #64]	; (410eb0 <osc_enable+0x78>)
  410e70:	4798      	blx	r3
		break;
  410e72:	e019      	b.n	410ea8 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  410e74:	2001      	movs	r0, #1
  410e76:	4b0e      	ldr	r3, [pc, #56]	; (410eb0 <osc_enable+0x78>)
  410e78:	4798      	blx	r3
		break;
  410e7a:	e015      	b.n	410ea8 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  410e7c:	2000      	movs	r0, #0
  410e7e:	4b0d      	ldr	r3, [pc, #52]	; (410eb4 <osc_enable+0x7c>)
  410e80:	4798      	blx	r3
		break;
  410e82:	e011      	b.n	410ea8 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  410e84:	2010      	movs	r0, #16
  410e86:	4b0b      	ldr	r3, [pc, #44]	; (410eb4 <osc_enable+0x7c>)
  410e88:	4798      	blx	r3
		break;
  410e8a:	e00d      	b.n	410ea8 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  410e8c:	2020      	movs	r0, #32
  410e8e:	4b09      	ldr	r3, [pc, #36]	; (410eb4 <osc_enable+0x7c>)
  410e90:	4798      	blx	r3
		break;
  410e92:	e009      	b.n	410ea8 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  410e94:	2000      	movs	r0, #0
  410e96:	213e      	movs	r1, #62	; 0x3e
  410e98:	4b07      	ldr	r3, [pc, #28]	; (410eb8 <osc_enable+0x80>)
  410e9a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  410e9c:	e004      	b.n	410ea8 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  410e9e:	2001      	movs	r0, #1
  410ea0:	213e      	movs	r1, #62	; 0x3e
  410ea2:	4b05      	ldr	r3, [pc, #20]	; (410eb8 <osc_enable+0x80>)
  410ea4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  410ea6:	bf00      	nop
	}
}
  410ea8:	3708      	adds	r7, #8
  410eaa:	46bd      	mov	sp, r7
  410eac:	bd80      	pop	{r7, pc}
  410eae:	bf00      	nop
  410eb0:	00411b35 	.word	0x00411b35
  410eb4:	00411ba1 	.word	0x00411ba1
  410eb8:	00411c11 	.word	0x00411c11

00410ebc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  410ebc:	b580      	push	{r7, lr}
  410ebe:	b082      	sub	sp, #8
  410ec0:	af00      	add	r7, sp, #0
  410ec2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  410ec4:	687b      	ldr	r3, [r7, #4]
  410ec6:	2b07      	cmp	r3, #7
  410ec8:	d826      	bhi.n	410f18 <osc_is_ready+0x5c>
  410eca:	a201      	add	r2, pc, #4	; (adr r2, 410ed0 <osc_is_ready+0x14>)
  410ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  410ed0:	00410ef1 	.word	0x00410ef1
  410ed4:	00410ef5 	.word	0x00410ef5
  410ed8:	00410ef5 	.word	0x00410ef5
  410edc:	00410f07 	.word	0x00410f07
  410ee0:	00410f07 	.word	0x00410f07
  410ee4:	00410f07 	.word	0x00410f07
  410ee8:	00410f07 	.word	0x00410f07
  410eec:	00410f07 	.word	0x00410f07
	case OSC_SLCK_32K_RC:
		return 1;
  410ef0:	2301      	movs	r3, #1
  410ef2:	e012      	b.n	410f1a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  410ef4:	4b0b      	ldr	r3, [pc, #44]	; (410f24 <osc_is_ready+0x68>)
  410ef6:	4798      	blx	r3
  410ef8:	4603      	mov	r3, r0
  410efa:	2b00      	cmp	r3, #0
  410efc:	bf0c      	ite	eq
  410efe:	2300      	moveq	r3, #0
  410f00:	2301      	movne	r3, #1
  410f02:	b2db      	uxtb	r3, r3
  410f04:	e009      	b.n	410f1a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  410f06:	4b08      	ldr	r3, [pc, #32]	; (410f28 <osc_is_ready+0x6c>)
  410f08:	4798      	blx	r3
  410f0a:	4603      	mov	r3, r0
  410f0c:	2b00      	cmp	r3, #0
  410f0e:	bf0c      	ite	eq
  410f10:	2300      	moveq	r3, #0
  410f12:	2301      	movne	r3, #1
  410f14:	b2db      	uxtb	r3, r3
  410f16:	e000      	b.n	410f1a <osc_is_ready+0x5e>
	}

	return 0;
  410f18:	2300      	movs	r3, #0
}
  410f1a:	4618      	mov	r0, r3
  410f1c:	3708      	adds	r7, #8
  410f1e:	46bd      	mov	sp, r7
  410f20:	bd80      	pop	{r7, pc}
  410f22:	bf00      	nop
  410f24:	00411b6d 	.word	0x00411b6d
  410f28:	00411c89 	.word	0x00411c89

00410f2c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  410f2c:	b480      	push	{r7}
  410f2e:	b083      	sub	sp, #12
  410f30:	af00      	add	r7, sp, #0
  410f32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  410f34:	687b      	ldr	r3, [r7, #4]
  410f36:	2b07      	cmp	r3, #7
  410f38:	d825      	bhi.n	410f86 <osc_get_rate+0x5a>
  410f3a:	a201      	add	r2, pc, #4	; (adr r2, 410f40 <osc_get_rate+0x14>)
  410f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  410f40:	00410f61 	.word	0x00410f61
  410f44:	00410f67 	.word	0x00410f67
  410f48:	00410f6d 	.word	0x00410f6d
  410f4c:	00410f73 	.word	0x00410f73
  410f50:	00410f77 	.word	0x00410f77
  410f54:	00410f7b 	.word	0x00410f7b
  410f58:	00410f7f 	.word	0x00410f7f
  410f5c:	00410f83 	.word	0x00410f83
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  410f60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  410f64:	e010      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  410f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  410f6a:	e00d      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  410f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  410f70:	e00a      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  410f72:	4b08      	ldr	r3, [pc, #32]	; (410f94 <osc_get_rate+0x68>)
  410f74:	e008      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  410f76:	4b08      	ldr	r3, [pc, #32]	; (410f98 <osc_get_rate+0x6c>)
  410f78:	e006      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  410f7a:	4b08      	ldr	r3, [pc, #32]	; (410f9c <osc_get_rate+0x70>)
  410f7c:	e004      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  410f7e:	4b08      	ldr	r3, [pc, #32]	; (410fa0 <osc_get_rate+0x74>)
  410f80:	e002      	b.n	410f88 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  410f82:	4b07      	ldr	r3, [pc, #28]	; (410fa0 <osc_get_rate+0x74>)
  410f84:	e000      	b.n	410f88 <osc_get_rate+0x5c>
	}

	return 0;
  410f86:	2300      	movs	r3, #0
}
  410f88:	4618      	mov	r0, r3
  410f8a:	370c      	adds	r7, #12
  410f8c:	46bd      	mov	sp, r7
  410f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  410f92:	4770      	bx	lr
  410f94:	003d0900 	.word	0x003d0900
  410f98:	007a1200 	.word	0x007a1200
  410f9c:	00b71b00 	.word	0x00b71b00
  410fa0:	00f42400 	.word	0x00f42400

00410fa4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  410fa4:	b580      	push	{r7, lr}
  410fa6:	b082      	sub	sp, #8
  410fa8:	af00      	add	r7, sp, #0
  410faa:	4603      	mov	r3, r0
  410fac:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  410fae:	bf00      	nop
  410fb0:	79fb      	ldrb	r3, [r7, #7]
  410fb2:	4618      	mov	r0, r3
  410fb4:	4b05      	ldr	r3, [pc, #20]	; (410fcc <osc_wait_ready+0x28>)
  410fb6:	4798      	blx	r3
  410fb8:	4603      	mov	r3, r0
  410fba:	f083 0301 	eor.w	r3, r3, #1
  410fbe:	b2db      	uxtb	r3, r3
  410fc0:	2b00      	cmp	r3, #0
  410fc2:	d1f5      	bne.n	410fb0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  410fc4:	3708      	adds	r7, #8
  410fc6:	46bd      	mov	sp, r7
  410fc8:	bd80      	pop	{r7, pc}
  410fca:	bf00      	nop
  410fcc:	00410ebd 	.word	0x00410ebd

00410fd0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  410fd0:	b580      	push	{r7, lr}
  410fd2:	b086      	sub	sp, #24
  410fd4:	af00      	add	r7, sp, #0
  410fd6:	60f8      	str	r0, [r7, #12]
  410fd8:	607a      	str	r2, [r7, #4]
  410fda:	603b      	str	r3, [r7, #0]
  410fdc:	460b      	mov	r3, r1
  410fde:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  410fe0:	7afb      	ldrb	r3, [r7, #11]
  410fe2:	4618      	mov	r0, r3
  410fe4:	4b0d      	ldr	r3, [pc, #52]	; (41101c <pll_config_init+0x4c>)
  410fe6:	4798      	blx	r3
  410fe8:	4602      	mov	r2, r0
  410fea:	687b      	ldr	r3, [r7, #4]
  410fec:	fbb2 f3f3 	udiv	r3, r2, r3
  410ff0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  410ff2:	697b      	ldr	r3, [r7, #20]
  410ff4:	683a      	ldr	r2, [r7, #0]
  410ff6:	fb02 f303 	mul.w	r3, r2, r3
  410ffa:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  410ffc:	683b      	ldr	r3, [r7, #0]
  410ffe:	3b01      	subs	r3, #1
  411000:	041a      	lsls	r2, r3, #16
  411002:	4b07      	ldr	r3, [pc, #28]	; (411020 <pll_config_init+0x50>)
  411004:	4013      	ands	r3, r2
  411006:	687a      	ldr	r2, [r7, #4]
  411008:	b2d2      	uxtb	r2, r2
  41100a:	4313      	orrs	r3, r2
  41100c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  411010:	68fb      	ldr	r3, [r7, #12]
  411012:	601a      	str	r2, [r3, #0]
}
  411014:	3718      	adds	r7, #24
  411016:	46bd      	mov	sp, r7
  411018:	bd80      	pop	{r7, pc}
  41101a:	bf00      	nop
  41101c:	00410f2d 	.word	0x00410f2d
  411020:	07ff0000 	.word	0x07ff0000

00411024 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  411024:	b580      	push	{r7, lr}
  411026:	b082      	sub	sp, #8
  411028:	af00      	add	r7, sp, #0
  41102a:	6078      	str	r0, [r7, #4]
  41102c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  41102e:	683b      	ldr	r3, [r7, #0]
  411030:	2b00      	cmp	r3, #0
  411032:	d108      	bne.n	411046 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  411034:	4b08      	ldr	r3, [pc, #32]	; (411058 <pll_enable+0x34>)
  411036:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  411038:	4b08      	ldr	r3, [pc, #32]	; (41105c <pll_enable+0x38>)
  41103a:	687a      	ldr	r2, [r7, #4]
  41103c:	6812      	ldr	r2, [r2, #0]
  41103e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  411042:	629a      	str	r2, [r3, #40]	; 0x28
  411044:	e005      	b.n	411052 <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  411046:	4b06      	ldr	r3, [pc, #24]	; (411060 <pll_enable+0x3c>)
  411048:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  41104a:	4b04      	ldr	r3, [pc, #16]	; (41105c <pll_enable+0x38>)
  41104c:	687a      	ldr	r2, [r7, #4]
  41104e:	6812      	ldr	r2, [r2, #0]
  411050:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  411052:	3708      	adds	r7, #8
  411054:	46bd      	mov	sp, r7
  411056:	bd80      	pop	{r7, pc}
  411058:	00411ca5 	.word	0x00411ca5
  41105c:	400e0400 	.word	0x400e0400
  411060:	00411cd9 	.word	0x00411cd9

00411064 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  411064:	b580      	push	{r7, lr}
  411066:	b082      	sub	sp, #8
  411068:	af00      	add	r7, sp, #0
  41106a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  41106c:	687b      	ldr	r3, [r7, #4]
  41106e:	2b00      	cmp	r3, #0
  411070:	d103      	bne.n	41107a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  411072:	4b05      	ldr	r3, [pc, #20]	; (411088 <pll_is_locked+0x24>)
  411074:	4798      	blx	r3
  411076:	4603      	mov	r3, r0
  411078:	e002      	b.n	411080 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  41107a:	4b04      	ldr	r3, [pc, #16]	; (41108c <pll_is_locked+0x28>)
  41107c:	4798      	blx	r3
  41107e:	4603      	mov	r3, r0
	}
}
  411080:	4618      	mov	r0, r3
  411082:	3708      	adds	r7, #8
  411084:	46bd      	mov	sp, r7
  411086:	bd80      	pop	{r7, pc}
  411088:	00411cbd 	.word	0x00411cbd
  41108c:	00411cf1 	.word	0x00411cf1

00411090 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  411090:	b580      	push	{r7, lr}
  411092:	b082      	sub	sp, #8
  411094:	af00      	add	r7, sp, #0
  411096:	4603      	mov	r3, r0
  411098:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  41109a:	79fb      	ldrb	r3, [r7, #7]
  41109c:	3b03      	subs	r3, #3
  41109e:	2b04      	cmp	r3, #4
  4110a0:	d808      	bhi.n	4110b4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4110a2:	79fb      	ldrb	r3, [r7, #7]
  4110a4:	4618      	mov	r0, r3
  4110a6:	4b05      	ldr	r3, [pc, #20]	; (4110bc <pll_enable_source+0x2c>)
  4110a8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4110aa:	79fb      	ldrb	r3, [r7, #7]
  4110ac:	4618      	mov	r0, r3
  4110ae:	4b04      	ldr	r3, [pc, #16]	; (4110c0 <pll_enable_source+0x30>)
  4110b0:	4798      	blx	r3
		break;
  4110b2:	e000      	b.n	4110b6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4110b4:	bf00      	nop
	}
}
  4110b6:	3708      	adds	r7, #8
  4110b8:	46bd      	mov	sp, r7
  4110ba:	bd80      	pop	{r7, pc}
  4110bc:	00410e39 	.word	0x00410e39
  4110c0:	00410fa5 	.word	0x00410fa5

004110c4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4110c4:	b580      	push	{r7, lr}
  4110c6:	b082      	sub	sp, #8
  4110c8:	af00      	add	r7, sp, #0
  4110ca:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4110cc:	bf00      	nop
  4110ce:	6878      	ldr	r0, [r7, #4]
  4110d0:	4b04      	ldr	r3, [pc, #16]	; (4110e4 <pll_wait_for_lock+0x20>)
  4110d2:	4798      	blx	r3
  4110d4:	4603      	mov	r3, r0
  4110d6:	2b00      	cmp	r3, #0
  4110d8:	d0f9      	beq.n	4110ce <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4110da:	2300      	movs	r3, #0
}
  4110dc:	4618      	mov	r0, r3
  4110de:	3708      	adds	r7, #8
  4110e0:	46bd      	mov	sp, r7
  4110e2:	bd80      	pop	{r7, pc}
  4110e4:	00411065 	.word	0x00411065

004110e8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4110e8:	b580      	push	{r7, lr}
  4110ea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4110ec:	2006      	movs	r0, #6
  4110ee:	4b04      	ldr	r3, [pc, #16]	; (411100 <sysclk_get_main_hz+0x18>)
  4110f0:	4798      	blx	r3
  4110f2:	4602      	mov	r2, r0
  4110f4:	4613      	mov	r3, r2
  4110f6:	011b      	lsls	r3, r3, #4
  4110f8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4110fa:	4618      	mov	r0, r3
  4110fc:	bd80      	pop	{r7, pc}
  4110fe:	bf00      	nop
  411100:	00410f2d 	.word	0x00410f2d

00411104 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  411104:	b580      	push	{r7, lr}
  411106:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  411108:	4b02      	ldr	r3, [pc, #8]	; (411114 <sysclk_get_cpu_hz+0x10>)
  41110a:	4798      	blx	r3
  41110c:	4603      	mov	r3, r0
  41110e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  411110:	4618      	mov	r0, r3
  411112:	bd80      	pop	{r7, pc}
  411114:	004110e9 	.word	0x004110e9

00411118 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  411118:	b590      	push	{r4, r7, lr}
  41111a:	b083      	sub	sp, #12
  41111c:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  41111e:	4811      	ldr	r0, [pc, #68]	; (411164 <sysclk_init+0x4c>)
  411120:	4b11      	ldr	r3, [pc, #68]	; (411168 <sysclk_init+0x50>)
  411122:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  411124:	2006      	movs	r0, #6
  411126:	4b11      	ldr	r3, [pc, #68]	; (41116c <sysclk_init+0x54>)
  411128:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  41112a:	1d3b      	adds	r3, r7, #4
  41112c:	4618      	mov	r0, r3
  41112e:	2106      	movs	r1, #6
  411130:	2201      	movs	r2, #1
  411132:	230f      	movs	r3, #15
  411134:	4c0e      	ldr	r4, [pc, #56]	; (411170 <sysclk_init+0x58>)
  411136:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  411138:	1d3b      	adds	r3, r7, #4
  41113a:	4618      	mov	r0, r3
  41113c:	2100      	movs	r1, #0
  41113e:	4b0d      	ldr	r3, [pc, #52]	; (411174 <sysclk_init+0x5c>)
  411140:	4798      	blx	r3
		pll_wait_for_lock(0);
  411142:	2000      	movs	r0, #0
  411144:	4b0c      	ldr	r3, [pc, #48]	; (411178 <sysclk_init+0x60>)
  411146:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  411148:	2010      	movs	r0, #16
  41114a:	4b0c      	ldr	r3, [pc, #48]	; (41117c <sysclk_init+0x64>)
  41114c:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  41114e:	4b0c      	ldr	r3, [pc, #48]	; (411180 <sysclk_init+0x68>)
  411150:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  411152:	4b0c      	ldr	r3, [pc, #48]	; (411184 <sysclk_init+0x6c>)
  411154:	4798      	blx	r3
  411156:	4603      	mov	r3, r0
  411158:	4618      	mov	r0, r3
  41115a:	4b03      	ldr	r3, [pc, #12]	; (411168 <sysclk_init+0x50>)
  41115c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  41115e:	370c      	adds	r7, #12
  411160:	46bd      	mov	sp, r7
  411162:	bd90      	pop	{r4, r7, pc}
  411164:	07270e00 	.word	0x07270e00
  411168:	004120c5 	.word	0x004120c5
  41116c:	00411091 	.word	0x00411091
  411170:	00410fd1 	.word	0x00410fd1
  411174:	00411025 	.word	0x00411025
  411178:	004110c5 	.word	0x004110c5
  41117c:	00411ab1 	.word	0x00411ab1
  411180:	00411f29 	.word	0x00411f29
  411184:	00411105 	.word	0x00411105

00411188 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  411188:	b580      	push	{r7, lr}
  41118a:	b082      	sub	sp, #8
  41118c:	af00      	add	r7, sp, #0
  41118e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  411190:	6878      	ldr	r0, [r7, #4]
  411192:	4b02      	ldr	r3, [pc, #8]	; (41119c <sysclk_enable_peripheral_clock+0x14>)
  411194:	4798      	blx	r3
}
  411196:	3708      	adds	r7, #8
  411198:	46bd      	mov	sp, r7
  41119a:	bd80      	pop	{r7, pc}
  41119c:	00411d0d 	.word	0x00411d0d

004111a0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4111a0:	b580      	push	{r7, lr}
  4111a2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4111a4:	200b      	movs	r0, #11
  4111a6:	4b03      	ldr	r3, [pc, #12]	; (4111b4 <ioport_init+0x14>)
  4111a8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4111aa:	200c      	movs	r0, #12
  4111ac:	4b01      	ldr	r3, [pc, #4]	; (4111b4 <ioport_init+0x14>)
  4111ae:	4798      	blx	r3
	arch_ioport_init();
}
  4111b0:	bd80      	pop	{r7, pc}
  4111b2:	bf00      	nop
  4111b4:	00411189 	.word	0x00411189

004111b8 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4111b8:	b580      	push	{r7, lr}
  4111ba:	af00      	add	r7, sp, #0

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  4111bc:	4b15      	ldr	r3, [pc, #84]	; (411214 <board_init+0x5c>)
  4111be:	4798      	blx	r3
// 	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
// 	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
	
	
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  4111c0:	201c      	movs	r0, #28
  4111c2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111c6:	4b14      	ldr	r3, [pc, #80]	; (411218 <board_init+0x60>)
  4111c8:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  4111ca:	201d      	movs	r0, #29
  4111cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111d0:	4b11      	ldr	r3, [pc, #68]	; (411218 <board_init+0x60>)
  4111d2:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  4111d4:	201e      	movs	r0, #30
  4111d6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111da:	4b0f      	ldr	r3, [pc, #60]	; (411218 <board_init+0x60>)
  4111dc:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4111de:	201f      	movs	r0, #31
  4111e0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111e4:	4b0c      	ldr	r3, [pc, #48]	; (411218 <board_init+0x60>)
  4111e6:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4111e8:	201a      	movs	r0, #26
  4111ea:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111ee:	4b0a      	ldr	r3, [pc, #40]	; (411218 <board_init+0x60>)
  4111f0:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4111f2:	201b      	movs	r0, #27
  4111f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4111f8:	4b07      	ldr	r3, [pc, #28]	; (411218 <board_init+0x60>)
  4111fa:	4798      	blx	r3

	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4111fc:	202b      	movs	r0, #43	; 0x2b
  4111fe:	4907      	ldr	r1, [pc, #28]	; (41121c <board_init+0x64>)
  411200:	4b05      	ldr	r3, [pc, #20]	; (411218 <board_init+0x60>)
  411202:	4798      	blx	r3

//#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  411204:	4806      	ldr	r0, [pc, #24]	; (411220 <board_init+0x68>)
  411206:	210c      	movs	r1, #12
  411208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  41120c:	4b05      	ldr	r3, [pc, #20]	; (411224 <board_init+0x6c>)
  41120e:	4798      	blx	r3

#endif  



}
  411210:	bd80      	pop	{r7, pc}
  411212:	bf00      	nop
  411214:	004111a1 	.word	0x004111a1
  411218:	00411605 	.word	0x00411605
  41121c:	28000001 	.word	0x28000001
  411220:	400e1000 	.word	0x400e1000
  411224:	004117b9 	.word	0x004117b9

00411228 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  411228:	b480      	push	{r7}
  41122a:	b085      	sub	sp, #20
  41122c:	af00      	add	r7, sp, #0
  41122e:	60f8      	str	r0, [r7, #12]
  411230:	60b9      	str	r1, [r7, #8]
  411232:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  411234:	687b      	ldr	r3, [r7, #4]
  411236:	2b00      	cmp	r3, #0
  411238:	d003      	beq.n	411242 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  41123a:	68fb      	ldr	r3, [r7, #12]
  41123c:	68ba      	ldr	r2, [r7, #8]
  41123e:	665a      	str	r2, [r3, #100]	; 0x64
  411240:	e002      	b.n	411248 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  411242:	68fb      	ldr	r3, [r7, #12]
  411244:	68ba      	ldr	r2, [r7, #8]
  411246:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  411248:	3714      	adds	r7, #20
  41124a:	46bd      	mov	sp, r7
  41124c:	f85d 7b04 	ldr.w	r7, [sp], #4
  411250:	4770      	bx	lr
  411252:	bf00      	nop

00411254 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  411254:	b480      	push	{r7}
  411256:	b085      	sub	sp, #20
  411258:	af00      	add	r7, sp, #0
  41125a:	60f8      	str	r0, [r7, #12]
  41125c:	60b9      	str	r1, [r7, #8]
  41125e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  411260:	68fb      	ldr	r3, [r7, #12]
  411262:	68ba      	ldr	r2, [r7, #8]
  411264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  411268:	687b      	ldr	r3, [r7, #4]
  41126a:	005b      	lsls	r3, r3, #1
  41126c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  411270:	fbb2 f3f3 	udiv	r3, r2, r3
  411274:	3b01      	subs	r3, #1
  411276:	f3c3 020d 	ubfx	r2, r3, #0, #14
  41127a:	68fb      	ldr	r3, [r7, #12]
  41127c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  411280:	3714      	adds	r7, #20
  411282:	46bd      	mov	sp, r7
  411284:	f85d 7b04 	ldr.w	r7, [sp], #4
  411288:	4770      	bx	lr
  41128a:	bf00      	nop

0041128c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  41128c:	b480      	push	{r7}
  41128e:	b087      	sub	sp, #28
  411290:	af00      	add	r7, sp, #0
  411292:	60f8      	str	r0, [r7, #12]
  411294:	60b9      	str	r1, [r7, #8]
  411296:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  411298:	68fb      	ldr	r3, [r7, #12]
  41129a:	687a      	ldr	r2, [r7, #4]
  41129c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  41129e:	68bb      	ldr	r3, [r7, #8]
  4112a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4112a4:	d04a      	beq.n	41133c <pio_set_peripheral+0xb0>
  4112a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4112aa:	d808      	bhi.n	4112be <pio_set_peripheral+0x32>
  4112ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4112b0:	d016      	beq.n	4112e0 <pio_set_peripheral+0x54>
  4112b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4112b6:	d02c      	beq.n	411312 <pio_set_peripheral+0x86>
  4112b8:	2b00      	cmp	r3, #0
  4112ba:	d069      	beq.n	411390 <pio_set_peripheral+0x104>
  4112bc:	e064      	b.n	411388 <pio_set_peripheral+0xfc>
  4112be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4112c2:	d065      	beq.n	411390 <pio_set_peripheral+0x104>
  4112c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4112c8:	d803      	bhi.n	4112d2 <pio_set_peripheral+0x46>
  4112ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4112ce:	d04a      	beq.n	411366 <pio_set_peripheral+0xda>
  4112d0:	e05a      	b.n	411388 <pio_set_peripheral+0xfc>
  4112d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4112d6:	d05b      	beq.n	411390 <pio_set_peripheral+0x104>
  4112d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4112dc:	d058      	beq.n	411390 <pio_set_peripheral+0x104>
  4112de:	e053      	b.n	411388 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4112e0:	68fb      	ldr	r3, [r7, #12]
  4112e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4112e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4112e6:	68fb      	ldr	r3, [r7, #12]
  4112e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4112ea:	687b      	ldr	r3, [r7, #4]
  4112ec:	43d9      	mvns	r1, r3
  4112ee:	697b      	ldr	r3, [r7, #20]
  4112f0:	400b      	ands	r3, r1
  4112f2:	401a      	ands	r2, r3
  4112f4:	68fb      	ldr	r3, [r7, #12]
  4112f6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4112f8:	68fb      	ldr	r3, [r7, #12]
  4112fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4112fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4112fe:	68fb      	ldr	r3, [r7, #12]
  411300:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  411302:	687b      	ldr	r3, [r7, #4]
  411304:	43d9      	mvns	r1, r3
  411306:	697b      	ldr	r3, [r7, #20]
  411308:	400b      	ands	r3, r1
  41130a:	401a      	ands	r2, r3
  41130c:	68fb      	ldr	r3, [r7, #12]
  41130e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  411310:	e03a      	b.n	411388 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  411312:	68fb      	ldr	r3, [r7, #12]
  411314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  411316:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  411318:	687a      	ldr	r2, [r7, #4]
  41131a:	697b      	ldr	r3, [r7, #20]
  41131c:	431a      	orrs	r2, r3
  41131e:	68fb      	ldr	r3, [r7, #12]
  411320:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  411322:	68fb      	ldr	r3, [r7, #12]
  411324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  411326:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  411328:	68fb      	ldr	r3, [r7, #12]
  41132a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  41132c:	687b      	ldr	r3, [r7, #4]
  41132e:	43d9      	mvns	r1, r3
  411330:	697b      	ldr	r3, [r7, #20]
  411332:	400b      	ands	r3, r1
  411334:	401a      	ands	r2, r3
  411336:	68fb      	ldr	r3, [r7, #12]
  411338:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  41133a:	e025      	b.n	411388 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  41133c:	68fb      	ldr	r3, [r7, #12]
  41133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  411340:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  411342:	68fb      	ldr	r3, [r7, #12]
  411344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  411346:	687b      	ldr	r3, [r7, #4]
  411348:	43d9      	mvns	r1, r3
  41134a:	697b      	ldr	r3, [r7, #20]
  41134c:	400b      	ands	r3, r1
  41134e:	401a      	ands	r2, r3
  411350:	68fb      	ldr	r3, [r7, #12]
  411352:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  411354:	68fb      	ldr	r3, [r7, #12]
  411356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  411358:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41135a:	687a      	ldr	r2, [r7, #4]
  41135c:	697b      	ldr	r3, [r7, #20]
  41135e:	431a      	orrs	r2, r3
  411360:	68fb      	ldr	r3, [r7, #12]
  411362:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  411364:	e010      	b.n	411388 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  411366:	68fb      	ldr	r3, [r7, #12]
  411368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  41136a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  41136c:	687a      	ldr	r2, [r7, #4]
  41136e:	697b      	ldr	r3, [r7, #20]
  411370:	431a      	orrs	r2, r3
  411372:	68fb      	ldr	r3, [r7, #12]
  411374:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  411376:	68fb      	ldr	r3, [r7, #12]
  411378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  41137a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41137c:	687a      	ldr	r2, [r7, #4]
  41137e:	697b      	ldr	r3, [r7, #20]
  411380:	431a      	orrs	r2, r3
  411382:	68fb      	ldr	r3, [r7, #12]
  411384:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  411386:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  411388:	68fb      	ldr	r3, [r7, #12]
  41138a:	687a      	ldr	r2, [r7, #4]
  41138c:	605a      	str	r2, [r3, #4]
  41138e:	e000      	b.n	411392 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  411390:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  411392:	371c      	adds	r7, #28
  411394:	46bd      	mov	sp, r7
  411396:	f85d 7b04 	ldr.w	r7, [sp], #4
  41139a:	4770      	bx	lr

0041139c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  41139c:	b580      	push	{r7, lr}
  41139e:	b084      	sub	sp, #16
  4113a0:	af00      	add	r7, sp, #0
  4113a2:	60f8      	str	r0, [r7, #12]
  4113a4:	60b9      	str	r1, [r7, #8]
  4113a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4113a8:	68f8      	ldr	r0, [r7, #12]
  4113aa:	68b9      	ldr	r1, [r7, #8]
  4113ac:	4b18      	ldr	r3, [pc, #96]	; (411410 <pio_set_input+0x74>)
  4113ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4113b0:	687b      	ldr	r3, [r7, #4]
  4113b2:	f003 0301 	and.w	r3, r3, #1
  4113b6:	68f8      	ldr	r0, [r7, #12]
  4113b8:	68b9      	ldr	r1, [r7, #8]
  4113ba:	461a      	mov	r2, r3
  4113bc:	4b15      	ldr	r3, [pc, #84]	; (411414 <pio_set_input+0x78>)
  4113be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4113c0:	687b      	ldr	r3, [r7, #4]
  4113c2:	f003 030a 	and.w	r3, r3, #10
  4113c6:	2b00      	cmp	r3, #0
  4113c8:	d003      	beq.n	4113d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4113ca:	68fb      	ldr	r3, [r7, #12]
  4113cc:	68ba      	ldr	r2, [r7, #8]
  4113ce:	621a      	str	r2, [r3, #32]
  4113d0:	e002      	b.n	4113d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4113d2:	68fb      	ldr	r3, [r7, #12]
  4113d4:	68ba      	ldr	r2, [r7, #8]
  4113d6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4113d8:	687b      	ldr	r3, [r7, #4]
  4113da:	f003 0302 	and.w	r3, r3, #2
  4113de:	2b00      	cmp	r3, #0
  4113e0:	d004      	beq.n	4113ec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4113e2:	68fb      	ldr	r3, [r7, #12]
  4113e4:	68ba      	ldr	r2, [r7, #8]
  4113e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4113ea:	e008      	b.n	4113fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4113ec:	687b      	ldr	r3, [r7, #4]
  4113ee:	f003 0308 	and.w	r3, r3, #8
  4113f2:	2b00      	cmp	r3, #0
  4113f4:	d003      	beq.n	4113fe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4113f6:	68fb      	ldr	r3, [r7, #12]
  4113f8:	68ba      	ldr	r2, [r7, #8]
  4113fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4113fe:	68fb      	ldr	r3, [r7, #12]
  411400:	68ba      	ldr	r2, [r7, #8]
  411402:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  411404:	68fb      	ldr	r3, [r7, #12]
  411406:	68ba      	ldr	r2, [r7, #8]
  411408:	601a      	str	r2, [r3, #0]
}
  41140a:	3710      	adds	r7, #16
  41140c:	46bd      	mov	sp, r7
  41140e:	bd80      	pop	{r7, pc}
  411410:	00411509 	.word	0x00411509
  411414:	00411229 	.word	0x00411229

00411418 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  411418:	b580      	push	{r7, lr}
  41141a:	b084      	sub	sp, #16
  41141c:	af00      	add	r7, sp, #0
  41141e:	60f8      	str	r0, [r7, #12]
  411420:	60b9      	str	r1, [r7, #8]
  411422:	607a      	str	r2, [r7, #4]
  411424:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  411426:	68f8      	ldr	r0, [r7, #12]
  411428:	68b9      	ldr	r1, [r7, #8]
  41142a:	4b12      	ldr	r3, [pc, #72]	; (411474 <pio_set_output+0x5c>)
  41142c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  41142e:	68f8      	ldr	r0, [r7, #12]
  411430:	68b9      	ldr	r1, [r7, #8]
  411432:	69ba      	ldr	r2, [r7, #24]
  411434:	4b10      	ldr	r3, [pc, #64]	; (411478 <pio_set_output+0x60>)
  411436:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  411438:	683b      	ldr	r3, [r7, #0]
  41143a:	2b00      	cmp	r3, #0
  41143c:	d003      	beq.n	411446 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  41143e:	68fb      	ldr	r3, [r7, #12]
  411440:	68ba      	ldr	r2, [r7, #8]
  411442:	651a      	str	r2, [r3, #80]	; 0x50
  411444:	e002      	b.n	41144c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  411446:	68fb      	ldr	r3, [r7, #12]
  411448:	68ba      	ldr	r2, [r7, #8]
  41144a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  41144c:	687b      	ldr	r3, [r7, #4]
  41144e:	2b00      	cmp	r3, #0
  411450:	d003      	beq.n	41145a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  411452:	68fb      	ldr	r3, [r7, #12]
  411454:	68ba      	ldr	r2, [r7, #8]
  411456:	631a      	str	r2, [r3, #48]	; 0x30
  411458:	e002      	b.n	411460 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  41145a:	68fb      	ldr	r3, [r7, #12]
  41145c:	68ba      	ldr	r2, [r7, #8]
  41145e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  411460:	68fb      	ldr	r3, [r7, #12]
  411462:	68ba      	ldr	r2, [r7, #8]
  411464:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  411466:	68fb      	ldr	r3, [r7, #12]
  411468:	68ba      	ldr	r2, [r7, #8]
  41146a:	601a      	str	r2, [r3, #0]
}
  41146c:	3710      	adds	r7, #16
  41146e:	46bd      	mov	sp, r7
  411470:	bd80      	pop	{r7, pc}
  411472:	bf00      	nop
  411474:	00411509 	.word	0x00411509
  411478:	00411229 	.word	0x00411229

0041147c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  41147c:	b480      	push	{r7}
  41147e:	b085      	sub	sp, #20
  411480:	af00      	add	r7, sp, #0
  411482:	60f8      	str	r0, [r7, #12]
  411484:	60b9      	str	r1, [r7, #8]
  411486:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  411488:	687b      	ldr	r3, [r7, #4]
  41148a:	f003 0310 	and.w	r3, r3, #16
  41148e:	2b00      	cmp	r3, #0
  411490:	d020      	beq.n	4114d4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  411492:	68fb      	ldr	r3, [r7, #12]
  411494:	68ba      	ldr	r2, [r7, #8]
  411496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  41149a:	687b      	ldr	r3, [r7, #4]
  41149c:	f003 0320 	and.w	r3, r3, #32
  4114a0:	2b00      	cmp	r3, #0
  4114a2:	d004      	beq.n	4114ae <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4114a4:	68fb      	ldr	r3, [r7, #12]
  4114a6:	68ba      	ldr	r2, [r7, #8]
  4114a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4114ac:	e003      	b.n	4114b6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4114ae:	68fb      	ldr	r3, [r7, #12]
  4114b0:	68ba      	ldr	r2, [r7, #8]
  4114b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4114b6:	687b      	ldr	r3, [r7, #4]
  4114b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4114bc:	2b00      	cmp	r3, #0
  4114be:	d004      	beq.n	4114ca <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4114c0:	68fb      	ldr	r3, [r7, #12]
  4114c2:	68ba      	ldr	r2, [r7, #8]
  4114c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4114c8:	e008      	b.n	4114dc <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4114ca:	68fb      	ldr	r3, [r7, #12]
  4114cc:	68ba      	ldr	r2, [r7, #8]
  4114ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  4114d2:	e003      	b.n	4114dc <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4114d4:	68fb      	ldr	r3, [r7, #12]
  4114d6:	68ba      	ldr	r2, [r7, #8]
  4114d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  4114dc:	3714      	adds	r7, #20
  4114de:	46bd      	mov	sp, r7
  4114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4114e4:	4770      	bx	lr
  4114e6:	bf00      	nop

004114e8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4114e8:	b480      	push	{r7}
  4114ea:	b083      	sub	sp, #12
  4114ec:	af00      	add	r7, sp, #0
  4114ee:	6078      	str	r0, [r7, #4]
  4114f0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  4114f2:	687b      	ldr	r3, [r7, #4]
  4114f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4114f6:	687b      	ldr	r3, [r7, #4]
  4114f8:	683a      	ldr	r2, [r7, #0]
  4114fa:	641a      	str	r2, [r3, #64]	; 0x40
}
  4114fc:	370c      	adds	r7, #12
  4114fe:	46bd      	mov	sp, r7
  411500:	f85d 7b04 	ldr.w	r7, [sp], #4
  411504:	4770      	bx	lr
  411506:	bf00      	nop

00411508 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  411508:	b480      	push	{r7}
  41150a:	b083      	sub	sp, #12
  41150c:	af00      	add	r7, sp, #0
  41150e:	6078      	str	r0, [r7, #4]
  411510:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  411512:	687b      	ldr	r3, [r7, #4]
  411514:	683a      	ldr	r2, [r7, #0]
  411516:	645a      	str	r2, [r3, #68]	; 0x44
}
  411518:	370c      	adds	r7, #12
  41151a:	46bd      	mov	sp, r7
  41151c:	f85d 7b04 	ldr.w	r7, [sp], #4
  411520:	4770      	bx	lr
  411522:	bf00      	nop

00411524 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  411524:	b480      	push	{r7}
  411526:	b083      	sub	sp, #12
  411528:	af00      	add	r7, sp, #0
  41152a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  41152c:	687b      	ldr	r3, [r7, #4]
  41152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  411530:	4618      	mov	r0, r3
  411532:	370c      	adds	r7, #12
  411534:	46bd      	mov	sp, r7
  411536:	f85d 7b04 	ldr.w	r7, [sp], #4
  41153a:	4770      	bx	lr

0041153c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  41153c:	b480      	push	{r7}
  41153e:	b083      	sub	sp, #12
  411540:	af00      	add	r7, sp, #0
  411542:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  411544:	687b      	ldr	r3, [r7, #4]
  411546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  411548:	4618      	mov	r0, r3
  41154a:	370c      	adds	r7, #12
  41154c:	46bd      	mov	sp, r7
  41154e:	f85d 7b04 	ldr.w	r7, [sp], #4
  411552:	4770      	bx	lr

00411554 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  411554:	b580      	push	{r7, lr}
  411556:	b084      	sub	sp, #16
  411558:	af00      	add	r7, sp, #0
  41155a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41155c:	6878      	ldr	r0, [r7, #4]
  41155e:	4b07      	ldr	r3, [pc, #28]	; (41157c <pio_set_pin_high+0x28>)
  411560:	4798      	blx	r3
  411562:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  411564:	687b      	ldr	r3, [r7, #4]
  411566:	f003 031f 	and.w	r3, r3, #31
  41156a:	2201      	movs	r2, #1
  41156c:	fa02 f303 	lsl.w	r3, r2, r3
  411570:	461a      	mov	r2, r3
  411572:	68fb      	ldr	r3, [r7, #12]
  411574:	631a      	str	r2, [r3, #48]	; 0x30
}
  411576:	3710      	adds	r7, #16
  411578:	46bd      	mov	sp, r7
  41157a:	bd80      	pop	{r7, pc}
  41157c:	004118e1 	.word	0x004118e1

00411580 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  411580:	b580      	push	{r7, lr}
  411582:	b084      	sub	sp, #16
  411584:	af00      	add	r7, sp, #0
  411586:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  411588:	6878      	ldr	r0, [r7, #4]
  41158a:	4b07      	ldr	r3, [pc, #28]	; (4115a8 <pio_set_pin_low+0x28>)
  41158c:	4798      	blx	r3
  41158e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  411590:	687b      	ldr	r3, [r7, #4]
  411592:	f003 031f 	and.w	r3, r3, #31
  411596:	2201      	movs	r2, #1
  411598:	fa02 f303 	lsl.w	r3, r2, r3
  41159c:	461a      	mov	r2, r3
  41159e:	68fb      	ldr	r3, [r7, #12]
  4115a0:	635a      	str	r2, [r3, #52]	; 0x34
}
  4115a2:	3710      	adds	r7, #16
  4115a4:	46bd      	mov	sp, r7
  4115a6:	bd80      	pop	{r7, pc}
  4115a8:	004118e1 	.word	0x004118e1

004115ac <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  4115ac:	b580      	push	{r7, lr}
  4115ae:	b084      	sub	sp, #16
  4115b0:	af00      	add	r7, sp, #0
  4115b2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4115b4:	6878      	ldr	r0, [r7, #4]
  4115b6:	4b12      	ldr	r3, [pc, #72]	; (411600 <pio_toggle_pin+0x54>)
  4115b8:	4798      	blx	r3
  4115ba:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  4115bc:	68fb      	ldr	r3, [r7, #12]
  4115be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4115c0:	687b      	ldr	r3, [r7, #4]
  4115c2:	f003 031f 	and.w	r3, r3, #31
  4115c6:	2101      	movs	r1, #1
  4115c8:	fa01 f303 	lsl.w	r3, r1, r3
  4115cc:	4013      	ands	r3, r2
  4115ce:	2b00      	cmp	r3, #0
  4115d0:	d009      	beq.n	4115e6 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4115d2:	687b      	ldr	r3, [r7, #4]
  4115d4:	f003 031f 	and.w	r3, r3, #31
  4115d8:	2201      	movs	r2, #1
  4115da:	fa02 f303 	lsl.w	r3, r2, r3
  4115de:	461a      	mov	r2, r3
  4115e0:	68fb      	ldr	r3, [r7, #12]
  4115e2:	635a      	str	r2, [r3, #52]	; 0x34
  4115e4:	e008      	b.n	4115f8 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4115e6:	687b      	ldr	r3, [r7, #4]
  4115e8:	f003 031f 	and.w	r3, r3, #31
  4115ec:	2201      	movs	r2, #1
  4115ee:	fa02 f303 	lsl.w	r3, r2, r3
  4115f2:	461a      	mov	r2, r3
  4115f4:	68fb      	ldr	r3, [r7, #12]
  4115f6:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  4115f8:	3710      	adds	r7, #16
  4115fa:	46bd      	mov	sp, r7
  4115fc:	bd80      	pop	{r7, pc}
  4115fe:	bf00      	nop
  411600:	004118e1 	.word	0x004118e1

00411604 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  411604:	b590      	push	{r4, r7, lr}
  411606:	b087      	sub	sp, #28
  411608:	af02      	add	r7, sp, #8
  41160a:	6078      	str	r0, [r7, #4]
  41160c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41160e:	6878      	ldr	r0, [r7, #4]
  411610:	4b64      	ldr	r3, [pc, #400]	; (4117a4 <pio_configure_pin+0x1a0>)
  411612:	4798      	blx	r3
  411614:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  411616:	683b      	ldr	r3, [r7, #0]
  411618:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  41161c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  411620:	d06b      	beq.n	4116fa <pio_configure_pin+0xf6>
  411622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  411626:	d809      	bhi.n	41163c <pio_configure_pin+0x38>
  411628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  41162c:	d02d      	beq.n	41168a <pio_configure_pin+0x86>
  41162e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  411632:	d046      	beq.n	4116c2 <pio_configure_pin+0xbe>
  411634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  411638:	d00b      	beq.n	411652 <pio_configure_pin+0x4e>
  41163a:	e0ac      	b.n	411796 <pio_configure_pin+0x192>
  41163c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  411640:	f000 8083 	beq.w	41174a <pio_configure_pin+0x146>
  411644:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  411648:	d07f      	beq.n	41174a <pio_configure_pin+0x146>
  41164a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  41164e:	d070      	beq.n	411732 <pio_configure_pin+0x12e>
  411650:	e0a1      	b.n	411796 <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  411652:	687b      	ldr	r3, [r7, #4]
  411654:	f003 031f 	and.w	r3, r3, #31
  411658:	2201      	movs	r2, #1
  41165a:	fa02 f303 	lsl.w	r3, r2, r3
  41165e:	68f8      	ldr	r0, [r7, #12]
  411660:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  411664:	461a      	mov	r2, r3
  411666:	4b50      	ldr	r3, [pc, #320]	; (4117a8 <pio_configure_pin+0x1a4>)
  411668:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41166a:	687b      	ldr	r3, [r7, #4]
  41166c:	f003 031f 	and.w	r3, r3, #31
  411670:	2201      	movs	r2, #1
  411672:	fa02 f303 	lsl.w	r3, r2, r3
  411676:	461a      	mov	r2, r3
  411678:	683b      	ldr	r3, [r7, #0]
  41167a:	f003 0301 	and.w	r3, r3, #1
  41167e:	68f8      	ldr	r0, [r7, #12]
  411680:	4611      	mov	r1, r2
  411682:	461a      	mov	r2, r3
  411684:	4b49      	ldr	r3, [pc, #292]	; (4117ac <pio_configure_pin+0x1a8>)
  411686:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  411688:	e087      	b.n	41179a <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  41168a:	687b      	ldr	r3, [r7, #4]
  41168c:	f003 031f 	and.w	r3, r3, #31
  411690:	2201      	movs	r2, #1
  411692:	fa02 f303 	lsl.w	r3, r2, r3
  411696:	68f8      	ldr	r0, [r7, #12]
  411698:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41169c:	461a      	mov	r2, r3
  41169e:	4b42      	ldr	r3, [pc, #264]	; (4117a8 <pio_configure_pin+0x1a4>)
  4116a0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4116a2:	687b      	ldr	r3, [r7, #4]
  4116a4:	f003 031f 	and.w	r3, r3, #31
  4116a8:	2201      	movs	r2, #1
  4116aa:	fa02 f303 	lsl.w	r3, r2, r3
  4116ae:	461a      	mov	r2, r3
  4116b0:	683b      	ldr	r3, [r7, #0]
  4116b2:	f003 0301 	and.w	r3, r3, #1
  4116b6:	68f8      	ldr	r0, [r7, #12]
  4116b8:	4611      	mov	r1, r2
  4116ba:	461a      	mov	r2, r3
  4116bc:	4b3b      	ldr	r3, [pc, #236]	; (4117ac <pio_configure_pin+0x1a8>)
  4116be:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4116c0:	e06b      	b.n	41179a <pio_configure_pin+0x196>
//#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4116c2:	687b      	ldr	r3, [r7, #4]
  4116c4:	f003 031f 	and.w	r3, r3, #31
  4116c8:	2201      	movs	r2, #1
  4116ca:	fa02 f303 	lsl.w	r3, r2, r3
  4116ce:	68f8      	ldr	r0, [r7, #12]
  4116d0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4116d4:	461a      	mov	r2, r3
  4116d6:	4b34      	ldr	r3, [pc, #208]	; (4117a8 <pio_configure_pin+0x1a4>)
  4116d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4116da:	687b      	ldr	r3, [r7, #4]
  4116dc:	f003 031f 	and.w	r3, r3, #31
  4116e0:	2201      	movs	r2, #1
  4116e2:	fa02 f303 	lsl.w	r3, r2, r3
  4116e6:	461a      	mov	r2, r3
  4116e8:	683b      	ldr	r3, [r7, #0]
  4116ea:	f003 0301 	and.w	r3, r3, #1
  4116ee:	68f8      	ldr	r0, [r7, #12]
  4116f0:	4611      	mov	r1, r2
  4116f2:	461a      	mov	r2, r3
  4116f4:	4b2d      	ldr	r3, [pc, #180]	; (4117ac <pio_configure_pin+0x1a8>)
  4116f6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4116f8:	e04f      	b.n	41179a <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4116fa:	687b      	ldr	r3, [r7, #4]
  4116fc:	f003 031f 	and.w	r3, r3, #31
  411700:	2201      	movs	r2, #1
  411702:	fa02 f303 	lsl.w	r3, r2, r3
  411706:	68f8      	ldr	r0, [r7, #12]
  411708:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  41170c:	461a      	mov	r2, r3
  41170e:	4b26      	ldr	r3, [pc, #152]	; (4117a8 <pio_configure_pin+0x1a4>)
  411710:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  411712:	687b      	ldr	r3, [r7, #4]
  411714:	f003 031f 	and.w	r3, r3, #31
  411718:	2201      	movs	r2, #1
  41171a:	fa02 f303 	lsl.w	r3, r2, r3
  41171e:	461a      	mov	r2, r3
  411720:	683b      	ldr	r3, [r7, #0]
  411722:	f003 0301 	and.w	r3, r3, #1
  411726:	68f8      	ldr	r0, [r7, #12]
  411728:	4611      	mov	r1, r2
  41172a:	461a      	mov	r2, r3
  41172c:	4b1f      	ldr	r3, [pc, #124]	; (4117ac <pio_configure_pin+0x1a8>)
  41172e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  411730:	e033      	b.n	41179a <pio_configure_pin+0x196>
//#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  411732:	687b      	ldr	r3, [r7, #4]
  411734:	f003 031f 	and.w	r3, r3, #31
  411738:	2201      	movs	r2, #1
  41173a:	fa02 f303 	lsl.w	r3, r2, r3
  41173e:	68f8      	ldr	r0, [r7, #12]
  411740:	4619      	mov	r1, r3
  411742:	683a      	ldr	r2, [r7, #0]
  411744:	4b1a      	ldr	r3, [pc, #104]	; (4117b0 <pio_configure_pin+0x1ac>)
  411746:	4798      	blx	r3
		break;
  411748:	e027      	b.n	41179a <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41174a:	687b      	ldr	r3, [r7, #4]
  41174c:	f003 031f 	and.w	r3, r3, #31
  411750:	2201      	movs	r2, #1
  411752:	fa02 f303 	lsl.w	r3, r2, r3
  411756:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  411758:	683b      	ldr	r3, [r7, #0]
  41175a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41175e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  411762:	bf14      	ite	ne
  411764:	2300      	movne	r3, #0
  411766:	2301      	moveq	r3, #1
  411768:	b2db      	uxtb	r3, r3
  41176a:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  41176c:	683b      	ldr	r3, [r7, #0]
  41176e:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  411772:	2b00      	cmp	r3, #0
  411774:	bf0c      	ite	eq
  411776:	2300      	moveq	r3, #0
  411778:	2301      	movne	r3, #1
  41177a:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  41177c:	6838      	ldr	r0, [r7, #0]
  41177e:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  411782:	2800      	cmp	r0, #0
  411784:	bf0c      	ite	eq
  411786:	2000      	moveq	r0, #0
  411788:	2001      	movne	r0, #1
  41178a:	b2c0      	uxtb	r0, r0
  41178c:	9000      	str	r0, [sp, #0]
  41178e:	68f8      	ldr	r0, [r7, #12]
  411790:	4c08      	ldr	r4, [pc, #32]	; (4117b4 <pio_configure_pin+0x1b0>)
  411792:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  411794:	e001      	b.n	41179a <pio_configure_pin+0x196>

	default:
		return 0;
  411796:	2300      	movs	r3, #0
  411798:	e000      	b.n	41179c <pio_configure_pin+0x198>
	}

	return 1;
  41179a:	2301      	movs	r3, #1
}
  41179c:	4618      	mov	r0, r3
  41179e:	3714      	adds	r7, #20
  4117a0:	46bd      	mov	sp, r7
  4117a2:	bd90      	pop	{r4, r7, pc}
  4117a4:	004118e1 	.word	0x004118e1
  4117a8:	0041128d 	.word	0x0041128d
  4117ac:	00411229 	.word	0x00411229
  4117b0:	0041139d 	.word	0x0041139d
  4117b4:	00411419 	.word	0x00411419

004117b8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4117b8:	b590      	push	{r4, r7, lr}
  4117ba:	b087      	sub	sp, #28
  4117bc:	af02      	add	r7, sp, #8
  4117be:	60f8      	str	r0, [r7, #12]
  4117c0:	60b9      	str	r1, [r7, #8]
  4117c2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4117c4:	687b      	ldr	r3, [r7, #4]
  4117c6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4117ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4117ce:	d043      	beq.n	411858 <pio_configure_pin_group+0xa0>
  4117d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4117d4:	d809      	bhi.n	4117ea <pio_configure_pin_group+0x32>
  4117d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4117da:	d01f      	beq.n	41181c <pio_configure_pin_group+0x64>
  4117dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4117e0:	d02b      	beq.n	41183a <pio_configure_pin_group+0x82>
  4117e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4117e6:	d00a      	beq.n	4117fe <pio_configure_pin_group+0x46>
  4117e8:	e06b      	b.n	4118c2 <pio_configure_pin_group+0x10a>
  4117ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4117ee:	d048      	beq.n	411882 <pio_configure_pin_group+0xca>
  4117f0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4117f4:	d045      	beq.n	411882 <pio_configure_pin_group+0xca>
  4117f6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4117fa:	d03c      	beq.n	411876 <pio_configure_pin_group+0xbe>
  4117fc:	e061      	b.n	4118c2 <pio_configure_pin_group+0x10a>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4117fe:	68f8      	ldr	r0, [r7, #12]
  411800:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  411804:	68ba      	ldr	r2, [r7, #8]
  411806:	4b32      	ldr	r3, [pc, #200]	; (4118d0 <pio_configure_pin_group+0x118>)
  411808:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  41180a:	687b      	ldr	r3, [r7, #4]
  41180c:	f003 0301 	and.w	r3, r3, #1
  411810:	68f8      	ldr	r0, [r7, #12]
  411812:	68b9      	ldr	r1, [r7, #8]
  411814:	461a      	mov	r2, r3
  411816:	4b2f      	ldr	r3, [pc, #188]	; (4118d4 <pio_configure_pin_group+0x11c>)
  411818:	4798      	blx	r3
		break;
  41181a:	e054      	b.n	4118c6 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  41181c:	68f8      	ldr	r0, [r7, #12]
  41181e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  411822:	68ba      	ldr	r2, [r7, #8]
  411824:	4b2a      	ldr	r3, [pc, #168]	; (4118d0 <pio_configure_pin_group+0x118>)
  411826:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  411828:	687b      	ldr	r3, [r7, #4]
  41182a:	f003 0301 	and.w	r3, r3, #1
  41182e:	68f8      	ldr	r0, [r7, #12]
  411830:	68b9      	ldr	r1, [r7, #8]
  411832:	461a      	mov	r2, r3
  411834:	4b27      	ldr	r3, [pc, #156]	; (4118d4 <pio_configure_pin_group+0x11c>)
  411836:	4798      	blx	r3
		break;
  411838:	e045      	b.n	4118c6 <pio_configure_pin_group+0x10e>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  41183a:	68f8      	ldr	r0, [r7, #12]
  41183c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  411840:	68ba      	ldr	r2, [r7, #8]
  411842:	4b23      	ldr	r3, [pc, #140]	; (4118d0 <pio_configure_pin_group+0x118>)
  411844:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  411846:	687b      	ldr	r3, [r7, #4]
  411848:	f003 0301 	and.w	r3, r3, #1
  41184c:	68f8      	ldr	r0, [r7, #12]
  41184e:	68b9      	ldr	r1, [r7, #8]
  411850:	461a      	mov	r2, r3
  411852:	4b20      	ldr	r3, [pc, #128]	; (4118d4 <pio_configure_pin_group+0x11c>)
  411854:	4798      	blx	r3
		break;
  411856:	e036      	b.n	4118c6 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  411858:	68f8      	ldr	r0, [r7, #12]
  41185a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  41185e:	68ba      	ldr	r2, [r7, #8]
  411860:	4b1b      	ldr	r3, [pc, #108]	; (4118d0 <pio_configure_pin_group+0x118>)
  411862:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  411864:	687b      	ldr	r3, [r7, #4]
  411866:	f003 0301 	and.w	r3, r3, #1
  41186a:	68f8      	ldr	r0, [r7, #12]
  41186c:	68b9      	ldr	r1, [r7, #8]
  41186e:	461a      	mov	r2, r3
  411870:	4b18      	ldr	r3, [pc, #96]	; (4118d4 <pio_configure_pin_group+0x11c>)
  411872:	4798      	blx	r3
		break;
  411874:	e027      	b.n	4118c6 <pio_configure_pin_group+0x10e>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  411876:	68f8      	ldr	r0, [r7, #12]
  411878:	68b9      	ldr	r1, [r7, #8]
  41187a:	687a      	ldr	r2, [r7, #4]
  41187c:	4b16      	ldr	r3, [pc, #88]	; (4118d8 <pio_configure_pin_group+0x120>)
  41187e:	4798      	blx	r3
		break;
  411880:	e021      	b.n	4118c6 <pio_configure_pin_group+0x10e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  411882:	687b      	ldr	r3, [r7, #4]
  411884:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  411888:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  41188c:	bf14      	ite	ne
  41188e:	2300      	movne	r3, #0
  411890:	2301      	moveq	r3, #1
  411892:	b2db      	uxtb	r3, r3
  411894:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  411896:	687b      	ldr	r3, [r7, #4]
  411898:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  41189c:	2b00      	cmp	r3, #0
  41189e:	bf0c      	ite	eq
  4118a0:	2300      	moveq	r3, #0
  4118a2:	2301      	movne	r3, #1
  4118a4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4118a6:	6879      	ldr	r1, [r7, #4]
  4118a8:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4118ac:	2900      	cmp	r1, #0
  4118ae:	bf0c      	ite	eq
  4118b0:	2100      	moveq	r1, #0
  4118b2:	2101      	movne	r1, #1
  4118b4:	b2c9      	uxtb	r1, r1
  4118b6:	9100      	str	r1, [sp, #0]
  4118b8:	68f8      	ldr	r0, [r7, #12]
  4118ba:	68b9      	ldr	r1, [r7, #8]
  4118bc:	4c07      	ldr	r4, [pc, #28]	; (4118dc <pio_configure_pin_group+0x124>)
  4118be:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4118c0:	e001      	b.n	4118c6 <pio_configure_pin_group+0x10e>

	default:
		return 0;
  4118c2:	2300      	movs	r3, #0
  4118c4:	e000      	b.n	4118c8 <pio_configure_pin_group+0x110>
	}

	return 1;
  4118c6:	2301      	movs	r3, #1
}
  4118c8:	4618      	mov	r0, r3
  4118ca:	3714      	adds	r7, #20
  4118cc:	46bd      	mov	sp, r7
  4118ce:	bd90      	pop	{r4, r7, pc}
  4118d0:	0041128d 	.word	0x0041128d
  4118d4:	00411229 	.word	0x00411229
  4118d8:	0041139d 	.word	0x0041139d
  4118dc:	00411419 	.word	0x00411419

004118e0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4118e0:	b480      	push	{r7}
  4118e2:	b085      	sub	sp, #20
  4118e4:	af00      	add	r7, sp, #0
  4118e6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4118e8:	687b      	ldr	r3, [r7, #4]
  4118ea:	095b      	lsrs	r3, r3, #5
  4118ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4118f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4118f4:	025b      	lsls	r3, r3, #9
  4118f6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4118f8:	68fb      	ldr	r3, [r7, #12]
}
  4118fa:	4618      	mov	r0, r3
  4118fc:	3714      	adds	r7, #20
  4118fe:	46bd      	mov	sp, r7
  411900:	f85d 7b04 	ldr.w	r7, [sp], #4
  411904:	4770      	bx	lr
  411906:	bf00      	nop

00411908 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  411908:	b480      	push	{r7}
  41190a:	b085      	sub	sp, #20
  41190c:	af00      	add	r7, sp, #0
  41190e:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  411910:	687b      	ldr	r3, [r7, #4]
  411912:	095b      	lsrs	r3, r3, #5
  411914:	330b      	adds	r3, #11
  411916:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  411918:	68fb      	ldr	r3, [r7, #12]
}
  41191a:	4618      	mov	r0, r3
  41191c:	3714      	adds	r7, #20
  41191e:	46bd      	mov	sp, r7
  411920:	f85d 7b04 	ldr.w	r7, [sp], #4
  411924:	4770      	bx	lr
  411926:	bf00      	nop

00411928 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  411928:	b480      	push	{r7}
  41192a:	b085      	sub	sp, #20
  41192c:	af00      	add	r7, sp, #0
  41192e:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  411930:	687b      	ldr	r3, [r7, #4]
  411932:	f003 031f 	and.w	r3, r3, #31
  411936:	2201      	movs	r2, #1
  411938:	fa02 f303 	lsl.w	r3, r2, r3
  41193c:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  41193e:	68fb      	ldr	r3, [r7, #12]
}
  411940:	4618      	mov	r0, r3
  411942:	3714      	adds	r7, #20
  411944:	46bd      	mov	sp, r7
  411946:	f85d 7b04 	ldr.w	r7, [sp], #4
  41194a:	4770      	bx	lr

0041194c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  41194c:	b580      	push	{r7, lr}
  41194e:	b084      	sub	sp, #16
  411950:	af00      	add	r7, sp, #0
  411952:	6078      	str	r0, [r7, #4]
  411954:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  411956:	6878      	ldr	r0, [r7, #4]
  411958:	4b2a      	ldr	r3, [pc, #168]	; (411a04 <pio_handler_process+0xb8>)
  41195a:	4798      	blx	r3
  41195c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  41195e:	6878      	ldr	r0, [r7, #4]
  411960:	4b29      	ldr	r3, [pc, #164]	; (411a08 <pio_handler_process+0xbc>)
  411962:	4798      	blx	r3
  411964:	4603      	mov	r3, r0
  411966:	68fa      	ldr	r2, [r7, #12]
  411968:	4013      	ands	r3, r2
  41196a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  41196c:	68fb      	ldr	r3, [r7, #12]
  41196e:	2b00      	cmp	r3, #0
  411970:	d039      	beq.n	4119e6 <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  411972:	2300      	movs	r3, #0
  411974:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  411976:	e033      	b.n	4119e0 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  411978:	4a24      	ldr	r2, [pc, #144]	; (411a0c <pio_handler_process+0xc0>)
  41197a:	68bb      	ldr	r3, [r7, #8]
  41197c:	011b      	lsls	r3, r3, #4
  41197e:	4413      	add	r3, r2
  411980:	681a      	ldr	r2, [r3, #0]
  411982:	683b      	ldr	r3, [r7, #0]
  411984:	429a      	cmp	r2, r3
  411986:	d124      	bne.n	4119d2 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  411988:	4a20      	ldr	r2, [pc, #128]	; (411a0c <pio_handler_process+0xc0>)
  41198a:	68bb      	ldr	r3, [r7, #8]
  41198c:	011b      	lsls	r3, r3, #4
  41198e:	4413      	add	r3, r2
  411990:	685a      	ldr	r2, [r3, #4]
  411992:	68fb      	ldr	r3, [r7, #12]
  411994:	4013      	ands	r3, r2
  411996:	2b00      	cmp	r3, #0
  411998:	d01b      	beq.n	4119d2 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  41199a:	4a1c      	ldr	r2, [pc, #112]	; (411a0c <pio_handler_process+0xc0>)
  41199c:	68bb      	ldr	r3, [r7, #8]
  41199e:	011b      	lsls	r3, r3, #4
  4119a0:	4413      	add	r3, r2
  4119a2:	3308      	adds	r3, #8
  4119a4:	685b      	ldr	r3, [r3, #4]
  4119a6:	4919      	ldr	r1, [pc, #100]	; (411a0c <pio_handler_process+0xc0>)
  4119a8:	68ba      	ldr	r2, [r7, #8]
  4119aa:	0112      	lsls	r2, r2, #4
  4119ac:	440a      	add	r2, r1
  4119ae:	6811      	ldr	r1, [r2, #0]
  4119b0:	4816      	ldr	r0, [pc, #88]	; (411a0c <pio_handler_process+0xc0>)
  4119b2:	68ba      	ldr	r2, [r7, #8]
  4119b4:	0112      	lsls	r2, r2, #4
  4119b6:	4402      	add	r2, r0
  4119b8:	6852      	ldr	r2, [r2, #4]
  4119ba:	4608      	mov	r0, r1
  4119bc:	4611      	mov	r1, r2
  4119be:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4119c0:	4a12      	ldr	r2, [pc, #72]	; (411a0c <pio_handler_process+0xc0>)
  4119c2:	68bb      	ldr	r3, [r7, #8]
  4119c4:	011b      	lsls	r3, r3, #4
  4119c6:	4413      	add	r3, r2
  4119c8:	685b      	ldr	r3, [r3, #4]
  4119ca:	43db      	mvns	r3, r3
  4119cc:	68fa      	ldr	r2, [r7, #12]
  4119ce:	4013      	ands	r3, r2
  4119d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4119d2:	68bb      	ldr	r3, [r7, #8]
  4119d4:	3301      	adds	r3, #1
  4119d6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4119d8:	68bb      	ldr	r3, [r7, #8]
  4119da:	2b0b      	cmp	r3, #11
  4119dc:	d900      	bls.n	4119e0 <pio_handler_process+0x94>
				break;
  4119de:	e002      	b.n	4119e6 <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4119e0:	68fb      	ldr	r3, [r7, #12]
  4119e2:	2b00      	cmp	r3, #0
  4119e4:	d1c8      	bne.n	411978 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4119e6:	4b0a      	ldr	r3, [pc, #40]	; (411a10 <pio_handler_process+0xc4>)
  4119e8:	681b      	ldr	r3, [r3, #0]
  4119ea:	2b00      	cmp	r3, #0
  4119ec:	d007      	beq.n	4119fe <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  4119ee:	4b09      	ldr	r3, [pc, #36]	; (411a14 <pio_handler_process+0xc8>)
  4119f0:	681b      	ldr	r3, [r3, #0]
  4119f2:	2b00      	cmp	r3, #0
  4119f4:	d003      	beq.n	4119fe <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  4119f6:	4b07      	ldr	r3, [pc, #28]	; (411a14 <pio_handler_process+0xc8>)
  4119f8:	681b      	ldr	r3, [r3, #0]
  4119fa:	6878      	ldr	r0, [r7, #4]
  4119fc:	4798      	blx	r3
		}
	}
#endif
}
  4119fe:	3710      	adds	r7, #16
  411a00:	46bd      	mov	sp, r7
  411a02:	bd80      	pop	{r7, pc}
  411a04:	00411525 	.word	0x00411525
  411a08:	0041153d 	.word	0x0041153d
  411a0c:	20003910 	.word	0x20003910
  411a10:	200050a4 	.word	0x200050a4
  411a14:	200039d4 	.word	0x200039d4

00411a18 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  411a18:	b580      	push	{r7, lr}
  411a1a:	b086      	sub	sp, #24
  411a1c:	af00      	add	r7, sp, #0
  411a1e:	60f8      	str	r0, [r7, #12]
  411a20:	60b9      	str	r1, [r7, #8]
  411a22:	607a      	str	r2, [r7, #4]
  411a24:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  411a26:	4b13      	ldr	r3, [pc, #76]	; (411a74 <pio_handler_set+0x5c>)
  411a28:	681b      	ldr	r3, [r3, #0]
  411a2a:	2b0b      	cmp	r3, #11
  411a2c:	d901      	bls.n	411a32 <pio_handler_set+0x1a>
		return 1;
  411a2e:	2301      	movs	r3, #1
  411a30:	e01c      	b.n	411a6c <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  411a32:	4b10      	ldr	r3, [pc, #64]	; (411a74 <pio_handler_set+0x5c>)
  411a34:	681b      	ldr	r3, [r3, #0]
  411a36:	011a      	lsls	r2, r3, #4
  411a38:	4b0f      	ldr	r3, [pc, #60]	; (411a78 <pio_handler_set+0x60>)
  411a3a:	4413      	add	r3, r2
  411a3c:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  411a3e:	697b      	ldr	r3, [r7, #20]
  411a40:	68ba      	ldr	r2, [r7, #8]
  411a42:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  411a44:	697b      	ldr	r3, [r7, #20]
  411a46:	687a      	ldr	r2, [r7, #4]
  411a48:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  411a4a:	697b      	ldr	r3, [r7, #20]
  411a4c:	683a      	ldr	r2, [r7, #0]
  411a4e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  411a50:	697b      	ldr	r3, [r7, #20]
  411a52:	6a3a      	ldr	r2, [r7, #32]
  411a54:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  411a56:	4b07      	ldr	r3, [pc, #28]	; (411a74 <pio_handler_set+0x5c>)
  411a58:	681b      	ldr	r3, [r3, #0]
  411a5a:	1c5a      	adds	r2, r3, #1
  411a5c:	4b05      	ldr	r3, [pc, #20]	; (411a74 <pio_handler_set+0x5c>)
  411a5e:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  411a60:	68f8      	ldr	r0, [r7, #12]
  411a62:	6879      	ldr	r1, [r7, #4]
  411a64:	683a      	ldr	r2, [r7, #0]
  411a66:	4b05      	ldr	r3, [pc, #20]	; (411a7c <pio_handler_set+0x64>)
  411a68:	4798      	blx	r3

	return 0;
  411a6a:	2300      	movs	r3, #0
}
  411a6c:	4618      	mov	r0, r3
  411a6e:	3718      	adds	r7, #24
  411a70:	46bd      	mov	sp, r7
  411a72:	bd80      	pop	{r7, pc}
  411a74:	200039d0 	.word	0x200039d0
  411a78:	20003910 	.word	0x20003910
  411a7c:	0041147d 	.word	0x0041147d

00411a80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  411a80:	b580      	push	{r7, lr}
  411a82:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  411a84:	4802      	ldr	r0, [pc, #8]	; (411a90 <PIOA_Handler+0x10>)
  411a86:	210b      	movs	r1, #11
  411a88:	4b02      	ldr	r3, [pc, #8]	; (411a94 <PIOA_Handler+0x14>)
  411a8a:	4798      	blx	r3
}
  411a8c:	bd80      	pop	{r7, pc}
  411a8e:	bf00      	nop
  411a90:	400e0e00 	.word	0x400e0e00
  411a94:	0041194d 	.word	0x0041194d

00411a98 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  411a98:	b580      	push	{r7, lr}
  411a9a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  411a9c:	4802      	ldr	r0, [pc, #8]	; (411aa8 <PIOB_Handler+0x10>)
  411a9e:	210c      	movs	r1, #12
  411aa0:	4b02      	ldr	r3, [pc, #8]	; (411aac <PIOB_Handler+0x14>)
  411aa2:	4798      	blx	r3
}
  411aa4:	bd80      	pop	{r7, pc}
  411aa6:	bf00      	nop
  411aa8:	400e1000 	.word	0x400e1000
  411aac:	0041194d 	.word	0x0041194d

00411ab0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  411ab0:	b480      	push	{r7}
  411ab2:	b085      	sub	sp, #20
  411ab4:	af00      	add	r7, sp, #0
  411ab6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  411ab8:	4b1d      	ldr	r3, [pc, #116]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411aba:	4a1d      	ldr	r2, [pc, #116]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411abc:	6b12      	ldr	r2, [r2, #48]	; 0x30
  411abe:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  411ac2:	687a      	ldr	r2, [r7, #4]
  411ac4:	430a      	orrs	r2, r1
  411ac6:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  411ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  411acc:	60fb      	str	r3, [r7, #12]
  411ace:	e007      	b.n	411ae0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  411ad0:	68fb      	ldr	r3, [r7, #12]
  411ad2:	2b00      	cmp	r3, #0
  411ad4:	d101      	bne.n	411ada <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  411ad6:	2301      	movs	r3, #1
  411ad8:	e023      	b.n	411b22 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  411ada:	68fb      	ldr	r3, [r7, #12]
  411adc:	3b01      	subs	r3, #1
  411ade:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  411ae0:	4b13      	ldr	r3, [pc, #76]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411ae4:	f003 0308 	and.w	r3, r3, #8
  411ae8:	2b00      	cmp	r3, #0
  411aea:	d0f1      	beq.n	411ad0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  411aec:	4b10      	ldr	r3, [pc, #64]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411aee:	4a10      	ldr	r2, [pc, #64]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
  411af2:	f022 0203 	bic.w	r2, r2, #3
  411af6:	f042 0202 	orr.w	r2, r2, #2
  411afa:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  411afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  411b00:	60fb      	str	r3, [r7, #12]
  411b02:	e007      	b.n	411b14 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  411b04:	68fb      	ldr	r3, [r7, #12]
  411b06:	2b00      	cmp	r3, #0
  411b08:	d101      	bne.n	411b0e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  411b0a:	2301      	movs	r3, #1
  411b0c:	e009      	b.n	411b22 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  411b0e:	68fb      	ldr	r3, [r7, #12]
  411b10:	3b01      	subs	r3, #1
  411b12:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  411b14:	4b06      	ldr	r3, [pc, #24]	; (411b30 <pmc_switch_mck_to_pllack+0x80>)
  411b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411b18:	f003 0308 	and.w	r3, r3, #8
  411b1c:	2b00      	cmp	r3, #0
  411b1e:	d0f1      	beq.n	411b04 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  411b20:	2300      	movs	r3, #0
}
  411b22:	4618      	mov	r0, r3
  411b24:	3714      	adds	r7, #20
  411b26:	46bd      	mov	sp, r7
  411b28:	f85d 7b04 	ldr.w	r7, [sp], #4
  411b2c:	4770      	bx	lr
  411b2e:	bf00      	nop
  411b30:	400e0400 	.word	0x400e0400

00411b34 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  411b34:	b480      	push	{r7}
  411b36:	b083      	sub	sp, #12
  411b38:	af00      	add	r7, sp, #0
  411b3a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  411b3c:	687b      	ldr	r3, [r7, #4]
  411b3e:	2b01      	cmp	r3, #1
  411b40:	d107      	bne.n	411b52 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  411b42:	4a08      	ldr	r2, [pc, #32]	; (411b64 <pmc_switch_sclk_to_32kxtal+0x30>)
  411b44:	4b07      	ldr	r3, [pc, #28]	; (411b64 <pmc_switch_sclk_to_32kxtal+0x30>)
  411b46:	689b      	ldr	r3, [r3, #8]
  411b48:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  411b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  411b50:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  411b52:	4b04      	ldr	r3, [pc, #16]	; (411b64 <pmc_switch_sclk_to_32kxtal+0x30>)
  411b54:	4a04      	ldr	r2, [pc, #16]	; (411b68 <pmc_switch_sclk_to_32kxtal+0x34>)
  411b56:	601a      	str	r2, [r3, #0]
}
  411b58:	370c      	adds	r7, #12
  411b5a:	46bd      	mov	sp, r7
  411b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  411b60:	4770      	bx	lr
  411b62:	bf00      	nop
  411b64:	400e1410 	.word	0x400e1410
  411b68:	a5000008 	.word	0xa5000008

00411b6c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  411b6c:	b480      	push	{r7}
  411b6e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  411b70:	4b09      	ldr	r3, [pc, #36]	; (411b98 <pmc_osc_is_ready_32kxtal+0x2c>)
  411b72:	695b      	ldr	r3, [r3, #20]
  411b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  411b78:	2b00      	cmp	r3, #0
  411b7a:	d007      	beq.n	411b8c <pmc_osc_is_ready_32kxtal+0x20>
  411b7c:	4b07      	ldr	r3, [pc, #28]	; (411b9c <pmc_osc_is_ready_32kxtal+0x30>)
  411b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
  411b84:	2b00      	cmp	r3, #0
  411b86:	d001      	beq.n	411b8c <pmc_osc_is_ready_32kxtal+0x20>
  411b88:	2301      	movs	r3, #1
  411b8a:	e000      	b.n	411b8e <pmc_osc_is_ready_32kxtal+0x22>
  411b8c:	2300      	movs	r3, #0
}
  411b8e:	4618      	mov	r0, r3
  411b90:	46bd      	mov	sp, r7
  411b92:	f85d 7b04 	ldr.w	r7, [sp], #4
  411b96:	4770      	bx	lr
  411b98:	400e1410 	.word	0x400e1410
  411b9c:	400e0400 	.word	0x400e0400

00411ba0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  411ba0:	b480      	push	{r7}
  411ba2:	b083      	sub	sp, #12
  411ba4:	af00      	add	r7, sp, #0
  411ba6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  411ba8:	4a18      	ldr	r2, [pc, #96]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411baa:	4b18      	ldr	r3, [pc, #96]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bac:	6a1b      	ldr	r3, [r3, #32]
  411bae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  411bb2:	f043 0308 	orr.w	r3, r3, #8
  411bb6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  411bb8:	bf00      	nop
  411bba:	4b14      	ldr	r3, [pc, #80]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  411bc2:	2b00      	cmp	r3, #0
  411bc4:	d0f9      	beq.n	411bba <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  411bc6:	4a11      	ldr	r2, [pc, #68]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bc8:	4b10      	ldr	r3, [pc, #64]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bca:	6a1b      	ldr	r3, [r3, #32]
  411bcc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  411bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  411bd4:	6879      	ldr	r1, [r7, #4]
  411bd6:	430b      	orrs	r3, r1
  411bd8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  411bdc:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  411bde:	bf00      	nop
  411be0:	4b0a      	ldr	r3, [pc, #40]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  411be8:	2b00      	cmp	r3, #0
  411bea:	d0f9      	beq.n	411be0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  411bec:	4a07      	ldr	r2, [pc, #28]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bee:	4b07      	ldr	r3, [pc, #28]	; (411c0c <pmc_switch_mainck_to_fastrc+0x6c>)
  411bf0:	6a1b      	ldr	r3, [r3, #32]
  411bf2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  411bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  411bfa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  411bfe:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  411c00:	370c      	adds	r7, #12
  411c02:	46bd      	mov	sp, r7
  411c04:	f85d 7b04 	ldr.w	r7, [sp], #4
  411c08:	4770      	bx	lr
  411c0a:	bf00      	nop
  411c0c:	400e0400 	.word	0x400e0400

00411c10 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  411c10:	b480      	push	{r7}
  411c12:	b083      	sub	sp, #12
  411c14:	af00      	add	r7, sp, #0
  411c16:	6078      	str	r0, [r7, #4]
  411c18:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  411c1a:	687b      	ldr	r3, [r7, #4]
  411c1c:	2b00      	cmp	r3, #0
  411c1e:	d008      	beq.n	411c32 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  411c20:	4916      	ldr	r1, [pc, #88]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c22:	4b16      	ldr	r3, [pc, #88]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c24:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  411c26:	4a16      	ldr	r2, [pc, #88]	; (411c80 <pmc_switch_mainck_to_xtal+0x70>)
  411c28:	401a      	ands	r2, r3
  411c2a:	4b16      	ldr	r3, [pc, #88]	; (411c84 <pmc_switch_mainck_to_xtal+0x74>)
  411c2c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  411c2e:	620b      	str	r3, [r1, #32]
  411c30:	e01e      	b.n	411c70 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  411c32:	4a12      	ldr	r2, [pc, #72]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c34:	4b11      	ldr	r3, [pc, #68]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c36:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  411c38:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  411c3c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  411c40:	6839      	ldr	r1, [r7, #0]
  411c42:	0209      	lsls	r1, r1, #8
  411c44:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  411c46:	430b      	orrs	r3, r1
  411c48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  411c4c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  411c50:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  411c52:	bf00      	nop
  411c54:	4b09      	ldr	r3, [pc, #36]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411c58:	f003 0301 	and.w	r3, r3, #1
  411c5c:	2b00      	cmp	r3, #0
  411c5e:	d0f9      	beq.n	411c54 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  411c60:	4a06      	ldr	r2, [pc, #24]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c62:	4b06      	ldr	r3, [pc, #24]	; (411c7c <pmc_switch_mainck_to_xtal+0x6c>)
  411c64:	6a1b      	ldr	r3, [r3, #32]
  411c66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  411c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  411c6e:	6213      	str	r3, [r2, #32]
	}
}
  411c70:	370c      	adds	r7, #12
  411c72:	46bd      	mov	sp, r7
  411c74:	f85d 7b04 	ldr.w	r7, [sp], #4
  411c78:	4770      	bx	lr
  411c7a:	bf00      	nop
  411c7c:	400e0400 	.word	0x400e0400
  411c80:	fec8fffc 	.word	0xfec8fffc
  411c84:	01370002 	.word	0x01370002

00411c88 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  411c88:	b480      	push	{r7}
  411c8a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  411c8c:	4b04      	ldr	r3, [pc, #16]	; (411ca0 <pmc_osc_is_ready_mainck+0x18>)
  411c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  411c94:	4618      	mov	r0, r3
  411c96:	46bd      	mov	sp, r7
  411c98:	f85d 7b04 	ldr.w	r7, [sp], #4
  411c9c:	4770      	bx	lr
  411c9e:	bf00      	nop
  411ca0:	400e0400 	.word	0x400e0400

00411ca4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  411ca4:	b480      	push	{r7}
  411ca6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  411ca8:	4b03      	ldr	r3, [pc, #12]	; (411cb8 <pmc_disable_pllack+0x14>)
  411caa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  411cae:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  411cb0:	46bd      	mov	sp, r7
  411cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  411cb6:	4770      	bx	lr
  411cb8:	400e0400 	.word	0x400e0400

00411cbc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  411cbc:	b480      	push	{r7}
  411cbe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  411cc0:	4b04      	ldr	r3, [pc, #16]	; (411cd4 <pmc_is_locked_pllack+0x18>)
  411cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411cc4:	f003 0302 	and.w	r3, r3, #2
}
  411cc8:	4618      	mov	r0, r3
  411cca:	46bd      	mov	sp, r7
  411ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
  411cd0:	4770      	bx	lr
  411cd2:	bf00      	nop
  411cd4:	400e0400 	.word	0x400e0400

00411cd8 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  411cd8:	b480      	push	{r7}
  411cda:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  411cdc:	4b03      	ldr	r3, [pc, #12]	; (411cec <pmc_disable_pllbck+0x14>)
  411cde:	2200      	movs	r2, #0
  411ce0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  411ce2:	46bd      	mov	sp, r7
  411ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
  411ce8:	4770      	bx	lr
  411cea:	bf00      	nop
  411cec:	400e0400 	.word	0x400e0400

00411cf0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  411cf0:	b480      	push	{r7}
  411cf2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  411cf4:	4b04      	ldr	r3, [pc, #16]	; (411d08 <pmc_is_locked_pllbck+0x18>)
  411cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  411cf8:	f003 0304 	and.w	r3, r3, #4
}
  411cfc:	4618      	mov	r0, r3
  411cfe:	46bd      	mov	sp, r7
  411d00:	f85d 7b04 	ldr.w	r7, [sp], #4
  411d04:	4770      	bx	lr
  411d06:	bf00      	nop
  411d08:	400e0400 	.word	0x400e0400

00411d0c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  411d0c:	b480      	push	{r7}
  411d0e:	b083      	sub	sp, #12
  411d10:	af00      	add	r7, sp, #0
  411d12:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  411d14:	687b      	ldr	r3, [r7, #4]
  411d16:	2b22      	cmp	r3, #34	; 0x22
  411d18:	d901      	bls.n	411d1e <pmc_enable_periph_clk+0x12>
		return 1;
  411d1a:	2301      	movs	r3, #1
  411d1c:	e02f      	b.n	411d7e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  411d1e:	687b      	ldr	r3, [r7, #4]
  411d20:	2b1f      	cmp	r3, #31
  411d22:	d813      	bhi.n	411d4c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  411d24:	4b19      	ldr	r3, [pc, #100]	; (411d8c <pmc_enable_periph_clk+0x80>)
  411d26:	699a      	ldr	r2, [r3, #24]
  411d28:	687b      	ldr	r3, [r7, #4]
  411d2a:	2101      	movs	r1, #1
  411d2c:	fa01 f303 	lsl.w	r3, r1, r3
  411d30:	401a      	ands	r2, r3
  411d32:	687b      	ldr	r3, [r7, #4]
  411d34:	2101      	movs	r1, #1
  411d36:	fa01 f303 	lsl.w	r3, r1, r3
  411d3a:	429a      	cmp	r2, r3
  411d3c:	d01e      	beq.n	411d7c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  411d3e:	4b13      	ldr	r3, [pc, #76]	; (411d8c <pmc_enable_periph_clk+0x80>)
  411d40:	687a      	ldr	r2, [r7, #4]
  411d42:	2101      	movs	r1, #1
  411d44:	fa01 f202 	lsl.w	r2, r1, r2
  411d48:	611a      	str	r2, [r3, #16]
  411d4a:	e017      	b.n	411d7c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  411d4c:	687b      	ldr	r3, [r7, #4]
  411d4e:	3b20      	subs	r3, #32
  411d50:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  411d52:	4b0e      	ldr	r3, [pc, #56]	; (411d8c <pmc_enable_periph_clk+0x80>)
  411d54:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  411d58:	687b      	ldr	r3, [r7, #4]
  411d5a:	2101      	movs	r1, #1
  411d5c:	fa01 f303 	lsl.w	r3, r1, r3
  411d60:	401a      	ands	r2, r3
  411d62:	687b      	ldr	r3, [r7, #4]
  411d64:	2101      	movs	r1, #1
  411d66:	fa01 f303 	lsl.w	r3, r1, r3
  411d6a:	429a      	cmp	r2, r3
  411d6c:	d006      	beq.n	411d7c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  411d6e:	4b07      	ldr	r3, [pc, #28]	; (411d8c <pmc_enable_periph_clk+0x80>)
  411d70:	687a      	ldr	r2, [r7, #4]
  411d72:	2101      	movs	r1, #1
  411d74:	fa01 f202 	lsl.w	r2, r1, r2
  411d78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  411d7c:	2300      	movs	r3, #0
}
  411d7e:	4618      	mov	r0, r3
  411d80:	370c      	adds	r7, #12
  411d82:	46bd      	mov	sp, r7
  411d84:	f85d 7b04 	ldr.w	r7, [sp], #4
  411d88:	4770      	bx	lr
  411d8a:	bf00      	nop
  411d8c:	400e0400 	.word	0x400e0400

00411d90 <wdt_get_timeout_value>:
 *
 * \return If the desired period is beyond the watchdog period, this function
 * returns WDT_INVALID_ARGUMENT. Otherwise it returns valid value.
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
  411d90:	b480      	push	{r7}
  411d92:	b085      	sub	sp, #20
  411d94:	af00      	add	r7, sp, #0
  411d96:	6078      	str	r0, [r7, #4]
  411d98:	6039      	str	r1, [r7, #0]
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
  411d9a:	4a10      	ldr	r2, [pc, #64]	; (411ddc <wdt_get_timeout_value+0x4c>)
  411d9c:	683b      	ldr	r3, [r7, #0]
  411d9e:	fbb2 f3f3 	udiv	r3, r2, r3
  411da2:	60fb      	str	r3, [r7, #12]
	max = min * WDT_MAX_VALUE;
  411da4:	68fa      	ldr	r2, [r7, #12]
  411da6:	4613      	mov	r3, r2
  411da8:	031b      	lsls	r3, r3, #12
  411daa:	1a9b      	subs	r3, r3, r2
  411dac:	60bb      	str	r3, [r7, #8]

	if ((ul_us < min) || (ul_us > max)) {
  411dae:	687a      	ldr	r2, [r7, #4]
  411db0:	68fb      	ldr	r3, [r7, #12]
  411db2:	429a      	cmp	r2, r3
  411db4:	d303      	bcc.n	411dbe <wdt_get_timeout_value+0x2e>
  411db6:	687a      	ldr	r2, [r7, #4]
  411db8:	68bb      	ldr	r3, [r7, #8]
  411dba:	429a      	cmp	r2, r3
  411dbc:	d902      	bls.n	411dc4 <wdt_get_timeout_value+0x34>
		return WDT_INVALID_ARGUMENT;
  411dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
  411dc2:	e005      	b.n	411dd0 <wdt_get_timeout_value+0x40>
	}

	return WDT_MR_WDV(ul_us / min);
  411dc4:	687a      	ldr	r2, [r7, #4]
  411dc6:	68fb      	ldr	r3, [r7, #12]
  411dc8:	fbb2 f3f3 	udiv	r3, r2, r3
  411dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
  411dd0:	4618      	mov	r0, r3
  411dd2:	3714      	adds	r7, #20
  411dd4:	46bd      	mov	sp, r7
  411dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  411dda:	4770      	bx	lr
  411ddc:	07a12000 	.word	0x07a12000

00411de0 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
  411de0:	b480      	push	{r7}
  411de2:	b085      	sub	sp, #20
  411de4:	af00      	add	r7, sp, #0
  411de6:	60f8      	str	r0, [r7, #12]
  411de8:	60b9      	str	r1, [r7, #8]
  411dea:	80fa      	strh	r2, [r7, #6]
  411dec:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
  411dee:	88fb      	ldrh	r3, [r7, #6]
  411df0:	f3c3 020b 	ubfx	r2, r3, #0, #12
  411df4:	68bb      	ldr	r3, [r7, #8]
  411df6:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  411df8:	88bb      	ldrh	r3, [r7, #4]
  411dfa:	041b      	lsls	r3, r3, #16
  411dfc:	4619      	mov	r1, r3
  411dfe:	4b05      	ldr	r3, [pc, #20]	; (411e14 <wdt_init+0x34>)
  411e00:	400b      	ands	r3, r1
  411e02:	431a      	orrs	r2, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
  411e04:	68fb      	ldr	r3, [r7, #12]
  411e06:	605a      	str	r2, [r3, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
  411e08:	3714      	adds	r7, #20
  411e0a:	46bd      	mov	sp, r7
  411e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  411e10:	4770      	bx	lr
  411e12:	bf00      	nop
  411e14:	0fff0000 	.word	0x0fff0000

00411e18 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
  411e18:	b480      	push	{r7}
  411e1a:	b083      	sub	sp, #12
  411e1c:	af00      	add	r7, sp, #0
  411e1e:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
  411e20:	687a      	ldr	r2, [r7, #4]
  411e22:	4b05      	ldr	r3, [pc, #20]	; (411e38 <wdt_restart+0x20>)
  411e24:	429a      	cmp	r2, r3
  411e26:	d102      	bne.n	411e2e <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  411e28:	687b      	ldr	r3, [r7, #4]
  411e2a:	4a04      	ldr	r2, [pc, #16]	; (411e3c <wdt_restart+0x24>)
  411e2c:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
  411e2e:	370c      	adds	r7, #12
  411e30:	46bd      	mov	sp, r7
  411e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  411e36:	4770      	bx	lr
  411e38:	400e1450 	.word	0x400e1450
  411e3c:	a5000001 	.word	0xa5000001

00411e40 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
  411e40:	b480      	push	{r7}
  411e42:	b083      	sub	sp, #12
  411e44:	af00      	add	r7, sp, #0
  411e46:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
  411e48:	687b      	ldr	r3, [r7, #4]
  411e4a:	689b      	ldr	r3, [r3, #8]
}
  411e4c:	4618      	mov	r0, r3
  411e4e:	370c      	adds	r7, #12
  411e50:	46bd      	mov	sp, r7
  411e52:	f85d 7b04 	ldr.w	r7, [sp], #4
  411e56:	4770      	bx	lr

00411e58 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  411e58:	b580      	push	{r7, lr}
  411e5a:	b084      	sub	sp, #16
  411e5c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  411e5e:	4b27      	ldr	r3, [pc, #156]	; (411efc <Reset_Handler+0xa4>)
  411e60:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  411e62:	4b27      	ldr	r3, [pc, #156]	; (411f00 <Reset_Handler+0xa8>)
  411e64:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  411e66:	68fa      	ldr	r2, [r7, #12]
  411e68:	68bb      	ldr	r3, [r7, #8]
  411e6a:	429a      	cmp	r2, r3
  411e6c:	d90d      	bls.n	411e8a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  411e6e:	e007      	b.n	411e80 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  411e70:	68bb      	ldr	r3, [r7, #8]
  411e72:	1d1a      	adds	r2, r3, #4
  411e74:	60ba      	str	r2, [r7, #8]
  411e76:	68fa      	ldr	r2, [r7, #12]
  411e78:	1d11      	adds	r1, r2, #4
  411e7a:	60f9      	str	r1, [r7, #12]
  411e7c:	6812      	ldr	r2, [r2, #0]
  411e7e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  411e80:	68ba      	ldr	r2, [r7, #8]
  411e82:	4b20      	ldr	r3, [pc, #128]	; (411f04 <Reset_Handler+0xac>)
  411e84:	429a      	cmp	r2, r3
  411e86:	d3f3      	bcc.n	411e70 <Reset_Handler+0x18>
  411e88:	e020      	b.n	411ecc <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  411e8a:	68fa      	ldr	r2, [r7, #12]
  411e8c:	68bb      	ldr	r3, [r7, #8]
  411e8e:	429a      	cmp	r2, r3
  411e90:	d21c      	bcs.n	411ecc <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  411e92:	4a1c      	ldr	r2, [pc, #112]	; (411f04 <Reset_Handler+0xac>)
  411e94:	4b1a      	ldr	r3, [pc, #104]	; (411f00 <Reset_Handler+0xa8>)
  411e96:	1ad3      	subs	r3, r2, r3
  411e98:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  411e9a:	68fa      	ldr	r2, [r7, #12]
  411e9c:	687b      	ldr	r3, [r7, #4]
  411e9e:	4413      	add	r3, r2
  411ea0:	3b04      	subs	r3, #4
  411ea2:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  411ea4:	68ba      	ldr	r2, [r7, #8]
  411ea6:	687b      	ldr	r3, [r7, #4]
  411ea8:	4413      	add	r3, r2
  411eaa:	3b04      	subs	r3, #4
  411eac:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  411eae:	e00a      	b.n	411ec6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  411eb0:	68bb      	ldr	r3, [r7, #8]
  411eb2:	1f1a      	subs	r2, r3, #4
  411eb4:	60ba      	str	r2, [r7, #8]
  411eb6:	68fa      	ldr	r2, [r7, #12]
  411eb8:	1f11      	subs	r1, r2, #4
  411eba:	60f9      	str	r1, [r7, #12]
  411ebc:	6812      	ldr	r2, [r2, #0]
  411ebe:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  411ec0:	687b      	ldr	r3, [r7, #4]
  411ec2:	3b04      	subs	r3, #4
  411ec4:	607b      	str	r3, [r7, #4]
  411ec6:	687b      	ldr	r3, [r7, #4]
  411ec8:	2b00      	cmp	r3, #0
  411eca:	d1f1      	bne.n	411eb0 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  411ecc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  411ece:	4b0e      	ldr	r3, [pc, #56]	; (411f08 <Reset_Handler+0xb0>)
  411ed0:	60bb      	str	r3, [r7, #8]
  411ed2:	e004      	b.n	411ede <Reset_Handler+0x86>
		*pDest++ = 0;
  411ed4:	68bb      	ldr	r3, [r7, #8]
  411ed6:	1d1a      	adds	r2, r3, #4
  411ed8:	60ba      	str	r2, [r7, #8]
  411eda:	2200      	movs	r2, #0
  411edc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  411ede:	68ba      	ldr	r2, [r7, #8]
  411ee0:	4b0a      	ldr	r3, [pc, #40]	; (411f0c <Reset_Handler+0xb4>)
  411ee2:	429a      	cmp	r2, r3
  411ee4:	d3f6      	bcc.n	411ed4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  411ee6:	4b0a      	ldr	r3, [pc, #40]	; (411f10 <Reset_Handler+0xb8>)
  411ee8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  411eea:	4b0a      	ldr	r3, [pc, #40]	; (411f14 <Reset_Handler+0xbc>)
  411eec:	68fa      	ldr	r2, [r7, #12]
  411eee:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  411ef0:	4b09      	ldr	r3, [pc, #36]	; (411f18 <Reset_Handler+0xc0>)
  411ef2:	4798      	blx	r3

	/* Branch to main function */
	main();
  411ef4:	4b09      	ldr	r3, [pc, #36]	; (411f1c <Reset_Handler+0xc4>)
  411ef6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  411ef8:	e7fe      	b.n	411ef8 <Reset_Handler+0xa0>
  411efa:	bf00      	nop
  411efc:	0041e1f4 	.word	0x0041e1f4
  411f00:	20000000 	.word	0x20000000
  411f04:	2000102c 	.word	0x2000102c
  411f08:	2000102c 	.word	0x2000102c
  411f0c:	200050ac 	.word	0x200050ac
  411f10:	00400000 	.word	0x00400000
  411f14:	e000ed00 	.word	0xe000ed00
  411f18:	00412999 	.word	0x00412999
  411f1c:	00412301 	.word	0x00412301

00411f20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  411f20:	b480      	push	{r7}
  411f22:	af00      	add	r7, sp, #0
	while (1) {
	}
  411f24:	e7fe      	b.n	411f24 <Dummy_Handler+0x4>
  411f26:	bf00      	nop

00411f28 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  411f28:	b480      	push	{r7}
  411f2a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  411f2c:	4b5d      	ldr	r3, [pc, #372]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  411f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  411f30:	f003 0303 	and.w	r3, r3, #3
  411f34:	2b03      	cmp	r3, #3
  411f36:	f200 8096 	bhi.w	412066 <SystemCoreClockUpdate+0x13e>
  411f3a:	a101      	add	r1, pc, #4	; (adr r1, 411f40 <SystemCoreClockUpdate+0x18>)
  411f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  411f40:	00411f51 	.word	0x00411f51
  411f44:	00411f71 	.word	0x00411f71
  411f48:	00411fbb 	.word	0x00411fbb
  411f4c:	00411fbb 	.word	0x00411fbb
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  411f50:	4b55      	ldr	r3, [pc, #340]	; (4120a8 <SystemCoreClockUpdate+0x180>)
  411f52:	695b      	ldr	r3, [r3, #20]
  411f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
  411f58:	2b00      	cmp	r3, #0
  411f5a:	d004      	beq.n	411f66 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  411f5c:	4b53      	ldr	r3, [pc, #332]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411f5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  411f62:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  411f64:	e080      	b.n	412068 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  411f66:	4b51      	ldr	r3, [pc, #324]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411f68:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  411f6c:	601a      	str	r2, [r3, #0]
			}
		break;
  411f6e:	e07b      	b.n	412068 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  411f70:	4b4c      	ldr	r3, [pc, #304]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  411f72:	6a1b      	ldr	r3, [r3, #32]
  411f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  411f78:	2b00      	cmp	r3, #0
  411f7a:	d003      	beq.n	411f84 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  411f7c:	4b4b      	ldr	r3, [pc, #300]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411f7e:	4a4c      	ldr	r2, [pc, #304]	; (4120b0 <SystemCoreClockUpdate+0x188>)
  411f80:	601a      	str	r2, [r3, #0]
  411f82:	e019      	b.n	411fb8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  411f84:	4b49      	ldr	r3, [pc, #292]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411f86:	4a4b      	ldr	r2, [pc, #300]	; (4120b4 <SystemCoreClockUpdate+0x18c>)
  411f88:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  411f8a:	4b46      	ldr	r3, [pc, #280]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  411f8c:	6a1b      	ldr	r3, [r3, #32]
  411f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  411f92:	2b10      	cmp	r3, #16
  411f94:	d008      	beq.n	411fa8 <SystemCoreClockUpdate+0x80>
  411f96:	2b20      	cmp	r3, #32
  411f98:	d00a      	beq.n	411fb0 <SystemCoreClockUpdate+0x88>
  411f9a:	2b00      	cmp	r3, #0
  411f9c:	d000      	beq.n	411fa0 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  411f9e:	e00b      	b.n	411fb8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  411fa0:	4b42      	ldr	r3, [pc, #264]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411fa2:	4a44      	ldr	r2, [pc, #272]	; (4120b4 <SystemCoreClockUpdate+0x18c>)
  411fa4:	601a      	str	r2, [r3, #0]
			break;
  411fa6:	e007      	b.n	411fb8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  411fa8:	4b40      	ldr	r3, [pc, #256]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411faa:	4a43      	ldr	r2, [pc, #268]	; (4120b8 <SystemCoreClockUpdate+0x190>)
  411fac:	601a      	str	r2, [r3, #0]
			break;
  411fae:	e003      	b.n	411fb8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  411fb0:	4b3e      	ldr	r3, [pc, #248]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411fb2:	4a3f      	ldr	r2, [pc, #252]	; (4120b0 <SystemCoreClockUpdate+0x188>)
  411fb4:	601a      	str	r2, [r3, #0]
			break;
  411fb6:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  411fb8:	e056      	b.n	412068 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  411fba:	4b3a      	ldr	r3, [pc, #232]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  411fbc:	6a1b      	ldr	r3, [r3, #32]
  411fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  411fc2:	2b00      	cmp	r3, #0
  411fc4:	d003      	beq.n	411fce <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  411fc6:	4b39      	ldr	r3, [pc, #228]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411fc8:	4a39      	ldr	r2, [pc, #228]	; (4120b0 <SystemCoreClockUpdate+0x188>)
  411fca:	601a      	str	r2, [r3, #0]
  411fcc:	e019      	b.n	412002 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  411fce:	4b37      	ldr	r3, [pc, #220]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411fd0:	4a38      	ldr	r2, [pc, #224]	; (4120b4 <SystemCoreClockUpdate+0x18c>)
  411fd2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  411fd4:	4b33      	ldr	r3, [pc, #204]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  411fd6:	6a1b      	ldr	r3, [r3, #32]
  411fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  411fdc:	2b10      	cmp	r3, #16
  411fde:	d008      	beq.n	411ff2 <SystemCoreClockUpdate+0xca>
  411fe0:	2b20      	cmp	r3, #32
  411fe2:	d00a      	beq.n	411ffa <SystemCoreClockUpdate+0xd2>
  411fe4:	2b00      	cmp	r3, #0
  411fe6:	d000      	beq.n	411fea <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  411fe8:	e00b      	b.n	412002 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  411fea:	4b30      	ldr	r3, [pc, #192]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411fec:	4a31      	ldr	r2, [pc, #196]	; (4120b4 <SystemCoreClockUpdate+0x18c>)
  411fee:	601a      	str	r2, [r3, #0]
					break;
  411ff0:	e007      	b.n	412002 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  411ff2:	4b2e      	ldr	r3, [pc, #184]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411ff4:	4a30      	ldr	r2, [pc, #192]	; (4120b8 <SystemCoreClockUpdate+0x190>)
  411ff6:	601a      	str	r2, [r3, #0]
					break;
  411ff8:	e003      	b.n	412002 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  411ffa:	4b2c      	ldr	r3, [pc, #176]	; (4120ac <SystemCoreClockUpdate+0x184>)
  411ffc:	4a2c      	ldr	r2, [pc, #176]	; (4120b0 <SystemCoreClockUpdate+0x188>)
  411ffe:	601a      	str	r2, [r3, #0]
					break;
  412000:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  412002:	4b28      	ldr	r3, [pc, #160]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  412004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  412006:	f003 0303 	and.w	r3, r3, #3
  41200a:	2b02      	cmp	r3, #2
  41200c:	d115      	bne.n	41203a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  41200e:	4b25      	ldr	r3, [pc, #148]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  412010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  412012:	4b2a      	ldr	r3, [pc, #168]	; (4120bc <SystemCoreClockUpdate+0x194>)
  412014:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  412016:	0c1b      	lsrs	r3, r3, #16
  412018:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  41201a:	4a24      	ldr	r2, [pc, #144]	; (4120ac <SystemCoreClockUpdate+0x184>)
  41201c:	6812      	ldr	r2, [r2, #0]
  41201e:	fb02 f203 	mul.w	r2, r2, r3
  412022:	4b22      	ldr	r3, [pc, #136]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412024:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  412026:	4b21      	ldr	r3, [pc, #132]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412028:	681a      	ldr	r2, [r3, #0]
  41202a:	4b1e      	ldr	r3, [pc, #120]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  41202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  41202e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  412030:	fbb2 f2f3 	udiv	r2, r2, r3
  412034:	4b1d      	ldr	r3, [pc, #116]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412036:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  412038:	e016      	b.n	412068 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  41203a:	4b1a      	ldr	r3, [pc, #104]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  41203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  41203e:	4b1f      	ldr	r3, [pc, #124]	; (4120bc <SystemCoreClockUpdate+0x194>)
  412040:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  412042:	0c1b      	lsrs	r3, r3, #16
  412044:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  412046:	4a19      	ldr	r2, [pc, #100]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412048:	6812      	ldr	r2, [r2, #0]
  41204a:	fb02 f203 	mul.w	r2, r2, r3
  41204e:	4b17      	ldr	r3, [pc, #92]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412050:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  412052:	4b16      	ldr	r3, [pc, #88]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412054:	681a      	ldr	r2, [r3, #0]
  412056:	4b13      	ldr	r3, [pc, #76]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  412058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  41205a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  41205c:	fbb2 f2f3 	udiv	r2, r2, r3
  412060:	4b12      	ldr	r3, [pc, #72]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412062:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  412064:	e000      	b.n	412068 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  412066:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  412068:	4b0e      	ldr	r3, [pc, #56]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  41206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41206c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  412070:	2b70      	cmp	r3, #112	; 0x70
  412072:	d108      	bne.n	412086 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  412074:	4b0d      	ldr	r3, [pc, #52]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412076:	681a      	ldr	r2, [r3, #0]
  412078:	4b11      	ldr	r3, [pc, #68]	; (4120c0 <SystemCoreClockUpdate+0x198>)
  41207a:	fba3 1302 	umull	r1, r3, r3, r2
  41207e:	085a      	lsrs	r2, r3, #1
  412080:	4b0a      	ldr	r3, [pc, #40]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412082:	601a      	str	r2, [r3, #0]
  412084:	e009      	b.n	41209a <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  412086:	4b09      	ldr	r3, [pc, #36]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412088:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  41208a:	4b06      	ldr	r3, [pc, #24]	; (4120a4 <SystemCoreClockUpdate+0x17c>)
  41208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41208e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  412092:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  412094:	40da      	lsrs	r2, r3
  412096:	4b05      	ldr	r3, [pc, #20]	; (4120ac <SystemCoreClockUpdate+0x184>)
  412098:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  41209a:	46bd      	mov	sp, r7
  41209c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4120a0:	4770      	bx	lr
  4120a2:	bf00      	nop
  4120a4:	400e0400 	.word	0x400e0400
  4120a8:	400e1410 	.word	0x400e1410
  4120ac:	20000784 	.word	0x20000784
  4120b0:	00b71b00 	.word	0x00b71b00
  4120b4:	003d0900 	.word	0x003d0900
  4120b8:	007a1200 	.word	0x007a1200
  4120bc:	07ff0000 	.word	0x07ff0000
  4120c0:	aaaaaaab 	.word	0xaaaaaaab

004120c4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4120c4:	b480      	push	{r7}
  4120c6:	b083      	sub	sp, #12
  4120c8:	af00      	add	r7, sp, #0
  4120ca:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4120cc:	687a      	ldr	r2, [r7, #4]
  4120ce:	4b18      	ldr	r3, [pc, #96]	; (412130 <system_init_flash+0x6c>)
  4120d0:	429a      	cmp	r2, r3
  4120d2:	d804      	bhi.n	4120de <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4120d4:	4b17      	ldr	r3, [pc, #92]	; (412134 <system_init_flash+0x70>)
  4120d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4120da:	601a      	str	r2, [r3, #0]
  4120dc:	e023      	b.n	412126 <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4120de:	687a      	ldr	r2, [r7, #4]
  4120e0:	4b15      	ldr	r3, [pc, #84]	; (412138 <system_init_flash+0x74>)
  4120e2:	429a      	cmp	r2, r3
  4120e4:	d803      	bhi.n	4120ee <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4120e6:	4b13      	ldr	r3, [pc, #76]	; (412134 <system_init_flash+0x70>)
  4120e8:	4a14      	ldr	r2, [pc, #80]	; (41213c <system_init_flash+0x78>)
  4120ea:	601a      	str	r2, [r3, #0]
  4120ec:	e01b      	b.n	412126 <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4120ee:	687a      	ldr	r2, [r7, #4]
  4120f0:	4b13      	ldr	r3, [pc, #76]	; (412140 <system_init_flash+0x7c>)
  4120f2:	429a      	cmp	r2, r3
  4120f4:	d803      	bhi.n	4120fe <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4120f6:	4b0f      	ldr	r3, [pc, #60]	; (412134 <system_init_flash+0x70>)
  4120f8:	4a12      	ldr	r2, [pc, #72]	; (412144 <system_init_flash+0x80>)
  4120fa:	601a      	str	r2, [r3, #0]
  4120fc:	e013      	b.n	412126 <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4120fe:	687a      	ldr	r2, [r7, #4]
  412100:	4b11      	ldr	r3, [pc, #68]	; (412148 <system_init_flash+0x84>)
  412102:	429a      	cmp	r2, r3
  412104:	d803      	bhi.n	41210e <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  412106:	4b0b      	ldr	r3, [pc, #44]	; (412134 <system_init_flash+0x70>)
  412108:	4a10      	ldr	r2, [pc, #64]	; (41214c <system_init_flash+0x88>)
  41210a:	601a      	str	r2, [r3, #0]
  41210c:	e00b      	b.n	412126 <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  41210e:	687a      	ldr	r2, [r7, #4]
  412110:	4b0f      	ldr	r3, [pc, #60]	; (412150 <system_init_flash+0x8c>)
  412112:	429a      	cmp	r2, r3
  412114:	d804      	bhi.n	412120 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  412116:	4b07      	ldr	r3, [pc, #28]	; (412134 <system_init_flash+0x70>)
  412118:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  41211c:	601a      	str	r2, [r3, #0]
  41211e:	e002      	b.n	412126 <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  412120:	4b04      	ldr	r3, [pc, #16]	; (412134 <system_init_flash+0x70>)
  412122:	4a0c      	ldr	r2, [pc, #48]	; (412154 <system_init_flash+0x90>)
  412124:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  412126:	370c      	adds	r7, #12
  412128:	46bd      	mov	sp, r7
  41212a:	f85d 7b04 	ldr.w	r7, [sp], #4
  41212e:	4770      	bx	lr
  412130:	01ba813f 	.word	0x01ba813f
  412134:	400e0a00 	.word	0x400e0a00
  412138:	0375027f 	.word	0x0375027f
  41213c:	04000100 	.word	0x04000100
  412140:	053ec5ff 	.word	0x053ec5ff
  412144:	04000200 	.word	0x04000200
  412148:	00a4cb7f 	.word	0x00a4cb7f
  41214c:	04000300 	.word	0x04000300
  412150:	07270dff 	.word	0x07270dff
  412154:	04000500 	.word	0x04000500

00412158 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  412158:	b480      	push	{r7}
  41215a:	b085      	sub	sp, #20
  41215c:	af00      	add	r7, sp, #0
  41215e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  412160:	4b10      	ldr	r3, [pc, #64]	; (4121a4 <_sbrk+0x4c>)
  412162:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  412164:	4b10      	ldr	r3, [pc, #64]	; (4121a8 <_sbrk+0x50>)
  412166:	681b      	ldr	r3, [r3, #0]
  412168:	2b00      	cmp	r3, #0
  41216a:	d102      	bne.n	412172 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  41216c:	4b0e      	ldr	r3, [pc, #56]	; (4121a8 <_sbrk+0x50>)
  41216e:	4a0f      	ldr	r2, [pc, #60]	; (4121ac <_sbrk+0x54>)
  412170:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  412172:	4b0d      	ldr	r3, [pc, #52]	; (4121a8 <_sbrk+0x50>)
  412174:	681b      	ldr	r3, [r3, #0]
  412176:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  412178:	68ba      	ldr	r2, [r7, #8]
  41217a:	687b      	ldr	r3, [r7, #4]
  41217c:	441a      	add	r2, r3
  41217e:	68fb      	ldr	r3, [r7, #12]
  412180:	429a      	cmp	r2, r3
  412182:	dd02      	ble.n	41218a <_sbrk+0x32>
		return (caddr_t) -1;	
  412184:	f04f 33ff 	mov.w	r3, #4294967295
  412188:	e006      	b.n	412198 <_sbrk+0x40>
	}

	heap += incr;
  41218a:	4b07      	ldr	r3, [pc, #28]	; (4121a8 <_sbrk+0x50>)
  41218c:	681a      	ldr	r2, [r3, #0]
  41218e:	687b      	ldr	r3, [r7, #4]
  412190:	441a      	add	r2, r3
  412192:	4b05      	ldr	r3, [pc, #20]	; (4121a8 <_sbrk+0x50>)
  412194:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  412196:	68bb      	ldr	r3, [r7, #8]
}
  412198:	4618      	mov	r0, r3
  41219a:	3714      	adds	r7, #20
  41219c:	46bd      	mov	sp, r7
  41219e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4121a2:	4770      	bx	lr
  4121a4:	2000fffc 	.word	0x2000fffc
  4121a8:	200039d8 	.word	0x200039d8
  4121ac:	200080b0 	.word	0x200080b0

004121b0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4121b0:	b480      	push	{r7}
  4121b2:	b083      	sub	sp, #12
  4121b4:	af00      	add	r7, sp, #0
  4121b6:	6078      	str	r0, [r7, #4]
	return -1;
  4121b8:	f04f 33ff 	mov.w	r3, #4294967295
}
  4121bc:	4618      	mov	r0, r3
  4121be:	370c      	adds	r7, #12
  4121c0:	46bd      	mov	sp, r7
  4121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4121c6:	4770      	bx	lr

004121c8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4121c8:	b480      	push	{r7}
  4121ca:	b083      	sub	sp, #12
  4121cc:	af00      	add	r7, sp, #0
  4121ce:	6078      	str	r0, [r7, #4]
  4121d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4121d2:	683b      	ldr	r3, [r7, #0]
  4121d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4121d8:	605a      	str	r2, [r3, #4]

	return 0;
  4121da:	2300      	movs	r3, #0
}
  4121dc:	4618      	mov	r0, r3
  4121de:	370c      	adds	r7, #12
  4121e0:	46bd      	mov	sp, r7
  4121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4121e6:	4770      	bx	lr

004121e8 <_isatty>:

extern int _isatty(int file)
{
  4121e8:	b480      	push	{r7}
  4121ea:	b083      	sub	sp, #12
  4121ec:	af00      	add	r7, sp, #0
  4121ee:	6078      	str	r0, [r7, #4]
	return 1;
  4121f0:	2301      	movs	r3, #1
}
  4121f2:	4618      	mov	r0, r3
  4121f4:	370c      	adds	r7, #12
  4121f6:	46bd      	mov	sp, r7
  4121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4121fc:	4770      	bx	lr
  4121fe:	bf00      	nop

00412200 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  412200:	b480      	push	{r7}
  412202:	b085      	sub	sp, #20
  412204:	af00      	add	r7, sp, #0
  412206:	60f8      	str	r0, [r7, #12]
  412208:	60b9      	str	r1, [r7, #8]
  41220a:	607a      	str	r2, [r7, #4]
	return 0;
  41220c:	2300      	movs	r3, #0
}
  41220e:	4618      	mov	r0, r3
  412210:	3714      	adds	r7, #20
  412212:	46bd      	mov	sp, r7
  412214:	f85d 7b04 	ldr.w	r7, [sp], #4
  412218:	4770      	bx	lr
  41221a:	bf00      	nop

0041221c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  41221c:	b480      	push	{r7}
  41221e:	b083      	sub	sp, #12
  412220:	af00      	add	r7, sp, #0
  412222:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  412224:	687b      	ldr	r3, [r7, #4]
  412226:	2b07      	cmp	r3, #7
  412228:	d825      	bhi.n	412276 <osc_get_rate+0x5a>
  41222a:	a201      	add	r2, pc, #4	; (adr r2, 412230 <osc_get_rate+0x14>)
  41222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  412230:	00412251 	.word	0x00412251
  412234:	00412257 	.word	0x00412257
  412238:	0041225d 	.word	0x0041225d
  41223c:	00412263 	.word	0x00412263
  412240:	00412267 	.word	0x00412267
  412244:	0041226b 	.word	0x0041226b
  412248:	0041226f 	.word	0x0041226f
  41224c:	00412273 	.word	0x00412273
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  412250:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  412254:	e010      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  412256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  41225a:	e00d      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  41225c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  412260:	e00a      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  412262:	4b08      	ldr	r3, [pc, #32]	; (412284 <osc_get_rate+0x68>)
  412264:	e008      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  412266:	4b08      	ldr	r3, [pc, #32]	; (412288 <osc_get_rate+0x6c>)
  412268:	e006      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  41226a:	4b08      	ldr	r3, [pc, #32]	; (41228c <osc_get_rate+0x70>)
  41226c:	e004      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  41226e:	4b08      	ldr	r3, [pc, #32]	; (412290 <osc_get_rate+0x74>)
  412270:	e002      	b.n	412278 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  412272:	4b07      	ldr	r3, [pc, #28]	; (412290 <osc_get_rate+0x74>)
  412274:	e000      	b.n	412278 <osc_get_rate+0x5c>
	}

	return 0;
  412276:	2300      	movs	r3, #0
}
  412278:	4618      	mov	r0, r3
  41227a:	370c      	adds	r7, #12
  41227c:	46bd      	mov	sp, r7
  41227e:	f85d 7b04 	ldr.w	r7, [sp], #4
  412282:	4770      	bx	lr
  412284:	003d0900 	.word	0x003d0900
  412288:	007a1200 	.word	0x007a1200
  41228c:	00b71b00 	.word	0x00b71b00
  412290:	00f42400 	.word	0x00f42400

00412294 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  412294:	b580      	push	{r7, lr}
  412296:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  412298:	2006      	movs	r0, #6
  41229a:	4b04      	ldr	r3, [pc, #16]	; (4122ac <sysclk_get_main_hz+0x18>)
  41229c:	4798      	blx	r3
  41229e:	4602      	mov	r2, r0
  4122a0:	4613      	mov	r3, r2
  4122a2:	011b      	lsls	r3, r3, #4
  4122a4:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4122a6:	4618      	mov	r0, r3
  4122a8:	bd80      	pop	{r7, pc}
  4122aa:	bf00      	nop
  4122ac:	0041221d 	.word	0x0041221d

004122b0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4122b0:	b580      	push	{r7, lr}
  4122b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4122b4:	4b02      	ldr	r3, [pc, #8]	; (4122c0 <sysclk_get_cpu_hz+0x10>)
  4122b6:	4798      	blx	r3
  4122b8:	4603      	mov	r3, r0
  4122ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4122bc:	4618      	mov	r0, r3
  4122be:	bd80      	pop	{r7, pc}
  4122c0:	00412295 	.word	0x00412295

004122c4 <HardFault_Handler>:
extern drv_uart_config_t usart1Config;
extern brainSettings_t brainSettings; 
volatile unsigned long sgSysTickCount = 0;

void HardFault_Handler()
{
  4122c4:	b480      	push	{r7}
  4122c6:	af00      	add	r7, sp, #0
	while(1); 
  4122c8:	e7fe      	b.n	4122c8 <HardFault_Handler+0x4>
  4122ca:	bf00      	nop

004122cc <MemManage_Handler>:
}
void MemManage_Handler()
{
  4122cc:	b480      	push	{r7}
  4122ce:	af00      	add	r7, sp, #0
	while(1); 
  4122d0:	e7fe      	b.n	4122d0 <MemManage_Handler+0x4>
  4122d2:	bf00      	nop

004122d4 <BusFault_Handler>:
}
void BusFault_Handler()
{
  4122d4:	b480      	push	{r7}
  4122d6:	af00      	add	r7, sp, #0
	while(1); 
  4122d8:	e7fe      	b.n	4122d8 <BusFault_Handler+0x4>
  4122da:	bf00      	nop

004122dc <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  4122dc:	b480      	push	{r7}
  4122de:	af00      	add	r7, sp, #0
	while(1); 
  4122e0:	e7fe      	b.n	4122e0 <UsageFault_Handler+0x4>
  4122e2:	bf00      	nop

004122e4 <SysTick_Handler>:

/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
  4122e4:	b580      	push	{r7, lr}
  4122e6:	af00      	add	r7, sp, #0
	sgSysTickCount++;
  4122e8:	4b03      	ldr	r3, [pc, #12]	; (4122f8 <SysTick_Handler+0x14>)
  4122ea:	681b      	ldr	r3, [r3, #0]
  4122ec:	1c5a      	adds	r2, r3, #1
  4122ee:	4b02      	ldr	r3, [pc, #8]	; (4122f8 <SysTick_Handler+0x14>)
  4122f0:	601a      	str	r2, [r3, #0]
	xPortSysTickHandler();
  4122f2:	4b02      	ldr	r3, [pc, #8]	; (4122fc <SysTick_Handler+0x18>)
  4122f4:	4798      	blx	r3
}
  4122f6:	bd80      	pop	{r7, pc}
  4122f8:	200039dc 	.word	0x200039dc
  4122fc:	0040a801 	.word	0x0040a801

00412300 <main>:


int main (void)
{
  412300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412304:	b085      	sub	sp, #20
  412306:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  412308:	4b2d      	ldr	r3, [pc, #180]	; (4123c0 <main+0xc0>)
  41230a:	2201      	movs	r2, #1
  41230c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  41230e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  412312:	b662      	cpsie	i
	//Initialize system clock and peripherals
	sysclk_init();
  412314:	4b2b      	ldr	r3, [pc, #172]	; (4123c4 <main+0xc4>)
  412316:	4798      	blx	r3
	#ifdef COMPILE_AS_BOOTLOADER
	runBootloader(); 
	#else
	
	//turn on pullups for SWDIO (PB5) and SWDIO (PB6)
	PIOB->PIO_PUER |= PIO_PB5 | PIO_PB6; 
  412318:	4b2b      	ldr	r3, [pc, #172]	; (4123c8 <main+0xc8>)
  41231a:	4a2b      	ldr	r2, [pc, #172]	; (4123c8 <main+0xc8>)
  41231c:	6e52      	ldr	r2, [r2, #100]	; 0x64
  41231e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  412322:	665a      	str	r2, [r3, #100]	; 0x64
	board_init();
  412324:	4b29      	ldr	r3, [pc, #164]	; (4123cc <main+0xcc>)
  412326:	4798      	blx	r3
	

	
	
	/*	Create task Main	*/
	if (xTaskCreate(TaskMain, "Main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_STACK_PRIORITY, NULL ) != pdPASS)
  412328:	2302      	movs	r3, #2
  41232a:	9300      	str	r3, [sp, #0]
  41232c:	2300      	movs	r3, #0
  41232e:	9301      	str	r3, [sp, #4]
  412330:	2300      	movs	r3, #0
  412332:	9302      	str	r3, [sp, #8]
  412334:	2300      	movs	r3, #0
  412336:	9303      	str	r3, [sp, #12]
  412338:	4825      	ldr	r0, [pc, #148]	; (4123d0 <main+0xd0>)
  41233a:	4926      	ldr	r1, [pc, #152]	; (4123d4 <main+0xd4>)
  41233c:	f44f 7240 	mov.w	r2, #768	; 0x300
  412340:	2300      	movs	r3, #0
  412342:	4e25      	ldr	r6, [pc, #148]	; (4123d8 <main+0xd8>)
  412344:	47b0      	blx	r6
	{
		//debugPrintString("Failed to create Main task\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  412346:	4b25      	ldr	r3, [pc, #148]	; (4123dc <main+0xdc>)
  412348:	4798      	blx	r3
	#endif
	//we should never get here. 
	/*	Debug code */
	while (1) 
	{		
		delay_ms(1000);
  41234a:	4b25      	ldr	r3, [pc, #148]	; (4123e0 <main+0xe0>)
  41234c:	4798      	blx	r3
  41234e:	4603      	mov	r3, r0
  412350:	4618      	mov	r0, r3
  412352:	f04f 0100 	mov.w	r1, #0
  412356:	4602      	mov	r2, r0
  412358:	460b      	mov	r3, r1
  41235a:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  41235e:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  412362:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  412366:	4652      	mov	r2, sl
  412368:	465b      	mov	r3, fp
  41236a:	015d      	lsls	r5, r3, #5
  41236c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  412370:	0154      	lsls	r4, r2, #5
  412372:	1aa4      	subs	r4, r4, r2
  412374:	eb65 0503 	sbc.w	r5, r5, r3
  412378:	1824      	adds	r4, r4, r0
  41237a:	eb45 0501 	adc.w	r5, r5, r1
  41237e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  412382:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  412386:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  41238a:	4644      	mov	r4, r8
  41238c:	464d      	mov	r5, r9
  41238e:	4620      	mov	r0, r4
  412390:	4629      	mov	r1, r5
  412392:	f243 62af 	movw	r2, #13999	; 0x36af
  412396:	f04f 0300 	mov.w	r3, #0
  41239a:	1812      	adds	r2, r2, r0
  41239c:	eb43 0301 	adc.w	r3, r3, r1
  4123a0:	4e10      	ldr	r6, [pc, #64]	; (4123e4 <main+0xe4>)
  4123a2:	4610      	mov	r0, r2
  4123a4:	4619      	mov	r1, r3
  4123a6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4123aa:	f04f 0300 	mov.w	r3, #0
  4123ae:	47b0      	blx	r6
  4123b0:	4602      	mov	r2, r0
  4123b2:	460b      	mov	r3, r1
  4123b4:	4613      	mov	r3, r2
  4123b6:	4618      	mov	r0, r3
  4123b8:	4b0b      	ldr	r3, [pc, #44]	; (4123e8 <main+0xe8>)
  4123ba:	4798      	blx	r3
	}
  4123bc:	e7c5      	b.n	41234a <main+0x4a>
  4123be:	bf00      	nop
  4123c0:	20000780 	.word	0x20000780
  4123c4:	00411119 	.word	0x00411119
  4123c8:	400e1000 	.word	0x400e1000
  4123cc:	004111b9 	.word	0x004111b9
  4123d0:	0040f639 	.word	0x0040f639
  4123d4:	0041dd84 	.word	0x0041dd84
  4123d8:	0040b029 	.word	0x0040b029
  4123dc:	0040b2b1 	.word	0x0040b2b1
  4123e0:	004122b1 	.word	0x004122b1
  4123e4:	004123ed 	.word	0x004123ed
  4123e8:	200000f5 	.word	0x200000f5

004123ec <__aeabi_uldivmod>:
  4123ec:	b94b      	cbnz	r3, 412402 <__aeabi_uldivmod+0x16>
  4123ee:	b942      	cbnz	r2, 412402 <__aeabi_uldivmod+0x16>
  4123f0:	2900      	cmp	r1, #0
  4123f2:	bf08      	it	eq
  4123f4:	2800      	cmpeq	r0, #0
  4123f6:	d002      	beq.n	4123fe <__aeabi_uldivmod+0x12>
  4123f8:	f04f 31ff 	mov.w	r1, #4294967295
  4123fc:	4608      	mov	r0, r1
  4123fe:	f000 b83b 	b.w	412478 <__aeabi_idiv0>
  412402:	b082      	sub	sp, #8
  412404:	46ec      	mov	ip, sp
  412406:	e92d 5000 	stmdb	sp!, {ip, lr}
  41240a:	f000 f81d 	bl	412448 <__gnu_uldivmod_helper>
  41240e:	f8dd e004 	ldr.w	lr, [sp, #4]
  412412:	b002      	add	sp, #8
  412414:	bc0c      	pop	{r2, r3}
  412416:	4770      	bx	lr

00412418 <__gnu_ldivmod_helper>:
  412418:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  41241c:	9e06      	ldr	r6, [sp, #24]
  41241e:	4614      	mov	r4, r2
  412420:	461d      	mov	r5, r3
  412422:	4680      	mov	r8, r0
  412424:	4689      	mov	r9, r1
  412426:	f000 f829 	bl	41247c <__divdi3>
  41242a:	fb04 f301 	mul.w	r3, r4, r1
  41242e:	fb00 3305 	mla	r3, r0, r5, r3
  412432:	fba4 4500 	umull	r4, r5, r4, r0
  412436:	441d      	add	r5, r3
  412438:	ebb8 0404 	subs.w	r4, r8, r4
  41243c:	eb69 0505 	sbc.w	r5, r9, r5
  412440:	e9c6 4500 	strd	r4, r5, [r6]
  412444:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00412448 <__gnu_uldivmod_helper>:
  412448:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  41244c:	9e06      	ldr	r6, [sp, #24]
  41244e:	4614      	mov	r4, r2
  412450:	4680      	mov	r8, r0
  412452:	4689      	mov	r9, r1
  412454:	461d      	mov	r5, r3
  412456:	f000 f95d 	bl	412714 <__udivdi3>
  41245a:	fb00 f505 	mul.w	r5, r0, r5
  41245e:	fb04 5301 	mla	r3, r4, r1, r5
  412462:	fba0 4504 	umull	r4, r5, r0, r4
  412466:	441d      	add	r5, r3
  412468:	ebb8 0404 	subs.w	r4, r8, r4
  41246c:	eb69 0505 	sbc.w	r5, r9, r5
  412470:	e9c6 4500 	strd	r4, r5, [r6]
  412474:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00412478 <__aeabi_idiv0>:
  412478:	4770      	bx	lr
  41247a:	bf00      	nop

0041247c <__divdi3>:
  41247c:	2900      	cmp	r1, #0
  41247e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412482:	f2c0 809f 	blt.w	4125c4 <__divdi3+0x148>
  412486:	2400      	movs	r4, #0
  412488:	2b00      	cmp	r3, #0
  41248a:	f2c0 8096 	blt.w	4125ba <__divdi3+0x13e>
  41248e:	4615      	mov	r5, r2
  412490:	4606      	mov	r6, r0
  412492:	460f      	mov	r7, r1
  412494:	2b00      	cmp	r3, #0
  412496:	d13e      	bne.n	412516 <__divdi3+0x9a>
  412498:	428a      	cmp	r2, r1
  41249a:	d957      	bls.n	41254c <__divdi3+0xd0>
  41249c:	fab2 f382 	clz	r3, r2
  4124a0:	b14b      	cbz	r3, 4124b6 <__divdi3+0x3a>
  4124a2:	f1c3 0220 	rsb	r2, r3, #32
  4124a6:	fa01 f703 	lsl.w	r7, r1, r3
  4124aa:	fa20 f202 	lsr.w	r2, r0, r2
  4124ae:	409d      	lsls	r5, r3
  4124b0:	4317      	orrs	r7, r2
  4124b2:	fa00 f603 	lsl.w	r6, r0, r3
  4124b6:	0c29      	lsrs	r1, r5, #16
  4124b8:	fbb7 f2f1 	udiv	r2, r7, r1
  4124bc:	0c33      	lsrs	r3, r6, #16
  4124be:	fb01 7c12 	mls	ip, r1, r2, r7
  4124c2:	b2a8      	uxth	r0, r5
  4124c4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  4124c8:	fb00 f302 	mul.w	r3, r0, r2
  4124cc:	42bb      	cmp	r3, r7
  4124ce:	d909      	bls.n	4124e4 <__divdi3+0x68>
  4124d0:	197f      	adds	r7, r7, r5
  4124d2:	f102 3cff 	add.w	ip, r2, #4294967295
  4124d6:	f080 8101 	bcs.w	4126dc <__divdi3+0x260>
  4124da:	42bb      	cmp	r3, r7
  4124dc:	f240 80fe 	bls.w	4126dc <__divdi3+0x260>
  4124e0:	3a02      	subs	r2, #2
  4124e2:	442f      	add	r7, r5
  4124e4:	1aff      	subs	r7, r7, r3
  4124e6:	fbb7 f3f1 	udiv	r3, r7, r1
  4124ea:	b2b6      	uxth	r6, r6
  4124ec:	fb01 7113 	mls	r1, r1, r3, r7
  4124f0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  4124f4:	fb00 f003 	mul.w	r0, r0, r3
  4124f8:	4288      	cmp	r0, r1
  4124fa:	d908      	bls.n	41250e <__divdi3+0x92>
  4124fc:	1949      	adds	r1, r1, r5
  4124fe:	f103 37ff 	add.w	r7, r3, #4294967295
  412502:	f080 80ed 	bcs.w	4126e0 <__divdi3+0x264>
  412506:	4288      	cmp	r0, r1
  412508:	f240 80ea 	bls.w	4126e0 <__divdi3+0x264>
  41250c:	3b02      	subs	r3, #2
  41250e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  412512:	2300      	movs	r3, #0
  412514:	e003      	b.n	41251e <__divdi3+0xa2>
  412516:	428b      	cmp	r3, r1
  412518:	d90a      	bls.n	412530 <__divdi3+0xb4>
  41251a:	2300      	movs	r3, #0
  41251c:	461a      	mov	r2, r3
  41251e:	4610      	mov	r0, r2
  412520:	4619      	mov	r1, r3
  412522:	b114      	cbz	r4, 41252a <__divdi3+0xae>
  412524:	4240      	negs	r0, r0
  412526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41252a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41252e:	4770      	bx	lr
  412530:	fab3 f883 	clz	r8, r3
  412534:	f1b8 0f00 	cmp.w	r8, #0
  412538:	f040 8084 	bne.w	412644 <__divdi3+0x1c8>
  41253c:	428b      	cmp	r3, r1
  41253e:	d302      	bcc.n	412546 <__divdi3+0xca>
  412540:	4282      	cmp	r2, r0
  412542:	f200 80de 	bhi.w	412702 <__divdi3+0x286>
  412546:	2300      	movs	r3, #0
  412548:	2201      	movs	r2, #1
  41254a:	e7e8      	b.n	41251e <__divdi3+0xa2>
  41254c:	b912      	cbnz	r2, 412554 <__divdi3+0xd8>
  41254e:	2301      	movs	r3, #1
  412550:	fbb3 f5f2 	udiv	r5, r3, r2
  412554:	fab5 f285 	clz	r2, r5
  412558:	2a00      	cmp	r2, #0
  41255a:	d139      	bne.n	4125d0 <__divdi3+0x154>
  41255c:	1b7f      	subs	r7, r7, r5
  41255e:	0c28      	lsrs	r0, r5, #16
  412560:	fa1f fc85 	uxth.w	ip, r5
  412564:	2301      	movs	r3, #1
  412566:	fbb7 f1f0 	udiv	r1, r7, r0
  41256a:	0c32      	lsrs	r2, r6, #16
  41256c:	fb00 7711 	mls	r7, r0, r1, r7
  412570:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  412574:	fb0c f201 	mul.w	r2, ip, r1
  412578:	42ba      	cmp	r2, r7
  41257a:	d907      	bls.n	41258c <__divdi3+0x110>
  41257c:	197f      	adds	r7, r7, r5
  41257e:	f101 38ff 	add.w	r8, r1, #4294967295
  412582:	d202      	bcs.n	41258a <__divdi3+0x10e>
  412584:	42ba      	cmp	r2, r7
  412586:	f200 80c1 	bhi.w	41270c <__divdi3+0x290>
  41258a:	4641      	mov	r1, r8
  41258c:	1abf      	subs	r7, r7, r2
  41258e:	fbb7 f2f0 	udiv	r2, r7, r0
  412592:	b2b6      	uxth	r6, r6
  412594:	fb00 7012 	mls	r0, r0, r2, r7
  412598:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  41259c:	fb0c fc02 	mul.w	ip, ip, r2
  4125a0:	4584      	cmp	ip, r0
  4125a2:	d907      	bls.n	4125b4 <__divdi3+0x138>
  4125a4:	1940      	adds	r0, r0, r5
  4125a6:	f102 37ff 	add.w	r7, r2, #4294967295
  4125aa:	d202      	bcs.n	4125b2 <__divdi3+0x136>
  4125ac:	4584      	cmp	ip, r0
  4125ae:	f200 80ab 	bhi.w	412708 <__divdi3+0x28c>
  4125b2:	463a      	mov	r2, r7
  4125b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4125b8:	e7b1      	b.n	41251e <__divdi3+0xa2>
  4125ba:	43e4      	mvns	r4, r4
  4125bc:	4252      	negs	r2, r2
  4125be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4125c2:	e764      	b.n	41248e <__divdi3+0x12>
  4125c4:	4240      	negs	r0, r0
  4125c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4125ca:	f04f 34ff 	mov.w	r4, #4294967295
  4125ce:	e75b      	b.n	412488 <__divdi3+0xc>
  4125d0:	4095      	lsls	r5, r2
  4125d2:	f1c2 0320 	rsb	r3, r2, #32
  4125d6:	fa27 f103 	lsr.w	r1, r7, r3
  4125da:	0c28      	lsrs	r0, r5, #16
  4125dc:	fa26 f303 	lsr.w	r3, r6, r3
  4125e0:	4097      	lsls	r7, r2
  4125e2:	fbb1 f8f0 	udiv	r8, r1, r0
  4125e6:	431f      	orrs	r7, r3
  4125e8:	0c3b      	lsrs	r3, r7, #16
  4125ea:	fb00 1118 	mls	r1, r0, r8, r1
  4125ee:	fa1f fc85 	uxth.w	ip, r5
  4125f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4125f6:	fb0c f308 	mul.w	r3, ip, r8
  4125fa:	428b      	cmp	r3, r1
  4125fc:	fa06 f602 	lsl.w	r6, r6, r2
  412600:	d908      	bls.n	412614 <__divdi3+0x198>
  412602:	1949      	adds	r1, r1, r5
  412604:	f108 32ff 	add.w	r2, r8, #4294967295
  412608:	d279      	bcs.n	4126fe <__divdi3+0x282>
  41260a:	428b      	cmp	r3, r1
  41260c:	d977      	bls.n	4126fe <__divdi3+0x282>
  41260e:	f1a8 0802 	sub.w	r8, r8, #2
  412612:	4429      	add	r1, r5
  412614:	1ac9      	subs	r1, r1, r3
  412616:	fbb1 f3f0 	udiv	r3, r1, r0
  41261a:	b2bf      	uxth	r7, r7
  41261c:	fb00 1113 	mls	r1, r0, r3, r1
  412620:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  412624:	fb0c f203 	mul.w	r2, ip, r3
  412628:	42ba      	cmp	r2, r7
  41262a:	d907      	bls.n	41263c <__divdi3+0x1c0>
  41262c:	197f      	adds	r7, r7, r5
  41262e:	f103 31ff 	add.w	r1, r3, #4294967295
  412632:	d260      	bcs.n	4126f6 <__divdi3+0x27a>
  412634:	42ba      	cmp	r2, r7
  412636:	d95e      	bls.n	4126f6 <__divdi3+0x27a>
  412638:	3b02      	subs	r3, #2
  41263a:	442f      	add	r7, r5
  41263c:	1abf      	subs	r7, r7, r2
  41263e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  412642:	e790      	b.n	412566 <__divdi3+0xea>
  412644:	f1c8 0220 	rsb	r2, r8, #32
  412648:	fa03 fc08 	lsl.w	ip, r3, r8
  41264c:	fa25 f302 	lsr.w	r3, r5, r2
  412650:	ea43 0c0c 	orr.w	ip, r3, ip
  412654:	ea4f 491c 	mov.w	r9, ip, lsr #16
  412658:	fa21 f302 	lsr.w	r3, r1, r2
  41265c:	fa01 f708 	lsl.w	r7, r1, r8
  412660:	fa20 f202 	lsr.w	r2, r0, r2
  412664:	fbb3 f1f9 	udiv	r1, r3, r9
  412668:	4317      	orrs	r7, r2
  41266a:	fb09 3311 	mls	r3, r9, r1, r3
  41266e:	0c3a      	lsrs	r2, r7, #16
  412670:	fa1f fb8c 	uxth.w	fp, ip
  412674:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  412678:	fb0b fa01 	mul.w	sl, fp, r1
  41267c:	459a      	cmp	sl, r3
  41267e:	fa05 f008 	lsl.w	r0, r5, r8
  412682:	d908      	bls.n	412696 <__divdi3+0x21a>
  412684:	eb13 030c 	adds.w	r3, r3, ip
  412688:	f101 32ff 	add.w	r2, r1, #4294967295
  41268c:	d235      	bcs.n	4126fa <__divdi3+0x27e>
  41268e:	459a      	cmp	sl, r3
  412690:	d933      	bls.n	4126fa <__divdi3+0x27e>
  412692:	3902      	subs	r1, #2
  412694:	4463      	add	r3, ip
  412696:	ebca 0303 	rsb	r3, sl, r3
  41269a:	fbb3 f2f9 	udiv	r2, r3, r9
  41269e:	fb09 3312 	mls	r3, r9, r2, r3
  4126a2:	b2bf      	uxth	r7, r7
  4126a4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4126a8:	fb0b f902 	mul.w	r9, fp, r2
  4126ac:	45b9      	cmp	r9, r7
  4126ae:	d908      	bls.n	4126c2 <__divdi3+0x246>
  4126b0:	eb17 070c 	adds.w	r7, r7, ip
  4126b4:	f102 33ff 	add.w	r3, r2, #4294967295
  4126b8:	d21b      	bcs.n	4126f2 <__divdi3+0x276>
  4126ba:	45b9      	cmp	r9, r7
  4126bc:	d919      	bls.n	4126f2 <__divdi3+0x276>
  4126be:	3a02      	subs	r2, #2
  4126c0:	4467      	add	r7, ip
  4126c2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  4126c6:	fba5 0100 	umull	r0, r1, r5, r0
  4126ca:	ebc9 0707 	rsb	r7, r9, r7
  4126ce:	428f      	cmp	r7, r1
  4126d0:	f04f 0300 	mov.w	r3, #0
  4126d4:	d30a      	bcc.n	4126ec <__divdi3+0x270>
  4126d6:	d005      	beq.n	4126e4 <__divdi3+0x268>
  4126d8:	462a      	mov	r2, r5
  4126da:	e720      	b.n	41251e <__divdi3+0xa2>
  4126dc:	4662      	mov	r2, ip
  4126de:	e701      	b.n	4124e4 <__divdi3+0x68>
  4126e0:	463b      	mov	r3, r7
  4126e2:	e714      	b.n	41250e <__divdi3+0x92>
  4126e4:	fa06 f608 	lsl.w	r6, r6, r8
  4126e8:	4286      	cmp	r6, r0
  4126ea:	d2f5      	bcs.n	4126d8 <__divdi3+0x25c>
  4126ec:	1e6a      	subs	r2, r5, #1
  4126ee:	2300      	movs	r3, #0
  4126f0:	e715      	b.n	41251e <__divdi3+0xa2>
  4126f2:	461a      	mov	r2, r3
  4126f4:	e7e5      	b.n	4126c2 <__divdi3+0x246>
  4126f6:	460b      	mov	r3, r1
  4126f8:	e7a0      	b.n	41263c <__divdi3+0x1c0>
  4126fa:	4611      	mov	r1, r2
  4126fc:	e7cb      	b.n	412696 <__divdi3+0x21a>
  4126fe:	4690      	mov	r8, r2
  412700:	e788      	b.n	412614 <__divdi3+0x198>
  412702:	4643      	mov	r3, r8
  412704:	4642      	mov	r2, r8
  412706:	e70a      	b.n	41251e <__divdi3+0xa2>
  412708:	3a02      	subs	r2, #2
  41270a:	e753      	b.n	4125b4 <__divdi3+0x138>
  41270c:	3902      	subs	r1, #2
  41270e:	442f      	add	r7, r5
  412710:	e73c      	b.n	41258c <__divdi3+0x110>
  412712:	bf00      	nop

00412714 <__udivdi3>:
  412714:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412718:	4614      	mov	r4, r2
  41271a:	4605      	mov	r5, r0
  41271c:	460e      	mov	r6, r1
  41271e:	2b00      	cmp	r3, #0
  412720:	d143      	bne.n	4127aa <__udivdi3+0x96>
  412722:	428a      	cmp	r2, r1
  412724:	d953      	bls.n	4127ce <__udivdi3+0xba>
  412726:	fab2 f782 	clz	r7, r2
  41272a:	b157      	cbz	r7, 412742 <__udivdi3+0x2e>
  41272c:	f1c7 0620 	rsb	r6, r7, #32
  412730:	fa20 f606 	lsr.w	r6, r0, r6
  412734:	fa01 f307 	lsl.w	r3, r1, r7
  412738:	fa02 f407 	lsl.w	r4, r2, r7
  41273c:	431e      	orrs	r6, r3
  41273e:	fa00 f507 	lsl.w	r5, r0, r7
  412742:	0c21      	lsrs	r1, r4, #16
  412744:	fbb6 f2f1 	udiv	r2, r6, r1
  412748:	0c2b      	lsrs	r3, r5, #16
  41274a:	fb01 6712 	mls	r7, r1, r2, r6
  41274e:	b2a0      	uxth	r0, r4
  412750:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  412754:	fb00 f302 	mul.w	r3, r0, r2
  412758:	42b3      	cmp	r3, r6
  41275a:	d909      	bls.n	412770 <__udivdi3+0x5c>
  41275c:	1936      	adds	r6, r6, r4
  41275e:	f102 37ff 	add.w	r7, r2, #4294967295
  412762:	f080 80f6 	bcs.w	412952 <__udivdi3+0x23e>
  412766:	42b3      	cmp	r3, r6
  412768:	f240 80f3 	bls.w	412952 <__udivdi3+0x23e>
  41276c:	3a02      	subs	r2, #2
  41276e:	4426      	add	r6, r4
  412770:	1af6      	subs	r6, r6, r3
  412772:	fbb6 f3f1 	udiv	r3, r6, r1
  412776:	b2ad      	uxth	r5, r5
  412778:	fb01 6113 	mls	r1, r1, r3, r6
  41277c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  412780:	fb00 f003 	mul.w	r0, r0, r3
  412784:	4288      	cmp	r0, r1
  412786:	d908      	bls.n	41279a <__udivdi3+0x86>
  412788:	1909      	adds	r1, r1, r4
  41278a:	f103 36ff 	add.w	r6, r3, #4294967295
  41278e:	f080 80e2 	bcs.w	412956 <__udivdi3+0x242>
  412792:	4288      	cmp	r0, r1
  412794:	f240 80df 	bls.w	412956 <__udivdi3+0x242>
  412798:	3b02      	subs	r3, #2
  41279a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  41279e:	2300      	movs	r3, #0
  4127a0:	4610      	mov	r0, r2
  4127a2:	4619      	mov	r1, r3
  4127a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4127a8:	4770      	bx	lr
  4127aa:	428b      	cmp	r3, r1
  4127ac:	d84a      	bhi.n	412844 <__udivdi3+0x130>
  4127ae:	fab3 f683 	clz	r6, r3
  4127b2:	2e00      	cmp	r6, #0
  4127b4:	d14d      	bne.n	412852 <__udivdi3+0x13e>
  4127b6:	428b      	cmp	r3, r1
  4127b8:	d302      	bcc.n	4127c0 <__udivdi3+0xac>
  4127ba:	4282      	cmp	r2, r0
  4127bc:	f200 80d6 	bhi.w	41296c <__udivdi3+0x258>
  4127c0:	2300      	movs	r3, #0
  4127c2:	2201      	movs	r2, #1
  4127c4:	4610      	mov	r0, r2
  4127c6:	4619      	mov	r1, r3
  4127c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4127cc:	4770      	bx	lr
  4127ce:	b912      	cbnz	r2, 4127d6 <__udivdi3+0xc2>
  4127d0:	2401      	movs	r4, #1
  4127d2:	fbb4 f4f2 	udiv	r4, r4, r2
  4127d6:	fab4 f284 	clz	r2, r4
  4127da:	2a00      	cmp	r2, #0
  4127dc:	d17c      	bne.n	4128d8 <__udivdi3+0x1c4>
  4127de:	1b09      	subs	r1, r1, r4
  4127e0:	0c26      	lsrs	r6, r4, #16
  4127e2:	b2a7      	uxth	r7, r4
  4127e4:	2301      	movs	r3, #1
  4127e6:	fbb1 f0f6 	udiv	r0, r1, r6
  4127ea:	0c2a      	lsrs	r2, r5, #16
  4127ec:	fb06 1110 	mls	r1, r6, r0, r1
  4127f0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  4127f4:	fb07 f200 	mul.w	r2, r7, r0
  4127f8:	428a      	cmp	r2, r1
  4127fa:	d907      	bls.n	41280c <__udivdi3+0xf8>
  4127fc:	1909      	adds	r1, r1, r4
  4127fe:	f100 3cff 	add.w	ip, r0, #4294967295
  412802:	d202      	bcs.n	41280a <__udivdi3+0xf6>
  412804:	428a      	cmp	r2, r1
  412806:	f200 80c3 	bhi.w	412990 <__udivdi3+0x27c>
  41280a:	4660      	mov	r0, ip
  41280c:	1a89      	subs	r1, r1, r2
  41280e:	fbb1 f2f6 	udiv	r2, r1, r6
  412812:	b2ad      	uxth	r5, r5
  412814:	fb06 1112 	mls	r1, r6, r2, r1
  412818:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  41281c:	fb07 f702 	mul.w	r7, r7, r2
  412820:	42af      	cmp	r7, r5
  412822:	d908      	bls.n	412836 <__udivdi3+0x122>
  412824:	192c      	adds	r4, r5, r4
  412826:	f102 31ff 	add.w	r1, r2, #4294967295
  41282a:	f080 8096 	bcs.w	41295a <__udivdi3+0x246>
  41282e:	42a7      	cmp	r7, r4
  412830:	f240 8093 	bls.w	41295a <__udivdi3+0x246>
  412834:	3a02      	subs	r2, #2
  412836:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  41283a:	4610      	mov	r0, r2
  41283c:	4619      	mov	r1, r3
  41283e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412842:	4770      	bx	lr
  412844:	2300      	movs	r3, #0
  412846:	461a      	mov	r2, r3
  412848:	4610      	mov	r0, r2
  41284a:	4619      	mov	r1, r3
  41284c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412850:	4770      	bx	lr
  412852:	f1c6 0520 	rsb	r5, r6, #32
  412856:	fa22 f405 	lsr.w	r4, r2, r5
  41285a:	40b3      	lsls	r3, r6
  41285c:	431c      	orrs	r4, r3
  41285e:	ea4f 4814 	mov.w	r8, r4, lsr #16
  412862:	fa21 f305 	lsr.w	r3, r1, r5
  412866:	fa01 f706 	lsl.w	r7, r1, r6
  41286a:	fa20 f505 	lsr.w	r5, r0, r5
  41286e:	fbb3 fcf8 	udiv	ip, r3, r8
  412872:	432f      	orrs	r7, r5
  412874:	fb08 331c 	mls	r3, r8, ip, r3
  412878:	0c3d      	lsrs	r5, r7, #16
  41287a:	fa1f fa84 	uxth.w	sl, r4
  41287e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  412882:	fb0a f90c 	mul.w	r9, sl, ip
  412886:	4599      	cmp	r9, r3
  412888:	fa02 fb06 	lsl.w	fp, r2, r6
  41288c:	d904      	bls.n	412898 <__udivdi3+0x184>
  41288e:	191b      	adds	r3, r3, r4
  412890:	f10c 32ff 	add.w	r2, ip, #4294967295
  412894:	d36d      	bcc.n	412972 <__udivdi3+0x25e>
  412896:	4694      	mov	ip, r2
  412898:	ebc9 0303 	rsb	r3, r9, r3
  41289c:	fbb3 f5f8 	udiv	r5, r3, r8
  4128a0:	fb08 3315 	mls	r3, r8, r5, r3
  4128a4:	b2bf      	uxth	r7, r7
  4128a6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4128aa:	fb0a f805 	mul.w	r8, sl, r5
  4128ae:	45b8      	cmp	r8, r7
  4128b0:	d904      	bls.n	4128bc <__udivdi3+0x1a8>
  4128b2:	193f      	adds	r7, r7, r4
  4128b4:	f105 33ff 	add.w	r3, r5, #4294967295
  4128b8:	d361      	bcc.n	41297e <__udivdi3+0x26a>
  4128ba:	461d      	mov	r5, r3
  4128bc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  4128c0:	fbac 230b 	umull	r2, r3, ip, fp
  4128c4:	ebc8 0707 	rsb	r7, r8, r7
  4128c8:	429f      	cmp	r7, r3
  4128ca:	f04f 0500 	mov.w	r5, #0
  4128ce:	d349      	bcc.n	412964 <__udivdi3+0x250>
  4128d0:	d045      	beq.n	41295e <__udivdi3+0x24a>
  4128d2:	4662      	mov	r2, ip
  4128d4:	462b      	mov	r3, r5
  4128d6:	e763      	b.n	4127a0 <__udivdi3+0x8c>
  4128d8:	4094      	lsls	r4, r2
  4128da:	f1c2 0320 	rsb	r3, r2, #32
  4128de:	fa21 fc03 	lsr.w	ip, r1, r3
  4128e2:	0c26      	lsrs	r6, r4, #16
  4128e4:	fa20 f303 	lsr.w	r3, r0, r3
  4128e8:	fa01 f502 	lsl.w	r5, r1, r2
  4128ec:	fbbc f8f6 	udiv	r8, ip, r6
  4128f0:	ea43 0105 	orr.w	r1, r3, r5
  4128f4:	0c0b      	lsrs	r3, r1, #16
  4128f6:	fb06 cc18 	mls	ip, r6, r8, ip
  4128fa:	b2a7      	uxth	r7, r4
  4128fc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  412900:	fb07 f308 	mul.w	r3, r7, r8
  412904:	4563      	cmp	r3, ip
  412906:	fa00 f502 	lsl.w	r5, r0, r2
  41290a:	d909      	bls.n	412920 <__udivdi3+0x20c>
  41290c:	eb1c 0c04 	adds.w	ip, ip, r4
  412910:	f108 32ff 	add.w	r2, r8, #4294967295
  412914:	d23a      	bcs.n	41298c <__udivdi3+0x278>
  412916:	4563      	cmp	r3, ip
  412918:	d938      	bls.n	41298c <__udivdi3+0x278>
  41291a:	f1a8 0802 	sub.w	r8, r8, #2
  41291e:	44a4      	add	ip, r4
  412920:	ebc3 0c0c 	rsb	ip, r3, ip
  412924:	fbbc f3f6 	udiv	r3, ip, r6
  412928:	b289      	uxth	r1, r1
  41292a:	fb06 cc13 	mls	ip, r6, r3, ip
  41292e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  412932:	fb07 f203 	mul.w	r2, r7, r3
  412936:	428a      	cmp	r2, r1
  412938:	d907      	bls.n	41294a <__udivdi3+0x236>
  41293a:	1909      	adds	r1, r1, r4
  41293c:	f103 30ff 	add.w	r0, r3, #4294967295
  412940:	d222      	bcs.n	412988 <__udivdi3+0x274>
  412942:	428a      	cmp	r2, r1
  412944:	d920      	bls.n	412988 <__udivdi3+0x274>
  412946:	3b02      	subs	r3, #2
  412948:	4421      	add	r1, r4
  41294a:	1a89      	subs	r1, r1, r2
  41294c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  412950:	e749      	b.n	4127e6 <__udivdi3+0xd2>
  412952:	463a      	mov	r2, r7
  412954:	e70c      	b.n	412770 <__udivdi3+0x5c>
  412956:	4633      	mov	r3, r6
  412958:	e71f      	b.n	41279a <__udivdi3+0x86>
  41295a:	460a      	mov	r2, r1
  41295c:	e76b      	b.n	412836 <__udivdi3+0x122>
  41295e:	40b0      	lsls	r0, r6
  412960:	4290      	cmp	r0, r2
  412962:	d2b6      	bcs.n	4128d2 <__udivdi3+0x1be>
  412964:	f10c 32ff 	add.w	r2, ip, #4294967295
  412968:	2300      	movs	r3, #0
  41296a:	e719      	b.n	4127a0 <__udivdi3+0x8c>
  41296c:	4633      	mov	r3, r6
  41296e:	4632      	mov	r2, r6
  412970:	e716      	b.n	4127a0 <__udivdi3+0x8c>
  412972:	4599      	cmp	r9, r3
  412974:	d98f      	bls.n	412896 <__udivdi3+0x182>
  412976:	f1ac 0c02 	sub.w	ip, ip, #2
  41297a:	4423      	add	r3, r4
  41297c:	e78c      	b.n	412898 <__udivdi3+0x184>
  41297e:	45b8      	cmp	r8, r7
  412980:	d99b      	bls.n	4128ba <__udivdi3+0x1a6>
  412982:	3d02      	subs	r5, #2
  412984:	4427      	add	r7, r4
  412986:	e799      	b.n	4128bc <__udivdi3+0x1a8>
  412988:	4603      	mov	r3, r0
  41298a:	e7de      	b.n	41294a <__udivdi3+0x236>
  41298c:	4690      	mov	r8, r2
  41298e:	e7c7      	b.n	412920 <__udivdi3+0x20c>
  412990:	3802      	subs	r0, #2
  412992:	4421      	add	r1, r4
  412994:	e73a      	b.n	41280c <__udivdi3+0xf8>
  412996:	bf00      	nop

00412998 <__libc_init_array>:
  412998:	b570      	push	{r4, r5, r6, lr}
  41299a:	4e0f      	ldr	r6, [pc, #60]	; (4129d8 <__libc_init_array+0x40>)
  41299c:	4d0f      	ldr	r5, [pc, #60]	; (4129dc <__libc_init_array+0x44>)
  41299e:	1b76      	subs	r6, r6, r5
  4129a0:	10b6      	asrs	r6, r6, #2
  4129a2:	d007      	beq.n	4129b4 <__libc_init_array+0x1c>
  4129a4:	3d04      	subs	r5, #4
  4129a6:	2400      	movs	r4, #0
  4129a8:	3401      	adds	r4, #1
  4129aa:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4129ae:	4798      	blx	r3
  4129b0:	42a6      	cmp	r6, r4
  4129b2:	d1f9      	bne.n	4129a8 <__libc_init_array+0x10>
  4129b4:	4e0a      	ldr	r6, [pc, #40]	; (4129e0 <__libc_init_array+0x48>)
  4129b6:	4d0b      	ldr	r5, [pc, #44]	; (4129e4 <__libc_init_array+0x4c>)
  4129b8:	1b76      	subs	r6, r6, r5
  4129ba:	f00b fc05 	bl	41e1c8 <_init>
  4129be:	10b6      	asrs	r6, r6, #2
  4129c0:	d008      	beq.n	4129d4 <__libc_init_array+0x3c>
  4129c2:	3d04      	subs	r5, #4
  4129c4:	2400      	movs	r4, #0
  4129c6:	3401      	adds	r4, #1
  4129c8:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4129cc:	4798      	blx	r3
  4129ce:	42a6      	cmp	r6, r4
  4129d0:	d1f9      	bne.n	4129c6 <__libc_init_array+0x2e>
  4129d2:	bd70      	pop	{r4, r5, r6, pc}
  4129d4:	bd70      	pop	{r4, r5, r6, pc}
  4129d6:	bf00      	nop
  4129d8:	0041e1d4 	.word	0x0041e1d4
  4129dc:	0041e1d4 	.word	0x0041e1d4
  4129e0:	0041e1dc 	.word	0x0041e1dc
  4129e4:	0041e1d4 	.word	0x0041e1d4

004129e8 <iprintf>:
  4129e8:	b40f      	push	{r0, r1, r2, r3}
  4129ea:	b500      	push	{lr}
  4129ec:	4a07      	ldr	r2, [pc, #28]	; (412a0c <iprintf+0x24>)
  4129ee:	b083      	sub	sp, #12
  4129f0:	ab04      	add	r3, sp, #16
  4129f2:	6810      	ldr	r0, [r2, #0]
  4129f4:	f853 2b04 	ldr.w	r2, [r3], #4
  4129f8:	6881      	ldr	r1, [r0, #8]
  4129fa:	9301      	str	r3, [sp, #4]
  4129fc:	f003 f976 	bl	415cec <_vfiprintf_r>
  412a00:	b003      	add	sp, #12
  412a02:	f85d eb04 	ldr.w	lr, [sp], #4
  412a06:	b004      	add	sp, #16
  412a08:	4770      	bx	lr
  412a0a:	bf00      	nop
  412a0c:	20000bb0 	.word	0x20000bb0

00412a10 <malloc>:
  412a10:	4b02      	ldr	r3, [pc, #8]	; (412a1c <malloc+0xc>)
  412a12:	4601      	mov	r1, r0
  412a14:	6818      	ldr	r0, [r3, #0]
  412a16:	f000 b80b 	b.w	412a30 <_malloc_r>
  412a1a:	bf00      	nop
  412a1c:	20000bb0 	.word	0x20000bb0

00412a20 <free>:
  412a20:	4b02      	ldr	r3, [pc, #8]	; (412a2c <free+0xc>)
  412a22:	4601      	mov	r1, r0
  412a24:	6818      	ldr	r0, [r3, #0]
  412a26:	f005 ba1b 	b.w	417e60 <_free_r>
  412a2a:	bf00      	nop
  412a2c:	20000bb0 	.word	0x20000bb0

00412a30 <_malloc_r>:
  412a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412a34:	f101 050b 	add.w	r5, r1, #11
  412a38:	2d16      	cmp	r5, #22
  412a3a:	b083      	sub	sp, #12
  412a3c:	4606      	mov	r6, r0
  412a3e:	d927      	bls.n	412a90 <_malloc_r+0x60>
  412a40:	f035 0507 	bics.w	r5, r5, #7
  412a44:	d427      	bmi.n	412a96 <_malloc_r+0x66>
  412a46:	42a9      	cmp	r1, r5
  412a48:	d825      	bhi.n	412a96 <_malloc_r+0x66>
  412a4a:	4630      	mov	r0, r6
  412a4c:	f000 fb70 	bl	413130 <__malloc_lock>
  412a50:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  412a54:	d226      	bcs.n	412aa4 <_malloc_r+0x74>
  412a56:	4fc1      	ldr	r7, [pc, #772]	; (412d5c <_malloc_r+0x32c>)
  412a58:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  412a5c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  412a60:	68dc      	ldr	r4, [r3, #12]
  412a62:	429c      	cmp	r4, r3
  412a64:	f000 81d2 	beq.w	412e0c <_malloc_r+0x3dc>
  412a68:	6863      	ldr	r3, [r4, #4]
  412a6a:	68e2      	ldr	r2, [r4, #12]
  412a6c:	68a1      	ldr	r1, [r4, #8]
  412a6e:	f023 0303 	bic.w	r3, r3, #3
  412a72:	4423      	add	r3, r4
  412a74:	4630      	mov	r0, r6
  412a76:	685d      	ldr	r5, [r3, #4]
  412a78:	60ca      	str	r2, [r1, #12]
  412a7a:	f045 0501 	orr.w	r5, r5, #1
  412a7e:	6091      	str	r1, [r2, #8]
  412a80:	605d      	str	r5, [r3, #4]
  412a82:	f000 fb57 	bl	413134 <__malloc_unlock>
  412a86:	3408      	adds	r4, #8
  412a88:	4620      	mov	r0, r4
  412a8a:	b003      	add	sp, #12
  412a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412a90:	2510      	movs	r5, #16
  412a92:	42a9      	cmp	r1, r5
  412a94:	d9d9      	bls.n	412a4a <_malloc_r+0x1a>
  412a96:	2400      	movs	r4, #0
  412a98:	230c      	movs	r3, #12
  412a9a:	4620      	mov	r0, r4
  412a9c:	6033      	str	r3, [r6, #0]
  412a9e:	b003      	add	sp, #12
  412aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412aa4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  412aa8:	f000 808a 	beq.w	412bc0 <_malloc_r+0x190>
  412aac:	f1bc 0f04 	cmp.w	ip, #4
  412ab0:	f200 8160 	bhi.w	412d74 <_malloc_r+0x344>
  412ab4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  412ab8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  412abc:	ea4f 014c 	mov.w	r1, ip, lsl #1
  412ac0:	4fa6      	ldr	r7, [pc, #664]	; (412d5c <_malloc_r+0x32c>)
  412ac2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  412ac6:	68cc      	ldr	r4, [r1, #12]
  412ac8:	42a1      	cmp	r1, r4
  412aca:	d105      	bne.n	412ad8 <_malloc_r+0xa8>
  412acc:	e00c      	b.n	412ae8 <_malloc_r+0xb8>
  412ace:	2b00      	cmp	r3, #0
  412ad0:	da7a      	bge.n	412bc8 <_malloc_r+0x198>
  412ad2:	68e4      	ldr	r4, [r4, #12]
  412ad4:	42a1      	cmp	r1, r4
  412ad6:	d007      	beq.n	412ae8 <_malloc_r+0xb8>
  412ad8:	6862      	ldr	r2, [r4, #4]
  412ada:	f022 0203 	bic.w	r2, r2, #3
  412ade:	1b53      	subs	r3, r2, r5
  412ae0:	2b0f      	cmp	r3, #15
  412ae2:	ddf4      	ble.n	412ace <_malloc_r+0x9e>
  412ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
  412ae8:	f10c 0c01 	add.w	ip, ip, #1
  412aec:	4b9b      	ldr	r3, [pc, #620]	; (412d5c <_malloc_r+0x32c>)
  412aee:	693c      	ldr	r4, [r7, #16]
  412af0:	f103 0e08 	add.w	lr, r3, #8
  412af4:	4574      	cmp	r4, lr
  412af6:	f000 817e 	beq.w	412df6 <_malloc_r+0x3c6>
  412afa:	6861      	ldr	r1, [r4, #4]
  412afc:	f021 0103 	bic.w	r1, r1, #3
  412b00:	1b4a      	subs	r2, r1, r5
  412b02:	2a0f      	cmp	r2, #15
  412b04:	f300 8164 	bgt.w	412dd0 <_malloc_r+0x3a0>
  412b08:	2a00      	cmp	r2, #0
  412b0a:	f8c3 e014 	str.w	lr, [r3, #20]
  412b0e:	f8c3 e010 	str.w	lr, [r3, #16]
  412b12:	da6a      	bge.n	412bea <_malloc_r+0x1ba>
  412b14:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  412b18:	f080 813a 	bcs.w	412d90 <_malloc_r+0x360>
  412b1c:	08c9      	lsrs	r1, r1, #3
  412b1e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  412b22:	ea4f 08a1 	mov.w	r8, r1, asr #2
  412b26:	685a      	ldr	r2, [r3, #4]
  412b28:	6881      	ldr	r1, [r0, #8]
  412b2a:	60a1      	str	r1, [r4, #8]
  412b2c:	f04f 0901 	mov.w	r9, #1
  412b30:	fa09 f808 	lsl.w	r8, r9, r8
  412b34:	ea48 0202 	orr.w	r2, r8, r2
  412b38:	60e0      	str	r0, [r4, #12]
  412b3a:	605a      	str	r2, [r3, #4]
  412b3c:	6084      	str	r4, [r0, #8]
  412b3e:	60cc      	str	r4, [r1, #12]
  412b40:	ea4f 03ac 	mov.w	r3, ip, asr #2
  412b44:	2001      	movs	r0, #1
  412b46:	4098      	lsls	r0, r3
  412b48:	4290      	cmp	r0, r2
  412b4a:	d85b      	bhi.n	412c04 <_malloc_r+0x1d4>
  412b4c:	4202      	tst	r2, r0
  412b4e:	d106      	bne.n	412b5e <_malloc_r+0x12e>
  412b50:	f02c 0c03 	bic.w	ip, ip, #3
  412b54:	0040      	lsls	r0, r0, #1
  412b56:	4202      	tst	r2, r0
  412b58:	f10c 0c04 	add.w	ip, ip, #4
  412b5c:	d0fa      	beq.n	412b54 <_malloc_r+0x124>
  412b5e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  412b62:	4644      	mov	r4, r8
  412b64:	46e1      	mov	r9, ip
  412b66:	68e3      	ldr	r3, [r4, #12]
  412b68:	429c      	cmp	r4, r3
  412b6a:	d107      	bne.n	412b7c <_malloc_r+0x14c>
  412b6c:	e145      	b.n	412dfa <_malloc_r+0x3ca>
  412b6e:	2a00      	cmp	r2, #0
  412b70:	f280 8156 	bge.w	412e20 <_malloc_r+0x3f0>
  412b74:	68db      	ldr	r3, [r3, #12]
  412b76:	429c      	cmp	r4, r3
  412b78:	f000 813f 	beq.w	412dfa <_malloc_r+0x3ca>
  412b7c:	6859      	ldr	r1, [r3, #4]
  412b7e:	f021 0103 	bic.w	r1, r1, #3
  412b82:	1b4a      	subs	r2, r1, r5
  412b84:	2a0f      	cmp	r2, #15
  412b86:	ddf2      	ble.n	412b6e <_malloc_r+0x13e>
  412b88:	461c      	mov	r4, r3
  412b8a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  412b8e:	f854 8f08 	ldr.w	r8, [r4, #8]!
  412b92:	1959      	adds	r1, r3, r5
  412b94:	f045 0901 	orr.w	r9, r5, #1
  412b98:	f042 0501 	orr.w	r5, r2, #1
  412b9c:	f8c3 9004 	str.w	r9, [r3, #4]
  412ba0:	4630      	mov	r0, r6
  412ba2:	f8c8 c00c 	str.w	ip, [r8, #12]
  412ba6:	f8cc 8008 	str.w	r8, [ip, #8]
  412baa:	6179      	str	r1, [r7, #20]
  412bac:	6139      	str	r1, [r7, #16]
  412bae:	f8c1 e00c 	str.w	lr, [r1, #12]
  412bb2:	f8c1 e008 	str.w	lr, [r1, #8]
  412bb6:	604d      	str	r5, [r1, #4]
  412bb8:	508a      	str	r2, [r1, r2]
  412bba:	f000 fabb 	bl	413134 <__malloc_unlock>
  412bbe:	e763      	b.n	412a88 <_malloc_r+0x58>
  412bc0:	217e      	movs	r1, #126	; 0x7e
  412bc2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  412bc6:	e77b      	b.n	412ac0 <_malloc_r+0x90>
  412bc8:	4422      	add	r2, r4
  412bca:	68e3      	ldr	r3, [r4, #12]
  412bcc:	6850      	ldr	r0, [r2, #4]
  412bce:	68a1      	ldr	r1, [r4, #8]
  412bd0:	f040 0501 	orr.w	r5, r0, #1
  412bd4:	60cb      	str	r3, [r1, #12]
  412bd6:	4630      	mov	r0, r6
  412bd8:	6099      	str	r1, [r3, #8]
  412bda:	6055      	str	r5, [r2, #4]
  412bdc:	f000 faaa 	bl	413134 <__malloc_unlock>
  412be0:	3408      	adds	r4, #8
  412be2:	4620      	mov	r0, r4
  412be4:	b003      	add	sp, #12
  412be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412bea:	4421      	add	r1, r4
  412bec:	4630      	mov	r0, r6
  412bee:	684b      	ldr	r3, [r1, #4]
  412bf0:	f043 0301 	orr.w	r3, r3, #1
  412bf4:	604b      	str	r3, [r1, #4]
  412bf6:	f000 fa9d 	bl	413134 <__malloc_unlock>
  412bfa:	3408      	adds	r4, #8
  412bfc:	4620      	mov	r0, r4
  412bfe:	b003      	add	sp, #12
  412c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412c04:	68bc      	ldr	r4, [r7, #8]
  412c06:	6863      	ldr	r3, [r4, #4]
  412c08:	f023 0903 	bic.w	r9, r3, #3
  412c0c:	45a9      	cmp	r9, r5
  412c0e:	d304      	bcc.n	412c1a <_malloc_r+0x1ea>
  412c10:	ebc5 0309 	rsb	r3, r5, r9
  412c14:	2b0f      	cmp	r3, #15
  412c16:	f300 8091 	bgt.w	412d3c <_malloc_r+0x30c>
  412c1a:	4b51      	ldr	r3, [pc, #324]	; (412d60 <_malloc_r+0x330>)
  412c1c:	4a51      	ldr	r2, [pc, #324]	; (412d64 <_malloc_r+0x334>)
  412c1e:	6819      	ldr	r1, [r3, #0]
  412c20:	6813      	ldr	r3, [r2, #0]
  412c22:	3301      	adds	r3, #1
  412c24:	eb05 0a01 	add.w	sl, r5, r1
  412c28:	eb04 0b09 	add.w	fp, r4, r9
  412c2c:	f000 8161 	beq.w	412ef2 <_malloc_r+0x4c2>
  412c30:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  412c34:	f10a 0a0f 	add.w	sl, sl, #15
  412c38:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  412c3c:	f02a 0a0f 	bic.w	sl, sl, #15
  412c40:	4630      	mov	r0, r6
  412c42:	4651      	mov	r1, sl
  412c44:	9201      	str	r2, [sp, #4]
  412c46:	f000 fa77 	bl	413138 <_sbrk_r>
  412c4a:	f1b0 3fff 	cmp.w	r0, #4294967295
  412c4e:	4680      	mov	r8, r0
  412c50:	9a01      	ldr	r2, [sp, #4]
  412c52:	f000 8100 	beq.w	412e56 <_malloc_r+0x426>
  412c56:	4583      	cmp	fp, r0
  412c58:	f200 80fa 	bhi.w	412e50 <_malloc_r+0x420>
  412c5c:	f8df c110 	ldr.w	ip, [pc, #272]	; 412d70 <_malloc_r+0x340>
  412c60:	f8dc 3000 	ldr.w	r3, [ip]
  412c64:	45c3      	cmp	fp, r8
  412c66:	4453      	add	r3, sl
  412c68:	f8cc 3000 	str.w	r3, [ip]
  412c6c:	f000 814a 	beq.w	412f04 <_malloc_r+0x4d4>
  412c70:	6812      	ldr	r2, [r2, #0]
  412c72:	493c      	ldr	r1, [pc, #240]	; (412d64 <_malloc_r+0x334>)
  412c74:	3201      	adds	r2, #1
  412c76:	bf1b      	ittet	ne
  412c78:	ebcb 0b08 	rsbne	fp, fp, r8
  412c7c:	445b      	addne	r3, fp
  412c7e:	f8c1 8000 	streq.w	r8, [r1]
  412c82:	f8cc 3000 	strne.w	r3, [ip]
  412c86:	f018 0307 	ands.w	r3, r8, #7
  412c8a:	f000 8113 	beq.w	412eb4 <_malloc_r+0x484>
  412c8e:	f1c3 0208 	rsb	r2, r3, #8
  412c92:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  412c96:	4490      	add	r8, r2
  412c98:	3308      	adds	r3, #8
  412c9a:	44c2      	add	sl, r8
  412c9c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  412ca0:	ebca 0a03 	rsb	sl, sl, r3
  412ca4:	4651      	mov	r1, sl
  412ca6:	4630      	mov	r0, r6
  412ca8:	f8cd c004 	str.w	ip, [sp, #4]
  412cac:	f000 fa44 	bl	413138 <_sbrk_r>
  412cb0:	1c43      	adds	r3, r0, #1
  412cb2:	f8dd c004 	ldr.w	ip, [sp, #4]
  412cb6:	f000 8135 	beq.w	412f24 <_malloc_r+0x4f4>
  412cba:	ebc8 0200 	rsb	r2, r8, r0
  412cbe:	4452      	add	r2, sl
  412cc0:	f042 0201 	orr.w	r2, r2, #1
  412cc4:	f8dc 3000 	ldr.w	r3, [ip]
  412cc8:	f8c7 8008 	str.w	r8, [r7, #8]
  412ccc:	4453      	add	r3, sl
  412cce:	42bc      	cmp	r4, r7
  412cd0:	f8c8 2004 	str.w	r2, [r8, #4]
  412cd4:	f8cc 3000 	str.w	r3, [ip]
  412cd8:	f8df a094 	ldr.w	sl, [pc, #148]	; 412d70 <_malloc_r+0x340>
  412cdc:	d015      	beq.n	412d0a <_malloc_r+0x2da>
  412cde:	f1b9 0f0f 	cmp.w	r9, #15
  412ce2:	f240 80ea 	bls.w	412eba <_malloc_r+0x48a>
  412ce6:	6861      	ldr	r1, [r4, #4]
  412ce8:	f1a9 020c 	sub.w	r2, r9, #12
  412cec:	f022 0207 	bic.w	r2, r2, #7
  412cf0:	f001 0e01 	and.w	lr, r1, #1
  412cf4:	18a1      	adds	r1, r4, r2
  412cf6:	2005      	movs	r0, #5
  412cf8:	ea42 0e0e 	orr.w	lr, r2, lr
  412cfc:	2a0f      	cmp	r2, #15
  412cfe:	f8c4 e004 	str.w	lr, [r4, #4]
  412d02:	6048      	str	r0, [r1, #4]
  412d04:	6088      	str	r0, [r1, #8]
  412d06:	f200 8111 	bhi.w	412f2c <_malloc_r+0x4fc>
  412d0a:	4a17      	ldr	r2, [pc, #92]	; (412d68 <_malloc_r+0x338>)
  412d0c:	68bc      	ldr	r4, [r7, #8]
  412d0e:	6811      	ldr	r1, [r2, #0]
  412d10:	428b      	cmp	r3, r1
  412d12:	bf88      	it	hi
  412d14:	6013      	strhi	r3, [r2, #0]
  412d16:	4a15      	ldr	r2, [pc, #84]	; (412d6c <_malloc_r+0x33c>)
  412d18:	6811      	ldr	r1, [r2, #0]
  412d1a:	428b      	cmp	r3, r1
  412d1c:	bf88      	it	hi
  412d1e:	6013      	strhi	r3, [r2, #0]
  412d20:	6862      	ldr	r2, [r4, #4]
  412d22:	f022 0203 	bic.w	r2, r2, #3
  412d26:	4295      	cmp	r5, r2
  412d28:	ebc5 0302 	rsb	r3, r5, r2
  412d2c:	d801      	bhi.n	412d32 <_malloc_r+0x302>
  412d2e:	2b0f      	cmp	r3, #15
  412d30:	dc04      	bgt.n	412d3c <_malloc_r+0x30c>
  412d32:	4630      	mov	r0, r6
  412d34:	f000 f9fe 	bl	413134 <__malloc_unlock>
  412d38:	2400      	movs	r4, #0
  412d3a:	e6a5      	b.n	412a88 <_malloc_r+0x58>
  412d3c:	1962      	adds	r2, r4, r5
  412d3e:	f043 0301 	orr.w	r3, r3, #1
  412d42:	f045 0501 	orr.w	r5, r5, #1
  412d46:	6065      	str	r5, [r4, #4]
  412d48:	4630      	mov	r0, r6
  412d4a:	60ba      	str	r2, [r7, #8]
  412d4c:	6053      	str	r3, [r2, #4]
  412d4e:	f000 f9f1 	bl	413134 <__malloc_unlock>
  412d52:	3408      	adds	r4, #8
  412d54:	4620      	mov	r0, r4
  412d56:	b003      	add	sp, #12
  412d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412d5c:	20000bb4 	.word	0x20000bb4
  412d60:	200039e8 	.word	0x200039e8
  412d64:	20000fc0 	.word	0x20000fc0
  412d68:	200039e4 	.word	0x200039e4
  412d6c:	200039e0 	.word	0x200039e0
  412d70:	200039ec 	.word	0x200039ec
  412d74:	f1bc 0f14 	cmp.w	ip, #20
  412d78:	d961      	bls.n	412e3e <_malloc_r+0x40e>
  412d7a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  412d7e:	f200 808f 	bhi.w	412ea0 <_malloc_r+0x470>
  412d82:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  412d86:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  412d8a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  412d8e:	e697      	b.n	412ac0 <_malloc_r+0x90>
  412d90:	0a4b      	lsrs	r3, r1, #9
  412d92:	2b04      	cmp	r3, #4
  412d94:	d958      	bls.n	412e48 <_malloc_r+0x418>
  412d96:	2b14      	cmp	r3, #20
  412d98:	f200 80ae 	bhi.w	412ef8 <_malloc_r+0x4c8>
  412d9c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  412da0:	0050      	lsls	r0, r2, #1
  412da2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  412da6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 412f64 <_malloc_r+0x534>
  412daa:	6883      	ldr	r3, [r0, #8]
  412dac:	4283      	cmp	r3, r0
  412dae:	f000 808a 	beq.w	412ec6 <_malloc_r+0x496>
  412db2:	685a      	ldr	r2, [r3, #4]
  412db4:	f022 0203 	bic.w	r2, r2, #3
  412db8:	4291      	cmp	r1, r2
  412dba:	d202      	bcs.n	412dc2 <_malloc_r+0x392>
  412dbc:	689b      	ldr	r3, [r3, #8]
  412dbe:	4298      	cmp	r0, r3
  412dc0:	d1f7      	bne.n	412db2 <_malloc_r+0x382>
  412dc2:	68d9      	ldr	r1, [r3, #12]
  412dc4:	687a      	ldr	r2, [r7, #4]
  412dc6:	60e1      	str	r1, [r4, #12]
  412dc8:	60a3      	str	r3, [r4, #8]
  412dca:	608c      	str	r4, [r1, #8]
  412dcc:	60dc      	str	r4, [r3, #12]
  412dce:	e6b7      	b.n	412b40 <_malloc_r+0x110>
  412dd0:	1961      	adds	r1, r4, r5
  412dd2:	f042 0701 	orr.w	r7, r2, #1
  412dd6:	f045 0501 	orr.w	r5, r5, #1
  412dda:	6065      	str	r5, [r4, #4]
  412ddc:	4630      	mov	r0, r6
  412dde:	6159      	str	r1, [r3, #20]
  412de0:	6119      	str	r1, [r3, #16]
  412de2:	f8c1 e00c 	str.w	lr, [r1, #12]
  412de6:	f8c1 e008 	str.w	lr, [r1, #8]
  412dea:	604f      	str	r7, [r1, #4]
  412dec:	508a      	str	r2, [r1, r2]
  412dee:	3408      	adds	r4, #8
  412df0:	f000 f9a0 	bl	413134 <__malloc_unlock>
  412df4:	e648      	b.n	412a88 <_malloc_r+0x58>
  412df6:	685a      	ldr	r2, [r3, #4]
  412df8:	e6a2      	b.n	412b40 <_malloc_r+0x110>
  412dfa:	f109 0901 	add.w	r9, r9, #1
  412dfe:	f019 0f03 	tst.w	r9, #3
  412e02:	f104 0408 	add.w	r4, r4, #8
  412e06:	f47f aeae 	bne.w	412b66 <_malloc_r+0x136>
  412e0a:	e02d      	b.n	412e68 <_malloc_r+0x438>
  412e0c:	f104 0308 	add.w	r3, r4, #8
  412e10:	6964      	ldr	r4, [r4, #20]
  412e12:	42a3      	cmp	r3, r4
  412e14:	bf08      	it	eq
  412e16:	f10c 0c02 	addeq.w	ip, ip, #2
  412e1a:	f43f ae67 	beq.w	412aec <_malloc_r+0xbc>
  412e1e:	e623      	b.n	412a68 <_malloc_r+0x38>
  412e20:	4419      	add	r1, r3
  412e22:	461c      	mov	r4, r3
  412e24:	6848      	ldr	r0, [r1, #4]
  412e26:	68db      	ldr	r3, [r3, #12]
  412e28:	f854 2f08 	ldr.w	r2, [r4, #8]!
  412e2c:	f040 0501 	orr.w	r5, r0, #1
  412e30:	604d      	str	r5, [r1, #4]
  412e32:	4630      	mov	r0, r6
  412e34:	60d3      	str	r3, [r2, #12]
  412e36:	609a      	str	r2, [r3, #8]
  412e38:	f000 f97c 	bl	413134 <__malloc_unlock>
  412e3c:	e624      	b.n	412a88 <_malloc_r+0x58>
  412e3e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  412e42:	ea4f 014c 	mov.w	r1, ip, lsl #1
  412e46:	e63b      	b.n	412ac0 <_malloc_r+0x90>
  412e48:	098a      	lsrs	r2, r1, #6
  412e4a:	3238      	adds	r2, #56	; 0x38
  412e4c:	0050      	lsls	r0, r2, #1
  412e4e:	e7a8      	b.n	412da2 <_malloc_r+0x372>
  412e50:	42bc      	cmp	r4, r7
  412e52:	f43f af03 	beq.w	412c5c <_malloc_r+0x22c>
  412e56:	68bc      	ldr	r4, [r7, #8]
  412e58:	6862      	ldr	r2, [r4, #4]
  412e5a:	f022 0203 	bic.w	r2, r2, #3
  412e5e:	e762      	b.n	412d26 <_malloc_r+0x2f6>
  412e60:	f8d8 8000 	ldr.w	r8, [r8]
  412e64:	4598      	cmp	r8, r3
  412e66:	d17b      	bne.n	412f60 <_malloc_r+0x530>
  412e68:	f01c 0f03 	tst.w	ip, #3
  412e6c:	f1a8 0308 	sub.w	r3, r8, #8
  412e70:	f10c 3cff 	add.w	ip, ip, #4294967295
  412e74:	d1f4      	bne.n	412e60 <_malloc_r+0x430>
  412e76:	687b      	ldr	r3, [r7, #4]
  412e78:	ea23 0300 	bic.w	r3, r3, r0
  412e7c:	607b      	str	r3, [r7, #4]
  412e7e:	0040      	lsls	r0, r0, #1
  412e80:	4298      	cmp	r0, r3
  412e82:	f63f aebf 	bhi.w	412c04 <_malloc_r+0x1d4>
  412e86:	2800      	cmp	r0, #0
  412e88:	f43f aebc 	beq.w	412c04 <_malloc_r+0x1d4>
  412e8c:	4203      	tst	r3, r0
  412e8e:	46cc      	mov	ip, r9
  412e90:	f47f ae65 	bne.w	412b5e <_malloc_r+0x12e>
  412e94:	0040      	lsls	r0, r0, #1
  412e96:	4203      	tst	r3, r0
  412e98:	f10c 0c04 	add.w	ip, ip, #4
  412e9c:	d0fa      	beq.n	412e94 <_malloc_r+0x464>
  412e9e:	e65e      	b.n	412b5e <_malloc_r+0x12e>
  412ea0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  412ea4:	d81a      	bhi.n	412edc <_malloc_r+0x4ac>
  412ea6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  412eaa:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  412eae:	ea4f 014c 	mov.w	r1, ip, lsl #1
  412eb2:	e605      	b.n	412ac0 <_malloc_r+0x90>
  412eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  412eb8:	e6ef      	b.n	412c9a <_malloc_r+0x26a>
  412eba:	2301      	movs	r3, #1
  412ebc:	f8c8 3004 	str.w	r3, [r8, #4]
  412ec0:	4644      	mov	r4, r8
  412ec2:	2200      	movs	r2, #0
  412ec4:	e72f      	b.n	412d26 <_malloc_r+0x2f6>
  412ec6:	1091      	asrs	r1, r2, #2
  412ec8:	2001      	movs	r0, #1
  412eca:	f8d8 2004 	ldr.w	r2, [r8, #4]
  412ece:	fa00 f101 	lsl.w	r1, r0, r1
  412ed2:	430a      	orrs	r2, r1
  412ed4:	f8c8 2004 	str.w	r2, [r8, #4]
  412ed8:	4619      	mov	r1, r3
  412eda:	e774      	b.n	412dc6 <_malloc_r+0x396>
  412edc:	f240 5354 	movw	r3, #1364	; 0x554
  412ee0:	459c      	cmp	ip, r3
  412ee2:	d81b      	bhi.n	412f1c <_malloc_r+0x4ec>
  412ee4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  412ee8:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  412eec:	ea4f 014c 	mov.w	r1, ip, lsl #1
  412ef0:	e5e6      	b.n	412ac0 <_malloc_r+0x90>
  412ef2:	f10a 0a10 	add.w	sl, sl, #16
  412ef6:	e6a3      	b.n	412c40 <_malloc_r+0x210>
  412ef8:	2b54      	cmp	r3, #84	; 0x54
  412efa:	d81f      	bhi.n	412f3c <_malloc_r+0x50c>
  412efc:	0b0a      	lsrs	r2, r1, #12
  412efe:	326e      	adds	r2, #110	; 0x6e
  412f00:	0050      	lsls	r0, r2, #1
  412f02:	e74e      	b.n	412da2 <_malloc_r+0x372>
  412f04:	f3cb 010b 	ubfx	r1, fp, #0, #12
  412f08:	2900      	cmp	r1, #0
  412f0a:	f47f aeb1 	bne.w	412c70 <_malloc_r+0x240>
  412f0e:	eb0a 0109 	add.w	r1, sl, r9
  412f12:	68ba      	ldr	r2, [r7, #8]
  412f14:	f041 0101 	orr.w	r1, r1, #1
  412f18:	6051      	str	r1, [r2, #4]
  412f1a:	e6f6      	b.n	412d0a <_malloc_r+0x2da>
  412f1c:	21fc      	movs	r1, #252	; 0xfc
  412f1e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  412f22:	e5cd      	b.n	412ac0 <_malloc_r+0x90>
  412f24:	2201      	movs	r2, #1
  412f26:	f04f 0a00 	mov.w	sl, #0
  412f2a:	e6cb      	b.n	412cc4 <_malloc_r+0x294>
  412f2c:	f104 0108 	add.w	r1, r4, #8
  412f30:	4630      	mov	r0, r6
  412f32:	f004 ff95 	bl	417e60 <_free_r>
  412f36:	f8da 3000 	ldr.w	r3, [sl]
  412f3a:	e6e6      	b.n	412d0a <_malloc_r+0x2da>
  412f3c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  412f40:	d803      	bhi.n	412f4a <_malloc_r+0x51a>
  412f42:	0bca      	lsrs	r2, r1, #15
  412f44:	3277      	adds	r2, #119	; 0x77
  412f46:	0050      	lsls	r0, r2, #1
  412f48:	e72b      	b.n	412da2 <_malloc_r+0x372>
  412f4a:	f240 5254 	movw	r2, #1364	; 0x554
  412f4e:	4293      	cmp	r3, r2
  412f50:	d803      	bhi.n	412f5a <_malloc_r+0x52a>
  412f52:	0c8a      	lsrs	r2, r1, #18
  412f54:	327c      	adds	r2, #124	; 0x7c
  412f56:	0050      	lsls	r0, r2, #1
  412f58:	e723      	b.n	412da2 <_malloc_r+0x372>
  412f5a:	20fc      	movs	r0, #252	; 0xfc
  412f5c:	227e      	movs	r2, #126	; 0x7e
  412f5e:	e720      	b.n	412da2 <_malloc_r+0x372>
  412f60:	687b      	ldr	r3, [r7, #4]
  412f62:	e78c      	b.n	412e7e <_malloc_r+0x44e>
  412f64:	20000bb4 	.word	0x20000bb4

00412f68 <memcpy>:
  412f68:	4684      	mov	ip, r0
  412f6a:	ea41 0300 	orr.w	r3, r1, r0
  412f6e:	f013 0303 	ands.w	r3, r3, #3
  412f72:	d16d      	bne.n	413050 <memcpy+0xe8>
  412f74:	3a40      	subs	r2, #64	; 0x40
  412f76:	d341      	bcc.n	412ffc <memcpy+0x94>
  412f78:	f851 3b04 	ldr.w	r3, [r1], #4
  412f7c:	f840 3b04 	str.w	r3, [r0], #4
  412f80:	f851 3b04 	ldr.w	r3, [r1], #4
  412f84:	f840 3b04 	str.w	r3, [r0], #4
  412f88:	f851 3b04 	ldr.w	r3, [r1], #4
  412f8c:	f840 3b04 	str.w	r3, [r0], #4
  412f90:	f851 3b04 	ldr.w	r3, [r1], #4
  412f94:	f840 3b04 	str.w	r3, [r0], #4
  412f98:	f851 3b04 	ldr.w	r3, [r1], #4
  412f9c:	f840 3b04 	str.w	r3, [r0], #4
  412fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  412fa4:	f840 3b04 	str.w	r3, [r0], #4
  412fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  412fac:	f840 3b04 	str.w	r3, [r0], #4
  412fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  412fb4:	f840 3b04 	str.w	r3, [r0], #4
  412fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  412fbc:	f840 3b04 	str.w	r3, [r0], #4
  412fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  412fc4:	f840 3b04 	str.w	r3, [r0], #4
  412fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  412fcc:	f840 3b04 	str.w	r3, [r0], #4
  412fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  412fd4:	f840 3b04 	str.w	r3, [r0], #4
  412fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  412fdc:	f840 3b04 	str.w	r3, [r0], #4
  412fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  412fe4:	f840 3b04 	str.w	r3, [r0], #4
  412fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  412fec:	f840 3b04 	str.w	r3, [r0], #4
  412ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  412ff4:	f840 3b04 	str.w	r3, [r0], #4
  412ff8:	3a40      	subs	r2, #64	; 0x40
  412ffa:	d2bd      	bcs.n	412f78 <memcpy+0x10>
  412ffc:	3230      	adds	r2, #48	; 0x30
  412ffe:	d311      	bcc.n	413024 <memcpy+0xbc>
  413000:	f851 3b04 	ldr.w	r3, [r1], #4
  413004:	f840 3b04 	str.w	r3, [r0], #4
  413008:	f851 3b04 	ldr.w	r3, [r1], #4
  41300c:	f840 3b04 	str.w	r3, [r0], #4
  413010:	f851 3b04 	ldr.w	r3, [r1], #4
  413014:	f840 3b04 	str.w	r3, [r0], #4
  413018:	f851 3b04 	ldr.w	r3, [r1], #4
  41301c:	f840 3b04 	str.w	r3, [r0], #4
  413020:	3a10      	subs	r2, #16
  413022:	d2ed      	bcs.n	413000 <memcpy+0x98>
  413024:	320c      	adds	r2, #12
  413026:	d305      	bcc.n	413034 <memcpy+0xcc>
  413028:	f851 3b04 	ldr.w	r3, [r1], #4
  41302c:	f840 3b04 	str.w	r3, [r0], #4
  413030:	3a04      	subs	r2, #4
  413032:	d2f9      	bcs.n	413028 <memcpy+0xc0>
  413034:	3204      	adds	r2, #4
  413036:	d008      	beq.n	41304a <memcpy+0xe2>
  413038:	07d2      	lsls	r2, r2, #31
  41303a:	bf1c      	itt	ne
  41303c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  413040:	f800 3b01 	strbne.w	r3, [r0], #1
  413044:	d301      	bcc.n	41304a <memcpy+0xe2>
  413046:	880b      	ldrh	r3, [r1, #0]
  413048:	8003      	strh	r3, [r0, #0]
  41304a:	4660      	mov	r0, ip
  41304c:	4770      	bx	lr
  41304e:	bf00      	nop
  413050:	2a08      	cmp	r2, #8
  413052:	d313      	bcc.n	41307c <memcpy+0x114>
  413054:	078b      	lsls	r3, r1, #30
  413056:	d08d      	beq.n	412f74 <memcpy+0xc>
  413058:	f010 0303 	ands.w	r3, r0, #3
  41305c:	d08a      	beq.n	412f74 <memcpy+0xc>
  41305e:	f1c3 0304 	rsb	r3, r3, #4
  413062:	1ad2      	subs	r2, r2, r3
  413064:	07db      	lsls	r3, r3, #31
  413066:	bf1c      	itt	ne
  413068:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41306c:	f800 3b01 	strbne.w	r3, [r0], #1
  413070:	d380      	bcc.n	412f74 <memcpy+0xc>
  413072:	f831 3b02 	ldrh.w	r3, [r1], #2
  413076:	f820 3b02 	strh.w	r3, [r0], #2
  41307a:	e77b      	b.n	412f74 <memcpy+0xc>
  41307c:	3a04      	subs	r2, #4
  41307e:	d3d9      	bcc.n	413034 <memcpy+0xcc>
  413080:	3a01      	subs	r2, #1
  413082:	f811 3b01 	ldrb.w	r3, [r1], #1
  413086:	f800 3b01 	strb.w	r3, [r0], #1
  41308a:	d2f9      	bcs.n	413080 <memcpy+0x118>
  41308c:	780b      	ldrb	r3, [r1, #0]
  41308e:	7003      	strb	r3, [r0, #0]
  413090:	784b      	ldrb	r3, [r1, #1]
  413092:	7043      	strb	r3, [r0, #1]
  413094:	788b      	ldrb	r3, [r1, #2]
  413096:	7083      	strb	r3, [r0, #2]
  413098:	4660      	mov	r0, ip
  41309a:	4770      	bx	lr

0041309c <memset>:
  41309c:	b4f0      	push	{r4, r5, r6, r7}
  41309e:	0784      	lsls	r4, r0, #30
  4130a0:	d043      	beq.n	41312a <memset+0x8e>
  4130a2:	1e54      	subs	r4, r2, #1
  4130a4:	2a00      	cmp	r2, #0
  4130a6:	d03e      	beq.n	413126 <memset+0x8a>
  4130a8:	b2cd      	uxtb	r5, r1
  4130aa:	4603      	mov	r3, r0
  4130ac:	e003      	b.n	4130b6 <memset+0x1a>
  4130ae:	1e62      	subs	r2, r4, #1
  4130b0:	2c00      	cmp	r4, #0
  4130b2:	d038      	beq.n	413126 <memset+0x8a>
  4130b4:	4614      	mov	r4, r2
  4130b6:	f803 5b01 	strb.w	r5, [r3], #1
  4130ba:	079a      	lsls	r2, r3, #30
  4130bc:	d1f7      	bne.n	4130ae <memset+0x12>
  4130be:	2c03      	cmp	r4, #3
  4130c0:	d92a      	bls.n	413118 <memset+0x7c>
  4130c2:	b2cd      	uxtb	r5, r1
  4130c4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4130c8:	2c0f      	cmp	r4, #15
  4130ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4130ce:	d915      	bls.n	4130fc <memset+0x60>
  4130d0:	f1a4 0710 	sub.w	r7, r4, #16
  4130d4:	093f      	lsrs	r7, r7, #4
  4130d6:	f103 0610 	add.w	r6, r3, #16
  4130da:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  4130de:	461a      	mov	r2, r3
  4130e0:	6015      	str	r5, [r2, #0]
  4130e2:	6055      	str	r5, [r2, #4]
  4130e4:	6095      	str	r5, [r2, #8]
  4130e6:	60d5      	str	r5, [r2, #12]
  4130e8:	3210      	adds	r2, #16
  4130ea:	42b2      	cmp	r2, r6
  4130ec:	d1f8      	bne.n	4130e0 <memset+0x44>
  4130ee:	f004 040f 	and.w	r4, r4, #15
  4130f2:	3701      	adds	r7, #1
  4130f4:	2c03      	cmp	r4, #3
  4130f6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  4130fa:	d90d      	bls.n	413118 <memset+0x7c>
  4130fc:	461e      	mov	r6, r3
  4130fe:	4622      	mov	r2, r4
  413100:	3a04      	subs	r2, #4
  413102:	2a03      	cmp	r2, #3
  413104:	f846 5b04 	str.w	r5, [r6], #4
  413108:	d8fa      	bhi.n	413100 <memset+0x64>
  41310a:	1f22      	subs	r2, r4, #4
  41310c:	f022 0203 	bic.w	r2, r2, #3
  413110:	3204      	adds	r2, #4
  413112:	4413      	add	r3, r2
  413114:	f004 0403 	and.w	r4, r4, #3
  413118:	b12c      	cbz	r4, 413126 <memset+0x8a>
  41311a:	b2c9      	uxtb	r1, r1
  41311c:	441c      	add	r4, r3
  41311e:	f803 1b01 	strb.w	r1, [r3], #1
  413122:	42a3      	cmp	r3, r4
  413124:	d1fb      	bne.n	41311e <memset+0x82>
  413126:	bcf0      	pop	{r4, r5, r6, r7}
  413128:	4770      	bx	lr
  41312a:	4614      	mov	r4, r2
  41312c:	4603      	mov	r3, r0
  41312e:	e7c6      	b.n	4130be <memset+0x22>

00413130 <__malloc_lock>:
  413130:	4770      	bx	lr
  413132:	bf00      	nop

00413134 <__malloc_unlock>:
  413134:	4770      	bx	lr
  413136:	bf00      	nop

00413138 <_sbrk_r>:
  413138:	b538      	push	{r3, r4, r5, lr}
  41313a:	4c07      	ldr	r4, [pc, #28]	; (413158 <_sbrk_r+0x20>)
  41313c:	2300      	movs	r3, #0
  41313e:	4605      	mov	r5, r0
  413140:	4608      	mov	r0, r1
  413142:	6023      	str	r3, [r4, #0]
  413144:	f7ff f808 	bl	412158 <_sbrk>
  413148:	1c43      	adds	r3, r0, #1
  41314a:	d000      	beq.n	41314e <_sbrk_r+0x16>
  41314c:	bd38      	pop	{r3, r4, r5, pc}
  41314e:	6823      	ldr	r3, [r4, #0]
  413150:	2b00      	cmp	r3, #0
  413152:	d0fb      	beq.n	41314c <_sbrk_r+0x14>
  413154:	602b      	str	r3, [r5, #0]
  413156:	bd38      	pop	{r3, r4, r5, pc}
  413158:	200050a8 	.word	0x200050a8

0041315c <setbuf>:
  41315c:	2900      	cmp	r1, #0
  41315e:	bf0c      	ite	eq
  413160:	2202      	moveq	r2, #2
  413162:	2200      	movne	r2, #0
  413164:	f44f 6380 	mov.w	r3, #1024	; 0x400
  413168:	f000 b800 	b.w	41316c <setvbuf>

0041316c <setvbuf>:
  41316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413170:	4c3c      	ldr	r4, [pc, #240]	; (413264 <setvbuf+0xf8>)
  413172:	6825      	ldr	r5, [r4, #0]
  413174:	4688      	mov	r8, r1
  413176:	4604      	mov	r4, r0
  413178:	4616      	mov	r6, r2
  41317a:	461f      	mov	r7, r3
  41317c:	b115      	cbz	r5, 413184 <setvbuf+0x18>
  41317e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  413180:	2b00      	cmp	r3, #0
  413182:	d04f      	beq.n	413224 <setvbuf+0xb8>
  413184:	2e02      	cmp	r6, #2
  413186:	d830      	bhi.n	4131ea <setvbuf+0x7e>
  413188:	2f00      	cmp	r7, #0
  41318a:	db2e      	blt.n	4131ea <setvbuf+0x7e>
  41318c:	4628      	mov	r0, r5
  41318e:	4621      	mov	r1, r4
  413190:	f004 fd08 	bl	417ba4 <_fflush_r>
  413194:	89a3      	ldrh	r3, [r4, #12]
  413196:	2200      	movs	r2, #0
  413198:	6062      	str	r2, [r4, #4]
  41319a:	61a2      	str	r2, [r4, #24]
  41319c:	061a      	lsls	r2, r3, #24
  41319e:	d428      	bmi.n	4131f2 <setvbuf+0x86>
  4131a0:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  4131a4:	b29b      	uxth	r3, r3
  4131a6:	2e02      	cmp	r6, #2
  4131a8:	81a3      	strh	r3, [r4, #12]
  4131aa:	d02d      	beq.n	413208 <setvbuf+0x9c>
  4131ac:	f1b8 0f00 	cmp.w	r8, #0
  4131b0:	d03c      	beq.n	41322c <setvbuf+0xc0>
  4131b2:	2e01      	cmp	r6, #1
  4131b4:	d013      	beq.n	4131de <setvbuf+0x72>
  4131b6:	b29b      	uxth	r3, r3
  4131b8:	f003 0008 	and.w	r0, r3, #8
  4131bc:	4a2a      	ldr	r2, [pc, #168]	; (413268 <setvbuf+0xfc>)
  4131be:	63ea      	str	r2, [r5, #60]	; 0x3c
  4131c0:	b280      	uxth	r0, r0
  4131c2:	f8c4 8000 	str.w	r8, [r4]
  4131c6:	f8c4 8010 	str.w	r8, [r4, #16]
  4131ca:	6167      	str	r7, [r4, #20]
  4131cc:	b178      	cbz	r0, 4131ee <setvbuf+0x82>
  4131ce:	f013 0f03 	tst.w	r3, #3
  4131d2:	bf18      	it	ne
  4131d4:	2700      	movne	r7, #0
  4131d6:	60a7      	str	r7, [r4, #8]
  4131d8:	2000      	movs	r0, #0
  4131da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4131de:	f043 0301 	orr.w	r3, r3, #1
  4131e2:	427a      	negs	r2, r7
  4131e4:	81a3      	strh	r3, [r4, #12]
  4131e6:	61a2      	str	r2, [r4, #24]
  4131e8:	e7e5      	b.n	4131b6 <setvbuf+0x4a>
  4131ea:	f04f 30ff 	mov.w	r0, #4294967295
  4131ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4131f2:	4628      	mov	r0, r5
  4131f4:	6921      	ldr	r1, [r4, #16]
  4131f6:	f004 fe33 	bl	417e60 <_free_r>
  4131fa:	89a3      	ldrh	r3, [r4, #12]
  4131fc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  413200:	b29b      	uxth	r3, r3
  413202:	2e02      	cmp	r6, #2
  413204:	81a3      	strh	r3, [r4, #12]
  413206:	d1d1      	bne.n	4131ac <setvbuf+0x40>
  413208:	2000      	movs	r0, #0
  41320a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41320e:	f043 0302 	orr.w	r3, r3, #2
  413212:	2500      	movs	r5, #0
  413214:	2101      	movs	r1, #1
  413216:	81a3      	strh	r3, [r4, #12]
  413218:	60a5      	str	r5, [r4, #8]
  41321a:	6022      	str	r2, [r4, #0]
  41321c:	6122      	str	r2, [r4, #16]
  41321e:	6161      	str	r1, [r4, #20]
  413220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413224:	4628      	mov	r0, r5
  413226:	f004 fcd9 	bl	417bdc <__sinit>
  41322a:	e7ab      	b.n	413184 <setvbuf+0x18>
  41322c:	2f00      	cmp	r7, #0
  41322e:	bf08      	it	eq
  413230:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  413234:	4638      	mov	r0, r7
  413236:	f7ff fbeb 	bl	412a10 <malloc>
  41323a:	4680      	mov	r8, r0
  41323c:	b128      	cbz	r0, 41324a <setvbuf+0xde>
  41323e:	89a3      	ldrh	r3, [r4, #12]
  413240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  413244:	b29b      	uxth	r3, r3
  413246:	81a3      	strh	r3, [r4, #12]
  413248:	e7b3      	b.n	4131b2 <setvbuf+0x46>
  41324a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  41324e:	f7ff fbdf 	bl	412a10 <malloc>
  413252:	4680      	mov	r8, r0
  413254:	b918      	cbnz	r0, 41325e <setvbuf+0xf2>
  413256:	89a3      	ldrh	r3, [r4, #12]
  413258:	f04f 30ff 	mov.w	r0, #4294967295
  41325c:	e7d5      	b.n	41320a <setvbuf+0x9e>
  41325e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  413262:	e7ec      	b.n	41323e <setvbuf+0xd2>
  413264:	20000bb0 	.word	0x20000bb0
  413268:	00417bd1 	.word	0x00417bd1

0041326c <snprintf>:
  41326c:	b40c      	push	{r2, r3}
  41326e:	b5f0      	push	{r4, r5, r6, r7, lr}
  413270:	4b17      	ldr	r3, [pc, #92]	; (4132d0 <snprintf+0x64>)
  413272:	1e0c      	subs	r4, r1, #0
  413274:	b09d      	sub	sp, #116	; 0x74
  413276:	681f      	ldr	r7, [r3, #0]
  413278:	db24      	blt.n	4132c4 <snprintf+0x58>
  41327a:	f44f 7302 	mov.w	r3, #520	; 0x208
  41327e:	ad23      	add	r5, sp, #140	; 0x8c
  413280:	bf14      	ite	ne
  413282:	f104 36ff 	addne.w	r6, r4, #4294967295
  413286:	4626      	moveq	r6, r4
  413288:	9002      	str	r0, [sp, #8]
  41328a:	9006      	str	r0, [sp, #24]
  41328c:	f8ad 3014 	strh.w	r3, [sp, #20]
  413290:	f64f 7eff 	movw	lr, #65535	; 0xffff
  413294:	462b      	mov	r3, r5
  413296:	4638      	mov	r0, r7
  413298:	a902      	add	r1, sp, #8
  41329a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  41329c:	9604      	str	r6, [sp, #16]
  41329e:	9607      	str	r6, [sp, #28]
  4132a0:	9501      	str	r5, [sp, #4]
  4132a2:	f8ad e016 	strh.w	lr, [sp, #22]
  4132a6:	f000 fb2b 	bl	413900 <_svfprintf_r>
  4132aa:	1c43      	adds	r3, r0, #1
  4132ac:	bfbc      	itt	lt
  4132ae:	238b      	movlt	r3, #139	; 0x8b
  4132b0:	603b      	strlt	r3, [r7, #0]
  4132b2:	b114      	cbz	r4, 4132ba <snprintf+0x4e>
  4132b4:	9b02      	ldr	r3, [sp, #8]
  4132b6:	2200      	movs	r2, #0
  4132b8:	701a      	strb	r2, [r3, #0]
  4132ba:	b01d      	add	sp, #116	; 0x74
  4132bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4132c0:	b002      	add	sp, #8
  4132c2:	4770      	bx	lr
  4132c4:	238b      	movs	r3, #139	; 0x8b
  4132c6:	603b      	str	r3, [r7, #0]
  4132c8:	f04f 30ff 	mov.w	r0, #4294967295
  4132cc:	e7f5      	b.n	4132ba <snprintf+0x4e>
  4132ce:	bf00      	nop
  4132d0:	20000bb0 	.word	0x20000bb0

004132d4 <sprintf>:
  4132d4:	b40e      	push	{r1, r2, r3}
  4132d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4132d8:	b09c      	sub	sp, #112	; 0x70
  4132da:	ab21      	add	r3, sp, #132	; 0x84
  4132dc:	490f      	ldr	r1, [pc, #60]	; (41331c <sprintf+0x48>)
  4132de:	f853 2b04 	ldr.w	r2, [r3], #4
  4132e2:	9301      	str	r3, [sp, #4]
  4132e4:	4605      	mov	r5, r0
  4132e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4132ea:	6808      	ldr	r0, [r1, #0]
  4132ec:	9502      	str	r5, [sp, #8]
  4132ee:	f44f 7702 	mov.w	r7, #520	; 0x208
  4132f2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4132f6:	a902      	add	r1, sp, #8
  4132f8:	9506      	str	r5, [sp, #24]
  4132fa:	f8ad 7014 	strh.w	r7, [sp, #20]
  4132fe:	9404      	str	r4, [sp, #16]
  413300:	9407      	str	r4, [sp, #28]
  413302:	f8ad 6016 	strh.w	r6, [sp, #22]
  413306:	f000 fafb 	bl	413900 <_svfprintf_r>
  41330a:	9b02      	ldr	r3, [sp, #8]
  41330c:	2200      	movs	r2, #0
  41330e:	701a      	strb	r2, [r3, #0]
  413310:	b01c      	add	sp, #112	; 0x70
  413312:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  413316:	b003      	add	sp, #12
  413318:	4770      	bx	lr
  41331a:	bf00      	nop
  41331c:	20000bb0 	.word	0x20000bb0

00413320 <sscanf>:
  413320:	b40e      	push	{r1, r2, r3}
  413322:	b5f0      	push	{r4, r5, r6, r7, lr}
  413324:	b09c      	sub	sp, #112	; 0x70
  413326:	ac21      	add	r4, sp, #132	; 0x84
  413328:	f44f 7201 	mov.w	r2, #516	; 0x204
  41332c:	f854 6b04 	ldr.w	r6, [r4], #4
  413330:	f8ad 2014 	strh.w	r2, [sp, #20]
  413334:	9002      	str	r0, [sp, #8]
  413336:	9006      	str	r0, [sp, #24]
  413338:	f000 f9f4 	bl	413724 <strlen>
  41333c:	4b0c      	ldr	r3, [pc, #48]	; (413370 <sscanf+0x50>)
  41333e:	9401      	str	r4, [sp, #4]
  413340:	4605      	mov	r5, r0
  413342:	4632      	mov	r2, r6
  413344:	4f0b      	ldr	r7, [pc, #44]	; (413374 <sscanf+0x54>)
  413346:	6818      	ldr	r0, [r3, #0]
  413348:	9503      	str	r5, [sp, #12]
  41334a:	4623      	mov	r3, r4
  41334c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  413350:	2400      	movs	r4, #0
  413352:	a902      	add	r1, sp, #8
  413354:	9507      	str	r5, [sp, #28]
  413356:	970a      	str	r7, [sp, #40]	; 0x28
  413358:	940e      	str	r4, [sp, #56]	; 0x38
  41335a:	9413      	str	r4, [sp, #76]	; 0x4c
  41335c:	f8ad 6016 	strh.w	r6, [sp, #22]
  413360:	f001 fd4a 	bl	414df8 <__ssvfscanf_r>
  413364:	b01c      	add	sp, #112	; 0x70
  413366:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  41336a:	b003      	add	sp, #12
  41336c:	4770      	bx	lr
  41336e:	bf00      	nop
  413370:	20000bb0 	.word	0x20000bb0
  413374:	0041339d 	.word	0x0041339d

00413378 <__sread>:
  413378:	b510      	push	{r4, lr}
  41337a:	460c      	mov	r4, r1
  41337c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  413380:	f005 fdc6 	bl	418f10 <_read_r>
  413384:	2800      	cmp	r0, #0
  413386:	db03      	blt.n	413390 <__sread+0x18>
  413388:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41338a:	4403      	add	r3, r0
  41338c:	6523      	str	r3, [r4, #80]	; 0x50
  41338e:	bd10      	pop	{r4, pc}
  413390:	89a3      	ldrh	r3, [r4, #12]
  413392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  413396:	81a3      	strh	r3, [r4, #12]
  413398:	bd10      	pop	{r4, pc}
  41339a:	bf00      	nop

0041339c <__seofread>:
  41339c:	2000      	movs	r0, #0
  41339e:	4770      	bx	lr

004133a0 <__swrite>:
  4133a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4133a4:	460c      	mov	r4, r1
  4133a6:	8989      	ldrh	r1, [r1, #12]
  4133a8:	461d      	mov	r5, r3
  4133aa:	05cb      	lsls	r3, r1, #23
  4133ac:	4616      	mov	r6, r2
  4133ae:	4607      	mov	r7, r0
  4133b0:	d506      	bpl.n	4133c0 <__swrite+0x20>
  4133b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4133b6:	2200      	movs	r2, #0
  4133b8:	2302      	movs	r3, #2
  4133ba:	f004 ffed 	bl	418398 <_lseek_r>
  4133be:	89a1      	ldrh	r1, [r4, #12]
  4133c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4133c4:	81a1      	strh	r1, [r4, #12]
  4133c6:	4638      	mov	r0, r7
  4133c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4133cc:	4632      	mov	r2, r6
  4133ce:	462b      	mov	r3, r5
  4133d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4133d4:	f003 baf0 	b.w	4169b8 <_write_r>

004133d8 <__sseek>:
  4133d8:	b510      	push	{r4, lr}
  4133da:	460c      	mov	r4, r1
  4133dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4133e0:	f004 ffda 	bl	418398 <_lseek_r>
  4133e4:	89a3      	ldrh	r3, [r4, #12]
  4133e6:	1c42      	adds	r2, r0, #1
  4133e8:	bf0e      	itee	eq
  4133ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4133ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4133f2:	6520      	strne	r0, [r4, #80]	; 0x50
  4133f4:	81a3      	strh	r3, [r4, #12]
  4133f6:	bd10      	pop	{r4, pc}

004133f8 <__sclose>:
  4133f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4133fc:	f003 bb62 	b.w	416ac4 <_close_r>

00413400 <strcat>:
  413400:	0783      	lsls	r3, r0, #30
  413402:	b570      	push	{r4, r5, r6, lr}
  413404:	4606      	mov	r6, r0
  413406:	d11f      	bne.n	413448 <strcat+0x48>
  413408:	6803      	ldr	r3, [r0, #0]
  41340a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  41340e:	ea22 0303 	bic.w	r3, r2, r3
  413412:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  413416:	bf08      	it	eq
  413418:	1d03      	addeq	r3, r0, #4
  41341a:	d115      	bne.n	413448 <strcat+0x48>
  41341c:	4618      	mov	r0, r3
  41341e:	f853 4b04 	ldr.w	r4, [r3], #4
  413422:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  413426:	ea25 0404 	bic.w	r4, r5, r4
  41342a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  41342e:	d0f5      	beq.n	41341c <strcat+0x1c>
  413430:	7803      	ldrb	r3, [r0, #0]
  413432:	b12b      	cbz	r3, 413440 <strcat+0x40>
  413434:	1c43      	adds	r3, r0, #1
  413436:	4618      	mov	r0, r3
  413438:	3301      	adds	r3, #1
  41343a:	7804      	ldrb	r4, [r0, #0]
  41343c:	2c00      	cmp	r4, #0
  41343e:	d1fa      	bne.n	413436 <strcat+0x36>
  413440:	f000 f912 	bl	413668 <strcpy>
  413444:	4630      	mov	r0, r6
  413446:	bd70      	pop	{r4, r5, r6, pc}
  413448:	4630      	mov	r0, r6
  41344a:	e7f1      	b.n	413430 <strcat+0x30>

0041344c <strcmp>:
  41344c:	ea40 0c01 	orr.w	ip, r0, r1
  413450:	f01c 0f07 	tst.w	ip, #7
  413454:	d123      	bne.n	41349e <strcmp+0x52>
  413456:	f1bd 0d10 	subs.w	sp, sp, #16
  41345a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  41345e:	e9cd 6700 	strd	r6, r7, [sp]
  413462:	f06f 0600 	mvn.w	r6, #0
  413466:	f04f 0700 	mov.w	r7, #0
  41346a:	bf00      	nop
  41346c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  413470:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  413474:	42a2      	cmp	r2, r4
  413476:	fa82 fc46 	uadd8	ip, r2, r6
  41347a:	faa7 fc86 	sel	ip, r7, r6
  41347e:	bf08      	it	eq
  413480:	f1bc 0f00 	cmpeq.w	ip, #0
  413484:	f040 80d7 	bne.w	413636 <strcmp+0x1ea>
  413488:	42ab      	cmp	r3, r5
  41348a:	fa83 fc46 	uadd8	ip, r3, r6
  41348e:	faa7 fc86 	sel	ip, r7, r6
  413492:	bf08      	it	eq
  413494:	f1bc 0f00 	cmpeq.w	ip, #0
  413498:	f040 80ca 	bne.w	413630 <strcmp+0x1e4>
  41349c:	e7e6      	b.n	41346c <strcmp+0x20>
  41349e:	f010 0c03 	ands.w	ip, r0, #3
  4134a2:	d021      	beq.n	4134e8 <strcmp+0x9c>
  4134a4:	f020 0003 	bic.w	r0, r0, #3
  4134a8:	f850 2b04 	ldr.w	r2, [r0], #4
  4134ac:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
  4134b0:	d008      	beq.n	4134c4 <strcmp+0x78>
  4134b2:	d20f      	bcs.n	4134d4 <strcmp+0x88>
  4134b4:	f811 cb01 	ldrb.w	ip, [r1], #1
  4134b8:	fa5f f392 	uxtb.w	r3, r2, ror #8
  4134bc:	ebb3 0c0c 	subs.w	ip, r3, ip
  4134c0:	d110      	bne.n	4134e4 <strcmp+0x98>
  4134c2:	b17b      	cbz	r3, 4134e4 <strcmp+0x98>
  4134c4:	f811 cb01 	ldrb.w	ip, [r1], #1
  4134c8:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
  4134cc:	ebb3 0c0c 	subs.w	ip, r3, ip
  4134d0:	d108      	bne.n	4134e4 <strcmp+0x98>
  4134d2:	b13b      	cbz	r3, 4134e4 <strcmp+0x98>
  4134d4:	f811 cb01 	ldrb.w	ip, [r1], #1
  4134d8:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
  4134dc:	ebb3 0c0c 	subs.w	ip, r3, ip
  4134e0:	d100      	bne.n	4134e4 <strcmp+0x98>
  4134e2:	b90b      	cbnz	r3, 4134e8 <strcmp+0x9c>
  4134e4:	4660      	mov	r0, ip
  4134e6:	4770      	bx	lr
  4134e8:	f1bd 0d10 	subs.w	sp, sp, #16
  4134ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4134f0:	e9cd 6700 	strd	r6, r7, [sp]
  4134f4:	f06f 0600 	mvn.w	r6, #0
  4134f8:	f04f 0700 	mov.w	r7, #0
  4134fc:	f011 0c03 	ands.w	ip, r1, #3
  413500:	d12d      	bne.n	41355e <strcmp+0x112>
  413502:	f010 0f04 	tst.w	r0, #4
  413506:	d00d      	beq.n	413524 <strcmp+0xd8>
  413508:	f850 2b04 	ldr.w	r2, [r0], #4
  41350c:	f851 4b04 	ldr.w	r4, [r1], #4
  413510:	42a2      	cmp	r2, r4
  413512:	fa82 fc46 	uadd8	ip, r2, r6
  413516:	faa7 fc86 	sel	ip, r7, r6
  41351a:	bf08      	it	eq
  41351c:	f1bc 0f00 	cmpeq.w	ip, #0
  413520:	f040 8089 	bne.w	413636 <strcmp+0x1ea>
  413524:	f011 0f04 	tst.w	r1, #4
  413528:	d09f      	beq.n	41346a <strcmp+0x1e>
  41352a:	f851 5b04 	ldr.w	r5, [r1], #4
  41352e:	bf00      	nop
  413530:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  413534:	42aa      	cmp	r2, r5
  413536:	fa82 fc46 	uadd8	ip, r2, r6
  41353a:	faa7 fc86 	sel	ip, r7, r6
  41353e:	bf08      	it	eq
  413540:	f1bc 0f00 	cmpeq.w	ip, #0
  413544:	d171      	bne.n	41362a <strcmp+0x1de>
  413546:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  41354a:	42a3      	cmp	r3, r4
  41354c:	fa83 fc46 	uadd8	ip, r3, r6
  413550:	faa7 fc86 	sel	ip, r7, r6
  413554:	bf08      	it	eq
  413556:	f1bc 0f00 	cmpeq.w	ip, #0
  41355a:	d163      	bne.n	413624 <strcmp+0x1d8>
  41355c:	e7e8      	b.n	413530 <strcmp+0xe4>
  41355e:	f021 0103 	bic.w	r1, r1, #3
  413562:	f1bc 0f02 	cmp.w	ip, #2
  413566:	d01e      	beq.n	4135a6 <strcmp+0x15a>
  413568:	da3b      	bge.n	4135e2 <strcmp+0x196>
  41356a:	f851 5b04 	ldr.w	r5, [r1], #4
  41356e:	bf00      	nop
  413570:	f850 3b04 	ldr.w	r3, [r0], #4
  413574:	ea4f 2515 	mov.w	r5, r5, lsr #8
  413578:	fa83 fc46 	uadd8	ip, r3, r6
  41357c:	faa7 fc86 	sel	ip, r7, r6
  413580:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
  413584:	ea03 2216 	and.w	r2, r3, r6, lsr #8
  413588:	bf08      	it	eq
  41358a:	42aa      	cmpeq	r2, r5
  41358c:	d14d      	bne.n	41362a <strcmp+0x1de>
  41358e:	f851 5b04 	ldr.w	r5, [r1], #4
  413592:	f1bc 0f00 	cmp.w	ip, #0
  413596:	ea82 0303 	eor.w	r3, r2, r3
  41359a:	ea4f 6205 	mov.w	r2, r5, lsl #24
  41359e:	bf08      	it	eq
  4135a0:	4293      	cmpeq	r3, r2
  4135a2:	d13c      	bne.n	41361e <strcmp+0x1d2>
  4135a4:	e7e4      	b.n	413570 <strcmp+0x124>
  4135a6:	f851 5b04 	ldr.w	r5, [r1], #4
  4135aa:	bf00      	nop
  4135ac:	f850 3b04 	ldr.w	r3, [r0], #4
  4135b0:	ea4f 4515 	mov.w	r5, r5, lsr #16
  4135b4:	fa83 fc46 	uadd8	ip, r3, r6
  4135b8:	faa7 fc86 	sel	ip, r7, r6
  4135bc:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
  4135c0:	ea03 4216 	and.w	r2, r3, r6, lsr #16
  4135c4:	bf08      	it	eq
  4135c6:	42aa      	cmpeq	r2, r5
  4135c8:	d12f      	bne.n	41362a <strcmp+0x1de>
  4135ca:	f851 5b04 	ldr.w	r5, [r1], #4
  4135ce:	f1bc 0f00 	cmp.w	ip, #0
  4135d2:	ea82 0303 	eor.w	r3, r2, r3
  4135d6:	ea4f 4205 	mov.w	r2, r5, lsl #16
  4135da:	bf08      	it	eq
  4135dc:	4293      	cmpeq	r3, r2
  4135de:	d11e      	bne.n	41361e <strcmp+0x1d2>
  4135e0:	e7e4      	b.n	4135ac <strcmp+0x160>
  4135e2:	f851 5b04 	ldr.w	r5, [r1], #4
  4135e6:	bf00      	nop
  4135e8:	f850 3b04 	ldr.w	r3, [r0], #4
  4135ec:	ea4f 6515 	mov.w	r5, r5, lsr #24
  4135f0:	fa83 fc46 	uadd8	ip, r3, r6
  4135f4:	faa7 fc86 	sel	ip, r7, r6
  4135f8:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
  4135fc:	ea03 6216 	and.w	r2, r3, r6, lsr #24
  413600:	bf08      	it	eq
  413602:	42aa      	cmpeq	r2, r5
  413604:	d111      	bne.n	41362a <strcmp+0x1de>
  413606:	f851 5b04 	ldr.w	r5, [r1], #4
  41360a:	f1bc 0f00 	cmp.w	ip, #0
  41360e:	ea82 0303 	eor.w	r3, r2, r3
  413612:	ea4f 2205 	mov.w	r2, r5, lsl #8
  413616:	bf08      	it	eq
  413618:	4293      	cmpeq	r3, r2
  41361a:	d100      	bne.n	41361e <strcmp+0x1d2>
  41361c:	e7e4      	b.n	4135e8 <strcmp+0x19c>
  41361e:	ba19      	rev	r1, r3
  413620:	ba12      	rev	r2, r2
  413622:	e00a      	b.n	41363a <strcmp+0x1ee>
  413624:	ba19      	rev	r1, r3
  413626:	ba22      	rev	r2, r4
  413628:	e007      	b.n	41363a <strcmp+0x1ee>
  41362a:	ba11      	rev	r1, r2
  41362c:	ba2a      	rev	r2, r5
  41362e:	e004      	b.n	41363a <strcmp+0x1ee>
  413630:	ba19      	rev	r1, r3
  413632:	ba2a      	rev	r2, r5
  413634:	e001      	b.n	41363a <strcmp+0x1ee>
  413636:	ba11      	rev	r1, r2
  413638:	ba22      	rev	r2, r4
  41363a:	fa9c f08c 	rev.w	r0, ip
  41363e:	e9dd 6700 	ldrd	r6, r7, [sp]
  413642:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  413646:	f11d 0d10 	adds.w	sp, sp, #16
  41364a:	b138      	cbz	r0, 41365c <strcmp+0x210>
  41364c:	fab0 f080 	clz	r0, r0
  413650:	f1c0 0018 	rsb	r0, r0, #24
  413654:	fa21 f100 	lsr.w	r1, r1, r0
  413658:	fa22 f200 	lsr.w	r2, r2, r0
  41365c:	2001      	movs	r0, #1
  41365e:	4291      	cmp	r1, r2
  413660:	bf98      	it	ls
  413662:	4180      	sbcls	r0, r0
  413664:	4770      	bx	lr
  413666:	bf00      	nop

00413668 <strcpy>:
  413668:	ea80 0201 	eor.w	r2, r0, r1
  41366c:	4684      	mov	ip, r0
  41366e:	f012 0f03 	tst.w	r2, #3
  413672:	d14f      	bne.n	413714 <strcpy+0xac>
  413674:	f011 0f03 	tst.w	r1, #3
  413678:	d132      	bne.n	4136e0 <strcpy+0x78>
  41367a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  41367e:	f011 0f04 	tst.w	r1, #4
  413682:	f851 3b04 	ldr.w	r3, [r1], #4
  413686:	d00b      	beq.n	4136a0 <strcpy+0x38>
  413688:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  41368c:	439a      	bics	r2, r3
  41368e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  413692:	bf04      	itt	eq
  413694:	f84c 3b04 	streq.w	r3, [ip], #4
  413698:	f851 3b04 	ldreq.w	r3, [r1], #4
  41369c:	d116      	bne.n	4136cc <strcpy+0x64>
  41369e:	bf00      	nop
  4136a0:	f851 4b04 	ldr.w	r4, [r1], #4
  4136a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4136a8:	439a      	bics	r2, r3
  4136aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4136ae:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4136b2:	d10b      	bne.n	4136cc <strcpy+0x64>
  4136b4:	f84c 3b04 	str.w	r3, [ip], #4
  4136b8:	43a2      	bics	r2, r4
  4136ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4136be:	bf04      	itt	eq
  4136c0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4136c4:	f84c 4b04 	streq.w	r4, [ip], #4
  4136c8:	d0ea      	beq.n	4136a0 <strcpy+0x38>
  4136ca:	4623      	mov	r3, r4
  4136cc:	f80c 3b01 	strb.w	r3, [ip], #1
  4136d0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4136d4:	ea4f 2333 	mov.w	r3, r3, ror #8
  4136d8:	d1f8      	bne.n	4136cc <strcpy+0x64>
  4136da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4136de:	4770      	bx	lr
  4136e0:	f011 0f01 	tst.w	r1, #1
  4136e4:	d006      	beq.n	4136f4 <strcpy+0x8c>
  4136e6:	f811 2b01 	ldrb.w	r2, [r1], #1
  4136ea:	f80c 2b01 	strb.w	r2, [ip], #1
  4136ee:	2a00      	cmp	r2, #0
  4136f0:	bf08      	it	eq
  4136f2:	4770      	bxeq	lr
  4136f4:	f011 0f02 	tst.w	r1, #2
  4136f8:	d0bf      	beq.n	41367a <strcpy+0x12>
  4136fa:	f831 2b02 	ldrh.w	r2, [r1], #2
  4136fe:	f012 0fff 	tst.w	r2, #255	; 0xff
  413702:	bf16      	itet	ne
  413704:	f82c 2b02 	strhne.w	r2, [ip], #2
  413708:	f88c 2000 	strbeq.w	r2, [ip]
  41370c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  413710:	d1b3      	bne.n	41367a <strcpy+0x12>
  413712:	4770      	bx	lr
  413714:	f811 2b01 	ldrb.w	r2, [r1], #1
  413718:	f80c 2b01 	strb.w	r2, [ip], #1
  41371c:	2a00      	cmp	r2, #0
  41371e:	d1f9      	bne.n	413714 <strcpy+0xac>
  413720:	4770      	bx	lr
  413722:	bf00      	nop

00413724 <strlen>:
  413724:	f020 0103 	bic.w	r1, r0, #3
  413728:	f010 0003 	ands.w	r0, r0, #3
  41372c:	f1c0 0000 	rsb	r0, r0, #0
  413730:	f851 3b04 	ldr.w	r3, [r1], #4
  413734:	f100 0c04 	add.w	ip, r0, #4
  413738:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  41373c:	f06f 0200 	mvn.w	r2, #0
  413740:	bf1c      	itt	ne
  413742:	fa22 f20c 	lsrne.w	r2, r2, ip
  413746:	4313      	orrne	r3, r2
  413748:	f04f 0c01 	mov.w	ip, #1
  41374c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  413750:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  413754:	eba3 020c 	sub.w	r2, r3, ip
  413758:	ea22 0203 	bic.w	r2, r2, r3
  41375c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  413760:	bf04      	itt	eq
  413762:	f851 3b04 	ldreq.w	r3, [r1], #4
  413766:	3004      	addeq	r0, #4
  413768:	d0f4      	beq.n	413754 <strlen+0x30>
  41376a:	f013 0fff 	tst.w	r3, #255	; 0xff
  41376e:	bf1f      	itttt	ne
  413770:	3001      	addne	r0, #1
  413772:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  413776:	3001      	addne	r0, #1
  413778:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  41377c:	bf18      	it	ne
  41377e:	3001      	addne	r0, #1
  413780:	4770      	bx	lr
  413782:	bf00      	nop

00413784 <strncat>:
  413784:	0783      	lsls	r3, r0, #30
  413786:	b470      	push	{r4, r5, r6}
  413788:	d12a      	bne.n	4137e0 <strncat+0x5c>
  41378a:	6803      	ldr	r3, [r0, #0]
  41378c:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  413790:	ea24 0303 	bic.w	r3, r4, r3
  413794:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  413798:	bf08      	it	eq
  41379a:	1d03      	addeq	r3, r0, #4
  41379c:	d120      	bne.n	4137e0 <strncat+0x5c>
  41379e:	461c      	mov	r4, r3
  4137a0:	f853 5b04 	ldr.w	r5, [r3], #4
  4137a4:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  4137a8:	ea26 0505 	bic.w	r5, r6, r5
  4137ac:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  4137b0:	d0f5      	beq.n	41379e <strncat+0x1a>
  4137b2:	7823      	ldrb	r3, [r4, #0]
  4137b4:	b12b      	cbz	r3, 4137c2 <strncat+0x3e>
  4137b6:	1c63      	adds	r3, r4, #1
  4137b8:	461c      	mov	r4, r3
  4137ba:	3301      	adds	r3, #1
  4137bc:	7825      	ldrb	r5, [r4, #0]
  4137be:	2d00      	cmp	r5, #0
  4137c0:	d1fa      	bne.n	4137b8 <strncat+0x34>
  4137c2:	3c01      	subs	r4, #1
  4137c4:	188d      	adds	r5, r1, r2
  4137c6:	e005      	b.n	4137d4 <strncat+0x50>
  4137c8:	f811 3b01 	ldrb.w	r3, [r1], #1
  4137cc:	f804 3f01 	strb.w	r3, [r4, #1]!
  4137d0:	b123      	cbz	r3, 4137dc <strncat+0x58>
  4137d2:	b13a      	cbz	r2, 4137e4 <strncat+0x60>
  4137d4:	42a9      	cmp	r1, r5
  4137d6:	f102 32ff 	add.w	r2, r2, #4294967295
  4137da:	d1f5      	bne.n	4137c8 <strncat+0x44>
  4137dc:	bc70      	pop	{r4, r5, r6}
  4137de:	4770      	bx	lr
  4137e0:	4604      	mov	r4, r0
  4137e2:	e7e6      	b.n	4137b2 <strncat+0x2e>
  4137e4:	7062      	strb	r2, [r4, #1]
  4137e6:	e7f5      	b.n	4137d4 <strncat+0x50>

004137e8 <strncmp>:
  4137e8:	b430      	push	{r4, r5}
  4137ea:	2a00      	cmp	r2, #0
  4137ec:	d04a      	beq.n	413884 <strncmp+0x9c>
  4137ee:	ea40 0301 	orr.w	r3, r0, r1
  4137f2:	f013 0303 	ands.w	r3, r3, #3
  4137f6:	d12d      	bne.n	413854 <strncmp+0x6c>
  4137f8:	2a03      	cmp	r2, #3
  4137fa:	d92b      	bls.n	413854 <strncmp+0x6c>
  4137fc:	6804      	ldr	r4, [r0, #0]
  4137fe:	680d      	ldr	r5, [r1, #0]
  413800:	42ac      	cmp	r4, r5
  413802:	d127      	bne.n	413854 <strncmp+0x6c>
  413804:	3a04      	subs	r2, #4
  413806:	d03d      	beq.n	413884 <strncmp+0x9c>
  413808:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  41380c:	ea25 0404 	bic.w	r4, r5, r4
  413810:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  413814:	d13c      	bne.n	413890 <strncmp+0xa8>
  413816:	460c      	mov	r4, r1
  413818:	4603      	mov	r3, r0
  41381a:	e00e      	b.n	41383a <strncmp+0x52>
  41381c:	685b      	ldr	r3, [r3, #4]
  41381e:	6864      	ldr	r4, [r4, #4]
  413820:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  413824:	42a3      	cmp	r3, r4
  413826:	ea25 0503 	bic.w	r5, r5, r3
  41382a:	d113      	bne.n	413854 <strncmp+0x6c>
  41382c:	3a04      	subs	r2, #4
  41382e:	d029      	beq.n	413884 <strncmp+0x9c>
  413830:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  413834:	d129      	bne.n	41388a <strncmp+0xa2>
  413836:	4603      	mov	r3, r0
  413838:	460c      	mov	r4, r1
  41383a:	2a03      	cmp	r2, #3
  41383c:	f100 0004 	add.w	r0, r0, #4
  413840:	f101 0104 	add.w	r1, r1, #4
  413844:	d8ea      	bhi.n	41381c <strncmp+0x34>
  413846:	1e55      	subs	r5, r2, #1
  413848:	b92a      	cbnz	r2, 413856 <strncmp+0x6e>
  41384a:	7918      	ldrb	r0, [r3, #4]
  41384c:	7922      	ldrb	r2, [r4, #4]
  41384e:	1a80      	subs	r0, r0, r2
  413850:	bc30      	pop	{r4, r5}
  413852:	4770      	bx	lr
  413854:	1e55      	subs	r5, r2, #1
  413856:	7803      	ldrb	r3, [r0, #0]
  413858:	780a      	ldrb	r2, [r1, #0]
  41385a:	4293      	cmp	r3, r2
  41385c:	d11a      	bne.n	413894 <strncmp+0xac>
  41385e:	b1dd      	cbz	r5, 413898 <strncmp+0xb0>
  413860:	b1b3      	cbz	r3, 413890 <strncmp+0xa8>
  413862:	1c6c      	adds	r4, r5, #1
  413864:	440c      	add	r4, r1
  413866:	1c8b      	adds	r3, r1, #2
  413868:	4601      	mov	r1, r0
  41386a:	e004      	b.n	413876 <strncmp+0x8e>
  41386c:	42a3      	cmp	r3, r4
  41386e:	d00c      	beq.n	41388a <strncmp+0xa2>
  413870:	3301      	adds	r3, #1
  413872:	2800      	cmp	r0, #0
  413874:	d0ec      	beq.n	413850 <strncmp+0x68>
  413876:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41387a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  41387e:	4290      	cmp	r0, r2
  413880:	d0f4      	beq.n	41386c <strncmp+0x84>
  413882:	e7e4      	b.n	41384e <strncmp+0x66>
  413884:	4610      	mov	r0, r2
  413886:	bc30      	pop	{r4, r5}
  413888:	4770      	bx	lr
  41388a:	2000      	movs	r0, #0
  41388c:	bc30      	pop	{r4, r5}
  41388e:	4770      	bx	lr
  413890:	4618      	mov	r0, r3
  413892:	e7dd      	b.n	413850 <strncmp+0x68>
  413894:	4618      	mov	r0, r3
  413896:	e7da      	b.n	41384e <strncmp+0x66>
  413898:	4628      	mov	r0, r5
  41389a:	e7d9      	b.n	413850 <strncmp+0x68>

0041389c <strncpy>:
  41389c:	ea40 0301 	orr.w	r3, r0, r1
  4138a0:	079b      	lsls	r3, r3, #30
  4138a2:	b470      	push	{r4, r5, r6}
  4138a4:	d12a      	bne.n	4138fc <strncpy+0x60>
  4138a6:	2a03      	cmp	r2, #3
  4138a8:	d928      	bls.n	4138fc <strncpy+0x60>
  4138aa:	460c      	mov	r4, r1
  4138ac:	4603      	mov	r3, r0
  4138ae:	4621      	mov	r1, r4
  4138b0:	f854 5b04 	ldr.w	r5, [r4], #4
  4138b4:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  4138b8:	ea26 0605 	bic.w	r6, r6, r5
  4138bc:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  4138c0:	d105      	bne.n	4138ce <strncpy+0x32>
  4138c2:	3a04      	subs	r2, #4
  4138c4:	2a03      	cmp	r2, #3
  4138c6:	f843 5b04 	str.w	r5, [r3], #4
  4138ca:	4621      	mov	r1, r4
  4138cc:	d8ef      	bhi.n	4138ae <strncpy+0x12>
  4138ce:	b19a      	cbz	r2, 4138f8 <strncpy+0x5c>
  4138d0:	780c      	ldrb	r4, [r1, #0]
  4138d2:	701c      	strb	r4, [r3, #0]
  4138d4:	3a01      	subs	r2, #1
  4138d6:	3301      	adds	r3, #1
  4138d8:	b13c      	cbz	r4, 4138ea <strncpy+0x4e>
  4138da:	b16a      	cbz	r2, 4138f8 <strncpy+0x5c>
  4138dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4138e0:	f803 4b01 	strb.w	r4, [r3], #1
  4138e4:	3a01      	subs	r2, #1
  4138e6:	2c00      	cmp	r4, #0
  4138e8:	d1f7      	bne.n	4138da <strncpy+0x3e>
  4138ea:	b12a      	cbz	r2, 4138f8 <strncpy+0x5c>
  4138ec:	441a      	add	r2, r3
  4138ee:	2100      	movs	r1, #0
  4138f0:	f803 1b01 	strb.w	r1, [r3], #1
  4138f4:	4293      	cmp	r3, r2
  4138f6:	d1fb      	bne.n	4138f0 <strncpy+0x54>
  4138f8:	bc70      	pop	{r4, r5, r6}
  4138fa:	4770      	bx	lr
  4138fc:	4603      	mov	r3, r0
  4138fe:	e7e6      	b.n	4138ce <strncpy+0x32>

00413900 <_svfprintf_r>:
  413900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413904:	b0c9      	sub	sp, #292	; 0x124
  413906:	4691      	mov	r9, r2
  413908:	9310      	str	r3, [sp, #64]	; 0x40
  41390a:	910c      	str	r1, [sp, #48]	; 0x30
  41390c:	900d      	str	r0, [sp, #52]	; 0x34
  41390e:	f004 fd3f 	bl	418390 <_localeconv_r>
  413912:	6800      	ldr	r0, [r0, #0]
  413914:	9015      	str	r0, [sp, #84]	; 0x54
  413916:	f7ff ff05 	bl	413724 <strlen>
  41391a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41391c:	9018      	str	r0, [sp, #96]	; 0x60
  41391e:	89a3      	ldrh	r3, [r4, #12]
  413920:	061a      	lsls	r2, r3, #24
  413922:	d503      	bpl.n	41392c <_svfprintf_r+0x2c>
  413924:	6923      	ldr	r3, [r4, #16]
  413926:	2b00      	cmp	r3, #0
  413928:	f001 808d 	beq.w	414a46 <_svfprintf_r+0x1146>
  41392c:	ac38      	add	r4, sp, #224	; 0xe0
  41392e:	46a4      	mov	ip, r4
  413930:	9408      	str	r4, [sp, #32]
  413932:	942b      	str	r4, [sp, #172]	; 0xac
  413934:	2500      	movs	r5, #0
  413936:	2400      	movs	r4, #0
  413938:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  41393c:	2300      	movs	r3, #0
  41393e:	9311      	str	r3, [sp, #68]	; 0x44
  413940:	932d      	str	r3, [sp, #180]	; 0xb4
  413942:	932c      	str	r3, [sp, #176]	; 0xb0
  413944:	931a      	str	r3, [sp, #104]	; 0x68
  413946:	9319      	str	r3, [sp, #100]	; 0x64
  413948:	930e      	str	r3, [sp, #56]	; 0x38
  41394a:	4666      	mov	r6, ip
  41394c:	f899 3000 	ldrb.w	r3, [r9]
  413950:	2b00      	cmp	r3, #0
  413952:	f000 80f8 	beq.w	413b46 <_svfprintf_r+0x246>
  413956:	2b25      	cmp	r3, #37	; 0x25
  413958:	f000 80f5 	beq.w	413b46 <_svfprintf_r+0x246>
  41395c:	f109 0201 	add.w	r2, r9, #1
  413960:	e001      	b.n	413966 <_svfprintf_r+0x66>
  413962:	2b25      	cmp	r3, #37	; 0x25
  413964:	d004      	beq.n	413970 <_svfprintf_r+0x70>
  413966:	4614      	mov	r4, r2
  413968:	3201      	adds	r2, #1
  41396a:	7823      	ldrb	r3, [r4, #0]
  41396c:	2b00      	cmp	r3, #0
  41396e:	d1f8      	bne.n	413962 <_svfprintf_r+0x62>
  413970:	ebc9 0504 	rsb	r5, r9, r4
  413974:	b17d      	cbz	r5, 413996 <_svfprintf_r+0x96>
  413976:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413978:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  41397a:	f8c6 9000 	str.w	r9, [r6]
  41397e:	3301      	adds	r3, #1
  413980:	442a      	add	r2, r5
  413982:	2b07      	cmp	r3, #7
  413984:	6075      	str	r5, [r6, #4]
  413986:	922d      	str	r2, [sp, #180]	; 0xb4
  413988:	932c      	str	r3, [sp, #176]	; 0xb0
  41398a:	f300 80c2 	bgt.w	413b12 <_svfprintf_r+0x212>
  41398e:	3608      	adds	r6, #8
  413990:	980e      	ldr	r0, [sp, #56]	; 0x38
  413992:	4428      	add	r0, r5
  413994:	900e      	str	r0, [sp, #56]	; 0x38
  413996:	7823      	ldrb	r3, [r4, #0]
  413998:	2b00      	cmp	r3, #0
  41399a:	f000 80c2 	beq.w	413b22 <_svfprintf_r+0x222>
  41399e:	2300      	movs	r3, #0
  4139a0:	f894 8001 	ldrb.w	r8, [r4, #1]
  4139a4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  4139a8:	461a      	mov	r2, r3
  4139aa:	930f      	str	r3, [sp, #60]	; 0x3c
  4139ac:	9309      	str	r3, [sp, #36]	; 0x24
  4139ae:	f104 0901 	add.w	r9, r4, #1
  4139b2:	f04f 34ff 	mov.w	r4, #4294967295
  4139b6:	940a      	str	r4, [sp, #40]	; 0x28
  4139b8:	f109 0901 	add.w	r9, r9, #1
  4139bc:	f1a8 0320 	sub.w	r3, r8, #32
  4139c0:	2b58      	cmp	r3, #88	; 0x58
  4139c2:	f200 83c7 	bhi.w	414154 <_svfprintf_r+0x854>
  4139c6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4139ca:	026a      	.short	0x026a
  4139cc:	03c503c5 	.word	0x03c503c5
  4139d0:	03c50271 	.word	0x03c50271
  4139d4:	03c503c5 	.word	0x03c503c5
  4139d8:	03c503c5 	.word	0x03c503c5
  4139dc:	031403c5 	.word	0x031403c5
  4139e0:	03c50364 	.word	0x03c50364
  4139e4:	00c0009d 	.word	0x00c0009d
  4139e8:	027803c5 	.word	0x027803c5
  4139ec:	027f027f 	.word	0x027f027f
  4139f0:	027f027f 	.word	0x027f027f
  4139f4:	027f027f 	.word	0x027f027f
  4139f8:	027f027f 	.word	0x027f027f
  4139fc:	03c5027f 	.word	0x03c5027f
  413a00:	03c503c5 	.word	0x03c503c5
  413a04:	03c503c5 	.word	0x03c503c5
  413a08:	03c503c5 	.word	0x03c503c5
  413a0c:	03c503c5 	.word	0x03c503c5
  413a10:	029003c5 	.word	0x029003c5
  413a14:	03c5036f 	.word	0x03c5036f
  413a18:	03c5036f 	.word	0x03c5036f
  413a1c:	03c503c5 	.word	0x03c503c5
  413a20:	036803c5 	.word	0x036803c5
  413a24:	03c503c5 	.word	0x03c503c5
  413a28:	03c50078 	.word	0x03c50078
  413a2c:	03c503c5 	.word	0x03c503c5
  413a30:	03c503c5 	.word	0x03c503c5
  413a34:	03c50059 	.word	0x03c50059
  413a38:	02af03c5 	.word	0x02af03c5
  413a3c:	03c503c5 	.word	0x03c503c5
  413a40:	03c503c5 	.word	0x03c503c5
  413a44:	03c503c5 	.word	0x03c503c5
  413a48:	03c503c5 	.word	0x03c503c5
  413a4c:	03c503c5 	.word	0x03c503c5
  413a50:	03480337 	.word	0x03480337
  413a54:	036f036f 	.word	0x036f036f
  413a58:	02ff036f 	.word	0x02ff036f
  413a5c:	03c50348 	.word	0x03c50348
  413a60:	030803c5 	.word	0x030803c5
  413a64:	02c503c5 	.word	0x02c503c5
  413a68:	0321007c 	.word	0x0321007c
  413a6c:	03c503a5 	.word	0x03c503a5
  413a70:	03c502d9 	.word	0x03c502d9
  413a74:	03c5005f 	.word	0x03c5005f
  413a78:	00de03c5 	.word	0x00de03c5
  413a7c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413a80:	f04c 0c10 	orr.w	ip, ip, #16
  413a84:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  413a88:	9c09      	ldr	r4, [sp, #36]	; 0x24
  413a8a:	06a2      	lsls	r2, r4, #26
  413a8c:	f100 8356 	bmi.w	41413c <_svfprintf_r+0x83c>
  413a90:	9c09      	ldr	r4, [sp, #36]	; 0x24
  413a92:	06e3      	lsls	r3, r4, #27
  413a94:	f100 85e0 	bmi.w	414658 <_svfprintf_r+0xd58>
  413a98:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413a9c:	f01c 0f40 	tst.w	ip, #64	; 0x40
  413aa0:	f000 85da 	beq.w	414658 <_svfprintf_r+0xd58>
  413aa4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  413aa8:	f8bc 4000 	ldrh.w	r4, [ip]
  413aac:	f10c 0c04 	add.w	ip, ip, #4
  413ab0:	2500      	movs	r5, #0
  413ab2:	2301      	movs	r3, #1
  413ab4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  413ab8:	e08c      	b.n	413bd4 <_svfprintf_r+0x2d4>
  413aba:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413abc:	f045 0510 	orr.w	r5, r5, #16
  413ac0:	9509      	str	r5, [sp, #36]	; 0x24
  413ac2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413ac6:	f01c 0320 	ands.w	r3, ip, #32
  413aca:	f040 832c 	bne.w	414126 <_svfprintf_r+0x826>
  413ace:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413ad2:	f01c 0210 	ands.w	r2, ip, #16
  413ad6:	f040 85b8 	bne.w	41464a <_svfprintf_r+0xd4a>
  413ada:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413ade:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  413ae2:	f000 85b2 	beq.w	41464a <_svfprintf_r+0xd4a>
  413ae6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  413aea:	f8bc 4000 	ldrh.w	r4, [ip]
  413aee:	f10c 0c04 	add.w	ip, ip, #4
  413af2:	4613      	mov	r3, r2
  413af4:	2500      	movs	r5, #0
  413af6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  413afa:	e06b      	b.n	413bd4 <_svfprintf_r+0x2d4>
  413afc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  413afe:	9310      	str	r3, [sp, #64]	; 0x40
  413b00:	4264      	negs	r4, r4
  413b02:	940f      	str	r4, [sp, #60]	; 0x3c
  413b04:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413b06:	f045 0504 	orr.w	r5, r5, #4
  413b0a:	9509      	str	r5, [sp, #36]	; 0x24
  413b0c:	f899 8000 	ldrb.w	r8, [r9]
  413b10:	e752      	b.n	4139b8 <_svfprintf_r+0xb8>
  413b12:	980d      	ldr	r0, [sp, #52]	; 0x34
  413b14:	990c      	ldr	r1, [sp, #48]	; 0x30
  413b16:	aa2b      	add	r2, sp, #172	; 0xac
  413b18:	f006 feca 	bl	41a8b0 <__ssprint_r>
  413b1c:	b940      	cbnz	r0, 413b30 <_svfprintf_r+0x230>
  413b1e:	ae38      	add	r6, sp, #224	; 0xe0
  413b20:	e736      	b.n	413990 <_svfprintf_r+0x90>
  413b22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  413b24:	b123      	cbz	r3, 413b30 <_svfprintf_r+0x230>
  413b26:	980d      	ldr	r0, [sp, #52]	; 0x34
  413b28:	990c      	ldr	r1, [sp, #48]	; 0x30
  413b2a:	aa2b      	add	r2, sp, #172	; 0xac
  413b2c:	f006 fec0 	bl	41a8b0 <__ssprint_r>
  413b30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  413b32:	980e      	ldr	r0, [sp, #56]	; 0x38
  413b34:	89a3      	ldrh	r3, [r4, #12]
  413b36:	f013 0f40 	tst.w	r3, #64	; 0x40
  413b3a:	bf18      	it	ne
  413b3c:	f04f 30ff 	movne.w	r0, #4294967295
  413b40:	b049      	add	sp, #292	; 0x124
  413b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413b46:	464c      	mov	r4, r9
  413b48:	e725      	b.n	413996 <_svfprintf_r+0x96>
  413b4a:	f899 8000 	ldrb.w	r8, [r9]
  413b4e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  413b52:	f109 0001 	add.w	r0, r9, #1
  413b56:	f001 8118 	beq.w	414d8a <_svfprintf_r+0x148a>
  413b5a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  413b5e:	2b09      	cmp	r3, #9
  413b60:	bf98      	it	ls
  413b62:	2100      	movls	r1, #0
  413b64:	f201 8077 	bhi.w	414c56 <_svfprintf_r+0x1356>
  413b68:	f810 8b01 	ldrb.w	r8, [r0], #1
  413b6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  413b70:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  413b74:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  413b78:	2b09      	cmp	r3, #9
  413b7a:	d9f5      	bls.n	413b68 <_svfprintf_r+0x268>
  413b7c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  413b80:	910a      	str	r1, [sp, #40]	; 0x28
  413b82:	4681      	mov	r9, r0
  413b84:	e71a      	b.n	4139bc <_svfprintf_r+0xbc>
  413b86:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413b88:	4ca1      	ldr	r4, [pc, #644]	; (413e10 <_svfprintf_r+0x510>)
  413b8a:	941a      	str	r4, [sp, #104]	; 0x68
  413b8c:	06af      	lsls	r7, r5, #26
  413b8e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  413b92:	f140 81d1 	bpl.w	413f38 <_svfprintf_r+0x638>
  413b96:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  413b9a:	f10c 0307 	add.w	r3, ip, #7
  413b9e:	f023 0307 	bic.w	r3, r3, #7
  413ba2:	f103 0408 	add.w	r4, r3, #8
  413ba6:	9410      	str	r4, [sp, #64]	; 0x40
  413ba8:	e9d3 4500 	ldrd	r4, r5, [r3]
  413bac:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413bb0:	f01c 0f01 	tst.w	ip, #1
  413bb4:	f000 8464 	beq.w	414480 <_svfprintf_r+0xb80>
  413bb8:	ea54 0005 	orrs.w	r0, r4, r5
  413bbc:	f000 8460 	beq.w	414480 <_svfprintf_r+0xb80>
  413bc0:	2330      	movs	r3, #48	; 0x30
  413bc2:	f04c 0c02 	orr.w	ip, ip, #2
  413bc6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  413bca:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  413bce:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  413bd2:	2302      	movs	r3, #2
  413bd4:	f04f 0a00 	mov.w	sl, #0
  413bd8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  413bdc:	990a      	ldr	r1, [sp, #40]	; 0x28
  413bde:	2900      	cmp	r1, #0
  413be0:	db05      	blt.n	413bee <_svfprintf_r+0x2ee>
  413be2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413be6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  413bea:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  413bee:	ea54 0005 	orrs.w	r0, r4, r5
  413bf2:	f040 82c7 	bne.w	414184 <_svfprintf_r+0x884>
  413bf6:	990a      	ldr	r1, [sp, #40]	; 0x28
  413bf8:	2900      	cmp	r1, #0
  413bfa:	f040 82c3 	bne.w	414184 <_svfprintf_r+0x884>
  413bfe:	2b00      	cmp	r3, #0
  413c00:	f040 843a 	bne.w	414478 <_svfprintf_r+0xb78>
  413c04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413c08:	f01c 0f01 	tst.w	ip, #1
  413c0c:	f000 8434 	beq.w	414478 <_svfprintf_r+0xb78>
  413c10:	af48      	add	r7, sp, #288	; 0x120
  413c12:	2330      	movs	r3, #48	; 0x30
  413c14:	f807 3d41 	strb.w	r3, [r7, #-65]!
  413c18:	9d08      	ldr	r5, [sp, #32]
  413c1a:	1bec      	subs	r4, r5, r7
  413c1c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  413c20:	2500      	movs	r5, #0
  413c22:	4564      	cmp	r4, ip
  413c24:	bfa8      	it	ge
  413c26:	46a4      	movge	ip, r4
  413c28:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  413c2c:	9514      	str	r5, [sp, #80]	; 0x50
  413c2e:	f1ba 0f00 	cmp.w	sl, #0
  413c32:	d002      	beq.n	413c3a <_svfprintf_r+0x33a>
  413c34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  413c36:	3501      	adds	r5, #1
  413c38:	950b      	str	r5, [sp, #44]	; 0x2c
  413c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413c3c:	f013 0302 	ands.w	r3, r3, #2
  413c40:	9312      	str	r3, [sp, #72]	; 0x48
  413c42:	d002      	beq.n	413c4a <_svfprintf_r+0x34a>
  413c44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  413c46:	3502      	adds	r5, #2
  413c48:	950b      	str	r5, [sp, #44]	; 0x2c
  413c4a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413c4e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  413c52:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  413c56:	f040 8292 	bne.w	41417e <_svfprintf_r+0x87e>
  413c5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  413c5c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  413c60:	ebcc 0b05 	rsb	fp, ip, r5
  413c64:	f1bb 0f00 	cmp.w	fp, #0
  413c68:	f340 8289 	ble.w	41417e <_svfprintf_r+0x87e>
  413c6c:	f1bb 0f10 	cmp.w	fp, #16
  413c70:	992d      	ldr	r1, [sp, #180]	; 0xb4
  413c72:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  413c74:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 413e18 <_svfprintf_r+0x518>
  413c78:	dd2c      	ble.n	413cd4 <_svfprintf_r+0x3d4>
  413c7a:	971b      	str	r7, [sp, #108]	; 0x6c
  413c7c:	4630      	mov	r0, r6
  413c7e:	4657      	mov	r7, sl
  413c80:	2510      	movs	r5, #16
  413c82:	46ca      	mov	sl, r9
  413c84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  413c86:	46a1      	mov	r9, r4
  413c88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  413c8a:	e006      	b.n	413c9a <_svfprintf_r+0x39a>
  413c8c:	f1ab 0b10 	sub.w	fp, fp, #16
  413c90:	f1bb 0f10 	cmp.w	fp, #16
  413c94:	f100 0008 	add.w	r0, r0, #8
  413c98:	dd17      	ble.n	413cca <_svfprintf_r+0x3ca>
  413c9a:	3201      	adds	r2, #1
  413c9c:	3110      	adds	r1, #16
  413c9e:	2a07      	cmp	r2, #7
  413ca0:	912d      	str	r1, [sp, #180]	; 0xb4
  413ca2:	922c      	str	r2, [sp, #176]	; 0xb0
  413ca4:	6007      	str	r7, [r0, #0]
  413ca6:	6045      	str	r5, [r0, #4]
  413ca8:	ddf0      	ble.n	413c8c <_svfprintf_r+0x38c>
  413caa:	4620      	mov	r0, r4
  413cac:	4631      	mov	r1, r6
  413cae:	aa2b      	add	r2, sp, #172	; 0xac
  413cb0:	f006 fdfe 	bl	41a8b0 <__ssprint_r>
  413cb4:	2800      	cmp	r0, #0
  413cb6:	f47f af3b 	bne.w	413b30 <_svfprintf_r+0x230>
  413cba:	f1ab 0b10 	sub.w	fp, fp, #16
  413cbe:	f1bb 0f10 	cmp.w	fp, #16
  413cc2:	992d      	ldr	r1, [sp, #180]	; 0xb4
  413cc4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  413cc6:	a838      	add	r0, sp, #224	; 0xe0
  413cc8:	dce7      	bgt.n	413c9a <_svfprintf_r+0x39a>
  413cca:	464c      	mov	r4, r9
  413ccc:	46d1      	mov	r9, sl
  413cce:	46ba      	mov	sl, r7
  413cd0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  413cd2:	4606      	mov	r6, r0
  413cd4:	3201      	adds	r2, #1
  413cd6:	eb0b 0c01 	add.w	ip, fp, r1
  413cda:	2a07      	cmp	r2, #7
  413cdc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413ce0:	922c      	str	r2, [sp, #176]	; 0xb0
  413ce2:	e886 0c00 	stmia.w	r6, {sl, fp}
  413ce6:	f300 841c 	bgt.w	414522 <_svfprintf_r+0xc22>
  413cea:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  413cee:	3608      	adds	r6, #8
  413cf0:	f1ba 0f00 	cmp.w	sl, #0
  413cf4:	d00f      	beq.n	413d16 <_svfprintf_r+0x416>
  413cf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413cf8:	3301      	adds	r3, #1
  413cfa:	f10c 0c01 	add.w	ip, ip, #1
  413cfe:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  413d02:	2201      	movs	r2, #1
  413d04:	2b07      	cmp	r3, #7
  413d06:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413d0a:	932c      	str	r3, [sp, #176]	; 0xb0
  413d0c:	e886 0006 	stmia.w	r6, {r1, r2}
  413d10:	f300 839a 	bgt.w	414448 <_svfprintf_r+0xb48>
  413d14:	3608      	adds	r6, #8
  413d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  413d18:	b173      	cbz	r3, 413d38 <_svfprintf_r+0x438>
  413d1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413d1c:	3301      	adds	r3, #1
  413d1e:	f10c 0c02 	add.w	ip, ip, #2
  413d22:	a924      	add	r1, sp, #144	; 0x90
  413d24:	2202      	movs	r2, #2
  413d26:	2b07      	cmp	r3, #7
  413d28:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413d2c:	932c      	str	r3, [sp, #176]	; 0xb0
  413d2e:	e886 0006 	stmia.w	r6, {r1, r2}
  413d32:	f300 8395 	bgt.w	414460 <_svfprintf_r+0xb60>
  413d36:	3608      	adds	r6, #8
  413d38:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  413d3a:	2d80      	cmp	r5, #128	; 0x80
  413d3c:	f000 82cc 	beq.w	4142d8 <_svfprintf_r+0x9d8>
  413d40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  413d42:	ebc4 0a05 	rsb	sl, r4, r5
  413d46:	f1ba 0f00 	cmp.w	sl, #0
  413d4a:	dd3b      	ble.n	413dc4 <_svfprintf_r+0x4c4>
  413d4c:	f1ba 0f10 	cmp.w	sl, #16
  413d50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413d52:	4d30      	ldr	r5, [pc, #192]	; (413e14 <_svfprintf_r+0x514>)
  413d54:	dd2b      	ble.n	413dae <_svfprintf_r+0x4ae>
  413d56:	940a      	str	r4, [sp, #40]	; 0x28
  413d58:	4632      	mov	r2, r6
  413d5a:	f04f 0b10 	mov.w	fp, #16
  413d5e:	462e      	mov	r6, r5
  413d60:	4661      	mov	r1, ip
  413d62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  413d64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  413d66:	e006      	b.n	413d76 <_svfprintf_r+0x476>
  413d68:	f1aa 0a10 	sub.w	sl, sl, #16
  413d6c:	f1ba 0f10 	cmp.w	sl, #16
  413d70:	f102 0208 	add.w	r2, r2, #8
  413d74:	dd17      	ble.n	413da6 <_svfprintf_r+0x4a6>
  413d76:	3301      	adds	r3, #1
  413d78:	3110      	adds	r1, #16
  413d7a:	2b07      	cmp	r3, #7
  413d7c:	912d      	str	r1, [sp, #180]	; 0xb4
  413d7e:	932c      	str	r3, [sp, #176]	; 0xb0
  413d80:	e882 0840 	stmia.w	r2, {r6, fp}
  413d84:	ddf0      	ble.n	413d68 <_svfprintf_r+0x468>
  413d86:	4620      	mov	r0, r4
  413d88:	4629      	mov	r1, r5
  413d8a:	aa2b      	add	r2, sp, #172	; 0xac
  413d8c:	f006 fd90 	bl	41a8b0 <__ssprint_r>
  413d90:	2800      	cmp	r0, #0
  413d92:	f47f aecd 	bne.w	413b30 <_svfprintf_r+0x230>
  413d96:	f1aa 0a10 	sub.w	sl, sl, #16
  413d9a:	f1ba 0f10 	cmp.w	sl, #16
  413d9e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  413da0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413da2:	aa38      	add	r2, sp, #224	; 0xe0
  413da4:	dce7      	bgt.n	413d76 <_svfprintf_r+0x476>
  413da6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  413da8:	4635      	mov	r5, r6
  413daa:	468c      	mov	ip, r1
  413dac:	4616      	mov	r6, r2
  413dae:	3301      	adds	r3, #1
  413db0:	44d4      	add	ip, sl
  413db2:	2b07      	cmp	r3, #7
  413db4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413db8:	932c      	str	r3, [sp, #176]	; 0xb0
  413dba:	e886 0420 	stmia.w	r6, {r5, sl}
  413dbe:	f300 8337 	bgt.w	414430 <_svfprintf_r+0xb30>
  413dc2:	3608      	adds	r6, #8
  413dc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413dc6:	05ed      	lsls	r5, r5, #23
  413dc8:	f100 8226 	bmi.w	414218 <_svfprintf_r+0x918>
  413dcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413dce:	6037      	str	r7, [r6, #0]
  413dd0:	3301      	adds	r3, #1
  413dd2:	44a4      	add	ip, r4
  413dd4:	2b07      	cmp	r3, #7
  413dd6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413dda:	6074      	str	r4, [r6, #4]
  413ddc:	932c      	str	r3, [sp, #176]	; 0xb0
  413dde:	f300 8311 	bgt.w	414404 <_svfprintf_r+0xb04>
  413de2:	3608      	adds	r6, #8
  413de4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  413de6:	0763      	lsls	r3, r4, #29
  413de8:	d549      	bpl.n	413e7e <_svfprintf_r+0x57e>
  413dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  413dec:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413dee:	1a2c      	subs	r4, r5, r0
  413df0:	2c00      	cmp	r4, #0
  413df2:	dd44      	ble.n	413e7e <_svfprintf_r+0x57e>
  413df4:	2c10      	cmp	r4, #16
  413df6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413df8:	f8df a01c 	ldr.w	sl, [pc, #28]	; 413e18 <_svfprintf_r+0x518>
  413dfc:	dd2b      	ble.n	413e56 <_svfprintf_r+0x556>
  413dfe:	4657      	mov	r7, sl
  413e00:	2510      	movs	r5, #16
  413e02:	4662      	mov	r2, ip
  413e04:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  413e08:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  413e0c:	e00b      	b.n	413e26 <_svfprintf_r+0x526>
  413e0e:	bf00      	nop
  413e10:	0041ddc8 	.word	0x0041ddc8
  413e14:	0041dd94 	.word	0x0041dd94
  413e18:	0041dde8 	.word	0x0041dde8
  413e1c:	3c10      	subs	r4, #16
  413e1e:	2c10      	cmp	r4, #16
  413e20:	f106 0608 	add.w	r6, r6, #8
  413e24:	dd15      	ble.n	413e52 <_svfprintf_r+0x552>
  413e26:	3301      	adds	r3, #1
  413e28:	3210      	adds	r2, #16
  413e2a:	2b07      	cmp	r3, #7
  413e2c:	922d      	str	r2, [sp, #180]	; 0xb4
  413e2e:	932c      	str	r3, [sp, #176]	; 0xb0
  413e30:	6037      	str	r7, [r6, #0]
  413e32:	6075      	str	r5, [r6, #4]
  413e34:	ddf2      	ble.n	413e1c <_svfprintf_r+0x51c>
  413e36:	4650      	mov	r0, sl
  413e38:	4641      	mov	r1, r8
  413e3a:	aa2b      	add	r2, sp, #172	; 0xac
  413e3c:	f006 fd38 	bl	41a8b0 <__ssprint_r>
  413e40:	2800      	cmp	r0, #0
  413e42:	f47f ae75 	bne.w	413b30 <_svfprintf_r+0x230>
  413e46:	3c10      	subs	r4, #16
  413e48:	2c10      	cmp	r4, #16
  413e4a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  413e4c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413e4e:	ae38      	add	r6, sp, #224	; 0xe0
  413e50:	dce9      	bgt.n	413e26 <_svfprintf_r+0x526>
  413e52:	4694      	mov	ip, r2
  413e54:	46ba      	mov	sl, r7
  413e56:	3301      	adds	r3, #1
  413e58:	44a4      	add	ip, r4
  413e5a:	2b07      	cmp	r3, #7
  413e5c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  413e60:	932c      	str	r3, [sp, #176]	; 0xb0
  413e62:	f8c6 a000 	str.w	sl, [r6]
  413e66:	6074      	str	r4, [r6, #4]
  413e68:	dd09      	ble.n	413e7e <_svfprintf_r+0x57e>
  413e6a:	980d      	ldr	r0, [sp, #52]	; 0x34
  413e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
  413e6e:	aa2b      	add	r2, sp, #172	; 0xac
  413e70:	f006 fd1e 	bl	41a8b0 <__ssprint_r>
  413e74:	2800      	cmp	r0, #0
  413e76:	f47f ae5b 	bne.w	413b30 <_svfprintf_r+0x230>
  413e7a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  413e7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  413e80:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413e82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  413e84:	42a8      	cmp	r0, r5
  413e86:	bfac      	ite	ge
  413e88:	1824      	addge	r4, r4, r0
  413e8a:	1964      	addlt	r4, r4, r5
  413e8c:	940e      	str	r4, [sp, #56]	; 0x38
  413e8e:	f1bc 0f00 	cmp.w	ip, #0
  413e92:	f040 82c3 	bne.w	41441c <_svfprintf_r+0xb1c>
  413e96:	2300      	movs	r3, #0
  413e98:	932c      	str	r3, [sp, #176]	; 0xb0
  413e9a:	ae38      	add	r6, sp, #224	; 0xe0
  413e9c:	e556      	b.n	41394c <_svfprintf_r+0x4c>
  413e9e:	f899 8000 	ldrb.w	r8, [r9]
  413ea2:	2a00      	cmp	r2, #0
  413ea4:	f47f ad88 	bne.w	4139b8 <_svfprintf_r+0xb8>
  413ea8:	2220      	movs	r2, #32
  413eaa:	e585      	b.n	4139b8 <_svfprintf_r+0xb8>
  413eac:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413eae:	f045 0501 	orr.w	r5, r5, #1
  413eb2:	9509      	str	r5, [sp, #36]	; 0x24
  413eb4:	f899 8000 	ldrb.w	r8, [r9]
  413eb8:	e57e      	b.n	4139b8 <_svfprintf_r+0xb8>
  413eba:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413ebc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  413ec0:	9509      	str	r5, [sp, #36]	; 0x24
  413ec2:	f899 8000 	ldrb.w	r8, [r9]
  413ec6:	e577      	b.n	4139b8 <_svfprintf_r+0xb8>
  413ec8:	2400      	movs	r4, #0
  413eca:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  413ece:	940f      	str	r4, [sp, #60]	; 0x3c
  413ed0:	4621      	mov	r1, r4
  413ed2:	f819 8b01 	ldrb.w	r8, [r9], #1
  413ed6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  413eda:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  413ede:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  413ee2:	2b09      	cmp	r3, #9
  413ee4:	d9f5      	bls.n	413ed2 <_svfprintf_r+0x5d2>
  413ee6:	910f      	str	r1, [sp, #60]	; 0x3c
  413ee8:	e568      	b.n	4139bc <_svfprintf_r+0xbc>
  413eea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413eee:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  413ef2:	f04c 0c10 	orr.w	ip, ip, #16
  413ef6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  413efa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  413efc:	06a3      	lsls	r3, r4, #26
  413efe:	f140 80b2 	bpl.w	414066 <_svfprintf_r+0x766>
  413f02:	9d10      	ldr	r5, [sp, #64]	; 0x40
  413f04:	1de9      	adds	r1, r5, #7
  413f06:	f021 0107 	bic.w	r1, r1, #7
  413f0a:	e9d1 2300 	ldrd	r2, r3, [r1]
  413f0e:	3108      	adds	r1, #8
  413f10:	9110      	str	r1, [sp, #64]	; 0x40
  413f12:	4614      	mov	r4, r2
  413f14:	461d      	mov	r5, r3
  413f16:	2a00      	cmp	r2, #0
  413f18:	f173 0000 	sbcs.w	r0, r3, #0
  413f1c:	f2c0 838b 	blt.w	414636 <_svfprintf_r+0xd36>
  413f20:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  413f24:	2301      	movs	r3, #1
  413f26:	e659      	b.n	413bdc <_svfprintf_r+0x2dc>
  413f28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413f2a:	4cb7      	ldr	r4, [pc, #732]	; (414208 <_svfprintf_r+0x908>)
  413f2c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  413f30:	06af      	lsls	r7, r5, #26
  413f32:	941a      	str	r4, [sp, #104]	; 0x68
  413f34:	f53f ae2f 	bmi.w	413b96 <_svfprintf_r+0x296>
  413f38:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413f3a:	06ed      	lsls	r5, r5, #27
  413f3c:	f140 845d 	bpl.w	4147fa <_svfprintf_r+0xefa>
  413f40:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  413f44:	f8dc 4000 	ldr.w	r4, [ip]
  413f48:	f10c 0c04 	add.w	ip, ip, #4
  413f4c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  413f50:	2500      	movs	r5, #0
  413f52:	e62b      	b.n	413bac <_svfprintf_r+0x2ac>
  413f54:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413f58:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  413f5c:	f01c 0f20 	tst.w	ip, #32
  413f60:	f000 843d 	beq.w	4147de <_svfprintf_r+0xede>
  413f64:	9c10      	ldr	r4, [sp, #64]	; 0x40
  413f66:	6821      	ldr	r1, [r4, #0]
  413f68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  413f6a:	17e5      	asrs	r5, r4, #31
  413f6c:	462b      	mov	r3, r5
  413f6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  413f70:	4622      	mov	r2, r4
  413f72:	3504      	adds	r5, #4
  413f74:	9510      	str	r5, [sp, #64]	; 0x40
  413f76:	e9c1 2300 	strd	r2, r3, [r1]
  413f7a:	e4e7      	b.n	41394c <_svfprintf_r+0x4c>
  413f7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  413f7e:	6827      	ldr	r7, [r4, #0]
  413f80:	f04f 0a00 	mov.w	sl, #0
  413f84:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  413f88:	1d25      	adds	r5, r4, #4
  413f8a:	2f00      	cmp	r7, #0
  413f8c:	f000 85f5 	beq.w	414b7a <_svfprintf_r+0x127a>
  413f90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  413f92:	2c00      	cmp	r4, #0
  413f94:	4638      	mov	r0, r7
  413f96:	f2c0 85a7 	blt.w	414ae8 <_svfprintf_r+0x11e8>
  413f9a:	4651      	mov	r1, sl
  413f9c:	4622      	mov	r2, r4
  413f9e:	f004 fac3 	bl	418528 <memchr>
  413fa2:	2800      	cmp	r0, #0
  413fa4:	f000 861f 	beq.w	414be6 <_svfprintf_r+0x12e6>
  413fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  413faa:	9510      	str	r5, [sp, #64]	; 0x40
  413fac:	1bc0      	subs	r0, r0, r7
  413fae:	42a0      	cmp	r0, r4
  413fb0:	bfb8      	it	lt
  413fb2:	4604      	movlt	r4, r0
  413fb4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  413fb8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  413fbc:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  413fc0:	950b      	str	r5, [sp, #44]	; 0x2c
  413fc2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  413fc6:	e632      	b.n	413c2e <_svfprintf_r+0x32e>
  413fc8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  413fcc:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  413fd0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  413fd4:	f899 8000 	ldrb.w	r8, [r9]
  413fd8:	e4ee      	b.n	4139b8 <_svfprintf_r+0xb8>
  413fda:	f899 8000 	ldrb.w	r8, [r9]
  413fde:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  413fe2:	464b      	mov	r3, r9
  413fe4:	f000 848b 	beq.w	4148fe <_svfprintf_r+0xffe>
  413fe8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413fea:	f045 0510 	orr.w	r5, r5, #16
  413fee:	9509      	str	r5, [sp, #36]	; 0x24
  413ff0:	e4e2      	b.n	4139b8 <_svfprintf_r+0xb8>
  413ff2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  413ff4:	9d10      	ldr	r5, [sp, #64]	; 0x40
  413ff6:	6824      	ldr	r4, [r4, #0]
  413ff8:	940f      	str	r4, [sp, #60]	; 0x3c
  413ffa:	2c00      	cmp	r4, #0
  413ffc:	f105 0304 	add.w	r3, r5, #4
  414000:	f6ff ad7c 	blt.w	413afc <_svfprintf_r+0x1fc>
  414004:	9310      	str	r3, [sp, #64]	; 0x40
  414006:	f899 8000 	ldrb.w	r8, [r9]
  41400a:	e4d5      	b.n	4139b8 <_svfprintf_r+0xb8>
  41400c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  41400e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  414012:	487e      	ldr	r0, [pc, #504]	; (41420c <_svfprintf_r+0x90c>)
  414014:	6814      	ldr	r4, [r2, #0]
  414016:	901a      	str	r0, [sp, #104]	; 0x68
  414018:	2330      	movs	r3, #48	; 0x30
  41401a:	1d15      	adds	r5, r2, #4
  41401c:	f04f 0878 	mov.w	r8, #120	; 0x78
  414020:	f04c 0c02 	orr.w	ip, ip, #2
  414024:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  414028:	9510      	str	r5, [sp, #64]	; 0x40
  41402a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  41402e:	2500      	movs	r5, #0
  414030:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  414034:	2302      	movs	r3, #2
  414036:	e5cd      	b.n	413bd4 <_svfprintf_r+0x2d4>
  414038:	9a10      	ldr	r2, [sp, #64]	; 0x40
  41403a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41403c:	6812      	ldr	r2, [r2, #0]
  41403e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  414042:	2300      	movs	r3, #0
  414044:	2401      	movs	r4, #1
  414046:	3504      	adds	r5, #4
  414048:	469a      	mov	sl, r3
  41404a:	940b      	str	r4, [sp, #44]	; 0x2c
  41404c:	9510      	str	r5, [sp, #64]	; 0x40
  41404e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  414052:	930a      	str	r3, [sp, #40]	; 0x28
  414054:	9314      	str	r3, [sp, #80]	; 0x50
  414056:	af2e      	add	r7, sp, #184	; 0xb8
  414058:	e5ef      	b.n	413c3a <_svfprintf_r+0x33a>
  41405a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41405c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  414060:	06a3      	lsls	r3, r4, #26
  414062:	f53f af4e 	bmi.w	413f02 <_svfprintf_r+0x602>
  414066:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  41406a:	f01c 0f10 	tst.w	ip, #16
  41406e:	f040 82d2 	bne.w	414616 <_svfprintf_r+0xd16>
  414072:	9c09      	ldr	r4, [sp, #36]	; 0x24
  414074:	0667      	lsls	r7, r4, #25
  414076:	f140 82ce 	bpl.w	414616 <_svfprintf_r+0xd16>
  41407a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  41407e:	f9bc 4000 	ldrsh.w	r4, [ip]
  414082:	f10c 0c04 	add.w	ip, ip, #4
  414086:	17e5      	asrs	r5, r4, #31
  414088:	4622      	mov	r2, r4
  41408a:	462b      	mov	r3, r5
  41408c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  414090:	e741      	b.n	413f16 <_svfprintf_r+0x616>
  414092:	f899 8000 	ldrb.w	r8, [r9]
  414096:	222b      	movs	r2, #43	; 0x2b
  414098:	e48e      	b.n	4139b8 <_svfprintf_r+0xb8>
  41409a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41409c:	f045 0508 	orr.w	r5, r5, #8
  4140a0:	9509      	str	r5, [sp, #36]	; 0x24
  4140a2:	f899 8000 	ldrb.w	r8, [r9]
  4140a6:	e487      	b.n	4139b8 <_svfprintf_r+0xb8>
  4140a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4140aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4140ac:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4140b0:	1deb      	adds	r3, r5, #7
  4140b2:	0725      	lsls	r5, r4, #28
  4140b4:	f023 0307 	bic.w	r3, r3, #7
  4140b8:	f140 838a 	bpl.w	4147d0 <_svfprintf_r+0xed0>
  4140bc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4140c0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4140c4:	f103 0c08 	add.w	ip, r3, #8
  4140c8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4140cc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4140d0:	f005 f918 	bl	419304 <__fpclassifyd>
  4140d4:	2801      	cmp	r0, #1
  4140d6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4140da:	f040 835f 	bne.w	41479c <_svfprintf_r+0xe9c>
  4140de:	2200      	movs	r2, #0
  4140e0:	2300      	movs	r3, #0
  4140e2:	f007 fe97 	bl	41be14 <__aeabi_dcmplt>
  4140e6:	2800      	cmp	r0, #0
  4140e8:	f040 856d 	bne.w	414bc6 <_svfprintf_r+0x12c6>
  4140ec:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4140f0:	2503      	movs	r5, #3
  4140f2:	950b      	str	r5, [sp, #44]	; 0x2c
  4140f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4140f6:	4f46      	ldr	r7, [pc, #280]	; (414210 <_svfprintf_r+0x910>)
  4140f8:	4b46      	ldr	r3, [pc, #280]	; (414214 <_svfprintf_r+0x914>)
  4140fa:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  4140fe:	2400      	movs	r4, #0
  414100:	9509      	str	r5, [sp, #36]	; 0x24
  414102:	2500      	movs	r5, #0
  414104:	940a      	str	r4, [sp, #40]	; 0x28
  414106:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  41410a:	bfd8      	it	le
  41410c:	461f      	movle	r7, r3
  41410e:	2403      	movs	r4, #3
  414110:	9514      	str	r5, [sp, #80]	; 0x50
  414112:	e58c      	b.n	413c2e <_svfprintf_r+0x32e>
  414114:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  414118:	f04c 0c20 	orr.w	ip, ip, #32
  41411c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  414120:	f899 8000 	ldrb.w	r8, [r9]
  414124:	e448      	b.n	4139b8 <_svfprintf_r+0xb8>
  414126:	9c10      	ldr	r4, [sp, #64]	; 0x40
  414128:	1de3      	adds	r3, r4, #7
  41412a:	f023 0307 	bic.w	r3, r3, #7
  41412e:	f103 0508 	add.w	r5, r3, #8
  414132:	9510      	str	r5, [sp, #64]	; 0x40
  414134:	e9d3 4500 	ldrd	r4, r5, [r3]
  414138:	2300      	movs	r3, #0
  41413a:	e54b      	b.n	413bd4 <_svfprintf_r+0x2d4>
  41413c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41413e:	1deb      	adds	r3, r5, #7
  414140:	f023 0307 	bic.w	r3, r3, #7
  414144:	f103 0c08 	add.w	ip, r3, #8
  414148:	e9d3 4500 	ldrd	r4, r5, [r3]
  41414c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  414150:	2301      	movs	r3, #1
  414152:	e53f      	b.n	413bd4 <_svfprintf_r+0x2d4>
  414154:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  414158:	f1b8 0f00 	cmp.w	r8, #0
  41415c:	f43f ace1 	beq.w	413b22 <_svfprintf_r+0x222>
  414160:	2300      	movs	r3, #0
  414162:	f04f 0c01 	mov.w	ip, #1
  414166:	469a      	mov	sl, r3
  414168:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  41416c:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  414170:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  414174:	930a      	str	r3, [sp, #40]	; 0x28
  414176:	9314      	str	r3, [sp, #80]	; 0x50
  414178:	4664      	mov	r4, ip
  41417a:	af2e      	add	r7, sp, #184	; 0xb8
  41417c:	e55d      	b.n	413c3a <_svfprintf_r+0x33a>
  41417e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414182:	e5b5      	b.n	413cf0 <_svfprintf_r+0x3f0>
  414184:	2b01      	cmp	r3, #1
  414186:	f000 80ec 	beq.w	414362 <_svfprintf_r+0xa62>
  41418a:	2b02      	cmp	r3, #2
  41418c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  414190:	d118      	bne.n	4141c4 <_svfprintf_r+0x8c4>
  414192:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  414196:	4619      	mov	r1, r3
  414198:	f004 000f 	and.w	r0, r4, #15
  41419c:	0922      	lsrs	r2, r4, #4
  41419e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  4141a2:	460f      	mov	r7, r1
  4141a4:	092b      	lsrs	r3, r5, #4
  4141a6:	f81c 1000 	ldrb.w	r1, [ip, r0]
  4141aa:	7039      	strb	r1, [r7, #0]
  4141ac:	ea52 0003 	orrs.w	r0, r2, r3
  4141b0:	4614      	mov	r4, r2
  4141b2:	461d      	mov	r5, r3
  4141b4:	f107 31ff 	add.w	r1, r7, #4294967295
  4141b8:	d1ee      	bne.n	414198 <_svfprintf_r+0x898>
  4141ba:	9d08      	ldr	r5, [sp, #32]
  4141bc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4141c0:	1bec      	subs	r4, r5, r7
  4141c2:	e52b      	b.n	413c1c <_svfprintf_r+0x31c>
  4141c4:	08e0      	lsrs	r0, r4, #3
  4141c6:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  4141ca:	f004 0207 	and.w	r2, r4, #7
  4141ce:	08e9      	lsrs	r1, r5, #3
  4141d0:	3230      	adds	r2, #48	; 0x30
  4141d2:	ea50 0c01 	orrs.w	ip, r0, r1
  4141d6:	461f      	mov	r7, r3
  4141d8:	701a      	strb	r2, [r3, #0]
  4141da:	4604      	mov	r4, r0
  4141dc:	460d      	mov	r5, r1
  4141de:	f103 33ff 	add.w	r3, r3, #4294967295
  4141e2:	d1ef      	bne.n	4141c4 <_svfprintf_r+0x8c4>
  4141e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4141e6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  4141ea:	07e0      	lsls	r0, r4, #31
  4141ec:	4639      	mov	r1, r7
  4141ee:	f140 80c1 	bpl.w	414374 <_svfprintf_r+0xa74>
  4141f2:	2a30      	cmp	r2, #48	; 0x30
  4141f4:	f000 80be 	beq.w	414374 <_svfprintf_r+0xa74>
  4141f8:	9d08      	ldr	r5, [sp, #32]
  4141fa:	461f      	mov	r7, r3
  4141fc:	2330      	movs	r3, #48	; 0x30
  4141fe:	1bec      	subs	r4, r5, r7
  414200:	f801 3c01 	strb.w	r3, [r1, #-1]
  414204:	e50a      	b.n	413c1c <_svfprintf_r+0x31c>
  414206:	bf00      	nop
  414208:	0041ddb4 	.word	0x0041ddb4
  41420c:	0041ddc8 	.word	0x0041ddc8
  414210:	0041dda8 	.word	0x0041dda8
  414214:	0041dda4 	.word	0x0041dda4
  414218:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  41421c:	f340 80ad 	ble.w	41437a <_svfprintf_r+0xa7a>
  414220:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  414224:	2200      	movs	r2, #0
  414226:	2300      	movs	r3, #0
  414228:	f8cd c01c 	str.w	ip, [sp, #28]
  41422c:	f007 fde8 	bl	41be00 <__aeabi_dcmpeq>
  414230:	f8dd c01c 	ldr.w	ip, [sp, #28]
  414234:	2800      	cmp	r0, #0
  414236:	f000 8126 	beq.w	414486 <_svfprintf_r+0xb86>
  41423a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41423c:	4aaa      	ldr	r2, [pc, #680]	; (4144e8 <_svfprintf_r+0xbe8>)
  41423e:	6032      	str	r2, [r6, #0]
  414240:	3301      	adds	r3, #1
  414242:	f10c 0c01 	add.w	ip, ip, #1
  414246:	2201      	movs	r2, #1
  414248:	2b07      	cmp	r3, #7
  41424a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  41424e:	932c      	str	r3, [sp, #176]	; 0xb0
  414250:	6072      	str	r2, [r6, #4]
  414252:	f300 82f7 	bgt.w	414844 <_svfprintf_r+0xf44>
  414256:	3608      	adds	r6, #8
  414258:	9b25      	ldr	r3, [sp, #148]	; 0x94
  41425a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  41425c:	42a3      	cmp	r3, r4
  41425e:	db03      	blt.n	414268 <_svfprintf_r+0x968>
  414260:	9d09      	ldr	r5, [sp, #36]	; 0x24
  414262:	07ec      	lsls	r4, r5, #31
  414264:	f57f adbe 	bpl.w	413de4 <_svfprintf_r+0x4e4>
  414268:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41426a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  41426c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  41426e:	6034      	str	r4, [r6, #0]
  414270:	3301      	adds	r3, #1
  414272:	44ac      	add	ip, r5
  414274:	2b07      	cmp	r3, #7
  414276:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  41427a:	6075      	str	r5, [r6, #4]
  41427c:	932c      	str	r3, [sp, #176]	; 0xb0
  41427e:	f300 8348 	bgt.w	414912 <_svfprintf_r+0x1012>
  414282:	3608      	adds	r6, #8
  414284:	9d11      	ldr	r5, [sp, #68]	; 0x44
  414286:	1e6c      	subs	r4, r5, #1
  414288:	2c00      	cmp	r4, #0
  41428a:	f77f adab 	ble.w	413de4 <_svfprintf_r+0x4e4>
  41428e:	2c10      	cmp	r4, #16
  414290:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  414292:	4d96      	ldr	r5, [pc, #600]	; (4144ec <_svfprintf_r+0xbec>)
  414294:	f340 8197 	ble.w	4145c6 <_svfprintf_r+0xcc6>
  414298:	2710      	movs	r7, #16
  41429a:	4662      	mov	r2, ip
  41429c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4142a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4142a4:	e004      	b.n	4142b0 <_svfprintf_r+0x9b0>
  4142a6:	3608      	adds	r6, #8
  4142a8:	3c10      	subs	r4, #16
  4142aa:	2c10      	cmp	r4, #16
  4142ac:	f340 818a 	ble.w	4145c4 <_svfprintf_r+0xcc4>
  4142b0:	3301      	adds	r3, #1
  4142b2:	3210      	adds	r2, #16
  4142b4:	2b07      	cmp	r3, #7
  4142b6:	922d      	str	r2, [sp, #180]	; 0xb4
  4142b8:	932c      	str	r3, [sp, #176]	; 0xb0
  4142ba:	e886 00a0 	stmia.w	r6, {r5, r7}
  4142be:	ddf2      	ble.n	4142a6 <_svfprintf_r+0x9a6>
  4142c0:	4640      	mov	r0, r8
  4142c2:	4651      	mov	r1, sl
  4142c4:	aa2b      	add	r2, sp, #172	; 0xac
  4142c6:	f006 faf3 	bl	41a8b0 <__ssprint_r>
  4142ca:	2800      	cmp	r0, #0
  4142cc:	f47f ac30 	bne.w	413b30 <_svfprintf_r+0x230>
  4142d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4142d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4142d4:	ae38      	add	r6, sp, #224	; 0xe0
  4142d6:	e7e7      	b.n	4142a8 <_svfprintf_r+0x9a8>
  4142d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4142da:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4142dc:	ebc0 0a05 	rsb	sl, r0, r5
  4142e0:	f1ba 0f00 	cmp.w	sl, #0
  4142e4:	f77f ad2c 	ble.w	413d40 <_svfprintf_r+0x440>
  4142e8:	f1ba 0f10 	cmp.w	sl, #16
  4142ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4142ee:	4d7f      	ldr	r5, [pc, #508]	; (4144ec <_svfprintf_r+0xbec>)
  4142f0:	dd2b      	ble.n	41434a <_svfprintf_r+0xa4a>
  4142f2:	9412      	str	r4, [sp, #72]	; 0x48
  4142f4:	4632      	mov	r2, r6
  4142f6:	f04f 0b10 	mov.w	fp, #16
  4142fa:	462e      	mov	r6, r5
  4142fc:	4661      	mov	r1, ip
  4142fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  414300:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  414302:	e006      	b.n	414312 <_svfprintf_r+0xa12>
  414304:	f1aa 0a10 	sub.w	sl, sl, #16
  414308:	f1ba 0f10 	cmp.w	sl, #16
  41430c:	f102 0208 	add.w	r2, r2, #8
  414310:	dd17      	ble.n	414342 <_svfprintf_r+0xa42>
  414312:	3301      	adds	r3, #1
  414314:	3110      	adds	r1, #16
  414316:	2b07      	cmp	r3, #7
  414318:	912d      	str	r1, [sp, #180]	; 0xb4
  41431a:	932c      	str	r3, [sp, #176]	; 0xb0
  41431c:	e882 0840 	stmia.w	r2, {r6, fp}
  414320:	ddf0      	ble.n	414304 <_svfprintf_r+0xa04>
  414322:	4620      	mov	r0, r4
  414324:	4629      	mov	r1, r5
  414326:	aa2b      	add	r2, sp, #172	; 0xac
  414328:	f006 fac2 	bl	41a8b0 <__ssprint_r>
  41432c:	2800      	cmp	r0, #0
  41432e:	f47f abff 	bne.w	413b30 <_svfprintf_r+0x230>
  414332:	f1aa 0a10 	sub.w	sl, sl, #16
  414336:	f1ba 0f10 	cmp.w	sl, #16
  41433a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  41433c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41433e:	aa38      	add	r2, sp, #224	; 0xe0
  414340:	dce7      	bgt.n	414312 <_svfprintf_r+0xa12>
  414342:	9c12      	ldr	r4, [sp, #72]	; 0x48
  414344:	4635      	mov	r5, r6
  414346:	468c      	mov	ip, r1
  414348:	4616      	mov	r6, r2
  41434a:	3301      	adds	r3, #1
  41434c:	44d4      	add	ip, sl
  41434e:	2b07      	cmp	r3, #7
  414350:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  414354:	932c      	str	r3, [sp, #176]	; 0xb0
  414356:	e886 0420 	stmia.w	r6, {r5, sl}
  41435a:	f300 8212 	bgt.w	414782 <_svfprintf_r+0xe82>
  41435e:	3608      	adds	r6, #8
  414360:	e4ee      	b.n	413d40 <_svfprintf_r+0x440>
  414362:	2d00      	cmp	r5, #0
  414364:	bf08      	it	eq
  414366:	2c0a      	cmpeq	r4, #10
  414368:	f080 8138 	bcs.w	4145dc <_svfprintf_r+0xcdc>
  41436c:	af48      	add	r7, sp, #288	; 0x120
  41436e:	3430      	adds	r4, #48	; 0x30
  414370:	f807 4d41 	strb.w	r4, [r7, #-65]!
  414374:	9d08      	ldr	r5, [sp, #32]
  414376:	1bec      	subs	r4, r5, r7
  414378:	e450      	b.n	413c1c <_svfprintf_r+0x31c>
  41437a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  41437c:	2c01      	cmp	r4, #1
  41437e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  414380:	f340 81d5 	ble.w	41472e <_svfprintf_r+0xe2e>
  414384:	3401      	adds	r4, #1
  414386:	f10c 0301 	add.w	r3, ip, #1
  41438a:	2201      	movs	r2, #1
  41438c:	2c07      	cmp	r4, #7
  41438e:	6037      	str	r7, [r6, #0]
  414390:	932d      	str	r3, [sp, #180]	; 0xb4
  414392:	942c      	str	r4, [sp, #176]	; 0xb0
  414394:	6072      	str	r2, [r6, #4]
  414396:	f300 81db 	bgt.w	414750 <_svfprintf_r+0xe50>
  41439a:	3608      	adds	r6, #8
  41439c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  4143a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4143a2:	6035      	str	r5, [r6, #0]
  4143a4:	3401      	adds	r4, #1
  4143a6:	4498      	add	r8, r3
  4143a8:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4143aa:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4143ae:	2c07      	cmp	r4, #7
  4143b0:	942c      	str	r4, [sp, #176]	; 0xb0
  4143b2:	6075      	str	r5, [r6, #4]
  4143b4:	f300 81d8 	bgt.w	414768 <_svfprintf_r+0xe68>
  4143b8:	3608      	adds	r6, #8
  4143ba:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4143be:	2200      	movs	r2, #0
  4143c0:	2300      	movs	r3, #0
  4143c2:	f007 fd1d 	bl	41be00 <__aeabi_dcmpeq>
  4143c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4143c8:	2800      	cmp	r0, #0
  4143ca:	f040 80b9 	bne.w	414540 <_svfprintf_r+0xc40>
  4143ce:	1e6b      	subs	r3, r5, #1
  4143d0:	3401      	adds	r4, #1
  4143d2:	3701      	adds	r7, #1
  4143d4:	4498      	add	r8, r3
  4143d6:	2c07      	cmp	r4, #7
  4143d8:	942c      	str	r4, [sp, #176]	; 0xb0
  4143da:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4143de:	6037      	str	r7, [r6, #0]
  4143e0:	6073      	str	r3, [r6, #4]
  4143e2:	f300 80e2 	bgt.w	4145aa <_svfprintf_r+0xcaa>
  4143e6:	3608      	adds	r6, #8
  4143e8:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  4143ec:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4143ee:	3401      	adds	r4, #1
  4143f0:	44c4      	add	ip, r8
  4143f2:	ab27      	add	r3, sp, #156	; 0x9c
  4143f4:	2c07      	cmp	r4, #7
  4143f6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4143fa:	942c      	str	r4, [sp, #176]	; 0xb0
  4143fc:	e886 0028 	stmia.w	r6, {r3, r5}
  414400:	f77f acef 	ble.w	413de2 <_svfprintf_r+0x4e2>
  414404:	980d      	ldr	r0, [sp, #52]	; 0x34
  414406:	990c      	ldr	r1, [sp, #48]	; 0x30
  414408:	aa2b      	add	r2, sp, #172	; 0xac
  41440a:	f006 fa51 	bl	41a8b0 <__ssprint_r>
  41440e:	2800      	cmp	r0, #0
  414410:	f47f ab8e 	bne.w	413b30 <_svfprintf_r+0x230>
  414414:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414418:	ae38      	add	r6, sp, #224	; 0xe0
  41441a:	e4e3      	b.n	413de4 <_svfprintf_r+0x4e4>
  41441c:	980d      	ldr	r0, [sp, #52]	; 0x34
  41441e:	990c      	ldr	r1, [sp, #48]	; 0x30
  414420:	aa2b      	add	r2, sp, #172	; 0xac
  414422:	f006 fa45 	bl	41a8b0 <__ssprint_r>
  414426:	2800      	cmp	r0, #0
  414428:	f43f ad35 	beq.w	413e96 <_svfprintf_r+0x596>
  41442c:	f7ff bb80 	b.w	413b30 <_svfprintf_r+0x230>
  414430:	980d      	ldr	r0, [sp, #52]	; 0x34
  414432:	990c      	ldr	r1, [sp, #48]	; 0x30
  414434:	aa2b      	add	r2, sp, #172	; 0xac
  414436:	f006 fa3b 	bl	41a8b0 <__ssprint_r>
  41443a:	2800      	cmp	r0, #0
  41443c:	f47f ab78 	bne.w	413b30 <_svfprintf_r+0x230>
  414440:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414444:	ae38      	add	r6, sp, #224	; 0xe0
  414446:	e4bd      	b.n	413dc4 <_svfprintf_r+0x4c4>
  414448:	980d      	ldr	r0, [sp, #52]	; 0x34
  41444a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41444c:	aa2b      	add	r2, sp, #172	; 0xac
  41444e:	f006 fa2f 	bl	41a8b0 <__ssprint_r>
  414452:	2800      	cmp	r0, #0
  414454:	f47f ab6c 	bne.w	413b30 <_svfprintf_r+0x230>
  414458:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  41445c:	ae38      	add	r6, sp, #224	; 0xe0
  41445e:	e45a      	b.n	413d16 <_svfprintf_r+0x416>
  414460:	980d      	ldr	r0, [sp, #52]	; 0x34
  414462:	990c      	ldr	r1, [sp, #48]	; 0x30
  414464:	aa2b      	add	r2, sp, #172	; 0xac
  414466:	f006 fa23 	bl	41a8b0 <__ssprint_r>
  41446a:	2800      	cmp	r0, #0
  41446c:	f47f ab60 	bne.w	413b30 <_svfprintf_r+0x230>
  414470:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414474:	ae38      	add	r6, sp, #224	; 0xe0
  414476:	e45f      	b.n	413d38 <_svfprintf_r+0x438>
  414478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41447a:	af38      	add	r7, sp, #224	; 0xe0
  41447c:	f7ff bbce 	b.w	413c1c <_svfprintf_r+0x31c>
  414480:	2302      	movs	r3, #2
  414482:	f7ff bba7 	b.w	413bd4 <_svfprintf_r+0x2d4>
  414486:	9b25      	ldr	r3, [sp, #148]	; 0x94
  414488:	2b00      	cmp	r3, #0
  41448a:	f340 81e7 	ble.w	41485c <_svfprintf_r+0xf5c>
  41448e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  414490:	9d14      	ldr	r5, [sp, #80]	; 0x50
  414492:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  414496:	42ac      	cmp	r4, r5
  414498:	bfa8      	it	ge
  41449a:	462c      	movge	r4, r5
  41449c:	2c00      	cmp	r4, #0
  41449e:	44ba      	add	sl, r7
  4144a0:	dd0b      	ble.n	4144ba <_svfprintf_r+0xbba>
  4144a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4144a4:	6037      	str	r7, [r6, #0]
  4144a6:	3301      	adds	r3, #1
  4144a8:	44a4      	add	ip, r4
  4144aa:	2b07      	cmp	r3, #7
  4144ac:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4144b0:	6074      	str	r4, [r6, #4]
  4144b2:	932c      	str	r3, [sp, #176]	; 0xb0
  4144b4:	f300 8328 	bgt.w	414b08 <_svfprintf_r+0x1208>
  4144b8:	3608      	adds	r6, #8
  4144ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4144bc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  4144c0:	1b2c      	subs	r4, r5, r4
  4144c2:	2c00      	cmp	r4, #0
  4144c4:	f340 80db 	ble.w	41467e <_svfprintf_r+0xd7e>
  4144c8:	2c10      	cmp	r4, #16
  4144ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4144cc:	4d07      	ldr	r5, [pc, #28]	; (4144ec <_svfprintf_r+0xbec>)
  4144ce:	f340 81ad 	ble.w	41482c <_svfprintf_r+0xf2c>
  4144d2:	970a      	str	r7, [sp, #40]	; 0x28
  4144d4:	f04f 0810 	mov.w	r8, #16
  4144d8:	462f      	mov	r7, r5
  4144da:	4662      	mov	r2, ip
  4144dc:	4625      	mov	r5, r4
  4144de:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  4144e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4144e4:	e009      	b.n	4144fa <_svfprintf_r+0xbfa>
  4144e6:	bf00      	nop
  4144e8:	0041dde4 	.word	0x0041dde4
  4144ec:	0041dd94 	.word	0x0041dd94
  4144f0:	3608      	adds	r6, #8
  4144f2:	3d10      	subs	r5, #16
  4144f4:	2d10      	cmp	r5, #16
  4144f6:	f340 8195 	ble.w	414824 <_svfprintf_r+0xf24>
  4144fa:	3301      	adds	r3, #1
  4144fc:	3210      	adds	r2, #16
  4144fe:	2b07      	cmp	r3, #7
  414500:	922d      	str	r2, [sp, #180]	; 0xb4
  414502:	932c      	str	r3, [sp, #176]	; 0xb0
  414504:	e886 0180 	stmia.w	r6, {r7, r8}
  414508:	ddf2      	ble.n	4144f0 <_svfprintf_r+0xbf0>
  41450a:	4658      	mov	r0, fp
  41450c:	4621      	mov	r1, r4
  41450e:	aa2b      	add	r2, sp, #172	; 0xac
  414510:	f006 f9ce 	bl	41a8b0 <__ssprint_r>
  414514:	2800      	cmp	r0, #0
  414516:	f47f ab0b 	bne.w	413b30 <_svfprintf_r+0x230>
  41451a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  41451c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41451e:	ae38      	add	r6, sp, #224	; 0xe0
  414520:	e7e7      	b.n	4144f2 <_svfprintf_r+0xbf2>
  414522:	980d      	ldr	r0, [sp, #52]	; 0x34
  414524:	990c      	ldr	r1, [sp, #48]	; 0x30
  414526:	aa2b      	add	r2, sp, #172	; 0xac
  414528:	f006 f9c2 	bl	41a8b0 <__ssprint_r>
  41452c:	2800      	cmp	r0, #0
  41452e:	f47f aaff 	bne.w	413b30 <_svfprintf_r+0x230>
  414532:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  414536:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  41453a:	ae38      	add	r6, sp, #224	; 0xe0
  41453c:	f7ff bbd8 	b.w	413cf0 <_svfprintf_r+0x3f0>
  414540:	1e6f      	subs	r7, r5, #1
  414542:	2f00      	cmp	r7, #0
  414544:	f77f af50 	ble.w	4143e8 <_svfprintf_r+0xae8>
  414548:	2f10      	cmp	r7, #16
  41454a:	4db3      	ldr	r5, [pc, #716]	; (414818 <_svfprintf_r+0xf18>)
  41454c:	dd23      	ble.n	414596 <_svfprintf_r+0xc96>
  41454e:	4643      	mov	r3, r8
  414550:	f04f 0a10 	mov.w	sl, #16
  414554:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  414558:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  41455c:	e004      	b.n	414568 <_svfprintf_r+0xc68>
  41455e:	3f10      	subs	r7, #16
  414560:	2f10      	cmp	r7, #16
  414562:	f106 0608 	add.w	r6, r6, #8
  414566:	dd15      	ble.n	414594 <_svfprintf_r+0xc94>
  414568:	3401      	adds	r4, #1
  41456a:	3310      	adds	r3, #16
  41456c:	2c07      	cmp	r4, #7
  41456e:	932d      	str	r3, [sp, #180]	; 0xb4
  414570:	942c      	str	r4, [sp, #176]	; 0xb0
  414572:	e886 0420 	stmia.w	r6, {r5, sl}
  414576:	ddf2      	ble.n	41455e <_svfprintf_r+0xc5e>
  414578:	4640      	mov	r0, r8
  41457a:	4659      	mov	r1, fp
  41457c:	aa2b      	add	r2, sp, #172	; 0xac
  41457e:	f006 f997 	bl	41a8b0 <__ssprint_r>
  414582:	2800      	cmp	r0, #0
  414584:	f47f aad4 	bne.w	413b30 <_svfprintf_r+0x230>
  414588:	3f10      	subs	r7, #16
  41458a:	2f10      	cmp	r7, #16
  41458c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  41458e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  414590:	ae38      	add	r6, sp, #224	; 0xe0
  414592:	dce9      	bgt.n	414568 <_svfprintf_r+0xc68>
  414594:	4698      	mov	r8, r3
  414596:	3401      	adds	r4, #1
  414598:	44b8      	add	r8, r7
  41459a:	2c07      	cmp	r4, #7
  41459c:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4145a0:	942c      	str	r4, [sp, #176]	; 0xb0
  4145a2:	e886 00a0 	stmia.w	r6, {r5, r7}
  4145a6:	f77f af1e 	ble.w	4143e6 <_svfprintf_r+0xae6>
  4145aa:	980d      	ldr	r0, [sp, #52]	; 0x34
  4145ac:	990c      	ldr	r1, [sp, #48]	; 0x30
  4145ae:	aa2b      	add	r2, sp, #172	; 0xac
  4145b0:	f006 f97e 	bl	41a8b0 <__ssprint_r>
  4145b4:	2800      	cmp	r0, #0
  4145b6:	f47f aabb 	bne.w	413b30 <_svfprintf_r+0x230>
  4145ba:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  4145be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4145c0:	ae38      	add	r6, sp, #224	; 0xe0
  4145c2:	e711      	b.n	4143e8 <_svfprintf_r+0xae8>
  4145c4:	4694      	mov	ip, r2
  4145c6:	3301      	adds	r3, #1
  4145c8:	44a4      	add	ip, r4
  4145ca:	2b07      	cmp	r3, #7
  4145cc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4145d0:	932c      	str	r3, [sp, #176]	; 0xb0
  4145d2:	6035      	str	r5, [r6, #0]
  4145d4:	6074      	str	r4, [r6, #4]
  4145d6:	f77f ac04 	ble.w	413de2 <_svfprintf_r+0x4e2>
  4145da:	e713      	b.n	414404 <_svfprintf_r+0xb04>
  4145dc:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  4145e0:	4620      	mov	r0, r4
  4145e2:	4629      	mov	r1, r5
  4145e4:	220a      	movs	r2, #10
  4145e6:	2300      	movs	r3, #0
  4145e8:	f7fd ff00 	bl	4123ec <__aeabi_uldivmod>
  4145ec:	3230      	adds	r2, #48	; 0x30
  4145ee:	f88b 2000 	strb.w	r2, [fp]
  4145f2:	4620      	mov	r0, r4
  4145f4:	4629      	mov	r1, r5
  4145f6:	220a      	movs	r2, #10
  4145f8:	2300      	movs	r3, #0
  4145fa:	f7fd fef7 	bl	4123ec <__aeabi_uldivmod>
  4145fe:	4604      	mov	r4, r0
  414600:	460d      	mov	r5, r1
  414602:	ea54 0c05 	orrs.w	ip, r4, r5
  414606:	465f      	mov	r7, fp
  414608:	f10b 3bff 	add.w	fp, fp, #4294967295
  41460c:	d1e8      	bne.n	4145e0 <_svfprintf_r+0xce0>
  41460e:	9d08      	ldr	r5, [sp, #32]
  414610:	1bec      	subs	r4, r5, r7
  414612:	f7ff bb03 	b.w	413c1c <_svfprintf_r+0x31c>
  414616:	9d10      	ldr	r5, [sp, #64]	; 0x40
  414618:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  41461c:	682c      	ldr	r4, [r5, #0]
  41461e:	17e5      	asrs	r5, r4, #31
  414620:	4622      	mov	r2, r4
  414622:	462b      	mov	r3, r5
  414624:	f10c 0c04 	add.w	ip, ip, #4
  414628:	2a00      	cmp	r2, #0
  41462a:	f173 0000 	sbcs.w	r0, r3, #0
  41462e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  414632:	f6bf ac75 	bge.w	413f20 <_svfprintf_r+0x620>
  414636:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  41463a:	4264      	negs	r4, r4
  41463c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  414640:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  414644:	2301      	movs	r3, #1
  414646:	f7ff bac9 	b.w	413bdc <_svfprintf_r+0x2dc>
  41464a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41464c:	682c      	ldr	r4, [r5, #0]
  41464e:	3504      	adds	r5, #4
  414650:	9510      	str	r5, [sp, #64]	; 0x40
  414652:	2500      	movs	r5, #0
  414654:	f7ff babe 	b.w	413bd4 <_svfprintf_r+0x2d4>
  414658:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41465a:	682c      	ldr	r4, [r5, #0]
  41465c:	3504      	adds	r5, #4
  41465e:	9510      	str	r5, [sp, #64]	; 0x40
  414660:	2301      	movs	r3, #1
  414662:	2500      	movs	r5, #0
  414664:	f7ff bab6 	b.w	413bd4 <_svfprintf_r+0x2d4>
  414668:	980d      	ldr	r0, [sp, #52]	; 0x34
  41466a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41466c:	aa2b      	add	r2, sp, #172	; 0xac
  41466e:	f006 f91f 	bl	41a8b0 <__ssprint_r>
  414672:	2800      	cmp	r0, #0
  414674:	f47f aa5c 	bne.w	413b30 <_svfprintf_r+0x230>
  414678:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  41467c:	ae38      	add	r6, sp, #224	; 0xe0
  41467e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  414680:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414682:	442f      	add	r7, r5
  414684:	9d11      	ldr	r5, [sp, #68]	; 0x44
  414686:	42ac      	cmp	r4, r5
  414688:	db42      	blt.n	414710 <_svfprintf_r+0xe10>
  41468a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41468c:	07e9      	lsls	r1, r5, #31
  41468e:	d43f      	bmi.n	414710 <_svfprintf_r+0xe10>
  414690:	9811      	ldr	r0, [sp, #68]	; 0x44
  414692:	ebc7 050a 	rsb	r5, r7, sl
  414696:	1b04      	subs	r4, r0, r4
  414698:	42ac      	cmp	r4, r5
  41469a:	bfb8      	it	lt
  41469c:	4625      	movlt	r5, r4
  41469e:	2d00      	cmp	r5, #0
  4146a0:	dd0b      	ble.n	4146ba <_svfprintf_r+0xdba>
  4146a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4146a4:	6037      	str	r7, [r6, #0]
  4146a6:	3301      	adds	r3, #1
  4146a8:	44ac      	add	ip, r5
  4146aa:	2b07      	cmp	r3, #7
  4146ac:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4146b0:	6075      	str	r5, [r6, #4]
  4146b2:	932c      	str	r3, [sp, #176]	; 0xb0
  4146b4:	f300 8252 	bgt.w	414b5c <_svfprintf_r+0x125c>
  4146b8:	3608      	adds	r6, #8
  4146ba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  4146be:	1b64      	subs	r4, r4, r5
  4146c0:	2c00      	cmp	r4, #0
  4146c2:	f77f ab8f 	ble.w	413de4 <_svfprintf_r+0x4e4>
  4146c6:	2c10      	cmp	r4, #16
  4146c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4146ca:	4d53      	ldr	r5, [pc, #332]	; (414818 <_svfprintf_r+0xf18>)
  4146cc:	f77f af7b 	ble.w	4145c6 <_svfprintf_r+0xcc6>
  4146d0:	2710      	movs	r7, #16
  4146d2:	4662      	mov	r2, ip
  4146d4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4146d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4146dc:	e004      	b.n	4146e8 <_svfprintf_r+0xde8>
  4146de:	3608      	adds	r6, #8
  4146e0:	3c10      	subs	r4, #16
  4146e2:	2c10      	cmp	r4, #16
  4146e4:	f77f af6e 	ble.w	4145c4 <_svfprintf_r+0xcc4>
  4146e8:	3301      	adds	r3, #1
  4146ea:	3210      	adds	r2, #16
  4146ec:	2b07      	cmp	r3, #7
  4146ee:	922d      	str	r2, [sp, #180]	; 0xb4
  4146f0:	932c      	str	r3, [sp, #176]	; 0xb0
  4146f2:	e886 00a0 	stmia.w	r6, {r5, r7}
  4146f6:	ddf2      	ble.n	4146de <_svfprintf_r+0xdde>
  4146f8:	4640      	mov	r0, r8
  4146fa:	4651      	mov	r1, sl
  4146fc:	aa2b      	add	r2, sp, #172	; 0xac
  4146fe:	f006 f8d7 	bl	41a8b0 <__ssprint_r>
  414702:	2800      	cmp	r0, #0
  414704:	f47f aa14 	bne.w	413b30 <_svfprintf_r+0x230>
  414708:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  41470a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41470c:	ae38      	add	r6, sp, #224	; 0xe0
  41470e:	e7e7      	b.n	4146e0 <_svfprintf_r+0xde0>
  414710:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  414712:	9d15      	ldr	r5, [sp, #84]	; 0x54
  414714:	6035      	str	r5, [r6, #0]
  414716:	9d18      	ldr	r5, [sp, #96]	; 0x60
  414718:	6075      	str	r5, [r6, #4]
  41471a:	3301      	adds	r3, #1
  41471c:	44ac      	add	ip, r5
  41471e:	2b07      	cmp	r3, #7
  414720:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  414724:	932c      	str	r3, [sp, #176]	; 0xb0
  414726:	f300 81fb 	bgt.w	414b20 <_svfprintf_r+0x1220>
  41472a:	3608      	adds	r6, #8
  41472c:	e7b0      	b.n	414690 <_svfprintf_r+0xd90>
  41472e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  414730:	07ea      	lsls	r2, r5, #31
  414732:	f53f ae27 	bmi.w	414384 <_svfprintf_r+0xa84>
  414736:	3401      	adds	r4, #1
  414738:	f10c 0801 	add.w	r8, ip, #1
  41473c:	2301      	movs	r3, #1
  41473e:	2c07      	cmp	r4, #7
  414740:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  414744:	942c      	str	r4, [sp, #176]	; 0xb0
  414746:	6037      	str	r7, [r6, #0]
  414748:	6073      	str	r3, [r6, #4]
  41474a:	f77f ae4c 	ble.w	4143e6 <_svfprintf_r+0xae6>
  41474e:	e72c      	b.n	4145aa <_svfprintf_r+0xcaa>
  414750:	980d      	ldr	r0, [sp, #52]	; 0x34
  414752:	990c      	ldr	r1, [sp, #48]	; 0x30
  414754:	aa2b      	add	r2, sp, #172	; 0xac
  414756:	f006 f8ab 	bl	41a8b0 <__ssprint_r>
  41475a:	2800      	cmp	r0, #0
  41475c:	f47f a9e8 	bne.w	413b30 <_svfprintf_r+0x230>
  414760:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  414762:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  414764:	ae38      	add	r6, sp, #224	; 0xe0
  414766:	e619      	b.n	41439c <_svfprintf_r+0xa9c>
  414768:	980d      	ldr	r0, [sp, #52]	; 0x34
  41476a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41476c:	aa2b      	add	r2, sp, #172	; 0xac
  41476e:	f006 f89f 	bl	41a8b0 <__ssprint_r>
  414772:	2800      	cmp	r0, #0
  414774:	f47f a9dc 	bne.w	413b30 <_svfprintf_r+0x230>
  414778:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  41477c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  41477e:	ae38      	add	r6, sp, #224	; 0xe0
  414780:	e61b      	b.n	4143ba <_svfprintf_r+0xaba>
  414782:	980d      	ldr	r0, [sp, #52]	; 0x34
  414784:	990c      	ldr	r1, [sp, #48]	; 0x30
  414786:	aa2b      	add	r2, sp, #172	; 0xac
  414788:	f006 f892 	bl	41a8b0 <__ssprint_r>
  41478c:	2800      	cmp	r0, #0
  41478e:	f47f a9cf 	bne.w	413b30 <_svfprintf_r+0x230>
  414792:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414796:	ae38      	add	r6, sp, #224	; 0xe0
  414798:	f7ff bad2 	b.w	413d40 <_svfprintf_r+0x440>
  41479c:	f004 fdb2 	bl	419304 <__fpclassifyd>
  4147a0:	2800      	cmp	r0, #0
  4147a2:	f040 80c2 	bne.w	41492a <_svfprintf_r+0x102a>
  4147a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4147a8:	4f1c      	ldr	r7, [pc, #112]	; (41481c <_svfprintf_r+0xf1c>)
  4147aa:	4b1d      	ldr	r3, [pc, #116]	; (414820 <_svfprintf_r+0xf20>)
  4147ac:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4147b0:	900a      	str	r0, [sp, #40]	; 0x28
  4147b2:	f04f 0c03 	mov.w	ip, #3
  4147b6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  4147ba:	9409      	str	r4, [sp, #36]	; 0x24
  4147bc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4147c0:	9014      	str	r0, [sp, #80]	; 0x50
  4147c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4147c6:	bfd8      	it	le
  4147c8:	461f      	movle	r7, r3
  4147ca:	4664      	mov	r4, ip
  4147cc:	f7ff ba2f 	b.w	413c2e <_svfprintf_r+0x32e>
  4147d0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4147d4:	3308      	adds	r3, #8
  4147d6:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4147da:	9310      	str	r3, [sp, #64]	; 0x40
  4147dc:	e476      	b.n	4140cc <_svfprintf_r+0x7cc>
  4147de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4147e2:	f01c 0f10 	tst.w	ip, #16
  4147e6:	f000 8155 	beq.w	414a94 <_svfprintf_r+0x1194>
  4147ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4147ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4147ee:	6823      	ldr	r3, [r4, #0]
  4147f0:	3404      	adds	r4, #4
  4147f2:	9410      	str	r4, [sp, #64]	; 0x40
  4147f4:	601d      	str	r5, [r3, #0]
  4147f6:	f7ff b8a9 	b.w	41394c <_svfprintf_r+0x4c>
  4147fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4147fc:	0664      	lsls	r4, r4, #25
  4147fe:	f140 8142 	bpl.w	414a86 <_svfprintf_r+0x1186>
  414802:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  414806:	f8bc 4000 	ldrh.w	r4, [ip]
  41480a:	f10c 0c04 	add.w	ip, ip, #4
  41480e:	2500      	movs	r5, #0
  414810:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  414814:	f7ff b9ca 	b.w	413bac <_svfprintf_r+0x2ac>
  414818:	0041dd94 	.word	0x0041dd94
  41481c:	0041ddb0 	.word	0x0041ddb0
  414820:	0041ddac 	.word	0x0041ddac
  414824:	462c      	mov	r4, r5
  414826:	463d      	mov	r5, r7
  414828:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41482a:	4694      	mov	ip, r2
  41482c:	3301      	adds	r3, #1
  41482e:	44a4      	add	ip, r4
  414830:	2b07      	cmp	r3, #7
  414832:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  414836:	932c      	str	r3, [sp, #176]	; 0xb0
  414838:	6035      	str	r5, [r6, #0]
  41483a:	6074      	str	r4, [r6, #4]
  41483c:	f73f af14 	bgt.w	414668 <_svfprintf_r+0xd68>
  414840:	3608      	adds	r6, #8
  414842:	e71c      	b.n	41467e <_svfprintf_r+0xd7e>
  414844:	980d      	ldr	r0, [sp, #52]	; 0x34
  414846:	990c      	ldr	r1, [sp, #48]	; 0x30
  414848:	aa2b      	add	r2, sp, #172	; 0xac
  41484a:	f006 f831 	bl	41a8b0 <__ssprint_r>
  41484e:	2800      	cmp	r0, #0
  414850:	f47f a96e 	bne.w	413b30 <_svfprintf_r+0x230>
  414854:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414858:	ae38      	add	r6, sp, #224	; 0xe0
  41485a:	e4fd      	b.n	414258 <_svfprintf_r+0x958>
  41485c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  41485e:	49b7      	ldr	r1, [pc, #732]	; (414b3c <_svfprintf_r+0x123c>)
  414860:	6031      	str	r1, [r6, #0]
  414862:	3201      	adds	r2, #1
  414864:	f10c 0c01 	add.w	ip, ip, #1
  414868:	2101      	movs	r1, #1
  41486a:	2a07      	cmp	r2, #7
  41486c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  414870:	922c      	str	r2, [sp, #176]	; 0xb0
  414872:	6071      	str	r1, [r6, #4]
  414874:	f300 80f7 	bgt.w	414a66 <_svfprintf_r+0x1166>
  414878:	3608      	adds	r6, #8
  41487a:	461c      	mov	r4, r3
  41487c:	b92c      	cbnz	r4, 41488a <_svfprintf_r+0xf8a>
  41487e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  414880:	b91d      	cbnz	r5, 41488a <_svfprintf_r+0xf8a>
  414882:	9d09      	ldr	r5, [sp, #36]	; 0x24
  414884:	07e8      	lsls	r0, r5, #31
  414886:	f57f aaad 	bpl.w	413de4 <_svfprintf_r+0x4e4>
  41488a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41488c:	9918      	ldr	r1, [sp, #96]	; 0x60
  41488e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  414890:	6035      	str	r5, [r6, #0]
  414892:	3301      	adds	r3, #1
  414894:	4461      	add	r1, ip
  414896:	9d18      	ldr	r5, [sp, #96]	; 0x60
  414898:	912d      	str	r1, [sp, #180]	; 0xb4
  41489a:	2b07      	cmp	r3, #7
  41489c:	6075      	str	r5, [r6, #4]
  41489e:	932c      	str	r3, [sp, #176]	; 0xb0
  4148a0:	f300 81de 	bgt.w	414c60 <_svfprintf_r+0x1360>
  4148a4:	f106 0208 	add.w	r2, r6, #8
  4148a8:	4264      	negs	r4, r4
  4148aa:	2c00      	cmp	r4, #0
  4148ac:	f340 810b 	ble.w	414ac6 <_svfprintf_r+0x11c6>
  4148b0:	2c10      	cmp	r4, #16
  4148b2:	4da3      	ldr	r5, [pc, #652]	; (414b40 <_svfprintf_r+0x1240>)
  4148b4:	f340 8148 	ble.w	414b48 <_svfprintf_r+0x1248>
  4148b8:	46a3      	mov	fp, r4
  4148ba:	2610      	movs	r6, #16
  4148bc:	460c      	mov	r4, r1
  4148be:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4148c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4148c6:	e006      	b.n	4148d6 <_svfprintf_r+0xfd6>
  4148c8:	3208      	adds	r2, #8
  4148ca:	f1ab 0b10 	sub.w	fp, fp, #16
  4148ce:	f1bb 0f10 	cmp.w	fp, #16
  4148d2:	f340 8137 	ble.w	414b44 <_svfprintf_r+0x1244>
  4148d6:	3301      	adds	r3, #1
  4148d8:	3410      	adds	r4, #16
  4148da:	2b07      	cmp	r3, #7
  4148dc:	942d      	str	r4, [sp, #180]	; 0xb4
  4148de:	932c      	str	r3, [sp, #176]	; 0xb0
  4148e0:	e882 0060 	stmia.w	r2, {r5, r6}
  4148e4:	ddf0      	ble.n	4148c8 <_svfprintf_r+0xfc8>
  4148e6:	4640      	mov	r0, r8
  4148e8:	4651      	mov	r1, sl
  4148ea:	aa2b      	add	r2, sp, #172	; 0xac
  4148ec:	f005 ffe0 	bl	41a8b0 <__ssprint_r>
  4148f0:	2800      	cmp	r0, #0
  4148f2:	f47f a91d 	bne.w	413b30 <_svfprintf_r+0x230>
  4148f6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  4148f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4148fa:	aa38      	add	r2, sp, #224	; 0xe0
  4148fc:	e7e5      	b.n	4148ca <_svfprintf_r+0xfca>
  4148fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
  414900:	f893 8001 	ldrb.w	r8, [r3, #1]
  414904:	f044 0420 	orr.w	r4, r4, #32
  414908:	f109 0901 	add.w	r9, r9, #1
  41490c:	9409      	str	r4, [sp, #36]	; 0x24
  41490e:	f7ff b853 	b.w	4139b8 <_svfprintf_r+0xb8>
  414912:	980d      	ldr	r0, [sp, #52]	; 0x34
  414914:	990c      	ldr	r1, [sp, #48]	; 0x30
  414916:	aa2b      	add	r2, sp, #172	; 0xac
  414918:	f005 ffca 	bl	41a8b0 <__ssprint_r>
  41491c:	2800      	cmp	r0, #0
  41491e:	f47f a907 	bne.w	413b30 <_svfprintf_r+0x230>
  414922:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414926:	ae38      	add	r6, sp, #224	; 0xe0
  414928:	e4ac      	b.n	414284 <_svfprintf_r+0x984>
  41492a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  41492c:	3501      	adds	r5, #1
  41492e:	f028 0a20 	bic.w	sl, r8, #32
  414932:	f000 80a5 	beq.w	414a80 <_svfprintf_r+0x1180>
  414936:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  41493a:	d104      	bne.n	414946 <_svfprintf_r+0x1046>
  41493c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  41493e:	2d00      	cmp	r5, #0
  414940:	bf08      	it	eq
  414942:	2501      	moveq	r5, #1
  414944:	950a      	str	r5, [sp, #40]	; 0x28
  414946:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  41494a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  41494e:	2b00      	cmp	r3, #0
  414950:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  414954:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  414958:	f2c0 819c 	blt.w	414c94 <_svfprintf_r+0x1394>
  41495c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  414960:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  414964:	f04f 0b00 	mov.w	fp, #0
  414968:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  41496c:	f000 819b 	beq.w	414ca6 <_svfprintf_r+0x13a6>
  414970:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  414974:	f000 81a9 	beq.w	414cca <_svfprintf_r+0x13ca>
  414978:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  41497c:	bf0a      	itet	eq
  41497e:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  414980:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  414982:	1c65      	addeq	r5, r4, #1
  414984:	2002      	movs	r0, #2
  414986:	a925      	add	r1, sp, #148	; 0x94
  414988:	aa26      	add	r2, sp, #152	; 0x98
  41498a:	ab29      	add	r3, sp, #164	; 0xa4
  41498c:	e88d 0021 	stmia.w	sp, {r0, r5}
  414990:	9203      	str	r2, [sp, #12]
  414992:	9304      	str	r3, [sp, #16]
  414994:	9102      	str	r1, [sp, #8]
  414996:	980d      	ldr	r0, [sp, #52]	; 0x34
  414998:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  41499c:	f002 f93c 	bl	416c18 <_dtoa_r>
  4149a0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4149a4:	4607      	mov	r7, r0
  4149a6:	d002      	beq.n	4149ae <_svfprintf_r+0x10ae>
  4149a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4149ac:	d105      	bne.n	4149ba <_svfprintf_r+0x10ba>
  4149ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4149b2:	f01c 0f01 	tst.w	ip, #1
  4149b6:	f000 819c 	beq.w	414cf2 <_svfprintf_r+0x13f2>
  4149ba:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4149be:	eb07 0405 	add.w	r4, r7, r5
  4149c2:	f000 811c 	beq.w	414bfe <_svfprintf_r+0x12fe>
  4149c6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4149ca:	2200      	movs	r2, #0
  4149cc:	2300      	movs	r3, #0
  4149ce:	f007 fa17 	bl	41be00 <__aeabi_dcmpeq>
  4149d2:	2800      	cmp	r0, #0
  4149d4:	f040 8105 	bne.w	414be2 <_svfprintf_r+0x12e2>
  4149d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4149da:	429c      	cmp	r4, r3
  4149dc:	d906      	bls.n	4149ec <_svfprintf_r+0x10ec>
  4149de:	2130      	movs	r1, #48	; 0x30
  4149e0:	1c5a      	adds	r2, r3, #1
  4149e2:	9229      	str	r2, [sp, #164]	; 0xa4
  4149e4:	7019      	strb	r1, [r3, #0]
  4149e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4149e8:	429c      	cmp	r4, r3
  4149ea:	d8f9      	bhi.n	4149e0 <_svfprintf_r+0x10e0>
  4149ec:	1bdb      	subs	r3, r3, r7
  4149ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4149f2:	9311      	str	r3, [sp, #68]	; 0x44
  4149f4:	f000 80ed 	beq.w	414bd2 <_svfprintf_r+0x12d2>
  4149f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4149fc:	f340 81f2 	ble.w	414de4 <_svfprintf_r+0x14e4>
  414a00:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  414a04:	f000 8168 	beq.w	414cd8 <_svfprintf_r+0x13d8>
  414a08:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414a0a:	9414      	str	r4, [sp, #80]	; 0x50
  414a0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
  414a0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  414a10:	42ac      	cmp	r4, r5
  414a12:	f300 8132 	bgt.w	414c7a <_svfprintf_r+0x137a>
  414a16:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  414a1a:	f01c 0f01 	tst.w	ip, #1
  414a1e:	f040 81ad 	bne.w	414d7c <_svfprintf_r+0x147c>
  414a22:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  414a26:	462c      	mov	r4, r5
  414a28:	f04f 0867 	mov.w	r8, #103	; 0x67
  414a2c:	f1bb 0f00 	cmp.w	fp, #0
  414a30:	f040 80b2 	bne.w	414b98 <_svfprintf_r+0x1298>
  414a34:	9d12      	ldr	r5, [sp, #72]	; 0x48
  414a36:	930b      	str	r3, [sp, #44]	; 0x2c
  414a38:	9509      	str	r5, [sp, #36]	; 0x24
  414a3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  414a3e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  414a42:	f7ff b8f4 	b.w	413c2e <_svfprintf_r+0x32e>
  414a46:	980d      	ldr	r0, [sp, #52]	; 0x34
  414a48:	2140      	movs	r1, #64	; 0x40
  414a4a:	f7fd fff1 	bl	412a30 <_malloc_r>
  414a4e:	6020      	str	r0, [r4, #0]
  414a50:	6120      	str	r0, [r4, #16]
  414a52:	2800      	cmp	r0, #0
  414a54:	f000 81bf 	beq.w	414dd6 <_svfprintf_r+0x14d6>
  414a58:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  414a5c:	2340      	movs	r3, #64	; 0x40
  414a5e:	f8cc 3014 	str.w	r3, [ip, #20]
  414a62:	f7fe bf63 	b.w	41392c <_svfprintf_r+0x2c>
  414a66:	980d      	ldr	r0, [sp, #52]	; 0x34
  414a68:	990c      	ldr	r1, [sp, #48]	; 0x30
  414a6a:	aa2b      	add	r2, sp, #172	; 0xac
  414a6c:	f005 ff20 	bl	41a8b0 <__ssprint_r>
  414a70:	2800      	cmp	r0, #0
  414a72:	f47f a85d 	bne.w	413b30 <_svfprintf_r+0x230>
  414a76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414a78:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414a7c:	ae38      	add	r6, sp, #224	; 0xe0
  414a7e:	e6fd      	b.n	41487c <_svfprintf_r+0xf7c>
  414a80:	2406      	movs	r4, #6
  414a82:	940a      	str	r4, [sp, #40]	; 0x28
  414a84:	e75f      	b.n	414946 <_svfprintf_r+0x1046>
  414a86:	9d10      	ldr	r5, [sp, #64]	; 0x40
  414a88:	682c      	ldr	r4, [r5, #0]
  414a8a:	3504      	adds	r5, #4
  414a8c:	9510      	str	r5, [sp, #64]	; 0x40
  414a8e:	2500      	movs	r5, #0
  414a90:	f7ff b88c 	b.w	413bac <_svfprintf_r+0x2ac>
  414a94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  414a98:	f01c 0f40 	tst.w	ip, #64	; 0x40
  414a9c:	f000 8087 	beq.w	414bae <_svfprintf_r+0x12ae>
  414aa0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  414aa2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  414aa4:	6823      	ldr	r3, [r4, #0]
  414aa6:	3404      	adds	r4, #4
  414aa8:	9410      	str	r4, [sp, #64]	; 0x40
  414aaa:	801d      	strh	r5, [r3, #0]
  414aac:	f7fe bf4e 	b.w	41394c <_svfprintf_r+0x4c>
  414ab0:	980d      	ldr	r0, [sp, #52]	; 0x34
  414ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
  414ab4:	aa2b      	add	r2, sp, #172	; 0xac
  414ab6:	f005 fefb 	bl	41a8b0 <__ssprint_r>
  414aba:	2800      	cmp	r0, #0
  414abc:	f47f a838 	bne.w	413b30 <_svfprintf_r+0x230>
  414ac0:	992d      	ldr	r1, [sp, #180]	; 0xb4
  414ac2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  414ac4:	aa38      	add	r2, sp, #224	; 0xe0
  414ac6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  414aca:	9c11      	ldr	r4, [sp, #68]	; 0x44
  414acc:	6017      	str	r7, [r2, #0]
  414ace:	3301      	adds	r3, #1
  414ad0:	448c      	add	ip, r1
  414ad2:	2b07      	cmp	r3, #7
  414ad4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  414ad8:	932c      	str	r3, [sp, #176]	; 0xb0
  414ada:	6054      	str	r4, [r2, #4]
  414adc:	f73f ac92 	bgt.w	414404 <_svfprintf_r+0xb04>
  414ae0:	f102 0608 	add.w	r6, r2, #8
  414ae4:	f7ff b97e 	b.w	413de4 <_svfprintf_r+0x4e4>
  414ae8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  414aec:	f7fe fe1a 	bl	413724 <strlen>
  414af0:	9510      	str	r5, [sp, #64]	; 0x40
  414af2:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  414af6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  414af8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  414afc:	4604      	mov	r4, r0
  414afe:	9514      	str	r5, [sp, #80]	; 0x50
  414b00:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  414b04:	f7ff b893 	b.w	413c2e <_svfprintf_r+0x32e>
  414b08:	980d      	ldr	r0, [sp, #52]	; 0x34
  414b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
  414b0c:	aa2b      	add	r2, sp, #172	; 0xac
  414b0e:	f005 fecf 	bl	41a8b0 <__ssprint_r>
  414b12:	2800      	cmp	r0, #0
  414b14:	f47f a80c 	bne.w	413b30 <_svfprintf_r+0x230>
  414b18:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414b1c:	ae38      	add	r6, sp, #224	; 0xe0
  414b1e:	e4cc      	b.n	4144ba <_svfprintf_r+0xbba>
  414b20:	980d      	ldr	r0, [sp, #52]	; 0x34
  414b22:	990c      	ldr	r1, [sp, #48]	; 0x30
  414b24:	aa2b      	add	r2, sp, #172	; 0xac
  414b26:	f005 fec3 	bl	41a8b0 <__ssprint_r>
  414b2a:	2800      	cmp	r0, #0
  414b2c:	f47f a800 	bne.w	413b30 <_svfprintf_r+0x230>
  414b30:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414b32:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414b36:	ae38      	add	r6, sp, #224	; 0xe0
  414b38:	e5aa      	b.n	414690 <_svfprintf_r+0xd90>
  414b3a:	bf00      	nop
  414b3c:	0041dde4 	.word	0x0041dde4
  414b40:	0041dd94 	.word	0x0041dd94
  414b44:	4621      	mov	r1, r4
  414b46:	465c      	mov	r4, fp
  414b48:	3301      	adds	r3, #1
  414b4a:	4421      	add	r1, r4
  414b4c:	2b07      	cmp	r3, #7
  414b4e:	912d      	str	r1, [sp, #180]	; 0xb4
  414b50:	932c      	str	r3, [sp, #176]	; 0xb0
  414b52:	6015      	str	r5, [r2, #0]
  414b54:	6054      	str	r4, [r2, #4]
  414b56:	dcab      	bgt.n	414ab0 <_svfprintf_r+0x11b0>
  414b58:	3208      	adds	r2, #8
  414b5a:	e7b4      	b.n	414ac6 <_svfprintf_r+0x11c6>
  414b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
  414b5e:	990c      	ldr	r1, [sp, #48]	; 0x30
  414b60:	aa2b      	add	r2, sp, #172	; 0xac
  414b62:	f005 fea5 	bl	41a8b0 <__ssprint_r>
  414b66:	2800      	cmp	r0, #0
  414b68:	f47e afe2 	bne.w	413b30 <_svfprintf_r+0x230>
  414b6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414b6e:	9911      	ldr	r1, [sp, #68]	; 0x44
  414b70:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  414b74:	1b0c      	subs	r4, r1, r4
  414b76:	ae38      	add	r6, sp, #224	; 0xe0
  414b78:	e59f      	b.n	4146ba <_svfprintf_r+0xdba>
  414b7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  414b7c:	9714      	str	r7, [sp, #80]	; 0x50
  414b7e:	2c06      	cmp	r4, #6
  414b80:	bf28      	it	cs
  414b82:	2406      	movcs	r4, #6
  414b84:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  414b88:	46ba      	mov	sl, r7
  414b8a:	970a      	str	r7, [sp, #40]	; 0x28
  414b8c:	9510      	str	r5, [sp, #64]	; 0x40
  414b8e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  414b92:	4f97      	ldr	r7, [pc, #604]	; (414df0 <_svfprintf_r+0x14f0>)
  414b94:	f7ff b84b 	b.w	413c2e <_svfprintf_r+0x32e>
  414b98:	9d12      	ldr	r5, [sp, #72]	; 0x48
  414b9a:	9509      	str	r5, [sp, #36]	; 0x24
  414b9c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  414ba0:	2500      	movs	r5, #0
  414ba2:	930b      	str	r3, [sp, #44]	; 0x2c
  414ba4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  414ba8:	950a      	str	r5, [sp, #40]	; 0x28
  414baa:	f7ff b843 	b.w	413c34 <_svfprintf_r+0x334>
  414bae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  414bb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  414bb4:	f8dc 3000 	ldr.w	r3, [ip]
  414bb8:	f10c 0c04 	add.w	ip, ip, #4
  414bbc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  414bc0:	601c      	str	r4, [r3, #0]
  414bc2:	f7fe bec3 	b.w	41394c <_svfprintf_r+0x4c>
  414bc6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  414bca:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  414bce:	f7ff ba8f 	b.w	4140f0 <_svfprintf_r+0x7f0>
  414bd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  414bd4:	1cdc      	adds	r4, r3, #3
  414bd6:	db19      	blt.n	414c0c <_svfprintf_r+0x130c>
  414bd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  414bda:	429c      	cmp	r4, r3
  414bdc:	db16      	blt.n	414c0c <_svfprintf_r+0x130c>
  414bde:	9314      	str	r3, [sp, #80]	; 0x50
  414be0:	e714      	b.n	414a0c <_svfprintf_r+0x110c>
  414be2:	4623      	mov	r3, r4
  414be4:	e702      	b.n	4149ec <_svfprintf_r+0x10ec>
  414be6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  414bea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  414bee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  414bf0:	9510      	str	r5, [sp, #64]	; 0x40
  414bf2:	900a      	str	r0, [sp, #40]	; 0x28
  414bf4:	9014      	str	r0, [sp, #80]	; 0x50
  414bf6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  414bfa:	f7ff b818 	b.w	413c2e <_svfprintf_r+0x32e>
  414bfe:	783b      	ldrb	r3, [r7, #0]
  414c00:	2b30      	cmp	r3, #48	; 0x30
  414c02:	f000 80ad 	beq.w	414d60 <_svfprintf_r+0x1460>
  414c06:	9d25      	ldr	r5, [sp, #148]	; 0x94
  414c08:	442c      	add	r4, r5
  414c0a:	e6dc      	b.n	4149c6 <_svfprintf_r+0x10c6>
  414c0c:	f1a8 0802 	sub.w	r8, r8, #2
  414c10:	3b01      	subs	r3, #1
  414c12:	2b00      	cmp	r3, #0
  414c14:	9325      	str	r3, [sp, #148]	; 0x94
  414c16:	bfba      	itte	lt
  414c18:	425b      	neglt	r3, r3
  414c1a:	222d      	movlt	r2, #45	; 0x2d
  414c1c:	222b      	movge	r2, #43	; 0x2b
  414c1e:	2b09      	cmp	r3, #9
  414c20:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  414c24:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  414c28:	dc65      	bgt.n	414cf6 <_svfprintf_r+0x13f6>
  414c2a:	3330      	adds	r3, #48	; 0x30
  414c2c:	2230      	movs	r2, #48	; 0x30
  414c2e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  414c32:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  414c36:	ab28      	add	r3, sp, #160	; 0xa0
  414c38:	9d11      	ldr	r5, [sp, #68]	; 0x44
  414c3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  414c3c:	aa27      	add	r2, sp, #156	; 0x9c
  414c3e:	1a9a      	subs	r2, r3, r2
  414c40:	2d01      	cmp	r5, #1
  414c42:	9219      	str	r2, [sp, #100]	; 0x64
  414c44:	4414      	add	r4, r2
  414c46:	f340 80b7 	ble.w	414db8 <_svfprintf_r+0x14b8>
  414c4a:	3401      	adds	r4, #1
  414c4c:	2500      	movs	r5, #0
  414c4e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414c52:	9514      	str	r5, [sp, #80]	; 0x50
  414c54:	e6ea      	b.n	414a2c <_svfprintf_r+0x112c>
  414c56:	2400      	movs	r4, #0
  414c58:	4681      	mov	r9, r0
  414c5a:	940a      	str	r4, [sp, #40]	; 0x28
  414c5c:	f7fe beae 	b.w	4139bc <_svfprintf_r+0xbc>
  414c60:	980d      	ldr	r0, [sp, #52]	; 0x34
  414c62:	990c      	ldr	r1, [sp, #48]	; 0x30
  414c64:	aa2b      	add	r2, sp, #172	; 0xac
  414c66:	f005 fe23 	bl	41a8b0 <__ssprint_r>
  414c6a:	2800      	cmp	r0, #0
  414c6c:	f47e af60 	bne.w	413b30 <_svfprintf_r+0x230>
  414c70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  414c72:	992d      	ldr	r1, [sp, #180]	; 0xb4
  414c74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  414c76:	aa38      	add	r2, sp, #224	; 0xe0
  414c78:	e616      	b.n	4148a8 <_svfprintf_r+0xfa8>
  414c7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
  414c7c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  414c7e:	2c00      	cmp	r4, #0
  414c80:	bfd4      	ite	le
  414c82:	f1c4 0402 	rsble	r4, r4, #2
  414c86:	2401      	movgt	r4, #1
  414c88:	442c      	add	r4, r5
  414c8a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414c8e:	f04f 0867 	mov.w	r8, #103	; 0x67
  414c92:	e6cb      	b.n	414a2c <_svfprintf_r+0x112c>
  414c94:	9917      	ldr	r1, [sp, #92]	; 0x5c
  414c96:	9816      	ldr	r0, [sp, #88]	; 0x58
  414c98:	9020      	str	r0, [sp, #128]	; 0x80
  414c9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  414c9e:	9121      	str	r1, [sp, #132]	; 0x84
  414ca0:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  414ca4:	e660      	b.n	414968 <_svfprintf_r+0x1068>
  414ca6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  414ca8:	9501      	str	r5, [sp, #4]
  414caa:	2003      	movs	r0, #3
  414cac:	a925      	add	r1, sp, #148	; 0x94
  414cae:	aa26      	add	r2, sp, #152	; 0x98
  414cb0:	ab29      	add	r3, sp, #164	; 0xa4
  414cb2:	9000      	str	r0, [sp, #0]
  414cb4:	9203      	str	r2, [sp, #12]
  414cb6:	9304      	str	r3, [sp, #16]
  414cb8:	9102      	str	r1, [sp, #8]
  414cba:	980d      	ldr	r0, [sp, #52]	; 0x34
  414cbc:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  414cc0:	f001 ffaa 	bl	416c18 <_dtoa_r>
  414cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  414cc6:	4607      	mov	r7, r0
  414cc8:	e677      	b.n	4149ba <_svfprintf_r+0x10ba>
  414cca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  414ccc:	9401      	str	r4, [sp, #4]
  414cce:	2003      	movs	r0, #3
  414cd0:	a925      	add	r1, sp, #148	; 0x94
  414cd2:	aa26      	add	r2, sp, #152	; 0x98
  414cd4:	ab29      	add	r3, sp, #164	; 0xa4
  414cd6:	e7ec      	b.n	414cb2 <_svfprintf_r+0x13b2>
  414cd8:	9d25      	ldr	r5, [sp, #148]	; 0x94
  414cda:	9514      	str	r5, [sp, #80]	; 0x50
  414cdc:	2d00      	cmp	r5, #0
  414cde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  414ce0:	dd63      	ble.n	414daa <_svfprintf_r+0x14aa>
  414ce2:	bbb4      	cbnz	r4, 414d52 <_svfprintf_r+0x1452>
  414ce4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  414ce6:	07e8      	lsls	r0, r5, #31
  414ce8:	d433      	bmi.n	414d52 <_svfprintf_r+0x1452>
  414cea:	9c14      	ldr	r4, [sp, #80]	; 0x50
  414cec:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414cf0:	e69c      	b.n	414a2c <_svfprintf_r+0x112c>
  414cf2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  414cf4:	e67a      	b.n	4149ec <_svfprintf_r+0x10ec>
  414cf6:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  414cfa:	4d3e      	ldr	r5, [pc, #248]	; (414df4 <_svfprintf_r+0x14f4>)
  414cfc:	17da      	asrs	r2, r3, #31
  414cfe:	fb85 5103 	smull	r5, r1, r5, r3
  414d02:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  414d06:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  414d0a:	4602      	mov	r2, r0
  414d0c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  414d10:	f103 0030 	add.w	r0, r3, #48	; 0x30
  414d14:	2909      	cmp	r1, #9
  414d16:	7010      	strb	r0, [r2, #0]
  414d18:	460b      	mov	r3, r1
  414d1a:	f102 30ff 	add.w	r0, r2, #4294967295
  414d1e:	dcec      	bgt.n	414cfa <_svfprintf_r+0x13fa>
  414d20:	f101 0330 	add.w	r3, r1, #48	; 0x30
  414d24:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  414d28:	b2d9      	uxtb	r1, r3
  414d2a:	4284      	cmp	r4, r0
  414d2c:	f802 1c01 	strb.w	r1, [r2, #-1]
  414d30:	d95a      	bls.n	414de8 <_svfprintf_r+0x14e8>
  414d32:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  414d36:	4613      	mov	r3, r2
  414d38:	e001      	b.n	414d3e <_svfprintf_r+0x143e>
  414d3a:	f813 1b01 	ldrb.w	r1, [r3], #1
  414d3e:	42a3      	cmp	r3, r4
  414d40:	f800 1f01 	strb.w	r1, [r0, #1]!
  414d44:	d1f9      	bne.n	414d3a <_svfprintf_r+0x143a>
  414d46:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  414d4a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  414d4e:	3bf6      	subs	r3, #246	; 0xf6
  414d50:	e772      	b.n	414c38 <_svfprintf_r+0x1338>
  414d52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  414d54:	1c6c      	adds	r4, r5, #1
  414d56:	9d14      	ldr	r5, [sp, #80]	; 0x50
  414d58:	442c      	add	r4, r5
  414d5a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414d5e:	e665      	b.n	414a2c <_svfprintf_r+0x112c>
  414d60:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  414d64:	2200      	movs	r2, #0
  414d66:	2300      	movs	r3, #0
  414d68:	f007 f84a 	bl	41be00 <__aeabi_dcmpeq>
  414d6c:	2800      	cmp	r0, #0
  414d6e:	f47f af4a 	bne.w	414c06 <_svfprintf_r+0x1306>
  414d72:	f1c5 0501 	rsb	r5, r5, #1
  414d76:	9525      	str	r5, [sp, #148]	; 0x94
  414d78:	442c      	add	r4, r5
  414d7a:	e624      	b.n	4149c6 <_svfprintf_r+0x10c6>
  414d7c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  414d7e:	1c6c      	adds	r4, r5, #1
  414d80:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414d84:	f04f 0867 	mov.w	r8, #103	; 0x67
  414d88:	e650      	b.n	414a2c <_svfprintf_r+0x112c>
  414d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  414d8c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  414d90:	682d      	ldr	r5, [r5, #0]
  414d92:	f899 8001 	ldrb.w	r8, [r9, #1]
  414d96:	950a      	str	r5, [sp, #40]	; 0x28
  414d98:	f10c 0304 	add.w	r3, ip, #4
  414d9c:	2d00      	cmp	r5, #0
  414d9e:	9310      	str	r3, [sp, #64]	; 0x40
  414da0:	4681      	mov	r9, r0
  414da2:	f6be ae09 	bge.w	4139b8 <_svfprintf_r+0xb8>
  414da6:	f7fe be04 	b.w	4139b2 <_svfprintf_r+0xb2>
  414daa:	b97c      	cbnz	r4, 414dcc <_svfprintf_r+0x14cc>
  414dac:	9d09      	ldr	r5, [sp, #36]	; 0x24
  414dae:	07e9      	lsls	r1, r5, #31
  414db0:	d40c      	bmi.n	414dcc <_svfprintf_r+0x14cc>
  414db2:	2301      	movs	r3, #1
  414db4:	461c      	mov	r4, r3
  414db6:	e639      	b.n	414a2c <_svfprintf_r+0x112c>
  414db8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  414dbc:	f01c 0301 	ands.w	r3, ip, #1
  414dc0:	f47f af43 	bne.w	414c4a <_svfprintf_r+0x134a>
  414dc4:	9314      	str	r3, [sp, #80]	; 0x50
  414dc6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414dca:	e62f      	b.n	414a2c <_svfprintf_r+0x112c>
  414dcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  414dce:	1cac      	adds	r4, r5, #2
  414dd0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  414dd4:	e62a      	b.n	414a2c <_svfprintf_r+0x112c>
  414dd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  414dd8:	230c      	movs	r3, #12
  414dda:	602b      	str	r3, [r5, #0]
  414ddc:	f04f 30ff 	mov.w	r0, #4294967295
  414de0:	f7fe beae 	b.w	413b40 <_svfprintf_r+0x240>
  414de4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  414de6:	e713      	b.n	414c10 <_svfprintf_r+0x1310>
  414de8:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  414dec:	e724      	b.n	414c38 <_svfprintf_r+0x1338>
  414dee:	bf00      	nop
  414df0:	0041dddc 	.word	0x0041dddc
  414df4:	66666667 	.word	0x66666667

00414df8 <__ssvfscanf_r>:
  414df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414dfc:	460d      	mov	r5, r1
  414dfe:	8989      	ldrh	r1, [r1, #12]
  414e00:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  414e04:	048c      	lsls	r4, r1, #18
  414e06:	900e      	str	r0, [sp, #56]	; 0x38
  414e08:	9306      	str	r3, [sp, #24]
  414e0a:	d406      	bmi.n	414e1a <__ssvfscanf_r+0x22>
  414e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  414e0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  414e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  414e16:	81a9      	strh	r1, [r5, #12]
  414e18:	666b      	str	r3, [r5, #100]	; 0x64
  414e1a:	4692      	mov	sl, r2
  414e1c:	2400      	movs	r4, #0
  414e1e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  414e22:	9409      	str	r4, [sp, #36]	; 0x24
  414e24:	940c      	str	r4, [sp, #48]	; 0x30
  414e26:	46a1      	mov	r9, r4
  414e28:	940b      	str	r4, [sp, #44]	; 0x2c
  414e2a:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 415210 <__ssvfscanf_r+0x418>
  414e2e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  414e30:	9313      	str	r3, [sp, #76]	; 0x4c
  414e32:	b343      	cbz	r3, 414e86 <__ssvfscanf_r+0x8e>
  414e34:	f8d8 1000 	ldr.w	r1, [r8]
  414e38:	18c8      	adds	r0, r1, r3
  414e3a:	7840      	ldrb	r0, [r0, #1]
  414e3c:	f000 0008 	and.w	r0, r0, #8
  414e40:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  414e44:	b320      	cbz	r0, 414e90 <__ssvfscanf_r+0x98>
  414e46:	686b      	ldr	r3, [r5, #4]
  414e48:	e00e      	b.n	414e68 <__ssvfscanf_r+0x70>
  414e4a:	682b      	ldr	r3, [r5, #0]
  414e4c:	f8d8 2000 	ldr.w	r2, [r8]
  414e50:	7819      	ldrb	r1, [r3, #0]
  414e52:	440a      	add	r2, r1
  414e54:	3301      	adds	r3, #1
  414e56:	7852      	ldrb	r2, [r2, #1]
  414e58:	0710      	lsls	r0, r2, #28
  414e5a:	d50d      	bpl.n	414e78 <__ssvfscanf_r+0x80>
  414e5c:	686a      	ldr	r2, [r5, #4]
  414e5e:	602b      	str	r3, [r5, #0]
  414e60:	1e53      	subs	r3, r2, #1
  414e62:	f109 0901 	add.w	r9, r9, #1
  414e66:	606b      	str	r3, [r5, #4]
  414e68:	2b00      	cmp	r3, #0
  414e6a:	dcee      	bgt.n	414e4a <__ssvfscanf_r+0x52>
  414e6c:	4630      	mov	r0, r6
  414e6e:	4629      	mov	r1, r5
  414e70:	f005 fdde 	bl	41aa30 <__ssrefill_r>
  414e74:	2800      	cmp	r0, #0
  414e76:	d0e8      	beq.n	414e4a <__ssvfscanf_r+0x52>
  414e78:	4652      	mov	r2, sl
  414e7a:	4692      	mov	sl, r2
  414e7c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  414e80:	9313      	str	r3, [sp, #76]	; 0x4c
  414e82:	2b00      	cmp	r3, #0
  414e84:	d1d6      	bne.n	414e34 <__ssvfscanf_r+0x3c>
  414e86:	980b      	ldr	r0, [sp, #44]	; 0x2c
  414e88:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  414e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414e90:	2b25      	cmp	r3, #37	; 0x25
  414e92:	f040 8084 	bne.w	414f9e <__ssvfscanf_r+0x1a6>
  414e96:	7853      	ldrb	r3, [r2, #1]
  414e98:	463c      	mov	r4, r7
  414e9a:	f10a 0201 	add.w	r2, sl, #1
  414e9e:	2b78      	cmp	r3, #120	; 0x78
  414ea0:	f200 82e5 	bhi.w	41546e <__ssvfscanf_r+0x676>
  414ea4:	e8df f013 	tbh	[pc, r3, lsl #1]
  414ea8:	02e3008f 	.word	0x02e3008f
  414eac:	02e302e3 	.word	0x02e302e3
  414eb0:	02e302e3 	.word	0x02e302e3
  414eb4:	02e302e3 	.word	0x02e302e3
  414eb8:	02e302e3 	.word	0x02e302e3
  414ebc:	02e302e3 	.word	0x02e302e3
  414ec0:	02e302e3 	.word	0x02e302e3
  414ec4:	02e302e3 	.word	0x02e302e3
  414ec8:	02e302e3 	.word	0x02e302e3
  414ecc:	02e302e3 	.word	0x02e302e3
  414ed0:	02e302e3 	.word	0x02e302e3
  414ed4:	02e302e3 	.word	0x02e302e3
  414ed8:	02e302e3 	.word	0x02e302e3
  414edc:	02e302e3 	.word	0x02e302e3
  414ee0:	02e302e3 	.word	0x02e302e3
  414ee4:	02e302e3 	.word	0x02e302e3
  414ee8:	02e302e3 	.word	0x02e302e3
  414eec:	02e302e3 	.word	0x02e302e3
  414ef0:	007902e3 	.word	0x007902e3
  414ef4:	02e302e3 	.word	0x02e302e3
  414ef8:	02e302e3 	.word	0x02e302e3
  414efc:	02e30226 	.word	0x02e30226
  414f00:	02e302e3 	.word	0x02e302e3
  414f04:	02e302e3 	.word	0x02e302e3
  414f08:	024f024f 	.word	0x024f024f
  414f0c:	024f024f 	.word	0x024f024f
  414f10:	024f024f 	.word	0x024f024f
  414f14:	024f024f 	.word	0x024f024f
  414f18:	024f024f 	.word	0x024f024f
  414f1c:	02e302e3 	.word	0x02e302e3
  414f20:	02e302e3 	.word	0x02e302e3
  414f24:	02e302e3 	.word	0x02e302e3
  414f28:	02e302e3 	.word	0x02e302e3
  414f2c:	02e302e3 	.word	0x02e302e3
  414f30:	0273022c 	.word	0x0273022c
  414f34:	027302e3 	.word	0x027302e3
  414f38:	02e302e3 	.word	0x02e302e3
  414f3c:	02e302e3 	.word	0x02e302e3
  414f40:	02e3026d 	.word	0x02e3026d
  414f44:	026302e3 	.word	0x026302e3
  414f48:	02e302e3 	.word	0x02e302e3
  414f4c:	02e302e3 	.word	0x02e302e3
  414f50:	02e302e3 	.word	0x02e302e3
  414f54:	02e302e3 	.word	0x02e302e3
  414f58:	02e30259 	.word	0x02e30259
  414f5c:	029302e3 	.word	0x029302e3
  414f60:	02e302e3 	.word	0x02e302e3
  414f64:	02e302e3 	.word	0x02e302e3
  414f68:	02e302e3 	.word	0x02e302e3
  414f6c:	028d02e3 	.word	0x028d02e3
  414f70:	0273029e 	.word	0x0273029e
  414f74:	02730273 	.word	0x02730273
  414f78:	00950287 	.word	0x00950287
  414f7c:	02e302e3 	.word	0x02e302e3
  414f80:	02e302b6 	.word	0x02e302b6
  414f84:	02770279 	.word	0x02770279
  414f88:	02e302ac 	.word	0x02e302ac
  414f8c:	02a802e3 	.word	0x02a802e3
  414f90:	02a002e3 	.word	0x02a002e3
  414f94:	02e302e3 	.word	0x02e302e3
  414f98:	0259      	.short	0x0259
  414f9a:	9207      	str	r2, [sp, #28]
  414f9c:	4692      	mov	sl, r2
  414f9e:	686b      	ldr	r3, [r5, #4]
  414fa0:	2b00      	cmp	r3, #0
  414fa2:	f340 8557 	ble.w	415a54 <__ssvfscanf_r+0xc5c>
  414fa6:	682b      	ldr	r3, [r5, #0]
  414fa8:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  414fac:	7819      	ldrb	r1, [r3, #0]
  414fae:	4291      	cmp	r1, r2
  414fb0:	f47f af69 	bne.w	414e86 <__ssvfscanf_r+0x8e>
  414fb4:	686a      	ldr	r2, [r5, #4]
  414fb6:	3301      	adds	r3, #1
  414fb8:	3a01      	subs	r2, #1
  414fba:	606a      	str	r2, [r5, #4]
  414fbc:	602b      	str	r3, [r5, #0]
  414fbe:	f109 0901 	add.w	r9, r9, #1
  414fc2:	4652      	mov	r2, sl
  414fc4:	e759      	b.n	414e7a <__ssvfscanf_r+0x82>
  414fc6:	f04f 30ff 	mov.w	r0, #4294967295
  414fca:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  414fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414fd2:	9207      	str	r2, [sp, #28]
  414fd4:	2300      	movs	r3, #0
  414fd6:	4a8d      	ldr	r2, [pc, #564]	; (41520c <__ssvfscanf_r+0x414>)
  414fd8:	9209      	str	r2, [sp, #36]	; 0x24
  414fda:	930c      	str	r3, [sp, #48]	; 0x30
  414fdc:	f04f 0a03 	mov.w	sl, #3
  414fe0:	686b      	ldr	r3, [r5, #4]
  414fe2:	2b00      	cmp	r3, #0
  414fe4:	f340 8199 	ble.w	41531a <__ssvfscanf_r+0x522>
  414fe8:	0679      	lsls	r1, r7, #25
  414fea:	d512      	bpl.n	415012 <__ssvfscanf_r+0x21a>
  414fec:	f10a 3aff 	add.w	sl, sl, #4294967295
  414ff0:	f1ba 0f03 	cmp.w	sl, #3
  414ff4:	f200 80b7 	bhi.w	415166 <__ssvfscanf_r+0x36e>
  414ff8:	e8df f01a 	tbh	[pc, sl, lsl #1]
  414ffc:	008e00da 	.word	0x008e00da
  415000:	0244001e 	.word	0x0244001e
  415004:	4630      	mov	r0, r6
  415006:	4629      	mov	r1, r5
  415008:	f005 fd12 	bl	41aa30 <__ssrefill_r>
  41500c:	2800      	cmp	r0, #0
  41500e:	f040 818b 	bne.w	415328 <__ssvfscanf_r+0x530>
  415012:	f8d8 1000 	ldr.w	r1, [r8]
  415016:	682b      	ldr	r3, [r5, #0]
  415018:	e000      	b.n	41501c <__ssvfscanf_r+0x224>
  41501a:	602b      	str	r3, [r5, #0]
  41501c:	781a      	ldrb	r2, [r3, #0]
  41501e:	440a      	add	r2, r1
  415020:	3301      	adds	r3, #1
  415022:	7852      	ldrb	r2, [r2, #1]
  415024:	0712      	lsls	r2, r2, #28
  415026:	d5e1      	bpl.n	414fec <__ssvfscanf_r+0x1f4>
  415028:	686a      	ldr	r2, [r5, #4]
  41502a:	3a01      	subs	r2, #1
  41502c:	2a00      	cmp	r2, #0
  41502e:	f109 0901 	add.w	r9, r9, #1
  415032:	606a      	str	r2, [r5, #4]
  415034:	dcf1      	bgt.n	41501a <__ssvfscanf_r+0x222>
  415036:	e7e5      	b.n	415004 <__ssvfscanf_r+0x20c>
  415038:	1e63      	subs	r3, r4, #1
  41503a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  41503e:	bf86      	itte	hi
  415040:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  415044:	1863      	addhi	r3, r4, r1
  415046:	2300      	movls	r3, #0
  415048:	f04f 0b00 	mov.w	fp, #0
  41504c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  415050:	9308      	str	r3, [sp, #32]
  415052:	465b      	mov	r3, fp
  415054:	46b3      	mov	fp, r6
  415056:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  415058:	f8cd c014 	str.w	ip, [sp, #20]
  41505c:	46e2      	mov	sl, ip
  41505e:	bf88      	it	hi
  415060:	f240 145d 	movwhi	r4, #349	; 0x15d
  415064:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  415068:	46cc      	mov	ip, r9
  41506a:	6828      	ldr	r0, [r5, #0]
  41506c:	7801      	ldrb	r1, [r0, #0]
  41506e:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  415072:	2a4d      	cmp	r2, #77	; 0x4d
  415074:	f200 80e2 	bhi.w	41523c <__ssvfscanf_r+0x444>
  415078:	e8df f012 	tbh	[pc, r2, lsl #1]
  41507c:	00e00126 	.word	0x00e00126
  415080:	00e00126 	.word	0x00e00126
  415084:	00fd00e0 	.word	0x00fd00e0
  415088:	00cc00cc 	.word	0x00cc00cc
  41508c:	00cc00cc 	.word	0x00cc00cc
  415090:	00cc00cc 	.word	0x00cc00cc
  415094:	013600cc 	.word	0x013600cc
  415098:	00e00136 	.word	0x00e00136
  41509c:	00e000e0 	.word	0x00e000e0
  4150a0:	00e000e0 	.word	0x00e000e0
  4150a4:	00e000e0 	.word	0x00e000e0
  4150a8:	01210121 	.word	0x01210121
  4150ac:	01210121 	.word	0x01210121
  4150b0:	01210121 	.word	0x01210121
  4150b4:	00e000e0 	.word	0x00e000e0
  4150b8:	00e000e0 	.word	0x00e000e0
  4150bc:	00e000e0 	.word	0x00e000e0
  4150c0:	00e000e0 	.word	0x00e000e0
  4150c4:	00e000e0 	.word	0x00e000e0
  4150c8:	00e000e0 	.word	0x00e000e0
  4150cc:	00e000e0 	.word	0x00e000e0
  4150d0:	00e000e0 	.word	0x00e000e0
  4150d4:	012b00e0 	.word	0x012b00e0
  4150d8:	00e000e0 	.word	0x00e000e0
  4150dc:	00e000e0 	.word	0x00e000e0
  4150e0:	00e000e0 	.word	0x00e000e0
  4150e4:	00e000e0 	.word	0x00e000e0
  4150e8:	01210121 	.word	0x01210121
  4150ec:	01210121 	.word	0x01210121
  4150f0:	01210121 	.word	0x01210121
  4150f4:	00e000e0 	.word	0x00e000e0
  4150f8:	00e000e0 	.word	0x00e000e0
  4150fc:	00e000e0 	.word	0x00e000e0
  415100:	00e000e0 	.word	0x00e000e0
  415104:	00e000e0 	.word	0x00e000e0
  415108:	00e000e0 	.word	0x00e000e0
  41510c:	00e000e0 	.word	0x00e000e0
  415110:	00e000e0 	.word	0x00e000e0
  415114:	012b00e0 	.word	0x012b00e0
  415118:	2c00      	cmp	r4, #0
  41511a:	bf08      	it	eq
  41511c:	f04f 34ff 	moveq.w	r4, #4294967295
  415120:	f017 0301 	ands.w	r3, r7, #1
  415124:	f040 817f 	bne.w	415426 <__ssvfscanf_r+0x62e>
  415128:	06f9      	lsls	r1, r7, #27
  41512a:	f140 8390 	bpl.w	41584e <__ssvfscanf_r+0xa56>
  41512e:	461f      	mov	r7, r3
  415130:	f8d8 1000 	ldr.w	r1, [r8]
  415134:	682b      	ldr	r3, [r5, #0]
  415136:	781a      	ldrb	r2, [r3, #0]
  415138:	440a      	add	r2, r1
  41513a:	3301      	adds	r3, #1
  41513c:	7852      	ldrb	r2, [r2, #1]
  41513e:	0712      	lsls	r2, r2, #28
  415140:	d431      	bmi.n	4151a6 <__ssvfscanf_r+0x3ae>
  415142:	686a      	ldr	r2, [r5, #4]
  415144:	602b      	str	r3, [r5, #0]
  415146:	3701      	adds	r7, #1
  415148:	3a01      	subs	r2, #1
  41514a:	42bc      	cmp	r4, r7
  41514c:	606a      	str	r2, [r5, #4]
  41514e:	d02a      	beq.n	4151a6 <__ssvfscanf_r+0x3ae>
  415150:	2a00      	cmp	r2, #0
  415152:	dcf0      	bgt.n	415136 <__ssvfscanf_r+0x33e>
  415154:	4630      	mov	r0, r6
  415156:	4629      	mov	r1, r5
  415158:	f005 fc6a 	bl	41aa30 <__ssrefill_r>
  41515c:	bb18      	cbnz	r0, 4151a6 <__ssvfscanf_r+0x3ae>
  41515e:	f8d8 1000 	ldr.w	r1, [r8]
  415162:	682b      	ldr	r3, [r5, #0]
  415164:	e7e7      	b.n	415136 <__ssvfscanf_r+0x33e>
  415166:	2c00      	cmp	r4, #0
  415168:	bf08      	it	eq
  41516a:	2401      	moveq	r4, #1
  41516c:	f017 0301 	ands.w	r3, r7, #1
  415170:	f040 839f 	bne.w	4158b2 <__ssvfscanf_r+0xaba>
  415174:	06f9      	lsls	r1, r7, #27
  415176:	f140 8454 	bpl.w	415a22 <__ssvfscanf_r+0xc2a>
  41517a:	461f      	mov	r7, r3
  41517c:	e008      	b.n	415190 <__ssvfscanf_r+0x398>
  41517e:	441a      	add	r2, r3
  415180:	602a      	str	r2, [r5, #0]
  415182:	441f      	add	r7, r3
  415184:	1ae4      	subs	r4, r4, r3
  415186:	f005 fc53 	bl	41aa30 <__ssrefill_r>
  41518a:	2800      	cmp	r0, #0
  41518c:	f040 8441 	bne.w	415a12 <__ssvfscanf_r+0xc1a>
  415190:	686b      	ldr	r3, [r5, #4]
  415192:	682a      	ldr	r2, [r5, #0]
  415194:	42a3      	cmp	r3, r4
  415196:	4630      	mov	r0, r6
  415198:	4629      	mov	r1, r5
  41519a:	dbf0      	blt.n	41517e <__ssvfscanf_r+0x386>
  41519c:	1b1b      	subs	r3, r3, r4
  41519e:	4422      	add	r2, r4
  4151a0:	606b      	str	r3, [r5, #4]
  4151a2:	4427      	add	r7, r4
  4151a4:	602a      	str	r2, [r5, #0]
  4151a6:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4151aa:	44b9      	add	r9, r7
  4151ac:	4652      	mov	r2, sl
  4151ae:	e664      	b.n	414e7a <__ssvfscanf_r+0x82>
  4151b0:	2c00      	cmp	r4, #0
  4151b2:	bf08      	it	eq
  4151b4:	f04f 34ff 	moveq.w	r4, #4294967295
  4151b8:	06fa      	lsls	r2, r7, #27
  4151ba:	f140 8315 	bpl.w	4157e8 <__ssvfscanf_r+0x9f0>
  4151be:	682b      	ldr	r3, [r5, #0]
  4151c0:	2700      	movs	r7, #0
  4151c2:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  4151c6:	781a      	ldrb	r2, [r3, #0]
  4151c8:	f81b 2002 	ldrb.w	r2, [fp, r2]
  4151cc:	3301      	adds	r3, #1
  4151ce:	b1aa      	cbz	r2, 4151fc <__ssvfscanf_r+0x404>
  4151d0:	686a      	ldr	r2, [r5, #4]
  4151d2:	602b      	str	r3, [r5, #0]
  4151d4:	3701      	adds	r7, #1
  4151d6:	3a01      	subs	r2, #1
  4151d8:	42bc      	cmp	r4, r7
  4151da:	606a      	str	r2, [r5, #4]
  4151dc:	d0e3      	beq.n	4151a6 <__ssvfscanf_r+0x3ae>
  4151de:	2a00      	cmp	r2, #0
  4151e0:	dcf1      	bgt.n	4151c6 <__ssvfscanf_r+0x3ce>
  4151e2:	4630      	mov	r0, r6
  4151e4:	4629      	mov	r1, r5
  4151e6:	f005 fc23 	bl	41aa30 <__ssrefill_r>
  4151ea:	2800      	cmp	r0, #0
  4151ec:	d1db      	bne.n	4151a6 <__ssvfscanf_r+0x3ae>
  4151ee:	682b      	ldr	r3, [r5, #0]
  4151f0:	781a      	ldrb	r2, [r3, #0]
  4151f2:	f81b 2002 	ldrb.w	r2, [fp, r2]
  4151f6:	3301      	adds	r3, #1
  4151f8:	2a00      	cmp	r2, #0
  4151fa:	d1e9      	bne.n	4151d0 <__ssvfscanf_r+0x3d8>
  4151fc:	2f00      	cmp	r7, #0
  4151fe:	f43f ae42 	beq.w	414e86 <__ssvfscanf_r+0x8e>
  415202:	44b9      	add	r9, r7
  415204:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415208:	e7d0      	b.n	4151ac <__ssvfscanf_r+0x3b4>
  41520a:	bf00      	nop
  41520c:	0041a351 	.word	0x0041a351
  415210:	20000fc4 	.word	0x20000fc4
  415214:	f8df 9364 	ldr.w	r9, [pc, #868]	; 41557c <__ssvfscanf_r+0x784>
  415218:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  41521c:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  415220:	686a      	ldr	r2, [r5, #4]
  415222:	f88a 1000 	strb.w	r1, [sl]
  415226:	3a01      	subs	r2, #1
  415228:	2a00      	cmp	r2, #0
  41522a:	f10a 0a01 	add.w	sl, sl, #1
  41522e:	606a      	str	r2, [r5, #4]
  415230:	dd38      	ble.n	4152a4 <__ssvfscanf_r+0x4ac>
  415232:	3001      	adds	r0, #1
  415234:	6028      	str	r0, [r5, #0]
  415236:	3c01      	subs	r4, #1
  415238:	f47f af17 	bne.w	41506a <__ssvfscanf_r+0x272>
  41523c:	05f9      	lsls	r1, r7, #23
  41523e:	960c      	str	r6, [sp, #48]	; 0x30
  415240:	46e1      	mov	r9, ip
  415242:	465e      	mov	r6, fp
  415244:	469b      	mov	fp, r3
  415246:	d508      	bpl.n	41525a <__ssvfscanf_r+0x462>
  415248:	9c05      	ldr	r4, [sp, #20]
  41524a:	45a2      	cmp	sl, r4
  41524c:	f200 840a 	bhi.w	415a64 <__ssvfscanf_r+0xc6c>
  415250:	f8dd c014 	ldr.w	ip, [sp, #20]
  415254:	45e2      	cmp	sl, ip
  415256:	f43f ae16 	beq.w	414e86 <__ssvfscanf_r+0x8e>
  41525a:	f017 0410 	ands.w	r4, r7, #16
  41525e:	f000 8372 	beq.w	415946 <__ssvfscanf_r+0xb4e>
  415262:	f8dd c014 	ldr.w	ip, [sp, #20]
  415266:	ebcc 0a0a 	rsb	sl, ip, sl
  41526a:	44d3      	add	fp, sl
  41526c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415270:	44d9      	add	r9, fp
  415272:	4652      	mov	r2, sl
  415274:	e601      	b.n	414e7a <__ssvfscanf_r+0x82>
  415276:	053a      	lsls	r2, r7, #20
  415278:	d5d2      	bpl.n	415220 <__ssvfscanf_r+0x428>
  41527a:	b916      	cbnz	r6, 415282 <__ssvfscanf_r+0x48a>
  41527c:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  415280:	2608      	movs	r6, #8
  415282:	057a      	lsls	r2, r7, #21
  415284:	f100 837d 	bmi.w	415982 <__ssvfscanf_r+0xb8a>
  415288:	9a08      	ldr	r2, [sp, #32]
  41528a:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  41528e:	b112      	cbz	r2, 415296 <__ssvfscanf_r+0x49e>
  415290:	3a01      	subs	r2, #1
  415292:	9208      	str	r2, [sp, #32]
  415294:	3401      	adds	r4, #1
  415296:	686a      	ldr	r2, [r5, #4]
  415298:	3a01      	subs	r2, #1
  41529a:	2a00      	cmp	r2, #0
  41529c:	f103 0301 	add.w	r3, r3, #1
  4152a0:	606a      	str	r2, [r5, #4]
  4152a2:	dcc6      	bgt.n	415232 <__ssvfscanf_r+0x43a>
  4152a4:	4658      	mov	r0, fp
  4152a6:	4629      	mov	r1, r5
  4152a8:	9303      	str	r3, [sp, #12]
  4152aa:	f8cd c010 	str.w	ip, [sp, #16]
  4152ae:	f005 fbbf 	bl	41aa30 <__ssrefill_r>
  4152b2:	9b03      	ldr	r3, [sp, #12]
  4152b4:	f8dd c010 	ldr.w	ip, [sp, #16]
  4152b8:	2800      	cmp	r0, #0
  4152ba:	d0bc      	beq.n	415236 <__ssvfscanf_r+0x43e>
  4152bc:	e7be      	b.n	41523c <__ssvfscanf_r+0x444>
  4152be:	2e0a      	cmp	r6, #10
  4152c0:	ddbc      	ble.n	41523c <__ssvfscanf_r+0x444>
  4152c2:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  4152c6:	e7ab      	b.n	415220 <__ssvfscanf_r+0x428>
  4152c8:	063a      	lsls	r2, r7, #24
  4152ca:	d5b7      	bpl.n	41523c <__ssvfscanf_r+0x444>
  4152cc:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4152d0:	e7a6      	b.n	415220 <__ssvfscanf_r+0x428>
  4152d2:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  4152d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4152da:	d1af      	bne.n	41523c <__ssvfscanf_r+0x444>
  4152dc:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  4152e0:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  4152e4:	2610      	movs	r6, #16
  4152e6:	e79b      	b.n	415220 <__ssvfscanf_r+0x428>
  4152e8:	4aa4      	ldr	r2, [pc, #656]	; (41557c <__ssvfscanf_r+0x784>)
  4152ea:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  4152ee:	2e08      	cmp	r6, #8
  4152f0:	dce7      	bgt.n	4152c2 <__ssvfscanf_r+0x4ca>
  4152f2:	e7a3      	b.n	41523c <__ssvfscanf_r+0x444>
  4152f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4152f8:	f047 0710 	orr.w	r7, r7, #16
  4152fc:	4692      	mov	sl, r2
  4152fe:	e5cc      	b.n	414e9a <__ssvfscanf_r+0xa2>
  415300:	9207      	str	r2, [sp, #28]
  415302:	f047 0701 	orr.w	r7, r7, #1
  415306:	686b      	ldr	r3, [r5, #4]
  415308:	489d      	ldr	r0, [pc, #628]	; (415580 <__ssvfscanf_r+0x788>)
  41530a:	9009      	str	r0, [sp, #36]	; 0x24
  41530c:	210a      	movs	r1, #10
  41530e:	2b00      	cmp	r3, #0
  415310:	910c      	str	r1, [sp, #48]	; 0x30
  415312:	f04f 0a03 	mov.w	sl, #3
  415316:	f73f ae67 	bgt.w	414fe8 <__ssvfscanf_r+0x1f0>
  41531a:	4630      	mov	r0, r6
  41531c:	4629      	mov	r1, r5
  41531e:	f005 fb87 	bl	41aa30 <__ssrefill_r>
  415322:	2800      	cmp	r0, #0
  415324:	f43f ae60 	beq.w	414fe8 <__ssvfscanf_r+0x1f0>
  415328:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41532a:	2c00      	cmp	r4, #0
  41532c:	f43f ae4b 	beq.w	414fc6 <__ssvfscanf_r+0x1ce>
  415330:	89ab      	ldrh	r3, [r5, #12]
  415332:	4620      	mov	r0, r4
  415334:	f013 0f40 	tst.w	r3, #64	; 0x40
  415338:	bf18      	it	ne
  41533a:	f04f 30ff 	movne.w	r0, #4294967295
  41533e:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  415342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415346:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  41534a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  41534e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  415352:	f89a 3001 	ldrb.w	r3, [sl, #1]
  415356:	4692      	mov	sl, r2
  415358:	e59f      	b.n	414e9a <__ssvfscanf_r+0xa2>
  41535a:	9207      	str	r2, [sp, #28]
  41535c:	2310      	movs	r3, #16
  41535e:	4a89      	ldr	r2, [pc, #548]	; (415584 <__ssvfscanf_r+0x78c>)
  415360:	9209      	str	r2, [sp, #36]	; 0x24
  415362:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  415366:	930c      	str	r3, [sp, #48]	; 0x30
  415368:	f04f 0a03 	mov.w	sl, #3
  41536c:	e638      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  41536e:	9207      	str	r2, [sp, #28]
  415370:	f047 0701 	orr.w	r7, r7, #1
  415374:	4a83      	ldr	r2, [pc, #524]	; (415584 <__ssvfscanf_r+0x78c>)
  415376:	9209      	str	r2, [sp, #36]	; 0x24
  415378:	2308      	movs	r3, #8
  41537a:	930c      	str	r3, [sp, #48]	; 0x30
  41537c:	f04f 0a03 	mov.w	sl, #3
  415380:	e62e      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  415382:	f89a 3001 	ldrb.w	r3, [sl, #1]
  415386:	f047 0702 	orr.w	r7, r7, #2
  41538a:	4692      	mov	sl, r2
  41538c:	e585      	b.n	414e9a <__ssvfscanf_r+0xa2>
  41538e:	9207      	str	r2, [sp, #28]
  415390:	f04f 0a04 	mov.w	sl, #4
  415394:	e624      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  415396:	9207      	str	r2, [sp, #28]
  415398:	e7ec      	b.n	415374 <__ssvfscanf_r+0x57c>
  41539a:	06f9      	lsls	r1, r7, #27
  41539c:	9207      	str	r2, [sp, #28]
  41539e:	d462      	bmi.n	415466 <__ssvfscanf_r+0x66e>
  4153a0:	077b      	lsls	r3, r7, #29
  4153a2:	f140 8381 	bpl.w	415aa8 <__ssvfscanf_r+0xcb0>
  4153a6:	9c06      	ldr	r4, [sp, #24]
  4153a8:	6823      	ldr	r3, [r4, #0]
  4153aa:	3404      	adds	r4, #4
  4153ac:	4692      	mov	sl, r2
  4153ae:	f8a3 9000 	strh.w	r9, [r3]
  4153b2:	9406      	str	r4, [sp, #24]
  4153b4:	e560      	b.n	414e78 <__ssvfscanf_r+0x80>
  4153b6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4153ba:	f047 0704 	orr.w	r7, r7, #4
  4153be:	4692      	mov	sl, r2
  4153c0:	e56b      	b.n	414e9a <__ssvfscanf_r+0xa2>
  4153c2:	9207      	str	r2, [sp, #28]
  4153c4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4153c8:	f04f 0a00 	mov.w	sl, #0
  4153cc:	e608      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  4153ce:	4611      	mov	r1, r2
  4153d0:	a816      	add	r0, sp, #88	; 0x58
  4153d2:	9207      	str	r2, [sp, #28]
  4153d4:	f003 ffbe 	bl	419354 <__sccl>
  4153d8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4153dc:	9007      	str	r0, [sp, #28]
  4153de:	f04f 0a01 	mov.w	sl, #1
  4153e2:	e5fd      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  4153e4:	9207      	str	r2, [sp, #28]
  4153e6:	e78e      	b.n	415306 <__ssvfscanf_r+0x50e>
  4153e8:	4866      	ldr	r0, [pc, #408]	; (415584 <__ssvfscanf_r+0x78c>)
  4153ea:	9207      	str	r2, [sp, #28]
  4153ec:	210a      	movs	r1, #10
  4153ee:	9009      	str	r0, [sp, #36]	; 0x24
  4153f0:	910c      	str	r1, [sp, #48]	; 0x30
  4153f2:	f04f 0a03 	mov.w	sl, #3
  4153f6:	e5f3      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  4153f8:	9207      	str	r2, [sp, #28]
  4153fa:	f04f 0a02 	mov.w	sl, #2
  4153fe:	e5ef      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  415400:	4860      	ldr	r0, [pc, #384]	; (415584 <__ssvfscanf_r+0x78c>)
  415402:	9207      	str	r2, [sp, #28]
  415404:	2110      	movs	r1, #16
  415406:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  41540a:	9009      	str	r0, [sp, #36]	; 0x24
  41540c:	910c      	str	r1, [sp, #48]	; 0x30
  41540e:	f04f 0a03 	mov.w	sl, #3
  415412:	e5e5      	b.n	414fe0 <__ssvfscanf_r+0x1e8>
  415414:	f89a 3001 	ldrb.w	r3, [sl, #1]
  415418:	2b6c      	cmp	r3, #108	; 0x6c
  41541a:	f000 8336 	beq.w	415a8a <__ssvfscanf_r+0xc92>
  41541e:	f047 0701 	orr.w	r7, r7, #1
  415422:	4692      	mov	sl, r2
  415424:	e539      	b.n	414e9a <__ssvfscanf_r+0xa2>
  415426:	a814      	add	r0, sp, #80	; 0x50
  415428:	2100      	movs	r1, #0
  41542a:	2208      	movs	r2, #8
  41542c:	900a      	str	r0, [sp, #40]	; 0x28
  41542e:	f7fd fe35 	bl	41309c <memset>
  415432:	f017 0b10 	ands.w	fp, r7, #16
  415436:	f000 82bd 	beq.w	4159b4 <__ssvfscanf_r+0xbbc>
  41543a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  41543e:	2200      	movs	r2, #0
  415440:	6829      	ldr	r1, [r5, #0]
  415442:	f8d8 3000 	ldr.w	r3, [r8]
  415446:	7809      	ldrb	r1, [r1, #0]
  415448:	440b      	add	r3, r1
  41544a:	785b      	ldrb	r3, [r3, #1]
  41544c:	0718      	lsls	r0, r3, #28
  41544e:	d402      	bmi.n	415456 <__ssvfscanf_r+0x65e>
  415450:	2c00      	cmp	r4, #0
  415452:	f040 8372 	bne.w	415b3a <__ssvfscanf_r+0xd42>
  415456:	f1bb 0f00 	cmp.w	fp, #0
  41545a:	d104      	bne.n	415466 <__ssvfscanf_r+0x66e>
  41545c:	f8ca b000 	str.w	fp, [sl]
  415460:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  415462:	3401      	adds	r4, #1
  415464:	940b      	str	r4, [sp, #44]	; 0x2c
  415466:	f8dd a01c 	ldr.w	sl, [sp, #28]
  41546a:	4652      	mov	r2, sl
  41546c:	e505      	b.n	414e7a <__ssvfscanf_r+0x82>
  41546e:	440b      	add	r3, r1
  415470:	9207      	str	r2, [sp, #28]
  415472:	785b      	ldrb	r3, [r3, #1]
  415474:	f003 0303 	and.w	r3, r3, #3
  415478:	2b01      	cmp	r3, #1
  41547a:	f47f af44 	bne.w	415306 <__ssvfscanf_r+0x50e>
  41547e:	f047 0701 	orr.w	r7, r7, #1
  415482:	e740      	b.n	415306 <__ssvfscanf_r+0x50e>
  415484:	4630      	mov	r0, r6
  415486:	f002 ff83 	bl	418390 <_localeconv_r>
  41548a:	1e63      	subs	r3, r4, #1
  41548c:	6800      	ldr	r0, [r0, #0]
  41548e:	900f      	str	r0, [sp, #60]	; 0x3c
  415490:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  415494:	f240 81a5 	bls.w	4157e2 <__ssvfscanf_r+0x9ea>
  415498:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  41549c:	4404      	add	r4, r0
  41549e:	940d      	str	r4, [sp, #52]	; 0x34
  4154a0:	f240 145d 	movw	r4, #349	; 0x15d
  4154a4:	f04f 0a00 	mov.w	sl, #0
  4154a8:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  4154ac:	960e      	str	r6, [sp, #56]	; 0x38
  4154ae:	f8cd c014 	str.w	ip, [sp, #20]
  4154b2:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  4154b6:	4653      	mov	r3, sl
  4154b8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  4154bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4154c0:	f8cd a020 	str.w	sl, [sp, #32]
  4154c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4154c8:	46e3      	mov	fp, ip
  4154ca:	4656      	mov	r6, sl
  4154cc:	6828      	ldr	r0, [r5, #0]
  4154ce:	7802      	ldrb	r2, [r0, #0]
  4154d0:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  4154d4:	294e      	cmp	r1, #78	; 0x4e
  4154d6:	f200 8156 	bhi.w	415786 <__ssvfscanf_r+0x98e>
  4154da:	e8df f011 	tbh	[pc, r1, lsl #1]
  4154de:	007e      	.short	0x007e
  4154e0:	007e0154 	.word	0x007e0154
  4154e4:	01540154 	.word	0x01540154
  4154e8:	00550072 	.word	0x00550072
  4154ec:	00550055 	.word	0x00550055
  4154f0:	00550055 	.word	0x00550055
  4154f4:	00550055 	.word	0x00550055
  4154f8:	00550055 	.word	0x00550055
  4154fc:	01540154 	.word	0x01540154
  415500:	01540154 	.word	0x01540154
  415504:	01540154 	.word	0x01540154
  415508:	014f0154 	.word	0x014f0154
  41550c:	01540154 	.word	0x01540154
  415510:	01350154 	.word	0x01350154
  415514:	0154012e 	.word	0x0154012e
  415518:	00a40154 	.word	0x00a40154
  41551c:	01540154 	.word	0x01540154
  415520:	01540154 	.word	0x01540154
  415524:	0154008f 	.word	0x0154008f
  415528:	01540154 	.word	0x01540154
  41552c:	01540154 	.word	0x01540154
  415530:	01540089 	.word	0x01540089
  415534:	01540154 	.word	0x01540154
  415538:	00830154 	.word	0x00830154
  41553c:	01540154 	.word	0x01540154
  415540:	01540154 	.word	0x01540154
  415544:	01540154 	.word	0x01540154
  415548:	014f0154 	.word	0x014f0154
  41554c:	01540154 	.word	0x01540154
  415550:	01350154 	.word	0x01350154
  415554:	0154012e 	.word	0x0154012e
  415558:	00a40154 	.word	0x00a40154
  41555c:	01540154 	.word	0x01540154
  415560:	01540154 	.word	0x01540154
  415564:	0154008f 	.word	0x0154008f
  415568:	01540154 	.word	0x01540154
  41556c:	01540154 	.word	0x01540154
  415570:	01540089 	.word	0x01540089
  415574:	01540154 	.word	0x01540154
  415578:	00830154 	.word	0x00830154
  41557c:	0041ddf8 	.word	0x0041ddf8
  415580:	0041a351 	.word	0x0041a351
  415584:	0041a601 	.word	0x0041a601
  415588:	eb03 010a 	add.w	r1, r3, sl
  41558c:	b999      	cbnz	r1, 4155b6 <__ssvfscanf_r+0x7be>
  41558e:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  415592:	f88b 2000 	strb.w	r2, [fp]
  415596:	f10b 0b01 	add.w	fp, fp, #1
  41559a:	686a      	ldr	r2, [r5, #4]
  41559c:	3a01      	subs	r2, #1
  41559e:	2a00      	cmp	r2, #0
  4155a0:	f104 34ff 	add.w	r4, r4, #4294967295
  4155a4:	f109 0901 	add.w	r9, r9, #1
  4155a8:	606a      	str	r2, [r5, #4]
  4155aa:	f340 80fa 	ble.w	4157a2 <__ssvfscanf_r+0x9aa>
  4155ae:	3001      	adds	r0, #1
  4155b0:	6028      	str	r0, [r5, #0]
  4155b2:	2c00      	cmp	r4, #0
  4155b4:	d18a      	bne.n	4154cc <__ssvfscanf_r+0x6d4>
  4155b6:	9608      	str	r6, [sp, #32]
  4155b8:	9c08      	ldr	r4, [sp, #32]
  4155ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4155bc:	2c00      	cmp	r4, #0
  4155be:	d041      	beq.n	415644 <__ssvfscanf_r+0x84c>
  4155c0:	e10c      	b.n	4157dc <__ssvfscanf_r+0x9e4>
  4155c2:	05f9      	lsls	r1, r7, #23
  4155c4:	d5e0      	bpl.n	415588 <__ssvfscanf_r+0x790>
  4155c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4155c8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4155cc:	3601      	adds	r6, #1
  4155ce:	2a00      	cmp	r2, #0
  4155d0:	d0e3      	beq.n	41559a <__ssvfscanf_r+0x7a2>
  4155d2:	3a01      	subs	r2, #1
  4155d4:	920d      	str	r2, [sp, #52]	; 0x34
  4155d6:	3401      	adds	r4, #1
  4155d8:	e7df      	b.n	41559a <__ssvfscanf_r+0x7a2>
  4155da:	0639      	lsls	r1, r7, #24
  4155dc:	d5eb      	bpl.n	4155b6 <__ssvfscanf_r+0x7be>
  4155de:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4155e2:	e7d6      	b.n	415592 <__ssvfscanf_r+0x79a>
  4155e4:	f1ba 0f07 	cmp.w	sl, #7
  4155e8:	d1e5      	bne.n	4155b6 <__ssvfscanf_r+0x7be>
  4155ea:	f04f 0a08 	mov.w	sl, #8
  4155ee:	e7d0      	b.n	415592 <__ssvfscanf_r+0x79a>
  4155f0:	f1ba 0f06 	cmp.w	sl, #6
  4155f4:	d1df      	bne.n	4155b6 <__ssvfscanf_r+0x7be>
  4155f6:	f04f 0a07 	mov.w	sl, #7
  4155fa:	e7ca      	b.n	415592 <__ssvfscanf_r+0x79a>
  4155fc:	2b00      	cmp	r3, #0
  4155fe:	f040 80e6 	bne.w	4157ce <__ssvfscanf_r+0x9d6>
  415602:	b92e      	cbnz	r6, 415610 <__ssvfscanf_r+0x818>
  415604:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  415608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  41560c:	f000 8239 	beq.w	415a82 <__ssvfscanf_r+0xc8a>
  415610:	f1ba 0f01 	cmp.w	sl, #1
  415614:	d002      	beq.n	41561c <__ssvfscanf_r+0x824>
  415616:	f1ba 0f04 	cmp.w	sl, #4
  41561a:	d1cc      	bne.n	4155b6 <__ssvfscanf_r+0x7be>
  41561c:	f10a 0a01 	add.w	sl, sl, #1
  415620:	fa5f fa8a 	uxtb.w	sl, sl
  415624:	e7b5      	b.n	415592 <__ssvfscanf_r+0x79a>
  415626:	f1ba 0f00 	cmp.w	sl, #0
  41562a:	f040 80c7 	bne.w	4157bc <__ssvfscanf_r+0x9c4>
  41562e:	2e00      	cmp	r6, #0
  415630:	f040 80d2 	bne.w	4157d8 <__ssvfscanf_r+0x9e0>
  415634:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  415638:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  41563c:	f000 821c 	beq.w	415a78 <__ssvfscanf_r+0xc80>
  415640:	9608      	str	r6, [sp, #32]
  415642:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  415644:	f103 3cff 	add.w	ip, r3, #4294967295
  415648:	f1bc 0f01 	cmp.w	ip, #1
  41564c:	f240 82dc 	bls.w	415c08 <__ssvfscanf_r+0xe10>
  415650:	f10a 32ff 	add.w	r2, sl, #4294967295
  415654:	2a06      	cmp	r2, #6
  415656:	d822      	bhi.n	41569e <__ssvfscanf_r+0x8a6>
  415658:	f1ba 0f02 	cmp.w	sl, #2
  41565c:	f240 82ad 	bls.w	415bba <__ssvfscanf_r+0xdc2>
  415660:	f1ba 0f03 	cmp.w	sl, #3
  415664:	d01b      	beq.n	41569e <__ssvfscanf_r+0x8a6>
  415666:	f1aa 0a04 	sub.w	sl, sl, #4
  41566a:	fa5f fa8a 	uxtb.w	sl, sl
  41566e:	f10b 34ff 	add.w	r4, fp, #4294967295
  415672:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  415676:	ebca 0404 	rsb	r4, sl, r4
  41567a:	46da      	mov	sl, fp
  41567c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  415680:	4630      	mov	r0, r6
  415682:	462a      	mov	r2, r5
  415684:	f005 f994 	bl	41a9b0 <_sungetc_r>
  415688:	45a2      	cmp	sl, r4
  41568a:	d1f7      	bne.n	41567c <__ssvfscanf_r+0x884>
  41568c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  415690:	f109 39ff 	add.w	r9, r9, #4294967295
  415694:	ea6f 020c 	mvn.w	r2, ip
  415698:	ebcc 0909 	rsb	r9, ip, r9
  41569c:	4493      	add	fp, r2
  41569e:	05f8      	lsls	r0, r7, #23
  4156a0:	d51c      	bpl.n	4156dc <__ssvfscanf_r+0x8e4>
  4156a2:	0579      	lsls	r1, r7, #21
  4156a4:	f100 829b 	bmi.w	415bde <__ssvfscanf_r+0xde6>
  4156a8:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  4156ac:	2965      	cmp	r1, #101	; 0x65
  4156ae:	f10b 34ff 	add.w	r4, fp, #4294967295
  4156b2:	f109 3aff 	add.w	sl, r9, #4294967295
  4156b6:	d00b      	beq.n	4156d0 <__ssvfscanf_r+0x8d8>
  4156b8:	2945      	cmp	r1, #69	; 0x45
  4156ba:	d009      	beq.n	4156d0 <__ssvfscanf_r+0x8d8>
  4156bc:	4630      	mov	r0, r6
  4156be:	462a      	mov	r2, r5
  4156c0:	f005 f976 	bl	41a9b0 <_sungetc_r>
  4156c4:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  4156c8:	f1a9 0a02 	sub.w	sl, r9, #2
  4156cc:	f1ab 0402 	sub.w	r4, fp, #2
  4156d0:	4630      	mov	r0, r6
  4156d2:	462a      	mov	r2, r5
  4156d4:	f005 f96c 	bl	41a9b0 <_sungetc_r>
  4156d8:	46d1      	mov	r9, sl
  4156da:	46a3      	mov	fp, r4
  4156dc:	f017 0210 	ands.w	r2, r7, #16
  4156e0:	f47f aec1 	bne.w	415466 <__ssvfscanf_r+0x66e>
  4156e4:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  4156e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  4156ec:	f88b 2000 	strb.w	r2, [fp]
  4156f0:	f000 81d3 	beq.w	415a9a <__ssvfscanf_r+0xca2>
  4156f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4156f6:	2c00      	cmp	r4, #0
  4156f8:	f040 816e 	bne.w	4159d8 <__ssvfscanf_r+0xbe0>
  4156fc:	2200      	movs	r2, #0
  4156fe:	9905      	ldr	r1, [sp, #20]
  415700:	4630      	mov	r0, r6
  415702:	f003 fe85 	bl	419410 <_strtod_r>
  415706:	07fa      	lsls	r2, r7, #31
  415708:	4682      	mov	sl, r0
  41570a:	468b      	mov	fp, r1
  41570c:	f100 8132 	bmi.w	415974 <__ssvfscanf_r+0xb7c>
  415710:	07bb      	lsls	r3, r7, #30
  415712:	f140 81e8 	bpl.w	415ae6 <__ssvfscanf_r+0xcee>
  415716:	f8dd c018 	ldr.w	ip, [sp, #24]
  41571a:	f8dc 3000 	ldr.w	r3, [ip]
  41571e:	f10c 0c04 	add.w	ip, ip, #4
  415722:	f8cd c018 	str.w	ip, [sp, #24]
  415726:	e9c3 ab00 	strd	sl, fp, [r3]
  41572a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41572c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415730:	3401      	adds	r4, #1
  415732:	940b      	str	r4, [sp, #44]	; 0x2c
  415734:	4652      	mov	r2, sl
  415736:	f7ff bba0 	b.w	414e7a <__ssvfscanf_r+0x82>
  41573a:	f1ba 0f02 	cmp.w	sl, #2
  41573e:	f47f af3a 	bne.w	4155b6 <__ssvfscanf_r+0x7be>
  415742:	f04f 0a03 	mov.w	sl, #3
  415746:	e724      	b.n	415592 <__ssvfscanf_r+0x79a>
  415748:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  41574c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  415750:	d005      	beq.n	41575e <__ssvfscanf_r+0x966>
  415752:	0579      	lsls	r1, r7, #21
  415754:	f57f af2f 	bpl.w	4155b6 <__ssvfscanf_r+0x7be>
  415758:	2e00      	cmp	r6, #0
  41575a:	f43f af71 	beq.w	415640 <__ssvfscanf_r+0x848>
  41575e:	05b9      	lsls	r1, r7, #22
  415760:	d406      	bmi.n	415770 <__ssvfscanf_r+0x978>
  415762:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  415766:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  41576a:	ebcc 0606 	rsb	r6, ip, r6
  41576e:	9610      	str	r6, [sp, #64]	; 0x40
  415770:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  415774:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  415778:	2600      	movs	r6, #0
  41577a:	e70a      	b.n	415592 <__ssvfscanf_r+0x79a>
  41577c:	2b01      	cmp	r3, #1
  41577e:	f47f af1a 	bne.w	4155b6 <__ssvfscanf_r+0x7be>
  415782:	2302      	movs	r3, #2
  415784:	e705      	b.n	415592 <__ssvfscanf_r+0x79a>
  415786:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  41578a:	f89c 1000 	ldrb.w	r1, [ip]
  41578e:	4291      	cmp	r1, r2
  415790:	f47f af11 	bne.w	4155b6 <__ssvfscanf_r+0x7be>
  415794:	05b9      	lsls	r1, r7, #22
  415796:	f57f af0e 	bpl.w	4155b6 <__ssvfscanf_r+0x7be>
  41579a:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  41579e:	960a      	str	r6, [sp, #40]	; 0x28
  4157a0:	e6f7      	b.n	415592 <__ssvfscanf_r+0x79a>
  4157a2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4157a4:	9303      	str	r3, [sp, #12]
  4157a6:	4629      	mov	r1, r5
  4157a8:	f005 f942 	bl	41aa30 <__ssrefill_r>
  4157ac:	9b03      	ldr	r3, [sp, #12]
  4157ae:	2800      	cmp	r0, #0
  4157b0:	f47f af01 	bne.w	4155b6 <__ssvfscanf_r+0x7be>
  4157b4:	2c00      	cmp	r4, #0
  4157b6:	f47f ae89 	bne.w	4154cc <__ssvfscanf_r+0x6d4>
  4157ba:	e6fc      	b.n	4155b6 <__ssvfscanf_r+0x7be>
  4157bc:	f1ba 0f03 	cmp.w	sl, #3
  4157c0:	f43f af2c 	beq.w	41561c <__ssvfscanf_r+0x824>
  4157c4:	f1ba 0f05 	cmp.w	sl, #5
  4157c8:	f43f af28 	beq.w	41561c <__ssvfscanf_r+0x824>
  4157cc:	e6f3      	b.n	4155b6 <__ssvfscanf_r+0x7be>
  4157ce:	2b02      	cmp	r3, #2
  4157d0:	f47f af1e 	bne.w	415610 <__ssvfscanf_r+0x818>
  4157d4:	2303      	movs	r3, #3
  4157d6:	e6dc      	b.n	415592 <__ssvfscanf_r+0x79a>
  4157d8:	9608      	str	r6, [sp, #32]
  4157da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4157dc:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  4157e0:	e730      	b.n	415644 <__ssvfscanf_r+0x84c>
  4157e2:	2200      	movs	r2, #0
  4157e4:	920d      	str	r2, [sp, #52]	; 0x34
  4157e6:	e65d      	b.n	4154a4 <__ssvfscanf_r+0x6ac>
  4157e8:	f8dd c018 	ldr.w	ip, [sp, #24]
  4157ec:	f8dc 7000 	ldr.w	r7, [ip]
  4157f0:	f10c 0204 	add.w	r2, ip, #4
  4157f4:	9206      	str	r2, [sp, #24]
  4157f6:	46ba      	mov	sl, r7
  4157f8:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  4157fc:	682b      	ldr	r3, [r5, #0]
  4157fe:	781a      	ldrb	r2, [r3, #0]
  415800:	f81b 2002 	ldrb.w	r2, [fp, r2]
  415804:	1c59      	adds	r1, r3, #1
  415806:	b1a2      	cbz	r2, 415832 <__ssvfscanf_r+0xa3a>
  415808:	686a      	ldr	r2, [r5, #4]
  41580a:	6029      	str	r1, [r5, #0]
  41580c:	3a01      	subs	r2, #1
  41580e:	606a      	str	r2, [r5, #4]
  415810:	781b      	ldrb	r3, [r3, #0]
  415812:	f80a 3b01 	strb.w	r3, [sl], #1
  415816:	3c01      	subs	r4, #1
  415818:	d00b      	beq.n	415832 <__ssvfscanf_r+0xa3a>
  41581a:	686b      	ldr	r3, [r5, #4]
  41581c:	2b00      	cmp	r3, #0
  41581e:	dced      	bgt.n	4157fc <__ssvfscanf_r+0xa04>
  415820:	4630      	mov	r0, r6
  415822:	4629      	mov	r1, r5
  415824:	f005 f904 	bl	41aa30 <__ssrefill_r>
  415828:	2800      	cmp	r0, #0
  41582a:	d0e7      	beq.n	4157fc <__ssvfscanf_r+0xa04>
  41582c:	4557      	cmp	r7, sl
  41582e:	f43f ad7b 	beq.w	415328 <__ssvfscanf_r+0x530>
  415832:	ebba 0707 	subs.w	r7, sl, r7
  415836:	f43f ab26 	beq.w	414e86 <__ssvfscanf_r+0x8e>
  41583a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41583c:	2300      	movs	r3, #0
  41583e:	3401      	adds	r4, #1
  415840:	f88a 3000 	strb.w	r3, [sl]
  415844:	940b      	str	r4, [sp, #44]	; 0x2c
  415846:	44b9      	add	r9, r7
  415848:	f8dd a01c 	ldr.w	sl, [sp, #28]
  41584c:	e4ae      	b.n	4151ac <__ssvfscanf_r+0x3b4>
  41584e:	f8dd c018 	ldr.w	ip, [sp, #24]
  415852:	f8dc 7000 	ldr.w	r7, [ip]
  415856:	f10c 0a04 	add.w	sl, ip, #4
  41585a:	46bb      	mov	fp, r7
  41585c:	682b      	ldr	r3, [r5, #0]
  41585e:	f8d8 2000 	ldr.w	r2, [r8]
  415862:	7819      	ldrb	r1, [r3, #0]
  415864:	440a      	add	r2, r1
  415866:	1c59      	adds	r1, r3, #1
  415868:	7852      	ldrb	r2, [r2, #1]
  41586a:	0710      	lsls	r0, r2, #28
  41586c:	d411      	bmi.n	415892 <__ssvfscanf_r+0xa9a>
  41586e:	686a      	ldr	r2, [r5, #4]
  415870:	6029      	str	r1, [r5, #0]
  415872:	3a01      	subs	r2, #1
  415874:	606a      	str	r2, [r5, #4]
  415876:	781b      	ldrb	r3, [r3, #0]
  415878:	f80b 3b01 	strb.w	r3, [fp], #1
  41587c:	3c01      	subs	r4, #1
  41587e:	d008      	beq.n	415892 <__ssvfscanf_r+0xa9a>
  415880:	686b      	ldr	r3, [r5, #4]
  415882:	2b00      	cmp	r3, #0
  415884:	dcea      	bgt.n	41585c <__ssvfscanf_r+0xa64>
  415886:	4630      	mov	r0, r6
  415888:	4629      	mov	r1, r5
  41588a:	f005 f8d1 	bl	41aa30 <__ssrefill_r>
  41588e:	2800      	cmp	r0, #0
  415890:	d0e4      	beq.n	41585c <__ssvfscanf_r+0xa64>
  415892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  415894:	f8cd a018 	str.w	sl, [sp, #24]
  415898:	f8dd a01c 	ldr.w	sl, [sp, #28]
  41589c:	ebc7 070b 	rsb	r7, r7, fp
  4158a0:	2300      	movs	r3, #0
  4158a2:	3401      	adds	r4, #1
  4158a4:	44b9      	add	r9, r7
  4158a6:	940b      	str	r4, [sp, #44]	; 0x2c
  4158a8:	f88b 3000 	strb.w	r3, [fp]
  4158ac:	4652      	mov	r2, sl
  4158ae:	f7ff bae4 	b.w	414e7a <__ssvfscanf_r+0x82>
  4158b2:	ab14      	add	r3, sp, #80	; 0x50
  4158b4:	4618      	mov	r0, r3
  4158b6:	2100      	movs	r1, #0
  4158b8:	2208      	movs	r2, #8
  4158ba:	930a      	str	r3, [sp, #40]	; 0x28
  4158bc:	f7fd fbee 	bl	41309c <memset>
  4158c0:	f017 0710 	ands.w	r7, r7, #16
  4158c4:	970d      	str	r7, [sp, #52]	; 0x34
  4158c6:	d06c      	beq.n	4159a2 <__ssvfscanf_r+0xbaa>
  4158c8:	f04f 0a00 	mov.w	sl, #0
  4158cc:	9608      	str	r6, [sp, #32]
  4158ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  4158d0:	f8cd 9014 	str.w	r9, [sp, #20]
  4158d4:	f04f 0b00 	mov.w	fp, #0
  4158d8:	af56      	add	r7, sp, #344	; 0x158
  4158da:	f002 fd53 	bl	418384 <__locale_mb_cur_max>
  4158de:	4558      	cmp	r0, fp
  4158e0:	f43f ad22 	beq.w	415328 <__ssvfscanf_r+0x530>
  4158e4:	682b      	ldr	r3, [r5, #0]
  4158e6:	6869      	ldr	r1, [r5, #4]
  4158e8:	f813 eb01 	ldrb.w	lr, [r3], #1
  4158ec:	980a      	ldr	r0, [sp, #40]	; 0x28
  4158ee:	602b      	str	r3, [r5, #0]
  4158f0:	3901      	subs	r1, #1
  4158f2:	f10b 0901 	add.w	r9, fp, #1
  4158f6:	9000      	str	r0, [sp, #0]
  4158f8:	464b      	mov	r3, r9
  4158fa:	6069      	str	r1, [r5, #4]
  4158fc:	9808      	ldr	r0, [sp, #32]
  4158fe:	f807 e00b 	strb.w	lr, [r7, fp]
  415902:	4651      	mov	r1, sl
  415904:	463a      	mov	r2, r7
  415906:	f002 fdcb 	bl	4184a0 <_mbrtowc_r>
  41590a:	1c43      	adds	r3, r0, #1
  41590c:	f43f ad0c 	beq.w	415328 <__ssvfscanf_r+0x530>
  415910:	2800      	cmp	r0, #0
  415912:	d177      	bne.n	415a04 <__ssvfscanf_r+0xc0c>
  415914:	b90e      	cbnz	r6, 41591a <__ssvfscanf_r+0xb22>
  415916:	f8ca 6000 	str.w	r6, [sl]
  41591a:	9905      	ldr	r1, [sp, #20]
  41591c:	4449      	add	r1, r9
  41591e:	9105      	str	r1, [sp, #20]
  415920:	3c01      	subs	r4, #1
  415922:	2e00      	cmp	r6, #0
  415924:	d172      	bne.n	415a0c <__ssvfscanf_r+0xc14>
  415926:	f10a 0a04 	add.w	sl, sl, #4
  41592a:	46b3      	mov	fp, r6
  41592c:	686b      	ldr	r3, [r5, #4]
  41592e:	2b00      	cmp	r3, #0
  415930:	dd2a      	ble.n	415988 <__ssvfscanf_r+0xb90>
  415932:	2c00      	cmp	r4, #0
  415934:	d1d1      	bne.n	4158da <__ssvfscanf_r+0xae2>
  415936:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41593a:	9e08      	ldr	r6, [sp, #32]
  41593c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  41593e:	2c00      	cmp	r4, #0
  415940:	f43f ad8e 	beq.w	415460 <__ssvfscanf_r+0x668>
  415944:	e58f      	b.n	415466 <__ssvfscanf_r+0x66e>
  415946:	4622      	mov	r2, r4
  415948:	f88a 4000 	strb.w	r4, [sl]
  41594c:	4630      	mov	r0, r6
  41594e:	9905      	ldr	r1, [sp, #20]
  415950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  415952:	9c09      	ldr	r4, [sp, #36]	; 0x24
  415954:	47a0      	blx	r4
  415956:	06ba      	lsls	r2, r7, #26
  415958:	d535      	bpl.n	4159c6 <__ssvfscanf_r+0xbce>
  41595a:	f8dd c018 	ldr.w	ip, [sp, #24]
  41595e:	f8dc 3000 	ldr.w	r3, [ip]
  415962:	f10c 0c04 	add.w	ip, ip, #4
  415966:	f8cd c018 	str.w	ip, [sp, #24]
  41596a:	6018      	str	r0, [r3, #0]
  41596c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41596e:	3401      	adds	r4, #1
  415970:	940b      	str	r4, [sp, #44]	; 0x2c
  415972:	e476      	b.n	415262 <__ssvfscanf_r+0x46a>
  415974:	9c06      	ldr	r4, [sp, #24]
  415976:	6823      	ldr	r3, [r4, #0]
  415978:	3404      	adds	r4, #4
  41597a:	9406      	str	r4, [sp, #24]
  41597c:	e9c3 ab00 	strd	sl, fp, [r3]
  415980:	e6d3      	b.n	41572a <__ssvfscanf_r+0x932>
  415982:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  415986:	e44b      	b.n	415220 <__ssvfscanf_r+0x428>
  415988:	9808      	ldr	r0, [sp, #32]
  41598a:	4629      	mov	r1, r5
  41598c:	f005 f850 	bl	41aa30 <__ssrefill_r>
  415990:	2800      	cmp	r0, #0
  415992:	d0ce      	beq.n	415932 <__ssvfscanf_r+0xb3a>
  415994:	f8dd 9014 	ldr.w	r9, [sp, #20]
  415998:	9e08      	ldr	r6, [sp, #32]
  41599a:	f1bb 0f00 	cmp.w	fp, #0
  41599e:	d0cd      	beq.n	41593c <__ssvfscanf_r+0xb44>
  4159a0:	e4c2      	b.n	415328 <__ssvfscanf_r+0x530>
  4159a2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4159a6:	f8dc a000 	ldr.w	sl, [ip]
  4159aa:	f10c 0c04 	add.w	ip, ip, #4
  4159ae:	f8cd c018 	str.w	ip, [sp, #24]
  4159b2:	e78b      	b.n	4158cc <__ssvfscanf_r+0xad4>
  4159b4:	f8dd c018 	ldr.w	ip, [sp, #24]
  4159b8:	f8dc a000 	ldr.w	sl, [ip]
  4159bc:	f10c 0c04 	add.w	ip, ip, #4
  4159c0:	f8cd c018 	str.w	ip, [sp, #24]
  4159c4:	e53b      	b.n	41543e <__ssvfscanf_r+0x646>
  4159c6:	077b      	lsls	r3, r7, #29
  4159c8:	f140 809b 	bpl.w	415b02 <__ssvfscanf_r+0xd0a>
  4159cc:	9c06      	ldr	r4, [sp, #24]
  4159ce:	6823      	ldr	r3, [r4, #0]
  4159d0:	3404      	adds	r4, #4
  4159d2:	9406      	str	r4, [sp, #24]
  4159d4:	8018      	strh	r0, [r3, #0]
  4159d6:	e7c9      	b.n	41596c <__ssvfscanf_r+0xb74>
  4159d8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  4159dc:	4630      	mov	r0, r6
  4159de:	f10c 0101 	add.w	r1, ip, #1
  4159e2:	230a      	movs	r3, #10
  4159e4:	f004 fcb4 	bl	41a350 <_strtol_r>
  4159e8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  4159ec:	1b02      	subs	r2, r0, r4
  4159ee:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  4159f2:	458b      	cmp	fp, r1
  4159f4:	bf28      	it	cs
  4159f6:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  4159fa:	4658      	mov	r0, fp
  4159fc:	499b      	ldr	r1, [pc, #620]	; (415c6c <__ssvfscanf_r+0xe74>)
  4159fe:	f7fd fc69 	bl	4132d4 <sprintf>
  415a02:	e67b      	b.n	4156fc <__ssvfscanf_r+0x904>
  415a04:	3002      	adds	r0, #2
  415a06:	d188      	bne.n	41591a <__ssvfscanf_r+0xb22>
  415a08:	46cb      	mov	fp, r9
  415a0a:	e78f      	b.n	41592c <__ssvfscanf_r+0xb34>
  415a0c:	f04f 0b00 	mov.w	fp, #0
  415a10:	e78c      	b.n	41592c <__ssvfscanf_r+0xb34>
  415a12:	2f00      	cmp	r7, #0
  415a14:	f43f ac88 	beq.w	415328 <__ssvfscanf_r+0x530>
  415a18:	44b9      	add	r9, r7
  415a1a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415a1e:	f7ff bbc5 	b.w	4151ac <__ssvfscanf_r+0x3b4>
  415a22:	f8dd c018 	ldr.w	ip, [sp, #24]
  415a26:	4623      	mov	r3, r4
  415a28:	f8dc 1000 	ldr.w	r1, [ip]
  415a2c:	9500      	str	r5, [sp, #0]
  415a2e:	4630      	mov	r0, r6
  415a30:	2201      	movs	r2, #1
  415a32:	f005 f81b 	bl	41aa6c <_sfread_r>
  415a36:	9c06      	ldr	r4, [sp, #24]
  415a38:	1d23      	adds	r3, r4, #4
  415a3a:	2800      	cmp	r0, #0
  415a3c:	f43f ac74 	beq.w	415328 <__ssvfscanf_r+0x530>
  415a40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  415a42:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415a46:	9306      	str	r3, [sp, #24]
  415a48:	3401      	adds	r4, #1
  415a4a:	4481      	add	r9, r0
  415a4c:	940b      	str	r4, [sp, #44]	; 0x2c
  415a4e:	4652      	mov	r2, sl
  415a50:	f7ff ba13 	b.w	414e7a <__ssvfscanf_r+0x82>
  415a54:	4630      	mov	r0, r6
  415a56:	4629      	mov	r1, r5
  415a58:	f004 ffea 	bl	41aa30 <__ssrefill_r>
  415a5c:	2800      	cmp	r0, #0
  415a5e:	f43f aaa2 	beq.w	414fa6 <__ssvfscanf_r+0x1ae>
  415a62:	e461      	b.n	415328 <__ssvfscanf_r+0x530>
  415a64:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  415a68:	4630      	mov	r0, r6
  415a6a:	462a      	mov	r2, r5
  415a6c:	f004 ffa0 	bl	41a9b0 <_sungetc_r>
  415a70:	f10a 3aff 	add.w	sl, sl, #4294967295
  415a74:	f7ff bbec 	b.w	415250 <__ssvfscanf_r+0x458>
  415a78:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  415a7c:	f04f 0a01 	mov.w	sl, #1
  415a80:	e587      	b.n	415592 <__ssvfscanf_r+0x79a>
  415a82:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  415a86:	2301      	movs	r3, #1
  415a88:	e583      	b.n	415592 <__ssvfscanf_r+0x79a>
  415a8a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  415a8e:	f047 0702 	orr.w	r7, r7, #2
  415a92:	f10a 0a02 	add.w	sl, sl, #2
  415a96:	f7ff ba00 	b.w	414e9a <__ssvfscanf_r+0xa2>
  415a9a:	9b08      	ldr	r3, [sp, #32]
  415a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  415a9e:	1b19      	subs	r1, r3, r4
  415aa0:	424a      	negs	r2, r1
  415aa2:	2900      	cmp	r1, #0
  415aa4:	d1a3      	bne.n	4159ee <__ssvfscanf_r+0xbf6>
  415aa6:	e629      	b.n	4156fc <__ssvfscanf_r+0x904>
  415aa8:	07fc      	lsls	r4, r7, #31
  415aaa:	d40e      	bmi.n	415aca <__ssvfscanf_r+0xcd2>
  415aac:	07b8      	lsls	r0, r7, #30
  415aae:	d50c      	bpl.n	415aca <__ssvfscanf_r+0xcd2>
  415ab0:	9c06      	ldr	r4, [sp, #24]
  415ab2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415ab6:	6821      	ldr	r1, [r4, #0]
  415ab8:	464a      	mov	r2, r9
  415aba:	ea4f 73e9 	mov.w	r3, r9, asr #31
  415abe:	3404      	adds	r4, #4
  415ac0:	9406      	str	r4, [sp, #24]
  415ac2:	e9c1 2300 	strd	r2, r3, [r1]
  415ac6:	f7ff b9d7 	b.w	414e78 <__ssvfscanf_r+0x80>
  415aca:	f8dd c018 	ldr.w	ip, [sp, #24]
  415ace:	f8dd a01c 	ldr.w	sl, [sp, #28]
  415ad2:	f8dc 3000 	ldr.w	r3, [ip]
  415ad6:	f10c 0c04 	add.w	ip, ip, #4
  415ada:	f8c3 9000 	str.w	r9, [r3]
  415ade:	f8cd c018 	str.w	ip, [sp, #24]
  415ae2:	f7ff b9c9 	b.w	414e78 <__ssvfscanf_r+0x80>
  415ae6:	9c06      	ldr	r4, [sp, #24]
  415ae8:	1d27      	adds	r7, r4, #4
  415aea:	6824      	ldr	r4, [r4, #0]
  415aec:	f003 fc0a 	bl	419304 <__fpclassifyd>
  415af0:	2800      	cmp	r0, #0
  415af2:	d056      	beq.n	415ba2 <__ssvfscanf_r+0xdaa>
  415af4:	4650      	mov	r0, sl
  415af6:	4659      	mov	r1, fp
  415af8:	f006 f9fc 	bl	41bef4 <__aeabi_d2f>
  415afc:	9706      	str	r7, [sp, #24]
  415afe:	6020      	str	r0, [r4, #0]
  415b00:	e613      	b.n	41572a <__ssvfscanf_r+0x932>
  415b02:	f017 0201 	ands.w	r2, r7, #1
  415b06:	f47f af28 	bne.w	41595a <__ssvfscanf_r+0xb62>
  415b0a:	07bc      	lsls	r4, r7, #30
  415b0c:	f140 8097 	bpl.w	415c3e <__ssvfscanf_r+0xe46>
  415b10:	4b57      	ldr	r3, [pc, #348]	; (415c70 <__ssvfscanf_r+0xe78>)
  415b12:	9c09      	ldr	r4, [sp, #36]	; 0x24
  415b14:	9905      	ldr	r1, [sp, #20]
  415b16:	429c      	cmp	r4, r3
  415b18:	4630      	mov	r0, r6
  415b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  415b1c:	f000 80a2 	beq.w	415c64 <__ssvfscanf_r+0xe6c>
  415b20:	f004 fca0 	bl	41a464 <_strtoll_r>
  415b24:	f8dd c018 	ldr.w	ip, [sp, #24]
  415b28:	f8dc 3000 	ldr.w	r3, [ip]
  415b2c:	f10c 0c04 	add.w	ip, ip, #4
  415b30:	f8cd c018 	str.w	ip, [sp, #24]
  415b34:	e9c3 0100 	strd	r0, r1, [r3]
  415b38:	e718      	b.n	41596c <__ssvfscanf_r+0xb74>
  415b3a:	9204      	str	r2, [sp, #16]
  415b3c:	f002 fc22 	bl	418384 <__locale_mb_cur_max>
  415b40:	9a04      	ldr	r2, [sp, #16]
  415b42:	4290      	cmp	r0, r2
  415b44:	f43f abf0 	beq.w	415328 <__ssvfscanf_r+0x530>
  415b48:	682b      	ldr	r3, [r5, #0]
  415b4a:	6869      	ldr	r1, [r5, #4]
  415b4c:	f813 eb01 	ldrb.w	lr, [r3], #1
  415b50:	980a      	ldr	r0, [sp, #40]	; 0x28
  415b52:	602b      	str	r3, [r5, #0]
  415b54:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  415b58:	1c57      	adds	r7, r2, #1
  415b5a:	3901      	subs	r1, #1
  415b5c:	9000      	str	r0, [sp, #0]
  415b5e:	463b      	mov	r3, r7
  415b60:	6069      	str	r1, [r5, #4]
  415b62:	f80c e002 	strb.w	lr, [ip, r2]
  415b66:	4630      	mov	r0, r6
  415b68:	4651      	mov	r1, sl
  415b6a:	4662      	mov	r2, ip
  415b6c:	f002 fc98 	bl	4184a0 <_mbrtowc_r>
  415b70:	1c43      	adds	r3, r0, #1
  415b72:	f43f abd9 	beq.w	415328 <__ssvfscanf_r+0x530>
  415b76:	b9c8      	cbnz	r0, 415bac <__ssvfscanf_r+0xdb4>
  415b78:	f8ca 0000 	str.w	r0, [sl]
  415b7c:	f002 fbf0 	bl	418360 <iswspace>
  415b80:	2800      	cmp	r0, #0
  415b82:	d053      	beq.n	415c2c <__ssvfscanf_r+0xe34>
  415b84:	2f00      	cmp	r7, #0
  415b86:	f43f ac66 	beq.w	415456 <__ssvfscanf_r+0x65e>
  415b8a:	ac56      	add	r4, sp, #344	; 0x158
  415b8c:	443c      	add	r4, r7
  415b8e:	3f01      	subs	r7, #1
  415b90:	4630      	mov	r0, r6
  415b92:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  415b96:	462a      	mov	r2, r5
  415b98:	f004 ff0a 	bl	41a9b0 <_sungetc_r>
  415b9c:	2f00      	cmp	r7, #0
  415b9e:	d1f6      	bne.n	415b8e <__ssvfscanf_r+0xd96>
  415ba0:	e459      	b.n	415456 <__ssvfscanf_r+0x65e>
  415ba2:	f003 fc0f 	bl	4193c4 <nanf>
  415ba6:	9706      	str	r7, [sp, #24]
  415ba8:	6020      	str	r0, [r4, #0]
  415baa:	e5be      	b.n	41572a <__ssvfscanf_r+0x932>
  415bac:	3002      	adds	r0, #2
  415bae:	d128      	bne.n	415c02 <__ssvfscanf_r+0xe0a>
  415bb0:	686b      	ldr	r3, [r5, #4]
  415bb2:	2b00      	cmp	r3, #0
  415bb4:	dd4b      	ble.n	415c4e <__ssvfscanf_r+0xe56>
  415bb6:	463a      	mov	r2, r7
  415bb8:	e442      	b.n	415440 <__ssvfscanf_r+0x648>
  415bba:	9c05      	ldr	r4, [sp, #20]
  415bbc:	45a3      	cmp	fp, r4
  415bbe:	bf88      	it	hi
  415bc0:	465c      	movhi	r4, fp
  415bc2:	f67f a960 	bls.w	414e86 <__ssvfscanf_r+0x8e>
  415bc6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  415bca:	980e      	ldr	r0, [sp, #56]	; 0x38
  415bcc:	462a      	mov	r2, r5
  415bce:	f004 feef 	bl	41a9b0 <_sungetc_r>
  415bd2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  415bd6:	454c      	cmp	r4, r9
  415bd8:	d1f5      	bne.n	415bc6 <__ssvfscanf_r+0xdce>
  415bda:	f7ff b954 	b.w	414e86 <__ssvfscanf_r+0x8e>
  415bde:	f8dd c014 	ldr.w	ip, [sp, #20]
  415be2:	45e3      	cmp	fp, ip
  415be4:	f67f a94f 	bls.w	414e86 <__ssvfscanf_r+0x8e>
  415be8:	465c      	mov	r4, fp
  415bea:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  415bee:	980e      	ldr	r0, [sp, #56]	; 0x38
  415bf0:	462a      	mov	r2, r5
  415bf2:	f004 fedd 	bl	41a9b0 <_sungetc_r>
  415bf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  415bfa:	454c      	cmp	r4, r9
  415bfc:	d1f5      	bne.n	415bea <__ssvfscanf_r+0xdf2>
  415bfe:	f7ff b942 	b.w	414e86 <__ssvfscanf_r+0x8e>
  415c02:	f8da 0000 	ldr.w	r0, [sl]
  415c06:	e7b9      	b.n	415b7c <__ssvfscanf_r+0xd84>
  415c08:	f8dd 9014 	ldr.w	r9, [sp, #20]
  415c0c:	45cb      	cmp	fp, r9
  415c0e:	f67f a93a 	bls.w	414e86 <__ssvfscanf_r+0x8e>
  415c12:	465c      	mov	r4, fp
  415c14:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  415c18:	980e      	ldr	r0, [sp, #56]	; 0x38
  415c1a:	462a      	mov	r2, r5
  415c1c:	f004 fec8 	bl	41a9b0 <_sungetc_r>
  415c20:	f8dd c014 	ldr.w	ip, [sp, #20]
  415c24:	4564      	cmp	r4, ip
  415c26:	d1f5      	bne.n	415c14 <__ssvfscanf_r+0xe1c>
  415c28:	f7ff b92d 	b.w	414e86 <__ssvfscanf_r+0x8e>
  415c2c:	44b9      	add	r9, r7
  415c2e:	3c01      	subs	r4, #1
  415c30:	f1bb 0f00 	cmp.w	fp, #0
  415c34:	d109      	bne.n	415c4a <__ssvfscanf_r+0xe52>
  415c36:	f10a 0a04 	add.w	sl, sl, #4
  415c3a:	465f      	mov	r7, fp
  415c3c:	e7b8      	b.n	415bb0 <__ssvfscanf_r+0xdb8>
  415c3e:	9c06      	ldr	r4, [sp, #24]
  415c40:	6823      	ldr	r3, [r4, #0]
  415c42:	3404      	adds	r4, #4
  415c44:	9406      	str	r4, [sp, #24]
  415c46:	6018      	str	r0, [r3, #0]
  415c48:	e690      	b.n	41596c <__ssvfscanf_r+0xb74>
  415c4a:	4607      	mov	r7, r0
  415c4c:	e7b0      	b.n	415bb0 <__ssvfscanf_r+0xdb8>
  415c4e:	4630      	mov	r0, r6
  415c50:	4629      	mov	r1, r5
  415c52:	f004 feed 	bl	41aa30 <__ssrefill_r>
  415c56:	2800      	cmp	r0, #0
  415c58:	d0ad      	beq.n	415bb6 <__ssvfscanf_r+0xdbe>
  415c5a:	2f00      	cmp	r7, #0
  415c5c:	f47f ab64 	bne.w	415328 <__ssvfscanf_r+0x530>
  415c60:	f7ff bbf9 	b.w	415456 <__ssvfscanf_r+0x65e>
  415c64:	f004 fd5c 	bl	41a720 <_strtoull_r>
  415c68:	e75c      	b.n	415b24 <__ssvfscanf_r+0xd2c>
  415c6a:	bf00      	nop
  415c6c:	0041de1c 	.word	0x0041de1c
  415c70:	0041a601 	.word	0x0041a601

00415c74 <__sprint_r.part.0>:
  415c74:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  415c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  415c7a:	049c      	lsls	r4, r3, #18
  415c7c:	460e      	mov	r6, r1
  415c7e:	4680      	mov	r8, r0
  415c80:	4691      	mov	r9, r2
  415c82:	d52a      	bpl.n	415cda <__sprint_r.part.0+0x66>
  415c84:	6893      	ldr	r3, [r2, #8]
  415c86:	6812      	ldr	r2, [r2, #0]
  415c88:	f102 0a08 	add.w	sl, r2, #8
  415c8c:	b31b      	cbz	r3, 415cd6 <__sprint_r.part.0+0x62>
  415c8e:	e91a 00a0 	ldmdb	sl, {r5, r7}
  415c92:	08bf      	lsrs	r7, r7, #2
  415c94:	d017      	beq.n	415cc6 <__sprint_r.part.0+0x52>
  415c96:	3d04      	subs	r5, #4
  415c98:	2400      	movs	r4, #0
  415c9a:	e001      	b.n	415ca0 <__sprint_r.part.0+0x2c>
  415c9c:	42a7      	cmp	r7, r4
  415c9e:	d010      	beq.n	415cc2 <__sprint_r.part.0+0x4e>
  415ca0:	4640      	mov	r0, r8
  415ca2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  415ca6:	4632      	mov	r2, r6
  415ca8:	f002 f82e 	bl	417d08 <_fputwc_r>
  415cac:	1c43      	adds	r3, r0, #1
  415cae:	f104 0401 	add.w	r4, r4, #1
  415cb2:	d1f3      	bne.n	415c9c <__sprint_r.part.0+0x28>
  415cb4:	2300      	movs	r3, #0
  415cb6:	f8c9 3008 	str.w	r3, [r9, #8]
  415cba:	f8c9 3004 	str.w	r3, [r9, #4]
  415cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  415cc2:	f8d9 3008 	ldr.w	r3, [r9, #8]
  415cc6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  415cca:	f8c9 3008 	str.w	r3, [r9, #8]
  415cce:	f10a 0a08 	add.w	sl, sl, #8
  415cd2:	2b00      	cmp	r3, #0
  415cd4:	d1db      	bne.n	415c8e <__sprint_r.part.0+0x1a>
  415cd6:	2000      	movs	r0, #0
  415cd8:	e7ec      	b.n	415cb4 <__sprint_r.part.0+0x40>
  415cda:	f002 f98f 	bl	417ffc <__sfvwrite_r>
  415cde:	2300      	movs	r3, #0
  415ce0:	f8c9 3008 	str.w	r3, [r9, #8]
  415ce4:	f8c9 3004 	str.w	r3, [r9, #4]
  415ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00415cec <_vfiprintf_r>:
  415cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415cf0:	b0b1      	sub	sp, #196	; 0xc4
  415cf2:	461c      	mov	r4, r3
  415cf4:	9102      	str	r1, [sp, #8]
  415cf6:	4690      	mov	r8, r2
  415cf8:	9308      	str	r3, [sp, #32]
  415cfa:	9006      	str	r0, [sp, #24]
  415cfc:	b118      	cbz	r0, 415d06 <_vfiprintf_r+0x1a>
  415cfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  415d00:	2b00      	cmp	r3, #0
  415d02:	f000 80e8 	beq.w	415ed6 <_vfiprintf_r+0x1ea>
  415d06:	9d02      	ldr	r5, [sp, #8]
  415d08:	89ab      	ldrh	r3, [r5, #12]
  415d0a:	b29a      	uxth	r2, r3
  415d0c:	0490      	lsls	r0, r2, #18
  415d0e:	d407      	bmi.n	415d20 <_vfiprintf_r+0x34>
  415d10:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  415d12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  415d16:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  415d1a:	81ab      	strh	r3, [r5, #12]
  415d1c:	b29a      	uxth	r2, r3
  415d1e:	6669      	str	r1, [r5, #100]	; 0x64
  415d20:	0711      	lsls	r1, r2, #28
  415d22:	f140 80b7 	bpl.w	415e94 <_vfiprintf_r+0x1a8>
  415d26:	f8dd b008 	ldr.w	fp, [sp, #8]
  415d2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  415d2e:	2b00      	cmp	r3, #0
  415d30:	f000 80b0 	beq.w	415e94 <_vfiprintf_r+0x1a8>
  415d34:	f002 021a 	and.w	r2, r2, #26
  415d38:	2a0a      	cmp	r2, #10
  415d3a:	f000 80b7 	beq.w	415eac <_vfiprintf_r+0x1c0>
  415d3e:	2300      	movs	r3, #0
  415d40:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  415d44:	930a      	str	r3, [sp, #40]	; 0x28
  415d46:	9315      	str	r3, [sp, #84]	; 0x54
  415d48:	9314      	str	r3, [sp, #80]	; 0x50
  415d4a:	9309      	str	r3, [sp, #36]	; 0x24
  415d4c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  415d50:	464e      	mov	r6, r9
  415d52:	f898 3000 	ldrb.w	r3, [r8]
  415d56:	2b00      	cmp	r3, #0
  415d58:	f000 84c4 	beq.w	4166e4 <_vfiprintf_r+0x9f8>
  415d5c:	2b25      	cmp	r3, #37	; 0x25
  415d5e:	f000 84c1 	beq.w	4166e4 <_vfiprintf_r+0x9f8>
  415d62:	f108 0201 	add.w	r2, r8, #1
  415d66:	e001      	b.n	415d6c <_vfiprintf_r+0x80>
  415d68:	2b25      	cmp	r3, #37	; 0x25
  415d6a:	d004      	beq.n	415d76 <_vfiprintf_r+0x8a>
  415d6c:	4614      	mov	r4, r2
  415d6e:	3201      	adds	r2, #1
  415d70:	7823      	ldrb	r3, [r4, #0]
  415d72:	2b00      	cmp	r3, #0
  415d74:	d1f8      	bne.n	415d68 <_vfiprintf_r+0x7c>
  415d76:	ebc8 0504 	rsb	r5, r8, r4
  415d7a:	b195      	cbz	r5, 415da2 <_vfiprintf_r+0xb6>
  415d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  415d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  415d80:	f8c6 8000 	str.w	r8, [r6]
  415d84:	3301      	adds	r3, #1
  415d86:	442a      	add	r2, r5
  415d88:	2b07      	cmp	r3, #7
  415d8a:	6075      	str	r5, [r6, #4]
  415d8c:	9215      	str	r2, [sp, #84]	; 0x54
  415d8e:	9314      	str	r3, [sp, #80]	; 0x50
  415d90:	dd7b      	ble.n	415e8a <_vfiprintf_r+0x19e>
  415d92:	2a00      	cmp	r2, #0
  415d94:	f040 84d4 	bne.w	416740 <_vfiprintf_r+0xa54>
  415d98:	9809      	ldr	r0, [sp, #36]	; 0x24
  415d9a:	9214      	str	r2, [sp, #80]	; 0x50
  415d9c:	4428      	add	r0, r5
  415d9e:	464e      	mov	r6, r9
  415da0:	9009      	str	r0, [sp, #36]	; 0x24
  415da2:	7823      	ldrb	r3, [r4, #0]
  415da4:	2b00      	cmp	r3, #0
  415da6:	f000 83e9 	beq.w	41657c <_vfiprintf_r+0x890>
  415daa:	2100      	movs	r1, #0
  415dac:	f04f 0200 	mov.w	r2, #0
  415db0:	f04f 3cff 	mov.w	ip, #4294967295
  415db4:	7863      	ldrb	r3, [r4, #1]
  415db6:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  415dba:	9104      	str	r1, [sp, #16]
  415dbc:	468a      	mov	sl, r1
  415dbe:	f104 0801 	add.w	r8, r4, #1
  415dc2:	4608      	mov	r0, r1
  415dc4:	4665      	mov	r5, ip
  415dc6:	f108 0801 	add.w	r8, r8, #1
  415dca:	f1a3 0220 	sub.w	r2, r3, #32
  415dce:	2a58      	cmp	r2, #88	; 0x58
  415dd0:	f200 82d5 	bhi.w	41637e <_vfiprintf_r+0x692>
  415dd4:	e8df f012 	tbh	[pc, r2, lsl #1]
  415dd8:	02d302c7 	.word	0x02d302c7
  415ddc:	02ce02d3 	.word	0x02ce02d3
  415de0:	02d302d3 	.word	0x02d302d3
  415de4:	02d302d3 	.word	0x02d302d3
  415de8:	02d302d3 	.word	0x02d302d3
  415dec:	028b027e 	.word	0x028b027e
  415df0:	008402d3 	.word	0x008402d3
  415df4:	02d3028f 	.word	0x02d3028f
  415df8:	0194012b 	.word	0x0194012b
  415dfc:	01940194 	.word	0x01940194
  415e00:	01940194 	.word	0x01940194
  415e04:	01940194 	.word	0x01940194
  415e08:	01940194 	.word	0x01940194
  415e0c:	02d302d3 	.word	0x02d302d3
  415e10:	02d302d3 	.word	0x02d302d3
  415e14:	02d302d3 	.word	0x02d302d3
  415e18:	02d302d3 	.word	0x02d302d3
  415e1c:	02d302d3 	.word	0x02d302d3
  415e20:	02d30130 	.word	0x02d30130
  415e24:	02d302d3 	.word	0x02d302d3
  415e28:	02d302d3 	.word	0x02d302d3
  415e2c:	02d302d3 	.word	0x02d302d3
  415e30:	02d302d3 	.word	0x02d302d3
  415e34:	017902d3 	.word	0x017902d3
  415e38:	02d302d3 	.word	0x02d302d3
  415e3c:	02d302d3 	.word	0x02d302d3
  415e40:	01a202d3 	.word	0x01a202d3
  415e44:	02d302d3 	.word	0x02d302d3
  415e48:	02d301bd 	.word	0x02d301bd
  415e4c:	02d302d3 	.word	0x02d302d3
  415e50:	02d302d3 	.word	0x02d302d3
  415e54:	02d302d3 	.word	0x02d302d3
  415e58:	02d302d3 	.word	0x02d302d3
  415e5c:	01e202d3 	.word	0x01e202d3
  415e60:	02d301f8 	.word	0x02d301f8
  415e64:	02d302d3 	.word	0x02d302d3
  415e68:	01f80214 	.word	0x01f80214
  415e6c:	02d302d3 	.word	0x02d302d3
  415e70:	02d30219 	.word	0x02d30219
  415e74:	00890226 	.word	0x00890226
  415e78:	02790264 	.word	0x02790264
  415e7c:	023802d3 	.word	0x023802d3
  415e80:	011902d3 	.word	0x011902d3
  415e84:	02d302d3 	.word	0x02d302d3
  415e88:	02ab      	.short	0x02ab
  415e8a:	3608      	adds	r6, #8
  415e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
  415e8e:	4428      	add	r0, r5
  415e90:	9009      	str	r0, [sp, #36]	; 0x24
  415e92:	e786      	b.n	415da2 <_vfiprintf_r+0xb6>
  415e94:	9806      	ldr	r0, [sp, #24]
  415e96:	9902      	ldr	r1, [sp, #8]
  415e98:	f000 fda2 	bl	4169e0 <__swsetup_r>
  415e9c:	b9b0      	cbnz	r0, 415ecc <_vfiprintf_r+0x1e0>
  415e9e:	9d02      	ldr	r5, [sp, #8]
  415ea0:	89aa      	ldrh	r2, [r5, #12]
  415ea2:	f002 021a 	and.w	r2, r2, #26
  415ea6:	2a0a      	cmp	r2, #10
  415ea8:	f47f af49 	bne.w	415d3e <_vfiprintf_r+0x52>
  415eac:	f8dd b008 	ldr.w	fp, [sp, #8]
  415eb0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  415eb4:	2b00      	cmp	r3, #0
  415eb6:	f6ff af42 	blt.w	415d3e <_vfiprintf_r+0x52>
  415eba:	9806      	ldr	r0, [sp, #24]
  415ebc:	4659      	mov	r1, fp
  415ebe:	4642      	mov	r2, r8
  415ec0:	4623      	mov	r3, r4
  415ec2:	f000 fd3d 	bl	416940 <__sbprintf>
  415ec6:	b031      	add	sp, #196	; 0xc4
  415ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415ecc:	f04f 30ff 	mov.w	r0, #4294967295
  415ed0:	b031      	add	sp, #196	; 0xc4
  415ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415ed6:	f001 fe81 	bl	417bdc <__sinit>
  415eda:	e714      	b.n	415d06 <_vfiprintf_r+0x1a>
  415edc:	4240      	negs	r0, r0
  415ede:	9308      	str	r3, [sp, #32]
  415ee0:	f04a 0a04 	orr.w	sl, sl, #4
  415ee4:	f898 3000 	ldrb.w	r3, [r8]
  415ee8:	e76d      	b.n	415dc6 <_vfiprintf_r+0xda>
  415eea:	f01a 0320 	ands.w	r3, sl, #32
  415eee:	9004      	str	r0, [sp, #16]
  415ef0:	46ac      	mov	ip, r5
  415ef2:	f000 80f2 	beq.w	4160da <_vfiprintf_r+0x3ee>
  415ef6:	f8dd b020 	ldr.w	fp, [sp, #32]
  415efa:	f10b 0307 	add.w	r3, fp, #7
  415efe:	f023 0307 	bic.w	r3, r3, #7
  415f02:	f103 0408 	add.w	r4, r3, #8
  415f06:	9408      	str	r4, [sp, #32]
  415f08:	e9d3 4500 	ldrd	r4, r5, [r3]
  415f0c:	2300      	movs	r3, #0
  415f0e:	f04f 0000 	mov.w	r0, #0
  415f12:	2100      	movs	r1, #0
  415f14:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  415f18:	f8cd c014 	str.w	ip, [sp, #20]
  415f1c:	9107      	str	r1, [sp, #28]
  415f1e:	f1bc 0f00 	cmp.w	ip, #0
  415f22:	bfa8      	it	ge
  415f24:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  415f28:	ea54 0205 	orrs.w	r2, r4, r5
  415f2c:	f040 80ad 	bne.w	41608a <_vfiprintf_r+0x39e>
  415f30:	f1bc 0f00 	cmp.w	ip, #0
  415f34:	f040 80a9 	bne.w	41608a <_vfiprintf_r+0x39e>
  415f38:	2b00      	cmp	r3, #0
  415f3a:	f040 83bc 	bne.w	4166b6 <_vfiprintf_r+0x9ca>
  415f3e:	f01a 0f01 	tst.w	sl, #1
  415f42:	f000 83b8 	beq.w	4166b6 <_vfiprintf_r+0x9ca>
  415f46:	af30      	add	r7, sp, #192	; 0xc0
  415f48:	2330      	movs	r3, #48	; 0x30
  415f4a:	f807 3d41 	strb.w	r3, [r7, #-65]!
  415f4e:	ebc7 0409 	rsb	r4, r7, r9
  415f52:	9405      	str	r4, [sp, #20]
  415f54:	f8dd b014 	ldr.w	fp, [sp, #20]
  415f58:	9c07      	ldr	r4, [sp, #28]
  415f5a:	45e3      	cmp	fp, ip
  415f5c:	bfb8      	it	lt
  415f5e:	46e3      	movlt	fp, ip
  415f60:	f8cd b00c 	str.w	fp, [sp, #12]
  415f64:	b11c      	cbz	r4, 415f6e <_vfiprintf_r+0x282>
  415f66:	f10b 0b01 	add.w	fp, fp, #1
  415f6a:	f8cd b00c 	str.w	fp, [sp, #12]
  415f6e:	f01a 0502 	ands.w	r5, sl, #2
  415f72:	9507      	str	r5, [sp, #28]
  415f74:	d005      	beq.n	415f82 <_vfiprintf_r+0x296>
  415f76:	f8dd b00c 	ldr.w	fp, [sp, #12]
  415f7a:	f10b 0b02 	add.w	fp, fp, #2
  415f7e:	f8cd b00c 	str.w	fp, [sp, #12]
  415f82:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  415f86:	930b      	str	r3, [sp, #44]	; 0x2c
  415f88:	f040 8217 	bne.w	4163ba <_vfiprintf_r+0x6ce>
  415f8c:	9d04      	ldr	r5, [sp, #16]
  415f8e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  415f92:	ebcb 0405 	rsb	r4, fp, r5
  415f96:	2c00      	cmp	r4, #0
  415f98:	f340 820f 	ble.w	4163ba <_vfiprintf_r+0x6ce>
  415f9c:	2c10      	cmp	r4, #16
  415f9e:	f340 8488 	ble.w	4168b2 <_vfiprintf_r+0xbc6>
  415fa2:	4dbd      	ldr	r5, [pc, #756]	; (416298 <_vfiprintf_r+0x5ac>)
  415fa4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  415fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
  415fa8:	462b      	mov	r3, r5
  415faa:	f04f 0b10 	mov.w	fp, #16
  415fae:	4625      	mov	r5, r4
  415fb0:	4664      	mov	r4, ip
  415fb2:	46b4      	mov	ip, r6
  415fb4:	461e      	mov	r6, r3
  415fb6:	e006      	b.n	415fc6 <_vfiprintf_r+0x2da>
  415fb8:	1c83      	adds	r3, r0, #2
  415fba:	f10c 0c08 	add.w	ip, ip, #8
  415fbe:	4608      	mov	r0, r1
  415fc0:	3d10      	subs	r5, #16
  415fc2:	2d10      	cmp	r5, #16
  415fc4:	dd11      	ble.n	415fea <_vfiprintf_r+0x2fe>
  415fc6:	1c41      	adds	r1, r0, #1
  415fc8:	3210      	adds	r2, #16
  415fca:	2907      	cmp	r1, #7
  415fcc:	9215      	str	r2, [sp, #84]	; 0x54
  415fce:	e88c 0840 	stmia.w	ip, {r6, fp}
  415fd2:	9114      	str	r1, [sp, #80]	; 0x50
  415fd4:	ddf0      	ble.n	415fb8 <_vfiprintf_r+0x2cc>
  415fd6:	2a00      	cmp	r2, #0
  415fd8:	f040 81e2 	bne.w	4163a0 <_vfiprintf_r+0x6b4>
  415fdc:	3d10      	subs	r5, #16
  415fde:	2d10      	cmp	r5, #16
  415fe0:	f04f 0301 	mov.w	r3, #1
  415fe4:	4610      	mov	r0, r2
  415fe6:	46cc      	mov	ip, r9
  415fe8:	dced      	bgt.n	415fc6 <_vfiprintf_r+0x2da>
  415fea:	4631      	mov	r1, r6
  415fec:	4666      	mov	r6, ip
  415fee:	46a4      	mov	ip, r4
  415ff0:	462c      	mov	r4, r5
  415ff2:	460d      	mov	r5, r1
  415ff4:	4422      	add	r2, r4
  415ff6:	2b07      	cmp	r3, #7
  415ff8:	9215      	str	r2, [sp, #84]	; 0x54
  415ffa:	6035      	str	r5, [r6, #0]
  415ffc:	6074      	str	r4, [r6, #4]
  415ffe:	9314      	str	r3, [sp, #80]	; 0x50
  416000:	f300 8369 	bgt.w	4166d6 <_vfiprintf_r+0x9ea>
  416004:	3608      	adds	r6, #8
  416006:	1c59      	adds	r1, r3, #1
  416008:	e1da      	b.n	4163c0 <_vfiprintf_r+0x6d4>
  41600a:	f01a 0f20 	tst.w	sl, #32
  41600e:	9004      	str	r0, [sp, #16]
  416010:	46ac      	mov	ip, r5
  416012:	f000 808b 	beq.w	41612c <_vfiprintf_r+0x440>
  416016:	9d08      	ldr	r5, [sp, #32]
  416018:	1deb      	adds	r3, r5, #7
  41601a:	f023 0307 	bic.w	r3, r3, #7
  41601e:	f103 0b08 	add.w	fp, r3, #8
  416022:	e9d3 4500 	ldrd	r4, r5, [r3]
  416026:	f8cd b020 	str.w	fp, [sp, #32]
  41602a:	2301      	movs	r3, #1
  41602c:	e76f      	b.n	415f0e <_vfiprintf_r+0x222>
  41602e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  416032:	f898 3000 	ldrb.w	r3, [r8]
  416036:	e6c6      	b.n	415dc6 <_vfiprintf_r+0xda>
  416038:	f04a 0a10 	orr.w	sl, sl, #16
  41603c:	f01a 0f20 	tst.w	sl, #32
  416040:	9004      	str	r0, [sp, #16]
  416042:	46ac      	mov	ip, r5
  416044:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  416048:	f000 80c6 	beq.w	4161d8 <_vfiprintf_r+0x4ec>
  41604c:	9c08      	ldr	r4, [sp, #32]
  41604e:	1de1      	adds	r1, r4, #7
  416050:	f021 0107 	bic.w	r1, r1, #7
  416054:	e9d1 2300 	ldrd	r2, r3, [r1]
  416058:	3108      	adds	r1, #8
  41605a:	9108      	str	r1, [sp, #32]
  41605c:	4614      	mov	r4, r2
  41605e:	461d      	mov	r5, r3
  416060:	2a00      	cmp	r2, #0
  416062:	f173 0000 	sbcs.w	r0, r3, #0
  416066:	f2c0 83cd 	blt.w	416804 <_vfiprintf_r+0xb18>
  41606a:	f1bc 0f00 	cmp.w	ip, #0
  41606e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  416072:	9107      	str	r1, [sp, #28]
  416074:	bfa8      	it	ge
  416076:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  41607a:	ea54 0205 	orrs.w	r2, r4, r5
  41607e:	f8cd c014 	str.w	ip, [sp, #20]
  416082:	f04f 0301 	mov.w	r3, #1
  416086:	f43f af53 	beq.w	415f30 <_vfiprintf_r+0x244>
  41608a:	2b01      	cmp	r3, #1
  41608c:	f000 8315 	beq.w	4166ba <_vfiprintf_r+0x9ce>
  416090:	2b02      	cmp	r3, #2
  416092:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  416096:	f040 8248 	bne.w	41652a <_vfiprintf_r+0x83e>
  41609a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41609c:	4619      	mov	r1, r3
  41609e:	0922      	lsrs	r2, r4, #4
  4160a0:	f004 040f 	and.w	r4, r4, #15
  4160a4:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  4160a8:	460f      	mov	r7, r1
  4160aa:	092b      	lsrs	r3, r5, #4
  4160ac:	5d01      	ldrb	r1, [r0, r4]
  4160ae:	7039      	strb	r1, [r7, #0]
  4160b0:	ea52 0b03 	orrs.w	fp, r2, r3
  4160b4:	4614      	mov	r4, r2
  4160b6:	461d      	mov	r5, r3
  4160b8:	f107 31ff 	add.w	r1, r7, #4294967295
  4160bc:	d1ef      	bne.n	41609e <_vfiprintf_r+0x3b2>
  4160be:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4160c2:	ebc7 0309 	rsb	r3, r7, r9
  4160c6:	9305      	str	r3, [sp, #20]
  4160c8:	e744      	b.n	415f54 <_vfiprintf_r+0x268>
  4160ca:	f04a 0a10 	orr.w	sl, sl, #16
  4160ce:	f01a 0320 	ands.w	r3, sl, #32
  4160d2:	9004      	str	r0, [sp, #16]
  4160d4:	46ac      	mov	ip, r5
  4160d6:	f47f af0e 	bne.w	415ef6 <_vfiprintf_r+0x20a>
  4160da:	f01a 0210 	ands.w	r2, sl, #16
  4160de:	f040 830f 	bne.w	416700 <_vfiprintf_r+0xa14>
  4160e2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  4160e6:	f000 830b 	beq.w	416700 <_vfiprintf_r+0xa14>
  4160ea:	f8dd b020 	ldr.w	fp, [sp, #32]
  4160ee:	f8bb 4000 	ldrh.w	r4, [fp]
  4160f2:	f10b 0b04 	add.w	fp, fp, #4
  4160f6:	4613      	mov	r3, r2
  4160f8:	2500      	movs	r5, #0
  4160fa:	f8cd b020 	str.w	fp, [sp, #32]
  4160fe:	e706      	b.n	415f0e <_vfiprintf_r+0x222>
  416100:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  416104:	2000      	movs	r0, #0
  416106:	f818 3b01 	ldrb.w	r3, [r8], #1
  41610a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41610e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  416112:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  416116:	2a09      	cmp	r2, #9
  416118:	d9f5      	bls.n	416106 <_vfiprintf_r+0x41a>
  41611a:	e656      	b.n	415dca <_vfiprintf_r+0xde>
  41611c:	f04a 0a10 	orr.w	sl, sl, #16
  416120:	f01a 0f20 	tst.w	sl, #32
  416124:	9004      	str	r0, [sp, #16]
  416126:	46ac      	mov	ip, r5
  416128:	f47f af75 	bne.w	416016 <_vfiprintf_r+0x32a>
  41612c:	f01a 0f10 	tst.w	sl, #16
  416130:	f040 82ec 	bne.w	41670c <_vfiprintf_r+0xa20>
  416134:	f01a 0f40 	tst.w	sl, #64	; 0x40
  416138:	f000 82e8 	beq.w	41670c <_vfiprintf_r+0xa20>
  41613c:	f8dd b020 	ldr.w	fp, [sp, #32]
  416140:	f8bb 4000 	ldrh.w	r4, [fp]
  416144:	f10b 0b04 	add.w	fp, fp, #4
  416148:	2500      	movs	r5, #0
  41614a:	2301      	movs	r3, #1
  41614c:	f8cd b020 	str.w	fp, [sp, #32]
  416150:	e6dd      	b.n	415f0e <_vfiprintf_r+0x222>
  416152:	46ac      	mov	ip, r5
  416154:	f01a 0f20 	tst.w	sl, #32
  416158:	4d50      	ldr	r5, [pc, #320]	; (41629c <_vfiprintf_r+0x5b0>)
  41615a:	9004      	str	r0, [sp, #16]
  41615c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  416160:	950a      	str	r5, [sp, #40]	; 0x28
  416162:	f000 80ee 	beq.w	416342 <_vfiprintf_r+0x656>
  416166:	9d08      	ldr	r5, [sp, #32]
  416168:	1dea      	adds	r2, r5, #7
  41616a:	f022 0207 	bic.w	r2, r2, #7
  41616e:	e9d2 4500 	ldrd	r4, r5, [r2]
  416172:	f102 0b08 	add.w	fp, r2, #8
  416176:	f8cd b020 	str.w	fp, [sp, #32]
  41617a:	f01a 0f01 	tst.w	sl, #1
  41617e:	f000 82a8 	beq.w	4166d2 <_vfiprintf_r+0x9e6>
  416182:	ea54 0b05 	orrs.w	fp, r4, r5
  416186:	f000 82a4 	beq.w	4166d2 <_vfiprintf_r+0x9e6>
  41618a:	2230      	movs	r2, #48	; 0x30
  41618c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  416190:	f04a 0a02 	orr.w	sl, sl, #2
  416194:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  416198:	2302      	movs	r3, #2
  41619a:	e6b8      	b.n	415f0e <_vfiprintf_r+0x222>
  41619c:	9b08      	ldr	r3, [sp, #32]
  41619e:	f8dd b020 	ldr.w	fp, [sp, #32]
  4161a2:	681b      	ldr	r3, [r3, #0]
  4161a4:	9004      	str	r0, [sp, #16]
  4161a6:	2401      	movs	r4, #1
  4161a8:	f04f 0500 	mov.w	r5, #0
  4161ac:	f10b 0b04 	add.w	fp, fp, #4
  4161b0:	9403      	str	r4, [sp, #12]
  4161b2:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  4161b6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  4161ba:	f8cd b020 	str.w	fp, [sp, #32]
  4161be:	9405      	str	r4, [sp, #20]
  4161c0:	af16      	add	r7, sp, #88	; 0x58
  4161c2:	f04f 0c00 	mov.w	ip, #0
  4161c6:	e6d2      	b.n	415f6e <_vfiprintf_r+0x282>
  4161c8:	f01a 0f20 	tst.w	sl, #32
  4161cc:	9004      	str	r0, [sp, #16]
  4161ce:	46ac      	mov	ip, r5
  4161d0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4161d4:	f47f af3a 	bne.w	41604c <_vfiprintf_r+0x360>
  4161d8:	f01a 0f10 	tst.w	sl, #16
  4161dc:	f040 82a4 	bne.w	416728 <_vfiprintf_r+0xa3c>
  4161e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4161e4:	f000 82a0 	beq.w	416728 <_vfiprintf_r+0xa3c>
  4161e8:	f8dd b020 	ldr.w	fp, [sp, #32]
  4161ec:	f9bb 4000 	ldrsh.w	r4, [fp]
  4161f0:	f10b 0b04 	add.w	fp, fp, #4
  4161f4:	17e5      	asrs	r5, r4, #31
  4161f6:	4622      	mov	r2, r4
  4161f8:	462b      	mov	r3, r5
  4161fa:	f8cd b020 	str.w	fp, [sp, #32]
  4161fe:	e72f      	b.n	416060 <_vfiprintf_r+0x374>
  416200:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  416204:	f898 3000 	ldrb.w	r3, [r8]
  416208:	e5dd      	b.n	415dc6 <_vfiprintf_r+0xda>
  41620a:	f898 3000 	ldrb.w	r3, [r8]
  41620e:	4642      	mov	r2, r8
  416210:	2b6c      	cmp	r3, #108	; 0x6c
  416212:	bf03      	ittte	eq
  416214:	f108 0801 	addeq.w	r8, r8, #1
  416218:	f04a 0a20 	orreq.w	sl, sl, #32
  41621c:	7853      	ldrbeq	r3, [r2, #1]
  41621e:	f04a 0a10 	orrne.w	sl, sl, #16
  416222:	e5d0      	b.n	415dc6 <_vfiprintf_r+0xda>
  416224:	f01a 0f20 	tst.w	sl, #32
  416228:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  41622c:	f000 82f8 	beq.w	416820 <_vfiprintf_r+0xb34>
  416230:	9c08      	ldr	r4, [sp, #32]
  416232:	6821      	ldr	r1, [r4, #0]
  416234:	9c09      	ldr	r4, [sp, #36]	; 0x24
  416236:	17e5      	asrs	r5, r4, #31
  416238:	462b      	mov	r3, r5
  41623a:	9d08      	ldr	r5, [sp, #32]
  41623c:	4622      	mov	r2, r4
  41623e:	3504      	adds	r5, #4
  416240:	9508      	str	r5, [sp, #32]
  416242:	e9c1 2300 	strd	r2, r3, [r1]
  416246:	e584      	b.n	415d52 <_vfiprintf_r+0x66>
  416248:	9c08      	ldr	r4, [sp, #32]
  41624a:	9004      	str	r0, [sp, #16]
  41624c:	6827      	ldr	r7, [r4, #0]
  41624e:	46ac      	mov	ip, r5
  416250:	f04f 0500 	mov.w	r5, #0
  416254:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  416258:	3404      	adds	r4, #4
  41625a:	2f00      	cmp	r7, #0
  41625c:	f000 8334 	beq.w	4168c8 <_vfiprintf_r+0xbdc>
  416260:	f1bc 0f00 	cmp.w	ip, #0
  416264:	4638      	mov	r0, r7
  416266:	f2c0 8308 	blt.w	41687a <_vfiprintf_r+0xb8e>
  41626a:	4662      	mov	r2, ip
  41626c:	2100      	movs	r1, #0
  41626e:	f8cd c004 	str.w	ip, [sp, #4]
  416272:	f002 f959 	bl	418528 <memchr>
  416276:	f8dd c004 	ldr.w	ip, [sp, #4]
  41627a:	2800      	cmp	r0, #0
  41627c:	f000 833c 	beq.w	4168f8 <_vfiprintf_r+0xc0c>
  416280:	1bc0      	subs	r0, r0, r7
  416282:	4560      	cmp	r0, ip
  416284:	bfa8      	it	ge
  416286:	4660      	movge	r0, ip
  416288:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  41628c:	9005      	str	r0, [sp, #20]
  41628e:	9408      	str	r4, [sp, #32]
  416290:	9507      	str	r5, [sp, #28]
  416292:	f04f 0c00 	mov.w	ip, #0
  416296:	e65d      	b.n	415f54 <_vfiprintf_r+0x268>
  416298:	0041de34 	.word	0x0041de34
  41629c:	0041ddb4 	.word	0x0041ddb4
  4162a0:	9a08      	ldr	r2, [sp, #32]
  4162a2:	9004      	str	r0, [sp, #16]
  4162a4:	2330      	movs	r3, #48	; 0x30
  4162a6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4162aa:	f102 0b04 	add.w	fp, r2, #4
  4162ae:	2378      	movs	r3, #120	; 0x78
  4162b0:	48af      	ldr	r0, [pc, #700]	; (416570 <_vfiprintf_r+0x884>)
  4162b2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  4162b6:	46ac      	mov	ip, r5
  4162b8:	6814      	ldr	r4, [r2, #0]
  4162ba:	f8cd b020 	str.w	fp, [sp, #32]
  4162be:	f04a 0a02 	orr.w	sl, sl, #2
  4162c2:	2500      	movs	r5, #0
  4162c4:	900a      	str	r0, [sp, #40]	; 0x28
  4162c6:	2302      	movs	r3, #2
  4162c8:	e621      	b.n	415f0e <_vfiprintf_r+0x222>
  4162ca:	f04a 0a20 	orr.w	sl, sl, #32
  4162ce:	f898 3000 	ldrb.w	r3, [r8]
  4162d2:	e578      	b.n	415dc6 <_vfiprintf_r+0xda>
  4162d4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4162d8:	f8db 0000 	ldr.w	r0, [fp]
  4162dc:	2800      	cmp	r0, #0
  4162de:	f10b 0304 	add.w	r3, fp, #4
  4162e2:	f6ff adfb 	blt.w	415edc <_vfiprintf_r+0x1f0>
  4162e6:	9308      	str	r3, [sp, #32]
  4162e8:	f898 3000 	ldrb.w	r3, [r8]
  4162ec:	e56b      	b.n	415dc6 <_vfiprintf_r+0xda>
  4162ee:	f898 3000 	ldrb.w	r3, [r8]
  4162f2:	212b      	movs	r1, #43	; 0x2b
  4162f4:	e567      	b.n	415dc6 <_vfiprintf_r+0xda>
  4162f6:	f898 3000 	ldrb.w	r3, [r8]
  4162fa:	2b2a      	cmp	r3, #42	; 0x2a
  4162fc:	f108 0401 	add.w	r4, r8, #1
  416300:	f000 8309 	beq.w	416916 <_vfiprintf_r+0xc2a>
  416304:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  416308:	2a09      	cmp	r2, #9
  41630a:	bf98      	it	ls
  41630c:	2500      	movls	r5, #0
  41630e:	f200 82fe 	bhi.w	41690e <_vfiprintf_r+0xc22>
  416312:	f814 3b01 	ldrb.w	r3, [r4], #1
  416316:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  41631a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  41631e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  416322:	2a09      	cmp	r2, #9
  416324:	d9f5      	bls.n	416312 <_vfiprintf_r+0x626>
  416326:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  41632a:	46a0      	mov	r8, r4
  41632c:	e54d      	b.n	415dca <_vfiprintf_r+0xde>
  41632e:	4c90      	ldr	r4, [pc, #576]	; (416570 <_vfiprintf_r+0x884>)
  416330:	9004      	str	r0, [sp, #16]
  416332:	f01a 0f20 	tst.w	sl, #32
  416336:	46ac      	mov	ip, r5
  416338:	940a      	str	r4, [sp, #40]	; 0x28
  41633a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  41633e:	f47f af12 	bne.w	416166 <_vfiprintf_r+0x47a>
  416342:	f01a 0f10 	tst.w	sl, #16
  416346:	f040 81e9 	bne.w	41671c <_vfiprintf_r+0xa30>
  41634a:	f01a 0f40 	tst.w	sl, #64	; 0x40
  41634e:	f000 81e5 	beq.w	41671c <_vfiprintf_r+0xa30>
  416352:	f8dd b020 	ldr.w	fp, [sp, #32]
  416356:	f8bb 4000 	ldrh.w	r4, [fp]
  41635a:	f10b 0b04 	add.w	fp, fp, #4
  41635e:	2500      	movs	r5, #0
  416360:	f8cd b020 	str.w	fp, [sp, #32]
  416364:	e709      	b.n	41617a <_vfiprintf_r+0x48e>
  416366:	f898 3000 	ldrb.w	r3, [r8]
  41636a:	2900      	cmp	r1, #0
  41636c:	f47f ad2b 	bne.w	415dc6 <_vfiprintf_r+0xda>
  416370:	2120      	movs	r1, #32
  416372:	e528      	b.n	415dc6 <_vfiprintf_r+0xda>
  416374:	f04a 0a01 	orr.w	sl, sl, #1
  416378:	f898 3000 	ldrb.w	r3, [r8]
  41637c:	e523      	b.n	415dc6 <_vfiprintf_r+0xda>
  41637e:	9004      	str	r0, [sp, #16]
  416380:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  416384:	2b00      	cmp	r3, #0
  416386:	f000 80f9 	beq.w	41657c <_vfiprintf_r+0x890>
  41638a:	2501      	movs	r5, #1
  41638c:	f04f 0b00 	mov.w	fp, #0
  416390:	9503      	str	r5, [sp, #12]
  416392:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  416396:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  41639a:	9505      	str	r5, [sp, #20]
  41639c:	af16      	add	r7, sp, #88	; 0x58
  41639e:	e710      	b.n	4161c2 <_vfiprintf_r+0x4d6>
  4163a0:	9806      	ldr	r0, [sp, #24]
  4163a2:	9902      	ldr	r1, [sp, #8]
  4163a4:	aa13      	add	r2, sp, #76	; 0x4c
  4163a6:	f7ff fc65 	bl	415c74 <__sprint_r.part.0>
  4163aa:	2800      	cmp	r0, #0
  4163ac:	f040 80ed 	bne.w	41658a <_vfiprintf_r+0x89e>
  4163b0:	9814      	ldr	r0, [sp, #80]	; 0x50
  4163b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4163b4:	1c43      	adds	r3, r0, #1
  4163b6:	46cc      	mov	ip, r9
  4163b8:	e602      	b.n	415fc0 <_vfiprintf_r+0x2d4>
  4163ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4163bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4163be:	1c59      	adds	r1, r3, #1
  4163c0:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  4163c4:	b168      	cbz	r0, 4163e2 <_vfiprintf_r+0x6f6>
  4163c6:	3201      	adds	r2, #1
  4163c8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  4163cc:	2301      	movs	r3, #1
  4163ce:	2907      	cmp	r1, #7
  4163d0:	9215      	str	r2, [sp, #84]	; 0x54
  4163d2:	9114      	str	r1, [sp, #80]	; 0x50
  4163d4:	e886 0009 	stmia.w	r6, {r0, r3}
  4163d8:	f300 8160 	bgt.w	41669c <_vfiprintf_r+0x9b0>
  4163dc:	460b      	mov	r3, r1
  4163de:	3608      	adds	r6, #8
  4163e0:	3101      	adds	r1, #1
  4163e2:	9c07      	ldr	r4, [sp, #28]
  4163e4:	b164      	cbz	r4, 416400 <_vfiprintf_r+0x714>
  4163e6:	3202      	adds	r2, #2
  4163e8:	a812      	add	r0, sp, #72	; 0x48
  4163ea:	2302      	movs	r3, #2
  4163ec:	2907      	cmp	r1, #7
  4163ee:	9215      	str	r2, [sp, #84]	; 0x54
  4163f0:	9114      	str	r1, [sp, #80]	; 0x50
  4163f2:	e886 0009 	stmia.w	r6, {r0, r3}
  4163f6:	f300 8157 	bgt.w	4166a8 <_vfiprintf_r+0x9bc>
  4163fa:	460b      	mov	r3, r1
  4163fc:	3608      	adds	r6, #8
  4163fe:	3101      	adds	r1, #1
  416400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  416402:	2d80      	cmp	r5, #128	; 0x80
  416404:	f000 8101 	beq.w	41660a <_vfiprintf_r+0x91e>
  416408:	9d05      	ldr	r5, [sp, #20]
  41640a:	ebc5 040c 	rsb	r4, r5, ip
  41640e:	2c00      	cmp	r4, #0
  416410:	dd2f      	ble.n	416472 <_vfiprintf_r+0x786>
  416412:	2c10      	cmp	r4, #16
  416414:	4d57      	ldr	r5, [pc, #348]	; (416574 <_vfiprintf_r+0x888>)
  416416:	dd22      	ble.n	41645e <_vfiprintf_r+0x772>
  416418:	4630      	mov	r0, r6
  41641a:	f04f 0b10 	mov.w	fp, #16
  41641e:	462e      	mov	r6, r5
  416420:	4625      	mov	r5, r4
  416422:	9c06      	ldr	r4, [sp, #24]
  416424:	e006      	b.n	416434 <_vfiprintf_r+0x748>
  416426:	f103 0c02 	add.w	ip, r3, #2
  41642a:	3008      	adds	r0, #8
  41642c:	460b      	mov	r3, r1
  41642e:	3d10      	subs	r5, #16
  416430:	2d10      	cmp	r5, #16
  416432:	dd10      	ble.n	416456 <_vfiprintf_r+0x76a>
  416434:	1c59      	adds	r1, r3, #1
  416436:	3210      	adds	r2, #16
  416438:	2907      	cmp	r1, #7
  41643a:	9215      	str	r2, [sp, #84]	; 0x54
  41643c:	e880 0840 	stmia.w	r0, {r6, fp}
  416440:	9114      	str	r1, [sp, #80]	; 0x50
  416442:	ddf0      	ble.n	416426 <_vfiprintf_r+0x73a>
  416444:	2a00      	cmp	r2, #0
  416446:	d163      	bne.n	416510 <_vfiprintf_r+0x824>
  416448:	3d10      	subs	r5, #16
  41644a:	2d10      	cmp	r5, #16
  41644c:	f04f 0c01 	mov.w	ip, #1
  416450:	4613      	mov	r3, r2
  416452:	4648      	mov	r0, r9
  416454:	dcee      	bgt.n	416434 <_vfiprintf_r+0x748>
  416456:	462c      	mov	r4, r5
  416458:	4661      	mov	r1, ip
  41645a:	4635      	mov	r5, r6
  41645c:	4606      	mov	r6, r0
  41645e:	4422      	add	r2, r4
  416460:	2907      	cmp	r1, #7
  416462:	9215      	str	r2, [sp, #84]	; 0x54
  416464:	6035      	str	r5, [r6, #0]
  416466:	6074      	str	r4, [r6, #4]
  416468:	9114      	str	r1, [sp, #80]	; 0x50
  41646a:	f300 80c1 	bgt.w	4165f0 <_vfiprintf_r+0x904>
  41646e:	3608      	adds	r6, #8
  416470:	3101      	adds	r1, #1
  416472:	9d05      	ldr	r5, [sp, #20]
  416474:	6037      	str	r7, [r6, #0]
  416476:	442a      	add	r2, r5
  416478:	2907      	cmp	r1, #7
  41647a:	9215      	str	r2, [sp, #84]	; 0x54
  41647c:	6075      	str	r5, [r6, #4]
  41647e:	9114      	str	r1, [sp, #80]	; 0x50
  416480:	f340 80c1 	ble.w	416606 <_vfiprintf_r+0x91a>
  416484:	2a00      	cmp	r2, #0
  416486:	f040 8130 	bne.w	4166ea <_vfiprintf_r+0x9fe>
  41648a:	9214      	str	r2, [sp, #80]	; 0x50
  41648c:	464e      	mov	r6, r9
  41648e:	f01a 0f04 	tst.w	sl, #4
  416492:	f000 808b 	beq.w	4165ac <_vfiprintf_r+0x8c0>
  416496:	9d04      	ldr	r5, [sp, #16]
  416498:	f8dd b00c 	ldr.w	fp, [sp, #12]
  41649c:	ebcb 0405 	rsb	r4, fp, r5
  4164a0:	2c00      	cmp	r4, #0
  4164a2:	f340 8083 	ble.w	4165ac <_vfiprintf_r+0x8c0>
  4164a6:	2c10      	cmp	r4, #16
  4164a8:	f340 8222 	ble.w	4168f0 <_vfiprintf_r+0xc04>
  4164ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4164ae:	4d32      	ldr	r5, [pc, #200]	; (416578 <_vfiprintf_r+0x88c>)
  4164b0:	f8dd a018 	ldr.w	sl, [sp, #24]
  4164b4:	f8dd b008 	ldr.w	fp, [sp, #8]
  4164b8:	2710      	movs	r7, #16
  4164ba:	e005      	b.n	4164c8 <_vfiprintf_r+0x7dc>
  4164bc:	1c88      	adds	r0, r1, #2
  4164be:	3608      	adds	r6, #8
  4164c0:	4619      	mov	r1, r3
  4164c2:	3c10      	subs	r4, #16
  4164c4:	2c10      	cmp	r4, #16
  4164c6:	dd10      	ble.n	4164ea <_vfiprintf_r+0x7fe>
  4164c8:	1c4b      	adds	r3, r1, #1
  4164ca:	3210      	adds	r2, #16
  4164cc:	2b07      	cmp	r3, #7
  4164ce:	9215      	str	r2, [sp, #84]	; 0x54
  4164d0:	e886 00a0 	stmia.w	r6, {r5, r7}
  4164d4:	9314      	str	r3, [sp, #80]	; 0x50
  4164d6:	ddf1      	ble.n	4164bc <_vfiprintf_r+0x7d0>
  4164d8:	2a00      	cmp	r2, #0
  4164da:	d17d      	bne.n	4165d8 <_vfiprintf_r+0x8ec>
  4164dc:	3c10      	subs	r4, #16
  4164de:	2c10      	cmp	r4, #16
  4164e0:	f04f 0001 	mov.w	r0, #1
  4164e4:	4611      	mov	r1, r2
  4164e6:	464e      	mov	r6, r9
  4164e8:	dcee      	bgt.n	4164c8 <_vfiprintf_r+0x7dc>
  4164ea:	4422      	add	r2, r4
  4164ec:	2807      	cmp	r0, #7
  4164ee:	9215      	str	r2, [sp, #84]	; 0x54
  4164f0:	6035      	str	r5, [r6, #0]
  4164f2:	6074      	str	r4, [r6, #4]
  4164f4:	9014      	str	r0, [sp, #80]	; 0x50
  4164f6:	dd59      	ble.n	4165ac <_vfiprintf_r+0x8c0>
  4164f8:	2a00      	cmp	r2, #0
  4164fa:	d14f      	bne.n	41659c <_vfiprintf_r+0x8b0>
  4164fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4164fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
  416502:	9d04      	ldr	r5, [sp, #16]
  416504:	45ab      	cmp	fp, r5
  416506:	bfac      	ite	ge
  416508:	445c      	addge	r4, fp
  41650a:	1964      	addlt	r4, r4, r5
  41650c:	9409      	str	r4, [sp, #36]	; 0x24
  41650e:	e05e      	b.n	4165ce <_vfiprintf_r+0x8e2>
  416510:	4620      	mov	r0, r4
  416512:	9902      	ldr	r1, [sp, #8]
  416514:	aa13      	add	r2, sp, #76	; 0x4c
  416516:	f7ff fbad 	bl	415c74 <__sprint_r.part.0>
  41651a:	2800      	cmp	r0, #0
  41651c:	d135      	bne.n	41658a <_vfiprintf_r+0x89e>
  41651e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  416520:	9a15      	ldr	r2, [sp, #84]	; 0x54
  416522:	f103 0c01 	add.w	ip, r3, #1
  416526:	4648      	mov	r0, r9
  416528:	e781      	b.n	41642e <_vfiprintf_r+0x742>
  41652a:	08e0      	lsrs	r0, r4, #3
  41652c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  416530:	f004 0207 	and.w	r2, r4, #7
  416534:	08e9      	lsrs	r1, r5, #3
  416536:	3230      	adds	r2, #48	; 0x30
  416538:	ea50 0b01 	orrs.w	fp, r0, r1
  41653c:	461f      	mov	r7, r3
  41653e:	701a      	strb	r2, [r3, #0]
  416540:	4604      	mov	r4, r0
  416542:	460d      	mov	r5, r1
  416544:	f103 33ff 	add.w	r3, r3, #4294967295
  416548:	d1ef      	bne.n	41652a <_vfiprintf_r+0x83e>
  41654a:	f01a 0f01 	tst.w	sl, #1
  41654e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  416552:	4639      	mov	r1, r7
  416554:	f000 80b9 	beq.w	4166ca <_vfiprintf_r+0x9de>
  416558:	2a30      	cmp	r2, #48	; 0x30
  41655a:	f43f acf8 	beq.w	415f4e <_vfiprintf_r+0x262>
  41655e:	461f      	mov	r7, r3
  416560:	ebc7 0509 	rsb	r5, r7, r9
  416564:	2330      	movs	r3, #48	; 0x30
  416566:	9505      	str	r5, [sp, #20]
  416568:	f801 3c01 	strb.w	r3, [r1, #-1]
  41656c:	e4f2      	b.n	415f54 <_vfiprintf_r+0x268>
  41656e:	bf00      	nop
  416570:	0041ddc8 	.word	0x0041ddc8
  416574:	0041de24 	.word	0x0041de24
  416578:	0041de34 	.word	0x0041de34
  41657c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41657e:	b123      	cbz	r3, 41658a <_vfiprintf_r+0x89e>
  416580:	9806      	ldr	r0, [sp, #24]
  416582:	9902      	ldr	r1, [sp, #8]
  416584:	aa13      	add	r2, sp, #76	; 0x4c
  416586:	f7ff fb75 	bl	415c74 <__sprint_r.part.0>
  41658a:	9c02      	ldr	r4, [sp, #8]
  41658c:	89a3      	ldrh	r3, [r4, #12]
  41658e:	065b      	lsls	r3, r3, #25
  416590:	f53f ac9c 	bmi.w	415ecc <_vfiprintf_r+0x1e0>
  416594:	9809      	ldr	r0, [sp, #36]	; 0x24
  416596:	b031      	add	sp, #196	; 0xc4
  416598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41659c:	9806      	ldr	r0, [sp, #24]
  41659e:	9902      	ldr	r1, [sp, #8]
  4165a0:	aa13      	add	r2, sp, #76	; 0x4c
  4165a2:	f7ff fb67 	bl	415c74 <__sprint_r.part.0>
  4165a6:	2800      	cmp	r0, #0
  4165a8:	d1ef      	bne.n	41658a <_vfiprintf_r+0x89e>
  4165aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4165ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4165ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4165b2:	9d04      	ldr	r5, [sp, #16]
  4165b4:	45ab      	cmp	fp, r5
  4165b6:	bfac      	ite	ge
  4165b8:	445c      	addge	r4, fp
  4165ba:	1964      	addlt	r4, r4, r5
  4165bc:	9409      	str	r4, [sp, #36]	; 0x24
  4165be:	b132      	cbz	r2, 4165ce <_vfiprintf_r+0x8e2>
  4165c0:	9806      	ldr	r0, [sp, #24]
  4165c2:	9902      	ldr	r1, [sp, #8]
  4165c4:	aa13      	add	r2, sp, #76	; 0x4c
  4165c6:	f7ff fb55 	bl	415c74 <__sprint_r.part.0>
  4165ca:	2800      	cmp	r0, #0
  4165cc:	d1dd      	bne.n	41658a <_vfiprintf_r+0x89e>
  4165ce:	2000      	movs	r0, #0
  4165d0:	9014      	str	r0, [sp, #80]	; 0x50
  4165d2:	464e      	mov	r6, r9
  4165d4:	f7ff bbbd 	b.w	415d52 <_vfiprintf_r+0x66>
  4165d8:	4650      	mov	r0, sl
  4165da:	4659      	mov	r1, fp
  4165dc:	aa13      	add	r2, sp, #76	; 0x4c
  4165de:	f7ff fb49 	bl	415c74 <__sprint_r.part.0>
  4165e2:	2800      	cmp	r0, #0
  4165e4:	d1d1      	bne.n	41658a <_vfiprintf_r+0x89e>
  4165e6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4165e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4165ea:	1c48      	adds	r0, r1, #1
  4165ec:	464e      	mov	r6, r9
  4165ee:	e768      	b.n	4164c2 <_vfiprintf_r+0x7d6>
  4165f0:	2a00      	cmp	r2, #0
  4165f2:	f040 80fa 	bne.w	4167ea <_vfiprintf_r+0xafe>
  4165f6:	9c05      	ldr	r4, [sp, #20]
  4165f8:	9720      	str	r7, [sp, #128]	; 0x80
  4165fa:	2301      	movs	r3, #1
  4165fc:	9421      	str	r4, [sp, #132]	; 0x84
  4165fe:	9415      	str	r4, [sp, #84]	; 0x54
  416600:	4622      	mov	r2, r4
  416602:	9314      	str	r3, [sp, #80]	; 0x50
  416604:	464e      	mov	r6, r9
  416606:	3608      	adds	r6, #8
  416608:	e741      	b.n	41648e <_vfiprintf_r+0x7a2>
  41660a:	9d04      	ldr	r5, [sp, #16]
  41660c:	f8dd b00c 	ldr.w	fp, [sp, #12]
  416610:	ebcb 0405 	rsb	r4, fp, r5
  416614:	2c00      	cmp	r4, #0
  416616:	f77f aef7 	ble.w	416408 <_vfiprintf_r+0x71c>
  41661a:	2c10      	cmp	r4, #16
  41661c:	4da8      	ldr	r5, [pc, #672]	; (4168c0 <_vfiprintf_r+0xbd4>)
  41661e:	f340 8174 	ble.w	41690a <_vfiprintf_r+0xc1e>
  416622:	4629      	mov	r1, r5
  416624:	f04f 0b10 	mov.w	fp, #16
  416628:	4625      	mov	r5, r4
  41662a:	4664      	mov	r4, ip
  41662c:	46b4      	mov	ip, r6
  41662e:	460e      	mov	r6, r1
  416630:	e006      	b.n	416640 <_vfiprintf_r+0x954>
  416632:	1c98      	adds	r0, r3, #2
  416634:	f10c 0c08 	add.w	ip, ip, #8
  416638:	460b      	mov	r3, r1
  41663a:	3d10      	subs	r5, #16
  41663c:	2d10      	cmp	r5, #16
  41663e:	dd0f      	ble.n	416660 <_vfiprintf_r+0x974>
  416640:	1c59      	adds	r1, r3, #1
  416642:	3210      	adds	r2, #16
  416644:	2907      	cmp	r1, #7
  416646:	9215      	str	r2, [sp, #84]	; 0x54
  416648:	e88c 0840 	stmia.w	ip, {r6, fp}
  41664c:	9114      	str	r1, [sp, #80]	; 0x50
  41664e:	ddf0      	ble.n	416632 <_vfiprintf_r+0x946>
  416650:	b9ba      	cbnz	r2, 416682 <_vfiprintf_r+0x996>
  416652:	3d10      	subs	r5, #16
  416654:	2d10      	cmp	r5, #16
  416656:	f04f 0001 	mov.w	r0, #1
  41665a:	4613      	mov	r3, r2
  41665c:	46cc      	mov	ip, r9
  41665e:	dcef      	bgt.n	416640 <_vfiprintf_r+0x954>
  416660:	4633      	mov	r3, r6
  416662:	4666      	mov	r6, ip
  416664:	46a4      	mov	ip, r4
  416666:	462c      	mov	r4, r5
  416668:	461d      	mov	r5, r3
  41666a:	4422      	add	r2, r4
  41666c:	2807      	cmp	r0, #7
  41666e:	9215      	str	r2, [sp, #84]	; 0x54
  416670:	6035      	str	r5, [r6, #0]
  416672:	6074      	str	r4, [r6, #4]
  416674:	9014      	str	r0, [sp, #80]	; 0x50
  416676:	f300 80b2 	bgt.w	4167de <_vfiprintf_r+0xaf2>
  41667a:	3608      	adds	r6, #8
  41667c:	1c41      	adds	r1, r0, #1
  41667e:	4603      	mov	r3, r0
  416680:	e6c2      	b.n	416408 <_vfiprintf_r+0x71c>
  416682:	9806      	ldr	r0, [sp, #24]
  416684:	9902      	ldr	r1, [sp, #8]
  416686:	aa13      	add	r2, sp, #76	; 0x4c
  416688:	f7ff faf4 	bl	415c74 <__sprint_r.part.0>
  41668c:	2800      	cmp	r0, #0
  41668e:	f47f af7c 	bne.w	41658a <_vfiprintf_r+0x89e>
  416692:	9b14      	ldr	r3, [sp, #80]	; 0x50
  416694:	9a15      	ldr	r2, [sp, #84]	; 0x54
  416696:	1c58      	adds	r0, r3, #1
  416698:	46cc      	mov	ip, r9
  41669a:	e7ce      	b.n	41663a <_vfiprintf_r+0x94e>
  41669c:	2a00      	cmp	r2, #0
  41669e:	d17c      	bne.n	41679a <_vfiprintf_r+0xaae>
  4166a0:	4619      	mov	r1, r3
  4166a2:	464e      	mov	r6, r9
  4166a4:	4613      	mov	r3, r2
  4166a6:	e69c      	b.n	4163e2 <_vfiprintf_r+0x6f6>
  4166a8:	2a00      	cmp	r2, #0
  4166aa:	f040 8087 	bne.w	4167bc <_vfiprintf_r+0xad0>
  4166ae:	2101      	movs	r1, #1
  4166b0:	4613      	mov	r3, r2
  4166b2:	464e      	mov	r6, r9
  4166b4:	e6a4      	b.n	416400 <_vfiprintf_r+0x714>
  4166b6:	464f      	mov	r7, r9
  4166b8:	e44c      	b.n	415f54 <_vfiprintf_r+0x268>
  4166ba:	2d00      	cmp	r5, #0
  4166bc:	bf08      	it	eq
  4166be:	2c0a      	cmpeq	r4, #10
  4166c0:	d249      	bcs.n	416756 <_vfiprintf_r+0xa6a>
  4166c2:	af30      	add	r7, sp, #192	; 0xc0
  4166c4:	3430      	adds	r4, #48	; 0x30
  4166c6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4166ca:	ebc7 0309 	rsb	r3, r7, r9
  4166ce:	9305      	str	r3, [sp, #20]
  4166d0:	e440      	b.n	415f54 <_vfiprintf_r+0x268>
  4166d2:	2302      	movs	r3, #2
  4166d4:	e41b      	b.n	415f0e <_vfiprintf_r+0x222>
  4166d6:	2a00      	cmp	r2, #0
  4166d8:	f040 80b2 	bne.w	416840 <_vfiprintf_r+0xb54>
  4166dc:	4613      	mov	r3, r2
  4166de:	2101      	movs	r1, #1
  4166e0:	464e      	mov	r6, r9
  4166e2:	e66d      	b.n	4163c0 <_vfiprintf_r+0x6d4>
  4166e4:	4644      	mov	r4, r8
  4166e6:	f7ff bb5c 	b.w	415da2 <_vfiprintf_r+0xb6>
  4166ea:	9806      	ldr	r0, [sp, #24]
  4166ec:	9902      	ldr	r1, [sp, #8]
  4166ee:	aa13      	add	r2, sp, #76	; 0x4c
  4166f0:	f7ff fac0 	bl	415c74 <__sprint_r.part.0>
  4166f4:	2800      	cmp	r0, #0
  4166f6:	f47f af48 	bne.w	41658a <_vfiprintf_r+0x89e>
  4166fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4166fc:	464e      	mov	r6, r9
  4166fe:	e6c6      	b.n	41648e <_vfiprintf_r+0x7a2>
  416700:	9d08      	ldr	r5, [sp, #32]
  416702:	682c      	ldr	r4, [r5, #0]
  416704:	3504      	adds	r5, #4
  416706:	9508      	str	r5, [sp, #32]
  416708:	2500      	movs	r5, #0
  41670a:	e400      	b.n	415f0e <_vfiprintf_r+0x222>
  41670c:	9d08      	ldr	r5, [sp, #32]
  41670e:	682c      	ldr	r4, [r5, #0]
  416710:	3504      	adds	r5, #4
  416712:	9508      	str	r5, [sp, #32]
  416714:	2301      	movs	r3, #1
  416716:	2500      	movs	r5, #0
  416718:	f7ff bbf9 	b.w	415f0e <_vfiprintf_r+0x222>
  41671c:	9d08      	ldr	r5, [sp, #32]
  41671e:	682c      	ldr	r4, [r5, #0]
  416720:	3504      	adds	r5, #4
  416722:	9508      	str	r5, [sp, #32]
  416724:	2500      	movs	r5, #0
  416726:	e528      	b.n	41617a <_vfiprintf_r+0x48e>
  416728:	9d08      	ldr	r5, [sp, #32]
  41672a:	f8dd b020 	ldr.w	fp, [sp, #32]
  41672e:	682c      	ldr	r4, [r5, #0]
  416730:	f10b 0b04 	add.w	fp, fp, #4
  416734:	17e5      	asrs	r5, r4, #31
  416736:	f8cd b020 	str.w	fp, [sp, #32]
  41673a:	4622      	mov	r2, r4
  41673c:	462b      	mov	r3, r5
  41673e:	e48f      	b.n	416060 <_vfiprintf_r+0x374>
  416740:	9806      	ldr	r0, [sp, #24]
  416742:	9902      	ldr	r1, [sp, #8]
  416744:	aa13      	add	r2, sp, #76	; 0x4c
  416746:	f7ff fa95 	bl	415c74 <__sprint_r.part.0>
  41674a:	2800      	cmp	r0, #0
  41674c:	f47f af1d 	bne.w	41658a <_vfiprintf_r+0x89e>
  416750:	464e      	mov	r6, r9
  416752:	f7ff bb9b 	b.w	415e8c <_vfiprintf_r+0x1a0>
  416756:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  41675a:	9603      	str	r6, [sp, #12]
  41675c:	465e      	mov	r6, fp
  41675e:	46e3      	mov	fp, ip
  416760:	4620      	mov	r0, r4
  416762:	4629      	mov	r1, r5
  416764:	220a      	movs	r2, #10
  416766:	2300      	movs	r3, #0
  416768:	f7fb fe40 	bl	4123ec <__aeabi_uldivmod>
  41676c:	3230      	adds	r2, #48	; 0x30
  41676e:	7032      	strb	r2, [r6, #0]
  416770:	4620      	mov	r0, r4
  416772:	4629      	mov	r1, r5
  416774:	220a      	movs	r2, #10
  416776:	2300      	movs	r3, #0
  416778:	f7fb fe38 	bl	4123ec <__aeabi_uldivmod>
  41677c:	4604      	mov	r4, r0
  41677e:	460d      	mov	r5, r1
  416780:	ea54 0005 	orrs.w	r0, r4, r5
  416784:	4637      	mov	r7, r6
  416786:	f106 36ff 	add.w	r6, r6, #4294967295
  41678a:	d1e9      	bne.n	416760 <_vfiprintf_r+0xa74>
  41678c:	ebc7 0309 	rsb	r3, r7, r9
  416790:	46dc      	mov	ip, fp
  416792:	9e03      	ldr	r6, [sp, #12]
  416794:	9305      	str	r3, [sp, #20]
  416796:	f7ff bbdd 	b.w	415f54 <_vfiprintf_r+0x268>
  41679a:	9806      	ldr	r0, [sp, #24]
  41679c:	9902      	ldr	r1, [sp, #8]
  41679e:	f8cd c004 	str.w	ip, [sp, #4]
  4167a2:	aa13      	add	r2, sp, #76	; 0x4c
  4167a4:	f7ff fa66 	bl	415c74 <__sprint_r.part.0>
  4167a8:	f8dd c004 	ldr.w	ip, [sp, #4]
  4167ac:	2800      	cmp	r0, #0
  4167ae:	f47f aeec 	bne.w	41658a <_vfiprintf_r+0x89e>
  4167b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4167b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4167b6:	1c59      	adds	r1, r3, #1
  4167b8:	464e      	mov	r6, r9
  4167ba:	e612      	b.n	4163e2 <_vfiprintf_r+0x6f6>
  4167bc:	9806      	ldr	r0, [sp, #24]
  4167be:	9902      	ldr	r1, [sp, #8]
  4167c0:	f8cd c004 	str.w	ip, [sp, #4]
  4167c4:	aa13      	add	r2, sp, #76	; 0x4c
  4167c6:	f7ff fa55 	bl	415c74 <__sprint_r.part.0>
  4167ca:	f8dd c004 	ldr.w	ip, [sp, #4]
  4167ce:	2800      	cmp	r0, #0
  4167d0:	f47f aedb 	bne.w	41658a <_vfiprintf_r+0x89e>
  4167d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4167d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4167d8:	1c59      	adds	r1, r3, #1
  4167da:	464e      	mov	r6, r9
  4167dc:	e610      	b.n	416400 <_vfiprintf_r+0x714>
  4167de:	2a00      	cmp	r2, #0
  4167e0:	d156      	bne.n	416890 <_vfiprintf_r+0xba4>
  4167e2:	2101      	movs	r1, #1
  4167e4:	4613      	mov	r3, r2
  4167e6:	464e      	mov	r6, r9
  4167e8:	e60e      	b.n	416408 <_vfiprintf_r+0x71c>
  4167ea:	9806      	ldr	r0, [sp, #24]
  4167ec:	9902      	ldr	r1, [sp, #8]
  4167ee:	aa13      	add	r2, sp, #76	; 0x4c
  4167f0:	f7ff fa40 	bl	415c74 <__sprint_r.part.0>
  4167f4:	2800      	cmp	r0, #0
  4167f6:	f47f aec8 	bne.w	41658a <_vfiprintf_r+0x89e>
  4167fa:	9914      	ldr	r1, [sp, #80]	; 0x50
  4167fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4167fe:	3101      	adds	r1, #1
  416800:	464e      	mov	r6, r9
  416802:	e636      	b.n	416472 <_vfiprintf_r+0x786>
  416804:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  416808:	4264      	negs	r4, r4
  41680a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  41680e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  416812:	f8cd b01c 	str.w	fp, [sp, #28]
  416816:	f8cd c014 	str.w	ip, [sp, #20]
  41681a:	2301      	movs	r3, #1
  41681c:	f7ff bb7f 	b.w	415f1e <_vfiprintf_r+0x232>
  416820:	f01a 0f10 	tst.w	sl, #16
  416824:	d11d      	bne.n	416862 <_vfiprintf_r+0xb76>
  416826:	f01a 0f40 	tst.w	sl, #64	; 0x40
  41682a:	d059      	beq.n	4168e0 <_vfiprintf_r+0xbf4>
  41682c:	9d08      	ldr	r5, [sp, #32]
  41682e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  416832:	682b      	ldr	r3, [r5, #0]
  416834:	3504      	adds	r5, #4
  416836:	9508      	str	r5, [sp, #32]
  416838:	f8a3 b000 	strh.w	fp, [r3]
  41683c:	f7ff ba89 	b.w	415d52 <_vfiprintf_r+0x66>
  416840:	9806      	ldr	r0, [sp, #24]
  416842:	9902      	ldr	r1, [sp, #8]
  416844:	f8cd c004 	str.w	ip, [sp, #4]
  416848:	aa13      	add	r2, sp, #76	; 0x4c
  41684a:	f7ff fa13 	bl	415c74 <__sprint_r.part.0>
  41684e:	f8dd c004 	ldr.w	ip, [sp, #4]
  416852:	2800      	cmp	r0, #0
  416854:	f47f ae99 	bne.w	41658a <_vfiprintf_r+0x89e>
  416858:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41685a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41685c:	1c59      	adds	r1, r3, #1
  41685e:	464e      	mov	r6, r9
  416860:	e5ae      	b.n	4163c0 <_vfiprintf_r+0x6d4>
  416862:	f8dd b020 	ldr.w	fp, [sp, #32]
  416866:	9c09      	ldr	r4, [sp, #36]	; 0x24
  416868:	f8db 3000 	ldr.w	r3, [fp]
  41686c:	f10b 0b04 	add.w	fp, fp, #4
  416870:	f8cd b020 	str.w	fp, [sp, #32]
  416874:	601c      	str	r4, [r3, #0]
  416876:	f7ff ba6c 	b.w	415d52 <_vfiprintf_r+0x66>
  41687a:	9408      	str	r4, [sp, #32]
  41687c:	f7fc ff52 	bl	413724 <strlen>
  416880:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  416884:	9005      	str	r0, [sp, #20]
  416886:	9407      	str	r4, [sp, #28]
  416888:	f04f 0c00 	mov.w	ip, #0
  41688c:	f7ff bb62 	b.w	415f54 <_vfiprintf_r+0x268>
  416890:	9806      	ldr	r0, [sp, #24]
  416892:	9902      	ldr	r1, [sp, #8]
  416894:	f8cd c004 	str.w	ip, [sp, #4]
  416898:	aa13      	add	r2, sp, #76	; 0x4c
  41689a:	f7ff f9eb 	bl	415c74 <__sprint_r.part.0>
  41689e:	f8dd c004 	ldr.w	ip, [sp, #4]
  4168a2:	2800      	cmp	r0, #0
  4168a4:	f47f ae71 	bne.w	41658a <_vfiprintf_r+0x89e>
  4168a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4168aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4168ac:	1c59      	adds	r1, r3, #1
  4168ae:	464e      	mov	r6, r9
  4168b0:	e5aa      	b.n	416408 <_vfiprintf_r+0x71c>
  4168b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4168b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4168b6:	4d03      	ldr	r5, [pc, #12]	; (4168c4 <_vfiprintf_r+0xbd8>)
  4168b8:	3301      	adds	r3, #1
  4168ba:	f7ff bb9b 	b.w	415ff4 <_vfiprintf_r+0x308>
  4168be:	bf00      	nop
  4168c0:	0041de24 	.word	0x0041de24
  4168c4:	0041de34 	.word	0x0041de34
  4168c8:	f1bc 0f06 	cmp.w	ip, #6
  4168cc:	bf34      	ite	cc
  4168ce:	4663      	movcc	r3, ip
  4168d0:	2306      	movcs	r3, #6
  4168d2:	9408      	str	r4, [sp, #32]
  4168d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  4168d8:	9305      	str	r3, [sp, #20]
  4168da:	9403      	str	r4, [sp, #12]
  4168dc:	4f16      	ldr	r7, [pc, #88]	; (416938 <_vfiprintf_r+0xc4c>)
  4168de:	e470      	b.n	4161c2 <_vfiprintf_r+0x4d6>
  4168e0:	9c08      	ldr	r4, [sp, #32]
  4168e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4168e4:	6823      	ldr	r3, [r4, #0]
  4168e6:	3404      	adds	r4, #4
  4168e8:	9408      	str	r4, [sp, #32]
  4168ea:	601d      	str	r5, [r3, #0]
  4168ec:	f7ff ba31 	b.w	415d52 <_vfiprintf_r+0x66>
  4168f0:	9814      	ldr	r0, [sp, #80]	; 0x50
  4168f2:	4d12      	ldr	r5, [pc, #72]	; (41693c <_vfiprintf_r+0xc50>)
  4168f4:	3001      	adds	r0, #1
  4168f6:	e5f8      	b.n	4164ea <_vfiprintf_r+0x7fe>
  4168f8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  4168fc:	f8cd c014 	str.w	ip, [sp, #20]
  416900:	9507      	str	r5, [sp, #28]
  416902:	9408      	str	r4, [sp, #32]
  416904:	4684      	mov	ip, r0
  416906:	f7ff bb25 	b.w	415f54 <_vfiprintf_r+0x268>
  41690a:	4608      	mov	r0, r1
  41690c:	e6ad      	b.n	41666a <_vfiprintf_r+0x97e>
  41690e:	46a0      	mov	r8, r4
  416910:	2500      	movs	r5, #0
  416912:	f7ff ba5a 	b.w	415dca <_vfiprintf_r+0xde>
  416916:	f8dd b020 	ldr.w	fp, [sp, #32]
  41691a:	f898 3001 	ldrb.w	r3, [r8, #1]
  41691e:	f8db 5000 	ldr.w	r5, [fp]
  416922:	f10b 0204 	add.w	r2, fp, #4
  416926:	2d00      	cmp	r5, #0
  416928:	9208      	str	r2, [sp, #32]
  41692a:	46a0      	mov	r8, r4
  41692c:	f6bf aa4b 	bge.w	415dc6 <_vfiprintf_r+0xda>
  416930:	f04f 35ff 	mov.w	r5, #4294967295
  416934:	f7ff ba47 	b.w	415dc6 <_vfiprintf_r+0xda>
  416938:	0041dddc 	.word	0x0041dddc
  41693c:	0041de34 	.word	0x0041de34

00416940 <__sbprintf>:
  416940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416944:	460c      	mov	r4, r1
  416946:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  41694a:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  41694e:	69e7      	ldr	r7, [r4, #28]
  416950:	6e49      	ldr	r1, [r1, #100]	; 0x64
  416952:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  416956:	9119      	str	r1, [sp, #100]	; 0x64
  416958:	ad1a      	add	r5, sp, #104	; 0x68
  41695a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  41695e:	f04f 0e00 	mov.w	lr, #0
  416962:	9707      	str	r7, [sp, #28]
  416964:	f029 0902 	bic.w	r9, r9, #2
  416968:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41696a:	9500      	str	r5, [sp, #0]
  41696c:	4669      	mov	r1, sp
  41696e:	9504      	str	r5, [sp, #16]
  416970:	9602      	str	r6, [sp, #8]
  416972:	9605      	str	r6, [sp, #20]
  416974:	f8ad 900c 	strh.w	r9, [sp, #12]
  416978:	f8ad 800e 	strh.w	r8, [sp, #14]
  41697c:	9709      	str	r7, [sp, #36]	; 0x24
  41697e:	f8cd e018 	str.w	lr, [sp, #24]
  416982:	4606      	mov	r6, r0
  416984:	f7ff f9b2 	bl	415cec <_vfiprintf_r>
  416988:	1e05      	subs	r5, r0, #0
  41698a:	db07      	blt.n	41699c <__sbprintf+0x5c>
  41698c:	4630      	mov	r0, r6
  41698e:	4669      	mov	r1, sp
  416990:	f001 f908 	bl	417ba4 <_fflush_r>
  416994:	2800      	cmp	r0, #0
  416996:	bf18      	it	ne
  416998:	f04f 35ff 	movne.w	r5, #4294967295
  41699c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4169a0:	065b      	lsls	r3, r3, #25
  4169a2:	d503      	bpl.n	4169ac <__sbprintf+0x6c>
  4169a4:	89a3      	ldrh	r3, [r4, #12]
  4169a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4169aa:	81a3      	strh	r3, [r4, #12]
  4169ac:	4628      	mov	r0, r5
  4169ae:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4169b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4169b6:	bf00      	nop

004169b8 <_write_r>:
  4169b8:	b570      	push	{r4, r5, r6, lr}
  4169ba:	4c08      	ldr	r4, [pc, #32]	; (4169dc <_write_r+0x24>)
  4169bc:	4606      	mov	r6, r0
  4169be:	2500      	movs	r5, #0
  4169c0:	4608      	mov	r0, r1
  4169c2:	4611      	mov	r1, r2
  4169c4:	461a      	mov	r2, r3
  4169c6:	6025      	str	r5, [r4, #0]
  4169c8:	f7ee fa74 	bl	404eb4 <_write>
  4169cc:	1c43      	adds	r3, r0, #1
  4169ce:	d000      	beq.n	4169d2 <_write_r+0x1a>
  4169d0:	bd70      	pop	{r4, r5, r6, pc}
  4169d2:	6823      	ldr	r3, [r4, #0]
  4169d4:	2b00      	cmp	r3, #0
  4169d6:	d0fb      	beq.n	4169d0 <_write_r+0x18>
  4169d8:	6033      	str	r3, [r6, #0]
  4169da:	bd70      	pop	{r4, r5, r6, pc}
  4169dc:	200050a8 	.word	0x200050a8

004169e0 <__swsetup_r>:
  4169e0:	4b2f      	ldr	r3, [pc, #188]	; (416aa0 <__swsetup_r+0xc0>)
  4169e2:	681b      	ldr	r3, [r3, #0]
  4169e4:	b570      	push	{r4, r5, r6, lr}
  4169e6:	4606      	mov	r6, r0
  4169e8:	460c      	mov	r4, r1
  4169ea:	b113      	cbz	r3, 4169f2 <__swsetup_r+0x12>
  4169ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4169ee:	2a00      	cmp	r2, #0
  4169f0:	d036      	beq.n	416a60 <__swsetup_r+0x80>
  4169f2:	89a5      	ldrh	r5, [r4, #12]
  4169f4:	b2ab      	uxth	r3, r5
  4169f6:	0719      	lsls	r1, r3, #28
  4169f8:	d50c      	bpl.n	416a14 <__swsetup_r+0x34>
  4169fa:	6922      	ldr	r2, [r4, #16]
  4169fc:	b1aa      	cbz	r2, 416a2a <__swsetup_r+0x4a>
  4169fe:	f013 0101 	ands.w	r1, r3, #1
  416a02:	d01e      	beq.n	416a42 <__swsetup_r+0x62>
  416a04:	6963      	ldr	r3, [r4, #20]
  416a06:	2100      	movs	r1, #0
  416a08:	425b      	negs	r3, r3
  416a0a:	61a3      	str	r3, [r4, #24]
  416a0c:	60a1      	str	r1, [r4, #8]
  416a0e:	b1f2      	cbz	r2, 416a4e <__swsetup_r+0x6e>
  416a10:	2000      	movs	r0, #0
  416a12:	bd70      	pop	{r4, r5, r6, pc}
  416a14:	06da      	lsls	r2, r3, #27
  416a16:	d53b      	bpl.n	416a90 <__swsetup_r+0xb0>
  416a18:	075b      	lsls	r3, r3, #29
  416a1a:	d425      	bmi.n	416a68 <__swsetup_r+0x88>
  416a1c:	6922      	ldr	r2, [r4, #16]
  416a1e:	f045 0308 	orr.w	r3, r5, #8
  416a22:	81a3      	strh	r3, [r4, #12]
  416a24:	b29b      	uxth	r3, r3
  416a26:	2a00      	cmp	r2, #0
  416a28:	d1e9      	bne.n	4169fe <__swsetup_r+0x1e>
  416a2a:	f403 7120 	and.w	r1, r3, #640	; 0x280
  416a2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  416a32:	d0e4      	beq.n	4169fe <__swsetup_r+0x1e>
  416a34:	4630      	mov	r0, r6
  416a36:	4621      	mov	r1, r4
  416a38:	f001 fcc2 	bl	4183c0 <__smakebuf_r>
  416a3c:	89a3      	ldrh	r3, [r4, #12]
  416a3e:	6922      	ldr	r2, [r4, #16]
  416a40:	e7dd      	b.n	4169fe <__swsetup_r+0x1e>
  416a42:	0798      	lsls	r0, r3, #30
  416a44:	bf58      	it	pl
  416a46:	6961      	ldrpl	r1, [r4, #20]
  416a48:	60a1      	str	r1, [r4, #8]
  416a4a:	2a00      	cmp	r2, #0
  416a4c:	d1e0      	bne.n	416a10 <__swsetup_r+0x30>
  416a4e:	89a3      	ldrh	r3, [r4, #12]
  416a50:	061a      	lsls	r2, r3, #24
  416a52:	d5dd      	bpl.n	416a10 <__swsetup_r+0x30>
  416a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  416a58:	81a3      	strh	r3, [r4, #12]
  416a5a:	f04f 30ff 	mov.w	r0, #4294967295
  416a5e:	bd70      	pop	{r4, r5, r6, pc}
  416a60:	4618      	mov	r0, r3
  416a62:	f001 f8bb 	bl	417bdc <__sinit>
  416a66:	e7c4      	b.n	4169f2 <__swsetup_r+0x12>
  416a68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  416a6a:	b149      	cbz	r1, 416a80 <__swsetup_r+0xa0>
  416a6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  416a70:	4299      	cmp	r1, r3
  416a72:	d003      	beq.n	416a7c <__swsetup_r+0x9c>
  416a74:	4630      	mov	r0, r6
  416a76:	f001 f9f3 	bl	417e60 <_free_r>
  416a7a:	89a5      	ldrh	r5, [r4, #12]
  416a7c:	2300      	movs	r3, #0
  416a7e:	6323      	str	r3, [r4, #48]	; 0x30
  416a80:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  416a84:	2300      	movs	r3, #0
  416a86:	6922      	ldr	r2, [r4, #16]
  416a88:	6063      	str	r3, [r4, #4]
  416a8a:	b2ad      	uxth	r5, r5
  416a8c:	6022      	str	r2, [r4, #0]
  416a8e:	e7c6      	b.n	416a1e <__swsetup_r+0x3e>
  416a90:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  416a94:	2309      	movs	r3, #9
  416a96:	6033      	str	r3, [r6, #0]
  416a98:	f04f 30ff 	mov.w	r0, #4294967295
  416a9c:	81a5      	strh	r5, [r4, #12]
  416a9e:	bd70      	pop	{r4, r5, r6, pc}
  416aa0:	20000bb0 	.word	0x20000bb0

00416aa4 <register_fini>:
  416aa4:	4b02      	ldr	r3, [pc, #8]	; (416ab0 <register_fini+0xc>)
  416aa6:	b113      	cbz	r3, 416aae <register_fini+0xa>
  416aa8:	4802      	ldr	r0, [pc, #8]	; (416ab4 <register_fini+0x10>)
  416aaa:	f000 b805 	b.w	416ab8 <atexit>
  416aae:	4770      	bx	lr
  416ab0:	00000000 	.word	0x00000000
  416ab4:	00417cd9 	.word	0x00417cd9

00416ab8 <atexit>:
  416ab8:	4601      	mov	r1, r0
  416aba:	2000      	movs	r0, #0
  416abc:	4602      	mov	r2, r0
  416abe:	4603      	mov	r3, r0
  416ac0:	f004 b8da 	b.w	41ac78 <__register_exitproc>

00416ac4 <_close_r>:
  416ac4:	b538      	push	{r3, r4, r5, lr}
  416ac6:	4c07      	ldr	r4, [pc, #28]	; (416ae4 <_close_r+0x20>)
  416ac8:	2300      	movs	r3, #0
  416aca:	4605      	mov	r5, r0
  416acc:	4608      	mov	r0, r1
  416ace:	6023      	str	r3, [r4, #0]
  416ad0:	f7fb fb6e 	bl	4121b0 <_close>
  416ad4:	1c43      	adds	r3, r0, #1
  416ad6:	d000      	beq.n	416ada <_close_r+0x16>
  416ad8:	bd38      	pop	{r3, r4, r5, pc}
  416ada:	6823      	ldr	r3, [r4, #0]
  416adc:	2b00      	cmp	r3, #0
  416ade:	d0fb      	beq.n	416ad8 <_close_r+0x14>
  416ae0:	602b      	str	r3, [r5, #0]
  416ae2:	bd38      	pop	{r3, r4, r5, pc}
  416ae4:	200050a8 	.word	0x200050a8

00416ae8 <quorem>:
  416ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416aec:	6903      	ldr	r3, [r0, #16]
  416aee:	690d      	ldr	r5, [r1, #16]
  416af0:	429d      	cmp	r5, r3
  416af2:	b083      	sub	sp, #12
  416af4:	4683      	mov	fp, r0
  416af6:	f300 808b 	bgt.w	416c10 <quorem+0x128>
  416afa:	3d01      	subs	r5, #1
  416afc:	f101 0414 	add.w	r4, r1, #20
  416b00:	f100 0a14 	add.w	sl, r0, #20
  416b04:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  416b08:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  416b0c:	3201      	adds	r2, #1
  416b0e:	fbb3 f8f2 	udiv	r8, r3, r2
  416b12:	00aa      	lsls	r2, r5, #2
  416b14:	4691      	mov	r9, r2
  416b16:	9200      	str	r2, [sp, #0]
  416b18:	4452      	add	r2, sl
  416b1a:	44a1      	add	r9, r4
  416b1c:	9201      	str	r2, [sp, #4]
  416b1e:	f1b8 0f00 	cmp.w	r8, #0
  416b22:	d03d      	beq.n	416ba0 <quorem+0xb8>
  416b24:	f04f 0e00 	mov.w	lr, #0
  416b28:	4670      	mov	r0, lr
  416b2a:	4622      	mov	r2, r4
  416b2c:	4653      	mov	r3, sl
  416b2e:	468c      	mov	ip, r1
  416b30:	f852 6b04 	ldr.w	r6, [r2], #4
  416b34:	6819      	ldr	r1, [r3, #0]
  416b36:	b2b7      	uxth	r7, r6
  416b38:	0c36      	lsrs	r6, r6, #16
  416b3a:	fb07 ee08 	mla	lr, r7, r8, lr
  416b3e:	fb06 f608 	mul.w	r6, r6, r8
  416b42:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  416b46:	fa1f f78e 	uxth.w	r7, lr
  416b4a:	1bc7      	subs	r7, r0, r7
  416b4c:	b2b0      	uxth	r0, r6
  416b4e:	fa17 f781 	uxtah	r7, r7, r1
  416b52:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  416b56:	eb00 4027 	add.w	r0, r0, r7, asr #16
  416b5a:	b2bf      	uxth	r7, r7
  416b5c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  416b60:	4591      	cmp	r9, r2
  416b62:	f843 7b04 	str.w	r7, [r3], #4
  416b66:	ea4f 4020 	mov.w	r0, r0, asr #16
  416b6a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  416b6e:	d2df      	bcs.n	416b30 <quorem+0x48>
  416b70:	9a00      	ldr	r2, [sp, #0]
  416b72:	f85a 3002 	ldr.w	r3, [sl, r2]
  416b76:	4661      	mov	r1, ip
  416b78:	b993      	cbnz	r3, 416ba0 <quorem+0xb8>
  416b7a:	9a01      	ldr	r2, [sp, #4]
  416b7c:	1f13      	subs	r3, r2, #4
  416b7e:	459a      	cmp	sl, r3
  416b80:	d20c      	bcs.n	416b9c <quorem+0xb4>
  416b82:	f852 3c04 	ldr.w	r3, [r2, #-4]
  416b86:	b94b      	cbnz	r3, 416b9c <quorem+0xb4>
  416b88:	f1a2 0308 	sub.w	r3, r2, #8
  416b8c:	e002      	b.n	416b94 <quorem+0xac>
  416b8e:	681a      	ldr	r2, [r3, #0]
  416b90:	3b04      	subs	r3, #4
  416b92:	b91a      	cbnz	r2, 416b9c <quorem+0xb4>
  416b94:	459a      	cmp	sl, r3
  416b96:	f105 35ff 	add.w	r5, r5, #4294967295
  416b9a:	d3f8      	bcc.n	416b8e <quorem+0xa6>
  416b9c:	f8cb 5010 	str.w	r5, [fp, #16]
  416ba0:	4658      	mov	r0, fp
  416ba2:	f001 ffd3 	bl	418b4c <__mcmp>
  416ba6:	2800      	cmp	r0, #0
  416ba8:	db2e      	blt.n	416c08 <quorem+0x120>
  416baa:	f108 0801 	add.w	r8, r8, #1
  416bae:	4653      	mov	r3, sl
  416bb0:	2200      	movs	r2, #0
  416bb2:	f854 6b04 	ldr.w	r6, [r4], #4
  416bb6:	6818      	ldr	r0, [r3, #0]
  416bb8:	b2b1      	uxth	r1, r6
  416bba:	1a52      	subs	r2, r2, r1
  416bbc:	0c36      	lsrs	r6, r6, #16
  416bbe:	fa12 f180 	uxtah	r1, r2, r0
  416bc2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  416bc6:	eb02 4221 	add.w	r2, r2, r1, asr #16
  416bca:	b289      	uxth	r1, r1
  416bcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  416bd0:	45a1      	cmp	r9, r4
  416bd2:	f843 1b04 	str.w	r1, [r3], #4
  416bd6:	ea4f 4222 	mov.w	r2, r2, asr #16
  416bda:	d2ea      	bcs.n	416bb2 <quorem+0xca>
  416bdc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  416be0:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  416be4:	b982      	cbnz	r2, 416c08 <quorem+0x120>
  416be6:	1f1a      	subs	r2, r3, #4
  416be8:	4592      	cmp	sl, r2
  416bea:	d20b      	bcs.n	416c04 <quorem+0x11c>
  416bec:	f853 2c04 	ldr.w	r2, [r3, #-4]
  416bf0:	b942      	cbnz	r2, 416c04 <quorem+0x11c>
  416bf2:	3b08      	subs	r3, #8
  416bf4:	e002      	b.n	416bfc <quorem+0x114>
  416bf6:	681a      	ldr	r2, [r3, #0]
  416bf8:	3b04      	subs	r3, #4
  416bfa:	b91a      	cbnz	r2, 416c04 <quorem+0x11c>
  416bfc:	459a      	cmp	sl, r3
  416bfe:	f105 35ff 	add.w	r5, r5, #4294967295
  416c02:	d3f8      	bcc.n	416bf6 <quorem+0x10e>
  416c04:	f8cb 5010 	str.w	r5, [fp, #16]
  416c08:	4640      	mov	r0, r8
  416c0a:	b003      	add	sp, #12
  416c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416c10:	2000      	movs	r0, #0
  416c12:	b003      	add	sp, #12
  416c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416c18 <_dtoa_r>:
  416c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416c1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  416c1e:	b09b      	sub	sp, #108	; 0x6c
  416c20:	4604      	mov	r4, r0
  416c22:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  416c24:	4692      	mov	sl, r2
  416c26:	469b      	mov	fp, r3
  416c28:	b149      	cbz	r1, 416c3e <_dtoa_r+0x26>
  416c2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  416c2c:	604b      	str	r3, [r1, #4]
  416c2e:	2201      	movs	r2, #1
  416c30:	fa02 f303 	lsl.w	r3, r2, r3
  416c34:	608b      	str	r3, [r1, #8]
  416c36:	f001 fd45 	bl	4186c4 <_Bfree>
  416c3a:	2300      	movs	r3, #0
  416c3c:	6423      	str	r3, [r4, #64]	; 0x40
  416c3e:	f1bb 0f00 	cmp.w	fp, #0
  416c42:	46d9      	mov	r9, fp
  416c44:	db33      	blt.n	416cae <_dtoa_r+0x96>
  416c46:	2300      	movs	r3, #0
  416c48:	602b      	str	r3, [r5, #0]
  416c4a:	4ba5      	ldr	r3, [pc, #660]	; (416ee0 <_dtoa_r+0x2c8>)
  416c4c:	461a      	mov	r2, r3
  416c4e:	ea09 0303 	and.w	r3, r9, r3
  416c52:	4293      	cmp	r3, r2
  416c54:	d014      	beq.n	416c80 <_dtoa_r+0x68>
  416c56:	4650      	mov	r0, sl
  416c58:	4659      	mov	r1, fp
  416c5a:	2200      	movs	r2, #0
  416c5c:	2300      	movs	r3, #0
  416c5e:	f005 f8cf 	bl	41be00 <__aeabi_dcmpeq>
  416c62:	4680      	mov	r8, r0
  416c64:	b348      	cbz	r0, 416cba <_dtoa_r+0xa2>
  416c66:	9e26      	ldr	r6, [sp, #152]	; 0x98
  416c68:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  416c6a:	2301      	movs	r3, #1
  416c6c:	6033      	str	r3, [r6, #0]
  416c6e:	2d00      	cmp	r5, #0
  416c70:	f000 80c9 	beq.w	416e06 <_dtoa_r+0x1ee>
  416c74:	489b      	ldr	r0, [pc, #620]	; (416ee4 <_dtoa_r+0x2cc>)
  416c76:	6028      	str	r0, [r5, #0]
  416c78:	3801      	subs	r0, #1
  416c7a:	b01b      	add	sp, #108	; 0x6c
  416c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416c80:	9d26      	ldr	r5, [sp, #152]	; 0x98
  416c82:	f242 730f 	movw	r3, #9999	; 0x270f
  416c86:	602b      	str	r3, [r5, #0]
  416c88:	f1ba 0f00 	cmp.w	sl, #0
  416c8c:	f000 80a4 	beq.w	416dd8 <_dtoa_r+0x1c0>
  416c90:	4895      	ldr	r0, [pc, #596]	; (416ee8 <_dtoa_r+0x2d0>)
  416c92:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  416c94:	2e00      	cmp	r6, #0
  416c96:	d0f0      	beq.n	416c7a <_dtoa_r+0x62>
  416c98:	78c3      	ldrb	r3, [r0, #3]
  416c9a:	2b00      	cmp	r3, #0
  416c9c:	f000 80b5 	beq.w	416e0a <_dtoa_r+0x1f2>
  416ca0:	f100 0308 	add.w	r3, r0, #8
  416ca4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  416ca6:	602b      	str	r3, [r5, #0]
  416ca8:	b01b      	add	sp, #108	; 0x6c
  416caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416cae:	2301      	movs	r3, #1
  416cb0:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  416cb4:	602b      	str	r3, [r5, #0]
  416cb6:	46cb      	mov	fp, r9
  416cb8:	e7c7      	b.n	416c4a <_dtoa_r+0x32>
  416cba:	aa19      	add	r2, sp, #100	; 0x64
  416cbc:	ab18      	add	r3, sp, #96	; 0x60
  416cbe:	e88d 000c 	stmia.w	sp, {r2, r3}
  416cc2:	4620      	mov	r0, r4
  416cc4:	4652      	mov	r2, sl
  416cc6:	465b      	mov	r3, fp
  416cc8:	f002 f848 	bl	418d5c <__d2b>
  416ccc:	ea5f 5519 	movs.w	r5, r9, lsr #20
  416cd0:	900a      	str	r0, [sp, #40]	; 0x28
  416cd2:	f040 808a 	bne.w	416dea <_dtoa_r+0x1d2>
  416cd6:	9f18      	ldr	r7, [sp, #96]	; 0x60
  416cd8:	9d19      	ldr	r5, [sp, #100]	; 0x64
  416cda:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  416cde:	443d      	add	r5, r7
  416ce0:	429d      	cmp	r5, r3
  416ce2:	f2c0 8294 	blt.w	41720e <_dtoa_r+0x5f6>
  416ce6:	331f      	adds	r3, #31
  416ce8:	f205 4212 	addw	r2, r5, #1042	; 0x412
  416cec:	1b5b      	subs	r3, r3, r5
  416cee:	fa09 f303 	lsl.w	r3, r9, r3
  416cf2:	fa2a f202 	lsr.w	r2, sl, r2
  416cf6:	ea43 0002 	orr.w	r0, r3, r2
  416cfa:	f004 fda3 	bl	41b844 <__aeabi_ui2d>
  416cfe:	2601      	movs	r6, #1
  416d00:	3d01      	subs	r5, #1
  416d02:	46b8      	mov	r8, r7
  416d04:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  416d08:	9616      	str	r6, [sp, #88]	; 0x58
  416d0a:	2200      	movs	r2, #0
  416d0c:	4b77      	ldr	r3, [pc, #476]	; (416eec <_dtoa_r+0x2d4>)
  416d0e:	f004 fc5b 	bl	41b5c8 <__aeabi_dsub>
  416d12:	a36d      	add	r3, pc, #436	; (adr r3, 416ec8 <_dtoa_r+0x2b0>)
  416d14:	e9d3 2300 	ldrd	r2, r3, [r3]
  416d18:	f004 fe0a 	bl	41b930 <__aeabi_dmul>
  416d1c:	a36c      	add	r3, pc, #432	; (adr r3, 416ed0 <_dtoa_r+0x2b8>)
  416d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  416d22:	f004 fc53 	bl	41b5cc <__adddf3>
  416d26:	4606      	mov	r6, r0
  416d28:	4628      	mov	r0, r5
  416d2a:	460f      	mov	r7, r1
  416d2c:	f004 fd9a 	bl	41b864 <__aeabi_i2d>
  416d30:	a369      	add	r3, pc, #420	; (adr r3, 416ed8 <_dtoa_r+0x2c0>)
  416d32:	e9d3 2300 	ldrd	r2, r3, [r3]
  416d36:	f004 fdfb 	bl	41b930 <__aeabi_dmul>
  416d3a:	4602      	mov	r2, r0
  416d3c:	460b      	mov	r3, r1
  416d3e:	4630      	mov	r0, r6
  416d40:	4639      	mov	r1, r7
  416d42:	f004 fc43 	bl	41b5cc <__adddf3>
  416d46:	4606      	mov	r6, r0
  416d48:	460f      	mov	r7, r1
  416d4a:	f005 f88b 	bl	41be64 <__aeabi_d2iz>
  416d4e:	4639      	mov	r1, r7
  416d50:	9007      	str	r0, [sp, #28]
  416d52:	2200      	movs	r2, #0
  416d54:	4630      	mov	r0, r6
  416d56:	2300      	movs	r3, #0
  416d58:	f005 f85c 	bl	41be14 <__aeabi_dcmplt>
  416d5c:	2800      	cmp	r0, #0
  416d5e:	f040 8228 	bne.w	4171b2 <_dtoa_r+0x59a>
  416d62:	9e07      	ldr	r6, [sp, #28]
  416d64:	2e16      	cmp	r6, #22
  416d66:	f200 8221 	bhi.w	4171ac <_dtoa_r+0x594>
  416d6a:	4b61      	ldr	r3, [pc, #388]	; (416ef0 <_dtoa_r+0x2d8>)
  416d6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  416d70:	e9d3 0100 	ldrd	r0, r1, [r3]
  416d74:	4652      	mov	r2, sl
  416d76:	465b      	mov	r3, fp
  416d78:	f005 f86a 	bl	41be50 <__aeabi_dcmpgt>
  416d7c:	2800      	cmp	r0, #0
  416d7e:	f000 824b 	beq.w	417218 <_dtoa_r+0x600>
  416d82:	3e01      	subs	r6, #1
  416d84:	9607      	str	r6, [sp, #28]
  416d86:	2600      	movs	r6, #0
  416d88:	960e      	str	r6, [sp, #56]	; 0x38
  416d8a:	ebc5 0508 	rsb	r5, r5, r8
  416d8e:	3d01      	subs	r5, #1
  416d90:	9506      	str	r5, [sp, #24]
  416d92:	f100 8225 	bmi.w	4171e0 <_dtoa_r+0x5c8>
  416d96:	2500      	movs	r5, #0
  416d98:	9508      	str	r5, [sp, #32]
  416d9a:	9e07      	ldr	r6, [sp, #28]
  416d9c:	2e00      	cmp	r6, #0
  416d9e:	f2c0 8216 	blt.w	4171ce <_dtoa_r+0x5b6>
  416da2:	9d06      	ldr	r5, [sp, #24]
  416da4:	960d      	str	r6, [sp, #52]	; 0x34
  416da6:	4435      	add	r5, r6
  416da8:	2600      	movs	r6, #0
  416daa:	9506      	str	r5, [sp, #24]
  416dac:	960c      	str	r6, [sp, #48]	; 0x30
  416dae:	9d24      	ldr	r5, [sp, #144]	; 0x90
  416db0:	2d09      	cmp	r5, #9
  416db2:	d82c      	bhi.n	416e0e <_dtoa_r+0x1f6>
  416db4:	2d05      	cmp	r5, #5
  416db6:	bfc4      	itt	gt
  416db8:	3d04      	subgt	r5, #4
  416dba:	9524      	strgt	r5, [sp, #144]	; 0x90
  416dbc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  416dbe:	f1a6 0302 	sub.w	r3, r6, #2
  416dc2:	bfcc      	ite	gt
  416dc4:	2500      	movgt	r5, #0
  416dc6:	2501      	movle	r5, #1
  416dc8:	2b03      	cmp	r3, #3
  416dca:	d822      	bhi.n	416e12 <_dtoa_r+0x1fa>
  416dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
  416dd0:	029e03b7 	.word	0x029e03b7
  416dd4:	049a03c0 	.word	0x049a03c0
  416dd8:	4a46      	ldr	r2, [pc, #280]	; (416ef4 <_dtoa_r+0x2dc>)
  416dda:	4b43      	ldr	r3, [pc, #268]	; (416ee8 <_dtoa_r+0x2d0>)
  416ddc:	f3c9 0013 	ubfx	r0, r9, #0, #20
  416de0:	2800      	cmp	r0, #0
  416de2:	bf0c      	ite	eq
  416de4:	4610      	moveq	r0, r2
  416de6:	4618      	movne	r0, r3
  416de8:	e753      	b.n	416c92 <_dtoa_r+0x7a>
  416dea:	f3cb 0313 	ubfx	r3, fp, #0, #20
  416dee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  416df2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  416df6:	4650      	mov	r0, sl
  416df8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  416dfc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  416e00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  416e04:	e781      	b.n	416d0a <_dtoa_r+0xf2>
  416e06:	483c      	ldr	r0, [pc, #240]	; (416ef8 <_dtoa_r+0x2e0>)
  416e08:	e737      	b.n	416c7a <_dtoa_r+0x62>
  416e0a:	1cc3      	adds	r3, r0, #3
  416e0c:	e74a      	b.n	416ca4 <_dtoa_r+0x8c>
  416e0e:	2500      	movs	r5, #0
  416e10:	9524      	str	r5, [sp, #144]	; 0x90
  416e12:	2500      	movs	r5, #0
  416e14:	6465      	str	r5, [r4, #68]	; 0x44
  416e16:	4629      	mov	r1, r5
  416e18:	4620      	mov	r0, r4
  416e1a:	f001 fc2d 	bl	418678 <_Balloc>
  416e1e:	f04f 39ff 	mov.w	r9, #4294967295
  416e22:	2601      	movs	r6, #1
  416e24:	9009      	str	r0, [sp, #36]	; 0x24
  416e26:	9525      	str	r5, [sp, #148]	; 0x94
  416e28:	6420      	str	r0, [r4, #64]	; 0x40
  416e2a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  416e2e:	960b      	str	r6, [sp, #44]	; 0x2c
  416e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
  416e32:	2b00      	cmp	r3, #0
  416e34:	f2c0 80d2 	blt.w	416fdc <_dtoa_r+0x3c4>
  416e38:	9e07      	ldr	r6, [sp, #28]
  416e3a:	2e0e      	cmp	r6, #14
  416e3c:	f300 80ce 	bgt.w	416fdc <_dtoa_r+0x3c4>
  416e40:	4b2b      	ldr	r3, [pc, #172]	; (416ef0 <_dtoa_r+0x2d8>)
  416e42:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  416e46:	e9d3 0100 	ldrd	r0, r1, [r3]
  416e4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  416e4e:	9925      	ldr	r1, [sp, #148]	; 0x94
  416e50:	2900      	cmp	r1, #0
  416e52:	f2c0 8380 	blt.w	417556 <_dtoa_r+0x93e>
  416e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  416e5a:	4659      	mov	r1, fp
  416e5c:	4650      	mov	r0, sl
  416e5e:	f004 fe91 	bl	41bb84 <__aeabi_ddiv>
  416e62:	f004 ffff 	bl	41be64 <__aeabi_d2iz>
  416e66:	4605      	mov	r5, r0
  416e68:	f004 fcfc 	bl	41b864 <__aeabi_i2d>
  416e6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  416e70:	f004 fd5e 	bl	41b930 <__aeabi_dmul>
  416e74:	4602      	mov	r2, r0
  416e76:	460b      	mov	r3, r1
  416e78:	4650      	mov	r0, sl
  416e7a:	4659      	mov	r1, fp
  416e7c:	f004 fba4 	bl	41b5c8 <__aeabi_dsub>
  416e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
  416e82:	f105 0330 	add.w	r3, r5, #48	; 0x30
  416e86:	f1b9 0f01 	cmp.w	r9, #1
  416e8a:	4606      	mov	r6, r0
  416e8c:	460f      	mov	r7, r1
  416e8e:	7013      	strb	r3, [r2, #0]
  416e90:	f102 0b01 	add.w	fp, r2, #1
  416e94:	d064      	beq.n	416f60 <_dtoa_r+0x348>
  416e96:	2200      	movs	r2, #0
  416e98:	4b18      	ldr	r3, [pc, #96]	; (416efc <_dtoa_r+0x2e4>)
  416e9a:	f004 fd49 	bl	41b930 <__aeabi_dmul>
  416e9e:	2200      	movs	r2, #0
  416ea0:	2300      	movs	r3, #0
  416ea2:	4606      	mov	r6, r0
  416ea4:	460f      	mov	r7, r1
  416ea6:	f004 ffab 	bl	41be00 <__aeabi_dcmpeq>
  416eaa:	2800      	cmp	r0, #0
  416eac:	f040 8081 	bne.w	416fb2 <_dtoa_r+0x39a>
  416eb0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  416eb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  416eb6:	9403      	str	r4, [sp, #12]
  416eb8:	44c8      	add	r8, r9
  416eba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  416ebe:	f105 0902 	add.w	r9, r5, #2
  416ec2:	e028      	b.n	416f16 <_dtoa_r+0x2fe>
  416ec4:	f3af 8000 	nop.w
  416ec8:	636f4361 	.word	0x636f4361
  416ecc:	3fd287a7 	.word	0x3fd287a7
  416ed0:	8b60c8b3 	.word	0x8b60c8b3
  416ed4:	3fc68a28 	.word	0x3fc68a28
  416ed8:	509f79fb 	.word	0x509f79fb
  416edc:	3fd34413 	.word	0x3fd34413
  416ee0:	7ff00000 	.word	0x7ff00000
  416ee4:	0041dde5 	.word	0x0041dde5
  416ee8:	0041df54 	.word	0x0041df54
  416eec:	3ff80000 	.word	0x3ff80000
  416ef0:	0041df68 	.word	0x0041df68
  416ef4:	0041df48 	.word	0x0041df48
  416ef8:	0041dde4 	.word	0x0041dde4
  416efc:	40240000 	.word	0x40240000
  416f00:	f004 fd16 	bl	41b930 <__aeabi_dmul>
  416f04:	2200      	movs	r2, #0
  416f06:	2300      	movs	r3, #0
  416f08:	4606      	mov	r6, r0
  416f0a:	460f      	mov	r7, r1
  416f0c:	f004 ff78 	bl	41be00 <__aeabi_dcmpeq>
  416f10:	2800      	cmp	r0, #0
  416f12:	f040 83c1 	bne.w	417698 <_dtoa_r+0xa80>
  416f16:	4652      	mov	r2, sl
  416f18:	465b      	mov	r3, fp
  416f1a:	4630      	mov	r0, r6
  416f1c:	4639      	mov	r1, r7
  416f1e:	f004 fe31 	bl	41bb84 <__aeabi_ddiv>
  416f22:	f004 ff9f 	bl	41be64 <__aeabi_d2iz>
  416f26:	4605      	mov	r5, r0
  416f28:	f004 fc9c 	bl	41b864 <__aeabi_i2d>
  416f2c:	4652      	mov	r2, sl
  416f2e:	465b      	mov	r3, fp
  416f30:	f004 fcfe 	bl	41b930 <__aeabi_dmul>
  416f34:	4602      	mov	r2, r0
  416f36:	460b      	mov	r3, r1
  416f38:	4630      	mov	r0, r6
  416f3a:	4639      	mov	r1, r7
  416f3c:	f004 fb44 	bl	41b5c8 <__aeabi_dsub>
  416f40:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  416f44:	45c1      	cmp	r9, r8
  416f46:	f809 ec01 	strb.w	lr, [r9, #-1]
  416f4a:	464c      	mov	r4, r9
  416f4c:	4606      	mov	r6, r0
  416f4e:	460f      	mov	r7, r1
  416f50:	f04f 0200 	mov.w	r2, #0
  416f54:	4ba7      	ldr	r3, [pc, #668]	; (4171f4 <_dtoa_r+0x5dc>)
  416f56:	f109 0901 	add.w	r9, r9, #1
  416f5a:	d1d1      	bne.n	416f00 <_dtoa_r+0x2e8>
  416f5c:	46a3      	mov	fp, r4
  416f5e:	9c03      	ldr	r4, [sp, #12]
  416f60:	4632      	mov	r2, r6
  416f62:	463b      	mov	r3, r7
  416f64:	4630      	mov	r0, r6
  416f66:	4639      	mov	r1, r7
  416f68:	f004 fb30 	bl	41b5cc <__adddf3>
  416f6c:	4606      	mov	r6, r0
  416f6e:	460f      	mov	r7, r1
  416f70:	4632      	mov	r2, r6
  416f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  416f76:	463b      	mov	r3, r7
  416f78:	f004 ff4c 	bl	41be14 <__aeabi_dcmplt>
  416f7c:	b940      	cbnz	r0, 416f90 <_dtoa_r+0x378>
  416f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  416f82:	4632      	mov	r2, r6
  416f84:	463b      	mov	r3, r7
  416f86:	f004 ff3b 	bl	41be00 <__aeabi_dcmpeq>
  416f8a:	b190      	cbz	r0, 416fb2 <_dtoa_r+0x39a>
  416f8c:	07eb      	lsls	r3, r5, #31
  416f8e:	d510      	bpl.n	416fb2 <_dtoa_r+0x39a>
  416f90:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  416f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
  416f96:	e005      	b.n	416fa4 <_dtoa_r+0x38c>
  416f98:	429a      	cmp	r2, r3
  416f9a:	f000 8428 	beq.w	4177ee <_dtoa_r+0xbd6>
  416f9e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  416fa2:	469b      	mov	fp, r3
  416fa4:	2d39      	cmp	r5, #57	; 0x39
  416fa6:	f10b 33ff 	add.w	r3, fp, #4294967295
  416faa:	d0f5      	beq.n	416f98 <_dtoa_r+0x380>
  416fac:	1c6a      	adds	r2, r5, #1
  416fae:	b2d2      	uxtb	r2, r2
  416fb0:	701a      	strb	r2, [r3, #0]
  416fb2:	4620      	mov	r0, r4
  416fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
  416fb6:	f001 fb85 	bl	4186c4 <_Bfree>
  416fba:	9e07      	ldr	r6, [sp, #28]
  416fbc:	9d26      	ldr	r5, [sp, #152]	; 0x98
  416fbe:	1c73      	adds	r3, r6, #1
  416fc0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  416fc2:	2200      	movs	r2, #0
  416fc4:	f88b 2000 	strb.w	r2, [fp]
  416fc8:	602b      	str	r3, [r5, #0]
  416fca:	2e00      	cmp	r6, #0
  416fcc:	f000 8325 	beq.w	41761a <_dtoa_r+0xa02>
  416fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  416fd2:	f8c6 b000 	str.w	fp, [r6]
  416fd6:	b01b      	add	sp, #108	; 0x6c
  416fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416fdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  416fde:	2d00      	cmp	r5, #0
  416fe0:	f000 8103 	beq.w	4171ea <_dtoa_r+0x5d2>
  416fe4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  416fe6:	2e01      	cmp	r6, #1
  416fe8:	f340 82dc 	ble.w	4175a4 <_dtoa_r+0x98c>
  416fec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  416fee:	f109 37ff 	add.w	r7, r9, #4294967295
  416ff2:	42be      	cmp	r6, r7
  416ff4:	f2c0 8389 	blt.w	41770a <_dtoa_r+0xaf2>
  416ff8:	1bf7      	subs	r7, r6, r7
  416ffa:	f1b9 0f00 	cmp.w	r9, #0
  416ffe:	f2c0 8486 	blt.w	41790e <_dtoa_r+0xcf6>
  417002:	9d08      	ldr	r5, [sp, #32]
  417004:	464b      	mov	r3, r9
  417006:	9e08      	ldr	r6, [sp, #32]
  417008:	441e      	add	r6, r3
  41700a:	9608      	str	r6, [sp, #32]
  41700c:	9e06      	ldr	r6, [sp, #24]
  41700e:	4620      	mov	r0, r4
  417010:	441e      	add	r6, r3
  417012:	2101      	movs	r1, #1
  417014:	9606      	str	r6, [sp, #24]
  417016:	f001 fc45 	bl	4188a4 <__i2b>
  41701a:	4606      	mov	r6, r0
  41701c:	b165      	cbz	r5, 417038 <_dtoa_r+0x420>
  41701e:	9806      	ldr	r0, [sp, #24]
  417020:	2800      	cmp	r0, #0
  417022:	dd09      	ble.n	417038 <_dtoa_r+0x420>
  417024:	4603      	mov	r3, r0
  417026:	9908      	ldr	r1, [sp, #32]
  417028:	42ab      	cmp	r3, r5
  41702a:	bfa8      	it	ge
  41702c:	462b      	movge	r3, r5
  41702e:	1ac9      	subs	r1, r1, r3
  417030:	1ac0      	subs	r0, r0, r3
  417032:	9108      	str	r1, [sp, #32]
  417034:	1aed      	subs	r5, r5, r3
  417036:	9006      	str	r0, [sp, #24]
  417038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41703a:	2a00      	cmp	r2, #0
  41703c:	dd1d      	ble.n	41707a <_dtoa_r+0x462>
  41703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  417040:	2b00      	cmp	r3, #0
  417042:	f000 8358 	beq.w	4176f6 <_dtoa_r+0xade>
  417046:	2f00      	cmp	r7, #0
  417048:	dd11      	ble.n	41706e <_dtoa_r+0x456>
  41704a:	4631      	mov	r1, r6
  41704c:	463a      	mov	r2, r7
  41704e:	4620      	mov	r0, r4
  417050:	f001 fcd0 	bl	4189f4 <__pow5mult>
  417054:	4606      	mov	r6, r0
  417056:	4631      	mov	r1, r6
  417058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41705a:	4620      	mov	r0, r4
  41705c:	f001 fc2c 	bl	4188b8 <__multiply>
  417060:	990a      	ldr	r1, [sp, #40]	; 0x28
  417062:	4680      	mov	r8, r0
  417064:	4620      	mov	r0, r4
  417066:	f001 fb2d 	bl	4186c4 <_Bfree>
  41706a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  41706e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  417072:	ebbe 0207 	subs.w	r2, lr, r7
  417076:	f040 828f 	bne.w	417598 <_dtoa_r+0x980>
  41707a:	4620      	mov	r0, r4
  41707c:	2101      	movs	r1, #1
  41707e:	f001 fc11 	bl	4188a4 <__i2b>
  417082:	4680      	mov	r8, r0
  417084:	980d      	ldr	r0, [sp, #52]	; 0x34
  417086:	2800      	cmp	r0, #0
  417088:	dd05      	ble.n	417096 <_dtoa_r+0x47e>
  41708a:	4641      	mov	r1, r8
  41708c:	4620      	mov	r0, r4
  41708e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  417090:	f001 fcb0 	bl	4189f4 <__pow5mult>
  417094:	4680      	mov	r8, r0
  417096:	9924      	ldr	r1, [sp, #144]	; 0x90
  417098:	2901      	cmp	r1, #1
  41709a:	f340 82c1 	ble.w	417620 <_dtoa_r+0xa08>
  41709e:	2700      	movs	r7, #0
  4170a0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4170a2:	2800      	cmp	r0, #0
  4170a4:	f040 82af 	bne.w	417606 <_dtoa_r+0x9ee>
  4170a8:	2001      	movs	r0, #1
  4170aa:	9b06      	ldr	r3, [sp, #24]
  4170ac:	4403      	add	r3, r0
  4170ae:	f013 031f 	ands.w	r3, r3, #31
  4170b2:	f000 80a1 	beq.w	4171f8 <_dtoa_r+0x5e0>
  4170b6:	f1c3 0220 	rsb	r2, r3, #32
  4170ba:	2a04      	cmp	r2, #4
  4170bc:	f340 84b5 	ble.w	417a2a <_dtoa_r+0xe12>
  4170c0:	9908      	ldr	r1, [sp, #32]
  4170c2:	9a06      	ldr	r2, [sp, #24]
  4170c4:	f1c3 031c 	rsb	r3, r3, #28
  4170c8:	4419      	add	r1, r3
  4170ca:	441a      	add	r2, r3
  4170cc:	9108      	str	r1, [sp, #32]
  4170ce:	441d      	add	r5, r3
  4170d0:	9206      	str	r2, [sp, #24]
  4170d2:	9908      	ldr	r1, [sp, #32]
  4170d4:	2900      	cmp	r1, #0
  4170d6:	dd05      	ble.n	4170e4 <_dtoa_r+0x4cc>
  4170d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4170da:	9a08      	ldr	r2, [sp, #32]
  4170dc:	4620      	mov	r0, r4
  4170de:	f001 fcd7 	bl	418a90 <__lshift>
  4170e2:	900a      	str	r0, [sp, #40]	; 0x28
  4170e4:	9a06      	ldr	r2, [sp, #24]
  4170e6:	2a00      	cmp	r2, #0
  4170e8:	dd04      	ble.n	4170f4 <_dtoa_r+0x4dc>
  4170ea:	4641      	mov	r1, r8
  4170ec:	4620      	mov	r0, r4
  4170ee:	f001 fccf 	bl	418a90 <__lshift>
  4170f2:	4680      	mov	r8, r0
  4170f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4170f6:	2b00      	cmp	r3, #0
  4170f8:	f040 826a 	bne.w	4175d0 <_dtoa_r+0x9b8>
  4170fc:	f1b9 0f00 	cmp.w	r9, #0
  417100:	f340 82a6 	ble.w	417650 <_dtoa_r+0xa38>
  417104:	980b      	ldr	r0, [sp, #44]	; 0x2c
  417106:	2800      	cmp	r0, #0
  417108:	f040 8088 	bne.w	41721c <_dtoa_r+0x604>
  41710c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41710e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  417110:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  417114:	e006      	b.n	417124 <_dtoa_r+0x50c>
  417116:	4639      	mov	r1, r7
  417118:	4620      	mov	r0, r4
  41711a:	220a      	movs	r2, #10
  41711c:	2300      	movs	r3, #0
  41711e:	f001 fadb 	bl	4186d8 <__multadd>
  417122:	4607      	mov	r7, r0
  417124:	4638      	mov	r0, r7
  417126:	4641      	mov	r1, r8
  417128:	f7ff fcde 	bl	416ae8 <quorem>
  41712c:	3030      	adds	r0, #48	; 0x30
  41712e:	f80b 0005 	strb.w	r0, [fp, r5]
  417132:	3501      	adds	r5, #1
  417134:	45a9      	cmp	r9, r5
  417136:	dcee      	bgt.n	417116 <_dtoa_r+0x4fe>
  417138:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  41713c:	970a      	str	r7, [sp, #40]	; 0x28
  41713e:	4682      	mov	sl, r0
  417140:	f1b9 0f01 	cmp.w	r9, #1
  417144:	bfac      	ite	ge
  417146:	44cb      	addge	fp, r9
  417148:	f10b 0b01 	addlt.w	fp, fp, #1
  41714c:	2500      	movs	r5, #0
  41714e:	990a      	ldr	r1, [sp, #40]	; 0x28
  417150:	2201      	movs	r2, #1
  417152:	4620      	mov	r0, r4
  417154:	f001 fc9c 	bl	418a90 <__lshift>
  417158:	4641      	mov	r1, r8
  41715a:	900a      	str	r0, [sp, #40]	; 0x28
  41715c:	f001 fcf6 	bl	418b4c <__mcmp>
  417160:	2800      	cmp	r0, #0
  417162:	f340 8309 	ble.w	417778 <_dtoa_r+0xb60>
  417166:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  41716a:	9909      	ldr	r1, [sp, #36]	; 0x24
  41716c:	e005      	b.n	41717a <_dtoa_r+0x562>
  41716e:	4299      	cmp	r1, r3
  417170:	f000 828b 	beq.w	41768a <_dtoa_r+0xa72>
  417174:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  417178:	469b      	mov	fp, r3
  41717a:	2a39      	cmp	r2, #57	; 0x39
  41717c:	f10b 33ff 	add.w	r3, fp, #4294967295
  417180:	d0f5      	beq.n	41716e <_dtoa_r+0x556>
  417182:	3201      	adds	r2, #1
  417184:	701a      	strb	r2, [r3, #0]
  417186:	4641      	mov	r1, r8
  417188:	4620      	mov	r0, r4
  41718a:	f001 fa9b 	bl	4186c4 <_Bfree>
  41718e:	2e00      	cmp	r6, #0
  417190:	f43f af0f 	beq.w	416fb2 <_dtoa_r+0x39a>
  417194:	b12d      	cbz	r5, 4171a2 <_dtoa_r+0x58a>
  417196:	42b5      	cmp	r5, r6
  417198:	d003      	beq.n	4171a2 <_dtoa_r+0x58a>
  41719a:	4629      	mov	r1, r5
  41719c:	4620      	mov	r0, r4
  41719e:	f001 fa91 	bl	4186c4 <_Bfree>
  4171a2:	4631      	mov	r1, r6
  4171a4:	4620      	mov	r0, r4
  4171a6:	f001 fa8d 	bl	4186c4 <_Bfree>
  4171aa:	e702      	b.n	416fb2 <_dtoa_r+0x39a>
  4171ac:	2601      	movs	r6, #1
  4171ae:	960e      	str	r6, [sp, #56]	; 0x38
  4171b0:	e5eb      	b.n	416d8a <_dtoa_r+0x172>
  4171b2:	9807      	ldr	r0, [sp, #28]
  4171b4:	f004 fb56 	bl	41b864 <__aeabi_i2d>
  4171b8:	4632      	mov	r2, r6
  4171ba:	463b      	mov	r3, r7
  4171bc:	f004 fe20 	bl	41be00 <__aeabi_dcmpeq>
  4171c0:	2800      	cmp	r0, #0
  4171c2:	f47f adce 	bne.w	416d62 <_dtoa_r+0x14a>
  4171c6:	9e07      	ldr	r6, [sp, #28]
  4171c8:	3e01      	subs	r6, #1
  4171ca:	9607      	str	r6, [sp, #28]
  4171cc:	e5c9      	b.n	416d62 <_dtoa_r+0x14a>
  4171ce:	9e07      	ldr	r6, [sp, #28]
  4171d0:	9d08      	ldr	r5, [sp, #32]
  4171d2:	1bad      	subs	r5, r5, r6
  4171d4:	9508      	str	r5, [sp, #32]
  4171d6:	4275      	negs	r5, r6
  4171d8:	2600      	movs	r6, #0
  4171da:	950c      	str	r5, [sp, #48]	; 0x30
  4171dc:	960d      	str	r6, [sp, #52]	; 0x34
  4171de:	e5e6      	b.n	416dae <_dtoa_r+0x196>
  4171e0:	426d      	negs	r5, r5
  4171e2:	2600      	movs	r6, #0
  4171e4:	9508      	str	r5, [sp, #32]
  4171e6:	9606      	str	r6, [sp, #24]
  4171e8:	e5d7      	b.n	416d9a <_dtoa_r+0x182>
  4171ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4171ec:	9d08      	ldr	r5, [sp, #32]
  4171ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4171f0:	e714      	b.n	41701c <_dtoa_r+0x404>
  4171f2:	bf00      	nop
  4171f4:	40240000 	.word	0x40240000
  4171f8:	231c      	movs	r3, #28
  4171fa:	f8dd e020 	ldr.w	lr, [sp, #32]
  4171fe:	9806      	ldr	r0, [sp, #24]
  417200:	449e      	add	lr, r3
  417202:	4418      	add	r0, r3
  417204:	f8cd e020 	str.w	lr, [sp, #32]
  417208:	441d      	add	r5, r3
  41720a:	9006      	str	r0, [sp, #24]
  41720c:	e761      	b.n	4170d2 <_dtoa_r+0x4ba>
  41720e:	48a7      	ldr	r0, [pc, #668]	; (4174ac <_dtoa_r+0x894>)
  417210:	1b40      	subs	r0, r0, r5
  417212:	fa0a f000 	lsl.w	r0, sl, r0
  417216:	e570      	b.n	416cfa <_dtoa_r+0xe2>
  417218:	900e      	str	r0, [sp, #56]	; 0x38
  41721a:	e5b6      	b.n	416d8a <_dtoa_r+0x172>
  41721c:	2d00      	cmp	r5, #0
  41721e:	dd05      	ble.n	41722c <_dtoa_r+0x614>
  417220:	4631      	mov	r1, r6
  417222:	462a      	mov	r2, r5
  417224:	4620      	mov	r0, r4
  417226:	f001 fc33 	bl	418a90 <__lshift>
  41722a:	4606      	mov	r6, r0
  41722c:	2f00      	cmp	r7, #0
  41722e:	f040 82e8 	bne.w	417802 <_dtoa_r+0xbea>
  417232:	4637      	mov	r7, r6
  417234:	9d09      	ldr	r5, [sp, #36]	; 0x24
  417236:	9809      	ldr	r0, [sp, #36]	; 0x24
  417238:	444d      	add	r5, r9
  41723a:	9508      	str	r5, [sp, #32]
  41723c:	f00a 0501 	and.w	r5, sl, #1
  417240:	950b      	str	r5, [sp, #44]	; 0x2c
  417242:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  417246:	1c45      	adds	r5, r0, #1
  417248:	e00a      	b.n	417260 <_dtoa_r+0x648>
  41724a:	f001 fa45 	bl	4186d8 <__multadd>
  41724e:	4639      	mov	r1, r7
  417250:	4606      	mov	r6, r0
  417252:	220a      	movs	r2, #10
  417254:	4620      	mov	r0, r4
  417256:	2300      	movs	r3, #0
  417258:	f001 fa3e 	bl	4186d8 <__multadd>
  41725c:	4607      	mov	r7, r0
  41725e:	3501      	adds	r5, #1
  417260:	4641      	mov	r1, r8
  417262:	4648      	mov	r0, r9
  417264:	f7ff fc40 	bl	416ae8 <quorem>
  417268:	4631      	mov	r1, r6
  41726a:	4683      	mov	fp, r0
  41726c:	4648      	mov	r0, r9
  41726e:	f001 fc6d 	bl	418b4c <__mcmp>
  417272:	4641      	mov	r1, r8
  417274:	9003      	str	r0, [sp, #12]
  417276:	463a      	mov	r2, r7
  417278:	4620      	mov	r0, r4
  41727a:	f001 fc8b 	bl	418b94 <__mdiff>
  41727e:	68c2      	ldr	r2, [r0, #12]
  417280:	1e69      	subs	r1, r5, #1
  417282:	4603      	mov	r3, r0
  417284:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  417288:	9106      	str	r1, [sp, #24]
  41728a:	2a00      	cmp	r2, #0
  41728c:	f040 8193 	bne.w	4175b6 <_dtoa_r+0x99e>
  417290:	4619      	mov	r1, r3
  417292:	4648      	mov	r0, r9
  417294:	9302      	str	r3, [sp, #8]
  417296:	f001 fc59 	bl	418b4c <__mcmp>
  41729a:	9b02      	ldr	r3, [sp, #8]
  41729c:	4602      	mov	r2, r0
  41729e:	4619      	mov	r1, r3
  4172a0:	4620      	mov	r0, r4
  4172a2:	9202      	str	r2, [sp, #8]
  4172a4:	f001 fa0e 	bl	4186c4 <_Bfree>
  4172a8:	9a02      	ldr	r2, [sp, #8]
  4172aa:	b92a      	cbnz	r2, 4172b8 <_dtoa_r+0x6a0>
  4172ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4172ae:	b91b      	cbnz	r3, 4172b8 <_dtoa_r+0x6a0>
  4172b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4172b2:	2800      	cmp	r0, #0
  4172b4:	f000 8391 	beq.w	4179da <_dtoa_r+0xdc2>
  4172b8:	9b03      	ldr	r3, [sp, #12]
  4172ba:	2b00      	cmp	r3, #0
  4172bc:	f2c0 8234 	blt.w	417728 <_dtoa_r+0xb10>
  4172c0:	d105      	bne.n	4172ce <_dtoa_r+0x6b6>
  4172c2:	9824      	ldr	r0, [sp, #144]	; 0x90
  4172c4:	b918      	cbnz	r0, 4172ce <_dtoa_r+0x6b6>
  4172c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4172c8:	2900      	cmp	r1, #0
  4172ca:	f000 822d 	beq.w	417728 <_dtoa_r+0xb10>
  4172ce:	2a00      	cmp	r2, #0
  4172d0:	f300 82ab 	bgt.w	41782a <_dtoa_r+0xc12>
  4172d4:	f8dd e020 	ldr.w	lr, [sp, #32]
  4172d8:	f805 ac01 	strb.w	sl, [r5, #-1]
  4172dc:	4575      	cmp	r5, lr
  4172de:	46ab      	mov	fp, r5
  4172e0:	f000 82b3 	beq.w	41784a <_dtoa_r+0xc32>
  4172e4:	4649      	mov	r1, r9
  4172e6:	220a      	movs	r2, #10
  4172e8:	2300      	movs	r3, #0
  4172ea:	4620      	mov	r0, r4
  4172ec:	f001 f9f4 	bl	4186d8 <__multadd>
  4172f0:	42be      	cmp	r6, r7
  4172f2:	4681      	mov	r9, r0
  4172f4:	4631      	mov	r1, r6
  4172f6:	4620      	mov	r0, r4
  4172f8:	f04f 020a 	mov.w	r2, #10
  4172fc:	f04f 0300 	mov.w	r3, #0
  417300:	d1a3      	bne.n	41724a <_dtoa_r+0x632>
  417302:	f001 f9e9 	bl	4186d8 <__multadd>
  417306:	4606      	mov	r6, r0
  417308:	4607      	mov	r7, r0
  41730a:	e7a8      	b.n	41725e <_dtoa_r+0x646>
  41730c:	2600      	movs	r6, #0
  41730e:	960b      	str	r6, [sp, #44]	; 0x2c
  417310:	9e07      	ldr	r6, [sp, #28]
  417312:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  417316:	44b6      	add	lr, r6
  417318:	f10e 0901 	add.w	r9, lr, #1
  41731c:	f1b9 0f00 	cmp.w	r9, #0
  417320:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  417324:	464e      	mov	r6, r9
  417326:	f340 8150 	ble.w	4175ca <_dtoa_r+0x9b2>
  41732a:	2100      	movs	r1, #0
  41732c:	2e17      	cmp	r6, #23
  41732e:	6461      	str	r1, [r4, #68]	; 0x44
  417330:	d90a      	bls.n	417348 <_dtoa_r+0x730>
  417332:	2201      	movs	r2, #1
  417334:	2304      	movs	r3, #4
  417336:	005b      	lsls	r3, r3, #1
  417338:	f103 0014 	add.w	r0, r3, #20
  41733c:	42b0      	cmp	r0, r6
  41733e:	4611      	mov	r1, r2
  417340:	f102 0201 	add.w	r2, r2, #1
  417344:	d9f7      	bls.n	417336 <_dtoa_r+0x71e>
  417346:	6461      	str	r1, [r4, #68]	; 0x44
  417348:	4620      	mov	r0, r4
  41734a:	f001 f995 	bl	418678 <_Balloc>
  41734e:	2e0e      	cmp	r6, #14
  417350:	9009      	str	r0, [sp, #36]	; 0x24
  417352:	6420      	str	r0, [r4, #64]	; 0x40
  417354:	f63f ad6c 	bhi.w	416e30 <_dtoa_r+0x218>
  417358:	2d00      	cmp	r5, #0
  41735a:	f43f ad69 	beq.w	416e30 <_dtoa_r+0x218>
  41735e:	9d07      	ldr	r5, [sp, #28]
  417360:	2d00      	cmp	r5, #0
  417362:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  417366:	f340 821b 	ble.w	4177a0 <_dtoa_r+0xb88>
  41736a:	4b51      	ldr	r3, [pc, #324]	; (4174b0 <_dtoa_r+0x898>)
  41736c:	f005 020f 	and.w	r2, r5, #15
  417370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  417374:	112d      	asrs	r5, r5, #4
  417376:	e9d3 6700 	ldrd	r6, r7, [r3]
  41737a:	06eb      	lsls	r3, r5, #27
  41737c:	f140 81cd 	bpl.w	41771a <_dtoa_r+0xb02>
  417380:	4b4c      	ldr	r3, [pc, #304]	; (4174b4 <_dtoa_r+0x89c>)
  417382:	4650      	mov	r0, sl
  417384:	4659      	mov	r1, fp
  417386:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  41738a:	f004 fbfb 	bl	41bb84 <__aeabi_ddiv>
  41738e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  417392:	f005 050f 	and.w	r5, r5, #15
  417396:	f04f 0803 	mov.w	r8, #3
  41739a:	b18d      	cbz	r5, 4173c0 <_dtoa_r+0x7a8>
  41739c:	f8df a114 	ldr.w	sl, [pc, #276]	; 4174b4 <_dtoa_r+0x89c>
  4173a0:	4630      	mov	r0, r6
  4173a2:	4639      	mov	r1, r7
  4173a4:	07ee      	lsls	r6, r5, #31
  4173a6:	d505      	bpl.n	4173b4 <_dtoa_r+0x79c>
  4173a8:	e9da 2300 	ldrd	r2, r3, [sl]
  4173ac:	f108 0801 	add.w	r8, r8, #1
  4173b0:	f004 fabe 	bl	41b930 <__aeabi_dmul>
  4173b4:	106d      	asrs	r5, r5, #1
  4173b6:	f10a 0a08 	add.w	sl, sl, #8
  4173ba:	d1f3      	bne.n	4173a4 <_dtoa_r+0x78c>
  4173bc:	4606      	mov	r6, r0
  4173be:	460f      	mov	r7, r1
  4173c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4173c4:	4632      	mov	r2, r6
  4173c6:	463b      	mov	r3, r7
  4173c8:	f004 fbdc 	bl	41bb84 <__aeabi_ddiv>
  4173cc:	4682      	mov	sl, r0
  4173ce:	468b      	mov	fp, r1
  4173d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4173d2:	b145      	cbz	r5, 4173e6 <_dtoa_r+0x7ce>
  4173d4:	4650      	mov	r0, sl
  4173d6:	4659      	mov	r1, fp
  4173d8:	2200      	movs	r2, #0
  4173da:	4b37      	ldr	r3, [pc, #220]	; (4174b8 <_dtoa_r+0x8a0>)
  4173dc:	f004 fd1a 	bl	41be14 <__aeabi_dcmplt>
  4173e0:	2800      	cmp	r0, #0
  4173e2:	f040 82a9 	bne.w	417938 <_dtoa_r+0xd20>
  4173e6:	4640      	mov	r0, r8
  4173e8:	f004 fa3c 	bl	41b864 <__aeabi_i2d>
  4173ec:	4652      	mov	r2, sl
  4173ee:	465b      	mov	r3, fp
  4173f0:	f004 fa9e 	bl	41b930 <__aeabi_dmul>
  4173f4:	2200      	movs	r2, #0
  4173f6:	4b31      	ldr	r3, [pc, #196]	; (4174bc <_dtoa_r+0x8a4>)
  4173f8:	f004 f8e8 	bl	41b5cc <__adddf3>
  4173fc:	4606      	mov	r6, r0
  4173fe:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  417402:	f1b9 0f00 	cmp.w	r9, #0
  417406:	f000 815a 	beq.w	4176be <_dtoa_r+0xaa6>
  41740a:	9d07      	ldr	r5, [sp, #28]
  41740c:	9517      	str	r5, [sp, #92]	; 0x5c
  41740e:	46c8      	mov	r8, r9
  417410:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  417412:	2d00      	cmp	r5, #0
  417414:	f000 8222 	beq.w	41785c <_dtoa_r+0xc44>
  417418:	4b25      	ldr	r3, [pc, #148]	; (4174b0 <_dtoa_r+0x898>)
  41741a:	4929      	ldr	r1, [pc, #164]	; (4174c0 <_dtoa_r+0x8a8>)
  41741c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  417420:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  417424:	2000      	movs	r0, #0
  417426:	f004 fbad 	bl	41bb84 <__aeabi_ddiv>
  41742a:	4632      	mov	r2, r6
  41742c:	463b      	mov	r3, r7
  41742e:	f004 f8cb 	bl	41b5c8 <__aeabi_dsub>
  417432:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  417436:	4659      	mov	r1, fp
  417438:	4650      	mov	r0, sl
  41743a:	f004 fd13 	bl	41be64 <__aeabi_d2iz>
  41743e:	4605      	mov	r5, r0
  417440:	f004 fa10 	bl	41b864 <__aeabi_i2d>
  417444:	4602      	mov	r2, r0
  417446:	460b      	mov	r3, r1
  417448:	4650      	mov	r0, sl
  41744a:	4659      	mov	r1, fp
  41744c:	f004 f8bc 	bl	41b5c8 <__aeabi_dsub>
  417450:	3530      	adds	r5, #48	; 0x30
  417452:	9e09      	ldr	r6, [sp, #36]	; 0x24
  417454:	e9cd 0104 	strd	r0, r1, [sp, #16]
  417458:	b2ed      	uxtb	r5, r5
  41745a:	7035      	strb	r5, [r6, #0]
  41745c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  417460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  417464:	f106 0b01 	add.w	fp, r6, #1
  417468:	f004 fcf2 	bl	41be50 <__aeabi_dcmpgt>
  41746c:	2800      	cmp	r0, #0
  41746e:	f040 82a9 	bne.w	4179c4 <_dtoa_r+0xdac>
  417472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  417476:	2000      	movs	r0, #0
  417478:	490f      	ldr	r1, [pc, #60]	; (4174b8 <_dtoa_r+0x8a0>)
  41747a:	f004 f8a5 	bl	41b5c8 <__aeabi_dsub>
  41747e:	4602      	mov	r2, r0
  417480:	460b      	mov	r3, r1
  417482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  417486:	f004 fce3 	bl	41be50 <__aeabi_dcmpgt>
  41748a:	2800      	cmp	r0, #0
  41748c:	f040 82a0 	bne.w	4179d0 <_dtoa_r+0xdb8>
  417490:	f1b8 0f01 	cmp.w	r8, #1
  417494:	f340 8180 	ble.w	417798 <_dtoa_r+0xb80>
  417498:	44b0      	add	r8, r6
  41749a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  41749e:	46a2      	mov	sl, r4
  4174a0:	46c1      	mov	r9, r8
  4174a2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4174a6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  4174aa:	e019      	b.n	4174e0 <_dtoa_r+0x8c8>
  4174ac:	fffffbee 	.word	0xfffffbee
  4174b0:	0041df68 	.word	0x0041df68
  4174b4:	0041e030 	.word	0x0041e030
  4174b8:	3ff00000 	.word	0x3ff00000
  4174bc:	401c0000 	.word	0x401c0000
  4174c0:	3fe00000 	.word	0x3fe00000
  4174c4:	2000      	movs	r0, #0
  4174c6:	49a8      	ldr	r1, [pc, #672]	; (417768 <_dtoa_r+0xb50>)
  4174c8:	f004 f87e 	bl	41b5c8 <__aeabi_dsub>
  4174cc:	4622      	mov	r2, r4
  4174ce:	462b      	mov	r3, r5
  4174d0:	f004 fca0 	bl	41be14 <__aeabi_dcmplt>
  4174d4:	2800      	cmp	r0, #0
  4174d6:	f040 8279 	bne.w	4179cc <_dtoa_r+0xdb4>
  4174da:	45cb      	cmp	fp, r9
  4174dc:	f000 8159 	beq.w	417792 <_dtoa_r+0xb7a>
  4174e0:	4620      	mov	r0, r4
  4174e2:	4629      	mov	r1, r5
  4174e4:	2200      	movs	r2, #0
  4174e6:	4ba1      	ldr	r3, [pc, #644]	; (41776c <_dtoa_r+0xb54>)
  4174e8:	f004 fa22 	bl	41b930 <__aeabi_dmul>
  4174ec:	2200      	movs	r2, #0
  4174ee:	4b9f      	ldr	r3, [pc, #636]	; (41776c <_dtoa_r+0xb54>)
  4174f0:	4604      	mov	r4, r0
  4174f2:	460d      	mov	r5, r1
  4174f4:	4630      	mov	r0, r6
  4174f6:	4639      	mov	r1, r7
  4174f8:	f004 fa1a 	bl	41b930 <__aeabi_dmul>
  4174fc:	460f      	mov	r7, r1
  4174fe:	4606      	mov	r6, r0
  417500:	f004 fcb0 	bl	41be64 <__aeabi_d2iz>
  417504:	4680      	mov	r8, r0
  417506:	f004 f9ad 	bl	41b864 <__aeabi_i2d>
  41750a:	4602      	mov	r2, r0
  41750c:	460b      	mov	r3, r1
  41750e:	4630      	mov	r0, r6
  417510:	4639      	mov	r1, r7
  417512:	f004 f859 	bl	41b5c8 <__aeabi_dsub>
  417516:	f108 0830 	add.w	r8, r8, #48	; 0x30
  41751a:	fa5f f888 	uxtb.w	r8, r8
  41751e:	4622      	mov	r2, r4
  417520:	462b      	mov	r3, r5
  417522:	f80b 8b01 	strb.w	r8, [fp], #1
  417526:	4606      	mov	r6, r0
  417528:	460f      	mov	r7, r1
  41752a:	f004 fc73 	bl	41be14 <__aeabi_dcmplt>
  41752e:	4632      	mov	r2, r6
  417530:	463b      	mov	r3, r7
  417532:	2800      	cmp	r0, #0
  417534:	d0c6      	beq.n	4174c4 <_dtoa_r+0x8ac>
  417536:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  417538:	9607      	str	r6, [sp, #28]
  41753a:	4654      	mov	r4, sl
  41753c:	e539      	b.n	416fb2 <_dtoa_r+0x39a>
  41753e:	2600      	movs	r6, #0
  417540:	960b      	str	r6, [sp, #44]	; 0x2c
  417542:	9825      	ldr	r0, [sp, #148]	; 0x94
  417544:	2800      	cmp	r0, #0
  417546:	dd3c      	ble.n	4175c2 <_dtoa_r+0x9aa>
  417548:	4606      	mov	r6, r0
  41754a:	900f      	str	r0, [sp, #60]	; 0x3c
  41754c:	4681      	mov	r9, r0
  41754e:	e6ec      	b.n	41732a <_dtoa_r+0x712>
  417550:	2601      	movs	r6, #1
  417552:	960b      	str	r6, [sp, #44]	; 0x2c
  417554:	e7f5      	b.n	417542 <_dtoa_r+0x92a>
  417556:	f1b9 0f00 	cmp.w	r9, #0
  41755a:	f73f ac7c 	bgt.w	416e56 <_dtoa_r+0x23e>
  41755e:	f040 80c6 	bne.w	4176ee <_dtoa_r+0xad6>
  417562:	2200      	movs	r2, #0
  417564:	4b82      	ldr	r3, [pc, #520]	; (417770 <_dtoa_r+0xb58>)
  417566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  41756a:	f004 f9e1 	bl	41b930 <__aeabi_dmul>
  41756e:	4652      	mov	r2, sl
  417570:	465b      	mov	r3, fp
  417572:	f004 fc63 	bl	41be3c <__aeabi_dcmpge>
  417576:	46c8      	mov	r8, r9
  417578:	464e      	mov	r6, r9
  41757a:	2800      	cmp	r0, #0
  41757c:	d07c      	beq.n	417678 <_dtoa_r+0xa60>
  41757e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  417580:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  417584:	43ed      	mvns	r5, r5
  417586:	9507      	str	r5, [sp, #28]
  417588:	4641      	mov	r1, r8
  41758a:	4620      	mov	r0, r4
  41758c:	f001 f89a 	bl	4186c4 <_Bfree>
  417590:	2e00      	cmp	r6, #0
  417592:	f47f ae06 	bne.w	4171a2 <_dtoa_r+0x58a>
  417596:	e50c      	b.n	416fb2 <_dtoa_r+0x39a>
  417598:	990a      	ldr	r1, [sp, #40]	; 0x28
  41759a:	4620      	mov	r0, r4
  41759c:	f001 fa2a 	bl	4189f4 <__pow5mult>
  4175a0:	900a      	str	r0, [sp, #40]	; 0x28
  4175a2:	e56a      	b.n	41707a <_dtoa_r+0x462>
  4175a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
  4175a6:	2d00      	cmp	r5, #0
  4175a8:	f000 81b7 	beq.w	41791a <_dtoa_r+0xd02>
  4175ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4175b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4175b2:	9d08      	ldr	r5, [sp, #32]
  4175b4:	e527      	b.n	417006 <_dtoa_r+0x3ee>
  4175b6:	4601      	mov	r1, r0
  4175b8:	4620      	mov	r0, r4
  4175ba:	f001 f883 	bl	4186c4 <_Bfree>
  4175be:	2201      	movs	r2, #1
  4175c0:	e67a      	b.n	4172b8 <_dtoa_r+0x6a0>
  4175c2:	2601      	movs	r6, #1
  4175c4:	9625      	str	r6, [sp, #148]	; 0x94
  4175c6:	960f      	str	r6, [sp, #60]	; 0x3c
  4175c8:	46b1      	mov	r9, r6
  4175ca:	2100      	movs	r1, #0
  4175cc:	6461      	str	r1, [r4, #68]	; 0x44
  4175ce:	e6bb      	b.n	417348 <_dtoa_r+0x730>
  4175d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4175d2:	4641      	mov	r1, r8
  4175d4:	f001 faba 	bl	418b4c <__mcmp>
  4175d8:	2800      	cmp	r0, #0
  4175da:	f6bf ad8f 	bge.w	4170fc <_dtoa_r+0x4e4>
  4175de:	f8dd e01c 	ldr.w	lr, [sp, #28]
  4175e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4175e4:	f10e 3eff 	add.w	lr, lr, #4294967295
  4175e8:	4620      	mov	r0, r4
  4175ea:	220a      	movs	r2, #10
  4175ec:	2300      	movs	r3, #0
  4175ee:	f8cd e01c 	str.w	lr, [sp, #28]
  4175f2:	f001 f871 	bl	4186d8 <__multadd>
  4175f6:	900a      	str	r0, [sp, #40]	; 0x28
  4175f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4175fa:	2800      	cmp	r0, #0
  4175fc:	f040 8207 	bne.w	417a0e <_dtoa_r+0xdf6>
  417600:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  417604:	e57a      	b.n	4170fc <_dtoa_r+0x4e4>
  417606:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41760a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  41760e:	6918      	ldr	r0, [r3, #16]
  417610:	f001 f8fa 	bl	418808 <__hi0bits>
  417614:	f1c0 0020 	rsb	r0, r0, #32
  417618:	e547      	b.n	4170aa <_dtoa_r+0x492>
  41761a:	9809      	ldr	r0, [sp, #36]	; 0x24
  41761c:	f7ff bb2d 	b.w	416c7a <_dtoa_r+0x62>
  417620:	f1ba 0f00 	cmp.w	sl, #0
  417624:	f47f ad3b 	bne.w	41709e <_dtoa_r+0x486>
  417628:	f3cb 0313 	ubfx	r3, fp, #0, #20
  41762c:	2b00      	cmp	r3, #0
  41762e:	f040 817b 	bne.w	417928 <_dtoa_r+0xd10>
  417632:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  417636:	0d3f      	lsrs	r7, r7, #20
  417638:	053f      	lsls	r7, r7, #20
  41763a:	2f00      	cmp	r7, #0
  41763c:	f43f ad30 	beq.w	4170a0 <_dtoa_r+0x488>
  417640:	9a08      	ldr	r2, [sp, #32]
  417642:	9b06      	ldr	r3, [sp, #24]
  417644:	3201      	adds	r2, #1
  417646:	3301      	adds	r3, #1
  417648:	9208      	str	r2, [sp, #32]
  41764a:	9306      	str	r3, [sp, #24]
  41764c:	2701      	movs	r7, #1
  41764e:	e527      	b.n	4170a0 <_dtoa_r+0x488>
  417650:	9924      	ldr	r1, [sp, #144]	; 0x90
  417652:	2902      	cmp	r1, #2
  417654:	f77f ad56 	ble.w	417104 <_dtoa_r+0x4ec>
  417658:	f1b9 0f00 	cmp.w	r9, #0
  41765c:	d18f      	bne.n	41757e <_dtoa_r+0x966>
  41765e:	4641      	mov	r1, r8
  417660:	464b      	mov	r3, r9
  417662:	2205      	movs	r2, #5
  417664:	4620      	mov	r0, r4
  417666:	f001 f837 	bl	4186d8 <__multadd>
  41766a:	4680      	mov	r8, r0
  41766c:	4641      	mov	r1, r8
  41766e:	980a      	ldr	r0, [sp, #40]	; 0x28
  417670:	f001 fa6c 	bl	418b4c <__mcmp>
  417674:	2800      	cmp	r0, #0
  417676:	dd82      	ble.n	41757e <_dtoa_r+0x966>
  417678:	9d07      	ldr	r5, [sp, #28]
  41767a:	3501      	adds	r5, #1
  41767c:	9507      	str	r5, [sp, #28]
  41767e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  417680:	2331      	movs	r3, #49	; 0x31
  417682:	702b      	strb	r3, [r5, #0]
  417684:	f105 0b01 	add.w	fp, r5, #1
  417688:	e77e      	b.n	417588 <_dtoa_r+0x970>
  41768a:	9807      	ldr	r0, [sp, #28]
  41768c:	9909      	ldr	r1, [sp, #36]	; 0x24
  41768e:	2331      	movs	r3, #49	; 0x31
  417690:	3001      	adds	r0, #1
  417692:	9007      	str	r0, [sp, #28]
  417694:	700b      	strb	r3, [r1, #0]
  417696:	e576      	b.n	417186 <_dtoa_r+0x56e>
  417698:	46a3      	mov	fp, r4
  41769a:	9c03      	ldr	r4, [sp, #12]
  41769c:	e489      	b.n	416fb2 <_dtoa_r+0x39a>
  41769e:	4640      	mov	r0, r8
  4176a0:	f004 f8e0 	bl	41b864 <__aeabi_i2d>
  4176a4:	4602      	mov	r2, r0
  4176a6:	460b      	mov	r3, r1
  4176a8:	4650      	mov	r0, sl
  4176aa:	4659      	mov	r1, fp
  4176ac:	f004 f940 	bl	41b930 <__aeabi_dmul>
  4176b0:	2200      	movs	r2, #0
  4176b2:	4b30      	ldr	r3, [pc, #192]	; (417774 <_dtoa_r+0xb5c>)
  4176b4:	f003 ff8a 	bl	41b5cc <__adddf3>
  4176b8:	4606      	mov	r6, r0
  4176ba:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4176be:	4650      	mov	r0, sl
  4176c0:	4659      	mov	r1, fp
  4176c2:	2200      	movs	r2, #0
  4176c4:	4b2a      	ldr	r3, [pc, #168]	; (417770 <_dtoa_r+0xb58>)
  4176c6:	f003 ff7f 	bl	41b5c8 <__aeabi_dsub>
  4176ca:	4632      	mov	r2, r6
  4176cc:	463b      	mov	r3, r7
  4176ce:	4682      	mov	sl, r0
  4176d0:	468b      	mov	fp, r1
  4176d2:	f004 fbbd 	bl	41be50 <__aeabi_dcmpgt>
  4176d6:	2800      	cmp	r0, #0
  4176d8:	f040 80bc 	bne.w	417854 <_dtoa_r+0xc3c>
  4176dc:	4632      	mov	r2, r6
  4176de:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4176e2:	4650      	mov	r0, sl
  4176e4:	4659      	mov	r1, fp
  4176e6:	f004 fb95 	bl	41be14 <__aeabi_dcmplt>
  4176ea:	2800      	cmp	r0, #0
  4176ec:	d054      	beq.n	417798 <_dtoa_r+0xb80>
  4176ee:	f04f 0800 	mov.w	r8, #0
  4176f2:	4646      	mov	r6, r8
  4176f4:	e743      	b.n	41757e <_dtoa_r+0x966>
  4176f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4176f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4176fa:	4620      	mov	r0, r4
  4176fc:	f001 f97a 	bl	4189f4 <__pow5mult>
  417700:	900a      	str	r0, [sp, #40]	; 0x28
  417702:	e4ba      	b.n	41707a <_dtoa_r+0x462>
  417704:	2601      	movs	r6, #1
  417706:	960b      	str	r6, [sp, #44]	; 0x2c
  417708:	e602      	b.n	417310 <_dtoa_r+0x6f8>
  41770a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  41770c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  41770e:	970c      	str	r7, [sp, #48]	; 0x30
  417710:	1b7b      	subs	r3, r7, r5
  417712:	441e      	add	r6, r3
  417714:	960d      	str	r6, [sp, #52]	; 0x34
  417716:	2700      	movs	r7, #0
  417718:	e46f      	b.n	416ffa <_dtoa_r+0x3e2>
  41771a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  41771e:	f04f 0802 	mov.w	r8, #2
  417722:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  417726:	e638      	b.n	41739a <_dtoa_r+0x782>
  417728:	2a00      	cmp	r2, #0
  41772a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  41772e:	46d9      	mov	r9, fp
  417730:	dd11      	ble.n	417756 <_dtoa_r+0xb3e>
  417732:	990a      	ldr	r1, [sp, #40]	; 0x28
  417734:	2201      	movs	r2, #1
  417736:	4620      	mov	r0, r4
  417738:	f001 f9aa 	bl	418a90 <__lshift>
  41773c:	4641      	mov	r1, r8
  41773e:	900a      	str	r0, [sp, #40]	; 0x28
  417740:	f001 fa04 	bl	418b4c <__mcmp>
  417744:	2800      	cmp	r0, #0
  417746:	f340 815b 	ble.w	417a00 <_dtoa_r+0xde8>
  41774a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  41774e:	f000 811a 	beq.w	417986 <_dtoa_r+0xd6e>
  417752:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  417756:	9b06      	ldr	r3, [sp, #24]
  417758:	4635      	mov	r5, r6
  41775a:	f883 a000 	strb.w	sl, [r3]
  41775e:	f103 0b01 	add.w	fp, r3, #1
  417762:	463e      	mov	r6, r7
  417764:	e50f      	b.n	417186 <_dtoa_r+0x56e>
  417766:	bf00      	nop
  417768:	3ff00000 	.word	0x3ff00000
  41776c:	40240000 	.word	0x40240000
  417770:	40140000 	.word	0x40140000
  417774:	401c0000 	.word	0x401c0000
  417778:	d103      	bne.n	417782 <_dtoa_r+0xb6a>
  41777a:	f01a 0f01 	tst.w	sl, #1
  41777e:	f47f acf2 	bne.w	417166 <_dtoa_r+0x54e>
  417782:	465b      	mov	r3, fp
  417784:	469b      	mov	fp, r3
  417786:	3b01      	subs	r3, #1
  417788:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  41778c:	2a30      	cmp	r2, #48	; 0x30
  41778e:	d0f9      	beq.n	417784 <_dtoa_r+0xb6c>
  417790:	e4f9      	b.n	417186 <_dtoa_r+0x56e>
  417792:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  417796:	4654      	mov	r4, sl
  417798:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  41779c:	f7ff bb48 	b.w	416e30 <_dtoa_r+0x218>
  4177a0:	9e07      	ldr	r6, [sp, #28]
  4177a2:	4275      	negs	r5, r6
  4177a4:	2d00      	cmp	r5, #0
  4177a6:	f000 80c2 	beq.w	41792e <_dtoa_r+0xd16>
  4177aa:	4ba3      	ldr	r3, [pc, #652]	; (417a38 <_dtoa_r+0xe20>)
  4177ac:	f005 020f 	and.w	r2, r5, #15
  4177b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4177b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4177b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4177bc:	f004 f8b8 	bl	41b930 <__aeabi_dmul>
  4177c0:	112d      	asrs	r5, r5, #4
  4177c2:	4682      	mov	sl, r0
  4177c4:	468b      	mov	fp, r1
  4177c6:	f000 812d 	beq.w	417a24 <_dtoa_r+0xe0c>
  4177ca:	4e9c      	ldr	r6, [pc, #624]	; (417a3c <_dtoa_r+0xe24>)
  4177cc:	f04f 0802 	mov.w	r8, #2
  4177d0:	07ea      	lsls	r2, r5, #31
  4177d2:	d505      	bpl.n	4177e0 <_dtoa_r+0xbc8>
  4177d4:	e9d6 2300 	ldrd	r2, r3, [r6]
  4177d8:	f108 0801 	add.w	r8, r8, #1
  4177dc:	f004 f8a8 	bl	41b930 <__aeabi_dmul>
  4177e0:	106d      	asrs	r5, r5, #1
  4177e2:	f106 0608 	add.w	r6, r6, #8
  4177e6:	d1f3      	bne.n	4177d0 <_dtoa_r+0xbb8>
  4177e8:	4682      	mov	sl, r0
  4177ea:	468b      	mov	fp, r1
  4177ec:	e5f0      	b.n	4173d0 <_dtoa_r+0x7b8>
  4177ee:	9e07      	ldr	r6, [sp, #28]
  4177f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4177f2:	2230      	movs	r2, #48	; 0x30
  4177f4:	702a      	strb	r2, [r5, #0]
  4177f6:	3601      	adds	r6, #1
  4177f8:	2231      	movs	r2, #49	; 0x31
  4177fa:	9607      	str	r6, [sp, #28]
  4177fc:	701a      	strb	r2, [r3, #0]
  4177fe:	f7ff bbd8 	b.w	416fb2 <_dtoa_r+0x39a>
  417802:	6871      	ldr	r1, [r6, #4]
  417804:	4620      	mov	r0, r4
  417806:	f000 ff37 	bl	418678 <_Balloc>
  41780a:	6933      	ldr	r3, [r6, #16]
  41780c:	1c9a      	adds	r2, r3, #2
  41780e:	4605      	mov	r5, r0
  417810:	0092      	lsls	r2, r2, #2
  417812:	f106 010c 	add.w	r1, r6, #12
  417816:	300c      	adds	r0, #12
  417818:	f7fb fba6 	bl	412f68 <memcpy>
  41781c:	4620      	mov	r0, r4
  41781e:	4629      	mov	r1, r5
  417820:	2201      	movs	r2, #1
  417822:	f001 f935 	bl	418a90 <__lshift>
  417826:	4607      	mov	r7, r0
  417828:	e504      	b.n	417234 <_dtoa_r+0x61c>
  41782a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  41782e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  417832:	f000 80a8 	beq.w	417986 <_dtoa_r+0xd6e>
  417836:	9d06      	ldr	r5, [sp, #24]
  417838:	f10a 0301 	add.w	r3, sl, #1
  41783c:	702b      	strb	r3, [r5, #0]
  41783e:	4635      	mov	r5, r6
  417840:	9e06      	ldr	r6, [sp, #24]
  417842:	f106 0b01 	add.w	fp, r6, #1
  417846:	463e      	mov	r6, r7
  417848:	e49d      	b.n	417186 <_dtoa_r+0x56e>
  41784a:	4635      	mov	r5, r6
  41784c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  417850:	463e      	mov	r6, r7
  417852:	e47c      	b.n	41714e <_dtoa_r+0x536>
  417854:	f04f 0800 	mov.w	r8, #0
  417858:	4646      	mov	r6, r8
  41785a:	e70d      	b.n	417678 <_dtoa_r+0xa60>
  41785c:	4976      	ldr	r1, [pc, #472]	; (417a38 <_dtoa_r+0xe20>)
  41785e:	f108 35ff 	add.w	r5, r8, #4294967295
  417862:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  417866:	4632      	mov	r2, r6
  417868:	463b      	mov	r3, r7
  41786a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41786e:	9510      	str	r5, [sp, #64]	; 0x40
  417870:	f004 f85e 	bl	41b930 <__aeabi_dmul>
  417874:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  417878:	4659      	mov	r1, fp
  41787a:	4650      	mov	r0, sl
  41787c:	f004 faf2 	bl	41be64 <__aeabi_d2iz>
  417880:	4605      	mov	r5, r0
  417882:	f003 ffef 	bl	41b864 <__aeabi_i2d>
  417886:	4602      	mov	r2, r0
  417888:	460b      	mov	r3, r1
  41788a:	4650      	mov	r0, sl
  41788c:	4659      	mov	r1, fp
  41788e:	f003 fe9b 	bl	41b5c8 <__aeabi_dsub>
  417892:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  417896:	3530      	adds	r5, #48	; 0x30
  417898:	f1b8 0f01 	cmp.w	r8, #1
  41789c:	4606      	mov	r6, r0
  41789e:	460f      	mov	r7, r1
  4178a0:	f88e 5000 	strb.w	r5, [lr]
  4178a4:	f10e 0b01 	add.w	fp, lr, #1
  4178a8:	d01e      	beq.n	4178e8 <_dtoa_r+0xcd0>
  4178aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4178ac:	1e6b      	subs	r3, r5, #1
  4178ae:	eb03 0a08 	add.w	sl, r3, r8
  4178b2:	2200      	movs	r2, #0
  4178b4:	4b62      	ldr	r3, [pc, #392]	; (417a40 <_dtoa_r+0xe28>)
  4178b6:	f004 f83b 	bl	41b930 <__aeabi_dmul>
  4178ba:	460f      	mov	r7, r1
  4178bc:	4606      	mov	r6, r0
  4178be:	f004 fad1 	bl	41be64 <__aeabi_d2iz>
  4178c2:	4680      	mov	r8, r0
  4178c4:	f003 ffce 	bl	41b864 <__aeabi_i2d>
  4178c8:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4178cc:	4602      	mov	r2, r0
  4178ce:	460b      	mov	r3, r1
  4178d0:	4630      	mov	r0, r6
  4178d2:	4639      	mov	r1, r7
  4178d4:	f003 fe78 	bl	41b5c8 <__aeabi_dsub>
  4178d8:	f805 8f01 	strb.w	r8, [r5, #1]!
  4178dc:	4555      	cmp	r5, sl
  4178de:	d1e8      	bne.n	4178b2 <_dtoa_r+0xc9a>
  4178e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4178e2:	4606      	mov	r6, r0
  4178e4:	460f      	mov	r7, r1
  4178e6:	44ab      	add	fp, r5
  4178e8:	2200      	movs	r2, #0
  4178ea:	4b56      	ldr	r3, [pc, #344]	; (417a44 <_dtoa_r+0xe2c>)
  4178ec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  4178f0:	f003 fe6c 	bl	41b5cc <__adddf3>
  4178f4:	4632      	mov	r2, r6
  4178f6:	463b      	mov	r3, r7
  4178f8:	f004 fa8c 	bl	41be14 <__aeabi_dcmplt>
  4178fc:	2800      	cmp	r0, #0
  4178fe:	d04d      	beq.n	41799c <_dtoa_r+0xd84>
  417900:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  417902:	9607      	str	r6, [sp, #28]
  417904:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  417908:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41790a:	f7ff bb4b 	b.w	416fa4 <_dtoa_r+0x38c>
  41790e:	9e08      	ldr	r6, [sp, #32]
  417910:	2300      	movs	r3, #0
  417912:	ebc9 0506 	rsb	r5, r9, r6
  417916:	f7ff bb76 	b.w	417006 <_dtoa_r+0x3ee>
  41791a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41791c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41791e:	9d08      	ldr	r5, [sp, #32]
  417920:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  417924:	f7ff bb6f 	b.w	417006 <_dtoa_r+0x3ee>
  417928:	4657      	mov	r7, sl
  41792a:	f7ff bbb9 	b.w	4170a0 <_dtoa_r+0x488>
  41792e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  417932:	f04f 0802 	mov.w	r8, #2
  417936:	e54b      	b.n	4173d0 <_dtoa_r+0x7b8>
  417938:	f1b9 0f00 	cmp.w	r9, #0
  41793c:	f43f aeaf 	beq.w	41769e <_dtoa_r+0xa86>
  417940:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  417942:	2e00      	cmp	r6, #0
  417944:	f77f af28 	ble.w	417798 <_dtoa_r+0xb80>
  417948:	2200      	movs	r2, #0
  41794a:	4b3d      	ldr	r3, [pc, #244]	; (417a40 <_dtoa_r+0xe28>)
  41794c:	4650      	mov	r0, sl
  41794e:	4659      	mov	r1, fp
  417950:	f003 ffee 	bl	41b930 <__aeabi_dmul>
  417954:	4682      	mov	sl, r0
  417956:	f108 0001 	add.w	r0, r8, #1
  41795a:	468b      	mov	fp, r1
  41795c:	f003 ff82 	bl	41b864 <__aeabi_i2d>
  417960:	4602      	mov	r2, r0
  417962:	460b      	mov	r3, r1
  417964:	4650      	mov	r0, sl
  417966:	4659      	mov	r1, fp
  417968:	f003 ffe2 	bl	41b930 <__aeabi_dmul>
  41796c:	2200      	movs	r2, #0
  41796e:	4b36      	ldr	r3, [pc, #216]	; (417a48 <_dtoa_r+0xe30>)
  417970:	f003 fe2c 	bl	41b5cc <__adddf3>
  417974:	9d07      	ldr	r5, [sp, #28]
  417976:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  41797a:	3d01      	subs	r5, #1
  41797c:	4606      	mov	r6, r0
  41797e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  417982:	9517      	str	r5, [sp, #92]	; 0x5c
  417984:	e544      	b.n	417410 <_dtoa_r+0x7f8>
  417986:	4635      	mov	r5, r6
  417988:	9b06      	ldr	r3, [sp, #24]
  41798a:	9e06      	ldr	r6, [sp, #24]
  41798c:	9909      	ldr	r1, [sp, #36]	; 0x24
  41798e:	2239      	movs	r2, #57	; 0x39
  417990:	7032      	strb	r2, [r6, #0]
  417992:	f103 0b01 	add.w	fp, r3, #1
  417996:	463e      	mov	r6, r7
  417998:	f7ff bbef 	b.w	41717a <_dtoa_r+0x562>
  41799c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  4179a0:	2000      	movs	r0, #0
  4179a2:	4928      	ldr	r1, [pc, #160]	; (417a44 <_dtoa_r+0xe2c>)
  4179a4:	f003 fe10 	bl	41b5c8 <__aeabi_dsub>
  4179a8:	4632      	mov	r2, r6
  4179aa:	463b      	mov	r3, r7
  4179ac:	f004 fa50 	bl	41be50 <__aeabi_dcmpgt>
  4179b0:	2800      	cmp	r0, #0
  4179b2:	f43f aef1 	beq.w	417798 <_dtoa_r+0xb80>
  4179b6:	465b      	mov	r3, fp
  4179b8:	469b      	mov	fp, r3
  4179ba:	3b01      	subs	r3, #1
  4179bc:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  4179c0:	2a30      	cmp	r2, #48	; 0x30
  4179c2:	d0f9      	beq.n	4179b8 <_dtoa_r+0xda0>
  4179c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  4179c6:	9507      	str	r5, [sp, #28]
  4179c8:	f7ff baf3 	b.w	416fb2 <_dtoa_r+0x39a>
  4179cc:	4645      	mov	r5, r8
  4179ce:	4654      	mov	r4, sl
  4179d0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4179d2:	9607      	str	r6, [sp, #28]
  4179d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4179d6:	f7ff bae5 	b.w	416fa4 <_dtoa_r+0x38c>
  4179da:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4179de:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4179e2:	d0d0      	beq.n	417986 <_dtoa_r+0xd6e>
  4179e4:	9b03      	ldr	r3, [sp, #12]
  4179e6:	4635      	mov	r5, r6
  4179e8:	2b00      	cmp	r3, #0
  4179ea:	9e06      	ldr	r6, [sp, #24]
  4179ec:	bfc8      	it	gt
  4179ee:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  4179f2:	f886 a000 	strb.w	sl, [r6]
  4179f6:	f106 0b01 	add.w	fp, r6, #1
  4179fa:	463e      	mov	r6, r7
  4179fc:	f7ff bbc3 	b.w	417186 <_dtoa_r+0x56e>
  417a00:	f47f aea9 	bne.w	417756 <_dtoa_r+0xb3e>
  417a04:	f01a 0f01 	tst.w	sl, #1
  417a08:	f43f aea5 	beq.w	417756 <_dtoa_r+0xb3e>
  417a0c:	e69d      	b.n	41774a <_dtoa_r+0xb32>
  417a0e:	4631      	mov	r1, r6
  417a10:	4620      	mov	r0, r4
  417a12:	220a      	movs	r2, #10
  417a14:	2300      	movs	r3, #0
  417a16:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  417a1a:	f000 fe5d 	bl	4186d8 <__multadd>
  417a1e:	4606      	mov	r6, r0
  417a20:	f7ff bb6c 	b.w	4170fc <_dtoa_r+0x4e4>
  417a24:	f04f 0802 	mov.w	r8, #2
  417a28:	e4d2      	b.n	4173d0 <_dtoa_r+0x7b8>
  417a2a:	f43f ab52 	beq.w	4170d2 <_dtoa_r+0x4ba>
  417a2e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  417a32:	f7ff bbe2 	b.w	4171fa <_dtoa_r+0x5e2>
  417a36:	bf00      	nop
  417a38:	0041df68 	.word	0x0041df68
  417a3c:	0041e030 	.word	0x0041e030
  417a40:	40240000 	.word	0x40240000
  417a44:	3fe00000 	.word	0x3fe00000
  417a48:	401c0000 	.word	0x401c0000
  417a4c:	f3af 8000 	nop.w

00417a50 <__sflush_r>:
  417a50:	898b      	ldrh	r3, [r1, #12]
  417a52:	b29a      	uxth	r2, r3
  417a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417a58:	460d      	mov	r5, r1
  417a5a:	0711      	lsls	r1, r2, #28
  417a5c:	4680      	mov	r8, r0
  417a5e:	d43c      	bmi.n	417ada <__sflush_r+0x8a>
  417a60:	686a      	ldr	r2, [r5, #4]
  417a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  417a66:	2a00      	cmp	r2, #0
  417a68:	81ab      	strh	r3, [r5, #12]
  417a6a:	dd59      	ble.n	417b20 <__sflush_r+0xd0>
  417a6c:	6aac      	ldr	r4, [r5, #40]	; 0x28
  417a6e:	2c00      	cmp	r4, #0
  417a70:	d04b      	beq.n	417b0a <__sflush_r+0xba>
  417a72:	b29b      	uxth	r3, r3
  417a74:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  417a78:	2100      	movs	r1, #0
  417a7a:	b292      	uxth	r2, r2
  417a7c:	f8d8 6000 	ldr.w	r6, [r8]
  417a80:	f8c8 1000 	str.w	r1, [r8]
  417a84:	2a00      	cmp	r2, #0
  417a86:	d04f      	beq.n	417b28 <__sflush_r+0xd8>
  417a88:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  417a8a:	075f      	lsls	r7, r3, #29
  417a8c:	d505      	bpl.n	417a9a <__sflush_r+0x4a>
  417a8e:	6869      	ldr	r1, [r5, #4]
  417a90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  417a92:	1a52      	subs	r2, r2, r1
  417a94:	b10b      	cbz	r3, 417a9a <__sflush_r+0x4a>
  417a96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  417a98:	1ad2      	subs	r2, r2, r3
  417a9a:	4640      	mov	r0, r8
  417a9c:	69e9      	ldr	r1, [r5, #28]
  417a9e:	2300      	movs	r3, #0
  417aa0:	47a0      	blx	r4
  417aa2:	1c44      	adds	r4, r0, #1
  417aa4:	d04a      	beq.n	417b3c <__sflush_r+0xec>
  417aa6:	89aa      	ldrh	r2, [r5, #12]
  417aa8:	692b      	ldr	r3, [r5, #16]
  417aaa:	602b      	str	r3, [r5, #0]
  417aac:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  417ab0:	b29b      	uxth	r3, r3
  417ab2:	2200      	movs	r2, #0
  417ab4:	606a      	str	r2, [r5, #4]
  417ab6:	04da      	lsls	r2, r3, #19
  417ab8:	81ab      	strh	r3, [r5, #12]
  417aba:	d44c      	bmi.n	417b56 <__sflush_r+0x106>
  417abc:	6b29      	ldr	r1, [r5, #48]	; 0x30
  417abe:	f8c8 6000 	str.w	r6, [r8]
  417ac2:	b311      	cbz	r1, 417b0a <__sflush_r+0xba>
  417ac4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  417ac8:	4299      	cmp	r1, r3
  417aca:	d002      	beq.n	417ad2 <__sflush_r+0x82>
  417acc:	4640      	mov	r0, r8
  417ace:	f000 f9c7 	bl	417e60 <_free_r>
  417ad2:	2000      	movs	r0, #0
  417ad4:	6328      	str	r0, [r5, #48]	; 0x30
  417ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417ada:	692e      	ldr	r6, [r5, #16]
  417adc:	b1ae      	cbz	r6, 417b0a <__sflush_r+0xba>
  417ade:	682c      	ldr	r4, [r5, #0]
  417ae0:	602e      	str	r6, [r5, #0]
  417ae2:	0791      	lsls	r1, r2, #30
  417ae4:	bf0c      	ite	eq
  417ae6:	696b      	ldreq	r3, [r5, #20]
  417ae8:	2300      	movne	r3, #0
  417aea:	1ba4      	subs	r4, r4, r6
  417aec:	60ab      	str	r3, [r5, #8]
  417aee:	e00a      	b.n	417b06 <__sflush_r+0xb6>
  417af0:	4632      	mov	r2, r6
  417af2:	4623      	mov	r3, r4
  417af4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  417af6:	69e9      	ldr	r1, [r5, #28]
  417af8:	4640      	mov	r0, r8
  417afa:	47b8      	blx	r7
  417afc:	2800      	cmp	r0, #0
  417afe:	ebc0 0404 	rsb	r4, r0, r4
  417b02:	4406      	add	r6, r0
  417b04:	dd04      	ble.n	417b10 <__sflush_r+0xc0>
  417b06:	2c00      	cmp	r4, #0
  417b08:	dcf2      	bgt.n	417af0 <__sflush_r+0xa0>
  417b0a:	2000      	movs	r0, #0
  417b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417b10:	89ab      	ldrh	r3, [r5, #12]
  417b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  417b16:	81ab      	strh	r3, [r5, #12]
  417b18:	f04f 30ff 	mov.w	r0, #4294967295
  417b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417b20:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  417b22:	2a00      	cmp	r2, #0
  417b24:	dca2      	bgt.n	417a6c <__sflush_r+0x1c>
  417b26:	e7f0      	b.n	417b0a <__sflush_r+0xba>
  417b28:	2301      	movs	r3, #1
  417b2a:	4640      	mov	r0, r8
  417b2c:	69e9      	ldr	r1, [r5, #28]
  417b2e:	47a0      	blx	r4
  417b30:	1c43      	adds	r3, r0, #1
  417b32:	4602      	mov	r2, r0
  417b34:	d01e      	beq.n	417b74 <__sflush_r+0x124>
  417b36:	89ab      	ldrh	r3, [r5, #12]
  417b38:	6aac      	ldr	r4, [r5, #40]	; 0x28
  417b3a:	e7a6      	b.n	417a8a <__sflush_r+0x3a>
  417b3c:	f8d8 3000 	ldr.w	r3, [r8]
  417b40:	b95b      	cbnz	r3, 417b5a <__sflush_r+0x10a>
  417b42:	89a9      	ldrh	r1, [r5, #12]
  417b44:	606b      	str	r3, [r5, #4]
  417b46:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  417b4a:	b29b      	uxth	r3, r3
  417b4c:	692a      	ldr	r2, [r5, #16]
  417b4e:	81ab      	strh	r3, [r5, #12]
  417b50:	04db      	lsls	r3, r3, #19
  417b52:	602a      	str	r2, [r5, #0]
  417b54:	d5b2      	bpl.n	417abc <__sflush_r+0x6c>
  417b56:	6528      	str	r0, [r5, #80]	; 0x50
  417b58:	e7b0      	b.n	417abc <__sflush_r+0x6c>
  417b5a:	2b1d      	cmp	r3, #29
  417b5c:	d001      	beq.n	417b62 <__sflush_r+0x112>
  417b5e:	2b16      	cmp	r3, #22
  417b60:	d119      	bne.n	417b96 <__sflush_r+0x146>
  417b62:	89aa      	ldrh	r2, [r5, #12]
  417b64:	692b      	ldr	r3, [r5, #16]
  417b66:	602b      	str	r3, [r5, #0]
  417b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  417b6c:	2300      	movs	r3, #0
  417b6e:	81aa      	strh	r2, [r5, #12]
  417b70:	606b      	str	r3, [r5, #4]
  417b72:	e7a3      	b.n	417abc <__sflush_r+0x6c>
  417b74:	f8d8 3000 	ldr.w	r3, [r8]
  417b78:	2b00      	cmp	r3, #0
  417b7a:	d0dc      	beq.n	417b36 <__sflush_r+0xe6>
  417b7c:	2b1d      	cmp	r3, #29
  417b7e:	d007      	beq.n	417b90 <__sflush_r+0x140>
  417b80:	2b16      	cmp	r3, #22
  417b82:	d005      	beq.n	417b90 <__sflush_r+0x140>
  417b84:	89ab      	ldrh	r3, [r5, #12]
  417b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  417b8a:	81ab      	strh	r3, [r5, #12]
  417b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417b90:	f8c8 6000 	str.w	r6, [r8]
  417b94:	e7b9      	b.n	417b0a <__sflush_r+0xba>
  417b96:	89ab      	ldrh	r3, [r5, #12]
  417b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  417b9c:	81ab      	strh	r3, [r5, #12]
  417b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417ba2:	bf00      	nop

00417ba4 <_fflush_r>:
  417ba4:	b510      	push	{r4, lr}
  417ba6:	4604      	mov	r4, r0
  417ba8:	b082      	sub	sp, #8
  417baa:	b108      	cbz	r0, 417bb0 <_fflush_r+0xc>
  417bac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  417bae:	b153      	cbz	r3, 417bc6 <_fflush_r+0x22>
  417bb0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  417bb4:	b908      	cbnz	r0, 417bba <_fflush_r+0x16>
  417bb6:	b002      	add	sp, #8
  417bb8:	bd10      	pop	{r4, pc}
  417bba:	4620      	mov	r0, r4
  417bbc:	b002      	add	sp, #8
  417bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  417bc2:	f7ff bf45 	b.w	417a50 <__sflush_r>
  417bc6:	9101      	str	r1, [sp, #4]
  417bc8:	f000 f808 	bl	417bdc <__sinit>
  417bcc:	9901      	ldr	r1, [sp, #4]
  417bce:	e7ef      	b.n	417bb0 <_fflush_r+0xc>

00417bd0 <_cleanup_r>:
  417bd0:	4901      	ldr	r1, [pc, #4]	; (417bd8 <_cleanup_r+0x8>)
  417bd2:	f000 bb9f 	b.w	418314 <_fwalk>
  417bd6:	bf00      	nop
  417bd8:	0041ae01 	.word	0x0041ae01

00417bdc <__sinit>:
  417bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417be0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  417be2:	b083      	sub	sp, #12
  417be4:	4607      	mov	r7, r0
  417be6:	2c00      	cmp	r4, #0
  417be8:	d165      	bne.n	417cb6 <__sinit+0xda>
  417bea:	6845      	ldr	r5, [r0, #4]
  417bec:	4833      	ldr	r0, [pc, #204]	; (417cbc <__sinit+0xe0>)
  417bee:	63f8      	str	r0, [r7, #60]	; 0x3c
  417bf0:	2304      	movs	r3, #4
  417bf2:	2103      	movs	r1, #3
  417bf4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  417bf8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  417bfc:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  417c00:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  417c04:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  417c08:	81ab      	strh	r3, [r5, #12]
  417c0a:	602c      	str	r4, [r5, #0]
  417c0c:	606c      	str	r4, [r5, #4]
  417c0e:	60ac      	str	r4, [r5, #8]
  417c10:	666c      	str	r4, [r5, #100]	; 0x64
  417c12:	81ec      	strh	r4, [r5, #14]
  417c14:	612c      	str	r4, [r5, #16]
  417c16:	616c      	str	r4, [r5, #20]
  417c18:	61ac      	str	r4, [r5, #24]
  417c1a:	4621      	mov	r1, r4
  417c1c:	2208      	movs	r2, #8
  417c1e:	f7fb fa3d 	bl	41309c <memset>
  417c22:	68be      	ldr	r6, [r7, #8]
  417c24:	f8df b098 	ldr.w	fp, [pc, #152]	; 417cc0 <__sinit+0xe4>
  417c28:	f8df a098 	ldr.w	sl, [pc, #152]	; 417cc4 <__sinit+0xe8>
  417c2c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 417cc8 <__sinit+0xec>
  417c30:	f8df 8098 	ldr.w	r8, [pc, #152]	; 417ccc <__sinit+0xf0>
  417c34:	61ed      	str	r5, [r5, #28]
  417c36:	2301      	movs	r3, #1
  417c38:	2209      	movs	r2, #9
  417c3a:	f8c5 b020 	str.w	fp, [r5, #32]
  417c3e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  417c42:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  417c46:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  417c4a:	4621      	mov	r1, r4
  417c4c:	81f3      	strh	r3, [r6, #14]
  417c4e:	81b2      	strh	r2, [r6, #12]
  417c50:	6034      	str	r4, [r6, #0]
  417c52:	6074      	str	r4, [r6, #4]
  417c54:	60b4      	str	r4, [r6, #8]
  417c56:	6674      	str	r4, [r6, #100]	; 0x64
  417c58:	6134      	str	r4, [r6, #16]
  417c5a:	6174      	str	r4, [r6, #20]
  417c5c:	61b4      	str	r4, [r6, #24]
  417c5e:	2208      	movs	r2, #8
  417c60:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  417c64:	9301      	str	r3, [sp, #4]
  417c66:	f7fb fa19 	bl	41309c <memset>
  417c6a:	68fd      	ldr	r5, [r7, #12]
  417c6c:	61f6      	str	r6, [r6, #28]
  417c6e:	2012      	movs	r0, #18
  417c70:	2202      	movs	r2, #2
  417c72:	f8c6 b020 	str.w	fp, [r6, #32]
  417c76:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  417c7a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  417c7e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  417c82:	4621      	mov	r1, r4
  417c84:	81a8      	strh	r0, [r5, #12]
  417c86:	81ea      	strh	r2, [r5, #14]
  417c88:	602c      	str	r4, [r5, #0]
  417c8a:	606c      	str	r4, [r5, #4]
  417c8c:	60ac      	str	r4, [r5, #8]
  417c8e:	666c      	str	r4, [r5, #100]	; 0x64
  417c90:	612c      	str	r4, [r5, #16]
  417c92:	616c      	str	r4, [r5, #20]
  417c94:	61ac      	str	r4, [r5, #24]
  417c96:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  417c9a:	2208      	movs	r2, #8
  417c9c:	f7fb f9fe 	bl	41309c <memset>
  417ca0:	9b01      	ldr	r3, [sp, #4]
  417ca2:	61ed      	str	r5, [r5, #28]
  417ca4:	f8c5 b020 	str.w	fp, [r5, #32]
  417ca8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  417cac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  417cb0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  417cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  417cb6:	b003      	add	sp, #12
  417cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  417cbc:	00417bd1 	.word	0x00417bd1
  417cc0:	00413379 	.word	0x00413379
  417cc4:	004133a1 	.word	0x004133a1
  417cc8:	004133d9 	.word	0x004133d9
  417ccc:	004133f9 	.word	0x004133f9

00417cd0 <__sfp_lock_acquire>:
  417cd0:	4770      	bx	lr
  417cd2:	bf00      	nop

00417cd4 <__sfp_lock_release>:
  417cd4:	4770      	bx	lr
  417cd6:	bf00      	nop

00417cd8 <__libc_fini_array>:
  417cd8:	b538      	push	{r3, r4, r5, lr}
  417cda:	4d09      	ldr	r5, [pc, #36]	; (417d00 <__libc_fini_array+0x28>)
  417cdc:	4c09      	ldr	r4, [pc, #36]	; (417d04 <__libc_fini_array+0x2c>)
  417cde:	1b64      	subs	r4, r4, r5
  417ce0:	10a4      	asrs	r4, r4, #2
  417ce2:	bf18      	it	ne
  417ce4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  417ce8:	d005      	beq.n	417cf6 <__libc_fini_array+0x1e>
  417cea:	3c01      	subs	r4, #1
  417cec:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  417cf0:	4798      	blx	r3
  417cf2:	2c00      	cmp	r4, #0
  417cf4:	d1f9      	bne.n	417cea <__libc_fini_array+0x12>
  417cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  417cfa:	f006 ba6f 	b.w	41e1dc <_fini>
  417cfe:	bf00      	nop
  417d00:	0041e1e8 	.word	0x0041e1e8
  417d04:	0041e1ec 	.word	0x0041e1ec

00417d08 <_fputwc_r>:
  417d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417d0c:	8993      	ldrh	r3, [r2, #12]
  417d0e:	460f      	mov	r7, r1
  417d10:	0499      	lsls	r1, r3, #18
  417d12:	b082      	sub	sp, #8
  417d14:	4614      	mov	r4, r2
  417d16:	4680      	mov	r8, r0
  417d18:	d406      	bmi.n	417d28 <_fputwc_r+0x20>
  417d1a:	6e52      	ldr	r2, [r2, #100]	; 0x64
  417d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  417d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  417d24:	81a3      	strh	r3, [r4, #12]
  417d26:	6662      	str	r2, [r4, #100]	; 0x64
  417d28:	f000 fb2c 	bl	418384 <__locale_mb_cur_max>
  417d2c:	2801      	cmp	r0, #1
  417d2e:	d03d      	beq.n	417dac <_fputwc_r+0xa4>
  417d30:	463a      	mov	r2, r7
  417d32:	4640      	mov	r0, r8
  417d34:	a901      	add	r1, sp, #4
  417d36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  417d3a:	f002 ff67 	bl	41ac0c <_wcrtomb_r>
  417d3e:	1c42      	adds	r2, r0, #1
  417d40:	4606      	mov	r6, r0
  417d42:	d02c      	beq.n	417d9e <_fputwc_r+0x96>
  417d44:	2800      	cmp	r0, #0
  417d46:	d039      	beq.n	417dbc <_fputwc_r+0xb4>
  417d48:	f89d 1004 	ldrb.w	r1, [sp, #4]
  417d4c:	2500      	movs	r5, #0
  417d4e:	e009      	b.n	417d64 <_fputwc_r+0x5c>
  417d50:	6823      	ldr	r3, [r4, #0]
  417d52:	7019      	strb	r1, [r3, #0]
  417d54:	6823      	ldr	r3, [r4, #0]
  417d56:	3301      	adds	r3, #1
  417d58:	6023      	str	r3, [r4, #0]
  417d5a:	3501      	adds	r5, #1
  417d5c:	42b5      	cmp	r5, r6
  417d5e:	d22d      	bcs.n	417dbc <_fputwc_r+0xb4>
  417d60:	ab01      	add	r3, sp, #4
  417d62:	5ce9      	ldrb	r1, [r5, r3]
  417d64:	68a3      	ldr	r3, [r4, #8]
  417d66:	3b01      	subs	r3, #1
  417d68:	2b00      	cmp	r3, #0
  417d6a:	60a3      	str	r3, [r4, #8]
  417d6c:	daf0      	bge.n	417d50 <_fputwc_r+0x48>
  417d6e:	69a2      	ldr	r2, [r4, #24]
  417d70:	4293      	cmp	r3, r2
  417d72:	db05      	blt.n	417d80 <_fputwc_r+0x78>
  417d74:	6823      	ldr	r3, [r4, #0]
  417d76:	7019      	strb	r1, [r3, #0]
  417d78:	6823      	ldr	r3, [r4, #0]
  417d7a:	7819      	ldrb	r1, [r3, #0]
  417d7c:	290a      	cmp	r1, #10
  417d7e:	d1ea      	bne.n	417d56 <_fputwc_r+0x4e>
  417d80:	4640      	mov	r0, r8
  417d82:	4622      	mov	r2, r4
  417d84:	f002 feee 	bl	41ab64 <__swbuf_r>
  417d88:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  417d8c:	4258      	negs	r0, r3
  417d8e:	4158      	adcs	r0, r3
  417d90:	2800      	cmp	r0, #0
  417d92:	d0e2      	beq.n	417d5a <_fputwc_r+0x52>
  417d94:	f04f 30ff 	mov.w	r0, #4294967295
  417d98:	b002      	add	sp, #8
  417d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417d9e:	89a3      	ldrh	r3, [r4, #12]
  417da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  417da4:	81a3      	strh	r3, [r4, #12]
  417da6:	b002      	add	sp, #8
  417da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417dac:	1e7b      	subs	r3, r7, #1
  417dae:	2bfe      	cmp	r3, #254	; 0xfe
  417db0:	d8be      	bhi.n	417d30 <_fputwc_r+0x28>
  417db2:	b2f9      	uxtb	r1, r7
  417db4:	4606      	mov	r6, r0
  417db6:	f88d 1004 	strb.w	r1, [sp, #4]
  417dba:	e7c7      	b.n	417d4c <_fputwc_r+0x44>
  417dbc:	4638      	mov	r0, r7
  417dbe:	b002      	add	sp, #8
  417dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00417dc4 <_malloc_trim_r>:
  417dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  417dc6:	4d23      	ldr	r5, [pc, #140]	; (417e54 <_malloc_trim_r+0x90>)
  417dc8:	460f      	mov	r7, r1
  417dca:	4604      	mov	r4, r0
  417dcc:	f7fb f9b0 	bl	413130 <__malloc_lock>
  417dd0:	68ab      	ldr	r3, [r5, #8]
  417dd2:	685e      	ldr	r6, [r3, #4]
  417dd4:	f026 0603 	bic.w	r6, r6, #3
  417dd8:	1bf1      	subs	r1, r6, r7
  417dda:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  417dde:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  417de2:	f021 010f 	bic.w	r1, r1, #15
  417de6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  417dea:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  417dee:	db07      	blt.n	417e00 <_malloc_trim_r+0x3c>
  417df0:	4620      	mov	r0, r4
  417df2:	2100      	movs	r1, #0
  417df4:	f7fb f9a0 	bl	413138 <_sbrk_r>
  417df8:	68ab      	ldr	r3, [r5, #8]
  417dfa:	4433      	add	r3, r6
  417dfc:	4298      	cmp	r0, r3
  417dfe:	d004      	beq.n	417e0a <_malloc_trim_r+0x46>
  417e00:	4620      	mov	r0, r4
  417e02:	f7fb f997 	bl	413134 <__malloc_unlock>
  417e06:	2000      	movs	r0, #0
  417e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417e0a:	4620      	mov	r0, r4
  417e0c:	4279      	negs	r1, r7
  417e0e:	f7fb f993 	bl	413138 <_sbrk_r>
  417e12:	3001      	adds	r0, #1
  417e14:	d00d      	beq.n	417e32 <_malloc_trim_r+0x6e>
  417e16:	4b10      	ldr	r3, [pc, #64]	; (417e58 <_malloc_trim_r+0x94>)
  417e18:	68aa      	ldr	r2, [r5, #8]
  417e1a:	6819      	ldr	r1, [r3, #0]
  417e1c:	1bf6      	subs	r6, r6, r7
  417e1e:	f046 0601 	orr.w	r6, r6, #1
  417e22:	4620      	mov	r0, r4
  417e24:	1bc9      	subs	r1, r1, r7
  417e26:	6056      	str	r6, [r2, #4]
  417e28:	6019      	str	r1, [r3, #0]
  417e2a:	f7fb f983 	bl	413134 <__malloc_unlock>
  417e2e:	2001      	movs	r0, #1
  417e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417e32:	4620      	mov	r0, r4
  417e34:	2100      	movs	r1, #0
  417e36:	f7fb f97f 	bl	413138 <_sbrk_r>
  417e3a:	68ab      	ldr	r3, [r5, #8]
  417e3c:	1ac2      	subs	r2, r0, r3
  417e3e:	2a0f      	cmp	r2, #15
  417e40:	ddde      	ble.n	417e00 <_malloc_trim_r+0x3c>
  417e42:	4d06      	ldr	r5, [pc, #24]	; (417e5c <_malloc_trim_r+0x98>)
  417e44:	4904      	ldr	r1, [pc, #16]	; (417e58 <_malloc_trim_r+0x94>)
  417e46:	682d      	ldr	r5, [r5, #0]
  417e48:	f042 0201 	orr.w	r2, r2, #1
  417e4c:	1b40      	subs	r0, r0, r5
  417e4e:	605a      	str	r2, [r3, #4]
  417e50:	6008      	str	r0, [r1, #0]
  417e52:	e7d5      	b.n	417e00 <_malloc_trim_r+0x3c>
  417e54:	20000bb4 	.word	0x20000bb4
  417e58:	200039ec 	.word	0x200039ec
  417e5c:	20000fc0 	.word	0x20000fc0

00417e60 <_free_r>:
  417e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417e64:	460d      	mov	r5, r1
  417e66:	4606      	mov	r6, r0
  417e68:	2900      	cmp	r1, #0
  417e6a:	d055      	beq.n	417f18 <_free_r+0xb8>
  417e6c:	f7fb f960 	bl	413130 <__malloc_lock>
  417e70:	f855 1c04 	ldr.w	r1, [r5, #-4]
  417e74:	f8df c174 	ldr.w	ip, [pc, #372]	; 417fec <_free_r+0x18c>
  417e78:	f021 0301 	bic.w	r3, r1, #1
  417e7c:	f1a5 0408 	sub.w	r4, r5, #8
  417e80:	18e2      	adds	r2, r4, r3
  417e82:	f8dc 0008 	ldr.w	r0, [ip, #8]
  417e86:	6857      	ldr	r7, [r2, #4]
  417e88:	4290      	cmp	r0, r2
  417e8a:	f027 0703 	bic.w	r7, r7, #3
  417e8e:	d069      	beq.n	417f64 <_free_r+0x104>
  417e90:	f011 0101 	ands.w	r1, r1, #1
  417e94:	6057      	str	r7, [r2, #4]
  417e96:	d032      	beq.n	417efe <_free_r+0x9e>
  417e98:	2100      	movs	r1, #0
  417e9a:	19d0      	adds	r0, r2, r7
  417e9c:	6840      	ldr	r0, [r0, #4]
  417e9e:	07c0      	lsls	r0, r0, #31
  417ea0:	d406      	bmi.n	417eb0 <_free_r+0x50>
  417ea2:	443b      	add	r3, r7
  417ea4:	6890      	ldr	r0, [r2, #8]
  417ea6:	2900      	cmp	r1, #0
  417ea8:	d04e      	beq.n	417f48 <_free_r+0xe8>
  417eaa:	68d2      	ldr	r2, [r2, #12]
  417eac:	60c2      	str	r2, [r0, #12]
  417eae:	6090      	str	r0, [r2, #8]
  417eb0:	f043 0201 	orr.w	r2, r3, #1
  417eb4:	6062      	str	r2, [r4, #4]
  417eb6:	50e3      	str	r3, [r4, r3]
  417eb8:	b9e1      	cbnz	r1, 417ef4 <_free_r+0x94>
  417eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  417ebe:	d32d      	bcc.n	417f1c <_free_r+0xbc>
  417ec0:	0a5a      	lsrs	r2, r3, #9
  417ec2:	2a04      	cmp	r2, #4
  417ec4:	d86a      	bhi.n	417f9c <_free_r+0x13c>
  417ec6:	0998      	lsrs	r0, r3, #6
  417ec8:	3038      	adds	r0, #56	; 0x38
  417eca:	0041      	lsls	r1, r0, #1
  417ecc:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  417ed0:	4946      	ldr	r1, [pc, #280]	; (417fec <_free_r+0x18c>)
  417ed2:	f8dc 2008 	ldr.w	r2, [ip, #8]
  417ed6:	4562      	cmp	r2, ip
  417ed8:	d066      	beq.n	417fa8 <_free_r+0x148>
  417eda:	6851      	ldr	r1, [r2, #4]
  417edc:	f021 0103 	bic.w	r1, r1, #3
  417ee0:	428b      	cmp	r3, r1
  417ee2:	d202      	bcs.n	417eea <_free_r+0x8a>
  417ee4:	6892      	ldr	r2, [r2, #8]
  417ee6:	4594      	cmp	ip, r2
  417ee8:	d1f7      	bne.n	417eda <_free_r+0x7a>
  417eea:	68d3      	ldr	r3, [r2, #12]
  417eec:	60e3      	str	r3, [r4, #12]
  417eee:	60a2      	str	r2, [r4, #8]
  417ef0:	609c      	str	r4, [r3, #8]
  417ef2:	60d4      	str	r4, [r2, #12]
  417ef4:	4630      	mov	r0, r6
  417ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  417efa:	f7fb b91b 	b.w	413134 <__malloc_unlock>
  417efe:	f855 5c08 	ldr.w	r5, [r5, #-8]
  417f02:	1b64      	subs	r4, r4, r5
  417f04:	f10c 0808 	add.w	r8, ip, #8
  417f08:	68a0      	ldr	r0, [r4, #8]
  417f0a:	4540      	cmp	r0, r8
  417f0c:	442b      	add	r3, r5
  417f0e:	d043      	beq.n	417f98 <_free_r+0x138>
  417f10:	68e5      	ldr	r5, [r4, #12]
  417f12:	60c5      	str	r5, [r0, #12]
  417f14:	60a8      	str	r0, [r5, #8]
  417f16:	e7c0      	b.n	417e9a <_free_r+0x3a>
  417f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417f1c:	08db      	lsrs	r3, r3, #3
  417f1e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  417f22:	2501      	movs	r5, #1
  417f24:	f8dc 0004 	ldr.w	r0, [ip, #4]
  417f28:	6891      	ldr	r1, [r2, #8]
  417f2a:	60a1      	str	r1, [r4, #8]
  417f2c:	109b      	asrs	r3, r3, #2
  417f2e:	fa05 f303 	lsl.w	r3, r5, r3
  417f32:	4318      	orrs	r0, r3
  417f34:	60e2      	str	r2, [r4, #12]
  417f36:	f8cc 0004 	str.w	r0, [ip, #4]
  417f3a:	6094      	str	r4, [r2, #8]
  417f3c:	4630      	mov	r0, r6
  417f3e:	60cc      	str	r4, [r1, #12]
  417f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  417f44:	f7fb b8f6 	b.w	413134 <__malloc_unlock>
  417f48:	4d29      	ldr	r5, [pc, #164]	; (417ff0 <_free_r+0x190>)
  417f4a:	42a8      	cmp	r0, r5
  417f4c:	d1ad      	bne.n	417eaa <_free_r+0x4a>
  417f4e:	f043 0201 	orr.w	r2, r3, #1
  417f52:	f8cc 4014 	str.w	r4, [ip, #20]
  417f56:	f8cc 4010 	str.w	r4, [ip, #16]
  417f5a:	60e0      	str	r0, [r4, #12]
  417f5c:	60a0      	str	r0, [r4, #8]
  417f5e:	6062      	str	r2, [r4, #4]
  417f60:	50e3      	str	r3, [r4, r3]
  417f62:	e7c7      	b.n	417ef4 <_free_r+0x94>
  417f64:	441f      	add	r7, r3
  417f66:	07cb      	lsls	r3, r1, #31
  417f68:	d407      	bmi.n	417f7a <_free_r+0x11a>
  417f6a:	f855 3c08 	ldr.w	r3, [r5, #-8]
  417f6e:	1ae4      	subs	r4, r4, r3
  417f70:	441f      	add	r7, r3
  417f72:	68a2      	ldr	r2, [r4, #8]
  417f74:	68e3      	ldr	r3, [r4, #12]
  417f76:	60d3      	str	r3, [r2, #12]
  417f78:	609a      	str	r2, [r3, #8]
  417f7a:	4b1e      	ldr	r3, [pc, #120]	; (417ff4 <_free_r+0x194>)
  417f7c:	681b      	ldr	r3, [r3, #0]
  417f7e:	f047 0201 	orr.w	r2, r7, #1
  417f82:	429f      	cmp	r7, r3
  417f84:	6062      	str	r2, [r4, #4]
  417f86:	f8cc 4008 	str.w	r4, [ip, #8]
  417f8a:	d3b3      	bcc.n	417ef4 <_free_r+0x94>
  417f8c:	4b1a      	ldr	r3, [pc, #104]	; (417ff8 <_free_r+0x198>)
  417f8e:	4630      	mov	r0, r6
  417f90:	6819      	ldr	r1, [r3, #0]
  417f92:	f7ff ff17 	bl	417dc4 <_malloc_trim_r>
  417f96:	e7ad      	b.n	417ef4 <_free_r+0x94>
  417f98:	2101      	movs	r1, #1
  417f9a:	e77e      	b.n	417e9a <_free_r+0x3a>
  417f9c:	2a14      	cmp	r2, #20
  417f9e:	d80c      	bhi.n	417fba <_free_r+0x15a>
  417fa0:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  417fa4:	0041      	lsls	r1, r0, #1
  417fa6:	e791      	b.n	417ecc <_free_r+0x6c>
  417fa8:	684b      	ldr	r3, [r1, #4]
  417faa:	1080      	asrs	r0, r0, #2
  417fac:	2501      	movs	r5, #1
  417fae:	fa05 f000 	lsl.w	r0, r5, r0
  417fb2:	4303      	orrs	r3, r0
  417fb4:	604b      	str	r3, [r1, #4]
  417fb6:	4613      	mov	r3, r2
  417fb8:	e798      	b.n	417eec <_free_r+0x8c>
  417fba:	2a54      	cmp	r2, #84	; 0x54
  417fbc:	d803      	bhi.n	417fc6 <_free_r+0x166>
  417fbe:	0b18      	lsrs	r0, r3, #12
  417fc0:	306e      	adds	r0, #110	; 0x6e
  417fc2:	0041      	lsls	r1, r0, #1
  417fc4:	e782      	b.n	417ecc <_free_r+0x6c>
  417fc6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  417fca:	d803      	bhi.n	417fd4 <_free_r+0x174>
  417fcc:	0bd8      	lsrs	r0, r3, #15
  417fce:	3077      	adds	r0, #119	; 0x77
  417fd0:	0041      	lsls	r1, r0, #1
  417fd2:	e77b      	b.n	417ecc <_free_r+0x6c>
  417fd4:	f240 5154 	movw	r1, #1364	; 0x554
  417fd8:	428a      	cmp	r2, r1
  417fda:	d803      	bhi.n	417fe4 <_free_r+0x184>
  417fdc:	0c98      	lsrs	r0, r3, #18
  417fde:	307c      	adds	r0, #124	; 0x7c
  417fe0:	0041      	lsls	r1, r0, #1
  417fe2:	e773      	b.n	417ecc <_free_r+0x6c>
  417fe4:	21fc      	movs	r1, #252	; 0xfc
  417fe6:	207e      	movs	r0, #126	; 0x7e
  417fe8:	e770      	b.n	417ecc <_free_r+0x6c>
  417fea:	bf00      	nop
  417fec:	20000bb4 	.word	0x20000bb4
  417ff0:	20000bbc 	.word	0x20000bbc
  417ff4:	20000fbc 	.word	0x20000fbc
  417ff8:	200039e8 	.word	0x200039e8

00417ffc <__sfvwrite_r>:
  417ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418000:	6893      	ldr	r3, [r2, #8]
  418002:	b083      	sub	sp, #12
  418004:	4616      	mov	r6, r2
  418006:	4681      	mov	r9, r0
  418008:	460c      	mov	r4, r1
  41800a:	b32b      	cbz	r3, 418058 <__sfvwrite_r+0x5c>
  41800c:	898b      	ldrh	r3, [r1, #12]
  41800e:	0719      	lsls	r1, r3, #28
  418010:	d526      	bpl.n	418060 <__sfvwrite_r+0x64>
  418012:	6922      	ldr	r2, [r4, #16]
  418014:	b322      	cbz	r2, 418060 <__sfvwrite_r+0x64>
  418016:	f003 0202 	and.w	r2, r3, #2
  41801a:	b292      	uxth	r2, r2
  41801c:	6835      	ldr	r5, [r6, #0]
  41801e:	2a00      	cmp	r2, #0
  418020:	d02c      	beq.n	41807c <__sfvwrite_r+0x80>
  418022:	f04f 0a00 	mov.w	sl, #0
  418026:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 418310 <__sfvwrite_r+0x314>
  41802a:	46d0      	mov	r8, sl
  41802c:	45d8      	cmp	r8, fp
  41802e:	bf34      	ite	cc
  418030:	4643      	movcc	r3, r8
  418032:	465b      	movcs	r3, fp
  418034:	4652      	mov	r2, sl
  418036:	4648      	mov	r0, r9
  418038:	f1b8 0f00 	cmp.w	r8, #0
  41803c:	d04f      	beq.n	4180de <__sfvwrite_r+0xe2>
  41803e:	69e1      	ldr	r1, [r4, #28]
  418040:	6a67      	ldr	r7, [r4, #36]	; 0x24
  418042:	47b8      	blx	r7
  418044:	2800      	cmp	r0, #0
  418046:	dd56      	ble.n	4180f6 <__sfvwrite_r+0xfa>
  418048:	68b3      	ldr	r3, [r6, #8]
  41804a:	1a1b      	subs	r3, r3, r0
  41804c:	4482      	add	sl, r0
  41804e:	ebc0 0808 	rsb	r8, r0, r8
  418052:	60b3      	str	r3, [r6, #8]
  418054:	2b00      	cmp	r3, #0
  418056:	d1e9      	bne.n	41802c <__sfvwrite_r+0x30>
  418058:	2000      	movs	r0, #0
  41805a:	b003      	add	sp, #12
  41805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418060:	4648      	mov	r0, r9
  418062:	4621      	mov	r1, r4
  418064:	f7fe fcbc 	bl	4169e0 <__swsetup_r>
  418068:	2800      	cmp	r0, #0
  41806a:	f040 8148 	bne.w	4182fe <__sfvwrite_r+0x302>
  41806e:	89a3      	ldrh	r3, [r4, #12]
  418070:	6835      	ldr	r5, [r6, #0]
  418072:	f003 0202 	and.w	r2, r3, #2
  418076:	b292      	uxth	r2, r2
  418078:	2a00      	cmp	r2, #0
  41807a:	d1d2      	bne.n	418022 <__sfvwrite_r+0x26>
  41807c:	f013 0a01 	ands.w	sl, r3, #1
  418080:	d142      	bne.n	418108 <__sfvwrite_r+0x10c>
  418082:	46d0      	mov	r8, sl
  418084:	f1b8 0f00 	cmp.w	r8, #0
  418088:	d023      	beq.n	4180d2 <__sfvwrite_r+0xd6>
  41808a:	059a      	lsls	r2, r3, #22
  41808c:	68a7      	ldr	r7, [r4, #8]
  41808e:	d576      	bpl.n	41817e <__sfvwrite_r+0x182>
  418090:	45b8      	cmp	r8, r7
  418092:	f0c0 80a4 	bcc.w	4181de <__sfvwrite_r+0x1e2>
  418096:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41809a:	f040 80b2 	bne.w	418202 <__sfvwrite_r+0x206>
  41809e:	6820      	ldr	r0, [r4, #0]
  4180a0:	46bb      	mov	fp, r7
  4180a2:	4651      	mov	r1, sl
  4180a4:	465a      	mov	r2, fp
  4180a6:	f000 fa87 	bl	4185b8 <memmove>
  4180aa:	68a2      	ldr	r2, [r4, #8]
  4180ac:	6821      	ldr	r1, [r4, #0]
  4180ae:	1bd2      	subs	r2, r2, r7
  4180b0:	eb01 030b 	add.w	r3, r1, fp
  4180b4:	60a2      	str	r2, [r4, #8]
  4180b6:	6023      	str	r3, [r4, #0]
  4180b8:	4642      	mov	r2, r8
  4180ba:	68b3      	ldr	r3, [r6, #8]
  4180bc:	1a9b      	subs	r3, r3, r2
  4180be:	4492      	add	sl, r2
  4180c0:	ebc2 0808 	rsb	r8, r2, r8
  4180c4:	60b3      	str	r3, [r6, #8]
  4180c6:	2b00      	cmp	r3, #0
  4180c8:	d0c6      	beq.n	418058 <__sfvwrite_r+0x5c>
  4180ca:	89a3      	ldrh	r3, [r4, #12]
  4180cc:	f1b8 0f00 	cmp.w	r8, #0
  4180d0:	d1db      	bne.n	41808a <__sfvwrite_r+0x8e>
  4180d2:	f8d5 a000 	ldr.w	sl, [r5]
  4180d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4180da:	3508      	adds	r5, #8
  4180dc:	e7d2      	b.n	418084 <__sfvwrite_r+0x88>
  4180de:	f8d5 a000 	ldr.w	sl, [r5]
  4180e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4180e6:	3508      	adds	r5, #8
  4180e8:	e7a0      	b.n	41802c <__sfvwrite_r+0x30>
  4180ea:	4648      	mov	r0, r9
  4180ec:	4621      	mov	r1, r4
  4180ee:	f7ff fd59 	bl	417ba4 <_fflush_r>
  4180f2:	2800      	cmp	r0, #0
  4180f4:	d059      	beq.n	4181aa <__sfvwrite_r+0x1ae>
  4180f6:	89a3      	ldrh	r3, [r4, #12]
  4180f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4180fc:	f04f 30ff 	mov.w	r0, #4294967295
  418100:	81a3      	strh	r3, [r4, #12]
  418102:	b003      	add	sp, #12
  418104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418108:	4692      	mov	sl, r2
  41810a:	9201      	str	r2, [sp, #4]
  41810c:	4693      	mov	fp, r2
  41810e:	4690      	mov	r8, r2
  418110:	f1b8 0f00 	cmp.w	r8, #0
  418114:	d02b      	beq.n	41816e <__sfvwrite_r+0x172>
  418116:	9f01      	ldr	r7, [sp, #4]
  418118:	2f00      	cmp	r7, #0
  41811a:	d064      	beq.n	4181e6 <__sfvwrite_r+0x1ea>
  41811c:	6820      	ldr	r0, [r4, #0]
  41811e:	6921      	ldr	r1, [r4, #16]
  418120:	f8d4 c008 	ldr.w	ip, [r4, #8]
  418124:	6962      	ldr	r2, [r4, #20]
  418126:	45c2      	cmp	sl, r8
  418128:	bf34      	ite	cc
  41812a:	4653      	movcc	r3, sl
  41812c:	4643      	movcs	r3, r8
  41812e:	4288      	cmp	r0, r1
  418130:	461f      	mov	r7, r3
  418132:	d903      	bls.n	41813c <__sfvwrite_r+0x140>
  418134:	4494      	add	ip, r2
  418136:	4563      	cmp	r3, ip
  418138:	f300 80ae 	bgt.w	418298 <__sfvwrite_r+0x29c>
  41813c:	4293      	cmp	r3, r2
  41813e:	db36      	blt.n	4181ae <__sfvwrite_r+0x1b2>
  418140:	4613      	mov	r3, r2
  418142:	6a67      	ldr	r7, [r4, #36]	; 0x24
  418144:	69e1      	ldr	r1, [r4, #28]
  418146:	4648      	mov	r0, r9
  418148:	465a      	mov	r2, fp
  41814a:	47b8      	blx	r7
  41814c:	1e07      	subs	r7, r0, #0
  41814e:	ddd2      	ble.n	4180f6 <__sfvwrite_r+0xfa>
  418150:	ebba 0a07 	subs.w	sl, sl, r7
  418154:	d03a      	beq.n	4181cc <__sfvwrite_r+0x1d0>
  418156:	68b3      	ldr	r3, [r6, #8]
  418158:	1bdb      	subs	r3, r3, r7
  41815a:	44bb      	add	fp, r7
  41815c:	ebc7 0808 	rsb	r8, r7, r8
  418160:	60b3      	str	r3, [r6, #8]
  418162:	2b00      	cmp	r3, #0
  418164:	f43f af78 	beq.w	418058 <__sfvwrite_r+0x5c>
  418168:	f1b8 0f00 	cmp.w	r8, #0
  41816c:	d1d3      	bne.n	418116 <__sfvwrite_r+0x11a>
  41816e:	2700      	movs	r7, #0
  418170:	f8d5 b000 	ldr.w	fp, [r5]
  418174:	f8d5 8004 	ldr.w	r8, [r5, #4]
  418178:	9701      	str	r7, [sp, #4]
  41817a:	3508      	adds	r5, #8
  41817c:	e7c8      	b.n	418110 <__sfvwrite_r+0x114>
  41817e:	6820      	ldr	r0, [r4, #0]
  418180:	6923      	ldr	r3, [r4, #16]
  418182:	4298      	cmp	r0, r3
  418184:	d802      	bhi.n	41818c <__sfvwrite_r+0x190>
  418186:	6963      	ldr	r3, [r4, #20]
  418188:	4598      	cmp	r8, r3
  41818a:	d272      	bcs.n	418272 <__sfvwrite_r+0x276>
  41818c:	45b8      	cmp	r8, r7
  41818e:	bf38      	it	cc
  418190:	4647      	movcc	r7, r8
  418192:	463a      	mov	r2, r7
  418194:	4651      	mov	r1, sl
  418196:	f000 fa0f 	bl	4185b8 <memmove>
  41819a:	68a3      	ldr	r3, [r4, #8]
  41819c:	6822      	ldr	r2, [r4, #0]
  41819e:	1bdb      	subs	r3, r3, r7
  4181a0:	443a      	add	r2, r7
  4181a2:	60a3      	str	r3, [r4, #8]
  4181a4:	6022      	str	r2, [r4, #0]
  4181a6:	2b00      	cmp	r3, #0
  4181a8:	d09f      	beq.n	4180ea <__sfvwrite_r+0xee>
  4181aa:	463a      	mov	r2, r7
  4181ac:	e785      	b.n	4180ba <__sfvwrite_r+0xbe>
  4181ae:	461a      	mov	r2, r3
  4181b0:	4659      	mov	r1, fp
  4181b2:	9300      	str	r3, [sp, #0]
  4181b4:	f000 fa00 	bl	4185b8 <memmove>
  4181b8:	9b00      	ldr	r3, [sp, #0]
  4181ba:	68a1      	ldr	r1, [r4, #8]
  4181bc:	6822      	ldr	r2, [r4, #0]
  4181be:	1ac9      	subs	r1, r1, r3
  4181c0:	ebba 0a07 	subs.w	sl, sl, r7
  4181c4:	4413      	add	r3, r2
  4181c6:	60a1      	str	r1, [r4, #8]
  4181c8:	6023      	str	r3, [r4, #0]
  4181ca:	d1c4      	bne.n	418156 <__sfvwrite_r+0x15a>
  4181cc:	4648      	mov	r0, r9
  4181ce:	4621      	mov	r1, r4
  4181d0:	f7ff fce8 	bl	417ba4 <_fflush_r>
  4181d4:	2800      	cmp	r0, #0
  4181d6:	d18e      	bne.n	4180f6 <__sfvwrite_r+0xfa>
  4181d8:	f8cd a004 	str.w	sl, [sp, #4]
  4181dc:	e7bb      	b.n	418156 <__sfvwrite_r+0x15a>
  4181de:	6820      	ldr	r0, [r4, #0]
  4181e0:	4647      	mov	r7, r8
  4181e2:	46c3      	mov	fp, r8
  4181e4:	e75d      	b.n	4180a2 <__sfvwrite_r+0xa6>
  4181e6:	4658      	mov	r0, fp
  4181e8:	210a      	movs	r1, #10
  4181ea:	4642      	mov	r2, r8
  4181ec:	f000 f99c 	bl	418528 <memchr>
  4181f0:	2800      	cmp	r0, #0
  4181f2:	d07f      	beq.n	4182f4 <__sfvwrite_r+0x2f8>
  4181f4:	f100 0a01 	add.w	sl, r0, #1
  4181f8:	2701      	movs	r7, #1
  4181fa:	ebcb 0a0a 	rsb	sl, fp, sl
  4181fe:	9701      	str	r7, [sp, #4]
  418200:	e78c      	b.n	41811c <__sfvwrite_r+0x120>
  418202:	6822      	ldr	r2, [r4, #0]
  418204:	6921      	ldr	r1, [r4, #16]
  418206:	6967      	ldr	r7, [r4, #20]
  418208:	ebc1 0c02 	rsb	ip, r1, r2
  41820c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  418210:	f10c 0201 	add.w	r2, ip, #1
  418214:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  418218:	4442      	add	r2, r8
  41821a:	107f      	asrs	r7, r7, #1
  41821c:	4297      	cmp	r7, r2
  41821e:	bf34      	ite	cc
  418220:	4617      	movcc	r7, r2
  418222:	463a      	movcs	r2, r7
  418224:	055b      	lsls	r3, r3, #21
  418226:	d54f      	bpl.n	4182c8 <__sfvwrite_r+0x2cc>
  418228:	4611      	mov	r1, r2
  41822a:	4648      	mov	r0, r9
  41822c:	f8cd c000 	str.w	ip, [sp]
  418230:	f7fa fbfe 	bl	412a30 <_malloc_r>
  418234:	f8dd c000 	ldr.w	ip, [sp]
  418238:	4683      	mov	fp, r0
  41823a:	2800      	cmp	r0, #0
  41823c:	d062      	beq.n	418304 <__sfvwrite_r+0x308>
  41823e:	4662      	mov	r2, ip
  418240:	6921      	ldr	r1, [r4, #16]
  418242:	f8cd c000 	str.w	ip, [sp]
  418246:	f7fa fe8f 	bl	412f68 <memcpy>
  41824a:	89a2      	ldrh	r2, [r4, #12]
  41824c:	f8dd c000 	ldr.w	ip, [sp]
  418250:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  418254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  418258:	81a2      	strh	r2, [r4, #12]
  41825a:	eb0b 000c 	add.w	r0, fp, ip
  41825e:	ebcc 0207 	rsb	r2, ip, r7
  418262:	f8c4 b010 	str.w	fp, [r4, #16]
  418266:	6167      	str	r7, [r4, #20]
  418268:	6020      	str	r0, [r4, #0]
  41826a:	60a2      	str	r2, [r4, #8]
  41826c:	4647      	mov	r7, r8
  41826e:	46c3      	mov	fp, r8
  418270:	e717      	b.n	4180a2 <__sfvwrite_r+0xa6>
  418272:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  418276:	4590      	cmp	r8, r2
  418278:	bf38      	it	cc
  41827a:	4642      	movcc	r2, r8
  41827c:	fb92 f2f3 	sdiv	r2, r2, r3
  418280:	fb02 f303 	mul.w	r3, r2, r3
  418284:	6a67      	ldr	r7, [r4, #36]	; 0x24
  418286:	69e1      	ldr	r1, [r4, #28]
  418288:	4648      	mov	r0, r9
  41828a:	4652      	mov	r2, sl
  41828c:	47b8      	blx	r7
  41828e:	2800      	cmp	r0, #0
  418290:	f77f af31 	ble.w	4180f6 <__sfvwrite_r+0xfa>
  418294:	4602      	mov	r2, r0
  418296:	e710      	b.n	4180ba <__sfvwrite_r+0xbe>
  418298:	4662      	mov	r2, ip
  41829a:	4659      	mov	r1, fp
  41829c:	f8cd c000 	str.w	ip, [sp]
  4182a0:	f000 f98a 	bl	4185b8 <memmove>
  4182a4:	f8dd c000 	ldr.w	ip, [sp]
  4182a8:	6823      	ldr	r3, [r4, #0]
  4182aa:	4463      	add	r3, ip
  4182ac:	6023      	str	r3, [r4, #0]
  4182ae:	4648      	mov	r0, r9
  4182b0:	4621      	mov	r1, r4
  4182b2:	f8cd c000 	str.w	ip, [sp]
  4182b6:	f7ff fc75 	bl	417ba4 <_fflush_r>
  4182ba:	f8dd c000 	ldr.w	ip, [sp]
  4182be:	2800      	cmp	r0, #0
  4182c0:	f47f af19 	bne.w	4180f6 <__sfvwrite_r+0xfa>
  4182c4:	4667      	mov	r7, ip
  4182c6:	e743      	b.n	418150 <__sfvwrite_r+0x154>
  4182c8:	4648      	mov	r0, r9
  4182ca:	f8cd c000 	str.w	ip, [sp]
  4182ce:	f000 fe33 	bl	418f38 <_realloc_r>
  4182d2:	f8dd c000 	ldr.w	ip, [sp]
  4182d6:	4683      	mov	fp, r0
  4182d8:	2800      	cmp	r0, #0
  4182da:	d1be      	bne.n	41825a <__sfvwrite_r+0x25e>
  4182dc:	4648      	mov	r0, r9
  4182de:	6921      	ldr	r1, [r4, #16]
  4182e0:	f7ff fdbe 	bl	417e60 <_free_r>
  4182e4:	89a3      	ldrh	r3, [r4, #12]
  4182e6:	220c      	movs	r2, #12
  4182e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4182ec:	b29b      	uxth	r3, r3
  4182ee:	f8c9 2000 	str.w	r2, [r9]
  4182f2:	e701      	b.n	4180f8 <__sfvwrite_r+0xfc>
  4182f4:	2701      	movs	r7, #1
  4182f6:	f108 0a01 	add.w	sl, r8, #1
  4182fa:	9701      	str	r7, [sp, #4]
  4182fc:	e70e      	b.n	41811c <__sfvwrite_r+0x120>
  4182fe:	f04f 30ff 	mov.w	r0, #4294967295
  418302:	e6aa      	b.n	41805a <__sfvwrite_r+0x5e>
  418304:	230c      	movs	r3, #12
  418306:	f8c9 3000 	str.w	r3, [r9]
  41830a:	89a3      	ldrh	r3, [r4, #12]
  41830c:	e6f4      	b.n	4180f8 <__sfvwrite_r+0xfc>
  41830e:	bf00      	nop
  418310:	7ffffc00 	.word	0x7ffffc00

00418314 <_fwalk>:
  418314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  418318:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  41831c:	4688      	mov	r8, r1
  41831e:	d01a      	beq.n	418356 <_fwalk+0x42>
  418320:	2600      	movs	r6, #0
  418322:	687d      	ldr	r5, [r7, #4]
  418324:	68bc      	ldr	r4, [r7, #8]
  418326:	3d01      	subs	r5, #1
  418328:	d40f      	bmi.n	41834a <_fwalk+0x36>
  41832a:	89a3      	ldrh	r3, [r4, #12]
  41832c:	2b01      	cmp	r3, #1
  41832e:	f105 35ff 	add.w	r5, r5, #4294967295
  418332:	d906      	bls.n	418342 <_fwalk+0x2e>
  418334:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  418338:	3301      	adds	r3, #1
  41833a:	4620      	mov	r0, r4
  41833c:	d001      	beq.n	418342 <_fwalk+0x2e>
  41833e:	47c0      	blx	r8
  418340:	4306      	orrs	r6, r0
  418342:	1c6b      	adds	r3, r5, #1
  418344:	f104 0468 	add.w	r4, r4, #104	; 0x68
  418348:	d1ef      	bne.n	41832a <_fwalk+0x16>
  41834a:	683f      	ldr	r7, [r7, #0]
  41834c:	2f00      	cmp	r7, #0
  41834e:	d1e8      	bne.n	418322 <_fwalk+0xe>
  418350:	4630      	mov	r0, r6
  418352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  418356:	463e      	mov	r6, r7
  418358:	4630      	mov	r0, r6
  41835a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41835e:	bf00      	nop

00418360 <iswspace>:
  418360:	28ff      	cmp	r0, #255	; 0xff
  418362:	d807      	bhi.n	418374 <iswspace+0x14>
  418364:	4b04      	ldr	r3, [pc, #16]	; (418378 <iswspace+0x18>)
  418366:	681b      	ldr	r3, [r3, #0]
  418368:	4418      	add	r0, r3
  41836a:	7840      	ldrb	r0, [r0, #1]
  41836c:	f000 0008 	and.w	r0, r0, #8
  418370:	b2c0      	uxtb	r0, r0
  418372:	4770      	bx	lr
  418374:	2000      	movs	r0, #0
  418376:	4770      	bx	lr
  418378:	20000fc4 	.word	0x20000fc4

0041837c <__locale_charset>:
  41837c:	4800      	ldr	r0, [pc, #0]	; (418380 <__locale_charset+0x4>)
  41837e:	4770      	bx	lr
  418380:	20001000 	.word	0x20001000

00418384 <__locale_mb_cur_max>:
  418384:	4b01      	ldr	r3, [pc, #4]	; (41838c <__locale_mb_cur_max+0x8>)
  418386:	6818      	ldr	r0, [r3, #0]
  418388:	4770      	bx	lr
  41838a:	bf00      	nop
  41838c:	20001020 	.word	0x20001020

00418390 <_localeconv_r>:
  418390:	4800      	ldr	r0, [pc, #0]	; (418394 <_localeconv_r+0x4>)
  418392:	4770      	bx	lr
  418394:	20000fc8 	.word	0x20000fc8

00418398 <_lseek_r>:
  418398:	b570      	push	{r4, r5, r6, lr}
  41839a:	4c08      	ldr	r4, [pc, #32]	; (4183bc <_lseek_r+0x24>)
  41839c:	4606      	mov	r6, r0
  41839e:	2500      	movs	r5, #0
  4183a0:	4608      	mov	r0, r1
  4183a2:	4611      	mov	r1, r2
  4183a4:	461a      	mov	r2, r3
  4183a6:	6025      	str	r5, [r4, #0]
  4183a8:	f7f9 ff2a 	bl	412200 <_lseek>
  4183ac:	1c43      	adds	r3, r0, #1
  4183ae:	d000      	beq.n	4183b2 <_lseek_r+0x1a>
  4183b0:	bd70      	pop	{r4, r5, r6, pc}
  4183b2:	6823      	ldr	r3, [r4, #0]
  4183b4:	2b00      	cmp	r3, #0
  4183b6:	d0fb      	beq.n	4183b0 <_lseek_r+0x18>
  4183b8:	6033      	str	r3, [r6, #0]
  4183ba:	bd70      	pop	{r4, r5, r6, pc}
  4183bc:	200050a8 	.word	0x200050a8

004183c0 <__smakebuf_r>:
  4183c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4183c2:	898b      	ldrh	r3, [r1, #12]
  4183c4:	b29a      	uxth	r2, r3
  4183c6:	0796      	lsls	r6, r2, #30
  4183c8:	b091      	sub	sp, #68	; 0x44
  4183ca:	460c      	mov	r4, r1
  4183cc:	4605      	mov	r5, r0
  4183ce:	d437      	bmi.n	418440 <__smakebuf_r+0x80>
  4183d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4183d4:	2900      	cmp	r1, #0
  4183d6:	db17      	blt.n	418408 <__smakebuf_r+0x48>
  4183d8:	aa01      	add	r2, sp, #4
  4183da:	f002 fd19 	bl	41ae10 <_fstat_r>
  4183de:	2800      	cmp	r0, #0
  4183e0:	db10      	blt.n	418404 <__smakebuf_r+0x44>
  4183e2:	9b02      	ldr	r3, [sp, #8]
  4183e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4183e8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  4183ec:	424f      	negs	r7, r1
  4183ee:	414f      	adcs	r7, r1
  4183f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4183f4:	d02c      	beq.n	418450 <__smakebuf_r+0x90>
  4183f6:	89a3      	ldrh	r3, [r4, #12]
  4183f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4183fc:	81a3      	strh	r3, [r4, #12]
  4183fe:	f44f 6680 	mov.w	r6, #1024	; 0x400
  418402:	e00b      	b.n	41841c <__smakebuf_r+0x5c>
  418404:	89a3      	ldrh	r3, [r4, #12]
  418406:	b29a      	uxth	r2, r3
  418408:	f012 0f80 	tst.w	r2, #128	; 0x80
  41840c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  418410:	81a3      	strh	r3, [r4, #12]
  418412:	bf14      	ite	ne
  418414:	2640      	movne	r6, #64	; 0x40
  418416:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  41841a:	2700      	movs	r7, #0
  41841c:	4628      	mov	r0, r5
  41841e:	4631      	mov	r1, r6
  418420:	f7fa fb06 	bl	412a30 <_malloc_r>
  418424:	89a3      	ldrh	r3, [r4, #12]
  418426:	2800      	cmp	r0, #0
  418428:	d029      	beq.n	41847e <__smakebuf_r+0xbe>
  41842a:	4a1b      	ldr	r2, [pc, #108]	; (418498 <__smakebuf_r+0xd8>)
  41842c:	63ea      	str	r2, [r5, #60]	; 0x3c
  41842e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  418432:	81a3      	strh	r3, [r4, #12]
  418434:	6020      	str	r0, [r4, #0]
  418436:	6120      	str	r0, [r4, #16]
  418438:	6166      	str	r6, [r4, #20]
  41843a:	b9a7      	cbnz	r7, 418466 <__smakebuf_r+0xa6>
  41843c:	b011      	add	sp, #68	; 0x44
  41843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  418440:	f101 0343 	add.w	r3, r1, #67	; 0x43
  418444:	2201      	movs	r2, #1
  418446:	600b      	str	r3, [r1, #0]
  418448:	610b      	str	r3, [r1, #16]
  41844a:	614a      	str	r2, [r1, #20]
  41844c:	b011      	add	sp, #68	; 0x44
  41844e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  418450:	4a12      	ldr	r2, [pc, #72]	; (41849c <__smakebuf_r+0xdc>)
  418452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  418454:	4293      	cmp	r3, r2
  418456:	d1ce      	bne.n	4183f6 <__smakebuf_r+0x36>
  418458:	89a3      	ldrh	r3, [r4, #12]
  41845a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  41845e:	4333      	orrs	r3, r6
  418460:	81a3      	strh	r3, [r4, #12]
  418462:	64e6      	str	r6, [r4, #76]	; 0x4c
  418464:	e7da      	b.n	41841c <__smakebuf_r+0x5c>
  418466:	4628      	mov	r0, r5
  418468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41846c:	f003 f896 	bl	41b59c <_isatty_r>
  418470:	2800      	cmp	r0, #0
  418472:	d0e3      	beq.n	41843c <__smakebuf_r+0x7c>
  418474:	89a3      	ldrh	r3, [r4, #12]
  418476:	f043 0301 	orr.w	r3, r3, #1
  41847a:	81a3      	strh	r3, [r4, #12]
  41847c:	e7de      	b.n	41843c <__smakebuf_r+0x7c>
  41847e:	059a      	lsls	r2, r3, #22
  418480:	d4dc      	bmi.n	41843c <__smakebuf_r+0x7c>
  418482:	f104 0243 	add.w	r2, r4, #67	; 0x43
  418486:	f043 0302 	orr.w	r3, r3, #2
  41848a:	2101      	movs	r1, #1
  41848c:	81a3      	strh	r3, [r4, #12]
  41848e:	6022      	str	r2, [r4, #0]
  418490:	6122      	str	r2, [r4, #16]
  418492:	6161      	str	r1, [r4, #20]
  418494:	e7d2      	b.n	41843c <__smakebuf_r+0x7c>
  418496:	bf00      	nop
  418498:	00417bd1 	.word	0x00417bd1
  41849c:	004133d9 	.word	0x004133d9

004184a0 <_mbrtowc_r>:
  4184a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4184a4:	b083      	sub	sp, #12
  4184a6:	461f      	mov	r7, r3
  4184a8:	4614      	mov	r4, r2
  4184aa:	4605      	mov	r5, r0
  4184ac:	4688      	mov	r8, r1
  4184ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4184b0:	4b10      	ldr	r3, [pc, #64]	; (4184f4 <_mbrtowc_r+0x54>)
  4184b2:	b19a      	cbz	r2, 4184dc <_mbrtowc_r+0x3c>
  4184b4:	f8d3 9000 	ldr.w	r9, [r3]
  4184b8:	f7ff ff60 	bl	41837c <__locale_charset>
  4184bc:	4641      	mov	r1, r8
  4184be:	e88d 0041 	stmia.w	sp, {r0, r6}
  4184c2:	4622      	mov	r2, r4
  4184c4:	463b      	mov	r3, r7
  4184c6:	4628      	mov	r0, r5
  4184c8:	47c8      	blx	r9
  4184ca:	1c43      	adds	r3, r0, #1
  4184cc:	d103      	bne.n	4184d6 <_mbrtowc_r+0x36>
  4184ce:	2200      	movs	r2, #0
  4184d0:	238a      	movs	r3, #138	; 0x8a
  4184d2:	6032      	str	r2, [r6, #0]
  4184d4:	602b      	str	r3, [r5, #0]
  4184d6:	b003      	add	sp, #12
  4184d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4184dc:	681f      	ldr	r7, [r3, #0]
  4184de:	f7ff ff4d 	bl	41837c <__locale_charset>
  4184e2:	4621      	mov	r1, r4
  4184e4:	e88d 0041 	stmia.w	sp, {r0, r6}
  4184e8:	4a03      	ldr	r2, [pc, #12]	; (4184f8 <_mbrtowc_r+0x58>)
  4184ea:	4628      	mov	r0, r5
  4184ec:	2301      	movs	r3, #1
  4184ee:	47b8      	blx	r7
  4184f0:	e7eb      	b.n	4184ca <_mbrtowc_r+0x2a>
  4184f2:	bf00      	nop
  4184f4:	20001024 	.word	0x20001024
  4184f8:	0041ddc4 	.word	0x0041ddc4

004184fc <__ascii_mbtowc>:
  4184fc:	b082      	sub	sp, #8
  4184fe:	b149      	cbz	r1, 418514 <__ascii_mbtowc+0x18>
  418500:	b15a      	cbz	r2, 41851a <__ascii_mbtowc+0x1e>
  418502:	b16b      	cbz	r3, 418520 <__ascii_mbtowc+0x24>
  418504:	7813      	ldrb	r3, [r2, #0]
  418506:	600b      	str	r3, [r1, #0]
  418508:	7810      	ldrb	r0, [r2, #0]
  41850a:	3000      	adds	r0, #0
  41850c:	bf18      	it	ne
  41850e:	2001      	movne	r0, #1
  418510:	b002      	add	sp, #8
  418512:	4770      	bx	lr
  418514:	a901      	add	r1, sp, #4
  418516:	2a00      	cmp	r2, #0
  418518:	d1f3      	bne.n	418502 <__ascii_mbtowc+0x6>
  41851a:	4610      	mov	r0, r2
  41851c:	b002      	add	sp, #8
  41851e:	4770      	bx	lr
  418520:	f06f 0001 	mvn.w	r0, #1
  418524:	e7f4      	b.n	418510 <__ascii_mbtowc+0x14>
  418526:	bf00      	nop

00418528 <memchr>:
  418528:	0783      	lsls	r3, r0, #30
  41852a:	b470      	push	{r4, r5, r6}
  41852c:	b2c9      	uxtb	r1, r1
  41852e:	d03f      	beq.n	4185b0 <memchr+0x88>
  418530:	1e54      	subs	r4, r2, #1
  418532:	b32a      	cbz	r2, 418580 <memchr+0x58>
  418534:	7803      	ldrb	r3, [r0, #0]
  418536:	428b      	cmp	r3, r1
  418538:	d023      	beq.n	418582 <memchr+0x5a>
  41853a:	1c43      	adds	r3, r0, #1
  41853c:	e004      	b.n	418548 <memchr+0x20>
  41853e:	b1fc      	cbz	r4, 418580 <memchr+0x58>
  418540:	7804      	ldrb	r4, [r0, #0]
  418542:	428c      	cmp	r4, r1
  418544:	d01d      	beq.n	418582 <memchr+0x5a>
  418546:	4614      	mov	r4, r2
  418548:	f013 0f03 	tst.w	r3, #3
  41854c:	4618      	mov	r0, r3
  41854e:	f104 32ff 	add.w	r2, r4, #4294967295
  418552:	f103 0301 	add.w	r3, r3, #1
  418556:	d1f2      	bne.n	41853e <memchr+0x16>
  418558:	2c03      	cmp	r4, #3
  41855a:	d814      	bhi.n	418586 <memchr+0x5e>
  41855c:	1e65      	subs	r5, r4, #1
  41855e:	b34c      	cbz	r4, 4185b4 <memchr+0x8c>
  418560:	7803      	ldrb	r3, [r0, #0]
  418562:	428b      	cmp	r3, r1
  418564:	d00d      	beq.n	418582 <memchr+0x5a>
  418566:	1c42      	adds	r2, r0, #1
  418568:	2300      	movs	r3, #0
  41856a:	e002      	b.n	418572 <memchr+0x4a>
  41856c:	7804      	ldrb	r4, [r0, #0]
  41856e:	428c      	cmp	r4, r1
  418570:	d007      	beq.n	418582 <memchr+0x5a>
  418572:	42ab      	cmp	r3, r5
  418574:	4610      	mov	r0, r2
  418576:	f103 0301 	add.w	r3, r3, #1
  41857a:	f102 0201 	add.w	r2, r2, #1
  41857e:	d1f5      	bne.n	41856c <memchr+0x44>
  418580:	2000      	movs	r0, #0
  418582:	bc70      	pop	{r4, r5, r6}
  418584:	4770      	bx	lr
  418586:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  41858a:	4603      	mov	r3, r0
  41858c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  418590:	4618      	mov	r0, r3
  418592:	3304      	adds	r3, #4
  418594:	6802      	ldr	r2, [r0, #0]
  418596:	4072      	eors	r2, r6
  418598:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  41859c:	ea25 0202 	bic.w	r2, r5, r2
  4185a0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4185a4:	d1da      	bne.n	41855c <memchr+0x34>
  4185a6:	3c04      	subs	r4, #4
  4185a8:	2c03      	cmp	r4, #3
  4185aa:	4618      	mov	r0, r3
  4185ac:	d8f0      	bhi.n	418590 <memchr+0x68>
  4185ae:	e7d5      	b.n	41855c <memchr+0x34>
  4185b0:	4614      	mov	r4, r2
  4185b2:	e7d1      	b.n	418558 <memchr+0x30>
  4185b4:	4620      	mov	r0, r4
  4185b6:	e7e4      	b.n	418582 <memchr+0x5a>

004185b8 <memmove>:
  4185b8:	4288      	cmp	r0, r1
  4185ba:	b4f0      	push	{r4, r5, r6, r7}
  4185bc:	d910      	bls.n	4185e0 <memmove+0x28>
  4185be:	188c      	adds	r4, r1, r2
  4185c0:	42a0      	cmp	r0, r4
  4185c2:	d20d      	bcs.n	4185e0 <memmove+0x28>
  4185c4:	1885      	adds	r5, r0, r2
  4185c6:	1e53      	subs	r3, r2, #1
  4185c8:	b142      	cbz	r2, 4185dc <memmove+0x24>
  4185ca:	4621      	mov	r1, r4
  4185cc:	462a      	mov	r2, r5
  4185ce:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4185d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4185d6:	3b01      	subs	r3, #1
  4185d8:	1c5c      	adds	r4, r3, #1
  4185da:	d1f8      	bne.n	4185ce <memmove+0x16>
  4185dc:	bcf0      	pop	{r4, r5, r6, r7}
  4185de:	4770      	bx	lr
  4185e0:	2a0f      	cmp	r2, #15
  4185e2:	d93f      	bls.n	418664 <memmove+0xac>
  4185e4:	ea40 0301 	orr.w	r3, r0, r1
  4185e8:	079b      	lsls	r3, r3, #30
  4185ea:	d13f      	bne.n	41866c <memmove+0xb4>
  4185ec:	f1a2 0710 	sub.w	r7, r2, #16
  4185f0:	093f      	lsrs	r7, r7, #4
  4185f2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4185f6:	3610      	adds	r6, #16
  4185f8:	460c      	mov	r4, r1
  4185fa:	4603      	mov	r3, r0
  4185fc:	6825      	ldr	r5, [r4, #0]
  4185fe:	601d      	str	r5, [r3, #0]
  418600:	6865      	ldr	r5, [r4, #4]
  418602:	605d      	str	r5, [r3, #4]
  418604:	68a5      	ldr	r5, [r4, #8]
  418606:	609d      	str	r5, [r3, #8]
  418608:	68e5      	ldr	r5, [r4, #12]
  41860a:	60dd      	str	r5, [r3, #12]
  41860c:	3310      	adds	r3, #16
  41860e:	42b3      	cmp	r3, r6
  418610:	f104 0410 	add.w	r4, r4, #16
  418614:	d1f2      	bne.n	4185fc <memmove+0x44>
  418616:	1c7b      	adds	r3, r7, #1
  418618:	f002 0c0f 	and.w	ip, r2, #15
  41861c:	011b      	lsls	r3, r3, #4
  41861e:	f1bc 0f03 	cmp.w	ip, #3
  418622:	4419      	add	r1, r3
  418624:	4403      	add	r3, r0
  418626:	d923      	bls.n	418670 <memmove+0xb8>
  418628:	460e      	mov	r6, r1
  41862a:	461d      	mov	r5, r3
  41862c:	4664      	mov	r4, ip
  41862e:	3c04      	subs	r4, #4
  418630:	f856 7b04 	ldr.w	r7, [r6], #4
  418634:	f845 7b04 	str.w	r7, [r5], #4
  418638:	2c03      	cmp	r4, #3
  41863a:	d8f8      	bhi.n	41862e <memmove+0x76>
  41863c:	f1ac 0404 	sub.w	r4, ip, #4
  418640:	f024 0403 	bic.w	r4, r4, #3
  418644:	3404      	adds	r4, #4
  418646:	f002 0203 	and.w	r2, r2, #3
  41864a:	4423      	add	r3, r4
  41864c:	4421      	add	r1, r4
  41864e:	2a00      	cmp	r2, #0
  418650:	d0c4      	beq.n	4185dc <memmove+0x24>
  418652:	441a      	add	r2, r3
  418654:	f811 4b01 	ldrb.w	r4, [r1], #1
  418658:	f803 4b01 	strb.w	r4, [r3], #1
  41865c:	4293      	cmp	r3, r2
  41865e:	d1f9      	bne.n	418654 <memmove+0x9c>
  418660:	bcf0      	pop	{r4, r5, r6, r7}
  418662:	4770      	bx	lr
  418664:	4603      	mov	r3, r0
  418666:	2a00      	cmp	r2, #0
  418668:	d1f3      	bne.n	418652 <memmove+0x9a>
  41866a:	e7b7      	b.n	4185dc <memmove+0x24>
  41866c:	4603      	mov	r3, r0
  41866e:	e7f0      	b.n	418652 <memmove+0x9a>
  418670:	4662      	mov	r2, ip
  418672:	2a00      	cmp	r2, #0
  418674:	d1ed      	bne.n	418652 <memmove+0x9a>
  418676:	e7b1      	b.n	4185dc <memmove+0x24>

00418678 <_Balloc>:
  418678:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  41867a:	b570      	push	{r4, r5, r6, lr}
  41867c:	4605      	mov	r5, r0
  41867e:	460c      	mov	r4, r1
  418680:	b14a      	cbz	r2, 418696 <_Balloc+0x1e>
  418682:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  418686:	b180      	cbz	r0, 4186aa <_Balloc+0x32>
  418688:	6801      	ldr	r1, [r0, #0]
  41868a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  41868e:	2200      	movs	r2, #0
  418690:	6102      	str	r2, [r0, #16]
  418692:	60c2      	str	r2, [r0, #12]
  418694:	bd70      	pop	{r4, r5, r6, pc}
  418696:	2221      	movs	r2, #33	; 0x21
  418698:	2104      	movs	r1, #4
  41869a:	f002 fb41 	bl	41ad20 <_calloc_r>
  41869e:	64e8      	str	r0, [r5, #76]	; 0x4c
  4186a0:	4602      	mov	r2, r0
  4186a2:	2800      	cmp	r0, #0
  4186a4:	d1ed      	bne.n	418682 <_Balloc+0xa>
  4186a6:	2000      	movs	r0, #0
  4186a8:	bd70      	pop	{r4, r5, r6, pc}
  4186aa:	2101      	movs	r1, #1
  4186ac:	fa01 f604 	lsl.w	r6, r1, r4
  4186b0:	1d72      	adds	r2, r6, #5
  4186b2:	4628      	mov	r0, r5
  4186b4:	0092      	lsls	r2, r2, #2
  4186b6:	f002 fb33 	bl	41ad20 <_calloc_r>
  4186ba:	2800      	cmp	r0, #0
  4186bc:	d0f3      	beq.n	4186a6 <_Balloc+0x2e>
  4186be:	6044      	str	r4, [r0, #4]
  4186c0:	6086      	str	r6, [r0, #8]
  4186c2:	e7e4      	b.n	41868e <_Balloc+0x16>

004186c4 <_Bfree>:
  4186c4:	b131      	cbz	r1, 4186d4 <_Bfree+0x10>
  4186c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4186c8:	684a      	ldr	r2, [r1, #4]
  4186ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4186ce:	6008      	str	r0, [r1, #0]
  4186d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4186d4:	4770      	bx	lr
  4186d6:	bf00      	nop

004186d8 <__multadd>:
  4186d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4186dc:	f8d1 8010 	ldr.w	r8, [r1, #16]
  4186e0:	b082      	sub	sp, #8
  4186e2:	4689      	mov	r9, r1
  4186e4:	4682      	mov	sl, r0
  4186e6:	f101 0514 	add.w	r5, r1, #20
  4186ea:	2400      	movs	r4, #0
  4186ec:	682f      	ldr	r7, [r5, #0]
  4186ee:	b2be      	uxth	r6, r7
  4186f0:	0c3f      	lsrs	r7, r7, #16
  4186f2:	fb02 3606 	mla	r6, r2, r6, r3
  4186f6:	fb02 f307 	mul.w	r3, r2, r7
  4186fa:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  4186fe:	3401      	adds	r4, #1
  418700:	b2b6      	uxth	r6, r6
  418702:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  418706:	45a0      	cmp	r8, r4
  418708:	f845 6b04 	str.w	r6, [r5], #4
  41870c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  418710:	dcec      	bgt.n	4186ec <__multadd+0x14>
  418712:	b153      	cbz	r3, 41872a <__multadd+0x52>
  418714:	f8d9 2008 	ldr.w	r2, [r9, #8]
  418718:	4590      	cmp	r8, r2
  41871a:	da0a      	bge.n	418732 <__multadd+0x5a>
  41871c:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  418720:	f108 0201 	add.w	r2, r8, #1
  418724:	614b      	str	r3, [r1, #20]
  418726:	f8c9 2010 	str.w	r2, [r9, #16]
  41872a:	4648      	mov	r0, r9
  41872c:	b002      	add	sp, #8
  41872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418732:	f8d9 1004 	ldr.w	r1, [r9, #4]
  418736:	9301      	str	r3, [sp, #4]
  418738:	3101      	adds	r1, #1
  41873a:	4650      	mov	r0, sl
  41873c:	f7ff ff9c 	bl	418678 <_Balloc>
  418740:	f8d9 2010 	ldr.w	r2, [r9, #16]
  418744:	3202      	adds	r2, #2
  418746:	f109 010c 	add.w	r1, r9, #12
  41874a:	4604      	mov	r4, r0
  41874c:	0092      	lsls	r2, r2, #2
  41874e:	300c      	adds	r0, #12
  418750:	f7fa fc0a 	bl	412f68 <memcpy>
  418754:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  418758:	f8d9 1004 	ldr.w	r1, [r9, #4]
  41875c:	9b01      	ldr	r3, [sp, #4]
  41875e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  418762:	f8c9 0000 	str.w	r0, [r9]
  418766:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  41876a:	46a1      	mov	r9, r4
  41876c:	e7d6      	b.n	41871c <__multadd+0x44>
  41876e:	bf00      	nop

00418770 <__s2b>:
  418770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  418774:	4699      	mov	r9, r3
  418776:	4b23      	ldr	r3, [pc, #140]	; (418804 <__s2b+0x94>)
  418778:	9e08      	ldr	r6, [sp, #32]
  41877a:	f109 0408 	add.w	r4, r9, #8
  41877e:	fb83 5304 	smull	r5, r3, r3, r4
  418782:	17e4      	asrs	r4, r4, #31
  418784:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  418788:	2b01      	cmp	r3, #1
  41878a:	4607      	mov	r7, r0
  41878c:	460c      	mov	r4, r1
  41878e:	4690      	mov	r8, r2
  418790:	dd35      	ble.n	4187fe <__s2b+0x8e>
  418792:	2501      	movs	r5, #1
  418794:	2100      	movs	r1, #0
  418796:	006d      	lsls	r5, r5, #1
  418798:	42ab      	cmp	r3, r5
  41879a:	f101 0101 	add.w	r1, r1, #1
  41879e:	dcfa      	bgt.n	418796 <__s2b+0x26>
  4187a0:	4638      	mov	r0, r7
  4187a2:	f7ff ff69 	bl	418678 <_Balloc>
  4187a6:	2301      	movs	r3, #1
  4187a8:	f1b8 0f09 	cmp.w	r8, #9
  4187ac:	6146      	str	r6, [r0, #20]
  4187ae:	6103      	str	r3, [r0, #16]
  4187b0:	dd21      	ble.n	4187f6 <__s2b+0x86>
  4187b2:	f104 0609 	add.w	r6, r4, #9
  4187b6:	4635      	mov	r5, r6
  4187b8:	4444      	add	r4, r8
  4187ba:	f815 3b01 	ldrb.w	r3, [r5], #1
  4187be:	4601      	mov	r1, r0
  4187c0:	3b30      	subs	r3, #48	; 0x30
  4187c2:	4638      	mov	r0, r7
  4187c4:	220a      	movs	r2, #10
  4187c6:	f7ff ff87 	bl	4186d8 <__multadd>
  4187ca:	42a5      	cmp	r5, r4
  4187cc:	d1f5      	bne.n	4187ba <__s2b+0x4a>
  4187ce:	eb06 0408 	add.w	r4, r6, r8
  4187d2:	3c08      	subs	r4, #8
  4187d4:	45c1      	cmp	r9, r8
  4187d6:	dd0c      	ble.n	4187f2 <__s2b+0x82>
  4187d8:	ebc8 0809 	rsb	r8, r8, r9
  4187dc:	44a0      	add	r8, r4
  4187de:	f814 3b01 	ldrb.w	r3, [r4], #1
  4187e2:	4601      	mov	r1, r0
  4187e4:	3b30      	subs	r3, #48	; 0x30
  4187e6:	4638      	mov	r0, r7
  4187e8:	220a      	movs	r2, #10
  4187ea:	f7ff ff75 	bl	4186d8 <__multadd>
  4187ee:	4544      	cmp	r4, r8
  4187f0:	d1f5      	bne.n	4187de <__s2b+0x6e>
  4187f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4187f6:	340a      	adds	r4, #10
  4187f8:	f04f 0809 	mov.w	r8, #9
  4187fc:	e7ea      	b.n	4187d4 <__s2b+0x64>
  4187fe:	2100      	movs	r1, #0
  418800:	e7ce      	b.n	4187a0 <__s2b+0x30>
  418802:	bf00      	nop
  418804:	38e38e39 	.word	0x38e38e39

00418808 <__hi0bits>:
  418808:	0c03      	lsrs	r3, r0, #16
  41880a:	041b      	lsls	r3, r3, #16
  41880c:	b9b3      	cbnz	r3, 41883c <__hi0bits+0x34>
  41880e:	0400      	lsls	r0, r0, #16
  418810:	2310      	movs	r3, #16
  418812:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  418816:	bf04      	itt	eq
  418818:	0200      	lsleq	r0, r0, #8
  41881a:	3308      	addeq	r3, #8
  41881c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  418820:	bf04      	itt	eq
  418822:	0100      	lsleq	r0, r0, #4
  418824:	3304      	addeq	r3, #4
  418826:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  41882a:	bf04      	itt	eq
  41882c:	0080      	lsleq	r0, r0, #2
  41882e:	3302      	addeq	r3, #2
  418830:	2800      	cmp	r0, #0
  418832:	db07      	blt.n	418844 <__hi0bits+0x3c>
  418834:	0042      	lsls	r2, r0, #1
  418836:	d403      	bmi.n	418840 <__hi0bits+0x38>
  418838:	2020      	movs	r0, #32
  41883a:	4770      	bx	lr
  41883c:	2300      	movs	r3, #0
  41883e:	e7e8      	b.n	418812 <__hi0bits+0xa>
  418840:	1c58      	adds	r0, r3, #1
  418842:	4770      	bx	lr
  418844:	4618      	mov	r0, r3
  418846:	4770      	bx	lr

00418848 <__lo0bits>:
  418848:	6803      	ldr	r3, [r0, #0]
  41884a:	f013 0207 	ands.w	r2, r3, #7
  41884e:	d007      	beq.n	418860 <__lo0bits+0x18>
  418850:	07d9      	lsls	r1, r3, #31
  418852:	d420      	bmi.n	418896 <__lo0bits+0x4e>
  418854:	079a      	lsls	r2, r3, #30
  418856:	d420      	bmi.n	41889a <__lo0bits+0x52>
  418858:	089b      	lsrs	r3, r3, #2
  41885a:	6003      	str	r3, [r0, #0]
  41885c:	2002      	movs	r0, #2
  41885e:	4770      	bx	lr
  418860:	b299      	uxth	r1, r3
  418862:	b909      	cbnz	r1, 418868 <__lo0bits+0x20>
  418864:	0c1b      	lsrs	r3, r3, #16
  418866:	2210      	movs	r2, #16
  418868:	f013 0fff 	tst.w	r3, #255	; 0xff
  41886c:	bf04      	itt	eq
  41886e:	0a1b      	lsreq	r3, r3, #8
  418870:	3208      	addeq	r2, #8
  418872:	0719      	lsls	r1, r3, #28
  418874:	bf04      	itt	eq
  418876:	091b      	lsreq	r3, r3, #4
  418878:	3204      	addeq	r2, #4
  41887a:	0799      	lsls	r1, r3, #30
  41887c:	bf04      	itt	eq
  41887e:	089b      	lsreq	r3, r3, #2
  418880:	3202      	addeq	r2, #2
  418882:	07d9      	lsls	r1, r3, #31
  418884:	d404      	bmi.n	418890 <__lo0bits+0x48>
  418886:	085b      	lsrs	r3, r3, #1
  418888:	d101      	bne.n	41888e <__lo0bits+0x46>
  41888a:	2020      	movs	r0, #32
  41888c:	4770      	bx	lr
  41888e:	3201      	adds	r2, #1
  418890:	6003      	str	r3, [r0, #0]
  418892:	4610      	mov	r0, r2
  418894:	4770      	bx	lr
  418896:	2000      	movs	r0, #0
  418898:	4770      	bx	lr
  41889a:	085b      	lsrs	r3, r3, #1
  41889c:	6003      	str	r3, [r0, #0]
  41889e:	2001      	movs	r0, #1
  4188a0:	4770      	bx	lr
  4188a2:	bf00      	nop

004188a4 <__i2b>:
  4188a4:	b510      	push	{r4, lr}
  4188a6:	460c      	mov	r4, r1
  4188a8:	2101      	movs	r1, #1
  4188aa:	f7ff fee5 	bl	418678 <_Balloc>
  4188ae:	2201      	movs	r2, #1
  4188b0:	6144      	str	r4, [r0, #20]
  4188b2:	6102      	str	r2, [r0, #16]
  4188b4:	bd10      	pop	{r4, pc}
  4188b6:	bf00      	nop

004188b8 <__multiply>:
  4188b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4188bc:	690d      	ldr	r5, [r1, #16]
  4188be:	f8d2 9010 	ldr.w	r9, [r2, #16]
  4188c2:	454d      	cmp	r5, r9
  4188c4:	b085      	sub	sp, #20
  4188c6:	460c      	mov	r4, r1
  4188c8:	4692      	mov	sl, r2
  4188ca:	da04      	bge.n	4188d6 <__multiply+0x1e>
  4188cc:	462a      	mov	r2, r5
  4188ce:	4654      	mov	r4, sl
  4188d0:	464d      	mov	r5, r9
  4188d2:	468a      	mov	sl, r1
  4188d4:	4691      	mov	r9, r2
  4188d6:	68a3      	ldr	r3, [r4, #8]
  4188d8:	6861      	ldr	r1, [r4, #4]
  4188da:	eb05 0709 	add.w	r7, r5, r9
  4188de:	429f      	cmp	r7, r3
  4188e0:	bfc8      	it	gt
  4188e2:	3101      	addgt	r1, #1
  4188e4:	f7ff fec8 	bl	418678 <_Balloc>
  4188e8:	f100 0614 	add.w	r6, r0, #20
  4188ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  4188f0:	4546      	cmp	r6, r8
  4188f2:	9001      	str	r0, [sp, #4]
  4188f4:	d205      	bcs.n	418902 <__multiply+0x4a>
  4188f6:	4633      	mov	r3, r6
  4188f8:	2000      	movs	r0, #0
  4188fa:	f843 0b04 	str.w	r0, [r3], #4
  4188fe:	4598      	cmp	r8, r3
  418900:	d8fb      	bhi.n	4188fa <__multiply+0x42>
  418902:	f10a 0c14 	add.w	ip, sl, #20
  418906:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  41890a:	3414      	adds	r4, #20
  41890c:	45cc      	cmp	ip, r9
  41890e:	9400      	str	r4, [sp, #0]
  418910:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  418914:	d25b      	bcs.n	4189ce <__multiply+0x116>
  418916:	f8cd 8008 	str.w	r8, [sp, #8]
  41891a:	9703      	str	r7, [sp, #12]
  41891c:	46c8      	mov	r8, r9
  41891e:	f85c 3b04 	ldr.w	r3, [ip], #4
  418922:	b29c      	uxth	r4, r3
  418924:	b324      	cbz	r4, 418970 <__multiply+0xb8>
  418926:	9a00      	ldr	r2, [sp, #0]
  418928:	4633      	mov	r3, r6
  41892a:	f04f 0900 	mov.w	r9, #0
  41892e:	e000      	b.n	418932 <__multiply+0x7a>
  418930:	460b      	mov	r3, r1
  418932:	f852 7b04 	ldr.w	r7, [r2], #4
  418936:	6819      	ldr	r1, [r3, #0]
  418938:	fa1f fb87 	uxth.w	fp, r7
  41893c:	fa1f fa81 	uxth.w	sl, r1
  418940:	0c38      	lsrs	r0, r7, #16
  418942:	0c09      	lsrs	r1, r1, #16
  418944:	fb04 a70b 	mla	r7, r4, fp, sl
  418948:	44b9      	add	r9, r7
  41894a:	fb04 1000 	mla	r0, r4, r0, r1
  41894e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  418952:	4619      	mov	r1, r3
  418954:	fa1f f989 	uxth.w	r9, r9
  418958:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  41895c:	4295      	cmp	r5, r2
  41895e:	ea4f 4910 	mov.w	r9, r0, lsr #16
  418962:	f841 7b04 	str.w	r7, [r1], #4
  418966:	d8e3      	bhi.n	418930 <__multiply+0x78>
  418968:	f8c3 9004 	str.w	r9, [r3, #4]
  41896c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  418970:	ea5f 4913 	movs.w	r9, r3, lsr #16
  418974:	d024      	beq.n	4189c0 <__multiply+0x108>
  418976:	f8d6 a000 	ldr.w	sl, [r6]
  41897a:	9b00      	ldr	r3, [sp, #0]
  41897c:	4650      	mov	r0, sl
  41897e:	4631      	mov	r1, r6
  418980:	f04f 0b00 	mov.w	fp, #0
  418984:	e000      	b.n	418988 <__multiply+0xd0>
  418986:	4611      	mov	r1, r2
  418988:	881a      	ldrh	r2, [r3, #0]
  41898a:	0c00      	lsrs	r0, r0, #16
  41898c:	fb09 0002 	mla	r0, r9, r2, r0
  418990:	4483      	add	fp, r0
  418992:	fa1f fa8a 	uxth.w	sl, sl
  418996:	460a      	mov	r2, r1
  418998:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  41899c:	f842 0b04 	str.w	r0, [r2], #4
  4189a0:	f853 7b04 	ldr.w	r7, [r3], #4
  4189a4:	6848      	ldr	r0, [r1, #4]
  4189a6:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4189aa:	b284      	uxth	r4, r0
  4189ac:	fb09 4a0a 	mla	sl, r9, sl, r4
  4189b0:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  4189b4:	429d      	cmp	r5, r3
  4189b6:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  4189ba:	d8e4      	bhi.n	418986 <__multiply+0xce>
  4189bc:	f8c1 a004 	str.w	sl, [r1, #4]
  4189c0:	45e0      	cmp	r8, ip
  4189c2:	f106 0604 	add.w	r6, r6, #4
  4189c6:	d8aa      	bhi.n	41891e <__multiply+0x66>
  4189c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4189cc:	9f03      	ldr	r7, [sp, #12]
  4189ce:	2f00      	cmp	r7, #0
  4189d0:	dd0a      	ble.n	4189e8 <__multiply+0x130>
  4189d2:	f858 3c04 	ldr.w	r3, [r8, #-4]
  4189d6:	f1a8 0804 	sub.w	r8, r8, #4
  4189da:	b11b      	cbz	r3, 4189e4 <__multiply+0x12c>
  4189dc:	e004      	b.n	4189e8 <__multiply+0x130>
  4189de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4189e2:	b90b      	cbnz	r3, 4189e8 <__multiply+0x130>
  4189e4:	3f01      	subs	r7, #1
  4189e6:	d1fa      	bne.n	4189de <__multiply+0x126>
  4189e8:	9b01      	ldr	r3, [sp, #4]
  4189ea:	4618      	mov	r0, r3
  4189ec:	611f      	str	r7, [r3, #16]
  4189ee:	b005      	add	sp, #20
  4189f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004189f4 <__pow5mult>:
  4189f4:	f012 0303 	ands.w	r3, r2, #3
  4189f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4189fc:	4614      	mov	r4, r2
  4189fe:	4607      	mov	r7, r0
  418a00:	460e      	mov	r6, r1
  418a02:	d12c      	bne.n	418a5e <__pow5mult+0x6a>
  418a04:	10a4      	asrs	r4, r4, #2
  418a06:	d01c      	beq.n	418a42 <__pow5mult+0x4e>
  418a08:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  418a0a:	2d00      	cmp	r5, #0
  418a0c:	d030      	beq.n	418a70 <__pow5mult+0x7c>
  418a0e:	f04f 0800 	mov.w	r8, #0
  418a12:	e004      	b.n	418a1e <__pow5mult+0x2a>
  418a14:	1064      	asrs	r4, r4, #1
  418a16:	d014      	beq.n	418a42 <__pow5mult+0x4e>
  418a18:	6828      	ldr	r0, [r5, #0]
  418a1a:	b1a8      	cbz	r0, 418a48 <__pow5mult+0x54>
  418a1c:	4605      	mov	r5, r0
  418a1e:	07e3      	lsls	r3, r4, #31
  418a20:	d5f8      	bpl.n	418a14 <__pow5mult+0x20>
  418a22:	4638      	mov	r0, r7
  418a24:	4631      	mov	r1, r6
  418a26:	462a      	mov	r2, r5
  418a28:	f7ff ff46 	bl	4188b8 <__multiply>
  418a2c:	b1ae      	cbz	r6, 418a5a <__pow5mult+0x66>
  418a2e:	6872      	ldr	r2, [r6, #4]
  418a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  418a32:	1064      	asrs	r4, r4, #1
  418a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  418a38:	6031      	str	r1, [r6, #0]
  418a3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  418a3e:	4606      	mov	r6, r0
  418a40:	d1ea      	bne.n	418a18 <__pow5mult+0x24>
  418a42:	4630      	mov	r0, r6
  418a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  418a48:	4638      	mov	r0, r7
  418a4a:	4629      	mov	r1, r5
  418a4c:	462a      	mov	r2, r5
  418a4e:	f7ff ff33 	bl	4188b8 <__multiply>
  418a52:	6028      	str	r0, [r5, #0]
  418a54:	f8c0 8000 	str.w	r8, [r0]
  418a58:	e7e0      	b.n	418a1c <__pow5mult+0x28>
  418a5a:	4606      	mov	r6, r0
  418a5c:	e7da      	b.n	418a14 <__pow5mult+0x20>
  418a5e:	1e5d      	subs	r5, r3, #1
  418a60:	4a0a      	ldr	r2, [pc, #40]	; (418a8c <__pow5mult+0x98>)
  418a62:	2300      	movs	r3, #0
  418a64:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  418a68:	f7ff fe36 	bl	4186d8 <__multadd>
  418a6c:	4606      	mov	r6, r0
  418a6e:	e7c9      	b.n	418a04 <__pow5mult+0x10>
  418a70:	2101      	movs	r1, #1
  418a72:	4638      	mov	r0, r7
  418a74:	f7ff fe00 	bl	418678 <_Balloc>
  418a78:	f240 2171 	movw	r1, #625	; 0x271
  418a7c:	2201      	movs	r2, #1
  418a7e:	2300      	movs	r3, #0
  418a80:	6141      	str	r1, [r0, #20]
  418a82:	6102      	str	r2, [r0, #16]
  418a84:	4605      	mov	r5, r0
  418a86:	64b8      	str	r0, [r7, #72]	; 0x48
  418a88:	6003      	str	r3, [r0, #0]
  418a8a:	e7c0      	b.n	418a0e <__pow5mult+0x1a>
  418a8c:	0041e058 	.word	0x0041e058

00418a90 <__lshift>:
  418a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418a94:	4693      	mov	fp, r2
  418a96:	690a      	ldr	r2, [r1, #16]
  418a98:	688b      	ldr	r3, [r1, #8]
  418a9a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  418a9e:	eb0a 0902 	add.w	r9, sl, r2
  418aa2:	f109 0601 	add.w	r6, r9, #1
  418aa6:	429e      	cmp	r6, r3
  418aa8:	460f      	mov	r7, r1
  418aaa:	4680      	mov	r8, r0
  418aac:	6849      	ldr	r1, [r1, #4]
  418aae:	dd04      	ble.n	418aba <__lshift+0x2a>
  418ab0:	005b      	lsls	r3, r3, #1
  418ab2:	429e      	cmp	r6, r3
  418ab4:	f101 0101 	add.w	r1, r1, #1
  418ab8:	dcfa      	bgt.n	418ab0 <__lshift+0x20>
  418aba:	4640      	mov	r0, r8
  418abc:	f7ff fddc 	bl	418678 <_Balloc>
  418ac0:	f1ba 0f00 	cmp.w	sl, #0
  418ac4:	f100 0414 	add.w	r4, r0, #20
  418ac8:	dd09      	ble.n	418ade <__lshift+0x4e>
  418aca:	2300      	movs	r3, #0
  418acc:	461a      	mov	r2, r3
  418ace:	4625      	mov	r5, r4
  418ad0:	3301      	adds	r3, #1
  418ad2:	4553      	cmp	r3, sl
  418ad4:	f845 2b04 	str.w	r2, [r5], #4
  418ad8:	d1fa      	bne.n	418ad0 <__lshift+0x40>
  418ada:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  418ade:	693a      	ldr	r2, [r7, #16]
  418ae0:	f107 0314 	add.w	r3, r7, #20
  418ae4:	f01b 0b1f 	ands.w	fp, fp, #31
  418ae8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  418aec:	d021      	beq.n	418b32 <__lshift+0xa2>
  418aee:	f1cb 0a20 	rsb	sl, fp, #32
  418af2:	2200      	movs	r2, #0
  418af4:	e000      	b.n	418af8 <__lshift+0x68>
  418af6:	462c      	mov	r4, r5
  418af8:	6819      	ldr	r1, [r3, #0]
  418afa:	4625      	mov	r5, r4
  418afc:	fa01 f10b 	lsl.w	r1, r1, fp
  418b00:	430a      	orrs	r2, r1
  418b02:	f845 2b04 	str.w	r2, [r5], #4
  418b06:	f853 2b04 	ldr.w	r2, [r3], #4
  418b0a:	4563      	cmp	r3, ip
  418b0c:	fa22 f20a 	lsr.w	r2, r2, sl
  418b10:	d3f1      	bcc.n	418af6 <__lshift+0x66>
  418b12:	6062      	str	r2, [r4, #4]
  418b14:	b10a      	cbz	r2, 418b1a <__lshift+0x8a>
  418b16:	f109 0602 	add.w	r6, r9, #2
  418b1a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  418b1e:	687a      	ldr	r2, [r7, #4]
  418b20:	3e01      	subs	r6, #1
  418b22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  418b26:	6106      	str	r6, [r0, #16]
  418b28:	6039      	str	r1, [r7, #0]
  418b2a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  418b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418b32:	f853 2b04 	ldr.w	r2, [r3], #4
  418b36:	f844 2b04 	str.w	r2, [r4], #4
  418b3a:	459c      	cmp	ip, r3
  418b3c:	d9ed      	bls.n	418b1a <__lshift+0x8a>
  418b3e:	f853 2b04 	ldr.w	r2, [r3], #4
  418b42:	f844 2b04 	str.w	r2, [r4], #4
  418b46:	459c      	cmp	ip, r3
  418b48:	d8f3      	bhi.n	418b32 <__lshift+0xa2>
  418b4a:	e7e6      	b.n	418b1a <__lshift+0x8a>

00418b4c <__mcmp>:
  418b4c:	6902      	ldr	r2, [r0, #16]
  418b4e:	690b      	ldr	r3, [r1, #16]
  418b50:	1ad2      	subs	r2, r2, r3
  418b52:	b410      	push	{r4}
  418b54:	d115      	bne.n	418b82 <__mcmp+0x36>
  418b56:	009b      	lsls	r3, r3, #2
  418b58:	3014      	adds	r0, #20
  418b5a:	3114      	adds	r1, #20
  418b5c:	4419      	add	r1, r3
  418b5e:	4403      	add	r3, r0
  418b60:	e001      	b.n	418b66 <__mcmp+0x1a>
  418b62:	4298      	cmp	r0, r3
  418b64:	d211      	bcs.n	418b8a <__mcmp+0x3e>
  418b66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  418b6a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  418b6e:	42a2      	cmp	r2, r4
  418b70:	d0f7      	beq.n	418b62 <__mcmp+0x16>
  418b72:	4294      	cmp	r4, r2
  418b74:	bf94      	ite	ls
  418b76:	2001      	movls	r0, #1
  418b78:	f04f 30ff 	movhi.w	r0, #4294967295
  418b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  418b80:	4770      	bx	lr
  418b82:	4610      	mov	r0, r2
  418b84:	f85d 4b04 	ldr.w	r4, [sp], #4
  418b88:	4770      	bx	lr
  418b8a:	2000      	movs	r0, #0
  418b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  418b90:	4770      	bx	lr
  418b92:	bf00      	nop

00418b94 <__mdiff>:
  418b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  418b98:	460d      	mov	r5, r1
  418b9a:	4604      	mov	r4, r0
  418b9c:	4611      	mov	r1, r2
  418b9e:	4628      	mov	r0, r5
  418ba0:	4616      	mov	r6, r2
  418ba2:	f7ff ffd3 	bl	418b4c <__mcmp>
  418ba6:	1e07      	subs	r7, r0, #0
  418ba8:	d055      	beq.n	418c56 <__mdiff+0xc2>
  418baa:	db4e      	blt.n	418c4a <__mdiff+0xb6>
  418bac:	f04f 0800 	mov.w	r8, #0
  418bb0:	6869      	ldr	r1, [r5, #4]
  418bb2:	4620      	mov	r0, r4
  418bb4:	f7ff fd60 	bl	418678 <_Balloc>
  418bb8:	692f      	ldr	r7, [r5, #16]
  418bba:	6932      	ldr	r2, [r6, #16]
  418bbc:	f8c0 800c 	str.w	r8, [r0, #12]
  418bc0:	3514      	adds	r5, #20
  418bc2:	3614      	adds	r6, #20
  418bc4:	f100 0314 	add.w	r3, r0, #20
  418bc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  418bcc:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  418bd0:	2100      	movs	r1, #0
  418bd2:	f856 2b04 	ldr.w	r2, [r6], #4
  418bd6:	f855 4b04 	ldr.w	r4, [r5], #4
  418bda:	fa1f f982 	uxth.w	r9, r2
  418bde:	fa11 fa84 	uxtah	sl, r1, r4
  418be2:	0c11      	lsrs	r1, r2, #16
  418be4:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  418be8:	ebc9 020a 	rsb	r2, r9, sl
  418bec:	eb01 4122 	add.w	r1, r1, r2, asr #16
  418bf0:	b292      	uxth	r2, r2
  418bf2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  418bf6:	45b0      	cmp	r8, r6
  418bf8:	f843 2b04 	str.w	r2, [r3], #4
  418bfc:	ea4f 4121 	mov.w	r1, r1, asr #16
  418c00:	462c      	mov	r4, r5
  418c02:	d8e6      	bhi.n	418bd2 <__mdiff+0x3e>
  418c04:	45ac      	cmp	ip, r5
  418c06:	4698      	mov	r8, r3
  418c08:	d915      	bls.n	418c36 <__mdiff+0xa2>
  418c0a:	f854 6b04 	ldr.w	r6, [r4], #4
  418c0e:	fa11 f186 	uxtah	r1, r1, r6
  418c12:	0c36      	lsrs	r6, r6, #16
  418c14:	eb06 4621 	add.w	r6, r6, r1, asr #16
  418c18:	b289      	uxth	r1, r1
  418c1a:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  418c1e:	45a4      	cmp	ip, r4
  418c20:	f843 2b04 	str.w	r2, [r3], #4
  418c24:	ea4f 4126 	mov.w	r1, r6, asr #16
  418c28:	d8ef      	bhi.n	418c0a <__mdiff+0x76>
  418c2a:	43eb      	mvns	r3, r5
  418c2c:	4463      	add	r3, ip
  418c2e:	f023 0303 	bic.w	r3, r3, #3
  418c32:	3304      	adds	r3, #4
  418c34:	4443      	add	r3, r8
  418c36:	3b04      	subs	r3, #4
  418c38:	b922      	cbnz	r2, 418c44 <__mdiff+0xb0>
  418c3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  418c3e:	3f01      	subs	r7, #1
  418c40:	2a00      	cmp	r2, #0
  418c42:	d0fa      	beq.n	418c3a <__mdiff+0xa6>
  418c44:	6107      	str	r7, [r0, #16]
  418c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418c4a:	462b      	mov	r3, r5
  418c4c:	f04f 0801 	mov.w	r8, #1
  418c50:	4635      	mov	r5, r6
  418c52:	461e      	mov	r6, r3
  418c54:	e7ac      	b.n	418bb0 <__mdiff+0x1c>
  418c56:	4620      	mov	r0, r4
  418c58:	4639      	mov	r1, r7
  418c5a:	f7ff fd0d 	bl	418678 <_Balloc>
  418c5e:	2301      	movs	r3, #1
  418c60:	6147      	str	r7, [r0, #20]
  418c62:	6103      	str	r3, [r0, #16]
  418c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418c68 <__ulp>:
  418c68:	4b0e      	ldr	r3, [pc, #56]	; (418ca4 <__ulp+0x3c>)
  418c6a:	400b      	ands	r3, r1
  418c6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  418c70:	2b00      	cmp	r3, #0
  418c72:	dd02      	ble.n	418c7a <__ulp+0x12>
  418c74:	4619      	mov	r1, r3
  418c76:	2000      	movs	r0, #0
  418c78:	4770      	bx	lr
  418c7a:	425b      	negs	r3, r3
  418c7c:	151b      	asrs	r3, r3, #20
  418c7e:	2b13      	cmp	r3, #19
  418c80:	dd0a      	ble.n	418c98 <__ulp+0x30>
  418c82:	2b32      	cmp	r3, #50	; 0x32
  418c84:	bfdd      	ittte	le
  418c86:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  418c8a:	2201      	movle	r2, #1
  418c8c:	fa02 f303 	lslle.w	r3, r2, r3
  418c90:	2301      	movgt	r3, #1
  418c92:	2100      	movs	r1, #0
  418c94:	4618      	mov	r0, r3
  418c96:	4770      	bx	lr
  418c98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  418c9c:	fa42 f103 	asr.w	r1, r2, r3
  418ca0:	2000      	movs	r0, #0
  418ca2:	4770      	bx	lr
  418ca4:	7ff00000 	.word	0x7ff00000

00418ca8 <__b2d>:
  418ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  418caa:	6904      	ldr	r4, [r0, #16]
  418cac:	f100 0614 	add.w	r6, r0, #20
  418cb0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  418cb4:	460f      	mov	r7, r1
  418cb6:	f854 5c04 	ldr.w	r5, [r4, #-4]
  418cba:	4628      	mov	r0, r5
  418cbc:	f7ff fda4 	bl	418808 <__hi0bits>
  418cc0:	f1c0 0320 	rsb	r3, r0, #32
  418cc4:	280a      	cmp	r0, #10
  418cc6:	603b      	str	r3, [r7, #0]
  418cc8:	f1a4 0104 	sub.w	r1, r4, #4
  418ccc:	dc19      	bgt.n	418d02 <__b2d+0x5a>
  418cce:	428e      	cmp	r6, r1
  418cd0:	f1c0 070b 	rsb	r7, r0, #11
  418cd4:	bf38      	it	cc
  418cd6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  418cda:	fa25 fc07 	lsr.w	ip, r5, r7
  418cde:	f100 0015 	add.w	r0, r0, #21
  418ce2:	bf38      	it	cc
  418ce4:	fa21 f707 	lsrcc.w	r7, r1, r7
  418ce8:	fa05 f500 	lsl.w	r5, r5, r0
  418cec:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  418cf0:	bf28      	it	cs
  418cf2:	2700      	movcs	r7, #0
  418cf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  418cf8:	ea47 0205 	orr.w	r2, r7, r5
  418cfc:	4610      	mov	r0, r2
  418cfe:	4619      	mov	r1, r3
  418d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  418d02:	428e      	cmp	r6, r1
  418d04:	bf36      	itet	cc
  418d06:	f1a4 0108 	subcc.w	r1, r4, #8
  418d0a:	2400      	movcs	r4, #0
  418d0c:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  418d10:	f1b0 070b 	subs.w	r7, r0, #11
  418d14:	d019      	beq.n	418d4a <__b2d+0xa2>
  418d16:	42b1      	cmp	r1, r6
  418d18:	bf88      	it	hi
  418d1a:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  418d1e:	fa05 f507 	lsl.w	r5, r5, r7
  418d22:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  418d26:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  418d2a:	fa24 fc00 	lsr.w	ip, r4, r0
  418d2e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  418d32:	bf8c      	ite	hi
  418d34:	fa21 f000 	lsrhi.w	r0, r1, r0
  418d38:	2000      	movls	r0, #0
  418d3a:	40bc      	lsls	r4, r7
  418d3c:	ea45 030c 	orr.w	r3, r5, ip
  418d40:	ea40 0204 	orr.w	r2, r0, r4
  418d44:	4610      	mov	r0, r2
  418d46:	4619      	mov	r1, r3
  418d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  418d4a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  418d4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  418d52:	4622      	mov	r2, r4
  418d54:	4610      	mov	r0, r2
  418d56:	4619      	mov	r1, r3
  418d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  418d5a:	bf00      	nop

00418d5c <__d2b>:
  418d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  418d60:	b083      	sub	sp, #12
  418d62:	2101      	movs	r1, #1
  418d64:	461d      	mov	r5, r3
  418d66:	f3c3 560a 	ubfx	r6, r3, #20, #11
  418d6a:	4614      	mov	r4, r2
  418d6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  418d6e:	f7ff fc83 	bl	418678 <_Balloc>
  418d72:	f3c5 0313 	ubfx	r3, r5, #0, #20
  418d76:	4680      	mov	r8, r0
  418d78:	b10e      	cbz	r6, 418d7e <__d2b+0x22>
  418d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  418d7e:	9301      	str	r3, [sp, #4]
  418d80:	b324      	cbz	r4, 418dcc <__d2b+0x70>
  418d82:	a802      	add	r0, sp, #8
  418d84:	f840 4d08 	str.w	r4, [r0, #-8]!
  418d88:	4668      	mov	r0, sp
  418d8a:	f7ff fd5d 	bl	418848 <__lo0bits>
  418d8e:	2800      	cmp	r0, #0
  418d90:	d135      	bne.n	418dfe <__d2b+0xa2>
  418d92:	e89d 000c 	ldmia.w	sp, {r2, r3}
  418d96:	f8c8 2014 	str.w	r2, [r8, #20]
  418d9a:	2b00      	cmp	r3, #0
  418d9c:	bf0c      	ite	eq
  418d9e:	2401      	moveq	r4, #1
  418da0:	2402      	movne	r4, #2
  418da2:	f8c8 3018 	str.w	r3, [r8, #24]
  418da6:	f8c8 4010 	str.w	r4, [r8, #16]
  418daa:	b9de      	cbnz	r6, 418de4 <__d2b+0x88>
  418dac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  418db0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  418db4:	6038      	str	r0, [r7, #0]
  418db6:	6918      	ldr	r0, [r3, #16]
  418db8:	f7ff fd26 	bl	418808 <__hi0bits>
  418dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  418dbe:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  418dc2:	6018      	str	r0, [r3, #0]
  418dc4:	4640      	mov	r0, r8
  418dc6:	b003      	add	sp, #12
  418dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  418dcc:	a801      	add	r0, sp, #4
  418dce:	f7ff fd3b 	bl	418848 <__lo0bits>
  418dd2:	2401      	movs	r4, #1
  418dd4:	9b01      	ldr	r3, [sp, #4]
  418dd6:	f8c8 3014 	str.w	r3, [r8, #20]
  418dda:	3020      	adds	r0, #32
  418ddc:	f8c8 4010 	str.w	r4, [r8, #16]
  418de0:	2e00      	cmp	r6, #0
  418de2:	d0e3      	beq.n	418dac <__d2b+0x50>
  418de4:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  418de8:	eb09 0300 	add.w	r3, r9, r0
  418dec:	603b      	str	r3, [r7, #0]
  418dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  418df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  418df4:	6018      	str	r0, [r3, #0]
  418df6:	4640      	mov	r0, r8
  418df8:	b003      	add	sp, #12
  418dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  418dfe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  418e02:	f1c0 0120 	rsb	r1, r0, #32
  418e06:	fa03 f101 	lsl.w	r1, r3, r1
  418e0a:	430a      	orrs	r2, r1
  418e0c:	40c3      	lsrs	r3, r0
  418e0e:	9301      	str	r3, [sp, #4]
  418e10:	f8c8 2014 	str.w	r2, [r8, #20]
  418e14:	e7c1      	b.n	418d9a <__d2b+0x3e>
  418e16:	bf00      	nop

00418e18 <__ratio>:
  418e18:	b5f0      	push	{r4, r5, r6, r7, lr}
  418e1a:	b083      	sub	sp, #12
  418e1c:	460e      	mov	r6, r1
  418e1e:	4669      	mov	r1, sp
  418e20:	4607      	mov	r7, r0
  418e22:	f7ff ff41 	bl	418ca8 <__b2d>
  418e26:	4604      	mov	r4, r0
  418e28:	460d      	mov	r5, r1
  418e2a:	4630      	mov	r0, r6
  418e2c:	a901      	add	r1, sp, #4
  418e2e:	f7ff ff3b 	bl	418ca8 <__b2d>
  418e32:	4602      	mov	r2, r0
  418e34:	460b      	mov	r3, r1
  418e36:	e89d 0003 	ldmia.w	sp, {r0, r1}
  418e3a:	693f      	ldr	r7, [r7, #16]
  418e3c:	6936      	ldr	r6, [r6, #16]
  418e3e:	1a41      	subs	r1, r0, r1
  418e40:	ebc6 0e07 	rsb	lr, r6, r7
  418e44:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  418e48:	f1be 0f00 	cmp.w	lr, #0
  418e4c:	dd08      	ble.n	418e60 <__ratio+0x48>
  418e4e:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  418e52:	460d      	mov	r5, r1
  418e54:	4620      	mov	r0, r4
  418e56:	4629      	mov	r1, r5
  418e58:	f002 fe94 	bl	41bb84 <__aeabi_ddiv>
  418e5c:	b003      	add	sp, #12
  418e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  418e60:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  418e64:	463b      	mov	r3, r7
  418e66:	e7f5      	b.n	418e54 <__ratio+0x3c>

00418e68 <__copybits>:
  418e68:	b470      	push	{r4, r5, r6}
  418e6a:	6915      	ldr	r5, [r2, #16]
  418e6c:	f102 0314 	add.w	r3, r2, #20
  418e70:	3901      	subs	r1, #1
  418e72:	114e      	asrs	r6, r1, #5
  418e74:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  418e78:	3601      	adds	r6, #1
  418e7a:	42ab      	cmp	r3, r5
  418e7c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  418e80:	d20c      	bcs.n	418e9c <__copybits+0x34>
  418e82:	4601      	mov	r1, r0
  418e84:	f853 4b04 	ldr.w	r4, [r3], #4
  418e88:	f841 4b04 	str.w	r4, [r1], #4
  418e8c:	429d      	cmp	r5, r3
  418e8e:	d8f9      	bhi.n	418e84 <__copybits+0x1c>
  418e90:	1aab      	subs	r3, r5, r2
  418e92:	3b15      	subs	r3, #21
  418e94:	f023 0303 	bic.w	r3, r3, #3
  418e98:	3304      	adds	r3, #4
  418e9a:	4418      	add	r0, r3
  418e9c:	4286      	cmp	r6, r0
  418e9e:	d904      	bls.n	418eaa <__copybits+0x42>
  418ea0:	2300      	movs	r3, #0
  418ea2:	f840 3b04 	str.w	r3, [r0], #4
  418ea6:	4286      	cmp	r6, r0
  418ea8:	d8fb      	bhi.n	418ea2 <__copybits+0x3a>
  418eaa:	bc70      	pop	{r4, r5, r6}
  418eac:	4770      	bx	lr
  418eae:	bf00      	nop

00418eb0 <__any_on>:
  418eb0:	6903      	ldr	r3, [r0, #16]
  418eb2:	114a      	asrs	r2, r1, #5
  418eb4:	4293      	cmp	r3, r2
  418eb6:	b410      	push	{r4}
  418eb8:	f100 0414 	add.w	r4, r0, #20
  418ebc:	da10      	bge.n	418ee0 <__any_on+0x30>
  418ebe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  418ec2:	429c      	cmp	r4, r3
  418ec4:	d221      	bcs.n	418f0a <__any_on+0x5a>
  418ec6:	f853 0c04 	ldr.w	r0, [r3, #-4]
  418eca:	3b04      	subs	r3, #4
  418ecc:	b118      	cbz	r0, 418ed6 <__any_on+0x26>
  418ece:	e015      	b.n	418efc <__any_on+0x4c>
  418ed0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  418ed4:	b992      	cbnz	r2, 418efc <__any_on+0x4c>
  418ed6:	429c      	cmp	r4, r3
  418ed8:	d3fa      	bcc.n	418ed0 <__any_on+0x20>
  418eda:	f85d 4b04 	ldr.w	r4, [sp], #4
  418ede:	4770      	bx	lr
  418ee0:	dd10      	ble.n	418f04 <__any_on+0x54>
  418ee2:	f011 011f 	ands.w	r1, r1, #31
  418ee6:	d00d      	beq.n	418f04 <__any_on+0x54>
  418ee8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  418eec:	fa20 f301 	lsr.w	r3, r0, r1
  418ef0:	fa03 f101 	lsl.w	r1, r3, r1
  418ef4:	4281      	cmp	r1, r0
  418ef6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  418efa:	d0e2      	beq.n	418ec2 <__any_on+0x12>
  418efc:	2001      	movs	r0, #1
  418efe:	f85d 4b04 	ldr.w	r4, [sp], #4
  418f02:	4770      	bx	lr
  418f04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  418f08:	e7db      	b.n	418ec2 <__any_on+0x12>
  418f0a:	2000      	movs	r0, #0
  418f0c:	e7e5      	b.n	418eda <__any_on+0x2a>
  418f0e:	bf00      	nop

00418f10 <_read_r>:
  418f10:	b570      	push	{r4, r5, r6, lr}
  418f12:	4c08      	ldr	r4, [pc, #32]	; (418f34 <_read_r+0x24>)
  418f14:	4606      	mov	r6, r0
  418f16:	2500      	movs	r5, #0
  418f18:	4608      	mov	r0, r1
  418f1a:	4611      	mov	r1, r2
  418f1c:	461a      	mov	r2, r3
  418f1e:	6025      	str	r5, [r4, #0]
  418f20:	f7eb ff9c 	bl	404e5c <_read>
  418f24:	1c43      	adds	r3, r0, #1
  418f26:	d000      	beq.n	418f2a <_read_r+0x1a>
  418f28:	bd70      	pop	{r4, r5, r6, pc}
  418f2a:	6823      	ldr	r3, [r4, #0]
  418f2c:	2b00      	cmp	r3, #0
  418f2e:	d0fb      	beq.n	418f28 <_read_r+0x18>
  418f30:	6033      	str	r3, [r6, #0]
  418f32:	bd70      	pop	{r4, r5, r6, pc}
  418f34:	200050a8 	.word	0x200050a8

00418f38 <_realloc_r>:
  418f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418f3c:	460c      	mov	r4, r1
  418f3e:	b083      	sub	sp, #12
  418f40:	4690      	mov	r8, r2
  418f42:	4681      	mov	r9, r0
  418f44:	2900      	cmp	r1, #0
  418f46:	f000 80e2 	beq.w	41910e <_realloc_r+0x1d6>
  418f4a:	f7fa f8f1 	bl	413130 <__malloc_lock>
  418f4e:	f108 060b 	add.w	r6, r8, #11
  418f52:	f854 3c04 	ldr.w	r3, [r4, #-4]
  418f56:	2e16      	cmp	r6, #22
  418f58:	f023 0503 	bic.w	r5, r3, #3
  418f5c:	f1a4 0708 	sub.w	r7, r4, #8
  418f60:	d84b      	bhi.n	418ffa <_realloc_r+0xc2>
  418f62:	2110      	movs	r1, #16
  418f64:	460e      	mov	r6, r1
  418f66:	45b0      	cmp	r8, r6
  418f68:	d84c      	bhi.n	419004 <_realloc_r+0xcc>
  418f6a:	428d      	cmp	r5, r1
  418f6c:	da78      	bge.n	419060 <_realloc_r+0x128>
  418f6e:	f8df b390 	ldr.w	fp, [pc, #912]	; 419300 <_realloc_r+0x3c8>
  418f72:	f8db e008 	ldr.w	lr, [fp, #8]
  418f76:	1978      	adds	r0, r7, r5
  418f78:	4586      	cmp	lr, r0
  418f7a:	f000 80ce 	beq.w	41911a <_realloc_r+0x1e2>
  418f7e:	6842      	ldr	r2, [r0, #4]
  418f80:	f022 0c01 	bic.w	ip, r2, #1
  418f84:	4484      	add	ip, r0
  418f86:	f8dc c004 	ldr.w	ip, [ip, #4]
  418f8a:	f01c 0f01 	tst.w	ip, #1
  418f8e:	d07a      	beq.n	419086 <_realloc_r+0x14e>
  418f90:	2200      	movs	r2, #0
  418f92:	4610      	mov	r0, r2
  418f94:	07db      	lsls	r3, r3, #31
  418f96:	f100 8092 	bmi.w	4190be <_realloc_r+0x186>
  418f9a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  418f9e:	ebc3 0a07 	rsb	sl, r3, r7
  418fa2:	f8da 3004 	ldr.w	r3, [sl, #4]
  418fa6:	f023 0303 	bic.w	r3, r3, #3
  418faa:	442b      	add	r3, r5
  418fac:	b388      	cbz	r0, 419012 <_realloc_r+0xda>
  418fae:	4570      	cmp	r0, lr
  418fb0:	f000 80ed 	beq.w	41918e <_realloc_r+0x256>
  418fb4:	eb02 0e03 	add.w	lr, r2, r3
  418fb8:	458e      	cmp	lr, r1
  418fba:	db2a      	blt.n	419012 <_realloc_r+0xda>
  418fbc:	68c3      	ldr	r3, [r0, #12]
  418fbe:	6882      	ldr	r2, [r0, #8]
  418fc0:	4657      	mov	r7, sl
  418fc2:	60d3      	str	r3, [r2, #12]
  418fc4:	609a      	str	r2, [r3, #8]
  418fc6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  418fca:	f8da 300c 	ldr.w	r3, [sl, #12]
  418fce:	60cb      	str	r3, [r1, #12]
  418fd0:	1f2a      	subs	r2, r5, #4
  418fd2:	2a24      	cmp	r2, #36	; 0x24
  418fd4:	6099      	str	r1, [r3, #8]
  418fd6:	f200 8126 	bhi.w	419226 <_realloc_r+0x2ee>
  418fda:	2a13      	cmp	r2, #19
  418fdc:	f240 80b3 	bls.w	419146 <_realloc_r+0x20e>
  418fe0:	6823      	ldr	r3, [r4, #0]
  418fe2:	f8ca 3008 	str.w	r3, [sl, #8]
  418fe6:	6863      	ldr	r3, [r4, #4]
  418fe8:	f8ca 300c 	str.w	r3, [sl, #12]
  418fec:	2a1b      	cmp	r2, #27
  418fee:	f200 8130 	bhi.w	419252 <_realloc_r+0x31a>
  418ff2:	3408      	adds	r4, #8
  418ff4:	f10a 0310 	add.w	r3, sl, #16
  418ff8:	e0a6      	b.n	419148 <_realloc_r+0x210>
  418ffa:	f026 0607 	bic.w	r6, r6, #7
  418ffe:	2e00      	cmp	r6, #0
  419000:	4631      	mov	r1, r6
  419002:	dab0      	bge.n	418f66 <_realloc_r+0x2e>
  419004:	230c      	movs	r3, #12
  419006:	2000      	movs	r0, #0
  419008:	f8c9 3000 	str.w	r3, [r9]
  41900c:	b003      	add	sp, #12
  41900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419012:	428b      	cmp	r3, r1
  419014:	db53      	blt.n	4190be <_realloc_r+0x186>
  419016:	4657      	mov	r7, sl
  419018:	f8da 100c 	ldr.w	r1, [sl, #12]
  41901c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  419020:	1f2a      	subs	r2, r5, #4
  419022:	2a24      	cmp	r2, #36	; 0x24
  419024:	60c1      	str	r1, [r0, #12]
  419026:	6088      	str	r0, [r1, #8]
  419028:	f200 8109 	bhi.w	41923e <_realloc_r+0x306>
  41902c:	2a13      	cmp	r2, #19
  41902e:	f240 8104 	bls.w	41923a <_realloc_r+0x302>
  419032:	6821      	ldr	r1, [r4, #0]
  419034:	f8ca 1008 	str.w	r1, [sl, #8]
  419038:	6861      	ldr	r1, [r4, #4]
  41903a:	f8ca 100c 	str.w	r1, [sl, #12]
  41903e:	2a1b      	cmp	r2, #27
  419040:	f200 811c 	bhi.w	41927c <_realloc_r+0x344>
  419044:	3408      	adds	r4, #8
  419046:	f10a 0210 	add.w	r2, sl, #16
  41904a:	6821      	ldr	r1, [r4, #0]
  41904c:	6011      	str	r1, [r2, #0]
  41904e:	6861      	ldr	r1, [r4, #4]
  419050:	6051      	str	r1, [r2, #4]
  419052:	68a1      	ldr	r1, [r4, #8]
  419054:	6091      	str	r1, [r2, #8]
  419056:	461d      	mov	r5, r3
  419058:	f8da 3004 	ldr.w	r3, [sl, #4]
  41905c:	463c      	mov	r4, r7
  41905e:	4657      	mov	r7, sl
  419060:	1baa      	subs	r2, r5, r6
  419062:	2a0f      	cmp	r2, #15
  419064:	f003 0301 	and.w	r3, r3, #1
  419068:	d819      	bhi.n	41909e <_realloc_r+0x166>
  41906a:	432b      	orrs	r3, r5
  41906c:	443d      	add	r5, r7
  41906e:	607b      	str	r3, [r7, #4]
  419070:	686b      	ldr	r3, [r5, #4]
  419072:	f043 0301 	orr.w	r3, r3, #1
  419076:	606b      	str	r3, [r5, #4]
  419078:	4648      	mov	r0, r9
  41907a:	f7fa f85b 	bl	413134 <__malloc_unlock>
  41907e:	4620      	mov	r0, r4
  419080:	b003      	add	sp, #12
  419082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419086:	f022 0203 	bic.w	r2, r2, #3
  41908a:	eb02 0c05 	add.w	ip, r2, r5
  41908e:	458c      	cmp	ip, r1
  419090:	db80      	blt.n	418f94 <_realloc_r+0x5c>
  419092:	68c2      	ldr	r2, [r0, #12]
  419094:	6881      	ldr	r1, [r0, #8]
  419096:	4665      	mov	r5, ip
  419098:	60ca      	str	r2, [r1, #12]
  41909a:	6091      	str	r1, [r2, #8]
  41909c:	e7e0      	b.n	419060 <_realloc_r+0x128>
  41909e:	19b9      	adds	r1, r7, r6
  4190a0:	f042 0001 	orr.w	r0, r2, #1
  4190a4:	431e      	orrs	r6, r3
  4190a6:	440a      	add	r2, r1
  4190a8:	607e      	str	r6, [r7, #4]
  4190aa:	6048      	str	r0, [r1, #4]
  4190ac:	6853      	ldr	r3, [r2, #4]
  4190ae:	f043 0301 	orr.w	r3, r3, #1
  4190b2:	3108      	adds	r1, #8
  4190b4:	6053      	str	r3, [r2, #4]
  4190b6:	4648      	mov	r0, r9
  4190b8:	f7fe fed2 	bl	417e60 <_free_r>
  4190bc:	e7dc      	b.n	419078 <_realloc_r+0x140>
  4190be:	4641      	mov	r1, r8
  4190c0:	4648      	mov	r0, r9
  4190c2:	f7f9 fcb5 	bl	412a30 <_malloc_r>
  4190c6:	4680      	mov	r8, r0
  4190c8:	b1d0      	cbz	r0, 419100 <_realloc_r+0x1c8>
  4190ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4190ce:	f023 0201 	bic.w	r2, r3, #1
  4190d2:	443a      	add	r2, r7
  4190d4:	f1a0 0108 	sub.w	r1, r0, #8
  4190d8:	4291      	cmp	r1, r2
  4190da:	f000 809e 	beq.w	41921a <_realloc_r+0x2e2>
  4190de:	1f2a      	subs	r2, r5, #4
  4190e0:	2a24      	cmp	r2, #36	; 0x24
  4190e2:	d850      	bhi.n	419186 <_realloc_r+0x24e>
  4190e4:	2a13      	cmp	r2, #19
  4190e6:	d823      	bhi.n	419130 <_realloc_r+0x1f8>
  4190e8:	4603      	mov	r3, r0
  4190ea:	4622      	mov	r2, r4
  4190ec:	6811      	ldr	r1, [r2, #0]
  4190ee:	6019      	str	r1, [r3, #0]
  4190f0:	6851      	ldr	r1, [r2, #4]
  4190f2:	6059      	str	r1, [r3, #4]
  4190f4:	6892      	ldr	r2, [r2, #8]
  4190f6:	609a      	str	r2, [r3, #8]
  4190f8:	4621      	mov	r1, r4
  4190fa:	4648      	mov	r0, r9
  4190fc:	f7fe feb0 	bl	417e60 <_free_r>
  419100:	4648      	mov	r0, r9
  419102:	f7fa f817 	bl	413134 <__malloc_unlock>
  419106:	4640      	mov	r0, r8
  419108:	b003      	add	sp, #12
  41910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41910e:	4611      	mov	r1, r2
  419110:	b003      	add	sp, #12
  419112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  419116:	f7f9 bc8b 	b.w	412a30 <_malloc_r>
  41911a:	f8de 2004 	ldr.w	r2, [lr, #4]
  41911e:	f022 0203 	bic.w	r2, r2, #3
  419122:	1950      	adds	r0, r2, r5
  419124:	f106 0c10 	add.w	ip, r6, #16
  419128:	4560      	cmp	r0, ip
  41912a:	da19      	bge.n	419160 <_realloc_r+0x228>
  41912c:	4670      	mov	r0, lr
  41912e:	e731      	b.n	418f94 <_realloc_r+0x5c>
  419130:	6823      	ldr	r3, [r4, #0]
  419132:	6003      	str	r3, [r0, #0]
  419134:	6863      	ldr	r3, [r4, #4]
  419136:	6043      	str	r3, [r0, #4]
  419138:	2a1b      	cmp	r2, #27
  41913a:	d863      	bhi.n	419204 <_realloc_r+0x2cc>
  41913c:	f100 0308 	add.w	r3, r0, #8
  419140:	f104 0208 	add.w	r2, r4, #8
  419144:	e7d2      	b.n	4190ec <_realloc_r+0x1b4>
  419146:	463b      	mov	r3, r7
  419148:	6822      	ldr	r2, [r4, #0]
  41914a:	601a      	str	r2, [r3, #0]
  41914c:	6862      	ldr	r2, [r4, #4]
  41914e:	605a      	str	r2, [r3, #4]
  419150:	68a2      	ldr	r2, [r4, #8]
  419152:	609a      	str	r2, [r3, #8]
  419154:	463c      	mov	r4, r7
  419156:	4675      	mov	r5, lr
  419158:	f8da 3004 	ldr.w	r3, [sl, #4]
  41915c:	4657      	mov	r7, sl
  41915e:	e77f      	b.n	419060 <_realloc_r+0x128>
  419160:	4437      	add	r7, r6
  419162:	1b83      	subs	r3, r0, r6
  419164:	f043 0301 	orr.w	r3, r3, #1
  419168:	f8cb 7008 	str.w	r7, [fp, #8]
  41916c:	607b      	str	r3, [r7, #4]
  41916e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  419172:	f003 0301 	and.w	r3, r3, #1
  419176:	431e      	orrs	r6, r3
  419178:	4648      	mov	r0, r9
  41917a:	f844 6c04 	str.w	r6, [r4, #-4]
  41917e:	f7f9 ffd9 	bl	413134 <__malloc_unlock>
  419182:	4620      	mov	r0, r4
  419184:	e77c      	b.n	419080 <_realloc_r+0x148>
  419186:	4621      	mov	r1, r4
  419188:	f7ff fa16 	bl	4185b8 <memmove>
  41918c:	e7b4      	b.n	4190f8 <_realloc_r+0x1c0>
  41918e:	eb02 0c03 	add.w	ip, r2, r3
  419192:	f106 0210 	add.w	r2, r6, #16
  419196:	4594      	cmp	ip, r2
  419198:	f6ff af3b 	blt.w	419012 <_realloc_r+0xda>
  41919c:	4657      	mov	r7, sl
  41919e:	f8da 300c 	ldr.w	r3, [sl, #12]
  4191a2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4191a6:	1f2a      	subs	r2, r5, #4
  4191a8:	2a24      	cmp	r2, #36	; 0x24
  4191aa:	60cb      	str	r3, [r1, #12]
  4191ac:	6099      	str	r1, [r3, #8]
  4191ae:	f200 8087 	bhi.w	4192c0 <_realloc_r+0x388>
  4191b2:	2a13      	cmp	r2, #19
  4191b4:	d978      	bls.n	4192a8 <_realloc_r+0x370>
  4191b6:	6823      	ldr	r3, [r4, #0]
  4191b8:	f8ca 3008 	str.w	r3, [sl, #8]
  4191bc:	6863      	ldr	r3, [r4, #4]
  4191be:	f8ca 300c 	str.w	r3, [sl, #12]
  4191c2:	2a1b      	cmp	r2, #27
  4191c4:	f200 8085 	bhi.w	4192d2 <_realloc_r+0x39a>
  4191c8:	3408      	adds	r4, #8
  4191ca:	f10a 0310 	add.w	r3, sl, #16
  4191ce:	6822      	ldr	r2, [r4, #0]
  4191d0:	601a      	str	r2, [r3, #0]
  4191d2:	6862      	ldr	r2, [r4, #4]
  4191d4:	605a      	str	r2, [r3, #4]
  4191d6:	68a2      	ldr	r2, [r4, #8]
  4191d8:	609a      	str	r2, [r3, #8]
  4191da:	eb0a 0306 	add.w	r3, sl, r6
  4191de:	ebc6 020c 	rsb	r2, r6, ip
  4191e2:	f042 0201 	orr.w	r2, r2, #1
  4191e6:	f8cb 3008 	str.w	r3, [fp, #8]
  4191ea:	605a      	str	r2, [r3, #4]
  4191ec:	f8da 3004 	ldr.w	r3, [sl, #4]
  4191f0:	f003 0301 	and.w	r3, r3, #1
  4191f4:	431e      	orrs	r6, r3
  4191f6:	4648      	mov	r0, r9
  4191f8:	f8ca 6004 	str.w	r6, [sl, #4]
  4191fc:	f7f9 ff9a 	bl	413134 <__malloc_unlock>
  419200:	4638      	mov	r0, r7
  419202:	e73d      	b.n	419080 <_realloc_r+0x148>
  419204:	68a3      	ldr	r3, [r4, #8]
  419206:	6083      	str	r3, [r0, #8]
  419208:	68e3      	ldr	r3, [r4, #12]
  41920a:	60c3      	str	r3, [r0, #12]
  41920c:	2a24      	cmp	r2, #36	; 0x24
  41920e:	d02c      	beq.n	41926a <_realloc_r+0x332>
  419210:	f100 0310 	add.w	r3, r0, #16
  419214:	f104 0210 	add.w	r2, r4, #16
  419218:	e768      	b.n	4190ec <_realloc_r+0x1b4>
  41921a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41921e:	f022 0203 	bic.w	r2, r2, #3
  419222:	4415      	add	r5, r2
  419224:	e71c      	b.n	419060 <_realloc_r+0x128>
  419226:	4621      	mov	r1, r4
  419228:	4638      	mov	r0, r7
  41922a:	4675      	mov	r5, lr
  41922c:	463c      	mov	r4, r7
  41922e:	f7ff f9c3 	bl	4185b8 <memmove>
  419232:	4657      	mov	r7, sl
  419234:	f8da 3004 	ldr.w	r3, [sl, #4]
  419238:	e712      	b.n	419060 <_realloc_r+0x128>
  41923a:	463a      	mov	r2, r7
  41923c:	e705      	b.n	41904a <_realloc_r+0x112>
  41923e:	4621      	mov	r1, r4
  419240:	4638      	mov	r0, r7
  419242:	461d      	mov	r5, r3
  419244:	463c      	mov	r4, r7
  419246:	f7ff f9b7 	bl	4185b8 <memmove>
  41924a:	4657      	mov	r7, sl
  41924c:	f8da 3004 	ldr.w	r3, [sl, #4]
  419250:	e706      	b.n	419060 <_realloc_r+0x128>
  419252:	68a3      	ldr	r3, [r4, #8]
  419254:	f8ca 3010 	str.w	r3, [sl, #16]
  419258:	68e3      	ldr	r3, [r4, #12]
  41925a:	f8ca 3014 	str.w	r3, [sl, #20]
  41925e:	2a24      	cmp	r2, #36	; 0x24
  419260:	d018      	beq.n	419294 <_realloc_r+0x35c>
  419262:	3410      	adds	r4, #16
  419264:	f10a 0318 	add.w	r3, sl, #24
  419268:	e76e      	b.n	419148 <_realloc_r+0x210>
  41926a:	6923      	ldr	r3, [r4, #16]
  41926c:	6103      	str	r3, [r0, #16]
  41926e:	6963      	ldr	r3, [r4, #20]
  419270:	6143      	str	r3, [r0, #20]
  419272:	f104 0218 	add.w	r2, r4, #24
  419276:	f100 0318 	add.w	r3, r0, #24
  41927a:	e737      	b.n	4190ec <_realloc_r+0x1b4>
  41927c:	68a1      	ldr	r1, [r4, #8]
  41927e:	f8ca 1010 	str.w	r1, [sl, #16]
  419282:	68e1      	ldr	r1, [r4, #12]
  419284:	f8ca 1014 	str.w	r1, [sl, #20]
  419288:	2a24      	cmp	r2, #36	; 0x24
  41928a:	d00f      	beq.n	4192ac <_realloc_r+0x374>
  41928c:	3410      	adds	r4, #16
  41928e:	f10a 0218 	add.w	r2, sl, #24
  419292:	e6da      	b.n	41904a <_realloc_r+0x112>
  419294:	6923      	ldr	r3, [r4, #16]
  419296:	f8ca 3018 	str.w	r3, [sl, #24]
  41929a:	6963      	ldr	r3, [r4, #20]
  41929c:	f8ca 301c 	str.w	r3, [sl, #28]
  4192a0:	3418      	adds	r4, #24
  4192a2:	f10a 0320 	add.w	r3, sl, #32
  4192a6:	e74f      	b.n	419148 <_realloc_r+0x210>
  4192a8:	463b      	mov	r3, r7
  4192aa:	e790      	b.n	4191ce <_realloc_r+0x296>
  4192ac:	6922      	ldr	r2, [r4, #16]
  4192ae:	f8ca 2018 	str.w	r2, [sl, #24]
  4192b2:	6962      	ldr	r2, [r4, #20]
  4192b4:	f8ca 201c 	str.w	r2, [sl, #28]
  4192b8:	3418      	adds	r4, #24
  4192ba:	f10a 0220 	add.w	r2, sl, #32
  4192be:	e6c4      	b.n	41904a <_realloc_r+0x112>
  4192c0:	4621      	mov	r1, r4
  4192c2:	4638      	mov	r0, r7
  4192c4:	f8cd c004 	str.w	ip, [sp, #4]
  4192c8:	f7ff f976 	bl	4185b8 <memmove>
  4192cc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4192d0:	e783      	b.n	4191da <_realloc_r+0x2a2>
  4192d2:	68a3      	ldr	r3, [r4, #8]
  4192d4:	f8ca 3010 	str.w	r3, [sl, #16]
  4192d8:	68e3      	ldr	r3, [r4, #12]
  4192da:	f8ca 3014 	str.w	r3, [sl, #20]
  4192de:	2a24      	cmp	r2, #36	; 0x24
  4192e0:	d003      	beq.n	4192ea <_realloc_r+0x3b2>
  4192e2:	3410      	adds	r4, #16
  4192e4:	f10a 0318 	add.w	r3, sl, #24
  4192e8:	e771      	b.n	4191ce <_realloc_r+0x296>
  4192ea:	6923      	ldr	r3, [r4, #16]
  4192ec:	f8ca 3018 	str.w	r3, [sl, #24]
  4192f0:	6963      	ldr	r3, [r4, #20]
  4192f2:	f8ca 301c 	str.w	r3, [sl, #28]
  4192f6:	3418      	adds	r4, #24
  4192f8:	f10a 0320 	add.w	r3, sl, #32
  4192fc:	e767      	b.n	4191ce <_realloc_r+0x296>
  4192fe:	bf00      	nop
  419300:	20000bb4 	.word	0x20000bb4

00419304 <__fpclassifyd>:
  419304:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  419308:	b410      	push	{r4}
  41930a:	d008      	beq.n	41931e <__fpclassifyd+0x1a>
  41930c:	4a0f      	ldr	r2, [pc, #60]	; (41934c <__fpclassifyd+0x48>)
  41930e:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  419312:	4294      	cmp	r4, r2
  419314:	d80a      	bhi.n	41932c <__fpclassifyd+0x28>
  419316:	2004      	movs	r0, #4
  419318:	f85d 4b04 	ldr.w	r4, [sp], #4
  41931c:	4770      	bx	lr
  41931e:	2800      	cmp	r0, #0
  419320:	bf0c      	ite	eq
  419322:	2002      	moveq	r0, #2
  419324:	2003      	movne	r0, #3
  419326:	f85d 4b04 	ldr.w	r4, [sp], #4
  41932a:	4770      	bx	lr
  41932c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  419330:	d201      	bcs.n	419336 <__fpclassifyd+0x32>
  419332:	2003      	movs	r0, #3
  419334:	e7f7      	b.n	419326 <__fpclassifyd+0x22>
  419336:	4a06      	ldr	r2, [pc, #24]	; (419350 <__fpclassifyd+0x4c>)
  419338:	4293      	cmp	r3, r2
  41933a:	d001      	beq.n	419340 <__fpclassifyd+0x3c>
  41933c:	2000      	movs	r0, #0
  41933e:	e7f2      	b.n	419326 <__fpclassifyd+0x22>
  419340:	f1d0 0001 	rsbs	r0, r0, #1
  419344:	bf38      	it	cc
  419346:	2000      	movcc	r0, #0
  419348:	e7ed      	b.n	419326 <__fpclassifyd+0x22>
  41934a:	bf00      	nop
  41934c:	7fdfffff 	.word	0x7fdfffff
  419350:	7ff00000 	.word	0x7ff00000

00419354 <__sccl>:
  419354:	b470      	push	{r4, r5, r6}
  419356:	780c      	ldrb	r4, [r1, #0]
  419358:	2c5e      	cmp	r4, #94	; 0x5e
  41935a:	d02e      	beq.n	4193ba <__sccl+0x66>
  41935c:	2200      	movs	r2, #0
  41935e:	1c4d      	adds	r5, r1, #1
  419360:	4616      	mov	r6, r2
  419362:	2300      	movs	r3, #0
  419364:	54c2      	strb	r2, [r0, r3]
  419366:	3301      	adds	r3, #1
  419368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  41936c:	d1fa      	bne.n	419364 <__sccl+0x10>
  41936e:	b184      	cbz	r4, 419392 <__sccl+0x3e>
  419370:	f086 0201 	eor.w	r2, r6, #1
  419374:	5502      	strb	r2, [r0, r4]
  419376:	1c6e      	adds	r6, r5, #1
  419378:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  41937c:	2b2d      	cmp	r3, #45	; 0x2d
  41937e:	d00e      	beq.n	41939e <__sccl+0x4a>
  419380:	2b5d      	cmp	r3, #93	; 0x5d
  419382:	d009      	beq.n	419398 <__sccl+0x44>
  419384:	b113      	cbz	r3, 41938c <__sccl+0x38>
  419386:	461c      	mov	r4, r3
  419388:	4635      	mov	r5, r6
  41938a:	e7f3      	b.n	419374 <__sccl+0x20>
  41938c:	4628      	mov	r0, r5
  41938e:	bc70      	pop	{r4, r5, r6}
  419390:	4770      	bx	lr
  419392:	1e68      	subs	r0, r5, #1
  419394:	bc70      	pop	{r4, r5, r6}
  419396:	4770      	bx	lr
  419398:	4630      	mov	r0, r6
  41939a:	bc70      	pop	{r4, r5, r6}
  41939c:	4770      	bx	lr
  41939e:	7869      	ldrb	r1, [r5, #1]
  4193a0:	295d      	cmp	r1, #93	; 0x5d
  4193a2:	d0f0      	beq.n	419386 <__sccl+0x32>
  4193a4:	428c      	cmp	r4, r1
  4193a6:	dcee      	bgt.n	419386 <__sccl+0x32>
  4193a8:	3502      	adds	r5, #2
  4193aa:	1903      	adds	r3, r0, r4
  4193ac:	3401      	adds	r4, #1
  4193ae:	42a1      	cmp	r1, r4
  4193b0:	f803 2f01 	strb.w	r2, [r3, #1]!
  4193b4:	dcfa      	bgt.n	4193ac <__sccl+0x58>
  4193b6:	3602      	adds	r6, #2
  4193b8:	e7de      	b.n	419378 <__sccl+0x24>
  4193ba:	2201      	movs	r2, #1
  4193bc:	784c      	ldrb	r4, [r1, #1]
  4193be:	4616      	mov	r6, r2
  4193c0:	1c8d      	adds	r5, r1, #2
  4193c2:	e7ce      	b.n	419362 <__sccl+0xe>

004193c4 <nanf>:
  4193c4:	4800      	ldr	r0, [pc, #0]	; (4193c8 <nanf+0x4>)
  4193c6:	4770      	bx	lr
  4193c8:	7fc00000 	.word	0x7fc00000

004193cc <sulp>:
  4193cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4193d0:	460d      	mov	r5, r1
  4193d2:	4690      	mov	r8, r2
  4193d4:	f7ff fc48 	bl	418c68 <__ulp>
  4193d8:	4606      	mov	r6, r0
  4193da:	460f      	mov	r7, r1
  4193dc:	f1b8 0f00 	cmp.w	r8, #0
  4193e0:	d00f      	beq.n	419402 <sulp+0x36>
  4193e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
  4193e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4193ea:	2b00      	cmp	r3, #0
  4193ec:	dd09      	ble.n	419402 <sulp+0x36>
  4193ee:	051c      	lsls	r4, r3, #20
  4193f0:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4193f4:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4193f8:	2200      	movs	r2, #0
  4193fa:	f002 fa99 	bl	41b930 <__aeabi_dmul>
  4193fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  419402:	4630      	mov	r0, r6
  419404:	4639      	mov	r1, r7
  419406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41940a:	bf00      	nop
  41940c:	0000      	movs	r0, r0
	...

00419410 <_strtod_r>:
  419410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  419414:	b09f      	sub	sp, #124	; 0x7c
  419416:	460d      	mov	r5, r1
  419418:	9119      	str	r1, [sp, #100]	; 0x64
  41941a:	4683      	mov	fp, r0
  41941c:	9205      	str	r2, [sp, #20]
  41941e:	2000      	movs	r0, #0
  419420:	460a      	mov	r2, r1
  419422:	2100      	movs	r1, #0
  419424:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419428:	2300      	movs	r3, #0
  41942a:	931a      	str	r3, [sp, #104]	; 0x68
  41942c:	4616      	mov	r6, r2
  41942e:	f812 4b01 	ldrb.w	r4, [r2], #1
  419432:	2c2d      	cmp	r4, #45	; 0x2d
  419434:	f200 8158 	bhi.w	4196e8 <_strtod_r+0x2d8>
  419438:	e8df f014 	tbh	[pc, r4, lsl #1]
  41943c:	01560039 	.word	0x01560039
  419440:	01560156 	.word	0x01560156
  419444:	01560156 	.word	0x01560156
  419448:	01560156 	.word	0x01560156
  41944c:	007d0156 	.word	0x007d0156
  419450:	007d007d 	.word	0x007d007d
  419454:	007d007d 	.word	0x007d007d
  419458:	01560156 	.word	0x01560156
  41945c:	01560156 	.word	0x01560156
  419460:	01560156 	.word	0x01560156
  419464:	01560156 	.word	0x01560156
  419468:	01560156 	.word	0x01560156
  41946c:	01560156 	.word	0x01560156
  419470:	01560156 	.word	0x01560156
  419474:	01560156 	.word	0x01560156
  419478:	01560156 	.word	0x01560156
  41947c:	0156007d 	.word	0x0156007d
  419480:	01560156 	.word	0x01560156
  419484:	01560156 	.word	0x01560156
  419488:	01560156 	.word	0x01560156
  41948c:	01560156 	.word	0x01560156
  419490:	004d0156 	.word	0x004d0156
  419494:	007f0156 	.word	0x007f0156
  419498:	2300      	movs	r3, #0
  41949a:	2101      	movs	r1, #1
  41949c:	469a      	mov	sl, r3
  41949e:	910b      	str	r1, [sp, #44]	; 0x2c
  4194a0:	2800      	cmp	r0, #0
  4194a2:	f040 8151 	bne.w	419748 <_strtod_r+0x338>
  4194a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4194a8:	2a00      	cmp	r2, #0
  4194aa:	f040 814d 	bne.w	419748 <_strtod_r+0x338>
  4194ae:	2000      	movs	r0, #0
  4194b0:	f04f 0800 	mov.w	r8, #0
  4194b4:	f04f 0900 	mov.w	r9, #0
  4194b8:	9519      	str	r5, [sp, #100]	; 0x64
  4194ba:	9007      	str	r0, [sp, #28]
  4194bc:	9805      	ldr	r0, [sp, #20]
  4194be:	b108      	cbz	r0, 4194c4 <_strtod_r+0xb4>
  4194c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4194c2:	6003      	str	r3, [r0, #0]
  4194c4:	9907      	ldr	r1, [sp, #28]
  4194c6:	2900      	cmp	r1, #0
  4194c8:	f040 809e 	bne.w	419608 <_strtod_r+0x1f8>
  4194cc:	4640      	mov	r0, r8
  4194ce:	4649      	mov	r1, r9
  4194d0:	b01f      	add	sp, #124	; 0x7c
  4194d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4194d6:	2300      	movs	r3, #0
  4194d8:	9307      	str	r3, [sp, #28]
  4194da:	1c73      	adds	r3, r6, #1
  4194dc:	9319      	str	r3, [sp, #100]	; 0x64
  4194de:	7874      	ldrb	r4, [r6, #1]
  4194e0:	2c00      	cmp	r4, #0
  4194e2:	d0e4      	beq.n	4194ae <_strtod_r+0x9e>
  4194e4:	2c30      	cmp	r4, #48	; 0x30
  4194e6:	461e      	mov	r6, r3
  4194e8:	f000 8103 	beq.w	4196f2 <_strtod_r+0x2e2>
  4194ec:	2300      	movs	r3, #0
  4194ee:	9606      	str	r6, [sp, #24]
  4194f0:	930a      	str	r3, [sp, #40]	; 0x28
  4194f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4194f6:	2700      	movs	r7, #0
  4194f8:	2b09      	cmp	r3, #9
  4194fa:	46b9      	mov	r9, r7
  4194fc:	463e      	mov	r6, r7
  4194fe:	d81f      	bhi.n	419540 <_strtod_r+0x130>
  419500:	9806      	ldr	r0, [sp, #24]
  419502:	1c43      	adds	r3, r0, #1
  419504:	e00f      	b.n	419526 <_strtod_r+0x116>
  419506:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  41950a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  41950e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  419512:	9319      	str	r3, [sp, #100]	; 0x64
  419514:	4698      	mov	r8, r3
  419516:	f813 4b01 	ldrb.w	r4, [r3], #1
  41951a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41951e:	2a09      	cmp	r2, #9
  419520:	f106 0601 	add.w	r6, r6, #1
  419524:	d80e      	bhi.n	419544 <_strtod_r+0x134>
  419526:	2e08      	cmp	r6, #8
  419528:	dded      	ble.n	419506 <_strtod_r+0xf6>
  41952a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  41952e:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  419532:	3f30      	subs	r7, #48	; 0x30
  419534:	e7ed      	b.n	419512 <_strtod_r+0x102>
  419536:	9219      	str	r2, [sp, #100]	; 0x64
  419538:	e778      	b.n	41942c <_strtod_r+0x1c>
  41953a:	2201      	movs	r2, #1
  41953c:	9207      	str	r2, [sp, #28]
  41953e:	e7cc      	b.n	4194da <_strtod_r+0xca>
  419540:	f8dd 8018 	ldr.w	r8, [sp, #24]
  419544:	4658      	mov	r0, fp
  419546:	f7fe ff23 	bl	418390 <_localeconv_r>
  41954a:	f8d0 a000 	ldr.w	sl, [r0]
  41954e:	4658      	mov	r0, fp
  419550:	f7fe ff1e 	bl	418390 <_localeconv_r>
  419554:	6800      	ldr	r0, [r0, #0]
  419556:	f7fa f8e5 	bl	413724 <strlen>
  41955a:	4651      	mov	r1, sl
  41955c:	4602      	mov	r2, r0
  41955e:	4640      	mov	r0, r8
  419560:	f7fa f942 	bl	4137e8 <strncmp>
  419564:	4680      	mov	r8, r0
  419566:	2800      	cmp	r0, #0
  419568:	f000 8146 	beq.w	4197f8 <_strtod_r+0x3e8>
  41956c:	2000      	movs	r0, #0
  41956e:	4603      	mov	r3, r0
  419570:	900b      	str	r0, [sp, #44]	; 0x2c
  419572:	46b2      	mov	sl, r6
  419574:	f024 0220 	bic.w	r2, r4, #32
  419578:	2a45      	cmp	r2, #69	; 0x45
  41957a:	f000 80e1 	beq.w	419740 <_strtod_r+0x330>
  41957e:	2100      	movs	r1, #0
  419580:	f1ba 0f00 	cmp.w	sl, #0
  419584:	d054      	beq.n	419630 <_strtod_r+0x220>
  419586:	1acb      	subs	r3, r1, r3
  419588:	4648      	mov	r0, r9
  41958a:	9308      	str	r3, [sp, #32]
  41958c:	f002 f95a 	bl	41b844 <__aeabi_ui2d>
  419590:	f1ba 0f10 	cmp.w	sl, #16
  419594:	bfb4      	ite	lt
  419596:	46d0      	movlt	r8, sl
  419598:	f04f 0810 	movge.w	r8, #16
  41959c:	2e00      	cmp	r6, #0
  41959e:	bf08      	it	eq
  4195a0:	4656      	moveq	r6, sl
  4195a2:	f1b8 0f09 	cmp.w	r8, #9
  4195a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4195aa:	dd13      	ble.n	4195d4 <_strtod_r+0x1c4>
  4195ac:	4ba0      	ldr	r3, [pc, #640]	; (419830 <_strtod_r+0x420>)
  4195ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4195b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  4195b6:	f002 f9bb 	bl	41b930 <__aeabi_dmul>
  4195ba:	4604      	mov	r4, r0
  4195bc:	4638      	mov	r0, r7
  4195be:	460d      	mov	r5, r1
  4195c0:	f002 f940 	bl	41b844 <__aeabi_ui2d>
  4195c4:	4602      	mov	r2, r0
  4195c6:	460b      	mov	r3, r1
  4195c8:	4620      	mov	r0, r4
  4195ca:	4629      	mov	r1, r5
  4195cc:	f001 fffe 	bl	41b5cc <__adddf3>
  4195d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4195d4:	f1ba 0f0f 	cmp.w	sl, #15
  4195d8:	f300 812c 	bgt.w	419834 <_strtod_r+0x424>
  4195dc:	9908      	ldr	r1, [sp, #32]
  4195de:	2900      	cmp	r1, #0
  4195e0:	f000 80ab 	beq.w	41973a <_strtod_r+0x32a>
  4195e4:	f340 8580 	ble.w	41a0e8 <_strtod_r+0xcd8>
  4195e8:	9a08      	ldr	r2, [sp, #32]
  4195ea:	2a16      	cmp	r2, #22
  4195ec:	f300 84ef 	bgt.w	419fce <_strtod_r+0xbbe>
  4195f0:	4b8f      	ldr	r3, [pc, #572]	; (419830 <_strtod_r+0x420>)
  4195f2:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  4195f6:	e9da 0100 	ldrd	r0, r1, [sl]
  4195fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4195fe:	f002 f997 	bl	41b930 <__aeabi_dmul>
  419602:	4680      	mov	r8, r0
  419604:	4689      	mov	r9, r1
  419606:	e759      	b.n	4194bc <_strtod_r+0xac>
  419608:	4640      	mov	r0, r8
  41960a:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  41960e:	b01f      	add	sp, #124	; 0x7c
  419610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419614:	4633      	mov	r3, r6
  419616:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  41961a:	2a08      	cmp	r2, #8
  41961c:	f240 833c 	bls.w	419c98 <_strtod_r+0x888>
  419620:	f024 0220 	bic.w	r2, r4, #32
  419624:	2a45      	cmp	r2, #69	; 0x45
  419626:	4618      	mov	r0, r3
  419628:	f43f af36 	beq.w	419498 <_strtod_r+0x88>
  41962c:	2101      	movs	r1, #1
  41962e:	910b      	str	r1, [sp, #44]	; 0x2c
  419630:	2800      	cmp	r0, #0
  419632:	d171      	bne.n	419718 <_strtod_r+0x308>
  419634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  419636:	2b00      	cmp	r3, #0
  419638:	d16e      	bne.n	419718 <_strtod_r+0x308>
  41963a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41963c:	2800      	cmp	r0, #0
  41963e:	f47f af36 	bne.w	4194ae <_strtod_r+0x9e>
  419642:	3c49      	subs	r4, #73	; 0x49
  419644:	2c25      	cmp	r4, #37	; 0x25
  419646:	f63f af32 	bhi.w	4194ae <_strtod_r+0x9e>
  41964a:	a101      	add	r1, pc, #4	; (adr r1, 419650 <_strtod_r+0x240>)
  41964c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  419650:	00419d13 	.word	0x00419d13
  419654:	004194af 	.word	0x004194af
  419658:	004194af 	.word	0x004194af
  41965c:	004194af 	.word	0x004194af
  419660:	004194af 	.word	0x004194af
  419664:	00419cdb 	.word	0x00419cdb
  419668:	004194af 	.word	0x004194af
  41966c:	004194af 	.word	0x004194af
  419670:	004194af 	.word	0x004194af
  419674:	004194af 	.word	0x004194af
  419678:	004194af 	.word	0x004194af
  41967c:	004194af 	.word	0x004194af
  419680:	004194af 	.word	0x004194af
  419684:	004194af 	.word	0x004194af
  419688:	004194af 	.word	0x004194af
  41968c:	004194af 	.word	0x004194af
  419690:	004194af 	.word	0x004194af
  419694:	004194af 	.word	0x004194af
  419698:	004194af 	.word	0x004194af
  41969c:	004194af 	.word	0x004194af
  4196a0:	004194af 	.word	0x004194af
  4196a4:	004194af 	.word	0x004194af
  4196a8:	004194af 	.word	0x004194af
  4196ac:	004194af 	.word	0x004194af
  4196b0:	004194af 	.word	0x004194af
  4196b4:	004194af 	.word	0x004194af
  4196b8:	004194af 	.word	0x004194af
  4196bc:	004194af 	.word	0x004194af
  4196c0:	004194af 	.word	0x004194af
  4196c4:	004194af 	.word	0x004194af
  4196c8:	004194af 	.word	0x004194af
  4196cc:	004194af 	.word	0x004194af
  4196d0:	00419d13 	.word	0x00419d13
  4196d4:	004194af 	.word	0x004194af
  4196d8:	004194af 	.word	0x004194af
  4196dc:	004194af 	.word	0x004194af
  4196e0:	004194af 	.word	0x004194af
  4196e4:	00419cdb 	.word	0x00419cdb
  4196e8:	2000      	movs	r0, #0
  4196ea:	2c30      	cmp	r4, #48	; 0x30
  4196ec:	9007      	str	r0, [sp, #28]
  4196ee:	f47f aefd 	bne.w	4194ec <_strtod_r+0xdc>
  4196f2:	7873      	ldrb	r3, [r6, #1]
  4196f4:	2b58      	cmp	r3, #88	; 0x58
  4196f6:	f000 8336 	beq.w	419d66 <_strtod_r+0x956>
  4196fa:	2b78      	cmp	r3, #120	; 0x78
  4196fc:	f000 8333 	beq.w	419d66 <_strtod_r+0x956>
  419700:	3601      	adds	r6, #1
  419702:	9619      	str	r6, [sp, #100]	; 0x64
  419704:	4633      	mov	r3, r6
  419706:	f816 4b01 	ldrb.w	r4, [r6], #1
  41970a:	2c30      	cmp	r4, #48	; 0x30
  41970c:	d0f9      	beq.n	419702 <_strtod_r+0x2f2>
  41970e:	b11c      	cbz	r4, 419718 <_strtod_r+0x308>
  419710:	9306      	str	r3, [sp, #24]
  419712:	2301      	movs	r3, #1
  419714:	930a      	str	r3, [sp, #40]	; 0x28
  419716:	e6ec      	b.n	4194f2 <_strtod_r+0xe2>
  419718:	f04f 0800 	mov.w	r8, #0
  41971c:	f04f 0900 	mov.w	r9, #0
  419720:	e6cc      	b.n	4194bc <_strtod_r+0xac>
  419722:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  419726:	f04f 30ff 	mov.w	r0, #4294967295
  41972a:	9303      	str	r3, [sp, #12]
  41972c:	9002      	str	r0, [sp, #8]
  41972e:	0722      	lsls	r2, r4, #28
  419730:	bf42      	ittt	mi
  419732:	9903      	ldrmi	r1, [sp, #12]
  419734:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  419738:	9103      	strmi	r1, [sp, #12]
  41973a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41973e:	e6bd      	b.n	4194bc <_strtod_r+0xac>
  419740:	f1ba 0f00 	cmp.w	sl, #0
  419744:	f43f aeac 	beq.w	4194a0 <_strtod_r+0x90>
  419748:	9d19      	ldr	r5, [sp, #100]	; 0x64
  41974a:	1c6a      	adds	r2, r5, #1
  41974c:	9219      	str	r2, [sp, #100]	; 0x64
  41974e:	786c      	ldrb	r4, [r5, #1]
  419750:	2c2b      	cmp	r4, #43	; 0x2b
  419752:	f000 824b 	beq.w	419bec <_strtod_r+0x7dc>
  419756:	2c2d      	cmp	r4, #45	; 0x2d
  419758:	f040 8245 	bne.w	419be6 <_strtod_r+0x7d6>
  41975c:	2101      	movs	r1, #1
  41975e:	9108      	str	r1, [sp, #32]
  419760:	1caa      	adds	r2, r5, #2
  419762:	9219      	str	r2, [sp, #100]	; 0x64
  419764:	78ac      	ldrb	r4, [r5, #2]
  419766:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41976a:	2a09      	cmp	r2, #9
  41976c:	f200 81e5 	bhi.w	419b3a <_strtod_r+0x72a>
  419770:	2c30      	cmp	r4, #48	; 0x30
  419772:	d106      	bne.n	419782 <_strtod_r+0x372>
  419774:	9a19      	ldr	r2, [sp, #100]	; 0x64
  419776:	3201      	adds	r2, #1
  419778:	9219      	str	r2, [sp, #100]	; 0x64
  41977a:	f812 4b01 	ldrb.w	r4, [r2], #1
  41977e:	2c30      	cmp	r4, #48	; 0x30
  419780:	d0fa      	beq.n	419778 <_strtod_r+0x368>
  419782:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  419786:	2a08      	cmp	r2, #8
  419788:	f63f aef9 	bhi.w	41957e <_strtod_r+0x16e>
  41978c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  41978e:	920e      	str	r2, [sp, #56]	; 0x38
  419790:	f102 0801 	add.w	r8, r2, #1
  419794:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  419798:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  41979c:	7854      	ldrb	r4, [r2, #1]
  41979e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4197a2:	2a09      	cmp	r2, #9
  4197a4:	d812      	bhi.n	4197cc <_strtod_r+0x3bc>
  4197a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4197a8:	f102 0c02 	add.w	ip, r2, #2
  4197ac:	4662      	mov	r2, ip
  4197ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4197b2:	9219      	str	r2, [sp, #100]	; 0x64
  4197b4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  4197b8:	4690      	mov	r8, r2
  4197ba:	f812 4b01 	ldrb.w	r4, [r2], #1
  4197be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  4197c2:	f1bc 0f09 	cmp.w	ip, #9
  4197c6:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  4197ca:	d9f0      	bls.n	4197ae <_strtod_r+0x39e>
  4197cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4197ce:	ebc2 0808 	rsb	r8, r2, r8
  4197d2:	f1b8 0f08 	cmp.w	r8, #8
  4197d6:	f300 83f2 	bgt.w	419fbe <_strtod_r+0xbae>
  4197da:	f644 621f 	movw	r2, #19999	; 0x4e1f
  4197de:	4291      	cmp	r1, r2
  4197e0:	bfa8      	it	ge
  4197e2:	4611      	movge	r1, r2
  4197e4:	9a08      	ldr	r2, [sp, #32]
  4197e6:	2a00      	cmp	r2, #0
  4197e8:	f43f aeca 	beq.w	419580 <_strtod_r+0x170>
  4197ec:	4249      	negs	r1, r1
  4197ee:	f1ba 0f00 	cmp.w	sl, #0
  4197f2:	f47f aec8 	bne.w	419586 <_strtod_r+0x176>
  4197f6:	e71b      	b.n	419630 <_strtod_r+0x220>
  4197f8:	4658      	mov	r0, fp
  4197fa:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4197fc:	f7fe fdc8 	bl	418390 <_localeconv_r>
  419800:	6800      	ldr	r0, [r0, #0]
  419802:	f7f9 ff8f 	bl	413724 <strlen>
  419806:	1823      	adds	r3, r4, r0
  419808:	9319      	str	r3, [sp, #100]	; 0x64
  41980a:	5c24      	ldrb	r4, [r4, r0]
  41980c:	2e00      	cmp	r6, #0
  41980e:	f040 81c3 	bne.w	419b98 <_strtod_r+0x788>
  419812:	2c30      	cmp	r4, #48	; 0x30
  419814:	f47f aefe 	bne.w	419614 <_strtod_r+0x204>
  419818:	461a      	mov	r2, r3
  41981a:	4633      	mov	r3, r6
  41981c:	e000      	b.n	419820 <_strtod_r+0x410>
  41981e:	460a      	mov	r2, r1
  419820:	1c51      	adds	r1, r2, #1
  419822:	9119      	str	r1, [sp, #100]	; 0x64
  419824:	7854      	ldrb	r4, [r2, #1]
  419826:	2c30      	cmp	r4, #48	; 0x30
  419828:	f103 0301 	add.w	r3, r3, #1
  41982c:	d0f7      	beq.n	41981e <_strtod_r+0x40e>
  41982e:	e6f2      	b.n	419616 <_strtod_r+0x206>
  419830:	0041df68 	.word	0x0041df68
  419834:	9908      	ldr	r1, [sp, #32]
  419836:	ebc8 080a 	rsb	r8, r8, sl
  41983a:	4488      	add	r8, r1
  41983c:	f1b8 0f00 	cmp.w	r8, #0
  419840:	f340 8369 	ble.w	419f16 <_strtod_r+0xb06>
  419844:	f018 030f 	ands.w	r3, r8, #15
  419848:	d00a      	beq.n	419860 <_strtod_r+0x450>
  41984a:	49a7      	ldr	r1, [pc, #668]	; (419ae8 <_strtod_r+0x6d8>)
  41984c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  419850:	e9d1 0100 	ldrd	r0, r1, [r1]
  419854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  419858:	f002 f86a 	bl	41b930 <__aeabi_dmul>
  41985c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419860:	f038 040f 	bics.w	r4, r8, #15
  419864:	f040 81c8 	bne.w	419bf8 <_strtod_r+0x7e8>
  419868:	2200      	movs	r2, #0
  41986a:	920a      	str	r2, [sp, #40]	; 0x28
  41986c:	f8cd 9000 	str.w	r9, [sp]
  419870:	9906      	ldr	r1, [sp, #24]
  419872:	4632      	mov	r2, r6
  419874:	4653      	mov	r3, sl
  419876:	4658      	mov	r0, fp
  419878:	f7fe ff7a 	bl	418770 <__s2b>
  41987c:	900b      	str	r0, [sp, #44]	; 0x2c
  41987e:	2800      	cmp	r0, #0
  419880:	f000 82d5 	beq.w	419e2e <_strtod_r+0xa1e>
  419884:	9908      	ldr	r1, [sp, #32]
  419886:	2200      	movs	r2, #0
  419888:	2900      	cmp	r1, #0
  41988a:	f1c1 0300 	rsb	r3, r1, #0
  41988e:	bfa8      	it	ge
  419890:	4613      	movge	r3, r2
  419892:	930e      	str	r3, [sp, #56]	; 0x38
  419894:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  419898:	9206      	str	r2, [sp, #24]
  41989a:	930f      	str	r3, [sp, #60]	; 0x3c
  41989c:	4617      	mov	r7, r2
  41989e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4198a0:	4658      	mov	r0, fp
  4198a2:	6851      	ldr	r1, [r2, #4]
  4198a4:	f7fe fee8 	bl	418678 <_Balloc>
  4198a8:	4606      	mov	r6, r0
  4198aa:	2800      	cmp	r0, #0
  4198ac:	f000 82cd 	beq.w	419e4a <_strtod_r+0xa3a>
  4198b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4198b2:	6903      	ldr	r3, [r0, #16]
  4198b4:	1c9a      	adds	r2, r3, #2
  4198b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4198b8:	0092      	lsls	r2, r2, #2
  4198ba:	f103 010c 	add.w	r1, r3, #12
  4198be:	f106 000c 	add.w	r0, r6, #12
  4198c2:	f7f9 fb51 	bl	412f68 <memcpy>
  4198c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4198ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4198ce:	a81b      	add	r0, sp, #108	; 0x6c
  4198d0:	a91c      	add	r1, sp, #112	; 0x70
  4198d2:	e88d 0003 	stmia.w	sp, {r0, r1}
  4198d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4198da:	4658      	mov	r0, fp
  4198dc:	f7ff fa3e 	bl	418d5c <__d2b>
  4198e0:	901a      	str	r0, [sp, #104]	; 0x68
  4198e2:	2800      	cmp	r0, #0
  4198e4:	f000 8412 	beq.w	41a10c <_strtod_r+0xcfc>
  4198e8:	4658      	mov	r0, fp
  4198ea:	2101      	movs	r1, #1
  4198ec:	f7fe ffda 	bl	4188a4 <__i2b>
  4198f0:	4607      	mov	r7, r0
  4198f2:	2800      	cmp	r0, #0
  4198f4:	f000 82a9 	beq.w	419e4a <_strtod_r+0xa3a>
  4198f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4198fa:	2b00      	cmp	r3, #0
  4198fc:	f2c0 8110 	blt.w	419b20 <_strtod_r+0x710>
  419900:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  419904:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  419906:	4499      	add	r9, r3
  419908:	980a      	ldr	r0, [sp, #40]	; 0x28
  41990a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  41990c:	1a1b      	subs	r3, r3, r0
  41990e:	4413      	add	r3, r2
  419910:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  419914:	428b      	cmp	r3, r1
  419916:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  41991a:	f280 80da 	bge.w	419ad2 <_strtod_r+0x6c2>
  41991e:	1aca      	subs	r2, r1, r3
  419920:	2a1f      	cmp	r2, #31
  419922:	ebc2 0a0a 	rsb	sl, r2, sl
  419926:	f300 8100 	bgt.w	419b2a <_strtod_r+0x71a>
  41992a:	f04f 0801 	mov.w	r8, #1
  41992e:	2300      	movs	r3, #0
  419930:	fa08 f802 	lsl.w	r8, r8, r2
  419934:	930c      	str	r3, [sp, #48]	; 0x30
  419936:	980a      	ldr	r0, [sp, #40]	; 0x28
  419938:	4455      	add	r5, sl
  41993a:	44ca      	add	sl, r9
  41993c:	45ca      	cmp	sl, r9
  41993e:	bfb4      	ite	lt
  419940:	4653      	movlt	r3, sl
  419942:	464b      	movge	r3, r9
  419944:	4405      	add	r5, r0
  419946:	42ab      	cmp	r3, r5
  419948:	bfa8      	it	ge
  41994a:	462b      	movge	r3, r5
  41994c:	2b00      	cmp	r3, #0
  41994e:	dd04      	ble.n	41995a <_strtod_r+0x54a>
  419950:	ebc3 0a0a 	rsb	sl, r3, sl
  419954:	1aed      	subs	r5, r5, r3
  419956:	ebc3 0909 	rsb	r9, r3, r9
  41995a:	990e      	ldr	r1, [sp, #56]	; 0x38
  41995c:	b1b1      	cbz	r1, 41998c <_strtod_r+0x57c>
  41995e:	4639      	mov	r1, r7
  419960:	4658      	mov	r0, fp
  419962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  419964:	f7ff f846 	bl	4189f4 <__pow5mult>
  419968:	4607      	mov	r7, r0
  41996a:	2800      	cmp	r0, #0
  41996c:	f000 826d 	beq.w	419e4a <_strtod_r+0xa3a>
  419970:	4658      	mov	r0, fp
  419972:	4639      	mov	r1, r7
  419974:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  419976:	f7fe ff9f 	bl	4188b8 <__multiply>
  41997a:	4604      	mov	r4, r0
  41997c:	2800      	cmp	r0, #0
  41997e:	f000 8264 	beq.w	419e4a <_strtod_r+0xa3a>
  419982:	4658      	mov	r0, fp
  419984:	991a      	ldr	r1, [sp, #104]	; 0x68
  419986:	f7fe fe9d 	bl	4186c4 <_Bfree>
  41998a:	941a      	str	r4, [sp, #104]	; 0x68
  41998c:	f1ba 0f00 	cmp.w	sl, #0
  419990:	dd08      	ble.n	4199a4 <_strtod_r+0x594>
  419992:	4652      	mov	r2, sl
  419994:	4658      	mov	r0, fp
  419996:	991a      	ldr	r1, [sp, #104]	; 0x68
  419998:	f7ff f87a 	bl	418a90 <__lshift>
  41999c:	901a      	str	r0, [sp, #104]	; 0x68
  41999e:	2800      	cmp	r0, #0
  4199a0:	f000 83b4 	beq.w	41a10c <_strtod_r+0xcfc>
  4199a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4199a6:	b142      	cbz	r2, 4199ba <_strtod_r+0x5aa>
  4199a8:	4631      	mov	r1, r6
  4199aa:	4658      	mov	r0, fp
  4199ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4199ae:	f7ff f821 	bl	4189f4 <__pow5mult>
  4199b2:	4606      	mov	r6, r0
  4199b4:	2800      	cmp	r0, #0
  4199b6:	f000 8248 	beq.w	419e4a <_strtod_r+0xa3a>
  4199ba:	2d00      	cmp	r5, #0
  4199bc:	dd08      	ble.n	4199d0 <_strtod_r+0x5c0>
  4199be:	4631      	mov	r1, r6
  4199c0:	462a      	mov	r2, r5
  4199c2:	4658      	mov	r0, fp
  4199c4:	f7ff f864 	bl	418a90 <__lshift>
  4199c8:	4606      	mov	r6, r0
  4199ca:	2800      	cmp	r0, #0
  4199cc:	f000 823d 	beq.w	419e4a <_strtod_r+0xa3a>
  4199d0:	f1b9 0f00 	cmp.w	r9, #0
  4199d4:	dd08      	ble.n	4199e8 <_strtod_r+0x5d8>
  4199d6:	4639      	mov	r1, r7
  4199d8:	464a      	mov	r2, r9
  4199da:	4658      	mov	r0, fp
  4199dc:	f7ff f858 	bl	418a90 <__lshift>
  4199e0:	4607      	mov	r7, r0
  4199e2:	2800      	cmp	r0, #0
  4199e4:	f000 8231 	beq.w	419e4a <_strtod_r+0xa3a>
  4199e8:	4658      	mov	r0, fp
  4199ea:	991a      	ldr	r1, [sp, #104]	; 0x68
  4199ec:	4632      	mov	r2, r6
  4199ee:	f7ff f8d1 	bl	418b94 <__mdiff>
  4199f2:	9006      	str	r0, [sp, #24]
  4199f4:	2800      	cmp	r0, #0
  4199f6:	f000 8228 	beq.w	419e4a <_strtod_r+0xa3a>
  4199fa:	9906      	ldr	r1, [sp, #24]
  4199fc:	2300      	movs	r3, #0
  4199fe:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  419a02:	60cb      	str	r3, [r1, #12]
  419a04:	4639      	mov	r1, r7
  419a06:	f7ff f8a1 	bl	418b4c <__mcmp>
  419a0a:	2800      	cmp	r0, #0
  419a0c:	f2c0 83cb 	blt.w	41a1a6 <_strtod_r+0xd96>
  419a10:	f000 8388 	beq.w	41a124 <_strtod_r+0xd14>
  419a14:	9806      	ldr	r0, [sp, #24]
  419a16:	4639      	mov	r1, r7
  419a18:	f7ff f9fe 	bl	418e18 <__ratio>
  419a1c:	2200      	movs	r2, #0
  419a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  419a22:	4604      	mov	r4, r0
  419a24:	460d      	mov	r5, r1
  419a26:	f002 f9ff 	bl	41be28 <__aeabi_dcmple>
  419a2a:	2800      	cmp	r0, #0
  419a2c:	d064      	beq.n	419af8 <_strtod_r+0x6e8>
  419a2e:	f1ba 0f00 	cmp.w	sl, #0
  419a32:	f000 808e 	beq.w	419b52 <_strtod_r+0x742>
  419a36:	4d2d      	ldr	r5, [pc, #180]	; (419aec <_strtod_r+0x6dc>)
  419a38:	f8dd 900c 	ldr.w	r9, [sp, #12]
  419a3c:	2400      	movs	r4, #0
  419a3e:	4622      	mov	r2, r4
  419a40:	462b      	mov	r3, r5
  419a42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  419a46:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 419af4 <_strtod_r+0x6e4>
  419a4a:	4b29      	ldr	r3, [pc, #164]	; (419af0 <_strtod_r+0x6e0>)
  419a4c:	ea09 0808 	and.w	r8, r9, r8
  419a50:	4598      	cmp	r8, r3
  419a52:	f000 81bf 	beq.w	419dd4 <_strtod_r+0x9c4>
  419a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  419a58:	b182      	cbz	r2, 419a7c <_strtod_r+0x66c>
  419a5a:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  419a5e:	d80d      	bhi.n	419a7c <_strtod_r+0x66c>
  419a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  419a64:	a31e      	add	r3, pc, #120	; (adr r3, 419ae0 <_strtod_r+0x6d0>)
  419a66:	e9d3 2300 	ldrd	r2, r3, [r3]
  419a6a:	f002 f9dd 	bl	41be28 <__aeabi_dcmple>
  419a6e:	2800      	cmp	r0, #0
  419a70:	f040 811b 	bne.w	419caa <_strtod_r+0x89a>
  419a74:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  419a78:	ebc8 0503 	rsb	r5, r8, r3
  419a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  419a80:	f7ff f8f2 	bl	418c68 <__ulp>
  419a84:	4602      	mov	r2, r0
  419a86:	460b      	mov	r3, r1
  419a88:	4620      	mov	r0, r4
  419a8a:	4629      	mov	r1, r5
  419a8c:	f001 ff50 	bl	41b930 <__aeabi_dmul>
  419a90:	4602      	mov	r2, r0
  419a92:	460b      	mov	r3, r1
  419a94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  419a98:	f001 fd98 	bl	41b5cc <__adddf3>
  419a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419aa0:	9c03      	ldr	r4, [sp, #12]
  419aa2:	990a      	ldr	r1, [sp, #40]	; 0x28
  419aa4:	b921      	cbnz	r1, 419ab0 <_strtod_r+0x6a0>
  419aa6:	4b13      	ldr	r3, [pc, #76]	; (419af4 <_strtod_r+0x6e4>)
  419aa8:	4023      	ands	r3, r4
  419aaa:	4598      	cmp	r8, r3
  419aac:	f000 81ed 	beq.w	419e8a <_strtod_r+0xa7a>
  419ab0:	4658      	mov	r0, fp
  419ab2:	991a      	ldr	r1, [sp, #104]	; 0x68
  419ab4:	f7fe fe06 	bl	4186c4 <_Bfree>
  419ab8:	4658      	mov	r0, fp
  419aba:	4631      	mov	r1, r6
  419abc:	f7fe fe02 	bl	4186c4 <_Bfree>
  419ac0:	4658      	mov	r0, fp
  419ac2:	4639      	mov	r1, r7
  419ac4:	f7fe fdfe 	bl	4186c4 <_Bfree>
  419ac8:	4658      	mov	r0, fp
  419aca:	9906      	ldr	r1, [sp, #24]
  419acc:	f7fe fdfa 	bl	4186c4 <_Bfree>
  419ad0:	e6e5      	b.n	41989e <_strtod_r+0x48e>
  419ad2:	2300      	movs	r3, #0
  419ad4:	930c      	str	r3, [sp, #48]	; 0x30
  419ad6:	f04f 0801 	mov.w	r8, #1
  419ada:	e72c      	b.n	419936 <_strtod_r+0x526>
  419adc:	f3af 8000 	nop.w
  419ae0:	ffc00000 	.word	0xffc00000
  419ae4:	41dfffff 	.word	0x41dfffff
  419ae8:	0041df68 	.word	0x0041df68
  419aec:	3ff00000 	.word	0x3ff00000
  419af0:	7fe00000 	.word	0x7fe00000
  419af4:	7ff00000 	.word	0x7ff00000
  419af8:	4620      	mov	r0, r4
  419afa:	4629      	mov	r1, r5
  419afc:	2200      	movs	r2, #0
  419afe:	4ba8      	ldr	r3, [pc, #672]	; (419da0 <_strtod_r+0x990>)
  419b00:	f001 ff16 	bl	41b930 <__aeabi_dmul>
  419b04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  419b08:	f1ba 0f00 	cmp.w	sl, #0
  419b0c:	d11c      	bne.n	419b48 <_strtod_r+0x738>
  419b0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  419b12:	9010      	str	r0, [sp, #64]	; 0x40
  419b14:	9111      	str	r1, [sp, #68]	; 0x44
  419b16:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  419b1a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  419b1e:	e792      	b.n	419a46 <_strtod_r+0x636>
  419b20:	990f      	ldr	r1, [sp, #60]	; 0x3c
  419b22:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  419b26:	1acd      	subs	r5, r1, r3
  419b28:	e6ee      	b.n	419908 <_strtod_r+0x4f8>
  419b2a:	4c9e      	ldr	r4, [pc, #632]	; (419da4 <_strtod_r+0x994>)
  419b2c:	f04f 0801 	mov.w	r8, #1
  419b30:	1ae4      	subs	r4, r4, r3
  419b32:	fa08 f404 	lsl.w	r4, r8, r4
  419b36:	940c      	str	r4, [sp, #48]	; 0x30
  419b38:	e6fd      	b.n	419936 <_strtod_r+0x526>
  419b3a:	9519      	str	r5, [sp, #100]	; 0x64
  419b3c:	2100      	movs	r1, #0
  419b3e:	f1ba 0f00 	cmp.w	sl, #0
  419b42:	f47f ad20 	bne.w	419586 <_strtod_r+0x176>
  419b46:	e573      	b.n	419630 <_strtod_r+0x220>
  419b48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  419b4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  419b50:	e7e1      	b.n	419b16 <_strtod_r+0x706>
  419b52:	9b02      	ldr	r3, [sp, #8]
  419b54:	2b00      	cmp	r3, #0
  419b56:	f040 8092 	bne.w	419c7e <_strtod_r+0x86e>
  419b5a:	9803      	ldr	r0, [sp, #12]
  419b5c:	f3c0 0313 	ubfx	r3, r0, #0, #20
  419b60:	4681      	mov	r9, r0
  419b62:	2b00      	cmp	r3, #0
  419b64:	f040 8091 	bne.w	419c8a <_strtod_r+0x87a>
  419b68:	4620      	mov	r0, r4
  419b6a:	4629      	mov	r1, r5
  419b6c:	2200      	movs	r2, #0
  419b6e:	4b8e      	ldr	r3, [pc, #568]	; (419da8 <_strtod_r+0x998>)
  419b70:	f002 f950 	bl	41be14 <__aeabi_dcmplt>
  419b74:	2800      	cmp	r0, #0
  419b76:	f040 8356 	bne.w	41a226 <_strtod_r+0xe16>
  419b7a:	4620      	mov	r0, r4
  419b7c:	4629      	mov	r1, r5
  419b7e:	2200      	movs	r2, #0
  419b80:	4b87      	ldr	r3, [pc, #540]	; (419da0 <_strtod_r+0x990>)
  419b82:	f001 fed5 	bl	41b930 <__aeabi_dmul>
  419b86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  419b8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  419b8e:	9016      	str	r0, [sp, #88]	; 0x58
  419b90:	9117      	str	r1, [sp, #92]	; 0x5c
  419b92:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  419b96:	e756      	b.n	419a46 <_strtod_r+0x636>
  419b98:	4640      	mov	r0, r8
  419b9a:	4643      	mov	r3, r8
  419b9c:	46b2      	mov	sl, r6
  419b9e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  419ba2:	2a09      	cmp	r2, #9
  419ba4:	d825      	bhi.n	419bf2 <_strtod_r+0x7e2>
  419ba6:	9c19      	ldr	r4, [sp, #100]	; 0x64
  419ba8:	3001      	adds	r0, #1
  419baa:	2a00      	cmp	r2, #0
  419bac:	f000 81af 	beq.w	419f0e <_strtod_r+0xafe>
  419bb0:	2801      	cmp	r0, #1
  419bb2:	4403      	add	r3, r0
  419bb4:	f000 81a0 	beq.w	419ef8 <_strtod_r+0xae8>
  419bb8:	4450      	add	r0, sl
  419bba:	3801      	subs	r0, #1
  419bbc:	e006      	b.n	419bcc <_strtod_r+0x7bc>
  419bbe:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  419bc2:	ea4f 0949 	mov.w	r9, r9, lsl #1
  419bc6:	4582      	cmp	sl, r0
  419bc8:	f000 8197 	beq.w	419efa <_strtod_r+0xaea>
  419bcc:	f10a 0a01 	add.w	sl, sl, #1
  419bd0:	f10a 31ff 	add.w	r1, sl, #4294967295
  419bd4:	2908      	cmp	r1, #8
  419bd6:	ddf2      	ble.n	419bbe <_strtod_r+0x7ae>
  419bd8:	f1ba 0f10 	cmp.w	sl, #16
  419bdc:	bfdc      	itt	le
  419bde:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  419be2:	007f      	lslle	r7, r7, #1
  419be4:	e7ef      	b.n	419bc6 <_strtod_r+0x7b6>
  419be6:	2200      	movs	r2, #0
  419be8:	9208      	str	r2, [sp, #32]
  419bea:	e5bc      	b.n	419766 <_strtod_r+0x356>
  419bec:	2100      	movs	r1, #0
  419bee:	9108      	str	r1, [sp, #32]
  419bf0:	e5b6      	b.n	419760 <_strtod_r+0x350>
  419bf2:	2201      	movs	r2, #1
  419bf4:	920b      	str	r2, [sp, #44]	; 0x2c
  419bf6:	e4bd      	b.n	419574 <_strtod_r+0x164>
  419bf8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  419bfc:	f300 8117 	bgt.w	419e2e <_strtod_r+0xa1e>
  419c00:	1124      	asrs	r4, r4, #4
  419c02:	2c01      	cmp	r4, #1
  419c04:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 419dd0 <_strtod_r+0x9c0>
  419c08:	f340 832a 	ble.w	41a260 <_strtod_r+0xe50>
  419c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419c10:	4645      	mov	r5, r8
  419c12:	2700      	movs	r7, #0
  419c14:	f014 0f01 	tst.w	r4, #1
  419c18:	f107 0701 	add.w	r7, r7, #1
  419c1c:	ea4f 0464 	mov.w	r4, r4, asr #1
  419c20:	d003      	beq.n	419c2a <_strtod_r+0x81a>
  419c22:	e9d5 2300 	ldrd	r2, r3, [r5]
  419c26:	f001 fe83 	bl	41b930 <__aeabi_dmul>
  419c2a:	2c01      	cmp	r4, #1
  419c2c:	f105 0508 	add.w	r5, r5, #8
  419c30:	dcf0      	bgt.n	419c14 <_strtod_r+0x804>
  419c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419c36:	9b03      	ldr	r3, [sp, #12]
  419c38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  419c3c:	9303      	str	r3, [sp, #12]
  419c3e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  419c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  419c46:	e9d7 0100 	ldrd	r0, r1, [r7]
  419c4a:	f001 fe71 	bl	41b930 <__aeabi_dmul>
  419c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419c52:	9803      	ldr	r0, [sp, #12]
  419c54:	4a55      	ldr	r2, [pc, #340]	; (419dac <_strtod_r+0x99c>)
  419c56:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  419c5a:	0d1b      	lsrs	r3, r3, #20
  419c5c:	051b      	lsls	r3, r3, #20
  419c5e:	4293      	cmp	r3, r2
  419c60:	f200 80e5 	bhi.w	419e2e <_strtod_r+0xa1e>
  419c64:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  419c68:	4293      	cmp	r3, r2
  419c6a:	f240 82d5 	bls.w	41a218 <_strtod_r+0xe08>
  419c6e:	4950      	ldr	r1, [pc, #320]	; (419db0 <_strtod_r+0x9a0>)
  419c70:	9103      	str	r1, [sp, #12]
  419c72:	2200      	movs	r2, #0
  419c74:	f04f 33ff 	mov.w	r3, #4294967295
  419c78:	920a      	str	r2, [sp, #40]	; 0x28
  419c7a:	9302      	str	r3, [sp, #8]
  419c7c:	e5f6      	b.n	41986c <_strtod_r+0x45c>
  419c7e:	9902      	ldr	r1, [sp, #8]
  419c80:	f8dd 900c 	ldr.w	r9, [sp, #12]
  419c84:	2901      	cmp	r1, #1
  419c86:	f000 81c9 	beq.w	41a01c <_strtod_r+0xc0c>
  419c8a:	4947      	ldr	r1, [pc, #284]	; (419da8 <_strtod_r+0x998>)
  419c8c:	4d49      	ldr	r5, [pc, #292]	; (419db4 <_strtod_r+0x9a4>)
  419c8e:	2000      	movs	r0, #0
  419c90:	2400      	movs	r4, #0
  419c92:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  419c96:	e6d6      	b.n	419a46 <_strtod_r+0x636>
  419c98:	9919      	ldr	r1, [sp, #100]	; 0x64
  419c9a:	9106      	str	r1, [sp, #24]
  419c9c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  419ca0:	f04f 0a00 	mov.w	sl, #0
  419ca4:	460c      	mov	r4, r1
  419ca6:	2001      	movs	r0, #1
  419ca8:	e77f      	b.n	419baa <_strtod_r+0x79a>
  419caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  419cae:	f002 f901 	bl	41beb4 <__aeabi_d2uiz>
  419cb2:	2800      	cmp	r0, #0
  419cb4:	f000 81ad 	beq.w	41a012 <_strtod_r+0xc02>
  419cb8:	f001 fdc4 	bl	41b844 <__aeabi_ui2d>
  419cbc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  419cc0:	f1ba 0f00 	cmp.w	sl, #0
  419cc4:	f040 81a0 	bne.w	41a008 <_strtod_r+0xbf8>
  419cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  419cca:	990c      	ldr	r1, [sp, #48]	; 0x30
  419ccc:	9114      	str	r1, [sp, #80]	; 0x50
  419cce:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  419cd2:	9215      	str	r2, [sp, #84]	; 0x54
  419cd4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  419cd8:	e6cc      	b.n	419a74 <_strtod_r+0x664>
  419cda:	4837      	ldr	r0, [pc, #220]	; (419db8 <_strtod_r+0x9a8>)
  419cdc:	9919      	ldr	r1, [sp, #100]	; 0x64
  419cde:	e009      	b.n	419cf4 <_strtod_r+0x8e4>
  419ce0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  419ce4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  419ce8:	2c19      	cmp	r4, #25
  419cea:	bf98      	it	ls
  419cec:	3320      	addls	r3, #32
  419cee:	4293      	cmp	r3, r2
  419cf0:	f47f abdd 	bne.w	4194ae <_strtod_r+0x9e>
  419cf4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  419cf8:	2a00      	cmp	r2, #0
  419cfa:	d1f1      	bne.n	419ce0 <_strtod_r+0x8d0>
  419cfc:	1c4b      	adds	r3, r1, #1
  419cfe:	9319      	str	r3, [sp, #100]	; 0x64
  419d00:	784b      	ldrb	r3, [r1, #1]
  419d02:	2b28      	cmp	r3, #40	; 0x28
  419d04:	f000 82e2 	beq.w	41a2cc <_strtod_r+0xebc>
  419d08:	4a2c      	ldr	r2, [pc, #176]	; (419dbc <_strtod_r+0x9ac>)
  419d0a:	9203      	str	r2, [sp, #12]
  419d0c:	2300      	movs	r3, #0
  419d0e:	9302      	str	r3, [sp, #8]
  419d10:	e513      	b.n	41973a <_strtod_r+0x32a>
  419d12:	482b      	ldr	r0, [pc, #172]	; (419dc0 <_strtod_r+0x9b0>)
  419d14:	9919      	ldr	r1, [sp, #100]	; 0x64
  419d16:	e009      	b.n	419d2c <_strtod_r+0x91c>
  419d18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  419d1c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  419d20:	2c19      	cmp	r4, #25
  419d22:	bf98      	it	ls
  419d24:	3320      	addls	r3, #32
  419d26:	4293      	cmp	r3, r2
  419d28:	f47f abc1 	bne.w	4194ae <_strtod_r+0x9e>
  419d2c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  419d30:	2a00      	cmp	r2, #0
  419d32:	d1f1      	bne.n	419d18 <_strtod_r+0x908>
  419d34:	9119      	str	r1, [sp, #100]	; 0x64
  419d36:	4c23      	ldr	r4, [pc, #140]	; (419dc4 <_strtod_r+0x9b4>)
  419d38:	4608      	mov	r0, r1
  419d3a:	e009      	b.n	419d50 <_strtod_r+0x940>
  419d3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  419d40:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  419d44:	2d19      	cmp	r5, #25
  419d46:	bf98      	it	ls
  419d48:	3320      	addls	r3, #32
  419d4a:	4293      	cmp	r3, r2
  419d4c:	f040 8285 	bne.w	41a25a <_strtod_r+0xe4a>
  419d50:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  419d54:	2a00      	cmp	r2, #0
  419d56:	d1f1      	bne.n	419d3c <_strtod_r+0x92c>
  419d58:	3001      	adds	r0, #1
  419d5a:	9019      	str	r0, [sp, #100]	; 0x64
  419d5c:	4a1a      	ldr	r2, [pc, #104]	; (419dc8 <_strtod_r+0x9b8>)
  419d5e:	9203      	str	r2, [sp, #12]
  419d60:	2300      	movs	r3, #0
  419d62:	9302      	str	r3, [sp, #8]
  419d64:	e4e9      	b.n	41973a <_strtod_r+0x32a>
  419d66:	9907      	ldr	r1, [sp, #28]
  419d68:	9101      	str	r1, [sp, #4]
  419d6a:	ab1a      	add	r3, sp, #104	; 0x68
  419d6c:	9300      	str	r3, [sp, #0]
  419d6e:	4658      	mov	r0, fp
  419d70:	a919      	add	r1, sp, #100	; 0x64
  419d72:	4a16      	ldr	r2, [pc, #88]	; (419dcc <_strtod_r+0x9bc>)
  419d74:	ab1b      	add	r3, sp, #108	; 0x6c
  419d76:	f001 f8af 	bl	41aed8 <__gethex>
  419d7a:	f010 0507 	ands.w	r5, r0, #7
  419d7e:	4604      	mov	r4, r0
  419d80:	f43f acca 	beq.w	419718 <_strtod_r+0x308>
  419d84:	2d06      	cmp	r5, #6
  419d86:	f040 8157 	bne.w	41a038 <_strtod_r+0xc28>
  419d8a:	3601      	adds	r6, #1
  419d8c:	2200      	movs	r2, #0
  419d8e:	9619      	str	r6, [sp, #100]	; 0x64
  419d90:	f04f 0800 	mov.w	r8, #0
  419d94:	f04f 0900 	mov.w	r9, #0
  419d98:	9207      	str	r2, [sp, #28]
  419d9a:	f7ff bb8f 	b.w	4194bc <_strtod_r+0xac>
  419d9e:	bf00      	nop
  419da0:	3fe00000 	.word	0x3fe00000
  419da4:	fffffbe3 	.word	0xfffffbe3
  419da8:	3ff00000 	.word	0x3ff00000
  419dac:	7ca00000 	.word	0x7ca00000
  419db0:	7fefffff 	.word	0x7fefffff
  419db4:	bff00000 	.word	0xbff00000
  419db8:	0041e083 	.word	0x0041e083
  419dbc:	fff80000 	.word	0xfff80000
  419dc0:	0041e077 	.word	0x0041e077
  419dc4:	0041e07b 	.word	0x0041e07b
  419dc8:	7ff00000 	.word	0x7ff00000
  419dcc:	0041e064 	.word	0x0041e064
  419dd0:	0041e030 	.word	0x0041e030
  419dd4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  419dd8:	f8cd 900c 	str.w	r9, [sp, #12]
  419ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419de0:	f7fe ff42 	bl	418c68 <__ulp>
  419de4:	4602      	mov	r2, r0
  419de6:	460b      	mov	r3, r1
  419de8:	4620      	mov	r0, r4
  419dea:	4629      	mov	r1, r5
  419dec:	f001 fda0 	bl	41b930 <__aeabi_dmul>
  419df0:	4602      	mov	r2, r0
  419df2:	460b      	mov	r3, r1
  419df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419df8:	f001 fbe8 	bl	41b5cc <__adddf3>
  419dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419e00:	9903      	ldr	r1, [sp, #12]
  419e02:	4aad      	ldr	r2, [pc, #692]	; (41a0b8 <_strtod_r+0xca8>)
  419e04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  419e08:	0d1b      	lsrs	r3, r3, #20
  419e0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  419e0e:	051b      	lsls	r3, r3, #20
  419e10:	4293      	cmp	r3, r2
  419e12:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  419e16:	f240 80d5 	bls.w	419fc4 <_strtod_r+0xbb4>
  419e1a:	4ba8      	ldr	r3, [pc, #672]	; (41a0bc <_strtod_r+0xcac>)
  419e1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  419e1e:	4299      	cmp	r1, r3
  419e20:	d010      	beq.n	419e44 <_strtod_r+0xa34>
  419e22:	4ba6      	ldr	r3, [pc, #664]	; (41a0bc <_strtod_r+0xcac>)
  419e24:	9303      	str	r3, [sp, #12]
  419e26:	f04f 30ff 	mov.w	r0, #4294967295
  419e2a:	9002      	str	r0, [sp, #8]
  419e2c:	e640      	b.n	419ab0 <_strtod_r+0x6a0>
  419e2e:	4aa4      	ldr	r2, [pc, #656]	; (41a0c0 <_strtod_r+0xcb0>)
  419e30:	9203      	str	r2, [sp, #12]
  419e32:	2000      	movs	r0, #0
  419e34:	2322      	movs	r3, #34	; 0x22
  419e36:	9002      	str	r0, [sp, #8]
  419e38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  419e3c:	f8cb 3000 	str.w	r3, [fp]
  419e40:	f7ff bb3c 	b.w	4194bc <_strtod_r+0xac>
  419e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
  419e46:	3201      	adds	r2, #1
  419e48:	d1eb      	bne.n	419e22 <_strtod_r+0xa12>
  419e4a:	46b2      	mov	sl, r6
  419e4c:	991a      	ldr	r1, [sp, #104]	; 0x68
  419e4e:	4a9c      	ldr	r2, [pc, #624]	; (41a0c0 <_strtod_r+0xcb0>)
  419e50:	9203      	str	r2, [sp, #12]
  419e52:	2000      	movs	r0, #0
  419e54:	9002      	str	r0, [sp, #8]
  419e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  419e5a:	2322      	movs	r3, #34	; 0x22
  419e5c:	f8cb 3000 	str.w	r3, [fp]
  419e60:	4658      	mov	r0, fp
  419e62:	f7fe fc2f 	bl	4186c4 <_Bfree>
  419e66:	4658      	mov	r0, fp
  419e68:	4651      	mov	r1, sl
  419e6a:	f7fe fc2b 	bl	4186c4 <_Bfree>
  419e6e:	4658      	mov	r0, fp
  419e70:	4639      	mov	r1, r7
  419e72:	f7fe fc27 	bl	4186c4 <_Bfree>
  419e76:	4658      	mov	r0, fp
  419e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  419e7a:	f7fe fc23 	bl	4186c4 <_Bfree>
  419e7e:	4658      	mov	r0, fp
  419e80:	9906      	ldr	r1, [sp, #24]
  419e82:	f7fe fc1f 	bl	4186c4 <_Bfree>
  419e86:	f7ff bb19 	b.w	4194bc <_strtod_r+0xac>
  419e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  419e8e:	f001 ffe9 	bl	41be64 <__aeabi_d2iz>
  419e92:	f001 fce7 	bl	41b864 <__aeabi_i2d>
  419e96:	4602      	mov	r2, r0
  419e98:	460b      	mov	r3, r1
  419e9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  419e9e:	f001 fb93 	bl	41b5c8 <__aeabi_dsub>
  419ea2:	4680      	mov	r8, r0
  419ea4:	4689      	mov	r9, r1
  419ea6:	f1ba 0f00 	cmp.w	sl, #0
  419eaa:	d111      	bne.n	419ed0 <_strtod_r+0xac0>
  419eac:	9a02      	ldr	r2, [sp, #8]
  419eae:	b97a      	cbnz	r2, 419ed0 <_strtod_r+0xac0>
  419eb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
  419eb4:	b964      	cbnz	r4, 419ed0 <_strtod_r+0xac0>
  419eb6:	a37a      	add	r3, pc, #488	; (adr r3, 41a0a0 <_strtod_r+0xc90>)
  419eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  419ebc:	f001 ffaa 	bl	41be14 <__aeabi_dcmplt>
  419ec0:	2800      	cmp	r0, #0
  419ec2:	f43f adf5 	beq.w	419ab0 <_strtod_r+0x6a0>
  419ec6:	46b2      	mov	sl, r6
  419ec8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  419ecc:	991a      	ldr	r1, [sp, #104]	; 0x68
  419ece:	e7c7      	b.n	419e60 <_strtod_r+0xa50>
  419ed0:	4640      	mov	r0, r8
  419ed2:	4649      	mov	r1, r9
  419ed4:	a374      	add	r3, pc, #464	; (adr r3, 41a0a8 <_strtod_r+0xc98>)
  419ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
  419eda:	f001 ff9b 	bl	41be14 <__aeabi_dcmplt>
  419ede:	2800      	cmp	r0, #0
  419ee0:	d1f1      	bne.n	419ec6 <_strtod_r+0xab6>
  419ee2:	4640      	mov	r0, r8
  419ee4:	4649      	mov	r1, r9
  419ee6:	a372      	add	r3, pc, #456	; (adr r3, 41a0b0 <_strtod_r+0xca0>)
  419ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  419eec:	f001 ffb0 	bl	41be50 <__aeabi_dcmpgt>
  419ef0:	2800      	cmp	r0, #0
  419ef2:	f43f addd 	beq.w	419ab0 <_strtod_r+0x6a0>
  419ef6:	e7e6      	b.n	419ec6 <_strtod_r+0xab6>
  419ef8:	4650      	mov	r0, sl
  419efa:	2808      	cmp	r0, #8
  419efc:	f100 0a01 	add.w	sl, r0, #1
  419f00:	f300 8107 	bgt.w	41a112 <_strtod_r+0xd02>
  419f04:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  419f08:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  419f0c:	2000      	movs	r0, #0
  419f0e:	1c62      	adds	r2, r4, #1
  419f10:	9219      	str	r2, [sp, #100]	; 0x64
  419f12:	7864      	ldrb	r4, [r4, #1]
  419f14:	e643      	b.n	419b9e <_strtod_r+0x78e>
  419f16:	f43f aca7 	beq.w	419868 <_strtod_r+0x458>
  419f1a:	f1c8 0400 	rsb	r4, r8, #0
  419f1e:	f014 030f 	ands.w	r3, r4, #15
  419f22:	d00a      	beq.n	419f3a <_strtod_r+0xb2a>
  419f24:	4a67      	ldr	r2, [pc, #412]	; (41a0c4 <_strtod_r+0xcb4>)
  419f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  419f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  419f32:	f001 fe27 	bl	41bb84 <__aeabi_ddiv>
  419f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419f3a:	1124      	asrs	r4, r4, #4
  419f3c:	f43f ac94 	beq.w	419868 <_strtod_r+0x458>
  419f40:	2c1f      	cmp	r4, #31
  419f42:	dc33      	bgt.n	419fac <_strtod_r+0xb9c>
  419f44:	f014 0f10 	tst.w	r4, #16
  419f48:	bf14      	ite	ne
  419f4a:	216a      	movne	r1, #106	; 0x6a
  419f4c:	2100      	moveq	r1, #0
  419f4e:	2c00      	cmp	r4, #0
  419f50:	910a      	str	r1, [sp, #40]	; 0x28
  419f52:	dd0e      	ble.n	419f72 <_strtod_r+0xb62>
  419f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419f58:	4d5b      	ldr	r5, [pc, #364]	; (41a0c8 <_strtod_r+0xcb8>)
  419f5a:	07e3      	lsls	r3, r4, #31
  419f5c:	d503      	bpl.n	419f66 <_strtod_r+0xb56>
  419f5e:	e9d5 2300 	ldrd	r2, r3, [r5]
  419f62:	f001 fce5 	bl	41b930 <__aeabi_dmul>
  419f66:	1064      	asrs	r4, r4, #1
  419f68:	f105 0508 	add.w	r5, r5, #8
  419f6c:	d1f5      	bne.n	419f5a <_strtod_r+0xb4a>
  419f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  419f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  419f74:	b18a      	cbz	r2, 419f9a <_strtod_r+0xb8a>
  419f76:	9803      	ldr	r0, [sp, #12]
  419f78:	f3c0 530a 	ubfx	r3, r0, #20, #11
  419f7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  419f80:	2b00      	cmp	r3, #0
  419f82:	dd0a      	ble.n	419f9a <_strtod_r+0xb8a>
  419f84:	2b1f      	cmp	r3, #31
  419f86:	f340 81bd 	ble.w	41a304 <_strtod_r+0xef4>
  419f8a:	2100      	movs	r1, #0
  419f8c:	2b34      	cmp	r3, #52	; 0x34
  419f8e:	9102      	str	r1, [sp, #8]
  419f90:	f340 81c0 	ble.w	41a314 <_strtod_r+0xf04>
  419f94:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  419f98:	9203      	str	r2, [sp, #12]
  419f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  419f9e:	2200      	movs	r2, #0
  419fa0:	2300      	movs	r3, #0
  419fa2:	f001 ff2d 	bl	41be00 <__aeabi_dcmpeq>
  419fa6:	2800      	cmp	r0, #0
  419fa8:	f43f ac60 	beq.w	41986c <_strtod_r+0x45c>
  419fac:	2322      	movs	r3, #34	; 0x22
  419fae:	f8cb 3000 	str.w	r3, [fp]
  419fb2:	f04f 0800 	mov.w	r8, #0
  419fb6:	f04f 0900 	mov.w	r9, #0
  419fba:	f7ff ba7f 	b.w	4194bc <_strtod_r+0xac>
  419fbe:	f644 611f 	movw	r1, #19999	; 0x4e1f
  419fc2:	e40f      	b.n	4197e4 <_strtod_r+0x3d4>
  419fc4:	9903      	ldr	r1, [sp, #12]
  419fc6:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  419fca:	9403      	str	r4, [sp, #12]
  419fcc:	e569      	b.n	419aa2 <_strtod_r+0x692>
  419fce:	9808      	ldr	r0, [sp, #32]
  419fd0:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  419fd4:	4298      	cmp	r0, r3
  419fd6:	f73f ac2d 	bgt.w	419834 <_strtod_r+0x424>
  419fda:	4c3a      	ldr	r4, [pc, #232]	; (41a0c4 <_strtod_r+0xcb4>)
  419fdc:	f1ca 050f 	rsb	r5, sl, #15
  419fe0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  419fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  419fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
  419fec:	f001 fca0 	bl	41b930 <__aeabi_dmul>
  419ff0:	9a08      	ldr	r2, [sp, #32]
  419ff2:	1b55      	subs	r5, r2, r5
  419ff4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  419ff8:	e9d4 2300 	ldrd	r2, r3, [r4]
  419ffc:	f001 fc98 	bl	41b930 <__aeabi_dmul>
  41a000:	4680      	mov	r8, r0
  41a002:	4689      	mov	r9, r1
  41a004:	f7ff ba5a 	b.w	4194bc <_strtod_r+0xac>
  41a008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41a00c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  41a010:	e660      	b.n	419cd4 <_strtod_r+0x8c4>
  41a012:	492e      	ldr	r1, [pc, #184]	; (41a0cc <_strtod_r+0xcbc>)
  41a014:	2000      	movs	r0, #0
  41a016:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41a01a:	e651      	b.n	419cc0 <_strtod_r+0x8b0>
  41a01c:	464a      	mov	r2, r9
  41a01e:	2a00      	cmp	r2, #0
  41a020:	f47f ae33 	bne.w	419c8a <_strtod_r+0x87a>
  41a024:	46b2      	mov	sl, r6
  41a026:	2322      	movs	r3, #34	; 0x22
  41a028:	f8cb 3000 	str.w	r3, [fp]
  41a02c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41a02e:	f04f 0800 	mov.w	r8, #0
  41a032:	f04f 0900 	mov.w	r9, #0
  41a036:	e713      	b.n	419e60 <_strtod_r+0xa50>
  41a038:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  41a03a:	b13a      	cbz	r2, 41a04c <_strtod_r+0xc3c>
  41a03c:	a81c      	add	r0, sp, #112	; 0x70
  41a03e:	2135      	movs	r1, #53	; 0x35
  41a040:	f7fe ff12 	bl	418e68 <__copybits>
  41a044:	4658      	mov	r0, fp
  41a046:	991a      	ldr	r1, [sp, #104]	; 0x68
  41a048:	f7fe fb3c 	bl	4186c4 <_Bfree>
  41a04c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  41a04e:	2d06      	cmp	r5, #6
  41a050:	f63f ab6d 	bhi.w	41972e <_strtod_r+0x31e>
  41a054:	a001      	add	r0, pc, #4	; (adr r0, 41a05c <_strtod_r+0xc4c>)
  41a056:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  41a05a:	bf00      	nop
  41a05c:	0041a091 	.word	0x0041a091
  41a060:	0041a0d1 	.word	0x0041a0d1
  41a064:	0041a085 	.word	0x0041a085
  41a068:	0041a079 	.word	0x0041a079
  41a06c:	00419723 	.word	0x00419723
  41a070:	0041a0d1 	.word	0x0041a0d1
  41a074:	0041a091 	.word	0x0041a091
  41a078:	4911      	ldr	r1, [pc, #68]	; (41a0c0 <_strtod_r+0xcb0>)
  41a07a:	9103      	str	r1, [sp, #12]
  41a07c:	2200      	movs	r2, #0
  41a07e:	9202      	str	r2, [sp, #8]
  41a080:	f7ff bb55 	b.w	41972e <_strtod_r+0x31e>
  41a084:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  41a086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  41a088:	9202      	str	r2, [sp, #8]
  41a08a:	9303      	str	r3, [sp, #12]
  41a08c:	f7ff bb4f 	b.w	41972e <_strtod_r+0x31e>
  41a090:	2100      	movs	r1, #0
  41a092:	9103      	str	r1, [sp, #12]
  41a094:	9102      	str	r1, [sp, #8]
  41a096:	f7ff bb4a 	b.w	41972e <_strtod_r+0x31e>
  41a09a:	bf00      	nop
  41a09c:	f3af 8000 	nop.w
  41a0a0:	94a03595 	.word	0x94a03595
  41a0a4:	3fcfffff 	.word	0x3fcfffff
  41a0a8:	94a03595 	.word	0x94a03595
  41a0ac:	3fdfffff 	.word	0x3fdfffff
  41a0b0:	35afe535 	.word	0x35afe535
  41a0b4:	3fe00000 	.word	0x3fe00000
  41a0b8:	7c9fffff 	.word	0x7c9fffff
  41a0bc:	7fefffff 	.word	0x7fefffff
  41a0c0:	7ff00000 	.word	0x7ff00000
  41a0c4:	0041df68 	.word	0x0041df68
  41a0c8:	0041e0a0 	.word	0x0041e0a0
  41a0cc:	3ff00000 	.word	0x3ff00000
  41a0d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  41a0d2:	981c      	ldr	r0, [sp, #112]	; 0x70
  41a0d4:	9002      	str	r0, [sp, #8]
  41a0d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  41a0da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  41a0de:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  41a0e2:	9203      	str	r2, [sp, #12]
  41a0e4:	f7ff bb23 	b.w	41972e <_strtod_r+0x31e>
  41a0e8:	9b08      	ldr	r3, [sp, #32]
  41a0ea:	3316      	adds	r3, #22
  41a0ec:	f6ff aba2 	blt.w	419834 <_strtod_r+0x424>
  41a0f0:	4b8e      	ldr	r3, [pc, #568]	; (41a32c <_strtod_r+0xf1c>)
  41a0f2:	9808      	ldr	r0, [sp, #32]
  41a0f4:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  41a0f8:	e9da 2300 	ldrd	r2, r3, [sl]
  41a0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41a100:	f001 fd40 	bl	41bb84 <__aeabi_ddiv>
  41a104:	4680      	mov	r8, r0
  41a106:	4689      	mov	r9, r1
  41a108:	f7ff b9d8 	b.w	4194bc <_strtod_r+0xac>
  41a10c:	46b2      	mov	sl, r6
  41a10e:	4601      	mov	r1, r0
  41a110:	e69d      	b.n	419e4e <_strtod_r+0xa3e>
  41a112:	f1ba 0f10 	cmp.w	sl, #16
  41a116:	bfdc      	itt	le
  41a118:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  41a11c:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  41a120:	2000      	movs	r0, #0
  41a122:	e6f4      	b.n	419f0e <_strtod_r+0xafe>
  41a124:	4655      	mov	r5, sl
  41a126:	46c4      	mov	ip, r8
  41a128:	46b2      	mov	sl, r6
  41a12a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  41a12e:	2d00      	cmp	r5, #0
  41a130:	f000 8082 	beq.w	41a238 <_strtod_r+0xe28>
  41a134:	9a03      	ldr	r2, [sp, #12]
  41a136:	4b7e      	ldr	r3, [pc, #504]	; (41a330 <_strtod_r+0xf20>)
  41a138:	f3c2 0113 	ubfx	r1, r2, #0, #20
  41a13c:	4299      	cmp	r1, r3
  41a13e:	f000 80a3 	beq.w	41a288 <_strtod_r+0xe78>
  41a142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41a144:	2b00      	cmp	r3, #0
  41a146:	f000 8083 	beq.w	41a250 <_strtod_r+0xe40>
  41a14a:	9803      	ldr	r0, [sp, #12]
  41a14c:	4203      	tst	r3, r0
  41a14e:	d00f      	beq.n	41a170 <_strtod_r+0xd60>
  41a150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41a154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41a156:	2d00      	cmp	r5, #0
  41a158:	f000 8084 	beq.w	41a264 <_strtod_r+0xe54>
  41a15c:	f7ff f936 	bl	4193cc <sulp>
  41a160:	4602      	mov	r2, r0
  41a162:	460b      	mov	r3, r1
  41a164:	4640      	mov	r0, r8
  41a166:	4649      	mov	r1, r9
  41a168:	f001 fa30 	bl	41b5cc <__adddf3>
  41a16c:	4680      	mov	r8, r0
  41a16e:	4689      	mov	r9, r1
  41a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41a172:	b1b3      	cbz	r3, 41a1a2 <_strtod_r+0xd92>
  41a174:	486f      	ldr	r0, [pc, #444]	; (41a334 <_strtod_r+0xf24>)
  41a176:	9013      	str	r0, [sp, #76]	; 0x4c
  41a178:	2100      	movs	r1, #0
  41a17a:	9112      	str	r1, [sp, #72]	; 0x48
  41a17c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  41a180:	4640      	mov	r0, r8
  41a182:	4649      	mov	r1, r9
  41a184:	f001 fbd4 	bl	41b930 <__aeabi_dmul>
  41a188:	4680      	mov	r8, r0
  41a18a:	4689      	mov	r9, r1
  41a18c:	e9cd 8902 	strd	r8, r9, [sp, #8]
  41a190:	9a03      	ldr	r2, [sp, #12]
  41a192:	b932      	cbnz	r2, 41a1a2 <_strtod_r+0xd92>
  41a194:	9b02      	ldr	r3, [sp, #8]
  41a196:	b923      	cbnz	r3, 41a1a2 <_strtod_r+0xd92>
  41a198:	2322      	movs	r3, #34	; 0x22
  41a19a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41a19c:	f8cb 3000 	str.w	r3, [fp]
  41a1a0:	e65e      	b.n	419e60 <_strtod_r+0xa50>
  41a1a2:	991a      	ldr	r1, [sp, #104]	; 0x68
  41a1a4:	e65c      	b.n	419e60 <_strtod_r+0xa50>
  41a1a6:	4655      	mov	r5, sl
  41a1a8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  41a1ac:	46b2      	mov	sl, r6
  41a1ae:	2d00      	cmp	r5, #0
  41a1b0:	d1de      	bne.n	41a170 <_strtod_r+0xd60>
  41a1b2:	9a02      	ldr	r2, [sp, #8]
  41a1b4:	2a00      	cmp	r2, #0
  41a1b6:	d1db      	bne.n	41a170 <_strtod_r+0xd60>
  41a1b8:	9803      	ldr	r0, [sp, #12]
  41a1ba:	f3c0 0313 	ubfx	r3, r0, #0, #20
  41a1be:	4604      	mov	r4, r0
  41a1c0:	2b00      	cmp	r3, #0
  41a1c2:	d1d5      	bne.n	41a170 <_strtod_r+0xd60>
  41a1c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  41a1c8:	0d1b      	lsrs	r3, r3, #20
  41a1ca:	051b      	lsls	r3, r3, #20
  41a1cc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  41a1d0:	d9ce      	bls.n	41a170 <_strtod_r+0xd60>
  41a1d2:	9906      	ldr	r1, [sp, #24]
  41a1d4:	694b      	ldr	r3, [r1, #20]
  41a1d6:	b913      	cbnz	r3, 41a1de <_strtod_r+0xdce>
  41a1d8:	690b      	ldr	r3, [r1, #16]
  41a1da:	2b01      	cmp	r3, #1
  41a1dc:	ddc8      	ble.n	41a170 <_strtod_r+0xd60>
  41a1de:	9906      	ldr	r1, [sp, #24]
  41a1e0:	2201      	movs	r2, #1
  41a1e2:	4658      	mov	r0, fp
  41a1e4:	f7fe fc54 	bl	418a90 <__lshift>
  41a1e8:	4639      	mov	r1, r7
  41a1ea:	9006      	str	r0, [sp, #24]
  41a1ec:	f7fe fcae 	bl	418b4c <__mcmp>
  41a1f0:	2800      	cmp	r0, #0
  41a1f2:	ddbd      	ble.n	41a170 <_strtod_r+0xd60>
  41a1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41a1f6:	2b00      	cmp	r3, #0
  41a1f8:	d17a      	bne.n	41a2f0 <_strtod_r+0xee0>
  41a1fa:	4b4f      	ldr	r3, [pc, #316]	; (41a338 <_strtod_r+0xf28>)
  41a1fc:	4023      	ands	r3, r4
  41a1fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  41a202:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  41a206:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  41a20a:	f04f 31ff 	mov.w	r1, #4294967295
  41a20e:	9003      	str	r0, [sp, #12]
  41a210:	9102      	str	r1, [sp, #8]
  41a212:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41a216:	e7ab      	b.n	41a170 <_strtod_r+0xd60>
  41a218:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  41a21c:	2000      	movs	r0, #0
  41a21e:	9103      	str	r1, [sp, #12]
  41a220:	900a      	str	r0, [sp, #40]	; 0x28
  41a222:	f7ff bb23 	b.w	41986c <_strtod_r+0x45c>
  41a226:	4b45      	ldr	r3, [pc, #276]	; (41a33c <_strtod_r+0xf2c>)
  41a228:	4945      	ldr	r1, [pc, #276]	; (41a340 <_strtod_r+0xf30>)
  41a22a:	2200      	movs	r2, #0
  41a22c:	2000      	movs	r0, #0
  41a22e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  41a232:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41a236:	e4ac      	b.n	419b92 <_strtod_r+0x782>
  41a238:	9903      	ldr	r1, [sp, #12]
  41a23a:	f3c1 0313 	ubfx	r3, r1, #0, #20
  41a23e:	460c      	mov	r4, r1
  41a240:	2b00      	cmp	r3, #0
  41a242:	f47f af7e 	bne.w	41a142 <_strtod_r+0xd32>
  41a246:	9a02      	ldr	r2, [sp, #8]
  41a248:	2a00      	cmp	r2, #0
  41a24a:	f47f af7a 	bne.w	41a142 <_strtod_r+0xd32>
  41a24e:	e7d1      	b.n	41a1f4 <_strtod_r+0xde4>
  41a250:	9902      	ldr	r1, [sp, #8]
  41a252:	ea1c 0f01 	tst.w	ip, r1
  41a256:	d08b      	beq.n	41a170 <_strtod_r+0xd60>
  41a258:	e77a      	b.n	41a150 <_strtod_r+0xd40>
  41a25a:	3101      	adds	r1, #1
  41a25c:	9119      	str	r1, [sp, #100]	; 0x64
  41a25e:	e57d      	b.n	419d5c <_strtod_r+0x94c>
  41a260:	2700      	movs	r7, #0
  41a262:	e4e8      	b.n	419c36 <_strtod_r+0x826>
  41a264:	f7ff f8b2 	bl	4193cc <sulp>
  41a268:	4602      	mov	r2, r0
  41a26a:	460b      	mov	r3, r1
  41a26c:	4640      	mov	r0, r8
  41a26e:	4649      	mov	r1, r9
  41a270:	f001 f9aa 	bl	41b5c8 <__aeabi_dsub>
  41a274:	2200      	movs	r2, #0
  41a276:	2300      	movs	r3, #0
  41a278:	4680      	mov	r8, r0
  41a27a:	4689      	mov	r9, r1
  41a27c:	f001 fdc0 	bl	41be00 <__aeabi_dcmpeq>
  41a280:	2800      	cmp	r0, #0
  41a282:	f47f aed0 	bne.w	41a026 <_strtod_r+0xc16>
  41a286:	e773      	b.n	41a170 <_strtod_r+0xd60>
  41a288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41a28a:	9902      	ldr	r1, [sp, #8]
  41a28c:	b1db      	cbz	r3, 41a2c6 <_strtod_r+0xeb6>
  41a28e:	4b2a      	ldr	r3, [pc, #168]	; (41a338 <_strtod_r+0xf28>)
  41a290:	4013      	ands	r3, r2
  41a292:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  41a296:	d816      	bhi.n	41a2c6 <_strtod_r+0xeb6>
  41a298:	0d1b      	lsrs	r3, r3, #20
  41a29a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  41a29e:	f04f 30ff 	mov.w	r0, #4294967295
  41a2a2:	fa00 f303 	lsl.w	r3, r0, r3
  41a2a6:	4299      	cmp	r1, r3
  41a2a8:	f47f af4b 	bne.w	41a142 <_strtod_r+0xd32>
  41a2ac:	4b25      	ldr	r3, [pc, #148]	; (41a344 <_strtod_r+0xf34>)
  41a2ae:	429a      	cmp	r2, r3
  41a2b0:	d038      	beq.n	41a324 <_strtod_r+0xf14>
  41a2b2:	4b21      	ldr	r3, [pc, #132]	; (41a338 <_strtod_r+0xf28>)
  41a2b4:	4013      	ands	r3, r2
  41a2b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  41a2ba:	2000      	movs	r0, #0
  41a2bc:	9303      	str	r3, [sp, #12]
  41a2be:	9002      	str	r0, [sp, #8]
  41a2c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41a2c4:	e754      	b.n	41a170 <_strtod_r+0xd60>
  41a2c6:	f04f 33ff 	mov.w	r3, #4294967295
  41a2ca:	e7ec      	b.n	41a2a6 <_strtod_r+0xe96>
  41a2cc:	a819      	add	r0, sp, #100	; 0x64
  41a2ce:	491e      	ldr	r1, [pc, #120]	; (41a348 <_strtod_r+0xf38>)
  41a2d0:	aa1c      	add	r2, sp, #112	; 0x70
  41a2d2:	f001 f899 	bl	41b408 <__hexnan>
  41a2d6:	2805      	cmp	r0, #5
  41a2d8:	f47f ad16 	bne.w	419d08 <_strtod_r+0x8f8>
  41a2dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  41a2de:	991c      	ldr	r1, [sp, #112]	; 0x70
  41a2e0:	9102      	str	r1, [sp, #8]
  41a2e2:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  41a2e6:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  41a2ea:	9003      	str	r0, [sp, #12]
  41a2ec:	f7ff ba25 	b.w	41973a <_strtod_r+0x32a>
  41a2f0:	4b11      	ldr	r3, [pc, #68]	; (41a338 <_strtod_r+0xf28>)
  41a2f2:	4023      	ands	r3, r4
  41a2f4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  41a2f8:	d881      	bhi.n	41a1fe <_strtod_r+0xdee>
  41a2fa:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  41a2fe:	f63f af39 	bhi.w	41a174 <_strtod_r+0xd64>
  41a302:	e690      	b.n	41a026 <_strtod_r+0xc16>
  41a304:	9802      	ldr	r0, [sp, #8]
  41a306:	f04f 32ff 	mov.w	r2, #4294967295
  41a30a:	fa02 f303 	lsl.w	r3, r2, r3
  41a30e:	4003      	ands	r3, r0
  41a310:	9302      	str	r3, [sp, #8]
  41a312:	e642      	b.n	419f9a <_strtod_r+0xb8a>
  41a314:	3b20      	subs	r3, #32
  41a316:	f04f 31ff 	mov.w	r1, #4294967295
  41a31a:	fa01 f303 	lsl.w	r3, r1, r3
  41a31e:	4003      	ands	r3, r0
  41a320:	9303      	str	r3, [sp, #12]
  41a322:	e63a      	b.n	419f9a <_strtod_r+0xb8a>
  41a324:	3101      	adds	r1, #1
  41a326:	d1c4      	bne.n	41a2b2 <_strtod_r+0xea2>
  41a328:	e590      	b.n	419e4c <_strtod_r+0xa3c>
  41a32a:	bf00      	nop
  41a32c:	0041df68 	.word	0x0041df68
  41a330:	000fffff 	.word	0x000fffff
  41a334:	39500000 	.word	0x39500000
  41a338:	7ff00000 	.word	0x7ff00000
  41a33c:	bfe00000 	.word	0xbfe00000
  41a340:	3fe00000 	.word	0x3fe00000
  41a344:	7fefffff 	.word	0x7fefffff
  41a348:	0041e088 	.word	0x0041e088
  41a34c:	f3af 8000 	nop.w

0041a350 <_strtol_r>:
  41a350:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41a354:	4c42      	ldr	r4, [pc, #264]	; (41a460 <_strtol_r+0x110>)
  41a356:	b082      	sub	sp, #8
  41a358:	f8d4 c000 	ldr.w	ip, [r4]
  41a35c:	9001      	str	r0, [sp, #4]
  41a35e:	460e      	mov	r6, r1
  41a360:	e000      	b.n	41a364 <_strtol_r+0x14>
  41a362:	4626      	mov	r6, r4
  41a364:	4634      	mov	r4, r6
  41a366:	f814 5b01 	ldrb.w	r5, [r4], #1
  41a36a:	eb0c 0005 	add.w	r0, ip, r5
  41a36e:	7840      	ldrb	r0, [r0, #1]
  41a370:	f000 0008 	and.w	r0, r0, #8
  41a374:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  41a378:	2800      	cmp	r0, #0
  41a37a:	d1f2      	bne.n	41a362 <_strtol_r+0x12>
  41a37c:	2d2d      	cmp	r5, #45	; 0x2d
  41a37e:	d05b      	beq.n	41a438 <_strtol_r+0xe8>
  41a380:	2d2b      	cmp	r5, #43	; 0x2b
  41a382:	bf04      	itt	eq
  41a384:	7875      	ldrbeq	r5, [r6, #1]
  41a386:	1cb4      	addeq	r4, r6, #2
  41a388:	f033 0010 	bics.w	r0, r3, #16
  41a38c:	d03c      	beq.n	41a408 <_strtol_r+0xb8>
  41a38e:	4699      	mov	r9, r3
  41a390:	f1ba 0f00 	cmp.w	sl, #0
  41a394:	bf0c      	ite	eq
  41a396:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  41a39a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  41a39e:	fbbb f8f9 	udiv	r8, fp, r9
  41a3a2:	2700      	movs	r7, #0
  41a3a4:	fb09 bb18 	mls	fp, r9, r8, fp
  41a3a8:	4638      	mov	r0, r7
  41a3aa:	e00c      	b.n	41a3c6 <_strtol_r+0x76>
  41a3ac:	3d30      	subs	r5, #48	; 0x30
  41a3ae:	42ab      	cmp	r3, r5
  41a3b0:	dd19      	ble.n	41a3e6 <_strtol_r+0x96>
  41a3b2:	1c7e      	adds	r6, r7, #1
  41a3b4:	d005      	beq.n	41a3c2 <_strtol_r+0x72>
  41a3b6:	4540      	cmp	r0, r8
  41a3b8:	d823      	bhi.n	41a402 <_strtol_r+0xb2>
  41a3ba:	d020      	beq.n	41a3fe <_strtol_r+0xae>
  41a3bc:	fb09 5000 	mla	r0, r9, r0, r5
  41a3c0:	2701      	movs	r7, #1
  41a3c2:	f814 5b01 	ldrb.w	r5, [r4], #1
  41a3c6:	eb0c 0605 	add.w	r6, ip, r5
  41a3ca:	7876      	ldrb	r6, [r6, #1]
  41a3cc:	f016 0f04 	tst.w	r6, #4
  41a3d0:	d1ec      	bne.n	41a3ac <_strtol_r+0x5c>
  41a3d2:	f016 0603 	ands.w	r6, r6, #3
  41a3d6:	d006      	beq.n	41a3e6 <_strtol_r+0x96>
  41a3d8:	2e01      	cmp	r6, #1
  41a3da:	bf14      	ite	ne
  41a3dc:	2657      	movne	r6, #87	; 0x57
  41a3de:	2637      	moveq	r6, #55	; 0x37
  41a3e0:	1bad      	subs	r5, r5, r6
  41a3e2:	42ab      	cmp	r3, r5
  41a3e4:	dce5      	bgt.n	41a3b2 <_strtol_r+0x62>
  41a3e6:	1c7b      	adds	r3, r7, #1
  41a3e8:	d015      	beq.n	41a416 <_strtol_r+0xc6>
  41a3ea:	f1ba 0f00 	cmp.w	sl, #0
  41a3ee:	d121      	bne.n	41a434 <_strtol_r+0xe4>
  41a3f0:	b10a      	cbz	r2, 41a3f6 <_strtol_r+0xa6>
  41a3f2:	b9ef      	cbnz	r7, 41a430 <_strtol_r+0xe0>
  41a3f4:	6011      	str	r1, [r2, #0]
  41a3f6:	b002      	add	sp, #8
  41a3f8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41a3fc:	4770      	bx	lr
  41a3fe:	455d      	cmp	r5, fp
  41a400:	dddc      	ble.n	41a3bc <_strtol_r+0x6c>
  41a402:	f04f 37ff 	mov.w	r7, #4294967295
  41a406:	e7dc      	b.n	41a3c2 <_strtol_r+0x72>
  41a408:	2d30      	cmp	r5, #48	; 0x30
  41a40a:	d01a      	beq.n	41a442 <_strtol_r+0xf2>
  41a40c:	2b00      	cmp	r3, #0
  41a40e:	d1be      	bne.n	41a38e <_strtol_r+0x3e>
  41a410:	230a      	movs	r3, #10
  41a412:	4699      	mov	r9, r3
  41a414:	e7bc      	b.n	41a390 <_strtol_r+0x40>
  41a416:	9901      	ldr	r1, [sp, #4]
  41a418:	f1ba 0f00 	cmp.w	sl, #0
  41a41c:	f04f 0322 	mov.w	r3, #34	; 0x22
  41a420:	bf0c      	ite	eq
  41a422:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  41a426:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  41a42a:	600b      	str	r3, [r1, #0]
  41a42c:	2a00      	cmp	r2, #0
  41a42e:	d0e2      	beq.n	41a3f6 <_strtol_r+0xa6>
  41a430:	1e61      	subs	r1, r4, #1
  41a432:	e7df      	b.n	41a3f4 <_strtol_r+0xa4>
  41a434:	4240      	negs	r0, r0
  41a436:	e7db      	b.n	41a3f0 <_strtol_r+0xa0>
  41a438:	1cb4      	adds	r4, r6, #2
  41a43a:	7875      	ldrb	r5, [r6, #1]
  41a43c:	f04f 0a01 	mov.w	sl, #1
  41a440:	e7a2      	b.n	41a388 <_strtol_r+0x38>
  41a442:	7820      	ldrb	r0, [r4, #0]
  41a444:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  41a448:	2858      	cmp	r0, #88	; 0x58
  41a44a:	d003      	beq.n	41a454 <_strtol_r+0x104>
  41a44c:	2b00      	cmp	r3, #0
  41a44e:	d19e      	bne.n	41a38e <_strtol_r+0x3e>
  41a450:	2308      	movs	r3, #8
  41a452:	e79c      	b.n	41a38e <_strtol_r+0x3e>
  41a454:	2310      	movs	r3, #16
  41a456:	7865      	ldrb	r5, [r4, #1]
  41a458:	4699      	mov	r9, r3
  41a45a:	3402      	adds	r4, #2
  41a45c:	e798      	b.n	41a390 <_strtol_r+0x40>
  41a45e:	bf00      	nop
  41a460:	20000fc4 	.word	0x20000fc4

0041a464 <_strtoll_r>:
  41a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41a468:	4c64      	ldr	r4, [pc, #400]	; (41a5fc <_strtoll_r+0x198>)
  41a46a:	b087      	sub	sp, #28
  41a46c:	4694      	mov	ip, r2
  41a46e:	9104      	str	r1, [sp, #16]
  41a470:	f8d4 8000 	ldr.w	r8, [r4]
  41a474:	9005      	str	r0, [sp, #20]
  41a476:	4699      	mov	r9, r3
  41a478:	460a      	mov	r2, r1
  41a47a:	e000      	b.n	41a47e <_strtoll_r+0x1a>
  41a47c:	4632      	mov	r2, r6
  41a47e:	4616      	mov	r6, r2
  41a480:	f816 7b01 	ldrb.w	r7, [r6], #1
  41a484:	eb08 0307 	add.w	r3, r8, r7
  41a488:	785b      	ldrb	r3, [r3, #1]
  41a48a:	f003 0308 	and.w	r3, r3, #8
  41a48e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  41a492:	2b00      	cmp	r3, #0
  41a494:	d1f2      	bne.n	41a47c <_strtoll_r+0x18>
  41a496:	2f2d      	cmp	r7, #45	; 0x2d
  41a498:	f000 808d 	beq.w	41a5b6 <_strtoll_r+0x152>
  41a49c:	2f2b      	cmp	r7, #43	; 0x2b
  41a49e:	bf08      	it	eq
  41a4a0:	7857      	ldrbeq	r7, [r2, #1]
  41a4a2:	9102      	str	r1, [sp, #8]
  41a4a4:	bf08      	it	eq
  41a4a6:	1c96      	addeq	r6, r2, #2
  41a4a8:	f039 0110 	bics.w	r1, r9, #16
  41a4ac:	d05e      	beq.n	41a56c <_strtoll_r+0x108>
  41a4ae:	46ca      	mov	sl, r9
  41a4b0:	ea4f 7be9 	mov.w	fp, r9, asr #31
  41a4b4:	9c02      	ldr	r4, [sp, #8]
  41a4b6:	2c00      	cmp	r4, #0
  41a4b8:	d066      	beq.n	41a588 <_strtoll_r+0x124>
  41a4ba:	2400      	movs	r4, #0
  41a4bc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  41a4c0:	4620      	mov	r0, r4
  41a4c2:	4629      	mov	r1, r5
  41a4c4:	4652      	mov	r2, sl
  41a4c6:	465b      	mov	r3, fp
  41a4c8:	f8cd c004 	str.w	ip, [sp, #4]
  41a4cc:	f7f7 ff8e 	bl	4123ec <__aeabi_uldivmod>
  41a4d0:	4620      	mov	r0, r4
  41a4d2:	9203      	str	r2, [sp, #12]
  41a4d4:	465b      	mov	r3, fp
  41a4d6:	4652      	mov	r2, sl
  41a4d8:	4629      	mov	r1, r5
  41a4da:	f7f7 ff87 	bl	4123ec <__aeabi_uldivmod>
  41a4de:	2400      	movs	r4, #0
  41a4e0:	2200      	movs	r2, #0
  41a4e2:	2300      	movs	r3, #0
  41a4e4:	f8dd c004 	ldr.w	ip, [sp, #4]
  41a4e8:	e019      	b.n	41a51e <_strtoll_r+0xba>
  41a4ea:	3f30      	subs	r7, #48	; 0x30
  41a4ec:	45b9      	cmp	r9, r7
  41a4ee:	dd26      	ble.n	41a53e <_strtoll_r+0xda>
  41a4f0:	1c65      	adds	r5, r4, #1
  41a4f2:	d012      	beq.n	41a51a <_strtoll_r+0xb6>
  41a4f4:	4299      	cmp	r1, r3
  41a4f6:	bf08      	it	eq
  41a4f8:	4290      	cmpeq	r0, r2
  41a4fa:	d334      	bcc.n	41a566 <_strtoll_r+0x102>
  41a4fc:	428b      	cmp	r3, r1
  41a4fe:	bf08      	it	eq
  41a500:	4282      	cmpeq	r2, r0
  41a502:	d02d      	beq.n	41a560 <_strtoll_r+0xfc>
  41a504:	fb02 f40b 	mul.w	r4, r2, fp
  41a508:	fb0a 4403 	mla	r4, sl, r3, r4
  41a50c:	fba2 230a 	umull	r2, r3, r2, sl
  41a510:	4423      	add	r3, r4
  41a512:	19d2      	adds	r2, r2, r7
  41a514:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  41a518:	2401      	movs	r4, #1
  41a51a:	f816 7b01 	ldrb.w	r7, [r6], #1
  41a51e:	eb08 0507 	add.w	r5, r8, r7
  41a522:	786d      	ldrb	r5, [r5, #1]
  41a524:	f015 0f04 	tst.w	r5, #4
  41a528:	d1df      	bne.n	41a4ea <_strtoll_r+0x86>
  41a52a:	f015 0503 	ands.w	r5, r5, #3
  41a52e:	d006      	beq.n	41a53e <_strtoll_r+0xda>
  41a530:	2d01      	cmp	r5, #1
  41a532:	bf14      	ite	ne
  41a534:	2557      	movne	r5, #87	; 0x57
  41a536:	2537      	moveq	r5, #55	; 0x37
  41a538:	1b7f      	subs	r7, r7, r5
  41a53a:	45b9      	cmp	r9, r7
  41a53c:	dcd8      	bgt.n	41a4f0 <_strtoll_r+0x8c>
  41a53e:	1c61      	adds	r1, r4, #1
  41a540:	d027      	beq.n	41a592 <_strtoll_r+0x12e>
  41a542:	9902      	ldr	r1, [sp, #8]
  41a544:	2900      	cmp	r1, #0
  41a546:	d132      	bne.n	41a5ae <_strtoll_r+0x14a>
  41a548:	4610      	mov	r0, r2
  41a54a:	4619      	mov	r1, r3
  41a54c:	f1bc 0f00 	cmp.w	ip, #0
  41a550:	d003      	beq.n	41a55a <_strtoll_r+0xf6>
  41a552:	bb54      	cbnz	r4, 41a5aa <_strtoll_r+0x146>
  41a554:	9e04      	ldr	r6, [sp, #16]
  41a556:	f8cc 6000 	str.w	r6, [ip]
  41a55a:	b007      	add	sp, #28
  41a55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41a560:	9c03      	ldr	r4, [sp, #12]
  41a562:	42a7      	cmp	r7, r4
  41a564:	ddce      	ble.n	41a504 <_strtoll_r+0xa0>
  41a566:	f04f 34ff 	mov.w	r4, #4294967295
  41a56a:	e7d6      	b.n	41a51a <_strtoll_r+0xb6>
  41a56c:	2f30      	cmp	r7, #48	; 0x30
  41a56e:	d027      	beq.n	41a5c0 <_strtoll_r+0x15c>
  41a570:	f1b9 0f00 	cmp.w	r9, #0
  41a574:	d19b      	bne.n	41a4ae <_strtoll_r+0x4a>
  41a576:	9c02      	ldr	r4, [sp, #8]
  41a578:	f04f 0a0a 	mov.w	sl, #10
  41a57c:	f04f 0b00 	mov.w	fp, #0
  41a580:	f04f 090a 	mov.w	r9, #10
  41a584:	2c00      	cmp	r4, #0
  41a586:	d198      	bne.n	41a4ba <_strtoll_r+0x56>
  41a588:	f04f 34ff 	mov.w	r4, #4294967295
  41a58c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  41a590:	e796      	b.n	41a4c0 <_strtoll_r+0x5c>
  41a592:	9c02      	ldr	r4, [sp, #8]
  41a594:	bb24      	cbnz	r4, 41a5e0 <_strtoll_r+0x17c>
  41a596:	f04f 30ff 	mov.w	r0, #4294967295
  41a59a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  41a59e:	9c05      	ldr	r4, [sp, #20]
  41a5a0:	2322      	movs	r3, #34	; 0x22
  41a5a2:	6023      	str	r3, [r4, #0]
  41a5a4:	f1bc 0f00 	cmp.w	ip, #0
  41a5a8:	d0d7      	beq.n	41a55a <_strtoll_r+0xf6>
  41a5aa:	3e01      	subs	r6, #1
  41a5ac:	e7d3      	b.n	41a556 <_strtoll_r+0xf2>
  41a5ae:	4252      	negs	r2, r2
  41a5b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41a5b4:	e7c8      	b.n	41a548 <_strtoll_r+0xe4>
  41a5b6:	2401      	movs	r4, #1
  41a5b8:	1c96      	adds	r6, r2, #2
  41a5ba:	7857      	ldrb	r7, [r2, #1]
  41a5bc:	9402      	str	r4, [sp, #8]
  41a5be:	e773      	b.n	41a4a8 <_strtoll_r+0x44>
  41a5c0:	7833      	ldrb	r3, [r6, #0]
  41a5c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41a5c6:	2b58      	cmp	r3, #88	; 0x58
  41a5c8:	d00e      	beq.n	41a5e8 <_strtoll_r+0x184>
  41a5ca:	f1b9 0f00 	cmp.w	r9, #0
  41a5ce:	f47f af6e 	bne.w	41a4ae <_strtoll_r+0x4a>
  41a5d2:	f04f 0a08 	mov.w	sl, #8
  41a5d6:	f04f 0b00 	mov.w	fp, #0
  41a5da:	f04f 0908 	mov.w	r9, #8
  41a5de:	e769      	b.n	41a4b4 <_strtoll_r+0x50>
  41a5e0:	2000      	movs	r0, #0
  41a5e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  41a5e6:	e7da      	b.n	41a59e <_strtoll_r+0x13a>
  41a5e8:	7877      	ldrb	r7, [r6, #1]
  41a5ea:	f04f 0a10 	mov.w	sl, #16
  41a5ee:	f04f 0b00 	mov.w	fp, #0
  41a5f2:	3602      	adds	r6, #2
  41a5f4:	f04f 0910 	mov.w	r9, #16
  41a5f8:	e75c      	b.n	41a4b4 <_strtoll_r+0x50>
  41a5fa:	bf00      	nop
  41a5fc:	20000fc4 	.word	0x20000fc4

0041a600 <_strtoul_r>:
  41a600:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41a604:	4c44      	ldr	r4, [pc, #272]	; (41a718 <_strtoul_r+0x118>)
  41a606:	b082      	sub	sp, #8
  41a608:	f8d4 c000 	ldr.w	ip, [r4]
  41a60c:	9001      	str	r0, [sp, #4]
  41a60e:	460e      	mov	r6, r1
  41a610:	e000      	b.n	41a614 <_strtoul_r+0x14>
  41a612:	4626      	mov	r6, r4
  41a614:	4634      	mov	r4, r6
  41a616:	f814 5b01 	ldrb.w	r5, [r4], #1
  41a61a:	eb0c 0005 	add.w	r0, ip, r5
  41a61e:	7840      	ldrb	r0, [r0, #1]
  41a620:	f000 0008 	and.w	r0, r0, #8
  41a624:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  41a628:	2800      	cmp	r0, #0
  41a62a:	d1f2      	bne.n	41a612 <_strtoul_r+0x12>
  41a62c:	2d2d      	cmp	r5, #45	; 0x2d
  41a62e:	d057      	beq.n	41a6e0 <_strtoul_r+0xe0>
  41a630:	2d2b      	cmp	r5, #43	; 0x2b
  41a632:	bf08      	it	eq
  41a634:	7875      	ldrbeq	r5, [r6, #1]
  41a636:	46ba      	mov	sl, r7
  41a638:	bf08      	it	eq
  41a63a:	1cb4      	addeq	r4, r6, #2
  41a63c:	f033 0010 	bics.w	r0, r3, #16
  41a640:	d039      	beq.n	41a6b6 <_strtoul_r+0xb6>
  41a642:	f04f 38ff 	mov.w	r8, #4294967295
  41a646:	fbb8 f8f3 	udiv	r8, r8, r3
  41a64a:	fb03 fb08 	mul.w	fp, r3, r8
  41a64e:	ea6f 0b0b 	mvn.w	fp, fp
  41a652:	4699      	mov	r9, r3
  41a654:	2700      	movs	r7, #0
  41a656:	4638      	mov	r0, r7
  41a658:	e00c      	b.n	41a674 <_strtoul_r+0x74>
  41a65a:	3d30      	subs	r5, #48	; 0x30
  41a65c:	42ab      	cmp	r3, r5
  41a65e:	dd19      	ble.n	41a694 <_strtoul_r+0x94>
  41a660:	2f00      	cmp	r7, #0
  41a662:	db25      	blt.n	41a6b0 <_strtoul_r+0xb0>
  41a664:	4540      	cmp	r0, r8
  41a666:	d823      	bhi.n	41a6b0 <_strtoul_r+0xb0>
  41a668:	d020      	beq.n	41a6ac <_strtoul_r+0xac>
  41a66a:	fb09 5000 	mla	r0, r9, r0, r5
  41a66e:	2701      	movs	r7, #1
  41a670:	f814 5b01 	ldrb.w	r5, [r4], #1
  41a674:	eb0c 0605 	add.w	r6, ip, r5
  41a678:	7876      	ldrb	r6, [r6, #1]
  41a67a:	f016 0f04 	tst.w	r6, #4
  41a67e:	d1ec      	bne.n	41a65a <_strtoul_r+0x5a>
  41a680:	f016 0603 	ands.w	r6, r6, #3
  41a684:	d006      	beq.n	41a694 <_strtoul_r+0x94>
  41a686:	2e01      	cmp	r6, #1
  41a688:	bf14      	ite	ne
  41a68a:	2657      	movne	r6, #87	; 0x57
  41a68c:	2637      	moveq	r6, #55	; 0x37
  41a68e:	1bad      	subs	r5, r5, r6
  41a690:	42ab      	cmp	r3, r5
  41a692:	dce5      	bgt.n	41a660 <_strtoul_r+0x60>
  41a694:	2f00      	cmp	r7, #0
  41a696:	db1d      	blt.n	41a6d4 <_strtoul_r+0xd4>
  41a698:	f1ba 0f00 	cmp.w	sl, #0
  41a69c:	d118      	bne.n	41a6d0 <_strtoul_r+0xd0>
  41a69e:	b10a      	cbz	r2, 41a6a4 <_strtoul_r+0xa4>
  41a6a0:	b9a7      	cbnz	r7, 41a6cc <_strtoul_r+0xcc>
  41a6a2:	6011      	str	r1, [r2, #0]
  41a6a4:	b002      	add	sp, #8
  41a6a6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41a6aa:	4770      	bx	lr
  41a6ac:	455d      	cmp	r5, fp
  41a6ae:	dddc      	ble.n	41a66a <_strtoul_r+0x6a>
  41a6b0:	f04f 37ff 	mov.w	r7, #4294967295
  41a6b4:	e7dc      	b.n	41a670 <_strtoul_r+0x70>
  41a6b6:	2d30      	cmp	r5, #48	; 0x30
  41a6b8:	d017      	beq.n	41a6ea <_strtoul_r+0xea>
  41a6ba:	2b00      	cmp	r3, #0
  41a6bc:	d1c1      	bne.n	41a642 <_strtoul_r+0x42>
  41a6be:	230a      	movs	r3, #10
  41a6c0:	4699      	mov	r9, r3
  41a6c2:	f04f 0b05 	mov.w	fp, #5
  41a6c6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 41a71c <_strtoul_r+0x11c>
  41a6ca:	e7c3      	b.n	41a654 <_strtoul_r+0x54>
  41a6cc:	1e61      	subs	r1, r4, #1
  41a6ce:	e7e8      	b.n	41a6a2 <_strtoul_r+0xa2>
  41a6d0:	4240      	negs	r0, r0
  41a6d2:	e7e4      	b.n	41a69e <_strtoul_r+0x9e>
  41a6d4:	9801      	ldr	r0, [sp, #4]
  41a6d6:	2322      	movs	r3, #34	; 0x22
  41a6d8:	6003      	str	r3, [r0, #0]
  41a6da:	f04f 30ff 	mov.w	r0, #4294967295
  41a6de:	e7de      	b.n	41a69e <_strtoul_r+0x9e>
  41a6e0:	1cb4      	adds	r4, r6, #2
  41a6e2:	7875      	ldrb	r5, [r6, #1]
  41a6e4:	f04f 0a01 	mov.w	sl, #1
  41a6e8:	e7a8      	b.n	41a63c <_strtoul_r+0x3c>
  41a6ea:	7820      	ldrb	r0, [r4, #0]
  41a6ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  41a6f0:	2858      	cmp	r0, #88	; 0x58
  41a6f2:	d008      	beq.n	41a706 <_strtoul_r+0x106>
  41a6f4:	2b00      	cmp	r3, #0
  41a6f6:	d1a4      	bne.n	41a642 <_strtoul_r+0x42>
  41a6f8:	2308      	movs	r3, #8
  41a6fa:	4699      	mov	r9, r3
  41a6fc:	f04f 0b07 	mov.w	fp, #7
  41a700:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  41a704:	e7a6      	b.n	41a654 <_strtoul_r+0x54>
  41a706:	2310      	movs	r3, #16
  41a708:	7865      	ldrb	r5, [r4, #1]
  41a70a:	4699      	mov	r9, r3
  41a70c:	f04f 0b0f 	mov.w	fp, #15
  41a710:	3402      	adds	r4, #2
  41a712:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  41a716:	e79d      	b.n	41a654 <_strtoul_r+0x54>
  41a718:	20000fc4 	.word	0x20000fc4
  41a71c:	19999999 	.word	0x19999999

0041a720 <_strtoull_r>:
  41a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41a724:	4c60      	ldr	r4, [pc, #384]	; (41a8a8 <_strtoull_r+0x188>)
  41a726:	b085      	sub	sp, #20
  41a728:	f8d4 8000 	ldr.w	r8, [r4]
  41a72c:	9200      	str	r2, [sp, #0]
  41a72e:	9101      	str	r1, [sp, #4]
  41a730:	9003      	str	r0, [sp, #12]
  41a732:	4699      	mov	r9, r3
  41a734:	460a      	mov	r2, r1
  41a736:	e000      	b.n	41a73a <_strtoull_r+0x1a>
  41a738:	4632      	mov	r2, r6
  41a73a:	4616      	mov	r6, r2
  41a73c:	f816 7b01 	ldrb.w	r7, [r6], #1
  41a740:	eb08 0307 	add.w	r3, r8, r7
  41a744:	785b      	ldrb	r3, [r3, #1]
  41a746:	f003 0308 	and.w	r3, r3, #8
  41a74a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  41a74e:	2b00      	cmp	r3, #0
  41a750:	d1f2      	bne.n	41a738 <_strtoull_r+0x18>
  41a752:	2f2d      	cmp	r7, #45	; 0x2d
  41a754:	d07d      	beq.n	41a852 <_strtoull_r+0x132>
  41a756:	2f2b      	cmp	r7, #43	; 0x2b
  41a758:	bf08      	it	eq
  41a75a:	7857      	ldrbeq	r7, [r2, #1]
  41a75c:	9102      	str	r1, [sp, #8]
  41a75e:	bf08      	it	eq
  41a760:	1c96      	addeq	r6, r2, #2
  41a762:	f039 0210 	bics.w	r2, r9, #16
  41a766:	d055      	beq.n	41a814 <_strtoull_r+0xf4>
  41a768:	ea4f 7be9 	mov.w	fp, r9, asr #31
  41a76c:	464a      	mov	r2, r9
  41a76e:	465b      	mov	r3, fp
  41a770:	f04f 30ff 	mov.w	r0, #4294967295
  41a774:	f04f 31ff 	mov.w	r1, #4294967295
  41a778:	f7f7 fe38 	bl	4123ec <__aeabi_uldivmod>
  41a77c:	464a      	mov	r2, r9
  41a77e:	4604      	mov	r4, r0
  41a780:	460d      	mov	r5, r1
  41a782:	465b      	mov	r3, fp
  41a784:	f04f 30ff 	mov.w	r0, #4294967295
  41a788:	f04f 31ff 	mov.w	r1, #4294967295
  41a78c:	f7f7 fe2e 	bl	4123ec <__aeabi_uldivmod>
  41a790:	46ca      	mov	sl, r9
  41a792:	4694      	mov	ip, r2
  41a794:	2300      	movs	r3, #0
  41a796:	2000      	movs	r0, #0
  41a798:	2100      	movs	r1, #0
  41a79a:	e019      	b.n	41a7d0 <_strtoull_r+0xb0>
  41a79c:	3f30      	subs	r7, #48	; 0x30
  41a79e:	45b9      	cmp	r9, r7
  41a7a0:	dd26      	ble.n	41a7f0 <_strtoull_r+0xd0>
  41a7a2:	2b00      	cmp	r3, #0
  41a7a4:	db33      	blt.n	41a80e <_strtoull_r+0xee>
  41a7a6:	428d      	cmp	r5, r1
  41a7a8:	bf08      	it	eq
  41a7aa:	4284      	cmpeq	r4, r0
  41a7ac:	d32f      	bcc.n	41a80e <_strtoull_r+0xee>
  41a7ae:	42a9      	cmp	r1, r5
  41a7b0:	bf08      	it	eq
  41a7b2:	42a0      	cmpeq	r0, r4
  41a7b4:	d029      	beq.n	41a80a <_strtoull_r+0xea>
  41a7b6:	fb00 f30b 	mul.w	r3, r0, fp
  41a7ba:	fb0a 3301 	mla	r3, sl, r1, r3
  41a7be:	fba0 010a 	umull	r0, r1, r0, sl
  41a7c2:	4419      	add	r1, r3
  41a7c4:	19c0      	adds	r0, r0, r7
  41a7c6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  41a7ca:	2301      	movs	r3, #1
  41a7cc:	f816 7b01 	ldrb.w	r7, [r6], #1
  41a7d0:	eb08 0207 	add.w	r2, r8, r7
  41a7d4:	7852      	ldrb	r2, [r2, #1]
  41a7d6:	f012 0f04 	tst.w	r2, #4
  41a7da:	d1df      	bne.n	41a79c <_strtoull_r+0x7c>
  41a7dc:	f012 0203 	ands.w	r2, r2, #3
  41a7e0:	d006      	beq.n	41a7f0 <_strtoull_r+0xd0>
  41a7e2:	2a01      	cmp	r2, #1
  41a7e4:	bf14      	ite	ne
  41a7e6:	2257      	movne	r2, #87	; 0x57
  41a7e8:	2237      	moveq	r2, #55	; 0x37
  41a7ea:	1abf      	subs	r7, r7, r2
  41a7ec:	45b9      	cmp	r9, r7
  41a7ee:	dcd8      	bgt.n	41a7a2 <_strtoull_r+0x82>
  41a7f0:	2b00      	cmp	r3, #0
  41a7f2:	db26      	blt.n	41a842 <_strtoull_r+0x122>
  41a7f4:	9a02      	ldr	r2, [sp, #8]
  41a7f6:	bb02      	cbnz	r2, 41a83a <_strtoull_r+0x11a>
  41a7f8:	9a00      	ldr	r2, [sp, #0]
  41a7fa:	b11a      	cbz	r2, 41a804 <_strtoull_r+0xe4>
  41a7fc:	b9db      	cbnz	r3, 41a836 <_strtoull_r+0x116>
  41a7fe:	9e01      	ldr	r6, [sp, #4]
  41a800:	9b00      	ldr	r3, [sp, #0]
  41a802:	601e      	str	r6, [r3, #0]
  41a804:	b005      	add	sp, #20
  41a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41a80a:	4567      	cmp	r7, ip
  41a80c:	ddd3      	ble.n	41a7b6 <_strtoull_r+0x96>
  41a80e:	f04f 33ff 	mov.w	r3, #4294967295
  41a812:	e7db      	b.n	41a7cc <_strtoull_r+0xac>
  41a814:	2f30      	cmp	r7, #48	; 0x30
  41a816:	d021      	beq.n	41a85c <_strtoull_r+0x13c>
  41a818:	f1b9 0f00 	cmp.w	r9, #0
  41a81c:	d1a4      	bne.n	41a768 <_strtoull_r+0x48>
  41a81e:	f04f 0c05 	mov.w	ip, #5
  41a822:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  41a826:	4d21      	ldr	r5, [pc, #132]	; (41a8ac <_strtoull_r+0x18c>)
  41a828:	f04f 0a0a 	mov.w	sl, #10
  41a82c:	f04f 0b00 	mov.w	fp, #0
  41a830:	f04f 090a 	mov.w	r9, #10
  41a834:	e7ae      	b.n	41a794 <_strtoull_r+0x74>
  41a836:	3e01      	subs	r6, #1
  41a838:	e7e2      	b.n	41a800 <_strtoull_r+0xe0>
  41a83a:	4240      	negs	r0, r0
  41a83c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41a840:	e7da      	b.n	41a7f8 <_strtoull_r+0xd8>
  41a842:	9903      	ldr	r1, [sp, #12]
  41a844:	2222      	movs	r2, #34	; 0x22
  41a846:	600a      	str	r2, [r1, #0]
  41a848:	f04f 30ff 	mov.w	r0, #4294967295
  41a84c:	f04f 31ff 	mov.w	r1, #4294967295
  41a850:	e7d2      	b.n	41a7f8 <_strtoull_r+0xd8>
  41a852:	2101      	movs	r1, #1
  41a854:	1c96      	adds	r6, r2, #2
  41a856:	7857      	ldrb	r7, [r2, #1]
  41a858:	9102      	str	r1, [sp, #8]
  41a85a:	e782      	b.n	41a762 <_strtoull_r+0x42>
  41a85c:	7833      	ldrb	r3, [r6, #0]
  41a85e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41a862:	2b58      	cmp	r3, #88	; 0x58
  41a864:	d010      	beq.n	41a888 <_strtoull_r+0x168>
  41a866:	f1b9 0f00 	cmp.w	r9, #0
  41a86a:	f47f af7d 	bne.w	41a768 <_strtoull_r+0x48>
  41a86e:	f04f 0c07 	mov.w	ip, #7
  41a872:	f04f 34ff 	mov.w	r4, #4294967295
  41a876:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  41a87a:	f04f 0a08 	mov.w	sl, #8
  41a87e:	f04f 0b00 	mov.w	fp, #0
  41a882:	f04f 0908 	mov.w	r9, #8
  41a886:	e785      	b.n	41a794 <_strtoull_r+0x74>
  41a888:	7877      	ldrb	r7, [r6, #1]
  41a88a:	f04f 0c0f 	mov.w	ip, #15
  41a88e:	3602      	adds	r6, #2
  41a890:	f04f 34ff 	mov.w	r4, #4294967295
  41a894:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  41a898:	f04f 0a10 	mov.w	sl, #16
  41a89c:	f04f 0b00 	mov.w	fp, #0
  41a8a0:	f04f 0910 	mov.w	r9, #16
  41a8a4:	e776      	b.n	41a794 <_strtoull_r+0x74>
  41a8a6:	bf00      	nop
  41a8a8:	20000fc4 	.word	0x20000fc4
  41a8ac:	19999999 	.word	0x19999999

0041a8b0 <__ssprint_r>:
  41a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41a8b4:	6894      	ldr	r4, [r2, #8]
  41a8b6:	6816      	ldr	r6, [r2, #0]
  41a8b8:	b083      	sub	sp, #12
  41a8ba:	4692      	mov	sl, r2
  41a8bc:	4680      	mov	r8, r0
  41a8be:	460d      	mov	r5, r1
  41a8c0:	2c00      	cmp	r4, #0
  41a8c2:	d06f      	beq.n	41a9a4 <__ssprint_r+0xf4>
  41a8c4:	f04f 0b00 	mov.w	fp, #0
  41a8c8:	6808      	ldr	r0, [r1, #0]
  41a8ca:	688b      	ldr	r3, [r1, #8]
  41a8cc:	465c      	mov	r4, fp
  41a8ce:	2c00      	cmp	r4, #0
  41a8d0:	d043      	beq.n	41a95a <__ssprint_r+0xaa>
  41a8d2:	429c      	cmp	r4, r3
  41a8d4:	461f      	mov	r7, r3
  41a8d6:	d345      	bcc.n	41a964 <__ssprint_r+0xb4>
  41a8d8:	89ab      	ldrh	r3, [r5, #12]
  41a8da:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41a8de:	d044      	beq.n	41a96a <__ssprint_r+0xba>
  41a8e0:	696f      	ldr	r7, [r5, #20]
  41a8e2:	6929      	ldr	r1, [r5, #16]
  41a8e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  41a8e8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  41a8ec:	ebc1 0900 	rsb	r9, r1, r0
  41a8f0:	1c62      	adds	r2, r4, #1
  41a8f2:	107f      	asrs	r7, r7, #1
  41a8f4:	444a      	add	r2, r9
  41a8f6:	4297      	cmp	r7, r2
  41a8f8:	bf34      	ite	cc
  41a8fa:	4617      	movcc	r7, r2
  41a8fc:	463a      	movcs	r2, r7
  41a8fe:	055b      	lsls	r3, r3, #21
  41a900:	d535      	bpl.n	41a96e <__ssprint_r+0xbe>
  41a902:	4611      	mov	r1, r2
  41a904:	4640      	mov	r0, r8
  41a906:	f7f8 f893 	bl	412a30 <_malloc_r>
  41a90a:	2800      	cmp	r0, #0
  41a90c:	d039      	beq.n	41a982 <__ssprint_r+0xd2>
  41a90e:	6929      	ldr	r1, [r5, #16]
  41a910:	9001      	str	r0, [sp, #4]
  41a912:	464a      	mov	r2, r9
  41a914:	f7f8 fb28 	bl	412f68 <memcpy>
  41a918:	89aa      	ldrh	r2, [r5, #12]
  41a91a:	9b01      	ldr	r3, [sp, #4]
  41a91c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  41a920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  41a924:	81aa      	strh	r2, [r5, #12]
  41a926:	ebc9 0207 	rsb	r2, r9, r7
  41a92a:	eb03 0009 	add.w	r0, r3, r9
  41a92e:	616f      	str	r7, [r5, #20]
  41a930:	612b      	str	r3, [r5, #16]
  41a932:	6028      	str	r0, [r5, #0]
  41a934:	60aa      	str	r2, [r5, #8]
  41a936:	4627      	mov	r7, r4
  41a938:	46a1      	mov	r9, r4
  41a93a:	464a      	mov	r2, r9
  41a93c:	4659      	mov	r1, fp
  41a93e:	f7fd fe3b 	bl	4185b8 <memmove>
  41a942:	f8da 2008 	ldr.w	r2, [sl, #8]
  41a946:	68ab      	ldr	r3, [r5, #8]
  41a948:	6828      	ldr	r0, [r5, #0]
  41a94a:	1bdb      	subs	r3, r3, r7
  41a94c:	4448      	add	r0, r9
  41a94e:	1b14      	subs	r4, r2, r4
  41a950:	60ab      	str	r3, [r5, #8]
  41a952:	6028      	str	r0, [r5, #0]
  41a954:	f8ca 4008 	str.w	r4, [sl, #8]
  41a958:	b324      	cbz	r4, 41a9a4 <__ssprint_r+0xf4>
  41a95a:	f8d6 b000 	ldr.w	fp, [r6]
  41a95e:	6874      	ldr	r4, [r6, #4]
  41a960:	3608      	adds	r6, #8
  41a962:	e7b4      	b.n	41a8ce <__ssprint_r+0x1e>
  41a964:	4627      	mov	r7, r4
  41a966:	46a1      	mov	r9, r4
  41a968:	e7e7      	b.n	41a93a <__ssprint_r+0x8a>
  41a96a:	46b9      	mov	r9, r7
  41a96c:	e7e5      	b.n	41a93a <__ssprint_r+0x8a>
  41a96e:	4640      	mov	r0, r8
  41a970:	f7fe fae2 	bl	418f38 <_realloc_r>
  41a974:	4603      	mov	r3, r0
  41a976:	2800      	cmp	r0, #0
  41a978:	d1d5      	bne.n	41a926 <__ssprint_r+0x76>
  41a97a:	4640      	mov	r0, r8
  41a97c:	6929      	ldr	r1, [r5, #16]
  41a97e:	f7fd fa6f 	bl	417e60 <_free_r>
  41a982:	89aa      	ldrh	r2, [r5, #12]
  41a984:	230c      	movs	r3, #12
  41a986:	f8c8 3000 	str.w	r3, [r8]
  41a98a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  41a98e:	2300      	movs	r3, #0
  41a990:	f04f 30ff 	mov.w	r0, #4294967295
  41a994:	81aa      	strh	r2, [r5, #12]
  41a996:	f8ca 3008 	str.w	r3, [sl, #8]
  41a99a:	f8ca 3004 	str.w	r3, [sl, #4]
  41a99e:	b003      	add	sp, #12
  41a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41a9a4:	4620      	mov	r0, r4
  41a9a6:	f8ca 4004 	str.w	r4, [sl, #4]
  41a9aa:	b003      	add	sp, #12
  41a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041a9b0 <_sungetc_r>:
  41a9b0:	b538      	push	{r3, r4, r5, lr}
  41a9b2:	1c4b      	adds	r3, r1, #1
  41a9b4:	4614      	mov	r4, r2
  41a9b6:	d019      	beq.n	41a9ec <_sungetc_r+0x3c>
  41a9b8:	8992      	ldrh	r2, [r2, #12]
  41a9ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  41a9bc:	f022 0220 	bic.w	r2, r2, #32
  41a9c0:	b2cd      	uxtb	r5, r1
  41a9c2:	81a2      	strh	r2, [r4, #12]
  41a9c4:	b1ab      	cbz	r3, 41a9f2 <_sungetc_r+0x42>
  41a9c6:	6862      	ldr	r2, [r4, #4]
  41a9c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41a9ca:	429a      	cmp	r2, r3
  41a9cc:	da09      	bge.n	41a9e2 <_sungetc_r+0x32>
  41a9ce:	6823      	ldr	r3, [r4, #0]
  41a9d0:	1e5a      	subs	r2, r3, #1
  41a9d2:	6022      	str	r2, [r4, #0]
  41a9d4:	f803 5c01 	strb.w	r5, [r3, #-1]
  41a9d8:	6863      	ldr	r3, [r4, #4]
  41a9da:	3301      	adds	r3, #1
  41a9dc:	4628      	mov	r0, r5
  41a9de:	6063      	str	r3, [r4, #4]
  41a9e0:	bd38      	pop	{r3, r4, r5, pc}
  41a9e2:	4621      	mov	r1, r4
  41a9e4:	f000 f882 	bl	41aaec <__submore>
  41a9e8:	2800      	cmp	r0, #0
  41a9ea:	d0f0      	beq.n	41a9ce <_sungetc_r+0x1e>
  41a9ec:	f04f 30ff 	mov.w	r0, #4294967295
  41a9f0:	bd38      	pop	{r3, r4, r5, pc}
  41a9f2:	6923      	ldr	r3, [r4, #16]
  41a9f4:	6822      	ldr	r2, [r4, #0]
  41a9f6:	b12b      	cbz	r3, 41aa04 <_sungetc_r+0x54>
  41a9f8:	4293      	cmp	r3, r2
  41a9fa:	d203      	bcs.n	41aa04 <_sungetc_r+0x54>
  41a9fc:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  41aa00:	42a8      	cmp	r0, r5
  41aa02:	d00f      	beq.n	41aa24 <_sungetc_r+0x74>
  41aa04:	4623      	mov	r3, r4
  41aa06:	6861      	ldr	r1, [r4, #4]
  41aa08:	63a2      	str	r2, [r4, #56]	; 0x38
  41aa0a:	f104 0040 	add.w	r0, r4, #64	; 0x40
  41aa0e:	2203      	movs	r2, #3
  41aa10:	6320      	str	r0, [r4, #48]	; 0x30
  41aa12:	6362      	str	r2, [r4, #52]	; 0x34
  41aa14:	63e1      	str	r1, [r4, #60]	; 0x3c
  41aa16:	f803 5f42 	strb.w	r5, [r3, #66]!
  41aa1a:	2201      	movs	r2, #1
  41aa1c:	6023      	str	r3, [r4, #0]
  41aa1e:	4628      	mov	r0, r5
  41aa20:	6062      	str	r2, [r4, #4]
  41aa22:	bd38      	pop	{r3, r4, r5, pc}
  41aa24:	6863      	ldr	r3, [r4, #4]
  41aa26:	3a01      	subs	r2, #1
  41aa28:	3301      	adds	r3, #1
  41aa2a:	e884 000c 	stmia.w	r4, {r2, r3}
  41aa2e:	bd38      	pop	{r3, r4, r5, pc}

0041aa30 <__ssrefill_r>:
  41aa30:	b510      	push	{r4, lr}
  41aa32:	460c      	mov	r4, r1
  41aa34:	6b09      	ldr	r1, [r1, #48]	; 0x30
  41aa36:	b169      	cbz	r1, 41aa54 <__ssrefill_r+0x24>
  41aa38:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41aa3c:	4299      	cmp	r1, r3
  41aa3e:	d001      	beq.n	41aa44 <__ssrefill_r+0x14>
  41aa40:	f7fd fa0e 	bl	417e60 <_free_r>
  41aa44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  41aa46:	6063      	str	r3, [r4, #4]
  41aa48:	2000      	movs	r0, #0
  41aa4a:	6320      	str	r0, [r4, #48]	; 0x30
  41aa4c:	b113      	cbz	r3, 41aa54 <__ssrefill_r+0x24>
  41aa4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  41aa50:	6023      	str	r3, [r4, #0]
  41aa52:	bd10      	pop	{r4, pc}
  41aa54:	89a2      	ldrh	r2, [r4, #12]
  41aa56:	6923      	ldr	r3, [r4, #16]
  41aa58:	6023      	str	r3, [r4, #0]
  41aa5a:	f042 0220 	orr.w	r2, r2, #32
  41aa5e:	2300      	movs	r3, #0
  41aa60:	81a2      	strh	r2, [r4, #12]
  41aa62:	6063      	str	r3, [r4, #4]
  41aa64:	f04f 30ff 	mov.w	r0, #4294967295
  41aa68:	bd10      	pop	{r4, pc}
  41aa6a:	bf00      	nop

0041aa6c <_sfread_r>:
  41aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41aa70:	b083      	sub	sp, #12
  41aa72:	fb02 f903 	mul.w	r9, r2, r3
  41aa76:	9201      	str	r2, [sp, #4]
  41aa78:	469a      	mov	sl, r3
  41aa7a:	4607      	mov	r7, r0
  41aa7c:	460e      	mov	r6, r1
  41aa7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41aa80:	f1b9 0f00 	cmp.w	r9, #0
  41aa84:	d026      	beq.n	41aad4 <_sfread_r+0x68>
  41aa86:	464d      	mov	r5, r9
  41aa88:	f04f 0800 	mov.w	r8, #0
  41aa8c:	e00e      	b.n	41aaac <_sfread_r+0x40>
  41aa8e:	f7f8 fa6b 	bl	412f68 <memcpy>
  41aa92:	6822      	ldr	r2, [r4, #0]
  41aa94:	f8c4 8004 	str.w	r8, [r4, #4]
  41aa98:	445a      	add	r2, fp
  41aa9a:	6022      	str	r2, [r4, #0]
  41aa9c:	4638      	mov	r0, r7
  41aa9e:	4621      	mov	r1, r4
  41aaa0:	445e      	add	r6, fp
  41aaa2:	ebcb 0505 	rsb	r5, fp, r5
  41aaa6:	f7ff ffc3 	bl	41aa30 <__ssrefill_r>
  41aaaa:	b9b8      	cbnz	r0, 41aadc <_sfread_r+0x70>
  41aaac:	f8d4 b004 	ldr.w	fp, [r4, #4]
  41aab0:	6821      	ldr	r1, [r4, #0]
  41aab2:	455d      	cmp	r5, fp
  41aab4:	4630      	mov	r0, r6
  41aab6:	465a      	mov	r2, fp
  41aab8:	d8e9      	bhi.n	41aa8e <_sfread_r+0x22>
  41aaba:	462a      	mov	r2, r5
  41aabc:	f7f8 fa54 	bl	412f68 <memcpy>
  41aac0:	6862      	ldr	r2, [r4, #4]
  41aac2:	6823      	ldr	r3, [r4, #0]
  41aac4:	1b52      	subs	r2, r2, r5
  41aac6:	442b      	add	r3, r5
  41aac8:	4650      	mov	r0, sl
  41aaca:	6062      	str	r2, [r4, #4]
  41aacc:	6023      	str	r3, [r4, #0]
  41aace:	b003      	add	sp, #12
  41aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41aad4:	4648      	mov	r0, r9
  41aad6:	b003      	add	sp, #12
  41aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41aadc:	9b01      	ldr	r3, [sp, #4]
  41aade:	ebc5 0909 	rsb	r9, r5, r9
  41aae2:	fbb9 f0f3 	udiv	r0, r9, r3
  41aae6:	b003      	add	sp, #12
  41aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041aaec <__submore>:
  41aaec:	f101 0340 	add.w	r3, r1, #64	; 0x40
  41aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41aaf4:	460c      	mov	r4, r1
  41aaf6:	6b09      	ldr	r1, [r1, #48]	; 0x30
  41aaf8:	4299      	cmp	r1, r3
  41aafa:	d014      	beq.n	41ab26 <__submore+0x3a>
  41aafc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  41aafe:	0077      	lsls	r7, r6, #1
  41ab00:	463a      	mov	r2, r7
  41ab02:	f7fe fa19 	bl	418f38 <_realloc_r>
  41ab06:	4605      	mov	r5, r0
  41ab08:	b340      	cbz	r0, 41ab5c <__submore+0x70>
  41ab0a:	eb00 0806 	add.w	r8, r0, r6
  41ab0e:	4632      	mov	r2, r6
  41ab10:	4640      	mov	r0, r8
  41ab12:	4629      	mov	r1, r5
  41ab14:	f7f8 fa28 	bl	412f68 <memcpy>
  41ab18:	f8c4 8000 	str.w	r8, [r4]
  41ab1c:	6325      	str	r5, [r4, #48]	; 0x30
  41ab1e:	6367      	str	r7, [r4, #52]	; 0x34
  41ab20:	2000      	movs	r0, #0
  41ab22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ab26:	f44f 6180 	mov.w	r1, #1024	; 0x400
  41ab2a:	f7f7 ff81 	bl	412a30 <_malloc_r>
  41ab2e:	b1a8      	cbz	r0, 41ab5c <__submore+0x70>
  41ab30:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  41ab34:	6320      	str	r0, [r4, #48]	; 0x30
  41ab36:	f44f 6280 	mov.w	r2, #1024	; 0x400
  41ab3a:	6362      	str	r2, [r4, #52]	; 0x34
  41ab3c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  41ab40:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  41ab44:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  41ab48:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  41ab4c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  41ab50:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  41ab54:	6020      	str	r0, [r4, #0]
  41ab56:	2000      	movs	r0, #0
  41ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ab5c:	f04f 30ff 	mov.w	r0, #4294967295
  41ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041ab64 <__swbuf_r>:
  41ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41ab66:	460d      	mov	r5, r1
  41ab68:	4614      	mov	r4, r2
  41ab6a:	4607      	mov	r7, r0
  41ab6c:	b110      	cbz	r0, 41ab74 <__swbuf_r+0x10>
  41ab6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41ab70:	2b00      	cmp	r3, #0
  41ab72:	d048      	beq.n	41ac06 <__swbuf_r+0xa2>
  41ab74:	89a2      	ldrh	r2, [r4, #12]
  41ab76:	69a3      	ldr	r3, [r4, #24]
  41ab78:	60a3      	str	r3, [r4, #8]
  41ab7a:	b293      	uxth	r3, r2
  41ab7c:	0718      	lsls	r0, r3, #28
  41ab7e:	d538      	bpl.n	41abf2 <__swbuf_r+0x8e>
  41ab80:	6926      	ldr	r6, [r4, #16]
  41ab82:	2e00      	cmp	r6, #0
  41ab84:	d035      	beq.n	41abf2 <__swbuf_r+0x8e>
  41ab86:	0499      	lsls	r1, r3, #18
  41ab88:	b2ed      	uxtb	r5, r5
  41ab8a:	d515      	bpl.n	41abb8 <__swbuf_r+0x54>
  41ab8c:	6823      	ldr	r3, [r4, #0]
  41ab8e:	6962      	ldr	r2, [r4, #20]
  41ab90:	1b9e      	subs	r6, r3, r6
  41ab92:	4296      	cmp	r6, r2
  41ab94:	da1c      	bge.n	41abd0 <__swbuf_r+0x6c>
  41ab96:	3601      	adds	r6, #1
  41ab98:	68a2      	ldr	r2, [r4, #8]
  41ab9a:	1c59      	adds	r1, r3, #1
  41ab9c:	3a01      	subs	r2, #1
  41ab9e:	60a2      	str	r2, [r4, #8]
  41aba0:	6021      	str	r1, [r4, #0]
  41aba2:	701d      	strb	r5, [r3, #0]
  41aba4:	6963      	ldr	r3, [r4, #20]
  41aba6:	42b3      	cmp	r3, r6
  41aba8:	d01a      	beq.n	41abe0 <__swbuf_r+0x7c>
  41abaa:	89a3      	ldrh	r3, [r4, #12]
  41abac:	07db      	lsls	r3, r3, #31
  41abae:	d501      	bpl.n	41abb4 <__swbuf_r+0x50>
  41abb0:	2d0a      	cmp	r5, #10
  41abb2:	d015      	beq.n	41abe0 <__swbuf_r+0x7c>
  41abb4:	4628      	mov	r0, r5
  41abb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41abb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41abba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  41abbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41abc2:	6663      	str	r3, [r4, #100]	; 0x64
  41abc4:	6823      	ldr	r3, [r4, #0]
  41abc6:	81a2      	strh	r2, [r4, #12]
  41abc8:	6962      	ldr	r2, [r4, #20]
  41abca:	1b9e      	subs	r6, r3, r6
  41abcc:	4296      	cmp	r6, r2
  41abce:	dbe2      	blt.n	41ab96 <__swbuf_r+0x32>
  41abd0:	4638      	mov	r0, r7
  41abd2:	4621      	mov	r1, r4
  41abd4:	f7fc ffe6 	bl	417ba4 <_fflush_r>
  41abd8:	b940      	cbnz	r0, 41abec <__swbuf_r+0x88>
  41abda:	6823      	ldr	r3, [r4, #0]
  41abdc:	2601      	movs	r6, #1
  41abde:	e7db      	b.n	41ab98 <__swbuf_r+0x34>
  41abe0:	4638      	mov	r0, r7
  41abe2:	4621      	mov	r1, r4
  41abe4:	f7fc ffde 	bl	417ba4 <_fflush_r>
  41abe8:	2800      	cmp	r0, #0
  41abea:	d0e3      	beq.n	41abb4 <__swbuf_r+0x50>
  41abec:	f04f 30ff 	mov.w	r0, #4294967295
  41abf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41abf2:	4638      	mov	r0, r7
  41abf4:	4621      	mov	r1, r4
  41abf6:	f7fb fef3 	bl	4169e0 <__swsetup_r>
  41abfa:	2800      	cmp	r0, #0
  41abfc:	d1f6      	bne.n	41abec <__swbuf_r+0x88>
  41abfe:	89a2      	ldrh	r2, [r4, #12]
  41ac00:	6926      	ldr	r6, [r4, #16]
  41ac02:	b293      	uxth	r3, r2
  41ac04:	e7bf      	b.n	41ab86 <__swbuf_r+0x22>
  41ac06:	f7fc ffe9 	bl	417bdc <__sinit>
  41ac0a:	e7b3      	b.n	41ab74 <__swbuf_r+0x10>

0041ac0c <_wcrtomb_r>:
  41ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41ac10:	461e      	mov	r6, r3
  41ac12:	b086      	sub	sp, #24
  41ac14:	460c      	mov	r4, r1
  41ac16:	4605      	mov	r5, r0
  41ac18:	4617      	mov	r7, r2
  41ac1a:	4b0f      	ldr	r3, [pc, #60]	; (41ac58 <_wcrtomb_r+0x4c>)
  41ac1c:	b191      	cbz	r1, 41ac44 <_wcrtomb_r+0x38>
  41ac1e:	f8d3 8000 	ldr.w	r8, [r3]
  41ac22:	f7fd fbab 	bl	41837c <__locale_charset>
  41ac26:	9600      	str	r6, [sp, #0]
  41ac28:	4603      	mov	r3, r0
  41ac2a:	4621      	mov	r1, r4
  41ac2c:	463a      	mov	r2, r7
  41ac2e:	4628      	mov	r0, r5
  41ac30:	47c0      	blx	r8
  41ac32:	1c43      	adds	r3, r0, #1
  41ac34:	d103      	bne.n	41ac3e <_wcrtomb_r+0x32>
  41ac36:	2200      	movs	r2, #0
  41ac38:	238a      	movs	r3, #138	; 0x8a
  41ac3a:	6032      	str	r2, [r6, #0]
  41ac3c:	602b      	str	r3, [r5, #0]
  41ac3e:	b006      	add	sp, #24
  41ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ac44:	681f      	ldr	r7, [r3, #0]
  41ac46:	f7fd fb99 	bl	41837c <__locale_charset>
  41ac4a:	9600      	str	r6, [sp, #0]
  41ac4c:	4603      	mov	r3, r0
  41ac4e:	4622      	mov	r2, r4
  41ac50:	4628      	mov	r0, r5
  41ac52:	a903      	add	r1, sp, #12
  41ac54:	47b8      	blx	r7
  41ac56:	e7ec      	b.n	41ac32 <_wcrtomb_r+0x26>
  41ac58:	20001028 	.word	0x20001028

0041ac5c <__ascii_wctomb>:
  41ac5c:	b121      	cbz	r1, 41ac68 <__ascii_wctomb+0xc>
  41ac5e:	2aff      	cmp	r2, #255	; 0xff
  41ac60:	d804      	bhi.n	41ac6c <__ascii_wctomb+0x10>
  41ac62:	700a      	strb	r2, [r1, #0]
  41ac64:	2001      	movs	r0, #1
  41ac66:	4770      	bx	lr
  41ac68:	4608      	mov	r0, r1
  41ac6a:	4770      	bx	lr
  41ac6c:	238a      	movs	r3, #138	; 0x8a
  41ac6e:	6003      	str	r3, [r0, #0]
  41ac70:	f04f 30ff 	mov.w	r0, #4294967295
  41ac74:	4770      	bx	lr
  41ac76:	bf00      	nop

0041ac78 <__register_exitproc>:
  41ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
  41ac7a:	4c27      	ldr	r4, [pc, #156]	; (41ad18 <__register_exitproc+0xa0>)
  41ac7c:	6826      	ldr	r6, [r4, #0]
  41ac7e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  41ac82:	b085      	sub	sp, #20
  41ac84:	4607      	mov	r7, r0
  41ac86:	2c00      	cmp	r4, #0
  41ac88:	d041      	beq.n	41ad0e <__register_exitproc+0x96>
  41ac8a:	6865      	ldr	r5, [r4, #4]
  41ac8c:	2d1f      	cmp	r5, #31
  41ac8e:	dd1e      	ble.n	41acce <__register_exitproc+0x56>
  41ac90:	4822      	ldr	r0, [pc, #136]	; (41ad1c <__register_exitproc+0xa4>)
  41ac92:	b918      	cbnz	r0, 41ac9c <__register_exitproc+0x24>
  41ac94:	f04f 30ff 	mov.w	r0, #4294967295
  41ac98:	b005      	add	sp, #20
  41ac9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41ac9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  41aca0:	9103      	str	r1, [sp, #12]
  41aca2:	9202      	str	r2, [sp, #8]
  41aca4:	9301      	str	r3, [sp, #4]
  41aca6:	f7f7 feb3 	bl	412a10 <malloc>
  41acaa:	9903      	ldr	r1, [sp, #12]
  41acac:	9a02      	ldr	r2, [sp, #8]
  41acae:	9b01      	ldr	r3, [sp, #4]
  41acb0:	4604      	mov	r4, r0
  41acb2:	2800      	cmp	r0, #0
  41acb4:	d0ee      	beq.n	41ac94 <__register_exitproc+0x1c>
  41acb6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  41acba:	6025      	str	r5, [r4, #0]
  41acbc:	2000      	movs	r0, #0
  41acbe:	6060      	str	r0, [r4, #4]
  41acc0:	4605      	mov	r5, r0
  41acc2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  41acc6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  41acca:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  41acce:	b93f      	cbnz	r7, 41ace0 <__register_exitproc+0x68>
  41acd0:	1cab      	adds	r3, r5, #2
  41acd2:	2000      	movs	r0, #0
  41acd4:	3501      	adds	r5, #1
  41acd6:	6065      	str	r5, [r4, #4]
  41acd8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  41acdc:	b005      	add	sp, #20
  41acde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41ace0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  41ace4:	f04f 0c01 	mov.w	ip, #1
  41ace8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  41acec:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  41acf0:	fa0c f205 	lsl.w	r2, ip, r5
  41acf4:	4316      	orrs	r6, r2
  41acf6:	2f02      	cmp	r7, #2
  41acf8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  41acfc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  41ad00:	d1e6      	bne.n	41acd0 <__register_exitproc+0x58>
  41ad02:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  41ad06:	431a      	orrs	r2, r3
  41ad08:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  41ad0c:	e7e0      	b.n	41acd0 <__register_exitproc+0x58>
  41ad0e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  41ad12:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  41ad16:	e7b8      	b.n	41ac8a <__register_exitproc+0x12>
  41ad18:	0041dd90 	.word	0x0041dd90
  41ad1c:	00412a11 	.word	0x00412a11

0041ad20 <_calloc_r>:
  41ad20:	b510      	push	{r4, lr}
  41ad22:	fb02 f101 	mul.w	r1, r2, r1
  41ad26:	f7f7 fe83 	bl	412a30 <_malloc_r>
  41ad2a:	4604      	mov	r4, r0
  41ad2c:	b168      	cbz	r0, 41ad4a <_calloc_r+0x2a>
  41ad2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41ad32:	f022 0203 	bic.w	r2, r2, #3
  41ad36:	3a04      	subs	r2, #4
  41ad38:	2a24      	cmp	r2, #36	; 0x24
  41ad3a:	d818      	bhi.n	41ad6e <_calloc_r+0x4e>
  41ad3c:	2a13      	cmp	r2, #19
  41ad3e:	d806      	bhi.n	41ad4e <_calloc_r+0x2e>
  41ad40:	4603      	mov	r3, r0
  41ad42:	2200      	movs	r2, #0
  41ad44:	601a      	str	r2, [r3, #0]
  41ad46:	605a      	str	r2, [r3, #4]
  41ad48:	609a      	str	r2, [r3, #8]
  41ad4a:	4620      	mov	r0, r4
  41ad4c:	bd10      	pop	{r4, pc}
  41ad4e:	2300      	movs	r3, #0
  41ad50:	2a1b      	cmp	r2, #27
  41ad52:	6003      	str	r3, [r0, #0]
  41ad54:	6043      	str	r3, [r0, #4]
  41ad56:	d90f      	bls.n	41ad78 <_calloc_r+0x58>
  41ad58:	2a24      	cmp	r2, #36	; 0x24
  41ad5a:	6083      	str	r3, [r0, #8]
  41ad5c:	60c3      	str	r3, [r0, #12]
  41ad5e:	bf05      	ittet	eq
  41ad60:	6103      	streq	r3, [r0, #16]
  41ad62:	6143      	streq	r3, [r0, #20]
  41ad64:	f100 0310 	addne.w	r3, r0, #16
  41ad68:	f100 0318 	addeq.w	r3, r0, #24
  41ad6c:	e7e9      	b.n	41ad42 <_calloc_r+0x22>
  41ad6e:	2100      	movs	r1, #0
  41ad70:	f7f8 f994 	bl	41309c <memset>
  41ad74:	4620      	mov	r0, r4
  41ad76:	bd10      	pop	{r4, pc}
  41ad78:	f100 0308 	add.w	r3, r0, #8
  41ad7c:	e7e1      	b.n	41ad42 <_calloc_r+0x22>
  41ad7e:	bf00      	nop

0041ad80 <_fclose_r>:
  41ad80:	b570      	push	{r4, r5, r6, lr}
  41ad82:	460c      	mov	r4, r1
  41ad84:	4605      	mov	r5, r0
  41ad86:	b131      	cbz	r1, 41ad96 <_fclose_r+0x16>
  41ad88:	b110      	cbz	r0, 41ad90 <_fclose_r+0x10>
  41ad8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41ad8c:	2b00      	cmp	r3, #0
  41ad8e:	d02f      	beq.n	41adf0 <_fclose_r+0x70>
  41ad90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41ad94:	b90b      	cbnz	r3, 41ad9a <_fclose_r+0x1a>
  41ad96:	2000      	movs	r0, #0
  41ad98:	bd70      	pop	{r4, r5, r6, pc}
  41ad9a:	4628      	mov	r0, r5
  41ad9c:	4621      	mov	r1, r4
  41ad9e:	f7fc ff01 	bl	417ba4 <_fflush_r>
  41ada2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41ada4:	4606      	mov	r6, r0
  41ada6:	b133      	cbz	r3, 41adb6 <_fclose_r+0x36>
  41ada8:	4628      	mov	r0, r5
  41adaa:	69e1      	ldr	r1, [r4, #28]
  41adac:	4798      	blx	r3
  41adae:	2800      	cmp	r0, #0
  41adb0:	bfb8      	it	lt
  41adb2:	f04f 36ff 	movlt.w	r6, #4294967295
  41adb6:	89a3      	ldrh	r3, [r4, #12]
  41adb8:	061b      	lsls	r3, r3, #24
  41adba:	d41c      	bmi.n	41adf6 <_fclose_r+0x76>
  41adbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41adbe:	b141      	cbz	r1, 41add2 <_fclose_r+0x52>
  41adc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41adc4:	4299      	cmp	r1, r3
  41adc6:	d002      	beq.n	41adce <_fclose_r+0x4e>
  41adc8:	4628      	mov	r0, r5
  41adca:	f7fd f849 	bl	417e60 <_free_r>
  41adce:	2300      	movs	r3, #0
  41add0:	6323      	str	r3, [r4, #48]	; 0x30
  41add2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41add4:	b121      	cbz	r1, 41ade0 <_fclose_r+0x60>
  41add6:	4628      	mov	r0, r5
  41add8:	f7fd f842 	bl	417e60 <_free_r>
  41addc:	2300      	movs	r3, #0
  41adde:	6463      	str	r3, [r4, #68]	; 0x44
  41ade0:	f7fc ff76 	bl	417cd0 <__sfp_lock_acquire>
  41ade4:	2300      	movs	r3, #0
  41ade6:	81a3      	strh	r3, [r4, #12]
  41ade8:	f7fc ff74 	bl	417cd4 <__sfp_lock_release>
  41adec:	4630      	mov	r0, r6
  41adee:	bd70      	pop	{r4, r5, r6, pc}
  41adf0:	f7fc fef4 	bl	417bdc <__sinit>
  41adf4:	e7cc      	b.n	41ad90 <_fclose_r+0x10>
  41adf6:	4628      	mov	r0, r5
  41adf8:	6921      	ldr	r1, [r4, #16]
  41adfa:	f7fd f831 	bl	417e60 <_free_r>
  41adfe:	e7dd      	b.n	41adbc <_fclose_r+0x3c>

0041ae00 <fclose>:
  41ae00:	4b02      	ldr	r3, [pc, #8]	; (41ae0c <fclose+0xc>)
  41ae02:	4601      	mov	r1, r0
  41ae04:	6818      	ldr	r0, [r3, #0]
  41ae06:	f7ff bfbb 	b.w	41ad80 <_fclose_r>
  41ae0a:	bf00      	nop
  41ae0c:	20000bb0 	.word	0x20000bb0

0041ae10 <_fstat_r>:
  41ae10:	b538      	push	{r3, r4, r5, lr}
  41ae12:	4c08      	ldr	r4, [pc, #32]	; (41ae34 <_fstat_r+0x24>)
  41ae14:	2300      	movs	r3, #0
  41ae16:	4605      	mov	r5, r0
  41ae18:	4608      	mov	r0, r1
  41ae1a:	4611      	mov	r1, r2
  41ae1c:	6023      	str	r3, [r4, #0]
  41ae1e:	f7f7 f9d3 	bl	4121c8 <_fstat>
  41ae22:	1c43      	adds	r3, r0, #1
  41ae24:	d000      	beq.n	41ae28 <_fstat_r+0x18>
  41ae26:	bd38      	pop	{r3, r4, r5, pc}
  41ae28:	6823      	ldr	r3, [r4, #0]
  41ae2a:	2b00      	cmp	r3, #0
  41ae2c:	d0fb      	beq.n	41ae26 <_fstat_r+0x16>
  41ae2e:	602b      	str	r3, [r5, #0]
  41ae30:	bd38      	pop	{r3, r4, r5, pc}
  41ae32:	bf00      	nop
  41ae34:	200050a8 	.word	0x200050a8

0041ae38 <rshift>:
  41ae38:	6902      	ldr	r2, [r0, #16]
  41ae3a:	114b      	asrs	r3, r1, #5
  41ae3c:	4293      	cmp	r3, r2
  41ae3e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  41ae42:	f100 0814 	add.w	r8, r0, #20
  41ae46:	da28      	bge.n	41ae9a <rshift+0x62>
  41ae48:	f011 0c1f 	ands.w	ip, r1, #31
  41ae4c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  41ae50:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  41ae54:	d028      	beq.n	41aea8 <rshift+0x70>
  41ae56:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  41ae5a:	1d3b      	adds	r3, r7, #4
  41ae5c:	429a      	cmp	r2, r3
  41ae5e:	fa24 f40c 	lsr.w	r4, r4, ip
  41ae62:	f1cc 0120 	rsb	r1, ip, #32
  41ae66:	d935      	bls.n	41aed4 <rshift+0x9c>
  41ae68:	4645      	mov	r5, r8
  41ae6a:	681e      	ldr	r6, [r3, #0]
  41ae6c:	408e      	lsls	r6, r1
  41ae6e:	4334      	orrs	r4, r6
  41ae70:	f845 4b04 	str.w	r4, [r5], #4
  41ae74:	f853 4b04 	ldr.w	r4, [r3], #4
  41ae78:	4293      	cmp	r3, r2
  41ae7a:	fa24 f40c 	lsr.w	r4, r4, ip
  41ae7e:	d3f4      	bcc.n	41ae6a <rshift+0x32>
  41ae80:	1bd3      	subs	r3, r2, r7
  41ae82:	3b05      	subs	r3, #5
  41ae84:	f023 0303 	bic.w	r3, r3, #3
  41ae88:	3304      	adds	r3, #4
  41ae8a:	4443      	add	r3, r8
  41ae8c:	601c      	str	r4, [r3, #0]
  41ae8e:	b104      	cbz	r4, 41ae92 <rshift+0x5a>
  41ae90:	3304      	adds	r3, #4
  41ae92:	ebc8 0303 	rsb	r3, r8, r3
  41ae96:	109b      	asrs	r3, r3, #2
  41ae98:	e016      	b.n	41aec8 <rshift+0x90>
  41ae9a:	2300      	movs	r3, #0
  41ae9c:	6103      	str	r3, [r0, #16]
  41ae9e:	2300      	movs	r3, #0
  41aea0:	6143      	str	r3, [r0, #20]
  41aea2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  41aea6:	4770      	bx	lr
  41aea8:	42ba      	cmp	r2, r7
  41aeaa:	d9f6      	bls.n	41ae9a <rshift+0x62>
  41aeac:	4641      	mov	r1, r8
  41aeae:	463b      	mov	r3, r7
  41aeb0:	f853 4b04 	ldr.w	r4, [r3], #4
  41aeb4:	f841 4b04 	str.w	r4, [r1], #4
  41aeb8:	429a      	cmp	r2, r3
  41aeba:	d8f9      	bhi.n	41aeb0 <rshift+0x78>
  41aebc:	43fb      	mvns	r3, r7
  41aebe:	4413      	add	r3, r2
  41aec0:	f023 0303 	bic.w	r3, r3, #3
  41aec4:	3304      	adds	r3, #4
  41aec6:	109b      	asrs	r3, r3, #2
  41aec8:	6103      	str	r3, [r0, #16]
  41aeca:	2b00      	cmp	r3, #0
  41aecc:	d0e7      	beq.n	41ae9e <rshift+0x66>
  41aece:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  41aed2:	4770      	bx	lr
  41aed4:	4643      	mov	r3, r8
  41aed6:	e7d9      	b.n	41ae8c <rshift+0x54>

0041aed8 <__gethex>:
  41aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41aedc:	b08b      	sub	sp, #44	; 0x2c
  41aede:	4688      	mov	r8, r1
  41aee0:	9206      	str	r2, [sp, #24]
  41aee2:	9309      	str	r3, [sp, #36]	; 0x24
  41aee4:	9007      	str	r0, [sp, #28]
  41aee6:	f7fd fa53 	bl	418390 <_localeconv_r>
  41aeea:	6800      	ldr	r0, [r0, #0]
  41aeec:	9002      	str	r0, [sp, #8]
  41aeee:	f7f8 fc19 	bl	413724 <strlen>
  41aef2:	f8d8 3000 	ldr.w	r3, [r8]
  41aef6:	9902      	ldr	r1, [sp, #8]
  41aef8:	789a      	ldrb	r2, [r3, #2]
  41aefa:	9003      	str	r0, [sp, #12]
  41aefc:	4401      	add	r1, r0
  41aefe:	2a30      	cmp	r2, #48	; 0x30
  41af00:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  41af04:	f103 0502 	add.w	r5, r3, #2
  41af08:	f040 81a6 	bne.w	41b258 <__gethex+0x380>
  41af0c:	3303      	adds	r3, #3
  41af0e:	2700      	movs	r7, #0
  41af10:	461d      	mov	r5, r3
  41af12:	f813 2b01 	ldrb.w	r2, [r3], #1
  41af16:	2a30      	cmp	r2, #48	; 0x30
  41af18:	f107 0701 	add.w	r7, r7, #1
  41af1c:	d0f8      	beq.n	41af10 <__gethex+0x38>
  41af1e:	4eb1      	ldr	r6, [pc, #708]	; (41b1e4 <__gethex+0x30c>)
  41af20:	5cb4      	ldrb	r4, [r6, r2]
  41af22:	2c00      	cmp	r4, #0
  41af24:	f000 80f4 	beq.w	41b110 <__gethex+0x238>
  41af28:	782b      	ldrb	r3, [r5, #0]
  41af2a:	f04f 0900 	mov.w	r9, #0
  41af2e:	5cf3      	ldrb	r3, [r6, r3]
  41af30:	46cb      	mov	fp, r9
  41af32:	2b00      	cmp	r3, #0
  41af34:	f000 8198 	beq.w	41b268 <__gethex+0x390>
  41af38:	1c6b      	adds	r3, r5, #1
  41af3a:	461c      	mov	r4, r3
  41af3c:	3301      	adds	r3, #1
  41af3e:	7822      	ldrb	r2, [r4, #0]
  41af40:	5cb2      	ldrb	r2, [r6, r2]
  41af42:	2a00      	cmp	r2, #0
  41af44:	d1f9      	bne.n	41af3a <__gethex+0x62>
  41af46:	4620      	mov	r0, r4
  41af48:	9902      	ldr	r1, [sp, #8]
  41af4a:	9a03      	ldr	r2, [sp, #12]
  41af4c:	f7f8 fc4c 	bl	4137e8 <strncmp>
  41af50:	b1e0      	cbz	r0, 41af8c <__gethex+0xb4>
  41af52:	7823      	ldrb	r3, [r4, #0]
  41af54:	f1bb 0f00 	cmp.w	fp, #0
  41af58:	f000 816c 	beq.w	41b234 <__gethex+0x35c>
  41af5c:	ebc4 0b0b 	rsb	fp, r4, fp
  41af60:	ea4f 028b 	mov.w	r2, fp, lsl #2
  41af64:	9204      	str	r2, [sp, #16]
  41af66:	2b50      	cmp	r3, #80	; 0x50
  41af68:	f000 809d 	beq.w	41b0a6 <__gethex+0x1ce>
  41af6c:	2b70      	cmp	r3, #112	; 0x70
  41af6e:	f000 809a 	beq.w	41b0a6 <__gethex+0x1ce>
  41af72:	4623      	mov	r3, r4
  41af74:	f8c8 3000 	str.w	r3, [r8]
  41af78:	f1b9 0f00 	cmp.w	r9, #0
  41af7c:	d00c      	beq.n	41af98 <__gethex+0xc0>
  41af7e:	2f00      	cmp	r7, #0
  41af80:	bf0c      	ite	eq
  41af82:	2006      	moveq	r0, #6
  41af84:	2000      	movne	r0, #0
  41af86:	b00b      	add	sp, #44	; 0x2c
  41af88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41af8c:	f1bb 0f00 	cmp.w	fp, #0
  41af90:	f000 818c 	beq.w	41b2ac <__gethex+0x3d4>
  41af94:	7823      	ldrb	r3, [r4, #0]
  41af96:	e7e1      	b.n	41af5c <__gethex+0x84>
  41af98:	1b63      	subs	r3, r4, r5
  41af9a:	3b01      	subs	r3, #1
  41af9c:	2b07      	cmp	r3, #7
  41af9e:	4649      	mov	r1, r9
  41afa0:	dd04      	ble.n	41afac <__gethex+0xd4>
  41afa2:	105b      	asrs	r3, r3, #1
  41afa4:	2b07      	cmp	r3, #7
  41afa6:	f101 0101 	add.w	r1, r1, #1
  41afaa:	dcfa      	bgt.n	41afa2 <__gethex+0xca>
  41afac:	9807      	ldr	r0, [sp, #28]
  41afae:	f7fd fb63 	bl	418678 <_Balloc>
  41afb2:	42a5      	cmp	r5, r4
  41afb4:	f100 0314 	add.w	r3, r0, #20
  41afb8:	9005      	str	r0, [sp, #20]
  41afba:	9308      	str	r3, [sp, #32]
  41afbc:	f080 81cd 	bcs.w	41b35a <__gethex+0x482>
  41afc0:	469b      	mov	fp, r3
  41afc2:	9b03      	ldr	r3, [sp, #12]
  41afc4:	f04f 0900 	mov.w	r9, #0
  41afc8:	464f      	mov	r7, r9
  41afca:	f1c3 0c01 	rsb	ip, r3, #1
  41afce:	e00e      	b.n	41afee <__gethex+0x116>
  41afd0:	2f20      	cmp	r7, #32
  41afd2:	d05f      	beq.n	41b094 <__gethex+0x1bc>
  41afd4:	463a      	mov	r2, r7
  41afd6:	3704      	adds	r7, #4
  41afd8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  41afdc:	5cf3      	ldrb	r3, [r6, r3]
  41afde:	f003 030f 	and.w	r3, r3, #15
  41afe2:	4093      	lsls	r3, r2
  41afe4:	4545      	cmp	r5, r8
  41afe6:	ea49 0903 	orr.w	r9, r9, r3
  41afea:	d21a      	bcs.n	41b022 <__gethex+0x14a>
  41afec:	4644      	mov	r4, r8
  41afee:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  41aff2:	4553      	cmp	r3, sl
  41aff4:	f104 38ff 	add.w	r8, r4, #4294967295
  41aff8:	d1ea      	bne.n	41afd0 <__gethex+0xf8>
  41affa:	eb08 030c 	add.w	r3, r8, ip
  41affe:	429d      	cmp	r5, r3
  41b000:	d8e6      	bhi.n	41afd0 <__gethex+0xf8>
  41b002:	4618      	mov	r0, r3
  41b004:	9902      	ldr	r1, [sp, #8]
  41b006:	9a03      	ldr	r2, [sp, #12]
  41b008:	9301      	str	r3, [sp, #4]
  41b00a:	f8cd c000 	str.w	ip, [sp]
  41b00e:	f7f8 fbeb 	bl	4137e8 <strncmp>
  41b012:	9b01      	ldr	r3, [sp, #4]
  41b014:	f8dd c000 	ldr.w	ip, [sp]
  41b018:	2800      	cmp	r0, #0
  41b01a:	d1d9      	bne.n	41afd0 <__gethex+0xf8>
  41b01c:	4698      	mov	r8, r3
  41b01e:	4545      	cmp	r5, r8
  41b020:	d3e4      	bcc.n	41afec <__gethex+0x114>
  41b022:	f84b 9b04 	str.w	r9, [fp], #4
  41b026:	9b08      	ldr	r3, [sp, #32]
  41b028:	9905      	ldr	r1, [sp, #20]
  41b02a:	ebc3 0b0b 	rsb	fp, r3, fp
  41b02e:	ea4f 03ab 	mov.w	r3, fp, asr #2
  41b032:	4648      	mov	r0, r9
  41b034:	610b      	str	r3, [r1, #16]
  41b036:	015d      	lsls	r5, r3, #5
  41b038:	f7fd fbe6 	bl	418808 <__hi0bits>
  41b03c:	9a06      	ldr	r2, [sp, #24]
  41b03e:	6814      	ldr	r4, [r2, #0]
  41b040:	1a28      	subs	r0, r5, r0
  41b042:	42a0      	cmp	r0, r4
  41b044:	f300 80d0 	bgt.w	41b1e8 <__gethex+0x310>
  41b048:	f2c0 80f7 	blt.w	41b23a <__gethex+0x362>
  41b04c:	2600      	movs	r6, #0
  41b04e:	9806      	ldr	r0, [sp, #24]
  41b050:	9904      	ldr	r1, [sp, #16]
  41b052:	6883      	ldr	r3, [r0, #8]
  41b054:	4299      	cmp	r1, r3
  41b056:	f300 8092 	bgt.w	41b17e <__gethex+0x2a6>
  41b05a:	9806      	ldr	r0, [sp, #24]
  41b05c:	9904      	ldr	r1, [sp, #16]
  41b05e:	6843      	ldr	r3, [r0, #4]
  41b060:	4299      	cmp	r1, r3
  41b062:	f280 80a2 	bge.w	41b1aa <__gethex+0x2d2>
  41b066:	1a5d      	subs	r5, r3, r1
  41b068:	42ac      	cmp	r4, r5
  41b06a:	f300 80ff 	bgt.w	41b26c <__gethex+0x394>
  41b06e:	68c2      	ldr	r2, [r0, #12]
  41b070:	2a02      	cmp	r2, #2
  41b072:	f000 8188 	beq.w	41b386 <__gethex+0x4ae>
  41b076:	2a03      	cmp	r2, #3
  41b078:	f000 8156 	beq.w	41b328 <__gethex+0x450>
  41b07c:	2a01      	cmp	r2, #1
  41b07e:	f000 8173 	beq.w	41b368 <__gethex+0x490>
  41b082:	9807      	ldr	r0, [sp, #28]
  41b084:	9905      	ldr	r1, [sp, #20]
  41b086:	f7fd fb1d 	bl	4186c4 <_Bfree>
  41b08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41b08c:	2300      	movs	r3, #0
  41b08e:	6013      	str	r3, [r2, #0]
  41b090:	2050      	movs	r0, #80	; 0x50
  41b092:	e778      	b.n	41af86 <__gethex+0xae>
  41b094:	f8cb 9000 	str.w	r9, [fp]
  41b098:	f04f 0900 	mov.w	r9, #0
  41b09c:	f10b 0b04 	add.w	fp, fp, #4
  41b0a0:	464a      	mov	r2, r9
  41b0a2:	2704      	movs	r7, #4
  41b0a4:	e798      	b.n	41afd8 <__gethex+0x100>
  41b0a6:	7863      	ldrb	r3, [r4, #1]
  41b0a8:	2b2b      	cmp	r3, #43	; 0x2b
  41b0aa:	f000 8097 	beq.w	41b1dc <__gethex+0x304>
  41b0ae:	2b2d      	cmp	r3, #45	; 0x2d
  41b0b0:	d070      	beq.n	41b194 <__gethex+0x2bc>
  41b0b2:	1c60      	adds	r0, r4, #1
  41b0b4:	f04f 0b00 	mov.w	fp, #0
  41b0b8:	5cf2      	ldrb	r2, [r6, r3]
  41b0ba:	494a      	ldr	r1, [pc, #296]	; (41b1e4 <__gethex+0x30c>)
  41b0bc:	1e53      	subs	r3, r2, #1
  41b0be:	2b18      	cmp	r3, #24
  41b0c0:	f63f af57 	bhi.w	41af72 <__gethex+0x9a>
  41b0c4:	7843      	ldrb	r3, [r0, #1]
  41b0c6:	5cc9      	ldrb	r1, [r1, r3]
  41b0c8:	f101 3cff 	add.w	ip, r1, #4294967295
  41b0cc:	f1bc 0f18 	cmp.w	ip, #24
  41b0d0:	f1a2 0210 	sub.w	r2, r2, #16
  41b0d4:	f100 0301 	add.w	r3, r0, #1
  41b0d8:	d812      	bhi.n	41b100 <__gethex+0x228>
  41b0da:	3002      	adds	r0, #2
  41b0dc:	f890 c000 	ldrb.w	ip, [r0]
  41b0e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  41b0e4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  41b0e8:	f816 100c 	ldrb.w	r1, [r6, ip]
  41b0ec:	f101 3cff 	add.w	ip, r1, #4294967295
  41b0f0:	f1bc 0f18 	cmp.w	ip, #24
  41b0f4:	4603      	mov	r3, r0
  41b0f6:	f1a2 0210 	sub.w	r2, r2, #16
  41b0fa:	f100 0001 	add.w	r0, r0, #1
  41b0fe:	d9ed      	bls.n	41b0dc <__gethex+0x204>
  41b100:	f1bb 0f00 	cmp.w	fp, #0
  41b104:	d000      	beq.n	41b108 <__gethex+0x230>
  41b106:	4252      	negs	r2, r2
  41b108:	9804      	ldr	r0, [sp, #16]
  41b10a:	4410      	add	r0, r2
  41b10c:	9004      	str	r0, [sp, #16]
  41b10e:	e731      	b.n	41af74 <__gethex+0x9c>
  41b110:	4628      	mov	r0, r5
  41b112:	9902      	ldr	r1, [sp, #8]
  41b114:	9a03      	ldr	r2, [sp, #12]
  41b116:	f7f8 fb67 	bl	4137e8 <strncmp>
  41b11a:	2800      	cmp	r0, #0
  41b11c:	d13f      	bne.n	41b19e <__gethex+0x2c6>
  41b11e:	9803      	ldr	r0, [sp, #12]
  41b120:	5c2b      	ldrb	r3, [r5, r0]
  41b122:	5cf2      	ldrb	r2, [r6, r3]
  41b124:	4604      	mov	r4, r0
  41b126:	442c      	add	r4, r5
  41b128:	2a00      	cmp	r2, #0
  41b12a:	f000 8097 	beq.w	41b25c <__gethex+0x384>
  41b12e:	2b30      	cmp	r3, #48	; 0x30
  41b130:	f040 8142 	bne.w	41b3b8 <__gethex+0x4e0>
  41b134:	1c62      	adds	r2, r4, #1
  41b136:	4615      	mov	r5, r2
  41b138:	3201      	adds	r2, #1
  41b13a:	782b      	ldrb	r3, [r5, #0]
  41b13c:	2b30      	cmp	r3, #48	; 0x30
  41b13e:	d0fa      	beq.n	41b136 <__gethex+0x25e>
  41b140:	5cf3      	ldrb	r3, [r6, r3]
  41b142:	f1d3 0901 	rsbs	r9, r3, #1
  41b146:	46a3      	mov	fp, r4
  41b148:	bf38      	it	cc
  41b14a:	f04f 0900 	movcc.w	r9, #0
  41b14e:	2701      	movs	r7, #1
  41b150:	e6ef      	b.n	41af32 <__gethex+0x5a>
  41b152:	4447      	add	r7, r8
  41b154:	f857 0c04 	ldr.w	r0, [r7, #-4]
  41b158:	f7fd fb56 	bl	418808 <__hi0bits>
  41b15c:	f1c4 0320 	rsb	r3, r4, #32
  41b160:	4298      	cmp	r0, r3
  41b162:	f280 80dd 	bge.w	41b320 <__gethex+0x448>
  41b166:	9805      	ldr	r0, [sp, #20]
  41b168:	2101      	movs	r1, #1
  41b16a:	f7ff fe65 	bl	41ae38 <rshift>
  41b16e:	9806      	ldr	r0, [sp, #24]
  41b170:	9904      	ldr	r1, [sp, #16]
  41b172:	6883      	ldr	r3, [r0, #8]
  41b174:	3101      	adds	r1, #1
  41b176:	4299      	cmp	r1, r3
  41b178:	9104      	str	r1, [sp, #16]
  41b17a:	f340 80d1 	ble.w	41b320 <__gethex+0x448>
  41b17e:	9807      	ldr	r0, [sp, #28]
  41b180:	9905      	ldr	r1, [sp, #20]
  41b182:	f7fd fa9f 	bl	4186c4 <_Bfree>
  41b186:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41b188:	2300      	movs	r3, #0
  41b18a:	20a3      	movs	r0, #163	; 0xa3
  41b18c:	6013      	str	r3, [r2, #0]
  41b18e:	b00b      	add	sp, #44	; 0x2c
  41b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b194:	f04f 0b01 	mov.w	fp, #1
  41b198:	78a3      	ldrb	r3, [r4, #2]
  41b19a:	1ca0      	adds	r0, r4, #2
  41b19c:	e78c      	b.n	41b0b8 <__gethex+0x1e0>
  41b19e:	9404      	str	r4, [sp, #16]
  41b1a0:	782b      	ldrb	r3, [r5, #0]
  41b1a2:	462c      	mov	r4, r5
  41b1a4:	f04f 0901 	mov.w	r9, #1
  41b1a8:	e6dd      	b.n	41af66 <__gethex+0x8e>
  41b1aa:	2501      	movs	r5, #1
  41b1ac:	b166      	cbz	r6, 41b1c8 <__gethex+0x2f0>
  41b1ae:	9806      	ldr	r0, [sp, #24]
  41b1b0:	68c3      	ldr	r3, [r0, #12]
  41b1b2:	2b02      	cmp	r3, #2
  41b1b4:	f000 808b 	beq.w	41b2ce <__gethex+0x3f6>
  41b1b8:	2b03      	cmp	r3, #3
  41b1ba:	f000 808c 	beq.w	41b2d6 <__gethex+0x3fe>
  41b1be:	2b01      	cmp	r3, #1
  41b1c0:	f000 80c2 	beq.w	41b348 <__gethex+0x470>
  41b1c4:	f045 0510 	orr.w	r5, r5, #16
  41b1c8:	9814      	ldr	r0, [sp, #80]	; 0x50
  41b1ca:	9b05      	ldr	r3, [sp, #20]
  41b1cc:	6003      	str	r3, [r0, #0]
  41b1ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  41b1d0:	9b04      	ldr	r3, [sp, #16]
  41b1d2:	600b      	str	r3, [r1, #0]
  41b1d4:	4628      	mov	r0, r5
  41b1d6:	b00b      	add	sp, #44	; 0x2c
  41b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b1dc:	f04f 0b00 	mov.w	fp, #0
  41b1e0:	e7da      	b.n	41b198 <__gethex+0x2c0>
  41b1e2:	bf00      	nop
  41b1e4:	0041e0c8 	.word	0x0041e0c8
  41b1e8:	1b05      	subs	r5, r0, r4
  41b1ea:	4629      	mov	r1, r5
  41b1ec:	9805      	ldr	r0, [sp, #20]
  41b1ee:	f7fd fe5f 	bl	418eb0 <__any_on>
  41b1f2:	2800      	cmp	r0, #0
  41b1f4:	d036      	beq.n	41b264 <__gethex+0x38c>
  41b1f6:	1e6b      	subs	r3, r5, #1
  41b1f8:	115a      	asrs	r2, r3, #5
  41b1fa:	9808      	ldr	r0, [sp, #32]
  41b1fc:	f003 011f 	and.w	r1, r3, #31
  41b200:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  41b204:	2601      	movs	r6, #1
  41b206:	fa06 f101 	lsl.w	r1, r6, r1
  41b20a:	4211      	tst	r1, r2
  41b20c:	d00a      	beq.n	41b224 <__gethex+0x34c>
  41b20e:	42b3      	cmp	r3, r6
  41b210:	f340 80a8 	ble.w	41b364 <__gethex+0x48c>
  41b214:	9805      	ldr	r0, [sp, #20]
  41b216:	1ea9      	subs	r1, r5, #2
  41b218:	f7fd fe4a 	bl	418eb0 <__any_on>
  41b21c:	2800      	cmp	r0, #0
  41b21e:	f000 80a1 	beq.w	41b364 <__gethex+0x48c>
  41b222:	2603      	movs	r6, #3
  41b224:	9b04      	ldr	r3, [sp, #16]
  41b226:	9805      	ldr	r0, [sp, #20]
  41b228:	442b      	add	r3, r5
  41b22a:	4629      	mov	r1, r5
  41b22c:	9304      	str	r3, [sp, #16]
  41b22e:	f7ff fe03 	bl	41ae38 <rshift>
  41b232:	e70c      	b.n	41b04e <__gethex+0x176>
  41b234:	f8cd b010 	str.w	fp, [sp, #16]
  41b238:	e695      	b.n	41af66 <__gethex+0x8e>
  41b23a:	1a25      	subs	r5, r4, r0
  41b23c:	9905      	ldr	r1, [sp, #20]
  41b23e:	9807      	ldr	r0, [sp, #28]
  41b240:	462a      	mov	r2, r5
  41b242:	f7fd fc25 	bl	418a90 <__lshift>
  41b246:	9b04      	ldr	r3, [sp, #16]
  41b248:	9005      	str	r0, [sp, #20]
  41b24a:	1b5b      	subs	r3, r3, r5
  41b24c:	9304      	str	r3, [sp, #16]
  41b24e:	f100 0314 	add.w	r3, r0, #20
  41b252:	9308      	str	r3, [sp, #32]
  41b254:	2600      	movs	r6, #0
  41b256:	e6fa      	b.n	41b04e <__gethex+0x176>
  41b258:	2700      	movs	r7, #0
  41b25a:	e660      	b.n	41af1e <__gethex+0x46>
  41b25c:	9204      	str	r2, [sp, #16]
  41b25e:	f04f 0901 	mov.w	r9, #1
  41b262:	e680      	b.n	41af66 <__gethex+0x8e>
  41b264:	4606      	mov	r6, r0
  41b266:	e7dd      	b.n	41b224 <__gethex+0x34c>
  41b268:	462c      	mov	r4, r5
  41b26a:	e66c      	b.n	41af46 <__gethex+0x6e>
  41b26c:	1e6f      	subs	r7, r5, #1
  41b26e:	2e00      	cmp	r6, #0
  41b270:	d158      	bne.n	41b324 <__gethex+0x44c>
  41b272:	2f00      	cmp	r7, #0
  41b274:	dd04      	ble.n	41b280 <__gethex+0x3a8>
  41b276:	9805      	ldr	r0, [sp, #20]
  41b278:	4639      	mov	r1, r7
  41b27a:	f7fd fe19 	bl	418eb0 <__any_on>
  41b27e:	4606      	mov	r6, r0
  41b280:	9808      	ldr	r0, [sp, #32]
  41b282:	117b      	asrs	r3, r7, #5
  41b284:	2201      	movs	r2, #1
  41b286:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41b28a:	9805      	ldr	r0, [sp, #20]
  41b28c:	f007 071f 	and.w	r7, r7, #31
  41b290:	40ba      	lsls	r2, r7
  41b292:	421a      	tst	r2, r3
  41b294:	4629      	mov	r1, r5
  41b296:	bf18      	it	ne
  41b298:	f046 0602 	orrne.w	r6, r6, #2
  41b29c:	f7ff fdcc 	bl	41ae38 <rshift>
  41b2a0:	9b06      	ldr	r3, [sp, #24]
  41b2a2:	685b      	ldr	r3, [r3, #4]
  41b2a4:	9304      	str	r3, [sp, #16]
  41b2a6:	1b64      	subs	r4, r4, r5
  41b2a8:	2502      	movs	r5, #2
  41b2aa:	e77f      	b.n	41b1ac <__gethex+0x2d4>
  41b2ac:	9903      	ldr	r1, [sp, #12]
  41b2ae:	5c63      	ldrb	r3, [r4, r1]
  41b2b0:	5cf2      	ldrb	r2, [r6, r3]
  41b2b2:	468b      	mov	fp, r1
  41b2b4:	44a3      	add	fp, r4
  41b2b6:	2a00      	cmp	r2, #0
  41b2b8:	f000 8081 	beq.w	41b3be <__gethex+0x4e6>
  41b2bc:	f10b 0201 	add.w	r2, fp, #1
  41b2c0:	4614      	mov	r4, r2
  41b2c2:	3201      	adds	r2, #1
  41b2c4:	7823      	ldrb	r3, [r4, #0]
  41b2c6:	5cf1      	ldrb	r1, [r6, r3]
  41b2c8:	2900      	cmp	r1, #0
  41b2ca:	d1f9      	bne.n	41b2c0 <__gethex+0x3e8>
  41b2cc:	e646      	b.n	41af5c <__gethex+0x84>
  41b2ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41b2d0:	f1c2 0201 	rsb	r2, r2, #1
  41b2d4:	9215      	str	r2, [sp, #84]	; 0x54
  41b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41b2d8:	2b00      	cmp	r3, #0
  41b2da:	f43f af73 	beq.w	41b1c4 <__gethex+0x2ec>
  41b2de:	9b05      	ldr	r3, [sp, #20]
  41b2e0:	9f08      	ldr	r7, [sp, #32]
  41b2e2:	691e      	ldr	r6, [r3, #16]
  41b2e4:	9b08      	ldr	r3, [sp, #32]
  41b2e6:	ea4f 0886 	mov.w	r8, r6, lsl #2
  41b2ea:	4447      	add	r7, r8
  41b2ec:	2000      	movs	r0, #0
  41b2ee:	e003      	b.n	41b2f8 <__gethex+0x420>
  41b2f0:	429f      	cmp	r7, r3
  41b2f2:	f843 0c04 	str.w	r0, [r3, #-4]
  41b2f6:	d94a      	bls.n	41b38e <__gethex+0x4b6>
  41b2f8:	4619      	mov	r1, r3
  41b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
  41b2fe:	f1b2 3fff 	cmp.w	r2, #4294967295
  41b302:	d0f5      	beq.n	41b2f0 <__gethex+0x418>
  41b304:	3201      	adds	r2, #1
  41b306:	9f08      	ldr	r7, [sp, #32]
  41b308:	600a      	str	r2, [r1, #0]
  41b30a:	2d02      	cmp	r5, #2
  41b30c:	d04d      	beq.n	41b3aa <__gethex+0x4d2>
  41b30e:	9a05      	ldr	r2, [sp, #20]
  41b310:	6913      	ldr	r3, [r2, #16]
  41b312:	429e      	cmp	r6, r3
  41b314:	f6ff af27 	blt.w	41b166 <__gethex+0x28e>
  41b318:	f014 041f 	ands.w	r4, r4, #31
  41b31c:	f47f af19 	bne.w	41b152 <__gethex+0x27a>
  41b320:	2521      	movs	r5, #33	; 0x21
  41b322:	e751      	b.n	41b1c8 <__gethex+0x2f0>
  41b324:	2601      	movs	r6, #1
  41b326:	e7ab      	b.n	41b280 <__gethex+0x3a8>
  41b328:	9915      	ldr	r1, [sp, #84]	; 0x54
  41b32a:	2900      	cmp	r1, #0
  41b32c:	f43f aea9 	beq.w	41b082 <__gethex+0x1aa>
  41b330:	9809      	ldr	r0, [sp, #36]	; 0x24
  41b332:	9914      	ldr	r1, [sp, #80]	; 0x50
  41b334:	6003      	str	r3, [r0, #0]
  41b336:	9b05      	ldr	r3, [sp, #20]
  41b338:	2201      	movs	r2, #1
  41b33a:	611a      	str	r2, [r3, #16]
  41b33c:	9b08      	ldr	r3, [sp, #32]
  41b33e:	601a      	str	r2, [r3, #0]
  41b340:	9b05      	ldr	r3, [sp, #20]
  41b342:	600b      	str	r3, [r1, #0]
  41b344:	2062      	movs	r0, #98	; 0x62
  41b346:	e61e      	b.n	41af86 <__gethex+0xae>
  41b348:	07b2      	lsls	r2, r6, #30
  41b34a:	f57f af3b 	bpl.w	41b1c4 <__gethex+0x2ec>
  41b34e:	9908      	ldr	r1, [sp, #32]
  41b350:	680b      	ldr	r3, [r1, #0]
  41b352:	4333      	orrs	r3, r6
  41b354:	07db      	lsls	r3, r3, #31
  41b356:	d4c2      	bmi.n	41b2de <__gethex+0x406>
  41b358:	e734      	b.n	41b1c4 <__gethex+0x2ec>
  41b35a:	f8dd b020 	ldr.w	fp, [sp, #32]
  41b35e:	f04f 0900 	mov.w	r9, #0
  41b362:	e65e      	b.n	41b022 <__gethex+0x14a>
  41b364:	2602      	movs	r6, #2
  41b366:	e75d      	b.n	41b224 <__gethex+0x34c>
  41b368:	42a5      	cmp	r5, r4
  41b36a:	f47f ae8a 	bne.w	41b082 <__gethex+0x1aa>
  41b36e:	2c01      	cmp	r4, #1
  41b370:	ddde      	ble.n	41b330 <__gethex+0x458>
  41b372:	1e61      	subs	r1, r4, #1
  41b374:	9805      	ldr	r0, [sp, #20]
  41b376:	f7fd fd9b 	bl	418eb0 <__any_on>
  41b37a:	2800      	cmp	r0, #0
  41b37c:	f43f ae81 	beq.w	41b082 <__gethex+0x1aa>
  41b380:	9a06      	ldr	r2, [sp, #24]
  41b382:	6853      	ldr	r3, [r2, #4]
  41b384:	e7d4      	b.n	41b330 <__gethex+0x458>
  41b386:	9815      	ldr	r0, [sp, #84]	; 0x54
  41b388:	2800      	cmp	r0, #0
  41b38a:	d0d1      	beq.n	41b330 <__gethex+0x458>
  41b38c:	e679      	b.n	41b082 <__gethex+0x1aa>
  41b38e:	9805      	ldr	r0, [sp, #20]
  41b390:	6883      	ldr	r3, [r0, #8]
  41b392:	429e      	cmp	r6, r3
  41b394:	da15      	bge.n	41b3c2 <__gethex+0x4ea>
  41b396:	9f08      	ldr	r7, [sp, #32]
  41b398:	4633      	mov	r3, r6
  41b39a:	9805      	ldr	r0, [sp, #20]
  41b39c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41b3a0:	2101      	movs	r1, #1
  41b3a2:	3301      	adds	r3, #1
  41b3a4:	6103      	str	r3, [r0, #16]
  41b3a6:	6151      	str	r1, [r2, #20]
  41b3a8:	e7af      	b.n	41b30a <__gethex+0x432>
  41b3aa:	9906      	ldr	r1, [sp, #24]
  41b3ac:	680b      	ldr	r3, [r1, #0]
  41b3ae:	3b01      	subs	r3, #1
  41b3b0:	42a3      	cmp	r3, r4
  41b3b2:	d01c      	beq.n	41b3ee <__gethex+0x516>
  41b3b4:	2522      	movs	r5, #34	; 0x22
  41b3b6:	e707      	b.n	41b1c8 <__gethex+0x2f0>
  41b3b8:	4613      	mov	r3, r2
  41b3ba:	4625      	mov	r5, r4
  41b3bc:	e6c1      	b.n	41b142 <__gethex+0x26a>
  41b3be:	465c      	mov	r4, fp
  41b3c0:	e5cc      	b.n	41af5c <__gethex+0x84>
  41b3c2:	6841      	ldr	r1, [r0, #4]
  41b3c4:	9807      	ldr	r0, [sp, #28]
  41b3c6:	3101      	adds	r1, #1
  41b3c8:	f7fd f956 	bl	418678 <_Balloc>
  41b3cc:	9905      	ldr	r1, [sp, #20]
  41b3ce:	690b      	ldr	r3, [r1, #16]
  41b3d0:	1c9a      	adds	r2, r3, #2
  41b3d2:	4607      	mov	r7, r0
  41b3d4:	0092      	lsls	r2, r2, #2
  41b3d6:	310c      	adds	r1, #12
  41b3d8:	300c      	adds	r0, #12
  41b3da:	f7f7 fdc5 	bl	412f68 <memcpy>
  41b3de:	9807      	ldr	r0, [sp, #28]
  41b3e0:	9905      	ldr	r1, [sp, #20]
  41b3e2:	f7fd f96f 	bl	4186c4 <_Bfree>
  41b3e6:	9705      	str	r7, [sp, #20]
  41b3e8:	693b      	ldr	r3, [r7, #16]
  41b3ea:	3714      	adds	r7, #20
  41b3ec:	e7d5      	b.n	41b39a <__gethex+0x4c2>
  41b3ee:	1163      	asrs	r3, r4, #5
  41b3f0:	2201      	movs	r2, #1
  41b3f2:	f004 041f 	and.w	r4, r4, #31
  41b3f6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  41b3fa:	40a2      	lsls	r2, r4
  41b3fc:	421a      	tst	r2, r3
  41b3fe:	bf14      	ite	ne
  41b400:	2521      	movne	r5, #33	; 0x21
  41b402:	2522      	moveq	r5, #34	; 0x22
  41b404:	e6e0      	b.n	41b1c8 <__gethex+0x2f0>
  41b406:	bf00      	nop

0041b408 <__hexnan>:
  41b408:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41b40c:	680b      	ldr	r3, [r1, #0]
  41b40e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 41b598 <__hexnan+0x190>
  41b412:	b084      	sub	sp, #16
  41b414:	4691      	mov	r9, r2
  41b416:	115a      	asrs	r2, r3, #5
  41b418:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  41b41c:	f013 031f 	ands.w	r3, r3, #31
  41b420:	9200      	str	r2, [sp, #0]
  41b422:	9001      	str	r0, [sp, #4]
  41b424:	bf1c      	itt	ne
  41b426:	3204      	addne	r2, #4
  41b428:	9200      	strne	r2, [sp, #0]
  41b42a:	9a01      	ldr	r2, [sp, #4]
  41b42c:	9800      	ldr	r0, [sp, #0]
  41b42e:	9303      	str	r3, [sp, #12]
  41b430:	6811      	ldr	r1, [r2, #0]
  41b432:	2300      	movs	r3, #0
  41b434:	f840 3c04 	str.w	r3, [r0, #-4]
  41b438:	469a      	mov	sl, r3
  41b43a:	461d      	mov	r5, r3
  41b43c:	461e      	mov	r6, r3
  41b43e:	784b      	ldrb	r3, [r1, #1]
  41b440:	1f07      	subs	r7, r0, #4
  41b442:	46bc      	mov	ip, r7
  41b444:	4638      	mov	r0, r7
  41b446:	9702      	str	r7, [sp, #8]
  41b448:	b33b      	cbz	r3, 41b49a <__hexnan+0x92>
  41b44a:	f818 2003 	ldrb.w	r2, [r8, r3]
  41b44e:	2a00      	cmp	r2, #0
  41b450:	d148      	bne.n	41b4e4 <__hexnan+0xdc>
  41b452:	2b20      	cmp	r3, #32
  41b454:	d866      	bhi.n	41b524 <__hexnan+0x11c>
  41b456:	42ae      	cmp	r6, r5
  41b458:	dd1b      	ble.n	41b492 <__hexnan+0x8a>
  41b45a:	4560      	cmp	r0, ip
  41b45c:	d215      	bcs.n	41b48a <__hexnan+0x82>
  41b45e:	f1ba 0f07 	cmp.w	sl, #7
  41b462:	dc12      	bgt.n	41b48a <__hexnan+0x82>
  41b464:	f1ca 0a08 	rsb	sl, sl, #8
  41b468:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  41b46c:	6802      	ldr	r2, [r0, #0]
  41b46e:	f1ca 0b20 	rsb	fp, sl, #32
  41b472:	4603      	mov	r3, r0
  41b474:	685c      	ldr	r4, [r3, #4]
  41b476:	fa04 f70b 	lsl.w	r7, r4, fp
  41b47a:	4317      	orrs	r7, r2
  41b47c:	fa24 f20a 	lsr.w	r2, r4, sl
  41b480:	601f      	str	r7, [r3, #0]
  41b482:	f843 2f04 	str.w	r2, [r3, #4]!
  41b486:	459c      	cmp	ip, r3
  41b488:	d8f4      	bhi.n	41b474 <__hexnan+0x6c>
  41b48a:	4548      	cmp	r0, r9
  41b48c:	d841      	bhi.n	41b512 <__hexnan+0x10a>
  41b48e:	f04f 0a08 	mov.w	sl, #8
  41b492:	3101      	adds	r1, #1
  41b494:	784b      	ldrb	r3, [r1, #1]
  41b496:	2b00      	cmp	r3, #0
  41b498:	d1d7      	bne.n	41b44a <__hexnan+0x42>
  41b49a:	9f02      	ldr	r7, [sp, #8]
  41b49c:	2e00      	cmp	r6, #0
  41b49e:	d044      	beq.n	41b52a <__hexnan+0x122>
  41b4a0:	4560      	cmp	r0, ip
  41b4a2:	d202      	bcs.n	41b4aa <__hexnan+0xa2>
  41b4a4:	f1ba 0f07 	cmp.w	sl, #7
  41b4a8:	dd62      	ble.n	41b570 <__hexnan+0x168>
  41b4aa:	4581      	cmp	r9, r0
  41b4ac:	d242      	bcs.n	41b534 <__hexnan+0x12c>
  41b4ae:	464b      	mov	r3, r9
  41b4b0:	f850 2b04 	ldr.w	r2, [r0], #4
  41b4b4:	f843 2b04 	str.w	r2, [r3], #4
  41b4b8:	4287      	cmp	r7, r0
  41b4ba:	d2f9      	bcs.n	41b4b0 <__hexnan+0xa8>
  41b4bc:	2200      	movs	r2, #0
  41b4be:	f843 2b04 	str.w	r2, [r3], #4
  41b4c2:	429f      	cmp	r7, r3
  41b4c4:	d2fb      	bcs.n	41b4be <__hexnan+0xb6>
  41b4c6:	9800      	ldr	r0, [sp, #0]
  41b4c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41b4cc:	b92b      	cbnz	r3, 41b4da <__hexnan+0xd2>
  41b4ce:	45b9      	cmp	r9, r7
  41b4d0:	d041      	beq.n	41b556 <__hexnan+0x14e>
  41b4d2:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  41b4d6:	2b00      	cmp	r3, #0
  41b4d8:	d0f9      	beq.n	41b4ce <__hexnan+0xc6>
  41b4da:	2005      	movs	r0, #5
  41b4dc:	b004      	add	sp, #16
  41b4de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41b4e2:	4770      	bx	lr
  41b4e4:	f10a 0a01 	add.w	sl, sl, #1
  41b4e8:	f1ba 0f08 	cmp.w	sl, #8
  41b4ec:	f106 0601 	add.w	r6, r6, #1
  41b4f0:	dc06      	bgt.n	41b500 <__hexnan+0xf8>
  41b4f2:	6803      	ldr	r3, [r0, #0]
  41b4f4:	011b      	lsls	r3, r3, #4
  41b4f6:	f002 020f 	and.w	r2, r2, #15
  41b4fa:	431a      	orrs	r2, r3
  41b4fc:	6002      	str	r2, [r0, #0]
  41b4fe:	e7c8      	b.n	41b492 <__hexnan+0x8a>
  41b500:	4548      	cmp	r0, r9
  41b502:	d9c6      	bls.n	41b492 <__hexnan+0x8a>
  41b504:	2300      	movs	r3, #0
  41b506:	f840 3c04 	str.w	r3, [r0, #-4]
  41b50a:	f04f 0a01 	mov.w	sl, #1
  41b50e:	3804      	subs	r0, #4
  41b510:	e7f1      	b.n	41b4f6 <__hexnan+0xee>
  41b512:	2300      	movs	r3, #0
  41b514:	f1a0 0c04 	sub.w	ip, r0, #4
  41b518:	f840 3c04 	str.w	r3, [r0, #-4]
  41b51c:	4635      	mov	r5, r6
  41b51e:	4660      	mov	r0, ip
  41b520:	469a      	mov	sl, r3
  41b522:	e7b6      	b.n	41b492 <__hexnan+0x8a>
  41b524:	2b29      	cmp	r3, #41	; 0x29
  41b526:	9f02      	ldr	r7, [sp, #8]
  41b528:	d01c      	beq.n	41b564 <__hexnan+0x15c>
  41b52a:	2004      	movs	r0, #4
  41b52c:	b004      	add	sp, #16
  41b52e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41b532:	4770      	bx	lr
  41b534:	9a03      	ldr	r2, [sp, #12]
  41b536:	2a00      	cmp	r2, #0
  41b538:	d0c5      	beq.n	41b4c6 <__hexnan+0xbe>
  41b53a:	9b03      	ldr	r3, [sp, #12]
  41b53c:	9800      	ldr	r0, [sp, #0]
  41b53e:	f1c3 0220 	rsb	r2, r3, #32
  41b542:	f04f 31ff 	mov.w	r1, #4294967295
  41b546:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41b54a:	fa21 f202 	lsr.w	r2, r1, r2
  41b54e:	4013      	ands	r3, r2
  41b550:	f840 3c04 	str.w	r3, [r0, #-4]
  41b554:	e7ba      	b.n	41b4cc <__hexnan+0xc4>
  41b556:	2301      	movs	r3, #1
  41b558:	2005      	movs	r0, #5
  41b55a:	603b      	str	r3, [r7, #0]
  41b55c:	b004      	add	sp, #16
  41b55e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41b562:	4770      	bx	lr
  41b564:	9a01      	ldr	r2, [sp, #4]
  41b566:	3102      	adds	r1, #2
  41b568:	6011      	str	r1, [r2, #0]
  41b56a:	2e00      	cmp	r6, #0
  41b56c:	d198      	bne.n	41b4a0 <__hexnan+0x98>
  41b56e:	e7dc      	b.n	41b52a <__hexnan+0x122>
  41b570:	f1ca 0508 	rsb	r5, sl, #8
  41b574:	00ad      	lsls	r5, r5, #2
  41b576:	6802      	ldr	r2, [r0, #0]
  41b578:	f1c5 0620 	rsb	r6, r5, #32
  41b57c:	4603      	mov	r3, r0
  41b57e:	6859      	ldr	r1, [r3, #4]
  41b580:	fa01 f406 	lsl.w	r4, r1, r6
  41b584:	4314      	orrs	r4, r2
  41b586:	fa21 f205 	lsr.w	r2, r1, r5
  41b58a:	601c      	str	r4, [r3, #0]
  41b58c:	f843 2f04 	str.w	r2, [r3, #4]!
  41b590:	4563      	cmp	r3, ip
  41b592:	d3f4      	bcc.n	41b57e <__hexnan+0x176>
  41b594:	e789      	b.n	41b4aa <__hexnan+0xa2>
  41b596:	bf00      	nop
  41b598:	0041e0c8 	.word	0x0041e0c8

0041b59c <_isatty_r>:
  41b59c:	b538      	push	{r3, r4, r5, lr}
  41b59e:	4c07      	ldr	r4, [pc, #28]	; (41b5bc <_isatty_r+0x20>)
  41b5a0:	2300      	movs	r3, #0
  41b5a2:	4605      	mov	r5, r0
  41b5a4:	4608      	mov	r0, r1
  41b5a6:	6023      	str	r3, [r4, #0]
  41b5a8:	f7f6 fe1e 	bl	4121e8 <_isatty>
  41b5ac:	1c43      	adds	r3, r0, #1
  41b5ae:	d000      	beq.n	41b5b2 <_isatty_r+0x16>
  41b5b0:	bd38      	pop	{r3, r4, r5, pc}
  41b5b2:	6823      	ldr	r3, [r4, #0]
  41b5b4:	2b00      	cmp	r3, #0
  41b5b6:	d0fb      	beq.n	41b5b0 <_isatty_r+0x14>
  41b5b8:	602b      	str	r3, [r5, #0]
  41b5ba:	bd38      	pop	{r3, r4, r5, pc}
  41b5bc:	200050a8 	.word	0x200050a8

0041b5c0 <__aeabi_drsub>:
  41b5c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  41b5c4:	e002      	b.n	41b5cc <__adddf3>
  41b5c6:	bf00      	nop

0041b5c8 <__aeabi_dsub>:
  41b5c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0041b5cc <__adddf3>:
  41b5cc:	b530      	push	{r4, r5, lr}
  41b5ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  41b5d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  41b5d6:	ea94 0f05 	teq	r4, r5
  41b5da:	bf08      	it	eq
  41b5dc:	ea90 0f02 	teqeq	r0, r2
  41b5e0:	bf1f      	itttt	ne
  41b5e2:	ea54 0c00 	orrsne.w	ip, r4, r0
  41b5e6:	ea55 0c02 	orrsne.w	ip, r5, r2
  41b5ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  41b5ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41b5f2:	f000 80e2 	beq.w	41b7ba <__adddf3+0x1ee>
  41b5f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  41b5fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  41b5fe:	bfb8      	it	lt
  41b600:	426d      	neglt	r5, r5
  41b602:	dd0c      	ble.n	41b61e <__adddf3+0x52>
  41b604:	442c      	add	r4, r5
  41b606:	ea80 0202 	eor.w	r2, r0, r2
  41b60a:	ea81 0303 	eor.w	r3, r1, r3
  41b60e:	ea82 0000 	eor.w	r0, r2, r0
  41b612:	ea83 0101 	eor.w	r1, r3, r1
  41b616:	ea80 0202 	eor.w	r2, r0, r2
  41b61a:	ea81 0303 	eor.w	r3, r1, r3
  41b61e:	2d36      	cmp	r5, #54	; 0x36
  41b620:	bf88      	it	hi
  41b622:	bd30      	pophi	{r4, r5, pc}
  41b624:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  41b628:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41b62c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  41b630:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  41b634:	d002      	beq.n	41b63c <__adddf3+0x70>
  41b636:	4240      	negs	r0, r0
  41b638:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41b63c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  41b640:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41b644:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  41b648:	d002      	beq.n	41b650 <__adddf3+0x84>
  41b64a:	4252      	negs	r2, r2
  41b64c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41b650:	ea94 0f05 	teq	r4, r5
  41b654:	f000 80a7 	beq.w	41b7a6 <__adddf3+0x1da>
  41b658:	f1a4 0401 	sub.w	r4, r4, #1
  41b65c:	f1d5 0e20 	rsbs	lr, r5, #32
  41b660:	db0d      	blt.n	41b67e <__adddf3+0xb2>
  41b662:	fa02 fc0e 	lsl.w	ip, r2, lr
  41b666:	fa22 f205 	lsr.w	r2, r2, r5
  41b66a:	1880      	adds	r0, r0, r2
  41b66c:	f141 0100 	adc.w	r1, r1, #0
  41b670:	fa03 f20e 	lsl.w	r2, r3, lr
  41b674:	1880      	adds	r0, r0, r2
  41b676:	fa43 f305 	asr.w	r3, r3, r5
  41b67a:	4159      	adcs	r1, r3
  41b67c:	e00e      	b.n	41b69c <__adddf3+0xd0>
  41b67e:	f1a5 0520 	sub.w	r5, r5, #32
  41b682:	f10e 0e20 	add.w	lr, lr, #32
  41b686:	2a01      	cmp	r2, #1
  41b688:	fa03 fc0e 	lsl.w	ip, r3, lr
  41b68c:	bf28      	it	cs
  41b68e:	f04c 0c02 	orrcs.w	ip, ip, #2
  41b692:	fa43 f305 	asr.w	r3, r3, r5
  41b696:	18c0      	adds	r0, r0, r3
  41b698:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  41b69c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41b6a0:	d507      	bpl.n	41b6b2 <__adddf3+0xe6>
  41b6a2:	f04f 0e00 	mov.w	lr, #0
  41b6a6:	f1dc 0c00 	rsbs	ip, ip, #0
  41b6aa:	eb7e 0000 	sbcs.w	r0, lr, r0
  41b6ae:	eb6e 0101 	sbc.w	r1, lr, r1
  41b6b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41b6b6:	d31b      	bcc.n	41b6f0 <__adddf3+0x124>
  41b6b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  41b6bc:	d30c      	bcc.n	41b6d8 <__adddf3+0x10c>
  41b6be:	0849      	lsrs	r1, r1, #1
  41b6c0:	ea5f 0030 	movs.w	r0, r0, rrx
  41b6c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  41b6c8:	f104 0401 	add.w	r4, r4, #1
  41b6cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  41b6d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  41b6d4:	f080 809a 	bcs.w	41b80c <__adddf3+0x240>
  41b6d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  41b6dc:	bf08      	it	eq
  41b6de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41b6e2:	f150 0000 	adcs.w	r0, r0, #0
  41b6e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41b6ea:	ea41 0105 	orr.w	r1, r1, r5
  41b6ee:	bd30      	pop	{r4, r5, pc}
  41b6f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  41b6f4:	4140      	adcs	r0, r0
  41b6f6:	eb41 0101 	adc.w	r1, r1, r1
  41b6fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41b6fe:	f1a4 0401 	sub.w	r4, r4, #1
  41b702:	d1e9      	bne.n	41b6d8 <__adddf3+0x10c>
  41b704:	f091 0f00 	teq	r1, #0
  41b708:	bf04      	itt	eq
  41b70a:	4601      	moveq	r1, r0
  41b70c:	2000      	moveq	r0, #0
  41b70e:	fab1 f381 	clz	r3, r1
  41b712:	bf08      	it	eq
  41b714:	3320      	addeq	r3, #32
  41b716:	f1a3 030b 	sub.w	r3, r3, #11
  41b71a:	f1b3 0220 	subs.w	r2, r3, #32
  41b71e:	da0c      	bge.n	41b73a <__adddf3+0x16e>
  41b720:	320c      	adds	r2, #12
  41b722:	dd08      	ble.n	41b736 <__adddf3+0x16a>
  41b724:	f102 0c14 	add.w	ip, r2, #20
  41b728:	f1c2 020c 	rsb	r2, r2, #12
  41b72c:	fa01 f00c 	lsl.w	r0, r1, ip
  41b730:	fa21 f102 	lsr.w	r1, r1, r2
  41b734:	e00c      	b.n	41b750 <__adddf3+0x184>
  41b736:	f102 0214 	add.w	r2, r2, #20
  41b73a:	bfd8      	it	le
  41b73c:	f1c2 0c20 	rsble	ip, r2, #32
  41b740:	fa01 f102 	lsl.w	r1, r1, r2
  41b744:	fa20 fc0c 	lsr.w	ip, r0, ip
  41b748:	bfdc      	itt	le
  41b74a:	ea41 010c 	orrle.w	r1, r1, ip
  41b74e:	4090      	lslle	r0, r2
  41b750:	1ae4      	subs	r4, r4, r3
  41b752:	bfa2      	ittt	ge
  41b754:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  41b758:	4329      	orrge	r1, r5
  41b75a:	bd30      	popge	{r4, r5, pc}
  41b75c:	ea6f 0404 	mvn.w	r4, r4
  41b760:	3c1f      	subs	r4, #31
  41b762:	da1c      	bge.n	41b79e <__adddf3+0x1d2>
  41b764:	340c      	adds	r4, #12
  41b766:	dc0e      	bgt.n	41b786 <__adddf3+0x1ba>
  41b768:	f104 0414 	add.w	r4, r4, #20
  41b76c:	f1c4 0220 	rsb	r2, r4, #32
  41b770:	fa20 f004 	lsr.w	r0, r0, r4
  41b774:	fa01 f302 	lsl.w	r3, r1, r2
  41b778:	ea40 0003 	orr.w	r0, r0, r3
  41b77c:	fa21 f304 	lsr.w	r3, r1, r4
  41b780:	ea45 0103 	orr.w	r1, r5, r3
  41b784:	bd30      	pop	{r4, r5, pc}
  41b786:	f1c4 040c 	rsb	r4, r4, #12
  41b78a:	f1c4 0220 	rsb	r2, r4, #32
  41b78e:	fa20 f002 	lsr.w	r0, r0, r2
  41b792:	fa01 f304 	lsl.w	r3, r1, r4
  41b796:	ea40 0003 	orr.w	r0, r0, r3
  41b79a:	4629      	mov	r1, r5
  41b79c:	bd30      	pop	{r4, r5, pc}
  41b79e:	fa21 f004 	lsr.w	r0, r1, r4
  41b7a2:	4629      	mov	r1, r5
  41b7a4:	bd30      	pop	{r4, r5, pc}
  41b7a6:	f094 0f00 	teq	r4, #0
  41b7aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  41b7ae:	bf06      	itte	eq
  41b7b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  41b7b4:	3401      	addeq	r4, #1
  41b7b6:	3d01      	subne	r5, #1
  41b7b8:	e74e      	b.n	41b658 <__adddf3+0x8c>
  41b7ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41b7be:	bf18      	it	ne
  41b7c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41b7c4:	d029      	beq.n	41b81a <__adddf3+0x24e>
  41b7c6:	ea94 0f05 	teq	r4, r5
  41b7ca:	bf08      	it	eq
  41b7cc:	ea90 0f02 	teqeq	r0, r2
  41b7d0:	d005      	beq.n	41b7de <__adddf3+0x212>
  41b7d2:	ea54 0c00 	orrs.w	ip, r4, r0
  41b7d6:	bf04      	itt	eq
  41b7d8:	4619      	moveq	r1, r3
  41b7da:	4610      	moveq	r0, r2
  41b7dc:	bd30      	pop	{r4, r5, pc}
  41b7de:	ea91 0f03 	teq	r1, r3
  41b7e2:	bf1e      	ittt	ne
  41b7e4:	2100      	movne	r1, #0
  41b7e6:	2000      	movne	r0, #0
  41b7e8:	bd30      	popne	{r4, r5, pc}
  41b7ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41b7ee:	d105      	bne.n	41b7fc <__adddf3+0x230>
  41b7f0:	0040      	lsls	r0, r0, #1
  41b7f2:	4149      	adcs	r1, r1
  41b7f4:	bf28      	it	cs
  41b7f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41b7fa:	bd30      	pop	{r4, r5, pc}
  41b7fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  41b800:	bf3c      	itt	cc
  41b802:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  41b806:	bd30      	popcc	{r4, r5, pc}
  41b808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41b80c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  41b810:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41b814:	f04f 0000 	mov.w	r0, #0
  41b818:	bd30      	pop	{r4, r5, pc}
  41b81a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41b81e:	bf1a      	itte	ne
  41b820:	4619      	movne	r1, r3
  41b822:	4610      	movne	r0, r2
  41b824:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  41b828:	bf1c      	itt	ne
  41b82a:	460b      	movne	r3, r1
  41b82c:	4602      	movne	r2, r0
  41b82e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41b832:	bf06      	itte	eq
  41b834:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  41b838:	ea91 0f03 	teqeq	r1, r3
  41b83c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  41b840:	bd30      	pop	{r4, r5, pc}
  41b842:	bf00      	nop

0041b844 <__aeabi_ui2d>:
  41b844:	f090 0f00 	teq	r0, #0
  41b848:	bf04      	itt	eq
  41b84a:	2100      	moveq	r1, #0
  41b84c:	4770      	bxeq	lr
  41b84e:	b530      	push	{r4, r5, lr}
  41b850:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41b854:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41b858:	f04f 0500 	mov.w	r5, #0
  41b85c:	f04f 0100 	mov.w	r1, #0
  41b860:	e750      	b.n	41b704 <__adddf3+0x138>
  41b862:	bf00      	nop

0041b864 <__aeabi_i2d>:
  41b864:	f090 0f00 	teq	r0, #0
  41b868:	bf04      	itt	eq
  41b86a:	2100      	moveq	r1, #0
  41b86c:	4770      	bxeq	lr
  41b86e:	b530      	push	{r4, r5, lr}
  41b870:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41b874:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41b878:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  41b87c:	bf48      	it	mi
  41b87e:	4240      	negmi	r0, r0
  41b880:	f04f 0100 	mov.w	r1, #0
  41b884:	e73e      	b.n	41b704 <__adddf3+0x138>
  41b886:	bf00      	nop

0041b888 <__aeabi_f2d>:
  41b888:	0042      	lsls	r2, r0, #1
  41b88a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  41b88e:	ea4f 0131 	mov.w	r1, r1, rrx
  41b892:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41b896:	bf1f      	itttt	ne
  41b898:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  41b89c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41b8a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  41b8a4:	4770      	bxne	lr
  41b8a6:	f092 0f00 	teq	r2, #0
  41b8aa:	bf14      	ite	ne
  41b8ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41b8b0:	4770      	bxeq	lr
  41b8b2:	b530      	push	{r4, r5, lr}
  41b8b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  41b8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41b8bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41b8c0:	e720      	b.n	41b704 <__adddf3+0x138>
  41b8c2:	bf00      	nop

0041b8c4 <__aeabi_ul2d>:
  41b8c4:	ea50 0201 	orrs.w	r2, r0, r1
  41b8c8:	bf08      	it	eq
  41b8ca:	4770      	bxeq	lr
  41b8cc:	b530      	push	{r4, r5, lr}
  41b8ce:	f04f 0500 	mov.w	r5, #0
  41b8d2:	e00a      	b.n	41b8ea <__aeabi_l2d+0x16>

0041b8d4 <__aeabi_l2d>:
  41b8d4:	ea50 0201 	orrs.w	r2, r0, r1
  41b8d8:	bf08      	it	eq
  41b8da:	4770      	bxeq	lr
  41b8dc:	b530      	push	{r4, r5, lr}
  41b8de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  41b8e2:	d502      	bpl.n	41b8ea <__aeabi_l2d+0x16>
  41b8e4:	4240      	negs	r0, r0
  41b8e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41b8ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41b8ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41b8f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  41b8f6:	f43f aedc 	beq.w	41b6b2 <__adddf3+0xe6>
  41b8fa:	f04f 0203 	mov.w	r2, #3
  41b8fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41b902:	bf18      	it	ne
  41b904:	3203      	addne	r2, #3
  41b906:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41b90a:	bf18      	it	ne
  41b90c:	3203      	addne	r2, #3
  41b90e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  41b912:	f1c2 0320 	rsb	r3, r2, #32
  41b916:	fa00 fc03 	lsl.w	ip, r0, r3
  41b91a:	fa20 f002 	lsr.w	r0, r0, r2
  41b91e:	fa01 fe03 	lsl.w	lr, r1, r3
  41b922:	ea40 000e 	orr.w	r0, r0, lr
  41b926:	fa21 f102 	lsr.w	r1, r1, r2
  41b92a:	4414      	add	r4, r2
  41b92c:	e6c1      	b.n	41b6b2 <__adddf3+0xe6>
  41b92e:	bf00      	nop

0041b930 <__aeabi_dmul>:
  41b930:	b570      	push	{r4, r5, r6, lr}
  41b932:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41b936:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41b93a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41b93e:	bf1d      	ittte	ne
  41b940:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41b944:	ea94 0f0c 	teqne	r4, ip
  41b948:	ea95 0f0c 	teqne	r5, ip
  41b94c:	f000 f8de 	bleq	41bb0c <__aeabi_dmul+0x1dc>
  41b950:	442c      	add	r4, r5
  41b952:	ea81 0603 	eor.w	r6, r1, r3
  41b956:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  41b95a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  41b95e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41b962:	bf18      	it	ne
  41b964:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  41b968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41b96c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  41b970:	d038      	beq.n	41b9e4 <__aeabi_dmul+0xb4>
  41b972:	fba0 ce02 	umull	ip, lr, r0, r2
  41b976:	f04f 0500 	mov.w	r5, #0
  41b97a:	fbe1 e502 	umlal	lr, r5, r1, r2
  41b97e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41b982:	fbe0 e503 	umlal	lr, r5, r0, r3
  41b986:	f04f 0600 	mov.w	r6, #0
  41b98a:	fbe1 5603 	umlal	r5, r6, r1, r3
  41b98e:	f09c 0f00 	teq	ip, #0
  41b992:	bf18      	it	ne
  41b994:	f04e 0e01 	orrne.w	lr, lr, #1
  41b998:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  41b99c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  41b9a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  41b9a4:	d204      	bcs.n	41b9b0 <__aeabi_dmul+0x80>
  41b9a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  41b9aa:	416d      	adcs	r5, r5
  41b9ac:	eb46 0606 	adc.w	r6, r6, r6
  41b9b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  41b9b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  41b9b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  41b9bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  41b9c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  41b9c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41b9c8:	bf88      	it	hi
  41b9ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41b9ce:	d81e      	bhi.n	41ba0e <__aeabi_dmul+0xde>
  41b9d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  41b9d4:	bf08      	it	eq
  41b9d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  41b9da:	f150 0000 	adcs.w	r0, r0, #0
  41b9de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41b9e2:	bd70      	pop	{r4, r5, r6, pc}
  41b9e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  41b9e8:	ea46 0101 	orr.w	r1, r6, r1
  41b9ec:	ea40 0002 	orr.w	r0, r0, r2
  41b9f0:	ea81 0103 	eor.w	r1, r1, r3
  41b9f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  41b9f8:	bfc2      	ittt	gt
  41b9fa:	ebd4 050c 	rsbsgt	r5, r4, ip
  41b9fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41ba02:	bd70      	popgt	{r4, r5, r6, pc}
  41ba04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41ba08:	f04f 0e00 	mov.w	lr, #0
  41ba0c:	3c01      	subs	r4, #1
  41ba0e:	f300 80ab 	bgt.w	41bb68 <__aeabi_dmul+0x238>
  41ba12:	f114 0f36 	cmn.w	r4, #54	; 0x36
  41ba16:	bfde      	ittt	le
  41ba18:	2000      	movle	r0, #0
  41ba1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41ba1e:	bd70      	pople	{r4, r5, r6, pc}
  41ba20:	f1c4 0400 	rsb	r4, r4, #0
  41ba24:	3c20      	subs	r4, #32
  41ba26:	da35      	bge.n	41ba94 <__aeabi_dmul+0x164>
  41ba28:	340c      	adds	r4, #12
  41ba2a:	dc1b      	bgt.n	41ba64 <__aeabi_dmul+0x134>
  41ba2c:	f104 0414 	add.w	r4, r4, #20
  41ba30:	f1c4 0520 	rsb	r5, r4, #32
  41ba34:	fa00 f305 	lsl.w	r3, r0, r5
  41ba38:	fa20 f004 	lsr.w	r0, r0, r4
  41ba3c:	fa01 f205 	lsl.w	r2, r1, r5
  41ba40:	ea40 0002 	orr.w	r0, r0, r2
  41ba44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  41ba48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41ba4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41ba50:	fa21 f604 	lsr.w	r6, r1, r4
  41ba54:	eb42 0106 	adc.w	r1, r2, r6
  41ba58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41ba5c:	bf08      	it	eq
  41ba5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41ba62:	bd70      	pop	{r4, r5, r6, pc}
  41ba64:	f1c4 040c 	rsb	r4, r4, #12
  41ba68:	f1c4 0520 	rsb	r5, r4, #32
  41ba6c:	fa00 f304 	lsl.w	r3, r0, r4
  41ba70:	fa20 f005 	lsr.w	r0, r0, r5
  41ba74:	fa01 f204 	lsl.w	r2, r1, r4
  41ba78:	ea40 0002 	orr.w	r0, r0, r2
  41ba7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41ba80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41ba84:	f141 0100 	adc.w	r1, r1, #0
  41ba88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41ba8c:	bf08      	it	eq
  41ba8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41ba92:	bd70      	pop	{r4, r5, r6, pc}
  41ba94:	f1c4 0520 	rsb	r5, r4, #32
  41ba98:	fa00 f205 	lsl.w	r2, r0, r5
  41ba9c:	ea4e 0e02 	orr.w	lr, lr, r2
  41baa0:	fa20 f304 	lsr.w	r3, r0, r4
  41baa4:	fa01 f205 	lsl.w	r2, r1, r5
  41baa8:	ea43 0302 	orr.w	r3, r3, r2
  41baac:	fa21 f004 	lsr.w	r0, r1, r4
  41bab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41bab4:	fa21 f204 	lsr.w	r2, r1, r4
  41bab8:	ea20 0002 	bic.w	r0, r0, r2
  41babc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  41bac0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41bac4:	bf08      	it	eq
  41bac6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41baca:	bd70      	pop	{r4, r5, r6, pc}
  41bacc:	f094 0f00 	teq	r4, #0
  41bad0:	d10f      	bne.n	41baf2 <__aeabi_dmul+0x1c2>
  41bad2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  41bad6:	0040      	lsls	r0, r0, #1
  41bad8:	eb41 0101 	adc.w	r1, r1, r1
  41badc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41bae0:	bf08      	it	eq
  41bae2:	3c01      	subeq	r4, #1
  41bae4:	d0f7      	beq.n	41bad6 <__aeabi_dmul+0x1a6>
  41bae6:	ea41 0106 	orr.w	r1, r1, r6
  41baea:	f095 0f00 	teq	r5, #0
  41baee:	bf18      	it	ne
  41baf0:	4770      	bxne	lr
  41baf2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  41baf6:	0052      	lsls	r2, r2, #1
  41baf8:	eb43 0303 	adc.w	r3, r3, r3
  41bafc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  41bb00:	bf08      	it	eq
  41bb02:	3d01      	subeq	r5, #1
  41bb04:	d0f7      	beq.n	41baf6 <__aeabi_dmul+0x1c6>
  41bb06:	ea43 0306 	orr.w	r3, r3, r6
  41bb0a:	4770      	bx	lr
  41bb0c:	ea94 0f0c 	teq	r4, ip
  41bb10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41bb14:	bf18      	it	ne
  41bb16:	ea95 0f0c 	teqne	r5, ip
  41bb1a:	d00c      	beq.n	41bb36 <__aeabi_dmul+0x206>
  41bb1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41bb20:	bf18      	it	ne
  41bb22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41bb26:	d1d1      	bne.n	41bacc <__aeabi_dmul+0x19c>
  41bb28:	ea81 0103 	eor.w	r1, r1, r3
  41bb2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41bb30:	f04f 0000 	mov.w	r0, #0
  41bb34:	bd70      	pop	{r4, r5, r6, pc}
  41bb36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41bb3a:	bf06      	itte	eq
  41bb3c:	4610      	moveq	r0, r2
  41bb3e:	4619      	moveq	r1, r3
  41bb40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41bb44:	d019      	beq.n	41bb7a <__aeabi_dmul+0x24a>
  41bb46:	ea94 0f0c 	teq	r4, ip
  41bb4a:	d102      	bne.n	41bb52 <__aeabi_dmul+0x222>
  41bb4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  41bb50:	d113      	bne.n	41bb7a <__aeabi_dmul+0x24a>
  41bb52:	ea95 0f0c 	teq	r5, ip
  41bb56:	d105      	bne.n	41bb64 <__aeabi_dmul+0x234>
  41bb58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  41bb5c:	bf1c      	itt	ne
  41bb5e:	4610      	movne	r0, r2
  41bb60:	4619      	movne	r1, r3
  41bb62:	d10a      	bne.n	41bb7a <__aeabi_dmul+0x24a>
  41bb64:	ea81 0103 	eor.w	r1, r1, r3
  41bb68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41bb6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41bb70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41bb74:	f04f 0000 	mov.w	r0, #0
  41bb78:	bd70      	pop	{r4, r5, r6, pc}
  41bb7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41bb7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41bb82:	bd70      	pop	{r4, r5, r6, pc}

0041bb84 <__aeabi_ddiv>:
  41bb84:	b570      	push	{r4, r5, r6, lr}
  41bb86:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41bb8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41bb8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41bb92:	bf1d      	ittte	ne
  41bb94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41bb98:	ea94 0f0c 	teqne	r4, ip
  41bb9c:	ea95 0f0c 	teqne	r5, ip
  41bba0:	f000 f8a7 	bleq	41bcf2 <__aeabi_ddiv+0x16e>
  41bba4:	eba4 0405 	sub.w	r4, r4, r5
  41bba8:	ea81 0e03 	eor.w	lr, r1, r3
  41bbac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41bbb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41bbb4:	f000 8088 	beq.w	41bcc8 <__aeabi_ddiv+0x144>
  41bbb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41bbbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  41bbc0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  41bbc4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  41bbc8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  41bbcc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  41bbd0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  41bbd4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  41bbd8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  41bbdc:	429d      	cmp	r5, r3
  41bbde:	bf08      	it	eq
  41bbe0:	4296      	cmpeq	r6, r2
  41bbe2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  41bbe6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41bbea:	d202      	bcs.n	41bbf2 <__aeabi_ddiv+0x6e>
  41bbec:	085b      	lsrs	r3, r3, #1
  41bbee:	ea4f 0232 	mov.w	r2, r2, rrx
  41bbf2:	1ab6      	subs	r6, r6, r2
  41bbf4:	eb65 0503 	sbc.w	r5, r5, r3
  41bbf8:	085b      	lsrs	r3, r3, #1
  41bbfa:	ea4f 0232 	mov.w	r2, r2, rrx
  41bbfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  41bc02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  41bc06:	ebb6 0e02 	subs.w	lr, r6, r2
  41bc0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41bc0e:	bf22      	ittt	cs
  41bc10:	1ab6      	subcs	r6, r6, r2
  41bc12:	4675      	movcs	r5, lr
  41bc14:	ea40 000c 	orrcs.w	r0, r0, ip
  41bc18:	085b      	lsrs	r3, r3, #1
  41bc1a:	ea4f 0232 	mov.w	r2, r2, rrx
  41bc1e:	ebb6 0e02 	subs.w	lr, r6, r2
  41bc22:	eb75 0e03 	sbcs.w	lr, r5, r3
  41bc26:	bf22      	ittt	cs
  41bc28:	1ab6      	subcs	r6, r6, r2
  41bc2a:	4675      	movcs	r5, lr
  41bc2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  41bc30:	085b      	lsrs	r3, r3, #1
  41bc32:	ea4f 0232 	mov.w	r2, r2, rrx
  41bc36:	ebb6 0e02 	subs.w	lr, r6, r2
  41bc3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41bc3e:	bf22      	ittt	cs
  41bc40:	1ab6      	subcs	r6, r6, r2
  41bc42:	4675      	movcs	r5, lr
  41bc44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  41bc48:	085b      	lsrs	r3, r3, #1
  41bc4a:	ea4f 0232 	mov.w	r2, r2, rrx
  41bc4e:	ebb6 0e02 	subs.w	lr, r6, r2
  41bc52:	eb75 0e03 	sbcs.w	lr, r5, r3
  41bc56:	bf22      	ittt	cs
  41bc58:	1ab6      	subcs	r6, r6, r2
  41bc5a:	4675      	movcs	r5, lr
  41bc5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  41bc60:	ea55 0e06 	orrs.w	lr, r5, r6
  41bc64:	d018      	beq.n	41bc98 <__aeabi_ddiv+0x114>
  41bc66:	ea4f 1505 	mov.w	r5, r5, lsl #4
  41bc6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41bc6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41bc72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  41bc76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41bc7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  41bc7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41bc82:	d1c0      	bne.n	41bc06 <__aeabi_ddiv+0x82>
  41bc84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41bc88:	d10b      	bne.n	41bca2 <__aeabi_ddiv+0x11e>
  41bc8a:	ea41 0100 	orr.w	r1, r1, r0
  41bc8e:	f04f 0000 	mov.w	r0, #0
  41bc92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  41bc96:	e7b6      	b.n	41bc06 <__aeabi_ddiv+0x82>
  41bc98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41bc9c:	bf04      	itt	eq
  41bc9e:	4301      	orreq	r1, r0
  41bca0:	2000      	moveq	r0, #0
  41bca2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41bca6:	bf88      	it	hi
  41bca8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41bcac:	f63f aeaf 	bhi.w	41ba0e <__aeabi_dmul+0xde>
  41bcb0:	ebb5 0c03 	subs.w	ip, r5, r3
  41bcb4:	bf04      	itt	eq
  41bcb6:	ebb6 0c02 	subseq.w	ip, r6, r2
  41bcba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41bcbe:	f150 0000 	adcs.w	r0, r0, #0
  41bcc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41bcc6:	bd70      	pop	{r4, r5, r6, pc}
  41bcc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  41bccc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  41bcd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  41bcd4:	bfc2      	ittt	gt
  41bcd6:	ebd4 050c 	rsbsgt	r5, r4, ip
  41bcda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41bcde:	bd70      	popgt	{r4, r5, r6, pc}
  41bce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41bce4:	f04f 0e00 	mov.w	lr, #0
  41bce8:	3c01      	subs	r4, #1
  41bcea:	e690      	b.n	41ba0e <__aeabi_dmul+0xde>
  41bcec:	ea45 0e06 	orr.w	lr, r5, r6
  41bcf0:	e68d      	b.n	41ba0e <__aeabi_dmul+0xde>
  41bcf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41bcf6:	ea94 0f0c 	teq	r4, ip
  41bcfa:	bf08      	it	eq
  41bcfc:	ea95 0f0c 	teqeq	r5, ip
  41bd00:	f43f af3b 	beq.w	41bb7a <__aeabi_dmul+0x24a>
  41bd04:	ea94 0f0c 	teq	r4, ip
  41bd08:	d10a      	bne.n	41bd20 <__aeabi_ddiv+0x19c>
  41bd0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41bd0e:	f47f af34 	bne.w	41bb7a <__aeabi_dmul+0x24a>
  41bd12:	ea95 0f0c 	teq	r5, ip
  41bd16:	f47f af25 	bne.w	41bb64 <__aeabi_dmul+0x234>
  41bd1a:	4610      	mov	r0, r2
  41bd1c:	4619      	mov	r1, r3
  41bd1e:	e72c      	b.n	41bb7a <__aeabi_dmul+0x24a>
  41bd20:	ea95 0f0c 	teq	r5, ip
  41bd24:	d106      	bne.n	41bd34 <__aeabi_ddiv+0x1b0>
  41bd26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41bd2a:	f43f aefd 	beq.w	41bb28 <__aeabi_dmul+0x1f8>
  41bd2e:	4610      	mov	r0, r2
  41bd30:	4619      	mov	r1, r3
  41bd32:	e722      	b.n	41bb7a <__aeabi_dmul+0x24a>
  41bd34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41bd38:	bf18      	it	ne
  41bd3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41bd3e:	f47f aec5 	bne.w	41bacc <__aeabi_dmul+0x19c>
  41bd42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  41bd46:	f47f af0d 	bne.w	41bb64 <__aeabi_dmul+0x234>
  41bd4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41bd4e:	f47f aeeb 	bne.w	41bb28 <__aeabi_dmul+0x1f8>
  41bd52:	e712      	b.n	41bb7a <__aeabi_dmul+0x24a>

0041bd54 <__gedf2>:
  41bd54:	f04f 3cff 	mov.w	ip, #4294967295
  41bd58:	e006      	b.n	41bd68 <__cmpdf2+0x4>
  41bd5a:	bf00      	nop

0041bd5c <__ledf2>:
  41bd5c:	f04f 0c01 	mov.w	ip, #1
  41bd60:	e002      	b.n	41bd68 <__cmpdf2+0x4>
  41bd62:	bf00      	nop

0041bd64 <__cmpdf2>:
  41bd64:	f04f 0c01 	mov.w	ip, #1
  41bd68:	f84d cd04 	str.w	ip, [sp, #-4]!
  41bd6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  41bd70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  41bd74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  41bd78:	bf18      	it	ne
  41bd7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  41bd7e:	d01b      	beq.n	41bdb8 <__cmpdf2+0x54>
  41bd80:	b001      	add	sp, #4
  41bd82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  41bd86:	bf0c      	ite	eq
  41bd88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  41bd8c:	ea91 0f03 	teqne	r1, r3
  41bd90:	bf02      	ittt	eq
  41bd92:	ea90 0f02 	teqeq	r0, r2
  41bd96:	2000      	moveq	r0, #0
  41bd98:	4770      	bxeq	lr
  41bd9a:	f110 0f00 	cmn.w	r0, #0
  41bd9e:	ea91 0f03 	teq	r1, r3
  41bda2:	bf58      	it	pl
  41bda4:	4299      	cmppl	r1, r3
  41bda6:	bf08      	it	eq
  41bda8:	4290      	cmpeq	r0, r2
  41bdaa:	bf2c      	ite	cs
  41bdac:	17d8      	asrcs	r0, r3, #31
  41bdae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  41bdb2:	f040 0001 	orr.w	r0, r0, #1
  41bdb6:	4770      	bx	lr
  41bdb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  41bdbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  41bdc0:	d102      	bne.n	41bdc8 <__cmpdf2+0x64>
  41bdc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  41bdc6:	d107      	bne.n	41bdd8 <__cmpdf2+0x74>
  41bdc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  41bdcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  41bdd0:	d1d6      	bne.n	41bd80 <__cmpdf2+0x1c>
  41bdd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  41bdd6:	d0d3      	beq.n	41bd80 <__cmpdf2+0x1c>
  41bdd8:	f85d 0b04 	ldr.w	r0, [sp], #4
  41bddc:	4770      	bx	lr
  41bdde:	bf00      	nop

0041bde0 <__aeabi_cdrcmple>:
  41bde0:	4684      	mov	ip, r0
  41bde2:	4610      	mov	r0, r2
  41bde4:	4662      	mov	r2, ip
  41bde6:	468c      	mov	ip, r1
  41bde8:	4619      	mov	r1, r3
  41bdea:	4663      	mov	r3, ip
  41bdec:	e000      	b.n	41bdf0 <__aeabi_cdcmpeq>
  41bdee:	bf00      	nop

0041bdf0 <__aeabi_cdcmpeq>:
  41bdf0:	b501      	push	{r0, lr}
  41bdf2:	f7ff ffb7 	bl	41bd64 <__cmpdf2>
  41bdf6:	2800      	cmp	r0, #0
  41bdf8:	bf48      	it	mi
  41bdfa:	f110 0f00 	cmnmi.w	r0, #0
  41bdfe:	bd01      	pop	{r0, pc}

0041be00 <__aeabi_dcmpeq>:
  41be00:	f84d ed08 	str.w	lr, [sp, #-8]!
  41be04:	f7ff fff4 	bl	41bdf0 <__aeabi_cdcmpeq>
  41be08:	bf0c      	ite	eq
  41be0a:	2001      	moveq	r0, #1
  41be0c:	2000      	movne	r0, #0
  41be0e:	f85d fb08 	ldr.w	pc, [sp], #8
  41be12:	bf00      	nop

0041be14 <__aeabi_dcmplt>:
  41be14:	f84d ed08 	str.w	lr, [sp, #-8]!
  41be18:	f7ff ffea 	bl	41bdf0 <__aeabi_cdcmpeq>
  41be1c:	bf34      	ite	cc
  41be1e:	2001      	movcc	r0, #1
  41be20:	2000      	movcs	r0, #0
  41be22:	f85d fb08 	ldr.w	pc, [sp], #8
  41be26:	bf00      	nop

0041be28 <__aeabi_dcmple>:
  41be28:	f84d ed08 	str.w	lr, [sp, #-8]!
  41be2c:	f7ff ffe0 	bl	41bdf0 <__aeabi_cdcmpeq>
  41be30:	bf94      	ite	ls
  41be32:	2001      	movls	r0, #1
  41be34:	2000      	movhi	r0, #0
  41be36:	f85d fb08 	ldr.w	pc, [sp], #8
  41be3a:	bf00      	nop

0041be3c <__aeabi_dcmpge>:
  41be3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  41be40:	f7ff ffce 	bl	41bde0 <__aeabi_cdrcmple>
  41be44:	bf94      	ite	ls
  41be46:	2001      	movls	r0, #1
  41be48:	2000      	movhi	r0, #0
  41be4a:	f85d fb08 	ldr.w	pc, [sp], #8
  41be4e:	bf00      	nop

0041be50 <__aeabi_dcmpgt>:
  41be50:	f84d ed08 	str.w	lr, [sp, #-8]!
  41be54:	f7ff ffc4 	bl	41bde0 <__aeabi_cdrcmple>
  41be58:	bf34      	ite	cc
  41be5a:	2001      	movcc	r0, #1
  41be5c:	2000      	movcs	r0, #0
  41be5e:	f85d fb08 	ldr.w	pc, [sp], #8
  41be62:	bf00      	nop

0041be64 <__aeabi_d2iz>:
  41be64:	ea4f 0241 	mov.w	r2, r1, lsl #1
  41be68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41be6c:	d215      	bcs.n	41be9a <__aeabi_d2iz+0x36>
  41be6e:	d511      	bpl.n	41be94 <__aeabi_d2iz+0x30>
  41be70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41be74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  41be78:	d912      	bls.n	41bea0 <__aeabi_d2iz+0x3c>
  41be7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41be7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41be82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41be86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  41be8a:	fa23 f002 	lsr.w	r0, r3, r2
  41be8e:	bf18      	it	ne
  41be90:	4240      	negne	r0, r0
  41be92:	4770      	bx	lr
  41be94:	f04f 0000 	mov.w	r0, #0
  41be98:	4770      	bx	lr
  41be9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41be9e:	d105      	bne.n	41beac <__aeabi_d2iz+0x48>
  41bea0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  41bea4:	bf08      	it	eq
  41bea6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  41beaa:	4770      	bx	lr
  41beac:	f04f 0000 	mov.w	r0, #0
  41beb0:	4770      	bx	lr
  41beb2:	bf00      	nop

0041beb4 <__aeabi_d2uiz>:
  41beb4:	004a      	lsls	r2, r1, #1
  41beb6:	d211      	bcs.n	41bedc <__aeabi_d2uiz+0x28>
  41beb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41bebc:	d211      	bcs.n	41bee2 <__aeabi_d2uiz+0x2e>
  41bebe:	d50d      	bpl.n	41bedc <__aeabi_d2uiz+0x28>
  41bec0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41bec4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  41bec8:	d40e      	bmi.n	41bee8 <__aeabi_d2uiz+0x34>
  41beca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41bece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41bed2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41bed6:	fa23 f002 	lsr.w	r0, r3, r2
  41beda:	4770      	bx	lr
  41bedc:	f04f 0000 	mov.w	r0, #0
  41bee0:	4770      	bx	lr
  41bee2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41bee6:	d102      	bne.n	41beee <__aeabi_d2uiz+0x3a>
  41bee8:	f04f 30ff 	mov.w	r0, #4294967295
  41beec:	4770      	bx	lr
  41beee:	f04f 0000 	mov.w	r0, #0
  41bef2:	4770      	bx	lr

0041bef4 <__aeabi_d2f>:
  41bef4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  41bef8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  41befc:	bf24      	itt	cs
  41befe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  41bf02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  41bf06:	d90d      	bls.n	41bf24 <__aeabi_d2f+0x30>
  41bf08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  41bf0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  41bf10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  41bf14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  41bf18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  41bf1c:	bf08      	it	eq
  41bf1e:	f020 0001 	biceq.w	r0, r0, #1
  41bf22:	4770      	bx	lr
  41bf24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  41bf28:	d121      	bne.n	41bf6e <__aeabi_d2f+0x7a>
  41bf2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  41bf2e:	bfbc      	itt	lt
  41bf30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  41bf34:	4770      	bxlt	lr
  41bf36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41bf3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  41bf3e:	f1c2 0218 	rsb	r2, r2, #24
  41bf42:	f1c2 0c20 	rsb	ip, r2, #32
  41bf46:	fa10 f30c 	lsls.w	r3, r0, ip
  41bf4a:	fa20 f002 	lsr.w	r0, r0, r2
  41bf4e:	bf18      	it	ne
  41bf50:	f040 0001 	orrne.w	r0, r0, #1
  41bf54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41bf58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  41bf5c:	fa03 fc0c 	lsl.w	ip, r3, ip
  41bf60:	ea40 000c 	orr.w	r0, r0, ip
  41bf64:	fa23 f302 	lsr.w	r3, r3, r2
  41bf68:	ea4f 0343 	mov.w	r3, r3, lsl #1
  41bf6c:	e7cc      	b.n	41bf08 <__aeabi_d2f+0x14>
  41bf6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  41bf72:	d107      	bne.n	41bf84 <__aeabi_d2f+0x90>
  41bf74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  41bf78:	bf1e      	ittt	ne
  41bf7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  41bf7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  41bf82:	4770      	bxne	lr
  41bf84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  41bf88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  41bf8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  41bf90:	4770      	bx	lr
  41bf92:	bf00      	nop

0041bf94 <all_twi_definitions>:
  41bf94:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  41bfa4:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........
  41bfb4:	654c 2064 6954 656d 0072 0000 5551 4e49     Led Timer...QUIN
  41bfc4:	4954 2043 5453 5441 2053 0a0d 0000 0000     TIC STATS ......
  41bfd4:	2551 3a64 0a0d 0000 4309 726f 7572 7470     Q%d:.....Corrupt
  41bfe4:	5020 6361 656b 7374 203a 6425 0a0d 0000      Packets: %d....
  41bff4:	4409 6f72 7070 6465 4220 7479 7365 203a     .Dropped Bytes: 
  41c004:	2020 6425 0a0d 0000 4d49 2055 5453 5441       %d....IMU STAT
  41c014:	2053 0a0d 0000 0000 4d49 2555 3a64 0a0d     S ......IMU%d:..
  41c024:	0000 0000 4909 554d 5020 6572 6573 746e     .....IMU Present
  41c034:	203a 6425 0a0d 0000 4909 554d 4320 6e6f     : %d.....IMU Con
  41c044:	656e 7463 6465 203a 6425 0a0d 0000 0000     nected: %d......
  41c054:	4409 6f72 7070 6465 5020 6361 656b 7374     .Dropped Packets
  41c064:	203a 6425 0a0d 0000 4109 6576 6172 6567     : %d.....Average
  41c074:	5220 2078 6e69 6574 7672 6c61 7428 6369      Rx interval(tic
  41c084:	736b 3a29 2520 0d64 000a 0000 5009 6361     ks): %d......Pac
  41c094:	656b 2074 7852 4320 756f 746e 203a 2020     ket Rx Count:   
  41c0a4:	6425 0a0d 0000 0000 6f54 6174 206c 7942     %d......Total By
  41c0b4:	6574 2073 7257 7469 6574 3a6e 2520 0d64     tes Written: %d.
  41c0c4:	000a 0000 6f54 6174 206c 7246 6d61 7365     ....Total Frames
  41c0d4:	5720 6972 7474 6e65 203a 6425 0d20 000a      Written: %d ...
  41c0e4:	7551 7565 6465 4d20 7365 6173 6567 3a73     Queued Messages:
  41c0f4:	2520 0d64 000a 0000 2d2d 202d 6174 6b73      %d.....--- task
  41c104:	2320 2023 7525 0000 6552 6f63 6472 0a0d      ## %u..Record..
  41c114:	0000 0000 4341 0d4b 000a 0000 6552 6573     ....ACK.....Rese
  41c124:	0d74 000a 6f50 6577 0d72 000a 6547 5374     t...Power...GetS
  41c134:	6174 6574 0a0d 0000 6449 656c 0a0d 0000     tate....Idle....
  41c144:	6552 6f63 6472 6e69 0d67 000a 7245 6f72     Recording...Erro
  41c154:	0d72 000a 6e55 6544 0d66 000a 7541 6f74     r...UnDef...Auto
  41c164:	664f 0066 6553 5374 7265 6169 006c 0000     Off.SetSerial...
  41c174:	414e 4b43 0a0d 0000 6547 5374 7265 6169     NACK....GetSeria
  41c184:	006c 0000 0a0d 4341 0d4b 000a 6e45 6261     l.....ACK...Enab
  41c194:	656c 5343 0056 0000 6553 5274 6365 726f     leCSV...SetRecor
  41c1a4:	4e64 6d61 0065 0000 6547 5274 6365 726f     dName...GetRecor
  41c1b4:	4e64 6d61 0065 0000 7325 0a0d 0000 0000     dName...%s......
  41c1c4:	6544 7562 4567 006e 6843 6365 526b 7373     DebugEn.CheckRss
  41c1d4:	0d69 000a 5352 4953 6c20 7665 6c65 0d3a     i...RSSI level:.
  41c1e4:	000a 0000 7372 4274 454c 0a0d 0000 0000     ....rstBLE......
  41c1f4:	6950 206e 6572 6573 0d74 000a 6964 6173     Pin reset...disa
  41c204:	6c62 5565 5241 7354 0a0d 0000 4155 5452     bleUARTs....UART
  41c214:	2073 6573 2074 7361 4820 6769 2068 6d69     s set as High im
  41c224:	6570 6164 636e 0d65 000a 0000 6573 5474     pedance.....setT
  41c234:	6d69 0065 0d3f 000a 4548 4444 4b4f 204f     ime.?...HEDDOKO 
  41c244:	5242 4941 204e 4150 4b43 2520 0d73 000a     BRAIN PACK %s...
  41c254:	3056 342e 0068 0000 5542 4c49 2044 4144     V0.4h...BUILD DA
  41c264:	4554 203a 7325 2520 0d73 000a 614d 2079     TE: %s %s...May 
  41c274:	3031 3220 3130 0036 3731 333a 3a37 3630     10 2016.17:37:06
  41c284:	0000 0000 5553 5449 4e20 4d55 4542 3a52     ....SUIT NUMBER:
  41c294:	2520 0d73 000a 0000 5553 5449 5420 4d49      %s.....SUIT TIM
  41c2a4:	3a45 2520 2073 0a0d 0000 0000 6c66 7375     E: %s ......flus
  41c2b4:	5568 7261 7374 0a0d 0000 0000 6567 5374     hUarts......getS
  41c2c4:	6174 7374 0a0d 0000 6148 6472 6552 6573     tats....HardRese
  41c2d4:	0d74 000a 6564 7562 5067 6361 656b 7374     t...debugPackets
  41c2e4:	0a0d 0000 6863 614d 2070 0000 6552 6563     ....chMap ..Rece
  41c2f4:	7669 6465 6e20 7765 6320 6168 6e6e 6c65     ived new channel
  41c304:	6d20 7061 7220 7165 6575 7473 0d3a 000a      map request:...
  41c314:	6573 4c74 6465 6f43 666e 6769 0000 0000     setLedConfig....
  41c324:	6567 5374 4364 5664 6c61 6575 0000 0000     getSdCdValue....
  41c334:	6948 6867 0a0d 0000 6f4c 0d77 000a 0000     High....Low.....
  41c344:	6964 6373 6e6f 656e 7463 6d49 7375 0000     disconnectImus..
  41c354:	6f4c 4277 7461 6574 7972 0000 6f4c 2077     LowBattery..Low 
  41c364:	6142 7474 7265 0d79 000a 0000 7750 4272     Battery.....PwrB
  41c374:	6472 734d 3a67 0000 6552 6563 7669 6465     rdMsg:..Received
  41c384:	6920 766e 6c61 6469 6320 6d6f 616d 646e      invalid command
  41c394:	0a0d 0000 6425 252d 2d64 6425 252d 2d64     ....%d-%d-%d-%d-
  41c3a4:	6425 253a 3a64 6425 0a0d 0000 3025 6432     %d:%d:%d....%02d
  41c3b4:	253a 3230 3a64 3025 6432 0000 7257 7469     :%02d:%02d..Writ
  41c3c4:	2065 6f74 6c20 676f 6620 6c69 2065 6166     e to log file fa
  41c3d4:	6c69 6465 203a 6944 6b73 4520 7272 726f     iled: Disk Error
  41c3e4:	0a0d 0000 7257 7469 2065 6f74 6c20 676f     ....Write to log
  41c3f4:	6620 6c69 2065 6166 6c69 6465 0a0d 0000      file failed....
  41c404:	6966 656c 7320 6e79 2063 6166 6c69 6465     file sync failed
  41c414:	0a0d 0000 7257 7469 2065 6f74 6420 6265     ....Write to deb
  41c424:	6775 6c20 676f 6620 6c69 2065 6166 6c69     ug log file fail
  41c434:	6465 203a 6944 6b73 4520 7272 726f 0a0d     ed: Disk Error..
  41c444:	0000 0000 7257 7469 2065 6f74 6420 6265     ....Write to deb
  41c454:	6775 6c20 676f 6620 6c69 2065 6166 6c69     ug log file fail
  41c464:	6465 0a0d 0000 0000 6564 7562 2067 7973     ed......debug sy
  41c474:	636e 6620 6961 656c 2064 6977 6874 6320     nc failed with c
  41c484:	646f 2065 6425 0a0d 0000 0000 6157 7469     ode %d......Wait
  41c494:	6e69 2067 6f66 2072 6573 616d 6870 726f     ing for semaphor
  41c4a4:	2065 6f74 7720 6972 6574 7420 206f 4453     e to write to SD
  41c4b4:	632d 7261 0d64 000a 656e 2077 616d 2078     -card...new max 
  41c4c4:	7277 7469 2065 6954 656d 0a0d 0000 0000     write Time......
  41c4d4:	7257 7469 2065 6166 6c69 6465 203a 7542     Write failed: Bu
  41c4e4:	6666 7265 6620 6c75 0d6c 000a 7257 7469     ffer full...Writ
  41c4f4:	2065 6166 6c69 6465 203a 6573 616d 6870     e failed: semaph
  41c504:	726f 2065 6f6c 6b63 6465 0a0d 0000 0000     ore locked......
  41c514:	3a30 7325 0000 0000 6146 6c69 6465 6f20     0:%s....Failed o
  41c524:	206e 7263 6165 6974 676e 6e20 7765 6d20     n creating new m
  41c534:	766f 6d65 6e65 2074 6f6c 2067 6964 6572     ovement log dire
  41c544:	7463 726f 0d79 000a 7325 252f 0073 0000     ctory...%s/%s...
  41c554:	6146 6c69 6465 6f20 206e 7263 6165 6974     Failed on creati
  41c564:	676e 6e20 7765 6d20 766f 6d65 6e65 2074     ng new movement 
  41c574:	6f6c 2067 6966 656c 0a0d 0000 6425 0a0d     log file....%d..
  41c584:	0000 0000 3025 6435 0a0d 0000 7325 252f     ....%05d....%s/%
  41c594:	5f73 7325 3025 6435 642e 7461 0000 0000     s_%s%05d.dat....
  41c5a4:	7325 252f 5f73 7325 3025 6435 632e 7673     %s/%s_%s%05d.csv
  41c5b4:	0000 0000 0a0d 0000 6f6c 2067 6166 6c69     ........log fail
  41c5c4:	6465 7420 206f 706f 6e65 0a0d 0000 0000     ed to open......
  41c5d4:	6143 276e 2074 6567 2074 6573 616d 6870     Can't get semaph
  41c5e4:	726f 2065 6f74 6f20 6570 206e 6f6c 2067     ore to open log 
  41c5f4:	6966 656c 0a0d 0000 3a30 6f6c 4967 646e     file....0:logInd
  41c604:	7865 642e 7461 0000 0000 0000 0000 0000     ex.dat..........
	...
  41c694:	3a30 6f4d 6576 656d 746e 6f4c 0067 0000     0:MovementLog...
	...
  41c72c:	3a30 6f4d 6576 656d 746e 6f4c 2f67 0000     0:MovementLog/..
  41c73c:	6946 656c 6420 656f 2073 6f6e 2074 7865     File does not ex
  41c74c:	7369 2c74 6320 6572 7461 6e69 2067 656e     ist, creating ne
  41c75c:	2077 6966 656c 0a0d 0000 0000 6544 7562     w file......Debu
  41c76c:	4c67 676f 6620 6c69 2065 706f 6e65 6620     gLog file open f
  41c77c:	6961 656c 0d64 000a 0a0d 0a0d 0a0d 7250     ailed.........Pr
  41c78c:	676f 6172 206d 7473 7261 2074 7242 6961     ogram start Brai
  41c79c:	206e 6150 6b63 5620 2e30 6834 0d20 000a     n Pack V0.4h ...
  41c7ac:	6544 7562 4c67 676f 6f20 6570 0d6e 000a     DebugLog open...
  41c7bc:	6544 7562 4c67 676f 6620 6961 656c 2064     DebugLog failed 
  41c7cc:	6f74 6f20 6570 0d6e 000a 0000 6143 276e     to open.....Can'
  41c7dc:	2074 6567 2074 6573 616d 6870 726f 2065     t get semaphore 
  41c7ec:	6f74 6f20 6570 206e 6544 7562 4c67 676f     to open DebugLog
  41c7fc:	6620 6c69 0d65 000a 6552 616e 656d 6f20      file...Rename o
  41c80c:	2066 6544 7562 2067 6f4c 2067 6966 656c     f Debug Log file
  41c81c:	6620 6961 656c 0d64 000a 0000 6552 6563      failed.....Rece
  41c82c:	7669 6465 5320 5359 455f 4556 544e 505f     ived SYS_EVENT_P
  41c83c:	574f 5245 535f 4957 4354 0d48 000a 0000     OWER_SWITCH.....
  41c84c:	6552 6563 7669 6465 5320 5359 455f 4556     Received SYS_EVE
  41c85c:	544e 525f 5345 5445 535f 4957 4354 0d48     NT_RESET_SWITCH.
  41c86c:	000a 0000 6552 6563 7669 6465 5320 5359     ....Received SYS
  41c87c:	455f 4556 544e 525f 4345 524f 5f44 5753     _EVENT_RECORD_SW
  41c88c:	5449 4843 0a0d 0000 6552 6563 7669 6465     ITCH....Received
  41c89c:	5320 5359 455f 4556 544e 4f5f 4556 5f52      SYS_EVENT_OVER_
  41c8ac:	5543 5252 4e45 0d54 000a 0000 6552 6563     CURRENT.....Rece
  41c8bc:	7669 6465 5320 5359 455f 4556 544e 535f     ived SYS_EVENT_S
  41c8cc:	5f44 4143 4452 445f 5445 4345 0d54 000a     D_CARD_DETECT...
  41c8dc:	6552 6563 7669 6465 5320 5359 455f 4556     Received SYS_EVE
  41c8ec:	544e 535f 5f44 4946 454c 455f 5252 524f     NT_SD_FILE_ERROR
  41c8fc:	0a0d 0000 6552 6563 7669 6465 5320 5359     ....Received SYS
  41c90c:	455f 4556 544e 495f 554d 445f 5349 4f43     _EVENT_IMU_DISCO
  41c91c:	4e4e 4345 0d54 000a 6552 6563 7669 6465     NNECT...Received
  41c92c:	5320 5359 455f 4556 544e 425f 454c 455f      SYS_EVENT_BLE_E
  41c93c:	5252 524f 0a0d 0000 6552 6563 7669 6465     RROR....Received
  41c94c:	5320 5359 455f 4556 544e 4a5f 4341 5f4b      SYS_EVENT_JACK_
  41c95c:	4544 4554 5443 0a0d 0000 0000 6552 6563     DETECT......Rece
  41c96c:	7669 6465 5320 5359 455f 4556 544e 4c5f     ived SYS_EVENT_L
  41c97c:	574f 425f 5441 4554 5952 0a0d 0000 0000     OW_BATTERY......
  41c98c:	6552 6563 7669 6465 5320 5359 455f 4556     Received SYS_EVE
  41c99c:	544e 525f 5345 5445 435f 4d4f 4c50 5445     NT_RESET_COMPLET
  41c9ac:	0d45 000a 6552 6563 7669 6465 5320 5359     E...Received SYS
  41c9bc:	455f 4556 544e 525f 5345 5445 465f 4941     _EVENT_RESET_FAI
  41c9cc:	454c 0d44 000a 0000 6552 6563 7669 6465     LED.....Received
  41c9dc:	5320 5359 455f 4556 544e 505f 574f 5245      SYS_EVENT_POWER
  41c9ec:	555f 5f50 4f43 504d 454c 4554 0a0d 0000     _UP_COMPLETE....
  41c9fc:	6552 6563 7669 6465 5320 5359 455f 4556     Received SYS_EVE
  41ca0c:	544e 475f 5445 415f 4343 4c45 445f 5441     NT_GET_ACCEL_DAT
  41ca1c:	5f41 4f43 504d 454c 4554 0a0d 0000 0000     A_COMPLETE......
  41ca2c:	7543 7272 6e65 2074 7953 7473 6d65 7320     Current System s
  41ca3c:	6174 6574 203a 5953 5f53 5453 5441 5f45     tate: SYS_STATE_
  41ca4c:	464f 0d46 000a 0000 7543 7272 6e65 2074     OFF.....Current 
  41ca5c:	7953 7473 6d65 7320 6174 6574 203a 5953     System state: SY
  41ca6c:	5f53 5453 5441 5f45 4f50 4557 5f52 4f44     S_STATE_POWER_DO
  41ca7c:	4e57 0a0d 0000 0000 7543 7272 6e65 2074     WN......Current 
  41ca8c:	7953 7473 6d65 7320 6174 6574 203a 5953     System state: SY
  41ca9c:	5f53 5453 5441 5f45 4552 4553 0d54 000a     S_STATE_RESET...
  41caac:	7543 7272 6e65 2074 7953 7473 6d65 7320     Current System s
  41cabc:	6174 6574 203a 5953 5f53 5453 5441 5f45     tate: SYS_STATE_
  41cacc:	4449 454c 0a0d 0000 7543 7272 6e65 2074     IDLE....Current 
  41cadc:	7953 7473 6d65 7320 6174 6574 203a 5953     System state: SY
  41caec:	5f53 5453 5441 5f45 4552 4f43 4452 4e49     S_STATE_RECORDIN
  41cafc:	0d47 000a 7543 7272 6e65 2074 7953 7473     G...Current Syst
  41cb0c:	6d65 7320 6174 6574 203a 5953 5f53 5453     em state: SYS_ST
  41cb1c:	5441 5f45 5245 4f52 0d52 000a 7543 7272     ATE_ERROR...Curr
  41cb2c:	6e65 2074 7953 7473 6d65 7320 6174 6574     ent System state
  41cb3c:	203a 5953 5f53 5453 5441 5f45 4547 5f54     : SYS_STATE_GET_
  41cb4c:	4341 4543 5f4c 4144 4154 0a0d 0000 0000     ACCEL_DATA......
  41cb5c:	6954 656d 4f20 7475 5420 6d69 7265 0000     Time Out Timer..
  41cb6c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41cb7c:	7420 6d69 7265 7420 7361 206b 6f63 6564      timer task code
  41cb8c:	2520 0d64 000a 0000 6e61 6520 7272 726f      %d.....an error
  41cb9c:	6820 7361 6f20 6363 7275 6572 2c64 7320      has occurred, s
  41cbac:	6174 6574 6d20 6361 6968 656e 7120 6575     tate machine que
  41cbbc:	6575 6320 6572 7461 6f69 206e 6166 6c69     ue creation fail
  41cbcc:	6465 202e 0a0d 0000 6c53 6565 2070 6f6d     ed. ....Sleep mo
  41cbdc:	6564 6520 616e 6c62 6465 0a0d 0000 0000     de enabled......
  41cbec:	6146 5362 6e65 6573 6920 696e 6974 6c61     FabSense initial
  41cbfc:	7a69 7461 6f69 206e 6166 6c69 6465 0a0d     ization failed..
  41cc0c:	0000 0000 6143 6e6e 746f 6f20 6570 206e     ....Cannot open 
  41cc1c:	656e 2077 6966 656c 7420 206f 7277 7469     new file to writ
  41cc2c:	2065 6572 6f63 6472 0d73 000a 6951 0000     e records...Qi..
  41cc3c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41cc4c:	5120 2030 6e69 7469 7420 7361 206b 0a0d      Q0 init task ..
  41cc5c:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  41cc6c:	6165 6574 5120 2031 6e69 7469 7420 7361     eate Q1 init tas
  41cc7c:	206b 0a0d 0000 0000 6146 6c69 6465 7420     k ......Failed t
  41cc8c:	206f 7263 6165 6574 5120 2032 6e69 7469     o create Q2 init
  41cc9c:	7420 7361 206b 0a0d 0000 0000 7845 7469      task ......Exit
  41ccac:	5320 656c 7065 6d20 646f 0d65 000a 0000      Sleep mode.....
  41ccbc:	4453 6920 736e 7265 2074 6d74 0072 0000     SD insert tmr...
  41cccc:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41ccdc:	5320 2044 6163 6472 7420 6d69 7265 0a0d      SD card timer..
  41ccec:	0000 0000 6143 6472 6920 736e 6174 6c6c     ....Card install
  41ccfc:	4620 4941 0a4c 000d 6c50 6165 6573 7520      FAIL...Please u
  41cd0c:	706e 756c 2067 6e61 2064 6572 702d 756c     nplug and re-plu
  41cd1c:	2067 6874 2065 6163 6472 0a2e 000d 0000     g the card......
  41cd2c:	7245 6f72 3a72 4920 766e 6c61 6469 4420     Error: Invalid D
  41cd3c:	6972 6576 0a0d 0000 3a30 0000 7245 6f72     rive....0:..Erro
  41cd4c:	3a72 4320 6e61 6f6e 2074 6163 636c 6c75     r: Cannot calcul
  41cd5c:	7461 2065 7266 6565 7320 6170 6563 0a0d     ate free space..
  41cd6c:	0000 0000 7245 6f72 3a72 4c20 776f 6420     ....Error: Low d
  41cd7c:	7369 206b 7073 6361 2065 6e6f 5320 2d44     isk space on SD-
  41cd8c:	6163 6472 0a0d 0000 3a30 6573 7474 6e69     card....0:settin
  41cd9c:	7367 642e 7461 0000 6166 6c69 6465 7420     gs.dat..failed t
  41cdac:	206f 6567 2074 6572 6461 7320 7465 6974     o get read setti
  41cdbc:	676e 0d73 000a 0000                         ngs.....

0041cdc4 <sd_mmc_trans_units>:
  41cdc4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0041cde0 <sd_trans_multipliers>:
  41cde0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  41cdf0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  41ce00:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  41ce10:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0041ce20 <mmc_trans_multipliers>:
  41ce20:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  41ce30:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  41ce40:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  41ce50:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  41ce60:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
  41ce70:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
  41ce80:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

0041ce90 <lun_desc>:
  41ce90:	4a1d 0040 4a7d 0040 4ae5 0040 4b4d 0040     .J@.}J@..J@.MK@.
  41cea0:	4b8d 0040 4c1d 0040 4ccd 0040 ce60 0041     .K@..L@..L@.`.A.
  41ceb0:	4a31 0040 4a9d 0040 4b09 0040 4b61 0040     1J@..J@..K@.aK@.
  41cec0:	4ba1 0040 4c41 0040 4cf1 0040 ce78 0041     .K@.AL@..L@.x.A.

0041ced0 <LfnOfs>:
  41ced0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
  41cee0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  41cef0:	5d5b 0000                                   []..

0041cef4 <excvt.4554>:
  41cef4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  41cf04:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  41cf14:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  41cf24:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  41cf34:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  41cf44:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  41cf54:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  41cf64:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0041cf74 <Tbl>:
  41cf74:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  41cf84:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  41cf94:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  41cfa4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  41cfb4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  41cfc4:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  41cfd4:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  41cfe4:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  41cff4:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  41d004:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  41d014:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  41d024:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  41d034:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  41d044:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  41d054:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  41d064:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0041d074 <tbl_lower.4258>:
  41d074:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  41d084:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  41d094:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  41d0a4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  41d0b4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  41d0c4:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  41d0d4:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  41d0e4:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  41d0f4:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  41d104:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  41d114:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  41d124:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  41d134:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  41d144:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  41d154:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  41d164:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  41d174:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  41d184:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  41d194:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  41d1a4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  41d1b4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  41d1c4:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  41d1d4:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  41d1e4:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  41d1f4:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  41d204:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  41d214:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  41d224:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  41d234:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  41d244:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0041d254 <tbl_upper.4259>:
  41d254:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  41d264:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  41d274:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  41d284:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  41d294:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  41d2a4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  41d2b4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  41d2c4:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  41d2d4:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  41d2e4:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  41d2f4:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  41d304:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  41d314:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  41d324:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  41d334:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  41d344:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  41d354:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  41d364:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  41d374:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  41d384:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  41d394:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  41d3a4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  41d3b4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  41d3c4:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  41d3d4:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  41d3e4:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  41d3f4:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  41d404:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  41d414:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  41d424:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  41d434:	4449 454c 0000 0000 0a0d 0000 7325 0909     IDLE........%s..
  41d444:	6325 2509 0975 7525 2509 0d75 000a 0000     %c.%u.%u.%u.....
  41d454:	6d54 2072 7653 0063 c200 0001 0000 0000     Tmr Svc.........
  41d464:	0800 0000 0000 0000 6552 7473 7261 6974     ........Restarti
  41d474:	676e 7320 7379 6574 216d 2121 000d 0000     ng system!!!....
  41d484:	704f 6e65 6e69 2067 4453 4320 7261 2064     Opening SD Card 
  41d494:	6f74 7220 6165 0d64 000a 0000 4646 4646     to read.....FFFF
  41d4a4:	4646 4646 4631 0000 6f4d 6576 656d 746e     FFFF1F..Movement
  41d4b4:	6f4c 0067 6565 0000 7325 2c20 6425 202c     Log.ee..%s ,%d, 
  41d4c4:	7325 2c20 0a0d 0000 6166 6c69 6465 7420     %s ,....failed t
  41d4d4:	206f 6572 6461 7320 7465 6974 676e 0d73     o read settings.
  41d4e4:	000a 0000 0a0d 0000 6425 252c 2c64 7325     ........%d,%d,%s
  41d4f4:	0a0d 0000 6166 6c69 6465 7420 206f 6170     ....failed to pa
  41d504:	7372 2065 4d49 2055 6573 7474 6e69 7367     rse IMU settings
  41d514:	0a0d 0000 6572 6563 7669 6465 6920 636e     ....received inc
  41d524:	726f 6572 7463 6920 756d 6449 0000 0000     orrect imuId....
  41d534:	7325 0a0d 0000 0000 6166 6c69 6465 7420     %s......failed t
  41d544:	206f 7361 6973 6e67 4920 554d 0020 0000     o assign IMU ...
  41d554:	6c43 736f 6e69 2067 6874 2065 6966 656c     Closing the file
  41d564:	0a0d 0000 7245 6f72 3a72 4320 6e61 6f6e     ....Error: Canno
  41d574:	2074 6c43 736f 2065 6966 656c 0a0d 0000     t Close file....
  41d584:	6553 6972 6c61 6e20 6d75 6562 2072 6f6e     Serial number no
  41d594:	2074 6573 0d74 000a 5853 5858 5858 0000     t set...SXXXXX..
  41d5a4:	6166 6c69 6465 7420 206f 6f6c 6461 6e20     failed to load n
  41d5b4:	6d76 7320 7465 6974 676e 0073 6173 6576     vm settings.save
  41d5c4:	2064 766e 206d 6573 7474 6e69 7367 0a0d     d nvm settings..
  41d5d4:	0000 0000 6166 6c69 6465 7420 206f 6173     ....failed to sa
  41d5e4:	6576 6e20 6d76 7320 7465 6974 676e 0d73     ve nvm settings.
  41d5f4:	000a 0000 6e61 6520 7272 726f 6820 7361     ....an error has
  41d604:	6f20 6363 7275 6572 2c64 6420 7461 2061      occurred, data 
  41d614:	6168 646e 656c 2072 7571 7565 2065 6166     handler queue fa
  41d624:	6c69 7275 0d65 000a 7246 6d61 2065 6954     ilure...Frame Ti
  41d634:	656d 4f20 7475 5420 6d69 7265 0000 0000     me Out Timer....
  41d644:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d654:	7420 6d69 7265 7420 7361 0d6b 000a 0000      timer task.....
  41d664:	6f43 6e6e 6365 6974 6e6f 7420 7972 6f20     Connection try o
  41d674:	7475 0a0d 0000 0000 3025 3031 2c64 3025     ut......%010d,%0
  41d684:	7834 002c 5442 2c4e 0000 0000 4146 4154     4x,.BTN,....FATA
  41d694:	3a4c 7520 7261 2074 6f6e 2074 6e69 7469     L: uart not init
  41d6a4:	6169 696c 657a 2064 6f66 2072 5346 0a0d     ialized for FS..
  41d6b4:	0000 0000 3231 3433 4242 4242 4343 4343     ....1234BBBBCCCC
  41d6c4:	4444 4444 4545 4545 0a0d 0000 6c53 6565     DDDDEEEE....Slee
  41d6d4:	2070 6f6d 6564 6520 616e 6c62 6465 0a0d     p mode enabled..
  41d6e4:	0000 0000 6c53 6565 2070 6954 656d 0072     ....Sleep Timer.
  41d6f4:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d704:	7420 6d69 7265 7420 7361 206b 6f63 6564      timer task code
  41d714:	2520 0d64 000a 0000 7953 7473 6d65 5220      %d.....System R
  41d724:	7365 7465 5420 6d69 7265 0000 6552 6573     eset Timer..Rese
  41d734:	2074 7562 7474 6e6f 7420 6d69 7265 0000     t button timer..
  41d744:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d754:	7220 7365 7465 6220 7475 6f74 206e 6974      reset button ti
  41d764:	656d 2072 6174 6b73 6320 646f 2065 6425     mer task code %d
  41d774:	0a0d 0000 3151 0000 6146 6c69 6465 7420     ....Q1..Failed t
  41d784:	206f 7263 6165 6574 5120 2031 6174 6b73     o create Q1 task
  41d794:	6320 646f 2065 6425 0a0d 0000 3251 0000      code %d....Q2..
  41d7a4:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d7b4:	5120 2032 6174 6b73 6320 646f 2065 6425      Q2 task code %d
  41d7c4:	0a0d 0000 3351 0000 6146 6c69 6465 7420     ....Q3..Failed t
  41d7d4:	206f 7263 6165 6574 5120 2033 6174 6b73     o create Q3 task
  41d7e4:	6320 646f 2065 6425 0a0d 0000 5346 0000      code %d....FS..
  41d7f4:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d804:	6620 6261 6972 2063 6573 736e 2065 6174      fabric sense ta
  41d814:	6b73 6320 646f 2065 6425 0a0d 0000 0000     sk code %d......
  41d824:	6d63 0064 6146 6c69 6465 7420 206f 6553     cmd.Failed to Se
  41d834:	6972 6c61 6820 6e61 6c64 7265 7420 7361     rial handler tas
  41d844:	206b 6f63 6564 2520 0d64 000a 4844 0000     k code %d...DH..
  41d854:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41d864:	6420 7461 2061 6168 646e 656c 2072 6174      data handler ta
  41d874:	6b73 6320 646f 2065 6425 0a0d 0000 0000     sk code %d......
  41d884:	4453 0000 6146 6c69 6465 7420 206f 7263     SD..Failed to cr
  41d894:	6165 6574 7320 2064 6163 6472 7420 7361     eate sd card tas
  41d8a4:	206b 6f63 6564 2520 0d64 000a 4d53 0000     k code %d...SM..
  41d8b4:	6146 6c69 6465 7420 206f 7473 7461 2065     Failed to state 
  41d8c4:	616d 6863 6e69 2065 6174 6b73 6320 646f     machine task cod
  41d8d4:	2065 6425 0a0d 0000 5750 5320 2057 7270     e %d....PW SW pr
  41d8e4:	7365 6573 0d64 000a 7953 7473 6d65 7220     essed...System r
  41d8f4:	7365 7465 7420 6972 6767 7265 6465 0a0d     eset triggered..
  41d904:	0000 0000 6552 6f63 6472 7320 6977 6374     ....Record switc
  41d914:	2068 7270 7365 6573 0d64 000a 7551 7565     h pressed...Queu
  41d924:	2065 7546 6c6c 4420 6f72 7070 6465 7020     e Full Dropped p
  41d934:	6361 656b 0d74 000a 6552 6573 2074 7773     acket...Reset sw
  41d944:	7469 6863 7020 6572 7373 6465 0a0d 0000     itch pressed....
  41d954:	614a 6b63 3120 4f20 6576 2072 7563 7272     Jack 1 Over curr
  41d964:	6e65 0d74 000a 0000 614a 6b63 3220 4f20     ent.....Jack 2 O
  41d974:	6576 2072 7563 7272 6e65 0d74 000a 0000     ver current.....
  41d984:	614a 6b63 3120 7220 6d65 766f 6465 0a0d     Jack 1 removed..
  41d994:	0000 0000 614a 6b63 3220 7220 6d65 766f     ....Jack 2 remov
  41d9a4:	6465 0a0d 0000 0000 4453 632d 7261 2064     ed......SD-card 
  41d9b4:	6572 6f6d 6576 0d64 000a 0000 4453 632d     removed.....SD-c
  41d9c4:	7261 2064 6e69 6573 7472 6465 0a0d 0000     ard inserted....
  41d9d4:	7551 6e69 6974 2063 6174 6b73 5120 2030     Quintic task Q0 
  41d9e4:	7473 6361 206b 656e 2077 6968 6867 7720     stack new high w
  41d9f4:	7461 7265 6d20 7261 0d6b 000a 7551 6e69     ater mark...Quin
  41da04:	6974 2063 6174 6b73 5120 2031 7473 6361     tic task Q1 stac
  41da14:	206b 656e 2077 6968 6867 7720 7461 7265     k new high water
  41da24:	6d20 7261 0d6b 000a 7551 6e69 6974 2063      mark...Quintic 
  41da34:	6174 6b73 5120 2032 7473 6361 206b 656e     task Q2 stack ne
  41da44:	2077 6968 6867 7720 7461 7265 6d20 7261     w high water mar
  41da54:	0d6b 000a 6146 7262 6369 5320 6e65 6573     k...Fabric Sense
  41da64:	7420 7361 206b 7473 6361 206b 656e 2077      task stack new 
  41da74:	6968 6867 7720 7461 7265 6d20 7261 0d6b     high water mark.
  41da84:	000a 0000 6f43 6d6d 6e61 2d64 6148 646e     ....Command-Hand
  41da94:	656c 2072 6174 6b73 7320 6174 6b63 6e20     ler task stack n
  41daa4:	7765 6820 6769 2068 6177 6574 2072 616d     ew high water ma
  41dab4:	6b72 0a0d 0000 0000 6144 6174 482d 6e61     rk......Data-Han
  41dac4:	6c64 7265 7420 7361 206b 7473 6361 206b     dler task stack 
  41dad4:	656e 2077 6968 6867 7720 7461 7265 6d20     new high water m
  41dae4:	7261 0d6b 000a 0000 4453 632d 7261 2064     ark.....SD-card 
  41daf4:	6174 6b73 7320 6174 6b63 6e20 7765 6820     task stack new h
  41db04:	6769 2068 6177 6574 2072 616d 6b72 0a0d     igh water mark..
  41db14:	0000 0000 7453 7461 2d65 614d 6863 6e69     ....State-Machin
  41db24:	2065 6174 6b73 7320 6174 6b63 6e20 7765     e task stack new
  41db34:	6820 6769 2068 6177 6574 2072 616d 6b72      high water mark
  41db44:	0a0d 0000 6944 6373 6552 7073 0000 0000     ....DiscResp....
  41db54:	6944 6373 6e6f 656e 7463 6f69 206e 7665     Disconnection ev
  41db64:	6e65 2074 7266 6d6f 5120 6975 746e 6369     ent from Quintic
  41db74:	0a0d 0000 6f63 6e6e 6365 0d74 000a 0000     ....connect.....
  41db84:	6f43 6e6e 6552 7073 0000 0000 7041 5370     ConnResp....AppS
  41db94:	6174 7472 0a0d 0000 7551 6e69 6974 2063     tart....Quintic 
  41dba4:	7243 7361 6568 2164 0000 0000 5352 4953     Crashed!....RSSI
  41dbb4:	0000 0000 7551 7565 2065 7546 6c6c 4420     ....Queue Full D
  41dbc4:	6f72 7070 6465 7020 6361 656b 0d74 000a     ropped packet...
  41dbd4:	6944 2064 6f6e 2074 6572 6563 7669 2065     Did not receive 
  41dbe4:	6966 7372 2074 4341 204b 7266 6d6f 5120     first ACK from Q
  41dbf4:	0a0d 0000 6562 6967 0d6e 000a 6f4e 7220     ....begin...No r
  41dc04:	7365 6f70 736e 2065 6e6f 4220 6765 6e69     esponse on Begin
  41dc14:	6320 6d6f 616d 646e 6620 6f72 206d 0d51      command from Q.
  41dc24:	000a 0000 6f4e 4120 4b43 6620 6f72 206d     ....No ACK from 
  41dc34:	2051 6661 6574 2072 6573 646e 6e69 2067     Q after sending 
  41dc44:	4d49 2055 6461 7264 7365 0d73 000a 0000     IMU address.....
  41dc54:	6e65 0d64 000a 0000 6f4e 4120 4b43 6620     end.....No ACK f
  41dc64:	6f72 206d 2051 6661 6574 2072 6573 646e     rom Q after send
  41dc74:	6e69 2067 6e65 0d64 000a 0000 6863 616d     ing end.....chma
  41dc84:	2070 0000 6f4e 4120 4b43 6620 6f72 206d     p ..No ACK from 
  41dc94:	2051 6661 6574 2072 6573 646e 6e69 2067     Q after sending 
  41dca4:	6863 6e61 656e 206c 616d 0d70 000a 0000     channel map.....
  41dcb4:	6573 4d74 7061 0a0d 0000 0000 7473 7261     setMap......star
  41dcc4:	0d74 000a 7473 706f 0a0d 0000 7372 6973     t...stop....rssi
  41dcd4:	0a0d 0000 6567 4174 6363 6c65 0d31 000a     ....getAccel1...
  41dce4:	6567 4174 6363 6c65 0d30 000a 6c73 6565     getAccel0...slee
  41dcf4:	0d70 000a 6e51 6341 0d6b 000a 3025 6432     p...QnAck...%02d
  41dd04:	5959 3025 6434 5252 2552 0064 6863 6365     YY%04dRRR%d.chec
  41dd14:	0d6b 000a 6373 6e61 0a0d 0000 6353 6e61     k...scan....Scan
  41dd24:	6552 7073 0000 0000 6146 6c69 6465 6f20     Resp....Failed o
  41dd34:	206e 4d49 2055 6449 0a0d 0000 6f4e 7220     n IMU Id....No r
  41dd44:	7365 6f70 736e 2065 6e6f 7320 6163 0d6e     esponse on scan.
  41dd54:	000a 0000 6573 746e 6320 6e6f 656e 7463     ....sent connect
  41dd64:	0a0d 0000 6f4e 7220 7365 6f70 736e 2065     ....No response 
  41dd74:	6e6f 6320 6e6f 656e 7463 0a0d 0000 0000     on connect......
  41dd84:	614d 6e69 0000 0000 0043 0000               Main....C...

0041dd90 <_global_impure_ptr>:
  41dd90:	0788 2000                                   ... 

0041dd94 <zeroes.6763>:
  41dd94:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  41dda4:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  41ddb4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  41ddc4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  41ddd4:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  41dde4:	0030 0000                                   0...

0041dde8 <blanks.6762>:
  41dde8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0041ddf8 <basefix.6714>:
  41ddf8:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  41de08:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  41de18:	0010 0000 2565 646c 0000 0000               ....e%ld....

0041de24 <zeroes.6721>:
  41de24:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0041de34 <blanks.6720>:
  41de34:	2020 2020 2020 2020 2020 2020 2020 2020                     

0041de44 <_ctype_>:
  41de44:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  41de54:	2020 2020 2020 2020 2020 2020 2020 2020                     
  41de64:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  41de74:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  41de84:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  41de94:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  41dea4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  41deb4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  41dec4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  41df48:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  41df58:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

0041df68 <__mprec_tens>:
  41df68:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  41df78:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  41df88:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  41df98:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  41dfa8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  41dfb8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  41dfc8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  41dfd8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  41dfe8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  41dff8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  41e008:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  41e018:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  41e028:	9db4 79d9 7843 44ea                         ...yCx.D

0041e030 <__mprec_bigtens>:
  41e030:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  41e040:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  41e050:	bf3c 7f73 4fdd 7515                         <.s..O.u

0041e058 <p05.5269>:
  41e058:	0005 0000 0019 0000 007d 0000               ........}...

0041e064 <fpi.5238>:
  41e064:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  41e074:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  41e084:	6e61 0000                                   an..

0041e088 <fpinan.5274>:
  41e088:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

0041e0a0 <tinytens>:
  41e0a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  41e0b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  41e0c0:	6f43 64ac 0628 1168                         Co.d(.h.

0041e0c8 <__hexdig>:
	...
  41e0f8:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  41e108:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  41e128:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

0041e1c8 <_init>:
  41e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e1ca:	bf00      	nop
  41e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41e1ce:	bc08      	pop	{r3}
  41e1d0:	469e      	mov	lr, r3
  41e1d2:	4770      	bx	lr

0041e1d4 <__init_array_start>:
  41e1d4:	00416aa5 	.word	0x00416aa5

0041e1d8 <__frame_dummy_init_array_entry>:
  41e1d8:	004000f1                                ..@.

0041e1dc <_fini>:
  41e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e1de:	bf00      	nop
  41e1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41e1e2:	bc08      	pop	{r3}
  41e1e4:	469e      	mov	lr, r3
  41e1e6:	4770      	bx	lr

0041e1e8 <__fini_array_start>:
  41e1e8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000

	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b00      	cmp	r3, #0
20000044:	d1f7      	bne.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b00      	cmp	r3, #0
20000088:	d0f7      	beq.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	f85d 7b04 	ldr.w	r7, [sp], #4
200000a2:	4770      	bx	lr

200000a4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a4:	b480      	push	{r7}
200000a6:	b083      	sub	sp, #12
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
200000ac:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	683a      	ldr	r2, [r7, #0]
200000b2:	601a      	str	r2, [r3, #0]
}
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200000bc:	4770      	bx	lr
200000be:	bf00      	nop

200000c0 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c0:	b480      	push	{r7}
200000c2:	b085      	sub	sp, #20
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b00      	cmp	r3, #0
200000de:	d0f7      	beq.n	200000d0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 030e 	and.w	r3, r3, #14
}
200000e6:	4618      	mov	r0, r3
200000e8:	3714      	adds	r7, #20
200000ea:	46bd      	mov	sp, r7
200000ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200000f0:	4770      	bx	lr
200000f2:	bf00      	nop

200000f4 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
200000f4:	b480      	push	{r7}
200000f6:	b083      	sub	sp, #12
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]

200000fc <loop>:
	UNUSED(n);

	__asm (
200000fc:	f3bf 8f5f 	dmb	sy
20000100:	3801      	subs	r0, #1
20000102:	d1fb      	bne.n	200000fc <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000104:	370c      	adds	r7, #12
20000106:	46bd      	mov	sp, r7
20000108:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop

20000110 <debugLogNewFileName>:
20000110:	3a30 7973 4873 6b64 622e 6e69 0000 0000     0:sysHdk.bin....

20000120 <debugLogOldFileName>:
20000120:	3a30 7973 4873 6b64 6f5f 646c 622e 6e69     0:sysHdk_old.bin
20000130:	0000 0000                                   ....

20000134 <systemEventNameString>:
20000134:	c828 0041 c84c 0041 c870 0041 c894 0041     (.A.L.A.p.A...A.
20000144:	c8b8 0041 c8dc 0041 c900 0041 c924 0041     ..A...A...A.$.A.
20000154:	c944 0041 c968 0041 c98c 0041 c9b0 0041     D.A.h.A...A...A.
20000164:	c9d4 0041 c9fc 0041                         ..A...A.

2000016c <systemStateNameString>:
2000016c:	ca2c 0041 ca54 0041 ca84 0041 caac 0041     ,.A.T.A...A...A.
2000017c:	cad4 0041 cb00 0041 cb28 0041               ..A...A.(.A.

20000188 <firstBoot>:
20000188:	0001 0000                                   ....

2000018c <sd_mmc_cards>:
	...
20000194:	002b 0000 0000 0000 0000 0000 0000 0000     +...............
	...

200001b0 <uxCriticalNesting>:
200001b0:	aaaa aaaa                                   ....

200001b4 <xNextTaskUnblockTime>:
200001b4:	ffff ffff                                   ....

200001b8 <uxPreviousTask>:
200001b8:	00ff 0000                                   ....

200001bc <uart0Config>:
200001bc:	0600 400e c200 0001 00c0 0000 0800 0000     ...@............
	...

200001d4 <uart1Config>:
200001d4:	0800 400e c200 0001 00c0 0000 0800 0000     ...@............
200001e4:	0000 0000 0001 0000                         ........

200001ec <usart0Config>:
200001ec:	4000 4002 c200 0001 00c0 0000 0800 0000     .@.@............
200001fc:	0000 0000 0002 0000                         ........

20000204 <usart1Config>:
20000204:	8000 4002 c200 0001 00c0 0000 0800 0000     ...@............
20000214:	0000 0000 0003 0000                         ........

2000021c <ledConfiguration>:
2000021c:	0d0e 000c                                   ....

20000220 <brainSettings>:
	...
200002bc:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

200002d8 <imuConfig>:
200002d8:	0000 0000 4131 4242 4343 4444 4545 4646     ....1ABBCCDDEEFF
	...
20000310:	0001 0000 4132 4242 4343 4444 4545 4646     ....2ABBCCDDEEFF
	...
20000348:	0002 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000380:	0003 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200003b8:	0004 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200003f0:	0005 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000428:	0006 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000460:	0007 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000498:	0008 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200004d0:	0009 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...

20000508 <quinticConfig>:
20000508:	02d8 2000 0310 2000 0348 2000 0000 0000     ... ... H.. ....
20000518:	0000 0000 01d4 2000 0003 0000 0000 0000     ....... ........
20000528:	0009 0000 0000 0000 0000 0000 0000 0000     ................
20000538:	3131 3131 3030 3030 0000 0000 0380 2000     11110000....... 
20000548:	03b8 2000 03f0 2000 0000 0000 0000 0000     ... ... ........
20000558:	01ec 2000 0003 0000 0000 0000 000a 0000     ... ............
20000568:	0000 0000 0001 0000 0000 0000 3131 3131     ............1111
20000578:	3030 3030 0000 0000 0428 2000 0460 2000     0000....(.. `.. 
20000588:	0498 2000 0000 0000 0000 0000 0204 2000     ... ........... 
20000598:	0003 0000 0000 0000 000b 0000 0000 0000     ................
200005a8:	0002 0000 0000 0000 3131 3131 3030 3030     ........11110000
200005b8:	0000 0000                                   ....

200005bc <cmdConfig>:
200005bc:	01bc 2000                                   ... 

200005c0 <fsConfig>:
200005c0:	0014 0000 0004 0000 01bc 2000               ........... 

200005cc <gpioConfig>:
200005cc:	0000 0000 0001 0001 daf9 0040 0101 0000     ..........@.....
200005dc:	0001 0000 0001 0001 db4d 0040 0101 0000     ........M.@.....
200005ec:	0014 0000 0001 0001 dba1 0040 0101 0000     ..........@.....
200005fc:	0010 0000 0001 0004 0000 0000 0101 0000     ................
2000060c:	000f 0000 0001 0004 0000 0000 0101 0000     ................
2000061c:	0018 0000 0001 0004 0000 0000 0100 0000     ................
2000062c:	0019 0000 0001 0004 0000 0000 0100 0000     ................
2000063c:	0013 0000 0100 0004 0000 0000 0000 0100     ................
2000064c:	0017 0000 0100 0004 0000 0000 0000 0100     ................
2000065c:	002a 0000 0100 0004 0000 0000 0100 0100     *...............
2000066c:	0011 0000 0100 0004 0000 0000 0100 0100     ................
2000067c:	0012 0000 0100 0004 0000 0000 0100 0100     ................
2000068c:	002d 0000 0100 0004 0000 0000 0000 0100     -...............
2000069c:	0020 0000 0100 0004 0000 0000 0000 0100      ...............
200006ac:	0021 0000 0100 0004 0000 0000 0000 0100     !...............
200006bc:	000b 0000 0001 0001 dbf9 0040 0101 0000     ..........@.....
200006cc:	002b 0000 0001 0001 dc51 0040 0101 0000     +.......Q.@.....
200006dc:	000c 0000 0000 0004 0000 0000 0000 0000     ................
200006ec:	0002 0000 0000 0004 0000 0000 0000 0100     ................

200006fc <programmingGpioConfig>:
200006fc:	0023 0000 0001 0004 0000 0000 0101 0000     #...............
2000070c:	0022 0000 0001 0004 0000 0000 0101 0000     "...............
2000071c:	0006 0000 0001 0004 0000 0000 0101 0000     ................
2000072c:	0005 0000 0001 0004 0000 0000 0101 0000     ................
2000073c:	0016 0000 0001 0004 0000 0000 0101 0000     ................
2000074c:	0012 0000 0001 0004 0000 0000 0101 0000     ................

2000075c <cycleJcEn>:
2000075c:	0001 0000                                   ....

20000760 <vTaskStackSize>:
20000760:	0fa0 0000 0fa0 0000 0fa0 0000 0fa0 0000     ................
20000770:	0fa0 0000 0fa0 0000 0fa0 0000 0fa0 0000     ................

20000780 <g_interrupt_enabled>:
20000780:	0001 0000                                   ....

20000784 <SystemCoreClock>:
20000784:	0900 003d                                   ..=.

20000788 <impure_data>:
20000788:	0000 0000 0a74 2000 0adc 2000 0b44 2000     ....t.. ... D.. 
	...
200007bc:	dd8c 0041 0000 0000 0000 0000 0000 0000     ..A.............
	...
20000830:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000840:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000bb0 <_impure_ptr>:
20000bb0:	0788 2000                                   ... 

20000bb4 <__malloc_av_>:
	...
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 
20000c3c:	0c34 2000 0c34 2000 0c3c 2000 0c3c 2000     4.. 4.. <.. <.. 
20000c4c:	0c44 2000 0c44 2000 0c4c 2000 0c4c 2000     D.. D.. L.. L.. 
20000c5c:	0c54 2000 0c54 2000 0c5c 2000 0c5c 2000     T.. T.. \.. \.. 
20000c6c:	0c64 2000 0c64 2000 0c6c 2000 0c6c 2000     d.. d.. l.. l.. 
20000c7c:	0c74 2000 0c74 2000 0c7c 2000 0c7c 2000     t.. t.. |.. |.. 
20000c8c:	0c84 2000 0c84 2000 0c8c 2000 0c8c 2000     ... ... ... ... 
20000c9c:	0c94 2000 0c94 2000 0c9c 2000 0c9c 2000     ... ... ... ... 
20000cac:	0ca4 2000 0ca4 2000 0cac 2000 0cac 2000     ... ... ... ... 
20000cbc:	0cb4 2000 0cb4 2000 0cbc 2000 0cbc 2000     ... ... ... ... 
20000ccc:	0cc4 2000 0cc4 2000 0ccc 2000 0ccc 2000     ... ... ... ... 
20000cdc:	0cd4 2000 0cd4 2000 0cdc 2000 0cdc 2000     ... ... ... ... 
20000cec:	0ce4 2000 0ce4 2000 0cec 2000 0cec 2000     ... ... ... ... 
20000cfc:	0cf4 2000 0cf4 2000 0cfc 2000 0cfc 2000     ... ... ... ... 
20000d0c:	0d04 2000 0d04 2000 0d0c 2000 0d0c 2000     ... ... ... ... 
20000d1c:	0d14 2000 0d14 2000 0d1c 2000 0d1c 2000     ... ... ... ... 
20000d2c:	0d24 2000 0d24 2000 0d2c 2000 0d2c 2000     $.. $.. ,.. ,.. 
20000d3c:	0d34 2000 0d34 2000 0d3c 2000 0d3c 2000     4.. 4.. <.. <.. 
20000d4c:	0d44 2000 0d44 2000 0d4c 2000 0d4c 2000     D.. D.. L.. L.. 
20000d5c:	0d54 2000 0d54 2000 0d5c 2000 0d5c 2000     T.. T.. \.. \.. 
20000d6c:	0d64 2000 0d64 2000 0d6c 2000 0d6c 2000     d.. d.. l.. l.. 
20000d7c:	0d74 2000 0d74 2000 0d7c 2000 0d7c 2000     t.. t.. |.. |.. 
20000d8c:	0d84 2000 0d84 2000 0d8c 2000 0d8c 2000     ... ... ... ... 
20000d9c:	0d94 2000 0d94 2000 0d9c 2000 0d9c 2000     ... ... ... ... 
20000dac:	0da4 2000 0da4 2000 0dac 2000 0dac 2000     ... ... ... ... 
20000dbc:	0db4 2000 0db4 2000 0dbc 2000 0dbc 2000     ... ... ... ... 
20000dcc:	0dc4 2000 0dc4 2000 0dcc 2000 0dcc 2000     ... ... ... ... 
20000ddc:	0dd4 2000 0dd4 2000 0ddc 2000 0ddc 2000     ... ... ... ... 
20000dec:	0de4 2000 0de4 2000 0dec 2000 0dec 2000     ... ... ... ... 
20000dfc:	0df4 2000 0df4 2000 0dfc 2000 0dfc 2000     ... ... ... ... 
20000e0c:	0e04 2000 0e04 2000 0e0c 2000 0e0c 2000     ... ... ... ... 
20000e1c:	0e14 2000 0e14 2000 0e1c 2000 0e1c 2000     ... ... ... ... 
20000e2c:	0e24 2000 0e24 2000 0e2c 2000 0e2c 2000     $.. $.. ,.. ,.. 
20000e3c:	0e34 2000 0e34 2000 0e3c 2000 0e3c 2000     4.. 4.. <.. <.. 
20000e4c:	0e44 2000 0e44 2000 0e4c 2000 0e4c 2000     D.. D.. L.. L.. 
20000e5c:	0e54 2000 0e54 2000 0e5c 2000 0e5c 2000     T.. T.. \.. \.. 
20000e6c:	0e64 2000 0e64 2000 0e6c 2000 0e6c 2000     d.. d.. l.. l.. 
20000e7c:	0e74 2000 0e74 2000 0e7c 2000 0e7c 2000     t.. t.. |.. |.. 
20000e8c:	0e84 2000 0e84 2000 0e8c 2000 0e8c 2000     ... ... ... ... 
20000e9c:	0e94 2000 0e94 2000 0e9c 2000 0e9c 2000     ... ... ... ... 
20000eac:	0ea4 2000 0ea4 2000 0eac 2000 0eac 2000     ... ... ... ... 
20000ebc:	0eb4 2000 0eb4 2000 0ebc 2000 0ebc 2000     ... ... ... ... 
20000ecc:	0ec4 2000 0ec4 2000 0ecc 2000 0ecc 2000     ... ... ... ... 
20000edc:	0ed4 2000 0ed4 2000 0edc 2000 0edc 2000     ... ... ... ... 
20000eec:	0ee4 2000 0ee4 2000 0eec 2000 0eec 2000     ... ... ... ... 
20000efc:	0ef4 2000 0ef4 2000 0efc 2000 0efc 2000     ... ... ... ... 
20000f0c:	0f04 2000 0f04 2000 0f0c 2000 0f0c 2000     ... ... ... ... 
20000f1c:	0f14 2000 0f14 2000 0f1c 2000 0f1c 2000     ... ... ... ... 
20000f2c:	0f24 2000 0f24 2000 0f2c 2000 0f2c 2000     $.. $.. ,.. ,.. 
20000f3c:	0f34 2000 0f34 2000 0f3c 2000 0f3c 2000     4.. 4.. <.. <.. 
20000f4c:	0f44 2000 0f44 2000 0f4c 2000 0f4c 2000     D.. D.. L.. L.. 
20000f5c:	0f54 2000 0f54 2000 0f5c 2000 0f5c 2000     T.. T.. \.. \.. 
20000f6c:	0f64 2000 0f64 2000 0f6c 2000 0f6c 2000     d.. d.. l.. l.. 
20000f7c:	0f74 2000 0f74 2000 0f7c 2000 0f7c 2000     t.. t.. |.. |.. 
20000f8c:	0f84 2000 0f84 2000 0f8c 2000 0f8c 2000     ... ... ... ... 
20000f9c:	0f94 2000 0f94 2000 0f9c 2000 0f9c 2000     ... ... ... ... 
20000fac:	0fa4 2000 0fa4 2000 0fac 2000 0fac 2000     ... ... ... ... 

20000fbc <__malloc_trim_threshold>:
20000fbc:	0000 0002                                   ....

20000fc0 <__malloc_sbrk_base>:
20000fc0:	ffff ffff                                   ....

20000fc4 <__ctype_ptr__>:
20000fc4:	de44 0041                                   D.A.

20000fc8 <lconv>:
20000fc8:	df60 0041 ddc4 0041 ddc4 0041 ddc4 0041     `.A...A...A...A.
20000fd8:	ddc4 0041 ddc4 0041 ddc4 0041 ddc4 0041     ..A...A...A...A.
20000fe8:	ddc4 0041 ddc4 0041 ffff ffff ffff ffff     ..A...A.........
20000ff8:	ffff ffff ffff 0000                         ........

20001000 <lc_ctype_charset>:
20001000:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20001020 <__mb_cur_max>:
20001020:	0001 0000                                   ....

20001024 <__mbtowc>:
20001024:	84fd 0041                                   ..A.

20001028 <__wctomb>:
20001028:	ac5d 0041                                   ].A.
