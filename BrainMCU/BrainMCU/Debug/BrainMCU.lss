
BrainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001964c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041964c  0041964c  0002164c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d94  20000000  00419654  00028000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002708  20000d94  0041a3e8  00028d94  2**2
                  ALLOC
  4 .stack        00003004  2000349c  0041caf0  00028d94  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00028d94  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00028dbe  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021ffe  00000000  00000000  00028e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000510a  00000000  00000000  0004ae17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009090  00000000  00000000  0004ff21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001998  00000000  00000000  00058fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000016c8  00000000  00000000  0005a949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f4aa  00000000  00000000  0005c011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027b07  00000000  00000000  0007b4bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005b9fc  00000000  00000000  000a2fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006674  00000000  00000000  000fe9c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200064a0 	.word	0x200064a0
  400004:	0040df39 	.word	0x0040df39
  400008:	0040e001 	.word	0x0040e001
  40000c:	0040e3a5 	.word	0x0040e3a5
  400010:	0040e3ad 	.word	0x0040e3ad
  400014:	0040e3b5 	.word	0x0040e3b5
  400018:	0040e3bd 	.word	0x0040e3bd
	...
  40002c:	00407cf5 	.word	0x00407cf5
  400030:	0040e001 	.word	0x0040e001
  400034:	00000000 	.word	0x00000000
  400038:	00407dcd 	.word	0x00407dcd
  40003c:	0040e3c5 	.word	0x0040e3c5
  400040:	0040e001 	.word	0x0040e001
  400044:	0040e001 	.word	0x0040e001
  400048:	0040e001 	.word	0x0040e001
  40004c:	0040e001 	.word	0x0040e001
  400050:	0040e001 	.word	0x0040e001
  400054:	0040e001 	.word	0x0040e001
  400058:	0040e001 	.word	0x0040e001
  40005c:	00000000 	.word	0x00000000
  400060:	0040ba11 	.word	0x0040ba11
  400064:	0040ba75 	.word	0x0040ba75
  400068:	00000000 	.word	0x00000000
  40006c:	0040dbe5 	.word	0x0040dbe5
  400070:	0040dbfd 	.word	0x0040dbfd
  400074:	00000000 	.word	0x00000000
  400078:	0040badd 	.word	0x0040badd
  40007c:	0040bb45 	.word	0x0040bb45
	...
  400088:	0040e001 	.word	0x0040e001
  40008c:	0040e001 	.word	0x0040e001
  400090:	0040e001 	.word	0x0040e001
  400094:	0040e001 	.word	0x0040e001
  400098:	0040e001 	.word	0x0040e001
  40009c:	0040e001 	.word	0x0040e001
  4000a0:	0040e001 	.word	0x0040e001
  4000a4:	0040e001 	.word	0x0040e001
	...
  4000b4:	0040e001 	.word	0x0040e001
  4000b8:	0040e001 	.word	0x0040e001
  4000bc:	0040e001 	.word	0x0040e001
  4000c0:	0040e001 	.word	0x0040e001
  4000c4:	0040e001 	.word	0x0040e001
  4000c8:	0040e001 	.word	0x0040e001

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000d94 	.word	0x20000d94
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00419654 	.word	0x00419654

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00419654 	.word	0x00419654
  400114:	20000d98 	.word	0x20000d98
  400118:	00419654 	.word	0x00419654
  40011c:	00000000 	.word	0x00000000

00400120 <rstc_start_software_reset>:
 * \brief Perform software reset.
 *
 * \param p_rstc Pointer to an RSTC instance.
 */
void rstc_start_software_reset(Rstc *p_rstc)
{
  400120:	b480      	push	{r7}
  400122:	b083      	sub	sp, #12
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  400128:	687b      	ldr	r3, [r7, #4]
  40012a:	4a03      	ldr	r2, [pc, #12]	; (400138 <rstc_start_software_reset+0x18>)
  40012c:	601a      	str	r2, [r3, #0]
}
  40012e:	370c      	adds	r7, #12
  400130:	46bd      	mov	sp, r7
  400132:	f85d 7b04 	ldr.w	r7, [sp], #4
  400136:	4770      	bx	lr
  400138:	a5000005 	.word	0xa5000005

0040013c <vLedTimerCallback>:
drv_led_color_type_t vledColor;	//global variable to store led color, used in timer callback
drv_led_state_type_t vledState; //global variable to store led state, used in timer callback

//Led Timer callback function
void vLedTimerCallback( xTimerHandle xTimer )
{
  40013c:	b590      	push	{r4, r7, lr}
  40013e:	b085      	sub	sp, #20
  400140:	af02      	add	r7, sp, #8
  400142:	6078      	str	r0, [r7, #4]
	if(vledState == DRV_LED_FLASH)	//perform the action only if state is flashing
  400144:	4b20      	ldr	r3, [pc, #128]	; (4001c8 <vLedTimerCallback+0x8c>)
  400146:	781b      	ldrb	r3, [r3, #0]
  400148:	2b00      	cmp	r3, #0
  40014a:	d130      	bne.n	4001ae <vLedTimerCallback+0x72>
	{
		//check which led color is set and toggle the pin state
		switch(vledColor)
  40014c:	4b1f      	ldr	r3, [pc, #124]	; (4001cc <vLedTimerCallback+0x90>)
  40014e:	781b      	ldrb	r3, [r3, #0]
  400150:	2b04      	cmp	r3, #4
  400152:	d82a      	bhi.n	4001aa <vLedTimerCallback+0x6e>
  400154:	a201      	add	r2, pc, #4	; (adr r2, 40015c <vLedTimerCallback+0x20>)
  400156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40015a:	bf00      	nop
  40015c:	00400171 	.word	0x00400171
  400160:	00400179 	.word	0x00400179
  400164:	00400181 	.word	0x00400181
  400168:	00400189 	.word	0x00400189
  40016c:	00400197 	.word	0x00400197
		{
			case DRV_LED_RED:
				drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED);
  400170:	200e      	movs	r0, #14
  400172:	4b17      	ldr	r3, [pc, #92]	; (4001d0 <vLedTimerCallback+0x94>)
  400174:	4798      	blx	r3
				break;
  400176:	e019      	b.n	4001ac <vLedTimerCallback+0x70>
			case DRV_LED_BLUE:
				drv_gpio_togglePin(DRV_GPIO_PIN_BLUE_LED);
  400178:	200d      	movs	r0, #13
  40017a:	4b15      	ldr	r3, [pc, #84]	; (4001d0 <vLedTimerCallback+0x94>)
  40017c:	4798      	blx	r3
				break;
  40017e:	e015      	b.n	4001ac <vLedTimerCallback+0x70>
			case DRV_LED_GREEN:
				drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED);
  400180:	200c      	movs	r0, #12
  400182:	4b13      	ldr	r3, [pc, #76]	; (4001d0 <vLedTimerCallback+0x94>)
  400184:	4798      	blx	r3
				break;
  400186:	e011      	b.n	4001ac <vLedTimerCallback+0x70>
			case DRV_LED_YELLOW:
				drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED);
  400188:	200e      	movs	r0, #14
  40018a:	4b11      	ldr	r3, [pc, #68]	; (4001d0 <vLedTimerCallback+0x94>)
  40018c:	4798      	blx	r3
				drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED);
  40018e:	200c      	movs	r0, #12
  400190:	4b0f      	ldr	r3, [pc, #60]	; (4001d0 <vLedTimerCallback+0x94>)
  400192:	4798      	blx	r3
				break;
  400194:	e00a      	b.n	4001ac <vLedTimerCallback+0x70>
			case DRV_LED_WHITE:
				drv_gpio_togglePin(DRV_GPIO_PIN_RED_LED);
  400196:	200e      	movs	r0, #14
  400198:	4b0d      	ldr	r3, [pc, #52]	; (4001d0 <vLedTimerCallback+0x94>)
  40019a:	4798      	blx	r3
				drv_gpio_togglePin(DRV_GPIO_PIN_GREEN_LED);
  40019c:	200c      	movs	r0, #12
  40019e:	4b0c      	ldr	r3, [pc, #48]	; (4001d0 <vLedTimerCallback+0x94>)
  4001a0:	4798      	blx	r3
				drv_gpio_togglePin(DRV_GPIO_PIN_BLUE_LED);
  4001a2:	200d      	movs	r0, #13
  4001a4:	4b0a      	ldr	r3, [pc, #40]	; (4001d0 <vLedTimerCallback+0x94>)
  4001a6:	4798      	blx	r3
				break;
  4001a8:	e000      	b.n	4001ac <vLedTimerCallback+0x70>
			default:
				break;
  4001aa:	bf00      	nop
  4001ac:	e009      	b.n	4001c2 <vLedTimerCallback+0x86>
	}
	else
	{
		//usually shouldn't end up here
		//if it does the timer was not stopped while initializing led to SOLID state
		xTimerStop(LedTimer, 0);
  4001ae:	4b09      	ldr	r3, [pc, #36]	; (4001d4 <vLedTimerCallback+0x98>)
  4001b0:	681b      	ldr	r3, [r3, #0]
  4001b2:	2200      	movs	r2, #0
  4001b4:	9200      	str	r2, [sp, #0]
  4001b6:	4618      	mov	r0, r3
  4001b8:	2101      	movs	r1, #1
  4001ba:	2200      	movs	r2, #0
  4001bc:	2300      	movs	r3, #0
  4001be:	4c06      	ldr	r4, [pc, #24]	; (4001d8 <vLedTimerCallback+0x9c>)
  4001c0:	47a0      	blx	r4
	}
}
  4001c2:	370c      	adds	r7, #12
  4001c4:	46bd      	mov	sp, r7
  4001c6:	bd90      	pop	{r4, r7, pc}
  4001c8:	20001f7c 	.word	0x20001f7c
  4001cc:	20001f74 	.word	0x20001f74
  4001d0:	0040aa8d 	.word	0x0040aa8d
  4001d4:	20001f78 	.word	0x20001f78
  4001d8:	004095f5 	.word	0x004095f5

004001dc <drv_led_init>:

//store the led configuration
status_t drv_led_init(drv_led_config_t* configLed)
{
  4001dc:	b590      	push	{r4, r7, lr}
  4001de:	b087      	sub	sp, #28
  4001e0:	af02      	add	r7, sp, #8
  4001e2:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  4001e4:	2300      	movs	r3, #0
  4001e6:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  4001e8:	687b      	ldr	r3, [r7, #4]
  4001ea:	781a      	ldrb	r2, [r3, #0]
  4001ec:	4b12      	ldr	r3, [pc, #72]	; (400238 <drv_led_init+0x5c>)
  4001ee:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  4001f0:	687b      	ldr	r3, [r7, #4]
  4001f2:	785a      	ldrb	r2, [r3, #1]
  4001f4:	4b10      	ldr	r3, [pc, #64]	; (400238 <drv_led_init+0x5c>)
  4001f6:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	789a      	ldrb	r2, [r3, #2]
  4001fc:	4b0e      	ldr	r3, [pc, #56]	; (400238 <drv_led_init+0x5c>)
  4001fe:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, NULL, vLedTimerCallback);
  400200:	4b0e      	ldr	r3, [pc, #56]	; (40023c <drv_led_init+0x60>)
  400202:	9300      	str	r3, [sp, #0]
  400204:	480e      	ldr	r0, [pc, #56]	; (400240 <drv_led_init+0x64>)
  400206:	21fa      	movs	r1, #250	; 0xfa
  400208:	2201      	movs	r2, #1
  40020a:	2300      	movs	r3, #0
  40020c:	4c0d      	ldr	r4, [pc, #52]	; (400244 <drv_led_init+0x68>)
  40020e:	47a0      	blx	r4
  400210:	4602      	mov	r2, r0
  400212:	4b0d      	ldr	r3, [pc, #52]	; (400248 <drv_led_init+0x6c>)
  400214:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  400216:	4b0c      	ldr	r3, [pc, #48]	; (400248 <drv_led_init+0x6c>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	2b00      	cmp	r3, #0
  40021c:	d107      	bne.n	40022e <drv_led_init+0x52>
	{
		printf("Failed to create Led timer task code %d\r\n", LedTimer);
  40021e:	4b0a      	ldr	r3, [pc, #40]	; (400248 <drv_led_init+0x6c>)
  400220:	681b      	ldr	r3, [r3, #0]
  400222:	480a      	ldr	r0, [pc, #40]	; (40024c <drv_led_init+0x70>)
  400224:	4619      	mov	r1, r3
  400226:	4b0a      	ldr	r3, [pc, #40]	; (400250 <drv_led_init+0x74>)
  400228:	4798      	blx	r3
		result = STATUS_FAIL;
  40022a:	2301      	movs	r3, #1
  40022c:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  40022e:	7bfb      	ldrb	r3, [r7, #15]
}
  400230:	4618      	mov	r0, r3
  400232:	3714      	adds	r7, #20
  400234:	46bd      	mov	sp, r7
  400236:	bd90      	pop	{r4, r7, pc}
  400238:	20001f80 	.word	0x20001f80
  40023c:	0040013d 	.word	0x0040013d
  400240:	00418024 	.word	0x00418024
  400244:	00409589 	.word	0x00409589
  400248:	20001f78 	.word	0x20001f78
  40024c:	00418030 	.word	0x00418030
  400250:	0040eadd 	.word	0x0040eadd

00400254 <drv_led_set>:

status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  400254:	b590      	push	{r4, r7, lr}
  400256:	b087      	sub	sp, #28
  400258:	af02      	add	r7, sp, #8
  40025a:	4602      	mov	r2, r0
  40025c:	460b      	mov	r3, r1
  40025e:	71fa      	strb	r2, [r7, #7]
  400260:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  400262:	2300      	movs	r3, #0
  400264:	73fb      	strb	r3, [r7, #15]
	if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  400266:	4b55      	ldr	r3, [pc, #340]	; (4003bc <drv_led_set+0x168>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	4618      	mov	r0, r3
  40026c:	4b54      	ldr	r3, [pc, #336]	; (4003c0 <drv_led_set+0x16c>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	d016      	beq.n	4002a4 <drv_led_set+0x50>
	{
		//timer is active, stop it and reset it
		xTimerStop(LedTimer, 0);
  400276:	4b51      	ldr	r3, [pc, #324]	; (4003bc <drv_led_set+0x168>)
  400278:	681b      	ldr	r3, [r3, #0]
  40027a:	2200      	movs	r2, #0
  40027c:	9200      	str	r2, [sp, #0]
  40027e:	4618      	mov	r0, r3
  400280:	2101      	movs	r1, #1
  400282:	2200      	movs	r2, #0
  400284:	2300      	movs	r3, #0
  400286:	4c4f      	ldr	r4, [pc, #316]	; (4003c4 <drv_led_set+0x170>)
  400288:	47a0      	blx	r4
		xTimerReset(LedTimer, 0);
  40028a:	4b4c      	ldr	r3, [pc, #304]	; (4003bc <drv_led_set+0x168>)
  40028c:	681c      	ldr	r4, [r3, #0]
  40028e:	4b4e      	ldr	r3, [pc, #312]	; (4003c8 <drv_led_set+0x174>)
  400290:	4798      	blx	r3
  400292:	4603      	mov	r3, r0
  400294:	2200      	movs	r2, #0
  400296:	9200      	str	r2, [sp, #0]
  400298:	4620      	mov	r0, r4
  40029a:	2100      	movs	r1, #0
  40029c:	461a      	mov	r2, r3
  40029e:	2300      	movs	r3, #0
  4002a0:	4c48      	ldr	r4, [pc, #288]	; (4003c4 <drv_led_set+0x170>)
  4002a2:	47a0      	blx	r4
	}
	//switch off all LEDs
	drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH);
  4002a4:	200e      	movs	r0, #14
  4002a6:	2101      	movs	r1, #1
  4002a8:	4b48      	ldr	r3, [pc, #288]	; (4003cc <drv_led_set+0x178>)
  4002aa:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);
  4002ac:	200d      	movs	r0, #13
  4002ae:	2101      	movs	r1, #1
  4002b0:	4b46      	ldr	r3, [pc, #280]	; (4003cc <drv_led_set+0x178>)
  4002b2:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  4002b4:	200c      	movs	r0, #12
  4002b6:	2101      	movs	r1, #1
  4002b8:	4b44      	ldr	r3, [pc, #272]	; (4003cc <drv_led_set+0x178>)
  4002ba:	4798      	blx	r3
	
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  4002bc:	4b44      	ldr	r3, [pc, #272]	; (4003d0 <drv_led_set+0x17c>)
  4002be:	79fa      	ldrb	r2, [r7, #7]
  4002c0:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  4002c2:	4b44      	ldr	r3, [pc, #272]	; (4003d4 <drv_led_set+0x180>)
  4002c4:	79ba      	ldrb	r2, [r7, #6]
  4002c6:	701a      	strb	r2, [r3, #0]
	switch (ledColor)
  4002c8:	79fb      	ldrb	r3, [r7, #7]
  4002ca:	2b05      	cmp	r3, #5
  4002cc:	d840      	bhi.n	400350 <drv_led_set+0xfc>
  4002ce:	a201      	add	r2, pc, #4	; (adr r2, 4002d4 <drv_led_set+0x80>)
  4002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002d4:	004002ed 	.word	0x004002ed
  4002d8:	004002f7 	.word	0x004002f7
  4002dc:	00400301 	.word	0x00400301
  4002e0:	0040030b 	.word	0x0040030b
  4002e4:	0040031d 	.word	0x0040031d
  4002e8:	00400337 	.word	0x00400337
	{
		case DRV_LED_RED:
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW);
  4002ec:	200e      	movs	r0, #14
  4002ee:	2100      	movs	r1, #0
  4002f0:	4b36      	ldr	r3, [pc, #216]	; (4003cc <drv_led_set+0x178>)
  4002f2:	4798      	blx	r3
			break;
  4002f4:	e02d      	b.n	400352 <drv_led_set+0xfe>
		case DRV_LED_BLUE:
			drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW);
  4002f6:	200d      	movs	r0, #13
  4002f8:	2100      	movs	r1, #0
  4002fa:	4b34      	ldr	r3, [pc, #208]	; (4003cc <drv_led_set+0x178>)
  4002fc:	4798      	blx	r3
			break;
  4002fe:	e028      	b.n	400352 <drv_led_set+0xfe>
		case DRV_LED_GREEN:
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
  400300:	200c      	movs	r0, #12
  400302:	2100      	movs	r1, #0
  400304:	4b31      	ldr	r3, [pc, #196]	; (4003cc <drv_led_set+0x178>)
  400306:	4798      	blx	r3
			break;
  400308:	e023      	b.n	400352 <drv_led_set+0xfe>
		case DRV_LED_YELLOW:
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW);
  40030a:	200e      	movs	r0, #14
  40030c:	2100      	movs	r1, #0
  40030e:	4b2f      	ldr	r3, [pc, #188]	; (4003cc <drv_led_set+0x178>)
  400310:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
  400312:	200c      	movs	r0, #12
  400314:	2100      	movs	r1, #0
  400316:	4b2d      	ldr	r3, [pc, #180]	; (4003cc <drv_led_set+0x178>)
  400318:	4798      	blx	r3
			break;
  40031a:	e01a      	b.n	400352 <drv_led_set+0xfe>
		case DRV_LED_WHITE:
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_LOW);
  40031c:	200e      	movs	r0, #14
  40031e:	2100      	movs	r1, #0
  400320:	4b2a      	ldr	r3, [pc, #168]	; (4003cc <drv_led_set+0x178>)
  400322:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_LOW);
  400324:	200c      	movs	r0, #12
  400326:	2100      	movs	r1, #0
  400328:	4b28      	ldr	r3, [pc, #160]	; (4003cc <drv_led_set+0x178>)
  40032a:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_LOW);
  40032c:	200d      	movs	r0, #13
  40032e:	2100      	movs	r1, #0
  400330:	4b26      	ldr	r3, [pc, #152]	; (4003cc <drv_led_set+0x178>)
  400332:	4798      	blx	r3
			break;
  400334:	e00d      	b.n	400352 <drv_led_set+0xfe>
		case DRV_LED_OFF:
			drv_gpio_setPinState(DRV_GPIO_PIN_RED_LED, DRV_GPIO_PIN_STATE_HIGH);
  400336:	200e      	movs	r0, #14
  400338:	2101      	movs	r1, #1
  40033a:	4b24      	ldr	r3, [pc, #144]	; (4003cc <drv_led_set+0x178>)
  40033c:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_GREEN_LED, DRV_GPIO_PIN_STATE_HIGH);
  40033e:	200c      	movs	r0, #12
  400340:	2101      	movs	r1, #1
  400342:	4b22      	ldr	r3, [pc, #136]	; (4003cc <drv_led_set+0x178>)
  400344:	4798      	blx	r3
			drv_gpio_setPinState(DRV_GPIO_PIN_BLUE_LED, DRV_GPIO_PIN_STATE_HIGH);
  400346:	200d      	movs	r0, #13
  400348:	2101      	movs	r1, #1
  40034a:	4b20      	ldr	r3, [pc, #128]	; (4003cc <drv_led_set+0x178>)
  40034c:	4798      	blx	r3
			break;
  40034e:	e000      	b.n	400352 <drv_led_set+0xfe>
		default:
			break;
  400350:	bf00      	nop
	}
	
	if ((ledState == DRV_LED_FLASH) & (ledColor != DRV_LED_OFF))
  400352:	79bb      	ldrb	r3, [r7, #6]
  400354:	2b00      	cmp	r3, #0
  400356:	bf14      	ite	ne
  400358:	2300      	movne	r3, #0
  40035a:	2301      	moveq	r3, #1
  40035c:	b2da      	uxtb	r2, r3
  40035e:	79fb      	ldrb	r3, [r7, #7]
  400360:	2b05      	cmp	r3, #5
  400362:	bf0c      	ite	eq
  400364:	2300      	moveq	r3, #0
  400366:	2301      	movne	r3, #1
  400368:	b2db      	uxtb	r3, r3
  40036a:	4013      	ands	r3, r2
  40036c:	b2db      	uxtb	r3, r3
  40036e:	2b00      	cmp	r3, #0
  400370:	d00d      	beq.n	40038e <drv_led_set+0x13a>
	{
		xTimerStart(LedTimer, 0);
  400372:	4b12      	ldr	r3, [pc, #72]	; (4003bc <drv_led_set+0x168>)
  400374:	681c      	ldr	r4, [r3, #0]
  400376:	4b14      	ldr	r3, [pc, #80]	; (4003c8 <drv_led_set+0x174>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	2200      	movs	r2, #0
  40037e:	9200      	str	r2, [sp, #0]
  400380:	4620      	mov	r0, r4
  400382:	2100      	movs	r1, #0
  400384:	461a      	mov	r2, r3
  400386:	2300      	movs	r3, #0
  400388:	4c0e      	ldr	r4, [pc, #56]	; (4003c4 <drv_led_set+0x170>)
  40038a:	47a0      	blx	r4
  40038c:	e011      	b.n	4003b2 <drv_led_set+0x15e>
	}
	else
	{
		//stop the timer
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  40038e:	4b0b      	ldr	r3, [pc, #44]	; (4003bc <drv_led_set+0x168>)
  400390:	681b      	ldr	r3, [r3, #0]
  400392:	4618      	mov	r0, r3
  400394:	4b0a      	ldr	r3, [pc, #40]	; (4003c0 <drv_led_set+0x16c>)
  400396:	4798      	blx	r3
  400398:	4603      	mov	r3, r0
  40039a:	2b00      	cmp	r3, #0
  40039c:	d009      	beq.n	4003b2 <drv_led_set+0x15e>
		{
			xTimerStop(LedTimer, 0);
  40039e:	4b07      	ldr	r3, [pc, #28]	; (4003bc <drv_led_set+0x168>)
  4003a0:	681b      	ldr	r3, [r3, #0]
  4003a2:	2200      	movs	r2, #0
  4003a4:	9200      	str	r2, [sp, #0]
  4003a6:	4618      	mov	r0, r3
  4003a8:	2101      	movs	r1, #1
  4003aa:	2200      	movs	r2, #0
  4003ac:	2300      	movs	r3, #0
  4003ae:	4c05      	ldr	r4, [pc, #20]	; (4003c4 <drv_led_set+0x170>)
  4003b0:	47a0      	blx	r4
		}
	}
	return result;
  4003b2:	7bfb      	ldrb	r3, [r7, #15]
}
  4003b4:	4618      	mov	r0, r3
  4003b6:	3714      	adds	r7, #20
  4003b8:	46bd      	mov	sp, r7
  4003ba:	bd90      	pop	{r4, r7, pc}
  4003bc:	20001f78 	.word	0x20001f78
  4003c0:	00409ad9 	.word	0x00409ad9
  4003c4:	004095f5 	.word	0x004095f5
  4003c8:	00408a55 	.word	0x00408a55
  4003cc:	0040a9d9 	.word	0x0040a9d9
  4003d0:	20001f74 	.word	0x20001f74
  4003d4:	20001f7c 	.word	0x20001f7c

004003d8 <task_commandHandler>:
static char* getTimeString();	
/**
 * \brief This task, when started will loop back \r\n terminated strings
 */
void task_commandHandler(void *pvParameters)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b09e      	sub	sp, #120	; 0x78
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	int result = 0;
  4003e0:	2300      	movs	r3, #0
  4003e2:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100] = {0};
  4003e4:	f107 0208 	add.w	r2, r7, #8
  4003e8:	2364      	movs	r3, #100	; 0x64
  4003ea:	4610      	mov	r0, r2
  4003ec:	2100      	movs	r1, #0
  4003ee:	461a      	mov	r2, r3
  4003f0:	4b0d      	ldr	r3, [pc, #52]	; (400428 <task_commandHandler+0x50>)
  4003f2:	4798      	blx	r3
	int pointer = 0;
  4003f4:	2300      	movs	r3, #0
  4003f6:	673b      	str	r3, [r7, #112]	; 0x70
	commandProcConfig_t* config = (commandProcConfig_t*)pvParameters; 
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	//char val = 0xA5; 
	while(1)
	{
		if(drv_uart_getline(config->uart,buffer,sizeof(buffer)) == STATUS_PASS)
  4003fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  4003fe:	681a      	ldr	r2, [r3, #0]
  400400:	f107 0308 	add.w	r3, r7, #8
  400404:	4610      	mov	r0, r2
  400406:	4619      	mov	r1, r3
  400408:	2264      	movs	r2, #100	; 0x64
  40040a:	4b08      	ldr	r3, [pc, #32]	; (40042c <task_commandHandler+0x54>)
  40040c:	4798      	blx	r3
  40040e:	4603      	mov	r3, r0
  400410:	2b00      	cmp	r3, #0
  400412:	d105      	bne.n	400420 <task_commandHandler+0x48>
		{
			//drv_uart_putString(&uart1Config,buffer); 
			processCommand(buffer,sizeof(buffer)); 
  400414:	f107 0308 	add.w	r3, r7, #8
  400418:	4618      	mov	r0, r3
  40041a:	2164      	movs	r1, #100	; 0x64
  40041c:	4b04      	ldr	r3, [pc, #16]	; (400430 <task_commandHandler+0x58>)
  40041e:	4798      	blx	r3
		}		
		vTaskDelay(10);
  400420:	200a      	movs	r0, #10
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <task_commandHandler+0x5c>)
  400424:	4798      	blx	r3
		//taskYIELD(); 
	}
  400426:	e7e9      	b.n	4003fc <task_commandHandler+0x24>
  400428:	0040f191 	.word	0x0040f191
  40042c:	0040b785 	.word	0x0040b785
  400430:	0040062d 	.word	0x0040062d
  400434:	00408855 	.word	0x00408855

00400438 <printStats>:
 * @brief Prints the Stats of the system to serial terminal
 * @param 
 * @return 
 ***********************************************************************************************/
static void printStats()
{
  400438:	b580      	push	{r7, lr}
  40043a:	b084      	sub	sp, #16
  40043c:	af00      	add	r7, sp, #0
	int i = 0; 
  40043e:	2300      	movs	r3, #0
  400440:	60fb      	str	r3, [r7, #12]
	size_t numberOfImus = 9;//sizeof(imuConfig) / sizeof(imuConfiguration_t);
  400442:	2309      	movs	r3, #9
  400444:	60bb      	str	r3, [r7, #8]
	size_t numberOfQuintics = 3;//sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
  400446:	2303      	movs	r3, #3
  400448:	607b      	str	r3, [r7, #4]
	printf("QUINTIC STATS \r\n");
  40044a:	485d      	ldr	r0, [pc, #372]	; (4005c0 <printStats+0x188>)
  40044c:	4b5d      	ldr	r3, [pc, #372]	; (4005c4 <printStats+0x18c>)
  40044e:	4798      	blx	r3
	for(i = 0; i < numberOfQuintics; i++)
  400450:	2300      	movs	r3, #0
  400452:	60fb      	str	r3, [r7, #12]
  400454:	e025      	b.n	4004a2 <printStats+0x6a>
	{
		printf("Q%d:\r\n", i);
  400456:	485c      	ldr	r0, [pc, #368]	; (4005c8 <printStats+0x190>)
  400458:	68f9      	ldr	r1, [r7, #12]
  40045a:	4b5a      	ldr	r3, [pc, #360]	; (4005c4 <printStats+0x18c>)
  40045c:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
  40045e:	4a5b      	ldr	r2, [pc, #364]	; (4005cc <printStats+0x194>)
  400460:	68fb      	ldr	r3, [r7, #12]
  400462:	212c      	movs	r1, #44	; 0x2c
  400464:	fb01 f303 	mul.w	r3, r1, r3
  400468:	4413      	add	r3, r2
  40046a:	3318      	adds	r3, #24
  40046c:	685b      	ldr	r3, [r3, #4]
  40046e:	4858      	ldr	r0, [pc, #352]	; (4005d0 <printStats+0x198>)
  400470:	4619      	mov	r1, r3
  400472:	4b54      	ldr	r3, [pc, #336]	; (4005c4 <printStats+0x18c>)
  400474:	4798      	blx	r3
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
  400476:	4a55      	ldr	r2, [pc, #340]	; (4005cc <printStats+0x194>)
  400478:	68fb      	ldr	r3, [r7, #12]
  40047a:	212c      	movs	r1, #44	; 0x2c
  40047c:	fb01 f303 	mul.w	r3, r1, r3
  400480:	4413      	add	r3, r2
  400482:	3310      	adds	r3, #16
  400484:	685b      	ldr	r3, [r3, #4]
  400486:	4618      	mov	r0, r3
  400488:	4b52      	ldr	r3, [pc, #328]	; (4005d4 <printStats+0x19c>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	4852      	ldr	r0, [pc, #328]	; (4005d8 <printStats+0x1a0>)
  400490:	4619      	mov	r1, r3
  400492:	4b4c      	ldr	r3, [pc, #304]	; (4005c4 <printStats+0x18c>)
  400494:	4798      	blx	r3
		vTaskDelay(1);
  400496:	2001      	movs	r0, #1
  400498:	4b50      	ldr	r3, [pc, #320]	; (4005dc <printStats+0x1a4>)
  40049a:	4798      	blx	r3
{
	int i = 0; 
	size_t numberOfImus = 9;//sizeof(imuConfig) / sizeof(imuConfiguration_t);
	size_t numberOfQuintics = 3;//sizeof(quinticConfig) / sizeof(quinticConfiguration_t); 	
	printf("QUINTIC STATS \r\n");
	for(i = 0; i < numberOfQuintics; i++)
  40049c:	68fb      	ldr	r3, [r7, #12]
  40049e:	3301      	adds	r3, #1
  4004a0:	60fb      	str	r3, [r7, #12]
  4004a2:	68fa      	ldr	r2, [r7, #12]
  4004a4:	687b      	ldr	r3, [r7, #4]
  4004a6:	429a      	cmp	r2, r3
  4004a8:	d3d5      	bcc.n	400456 <printStats+0x1e>
		printf("Q%d:\r\n", i);
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printf("IMU STATS \r\n");
  4004aa:	484d      	ldr	r0, [pc, #308]	; (4005e0 <printStats+0x1a8>)
  4004ac:	4b45      	ldr	r3, [pc, #276]	; (4005c4 <printStats+0x18c>)
  4004ae:	4798      	blx	r3
	for(i = 0; i < numberOfImus; i++)
  4004b0:	2300      	movs	r3, #0
  4004b2:	60fb      	str	r3, [r7, #12]
  4004b4:	e055      	b.n	400562 <printStats+0x12a>
	{		
		printf("IMU%d:\r\n", imuConfig[i].imuId);
  4004b6:	494b      	ldr	r1, [pc, #300]	; (4005e4 <printStats+0x1ac>)
  4004b8:	68fa      	ldr	r2, [r7, #12]
  4004ba:	4613      	mov	r3, r2
  4004bc:	00db      	lsls	r3, r3, #3
  4004be:	1a9b      	subs	r3, r3, r2
  4004c0:	00db      	lsls	r3, r3, #3
  4004c2:	440b      	add	r3, r1
  4004c4:	681b      	ldr	r3, [r3, #0]
  4004c6:	4848      	ldr	r0, [pc, #288]	; (4005e8 <printStats+0x1b0>)
  4004c8:	4619      	mov	r1, r3
  4004ca:	4b3e      	ldr	r3, [pc, #248]	; (4005c4 <printStats+0x18c>)
  4004cc:	4798      	blx	r3
		printf("	IMU Present: %d\r\n", imuConfig[i].imuPresent);
  4004ce:	4945      	ldr	r1, [pc, #276]	; (4005e4 <printStats+0x1ac>)
  4004d0:	68fa      	ldr	r2, [r7, #12]
  4004d2:	4613      	mov	r3, r2
  4004d4:	00db      	lsls	r3, r3, #3
  4004d6:	1a9b      	subs	r3, r3, r2
  4004d8:	00db      	lsls	r3, r3, #3
  4004da:	440b      	add	r3, r1
  4004dc:	3318      	adds	r3, #24
  4004de:	685b      	ldr	r3, [r3, #4]
  4004e0:	4842      	ldr	r0, [pc, #264]	; (4005ec <printStats+0x1b4>)
  4004e2:	4619      	mov	r1, r3
  4004e4:	4b37      	ldr	r3, [pc, #220]	; (4005c4 <printStats+0x18c>)
  4004e6:	4798      	blx	r3
		printf("	IMU Connected: %d\r\n", imuConfig[i].imuConnected);
  4004e8:	493e      	ldr	r1, [pc, #248]	; (4005e4 <printStats+0x1ac>)
  4004ea:	68fa      	ldr	r2, [r7, #12]
  4004ec:	4613      	mov	r3, r2
  4004ee:	00db      	lsls	r3, r3, #3
  4004f0:	1a9b      	subs	r3, r3, r2
  4004f2:	00db      	lsls	r3, r3, #3
  4004f4:	440b      	add	r3, r1
  4004f6:	3320      	adds	r3, #32
  4004f8:	681b      	ldr	r3, [r3, #0]
  4004fa:	483d      	ldr	r0, [pc, #244]	; (4005f0 <printStats+0x1b8>)
  4004fc:	4619      	mov	r1, r3
  4004fe:	4b31      	ldr	r3, [pc, #196]	; (4005c4 <printStats+0x18c>)
  400500:	4798      	blx	r3
		vTaskDelay(1);
  400502:	2001      	movs	r0, #1
  400504:	4b35      	ldr	r3, [pc, #212]	; (4005dc <printStats+0x1a4>)
  400506:	4798      	blx	r3
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
  400508:	4936      	ldr	r1, [pc, #216]	; (4005e4 <printStats+0x1ac>)
  40050a:	68fa      	ldr	r2, [r7, #12]
  40050c:	4613      	mov	r3, r2
  40050e:	00db      	lsls	r3, r3, #3
  400510:	1a9b      	subs	r3, r3, r2
  400512:	00db      	lsls	r3, r3, #3
  400514:	440b      	add	r3, r1
  400516:	3320      	adds	r3, #32
  400518:	689b      	ldr	r3, [r3, #8]
  40051a:	4836      	ldr	r0, [pc, #216]	; (4005f4 <printStats+0x1bc>)
  40051c:	4619      	mov	r1, r3
  40051e:	4b29      	ldr	r3, [pc, #164]	; (4005c4 <printStats+0x18c>)
  400520:	4798      	blx	r3
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
  400522:	4930      	ldr	r1, [pc, #192]	; (4005e4 <printStats+0x1ac>)
  400524:	68fa      	ldr	r2, [r7, #12]
  400526:	4613      	mov	r3, r2
  400528:	00db      	lsls	r3, r3, #3
  40052a:	1a9b      	subs	r3, r3, r2
  40052c:	00db      	lsls	r3, r3, #3
  40052e:	440b      	add	r3, r1
  400530:	3330      	adds	r3, #48	; 0x30
  400532:	685b      	ldr	r3, [r3, #4]
  400534:	4830      	ldr	r0, [pc, #192]	; (4005f8 <printStats+0x1c0>)
  400536:	4619      	mov	r1, r3
  400538:	4b22      	ldr	r3, [pc, #136]	; (4005c4 <printStats+0x18c>)
  40053a:	4798      	blx	r3
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
  40053c:	4929      	ldr	r1, [pc, #164]	; (4005e4 <printStats+0x1ac>)
  40053e:	68fa      	ldr	r2, [r7, #12]
  400540:	4613      	mov	r3, r2
  400542:	00db      	lsls	r3, r3, #3
  400544:	1a9b      	subs	r3, r3, r2
  400546:	00db      	lsls	r3, r3, #3
  400548:	440b      	add	r3, r1
  40054a:	3320      	adds	r3, #32
  40054c:	685b      	ldr	r3, [r3, #4]
  40054e:	482b      	ldr	r0, [pc, #172]	; (4005fc <printStats+0x1c4>)
  400550:	4619      	mov	r1, r3
  400552:	4b1c      	ldr	r3, [pc, #112]	; (4005c4 <printStats+0x18c>)
  400554:	4798      	blx	r3
		vTaskDelay(1);
  400556:	2001      	movs	r0, #1
  400558:	4b20      	ldr	r3, [pc, #128]	; (4005dc <printStats+0x1a4>)
  40055a:	4798      	blx	r3
		printf("	Corrupt Packets: %d\r\n", quinticConfig[i].corruptPacketCnt);
		printf("	Dropped Bytes:   %d\r\n", drv_uart_getDroppedBytes(quinticConfig[i].uartDevice));
		vTaskDelay(1);
	}
	printf("IMU STATS \r\n");
	for(i = 0; i < numberOfImus; i++)
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	3301      	adds	r3, #1
  400560:	60fb      	str	r3, [r7, #12]
  400562:	68fa      	ldr	r2, [r7, #12]
  400564:	68bb      	ldr	r3, [r7, #8]
  400566:	429a      	cmp	r2, r3
  400568:	d3a5      	bcc.n	4004b6 <printStats+0x7e>
		printf("	Dropped Packets: %d\r\n", imuConfig[i].stats.droppedPackets);
		printf("	Average Rx interval(ticks): %d\r\n",imuConfig[i].stats.avgPacketTime);
		printf("	Packet Rx Count:   %d\r\n", imuConfig[i].stats.packetCnt);
		vTaskDelay(1);
	}
	printf("Total Bytes Written: %d\r\n", totalBytesWritten); 
  40056a:	4b25      	ldr	r3, [pc, #148]	; (400600 <printStats+0x1c8>)
  40056c:	681b      	ldr	r3, [r3, #0]
  40056e:	4825      	ldr	r0, [pc, #148]	; (400604 <printStats+0x1cc>)
  400570:	4619      	mov	r1, r3
  400572:	4b14      	ldr	r3, [pc, #80]	; (4005c4 <printStats+0x18c>)
  400574:	4798      	blx	r3
	vTaskDelay(1);
  400576:	2001      	movs	r0, #1
  400578:	4b18      	ldr	r3, [pc, #96]	; (4005dc <printStats+0x1a4>)
  40057a:	4798      	blx	r3
	printf("Total Frames Written: %d \r\n", totalFramesWritten); 
  40057c:	4b22      	ldr	r3, [pc, #136]	; (400608 <printStats+0x1d0>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	4822      	ldr	r0, [pc, #136]	; (40060c <printStats+0x1d4>)
  400582:	4619      	mov	r1, r3
  400584:	4b0f      	ldr	r3, [pc, #60]	; (4005c4 <printStats+0x18c>)
  400586:	4798      	blx	r3
	int queuedMessages = uxQueueMessagesWaiting(queue_dataHandler);
  400588:	4b21      	ldr	r3, [pc, #132]	; (400610 <printStats+0x1d8>)
  40058a:	681b      	ldr	r3, [r3, #0]
  40058c:	4618      	mov	r0, r3
  40058e:	4b21      	ldr	r3, [pc, #132]	; (400614 <printStats+0x1dc>)
  400590:	4798      	blx	r3
  400592:	4603      	mov	r3, r0
  400594:	603b      	str	r3, [r7, #0]
	printf("Queued Messages: %d\r\n", queuedMessages); 
  400596:	4820      	ldr	r0, [pc, #128]	; (400618 <printStats+0x1e0>)
  400598:	6839      	ldr	r1, [r7, #0]
  40059a:	4b0a      	ldr	r3, [pc, #40]	; (4005c4 <printStats+0x18c>)
  40059c:	4798      	blx	r3
	printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());	
  40059e:	4b1f      	ldr	r3, [pc, #124]	; (40061c <printStats+0x1e4>)
  4005a0:	4798      	blx	r3
  4005a2:	4603      	mov	r3, r0
  4005a4:	481e      	ldr	r0, [pc, #120]	; (400620 <printStats+0x1e8>)
  4005a6:	4619      	mov	r1, r3
  4005a8:	4b06      	ldr	r3, [pc, #24]	; (4005c4 <printStats+0x18c>)
  4005aa:	4798      	blx	r3
	vTaskList((signed portCHAR *)runTimeStats);
  4005ac:	481d      	ldr	r0, [pc, #116]	; (400624 <printStats+0x1ec>)
  4005ae:	4b1e      	ldr	r3, [pc, #120]	; (400628 <printStats+0x1f0>)
  4005b0:	4798      	blx	r3
	printf(runTimeStats);
  4005b2:	481c      	ldr	r0, [pc, #112]	; (400624 <printStats+0x1ec>)
  4005b4:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <printStats+0x18c>)
  4005b6:	4798      	blx	r3
}
  4005b8:	3710      	adds	r7, #16
  4005ba:	46bd      	mov	sp, r7
  4005bc:	bd80      	pop	{r7, pc}
  4005be:	bf00      	nop
  4005c0:	0041805c 	.word	0x0041805c
  4005c4:	0040eadd 	.word	0x0040eadd
  4005c8:	00418070 	.word	0x00418070
  4005cc:	200002e0 	.word	0x200002e0
  4005d0:	00418078 	.word	0x00418078
  4005d4:	0040b755 	.word	0x0040b755
  4005d8:	00418090 	.word	0x00418090
  4005dc:	00408855 	.word	0x00408855
  4005e0:	004180a8 	.word	0x004180a8
  4005e4:	200000b0 	.word	0x200000b0
  4005e8:	004180b8 	.word	0x004180b8
  4005ec:	004180c4 	.word	0x004180c4
  4005f0:	004180d8 	.word	0x004180d8
  4005f4:	004180f0 	.word	0x004180f0
  4005f8:	00418108 	.word	0x00418108
  4005fc:	0041812c 	.word	0x0041812c
  400600:	20001214 	.word	0x20001214
  400604:	00418148 	.word	0x00418148
  400608:	20001da0 	.word	0x20001da0
  40060c:	00418164 	.word	0x00418164
  400610:	20001d98 	.word	0x20001d98
  400614:	00408381 	.word	0x00408381
  400618:	00418180 	.word	0x00418180
  40061c:	00408a81 	.word	0x00408a81
  400620:	00418198 	.word	0x00418198
  400624:	20000db4 	.word	0x20000db4
  400628:	00408a99 	.word	0x00408a99

0040062c <processCommand>:
 * @brief A general Command processor which receives commands from Serial terminal and executes them
 * @param char* command, size_t cmdSize
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error 
 ***********************************************************************************************/
static status_t processCommand(char* command, size_t cmdSize)
{
  40062c:	b580      	push	{r7, lr}
  40062e:	b084      	sub	sp, #16
  400630:	af00      	add	r7, sp, #0
  400632:	6078      	str	r0, [r7, #4]
  400634:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS; 
  400636:	2300      	movs	r3, #0
  400638:	73fb      	strb	r3, [r7, #15]
	if(strncmp(command, "SDCardTest\r\n",cmdSize) == 0)
  40063a:	6878      	ldr	r0, [r7, #4]
  40063c:	4985      	ldr	r1, [pc, #532]	; (400854 <processCommand+0x228>)
  40063e:	683a      	ldr	r2, [r7, #0]
  400640:	4b85      	ldr	r3, [pc, #532]	; (400858 <processCommand+0x22c>)
  400642:	4798      	blx	r3
  400644:	4603      	mov	r3, r0
  400646:	2b00      	cmp	r3, #0
  400648:	d103      	bne.n	400652 <processCommand+0x26>
	{
		printf("received the SD card test command\r\n");				
  40064a:	4884      	ldr	r0, [pc, #528]	; (40085c <processCommand+0x230>)
  40064c:	4b84      	ldr	r3, [pc, #528]	; (400860 <processCommand+0x234>)
  40064e:	4798      	blx	r3
  400650:	e17c      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "dataBoardGpioTest\r\n",cmdSize) == 0)
  400652:	6878      	ldr	r0, [r7, #4]
  400654:	4983      	ldr	r1, [pc, #524]	; (400864 <processCommand+0x238>)
  400656:	683a      	ldr	r2, [r7, #0]
  400658:	4b7f      	ldr	r3, [pc, #508]	; (400858 <processCommand+0x22c>)
  40065a:	4798      	blx	r3
  40065c:	4603      	mov	r3, r0
  40065e:	2b00      	cmp	r3, #0
  400660:	d103      	bne.n	40066a <processCommand+0x3e>
	{
		printf("received the GPIO test command\r\n");
  400662:	4881      	ldr	r0, [pc, #516]	; (400868 <processCommand+0x23c>)
  400664:	4b7e      	ldr	r3, [pc, #504]	; (400860 <processCommand+0x234>)
  400666:	4798      	blx	r3
  400668:	e170      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "BLE Test\r\n",cmdSize) == 0)
  40066a:	6878      	ldr	r0, [r7, #4]
  40066c:	497f      	ldr	r1, [pc, #508]	; (40086c <processCommand+0x240>)
  40066e:	683a      	ldr	r2, [r7, #0]
  400670:	4b79      	ldr	r3, [pc, #484]	; (400858 <processCommand+0x22c>)
  400672:	4798      	blx	r3
  400674:	4603      	mov	r3, r0
  400676:	2b00      	cmp	r3, #0
  400678:	d104      	bne.n	400684 <processCommand+0x58>
	{
		printf("received the GPIO test command\r\n",cmdSize);
  40067a:	487b      	ldr	r0, [pc, #492]	; (400868 <processCommand+0x23c>)
  40067c:	6839      	ldr	r1, [r7, #0]
  40067e:	4b78      	ldr	r3, [pc, #480]	; (400860 <processCommand+0x234>)
  400680:	4798      	blx	r3
  400682:	e163      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "StartImus\r\n",cmdSize) == 0)
  400684:	6878      	ldr	r0, [r7, #4]
  400686:	497a      	ldr	r1, [pc, #488]	; (400870 <processCommand+0x244>)
  400688:	683a      	ldr	r2, [r7, #0]
  40068a:	4b73      	ldr	r3, [pc, #460]	; (400858 <processCommand+0x22c>)
  40068c:	4798      	blx	r3
  40068e:	4603      	mov	r3, r0
  400690:	2b00      	cmp	r3, #0
  400692:	d112      	bne.n	4006ba <processCommand+0x8e>
	{
		task_quintic_startRecording(&quinticConfig[0]);
  400694:	4877      	ldr	r0, [pc, #476]	; (400874 <processCommand+0x248>)
  400696:	4b78      	ldr	r3, [pc, #480]	; (400878 <processCommand+0x24c>)
  400698:	4798      	blx	r3
		task_quintic_startRecording(&quinticConfig[1]);
  40069a:	4878      	ldr	r0, [pc, #480]	; (40087c <processCommand+0x250>)
  40069c:	4b76      	ldr	r3, [pc, #472]	; (400878 <processCommand+0x24c>)
  40069e:	4798      	blx	r3
		task_quintic_startRecording(&quinticConfig[2]);
  4006a0:	4877      	ldr	r0, [pc, #476]	; (400880 <processCommand+0x254>)
  4006a2:	4b75      	ldr	r3, [pc, #468]	; (400878 <processCommand+0x24c>)
  4006a4:	4798      	blx	r3
		task_fabSense_start(&fsConfig); 
  4006a6:	4877      	ldr	r0, [pc, #476]	; (400884 <processCommand+0x258>)
  4006a8:	4b77      	ldr	r3, [pc, #476]	; (400888 <processCommand+0x25c>)
  4006aa:	4798      	blx	r3
		printf("start command Issued\r\n"); 	
  4006ac:	4877      	ldr	r0, [pc, #476]	; (40088c <processCommand+0x260>)
  4006ae:	4b6c      	ldr	r3, [pc, #432]	; (400860 <processCommand+0x234>)
  4006b0:	4798      	blx	r3
		enableRecording = true; 
  4006b2:	4b77      	ldr	r3, [pc, #476]	; (400890 <processCommand+0x264>)
  4006b4:	2201      	movs	r2, #1
  4006b6:	701a      	strb	r2, [r3, #0]
  4006b8:	e148      	b.n	40094c <processCommand+0x320>
	}	
	else if(strncmp(command, "StopImus\r\n",cmdSize) == 0)
  4006ba:	6878      	ldr	r0, [r7, #4]
  4006bc:	4975      	ldr	r1, [pc, #468]	; (400894 <processCommand+0x268>)
  4006be:	683a      	ldr	r2, [r7, #0]
  4006c0:	4b65      	ldr	r3, [pc, #404]	; (400858 <processCommand+0x22c>)
  4006c2:	4798      	blx	r3
  4006c4:	4603      	mov	r3, r0
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d112      	bne.n	4006f0 <processCommand+0xc4>
	{		
		task_quintic_stopRecording(&quinticConfig[0]);
  4006ca:	486a      	ldr	r0, [pc, #424]	; (400874 <processCommand+0x248>)
  4006cc:	4b72      	ldr	r3, [pc, #456]	; (400898 <processCommand+0x26c>)
  4006ce:	4798      	blx	r3
		task_quintic_stopRecording(&quinticConfig[1]);
  4006d0:	486a      	ldr	r0, [pc, #424]	; (40087c <processCommand+0x250>)
  4006d2:	4b71      	ldr	r3, [pc, #452]	; (400898 <processCommand+0x26c>)
  4006d4:	4798      	blx	r3
		task_quintic_stopRecording(&quinticConfig[2]);	
  4006d6:	486a      	ldr	r0, [pc, #424]	; (400880 <processCommand+0x254>)
  4006d8:	4b6f      	ldr	r3, [pc, #444]	; (400898 <processCommand+0x26c>)
  4006da:	4798      	blx	r3
		task_fabSense_stop(&fsConfig); 
  4006dc:	4869      	ldr	r0, [pc, #420]	; (400884 <processCommand+0x258>)
  4006de:	4b6f      	ldr	r3, [pc, #444]	; (40089c <processCommand+0x270>)
  4006e0:	4798      	blx	r3
		printf("stop command issued\r\n"); 	
  4006e2:	486f      	ldr	r0, [pc, #444]	; (4008a0 <processCommand+0x274>)
  4006e4:	4b5e      	ldr	r3, [pc, #376]	; (400860 <processCommand+0x234>)
  4006e6:	4798      	blx	r3
		enableRecording = false; 
  4006e8:	4b69      	ldr	r3, [pc, #420]	; (400890 <processCommand+0x264>)
  4006ea:	2200      	movs	r2, #0
  4006ec:	701a      	strb	r2, [r3, #0]
  4006ee:	e12d      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "setRst2Low\r\n",cmdSize) == 0)
  4006f0:	6878      	ldr	r0, [r7, #4]
  4006f2:	496c      	ldr	r1, [pc, #432]	; (4008a4 <processCommand+0x278>)
  4006f4:	683a      	ldr	r2, [r7, #0]
  4006f6:	4b58      	ldr	r3, [pc, #352]	; (400858 <processCommand+0x22c>)
  4006f8:	4798      	blx	r3
  4006fa:	4603      	mov	r3, r0
  4006fc:	2b00      	cmp	r3, #0
  4006fe:	d10a      	bne.n	400716 <processCommand+0xea>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST2, DRV_GPIO_PIN_STATE_LOW);
  400700:	200a      	movs	r0, #10
  400702:	2100      	movs	r1, #0
  400704:	4b68      	ldr	r3, [pc, #416]	; (4008a8 <processCommand+0x27c>)
  400706:	4798      	blx	r3
		printf("Pin set low\r\n");
  400708:	4868      	ldr	r0, [pc, #416]	; (4008ac <processCommand+0x280>)
  40070a:	4b55      	ldr	r3, [pc, #340]	; (400860 <processCommand+0x234>)
  40070c:	4798      	blx	r3
		enableRecording = false;
  40070e:	4b60      	ldr	r3, [pc, #384]	; (400890 <processCommand+0x264>)
  400710:	2200      	movs	r2, #0
  400712:	701a      	strb	r2, [r3, #0]
  400714:	e11a      	b.n	40094c <processCommand+0x320>
	}	
	else if(strncmp(command, "setRst2High\r\n",cmdSize) == 0)
  400716:	6878      	ldr	r0, [r7, #4]
  400718:	4965      	ldr	r1, [pc, #404]	; (4008b0 <processCommand+0x284>)
  40071a:	683a      	ldr	r2, [r7, #0]
  40071c:	4b4e      	ldr	r3, [pc, #312]	; (400858 <processCommand+0x22c>)
  40071e:	4798      	blx	r3
  400720:	4603      	mov	r3, r0
  400722:	2b00      	cmp	r3, #0
  400724:	d10a      	bne.n	40073c <processCommand+0x110>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST2, DRV_GPIO_PIN_STATE_HIGH);
  400726:	200a      	movs	r0, #10
  400728:	2101      	movs	r1, #1
  40072a:	4b5f      	ldr	r3, [pc, #380]	; (4008a8 <processCommand+0x27c>)
  40072c:	4798      	blx	r3
		printf("Pin set high\r\n");
  40072e:	4861      	ldr	r0, [pc, #388]	; (4008b4 <processCommand+0x288>)
  400730:	4b4b      	ldr	r3, [pc, #300]	; (400860 <processCommand+0x234>)
  400732:	4798      	blx	r3
		enableRecording = false;
  400734:	4b56      	ldr	r3, [pc, #344]	; (400890 <processCommand+0x264>)
  400736:	2200      	movs	r2, #0
  400738:	701a      	strb	r2, [r3, #0]
  40073a:	e107      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "rstBLE\r\n",cmdSize) == 0)
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	495e      	ldr	r1, [pc, #376]	; (4008b8 <processCommand+0x28c>)
  400740:	683a      	ldr	r2, [r7, #0]
  400742:	4b45      	ldr	r3, [pc, #276]	; (400858 <processCommand+0x22c>)
  400744:	4798      	blx	r3
  400746:	4603      	mov	r3, r0
  400748:	2b00      	cmp	r3, #0
  40074a:	d119      	bne.n	400780 <processCommand+0x154>
	{
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST3, DRV_GPIO_PIN_STATE_LOW);
  40074c:	200b      	movs	r0, #11
  40074e:	2100      	movs	r1, #0
  400750:	4b55      	ldr	r3, [pc, #340]	; (4008a8 <processCommand+0x27c>)
  400752:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST1, DRV_GPIO_PIN_STATE_LOW);
  400754:	2009      	movs	r0, #9
  400756:	2100      	movs	r1, #0
  400758:	4b53      	ldr	r3, [pc, #332]	; (4008a8 <processCommand+0x27c>)
  40075a:	4798      	blx	r3
		vTaskDelay(50);
  40075c:	2032      	movs	r0, #50	; 0x32
  40075e:	4b57      	ldr	r3, [pc, #348]	; (4008bc <processCommand+0x290>)
  400760:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST3, DRV_GPIO_PIN_STATE_HIGH);
  400762:	200b      	movs	r0, #11
  400764:	2101      	movs	r1, #1
  400766:	4b50      	ldr	r3, [pc, #320]	; (4008a8 <processCommand+0x27c>)
  400768:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST1, DRV_GPIO_PIN_STATE_HIGH);
  40076a:	2009      	movs	r0, #9
  40076c:	2101      	movs	r1, #1
  40076e:	4b4e      	ldr	r3, [pc, #312]	; (4008a8 <processCommand+0x27c>)
  400770:	4798      	blx	r3
		printf("Pin reset\r\n");
  400772:	4853      	ldr	r0, [pc, #332]	; (4008c0 <processCommand+0x294>)
  400774:	4b3a      	ldr	r3, [pc, #232]	; (400860 <processCommand+0x234>)
  400776:	4798      	blx	r3
		enableRecording = false;
  400778:	4b45      	ldr	r3, [pc, #276]	; (400890 <processCommand+0x264>)
  40077a:	2200      	movs	r2, #0
  40077c:	701a      	strb	r2, [r3, #0]
  40077e:	e0e5      	b.n	40094c <processCommand+0x320>
	}	
	else if(strncmp(command, "disableUARTs\r\n",cmdSize) == 0)
  400780:	6878      	ldr	r0, [r7, #4]
  400782:	4950      	ldr	r1, [pc, #320]	; (4008c4 <processCommand+0x298>)
  400784:	683a      	ldr	r2, [r7, #0]
  400786:	4b34      	ldr	r3, [pc, #208]	; (400858 <processCommand+0x22c>)
  400788:	4798      	blx	r3
  40078a:	4603      	mov	r3, r0
  40078c:	2b00      	cmp	r3, #0
  40078e:	d111      	bne.n	4007b4 <processCommand+0x188>
	{
		drv_uart_deInit(&uart1Config);
  400790:	484d      	ldr	r0, [pc, #308]	; (4008c8 <processCommand+0x29c>)
  400792:	4b4e      	ldr	r3, [pc, #312]	; (4008cc <processCommand+0x2a0>)
  400794:	4798      	blx	r3
		drv_uart_deInit(&usart0Config);
  400796:	484e      	ldr	r0, [pc, #312]	; (4008d0 <processCommand+0x2a4>)
  400798:	4b4c      	ldr	r3, [pc, #304]	; (4008cc <processCommand+0x2a0>)
  40079a:	4798      	blx	r3
		drv_uart_deInit(&usart1Config);
  40079c:	484d      	ldr	r0, [pc, #308]	; (4008d4 <processCommand+0x2a8>)
  40079e:	4b4b      	ldr	r3, [pc, #300]	; (4008cc <processCommand+0x2a0>)
  4007a0:	4798      	blx	r3
		drv_gpio_ConfigureBLEForProgramming(); 
  4007a2:	4b4d      	ldr	r3, [pc, #308]	; (4008d8 <processCommand+0x2ac>)
  4007a4:	4798      	blx	r3
		printf("UARTs set as High impedance\r\n");
  4007a6:	484d      	ldr	r0, [pc, #308]	; (4008dc <processCommand+0x2b0>)
  4007a8:	4b2d      	ldr	r3, [pc, #180]	; (400860 <processCommand+0x234>)
  4007aa:	4798      	blx	r3
		enableRecording = false;
  4007ac:	4b38      	ldr	r3, [pc, #224]	; (400890 <processCommand+0x264>)
  4007ae:	2200      	movs	r2, #0
  4007b0:	701a      	strb	r2, [r3, #0]
  4007b2:	e0cb      	b.n	40094c <processCommand+0x320>
	}	
	else if(strncmp(command, "setTime",7) == 0)
  4007b4:	6878      	ldr	r0, [r7, #4]
  4007b6:	494a      	ldr	r1, [pc, #296]	; (4008e0 <processCommand+0x2b4>)
  4007b8:	2207      	movs	r2, #7
  4007ba:	4b27      	ldr	r3, [pc, #156]	; (400858 <processCommand+0x22c>)
  4007bc:	4798      	blx	r3
  4007be:	4603      	mov	r3, r0
  4007c0:	2b00      	cmp	r3, #0
  4007c2:	d10c      	bne.n	4007de <processCommand+0x1b2>
	{
		if(strlen(command) >= 24)
  4007c4:	6878      	ldr	r0, [r7, #4]
  4007c6:	4b47      	ldr	r3, [pc, #284]	; (4008e4 <processCommand+0x2b8>)
  4007c8:	4798      	blx	r3
  4007ca:	4603      	mov	r3, r0
  4007cc:	2b17      	cmp	r3, #23
  4007ce:	f240 80bd 	bls.w	40094c <processCommand+0x320>
		{
			setTimeFromString(command+7); 
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	3307      	adds	r3, #7
  4007d6:	4618      	mov	r0, r3
  4007d8:	4b43      	ldr	r3, [pc, #268]	; (4008e8 <processCommand+0x2bc>)
  4007da:	4798      	blx	r3
  4007dc:	e0b6      	b.n	40094c <processCommand+0x320>
		}
	}
	else if(strncmp(command, "?\r\n",3) == 0)
  4007de:	6878      	ldr	r0, [r7, #4]
  4007e0:	4942      	ldr	r1, [pc, #264]	; (4008ec <processCommand+0x2c0>)
  4007e2:	2203      	movs	r2, #3
  4007e4:	4b1c      	ldr	r3, [pc, #112]	; (400858 <processCommand+0x22c>)
  4007e6:	4798      	blx	r3
  4007e8:	4603      	mov	r3, r0
  4007ea:	2b00      	cmp	r3, #0
  4007ec:	d114      	bne.n	400818 <processCommand+0x1ec>
	{
		printf("HEDDOKO BRAIN PACK %s\r\n", VERSION); 
  4007ee:	4840      	ldr	r0, [pc, #256]	; (4008f0 <processCommand+0x2c4>)
  4007f0:	4940      	ldr	r1, [pc, #256]	; (4008f4 <processCommand+0x2c8>)
  4007f2:	4b1b      	ldr	r3, [pc, #108]	; (400860 <processCommand+0x234>)
  4007f4:	4798      	blx	r3
		printf("BUILD DATE: %s %s\r\n", __DATE__,__TIME__);
  4007f6:	4840      	ldr	r0, [pc, #256]	; (4008f8 <processCommand+0x2cc>)
  4007f8:	4940      	ldr	r1, [pc, #256]	; (4008fc <processCommand+0x2d0>)
  4007fa:	4a41      	ldr	r2, [pc, #260]	; (400900 <processCommand+0x2d4>)
  4007fc:	4b18      	ldr	r3, [pc, #96]	; (400860 <processCommand+0x234>)
  4007fe:	4798      	blx	r3
		printf("SUIT NUMBER: %s\r\n",brainSettings.suitNumber); 
  400800:	4840      	ldr	r0, [pc, #256]	; (400904 <processCommand+0x2d8>)
  400802:	4941      	ldr	r1, [pc, #260]	; (400908 <processCommand+0x2dc>)
  400804:	4b16      	ldr	r3, [pc, #88]	; (400860 <processCommand+0x234>)
  400806:	4798      	blx	r3
		printf("SUIT TIME: %s \r\n",getTimeString());  		
  400808:	4b40      	ldr	r3, [pc, #256]	; (40090c <processCommand+0x2e0>)
  40080a:	4798      	blx	r3
  40080c:	4603      	mov	r3, r0
  40080e:	4840      	ldr	r0, [pc, #256]	; (400910 <processCommand+0x2e4>)
  400810:	4619      	mov	r1, r3
  400812:	4b13      	ldr	r3, [pc, #76]	; (400860 <processCommand+0x234>)
  400814:	4798      	blx	r3
  400816:	e099      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command, "flushUarts\r\n",cmdSize) == 0)
  400818:	6878      	ldr	r0, [r7, #4]
  40081a:	493e      	ldr	r1, [pc, #248]	; (400914 <processCommand+0x2e8>)
  40081c:	683a      	ldr	r2, [r7, #0]
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <processCommand+0x22c>)
  400820:	4798      	blx	r3
  400822:	4603      	mov	r3, r0
  400824:	2b00      	cmp	r3, #0
  400826:	d109      	bne.n	40083c <processCommand+0x210>
	{
		drv_uart_flushRx(&usart1Config);
  400828:	482a      	ldr	r0, [pc, #168]	; (4008d4 <processCommand+0x2a8>)
  40082a:	4b3b      	ldr	r3, [pc, #236]	; (400918 <processCommand+0x2ec>)
  40082c:	4798      	blx	r3
		drv_uart_flushRx(&uart0Config);
  40082e:	483b      	ldr	r0, [pc, #236]	; (40091c <processCommand+0x2f0>)
  400830:	4b39      	ldr	r3, [pc, #228]	; (400918 <processCommand+0x2ec>)
  400832:	4798      	blx	r3
		drv_uart_flushRx(&usart0Config);
  400834:	4826      	ldr	r0, [pc, #152]	; (4008d0 <processCommand+0x2a4>)
  400836:	4b38      	ldr	r3, [pc, #224]	; (400918 <processCommand+0x2ec>)
  400838:	4798      	blx	r3
  40083a:	e087      	b.n	40094c <processCommand+0x320>
	}
	else if(strncmp(command,"getStats\r\n", cmdSize) == 0)
  40083c:	6878      	ldr	r0, [r7, #4]
  40083e:	4938      	ldr	r1, [pc, #224]	; (400920 <processCommand+0x2f4>)
  400840:	683a      	ldr	r2, [r7, #0]
  400842:	4b05      	ldr	r3, [pc, #20]	; (400858 <processCommand+0x22c>)
  400844:	4798      	blx	r3
  400846:	4603      	mov	r3, r0
  400848:	2b00      	cmp	r3, #0
  40084a:	d16d      	bne.n	400928 <processCommand+0x2fc>
	{
		printStats(); 
  40084c:	4b35      	ldr	r3, [pc, #212]	; (400924 <processCommand+0x2f8>)
  40084e:	4798      	blx	r3
  400850:	e07c      	b.n	40094c <processCommand+0x320>
  400852:	bf00      	nop
  400854:	004181a8 	.word	0x004181a8
  400858:	0040f879 	.word	0x0040f879
  40085c:	004181b8 	.word	0x004181b8
  400860:	0040eadd 	.word	0x0040eadd
  400864:	004181dc 	.word	0x004181dc
  400868:	004181f0 	.word	0x004181f0
  40086c:	00418214 	.word	0x00418214
  400870:	00418220 	.word	0x00418220
  400874:	200002e0 	.word	0x200002e0
  400878:	0040cbcd 	.word	0x0040cbcd
  40087c:	2000030c 	.word	0x2000030c
  400880:	20000338 	.word	0x20000338
  400884:	20000364 	.word	0x20000364
  400888:	0040c1f5 	.word	0x0040c1f5
  40088c:	0041822c 	.word	0x0041822c
  400890:	20000db0 	.word	0x20000db0
  400894:	00418244 	.word	0x00418244
  400898:	0040cbf5 	.word	0x0040cbf5
  40089c:	0040c219 	.word	0x0040c219
  4008a0:	00418250 	.word	0x00418250
  4008a4:	00418268 	.word	0x00418268
  4008a8:	0040a9d9 	.word	0x0040a9d9
  4008ac:	00418278 	.word	0x00418278
  4008b0:	00418288 	.word	0x00418288
  4008b4:	00418298 	.word	0x00418298
  4008b8:	004182a8 	.word	0x004182a8
  4008bc:	00408855 	.word	0x00408855
  4008c0:	004182b4 	.word	0x004182b4
  4008c4:	004182c0 	.word	0x004182c0
  4008c8:	20000064 	.word	0x20000064
  4008cc:	0040b6d5 	.word	0x0040b6d5
  4008d0:	2000007c 	.word	0x2000007c
  4008d4:	20000094 	.word	0x20000094
  4008d8:	0040a811 	.word	0x0040a811
  4008dc:	004182d0 	.word	0x004182d0
  4008e0:	004182f0 	.word	0x004182f0
  4008e4:	0040f819 	.word	0x0040f819
  4008e8:	00400971 	.word	0x00400971
  4008ec:	004182f8 	.word	0x004182f8
  4008f0:	004182fc 	.word	0x004182fc
  4008f4:	00418314 	.word	0x00418314
  4008f8:	0041831c 	.word	0x0041831c
  4008fc:	00418330 	.word	0x00418330
  400900:	0041833c 	.word	0x0041833c
  400904:	00418348 	.word	0x00418348
  400908:	20001b38 	.word	0x20001b38
  40090c:	004009e5 	.word	0x004009e5
  400910:	0041835c 	.word	0x0041835c
  400914:	00418370 	.word	0x00418370
  400918:	0040b91d 	.word	0x0040b91d
  40091c:	2000004c 	.word	0x2000004c
  400920:	00418380 	.word	0x00418380
  400924:	00400439 	.word	0x00400439
	}
	else if(strncmp(command,"reset\r\n", cmdSize) == 0)	
  400928:	6878      	ldr	r0, [r7, #4]
  40092a:	490b      	ldr	r1, [pc, #44]	; (400958 <processCommand+0x32c>)
  40092c:	683a      	ldr	r2, [r7, #0]
  40092e:	4b0b      	ldr	r3, [pc, #44]	; (40095c <processCommand+0x330>)
  400930:	4798      	blx	r3
  400932:	4603      	mov	r3, r0
  400934:	2b00      	cmp	r3, #0
  400936:	d103      	bne.n	400940 <processCommand+0x314>
	{
		rstc_start_software_reset(RSTC);
  400938:	4809      	ldr	r0, [pc, #36]	; (400960 <processCommand+0x334>)
  40093a:	4b0a      	ldr	r3, [pc, #40]	; (400964 <processCommand+0x338>)
  40093c:	4798      	blx	r3
  40093e:	e005      	b.n	40094c <processCommand+0x320>
	}
	else
	{
		printf("Received unknown command: %s \r\n", command);
  400940:	4809      	ldr	r0, [pc, #36]	; (400968 <processCommand+0x33c>)
  400942:	6879      	ldr	r1, [r7, #4]
  400944:	4b09      	ldr	r3, [pc, #36]	; (40096c <processCommand+0x340>)
  400946:	4798      	blx	r3
		status = STATUS_PASS; 
  400948:	2300      	movs	r3, #0
  40094a:	73fb      	strb	r3, [r7, #15]
	}
	return status;	
  40094c:	7bfb      	ldrb	r3, [r7, #15]
}
  40094e:	4618      	mov	r0, r3
  400950:	3710      	adds	r7, #16
  400952:	46bd      	mov	sp, r7
  400954:	bd80      	pop	{r7, pc}
  400956:	bf00      	nop
  400958:	0041838c 	.word	0x0041838c
  40095c:	0040f879 	.word	0x0040f879
  400960:	400e1400 	.word	0x400e1400
  400964:	00400121 	.word	0x00400121
  400968:	00418394 	.word	0x00418394
  40096c:	0040eadd 	.word	0x0040eadd

00400970 <setTimeFromString>:

static void setTimeFromString(char* dateTime)
{
  400970:	b590      	push	{r4, r7, lr}
  400972:	b091      	sub	sp, #68	; 0x44
  400974:	af06      	add	r7, sp, #24
  400976:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second; 
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  400978:	f107 0224 	add.w	r2, r7, #36	; 0x24
  40097c:	f107 0320 	add.w	r3, r7, #32
  400980:	f107 011c 	add.w	r1, r7, #28
  400984:	9100      	str	r1, [sp, #0]
  400986:	f107 0118 	add.w	r1, r7, #24
  40098a:	9101      	str	r1, [sp, #4]
  40098c:	f107 0114 	add.w	r1, r7, #20
  400990:	9102      	str	r1, [sp, #8]
  400992:	f107 0110 	add.w	r1, r7, #16
  400996:	9103      	str	r1, [sp, #12]
  400998:	f107 010c 	add.w	r1, r7, #12
  40099c:	9104      	str	r1, [sp, #16]
  40099e:	6878      	ldr	r0, [r7, #4]
  4009a0:	490b      	ldr	r1, [pc, #44]	; (4009d0 <setTimeFromString+0x60>)
  4009a2:	4c0c      	ldr	r4, [pc, #48]	; (4009d4 <setTimeFromString+0x64>)
  4009a4:	47a0      	blx	r4
  4009a6:	4603      	mov	r3, r0
  4009a8:	2b07      	cmp	r3, #7
  4009aa:	d10d      	bne.n	4009c8 <setTimeFromString+0x58>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second); 
  4009ac:	6979      	ldr	r1, [r7, #20]
  4009ae:	693a      	ldr	r2, [r7, #16]
  4009b0:	68fb      	ldr	r3, [r7, #12]
  4009b2:	4809      	ldr	r0, [pc, #36]	; (4009d8 <setTimeFromString+0x68>)
  4009b4:	4c09      	ldr	r4, [pc, #36]	; (4009dc <setTimeFromString+0x6c>)
  4009b6:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow); 
  4009b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4009ba:	6a3a      	ldr	r2, [r7, #32]
  4009bc:	69fb      	ldr	r3, [r7, #28]
  4009be:	69b8      	ldr	r0, [r7, #24]
  4009c0:	9000      	str	r0, [sp, #0]
  4009c2:	4805      	ldr	r0, [pc, #20]	; (4009d8 <setTimeFromString+0x68>)
  4009c4:	4c06      	ldr	r4, [pc, #24]	; (4009e0 <setTimeFromString+0x70>)
  4009c6:	47a0      	blx	r4
	}
}
  4009c8:	372c      	adds	r7, #44	; 0x2c
  4009ca:	46bd      	mov	sp, r7
  4009cc:	bd90      	pop	{r4, r7, pc}
  4009ce:	bf00      	nop
  4009d0:	004183b4 	.word	0x004183b4
  4009d4:	0040f415 	.word	0x0040f415
  4009d8:	400e1460 	.word	0x400e1460
  4009dc:	00403fad 	.word	0x00403fad
  4009e0:	0040419d 	.word	0x0040419d

004009e4 <getTimeString>:
char timeString[100] = {0}; 
static char* getTimeString()
{
  4009e4:	b590      	push	{r4, r7, lr}
  4009e6:	b087      	sub	sp, #28
  4009e8:	af02      	add	r7, sp, #8
	uint32_t hour, minute, second; 
	rtc_get_time(RTC,&hour,&minute,&second); 
  4009ea:	f107 010c 	add.w	r1, r7, #12
  4009ee:	f107 0208 	add.w	r2, r7, #8
  4009f2:	1d3b      	adds	r3, r7, #4
  4009f4:	4807      	ldr	r0, [pc, #28]	; (400a14 <getTimeString+0x30>)
  4009f6:	4c08      	ldr	r4, [pc, #32]	; (400a18 <getTimeString+0x34>)
  4009f8:	47a0      	blx	r4
	sprintf(timeString,"%02d:%02d:%02d",hour,minute,second); 
  4009fa:	68fa      	ldr	r2, [r7, #12]
  4009fc:	68bb      	ldr	r3, [r7, #8]
  4009fe:	6879      	ldr	r1, [r7, #4]
  400a00:	9100      	str	r1, [sp, #0]
  400a02:	4806      	ldr	r0, [pc, #24]	; (400a1c <getTimeString+0x38>)
  400a04:	4906      	ldr	r1, [pc, #24]	; (400a20 <getTimeString+0x3c>)
  400a06:	4c07      	ldr	r4, [pc, #28]	; (400a24 <getTimeString+0x40>)
  400a08:	47a0      	blx	r4
	return timeString; 
  400a0a:	4b04      	ldr	r3, [pc, #16]	; (400a1c <getTimeString+0x38>)
} 
  400a0c:	4618      	mov	r0, r3
  400a0e:	3714      	adds	r7, #20
  400a10:	46bd      	mov	sp, r7
  400a12:	bd90      	pop	{r4, r7, pc}
  400a14:	400e1460 	.word	0x400e1460
  400a18:	00403ee9 	.word	0x00403ee9
  400a1c:	20000fa8 	.word	0x20000fa8
  400a20:	004183cc 	.word	0x004183cc
  400a24:	0040f3c9 	.word	0x0040f3c9

00400a28 <task_sdCardHandler>:
volatile Bool dataLogFileOpen = false; 
uint8_t closeLogFileFlag = 0; 
static char dataLogFileName[SD_CARD_FILENAME_LENGTH] = {0};
	
void task_sdCardHandler(void *pvParameters)
{
  400a28:	b590      	push	{r4, r7, lr}
  400a2a:	b087      	sub	sp, #28
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6078      	str	r0, [r7, #4]
	
	uint32_t numBytesToWrite = 0, numBytesWritten = 0;
  400a30:	2300      	movs	r3, #0
  400a32:	617b      	str	r3, [r7, #20]
  400a34:	2300      	movs	r3, #0
  400a36:	613b      	str	r3, [r7, #16]
	uint32_t numBytes = 0;
  400a38:	2300      	movs	r3, #0
  400a3a:	60fb      	str	r3, [r7, #12]
	semaphore_sdCardWrite = xSemaphoreCreateMutex();
  400a3c:	4b43      	ldr	r3, [pc, #268]	; (400b4c <task_sdCardHandler+0x124>)
  400a3e:	4798      	blx	r3
  400a40:	4602      	mov	r2, r0
  400a42:	4b43      	ldr	r3, [pc, #268]	; (400b50 <task_sdCardHandler+0x128>)
  400a44:	601a      	str	r2, [r3, #0]
	static FRESULT res = FR_OK;
	dataLogFileName[0] = LUN_ID_SD_MMC_0_MEM + '0';
  400a46:	4b43      	ldr	r3, [pc, #268]	; (400b54 <task_sdCardHandler+0x12c>)
  400a48:	2230      	movs	r2, #48	; 0x30
  400a4a:	701a      	strb	r2, [r3, #0]
	//res = f_lseek(&dataLogFile_obj, dataLogFile_obj.fsize);	
	
	while(1)
	{
		//take semaphore and copy data to a temporary buffer.
		if(xSemaphoreTake(semaphore_sdCardWrite,10) == true)
  400a4c:	4b40      	ldr	r3, [pc, #256]	; (400b50 <task_sdCardHandler+0x128>)
  400a4e:	681b      	ldr	r3, [r3, #0]
  400a50:	4618      	mov	r0, r3
  400a52:	2100      	movs	r1, #0
  400a54:	220a      	movs	r2, #10
  400a56:	2300      	movs	r3, #0
  400a58:	4c3f      	ldr	r4, [pc, #252]	; (400b58 <task_sdCardHandler+0x130>)
  400a5a:	47a0      	blx	r4
  400a5c:	4603      	mov	r3, r0
  400a5e:	2b01      	cmp	r3, #1
  400a60:	d11d      	bne.n	400a9e <task_sdCardHandler+0x76>
		{
			if(sdCardBufferPointer > 0 && sdCardBufferPointer <= SD_CARD_BUFFER_SIZE)
  400a62:	4b3e      	ldr	r3, [pc, #248]	; (400b5c <task_sdCardHandler+0x134>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	2b00      	cmp	r3, #0
  400a68:	d011      	beq.n	400a8e <task_sdCardHandler+0x66>
  400a6a:	4b3c      	ldr	r3, [pc, #240]	; (400b5c <task_sdCardHandler+0x134>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  400a72:	d80c      	bhi.n	400a8e <task_sdCardHandler+0x66>
			{
				memcpy(tempBuf,sdCardBuffer,sdCardBufferPointer);
  400a74:	4b39      	ldr	r3, [pc, #228]	; (400b5c <task_sdCardHandler+0x134>)
  400a76:	681b      	ldr	r3, [r3, #0]
  400a78:	4839      	ldr	r0, [pc, #228]	; (400b60 <task_sdCardHandler+0x138>)
  400a7a:	493a      	ldr	r1, [pc, #232]	; (400b64 <task_sdCardHandler+0x13c>)
  400a7c:	461a      	mov	r2, r3
  400a7e:	4b3a      	ldr	r3, [pc, #232]	; (400b68 <task_sdCardHandler+0x140>)
  400a80:	4798      	blx	r3
				numBytesToWrite = sdCardBufferPointer;
  400a82:	4b36      	ldr	r3, [pc, #216]	; (400b5c <task_sdCardHandler+0x134>)
  400a84:	681b      	ldr	r3, [r3, #0]
  400a86:	617b      	str	r3, [r7, #20]
				sdCardBufferPointer = 0;
  400a88:	4b34      	ldr	r3, [pc, #208]	; (400b5c <task_sdCardHandler+0x134>)
  400a8a:	2200      	movs	r2, #0
  400a8c:	601a      	str	r2, [r3, #0]
			}
			xSemaphoreGive(semaphore_sdCardWrite);
  400a8e:	4b30      	ldr	r3, [pc, #192]	; (400b50 <task_sdCardHandler+0x128>)
  400a90:	681b      	ldr	r3, [r3, #0]
  400a92:	4618      	mov	r0, r3
  400a94:	2100      	movs	r1, #0
  400a96:	2200      	movs	r2, #0
  400a98:	2300      	movs	r3, #0
  400a9a:	4c34      	ldr	r4, [pc, #208]	; (400b6c <task_sdCardHandler+0x144>)
  400a9c:	47a0      	blx	r4
		}
		//if the close file flag is set, close the file. 
		if(closeLogFileFlag == 1)
  400a9e:	4b34      	ldr	r3, [pc, #208]	; (400b70 <task_sdCardHandler+0x148>)
  400aa0:	781b      	ldrb	r3, [r3, #0]
  400aa2:	2b01      	cmp	r3, #1
  400aa4:	d108      	bne.n	400ab8 <task_sdCardHandler+0x90>
		{
			f_close(&dataLogFile_obj); 
  400aa6:	4833      	ldr	r0, [pc, #204]	; (400b74 <task_sdCardHandler+0x14c>)
  400aa8:	4b33      	ldr	r3, [pc, #204]	; (400b78 <task_sdCardHandler+0x150>)
  400aaa:	4798      	blx	r3
			dataLogFileOpen = false; 
  400aac:	4b33      	ldr	r3, [pc, #204]	; (400b7c <task_sdCardHandler+0x154>)
  400aae:	2200      	movs	r2, #0
  400ab0:	701a      	strb	r2, [r3, #0]
			//clear the flag. 
			closeLogFileFlag = 0;
  400ab2:	4b2f      	ldr	r3, [pc, #188]	; (400b70 <task_sdCardHandler+0x148>)
  400ab4:	2200      	movs	r2, #0
  400ab6:	701a      	strb	r2, [r3, #0]
		}
		//if the data file is open, then write to log
		if(dataLogFileOpen)
  400ab8:	4b30      	ldr	r3, [pc, #192]	; (400b7c <task_sdCardHandler+0x154>)
  400aba:	781b      	ldrb	r3, [r3, #0]
  400abc:	b2db      	uxtb	r3, r3
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d040      	beq.n	400b44 <task_sdCardHandler+0x11c>
		{	
			if(numBytesToWrite > 0)
  400ac2:	697b      	ldr	r3, [r7, #20]
  400ac4:	2b00      	cmp	r3, #0
  400ac6:	d03d      	beq.n	400b44 <task_sdCardHandler+0x11c>
			{
				numBytesWritten = 0;			
  400ac8:	2300      	movs	r3, #0
  400aca:	613b      	str	r3, [r7, #16]
				while(numBytesToWrite > 0)
  400acc:	e023      	b.n	400b16 <task_sdCardHandler+0xee>
				{
					if(dataLogFileOpen)
  400ace:	4b2b      	ldr	r3, [pc, #172]	; (400b7c <task_sdCardHandler+0x154>)
  400ad0:	781b      	ldrb	r3, [r3, #0]
  400ad2:	b2db      	uxtb	r3, r3
  400ad4:	2b00      	cmp	r3, #0
  400ad6:	d00d      	beq.n	400af4 <task_sdCardHandler+0xcc>
					{				
						res = f_write(&dataLogFile_obj, tempBuf+numBytesWritten, numBytesToWrite, &numBytes);
  400ad8:	693a      	ldr	r2, [r7, #16]
  400ada:	4b21      	ldr	r3, [pc, #132]	; (400b60 <task_sdCardHandler+0x138>)
  400adc:	441a      	add	r2, r3
  400ade:	f107 030c 	add.w	r3, r7, #12
  400ae2:	4824      	ldr	r0, [pc, #144]	; (400b74 <task_sdCardHandler+0x14c>)
  400ae4:	4611      	mov	r1, r2
  400ae6:	697a      	ldr	r2, [r7, #20]
  400ae8:	4c25      	ldr	r4, [pc, #148]	; (400b80 <task_sdCardHandler+0x158>)
  400aea:	47a0      	blx	r4
  400aec:	4603      	mov	r3, r0
  400aee:	461a      	mov	r2, r3
  400af0:	4b24      	ldr	r3, [pc, #144]	; (400b84 <task_sdCardHandler+0x15c>)
  400af2:	701a      	strb	r2, [r3, #0]
					}
				
					numBytesToWrite -= numBytes;
  400af4:	68fb      	ldr	r3, [r7, #12]
  400af6:	697a      	ldr	r2, [r7, #20]
  400af8:	1ad3      	subs	r3, r2, r3
  400afa:	617b      	str	r3, [r7, #20]
					numBytesWritten += numBytes;
  400afc:	68fb      	ldr	r3, [r7, #12]
  400afe:	693a      	ldr	r2, [r7, #16]
  400b00:	4413      	add	r3, r2
  400b02:	613b      	str	r3, [r7, #16]
					totalBytesWritten += numBytes;
  400b04:	4b20      	ldr	r3, [pc, #128]	; (400b88 <task_sdCardHandler+0x160>)
  400b06:	681a      	ldr	r2, [r3, #0]
  400b08:	68fb      	ldr	r3, [r7, #12]
  400b0a:	441a      	add	r2, r3
  400b0c:	4b1e      	ldr	r3, [pc, #120]	; (400b88 <task_sdCardHandler+0x160>)
  400b0e:	601a      	str	r2, [r3, #0]
					vTaskDelay(1);
  400b10:	2001      	movs	r0, #1
  400b12:	4b1e      	ldr	r3, [pc, #120]	; (400b8c <task_sdCardHandler+0x164>)
  400b14:	4798      	blx	r3
		if(dataLogFileOpen)
		{	
			if(numBytesToWrite > 0)
			{
				numBytesWritten = 0;			
				while(numBytesToWrite > 0)
  400b16:	697b      	ldr	r3, [r7, #20]
  400b18:	2b00      	cmp	r3, #0
  400b1a:	d1d8      	bne.n	400ace <task_sdCardHandler+0xa6>
					numBytesWritten += numBytes;
					totalBytesWritten += numBytes;
					vTaskDelay(1);

				}
				res = f_sync(&dataLogFile_obj); //sync the file
  400b1c:	4815      	ldr	r0, [pc, #84]	; (400b74 <task_sdCardHandler+0x14c>)
  400b1e:	4b1c      	ldr	r3, [pc, #112]	; (400b90 <task_sdCardHandler+0x168>)
  400b20:	4798      	blx	r3
  400b22:	4603      	mov	r3, r0
  400b24:	461a      	mov	r2, r3
  400b26:	4b17      	ldr	r3, [pc, #92]	; (400b84 <task_sdCardHandler+0x15c>)
  400b28:	701a      	strb	r2, [r3, #0]
				if(res != FR_OK)
  400b2a:	4b16      	ldr	r3, [pc, #88]	; (400b84 <task_sdCardHandler+0x15c>)
  400b2c:	781b      	ldrb	r3, [r3, #0]
  400b2e:	2b00      	cmp	r3, #0
  400b30:	d005      	beq.n	400b3e <task_sdCardHandler+0x116>
				{
					printf("file sync failed with code %d\r\n", res);
  400b32:	4b14      	ldr	r3, [pc, #80]	; (400b84 <task_sdCardHandler+0x15c>)
  400b34:	781b      	ldrb	r3, [r3, #0]
  400b36:	4817      	ldr	r0, [pc, #92]	; (400b94 <task_sdCardHandler+0x16c>)
  400b38:	4619      	mov	r1, r3
  400b3a:	4b17      	ldr	r3, [pc, #92]	; (400b98 <task_sdCardHandler+0x170>)
  400b3c:	4798      	blx	r3
				}
				vTaskDelay(1);
  400b3e:	2001      	movs	r0, #1
  400b40:	4b12      	ldr	r3, [pc, #72]	; (400b8c <task_sdCardHandler+0x164>)
  400b42:	4798      	blx	r3
			}
		}
		vTaskDelay(10);
  400b44:	200a      	movs	r0, #10
  400b46:	4b11      	ldr	r3, [pc, #68]	; (400b8c <task_sdCardHandler+0x164>)
  400b48:	4798      	blx	r3
	}
  400b4a:	e77f      	b.n	400a4c <task_sdCardHandler+0x24>
  400b4c:	00407f95 	.word	0x00407f95
  400b50:	2000100c 	.word	0x2000100c
  400b54:	2000141c 	.word	0x2000141c
  400b58:	004081dd 	.word	0x004081dd
  400b5c:	20001210 	.word	0x20001210
  400b60:	20001218 	.word	0x20001218
  400b64:	20001010 	.word	0x20001010
  400b68:	0040f05d 	.word	0x0040f05d
  400b6c:	00408019 	.word	0x00408019
  400b70:	20001419 	.word	0x20001419
  400b74:	20001f84 	.word	0x20001f84
  400b78:	004076ad 	.word	0x004076ad
  400b7c:	20001418 	.word	0x20001418
  400b80:	004071e1 	.word	0x004071e1
  400b84:	200014b4 	.word	0x200014b4
  400b88:	20001214 	.word	0x20001214
  400b8c:	00408855 	.word	0x00408855
  400b90:	00407515 	.word	0x00407515
  400b94:	004183dc 	.word	0x004183dc
  400b98:	0040eadd 	.word	0x0040eadd

00400b9c <task_sdCardWriteEntry>:
}
status_t task_sdCardWriteEntry(char* entry, size_t length)
{
  400b9c:	b590      	push	{r4, r7, lr}
  400b9e:	b085      	sub	sp, #20
  400ba0:	af00      	add	r7, sp, #0
  400ba2:	6078      	str	r0, [r7, #4]
  400ba4:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS; 
  400ba6:	2300      	movs	r3, #0
  400ba8:	73fb      	strb	r3, [r7, #15]
	//take the semaphore
	if(xSemaphoreTake(semaphore_sdCardWrite,5) == true)
  400baa:	4b1a      	ldr	r3, [pc, #104]	; (400c14 <task_sdCardWriteEntry+0x78>)
  400bac:	681b      	ldr	r3, [r3, #0]
  400bae:	4618      	mov	r0, r3
  400bb0:	2100      	movs	r1, #0
  400bb2:	2205      	movs	r2, #5
  400bb4:	2300      	movs	r3, #0
  400bb6:	4c18      	ldr	r4, [pc, #96]	; (400c18 <task_sdCardWriteEntry+0x7c>)
  400bb8:	47a0      	blx	r4
  400bba:	4603      	mov	r3, r0
  400bbc:	2b01      	cmp	r3, #1
  400bbe:	d121      	bne.n	400c04 <task_sdCardWriteEntry+0x68>
	{
		//copy data to sdCard buffer, make sure we have room first
		if(sdCardBufferPointer + length < SD_CARD_BUFFER_SIZE)
  400bc0:	4b16      	ldr	r3, [pc, #88]	; (400c1c <task_sdCardWriteEntry+0x80>)
  400bc2:	681a      	ldr	r2, [r3, #0]
  400bc4:	683b      	ldr	r3, [r7, #0]
  400bc6:	4413      	add	r3, r2
  400bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  400bcc:	d20f      	bcs.n	400bee <task_sdCardWriteEntry+0x52>
		{
			memcpy(sdCardBuffer+sdCardBufferPointer,entry,length);
  400bce:	4b13      	ldr	r3, [pc, #76]	; (400c1c <task_sdCardWriteEntry+0x80>)
  400bd0:	681a      	ldr	r2, [r3, #0]
  400bd2:	4b13      	ldr	r3, [pc, #76]	; (400c20 <task_sdCardWriteEntry+0x84>)
  400bd4:	4413      	add	r3, r2
  400bd6:	4618      	mov	r0, r3
  400bd8:	6879      	ldr	r1, [r7, #4]
  400bda:	683a      	ldr	r2, [r7, #0]
  400bdc:	4b11      	ldr	r3, [pc, #68]	; (400c24 <task_sdCardWriteEntry+0x88>)
  400bde:	4798      	blx	r3
			sdCardBufferPointer += length;
  400be0:	4b0e      	ldr	r3, [pc, #56]	; (400c1c <task_sdCardWriteEntry+0x80>)
  400be2:	681a      	ldr	r2, [r3, #0]
  400be4:	683b      	ldr	r3, [r7, #0]
  400be6:	441a      	add	r2, r3
  400be8:	4b0c      	ldr	r3, [pc, #48]	; (400c1c <task_sdCardWriteEntry+0x80>)
  400bea:	601a      	str	r2, [r3, #0]
  400bec:	e001      	b.n	400bf2 <task_sdCardWriteEntry+0x56>
		}
		else
		{
			status = STATUS_FAIL; 
  400bee:	2301      	movs	r3, #1
  400bf0:	73fb      	strb	r3, [r7, #15]
		}
		xSemaphoreGive(semaphore_sdCardWrite);
  400bf2:	4b08      	ldr	r3, [pc, #32]	; (400c14 <task_sdCardWriteEntry+0x78>)
  400bf4:	681b      	ldr	r3, [r3, #0]
  400bf6:	4618      	mov	r0, r3
  400bf8:	2100      	movs	r1, #0
  400bfa:	2200      	movs	r2, #0
  400bfc:	2300      	movs	r3, #0
  400bfe:	4c0a      	ldr	r4, [pc, #40]	; (400c28 <task_sdCardWriteEntry+0x8c>)
  400c00:	47a0      	blx	r4
  400c02:	e001      	b.n	400c08 <task_sdCardWriteEntry+0x6c>
	}
	else
	{
		status = STATUS_FAIL; 
  400c04:	2301      	movs	r3, #1
  400c06:	73fb      	strb	r3, [r7, #15]
	}	
	
	return status; 
  400c08:	7bfb      	ldrb	r3, [r7, #15]
}
  400c0a:	4618      	mov	r0, r3
  400c0c:	3714      	adds	r7, #20
  400c0e:	46bd      	mov	sp, r7
  400c10:	bd90      	pop	{r4, r7, pc}
  400c12:	bf00      	nop
  400c14:	2000100c 	.word	0x2000100c
  400c18:	004081dd 	.word	0x004081dd
  400c1c:	20001210 	.word	0x20001210
  400c20:	20001010 	.word	0x20001010
  400c24:	0040f05d 	.word	0x0040f05d
  400c28:	00408019 	.word	0x00408019

00400c2c <task_sdCard_OpenNewFile>:
status_t task_sdCard_OpenNewFile()
{
  400c2c:	b590      	push	{r4, r7, lr}
  400c2e:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
  400c32:	af02      	add	r7, sp, #8
	uint8_t data_buffer[100];
	char fileIndexLog[] = "0:logIndex.dat"; 
  400c34:	4b61      	ldr	r3, [pc, #388]	; (400dbc <task_sdCard_OpenNewFile+0x190>)
  400c36:	f507 7434 	add.w	r4, r7, #720	; 0x2d0
  400c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400c3c:	c407      	stmia	r4!, {r0, r1, r2}
  400c3e:	8023      	strh	r3, [r4, #0]
  400c40:	3402      	adds	r4, #2
  400c42:	0c1b      	lsrs	r3, r3, #16
  400c44:	7023      	strb	r3, [r4, #0]
	char logFileName[SD_CARD_FILENAME_LENGTH] = {0}; 
  400c46:	f507 730e 	add.w	r3, r7, #568	; 0x238
  400c4a:	461a      	mov	r2, r3
  400c4c:	2396      	movs	r3, #150	; 0x96
  400c4e:	4610      	mov	r0, r2
  400c50:	2100      	movs	r1, #0
  400c52:	461a      	mov	r2, r3
  400c54:	4b5a      	ldr	r3, [pc, #360]	; (400dc0 <task_sdCard_OpenNewFile+0x194>)
  400c56:	4798      	blx	r3
	uint32_t byte_to_read, byte_read, bytes_written;
	FRESULT res;
	uint32_t fileIndexNumber = 0; 
  400c58:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400c5c:	2200      	movs	r2, #0
  400c5e:	601a      	str	r2, [r3, #0]
	FIL indexFile_obj;
	//if the log file is open, then return an error
	if(dataLogFileOpen == true)
  400c60:	4b58      	ldr	r3, [pc, #352]	; (400dc4 <task_sdCard_OpenNewFile+0x198>)
  400c62:	781b      	ldrb	r3, [r3, #0]
  400c64:	b2db      	uxtb	r3, r3
  400c66:	2b01      	cmp	r3, #1
  400c68:	d101      	bne.n	400c6e <task_sdCard_OpenNewFile+0x42>
	{
		return STATUS_FAIL; 
  400c6a:	2301      	movs	r3, #1
  400c6c:	e0a1      	b.n	400db2 <task_sdCard_OpenNewFile+0x186>
	}
	
	//get the file index for the newly created file
	//open the file that contains the index numbers
	res = f_open(&indexFile_obj, (char const *)fileIndexLog, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
  400c6e:	1d3a      	adds	r2, r7, #4
  400c70:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
  400c74:	4610      	mov	r0, r2
  400c76:	4619      	mov	r1, r3
  400c78:	2213      	movs	r2, #19
  400c7a:	4b53      	ldr	r3, [pc, #332]	; (400dc8 <task_sdCard_OpenNewFile+0x19c>)
  400c7c:	4798      	blx	r3
  400c7e:	4603      	mov	r3, r0
  400c80:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if (res != FR_OK)
  400c84:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
  400c88:	2b00      	cmp	r3, #0
  400c8a:	d001      	beq.n	400c90 <task_sdCard_OpenNewFile+0x64>
	{		
		return STATUS_FAIL;
  400c8c:	2301      	movs	r3, #1
  400c8e:	e090      	b.n	400db2 <task_sdCard_OpenNewFile+0x186>
	}
	//if the filesize is 0, it means it's never been created, set index to 1. 	
	if(indexFile_obj.fsize == 0)
  400c90:	1d3b      	adds	r3, r7, #4
  400c92:	68db      	ldr	r3, [r3, #12]
  400c94:	2b00      	cmp	r3, #0
  400c96:	d104      	bne.n	400ca2 <task_sdCard_OpenNewFile+0x76>
	{
		fileIndexNumber = 1; 
  400c98:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400c9c:	2201      	movs	r2, #1
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	e022      	b.n	400ce8 <task_sdCard_OpenNewFile+0xbc>
	}
	else
	{
		res = f_read(&indexFile_obj, data_buffer, 100, &byte_read);
  400ca2:	1d39      	adds	r1, r7, #4
  400ca4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
  400ca8:	f507 730d 	add.w	r3, r7, #564	; 0x234
  400cac:	4608      	mov	r0, r1
  400cae:	4611      	mov	r1, r2
  400cb0:	2264      	movs	r2, #100	; 0x64
  400cb2:	4c46      	ldr	r4, [pc, #280]	; (400dcc <task_sdCard_OpenNewFile+0x1a0>)
  400cb4:	47a0      	blx	r4
  400cb6:	4603      	mov	r3, r0
  400cb8:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if(res != FR_OK)
  400cbc:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d001      	beq.n	400cc8 <task_sdCard_OpenNewFile+0x9c>
		{
			return STATUS_FAIL; 
  400cc4:	2301      	movs	r3, #1
  400cc6:	e074      	b.n	400db2 <task_sdCard_OpenNewFile+0x186>
		}
		sscanf(data_buffer,"%d\r\n",&fileIndexNumber); 	
  400cc8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
  400ccc:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400cd0:	4610      	mov	r0, r2
  400cd2:	493f      	ldr	r1, [pc, #252]	; (400dd0 <task_sdCard_OpenNewFile+0x1a4>)
  400cd4:	461a      	mov	r2, r3
  400cd6:	4b3f      	ldr	r3, [pc, #252]	; (400dd4 <task_sdCard_OpenNewFile+0x1a8>)
  400cd8:	4798      	blx	r3
		fileIndexNumber++; 		
  400cda:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	1c5a      	adds	r2, r3, #1
  400ce2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400ce6:	601a      	str	r2, [r3, #0]
	}
	//write the update index back to the file. 
	sprintf(data_buffer, "%05d\r\n", fileIndexNumber); 
  400ce8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400cec:	681b      	ldr	r3, [r3, #0]
  400cee:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
  400cf2:	4610      	mov	r0, r2
  400cf4:	4938      	ldr	r1, [pc, #224]	; (400dd8 <task_sdCard_OpenNewFile+0x1ac>)
  400cf6:	461a      	mov	r2, r3
  400cf8:	4b38      	ldr	r3, [pc, #224]	; (400ddc <task_sdCard_OpenNewFile+0x1b0>)
  400cfa:	4798      	blx	r3
	f_lseek(&indexFile_obj,0); 
  400cfc:	1d3b      	adds	r3, r7, #4
  400cfe:	4618      	mov	r0, r3
  400d00:	2100      	movs	r1, #0
  400d02:	4b37      	ldr	r3, [pc, #220]	; (400de0 <task_sdCard_OpenNewFile+0x1b4>)
  400d04:	4798      	blx	r3
	res = f_write(&indexFile_obj,data_buffer,strlen(data_buffer),&bytes_written); 
  400d06:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
  400d0a:	4618      	mov	r0, r3
  400d0c:	4b35      	ldr	r3, [pc, #212]	; (400de4 <task_sdCard_OpenNewFile+0x1b8>)
  400d0e:	4798      	blx	r3
  400d10:	4602      	mov	r2, r0
  400d12:	1d38      	adds	r0, r7, #4
  400d14:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
  400d18:	f507 730c 	add.w	r3, r7, #560	; 0x230
  400d1c:	4c32      	ldr	r4, [pc, #200]	; (400de8 <task_sdCard_OpenNewFile+0x1bc>)
  400d1e:	47a0      	blx	r4
  400d20:	4603      	mov	r3, r0
  400d22:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if(res != FR_OK)
  400d26:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
  400d2a:	2b00      	cmp	r3, #0
  400d2c:	d001      	beq.n	400d32 <task_sdCard_OpenNewFile+0x106>
	{
		return STATUS_FAIL; 
  400d2e:	2301      	movs	r3, #1
  400d30:	e03f      	b.n	400db2 <task_sdCard_OpenNewFile+0x186>
	}
	else
	{
		f_close(&indexFile_obj);
  400d32:	1d3b      	adds	r3, r7, #4
  400d34:	4618      	mov	r0, r3
  400d36:	4b2d      	ldr	r3, [pc, #180]	; (400dec <task_sdCard_OpenNewFile+0x1c0>)
  400d38:	4798      	blx	r3
	}
	
	//create the filename
	snprintf(dataLogFileName, SD_CARD_FILENAME_LENGTH, "0:%s_MovementLog%05d.csv",brainSettings.suitNumber,fileIndexNumber); 	
  400d3a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
  400d3e:	681b      	ldr	r3, [r3, #0]
  400d40:	9300      	str	r3, [sp, #0]
  400d42:	482b      	ldr	r0, [pc, #172]	; (400df0 <task_sdCard_OpenNewFile+0x1c4>)
  400d44:	2196      	movs	r1, #150	; 0x96
  400d46:	4a2b      	ldr	r2, [pc, #172]	; (400df4 <task_sdCard_OpenNewFile+0x1c8>)
  400d48:	4b2b      	ldr	r3, [pc, #172]	; (400df8 <task_sdCard_OpenNewFile+0x1cc>)
  400d4a:	4c2c      	ldr	r4, [pc, #176]	; (400dfc <task_sdCard_OpenNewFile+0x1d0>)
  400d4c:	47a0      	blx	r4
	if(xSemaphoreTake(semaphore_sdCardWrite,100) == true)
  400d4e:	4b2c      	ldr	r3, [pc, #176]	; (400e00 <task_sdCard_OpenNewFile+0x1d4>)
  400d50:	681b      	ldr	r3, [r3, #0]
  400d52:	4618      	mov	r0, r3
  400d54:	2100      	movs	r1, #0
  400d56:	2264      	movs	r2, #100	; 0x64
  400d58:	2300      	movs	r3, #0
  400d5a:	4c2a      	ldr	r4, [pc, #168]	; (400e04 <task_sdCard_OpenNewFile+0x1d8>)
  400d5c:	47a0      	blx	r4
  400d5e:	4603      	mov	r3, r0
  400d60:	2b01      	cmp	r3, #1
  400d62:	d126      	bne.n	400db2 <task_sdCard_OpenNewFile+0x186>
	{
		res = f_open(&dataLogFile_obj, (char const *)dataLogFileName, FA_OPEN_ALWAYS | FA_WRITE);		
  400d64:	4828      	ldr	r0, [pc, #160]	; (400e08 <task_sdCard_OpenNewFile+0x1dc>)
  400d66:	4922      	ldr	r1, [pc, #136]	; (400df0 <task_sdCard_OpenNewFile+0x1c4>)
  400d68:	2212      	movs	r2, #18
  400d6a:	4b17      	ldr	r3, [pc, #92]	; (400dc8 <task_sdCard_OpenNewFile+0x19c>)
  400d6c:	4798      	blx	r3
  400d6e:	4603      	mov	r3, r0
  400d70:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if (res == FR_OK)
  400d74:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
  400d78:	2b00      	cmp	r3, #0
  400d7a:	d103      	bne.n	400d84 <task_sdCard_OpenNewFile+0x158>
		{
			printf("log open\r\n");
  400d7c:	4823      	ldr	r0, [pc, #140]	; (400e0c <task_sdCard_OpenNewFile+0x1e0>)
  400d7e:	4b24      	ldr	r3, [pc, #144]	; (400e10 <task_sdCard_OpenNewFile+0x1e4>)
  400d80:	4798      	blx	r3
  400d82:	e002      	b.n	400d8a <task_sdCard_OpenNewFile+0x15e>
		}
		else
		{
			printf("log failed to open\r\n");
  400d84:	4823      	ldr	r0, [pc, #140]	; (400e14 <task_sdCard_OpenNewFile+0x1e8>)
  400d86:	4b22      	ldr	r3, [pc, #136]	; (400e10 <task_sdCard_OpenNewFile+0x1e4>)
  400d88:	4798      	blx	r3
		}		
		res = f_lseek(&dataLogFile_obj, dataLogFile_obj.fsize);
  400d8a:	4b1f      	ldr	r3, [pc, #124]	; (400e08 <task_sdCard_OpenNewFile+0x1dc>)
  400d8c:	68db      	ldr	r3, [r3, #12]
  400d8e:	481e      	ldr	r0, [pc, #120]	; (400e08 <task_sdCard_OpenNewFile+0x1dc>)
  400d90:	4619      	mov	r1, r3
  400d92:	4b13      	ldr	r3, [pc, #76]	; (400de0 <task_sdCard_OpenNewFile+0x1b4>)
  400d94:	4798      	blx	r3
  400d96:	4603      	mov	r3, r0
  400d98:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		dataLogFileOpen = true; 
  400d9c:	4b09      	ldr	r3, [pc, #36]	; (400dc4 <task_sdCard_OpenNewFile+0x198>)
  400d9e:	2201      	movs	r2, #1
  400da0:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(semaphore_sdCardWrite);	
  400da2:	4b17      	ldr	r3, [pc, #92]	; (400e00 <task_sdCard_OpenNewFile+0x1d4>)
  400da4:	681b      	ldr	r3, [r3, #0]
  400da6:	4618      	mov	r0, r3
  400da8:	2100      	movs	r1, #0
  400daa:	2200      	movs	r2, #0
  400dac:	2300      	movs	r3, #0
  400dae:	4c1a      	ldr	r4, [pc, #104]	; (400e18 <task_sdCard_OpenNewFile+0x1ec>)
  400db0:	47a0      	blx	r4
	}
	
}
  400db2:	4618      	mov	r0, r3
  400db4:	f507 7753 	add.w	r7, r7, #844	; 0x34c
  400db8:	46bd      	mov	sp, r7
  400dba:	bd90      	pop	{r4, r7, pc}
  400dbc:	0041844c 	.word	0x0041844c
  400dc0:	0040f191 	.word	0x0040f191
  400dc4:	20001418 	.word	0x20001418
  400dc8:	00406ad9 	.word	0x00406ad9
  400dcc:	00406f0d 	.word	0x00406f0d
  400dd0:	004183fc 	.word	0x004183fc
  400dd4:	0040f415 	.word	0x0040f415
  400dd8:	00418404 	.word	0x00418404
  400ddc:	0040f3c9 	.word	0x0040f3c9
  400de0:	004076f1 	.word	0x004076f1
  400de4:	0040f819 	.word	0x0040f819
  400de8:	004071e1 	.word	0x004071e1
  400dec:	004076ad 	.word	0x004076ad
  400df0:	2000141c 	.word	0x2000141c
  400df4:	0041840c 	.word	0x0041840c
  400df8:	20001b38 	.word	0x20001b38
  400dfc:	0040f361 	.word	0x0040f361
  400e00:	2000100c 	.word	0x2000100c
  400e04:	004081dd 	.word	0x004081dd
  400e08:	20001f84 	.word	0x20001f84
  400e0c:	00418428 	.word	0x00418428
  400e10:	0040eadd 	.word	0x0040eadd
  400e14:	00418434 	.word	0x00418434
  400e18:	00408019 	.word	0x00408019

00400e1c <task_sdCard_CloseFile>:
status_t task_sdCard_CloseFile()
{
  400e1c:	b598      	push	{r3, r4, r7, lr}
  400e1e:	af00      	add	r7, sp, #0
	//if the filelog is not open, return and error
	if(dataLogFileOpen == false)
  400e20:	4b0f      	ldr	r3, [pc, #60]	; (400e60 <task_sdCard_CloseFile+0x44>)
  400e22:	781b      	ldrb	r3, [r3, #0]
  400e24:	b2db      	uxtb	r3, r3
  400e26:	2b00      	cmp	r3, #0
  400e28:	d101      	bne.n	400e2e <task_sdCard_CloseFile+0x12>
	{
		return STATUS_FAIL;
  400e2a:	2301      	movs	r3, #1
  400e2c:	e015      	b.n	400e5a <task_sdCard_CloseFile+0x3e>
	}		
	if(xSemaphoreTake(semaphore_sdCardWrite,100) == true)
  400e2e:	4b0d      	ldr	r3, [pc, #52]	; (400e64 <task_sdCard_CloseFile+0x48>)
  400e30:	681b      	ldr	r3, [r3, #0]
  400e32:	4618      	mov	r0, r3
  400e34:	2100      	movs	r1, #0
  400e36:	2264      	movs	r2, #100	; 0x64
  400e38:	2300      	movs	r3, #0
  400e3a:	4c0b      	ldr	r4, [pc, #44]	; (400e68 <task_sdCard_CloseFile+0x4c>)
  400e3c:	47a0      	blx	r4
  400e3e:	4603      	mov	r3, r0
  400e40:	2b01      	cmp	r3, #1
  400e42:	d10a      	bne.n	400e5a <task_sdCard_CloseFile+0x3e>
	{
		//set the flag to have the main sd card thread close the file. 
		//we don't want to close the file in the middle of a write. 
		closeLogFileFlag = 1; 
  400e44:	4b09      	ldr	r3, [pc, #36]	; (400e6c <task_sdCard_CloseFile+0x50>)
  400e46:	2201      	movs	r2, #1
  400e48:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(semaphore_sdCardWrite);
  400e4a:	4b06      	ldr	r3, [pc, #24]	; (400e64 <task_sdCard_CloseFile+0x48>)
  400e4c:	681b      	ldr	r3, [r3, #0]
  400e4e:	4618      	mov	r0, r3
  400e50:	2100      	movs	r1, #0
  400e52:	2200      	movs	r2, #0
  400e54:	2300      	movs	r3, #0
  400e56:	4c06      	ldr	r4, [pc, #24]	; (400e70 <task_sdCard_CloseFile+0x54>)
  400e58:	47a0      	blx	r4
	}	
}
  400e5a:	4618      	mov	r0, r3
  400e5c:	bd98      	pop	{r3, r4, r7, pc}
  400e5e:	bf00      	nop
  400e60:	20001418 	.word	0x20001418
  400e64:	2000100c 	.word	0x2000100c
  400e68:	004081dd 	.word	0x004081dd
  400e6c:	20001419 	.word	0x20001419
  400e70:	00408019 	.word	0x00408019

00400e74 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400e74:	b480      	push	{r7}
  400e76:	b083      	sub	sp, #12
  400e78:	af00      	add	r7, sp, #0
  400e7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e7c:	687b      	ldr	r3, [r7, #4]
  400e7e:	2b07      	cmp	r3, #7
  400e80:	d825      	bhi.n	400ece <osc_get_rate+0x5a>
  400e82:	a201      	add	r2, pc, #4	; (adr r2, 400e88 <osc_get_rate+0x14>)
  400e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e88:	00400ea9 	.word	0x00400ea9
  400e8c:	00400eaf 	.word	0x00400eaf
  400e90:	00400eb5 	.word	0x00400eb5
  400e94:	00400ebb 	.word	0x00400ebb
  400e98:	00400ebf 	.word	0x00400ebf
  400e9c:	00400ec3 	.word	0x00400ec3
  400ea0:	00400ec7 	.word	0x00400ec7
  400ea4:	00400ecb 	.word	0x00400ecb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400ea8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400eac:	e010      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400eb2:	e00d      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400eb8:	e00a      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400eba:	4b08      	ldr	r3, [pc, #32]	; (400edc <osc_get_rate+0x68>)
  400ebc:	e008      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400ebe:	4b08      	ldr	r3, [pc, #32]	; (400ee0 <osc_get_rate+0x6c>)
  400ec0:	e006      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400ec2:	4b08      	ldr	r3, [pc, #32]	; (400ee4 <osc_get_rate+0x70>)
  400ec4:	e004      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400ec6:	4b08      	ldr	r3, [pc, #32]	; (400ee8 <osc_get_rate+0x74>)
  400ec8:	e002      	b.n	400ed0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400eca:	4b07      	ldr	r3, [pc, #28]	; (400ee8 <osc_get_rate+0x74>)
  400ecc:	e000      	b.n	400ed0 <osc_get_rate+0x5c>
	}

	return 0;
  400ece:	2300      	movs	r3, #0
}
  400ed0:	4618      	mov	r0, r3
  400ed2:	370c      	adds	r7, #12
  400ed4:	46bd      	mov	sp, r7
  400ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eda:	4770      	bx	lr
  400edc:	003d0900 	.word	0x003d0900
  400ee0:	007a1200 	.word	0x007a1200
  400ee4:	00b71b00 	.word	0x00b71b00
  400ee8:	00f42400 	.word	0x00f42400

00400eec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400eec:	b580      	push	{r7, lr}
  400eee:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400ef0:	2006      	movs	r0, #6
  400ef2:	4b04      	ldr	r3, [pc, #16]	; (400f04 <sysclk_get_main_hz+0x18>)
  400ef4:	4798      	blx	r3
  400ef6:	4602      	mov	r2, r0
  400ef8:	4613      	mov	r3, r2
  400efa:	011b      	lsls	r3, r3, #4
  400efc:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400efe:	4618      	mov	r0, r3
  400f00:	bd80      	pop	{r7, pc}
  400f02:	bf00      	nop
  400f04:	00400e75 	.word	0x00400e75

00400f08 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400f08:	b580      	push	{r7, lr}
  400f0a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400f0c:	4b02      	ldr	r3, [pc, #8]	; (400f18 <sysclk_get_cpu_hz+0x10>)
  400f0e:	4798      	blx	r3
  400f10:	4603      	mov	r3, r0
  400f12:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400f14:	4618      	mov	r0, r3
  400f16:	bd80      	pop	{r7, pc}
  400f18:	00400eed 	.word	0x00400eed

00400f1c <vTimeOutTimerCallback>:
uint32_t stateEntryTime = 0;
xTimerHandle TimeOutTimer, sdTimeOutTimer;
bool sdInsertWaitTimeoutFlag = FALSE;

void vTimeOutTimerCallback( xTimerHandle xTimer )
{
  400f1c:	b580      	push	{r7, lr}
  400f1e:	b082      	sub	sp, #8
  400f20:	af00      	add	r7, sp, #0
  400f22:	6078      	str	r0, [r7, #4]
	task_stateMachine_EnqueueEvent(SYS_EVENT_POWER_SWITCH, 0x00);
  400f24:	2000      	movs	r0, #0
  400f26:	2100      	movs	r1, #0
  400f28:	4b02      	ldr	r3, [pc, #8]	; (400f34 <vTimeOutTimerCallback+0x18>)
  400f2a:	4798      	blx	r3
}
  400f2c:	3708      	adds	r7, #8
  400f2e:	46bd      	mov	sp, r7
  400f30:	bd80      	pop	{r7, pc}
  400f32:	bf00      	nop
  400f34:	00401029 	.word	0x00401029

00400f38 <vSdTimeOutTimerCallback>:

void vSdTimeOutTimerCallback( xTimerHandle xTimer )
{
  400f38:	b480      	push	{r7}
  400f3a:	b083      	sub	sp, #12
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
	sdInsertWaitTimeoutFlag = TRUE;
  400f40:	4b03      	ldr	r3, [pc, #12]	; (400f50 <vSdTimeOutTimerCallback+0x18>)
  400f42:	2201      	movs	r2, #1
  400f44:	701a      	strb	r2, [r3, #0]
}
  400f46:	370c      	adds	r7, #12
  400f48:	46bd      	mov	sp, r7
  400f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4e:	4770      	bx	lr
  400f50:	200014c8 	.word	0x200014c8

00400f54 <task_stateMachineHandler>:

//task to handle the events
void task_stateMachineHandler(void *pvParameters)
{
  400f54:	b590      	push	{r4, r7, lr}
  400f56:	b087      	sub	sp, #28
  400f58:	af02      	add	r7, sp, #8
  400f5a:	6078      	str	r0, [r7, #4]
	//Start Idle-time out timer 
	TimeOutTimer = xTimerCreate("Time Out Timer", (MAX_IDLE_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vTimeOutTimerCallback);
  400f5c:	4b24      	ldr	r3, [pc, #144]	; (400ff0 <task_stateMachineHandler+0x9c>)
  400f5e:	9300      	str	r3, [sp, #0]
  400f60:	4824      	ldr	r0, [pc, #144]	; (400ff4 <task_stateMachineHandler+0xa0>)
  400f62:	4925      	ldr	r1, [pc, #148]	; (400ff8 <task_stateMachineHandler+0xa4>)
  400f64:	2200      	movs	r2, #0
  400f66:	2300      	movs	r3, #0
  400f68:	4c24      	ldr	r4, [pc, #144]	; (400ffc <task_stateMachineHandler+0xa8>)
  400f6a:	47a0      	blx	r4
  400f6c:	4602      	mov	r2, r0
  400f6e:	4b24      	ldr	r3, [pc, #144]	; (401000 <task_stateMachineHandler+0xac>)
  400f70:	601a      	str	r2, [r3, #0]
	if (TimeOutTimer == NULL)
  400f72:	4b23      	ldr	r3, [pc, #140]	; (401000 <task_stateMachineHandler+0xac>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d105      	bne.n	400f86 <task_stateMachineHandler+0x32>
	{
		printf("Failed to create timer task code %d\r\n", TimeOutTimer);
  400f7a:	4b21      	ldr	r3, [pc, #132]	; (401000 <task_stateMachineHandler+0xac>)
  400f7c:	681b      	ldr	r3, [r3, #0]
  400f7e:	4821      	ldr	r0, [pc, #132]	; (401004 <task_stateMachineHandler+0xb0>)
  400f80:	4619      	mov	r1, r3
  400f82:	4b21      	ldr	r3, [pc, #132]	; (401008 <task_stateMachineHandler+0xb4>)
  400f84:	4798      	blx	r3
	}
	
	queue_stateMachineEvents = xQueueCreate( 10, sizeof(eventMessage_t));
  400f86:	200a      	movs	r0, #10
  400f88:	2104      	movs	r1, #4
  400f8a:	4b20      	ldr	r3, [pc, #128]	; (40100c <task_stateMachineHandler+0xb8>)
  400f8c:	4798      	blx	r3
  400f8e:	4602      	mov	r2, r0
  400f90:	4b1f      	ldr	r3, [pc, #124]	; (401010 <task_stateMachineHandler+0xbc>)
  400f92:	601a      	str	r2, [r3, #0]
	if(queue_stateMachineEvents == 0)
  400f94:	4b1e      	ldr	r3, [pc, #120]	; (401010 <task_stateMachineHandler+0xbc>)
  400f96:	681b      	ldr	r3, [r3, #0]
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d103      	bne.n	400fa4 <task_stateMachineHandler+0x50>
	{
		// Queue was not created this is an error!
		printf("an error has occurred, state machine queue creation failed. \r\n");
  400f9c:	481d      	ldr	r0, [pc, #116]	; (401014 <task_stateMachineHandler+0xc0>)
  400f9e:	4b1a      	ldr	r3, [pc, #104]	; (401008 <task_stateMachineHandler+0xb4>)
  400fa0:	4798      	blx	r3
		return;
  400fa2:	e021      	b.n	400fe8 <task_stateMachineHandler+0x94>
	}	
	eventMessage_t eventMessage = {.sysEvent = SYS_EVENT_POWER_SWITCH, .data = 0x0000}; 
  400fa4:	2300      	movs	r3, #0
  400fa6:	733b      	strb	r3, [r7, #12]
  400fa8:	2300      	movs	r3, #0
  400faa:	81fb      	strh	r3, [r7, #14]
	//from start immediately put the system into power down mode. 
	xQueueSendToBack( queue_stateMachineEvents,( void * ) &eventMessage,5); 
  400fac:	4b18      	ldr	r3, [pc, #96]	; (401010 <task_stateMachineHandler+0xbc>)
  400fae:	681a      	ldr	r2, [r3, #0]
  400fb0:	f107 030c 	add.w	r3, r7, #12
  400fb4:	4610      	mov	r0, r2
  400fb6:	4619      	mov	r1, r3
  400fb8:	2205      	movs	r2, #5
  400fba:	2300      	movs	r3, #0
  400fbc:	4c16      	ldr	r4, [pc, #88]	; (401018 <task_stateMachineHandler+0xc4>)
  400fbe:	47a0      	blx	r4
	while(1)
	{
		if(xQueueReceive(queue_stateMachineEvents, &(eventMessage), 100) == TRUE)
  400fc0:	4b13      	ldr	r3, [pc, #76]	; (401010 <task_stateMachineHandler+0xbc>)
  400fc2:	681a      	ldr	r2, [r3, #0]
  400fc4:	f107 030c 	add.w	r3, r7, #12
  400fc8:	4610      	mov	r0, r2
  400fca:	4619      	mov	r1, r3
  400fcc:	2264      	movs	r2, #100	; 0x64
  400fce:	2300      	movs	r3, #0
  400fd0:	4c12      	ldr	r4, [pc, #72]	; (40101c <task_stateMachineHandler+0xc8>)
  400fd2:	47a0      	blx	r4
  400fd4:	4603      	mov	r3, r0
  400fd6:	2b01      	cmp	r3, #1
  400fd8:	d102      	bne.n	400fe0 <task_stateMachineHandler+0x8c>
		{
			processEvent(eventMessage); 
  400fda:	68f8      	ldr	r0, [r7, #12]
  400fdc:	4b10      	ldr	r3, [pc, #64]	; (401020 <task_stateMachineHandler+0xcc>)
  400fde:	4798      	blx	r3
		}
		vTaskDelay(50); 
  400fe0:	2032      	movs	r0, #50	; 0x32
  400fe2:	4b10      	ldr	r3, [pc, #64]	; (401024 <task_stateMachineHandler+0xd0>)
  400fe4:	4798      	blx	r3
		
	}		
  400fe6:	e7eb      	b.n	400fc0 <task_stateMachineHandler+0x6c>
}
  400fe8:	3714      	adds	r7, #20
  400fea:	46bd      	mov	sp, r7
  400fec:	bd90      	pop	{r4, r7, pc}
  400fee:	bf00      	nop
  400ff0:	00400f1d 	.word	0x00400f1d
  400ff4:	0041845c 	.word	0x0041845c
  400ff8:	000493e0 	.word	0x000493e0
  400ffc:	00409589 	.word	0x00409589
  401000:	200021b0 	.word	0x200021b0
  401004:	0041846c 	.word	0x0041846c
  401008:	0040eadd 	.word	0x0040eadd
  40100c:	00407ecd 	.word	0x00407ecd
  401010:	200014b8 	.word	0x200014b8
  401014:	00418494 	.word	0x00418494
  401018:	00408019 	.word	0x00408019
  40101c:	004081dd 	.word	0x004081dd
  401020:	00401095 	.word	0x00401095
  401024:	00408855 	.word	0x00408855

00401028 <task_stateMachine_EnqueueEvent>:

status_t task_stateMachine_EnqueueEvent(systemEvents_t eventType, uint16_t data)
{
  401028:	b590      	push	{r4, r7, lr}
  40102a:	b085      	sub	sp, #20
  40102c:	af00      	add	r7, sp, #0
  40102e:	4602      	mov	r2, r0
  401030:	460b      	mov	r3, r1
  401032:	71fa      	strb	r2, [r7, #7]
  401034:	80bb      	strh	r3, [r7, #4]
	status_t status = STATUS_PASS; 
  401036:	2300      	movs	r3, #0
  401038:	73fb      	strb	r3, [r7, #15]
	eventMessage_t msg; 
	msg.sysEvent = eventType; 
  40103a:	79fb      	ldrb	r3, [r7, #7]
  40103c:	723b      	strb	r3, [r7, #8]
	msg.data = data; 
  40103e:	88bb      	ldrh	r3, [r7, #4]
  401040:	817b      	strh	r3, [r7, #10]
	if(queue_stateMachineEvents != NULL)
  401042:	4b0c      	ldr	r3, [pc, #48]	; (401074 <task_stateMachine_EnqueueEvent+0x4c>)
  401044:	681b      	ldr	r3, [r3, #0]
  401046:	2b00      	cmp	r3, #0
  401048:	d00e      	beq.n	401068 <task_stateMachine_EnqueueEvent+0x40>
	{
		if(xQueueSendToBack( queue_stateMachineEvents,( void * ) &msg,5) != TRUE)
  40104a:	4b0a      	ldr	r3, [pc, #40]	; (401074 <task_stateMachine_EnqueueEvent+0x4c>)
  40104c:	681a      	ldr	r2, [r3, #0]
  40104e:	f107 0308 	add.w	r3, r7, #8
  401052:	4610      	mov	r0, r2
  401054:	4619      	mov	r1, r3
  401056:	2205      	movs	r2, #5
  401058:	2300      	movs	r3, #0
  40105a:	4c07      	ldr	r4, [pc, #28]	; (401078 <task_stateMachine_EnqueueEvent+0x50>)
  40105c:	47a0      	blx	r4
  40105e:	4603      	mov	r3, r0
  401060:	2b01      	cmp	r3, #1
  401062:	d001      	beq.n	401068 <task_stateMachine_EnqueueEvent+0x40>
		{
			status = STATUS_FAIL; 
  401064:	2301      	movs	r3, #1
  401066:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status; 
  401068:	7bfb      	ldrb	r3, [r7, #15]
}
  40106a:	4618      	mov	r0, r3
  40106c:	3714      	adds	r7, #20
  40106e:	46bd      	mov	sp, r7
  401070:	bd90      	pop	{r4, r7, pc}
  401072:	bf00      	nop
  401074:	200014b8 	.word	0x200014b8
  401078:	00408019 	.word	0x00408019

0040107c <getCurrentState>:
systemStates_t getCurrentState()
{
  40107c:	b480      	push	{r7}
  40107e:	af00      	add	r7, sp, #0
	return currentSystemState;
  401080:	4b03      	ldr	r3, [pc, #12]	; (401090 <getCurrentState+0x14>)
  401082:	781b      	ldrb	r3, [r3, #0]
}
  401084:	4618      	mov	r0, r3
  401086:	46bd      	mov	sp, r7
  401088:	f85d 7b04 	ldr.w	r7, [sp], #4
  40108c:	4770      	bx	lr
  40108e:	bf00      	nop
  401090:	200014bc 	.word	0x200014bc

00401094 <processEvent>:
//static functions
//event processor
void processEvent(eventMessage_t eventMsg)
{
  401094:	b580      	push	{r7, lr}
  401096:	b084      	sub	sp, #16
  401098:	af00      	add	r7, sp, #0
  40109a:	6078      	str	r0, [r7, #4]
	switch(eventMsg.sysEvent)
  40109c:	793b      	ldrb	r3, [r7, #4]
  40109e:	2b0b      	cmp	r3, #11
  4010a0:	f200 80e3 	bhi.w	40126a <processEvent+0x1d6>
  4010a4:	a201      	add	r2, pc, #4	; (adr r2, 4010ac <processEvent+0x18>)
  4010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010aa:	bf00      	nop
  4010ac:	004010dd 	.word	0x004010dd
  4010b0:	0040114b 	.word	0x0040114b
  4010b4:	00401125 	.word	0x00401125
  4010b8:	0040119b 	.word	0x0040119b
  4010bc:	0040126b 	.word	0x0040126b
  4010c0:	00401191 	.word	0x00401191
  4010c4:	0040119b 	.word	0x0040119b
  4010c8:	0040119b 	.word	0x0040119b
  4010cc:	004011ad 	.word	0x004011ad
  4010d0:	004011db 	.word	0x004011db
  4010d4:	0040119b 	.word	0x0040119b
  4010d8:	0040124b 	.word	0x0040124b
	{
		case SYS_EVENT_POWER_SWITCH:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  4010dc:	4b65      	ldr	r3, [pc, #404]	; (401274 <processEvent+0x1e0>)
  4010de:	781b      	ldrb	r3, [r3, #0]
  4010e0:	2b04      	cmp	r3, #4
  4010e2:	d102      	bne.n	4010ea <processEvent+0x56>
			{
				//stop recording, then go to the off state. 
				stateExit_Recording(); 
  4010e4:	4b64      	ldr	r3, [pc, #400]	; (401278 <processEvent+0x1e4>)
  4010e6:	4798      	blx	r3
  4010e8:	e019      	b.n	40111e <processEvent+0x8a>
			}
			else if (currentSystemState == SYS_STATE_RESET)
  4010ea:	4b62      	ldr	r3, [pc, #392]	; (401274 <processEvent+0x1e0>)
  4010ec:	781b      	ldrb	r3, [r3, #0]
  4010ee:	2b02      	cmp	r3, #2
  4010f0:	d102      	bne.n	4010f8 <processEvent+0x64>
			{				
				stateExit_Reset();
  4010f2:	4b62      	ldr	r3, [pc, #392]	; (40127c <processEvent+0x1e8>)
  4010f4:	4798      	blx	r3
  4010f6:	e012      	b.n	40111e <processEvent+0x8a>
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  4010f8:	4b5e      	ldr	r3, [pc, #376]	; (401274 <processEvent+0x1e0>)
  4010fa:	781b      	ldrb	r3, [r3, #0]
  4010fc:	2b03      	cmp	r3, #3
  4010fe:	d102      	bne.n	401106 <processEvent+0x72>
			{
				stateExit_Idle();
  401100:	4b5f      	ldr	r3, [pc, #380]	; (401280 <processEvent+0x1ec>)
  401102:	4798      	blx	r3
  401104:	e00b      	b.n	40111e <processEvent+0x8a>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  401106:	4b5b      	ldr	r3, [pc, #364]	; (401274 <processEvent+0x1e0>)
  401108:	781b      	ldrb	r3, [r3, #0]
  40110a:	2b05      	cmp	r3, #5
  40110c:	d102      	bne.n	401114 <processEvent+0x80>
			{
				stateExit_Error();
  40110e:	4b5d      	ldr	r3, [pc, #372]	; (401284 <processEvent+0x1f0>)
  401110:	4798      	blx	r3
  401112:	e004      	b.n	40111e <processEvent+0x8a>
			}
			else if(currentSystemState == SYS_STATE_POWER_DOWN)
  401114:	4b57      	ldr	r3, [pc, #348]	; (401274 <processEvent+0x1e0>)
  401116:	781b      	ldrb	r3, [r3, #0]
  401118:	2b01      	cmp	r3, #1
  40111a:	d100      	bne.n	40111e <processEvent+0x8a>
			{
				//we should already be off, ignore
				break; 
  40111c:	e0a6      	b.n	40126c <processEvent+0x1d8>
			}
			//go to the power down state. 
			stateEntry_PowerDown(); 	
  40111e:	4b5a      	ldr	r3, [pc, #360]	; (401288 <processEvent+0x1f4>)
  401120:	4798      	blx	r3
		}
		break;
  401122:	e0a3      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_RECORD_SWITCH:
		{
			if(currentSystemState == SYS_STATE_IDLE)
  401124:	4b53      	ldr	r3, [pc, #332]	; (401274 <processEvent+0x1e0>)
  401126:	781b      	ldrb	r3, [r3, #0]
  401128:	2b03      	cmp	r3, #3
  40112a:	d104      	bne.n	401136 <processEvent+0xa2>
			{
				//start recording
				stateExit_Idle();
  40112c:	4b54      	ldr	r3, [pc, #336]	; (401280 <processEvent+0x1ec>)
  40112e:	4798      	blx	r3
				stateEntry_Recording();
  401130:	4b56      	ldr	r3, [pc, #344]	; (40128c <processEvent+0x1f8>)
  401132:	4798      	blx	r3
  401134:	e008      	b.n	401148 <processEvent+0xb4>
				//go to recording state
			}
			else if(currentSystemState == SYS_STATE_RECORDING)
  401136:	4b4f      	ldr	r3, [pc, #316]	; (401274 <processEvent+0x1e0>)
  401138:	781b      	ldrb	r3, [r3, #0]
  40113a:	2b04      	cmp	r3, #4
  40113c:	d104      	bne.n	401148 <processEvent+0xb4>
			{
				//stop recording
				stateExit_Recording();
  40113e:	4b4e      	ldr	r3, [pc, #312]	; (401278 <processEvent+0x1e4>)
  401140:	4798      	blx	r3
				//go to IDLE state
				stateEntry_Idle(); 
  401142:	4b53      	ldr	r3, [pc, #332]	; (401290 <processEvent+0x1fc>)
  401144:	4798      	blx	r3
			}
		}
		break;
  401146:	e091      	b.n	40126c <processEvent+0x1d8>
  401148:	e090      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_RESET_SWITCH:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  40114a:	4b4a      	ldr	r3, [pc, #296]	; (401274 <processEvent+0x1e0>)
  40114c:	781b      	ldrb	r3, [r3, #0]
  40114e:	2b04      	cmp	r3, #4
  401150:	d102      	bne.n	401158 <processEvent+0xc4>
			{
				//stop recording
				stateExit_Recording();
  401152:	4b49      	ldr	r3, [pc, #292]	; (401278 <processEvent+0x1e4>)
  401154:	4798      	blx	r3
  401156:	e011      	b.n	40117c <processEvent+0xe8>
			}
			else if(currentSystemState == SYS_STATE_RESET)
  401158:	4b46      	ldr	r3, [pc, #280]	; (401274 <processEvent+0x1e0>)
  40115a:	781b      	ldrb	r3, [r3, #0]
  40115c:	2b02      	cmp	r3, #2
  40115e:	d100      	bne.n	401162 <processEvent+0xce>
			{
				//do nothing, the user is impatient. 
				break; 
  401160:	e084      	b.n	40126c <processEvent+0x1d8>
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  401162:	4b44      	ldr	r3, [pc, #272]	; (401274 <processEvent+0x1e0>)
  401164:	781b      	ldrb	r3, [r3, #0]
  401166:	2b03      	cmp	r3, #3
  401168:	d102      	bne.n	401170 <processEvent+0xdc>
			{
				stateExit_Idle();
  40116a:	4b45      	ldr	r3, [pc, #276]	; (401280 <processEvent+0x1ec>)
  40116c:	4798      	blx	r3
  40116e:	e005      	b.n	40117c <processEvent+0xe8>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  401170:	4b40      	ldr	r3, [pc, #256]	; (401274 <processEvent+0x1e0>)
  401172:	781b      	ldrb	r3, [r3, #0]
  401174:	2b05      	cmp	r3, #5
  401176:	d101      	bne.n	40117c <processEvent+0xe8>
			{
				stateExit_Error();
  401178:	4b42      	ldr	r3, [pc, #264]	; (401284 <processEvent+0x1f0>)
  40117a:	4798      	blx	r3
			}
						 
			//start the reset process... 
			if (brainSettings.isLoaded == 1)
  40117c:	4b45      	ldr	r3, [pc, #276]	; (401294 <processEvent+0x200>)
  40117e:	681b      	ldr	r3, [r3, #0]
  401180:	2b01      	cmp	r3, #1
  401182:	d102      	bne.n	40118a <processEvent+0xf6>
			{
				stateEntry_Reset();
  401184:	4b44      	ldr	r3, [pc, #272]	; (401298 <processEvent+0x204>)
  401186:	4798      	blx	r3
			{
				stateEntry_Error();
			}
			 
		}
		break;
  401188:	e070      	b.n	40126c <processEvent+0x1d8>
			{
				stateEntry_Reset();
			}
			else
			{
				stateEntry_Error();
  40118a:	4b44      	ldr	r3, [pc, #272]	; (40129c <processEvent+0x208>)
  40118c:	4798      	blx	r3
			}
			 
		}
		break;
  40118e:	e06d      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_IMU_DISCONNECT:
		{
			if(currentSystemState == SYS_STATE_POWER_DOWN)
  401190:	4b38      	ldr	r3, [pc, #224]	; (401274 <processEvent+0x1e0>)
  401192:	781b      	ldrb	r3, [r3, #0]
  401194:	2b01      	cmp	r3, #1
  401196:	d100      	bne.n	40119a <processEvent+0x106>
			{
				//do nothing, this is expected
				break;
  401198:	e068      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_OVER_CURRENT:
		case SYS_EVENT_BLE_ERROR:
		case SYS_EVENT_JACK_DETECT:
		case SYS_EVENT_RESET_FAILED:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  40119a:	4b36      	ldr	r3, [pc, #216]	; (401274 <processEvent+0x1e0>)
  40119c:	781b      	ldrb	r3, [r3, #0]
  40119e:	2b04      	cmp	r3, #4
  4011a0:	d101      	bne.n	4011a6 <processEvent+0x112>
			{
				//stop recording.
				stateExit_Recording();
  4011a2:	4b35      	ldr	r3, [pc, #212]	; (401278 <processEvent+0x1e4>)
  4011a4:	4798      	blx	r3
			}
			stateEntry_Error(); 			
  4011a6:	4b3d      	ldr	r3, [pc, #244]	; (40129c <processEvent+0x208>)
  4011a8:	4798      	blx	r3
		}
		break;
  4011aa:	e05f      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_LOW_BATTERY:
		{
			if(currentSystemState == SYS_STATE_RECORDING)
  4011ac:	4b31      	ldr	r3, [pc, #196]	; (401274 <processEvent+0x1e0>)
  4011ae:	781b      	ldrb	r3, [r3, #0]
  4011b0:	2b04      	cmp	r3, #4
  4011b2:	d102      	bne.n	4011ba <processEvent+0x126>
			{
				//stop recording
				stateExit_Recording();
  4011b4:	4b30      	ldr	r3, [pc, #192]	; (401278 <processEvent+0x1e4>)
  4011b6:	4798      	blx	r3
  4011b8:	e00c      	b.n	4011d4 <processEvent+0x140>
			}
			else if (currentSystemState == SYS_STATE_IDLE)
  4011ba:	4b2e      	ldr	r3, [pc, #184]	; (401274 <processEvent+0x1e0>)
  4011bc:	781b      	ldrb	r3, [r3, #0]
  4011be:	2b03      	cmp	r3, #3
  4011c0:	d102      	bne.n	4011c8 <processEvent+0x134>
			{
				stateExit_Idle();
  4011c2:	4b2f      	ldr	r3, [pc, #188]	; (401280 <processEvent+0x1ec>)
  4011c4:	4798      	blx	r3
  4011c6:	e005      	b.n	4011d4 <processEvent+0x140>
			}
			else if (currentSystemState == SYS_STATE_ERROR)
  4011c8:	4b2a      	ldr	r3, [pc, #168]	; (401274 <processEvent+0x1e0>)
  4011ca:	781b      	ldrb	r3, [r3, #0]
  4011cc:	2b05      	cmp	r3, #5
  4011ce:	d101      	bne.n	4011d4 <processEvent+0x140>
			{
				stateExit_Error();
  4011d0:	4b2c      	ldr	r3, [pc, #176]	; (401284 <processEvent+0x1f0>)
  4011d2:	4798      	blx	r3
			}
			//go to the power down state. 	
			stateEntry_PowerDown(); 		
  4011d4:	4b2c      	ldr	r3, [pc, #176]	; (401288 <processEvent+0x1f4>)
  4011d6:	4798      	blx	r3
		}
		break;
  4011d8:	e048      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_RESET_COMPLETE:
		{
			if(currentSystemState != SYS_STATE_RESET)
  4011da:	4b26      	ldr	r3, [pc, #152]	; (401274 <processEvent+0x1e0>)
  4011dc:	781b      	ldrb	r3, [r3, #0]
  4011de:	2b02      	cmp	r3, #2
  4011e0:	d000      	beq.n	4011e4 <processEvent+0x150>
			{
				//do nothing, this is weird, should not get here. 
				break;
  4011e2:	e043      	b.n	40126c <processEvent+0x1d8>
			}
			QResetCount++;	//Check if all three Quintics are past the initialization process
  4011e4:	4b2e      	ldr	r3, [pc, #184]	; (4012a0 <processEvent+0x20c>)
  4011e6:	781b      	ldrb	r3, [r3, #0]
  4011e8:	3301      	adds	r3, #1
  4011ea:	b2da      	uxtb	r2, r3
  4011ec:	4b2c      	ldr	r3, [pc, #176]	; (4012a0 <processEvent+0x20c>)
  4011ee:	701a      	strb	r2, [r3, #0]
			int z;
			for (z=0; z<3; z++)
  4011f0:	2300      	movs	r3, #0
  4011f2:	60fb      	str	r3, [r7, #12]
  4011f4:	e012      	b.n	40121c <processEvent+0x188>
			{
				if (eventMsg.data == z)	//check for which Quintic is successfully initialized
  4011f6:	88fb      	ldrh	r3, [r7, #6]
  4011f8:	461a      	mov	r2, r3
  4011fa:	68fb      	ldr	r3, [r7, #12]
  4011fc:	429a      	cmp	r2, r3
  4011fe:	d10a      	bne.n	401216 <processEvent+0x182>
				{
					ResetStatus |= (1u<<(z));	//Save the result to a result flag
  401200:	2201      	movs	r2, #1
  401202:	68fb      	ldr	r3, [r7, #12]
  401204:	fa02 f303 	lsl.w	r3, r2, r3
  401208:	b2da      	uxtb	r2, r3
  40120a:	4b26      	ldr	r3, [pc, #152]	; (4012a4 <processEvent+0x210>)
  40120c:	781b      	ldrb	r3, [r3, #0]
  40120e:	4313      	orrs	r3, r2
  401210:	b2da      	uxtb	r2, r3
  401212:	4b24      	ldr	r3, [pc, #144]	; (4012a4 <processEvent+0x210>)
  401214:	701a      	strb	r2, [r3, #0]
				//do nothing, this is weird, should not get here. 
				break;
			}
			QResetCount++;	//Check if all three Quintics are past the initialization process
			int z;
			for (z=0; z<3; z++)
  401216:	68fb      	ldr	r3, [r7, #12]
  401218:	3301      	adds	r3, #1
  40121a:	60fb      	str	r3, [r7, #12]
  40121c:	68fb      	ldr	r3, [r7, #12]
  40121e:	2b02      	cmp	r3, #2
  401220:	dde9      	ble.n	4011f6 <processEvent+0x162>
					ResetStatus |= (1u<<(z));	//Save the result to a result flag
					
				}
			}
			//go to the idle state
			if (QResetCount < 3)	//If not all Quintic were initialized,
  401222:	4b1f      	ldr	r3, [pc, #124]	; (4012a0 <processEvent+0x20c>)
  401224:	781b      	ldrb	r3, [r3, #0]
  401226:	2b02      	cmp	r3, #2
  401228:	d802      	bhi.n	401230 <processEvent+0x19c>
			{
				CheckInitQuintic();	// pass the init command to the next one
  40122a:	4b1f      	ldr	r3, [pc, #124]	; (4012a8 <processEvent+0x214>)
  40122c:	4798      	blx	r3
  40122e:	e00b      	b.n	401248 <processEvent+0x1b4>
			}
			else
			{
				if (ResetStatus == 0x05)	//Check if all of them were initialized
  401230:	4b1c      	ldr	r3, [pc, #112]	; (4012a4 <processEvent+0x210>)
  401232:	781b      	ldrb	r3, [r3, #0]
  401234:	2b05      	cmp	r3, #5
  401236:	d102      	bne.n	40123e <processEvent+0x1aa>
				{
					//go to the idle state
					stateEntry_Idle();
  401238:	4b15      	ldr	r3, [pc, #84]	; (401290 <processEvent+0x1fc>)
  40123a:	4798      	blx	r3
  40123c:	e004      	b.n	401248 <processEvent+0x1b4>
				}
				else
				{
					task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_FAILED, 0);	//Assert Reset failed as one or more failed to initialize
  40123e:	200a      	movs	r0, #10
  401240:	2100      	movs	r1, #0
  401242:	4b1a      	ldr	r3, [pc, #104]	; (4012ac <processEvent+0x218>)
  401244:	4798      	blx	r3
				}
			}
			
		}
		break;
  401246:	e011      	b.n	40126c <processEvent+0x1d8>
  401248:	e010      	b.n	40126c <processEvent+0x1d8>
		case SYS_EVENT_POWER_UP_COMPLETE:
		{
			if(currentSystemState != SYS_STATE_POWER_DOWN)
  40124a:	4b0a      	ldr	r3, [pc, #40]	; (401274 <processEvent+0x1e0>)
  40124c:	781b      	ldrb	r3, [r3, #0]
  40124e:	2b01      	cmp	r3, #1
  401250:	d000      	beq.n	401254 <processEvent+0x1c0>
			{
				//we should not have gotten this event here
				break;
  401252:	e00b      	b.n	40126c <processEvent+0x1d8>
			}
			//first thing to do after the power up is reload config settings 
			if(reloadConfigSettings() == STATUS_PASS)
  401254:	4b16      	ldr	r3, [pc, #88]	; (4012b0 <processEvent+0x21c>)
  401256:	4798      	blx	r3
  401258:	4603      	mov	r3, r0
  40125a:	2b00      	cmp	r3, #0
  40125c:	d102      	bne.n	401264 <processEvent+0x1d0>
			{	
				//perform reset only if loading the settings was successful
				stateEntry_Reset(); 			
  40125e:	4b0e      	ldr	r3, [pc, #56]	; (401298 <processEvent+0x204>)
  401260:	4798      	blx	r3
			else
			{
				stateEntry_Error();
			}
		}
		break; 		
  401262:	e003      	b.n	40126c <processEvent+0x1d8>
				//perform reset only if loading the settings was successful
				stateEntry_Reset(); 			
			}
			else
			{
				stateEntry_Error();
  401264:	4b0d      	ldr	r3, [pc, #52]	; (40129c <processEvent+0x208>)
  401266:	4798      	blx	r3
			}
		}
		break; 		
  401268:	e000      	b.n	40126c <processEvent+0x1d8>
		default:
		//do nothing, should never reach here
		break; 										
  40126a:	bf00      	nop
	}
}
  40126c:	3710      	adds	r7, #16
  40126e:	46bd      	mov	sp, r7
  401270:	bd80      	pop	{r7, pc}
  401272:	bf00      	nop
  401274:	200014bc 	.word	0x200014bc
  401278:	004015ad 	.word	0x004015ad
  40127c:	00401501 	.word	0x00401501
  401280:	0040163d 	.word	0x0040163d
  401284:	004016ad 	.word	0x004016ad
  401288:	004012b5 	.word	0x004012b5
  40128c:	00401535 	.word	0x00401535
  401290:	004015f5 	.word	0x004015f5
  401294:	20001b30 	.word	0x20001b30
  401298:	00401429 	.word	0x00401429
  40129c:	00401665 	.word	0x00401665
  4012a0:	200021ac 	.word	0x200021ac
  4012a4:	200021ad 	.word	0x200021ad
  4012a8:	004016d5 	.word	0x004016d5
  4012ac:	00401029 	.word	0x00401029
  4012b0:	00401815 	.word	0x00401815

004012b4 <stateEntry_PowerDown>:
 * @return void
 ***********************************************************************************************/
//entry and exit functions
//power down function (handles entry and exit)
void stateEntry_PowerDown()
{
  4012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012b8:	b083      	sub	sp, #12
  4012ba:	af00      	add	r7, sp, #0
	currentSystemState = SYS_STATE_POWER_DOWN;	
  4012bc:	4b47      	ldr	r3, [pc, #284]	; (4013dc <stateEntry_PowerDown+0x128>)
  4012be:	2201      	movs	r2, #1
  4012c0:	701a      	strb	r2, [r3, #0]
	//setLED(LED_STATE_OFF);
	drv_led_set(DRV_LED_OFF, DRV_LED_SOLID);
  4012c2:	2005      	movs	r0, #5
  4012c4:	2101      	movs	r1, #1
  4012c6:	4b46      	ldr	r3, [pc, #280]	; (4013e0 <stateEntry_PowerDown+0x12c>)
  4012c8:	4798      	blx	r3
	//disable the interrupts, except for the power button
	//it is assumed that the button has already been held for 5 seconds

	DisconnectImus(&quinticConfig[0]);
  4012ca:	4846      	ldr	r0, [pc, #280]	; (4013e4 <stateEntry_PowerDown+0x130>)
  4012cc:	4b46      	ldr	r3, [pc, #280]	; (4013e8 <stateEntry_PowerDown+0x134>)
  4012ce:	4798      	blx	r3
	//DisconnectImus(&quinticConfig[1]);
	DisconnectImus(&quinticConfig[2]);
  4012d0:	4846      	ldr	r0, [pc, #280]	; (4013ec <stateEntry_PowerDown+0x138>)
  4012d2:	4b45      	ldr	r3, [pc, #276]	; (4013e8 <stateEntry_PowerDown+0x134>)
  4012d4:	4798      	blx	r3
	
	//clear the settings loaded bit
	brainSettings.isLoaded = 0;
  4012d6:	4b46      	ldr	r3, [pc, #280]	; (4013f0 <stateEntry_PowerDown+0x13c>)
  4012d8:	2200      	movs	r2, #0
  4012da:	601a      	str	r2, [r3, #0]
	
	//turn off the JACK power supplies (they're negatively asserted) 
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  4012dc:	2007      	movs	r0, #7
  4012de:	2101      	movs	r1, #1
  4012e0:	4b44      	ldr	r3, [pc, #272]	; (4013f4 <stateEntry_PowerDown+0x140>)
  4012e2:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  4012e4:	2008      	movs	r0, #8
  4012e6:	2101      	movs	r1, #1
  4012e8:	4b42      	ldr	r3, [pc, #264]	; (4013f4 <stateEntry_PowerDown+0x140>)
  4012ea:	4798      	blx	r3
	/* Put the processor to sleep, in this context with the systick timer
	*  dead, we will never leave, so initialization has to be done here too. 
	*  for now just stay in a loop until the power button is pressed again. 
	*/
	
	printf("Sleep mode enabled\r\n");
  4012ec:	4842      	ldr	r0, [pc, #264]	; (4013f8 <stateEntry_PowerDown+0x144>)
  4012ee:	4b43      	ldr	r3, [pc, #268]	; (4013fc <stateEntry_PowerDown+0x148>)
  4012f0:	4798      	blx	r3
	PreSleepProcess();
  4012f2:	4b43      	ldr	r3, [pc, #268]	; (401400 <stateEntry_PowerDown+0x14c>)
  4012f4:	4798      	blx	r3
	while (pwSwState == FALSE)	//Stay in sleep mode until wakeup
  4012f6:	e04a      	b.n	40138e <stateEntry_PowerDown+0xda>
	{
		//cpu_irq_disable();
		
		pmc_enable_sleepmode(0);
  4012f8:	2000      	movs	r0, #0
  4012fa:	4b42      	ldr	r3, [pc, #264]	; (401404 <stateEntry_PowerDown+0x150>)
  4012fc:	4798      	blx	r3
		
		//Processor wakes up from sleep
		delay_ms(WAKEUP_DELAY);
  4012fe:	4b42      	ldr	r3, [pc, #264]	; (401408 <stateEntry_PowerDown+0x154>)
  401300:	4798      	blx	r3
  401302:	4603      	mov	r3, r0
  401304:	4618      	mov	r0, r3
  401306:	f04f 0100 	mov.w	r1, #0
  40130a:	4602      	mov	r2, r0
  40130c:	460b      	mov	r3, r1
  40130e:	ea4f 0983 	mov.w	r9, r3, lsl #2
  401312:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  401316:	ea4f 0882 	mov.w	r8, r2, lsl #2
  40131a:	4642      	mov	r2, r8
  40131c:	464b      	mov	r3, r9
  40131e:	015d      	lsls	r5, r3, #5
  401320:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  401324:	0154      	lsls	r4, r2, #5
  401326:	1aa4      	subs	r4, r4, r2
  401328:	eb65 0503 	sbc.w	r5, r5, r3
  40132c:	1824      	adds	r4, r4, r0
  40132e:	eb45 0501 	adc.w	r5, r5, r1
  401332:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
  401336:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
  40133a:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  40133e:	4654      	mov	r4, sl
  401340:	465d      	mov	r5, fp
  401342:	4620      	mov	r0, r4
  401344:	4629      	mov	r1, r5
  401346:	f243 62af 	movw	r2, #13999	; 0x36af
  40134a:	f04f 0300 	mov.w	r3, #0
  40134e:	1812      	adds	r2, r2, r0
  401350:	eb43 0301 	adc.w	r3, r3, r1
  401354:	4e2d      	ldr	r6, [pc, #180]	; (40140c <stateEntry_PowerDown+0x158>)
  401356:	4610      	mov	r0, r2
  401358:	4619      	mov	r1, r3
  40135a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40135e:	f04f 0300 	mov.w	r3, #0
  401362:	47b0      	blx	r6
  401364:	4602      	mov	r2, r0
  401366:	460b      	mov	r3, r1
  401368:	4613      	mov	r3, r2
  40136a:	4618      	mov	r0, r3
  40136c:	4b28      	ldr	r3, [pc, #160]	; (401410 <stateEntry_PowerDown+0x15c>)
  40136e:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_PW_SW, &pwSwState);	//poll the power switch
  401370:	2000      	movs	r0, #0
  401372:	4928      	ldr	r1, [pc, #160]	; (401414 <stateEntry_PowerDown+0x160>)
  401374:	4b28      	ldr	r3, [pc, #160]	; (401418 <stateEntry_PowerDown+0x164>)
  401376:	4798      	blx	r3
		if(pwSwState == DRV_GPIO_PIN_STATE_LOW)	//check if it is a false wakeup
  401378:	4b26      	ldr	r3, [pc, #152]	; (401414 <stateEntry_PowerDown+0x160>)
  40137a:	781b      	ldrb	r3, [r3, #0]
  40137c:	2b00      	cmp	r3, #0
  40137e:	d103      	bne.n	401388 <stateEntry_PowerDown+0xd4>
		{
			pwSwState = TRUE;
  401380:	4b24      	ldr	r3, [pc, #144]	; (401414 <stateEntry_PowerDown+0x160>)
  401382:	2201      	movs	r2, #1
  401384:	701a      	strb	r2, [r3, #0]
  401386:	e002      	b.n	40138e <stateEntry_PowerDown+0xda>
		}
		else
		{
			pwSwState = FALSE;
  401388:	4b22      	ldr	r3, [pc, #136]	; (401414 <stateEntry_PowerDown+0x160>)
  40138a:	2200      	movs	r2, #0
  40138c:	701a      	strb	r2, [r3, #0]
	*  for now just stay in a loop until the power button is pressed again. 
	*/
	
	printf("Sleep mode enabled\r\n");
	PreSleepProcess();
	while (pwSwState == FALSE)	//Stay in sleep mode until wakeup
  40138e:	4b21      	ldr	r3, [pc, #132]	; (401414 <stateEntry_PowerDown+0x160>)
  401390:	781b      	ldrb	r3, [r3, #0]
  401392:	2b00      	cmp	r3, #0
  401394:	d0b0      	beq.n	4012f8 <stateEntry_PowerDown+0x44>
		{
			pwSwState = FALSE;
		}
	}
	
	pwSwState = FALSE;
  401396:	4b1f      	ldr	r3, [pc, #124]	; (401414 <stateEntry_PowerDown+0x160>)
  401398:	2200      	movs	r2, #0
  40139a:	701a      	strb	r2, [r3, #0]
	PostSleepProcess();
  40139c:	4b1f      	ldr	r3, [pc, #124]	; (40141c <stateEntry_PowerDown+0x168>)
  40139e:	4798      	blx	r3
	//enable the jacks
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  4013a0:	2007      	movs	r0, #7
  4013a2:	2100      	movs	r1, #0
  4013a4:	4b13      	ldr	r3, [pc, #76]	; (4013f4 <stateEntry_PowerDown+0x140>)
  4013a6:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  4013a8:	2008      	movs	r0, #8
  4013aa:	2100      	movs	r1, #0
  4013ac:	4b11      	ldr	r3, [pc, #68]	; (4013f4 <stateEntry_PowerDown+0x140>)
  4013ae:	4798      	blx	r3
	
	//TODO check which jacks are connected to determine which IMUs are there	
	
	//send power up complete event
	eventMessage_t msg = {.sysEvent = SYS_EVENT_POWER_UP_COMPLETE, .data = 0};
  4013b0:	230b      	movs	r3, #11
  4013b2:	713b      	strb	r3, [r7, #4]
  4013b4:	2300      	movs	r3, #0
  4013b6:	80fb      	strh	r3, [r7, #6]
	if(queue_stateMachineEvents != NULL)
  4013b8:	4b19      	ldr	r3, [pc, #100]	; (401420 <stateEntry_PowerDown+0x16c>)
  4013ba:	681b      	ldr	r3, [r3, #0]
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d008      	beq.n	4013d2 <stateEntry_PowerDown+0x11e>
	{
		xQueueSendToBack(queue_stateMachineEvents, &msg,5);
  4013c0:	4b17      	ldr	r3, [pc, #92]	; (401420 <stateEntry_PowerDown+0x16c>)
  4013c2:	681a      	ldr	r2, [r3, #0]
  4013c4:	1d3b      	adds	r3, r7, #4
  4013c6:	4610      	mov	r0, r2
  4013c8:	4619      	mov	r1, r3
  4013ca:	2205      	movs	r2, #5
  4013cc:	2300      	movs	r3, #0
  4013ce:	4c15      	ldr	r4, [pc, #84]	; (401424 <stateEntry_PowerDown+0x170>)
  4013d0:	47a0      	blx	r4
	}
		
}
  4013d2:	370c      	adds	r7, #12
  4013d4:	46bd      	mov	sp, r7
  4013d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013da:	bf00      	nop
  4013dc:	200014bc 	.word	0x200014bc
  4013e0:	00400255 	.word	0x00400255
  4013e4:	200002e0 	.word	0x200002e0
  4013e8:	0040cf69 	.word	0x0040cf69
  4013ec:	20000338 	.word	0x20000338
  4013f0:	20001b30 	.word	0x20001b30
  4013f4:	0040a9d9 	.word	0x0040a9d9
  4013f8:	004184d4 	.word	0x004184d4
  4013fc:	0040eadd 	.word	0x0040eadd
  401400:	00401749 	.word	0x00401749
  401404:	0040def5 	.word	0x0040def5
  401408:	00400f09 	.word	0x00400f09
  40140c:	0040e4e1 	.word	0x0040e4e1
  401410:	20000001 	.word	0x20000001
  401414:	200021b8 	.word	0x200021b8
  401418:	0040aa3d 	.word	0x0040aa3d
  40141c:	004017b5 	.word	0x004017b5
  401420:	200014b8 	.word	0x200014b8
  401424:	00408019 	.word	0x00408019

00401428 <stateEntry_Reset>:
 * @param void
 * @return void
 ***********************************************************************************************/
//reset entry
void stateEntry_Reset()
{
  401428:	b590      	push	{r4, r7, lr}
  40142a:	b089      	sub	sp, #36	; 0x24
  40142c:	af04      	add	r7, sp, #16
	status_t status = STATUS_PASS; 
  40142e:	2300      	movs	r3, #0
  401430:	73fb      	strb	r3, [r7, #15]
	eventMessage_t msg = {.sysEvent = SYS_EVENT_RESET_COMPLETE, .data = 0};
  401432:	2309      	movs	r3, #9
  401434:	713b      	strb	r3, [r7, #4]
  401436:	2300      	movs	r3, #0
  401438:	80fb      	strh	r3, [r7, #6]
	//set current state to reset.
	currentSystemState = SYS_STATE_RESET;
  40143a:	4b23      	ldr	r3, [pc, #140]	; (4014c8 <stateEntry_Reset+0xa0>)
  40143c:	2202      	movs	r2, #2
  40143e:	701a      	strb	r2, [r3, #0]
	//set LED to blue
	//setLED(LED_STATE_BLUE_SOLID); 
	drv_led_set(DRV_LED_BLUE, DRV_LED_FLASH);
  401440:	2001      	movs	r0, #1
  401442:	2100      	movs	r1, #0
  401444:	4b21      	ldr	r3, [pc, #132]	; (4014cc <stateEntry_Reset+0xa4>)
  401446:	4798      	blx	r3
	QResetCount = 0;
  401448:	4b21      	ldr	r3, [pc, #132]	; (4014d0 <stateEntry_Reset+0xa8>)
  40144a:	2200      	movs	r2, #0
  40144c:	701a      	strb	r2, [r3, #0]
	//reset NOD power with JACK EN
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH); 
  40144e:	2007      	movs	r0, #7
  401450:	2101      	movs	r1, #1
  401452:	4b20      	ldr	r3, [pc, #128]	; (4014d4 <stateEntry_Reset+0xac>)
  401454:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  401456:	2008      	movs	r0, #8
  401458:	2101      	movs	r1, #1
  40145a:	4b1e      	ldr	r3, [pc, #120]	; (4014d4 <stateEntry_Reset+0xac>)
  40145c:	4798      	blx	r3
	vTaskDelay(100); 
  40145e:	2064      	movs	r0, #100	; 0x64
  401460:	4b1d      	ldr	r3, [pc, #116]	; (4014d8 <stateEntry_Reset+0xb0>)
  401462:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW); 
  401464:	2007      	movs	r0, #7
  401466:	2100      	movs	r1, #0
  401468:	4b1a      	ldr	r3, [pc, #104]	; (4014d4 <stateEntry_Reset+0xac>)
  40146a:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW); 
  40146c:	2008      	movs	r0, #8
  40146e:	2100      	movs	r1, #0
  401470:	4b18      	ldr	r3, [pc, #96]	; (4014d4 <stateEntry_Reset+0xac>)
  401472:	4798      	blx	r3
	vTaskDelay(100); 
  401474:	2064      	movs	r0, #100	; 0x64
  401476:	4b18      	ldr	r3, [pc, #96]	; (4014d8 <stateEntry_Reset+0xb0>)
  401478:	4798      	blx	r3
	//Reset/init Q1
	
	if(quinticConfig[0].isinit)
  40147a:	4b18      	ldr	r3, [pc, #96]	; (4014dc <stateEntry_Reset+0xb4>)
  40147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40147e:	2b00      	cmp	r3, #0
  401480:	d016      	beq.n	4014b0 <stateEntry_Reset+0x88>
		{
			//status |= task_quintic_initializeImus(&quinticConfig[i]);	
			int retCode = xTaskCreate(task_quintic_initializeImus, "Qi", TASK_IMU_INIT_STACK_SIZE, (void*)&quinticConfig[0], TASK_IMU_INIT_PRIORITY, &ResetHandle );
  401482:	2307      	movs	r3, #7
  401484:	9300      	str	r3, [sp, #0]
  401486:	4b16      	ldr	r3, [pc, #88]	; (4014e0 <stateEntry_Reset+0xb8>)
  401488:	9301      	str	r3, [sp, #4]
  40148a:	2300      	movs	r3, #0
  40148c:	9302      	str	r3, [sp, #8]
  40148e:	2300      	movs	r3, #0
  401490:	9303      	str	r3, [sp, #12]
  401492:	4814      	ldr	r0, [pc, #80]	; (4014e4 <stateEntry_Reset+0xbc>)
  401494:	4914      	ldr	r1, [pc, #80]	; (4014e8 <stateEntry_Reset+0xc0>)
  401496:	f44f 7280 	mov.w	r2, #256	; 0x100
  40149a:	4b10      	ldr	r3, [pc, #64]	; (4014dc <stateEntry_Reset+0xb4>)
  40149c:	4c13      	ldr	r4, [pc, #76]	; (4014ec <stateEntry_Reset+0xc4>)
  40149e:	47a0      	blx	r4
  4014a0:	60b8      	str	r0, [r7, #8]
			if (retCode != pdPASS)
  4014a2:	68bb      	ldr	r3, [r7, #8]
  4014a4:	2b01      	cmp	r3, #1
  4014a6:	d003      	beq.n	4014b0 <stateEntry_Reset+0x88>
			{
				printf("Failed to create Q1 task code %d\r\n", retCode);
  4014a8:	4811      	ldr	r0, [pc, #68]	; (4014f0 <stateEntry_Reset+0xc8>)
  4014aa:	68b9      	ldr	r1, [r7, #8]
  4014ac:	4b11      	ldr	r3, [pc, #68]	; (4014f4 <stateEntry_Reset+0xcc>)
  4014ae:	4798      	blx	r3
			}
		}
	
	//initialize fabric sense module
	status |= task_fabSense_init(&fsConfig); 
  4014b0:	4811      	ldr	r0, [pc, #68]	; (4014f8 <stateEntry_Reset+0xd0>)
  4014b2:	4b12      	ldr	r3, [pc, #72]	; (4014fc <stateEntry_Reset+0xd4>)
  4014b4:	4798      	blx	r3
  4014b6:	4603      	mov	r3, r0
  4014b8:	461a      	mov	r2, r3
  4014ba:	7bfb      	ldrb	r3, [r7, #15]
  4014bc:	4313      	orrs	r3, r2
  4014be:	73fb      	strb	r3, [r7, #15]
	//if(queue_stateMachineEvents != NULL)
	//{
		//xQueueSendToBack(queue_stateMachineEvents, &msg,5); 	
	//}
	
}
  4014c0:	3714      	adds	r7, #20
  4014c2:	46bd      	mov	sp, r7
  4014c4:	bd90      	pop	{r4, r7, pc}
  4014c6:	bf00      	nop
  4014c8:	200014bc 	.word	0x200014bc
  4014cc:	00400255 	.word	0x00400255
  4014d0:	200021ac 	.word	0x200021ac
  4014d4:	0040a9d9 	.word	0x0040a9d9
  4014d8:	00408855 	.word	0x00408855
  4014dc:	200002e0 	.word	0x200002e0
  4014e0:	200014c0 	.word	0x200014c0
  4014e4:	0040c9e1 	.word	0x0040c9e1
  4014e8:	004184ec 	.word	0x004184ec
  4014ec:	00408631 	.word	0x00408631
  4014f0:	004184f0 	.word	0x004184f0
  4014f4:	0040eadd 	.word	0x0040eadd
  4014f8:	20000364 	.word	0x20000364
  4014fc:	0040c1dd 	.word	0x0040c1dd

00401500 <stateExit_Reset>:
 * @brief This initializes the Exit from Reset state
 * @param void
 * @return void
 ***********************************************************************************************/
void stateExit_Reset()
{
  401500:	b580      	push	{r7, lr}
  401502:	af00      	add	r7, sp, #0
	drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST1, DRV_GPIO_PIN_STATE_LOW); 
  401504:	2009      	movs	r0, #9
  401506:	2100      	movs	r1, #0
  401508:	4b07      	ldr	r3, [pc, #28]	; (401528 <stateExit_Reset+0x28>)
  40150a:	4798      	blx	r3
	//drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST2, DRV_GPIO_PIN_STATE_LOW);
	drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST3, DRV_GPIO_PIN_STATE_LOW);
  40150c:	200b      	movs	r0, #11
  40150e:	2100      	movs	r1, #0
  401510:	4b05      	ldr	r3, [pc, #20]	; (401528 <stateExit_Reset+0x28>)
  401512:	4798      	blx	r3
	if (ResetHandle != NULL)
  401514:	4b05      	ldr	r3, [pc, #20]	; (40152c <stateExit_Reset+0x2c>)
  401516:	681b      	ldr	r3, [r3, #0]
  401518:	2b00      	cmp	r3, #0
  40151a:	d004      	beq.n	401526 <stateExit_Reset+0x26>
	{
		vTaskDelete(ResetHandle);
  40151c:	4b03      	ldr	r3, [pc, #12]	; (40152c <stateExit_Reset+0x2c>)
  40151e:	681b      	ldr	r3, [r3, #0]
  401520:	4618      	mov	r0, r3
  401522:	4b03      	ldr	r3, [pc, #12]	; (401530 <stateExit_Reset+0x30>)
  401524:	4798      	blx	r3
	}
}
  401526:	bd80      	pop	{r7, pc}
  401528:	0040a9d9 	.word	0x0040a9d9
  40152c:	200014c0 	.word	0x200014c0
  401530:	004087a9 	.word	0x004087a9

00401534 <stateEntry_Recording>:
 * @param void
 * @return void
 ***********************************************************************************************/
//recording entry
void stateEntry_Recording()
{
  401534:	b580      	push	{r7, lr}
  401536:	af00      	add	r7, sp, #0
	currentSystemState = SYS_STATE_RECORDING;
  401538:	4b10      	ldr	r3, [pc, #64]	; (40157c <stateEntry_Recording+0x48>)
  40153a:	2204      	movs	r2, #4
  40153c:	701a      	strb	r2, [r3, #0]
	stateEntryTime = sgSysTickCount;  
  40153e:	4b10      	ldr	r3, [pc, #64]	; (401580 <stateEntry_Recording+0x4c>)
  401540:	681a      	ldr	r2, [r3, #0]
  401542:	4b10      	ldr	r3, [pc, #64]	; (401584 <stateEntry_Recording+0x50>)
  401544:	601a      	str	r2, [r3, #0]
	//setLED(LED_STATE_RED_SOLID);
	drv_led_set(DRV_LED_RED, DRV_LED_FLASH);
  401546:	2000      	movs	r0, #0
  401548:	2100      	movs	r1, #0
  40154a:	4b0f      	ldr	r3, [pc, #60]	; (401588 <stateEntry_Recording+0x54>)
  40154c:	4798      	blx	r3
	//open new log file
	if(task_sdCard_OpenNewFile() != STATUS_PASS)
  40154e:	4b0f      	ldr	r3, [pc, #60]	; (40158c <stateEntry_Recording+0x58>)
  401550:	4798      	blx	r3
	{
		//this is an error, we should probably do something
	}
	
	//wait for user to get into position
	vTaskDelay(3000);
  401552:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401556:	4b0e      	ldr	r3, [pc, #56]	; (401590 <stateEntry_Recording+0x5c>)
  401558:	4798      	blx	r3
	
	//setLED(LED_STATE_RED_SOLID); 	
	drv_led_set(DRV_LED_RED, DRV_LED_SOLID);
  40155a:	2000      	movs	r0, #0
  40155c:	2101      	movs	r1, #1
  40155e:	4b0a      	ldr	r3, [pc, #40]	; (401588 <stateEntry_Recording+0x54>)
  401560:	4798      	blx	r3
	//send start command to quintics and fabric sense
	task_quintic_startRecording(&quinticConfig[0]);
  401562:	480c      	ldr	r0, [pc, #48]	; (401594 <stateEntry_Recording+0x60>)
  401564:	4b0c      	ldr	r3, [pc, #48]	; (401598 <stateEntry_Recording+0x64>)
  401566:	4798      	blx	r3
	task_quintic_startRecording(&quinticConfig[1]);
  401568:	480c      	ldr	r0, [pc, #48]	; (40159c <stateEntry_Recording+0x68>)
  40156a:	4b0b      	ldr	r3, [pc, #44]	; (401598 <stateEntry_Recording+0x64>)
  40156c:	4798      	blx	r3
	task_quintic_startRecording(&quinticConfig[2]);
  40156e:	480c      	ldr	r0, [pc, #48]	; (4015a0 <stateEntry_Recording+0x6c>)
  401570:	4b09      	ldr	r3, [pc, #36]	; (401598 <stateEntry_Recording+0x64>)
  401572:	4798      	blx	r3
	task_fabSense_start(&fsConfig);				
  401574:	480b      	ldr	r0, [pc, #44]	; (4015a4 <stateEntry_Recording+0x70>)
  401576:	4b0c      	ldr	r3, [pc, #48]	; (4015a8 <stateEntry_Recording+0x74>)
  401578:	4798      	blx	r3
}
  40157a:	bd80      	pop	{r7, pc}
  40157c:	200014bc 	.word	0x200014bc
  401580:	20001f3c 	.word	0x20001f3c
  401584:	200014c4 	.word	0x200014c4
  401588:	00400255 	.word	0x00400255
  40158c:	00400c2d 	.word	0x00400c2d
  401590:	00408855 	.word	0x00408855
  401594:	200002e0 	.word	0x200002e0
  401598:	0040cbcd 	.word	0x0040cbcd
  40159c:	2000030c 	.word	0x2000030c
  4015a0:	20000338 	.word	0x20000338
  4015a4:	20000364 	.word	0x20000364
  4015a8:	0040c1f5 	.word	0x0040c1f5

004015ac <stateExit_Recording>:
 * @param void
 * @return void
 ***********************************************************************************************/
//recording exit
void stateExit_Recording()
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	af00      	add	r7, sp, #0
	//send stop command to quintics and fabric sense
	task_quintic_stopRecording(&quinticConfig[0]);
  4015b0:	4808      	ldr	r0, [pc, #32]	; (4015d4 <stateExit_Recording+0x28>)
  4015b2:	4b09      	ldr	r3, [pc, #36]	; (4015d8 <stateExit_Recording+0x2c>)
  4015b4:	4798      	blx	r3
	task_quintic_stopRecording(&quinticConfig[1]);
  4015b6:	4809      	ldr	r0, [pc, #36]	; (4015dc <stateExit_Recording+0x30>)
  4015b8:	4b07      	ldr	r3, [pc, #28]	; (4015d8 <stateExit_Recording+0x2c>)
  4015ba:	4798      	blx	r3
	task_quintic_stopRecording(&quinticConfig[2]);
  4015bc:	4808      	ldr	r0, [pc, #32]	; (4015e0 <stateExit_Recording+0x34>)
  4015be:	4b06      	ldr	r3, [pc, #24]	; (4015d8 <stateExit_Recording+0x2c>)
  4015c0:	4798      	blx	r3
	task_fabSense_stop(&fsConfig);	
  4015c2:	4808      	ldr	r0, [pc, #32]	; (4015e4 <stateExit_Recording+0x38>)
  4015c4:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <stateExit_Recording+0x3c>)
  4015c6:	4798      	blx	r3
	//wait for a bit for the data to be processed.
	vTaskDelay(100);
  4015c8:	2064      	movs	r0, #100	; 0x64
  4015ca:	4b08      	ldr	r3, [pc, #32]	; (4015ec <stateExit_Recording+0x40>)
  4015cc:	4798      	blx	r3
	//close the data file for the current recording
	task_sdCard_CloseFile();				
  4015ce:	4b08      	ldr	r3, [pc, #32]	; (4015f0 <stateExit_Recording+0x44>)
  4015d0:	4798      	blx	r3
}
  4015d2:	bd80      	pop	{r7, pc}
  4015d4:	200002e0 	.word	0x200002e0
  4015d8:	0040cbf5 	.word	0x0040cbf5
  4015dc:	2000030c 	.word	0x2000030c
  4015e0:	20000338 	.word	0x20000338
  4015e4:	20000364 	.word	0x20000364
  4015e8:	0040c219 	.word	0x0040c219
  4015ec:	00408855 	.word	0x00408855
  4015f0:	00400e1d 	.word	0x00400e1d

004015f4 <stateEntry_Idle>:
 * @param void
 * @return void
 ***********************************************************************************************/
//idle entry
void stateEntry_Idle()
{
  4015f4:	b590      	push	{r4, r7, lr}
  4015f6:	b083      	sub	sp, #12
  4015f8:	af02      	add	r7, sp, #8
	currentSystemState = SYS_STATE_IDLE;
  4015fa:	4b0b      	ldr	r3, [pc, #44]	; (401628 <stateEntry_Idle+0x34>)
  4015fc:	2203      	movs	r2, #3
  4015fe:	701a      	strb	r2, [r3, #0]
	xTimerReset(TimeOutTimer, 0); 
  401600:	4b0a      	ldr	r3, [pc, #40]	; (40162c <stateEntry_Idle+0x38>)
  401602:	681c      	ldr	r4, [r3, #0]
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <stateEntry_Idle+0x3c>)
  401606:	4798      	blx	r3
  401608:	4603      	mov	r3, r0
  40160a:	2200      	movs	r2, #0
  40160c:	9200      	str	r2, [sp, #0]
  40160e:	4620      	mov	r0, r4
  401610:	2100      	movs	r1, #0
  401612:	461a      	mov	r2, r3
  401614:	2300      	movs	r3, #0
  401616:	4c07      	ldr	r4, [pc, #28]	; (401634 <stateEntry_Idle+0x40>)
  401618:	47a0      	blx	r4
	//setLED(LED_STATE_GREEN_SOLID);
	drv_led_set(DRV_LED_GREEN, DRV_LED_SOLID);
  40161a:	2002      	movs	r0, #2
  40161c:	2101      	movs	r1, #1
  40161e:	4b06      	ldr	r3, [pc, #24]	; (401638 <stateEntry_Idle+0x44>)
  401620:	4798      	blx	r3
}
  401622:	3704      	adds	r7, #4
  401624:	46bd      	mov	sp, r7
  401626:	bd90      	pop	{r4, r7, pc}
  401628:	200014bc 	.word	0x200014bc
  40162c:	200021b0 	.word	0x200021b0
  401630:	00408a55 	.word	0x00408a55
  401634:	004095f5 	.word	0x004095f5
  401638:	00400255 	.word	0x00400255

0040163c <stateExit_Idle>:
 * @param void
 * @return void
 ***********************************************************************************************/
//idle exit
void stateExit_Idle()
{
  40163c:	b590      	push	{r4, r7, lr}
  40163e:	b083      	sub	sp, #12
  401640:	af02      	add	r7, sp, #8
	xTimerStop(TimeOutTimer, 0); 
  401642:	4b06      	ldr	r3, [pc, #24]	; (40165c <stateExit_Idle+0x20>)
  401644:	681b      	ldr	r3, [r3, #0]
  401646:	2200      	movs	r2, #0
  401648:	9200      	str	r2, [sp, #0]
  40164a:	4618      	mov	r0, r3
  40164c:	2101      	movs	r1, #1
  40164e:	2200      	movs	r2, #0
  401650:	2300      	movs	r3, #0
  401652:	4c03      	ldr	r4, [pc, #12]	; (401660 <stateExit_Idle+0x24>)
  401654:	47a0      	blx	r4
}
  401656:	3704      	adds	r7, #4
  401658:	46bd      	mov	sp, r7
  40165a:	bd90      	pop	{r4, r7, pc}
  40165c:	200021b0 	.word	0x200021b0
  401660:	004095f5 	.word	0x004095f5

00401664 <stateEntry_Error>:
 * @param void
 * @return void
 ***********************************************************************************************/
//Error state entry
void stateEntry_Error()
{
  401664:	b590      	push	{r4, r7, lr}
  401666:	b083      	sub	sp, #12
  401668:	af02      	add	r7, sp, #8
	currentSystemState = SYS_STATE_ERROR;
  40166a:	4b0b      	ldr	r3, [pc, #44]	; (401698 <stateEntry_Error+0x34>)
  40166c:	2205      	movs	r2, #5
  40166e:	701a      	strb	r2, [r3, #0]
	xTimerReset(TimeOutTimer, 0);
  401670:	4b0a      	ldr	r3, [pc, #40]	; (40169c <stateEntry_Error+0x38>)
  401672:	681c      	ldr	r4, [r3, #0]
  401674:	4b0a      	ldr	r3, [pc, #40]	; (4016a0 <stateEntry_Error+0x3c>)
  401676:	4798      	blx	r3
  401678:	4603      	mov	r3, r0
  40167a:	2200      	movs	r2, #0
  40167c:	9200      	str	r2, [sp, #0]
  40167e:	4620      	mov	r0, r4
  401680:	2100      	movs	r1, #0
  401682:	461a      	mov	r2, r3
  401684:	2300      	movs	r3, #0
  401686:	4c07      	ldr	r4, [pc, #28]	; (4016a4 <stateEntry_Error+0x40>)
  401688:	47a0      	blx	r4
	//setLED(LED_STATE_YELLOW_SOLID); 
	drv_led_set(DRV_LED_YELLOW, DRV_LED_FLASH);
  40168a:	2003      	movs	r0, #3
  40168c:	2100      	movs	r1, #0
  40168e:	4b06      	ldr	r3, [pc, #24]	; (4016a8 <stateEntry_Error+0x44>)
  401690:	4798      	blx	r3
}
  401692:	3704      	adds	r7, #4
  401694:	46bd      	mov	sp, r7
  401696:	bd90      	pop	{r4, r7, pc}
  401698:	200014bc 	.word	0x200014bc
  40169c:	200021b0 	.word	0x200021b0
  4016a0:	00408a55 	.word	0x00408a55
  4016a4:	004095f5 	.word	0x004095f5
  4016a8:	00400255 	.word	0x00400255

004016ac <stateExit_Error>:
 * @param void
 * @return void
 ***********************************************************************************************/
//Error state exit
void stateExit_Error()
{
  4016ac:	b590      	push	{r4, r7, lr}
  4016ae:	b083      	sub	sp, #12
  4016b0:	af02      	add	r7, sp, #8
	xTimerStop(TimeOutTimer, 0);
  4016b2:	4b06      	ldr	r3, [pc, #24]	; (4016cc <stateExit_Error+0x20>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	2200      	movs	r2, #0
  4016b8:	9200      	str	r2, [sp, #0]
  4016ba:	4618      	mov	r0, r3
  4016bc:	2101      	movs	r1, #1
  4016be:	2200      	movs	r2, #0
  4016c0:	2300      	movs	r3, #0
  4016c2:	4c03      	ldr	r4, [pc, #12]	; (4016d0 <stateExit_Error+0x24>)
  4016c4:	47a0      	blx	r4
}
  4016c6:	3704      	adds	r7, #4
  4016c8:	46bd      	mov	sp, r7
  4016ca:	bd90      	pop	{r4, r7, pc}
  4016cc:	200021b0 	.word	0x200021b0
  4016d0:	004095f5 	.word	0x004095f5

004016d4 <CheckInitQuintic>:
 * @brief This creates quintic initializing task for the next  quintic
 * @param void
 * @return void
 ***********************************************************************************************/
static void CheckInitQuintic()
{
  4016d4:	b590      	push	{r4, r7, lr}
  4016d6:	b087      	sub	sp, #28
  4016d8:	af04      	add	r7, sp, #16
	if (QResetCount == 1)	//temporary check to ignore BLE2 due to hardware problems
  4016da:	4b13      	ldr	r3, [pc, #76]	; (401728 <CheckInitQuintic+0x54>)
  4016dc:	781b      	ldrb	r3, [r3, #0]
  4016de:	2b01      	cmp	r3, #1
  4016e0:	d102      	bne.n	4016e8 <CheckInitQuintic+0x14>
	{
		QResetCount = 2;
  4016e2:	4b11      	ldr	r3, [pc, #68]	; (401728 <CheckInitQuintic+0x54>)
  4016e4:	2202      	movs	r2, #2
  4016e6:	701a      	strb	r2, [r3, #0]
	}
	//pass the init command to the next Quintic
	int retCode = xTaskCreate(task_quintic_initializeImus, "Qi", TASK_IMU_INIT_STACK_SIZE, (void*)&quinticConfig[QResetCount], TASK_IMU_INIT_PRIORITY, &ResetHandle );
  4016e8:	4b0f      	ldr	r3, [pc, #60]	; (401728 <CheckInitQuintic+0x54>)
  4016ea:	781b      	ldrb	r3, [r3, #0]
  4016ec:	222c      	movs	r2, #44	; 0x2c
  4016ee:	fb02 f203 	mul.w	r2, r2, r3
  4016f2:	4b0e      	ldr	r3, [pc, #56]	; (40172c <CheckInitQuintic+0x58>)
  4016f4:	4413      	add	r3, r2
  4016f6:	2207      	movs	r2, #7
  4016f8:	9200      	str	r2, [sp, #0]
  4016fa:	4a0d      	ldr	r2, [pc, #52]	; (401730 <CheckInitQuintic+0x5c>)
  4016fc:	9201      	str	r2, [sp, #4]
  4016fe:	2200      	movs	r2, #0
  401700:	9202      	str	r2, [sp, #8]
  401702:	2200      	movs	r2, #0
  401704:	9203      	str	r2, [sp, #12]
  401706:	480b      	ldr	r0, [pc, #44]	; (401734 <CheckInitQuintic+0x60>)
  401708:	490b      	ldr	r1, [pc, #44]	; (401738 <CheckInitQuintic+0x64>)
  40170a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40170e:	4c0b      	ldr	r4, [pc, #44]	; (40173c <CheckInitQuintic+0x68>)
  401710:	47a0      	blx	r4
  401712:	6078      	str	r0, [r7, #4]
	if (retCode != pdPASS)
  401714:	687b      	ldr	r3, [r7, #4]
  401716:	2b01      	cmp	r3, #1
  401718:	d003      	beq.n	401722 <CheckInitQuintic+0x4e>
	{
		printf("Failed to create Q1 task code %d\r\n", retCode);
  40171a:	4809      	ldr	r0, [pc, #36]	; (401740 <CheckInitQuintic+0x6c>)
  40171c:	6879      	ldr	r1, [r7, #4]
  40171e:	4b09      	ldr	r3, [pc, #36]	; (401744 <CheckInitQuintic+0x70>)
  401720:	4798      	blx	r3
	}
}
  401722:	370c      	adds	r7, #12
  401724:	46bd      	mov	sp, r7
  401726:	bd90      	pop	{r4, r7, pc}
  401728:	200021ac 	.word	0x200021ac
  40172c:	200002e0 	.word	0x200002e0
  401730:	200014c0 	.word	0x200014c0
  401734:	0040c9e1 	.word	0x0040c9e1
  401738:	004184ec 	.word	0x004184ec
  40173c:	00408631 	.word	0x00408631
  401740:	004184f0 	.word	0x004184f0
  401744:	0040eadd 	.word	0x0040eadd

00401748 <PreSleepProcess>:
 * @brief This does the necessary processing before putting the processor to sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PreSleepProcess()
{
  401748:	b580      	push	{r7, lr}
  40174a:	af00      	add	r7, sp, #0
	//supc_disable_brownout_detector(SUPC);	
	//unmount the SD card. 
	static FRESULT res;
	res = f_mount(LUN_ID_SD_MMC_0_MEM, NULL);
  40174c:	2000      	movs	r0, #0
  40174e:	2100      	movs	r1, #0
  401750:	4b10      	ldr	r3, [pc, #64]	; (401794 <PreSleepProcess+0x4c>)
  401752:	4798      	blx	r3
  401754:	4603      	mov	r3, r0
  401756:	461a      	mov	r2, r3
  401758:	4b0f      	ldr	r3, [pc, #60]	; (401798 <PreSleepProcess+0x50>)
  40175a:	701a      	strb	r2, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;	//disable the systick timer
  40175c:	4b0f      	ldr	r3, [pc, #60]	; (40179c <PreSleepProcess+0x54>)
  40175e:	2205      	movs	r2, #5
  401760:	601a      	str	r2, [r3, #0]
	drv_uart_deInit(quinticConfig[0].uartDevice);
  401762:	4b0f      	ldr	r3, [pc, #60]	; (4017a0 <PreSleepProcess+0x58>)
  401764:	695b      	ldr	r3, [r3, #20]
  401766:	4618      	mov	r0, r3
  401768:	4b0e      	ldr	r3, [pc, #56]	; (4017a4 <PreSleepProcess+0x5c>)
  40176a:	4798      	blx	r3
	drv_uart_deInit(quinticConfig[1].uartDevice);
  40176c:	4b0c      	ldr	r3, [pc, #48]	; (4017a0 <PreSleepProcess+0x58>)
  40176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401770:	4618      	mov	r0, r3
  401772:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <PreSleepProcess+0x5c>)
  401774:	4798      	blx	r3
	drv_uart_deInit(quinticConfig[2].uartDevice);
  401776:	4b0a      	ldr	r3, [pc, #40]	; (4017a0 <PreSleepProcess+0x58>)
  401778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40177a:	4618      	mov	r0, r3
  40177c:	4b09      	ldr	r3, [pc, #36]	; (4017a4 <PreSleepProcess+0x5c>)
  40177e:	4798      	blx	r3
	drv_uart_deInit(&uart0Config);
  401780:	4809      	ldr	r0, [pc, #36]	; (4017a8 <PreSleepProcess+0x60>)
  401782:	4b08      	ldr	r3, [pc, #32]	; (4017a4 <PreSleepProcess+0x5c>)
  401784:	4798      	blx	r3
	drv_gpio_disable_interrupt_all();
  401786:	4b09      	ldr	r3, [pc, #36]	; (4017ac <PreSleepProcess+0x64>)
  401788:	4798      	blx	r3
	drv_gpio_enable_interrupt(DRV_GPIO_PIN_PW_SW);
  40178a:	2000      	movs	r0, #0
  40178c:	4b08      	ldr	r3, [pc, #32]	; (4017b0 <PreSleepProcess+0x68>)
  40178e:	4798      	blx	r3
	
	
}
  401790:	bd80      	pop	{r7, pc}
  401792:	bf00      	nop
  401794:	00406a7d 	.word	0x00406a7d
  401798:	200014c9 	.word	0x200014c9
  40179c:	e000e010 	.word	0xe000e010
  4017a0:	200002e0 	.word	0x200002e0
  4017a4:	0040b6d5 	.word	0x0040b6d5
  4017a8:	2000004c 	.word	0x2000004c
  4017ac:	0040ac09 	.word	0x0040ac09
  4017b0:	0040abb5 	.word	0x0040abb5

004017b4 <PostSleepProcess>:
 * @brief This does the necessary processing required after waking up the processor from sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PostSleepProcess()
{
  4017b4:	b580      	push	{r7, lr}
  4017b6:	af00      	add	r7, sp, #0
	drv_gpio_clear_Int(DRV_GPIO_PIN_PW_SW);	//Clear the interrupt generated by power switch flag
  4017b8:	2000      	movs	r0, #0
  4017ba:	4b0e      	ldr	r3, [pc, #56]	; (4017f4 <PostSleepProcess+0x40>)
  4017bc:	4798      	blx	r3
	drv_gpio_initializeAll();
  4017be:	4b0e      	ldr	r3, [pc, #56]	; (4017f8 <PostSleepProcess+0x44>)
  4017c0:	4798      	blx	r3
	drv_uart_init(quinticConfig[0].uartDevice);
  4017c2:	4b0e      	ldr	r3, [pc, #56]	; (4017fc <PostSleepProcess+0x48>)
  4017c4:	695b      	ldr	r3, [r3, #20]
  4017c6:	4618      	mov	r0, r3
  4017c8:	4b0d      	ldr	r3, [pc, #52]	; (401800 <PostSleepProcess+0x4c>)
  4017ca:	4798      	blx	r3
	drv_uart_init(quinticConfig[1].uartDevice);
  4017cc:	4b0b      	ldr	r3, [pc, #44]	; (4017fc <PostSleepProcess+0x48>)
  4017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4017d0:	4618      	mov	r0, r3
  4017d2:	4b0b      	ldr	r3, [pc, #44]	; (401800 <PostSleepProcess+0x4c>)
  4017d4:	4798      	blx	r3
	drv_uart_init(quinticConfig[2].uartDevice);
  4017d6:	4b09      	ldr	r3, [pc, #36]	; (4017fc <PostSleepProcess+0x48>)
  4017d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4017da:	4618      	mov	r0, r3
  4017dc:	4b08      	ldr	r3, [pc, #32]	; (401800 <PostSleepProcess+0x4c>)
  4017de:	4798      	blx	r3
	drv_uart_init(&uart0Config);
  4017e0:	4808      	ldr	r0, [pc, #32]	; (401804 <PostSleepProcess+0x50>)
  4017e2:	4b07      	ldr	r3, [pc, #28]	; (401800 <PostSleepProcess+0x4c>)
  4017e4:	4798      	blx	r3
	printf("Exit Sleep mode\r\n");
  4017e6:	4808      	ldr	r0, [pc, #32]	; (401808 <PostSleepProcess+0x54>)
  4017e8:	4b08      	ldr	r3, [pc, #32]	; (40180c <PostSleepProcess+0x58>)
  4017ea:	4798      	blx	r3
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	//enable the systick timer
  4017ec:	4b08      	ldr	r3, [pc, #32]	; (401810 <PostSleepProcess+0x5c>)
  4017ee:	2207      	movs	r2, #7
  4017f0:	601a      	str	r2, [r3, #0]
}
  4017f2:	bd80      	pop	{r7, pc}
  4017f4:	0040ab7d 	.word	0x0040ab7d
  4017f8:	0040a799 	.word	0x0040a799
  4017fc:	200002e0 	.word	0x200002e0
  401800:	0040b1dd 	.word	0x0040b1dd
  401804:	2000004c 	.word	0x2000004c
  401808:	00418514 	.word	0x00418514
  40180c:	0040eadd 	.word	0x0040eadd
  401810:	e000e010 	.word	0xe000e010

00401814 <reloadConfigSettings>:
 * @brief Reload the config settings from SD card 
 * @param void
 * @return void
 ***********************************************************************************************/
status_t reloadConfigSettings()
{
  401814:	b590      	push	{r4, r7, lr}
  401816:	b085      	sub	sp, #20
  401818:	af02      	add	r7, sp, #8
	static FATFS fs;
	static FRESULT res;
	status_t result = STATUS_FAIL;
  40181a:	2301      	movs	r3, #1
  40181c:	71fb      	strb	r3, [r7, #7]
	Ctrl_status status; 
	//make non-blocking remount of sd-card
	drv_gpio_pin_state_t sdCdPinState;
	//sd_mmc_init();
	drv_gpio_getPinState(DRV_GPIO_PIN_SD_CD, &sdCdPinState);
  40181e:	1d7b      	adds	r3, r7, #5
  401820:	2010      	movs	r0, #16
  401822:	4619      	mov	r1, r3
  401824:	4b4f      	ldr	r3, [pc, #316]	; (401964 <reloadConfigSettings+0x150>)
  401826:	4798      	blx	r3
	if (sdCdPinState != SD_MMC_0_CD_DETECT_VALUE)
  401828:	797b      	ldrb	r3, [r7, #5]
  40182a:	2b01      	cmp	r3, #1
  40182c:	d004      	beq.n	401838 <reloadConfigSettings+0x24>
	{
		sdInsertWaitTimeoutFlag = FALSE;	//clear the flag for resuse
  40182e:	4b4e      	ldr	r3, [pc, #312]	; (401968 <reloadConfigSettings+0x154>)
  401830:	2200      	movs	r2, #0
  401832:	701a      	strb	r2, [r3, #0]
		return result;
  401834:	79fb      	ldrb	r3, [r7, #7]
  401836:	e090      	b.n	40195a <reloadConfigSettings+0x146>
	}
	sdTimeOutTimer = xTimerCreate("SD insert Time Out Timer", (SD_INSERT_WAIT_TIMEOUT/portTICK_RATE_MS), pdFALSE, NULL, vSdTimeOutTimerCallback);
  401838:	4b4c      	ldr	r3, [pc, #304]	; (40196c <reloadConfigSettings+0x158>)
  40183a:	9300      	str	r3, [sp, #0]
  40183c:	484c      	ldr	r0, [pc, #304]	; (401970 <reloadConfigSettings+0x15c>)
  40183e:	f44f 7196 	mov.w	r1, #300	; 0x12c
  401842:	2200      	movs	r2, #0
  401844:	2300      	movs	r3, #0
  401846:	4c4b      	ldr	r4, [pc, #300]	; (401974 <reloadConfigSettings+0x160>)
  401848:	47a0      	blx	r4
  40184a:	4602      	mov	r2, r0
  40184c:	4b4a      	ldr	r3, [pc, #296]	; (401978 <reloadConfigSettings+0x164>)
  40184e:	601a      	str	r2, [r3, #0]
	if (sdTimeOutTimer == NULL)
  401850:	4b49      	ldr	r3, [pc, #292]	; (401978 <reloadConfigSettings+0x164>)
  401852:	681b      	ldr	r3, [r3, #0]
  401854:	2b00      	cmp	r3, #0
  401856:	d105      	bne.n	401864 <reloadConfigSettings+0x50>
	{
		printf("Failed to create timer task code %d\r\n", sdTimeOutTimer);
  401858:	4b47      	ldr	r3, [pc, #284]	; (401978 <reloadConfigSettings+0x164>)
  40185a:	681b      	ldr	r3, [r3, #0]
  40185c:	4847      	ldr	r0, [pc, #284]	; (40197c <reloadConfigSettings+0x168>)
  40185e:	4619      	mov	r1, r3
  401860:	4b47      	ldr	r3, [pc, #284]	; (401980 <reloadConfigSettings+0x16c>)
  401862:	4798      	blx	r3
	}
	xTimerStart(sdTimeOutTimer, 0);
  401864:	4b44      	ldr	r3, [pc, #272]	; (401978 <reloadConfigSettings+0x164>)
  401866:	681c      	ldr	r4, [r3, #0]
  401868:	4b46      	ldr	r3, [pc, #280]	; (401984 <reloadConfigSettings+0x170>)
  40186a:	4798      	blx	r3
  40186c:	4603      	mov	r3, r0
  40186e:	2200      	movs	r2, #0
  401870:	9200      	str	r2, [sp, #0]
  401872:	4620      	mov	r0, r4
  401874:	2100      	movs	r1, #0
  401876:	461a      	mov	r2, r3
  401878:	2300      	movs	r3, #0
  40187a:	4c43      	ldr	r4, [pc, #268]	; (401988 <reloadConfigSettings+0x174>)
  40187c:	47a0      	blx	r4
	do
	{
		status = sd_mmc_test_unit_ready(0);
  40187e:	2000      	movs	r0, #0
  401880:	4b42      	ldr	r3, [pc, #264]	; (40198c <reloadConfigSettings+0x178>)
  401882:	4798      	blx	r3
  401884:	4603      	mov	r3, r0
  401886:	71bb      	strb	r3, [r7, #6]
		if (CTRL_FAIL == status)
  401888:	79bb      	ldrb	r3, [r7, #6]
  40188a:	2b01      	cmp	r3, #1
  40188c:	d115      	bne.n	4018ba <reloadConfigSettings+0xa6>
		{
			printf("Card install FAIL\n\r");
  40188e:	4840      	ldr	r0, [pc, #256]	; (401990 <reloadConfigSettings+0x17c>)
  401890:	4b3b      	ldr	r3, [pc, #236]	; (401980 <reloadConfigSettings+0x16c>)
  401892:	4798      	blx	r3
			printf("Please unplug and re-plug the card.\n\r");
  401894:	483f      	ldr	r0, [pc, #252]	; (401994 <reloadConfigSettings+0x180>)
  401896:	4b3a      	ldr	r3, [pc, #232]	; (401980 <reloadConfigSettings+0x16c>)
  401898:	4798      	blx	r3
			while ((CTRL_NO_PRESENT != sd_mmc_check(0)) | (sdInsertWaitTimeoutFlag == TRUE))
  40189a:	bf00      	nop
  40189c:	2000      	movs	r0, #0
  40189e:	4b3e      	ldr	r3, [pc, #248]	; (401998 <reloadConfigSettings+0x184>)
  4018a0:	4798      	blx	r3
  4018a2:	4603      	mov	r3, r0
  4018a4:	2b02      	cmp	r3, #2
  4018a6:	bf0c      	ite	eq
  4018a8:	2300      	moveq	r3, #0
  4018aa:	2301      	movne	r3, #1
  4018ac:	b2db      	uxtb	r3, r3
  4018ae:	461a      	mov	r2, r3
  4018b0:	4b2d      	ldr	r3, [pc, #180]	; (401968 <reloadConfigSettings+0x154>)
  4018b2:	781b      	ldrb	r3, [r3, #0]
  4018b4:	4313      	orrs	r3, r2
  4018b6:	2b00      	cmp	r3, #0
  4018b8:	d1f0      	bne.n	40189c <reloadConfigSettings+0x88>
			{
			}
		}
	} while ((CTRL_GOOD != status) | (sdInsertWaitTimeoutFlag == TRUE));
  4018ba:	79bb      	ldrb	r3, [r7, #6]
  4018bc:	2b00      	cmp	r3, #0
  4018be:	bf0c      	ite	eq
  4018c0:	2300      	moveq	r3, #0
  4018c2:	2301      	movne	r3, #1
  4018c4:	b2db      	uxtb	r3, r3
  4018c6:	461a      	mov	r2, r3
  4018c8:	4b27      	ldr	r3, [pc, #156]	; (401968 <reloadConfigSettings+0x154>)
  4018ca:	781b      	ldrb	r3, [r3, #0]
  4018cc:	4313      	orrs	r3, r2
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d1d5      	bne.n	40187e <reloadConfigSettings+0x6a>
	
	sdInsertWaitTimeoutFlag = FALSE;	//clear the flag for resuse
  4018d2:	4b25      	ldr	r3, [pc, #148]	; (401968 <reloadConfigSettings+0x154>)
  4018d4:	2200      	movs	r2, #0
  4018d6:	701a      	strb	r2, [r3, #0]
	xTimerStop(sdTimeOutTimer, 0);
  4018d8:	4b27      	ldr	r3, [pc, #156]	; (401978 <reloadConfigSettings+0x164>)
  4018da:	681b      	ldr	r3, [r3, #0]
  4018dc:	2200      	movs	r2, #0
  4018de:	9200      	str	r2, [sp, #0]
  4018e0:	4618      	mov	r0, r3
  4018e2:	2101      	movs	r1, #1
  4018e4:	2200      	movs	r2, #0
  4018e6:	2300      	movs	r3, #0
  4018e8:	4c27      	ldr	r4, [pc, #156]	; (401988 <reloadConfigSettings+0x174>)
  4018ea:	47a0      	blx	r4
	xTimerDelete(sdTimeOutTimer, 0);
  4018ec:	4b22      	ldr	r3, [pc, #136]	; (401978 <reloadConfigSettings+0x164>)
  4018ee:	681b      	ldr	r3, [r3, #0]
  4018f0:	2200      	movs	r2, #0
  4018f2:	9200      	str	r2, [sp, #0]
  4018f4:	4618      	mov	r0, r3
  4018f6:	2103      	movs	r1, #3
  4018f8:	2200      	movs	r2, #0
  4018fa:	2300      	movs	r3, #0
  4018fc:	4c22      	ldr	r4, [pc, #136]	; (401988 <reloadConfigSettings+0x174>)
  4018fe:	47a0      	blx	r4
	
	/*	Mount the SD card	*/
	if(status == CTRL_GOOD)
  401900:	79bb      	ldrb	r3, [r7, #6]
  401902:	2b00      	cmp	r3, #0
  401904:	d128      	bne.n	401958 <reloadConfigSettings+0x144>
	{
		memset(&fs, 0, sizeof(FATFS));
  401906:	4825      	ldr	r0, [pc, #148]	; (40199c <reloadConfigSettings+0x188>)
  401908:	2100      	movs	r1, #0
  40190a:	f44f 720c 	mov.w	r2, #560	; 0x230
  40190e:	4b24      	ldr	r3, [pc, #144]	; (4019a0 <reloadConfigSettings+0x18c>)
  401910:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  401912:	2000      	movs	r0, #0
  401914:	4921      	ldr	r1, [pc, #132]	; (40199c <reloadConfigSettings+0x188>)
  401916:	4b23      	ldr	r3, [pc, #140]	; (4019a4 <reloadConfigSettings+0x190>)
  401918:	4798      	blx	r3
  40191a:	4603      	mov	r3, r0
  40191c:	461a      	mov	r2, r3
  40191e:	4b22      	ldr	r3, [pc, #136]	; (4019a8 <reloadConfigSettings+0x194>)
  401920:	701a      	strb	r2, [r3, #0]
		if (res == FR_INVALID_DRIVE)
  401922:	4b21      	ldr	r3, [pc, #132]	; (4019a8 <reloadConfigSettings+0x194>)
  401924:	781b      	ldrb	r3, [r3, #0]
  401926:	2b0b      	cmp	r3, #11
  401928:	d104      	bne.n	401934 <reloadConfigSettings+0x120>
		{
			printf("Error: Invalid Drive\r\n");
  40192a:	4820      	ldr	r0, [pc, #128]	; (4019ac <reloadConfigSettings+0x198>)
  40192c:	4b14      	ldr	r3, [pc, #80]	; (401980 <reloadConfigSettings+0x16c>)
  40192e:	4798      	blx	r3
			return result;
  401930:	79fb      	ldrb	r3, [r7, #7]
  401932:	e012      	b.n	40195a <reloadConfigSettings+0x146>
		}
		//prevent system to go in reset state on button press event after a failed config load
		result = STATUS_PASS;
  401934:	2300      	movs	r3, #0
  401936:	71fb      	strb	r3, [r7, #7]
		if(loadSettings(SETTINGS_FILENAME) != STATUS_PASS)
  401938:	481d      	ldr	r0, [pc, #116]	; (4019b0 <reloadConfigSettings+0x19c>)
  40193a:	4b1e      	ldr	r3, [pc, #120]	; (4019b4 <reloadConfigSettings+0x1a0>)
  40193c:	4798      	blx	r3
  40193e:	4603      	mov	r3, r0
  401940:	2b00      	cmp	r3, #0
  401942:	d006      	beq.n	401952 <reloadConfigSettings+0x13e>
		{
			result = STATUS_FAIL;
  401944:	2301      	movs	r3, #1
  401946:	71fb      	strb	r3, [r7, #7]
			printf("failed to get read settings\r\n");
  401948:	481b      	ldr	r0, [pc, #108]	; (4019b8 <reloadConfigSettings+0x1a4>)
  40194a:	4b0d      	ldr	r3, [pc, #52]	; (401980 <reloadConfigSettings+0x16c>)
  40194c:	4798      	blx	r3
			return result;
  40194e:	79fb      	ldrb	r3, [r7, #7]
  401950:	e003      	b.n	40195a <reloadConfigSettings+0x146>
		}
		brainSettings.isLoaded = 1;
  401952:	4b1a      	ldr	r3, [pc, #104]	; (4019bc <reloadConfigSettings+0x1a8>)
  401954:	2201      	movs	r2, #1
  401956:	601a      	str	r2, [r3, #0]
	}
	return result;
  401958:	79fb      	ldrb	r3, [r7, #7]
  40195a:	4618      	mov	r0, r3
  40195c:	370c      	adds	r7, #12
  40195e:	46bd      	mov	sp, r7
  401960:	bd90      	pop	{r4, r7, pc}
  401962:	bf00      	nop
  401964:	0040aa3d 	.word	0x0040aa3d
  401968:	200014c8 	.word	0x200014c8
  40196c:	00400f39 	.word	0x00400f39
  401970:	00418528 	.word	0x00418528
  401974:	00409589 	.word	0x00409589
  401978:	200021b4 	.word	0x200021b4
  40197c:	0041846c 	.word	0x0041846c
  401980:	0040eadd 	.word	0x0040eadd
  401984:	00408a55 	.word	0x00408a55
  401988:	004095f5 	.word	0x004095f5
  40198c:	00402ff9 	.word	0x00402ff9
  401990:	00418544 	.word	0x00418544
  401994:	00418558 	.word	0x00418558
  401998:	00402b89 	.word	0x00402b89
  40199c:	200014cc 	.word	0x200014cc
  4019a0:	0040f191 	.word	0x0040f191
  4019a4:	00406a7d 	.word	0x00406a7d
  4019a8:	200016fc 	.word	0x200016fc
  4019ac:	00418580 	.word	0x00418580
  4019b0:	00418598 	.word	0x00418598
  4019b4:	0040a021 	.word	0x0040a021
  4019b8:	004185a8 	.word	0x004185a8
  4019bc:	20001b30 	.word	0x20001b30

004019c0 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  4019c0:	b480      	push	{r7}
  4019c2:	b087      	sub	sp, #28
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	60f8      	str	r0, [r7, #12]
  4019c8:	8179      	strh	r1, [r7, #10]
  4019ca:	813a      	strh	r2, [r7, #8]
  4019cc:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4019ce:	897a      	ldrh	r2, [r7, #10]
  4019d0:	893b      	ldrh	r3, [r7, #8]
  4019d2:	1ad3      	subs	r3, r2, r3
  4019d4:	3307      	adds	r3, #7
  4019d6:	2b00      	cmp	r3, #0
  4019d8:	da00      	bge.n	4019dc <SDMMC_UNSTUFF_BITS+0x1c>
  4019da:	3307      	adds	r3, #7
  4019dc:	10db      	asrs	r3, r3, #3
  4019de:	3b01      	subs	r3, #1
  4019e0:	68fa      	ldr	r2, [r7, #12]
  4019e2:	4413      	add	r3, r2
  4019e4:	781b      	ldrb	r3, [r3, #0]
  4019e6:	461a      	mov	r2, r3
  4019e8:	893b      	ldrh	r3, [r7, #8]
  4019ea:	f003 0307 	and.w	r3, r3, #7
  4019ee:	fa42 f303 	asr.w	r3, r2, r3
  4019f2:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  4019f4:	893b      	ldrh	r3, [r7, #8]
  4019f6:	f003 0207 	and.w	r2, r3, #7
  4019fa:	79fb      	ldrb	r3, [r7, #7]
  4019fc:	4413      	add	r3, r2
  4019fe:	2b08      	cmp	r3, #8
  401a00:	dd16      	ble.n	401a30 <SDMMC_UNSTUFF_BITS+0x70>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  401a02:	897a      	ldrh	r2, [r7, #10]
  401a04:	893b      	ldrh	r3, [r7, #8]
  401a06:	1ad3      	subs	r3, r2, r3
  401a08:	3307      	adds	r3, #7
  401a0a:	2b00      	cmp	r3, #0
  401a0c:	da00      	bge.n	401a10 <SDMMC_UNSTUFF_BITS+0x50>
  401a0e:	3307      	adds	r3, #7
  401a10:	10db      	asrs	r3, r3, #3
  401a12:	3b02      	subs	r3, #2
  401a14:	68fa      	ldr	r2, [r7, #12]
  401a16:	4413      	add	r3, r2
  401a18:	781b      	ldrb	r3, [r3, #0]
  401a1a:	461a      	mov	r2, r3
  401a1c:	893b      	ldrh	r3, [r7, #8]
  401a1e:	f003 0307 	and.w	r3, r3, #7
  401a22:	f1c3 0308 	rsb	r3, r3, #8
  401a26:	fa02 f303 	lsl.w	r3, r2, r3
  401a2a:	697a      	ldr	r2, [r7, #20]
  401a2c:	4313      	orrs	r3, r2
  401a2e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  401a30:	893b      	ldrh	r3, [r7, #8]
  401a32:	f003 0207 	and.w	r2, r3, #7
  401a36:	79fb      	ldrb	r3, [r7, #7]
  401a38:	4413      	add	r3, r2
  401a3a:	2b10      	cmp	r3, #16
  401a3c:	dd16      	ble.n	401a6c <SDMMC_UNSTUFF_BITS+0xac>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401a3e:	897a      	ldrh	r2, [r7, #10]
  401a40:	893b      	ldrh	r3, [r7, #8]
  401a42:	1ad3      	subs	r3, r2, r3
  401a44:	3307      	adds	r3, #7
  401a46:	2b00      	cmp	r3, #0
  401a48:	da00      	bge.n	401a4c <SDMMC_UNSTUFF_BITS+0x8c>
  401a4a:	3307      	adds	r3, #7
  401a4c:	10db      	asrs	r3, r3, #3
  401a4e:	3b03      	subs	r3, #3
  401a50:	68fa      	ldr	r2, [r7, #12]
  401a52:	4413      	add	r3, r2
  401a54:	781b      	ldrb	r3, [r3, #0]
  401a56:	461a      	mov	r2, r3
  401a58:	893b      	ldrh	r3, [r7, #8]
  401a5a:	f003 0307 	and.w	r3, r3, #7
  401a5e:	f1c3 0310 	rsb	r3, r3, #16
  401a62:	fa02 f303 	lsl.w	r3, r2, r3
  401a66:	697a      	ldr	r2, [r7, #20]
  401a68:	4313      	orrs	r3, r2
  401a6a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  401a6c:	893b      	ldrh	r3, [r7, #8]
  401a6e:	f003 0207 	and.w	r2, r3, #7
  401a72:	79fb      	ldrb	r3, [r7, #7]
  401a74:	4413      	add	r3, r2
  401a76:	2b10      	cmp	r3, #16
  401a78:	dd16      	ble.n	401aa8 <SDMMC_UNSTUFF_BITS+0xe8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  401a7a:	897a      	ldrh	r2, [r7, #10]
  401a7c:	893b      	ldrh	r3, [r7, #8]
  401a7e:	1ad3      	subs	r3, r2, r3
  401a80:	3307      	adds	r3, #7
  401a82:	2b00      	cmp	r3, #0
  401a84:	da00      	bge.n	401a88 <SDMMC_UNSTUFF_BITS+0xc8>
  401a86:	3307      	adds	r3, #7
  401a88:	10db      	asrs	r3, r3, #3
  401a8a:	3b03      	subs	r3, #3
  401a8c:	68fa      	ldr	r2, [r7, #12]
  401a8e:	4413      	add	r3, r2
  401a90:	781b      	ldrb	r3, [r3, #0]
  401a92:	461a      	mov	r2, r3
  401a94:	893b      	ldrh	r3, [r7, #8]
  401a96:	f003 0307 	and.w	r3, r3, #7
  401a9a:	f1c3 0310 	rsb	r3, r3, #16
  401a9e:	fa02 f303 	lsl.w	r3, r2, r3
  401aa2:	697a      	ldr	r2, [r7, #20]
  401aa4:	4313      	orrs	r3, r2
  401aa6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  401aa8:	79fb      	ldrb	r3, [r7, #7]
  401aaa:	2201      	movs	r2, #1
  401aac:	fa02 f303 	lsl.w	r3, r2, r3
  401ab0:	3b01      	subs	r3, #1
  401ab2:	697a      	ldr	r2, [r7, #20]
  401ab4:	4013      	ands	r3, r2
  401ab6:	617b      	str	r3, [r7, #20]
	return value;
  401ab8:	697b      	ldr	r3, [r7, #20]
}
  401aba:	4618      	mov	r0, r3
  401abc:	371c      	adds	r7, #28
  401abe:	46bd      	mov	sp, r7
  401ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop

00401ac8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401ac8:	b480      	push	{r7}
  401aca:	b083      	sub	sp, #12
  401acc:	af00      	add	r7, sp, #0
  401ace:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ad0:	687b      	ldr	r3, [r7, #4]
  401ad2:	2b07      	cmp	r3, #7
  401ad4:	d825      	bhi.n	401b22 <osc_get_rate+0x5a>
  401ad6:	a201      	add	r2, pc, #4	; (adr r2, 401adc <osc_get_rate+0x14>)
  401ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401adc:	00401afd 	.word	0x00401afd
  401ae0:	00401b03 	.word	0x00401b03
  401ae4:	00401b09 	.word	0x00401b09
  401ae8:	00401b0f 	.word	0x00401b0f
  401aec:	00401b13 	.word	0x00401b13
  401af0:	00401b17 	.word	0x00401b17
  401af4:	00401b1b 	.word	0x00401b1b
  401af8:	00401b1f 	.word	0x00401b1f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401afc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b00:	e010      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b06:	e00d      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b0c:	e00a      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401b0e:	4b08      	ldr	r3, [pc, #32]	; (401b30 <osc_get_rate+0x68>)
  401b10:	e008      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401b12:	4b08      	ldr	r3, [pc, #32]	; (401b34 <osc_get_rate+0x6c>)
  401b14:	e006      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401b16:	4b08      	ldr	r3, [pc, #32]	; (401b38 <osc_get_rate+0x70>)
  401b18:	e004      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401b1a:	4b08      	ldr	r3, [pc, #32]	; (401b3c <osc_get_rate+0x74>)
  401b1c:	e002      	b.n	401b24 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401b1e:	4b07      	ldr	r3, [pc, #28]	; (401b3c <osc_get_rate+0x74>)
  401b20:	e000      	b.n	401b24 <osc_get_rate+0x5c>
	}

	return 0;
  401b22:	2300      	movs	r3, #0
}
  401b24:	4618      	mov	r0, r3
  401b26:	370c      	adds	r7, #12
  401b28:	46bd      	mov	sp, r7
  401b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b2e:	4770      	bx	lr
  401b30:	003d0900 	.word	0x003d0900
  401b34:	007a1200 	.word	0x007a1200
  401b38:	00b71b00 	.word	0x00b71b00
  401b3c:	00f42400 	.word	0x00f42400

00401b40 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401b40:	b580      	push	{r7, lr}
  401b42:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401b44:	2006      	movs	r0, #6
  401b46:	4b04      	ldr	r3, [pc, #16]	; (401b58 <sysclk_get_main_hz+0x18>)
  401b48:	4798      	blx	r3
  401b4a:	4602      	mov	r2, r0
  401b4c:	4613      	mov	r3, r2
  401b4e:	011b      	lsls	r3, r3, #4
  401b50:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401b52:	4618      	mov	r0, r3
  401b54:	bd80      	pop	{r7, pc}
  401b56:	bf00      	nop
  401b58:	00401ac9 	.word	0x00401ac9

00401b5c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401b5c:	b580      	push	{r7, lr}
  401b5e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401b60:	4b02      	ldr	r3, [pc, #8]	; (401b6c <sysclk_get_cpu_hz+0x10>)
  401b62:	4798      	blx	r3
  401b64:	4603      	mov	r3, r0
  401b66:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401b68:	4618      	mov	r0, r3
  401b6a:	bd80      	pop	{r7, pc}
  401b6c:	00401b41 	.word	0x00401b41

00401b70 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  401b70:	b480      	push	{r7}
  401b72:	b089      	sub	sp, #36	; 0x24
  401b74:	af00      	add	r7, sp, #0
  401b76:	6078      	str	r0, [r7, #4]
  401b78:	687b      	ldr	r3, [r7, #4]
  401b7a:	61fb      	str	r3, [r7, #28]
  401b7c:	69fb      	ldr	r3, [r7, #28]
  401b7e:	61bb      	str	r3, [r7, #24]
  401b80:	69bb      	ldr	r3, [r7, #24]
  401b82:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401b84:	697b      	ldr	r3, [r7, #20]
  401b86:	095b      	lsrs	r3, r3, #5
  401b88:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b8a:	693b      	ldr	r3, [r7, #16]
  401b8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b90:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b94:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401b98:	69fb      	ldr	r3, [r7, #28]
  401b9a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401b9c:	68fb      	ldr	r3, [r7, #12]
  401b9e:	f003 031f 	and.w	r3, r3, #31
  401ba2:	2101      	movs	r1, #1
  401ba4:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401ba8:	4013      	ands	r3, r2
  401baa:	2b00      	cmp	r3, #0
  401bac:	bf0c      	ite	eq
  401bae:	2300      	moveq	r3, #0
  401bb0:	2301      	movne	r3, #1
  401bb2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  401bb4:	4618      	mov	r0, r3
  401bb6:	3724      	adds	r7, #36	; 0x24
  401bb8:	46bd      	mov	sp, r7
  401bba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bbe:	4770      	bx	lr

00401bc0 <SD_MMC_START_TIMEOUT>:
#  ifdef FREERTOS_USED
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
  401bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  401bc4:	af00      	add	r7, sp, #0
	if (!SysTick->CTRL) {
  401bc6:	4b2b      	ldr	r3, [pc, #172]	; (401c74 <SD_MMC_START_TIMEOUT+0xb4>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	2b00      	cmp	r3, #0
  401bcc:	d113      	bne.n	401bf6 <SD_MMC_START_TIMEOUT+0x36>
		sd_mmc_sam_systick_used = true;
  401bce:	4b2a      	ldr	r3, [pc, #168]	; (401c78 <SD_MMC_START_TIMEOUT+0xb8>)
  401bd0:	2201      	movs	r2, #1
  401bd2:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  401bd4:	4c27      	ldr	r4, [pc, #156]	; (401c74 <SD_MMC_START_TIMEOUT+0xb4>)
  401bd6:	4b29      	ldr	r3, [pc, #164]	; (401c7c <SD_MMC_START_TIMEOUT+0xbc>)
  401bd8:	4798      	blx	r3
  401bda:	4602      	mov	r2, r0
  401bdc:	4b28      	ldr	r3, [pc, #160]	; (401c80 <SD_MMC_START_TIMEOUT+0xc0>)
  401bde:	fba3 1302 	umull	r1, r3, r3, r2
  401be2:	0a5b      	lsrs	r3, r3, #9
				* SD_MMC_DEBOUNCE_TIMEOUT;
  401be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401be8:	fb02 f303 	mul.w	r3, r2, r3

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  401bec:	6063      	str	r3, [r4, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  401bee:	4b21      	ldr	r3, [pc, #132]	; (401c74 <SD_MMC_START_TIMEOUT+0xb4>)
  401bf0:	2201      	movs	r2, #1
  401bf2:	601a      	str	r2, [r3, #0]
  401bf4:	e03b      	b.n	401c6e <SD_MMC_START_TIMEOUT+0xae>
	} else {
		sd_mmc_sam_systick_used = false;
  401bf6:	4b20      	ldr	r3, [pc, #128]	; (401c78 <SD_MMC_START_TIMEOUT+0xb8>)
  401bf8:	2200      	movs	r2, #0
  401bfa:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  401bfc:	4b1f      	ldr	r3, [pc, #124]	; (401c7c <SD_MMC_START_TIMEOUT+0xbc>)
  401bfe:	4798      	blx	r3
  401c00:	4603      	mov	r3, r0
  401c02:	4618      	mov	r0, r3
  401c04:	f04f 0100 	mov.w	r1, #0
  401c08:	4602      	mov	r2, r0
  401c0a:	460b      	mov	r3, r1
  401c0c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  401c10:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  401c14:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  401c18:	4652      	mov	r2, sl
  401c1a:	465b      	mov	r3, fp
  401c1c:	015d      	lsls	r5, r3, #5
  401c1e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  401c22:	0154      	lsls	r4, r2, #5
  401c24:	1aa4      	subs	r4, r4, r2
  401c26:	eb65 0503 	sbc.w	r5, r5, r3
  401c2a:	1824      	adds	r4, r4, r0
  401c2c:	eb45 0501 	adc.w	r5, r5, r1
  401c30:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  401c34:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  401c38:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  401c3c:	4644      	mov	r4, r8
  401c3e:	464d      	mov	r5, r9
  401c40:	4620      	mov	r0, r4
  401c42:	4629      	mov	r1, r5
  401c44:	f243 62af 	movw	r2, #13999	; 0x36af
  401c48:	f04f 0300 	mov.w	r3, #0
  401c4c:	1812      	adds	r2, r2, r0
  401c4e:	eb43 0301 	adc.w	r3, r3, r1
  401c52:	4c0c      	ldr	r4, [pc, #48]	; (401c84 <SD_MMC_START_TIMEOUT+0xc4>)
  401c54:	4610      	mov	r0, r2
  401c56:	4619      	mov	r1, r3
  401c58:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401c5c:	f04f 0300 	mov.w	r3, #0
  401c60:	47a0      	blx	r4
  401c62:	4602      	mov	r2, r0
  401c64:	460b      	mov	r3, r1
  401c66:	4613      	mov	r3, r2
  401c68:	4618      	mov	r0, r3
  401c6a:	4b07      	ldr	r3, [pc, #28]	; (401c88 <SD_MMC_START_TIMEOUT+0xc8>)
  401c6c:	4798      	blx	r3
#endif
	}
}
  401c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  401c72:	bf00      	nop
  401c74:	e000e010 	.word	0xe000e010
  401c78:	20001708 	.word	0x20001708
  401c7c:	00401b5d 	.word	0x00401b5d
  401c80:	10624dd3 	.word	0x10624dd3
  401c84:	0040e4e1 	.word	0x0040e4e1
  401c88:	20000001 	.word	0x20000001

00401c8c <SD_MMC_IS_TIMEOUT>:

static inline bool SD_MMC_IS_TIMEOUT(void)
{
  401c8c:	b480      	push	{r7}
  401c8e:	af00      	add	r7, sp, #0
	if (!sd_mmc_sam_systick_used) {
  401c90:	4b0c      	ldr	r3, [pc, #48]	; (401cc4 <SD_MMC_IS_TIMEOUT+0x38>)
  401c92:	781b      	ldrb	r3, [r3, #0]
  401c94:	f083 0301 	eor.w	r3, r3, #1
  401c98:	b2db      	uxtb	r3, r3
  401c9a:	2b00      	cmp	r3, #0
  401c9c:	d001      	beq.n	401ca2 <SD_MMC_IS_TIMEOUT+0x16>
#ifdef FREERTOS_USED
		portTickType xTicksToWait =
				SD_MMC_DEBOUNCE_TIMEOUT / portTICK_RATE_MS;
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
  401c9e:	2301      	movs	r3, #1
  401ca0:	e00b      	b.n	401cba <SD_MMC_IS_TIMEOUT+0x2e>
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  401ca2:	4b09      	ldr	r3, [pc, #36]	; (401cc8 <SD_MMC_IS_TIMEOUT+0x3c>)
  401ca4:	681b      	ldr	r3, [r3, #0]
  401ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401caa:	2b00      	cmp	r3, #0
  401cac:	d004      	beq.n	401cb8 <SD_MMC_IS_TIMEOUT+0x2c>
		SysTick->CTRL = 0;
  401cae:	4b06      	ldr	r3, [pc, #24]	; (401cc8 <SD_MMC_IS_TIMEOUT+0x3c>)
  401cb0:	2200      	movs	r2, #0
  401cb2:	601a      	str	r2, [r3, #0]
		return true;
  401cb4:	2301      	movs	r3, #1
  401cb6:	e000      	b.n	401cba <SD_MMC_IS_TIMEOUT+0x2e>
	}
	return false;
  401cb8:	2300      	movs	r3, #0
}
  401cba:	4618      	mov	r0, r3
  401cbc:	46bd      	mov	sp, r7
  401cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cc2:	4770      	bx	lr
  401cc4:	20001708 	.word	0x20001708
  401cc8:	e000e010 	.word	0xe000e010

00401ccc <SD_MMC_STOP_TIMEOUT>:

static inline void SD_MMC_STOP_TIMEOUT(void)
{
  401ccc:	b480      	push	{r7}
  401cce:	af00      	add	r7, sp, #0
	if (sd_mmc_sam_systick_used) {
  401cd0:	4b05      	ldr	r3, [pc, #20]	; (401ce8 <SD_MMC_STOP_TIMEOUT+0x1c>)
  401cd2:	781b      	ldrb	r3, [r3, #0]
  401cd4:	2b00      	cmp	r3, #0
  401cd6:	d002      	beq.n	401cde <SD_MMC_STOP_TIMEOUT+0x12>
		SysTick->CTRL = 0;
  401cd8:	4b04      	ldr	r3, [pc, #16]	; (401cec <SD_MMC_STOP_TIMEOUT+0x20>)
  401cda:	2200      	movs	r2, #0
  401cdc:	601a      	str	r2, [r3, #0]
	}
}
  401cde:	46bd      	mov	sp, r7
  401ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ce4:	4770      	bx	lr
  401ce6:	bf00      	nop
  401ce8:	20001708 	.word	0x20001708
  401cec:	e000e010 	.word	0xe000e010

00401cf0 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  401cf0:	b580      	push	{r7, lr}
  401cf2:	b082      	sub	sp, #8
  401cf4:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  401cf6:	f241 0368 	movw	r3, #4200	; 0x1068
  401cfa:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  401cfc:	f244 5001 	movw	r0, #17665	; 0x4501
  401d00:	4917      	ldr	r1, [pc, #92]	; (401d60 <mmc_mci_op_cond+0x70>)
  401d02:	4b18      	ldr	r3, [pc, #96]	; (401d64 <mmc_mci_op_cond+0x74>)
  401d04:	4798      	blx	r3
  401d06:	4603      	mov	r3, r0
  401d08:	f083 0301 	eor.w	r3, r3, #1
  401d0c:	b2db      	uxtb	r3, r3
  401d0e:	2b00      	cmp	r3, #0
  401d10:	d001      	beq.n	401d16 <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  401d12:	2300      	movs	r3, #0
  401d14:	e01f      	b.n	401d56 <mmc_mci_op_cond+0x66>
		}
		// Check busy flag
		resp = driver_get_response();
  401d16:	4b14      	ldr	r3, [pc, #80]	; (401d68 <mmc_mci_op_cond+0x78>)
  401d18:	4798      	blx	r3
  401d1a:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  401d1c:	683b      	ldr	r3, [r7, #0]
  401d1e:	2b00      	cmp	r3, #0
  401d20:	da10      	bge.n	401d44 <mmc_mci_op_cond+0x54>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  401d22:	683b      	ldr	r3, [r7, #0]
  401d24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  401d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  401d2c:	d109      	bne.n	401d42 <mmc_mci_op_cond+0x52>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  401d2e:	4b0f      	ldr	r3, [pc, #60]	; (401d6c <mmc_mci_op_cond+0x7c>)
  401d30:	681b      	ldr	r3, [r3, #0]
  401d32:	4a0e      	ldr	r2, [pc, #56]	; (401d6c <mmc_mci_op_cond+0x7c>)
  401d34:	6812      	ldr	r2, [r2, #0]
  401d36:	7bd2      	ldrb	r2, [r2, #15]
  401d38:	f042 0208 	orr.w	r2, r2, #8
  401d3c:	b2d2      	uxtb	r2, r2
  401d3e:	73da      	strb	r2, [r3, #15]
			}
			break;
  401d40:	e008      	b.n	401d54 <mmc_mci_op_cond+0x64>
  401d42:	e007      	b.n	401d54 <mmc_mci_op_cond+0x64>
		}
		if (retry-- == 0) {
  401d44:	687b      	ldr	r3, [r7, #4]
  401d46:	1e5a      	subs	r2, r3, #1
  401d48:	607a      	str	r2, [r7, #4]
  401d4a:	2b00      	cmp	r3, #0
  401d4c:	d101      	bne.n	401d52 <mmc_mci_op_cond+0x62>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  401d4e:	2300      	movs	r3, #0
  401d50:	e001      	b.n	401d56 <mmc_mci_op_cond+0x66>
		}
	} while (1);
  401d52:	e7d3      	b.n	401cfc <mmc_mci_op_cond+0xc>
	return true;
  401d54:	2301      	movs	r3, #1
}
  401d56:	4618      	mov	r0, r3
  401d58:	3708      	adds	r7, #8
  401d5a:	46bd      	mov	sp, r7
  401d5c:	bd80      	pop	{r7, pc}
  401d5e:	bf00      	nop
  401d60:	401f8000 	.word	0x401f8000
  401d64:	00403999 	.word	0x00403999
  401d68:	004039e5 	.word	0x004039e5
  401d6c:	20001700 	.word	0x20001700

00401d70 <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  401d70:	b580      	push	{r7, lr}
  401d72:	b086      	sub	sp, #24
  401d74:	af00      	add	r7, sp, #0
  401d76:	4603      	mov	r3, r0
  401d78:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  401d7a:	f640 0334 	movw	r3, #2100	; 0x834
  401d7e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  401d80:	f241 1037 	movw	r0, #4407	; 0x1137
  401d84:	2100      	movs	r1, #0
  401d86:	4b22      	ldr	r3, [pc, #136]	; (401e10 <sd_mci_op_cond+0xa0>)
  401d88:	4798      	blx	r3
  401d8a:	4603      	mov	r3, r0
  401d8c:	f083 0301 	eor.w	r3, r3, #1
  401d90:	b2db      	uxtb	r3, r3
  401d92:	2b00      	cmp	r3, #0
  401d94:	d001      	beq.n	401d9a <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  401d96:	2300      	movs	r3, #0
  401d98:	e035      	b.n	401e06 <sd_mci_op_cond+0x96>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  401d9a:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  401d9e:	617b      	str	r3, [r7, #20]
		if (v2) {
  401da0:	79fb      	ldrb	r3, [r7, #7]
  401da2:	2b00      	cmp	r3, #0
  401da4:	d003      	beq.n	401dae <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  401da6:	697b      	ldr	r3, [r7, #20]
  401da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  401dac:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  401dae:	f244 5029 	movw	r0, #17705	; 0x4529
  401db2:	6979      	ldr	r1, [r7, #20]
  401db4:	4b16      	ldr	r3, [pc, #88]	; (401e10 <sd_mci_op_cond+0xa0>)
  401db6:	4798      	blx	r3
  401db8:	4603      	mov	r3, r0
  401dba:	f083 0301 	eor.w	r3, r3, #1
  401dbe:	b2db      	uxtb	r3, r3
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	d001      	beq.n	401dc8 <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  401dc4:	2300      	movs	r3, #0
  401dc6:	e01e      	b.n	401e06 <sd_mci_op_cond+0x96>
		}
		resp = driver_get_response();
  401dc8:	4b12      	ldr	r3, [pc, #72]	; (401e14 <sd_mci_op_cond+0xa4>)
  401dca:	4798      	blx	r3
  401dcc:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  401dce:	68fb      	ldr	r3, [r7, #12]
  401dd0:	2b00      	cmp	r3, #0
  401dd2:	da0f      	bge.n	401df4 <sd_mci_op_cond+0x84>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  401dda:	2b00      	cmp	r3, #0
  401ddc:	d009      	beq.n	401df2 <sd_mci_op_cond+0x82>
				sd_mmc_card->type |= CARD_TYPE_HC;
  401dde:	4b0e      	ldr	r3, [pc, #56]	; (401e18 <sd_mci_op_cond+0xa8>)
  401de0:	681b      	ldr	r3, [r3, #0]
  401de2:	4a0d      	ldr	r2, [pc, #52]	; (401e18 <sd_mci_op_cond+0xa8>)
  401de4:	6812      	ldr	r2, [r2, #0]
  401de6:	7bd2      	ldrb	r2, [r2, #15]
  401de8:	f042 0208 	orr.w	r2, r2, #8
  401dec:	b2d2      	uxtb	r2, r2
  401dee:	73da      	strb	r2, [r3, #15]
			}
			break;
  401df0:	e008      	b.n	401e04 <sd_mci_op_cond+0x94>
  401df2:	e007      	b.n	401e04 <sd_mci_op_cond+0x94>
		}
		if (retry-- == 0) {
  401df4:	693b      	ldr	r3, [r7, #16]
  401df6:	1e5a      	subs	r2, r3, #1
  401df8:	613a      	str	r2, [r7, #16]
  401dfa:	2b00      	cmp	r3, #0
  401dfc:	d101      	bne.n	401e02 <sd_mci_op_cond+0x92>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  401dfe:	2300      	movs	r3, #0
  401e00:	e001      	b.n	401e06 <sd_mci_op_cond+0x96>
		}
	} while (1);
  401e02:	e7bd      	b.n	401d80 <sd_mci_op_cond+0x10>
	return true;
  401e04:	2301      	movs	r3, #1
}
  401e06:	4618      	mov	r0, r3
  401e08:	3718      	adds	r7, #24
  401e0a:	46bd      	mov	sp, r7
  401e0c:	bd80      	pop	{r7, pc}
  401e0e:	bf00      	nop
  401e10:	00403999 	.word	0x00403999
  401e14:	004039e5 	.word	0x004039e5
  401e18:	20001700 	.word	0x20001700

00401e1c <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
  401e1c:	b480      	push	{r7}
  401e1e:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
  401e20:	2301      	movs	r3, #1
}
  401e22:	4618      	mov	r0, r3
  401e24:	46bd      	mov	sp, r7
  401e26:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e2a:	4770      	bx	lr

00401e2c <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  401e2c:	b590      	push	{r4, r7, lr}
  401e2e:	b093      	sub	sp, #76	; 0x4c
  401e30:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  401e32:	2301      	movs	r3, #1
  401e34:	9300      	str	r3, [sp, #0]
  401e36:	482e      	ldr	r0, [pc, #184]	; (401ef0 <sd_cm6_set_high_speed+0xc4>)
  401e38:	492e      	ldr	r1, [pc, #184]	; (401ef4 <sd_cm6_set_high_speed+0xc8>)
  401e3a:	2240      	movs	r2, #64	; 0x40
  401e3c:	2301      	movs	r3, #1
  401e3e:	4c2e      	ldr	r4, [pc, #184]	; (401ef8 <sd_cm6_set_high_speed+0xcc>)
  401e40:	47a0      	blx	r4
  401e42:	4603      	mov	r3, r0
  401e44:	f083 0301 	eor.w	r3, r3, #1
  401e48:	b2db      	uxtb	r3, r3
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d001      	beq.n	401e52 <sd_cm6_set_high_speed+0x26>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  401e4e:	2300      	movs	r3, #0
  401e50:	e04a      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  401e52:	463b      	mov	r3, r7
  401e54:	4618      	mov	r0, r3
  401e56:	2101      	movs	r1, #1
  401e58:	4b28      	ldr	r3, [pc, #160]	; (401efc <sd_cm6_set_high_speed+0xd0>)
  401e5a:	4798      	blx	r3
  401e5c:	4603      	mov	r3, r0
  401e5e:	f083 0301 	eor.w	r3, r3, #1
  401e62:	b2db      	uxtb	r3, r3
  401e64:	2b00      	cmp	r3, #0
  401e66:	d001      	beq.n	401e6c <sd_cm6_set_high_speed+0x40>
		return false;
  401e68:	2300      	movs	r3, #0
  401e6a:	e03d      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  401e6c:	4b24      	ldr	r3, [pc, #144]	; (401f00 <sd_cm6_set_high_speed+0xd4>)
  401e6e:	4798      	blx	r3
  401e70:	4603      	mov	r3, r0
  401e72:	f083 0301 	eor.w	r3, r3, #1
  401e76:	b2db      	uxtb	r3, r3
  401e78:	2b00      	cmp	r3, #0
  401e7a:	d001      	beq.n	401e80 <sd_cm6_set_high_speed+0x54>
		return false;
  401e7c:	2300      	movs	r3, #0
  401e7e:	e033      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  401e80:	4b20      	ldr	r3, [pc, #128]	; (401f04 <sd_cm6_set_high_speed+0xd8>)
  401e82:	4798      	blx	r3
  401e84:	4603      	mov	r3, r0
  401e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	d001      	beq.n	401e92 <sd_cm6_set_high_speed+0x66>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  401e8e:	2300      	movs	r3, #0
  401e90:	e02a      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  401e92:	463b      	mov	r3, r7
  401e94:	4618      	mov	r0, r3
  401e96:	f44f 7100 	mov.w	r1, #512	; 0x200
  401e9a:	f44f 72bc 	mov.w	r2, #376	; 0x178
  401e9e:	2304      	movs	r3, #4
  401ea0:	4c19      	ldr	r4, [pc, #100]	; (401f08 <sd_cm6_set_high_speed+0xdc>)
  401ea2:	47a0      	blx	r4
  401ea4:	4603      	mov	r3, r0
  401ea6:	2b0f      	cmp	r3, #15
  401ea8:	d101      	bne.n	401eae <sd_cm6_set_high_speed+0x82>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  401eaa:	2301      	movs	r3, #1
  401eac:	e01c      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  401eae:	463b      	mov	r3, r7
  401eb0:	4618      	mov	r0, r3
  401eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
  401eb6:	f44f 7288 	mov.w	r2, #272	; 0x110
  401eba:	2310      	movs	r3, #16
  401ebc:	4c12      	ldr	r4, [pc, #72]	; (401f08 <sd_cm6_set_high_speed+0xdc>)
  401ebe:	47a0      	blx	r4
  401ec0:	4603      	mov	r3, r0
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d001      	beq.n	401eca <sd_cm6_set_high_speed+0x9e>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  401ec6:	2300      	movs	r3, #0
  401ec8:	e00e      	b.n	401ee8 <sd_cm6_set_high_speed+0xbc>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  401eca:	4b10      	ldr	r3, [pc, #64]	; (401f0c <sd_cm6_set_high_speed+0xe0>)
  401ecc:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  401ece:	4b10      	ldr	r3, [pc, #64]	; (401f10 <sd_cm6_set_high_speed+0xe4>)
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	2201      	movs	r2, #1
  401ed4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  401ed8:	4b0d      	ldr	r3, [pc, #52]	; (401f10 <sd_cm6_set_high_speed+0xe4>)
  401eda:	681b      	ldr	r3, [r3, #0]
  401edc:	4a0c      	ldr	r2, [pc, #48]	; (401f10 <sd_cm6_set_high_speed+0xe4>)
  401ede:	6812      	ldr	r2, [r2, #0]
  401ee0:	6812      	ldr	r2, [r2, #0]
  401ee2:	0052      	lsls	r2, r2, #1
  401ee4:	601a      	str	r2, [r3, #0]
	return true;
  401ee6:	2301      	movs	r3, #1
}
  401ee8:	4618      	mov	r0, r3
  401eea:	3744      	adds	r7, #68	; 0x44
  401eec:	46bd      	mov	sp, r7
  401eee:	bd90      	pop	{r4, r7, pc}
  401ef0:	00081106 	.word	0x00081106
  401ef4:	80ffff01 	.word	0x80ffff01
  401ef8:	00403a65 	.word	0x00403a65
  401efc:	00403c35 	.word	0x00403c35
  401f00:	00403ce5 	.word	0x00403ce5
  401f04:	004039e5 	.word	0x004039e5
  401f08:	004019c1 	.word	0x004019c1
  401f0c:	00403959 	.word	0x00403959
  401f10:	20001700 	.word	0x20001700

00401f14 <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  401f14:	b580      	push	{r7, lr}
  401f16:	b084      	sub	sp, #16
  401f18:	af00      	add	r7, sp, #0
  401f1a:	4603      	mov	r3, r0
  401f1c:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  401f1e:	79fb      	ldrb	r3, [r7, #7]
  401f20:	2b04      	cmp	r3, #4
  401f22:	d004      	beq.n	401f2e <mmc_cmd6_set_bus_width+0x1a>
  401f24:	2b08      	cmp	r3, #8
  401f26:	d105      	bne.n	401f34 <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401f28:	4b13      	ldr	r3, [pc, #76]	; (401f78 <mmc_cmd6_set_bus_width+0x64>)
  401f2a:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  401f2c:	e005      	b.n	401f3a <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401f2e:	4b13      	ldr	r3, [pc, #76]	; (401f7c <mmc_cmd6_set_bus_width+0x68>)
  401f30:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  401f32:	e002      	b.n	401f3a <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  401f34:	4b12      	ldr	r3, [pc, #72]	; (401f80 <mmc_cmd6_set_bus_width+0x6c>)
  401f36:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  401f38:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  401f3a:	f243 1006 	movw	r0, #12550	; 0x3106
  401f3e:	68f9      	ldr	r1, [r7, #12]
  401f40:	4b10      	ldr	r3, [pc, #64]	; (401f84 <mmc_cmd6_set_bus_width+0x70>)
  401f42:	4798      	blx	r3
  401f44:	4603      	mov	r3, r0
  401f46:	f083 0301 	eor.w	r3, r3, #1
  401f4a:	b2db      	uxtb	r3, r3
  401f4c:	2b00      	cmp	r3, #0
  401f4e:	d001      	beq.n	401f54 <mmc_cmd6_set_bus_width+0x40>
		return false;
  401f50:	2300      	movs	r3, #0
  401f52:	e00d      	b.n	401f70 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  401f54:	4b0c      	ldr	r3, [pc, #48]	; (401f88 <mmc_cmd6_set_bus_width+0x74>)
  401f56:	4798      	blx	r3
  401f58:	4603      	mov	r3, r0
  401f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401f5e:	2b00      	cmp	r3, #0
  401f60:	d001      	beq.n	401f66 <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  401f62:	2300      	movs	r3, #0
  401f64:	e004      	b.n	401f70 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  401f66:	4b09      	ldr	r3, [pc, #36]	; (401f8c <mmc_cmd6_set_bus_width+0x78>)
  401f68:	681b      	ldr	r3, [r3, #0]
  401f6a:	79fa      	ldrb	r2, [r7, #7]
  401f6c:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  401f6e:	2301      	movs	r3, #1
}
  401f70:	4618      	mov	r0, r3
  401f72:	3710      	adds	r7, #16
  401f74:	46bd      	mov	sp, r7
  401f76:	bd80      	pop	{r7, pc}
  401f78:	01b70200 	.word	0x01b70200
  401f7c:	01b70100 	.word	0x01b70100
  401f80:	01b70000 	.word	0x01b70000
  401f84:	00403999 	.word	0x00403999
  401f88:	004039e5 	.word	0x004039e5
  401f8c:	20001700 	.word	0x20001700

00401f90 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  401f90:	b580      	push	{r7, lr}
  401f92:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  401f94:	f243 1006 	movw	r0, #12550	; 0x3106
  401f98:	490f      	ldr	r1, [pc, #60]	; (401fd8 <mmc_cmd6_set_high_speed+0x48>)
  401f9a:	4b10      	ldr	r3, [pc, #64]	; (401fdc <mmc_cmd6_set_high_speed+0x4c>)
  401f9c:	4798      	blx	r3
  401f9e:	4603      	mov	r3, r0
  401fa0:	f083 0301 	eor.w	r3, r3, #1
  401fa4:	b2db      	uxtb	r3, r3
  401fa6:	2b00      	cmp	r3, #0
  401fa8:	d001      	beq.n	401fae <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  401faa:	2300      	movs	r3, #0
  401fac:	e012      	b.n	401fd4 <mmc_cmd6_set_high_speed+0x44>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  401fae:	4b0c      	ldr	r3, [pc, #48]	; (401fe0 <mmc_cmd6_set_high_speed+0x50>)
  401fb0:	4798      	blx	r3
  401fb2:	4603      	mov	r3, r0
  401fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d001      	beq.n	401fc0 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  401fbc:	2300      	movs	r3, #0
  401fbe:	e009      	b.n	401fd4 <mmc_cmd6_set_high_speed+0x44>
	}
	sd_mmc_card->high_speed = 1;
  401fc0:	4b08      	ldr	r3, [pc, #32]	; (401fe4 <mmc_cmd6_set_high_speed+0x54>)
  401fc2:	681b      	ldr	r3, [r3, #0]
  401fc4:	2201      	movs	r2, #1
  401fc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  401fca:	4b06      	ldr	r3, [pc, #24]	; (401fe4 <mmc_cmd6_set_high_speed+0x54>)
  401fcc:	681b      	ldr	r3, [r3, #0]
  401fce:	4a06      	ldr	r2, [pc, #24]	; (401fe8 <mmc_cmd6_set_high_speed+0x58>)
  401fd0:	601a      	str	r2, [r3, #0]
	return true;
  401fd2:	2301      	movs	r3, #1
}
  401fd4:	4618      	mov	r0, r3
  401fd6:	bd80      	pop	{r7, pc}
  401fd8:	03b90100 	.word	0x03b90100
  401fdc:	00403999 	.word	0x00403999
  401fe0:	004039e5 	.word	0x004039e5
  401fe4:	20001700 	.word	0x20001700
  401fe8:	03197500 	.word	0x03197500

00401fec <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  401fec:	b580      	push	{r7, lr}
  401fee:	b084      	sub	sp, #16
  401ff0:	af00      	add	r7, sp, #0
  401ff2:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  401ff4:	687b      	ldr	r3, [r7, #4]
  401ff6:	2200      	movs	r2, #0
  401ff8:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  401ffa:	f245 5008 	movw	r0, #21768	; 0x5508
  401ffe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  402002:	4b11      	ldr	r3, [pc, #68]	; (402048 <sd_cmd8+0x5c>)
  402004:	4798      	blx	r3
  402006:	4603      	mov	r3, r0
  402008:	f083 0301 	eor.w	r3, r3, #1
  40200c:	b2db      	uxtb	r3, r3
  40200e:	2b00      	cmp	r3, #0
  402010:	d001      	beq.n	402016 <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  402012:	2301      	movs	r3, #1
  402014:	e014      	b.n	402040 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  402016:	4b0d      	ldr	r3, [pc, #52]	; (40204c <sd_cmd8+0x60>)
  402018:	4798      	blx	r3
  40201a:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  40201c:	68fb      	ldr	r3, [r7, #12]
  40201e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402022:	d101      	bne.n	402028 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  402024:	2301      	movs	r3, #1
  402026:	e00b      	b.n	402040 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  402028:	68fb      	ldr	r3, [r7, #12]
  40202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40202e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  402032:	d001      	beq.n	402038 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  402034:	2300      	movs	r3, #0
  402036:	e003      	b.n	402040 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  402038:	687b      	ldr	r3, [r7, #4]
  40203a:	2201      	movs	r2, #1
  40203c:	701a      	strb	r2, [r3, #0]
	return true;
  40203e:	2301      	movs	r3, #1
}
  402040:	4618      	mov	r0, r3
  402042:	3710      	adds	r7, #16
  402044:	46bd      	mov	sp, r7
  402046:	bd80      	pop	{r7, pc}
  402048:	00403999 	.word	0x00403999
  40204c:	004039e5 	.word	0x004039e5

00402050 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  402050:	b590      	push	{r4, r7, lr}
  402052:	b089      	sub	sp, #36	; 0x24
  402054:	af02      	add	r7, sp, #8
  402056:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  402058:	2300      	movs	r3, #0
  40205a:	9300      	str	r3, [sp, #0]
  40205c:	4836      	ldr	r0, [pc, #216]	; (402138 <mmc_cmd8+0xe8>)
  40205e:	2100      	movs	r1, #0
  402060:	f44f 7200 	mov.w	r2, #512	; 0x200
  402064:	2301      	movs	r3, #1
  402066:	4c35      	ldr	r4, [pc, #212]	; (40213c <mmc_cmd8+0xec>)
  402068:	47a0      	blx	r4
  40206a:	4603      	mov	r3, r0
  40206c:	f083 0301 	eor.w	r3, r3, #1
  402070:	b2db      	uxtb	r3, r3
  402072:	2b00      	cmp	r3, #0
  402074:	d001      	beq.n	40207a <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  402076:	2300      	movs	r3, #0
  402078:	e059      	b.n	40212e <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40207a:	2300      	movs	r3, #0
  40207c:	82fb      	strh	r3, [r7, #22]
  40207e:	e00f      	b.n	4020a0 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  402080:	f107 0310 	add.w	r3, r7, #16
  402084:	4618      	mov	r0, r3
  402086:	4b2e      	ldr	r3, [pc, #184]	; (402140 <mmc_cmd8+0xf0>)
  402088:	4798      	blx	r3
  40208a:	4603      	mov	r3, r0
  40208c:	f083 0301 	eor.w	r3, r3, #1
  402090:	b2db      	uxtb	r3, r3
  402092:	2b00      	cmp	r3, #0
  402094:	d001      	beq.n	40209a <mmc_cmd8+0x4a>
			return false;
  402096:	2300      	movs	r3, #0
  402098:	e049      	b.n	40212e <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40209a:	8afb      	ldrh	r3, [r7, #22]
  40209c:	3301      	adds	r3, #1
  40209e:	82fb      	strh	r3, [r7, #22]
  4020a0:	8afb      	ldrh	r3, [r7, #22]
  4020a2:	2b31      	cmp	r3, #49	; 0x31
  4020a4:	d9ec      	bls.n	402080 <mmc_cmd8+0x30>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4020a6:	693b      	ldr	r3, [r7, #16]
  4020a8:	b2db      	uxtb	r3, r3
  4020aa:	f003 0302 	and.w	r3, r3, #2
  4020ae:	b2da      	uxtb	r2, r3
  4020b0:	687b      	ldr	r3, [r7, #4]
  4020b2:	701a      	strb	r2, [r3, #0]
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4020b4:	4b23      	ldr	r3, [pc, #140]	; (402144 <mmc_cmd8+0xf4>)
  4020b6:	681b      	ldr	r3, [r3, #0]
  4020b8:	3312      	adds	r3, #18
  4020ba:	4618      	mov	r0, r3
  4020bc:	2180      	movs	r1, #128	; 0x80
  4020be:	223e      	movs	r2, #62	; 0x3e
  4020c0:	230c      	movs	r3, #12
  4020c2:	4c21      	ldr	r4, [pc, #132]	; (402148 <mmc_cmd8+0xf8>)
  4020c4:	47a0      	blx	r4
  4020c6:	4602      	mov	r2, r0
  4020c8:	f640 73ff 	movw	r3, #4095	; 0xfff
  4020cc:	429a      	cmp	r2, r3
  4020ce:	d119      	bne.n	402104 <mmc_cmd8+0xb4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4020d0:	e00f      	b.n	4020f2 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  4020d2:	f107 030c 	add.w	r3, r7, #12
  4020d6:	4618      	mov	r0, r3
  4020d8:	4b19      	ldr	r3, [pc, #100]	; (402140 <mmc_cmd8+0xf0>)
  4020da:	4798      	blx	r3
  4020dc:	4603      	mov	r3, r0
  4020de:	f083 0301 	eor.w	r3, r3, #1
  4020e2:	b2db      	uxtb	r3, r3
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	d001      	beq.n	4020ec <mmc_cmd8+0x9c>
				return false;
  4020e8:	2300      	movs	r3, #0
  4020ea:	e020      	b.n	40212e <mmc_cmd8+0xde>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4020ec:	8afb      	ldrh	r3, [r7, #22]
  4020ee:	3301      	adds	r3, #1
  4020f0:	82fb      	strh	r3, [r7, #22]
  4020f2:	8afb      	ldrh	r3, [r7, #22]
  4020f4:	2b35      	cmp	r3, #53	; 0x35
  4020f6:	d9ec      	bls.n	4020d2 <mmc_cmd8+0x82>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4020f8:	4b12      	ldr	r3, [pc, #72]	; (402144 <mmc_cmd8+0xf4>)
  4020fa:	681b      	ldr	r3, [r3, #0]
  4020fc:	68fa      	ldr	r2, [r7, #12]
  4020fe:	0852      	lsrs	r2, r2, #1
  402100:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  402102:	e010      	b.n	402126 <mmc_cmd8+0xd6>
  402104:	e00f      	b.n	402126 <mmc_cmd8+0xd6>
		if (!driver_read_word(&sec_count)) {
  402106:	f107 030c 	add.w	r3, r7, #12
  40210a:	4618      	mov	r0, r3
  40210c:	4b0c      	ldr	r3, [pc, #48]	; (402140 <mmc_cmd8+0xf0>)
  40210e:	4798      	blx	r3
  402110:	4603      	mov	r3, r0
  402112:	f083 0301 	eor.w	r3, r3, #1
  402116:	b2db      	uxtb	r3, r3
  402118:	2b00      	cmp	r3, #0
  40211a:	d001      	beq.n	402120 <mmc_cmd8+0xd0>
			return false;
  40211c:	2300      	movs	r3, #0
  40211e:	e006      	b.n	40212e <mmc_cmd8+0xde>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  402120:	8afb      	ldrh	r3, [r7, #22]
  402122:	3301      	adds	r3, #1
  402124:	82fb      	strh	r3, [r7, #22]
  402126:	8afb      	ldrh	r3, [r7, #22]
  402128:	2b7f      	cmp	r3, #127	; 0x7f
  40212a:	d9ec      	bls.n	402106 <mmc_cmd8+0xb6>
		if (!driver_read_word(&sec_count)) {
			return false;
		}
	}
	return true;
  40212c:	2301      	movs	r3, #1
}
  40212e:	4618      	mov	r0, r3
  402130:	371c      	adds	r7, #28
  402132:	46bd      	mov	sp, r7
  402134:	bd90      	pop	{r4, r7, pc}
  402136:	bf00      	nop
  402138:	00081108 	.word	0x00081108
  40213c:	00403a65 	.word	0x00403a65
  402140:	00403b99 	.word	0x00403b99
  402144:	20001700 	.word	0x20001700
  402148:	004019c1 	.word	0x004019c1

0040214c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  40214c:	b580      	push	{r7, lr}
  40214e:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  402150:	4b0c      	ldr	r3, [pc, #48]	; (402184 <sd_mmc_cmd9_mci+0x38>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	899b      	ldrh	r3, [r3, #12]
  402156:	041b      	lsls	r3, r3, #16
  402158:	f641 3009 	movw	r0, #6921	; 0x1b09
  40215c:	4619      	mov	r1, r3
  40215e:	4b0a      	ldr	r3, [pc, #40]	; (402188 <sd_mmc_cmd9_mci+0x3c>)
  402160:	4798      	blx	r3
  402162:	4603      	mov	r3, r0
  402164:	f083 0301 	eor.w	r3, r3, #1
  402168:	b2db      	uxtb	r3, r3
  40216a:	2b00      	cmp	r3, #0
  40216c:	d001      	beq.n	402172 <sd_mmc_cmd9_mci+0x26>
		return false;
  40216e:	2300      	movs	r3, #0
  402170:	e006      	b.n	402180 <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  402172:	4b04      	ldr	r3, [pc, #16]	; (402184 <sd_mmc_cmd9_mci+0x38>)
  402174:	681b      	ldr	r3, [r3, #0]
  402176:	3312      	adds	r3, #18
  402178:	4618      	mov	r0, r3
  40217a:	4b04      	ldr	r3, [pc, #16]	; (40218c <sd_mmc_cmd9_mci+0x40>)
  40217c:	4798      	blx	r3
	return true;
  40217e:	2301      	movs	r3, #1
}
  402180:	4618      	mov	r0, r3
  402182:	bd80      	pop	{r7, pc}
  402184:	20001700 	.word	0x20001700
  402188:	00403999 	.word	0x00403999
  40218c:	004039f9 	.word	0x004039f9

00402190 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  402190:	b5b0      	push	{r4, r5, r7, lr}
  402192:	b084      	sub	sp, #16
  402194:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  402196:	4b48      	ldr	r3, [pc, #288]	; (4022b8 <mmc_decode_csd+0x128>)
  402198:	681b      	ldr	r3, [r3, #0]
  40219a:	3312      	adds	r3, #18
  40219c:	4618      	mov	r0, r3
  40219e:	2180      	movs	r1, #128	; 0x80
  4021a0:	227a      	movs	r2, #122	; 0x7a
  4021a2:	2304      	movs	r3, #4
  4021a4:	4c45      	ldr	r4, [pc, #276]	; (4022bc <mmc_decode_csd+0x12c>)
  4021a6:	47a0      	blx	r4
  4021a8:	4603      	mov	r3, r0
  4021aa:	3b01      	subs	r3, #1
  4021ac:	2b03      	cmp	r3, #3
  4021ae:	d80b      	bhi.n	4021c8 <mmc_decode_csd+0x38>
  4021b0:	a201      	add	r2, pc, #4	; (adr r2, 4021b8 <mmc_decode_csd+0x28>)
  4021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4021b6:	bf00      	nop
  4021b8:	004021d3 	.word	0x004021d3
  4021bc:	004021dd 	.word	0x004021dd
  4021c0:	004021e7 	.word	0x004021e7
  4021c4:	004021f1 	.word	0x004021f1
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4021c8:	4b3b      	ldr	r3, [pc, #236]	; (4022b8 <mmc_decode_csd+0x128>)
  4021ca:	681b      	ldr	r3, [r3, #0]
  4021cc:	2212      	movs	r2, #18
  4021ce:	741a      	strb	r2, [r3, #16]
		break;
  4021d0:	e013      	b.n	4021fa <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4021d2:	4b39      	ldr	r3, [pc, #228]	; (4022b8 <mmc_decode_csd+0x128>)
  4021d4:	681b      	ldr	r3, [r3, #0]
  4021d6:	2214      	movs	r2, #20
  4021d8:	741a      	strb	r2, [r3, #16]
		break;
  4021da:	e00e      	b.n	4021fa <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4021dc:	4b36      	ldr	r3, [pc, #216]	; (4022b8 <mmc_decode_csd+0x128>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	2222      	movs	r2, #34	; 0x22
  4021e2:	741a      	strb	r2, [r3, #16]
		break;
  4021e4:	e009      	b.n	4021fa <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  4021e6:	4b34      	ldr	r3, [pc, #208]	; (4022b8 <mmc_decode_csd+0x128>)
  4021e8:	681b      	ldr	r3, [r3, #0]
  4021ea:	2230      	movs	r2, #48	; 0x30
  4021ec:	741a      	strb	r2, [r3, #16]
		break;
  4021ee:	e004      	b.n	4021fa <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  4021f0:	4b31      	ldr	r3, [pc, #196]	; (4022b8 <mmc_decode_csd+0x128>)
  4021f2:	681b      	ldr	r3, [r3, #0]
  4021f4:	2240      	movs	r2, #64	; 0x40
  4021f6:	741a      	strb	r2, [r3, #16]
		break;
  4021f8:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4021fa:	4b2f      	ldr	r3, [pc, #188]	; (4022b8 <mmc_decode_csd+0x128>)
  4021fc:	681b      	ldr	r3, [r3, #0]
  4021fe:	3312      	adds	r3, #18
  402200:	4618      	mov	r0, r3
  402202:	2180      	movs	r1, #128	; 0x80
  402204:	2260      	movs	r2, #96	; 0x60
  402206:	2308      	movs	r3, #8
  402208:	4c2c      	ldr	r4, [pc, #176]	; (4022bc <mmc_decode_csd+0x12c>)
  40220a:	47a0      	blx	r4
  40220c:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40220e:	68fb      	ldr	r3, [r7, #12]
  402210:	f003 0207 	and.w	r2, r3, #7
  402214:	4b2a      	ldr	r3, [pc, #168]	; (4022c0 <mmc_decode_csd+0x130>)
  402216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40221a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  40221c:	68fb      	ldr	r3, [r7, #12]
  40221e:	08db      	lsrs	r3, r3, #3
  402220:	f003 020f 	and.w	r2, r3, #15
  402224:	4b27      	ldr	r3, [pc, #156]	; (4022c4 <mmc_decode_csd+0x134>)
  402226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40222a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  40222c:	4b22      	ldr	r3, [pc, #136]	; (4022b8 <mmc_decode_csd+0x128>)
  40222e:	681b      	ldr	r3, [r3, #0]
  402230:	68ba      	ldr	r2, [r7, #8]
  402232:	6879      	ldr	r1, [r7, #4]
  402234:	fb01 f202 	mul.w	r2, r1, r2
  402238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40223c:	fb01 f202 	mul.w	r2, r1, r2
  402240:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  402242:	4b1d      	ldr	r3, [pc, #116]	; (4022b8 <mmc_decode_csd+0x128>)
  402244:	681b      	ldr	r3, [r3, #0]
  402246:	3312      	adds	r3, #18
  402248:	4618      	mov	r0, r3
  40224a:	2180      	movs	r1, #128	; 0x80
  40224c:	223e      	movs	r2, #62	; 0x3e
  40224e:	230c      	movs	r3, #12
  402250:	4c1a      	ldr	r4, [pc, #104]	; (4022bc <mmc_decode_csd+0x12c>)
  402252:	47a0      	blx	r4
  402254:	4602      	mov	r2, r0
  402256:	f640 73ff 	movw	r3, #4095	; 0xfff
  40225a:	429a      	cmp	r2, r3
  40225c:	d029      	beq.n	4022b2 <mmc_decode_csd+0x122>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40225e:	4b16      	ldr	r3, [pc, #88]	; (4022b8 <mmc_decode_csd+0x128>)
  402260:	681b      	ldr	r3, [r3, #0]
  402262:	3312      	adds	r3, #18
  402264:	4618      	mov	r0, r3
  402266:	2180      	movs	r1, #128	; 0x80
  402268:	223e      	movs	r2, #62	; 0x3e
  40226a:	230c      	movs	r3, #12
  40226c:	4c13      	ldr	r4, [pc, #76]	; (4022bc <mmc_decode_csd+0x12c>)
  40226e:	47a0      	blx	r4
  402270:	4603      	mov	r3, r0
  402272:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  402274:	4b10      	ldr	r3, [pc, #64]	; (4022b8 <mmc_decode_csd+0x128>)
  402276:	681b      	ldr	r3, [r3, #0]
  402278:	3312      	adds	r3, #18
  40227a:	4618      	mov	r0, r3
  40227c:	2180      	movs	r1, #128	; 0x80
  40227e:	222f      	movs	r2, #47	; 0x2f
  402280:	2303      	movs	r3, #3
  402282:	4d0e      	ldr	r5, [pc, #56]	; (4022bc <mmc_decode_csd+0x12c>)
  402284:	47a8      	blx	r5
  402286:	4603      	mov	r3, r0
  402288:	3302      	adds	r3, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40228a:	fa04 f303 	lsl.w	r3, r4, r3
  40228e:	603b      	str	r3, [r7, #0]
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  402290:	4b09      	ldr	r3, [pc, #36]	; (4022b8 <mmc_decode_csd+0x128>)
  402292:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  402294:	4b08      	ldr	r3, [pc, #32]	; (4022b8 <mmc_decode_csd+0x128>)
  402296:	681b      	ldr	r3, [r3, #0]
  402298:	3312      	adds	r3, #18
  40229a:	4618      	mov	r0, r3
  40229c:	2180      	movs	r1, #128	; 0x80
  40229e:	2250      	movs	r2, #80	; 0x50
  4022a0:	2304      	movs	r3, #4
  4022a2:	4d06      	ldr	r5, [pc, #24]	; (4022bc <mmc_decode_csd+0x12c>)
  4022a4:	47a8      	blx	r5
  4022a6:	4603      	mov	r3, r0
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4022a8:	683a      	ldr	r2, [r7, #0]
  4022aa:	fa02 f303 	lsl.w	r3, r2, r3
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  4022ae:	0a9b      	lsrs	r3, r3, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4022b0:	6063      	str	r3, [r4, #4]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
	}
}
  4022b2:	3710      	adds	r7, #16
  4022b4:	46bd      	mov	sp, r7
  4022b6:	bdb0      	pop	{r4, r5, r7, pc}
  4022b8:	20001700 	.word	0x20001700
  4022bc:	004019c1 	.word	0x004019c1
  4022c0:	004185c8 	.word	0x004185c8
  4022c4:	00418624 	.word	0x00418624

004022c8 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  4022c8:	b5b0      	push	{r4, r5, r7, lr}
  4022ca:	b084      	sub	sp, #16
  4022cc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4022ce:	4b36      	ldr	r3, [pc, #216]	; (4023a8 <sd_decode_csd+0xe0>)
  4022d0:	681b      	ldr	r3, [r3, #0]
  4022d2:	3312      	adds	r3, #18
  4022d4:	4618      	mov	r0, r3
  4022d6:	2180      	movs	r1, #128	; 0x80
  4022d8:	2260      	movs	r2, #96	; 0x60
  4022da:	2308      	movs	r3, #8
  4022dc:	4c33      	ldr	r4, [pc, #204]	; (4023ac <sd_decode_csd+0xe4>)
  4022de:	47a0      	blx	r4
  4022e0:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4022e2:	68fb      	ldr	r3, [r7, #12]
  4022e4:	f003 0207 	and.w	r2, r3, #7
  4022e8:	4b31      	ldr	r3, [pc, #196]	; (4023b0 <sd_decode_csd+0xe8>)
  4022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4022ee:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  4022f0:	68fb      	ldr	r3, [r7, #12]
  4022f2:	08db      	lsrs	r3, r3, #3
  4022f4:	f003 020f 	and.w	r2, r3, #15
  4022f8:	4b2e      	ldr	r3, [pc, #184]	; (4023b4 <sd_decode_csd+0xec>)
  4022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4022fe:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  402300:	4b29      	ldr	r3, [pc, #164]	; (4023a8 <sd_decode_csd+0xe0>)
  402302:	681b      	ldr	r3, [r3, #0]
  402304:	68ba      	ldr	r2, [r7, #8]
  402306:	6879      	ldr	r1, [r7, #4]
  402308:	fb01 f202 	mul.w	r2, r1, r2
  40230c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402310:	fb01 f202 	mul.w	r2, r1, r2
  402314:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  402316:	4b24      	ldr	r3, [pc, #144]	; (4023a8 <sd_decode_csd+0xe0>)
  402318:	681b      	ldr	r3, [r3, #0]
  40231a:	3312      	adds	r3, #18
  40231c:	4618      	mov	r0, r3
  40231e:	2180      	movs	r1, #128	; 0x80
  402320:	227e      	movs	r2, #126	; 0x7e
  402322:	2302      	movs	r3, #2
  402324:	4c21      	ldr	r4, [pc, #132]	; (4023ac <sd_decode_csd+0xe4>)
  402326:	47a0      	blx	r4
  402328:	4603      	mov	r3, r0
  40232a:	2b00      	cmp	r3, #0
  40232c:	d00f      	beq.n	40234e <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  40232e:	4b1e      	ldr	r3, [pc, #120]	; (4023a8 <sd_decode_csd+0xe0>)
  402330:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  402332:	4b1d      	ldr	r3, [pc, #116]	; (4023a8 <sd_decode_csd+0xe0>)
  402334:	681b      	ldr	r3, [r3, #0]
  402336:	3312      	adds	r3, #18
  402338:	4618      	mov	r0, r3
  40233a:	2180      	movs	r1, #128	; 0x80
  40233c:	2230      	movs	r2, #48	; 0x30
  40233e:	2316      	movs	r3, #22
  402340:	4d1a      	ldr	r5, [pc, #104]	; (4023ac <sd_decode_csd+0xe4>)
  402342:	47a8      	blx	r5
  402344:	4603      	mov	r3, r0
				* 512;
  402346:	3301      	adds	r3, #1
  402348:	025b      	lsls	r3, r3, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  40234a:	6063      	str	r3, [r4, #4]
  40234c:	e029      	b.n	4023a2 <sd_decode_csd+0xda>
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40234e:	4b16      	ldr	r3, [pc, #88]	; (4023a8 <sd_decode_csd+0xe0>)
  402350:	681b      	ldr	r3, [r3, #0]
  402352:	3312      	adds	r3, #18
  402354:	4618      	mov	r0, r3
  402356:	2180      	movs	r1, #128	; 0x80
  402358:	223e      	movs	r2, #62	; 0x3e
  40235a:	230c      	movs	r3, #12
  40235c:	4c13      	ldr	r4, [pc, #76]	; (4023ac <sd_decode_csd+0xe4>)
  40235e:	47a0      	blx	r4
  402360:	4603      	mov	r3, r0
  402362:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  402364:	4b10      	ldr	r3, [pc, #64]	; (4023a8 <sd_decode_csd+0xe0>)
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	3312      	adds	r3, #18
  40236a:	4618      	mov	r0, r3
  40236c:	2180      	movs	r1, #128	; 0x80
  40236e:	222f      	movs	r2, #47	; 0x2f
  402370:	2303      	movs	r3, #3
  402372:	4d0e      	ldr	r5, [pc, #56]	; (4023ac <sd_decode_csd+0xe4>)
  402374:	47a8      	blx	r5
  402376:	4603      	mov	r3, r0
  402378:	3302      	adds	r3, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40237a:	fa04 f303 	lsl.w	r3, r4, r3
  40237e:	603b      	str	r3, [r7, #0]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  402380:	4b09      	ldr	r3, [pc, #36]	; (4023a8 <sd_decode_csd+0xe0>)
  402382:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  402384:	4b08      	ldr	r3, [pc, #32]	; (4023a8 <sd_decode_csd+0xe0>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	3312      	adds	r3, #18
  40238a:	4618      	mov	r0, r3
  40238c:	2180      	movs	r1, #128	; 0x80
  40238e:	2250      	movs	r2, #80	; 0x50
  402390:	2304      	movs	r3, #4
  402392:	4d06      	ldr	r5, [pc, #24]	; (4023ac <sd_decode_csd+0xe4>)
  402394:	47a8      	blx	r5
  402396:	4603      	mov	r3, r0
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  402398:	683a      	ldr	r2, [r7, #0]
  40239a:	fa02 f303 	lsl.w	r3, r2, r3
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  40239e:	0a9b      	lsrs	r3, r3, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4023a0:	6063      	str	r3, [r4, #4]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  4023a2:	3710      	adds	r7, #16
  4023a4:	46bd      	mov	sp, r7
  4023a6:	bdb0      	pop	{r4, r5, r7, pc}
  4023a8:	20001700 	.word	0x20001700
  4023ac:	004019c1 	.word	0x004019c1
  4023b0:	004185c8 	.word	0x004185c8
  4023b4:	004185e4 	.word	0x004185e4

004023b8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  4023b8:	b580      	push	{r7, lr}
  4023ba:	b082      	sub	sp, #8
  4023bc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
  4023be:	4b14      	ldr	r3, [pc, #80]	; (402410 <sd_mmc_cmd13+0x58>)
  4023c0:	607b      	str	r3, [r7, #4]
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  4023c2:	4b14      	ldr	r3, [pc, #80]	; (402414 <sd_mmc_cmd13+0x5c>)
  4023c4:	681b      	ldr	r3, [r3, #0]
  4023c6:	899b      	ldrh	r3, [r3, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  4023c8:	041b      	lsls	r3, r3, #16
  4023ca:	f241 100d 	movw	r0, #4365	; 0x110d
  4023ce:	4619      	mov	r1, r3
  4023d0:	4b11      	ldr	r3, [pc, #68]	; (402418 <sd_mmc_cmd13+0x60>)
  4023d2:	4798      	blx	r3
  4023d4:	4603      	mov	r3, r0
  4023d6:	f083 0301 	eor.w	r3, r3, #1
  4023da:	b2db      	uxtb	r3, r3
  4023dc:	2b00      	cmp	r3, #0
  4023de:	d001      	beq.n	4023e4 <sd_mmc_cmd13+0x2c>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
  4023e0:	2300      	movs	r3, #0
  4023e2:	e011      	b.n	402408 <sd_mmc_cmd13+0x50>
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  4023e4:	4b0d      	ldr	r3, [pc, #52]	; (40241c <sd_mmc_cmd13+0x64>)
  4023e6:	4798      	blx	r3
  4023e8:	4603      	mov	r3, r0
  4023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4023ee:	2b00      	cmp	r3, #0
  4023f0:	d002      	beq.n	4023f8 <sd_mmc_cmd13+0x40>
				break;
  4023f2:	bf00      	nop
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
		}
	} while (1);

	return true;
  4023f4:	2301      	movs	r3, #1
  4023f6:	e007      	b.n	402408 <sd_mmc_cmd13+0x50>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  4023f8:	687b      	ldr	r3, [r7, #4]
  4023fa:	1e5a      	subs	r2, r3, #1
  4023fc:	607a      	str	r2, [r7, #4]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d101      	bne.n	402406 <sd_mmc_cmd13+0x4e>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  402402:	2300      	movs	r3, #0
  402404:	e000      	b.n	402408 <sd_mmc_cmd13+0x50>
		}
	} while (1);
  402406:	e7dc      	b.n	4023c2 <sd_mmc_cmd13+0xa>

	return true;
}
  402408:	4618      	mov	r0, r3
  40240a:	3708      	adds	r7, #8
  40240c:	46bd      	mov	sp, r7
  40240e:	bd80      	pop	{r7, pc}
  402410:	00030d40 	.word	0x00030d40
  402414:	20001700 	.word	0x20001700
  402418:	00403999 	.word	0x00403999
  40241c:	004039e5 	.word	0x004039e5

00402420 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  402420:	b580      	push	{r7, lr}
  402422:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  402424:	4b12      	ldr	r3, [pc, #72]	; (402470 <sd_acmd6+0x50>)
  402426:	681b      	ldr	r3, [r3, #0]
  402428:	899b      	ldrh	r3, [r3, #12]
  40242a:	041b      	lsls	r3, r3, #16
  40242c:	f241 1037 	movw	r0, #4407	; 0x1137
  402430:	4619      	mov	r1, r3
  402432:	4b10      	ldr	r3, [pc, #64]	; (402474 <sd_acmd6+0x54>)
  402434:	4798      	blx	r3
  402436:	4603      	mov	r3, r0
  402438:	f083 0301 	eor.w	r3, r3, #1
  40243c:	b2db      	uxtb	r3, r3
  40243e:	2b00      	cmp	r3, #0
  402440:	d001      	beq.n	402446 <sd_acmd6+0x26>
		return false;
  402442:	2300      	movs	r3, #0
  402444:	e011      	b.n	40246a <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  402446:	f241 1006 	movw	r0, #4358	; 0x1106
  40244a:	2102      	movs	r1, #2
  40244c:	4b09      	ldr	r3, [pc, #36]	; (402474 <sd_acmd6+0x54>)
  40244e:	4798      	blx	r3
  402450:	4603      	mov	r3, r0
  402452:	f083 0301 	eor.w	r3, r3, #1
  402456:	b2db      	uxtb	r3, r3
  402458:	2b00      	cmp	r3, #0
  40245a:	d001      	beq.n	402460 <sd_acmd6+0x40>
		return false;
  40245c:	2300      	movs	r3, #0
  40245e:	e004      	b.n	40246a <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  402460:	4b03      	ldr	r3, [pc, #12]	; (402470 <sd_acmd6+0x50>)
  402462:	681b      	ldr	r3, [r3, #0]
  402464:	2204      	movs	r2, #4
  402466:	745a      	strb	r2, [r3, #17]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  402468:	2301      	movs	r3, #1
}
  40246a:	4618      	mov	r0, r3
  40246c:	bd80      	pop	{r7, pc}
  40246e:	bf00      	nop
  402470:	20001700 	.word	0x20001700
  402474:	00403999 	.word	0x00403999

00402478 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  402478:	b590      	push	{r4, r7, lr}
  40247a:	b085      	sub	sp, #20
  40247c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40247e:	4b37      	ldr	r3, [pc, #220]	; (40255c <sd_acmd51+0xe4>)
  402480:	681b      	ldr	r3, [r3, #0]
  402482:	899b      	ldrh	r3, [r3, #12]
  402484:	041b      	lsls	r3, r3, #16
  402486:	f241 1037 	movw	r0, #4407	; 0x1137
  40248a:	4619      	mov	r1, r3
  40248c:	4b34      	ldr	r3, [pc, #208]	; (402560 <sd_acmd51+0xe8>)
  40248e:	4798      	blx	r3
  402490:	4603      	mov	r3, r0
  402492:	f083 0301 	eor.w	r3, r3, #1
  402496:	b2db      	uxtb	r3, r3
  402498:	2b00      	cmp	r3, #0
  40249a:	d001      	beq.n	4024a0 <sd_acmd51+0x28>
		return false;
  40249c:	2300      	movs	r3, #0
  40249e:	e059      	b.n	402554 <sd_acmd51+0xdc>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4024a0:	2301      	movs	r3, #1
  4024a2:	9300      	str	r3, [sp, #0]
  4024a4:	482f      	ldr	r0, [pc, #188]	; (402564 <sd_acmd51+0xec>)
  4024a6:	2100      	movs	r1, #0
  4024a8:	2208      	movs	r2, #8
  4024aa:	2301      	movs	r3, #1
  4024ac:	4c2e      	ldr	r4, [pc, #184]	; (402568 <sd_acmd51+0xf0>)
  4024ae:	47a0      	blx	r4
  4024b0:	4603      	mov	r3, r0
  4024b2:	f083 0301 	eor.w	r3, r3, #1
  4024b6:	b2db      	uxtb	r3, r3
  4024b8:	2b00      	cmp	r3, #0
  4024ba:	d001      	beq.n	4024c0 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  4024bc:	2300      	movs	r3, #0
  4024be:	e049      	b.n	402554 <sd_acmd51+0xdc>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4024c0:	463b      	mov	r3, r7
  4024c2:	4618      	mov	r0, r3
  4024c4:	2101      	movs	r1, #1
  4024c6:	4b29      	ldr	r3, [pc, #164]	; (40256c <sd_acmd51+0xf4>)
  4024c8:	4798      	blx	r3
  4024ca:	4603      	mov	r3, r0
  4024cc:	f083 0301 	eor.w	r3, r3, #1
  4024d0:	b2db      	uxtb	r3, r3
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	d001      	beq.n	4024da <sd_acmd51+0x62>
		return false;
  4024d6:	2300      	movs	r3, #0
  4024d8:	e03c      	b.n	402554 <sd_acmd51+0xdc>
	}
	if (!driver_wait_end_of_read_blocks()) {
  4024da:	4b25      	ldr	r3, [pc, #148]	; (402570 <sd_acmd51+0xf8>)
  4024dc:	4798      	blx	r3
  4024de:	4603      	mov	r3, r0
  4024e0:	f083 0301 	eor.w	r3, r3, #1
  4024e4:	b2db      	uxtb	r3, r3
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d001      	beq.n	4024ee <sd_acmd51+0x76>
		return false;
  4024ea:	2300      	movs	r3, #0
  4024ec:	e032      	b.n	402554 <sd_acmd51+0xdc>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  4024ee:	463b      	mov	r3, r7
  4024f0:	4618      	mov	r0, r3
  4024f2:	2140      	movs	r1, #64	; 0x40
  4024f4:	2238      	movs	r2, #56	; 0x38
  4024f6:	2304      	movs	r3, #4
  4024f8:	4c1e      	ldr	r4, [pc, #120]	; (402574 <sd_acmd51+0xfc>)
  4024fa:	47a0      	blx	r4
  4024fc:	4603      	mov	r3, r0
  4024fe:	2b01      	cmp	r3, #1
  402500:	d009      	beq.n	402516 <sd_acmd51+0x9e>
  402502:	2b01      	cmp	r3, #1
  402504:	d302      	bcc.n	40250c <sd_acmd51+0x94>
  402506:	2b02      	cmp	r3, #2
  402508:	d00a      	beq.n	402520 <sd_acmd51+0xa8>
  40250a:	e01d      	b.n	402548 <sd_acmd51+0xd0>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40250c:	4b13      	ldr	r3, [pc, #76]	; (40255c <sd_acmd51+0xe4>)
  40250e:	681b      	ldr	r3, [r3, #0]
  402510:	2210      	movs	r2, #16
  402512:	741a      	strb	r2, [r3, #16]
		break;
  402514:	e01d      	b.n	402552 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  402516:	4b11      	ldr	r3, [pc, #68]	; (40255c <sd_acmd51+0xe4>)
  402518:	681b      	ldr	r3, [r3, #0]
  40251a:	221a      	movs	r2, #26
  40251c:	741a      	strb	r2, [r3, #16]
		break;
  40251e:	e018      	b.n	402552 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  402520:	463b      	mov	r3, r7
  402522:	4618      	mov	r0, r3
  402524:	2140      	movs	r1, #64	; 0x40
  402526:	222f      	movs	r2, #47	; 0x2f
  402528:	2301      	movs	r3, #1
  40252a:	4c12      	ldr	r4, [pc, #72]	; (402574 <sd_acmd51+0xfc>)
  40252c:	47a0      	blx	r4
  40252e:	4603      	mov	r3, r0
  402530:	2b01      	cmp	r3, #1
  402532:	d104      	bne.n	40253e <sd_acmd51+0xc6>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  402534:	4b09      	ldr	r3, [pc, #36]	; (40255c <sd_acmd51+0xe4>)
  402536:	681b      	ldr	r3, [r3, #0]
  402538:	2230      	movs	r2, #48	; 0x30
  40253a:	741a      	strb	r2, [r3, #16]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  40253c:	e009      	b.n	402552 <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
			sd_mmc_card->version = CARD_VER_SD_3_0;
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40253e:	4b07      	ldr	r3, [pc, #28]	; (40255c <sd_acmd51+0xe4>)
  402540:	681b      	ldr	r3, [r3, #0]
  402542:	2220      	movs	r2, #32
  402544:	741a      	strb	r2, [r3, #16]
		}
		break;
  402546:	e004      	b.n	402552 <sd_acmd51+0xda>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  402548:	4b04      	ldr	r3, [pc, #16]	; (40255c <sd_acmd51+0xe4>)
  40254a:	681b      	ldr	r3, [r3, #0]
  40254c:	2210      	movs	r2, #16
  40254e:	741a      	strb	r2, [r3, #16]
		break;
  402550:	bf00      	nop
	}
	return true;
  402552:	2301      	movs	r3, #1
}
  402554:	4618      	mov	r0, r3
  402556:	370c      	adds	r7, #12
  402558:	46bd      	mov	sp, r7
  40255a:	bd90      	pop	{r4, r7, pc}
  40255c:	20001700 	.word	0x20001700
  402560:	00403999 	.word	0x00403999
  402564:	00081133 	.word	0x00081133
  402568:	00403a65 	.word	0x00403a65
  40256c:	00403c35 	.word	0x00403c35
  402570:	00403ce5 	.word	0x00403ce5
  402574:	004019c1 	.word	0x004019c1

00402578 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  402578:	b580      	push	{r7, lr}
  40257a:	b082      	sub	sp, #8
  40257c:	af00      	add	r7, sp, #0
  40257e:	4603      	mov	r3, r0
  402580:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  402582:	79fb      	ldrb	r3, [r7, #7]
  402584:	2b00      	cmp	r3, #0
  402586:	d001      	beq.n	40258c <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  402588:	2304      	movs	r3, #4
  40258a:	e0a8      	b.n	4026de <sd_mmc_select_slot+0x166>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  40258c:	79fa      	ldrb	r2, [r7, #7]
  40258e:	4956      	ldr	r1, [pc, #344]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402590:	4613      	mov	r3, r2
  402592:	00db      	lsls	r3, r3, #3
  402594:	4413      	add	r3, r2
  402596:	009b      	lsls	r3, r3, #2
  402598:	440b      	add	r3, r1
  40259a:	3308      	adds	r3, #8
  40259c:	681b      	ldr	r3, [r3, #0]
  40259e:	4618      	mov	r0, r3
  4025a0:	4b52      	ldr	r3, [pc, #328]	; (4026ec <sd_mmc_select_slot+0x174>)
  4025a2:	4798      	blx	r3
  4025a4:	4603      	mov	r3, r0
			!= SD_MMC_0_CD_DETECT_VALUE) {
  4025a6:	f083 0301 	eor.w	r3, r3, #1
  4025aa:	b2db      	uxtb	r3, r3
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4025ac:	2b00      	cmp	r3, #0
  4025ae:	d018      	beq.n	4025e2 <sd_mmc_select_slot+0x6a>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4025b0:	79fa      	ldrb	r2, [r7, #7]
  4025b2:	494d      	ldr	r1, [pc, #308]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4025b4:	4613      	mov	r3, r2
  4025b6:	00db      	lsls	r3, r3, #3
  4025b8:	4413      	add	r3, r2
  4025ba:	009b      	lsls	r3, r3, #2
  4025bc:	440b      	add	r3, r1
  4025be:	3308      	adds	r3, #8
  4025c0:	799b      	ldrb	r3, [r3, #6]
  4025c2:	2b01      	cmp	r3, #1
  4025c4:	d101      	bne.n	4025ca <sd_mmc_select_slot+0x52>
			SD_MMC_STOP_TIMEOUT();
  4025c6:	4b4a      	ldr	r3, [pc, #296]	; (4026f0 <sd_mmc_select_slot+0x178>)
  4025c8:	4798      	blx	r3
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4025ca:	79fa      	ldrb	r2, [r7, #7]
  4025cc:	4946      	ldr	r1, [pc, #280]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4025ce:	4613      	mov	r3, r2
  4025d0:	00db      	lsls	r3, r3, #3
  4025d2:	4413      	add	r3, r2
  4025d4:	009b      	lsls	r3, r3, #2
  4025d6:	440b      	add	r3, r1
  4025d8:	3308      	adds	r3, #8
  4025da:	2204      	movs	r2, #4
  4025dc:	719a      	strb	r2, [r3, #6]
		return SD_MMC_ERR_NO_CARD;
  4025de:	2302      	movs	r3, #2
  4025e0:	e07d      	b.n	4026de <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  4025e2:	79fa      	ldrb	r2, [r7, #7]
  4025e4:	4940      	ldr	r1, [pc, #256]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4025e6:	4613      	mov	r3, r2
  4025e8:	00db      	lsls	r3, r3, #3
  4025ea:	4413      	add	r3, r2
  4025ec:	009b      	lsls	r3, r3, #2
  4025ee:	440b      	add	r3, r1
  4025f0:	3308      	adds	r3, #8
  4025f2:	799b      	ldrb	r3, [r3, #6]
  4025f4:	2b04      	cmp	r3, #4
  4025f6:	d10d      	bne.n	402614 <sd_mmc_select_slot+0x9c>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  4025f8:	79fa      	ldrb	r2, [r7, #7]
  4025fa:	493b      	ldr	r1, [pc, #236]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4025fc:	4613      	mov	r3, r2
  4025fe:	00db      	lsls	r3, r3, #3
  402600:	4413      	add	r3, r2
  402602:	009b      	lsls	r3, r3, #2
  402604:	440b      	add	r3, r1
  402606:	3308      	adds	r3, #8
  402608:	2201      	movs	r2, #1
  40260a:	719a      	strb	r2, [r3, #6]
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
  40260c:	4b39      	ldr	r3, [pc, #228]	; (4026f4 <sd_mmc_select_slot+0x17c>)
  40260e:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  402610:	2302      	movs	r3, #2
  402612:	e064      	b.n	4026de <sd_mmc_select_slot+0x166>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  402614:	79fa      	ldrb	r2, [r7, #7]
  402616:	4934      	ldr	r1, [pc, #208]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402618:	4613      	mov	r3, r2
  40261a:	00db      	lsls	r3, r3, #3
  40261c:	4413      	add	r3, r2
  40261e:	009b      	lsls	r3, r3, #2
  402620:	440b      	add	r3, r1
  402622:	3308      	adds	r3, #8
  402624:	799b      	ldrb	r3, [r3, #6]
  402626:	2b01      	cmp	r3, #1
  402628:	d130      	bne.n	40268c <sd_mmc_select_slot+0x114>
		if (!SD_MMC_IS_TIMEOUT()) {
  40262a:	4b33      	ldr	r3, [pc, #204]	; (4026f8 <sd_mmc_select_slot+0x180>)
  40262c:	4798      	blx	r3
  40262e:	4603      	mov	r3, r0
  402630:	f083 0301 	eor.w	r3, r3, #1
  402634:	b2db      	uxtb	r3, r3
  402636:	2b00      	cmp	r3, #0
  402638:	d001      	beq.n	40263e <sd_mmc_select_slot+0xc6>
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  40263a:	2302      	movs	r3, #2
  40263c:	e04f      	b.n	4026de <sd_mmc_select_slot+0x166>
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  40263e:	79fa      	ldrb	r2, [r7, #7]
  402640:	4929      	ldr	r1, [pc, #164]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402642:	4613      	mov	r3, r2
  402644:	00db      	lsls	r3, r3, #3
  402646:	4413      	add	r3, r2
  402648:	009b      	lsls	r3, r3, #2
  40264a:	440b      	add	r3, r1
  40264c:	3308      	adds	r3, #8
  40264e:	2202      	movs	r2, #2
  402650:	719a      	strb	r2, [r3, #6]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  402652:	79fa      	ldrb	r2, [r7, #7]
  402654:	4924      	ldr	r1, [pc, #144]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402656:	4613      	mov	r3, r2
  402658:	00db      	lsls	r3, r3, #3
  40265a:	4413      	add	r3, r2
  40265c:	009b      	lsls	r3, r3, #2
  40265e:	440b      	add	r3, r1
  402660:	4a26      	ldr	r2, [pc, #152]	; (4026fc <sd_mmc_select_slot+0x184>)
  402662:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  402664:	79fa      	ldrb	r2, [r7, #7]
  402666:	4920      	ldr	r1, [pc, #128]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402668:	4613      	mov	r3, r2
  40266a:	00db      	lsls	r3, r3, #3
  40266c:	4413      	add	r3, r2
  40266e:	009b      	lsls	r3, r3, #2
  402670:	440b      	add	r3, r1
  402672:	3310      	adds	r3, #16
  402674:	2201      	movs	r2, #1
  402676:	705a      	strb	r2, [r3, #1]
		sd_mmc_cards[slot].high_speed = 0;
  402678:	79fa      	ldrb	r2, [r7, #7]
  40267a:	491b      	ldr	r1, [pc, #108]	; (4026e8 <sd_mmc_select_slot+0x170>)
  40267c:	4613      	mov	r3, r2
  40267e:	00db      	lsls	r3, r3, #3
  402680:	4413      	add	r3, r2
  402682:	009b      	lsls	r3, r3, #2
  402684:	440b      	add	r3, r1
  402686:	3320      	adds	r3, #32
  402688:	2200      	movs	r2, #0
  40268a:	709a      	strb	r2, [r3, #2]
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40268c:	79fa      	ldrb	r2, [r7, #7]
  40268e:	4916      	ldr	r1, [pc, #88]	; (4026e8 <sd_mmc_select_slot+0x170>)
  402690:	4613      	mov	r3, r2
  402692:	00db      	lsls	r3, r3, #3
  402694:	4413      	add	r3, r2
  402696:	009b      	lsls	r3, r3, #2
  402698:	440b      	add	r3, r1
  40269a:	3308      	adds	r3, #8
  40269c:	799b      	ldrb	r3, [r3, #6]
  40269e:	2b03      	cmp	r3, #3
  4026a0:	d101      	bne.n	4026a6 <sd_mmc_select_slot+0x12e>
		return SD_MMC_ERR_UNUSABLE;
  4026a2:	2303      	movs	r3, #3
  4026a4:	e01b      	b.n	4026de <sd_mmc_select_slot+0x166>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  4026a6:	4b16      	ldr	r3, [pc, #88]	; (402700 <sd_mmc_select_slot+0x188>)
  4026a8:	79fa      	ldrb	r2, [r7, #7]
  4026aa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4026ac:	79fa      	ldrb	r2, [r7, #7]
  4026ae:	4613      	mov	r3, r2
  4026b0:	00db      	lsls	r3, r3, #3
  4026b2:	4413      	add	r3, r2
  4026b4:	009b      	lsls	r3, r3, #2
  4026b6:	4a0c      	ldr	r2, [pc, #48]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4026b8:	441a      	add	r2, r3
  4026ba:	4b12      	ldr	r3, [pc, #72]	; (402704 <sd_mmc_select_slot+0x18c>)
  4026bc:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
  4026be:	4b12      	ldr	r3, [pc, #72]	; (402708 <sd_mmc_select_slot+0x190>)
  4026c0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  4026c2:	79fa      	ldrb	r2, [r7, #7]
  4026c4:	4908      	ldr	r1, [pc, #32]	; (4026e8 <sd_mmc_select_slot+0x170>)
  4026c6:	4613      	mov	r3, r2
  4026c8:	00db      	lsls	r3, r3, #3
  4026ca:	4413      	add	r3, r2
  4026cc:	009b      	lsls	r3, r3, #2
  4026ce:	440b      	add	r3, r1
  4026d0:	3308      	adds	r3, #8
  4026d2:	799b      	ldrb	r3, [r3, #6]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4026d4:	2b02      	cmp	r3, #2
  4026d6:	bf14      	ite	ne
  4026d8:	2300      	movne	r3, #0
  4026da:	2301      	moveq	r3, #1
  4026dc:	b2db      	uxtb	r3, r3
}
  4026de:	4618      	mov	r0, r3
  4026e0:	3708      	adds	r7, #8
  4026e2:	46bd      	mov	sp, r7
  4026e4:	bd80      	pop	{r7, pc}
  4026e6:	bf00      	nop
  4026e8:	2000001c 	.word	0x2000001c
  4026ec:	00401b71 	.word	0x00401b71
  4026f0:	00401ccd 	.word	0x00401ccd
  4026f4:	00401bc1 	.word	0x00401bc1
  4026f8:	00401c8d 	.word	0x00401c8d
  4026fc:	00061a80 	.word	0x00061a80
  402700:	200016fd 	.word	0x200016fd
  402704:	20001700 	.word	0x20001700
  402708:	0040270d 	.word	0x0040270d

0040270c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40270c:	b598      	push	{r3, r4, r7, lr}
  40270e:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  402710:	4b09      	ldr	r3, [pc, #36]	; (402738 <sd_mmc_configure_slot+0x2c>)
  402712:	7818      	ldrb	r0, [r3, #0]
  402714:	4b09      	ldr	r3, [pc, #36]	; (40273c <sd_mmc_configure_slot+0x30>)
  402716:	681b      	ldr	r3, [r3, #0]
  402718:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  40271a:	4b08      	ldr	r3, [pc, #32]	; (40273c <sd_mmc_configure_slot+0x30>)
  40271c:	681b      	ldr	r3, [r3, #0]
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40271e:	7c5a      	ldrb	r2, [r3, #17]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  402720:	4b06      	ldr	r3, [pc, #24]	; (40273c <sd_mmc_configure_slot+0x30>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  402728:	2b00      	cmp	r3, #0
  40272a:	bf0c      	ite	eq
  40272c:	2300      	moveq	r3, #0
  40272e:	2301      	movne	r3, #1
  402730:	b2db      	uxtb	r3, r3
  402732:	4c03      	ldr	r4, [pc, #12]	; (402740 <sd_mmc_configure_slot+0x34>)
  402734:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
  402736:	bd98      	pop	{r3, r4, r7, pc}
  402738:	200016fd 	.word	0x200016fd
  40273c:	20001700 	.word	0x20001700
  402740:	004038b1 	.word	0x004038b1

00402744 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  402744:	b580      	push	{r7, lr}
  402746:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  402748:	4b04      	ldr	r3, [pc, #16]	; (40275c <sd_mmc_deselect_slot+0x18>)
  40274a:	781b      	ldrb	r3, [r3, #0]
  40274c:	2b00      	cmp	r3, #0
  40274e:	d104      	bne.n	40275a <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  402750:	4b02      	ldr	r3, [pc, #8]	; (40275c <sd_mmc_deselect_slot+0x18>)
  402752:	781b      	ldrb	r3, [r3, #0]
  402754:	4618      	mov	r0, r3
  402756:	4b02      	ldr	r3, [pc, #8]	; (402760 <sd_mmc_deselect_slot+0x1c>)
  402758:	4798      	blx	r3
	}
}
  40275a:	bd80      	pop	{r7, pc}
  40275c:	200016fd 	.word	0x200016fd
  402760:	00403945 	.word	0x00403945

00402764 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  402764:	b590      	push	{r4, r7, lr}
  402766:	b083      	sub	sp, #12
  402768:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
  40276a:	2300      	movs	r3, #0
  40276c:	71fb      	strb	r3, [r7, #7]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  40276e:	4b7d      	ldr	r3, [pc, #500]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402770:	681b      	ldr	r3, [r3, #0]
  402772:	2201      	movs	r2, #1
  402774:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  402776:	4b7b      	ldr	r3, [pc, #492]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402778:	681b      	ldr	r3, [r3, #0]
  40277a:	2200      	movs	r2, #0
  40277c:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
  40277e:	4b79      	ldr	r3, [pc, #484]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402780:	681b      	ldr	r3, [r3, #0]
  402782:	2200      	movs	r2, #0
  402784:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  402786:	4b78      	ldr	r3, [pc, #480]	; (402968 <sd_mmc_mci_card_init+0x204>)
  402788:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40278a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40278e:	2100      	movs	r1, #0
  402790:	4b76      	ldr	r3, [pc, #472]	; (40296c <sd_mmc_mci_card_init+0x208>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	f083 0301 	eor.w	r3, r3, #1
  40279a:	b2db      	uxtb	r3, r3
  40279c:	2b00      	cmp	r3, #0
  40279e:	d001      	beq.n	4027a4 <sd_mmc_mci_card_init+0x40>
		return false;
  4027a0:	2300      	movs	r3, #0
  4027a2:	e0da      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	}
	if (!sd_cmd8(&v2)) {
  4027a4:	1dfb      	adds	r3, r7, #7
  4027a6:	4618      	mov	r0, r3
  4027a8:	4b71      	ldr	r3, [pc, #452]	; (402970 <sd_mmc_mci_card_init+0x20c>)
  4027aa:	4798      	blx	r3
  4027ac:	4603      	mov	r3, r0
  4027ae:	f083 0301 	eor.w	r3, r3, #1
  4027b2:	b2db      	uxtb	r3, r3
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	d001      	beq.n	4027bc <sd_mmc_mci_card_init+0x58>
		return false;
  4027b8:	2300      	movs	r3, #0
  4027ba:	e0ce      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  4027bc:	4b6d      	ldr	r3, [pc, #436]	; (402974 <sd_mmc_mci_card_init+0x210>)
  4027be:	4798      	blx	r3
  4027c0:	4603      	mov	r3, r0
  4027c2:	f083 0301 	eor.w	r3, r3, #1
  4027c6:	b2db      	uxtb	r3, r3
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d001      	beq.n	4027d0 <sd_mmc_mci_card_init+0x6c>
		return false;
  4027cc:	2300      	movs	r3, #0
  4027ce:	e0c4      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4027d0:	4b64      	ldr	r3, [pc, #400]	; (402964 <sd_mmc_mci_card_init+0x200>)
  4027d2:	681b      	ldr	r3, [r3, #0]
  4027d4:	7bdb      	ldrb	r3, [r3, #15]
  4027d6:	f003 0301 	and.w	r3, r3, #1
  4027da:	2b00      	cmp	r3, #0
  4027dc:	d011      	beq.n	402802 <sd_mmc_mci_card_init+0x9e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  4027de:	79fb      	ldrb	r3, [r7, #7]
  4027e0:	4618      	mov	r0, r3
  4027e2:	4b65      	ldr	r3, [pc, #404]	; (402978 <sd_mmc_mci_card_init+0x214>)
  4027e4:	4798      	blx	r3
  4027e6:	4603      	mov	r3, r0
  4027e8:	f083 0301 	eor.w	r3, r3, #1
  4027ec:	b2db      	uxtb	r3, r3
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d007      	beq.n	402802 <sd_mmc_mci_card_init+0x9e>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  4027f2:	4b5c      	ldr	r3, [pc, #368]	; (402964 <sd_mmc_mci_card_init+0x200>)
  4027f4:	681b      	ldr	r3, [r3, #0]
  4027f6:	2202      	movs	r2, #2
  4027f8:	73da      	strb	r2, [r3, #15]
			return sd_mmc_mci_install_mmc();
  4027fa:	4b60      	ldr	r3, [pc, #384]	; (40297c <sd_mmc_mci_card_init+0x218>)
  4027fc:	4798      	blx	r3
  4027fe:	4603      	mov	r3, r0
  402800:	e0ab      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  402802:	4b58      	ldr	r3, [pc, #352]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402804:	681b      	ldr	r3, [r3, #0]
  402806:	7bdb      	ldrb	r3, [r3, #15]
  402808:	f003 0301 	and.w	r3, r3, #1
  40280c:	2b00      	cmp	r3, #0
  40280e:	d00c      	beq.n	40282a <sd_mmc_mci_card_init+0xc6>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  402810:	f645 3002 	movw	r0, #23298	; 0x5b02
  402814:	2100      	movs	r1, #0
  402816:	4b55      	ldr	r3, [pc, #340]	; (40296c <sd_mmc_mci_card_init+0x208>)
  402818:	4798      	blx	r3
  40281a:	4603      	mov	r3, r0
  40281c:	f083 0301 	eor.w	r3, r3, #1
  402820:	b2db      	uxtb	r3, r3
  402822:	2b00      	cmp	r3, #0
  402824:	d001      	beq.n	40282a <sd_mmc_mci_card_init+0xc6>
			return false;
  402826:	2300      	movs	r3, #0
  402828:	e097      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40282a:	f245 1003 	movw	r0, #20739	; 0x5103
  40282e:	2100      	movs	r1, #0
  402830:	4b4e      	ldr	r3, [pc, #312]	; (40296c <sd_mmc_mci_card_init+0x208>)
  402832:	4798      	blx	r3
  402834:	4603      	mov	r3, r0
  402836:	f083 0301 	eor.w	r3, r3, #1
  40283a:	b2db      	uxtb	r3, r3
  40283c:	2b00      	cmp	r3, #0
  40283e:	d001      	beq.n	402844 <sd_mmc_mci_card_init+0xe0>
		return false;
  402840:	2300      	movs	r3, #0
  402842:	e08a      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  402844:	4b47      	ldr	r3, [pc, #284]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402846:	681c      	ldr	r4, [r3, #0]
  402848:	4b4d      	ldr	r3, [pc, #308]	; (402980 <sd_mmc_mci_card_init+0x21c>)
  40284a:	4798      	blx	r3
  40284c:	4603      	mov	r3, r0
  40284e:	0c1b      	lsrs	r3, r3, #16
  402850:	b29b      	uxth	r3, r3
  402852:	81a3      	strh	r3, [r4, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  402854:	4b43      	ldr	r3, [pc, #268]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402856:	681b      	ldr	r3, [r3, #0]
  402858:	7bdb      	ldrb	r3, [r3, #15]
  40285a:	f003 0301 	and.w	r3, r3, #1
  40285e:	2b00      	cmp	r3, #0
  402860:	d00b      	beq.n	40287a <sd_mmc_mci_card_init+0x116>
		if (!sd_mmc_cmd9_mci()) {
  402862:	4b48      	ldr	r3, [pc, #288]	; (402984 <sd_mmc_mci_card_init+0x220>)
  402864:	4798      	blx	r3
  402866:	4603      	mov	r3, r0
  402868:	f083 0301 	eor.w	r3, r3, #1
  40286c:	b2db      	uxtb	r3, r3
  40286e:	2b00      	cmp	r3, #0
  402870:	d001      	beq.n	402876 <sd_mmc_mci_card_init+0x112>
			return false;
  402872:	2300      	movs	r3, #0
  402874:	e071      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
		}
		sd_decode_csd();
  402876:	4b44      	ldr	r3, [pc, #272]	; (402988 <sd_mmc_mci_card_init+0x224>)
  402878:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  40287a:	4b3a      	ldr	r3, [pc, #232]	; (402964 <sd_mmc_mci_card_init+0x200>)
  40287c:	681b      	ldr	r3, [r3, #0]
  40287e:	899b      	ldrh	r3, [r3, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  402880:	041b      	lsls	r3, r3, #16
  402882:	f243 1007 	movw	r0, #12551	; 0x3107
  402886:	4619      	mov	r1, r3
  402888:	4b38      	ldr	r3, [pc, #224]	; (40296c <sd_mmc_mci_card_init+0x208>)
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	f083 0301 	eor.w	r3, r3, #1
  402892:	b2db      	uxtb	r3, r3
  402894:	2b00      	cmp	r3, #0
  402896:	d001      	beq.n	40289c <sd_mmc_mci_card_init+0x138>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  402898:	2300      	movs	r3, #0
  40289a:	e05e      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40289c:	4b31      	ldr	r3, [pc, #196]	; (402964 <sd_mmc_mci_card_init+0x200>)
  40289e:	681b      	ldr	r3, [r3, #0]
  4028a0:	7bdb      	ldrb	r3, [r3, #15]
  4028a2:	f003 0301 	and.w	r3, r3, #1
  4028a6:	2b00      	cmp	r3, #0
  4028a8:	d009      	beq.n	4028be <sd_mmc_mci_card_init+0x15a>
		if (!sd_acmd51()) {
  4028aa:	4b38      	ldr	r3, [pc, #224]	; (40298c <sd_mmc_mci_card_init+0x228>)
  4028ac:	4798      	blx	r3
  4028ae:	4603      	mov	r3, r0
  4028b0:	f083 0301 	eor.w	r3, r3, #1
  4028b4:	b2db      	uxtb	r3, r3
  4028b6:	2b00      	cmp	r3, #0
  4028b8:	d001      	beq.n	4028be <sd_mmc_mci_card_init+0x15a>
			return false;
  4028ba:	2300      	movs	r3, #0
  4028bc:	e04d      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4028be:	4b34      	ldr	r3, [pc, #208]	; (402990 <sd_mmc_mci_card_init+0x22c>)
  4028c0:	781b      	ldrb	r3, [r3, #0]
  4028c2:	4618      	mov	r0, r3
  4028c4:	4b33      	ldr	r3, [pc, #204]	; (402994 <sd_mmc_mci_card_init+0x230>)
  4028c6:	4798      	blx	r3
  4028c8:	4603      	mov	r3, r0
  4028ca:	2b03      	cmp	r3, #3
  4028cc:	d912      	bls.n	4028f4 <sd_mmc_mci_card_init+0x190>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4028ce:	4b25      	ldr	r3, [pc, #148]	; (402964 <sd_mmc_mci_card_init+0x200>)
  4028d0:	681b      	ldr	r3, [r3, #0]
  4028d2:	7bdb      	ldrb	r3, [r3, #15]
  4028d4:	f003 0301 	and.w	r3, r3, #1
  4028d8:	2b00      	cmp	r3, #0
  4028da:	d009      	beq.n	4028f0 <sd_mmc_mci_card_init+0x18c>
			if (!sd_acmd6()) {
  4028dc:	4b2e      	ldr	r3, [pc, #184]	; (402998 <sd_mmc_mci_card_init+0x234>)
  4028de:	4798      	blx	r3
  4028e0:	4603      	mov	r3, r0
  4028e2:	f083 0301 	eor.w	r3, r3, #1
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	2b00      	cmp	r3, #0
  4028ea:	d001      	beq.n	4028f0 <sd_mmc_mci_card_init+0x18c>
				return false;
  4028ec:	2300      	movs	r3, #0
  4028ee:	e034      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  4028f0:	4b2a      	ldr	r3, [pc, #168]	; (40299c <sd_mmc_mci_card_init+0x238>)
  4028f2:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  4028f4:	4b2a      	ldr	r3, [pc, #168]	; (4029a0 <sd_mmc_mci_card_init+0x23c>)
  4028f6:	4798      	blx	r3
  4028f8:	4603      	mov	r3, r0
  4028fa:	2b00      	cmp	r3, #0
  4028fc:	d017      	beq.n	40292e <sd_mmc_mci_card_init+0x1ca>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4028fe:	4b19      	ldr	r3, [pc, #100]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402900:	681b      	ldr	r3, [r3, #0]
  402902:	7bdb      	ldrb	r3, [r3, #15]
  402904:	f003 0301 	and.w	r3, r3, #1
  402908:	2b00      	cmp	r3, #0
  40290a:	d00e      	beq.n	40292a <sd_mmc_mci_card_init+0x1c6>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  40290c:	4b15      	ldr	r3, [pc, #84]	; (402964 <sd_mmc_mci_card_init+0x200>)
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	7c1b      	ldrb	r3, [r3, #16]
  402912:	2b10      	cmp	r3, #16
  402914:	d909      	bls.n	40292a <sd_mmc_mci_card_init+0x1c6>
				if (!sd_cm6_set_high_speed()) {
  402916:	4b23      	ldr	r3, [pc, #140]	; (4029a4 <sd_mmc_mci_card_init+0x240>)
  402918:	4798      	blx	r3
  40291a:	4603      	mov	r3, r0
  40291c:	f083 0301 	eor.w	r3, r3, #1
  402920:	b2db      	uxtb	r3, r3
  402922:	2b00      	cmp	r3, #0
  402924:	d001      	beq.n	40292a <sd_mmc_mci_card_init+0x1c6>
					return false;
  402926:	2300      	movs	r3, #0
  402928:	e017      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  40292a:	4b1c      	ldr	r3, [pc, #112]	; (40299c <sd_mmc_mci_card_init+0x238>)
  40292c:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40292e:	4b0d      	ldr	r3, [pc, #52]	; (402964 <sd_mmc_mci_card_init+0x200>)
  402930:	681b      	ldr	r3, [r3, #0]
  402932:	7bdb      	ldrb	r3, [r3, #15]
  402934:	f003 0301 	and.w	r3, r3, #1
  402938:	2b00      	cmp	r3, #0
  40293a:	d00d      	beq.n	402958 <sd_mmc_mci_card_init+0x1f4>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40293c:	f241 1010 	movw	r0, #4368	; 0x1110
  402940:	f44f 7100 	mov.w	r1, #512	; 0x200
  402944:	4b09      	ldr	r3, [pc, #36]	; (40296c <sd_mmc_mci_card_init+0x208>)
  402946:	4798      	blx	r3
  402948:	4603      	mov	r3, r0
  40294a:	f083 0301 	eor.w	r3, r3, #1
  40294e:	b2db      	uxtb	r3, r3
  402950:	2b00      	cmp	r3, #0
  402952:	d001      	beq.n	402958 <sd_mmc_mci_card_init+0x1f4>
			return false;
  402954:	2300      	movs	r3, #0
  402956:	e000      	b.n	40295a <sd_mmc_mci_card_init+0x1f6>
		}
	}
	return true;
  402958:	2301      	movs	r3, #1
}
  40295a:	4618      	mov	r0, r3
  40295c:	370c      	adds	r7, #12
  40295e:	46bd      	mov	sp, r7
  402960:	bd90      	pop	{r4, r7, pc}
  402962:	bf00      	nop
  402964:	20001700 	.word	0x20001700
  402968:	00403959 	.word	0x00403959
  40296c:	00403999 	.word	0x00403999
  402970:	00401fed 	.word	0x00401fed
  402974:	00401e1d 	.word	0x00401e1d
  402978:	00401d71 	.word	0x00401d71
  40297c:	004029a9 	.word	0x004029a9
  402980:	004039e5 	.word	0x004039e5
  402984:	0040214d 	.word	0x0040214d
  402988:	004022c9 	.word	0x004022c9
  40298c:	00402479 	.word	0x00402479
  402990:	200016fd 	.word	0x200016fd
  402994:	0040387d 	.word	0x0040387d
  402998:	00402421 	.word	0x00402421
  40299c:	0040270d 	.word	0x0040270d
  4029a0:	004038a1 	.word	0x004038a1
  4029a4:	00401e2d 	.word	0x00401e2d

004029a8 <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  4029a8:	b580      	push	{r7, lr}
  4029aa:	b082      	sub	sp, #8
  4029ac:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4029ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4029b2:	2100      	movs	r1, #0
  4029b4:	4b56      	ldr	r3, [pc, #344]	; (402b10 <sd_mmc_mci_install_mmc+0x168>)
  4029b6:	4798      	blx	r3
  4029b8:	4603      	mov	r3, r0
  4029ba:	f083 0301 	eor.w	r3, r3, #1
  4029be:	b2db      	uxtb	r3, r3
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d001      	beq.n	4029c8 <sd_mmc_mci_install_mmc+0x20>
		return false;
  4029c4:	2300      	movs	r3, #0
  4029c6:	e09f      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  4029c8:	4b52      	ldr	r3, [pc, #328]	; (402b14 <sd_mmc_mci_install_mmc+0x16c>)
  4029ca:	4798      	blx	r3
  4029cc:	4603      	mov	r3, r0
  4029ce:	f083 0301 	eor.w	r3, r3, #1
  4029d2:	b2db      	uxtb	r3, r3
  4029d4:	2b00      	cmp	r3, #0
  4029d6:	d001      	beq.n	4029dc <sd_mmc_mci_install_mmc+0x34>
		return false;
  4029d8:	2300      	movs	r3, #0
  4029da:	e095      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4029dc:	f645 3002 	movw	r0, #23298	; 0x5b02
  4029e0:	2100      	movs	r1, #0
  4029e2:	4b4b      	ldr	r3, [pc, #300]	; (402b10 <sd_mmc_mci_install_mmc+0x168>)
  4029e4:	4798      	blx	r3
  4029e6:	4603      	mov	r3, r0
  4029e8:	f083 0301 	eor.w	r3, r3, #1
  4029ec:	b2db      	uxtb	r3, r3
  4029ee:	2b00      	cmp	r3, #0
  4029f0:	d001      	beq.n	4029f6 <sd_mmc_mci_install_mmc+0x4e>
		return false;
  4029f2:	2300      	movs	r3, #0
  4029f4:	e088      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4029f6:	4b48      	ldr	r3, [pc, #288]	; (402b18 <sd_mmc_mci_install_mmc+0x170>)
  4029f8:	681b      	ldr	r3, [r3, #0]
  4029fa:	2201      	movs	r2, #1
  4029fc:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4029fe:	4b46      	ldr	r3, [pc, #280]	; (402b18 <sd_mmc_mci_install_mmc+0x170>)
  402a00:	681b      	ldr	r3, [r3, #0]
  402a02:	899b      	ldrh	r3, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  402a04:	041b      	lsls	r3, r3, #16
  402a06:	f241 1003 	movw	r0, #4355	; 0x1103
  402a0a:	4619      	mov	r1, r3
  402a0c:	4b40      	ldr	r3, [pc, #256]	; (402b10 <sd_mmc_mci_install_mmc+0x168>)
  402a0e:	4798      	blx	r3
  402a10:	4603      	mov	r3, r0
  402a12:	f083 0301 	eor.w	r3, r3, #1
  402a16:	b2db      	uxtb	r3, r3
  402a18:	2b00      	cmp	r3, #0
  402a1a:	d001      	beq.n	402a20 <sd_mmc_mci_install_mmc+0x78>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  402a1c:	2300      	movs	r3, #0
  402a1e:	e073      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  402a20:	4b3e      	ldr	r3, [pc, #248]	; (402b1c <sd_mmc_mci_install_mmc+0x174>)
  402a22:	4798      	blx	r3
  402a24:	4603      	mov	r3, r0
  402a26:	f083 0301 	eor.w	r3, r3, #1
  402a2a:	b2db      	uxtb	r3, r3
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	d001      	beq.n	402a34 <sd_mmc_mci_install_mmc+0x8c>
		return false;
  402a30:	2300      	movs	r3, #0
  402a32:	e069      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  402a34:	4b3a      	ldr	r3, [pc, #232]	; (402b20 <sd_mmc_mci_install_mmc+0x178>)
  402a36:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  402a38:	4b37      	ldr	r3, [pc, #220]	; (402b18 <sd_mmc_mci_install_mmc+0x170>)
  402a3a:	681b      	ldr	r3, [r3, #0]
  402a3c:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  402a3e:	041b      	lsls	r3, r3, #16
  402a40:	f243 1007 	movw	r0, #12551	; 0x3107
  402a44:	4619      	mov	r1, r3
  402a46:	4b32      	ldr	r3, [pc, #200]	; (402b10 <sd_mmc_mci_install_mmc+0x168>)
  402a48:	4798      	blx	r3
  402a4a:	4603      	mov	r3, r0
  402a4c:	f083 0301 	eor.w	r3, r3, #1
  402a50:	b2db      	uxtb	r3, r3
  402a52:	2b00      	cmp	r3, #0
  402a54:	d001      	beq.n	402a5a <sd_mmc_mci_install_mmc+0xb2>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  402a56:	2300      	movs	r3, #0
  402a58:	e056      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  402a5a:	4b2f      	ldr	r3, [pc, #188]	; (402b18 <sd_mmc_mci_install_mmc+0x170>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	7c1b      	ldrb	r3, [r3, #16]
  402a60:	2b3f      	cmp	r3, #63	; 0x3f
  402a62:	d93b      	bls.n	402adc <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  402a64:	1dbb      	adds	r3, r7, #6
  402a66:	4618      	mov	r0, r3
  402a68:	4b2e      	ldr	r3, [pc, #184]	; (402b24 <sd_mmc_mci_install_mmc+0x17c>)
  402a6a:	4798      	blx	r3
  402a6c:	4603      	mov	r3, r0
  402a6e:	f083 0301 	eor.w	r3, r3, #1
  402a72:	b2db      	uxtb	r3, r3
  402a74:	2b00      	cmp	r3, #0
  402a76:	d001      	beq.n	402a7c <sd_mmc_mci_install_mmc+0xd4>
			return false;
  402a78:	2300      	movs	r3, #0
  402a7a:	e045      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  402a7c:	4b2a      	ldr	r3, [pc, #168]	; (402b28 <sd_mmc_mci_install_mmc+0x180>)
  402a7e:	781b      	ldrb	r3, [r3, #0]
  402a80:	4618      	mov	r0, r3
  402a82:	4b2a      	ldr	r3, [pc, #168]	; (402b2c <sd_mmc_mci_install_mmc+0x184>)
  402a84:	4798      	blx	r3
  402a86:	4603      	mov	r3, r0
  402a88:	2b03      	cmp	r3, #3
  402a8a:	d912      	bls.n	402ab2 <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  402a8c:	4b26      	ldr	r3, [pc, #152]	; (402b28 <sd_mmc_mci_install_mmc+0x180>)
  402a8e:	781b      	ldrb	r3, [r3, #0]
  402a90:	4618      	mov	r0, r3
  402a92:	4b26      	ldr	r3, [pc, #152]	; (402b2c <sd_mmc_mci_install_mmc+0x184>)
  402a94:	4798      	blx	r3
  402a96:	4603      	mov	r3, r0
  402a98:	4618      	mov	r0, r3
  402a9a:	4b25      	ldr	r3, [pc, #148]	; (402b30 <sd_mmc_mci_install_mmc+0x188>)
  402a9c:	4798      	blx	r3
  402a9e:	4603      	mov	r3, r0
  402aa0:	f083 0301 	eor.w	r3, r3, #1
  402aa4:	b2db      	uxtb	r3, r3
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	d001      	beq.n	402aae <sd_mmc_mci_install_mmc+0x106>
				return false;
  402aaa:	2300      	movs	r3, #0
  402aac:	e02c      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  402aae:	4b21      	ldr	r3, [pc, #132]	; (402b34 <sd_mmc_mci_install_mmc+0x18c>)
  402ab0:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  402ab2:	4b21      	ldr	r3, [pc, #132]	; (402b38 <sd_mmc_mci_install_mmc+0x190>)
  402ab4:	4798      	blx	r3
  402ab6:	4603      	mov	r3, r0
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d011      	beq.n	402ae0 <sd_mmc_mci_install_mmc+0x138>
  402abc:	79bb      	ldrb	r3, [r7, #6]
  402abe:	2b00      	cmp	r3, #0
  402ac0:	d00e      	beq.n	402ae0 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  402ac2:	4b1e      	ldr	r3, [pc, #120]	; (402b3c <sd_mmc_mci_install_mmc+0x194>)
  402ac4:	4798      	blx	r3
  402ac6:	4603      	mov	r3, r0
  402ac8:	f083 0301 	eor.w	r3, r3, #1
  402acc:	b2db      	uxtb	r3, r3
  402ace:	2b00      	cmp	r3, #0
  402ad0:	d001      	beq.n	402ad6 <sd_mmc_mci_install_mmc+0x12e>
				return false;
  402ad2:	2300      	movs	r3, #0
  402ad4:	e018      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  402ad6:	4b17      	ldr	r3, [pc, #92]	; (402b34 <sd_mmc_mci_install_mmc+0x18c>)
  402ad8:	4798      	blx	r3
  402ada:	e001      	b.n	402ae0 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  402adc:	4b15      	ldr	r3, [pc, #84]	; (402b34 <sd_mmc_mci_install_mmc+0x18c>)
  402ade:	4798      	blx	r3
	}

	uint8_t retry = 10;
  402ae0:	230a      	movs	r3, #10
  402ae2:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  402ae4:	e00a      	b.n	402afc <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  402ae6:	f241 1010 	movw	r0, #4368	; 0x1110
  402aea:	f44f 7100 	mov.w	r1, #512	; 0x200
  402aee:	4b08      	ldr	r3, [pc, #32]	; (402b10 <sd_mmc_mci_install_mmc+0x168>)
  402af0:	4798      	blx	r3
  402af2:	4603      	mov	r3, r0
  402af4:	2b00      	cmp	r3, #0
  402af6:	d001      	beq.n	402afc <sd_mmc_mci_install_mmc+0x154>
			return true;
  402af8:	2301      	movs	r3, #1
  402afa:	e005      	b.n	402b08 <sd_mmc_mci_install_mmc+0x160>
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  402afc:	79fb      	ldrb	r3, [r7, #7]
  402afe:	1e5a      	subs	r2, r3, #1
  402b00:	71fa      	strb	r2, [r7, #7]
  402b02:	2b00      	cmp	r3, #0
  402b04:	d1ef      	bne.n	402ae6 <sd_mmc_mci_install_mmc+0x13e>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
  402b06:	2300      	movs	r3, #0
}
  402b08:	4618      	mov	r0, r3
  402b0a:	3708      	adds	r7, #8
  402b0c:	46bd      	mov	sp, r7
  402b0e:	bd80      	pop	{r7, pc}
  402b10:	00403999 	.word	0x00403999
  402b14:	00401cf1 	.word	0x00401cf1
  402b18:	20001700 	.word	0x20001700
  402b1c:	0040214d 	.word	0x0040214d
  402b20:	00402191 	.word	0x00402191
  402b24:	00402051 	.word	0x00402051
  402b28:	200016fd 	.word	0x200016fd
  402b2c:	0040387d 	.word	0x0040387d
  402b30:	00401f15 	.word	0x00401f15
  402b34:	0040270d 	.word	0x0040270d
  402b38:	004038a1 	.word	0x004038a1
  402b3c:	00401f91 	.word	0x00401f91

00402b40 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  402b40:	b580      	push	{r7, lr}
  402b42:	b082      	sub	sp, #8
  402b44:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  402b46:	2300      	movs	r3, #0
  402b48:	71fb      	strb	r3, [r7, #7]
  402b4a:	e00c      	b.n	402b66 <sd_mmc_init+0x26>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  402b4c:	79fa      	ldrb	r2, [r7, #7]
  402b4e:	490b      	ldr	r1, [pc, #44]	; (402b7c <sd_mmc_init+0x3c>)
  402b50:	4613      	mov	r3, r2
  402b52:	00db      	lsls	r3, r3, #3
  402b54:	4413      	add	r3, r2
  402b56:	009b      	lsls	r3, r3, #2
  402b58:	440b      	add	r3, r1
  402b5a:	3308      	adds	r3, #8
  402b5c:	2204      	movs	r2, #4
  402b5e:	719a      	strb	r2, [r3, #6]
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  402b60:	79fb      	ldrb	r3, [r7, #7]
  402b62:	3301      	adds	r3, #1
  402b64:	71fb      	strb	r3, [r7, #7]
  402b66:	79fb      	ldrb	r3, [r7, #7]
  402b68:	2b00      	cmp	r3, #0
  402b6a:	d0ef      	beq.n	402b4c <sd_mmc_init+0xc>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  402b6c:	4b04      	ldr	r3, [pc, #16]	; (402b80 <sd_mmc_init+0x40>)
  402b6e:	22ff      	movs	r2, #255	; 0xff
  402b70:	701a      	strb	r2, [r3, #0]
	driver_init();
  402b72:	4b04      	ldr	r3, [pc, #16]	; (402b84 <sd_mmc_init+0x44>)
  402b74:	4798      	blx	r3
}
  402b76:	3708      	adds	r7, #8
  402b78:	46bd      	mov	sp, r7
  402b7a:	bd80      	pop	{r7, pc}
  402b7c:	2000001c 	.word	0x2000001c
  402b80:	200016fd 	.word	0x200016fd
  402b84:	00403841 	.word	0x00403841

00402b88 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  402b88:	b580      	push	{r7, lr}
  402b8a:	b084      	sub	sp, #16
  402b8c:	af00      	add	r7, sp, #0
  402b8e:	4603      	mov	r3, r0
  402b90:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  402b92:	79fb      	ldrb	r3, [r7, #7]
  402b94:	4618      	mov	r0, r3
  402b96:	4b11      	ldr	r3, [pc, #68]	; (402bdc <sd_mmc_check+0x54>)
  402b98:	4798      	blx	r3
  402b9a:	4603      	mov	r3, r0
  402b9c:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  402b9e:	7bfb      	ldrb	r3, [r7, #15]
  402ba0:	2b01      	cmp	r3, #1
  402ba2:	d003      	beq.n	402bac <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  402ba4:	4b0e      	ldr	r3, [pc, #56]	; (402be0 <sd_mmc_check+0x58>)
  402ba6:	4798      	blx	r3
		return sd_mmc_err;
  402ba8:	7bfb      	ldrb	r3, [r7, #15]
  402baa:	e013      	b.n	402bd4 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	//if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			//: sd_mmc_mci_card_init())
	if(sd_mmc_mci_card_init()) 
  402bac:	4b0d      	ldr	r3, [pc, #52]	; (402be4 <sd_mmc_check+0x5c>)
  402bae:	4798      	blx	r3
  402bb0:	4603      	mov	r3, r0
  402bb2:	2b00      	cmp	r3, #0
  402bb4:	d007      	beq.n	402bc6 <sd_mmc_check+0x3e>
	{
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  402bb6:	4b0c      	ldr	r3, [pc, #48]	; (402be8 <sd_mmc_check+0x60>)
  402bb8:	681b      	ldr	r3, [r3, #0]
  402bba:	2200      	movs	r2, #0
  402bbc:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  402bbe:	4b08      	ldr	r3, [pc, #32]	; (402be0 <sd_mmc_check+0x58>)
  402bc0:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  402bc2:	2301      	movs	r3, #1
  402bc4:	e006      	b.n	402bd4 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  402bc6:	4b08      	ldr	r3, [pc, #32]	; (402be8 <sd_mmc_check+0x60>)
  402bc8:	681b      	ldr	r3, [r3, #0]
  402bca:	2203      	movs	r2, #3
  402bcc:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
  402bce:	4b04      	ldr	r3, [pc, #16]	; (402be0 <sd_mmc_check+0x58>)
  402bd0:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  402bd2:	2303      	movs	r3, #3
}
  402bd4:	4618      	mov	r0, r3
  402bd6:	3710      	adds	r7, #16
  402bd8:	46bd      	mov	sp, r7
  402bda:	bd80      	pop	{r7, pc}
  402bdc:	00402579 	.word	0x00402579
  402be0:	00402745 	.word	0x00402745
  402be4:	00402765 	.word	0x00402765
  402be8:	20001700 	.word	0x20001700

00402bec <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  402bec:	b580      	push	{r7, lr}
  402bee:	b082      	sub	sp, #8
  402bf0:	af00      	add	r7, sp, #0
  402bf2:	4603      	mov	r3, r0
  402bf4:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  402bf6:	79fb      	ldrb	r3, [r7, #7]
  402bf8:	4618      	mov	r0, r3
  402bfa:	4b08      	ldr	r3, [pc, #32]	; (402c1c <sd_mmc_get_type+0x30>)
  402bfc:	4798      	blx	r3
  402bfe:	4603      	mov	r3, r0
  402c00:	2b00      	cmp	r3, #0
  402c02:	d001      	beq.n	402c08 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  402c04:	2300      	movs	r3, #0
  402c06:	e004      	b.n	402c12 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  402c08:	4b05      	ldr	r3, [pc, #20]	; (402c20 <sd_mmc_get_type+0x34>)
  402c0a:	4798      	blx	r3
	return sd_mmc_card->type;
  402c0c:	4b05      	ldr	r3, [pc, #20]	; (402c24 <sd_mmc_get_type+0x38>)
  402c0e:	681b      	ldr	r3, [r3, #0]
  402c10:	7bdb      	ldrb	r3, [r3, #15]
}
  402c12:	4618      	mov	r0, r3
  402c14:	3708      	adds	r7, #8
  402c16:	46bd      	mov	sp, r7
  402c18:	bd80      	pop	{r7, pc}
  402c1a:	bf00      	nop
  402c1c:	00402579 	.word	0x00402579
  402c20:	00402745 	.word	0x00402745
  402c24:	20001700 	.word	0x20001700

00402c28 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  402c28:	b580      	push	{r7, lr}
  402c2a:	b082      	sub	sp, #8
  402c2c:	af00      	add	r7, sp, #0
  402c2e:	4603      	mov	r3, r0
  402c30:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  402c32:	79fb      	ldrb	r3, [r7, #7]
  402c34:	4618      	mov	r0, r3
  402c36:	4b08      	ldr	r3, [pc, #32]	; (402c58 <sd_mmc_get_capacity+0x30>)
  402c38:	4798      	blx	r3
  402c3a:	4603      	mov	r3, r0
  402c3c:	2b00      	cmp	r3, #0
  402c3e:	d001      	beq.n	402c44 <sd_mmc_get_capacity+0x1c>
		return 0;
  402c40:	2300      	movs	r3, #0
  402c42:	e004      	b.n	402c4e <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
  402c44:	4b05      	ldr	r3, [pc, #20]	; (402c5c <sd_mmc_get_capacity+0x34>)
  402c46:	4798      	blx	r3
	return sd_mmc_card->capacity;
  402c48:	4b05      	ldr	r3, [pc, #20]	; (402c60 <sd_mmc_get_capacity+0x38>)
  402c4a:	681b      	ldr	r3, [r3, #0]
  402c4c:	685b      	ldr	r3, [r3, #4]
}
  402c4e:	4618      	mov	r0, r3
  402c50:	3708      	adds	r7, #8
  402c52:	46bd      	mov	sp, r7
  402c54:	bd80      	pop	{r7, pc}
  402c56:	bf00      	nop
  402c58:	00402579 	.word	0x00402579
  402c5c:	00402745 	.word	0x00402745
  402c60:	20001700 	.word	0x20001700

00402c64 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
  402c64:	b480      	push	{r7}
  402c66:	b083      	sub	sp, #12
  402c68:	af00      	add	r7, sp, #0
  402c6a:	4603      	mov	r3, r0
  402c6c:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
  402c6e:	2300      	movs	r3, #0
}
  402c70:	4618      	mov	r0, r3
  402c72:	370c      	adds	r7, #12
  402c74:	46bd      	mov	sp, r7
  402c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c7a:	4770      	bx	lr

00402c7c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  402c7c:	b590      	push	{r4, r7, lr}
  402c7e:	b089      	sub	sp, #36	; 0x24
  402c80:	af02      	add	r7, sp, #8
  402c82:	6039      	str	r1, [r7, #0]
  402c84:	4613      	mov	r3, r2
  402c86:	4602      	mov	r2, r0
  402c88:	71fa      	strb	r2, [r7, #7]
  402c8a:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  402c8c:	79fb      	ldrb	r3, [r7, #7]
  402c8e:	4618      	mov	r0, r3
  402c90:	4b29      	ldr	r3, [pc, #164]	; (402d38 <sd_mmc_init_read_blocks+0xbc>)
  402c92:	4798      	blx	r3
  402c94:	4603      	mov	r3, r0
  402c96:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  402c98:	7bfb      	ldrb	r3, [r7, #15]
  402c9a:	2b00      	cmp	r3, #0
  402c9c:	d001      	beq.n	402ca2 <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
  402c9e:	7bfb      	ldrb	r3, [r7, #15]
  402ca0:	e046      	b.n	402d30 <sd_mmc_init_read_blocks+0xb4>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  402ca2:	4b26      	ldr	r3, [pc, #152]	; (402d3c <sd_mmc_init_read_blocks+0xc0>)
  402ca4:	4798      	blx	r3
  402ca6:	4603      	mov	r3, r0
  402ca8:	f083 0301 	eor.w	r3, r3, #1
  402cac:	b2db      	uxtb	r3, r3
  402cae:	2b00      	cmp	r3, #0
  402cb0:	d003      	beq.n	402cba <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
  402cb2:	4b23      	ldr	r3, [pc, #140]	; (402d40 <sd_mmc_init_read_blocks+0xc4>)
  402cb4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  402cb6:	2305      	movs	r3, #5
  402cb8:	e03a      	b.n	402d30 <sd_mmc_init_read_blocks+0xb4>
	}

	if (nb_block > 1) {
  402cba:	88bb      	ldrh	r3, [r7, #4]
  402cbc:	2b01      	cmp	r3, #1
  402cbe:	d902      	bls.n	402cc6 <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  402cc0:	4b20      	ldr	r3, [pc, #128]	; (402d44 <sd_mmc_init_read_blocks+0xc8>)
  402cc2:	617b      	str	r3, [r7, #20]
  402cc4:	e001      	b.n	402cca <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  402cc6:	4b20      	ldr	r3, [pc, #128]	; (402d48 <sd_mmc_init_read_blocks+0xcc>)
  402cc8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  402cca:	4b20      	ldr	r3, [pc, #128]	; (402d4c <sd_mmc_init_read_blocks+0xd0>)
  402ccc:	681b      	ldr	r3, [r3, #0]
  402cce:	7bdb      	ldrb	r3, [r3, #15]
  402cd0:	f003 0308 	and.w	r3, r3, #8
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d002      	beq.n	402cde <sd_mmc_init_read_blocks+0x62>
		arg = start;
  402cd8:	683b      	ldr	r3, [r7, #0]
  402cda:	613b      	str	r3, [r7, #16]
  402cdc:	e002      	b.n	402ce4 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  402cde:	683b      	ldr	r3, [r7, #0]
  402ce0:	025b      	lsls	r3, r3, #9
  402ce2:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  402ce4:	88bb      	ldrh	r3, [r7, #4]
  402ce6:	2201      	movs	r2, #1
  402ce8:	9200      	str	r2, [sp, #0]
  402cea:	6978      	ldr	r0, [r7, #20]
  402cec:	6939      	ldr	r1, [r7, #16]
  402cee:	f44f 7200 	mov.w	r2, #512	; 0x200
  402cf2:	4c17      	ldr	r4, [pc, #92]	; (402d50 <sd_mmc_init_read_blocks+0xd4>)
  402cf4:	47a0      	blx	r4
  402cf6:	4603      	mov	r3, r0
  402cf8:	f083 0301 	eor.w	r3, r3, #1
  402cfc:	b2db      	uxtb	r3, r3
  402cfe:	2b00      	cmp	r3, #0
  402d00:	d003      	beq.n	402d0a <sd_mmc_init_read_blocks+0x8e>
		sd_mmc_deselect_slot();
  402d02:	4b0f      	ldr	r3, [pc, #60]	; (402d40 <sd_mmc_init_read_blocks+0xc4>)
  402d04:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  402d06:	2305      	movs	r3, #5
  402d08:	e012      	b.n	402d30 <sd_mmc_init_read_blocks+0xb4>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  402d0a:	4b12      	ldr	r3, [pc, #72]	; (402d54 <sd_mmc_init_read_blocks+0xd8>)
  402d0c:	4798      	blx	r3
  402d0e:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  402d10:	68ba      	ldr	r2, [r7, #8]
  402d12:	4b11      	ldr	r3, [pc, #68]	; (402d58 <sd_mmc_init_read_blocks+0xdc>)
  402d14:	4013      	ands	r3, r2
  402d16:	2b00      	cmp	r3, #0
  402d18:	d003      	beq.n	402d22 <sd_mmc_init_read_blocks+0xa6>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  402d1a:	4b09      	ldr	r3, [pc, #36]	; (402d40 <sd_mmc_init_read_blocks+0xc4>)
  402d1c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  402d1e:	2305      	movs	r3, #5
  402d20:	e006      	b.n	402d30 <sd_mmc_init_read_blocks+0xb4>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  402d22:	4b0e      	ldr	r3, [pc, #56]	; (402d5c <sd_mmc_init_read_blocks+0xe0>)
  402d24:	88ba      	ldrh	r2, [r7, #4]
  402d26:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  402d28:	4b0d      	ldr	r3, [pc, #52]	; (402d60 <sd_mmc_init_read_blocks+0xe4>)
  402d2a:	88ba      	ldrh	r2, [r7, #4]
  402d2c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  402d2e:	2300      	movs	r3, #0
}
  402d30:	4618      	mov	r0, r3
  402d32:	371c      	adds	r7, #28
  402d34:	46bd      	mov	sp, r7
  402d36:	bd90      	pop	{r4, r7, pc}
  402d38:	00402579 	.word	0x00402579
  402d3c:	004023b9 	.word	0x004023b9
  402d40:	00402745 	.word	0x00402745
  402d44:	00101112 	.word	0x00101112
  402d48:	00081111 	.word	0x00081111
  402d4c:	20001700 	.word	0x20001700
  402d50:	00403a65 	.word	0x00403a65
  402d54:	004039e5 	.word	0x004039e5
  402d58:	e4580000 	.word	0xe4580000
  402d5c:	20001706 	.word	0x20001706
  402d60:	20001704 	.word	0x20001704

00402d64 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  402d64:	b580      	push	{r7, lr}
  402d66:	b082      	sub	sp, #8
  402d68:	af00      	add	r7, sp, #0
  402d6a:	6078      	str	r0, [r7, #4]
  402d6c:	460b      	mov	r3, r1
  402d6e:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  402d70:	887b      	ldrh	r3, [r7, #2]
  402d72:	6878      	ldr	r0, [r7, #4]
  402d74:	4619      	mov	r1, r3
  402d76:	4b0c      	ldr	r3, [pc, #48]	; (402da8 <sd_mmc_start_read_blocks+0x44>)
  402d78:	4798      	blx	r3
  402d7a:	4603      	mov	r3, r0
  402d7c:	f083 0301 	eor.w	r3, r3, #1
  402d80:	b2db      	uxtb	r3, r3
  402d82:	2b00      	cmp	r3, #0
  402d84:	d004      	beq.n	402d90 <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  402d86:	4b09      	ldr	r3, [pc, #36]	; (402dac <sd_mmc_start_read_blocks+0x48>)
  402d88:	2200      	movs	r2, #0
  402d8a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  402d8c:	2305      	movs	r3, #5
  402d8e:	e007      	b.n	402da0 <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  402d90:	4b06      	ldr	r3, [pc, #24]	; (402dac <sd_mmc_start_read_blocks+0x48>)
  402d92:	881a      	ldrh	r2, [r3, #0]
  402d94:	887b      	ldrh	r3, [r7, #2]
  402d96:	1ad3      	subs	r3, r2, r3
  402d98:	b29a      	uxth	r2, r3
  402d9a:	4b04      	ldr	r3, [pc, #16]	; (402dac <sd_mmc_start_read_blocks+0x48>)
  402d9c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  402d9e:	2300      	movs	r3, #0
}
  402da0:	4618      	mov	r0, r3
  402da2:	3708      	adds	r7, #8
  402da4:	46bd      	mov	sp, r7
  402da6:	bd80      	pop	{r7, pc}
  402da8:	00403c35 	.word	0x00403c35
  402dac:	20001706 	.word	0x20001706

00402db0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  402db0:	b580      	push	{r7, lr}
  402db2:	b082      	sub	sp, #8
  402db4:	af00      	add	r7, sp, #0
  402db6:	4603      	mov	r3, r0
  402db8:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
  402dba:	4b1b      	ldr	r3, [pc, #108]	; (402e28 <sd_mmc_wait_end_of_read_blocks+0x78>)
  402dbc:	4798      	blx	r3
  402dbe:	4603      	mov	r3, r0
  402dc0:	f083 0301 	eor.w	r3, r3, #1
  402dc4:	b2db      	uxtb	r3, r3
  402dc6:	2b00      	cmp	r3, #0
  402dc8:	d001      	beq.n	402dce <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  402dca:	2305      	movs	r3, #5
  402dcc:	e027      	b.n	402e1e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
  402dce:	79fb      	ldrb	r3, [r7, #7]
  402dd0:	2b00      	cmp	r3, #0
  402dd2:	d003      	beq.n	402ddc <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  402dd4:	4b15      	ldr	r3, [pc, #84]	; (402e2c <sd_mmc_wait_end_of_read_blocks+0x7c>)
  402dd6:	2200      	movs	r2, #0
  402dd8:	801a      	strh	r2, [r3, #0]
  402dda:	e005      	b.n	402de8 <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  402ddc:	4b13      	ldr	r3, [pc, #76]	; (402e2c <sd_mmc_wait_end_of_read_blocks+0x7c>)
  402dde:	881b      	ldrh	r3, [r3, #0]
  402de0:	2b00      	cmp	r3, #0
  402de2:	d001      	beq.n	402de8 <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
  402de4:	2300      	movs	r3, #0
  402de6:	e01a      	b.n	402e1e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  402de8:	4b11      	ldr	r3, [pc, #68]	; (402e30 <sd_mmc_wait_end_of_read_blocks+0x80>)
  402dea:	881b      	ldrh	r3, [r3, #0]
  402dec:	2b01      	cmp	r3, #1
  402dee:	d103      	bne.n	402df8 <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  402df0:	4b10      	ldr	r3, [pc, #64]	; (402e34 <sd_mmc_wait_end_of_read_blocks+0x84>)
  402df2:	4798      	blx	r3
		return SD_MMC_OK;
  402df4:	2300      	movs	r3, #0
  402df6:	e012      	b.n	402e1e <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  402df8:	f243 100c 	movw	r0, #12556	; 0x310c
  402dfc:	2100      	movs	r1, #0
  402dfe:	4b0e      	ldr	r3, [pc, #56]	; (402e38 <sd_mmc_wait_end_of_read_blocks+0x88>)
  402e00:	4798      	blx	r3
  402e02:	4603      	mov	r3, r0
  402e04:	f083 0301 	eor.w	r3, r3, #1
  402e08:	b2db      	uxtb	r3, r3
  402e0a:	2b00      	cmp	r3, #0
  402e0c:	d004      	beq.n	402e18 <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  402e0e:	f243 100c 	movw	r0, #12556	; 0x310c
  402e12:	2100      	movs	r1, #0
  402e14:	4b08      	ldr	r3, [pc, #32]	; (402e38 <sd_mmc_wait_end_of_read_blocks+0x88>)
  402e16:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  402e18:	4b06      	ldr	r3, [pc, #24]	; (402e34 <sd_mmc_wait_end_of_read_blocks+0x84>)
  402e1a:	4798      	blx	r3
	return SD_MMC_OK;
  402e1c:	2300      	movs	r3, #0
}
  402e1e:	4618      	mov	r0, r3
  402e20:	3708      	adds	r7, #8
  402e22:	46bd      	mov	sp, r7
  402e24:	bd80      	pop	{r7, pc}
  402e26:	bf00      	nop
  402e28:	00403ce5 	.word	0x00403ce5
  402e2c:	20001706 	.word	0x20001706
  402e30:	20001704 	.word	0x20001704
  402e34:	00402745 	.word	0x00402745
  402e38:	00403999 	.word	0x00403999

00402e3c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  402e3c:	b590      	push	{r4, r7, lr}
  402e3e:	b089      	sub	sp, #36	; 0x24
  402e40:	af02      	add	r7, sp, #8
  402e42:	6039      	str	r1, [r7, #0]
  402e44:	4613      	mov	r3, r2
  402e46:	4602      	mov	r2, r0
  402e48:	71fa      	strb	r2, [r7, #7]
  402e4a:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  402e4c:	79fb      	ldrb	r3, [r7, #7]
  402e4e:	4618      	mov	r0, r3
  402e50:	4b29      	ldr	r3, [pc, #164]	; (402ef8 <sd_mmc_init_write_blocks+0xbc>)
  402e52:	4798      	blx	r3
  402e54:	4603      	mov	r3, r0
  402e56:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  402e58:	7bfb      	ldrb	r3, [r7, #15]
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	d001      	beq.n	402e62 <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
  402e5e:	7bfb      	ldrb	r3, [r7, #15]
  402e60:	e045      	b.n	402eee <sd_mmc_init_write_blocks+0xb2>
	}
	if (sd_mmc_is_write_protected(slot)) {
  402e62:	79fb      	ldrb	r3, [r7, #7]
  402e64:	4618      	mov	r0, r3
  402e66:	4b25      	ldr	r3, [pc, #148]	; (402efc <sd_mmc_init_write_blocks+0xc0>)
  402e68:	4798      	blx	r3
  402e6a:	4603      	mov	r3, r0
  402e6c:	2b00      	cmp	r3, #0
  402e6e:	d003      	beq.n	402e78 <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
  402e70:	4b23      	ldr	r3, [pc, #140]	; (402f00 <sd_mmc_init_write_blocks+0xc4>)
  402e72:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  402e74:	2307      	movs	r3, #7
  402e76:	e03a      	b.n	402eee <sd_mmc_init_write_blocks+0xb2>
	}

	if (nb_block > 1) {
  402e78:	88bb      	ldrh	r3, [r7, #4]
  402e7a:	2b01      	cmp	r3, #1
  402e7c:	d902      	bls.n	402e84 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  402e7e:	4b21      	ldr	r3, [pc, #132]	; (402f04 <sd_mmc_init_write_blocks+0xc8>)
  402e80:	617b      	str	r3, [r7, #20]
  402e82:	e001      	b.n	402e88 <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  402e84:	4b20      	ldr	r3, [pc, #128]	; (402f08 <sd_mmc_init_write_blocks+0xcc>)
  402e86:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  402e88:	4b20      	ldr	r3, [pc, #128]	; (402f0c <sd_mmc_init_write_blocks+0xd0>)
  402e8a:	681b      	ldr	r3, [r3, #0]
  402e8c:	7bdb      	ldrb	r3, [r3, #15]
  402e8e:	f003 0308 	and.w	r3, r3, #8
  402e92:	2b00      	cmp	r3, #0
  402e94:	d002      	beq.n	402e9c <sd_mmc_init_write_blocks+0x60>
		arg = start;
  402e96:	683b      	ldr	r3, [r7, #0]
  402e98:	613b      	str	r3, [r7, #16]
  402e9a:	e002      	b.n	402ea2 <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  402e9c:	683b      	ldr	r3, [r7, #0]
  402e9e:	025b      	lsls	r3, r3, #9
  402ea0:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  402ea2:	88bb      	ldrh	r3, [r7, #4]
  402ea4:	2201      	movs	r2, #1
  402ea6:	9200      	str	r2, [sp, #0]
  402ea8:	6978      	ldr	r0, [r7, #20]
  402eaa:	6939      	ldr	r1, [r7, #16]
  402eac:	f44f 7200 	mov.w	r2, #512	; 0x200
  402eb0:	4c17      	ldr	r4, [pc, #92]	; (402f10 <sd_mmc_init_write_blocks+0xd4>)
  402eb2:	47a0      	blx	r4
  402eb4:	4603      	mov	r3, r0
  402eb6:	f083 0301 	eor.w	r3, r3, #1
  402eba:	b2db      	uxtb	r3, r3
  402ebc:	2b00      	cmp	r3, #0
  402ebe:	d003      	beq.n	402ec8 <sd_mmc_init_write_blocks+0x8c>
		sd_mmc_deselect_slot();
  402ec0:	4b0f      	ldr	r3, [pc, #60]	; (402f00 <sd_mmc_init_write_blocks+0xc4>)
  402ec2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  402ec4:	2305      	movs	r3, #5
  402ec6:	e012      	b.n	402eee <sd_mmc_init_write_blocks+0xb2>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  402ec8:	4b12      	ldr	r3, [pc, #72]	; (402f14 <sd_mmc_init_write_blocks+0xd8>)
  402eca:	4798      	blx	r3
  402ecc:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  402ece:	68ba      	ldr	r2, [r7, #8]
  402ed0:	4b11      	ldr	r3, [pc, #68]	; (402f18 <sd_mmc_init_write_blocks+0xdc>)
  402ed2:	4013      	ands	r3, r2
  402ed4:	2b00      	cmp	r3, #0
  402ed6:	d003      	beq.n	402ee0 <sd_mmc_init_write_blocks+0xa4>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  402ed8:	4b09      	ldr	r3, [pc, #36]	; (402f00 <sd_mmc_init_write_blocks+0xc4>)
  402eda:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  402edc:	2305      	movs	r3, #5
  402ede:	e006      	b.n	402eee <sd_mmc_init_write_blocks+0xb2>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  402ee0:	4b0e      	ldr	r3, [pc, #56]	; (402f1c <sd_mmc_init_write_blocks+0xe0>)
  402ee2:	88ba      	ldrh	r2, [r7, #4]
  402ee4:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  402ee6:	4b0e      	ldr	r3, [pc, #56]	; (402f20 <sd_mmc_init_write_blocks+0xe4>)
  402ee8:	88ba      	ldrh	r2, [r7, #4]
  402eea:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  402eec:	2300      	movs	r3, #0
}
  402eee:	4618      	mov	r0, r3
  402ef0:	371c      	adds	r7, #28
  402ef2:	46bd      	mov	sp, r7
  402ef4:	bd90      	pop	{r4, r7, pc}
  402ef6:	bf00      	nop
  402ef8:	00402579 	.word	0x00402579
  402efc:	00402c65 	.word	0x00402c65
  402f00:	00402745 	.word	0x00402745
  402f04:	00109119 	.word	0x00109119
  402f08:	00089118 	.word	0x00089118
  402f0c:	20001700 	.word	0x20001700
  402f10:	00403a65 	.word	0x00403a65
  402f14:	004039e5 	.word	0x004039e5
  402f18:	e4580000 	.word	0xe4580000
  402f1c:	20001706 	.word	0x20001706
  402f20:	20001704 	.word	0x20001704

00402f24 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  402f24:	b580      	push	{r7, lr}
  402f26:	b082      	sub	sp, #8
  402f28:	af00      	add	r7, sp, #0
  402f2a:	6078      	str	r0, [r7, #4]
  402f2c:	460b      	mov	r3, r1
  402f2e:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  402f30:	887b      	ldrh	r3, [r7, #2]
  402f32:	6878      	ldr	r0, [r7, #4]
  402f34:	4619      	mov	r1, r3
  402f36:	4b0c      	ldr	r3, [pc, #48]	; (402f68 <sd_mmc_start_write_blocks+0x44>)
  402f38:	4798      	blx	r3
  402f3a:	4603      	mov	r3, r0
  402f3c:	f083 0301 	eor.w	r3, r3, #1
  402f40:	b2db      	uxtb	r3, r3
  402f42:	2b00      	cmp	r3, #0
  402f44:	d004      	beq.n	402f50 <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  402f46:	4b09      	ldr	r3, [pc, #36]	; (402f6c <sd_mmc_start_write_blocks+0x48>)
  402f48:	2200      	movs	r2, #0
  402f4a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  402f4c:	2305      	movs	r3, #5
  402f4e:	e007      	b.n	402f60 <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  402f50:	4b06      	ldr	r3, [pc, #24]	; (402f6c <sd_mmc_start_write_blocks+0x48>)
  402f52:	881a      	ldrh	r2, [r3, #0]
  402f54:	887b      	ldrh	r3, [r7, #2]
  402f56:	1ad3      	subs	r3, r2, r3
  402f58:	b29a      	uxth	r2, r3
  402f5a:	4b04      	ldr	r3, [pc, #16]	; (402f6c <sd_mmc_start_write_blocks+0x48>)
  402f5c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  402f5e:	2300      	movs	r3, #0
}
  402f60:	4618      	mov	r0, r3
  402f62:	3708      	adds	r7, #8
  402f64:	46bd      	mov	sp, r7
  402f66:	bd80      	pop	{r7, pc}
  402f68:	00403d75 	.word	0x00403d75
  402f6c:	20001706 	.word	0x20001706

00402f70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  402f70:	b580      	push	{r7, lr}
  402f72:	b082      	sub	sp, #8
  402f74:	af00      	add	r7, sp, #0
  402f76:	4603      	mov	r3, r0
  402f78:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
  402f7a:	4b1a      	ldr	r3, [pc, #104]	; (402fe4 <sd_mmc_wait_end_of_write_blocks+0x74>)
  402f7c:	4798      	blx	r3
  402f7e:	4603      	mov	r3, r0
  402f80:	f083 0301 	eor.w	r3, r3, #1
  402f84:	b2db      	uxtb	r3, r3
  402f86:	2b00      	cmp	r3, #0
  402f88:	d001      	beq.n	402f8e <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  402f8a:	2305      	movs	r3, #5
  402f8c:	e026      	b.n	402fdc <sd_mmc_wait_end_of_write_blocks+0x6c>
	}
	if (abort) {
  402f8e:	79fb      	ldrb	r3, [r7, #7]
  402f90:	2b00      	cmp	r3, #0
  402f92:	d003      	beq.n	402f9c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  402f94:	4b14      	ldr	r3, [pc, #80]	; (402fe8 <sd_mmc_wait_end_of_write_blocks+0x78>)
  402f96:	2200      	movs	r2, #0
  402f98:	801a      	strh	r2, [r3, #0]
  402f9a:	e005      	b.n	402fa8 <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  402f9c:	4b12      	ldr	r3, [pc, #72]	; (402fe8 <sd_mmc_wait_end_of_write_blocks+0x78>)
  402f9e:	881b      	ldrh	r3, [r3, #0]
  402fa0:	2b00      	cmp	r3, #0
  402fa2:	d001      	beq.n	402fa8 <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
  402fa4:	2300      	movs	r3, #0
  402fa6:	e019      	b.n	402fdc <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  402fa8:	4b10      	ldr	r3, [pc, #64]	; (402fec <sd_mmc_wait_end_of_write_blocks+0x7c>)
  402faa:	881b      	ldrh	r3, [r3, #0]
  402fac:	2b01      	cmp	r3, #1
  402fae:	d103      	bne.n	402fb8 <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  402fb0:	4b0f      	ldr	r3, [pc, #60]	; (402ff0 <sd_mmc_wait_end_of_write_blocks+0x80>)
  402fb2:	4798      	blx	r3
		return SD_MMC_OK;
  402fb4:	2300      	movs	r3, #0
  402fb6:	e011      	b.n	402fdc <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  402fb8:	f243 100c 	movw	r0, #12556	; 0x310c
  402fbc:	2100      	movs	r1, #0
  402fbe:	4b0d      	ldr	r3, [pc, #52]	; (402ff4 <sd_mmc_wait_end_of_write_blocks+0x84>)
  402fc0:	4798      	blx	r3
  402fc2:	4603      	mov	r3, r0
  402fc4:	f083 0301 	eor.w	r3, r3, #1
  402fc8:	b2db      	uxtb	r3, r3
  402fca:	2b00      	cmp	r3, #0
  402fcc:	d003      	beq.n	402fd6 <sd_mmc_wait_end_of_write_blocks+0x66>
			sd_mmc_deselect_slot();
  402fce:	4b08      	ldr	r3, [pc, #32]	; (402ff0 <sd_mmc_wait_end_of_write_blocks+0x80>)
  402fd0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  402fd2:	2305      	movs	r3, #5
  402fd4:	e002      	b.n	402fdc <sd_mmc_wait_end_of_write_blocks+0x6c>
		}
	}
	sd_mmc_deselect_slot();
  402fd6:	4b06      	ldr	r3, [pc, #24]	; (402ff0 <sd_mmc_wait_end_of_write_blocks+0x80>)
  402fd8:	4798      	blx	r3
	return SD_MMC_OK;
  402fda:	2300      	movs	r3, #0
}
  402fdc:	4618      	mov	r0, r3
  402fde:	3708      	adds	r7, #8
  402fe0:	46bd      	mov	sp, r7
  402fe2:	bd80      	pop	{r7, pc}
  402fe4:	00403e25 	.word	0x00403e25
  402fe8:	20001706 	.word	0x20001706
  402fec:	20001704 	.word	0x20001704
  402ff0:	00402745 	.word	0x00402745
  402ff4:	00403999 	.word	0x00403999

00402ff8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  402ff8:	b580      	push	{r7, lr}
  402ffa:	b082      	sub	sp, #8
  402ffc:	af00      	add	r7, sp, #0
  402ffe:	4603      	mov	r3, r0
  403000:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  403002:	79fb      	ldrb	r3, [r7, #7]
  403004:	4618      	mov	r0, r3
  403006:	4b15      	ldr	r3, [pc, #84]	; (40305c <sd_mmc_test_unit_ready+0x64>)
  403008:	4798      	blx	r3
  40300a:	4603      	mov	r3, r0
  40300c:	2b01      	cmp	r3, #1
  40300e:	d017      	beq.n	403040 <sd_mmc_test_unit_ready+0x48>
  403010:	2b02      	cmp	r3, #2
  403012:	d017      	beq.n	403044 <sd_mmc_test_unit_ready+0x4c>
  403014:	2b00      	cmp	r3, #0
  403016:	d11b      	bne.n	403050 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  403018:	79fb      	ldrb	r3, [r7, #7]
  40301a:	4a11      	ldr	r2, [pc, #68]	; (403060 <sd_mmc_test_unit_ready+0x68>)
  40301c:	5cd3      	ldrb	r3, [r2, r3]
  40301e:	2b00      	cmp	r3, #0
  403020:	d001      	beq.n	403026 <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  403022:	2302      	movs	r3, #2
  403024:	e015      	b.n	403052 <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  403026:	79fb      	ldrb	r3, [r7, #7]
  403028:	4618      	mov	r0, r3
  40302a:	4b0e      	ldr	r3, [pc, #56]	; (403064 <sd_mmc_test_unit_ready+0x6c>)
  40302c:	4798      	blx	r3
  40302e:	4603      	mov	r3, r0
  403030:	f003 0303 	and.w	r3, r3, #3
  403034:	2b00      	cmp	r3, #0
  403036:	d001      	beq.n	40303c <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  403038:	2300      	movs	r3, #0
  40303a:	e00a      	b.n	403052 <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  40303c:	2302      	movs	r3, #2
  40303e:	e008      	b.n	403052 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  403040:	2303      	movs	r3, #3
  403042:	e006      	b.n	403052 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  403044:	79fb      	ldrb	r3, [r7, #7]
  403046:	4a06      	ldr	r2, [pc, #24]	; (403060 <sd_mmc_test_unit_ready+0x68>)
  403048:	2100      	movs	r1, #0
  40304a:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  40304c:	2302      	movs	r3, #2
  40304e:	e000      	b.n	403052 <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  403050:	2301      	movs	r3, #1
	}
}
  403052:	4618      	mov	r0, r3
  403054:	3708      	adds	r7, #8
  403056:	46bd      	mov	sp, r7
  403058:	bd80      	pop	{r7, pc}
  40305a:	bf00      	nop
  40305c:	00402b89 	.word	0x00402b89
  403060:	2000170c 	.word	0x2000170c
  403064:	00402bed 	.word	0x00402bed

00403068 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  403068:	b580      	push	{r7, lr}
  40306a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
  40306c:	2000      	movs	r0, #0
  40306e:	4b02      	ldr	r3, [pc, #8]	; (403078 <sd_mmc_test_unit_ready_0+0x10>)
  403070:	4798      	blx	r3
  403072:	4603      	mov	r3, r0
}
  403074:	4618      	mov	r0, r3
  403076:	bd80      	pop	{r7, pc}
  403078:	00402ff9 	.word	0x00402ff9

0040307c <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  40307c:	b580      	push	{r7, lr}
  40307e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
  403080:	2001      	movs	r0, #1
  403082:	4b02      	ldr	r3, [pc, #8]	; (40308c <sd_mmc_test_unit_ready_1+0x10>)
  403084:	4798      	blx	r3
  403086:	4603      	mov	r3, r0
}
  403088:	4618      	mov	r0, r3
  40308a:	bd80      	pop	{r7, pc}
  40308c:	00402ff9 	.word	0x00402ff9

00403090 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  403090:	b580      	push	{r7, lr}
  403092:	b082      	sub	sp, #8
  403094:	af00      	add	r7, sp, #0
  403096:	4603      	mov	r3, r0
  403098:	6039      	str	r1, [r7, #0]
  40309a:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  40309c:	79fb      	ldrb	r3, [r7, #7]
  40309e:	4618      	mov	r0, r3
  4030a0:	4b07      	ldr	r3, [pc, #28]	; (4030c0 <sd_mmc_read_capacity+0x30>)
  4030a2:	4798      	blx	r3
  4030a4:	4603      	mov	r3, r0
  4030a6:	005b      	lsls	r3, r3, #1
  4030a8:	1e5a      	subs	r2, r3, #1
  4030aa:	683b      	ldr	r3, [r7, #0]
  4030ac:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
  4030ae:	79fb      	ldrb	r3, [r7, #7]
  4030b0:	4618      	mov	r0, r3
  4030b2:	4b04      	ldr	r3, [pc, #16]	; (4030c4 <sd_mmc_read_capacity+0x34>)
  4030b4:	4798      	blx	r3
  4030b6:	4603      	mov	r3, r0
}
  4030b8:	4618      	mov	r0, r3
  4030ba:	3708      	adds	r7, #8
  4030bc:	46bd      	mov	sp, r7
  4030be:	bd80      	pop	{r7, pc}
  4030c0:	00402c29 	.word	0x00402c29
  4030c4:	00402ff9 	.word	0x00402ff9

004030c8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  4030c8:	b580      	push	{r7, lr}
  4030ca:	b082      	sub	sp, #8
  4030cc:	af00      	add	r7, sp, #0
  4030ce:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
  4030d0:	2000      	movs	r0, #0
  4030d2:	6879      	ldr	r1, [r7, #4]
  4030d4:	4b03      	ldr	r3, [pc, #12]	; (4030e4 <sd_mmc_read_capacity_0+0x1c>)
  4030d6:	4798      	blx	r3
  4030d8:	4603      	mov	r3, r0
}
  4030da:	4618      	mov	r0, r3
  4030dc:	3708      	adds	r7, #8
  4030de:	46bd      	mov	sp, r7
  4030e0:	bd80      	pop	{r7, pc}
  4030e2:	bf00      	nop
  4030e4:	00403091 	.word	0x00403091

004030e8 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  4030e8:	b580      	push	{r7, lr}
  4030ea:	b082      	sub	sp, #8
  4030ec:	af00      	add	r7, sp, #0
  4030ee:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
  4030f0:	2001      	movs	r0, #1
  4030f2:	6879      	ldr	r1, [r7, #4]
  4030f4:	4b03      	ldr	r3, [pc, #12]	; (403104 <sd_mmc_read_capacity_1+0x1c>)
  4030f6:	4798      	blx	r3
  4030f8:	4603      	mov	r3, r0
}
  4030fa:	4618      	mov	r0, r3
  4030fc:	3708      	adds	r7, #8
  4030fe:	46bd      	mov	sp, r7
  403100:	bd80      	pop	{r7, pc}
  403102:	bf00      	nop
  403104:	00403091 	.word	0x00403091

00403108 <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
  403108:	b480      	push	{r7}
  40310a:	b083      	sub	sp, #12
  40310c:	af00      	add	r7, sp, #0
  40310e:	4602      	mov	r2, r0
  403110:	460b      	mov	r3, r1
  403112:	71fa      	strb	r2, [r7, #7]
  403114:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
  403116:	79fb      	ldrb	r3, [r7, #7]
  403118:	4a04      	ldr	r2, [pc, #16]	; (40312c <sd_mmc_unload+0x24>)
  40311a:	79b9      	ldrb	r1, [r7, #6]
  40311c:	54d1      	strb	r1, [r2, r3]
	return true;
  40311e:	2301      	movs	r3, #1
}
  403120:	4618      	mov	r0, r3
  403122:	370c      	adds	r7, #12
  403124:	46bd      	mov	sp, r7
  403126:	f85d 7b04 	ldr.w	r7, [sp], #4
  40312a:	4770      	bx	lr
  40312c:	2000170c 	.word	0x2000170c

00403130 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
  403130:	b580      	push	{r7, lr}
  403132:	b082      	sub	sp, #8
  403134:	af00      	add	r7, sp, #0
  403136:	4603      	mov	r3, r0
  403138:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
  40313a:	79fb      	ldrb	r3, [r7, #7]
  40313c:	2000      	movs	r0, #0
  40313e:	4619      	mov	r1, r3
  403140:	4b03      	ldr	r3, [pc, #12]	; (403150 <sd_mmc_unload_0+0x20>)
  403142:	4798      	blx	r3
  403144:	4603      	mov	r3, r0
}
  403146:	4618      	mov	r0, r3
  403148:	3708      	adds	r7, #8
  40314a:	46bd      	mov	sp, r7
  40314c:	bd80      	pop	{r7, pc}
  40314e:	bf00      	nop
  403150:	00403109 	.word	0x00403109

00403154 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
  403154:	b580      	push	{r7, lr}
  403156:	b082      	sub	sp, #8
  403158:	af00      	add	r7, sp, #0
  40315a:	4603      	mov	r3, r0
  40315c:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(1, unload);
  40315e:	79fb      	ldrb	r3, [r7, #7]
  403160:	2001      	movs	r0, #1
  403162:	4619      	mov	r1, r3
  403164:	4b03      	ldr	r3, [pc, #12]	; (403174 <sd_mmc_unload_1+0x20>)
  403166:	4798      	blx	r3
  403168:	4603      	mov	r3, r0
}
  40316a:	4618      	mov	r0, r3
  40316c:	3708      	adds	r7, #8
  40316e:	46bd      	mov	sp, r7
  403170:	bd80      	pop	{r7, pc}
  403172:	bf00      	nop
  403174:	00403109 	.word	0x00403109

00403178 <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
  403178:	b580      	push	{r7, lr}
  40317a:	b082      	sub	sp, #8
  40317c:	af00      	add	r7, sp, #0
  40317e:	4603      	mov	r3, r0
  403180:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
  403182:	79fb      	ldrb	r3, [r7, #7]
  403184:	4618      	mov	r0, r3
  403186:	4b03      	ldr	r3, [pc, #12]	; (403194 <sd_mmc_wr_protect+0x1c>)
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
}
  40318c:	4618      	mov	r0, r3
  40318e:	3708      	adds	r7, #8
  403190:	46bd      	mov	sp, r7
  403192:	bd80      	pop	{r7, pc}
  403194:	00402c65 	.word	0x00402c65

00403198 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  403198:	b580      	push	{r7, lr}
  40319a:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
  40319c:	2000      	movs	r0, #0
  40319e:	4b02      	ldr	r3, [pc, #8]	; (4031a8 <sd_mmc_wr_protect_0+0x10>)
  4031a0:	4798      	blx	r3
  4031a2:	4603      	mov	r3, r0
}
  4031a4:	4618      	mov	r0, r3
  4031a6:	bd80      	pop	{r7, pc}
  4031a8:	00403179 	.word	0x00403179

004031ac <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  4031ac:	b580      	push	{r7, lr}
  4031ae:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
  4031b0:	2001      	movs	r0, #1
  4031b2:	4b02      	ldr	r3, [pc, #8]	; (4031bc <sd_mmc_wr_protect_1+0x10>)
  4031b4:	4798      	blx	r3
  4031b6:	4603      	mov	r3, r0
}
  4031b8:	4618      	mov	r0, r3
  4031ba:	bd80      	pop	{r7, pc}
  4031bc:	00403179 	.word	0x00403179

004031c0 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
  4031c0:	b480      	push	{r7}
  4031c2:	b083      	sub	sp, #12
  4031c4:	af00      	add	r7, sp, #0
  4031c6:	4603      	mov	r3, r0
  4031c8:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
  4031ca:	2301      	movs	r3, #1
}
  4031cc:	4618      	mov	r0, r3
  4031ce:	370c      	adds	r7, #12
  4031d0:	46bd      	mov	sp, r7
  4031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031d6:	4770      	bx	lr

004031d8 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
  4031d8:	b580      	push	{r7, lr}
  4031da:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
  4031dc:	2000      	movs	r0, #0
  4031de:	4b02      	ldr	r3, [pc, #8]	; (4031e8 <sd_mmc_removal_0+0x10>)
  4031e0:	4798      	blx	r3
  4031e2:	4603      	mov	r3, r0
}
  4031e4:	4618      	mov	r0, r3
  4031e6:	bd80      	pop	{r7, pc}
  4031e8:	004031c1 	.word	0x004031c1

004031ec <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
  4031ec:	b580      	push	{r7, lr}
  4031ee:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
  4031f0:	2001      	movs	r0, #1
  4031f2:	4b02      	ldr	r3, [pc, #8]	; (4031fc <sd_mmc_removal_1+0x10>)
  4031f4:	4798      	blx	r3
  4031f6:	4603      	mov	r3, r0
}
  4031f8:	4618      	mov	r0, r3
  4031fa:	bd80      	pop	{r7, pc}
  4031fc:	004031c1 	.word	0x004031c1

00403200 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  403200:	b580      	push	{r7, lr}
  403202:	b084      	sub	sp, #16
  403204:	af00      	add	r7, sp, #0
  403206:	4603      	mov	r3, r0
  403208:	60b9      	str	r1, [r7, #8]
  40320a:	607a      	str	r2, [r7, #4]
  40320c:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  40320e:	7bfb      	ldrb	r3, [r7, #15]
  403210:	4618      	mov	r0, r3
  403212:	68b9      	ldr	r1, [r7, #8]
  403214:	2201      	movs	r2, #1
  403216:	4b11      	ldr	r3, [pc, #68]	; (40325c <sd_mmc_mem_2_ram+0x5c>)
  403218:	4798      	blx	r3
  40321a:	4603      	mov	r3, r0
  40321c:	2b00      	cmp	r3, #0
  40321e:	d005      	beq.n	40322c <sd_mmc_mem_2_ram+0x2c>
  403220:	2b02      	cmp	r3, #2
  403222:	d101      	bne.n	403228 <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  403224:	2302      	movs	r3, #2
  403226:	e014      	b.n	403252 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
  403228:	2301      	movs	r3, #1
  40322a:	e012      	b.n	403252 <sd_mmc_mem_2_ram+0x52>
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  40322c:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  40322e:	6878      	ldr	r0, [r7, #4]
  403230:	2101      	movs	r1, #1
  403232:	4b0b      	ldr	r3, [pc, #44]	; (403260 <sd_mmc_mem_2_ram+0x60>)
  403234:	4798      	blx	r3
  403236:	4603      	mov	r3, r0
  403238:	2b00      	cmp	r3, #0
  40323a:	d001      	beq.n	403240 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
  40323c:	2301      	movs	r3, #1
  40323e:	e008      	b.n	403252 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  403240:	2000      	movs	r0, #0
  403242:	4b08      	ldr	r3, [pc, #32]	; (403264 <sd_mmc_mem_2_ram+0x64>)
  403244:	4798      	blx	r3
  403246:	4603      	mov	r3, r0
  403248:	2b00      	cmp	r3, #0
  40324a:	d001      	beq.n	403250 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
  40324c:	2301      	movs	r3, #1
  40324e:	e000      	b.n	403252 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
  403250:	2300      	movs	r3, #0
}
  403252:	4618      	mov	r0, r3
  403254:	3710      	adds	r7, #16
  403256:	46bd      	mov	sp, r7
  403258:	bd80      	pop	{r7, pc}
  40325a:	bf00      	nop
  40325c:	00402c7d 	.word	0x00402c7d
  403260:	00402d65 	.word	0x00402d65
  403264:	00402db1 	.word	0x00402db1

00403268 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  403268:	b580      	push	{r7, lr}
  40326a:	b082      	sub	sp, #8
  40326c:	af00      	add	r7, sp, #0
  40326e:	6078      	str	r0, [r7, #4]
  403270:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
  403272:	2000      	movs	r0, #0
  403274:	6879      	ldr	r1, [r7, #4]
  403276:	683a      	ldr	r2, [r7, #0]
  403278:	4b03      	ldr	r3, [pc, #12]	; (403288 <sd_mmc_mem_2_ram_0+0x20>)
  40327a:	4798      	blx	r3
  40327c:	4603      	mov	r3, r0
}
  40327e:	4618      	mov	r0, r3
  403280:	3708      	adds	r7, #8
  403282:	46bd      	mov	sp, r7
  403284:	bd80      	pop	{r7, pc}
  403286:	bf00      	nop
  403288:	00403201 	.word	0x00403201

0040328c <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  40328c:	b580      	push	{r7, lr}
  40328e:	b082      	sub	sp, #8
  403290:	af00      	add	r7, sp, #0
  403292:	6078      	str	r0, [r7, #4]
  403294:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
  403296:	2001      	movs	r0, #1
  403298:	6879      	ldr	r1, [r7, #4]
  40329a:	683a      	ldr	r2, [r7, #0]
  40329c:	4b03      	ldr	r3, [pc, #12]	; (4032ac <sd_mmc_mem_2_ram_1+0x20>)
  40329e:	4798      	blx	r3
  4032a0:	4603      	mov	r3, r0
}
  4032a2:	4618      	mov	r0, r3
  4032a4:	3708      	adds	r7, #8
  4032a6:	46bd      	mov	sp, r7
  4032a8:	bd80      	pop	{r7, pc}
  4032aa:	bf00      	nop
  4032ac:	00403201 	.word	0x00403201

004032b0 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  4032b0:	b580      	push	{r7, lr}
  4032b2:	b084      	sub	sp, #16
  4032b4:	af00      	add	r7, sp, #0
  4032b6:	4603      	mov	r3, r0
  4032b8:	60b9      	str	r1, [r7, #8]
  4032ba:	607a      	str	r2, [r7, #4]
  4032bc:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  4032be:	7bfb      	ldrb	r3, [r7, #15]
  4032c0:	4618      	mov	r0, r3
  4032c2:	68b9      	ldr	r1, [r7, #8]
  4032c4:	2201      	movs	r2, #1
  4032c6:	4b11      	ldr	r3, [pc, #68]	; (40330c <sd_mmc_ram_2_mem+0x5c>)
  4032c8:	4798      	blx	r3
  4032ca:	4603      	mov	r3, r0
  4032cc:	2b00      	cmp	r3, #0
  4032ce:	d005      	beq.n	4032dc <sd_mmc_ram_2_mem+0x2c>
  4032d0:	2b02      	cmp	r3, #2
  4032d2:	d101      	bne.n	4032d8 <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  4032d4:	2302      	movs	r3, #2
  4032d6:	e014      	b.n	403302 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
  4032d8:	2301      	movs	r3, #1
  4032da:	e012      	b.n	403302 <sd_mmc_ram_2_mem+0x52>

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
  4032dc:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  4032de:	6878      	ldr	r0, [r7, #4]
  4032e0:	2101      	movs	r1, #1
  4032e2:	4b0b      	ldr	r3, [pc, #44]	; (403310 <sd_mmc_ram_2_mem+0x60>)
  4032e4:	4798      	blx	r3
  4032e6:	4603      	mov	r3, r0
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	d001      	beq.n	4032f0 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
  4032ec:	2301      	movs	r3, #1
  4032ee:	e008      	b.n	403302 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  4032f0:	2000      	movs	r0, #0
  4032f2:	4b08      	ldr	r3, [pc, #32]	; (403314 <sd_mmc_ram_2_mem+0x64>)
  4032f4:	4798      	blx	r3
  4032f6:	4603      	mov	r3, r0
  4032f8:	2b00      	cmp	r3, #0
  4032fa:	d001      	beq.n	403300 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
  4032fc:	2301      	movs	r3, #1
  4032fe:	e000      	b.n	403302 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
  403300:	2300      	movs	r3, #0
}
  403302:	4618      	mov	r0, r3
  403304:	3710      	adds	r7, #16
  403306:	46bd      	mov	sp, r7
  403308:	bd80      	pop	{r7, pc}
  40330a:	bf00      	nop
  40330c:	00402e3d 	.word	0x00402e3d
  403310:	00402f25 	.word	0x00402f25
  403314:	00402f71 	.word	0x00402f71

00403318 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  403318:	b580      	push	{r7, lr}
  40331a:	b082      	sub	sp, #8
  40331c:	af00      	add	r7, sp, #0
  40331e:	6078      	str	r0, [r7, #4]
  403320:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
  403322:	2000      	movs	r0, #0
  403324:	6879      	ldr	r1, [r7, #4]
  403326:	683a      	ldr	r2, [r7, #0]
  403328:	4b03      	ldr	r3, [pc, #12]	; (403338 <sd_mmc_ram_2_mem_0+0x20>)
  40332a:	4798      	blx	r3
  40332c:	4603      	mov	r3, r0
}
  40332e:	4618      	mov	r0, r3
  403330:	3708      	adds	r7, #8
  403332:	46bd      	mov	sp, r7
  403334:	bd80      	pop	{r7, pc}
  403336:	bf00      	nop
  403338:	004032b1 	.word	0x004032b1

0040333c <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  40333c:	b580      	push	{r7, lr}
  40333e:	b082      	sub	sp, #8
  403340:	af00      	add	r7, sp, #0
  403342:	6078      	str	r0, [r7, #4]
  403344:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
  403346:	2001      	movs	r0, #1
  403348:	6879      	ldr	r1, [r7, #4]
  40334a:	683a      	ldr	r2, [r7, #0]
  40334c:	4b03      	ldr	r3, [pc, #12]	; (40335c <sd_mmc_ram_2_mem_1+0x20>)
  40334e:	4798      	blx	r3
  403350:	4603      	mov	r3, r0
}
  403352:	4618      	mov	r0, r3
  403354:	3708      	adds	r7, #8
  403356:	46bd      	mov	sp, r7
  403358:	bd80      	pop	{r7, pc}
  40335a:	bf00      	nop
  40335c:	004032b1 	.word	0x004032b1

00403360 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  403360:	b580      	push	{r7, lr}
  403362:	b084      	sub	sp, #16
  403364:	af00      	add	r7, sp, #0
  403366:	4603      	mov	r3, r0
  403368:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40336a:	79fb      	ldrb	r3, [r7, #7]
  40336c:	2b01      	cmp	r3, #1
  40336e:	d807      	bhi.n	403380 <mem_test_unit_ready+0x20>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  403370:	79fb      	ldrb	r3, [r7, #7]
  403372:	4a07      	ldr	r2, [pc, #28]	; (403390 <mem_test_unit_ready+0x30>)
  403374:	015b      	lsls	r3, r3, #5
  403376:	4413      	add	r3, r2
  403378:	681b      	ldr	r3, [r3, #0]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40337a:	4798      	blx	r3
  40337c:	4603      	mov	r3, r0
  40337e:	e000      	b.n	403382 <mem_test_unit_ready+0x22>
  403380:	2301      	movs	r3, #1
  403382:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  403384:	7bfb      	ldrb	r3, [r7, #15]
}
  403386:	4618      	mov	r0, r3
  403388:	3710      	adds	r7, #16
  40338a:	46bd      	mov	sp, r7
  40338c:	bd80      	pop	{r7, pc}
  40338e:	bf00      	nop
  403390:	00418694 	.word	0x00418694

00403394 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  403394:	b580      	push	{r7, lr}
  403396:	b084      	sub	sp, #16
  403398:	af00      	add	r7, sp, #0
  40339a:	4603      	mov	r3, r0
  40339c:	6039      	str	r1, [r7, #0]
  40339e:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  4033a0:	79fb      	ldrb	r3, [r7, #7]
  4033a2:	2b01      	cmp	r3, #1
  4033a4:	d808      	bhi.n	4033b8 <mem_read_capacity+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4033a6:	79fb      	ldrb	r3, [r7, #7]
  4033a8:	4a07      	ldr	r2, [pc, #28]	; (4033c8 <mem_read_capacity+0x34>)
  4033aa:	015b      	lsls	r3, r3, #5
  4033ac:	4413      	add	r3, r2
  4033ae:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  4033b0:	6838      	ldr	r0, [r7, #0]
  4033b2:	4798      	blx	r3
  4033b4:	4603      	mov	r3, r0
  4033b6:	e000      	b.n	4033ba <mem_read_capacity+0x26>
  4033b8:	2301      	movs	r3, #1
  4033ba:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  4033bc:	7bfb      	ldrb	r3, [r7, #15]
}
  4033be:	4618      	mov	r0, r3
  4033c0:	3710      	adds	r7, #16
  4033c2:	46bd      	mov	sp, r7
  4033c4:	bd80      	pop	{r7, pc}
  4033c6:	bf00      	nop
  4033c8:	00418694 	.word	0x00418694

004033cc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
  4033cc:	b480      	push	{r7}
  4033ce:	b085      	sub	sp, #20
  4033d0:	af00      	add	r7, sp, #0
  4033d2:	4603      	mov	r3, r0
  4033d4:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
  4033d6:	79fb      	ldrb	r3, [r7, #7]
  4033d8:	2b01      	cmp	r3, #1
  4033da:	bf8c      	ite	hi
  4033dc:	2300      	movhi	r3, #0
  4033de:	2301      	movls	r3, #1
  4033e0:	b2db      	uxtb	r3, r3
{
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
  4033e2:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
  4033e4:	7bfb      	ldrb	r3, [r7, #15]
}
  4033e6:	4618      	mov	r0, r3
  4033e8:	3714      	adds	r7, #20
  4033ea:	46bd      	mov	sp, r7
  4033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033f0:	4770      	bx	lr
  4033f2:	bf00      	nop

004033f4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  4033f4:	b580      	push	{r7, lr}
  4033f6:	b084      	sub	sp, #16
  4033f8:	af00      	add	r7, sp, #0
  4033fa:	4603      	mov	r3, r0
  4033fc:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4033fe:	79fb      	ldrb	r3, [r7, #7]
  403400:	2b01      	cmp	r3, #1
  403402:	d809      	bhi.n	403418 <mem_wr_protect+0x24>
  403404:	79fb      	ldrb	r3, [r7, #7]
  403406:	4a09      	ldr	r2, [pc, #36]	; (40342c <mem_wr_protect+0x38>)
  403408:	015b      	lsls	r3, r3, #5
  40340a:	4413      	add	r3, r2
  40340c:	3308      	adds	r3, #8
  40340e:	685b      	ldr	r3, [r3, #4]
  403410:	4798      	blx	r3
  403412:	4603      	mov	r3, r0
  403414:	2b00      	cmp	r3, #0
  403416:	d001      	beq.n	40341c <mem_wr_protect+0x28>
  403418:	2301      	movs	r3, #1
  40341a:	e000      	b.n	40341e <mem_wr_protect+0x2a>
  40341c:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
  40341e:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
  403420:	7bfb      	ldrb	r3, [r7, #15]
}
  403422:	4618      	mov	r0, r3
  403424:	3710      	adds	r7, #16
  403426:	46bd      	mov	sp, r7
  403428:	bd80      	pop	{r7, pc}
  40342a:	bf00      	nop
  40342c:	00418694 	.word	0x00418694

00403430 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  403430:	b580      	push	{r7, lr}
  403432:	b086      	sub	sp, #24
  403434:	af00      	add	r7, sp, #0
  403436:	4603      	mov	r3, r0
  403438:	60b9      	str	r1, [r7, #8]
  40343a:	607a      	str	r2, [r7, #4]
  40343c:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  40343e:	7bfb      	ldrb	r3, [r7, #15]
  403440:	2b01      	cmp	r3, #1
  403442:	d80a      	bhi.n	40345a <memory_2_ram+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  403444:	7bfb      	ldrb	r3, [r7, #15]
  403446:	4a08      	ldr	r2, [pc, #32]	; (403468 <memory_2_ram+0x38>)
  403448:	015b      	lsls	r3, r3, #5
  40344a:	4413      	add	r3, r2
  40344c:	3310      	adds	r3, #16
  40344e:	685b      	ldr	r3, [r3, #4]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  403450:	68b8      	ldr	r0, [r7, #8]
  403452:	6879      	ldr	r1, [r7, #4]
  403454:	4798      	blx	r3
  403456:	4603      	mov	r3, r0
  403458:	e000      	b.n	40345c <memory_2_ram+0x2c>
  40345a:	2301      	movs	r3, #1
  40345c:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
  40345e:	7dfb      	ldrb	r3, [r7, #23]
}
  403460:	4618      	mov	r0, r3
  403462:	3718      	adds	r7, #24
  403464:	46bd      	mov	sp, r7
  403466:	bd80      	pop	{r7, pc}
  403468:	00418694 	.word	0x00418694

0040346c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  40346c:	b580      	push	{r7, lr}
  40346e:	b086      	sub	sp, #24
  403470:	af00      	add	r7, sp, #0
  403472:	4603      	mov	r3, r0
  403474:	60b9      	str	r1, [r7, #8]
  403476:	607a      	str	r2, [r7, #4]
  403478:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  40347a:	7bfb      	ldrb	r3, [r7, #15]
  40347c:	2b01      	cmp	r3, #1
  40347e:	d80a      	bhi.n	403496 <ram_2_memory+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  403480:	7bfb      	ldrb	r3, [r7, #15]
  403482:	4a08      	ldr	r2, [pc, #32]	; (4034a4 <ram_2_memory+0x38>)
  403484:	015b      	lsls	r3, r3, #5
  403486:	4413      	add	r3, r2
  403488:	3318      	adds	r3, #24
  40348a:	681b      	ldr	r3, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  40348c:	68b8      	ldr	r0, [r7, #8]
  40348e:	6879      	ldr	r1, [r7, #4]
  403490:	4798      	blx	r3
  403492:	4603      	mov	r3, r0
  403494:	e000      	b.n	403498 <ram_2_memory+0x2c>
  403496:	2301      	movs	r3, #1
  403498:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
  40349a:	7dfb      	ldrb	r3, [r7, #23]
}
  40349c:	4618      	mov	r0, r3
  40349e:	3718      	adds	r7, #24
  4034a0:	46bd      	mov	sp, r7
  4034a2:	bd80      	pop	{r7, pc}
  4034a4:	00418694 	.word	0x00418694

004034a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4034a8:	b580      	push	{r7, lr}
  4034aa:	b086      	sub	sp, #24
  4034ac:	af00      	add	r7, sp, #0
  4034ae:	60f8      	str	r0, [r7, #12]
  4034b0:	60b9      	str	r1, [r7, #8]
  4034b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4034b4:	2300      	movs	r3, #0
  4034b6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4034b8:	68fb      	ldr	r3, [r7, #12]
  4034ba:	2b00      	cmp	r3, #0
  4034bc:	d002      	beq.n	4034c4 <_read+0x1c>
		return -1;
  4034be:	f04f 33ff 	mov.w	r3, #4294967295
  4034c2:	e014      	b.n	4034ee <_read+0x46>
	}

	for (; len > 0; --len) {
  4034c4:	e00f      	b.n	4034e6 <_read+0x3e>
		ptr_get(stdio_base, ptr);
  4034c6:	4b0c      	ldr	r3, [pc, #48]	; (4034f8 <_read+0x50>)
  4034c8:	681b      	ldr	r3, [r3, #0]
  4034ca:	4a0c      	ldr	r2, [pc, #48]	; (4034fc <_read+0x54>)
  4034cc:	6812      	ldr	r2, [r2, #0]
  4034ce:	4610      	mov	r0, r2
  4034d0:	68b9      	ldr	r1, [r7, #8]
  4034d2:	4798      	blx	r3
		ptr++;
  4034d4:	68bb      	ldr	r3, [r7, #8]
  4034d6:	3301      	adds	r3, #1
  4034d8:	60bb      	str	r3, [r7, #8]
		nChars++;
  4034da:	697b      	ldr	r3, [r7, #20]
  4034dc:	3301      	adds	r3, #1
  4034de:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4034e0:	687b      	ldr	r3, [r7, #4]
  4034e2:	3b01      	subs	r3, #1
  4034e4:	607b      	str	r3, [r7, #4]
  4034e6:	687b      	ldr	r3, [r7, #4]
  4034e8:	2b00      	cmp	r3, #0
  4034ea:	dcec      	bgt.n	4034c6 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4034ec:	697b      	ldr	r3, [r7, #20]
}
  4034ee:	4618      	mov	r0, r3
  4034f0:	3718      	adds	r7, #24
  4034f2:	46bd      	mov	sp, r7
  4034f4:	bd80      	pop	{r7, pc}
  4034f6:	bf00      	nop
  4034f8:	200021bc 	.word	0x200021bc
  4034fc:	200021c4 	.word	0x200021c4

00403500 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  403500:	b580      	push	{r7, lr}
  403502:	b086      	sub	sp, #24
  403504:	af00      	add	r7, sp, #0
  403506:	60f8      	str	r0, [r7, #12]
  403508:	60b9      	str	r1, [r7, #8]
  40350a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40350c:	2300      	movs	r3, #0
  40350e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  403510:	68fb      	ldr	r3, [r7, #12]
  403512:	2b01      	cmp	r3, #1
  403514:	d008      	beq.n	403528 <_write+0x28>
  403516:	68fb      	ldr	r3, [r7, #12]
  403518:	2b02      	cmp	r3, #2
  40351a:	d005      	beq.n	403528 <_write+0x28>
  40351c:	68fb      	ldr	r3, [r7, #12]
  40351e:	2b03      	cmp	r3, #3
  403520:	d002      	beq.n	403528 <_write+0x28>
		return -1;
  403522:	f04f 33ff 	mov.w	r3, #4294967295
  403526:	e01b      	b.n	403560 <_write+0x60>
	}

	for (; len != 0; --len) {
  403528:	e016      	b.n	403558 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40352a:	4b0f      	ldr	r3, [pc, #60]	; (403568 <_write+0x68>)
  40352c:	681a      	ldr	r2, [r3, #0]
  40352e:	4b0f      	ldr	r3, [pc, #60]	; (40356c <_write+0x6c>)
  403530:	6819      	ldr	r1, [r3, #0]
  403532:	68bb      	ldr	r3, [r7, #8]
  403534:	1c58      	adds	r0, r3, #1
  403536:	60b8      	str	r0, [r7, #8]
  403538:	781b      	ldrb	r3, [r3, #0]
  40353a:	4608      	mov	r0, r1
  40353c:	4619      	mov	r1, r3
  40353e:	4790      	blx	r2
  403540:	4603      	mov	r3, r0
  403542:	2b00      	cmp	r3, #0
  403544:	da02      	bge.n	40354c <_write+0x4c>
			return -1;
  403546:	f04f 33ff 	mov.w	r3, #4294967295
  40354a:	e009      	b.n	403560 <_write+0x60>
		}
		++nChars;
  40354c:	697b      	ldr	r3, [r7, #20]
  40354e:	3301      	adds	r3, #1
  403550:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403552:	687b      	ldr	r3, [r7, #4]
  403554:	3b01      	subs	r3, #1
  403556:	607b      	str	r3, [r7, #4]
  403558:	687b      	ldr	r3, [r7, #4]
  40355a:	2b00      	cmp	r3, #0
  40355c:	d1e5      	bne.n	40352a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40355e:	697b      	ldr	r3, [r7, #20]
}
  403560:	4618      	mov	r0, r3
  403562:	3718      	adds	r7, #24
  403564:	46bd      	mov	sp, r7
  403566:	bd80      	pop	{r7, pc}
  403568:	200021c0 	.word	0x200021c0
  40356c:	200021c4 	.word	0x200021c4

00403570 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403570:	b480      	push	{r7}
  403572:	b083      	sub	sp, #12
  403574:	af00      	add	r7, sp, #0
  403576:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403578:	687b      	ldr	r3, [r7, #4]
  40357a:	2b07      	cmp	r3, #7
  40357c:	d825      	bhi.n	4035ca <osc_get_rate+0x5a>
  40357e:	a201      	add	r2, pc, #4	; (adr r2, 403584 <osc_get_rate+0x14>)
  403580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403584:	004035a5 	.word	0x004035a5
  403588:	004035ab 	.word	0x004035ab
  40358c:	004035b1 	.word	0x004035b1
  403590:	004035b7 	.word	0x004035b7
  403594:	004035bb 	.word	0x004035bb
  403598:	004035bf 	.word	0x004035bf
  40359c:	004035c3 	.word	0x004035c3
  4035a0:	004035c7 	.word	0x004035c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4035a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4035a8:	e010      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4035ae:	e00d      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4035b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4035b4:	e00a      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4035b6:	4b08      	ldr	r3, [pc, #32]	; (4035d8 <osc_get_rate+0x68>)
  4035b8:	e008      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4035ba:	4b08      	ldr	r3, [pc, #32]	; (4035dc <osc_get_rate+0x6c>)
  4035bc:	e006      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4035be:	4b08      	ldr	r3, [pc, #32]	; (4035e0 <osc_get_rate+0x70>)
  4035c0:	e004      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4035c2:	4b08      	ldr	r3, [pc, #32]	; (4035e4 <osc_get_rate+0x74>)
  4035c4:	e002      	b.n	4035cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4035c6:	4b07      	ldr	r3, [pc, #28]	; (4035e4 <osc_get_rate+0x74>)
  4035c8:	e000      	b.n	4035cc <osc_get_rate+0x5c>
	}

	return 0;
  4035ca:	2300      	movs	r3, #0
}
  4035cc:	4618      	mov	r0, r3
  4035ce:	370c      	adds	r7, #12
  4035d0:	46bd      	mov	sp, r7
  4035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035d6:	4770      	bx	lr
  4035d8:	003d0900 	.word	0x003d0900
  4035dc:	007a1200 	.word	0x007a1200
  4035e0:	00b71b00 	.word	0x00b71b00
  4035e4:	00f42400 	.word	0x00f42400

004035e8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4035e8:	b580      	push	{r7, lr}
  4035ea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4035ec:	2006      	movs	r0, #6
  4035ee:	4b04      	ldr	r3, [pc, #16]	; (403600 <sysclk_get_main_hz+0x18>)
  4035f0:	4798      	blx	r3
  4035f2:	4602      	mov	r2, r0
  4035f4:	4613      	mov	r3, r2
  4035f6:	011b      	lsls	r3, r3, #4
  4035f8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4035fa:	4618      	mov	r0, r3
  4035fc:	bd80      	pop	{r7, pc}
  4035fe:	bf00      	nop
  403600:	00403571 	.word	0x00403571

00403604 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  403604:	b580      	push	{r7, lr}
  403606:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403608:	4b02      	ldr	r3, [pc, #8]	; (403614 <sysclk_get_cpu_hz+0x10>)
  40360a:	4798      	blx	r3
  40360c:	4603      	mov	r3, r0
  40360e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  403610:	4618      	mov	r0, r3
  403612:	bd80      	pop	{r7, pc}
  403614:	004035e9 	.word	0x004035e9

00403618 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  403618:	b480      	push	{r7}
  40361a:	b087      	sub	sp, #28
  40361c:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  40361e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403622:	685b      	ldr	r3, [r3, #4]
  403624:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  403626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40362a:	689b      	ldr	r3, [r3, #8]
  40362c:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  40362e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403632:	68db      	ldr	r3, [r3, #12]
  403634:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  403636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40363a:	69db      	ldr	r3, [r3, #28]
  40363c:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40363e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  403644:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  403646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40364a:	2280      	movs	r2, #128	; 0x80
  40364c:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40364e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403652:	697a      	ldr	r2, [r7, #20]
  403654:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  403656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40365a:	693a      	ldr	r2, [r7, #16]
  40365c:	609a      	str	r2, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  40365e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403662:	68fa      	ldr	r2, [r7, #12]
  403664:	60da      	str	r2, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  403666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40366a:	68ba      	ldr	r2, [r7, #8]
  40366c:	61da      	str	r2, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  40366e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403672:	687a      	ldr	r2, [r7, #4]
  403674:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  403676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40367a:	2205      	movs	r2, #5
  40367c:	601a      	str	r2, [r3, #0]
}
  40367e:	371c      	adds	r7, #28
  403680:	46bd      	mov	sp, r7
  403682:	f85d 7b04 	ldr.w	r7, [sp], #4
  403686:	4770      	bx	lr

00403688 <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  403688:	b480      	push	{r7}
  40368a:	b085      	sub	sp, #20
  40368c:	af00      	add	r7, sp, #0
  40368e:	6078      	str	r0, [r7, #4]
  403690:	6039      	str	r1, [r7, #0]
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
	}
#else
	uint32_t clkdiv = 0;
  403692:	2300      	movs	r3, #0
  403694:	60fb      	str	r3, [r7, #12]
	uint32_t rest = 0;
  403696:	2300      	movs	r3, #0
  403698:	60bb      	str	r3, [r7, #8]

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  40369a:	687b      	ldr	r3, [r7, #4]
  40369c:	005a      	lsls	r2, r3, #1
  40369e:	683b      	ldr	r3, [r7, #0]
  4036a0:	429a      	cmp	r2, r3
  4036a2:	d21b      	bcs.n	4036dc <hsmci_set_speed+0x54>
		clkdiv = mck / (2 * speed);
  4036a4:	687b      	ldr	r3, [r7, #4]
  4036a6:	005b      	lsls	r3, r3, #1
  4036a8:	683a      	ldr	r2, [r7, #0]
  4036aa:	fbb2 f3f3 	udiv	r3, r2, r3
  4036ae:	60fb      	str	r3, [r7, #12]
		rest = mck % (2 * speed);
  4036b0:	687b      	ldr	r3, [r7, #4]
  4036b2:	005a      	lsls	r2, r3, #1
  4036b4:	683b      	ldr	r3, [r7, #0]
  4036b6:	fbb3 f1f2 	udiv	r1, r3, r2
  4036ba:	fb02 f201 	mul.w	r2, r2, r1
  4036be:	1a9b      	subs	r3, r3, r2
  4036c0:	60bb      	str	r3, [r7, #8]
		if (rest > 0) {
  4036c2:	68bb      	ldr	r3, [r7, #8]
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	d002      	beq.n	4036ce <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  4036c8:	68fb      	ldr	r3, [r7, #12]
  4036ca:	3301      	adds	r3, #1
  4036cc:	60fb      	str	r3, [r7, #12]
		}
		if (clkdiv > 0) {
  4036ce:	68fb      	ldr	r3, [r7, #12]
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	d005      	beq.n	4036e0 <hsmci_set_speed+0x58>
			clkdiv -= 1;
  4036d4:	68fb      	ldr	r3, [r7, #12]
  4036d6:	3b01      	subs	r3, #1
  4036d8:	60fb      	str	r3, [r7, #12]
  4036da:	e001      	b.n	4036e0 <hsmci_set_speed+0x58>
		}
	} else {
		clkdiv = 0;
  4036dc:	2300      	movs	r3, #0
  4036de:	60fb      	str	r3, [r7, #12]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4036e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4036e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4036e8:	6852      	ldr	r2, [r2, #4]
  4036ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  4036ee:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4036f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4036f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4036f8:	6851      	ldr	r1, [r2, #4]
  4036fa:	68fa      	ldr	r2, [r7, #12]
  4036fc:	b2d2      	uxtb	r2, r2
  4036fe:	430a      	orrs	r2, r1
  403700:	605a      	str	r2, [r3, #4]
#endif

}
  403702:	3714      	adds	r7, #20
  403704:	46bd      	mov	sp, r7
  403706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40370a:	4770      	bx	lr

0040370c <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  40370c:	b580      	push	{r7, lr}
  40370e:	b082      	sub	sp, #8
  403710:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  403712:	f04f 33ff 	mov.w	r3, #4294967295
  403716:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  403718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40371e:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  403720:	687b      	ldr	r3, [r7, #4]
  403722:	1e5a      	subs	r2, r3, #1
  403724:	607a      	str	r2, [r7, #4]
  403726:	2b00      	cmp	r3, #0
  403728:	d103      	bne.n	403732 <hsmci_wait_busy+0x26>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  40372a:	4b09      	ldr	r3, [pc, #36]	; (403750 <hsmci_wait_busy+0x44>)
  40372c:	4798      	blx	r3
			return false;
  40372e:	2300      	movs	r3, #0
  403730:	e00a      	b.n	403748 <hsmci_wait_busy+0x3c>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  403732:	683b      	ldr	r3, [r7, #0]
  403734:	f003 0320 	and.w	r3, r3, #32
  403738:	2b00      	cmp	r3, #0
  40373a:	d0ed      	beq.n	403718 <hsmci_wait_busy+0xc>
  40373c:	683b      	ldr	r3, [r7, #0]
  40373e:	f003 0310 	and.w	r3, r3, #16
  403742:	2b00      	cmp	r3, #0
  403744:	d1e8      	bne.n	403718 <hsmci_wait_busy+0xc>
	return true;
  403746:	2301      	movs	r3, #1
}
  403748:	4618      	mov	r0, r3
  40374a:	3708      	adds	r7, #8
  40374c:	46bd      	mov	sp, r7
  40374e:	bd80      	pop	{r7, pc}
  403750:	00403619 	.word	0x00403619

00403754 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  403754:	b580      	push	{r7, lr}
  403756:	b086      	sub	sp, #24
  403758:	af00      	add	r7, sp, #0
  40375a:	60f8      	str	r0, [r7, #12]
  40375c:	60b9      	str	r1, [r7, #8]
  40375e:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  403760:	68bb      	ldr	r3, [r7, #8]
  403762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  403766:	68fa      	ldr	r2, [r7, #12]
  403768:	4313      	orrs	r3, r2
  40376a:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  40376c:	68bb      	ldr	r3, [r7, #8]
  40376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403772:	2b00      	cmp	r3, #0
  403774:	d01b      	beq.n	4037ae <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  403776:	68fb      	ldr	r3, [r7, #12]
  403778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40377c:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  40377e:	68bb      	ldr	r3, [r7, #8]
  403780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  403784:	2b00      	cmp	r3, #0
  403786:	d004      	beq.n	403792 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  403788:	68fb      	ldr	r3, [r7, #12]
  40378a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40378e:	60fb      	str	r3, [r7, #12]
  403790:	e00d      	b.n	4037ae <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  403792:	68bb      	ldr	r3, [r7, #8]
  403794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  403798:	2b00      	cmp	r3, #0
  40379a:	d004      	beq.n	4037a6 <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40379c:	68fb      	ldr	r3, [r7, #12]
  40379e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  4037a2:	60fb      	str	r3, [r7, #12]
  4037a4:	e003      	b.n	4037ae <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4037a6:	68fb      	ldr	r3, [r7, #12]
  4037a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4037ac:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4037ae:	68bb      	ldr	r3, [r7, #8]
  4037b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  4037b4:	2b00      	cmp	r3, #0
  4037b6:	d003      	beq.n	4037c0 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4037b8:	68fb      	ldr	r3, [r7, #12]
  4037ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4037be:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4037c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4037c4:	687a      	ldr	r2, [r7, #4]
  4037c6:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4037c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4037cc:	68fa      	ldr	r2, [r7, #12]
  4037ce:	615a      	str	r2, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4037d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4037d6:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  4037d8:	68bb      	ldr	r3, [r7, #8]
  4037da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4037de:	2b00      	cmp	r3, #0
  4037e0:	d008      	beq.n	4037f4 <hsmci_send_cmd_execute+0xa0>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4037e2:	697b      	ldr	r3, [r7, #20]
  4037e4:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	d00c      	beq.n	403806 <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4037ec:	4b12      	ldr	r3, [pc, #72]	; (403838 <hsmci_send_cmd_execute+0xe4>)
  4037ee:	4798      	blx	r3
				return false;
  4037f0:	2300      	movs	r3, #0
  4037f2:	e01d      	b.n	403830 <hsmci_send_cmd_execute+0xdc>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4037f4:	697b      	ldr	r3, [r7, #20]
  4037f6:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  4037fa:	2b00      	cmp	r3, #0
  4037fc:	d003      	beq.n	403806 <hsmci_send_cmd_execute+0xb2>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4037fe:	4b0e      	ldr	r3, [pc, #56]	; (403838 <hsmci_send_cmd_execute+0xe4>)
  403800:	4798      	blx	r3
				return false;
  403802:	2300      	movs	r3, #0
  403804:	e014      	b.n	403830 <hsmci_send_cmd_execute+0xdc>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  403806:	697b      	ldr	r3, [r7, #20]
  403808:	f003 0301 	and.w	r3, r3, #1
  40380c:	2b00      	cmp	r3, #0
  40380e:	d0df      	beq.n	4037d0 <hsmci_send_cmd_execute+0x7c>

	if (cmd & SDMMC_RESP_BUSY) {
  403810:	68bb      	ldr	r3, [r7, #8]
  403812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  403816:	2b00      	cmp	r3, #0
  403818:	d009      	beq.n	40382e <hsmci_send_cmd_execute+0xda>
		if (!hsmci_wait_busy()) {
  40381a:	4b08      	ldr	r3, [pc, #32]	; (40383c <hsmci_send_cmd_execute+0xe8>)
  40381c:	4798      	blx	r3
  40381e:	4603      	mov	r3, r0
  403820:	f083 0301 	eor.w	r3, r3, #1
  403824:	b2db      	uxtb	r3, r3
  403826:	2b00      	cmp	r3, #0
  403828:	d001      	beq.n	40382e <hsmci_send_cmd_execute+0xda>
			return false;
  40382a:	2300      	movs	r3, #0
  40382c:	e000      	b.n	403830 <hsmci_send_cmd_execute+0xdc>
		}
	}
	return true;
  40382e:	2301      	movs	r3, #1
}
  403830:	4618      	mov	r0, r3
  403832:	3718      	adds	r7, #24
  403834:	46bd      	mov	sp, r7
  403836:	bd80      	pop	{r7, pc}
  403838:	00403619 	.word	0x00403619
  40383c:	0040370d 	.word	0x0040370d

00403840 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  403840:	b580      	push	{r7, lr}
  403842:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  403844:	2012      	movs	r0, #18
  403846:	4b0c      	ldr	r3, [pc, #48]	; (403878 <hsmci_init+0x38>)
  403848:	4798      	blx	r3
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  40384a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40384e:	2272      	movs	r2, #114	; 0x72
  403850:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  403852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403856:	2272      	movs	r2, #114	; 0x72
  403858:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40385a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40385e:	2211      	movs	r2, #17
  403860:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  403862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403866:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  40386a:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  40386c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403870:	2205      	movs	r2, #5
  403872:	601a      	str	r2, [r3, #0]
}
  403874:	bd80      	pop	{r7, pc}
  403876:	bf00      	nop
  403878:	0040de71 	.word	0x0040de71

0040387c <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  40387c:	b480      	push	{r7}
  40387e:	b083      	sub	sp, #12
  403880:	af00      	add	r7, sp, #0
  403882:	4603      	mov	r3, r0
  403884:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  403886:	79fb      	ldrb	r3, [r7, #7]
  403888:	2b00      	cmp	r3, #0
  40388a:	d101      	bne.n	403890 <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  40388c:	2304      	movs	r3, #4
  40388e:	e000      	b.n	403892 <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  403890:	2300      	movs	r3, #0
	}
}
  403892:	4618      	mov	r0, r3
  403894:	370c      	adds	r7, #12
  403896:	46bd      	mov	sp, r7
  403898:	f85d 7b04 	ldr.w	r7, [sp], #4
  40389c:	4770      	bx	lr
  40389e:	bf00      	nop

004038a0 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  4038a0:	b480      	push	{r7}
  4038a2:	af00      	add	r7, sp, #0
	return true;
  4038a4:	2301      	movs	r3, #1
}
  4038a6:	4618      	mov	r0, r3
  4038a8:	46bd      	mov	sp, r7
  4038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4038ae:	4770      	bx	lr

004038b0 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  4038b0:	b580      	push	{r7, lr}
  4038b2:	b084      	sub	sp, #16
  4038b4:	af00      	add	r7, sp, #0
  4038b6:	6039      	str	r1, [r7, #0]
  4038b8:	4601      	mov	r1, r0
  4038ba:	71f9      	strb	r1, [r7, #7]
  4038bc:	71ba      	strb	r2, [r7, #6]
  4038be:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  4038c0:	2300      	movs	r3, #0
  4038c2:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4038c4:	2300      	movs	r3, #0
  4038c6:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  4038c8:	797b      	ldrb	r3, [r7, #5]
  4038ca:	2b00      	cmp	r3, #0
  4038cc:	d008      	beq.n	4038e0 <hsmci_select_device+0x30>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  4038ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4038d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4038d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
  4038d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4038dc:	655a      	str	r2, [r3, #84]	; 0x54
  4038de:	e007      	b.n	4038f0 <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4038e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4038e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4038e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
  4038ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4038ee:	655a      	str	r2, [r3, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_cpu_hz());
  4038f0:	4b12      	ldr	r3, [pc, #72]	; (40393c <hsmci_select_device+0x8c>)
  4038f2:	4798      	blx	r3
  4038f4:	4603      	mov	r3, r0
  4038f6:	6838      	ldr	r0, [r7, #0]
  4038f8:	4619      	mov	r1, r3
  4038fa:	4b11      	ldr	r3, [pc, #68]	; (403940 <hsmci_select_device+0x90>)
  4038fc:	4798      	blx	r3

	switch (slot) {
  4038fe:	79fb      	ldrb	r3, [r7, #7]
  403900:	2b00      	cmp	r3, #0
  403902:	d102      	bne.n	40390a <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  403904:	2300      	movs	r3, #0
  403906:	60fb      	str	r3, [r7, #12]
		break;
  403908:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  40390a:	79bb      	ldrb	r3, [r7, #6]
  40390c:	2b04      	cmp	r3, #4
  40390e:	d006      	beq.n	40391e <hsmci_select_device+0x6e>
  403910:	2b08      	cmp	r3, #8
  403912:	d007      	beq.n	403924 <hsmci_select_device+0x74>
  403914:	2b01      	cmp	r3, #1
  403916:	d108      	bne.n	40392a <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  403918:	2300      	movs	r3, #0
  40391a:	60bb      	str	r3, [r7, #8]
		break;
  40391c:	e005      	b.n	40392a <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40391e:	2380      	movs	r3, #128	; 0x80
  403920:	60bb      	str	r3, [r7, #8]
		break;
  403922:	e002      	b.n	40392a <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  403924:	23c0      	movs	r3, #192	; 0xc0
  403926:	60bb      	str	r3, [r7, #8]
		break;
  403928:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40392a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40392e:	68f9      	ldr	r1, [r7, #12]
  403930:	68ba      	ldr	r2, [r7, #8]
  403932:	430a      	orrs	r2, r1
  403934:	60da      	str	r2, [r3, #12]
}
  403936:	3710      	adds	r7, #16
  403938:	46bd      	mov	sp, r7
  40393a:	bd80      	pop	{r7, pc}
  40393c:	00403605 	.word	0x00403605
  403940:	00403689 	.word	0x00403689

00403944 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  403944:	b480      	push	{r7}
  403946:	b083      	sub	sp, #12
  403948:	af00      	add	r7, sp, #0
  40394a:	4603      	mov	r3, r0
  40394c:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  40394e:	370c      	adds	r7, #12
  403950:	46bd      	mov	sp, r7
  403952:	f85d 7b04 	ldr.w	r7, [sp], #4
  403956:	4770      	bx	lr

00403958 <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  403958:	b480      	push	{r7}
  40395a:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40395c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403964:	6852      	ldr	r2, [r2, #4]
  403966:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  40396a:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  40396c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403970:	2200      	movs	r2, #0
  403972:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  403974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403978:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40397c:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40397e:	bf00      	nop
  403980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403986:	f003 0301 	and.w	r3, r3, #1
  40398a:	2b00      	cmp	r3, #0
  40398c:	d0f8      	beq.n	403980 <hsmci_send_clock+0x28>
}
  40398e:	46bd      	mov	sp, r7
  403990:	f85d 7b04 	ldr.w	r7, [sp], #4
  403994:	4770      	bx	lr
  403996:	bf00      	nop

00403998 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  403998:	b580      	push	{r7, lr}
  40399a:	b082      	sub	sp, #8
  40399c:	af00      	add	r7, sp, #0
  40399e:	6078      	str	r0, [r7, #4]
  4039a0:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4039a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4039a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4039aa:	6852      	ldr	r2, [r2, #4]
  4039ac:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4039b0:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4039b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4039b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4039ba:	6852      	ldr	r2, [r2, #4]
  4039bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4039c0:	605a      	str	r2, [r3, #4]
#endif
	HSMCI->HSMCI_BLKR = 0;
  4039c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4039c6:	2200      	movs	r2, #0
  4039c8:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4039ca:	2000      	movs	r0, #0
  4039cc:	6879      	ldr	r1, [r7, #4]
  4039ce:	683a      	ldr	r2, [r7, #0]
  4039d0:	4b03      	ldr	r3, [pc, #12]	; (4039e0 <hsmci_send_cmd+0x48>)
  4039d2:	4798      	blx	r3
  4039d4:	4603      	mov	r3, r0
}
  4039d6:	4618      	mov	r0, r3
  4039d8:	3708      	adds	r7, #8
  4039da:	46bd      	mov	sp, r7
  4039dc:	bd80      	pop	{r7, pc}
  4039de:	bf00      	nop
  4039e0:	00403755 	.word	0x00403755

004039e4 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  4039e4:	b480      	push	{r7}
  4039e6:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  4039e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4039ec:	6a1b      	ldr	r3, [r3, #32]
}
  4039ee:	4618      	mov	r0, r3
  4039f0:	46bd      	mov	sp, r7
  4039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039f6:	4770      	bx	lr

004039f8 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4039f8:	b480      	push	{r7}
  4039fa:	b085      	sub	sp, #20
  4039fc:	af00      	add	r7, sp, #0
  4039fe:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  403a00:	2300      	movs	r3, #0
  403a02:	73fb      	strb	r3, [r7, #15]
  403a04:	e025      	b.n	403a52 <hsmci_get_response_128+0x5a>
		response_32 = HSMCI->HSMCI_RSPR[0];
  403a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403a0a:	6a1b      	ldr	r3, [r3, #32]
  403a0c:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  403a0e:	68bb      	ldr	r3, [r7, #8]
  403a10:	0e1b      	lsrs	r3, r3, #24
  403a12:	b2da      	uxtb	r2, r3
  403a14:	687b      	ldr	r3, [r7, #4]
  403a16:	701a      	strb	r2, [r3, #0]
		response++;
  403a18:	687b      	ldr	r3, [r7, #4]
  403a1a:	3301      	adds	r3, #1
  403a1c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  403a1e:	68bb      	ldr	r3, [r7, #8]
  403a20:	0c1b      	lsrs	r3, r3, #16
  403a22:	b2da      	uxtb	r2, r3
  403a24:	687b      	ldr	r3, [r7, #4]
  403a26:	701a      	strb	r2, [r3, #0]
		response++;
  403a28:	687b      	ldr	r3, [r7, #4]
  403a2a:	3301      	adds	r3, #1
  403a2c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  403a2e:	68bb      	ldr	r3, [r7, #8]
  403a30:	0a1b      	lsrs	r3, r3, #8
  403a32:	b2da      	uxtb	r2, r3
  403a34:	687b      	ldr	r3, [r7, #4]
  403a36:	701a      	strb	r2, [r3, #0]
		response++;
  403a38:	687b      	ldr	r3, [r7, #4]
  403a3a:	3301      	adds	r3, #1
  403a3c:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  403a3e:	68bb      	ldr	r3, [r7, #8]
  403a40:	b2da      	uxtb	r2, r3
  403a42:	687b      	ldr	r3, [r7, #4]
  403a44:	701a      	strb	r2, [r3, #0]
		response++;
  403a46:	687b      	ldr	r3, [r7, #4]
  403a48:	3301      	adds	r3, #1
  403a4a:	607b      	str	r3, [r7, #4]

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  403a4c:	7bfb      	ldrb	r3, [r7, #15]
  403a4e:	3301      	adds	r3, #1
  403a50:	73fb      	strb	r3, [r7, #15]
  403a52:	7bfb      	ldrb	r3, [r7, #15]
  403a54:	2b03      	cmp	r3, #3
  403a56:	d9d6      	bls.n	403a06 <hsmci_get_response_128+0xe>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  403a58:	3714      	adds	r7, #20
  403a5a:	46bd      	mov	sp, r7
  403a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a60:	4770      	bx	lr
  403a62:	bf00      	nop

00403a64 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  403a64:	b580      	push	{r7, lr}
  403a66:	b086      	sub	sp, #24
  403a68:	af00      	add	r7, sp, #0
  403a6a:	60f8      	str	r0, [r7, #12]
  403a6c:	60b9      	str	r1, [r7, #8]
  403a6e:	80fa      	strh	r2, [r7, #6]
  403a70:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  403a72:	f897 3020 	ldrb.w	r3, [r7, #32]
  403a76:	2b00      	cmp	r3, #0
  403a78:	d008      	beq.n	403a8c <hsmci_adtc_start+0x28>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  403a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403a82:	6852      	ldr	r2, [r2, #4]
  403a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  403a88:	605a      	str	r2, [r3, #4]
  403a8a:	e007      	b.n	403a9c <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  403a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403a94:	6852      	ldr	r2, [r2, #4]
  403a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  403a9a:	605a      	str	r2, [r3, #4]
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  403a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403aa4:	6852      	ldr	r2, [r2, #4]
  403aa6:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
  403aaa:	605a      	str	r2, [r3, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  403aac:	88fb      	ldrh	r3, [r7, #6]
  403aae:	f003 0303 	and.w	r3, r3, #3
  403ab2:	2b00      	cmp	r3, #0
  403ab4:	d008      	beq.n	403ac8 <hsmci_adtc_start+0x64>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  403ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403abe:	6852      	ldr	r2, [r2, #4]
  403ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403ac4:	605a      	str	r2, [r3, #4]
  403ac6:	e007      	b.n	403ad8 <hsmci_adtc_start+0x74>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  403ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403ad0:	6852      	ldr	r2, [r2, #4]
  403ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403ad6:	605a      	str	r2, [r3, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  403ad8:	68fb      	ldr	r3, [r7, #12]
  403ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403ade:	2b00      	cmp	r3, #0
  403ae0:	d003      	beq.n	403aea <hsmci_adtc_start+0x86>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  403ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403ae6:	617b      	str	r3, [r7, #20]
  403ae8:	e002      	b.n	403af0 <hsmci_adtc_start+0x8c>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  403aea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  403aee:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  403af0:	68fb      	ldr	r3, [r7, #12]
  403af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403af6:	2b00      	cmp	r3, #0
  403af8:	d00a      	beq.n	403b10 <hsmci_adtc_start+0xac>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  403afa:	697b      	ldr	r3, [r7, #20]
  403afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403b00:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  403b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403b06:	88fa      	ldrh	r2, [r7, #6]
  403b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
  403b0c:	619a      	str	r2, [r3, #24]
  403b0e:	e028      	b.n	403b62 <hsmci_adtc_start+0xfe>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  403b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403b14:	88fa      	ldrh	r2, [r7, #6]
  403b16:	0411      	lsls	r1, r2, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  403b18:	88ba      	ldrh	r2, [r7, #4]
	if (cmd & SDMMC_CMD_SDIO_BYTE) {
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  403b1a:	430a      	orrs	r2, r1
  403b1c:	619a      	str	r2, [r3, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  403b1e:	68fb      	ldr	r3, [r7, #12]
  403b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  403b24:	2b00      	cmp	r3, #0
  403b26:	d004      	beq.n	403b32 <hsmci_adtc_start+0xce>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  403b28:	697b      	ldr	r3, [r7, #20]
  403b2a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  403b2e:	617b      	str	r3, [r7, #20]
  403b30:	e017      	b.n	403b62 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_STREAM) {
  403b32:	68fb      	ldr	r3, [r7, #12]
  403b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  403b38:	2b00      	cmp	r3, #0
  403b3a:	d004      	beq.n	403b46 <hsmci_adtc_start+0xe2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  403b3c:	697b      	ldr	r3, [r7, #20]
  403b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403b42:	617b      	str	r3, [r7, #20]
  403b44:	e00d      	b.n	403b62 <hsmci_adtc_start+0xfe>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  403b46:	68fb      	ldr	r3, [r7, #12]
  403b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  403b4c:	2b00      	cmp	r3, #0
  403b4e:	d108      	bne.n	403b62 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  403b50:	68fb      	ldr	r3, [r7, #12]
  403b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  403b56:	2b00      	cmp	r3, #0
  403b58:	d003      	beq.n	403b62 <hsmci_adtc_start+0xfe>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  403b5a:	697b      	ldr	r3, [r7, #20]
  403b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  403b60:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  403b62:	4b09      	ldr	r3, [pc, #36]	; (403b88 <hsmci_adtc_start+0x124>)
  403b64:	2200      	movs	r2, #0
  403b66:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  403b68:	4b08      	ldr	r3, [pc, #32]	; (403b8c <hsmci_adtc_start+0x128>)
  403b6a:	88fa      	ldrh	r2, [r7, #6]
  403b6c:	801a      	strh	r2, [r3, #0]
	hsmci_nb_block = nb_block;
  403b6e:	4b08      	ldr	r3, [pc, #32]	; (403b90 <hsmci_adtc_start+0x12c>)
  403b70:	88ba      	ldrh	r2, [r7, #4]
  403b72:	801a      	strh	r2, [r3, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  403b74:	6978      	ldr	r0, [r7, #20]
  403b76:	68f9      	ldr	r1, [r7, #12]
  403b78:	68ba      	ldr	r2, [r7, #8]
  403b7a:	4b06      	ldr	r3, [pc, #24]	; (403b94 <hsmci_adtc_start+0x130>)
  403b7c:	4798      	blx	r3
  403b7e:	4603      	mov	r3, r0
}
  403b80:	4618      	mov	r0, r3
  403b82:	3718      	adds	r7, #24
  403b84:	46bd      	mov	sp, r7
  403b86:	bd80      	pop	{r7, pc}
  403b88:	20001710 	.word	0x20001710
  403b8c:	20001714 	.word	0x20001714
  403b90:	20001716 	.word	0x20001716
  403b94:	00403755 	.word	0x00403755

00403b98 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  403b98:	b580      	push	{r7, lr}
  403b9a:	b084      	sub	sp, #16
  403b9c:	af00      	add	r7, sp, #0
  403b9e:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  403ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403ba6:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  403ba8:	68fa      	ldr	r2, [r7, #12]
  403baa:	4b1d      	ldr	r3, [pc, #116]	; (403c20 <hsmci_read_word+0x88>)
  403bac:	4013      	ands	r3, r2
  403bae:	2b00      	cmp	r3, #0
  403bb0:	d003      	beq.n	403bba <hsmci_read_word+0x22>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  403bb2:	4b1c      	ldr	r3, [pc, #112]	; (403c24 <hsmci_read_word+0x8c>)
  403bb4:	4798      	blx	r3
			return false;
  403bb6:	2300      	movs	r3, #0
  403bb8:	e02d      	b.n	403c16 <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  403bba:	68fb      	ldr	r3, [r7, #12]
  403bbc:	f003 0302 	and.w	r3, r3, #2
  403bc0:	2b00      	cmp	r3, #0
  403bc2:	d0ed      	beq.n	403ba0 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  403bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403bca:	687b      	ldr	r3, [r7, #4]
  403bcc:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  403bce:	4b16      	ldr	r3, [pc, #88]	; (403c28 <hsmci_read_word+0x90>)
  403bd0:	681b      	ldr	r3, [r3, #0]
  403bd2:	1d1a      	adds	r2, r3, #4
  403bd4:	4b14      	ldr	r3, [pc, #80]	; (403c28 <hsmci_read_word+0x90>)
  403bd6:	601a      	str	r2, [r3, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  403bd8:	4b14      	ldr	r3, [pc, #80]	; (403c2c <hsmci_read_word+0x94>)
  403bda:	881b      	ldrh	r3, [r3, #0]
  403bdc:	4a14      	ldr	r2, [pc, #80]	; (403c30 <hsmci_read_word+0x98>)
  403bde:	8812      	ldrh	r2, [r2, #0]
  403be0:	fb02 f203 	mul.w	r2, r2, r3
  403be4:	4b10      	ldr	r3, [pc, #64]	; (403c28 <hsmci_read_word+0x90>)
  403be6:	681b      	ldr	r3, [r3, #0]
  403be8:	429a      	cmp	r2, r3
  403bea:	d901      	bls.n	403bf0 <hsmci_read_word+0x58>
		return true;
  403bec:	2301      	movs	r3, #1
  403bee:	e012      	b.n	403c16 <hsmci_read_word+0x7e>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  403bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403bf6:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  403bf8:	68fa      	ldr	r2, [r7, #12]
  403bfa:	4b09      	ldr	r3, [pc, #36]	; (403c20 <hsmci_read_word+0x88>)
  403bfc:	4013      	ands	r3, r2
  403bfe:	2b00      	cmp	r3, #0
  403c00:	d003      	beq.n	403c0a <hsmci_read_word+0x72>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  403c02:	4b08      	ldr	r3, [pc, #32]	; (403c24 <hsmci_read_word+0x8c>)
  403c04:	4798      	blx	r3
			return false;
  403c06:	2300      	movs	r3, #0
  403c08:	e005      	b.n	403c16 <hsmci_read_word+0x7e>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  403c0a:	68fb      	ldr	r3, [r7, #12]
  403c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403c10:	2b00      	cmp	r3, #0
  403c12:	d0ed      	beq.n	403bf0 <hsmci_read_word+0x58>
	return true;
  403c14:	2301      	movs	r3, #1
}
  403c16:	4618      	mov	r0, r3
  403c18:	3710      	adds	r7, #16
  403c1a:	46bd      	mov	sp, r7
  403c1c:	bd80      	pop	{r7, pc}
  403c1e:	bf00      	nop
  403c20:	c0600000 	.word	0xc0600000
  403c24:	00403619 	.word	0x00403619
  403c28:	20001710 	.word	0x20001710
  403c2c:	20001714 	.word	0x20001714
  403c30:	20001716 	.word	0x20001716

00403c34 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  403c34:	b480      	push	{r7}
  403c36:	b085      	sub	sp, #20
  403c38:	af00      	add	r7, sp, #0
  403c3a:	6078      	str	r0, [r7, #4]
  403c3c:	460b      	mov	r3, r1
  403c3e:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  403c40:	887b      	ldrh	r3, [r7, #2]
  403c42:	4a26      	ldr	r2, [pc, #152]	; (403cdc <hsmci_start_read_blocks+0xa8>)
  403c44:	8812      	ldrh	r2, [r2, #0]
  403c46:	fb02 f303 	mul.w	r3, r2, r3
  403c4a:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  403c4c:	687b      	ldr	r3, [r7, #4]
  403c4e:	f003 0303 	and.w	r3, r3, #3
  403c52:	2b00      	cmp	r3, #0
  403c54:	d105      	bne.n	403c62 <hsmci_start_read_blocks+0x2e>
  403c56:	4b21      	ldr	r3, [pc, #132]	; (403cdc <hsmci_start_read_blocks+0xa8>)
  403c58:	881b      	ldrh	r3, [r3, #0]
  403c5a:	f003 0303 	and.w	r3, r3, #3
  403c5e:	2b00      	cmp	r3, #0
  403c60:	d008      	beq.n	403c74 <hsmci_start_read_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  403c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403c6a:	6852      	ldr	r2, [r2, #4]
  403c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403c70:	605a      	str	r2, [r3, #4]
  403c72:	e007      	b.n	403c84 <hsmci_start_read_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  403c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403c7c:	6852      	ldr	r2, [r2, #4]
  403c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403c82:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  403c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403c88:	687a      	ldr	r2, [r7, #4]
  403c8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  403c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403c96:	685b      	ldr	r3, [r3, #4]
  403c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  403c9c:	2b00      	cmp	r3, #0
  403c9e:	d102      	bne.n	403ca6 <hsmci_start_read_blocks+0x72>
  403ca0:	68fb      	ldr	r3, [r7, #12]
  403ca2:	089b      	lsrs	r3, r3, #2
  403ca4:	e000      	b.n	403ca8 <hsmci_start_read_blocks+0x74>
  403ca6:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  403ca8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  403cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403cb0:	2200      	movs	r2, #0
  403cb2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  403cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403cba:	2201      	movs	r2, #1
  403cbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  403cc0:	4b07      	ldr	r3, [pc, #28]	; (403ce0 <hsmci_start_read_blocks+0xac>)
  403cc2:	681a      	ldr	r2, [r3, #0]
  403cc4:	68fb      	ldr	r3, [r7, #12]
  403cc6:	441a      	add	r2, r3
  403cc8:	4b05      	ldr	r3, [pc, #20]	; (403ce0 <hsmci_start_read_blocks+0xac>)
  403cca:	601a      	str	r2, [r3, #0]
	return true;
  403ccc:	2301      	movs	r3, #1
}
  403cce:	4618      	mov	r0, r3
  403cd0:	3714      	adds	r7, #20
  403cd2:	46bd      	mov	sp, r7
  403cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cd8:	4770      	bx	lr
  403cda:	bf00      	nop
  403cdc:	20001714 	.word	0x20001714
  403ce0:	20001710 	.word	0x20001710

00403ce4 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  403ce4:	b580      	push	{r7, lr}
  403ce6:	b082      	sub	sp, #8
  403ce8:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  403cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403cf0:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  403cf2:	687a      	ldr	r2, [r7, #4]
  403cf4:	4b1a      	ldr	r3, [pc, #104]	; (403d60 <hsmci_wait_end_of_read_blocks+0x7c>)
  403cf6:	4013      	ands	r3, r2
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	d009      	beq.n	403d10 <hsmci_wait_end_of_read_blocks+0x2c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  403cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403d00:	f240 2202 	movw	r2, #514	; 0x202
  403d04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  403d08:	4b16      	ldr	r3, [pc, #88]	; (403d64 <hsmci_wait_end_of_read_blocks+0x80>)
  403d0a:	4798      	blx	r3
			return false;
  403d0c:	2300      	movs	r3, #0
  403d0e:	e023      	b.n	403d58 <hsmci_wait_end_of_read_blocks+0x74>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  403d10:	687b      	ldr	r3, [r7, #4]
  403d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  403d16:	2b00      	cmp	r3, #0
  403d18:	d0e7      	beq.n	403cea <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  403d1a:	4b13      	ldr	r3, [pc, #76]	; (403d68 <hsmci_wait_end_of_read_blocks+0x84>)
  403d1c:	881b      	ldrh	r3, [r3, #0]
  403d1e:	4a13      	ldr	r2, [pc, #76]	; (403d6c <hsmci_wait_end_of_read_blocks+0x88>)
  403d20:	8812      	ldrh	r2, [r2, #0]
  403d22:	fb02 f203 	mul.w	r2, r2, r3
  403d26:	4b12      	ldr	r3, [pc, #72]	; (403d70 <hsmci_wait_end_of_read_blocks+0x8c>)
  403d28:	681b      	ldr	r3, [r3, #0]
  403d2a:	429a      	cmp	r2, r3
  403d2c:	d901      	bls.n	403d32 <hsmci_wait_end_of_read_blocks+0x4e>
		return true;
  403d2e:	2301      	movs	r3, #1
  403d30:	e012      	b.n	403d58 <hsmci_wait_end_of_read_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  403d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403d38:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  403d3a:	687a      	ldr	r2, [r7, #4]
  403d3c:	4b08      	ldr	r3, [pc, #32]	; (403d60 <hsmci_wait_end_of_read_blocks+0x7c>)
  403d3e:	4013      	ands	r3, r2
  403d40:	2b00      	cmp	r3, #0
  403d42:	d003      	beq.n	403d4c <hsmci_wait_end_of_read_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  403d44:	4b07      	ldr	r3, [pc, #28]	; (403d64 <hsmci_wait_end_of_read_blocks+0x80>)
  403d46:	4798      	blx	r3
			return false;
  403d48:	2300      	movs	r3, #0
  403d4a:	e005      	b.n	403d58 <hsmci_wait_end_of_read_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  403d4c:	687b      	ldr	r3, [r7, #4]
  403d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403d52:	2b00      	cmp	r3, #0
  403d54:	d0ed      	beq.n	403d32 <hsmci_wait_end_of_read_blocks+0x4e>
	return true;
  403d56:	2301      	movs	r3, #1
}
  403d58:	4618      	mov	r0, r3
  403d5a:	3708      	adds	r7, #8
  403d5c:	46bd      	mov	sp, r7
  403d5e:	bd80      	pop	{r7, pc}
  403d60:	c0600000 	.word	0xc0600000
  403d64:	00403619 	.word	0x00403619
  403d68:	20001714 	.word	0x20001714
  403d6c:	20001716 	.word	0x20001716
  403d70:	20001710 	.word	0x20001710

00403d74 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  403d74:	b480      	push	{r7}
  403d76:	b085      	sub	sp, #20
  403d78:	af00      	add	r7, sp, #0
  403d7a:	6078      	str	r0, [r7, #4]
  403d7c:	460b      	mov	r3, r1
  403d7e:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  403d80:	887b      	ldrh	r3, [r7, #2]
  403d82:	4a26      	ldr	r2, [pc, #152]	; (403e1c <hsmci_start_write_blocks+0xa8>)
  403d84:	8812      	ldrh	r2, [r2, #0]
  403d86:	fb02 f303 	mul.w	r3, r2, r3
  403d8a:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  403d8c:	687b      	ldr	r3, [r7, #4]
  403d8e:	f003 0303 	and.w	r3, r3, #3
  403d92:	2b00      	cmp	r3, #0
  403d94:	d105      	bne.n	403da2 <hsmci_start_write_blocks+0x2e>
  403d96:	4b21      	ldr	r3, [pc, #132]	; (403e1c <hsmci_start_write_blocks+0xa8>)
  403d98:	881b      	ldrh	r3, [r3, #0]
  403d9a:	f003 0303 	and.w	r3, r3, #3
  403d9e:	2b00      	cmp	r3, #0
  403da0:	d008      	beq.n	403db4 <hsmci_start_write_blocks+0x40>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  403da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403daa:	6852      	ldr	r2, [r2, #4]
  403dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403db0:	605a      	str	r2, [r3, #4]
  403db2:	e007      	b.n	403dc4 <hsmci_start_write_blocks+0x50>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  403db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403dbc:	6852      	ldr	r2, [r2, #4]
  403dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403dc2:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  403dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403dc8:	687a      	ldr	r2, [r7, #4]
  403dca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  403dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403dd6:	685b      	ldr	r3, [r3, #4]
  403dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  403ddc:	2b00      	cmp	r3, #0
  403dde:	d102      	bne.n	403de6 <hsmci_start_write_blocks+0x72>
  403de0:	68fb      	ldr	r3, [r7, #12]
  403de2:	089b      	lsrs	r3, r3, #2
  403de4:	e000      	b.n	403de8 <hsmci_start_write_blocks+0x74>
  403de6:	68fb      	ldr	r3, [r7, #12]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  403de8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  403dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403df0:	2200      	movs	r2, #0
  403df2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  403df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
  403dfe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  403e02:	4b07      	ldr	r3, [pc, #28]	; (403e20 <hsmci_start_write_blocks+0xac>)
  403e04:	681a      	ldr	r2, [r3, #0]
  403e06:	68fb      	ldr	r3, [r7, #12]
  403e08:	441a      	add	r2, r3
  403e0a:	4b05      	ldr	r3, [pc, #20]	; (403e20 <hsmci_start_write_blocks+0xac>)
  403e0c:	601a      	str	r2, [r3, #0]
	return true;
  403e0e:	2301      	movs	r3, #1
}
  403e10:	4618      	mov	r0, r3
  403e12:	3714      	adds	r7, #20
  403e14:	46bd      	mov	sp, r7
  403e16:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e1a:	4770      	bx	lr
  403e1c:	20001714 	.word	0x20001714
  403e20:	20001710 	.word	0x20001710

00403e24 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  403e24:	b580      	push	{r7, lr}
  403e26:	b082      	sub	sp, #8
  403e28:	af00      	add	r7, sp, #0
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  403e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403e30:	607b      	str	r3, [r7, #4]
		if (sr &
  403e32:	687a      	ldr	r2, [r7, #4]
  403e34:	4b1a      	ldr	r3, [pc, #104]	; (403ea0 <hsmci_wait_end_of_write_blocks+0x7c>)
  403e36:	4013      	ands	r3, r2
  403e38:	2b00      	cmp	r3, #0
  403e3a:	d009      	beq.n	403e50 <hsmci_wait_end_of_write_blocks+0x2c>
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  403e3c:	4b19      	ldr	r3, [pc, #100]	; (403ea4 <hsmci_wait_end_of_write_blocks+0x80>)
  403e3e:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  403e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403e44:	f240 2202 	movw	r2, #514	; 0x202
  403e48:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  403e4c:	2300      	movs	r3, #0
  403e4e:	e023      	b.n	403e98 <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  403e50:	687b      	ldr	r3, [r7, #4]
  403e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403e56:	2b00      	cmp	r3, #0
  403e58:	d0e7      	beq.n	403e2a <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  403e5a:	4b13      	ldr	r3, [pc, #76]	; (403ea8 <hsmci_wait_end_of_write_blocks+0x84>)
  403e5c:	881b      	ldrh	r3, [r3, #0]
  403e5e:	4a13      	ldr	r2, [pc, #76]	; (403eac <hsmci_wait_end_of_write_blocks+0x88>)
  403e60:	8812      	ldrh	r2, [r2, #0]
  403e62:	fb02 f203 	mul.w	r2, r2, r3
  403e66:	4b12      	ldr	r3, [pc, #72]	; (403eb0 <hsmci_wait_end_of_write_blocks+0x8c>)
  403e68:	681b      	ldr	r3, [r3, #0]
  403e6a:	429a      	cmp	r2, r3
  403e6c:	d901      	bls.n	403e72 <hsmci_wait_end_of_write_blocks+0x4e>
		return true;
  403e6e:	2301      	movs	r3, #1
  403e70:	e012      	b.n	403e98 <hsmci_wait_end_of_write_blocks+0x74>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  403e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403e78:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  403e7a:	687a      	ldr	r2, [r7, #4]
  403e7c:	4b08      	ldr	r3, [pc, #32]	; (403ea0 <hsmci_wait_end_of_write_blocks+0x7c>)
  403e7e:	4013      	ands	r3, r2
  403e80:	2b00      	cmp	r3, #0
  403e82:	d003      	beq.n	403e8c <hsmci_wait_end_of_write_blocks+0x68>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  403e84:	4b07      	ldr	r3, [pc, #28]	; (403ea4 <hsmci_wait_end_of_write_blocks+0x80>)
  403e86:	4798      	blx	r3
			return false;
  403e88:	2300      	movs	r3, #0
  403e8a:	e005      	b.n	403e98 <hsmci_wait_end_of_write_blocks+0x74>
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  403e8c:	687b      	ldr	r3, [r7, #4]
  403e8e:	f003 0320 	and.w	r3, r3, #32
  403e92:	2b00      	cmp	r3, #0
  403e94:	d0ed      	beq.n	403e72 <hsmci_wait_end_of_write_blocks+0x4e>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  403e96:	2301      	movs	r3, #1
}
  403e98:	4618      	mov	r0, r3
  403e9a:	3708      	adds	r7, #8
  403e9c:	46bd      	mov	sp, r7
  403e9e:	bd80      	pop	{r7, pc}
  403ea0:	c0600000 	.word	0xc0600000
  403ea4:	00403619 	.word	0x00403619
  403ea8:	20001714 	.word	0x20001714
  403eac:	20001716 	.word	0x20001716
  403eb0:	20001710 	.word	0x20001710

00403eb4 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  403eb4:	b480      	push	{r7}
  403eb6:	b083      	sub	sp, #12
  403eb8:	af00      	add	r7, sp, #0
  403eba:	6078      	str	r0, [r7, #4]
  403ebc:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  403ebe:	683b      	ldr	r3, [r7, #0]
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d006      	beq.n	403ed2 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  403ec4:	687b      	ldr	r3, [r7, #4]
  403ec6:	685b      	ldr	r3, [r3, #4]
  403ec8:	f043 0201 	orr.w	r2, r3, #1
  403ecc:	687b      	ldr	r3, [r7, #4]
  403ece:	605a      	str	r2, [r3, #4]
  403ed0:	e005      	b.n	403ede <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  403ed2:	687b      	ldr	r3, [r7, #4]
  403ed4:	685b      	ldr	r3, [r3, #4]
  403ed6:	f023 0201 	bic.w	r2, r3, #1
  403eda:	687b      	ldr	r3, [r7, #4]
  403edc:	605a      	str	r2, [r3, #4]
	}
}
  403ede:	370c      	adds	r7, #12
  403ee0:	46bd      	mov	sp, r7
  403ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ee6:	4770      	bx	lr

00403ee8 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  403ee8:	b480      	push	{r7}
  403eea:	b087      	sub	sp, #28
  403eec:	af00      	add	r7, sp, #0
  403eee:	60f8      	str	r0, [r7, #12]
  403ef0:	60b9      	str	r1, [r7, #8]
  403ef2:	607a      	str	r2, [r7, #4]
  403ef4:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  403ef6:	68fb      	ldr	r3, [r7, #12]
  403ef8:	689b      	ldr	r3, [r3, #8]
  403efa:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  403efc:	e002      	b.n	403f04 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  403efe:	68fb      	ldr	r3, [r7, #12]
  403f00:	689b      	ldr	r3, [r3, #8]
  403f02:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  403f04:	68fb      	ldr	r3, [r7, #12]
  403f06:	689a      	ldr	r2, [r3, #8]
  403f08:	697b      	ldr	r3, [r7, #20]
  403f0a:	429a      	cmp	r2, r3
  403f0c:	d1f7      	bne.n	403efe <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  403f0e:	68bb      	ldr	r3, [r7, #8]
  403f10:	2b00      	cmp	r3, #0
  403f12:	d01c      	beq.n	403f4e <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  403f14:	697b      	ldr	r3, [r7, #20]
  403f16:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  403f1a:	0c1b      	lsrs	r3, r3, #16
  403f1c:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  403f1e:	693b      	ldr	r3, [r7, #16]
  403f20:	091a      	lsrs	r2, r3, #4
  403f22:	4613      	mov	r3, r2
  403f24:	009b      	lsls	r3, r3, #2
  403f26:	4413      	add	r3, r2
  403f28:	005b      	lsls	r3, r3, #1
  403f2a:	461a      	mov	r2, r3
  403f2c:	693b      	ldr	r3, [r7, #16]
  403f2e:	f003 030f 	and.w	r3, r3, #15
  403f32:	441a      	add	r2, r3
  403f34:	68bb      	ldr	r3, [r7, #8]
  403f36:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  403f38:	697b      	ldr	r3, [r7, #20]
  403f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  403f3e:	2b00      	cmp	r3, #0
  403f40:	d005      	beq.n	403f4e <rtc_get_time+0x66>
			*pul_hour += 12;
  403f42:	68bb      	ldr	r3, [r7, #8]
  403f44:	681b      	ldr	r3, [r3, #0]
  403f46:	f103 020c 	add.w	r2, r3, #12
  403f4a:	68bb      	ldr	r3, [r7, #8]
  403f4c:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  403f4e:	687b      	ldr	r3, [r7, #4]
  403f50:	2b00      	cmp	r3, #0
  403f52:	d011      	beq.n	403f78 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  403f54:	697b      	ldr	r3, [r7, #20]
  403f56:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  403f5a:	0a1b      	lsrs	r3, r3, #8
  403f5c:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  403f5e:	693b      	ldr	r3, [r7, #16]
  403f60:	091a      	lsrs	r2, r3, #4
  403f62:	4613      	mov	r3, r2
  403f64:	009b      	lsls	r3, r3, #2
  403f66:	4413      	add	r3, r2
  403f68:	005b      	lsls	r3, r3, #1
  403f6a:	461a      	mov	r2, r3
  403f6c:	693b      	ldr	r3, [r7, #16]
  403f6e:	f003 030f 	and.w	r3, r3, #15
  403f72:	441a      	add	r2, r3
  403f74:	687b      	ldr	r3, [r7, #4]
  403f76:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  403f78:	683b      	ldr	r3, [r7, #0]
  403f7a:	2b00      	cmp	r3, #0
  403f7c:	d010      	beq.n	403fa0 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  403f7e:	697b      	ldr	r3, [r7, #20]
  403f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403f84:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  403f86:	693b      	ldr	r3, [r7, #16]
  403f88:	091a      	lsrs	r2, r3, #4
  403f8a:	4613      	mov	r3, r2
  403f8c:	009b      	lsls	r3, r3, #2
  403f8e:	4413      	add	r3, r2
  403f90:	005b      	lsls	r3, r3, #1
  403f92:	461a      	mov	r2, r3
  403f94:	693b      	ldr	r3, [r7, #16]
  403f96:	f003 030f 	and.w	r3, r3, #15
  403f9a:	441a      	add	r2, r3
  403f9c:	683b      	ldr	r3, [r7, #0]
  403f9e:	601a      	str	r2, [r3, #0]
	}
}
  403fa0:	371c      	adds	r7, #28
  403fa2:	46bd      	mov	sp, r7
  403fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fa8:	4770      	bx	lr
  403faa:	bf00      	nop

00403fac <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  403fac:	b480      	push	{r7}
  403fae:	b087      	sub	sp, #28
  403fb0:	af00      	add	r7, sp, #0
  403fb2:	60f8      	str	r0, [r7, #12]
  403fb4:	60b9      	str	r1, [r7, #8]
  403fb6:	607a      	str	r2, [r7, #4]
  403fb8:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  403fba:	2300      	movs	r3, #0
  403fbc:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  403fbe:	68fb      	ldr	r3, [r7, #12]
  403fc0:	685b      	ldr	r3, [r3, #4]
  403fc2:	f003 0301 	and.w	r3, r3, #1
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	d009      	beq.n	403fde <rtc_set_time+0x32>
		if (ul_hour > 12) {
  403fca:	68bb      	ldr	r3, [r7, #8]
  403fcc:	2b0c      	cmp	r3, #12
  403fce:	d906      	bls.n	403fde <rtc_set_time+0x32>
			ul_hour -= 12;
  403fd0:	68bb      	ldr	r3, [r7, #8]
  403fd2:	3b0c      	subs	r3, #12
  403fd4:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  403fd6:	697b      	ldr	r3, [r7, #20]
  403fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403fdc:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  403fde:	68ba      	ldr	r2, [r7, #8]
  403fe0:	4b33      	ldr	r3, [pc, #204]	; (4040b0 <rtc_set_time+0x104>)
  403fe2:	fba3 1302 	umull	r1, r3, r3, r2
  403fe6:	08db      	lsrs	r3, r3, #3
  403fe8:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  403fea:	68b9      	ldr	r1, [r7, #8]
  403fec:	4b30      	ldr	r3, [pc, #192]	; (4040b0 <rtc_set_time+0x104>)
  403fee:	fba3 2301 	umull	r2, r3, r3, r1
  403ff2:	08da      	lsrs	r2, r3, #3
  403ff4:	4613      	mov	r3, r2
  403ff6:	009b      	lsls	r3, r3, #2
  403ff8:	4413      	add	r3, r2
  403ffa:	005b      	lsls	r3, r3, #1
  403ffc:	1aca      	subs	r2, r1, r3
  403ffe:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  404000:	4303      	orrs	r3, r0
  404002:	697a      	ldr	r2, [r7, #20]
  404004:	4313      	orrs	r3, r2
  404006:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  404008:	687a      	ldr	r2, [r7, #4]
  40400a:	4b29      	ldr	r3, [pc, #164]	; (4040b0 <rtc_set_time+0x104>)
  40400c:	fba3 1302 	umull	r1, r3, r3, r2
  404010:	08db      	lsrs	r3, r3, #3
  404012:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  404014:	6879      	ldr	r1, [r7, #4]
  404016:	4b26      	ldr	r3, [pc, #152]	; (4040b0 <rtc_set_time+0x104>)
  404018:	fba3 2301 	umull	r2, r3, r3, r1
  40401c:	08da      	lsrs	r2, r3, #3
  40401e:	4613      	mov	r3, r2
  404020:	009b      	lsls	r3, r3, #2
  404022:	4413      	add	r3, r2
  404024:	005b      	lsls	r3, r3, #1
  404026:	1aca      	subs	r2, r1, r3
  404028:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40402a:	4303      	orrs	r3, r0
  40402c:	697a      	ldr	r2, [r7, #20]
  40402e:	4313      	orrs	r3, r2
  404030:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  404032:	683a      	ldr	r2, [r7, #0]
  404034:	4b1e      	ldr	r3, [pc, #120]	; (4040b0 <rtc_set_time+0x104>)
  404036:	fba3 1302 	umull	r1, r3, r3, r2
  40403a:	08db      	lsrs	r3, r3, #3
  40403c:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40403e:	6839      	ldr	r1, [r7, #0]
  404040:	4b1b      	ldr	r3, [pc, #108]	; (4040b0 <rtc_set_time+0x104>)
  404042:	fba3 2301 	umull	r2, r3, r3, r1
  404046:	08da      	lsrs	r2, r3, #3
  404048:	4613      	mov	r3, r2
  40404a:	009b      	lsls	r3, r3, #2
  40404c:	4413      	add	r3, r2
  40404e:	005b      	lsls	r3, r3, #1
  404050:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  404052:	ea40 0302 	orr.w	r3, r0, r2
  404056:	697a      	ldr	r2, [r7, #20]
  404058:	4313      	orrs	r3, r2
  40405a:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40405c:	68fb      	ldr	r3, [r7, #12]
  40405e:	681b      	ldr	r3, [r3, #0]
  404060:	f043 0201 	orr.w	r2, r3, #1
  404064:	68fb      	ldr	r3, [r7, #12]
  404066:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  404068:	bf00      	nop
  40406a:	68fb      	ldr	r3, [r7, #12]
  40406c:	699b      	ldr	r3, [r3, #24]
  40406e:	f003 0301 	and.w	r3, r3, #1
  404072:	2b00      	cmp	r3, #0
  404074:	d0f9      	beq.n	40406a <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  404076:	68fb      	ldr	r3, [r7, #12]
  404078:	2201      	movs	r2, #1
  40407a:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  40407c:	68fb      	ldr	r3, [r7, #12]
  40407e:	697a      	ldr	r2, [r7, #20]
  404080:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  404082:	68fb      	ldr	r3, [r7, #12]
  404084:	681b      	ldr	r3, [r3, #0]
  404086:	f023 0201 	bic.w	r2, r3, #1
  40408a:	68fb      	ldr	r3, [r7, #12]
  40408c:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40408e:	68fb      	ldr	r3, [r7, #12]
  404090:	69db      	ldr	r3, [r3, #28]
  404092:	f043 0204 	orr.w	r2, r3, #4
  404096:	68fb      	ldr	r3, [r7, #12]
  404098:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40409a:	68fb      	ldr	r3, [r7, #12]
  40409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40409e:	f003 0301 	and.w	r3, r3, #1
}
  4040a2:	4618      	mov	r0, r3
  4040a4:	371c      	adds	r7, #28
  4040a6:	46bd      	mov	sp, r7
  4040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ac:	4770      	bx	lr
  4040ae:	bf00      	nop
  4040b0:	cccccccd 	.word	0xcccccccd

004040b4 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4040b4:	b480      	push	{r7}
  4040b6:	b089      	sub	sp, #36	; 0x24
  4040b8:	af00      	add	r7, sp, #0
  4040ba:	60f8      	str	r0, [r7, #12]
  4040bc:	60b9      	str	r1, [r7, #8]
  4040be:	607a      	str	r2, [r7, #4]
  4040c0:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4040c2:	68fb      	ldr	r3, [r7, #12]
  4040c4:	68db      	ldr	r3, [r3, #12]
  4040c6:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  4040c8:	e002      	b.n	4040d0 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  4040ca:	68fb      	ldr	r3, [r7, #12]
  4040cc:	68db      	ldr	r3, [r3, #12]
  4040ce:	61fb      	str	r3, [r7, #28]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  4040d0:	68fb      	ldr	r3, [r7, #12]
  4040d2:	68da      	ldr	r2, [r3, #12]
  4040d4:	69fb      	ldr	r3, [r7, #28]
  4040d6:	429a      	cmp	r2, r3
  4040d8:	d1f7      	bne.n	4040ca <rtc_get_date+0x16>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  4040da:	68bb      	ldr	r3, [r7, #8]
  4040dc:	2b00      	cmp	r3, #0
  4040de:	d025      	beq.n	40412c <rtc_get_date+0x78>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  4040e0:	69fb      	ldr	r3, [r7, #28]
  4040e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4040e6:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4040e8:	69bb      	ldr	r3, [r7, #24]
  4040ea:	091a      	lsrs	r2, r3, #4
  4040ec:	4613      	mov	r3, r2
  4040ee:	009b      	lsls	r3, r3, #2
  4040f0:	4413      	add	r3, r2
  4040f2:	005b      	lsls	r3, r3, #1
  4040f4:	461a      	mov	r2, r3
  4040f6:	69bb      	ldr	r3, [r7, #24]
  4040f8:	f003 030f 	and.w	r3, r3, #15
  4040fc:	4413      	add	r3, r2
  4040fe:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  404100:	69fb      	ldr	r3, [r7, #28]
  404102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  404106:	0a1b      	lsrs	r3, r3, #8
  404108:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40410a:	697b      	ldr	r3, [r7, #20]
  40410c:	2264      	movs	r2, #100	; 0x64
  40410e:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404112:	69bb      	ldr	r3, [r7, #24]
  404114:	091a      	lsrs	r2, r3, #4
  404116:	4613      	mov	r3, r2
  404118:	009b      	lsls	r3, r3, #2
  40411a:	4413      	add	r3, r2
  40411c:	005b      	lsls	r3, r3, #1
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40411e:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404120:	69bb      	ldr	r3, [r7, #24]
  404122:	f003 030f 	and.w	r3, r3, #15
  404126:	441a      	add	r2, r3
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  404128:	68bb      	ldr	r3, [r7, #8]
  40412a:	601a      	str	r2, [r3, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  40412c:	687b      	ldr	r3, [r7, #4]
  40412e:	2b00      	cmp	r3, #0
  404130:	d011      	beq.n	404156 <rtc_get_date+0xa2>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  404132:	69fb      	ldr	r3, [r7, #28]
  404134:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  404138:	0c1b      	lsrs	r3, r3, #16
  40413a:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40413c:	69bb      	ldr	r3, [r7, #24]
  40413e:	091a      	lsrs	r2, r3, #4
  404140:	4613      	mov	r3, r2
  404142:	009b      	lsls	r3, r3, #2
  404144:	4413      	add	r3, r2
  404146:	005b      	lsls	r3, r3, #1
  404148:	461a      	mov	r2, r3
  40414a:	69bb      	ldr	r3, [r7, #24]
  40414c:	f003 030f 	and.w	r3, r3, #15
  404150:	441a      	add	r2, r3
  404152:	687b      	ldr	r3, [r7, #4]
  404154:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  404156:	683b      	ldr	r3, [r7, #0]
  404158:	2b00      	cmp	r3, #0
  40415a:	d011      	beq.n	404180 <rtc_get_date+0xcc>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  40415c:	69fb      	ldr	r3, [r7, #28]
  40415e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  404162:	0e1b      	lsrs	r3, r3, #24
  404164:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404166:	69bb      	ldr	r3, [r7, #24]
  404168:	091a      	lsrs	r2, r3, #4
  40416a:	4613      	mov	r3, r2
  40416c:	009b      	lsls	r3, r3, #2
  40416e:	4413      	add	r3, r2
  404170:	005b      	lsls	r3, r3, #1
  404172:	461a      	mov	r2, r3
  404174:	69bb      	ldr	r3, [r7, #24]
  404176:	f003 030f 	and.w	r3, r3, #15
  40417a:	441a      	add	r2, r3
  40417c:	683b      	ldr	r3, [r7, #0]
  40417e:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  404180:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404182:	2b00      	cmp	r3, #0
  404184:	d005      	beq.n	404192 <rtc_get_date+0xde>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  404186:	69fb      	ldr	r3, [r7, #28]
  404188:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
  40418c:	0d5a      	lsrs	r2, r3, #21
  40418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404190:	601a      	str	r2, [r3, #0]
	}
}
  404192:	3724      	adds	r7, #36	; 0x24
  404194:	46bd      	mov	sp, r7
  404196:	f85d 7b04 	ldr.w	r7, [sp], #4
  40419a:	4770      	bx	lr

0040419c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40419c:	b480      	push	{r7}
  40419e:	b087      	sub	sp, #28
  4041a0:	af00      	add	r7, sp, #0
  4041a2:	60f8      	str	r0, [r7, #12]
  4041a4:	60b9      	str	r1, [r7, #8]
  4041a6:	607a      	str	r2, [r7, #4]
  4041a8:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  4041aa:	2300      	movs	r3, #0
  4041ac:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4041ae:	68ba      	ldr	r2, [r7, #8]
  4041b0:	4b46      	ldr	r3, [pc, #280]	; (4042cc <rtc_set_date+0x130>)
  4041b2:	fba3 1302 	umull	r1, r3, r3, r2
  4041b6:	099b      	lsrs	r3, r3, #6
  4041b8:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4041ba:	68ba      	ldr	r2, [r7, #8]
  4041bc:	4b44      	ldr	r3, [pc, #272]	; (4042d0 <rtc_set_date+0x134>)
  4041be:	fba3 1302 	umull	r1, r3, r3, r2
  4041c2:	0959      	lsrs	r1, r3, #5
  4041c4:	4b43      	ldr	r3, [pc, #268]	; (4042d4 <rtc_set_date+0x138>)
  4041c6:	fba3 2301 	umull	r2, r3, r3, r1
  4041ca:	08da      	lsrs	r2, r3, #3
  4041cc:	4613      	mov	r3, r2
  4041ce:	009b      	lsls	r3, r3, #2
  4041d0:	4413      	add	r3, r2
  4041d2:	005b      	lsls	r3, r3, #1
  4041d4:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  4041d6:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4041da:	697a      	ldr	r2, [r7, #20]
  4041dc:	4313      	orrs	r3, r2
  4041de:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4041e0:	68ba      	ldr	r2, [r7, #8]
  4041e2:	4b3c      	ldr	r3, [pc, #240]	; (4042d4 <rtc_set_date+0x138>)
  4041e4:	fba3 1302 	umull	r1, r3, r3, r2
  4041e8:	08d9      	lsrs	r1, r3, #3
  4041ea:	4b3a      	ldr	r3, [pc, #232]	; (4042d4 <rtc_set_date+0x138>)
  4041ec:	fba3 2301 	umull	r2, r3, r3, r1
  4041f0:	08da      	lsrs	r2, r3, #3
  4041f2:	4613      	mov	r3, r2
  4041f4:	009b      	lsls	r3, r3, #2
  4041f6:	4413      	add	r3, r2
  4041f8:	005b      	lsls	r3, r3, #1
  4041fa:	1aca      	subs	r2, r1, r3
  4041fc:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4041fe:	68b9      	ldr	r1, [r7, #8]
  404200:	4b34      	ldr	r3, [pc, #208]	; (4042d4 <rtc_set_date+0x138>)
  404202:	fba3 2301 	umull	r2, r3, r3, r1
  404206:	08da      	lsrs	r2, r3, #3
  404208:	4613      	mov	r3, r2
  40420a:	009b      	lsls	r3, r3, #2
  40420c:	4413      	add	r3, r2
  40420e:	005b      	lsls	r3, r3, #1
  404210:	1aca      	subs	r2, r1, r3
  404212:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  404214:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  404216:	697a      	ldr	r2, [r7, #20]
  404218:	4313      	orrs	r3, r2
  40421a:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40421c:	687a      	ldr	r2, [r7, #4]
  40421e:	4b2d      	ldr	r3, [pc, #180]	; (4042d4 <rtc_set_date+0x138>)
  404220:	fba3 1302 	umull	r1, r3, r3, r2
  404224:	08db      	lsrs	r3, r3, #3
  404226:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  404228:	6879      	ldr	r1, [r7, #4]
  40422a:	4b2a      	ldr	r3, [pc, #168]	; (4042d4 <rtc_set_date+0x138>)
  40422c:	fba3 2301 	umull	r2, r3, r3, r1
  404230:	08da      	lsrs	r2, r3, #3
  404232:	4613      	mov	r3, r2
  404234:	009b      	lsls	r3, r3, #2
  404236:	4413      	add	r3, r2
  404238:	005b      	lsls	r3, r3, #1
  40423a:	1aca      	subs	r2, r1, r3
  40423c:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40423e:	4303      	orrs	r3, r0
  404240:	697a      	ldr	r2, [r7, #20]
  404242:	4313      	orrs	r3, r2
  404244:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  404246:	6a3b      	ldr	r3, [r7, #32]
  404248:	055b      	lsls	r3, r3, #21
  40424a:	697a      	ldr	r2, [r7, #20]
  40424c:	4313      	orrs	r3, r2
  40424e:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404250:	683a      	ldr	r2, [r7, #0]
  404252:	4b20      	ldr	r3, [pc, #128]	; (4042d4 <rtc_set_date+0x138>)
  404254:	fba3 1302 	umull	r1, r3, r3, r2
  404258:	08db      	lsrs	r3, r3, #3
  40425a:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40425c:	6839      	ldr	r1, [r7, #0]
  40425e:	4b1d      	ldr	r3, [pc, #116]	; (4042d4 <rtc_set_date+0x138>)
  404260:	fba3 2301 	umull	r2, r3, r3, r1
  404264:	08da      	lsrs	r2, r3, #3
  404266:	4613      	mov	r3, r2
  404268:	009b      	lsls	r3, r3, #2
  40426a:	4413      	add	r3, r2
  40426c:	005b      	lsls	r3, r3, #1
  40426e:	1aca      	subs	r2, r1, r3
  404270:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404272:	4303      	orrs	r3, r0
  404274:	697a      	ldr	r2, [r7, #20]
  404276:	4313      	orrs	r3, r2
  404278:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40427a:	68fb      	ldr	r3, [r7, #12]
  40427c:	681b      	ldr	r3, [r3, #0]
  40427e:	f043 0202 	orr.w	r2, r3, #2
  404282:	68fb      	ldr	r3, [r7, #12]
  404284:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  404286:	bf00      	nop
  404288:	68fb      	ldr	r3, [r7, #12]
  40428a:	699b      	ldr	r3, [r3, #24]
  40428c:	f003 0301 	and.w	r3, r3, #1
  404290:	2b00      	cmp	r3, #0
  404292:	d0f9      	beq.n	404288 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  404294:	68fb      	ldr	r3, [r7, #12]
  404296:	2201      	movs	r2, #1
  404298:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  40429a:	68fb      	ldr	r3, [r7, #12]
  40429c:	697a      	ldr	r2, [r7, #20]
  40429e:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4042a0:	68fb      	ldr	r3, [r7, #12]
  4042a2:	681b      	ldr	r3, [r3, #0]
  4042a4:	f023 0202 	bic.w	r2, r3, #2
  4042a8:	68fb      	ldr	r3, [r7, #12]
  4042aa:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  4042ac:	68fb      	ldr	r3, [r7, #12]
  4042ae:	69db      	ldr	r3, [r3, #28]
  4042b0:	f043 0204 	orr.w	r2, r3, #4
  4042b4:	68fb      	ldr	r3, [r7, #12]
  4042b6:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4042b8:	68fb      	ldr	r3, [r7, #12]
  4042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4042bc:	f003 0302 	and.w	r3, r3, #2
}
  4042c0:	4618      	mov	r0, r3
  4042c2:	371c      	adds	r7, #28
  4042c4:	46bd      	mov	sp, r7
  4042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ca:	4770      	bx	lr
  4042cc:	10624dd3 	.word	0x10624dd3
  4042d0:	51eb851f 	.word	0x51eb851f
  4042d4:	cccccccd 	.word	0xcccccccd

004042d8 <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  4042d8:	b480      	push	{r7}
  4042da:	b083      	sub	sp, #12
  4042dc:	af00      	add	r7, sp, #0
  4042de:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  4042e0:	687b      	ldr	r3, [r7, #4]
  4042e2:	2200      	movs	r2, #0
  4042e4:	611a      	str	r2, [r3, #16]
}
  4042e6:	370c      	adds	r7, #12
  4042e8:	46bd      	mov	sp, r7
  4042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ee:	4770      	bx	lr

004042f0 <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  4042f0:	b480      	push	{r7}
  4042f2:	b083      	sub	sp, #12
  4042f4:	af00      	add	r7, sp, #0
  4042f6:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  4042f8:	687b      	ldr	r3, [r7, #4]
  4042fa:	4a03      	ldr	r2, [pc, #12]	; (404308 <rtc_clear_date_alarm+0x18>)
  4042fc:	615a      	str	r2, [r3, #20]
}
  4042fe:	370c      	adds	r7, #12
  404300:	46bd      	mov	sp, r7
  404302:	f85d 7b04 	ldr.w	r7, [sp], #4
  404306:	4770      	bx	lr
  404308:	01010000 	.word	0x01010000

0040430c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40430c:	b480      	push	{r7}
  40430e:	b085      	sub	sp, #20
  404310:	af00      	add	r7, sp, #0
  404312:	6078      	str	r0, [r7, #4]
  404314:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  404316:	2300      	movs	r3, #0
  404318:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40431a:	687b      	ldr	r3, [r7, #4]
  40431c:	22ac      	movs	r2, #172	; 0xac
  40431e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  404320:	683b      	ldr	r3, [r7, #0]
  404322:	681a      	ldr	r2, [r3, #0]
  404324:	683b      	ldr	r3, [r7, #0]
  404326:	685b      	ldr	r3, [r3, #4]
  404328:	fbb2 f3f3 	udiv	r3, r2, r3
  40432c:	091b      	lsrs	r3, r3, #4
  40432e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  404330:	68fb      	ldr	r3, [r7, #12]
  404332:	2b00      	cmp	r3, #0
  404334:	d003      	beq.n	40433e <uart_init+0x32>
  404336:	68fb      	ldr	r3, [r7, #12]
  404338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40433c:	d301      	bcc.n	404342 <uart_init+0x36>
		return 1;
  40433e:	2301      	movs	r3, #1
  404340:	e00f      	b.n	404362 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  404342:	687b      	ldr	r3, [r7, #4]
  404344:	68fa      	ldr	r2, [r7, #12]
  404346:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  404348:	683b      	ldr	r3, [r7, #0]
  40434a:	689a      	ldr	r2, [r3, #8]
  40434c:	687b      	ldr	r3, [r7, #4]
  40434e:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  404350:	687b      	ldr	r3, [r7, #4]
  404352:	f240 2202 	movw	r2, #514	; 0x202
  404356:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40435a:	687b      	ldr	r3, [r7, #4]
  40435c:	2250      	movs	r2, #80	; 0x50
  40435e:	601a      	str	r2, [r3, #0]

	return 0;
  404360:	2300      	movs	r3, #0
}
  404362:	4618      	mov	r0, r3
  404364:	3714      	adds	r7, #20
  404366:	46bd      	mov	sp, r7
  404368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40436c:	4770      	bx	lr
  40436e:	bf00      	nop

00404370 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  404370:	b480      	push	{r7}
  404372:	b083      	sub	sp, #12
  404374:	af00      	add	r7, sp, #0
  404376:	6078      	str	r0, [r7, #4]
  404378:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  40437a:	687b      	ldr	r3, [r7, #4]
  40437c:	683a      	ldr	r2, [r7, #0]
  40437e:	60da      	str	r2, [r3, #12]
}
  404380:	370c      	adds	r7, #12
  404382:	46bd      	mov	sp, r7
  404384:	f85d 7b04 	ldr.w	r7, [sp], #4
  404388:	4770      	bx	lr
  40438a:	bf00      	nop

0040438c <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  40438c:	b480      	push	{r7}
  40438e:	b083      	sub	sp, #12
  404390:	af00      	add	r7, sp, #0
  404392:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  404394:	687b      	ldr	r3, [r7, #4]
  404396:	695b      	ldr	r3, [r3, #20]
}
  404398:	4618      	mov	r0, r3
  40439a:	370c      	adds	r7, #12
  40439c:	46bd      	mov	sp, r7
  40439e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043a2:	4770      	bx	lr

004043a4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4043a4:	b480      	push	{r7}
  4043a6:	b083      	sub	sp, #12
  4043a8:	af00      	add	r7, sp, #0
  4043aa:	6078      	str	r0, [r7, #4]
  4043ac:	460b      	mov	r3, r1
  4043ae:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4043b0:	687b      	ldr	r3, [r7, #4]
  4043b2:	695b      	ldr	r3, [r3, #20]
  4043b4:	f003 0302 	and.w	r3, r3, #2
  4043b8:	2b00      	cmp	r3, #0
  4043ba:	d101      	bne.n	4043c0 <uart_write+0x1c>
		return 1;
  4043bc:	2301      	movs	r3, #1
  4043be:	e003      	b.n	4043c8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4043c0:	78fa      	ldrb	r2, [r7, #3]
  4043c2:	687b      	ldr	r3, [r7, #4]
  4043c4:	61da      	str	r2, [r3, #28]
	return 0;
  4043c6:	2300      	movs	r3, #0
}
  4043c8:	4618      	mov	r0, r3
  4043ca:	370c      	adds	r7, #12
  4043cc:	46bd      	mov	sp, r7
  4043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043d2:	4770      	bx	lr

004043d4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4043d4:	b480      	push	{r7}
  4043d6:	b083      	sub	sp, #12
  4043d8:	af00      	add	r7, sp, #0
  4043da:	6078      	str	r0, [r7, #4]
  4043dc:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4043de:	687b      	ldr	r3, [r7, #4]
  4043e0:	695b      	ldr	r3, [r3, #20]
  4043e2:	f003 0301 	and.w	r3, r3, #1
  4043e6:	2b00      	cmp	r3, #0
  4043e8:	d101      	bne.n	4043ee <uart_read+0x1a>
		return 1;
  4043ea:	2301      	movs	r3, #1
  4043ec:	e005      	b.n	4043fa <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4043ee:	687b      	ldr	r3, [r7, #4]
  4043f0:	699b      	ldr	r3, [r3, #24]
  4043f2:	b2da      	uxtb	r2, r3
  4043f4:	683b      	ldr	r3, [r7, #0]
  4043f6:	701a      	strb	r2, [r3, #0]
	return 0;
  4043f8:	2300      	movs	r3, #0
}
  4043fa:	4618      	mov	r0, r3
  4043fc:	370c      	adds	r7, #12
  4043fe:	46bd      	mov	sp, r7
  404400:	f85d 7b04 	ldr.w	r7, [sp], #4
  404404:	4770      	bx	lr
  404406:	bf00      	nop

00404408 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  404408:	b480      	push	{r7}
  40440a:	b089      	sub	sp, #36	; 0x24
  40440c:	af00      	add	r7, sp, #0
  40440e:	60f8      	str	r0, [r7, #12]
  404410:	60b9      	str	r1, [r7, #8]
  404412:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  404414:	68bb      	ldr	r3, [r7, #8]
  404416:	011a      	lsls	r2, r3, #4
  404418:	687b      	ldr	r3, [r7, #4]
  40441a:	429a      	cmp	r2, r3
  40441c:	d802      	bhi.n	404424 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40441e:	2310      	movs	r3, #16
  404420:	61fb      	str	r3, [r7, #28]
  404422:	e001      	b.n	404428 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  404424:	2308      	movs	r3, #8
  404426:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404428:	687b      	ldr	r3, [r7, #4]
  40442a:	00da      	lsls	r2, r3, #3
  40442c:	69fb      	ldr	r3, [r7, #28]
  40442e:	68b9      	ldr	r1, [r7, #8]
  404430:	fb01 f303 	mul.w	r3, r1, r3
  404434:	085b      	lsrs	r3, r3, #1
  404436:	441a      	add	r2, r3
  404438:	69fb      	ldr	r3, [r7, #28]
  40443a:	68b9      	ldr	r1, [r7, #8]
  40443c:	fb01 f303 	mul.w	r3, r1, r3
  404440:	fbb2 f3f3 	udiv	r3, r2, r3
  404444:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  404446:	69bb      	ldr	r3, [r7, #24]
  404448:	08db      	lsrs	r3, r3, #3
  40444a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40444c:	69bb      	ldr	r3, [r7, #24]
  40444e:	f003 0307 	and.w	r3, r3, #7
  404452:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404454:	697b      	ldr	r3, [r7, #20]
  404456:	2b00      	cmp	r3, #0
  404458:	d003      	beq.n	404462 <usart_set_async_baudrate+0x5a>
  40445a:	697b      	ldr	r3, [r7, #20]
  40445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404460:	d301      	bcc.n	404466 <usart_set_async_baudrate+0x5e>
		return 1;
  404462:	2301      	movs	r3, #1
  404464:	e00f      	b.n	404486 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  404466:	69fb      	ldr	r3, [r7, #28]
  404468:	2b08      	cmp	r3, #8
  40446a:	d105      	bne.n	404478 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40446c:	68fb      	ldr	r3, [r7, #12]
  40446e:	685b      	ldr	r3, [r3, #4]
  404470:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404474:	68fb      	ldr	r3, [r7, #12]
  404476:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  404478:	693b      	ldr	r3, [r7, #16]
  40447a:	041a      	lsls	r2, r3, #16
  40447c:	697b      	ldr	r3, [r7, #20]
  40447e:	431a      	orrs	r2, r3
  404480:	68fb      	ldr	r3, [r7, #12]
  404482:	621a      	str	r2, [r3, #32]

	return 0;
  404484:	2300      	movs	r3, #0
}
  404486:	4618      	mov	r0, r3
  404488:	3724      	adds	r7, #36	; 0x24
  40448a:	46bd      	mov	sp, r7
  40448c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404490:	4770      	bx	lr
  404492:	bf00      	nop

00404494 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  404494:	b580      	push	{r7, lr}
  404496:	b082      	sub	sp, #8
  404498:	af00      	add	r7, sp, #0
  40449a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40449c:	6878      	ldr	r0, [r7, #4]
  40449e:	4b0e      	ldr	r3, [pc, #56]	; (4044d8 <usart_reset+0x44>)
  4044a0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4044a2:	687b      	ldr	r3, [r7, #4]
  4044a4:	2200      	movs	r2, #0
  4044a6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4044a8:	687b      	ldr	r3, [r7, #4]
  4044aa:	2200      	movs	r2, #0
  4044ac:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4044ae:	687b      	ldr	r3, [r7, #4]
  4044b0:	2200      	movs	r2, #0
  4044b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4044b4:	6878      	ldr	r0, [r7, #4]
  4044b6:	4b09      	ldr	r3, [pc, #36]	; (4044dc <usart_reset+0x48>)
  4044b8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4044ba:	6878      	ldr	r0, [r7, #4]
  4044bc:	4b08      	ldr	r3, [pc, #32]	; (4044e0 <usart_reset+0x4c>)
  4044be:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4044c0:	6878      	ldr	r0, [r7, #4]
  4044c2:	4b08      	ldr	r3, [pc, #32]	; (4044e4 <usart_reset+0x50>)
  4044c4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4044c6:	6878      	ldr	r0, [r7, #4]
  4044c8:	4b07      	ldr	r3, [pc, #28]	; (4044e8 <usart_reset+0x54>)
  4044ca:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4044cc:	6878      	ldr	r0, [r7, #4]
  4044ce:	4b07      	ldr	r3, [pc, #28]	; (4044ec <usart_reset+0x58>)
  4044d0:	4798      	blx	r3
#endif
}
  4044d2:	3708      	adds	r7, #8
  4044d4:	46bd      	mov	sp, r7
  4044d6:	bd80      	pop	{r7, pc}
  4044d8:	004046fd 	.word	0x004046fd
  4044dc:	0040458d 	.word	0x0040458d
  4044e0:	004045bd 	.word	0x004045bd
  4044e4:	0040460d 	.word	0x0040460d
  4044e8:	00404645 	.word	0x00404645
  4044ec:	00404629 	.word	0x00404629

004044f0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4044f0:	b580      	push	{r7, lr}
  4044f2:	b084      	sub	sp, #16
  4044f4:	af00      	add	r7, sp, #0
  4044f6:	60f8      	str	r0, [r7, #12]
  4044f8:	60b9      	str	r1, [r7, #8]
  4044fa:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4044fc:	68f8      	ldr	r0, [r7, #12]
  4044fe:	4b1a      	ldr	r3, [pc, #104]	; (404568 <usart_init_rs232+0x78>)
  404500:	4798      	blx	r3

	ul_reg_val = 0;
  404502:	4b1a      	ldr	r3, [pc, #104]	; (40456c <usart_init_rs232+0x7c>)
  404504:	2200      	movs	r2, #0
  404506:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  404508:	68bb      	ldr	r3, [r7, #8]
  40450a:	2b00      	cmp	r3, #0
  40450c:	d009      	beq.n	404522 <usart_init_rs232+0x32>
  40450e:	68bb      	ldr	r3, [r7, #8]
  404510:	681b      	ldr	r3, [r3, #0]
  404512:	68f8      	ldr	r0, [r7, #12]
  404514:	4619      	mov	r1, r3
  404516:	687a      	ldr	r2, [r7, #4]
  404518:	4b15      	ldr	r3, [pc, #84]	; (404570 <usart_init_rs232+0x80>)
  40451a:	4798      	blx	r3
  40451c:	4603      	mov	r3, r0
  40451e:	2b00      	cmp	r3, #0
  404520:	d001      	beq.n	404526 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  404522:	2301      	movs	r3, #1
  404524:	e01b      	b.n	40455e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404526:	68bb      	ldr	r3, [r7, #8]
  404528:	685a      	ldr	r2, [r3, #4]
  40452a:	68bb      	ldr	r3, [r7, #8]
  40452c:	689b      	ldr	r3, [r3, #8]
  40452e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404530:	68bb      	ldr	r3, [r7, #8]
  404532:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404534:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404536:	68bb      	ldr	r3, [r7, #8]
  404538:	68db      	ldr	r3, [r3, #12]
  40453a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40453c:	4b0b      	ldr	r3, [pc, #44]	; (40456c <usart_init_rs232+0x7c>)
  40453e:	681b      	ldr	r3, [r3, #0]
  404540:	431a      	orrs	r2, r3
  404542:	4b0a      	ldr	r3, [pc, #40]	; (40456c <usart_init_rs232+0x7c>)
  404544:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  404546:	4b09      	ldr	r3, [pc, #36]	; (40456c <usart_init_rs232+0x7c>)
  404548:	681a      	ldr	r2, [r3, #0]
  40454a:	4b08      	ldr	r3, [pc, #32]	; (40456c <usart_init_rs232+0x7c>)
  40454c:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  40454e:	68fb      	ldr	r3, [r7, #12]
  404550:	685a      	ldr	r2, [r3, #4]
  404552:	4b06      	ldr	r3, [pc, #24]	; (40456c <usart_init_rs232+0x7c>)
  404554:	681b      	ldr	r3, [r3, #0]
  404556:	431a      	orrs	r2, r3
  404558:	68fb      	ldr	r3, [r7, #12]
  40455a:	605a      	str	r2, [r3, #4]

	return 0;
  40455c:	2300      	movs	r3, #0
}
  40455e:	4618      	mov	r0, r3
  404560:	3710      	adds	r7, #16
  404562:	46bd      	mov	sp, r7
  404564:	bd80      	pop	{r7, pc}
  404566:	bf00      	nop
  404568:	00404495 	.word	0x00404495
  40456c:	20001718 	.word	0x20001718
  404570:	00404409 	.word	0x00404409

00404574 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  404574:	b480      	push	{r7}
  404576:	b083      	sub	sp, #12
  404578:	af00      	add	r7, sp, #0
  40457a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40457c:	687b      	ldr	r3, [r7, #4]
  40457e:	2240      	movs	r2, #64	; 0x40
  404580:	601a      	str	r2, [r3, #0]
}
  404582:	370c      	adds	r7, #12
  404584:	46bd      	mov	sp, r7
  404586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40458a:	4770      	bx	lr

0040458c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40458c:	b480      	push	{r7}
  40458e:	b083      	sub	sp, #12
  404590:	af00      	add	r7, sp, #0
  404592:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404594:	687b      	ldr	r3, [r7, #4]
  404596:	2288      	movs	r2, #136	; 0x88
  404598:	601a      	str	r2, [r3, #0]
}
  40459a:	370c      	adds	r7, #12
  40459c:	46bd      	mov	sp, r7
  40459e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045a2:	4770      	bx	lr

004045a4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4045a4:	b480      	push	{r7}
  4045a6:	b083      	sub	sp, #12
  4045a8:	af00      	add	r7, sp, #0
  4045aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4045ac:	687b      	ldr	r3, [r7, #4]
  4045ae:	2210      	movs	r2, #16
  4045b0:	601a      	str	r2, [r3, #0]
}
  4045b2:	370c      	adds	r7, #12
  4045b4:	46bd      	mov	sp, r7
  4045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045ba:	4770      	bx	lr

004045bc <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4045bc:	b480      	push	{r7}
  4045be:	b083      	sub	sp, #12
  4045c0:	af00      	add	r7, sp, #0
  4045c2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4045c4:	687b      	ldr	r3, [r7, #4]
  4045c6:	2224      	movs	r2, #36	; 0x24
  4045c8:	601a      	str	r2, [r3, #0]
}
  4045ca:	370c      	adds	r7, #12
  4045cc:	46bd      	mov	sp, r7
  4045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045d2:	4770      	bx	lr

004045d4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4045d4:	b480      	push	{r7}
  4045d6:	b083      	sub	sp, #12
  4045d8:	af00      	add	r7, sp, #0
  4045da:	6078      	str	r0, [r7, #4]
  4045dc:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4045de:	687b      	ldr	r3, [r7, #4]
  4045e0:	683a      	ldr	r2, [r7, #0]
  4045e2:	609a      	str	r2, [r3, #8]
}
  4045e4:	370c      	adds	r7, #12
  4045e6:	46bd      	mov	sp, r7
  4045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045ec:	4770      	bx	lr
  4045ee:	bf00      	nop

004045f0 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4045f0:	b480      	push	{r7}
  4045f2:	b083      	sub	sp, #12
  4045f4:	af00      	add	r7, sp, #0
  4045f6:	6078      	str	r0, [r7, #4]
  4045f8:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4045fa:	687b      	ldr	r3, [r7, #4]
  4045fc:	683a      	ldr	r2, [r7, #0]
  4045fe:	60da      	str	r2, [r3, #12]
}
  404600:	370c      	adds	r7, #12
  404602:	46bd      	mov	sp, r7
  404604:	f85d 7b04 	ldr.w	r7, [sp], #4
  404608:	4770      	bx	lr
  40460a:	bf00      	nop

0040460c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40460c:	b480      	push	{r7}
  40460e:	b083      	sub	sp, #12
  404610:	af00      	add	r7, sp, #0
  404612:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  404614:	687b      	ldr	r3, [r7, #4]
  404616:	f44f 7280 	mov.w	r2, #256	; 0x100
  40461a:	601a      	str	r2, [r3, #0]
}
  40461c:	370c      	adds	r7, #12
  40461e:	46bd      	mov	sp, r7
  404620:	f85d 7b04 	ldr.w	r7, [sp], #4
  404624:	4770      	bx	lr
  404626:	bf00      	nop

00404628 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  404628:	b480      	push	{r7}
  40462a:	b083      	sub	sp, #12
  40462c:	af00      	add	r7, sp, #0
  40462e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  404630:	687b      	ldr	r3, [r7, #4]
  404632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  404636:	601a      	str	r2, [r3, #0]
}
  404638:	370c      	adds	r7, #12
  40463a:	46bd      	mov	sp, r7
  40463c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404640:	4770      	bx	lr
  404642:	bf00      	nop

00404644 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  404644:	b480      	push	{r7}
  404646:	b083      	sub	sp, #12
  404648:	af00      	add	r7, sp, #0
  40464a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40464c:	687b      	ldr	r3, [r7, #4]
  40464e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404652:	601a      	str	r2, [r3, #0]
}
  404654:	370c      	adds	r7, #12
  404656:	46bd      	mov	sp, r7
  404658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40465c:	4770      	bx	lr
  40465e:	bf00      	nop

00404660 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  404660:	b480      	push	{r7}
  404662:	b083      	sub	sp, #12
  404664:	af00      	add	r7, sp, #0
  404666:	6078      	str	r0, [r7, #4]
  404668:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40466a:	687b      	ldr	r3, [r7, #4]
  40466c:	695b      	ldr	r3, [r3, #20]
  40466e:	f003 0302 	and.w	r3, r3, #2
  404672:	2b00      	cmp	r3, #0
  404674:	d101      	bne.n	40467a <usart_write+0x1a>
		return 1;
  404676:	2301      	movs	r3, #1
  404678:	e005      	b.n	404686 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40467a:	683b      	ldr	r3, [r7, #0]
  40467c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404680:	687b      	ldr	r3, [r7, #4]
  404682:	61da      	str	r2, [r3, #28]
	return 0;
  404684:	2300      	movs	r3, #0
}
  404686:	4618      	mov	r0, r3
  404688:	370c      	adds	r7, #12
  40468a:	46bd      	mov	sp, r7
  40468c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404690:	4770      	bx	lr
  404692:	bf00      	nop

00404694 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  404694:	b480      	push	{r7}
  404696:	b083      	sub	sp, #12
  404698:	af00      	add	r7, sp, #0
  40469a:	6078      	str	r0, [r7, #4]
  40469c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40469e:	687b      	ldr	r3, [r7, #4]
  4046a0:	695b      	ldr	r3, [r3, #20]
  4046a2:	f003 0301 	and.w	r3, r3, #1
  4046a6:	2b00      	cmp	r3, #0
  4046a8:	d101      	bne.n	4046ae <usart_read+0x1a>
		return 1;
  4046aa:	2301      	movs	r3, #1
  4046ac:	e006      	b.n	4046bc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4046ae:	687b      	ldr	r3, [r7, #4]
  4046b0:	699b      	ldr	r3, [r3, #24]
  4046b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4046b6:	683b      	ldr	r3, [r7, #0]
  4046b8:	601a      	str	r2, [r3, #0]

	return 0;
  4046ba:	2300      	movs	r3, #0
}
  4046bc:	4618      	mov	r0, r3
  4046be:	370c      	adds	r7, #12
  4046c0:	46bd      	mov	sp, r7
  4046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046c6:	4770      	bx	lr

004046c8 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  4046c8:	b480      	push	{r7}
  4046ca:	b083      	sub	sp, #12
  4046cc:	af00      	add	r7, sp, #0
  4046ce:	6078      	str	r0, [r7, #4]
  4046d0:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4046d2:	bf00      	nop
  4046d4:	687b      	ldr	r3, [r7, #4]
  4046d6:	695b      	ldr	r3, [r3, #20]
  4046d8:	f003 0301 	and.w	r3, r3, #1
  4046dc:	2b00      	cmp	r3, #0
  4046de:	d0f9      	beq.n	4046d4 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4046e0:	687b      	ldr	r3, [r7, #4]
  4046e2:	699b      	ldr	r3, [r3, #24]
  4046e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4046e8:	683b      	ldr	r3, [r7, #0]
  4046ea:	601a      	str	r2, [r3, #0]

	return 0;
  4046ec:	2300      	movs	r3, #0
}
  4046ee:	4618      	mov	r0, r3
  4046f0:	370c      	adds	r7, #12
  4046f2:	46bd      	mov	sp, r7
  4046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046f8:	4770      	bx	lr
  4046fa:	bf00      	nop

004046fc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4046fc:	b480      	push	{r7}
  4046fe:	b083      	sub	sp, #12
  404700:	af00      	add	r7, sp, #0
  404702:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404704:	687b      	ldr	r3, [r7, #4]
  404706:	4a04      	ldr	r2, [pc, #16]	; (404718 <usart_disable_writeprotect+0x1c>)
  404708:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  40470c:	370c      	adds	r7, #12
  40470e:	46bd      	mov	sp, r7
  404710:	f85d 7b04 	ldr.w	r7, [sp], #4
  404714:	4770      	bx	lr
  404716:	bf00      	nop
  404718:	55534100 	.word	0x55534100

0040471c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  40471c:	b580      	push	{r7, lr}
  40471e:	b084      	sub	sp, #16
  404720:	af00      	add	r7, sp, #0
  404722:	4603      	mov	r3, r0
  404724:	71fb      	strb	r3, [r7, #7]
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  404726:	4817      	ldr	r0, [pc, #92]	; (404784 <disk_initialize+0x68>)
  404728:	2100      	movs	r1, #0
  40472a:	4b17      	ldr	r3, [pc, #92]	; (404788 <disk_initialize+0x6c>)
  40472c:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  40472e:	79fb      	ldrb	r3, [r7, #7]
  404730:	2b02      	cmp	r3, #2
  404732:	d901      	bls.n	404738 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  404734:	2301      	movs	r3, #1
  404736:	e021      	b.n	40477c <disk_initialize+0x60>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  404738:	2300      	movs	r3, #0
  40473a:	60fb      	str	r3, [r7, #12]
  40473c:	e00c      	b.n	404758 <disk_initialize+0x3c>
		mem_status = mem_test_unit_ready(drv);
  40473e:	79fb      	ldrb	r3, [r7, #7]
  404740:	4618      	mov	r0, r3
  404742:	4b12      	ldr	r3, [pc, #72]	; (40478c <disk_initialize+0x70>)
  404744:	4798      	blx	r3
  404746:	4603      	mov	r3, r0
  404748:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
  40474a:	7afb      	ldrb	r3, [r7, #11]
  40474c:	2b03      	cmp	r3, #3
  40474e:	d000      	beq.n	404752 <disk_initialize+0x36>
			break;
  404750:	e005      	b.n	40475e <disk_initialize+0x42>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  404752:	68fb      	ldr	r3, [r7, #12]
  404754:	3301      	adds	r3, #1
  404756:	60fb      	str	r3, [r7, #12]
  404758:	68fb      	ldr	r3, [r7, #12]
  40475a:	2b01      	cmp	r3, #1
  40475c:	ddef      	ble.n	40473e <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  40475e:	7afb      	ldrb	r3, [r7, #11]
  404760:	2b00      	cmp	r3, #0
  404762:	d001      	beq.n	404768 <disk_initialize+0x4c>
		return STA_NOINIT;
  404764:	2301      	movs	r3, #1
  404766:	e009      	b.n	40477c <disk_initialize+0x60>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  404768:	79fb      	ldrb	r3, [r7, #7]
  40476a:	4618      	mov	r0, r3
  40476c:	4b08      	ldr	r3, [pc, #32]	; (404790 <disk_initialize+0x74>)
  40476e:	4798      	blx	r3
  404770:	4603      	mov	r3, r0
  404772:	2b00      	cmp	r3, #0
  404774:	d001      	beq.n	40477a <disk_initialize+0x5e>
		return STA_PROTECT;
  404776:	2304      	movs	r3, #4
  404778:	e000      	b.n	40477c <disk_initialize+0x60>
	}

	/* The memory should already be initialized */
	return 0;
  40477a:	2300      	movs	r3, #0
}
  40477c:	4618      	mov	r0, r3
  40477e:	3710      	adds	r7, #16
  404780:	46bd      	mov	sp, r7
  404782:	bd80      	pop	{r7, pc}
  404784:	400e1460 	.word	0x400e1460
  404788:	00403eb5 	.word	0x00403eb5
  40478c:	00403361 	.word	0x00403361
  404790:	004033f5 	.word	0x004033f5

00404794 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  404794:	b580      	push	{r7, lr}
  404796:	b082      	sub	sp, #8
  404798:	af00      	add	r7, sp, #0
  40479a:	4603      	mov	r3, r0
  40479c:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
  40479e:	79fb      	ldrb	r3, [r7, #7]
  4047a0:	4618      	mov	r0, r3
  4047a2:	4b08      	ldr	r3, [pc, #32]	; (4047c4 <disk_status+0x30>)
  4047a4:	4798      	blx	r3
  4047a6:	4603      	mov	r3, r0
  4047a8:	2b00      	cmp	r3, #0
  4047aa:	d002      	beq.n	4047b2 <disk_status+0x1e>
  4047ac:	2b02      	cmp	r3, #2
  4047ae:	d002      	beq.n	4047b6 <disk_status+0x22>
  4047b0:	e003      	b.n	4047ba <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
  4047b2:	2300      	movs	r3, #0
  4047b4:	e002      	b.n	4047bc <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
  4047b6:	2303      	movs	r3, #3
  4047b8:	e000      	b.n	4047bc <disk_status+0x28>
	default:
		return STA_NOINIT;
  4047ba:	2301      	movs	r3, #1
	}
}
  4047bc:	4618      	mov	r0, r3
  4047be:	3708      	adds	r7, #8
  4047c0:	46bd      	mov	sp, r7
  4047c2:	bd80      	pop	{r7, pc}
  4047c4:	00403361 	.word	0x00403361

004047c8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4047c8:	b580      	push	{r7, lr}
  4047ca:	b088      	sub	sp, #32
  4047cc:	af00      	add	r7, sp, #0
  4047ce:	60b9      	str	r1, [r7, #8]
  4047d0:	607a      	str	r2, [r7, #4]
  4047d2:	4602      	mov	r2, r0
  4047d4:	73fa      	strb	r2, [r7, #15]
  4047d6:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4047d8:	7bfb      	ldrb	r3, [r7, #15]
  4047da:	4618      	mov	r0, r3
  4047dc:	4b23      	ldr	r3, [pc, #140]	; (40486c <disk_read+0xa4>)
  4047de:	4798      	blx	r3
  4047e0:	4603      	mov	r3, r0
  4047e2:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4047e4:	7efb      	ldrb	r3, [r7, #27]
  4047e6:	2b00      	cmp	r3, #0
  4047e8:	d101      	bne.n	4047ee <disk_read+0x26>
		return RES_ERROR;
  4047ea:	2301      	movs	r3, #1
  4047ec:	e039      	b.n	404862 <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  4047ee:	7bfa      	ldrb	r2, [r7, #15]
  4047f0:	f107 0314 	add.w	r3, r7, #20
  4047f4:	4610      	mov	r0, r2
  4047f6:	4619      	mov	r1, r3
  4047f8:	4b1d      	ldr	r3, [pc, #116]	; (404870 <disk_read+0xa8>)
  4047fa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  4047fc:	7bbb      	ldrb	r3, [r7, #14]
  4047fe:	7efa      	ldrb	r2, [r7, #27]
  404800:	fb02 f303 	mul.w	r3, r2, r3
  404804:	461a      	mov	r2, r3
  404806:	687b      	ldr	r3, [r7, #4]
  404808:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40480a:	697b      	ldr	r3, [r7, #20]
  40480c:	3301      	adds	r3, #1
  40480e:	7ef9      	ldrb	r1, [r7, #27]
  404810:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  404814:	429a      	cmp	r2, r3
  404816:	d901      	bls.n	40481c <disk_read+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  404818:	2304      	movs	r3, #4
  40481a:	e022      	b.n	404862 <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  40481c:	2300      	movs	r3, #0
  40481e:	61fb      	str	r3, [r7, #28]
  404820:	e01a      	b.n	404858 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  404822:	7efb      	ldrb	r3, [r7, #27]
  404824:	69fa      	ldr	r2, [r7, #28]
  404826:	fb02 f203 	mul.w	r2, r2, r3
  40482a:	687b      	ldr	r3, [r7, #4]
  40482c:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  40482e:	7efb      	ldrb	r3, [r7, #27]
  404830:	69f9      	ldr	r1, [r7, #28]
  404832:	fb01 f303 	mul.w	r3, r1, r3
  404836:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  404838:	68b9      	ldr	r1, [r7, #8]
  40483a:	440b      	add	r3, r1
  40483c:	7bf9      	ldrb	r1, [r7, #15]
  40483e:	4608      	mov	r0, r1
  404840:	4611      	mov	r1, r2
  404842:	461a      	mov	r2, r3
  404844:	4b0b      	ldr	r3, [pc, #44]	; (404874 <disk_read+0xac>)
  404846:	4798      	blx	r3
  404848:	4603      	mov	r3, r0
  40484a:	2b00      	cmp	r3, #0
  40484c:	d001      	beq.n	404852 <disk_read+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  40484e:	2301      	movs	r3, #1
  404850:	e007      	b.n	404862 <disk_read+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  404852:	69fb      	ldr	r3, [r7, #28]
  404854:	3301      	adds	r3, #1
  404856:	61fb      	str	r3, [r7, #28]
  404858:	7bba      	ldrb	r2, [r7, #14]
  40485a:	69fb      	ldr	r3, [r7, #28]
  40485c:	429a      	cmp	r2, r3
  40485e:	d8e0      	bhi.n	404822 <disk_read+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  404860:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  404862:	4618      	mov	r0, r3
  404864:	3720      	adds	r7, #32
  404866:	46bd      	mov	sp, r7
  404868:	bd80      	pop	{r7, pc}
  40486a:	bf00      	nop
  40486c:	004033cd 	.word	0x004033cd
  404870:	00403395 	.word	0x00403395
  404874:	00403431 	.word	0x00403431

00404878 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  404878:	b580      	push	{r7, lr}
  40487a:	b088      	sub	sp, #32
  40487c:	af00      	add	r7, sp, #0
  40487e:	60b9      	str	r1, [r7, #8]
  404880:	607a      	str	r2, [r7, #4]
  404882:	4602      	mov	r2, r0
  404884:	73fa      	strb	r2, [r7, #15]
  404886:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  404888:	7bfb      	ldrb	r3, [r7, #15]
  40488a:	4618      	mov	r0, r3
  40488c:	4b23      	ldr	r3, [pc, #140]	; (40491c <disk_write+0xa4>)
  40488e:	4798      	blx	r3
  404890:	4603      	mov	r3, r0
  404892:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  404894:	7efb      	ldrb	r3, [r7, #27]
  404896:	2b00      	cmp	r3, #0
  404898:	d101      	bne.n	40489e <disk_write+0x26>
		return RES_ERROR;
  40489a:	2301      	movs	r3, #1
  40489c:	e039      	b.n	404912 <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40489e:	7bfa      	ldrb	r2, [r7, #15]
  4048a0:	f107 0314 	add.w	r3, r7, #20
  4048a4:	4610      	mov	r0, r2
  4048a6:	4619      	mov	r1, r3
  4048a8:	4b1d      	ldr	r3, [pc, #116]	; (404920 <disk_write+0xa8>)
  4048aa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  4048ac:	7bbb      	ldrb	r3, [r7, #14]
  4048ae:	7efa      	ldrb	r2, [r7, #27]
  4048b0:	fb02 f303 	mul.w	r3, r2, r3
  4048b4:	461a      	mov	r2, r3
  4048b6:	687b      	ldr	r3, [r7, #4]
  4048b8:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4048ba:	697b      	ldr	r3, [r7, #20]
  4048bc:	3301      	adds	r3, #1
  4048be:	7ef9      	ldrb	r1, [r7, #27]
  4048c0:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4048c4:	429a      	cmp	r2, r3
  4048c6:	d901      	bls.n	4048cc <disk_write+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4048c8:	2304      	movs	r3, #4
  4048ca:	e022      	b.n	404912 <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4048cc:	2300      	movs	r3, #0
  4048ce:	61fb      	str	r3, [r7, #28]
  4048d0:	e01a      	b.n	404908 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4048d2:	7efb      	ldrb	r3, [r7, #27]
  4048d4:	69fa      	ldr	r2, [r7, #28]
  4048d6:	fb02 f203 	mul.w	r2, r2, r3
  4048da:	687b      	ldr	r3, [r7, #4]
  4048dc:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  4048de:	7efb      	ldrb	r3, [r7, #27]
  4048e0:	69f9      	ldr	r1, [r7, #28]
  4048e2:	fb01 f303 	mul.w	r3, r1, r3
  4048e6:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4048e8:	68b9      	ldr	r1, [r7, #8]
  4048ea:	440b      	add	r3, r1
  4048ec:	7bf9      	ldrb	r1, [r7, #15]
  4048ee:	4608      	mov	r0, r1
  4048f0:	4611      	mov	r1, r2
  4048f2:	461a      	mov	r2, r3
  4048f4:	4b0b      	ldr	r3, [pc, #44]	; (404924 <disk_write+0xac>)
  4048f6:	4798      	blx	r3
  4048f8:	4603      	mov	r3, r0
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d001      	beq.n	404902 <disk_write+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  4048fe:	2301      	movs	r3, #1
  404900:	e007      	b.n	404912 <disk_write+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  404902:	69fb      	ldr	r3, [r7, #28]
  404904:	3301      	adds	r3, #1
  404906:	61fb      	str	r3, [r7, #28]
  404908:	7bba      	ldrb	r2, [r7, #14]
  40490a:	69fb      	ldr	r3, [r7, #28]
  40490c:	429a      	cmp	r2, r3
  40490e:	d8e0      	bhi.n	4048d2 <disk_write+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  404910:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  404912:	4618      	mov	r0, r3
  404914:	3720      	adds	r7, #32
  404916:	46bd      	mov	sp, r7
  404918:	bd80      	pop	{r7, pc}
  40491a:	bf00      	nop
  40491c:	004033cd 	.word	0x004033cd
  404920:	00403395 	.word	0x00403395
  404924:	0040346d 	.word	0x0040346d

00404928 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  404928:	b580      	push	{r7, lr}
  40492a:	b084      	sub	sp, #16
  40492c:	af00      	add	r7, sp, #0
  40492e:	460b      	mov	r3, r1
  404930:	603a      	str	r2, [r7, #0]
  404932:	4602      	mov	r2, r0
  404934:	71fa      	strb	r2, [r7, #7]
  404936:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
  404938:	2304      	movs	r3, #4
  40493a:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
  40493c:	79bb      	ldrb	r3, [r7, #6]
  40493e:	2b03      	cmp	r3, #3
  404940:	d845      	bhi.n	4049ce <disk_ioctl+0xa6>
  404942:	a201      	add	r2, pc, #4	; (adr r2, 404948 <disk_ioctl+0x20>)
  404944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404948:	004049b5 	.word	0x004049b5
  40494c:	00404965 	.word	0x00404965
  404950:	00404981 	.word	0x00404981
  404954:	00404959 	.word	0x00404959
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  404958:	683b      	ldr	r3, [r7, #0]
  40495a:	2201      	movs	r2, #1
  40495c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
  40495e:	2300      	movs	r3, #0
  404960:	73fb      	strb	r3, [r7, #15]
		break;
  404962:	e036      	b.n	4049d2 <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  404964:	79fa      	ldrb	r2, [r7, #7]
  404966:	f107 0308 	add.w	r3, r7, #8
  40496a:	4610      	mov	r0, r2
  40496c:	4619      	mov	r1, r3
  40496e:	4b1b      	ldr	r3, [pc, #108]	; (4049dc <disk_ioctl+0xb4>)
  404970:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  404972:	68bb      	ldr	r3, [r7, #8]
  404974:	1c5a      	adds	r2, r3, #1
  404976:	683b      	ldr	r3, [r7, #0]
  404978:	601a      	str	r2, [r3, #0]

		res = RES_OK;
  40497a:	2300      	movs	r3, #0
  40497c:	73fb      	strb	r3, [r7, #15]
	}
	break;
  40497e:	e028      	b.n	4049d2 <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  404980:	79fb      	ldrb	r3, [r7, #7]
  404982:	4618      	mov	r0, r3
  404984:	4b16      	ldr	r3, [pc, #88]	; (4049e0 <disk_ioctl+0xb8>)
  404986:	4798      	blx	r3
  404988:	4603      	mov	r3, r0
  40498a:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  40498c:	7bbb      	ldrb	r3, [r7, #14]
  40498e:	2b01      	cmp	r3, #1
  404990:	d00a      	beq.n	4049a8 <disk_ioctl+0x80>
  404992:	7bbb      	ldrb	r3, [r7, #14]
  404994:	2b02      	cmp	r3, #2
  404996:	d007      	beq.n	4049a8 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  404998:	7bbb      	ldrb	r3, [r7, #14]
  40499a:	2b04      	cmp	r3, #4
  40499c:	d004      	beq.n	4049a8 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  40499e:	7bbb      	ldrb	r3, [r7, #14]
  4049a0:	2b08      	cmp	r3, #8
  4049a2:	d001      	beq.n	4049a8 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  4049a4:	2301      	movs	r3, #1
  4049a6:	e015      	b.n	4049d4 <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4049a8:	683b      	ldr	r3, [r7, #0]
  4049aa:	2200      	movs	r2, #0
  4049ac:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
  4049ae:	2300      	movs	r3, #0
  4049b0:	73fb      	strb	r3, [r7, #15]
	}
	break;
  4049b2:	e00e      	b.n	4049d2 <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4049b4:	79fb      	ldrb	r3, [r7, #7]
  4049b6:	4618      	mov	r0, r3
  4049b8:	4b0a      	ldr	r3, [pc, #40]	; (4049e4 <disk_ioctl+0xbc>)
  4049ba:	4798      	blx	r3
  4049bc:	4603      	mov	r3, r0
  4049be:	2b00      	cmp	r3, #0
  4049c0:	d102      	bne.n	4049c8 <disk_ioctl+0xa0>
			res = RES_OK;
  4049c2:	2300      	movs	r3, #0
  4049c4:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
  4049c6:	e004      	b.n	4049d2 <disk_ioctl+0xaa>
	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
  4049c8:	2303      	movs	r3, #3
  4049ca:	73fb      	strb	r3, [r7, #15]
		}
		break;
  4049cc:	e001      	b.n	4049d2 <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
  4049ce:	2304      	movs	r3, #4
  4049d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  4049d2:	7bfb      	ldrb	r3, [r7, #15]
}
  4049d4:	4618      	mov	r0, r3
  4049d6:	3710      	adds	r7, #16
  4049d8:	46bd      	mov	sp, r7
  4049da:	bd80      	pop	{r7, pc}
  4049dc:	00403395 	.word	0x00403395
  4049e0:	004033cd 	.word	0x004033cd
  4049e4:	00403361 	.word	0x00403361

004049e8 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  4049e8:	b590      	push	{r4, r7, lr}
  4049ea:	b08b      	sub	sp, #44	; 0x2c
  4049ec:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  4049ee:	f107 0118 	add.w	r1, r7, #24
  4049f2:	f107 0214 	add.w	r2, r7, #20
  4049f6:	f107 0310 	add.w	r3, r7, #16
  4049fa:	4812      	ldr	r0, [pc, #72]	; (404a44 <get_fattime+0x5c>)
  4049fc:	4c12      	ldr	r4, [pc, #72]	; (404a48 <get_fattime+0x60>)
  4049fe:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  404a00:	f107 010c 	add.w	r1, r7, #12
  404a04:	f107 0208 	add.w	r2, r7, #8
  404a08:	1d3b      	adds	r3, r7, #4
  404a0a:	4638      	mov	r0, r7
  404a0c:	9000      	str	r0, [sp, #0]
  404a0e:	480d      	ldr	r0, [pc, #52]	; (404a44 <get_fattime+0x5c>)
  404a10:	4c0e      	ldr	r4, [pc, #56]	; (404a4c <get_fattime+0x64>)
  404a12:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  404a14:	68fb      	ldr	r3, [r7, #12]
  404a16:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
  404a1a:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
  404a1c:	68bb      	ldr	r3, [r7, #8]
  404a1e:	055b      	lsls	r3, r3, #21
  404a20:	431a      	orrs	r2, r3
			| (ul_day << 16)
  404a22:	687b      	ldr	r3, [r7, #4]
  404a24:	041b      	lsls	r3, r3, #16
  404a26:	431a      	orrs	r2, r3
			| (ul_hour << 11)
  404a28:	69bb      	ldr	r3, [r7, #24]
  404a2a:	02db      	lsls	r3, r3, #11
  404a2c:	431a      	orrs	r2, r3
			| (ul_minute << 5)
  404a2e:	697b      	ldr	r3, [r7, #20]
  404a30:	015b      	lsls	r3, r3, #5
  404a32:	431a      	orrs	r2, r3
			| (ul_second << 0);
  404a34:	693b      	ldr	r3, [r7, #16]

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  404a36:	4313      	orrs	r3, r2
  404a38:	61fb      	str	r3, [r7, #28]
			| (ul_day << 16)
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
  404a3a:	69fb      	ldr	r3, [r7, #28]
}
  404a3c:	4618      	mov	r0, r3
  404a3e:	3724      	adds	r7, #36	; 0x24
  404a40:	46bd      	mov	sp, r7
  404a42:	bd90      	pop	{r4, r7, pc}
  404a44:	400e1460 	.word	0x400e1460
  404a48:	00403ee9 	.word	0x00403ee9
  404a4c:	004040b5 	.word	0x004040b5

00404a50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  404a50:	b480      	push	{r7}
  404a52:	b087      	sub	sp, #28
  404a54:	af00      	add	r7, sp, #0
  404a56:	60f8      	str	r0, [r7, #12]
  404a58:	60b9      	str	r1, [r7, #8]
  404a5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  404a5c:	68fb      	ldr	r3, [r7, #12]
  404a5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
  404a60:	68bb      	ldr	r3, [r7, #8]
  404a62:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  404a64:	e007      	b.n	404a76 <mem_cpy+0x26>
		*d++ = *s++;
  404a66:	697b      	ldr	r3, [r7, #20]
  404a68:	1c5a      	adds	r2, r3, #1
  404a6a:	617a      	str	r2, [r7, #20]
  404a6c:	693a      	ldr	r2, [r7, #16]
  404a6e:	1c51      	adds	r1, r2, #1
  404a70:	6139      	str	r1, [r7, #16]
  404a72:	7812      	ldrb	r2, [r2, #0]
  404a74:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  404a76:	687b      	ldr	r3, [r7, #4]
  404a78:	1e5a      	subs	r2, r3, #1
  404a7a:	607a      	str	r2, [r7, #4]
  404a7c:	2b00      	cmp	r3, #0
  404a7e:	d1f2      	bne.n	404a66 <mem_cpy+0x16>
		*d++ = *s++;
}
  404a80:	371c      	adds	r7, #28
  404a82:	46bd      	mov	sp, r7
  404a84:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a88:	4770      	bx	lr
  404a8a:	bf00      	nop

00404a8c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  404a8c:	b480      	push	{r7}
  404a8e:	b087      	sub	sp, #28
  404a90:	af00      	add	r7, sp, #0
  404a92:	60f8      	str	r0, [r7, #12]
  404a94:	60b9      	str	r1, [r7, #8]
  404a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  404a98:	68fb      	ldr	r3, [r7, #12]
  404a9a:	617b      	str	r3, [r7, #20]

	while (cnt--)
  404a9c:	e005      	b.n	404aaa <mem_set+0x1e>
		*d++ = (BYTE)val;
  404a9e:	697b      	ldr	r3, [r7, #20]
  404aa0:	1c5a      	adds	r2, r3, #1
  404aa2:	617a      	str	r2, [r7, #20]
  404aa4:	68ba      	ldr	r2, [r7, #8]
  404aa6:	b2d2      	uxtb	r2, r2
  404aa8:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  404aaa:	687b      	ldr	r3, [r7, #4]
  404aac:	1e5a      	subs	r2, r3, #1
  404aae:	607a      	str	r2, [r7, #4]
  404ab0:	2b00      	cmp	r3, #0
  404ab2:	d1f4      	bne.n	404a9e <mem_set+0x12>
		*d++ = (BYTE)val;
}
  404ab4:	371c      	adds	r7, #28
  404ab6:	46bd      	mov	sp, r7
  404ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404abc:	4770      	bx	lr
  404abe:	bf00      	nop

00404ac0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
  404ac0:	b480      	push	{r7}
  404ac2:	b089      	sub	sp, #36	; 0x24
  404ac4:	af00      	add	r7, sp, #0
  404ac6:	60f8      	str	r0, [r7, #12]
  404ac8:	60b9      	str	r1, [r7, #8]
  404aca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  404acc:	68fb      	ldr	r3, [r7, #12]
  404ace:	61fb      	str	r3, [r7, #28]
  404ad0:	68bb      	ldr	r3, [r7, #8]
  404ad2:	61bb      	str	r3, [r7, #24]
	int r = 0;
  404ad4:	2300      	movs	r3, #0
  404ad6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  404ad8:	bf00      	nop
  404ada:	687b      	ldr	r3, [r7, #4]
  404adc:	1e5a      	subs	r2, r3, #1
  404ade:	607a      	str	r2, [r7, #4]
  404ae0:	2b00      	cmp	r3, #0
  404ae2:	d00d      	beq.n	404b00 <mem_cmp+0x40>
  404ae4:	69fb      	ldr	r3, [r7, #28]
  404ae6:	1c5a      	adds	r2, r3, #1
  404ae8:	61fa      	str	r2, [r7, #28]
  404aea:	781b      	ldrb	r3, [r3, #0]
  404aec:	461a      	mov	r2, r3
  404aee:	69bb      	ldr	r3, [r7, #24]
  404af0:	1c59      	adds	r1, r3, #1
  404af2:	61b9      	str	r1, [r7, #24]
  404af4:	781b      	ldrb	r3, [r3, #0]
  404af6:	1ad3      	subs	r3, r2, r3
  404af8:	617b      	str	r3, [r7, #20]
  404afa:	697b      	ldr	r3, [r7, #20]
  404afc:	2b00      	cmp	r3, #0
  404afe:	d0ec      	beq.n	404ada <mem_cmp+0x1a>
	return r;
  404b00:	697b      	ldr	r3, [r7, #20]
}
  404b02:	4618      	mov	r0, r3
  404b04:	3724      	adds	r7, #36	; 0x24
  404b06:	46bd      	mov	sp, r7
  404b08:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b0c:	4770      	bx	lr
  404b0e:	bf00      	nop

00404b10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  404b10:	b480      	push	{r7}
  404b12:	b083      	sub	sp, #12
  404b14:	af00      	add	r7, sp, #0
  404b16:	6078      	str	r0, [r7, #4]
  404b18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
  404b1a:	e002      	b.n	404b22 <chk_chr+0x12>
  404b1c:	687b      	ldr	r3, [r7, #4]
  404b1e:	3301      	adds	r3, #1
  404b20:	607b      	str	r3, [r7, #4]
  404b22:	687b      	ldr	r3, [r7, #4]
  404b24:	781b      	ldrb	r3, [r3, #0]
  404b26:	2b00      	cmp	r3, #0
  404b28:	d005      	beq.n	404b36 <chk_chr+0x26>
  404b2a:	687b      	ldr	r3, [r7, #4]
  404b2c:	781b      	ldrb	r3, [r3, #0]
  404b2e:	461a      	mov	r2, r3
  404b30:	683b      	ldr	r3, [r7, #0]
  404b32:	429a      	cmp	r2, r3
  404b34:	d1f2      	bne.n	404b1c <chk_chr+0xc>
	return *str;
  404b36:	687b      	ldr	r3, [r7, #4]
  404b38:	781b      	ldrb	r3, [r3, #0]
}
  404b3a:	4618      	mov	r0, r3
  404b3c:	370c      	adds	r7, #12
  404b3e:	46bd      	mov	sp, r7
  404b40:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b44:	4770      	bx	lr
  404b46:	bf00      	nop

00404b48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dj,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
  404b48:	b480      	push	{r7}
  404b4a:	b085      	sub	sp, #20
  404b4c:	af00      	add	r7, sp, #0
  404b4e:	6078      	str	r0, [r7, #4]
  404b50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  404b52:	2300      	movs	r3, #0
  404b54:	60bb      	str	r3, [r7, #8]
  404b56:	68bb      	ldr	r3, [r7, #8]
  404b58:	60fb      	str	r3, [r7, #12]
  404b5a:	e035      	b.n	404bc8 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
  404b5c:	492e      	ldr	r1, [pc, #184]	; (404c18 <chk_lock+0xd0>)
  404b5e:	68fa      	ldr	r2, [r7, #12]
  404b60:	4613      	mov	r3, r2
  404b62:	005b      	lsls	r3, r3, #1
  404b64:	4413      	add	r3, r2
  404b66:	009b      	lsls	r3, r3, #2
  404b68:	440b      	add	r3, r1
  404b6a:	681b      	ldr	r3, [r3, #0]
  404b6c:	2b00      	cmp	r3, #0
  404b6e:	d025      	beq.n	404bbc <chk_lock+0x74>
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  404b70:	4929      	ldr	r1, [pc, #164]	; (404c18 <chk_lock+0xd0>)
  404b72:	68fa      	ldr	r2, [r7, #12]
  404b74:	4613      	mov	r3, r2
  404b76:	005b      	lsls	r3, r3, #1
  404b78:	4413      	add	r3, r2
  404b7a:	009b      	lsls	r3, r3, #2
  404b7c:	440b      	add	r3, r1
  404b7e:	681a      	ldr	r2, [r3, #0]
  404b80:	687b      	ldr	r3, [r7, #4]
  404b82:	681b      	ldr	r3, [r3, #0]
  404b84:	429a      	cmp	r2, r3
  404b86:	d11c      	bne.n	404bc2 <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
  404b88:	4923      	ldr	r1, [pc, #140]	; (404c18 <chk_lock+0xd0>)
  404b8a:	68fa      	ldr	r2, [r7, #12]
  404b8c:	4613      	mov	r3, r2
  404b8e:	005b      	lsls	r3, r3, #1
  404b90:	4413      	add	r3, r2
  404b92:	009b      	lsls	r3, r3, #2
  404b94:	440b      	add	r3, r1
  404b96:	685a      	ldr	r2, [r3, #4]
  404b98:	687b      	ldr	r3, [r7, #4]
  404b9a:	689b      	ldr	r3, [r3, #8]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
  404b9c:	429a      	cmp	r2, r3
  404b9e:	d110      	bne.n	404bc2 <chk_lock+0x7a>
				Files[i].clu == dj->sclust &&
				Files[i].idx == dj->index) break;
  404ba0:	491d      	ldr	r1, [pc, #116]	; (404c18 <chk_lock+0xd0>)
  404ba2:	68fa      	ldr	r2, [r7, #12]
  404ba4:	4613      	mov	r3, r2
  404ba6:	005b      	lsls	r3, r3, #1
  404ba8:	4413      	add	r3, r2
  404baa:	009b      	lsls	r3, r3, #2
  404bac:	440b      	add	r3, r1
  404bae:	3308      	adds	r3, #8
  404bb0:	881a      	ldrh	r2, [r3, #0]
  404bb2:	687b      	ldr	r3, [r7, #4]
  404bb4:	88db      	ldrh	r3, [r3, #6]

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
				Files[i].clu == dj->sclust &&
  404bb6:	429a      	cmp	r2, r3
  404bb8:	d103      	bne.n	404bc2 <chk_lock+0x7a>
				Files[i].idx == dj->index) break;
  404bba:	e008      	b.n	404bce <chk_lock+0x86>
		} else {			/* Blank entry */
			be++;
  404bbc:	68bb      	ldr	r3, [r7, #8]
  404bbe:	3301      	adds	r3, #1
  404bc0:	60bb      	str	r3, [r7, #8]
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_SHARE; i++) {
  404bc2:	68fb      	ldr	r3, [r7, #12]
  404bc4:	3301      	adds	r3, #1
  404bc6:	60fb      	str	r3, [r7, #12]
  404bc8:	68fb      	ldr	r3, [r7, #12]
  404bca:	2b02      	cmp	r3, #2
  404bcc:	d9c6      	bls.n	404b5c <chk_lock+0x14>
				Files[i].idx == dj->index) break;
		} else {			/* Blank entry */
			be++;
		}
	}
	if (i == _FS_SHARE)	/* The file is not opened */
  404bce:	68fb      	ldr	r3, [r7, #12]
  404bd0:	2b03      	cmp	r3, #3
  404bd2:	d109      	bne.n	404be8 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
  404bd4:	68bb      	ldr	r3, [r7, #8]
  404bd6:	2b00      	cmp	r3, #0
  404bd8:	d102      	bne.n	404be0 <chk_lock+0x98>
  404bda:	683b      	ldr	r3, [r7, #0]
  404bdc:	2b02      	cmp	r3, #2
  404bde:	d101      	bne.n	404be4 <chk_lock+0x9c>
  404be0:	2300      	movs	r3, #0
  404be2:	e013      	b.n	404c0c <chk_lock+0xc4>
  404be4:	2312      	movs	r3, #18
  404be6:	e011      	b.n	404c0c <chk_lock+0xc4>

	/* The file has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
  404be8:	683b      	ldr	r3, [r7, #0]
  404bea:	2b00      	cmp	r3, #0
  404bec:	d10b      	bne.n	404c06 <chk_lock+0xbe>
  404bee:	490a      	ldr	r1, [pc, #40]	; (404c18 <chk_lock+0xd0>)
  404bf0:	68fa      	ldr	r2, [r7, #12]
  404bf2:	4613      	mov	r3, r2
  404bf4:	005b      	lsls	r3, r3, #1
  404bf6:	4413      	add	r3, r2
  404bf8:	009b      	lsls	r3, r3, #2
  404bfa:	440b      	add	r3, r1
  404bfc:	3308      	adds	r3, #8
  404bfe:	885b      	ldrh	r3, [r3, #2]
  404c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  404c04:	d101      	bne.n	404c0a <chk_lock+0xc2>
  404c06:	2310      	movs	r3, #16
  404c08:	e000      	b.n	404c0c <chk_lock+0xc4>
  404c0a:	2300      	movs	r3, #0
}
  404c0c:	4618      	mov	r0, r3
  404c0e:	3714      	adds	r7, #20
  404c10:	46bd      	mov	sp, r7
  404c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c16:	4770      	bx	lr
  404c18:	20001724 	.word	0x20001724

00404c1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new file */
{
  404c1c:	b480      	push	{r7}
  404c1e:	b083      	sub	sp, #12
  404c20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  404c22:	2300      	movs	r3, #0
  404c24:	607b      	str	r3, [r7, #4]
  404c26:	e002      	b.n	404c2e <enq_lock+0x12>
  404c28:	687b      	ldr	r3, [r7, #4]
  404c2a:	3301      	adds	r3, #1
  404c2c:	607b      	str	r3, [r7, #4]
  404c2e:	687b      	ldr	r3, [r7, #4]
  404c30:	2b02      	cmp	r3, #2
  404c32:	d809      	bhi.n	404c48 <enq_lock+0x2c>
  404c34:	490a      	ldr	r1, [pc, #40]	; (404c60 <enq_lock+0x44>)
  404c36:	687a      	ldr	r2, [r7, #4]
  404c38:	4613      	mov	r3, r2
  404c3a:	005b      	lsls	r3, r3, #1
  404c3c:	4413      	add	r3, r2
  404c3e:	009b      	lsls	r3, r3, #2
  404c40:	440b      	add	r3, r1
  404c42:	681b      	ldr	r3, [r3, #0]
  404c44:	2b00      	cmp	r3, #0
  404c46:	d1ef      	bne.n	404c28 <enq_lock+0xc>
	return (i == _FS_SHARE) ? 0 : 1;
  404c48:	687b      	ldr	r3, [r7, #4]
  404c4a:	2b03      	cmp	r3, #3
  404c4c:	bf0c      	ite	eq
  404c4e:	2300      	moveq	r3, #0
  404c50:	2301      	movne	r3, #1
  404c52:	b2db      	uxtb	r3, r3
}
  404c54:	4618      	mov	r0, r3
  404c56:	370c      	adds	r7, #12
  404c58:	46bd      	mov	sp, r7
  404c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c5e:	4770      	bx	lr
  404c60:	20001724 	.word	0x20001724

00404c64 <inc_lock>:
static
UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
	DIR* dj,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access mode (0:Read, !0:Write) */
)
{
  404c64:	b480      	push	{r7}
  404c66:	b085      	sub	sp, #20
  404c68:	af00      	add	r7, sp, #0
  404c6a:	6078      	str	r0, [r7, #4]
  404c6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  404c6e:	2300      	movs	r3, #0
  404c70:	60fb      	str	r3, [r7, #12]
  404c72:	e028      	b.n	404cc6 <inc_lock+0x62>
		if (Files[i].fs == dj->fs &&
  404c74:	4951      	ldr	r1, [pc, #324]	; (404dbc <inc_lock+0x158>)
  404c76:	68fa      	ldr	r2, [r7, #12]
  404c78:	4613      	mov	r3, r2
  404c7a:	005b      	lsls	r3, r3, #1
  404c7c:	4413      	add	r3, r2
  404c7e:	009b      	lsls	r3, r3, #2
  404c80:	440b      	add	r3, r1
  404c82:	681a      	ldr	r2, [r3, #0]
  404c84:	687b      	ldr	r3, [r7, #4]
  404c86:	681b      	ldr	r3, [r3, #0]
  404c88:	429a      	cmp	r2, r3
  404c8a:	d119      	bne.n	404cc0 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
  404c8c:	494b      	ldr	r1, [pc, #300]	; (404dbc <inc_lock+0x158>)
  404c8e:	68fa      	ldr	r2, [r7, #12]
  404c90:	4613      	mov	r3, r2
  404c92:	005b      	lsls	r3, r3, #1
  404c94:	4413      	add	r3, r2
  404c96:	009b      	lsls	r3, r3, #2
  404c98:	440b      	add	r3, r1
  404c9a:	685a      	ldr	r2, [r3, #4]
  404c9c:	687b      	ldr	r3, [r7, #4]
  404c9e:	689b      	ldr	r3, [r3, #8]
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
  404ca0:	429a      	cmp	r2, r3
  404ca2:	d10d      	bne.n	404cc0 <inc_lock+0x5c>
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
  404ca4:	4945      	ldr	r1, [pc, #276]	; (404dbc <inc_lock+0x158>)
  404ca6:	68fa      	ldr	r2, [r7, #12]
  404ca8:	4613      	mov	r3, r2
  404caa:	005b      	lsls	r3, r3, #1
  404cac:	4413      	add	r3, r2
  404cae:	009b      	lsls	r3, r3, #2
  404cb0:	440b      	add	r3, r1
  404cb2:	3308      	adds	r3, #8
  404cb4:	881a      	ldrh	r2, [r3, #0]
  404cb6:	687b      	ldr	r3, [r7, #4]
  404cb8:	88db      	ldrh	r3, [r3, #6]
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
  404cba:	429a      	cmp	r2, r3
  404cbc:	d100      	bne.n	404cc0 <inc_lock+0x5c>
			Files[i].idx == dj->index) break;
  404cbe:	e005      	b.n	404ccc <inc_lock+0x68>
)
{
	UINT i;


	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
  404cc0:	68fb      	ldr	r3, [r7, #12]
  404cc2:	3301      	adds	r3, #1
  404cc4:	60fb      	str	r3, [r7, #12]
  404cc6:	68fb      	ldr	r3, [r7, #12]
  404cc8:	2b02      	cmp	r3, #2
  404cca:	d9d3      	bls.n	404c74 <inc_lock+0x10>
		if (Files[i].fs == dj->fs &&
			Files[i].clu == dj->sclust &&
			Files[i].idx == dj->index) break;
	}

	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
  404ccc:	68fb      	ldr	r3, [r7, #12]
  404cce:	2b03      	cmp	r3, #3
  404cd0:	d141      	bne.n	404d56 <inc_lock+0xf2>
		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
  404cd2:	2300      	movs	r3, #0
  404cd4:	60fb      	str	r3, [r7, #12]
  404cd6:	e002      	b.n	404cde <inc_lock+0x7a>
  404cd8:	68fb      	ldr	r3, [r7, #12]
  404cda:	3301      	adds	r3, #1
  404cdc:	60fb      	str	r3, [r7, #12]
  404cde:	68fb      	ldr	r3, [r7, #12]
  404ce0:	2b02      	cmp	r3, #2
  404ce2:	d809      	bhi.n	404cf8 <inc_lock+0x94>
  404ce4:	4935      	ldr	r1, [pc, #212]	; (404dbc <inc_lock+0x158>)
  404ce6:	68fa      	ldr	r2, [r7, #12]
  404ce8:	4613      	mov	r3, r2
  404cea:	005b      	lsls	r3, r3, #1
  404cec:	4413      	add	r3, r2
  404cee:	009b      	lsls	r3, r3, #2
  404cf0:	440b      	add	r3, r1
  404cf2:	681b      	ldr	r3, [r3, #0]
  404cf4:	2b00      	cmp	r3, #0
  404cf6:	d1ef      	bne.n	404cd8 <inc_lock+0x74>
		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
  404cf8:	68fb      	ldr	r3, [r7, #12]
  404cfa:	2b03      	cmp	r3, #3
  404cfc:	d101      	bne.n	404d02 <inc_lock+0x9e>
  404cfe:	2300      	movs	r3, #0
  404d00:	e055      	b.n	404dae <inc_lock+0x14a>
		Files[i].fs = dj->fs;
  404d02:	687b      	ldr	r3, [r7, #4]
  404d04:	6819      	ldr	r1, [r3, #0]
  404d06:	482d      	ldr	r0, [pc, #180]	; (404dbc <inc_lock+0x158>)
  404d08:	68fa      	ldr	r2, [r7, #12]
  404d0a:	4613      	mov	r3, r2
  404d0c:	005b      	lsls	r3, r3, #1
  404d0e:	4413      	add	r3, r2
  404d10:	009b      	lsls	r3, r3, #2
  404d12:	4403      	add	r3, r0
  404d14:	6019      	str	r1, [r3, #0]
		Files[i].clu = dj->sclust;
  404d16:	687b      	ldr	r3, [r7, #4]
  404d18:	6899      	ldr	r1, [r3, #8]
  404d1a:	4828      	ldr	r0, [pc, #160]	; (404dbc <inc_lock+0x158>)
  404d1c:	68fa      	ldr	r2, [r7, #12]
  404d1e:	4613      	mov	r3, r2
  404d20:	005b      	lsls	r3, r3, #1
  404d22:	4413      	add	r3, r2
  404d24:	009b      	lsls	r3, r3, #2
  404d26:	4403      	add	r3, r0
  404d28:	6059      	str	r1, [r3, #4]
		Files[i].idx = dj->index;
  404d2a:	687b      	ldr	r3, [r7, #4]
  404d2c:	88d9      	ldrh	r1, [r3, #6]
  404d2e:	4823      	ldr	r0, [pc, #140]	; (404dbc <inc_lock+0x158>)
  404d30:	68fa      	ldr	r2, [r7, #12]
  404d32:	4613      	mov	r3, r2
  404d34:	005b      	lsls	r3, r3, #1
  404d36:	4413      	add	r3, r2
  404d38:	009b      	lsls	r3, r3, #2
  404d3a:	4403      	add	r3, r0
  404d3c:	3308      	adds	r3, #8
  404d3e:	460a      	mov	r2, r1
  404d40:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
  404d42:	491e      	ldr	r1, [pc, #120]	; (404dbc <inc_lock+0x158>)
  404d44:	68fa      	ldr	r2, [r7, #12]
  404d46:	4613      	mov	r3, r2
  404d48:	005b      	lsls	r3, r3, #1
  404d4a:	4413      	add	r3, r2
  404d4c:	009b      	lsls	r3, r3, #2
  404d4e:	440b      	add	r3, r1
  404d50:	3308      	adds	r3, #8
  404d52:	2200      	movs	r2, #0
  404d54:	805a      	strh	r2, [r3, #2]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
  404d56:	683b      	ldr	r3, [r7, #0]
  404d58:	2b00      	cmp	r3, #0
  404d5a:	d00c      	beq.n	404d76 <inc_lock+0x112>
  404d5c:	4917      	ldr	r1, [pc, #92]	; (404dbc <inc_lock+0x158>)
  404d5e:	68fa      	ldr	r2, [r7, #12]
  404d60:	4613      	mov	r3, r2
  404d62:	005b      	lsls	r3, r3, #1
  404d64:	4413      	add	r3, r2
  404d66:	009b      	lsls	r3, r3, #2
  404d68:	440b      	add	r3, r1
  404d6a:	3308      	adds	r3, #8
  404d6c:	885b      	ldrh	r3, [r3, #2]
  404d6e:	2b00      	cmp	r3, #0
  404d70:	d001      	beq.n	404d76 <inc_lock+0x112>
  404d72:	2300      	movs	r3, #0
  404d74:	e01b      	b.n	404dae <inc_lock+0x14a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
  404d76:	683b      	ldr	r3, [r7, #0]
  404d78:	2b00      	cmp	r3, #0
  404d7a:	d10b      	bne.n	404d94 <inc_lock+0x130>
  404d7c:	490f      	ldr	r1, [pc, #60]	; (404dbc <inc_lock+0x158>)
  404d7e:	68fa      	ldr	r2, [r7, #12]
  404d80:	4613      	mov	r3, r2
  404d82:	005b      	lsls	r3, r3, #1
  404d84:	4413      	add	r3, r2
  404d86:	009b      	lsls	r3, r3, #2
  404d88:	440b      	add	r3, r1
  404d8a:	3308      	adds	r3, #8
  404d8c:	885b      	ldrh	r3, [r3, #2]
  404d8e:	3301      	adds	r3, #1
  404d90:	b29a      	uxth	r2, r3
  404d92:	e001      	b.n	404d98 <inc_lock+0x134>
  404d94:	f44f 7280 	mov.w	r2, #256	; 0x100
  404d98:	4808      	ldr	r0, [pc, #32]	; (404dbc <inc_lock+0x158>)
  404d9a:	68f9      	ldr	r1, [r7, #12]
  404d9c:	460b      	mov	r3, r1
  404d9e:	005b      	lsls	r3, r3, #1
  404da0:	440b      	add	r3, r1
  404da2:	009b      	lsls	r3, r3, #2
  404da4:	4403      	add	r3, r0
  404da6:	3308      	adds	r3, #8
  404da8:	805a      	strh	r2, [r3, #2]

	return i + 1;
  404daa:	68fb      	ldr	r3, [r7, #12]
  404dac:	3301      	adds	r3, #1
}
  404dae:	4618      	mov	r0, r3
  404db0:	3714      	adds	r7, #20
  404db2:	46bd      	mov	sp, r7
  404db4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404db8:	4770      	bx	lr
  404dba:	bf00      	nop
  404dbc:	20001724 	.word	0x20001724

00404dc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement file open counter */
	UINT i			/* Semaphore index */
)
{
  404dc0:	b480      	push	{r7}
  404dc2:	b085      	sub	sp, #20
  404dc4:	af00      	add	r7, sp, #0
  404dc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_SHARE) {
  404dc8:	687b      	ldr	r3, [r7, #4]
  404dca:	3b01      	subs	r3, #1
  404dcc:	607b      	str	r3, [r7, #4]
  404dce:	687b      	ldr	r3, [r7, #4]
  404dd0:	2b02      	cmp	r3, #2
  404dd2:	d82e      	bhi.n	404e32 <dec_lock+0x72>
		n = Files[i].ctr;
  404dd4:	491b      	ldr	r1, [pc, #108]	; (404e44 <dec_lock+0x84>)
  404dd6:	687a      	ldr	r2, [r7, #4]
  404dd8:	4613      	mov	r3, r2
  404dda:	005b      	lsls	r3, r3, #1
  404ddc:	4413      	add	r3, r2
  404dde:	009b      	lsls	r3, r3, #2
  404de0:	440b      	add	r3, r1
  404de2:	3308      	adds	r3, #8
  404de4:	885b      	ldrh	r3, [r3, #2]
  404de6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;
  404de8:	89fb      	ldrh	r3, [r7, #14]
  404dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  404dee:	d101      	bne.n	404df4 <dec_lock+0x34>
  404df0:	2300      	movs	r3, #0
  404df2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;
  404df4:	89fb      	ldrh	r3, [r7, #14]
  404df6:	2b00      	cmp	r3, #0
  404df8:	d002      	beq.n	404e00 <dec_lock+0x40>
  404dfa:	89fb      	ldrh	r3, [r7, #14]
  404dfc:	3b01      	subs	r3, #1
  404dfe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
  404e00:	4910      	ldr	r1, [pc, #64]	; (404e44 <dec_lock+0x84>)
  404e02:	687a      	ldr	r2, [r7, #4]
  404e04:	4613      	mov	r3, r2
  404e06:	005b      	lsls	r3, r3, #1
  404e08:	4413      	add	r3, r2
  404e0a:	009b      	lsls	r3, r3, #2
  404e0c:	440b      	add	r3, r1
  404e0e:	3308      	adds	r3, #8
  404e10:	89fa      	ldrh	r2, [r7, #14]
  404e12:	805a      	strh	r2, [r3, #2]
		if (!n) Files[i].fs = 0;
  404e14:	89fb      	ldrh	r3, [r7, #14]
  404e16:	2b00      	cmp	r3, #0
  404e18:	d108      	bne.n	404e2c <dec_lock+0x6c>
  404e1a:	490a      	ldr	r1, [pc, #40]	; (404e44 <dec_lock+0x84>)
  404e1c:	687a      	ldr	r2, [r7, #4]
  404e1e:	4613      	mov	r3, r2
  404e20:	005b      	lsls	r3, r3, #1
  404e22:	4413      	add	r3, r2
  404e24:	009b      	lsls	r3, r3, #2
  404e26:	440b      	add	r3, r1
  404e28:	2200      	movs	r2, #0
  404e2a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
  404e2c:	2300      	movs	r3, #0
  404e2e:	737b      	strb	r3, [r7, #13]
  404e30:	e001      	b.n	404e36 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;
  404e32:	2302      	movs	r3, #2
  404e34:	737b      	strb	r3, [r7, #13]
	}
	return res;
  404e36:	7b7b      	ldrb	r3, [r7, #13]
}
  404e38:	4618      	mov	r0, r3
  404e3a:	3714      	adds	r7, #20
  404e3c:	46bd      	mov	sp, r7
  404e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e42:	4770      	bx	lr
  404e44:	20001724 	.word	0x20001724

00404e48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
  404e48:	b480      	push	{r7}
  404e4a:	b085      	sub	sp, #20
  404e4c:	af00      	add	r7, sp, #0
  404e4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  404e50:	2300      	movs	r3, #0
  404e52:	60fb      	str	r3, [r7, #12]
  404e54:	e016      	b.n	404e84 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
  404e56:	490f      	ldr	r1, [pc, #60]	; (404e94 <clear_lock+0x4c>)
  404e58:	68fa      	ldr	r2, [r7, #12]
  404e5a:	4613      	mov	r3, r2
  404e5c:	005b      	lsls	r3, r3, #1
  404e5e:	4413      	add	r3, r2
  404e60:	009b      	lsls	r3, r3, #2
  404e62:	440b      	add	r3, r1
  404e64:	681a      	ldr	r2, [r3, #0]
  404e66:	687b      	ldr	r3, [r7, #4]
  404e68:	429a      	cmp	r2, r3
  404e6a:	d108      	bne.n	404e7e <clear_lock+0x36>
  404e6c:	4909      	ldr	r1, [pc, #36]	; (404e94 <clear_lock+0x4c>)
  404e6e:	68fa      	ldr	r2, [r7, #12]
  404e70:	4613      	mov	r3, r2
  404e72:	005b      	lsls	r3, r3, #1
  404e74:	4413      	add	r3, r2
  404e76:	009b      	lsls	r3, r3, #2
  404e78:	440b      	add	r3, r1
  404e7a:	2200      	movs	r2, #0
  404e7c:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_SHARE; i++) {
  404e7e:	68fb      	ldr	r3, [r7, #12]
  404e80:	3301      	adds	r3, #1
  404e82:	60fb      	str	r3, [r7, #12]
  404e84:	68fb      	ldr	r3, [r7, #12]
  404e86:	2b02      	cmp	r3, #2
  404e88:	d9e5      	bls.n	404e56 <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
  404e8a:	3714      	adds	r7, #20
  404e8c:	46bd      	mov	sp, r7
  404e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e92:	4770      	bx	lr
  404e94:	20001724 	.word	0x20001724

00404e98 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  404e98:	b590      	push	{r4, r7, lr}
  404e9a:	b085      	sub	sp, #20
  404e9c:	af00      	add	r7, sp, #0
  404e9e:	6078      	str	r0, [r7, #4]
  404ea0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
  404ea2:	687b      	ldr	r3, [r7, #4]
  404ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404ea6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
  404ea8:	68fa      	ldr	r2, [r7, #12]
  404eaa:	683b      	ldr	r3, [r7, #0]
  404eac:	429a      	cmp	r2, r3
  404eae:	d04b      	beq.n	404f48 <move_window+0xb0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  404eb0:	687b      	ldr	r3, [r7, #4]
  404eb2:	791b      	ldrb	r3, [r3, #4]
  404eb4:	2b00      	cmp	r3, #0
  404eb6:	d032      	beq.n	404f1e <move_window+0x86>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  404eb8:	687b      	ldr	r3, [r7, #4]
  404eba:	785a      	ldrb	r2, [r3, #1]
  404ebc:	687b      	ldr	r3, [r7, #4]
  404ebe:	3330      	adds	r3, #48	; 0x30
  404ec0:	4610      	mov	r0, r2
  404ec2:	4619      	mov	r1, r3
  404ec4:	68fa      	ldr	r2, [r7, #12]
  404ec6:	2301      	movs	r3, #1
  404ec8:	4c22      	ldr	r4, [pc, #136]	; (404f54 <move_window+0xbc>)
  404eca:	47a0      	blx	r4
  404ecc:	4603      	mov	r3, r0
  404ece:	2b00      	cmp	r3, #0
  404ed0:	d001      	beq.n	404ed6 <move_window+0x3e>
				return FR_DISK_ERR;
  404ed2:	2301      	movs	r3, #1
  404ed4:	e039      	b.n	404f4a <move_window+0xb2>
			fs->wflag = 0;
  404ed6:	687b      	ldr	r3, [r7, #4]
  404ed8:	2200      	movs	r2, #0
  404eda:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  404edc:	687b      	ldr	r3, [r7, #4]
  404ede:	6a1a      	ldr	r2, [r3, #32]
  404ee0:	687b      	ldr	r3, [r7, #4]
  404ee2:	69db      	ldr	r3, [r3, #28]
  404ee4:	441a      	add	r2, r3
  404ee6:	68fb      	ldr	r3, [r7, #12]
  404ee8:	429a      	cmp	r2, r3
  404eea:	d918      	bls.n	404f1e <move_window+0x86>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  404eec:	687b      	ldr	r3, [r7, #4]
  404eee:	78db      	ldrb	r3, [r3, #3]
  404ef0:	72fb      	strb	r3, [r7, #11]
  404ef2:	e011      	b.n	404f18 <move_window+0x80>
					wsect += fs->fsize;
  404ef4:	687b      	ldr	r3, [r7, #4]
  404ef6:	69db      	ldr	r3, [r3, #28]
  404ef8:	68fa      	ldr	r2, [r7, #12]
  404efa:	4413      	add	r3, r2
  404efc:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
  404efe:	687b      	ldr	r3, [r7, #4]
  404f00:	785a      	ldrb	r2, [r3, #1]
  404f02:	687b      	ldr	r3, [r7, #4]
  404f04:	3330      	adds	r3, #48	; 0x30
  404f06:	4610      	mov	r0, r2
  404f08:	4619      	mov	r1, r3
  404f0a:	68fa      	ldr	r2, [r7, #12]
  404f0c:	2301      	movs	r3, #1
  404f0e:	4c11      	ldr	r4, [pc, #68]	; (404f54 <move_window+0xbc>)
  404f10:	47a0      	blx	r4
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  404f12:	7afb      	ldrb	r3, [r7, #11]
  404f14:	3b01      	subs	r3, #1
  404f16:	72fb      	strb	r3, [r7, #11]
  404f18:	7afb      	ldrb	r3, [r7, #11]
  404f1a:	2b01      	cmp	r3, #1
  404f1c:	d8ea      	bhi.n	404ef4 <move_window+0x5c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  404f1e:	683b      	ldr	r3, [r7, #0]
  404f20:	2b00      	cmp	r3, #0
  404f22:	d011      	beq.n	404f48 <move_window+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  404f24:	687b      	ldr	r3, [r7, #4]
  404f26:	785a      	ldrb	r2, [r3, #1]
  404f28:	687b      	ldr	r3, [r7, #4]
  404f2a:	3330      	adds	r3, #48	; 0x30
  404f2c:	4610      	mov	r0, r2
  404f2e:	4619      	mov	r1, r3
  404f30:	683a      	ldr	r2, [r7, #0]
  404f32:	2301      	movs	r3, #1
  404f34:	4c08      	ldr	r4, [pc, #32]	; (404f58 <move_window+0xc0>)
  404f36:	47a0      	blx	r4
  404f38:	4603      	mov	r3, r0
  404f3a:	2b00      	cmp	r3, #0
  404f3c:	d001      	beq.n	404f42 <move_window+0xaa>
				return FR_DISK_ERR;
  404f3e:	2301      	movs	r3, #1
  404f40:	e003      	b.n	404f4a <move_window+0xb2>
			fs->winsect = sector;
  404f42:	687b      	ldr	r3, [r7, #4]
  404f44:	683a      	ldr	r2, [r7, #0]
  404f46:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
  404f48:	2300      	movs	r3, #0
}
  404f4a:	4618      	mov	r0, r3
  404f4c:	3714      	adds	r7, #20
  404f4e:	46bd      	mov	sp, r7
  404f50:	bd90      	pop	{r4, r7, pc}
  404f52:	bf00      	nop
  404f54:	00404879 	.word	0x00404879
  404f58:	004047c9 	.word	0x004047c9

00404f5c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  404f5c:	b590      	push	{r4, r7, lr}
  404f5e:	b085      	sub	sp, #20
  404f60:	af00      	add	r7, sp, #0
  404f62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
  404f64:	6878      	ldr	r0, [r7, #4]
  404f66:	2100      	movs	r1, #0
  404f68:	4b4f      	ldr	r3, [pc, #316]	; (4050a8 <sync+0x14c>)
  404f6a:	4798      	blx	r3
  404f6c:	4603      	mov	r3, r0
  404f6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  404f70:	7bfb      	ldrb	r3, [r7, #15]
  404f72:	2b00      	cmp	r3, #0
  404f74:	f040 8092 	bne.w	40509c <sync+0x140>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404f78:	687b      	ldr	r3, [r7, #4]
  404f7a:	781b      	ldrb	r3, [r3, #0]
  404f7c:	2b03      	cmp	r3, #3
  404f7e:	f040 8081 	bne.w	405084 <sync+0x128>
  404f82:	687b      	ldr	r3, [r7, #4]
  404f84:	795b      	ldrb	r3, [r3, #5]
  404f86:	2b00      	cmp	r3, #0
  404f88:	d07c      	beq.n	405084 <sync+0x128>
			fs->winsect = 0;
  404f8a:	687b      	ldr	r3, [r7, #4]
  404f8c:	2200      	movs	r2, #0
  404f8e:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  404f90:	687b      	ldr	r3, [r7, #4]
  404f92:	3330      	adds	r3, #48	; 0x30
  404f94:	4618      	mov	r0, r3
  404f96:	2100      	movs	r1, #0
  404f98:	f44f 7200 	mov.w	r2, #512	; 0x200
  404f9c:	4b43      	ldr	r3, [pc, #268]	; (4050ac <sync+0x150>)
  404f9e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  404fa0:	687b      	ldr	r3, [r7, #4]
  404fa2:	2255      	movs	r2, #85	; 0x55
  404fa4:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  404fa8:	687b      	ldr	r3, [r7, #4]
  404faa:	22aa      	movs	r2, #170	; 0xaa
  404fac:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  404fb0:	687b      	ldr	r3, [r7, #4]
  404fb2:	2252      	movs	r2, #82	; 0x52
  404fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  404fb8:	687b      	ldr	r3, [r7, #4]
  404fba:	2252      	movs	r2, #82	; 0x52
  404fbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  404fc0:	687b      	ldr	r3, [r7, #4]
  404fc2:	2261      	movs	r2, #97	; 0x61
  404fc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  404fc8:	687b      	ldr	r3, [r7, #4]
  404fca:	2241      	movs	r2, #65	; 0x41
  404fcc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  404fd0:	687b      	ldr	r3, [r7, #4]
  404fd2:	2272      	movs	r2, #114	; 0x72
  404fd4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
  404fd8:	687b      	ldr	r3, [r7, #4]
  404fda:	2272      	movs	r2, #114	; 0x72
  404fdc:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  404fe0:	687b      	ldr	r3, [r7, #4]
  404fe2:	2241      	movs	r2, #65	; 0x41
  404fe4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
  404fe8:	687b      	ldr	r3, [r7, #4]
  404fea:	2261      	movs	r2, #97	; 0x61
  404fec:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  404ff0:	687b      	ldr	r3, [r7, #4]
  404ff2:	691b      	ldr	r3, [r3, #16]
  404ff4:	b2da      	uxtb	r2, r3
  404ff6:	687b      	ldr	r3, [r7, #4]
  404ff8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  404ffc:	687b      	ldr	r3, [r7, #4]
  404ffe:	691b      	ldr	r3, [r3, #16]
  405000:	b29b      	uxth	r3, r3
  405002:	0a1b      	lsrs	r3, r3, #8
  405004:	b29b      	uxth	r3, r3
  405006:	b2da      	uxtb	r2, r3
  405008:	687b      	ldr	r3, [r7, #4]
  40500a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  40500e:	687b      	ldr	r3, [r7, #4]
  405010:	691b      	ldr	r3, [r3, #16]
  405012:	0c1b      	lsrs	r3, r3, #16
  405014:	b2da      	uxtb	r2, r3
  405016:	687b      	ldr	r3, [r7, #4]
  405018:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  40501c:	687b      	ldr	r3, [r7, #4]
  40501e:	691b      	ldr	r3, [r3, #16]
  405020:	0e1b      	lsrs	r3, r3, #24
  405022:	b2da      	uxtb	r2, r3
  405024:	687b      	ldr	r3, [r7, #4]
  405026:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40502a:	687b      	ldr	r3, [r7, #4]
  40502c:	68db      	ldr	r3, [r3, #12]
  40502e:	b2da      	uxtb	r2, r3
  405030:	687b      	ldr	r3, [r7, #4]
  405032:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  405036:	687b      	ldr	r3, [r7, #4]
  405038:	68db      	ldr	r3, [r3, #12]
  40503a:	b29b      	uxth	r3, r3
  40503c:	0a1b      	lsrs	r3, r3, #8
  40503e:	b29b      	uxth	r3, r3
  405040:	b2da      	uxtb	r2, r3
  405042:	687b      	ldr	r3, [r7, #4]
  405044:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  405048:	687b      	ldr	r3, [r7, #4]
  40504a:	68db      	ldr	r3, [r3, #12]
  40504c:	0c1b      	lsrs	r3, r3, #16
  40504e:	b2da      	uxtb	r2, r3
  405050:	687b      	ldr	r3, [r7, #4]
  405052:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
  405056:	687b      	ldr	r3, [r7, #4]
  405058:	68db      	ldr	r3, [r3, #12]
  40505a:	0e1b      	lsrs	r3, r3, #24
  40505c:	b2da      	uxtb	r2, r3
  40505e:	687b      	ldr	r3, [r7, #4]
  405060:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  405064:	687b      	ldr	r3, [r7, #4]
  405066:	7859      	ldrb	r1, [r3, #1]
  405068:	687b      	ldr	r3, [r7, #4]
  40506a:	f103 0230 	add.w	r2, r3, #48	; 0x30
  40506e:	687b      	ldr	r3, [r7, #4]
  405070:	695b      	ldr	r3, [r3, #20]
  405072:	4608      	mov	r0, r1
  405074:	4611      	mov	r1, r2
  405076:	461a      	mov	r2, r3
  405078:	2301      	movs	r3, #1
  40507a:	4c0d      	ldr	r4, [pc, #52]	; (4050b0 <sync+0x154>)
  40507c:	47a0      	blx	r4
			fs->fsi_flag = 0;
  40507e:	687b      	ldr	r3, [r7, #4]
  405080:	2200      	movs	r2, #0
  405082:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  405084:	687b      	ldr	r3, [r7, #4]
  405086:	785b      	ldrb	r3, [r3, #1]
  405088:	4618      	mov	r0, r3
  40508a:	2100      	movs	r1, #0
  40508c:	2200      	movs	r2, #0
  40508e:	4b09      	ldr	r3, [pc, #36]	; (4050b4 <sync+0x158>)
  405090:	4798      	blx	r3
  405092:	4603      	mov	r3, r0
  405094:	2b00      	cmp	r3, #0
  405096:	d001      	beq.n	40509c <sync+0x140>
			res = FR_DISK_ERR;
  405098:	2301      	movs	r3, #1
  40509a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  40509c:	7bfb      	ldrb	r3, [r7, #15]
}
  40509e:	4618      	mov	r0, r3
  4050a0:	3714      	adds	r7, #20
  4050a2:	46bd      	mov	sp, r7
  4050a4:	bd90      	pop	{r4, r7, pc}
  4050a6:	bf00      	nop
  4050a8:	00404e99 	.word	0x00404e99
  4050ac:	00404a8d 	.word	0x00404a8d
  4050b0:	00404879 	.word	0x00404879
  4050b4:	00404929 	.word	0x00404929

004050b8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
  4050b8:	b480      	push	{r7}
  4050ba:	b083      	sub	sp, #12
  4050bc:	af00      	add	r7, sp, #0
  4050be:	6078      	str	r0, [r7, #4]
  4050c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
  4050c2:	683b      	ldr	r3, [r7, #0]
  4050c4:	3b02      	subs	r3, #2
  4050c6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4050c8:	687b      	ldr	r3, [r7, #4]
  4050ca:	699b      	ldr	r3, [r3, #24]
  4050cc:	1e9a      	subs	r2, r3, #2
  4050ce:	683b      	ldr	r3, [r7, #0]
  4050d0:	429a      	cmp	r2, r3
  4050d2:	d801      	bhi.n	4050d8 <clust2sect+0x20>
  4050d4:	2300      	movs	r3, #0
  4050d6:	e007      	b.n	4050e8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
  4050d8:	687b      	ldr	r3, [r7, #4]
  4050da:	789b      	ldrb	r3, [r3, #2]
  4050dc:	683a      	ldr	r2, [r7, #0]
  4050de:	fb02 f203 	mul.w	r2, r2, r3
  4050e2:	687b      	ldr	r3, [r7, #4]
  4050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4050e6:	4413      	add	r3, r2
}
  4050e8:	4618      	mov	r0, r3
  4050ea:	370c      	adds	r7, #12
  4050ec:	46bd      	mov	sp, r7
  4050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050f2:	4770      	bx	lr

004050f4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  4050f4:	b580      	push	{r7, lr}
  4050f6:	b086      	sub	sp, #24
  4050f8:	af00      	add	r7, sp, #0
  4050fa:	6078      	str	r0, [r7, #4]
  4050fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4050fe:	683b      	ldr	r3, [r7, #0]
  405100:	2b01      	cmp	r3, #1
  405102:	d904      	bls.n	40510e <get_fat+0x1a>
  405104:	687b      	ldr	r3, [r7, #4]
  405106:	699a      	ldr	r2, [r3, #24]
  405108:	683b      	ldr	r3, [r7, #0]
  40510a:	429a      	cmp	r2, r3
  40510c:	d801      	bhi.n	405112 <get_fat+0x1e>
		return 1;
  40510e:	2301      	movs	r3, #1
  405110:	e096      	b.n	405240 <get_fat+0x14c>

	switch (fs->fs_type) {
  405112:	687b      	ldr	r3, [r7, #4]
  405114:	781b      	ldrb	r3, [r3, #0]
  405116:	2b02      	cmp	r3, #2
  405118:	d047      	beq.n	4051aa <get_fat+0xb6>
  40511a:	2b03      	cmp	r3, #3
  40511c:	d065      	beq.n	4051ea <get_fat+0xf6>
  40511e:	2b01      	cmp	r3, #1
  405120:	f040 808c 	bne.w	40523c <get_fat+0x148>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  405124:	683b      	ldr	r3, [r7, #0]
  405126:	617b      	str	r3, [r7, #20]
  405128:	697b      	ldr	r3, [r7, #20]
  40512a:	085b      	lsrs	r3, r3, #1
  40512c:	697a      	ldr	r2, [r7, #20]
  40512e:	4413      	add	r3, r2
  405130:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405132:	687b      	ldr	r3, [r7, #4]
  405134:	6a1a      	ldr	r2, [r3, #32]
  405136:	697b      	ldr	r3, [r7, #20]
  405138:	0a5b      	lsrs	r3, r3, #9
  40513a:	4413      	add	r3, r2
  40513c:	6878      	ldr	r0, [r7, #4]
  40513e:	4619      	mov	r1, r3
  405140:	4b41      	ldr	r3, [pc, #260]	; (405248 <get_fat+0x154>)
  405142:	4798      	blx	r3
  405144:	4603      	mov	r3, r0
  405146:	2b00      	cmp	r3, #0
  405148:	d000      	beq.n	40514c <get_fat+0x58>
  40514a:	e077      	b.n	40523c <get_fat+0x148>
		wc = fs->win[bc % SS(fs)]; bc++;
  40514c:	697b      	ldr	r3, [r7, #20]
  40514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405152:	687a      	ldr	r2, [r7, #4]
  405154:	4413      	add	r3, r2
  405156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40515a:	613b      	str	r3, [r7, #16]
  40515c:	697b      	ldr	r3, [r7, #20]
  40515e:	3301      	adds	r3, #1
  405160:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405162:	687b      	ldr	r3, [r7, #4]
  405164:	6a1a      	ldr	r2, [r3, #32]
  405166:	697b      	ldr	r3, [r7, #20]
  405168:	0a5b      	lsrs	r3, r3, #9
  40516a:	4413      	add	r3, r2
  40516c:	6878      	ldr	r0, [r7, #4]
  40516e:	4619      	mov	r1, r3
  405170:	4b35      	ldr	r3, [pc, #212]	; (405248 <get_fat+0x154>)
  405172:	4798      	blx	r3
  405174:	4603      	mov	r3, r0
  405176:	2b00      	cmp	r3, #0
  405178:	d000      	beq.n	40517c <get_fat+0x88>
  40517a:	e05f      	b.n	40523c <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
  40517c:	697b      	ldr	r3, [r7, #20]
  40517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405182:	687a      	ldr	r2, [r7, #4]
  405184:	4413      	add	r3, r2
  405186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40518a:	021b      	lsls	r3, r3, #8
  40518c:	693a      	ldr	r2, [r7, #16]
  40518e:	4313      	orrs	r3, r2
  405190:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  405192:	683b      	ldr	r3, [r7, #0]
  405194:	f003 0301 	and.w	r3, r3, #1
  405198:	2b00      	cmp	r3, #0
  40519a:	d002      	beq.n	4051a2 <get_fat+0xae>
  40519c:	693b      	ldr	r3, [r7, #16]
  40519e:	091b      	lsrs	r3, r3, #4
  4051a0:	e002      	b.n	4051a8 <get_fat+0xb4>
  4051a2:	693b      	ldr	r3, [r7, #16]
  4051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4051a8:	e04a      	b.n	405240 <get_fat+0x14c>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  4051aa:	687b      	ldr	r3, [r7, #4]
  4051ac:	6a1a      	ldr	r2, [r3, #32]
  4051ae:	683b      	ldr	r3, [r7, #0]
  4051b0:	0a1b      	lsrs	r3, r3, #8
  4051b2:	4413      	add	r3, r2
  4051b4:	6878      	ldr	r0, [r7, #4]
  4051b6:	4619      	mov	r1, r3
  4051b8:	4b23      	ldr	r3, [pc, #140]	; (405248 <get_fat+0x154>)
  4051ba:	4798      	blx	r3
  4051bc:	4603      	mov	r3, r0
  4051be:	2b00      	cmp	r3, #0
  4051c0:	d000      	beq.n	4051c4 <get_fat+0xd0>
  4051c2:	e03b      	b.n	40523c <get_fat+0x148>
		p = &fs->win[clst * 2 % SS(fs)];
  4051c4:	683b      	ldr	r3, [r7, #0]
  4051c6:	005b      	lsls	r3, r3, #1
  4051c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  4051cc:	3330      	adds	r3, #48	; 0x30
  4051ce:	687a      	ldr	r2, [r7, #4]
  4051d0:	4413      	add	r3, r2
  4051d2:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
  4051d4:	68fb      	ldr	r3, [r7, #12]
  4051d6:	3301      	adds	r3, #1
  4051d8:	781b      	ldrb	r3, [r3, #0]
  4051da:	021b      	lsls	r3, r3, #8
  4051dc:	b29a      	uxth	r2, r3
  4051de:	68fb      	ldr	r3, [r7, #12]
  4051e0:	781b      	ldrb	r3, [r3, #0]
  4051e2:	4313      	orrs	r3, r2
  4051e4:	b29b      	uxth	r3, r3
  4051e6:	b29b      	uxth	r3, r3
  4051e8:	e02a      	b.n	405240 <get_fat+0x14c>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4051ea:	687b      	ldr	r3, [r7, #4]
  4051ec:	6a1a      	ldr	r2, [r3, #32]
  4051ee:	683b      	ldr	r3, [r7, #0]
  4051f0:	09db      	lsrs	r3, r3, #7
  4051f2:	4413      	add	r3, r2
  4051f4:	6878      	ldr	r0, [r7, #4]
  4051f6:	4619      	mov	r1, r3
  4051f8:	4b13      	ldr	r3, [pc, #76]	; (405248 <get_fat+0x154>)
  4051fa:	4798      	blx	r3
  4051fc:	4603      	mov	r3, r0
  4051fe:	2b00      	cmp	r3, #0
  405200:	d000      	beq.n	405204 <get_fat+0x110>
  405202:	e01b      	b.n	40523c <get_fat+0x148>
		p = &fs->win[clst * 4 % SS(fs)];
  405204:	683b      	ldr	r3, [r7, #0]
  405206:	009b      	lsls	r3, r3, #2
  405208:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  40520c:	3330      	adds	r3, #48	; 0x30
  40520e:	687a      	ldr	r2, [r7, #4]
  405210:	4413      	add	r3, r2
  405212:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
  405214:	68fb      	ldr	r3, [r7, #12]
  405216:	3303      	adds	r3, #3
  405218:	781b      	ldrb	r3, [r3, #0]
  40521a:	061a      	lsls	r2, r3, #24
  40521c:	68fb      	ldr	r3, [r7, #12]
  40521e:	3302      	adds	r3, #2
  405220:	781b      	ldrb	r3, [r3, #0]
  405222:	041b      	lsls	r3, r3, #16
  405224:	431a      	orrs	r2, r3
  405226:	68fb      	ldr	r3, [r7, #12]
  405228:	3301      	adds	r3, #1
  40522a:	781b      	ldrb	r3, [r3, #0]
  40522c:	021b      	lsls	r3, r3, #8
  40522e:	431a      	orrs	r2, r3
  405230:	68fb      	ldr	r3, [r7, #12]
  405232:	781b      	ldrb	r3, [r3, #0]
  405234:	4313      	orrs	r3, r2
  405236:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  40523a:	e001      	b.n	405240 <get_fat+0x14c>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40523c:	f04f 33ff 	mov.w	r3, #4294967295
}
  405240:	4618      	mov	r0, r3
  405242:	3718      	adds	r7, #24
  405244:	46bd      	mov	sp, r7
  405246:	bd80      	pop	{r7, pc}
  405248:	00404e99 	.word	0x00404e99

0040524c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  40524c:	b580      	push	{r7, lr}
  40524e:	b088      	sub	sp, #32
  405250:	af00      	add	r7, sp, #0
  405252:	60f8      	str	r0, [r7, #12]
  405254:	60b9      	str	r1, [r7, #8]
  405256:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405258:	68bb      	ldr	r3, [r7, #8]
  40525a:	2b01      	cmp	r3, #1
  40525c:	d904      	bls.n	405268 <put_fat+0x1c>
  40525e:	68fb      	ldr	r3, [r7, #12]
  405260:	699a      	ldr	r2, [r3, #24]
  405262:	68bb      	ldr	r3, [r7, #8]
  405264:	429a      	cmp	r2, r3
  405266:	d802      	bhi.n	40526e <put_fat+0x22>
		res = FR_INT_ERR;
  405268:	2302      	movs	r3, #2
  40526a:	77fb      	strb	r3, [r7, #31]
  40526c:	e0e3      	b.n	405436 <put_fat+0x1ea>

	} else {
		switch (fs->fs_type) {
  40526e:	68fb      	ldr	r3, [r7, #12]
  405270:	781b      	ldrb	r3, [r3, #0]
  405272:	2b02      	cmp	r3, #2
  405274:	d070      	beq.n	405358 <put_fat+0x10c>
  405276:	2b03      	cmp	r3, #3
  405278:	f000 8092 	beq.w	4053a0 <put_fat+0x154>
  40527c:	2b01      	cmp	r3, #1
  40527e:	f040 80d5 	bne.w	40542c <put_fat+0x1e0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  405282:	68bb      	ldr	r3, [r7, #8]
  405284:	61bb      	str	r3, [r7, #24]
  405286:	69bb      	ldr	r3, [r7, #24]
  405288:	085b      	lsrs	r3, r3, #1
  40528a:	69ba      	ldr	r2, [r7, #24]
  40528c:	4413      	add	r3, r2
  40528e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405290:	68fb      	ldr	r3, [r7, #12]
  405292:	6a1a      	ldr	r2, [r3, #32]
  405294:	69bb      	ldr	r3, [r7, #24]
  405296:	0a5b      	lsrs	r3, r3, #9
  405298:	4413      	add	r3, r2
  40529a:	68f8      	ldr	r0, [r7, #12]
  40529c:	4619      	mov	r1, r3
  40529e:	4b68      	ldr	r3, [pc, #416]	; (405440 <put_fat+0x1f4>)
  4052a0:	4798      	blx	r3
  4052a2:	4603      	mov	r3, r0
  4052a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  4052a6:	7ffb      	ldrb	r3, [r7, #31]
  4052a8:	2b00      	cmp	r3, #0
  4052aa:	d000      	beq.n	4052ae <put_fat+0x62>
  4052ac:	e0c0      	b.n	405430 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  4052ae:	69bb      	ldr	r3, [r7, #24]
  4052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4052b4:	3330      	adds	r3, #48	; 0x30
  4052b6:	68fa      	ldr	r2, [r7, #12]
  4052b8:	4413      	add	r3, r2
  4052ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4052bc:	68bb      	ldr	r3, [r7, #8]
  4052be:	f003 0301 	and.w	r3, r3, #1
  4052c2:	2b00      	cmp	r3, #0
  4052c4:	d00d      	beq.n	4052e2 <put_fat+0x96>
  4052c6:	697b      	ldr	r3, [r7, #20]
  4052c8:	781b      	ldrb	r3, [r3, #0]
  4052ca:	b2db      	uxtb	r3, r3
  4052cc:	f003 030f 	and.w	r3, r3, #15
  4052d0:	b2da      	uxtb	r2, r3
  4052d2:	687b      	ldr	r3, [r7, #4]
  4052d4:	b2db      	uxtb	r3, r3
  4052d6:	011b      	lsls	r3, r3, #4
  4052d8:	b2db      	uxtb	r3, r3
  4052da:	4313      	orrs	r3, r2
  4052dc:	b2db      	uxtb	r3, r3
  4052de:	b2db      	uxtb	r3, r3
  4052e0:	e001      	b.n	4052e6 <put_fat+0x9a>
  4052e2:	687b      	ldr	r3, [r7, #4]
  4052e4:	b2db      	uxtb	r3, r3
  4052e6:	697a      	ldr	r2, [r7, #20]
  4052e8:	7013      	strb	r3, [r2, #0]
			bc++;
  4052ea:	69bb      	ldr	r3, [r7, #24]
  4052ec:	3301      	adds	r3, #1
  4052ee:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
  4052f0:	68fb      	ldr	r3, [r7, #12]
  4052f2:	2201      	movs	r2, #1
  4052f4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4052f6:	68fb      	ldr	r3, [r7, #12]
  4052f8:	6a1a      	ldr	r2, [r3, #32]
  4052fa:	69bb      	ldr	r3, [r7, #24]
  4052fc:	0a5b      	lsrs	r3, r3, #9
  4052fe:	4413      	add	r3, r2
  405300:	68f8      	ldr	r0, [r7, #12]
  405302:	4619      	mov	r1, r3
  405304:	4b4e      	ldr	r3, [pc, #312]	; (405440 <put_fat+0x1f4>)
  405306:	4798      	blx	r3
  405308:	4603      	mov	r3, r0
  40530a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40530c:	7ffb      	ldrb	r3, [r7, #31]
  40530e:	2b00      	cmp	r3, #0
  405310:	d000      	beq.n	405314 <put_fat+0xc8>
  405312:	e08d      	b.n	405430 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
  405314:	69bb      	ldr	r3, [r7, #24]
  405316:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40531a:	3330      	adds	r3, #48	; 0x30
  40531c:	68fa      	ldr	r2, [r7, #12]
  40531e:	4413      	add	r3, r2
  405320:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405322:	68bb      	ldr	r3, [r7, #8]
  405324:	f003 0301 	and.w	r3, r3, #1
  405328:	2b00      	cmp	r3, #0
  40532a:	d003      	beq.n	405334 <put_fat+0xe8>
  40532c:	687b      	ldr	r3, [r7, #4]
  40532e:	091b      	lsrs	r3, r3, #4
  405330:	b2db      	uxtb	r3, r3
  405332:	e00e      	b.n	405352 <put_fat+0x106>
  405334:	697b      	ldr	r3, [r7, #20]
  405336:	781b      	ldrb	r3, [r3, #0]
  405338:	b2db      	uxtb	r3, r3
  40533a:	f023 030f 	bic.w	r3, r3, #15
  40533e:	b2da      	uxtb	r2, r3
  405340:	687b      	ldr	r3, [r7, #4]
  405342:	0a1b      	lsrs	r3, r3, #8
  405344:	b2db      	uxtb	r3, r3
  405346:	f003 030f 	and.w	r3, r3, #15
  40534a:	b2db      	uxtb	r3, r3
  40534c:	4313      	orrs	r3, r2
  40534e:	b2db      	uxtb	r3, r3
  405350:	b2db      	uxtb	r3, r3
  405352:	697a      	ldr	r2, [r7, #20]
  405354:	7013      	strb	r3, [r2, #0]
			break;
  405356:	e06b      	b.n	405430 <put_fat+0x1e4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  405358:	68fb      	ldr	r3, [r7, #12]
  40535a:	6a1a      	ldr	r2, [r3, #32]
  40535c:	68bb      	ldr	r3, [r7, #8]
  40535e:	0a1b      	lsrs	r3, r3, #8
  405360:	4413      	add	r3, r2
  405362:	68f8      	ldr	r0, [r7, #12]
  405364:	4619      	mov	r1, r3
  405366:	4b36      	ldr	r3, [pc, #216]	; (405440 <put_fat+0x1f4>)
  405368:	4798      	blx	r3
  40536a:	4603      	mov	r3, r0
  40536c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40536e:	7ffb      	ldrb	r3, [r7, #31]
  405370:	2b00      	cmp	r3, #0
  405372:	d000      	beq.n	405376 <put_fat+0x12a>
  405374:	e05c      	b.n	405430 <put_fat+0x1e4>
			p = &fs->win[clst * 2 % SS(fs)];
  405376:	68bb      	ldr	r3, [r7, #8]
  405378:	005b      	lsls	r3, r3, #1
  40537a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  40537e:	3330      	adds	r3, #48	; 0x30
  405380:	68fa      	ldr	r2, [r7, #12]
  405382:	4413      	add	r3, r2
  405384:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
  405386:	687b      	ldr	r3, [r7, #4]
  405388:	b2da      	uxtb	r2, r3
  40538a:	697b      	ldr	r3, [r7, #20]
  40538c:	701a      	strb	r2, [r3, #0]
  40538e:	697b      	ldr	r3, [r7, #20]
  405390:	3301      	adds	r3, #1
  405392:	687a      	ldr	r2, [r7, #4]
  405394:	b292      	uxth	r2, r2
  405396:	0a12      	lsrs	r2, r2, #8
  405398:	b292      	uxth	r2, r2
  40539a:	b2d2      	uxtb	r2, r2
  40539c:	701a      	strb	r2, [r3, #0]
			break;
  40539e:	e047      	b.n	405430 <put_fat+0x1e4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4053a0:	68fb      	ldr	r3, [r7, #12]
  4053a2:	6a1a      	ldr	r2, [r3, #32]
  4053a4:	68bb      	ldr	r3, [r7, #8]
  4053a6:	09db      	lsrs	r3, r3, #7
  4053a8:	4413      	add	r3, r2
  4053aa:	68f8      	ldr	r0, [r7, #12]
  4053ac:	4619      	mov	r1, r3
  4053ae:	4b24      	ldr	r3, [pc, #144]	; (405440 <put_fat+0x1f4>)
  4053b0:	4798      	blx	r3
  4053b2:	4603      	mov	r3, r0
  4053b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  4053b6:	7ffb      	ldrb	r3, [r7, #31]
  4053b8:	2b00      	cmp	r3, #0
  4053ba:	d000      	beq.n	4053be <put_fat+0x172>
  4053bc:	e038      	b.n	405430 <put_fat+0x1e4>
			p = &fs->win[clst * 4 % SS(fs)];
  4053be:	68bb      	ldr	r3, [r7, #8]
  4053c0:	009b      	lsls	r3, r3, #2
  4053c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  4053c6:	3330      	adds	r3, #48	; 0x30
  4053c8:	68fa      	ldr	r2, [r7, #12]
  4053ca:	4413      	add	r3, r2
  4053cc:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
  4053ce:	697b      	ldr	r3, [r7, #20]
  4053d0:	3303      	adds	r3, #3
  4053d2:	781b      	ldrb	r3, [r3, #0]
  4053d4:	061a      	lsls	r2, r3, #24
  4053d6:	697b      	ldr	r3, [r7, #20]
  4053d8:	3302      	adds	r3, #2
  4053da:	781b      	ldrb	r3, [r3, #0]
  4053dc:	041b      	lsls	r3, r3, #16
  4053de:	431a      	orrs	r2, r3
  4053e0:	697b      	ldr	r3, [r7, #20]
  4053e2:	3301      	adds	r3, #1
  4053e4:	781b      	ldrb	r3, [r3, #0]
  4053e6:	021b      	lsls	r3, r3, #8
  4053e8:	431a      	orrs	r2, r3
  4053ea:	697b      	ldr	r3, [r7, #20]
  4053ec:	781b      	ldrb	r3, [r3, #0]
  4053ee:	4313      	orrs	r3, r2
  4053f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  4053f4:	687a      	ldr	r2, [r7, #4]
  4053f6:	4313      	orrs	r3, r2
  4053f8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
  4053fa:	687b      	ldr	r3, [r7, #4]
  4053fc:	b2da      	uxtb	r2, r3
  4053fe:	697b      	ldr	r3, [r7, #20]
  405400:	701a      	strb	r2, [r3, #0]
  405402:	697b      	ldr	r3, [r7, #20]
  405404:	3301      	adds	r3, #1
  405406:	687a      	ldr	r2, [r7, #4]
  405408:	b292      	uxth	r2, r2
  40540a:	0a12      	lsrs	r2, r2, #8
  40540c:	b292      	uxth	r2, r2
  40540e:	b2d2      	uxtb	r2, r2
  405410:	701a      	strb	r2, [r3, #0]
  405412:	697b      	ldr	r3, [r7, #20]
  405414:	3302      	adds	r3, #2
  405416:	687a      	ldr	r2, [r7, #4]
  405418:	0c12      	lsrs	r2, r2, #16
  40541a:	b2d2      	uxtb	r2, r2
  40541c:	701a      	strb	r2, [r3, #0]
  40541e:	697b      	ldr	r3, [r7, #20]
  405420:	3303      	adds	r3, #3
  405422:	687a      	ldr	r2, [r7, #4]
  405424:	0e12      	lsrs	r2, r2, #24
  405426:	b2d2      	uxtb	r2, r2
  405428:	701a      	strb	r2, [r3, #0]
			break;
  40542a:	e001      	b.n	405430 <put_fat+0x1e4>

		default :
			res = FR_INT_ERR;
  40542c:	2302      	movs	r3, #2
  40542e:	77fb      	strb	r3, [r7, #31]
		}
		fs->wflag = 1;
  405430:	68fb      	ldr	r3, [r7, #12]
  405432:	2201      	movs	r2, #1
  405434:	711a      	strb	r2, [r3, #4]
	}

	return res;
  405436:	7ffb      	ldrb	r3, [r7, #31]
}
  405438:	4618      	mov	r0, r3
  40543a:	3720      	adds	r7, #32
  40543c:	46bd      	mov	sp, r7
  40543e:	bd80      	pop	{r7, pc}
  405440:	00404e99 	.word	0x00404e99

00405444 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  405444:	b580      	push	{r7, lr}
  405446:	b084      	sub	sp, #16
  405448:	af00      	add	r7, sp, #0
  40544a:	6078      	str	r0, [r7, #4]
  40544c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40544e:	683b      	ldr	r3, [r7, #0]
  405450:	2b01      	cmp	r3, #1
  405452:	d904      	bls.n	40545e <remove_chain+0x1a>
  405454:	687b      	ldr	r3, [r7, #4]
  405456:	699a      	ldr	r2, [r3, #24]
  405458:	683b      	ldr	r3, [r7, #0]
  40545a:	429a      	cmp	r2, r3
  40545c:	d802      	bhi.n	405464 <remove_chain+0x20>
		res = FR_INT_ERR;
  40545e:	2302      	movs	r3, #2
  405460:	73fb      	strb	r3, [r7, #15]
  405462:	e037      	b.n	4054d4 <remove_chain+0x90>

	} else {
		res = FR_OK;
  405464:	2300      	movs	r3, #0
  405466:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  405468:	e02f      	b.n	4054ca <remove_chain+0x86>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40546a:	6878      	ldr	r0, [r7, #4]
  40546c:	6839      	ldr	r1, [r7, #0]
  40546e:	4b1c      	ldr	r3, [pc, #112]	; (4054e0 <remove_chain+0x9c>)
  405470:	4798      	blx	r3
  405472:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
  405474:	68bb      	ldr	r3, [r7, #8]
  405476:	2b00      	cmp	r3, #0
  405478:	d100      	bne.n	40547c <remove_chain+0x38>
  40547a:	e02b      	b.n	4054d4 <remove_chain+0x90>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40547c:	68bb      	ldr	r3, [r7, #8]
  40547e:	2b01      	cmp	r3, #1
  405480:	d102      	bne.n	405488 <remove_chain+0x44>
  405482:	2302      	movs	r3, #2
  405484:	73fb      	strb	r3, [r7, #15]
  405486:	e025      	b.n	4054d4 <remove_chain+0x90>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  405488:	68bb      	ldr	r3, [r7, #8]
  40548a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40548e:	d102      	bne.n	405496 <remove_chain+0x52>
  405490:	2301      	movs	r3, #1
  405492:	73fb      	strb	r3, [r7, #15]
  405494:	e01e      	b.n	4054d4 <remove_chain+0x90>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  405496:	6878      	ldr	r0, [r7, #4]
  405498:	6839      	ldr	r1, [r7, #0]
  40549a:	2200      	movs	r2, #0
  40549c:	4b11      	ldr	r3, [pc, #68]	; (4054e4 <remove_chain+0xa0>)
  40549e:	4798      	blx	r3
  4054a0:	4603      	mov	r3, r0
  4054a2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  4054a4:	7bfb      	ldrb	r3, [r7, #15]
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	d000      	beq.n	4054ac <remove_chain+0x68>
  4054aa:	e013      	b.n	4054d4 <remove_chain+0x90>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4054ac:	687b      	ldr	r3, [r7, #4]
  4054ae:	691b      	ldr	r3, [r3, #16]
  4054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4054b4:	d007      	beq.n	4054c6 <remove_chain+0x82>
				fs->free_clust++;
  4054b6:	687b      	ldr	r3, [r7, #4]
  4054b8:	691b      	ldr	r3, [r3, #16]
  4054ba:	1c5a      	adds	r2, r3, #1
  4054bc:	687b      	ldr	r3, [r7, #4]
  4054be:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
  4054c0:	687b      	ldr	r3, [r7, #4]
  4054c2:	2201      	movs	r2, #1
  4054c4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
  4054c6:	68bb      	ldr	r3, [r7, #8]
  4054c8:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4054ca:	687b      	ldr	r3, [r7, #4]
  4054cc:	699a      	ldr	r2, [r3, #24]
  4054ce:	683b      	ldr	r3, [r7, #0]
  4054d0:	429a      	cmp	r2, r3
  4054d2:	d8ca      	bhi.n	40546a <remove_chain+0x26>
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
  4054d4:	7bfb      	ldrb	r3, [r7, #15]
}
  4054d6:	4618      	mov	r0, r3
  4054d8:	3710      	adds	r7, #16
  4054da:	46bd      	mov	sp, r7
  4054dc:	bd80      	pop	{r7, pc}
  4054de:	bf00      	nop
  4054e0:	004050f5 	.word	0x004050f5
  4054e4:	0040524d 	.word	0x0040524d

004054e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  4054e8:	b580      	push	{r7, lr}
  4054ea:	b086      	sub	sp, #24
  4054ec:	af00      	add	r7, sp, #0
  4054ee:	6078      	str	r0, [r7, #4]
  4054f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  4054f2:	683b      	ldr	r3, [r7, #0]
  4054f4:	2b00      	cmp	r3, #0
  4054f6:	d10d      	bne.n	405514 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
  4054f8:	687b      	ldr	r3, [r7, #4]
  4054fa:	68db      	ldr	r3, [r3, #12]
  4054fc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4054fe:	693b      	ldr	r3, [r7, #16]
  405500:	2b00      	cmp	r3, #0
  405502:	d004      	beq.n	40550e <create_chain+0x26>
  405504:	687b      	ldr	r3, [r7, #4]
  405506:	699a      	ldr	r2, [r3, #24]
  405508:	693b      	ldr	r3, [r7, #16]
  40550a:	429a      	cmp	r2, r3
  40550c:	d815      	bhi.n	40553a <create_chain+0x52>
  40550e:	2301      	movs	r3, #1
  405510:	613b      	str	r3, [r7, #16]
  405512:	e012      	b.n	40553a <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  405514:	6878      	ldr	r0, [r7, #4]
  405516:	6839      	ldr	r1, [r7, #0]
  405518:	4b39      	ldr	r3, [pc, #228]	; (405600 <create_chain+0x118>)
  40551a:	4798      	blx	r3
  40551c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40551e:	68bb      	ldr	r3, [r7, #8]
  405520:	2b01      	cmp	r3, #1
  405522:	d801      	bhi.n	405528 <create_chain+0x40>
  405524:	2301      	movs	r3, #1
  405526:	e066      	b.n	4055f6 <create_chain+0x10e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  405528:	687b      	ldr	r3, [r7, #4]
  40552a:	699a      	ldr	r2, [r3, #24]
  40552c:	68bb      	ldr	r3, [r7, #8]
  40552e:	429a      	cmp	r2, r3
  405530:	d901      	bls.n	405536 <create_chain+0x4e>
  405532:	68bb      	ldr	r3, [r7, #8]
  405534:	e05f      	b.n	4055f6 <create_chain+0x10e>
		scl = clst;
  405536:	683b      	ldr	r3, [r7, #0]
  405538:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
  40553a:	693b      	ldr	r3, [r7, #16]
  40553c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
  40553e:	697b      	ldr	r3, [r7, #20]
  405540:	3301      	adds	r3, #1
  405542:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  405544:	687b      	ldr	r3, [r7, #4]
  405546:	699a      	ldr	r2, [r3, #24]
  405548:	697b      	ldr	r3, [r7, #20]
  40554a:	429a      	cmp	r2, r3
  40554c:	d807      	bhi.n	40555e <create_chain+0x76>
			ncl = 2;
  40554e:	2302      	movs	r3, #2
  405550:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
  405552:	697a      	ldr	r2, [r7, #20]
  405554:	693b      	ldr	r3, [r7, #16]
  405556:	429a      	cmp	r2, r3
  405558:	d901      	bls.n	40555e <create_chain+0x76>
  40555a:	2300      	movs	r3, #0
  40555c:	e04b      	b.n	4055f6 <create_chain+0x10e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40555e:	6878      	ldr	r0, [r7, #4]
  405560:	6979      	ldr	r1, [r7, #20]
  405562:	4b27      	ldr	r3, [pc, #156]	; (405600 <create_chain+0x118>)
  405564:	4798      	blx	r3
  405566:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
  405568:	68bb      	ldr	r3, [r7, #8]
  40556a:	2b00      	cmp	r3, #0
  40556c:	d10c      	bne.n	405588 <create_chain+0xa0>
  40556e:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  405570:	6878      	ldr	r0, [r7, #4]
  405572:	6979      	ldr	r1, [r7, #20]
  405574:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  405578:	4b22      	ldr	r3, [pc, #136]	; (405604 <create_chain+0x11c>)
  40557a:	4798      	blx	r3
  40557c:	4603      	mov	r3, r0
  40557e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
  405580:	7bfb      	ldrb	r3, [r7, #15]
  405582:	2b00      	cmp	r3, #0
  405584:	d11a      	bne.n	4055bc <create_chain+0xd4>
  405586:	e00f      	b.n	4055a8 <create_chain+0xc0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  405588:	68bb      	ldr	r3, [r7, #8]
  40558a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40558e:	d002      	beq.n	405596 <create_chain+0xae>
  405590:	68bb      	ldr	r3, [r7, #8]
  405592:	2b01      	cmp	r3, #1
  405594:	d101      	bne.n	40559a <create_chain+0xb2>
			return cs;
  405596:	68bb      	ldr	r3, [r7, #8]
  405598:	e02d      	b.n	4055f6 <create_chain+0x10e>
		if (ncl == scl) return 0;		/* No free cluster */
  40559a:	697a      	ldr	r2, [r7, #20]
  40559c:	693b      	ldr	r3, [r7, #16]
  40559e:	429a      	cmp	r2, r3
  4055a0:	d101      	bne.n	4055a6 <create_chain+0xbe>
  4055a2:	2300      	movs	r3, #0
  4055a4:	e027      	b.n	4055f6 <create_chain+0x10e>
	}
  4055a6:	e7ca      	b.n	40553e <create_chain+0x56>

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
  4055a8:	683b      	ldr	r3, [r7, #0]
  4055aa:	2b00      	cmp	r3, #0
  4055ac:	d006      	beq.n	4055bc <create_chain+0xd4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  4055ae:	6878      	ldr	r0, [r7, #4]
  4055b0:	6839      	ldr	r1, [r7, #0]
  4055b2:	697a      	ldr	r2, [r7, #20]
  4055b4:	4b13      	ldr	r3, [pc, #76]	; (405604 <create_chain+0x11c>)
  4055b6:	4798      	blx	r3
  4055b8:	4603      	mov	r3, r0
  4055ba:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
  4055bc:	7bfb      	ldrb	r3, [r7, #15]
  4055be:	2b00      	cmp	r3, #0
  4055c0:	d110      	bne.n	4055e4 <create_chain+0xfc>
		fs->last_clust = ncl;			/* Update FSINFO */
  4055c2:	687b      	ldr	r3, [r7, #4]
  4055c4:	697a      	ldr	r2, [r7, #20]
  4055c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4055c8:	687b      	ldr	r3, [r7, #4]
  4055ca:	691b      	ldr	r3, [r3, #16]
  4055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4055d0:	d010      	beq.n	4055f4 <create_chain+0x10c>
			fs->free_clust--;
  4055d2:	687b      	ldr	r3, [r7, #4]
  4055d4:	691b      	ldr	r3, [r3, #16]
  4055d6:	1e5a      	subs	r2, r3, #1
  4055d8:	687b      	ldr	r3, [r7, #4]
  4055da:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
  4055dc:	687b      	ldr	r3, [r7, #4]
  4055de:	2201      	movs	r2, #1
  4055e0:	715a      	strb	r2, [r3, #5]
  4055e2:	e007      	b.n	4055f4 <create_chain+0x10c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  4055e4:	7bfb      	ldrb	r3, [r7, #15]
  4055e6:	2b01      	cmp	r3, #1
  4055e8:	d102      	bne.n	4055f0 <create_chain+0x108>
  4055ea:	f04f 33ff 	mov.w	r3, #4294967295
  4055ee:	e000      	b.n	4055f2 <create_chain+0x10a>
  4055f0:	2301      	movs	r3, #1
  4055f2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
  4055f4:	697b      	ldr	r3, [r7, #20]
}
  4055f6:	4618      	mov	r0, r3
  4055f8:	3718      	adds	r7, #24
  4055fa:	46bd      	mov	sp, r7
  4055fc:	bd80      	pop	{r7, pc}
  4055fe:	bf00      	nop
  405600:	004050f5 	.word	0x004050f5
  405604:	0040524d 	.word	0x0040524d

00405608 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  405608:	b580      	push	{r7, lr}
  40560a:	b084      	sub	sp, #16
  40560c:	af00      	add	r7, sp, #0
  40560e:	6078      	str	r0, [r7, #4]
  405610:	460b      	mov	r3, r1
  405612:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
  405614:	687b      	ldr	r3, [r7, #4]
  405616:	887a      	ldrh	r2, [r7, #2]
  405618:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
  40561a:	687b      	ldr	r3, [r7, #4]
  40561c:	689b      	ldr	r3, [r3, #8]
  40561e:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  405620:	68fb      	ldr	r3, [r7, #12]
  405622:	2b01      	cmp	r3, #1
  405624:	d005      	beq.n	405632 <dir_sdi+0x2a>
  405626:	687b      	ldr	r3, [r7, #4]
  405628:	681b      	ldr	r3, [r3, #0]
  40562a:	699a      	ldr	r2, [r3, #24]
  40562c:	68fb      	ldr	r3, [r7, #12]
  40562e:	429a      	cmp	r2, r3
  405630:	d801      	bhi.n	405636 <dir_sdi+0x2e>
		return FR_INT_ERR;
  405632:	2302      	movs	r3, #2
  405634:	e064      	b.n	405700 <dir_sdi+0xf8>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  405636:	68fb      	ldr	r3, [r7, #12]
  405638:	2b00      	cmp	r3, #0
  40563a:	d108      	bne.n	40564e <dir_sdi+0x46>
  40563c:	687b      	ldr	r3, [r7, #4]
  40563e:	681b      	ldr	r3, [r3, #0]
  405640:	781b      	ldrb	r3, [r3, #0]
  405642:	2b03      	cmp	r3, #3
  405644:	d103      	bne.n	40564e <dir_sdi+0x46>
		clst = dj->fs->dirbase;
  405646:	687b      	ldr	r3, [r7, #4]
  405648:	681b      	ldr	r3, [r3, #0]
  40564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40564c:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40564e:	68fb      	ldr	r3, [r7, #12]
  405650:	2b00      	cmp	r3, #0
  405652:	d114      	bne.n	40567e <dir_sdi+0x76>
		dj->clust = clst;
  405654:	687b      	ldr	r3, [r7, #4]
  405656:	68fa      	ldr	r2, [r7, #12]
  405658:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  40565a:	687b      	ldr	r3, [r7, #4]
  40565c:	681b      	ldr	r3, [r3, #0]
  40565e:	891b      	ldrh	r3, [r3, #8]
  405660:	887a      	ldrh	r2, [r7, #2]
  405662:	429a      	cmp	r2, r3
  405664:	d301      	bcc.n	40566a <dir_sdi+0x62>
			return FR_INT_ERR;
  405666:	2302      	movs	r3, #2
  405668:	e04a      	b.n	405700 <dir_sdi+0xf8>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40566a:	687b      	ldr	r3, [r7, #4]
  40566c:	681b      	ldr	r3, [r3, #0]
  40566e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  405670:	887b      	ldrh	r3, [r7, #2]
  405672:	091b      	lsrs	r3, r3, #4
  405674:	b29b      	uxth	r3, r3
  405676:	441a      	add	r2, r3
  405678:	687b      	ldr	r3, [r7, #4]
  40567a:	611a      	str	r2, [r3, #16]
  40567c:	e035      	b.n	4056ea <dir_sdi+0xe2>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  40567e:	687b      	ldr	r3, [r7, #4]
  405680:	681b      	ldr	r3, [r3, #0]
  405682:	789b      	ldrb	r3, [r3, #2]
  405684:	011b      	lsls	r3, r3, #4
  405686:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
  405688:	e01b      	b.n	4056c2 <dir_sdi+0xba>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40568a:	687b      	ldr	r3, [r7, #4]
  40568c:	681b      	ldr	r3, [r3, #0]
  40568e:	4618      	mov	r0, r3
  405690:	68f9      	ldr	r1, [r7, #12]
  405692:	4b1d      	ldr	r3, [pc, #116]	; (405708 <dir_sdi+0x100>)
  405694:	4798      	blx	r3
  405696:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405698:	68fb      	ldr	r3, [r7, #12]
  40569a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40569e:	d101      	bne.n	4056a4 <dir_sdi+0x9c>
  4056a0:	2301      	movs	r3, #1
  4056a2:	e02d      	b.n	405700 <dir_sdi+0xf8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  4056a4:	68fb      	ldr	r3, [r7, #12]
  4056a6:	2b01      	cmp	r3, #1
  4056a8:	d905      	bls.n	4056b6 <dir_sdi+0xae>
  4056aa:	687b      	ldr	r3, [r7, #4]
  4056ac:	681b      	ldr	r3, [r3, #0]
  4056ae:	699a      	ldr	r2, [r3, #24]
  4056b0:	68fb      	ldr	r3, [r7, #12]
  4056b2:	429a      	cmp	r2, r3
  4056b4:	d801      	bhi.n	4056ba <dir_sdi+0xb2>
				return FR_INT_ERR;
  4056b6:	2302      	movs	r3, #2
  4056b8:	e022      	b.n	405700 <dir_sdi+0xf8>
			idx -= ic;
  4056ba:	887a      	ldrh	r2, [r7, #2]
  4056bc:	897b      	ldrh	r3, [r7, #10]
  4056be:	1ad3      	subs	r3, r2, r3
  4056c0:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  4056c2:	887a      	ldrh	r2, [r7, #2]
  4056c4:	897b      	ldrh	r3, [r7, #10]
  4056c6:	429a      	cmp	r2, r3
  4056c8:	d2df      	bcs.n	40568a <dir_sdi+0x82>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  4056ca:	687b      	ldr	r3, [r7, #4]
  4056cc:	68fa      	ldr	r2, [r7, #12]
  4056ce:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4056d0:	687b      	ldr	r3, [r7, #4]
  4056d2:	681b      	ldr	r3, [r3, #0]
  4056d4:	4618      	mov	r0, r3
  4056d6:	68f9      	ldr	r1, [r7, #12]
  4056d8:	4b0c      	ldr	r3, [pc, #48]	; (40570c <dir_sdi+0x104>)
  4056da:	4798      	blx	r3
  4056dc:	4602      	mov	r2, r0
  4056de:	887b      	ldrh	r3, [r7, #2]
  4056e0:	091b      	lsrs	r3, r3, #4
  4056e2:	b29b      	uxth	r3, r3
  4056e4:	441a      	add	r2, r3
  4056e6:	687b      	ldr	r3, [r7, #4]
  4056e8:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4056ea:	687b      	ldr	r3, [r7, #4]
  4056ec:	681a      	ldr	r2, [r3, #0]
  4056ee:	887b      	ldrh	r3, [r7, #2]
  4056f0:	f003 030f 	and.w	r3, r3, #15
  4056f4:	015b      	lsls	r3, r3, #5
  4056f6:	3330      	adds	r3, #48	; 0x30
  4056f8:	441a      	add	r2, r3
  4056fa:	687b      	ldr	r3, [r7, #4]
  4056fc:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
  4056fe:	2300      	movs	r3, #0
}
  405700:	4618      	mov	r0, r3
  405702:	3710      	adds	r7, #16
  405704:	46bd      	mov	sp, r7
  405706:	bd80      	pop	{r7, pc}
  405708:	004050f5 	.word	0x004050f5
  40570c:	004050b9 	.word	0x004050b9

00405710 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  405710:	b590      	push	{r4, r7, lr}
  405712:	b085      	sub	sp, #20
  405714:	af00      	add	r7, sp, #0
  405716:	6078      	str	r0, [r7, #4]
  405718:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  40571a:	687b      	ldr	r3, [r7, #4]
  40571c:	88db      	ldrh	r3, [r3, #6]
  40571e:	3301      	adds	r3, #1
  405720:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  405722:	893b      	ldrh	r3, [r7, #8]
  405724:	2b00      	cmp	r3, #0
  405726:	d003      	beq.n	405730 <dir_next+0x20>
  405728:	687b      	ldr	r3, [r7, #4]
  40572a:	691b      	ldr	r3, [r3, #16]
  40572c:	2b00      	cmp	r3, #0
  40572e:	d101      	bne.n	405734 <dir_next+0x24>
		return FR_NO_FILE;
  405730:	2304      	movs	r3, #4
  405732:	e0bc      	b.n	4058ae <dir_next+0x19e>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  405734:	893b      	ldrh	r3, [r7, #8]
  405736:	f003 030f 	and.w	r3, r3, #15
  40573a:	b29b      	uxth	r3, r3
  40573c:	2b00      	cmp	r3, #0
  40573e:	f040 80a8 	bne.w	405892 <dir_next+0x182>
		dj->sect++;					/* Next sector */
  405742:	687b      	ldr	r3, [r7, #4]
  405744:	691b      	ldr	r3, [r3, #16]
  405746:	1c5a      	adds	r2, r3, #1
  405748:	687b      	ldr	r3, [r7, #4]
  40574a:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
  40574c:	687b      	ldr	r3, [r7, #4]
  40574e:	68db      	ldr	r3, [r3, #12]
  405750:	2b00      	cmp	r3, #0
  405752:	d108      	bne.n	405766 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  405754:	687b      	ldr	r3, [r7, #4]
  405756:	681b      	ldr	r3, [r3, #0]
  405758:	891b      	ldrh	r3, [r3, #8]
  40575a:	893a      	ldrh	r2, [r7, #8]
  40575c:	429a      	cmp	r2, r3
  40575e:	f0c0 8098 	bcc.w	405892 <dir_next+0x182>
				return FR_NO_FILE;
  405762:	2304      	movs	r3, #4
  405764:	e0a3      	b.n	4058ae <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  405766:	893b      	ldrh	r3, [r7, #8]
  405768:	091b      	lsrs	r3, r3, #4
  40576a:	b29b      	uxth	r3, r3
  40576c:	461a      	mov	r2, r3
  40576e:	687b      	ldr	r3, [r7, #4]
  405770:	681b      	ldr	r3, [r3, #0]
  405772:	789b      	ldrb	r3, [r3, #2]
  405774:	3b01      	subs	r3, #1
  405776:	4013      	ands	r3, r2
  405778:	2b00      	cmp	r3, #0
  40577a:	f040 808a 	bne.w	405892 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40577e:	687b      	ldr	r3, [r7, #4]
  405780:	681a      	ldr	r2, [r3, #0]
  405782:	687b      	ldr	r3, [r7, #4]
  405784:	68db      	ldr	r3, [r3, #12]
  405786:	4610      	mov	r0, r2
  405788:	4619      	mov	r1, r3
  40578a:	4b4b      	ldr	r3, [pc, #300]	; (4058b8 <dir_next+0x1a8>)
  40578c:	4798      	blx	r3
  40578e:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
  405790:	68fb      	ldr	r3, [r7, #12]
  405792:	2b01      	cmp	r3, #1
  405794:	d801      	bhi.n	40579a <dir_next+0x8a>
  405796:	2302      	movs	r3, #2
  405798:	e089      	b.n	4058ae <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40579a:	68fb      	ldr	r3, [r7, #12]
  40579c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4057a0:	d101      	bne.n	4057a6 <dir_next+0x96>
  4057a2:	2301      	movs	r3, #1
  4057a4:	e083      	b.n	4058ae <dir_next+0x19e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4057a6:	687b      	ldr	r3, [r7, #4]
  4057a8:	681b      	ldr	r3, [r3, #0]
  4057aa:	699a      	ldr	r2, [r3, #24]
  4057ac:	68fb      	ldr	r3, [r7, #12]
  4057ae:	429a      	cmp	r2, r3
  4057b0:	d863      	bhi.n	40587a <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  4057b2:	683b      	ldr	r3, [r7, #0]
  4057b4:	2b00      	cmp	r3, #0
  4057b6:	d101      	bne.n	4057bc <dir_next+0xac>
  4057b8:	2304      	movs	r3, #4
  4057ba:	e078      	b.n	4058ae <dir_next+0x19e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  4057bc:	687b      	ldr	r3, [r7, #4]
  4057be:	681a      	ldr	r2, [r3, #0]
  4057c0:	687b      	ldr	r3, [r7, #4]
  4057c2:	68db      	ldr	r3, [r3, #12]
  4057c4:	4610      	mov	r0, r2
  4057c6:	4619      	mov	r1, r3
  4057c8:	4b3c      	ldr	r3, [pc, #240]	; (4058bc <dir_next+0x1ac>)
  4057ca:	4798      	blx	r3
  4057cc:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4057ce:	68fb      	ldr	r3, [r7, #12]
  4057d0:	2b00      	cmp	r3, #0
  4057d2:	d101      	bne.n	4057d8 <dir_next+0xc8>
  4057d4:	2307      	movs	r3, #7
  4057d6:	e06a      	b.n	4058ae <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
  4057d8:	68fb      	ldr	r3, [r7, #12]
  4057da:	2b01      	cmp	r3, #1
  4057dc:	d101      	bne.n	4057e2 <dir_next+0xd2>
  4057de:	2302      	movs	r3, #2
  4057e0:	e065      	b.n	4058ae <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4057e2:	68fb      	ldr	r3, [r7, #12]
  4057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4057e8:	d101      	bne.n	4057ee <dir_next+0xde>
  4057ea:	2301      	movs	r3, #1
  4057ec:	e05f      	b.n	4058ae <dir_next+0x19e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4057ee:	687b      	ldr	r3, [r7, #4]
  4057f0:	681b      	ldr	r3, [r3, #0]
  4057f2:	4618      	mov	r0, r3
  4057f4:	2100      	movs	r1, #0
  4057f6:	4b32      	ldr	r3, [pc, #200]	; (4058c0 <dir_next+0x1b0>)
  4057f8:	4798      	blx	r3
  4057fa:	4603      	mov	r3, r0
  4057fc:	2b00      	cmp	r3, #0
  4057fe:	d001      	beq.n	405804 <dir_next+0xf4>
  405800:	2301      	movs	r3, #1
  405802:	e054      	b.n	4058ae <dir_next+0x19e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  405804:	687b      	ldr	r3, [r7, #4]
  405806:	681b      	ldr	r3, [r3, #0]
  405808:	3330      	adds	r3, #48	; 0x30
  40580a:	4618      	mov	r0, r3
  40580c:	2100      	movs	r1, #0
  40580e:	f44f 7200 	mov.w	r2, #512	; 0x200
  405812:	4b2c      	ldr	r3, [pc, #176]	; (4058c4 <dir_next+0x1b4>)
  405814:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  405816:	687b      	ldr	r3, [r7, #4]
  405818:	681c      	ldr	r4, [r3, #0]
  40581a:	687b      	ldr	r3, [r7, #4]
  40581c:	681b      	ldr	r3, [r3, #0]
  40581e:	4618      	mov	r0, r3
  405820:	68f9      	ldr	r1, [r7, #12]
  405822:	4b29      	ldr	r3, [pc, #164]	; (4058c8 <dir_next+0x1b8>)
  405824:	4798      	blx	r3
  405826:	4603      	mov	r3, r0
  405828:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40582a:	2300      	movs	r3, #0
  40582c:	72fb      	strb	r3, [r7, #11]
  40582e:	e016      	b.n	40585e <dir_next+0x14e>
						dj->fs->wflag = 1;
  405830:	687b      	ldr	r3, [r7, #4]
  405832:	681b      	ldr	r3, [r3, #0]
  405834:	2201      	movs	r2, #1
  405836:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  405838:	687b      	ldr	r3, [r7, #4]
  40583a:	681b      	ldr	r3, [r3, #0]
  40583c:	4618      	mov	r0, r3
  40583e:	2100      	movs	r1, #0
  405840:	4b1f      	ldr	r3, [pc, #124]	; (4058c0 <dir_next+0x1b0>)
  405842:	4798      	blx	r3
  405844:	4603      	mov	r3, r0
  405846:	2b00      	cmp	r3, #0
  405848:	d001      	beq.n	40584e <dir_next+0x13e>
  40584a:	2301      	movs	r3, #1
  40584c:	e02f      	b.n	4058ae <dir_next+0x19e>
						dj->fs->winsect++;
  40584e:	687b      	ldr	r3, [r7, #4]
  405850:	681b      	ldr	r3, [r3, #0]
  405852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405854:	3201      	adds	r2, #1
  405856:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  405858:	7afb      	ldrb	r3, [r7, #11]
  40585a:	3301      	adds	r3, #1
  40585c:	72fb      	strb	r3, [r7, #11]
  40585e:	687b      	ldr	r3, [r7, #4]
  405860:	681b      	ldr	r3, [r3, #0]
  405862:	789b      	ldrb	r3, [r3, #2]
  405864:	7afa      	ldrb	r2, [r7, #11]
  405866:	429a      	cmp	r2, r3
  405868:	d3e2      	bcc.n	405830 <dir_next+0x120>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  40586a:	687b      	ldr	r3, [r7, #4]
  40586c:	681b      	ldr	r3, [r3, #0]
  40586e:	687a      	ldr	r2, [r7, #4]
  405870:	6812      	ldr	r2, [r2, #0]
  405872:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  405874:	7afa      	ldrb	r2, [r7, #11]
  405876:	1a8a      	subs	r2, r1, r2
  405878:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  40587a:	687b      	ldr	r3, [r7, #4]
  40587c:	68fa      	ldr	r2, [r7, #12]
  40587e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
  405880:	687b      	ldr	r3, [r7, #4]
  405882:	681b      	ldr	r3, [r3, #0]
  405884:	4618      	mov	r0, r3
  405886:	68f9      	ldr	r1, [r7, #12]
  405888:	4b0f      	ldr	r3, [pc, #60]	; (4058c8 <dir_next+0x1b8>)
  40588a:	4798      	blx	r3
  40588c:	4602      	mov	r2, r0
  40588e:	687b      	ldr	r3, [r7, #4]
  405890:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
  405892:	687b      	ldr	r3, [r7, #4]
  405894:	893a      	ldrh	r2, [r7, #8]
  405896:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  405898:	687b      	ldr	r3, [r7, #4]
  40589a:	681a      	ldr	r2, [r3, #0]
  40589c:	893b      	ldrh	r3, [r7, #8]
  40589e:	f003 030f 	and.w	r3, r3, #15
  4058a2:	015b      	lsls	r3, r3, #5
  4058a4:	3330      	adds	r3, #48	; 0x30
  4058a6:	441a      	add	r2, r3
  4058a8:	687b      	ldr	r3, [r7, #4]
  4058aa:	615a      	str	r2, [r3, #20]

	return FR_OK;
  4058ac:	2300      	movs	r3, #0
}
  4058ae:	4618      	mov	r0, r3
  4058b0:	3714      	adds	r7, #20
  4058b2:	46bd      	mov	sp, r7
  4058b4:	bd90      	pop	{r4, r7, pc}
  4058b6:	bf00      	nop
  4058b8:	004050f5 	.word	0x004050f5
  4058bc:	004054e9 	.word	0x004054e9
  4058c0:	00404e99 	.word	0x00404e99
  4058c4:	00404a8d 	.word	0x00404a8d
  4058c8:	004050b9 	.word	0x004050b9

004058cc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
  4058cc:	b580      	push	{r7, lr}
  4058ce:	b086      	sub	sp, #24
  4058d0:	af00      	add	r7, sp, #0
  4058d2:	6078      	str	r0, [r7, #4]
  4058d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  4058d6:	683b      	ldr	r3, [r7, #0]
  4058d8:	781b      	ldrb	r3, [r3, #0]
  4058da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4058de:	1e5a      	subs	r2, r3, #1
  4058e0:	4613      	mov	r3, r2
  4058e2:	005b      	lsls	r3, r3, #1
  4058e4:	4413      	add	r3, r2
  4058e6:	009b      	lsls	r3, r3, #2
  4058e8:	4413      	add	r3, r2
  4058ea:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
  4058ec:	2300      	movs	r3, #0
  4058ee:	613b      	str	r3, [r7, #16]
  4058f0:	2301      	movs	r3, #1
  4058f2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4058f4:	4a29      	ldr	r2, [pc, #164]	; (40599c <cmp_lfn+0xd0>)
  4058f6:	693b      	ldr	r3, [r7, #16]
  4058f8:	4413      	add	r3, r2
  4058fa:	781b      	ldrb	r3, [r3, #0]
  4058fc:	3301      	adds	r3, #1
  4058fe:	683a      	ldr	r2, [r7, #0]
  405900:	4413      	add	r3, r2
  405902:	781b      	ldrb	r3, [r3, #0]
  405904:	021b      	lsls	r3, r3, #8
  405906:	b29a      	uxth	r2, r3
  405908:	4924      	ldr	r1, [pc, #144]	; (40599c <cmp_lfn+0xd0>)
  40590a:	693b      	ldr	r3, [r7, #16]
  40590c:	440b      	add	r3, r1
  40590e:	781b      	ldrb	r3, [r3, #0]
  405910:	6839      	ldr	r1, [r7, #0]
  405912:	440b      	add	r3, r1
  405914:	781b      	ldrb	r3, [r3, #0]
  405916:	4313      	orrs	r3, r2
  405918:	b29b      	uxth	r3, r3
  40591a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  40591c:	89fb      	ldrh	r3, [r7, #14]
  40591e:	2b00      	cmp	r3, #0
  405920:	d018      	beq.n	405954 <cmp_lfn+0x88>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  405922:	89bb      	ldrh	r3, [r7, #12]
  405924:	4618      	mov	r0, r3
  405926:	4b1e      	ldr	r3, [pc, #120]	; (4059a0 <cmp_lfn+0xd4>)
  405928:	4798      	blx	r3
  40592a:	4603      	mov	r3, r0
  40592c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40592e:	697b      	ldr	r3, [r7, #20]
  405930:	2bfe      	cmp	r3, #254	; 0xfe
  405932:	d80d      	bhi.n	405950 <cmp_lfn+0x84>
  405934:	697b      	ldr	r3, [r7, #20]
  405936:	1c5a      	adds	r2, r3, #1
  405938:	617a      	str	r2, [r7, #20]
  40593a:	005b      	lsls	r3, r3, #1
  40593c:	687a      	ldr	r2, [r7, #4]
  40593e:	4413      	add	r3, r2
  405940:	881b      	ldrh	r3, [r3, #0]
  405942:	4618      	mov	r0, r3
  405944:	4b16      	ldr	r3, [pc, #88]	; (4059a0 <cmp_lfn+0xd4>)
  405946:	4798      	blx	r3
  405948:	4603      	mov	r3, r0
  40594a:	89fa      	ldrh	r2, [r7, #14]
  40594c:	429a      	cmp	r2, r3
  40594e:	d008      	beq.n	405962 <cmp_lfn+0x96>
				return 0;				/* Not matched */
  405950:	2300      	movs	r3, #0
  405952:	e01f      	b.n	405994 <cmp_lfn+0xc8>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  405954:	89ba      	ldrh	r2, [r7, #12]
  405956:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40595a:	429a      	cmp	r2, r3
  40595c:	d001      	beq.n	405962 <cmp_lfn+0x96>
  40595e:	2300      	movs	r3, #0
  405960:	e018      	b.n	405994 <cmp_lfn+0xc8>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  405962:	693b      	ldr	r3, [r7, #16]
  405964:	3301      	adds	r3, #1
  405966:	613b      	str	r3, [r7, #16]
  405968:	693b      	ldr	r3, [r7, #16]
  40596a:	2b0c      	cmp	r3, #12
  40596c:	d9c2      	bls.n	4058f4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  40596e:	683b      	ldr	r3, [r7, #0]
  405970:	781b      	ldrb	r3, [r3, #0]
  405972:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405976:	2b00      	cmp	r3, #0
  405978:	d00b      	beq.n	405992 <cmp_lfn+0xc6>
  40597a:	89fb      	ldrh	r3, [r7, #14]
  40597c:	2b00      	cmp	r3, #0
  40597e:	d008      	beq.n	405992 <cmp_lfn+0xc6>
  405980:	697b      	ldr	r3, [r7, #20]
  405982:	005b      	lsls	r3, r3, #1
  405984:	687a      	ldr	r2, [r7, #4]
  405986:	4413      	add	r3, r2
  405988:	881b      	ldrh	r3, [r3, #0]
  40598a:	2b00      	cmp	r3, #0
  40598c:	d001      	beq.n	405992 <cmp_lfn+0xc6>
		return 0;
  40598e:	2300      	movs	r3, #0
  405990:	e000      	b.n	405994 <cmp_lfn+0xc8>

	return 1;						/* The part of LFN matched */
  405992:	2301      	movs	r3, #1
}
  405994:	4618      	mov	r0, r3
  405996:	3718      	adds	r7, #24
  405998:	46bd      	mov	sp, r7
  40599a:	bd80      	pop	{r7, pc}
  40599c:	004186d4 	.word	0x004186d4
  4059a0:	00407a35 	.word	0x00407a35

004059a4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
  4059a4:	b480      	push	{r7}
  4059a6:	b089      	sub	sp, #36	; 0x24
  4059a8:	af00      	add	r7, sp, #0
  4059aa:	60f8      	str	r0, [r7, #12]
  4059ac:	60b9      	str	r1, [r7, #8]
  4059ae:	71fa      	strb	r2, [r7, #7]
  4059b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4059b2:	68bb      	ldr	r3, [r7, #8]
  4059b4:	330d      	adds	r3, #13
  4059b6:	79ba      	ldrb	r2, [r7, #6]
  4059b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4059ba:	68bb      	ldr	r3, [r7, #8]
  4059bc:	330b      	adds	r3, #11
  4059be:	220f      	movs	r2, #15
  4059c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
  4059c2:	68bb      	ldr	r3, [r7, #8]
  4059c4:	330c      	adds	r3, #12
  4059c6:	2200      	movs	r2, #0
  4059c8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4059ca:	68bb      	ldr	r3, [r7, #8]
  4059cc:	331a      	adds	r3, #26
  4059ce:	2200      	movs	r2, #0
  4059d0:	701a      	strb	r2, [r3, #0]
  4059d2:	68bb      	ldr	r3, [r7, #8]
  4059d4:	331b      	adds	r3, #27
  4059d6:	2200      	movs	r2, #0
  4059d8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4059da:	79fb      	ldrb	r3, [r7, #7]
  4059dc:	1e5a      	subs	r2, r3, #1
  4059de:	4613      	mov	r3, r2
  4059e0:	005b      	lsls	r3, r3, #1
  4059e2:	4413      	add	r3, r2
  4059e4:	009b      	lsls	r3, r3, #2
  4059e6:	4413      	add	r3, r2
  4059e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
  4059ea:	2300      	movs	r3, #0
  4059ec:	82fb      	strh	r3, [r7, #22]
  4059ee:	2300      	movs	r3, #0
  4059f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4059f2:	8afa      	ldrh	r2, [r7, #22]
  4059f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4059f8:	429a      	cmp	r2, r3
  4059fa:	d007      	beq.n	405a0c <fit_lfn+0x68>
  4059fc:	69fb      	ldr	r3, [r7, #28]
  4059fe:	1c5a      	adds	r2, r3, #1
  405a00:	61fa      	str	r2, [r7, #28]
  405a02:	005b      	lsls	r3, r3, #1
  405a04:	68fa      	ldr	r2, [r7, #12]
  405a06:	4413      	add	r3, r2
  405a08:	881b      	ldrh	r3, [r3, #0]
  405a0a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  405a0c:	4a1c      	ldr	r2, [pc, #112]	; (405a80 <fit_lfn+0xdc>)
  405a0e:	69bb      	ldr	r3, [r7, #24]
  405a10:	4413      	add	r3, r2
  405a12:	781b      	ldrb	r3, [r3, #0]
  405a14:	68ba      	ldr	r2, [r7, #8]
  405a16:	4413      	add	r3, r2
  405a18:	8afa      	ldrh	r2, [r7, #22]
  405a1a:	b2d2      	uxtb	r2, r2
  405a1c:	701a      	strb	r2, [r3, #0]
  405a1e:	4a18      	ldr	r2, [pc, #96]	; (405a80 <fit_lfn+0xdc>)
  405a20:	69bb      	ldr	r3, [r7, #24]
  405a22:	4413      	add	r3, r2
  405a24:	781b      	ldrb	r3, [r3, #0]
  405a26:	3301      	adds	r3, #1
  405a28:	68ba      	ldr	r2, [r7, #8]
  405a2a:	4413      	add	r3, r2
  405a2c:	8afa      	ldrh	r2, [r7, #22]
  405a2e:	0a12      	lsrs	r2, r2, #8
  405a30:	b292      	uxth	r2, r2
  405a32:	b2d2      	uxtb	r2, r2
  405a34:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  405a36:	8afb      	ldrh	r3, [r7, #22]
  405a38:	2b00      	cmp	r3, #0
  405a3a:	d102      	bne.n	405a42 <fit_lfn+0x9e>
  405a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405a40:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
  405a42:	69bb      	ldr	r3, [r7, #24]
  405a44:	3301      	adds	r3, #1
  405a46:	61bb      	str	r3, [r7, #24]
  405a48:	69bb      	ldr	r3, [r7, #24]
  405a4a:	2b0c      	cmp	r3, #12
  405a4c:	d9d1      	bls.n	4059f2 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  405a4e:	8afa      	ldrh	r2, [r7, #22]
  405a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405a54:	429a      	cmp	r2, r3
  405a56:	d006      	beq.n	405a66 <fit_lfn+0xc2>
  405a58:	69fb      	ldr	r3, [r7, #28]
  405a5a:	005b      	lsls	r3, r3, #1
  405a5c:	68fa      	ldr	r2, [r7, #12]
  405a5e:	4413      	add	r3, r2
  405a60:	881b      	ldrh	r3, [r3, #0]
  405a62:	2b00      	cmp	r3, #0
  405a64:	d103      	bne.n	405a6e <fit_lfn+0xca>
  405a66:	79fb      	ldrb	r3, [r7, #7]
  405a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a6c:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  405a6e:	68bb      	ldr	r3, [r7, #8]
  405a70:	79fa      	ldrb	r2, [r7, #7]
  405a72:	701a      	strb	r2, [r3, #0]
}
  405a74:	3724      	adds	r7, #36	; 0x24
  405a76:	46bd      	mov	sp, r7
  405a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a7c:	4770      	bx	lr
  405a7e:	bf00      	nop
  405a80:	004186d4 	.word	0x004186d4

00405a84 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
  405a84:	b580      	push	{r7, lr}
  405a86:	b08a      	sub	sp, #40	; 0x28
  405a88:	af00      	add	r7, sp, #0
  405a8a:	60f8      	str	r0, [r7, #12]
  405a8c:	60b9      	str	r1, [r7, #8]
  405a8e:	607a      	str	r2, [r7, #4]
  405a90:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  405a92:	68f8      	ldr	r0, [r7, #12]
  405a94:	68b9      	ldr	r1, [r7, #8]
  405a96:	220b      	movs	r2, #11
  405a98:	4b33      	ldr	r3, [pc, #204]	; (405b68 <gen_numname+0xe4>)
  405a9a:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  405a9c:	887b      	ldrh	r3, [r7, #2]
  405a9e:	2b05      	cmp	r3, #5
  405aa0:	d90f      	bls.n	405ac2 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  405aa2:	887b      	ldrh	r3, [r7, #2]
  405aa4:	b29a      	uxth	r2, r3
  405aa6:	0852      	lsrs	r2, r2, #1
  405aa8:	03db      	lsls	r3, r3, #15
  405aaa:	4313      	orrs	r3, r2
  405aac:	b29a      	uxth	r2, r3
  405aae:	687b      	ldr	r3, [r7, #4]
  405ab0:	1c99      	adds	r1, r3, #2
  405ab2:	6079      	str	r1, [r7, #4]
  405ab4:	881b      	ldrh	r3, [r3, #0]
  405ab6:	4413      	add	r3, r2
  405ab8:	807b      	strh	r3, [r7, #2]
  405aba:	687b      	ldr	r3, [r7, #4]
  405abc:	881b      	ldrh	r3, [r3, #0]
  405abe:	2b00      	cmp	r3, #0
  405ac0:	d1ef      	bne.n	405aa2 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
  405ac2:	2307      	movs	r3, #7
  405ac4:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
  405ac6:	887b      	ldrh	r3, [r7, #2]
  405ac8:	b2db      	uxtb	r3, r3
  405aca:	f003 030f 	and.w	r3, r3, #15
  405ace:	b2db      	uxtb	r3, r3
  405ad0:	3330      	adds	r3, #48	; 0x30
  405ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
  405ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  405ada:	2b39      	cmp	r3, #57	; 0x39
  405adc:	d904      	bls.n	405ae8 <gen_numname+0x64>
  405ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  405ae2:	3307      	adds	r3, #7
  405ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
  405ae8:	6a3b      	ldr	r3, [r7, #32]
  405aea:	1e5a      	subs	r2, r3, #1
  405aec:	623a      	str	r2, [r7, #32]
  405aee:	f107 0128 	add.w	r1, r7, #40	; 0x28
  405af2:	440b      	add	r3, r1
  405af4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  405af8:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
  405afc:	887b      	ldrh	r3, [r7, #2]
  405afe:	091b      	lsrs	r3, r3, #4
  405b00:	807b      	strh	r3, [r7, #2]
	} while (seq);
  405b02:	887b      	ldrh	r3, [r7, #2]
  405b04:	2b00      	cmp	r3, #0
  405b06:	d1de      	bne.n	405ac6 <gen_numname+0x42>
	ns[i] = '~';
  405b08:	f107 0214 	add.w	r2, r7, #20
  405b0c:	6a3b      	ldr	r3, [r7, #32]
  405b0e:	4413      	add	r3, r2
  405b10:	227e      	movs	r2, #126	; 0x7e
  405b12:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405b14:	2300      	movs	r3, #0
  405b16:	61fb      	str	r3, [r7, #28]
  405b18:	e002      	b.n	405b20 <gen_numname+0x9c>
  405b1a:	69fb      	ldr	r3, [r7, #28]
  405b1c:	3301      	adds	r3, #1
  405b1e:	61fb      	str	r3, [r7, #28]
  405b20:	69fa      	ldr	r2, [r7, #28]
  405b22:	6a3b      	ldr	r3, [r7, #32]
  405b24:	429a      	cmp	r2, r3
  405b26:	d205      	bcs.n	405b34 <gen_numname+0xb0>
  405b28:	68fa      	ldr	r2, [r7, #12]
  405b2a:	69fb      	ldr	r3, [r7, #28]
  405b2c:	4413      	add	r3, r2
  405b2e:	781b      	ldrb	r3, [r3, #0]
  405b30:	2b20      	cmp	r3, #32
  405b32:	d1f2      	bne.n	405b1a <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405b34:	69fb      	ldr	r3, [r7, #28]
  405b36:	1c5a      	adds	r2, r3, #1
  405b38:	61fa      	str	r2, [r7, #28]
  405b3a:	68fa      	ldr	r2, [r7, #12]
  405b3c:	441a      	add	r2, r3
  405b3e:	6a3b      	ldr	r3, [r7, #32]
  405b40:	2b07      	cmp	r3, #7
  405b42:	d808      	bhi.n	405b56 <gen_numname+0xd2>
  405b44:	6a3b      	ldr	r3, [r7, #32]
  405b46:	1c59      	adds	r1, r3, #1
  405b48:	6239      	str	r1, [r7, #32]
  405b4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
  405b4e:	440b      	add	r3, r1
  405b50:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  405b54:	e000      	b.n	405b58 <gen_numname+0xd4>
  405b56:	2320      	movs	r3, #32
  405b58:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
  405b5a:	69fb      	ldr	r3, [r7, #28]
  405b5c:	2b07      	cmp	r3, #7
  405b5e:	d9e9      	bls.n	405b34 <gen_numname+0xb0>
}
  405b60:	3728      	adds	r7, #40	; 0x28
  405b62:	46bd      	mov	sp, r7
  405b64:	bd80      	pop	{r7, pc}
  405b66:	bf00      	nop
  405b68:	00404a51 	.word	0x00404a51

00405b6c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  405b6c:	b480      	push	{r7}
  405b6e:	b085      	sub	sp, #20
  405b70:	af00      	add	r7, sp, #0
  405b72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
  405b74:	2300      	movs	r3, #0
  405b76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
  405b78:	230b      	movs	r3, #11
  405b7a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  405b7c:	7bfb      	ldrb	r3, [r7, #15]
  405b7e:	b2da      	uxtb	r2, r3
  405b80:	0852      	lsrs	r2, r2, #1
  405b82:	01db      	lsls	r3, r3, #7
  405b84:	4313      	orrs	r3, r2
  405b86:	b2da      	uxtb	r2, r3
  405b88:	687b      	ldr	r3, [r7, #4]
  405b8a:	1c59      	adds	r1, r3, #1
  405b8c:	6079      	str	r1, [r7, #4]
  405b8e:	781b      	ldrb	r3, [r3, #0]
  405b90:	4413      	add	r3, r2
  405b92:	73fb      	strb	r3, [r7, #15]
  405b94:	68bb      	ldr	r3, [r7, #8]
  405b96:	3b01      	subs	r3, #1
  405b98:	60bb      	str	r3, [r7, #8]
  405b9a:	68bb      	ldr	r3, [r7, #8]
  405b9c:	2b00      	cmp	r3, #0
  405b9e:	d1ed      	bne.n	405b7c <sum_sfn+0x10>
	return sum;
  405ba0:	7bfb      	ldrb	r3, [r7, #15]
}
  405ba2:	4618      	mov	r0, r3
  405ba4:	3714      	adds	r7, #20
  405ba6:	46bd      	mov	sp, r7
  405ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bac:	4770      	bx	lr
  405bae:	bf00      	nop

00405bb0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  405bb0:	b580      	push	{r7, lr}
  405bb2:	b086      	sub	sp, #24
  405bb4:	af00      	add	r7, sp, #0
  405bb6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  405bb8:	6878      	ldr	r0, [r7, #4]
  405bba:	2100      	movs	r1, #0
  405bbc:	4b50      	ldr	r3, [pc, #320]	; (405d00 <dir_find+0x150>)
  405bbe:	4798      	blx	r3
  405bc0:	4603      	mov	r3, r0
  405bc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
  405bc4:	7dfb      	ldrb	r3, [r7, #23]
  405bc6:	2b00      	cmp	r3, #0
  405bc8:	d001      	beq.n	405bce <dir_find+0x1e>
  405bca:	7dfb      	ldrb	r3, [r7, #23]
  405bcc:	e093      	b.n	405cf6 <dir_find+0x146>

#if _USE_LFN
	ord = sum = 0xFF;
  405bce:	23ff      	movs	r3, #255	; 0xff
  405bd0:	753b      	strb	r3, [r7, #20]
  405bd2:	7d3b      	ldrb	r3, [r7, #20]
  405bd4:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  405bd6:	687b      	ldr	r3, [r7, #4]
  405bd8:	681a      	ldr	r2, [r3, #0]
  405bda:	687b      	ldr	r3, [r7, #4]
  405bdc:	691b      	ldr	r3, [r3, #16]
  405bde:	4610      	mov	r0, r2
  405be0:	4619      	mov	r1, r3
  405be2:	4b48      	ldr	r3, [pc, #288]	; (405d04 <dir_find+0x154>)
  405be4:	4798      	blx	r3
  405be6:	4603      	mov	r3, r0
  405be8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  405bea:	7dfb      	ldrb	r3, [r7, #23]
  405bec:	2b00      	cmp	r3, #0
  405bee:	d000      	beq.n	405bf2 <dir_find+0x42>
  405bf0:	e080      	b.n	405cf4 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  405bf2:	687b      	ldr	r3, [r7, #4]
  405bf4:	695b      	ldr	r3, [r3, #20]
  405bf6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  405bf8:	693b      	ldr	r3, [r7, #16]
  405bfa:	781b      	ldrb	r3, [r3, #0]
  405bfc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  405bfe:	7dbb      	ldrb	r3, [r7, #22]
  405c00:	2b00      	cmp	r3, #0
  405c02:	d102      	bne.n	405c0a <dir_find+0x5a>
  405c04:	2304      	movs	r3, #4
  405c06:	75fb      	strb	r3, [r7, #23]
  405c08:	e074      	b.n	405cf4 <dir_find+0x144>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  405c0a:	693b      	ldr	r3, [r7, #16]
  405c0c:	330b      	adds	r3, #11
  405c0e:	781b      	ldrb	r3, [r3, #0]
  405c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405c14:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  405c16:	7dbb      	ldrb	r3, [r7, #22]
  405c18:	2be5      	cmp	r3, #229	; 0xe5
  405c1a:	d007      	beq.n	405c2c <dir_find+0x7c>
  405c1c:	7bfb      	ldrb	r3, [r7, #15]
  405c1e:	f003 0308 	and.w	r3, r3, #8
  405c22:	2b00      	cmp	r3, #0
  405c24:	d005      	beq.n	405c32 <dir_find+0x82>
  405c26:	7bfb      	ldrb	r3, [r7, #15]
  405c28:	2b0f      	cmp	r3, #15
  405c2a:	d002      	beq.n	405c32 <dir_find+0x82>
			ord = 0xFF;
  405c2c:	23ff      	movs	r3, #255	; 0xff
  405c2e:	757b      	strb	r3, [r7, #21]
  405c30:	e056      	b.n	405ce0 <dir_find+0x130>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  405c32:	7bfb      	ldrb	r3, [r7, #15]
  405c34:	2b0f      	cmp	r3, #15
  405c36:	d12f      	bne.n	405c98 <dir_find+0xe8>
				if (dj->lfn) {
  405c38:	687b      	ldr	r3, [r7, #4]
  405c3a:	69db      	ldr	r3, [r3, #28]
  405c3c:	2b00      	cmp	r3, #0
  405c3e:	d04f      	beq.n	405ce0 <dir_find+0x130>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  405c40:	7dbb      	ldrb	r3, [r7, #22]
  405c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405c46:	2b00      	cmp	r3, #0
  405c48:	d00c      	beq.n	405c64 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
  405c4a:	693b      	ldr	r3, [r7, #16]
  405c4c:	7b5b      	ldrb	r3, [r3, #13]
  405c4e:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
  405c50:	7dbb      	ldrb	r3, [r7, #22]
  405c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405c56:	75bb      	strb	r3, [r7, #22]
  405c58:	7dbb      	ldrb	r3, [r7, #22]
  405c5a:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
  405c5c:	687b      	ldr	r3, [r7, #4]
  405c5e:	88da      	ldrh	r2, [r3, #6]
  405c60:	687b      	ldr	r3, [r7, #4]
  405c62:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  405c64:	7dba      	ldrb	r2, [r7, #22]
  405c66:	7d7b      	ldrb	r3, [r7, #21]
  405c68:	429a      	cmp	r2, r3
  405c6a:	d112      	bne.n	405c92 <dir_find+0xe2>
  405c6c:	693b      	ldr	r3, [r7, #16]
  405c6e:	330d      	adds	r3, #13
  405c70:	781b      	ldrb	r3, [r3, #0]
  405c72:	7d3a      	ldrb	r2, [r7, #20]
  405c74:	429a      	cmp	r2, r3
  405c76:	d10c      	bne.n	405c92 <dir_find+0xe2>
  405c78:	687b      	ldr	r3, [r7, #4]
  405c7a:	69db      	ldr	r3, [r3, #28]
  405c7c:	4618      	mov	r0, r3
  405c7e:	6939      	ldr	r1, [r7, #16]
  405c80:	4b21      	ldr	r3, [pc, #132]	; (405d08 <dir_find+0x158>)
  405c82:	4798      	blx	r3
  405c84:	4603      	mov	r3, r0
  405c86:	2b00      	cmp	r3, #0
  405c88:	d003      	beq.n	405c92 <dir_find+0xe2>
  405c8a:	7d7b      	ldrb	r3, [r7, #21]
  405c8c:	3b01      	subs	r3, #1
  405c8e:	b2db      	uxtb	r3, r3
  405c90:	e000      	b.n	405c94 <dir_find+0xe4>
  405c92:	23ff      	movs	r3, #255	; 0xff
  405c94:	757b      	strb	r3, [r7, #21]
  405c96:	e023      	b.n	405ce0 <dir_find+0x130>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  405c98:	7d7b      	ldrb	r3, [r7, #21]
  405c9a:	2b00      	cmp	r3, #0
  405c9c:	d107      	bne.n	405cae <dir_find+0xfe>
  405c9e:	6938      	ldr	r0, [r7, #16]
  405ca0:	4b1a      	ldr	r3, [pc, #104]	; (405d0c <dir_find+0x15c>)
  405ca2:	4798      	blx	r3
  405ca4:	4603      	mov	r3, r0
  405ca6:	7d3a      	ldrb	r2, [r7, #20]
  405ca8:	429a      	cmp	r2, r3
  405caa:	d100      	bne.n	405cae <dir_find+0xfe>
  405cac:	e022      	b.n	405cf4 <dir_find+0x144>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  405cae:	23ff      	movs	r3, #255	; 0xff
  405cb0:	757b      	strb	r3, [r7, #21]
  405cb2:	687b      	ldr	r3, [r7, #4]
  405cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  405cb8:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  405cba:	687b      	ldr	r3, [r7, #4]
  405cbc:	699b      	ldr	r3, [r3, #24]
  405cbe:	330b      	adds	r3, #11
  405cc0:	781b      	ldrb	r3, [r3, #0]
  405cc2:	f003 0301 	and.w	r3, r3, #1
  405cc6:	2b00      	cmp	r3, #0
  405cc8:	d10a      	bne.n	405ce0 <dir_find+0x130>
  405cca:	687b      	ldr	r3, [r7, #4]
  405ccc:	699b      	ldr	r3, [r3, #24]
  405cce:	6938      	ldr	r0, [r7, #16]
  405cd0:	4619      	mov	r1, r3
  405cd2:	220b      	movs	r2, #11
  405cd4:	4b0e      	ldr	r3, [pc, #56]	; (405d10 <dir_find+0x160>)
  405cd6:	4798      	blx	r3
  405cd8:	4603      	mov	r3, r0
  405cda:	2b00      	cmp	r3, #0
  405cdc:	d100      	bne.n	405ce0 <dir_find+0x130>
  405cde:	e009      	b.n	405cf4 <dir_find+0x144>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  405ce0:	6878      	ldr	r0, [r7, #4]
  405ce2:	2100      	movs	r1, #0
  405ce4:	4b0b      	ldr	r3, [pc, #44]	; (405d14 <dir_find+0x164>)
  405ce6:	4798      	blx	r3
  405ce8:	4603      	mov	r3, r0
  405cea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
  405cec:	7dfb      	ldrb	r3, [r7, #23]
  405cee:	2b00      	cmp	r3, #0
  405cf0:	f43f af71 	beq.w	405bd6 <dir_find+0x26>

	return res;
  405cf4:	7dfb      	ldrb	r3, [r7, #23]
}
  405cf6:	4618      	mov	r0, r3
  405cf8:	3718      	adds	r7, #24
  405cfa:	46bd      	mov	sp, r7
  405cfc:	bd80      	pop	{r7, pc}
  405cfe:	bf00      	nop
  405d00:	00405609 	.word	0x00405609
  405d04:	00404e99 	.word	0x00404e99
  405d08:	004058cd 	.word	0x004058cd
  405d0c:	00405b6d 	.word	0x00405b6d
  405d10:	00404ac1 	.word	0x00404ac1
  405d14:	00405711 	.word	0x00405711

00405d18 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  405d18:	b590      	push	{r4, r7, lr}
  405d1a:	b08d      	sub	sp, #52	; 0x34
  405d1c:	af00      	add	r7, sp, #0
  405d1e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  405d20:	687b      	ldr	r3, [r7, #4]
  405d22:	699b      	ldr	r3, [r3, #24]
  405d24:	627b      	str	r3, [r7, #36]	; 0x24
  405d26:	687b      	ldr	r3, [r7, #4]
  405d28:	69db      	ldr	r3, [r3, #28]
  405d2a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
  405d2c:	f107 030c 	add.w	r3, r7, #12
  405d30:	4618      	mov	r0, r3
  405d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
  405d34:	220c      	movs	r2, #12
  405d36:	4b92      	ldr	r3, [pc, #584]	; (405f80 <dir_register+0x268>)
  405d38:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  405d3a:	7dfb      	ldrb	r3, [r7, #23]
  405d3c:	f003 0301 	and.w	r3, r3, #1
  405d40:	2b00      	cmp	r3, #0
  405d42:	d035      	beq.n	405db0 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  405d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405d46:	330b      	adds	r3, #11
  405d48:	2200      	movs	r2, #0
  405d4a:	701a      	strb	r2, [r3, #0]
  405d4c:	687b      	ldr	r3, [r7, #4]
  405d4e:	2200      	movs	r2, #0
  405d50:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
  405d52:	2301      	movs	r3, #1
  405d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
  405d56:	e015      	b.n	405d84 <dir_register+0x6c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
  405d58:	f107 020c 	add.w	r2, r7, #12
  405d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  405d60:	4611      	mov	r1, r2
  405d62:	6a3a      	ldr	r2, [r7, #32]
  405d64:	4c87      	ldr	r4, [pc, #540]	; (405f84 <dir_register+0x26c>)
  405d66:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  405d68:	6878      	ldr	r0, [r7, #4]
  405d6a:	4b87      	ldr	r3, [pc, #540]	; (405f88 <dir_register+0x270>)
  405d6c:	4798      	blx	r3
  405d6e:	4603      	mov	r3, r0
  405d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
  405d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405d78:	2b00      	cmp	r3, #0
  405d7a:	d000      	beq.n	405d7e <dir_register+0x66>
  405d7c:	e005      	b.n	405d8a <dir_register+0x72>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  405d7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405d80:	3301      	adds	r3, #1
  405d82:	85bb      	strh	r3, [r7, #44]	; 0x2c
  405d84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405d86:	2b63      	cmp	r3, #99	; 0x63
  405d88:	d9e6      	bls.n	405d58 <dir_register+0x40>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  405d8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405d8c:	2b64      	cmp	r3, #100	; 0x64
  405d8e:	d101      	bne.n	405d94 <dir_register+0x7c>
  405d90:	2307      	movs	r3, #7
  405d92:	e0f0      	b.n	405f76 <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  405d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405d98:	2b04      	cmp	r3, #4
  405d9a:	d002      	beq.n	405da2 <dir_register+0x8a>
  405d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405da0:	e0e9      	b.n	405f76 <dir_register+0x25e>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  405da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405da4:	330b      	adds	r3, #11
  405da6:	7dfa      	ldrb	r2, [r7, #23]
  405da8:	701a      	strb	r2, [r3, #0]
  405daa:	687b      	ldr	r3, [r7, #4]
  405dac:	6a3a      	ldr	r2, [r7, #32]
  405dae:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  405db0:	7dfb      	ldrb	r3, [r7, #23]
  405db2:	f003 0302 	and.w	r3, r3, #2
  405db6:	2b00      	cmp	r3, #0
  405db8:	d016      	beq.n	405de8 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
  405dba:	2300      	movs	r3, #0
  405dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
  405dbe:	e002      	b.n	405dc6 <dir_register+0xae>
  405dc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405dc2:	3301      	adds	r3, #1
  405dc4:	857b      	strh	r3, [r7, #42]	; 0x2a
  405dc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405dc8:	005b      	lsls	r3, r3, #1
  405dca:	6a3a      	ldr	r2, [r7, #32]
  405dcc:	4413      	add	r3, r2
  405dce:	881b      	ldrh	r3, [r3, #0]
  405dd0:	2b00      	cmp	r3, #0
  405dd2:	d1f5      	bne.n	405dc0 <dir_register+0xa8>
		ne = (ne + 25) / 13;
  405dd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405dd6:	3319      	adds	r3, #25
  405dd8:	4a6c      	ldr	r2, [pc, #432]	; (405f8c <dir_register+0x274>)
  405dda:	fb82 1203 	smull	r1, r2, r2, r3
  405dde:	1092      	asrs	r2, r2, #2
  405de0:	17db      	asrs	r3, r3, #31
  405de2:	1ad3      	subs	r3, r2, r3
  405de4:	857b      	strh	r3, [r7, #42]	; 0x2a
  405de6:	e001      	b.n	405dec <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  405de8:	2301      	movs	r3, #1
  405dea:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  405dec:	6878      	ldr	r0, [r7, #4]
  405dee:	2100      	movs	r1, #0
  405df0:	4b67      	ldr	r3, [pc, #412]	; (405f90 <dir_register+0x278>)
  405df2:	4798      	blx	r3
  405df4:	4603      	mov	r3, r0
  405df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
  405dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405dfe:	2b00      	cmp	r3, #0
  405e00:	d002      	beq.n	405e08 <dir_register+0xf0>
  405e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405e06:	e0b6      	b.n	405f76 <dir_register+0x25e>
	n = is = 0;
  405e08:	2300      	movs	r3, #0
  405e0a:	853b      	strh	r3, [r7, #40]	; 0x28
  405e0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  405e0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
  405e10:	687b      	ldr	r3, [r7, #4]
  405e12:	681a      	ldr	r2, [r3, #0]
  405e14:	687b      	ldr	r3, [r7, #4]
  405e16:	691b      	ldr	r3, [r3, #16]
  405e18:	4610      	mov	r0, r2
  405e1a:	4619      	mov	r1, r3
  405e1c:	4b5d      	ldr	r3, [pc, #372]	; (405f94 <dir_register+0x27c>)
  405e1e:	4798      	blx	r3
  405e20:	4603      	mov	r3, r0
  405e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
  405e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405e2a:	2b00      	cmp	r3, #0
  405e2c:	d000      	beq.n	405e30 <dir_register+0x118>
  405e2e:	e025      	b.n	405e7c <dir_register+0x164>
		c = *dj->dir;				/* Check the entry status */
  405e30:	687b      	ldr	r3, [r7, #4]
  405e32:	695b      	ldr	r3, [r3, #20]
  405e34:	781b      	ldrb	r3, [r3, #0]
  405e36:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  405e38:	7ffb      	ldrb	r3, [r7, #31]
  405e3a:	2be5      	cmp	r3, #229	; 0xe5
  405e3c:	d002      	beq.n	405e44 <dir_register+0x12c>
  405e3e:	7ffb      	ldrb	r3, [r7, #31]
  405e40:	2b00      	cmp	r3, #0
  405e42:	d10e      	bne.n	405e62 <dir_register+0x14a>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  405e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405e46:	2b00      	cmp	r3, #0
  405e48:	d102      	bne.n	405e50 <dir_register+0x138>
  405e4a:	687b      	ldr	r3, [r7, #4]
  405e4c:	88db      	ldrh	r3, [r3, #6]
  405e4e:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  405e50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405e52:	3301      	adds	r3, #1
  405e54:	85bb      	strh	r3, [r7, #44]	; 0x2c
  405e56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  405e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405e5a:	429a      	cmp	r2, r3
  405e5c:	d100      	bne.n	405e60 <dir_register+0x148>
  405e5e:	e00d      	b.n	405e7c <dir_register+0x164>
  405e60:	e001      	b.n	405e66 <dir_register+0x14e>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  405e62:	2300      	movs	r3, #0
  405e64:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  405e66:	6878      	ldr	r0, [r7, #4]
  405e68:	2101      	movs	r1, #1
  405e6a:	4b4b      	ldr	r3, [pc, #300]	; (405f98 <dir_register+0x280>)
  405e6c:	4798      	blx	r3
  405e6e:	4603      	mov	r3, r0
  405e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
  405e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405e78:	2b00      	cmp	r3, #0
  405e7a:	d0c9      	beq.n	405e10 <dir_register+0xf8>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  405e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405e80:	2b00      	cmp	r3, #0
  405e82:	d146      	bne.n	405f12 <dir_register+0x1fa>
  405e84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405e86:	2b01      	cmp	r3, #1
  405e88:	d943      	bls.n	405f12 <dir_register+0x1fa>
		res = dir_sdi(dj, is);
  405e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  405e8c:	6878      	ldr	r0, [r7, #4]
  405e8e:	4619      	mov	r1, r3
  405e90:	4b3f      	ldr	r3, [pc, #252]	; (405f90 <dir_register+0x278>)
  405e92:	4798      	blx	r3
  405e94:	4603      	mov	r3, r0
  405e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  405e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405e9e:	2b00      	cmp	r3, #0
  405ea0:	d137      	bne.n	405f12 <dir_register+0x1fa>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  405ea2:	687b      	ldr	r3, [r7, #4]
  405ea4:	699b      	ldr	r3, [r3, #24]
  405ea6:	4618      	mov	r0, r3
  405ea8:	4b3c      	ldr	r3, [pc, #240]	; (405f9c <dir_register+0x284>)
  405eaa:	4798      	blx	r3
  405eac:	4603      	mov	r3, r0
  405eae:	77bb      	strb	r3, [r7, #30]
			ne--;
  405eb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405eb2:	3b01      	subs	r3, #1
  405eb4:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  405eb6:	687b      	ldr	r3, [r7, #4]
  405eb8:	681a      	ldr	r2, [r3, #0]
  405eba:	687b      	ldr	r3, [r7, #4]
  405ebc:	691b      	ldr	r3, [r3, #16]
  405ebe:	4610      	mov	r0, r2
  405ec0:	4619      	mov	r1, r3
  405ec2:	4b34      	ldr	r3, [pc, #208]	; (405f94 <dir_register+0x27c>)
  405ec4:	4798      	blx	r3
  405ec6:	4603      	mov	r3, r0
  405ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
  405ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405ed0:	2b00      	cmp	r3, #0
  405ed2:	d000      	beq.n	405ed6 <dir_register+0x1be>
  405ed4:	e01d      	b.n	405f12 <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  405ed6:	687b      	ldr	r3, [r7, #4]
  405ed8:	69d8      	ldr	r0, [r3, #28]
  405eda:	687b      	ldr	r3, [r7, #4]
  405edc:	6959      	ldr	r1, [r3, #20]
  405ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405ee0:	b2da      	uxtb	r2, r3
  405ee2:	7fbb      	ldrb	r3, [r7, #30]
  405ee4:	4c2e      	ldr	r4, [pc, #184]	; (405fa0 <dir_register+0x288>)
  405ee6:	47a0      	blx	r4
				dj->fs->wflag = 1;
  405ee8:	687b      	ldr	r3, [r7, #4]
  405eea:	681b      	ldr	r3, [r3, #0]
  405eec:	2201      	movs	r2, #1
  405eee:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  405ef0:	6878      	ldr	r0, [r7, #4]
  405ef2:	2100      	movs	r1, #0
  405ef4:	4b28      	ldr	r3, [pc, #160]	; (405f98 <dir_register+0x280>)
  405ef6:	4798      	blx	r3
  405ef8:	4603      	mov	r3, r0
  405efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
  405efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405f02:	2b00      	cmp	r3, #0
  405f04:	d105      	bne.n	405f12 <dir_register+0x1fa>
  405f06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405f08:	3b01      	subs	r3, #1
  405f0a:	857b      	strh	r3, [r7, #42]	; 0x2a
  405f0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  405f0e:	2b00      	cmp	r3, #0
  405f10:	d1d1      	bne.n	405eb6 <dir_register+0x19e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
  405f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405f16:	2b00      	cmp	r3, #0
  405f18:	d12b      	bne.n	405f72 <dir_register+0x25a>
		res = move_window(dj->fs, dj->sect);
  405f1a:	687b      	ldr	r3, [r7, #4]
  405f1c:	681a      	ldr	r2, [r3, #0]
  405f1e:	687b      	ldr	r3, [r7, #4]
  405f20:	691b      	ldr	r3, [r3, #16]
  405f22:	4610      	mov	r0, r2
  405f24:	4619      	mov	r1, r3
  405f26:	4b1b      	ldr	r3, [pc, #108]	; (405f94 <dir_register+0x27c>)
  405f28:	4798      	blx	r3
  405f2a:	4603      	mov	r3, r0
  405f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  405f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405f34:	2b00      	cmp	r3, #0
  405f36:	d11c      	bne.n	405f72 <dir_register+0x25a>
			dir = dj->dir;
  405f38:	687b      	ldr	r3, [r7, #4]
  405f3a:	695b      	ldr	r3, [r3, #20]
  405f3c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  405f3e:	69b8      	ldr	r0, [r7, #24]
  405f40:	2100      	movs	r1, #0
  405f42:	2220      	movs	r2, #32
  405f44:	4b17      	ldr	r3, [pc, #92]	; (405fa4 <dir_register+0x28c>)
  405f46:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  405f48:	687b      	ldr	r3, [r7, #4]
  405f4a:	699b      	ldr	r3, [r3, #24]
  405f4c:	69b8      	ldr	r0, [r7, #24]
  405f4e:	4619      	mov	r1, r3
  405f50:	220b      	movs	r2, #11
  405f52:	4b0b      	ldr	r3, [pc, #44]	; (405f80 <dir_register+0x268>)
  405f54:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  405f56:	69bb      	ldr	r3, [r7, #24]
  405f58:	330c      	adds	r3, #12
  405f5a:	687a      	ldr	r2, [r7, #4]
  405f5c:	6992      	ldr	r2, [r2, #24]
  405f5e:	320b      	adds	r2, #11
  405f60:	7812      	ldrb	r2, [r2, #0]
  405f62:	f002 0218 	and.w	r2, r2, #24
  405f66:	b2d2      	uxtb	r2, r2
  405f68:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
  405f6a:	687b      	ldr	r3, [r7, #4]
  405f6c:	681b      	ldr	r3, [r3, #0]
  405f6e:	2201      	movs	r2, #1
  405f70:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
  405f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  405f76:	4618      	mov	r0, r3
  405f78:	3734      	adds	r7, #52	; 0x34
  405f7a:	46bd      	mov	sp, r7
  405f7c:	bd90      	pop	{r4, r7, pc}
  405f7e:	bf00      	nop
  405f80:	00404a51 	.word	0x00404a51
  405f84:	00405a85 	.word	0x00405a85
  405f88:	00405bb1 	.word	0x00405bb1
  405f8c:	4ec4ec4f 	.word	0x4ec4ec4f
  405f90:	00405609 	.word	0x00405609
  405f94:	00404e99 	.word	0x00404e99
  405f98:	00405711 	.word	0x00405711
  405f9c:	00405b6d 	.word	0x00405b6d
  405fa0:	004059a5 	.word	0x004059a5
  405fa4:	00404a8d 	.word	0x00404a8d

00405fa8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
  405fa8:	b580      	push	{r7, lr}
  405faa:	b08a      	sub	sp, #40	; 0x28
  405fac:	af00      	add	r7, sp, #0
  405fae:	6078      	str	r0, [r7, #4]
  405fb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  405fb2:	683b      	ldr	r3, [r7, #0]
  405fb4:	681b      	ldr	r3, [r3, #0]
  405fb6:	613b      	str	r3, [r7, #16]
  405fb8:	e002      	b.n	405fc0 <create_name+0x18>
  405fba:	693b      	ldr	r3, [r7, #16]
  405fbc:	3301      	adds	r3, #1
  405fbe:	613b      	str	r3, [r7, #16]
  405fc0:	693b      	ldr	r3, [r7, #16]
  405fc2:	781b      	ldrb	r3, [r3, #0]
  405fc4:	2b2f      	cmp	r3, #47	; 0x2f
  405fc6:	d0f8      	beq.n	405fba <create_name+0x12>
  405fc8:	693b      	ldr	r3, [r7, #16]
  405fca:	781b      	ldrb	r3, [r3, #0]
  405fcc:	2b5c      	cmp	r3, #92	; 0x5c
  405fce:	d0f4      	beq.n	405fba <create_name+0x12>
	lfn = dj->lfn;
  405fd0:	687b      	ldr	r3, [r7, #4]
  405fd2:	69db      	ldr	r3, [r3, #28]
  405fd4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
  405fd6:	2300      	movs	r3, #0
  405fd8:	617b      	str	r3, [r7, #20]
  405fda:	697b      	ldr	r3, [r7, #20]
  405fdc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
  405fde:	69bb      	ldr	r3, [r7, #24]
  405fe0:	1c5a      	adds	r2, r3, #1
  405fe2:	61ba      	str	r2, [r7, #24]
  405fe4:	693a      	ldr	r2, [r7, #16]
  405fe6:	4413      	add	r3, r2
  405fe8:	781b      	ldrb	r3, [r3, #0]
  405fea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  405fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  405fee:	2b1f      	cmp	r3, #31
  405ff0:	d92f      	bls.n	406052 <create_name+0xaa>
  405ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  405ff4:	2b2f      	cmp	r3, #47	; 0x2f
  405ff6:	d02c      	beq.n	406052 <create_name+0xaa>
  405ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  405ffa:	2b5c      	cmp	r3, #92	; 0x5c
  405ffc:	d029      	beq.n	406052 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
  405ffe:	697b      	ldr	r3, [r7, #20]
  406000:	2bfe      	cmp	r3, #254	; 0xfe
  406002:	d901      	bls.n	406008 <create_name+0x60>
			return FR_INVALID_NAME;
  406004:	2306      	movs	r3, #6
  406006:	e181      	b.n	40630c <create_name+0x364>
#if !_LFN_UNICODE
		w &= 0xFF;
  406008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40600a:	b2db      	uxtb	r3, r3
  40600c:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40600e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406010:	4618      	mov	r0, r3
  406012:	2101      	movs	r1, #1
  406014:	4b93      	ldr	r3, [pc, #588]	; (406264 <create_name+0x2bc>)
  406016:	4798      	blx	r3
  406018:	4603      	mov	r3, r0
  40601a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40601c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40601e:	2b00      	cmp	r3, #0
  406020:	d101      	bne.n	406026 <create_name+0x7e>
  406022:	2306      	movs	r3, #6
  406024:	e172      	b.n	40630c <create_name+0x364>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  406026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406028:	2b7f      	cmp	r3, #127	; 0x7f
  40602a:	d809      	bhi.n	406040 <create_name+0x98>
  40602c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40602e:	488e      	ldr	r0, [pc, #568]	; (406268 <create_name+0x2c0>)
  406030:	4619      	mov	r1, r3
  406032:	4b8e      	ldr	r3, [pc, #568]	; (40626c <create_name+0x2c4>)
  406034:	4798      	blx	r3
  406036:	4603      	mov	r3, r0
  406038:	2b00      	cmp	r3, #0
  40603a:	d001      	beq.n	406040 <create_name+0x98>
			return FR_INVALID_NAME;
  40603c:	2306      	movs	r3, #6
  40603e:	e165      	b.n	40630c <create_name+0x364>
		lfn[di++] = w;					/* Store the Unicode char */
  406040:	697b      	ldr	r3, [r7, #20]
  406042:	1c5a      	adds	r2, r3, #1
  406044:	617a      	str	r2, [r7, #20]
  406046:	005b      	lsls	r3, r3, #1
  406048:	68fa      	ldr	r2, [r7, #12]
  40604a:	4413      	add	r3, r2
  40604c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  40604e:	801a      	strh	r2, [r3, #0]
	}
  406050:	e7c5      	b.n	405fde <create_name+0x36>
	*path = &p[si];						/* Return pointer to the next segment */
  406052:	693a      	ldr	r2, [r7, #16]
  406054:	69bb      	ldr	r3, [r7, #24]
  406056:	441a      	add	r2, r3
  406058:	683b      	ldr	r3, [r7, #0]
  40605a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40605c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40605e:	2b1f      	cmp	r3, #31
  406060:	d801      	bhi.n	406066 <create_name+0xbe>
  406062:	2304      	movs	r3, #4
  406064:	e000      	b.n	406068 <create_name+0xc0>
  406066:	2300      	movs	r3, #0
  406068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  40606c:	e012      	b.n	406094 <create_name+0xec>
		w = lfn[di-1];
  40606e:	697b      	ldr	r3, [r7, #20]
  406070:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406074:	3b01      	subs	r3, #1
  406076:	005b      	lsls	r3, r3, #1
  406078:	68fa      	ldr	r2, [r7, #12]
  40607a:	4413      	add	r3, r2
  40607c:	881b      	ldrh	r3, [r3, #0]
  40607e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
  406080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406082:	2b20      	cmp	r3, #32
  406084:	d003      	beq.n	40608e <create_name+0xe6>
  406086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406088:	2b2e      	cmp	r3, #46	; 0x2e
  40608a:	d000      	beq.n	40608e <create_name+0xe6>
  40608c:	e005      	b.n	40609a <create_name+0xf2>
		di--;
  40608e:	697b      	ldr	r3, [r7, #20]
  406090:	3b01      	subs	r3, #1
  406092:	617b      	str	r3, [r7, #20]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  406094:	697b      	ldr	r3, [r7, #20]
  406096:	2b00      	cmp	r3, #0
  406098:	d1e9      	bne.n	40606e <create_name+0xc6>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  40609a:	697b      	ldr	r3, [r7, #20]
  40609c:	2b00      	cmp	r3, #0
  40609e:	d101      	bne.n	4060a4 <create_name+0xfc>
  4060a0:	2306      	movs	r3, #6
  4060a2:	e133      	b.n	40630c <create_name+0x364>

	lfn[di] = 0;						/* LFN is created */
  4060a4:	697b      	ldr	r3, [r7, #20]
  4060a6:	005b      	lsls	r3, r3, #1
  4060a8:	68fa      	ldr	r2, [r7, #12]
  4060aa:	4413      	add	r3, r2
  4060ac:	2200      	movs	r2, #0
  4060ae:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  4060b0:	687b      	ldr	r3, [r7, #4]
  4060b2:	699b      	ldr	r3, [r3, #24]
  4060b4:	4618      	mov	r0, r3
  4060b6:	2120      	movs	r1, #32
  4060b8:	220b      	movs	r2, #11
  4060ba:	4b6d      	ldr	r3, [pc, #436]	; (406270 <create_name+0x2c8>)
  4060bc:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4060be:	2300      	movs	r3, #0
  4060c0:	61bb      	str	r3, [r7, #24]
  4060c2:	e002      	b.n	4060ca <create_name+0x122>
  4060c4:	69bb      	ldr	r3, [r7, #24]
  4060c6:	3301      	adds	r3, #1
  4060c8:	61bb      	str	r3, [r7, #24]
  4060ca:	69bb      	ldr	r3, [r7, #24]
  4060cc:	005b      	lsls	r3, r3, #1
  4060ce:	68fa      	ldr	r2, [r7, #12]
  4060d0:	4413      	add	r3, r2
  4060d2:	881b      	ldrh	r3, [r3, #0]
  4060d4:	2b20      	cmp	r3, #32
  4060d6:	d0f5      	beq.n	4060c4 <create_name+0x11c>
  4060d8:	69bb      	ldr	r3, [r7, #24]
  4060da:	005b      	lsls	r3, r3, #1
  4060dc:	68fa      	ldr	r2, [r7, #12]
  4060de:	4413      	add	r3, r2
  4060e0:	881b      	ldrh	r3, [r3, #0]
  4060e2:	2b2e      	cmp	r3, #46	; 0x2e
  4060e4:	d0ee      	beq.n	4060c4 <create_name+0x11c>
	if (si) cf |= NS_LOSS | NS_LFN;
  4060e6:	69bb      	ldr	r3, [r7, #24]
  4060e8:	2b00      	cmp	r3, #0
  4060ea:	d006      	beq.n	4060fa <create_name+0x152>
  4060ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4060f0:	f043 0303 	orr.w	r3, r3, #3
  4060f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4060f8:	e003      	b.n	406102 <create_name+0x15a>
  4060fa:	e002      	b.n	406102 <create_name+0x15a>
  4060fc:	697b      	ldr	r3, [r7, #20]
  4060fe:	3b01      	subs	r3, #1
  406100:	617b      	str	r3, [r7, #20]
  406102:	697b      	ldr	r3, [r7, #20]
  406104:	2b00      	cmp	r3, #0
  406106:	d009      	beq.n	40611c <create_name+0x174>
  406108:	697b      	ldr	r3, [r7, #20]
  40610a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40610e:	3b01      	subs	r3, #1
  406110:	005b      	lsls	r3, r3, #1
  406112:	68fa      	ldr	r2, [r7, #12]
  406114:	4413      	add	r3, r2
  406116:	881b      	ldrh	r3, [r3, #0]
  406118:	2b2e      	cmp	r3, #46	; 0x2e
  40611a:	d1ef      	bne.n	4060fc <create_name+0x154>

	b = i = 0; ni = 8;
  40611c:	2300      	movs	r3, #0
  40611e:	623b      	str	r3, [r7, #32]
  406120:	2300      	movs	r3, #0
  406122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  406126:	2308      	movs	r3, #8
  406128:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  40612a:	69bb      	ldr	r3, [r7, #24]
  40612c:	1c5a      	adds	r2, r3, #1
  40612e:	61ba      	str	r2, [r7, #24]
  406130:	005b      	lsls	r3, r3, #1
  406132:	68fa      	ldr	r2, [r7, #12]
  406134:	4413      	add	r3, r2
  406136:	881b      	ldrh	r3, [r3, #0]
  406138:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
  40613a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40613c:	2b00      	cmp	r3, #0
  40613e:	d100      	bne.n	406142 <create_name+0x19a>
  406140:	e09c      	b.n	40627c <create_name+0x2d4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  406142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406144:	2b20      	cmp	r3, #32
  406146:	d006      	beq.n	406156 <create_name+0x1ae>
  406148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40614a:	2b2e      	cmp	r3, #46	; 0x2e
  40614c:	d10a      	bne.n	406164 <create_name+0x1bc>
  40614e:	69ba      	ldr	r2, [r7, #24]
  406150:	697b      	ldr	r3, [r7, #20]
  406152:	429a      	cmp	r2, r3
  406154:	d006      	beq.n	406164 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
  406156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40615a:	f043 0303 	orr.w	r3, r3, #3
  40615e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  406162:	e07e      	b.n	406262 <create_name+0x2ba>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  406164:	6a3a      	ldr	r2, [r7, #32]
  406166:	69fb      	ldr	r3, [r7, #28]
  406168:	429a      	cmp	r2, r3
  40616a:	d203      	bcs.n	406174 <create_name+0x1cc>
  40616c:	69ba      	ldr	r2, [r7, #24]
  40616e:	697b      	ldr	r3, [r7, #20]
  406170:	429a      	cmp	r2, r3
  406172:	d124      	bne.n	4061be <create_name+0x216>
			if (ni == 11) {				/* Long extension */
  406174:	69fb      	ldr	r3, [r7, #28]
  406176:	2b0b      	cmp	r3, #11
  406178:	d106      	bne.n	406188 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
  40617a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40617e:	f043 0303 	orr.w	r3, r3, #3
  406182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  406186:	e079      	b.n	40627c <create_name+0x2d4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  406188:	69ba      	ldr	r2, [r7, #24]
  40618a:	697b      	ldr	r3, [r7, #20]
  40618c:	429a      	cmp	r2, r3
  40618e:	d005      	beq.n	40619c <create_name+0x1f4>
  406190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  406194:	f043 0303 	orr.w	r3, r3, #3
  406198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
  40619c:	69ba      	ldr	r2, [r7, #24]
  40619e:	697b      	ldr	r3, [r7, #20]
  4061a0:	429a      	cmp	r2, r3
  4061a2:	d900      	bls.n	4061a6 <create_name+0x1fe>
  4061a4:	e06a      	b.n	40627c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4061a6:	697b      	ldr	r3, [r7, #20]
  4061a8:	61bb      	str	r3, [r7, #24]
  4061aa:	2308      	movs	r3, #8
  4061ac:	623b      	str	r3, [r7, #32]
  4061ae:	230b      	movs	r3, #11
  4061b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
  4061b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4061b6:	009b      	lsls	r3, r3, #2
  4061b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4061bc:	e051      	b.n	406262 <create_name+0x2ba>
		}

		if (w >= 0x80) {				/* Non ASCII char */
  4061be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061c0:	2b7f      	cmp	r3, #127	; 0x7f
  4061c2:	d914      	bls.n	4061ee <create_name+0x246>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  4061c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061c6:	4618      	mov	r0, r3
  4061c8:	2100      	movs	r1, #0
  4061ca:	4b26      	ldr	r3, [pc, #152]	; (406264 <create_name+0x2bc>)
  4061cc:	4798      	blx	r3
  4061ce:	4603      	mov	r3, r0
  4061d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4061d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061d4:	2b00      	cmp	r3, #0
  4061d6:	d004      	beq.n	4061e2 <create_name+0x23a>
  4061d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061da:	3b80      	subs	r3, #128	; 0x80
  4061dc:	4a25      	ldr	r2, [pc, #148]	; (406274 <create_name+0x2cc>)
  4061de:	5cd3      	ldrb	r3, [r2, r3]
  4061e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  4061e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4061e6:	f043 0302 	orr.w	r3, r3, #2
  4061ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  4061ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061f0:	2b00      	cmp	r3, #0
  4061f2:	d007      	beq.n	406204 <create_name+0x25c>
  4061f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4061f6:	4820      	ldr	r0, [pc, #128]	; (406278 <create_name+0x2d0>)
  4061f8:	4619      	mov	r1, r3
  4061fa:	4b1c      	ldr	r3, [pc, #112]	; (40626c <create_name+0x2c4>)
  4061fc:	4798      	blx	r3
  4061fe:	4603      	mov	r3, r0
  406200:	2b00      	cmp	r3, #0
  406202:	d008      	beq.n	406216 <create_name+0x26e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  406204:	235f      	movs	r3, #95	; 0x5f
  406206:	84bb      	strh	r3, [r7, #36]	; 0x24
  406208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40620c:	f043 0303 	orr.w	r3, r3, #3
  406210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  406214:	e01b      	b.n	40624e <create_name+0x2a6>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  406216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406218:	2b40      	cmp	r3, #64	; 0x40
  40621a:	d909      	bls.n	406230 <create_name+0x288>
  40621c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40621e:	2b5a      	cmp	r3, #90	; 0x5a
  406220:	d806      	bhi.n	406230 <create_name+0x288>
					b |= 2;
  406222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406226:	f043 0302 	orr.w	r3, r3, #2
  40622a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40622e:	e00e      	b.n	40624e <create_name+0x2a6>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  406230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406232:	2b60      	cmp	r3, #96	; 0x60
  406234:	d90b      	bls.n	40624e <create_name+0x2a6>
  406236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  406238:	2b7a      	cmp	r3, #122	; 0x7a
  40623a:	d808      	bhi.n	40624e <create_name+0x2a6>
						b |= 1; w -= 0x20;
  40623c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406240:	f043 0301 	orr.w	r3, r3, #1
  406244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  406248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40624a:	3b20      	subs	r3, #32
  40624c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  40624e:	687b      	ldr	r3, [r7, #4]
  406250:	699a      	ldr	r2, [r3, #24]
  406252:	6a3b      	ldr	r3, [r7, #32]
  406254:	1c59      	adds	r1, r3, #1
  406256:	6239      	str	r1, [r7, #32]
  406258:	4413      	add	r3, r2
  40625a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  40625c:	b2d2      	uxtb	r2, r2
  40625e:	701a      	strb	r2, [r3, #0]
	}
  406260:	e763      	b.n	40612a <create_name+0x182>
  406262:	e762      	b.n	40612a <create_name+0x182>
  406264:	004079bd 	.word	0x004079bd
  406268:	004186e4 	.word	0x004186e4
  40626c:	00404b11 	.word	0x00404b11
  406270:	00404a8d 	.word	0x00404a8d
  406274:	004186f8 	.word	0x004186f8
  406278:	004186f0 	.word	0x004186f0

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40627c:	687b      	ldr	r3, [r7, #4]
  40627e:	699b      	ldr	r3, [r3, #24]
  406280:	781b      	ldrb	r3, [r3, #0]
  406282:	2be5      	cmp	r3, #229	; 0xe5
  406284:	d103      	bne.n	40628e <create_name+0x2e6>
  406286:	687b      	ldr	r3, [r7, #4]
  406288:	699b      	ldr	r3, [r3, #24]
  40628a:	2205      	movs	r2, #5
  40628c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  40628e:	69fb      	ldr	r3, [r7, #28]
  406290:	2b08      	cmp	r3, #8
  406292:	d104      	bne.n	40629e <create_name+0x2f6>
  406294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406298:	009b      	lsls	r3, r3, #2
  40629a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  40629e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4062a2:	f003 030c 	and.w	r3, r3, #12
  4062a6:	2b0c      	cmp	r3, #12
  4062a8:	d005      	beq.n	4062b6 <create_name+0x30e>
  4062aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4062ae:	f003 0303 	and.w	r3, r3, #3
  4062b2:	2b03      	cmp	r3, #3
  4062b4:	d105      	bne.n	4062c2 <create_name+0x31a>
		cf |= NS_LFN;
  4062b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4062ba:	f043 0302 	orr.w	r3, r3, #2
  4062be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  4062c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4062c6:	f003 0302 	and.w	r3, r3, #2
  4062ca:	2b00      	cmp	r3, #0
  4062cc:	d117      	bne.n	4062fe <create_name+0x356>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  4062ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4062d2:	f003 0303 	and.w	r3, r3, #3
  4062d6:	2b01      	cmp	r3, #1
  4062d8:	d105      	bne.n	4062e6 <create_name+0x33e>
  4062da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4062de:	f043 0310 	orr.w	r3, r3, #16
  4062e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  4062e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4062ea:	f003 030c 	and.w	r3, r3, #12
  4062ee:	2b04      	cmp	r3, #4
  4062f0:	d105      	bne.n	4062fe <create_name+0x356>
  4062f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4062f6:	f043 0308 	orr.w	r3, r3, #8
  4062fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
  4062fe:	687b      	ldr	r3, [r7, #4]
  406300:	699b      	ldr	r3, [r3, #24]
  406302:	330b      	adds	r3, #11
  406304:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  406308:	701a      	strb	r2, [r3, #0]

	return FR_OK;
  40630a:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
  40630c:	4618      	mov	r0, r3
  40630e:	3728      	adds	r7, #40	; 0x28
  406310:	46bd      	mov	sp, r7
  406312:	bd80      	pop	{r7, pc}

00406314 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  406314:	b580      	push	{r7, lr}
  406316:	b084      	sub	sp, #16
  406318:	af00      	add	r7, sp, #0
  40631a:	6078      	str	r0, [r7, #4]
  40631c:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40631e:	683b      	ldr	r3, [r7, #0]
  406320:	781b      	ldrb	r3, [r3, #0]
  406322:	2b2f      	cmp	r3, #47	; 0x2f
  406324:	d003      	beq.n	40632e <follow_path+0x1a>
  406326:	683b      	ldr	r3, [r7, #0]
  406328:	781b      	ldrb	r3, [r3, #0]
  40632a:	2b5c      	cmp	r3, #92	; 0x5c
  40632c:	d102      	bne.n	406334 <follow_path+0x20>
		path++;
  40632e:	683b      	ldr	r3, [r7, #0]
  406330:	3301      	adds	r3, #1
  406332:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
  406334:	687b      	ldr	r3, [r7, #4]
  406336:	2200      	movs	r2, #0
  406338:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40633a:	683b      	ldr	r3, [r7, #0]
  40633c:	781b      	ldrb	r3, [r3, #0]
  40633e:	2b1f      	cmp	r3, #31
  406340:	d809      	bhi.n	406356 <follow_path+0x42>
		res = dir_sdi(dj, 0);
  406342:	6878      	ldr	r0, [r7, #4]
  406344:	2100      	movs	r1, #0
  406346:	4b2f      	ldr	r3, [pc, #188]	; (406404 <follow_path+0xf0>)
  406348:	4798      	blx	r3
  40634a:	4603      	mov	r3, r0
  40634c:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
  40634e:	687b      	ldr	r3, [r7, #4]
  406350:	2200      	movs	r2, #0
  406352:	615a      	str	r2, [r3, #20]
  406354:	e051      	b.n	4063fa <follow_path+0xe6>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
  406356:	463b      	mov	r3, r7
  406358:	6878      	ldr	r0, [r7, #4]
  40635a:	4619      	mov	r1, r3
  40635c:	4b2a      	ldr	r3, [pc, #168]	; (406408 <follow_path+0xf4>)
  40635e:	4798      	blx	r3
  406360:	4603      	mov	r3, r0
  406362:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  406364:	7bfb      	ldrb	r3, [r7, #15]
  406366:	2b00      	cmp	r3, #0
  406368:	d000      	beq.n	40636c <follow_path+0x58>
  40636a:	e046      	b.n	4063fa <follow_path+0xe6>
			res = dir_find(dj);				/* Find it */
  40636c:	6878      	ldr	r0, [r7, #4]
  40636e:	4b27      	ldr	r3, [pc, #156]	; (40640c <follow_path+0xf8>)
  406370:	4798      	blx	r3
  406372:	4603      	mov	r3, r0
  406374:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
  406376:	687b      	ldr	r3, [r7, #4]
  406378:	699b      	ldr	r3, [r3, #24]
  40637a:	7adb      	ldrb	r3, [r3, #11]
  40637c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
  40637e:	7bfb      	ldrb	r3, [r7, #15]
  406380:	2b00      	cmp	r3, #0
  406382:	d00c      	beq.n	40639e <follow_path+0x8a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  406384:	7bfb      	ldrb	r3, [r7, #15]
  406386:	2b04      	cmp	r3, #4
  406388:	d000      	beq.n	40638c <follow_path+0x78>
  40638a:	e036      	b.n	4063fa <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  40638c:	7bbb      	ldrb	r3, [r7, #14]
  40638e:	f003 0304 	and.w	r3, r3, #4
  406392:	2b00      	cmp	r3, #0
  406394:	d102      	bne.n	40639c <follow_path+0x88>
  406396:	2305      	movs	r3, #5
  406398:	73fb      	strb	r3, [r7, #15]
				}
				break;
  40639a:	e02e      	b.n	4063fa <follow_path+0xe6>
  40639c:	e02d      	b.n	4063fa <follow_path+0xe6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  40639e:	7bbb      	ldrb	r3, [r7, #14]
  4063a0:	f003 0304 	and.w	r3, r3, #4
  4063a4:	2b00      	cmp	r3, #0
  4063a6:	d000      	beq.n	4063aa <follow_path+0x96>
  4063a8:	e027      	b.n	4063fa <follow_path+0xe6>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4063aa:	687b      	ldr	r3, [r7, #4]
  4063ac:	695b      	ldr	r3, [r3, #20]
  4063ae:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4063b0:	68bb      	ldr	r3, [r7, #8]
  4063b2:	330b      	adds	r3, #11
  4063b4:	781b      	ldrb	r3, [r3, #0]
  4063b6:	f003 0310 	and.w	r3, r3, #16
  4063ba:	2b00      	cmp	r3, #0
  4063bc:	d102      	bne.n	4063c4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
  4063be:	2305      	movs	r3, #5
  4063c0:	73fb      	strb	r3, [r7, #15]
  4063c2:	e01a      	b.n	4063fa <follow_path+0xe6>
			}
			dj->sclust = LD_CLUST(dir);
  4063c4:	68bb      	ldr	r3, [r7, #8]
  4063c6:	3315      	adds	r3, #21
  4063c8:	781b      	ldrb	r3, [r3, #0]
  4063ca:	021b      	lsls	r3, r3, #8
  4063cc:	b29a      	uxth	r2, r3
  4063ce:	68bb      	ldr	r3, [r7, #8]
  4063d0:	3314      	adds	r3, #20
  4063d2:	781b      	ldrb	r3, [r3, #0]
  4063d4:	4313      	orrs	r3, r2
  4063d6:	b29b      	uxth	r3, r3
  4063d8:	b29b      	uxth	r3, r3
  4063da:	041a      	lsls	r2, r3, #16
  4063dc:	68bb      	ldr	r3, [r7, #8]
  4063de:	331b      	adds	r3, #27
  4063e0:	781b      	ldrb	r3, [r3, #0]
  4063e2:	021b      	lsls	r3, r3, #8
  4063e4:	b299      	uxth	r1, r3
  4063e6:	68bb      	ldr	r3, [r7, #8]
  4063e8:	331a      	adds	r3, #26
  4063ea:	781b      	ldrb	r3, [r3, #0]
  4063ec:	430b      	orrs	r3, r1
  4063ee:	b29b      	uxth	r3, r3
  4063f0:	b29b      	uxth	r3, r3
  4063f2:	431a      	orrs	r2, r3
  4063f4:	687b      	ldr	r3, [r7, #4]
  4063f6:	609a      	str	r2, [r3, #8]
		}
  4063f8:	e7ad      	b.n	406356 <follow_path+0x42>
	}

	return res;
  4063fa:	7bfb      	ldrb	r3, [r7, #15]
}
  4063fc:	4618      	mov	r0, r3
  4063fe:	3710      	adds	r7, #16
  406400:	46bd      	mov	sp, r7
  406402:	bd80      	pop	{r7, pc}
  406404:	00405609 	.word	0x00405609
  406408:	00405fa9 	.word	0x00405fa9
  40640c:	00405bb1 	.word	0x00405bb1

00406410 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  406410:	b590      	push	{r4, r7, lr}
  406412:	b083      	sub	sp, #12
  406414:	af00      	add	r7, sp, #0
  406416:	6078      	str	r0, [r7, #4]
  406418:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  40641a:	687b      	ldr	r3, [r7, #4]
  40641c:	785a      	ldrb	r2, [r3, #1]
  40641e:	687b      	ldr	r3, [r7, #4]
  406420:	3330      	adds	r3, #48	; 0x30
  406422:	4610      	mov	r0, r2
  406424:	4619      	mov	r1, r3
  406426:	683a      	ldr	r2, [r7, #0]
  406428:	2301      	movs	r3, #1
  40642a:	4c27      	ldr	r4, [pc, #156]	; (4064c8 <check_fs+0xb8>)
  40642c:	47a0      	blx	r4
  40642e:	4603      	mov	r3, r0
  406430:	2b00      	cmp	r3, #0
  406432:	d001      	beq.n	406438 <check_fs+0x28>
		return 3;
  406434:	2303      	movs	r3, #3
  406436:	e042      	b.n	4064be <check_fs+0xae>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  406438:	687b      	ldr	r3, [r7, #4]
  40643a:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  40643e:	021b      	lsls	r3, r3, #8
  406440:	b29a      	uxth	r2, r3
  406442:	687b      	ldr	r3, [r7, #4]
  406444:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  406448:	4313      	orrs	r3, r2
  40644a:	b29b      	uxth	r3, r3
  40644c:	b21a      	sxth	r2, r3
  40644e:	4b1f      	ldr	r3, [pc, #124]	; (4064cc <check_fs+0xbc>)
  406450:	429a      	cmp	r2, r3
  406452:	d001      	beq.n	406458 <check_fs+0x48>
		return 2;
  406454:	2302      	movs	r3, #2
  406456:	e032      	b.n	4064be <check_fs+0xae>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  406458:	687b      	ldr	r3, [r7, #4]
  40645a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
  40645e:	061a      	lsls	r2, r3, #24
  406460:	687b      	ldr	r3, [r7, #4]
  406462:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
  406466:	041b      	lsls	r3, r3, #16
  406468:	431a      	orrs	r2, r3
  40646a:	687b      	ldr	r3, [r7, #4]
  40646c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
  406470:	021b      	lsls	r3, r3, #8
  406472:	431a      	orrs	r2, r3
  406474:	687b      	ldr	r3, [r7, #4]
  406476:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
  40647a:	4313      	orrs	r3, r2
  40647c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  406480:	4b13      	ldr	r3, [pc, #76]	; (4064d0 <check_fs+0xc0>)
  406482:	429a      	cmp	r2, r3
  406484:	d101      	bne.n	40648a <check_fs+0x7a>
		return 0;
  406486:	2300      	movs	r3, #0
  406488:	e019      	b.n	4064be <check_fs+0xae>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  40648a:	687b      	ldr	r3, [r7, #4]
  40648c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
  406490:	061a      	lsls	r2, r3, #24
  406492:	687b      	ldr	r3, [r7, #4]
  406494:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
  406498:	041b      	lsls	r3, r3, #16
  40649a:	431a      	orrs	r2, r3
  40649c:	687b      	ldr	r3, [r7, #4]
  40649e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
  4064a2:	021b      	lsls	r3, r3, #8
  4064a4:	431a      	orrs	r2, r3
  4064a6:	687b      	ldr	r3, [r7, #4]
  4064a8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
  4064ac:	4313      	orrs	r3, r2
  4064ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4064b2:	4b07      	ldr	r3, [pc, #28]	; (4064d0 <check_fs+0xc0>)
  4064b4:	429a      	cmp	r2, r3
  4064b6:	d101      	bne.n	4064bc <check_fs+0xac>
		return 0;
  4064b8:	2300      	movs	r3, #0
  4064ba:	e000      	b.n	4064be <check_fs+0xae>

	return 1;
  4064bc:	2301      	movs	r3, #1
}
  4064be:	4618      	mov	r0, r3
  4064c0:	370c      	adds	r7, #12
  4064c2:	46bd      	mov	sp, r7
  4064c4:	bd90      	pop	{r4, r7, pc}
  4064c6:	bf00      	nop
  4064c8:	004047c9 	.word	0x004047c9
  4064cc:	ffffaa55 	.word	0xffffaa55
  4064d0:	00544146 	.word	0x00544146

004064d4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  4064d4:	b590      	push	{r4, r7, lr}
  4064d6:	b093      	sub	sp, #76	; 0x4c
  4064d8:	af00      	add	r7, sp, #0
  4064da:	60f8      	str	r0, [r7, #12]
  4064dc:	60b9      	str	r1, [r7, #8]
  4064de:	4613      	mov	r3, r2
  4064e0:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  4064e2:	68fb      	ldr	r3, [r7, #12]
  4064e4:	681b      	ldr	r3, [r3, #0]
  4064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  4064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4064ea:	781b      	ldrb	r3, [r3, #0]
  4064ec:	3b30      	subs	r3, #48	; 0x30
  4064ee:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  4064f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4064f2:	2b09      	cmp	r3, #9
  4064f4:	d80b      	bhi.n	40650e <chk_mounted+0x3a>
  4064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4064f8:	3301      	adds	r3, #1
  4064fa:	781b      	ldrb	r3, [r3, #0]
  4064fc:	2b3a      	cmp	r3, #58	; 0x3a
  4064fe:	d106      	bne.n	40650e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
  406500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  406502:	3302      	adds	r3, #2
  406504:	62fb      	str	r3, [r7, #44]	; 0x2c
  406506:	68fb      	ldr	r3, [r7, #12]
  406508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40650a:	601a      	str	r2, [r3, #0]
  40650c:	e001      	b.n	406512 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
  40650e:	2300      	movs	r3, #0
  406510:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  406512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  406514:	2b00      	cmp	r3, #0
  406516:	d001      	beq.n	40651c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
  406518:	230b      	movs	r3, #11
  40651a:	e277      	b.n	406a0c <chk_mounted+0x538>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  40651c:	4ba6      	ldr	r3, [pc, #664]	; (4067b8 <chk_mounted+0x2e4>)
  40651e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  406520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406524:	62bb      	str	r3, [r7, #40]	; 0x28
  406526:	68bb      	ldr	r3, [r7, #8]
  406528:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40652a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  40652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40652e:	2b00      	cmp	r3, #0
  406530:	d101      	bne.n	406536 <chk_mounted+0x62>
  406532:	230c      	movs	r3, #12
  406534:	e26a      	b.n	406a0c <chk_mounted+0x538>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  406536:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406538:	781b      	ldrb	r3, [r3, #0]
  40653a:	2b00      	cmp	r3, #0
  40653c:	d01a      	beq.n	406574 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
  40653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406540:	785b      	ldrb	r3, [r3, #1]
  406542:	4618      	mov	r0, r3
  406544:	4b9d      	ldr	r3, [pc, #628]	; (4067bc <chk_mounted+0x2e8>)
  406546:	4798      	blx	r3
  406548:	4603      	mov	r3, r0
  40654a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  40654e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406552:	f003 0301 	and.w	r3, r3, #1
  406556:	2b00      	cmp	r3, #0
  406558:	d10c      	bne.n	406574 <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  40655a:	79fb      	ldrb	r3, [r7, #7]
  40655c:	2b00      	cmp	r3, #0
  40655e:	d007      	beq.n	406570 <chk_mounted+0x9c>
  406560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406564:	f003 0304 	and.w	r3, r3, #4
  406568:	2b00      	cmp	r3, #0
  40656a:	d001      	beq.n	406570 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
  40656c:	230a      	movs	r3, #10
  40656e:	e24d      	b.n	406a0c <chk_mounted+0x538>
			return FR_OK;				/* The file system object is valid */
  406570:	2300      	movs	r3, #0
  406572:	e24b      	b.n	406a0c <chk_mounted+0x538>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  406574:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406576:	2200      	movs	r2, #0
  406578:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  40657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40657c:	b2da      	uxtb	r2, r3
  40657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406580:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  406582:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406584:	785b      	ldrb	r3, [r3, #1]
  406586:	4618      	mov	r0, r3
  406588:	4b8d      	ldr	r3, [pc, #564]	; (4067c0 <chk_mounted+0x2ec>)
  40658a:	4798      	blx	r3
  40658c:	4603      	mov	r3, r0
  40658e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  406592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406596:	f003 0301 	and.w	r3, r3, #1
  40659a:	2b00      	cmp	r3, #0
  40659c:	d001      	beq.n	4065a2 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  40659e:	2303      	movs	r3, #3
  4065a0:	e234      	b.n	406a0c <chk_mounted+0x538>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4065a2:	79fb      	ldrb	r3, [r7, #7]
  4065a4:	2b00      	cmp	r3, #0
  4065a6:	d007      	beq.n	4065b8 <chk_mounted+0xe4>
  4065a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4065ac:	f003 0304 	and.w	r3, r3, #4
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	d001      	beq.n	4065b8 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
  4065b4:	230a      	movs	r3, #10
  4065b6:	e229      	b.n	406a0c <chk_mounted+0x538>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4065b8:	2300      	movs	r3, #0
  4065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  4065bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4065be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  4065c0:	4b80      	ldr	r3, [pc, #512]	; (4067c4 <chk_mounted+0x2f0>)
  4065c2:	4798      	blx	r3
  4065c4:	4603      	mov	r3, r0
  4065c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  4065ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4065ce:	2b01      	cmp	r3, #1
  4065d0:	d133      	bne.n	40663a <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
  4065d2:	2300      	movs	r3, #0
  4065d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
  4065d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4065dc:	2b00      	cmp	r3, #0
  4065de:	d004      	beq.n	4065ea <chk_mounted+0x116>
  4065e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4065e4:	3b01      	subs	r3, #1
  4065e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  4065ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4065ee:	011b      	lsls	r3, r3, #4
  4065f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  4065f4:	3330      	adds	r3, #48	; 0x30
  4065f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4065f8:	4413      	add	r3, r2
  4065fa:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
  4065fc:	6a3b      	ldr	r3, [r7, #32]
  4065fe:	3304      	adds	r3, #4
  406600:	781b      	ldrb	r3, [r3, #0]
  406602:	2b00      	cmp	r3, #0
  406604:	d019      	beq.n	40663a <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  406606:	6a3b      	ldr	r3, [r7, #32]
  406608:	330b      	adds	r3, #11
  40660a:	781b      	ldrb	r3, [r3, #0]
  40660c:	061a      	lsls	r2, r3, #24
  40660e:	6a3b      	ldr	r3, [r7, #32]
  406610:	330a      	adds	r3, #10
  406612:	781b      	ldrb	r3, [r3, #0]
  406614:	041b      	lsls	r3, r3, #16
  406616:	431a      	orrs	r2, r3
  406618:	6a3b      	ldr	r3, [r7, #32]
  40661a:	3309      	adds	r3, #9
  40661c:	781b      	ldrb	r3, [r3, #0]
  40661e:	021b      	lsls	r3, r3, #8
  406620:	431a      	orrs	r2, r3
  406622:	6a3b      	ldr	r3, [r7, #32]
  406624:	3308      	adds	r3, #8
  406626:	781b      	ldrb	r3, [r3, #0]
  406628:	4313      	orrs	r3, r2
  40662a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
  40662c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40662e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  406630:	4b64      	ldr	r3, [pc, #400]	; (4067c4 <chk_mounted+0x2f0>)
  406632:	4798      	blx	r3
  406634:	4603      	mov	r3, r0
  406636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  40663a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40663e:	2b03      	cmp	r3, #3
  406640:	d101      	bne.n	406646 <chk_mounted+0x172>
  406642:	2301      	movs	r3, #1
  406644:	e1e2      	b.n	406a0c <chk_mounted+0x538>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  406646:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40664a:	2b00      	cmp	r3, #0
  40664c:	d001      	beq.n	406652 <chk_mounted+0x17e>
  40664e:	230d      	movs	r3, #13
  406650:	e1dc      	b.n	406a0c <chk_mounted+0x538>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  406652:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  406658:	021b      	lsls	r3, r3, #8
  40665a:	b29a      	uxth	r2, r3
  40665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40665e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  406662:	4313      	orrs	r3, r2
  406664:	b29b      	uxth	r3, r3
  406666:	b21b      	sxth	r3, r3
  406668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40666c:	d001      	beq.n	406672 <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
  40666e:	230d      	movs	r3, #13
  406670:	e1cc      	b.n	406a0c <chk_mounted+0x538>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  406672:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406674:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  406678:	021b      	lsls	r3, r3, #8
  40667a:	b29a      	uxth	r2, r3
  40667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40667e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  406682:	4313      	orrs	r3, r2
  406684:	b29b      	uxth	r3, r3
  406686:	b29b      	uxth	r3, r3
  406688:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40668c:	2b00      	cmp	r3, #0
  40668e:	d112      	bne.n	4066b6 <chk_mounted+0x1e2>
  406690:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406692:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
  406696:	061a      	lsls	r2, r3, #24
  406698:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40669a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
  40669e:	041b      	lsls	r3, r3, #16
  4066a0:	431a      	orrs	r2, r3
  4066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
  4066a8:	021b      	lsls	r3, r3, #8
  4066aa:	431a      	orrs	r2, r3
  4066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
  4066b2:	4313      	orrs	r3, r2
  4066b4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
  4066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
  4066ba:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  4066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  4066c2:	77fb      	strb	r3, [r7, #31]
  4066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066c6:	7ffa      	ldrb	r2, [r7, #31]
  4066c8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4066ca:	7ffb      	ldrb	r3, [r7, #31]
  4066cc:	2b01      	cmp	r3, #1
  4066ce:	d004      	beq.n	4066da <chk_mounted+0x206>
  4066d0:	7ffb      	ldrb	r3, [r7, #31]
  4066d2:	2b02      	cmp	r3, #2
  4066d4:	d001      	beq.n	4066da <chk_mounted+0x206>
  4066d6:	230d      	movs	r3, #13
  4066d8:	e198      	b.n	406a0c <chk_mounted+0x538>
	fasize *= b;										/* Number of sectors for FAT area */
  4066da:	7ffa      	ldrb	r2, [r7, #31]
  4066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4066de:	fb02 f303 	mul.w	r3, r2, r3
  4066e2:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  4066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
  4066ea:	77fb      	strb	r3, [r7, #31]
  4066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4066ee:	7ffa      	ldrb	r2, [r7, #31]
  4066f0:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4066f2:	7ffb      	ldrb	r3, [r7, #31]
  4066f4:	2b00      	cmp	r3, #0
  4066f6:	d005      	beq.n	406704 <chk_mounted+0x230>
  4066f8:	7ffa      	ldrb	r2, [r7, #31]
  4066fa:	7ffb      	ldrb	r3, [r7, #31]
  4066fc:	3b01      	subs	r3, #1
  4066fe:	4013      	ands	r3, r2
  406700:	2b00      	cmp	r3, #0
  406702:	d001      	beq.n	406708 <chk_mounted+0x234>
  406704:	230d      	movs	r3, #13
  406706:	e181      	b.n	406a0c <chk_mounted+0x538>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  406708:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40670a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  40670e:	021b      	lsls	r3, r3, #8
  406710:	b29a      	uxth	r2, r3
  406712:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  406718:	4313      	orrs	r3, r2
  40671a:	b29b      	uxth	r3, r3
  40671c:	b29a      	uxth	r2, r3
  40671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406720:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  406722:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406724:	891b      	ldrh	r3, [r3, #8]
  406726:	f003 030f 	and.w	r3, r3, #15
  40672a:	b29b      	uxth	r3, r3
  40672c:	2b00      	cmp	r3, #0
  40672e:	d001      	beq.n	406734 <chk_mounted+0x260>
  406730:	230d      	movs	r3, #13
  406732:	e16b      	b.n	406a0c <chk_mounted+0x538>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  406734:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40673a:	021b      	lsls	r3, r3, #8
  40673c:	b29a      	uxth	r2, r3
  40673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406740:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  406744:	4313      	orrs	r3, r2
  406746:	b29b      	uxth	r3, r3
  406748:	b29b      	uxth	r3, r3
  40674a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  40674c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40674e:	2b00      	cmp	r3, #0
  406750:	d112      	bne.n	406778 <chk_mounted+0x2a4>
  406752:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406754:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
  406758:	061a      	lsls	r2, r3, #24
  40675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40675c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
  406760:	041b      	lsls	r3, r3, #16
  406762:	431a      	orrs	r2, r3
  406764:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
  40676a:	021b      	lsls	r3, r3, #8
  40676c:	431a      	orrs	r2, r3
  40676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406770:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  406774:	4313      	orrs	r3, r2
  406776:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  406778:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40677a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  40677e:	021b      	lsls	r3, r3, #8
  406780:	b29a      	uxth	r2, r3
  406782:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  406788:	4313      	orrs	r3, r2
  40678a:	b29b      	uxth	r3, r3
  40678c:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40678e:	8bbb      	ldrh	r3, [r7, #28]
  406790:	2b00      	cmp	r3, #0
  406792:	d101      	bne.n	406798 <chk_mounted+0x2c4>
  406794:	230d      	movs	r3, #13
  406796:	e139      	b.n	406a0c <chk_mounted+0x538>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  406798:	8bba      	ldrh	r2, [r7, #28]
  40679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40679c:	441a      	add	r2, r3
  40679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4067a0:	891b      	ldrh	r3, [r3, #8]
  4067a2:	091b      	lsrs	r3, r3, #4
  4067a4:	b29b      	uxth	r3, r3
  4067a6:	4413      	add	r3, r2
  4067a8:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4067aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4067ac:	69bb      	ldr	r3, [r7, #24]
  4067ae:	429a      	cmp	r2, r3
  4067b0:	d20a      	bcs.n	4067c8 <chk_mounted+0x2f4>
  4067b2:	230d      	movs	r3, #13
  4067b4:	e12a      	b.n	406a0c <chk_mounted+0x538>
  4067b6:	bf00      	nop
  4067b8:	2000171c 	.word	0x2000171c
  4067bc:	00404795 	.word	0x00404795
  4067c0:	0040471d 	.word	0x0040471d
  4067c4:	00406411 	.word	0x00406411
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  4067c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4067ca:	69bb      	ldr	r3, [r7, #24]
  4067cc:	1ad2      	subs	r2, r2, r3
  4067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4067d0:	789b      	ldrb	r3, [r3, #2]
  4067d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4067d6:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4067d8:	697b      	ldr	r3, [r7, #20]
  4067da:	2b00      	cmp	r3, #0
  4067dc:	d101      	bne.n	4067e2 <chk_mounted+0x30e>
  4067de:	230d      	movs	r3, #13
  4067e0:	e114      	b.n	406a0c <chk_mounted+0x538>
	fmt = FS_FAT12;
  4067e2:	2301      	movs	r3, #1
  4067e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  4067e8:	697a      	ldr	r2, [r7, #20]
  4067ea:	f640 73f5 	movw	r3, #4085	; 0xff5
  4067ee:	429a      	cmp	r2, r3
  4067f0:	d902      	bls.n	4067f8 <chk_mounted+0x324>
  4067f2:	2302      	movs	r3, #2
  4067f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  4067f8:	697a      	ldr	r2, [r7, #20]
  4067fa:	f64f 73f5 	movw	r3, #65525	; 0xfff5
  4067fe:	429a      	cmp	r2, r3
  406800:	d902      	bls.n	406808 <chk_mounted+0x334>
  406802:	2303      	movs	r3, #3
  406804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  406808:	697b      	ldr	r3, [r7, #20]
  40680a:	1c9a      	adds	r2, r3, #2
  40680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40680e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  406810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  406812:	69bb      	ldr	r3, [r7, #24]
  406814:	441a      	add	r2, r3
  406816:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406818:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40681a:	8bba      	ldrh	r2, [r7, #28]
  40681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40681e:	441a      	add	r2, r3
  406820:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406822:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
  406824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  406828:	2b03      	cmp	r3, #3
  40682a:	d11e      	bne.n	40686a <chk_mounted+0x396>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  40682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40682e:	891b      	ldrh	r3, [r3, #8]
  406830:	2b00      	cmp	r3, #0
  406832:	d001      	beq.n	406838 <chk_mounted+0x364>
  406834:	230d      	movs	r3, #13
  406836:	e0e9      	b.n	406a0c <chk_mounted+0x538>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  406838:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40683a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
  40683e:	061a      	lsls	r2, r3, #24
  406840:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406842:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
  406846:	041b      	lsls	r3, r3, #16
  406848:	431a      	orrs	r2, r3
  40684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40684c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
  406850:	021b      	lsls	r3, r3, #8
  406852:	431a      	orrs	r2, r3
  406854:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  40685a:	431a      	orrs	r2, r3
  40685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40685e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  406860:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406862:	699b      	ldr	r3, [r3, #24]
  406864:	009b      	lsls	r3, r3, #2
  406866:	633b      	str	r3, [r7, #48]	; 0x30
  406868:	e01f      	b.n	4068aa <chk_mounted+0x3d6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40686c:	891b      	ldrh	r3, [r3, #8]
  40686e:	2b00      	cmp	r3, #0
  406870:	d101      	bne.n	406876 <chk_mounted+0x3a2>
  406872:	230d      	movs	r3, #13
  406874:	e0ca      	b.n	406a0c <chk_mounted+0x538>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  406876:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406878:	6a1a      	ldr	r2, [r3, #32]
  40687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40687c:	441a      	add	r2, r3
  40687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406880:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  406882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  406886:	2b02      	cmp	r3, #2
  406888:	d103      	bne.n	406892 <chk_mounted+0x3be>
  40688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40688c:	699b      	ldr	r3, [r3, #24]
  40688e:	005b      	lsls	r3, r3, #1
  406890:	e00a      	b.n	4068a8 <chk_mounted+0x3d4>
  406892:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406894:	699a      	ldr	r2, [r3, #24]
  406896:	4613      	mov	r3, r2
  406898:	005b      	lsls	r3, r3, #1
  40689a:	4413      	add	r3, r2
  40689c:	085a      	lsrs	r2, r3, #1
  40689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068a0:	699b      	ldr	r3, [r3, #24]
  4068a2:	f003 0301 	and.w	r3, r3, #1
  4068a6:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
  4068a8:	633b      	str	r3, [r7, #48]	; 0x30
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068ac:	69da      	ldr	r2, [r3, #28]
  4068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4068b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4068b4:	0a5b      	lsrs	r3, r3, #9
  4068b6:	429a      	cmp	r2, r3
  4068b8:	d201      	bcs.n	4068be <chk_mounted+0x3ea>
		return FR_NO_FILESYSTEM;
  4068ba:	230d      	movs	r3, #13
  4068bc:	e0a6      	b.n	406a0c <chk_mounted+0x538>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  4068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068c0:	f04f 32ff 	mov.w	r2, #4294967295
  4068c4:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
  4068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068c8:	2200      	movs	r2, #0
  4068ca:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  4068cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4068d0:	2b03      	cmp	r3, #3
  4068d2:	f040 8083 	bne.w	4069dc <chk_mounted+0x508>
	 	fs->fsi_flag = 0;
  4068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068d8:	2200      	movs	r2, #0
  4068da:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068de:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  4068e2:	021b      	lsls	r3, r3, #8
  4068e4:	b29a      	uxth	r2, r3
  4068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  4068ec:	4313      	orrs	r3, r2
  4068ee:	b29b      	uxth	r3, r3
  4068f0:	b29b      	uxth	r3, r3
  4068f2:	461a      	mov	r2, r3
  4068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4068f6:	441a      	add	r2, r3
  4068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068fa:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4068fe:	7859      	ldrb	r1, [r3, #1]
  406900:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406902:	f103 0230 	add.w	r2, r3, #48	; 0x30
  406906:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406908:	695b      	ldr	r3, [r3, #20]
  40690a:	4608      	mov	r0, r1
  40690c:	4611      	mov	r1, r2
  40690e:	461a      	mov	r2, r3
  406910:	2301      	movs	r3, #1
  406912:	4c40      	ldr	r4, [pc, #256]	; (406a14 <chk_mounted+0x540>)
  406914:	47a0      	blx	r4
  406916:	4603      	mov	r3, r0
  406918:	2b00      	cmp	r3, #0
  40691a:	d15f      	bne.n	4069dc <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40691e:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  406922:	021b      	lsls	r3, r3, #8
  406924:	b29a      	uxth	r2, r3
  406926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406928:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  40692c:	4313      	orrs	r3, r2
  40692e:	b29b      	uxth	r3, r3

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  406930:	b21a      	sxth	r2, r3
  406932:	4b39      	ldr	r3, [pc, #228]	; (406a18 <chk_mounted+0x544>)
  406934:	429a      	cmp	r2, r3
  406936:	d151      	bne.n	4069dc <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  406938:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40693a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  40693e:	061a      	lsls	r2, r3, #24
  406940:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406942:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  406946:	041b      	lsls	r3, r3, #16
  406948:	431a      	orrs	r2, r3
  40694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40694c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  406950:	021b      	lsls	r3, r3, #8
  406952:	431a      	orrs	r2, r3
  406954:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40695a:	431a      	orrs	r2, r3
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40695c:	4b2f      	ldr	r3, [pc, #188]	; (406a1c <chk_mounted+0x548>)
  40695e:	429a      	cmp	r2, r3
  406960:	d13c      	bne.n	4069dc <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  406962:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406964:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
  406968:	061a      	lsls	r2, r3, #24
  40696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40696c:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
  406970:	041b      	lsls	r3, r3, #16
  406972:	431a      	orrs	r2, r3
  406974:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406976:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
  40697a:	021b      	lsls	r3, r3, #8
  40697c:	431a      	orrs	r2, r3
  40697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406980:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
  406984:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  406986:	4b26      	ldr	r3, [pc, #152]	; (406a20 <chk_mounted+0x54c>)
  406988:	429a      	cmp	r2, r3
  40698a:	d127      	bne.n	4069dc <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  40698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40698e:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
  406992:	061a      	lsls	r2, r3, #24
  406994:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406996:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
  40699a:	041b      	lsls	r3, r3, #16
  40699c:	431a      	orrs	r2, r3
  40699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069a0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
  4069a4:	021b      	lsls	r3, r3, #8
  4069a6:	431a      	orrs	r2, r3
  4069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069aa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
  4069ae:	431a      	orrs	r2, r3
  4069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069b2:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069b6:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
  4069ba:	061a      	lsls	r2, r3, #24
  4069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069be:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
  4069c2:	041b      	lsls	r3, r3, #16
  4069c4:	431a      	orrs	r2, r3
  4069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069c8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
  4069cc:	021b      	lsls	r3, r3, #8
  4069ce:	431a      	orrs	r2, r3
  4069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069d2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
  4069d6:	431a      	orrs	r2, r3
  4069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069da:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  4069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069de:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  4069e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  4069e4:	4b0f      	ldr	r3, [pc, #60]	; (406a24 <chk_mounted+0x550>)
  4069e6:	881b      	ldrh	r3, [r3, #0]
  4069e8:	3301      	adds	r3, #1
  4069ea:	b29a      	uxth	r2, r3
  4069ec:	4b0d      	ldr	r3, [pc, #52]	; (406a24 <chk_mounted+0x550>)
  4069ee:	801a      	strh	r2, [r3, #0]
  4069f0:	4b0c      	ldr	r3, [pc, #48]	; (406a24 <chk_mounted+0x550>)
  4069f2:	881a      	ldrh	r2, [r3, #0]
  4069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069f6:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  4069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4069fa:	2200      	movs	r2, #0
  4069fc:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
  4069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406a00:	2200      	movs	r2, #0
  406a02:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
  406a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  406a06:	4b08      	ldr	r3, [pc, #32]	; (406a28 <chk_mounted+0x554>)
  406a08:	4798      	blx	r3
#endif

	return FR_OK;
  406a0a:	2300      	movs	r3, #0
}
  406a0c:	4618      	mov	r0, r3
  406a0e:	374c      	adds	r7, #76	; 0x4c
  406a10:	46bd      	mov	sp, r7
  406a12:	bd90      	pop	{r4, r7, pc}
  406a14:	004047c9 	.word	0x004047c9
  406a18:	ffffaa55 	.word	0xffffaa55
  406a1c:	41615252 	.word	0x41615252
  406a20:	61417272 	.word	0x61417272
  406a24:	20001720 	.word	0x20001720
  406a28:	00404e49 	.word	0x00404e49

00406a2c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  406a2c:	b580      	push	{r7, lr}
  406a2e:	b082      	sub	sp, #8
  406a30:	af00      	add	r7, sp, #0
  406a32:	6078      	str	r0, [r7, #4]
  406a34:	460b      	mov	r3, r1
  406a36:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
  406a38:	687b      	ldr	r3, [r7, #4]
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	d008      	beq.n	406a50 <validate+0x24>
  406a3e:	687b      	ldr	r3, [r7, #4]
  406a40:	781b      	ldrb	r3, [r3, #0]
  406a42:	2b00      	cmp	r3, #0
  406a44:	d004      	beq.n	406a50 <validate+0x24>
  406a46:	687b      	ldr	r3, [r7, #4]
  406a48:	88db      	ldrh	r3, [r3, #6]
  406a4a:	887a      	ldrh	r2, [r7, #2]
  406a4c:	429a      	cmp	r2, r3
  406a4e:	d001      	beq.n	406a54 <validate+0x28>
		return FR_INVALID_OBJECT;
  406a50:	2309      	movs	r3, #9
  406a52:	e00c      	b.n	406a6e <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  406a54:	687b      	ldr	r3, [r7, #4]
  406a56:	785b      	ldrb	r3, [r3, #1]
  406a58:	4618      	mov	r0, r3
  406a5a:	4b07      	ldr	r3, [pc, #28]	; (406a78 <validate+0x4c>)
  406a5c:	4798      	blx	r3
  406a5e:	4603      	mov	r3, r0
  406a60:	f003 0301 	and.w	r3, r3, #1
  406a64:	2b00      	cmp	r3, #0
  406a66:	d001      	beq.n	406a6c <validate+0x40>
		return FR_NOT_READY;
  406a68:	2303      	movs	r3, #3
  406a6a:	e000      	b.n	406a6e <validate+0x42>

	return FR_OK;
  406a6c:	2300      	movs	r3, #0
}
  406a6e:	4618      	mov	r0, r3
  406a70:	3708      	adds	r7, #8
  406a72:	46bd      	mov	sp, r7
  406a74:	bd80      	pop	{r7, pc}
  406a76:	bf00      	nop
  406a78:	00404795 	.word	0x00404795

00406a7c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  406a7c:	b580      	push	{r7, lr}
  406a7e:	b084      	sub	sp, #16
  406a80:	af00      	add	r7, sp, #0
  406a82:	4603      	mov	r3, r0
  406a84:	6039      	str	r1, [r7, #0]
  406a86:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  406a88:	79fb      	ldrb	r3, [r7, #7]
  406a8a:	2b00      	cmp	r3, #0
  406a8c:	d001      	beq.n	406a92 <f_mount+0x16>
		return FR_INVALID_DRIVE;
  406a8e:	230b      	movs	r3, #11
  406a90:	e019      	b.n	406ac6 <f_mount+0x4a>
	rfs = FatFs[vol];			/* Get current fs object */
  406a92:	79fa      	ldrb	r2, [r7, #7]
  406a94:	4b0e      	ldr	r3, [pc, #56]	; (406ad0 <f_mount+0x54>)
  406a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406a9a:	60fb      	str	r3, [r7, #12]

	if (rfs) {
  406a9c:	68fb      	ldr	r3, [r7, #12]
  406a9e:	2b00      	cmp	r3, #0
  406aa0:	d005      	beq.n	406aae <f_mount+0x32>
#if _FS_SHARE
		clear_lock(rfs);
  406aa2:	68f8      	ldr	r0, [r7, #12]
  406aa4:	4b0b      	ldr	r3, [pc, #44]	; (406ad4 <f_mount+0x58>)
  406aa6:	4798      	blx	r3
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  406aa8:	68fb      	ldr	r3, [r7, #12]
  406aaa:	2200      	movs	r2, #0
  406aac:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  406aae:	683b      	ldr	r3, [r7, #0]
  406ab0:	2b00      	cmp	r3, #0
  406ab2:	d002      	beq.n	406aba <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
  406ab4:	683b      	ldr	r3, [r7, #0]
  406ab6:	2200      	movs	r2, #0
  406ab8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  406aba:	79fa      	ldrb	r2, [r7, #7]
  406abc:	4b04      	ldr	r3, [pc, #16]	; (406ad0 <f_mount+0x54>)
  406abe:	6839      	ldr	r1, [r7, #0]
  406ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
  406ac4:	2300      	movs	r3, #0
}
  406ac6:	4618      	mov	r0, r3
  406ac8:	3710      	adds	r7, #16
  406aca:	46bd      	mov	sp, r7
  406acc:	bd80      	pop	{r7, pc}
  406ace:	bf00      	nop
  406ad0:	2000171c 	.word	0x2000171c
  406ad4:	00404e49 	.word	0x00404e49

00406ad8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  406ad8:	b580      	push	{r7, lr}
  406ada:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  406ade:	af00      	add	r7, sp, #0
  406ae0:	f107 030c 	add.w	r3, r7, #12
  406ae4:	6018      	str	r0, [r3, #0]
  406ae6:	f107 0308 	add.w	r3, r7, #8
  406aea:	6019      	str	r1, [r3, #0]
  406aec:	1dfb      	adds	r3, r7, #7
  406aee:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  406af0:	f107 030c 	add.w	r3, r7, #12
  406af4:	681b      	ldr	r3, [r3, #0]
  406af6:	2200      	movs	r2, #0
  406af8:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  406afa:	1dfb      	adds	r3, r7, #7
  406afc:	1dfa      	adds	r2, r7, #7
  406afe:	7812      	ldrb	r2, [r2, #0]
  406b00:	f002 021f 	and.w	r2, r2, #31
  406b04:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  406b06:	1dfb      	adds	r3, r7, #7
  406b08:	781b      	ldrb	r3, [r3, #0]
  406b0a:	f023 0301 	bic.w	r3, r3, #1
  406b0e:	b2db      	uxtb	r3, r3
  406b10:	f107 0108 	add.w	r1, r7, #8
  406b14:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  406b18:	4608      	mov	r0, r1
  406b1a:	4611      	mov	r1, r2
  406b1c:	461a      	mov	r2, r3
  406b1e:	4b9b      	ldr	r3, [pc, #620]	; (406d8c <f_open+0x2b4>)
  406b20:	4798      	blx	r3
  406b22:	4603      	mov	r3, r0
  406b24:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  406b28:	f507 7304 	add.w	r3, r7, #528	; 0x210
  406b2c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  406b30:	f107 0310 	add.w	r3, r7, #16
  406b34:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
  406b38:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406b3c:	2b00      	cmp	r3, #0
  406b3e:	d10b      	bne.n	406b58 <f_open+0x80>
		res = follow_path(&dj, path);	/* Follow the file path */
  406b40:	f107 0308 	add.w	r3, r7, #8
  406b44:	681b      	ldr	r3, [r3, #0]
  406b46:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  406b4a:	4610      	mov	r0, r2
  406b4c:	4619      	mov	r1, r3
  406b4e:	4b90      	ldr	r3, [pc, #576]	; (406d90 <f_open+0x2b8>)
  406b50:	4798      	blx	r3
  406b52:	4603      	mov	r3, r0
  406b54:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
  406b58:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  406b5c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  406b60:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406b64:	2b00      	cmp	r3, #0
  406b66:	d119      	bne.n	406b9c <f_open+0xc4>
		if (!dir)	/* Current dir itself */
  406b68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406b6c:	2b00      	cmp	r3, #0
  406b6e:	d103      	bne.n	406b78 <f_open+0xa0>
			res = FR_INVALID_NAME;
  406b70:	2306      	movs	r3, #6
  406b72:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  406b76:	e011      	b.n	406b9c <f_open+0xc4>
#if _FS_SHARE
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  406b78:	1dfb      	adds	r3, r7, #7
  406b7a:	781b      	ldrb	r3, [r3, #0]
  406b7c:	f023 0301 	bic.w	r3, r3, #1
  406b80:	2b00      	cmp	r3, #0
  406b82:	bf0c      	ite	eq
  406b84:	2300      	moveq	r3, #0
  406b86:	2301      	movne	r3, #1
  406b88:	b2db      	uxtb	r3, r3
  406b8a:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  406b8e:	4610      	mov	r0, r2
  406b90:	4619      	mov	r1, r3
  406b92:	4b80      	ldr	r3, [pc, #512]	; (406d94 <f_open+0x2bc>)
  406b94:	4798      	blx	r3
  406b96:	4603      	mov	r3, r0
  406b98:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406b9c:	1dfb      	adds	r3, r7, #7
  406b9e:	781b      	ldrb	r3, [r3, #0]
  406ba0:	f003 031c 	and.w	r3, r3, #28
  406ba4:	2b00      	cmp	r3, #0
  406ba6:	f000 80e0 	beq.w	406d6a <f_open+0x292>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  406baa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406bae:	2b00      	cmp	r3, #0
  406bb0:	d01d      	beq.n	406bee <f_open+0x116>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  406bb2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406bb6:	2b04      	cmp	r3, #4
  406bb8:	d10e      	bne.n	406bd8 <f_open+0x100>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
  406bba:	4b77      	ldr	r3, [pc, #476]	; (406d98 <f_open+0x2c0>)
  406bbc:	4798      	blx	r3
  406bbe:	4603      	mov	r3, r0
  406bc0:	2b00      	cmp	r3, #0
  406bc2:	d006      	beq.n	406bd2 <f_open+0xfa>
  406bc4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  406bc8:	4618      	mov	r0, r3
  406bca:	4b74      	ldr	r3, [pc, #464]	; (406d9c <f_open+0x2c4>)
  406bcc:	4798      	blx	r3
  406bce:	4603      	mov	r3, r0
  406bd0:	e000      	b.n	406bd4 <f_open+0xfc>
  406bd2:	2312      	movs	r3, #18
  406bd4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  406bd8:	1dfb      	adds	r3, r7, #7
  406bda:	1dfa      	adds	r2, r7, #7
  406bdc:	7812      	ldrb	r2, [r2, #0]
  406bde:	f042 0208 	orr.w	r2, r2, #8
  406be2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
  406be4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  406be8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  406bec:	e014      	b.n	406c18 <f_open+0x140>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  406bee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406bf2:	330b      	adds	r3, #11
  406bf4:	781b      	ldrb	r3, [r3, #0]
  406bf6:	f003 0311 	and.w	r3, r3, #17
  406bfa:	2b00      	cmp	r3, #0
  406bfc:	d003      	beq.n	406c06 <f_open+0x12e>
				res = FR_DENIED;
  406bfe:	2307      	movs	r3, #7
  406c00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  406c04:	e008      	b.n	406c18 <f_open+0x140>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  406c06:	1dfb      	adds	r3, r7, #7
  406c08:	781b      	ldrb	r3, [r3, #0]
  406c0a:	f003 0304 	and.w	r3, r3, #4
  406c0e:	2b00      	cmp	r3, #0
  406c10:	d002      	beq.n	406c18 <f_open+0x140>
					res = FR_EXIST;
  406c12:	2308      	movs	r3, #8
  406c14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  406c18:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406c1c:	2b00      	cmp	r3, #0
  406c1e:	f040 80a3 	bne.w	406d68 <f_open+0x290>
  406c22:	1dfb      	adds	r3, r7, #7
  406c24:	781b      	ldrb	r3, [r3, #0]
  406c26:	f003 0308 	and.w	r3, r3, #8
  406c2a:	2b00      	cmp	r3, #0
  406c2c:	f000 809c 	beq.w	406d68 <f_open+0x290>
			dw = get_fattime();					/* Created time */
  406c30:	4b5b      	ldr	r3, [pc, #364]	; (406da0 <f_open+0x2c8>)
  406c32:	4798      	blx	r3
  406c34:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
  406c38:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c3c:	330e      	adds	r3, #14
  406c3e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  406c42:	b2d2      	uxtb	r2, r2
  406c44:	701a      	strb	r2, [r3, #0]
  406c46:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c4a:	330f      	adds	r3, #15
  406c4c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  406c50:	b292      	uxth	r2, r2
  406c52:	0a12      	lsrs	r2, r2, #8
  406c54:	b292      	uxth	r2, r2
  406c56:	b2d2      	uxtb	r2, r2
  406c58:	701a      	strb	r2, [r3, #0]
  406c5a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c5e:	3310      	adds	r3, #16
  406c60:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  406c64:	0c12      	lsrs	r2, r2, #16
  406c66:	b2d2      	uxtb	r2, r2
  406c68:	701a      	strb	r2, [r3, #0]
  406c6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c6e:	3311      	adds	r3, #17
  406c70:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  406c74:	0e12      	lsrs	r2, r2, #24
  406c76:	b2d2      	uxtb	r2, r2
  406c78:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  406c7a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c7e:	330b      	adds	r3, #11
  406c80:	2200      	movs	r2, #0
  406c82:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  406c84:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c88:	331c      	adds	r3, #28
  406c8a:	2200      	movs	r2, #0
  406c8c:	701a      	strb	r2, [r3, #0]
  406c8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c92:	331d      	adds	r3, #29
  406c94:	2200      	movs	r2, #0
  406c96:	701a      	strb	r2, [r3, #0]
  406c98:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406c9c:	331e      	adds	r3, #30
  406c9e:	2200      	movs	r2, #0
  406ca0:	701a      	strb	r2, [r3, #0]
  406ca2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406ca6:	331f      	adds	r3, #31
  406ca8:	2200      	movs	r2, #0
  406caa:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
  406cac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406cb0:	3315      	adds	r3, #21
  406cb2:	781b      	ldrb	r3, [r3, #0]
  406cb4:	021b      	lsls	r3, r3, #8
  406cb6:	b29a      	uxth	r2, r3
  406cb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406cbc:	3314      	adds	r3, #20
  406cbe:	781b      	ldrb	r3, [r3, #0]
  406cc0:	4313      	orrs	r3, r2
  406cc2:	b29b      	uxth	r3, r3
  406cc4:	b29b      	uxth	r3, r3
  406cc6:	041a      	lsls	r2, r3, #16
  406cc8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406ccc:	331b      	adds	r3, #27
  406cce:	781b      	ldrb	r3, [r3, #0]
  406cd0:	021b      	lsls	r3, r3, #8
  406cd2:	b299      	uxth	r1, r3
  406cd4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406cd8:	331a      	adds	r3, #26
  406cda:	781b      	ldrb	r3, [r3, #0]
  406cdc:	430b      	orrs	r3, r1
  406cde:	b29b      	uxth	r3, r3
  406ce0:	b29b      	uxth	r3, r3
  406ce2:	4313      	orrs	r3, r2
  406ce4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
  406ce8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406cec:	331a      	adds	r3, #26
  406cee:	2200      	movs	r2, #0
  406cf0:	701a      	strb	r2, [r3, #0]
  406cf2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406cf6:	331b      	adds	r3, #27
  406cf8:	2200      	movs	r2, #0
  406cfa:	701a      	strb	r2, [r3, #0]
  406cfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406d00:	3314      	adds	r3, #20
  406d02:	2200      	movs	r2, #0
  406d04:	701a      	strb	r2, [r3, #0]
  406d06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406d0a:	3315      	adds	r3, #21
  406d0c:	2200      	movs	r2, #0
  406d0e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
  406d10:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406d14:	2201      	movs	r2, #1
  406d16:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  406d18:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  406d1c:	2b00      	cmp	r3, #0
  406d1e:	d023      	beq.n	406d68 <f_open+0x290>
				dw = dj.fs->winsect;
  406d20:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406d26:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
  406d2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406d2e:	4618      	mov	r0, r3
  406d30:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
  406d34:	4b1b      	ldr	r3, [pc, #108]	; (406da4 <f_open+0x2cc>)
  406d36:	4798      	blx	r3
  406d38:	4603      	mov	r3, r0
  406d3a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
  406d3e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406d42:	2b00      	cmp	r3, #0
  406d44:	d110      	bne.n	406d68 <f_open+0x290>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  406d46:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406d4a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  406d4e:	3a01      	subs	r2, #1
  406d50:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
  406d52:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406d56:	4618      	mov	r0, r3
  406d58:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
  406d5c:	4b12      	ldr	r3, [pc, #72]	; (406da8 <f_open+0x2d0>)
  406d5e:	4798      	blx	r3
  406d60:	4603      	mov	r3, r0
  406d62:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  406d66:	e032      	b.n	406dce <f_open+0x2f6>
  406d68:	e031      	b.n	406dce <f_open+0x2f6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  406d6a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406d6e:	2b00      	cmp	r3, #0
  406d70:	d12d      	bne.n	406dce <f_open+0x2f6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  406d72:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406d76:	330b      	adds	r3, #11
  406d78:	781b      	ldrb	r3, [r3, #0]
  406d7a:	f003 0310 	and.w	r3, r3, #16
  406d7e:	2b00      	cmp	r3, #0
  406d80:	d014      	beq.n	406dac <f_open+0x2d4>
				res = FR_NO_FILE;
  406d82:	2304      	movs	r3, #4
  406d84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  406d88:	e021      	b.n	406dce <f_open+0x2f6>
  406d8a:	bf00      	nop
  406d8c:	004064d5 	.word	0x004064d5
  406d90:	00406315 	.word	0x00406315
  406d94:	00404b49 	.word	0x00404b49
  406d98:	00404c1d 	.word	0x00404c1d
  406d9c:	00405d19 	.word	0x00405d19
  406da0:	004049e9 	.word	0x004049e9
  406da4:	00405445 	.word	0x00405445
  406da8:	00404e99 	.word	0x00404e99
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  406dac:	1dfb      	adds	r3, r7, #7
  406dae:	781b      	ldrb	r3, [r3, #0]
  406db0:	f003 0302 	and.w	r3, r3, #2
  406db4:	2b00      	cmp	r3, #0
  406db6:	d00a      	beq.n	406dce <f_open+0x2f6>
  406db8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406dbc:	330b      	adds	r3, #11
  406dbe:	781b      	ldrb	r3, [r3, #0]
  406dc0:	f003 0301 	and.w	r3, r3, #1
  406dc4:	2b00      	cmp	r3, #0
  406dc6:	d002      	beq.n	406dce <f_open+0x2f6>
					res = FR_DENIED;
  406dc8:	2307      	movs	r3, #7
  406dca:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
  406dce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406dd2:	2b00      	cmp	r3, #0
  406dd4:	d135      	bne.n	406e42 <f_open+0x36a>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  406dd6:	1dfb      	adds	r3, r7, #7
  406dd8:	781b      	ldrb	r3, [r3, #0]
  406dda:	f003 0308 	and.w	r3, r3, #8
  406dde:	2b00      	cmp	r3, #0
  406de0:	d005      	beq.n	406dee <f_open+0x316>
			mode |= FA__WRITTEN;
  406de2:	1dfb      	adds	r3, r7, #7
  406de4:	1dfa      	adds	r2, r7, #7
  406de6:	7812      	ldrb	r2, [r2, #0]
  406de8:	f042 0220 	orr.w	r2, r2, #32
  406dec:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  406dee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406df4:	f107 030c 	add.w	r3, r7, #12
  406df8:	681b      	ldr	r3, [r3, #0]
  406dfa:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
  406dfc:	f107 030c 	add.w	r3, r7, #12
  406e00:	681b      	ldr	r3, [r3, #0]
  406e02:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  406e06:	621a      	str	r2, [r3, #32]
#if _FS_SHARE
		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
  406e08:	1dfb      	adds	r3, r7, #7
  406e0a:	781b      	ldrb	r3, [r3, #0]
  406e0c:	f023 0301 	bic.w	r3, r3, #1
  406e10:	2b00      	cmp	r3, #0
  406e12:	bf0c      	ite	eq
  406e14:	2300      	moveq	r3, #0
  406e16:	2301      	movne	r3, #1
  406e18:	b2db      	uxtb	r3, r3
  406e1a:	f507 7207 	add.w	r2, r7, #540	; 0x21c
  406e1e:	4610      	mov	r0, r2
  406e20:	4619      	mov	r1, r3
  406e22:	4b39      	ldr	r3, [pc, #228]	; (406f08 <f_open+0x430>)
  406e24:	4798      	blx	r3
  406e26:	4602      	mov	r2, r0
  406e28:	f107 030c 	add.w	r3, r7, #12
  406e2c:	681b      	ldr	r3, [r3, #0]
  406e2e:	625a      	str	r2, [r3, #36]	; 0x24
		if (!fp->lockid) res = FR_INT_ERR;
  406e30:	f107 030c 	add.w	r3, r7, #12
  406e34:	681b      	ldr	r3, [r3, #0]
  406e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406e38:	2b00      	cmp	r3, #0
  406e3a:	d102      	bne.n	406e42 <f_open+0x36a>
  406e3c:	2302      	movs	r3, #2
  406e3e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  406e42:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  406e46:	2b00      	cmp	r3, #0
  406e48:	d156      	bne.n	406ef8 <f_open+0x420>
		fp->flag = mode;					/* File access mode */
  406e4a:	f107 030c 	add.w	r3, r7, #12
  406e4e:	681b      	ldr	r3, [r3, #0]
  406e50:	1dfa      	adds	r2, r7, #7
  406e52:	7812      	ldrb	r2, [r2, #0]
  406e54:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  406e56:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406e5a:	3315      	adds	r3, #21
  406e5c:	781b      	ldrb	r3, [r3, #0]
  406e5e:	021b      	lsls	r3, r3, #8
  406e60:	b29a      	uxth	r2, r3
  406e62:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406e66:	3314      	adds	r3, #20
  406e68:	781b      	ldrb	r3, [r3, #0]
  406e6a:	4313      	orrs	r3, r2
  406e6c:	b29b      	uxth	r3, r3
  406e6e:	b29b      	uxth	r3, r3
  406e70:	041a      	lsls	r2, r3, #16
  406e72:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406e76:	331b      	adds	r3, #27
  406e78:	781b      	ldrb	r3, [r3, #0]
  406e7a:	021b      	lsls	r3, r3, #8
  406e7c:	b299      	uxth	r1, r3
  406e7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406e82:	331a      	adds	r3, #26
  406e84:	781b      	ldrb	r3, [r3, #0]
  406e86:	430b      	orrs	r3, r1
  406e88:	b29b      	uxth	r3, r3
  406e8a:	b29b      	uxth	r3, r3
  406e8c:	431a      	orrs	r2, r3
  406e8e:	f107 030c 	add.w	r3, r7, #12
  406e92:	681b      	ldr	r3, [r3, #0]
  406e94:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  406e96:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406e9a:	331f      	adds	r3, #31
  406e9c:	781b      	ldrb	r3, [r3, #0]
  406e9e:	061a      	lsls	r2, r3, #24
  406ea0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406ea4:	331e      	adds	r3, #30
  406ea6:	781b      	ldrb	r3, [r3, #0]
  406ea8:	041b      	lsls	r3, r3, #16
  406eaa:	431a      	orrs	r2, r3
  406eac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406eb0:	331d      	adds	r3, #29
  406eb2:	781b      	ldrb	r3, [r3, #0]
  406eb4:	021b      	lsls	r3, r3, #8
  406eb6:	431a      	orrs	r2, r3
  406eb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  406ebc:	331c      	adds	r3, #28
  406ebe:	781b      	ldrb	r3, [r3, #0]
  406ec0:	431a      	orrs	r2, r3
  406ec2:	f107 030c 	add.w	r3, r7, #12
  406ec6:	681b      	ldr	r3, [r3, #0]
  406ec8:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
  406eca:	f107 030c 	add.w	r3, r7, #12
  406ece:	681b      	ldr	r3, [r3, #0]
  406ed0:	2200      	movs	r2, #0
  406ed2:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
  406ed4:	f107 030c 	add.w	r3, r7, #12
  406ed8:	681b      	ldr	r3, [r3, #0]
  406eda:	2200      	movs	r2, #0
  406edc:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  406ede:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
  406ee2:	f107 030c 	add.w	r3, r7, #12
  406ee6:	681b      	ldr	r3, [r3, #0]
  406ee8:	601a      	str	r2, [r3, #0]
  406eea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  406eee:	88da      	ldrh	r2, [r3, #6]
  406ef0:	f107 030c 	add.w	r3, r7, #12
  406ef4:	681b      	ldr	r3, [r3, #0]
  406ef6:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
  406ef8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  406efc:	4618      	mov	r0, r3
  406efe:	f507 7714 	add.w	r7, r7, #592	; 0x250
  406f02:	46bd      	mov	sp, r7
  406f04:	bd80      	pop	{r7, pc}
  406f06:	bf00      	nop
  406f08:	00404c65 	.word	0x00404c65

00406f0c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  406f0c:	b590      	push	{r4, r7, lr}
  406f0e:	b08d      	sub	sp, #52	; 0x34
  406f10:	af00      	add	r7, sp, #0
  406f12:	60f8      	str	r0, [r7, #12]
  406f14:	60b9      	str	r1, [r7, #8]
  406f16:	607a      	str	r2, [r7, #4]
  406f18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
  406f1a:	68bb      	ldr	r3, [r7, #8]
  406f1c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
  406f1e:	683b      	ldr	r3, [r7, #0]
  406f20:	2200      	movs	r2, #0
  406f22:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
  406f24:	68fb      	ldr	r3, [r7, #12]
  406f26:	681a      	ldr	r2, [r3, #0]
  406f28:	68fb      	ldr	r3, [r7, #12]
  406f2a:	889b      	ldrh	r3, [r3, #4]
  406f2c:	4610      	mov	r0, r2
  406f2e:	4619      	mov	r1, r3
  406f30:	4b87      	ldr	r3, [pc, #540]	; (407150 <f_read+0x244>)
  406f32:	4798      	blx	r3
  406f34:	4603      	mov	r3, r0
  406f36:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406f38:	7ffb      	ldrb	r3, [r7, #31]
  406f3a:	2b00      	cmp	r3, #0
  406f3c:	d001      	beq.n	406f42 <f_read+0x36>
  406f3e:	7ffb      	ldrb	r3, [r7, #31]
  406f40:	e147      	b.n	4071d2 <f_read+0x2c6>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  406f42:	68fb      	ldr	r3, [r7, #12]
  406f44:	799b      	ldrb	r3, [r3, #6]
  406f46:	b2db      	uxtb	r3, r3
  406f48:	b25b      	sxtb	r3, r3
  406f4a:	2b00      	cmp	r3, #0
  406f4c:	da01      	bge.n	406f52 <f_read+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  406f4e:	2302      	movs	r3, #2
  406f50:	e13f      	b.n	4071d2 <f_read+0x2c6>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  406f52:	68fb      	ldr	r3, [r7, #12]
  406f54:	799b      	ldrb	r3, [r3, #6]
  406f56:	f003 0301 	and.w	r3, r3, #1
  406f5a:	2b00      	cmp	r3, #0
  406f5c:	d101      	bne.n	406f62 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  406f5e:	2307      	movs	r3, #7
  406f60:	e137      	b.n	4071d2 <f_read+0x2c6>
	remain = fp->fsize - fp->fptr;
  406f62:	68fb      	ldr	r3, [r7, #12]
  406f64:	68da      	ldr	r2, [r3, #12]
  406f66:	68fb      	ldr	r3, [r7, #12]
  406f68:	689b      	ldr	r3, [r3, #8]
  406f6a:	1ad3      	subs	r3, r2, r3
  406f6c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
  406f6e:	687a      	ldr	r2, [r7, #4]
  406f70:	69bb      	ldr	r3, [r7, #24]
  406f72:	429a      	cmp	r2, r3
  406f74:	d902      	bls.n	406f7c <f_read+0x70>
  406f76:	69bb      	ldr	r3, [r7, #24]
  406f78:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
  406f7a:	e125      	b.n	4071c8 <f_read+0x2bc>
  406f7c:	e124      	b.n	4071c8 <f_read+0x2bc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  406f7e:	68fb      	ldr	r3, [r7, #12]
  406f80:	689b      	ldr	r3, [r3, #8]
  406f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406f86:	2b00      	cmp	r3, #0
  406f88:	f040 80f1 	bne.w	40716e <f_read+0x262>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  406f8c:	68fb      	ldr	r3, [r7, #12]
  406f8e:	689b      	ldr	r3, [r3, #8]
  406f90:	0a5b      	lsrs	r3, r3, #9
  406f92:	b2da      	uxtb	r2, r3
  406f94:	68fb      	ldr	r3, [r7, #12]
  406f96:	681b      	ldr	r3, [r3, #0]
  406f98:	789b      	ldrb	r3, [r3, #2]
  406f9a:	3b01      	subs	r3, #1
  406f9c:	b2db      	uxtb	r3, r3
  406f9e:	4013      	ands	r3, r2
  406fa0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
  406fa2:	7dfb      	ldrb	r3, [r7, #23]
  406fa4:	2b00      	cmp	r3, #0
  406fa6:	d12c      	bne.n	407002 <f_read+0xf6>
				if (fp->fptr == 0) {			/* On the top of the file? */
  406fa8:	68fb      	ldr	r3, [r7, #12]
  406faa:	689b      	ldr	r3, [r3, #8]
  406fac:	2b00      	cmp	r3, #0
  406fae:	d103      	bne.n	406fb8 <f_read+0xac>
					clst = fp->sclust;			/* Follow from the origin */
  406fb0:	68fb      	ldr	r3, [r7, #12]
  406fb2:	691b      	ldr	r3, [r3, #16]
  406fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  406fb6:	e008      	b.n	406fca <f_read+0xbe>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  406fb8:	68fb      	ldr	r3, [r7, #12]
  406fba:	681a      	ldr	r2, [r3, #0]
  406fbc:	68fb      	ldr	r3, [r7, #12]
  406fbe:	695b      	ldr	r3, [r3, #20]
  406fc0:	4610      	mov	r0, r2
  406fc2:	4619      	mov	r1, r3
  406fc4:	4b63      	ldr	r3, [pc, #396]	; (407154 <f_read+0x248>)
  406fc6:	4798      	blx	r3
  406fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  406fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  406fcc:	2b01      	cmp	r3, #1
  406fce:	d808      	bhi.n	406fe2 <f_read+0xd6>
  406fd0:	68fb      	ldr	r3, [r7, #12]
  406fd2:	799b      	ldrb	r3, [r3, #6]
  406fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406fd8:	b2da      	uxtb	r2, r3
  406fda:	68fb      	ldr	r3, [r7, #12]
  406fdc:	719a      	strb	r2, [r3, #6]
  406fde:	2302      	movs	r3, #2
  406fe0:	e0f7      	b.n	4071d2 <f_read+0x2c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  406fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
  406fe8:	d108      	bne.n	406ffc <f_read+0xf0>
  406fea:	68fb      	ldr	r3, [r7, #12]
  406fec:	799b      	ldrb	r3, [r3, #6]
  406fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406ff2:	b2da      	uxtb	r2, r3
  406ff4:	68fb      	ldr	r3, [r7, #12]
  406ff6:	719a      	strb	r2, [r3, #6]
  406ff8:	2301      	movs	r3, #1
  406ffa:	e0ea      	b.n	4071d2 <f_read+0x2c6>
				fp->clust = clst;				/* Update current cluster */
  406ffc:	68fb      	ldr	r3, [r7, #12]
  406ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  407000:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  407002:	68fb      	ldr	r3, [r7, #12]
  407004:	681a      	ldr	r2, [r3, #0]
  407006:	68fb      	ldr	r3, [r7, #12]
  407008:	695b      	ldr	r3, [r3, #20]
  40700a:	4610      	mov	r0, r2
  40700c:	4619      	mov	r1, r3
  40700e:	4b52      	ldr	r3, [pc, #328]	; (407158 <f_read+0x24c>)
  407010:	4798      	blx	r3
  407012:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  407014:	693b      	ldr	r3, [r7, #16]
  407016:	2b00      	cmp	r3, #0
  407018:	d108      	bne.n	40702c <f_read+0x120>
  40701a:	68fb      	ldr	r3, [r7, #12]
  40701c:	799b      	ldrb	r3, [r3, #6]
  40701e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407022:	b2da      	uxtb	r2, r3
  407024:	68fb      	ldr	r3, [r7, #12]
  407026:	719a      	strb	r2, [r3, #6]
  407028:	2302      	movs	r3, #2
  40702a:	e0d2      	b.n	4071d2 <f_read+0x2c6>
			sect += csect;
  40702c:	7dfb      	ldrb	r3, [r7, #23]
  40702e:	693a      	ldr	r2, [r7, #16]
  407030:	4413      	add	r3, r2
  407032:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
  407034:	687b      	ldr	r3, [r7, #4]
  407036:	0a5b      	lsrs	r3, r3, #9
  407038:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
  40703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40703c:	2b00      	cmp	r3, #0
  40703e:	d044      	beq.n	4070ca <f_read+0x1be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  407040:	7dfa      	ldrb	r2, [r7, #23]
  407042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407044:	441a      	add	r2, r3
  407046:	68fb      	ldr	r3, [r7, #12]
  407048:	681b      	ldr	r3, [r3, #0]
  40704a:	789b      	ldrb	r3, [r3, #2]
  40704c:	429a      	cmp	r2, r3
  40704e:	d906      	bls.n	40705e <f_read+0x152>
					cc = fp->fs->csize - csect;
  407050:	68fb      	ldr	r3, [r7, #12]
  407052:	681b      	ldr	r3, [r3, #0]
  407054:	789b      	ldrb	r3, [r3, #2]
  407056:	461a      	mov	r2, r3
  407058:	7dfb      	ldrb	r3, [r7, #23]
  40705a:	1ad3      	subs	r3, r2, r3
  40705c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  40705e:	68fb      	ldr	r3, [r7, #12]
  407060:	681b      	ldr	r3, [r3, #0]
  407062:	785a      	ldrb	r2, [r3, #1]
  407064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407066:	b2db      	uxtb	r3, r3
  407068:	4610      	mov	r0, r2
  40706a:	6a39      	ldr	r1, [r7, #32]
  40706c:	693a      	ldr	r2, [r7, #16]
  40706e:	4c3b      	ldr	r4, [pc, #236]	; (40715c <f_read+0x250>)
  407070:	47a0      	blx	r4
  407072:	4603      	mov	r3, r0
  407074:	2b00      	cmp	r3, #0
  407076:	d008      	beq.n	40708a <f_read+0x17e>
					ABORT(fp->fs, FR_DISK_ERR);
  407078:	68fb      	ldr	r3, [r7, #12]
  40707a:	799b      	ldrb	r3, [r3, #6]
  40707c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407080:	b2da      	uxtb	r2, r3
  407082:	68fb      	ldr	r3, [r7, #12]
  407084:	719a      	strb	r2, [r3, #6]
  407086:	2301      	movs	r3, #1
  407088:	e0a3      	b.n	4071d2 <f_read+0x2c6>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  40708a:	68fb      	ldr	r3, [r7, #12]
  40708c:	799b      	ldrb	r3, [r3, #6]
  40708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407092:	2b00      	cmp	r3, #0
  407094:	d015      	beq.n	4070c2 <f_read+0x1b6>
  407096:	68fb      	ldr	r3, [r7, #12]
  407098:	699a      	ldr	r2, [r3, #24]
  40709a:	693b      	ldr	r3, [r7, #16]
  40709c:	1ad2      	subs	r2, r2, r3
  40709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4070a0:	429a      	cmp	r2, r3
  4070a2:	d20e      	bcs.n	4070c2 <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  4070a4:	68fb      	ldr	r3, [r7, #12]
  4070a6:	699a      	ldr	r2, [r3, #24]
  4070a8:	693b      	ldr	r3, [r7, #16]
  4070aa:	1ad3      	subs	r3, r2, r3
  4070ac:	025b      	lsls	r3, r3, #9
  4070ae:	6a3a      	ldr	r2, [r7, #32]
  4070b0:	441a      	add	r2, r3
  4070b2:	68fb      	ldr	r3, [r7, #12]
  4070b4:	3328      	adds	r3, #40	; 0x28
  4070b6:	4610      	mov	r0, r2
  4070b8:	4619      	mov	r1, r3
  4070ba:	f44f 7200 	mov.w	r2, #512	; 0x200
  4070be:	4b28      	ldr	r3, [pc, #160]	; (407160 <f_read+0x254>)
  4070c0:	4798      	blx	r3
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  4070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4070c4:	025b      	lsls	r3, r3, #9
  4070c6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
  4070c8:	e06a      	b.n	4071a0 <f_read+0x294>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
  4070ca:	68fb      	ldr	r3, [r7, #12]
  4070cc:	699a      	ldr	r2, [r3, #24]
  4070ce:	693b      	ldr	r3, [r7, #16]
  4070d0:	429a      	cmp	r2, r3
  4070d2:	d049      	beq.n	407168 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  4070d4:	68fb      	ldr	r3, [r7, #12]
  4070d6:	799b      	ldrb	r3, [r3, #6]
  4070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4070dc:	2b00      	cmp	r3, #0
  4070de:	d020      	beq.n	407122 <f_read+0x216>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4070e0:	68fb      	ldr	r3, [r7, #12]
  4070e2:	681b      	ldr	r3, [r3, #0]
  4070e4:	7859      	ldrb	r1, [r3, #1]
  4070e6:	68fb      	ldr	r3, [r7, #12]
  4070e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4070ec:	68fb      	ldr	r3, [r7, #12]
  4070ee:	699b      	ldr	r3, [r3, #24]
  4070f0:	4608      	mov	r0, r1
  4070f2:	4611      	mov	r1, r2
  4070f4:	461a      	mov	r2, r3
  4070f6:	2301      	movs	r3, #1
  4070f8:	4c1a      	ldr	r4, [pc, #104]	; (407164 <f_read+0x258>)
  4070fa:	47a0      	blx	r4
  4070fc:	4603      	mov	r3, r0
  4070fe:	2b00      	cmp	r3, #0
  407100:	d008      	beq.n	407114 <f_read+0x208>
						ABORT(fp->fs, FR_DISK_ERR);
  407102:	68fb      	ldr	r3, [r7, #12]
  407104:	799b      	ldrb	r3, [r3, #6]
  407106:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40710a:	b2da      	uxtb	r2, r3
  40710c:	68fb      	ldr	r3, [r7, #12]
  40710e:	719a      	strb	r2, [r3, #6]
  407110:	2301      	movs	r3, #1
  407112:	e05e      	b.n	4071d2 <f_read+0x2c6>
					fp->flag &= ~FA__DIRTY;
  407114:	68fb      	ldr	r3, [r7, #12]
  407116:	799b      	ldrb	r3, [r3, #6]
  407118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40711c:	b2da      	uxtb	r2, r3
  40711e:	68fb      	ldr	r3, [r7, #12]
  407120:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  407122:	68fb      	ldr	r3, [r7, #12]
  407124:	681b      	ldr	r3, [r3, #0]
  407126:	785a      	ldrb	r2, [r3, #1]
  407128:	68fb      	ldr	r3, [r7, #12]
  40712a:	3328      	adds	r3, #40	; 0x28
  40712c:	4610      	mov	r0, r2
  40712e:	4619      	mov	r1, r3
  407130:	693a      	ldr	r2, [r7, #16]
  407132:	2301      	movs	r3, #1
  407134:	4c09      	ldr	r4, [pc, #36]	; (40715c <f_read+0x250>)
  407136:	47a0      	blx	r4
  407138:	4603      	mov	r3, r0
  40713a:	2b00      	cmp	r3, #0
  40713c:	d014      	beq.n	407168 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
  40713e:	68fb      	ldr	r3, [r7, #12]
  407140:	799b      	ldrb	r3, [r3, #6]
  407142:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407146:	b2da      	uxtb	r2, r3
  407148:	68fb      	ldr	r3, [r7, #12]
  40714a:	719a      	strb	r2, [r3, #6]
  40714c:	2301      	movs	r3, #1
  40714e:	e040      	b.n	4071d2 <f_read+0x2c6>
  407150:	00406a2d 	.word	0x00406a2d
  407154:	004050f5 	.word	0x004050f5
  407158:	004050b9 	.word	0x004050b9
  40715c:	004047c9 	.word	0x004047c9
  407160:	00404a51 	.word	0x00404a51
  407164:	00404879 	.word	0x00404879
			}
#endif
			fp->dsect = sect;
  407168:	68fb      	ldr	r3, [r7, #12]
  40716a:	693a      	ldr	r2, [r7, #16]
  40716c:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  40716e:	68fb      	ldr	r3, [r7, #12]
  407170:	689b      	ldr	r3, [r3, #8]
  407172:	f3c3 0308 	ubfx	r3, r3, #0, #9
  407176:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  40717a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
  40717c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40717e:	687b      	ldr	r3, [r7, #4]
  407180:	429a      	cmp	r2, r3
  407182:	d901      	bls.n	407188 <f_read+0x27c>
  407184:	687b      	ldr	r3, [r7, #4]
  407186:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  407188:	68fb      	ldr	r3, [r7, #12]
  40718a:	689b      	ldr	r3, [r3, #8]
  40718c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  407190:	3328      	adds	r3, #40	; 0x28
  407192:	68fa      	ldr	r2, [r7, #12]
  407194:	4413      	add	r3, r2
  407196:	6a38      	ldr	r0, [r7, #32]
  407198:	4619      	mov	r1, r3
  40719a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40719c:	4b0f      	ldr	r3, [pc, #60]	; (4071dc <f_read+0x2d0>)
  40719e:	4798      	blx	r3
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  4071a0:	6a3a      	ldr	r2, [r7, #32]
  4071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4071a4:	4413      	add	r3, r2
  4071a6:	623b      	str	r3, [r7, #32]
  4071a8:	68fb      	ldr	r3, [r7, #12]
  4071aa:	689a      	ldr	r2, [r3, #8]
  4071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4071ae:	441a      	add	r2, r3
  4071b0:	68fb      	ldr	r3, [r7, #12]
  4071b2:	609a      	str	r2, [r3, #8]
  4071b4:	683b      	ldr	r3, [r7, #0]
  4071b6:	681a      	ldr	r2, [r3, #0]
  4071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4071ba:	441a      	add	r2, r3
  4071bc:	683b      	ldr	r3, [r7, #0]
  4071be:	601a      	str	r2, [r3, #0]
  4071c0:	687a      	ldr	r2, [r7, #4]
  4071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4071c4:	1ad3      	subs	r3, r2, r3
  4071c6:	607b      	str	r3, [r7, #4]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  4071c8:	687b      	ldr	r3, [r7, #4]
  4071ca:	2b00      	cmp	r3, #0
  4071cc:	f47f aed7 	bne.w	406f7e <f_read+0x72>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
  4071d0:	2300      	movs	r3, #0
}
  4071d2:	4618      	mov	r0, r3
  4071d4:	3734      	adds	r7, #52	; 0x34
  4071d6:	46bd      	mov	sp, r7
  4071d8:	bd90      	pop	{r4, r7, pc}
  4071da:	bf00      	nop
  4071dc:	00404a51 	.word	0x00404a51

004071e0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  4071e0:	b590      	push	{r4, r7, lr}
  4071e2:	b08b      	sub	sp, #44	; 0x2c
  4071e4:	af00      	add	r7, sp, #0
  4071e6:	60f8      	str	r0, [r7, #12]
  4071e8:	60b9      	str	r1, [r7, #8]
  4071ea:	607a      	str	r2, [r7, #4]
  4071ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
  4071ee:	68bb      	ldr	r3, [r7, #8]
  4071f0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  4071f2:	683b      	ldr	r3, [r7, #0]
  4071f4:	2200      	movs	r2, #0
  4071f6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  4071f8:	68fb      	ldr	r3, [r7, #12]
  4071fa:	681a      	ldr	r2, [r3, #0]
  4071fc:	68fb      	ldr	r3, [r7, #12]
  4071fe:	889b      	ldrh	r3, [r3, #4]
  407200:	4610      	mov	r0, r2
  407202:	4619      	mov	r1, r3
  407204:	4b93      	ldr	r3, [pc, #588]	; (407454 <f_write+0x274>)
  407206:	4798      	blx	r3
  407208:	4603      	mov	r3, r0
  40720a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40720c:	7dfb      	ldrb	r3, [r7, #23]
  40720e:	2b00      	cmp	r3, #0
  407210:	d001      	beq.n	407216 <f_write+0x36>
  407212:	7dfb      	ldrb	r3, [r7, #23]
  407214:	e177      	b.n	407506 <f_write+0x326>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  407216:	68fb      	ldr	r3, [r7, #12]
  407218:	799b      	ldrb	r3, [r3, #6]
  40721a:	b2db      	uxtb	r3, r3
  40721c:	b25b      	sxtb	r3, r3
  40721e:	2b00      	cmp	r3, #0
  407220:	da01      	bge.n	407226 <f_write+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  407222:	2302      	movs	r3, #2
  407224:	e16f      	b.n	407506 <f_write+0x326>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  407226:	68fb      	ldr	r3, [r7, #12]
  407228:	799b      	ldrb	r3, [r3, #6]
  40722a:	f003 0302 	and.w	r3, r3, #2
  40722e:	2b00      	cmp	r3, #0
  407230:	d101      	bne.n	407236 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
  407232:	2307      	movs	r3, #7
  407234:	e167      	b.n	407506 <f_write+0x326>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  407236:	68fb      	ldr	r3, [r7, #12]
  407238:	68da      	ldr	r2, [r3, #12]
  40723a:	687b      	ldr	r3, [r7, #4]
  40723c:	441a      	add	r2, r3
  40723e:	68fb      	ldr	r3, [r7, #12]
  407240:	68db      	ldr	r3, [r3, #12]
  407242:	429a      	cmp	r2, r3
  407244:	d202      	bcs.n	40724c <f_write+0x6c>
  407246:	2300      	movs	r3, #0
  407248:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
  40724a:	e146      	b.n	4074da <f_write+0x2fa>
  40724c:	e145      	b.n	4074da <f_write+0x2fa>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  40724e:	68fb      	ldr	r3, [r7, #12]
  407250:	689b      	ldr	r3, [r3, #8]
  407252:	f3c3 0308 	ubfx	r3, r3, #0, #9
  407256:	2b00      	cmp	r3, #0
  407258:	f040 810b 	bne.w	407472 <f_write+0x292>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40725c:	68fb      	ldr	r3, [r7, #12]
  40725e:	689b      	ldr	r3, [r3, #8]
  407260:	0a5b      	lsrs	r3, r3, #9
  407262:	b2da      	uxtb	r2, r3
  407264:	68fb      	ldr	r3, [r7, #12]
  407266:	681b      	ldr	r3, [r3, #0]
  407268:	789b      	ldrb	r3, [r3, #2]
  40726a:	3b01      	subs	r3, #1
  40726c:	b2db      	uxtb	r3, r3
  40726e:	4013      	ands	r3, r2
  407270:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
  407272:	7dbb      	ldrb	r3, [r7, #22]
  407274:	2b00      	cmp	r3, #0
  407276:	d13d      	bne.n	4072f4 <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
  407278:	68fb      	ldr	r3, [r7, #12]
  40727a:	689b      	ldr	r3, [r3, #8]
  40727c:	2b00      	cmp	r3, #0
  40727e:	d110      	bne.n	4072a2 <f_write+0xc2>
					clst = fp->sclust;		/* Follow from the origin */
  407280:	68fb      	ldr	r3, [r7, #12]
  407282:	691b      	ldr	r3, [r3, #16]
  407284:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
  407286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407288:	2b00      	cmp	r3, #0
  40728a:	d113      	bne.n	4072b4 <f_write+0xd4>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40728c:	68fb      	ldr	r3, [r7, #12]
  40728e:	681b      	ldr	r3, [r3, #0]
  407290:	4618      	mov	r0, r3
  407292:	2100      	movs	r1, #0
  407294:	4b70      	ldr	r3, [pc, #448]	; (407458 <f_write+0x278>)
  407296:	4798      	blx	r3
  407298:	6278      	str	r0, [r7, #36]	; 0x24
  40729a:	68fb      	ldr	r3, [r7, #12]
  40729c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40729e:	611a      	str	r2, [r3, #16]
  4072a0:	e008      	b.n	4072b4 <f_write+0xd4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4072a2:	68fb      	ldr	r3, [r7, #12]
  4072a4:	681a      	ldr	r2, [r3, #0]
  4072a6:	68fb      	ldr	r3, [r7, #12]
  4072a8:	695b      	ldr	r3, [r3, #20]
  4072aa:	4610      	mov	r0, r2
  4072ac:	4619      	mov	r1, r3
  4072ae:	4b6a      	ldr	r3, [pc, #424]	; (407458 <f_write+0x278>)
  4072b0:	4798      	blx	r3
  4072b2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4072b6:	2b00      	cmp	r3, #0
  4072b8:	d100      	bne.n	4072bc <f_write+0xdc>
  4072ba:	e112      	b.n	4074e2 <f_write+0x302>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4072be:	2b01      	cmp	r3, #1
  4072c0:	d108      	bne.n	4072d4 <f_write+0xf4>
  4072c2:	68fb      	ldr	r3, [r7, #12]
  4072c4:	799b      	ldrb	r3, [r3, #6]
  4072c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4072ca:	b2da      	uxtb	r2, r3
  4072cc:	68fb      	ldr	r3, [r7, #12]
  4072ce:	719a      	strb	r2, [r3, #6]
  4072d0:	2302      	movs	r3, #2
  4072d2:	e118      	b.n	407506 <f_write+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4072da:	d108      	bne.n	4072ee <f_write+0x10e>
  4072dc:	68fb      	ldr	r3, [r7, #12]
  4072de:	799b      	ldrb	r3, [r3, #6]
  4072e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4072e4:	b2da      	uxtb	r2, r3
  4072e6:	68fb      	ldr	r3, [r7, #12]
  4072e8:	719a      	strb	r2, [r3, #6]
  4072ea:	2301      	movs	r3, #1
  4072ec:	e10b      	b.n	407506 <f_write+0x326>
				fp->clust = clst;			/* Update current cluster */
  4072ee:	68fb      	ldr	r3, [r7, #12]
  4072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4072f2:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4072f4:	68fb      	ldr	r3, [r7, #12]
  4072f6:	799b      	ldrb	r3, [r3, #6]
  4072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4072fc:	2b00      	cmp	r3, #0
  4072fe:	d020      	beq.n	407342 <f_write+0x162>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  407300:	68fb      	ldr	r3, [r7, #12]
  407302:	681b      	ldr	r3, [r3, #0]
  407304:	7859      	ldrb	r1, [r3, #1]
  407306:	68fb      	ldr	r3, [r7, #12]
  407308:	f103 0228 	add.w	r2, r3, #40	; 0x28
  40730c:	68fb      	ldr	r3, [r7, #12]
  40730e:	699b      	ldr	r3, [r3, #24]
  407310:	4608      	mov	r0, r1
  407312:	4611      	mov	r1, r2
  407314:	461a      	mov	r2, r3
  407316:	2301      	movs	r3, #1
  407318:	4c50      	ldr	r4, [pc, #320]	; (40745c <f_write+0x27c>)
  40731a:	47a0      	blx	r4
  40731c:	4603      	mov	r3, r0
  40731e:	2b00      	cmp	r3, #0
  407320:	d008      	beq.n	407334 <f_write+0x154>
					ABORT(fp->fs, FR_DISK_ERR);
  407322:	68fb      	ldr	r3, [r7, #12]
  407324:	799b      	ldrb	r3, [r3, #6]
  407326:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40732a:	b2da      	uxtb	r2, r3
  40732c:	68fb      	ldr	r3, [r7, #12]
  40732e:	719a      	strb	r2, [r3, #6]
  407330:	2301      	movs	r3, #1
  407332:	e0e8      	b.n	407506 <f_write+0x326>
				fp->flag &= ~FA__DIRTY;
  407334:	68fb      	ldr	r3, [r7, #12]
  407336:	799b      	ldrb	r3, [r3, #6]
  407338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40733c:	b2da      	uxtb	r2, r3
  40733e:	68fb      	ldr	r3, [r7, #12]
  407340:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  407342:	68fb      	ldr	r3, [r7, #12]
  407344:	681a      	ldr	r2, [r3, #0]
  407346:	68fb      	ldr	r3, [r7, #12]
  407348:	695b      	ldr	r3, [r3, #20]
  40734a:	4610      	mov	r0, r2
  40734c:	4619      	mov	r1, r3
  40734e:	4b44      	ldr	r3, [pc, #272]	; (407460 <f_write+0x280>)
  407350:	4798      	blx	r3
  407352:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  407354:	693b      	ldr	r3, [r7, #16]
  407356:	2b00      	cmp	r3, #0
  407358:	d108      	bne.n	40736c <f_write+0x18c>
  40735a:	68fb      	ldr	r3, [r7, #12]
  40735c:	799b      	ldrb	r3, [r3, #6]
  40735e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407362:	b2da      	uxtb	r2, r3
  407364:	68fb      	ldr	r3, [r7, #12]
  407366:	719a      	strb	r2, [r3, #6]
  407368:	2302      	movs	r3, #2
  40736a:	e0cc      	b.n	407506 <f_write+0x326>
			sect += csect;
  40736c:	7dbb      	ldrb	r3, [r7, #22]
  40736e:	693a      	ldr	r2, [r7, #16]
  407370:	4413      	add	r3, r2
  407372:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
  407374:	687b      	ldr	r3, [r7, #4]
  407376:	0a5b      	lsrs	r3, r3, #9
  407378:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
  40737a:	69fb      	ldr	r3, [r7, #28]
  40737c:	2b00      	cmp	r3, #0
  40737e:	d046      	beq.n	40740e <f_write+0x22e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  407380:	7dba      	ldrb	r2, [r7, #22]
  407382:	69fb      	ldr	r3, [r7, #28]
  407384:	441a      	add	r2, r3
  407386:	68fb      	ldr	r3, [r7, #12]
  407388:	681b      	ldr	r3, [r3, #0]
  40738a:	789b      	ldrb	r3, [r3, #2]
  40738c:	429a      	cmp	r2, r3
  40738e:	d906      	bls.n	40739e <f_write+0x1be>
					cc = fp->fs->csize - csect;
  407390:	68fb      	ldr	r3, [r7, #12]
  407392:	681b      	ldr	r3, [r3, #0]
  407394:	789b      	ldrb	r3, [r3, #2]
  407396:	461a      	mov	r2, r3
  407398:	7dbb      	ldrb	r3, [r7, #22]
  40739a:	1ad3      	subs	r3, r2, r3
  40739c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  40739e:	68fb      	ldr	r3, [r7, #12]
  4073a0:	681b      	ldr	r3, [r3, #0]
  4073a2:	785a      	ldrb	r2, [r3, #1]
  4073a4:	69fb      	ldr	r3, [r7, #28]
  4073a6:	b2db      	uxtb	r3, r3
  4073a8:	4610      	mov	r0, r2
  4073aa:	69b9      	ldr	r1, [r7, #24]
  4073ac:	693a      	ldr	r2, [r7, #16]
  4073ae:	4c2b      	ldr	r4, [pc, #172]	; (40745c <f_write+0x27c>)
  4073b0:	47a0      	blx	r4
  4073b2:	4603      	mov	r3, r0
  4073b4:	2b00      	cmp	r3, #0
  4073b6:	d008      	beq.n	4073ca <f_write+0x1ea>
					ABORT(fp->fs, FR_DISK_ERR);
  4073b8:	68fb      	ldr	r3, [r7, #12]
  4073ba:	799b      	ldrb	r3, [r3, #6]
  4073bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4073c0:	b2da      	uxtb	r2, r3
  4073c2:	68fb      	ldr	r3, [r7, #12]
  4073c4:	719a      	strb	r2, [r3, #6]
  4073c6:	2301      	movs	r3, #1
  4073c8:	e09d      	b.n	407506 <f_write+0x326>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  4073ca:	68fb      	ldr	r3, [r7, #12]
  4073cc:	699a      	ldr	r2, [r3, #24]
  4073ce:	693b      	ldr	r3, [r7, #16]
  4073d0:	1ad2      	subs	r2, r2, r3
  4073d2:	69fb      	ldr	r3, [r7, #28]
  4073d4:	429a      	cmp	r2, r3
  4073d6:	d216      	bcs.n	407406 <f_write+0x226>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  4073d8:	68fb      	ldr	r3, [r7, #12]
  4073da:	f103 0228 	add.w	r2, r3, #40	; 0x28
  4073de:	68fb      	ldr	r3, [r7, #12]
  4073e0:	6999      	ldr	r1, [r3, #24]
  4073e2:	693b      	ldr	r3, [r7, #16]
  4073e4:	1acb      	subs	r3, r1, r3
  4073e6:	025b      	lsls	r3, r3, #9
  4073e8:	69b9      	ldr	r1, [r7, #24]
  4073ea:	440b      	add	r3, r1
  4073ec:	4610      	mov	r0, r2
  4073ee:	4619      	mov	r1, r3
  4073f0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4073f4:	4b1b      	ldr	r3, [pc, #108]	; (407464 <f_write+0x284>)
  4073f6:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  4073f8:	68fb      	ldr	r3, [r7, #12]
  4073fa:	799b      	ldrb	r3, [r3, #6]
  4073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  407400:	b2da      	uxtb	r2, r3
  407402:	68fb      	ldr	r3, [r7, #12]
  407404:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  407406:	69fb      	ldr	r3, [r7, #28]
  407408:	025b      	lsls	r3, r3, #9
  40740a:	623b      	str	r3, [r7, #32]
				continue;
  40740c:	e051      	b.n	4074b2 <f_write+0x2d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  40740e:	68fb      	ldr	r3, [r7, #12]
  407410:	699a      	ldr	r2, [r3, #24]
  407412:	693b      	ldr	r3, [r7, #16]
  407414:	429a      	cmp	r2, r3
  407416:	d029      	beq.n	40746c <f_write+0x28c>
				if (fp->fptr < fp->fsize &&
  407418:	68fb      	ldr	r3, [r7, #12]
  40741a:	689a      	ldr	r2, [r3, #8]
  40741c:	68fb      	ldr	r3, [r7, #12]
  40741e:	68db      	ldr	r3, [r3, #12]
  407420:	429a      	cmp	r2, r3
  407422:	d223      	bcs.n	40746c <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  407424:	68fb      	ldr	r3, [r7, #12]
  407426:	681b      	ldr	r3, [r3, #0]
  407428:	785a      	ldrb	r2, [r3, #1]
  40742a:	68fb      	ldr	r3, [r7, #12]
  40742c:	3328      	adds	r3, #40	; 0x28
  40742e:	4610      	mov	r0, r2
  407430:	4619      	mov	r1, r3
  407432:	693a      	ldr	r2, [r7, #16]
  407434:	2301      	movs	r3, #1
  407436:	4c0c      	ldr	r4, [pc, #48]	; (407468 <f_write+0x288>)
  407438:	47a0      	blx	r4
  40743a:	4603      	mov	r3, r0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
  40743c:	2b00      	cmp	r3, #0
  40743e:	d015      	beq.n	40746c <f_write+0x28c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
  407440:	68fb      	ldr	r3, [r7, #12]
  407442:	799b      	ldrb	r3, [r3, #6]
  407444:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407448:	b2da      	uxtb	r2, r3
  40744a:	68fb      	ldr	r3, [r7, #12]
  40744c:	719a      	strb	r2, [r3, #6]
  40744e:	2301      	movs	r3, #1
  407450:	e059      	b.n	407506 <f_write+0x326>
  407452:	bf00      	nop
  407454:	00406a2d 	.word	0x00406a2d
  407458:	004054e9 	.word	0x004054e9
  40745c:	00404879 	.word	0x00404879
  407460:	004050b9 	.word	0x004050b9
  407464:	00404a51 	.word	0x00404a51
  407468:	004047c9 	.word	0x004047c9
			}
#endif
			fp->dsect = sect;
  40746c:	68fb      	ldr	r3, [r7, #12]
  40746e:	693a      	ldr	r2, [r7, #16]
  407470:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  407472:	68fb      	ldr	r3, [r7, #12]
  407474:	689b      	ldr	r3, [r3, #8]
  407476:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40747a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  40747e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
  407480:	6a3a      	ldr	r2, [r7, #32]
  407482:	687b      	ldr	r3, [r7, #4]
  407484:	429a      	cmp	r2, r3
  407486:	d901      	bls.n	40748c <f_write+0x2ac>
  407488:	687b      	ldr	r3, [r7, #4]
  40748a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  40748c:	68fb      	ldr	r3, [r7, #12]
  40748e:	689b      	ldr	r3, [r3, #8]
  407490:	f3c3 0308 	ubfx	r3, r3, #0, #9
  407494:	3328      	adds	r3, #40	; 0x28
  407496:	68fa      	ldr	r2, [r7, #12]
  407498:	4413      	add	r3, r2
  40749a:	4618      	mov	r0, r3
  40749c:	69b9      	ldr	r1, [r7, #24]
  40749e:	6a3a      	ldr	r2, [r7, #32]
  4074a0:	4b1b      	ldr	r3, [pc, #108]	; (407510 <f_write+0x330>)
  4074a2:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  4074a4:	68fb      	ldr	r3, [r7, #12]
  4074a6:	799b      	ldrb	r3, [r3, #6]
  4074a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4074ac:	b2da      	uxtb	r2, r3
  4074ae:	68fb      	ldr	r3, [r7, #12]
  4074b0:	719a      	strb	r2, [r3, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4074b2:	69ba      	ldr	r2, [r7, #24]
  4074b4:	6a3b      	ldr	r3, [r7, #32]
  4074b6:	4413      	add	r3, r2
  4074b8:	61bb      	str	r3, [r7, #24]
  4074ba:	68fb      	ldr	r3, [r7, #12]
  4074bc:	689a      	ldr	r2, [r3, #8]
  4074be:	6a3b      	ldr	r3, [r7, #32]
  4074c0:	441a      	add	r2, r3
  4074c2:	68fb      	ldr	r3, [r7, #12]
  4074c4:	609a      	str	r2, [r3, #8]
  4074c6:	683b      	ldr	r3, [r7, #0]
  4074c8:	681a      	ldr	r2, [r3, #0]
  4074ca:	6a3b      	ldr	r3, [r7, #32]
  4074cc:	441a      	add	r2, r3
  4074ce:	683b      	ldr	r3, [r7, #0]
  4074d0:	601a      	str	r2, [r3, #0]
  4074d2:	687a      	ldr	r2, [r7, #4]
  4074d4:	6a3b      	ldr	r3, [r7, #32]
  4074d6:	1ad3      	subs	r3, r2, r3
  4074d8:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  4074da:	687b      	ldr	r3, [r7, #4]
  4074dc:	2b00      	cmp	r3, #0
  4074de:	f47f aeb6 	bne.w	40724e <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4074e2:	68fb      	ldr	r3, [r7, #12]
  4074e4:	689a      	ldr	r2, [r3, #8]
  4074e6:	68fb      	ldr	r3, [r7, #12]
  4074e8:	68db      	ldr	r3, [r3, #12]
  4074ea:	429a      	cmp	r2, r3
  4074ec:	d903      	bls.n	4074f6 <f_write+0x316>
  4074ee:	68fb      	ldr	r3, [r7, #12]
  4074f0:	689a      	ldr	r2, [r3, #8]
  4074f2:	68fb      	ldr	r3, [r7, #12]
  4074f4:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4074f6:	68fb      	ldr	r3, [r7, #12]
  4074f8:	799b      	ldrb	r3, [r3, #6]
  4074fa:	f043 0320 	orr.w	r3, r3, #32
  4074fe:	b2da      	uxtb	r2, r3
  407500:	68fb      	ldr	r3, [r7, #12]
  407502:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
  407504:	2300      	movs	r3, #0
}
  407506:	4618      	mov	r0, r3
  407508:	372c      	adds	r7, #44	; 0x2c
  40750a:	46bd      	mov	sp, r7
  40750c:	bd90      	pop	{r4, r7, pc}
  40750e:	bf00      	nop
  407510:	00404a51 	.word	0x00404a51

00407514 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  407514:	b590      	push	{r4, r7, lr}
  407516:	b087      	sub	sp, #28
  407518:	af00      	add	r7, sp, #0
  40751a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40751c:	687b      	ldr	r3, [r7, #4]
  40751e:	681a      	ldr	r2, [r3, #0]
  407520:	687b      	ldr	r3, [r7, #4]
  407522:	889b      	ldrh	r3, [r3, #4]
  407524:	4610      	mov	r0, r2
  407526:	4619      	mov	r1, r3
  407528:	4b5b      	ldr	r3, [pc, #364]	; (407698 <f_sync+0x184>)
  40752a:	4798      	blx	r3
  40752c:	4603      	mov	r3, r0
  40752e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
  407530:	7dfb      	ldrb	r3, [r7, #23]
  407532:	2b00      	cmp	r3, #0
  407534:	f040 80ab 	bne.w	40768e <f_sync+0x17a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  407538:	687b      	ldr	r3, [r7, #4]
  40753a:	799b      	ldrb	r3, [r3, #6]
  40753c:	f003 0320 	and.w	r3, r3, #32
  407540:	2b00      	cmp	r3, #0
  407542:	f000 80a4 	beq.w	40768e <f_sync+0x17a>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  407546:	687b      	ldr	r3, [r7, #4]
  407548:	799b      	ldrb	r3, [r3, #6]
  40754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40754e:	2b00      	cmp	r3, #0
  407550:	d019      	beq.n	407586 <f_sync+0x72>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  407552:	687b      	ldr	r3, [r7, #4]
  407554:	681b      	ldr	r3, [r3, #0]
  407556:	7859      	ldrb	r1, [r3, #1]
  407558:	687b      	ldr	r3, [r7, #4]
  40755a:	f103 0228 	add.w	r2, r3, #40	; 0x28
  40755e:	687b      	ldr	r3, [r7, #4]
  407560:	699b      	ldr	r3, [r3, #24]
  407562:	4608      	mov	r0, r1
  407564:	4611      	mov	r1, r2
  407566:	461a      	mov	r2, r3
  407568:	2301      	movs	r3, #1
  40756a:	4c4c      	ldr	r4, [pc, #304]	; (40769c <f_sync+0x188>)
  40756c:	47a0      	blx	r4
  40756e:	4603      	mov	r3, r0
  407570:	2b00      	cmp	r3, #0
  407572:	d001      	beq.n	407578 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  407574:	2301      	movs	r3, #1
  407576:	e08b      	b.n	407690 <f_sync+0x17c>
				fp->flag &= ~FA__DIRTY;
  407578:	687b      	ldr	r3, [r7, #4]
  40757a:	799b      	ldrb	r3, [r3, #6]
  40757c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  407580:	b2da      	uxtb	r2, r3
  407582:	687b      	ldr	r3, [r7, #4]
  407584:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  407586:	687b      	ldr	r3, [r7, #4]
  407588:	681a      	ldr	r2, [r3, #0]
  40758a:	687b      	ldr	r3, [r7, #4]
  40758c:	69db      	ldr	r3, [r3, #28]
  40758e:	4610      	mov	r0, r2
  407590:	4619      	mov	r1, r3
  407592:	4b43      	ldr	r3, [pc, #268]	; (4076a0 <f_sync+0x18c>)
  407594:	4798      	blx	r3
  407596:	4603      	mov	r3, r0
  407598:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
  40759a:	7dfb      	ldrb	r3, [r7, #23]
  40759c:	2b00      	cmp	r3, #0
  40759e:	d176      	bne.n	40768e <f_sync+0x17a>
				dir = fp->dir_ptr;
  4075a0:	687b      	ldr	r3, [r7, #4]
  4075a2:	6a1b      	ldr	r3, [r3, #32]
  4075a4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4075a6:	693b      	ldr	r3, [r7, #16]
  4075a8:	330b      	adds	r3, #11
  4075aa:	693a      	ldr	r2, [r7, #16]
  4075ac:	320b      	adds	r2, #11
  4075ae:	7812      	ldrb	r2, [r2, #0]
  4075b0:	f042 0220 	orr.w	r2, r2, #32
  4075b4:	b2d2      	uxtb	r2, r2
  4075b6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4075b8:	693b      	ldr	r3, [r7, #16]
  4075ba:	331c      	adds	r3, #28
  4075bc:	687a      	ldr	r2, [r7, #4]
  4075be:	68d2      	ldr	r2, [r2, #12]
  4075c0:	b2d2      	uxtb	r2, r2
  4075c2:	701a      	strb	r2, [r3, #0]
  4075c4:	693b      	ldr	r3, [r7, #16]
  4075c6:	331d      	adds	r3, #29
  4075c8:	687a      	ldr	r2, [r7, #4]
  4075ca:	68d2      	ldr	r2, [r2, #12]
  4075cc:	b292      	uxth	r2, r2
  4075ce:	0a12      	lsrs	r2, r2, #8
  4075d0:	b292      	uxth	r2, r2
  4075d2:	b2d2      	uxtb	r2, r2
  4075d4:	701a      	strb	r2, [r3, #0]
  4075d6:	693b      	ldr	r3, [r7, #16]
  4075d8:	331e      	adds	r3, #30
  4075da:	687a      	ldr	r2, [r7, #4]
  4075dc:	68d2      	ldr	r2, [r2, #12]
  4075de:	0c12      	lsrs	r2, r2, #16
  4075e0:	b2d2      	uxtb	r2, r2
  4075e2:	701a      	strb	r2, [r3, #0]
  4075e4:	693b      	ldr	r3, [r7, #16]
  4075e6:	331f      	adds	r3, #31
  4075e8:	687a      	ldr	r2, [r7, #4]
  4075ea:	68d2      	ldr	r2, [r2, #12]
  4075ec:	0e12      	lsrs	r2, r2, #24
  4075ee:	b2d2      	uxtb	r2, r2
  4075f0:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4075f2:	693b      	ldr	r3, [r7, #16]
  4075f4:	331a      	adds	r3, #26
  4075f6:	687a      	ldr	r2, [r7, #4]
  4075f8:	6912      	ldr	r2, [r2, #16]
  4075fa:	b2d2      	uxtb	r2, r2
  4075fc:	701a      	strb	r2, [r3, #0]
  4075fe:	693b      	ldr	r3, [r7, #16]
  407600:	331b      	adds	r3, #27
  407602:	687a      	ldr	r2, [r7, #4]
  407604:	6912      	ldr	r2, [r2, #16]
  407606:	b292      	uxth	r2, r2
  407608:	0a12      	lsrs	r2, r2, #8
  40760a:	b292      	uxth	r2, r2
  40760c:	b2d2      	uxtb	r2, r2
  40760e:	701a      	strb	r2, [r3, #0]
  407610:	693b      	ldr	r3, [r7, #16]
  407612:	3314      	adds	r3, #20
  407614:	687a      	ldr	r2, [r7, #4]
  407616:	6912      	ldr	r2, [r2, #16]
  407618:	0c12      	lsrs	r2, r2, #16
  40761a:	b2d2      	uxtb	r2, r2
  40761c:	701a      	strb	r2, [r3, #0]
  40761e:	693b      	ldr	r3, [r7, #16]
  407620:	3315      	adds	r3, #21
  407622:	687a      	ldr	r2, [r7, #4]
  407624:	6912      	ldr	r2, [r2, #16]
  407626:	0c12      	lsrs	r2, r2, #16
  407628:	b292      	uxth	r2, r2
  40762a:	0a12      	lsrs	r2, r2, #8
  40762c:	b292      	uxth	r2, r2
  40762e:	b2d2      	uxtb	r2, r2
  407630:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
  407632:	4b1c      	ldr	r3, [pc, #112]	; (4076a4 <f_sync+0x190>)
  407634:	4798      	blx	r3
  407636:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
  407638:	693b      	ldr	r3, [r7, #16]
  40763a:	3316      	adds	r3, #22
  40763c:	68fa      	ldr	r2, [r7, #12]
  40763e:	b2d2      	uxtb	r2, r2
  407640:	701a      	strb	r2, [r3, #0]
  407642:	693b      	ldr	r3, [r7, #16]
  407644:	3317      	adds	r3, #23
  407646:	68fa      	ldr	r2, [r7, #12]
  407648:	b292      	uxth	r2, r2
  40764a:	0a12      	lsrs	r2, r2, #8
  40764c:	b292      	uxth	r2, r2
  40764e:	b2d2      	uxtb	r2, r2
  407650:	701a      	strb	r2, [r3, #0]
  407652:	693b      	ldr	r3, [r7, #16]
  407654:	3318      	adds	r3, #24
  407656:	68fa      	ldr	r2, [r7, #12]
  407658:	0c12      	lsrs	r2, r2, #16
  40765a:	b2d2      	uxtb	r2, r2
  40765c:	701a      	strb	r2, [r3, #0]
  40765e:	693b      	ldr	r3, [r7, #16]
  407660:	3319      	adds	r3, #25
  407662:	68fa      	ldr	r2, [r7, #12]
  407664:	0e12      	lsrs	r2, r2, #24
  407666:	b2d2      	uxtb	r2, r2
  407668:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
  40766a:	687b      	ldr	r3, [r7, #4]
  40766c:	799b      	ldrb	r3, [r3, #6]
  40766e:	f023 0320 	bic.w	r3, r3, #32
  407672:	b2da      	uxtb	r2, r3
  407674:	687b      	ldr	r3, [r7, #4]
  407676:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
  407678:	687b      	ldr	r3, [r7, #4]
  40767a:	681b      	ldr	r3, [r3, #0]
  40767c:	2201      	movs	r2, #1
  40767e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  407680:	687b      	ldr	r3, [r7, #4]
  407682:	681b      	ldr	r3, [r3, #0]
  407684:	4618      	mov	r0, r3
  407686:	4b08      	ldr	r3, [pc, #32]	; (4076a8 <f_sync+0x194>)
  407688:	4798      	blx	r3
  40768a:	4603      	mov	r3, r0
  40768c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
  40768e:	7dfb      	ldrb	r3, [r7, #23]
}
  407690:	4618      	mov	r0, r3
  407692:	371c      	adds	r7, #28
  407694:	46bd      	mov	sp, r7
  407696:	bd90      	pop	{r4, r7, pc}
  407698:	00406a2d 	.word	0x00406a2d
  40769c:	00404879 	.word	0x00404879
  4076a0:	00404e99 	.word	0x00404e99
  4076a4:	004049e9 	.word	0x004049e9
  4076a8:	00404f5d 	.word	0x00404f5d

004076ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4076ac:	b580      	push	{r7, lr}
  4076ae:	b084      	sub	sp, #16
  4076b0:	af00      	add	r7, sp, #0
  4076b2:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4076b4:	6878      	ldr	r0, [r7, #4]
  4076b6:	4b0c      	ldr	r3, [pc, #48]	; (4076e8 <f_close+0x3c>)
  4076b8:	4798      	blx	r3
  4076ba:	4603      	mov	r3, r0
  4076bc:	73fb      	strb	r3, [r7, #15]
#if _FS_SHARE
	if (res == FR_OK) {		/* Decrement open counter */
  4076be:	7bfb      	ldrb	r3, [r7, #15]
  4076c0:	2b00      	cmp	r3, #0
  4076c2:	d106      	bne.n	4076d2 <f_close+0x26>
		if (res == FR_OK) {
			res = dec_lock(fp->lockid);	
			unlock_fs(fp->fs, FR_OK);
		}
#else
		res = dec_lock(fp->lockid);
  4076c4:	687b      	ldr	r3, [r7, #4]
  4076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4076c8:	4618      	mov	r0, r3
  4076ca:	4b08      	ldr	r3, [pc, #32]	; (4076ec <f_close+0x40>)
  4076cc:	4798      	blx	r3
  4076ce:	4603      	mov	r3, r0
  4076d0:	73fb      	strb	r3, [r7, #15]
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  4076d2:	7bfb      	ldrb	r3, [r7, #15]
  4076d4:	2b00      	cmp	r3, #0
  4076d6:	d102      	bne.n	4076de <f_close+0x32>
  4076d8:	687b      	ldr	r3, [r7, #4]
  4076da:	2200      	movs	r2, #0
  4076dc:	601a      	str	r2, [r3, #0]
	return res;
  4076de:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
  4076e0:	4618      	mov	r0, r3
  4076e2:	3710      	adds	r7, #16
  4076e4:	46bd      	mov	sp, r7
  4076e6:	bd80      	pop	{r7, pc}
  4076e8:	00407515 	.word	0x00407515
  4076ec:	00404dc1 	.word	0x00404dc1

004076f0 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  4076f0:	b590      	push	{r4, r7, lr}
  4076f2:	b089      	sub	sp, #36	; 0x24
  4076f4:	af00      	add	r7, sp, #0
  4076f6:	6078      	str	r0, [r7, #4]
  4076f8:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4076fa:	687b      	ldr	r3, [r7, #4]
  4076fc:	681a      	ldr	r2, [r3, #0]
  4076fe:	687b      	ldr	r3, [r7, #4]
  407700:	889b      	ldrh	r3, [r3, #4]
  407702:	4610      	mov	r0, r2
  407704:	4619      	mov	r1, r3
  407706:	4b8b      	ldr	r3, [pc, #556]	; (407934 <f_lseek+0x244>)
  407708:	4798      	blx	r3
  40770a:	4603      	mov	r3, r0
  40770c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40770e:	7dfb      	ldrb	r3, [r7, #23]
  407710:	2b00      	cmp	r3, #0
  407712:	d001      	beq.n	407718 <f_lseek+0x28>
  407714:	7dfb      	ldrb	r3, [r7, #23]
  407716:	e14a      	b.n	4079ae <f_lseek+0x2be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  407718:	687b      	ldr	r3, [r7, #4]
  40771a:	799b      	ldrb	r3, [r3, #6]
  40771c:	b2db      	uxtb	r3, r3
  40771e:	b25b      	sxtb	r3, r3
  407720:	2b00      	cmp	r3, #0
  407722:	da01      	bge.n	407728 <f_lseek+0x38>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  407724:	2302      	movs	r3, #2
  407726:	e142      	b.n	4079ae <f_lseek+0x2be>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  407728:	687b      	ldr	r3, [r7, #4]
  40772a:	68da      	ldr	r2, [r3, #12]
  40772c:	683b      	ldr	r3, [r7, #0]
  40772e:	429a      	cmp	r2, r3
  407730:	d208      	bcs.n	407744 <f_lseek+0x54>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  407732:	687b      	ldr	r3, [r7, #4]
  407734:	799b      	ldrb	r3, [r3, #6]
  407736:	f003 0302 	and.w	r3, r3, #2
  40773a:	2b00      	cmp	r3, #0
  40773c:	d102      	bne.n	407744 <f_lseek+0x54>
#endif
			) ofs = fp->fsize;
  40773e:	687b      	ldr	r3, [r7, #4]
  407740:	68db      	ldr	r3, [r3, #12]
  407742:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
  407744:	687b      	ldr	r3, [r7, #4]
  407746:	689b      	ldr	r3, [r3, #8]
  407748:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
  40774a:	2300      	movs	r3, #0
  40774c:	61bb      	str	r3, [r7, #24]
  40774e:	687b      	ldr	r3, [r7, #4]
  407750:	69ba      	ldr	r2, [r7, #24]
  407752:	609a      	str	r2, [r3, #8]
		if (ofs) {
  407754:	683b      	ldr	r3, [r7, #0]
  407756:	2b00      	cmp	r3, #0
  407758:	f000 80c1 	beq.w	4078de <f_lseek+0x1ee>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  40775c:	687b      	ldr	r3, [r7, #4]
  40775e:	681b      	ldr	r3, [r3, #0]
  407760:	789b      	ldrb	r3, [r3, #2]
  407762:	025b      	lsls	r3, r3, #9
  407764:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
  407766:	693b      	ldr	r3, [r7, #16]
  407768:	2b00      	cmp	r3, #0
  40776a:	d01b      	beq.n	4077a4 <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  40776c:	683b      	ldr	r3, [r7, #0]
  40776e:	1e5a      	subs	r2, r3, #1
  407770:	68fb      	ldr	r3, [r7, #12]
  407772:	fbb2 f2f3 	udiv	r2, r2, r3
  407776:	693b      	ldr	r3, [r7, #16]
  407778:	1e59      	subs	r1, r3, #1
  40777a:	68fb      	ldr	r3, [r7, #12]
  40777c:	fbb1 f3f3 	udiv	r3, r1, r3

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
  407780:	429a      	cmp	r2, r3
  407782:	d30f      	bcc.n	4077a4 <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  407784:	693b      	ldr	r3, [r7, #16]
  407786:	1e5a      	subs	r2, r3, #1
  407788:	68fb      	ldr	r3, [r7, #12]
  40778a:	425b      	negs	r3, r3
  40778c:	401a      	ands	r2, r3
  40778e:	687b      	ldr	r3, [r7, #4]
  407790:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
  407792:	687b      	ldr	r3, [r7, #4]
  407794:	689b      	ldr	r3, [r3, #8]
  407796:	683a      	ldr	r2, [r7, #0]
  407798:	1ad3      	subs	r3, r2, r3
  40779a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
  40779c:	687b      	ldr	r3, [r7, #4]
  40779e:	695b      	ldr	r3, [r3, #20]
  4077a0:	61fb      	str	r3, [r7, #28]
  4077a2:	e02b      	b.n	4077fc <f_lseek+0x10c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  4077a4:	687b      	ldr	r3, [r7, #4]
  4077a6:	691b      	ldr	r3, [r3, #16]
  4077a8:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  4077aa:	69fb      	ldr	r3, [r7, #28]
  4077ac:	2b00      	cmp	r3, #0
  4077ae:	d122      	bne.n	4077f6 <f_lseek+0x106>
					clst = create_chain(fp->fs, 0);
  4077b0:	687b      	ldr	r3, [r7, #4]
  4077b2:	681b      	ldr	r3, [r3, #0]
  4077b4:	4618      	mov	r0, r3
  4077b6:	2100      	movs	r1, #0
  4077b8:	4b5f      	ldr	r3, [pc, #380]	; (407938 <f_lseek+0x248>)
  4077ba:	4798      	blx	r3
  4077bc:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4077be:	69fb      	ldr	r3, [r7, #28]
  4077c0:	2b01      	cmp	r3, #1
  4077c2:	d108      	bne.n	4077d6 <f_lseek+0xe6>
  4077c4:	687b      	ldr	r3, [r7, #4]
  4077c6:	799b      	ldrb	r3, [r3, #6]
  4077c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4077cc:	b2da      	uxtb	r2, r3
  4077ce:	687b      	ldr	r3, [r7, #4]
  4077d0:	719a      	strb	r2, [r3, #6]
  4077d2:	2302      	movs	r3, #2
  4077d4:	e0eb      	b.n	4079ae <f_lseek+0x2be>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4077d6:	69fb      	ldr	r3, [r7, #28]
  4077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4077dc:	d108      	bne.n	4077f0 <f_lseek+0x100>
  4077de:	687b      	ldr	r3, [r7, #4]
  4077e0:	799b      	ldrb	r3, [r3, #6]
  4077e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4077e6:	b2da      	uxtb	r2, r3
  4077e8:	687b      	ldr	r3, [r7, #4]
  4077ea:	719a      	strb	r2, [r3, #6]
  4077ec:	2301      	movs	r3, #1
  4077ee:	e0de      	b.n	4079ae <f_lseek+0x2be>
					fp->sclust = clst;
  4077f0:	687b      	ldr	r3, [r7, #4]
  4077f2:	69fa      	ldr	r2, [r7, #28]
  4077f4:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
  4077f6:	687b      	ldr	r3, [r7, #4]
  4077f8:	69fa      	ldr	r2, [r7, #28]
  4077fa:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
  4077fc:	69fb      	ldr	r3, [r7, #28]
  4077fe:	2b00      	cmp	r3, #0
  407800:	d06d      	beq.n	4078de <f_lseek+0x1ee>
				while (ofs > bcs) {						/* Cluster following loop */
  407802:	e045      	b.n	407890 <f_lseek+0x1a0>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  407804:	687b      	ldr	r3, [r7, #4]
  407806:	799b      	ldrb	r3, [r3, #6]
  407808:	f003 0302 	and.w	r3, r3, #2
  40780c:	2b00      	cmp	r3, #0
  40780e:	d00c      	beq.n	40782a <f_lseek+0x13a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  407810:	687b      	ldr	r3, [r7, #4]
  407812:	681b      	ldr	r3, [r3, #0]
  407814:	4618      	mov	r0, r3
  407816:	69f9      	ldr	r1, [r7, #28]
  407818:	4b47      	ldr	r3, [pc, #284]	; (407938 <f_lseek+0x248>)
  40781a:	4798      	blx	r3
  40781c:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
  40781e:	69fb      	ldr	r3, [r7, #28]
  407820:	2b00      	cmp	r3, #0
  407822:	d109      	bne.n	407838 <f_lseek+0x148>
							ofs = bcs; break;
  407824:	68fb      	ldr	r3, [r7, #12]
  407826:	603b      	str	r3, [r7, #0]
  407828:	e036      	b.n	407898 <f_lseek+0x1a8>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  40782a:	687b      	ldr	r3, [r7, #4]
  40782c:	681b      	ldr	r3, [r3, #0]
  40782e:	4618      	mov	r0, r3
  407830:	69f9      	ldr	r1, [r7, #28]
  407832:	4b42      	ldr	r3, [pc, #264]	; (40793c <f_lseek+0x24c>)
  407834:	4798      	blx	r3
  407836:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  407838:	69fb      	ldr	r3, [r7, #28]
  40783a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40783e:	d108      	bne.n	407852 <f_lseek+0x162>
  407840:	687b      	ldr	r3, [r7, #4]
  407842:	799b      	ldrb	r3, [r3, #6]
  407844:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407848:	b2da      	uxtb	r2, r3
  40784a:	687b      	ldr	r3, [r7, #4]
  40784c:	719a      	strb	r2, [r3, #6]
  40784e:	2301      	movs	r3, #1
  407850:	e0ad      	b.n	4079ae <f_lseek+0x2be>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  407852:	69fb      	ldr	r3, [r7, #28]
  407854:	2b01      	cmp	r3, #1
  407856:	d905      	bls.n	407864 <f_lseek+0x174>
  407858:	687b      	ldr	r3, [r7, #4]
  40785a:	681b      	ldr	r3, [r3, #0]
  40785c:	699a      	ldr	r2, [r3, #24]
  40785e:	69fb      	ldr	r3, [r7, #28]
  407860:	429a      	cmp	r2, r3
  407862:	d808      	bhi.n	407876 <f_lseek+0x186>
  407864:	687b      	ldr	r3, [r7, #4]
  407866:	799b      	ldrb	r3, [r3, #6]
  407868:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40786c:	b2da      	uxtb	r2, r3
  40786e:	687b      	ldr	r3, [r7, #4]
  407870:	719a      	strb	r2, [r3, #6]
  407872:	2302      	movs	r3, #2
  407874:	e09b      	b.n	4079ae <f_lseek+0x2be>
					fp->clust = clst;
  407876:	687b      	ldr	r3, [r7, #4]
  407878:	69fa      	ldr	r2, [r7, #28]
  40787a:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
  40787c:	687b      	ldr	r3, [r7, #4]
  40787e:	689a      	ldr	r2, [r3, #8]
  407880:	68fb      	ldr	r3, [r7, #12]
  407882:	441a      	add	r2, r3
  407884:	687b      	ldr	r3, [r7, #4]
  407886:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
  407888:	683a      	ldr	r2, [r7, #0]
  40788a:	68fb      	ldr	r3, [r7, #12]
  40788c:	1ad3      	subs	r3, r2, r3
  40788e:	603b      	str	r3, [r7, #0]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
  407890:	683a      	ldr	r2, [r7, #0]
  407892:	68fb      	ldr	r3, [r7, #12]
  407894:	429a      	cmp	r2, r3
  407896:	d8b5      	bhi.n	407804 <f_lseek+0x114>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
  407898:	687b      	ldr	r3, [r7, #4]
  40789a:	689a      	ldr	r2, [r3, #8]
  40789c:	683b      	ldr	r3, [r7, #0]
  40789e:	441a      	add	r2, r3
  4078a0:	687b      	ldr	r3, [r7, #4]
  4078a2:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
  4078a4:	683b      	ldr	r3, [r7, #0]
  4078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4078aa:	2b00      	cmp	r3, #0
  4078ac:	d017      	beq.n	4078de <f_lseek+0x1ee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  4078ae:	687b      	ldr	r3, [r7, #4]
  4078b0:	681b      	ldr	r3, [r3, #0]
  4078b2:	4618      	mov	r0, r3
  4078b4:	69f9      	ldr	r1, [r7, #28]
  4078b6:	4b22      	ldr	r3, [pc, #136]	; (407940 <f_lseek+0x250>)
  4078b8:	4798      	blx	r3
  4078ba:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  4078bc:	69bb      	ldr	r3, [r7, #24]
  4078be:	2b00      	cmp	r3, #0
  4078c0:	d108      	bne.n	4078d4 <f_lseek+0x1e4>
  4078c2:	687b      	ldr	r3, [r7, #4]
  4078c4:	799b      	ldrb	r3, [r3, #6]
  4078c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4078ca:	b2da      	uxtb	r2, r3
  4078cc:	687b      	ldr	r3, [r7, #4]
  4078ce:	719a      	strb	r2, [r3, #6]
  4078d0:	2302      	movs	r3, #2
  4078d2:	e06c      	b.n	4079ae <f_lseek+0x2be>
					nsect += ofs / SS(fp->fs);
  4078d4:	683b      	ldr	r3, [r7, #0]
  4078d6:	0a5b      	lsrs	r3, r3, #9
  4078d8:	69ba      	ldr	r2, [r7, #24]
  4078da:	4413      	add	r3, r2
  4078dc:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  4078de:	687b      	ldr	r3, [r7, #4]
  4078e0:	689b      	ldr	r3, [r3, #8]
  4078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4078e6:	2b00      	cmp	r3, #0
  4078e8:	d04f      	beq.n	40798a <f_lseek+0x29a>
  4078ea:	687b      	ldr	r3, [r7, #4]
  4078ec:	699a      	ldr	r2, [r3, #24]
  4078ee:	69bb      	ldr	r3, [r7, #24]
  4078f0:	429a      	cmp	r2, r3
  4078f2:	d04a      	beq.n	40798a <f_lseek+0x29a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
  4078f4:	687b      	ldr	r3, [r7, #4]
  4078f6:	799b      	ldrb	r3, [r3, #6]
  4078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4078fc:	2b00      	cmp	r3, #0
  4078fe:	d02a      	beq.n	407956 <f_lseek+0x266>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  407900:	687b      	ldr	r3, [r7, #4]
  407902:	681b      	ldr	r3, [r3, #0]
  407904:	7859      	ldrb	r1, [r3, #1]
  407906:	687b      	ldr	r3, [r7, #4]
  407908:	f103 0228 	add.w	r2, r3, #40	; 0x28
  40790c:	687b      	ldr	r3, [r7, #4]
  40790e:	699b      	ldr	r3, [r3, #24]
  407910:	4608      	mov	r0, r1
  407912:	4611      	mov	r1, r2
  407914:	461a      	mov	r2, r3
  407916:	2301      	movs	r3, #1
  407918:	4c0a      	ldr	r4, [pc, #40]	; (407944 <f_lseek+0x254>)
  40791a:	47a0      	blx	r4
  40791c:	4603      	mov	r3, r0
  40791e:	2b00      	cmp	r3, #0
  407920:	d012      	beq.n	407948 <f_lseek+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
  407922:	687b      	ldr	r3, [r7, #4]
  407924:	799b      	ldrb	r3, [r3, #6]
  407926:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40792a:	b2da      	uxtb	r2, r3
  40792c:	687b      	ldr	r3, [r7, #4]
  40792e:	719a      	strb	r2, [r3, #6]
  407930:	2301      	movs	r3, #1
  407932:	e03c      	b.n	4079ae <f_lseek+0x2be>
  407934:	00406a2d 	.word	0x00406a2d
  407938:	004054e9 	.word	0x004054e9
  40793c:	004050f5 	.word	0x004050f5
  407940:	004050b9 	.word	0x004050b9
  407944:	00404879 	.word	0x00404879
				fp->flag &= ~FA__DIRTY;
  407948:	687b      	ldr	r3, [r7, #4]
  40794a:	799b      	ldrb	r3, [r3, #6]
  40794c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  407950:	b2da      	uxtb	r2, r3
  407952:	687b      	ldr	r3, [r7, #4]
  407954:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
  407956:	687b      	ldr	r3, [r7, #4]
  407958:	681b      	ldr	r3, [r3, #0]
  40795a:	785a      	ldrb	r2, [r3, #1]
  40795c:	687b      	ldr	r3, [r7, #4]
  40795e:	3328      	adds	r3, #40	; 0x28
  407960:	4610      	mov	r0, r2
  407962:	4619      	mov	r1, r3
  407964:	69ba      	ldr	r2, [r7, #24]
  407966:	2301      	movs	r3, #1
  407968:	4c13      	ldr	r4, [pc, #76]	; (4079b8 <f_lseek+0x2c8>)
  40796a:	47a0      	blx	r4
  40796c:	4603      	mov	r3, r0
  40796e:	2b00      	cmp	r3, #0
  407970:	d008      	beq.n	407984 <f_lseek+0x294>
				ABORT(fp->fs, FR_DISK_ERR);
  407972:	687b      	ldr	r3, [r7, #4]
  407974:	799b      	ldrb	r3, [r3, #6]
  407976:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40797a:	b2da      	uxtb	r2, r3
  40797c:	687b      	ldr	r3, [r7, #4]
  40797e:	719a      	strb	r2, [r3, #6]
  407980:	2301      	movs	r3, #1
  407982:	e014      	b.n	4079ae <f_lseek+0x2be>
#endif
			fp->dsect = nsect;
  407984:	687b      	ldr	r3, [r7, #4]
  407986:	69ba      	ldr	r2, [r7, #24]
  407988:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  40798a:	687b      	ldr	r3, [r7, #4]
  40798c:	689a      	ldr	r2, [r3, #8]
  40798e:	687b      	ldr	r3, [r7, #4]
  407990:	68db      	ldr	r3, [r3, #12]
  407992:	429a      	cmp	r2, r3
  407994:	d90a      	bls.n	4079ac <f_lseek+0x2bc>
			fp->fsize = fp->fptr;
  407996:	687b      	ldr	r3, [r7, #4]
  407998:	689a      	ldr	r2, [r3, #8]
  40799a:	687b      	ldr	r3, [r7, #4]
  40799c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
  40799e:	687b      	ldr	r3, [r7, #4]
  4079a0:	799b      	ldrb	r3, [r3, #6]
  4079a2:	f043 0320 	orr.w	r3, r3, #32
  4079a6:	b2da      	uxtb	r2, r3
  4079a8:	687b      	ldr	r3, [r7, #4]
  4079aa:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
  4079ac:	7dfb      	ldrb	r3, [r7, #23]
}
  4079ae:	4618      	mov	r0, r3
  4079b0:	3724      	adds	r7, #36	; 0x24
  4079b2:	46bd      	mov	sp, r7
  4079b4:	bd90      	pop	{r4, r7, pc}
  4079b6:	bf00      	nop
  4079b8:	004047c9 	.word	0x004047c9

004079bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  4079bc:	b480      	push	{r7}
  4079be:	b085      	sub	sp, #20
  4079c0:	af00      	add	r7, sp, #0
  4079c2:	4603      	mov	r3, r0
  4079c4:	6039      	str	r1, [r7, #0]
  4079c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4079c8:	88fb      	ldrh	r3, [r7, #6]
  4079ca:	2b7f      	cmp	r3, #127	; 0x7f
  4079cc:	d802      	bhi.n	4079d4 <ff_convert+0x18>
		c = src;
  4079ce:	88fb      	ldrh	r3, [r7, #6]
  4079d0:	81fb      	strh	r3, [r7, #14]
  4079d2:	e025      	b.n	407a20 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4079d4:	683b      	ldr	r3, [r7, #0]
  4079d6:	2b00      	cmp	r3, #0
  4079d8:	d00c      	beq.n	4079f4 <ff_convert+0x38>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4079da:	88fb      	ldrh	r3, [r7, #6]
  4079dc:	2bff      	cmp	r3, #255	; 0xff
  4079de:	d806      	bhi.n	4079ee <ff_convert+0x32>
  4079e0:	88fb      	ldrh	r3, [r7, #6]
  4079e2:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
  4079e6:	4b12      	ldr	r3, [pc, #72]	; (407a30 <ff_convert+0x74>)
  4079e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  4079ec:	e000      	b.n	4079f0 <ff_convert+0x34>
  4079ee:	2300      	movs	r3, #0
  4079f0:	81fb      	strh	r3, [r7, #14]
  4079f2:	e015      	b.n	407a20 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  4079f4:	2300      	movs	r3, #0
  4079f6:	81fb      	strh	r3, [r7, #14]
  4079f8:	e00a      	b.n	407a10 <ff_convert+0x54>
				if (src == Tbl[c]) break;
  4079fa:	89fa      	ldrh	r2, [r7, #14]
  4079fc:	4b0c      	ldr	r3, [pc, #48]	; (407a30 <ff_convert+0x74>)
  4079fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  407a02:	88fa      	ldrh	r2, [r7, #6]
  407a04:	429a      	cmp	r2, r3
  407a06:	d100      	bne.n	407a0a <ff_convert+0x4e>
  407a08:	e005      	b.n	407a16 <ff_convert+0x5a>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  407a0a:	89fb      	ldrh	r3, [r7, #14]
  407a0c:	3301      	adds	r3, #1
  407a0e:	81fb      	strh	r3, [r7, #14]
  407a10:	89fb      	ldrh	r3, [r7, #14]
  407a12:	2b7f      	cmp	r3, #127	; 0x7f
  407a14:	d9f1      	bls.n	4079fa <ff_convert+0x3e>
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
  407a16:	89fb      	ldrh	r3, [r7, #14]
  407a18:	3380      	adds	r3, #128	; 0x80
  407a1a:	b29b      	uxth	r3, r3
  407a1c:	b2db      	uxtb	r3, r3
  407a1e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
  407a20:	89fb      	ldrh	r3, [r7, #14]
}
  407a22:	4618      	mov	r0, r3
  407a24:	3714      	adds	r7, #20
  407a26:	46bd      	mov	sp, r7
  407a28:	f85d 7b04 	ldr.w	r7, [sp], #4
  407a2c:	4770      	bx	lr
  407a2e:	bf00      	nop
  407a30:	00418778 	.word	0x00418778

00407a34 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
  407a34:	b480      	push	{r7}
  407a36:	b085      	sub	sp, #20
  407a38:	af00      	add	r7, sp, #0
  407a3a:	4603      	mov	r3, r0
  407a3c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  407a3e:	2300      	movs	r3, #0
  407a40:	60fb      	str	r3, [r7, #12]
  407a42:	e002      	b.n	407a4a <ff_wtoupper+0x16>
  407a44:	68fb      	ldr	r3, [r7, #12]
  407a46:	3301      	adds	r3, #1
  407a48:	60fb      	str	r3, [r7, #12]
  407a4a:	4b0f      	ldr	r3, [pc, #60]	; (407a88 <ff_wtoupper+0x54>)
  407a4c:	68fa      	ldr	r2, [r7, #12]
  407a4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  407a52:	2b00      	cmp	r3, #0
  407a54:	d006      	beq.n	407a64 <ff_wtoupper+0x30>
  407a56:	4b0c      	ldr	r3, [pc, #48]	; (407a88 <ff_wtoupper+0x54>)
  407a58:	68fa      	ldr	r2, [r7, #12]
  407a5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  407a5e:	88fa      	ldrh	r2, [r7, #6]
  407a60:	429a      	cmp	r2, r3
  407a62:	d1ef      	bne.n	407a44 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  407a64:	4b08      	ldr	r3, [pc, #32]	; (407a88 <ff_wtoupper+0x54>)
  407a66:	68fa      	ldr	r2, [r7, #12]
  407a68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  407a6c:	2b00      	cmp	r3, #0
  407a6e:	d004      	beq.n	407a7a <ff_wtoupper+0x46>
  407a70:	4b06      	ldr	r3, [pc, #24]	; (407a8c <ff_wtoupper+0x58>)
  407a72:	68fa      	ldr	r2, [r7, #12]
  407a74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  407a78:	e000      	b.n	407a7c <ff_wtoupper+0x48>
  407a7a:	88fb      	ldrh	r3, [r7, #6]
}
  407a7c:	4618      	mov	r0, r3
  407a7e:	3714      	adds	r7, #20
  407a80:	46bd      	mov	sp, r7
  407a82:	f85d 7b04 	ldr.w	r7, [sp], #4
  407a86:	4770      	bx	lr
  407a88:	00418878 	.word	0x00418878
  407a8c:	00418a58 	.word	0x00418a58

00407a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  407a90:	b480      	push	{r7}
  407a92:	b083      	sub	sp, #12
  407a94:	af00      	add	r7, sp, #0
  407a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  407a98:	687b      	ldr	r3, [r7, #4]
  407a9a:	f103 0208 	add.w	r2, r3, #8
  407a9e:	687b      	ldr	r3, [r7, #4]
  407aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  407aa2:	687b      	ldr	r3, [r7, #4]
  407aa4:	f04f 32ff 	mov.w	r2, #4294967295
  407aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  407aaa:	687b      	ldr	r3, [r7, #4]
  407aac:	f103 0208 	add.w	r2, r3, #8
  407ab0:	687b      	ldr	r3, [r7, #4]
  407ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  407ab4:	687b      	ldr	r3, [r7, #4]
  407ab6:	f103 0208 	add.w	r2, r3, #8
  407aba:	687b      	ldr	r3, [r7, #4]
  407abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  407abe:	687b      	ldr	r3, [r7, #4]
  407ac0:	2200      	movs	r2, #0
  407ac2:	601a      	str	r2, [r3, #0]
}
  407ac4:	370c      	adds	r7, #12
  407ac6:	46bd      	mov	sp, r7
  407ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
  407acc:	4770      	bx	lr
  407ace:	bf00      	nop

00407ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  407ad0:	b480      	push	{r7}
  407ad2:	b083      	sub	sp, #12
  407ad4:	af00      	add	r7, sp, #0
  407ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  407ad8:	687b      	ldr	r3, [r7, #4]
  407ada:	2200      	movs	r2, #0
  407adc:	611a      	str	r2, [r3, #16]
}
  407ade:	370c      	adds	r7, #12
  407ae0:	46bd      	mov	sp, r7
  407ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ae6:	4770      	bx	lr

00407ae8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  407ae8:	b480      	push	{r7}
  407aea:	b085      	sub	sp, #20
  407aec:	af00      	add	r7, sp, #0
  407aee:	6078      	str	r0, [r7, #4]
  407af0:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  407af2:	687b      	ldr	r3, [r7, #4]
  407af4:	685b      	ldr	r3, [r3, #4]
  407af6:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  407af8:	68fb      	ldr	r3, [r7, #12]
  407afa:	685a      	ldr	r2, [r3, #4]
  407afc:	683b      	ldr	r3, [r7, #0]
  407afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  407b00:	687b      	ldr	r3, [r7, #4]
  407b02:	685a      	ldr	r2, [r3, #4]
  407b04:	683b      	ldr	r3, [r7, #0]
  407b06:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  407b08:	68fb      	ldr	r3, [r7, #12]
  407b0a:	685b      	ldr	r3, [r3, #4]
  407b0c:	683a      	ldr	r2, [r7, #0]
  407b0e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  407b10:	68fb      	ldr	r3, [r7, #12]
  407b12:	683a      	ldr	r2, [r7, #0]
  407b14:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  407b16:	687b      	ldr	r3, [r7, #4]
  407b18:	683a      	ldr	r2, [r7, #0]
  407b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  407b1c:	683b      	ldr	r3, [r7, #0]
  407b1e:	687a      	ldr	r2, [r7, #4]
  407b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  407b22:	687b      	ldr	r3, [r7, #4]
  407b24:	681b      	ldr	r3, [r3, #0]
  407b26:	1c5a      	adds	r2, r3, #1
  407b28:	687b      	ldr	r3, [r7, #4]
  407b2a:	601a      	str	r2, [r3, #0]
}
  407b2c:	3714      	adds	r7, #20
  407b2e:	46bd      	mov	sp, r7
  407b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  407b34:	4770      	bx	lr
  407b36:	bf00      	nop

00407b38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  407b38:	b480      	push	{r7}
  407b3a:	b085      	sub	sp, #20
  407b3c:	af00      	add	r7, sp, #0
  407b3e:	6078      	str	r0, [r7, #4]
  407b40:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  407b42:	683b      	ldr	r3, [r7, #0]
  407b44:	681b      	ldr	r3, [r3, #0]
  407b46:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  407b48:	68bb      	ldr	r3, [r7, #8]
  407b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  407b4e:	d103      	bne.n	407b58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  407b50:	687b      	ldr	r3, [r7, #4]
  407b52:	691b      	ldr	r3, [r3, #16]
  407b54:	60fb      	str	r3, [r7, #12]
  407b56:	e00c      	b.n	407b72 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  407b58:	687b      	ldr	r3, [r7, #4]
  407b5a:	3308      	adds	r3, #8
  407b5c:	60fb      	str	r3, [r7, #12]
  407b5e:	e002      	b.n	407b66 <vListInsert+0x2e>
  407b60:	68fb      	ldr	r3, [r7, #12]
  407b62:	685b      	ldr	r3, [r3, #4]
  407b64:	60fb      	str	r3, [r7, #12]
  407b66:	68fb      	ldr	r3, [r7, #12]
  407b68:	685b      	ldr	r3, [r3, #4]
  407b6a:	681a      	ldr	r2, [r3, #0]
  407b6c:	68bb      	ldr	r3, [r7, #8]
  407b6e:	429a      	cmp	r2, r3
  407b70:	d9f6      	bls.n	407b60 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  407b72:	68fb      	ldr	r3, [r7, #12]
  407b74:	685a      	ldr	r2, [r3, #4]
  407b76:	683b      	ldr	r3, [r7, #0]
  407b78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  407b7a:	683b      	ldr	r3, [r7, #0]
  407b7c:	685b      	ldr	r3, [r3, #4]
  407b7e:	683a      	ldr	r2, [r7, #0]
  407b80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  407b82:	683b      	ldr	r3, [r7, #0]
  407b84:	68fa      	ldr	r2, [r7, #12]
  407b86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  407b88:	68fb      	ldr	r3, [r7, #12]
  407b8a:	683a      	ldr	r2, [r7, #0]
  407b8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  407b8e:	683b      	ldr	r3, [r7, #0]
  407b90:	687a      	ldr	r2, [r7, #4]
  407b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  407b94:	687b      	ldr	r3, [r7, #4]
  407b96:	681b      	ldr	r3, [r3, #0]
  407b98:	1c5a      	adds	r2, r3, #1
  407b9a:	687b      	ldr	r3, [r7, #4]
  407b9c:	601a      	str	r2, [r3, #0]
}
  407b9e:	3714      	adds	r7, #20
  407ba0:	46bd      	mov	sp, r7
  407ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ba6:	4770      	bx	lr

00407ba8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
  407ba8:	b480      	push	{r7}
  407baa:	b085      	sub	sp, #20
  407bac:	af00      	add	r7, sp, #0
  407bae:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  407bb0:	687b      	ldr	r3, [r7, #4]
  407bb2:	685b      	ldr	r3, [r3, #4]
  407bb4:	687a      	ldr	r2, [r7, #4]
  407bb6:	6892      	ldr	r2, [r2, #8]
  407bb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  407bba:	687b      	ldr	r3, [r7, #4]
  407bbc:	689b      	ldr	r3, [r3, #8]
  407bbe:	687a      	ldr	r2, [r7, #4]
  407bc0:	6852      	ldr	r2, [r2, #4]
  407bc2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  407bc4:	687b      	ldr	r3, [r7, #4]
  407bc6:	691b      	ldr	r3, [r3, #16]
  407bc8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  407bca:	68fb      	ldr	r3, [r7, #12]
  407bcc:	685a      	ldr	r2, [r3, #4]
  407bce:	687b      	ldr	r3, [r7, #4]
  407bd0:	429a      	cmp	r2, r3
  407bd2:	d103      	bne.n	407bdc <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  407bd4:	687b      	ldr	r3, [r7, #4]
  407bd6:	689a      	ldr	r2, [r3, #8]
  407bd8:	68fb      	ldr	r3, [r7, #12]
  407bda:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  407bdc:	687b      	ldr	r3, [r7, #4]
  407bde:	2200      	movs	r2, #0
  407be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  407be2:	68fb      	ldr	r3, [r7, #12]
  407be4:	681b      	ldr	r3, [r3, #0]
  407be6:	1e5a      	subs	r2, r3, #1
  407be8:	68fb      	ldr	r3, [r7, #12]
  407bea:	601a      	str	r2, [r3, #0]
}
  407bec:	3714      	adds	r7, #20
  407bee:	46bd      	mov	sp, r7
  407bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  407bf4:	4770      	bx	lr
  407bf6:	bf00      	nop

00407bf8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  407bf8:	b480      	push	{r7}
  407bfa:	b083      	sub	sp, #12
  407bfc:	af00      	add	r7, sp, #0
  407bfe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407c00:	687b      	ldr	r3, [r7, #4]
  407c02:	2b07      	cmp	r3, #7
  407c04:	d825      	bhi.n	407c52 <osc_get_rate+0x5a>
  407c06:	a201      	add	r2, pc, #4	; (adr r2, 407c0c <osc_get_rate+0x14>)
  407c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407c0c:	00407c2d 	.word	0x00407c2d
  407c10:	00407c33 	.word	0x00407c33
  407c14:	00407c39 	.word	0x00407c39
  407c18:	00407c3f 	.word	0x00407c3f
  407c1c:	00407c43 	.word	0x00407c43
  407c20:	00407c47 	.word	0x00407c47
  407c24:	00407c4b 	.word	0x00407c4b
  407c28:	00407c4f 	.word	0x00407c4f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407c2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407c30:	e010      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  407c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407c36:	e00d      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407c3c:	e00a      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407c3e:	4b08      	ldr	r3, [pc, #32]	; (407c60 <osc_get_rate+0x68>)
  407c40:	e008      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  407c42:	4b08      	ldr	r3, [pc, #32]	; (407c64 <osc_get_rate+0x6c>)
  407c44:	e006      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  407c46:	4b08      	ldr	r3, [pc, #32]	; (407c68 <osc_get_rate+0x70>)
  407c48:	e004      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407c4a:	4b08      	ldr	r3, [pc, #32]	; (407c6c <osc_get_rate+0x74>)
  407c4c:	e002      	b.n	407c54 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407c4e:	4b07      	ldr	r3, [pc, #28]	; (407c6c <osc_get_rate+0x74>)
  407c50:	e000      	b.n	407c54 <osc_get_rate+0x5c>
	}

	return 0;
  407c52:	2300      	movs	r3, #0
}
  407c54:	4618      	mov	r0, r3
  407c56:	370c      	adds	r7, #12
  407c58:	46bd      	mov	sp, r7
  407c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407c5e:	4770      	bx	lr
  407c60:	003d0900 	.word	0x003d0900
  407c64:	007a1200 	.word	0x007a1200
  407c68:	00b71b00 	.word	0x00b71b00
  407c6c:	00f42400 	.word	0x00f42400

00407c70 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407c70:	b580      	push	{r7, lr}
  407c72:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  407c74:	2006      	movs	r0, #6
  407c76:	4b04      	ldr	r3, [pc, #16]	; (407c88 <sysclk_get_main_hz+0x18>)
  407c78:	4798      	blx	r3
  407c7a:	4602      	mov	r2, r0
  407c7c:	4613      	mov	r3, r2
  407c7e:	011b      	lsls	r3, r3, #4
  407c80:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407c82:	4618      	mov	r0, r3
  407c84:	bd80      	pop	{r7, pc}
  407c86:	bf00      	nop
  407c88:	00407bf9 	.word	0x00407bf9

00407c8c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  407c8c:	b580      	push	{r7, lr}
  407c8e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407c90:	4b02      	ldr	r3, [pc, #8]	; (407c9c <sysclk_get_cpu_hz+0x10>)
  407c92:	4798      	blx	r3
  407c94:	4603      	mov	r3, r0
  407c96:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  407c98:	4618      	mov	r0, r3
  407c9a:	bd80      	pop	{r7, pc}
  407c9c:	00407c71 	.word	0x00407c71

00407ca0 <pxPortInitialiseStack>:
/**
 * \brief See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack(portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters)
{
  407ca0:	b480      	push	{r7}
  407ca2:	b085      	sub	sp, #20
  407ca4:	af00      	add	r7, sp, #0
  407ca6:	60f8      	str	r0, [r7, #12]
  407ca8:	60b9      	str	r1, [r7, #8]
  407caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--;  /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  407cac:	68fb      	ldr	r3, [r7, #12]
  407cae:	3b04      	subs	r3, #4
  407cb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;  /* xPSR */
  407cb2:	68fb      	ldr	r3, [r7, #12]
  407cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  407cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  407cba:	68fb      	ldr	r3, [r7, #12]
  407cbc:	3b04      	subs	r3, #4
  407cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pxCode;  /* PC */
  407cc0:	68ba      	ldr	r2, [r7, #8]
  407cc2:	68fb      	ldr	r3, [r7, #12]
  407cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  407cc6:	68fb      	ldr	r3, [r7, #12]
  407cc8:	3b04      	subs	r3, #4
  407cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;  /* LR */
  407ccc:	68fb      	ldr	r3, [r7, #12]
  407cce:	2200      	movs	r2, #0
  407cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;  /* R12, R3, R2 and R1. */
  407cd2:	68fb      	ldr	r3, [r7, #12]
  407cd4:	3b14      	subs	r3, #20
  407cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE) pvParameters;  /* R0 */
  407cd8:	687a      	ldr	r2, [r7, #4]
  407cda:	68fb      	ldr	r3, [r7, #12]
  407cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;  /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  407cde:	68fb      	ldr	r3, [r7, #12]
  407ce0:	3b20      	subs	r3, #32
  407ce2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  407ce4:	68fb      	ldr	r3, [r7, #12]
}
  407ce6:	4618      	mov	r0, r3
  407ce8:	3714      	adds	r7, #20
  407cea:	46bd      	mov	sp, r7
  407cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  407cf0:	4770      	bx	lr
  407cf2:	bf00      	nop

00407cf4 <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
  407cf4:	4b06      	ldr	r3, [pc, #24]	; (407d10 <pxCurrentTCBConst2>)
  407cf6:	6819      	ldr	r1, [r3, #0]
  407cf8:	6808      	ldr	r0, [r1, #0]
  407cfa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407cfe:	f380 8809 	msr	PSP, r0
  407d02:	f04f 0000 	mov.w	r0, #0
  407d06:	f380 8811 	msr	BASEPRI, r0
  407d0a:	f04e 0e0d 	orr.w	lr, lr, #13
  407d0e:	4770      	bx	lr

00407d10 <pxCurrentTCBConst2>:
  407d10:	20001748 	.word	0x20001748

00407d14 <vPortStartFirstTask>:
/**
 * \brief Start schedule first task.
 */
void vPortStartFirstTask(void)
{
	__asm volatile (" ldr r0, =0xE000ED08   \n"  /* Use the NVIC offset register to locate the stack. */
  407d14:	4802      	ldr	r0, [pc, #8]	; (407d20 <vPortStartFirstTask+0xc>)
  407d16:	6800      	ldr	r0, [r0, #0]
  407d18:	6800      	ldr	r0, [r0, #0]
  407d1a:	f380 8808 	msr	MSP, r0
  407d1e:	df00      	svc	0
  407d20:	e000ed08 	.word	0xe000ed08

00407d24 <xPortStartScheduler>:

/**
 * \brief See header file for description.
 */
portBASE_TYPE xPortStartScheduler(void)
{
  407d24:	b580      	push	{r7, lr}
  407d26:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
  407d28:	4b0a      	ldr	r3, [pc, #40]	; (407d54 <xPortStartScheduler+0x30>)
  407d2a:	4a0a      	ldr	r2, [pc, #40]	; (407d54 <xPortStartScheduler+0x30>)
  407d2c:	6812      	ldr	r2, [r2, #0]
  407d2e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
  407d32:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
  407d34:	4b07      	ldr	r3, [pc, #28]	; (407d54 <xPortStartScheduler+0x30>)
  407d36:	4a07      	ldr	r2, [pc, #28]	; (407d54 <xPortStartScheduler+0x30>)
  407d38:	6812      	ldr	r2, [r2, #0]
  407d3a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
  407d3e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
  407d40:	4b05      	ldr	r3, [pc, #20]	; (407d58 <xPortStartScheduler+0x34>)
  407d42:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  407d44:	4b05      	ldr	r3, [pc, #20]	; (407d5c <xPortStartScheduler+0x38>)
  407d46:	2200      	movs	r2, #0
  407d48:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
  407d4a:	4b05      	ldr	r3, [pc, #20]	; (407d60 <xPortStartScheduler+0x3c>)
  407d4c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  407d4e:	2300      	movs	r3, #0
}
  407d50:	4618      	mov	r0, r3
  407d52:	bd80      	pop	{r7, pc}
  407d54:	e000ed20 	.word	0xe000ed20
  407d58:	00407e3d 	.word	0x00407e3d
  407d5c:	20000040 	.word	0x20000040
  407d60:	00407d15 	.word	0x00407d15

00407d64 <vPortYieldFromISR>:

/**
 * \brief Yield PendSV to request a context switch.
 */
void vPortYieldFromISR(void)
{
  407d64:	b480      	push	{r7}
  407d66:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  407d68:	4b03      	ldr	r3, [pc, #12]	; (407d78 <vPortYieldFromISR+0x14>)
  407d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  407d6e:	601a      	str	r2, [r3, #0]
}
  407d70:	46bd      	mov	sp, r7
  407d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d76:	4770      	bx	lr
  407d78:	e000ed04 	.word	0xe000ed04

00407d7c <vPortEnterCritical>:

/**
 * \brief Enter Critical code.
 */
void vPortEnterCritical(void)
{
  407d7c:	b480      	push	{r7}
  407d7e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  407d80:	f04f 0000 	mov.w	r0, #0
  407d84:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
  407d88:	4b04      	ldr	r3, [pc, #16]	; (407d9c <vPortEnterCritical+0x20>)
  407d8a:	681b      	ldr	r3, [r3, #0]
  407d8c:	1c5a      	adds	r2, r3, #1
  407d8e:	4b03      	ldr	r3, [pc, #12]	; (407d9c <vPortEnterCritical+0x20>)
  407d90:	601a      	str	r2, [r3, #0]
}
  407d92:	46bd      	mov	sp, r7
  407d94:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d98:	4770      	bx	lr
  407d9a:	bf00      	nop
  407d9c:	20000040 	.word	0x20000040

00407da0 <vPortExitCritical>:

/**
 * \brief Exit Critical code.
 */
void vPortExitCritical(void)
{
  407da0:	b480      	push	{r7}
  407da2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  407da4:	4b08      	ldr	r3, [pc, #32]	; (407dc8 <vPortExitCritical+0x28>)
  407da6:	681b      	ldr	r3, [r3, #0]
  407da8:	1e5a      	subs	r2, r3, #1
  407daa:	4b07      	ldr	r3, [pc, #28]	; (407dc8 <vPortExitCritical+0x28>)
  407dac:	601a      	str	r2, [r3, #0]
	if (uxCriticalNesting == 0) {
  407dae:	4b06      	ldr	r3, [pc, #24]	; (407dc8 <vPortExitCritical+0x28>)
  407db0:	681b      	ldr	r3, [r3, #0]
  407db2:	2b00      	cmp	r3, #0
  407db4:	d103      	bne.n	407dbe <vPortExitCritical+0x1e>
		portENABLE_INTERRUPTS();
  407db6:	f04f 0000 	mov.w	r0, #0
  407dba:	f380 8811 	msr	BASEPRI, r0
	}
}
  407dbe:	46bd      	mov	sp, r7
  407dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  407dc4:	4770      	bx	lr
  407dc6:	bf00      	nop
  407dc8:	20000040 	.word	0x20000040

00407dcc <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
  407dcc:	f3ef 8009 	mrs	r0, PSP
  407dd0:	4b0c      	ldr	r3, [pc, #48]	; (407e04 <pxCurrentTCBConst>)
  407dd2:	681a      	ldr	r2, [r3, #0]
  407dd4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407dd8:	6010      	str	r0, [r2, #0]
  407dda:	e92d 4008 	stmdb	sp!, {r3, lr}
  407dde:	f04f 0000 	mov.w	r0, #0
  407de2:	f380 8811 	msr	BASEPRI, r0
  407de6:	f000 ff6b 	bl	408cc0 <vTaskSwitchContext>
  407dea:	f04f 0000 	mov.w	r0, #0
  407dee:	f380 8811 	msr	BASEPRI, r0
  407df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  407df6:	6819      	ldr	r1, [r3, #0]
  407df8:	6808      	ldr	r0, [r1, #0]
  407dfa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407dfe:	f380 8809 	msr	PSP, r0
  407e02:	4770      	bx	lr

00407e04 <pxCurrentTCBConst>:
  407e04:	20001748 	.word	0x20001748

00407e08 <xPortSysTickHandler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void xPortSysTickHandler(void)
{
  407e08:	b580      	push	{r7, lr}
  407e0a:	b082      	sub	sp, #8
  407e0c:	af00      	add	r7, sp, #0
	unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
  407e0e:	4b09      	ldr	r3, [pc, #36]	; (407e34 <xPortSysTickHandler+0x2c>)
  407e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  407e14:	601a      	str	r2, [r3, #0]
#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
  407e16:	2300      	movs	r3, #0
  407e18:	607b      	str	r3, [r7, #4]
  407e1a:	f04f 0000 	mov.w	r0, #0
  407e1e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
  407e22:	4b05      	ldr	r3, [pc, #20]	; (407e38 <xPortSysTickHandler+0x30>)
  407e24:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulDummy);
  407e26:	f04f 0000 	mov.w	r0, #0
  407e2a:	f380 8811 	msr	BASEPRI, r0
}
  407e2e:	3708      	adds	r7, #8
  407e30:	46bd      	mov	sp, r7
  407e32:	bd80      	pop	{r7, pc}
  407e34:	e000ed04 	.word	0xe000ed04
  407e38:	00408b8d 	.word	0x00408b8d

00407e3c <prvSetupTimerInterrupt>:
/**
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
  407e3c:	b598      	push	{r3, r4, r7, lr}
  407e3e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  407e40:	4c06      	ldr	r4, [pc, #24]	; (407e5c <prvSetupTimerInterrupt+0x20>)
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  407e42:	4b07      	ldr	r3, [pc, #28]	; (407e60 <prvSetupTimerInterrupt+0x24>)
  407e44:	4798      	blx	r3
  407e46:	4602      	mov	r2, r0
  407e48:	4b06      	ldr	r3, [pc, #24]	; (407e64 <prvSetupTimerInterrupt+0x28>)
  407e4a:	fba3 1302 	umull	r1, r3, r3, r2
  407e4e:	099b      	lsrs	r3, r3, #6
  407e50:	3b01      	subs	r3, #1
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
  407e52:	6023      	str	r3, [r4, #0]
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
	*(portNVIC_SYSTICK_CTRL) =
  407e54:	4b04      	ldr	r3, [pc, #16]	; (407e68 <prvSetupTimerInterrupt+0x2c>)
  407e56:	2207      	movs	r2, #7
  407e58:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT |
			portNVIC_SYSTICK_ENABLE;
}
  407e5a:	bd98      	pop	{r3, r4, r7, pc}
  407e5c:	e000e014 	.word	0xe000e014
  407e60:	00407c8d 	.word	0x00407c8d
  407e64:	10624dd3 	.word	0x10624dd3
  407e68:	e000e010 	.word	0xe000e010

00407e6c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  407e6c:	b580      	push	{r7, lr}
  407e6e:	b084      	sub	sp, #16
  407e70:	af00      	add	r7, sp, #0
  407e72:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
  407e74:	4b06      	ldr	r3, [pc, #24]	; (407e90 <pvPortMalloc+0x24>)
  407e76:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  407e78:	6878      	ldr	r0, [r7, #4]
  407e7a:	4b06      	ldr	r3, [pc, #24]	; (407e94 <pvPortMalloc+0x28>)
  407e7c:	4798      	blx	r3
  407e7e:	4603      	mov	r3, r0
  407e80:	60fb      	str	r3, [r7, #12]
	}
	xTaskResumeAll();
  407e82:	4b05      	ldr	r3, [pc, #20]	; (407e98 <pvPortMalloc+0x2c>)
  407e84:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  407e86:	68fb      	ldr	r3, [r7, #12]
}
  407e88:	4618      	mov	r0, r3
  407e8a:	3710      	adds	r7, #16
  407e8c:	46bd      	mov	sp, r7
  407e8e:	bd80      	pop	{r7, pc}
  407e90:	0040892d 	.word	0x0040892d
  407e94:	0040eb05 	.word	0x0040eb05
  407e98:	00408949 	.word	0x00408949

00407e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  407e9c:	b580      	push	{r7, lr}
  407e9e:	b082      	sub	sp, #8
  407ea0:	af00      	add	r7, sp, #0
  407ea2:	6078      	str	r0, [r7, #4]
	if( pv )
  407ea4:	687b      	ldr	r3, [r7, #4]
  407ea6:	2b00      	cmp	r3, #0
  407ea8:	d006      	beq.n	407eb8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
  407eaa:	4b05      	ldr	r3, [pc, #20]	; (407ec0 <vPortFree+0x24>)
  407eac:	4798      	blx	r3
		{
			free( pv );
  407eae:	6878      	ldr	r0, [r7, #4]
  407eb0:	4b04      	ldr	r3, [pc, #16]	; (407ec4 <vPortFree+0x28>)
  407eb2:	4798      	blx	r3
		}
		xTaskResumeAll();
  407eb4:	4b04      	ldr	r3, [pc, #16]	; (407ec8 <vPortFree+0x2c>)
  407eb6:	4798      	blx	r3
	}
}
  407eb8:	3708      	adds	r7, #8
  407eba:	46bd      	mov	sp, r7
  407ebc:	bd80      	pop	{r7, pc}
  407ebe:	bf00      	nop
  407ec0:	0040892d 	.word	0x0040892d
  407ec4:	0040eb15 	.word	0x0040eb15
  407ec8:	00408949 	.word	0x00408949

00407ecc <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
  407ecc:	b580      	push	{r7, lr}
  407ece:	b086      	sub	sp, #24
  407ed0:	af00      	add	r7, sp, #0
  407ed2:	6078      	str	r0, [r7, #4]
  407ed4:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  407ed6:	2300      	movs	r3, #0
  407ed8:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  407eda:	687b      	ldr	r3, [r7, #4]
  407edc:	2b00      	cmp	r3, #0
  407ede:	d04e      	beq.n	407f7e <xQueueCreate+0xb2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  407ee0:	204c      	movs	r0, #76	; 0x4c
  407ee2:	4b29      	ldr	r3, [pc, #164]	; (407f88 <xQueueCreate+0xbc>)
  407ee4:	4798      	blx	r3
  407ee6:	6138      	str	r0, [r7, #16]
		if( pxNewQueue != NULL )
  407ee8:	693b      	ldr	r3, [r7, #16]
  407eea:	2b00      	cmp	r3, #0
  407eec:	d047      	beq.n	407f7e <xQueueCreate+0xb2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  407eee:	687b      	ldr	r3, [r7, #4]
  407ef0:	683a      	ldr	r2, [r7, #0]
  407ef2:	fb02 f303 	mul.w	r3, r2, r3
  407ef6:	3301      	adds	r3, #1
  407ef8:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  407efa:	68f8      	ldr	r0, [r7, #12]
  407efc:	4b22      	ldr	r3, [pc, #136]	; (407f88 <xQueueCreate+0xbc>)
  407efe:	4798      	blx	r3
  407f00:	4602      	mov	r2, r0
  407f02:	693b      	ldr	r3, [r7, #16]
  407f04:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  407f06:	693b      	ldr	r3, [r7, #16]
  407f08:	681b      	ldr	r3, [r3, #0]
  407f0a:	2b00      	cmp	r3, #0
  407f0c:	d034      	beq.n	407f78 <xQueueCreate+0xac>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
  407f0e:	693b      	ldr	r3, [r7, #16]
  407f10:	681a      	ldr	r2, [r3, #0]
  407f12:	687b      	ldr	r3, [r7, #4]
  407f14:	6839      	ldr	r1, [r7, #0]
  407f16:	fb01 f303 	mul.w	r3, r1, r3
  407f1a:	441a      	add	r2, r3
  407f1c:	693b      	ldr	r3, [r7, #16]
  407f1e:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  407f20:	693b      	ldr	r3, [r7, #16]
  407f22:	2200      	movs	r2, #0
  407f24:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
  407f26:	693b      	ldr	r3, [r7, #16]
  407f28:	681a      	ldr	r2, [r3, #0]
  407f2a:	693b      	ldr	r3, [r7, #16]
  407f2c:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
  407f2e:	693b      	ldr	r3, [r7, #16]
  407f30:	681a      	ldr	r2, [r3, #0]
  407f32:	687b      	ldr	r3, [r7, #4]
  407f34:	3b01      	subs	r3, #1
  407f36:	6839      	ldr	r1, [r7, #0]
  407f38:	fb01 f303 	mul.w	r3, r1, r3
  407f3c:	441a      	add	r2, r3
  407f3e:	693b      	ldr	r3, [r7, #16]
  407f40:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
  407f42:	693b      	ldr	r3, [r7, #16]
  407f44:	687a      	ldr	r2, [r7, #4]
  407f46:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  407f48:	693b      	ldr	r3, [r7, #16]
  407f4a:	683a      	ldr	r2, [r7, #0]
  407f4c:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
  407f4e:	693b      	ldr	r3, [r7, #16]
  407f50:	f04f 32ff 	mov.w	r2, #4294967295
  407f54:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
  407f56:	693b      	ldr	r3, [r7, #16]
  407f58:	f04f 32ff 	mov.w	r2, #4294967295
  407f5c:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  407f5e:	693b      	ldr	r3, [r7, #16]
  407f60:	3310      	adds	r3, #16
  407f62:	4618      	mov	r0, r3
  407f64:	4b09      	ldr	r3, [pc, #36]	; (407f8c <xQueueCreate+0xc0>)
  407f66:	4798      	blx	r3
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  407f68:	693b      	ldr	r3, [r7, #16]
  407f6a:	3324      	adds	r3, #36	; 0x24
  407f6c:	4618      	mov	r0, r3
  407f6e:	4b07      	ldr	r3, [pc, #28]	; (407f8c <xQueueCreate+0xc0>)
  407f70:	4798      	blx	r3

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  407f72:	693b      	ldr	r3, [r7, #16]
  407f74:	617b      	str	r3, [r7, #20]
  407f76:	e002      	b.n	407f7e <xQueueCreate+0xb2>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
  407f78:	6938      	ldr	r0, [r7, #16]
  407f7a:	4b05      	ldr	r3, [pc, #20]	; (407f90 <xQueueCreate+0xc4>)
  407f7c:	4798      	blx	r3
		}
	}

	configASSERT( xReturn );

	return xReturn;
  407f7e:	697b      	ldr	r3, [r7, #20]
}
  407f80:	4618      	mov	r0, r3
  407f82:	3718      	adds	r7, #24
  407f84:	46bd      	mov	sp, r7
  407f86:	bd80      	pop	{r7, pc}
  407f88:	00407e6d 	.word	0x00407e6d
  407f8c:	00407a91 	.word	0x00407a91
  407f90:	00407e9d 	.word	0x00407e9d

00407f94 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
  407f94:	b590      	push	{r4, r7, lr}
  407f96:	b083      	sub	sp, #12
  407f98:	af00      	add	r7, sp, #0
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  407f9a:	204c      	movs	r0, #76	; 0x4c
  407f9c:	4b1b      	ldr	r3, [pc, #108]	; (40800c <xQueueCreateMutex+0x78>)
  407f9e:	4798      	blx	r3
  407fa0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
  407fa2:	687b      	ldr	r3, [r7, #4]
  407fa4:	2b00      	cmp	r3, #0
  407fa6:	d02c      	beq.n	408002 <xQueueCreateMutex+0x6e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  407fa8:	687b      	ldr	r3, [r7, #4]
  407faa:	2200      	movs	r2, #0
  407fac:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  407fae:	687b      	ldr	r3, [r7, #4]
  407fb0:	2200      	movs	r2, #0
  407fb2:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  407fb4:	687b      	ldr	r3, [r7, #4]
  407fb6:	2200      	movs	r2, #0
  407fb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
  407fba:	687b      	ldr	r3, [r7, #4]
  407fbc:	2200      	movs	r2, #0
  407fbe:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  407fc0:	687b      	ldr	r3, [r7, #4]
  407fc2:	2200      	movs	r2, #0
  407fc4:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
  407fc6:	687b      	ldr	r3, [r7, #4]
  407fc8:	2201      	movs	r2, #1
  407fca:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
  407fcc:	687b      	ldr	r3, [r7, #4]
  407fce:	2200      	movs	r2, #0
  407fd0:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  407fd2:	687b      	ldr	r3, [r7, #4]
  407fd4:	f04f 32ff 	mov.w	r2, #4294967295
  407fd8:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  407fda:	687b      	ldr	r3, [r7, #4]
  407fdc:	f04f 32ff 	mov.w	r2, #4294967295
  407fe0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  407fe2:	687b      	ldr	r3, [r7, #4]
  407fe4:	3310      	adds	r3, #16
  407fe6:	4618      	mov	r0, r3
  407fe8:	4b09      	ldr	r3, [pc, #36]	; (408010 <xQueueCreateMutex+0x7c>)
  407fea:	4798      	blx	r3
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  407fec:	687b      	ldr	r3, [r7, #4]
  407fee:	3324      	adds	r3, #36	; 0x24
  407ff0:	4618      	mov	r0, r3
  407ff2:	4b07      	ldr	r3, [pc, #28]	; (408010 <xQueueCreateMutex+0x7c>)
  407ff4:	4798      	blx	r3

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
  407ff6:	6878      	ldr	r0, [r7, #4]
  407ff8:	2100      	movs	r1, #0
  407ffa:	2200      	movs	r2, #0
  407ffc:	2300      	movs	r3, #0
  407ffe:	4c05      	ldr	r4, [pc, #20]	; (408014 <xQueueCreateMutex+0x80>)
  408000:	47a0      	blx	r4
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
  408002:	687b      	ldr	r3, [r7, #4]
	}
  408004:	4618      	mov	r0, r3
  408006:	370c      	adds	r7, #12
  408008:	46bd      	mov	sp, r7
  40800a:	bd90      	pop	{r4, r7, pc}
  40800c:	00407e6d 	.word	0x00407e6d
  408010:	00407a91 	.word	0x00407a91
  408014:	00408019 	.word	0x00408019

00408018 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  408018:	b580      	push	{r7, lr}
  40801a:	b088      	sub	sp, #32
  40801c:	af00      	add	r7, sp, #0
  40801e:	60f8      	str	r0, [r7, #12]
  408020:	60b9      	str	r1, [r7, #8]
  408022:	607a      	str	r2, [r7, #4]
  408024:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  408026:	2300      	movs	r3, #0
  408028:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40802a:	4b3e      	ldr	r3, [pc, #248]	; (408124 <xQueueGenericSend+0x10c>)
  40802c:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40802e:	68fb      	ldr	r3, [r7, #12]
  408030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408032:	68fb      	ldr	r3, [r7, #12]
  408034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408036:	429a      	cmp	r2, r3
  408038:	d216      	bcs.n	408068 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40803a:	68f8      	ldr	r0, [r7, #12]
  40803c:	68b9      	ldr	r1, [r7, #8]
  40803e:	683a      	ldr	r2, [r7, #0]
  408040:	4b39      	ldr	r3, [pc, #228]	; (408128 <xQueueGenericSend+0x110>)
  408042:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408044:	68fb      	ldr	r3, [r7, #12]
  408046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408048:	2b00      	cmp	r3, #0
  40804a:	d009      	beq.n	408060 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40804c:	68fb      	ldr	r3, [r7, #12]
  40804e:	3324      	adds	r3, #36	; 0x24
  408050:	4618      	mov	r0, r3
  408052:	4b36      	ldr	r3, [pc, #216]	; (40812c <xQueueGenericSend+0x114>)
  408054:	4798      	blx	r3
  408056:	4603      	mov	r3, r0
  408058:	2b01      	cmp	r3, #1
  40805a:	d101      	bne.n	408060 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40805c:	4b34      	ldr	r3, [pc, #208]	; (408130 <xQueueGenericSend+0x118>)
  40805e:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  408060:	4b34      	ldr	r3, [pc, #208]	; (408134 <xQueueGenericSend+0x11c>)
  408062:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  408064:	2301      	movs	r3, #1
  408066:	e059      	b.n	40811c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  408068:	687b      	ldr	r3, [r7, #4]
  40806a:	2b00      	cmp	r3, #0
  40806c:	d103      	bne.n	408076 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40806e:	4b31      	ldr	r3, [pc, #196]	; (408134 <xQueueGenericSend+0x11c>)
  408070:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  408072:	2300      	movs	r3, #0
  408074:	e052      	b.n	40811c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
  408076:	69fb      	ldr	r3, [r7, #28]
  408078:	2b00      	cmp	r3, #0
  40807a:	d106      	bne.n	40808a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40807c:	f107 0314 	add.w	r3, r7, #20
  408080:	4618      	mov	r0, r3
  408082:	4b2d      	ldr	r3, [pc, #180]	; (408138 <xQueueGenericSend+0x120>)
  408084:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  408086:	2301      	movs	r3, #1
  408088:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40808a:	4b2a      	ldr	r3, [pc, #168]	; (408134 <xQueueGenericSend+0x11c>)
  40808c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40808e:	4b2b      	ldr	r3, [pc, #172]	; (40813c <xQueueGenericSend+0x124>)
  408090:	4798      	blx	r3
		prvLockQueue( pxQueue );
  408092:	4b24      	ldr	r3, [pc, #144]	; (408124 <xQueueGenericSend+0x10c>)
  408094:	4798      	blx	r3
  408096:	68fb      	ldr	r3, [r7, #12]
  408098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40809a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40809e:	d102      	bne.n	4080a6 <xQueueGenericSend+0x8e>
  4080a0:	68fb      	ldr	r3, [r7, #12]
  4080a2:	2200      	movs	r2, #0
  4080a4:	645a      	str	r2, [r3, #68]	; 0x44
  4080a6:	68fb      	ldr	r3, [r7, #12]
  4080a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4080ae:	d102      	bne.n	4080b6 <xQueueGenericSend+0x9e>
  4080b0:	68fb      	ldr	r3, [r7, #12]
  4080b2:	2200      	movs	r2, #0
  4080b4:	649a      	str	r2, [r3, #72]	; 0x48
  4080b6:	4b1f      	ldr	r3, [pc, #124]	; (408134 <xQueueGenericSend+0x11c>)
  4080b8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4080ba:	f107 0214 	add.w	r2, r7, #20
  4080be:	1d3b      	adds	r3, r7, #4
  4080c0:	4610      	mov	r0, r2
  4080c2:	4619      	mov	r1, r3
  4080c4:	4b1e      	ldr	r3, [pc, #120]	; (408140 <xQueueGenericSend+0x128>)
  4080c6:	4798      	blx	r3
  4080c8:	4603      	mov	r3, r0
  4080ca:	2b00      	cmp	r3, #0
  4080cc:	d11e      	bne.n	40810c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) )
  4080ce:	68f8      	ldr	r0, [r7, #12]
  4080d0:	4b1c      	ldr	r3, [pc, #112]	; (408144 <xQueueGenericSend+0x12c>)
  4080d2:	4798      	blx	r3
  4080d4:	4603      	mov	r3, r0
  4080d6:	2b00      	cmp	r3, #0
  4080d8:	d012      	beq.n	408100 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4080da:	68fb      	ldr	r3, [r7, #12]
  4080dc:	f103 0210 	add.w	r2, r3, #16
  4080e0:	687b      	ldr	r3, [r7, #4]
  4080e2:	4610      	mov	r0, r2
  4080e4:	4619      	mov	r1, r3
  4080e6:	4b18      	ldr	r3, [pc, #96]	; (408148 <xQueueGenericSend+0x130>)
  4080e8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4080ea:	68f8      	ldr	r0, [r7, #12]
  4080ec:	4b17      	ldr	r3, [pc, #92]	; (40814c <xQueueGenericSend+0x134>)
  4080ee:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
  4080f0:	4b17      	ldr	r3, [pc, #92]	; (408150 <xQueueGenericSend+0x138>)
  4080f2:	4798      	blx	r3
  4080f4:	4603      	mov	r3, r0
  4080f6:	2b00      	cmp	r3, #0
  4080f8:	d10f      	bne.n	40811a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
  4080fa:	4b0d      	ldr	r3, [pc, #52]	; (408130 <xQueueGenericSend+0x118>)
  4080fc:	4798      	blx	r3
  4080fe:	e00c      	b.n	40811a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408100:	68f8      	ldr	r0, [r7, #12]
  408102:	4b12      	ldr	r3, [pc, #72]	; (40814c <xQueueGenericSend+0x134>)
  408104:	4798      	blx	r3
				( void ) xTaskResumeAll();
  408106:	4b12      	ldr	r3, [pc, #72]	; (408150 <xQueueGenericSend+0x138>)
  408108:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  40810a:	e78e      	b.n	40802a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40810c:	68f8      	ldr	r0, [r7, #12]
  40810e:	4b0f      	ldr	r3, [pc, #60]	; (40814c <xQueueGenericSend+0x134>)
  408110:	4798      	blx	r3
			( void ) xTaskResumeAll();
  408112:	4b0f      	ldr	r3, [pc, #60]	; (408150 <xQueueGenericSend+0x138>)
  408114:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  408116:	2300      	movs	r3, #0
  408118:	e000      	b.n	40811c <xQueueGenericSend+0x104>
		}
	}
  40811a:	e786      	b.n	40802a <xQueueGenericSend+0x12>
}
  40811c:	4618      	mov	r0, r3
  40811e:	3720      	adds	r7, #32
  408120:	46bd      	mov	sp, r7
  408122:	bd80      	pop	{r7, pc}
  408124:	00407d7d 	.word	0x00407d7d
  408128:	004083a9 	.word	0x004083a9
  40812c:	00408e89 	.word	0x00408e89
  408130:	00407d65 	.word	0x00407d65
  408134:	00407da1 	.word	0x00407da1
  408138:	00408f31 	.word	0x00408f31
  40813c:	0040892d 	.word	0x0040892d
  408140:	00408f5d 	.word	0x00408f5d
  408144:	00408595 	.word	0x00408595
  408148:	00408dc9 	.word	0x00408dc9
  40814c:	004084b9 	.word	0x004084b9
  408150:	00408949 	.word	0x00408949

00408154 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  408154:	b580      	push	{r7, lr}
  408156:	b086      	sub	sp, #24
  408158:	af00      	add	r7, sp, #0
  40815a:	60f8      	str	r0, [r7, #12]
  40815c:	60b9      	str	r1, [r7, #8]
  40815e:	607a      	str	r2, [r7, #4]
  408160:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  408162:	2300      	movs	r3, #0
  408164:	613b      	str	r3, [r7, #16]
  408166:	f04f 0000 	mov.w	r0, #0
  40816a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40816e:	68fb      	ldr	r3, [r7, #12]
  408170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408172:	68fb      	ldr	r3, [r7, #12]
  408174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408176:	429a      	cmp	r2, r3
  408178:	d221      	bcs.n	4081be <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40817a:	68f8      	ldr	r0, [r7, #12]
  40817c:	68b9      	ldr	r1, [r7, #8]
  40817e:	683a      	ldr	r2, [r7, #0]
  408180:	4b14      	ldr	r3, [pc, #80]	; (4081d4 <xQueueGenericSendFromISR+0x80>)
  408182:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  408184:	68fb      	ldr	r3, [r7, #12]
  408186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408188:	f1b3 3fff 	cmp.w	r3, #4294967295
  40818c:	d10f      	bne.n	4081ae <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40818e:	68fb      	ldr	r3, [r7, #12]
  408190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408192:	2b00      	cmp	r3, #0
  408194:	d010      	beq.n	4081b8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408196:	68fb      	ldr	r3, [r7, #12]
  408198:	3324      	adds	r3, #36	; 0x24
  40819a:	4618      	mov	r0, r3
  40819c:	4b0e      	ldr	r3, [pc, #56]	; (4081d8 <xQueueGenericSendFromISR+0x84>)
  40819e:	4798      	blx	r3
  4081a0:	4603      	mov	r3, r0
  4081a2:	2b00      	cmp	r3, #0
  4081a4:	d008      	beq.n	4081b8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
  4081a6:	687b      	ldr	r3, [r7, #4]
  4081a8:	2201      	movs	r2, #1
  4081aa:	601a      	str	r2, [r3, #0]
  4081ac:	e004      	b.n	4081b8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4081ae:	68fb      	ldr	r3, [r7, #12]
  4081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4081b2:	1c5a      	adds	r2, r3, #1
  4081b4:	68fb      	ldr	r3, [r7, #12]
  4081b6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  4081b8:	2301      	movs	r3, #1
  4081ba:	617b      	str	r3, [r7, #20]
  4081bc:	e001      	b.n	4081c2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4081be:	2300      	movs	r3, #0
  4081c0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4081c2:	f04f 0000 	mov.w	r0, #0
  4081c6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
  4081ca:	697b      	ldr	r3, [r7, #20]
}
  4081cc:	4618      	mov	r0, r3
  4081ce:	3718      	adds	r7, #24
  4081d0:	46bd      	mov	sp, r7
  4081d2:	bd80      	pop	{r7, pc}
  4081d4:	004083a9 	.word	0x004083a9
  4081d8:	00408e89 	.word	0x00408e89

004081dc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4081dc:	b580      	push	{r7, lr}
  4081de:	b088      	sub	sp, #32
  4081e0:	af00      	add	r7, sp, #0
  4081e2:	60f8      	str	r0, [r7, #12]
  4081e4:	60b9      	str	r1, [r7, #8]
  4081e6:	607a      	str	r2, [r7, #4]
  4081e8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4081ea:	2300      	movs	r3, #0
  4081ec:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4081ee:	4b56      	ldr	r3, [pc, #344]	; (408348 <xQueueGenericReceive+0x16c>)
  4081f0:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4081f2:	68fb      	ldr	r3, [r7, #12]
  4081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4081f6:	2b00      	cmp	r3, #0
  4081f8:	d03b      	beq.n	408272 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  4081fa:	68fb      	ldr	r3, [r7, #12]
  4081fc:	68db      	ldr	r3, [r3, #12]
  4081fe:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  408200:	68f8      	ldr	r0, [r7, #12]
  408202:	68b9      	ldr	r1, [r7, #8]
  408204:	4b51      	ldr	r3, [pc, #324]	; (40834c <xQueueGenericReceive+0x170>)
  408206:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  408208:	683b      	ldr	r3, [r7, #0]
  40820a:	2b00      	cmp	r3, #0
  40820c:	d11c      	bne.n	408248 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40820e:	68fb      	ldr	r3, [r7, #12]
  408210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408212:	1e5a      	subs	r2, r3, #1
  408214:	68fb      	ldr	r3, [r7, #12]
  408216:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408218:	68fb      	ldr	r3, [r7, #12]
  40821a:	681b      	ldr	r3, [r3, #0]
  40821c:	2b00      	cmp	r3, #0
  40821e:	d104      	bne.n	40822a <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  408220:	4b4b      	ldr	r3, [pc, #300]	; (408350 <xQueueGenericReceive+0x174>)
  408222:	4798      	blx	r3
  408224:	4602      	mov	r2, r0
  408226:	68fb      	ldr	r3, [r7, #12]
  408228:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40822a:	68fb      	ldr	r3, [r7, #12]
  40822c:	691b      	ldr	r3, [r3, #16]
  40822e:	2b00      	cmp	r3, #0
  408230:	d01b      	beq.n	40826a <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  408232:	68fb      	ldr	r3, [r7, #12]
  408234:	3310      	adds	r3, #16
  408236:	4618      	mov	r0, r3
  408238:	4b46      	ldr	r3, [pc, #280]	; (408354 <xQueueGenericReceive+0x178>)
  40823a:	4798      	blx	r3
  40823c:	4603      	mov	r3, r0
  40823e:	2b01      	cmp	r3, #1
  408240:	d113      	bne.n	40826a <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
  408242:	4b45      	ldr	r3, [pc, #276]	; (408358 <xQueueGenericReceive+0x17c>)
  408244:	4798      	blx	r3
  408246:	e010      	b.n	40826a <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  408248:	68fb      	ldr	r3, [r7, #12]
  40824a:	69ba      	ldr	r2, [r7, #24]
  40824c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40824e:	68fb      	ldr	r3, [r7, #12]
  408250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408252:	2b00      	cmp	r3, #0
  408254:	d009      	beq.n	40826a <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408256:	68fb      	ldr	r3, [r7, #12]
  408258:	3324      	adds	r3, #36	; 0x24
  40825a:	4618      	mov	r0, r3
  40825c:	4b3d      	ldr	r3, [pc, #244]	; (408354 <xQueueGenericReceive+0x178>)
  40825e:	4798      	blx	r3
  408260:	4603      	mov	r3, r0
  408262:	2b00      	cmp	r3, #0
  408264:	d001      	beq.n	40826a <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  408266:	4b3c      	ldr	r3, [pc, #240]	; (408358 <xQueueGenericReceive+0x17c>)
  408268:	4798      	blx	r3
						}
					}

				}

				taskEXIT_CRITICAL();
  40826a:	4b3c      	ldr	r3, [pc, #240]	; (40835c <xQueueGenericReceive+0x180>)
  40826c:	4798      	blx	r3
				return pdPASS;
  40826e:	2301      	movs	r3, #1
  408270:	e066      	b.n	408340 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  408272:	687b      	ldr	r3, [r7, #4]
  408274:	2b00      	cmp	r3, #0
  408276:	d103      	bne.n	408280 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  408278:	4b38      	ldr	r3, [pc, #224]	; (40835c <xQueueGenericReceive+0x180>)
  40827a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40827c:	2300      	movs	r3, #0
  40827e:	e05f      	b.n	408340 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
  408280:	69fb      	ldr	r3, [r7, #28]
  408282:	2b00      	cmp	r3, #0
  408284:	d106      	bne.n	408294 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  408286:	f107 0310 	add.w	r3, r7, #16
  40828a:	4618      	mov	r0, r3
  40828c:	4b34      	ldr	r3, [pc, #208]	; (408360 <xQueueGenericReceive+0x184>)
  40828e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  408290:	2301      	movs	r3, #1
  408292:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  408294:	4b31      	ldr	r3, [pc, #196]	; (40835c <xQueueGenericReceive+0x180>)
  408296:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  408298:	4b32      	ldr	r3, [pc, #200]	; (408364 <xQueueGenericReceive+0x188>)
  40829a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40829c:	4b2a      	ldr	r3, [pc, #168]	; (408348 <xQueueGenericReceive+0x16c>)
  40829e:	4798      	blx	r3
  4082a0:	68fb      	ldr	r3, [r7, #12]
  4082a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4082a8:	d102      	bne.n	4082b0 <xQueueGenericReceive+0xd4>
  4082aa:	68fb      	ldr	r3, [r7, #12]
  4082ac:	2200      	movs	r2, #0
  4082ae:	645a      	str	r2, [r3, #68]	; 0x44
  4082b0:	68fb      	ldr	r3, [r7, #12]
  4082b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4082b8:	d102      	bne.n	4082c0 <xQueueGenericReceive+0xe4>
  4082ba:	68fb      	ldr	r3, [r7, #12]
  4082bc:	2200      	movs	r2, #0
  4082be:	649a      	str	r2, [r3, #72]	; 0x48
  4082c0:	4b26      	ldr	r3, [pc, #152]	; (40835c <xQueueGenericReceive+0x180>)
  4082c2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4082c4:	f107 0210 	add.w	r2, r7, #16
  4082c8:	1d3b      	adds	r3, r7, #4
  4082ca:	4610      	mov	r0, r2
  4082cc:	4619      	mov	r1, r3
  4082ce:	4b26      	ldr	r3, [pc, #152]	; (408368 <xQueueGenericReceive+0x18c>)
  4082d0:	4798      	blx	r3
  4082d2:	4603      	mov	r3, r0
  4082d4:	2b00      	cmp	r3, #0
  4082d6:	d12b      	bne.n	408330 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) )
  4082d8:	68f8      	ldr	r0, [r7, #12]
  4082da:	4b24      	ldr	r3, [pc, #144]	; (40836c <xQueueGenericReceive+0x190>)
  4082dc:	4798      	blx	r3
  4082de:	4603      	mov	r3, r0
  4082e0:	2b00      	cmp	r3, #0
  4082e2:	d01f      	beq.n	408324 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4082e4:	68fb      	ldr	r3, [r7, #12]
  4082e6:	681b      	ldr	r3, [r3, #0]
  4082e8:	2b00      	cmp	r3, #0
  4082ea:	d108      	bne.n	4082fe <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
  4082ec:	4b16      	ldr	r3, [pc, #88]	; (408348 <xQueueGenericReceive+0x16c>)
  4082ee:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4082f0:	68fb      	ldr	r3, [r7, #12]
  4082f2:	685b      	ldr	r3, [r3, #4]
  4082f4:	4618      	mov	r0, r3
  4082f6:	4b1e      	ldr	r3, [pc, #120]	; (408370 <xQueueGenericReceive+0x194>)
  4082f8:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4082fa:	4b18      	ldr	r3, [pc, #96]	; (40835c <xQueueGenericReceive+0x180>)
  4082fc:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4082fe:	68fb      	ldr	r3, [r7, #12]
  408300:	f103 0224 	add.w	r2, r3, #36	; 0x24
  408304:	687b      	ldr	r3, [r7, #4]
  408306:	4610      	mov	r0, r2
  408308:	4619      	mov	r1, r3
  40830a:	4b1a      	ldr	r3, [pc, #104]	; (408374 <xQueueGenericReceive+0x198>)
  40830c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40830e:	68f8      	ldr	r0, [r7, #12]
  408310:	4b19      	ldr	r3, [pc, #100]	; (408378 <xQueueGenericReceive+0x19c>)
  408312:	4798      	blx	r3
				if( !xTaskResumeAll() )
  408314:	4b19      	ldr	r3, [pc, #100]	; (40837c <xQueueGenericReceive+0x1a0>)
  408316:	4798      	blx	r3
  408318:	4603      	mov	r3, r0
  40831a:	2b00      	cmp	r3, #0
  40831c:	d10f      	bne.n	40833e <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
  40831e:	4b0e      	ldr	r3, [pc, #56]	; (408358 <xQueueGenericReceive+0x17c>)
  408320:	4798      	blx	r3
  408322:	e00c      	b.n	40833e <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408324:	68f8      	ldr	r0, [r7, #12]
  408326:	4b14      	ldr	r3, [pc, #80]	; (408378 <xQueueGenericReceive+0x19c>)
  408328:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40832a:	4b14      	ldr	r3, [pc, #80]	; (40837c <xQueueGenericReceive+0x1a0>)
  40832c:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  40832e:	e75e      	b.n	4081ee <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  408330:	68f8      	ldr	r0, [r7, #12]
  408332:	4b11      	ldr	r3, [pc, #68]	; (408378 <xQueueGenericReceive+0x19c>)
  408334:	4798      	blx	r3
			( void ) xTaskResumeAll();
  408336:	4b11      	ldr	r3, [pc, #68]	; (40837c <xQueueGenericReceive+0x1a0>)
  408338:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40833a:	2300      	movs	r3, #0
  40833c:	e000      	b.n	408340 <xQueueGenericReceive+0x164>
		}
	}
  40833e:	e756      	b.n	4081ee <xQueueGenericReceive+0x12>
}
  408340:	4618      	mov	r0, r3
  408342:	3720      	adds	r7, #32
  408344:	46bd      	mov	sp, r7
  408346:	bd80      	pop	{r7, pc}
  408348:	00407d7d 	.word	0x00407d7d
  40834c:	00408469 	.word	0x00408469
  408350:	004093a9 	.word	0x004093a9
  408354:	00408e89 	.word	0x00408e89
  408358:	00407d65 	.word	0x00407d65
  40835c:	00407da1 	.word	0x00407da1
  408360:	00408f31 	.word	0x00408f31
  408364:	0040892d 	.word	0x0040892d
  408368:	00408f5d 	.word	0x00408f5d
  40836c:	00408561 	.word	0x00408561
  408370:	00409405 	.word	0x00409405
  408374:	00408dc9 	.word	0x00408dc9
  408378:	004084b9 	.word	0x004084b9
  40837c:	00408949 	.word	0x00408949

00408380 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
  408380:	b580      	push	{r7, lr}
  408382:	b084      	sub	sp, #16
  408384:	af00      	add	r7, sp, #0
  408386:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
  408388:	4b05      	ldr	r3, [pc, #20]	; (4083a0 <uxQueueMessagesWaiting+0x20>)
  40838a:	4798      	blx	r3
		uxReturn = pxQueue->uxMessagesWaiting;
  40838c:	687b      	ldr	r3, [r7, #4]
  40838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408390:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408392:	4b04      	ldr	r3, [pc, #16]	; (4083a4 <uxQueueMessagesWaiting+0x24>)
  408394:	4798      	blx	r3

	return uxReturn;
  408396:	68fb      	ldr	r3, [r7, #12]
}
  408398:	4618      	mov	r0, r3
  40839a:	3710      	adds	r7, #16
  40839c:	46bd      	mov	sp, r7
  40839e:	bd80      	pop	{r7, pc}
  4083a0:	00407d7d 	.word	0x00407d7d
  4083a4:	00407da1 	.word	0x00407da1

004083a8 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  4083a8:	b580      	push	{r7, lr}
  4083aa:	b084      	sub	sp, #16
  4083ac:	af00      	add	r7, sp, #0
  4083ae:	60f8      	str	r0, [r7, #12]
  4083b0:	60b9      	str	r1, [r7, #8]
  4083b2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  4083b4:	68fb      	ldr	r3, [r7, #12]
  4083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4083b8:	2b00      	cmp	r3, #0
  4083ba:	d10c      	bne.n	4083d6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4083bc:	68fb      	ldr	r3, [r7, #12]
  4083be:	681b      	ldr	r3, [r3, #0]
  4083c0:	2b00      	cmp	r3, #0
  4083c2:	d145      	bne.n	408450 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4083c4:	68fb      	ldr	r3, [r7, #12]
  4083c6:	685b      	ldr	r3, [r3, #4]
  4083c8:	4618      	mov	r0, r3
  4083ca:	4b25      	ldr	r3, [pc, #148]	; (408460 <prvCopyDataToQueue+0xb8>)
  4083cc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4083ce:	68fb      	ldr	r3, [r7, #12]
  4083d0:	2200      	movs	r2, #0
  4083d2:	605a      	str	r2, [r3, #4]
  4083d4:	e03c      	b.n	408450 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  4083d6:	687b      	ldr	r3, [r7, #4]
  4083d8:	2b00      	cmp	r3, #0
  4083da:	d11a      	bne.n	408412 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4083dc:	68fb      	ldr	r3, [r7, #12]
  4083de:	689a      	ldr	r2, [r3, #8]
  4083e0:	68fb      	ldr	r3, [r7, #12]
  4083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4083e4:	4610      	mov	r0, r2
  4083e6:	68b9      	ldr	r1, [r7, #8]
  4083e8:	461a      	mov	r2, r3
  4083ea:	4b1e      	ldr	r3, [pc, #120]	; (408464 <prvCopyDataToQueue+0xbc>)
  4083ec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4083ee:	68fb      	ldr	r3, [r7, #12]
  4083f0:	689a      	ldr	r2, [r3, #8]
  4083f2:	68fb      	ldr	r3, [r7, #12]
  4083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4083f6:	441a      	add	r2, r3
  4083f8:	68fb      	ldr	r3, [r7, #12]
  4083fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  4083fc:	68fb      	ldr	r3, [r7, #12]
  4083fe:	689a      	ldr	r2, [r3, #8]
  408400:	68fb      	ldr	r3, [r7, #12]
  408402:	685b      	ldr	r3, [r3, #4]
  408404:	429a      	cmp	r2, r3
  408406:	d323      	bcc.n	408450 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  408408:	68fb      	ldr	r3, [r7, #12]
  40840a:	681a      	ldr	r2, [r3, #0]
  40840c:	68fb      	ldr	r3, [r7, #12]
  40840e:	609a      	str	r2, [r3, #8]
  408410:	e01e      	b.n	408450 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  408412:	68fb      	ldr	r3, [r7, #12]
  408414:	68da      	ldr	r2, [r3, #12]
  408416:	68fb      	ldr	r3, [r7, #12]
  408418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40841a:	4610      	mov	r0, r2
  40841c:	68b9      	ldr	r1, [r7, #8]
  40841e:	461a      	mov	r2, r3
  408420:	4b10      	ldr	r3, [pc, #64]	; (408464 <prvCopyDataToQueue+0xbc>)
  408422:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  408424:	68fb      	ldr	r3, [r7, #12]
  408426:	68da      	ldr	r2, [r3, #12]
  408428:	68fb      	ldr	r3, [r7, #12]
  40842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40842c:	425b      	negs	r3, r3
  40842e:	441a      	add	r2, r3
  408430:	68fb      	ldr	r3, [r7, #12]
  408432:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  408434:	68fb      	ldr	r3, [r7, #12]
  408436:	68da      	ldr	r2, [r3, #12]
  408438:	68fb      	ldr	r3, [r7, #12]
  40843a:	681b      	ldr	r3, [r3, #0]
  40843c:	429a      	cmp	r2, r3
  40843e:	d207      	bcs.n	408450 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  408440:	68fb      	ldr	r3, [r7, #12]
  408442:	685a      	ldr	r2, [r3, #4]
  408444:	68fb      	ldr	r3, [r7, #12]
  408446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408448:	425b      	negs	r3, r3
  40844a:	441a      	add	r2, r3
  40844c:	68fb      	ldr	r3, [r7, #12]
  40844e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  408450:	68fb      	ldr	r3, [r7, #12]
  408452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408454:	1c5a      	adds	r2, r3, #1
  408456:	68fb      	ldr	r3, [r7, #12]
  408458:	639a      	str	r2, [r3, #56]	; 0x38
}
  40845a:	3710      	adds	r7, #16
  40845c:	46bd      	mov	sp, r7
  40845e:	bd80      	pop	{r7, pc}
  408460:	004094b1 	.word	0x004094b1
  408464:	0040f05d 	.word	0x0040f05d

00408468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  408468:	b580      	push	{r7, lr}
  40846a:	b082      	sub	sp, #8
  40846c:	af00      	add	r7, sp, #0
  40846e:	6078      	str	r0, [r7, #4]
  408470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  408472:	687b      	ldr	r3, [r7, #4]
  408474:	681b      	ldr	r3, [r3, #0]
  408476:	2b00      	cmp	r3, #0
  408478:	d019      	beq.n	4084ae <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  40847a:	687b      	ldr	r3, [r7, #4]
  40847c:	68da      	ldr	r2, [r3, #12]
  40847e:	687b      	ldr	r3, [r7, #4]
  408480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408482:	441a      	add	r2, r3
  408484:	687b      	ldr	r3, [r7, #4]
  408486:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  408488:	687b      	ldr	r3, [r7, #4]
  40848a:	68da      	ldr	r2, [r3, #12]
  40848c:	687b      	ldr	r3, [r7, #4]
  40848e:	685b      	ldr	r3, [r3, #4]
  408490:	429a      	cmp	r2, r3
  408492:	d303      	bcc.n	40849c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  408494:	687b      	ldr	r3, [r7, #4]
  408496:	681a      	ldr	r2, [r3, #0]
  408498:	687b      	ldr	r3, [r7, #4]
  40849a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  40849c:	687b      	ldr	r3, [r7, #4]
  40849e:	68da      	ldr	r2, [r3, #12]
  4084a0:	687b      	ldr	r3, [r7, #4]
  4084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4084a4:	6838      	ldr	r0, [r7, #0]
  4084a6:	4611      	mov	r1, r2
  4084a8:	461a      	mov	r2, r3
  4084aa:	4b02      	ldr	r3, [pc, #8]	; (4084b4 <prvCopyDataFromQueue+0x4c>)
  4084ac:	4798      	blx	r3
	}
}
  4084ae:	3708      	adds	r7, #8
  4084b0:	46bd      	mov	sp, r7
  4084b2:	bd80      	pop	{r7, pc}
  4084b4:	0040f05d 	.word	0x0040f05d

004084b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4084b8:	b580      	push	{r7, lr}
  4084ba:	b082      	sub	sp, #8
  4084bc:	af00      	add	r7, sp, #0
  4084be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4084c0:	4b23      	ldr	r3, [pc, #140]	; (408550 <prvUnlockQueue+0x98>)
  4084c2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4084c4:	e014      	b.n	4084f0 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4084c6:	687b      	ldr	r3, [r7, #4]
  4084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4084ca:	2b00      	cmp	r3, #0
  4084cc:	d00f      	beq.n	4084ee <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4084ce:	687b      	ldr	r3, [r7, #4]
  4084d0:	3324      	adds	r3, #36	; 0x24
  4084d2:	4618      	mov	r0, r3
  4084d4:	4b1f      	ldr	r3, [pc, #124]	; (408554 <prvUnlockQueue+0x9c>)
  4084d6:	4798      	blx	r3
  4084d8:	4603      	mov	r3, r0
  4084da:	2b00      	cmp	r3, #0
  4084dc:	d001      	beq.n	4084e2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4084de:	4b1e      	ldr	r3, [pc, #120]	; (408558 <prvUnlockQueue+0xa0>)
  4084e0:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  4084e2:	687b      	ldr	r3, [r7, #4]
  4084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4084e6:	1e5a      	subs	r2, r3, #1
  4084e8:	687b      	ldr	r3, [r7, #4]
  4084ea:	649a      	str	r2, [r3, #72]	; 0x48
  4084ec:	e000      	b.n	4084f0 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  4084ee:	e003      	b.n	4084f8 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4084f0:	687b      	ldr	r3, [r7, #4]
  4084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4084f4:	2b00      	cmp	r3, #0
  4084f6:	dce6      	bgt.n	4084c6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  4084f8:	687b      	ldr	r3, [r7, #4]
  4084fa:	f04f 32ff 	mov.w	r2, #4294967295
  4084fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  408500:	4b16      	ldr	r3, [pc, #88]	; (40855c <prvUnlockQueue+0xa4>)
  408502:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  408504:	4b12      	ldr	r3, [pc, #72]	; (408550 <prvUnlockQueue+0x98>)
  408506:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408508:	e014      	b.n	408534 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40850a:	687b      	ldr	r3, [r7, #4]
  40850c:	691b      	ldr	r3, [r3, #16]
  40850e:	2b00      	cmp	r3, #0
  408510:	d00f      	beq.n	408532 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  408512:	687b      	ldr	r3, [r7, #4]
  408514:	3310      	adds	r3, #16
  408516:	4618      	mov	r0, r3
  408518:	4b0e      	ldr	r3, [pc, #56]	; (408554 <prvUnlockQueue+0x9c>)
  40851a:	4798      	blx	r3
  40851c:	4603      	mov	r3, r0
  40851e:	2b00      	cmp	r3, #0
  408520:	d001      	beq.n	408526 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  408522:	4b0d      	ldr	r3, [pc, #52]	; (408558 <prvUnlockQueue+0xa0>)
  408524:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  408526:	687b      	ldr	r3, [r7, #4]
  408528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40852a:	1e5a      	subs	r2, r3, #1
  40852c:	687b      	ldr	r3, [r7, #4]
  40852e:	645a      	str	r2, [r3, #68]	; 0x44
  408530:	e000      	b.n	408534 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  408532:	e003      	b.n	40853c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408534:	687b      	ldr	r3, [r7, #4]
  408536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408538:	2b00      	cmp	r3, #0
  40853a:	dce6      	bgt.n	40850a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40853c:	687b      	ldr	r3, [r7, #4]
  40853e:	f04f 32ff 	mov.w	r2, #4294967295
  408542:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  408544:	4b05      	ldr	r3, [pc, #20]	; (40855c <prvUnlockQueue+0xa4>)
  408546:	4798      	blx	r3
}
  408548:	3708      	adds	r7, #8
  40854a:	46bd      	mov	sp, r7
  40854c:	bd80      	pop	{r7, pc}
  40854e:	bf00      	nop
  408550:	00407d7d 	.word	0x00407d7d
  408554:	00408e89 	.word	0x00408e89
  408558:	00408ff1 	.word	0x00408ff1
  40855c:	00407da1 	.word	0x00407da1

00408560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  408560:	b580      	push	{r7, lr}
  408562:	b084      	sub	sp, #16
  408564:	af00      	add	r7, sp, #0
  408566:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  408568:	4b08      	ldr	r3, [pc, #32]	; (40858c <prvIsQueueEmpty+0x2c>)
  40856a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  40856c:	687b      	ldr	r3, [r7, #4]
  40856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408570:	2b00      	cmp	r3, #0
  408572:	bf14      	ite	ne
  408574:	2300      	movne	r3, #0
  408576:	2301      	moveq	r3, #1
  408578:	b2db      	uxtb	r3, r3
  40857a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40857c:	4b04      	ldr	r3, [pc, #16]	; (408590 <prvIsQueueEmpty+0x30>)
  40857e:	4798      	blx	r3

	return xReturn;
  408580:	68fb      	ldr	r3, [r7, #12]
}
  408582:	4618      	mov	r0, r3
  408584:	3710      	adds	r7, #16
  408586:	46bd      	mov	sp, r7
  408588:	bd80      	pop	{r7, pc}
  40858a:	bf00      	nop
  40858c:	00407d7d 	.word	0x00407d7d
  408590:	00407da1 	.word	0x00407da1

00408594 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  408594:	b580      	push	{r7, lr}
  408596:	b084      	sub	sp, #16
  408598:	af00      	add	r7, sp, #0
  40859a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  40859c:	4b09      	ldr	r3, [pc, #36]	; (4085c4 <prvIsQueueFull+0x30>)
  40859e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4085a0:	687b      	ldr	r3, [r7, #4]
  4085a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4085a4:	687b      	ldr	r3, [r7, #4]
  4085a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4085a8:	429a      	cmp	r2, r3
  4085aa:	bf14      	ite	ne
  4085ac:	2300      	movne	r3, #0
  4085ae:	2301      	moveq	r3, #1
  4085b0:	b2db      	uxtb	r3, r3
  4085b2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4085b4:	4b04      	ldr	r3, [pc, #16]	; (4085c8 <prvIsQueueFull+0x34>)
  4085b6:	4798      	blx	r3

	return xReturn;
  4085b8:	68fb      	ldr	r3, [r7, #12]
}
  4085ba:	4618      	mov	r0, r3
  4085bc:	3710      	adds	r7, #16
  4085be:	46bd      	mov	sp, r7
  4085c0:	bd80      	pop	{r7, pc}
  4085c2:	bf00      	nop
  4085c4:	00407d7d 	.word	0x00407d7d
  4085c8:	00407da1 	.word	0x00407da1

004085cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4085cc:	b580      	push	{r7, lr}
  4085ce:	b082      	sub	sp, #8
  4085d0:	af00      	add	r7, sp, #0
  4085d2:	6078      	str	r0, [r7, #4]
  4085d4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4085d6:	4b12      	ldr	r3, [pc, #72]	; (408620 <vQueueWaitForMessageRestricted+0x54>)
  4085d8:	4798      	blx	r3
  4085da:	687b      	ldr	r3, [r7, #4]
  4085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4085de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4085e2:	d102      	bne.n	4085ea <vQueueWaitForMessageRestricted+0x1e>
  4085e4:	687b      	ldr	r3, [r7, #4]
  4085e6:	2200      	movs	r2, #0
  4085e8:	645a      	str	r2, [r3, #68]	; 0x44
  4085ea:	687b      	ldr	r3, [r7, #4]
  4085ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4085f2:	d102      	bne.n	4085fa <vQueueWaitForMessageRestricted+0x2e>
  4085f4:	687b      	ldr	r3, [r7, #4]
  4085f6:	2200      	movs	r2, #0
  4085f8:	649a      	str	r2, [r3, #72]	; 0x48
  4085fa:	4b0a      	ldr	r3, [pc, #40]	; (408624 <vQueueWaitForMessageRestricted+0x58>)
  4085fc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4085fe:	687b      	ldr	r3, [r7, #4]
  408600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408602:	2b00      	cmp	r3, #0
  408604:	d105      	bne.n	408612 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  408606:	687b      	ldr	r3, [r7, #4]
  408608:	3324      	adds	r3, #36	; 0x24
  40860a:	4618      	mov	r0, r3
  40860c:	6839      	ldr	r1, [r7, #0]
  40860e:	4b06      	ldr	r3, [pc, #24]	; (408628 <vQueueWaitForMessageRestricted+0x5c>)
  408610:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  408612:	6878      	ldr	r0, [r7, #4]
  408614:	4b05      	ldr	r3, [pc, #20]	; (40862c <vQueueWaitForMessageRestricted+0x60>)
  408616:	4798      	blx	r3
	}
  408618:	3708      	adds	r7, #8
  40861a:	46bd      	mov	sp, r7
  40861c:	bd80      	pop	{r7, pc}
  40861e:	bf00      	nop
  408620:	00407d7d 	.word	0x00407d7d
  408624:	00407da1 	.word	0x00407da1
  408628:	00408e39 	.word	0x00408e39
  40862c:	004084b9 	.word	0x004084b9

00408630 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  408630:	b590      	push	{r4, r7, lr}
  408632:	b08b      	sub	sp, #44	; 0x2c
  408634:	af02      	add	r7, sp, #8
  408636:	60f8      	str	r0, [r7, #12]
  408638:	60b9      	str	r1, [r7, #8]
  40863a:	603b      	str	r3, [r7, #0]
  40863c:	4613      	mov	r3, r2
  40863e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  408640:	88fb      	ldrh	r3, [r7, #6]
  408642:	4618      	mov	r0, r3
  408644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  408646:	4b49      	ldr	r3, [pc, #292]	; (40876c <xTaskGenericCreate+0x13c>)
  408648:	4798      	blx	r3
  40864a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40864c:	69bb      	ldr	r3, [r7, #24]
  40864e:	2b00      	cmp	r3, #0
  408650:	d074      	beq.n	40873c <xTaskGenericCreate+0x10c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  408652:	69bb      	ldr	r3, [r7, #24]
  408654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  408656:	88fb      	ldrh	r3, [r7, #6]
  408658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40865c:	3b01      	subs	r3, #1
  40865e:	009b      	lsls	r3, r3, #2
  408660:	4413      	add	r3, r2
  408662:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
  408664:	697b      	ldr	r3, [r7, #20]
  408666:	f023 0307 	bic.w	r3, r3, #7
  40866a:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40866c:	88fb      	ldrh	r3, [r7, #6]
  40866e:	9300      	str	r3, [sp, #0]
  408670:	69b8      	ldr	r0, [r7, #24]
  408672:	68b9      	ldr	r1, [r7, #8]
  408674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  408676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  408678:	4c3d      	ldr	r4, [pc, #244]	; (408770 <xTaskGenericCreate+0x140>)
  40867a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40867c:	6978      	ldr	r0, [r7, #20]
  40867e:	68f9      	ldr	r1, [r7, #12]
  408680:	683a      	ldr	r2, [r7, #0]
  408682:	4b3c      	ldr	r3, [pc, #240]	; (408774 <xTaskGenericCreate+0x144>)
  408684:	4798      	blx	r3
  408686:	4602      	mov	r2, r0
  408688:	69bb      	ldr	r3, [r7, #24]
  40868a:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  40868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40868e:	2b00      	cmp	r3, #0
  408690:	d002      	beq.n	408698 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  408692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  408694:	69ba      	ldr	r2, [r7, #24]
  408696:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  408698:	4b37      	ldr	r3, [pc, #220]	; (408778 <xTaskGenericCreate+0x148>)
  40869a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40869c:	4b37      	ldr	r3, [pc, #220]	; (40877c <xTaskGenericCreate+0x14c>)
  40869e:	681b      	ldr	r3, [r3, #0]
  4086a0:	1c5a      	adds	r2, r3, #1
  4086a2:	4b36      	ldr	r3, [pc, #216]	; (40877c <xTaskGenericCreate+0x14c>)
  4086a4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  4086a6:	4b36      	ldr	r3, [pc, #216]	; (408780 <xTaskGenericCreate+0x150>)
  4086a8:	681b      	ldr	r3, [r3, #0]
  4086aa:	2b00      	cmp	r3, #0
  4086ac:	d109      	bne.n	4086c2 <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4086ae:	4b34      	ldr	r3, [pc, #208]	; (408780 <xTaskGenericCreate+0x150>)
  4086b0:	69ba      	ldr	r2, [r7, #24]
  4086b2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4086b4:	4b31      	ldr	r3, [pc, #196]	; (40877c <xTaskGenericCreate+0x14c>)
  4086b6:	681b      	ldr	r3, [r3, #0]
  4086b8:	2b01      	cmp	r3, #1
  4086ba:	d10f      	bne.n	4086dc <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4086bc:	4b31      	ldr	r3, [pc, #196]	; (408784 <xTaskGenericCreate+0x154>)
  4086be:	4798      	blx	r3
  4086c0:	e00c      	b.n	4086dc <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4086c2:	4b31      	ldr	r3, [pc, #196]	; (408788 <xTaskGenericCreate+0x158>)
  4086c4:	681b      	ldr	r3, [r3, #0]
  4086c6:	2b00      	cmp	r3, #0
  4086c8:	d108      	bne.n	4086dc <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4086ca:	4b2d      	ldr	r3, [pc, #180]	; (408780 <xTaskGenericCreate+0x150>)
  4086cc:	681b      	ldr	r3, [r3, #0]
  4086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4086d2:	429a      	cmp	r2, r3
  4086d4:	d802      	bhi.n	4086dc <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
  4086d6:	4b2a      	ldr	r3, [pc, #168]	; (408780 <xTaskGenericCreate+0x150>)
  4086d8:	69ba      	ldr	r2, [r7, #24]
  4086da:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4086dc:	69bb      	ldr	r3, [r7, #24]
  4086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4086e0:	4b2a      	ldr	r3, [pc, #168]	; (40878c <xTaskGenericCreate+0x15c>)
  4086e2:	681b      	ldr	r3, [r3, #0]
  4086e4:	429a      	cmp	r2, r3
  4086e6:	d903      	bls.n	4086f0 <xTaskGenericCreate+0xc0>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4086e8:	69bb      	ldr	r3, [r7, #24]
  4086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4086ec:	4b27      	ldr	r3, [pc, #156]	; (40878c <xTaskGenericCreate+0x15c>)
  4086ee:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4086f0:	4b27      	ldr	r3, [pc, #156]	; (408790 <xTaskGenericCreate+0x160>)
  4086f2:	681a      	ldr	r2, [r3, #0]
  4086f4:	69bb      	ldr	r3, [r7, #24]
  4086f6:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
  4086f8:	4b25      	ldr	r3, [pc, #148]	; (408790 <xTaskGenericCreate+0x160>)
  4086fa:	681b      	ldr	r3, [r3, #0]
  4086fc:	1c5a      	adds	r2, r3, #1
  4086fe:	4b24      	ldr	r3, [pc, #144]	; (408790 <xTaskGenericCreate+0x160>)
  408700:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  408702:	69bb      	ldr	r3, [r7, #24]
  408704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408706:	4b23      	ldr	r3, [pc, #140]	; (408794 <xTaskGenericCreate+0x164>)
  408708:	681b      	ldr	r3, [r3, #0]
  40870a:	429a      	cmp	r2, r3
  40870c:	d903      	bls.n	408716 <xTaskGenericCreate+0xe6>
  40870e:	69bb      	ldr	r3, [r7, #24]
  408710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408712:	4b20      	ldr	r3, [pc, #128]	; (408794 <xTaskGenericCreate+0x164>)
  408714:	601a      	str	r2, [r3, #0]
  408716:	69bb      	ldr	r3, [r7, #24]
  408718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40871a:	4613      	mov	r3, r2
  40871c:	009b      	lsls	r3, r3, #2
  40871e:	4413      	add	r3, r2
  408720:	009b      	lsls	r3, r3, #2
  408722:	4a1d      	ldr	r2, [pc, #116]	; (408798 <xTaskGenericCreate+0x168>)
  408724:	441a      	add	r2, r3
  408726:	69bb      	ldr	r3, [r7, #24]
  408728:	3304      	adds	r3, #4
  40872a:	4610      	mov	r0, r2
  40872c:	4619      	mov	r1, r3
  40872e:	4b1b      	ldr	r3, [pc, #108]	; (40879c <xTaskGenericCreate+0x16c>)
  408730:	4798      	blx	r3

			xReturn = pdPASS;
  408732:	2301      	movs	r3, #1
  408734:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  408736:	4b1a      	ldr	r3, [pc, #104]	; (4087a0 <xTaskGenericCreate+0x170>)
  408738:	4798      	blx	r3
  40873a:	e002      	b.n	408742 <xTaskGenericCreate+0x112>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40873c:	f04f 33ff 	mov.w	r3, #4294967295
  408740:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  408742:	69fb      	ldr	r3, [r7, #28]
  408744:	2b01      	cmp	r3, #1
  408746:	d10b      	bne.n	408760 <xTaskGenericCreate+0x130>
	{
		if( xSchedulerRunning != pdFALSE )
  408748:	4b0f      	ldr	r3, [pc, #60]	; (408788 <xTaskGenericCreate+0x158>)
  40874a:	681b      	ldr	r3, [r3, #0]
  40874c:	2b00      	cmp	r3, #0
  40874e:	d007      	beq.n	408760 <xTaskGenericCreate+0x130>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  408750:	4b0b      	ldr	r3, [pc, #44]	; (408780 <xTaskGenericCreate+0x150>)
  408752:	681b      	ldr	r3, [r3, #0]
  408754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  408758:	429a      	cmp	r2, r3
  40875a:	d201      	bcs.n	408760 <xTaskGenericCreate+0x130>
			{
				portYIELD_WITHIN_API();
  40875c:	4b11      	ldr	r3, [pc, #68]	; (4087a4 <xTaskGenericCreate+0x174>)
  40875e:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  408760:	69fb      	ldr	r3, [r7, #28]
}
  408762:	4618      	mov	r0, r3
  408764:	3724      	adds	r7, #36	; 0x24
  408766:	46bd      	mov	sp, r7
  408768:	bd90      	pop	{r4, r7, pc}
  40876a:	bf00      	nop
  40876c:	00409225 	.word	0x00409225
  408770:	00409031 	.word	0x00409031
  408774:	00407ca1 	.word	0x00407ca1
  408778:	00407d7d 	.word	0x00407d7d
  40877c:	2000185c 	.word	0x2000185c
  408780:	20001748 	.word	0x20001748
  408784:	004090a5 	.word	0x004090a5
  408788:	2000186c 	.word	0x2000186c
  40878c:	20001864 	.word	0x20001864
  408790:	20001880 	.word	0x20001880
  408794:	20001868 	.word	0x20001868
  408798:	2000174c 	.word	0x2000174c
  40879c:	00407ae9 	.word	0x00407ae9
  4087a0:	00407da1 	.word	0x00407da1
  4087a4:	00407d65 	.word	0x00407d65

004087a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
  4087a8:	b580      	push	{r7, lr}
  4087aa:	b084      	sub	sp, #16
  4087ac:	af00      	add	r7, sp, #0
  4087ae:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
  4087b0:	4b1e      	ldr	r3, [pc, #120]	; (40882c <vTaskDelete+0x84>)
  4087b2:	4798      	blx	r3
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
  4087b4:	4b1e      	ldr	r3, [pc, #120]	; (408830 <vTaskDelete+0x88>)
  4087b6:	681b      	ldr	r3, [r3, #0]
  4087b8:	687a      	ldr	r2, [r7, #4]
  4087ba:	429a      	cmp	r2, r3
  4087bc:	d101      	bne.n	4087c2 <vTaskDelete+0x1a>
			{
				pxTaskToDelete = NULL;
  4087be:	2300      	movs	r3, #0
  4087c0:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
  4087c2:	687b      	ldr	r3, [r7, #4]
  4087c4:	2b00      	cmp	r3, #0
  4087c6:	d102      	bne.n	4087ce <vTaskDelete+0x26>
  4087c8:	4b19      	ldr	r3, [pc, #100]	; (408830 <vTaskDelete+0x88>)
  4087ca:	681b      	ldr	r3, [r3, #0]
  4087cc:	e000      	b.n	4087d0 <vTaskDelete+0x28>
  4087ce:	687b      	ldr	r3, [r7, #4]
  4087d0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
  4087d2:	68fb      	ldr	r3, [r7, #12]
  4087d4:	3304      	adds	r3, #4
  4087d6:	4618      	mov	r0, r3
  4087d8:	4b16      	ldr	r3, [pc, #88]	; (408834 <vTaskDelete+0x8c>)
  4087da:	4798      	blx	r3

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
  4087dc:	68fb      	ldr	r3, [r7, #12]
  4087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4087e0:	2b00      	cmp	r3, #0
  4087e2:	d004      	beq.n	4087ee <vTaskDelete+0x46>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
  4087e4:	68fb      	ldr	r3, [r7, #12]
  4087e6:	3318      	adds	r3, #24
  4087e8:	4618      	mov	r0, r3
  4087ea:	4b12      	ldr	r3, [pc, #72]	; (408834 <vTaskDelete+0x8c>)
  4087ec:	4798      	blx	r3
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
  4087ee:	68fb      	ldr	r3, [r7, #12]
  4087f0:	3304      	adds	r3, #4
  4087f2:	4811      	ldr	r0, [pc, #68]	; (408838 <vTaskDelete+0x90>)
  4087f4:	4619      	mov	r1, r3
  4087f6:	4b11      	ldr	r3, [pc, #68]	; (40883c <vTaskDelete+0x94>)
  4087f8:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
  4087fa:	4b11      	ldr	r3, [pc, #68]	; (408840 <vTaskDelete+0x98>)
  4087fc:	681b      	ldr	r3, [r3, #0]
  4087fe:	1c5a      	adds	r2, r3, #1
  408800:	4b0f      	ldr	r3, [pc, #60]	; (408840 <vTaskDelete+0x98>)
  408802:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
  408804:	4b0f      	ldr	r3, [pc, #60]	; (408844 <vTaskDelete+0x9c>)
  408806:	681b      	ldr	r3, [r3, #0]
  408808:	1c5a      	adds	r2, r3, #1
  40880a:	4b0e      	ldr	r3, [pc, #56]	; (408844 <vTaskDelete+0x9c>)
  40880c:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
  40880e:	4b0e      	ldr	r3, [pc, #56]	; (408848 <vTaskDelete+0xa0>)
  408810:	4798      	blx	r3

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
  408812:	4b0e      	ldr	r3, [pc, #56]	; (40884c <vTaskDelete+0xa4>)
  408814:	681b      	ldr	r3, [r3, #0]
  408816:	2b00      	cmp	r3, #0
  408818:	d004      	beq.n	408824 <vTaskDelete+0x7c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
  40881a:	687b      	ldr	r3, [r7, #4]
  40881c:	2b00      	cmp	r3, #0
  40881e:	d101      	bne.n	408824 <vTaskDelete+0x7c>
			{
				portYIELD_WITHIN_API();
  408820:	4b0b      	ldr	r3, [pc, #44]	; (408850 <vTaskDelete+0xa8>)
  408822:	4798      	blx	r3
			}
		}
	}
  408824:	3710      	adds	r7, #16
  408826:	46bd      	mov	sp, r7
  408828:	bd80      	pop	{r7, pc}
  40882a:	bf00      	nop
  40882c:	00407d7d 	.word	0x00407d7d
  408830:	20001748 	.word	0x20001748
  408834:	00407ba9 	.word	0x00407ba9
  408838:	20001830 	.word	0x20001830
  40883c:	00407ae9 	.word	0x00407ae9
  408840:	20001844 	.word	0x20001844
  408844:	20001880 	.word	0x20001880
  408848:	00407da1 	.word	0x00407da1
  40884c:	2000186c 	.word	0x2000186c
  408850:	00407d65 	.word	0x00407d65

00408854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  408854:	b580      	push	{r7, lr}
  408856:	b084      	sub	sp, #16
  408858:	af00      	add	r7, sp, #0
  40885a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40885c:	2300      	movs	r3, #0
  40885e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
  408860:	687b      	ldr	r3, [r7, #4]
  408862:	2b00      	cmp	r3, #0
  408864:	d012      	beq.n	40888c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  408866:	4b0d      	ldr	r3, [pc, #52]	; (40889c <vTaskDelay+0x48>)
  408868:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40886a:	4b0d      	ldr	r3, [pc, #52]	; (4088a0 <vTaskDelay+0x4c>)
  40886c:	681a      	ldr	r2, [r3, #0]
  40886e:	687b      	ldr	r3, [r7, #4]
  408870:	4413      	add	r3, r2
  408872:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  408874:	4b0b      	ldr	r3, [pc, #44]	; (4088a4 <vTaskDelay+0x50>)
  408876:	681b      	ldr	r3, [r3, #0]
  408878:	3304      	adds	r3, #4
  40887a:	4618      	mov	r0, r3
  40887c:	4b0a      	ldr	r3, [pc, #40]	; (4088a8 <vTaskDelay+0x54>)
  40887e:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  408880:	68b8      	ldr	r0, [r7, #8]
  408882:	4b0a      	ldr	r3, [pc, #40]	; (4088ac <vTaskDelay+0x58>)
  408884:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  408886:	4b0a      	ldr	r3, [pc, #40]	; (4088b0 <vTaskDelay+0x5c>)
  408888:	4798      	blx	r3
  40888a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
  40888c:	68fb      	ldr	r3, [r7, #12]
  40888e:	2b00      	cmp	r3, #0
  408890:	d101      	bne.n	408896 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  408892:	4b08      	ldr	r3, [pc, #32]	; (4088b4 <vTaskDelay+0x60>)
  408894:	4798      	blx	r3
		}
	}
  408896:	3710      	adds	r7, #16
  408898:	46bd      	mov	sp, r7
  40889a:	bd80      	pop	{r7, pc}
  40889c:	0040892d 	.word	0x0040892d
  4088a0:	20001860 	.word	0x20001860
  4088a4:	20001748 	.word	0x20001748
  4088a8:	00407ba9 	.word	0x00407ba9
  4088ac:	004091b5 	.word	0x004091b5
  4088b0:	00408949 	.word	0x00408949
  4088b4:	00407d65 	.word	0x00407d65

004088b8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4088b8:	b590      	push	{r4, r7, lr}
  4088ba:	b087      	sub	sp, #28
  4088bc:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
  4088be:	2300      	movs	r3, #0
  4088c0:	9300      	str	r3, [sp, #0]
  4088c2:	2300      	movs	r3, #0
  4088c4:	9301      	str	r3, [sp, #4]
  4088c6:	2300      	movs	r3, #0
  4088c8:	9302      	str	r3, [sp, #8]
  4088ca:	2300      	movs	r3, #0
  4088cc:	9303      	str	r3, [sp, #12]
  4088ce:	4810      	ldr	r0, [pc, #64]	; (408910 <vTaskStartScheduler+0x58>)
  4088d0:	4910      	ldr	r1, [pc, #64]	; (408914 <vTaskStartScheduler+0x5c>)
  4088d2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4088d6:	2300      	movs	r3, #0
  4088d8:	4c0f      	ldr	r4, [pc, #60]	; (408918 <vTaskStartScheduler+0x60>)
  4088da:	47a0      	blx	r4
  4088dc:	6078      	str	r0, [r7, #4]

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4088de:	687b      	ldr	r3, [r7, #4]
  4088e0:	2b01      	cmp	r3, #1
  4088e2:	d102      	bne.n	4088ea <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
  4088e4:	4b0d      	ldr	r3, [pc, #52]	; (40891c <vTaskStartScheduler+0x64>)
  4088e6:	4798      	blx	r3
  4088e8:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4088ea:	687b      	ldr	r3, [r7, #4]
  4088ec:	2b01      	cmp	r3, #1
  4088ee:	d10b      	bne.n	408908 <vTaskStartScheduler+0x50>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4088f0:	f04f 0000 	mov.w	r0, #0
  4088f4:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
  4088f8:	4b09      	ldr	r3, [pc, #36]	; (408920 <vTaskStartScheduler+0x68>)
  4088fa:	2201      	movs	r2, #1
  4088fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0;
  4088fe:	4b09      	ldr	r3, [pc, #36]	; (408924 <vTaskStartScheduler+0x6c>)
  408900:	2200      	movs	r2, #0
  408902:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
  408904:	4b08      	ldr	r3, [pc, #32]	; (408928 <vTaskStartScheduler+0x70>)
  408906:	4798      	blx	r3
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
  408908:	370c      	adds	r7, #12
  40890a:	46bd      	mov	sp, r7
  40890c:	bd90      	pop	{r4, r7, pc}
  40890e:	bf00      	nop
  408910:	00409009 	.word	0x00409009
  408914:	00418c38 	.word	0x00418c38
  408918:	00408631 	.word	0x00408631
  40891c:	00409535 	.word	0x00409535
  408920:	2000186c 	.word	0x2000186c
  408924:	20001860 	.word	0x20001860
  408928:	00407d25 	.word	0x00407d25

0040892c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40892c:	b480      	push	{r7}
  40892e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  408930:	4b04      	ldr	r3, [pc, #16]	; (408944 <vTaskSuspendAll+0x18>)
  408932:	681b      	ldr	r3, [r3, #0]
  408934:	1c5a      	adds	r2, r3, #1
  408936:	4b03      	ldr	r3, [pc, #12]	; (408944 <vTaskSuspendAll+0x18>)
  408938:	601a      	str	r2, [r3, #0]
}
  40893a:	46bd      	mov	sp, r7
  40893c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408940:	4770      	bx	lr
  408942:	bf00      	nop
  408944:	20001870 	.word	0x20001870

00408948 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  408948:	b590      	push	{r4, r7, lr}
  40894a:	b083      	sub	sp, #12
  40894c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40894e:	2300      	movs	r3, #0
  408950:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  408952:	4b32      	ldr	r3, [pc, #200]	; (408a1c <xTaskResumeAll+0xd4>)
  408954:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  408956:	4b32      	ldr	r3, [pc, #200]	; (408a20 <xTaskResumeAll+0xd8>)
  408958:	681b      	ldr	r3, [r3, #0]
  40895a:	1e5a      	subs	r2, r3, #1
  40895c:	4b30      	ldr	r3, [pc, #192]	; (408a20 <xTaskResumeAll+0xd8>)
  40895e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  408960:	4b2f      	ldr	r3, [pc, #188]	; (408a20 <xTaskResumeAll+0xd8>)
  408962:	681b      	ldr	r3, [r3, #0]
  408964:	2b00      	cmp	r3, #0
  408966:	d152      	bne.n	408a0e <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
  408968:	4b2e      	ldr	r3, [pc, #184]	; (408a24 <xTaskResumeAll+0xdc>)
  40896a:	681b      	ldr	r3, [r3, #0]
  40896c:	2b00      	cmp	r3, #0
  40896e:	d04e      	beq.n	408a0e <xTaskResumeAll+0xc6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  408970:	2300      	movs	r3, #0
  408972:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  408974:	e027      	b.n	4089c6 <xTaskResumeAll+0x7e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  408976:	4b2c      	ldr	r3, [pc, #176]	; (408a28 <xTaskResumeAll+0xe0>)
  408978:	68db      	ldr	r3, [r3, #12]
  40897a:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
  40897c:	f104 0318 	add.w	r3, r4, #24
  408980:	4618      	mov	r0, r3
  408982:	4b2a      	ldr	r3, [pc, #168]	; (408a2c <xTaskResumeAll+0xe4>)
  408984:	4798      	blx	r3
					vListRemove( &( pxTCB->xGenericListItem ) );
  408986:	1d23      	adds	r3, r4, #4
  408988:	4618      	mov	r0, r3
  40898a:	4b28      	ldr	r3, [pc, #160]	; (408a2c <xTaskResumeAll+0xe4>)
  40898c:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40898e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  408990:	4b27      	ldr	r3, [pc, #156]	; (408a30 <xTaskResumeAll+0xe8>)
  408992:	681b      	ldr	r3, [r3, #0]
  408994:	429a      	cmp	r2, r3
  408996:	d902      	bls.n	40899e <xTaskResumeAll+0x56>
  408998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40899a:	4b25      	ldr	r3, [pc, #148]	; (408a30 <xTaskResumeAll+0xe8>)
  40899c:	601a      	str	r2, [r3, #0]
  40899e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4089a0:	4613      	mov	r3, r2
  4089a2:	009b      	lsls	r3, r3, #2
  4089a4:	4413      	add	r3, r2
  4089a6:	009b      	lsls	r3, r3, #2
  4089a8:	4a22      	ldr	r2, [pc, #136]	; (408a34 <xTaskResumeAll+0xec>)
  4089aa:	441a      	add	r2, r3
  4089ac:	1d23      	adds	r3, r4, #4
  4089ae:	4610      	mov	r0, r2
  4089b0:	4619      	mov	r1, r3
  4089b2:	4b21      	ldr	r3, [pc, #132]	; (408a38 <xTaskResumeAll+0xf0>)
  4089b4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4089b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4089b8:	4b20      	ldr	r3, [pc, #128]	; (408a3c <xTaskResumeAll+0xf4>)
  4089ba:	681b      	ldr	r3, [r3, #0]
  4089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4089be:	429a      	cmp	r2, r3
  4089c0:	d301      	bcc.n	4089c6 <xTaskResumeAll+0x7e>
					{
						xYieldRequired = pdTRUE;
  4089c2:	2301      	movs	r3, #1
  4089c4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4089c6:	4b18      	ldr	r3, [pc, #96]	; (408a28 <xTaskResumeAll+0xe0>)
  4089c8:	681b      	ldr	r3, [r3, #0]
  4089ca:	2b00      	cmp	r3, #0
  4089cc:	d1d3      	bne.n	408976 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4089ce:	4b1c      	ldr	r3, [pc, #112]	; (408a40 <xTaskResumeAll+0xf8>)
  4089d0:	681b      	ldr	r3, [r3, #0]
  4089d2:	2b00      	cmp	r3, #0
  4089d4:	d00d      	beq.n	4089f2 <xTaskResumeAll+0xaa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4089d6:	e006      	b.n	4089e6 <xTaskResumeAll+0x9e>
					{
						vTaskIncrementTick();
  4089d8:	4b1a      	ldr	r3, [pc, #104]	; (408a44 <xTaskResumeAll+0xfc>)
  4089da:	4798      	blx	r3
						--uxMissedTicks;
  4089dc:	4b18      	ldr	r3, [pc, #96]	; (408a40 <xTaskResumeAll+0xf8>)
  4089de:	681b      	ldr	r3, [r3, #0]
  4089e0:	1e5a      	subs	r2, r3, #1
  4089e2:	4b17      	ldr	r3, [pc, #92]	; (408a40 <xTaskResumeAll+0xf8>)
  4089e4:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
  4089e6:	4b16      	ldr	r3, [pc, #88]	; (408a40 <xTaskResumeAll+0xf8>)
  4089e8:	681b      	ldr	r3, [r3, #0]
  4089ea:	2b00      	cmp	r3, #0
  4089ec:	d1f4      	bne.n	4089d8 <xTaskResumeAll+0x90>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  4089ee:	2301      	movs	r3, #1
  4089f0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  4089f2:	683b      	ldr	r3, [r7, #0]
  4089f4:	2b01      	cmp	r3, #1
  4089f6:	d003      	beq.n	408a00 <xTaskResumeAll+0xb8>
  4089f8:	4b13      	ldr	r3, [pc, #76]	; (408a48 <xTaskResumeAll+0x100>)
  4089fa:	681b      	ldr	r3, [r3, #0]
  4089fc:	2b01      	cmp	r3, #1
  4089fe:	d106      	bne.n	408a0e <xTaskResumeAll+0xc6>
				{
					xAlreadyYielded = pdTRUE;
  408a00:	2301      	movs	r3, #1
  408a02:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  408a04:	4b10      	ldr	r3, [pc, #64]	; (408a48 <xTaskResumeAll+0x100>)
  408a06:	2200      	movs	r2, #0
  408a08:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  408a0a:	4b10      	ldr	r3, [pc, #64]	; (408a4c <xTaskResumeAll+0x104>)
  408a0c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  408a0e:	4b10      	ldr	r3, [pc, #64]	; (408a50 <xTaskResumeAll+0x108>)
  408a10:	4798      	blx	r3

	return xAlreadyYielded;
  408a12:	687b      	ldr	r3, [r7, #4]
}
  408a14:	4618      	mov	r0, r3
  408a16:	370c      	adds	r7, #12
  408a18:	46bd      	mov	sp, r7
  408a1a:	bd90      	pop	{r4, r7, pc}
  408a1c:	00407d7d 	.word	0x00407d7d
  408a20:	20001870 	.word	0x20001870
  408a24:	2000185c 	.word	0x2000185c
  408a28:	2000181c 	.word	0x2000181c
  408a2c:	00407ba9 	.word	0x00407ba9
  408a30:	20001868 	.word	0x20001868
  408a34:	2000174c 	.word	0x2000174c
  408a38:	00407ae9 	.word	0x00407ae9
  408a3c:	20001748 	.word	0x20001748
  408a40:	20001874 	.word	0x20001874
  408a44:	00408b8d 	.word	0x00408b8d
  408a48:	20001878 	.word	0x20001878
  408a4c:	00407d65 	.word	0x00407d65
  408a50:	00407da1 	.word	0x00407da1

00408a54 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  408a54:	b580      	push	{r7, lr}
  408a56:	b082      	sub	sp, #8
  408a58:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  408a5a:	4b06      	ldr	r3, [pc, #24]	; (408a74 <xTaskGetTickCount+0x20>)
  408a5c:	4798      	blx	r3
	{
		xTicks = xTickCount;
  408a5e:	4b06      	ldr	r3, [pc, #24]	; (408a78 <xTaskGetTickCount+0x24>)
  408a60:	681b      	ldr	r3, [r3, #0]
  408a62:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  408a64:	4b05      	ldr	r3, [pc, #20]	; (408a7c <xTaskGetTickCount+0x28>)
  408a66:	4798      	blx	r3

	return xTicks;
  408a68:	687b      	ldr	r3, [r7, #4]
}
  408a6a:	4618      	mov	r0, r3
  408a6c:	3708      	adds	r7, #8
  408a6e:	46bd      	mov	sp, r7
  408a70:	bd80      	pop	{r7, pc}
  408a72:	bf00      	nop
  408a74:	00407d7d 	.word	0x00407d7d
  408a78:	20001860 	.word	0x20001860
  408a7c:	00407da1 	.word	0x00407da1

00408a80 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
  408a80:	b480      	push	{r7}
  408a82:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
  408a84:	4b03      	ldr	r3, [pc, #12]	; (408a94 <uxTaskGetNumberOfTasks+0x14>)
  408a86:	681b      	ldr	r3, [r3, #0]
}
  408a88:	4618      	mov	r0, r3
  408a8a:	46bd      	mov	sp, r7
  408a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a90:	4770      	bx	lr
  408a92:	bf00      	nop
  408a94:	2000185c 	.word	0x2000185c

00408a98 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
  408a98:	b590      	push	{r4, r7, lr}
  408a9a:	b085      	sub	sp, #20
  408a9c:	af00      	add	r7, sp, #0
  408a9e:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
  408aa0:	4b2f      	ldr	r3, [pc, #188]	; (408b60 <vTaskList+0xc8>)
  408aa2:	4798      	blx	r3
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
  408aa4:	687b      	ldr	r3, [r7, #4]
  408aa6:	2200      	movs	r2, #0
  408aa8:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
  408aaa:	687c      	ldr	r4, [r7, #4]
  408aac:	4620      	mov	r0, r4
  408aae:	4b2d      	ldr	r3, [pc, #180]	; (408b64 <vTaskList+0xcc>)
  408ab0:	4798      	blx	r3
  408ab2:	4603      	mov	r3, r0
  408ab4:	4423      	add	r3, r4
  408ab6:	4a2c      	ldr	r2, [pc, #176]	; (408b68 <vTaskList+0xd0>)
  408ab8:	8811      	ldrh	r1, [r2, #0]
  408aba:	7892      	ldrb	r2, [r2, #2]
  408abc:	8019      	strh	r1, [r3, #0]
  408abe:	709a      	strb	r2, [r3, #2]

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
  408ac0:	4b2a      	ldr	r3, [pc, #168]	; (408b6c <vTaskList+0xd4>)
  408ac2:	681b      	ldr	r3, [r3, #0]
  408ac4:	3301      	adds	r3, #1
  408ac6:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
  408ac8:	68fb      	ldr	r3, [r7, #12]
  408aca:	3b01      	subs	r3, #1
  408acc:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
  408ace:	4928      	ldr	r1, [pc, #160]	; (408b70 <vTaskList+0xd8>)
  408ad0:	68fa      	ldr	r2, [r7, #12]
  408ad2:	4613      	mov	r3, r2
  408ad4:	009b      	lsls	r3, r3, #2
  408ad6:	4413      	add	r3, r2
  408ad8:	009b      	lsls	r3, r3, #2
  408ada:	440b      	add	r3, r1
  408adc:	681b      	ldr	r3, [r3, #0]
  408ade:	2b00      	cmp	r3, #0
  408ae0:	d00b      	beq.n	408afa <vTaskList+0x62>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
  408ae2:	68fa      	ldr	r2, [r7, #12]
  408ae4:	4613      	mov	r3, r2
  408ae6:	009b      	lsls	r3, r3, #2
  408ae8:	4413      	add	r3, r2
  408aea:	009b      	lsls	r3, r3, #2
  408aec:	4a20      	ldr	r2, [pc, #128]	; (408b70 <vTaskList+0xd8>)
  408aee:	4413      	add	r3, r2
  408af0:	6878      	ldr	r0, [r7, #4]
  408af2:	4619      	mov	r1, r3
  408af4:	2252      	movs	r2, #82	; 0x52
  408af6:	4b1f      	ldr	r3, [pc, #124]	; (408b74 <vTaskList+0xdc>)
  408af8:	4798      	blx	r3
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
  408afa:	68fb      	ldr	r3, [r7, #12]
  408afc:	2b00      	cmp	r3, #0
  408afe:	d1e3      	bne.n	408ac8 <vTaskList+0x30>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
  408b00:	4b1d      	ldr	r3, [pc, #116]	; (408b78 <vTaskList+0xe0>)
  408b02:	681b      	ldr	r3, [r3, #0]
  408b04:	681b      	ldr	r3, [r3, #0]
  408b06:	2b00      	cmp	r3, #0
  408b08:	d006      	beq.n	408b18 <vTaskList+0x80>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
  408b0a:	4b1b      	ldr	r3, [pc, #108]	; (408b78 <vTaskList+0xe0>)
  408b0c:	681b      	ldr	r3, [r3, #0]
  408b0e:	6878      	ldr	r0, [r7, #4]
  408b10:	4619      	mov	r1, r3
  408b12:	2242      	movs	r2, #66	; 0x42
  408b14:	4b17      	ldr	r3, [pc, #92]	; (408b74 <vTaskList+0xdc>)
  408b16:	4798      	blx	r3
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
  408b18:	4b18      	ldr	r3, [pc, #96]	; (408b7c <vTaskList+0xe4>)
  408b1a:	681b      	ldr	r3, [r3, #0]
  408b1c:	681b      	ldr	r3, [r3, #0]
  408b1e:	2b00      	cmp	r3, #0
  408b20:	d006      	beq.n	408b30 <vTaskList+0x98>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
  408b22:	4b16      	ldr	r3, [pc, #88]	; (408b7c <vTaskList+0xe4>)
  408b24:	681b      	ldr	r3, [r3, #0]
  408b26:	6878      	ldr	r0, [r7, #4]
  408b28:	4619      	mov	r1, r3
  408b2a:	2242      	movs	r2, #66	; 0x42
  408b2c:	4b11      	ldr	r3, [pc, #68]	; (408b74 <vTaskList+0xdc>)
  408b2e:	4798      	blx	r3
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
  408b30:	4b13      	ldr	r3, [pc, #76]	; (408b80 <vTaskList+0xe8>)
  408b32:	681b      	ldr	r3, [r3, #0]
  408b34:	2b00      	cmp	r3, #0
  408b36:	d004      	beq.n	408b42 <vTaskList+0xaa>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
  408b38:	6878      	ldr	r0, [r7, #4]
  408b3a:	4911      	ldr	r1, [pc, #68]	; (408b80 <vTaskList+0xe8>)
  408b3c:	2244      	movs	r2, #68	; 0x44
  408b3e:	4b0d      	ldr	r3, [pc, #52]	; (408b74 <vTaskList+0xdc>)
  408b40:	4798      	blx	r3
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
  408b42:	4b10      	ldr	r3, [pc, #64]	; (408b84 <vTaskList+0xec>)
  408b44:	681b      	ldr	r3, [r3, #0]
  408b46:	2b00      	cmp	r3, #0
  408b48:	d004      	beq.n	408b54 <vTaskList+0xbc>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
  408b4a:	6878      	ldr	r0, [r7, #4]
  408b4c:	490d      	ldr	r1, [pc, #52]	; (408b84 <vTaskList+0xec>)
  408b4e:	2253      	movs	r2, #83	; 0x53
  408b50:	4b08      	ldr	r3, [pc, #32]	; (408b74 <vTaskList+0xdc>)
  408b52:	4798      	blx	r3
				}
			}
			#endif
		}
		xTaskResumeAll();
  408b54:	4b0c      	ldr	r3, [pc, #48]	; (408b88 <vTaskList+0xf0>)
  408b56:	4798      	blx	r3
	}
  408b58:	3714      	adds	r7, #20
  408b5a:	46bd      	mov	sp, r7
  408b5c:	bd90      	pop	{r4, r7, pc}
  408b5e:	bf00      	nop
  408b60:	0040892d 	.word	0x0040892d
  408b64:	0040f819 	.word	0x0040f819
  408b68:	00418c40 	.word	0x00418c40
  408b6c:	20001864 	.word	0x20001864
  408b70:	2000174c 	.word	0x2000174c
  408b74:	00409295 	.word	0x00409295
  408b78:	20001814 	.word	0x20001814
  408b7c:	20001818 	.word	0x20001818
  408b80:	20001830 	.word	0x20001830
  408b84:	20001848 	.word	0x20001848
  408b88:	00408949 	.word	0x00408949

00408b8c <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
  408b8c:	b580      	push	{r7, lr}
  408b8e:	b084      	sub	sp, #16
  408b90:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  408b92:	4b40      	ldr	r3, [pc, #256]	; (408c94 <vTaskIncrementTick+0x108>)
  408b94:	681b      	ldr	r3, [r3, #0]
  408b96:	2b00      	cmp	r3, #0
  408b98:	d173      	bne.n	408c82 <vTaskIncrementTick+0xf6>
	{
		++xTickCount;
  408b9a:	4b3f      	ldr	r3, [pc, #252]	; (408c98 <vTaskIncrementTick+0x10c>)
  408b9c:	681b      	ldr	r3, [r3, #0]
  408b9e:	1c5a      	adds	r2, r3, #1
  408ba0:	4b3d      	ldr	r3, [pc, #244]	; (408c98 <vTaskIncrementTick+0x10c>)
  408ba2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0 )
  408ba4:	4b3c      	ldr	r3, [pc, #240]	; (408c98 <vTaskIncrementTick+0x10c>)
  408ba6:	681b      	ldr	r3, [r3, #0]
  408ba8:	2b00      	cmp	r3, #0
  408baa:	d121      	bne.n	408bf0 <vTaskIncrementTick+0x64>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
  408bac:	4b3b      	ldr	r3, [pc, #236]	; (408c9c <vTaskIncrementTick+0x110>)
  408bae:	681b      	ldr	r3, [r3, #0]
  408bb0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  408bb2:	4b3b      	ldr	r3, [pc, #236]	; (408ca0 <vTaskIncrementTick+0x114>)
  408bb4:	681a      	ldr	r2, [r3, #0]
  408bb6:	4b39      	ldr	r3, [pc, #228]	; (408c9c <vTaskIncrementTick+0x110>)
  408bb8:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  408bba:	4b39      	ldr	r3, [pc, #228]	; (408ca0 <vTaskIncrementTick+0x114>)
  408bbc:	68fa      	ldr	r2, [r7, #12]
  408bbe:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  408bc0:	4b38      	ldr	r3, [pc, #224]	; (408ca4 <vTaskIncrementTick+0x118>)
  408bc2:	681b      	ldr	r3, [r3, #0]
  408bc4:	1c5a      	adds	r2, r3, #1
  408bc6:	4b37      	ldr	r3, [pc, #220]	; (408ca4 <vTaskIncrementTick+0x118>)
  408bc8:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  408bca:	4b34      	ldr	r3, [pc, #208]	; (408c9c <vTaskIncrementTick+0x110>)
  408bcc:	681b      	ldr	r3, [r3, #0]
  408bce:	681b      	ldr	r3, [r3, #0]
  408bd0:	2b00      	cmp	r3, #0
  408bd2:	d104      	bne.n	408bde <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  408bd4:	4b34      	ldr	r3, [pc, #208]	; (408ca8 <vTaskIncrementTick+0x11c>)
  408bd6:	f04f 32ff 	mov.w	r2, #4294967295
  408bda:	601a      	str	r2, [r3, #0]
  408bdc:	e008      	b.n	408bf0 <vTaskIncrementTick+0x64>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  408bde:	4b2f      	ldr	r3, [pc, #188]	; (408c9c <vTaskIncrementTick+0x110>)
  408be0:	681b      	ldr	r3, [r3, #0]
  408be2:	68db      	ldr	r3, [r3, #12]
  408be4:	68db      	ldr	r3, [r3, #12]
  408be6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  408be8:	68bb      	ldr	r3, [r7, #8]
  408bea:	685a      	ldr	r2, [r3, #4]
  408bec:	4b2e      	ldr	r3, [pc, #184]	; (408ca8 <vTaskIncrementTick+0x11c>)
  408bee:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  408bf0:	4b29      	ldr	r3, [pc, #164]	; (408c98 <vTaskIncrementTick+0x10c>)
  408bf2:	681a      	ldr	r2, [r3, #0]
  408bf4:	4b2c      	ldr	r3, [pc, #176]	; (408ca8 <vTaskIncrementTick+0x11c>)
  408bf6:	681b      	ldr	r3, [r3, #0]
  408bf8:	429a      	cmp	r2, r3
  408bfa:	d341      	bcc.n	408c80 <vTaskIncrementTick+0xf4>
  408bfc:	4b27      	ldr	r3, [pc, #156]	; (408c9c <vTaskIncrementTick+0x110>)
  408bfe:	681b      	ldr	r3, [r3, #0]
  408c00:	681b      	ldr	r3, [r3, #0]
  408c02:	2b00      	cmp	r3, #0
  408c04:	d104      	bne.n	408c10 <vTaskIncrementTick+0x84>
  408c06:	4b28      	ldr	r3, [pc, #160]	; (408ca8 <vTaskIncrementTick+0x11c>)
  408c08:	f04f 32ff 	mov.w	r2, #4294967295
  408c0c:	601a      	str	r2, [r3, #0]
  408c0e:	e037      	b.n	408c80 <vTaskIncrementTick+0xf4>
  408c10:	4b22      	ldr	r3, [pc, #136]	; (408c9c <vTaskIncrementTick+0x110>)
  408c12:	681b      	ldr	r3, [r3, #0]
  408c14:	68db      	ldr	r3, [r3, #12]
  408c16:	68db      	ldr	r3, [r3, #12]
  408c18:	60bb      	str	r3, [r7, #8]
  408c1a:	68bb      	ldr	r3, [r7, #8]
  408c1c:	685b      	ldr	r3, [r3, #4]
  408c1e:	607b      	str	r3, [r7, #4]
  408c20:	4b1d      	ldr	r3, [pc, #116]	; (408c98 <vTaskIncrementTick+0x10c>)
  408c22:	681a      	ldr	r2, [r3, #0]
  408c24:	687b      	ldr	r3, [r7, #4]
  408c26:	429a      	cmp	r2, r3
  408c28:	d203      	bcs.n	408c32 <vTaskIncrementTick+0xa6>
  408c2a:	4b1f      	ldr	r3, [pc, #124]	; (408ca8 <vTaskIncrementTick+0x11c>)
  408c2c:	687a      	ldr	r2, [r7, #4]
  408c2e:	601a      	str	r2, [r3, #0]
  408c30:	e026      	b.n	408c80 <vTaskIncrementTick+0xf4>
  408c32:	68bb      	ldr	r3, [r7, #8]
  408c34:	3304      	adds	r3, #4
  408c36:	4618      	mov	r0, r3
  408c38:	4b1c      	ldr	r3, [pc, #112]	; (408cac <vTaskIncrementTick+0x120>)
  408c3a:	4798      	blx	r3
  408c3c:	68bb      	ldr	r3, [r7, #8]
  408c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408c40:	2b00      	cmp	r3, #0
  408c42:	d004      	beq.n	408c4e <vTaskIncrementTick+0xc2>
  408c44:	68bb      	ldr	r3, [r7, #8]
  408c46:	3318      	adds	r3, #24
  408c48:	4618      	mov	r0, r3
  408c4a:	4b18      	ldr	r3, [pc, #96]	; (408cac <vTaskIncrementTick+0x120>)
  408c4c:	4798      	blx	r3
  408c4e:	68bb      	ldr	r3, [r7, #8]
  408c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408c52:	4b17      	ldr	r3, [pc, #92]	; (408cb0 <vTaskIncrementTick+0x124>)
  408c54:	681b      	ldr	r3, [r3, #0]
  408c56:	429a      	cmp	r2, r3
  408c58:	d903      	bls.n	408c62 <vTaskIncrementTick+0xd6>
  408c5a:	68bb      	ldr	r3, [r7, #8]
  408c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408c5e:	4b14      	ldr	r3, [pc, #80]	; (408cb0 <vTaskIncrementTick+0x124>)
  408c60:	601a      	str	r2, [r3, #0]
  408c62:	68bb      	ldr	r3, [r7, #8]
  408c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408c66:	4613      	mov	r3, r2
  408c68:	009b      	lsls	r3, r3, #2
  408c6a:	4413      	add	r3, r2
  408c6c:	009b      	lsls	r3, r3, #2
  408c6e:	4a11      	ldr	r2, [pc, #68]	; (408cb4 <vTaskIncrementTick+0x128>)
  408c70:	441a      	add	r2, r3
  408c72:	68bb      	ldr	r3, [r7, #8]
  408c74:	3304      	adds	r3, #4
  408c76:	4610      	mov	r0, r2
  408c78:	4619      	mov	r1, r3
  408c7a:	4b0f      	ldr	r3, [pc, #60]	; (408cb8 <vTaskIncrementTick+0x12c>)
  408c7c:	4798      	blx	r3
  408c7e:	e7bd      	b.n	408bfc <vTaskIncrementTick+0x70>
  408c80:	e004      	b.n	408c8c <vTaskIncrementTick+0x100>
	}
	else
	{
		++uxMissedTicks;
  408c82:	4b0e      	ldr	r3, [pc, #56]	; (408cbc <vTaskIncrementTick+0x130>)
  408c84:	681b      	ldr	r3, [r3, #0]
  408c86:	1c5a      	adds	r2, r3, #1
  408c88:	4b0c      	ldr	r3, [pc, #48]	; (408cbc <vTaskIncrementTick+0x130>)
  408c8a:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
  408c8c:	3710      	adds	r7, #16
  408c8e:	46bd      	mov	sp, r7
  408c90:	bd80      	pop	{r7, pc}
  408c92:	bf00      	nop
  408c94:	20001870 	.word	0x20001870
  408c98:	20001860 	.word	0x20001860
  408c9c:	20001814 	.word	0x20001814
  408ca0:	20001818 	.word	0x20001818
  408ca4:	2000187c 	.word	0x2000187c
  408ca8:	20000044 	.word	0x20000044
  408cac:	00407ba9 	.word	0x00407ba9
  408cb0:	20001868 	.word	0x20001868
  408cb4:	2000174c 	.word	0x2000174c
  408cb8:	00407ae9 	.word	0x00407ae9
  408cbc:	20001874 	.word	0x20001874

00408cc0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  408cc0:	b480      	push	{r7}
  408cc2:	b083      	sub	sp, #12
  408cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  408cc6:	4b36      	ldr	r3, [pc, #216]	; (408da0 <vTaskSwitchContext+0xe0>)
  408cc8:	681b      	ldr	r3, [r3, #0]
  408cca:	2b00      	cmp	r3, #0
  408ccc:	d003      	beq.n	408cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  408cce:	4b35      	ldr	r3, [pc, #212]	; (408da4 <vTaskSwitchContext+0xe4>)
  408cd0:	2201      	movs	r2, #1
  408cd2:	601a      	str	r2, [r3, #0]
  408cd4:	e05e      	b.n	408d94 <vTaskSwitchContext+0xd4>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  408cd6:	e004      	b.n	408ce2 <vTaskSwitchContext+0x22>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
  408cd8:	4b33      	ldr	r3, [pc, #204]	; (408da8 <vTaskSwitchContext+0xe8>)
  408cda:	681b      	ldr	r3, [r3, #0]
  408cdc:	1e5a      	subs	r2, r3, #1
  408cde:	4b32      	ldr	r3, [pc, #200]	; (408da8 <vTaskSwitchContext+0xe8>)
  408ce0:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
  408ce2:	4b31      	ldr	r3, [pc, #196]	; (408da8 <vTaskSwitchContext+0xe8>)
  408ce4:	681a      	ldr	r2, [r3, #0]
  408ce6:	4931      	ldr	r1, [pc, #196]	; (408dac <vTaskSwitchContext+0xec>)
  408ce8:	4613      	mov	r3, r2
  408cea:	009b      	lsls	r3, r3, #2
  408cec:	4413      	add	r3, r2
  408cee:	009b      	lsls	r3, r3, #2
  408cf0:	440b      	add	r3, r1
  408cf2:	681b      	ldr	r3, [r3, #0]
  408cf4:	2b00      	cmp	r3, #0
  408cf6:	d0ef      	beq.n	408cd8 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
  408cf8:	4b2b      	ldr	r3, [pc, #172]	; (408da8 <vTaskSwitchContext+0xe8>)
  408cfa:	681a      	ldr	r2, [r3, #0]
  408cfc:	4613      	mov	r3, r2
  408cfe:	009b      	lsls	r3, r3, #2
  408d00:	4413      	add	r3, r2
  408d02:	009b      	lsls	r3, r3, #2
  408d04:	4a29      	ldr	r2, [pc, #164]	; (408dac <vTaskSwitchContext+0xec>)
  408d06:	4413      	add	r3, r2
  408d08:	607b      	str	r3, [r7, #4]
  408d0a:	687b      	ldr	r3, [r7, #4]
  408d0c:	685b      	ldr	r3, [r3, #4]
  408d0e:	685a      	ldr	r2, [r3, #4]
  408d10:	687b      	ldr	r3, [r7, #4]
  408d12:	605a      	str	r2, [r3, #4]
  408d14:	687b      	ldr	r3, [r7, #4]
  408d16:	685a      	ldr	r2, [r3, #4]
  408d18:	687b      	ldr	r3, [r7, #4]
  408d1a:	3308      	adds	r3, #8
  408d1c:	429a      	cmp	r2, r3
  408d1e:	d104      	bne.n	408d2a <vTaskSwitchContext+0x6a>
  408d20:	687b      	ldr	r3, [r7, #4]
  408d22:	685b      	ldr	r3, [r3, #4]
  408d24:	685a      	ldr	r2, [r3, #4]
  408d26:	687b      	ldr	r3, [r7, #4]
  408d28:	605a      	str	r2, [r3, #4]
  408d2a:	687b      	ldr	r3, [r7, #4]
  408d2c:	685b      	ldr	r3, [r3, #4]
  408d2e:	68da      	ldr	r2, [r3, #12]
  408d30:	4b1f      	ldr	r3, [pc, #124]	; (408db0 <vTaskSwitchContext+0xf0>)
  408d32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
  408d34:	4b1f      	ldr	r3, [pc, #124]	; (408db4 <vTaskSwitchContext+0xf4>)
  408d36:	681b      	ldr	r3, [r3, #0]
  408d38:	2b00      	cmp	r3, #0
  408d3a:	d02b      	beq.n	408d94 <vTaskSwitchContext+0xd4>
  408d3c:	4b1c      	ldr	r3, [pc, #112]	; (408db0 <vTaskSwitchContext+0xf0>)
  408d3e:	681b      	ldr	r3, [r3, #0]
  408d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  408d42:	4b1d      	ldr	r3, [pc, #116]	; (408db8 <vTaskSwitchContext+0xf8>)
  408d44:	681b      	ldr	r3, [r3, #0]
  408d46:	429a      	cmp	r2, r3
  408d48:	d024      	beq.n	408d94 <vTaskSwitchContext+0xd4>
  408d4a:	4b1c      	ldr	r3, [pc, #112]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d4c:	681b      	ldr	r3, [r3, #0]
  408d4e:	f103 0208 	add.w	r2, r3, #8
  408d52:	4b1b      	ldr	r3, [pc, #108]	; (408dc0 <vTaskSwitchContext+0x100>)
  408d54:	681b      	ldr	r3, [r3, #0]
  408d56:	429a      	cmp	r2, r3
  408d58:	d219      	bcs.n	408d8e <vTaskSwitchContext+0xce>
  408d5a:	4b15      	ldr	r3, [pc, #84]	; (408db0 <vTaskSwitchContext+0xf0>)
  408d5c:	681b      	ldr	r3, [r3, #0]
  408d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  408d60:	4b15      	ldr	r3, [pc, #84]	; (408db8 <vTaskSwitchContext+0xf8>)
  408d62:	601a      	str	r2, [r3, #0]
  408d64:	4b15      	ldr	r3, [pc, #84]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d66:	681b      	ldr	r3, [r3, #0]
  408d68:	4a16      	ldr	r2, [pc, #88]	; (408dc4 <vTaskSwitchContext+0x104>)
  408d6a:	6812      	ldr	r2, [r2, #0]
  408d6c:	601a      	str	r2, [r3, #0]
  408d6e:	4b13      	ldr	r3, [pc, #76]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d70:	681b      	ldr	r3, [r3, #0]
  408d72:	1d1a      	adds	r2, r3, #4
  408d74:	4b11      	ldr	r3, [pc, #68]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d76:	601a      	str	r2, [r3, #0]
  408d78:	4b10      	ldr	r3, [pc, #64]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d7a:	681b      	ldr	r3, [r3, #0]
  408d7c:	4a0e      	ldr	r2, [pc, #56]	; (408db8 <vTaskSwitchContext+0xf8>)
  408d7e:	6812      	ldr	r2, [r2, #0]
  408d80:	601a      	str	r2, [r3, #0]
  408d82:	4b0e      	ldr	r3, [pc, #56]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d84:	681b      	ldr	r3, [r3, #0]
  408d86:	1d1a      	adds	r2, r3, #4
  408d88:	4b0c      	ldr	r3, [pc, #48]	; (408dbc <vTaskSwitchContext+0xfc>)
  408d8a:	601a      	str	r2, [r3, #0]
  408d8c:	e002      	b.n	408d94 <vTaskSwitchContext+0xd4>
  408d8e:	4b09      	ldr	r3, [pc, #36]	; (408db4 <vTaskSwitchContext+0xf4>)
  408d90:	2200      	movs	r2, #0
  408d92:	601a      	str	r2, [r3, #0]
	}
}
  408d94:	370c      	adds	r7, #12
  408d96:	46bd      	mov	sp, r7
  408d98:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d9c:	4770      	bx	lr
  408d9e:	bf00      	nop
  408da0:	20001870 	.word	0x20001870
  408da4:	20001878 	.word	0x20001878
  408da8:	20001868 	.word	0x20001868
  408dac:	2000174c 	.word	0x2000174c
  408db0:	20001748 	.word	0x20001748
  408db4:	2000188c 	.word	0x2000188c
  408db8:	20000048 	.word	0x20000048
  408dbc:	20001884 	.word	0x20001884
  408dc0:	20001888 	.word	0x20001888
  408dc4:	20001860 	.word	0x20001860

00408dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  408dc8:	b580      	push	{r7, lr}
  408dca:	b084      	sub	sp, #16
  408dcc:	af00      	add	r7, sp, #0
  408dce:	6078      	str	r0, [r7, #4]
  408dd0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  408dd2:	4b12      	ldr	r3, [pc, #72]	; (408e1c <vTaskPlaceOnEventList+0x54>)
  408dd4:	681b      	ldr	r3, [r3, #0]
  408dd6:	3318      	adds	r3, #24
  408dd8:	6878      	ldr	r0, [r7, #4]
  408dda:	4619      	mov	r1, r3
  408ddc:	4b10      	ldr	r3, [pc, #64]	; (408e20 <vTaskPlaceOnEventList+0x58>)
  408dde:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  408de0:	4b0e      	ldr	r3, [pc, #56]	; (408e1c <vTaskPlaceOnEventList+0x54>)
  408de2:	681b      	ldr	r3, [r3, #0]
  408de4:	3304      	adds	r3, #4
  408de6:	4618      	mov	r0, r3
  408de8:	4b0e      	ldr	r3, [pc, #56]	; (408e24 <vTaskPlaceOnEventList+0x5c>)
  408dea:	4798      	blx	r3


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  408dec:	683b      	ldr	r3, [r7, #0]
  408dee:	f1b3 3fff 	cmp.w	r3, #4294967295
  408df2:	d107      	bne.n	408e04 <vTaskPlaceOnEventList+0x3c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  408df4:	4b09      	ldr	r3, [pc, #36]	; (408e1c <vTaskPlaceOnEventList+0x54>)
  408df6:	681b      	ldr	r3, [r3, #0]
  408df8:	3304      	adds	r3, #4
  408dfa:	480b      	ldr	r0, [pc, #44]	; (408e28 <vTaskPlaceOnEventList+0x60>)
  408dfc:	4619      	mov	r1, r3
  408dfe:	4b0b      	ldr	r3, [pc, #44]	; (408e2c <vTaskPlaceOnEventList+0x64>)
  408e00:	4798      	blx	r3
  408e02:	e007      	b.n	408e14 <vTaskPlaceOnEventList+0x4c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  408e04:	4b0a      	ldr	r3, [pc, #40]	; (408e30 <vTaskPlaceOnEventList+0x68>)
  408e06:	681a      	ldr	r2, [r3, #0]
  408e08:	683b      	ldr	r3, [r7, #0]
  408e0a:	4413      	add	r3, r2
  408e0c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  408e0e:	68f8      	ldr	r0, [r7, #12]
  408e10:	4b08      	ldr	r3, [pc, #32]	; (408e34 <vTaskPlaceOnEventList+0x6c>)
  408e12:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  408e14:	3710      	adds	r7, #16
  408e16:	46bd      	mov	sp, r7
  408e18:	bd80      	pop	{r7, pc}
  408e1a:	bf00      	nop
  408e1c:	20001748 	.word	0x20001748
  408e20:	00407b39 	.word	0x00407b39
  408e24:	00407ba9 	.word	0x00407ba9
  408e28:	20001848 	.word	0x20001848
  408e2c:	00407ae9 	.word	0x00407ae9
  408e30:	20001860 	.word	0x20001860
  408e34:	004091b5 	.word	0x004091b5

00408e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  408e38:	b580      	push	{r7, lr}
  408e3a:	b084      	sub	sp, #16
  408e3c:	af00      	add	r7, sp, #0
  408e3e:	6078      	str	r0, [r7, #4]
  408e40:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  408e42:	4b0c      	ldr	r3, [pc, #48]	; (408e74 <vTaskPlaceOnEventListRestricted+0x3c>)
  408e44:	681b      	ldr	r3, [r3, #0]
  408e46:	3318      	adds	r3, #24
  408e48:	6878      	ldr	r0, [r7, #4]
  408e4a:	4619      	mov	r1, r3
  408e4c:	4b0a      	ldr	r3, [pc, #40]	; (408e78 <vTaskPlaceOnEventListRestricted+0x40>)
  408e4e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  408e50:	4b08      	ldr	r3, [pc, #32]	; (408e74 <vTaskPlaceOnEventListRestricted+0x3c>)
  408e52:	681b      	ldr	r3, [r3, #0]
  408e54:	3304      	adds	r3, #4
  408e56:	4618      	mov	r0, r3
  408e58:	4b08      	ldr	r3, [pc, #32]	; (408e7c <vTaskPlaceOnEventListRestricted+0x44>)
  408e5a:	4798      	blx	r3

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  408e5c:	4b08      	ldr	r3, [pc, #32]	; (408e80 <vTaskPlaceOnEventListRestricted+0x48>)
  408e5e:	681a      	ldr	r2, [r3, #0]
  408e60:	683b      	ldr	r3, [r7, #0]
  408e62:	4413      	add	r3, r2
  408e64:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  408e66:	68f8      	ldr	r0, [r7, #12]
  408e68:	4b06      	ldr	r3, [pc, #24]	; (408e84 <vTaskPlaceOnEventListRestricted+0x4c>)
  408e6a:	4798      	blx	r3
	}
  408e6c:	3710      	adds	r7, #16
  408e6e:	46bd      	mov	sp, r7
  408e70:	bd80      	pop	{r7, pc}
  408e72:	bf00      	nop
  408e74:	20001748 	.word	0x20001748
  408e78:	00407ae9 	.word	0x00407ae9
  408e7c:	00407ba9 	.word	0x00407ba9
  408e80:	20001860 	.word	0x20001860
  408e84:	004091b5 	.word	0x004091b5

00408e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  408e88:	b580      	push	{r7, lr}
  408e8a:	b084      	sub	sp, #16
  408e8c:	af00      	add	r7, sp, #0
  408e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  408e90:	687b      	ldr	r3, [r7, #4]
  408e92:	68db      	ldr	r3, [r3, #12]
  408e94:	68db      	ldr	r3, [r3, #12]
  408e96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
  408e98:	68bb      	ldr	r3, [r7, #8]
  408e9a:	3318      	adds	r3, #24
  408e9c:	4618      	mov	r0, r3
  408e9e:	4b1d      	ldr	r3, [pc, #116]	; (408f14 <xTaskRemoveFromEventList+0x8c>)
  408ea0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  408ea2:	4b1d      	ldr	r3, [pc, #116]	; (408f18 <xTaskRemoveFromEventList+0x90>)
  408ea4:	681b      	ldr	r3, [r3, #0]
  408ea6:	2b00      	cmp	r3, #0
  408ea8:	d11d      	bne.n	408ee6 <xTaskRemoveFromEventList+0x5e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  408eaa:	68bb      	ldr	r3, [r7, #8]
  408eac:	3304      	adds	r3, #4
  408eae:	4618      	mov	r0, r3
  408eb0:	4b18      	ldr	r3, [pc, #96]	; (408f14 <xTaskRemoveFromEventList+0x8c>)
  408eb2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  408eb4:	68bb      	ldr	r3, [r7, #8]
  408eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408eb8:	4b18      	ldr	r3, [pc, #96]	; (408f1c <xTaskRemoveFromEventList+0x94>)
  408eba:	681b      	ldr	r3, [r3, #0]
  408ebc:	429a      	cmp	r2, r3
  408ebe:	d903      	bls.n	408ec8 <xTaskRemoveFromEventList+0x40>
  408ec0:	68bb      	ldr	r3, [r7, #8]
  408ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408ec4:	4b15      	ldr	r3, [pc, #84]	; (408f1c <xTaskRemoveFromEventList+0x94>)
  408ec6:	601a      	str	r2, [r3, #0]
  408ec8:	68bb      	ldr	r3, [r7, #8]
  408eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408ecc:	4613      	mov	r3, r2
  408ece:	009b      	lsls	r3, r3, #2
  408ed0:	4413      	add	r3, r2
  408ed2:	009b      	lsls	r3, r3, #2
  408ed4:	4a12      	ldr	r2, [pc, #72]	; (408f20 <xTaskRemoveFromEventList+0x98>)
  408ed6:	441a      	add	r2, r3
  408ed8:	68bb      	ldr	r3, [r7, #8]
  408eda:	3304      	adds	r3, #4
  408edc:	4610      	mov	r0, r2
  408ede:	4619      	mov	r1, r3
  408ee0:	4b10      	ldr	r3, [pc, #64]	; (408f24 <xTaskRemoveFromEventList+0x9c>)
  408ee2:	4798      	blx	r3
  408ee4:	e005      	b.n	408ef2 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  408ee6:	68bb      	ldr	r3, [r7, #8]
  408ee8:	3318      	adds	r3, #24
  408eea:	480f      	ldr	r0, [pc, #60]	; (408f28 <xTaskRemoveFromEventList+0xa0>)
  408eec:	4619      	mov	r1, r3
  408eee:	4b0d      	ldr	r3, [pc, #52]	; (408f24 <xTaskRemoveFromEventList+0x9c>)
  408ef0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  408ef2:	68bb      	ldr	r3, [r7, #8]
  408ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408ef6:	4b0d      	ldr	r3, [pc, #52]	; (408f2c <xTaskRemoveFromEventList+0xa4>)
  408ef8:	681b      	ldr	r3, [r3, #0]
  408efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  408efc:	429a      	cmp	r2, r3
  408efe:	d302      	bcc.n	408f06 <xTaskRemoveFromEventList+0x7e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  408f00:	2301      	movs	r3, #1
  408f02:	60fb      	str	r3, [r7, #12]
  408f04:	e001      	b.n	408f0a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		xReturn = pdFALSE;
  408f06:	2300      	movs	r3, #0
  408f08:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  408f0a:	68fb      	ldr	r3, [r7, #12]
}
  408f0c:	4618      	mov	r0, r3
  408f0e:	3710      	adds	r7, #16
  408f10:	46bd      	mov	sp, r7
  408f12:	bd80      	pop	{r7, pc}
  408f14:	00407ba9 	.word	0x00407ba9
  408f18:	20001870 	.word	0x20001870
  408f1c:	20001868 	.word	0x20001868
  408f20:	2000174c 	.word	0x2000174c
  408f24:	00407ae9 	.word	0x00407ae9
  408f28:	2000181c 	.word	0x2000181c
  408f2c:	20001748 	.word	0x20001748

00408f30 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  408f30:	b480      	push	{r7}
  408f32:	b083      	sub	sp, #12
  408f34:	af00      	add	r7, sp, #0
  408f36:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  408f38:	4b06      	ldr	r3, [pc, #24]	; (408f54 <vTaskSetTimeOutState+0x24>)
  408f3a:	681a      	ldr	r2, [r3, #0]
  408f3c:	687b      	ldr	r3, [r7, #4]
  408f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  408f40:	4b05      	ldr	r3, [pc, #20]	; (408f58 <vTaskSetTimeOutState+0x28>)
  408f42:	681a      	ldr	r2, [r3, #0]
  408f44:	687b      	ldr	r3, [r7, #4]
  408f46:	605a      	str	r2, [r3, #4]
}
  408f48:	370c      	adds	r7, #12
  408f4a:	46bd      	mov	sp, r7
  408f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f50:	4770      	bx	lr
  408f52:	bf00      	nop
  408f54:	2000187c 	.word	0x2000187c
  408f58:	20001860 	.word	0x20001860

00408f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  408f5c:	b580      	push	{r7, lr}
  408f5e:	b084      	sub	sp, #16
  408f60:	af00      	add	r7, sp, #0
  408f62:	6078      	str	r0, [r7, #4]
  408f64:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  408f66:	4b1d      	ldr	r3, [pc, #116]	; (408fdc <xTaskCheckForTimeOut+0x80>)
  408f68:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  408f6a:	683b      	ldr	r3, [r7, #0]
  408f6c:	681b      	ldr	r3, [r3, #0]
  408f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  408f72:	d102      	bne.n	408f7a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
  408f74:	2300      	movs	r3, #0
  408f76:	60fb      	str	r3, [r7, #12]
  408f78:	e029      	b.n	408fce <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  408f7a:	687b      	ldr	r3, [r7, #4]
  408f7c:	681a      	ldr	r2, [r3, #0]
  408f7e:	4b18      	ldr	r3, [pc, #96]	; (408fe0 <xTaskCheckForTimeOut+0x84>)
  408f80:	681b      	ldr	r3, [r3, #0]
  408f82:	429a      	cmp	r2, r3
  408f84:	d008      	beq.n	408f98 <xTaskCheckForTimeOut+0x3c>
  408f86:	687b      	ldr	r3, [r7, #4]
  408f88:	685a      	ldr	r2, [r3, #4]
  408f8a:	4b16      	ldr	r3, [pc, #88]	; (408fe4 <xTaskCheckForTimeOut+0x88>)
  408f8c:	681b      	ldr	r3, [r3, #0]
  408f8e:	429a      	cmp	r2, r3
  408f90:	d802      	bhi.n	408f98 <xTaskCheckForTimeOut+0x3c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  408f92:	2301      	movs	r3, #1
  408f94:	60fb      	str	r3, [r7, #12]
  408f96:	e01a      	b.n	408fce <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  408f98:	4b12      	ldr	r3, [pc, #72]	; (408fe4 <xTaskCheckForTimeOut+0x88>)
  408f9a:	681a      	ldr	r2, [r3, #0]
  408f9c:	687b      	ldr	r3, [r7, #4]
  408f9e:	685b      	ldr	r3, [r3, #4]
  408fa0:	1ad2      	subs	r2, r2, r3
  408fa2:	683b      	ldr	r3, [r7, #0]
  408fa4:	681b      	ldr	r3, [r3, #0]
  408fa6:	429a      	cmp	r2, r3
  408fa8:	d20f      	bcs.n	408fca <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  408faa:	683b      	ldr	r3, [r7, #0]
  408fac:	681a      	ldr	r2, [r3, #0]
  408fae:	687b      	ldr	r3, [r7, #4]
  408fb0:	6859      	ldr	r1, [r3, #4]
  408fb2:	4b0c      	ldr	r3, [pc, #48]	; (408fe4 <xTaskCheckForTimeOut+0x88>)
  408fb4:	681b      	ldr	r3, [r3, #0]
  408fb6:	1acb      	subs	r3, r1, r3
  408fb8:	441a      	add	r2, r3
  408fba:	683b      	ldr	r3, [r7, #0]
  408fbc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  408fbe:	6878      	ldr	r0, [r7, #4]
  408fc0:	4b09      	ldr	r3, [pc, #36]	; (408fe8 <xTaskCheckForTimeOut+0x8c>)
  408fc2:	4798      	blx	r3
			xReturn = pdFALSE;
  408fc4:	2300      	movs	r3, #0
  408fc6:	60fb      	str	r3, [r7, #12]
  408fc8:	e001      	b.n	408fce <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
  408fca:	2301      	movs	r3, #1
  408fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  408fce:	4b07      	ldr	r3, [pc, #28]	; (408fec <xTaskCheckForTimeOut+0x90>)
  408fd0:	4798      	blx	r3

	return xReturn;
  408fd2:	68fb      	ldr	r3, [r7, #12]
}
  408fd4:	4618      	mov	r0, r3
  408fd6:	3710      	adds	r7, #16
  408fd8:	46bd      	mov	sp, r7
  408fda:	bd80      	pop	{r7, pc}
  408fdc:	00407d7d 	.word	0x00407d7d
  408fe0:	2000187c 	.word	0x2000187c
  408fe4:	20001860 	.word	0x20001860
  408fe8:	00408f31 	.word	0x00408f31
  408fec:	00407da1 	.word	0x00407da1

00408ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  408ff0:	b480      	push	{r7}
  408ff2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  408ff4:	4b03      	ldr	r3, [pc, #12]	; (409004 <vTaskMissedYield+0x14>)
  408ff6:	2201      	movs	r2, #1
  408ff8:	601a      	str	r2, [r3, #0]
}
  408ffa:	46bd      	mov	sp, r7
  408ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
  409000:	4770      	bx	lr
  409002:	bf00      	nop
  409004:	20001878 	.word	0x20001878

00409008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  409008:	b580      	push	{r7, lr}
  40900a:	b082      	sub	sp, #8
  40900c:	af00      	add	r7, sp, #0
  40900e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  409010:	4b04      	ldr	r3, [pc, #16]	; (409024 <prvIdleTask+0x1c>)
  409012:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  409014:	4b04      	ldr	r3, [pc, #16]	; (409028 <prvIdleTask+0x20>)
  409016:	681b      	ldr	r3, [r3, #0]
  409018:	2b01      	cmp	r3, #1
  40901a:	d902      	bls.n	409022 <prvIdleTask+0x1a>
			{
				taskYIELD();
  40901c:	4b03      	ldr	r3, [pc, #12]	; (40902c <prvIdleTask+0x24>)
  40901e:	4798      	blx	r3
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
  409020:	e7f6      	b.n	409010 <prvIdleTask+0x8>
  409022:	e7f5      	b.n	409010 <prvIdleTask+0x8>
  409024:	00409125 	.word	0x00409125
  409028:	2000174c 	.word	0x2000174c
  40902c:	00407d65 	.word	0x00407d65

00409030 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  409030:	b580      	push	{r7, lr}
  409032:	b084      	sub	sp, #16
  409034:	af00      	add	r7, sp, #0
  409036:	60f8      	str	r0, [r7, #12]
  409038:	60b9      	str	r1, [r7, #8]
  40903a:	607a      	str	r2, [r7, #4]
  40903c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  40903e:	68fb      	ldr	r3, [r7, #12]
  409040:	3334      	adds	r3, #52	; 0x34
  409042:	4618      	mov	r0, r3
  409044:	68b9      	ldr	r1, [r7, #8]
  409046:	2210      	movs	r2, #16
  409048:	4b14      	ldr	r3, [pc, #80]	; (40909c <prvInitialiseTCBVariables+0x6c>)
  40904a:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40904c:	68fb      	ldr	r3, [r7, #12]
  40904e:	2200      	movs	r2, #0
  409050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  409054:	687b      	ldr	r3, [r7, #4]
  409056:	2b07      	cmp	r3, #7
  409058:	d901      	bls.n	40905e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40905a:	2307      	movs	r3, #7
  40905c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  40905e:	68fb      	ldr	r3, [r7, #12]
  409060:	687a      	ldr	r2, [r7, #4]
  409062:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  409064:	68fb      	ldr	r3, [r7, #12]
  409066:	687a      	ldr	r2, [r7, #4]
  409068:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40906a:	68fb      	ldr	r3, [r7, #12]
  40906c:	3304      	adds	r3, #4
  40906e:	4618      	mov	r0, r3
  409070:	4b0b      	ldr	r3, [pc, #44]	; (4090a0 <prvInitialiseTCBVariables+0x70>)
  409072:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  409074:	68fb      	ldr	r3, [r7, #12]
  409076:	3318      	adds	r3, #24
  409078:	4618      	mov	r0, r3
  40907a:	4b09      	ldr	r3, [pc, #36]	; (4090a0 <prvInitialiseTCBVariables+0x70>)
  40907c:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40907e:	68fb      	ldr	r3, [r7, #12]
  409080:	68fa      	ldr	r2, [r7, #12]
  409082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  409084:	687b      	ldr	r3, [r7, #4]
  409086:	f1c3 0208 	rsb	r2, r3, #8
  40908a:	68fb      	ldr	r3, [r7, #12]
  40908c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40908e:	68fb      	ldr	r3, [r7, #12]
  409090:	68fa      	ldr	r2, [r7, #12]
  409092:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  409094:	3710      	adds	r7, #16
  409096:	46bd      	mov	sp, r7
  409098:	bd80      	pop	{r7, pc}
  40909a:	bf00      	nop
  40909c:	0040f92d 	.word	0x0040f92d
  4090a0:	00407ad1 	.word	0x00407ad1

004090a4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  4090a4:	b580      	push	{r7, lr}
  4090a6:	b082      	sub	sp, #8
  4090a8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4090aa:	2300      	movs	r3, #0
  4090ac:	607b      	str	r3, [r7, #4]
  4090ae:	e00c      	b.n	4090ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4090b0:	687a      	ldr	r2, [r7, #4]
  4090b2:	4613      	mov	r3, r2
  4090b4:	009b      	lsls	r3, r3, #2
  4090b6:	4413      	add	r3, r2
  4090b8:	009b      	lsls	r3, r3, #2
  4090ba:	4a11      	ldr	r2, [pc, #68]	; (409100 <prvInitialiseTaskLists+0x5c>)
  4090bc:	4413      	add	r3, r2
  4090be:	4618      	mov	r0, r3
  4090c0:	4b10      	ldr	r3, [pc, #64]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090c2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4090c4:	687b      	ldr	r3, [r7, #4]
  4090c6:	3301      	adds	r3, #1
  4090c8:	607b      	str	r3, [r7, #4]
  4090ca:	687b      	ldr	r3, [r7, #4]
  4090cc:	2b07      	cmp	r3, #7
  4090ce:	d9ef      	bls.n	4090b0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4090d0:	480d      	ldr	r0, [pc, #52]	; (409108 <prvInitialiseTaskLists+0x64>)
  4090d2:	4b0c      	ldr	r3, [pc, #48]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090d4:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4090d6:	480d      	ldr	r0, [pc, #52]	; (40910c <prvInitialiseTaskLists+0x68>)
  4090d8:	4b0a      	ldr	r3, [pc, #40]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090da:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  4090dc:	480c      	ldr	r0, [pc, #48]	; (409110 <prvInitialiseTaskLists+0x6c>)
  4090de:	4b09      	ldr	r3, [pc, #36]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090e0:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4090e2:	480c      	ldr	r0, [pc, #48]	; (409114 <prvInitialiseTaskLists+0x70>)
  4090e4:	4b07      	ldr	r3, [pc, #28]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090e6:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4090e8:	480b      	ldr	r0, [pc, #44]	; (409118 <prvInitialiseTaskLists+0x74>)
  4090ea:	4b06      	ldr	r3, [pc, #24]	; (409104 <prvInitialiseTaskLists+0x60>)
  4090ec:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4090ee:	4b0b      	ldr	r3, [pc, #44]	; (40911c <prvInitialiseTaskLists+0x78>)
  4090f0:	4a05      	ldr	r2, [pc, #20]	; (409108 <prvInitialiseTaskLists+0x64>)
  4090f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4090f4:	4b0a      	ldr	r3, [pc, #40]	; (409120 <prvInitialiseTaskLists+0x7c>)
  4090f6:	4a05      	ldr	r2, [pc, #20]	; (40910c <prvInitialiseTaskLists+0x68>)
  4090f8:	601a      	str	r2, [r3, #0]
}
  4090fa:	3708      	adds	r7, #8
  4090fc:	46bd      	mov	sp, r7
  4090fe:	bd80      	pop	{r7, pc}
  409100:	2000174c 	.word	0x2000174c
  409104:	00407a91 	.word	0x00407a91
  409108:	200017ec 	.word	0x200017ec
  40910c:	20001800 	.word	0x20001800
  409110:	2000181c 	.word	0x2000181c
  409114:	20001830 	.word	0x20001830
  409118:	20001848 	.word	0x20001848
  40911c:	20001814 	.word	0x20001814
  409120:	20001818 	.word	0x20001818

00409124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  409124:	b580      	push	{r7, lr}
  409126:	b082      	sub	sp, #8
  409128:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
  40912a:	4b18      	ldr	r3, [pc, #96]	; (40918c <prvCheckTasksWaitingTermination+0x68>)
  40912c:	681b      	ldr	r3, [r3, #0]
  40912e:	2b00      	cmp	r3, #0
  409130:	d028      	beq.n	409184 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
  409132:	4b17      	ldr	r3, [pc, #92]	; (409190 <prvCheckTasksWaitingTermination+0x6c>)
  409134:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  409136:	4b17      	ldr	r3, [pc, #92]	; (409194 <prvCheckTasksWaitingTermination+0x70>)
  409138:	681b      	ldr	r3, [r3, #0]
  40913a:	2b00      	cmp	r3, #0
  40913c:	bf14      	ite	ne
  40913e:	2300      	movne	r3, #0
  409140:	2301      	moveq	r3, #1
  409142:	b2db      	uxtb	r3, r3
  409144:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  409146:	4b14      	ldr	r3, [pc, #80]	; (409198 <prvCheckTasksWaitingTermination+0x74>)
  409148:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  40914a:	687b      	ldr	r3, [r7, #4]
  40914c:	2b00      	cmp	r3, #0
  40914e:	d119      	bne.n	409184 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  409150:	4b12      	ldr	r3, [pc, #72]	; (40919c <prvCheckTasksWaitingTermination+0x78>)
  409152:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  409154:	4b12      	ldr	r3, [pc, #72]	; (4091a0 <prvCheckTasksWaitingTermination+0x7c>)
  409156:	685b      	ldr	r3, [r3, #4]
  409158:	68db      	ldr	r3, [r3, #12]
  40915a:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
  40915c:	683b      	ldr	r3, [r7, #0]
  40915e:	3304      	adds	r3, #4
  409160:	4618      	mov	r0, r3
  409162:	4b10      	ldr	r3, [pc, #64]	; (4091a4 <prvCheckTasksWaitingTermination+0x80>)
  409164:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  409166:	4b10      	ldr	r3, [pc, #64]	; (4091a8 <prvCheckTasksWaitingTermination+0x84>)
  409168:	681b      	ldr	r3, [r3, #0]
  40916a:	1e5a      	subs	r2, r3, #1
  40916c:	4b0e      	ldr	r3, [pc, #56]	; (4091a8 <prvCheckTasksWaitingTermination+0x84>)
  40916e:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  409170:	4b06      	ldr	r3, [pc, #24]	; (40918c <prvCheckTasksWaitingTermination+0x68>)
  409172:	681b      	ldr	r3, [r3, #0]
  409174:	1e5a      	subs	r2, r3, #1
  409176:	4b05      	ldr	r3, [pc, #20]	; (40918c <prvCheckTasksWaitingTermination+0x68>)
  409178:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  40917a:	4b0c      	ldr	r3, [pc, #48]	; (4091ac <prvCheckTasksWaitingTermination+0x88>)
  40917c:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  40917e:	6838      	ldr	r0, [r7, #0]
  409180:	4b0b      	ldr	r3, [pc, #44]	; (4091b0 <prvCheckTasksWaitingTermination+0x8c>)
  409182:	4798      	blx	r3
			}
		}
	}
	#endif
}
  409184:	3708      	adds	r7, #8
  409186:	46bd      	mov	sp, r7
  409188:	bd80      	pop	{r7, pc}
  40918a:	bf00      	nop
  40918c:	20001844 	.word	0x20001844
  409190:	0040892d 	.word	0x0040892d
  409194:	20001830 	.word	0x20001830
  409198:	00408949 	.word	0x00408949
  40919c:	00407d7d 	.word	0x00407d7d
  4091a0:	20001838 	.word	0x20001838
  4091a4:	00407ba9 	.word	0x00407ba9
  4091a8:	2000185c 	.word	0x2000185c
  4091ac:	00407da1 	.word	0x00407da1
  4091b0:	00409385 	.word	0x00409385

004091b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4091b4:	b580      	push	{r7, lr}
  4091b6:	b082      	sub	sp, #8
  4091b8:	af00      	add	r7, sp, #0
  4091ba:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4091bc:	4b13      	ldr	r3, [pc, #76]	; (40920c <prvAddCurrentTaskToDelayedList+0x58>)
  4091be:	681b      	ldr	r3, [r3, #0]
  4091c0:	687a      	ldr	r2, [r7, #4]
  4091c2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  4091c4:	4b12      	ldr	r3, [pc, #72]	; (409210 <prvAddCurrentTaskToDelayedList+0x5c>)
  4091c6:	681b      	ldr	r3, [r3, #0]
  4091c8:	687a      	ldr	r2, [r7, #4]
  4091ca:	429a      	cmp	r2, r3
  4091cc:	d209      	bcs.n	4091e2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4091ce:	4b11      	ldr	r3, [pc, #68]	; (409214 <prvAddCurrentTaskToDelayedList+0x60>)
  4091d0:	681a      	ldr	r2, [r3, #0]
  4091d2:	4b0e      	ldr	r3, [pc, #56]	; (40920c <prvAddCurrentTaskToDelayedList+0x58>)
  4091d4:	681b      	ldr	r3, [r3, #0]
  4091d6:	3304      	adds	r3, #4
  4091d8:	4610      	mov	r0, r2
  4091da:	4619      	mov	r1, r3
  4091dc:	4b0e      	ldr	r3, [pc, #56]	; (409218 <prvAddCurrentTaskToDelayedList+0x64>)
  4091de:	4798      	blx	r3
  4091e0:	e010      	b.n	409204 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4091e2:	4b0e      	ldr	r3, [pc, #56]	; (40921c <prvAddCurrentTaskToDelayedList+0x68>)
  4091e4:	681a      	ldr	r2, [r3, #0]
  4091e6:	4b09      	ldr	r3, [pc, #36]	; (40920c <prvAddCurrentTaskToDelayedList+0x58>)
  4091e8:	681b      	ldr	r3, [r3, #0]
  4091ea:	3304      	adds	r3, #4
  4091ec:	4610      	mov	r0, r2
  4091ee:	4619      	mov	r1, r3
  4091f0:	4b09      	ldr	r3, [pc, #36]	; (409218 <prvAddCurrentTaskToDelayedList+0x64>)
  4091f2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4091f4:	4b0a      	ldr	r3, [pc, #40]	; (409220 <prvAddCurrentTaskToDelayedList+0x6c>)
  4091f6:	681b      	ldr	r3, [r3, #0]
  4091f8:	687a      	ldr	r2, [r7, #4]
  4091fa:	429a      	cmp	r2, r3
  4091fc:	d202      	bcs.n	409204 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4091fe:	4b08      	ldr	r3, [pc, #32]	; (409220 <prvAddCurrentTaskToDelayedList+0x6c>)
  409200:	687a      	ldr	r2, [r7, #4]
  409202:	601a      	str	r2, [r3, #0]
		}
	}
}
  409204:	3708      	adds	r7, #8
  409206:	46bd      	mov	sp, r7
  409208:	bd80      	pop	{r7, pc}
  40920a:	bf00      	nop
  40920c:	20001748 	.word	0x20001748
  409210:	20001860 	.word	0x20001860
  409214:	20001818 	.word	0x20001818
  409218:	00407b39 	.word	0x00407b39
  40921c:	20001814 	.word	0x20001814
  409220:	20000044 	.word	0x20000044

00409224 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  409224:	b580      	push	{r7, lr}
  409226:	b084      	sub	sp, #16
  409228:	af00      	add	r7, sp, #0
  40922a:	4603      	mov	r3, r0
  40922c:	6039      	str	r1, [r7, #0]
  40922e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  409230:	204c      	movs	r0, #76	; 0x4c
  409232:	4b15      	ldr	r3, [pc, #84]	; (409288 <prvAllocateTCBAndStack+0x64>)
  409234:	4798      	blx	r3
  409236:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  409238:	68fb      	ldr	r3, [r7, #12]
  40923a:	2b00      	cmp	r3, #0
  40923c:	d01f      	beq.n	40927e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40923e:	683b      	ldr	r3, [r7, #0]
  409240:	2b00      	cmp	r3, #0
  409242:	d106      	bne.n	409252 <prvAllocateTCBAndStack+0x2e>
  409244:	88fb      	ldrh	r3, [r7, #6]
  409246:	009b      	lsls	r3, r3, #2
  409248:	4618      	mov	r0, r3
  40924a:	4b0f      	ldr	r3, [pc, #60]	; (409288 <prvAllocateTCBAndStack+0x64>)
  40924c:	4798      	blx	r3
  40924e:	4603      	mov	r3, r0
  409250:	e000      	b.n	409254 <prvAllocateTCBAndStack+0x30>
  409252:	683b      	ldr	r3, [r7, #0]
  409254:	68fa      	ldr	r2, [r7, #12]
  409256:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  409258:	68fb      	ldr	r3, [r7, #12]
  40925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40925c:	2b00      	cmp	r3, #0
  40925e:	d105      	bne.n	40926c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  409260:	68f8      	ldr	r0, [r7, #12]
  409262:	4b0a      	ldr	r3, [pc, #40]	; (40928c <prvAllocateTCBAndStack+0x68>)
  409264:	4798      	blx	r3
			pxNewTCB = NULL;
  409266:	2300      	movs	r3, #0
  409268:	60fb      	str	r3, [r7, #12]
  40926a:	e008      	b.n	40927e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
  40926c:	68fb      	ldr	r3, [r7, #12]
  40926e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  409270:	88fb      	ldrh	r3, [r7, #6]
  409272:	009b      	lsls	r3, r3, #2
  409274:	4610      	mov	r0, r2
  409276:	21a5      	movs	r1, #165	; 0xa5
  409278:	461a      	mov	r2, r3
  40927a:	4b05      	ldr	r3, [pc, #20]	; (409290 <prvAllocateTCBAndStack+0x6c>)
  40927c:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40927e:	68fb      	ldr	r3, [r7, #12]
}
  409280:	4618      	mov	r0, r3
  409282:	3710      	adds	r7, #16
  409284:	46bd      	mov	sp, r7
  409286:	bd80      	pop	{r7, pc}
  409288:	00407e6d 	.word	0x00407e6d
  40928c:	00407e9d 	.word	0x00407e9d
  409290:	0040f191 	.word	0x0040f191

00409294 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
  409294:	b590      	push	{r4, r7, lr}
  409296:	b08f      	sub	sp, #60	; 0x3c
  409298:	af04      	add	r7, sp, #16
  40929a:	60f8      	str	r0, [r7, #12]
  40929c:	60b9      	str	r1, [r7, #8]
  40929e:	4613      	mov	r3, r2
  4092a0:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  4092a2:	68bb      	ldr	r3, [r7, #8]
  4092a4:	627b      	str	r3, [r7, #36]	; 0x24
  4092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092a8:	685b      	ldr	r3, [r3, #4]
  4092aa:	685a      	ldr	r2, [r3, #4]
  4092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092ae:	605a      	str	r2, [r3, #4]
  4092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092b2:	685a      	ldr	r2, [r3, #4]
  4092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092b6:	3308      	adds	r3, #8
  4092b8:	429a      	cmp	r2, r3
  4092ba:	d104      	bne.n	4092c6 <prvListTaskWithinSingleList+0x32>
  4092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092be:	685b      	ldr	r3, [r3, #4]
  4092c0:	685a      	ldr	r2, [r3, #4]
  4092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092c4:	605a      	str	r2, [r3, #4]
  4092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4092c8:	685b      	ldr	r3, [r3, #4]
  4092ca:	68db      	ldr	r3, [r3, #12]
  4092cc:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  4092ce:	68bb      	ldr	r3, [r7, #8]
  4092d0:	61fb      	str	r3, [r7, #28]
  4092d2:	69fb      	ldr	r3, [r7, #28]
  4092d4:	685b      	ldr	r3, [r3, #4]
  4092d6:	685a      	ldr	r2, [r3, #4]
  4092d8:	69fb      	ldr	r3, [r7, #28]
  4092da:	605a      	str	r2, [r3, #4]
  4092dc:	69fb      	ldr	r3, [r7, #28]
  4092de:	685a      	ldr	r2, [r3, #4]
  4092e0:	69fb      	ldr	r3, [r7, #28]
  4092e2:	3308      	adds	r3, #8
  4092e4:	429a      	cmp	r2, r3
  4092e6:	d104      	bne.n	4092f2 <prvListTaskWithinSingleList+0x5e>
  4092e8:	69fb      	ldr	r3, [r7, #28]
  4092ea:	685b      	ldr	r3, [r3, #4]
  4092ec:	685a      	ldr	r2, [r3, #4]
  4092ee:	69fb      	ldr	r3, [r7, #28]
  4092f0:	605a      	str	r2, [r3, #4]
  4092f2:	69fb      	ldr	r3, [r7, #28]
  4092f4:	685b      	ldr	r3, [r3, #4]
  4092f6:	68db      	ldr	r3, [r3, #12]
  4092f8:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
  4092fa:	69bb      	ldr	r3, [r7, #24]
  4092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4092fe:	4618      	mov	r0, r3
  409300:	4b0f      	ldr	r3, [pc, #60]	; (409340 <prvListTaskWithinSingleList+0xac>)
  409302:	4798      	blx	r3
  409304:	4603      	mov	r3, r0
  409306:	82fb      	strh	r3, [r7, #22]
			}
			#endif

			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
  409308:	69bb      	ldr	r3, [r7, #24]
  40930a:	f103 0234 	add.w	r2, r3, #52	; 0x34
  40930e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  409312:	69b9      	ldr	r1, [r7, #24]
  409314:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  409316:	8af8      	ldrh	r0, [r7, #22]
  409318:	69b9      	ldr	r1, [r7, #24]
  40931a:	6c49      	ldr	r1, [r1, #68]	; 0x44
  40931c:	9400      	str	r4, [sp, #0]
  40931e:	9001      	str	r0, [sp, #4]
  409320:	9102      	str	r1, [sp, #8]
  409322:	4808      	ldr	r0, [pc, #32]	; (409344 <prvListTaskWithinSingleList+0xb0>)
  409324:	4908      	ldr	r1, [pc, #32]	; (409348 <prvListTaskWithinSingleList+0xb4>)
  409326:	4c09      	ldr	r4, [pc, #36]	; (40934c <prvListTaskWithinSingleList+0xb8>)
  409328:	47a0      	blx	r4
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
  40932a:	68f8      	ldr	r0, [r7, #12]
  40932c:	4905      	ldr	r1, [pc, #20]	; (409344 <prvListTaskWithinSingleList+0xb0>)
  40932e:	4b08      	ldr	r3, [pc, #32]	; (409350 <prvListTaskWithinSingleList+0xbc>)
  409330:	4798      	blx	r3

		} while( pxNextTCB != pxFirstTCB );
  409332:	69ba      	ldr	r2, [r7, #24]
  409334:	6a3b      	ldr	r3, [r7, #32]
  409336:	429a      	cmp	r2, r3
  409338:	d1c9      	bne.n	4092ce <prvListTaskWithinSingleList+0x3a>
	}
  40933a:	372c      	adds	r7, #44	; 0x2c
  40933c:	46bd      	mov	sp, r7
  40933e:	bd90      	pop	{r4, r7, pc}
  409340:	00409355 	.word	0x00409355
  409344:	20001890 	.word	0x20001890
  409348:	00418c44 	.word	0x00418c44
  40934c:	0040f3c9 	.word	0x0040f3c9
  409350:	0040f4f5 	.word	0x0040f4f5

00409354 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
  409354:	b490      	push	{r4, r7}
  409356:	b082      	sub	sp, #8
  409358:	af00      	add	r7, sp, #0
  40935a:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0;
  40935c:	2400      	movs	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  40935e:	e005      	b.n	40936c <usTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
  409360:	687b      	ldr	r3, [r7, #4]
  409362:	3301      	adds	r3, #1
  409364:	607b      	str	r3, [r7, #4]
			usCount++;
  409366:	4623      	mov	r3, r4
  409368:	3301      	adds	r3, #1
  40936a:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  40936c:	687b      	ldr	r3, [r7, #4]
  40936e:	781b      	ldrb	r3, [r3, #0]
  409370:	2ba5      	cmp	r3, #165	; 0xa5
  409372:	d0f5      	beq.n	409360 <usTaskCheckFreeStackSpace+0xc>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
  409374:	08a3      	lsrs	r3, r4, #2
  409376:	b29c      	uxth	r4, r3

		return usCount;
  409378:	4623      	mov	r3, r4
	}
  40937a:	4618      	mov	r0, r3
  40937c:	3708      	adds	r7, #8
  40937e:	46bd      	mov	sp, r7
  409380:	bc90      	pop	{r4, r7}
  409382:	4770      	bx	lr

00409384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  409384:	b580      	push	{r7, lr}
  409386:	b082      	sub	sp, #8
  409388:	af00      	add	r7, sp, #0
  40938a:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40938c:	687b      	ldr	r3, [r7, #4]
  40938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409390:	4618      	mov	r0, r3
  409392:	4b04      	ldr	r3, [pc, #16]	; (4093a4 <prvDeleteTCB+0x20>)
  409394:	4798      	blx	r3
		vPortFree( pxTCB );
  409396:	6878      	ldr	r0, [r7, #4]
  409398:	4b02      	ldr	r3, [pc, #8]	; (4093a4 <prvDeleteTCB+0x20>)
  40939a:	4798      	blx	r3
	}
  40939c:	3708      	adds	r7, #8
  40939e:	46bd      	mov	sp, r7
  4093a0:	bd80      	pop	{r7, pc}
  4093a2:	bf00      	nop
  4093a4:	00407e9d 	.word	0x00407e9d

004093a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  4093a8:	b480      	push	{r7}
  4093aa:	b083      	sub	sp, #12
  4093ac:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  4093ae:	4b05      	ldr	r3, [pc, #20]	; (4093c4 <xTaskGetCurrentTaskHandle+0x1c>)
  4093b0:	681b      	ldr	r3, [r3, #0]
  4093b2:	607b      	str	r3, [r7, #4]

		return xReturn;
  4093b4:	687b      	ldr	r3, [r7, #4]
	}
  4093b6:	4618      	mov	r0, r3
  4093b8:	370c      	adds	r7, #12
  4093ba:	46bd      	mov	sp, r7
  4093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4093c0:	4770      	bx	lr
  4093c2:	bf00      	nop
  4093c4:	20001748 	.word	0x20001748

004093c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  4093c8:	b480      	push	{r7}
  4093ca:	b083      	sub	sp, #12
  4093cc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  4093ce:	4b0b      	ldr	r3, [pc, #44]	; (4093fc <xTaskGetSchedulerState+0x34>)
  4093d0:	681b      	ldr	r3, [r3, #0]
  4093d2:	2b00      	cmp	r3, #0
  4093d4:	d102      	bne.n	4093dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  4093d6:	2300      	movs	r3, #0
  4093d8:	607b      	str	r3, [r7, #4]
  4093da:	e008      	b.n	4093ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4093dc:	4b08      	ldr	r3, [pc, #32]	; (409400 <xTaskGetSchedulerState+0x38>)
  4093de:	681b      	ldr	r3, [r3, #0]
  4093e0:	2b00      	cmp	r3, #0
  4093e2:	d102      	bne.n	4093ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  4093e4:	2301      	movs	r3, #1
  4093e6:	607b      	str	r3, [r7, #4]
  4093e8:	e001      	b.n	4093ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4093ea:	2302      	movs	r3, #2
  4093ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  4093ee:	687b      	ldr	r3, [r7, #4]
	}
  4093f0:	4618      	mov	r0, r3
  4093f2:	370c      	adds	r7, #12
  4093f4:	46bd      	mov	sp, r7
  4093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4093fa:	4770      	bx	lr
  4093fc:	2000186c 	.word	0x2000186c
  409400:	20001870 	.word	0x20001870

00409404 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  409404:	b580      	push	{r7, lr}
  409406:	b084      	sub	sp, #16
  409408:	af00      	add	r7, sp, #0
  40940a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40940c:	687b      	ldr	r3, [r7, #4]
  40940e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  409410:	68fb      	ldr	r3, [r7, #12]
  409412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409414:	4b21      	ldr	r3, [pc, #132]	; (40949c <vTaskPriorityInherit+0x98>)
  409416:	681b      	ldr	r3, [r3, #0]
  409418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40941a:	429a      	cmp	r2, r3
  40941c:	d23a      	bcs.n	409494 <vTaskPriorityInherit+0x90>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40941e:	4b1f      	ldr	r3, [pc, #124]	; (40949c <vTaskPriorityInherit+0x98>)
  409420:	681b      	ldr	r3, [r3, #0]
  409422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409424:	f1c3 0208 	rsb	r2, r3, #8
  409428:	68fb      	ldr	r3, [r7, #12]
  40942a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
  40942c:	68fb      	ldr	r3, [r7, #12]
  40942e:	6959      	ldr	r1, [r3, #20]
  409430:	68fb      	ldr	r3, [r7, #12]
  409432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409434:	4613      	mov	r3, r2
  409436:	009b      	lsls	r3, r3, #2
  409438:	4413      	add	r3, r2
  40943a:	009b      	lsls	r3, r3, #2
  40943c:	4a18      	ldr	r2, [pc, #96]	; (4094a0 <vTaskPriorityInherit+0x9c>)
  40943e:	4413      	add	r3, r2
  409440:	4299      	cmp	r1, r3
  409442:	d122      	bne.n	40948a <vTaskPriorityInherit+0x86>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
  409444:	68fb      	ldr	r3, [r7, #12]
  409446:	3304      	adds	r3, #4
  409448:	4618      	mov	r0, r3
  40944a:	4b16      	ldr	r3, [pc, #88]	; (4094a4 <vTaskPriorityInherit+0xa0>)
  40944c:	4798      	blx	r3

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40944e:	4b13      	ldr	r3, [pc, #76]	; (40949c <vTaskPriorityInherit+0x98>)
  409450:	681b      	ldr	r3, [r3, #0]
  409452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409454:	68fb      	ldr	r3, [r7, #12]
  409456:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
  409458:	68fb      	ldr	r3, [r7, #12]
  40945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40945c:	4b12      	ldr	r3, [pc, #72]	; (4094a8 <vTaskPriorityInherit+0xa4>)
  40945e:	681b      	ldr	r3, [r3, #0]
  409460:	429a      	cmp	r2, r3
  409462:	d903      	bls.n	40946c <vTaskPriorityInherit+0x68>
  409464:	68fb      	ldr	r3, [r7, #12]
  409466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409468:	4b0f      	ldr	r3, [pc, #60]	; (4094a8 <vTaskPriorityInherit+0xa4>)
  40946a:	601a      	str	r2, [r3, #0]
  40946c:	68fb      	ldr	r3, [r7, #12]
  40946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409470:	4613      	mov	r3, r2
  409472:	009b      	lsls	r3, r3, #2
  409474:	4413      	add	r3, r2
  409476:	009b      	lsls	r3, r3, #2
  409478:	4a09      	ldr	r2, [pc, #36]	; (4094a0 <vTaskPriorityInherit+0x9c>)
  40947a:	441a      	add	r2, r3
  40947c:	68fb      	ldr	r3, [r7, #12]
  40947e:	3304      	adds	r3, #4
  409480:	4610      	mov	r0, r2
  409482:	4619      	mov	r1, r3
  409484:	4b09      	ldr	r3, [pc, #36]	; (4094ac <vTaskPriorityInherit+0xa8>)
  409486:	4798      	blx	r3
  409488:	e004      	b.n	409494 <vTaskPriorityInherit+0x90>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40948a:	4b04      	ldr	r3, [pc, #16]	; (40949c <vTaskPriorityInherit+0x98>)
  40948c:	681b      	ldr	r3, [r3, #0]
  40948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409490:	68fb      	ldr	r3, [r7, #12]
  409492:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
  409494:	3710      	adds	r7, #16
  409496:	46bd      	mov	sp, r7
  409498:	bd80      	pop	{r7, pc}
  40949a:	bf00      	nop
  40949c:	20001748 	.word	0x20001748
  4094a0:	2000174c 	.word	0x2000174c
  4094a4:	00407ba9 	.word	0x00407ba9
  4094a8:	20001868 	.word	0x20001868
  4094ac:	00407ae9 	.word	0x00407ae9

004094b0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4094b0:	b580      	push	{r7, lr}
  4094b2:	b084      	sub	sp, #16
  4094b4:	af00      	add	r7, sp, #0
  4094b6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4094b8:	687b      	ldr	r3, [r7, #4]
  4094ba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  4094bc:	687b      	ldr	r3, [r7, #4]
  4094be:	2b00      	cmp	r3, #0
  4094c0:	d02c      	beq.n	40951c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4094c2:	68fb      	ldr	r3, [r7, #12]
  4094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4094c6:	68fb      	ldr	r3, [r7, #12]
  4094c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4094ca:	429a      	cmp	r2, r3
  4094cc:	d026      	beq.n	40951c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
  4094ce:	68fb      	ldr	r3, [r7, #12]
  4094d0:	3304      	adds	r3, #4
  4094d2:	4618      	mov	r0, r3
  4094d4:	4b13      	ldr	r3, [pc, #76]	; (409524 <vTaskPriorityDisinherit+0x74>)
  4094d6:	4798      	blx	r3

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4094d8:	68fb      	ldr	r3, [r7, #12]
  4094da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4094dc:	68fb      	ldr	r3, [r7, #12]
  4094de:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4094e0:	68fb      	ldr	r3, [r7, #12]
  4094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4094e4:	f1c3 0208 	rsb	r2, r3, #8
  4094e8:	68fb      	ldr	r3, [r7, #12]
  4094ea:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4094ec:	68fb      	ldr	r3, [r7, #12]
  4094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4094f0:	4b0d      	ldr	r3, [pc, #52]	; (409528 <vTaskPriorityDisinherit+0x78>)
  4094f2:	681b      	ldr	r3, [r3, #0]
  4094f4:	429a      	cmp	r2, r3
  4094f6:	d903      	bls.n	409500 <vTaskPriorityDisinherit+0x50>
  4094f8:	68fb      	ldr	r3, [r7, #12]
  4094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4094fc:	4b0a      	ldr	r3, [pc, #40]	; (409528 <vTaskPriorityDisinherit+0x78>)
  4094fe:	601a      	str	r2, [r3, #0]
  409500:	68fb      	ldr	r3, [r7, #12]
  409502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409504:	4613      	mov	r3, r2
  409506:	009b      	lsls	r3, r3, #2
  409508:	4413      	add	r3, r2
  40950a:	009b      	lsls	r3, r3, #2
  40950c:	4a07      	ldr	r2, [pc, #28]	; (40952c <vTaskPriorityDisinherit+0x7c>)
  40950e:	441a      	add	r2, r3
  409510:	68fb      	ldr	r3, [r7, #12]
  409512:	3304      	adds	r3, #4
  409514:	4610      	mov	r0, r2
  409516:	4619      	mov	r1, r3
  409518:	4b05      	ldr	r3, [pc, #20]	; (409530 <vTaskPriorityDisinherit+0x80>)
  40951a:	4798      	blx	r3
			}
		}
	}
  40951c:	3710      	adds	r7, #16
  40951e:	46bd      	mov	sp, r7
  409520:	bd80      	pop	{r7, pc}
  409522:	bf00      	nop
  409524:	00407ba9 	.word	0x00407ba9
  409528:	20001868 	.word	0x20001868
  40952c:	2000174c 	.word	0x2000174c
  409530:	00407ae9 	.word	0x00407ae9

00409534 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  409534:	b590      	push	{r4, r7, lr}
  409536:	b087      	sub	sp, #28
  409538:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  40953a:	2300      	movs	r3, #0
  40953c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  40953e:	4b0d      	ldr	r3, [pc, #52]	; (409574 <xTimerCreateTimerTask+0x40>)
  409540:	4798      	blx	r3

	if( xTimerQueue != NULL )
  409542:	4b0d      	ldr	r3, [pc, #52]	; (409578 <xTimerCreateTimerTask+0x44>)
  409544:	681b      	ldr	r3, [r3, #0]
  409546:	2b00      	cmp	r3, #0
  409548:	d00e      	beq.n	409568 <xTimerCreateTimerTask+0x34>
	{
		xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
  40954a:	2301      	movs	r3, #1
  40954c:	9300      	str	r3, [sp, #0]
  40954e:	2300      	movs	r3, #0
  409550:	9301      	str	r3, [sp, #4]
  409552:	2300      	movs	r3, #0
  409554:	9302      	str	r3, [sp, #8]
  409556:	2300      	movs	r3, #0
  409558:	9303      	str	r3, [sp, #12]
  40955a:	4808      	ldr	r0, [pc, #32]	; (40957c <xTimerCreateTimerTask+0x48>)
  40955c:	4908      	ldr	r1, [pc, #32]	; (409580 <xTimerCreateTimerTask+0x4c>)
  40955e:	2240      	movs	r2, #64	; 0x40
  409560:	2300      	movs	r3, #0
  409562:	4c08      	ldr	r4, [pc, #32]	; (409584 <xTimerCreateTimerTask+0x50>)
  409564:	47a0      	blx	r4
  409566:	6078      	str	r0, [r7, #4]
	}

	configASSERT( xReturn );
	return xReturn;
  409568:	687b      	ldr	r3, [r7, #4]
}
  40956a:	4618      	mov	r0, r3
  40956c:	370c      	adds	r7, #12
  40956e:	46bd      	mov	sp, r7
  409570:	bd90      	pop	{r4, r7, pc}
  409572:	bf00      	nop
  409574:	00409a79 	.word	0x00409a79
  409578:	200018f4 	.word	0x200018f4
  40957c:	004096fd 	.word	0x004096fd
  409580:	00418c58 	.word	0x00418c58
  409584:	00408631 	.word	0x00408631

00409588 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  409588:	b580      	push	{r7, lr}
  40958a:	b086      	sub	sp, #24
  40958c:	af00      	add	r7, sp, #0
  40958e:	60f8      	str	r0, [r7, #12]
  409590:	60b9      	str	r1, [r7, #8]
  409592:	607a      	str	r2, [r7, #4]
  409594:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  409596:	68bb      	ldr	r3, [r7, #8]
  409598:	2b00      	cmp	r3, #0
  40959a:	d102      	bne.n	4095a2 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
  40959c:	2300      	movs	r3, #0
  40959e:	617b      	str	r3, [r7, #20]
  4095a0:	e01c      	b.n	4095dc <xTimerCreate+0x54>
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  4095a2:	2028      	movs	r0, #40	; 0x28
  4095a4:	4b10      	ldr	r3, [pc, #64]	; (4095e8 <xTimerCreate+0x60>)
  4095a6:	4798      	blx	r3
  4095a8:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  4095aa:	697b      	ldr	r3, [r7, #20]
  4095ac:	2b00      	cmp	r3, #0
  4095ae:	d015      	beq.n	4095dc <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  4095b0:	4b0e      	ldr	r3, [pc, #56]	; (4095ec <xTimerCreate+0x64>)
  4095b2:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  4095b4:	697b      	ldr	r3, [r7, #20]
  4095b6:	68fa      	ldr	r2, [r7, #12]
  4095b8:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4095ba:	697b      	ldr	r3, [r7, #20]
  4095bc:	68ba      	ldr	r2, [r7, #8]
  4095be:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  4095c0:	697b      	ldr	r3, [r7, #20]
  4095c2:	687a      	ldr	r2, [r7, #4]
  4095c4:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4095c6:	697b      	ldr	r3, [r7, #20]
  4095c8:	683a      	ldr	r2, [r7, #0]
  4095ca:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4095cc:	697b      	ldr	r3, [r7, #20]
  4095ce:	6a3a      	ldr	r2, [r7, #32]
  4095d0:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4095d2:	697b      	ldr	r3, [r7, #20]
  4095d4:	3304      	adds	r3, #4
  4095d6:	4618      	mov	r0, r3
  4095d8:	4b05      	ldr	r3, [pc, #20]	; (4095f0 <xTimerCreate+0x68>)
  4095da:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  4095dc:	697b      	ldr	r3, [r7, #20]
}
  4095de:	4618      	mov	r0, r3
  4095e0:	3718      	adds	r7, #24
  4095e2:	46bd      	mov	sp, r7
  4095e4:	bd80      	pop	{r7, pc}
  4095e6:	bf00      	nop
  4095e8:	00407e6d 	.word	0x00407e6d
  4095ec:	00409a79 	.word	0x00409a79
  4095f0:	00407ad1 	.word	0x00407ad1

004095f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  4095f4:	b590      	push	{r4, r7, lr}
  4095f6:	b089      	sub	sp, #36	; 0x24
  4095f8:	af00      	add	r7, sp, #0
  4095fa:	60f8      	str	r0, [r7, #12]
  4095fc:	60b9      	str	r1, [r7, #8]
  4095fe:	607a      	str	r2, [r7, #4]
  409600:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  409602:	2300      	movs	r3, #0
  409604:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  409606:	4b1d      	ldr	r3, [pc, #116]	; (40967c <xTimerGenericCommand+0x88>)
  409608:	681b      	ldr	r3, [r3, #0]
  40960a:	2b00      	cmp	r3, #0
  40960c:	d030      	beq.n	409670 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40960e:	68bb      	ldr	r3, [r7, #8]
  409610:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  409612:	687b      	ldr	r3, [r7, #4]
  409614:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  409616:	68fb      	ldr	r3, [r7, #12]
  409618:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  40961a:	683b      	ldr	r3, [r7, #0]
  40961c:	2b00      	cmp	r3, #0
  40961e:	d11c      	bne.n	40965a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  409620:	4b17      	ldr	r3, [pc, #92]	; (409680 <xTimerGenericCommand+0x8c>)
  409622:	4798      	blx	r3
  409624:	4603      	mov	r3, r0
  409626:	2b01      	cmp	r3, #1
  409628:	d10b      	bne.n	409642 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40962a:	4b14      	ldr	r3, [pc, #80]	; (40967c <xTimerGenericCommand+0x88>)
  40962c:	681a      	ldr	r2, [r3, #0]
  40962e:	f107 0310 	add.w	r3, r7, #16
  409632:	4610      	mov	r0, r2
  409634:	4619      	mov	r1, r3
  409636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  409638:	2300      	movs	r3, #0
  40963a:	4c12      	ldr	r4, [pc, #72]	; (409684 <xTimerGenericCommand+0x90>)
  40963c:	47a0      	blx	r4
  40963e:	61f8      	str	r0, [r7, #28]
  409640:	e016      	b.n	409670 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  409642:	4b0e      	ldr	r3, [pc, #56]	; (40967c <xTimerGenericCommand+0x88>)
  409644:	681a      	ldr	r2, [r3, #0]
  409646:	f107 0310 	add.w	r3, r7, #16
  40964a:	4610      	mov	r0, r2
  40964c:	4619      	mov	r1, r3
  40964e:	2200      	movs	r2, #0
  409650:	2300      	movs	r3, #0
  409652:	4c0c      	ldr	r4, [pc, #48]	; (409684 <xTimerGenericCommand+0x90>)
  409654:	47a0      	blx	r4
  409656:	61f8      	str	r0, [r7, #28]
  409658:	e00a      	b.n	409670 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40965a:	4b08      	ldr	r3, [pc, #32]	; (40967c <xTimerGenericCommand+0x88>)
  40965c:	681a      	ldr	r2, [r3, #0]
  40965e:	f107 0310 	add.w	r3, r7, #16
  409662:	4610      	mov	r0, r2
  409664:	4619      	mov	r1, r3
  409666:	683a      	ldr	r2, [r7, #0]
  409668:	2300      	movs	r3, #0
  40966a:	4c07      	ldr	r4, [pc, #28]	; (409688 <xTimerGenericCommand+0x94>)
  40966c:	47a0      	blx	r4
  40966e:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  409670:	69fb      	ldr	r3, [r7, #28]
}
  409672:	4618      	mov	r0, r3
  409674:	3724      	adds	r7, #36	; 0x24
  409676:	46bd      	mov	sp, r7
  409678:	bd90      	pop	{r4, r7, pc}
  40967a:	bf00      	nop
  40967c:	200018f4 	.word	0x200018f4
  409680:	004093c9 	.word	0x004093c9
  409684:	00408019 	.word	0x00408019
  409688:	00408155 	.word	0x00408155

0040968c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  40968c:	b590      	push	{r4, r7, lr}
  40968e:	b087      	sub	sp, #28
  409690:	af02      	add	r7, sp, #8
  409692:	6078      	str	r0, [r7, #4]
  409694:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  409696:	4b15      	ldr	r3, [pc, #84]	; (4096ec <prvProcessExpiredTimer+0x60>)
  409698:	681b      	ldr	r3, [r3, #0]
  40969a:	68db      	ldr	r3, [r3, #12]
  40969c:	68db      	ldr	r3, [r3, #12]
  40969e:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
  4096a0:	68fb      	ldr	r3, [r7, #12]
  4096a2:	3304      	adds	r3, #4
  4096a4:	4618      	mov	r0, r3
  4096a6:	4b12      	ldr	r3, [pc, #72]	; (4096f0 <prvProcessExpiredTimer+0x64>)
  4096a8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4096aa:	68fb      	ldr	r3, [r7, #12]
  4096ac:	69db      	ldr	r3, [r3, #28]
  4096ae:	2b01      	cmp	r3, #1
  4096b0:	d115      	bne.n	4096de <prvProcessExpiredTimer+0x52>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4096b2:	68fb      	ldr	r3, [r7, #12]
  4096b4:	699a      	ldr	r2, [r3, #24]
  4096b6:	687b      	ldr	r3, [r7, #4]
  4096b8:	4413      	add	r3, r2
  4096ba:	68f8      	ldr	r0, [r7, #12]
  4096bc:	4619      	mov	r1, r3
  4096be:	683a      	ldr	r2, [r7, #0]
  4096c0:	687b      	ldr	r3, [r7, #4]
  4096c2:	4c0c      	ldr	r4, [pc, #48]	; (4096f4 <prvProcessExpiredTimer+0x68>)
  4096c4:	47a0      	blx	r4
  4096c6:	4603      	mov	r3, r0
  4096c8:	2b01      	cmp	r3, #1
  4096ca:	d108      	bne.n	4096de <prvProcessExpiredTimer+0x52>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4096cc:	2300      	movs	r3, #0
  4096ce:	9300      	str	r3, [sp, #0]
  4096d0:	68f8      	ldr	r0, [r7, #12]
  4096d2:	2100      	movs	r1, #0
  4096d4:	687a      	ldr	r2, [r7, #4]
  4096d6:	2300      	movs	r3, #0
  4096d8:	4c07      	ldr	r4, [pc, #28]	; (4096f8 <prvProcessExpiredTimer+0x6c>)
  4096da:	47a0      	blx	r4
  4096dc:	60b8      	str	r0, [r7, #8]
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4096de:	68fb      	ldr	r3, [r7, #12]
  4096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4096e2:	68f8      	ldr	r0, [r7, #12]
  4096e4:	4798      	blx	r3
}
  4096e6:	3714      	adds	r7, #20
  4096e8:	46bd      	mov	sp, r7
  4096ea:	bd90      	pop	{r4, r7, pc}
  4096ec:	200018ec 	.word	0x200018ec
  4096f0:	00407ba9 	.word	0x00407ba9
  4096f4:	00409845 	.word	0x00409845
  4096f8:	004095f5 	.word	0x004095f5

004096fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4096fc:	b580      	push	{r7, lr}
  4096fe:	b084      	sub	sp, #16
  409700:	af00      	add	r7, sp, #0
  409702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  409704:	f107 0308 	add.w	r3, r7, #8
  409708:	4618      	mov	r0, r3
  40970a:	4b05      	ldr	r3, [pc, #20]	; (409720 <prvTimerTask+0x24>)
  40970c:	4798      	blx	r3
  40970e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  409710:	68bb      	ldr	r3, [r7, #8]
  409712:	68f8      	ldr	r0, [r7, #12]
  409714:	4619      	mov	r1, r3
  409716:	4b03      	ldr	r3, [pc, #12]	; (409724 <prvTimerTask+0x28>)
  409718:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  40971a:	4b03      	ldr	r3, [pc, #12]	; (409728 <prvTimerTask+0x2c>)
  40971c:	4798      	blx	r3
	}
  40971e:	e7f1      	b.n	409704 <prvTimerTask+0x8>
  409720:	004097b1 	.word	0x004097b1
  409724:	0040972d 	.word	0x0040972d
  409728:	004098cd 	.word	0x004098cd

0040972c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  40972c:	b580      	push	{r7, lr}
  40972e:	b084      	sub	sp, #16
  409730:	af00      	add	r7, sp, #0
  409732:	6078      	str	r0, [r7, #4]
  409734:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  409736:	4b17      	ldr	r3, [pc, #92]	; (409794 <prvProcessTimerOrBlockTask+0x68>)
  409738:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40973a:	f107 0308 	add.w	r3, r7, #8
  40973e:	4618      	mov	r0, r3
  409740:	4b15      	ldr	r3, [pc, #84]	; (409798 <prvProcessTimerOrBlockTask+0x6c>)
  409742:	4798      	blx	r3
  409744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  409746:	68bb      	ldr	r3, [r7, #8]
  409748:	2b00      	cmp	r3, #0
  40974a:	d11e      	bne.n	40978a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40974c:	683b      	ldr	r3, [r7, #0]
  40974e:	2b00      	cmp	r3, #0
  409750:	d10a      	bne.n	409768 <prvProcessTimerOrBlockTask+0x3c>
  409752:	687a      	ldr	r2, [r7, #4]
  409754:	68fb      	ldr	r3, [r7, #12]
  409756:	429a      	cmp	r2, r3
  409758:	d806      	bhi.n	409768 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  40975a:	4b10      	ldr	r3, [pc, #64]	; (40979c <prvProcessTimerOrBlockTask+0x70>)
  40975c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40975e:	6878      	ldr	r0, [r7, #4]
  409760:	68f9      	ldr	r1, [r7, #12]
  409762:	4b0f      	ldr	r3, [pc, #60]	; (4097a0 <prvProcessTimerOrBlockTask+0x74>)
  409764:	4798      	blx	r3
  409766:	e012      	b.n	40978e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  409768:	4b0e      	ldr	r3, [pc, #56]	; (4097a4 <prvProcessTimerOrBlockTask+0x78>)
  40976a:	681a      	ldr	r2, [r3, #0]
  40976c:	6879      	ldr	r1, [r7, #4]
  40976e:	68fb      	ldr	r3, [r7, #12]
  409770:	1acb      	subs	r3, r1, r3
  409772:	4610      	mov	r0, r2
  409774:	4619      	mov	r1, r3
  409776:	4b0c      	ldr	r3, [pc, #48]	; (4097a8 <prvProcessTimerOrBlockTask+0x7c>)
  409778:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40977a:	4b08      	ldr	r3, [pc, #32]	; (40979c <prvProcessTimerOrBlockTask+0x70>)
  40977c:	4798      	blx	r3
  40977e:	4603      	mov	r3, r0
  409780:	2b00      	cmp	r3, #0
  409782:	d104      	bne.n	40978e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  409784:	4b09      	ldr	r3, [pc, #36]	; (4097ac <prvProcessTimerOrBlockTask+0x80>)
  409786:	4798      	blx	r3
  409788:	e001      	b.n	40978e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  40978a:	4b04      	ldr	r3, [pc, #16]	; (40979c <prvProcessTimerOrBlockTask+0x70>)
  40978c:	4798      	blx	r3
		}
	}
}
  40978e:	3710      	adds	r7, #16
  409790:	46bd      	mov	sp, r7
  409792:	bd80      	pop	{r7, pc}
  409794:	0040892d 	.word	0x0040892d
  409798:	004097f9 	.word	0x004097f9
  40979c:	00408949 	.word	0x00408949
  4097a0:	0040968d 	.word	0x0040968d
  4097a4:	200018f4 	.word	0x200018f4
  4097a8:	004085cd 	.word	0x004085cd
  4097ac:	00407d65 	.word	0x00407d65

004097b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  4097b0:	b480      	push	{r7}
  4097b2:	b085      	sub	sp, #20
  4097b4:	af00      	add	r7, sp, #0
  4097b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4097b8:	4b0e      	ldr	r3, [pc, #56]	; (4097f4 <prvGetNextExpireTime+0x44>)
  4097ba:	681b      	ldr	r3, [r3, #0]
  4097bc:	681b      	ldr	r3, [r3, #0]
  4097be:	2b00      	cmp	r3, #0
  4097c0:	bf14      	ite	ne
  4097c2:	2300      	movne	r3, #0
  4097c4:	2301      	moveq	r3, #1
  4097c6:	b2db      	uxtb	r3, r3
  4097c8:	461a      	mov	r2, r3
  4097ca:	687b      	ldr	r3, [r7, #4]
  4097cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4097ce:	687b      	ldr	r3, [r7, #4]
  4097d0:	681b      	ldr	r3, [r3, #0]
  4097d2:	2b00      	cmp	r3, #0
  4097d4:	d105      	bne.n	4097e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4097d6:	4b07      	ldr	r3, [pc, #28]	; (4097f4 <prvGetNextExpireTime+0x44>)
  4097d8:	681b      	ldr	r3, [r3, #0]
  4097da:	68db      	ldr	r3, [r3, #12]
  4097dc:	681b      	ldr	r3, [r3, #0]
  4097de:	60fb      	str	r3, [r7, #12]
  4097e0:	e001      	b.n	4097e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  4097e2:	2300      	movs	r3, #0
  4097e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  4097e6:	68fb      	ldr	r3, [r7, #12]
}
  4097e8:	4618      	mov	r0, r3
  4097ea:	3714      	adds	r7, #20
  4097ec:	46bd      	mov	sp, r7
  4097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097f2:	4770      	bx	lr
  4097f4:	200018ec 	.word	0x200018ec

004097f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  4097f8:	b580      	push	{r7, lr}
  4097fa:	b084      	sub	sp, #16
  4097fc:	af00      	add	r7, sp, #0
  4097fe:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  409800:	4b0d      	ldr	r3, [pc, #52]	; (409838 <prvSampleTimeNow+0x40>)
  409802:	4798      	blx	r3
  409804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  409806:	4b0d      	ldr	r3, [pc, #52]	; (40983c <prvSampleTimeNow+0x44>)
  409808:	681b      	ldr	r3, [r3, #0]
  40980a:	68fa      	ldr	r2, [r7, #12]
  40980c:	429a      	cmp	r2, r3
  40980e:	d208      	bcs.n	409822 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  409810:	4b0a      	ldr	r3, [pc, #40]	; (40983c <prvSampleTimeNow+0x44>)
  409812:	681b      	ldr	r3, [r3, #0]
  409814:	4618      	mov	r0, r3
  409816:	4b0a      	ldr	r3, [pc, #40]	; (409840 <prvSampleTimeNow+0x48>)
  409818:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40981a:	687b      	ldr	r3, [r7, #4]
  40981c:	2201      	movs	r2, #1
  40981e:	601a      	str	r2, [r3, #0]
  409820:	e002      	b.n	409828 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  409822:	687b      	ldr	r3, [r7, #4]
  409824:	2200      	movs	r2, #0
  409826:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  409828:	4b04      	ldr	r3, [pc, #16]	; (40983c <prvSampleTimeNow+0x44>)
  40982a:	68fa      	ldr	r2, [r7, #12]
  40982c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  40982e:	68fb      	ldr	r3, [r7, #12]
}
  409830:	4618      	mov	r0, r3
  409832:	3710      	adds	r7, #16
  409834:	46bd      	mov	sp, r7
  409836:	bd80      	pop	{r7, pc}
  409838:	00408a55 	.word	0x00408a55
  40983c:	200018f8 	.word	0x200018f8
  409840:	004099c5 	.word	0x004099c5

00409844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  409844:	b580      	push	{r7, lr}
  409846:	b086      	sub	sp, #24
  409848:	af00      	add	r7, sp, #0
  40984a:	60f8      	str	r0, [r7, #12]
  40984c:	60b9      	str	r1, [r7, #8]
  40984e:	607a      	str	r2, [r7, #4]
  409850:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  409852:	2300      	movs	r3, #0
  409854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  409856:	68fb      	ldr	r3, [r7, #12]
  409858:	68ba      	ldr	r2, [r7, #8]
  40985a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40985c:	68fb      	ldr	r3, [r7, #12]
  40985e:	68fa      	ldr	r2, [r7, #12]
  409860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  409862:	68ba      	ldr	r2, [r7, #8]
  409864:	687b      	ldr	r3, [r7, #4]
  409866:	429a      	cmp	r2, r3
  409868:	d812      	bhi.n	409890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40986a:	687a      	ldr	r2, [r7, #4]
  40986c:	683b      	ldr	r3, [r7, #0]
  40986e:	1ad2      	subs	r2, r2, r3
  409870:	68fb      	ldr	r3, [r7, #12]
  409872:	699b      	ldr	r3, [r3, #24]
  409874:	429a      	cmp	r2, r3
  409876:	d302      	bcc.n	40987e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  409878:	2301      	movs	r3, #1
  40987a:	617b      	str	r3, [r7, #20]
  40987c:	e01b      	b.n	4098b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40987e:	4b10      	ldr	r3, [pc, #64]	; (4098c0 <prvInsertTimerInActiveList+0x7c>)
  409880:	681a      	ldr	r2, [r3, #0]
  409882:	68fb      	ldr	r3, [r7, #12]
  409884:	3304      	adds	r3, #4
  409886:	4610      	mov	r0, r2
  409888:	4619      	mov	r1, r3
  40988a:	4b0e      	ldr	r3, [pc, #56]	; (4098c4 <prvInsertTimerInActiveList+0x80>)
  40988c:	4798      	blx	r3
  40988e:	e012      	b.n	4098b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  409890:	687a      	ldr	r2, [r7, #4]
  409892:	683b      	ldr	r3, [r7, #0]
  409894:	429a      	cmp	r2, r3
  409896:	d206      	bcs.n	4098a6 <prvInsertTimerInActiveList+0x62>
  409898:	68ba      	ldr	r2, [r7, #8]
  40989a:	683b      	ldr	r3, [r7, #0]
  40989c:	429a      	cmp	r2, r3
  40989e:	d302      	bcc.n	4098a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4098a0:	2301      	movs	r3, #1
  4098a2:	617b      	str	r3, [r7, #20]
  4098a4:	e007      	b.n	4098b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4098a6:	4b08      	ldr	r3, [pc, #32]	; (4098c8 <prvInsertTimerInActiveList+0x84>)
  4098a8:	681a      	ldr	r2, [r3, #0]
  4098aa:	68fb      	ldr	r3, [r7, #12]
  4098ac:	3304      	adds	r3, #4
  4098ae:	4610      	mov	r0, r2
  4098b0:	4619      	mov	r1, r3
  4098b2:	4b04      	ldr	r3, [pc, #16]	; (4098c4 <prvInsertTimerInActiveList+0x80>)
  4098b4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4098b6:	697b      	ldr	r3, [r7, #20]
}
  4098b8:	4618      	mov	r0, r3
  4098ba:	3718      	adds	r7, #24
  4098bc:	46bd      	mov	sp, r7
  4098be:	bd80      	pop	{r7, pc}
  4098c0:	200018f0 	.word	0x200018f0
  4098c4:	00407b39 	.word	0x00407b39
  4098c8:	200018ec 	.word	0x200018ec

004098cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  4098cc:	b590      	push	{r4, r7, lr}
  4098ce:	b08b      	sub	sp, #44	; 0x2c
  4098d0:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4098d2:	1d3b      	adds	r3, r7, #4
  4098d4:	4618      	mov	r0, r3
  4098d6:	4b34      	ldr	r3, [pc, #208]	; (4099a8 <prvProcessReceivedCommands+0xdc>)
  4098d8:	4798      	blx	r3
  4098da:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4098dc:	e053      	b.n	409986 <prvProcessReceivedCommands+0xba>
	{
		pxTimer = xMessage.pxTimer;
  4098de:	693b      	ldr	r3, [r7, #16]
  4098e0:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4098e2:	69bb      	ldr	r3, [r7, #24]
  4098e4:	2b00      	cmp	r3, #0
  4098e6:	d008      	beq.n	4098fa <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4098e8:	69bb      	ldr	r3, [r7, #24]
  4098ea:	695b      	ldr	r3, [r3, #20]
  4098ec:	2b00      	cmp	r3, #0
  4098ee:	d004      	beq.n	4098fa <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
  4098f0:	69bb      	ldr	r3, [r7, #24]
  4098f2:	3304      	adds	r3, #4
  4098f4:	4618      	mov	r0, r3
  4098f6:	4b2d      	ldr	r3, [pc, #180]	; (4099ac <prvProcessReceivedCommands+0xe0>)
  4098f8:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4098fa:	68bb      	ldr	r3, [r7, #8]
  4098fc:	2b03      	cmp	r3, #3
  4098fe:	d841      	bhi.n	409984 <prvProcessReceivedCommands+0xb8>
  409900:	a201      	add	r2, pc, #4	; (adr r2, 409908 <prvProcessReceivedCommands+0x3c>)
  409902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  409906:	bf00      	nop
  409908:	00409919 	.word	0x00409919
  40990c:	00409985 	.word	0x00409985
  409910:	00409961 	.word	0x00409961
  409914:	0040997d 	.word	0x0040997d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  409918:	68fa      	ldr	r2, [r7, #12]
  40991a:	69bb      	ldr	r3, [r7, #24]
  40991c:	699b      	ldr	r3, [r3, #24]
  40991e:	441a      	add	r2, r3
  409920:	68fb      	ldr	r3, [r7, #12]
  409922:	69b8      	ldr	r0, [r7, #24]
  409924:	4611      	mov	r1, r2
  409926:	69fa      	ldr	r2, [r7, #28]
  409928:	4c21      	ldr	r4, [pc, #132]	; (4099b0 <prvProcessReceivedCommands+0xe4>)
  40992a:	47a0      	blx	r4
  40992c:	4603      	mov	r3, r0
  40992e:	2b01      	cmp	r3, #1
  409930:	d115      	bne.n	40995e <prvProcessReceivedCommands+0x92>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  409932:	69bb      	ldr	r3, [r7, #24]
  409934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409936:	69b8      	ldr	r0, [r7, #24]
  409938:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40993a:	69bb      	ldr	r3, [r7, #24]
  40993c:	69db      	ldr	r3, [r3, #28]
  40993e:	2b01      	cmp	r3, #1
  409940:	d10d      	bne.n	40995e <prvProcessReceivedCommands+0x92>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  409942:	68fa      	ldr	r2, [r7, #12]
  409944:	69bb      	ldr	r3, [r7, #24]
  409946:	699b      	ldr	r3, [r3, #24]
  409948:	4413      	add	r3, r2
  40994a:	2200      	movs	r2, #0
  40994c:	9200      	str	r2, [sp, #0]
  40994e:	69b8      	ldr	r0, [r7, #24]
  409950:	2100      	movs	r1, #0
  409952:	461a      	mov	r2, r3
  409954:	2300      	movs	r3, #0
  409956:	4c17      	ldr	r4, [pc, #92]	; (4099b4 <prvProcessReceivedCommands+0xe8>)
  409958:	47a0      	blx	r4
  40995a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
  40995c:	e013      	b.n	409986 <prvProcessReceivedCommands+0xba>
  40995e:	e012      	b.n	409986 <prvProcessReceivedCommands+0xba>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  409960:	68fa      	ldr	r2, [r7, #12]
  409962:	69bb      	ldr	r3, [r7, #24]
  409964:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  409966:	69bb      	ldr	r3, [r7, #24]
  409968:	699a      	ldr	r2, [r3, #24]
  40996a:	69fb      	ldr	r3, [r7, #28]
  40996c:	4413      	add	r3, r2
  40996e:	69b8      	ldr	r0, [r7, #24]
  409970:	4619      	mov	r1, r3
  409972:	69fa      	ldr	r2, [r7, #28]
  409974:	69fb      	ldr	r3, [r7, #28]
  409976:	4c0e      	ldr	r4, [pc, #56]	; (4099b0 <prvProcessReceivedCommands+0xe4>)
  409978:	47a0      	blx	r4
				break;
  40997a:	e004      	b.n	409986 <prvProcessReceivedCommands+0xba>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40997c:	69b8      	ldr	r0, [r7, #24]
  40997e:	4b0e      	ldr	r3, [pc, #56]	; (4099b8 <prvProcessReceivedCommands+0xec>)
  409980:	4798      	blx	r3
				break;
  409982:	e000      	b.n	409986 <prvProcessReceivedCommands+0xba>

			default	:
				/* Don't expect to get here. */
				break;
  409984:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  409986:	4b0d      	ldr	r3, [pc, #52]	; (4099bc <prvProcessReceivedCommands+0xf0>)
  409988:	681a      	ldr	r2, [r3, #0]
  40998a:	f107 0308 	add.w	r3, r7, #8
  40998e:	4610      	mov	r0, r2
  409990:	4619      	mov	r1, r3
  409992:	2200      	movs	r2, #0
  409994:	2300      	movs	r3, #0
  409996:	4c0a      	ldr	r4, [pc, #40]	; (4099c0 <prvProcessReceivedCommands+0xf4>)
  409998:	47a0      	blx	r4
  40999a:	4603      	mov	r3, r0
  40999c:	2b00      	cmp	r3, #0
  40999e:	d19e      	bne.n	4098de <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  4099a0:	3724      	adds	r7, #36	; 0x24
  4099a2:	46bd      	mov	sp, r7
  4099a4:	bd90      	pop	{r4, r7, pc}
  4099a6:	bf00      	nop
  4099a8:	004097f9 	.word	0x004097f9
  4099ac:	00407ba9 	.word	0x00407ba9
  4099b0:	00409845 	.word	0x00409845
  4099b4:	004095f5 	.word	0x004095f5
  4099b8:	00407e9d 	.word	0x00407e9d
  4099bc:	200018f4 	.word	0x200018f4
  4099c0:	004081dd 	.word	0x004081dd

004099c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  4099c4:	b590      	push	{r4, r7, lr}
  4099c6:	b08b      	sub	sp, #44	; 0x2c
  4099c8:	af02      	add	r7, sp, #8
  4099ca:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4099cc:	e037      	b.n	409a3e <prvSwitchTimerLists+0x7a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4099ce:	4b25      	ldr	r3, [pc, #148]	; (409a64 <prvSwitchTimerLists+0xa0>)
  4099d0:	681b      	ldr	r3, [r3, #0]
  4099d2:	68db      	ldr	r3, [r3, #12]
  4099d4:	681b      	ldr	r3, [r3, #0]
  4099d6:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4099d8:	4b22      	ldr	r3, [pc, #136]	; (409a64 <prvSwitchTimerLists+0xa0>)
  4099da:	681b      	ldr	r3, [r3, #0]
  4099dc:	68db      	ldr	r3, [r3, #12]
  4099de:	68db      	ldr	r3, [r3, #12]
  4099e0:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
  4099e2:	69bb      	ldr	r3, [r7, #24]
  4099e4:	3304      	adds	r3, #4
  4099e6:	4618      	mov	r0, r3
  4099e8:	4b1f      	ldr	r3, [pc, #124]	; (409a68 <prvSwitchTimerLists+0xa4>)
  4099ea:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4099ec:	69bb      	ldr	r3, [r7, #24]
  4099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4099f0:	69b8      	ldr	r0, [r7, #24]
  4099f2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4099f4:	69bb      	ldr	r3, [r7, #24]
  4099f6:	69db      	ldr	r3, [r3, #28]
  4099f8:	2b01      	cmp	r3, #1
  4099fa:	d120      	bne.n	409a3e <prvSwitchTimerLists+0x7a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4099fc:	69bb      	ldr	r3, [r7, #24]
  4099fe:	699a      	ldr	r2, [r3, #24]
  409a00:	69fb      	ldr	r3, [r7, #28]
  409a02:	4413      	add	r3, r2
  409a04:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  409a06:	697a      	ldr	r2, [r7, #20]
  409a08:	69fb      	ldr	r3, [r7, #28]
  409a0a:	429a      	cmp	r2, r3
  409a0c:	d90e      	bls.n	409a2c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  409a0e:	69bb      	ldr	r3, [r7, #24]
  409a10:	697a      	ldr	r2, [r7, #20]
  409a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  409a14:	69bb      	ldr	r3, [r7, #24]
  409a16:	69ba      	ldr	r2, [r7, #24]
  409a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  409a1a:	4b12      	ldr	r3, [pc, #72]	; (409a64 <prvSwitchTimerLists+0xa0>)
  409a1c:	681a      	ldr	r2, [r3, #0]
  409a1e:	69bb      	ldr	r3, [r7, #24]
  409a20:	3304      	adds	r3, #4
  409a22:	4610      	mov	r0, r2
  409a24:	4619      	mov	r1, r3
  409a26:	4b11      	ldr	r3, [pc, #68]	; (409a6c <prvSwitchTimerLists+0xa8>)
  409a28:	4798      	blx	r3
  409a2a:	e008      	b.n	409a3e <prvSwitchTimerLists+0x7a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  409a2c:	2300      	movs	r3, #0
  409a2e:	9300      	str	r3, [sp, #0]
  409a30:	69b8      	ldr	r0, [r7, #24]
  409a32:	2100      	movs	r1, #0
  409a34:	69fa      	ldr	r2, [r7, #28]
  409a36:	2300      	movs	r3, #0
  409a38:	4c0d      	ldr	r4, [pc, #52]	; (409a70 <prvSwitchTimerLists+0xac>)
  409a3a:	47a0      	blx	r4
  409a3c:	6138      	str	r0, [r7, #16]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  409a3e:	4b09      	ldr	r3, [pc, #36]	; (409a64 <prvSwitchTimerLists+0xa0>)
  409a40:	681b      	ldr	r3, [r3, #0]
  409a42:	681b      	ldr	r3, [r3, #0]
  409a44:	2b00      	cmp	r3, #0
  409a46:	d1c2      	bne.n	4099ce <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  409a48:	4b06      	ldr	r3, [pc, #24]	; (409a64 <prvSwitchTimerLists+0xa0>)
  409a4a:	681b      	ldr	r3, [r3, #0]
  409a4c:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  409a4e:	4b09      	ldr	r3, [pc, #36]	; (409a74 <prvSwitchTimerLists+0xb0>)
  409a50:	681a      	ldr	r2, [r3, #0]
  409a52:	4b04      	ldr	r3, [pc, #16]	; (409a64 <prvSwitchTimerLists+0xa0>)
  409a54:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  409a56:	4b07      	ldr	r3, [pc, #28]	; (409a74 <prvSwitchTimerLists+0xb0>)
  409a58:	68fa      	ldr	r2, [r7, #12]
  409a5a:	601a      	str	r2, [r3, #0]
}
  409a5c:	3724      	adds	r7, #36	; 0x24
  409a5e:	46bd      	mov	sp, r7
  409a60:	bd90      	pop	{r4, r7, pc}
  409a62:	bf00      	nop
  409a64:	200018ec 	.word	0x200018ec
  409a68:	00407ba9 	.word	0x00407ba9
  409a6c:	00407b39 	.word	0x00407b39
  409a70:	004095f5 	.word	0x004095f5
  409a74:	200018f0 	.word	0x200018f0

00409a78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  409a78:	b580      	push	{r7, lr}
  409a7a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  409a7c:	4b0d      	ldr	r3, [pc, #52]	; (409ab4 <prvCheckForValidListAndQueue+0x3c>)
  409a7e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  409a80:	4b0d      	ldr	r3, [pc, #52]	; (409ab8 <prvCheckForValidListAndQueue+0x40>)
  409a82:	681b      	ldr	r3, [r3, #0]
  409a84:	2b00      	cmp	r3, #0
  409a86:	d112      	bne.n	409aae <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
  409a88:	480c      	ldr	r0, [pc, #48]	; (409abc <prvCheckForValidListAndQueue+0x44>)
  409a8a:	4b0d      	ldr	r3, [pc, #52]	; (409ac0 <prvCheckForValidListAndQueue+0x48>)
  409a8c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  409a8e:	480d      	ldr	r0, [pc, #52]	; (409ac4 <prvCheckForValidListAndQueue+0x4c>)
  409a90:	4b0b      	ldr	r3, [pc, #44]	; (409ac0 <prvCheckForValidListAndQueue+0x48>)
  409a92:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  409a94:	4b0c      	ldr	r3, [pc, #48]	; (409ac8 <prvCheckForValidListAndQueue+0x50>)
  409a96:	4a09      	ldr	r2, [pc, #36]	; (409abc <prvCheckForValidListAndQueue+0x44>)
  409a98:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  409a9a:	4b0c      	ldr	r3, [pc, #48]	; (409acc <prvCheckForValidListAndQueue+0x54>)
  409a9c:	4a09      	ldr	r2, [pc, #36]	; (409ac4 <prvCheckForValidListAndQueue+0x4c>)
  409a9e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  409aa0:	200a      	movs	r0, #10
  409aa2:	210c      	movs	r1, #12
  409aa4:	4b0a      	ldr	r3, [pc, #40]	; (409ad0 <prvCheckForValidListAndQueue+0x58>)
  409aa6:	4798      	blx	r3
  409aa8:	4602      	mov	r2, r0
  409aaa:	4b03      	ldr	r3, [pc, #12]	; (409ab8 <prvCheckForValidListAndQueue+0x40>)
  409aac:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  409aae:	4b09      	ldr	r3, [pc, #36]	; (409ad4 <prvCheckForValidListAndQueue+0x5c>)
  409ab0:	4798      	blx	r3
}
  409ab2:	bd80      	pop	{r7, pc}
  409ab4:	00407d7d 	.word	0x00407d7d
  409ab8:	200018f4 	.word	0x200018f4
  409abc:	200018c4 	.word	0x200018c4
  409ac0:	00407a91 	.word	0x00407a91
  409ac4:	200018d8 	.word	0x200018d8
  409ac8:	200018ec 	.word	0x200018ec
  409acc:	200018f0 	.word	0x200018f0
  409ad0:	00407ecd 	.word	0x00407ecd
  409ad4:	00407da1 	.word	0x00407da1

00409ad8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  409ad8:	b580      	push	{r7, lr}
  409ada:	b084      	sub	sp, #16
  409adc:	af00      	add	r7, sp, #0
  409ade:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  409ae0:	687b      	ldr	r3, [r7, #4]
  409ae2:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  409ae4:	4b08      	ldr	r3, [pc, #32]	; (409b08 <xTimerIsTimerActive+0x30>)
  409ae6:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  409ae8:	68fb      	ldr	r3, [r7, #12]
  409aea:	695b      	ldr	r3, [r3, #20]
  409aec:	2b00      	cmp	r3, #0
  409aee:	bf0c      	ite	eq
  409af0:	2300      	moveq	r3, #0
  409af2:	2301      	movne	r3, #1
  409af4:	b2db      	uxtb	r3, r3
  409af6:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  409af8:	4b04      	ldr	r3, [pc, #16]	; (409b0c <xTimerIsTimerActive+0x34>)
  409afa:	4798      	blx	r3

	return xTimerIsInActiveList;
  409afc:	68bb      	ldr	r3, [r7, #8]
}
  409afe:	4618      	mov	r0, r3
  409b00:	3710      	adds	r7, #16
  409b02:	46bd      	mov	sp, r7
  409b04:	bd80      	pop	{r7, pc}
  409b06:	bf00      	nop
  409b08:	00407d7d 	.word	0x00407d7d
  409b0c:	00407da1 	.word	0x00407da1

00409b10 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  409b10:	b480      	push	{r7}
  409b12:	b083      	sub	sp, #12
  409b14:	af00      	add	r7, sp, #0
  409b16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  409b18:	687b      	ldr	r3, [r7, #4]
  409b1a:	2b07      	cmp	r3, #7
  409b1c:	d825      	bhi.n	409b6a <osc_get_rate+0x5a>
  409b1e:	a201      	add	r2, pc, #4	; (adr r2, 409b24 <osc_get_rate+0x14>)
  409b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  409b24:	00409b45 	.word	0x00409b45
  409b28:	00409b4b 	.word	0x00409b4b
  409b2c:	00409b51 	.word	0x00409b51
  409b30:	00409b57 	.word	0x00409b57
  409b34:	00409b5b 	.word	0x00409b5b
  409b38:	00409b5f 	.word	0x00409b5f
  409b3c:	00409b63 	.word	0x00409b63
  409b40:	00409b67 	.word	0x00409b67
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  409b44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  409b48:	e010      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  409b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  409b4e:	e00d      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  409b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  409b54:	e00a      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  409b56:	4b08      	ldr	r3, [pc, #32]	; (409b78 <osc_get_rate+0x68>)
  409b58:	e008      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  409b5a:	4b08      	ldr	r3, [pc, #32]	; (409b7c <osc_get_rate+0x6c>)
  409b5c:	e006      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  409b5e:	4b08      	ldr	r3, [pc, #32]	; (409b80 <osc_get_rate+0x70>)
  409b60:	e004      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  409b62:	4b08      	ldr	r3, [pc, #32]	; (409b84 <osc_get_rate+0x74>)
  409b64:	e002      	b.n	409b6c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  409b66:	4b07      	ldr	r3, [pc, #28]	; (409b84 <osc_get_rate+0x74>)
  409b68:	e000      	b.n	409b6c <osc_get_rate+0x5c>
	}

	return 0;
  409b6a:	2300      	movs	r3, #0
}
  409b6c:	4618      	mov	r0, r3
  409b6e:	370c      	adds	r7, #12
  409b70:	46bd      	mov	sp, r7
  409b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b76:	4770      	bx	lr
  409b78:	003d0900 	.word	0x003d0900
  409b7c:	007a1200 	.word	0x007a1200
  409b80:	00b71b00 	.word	0x00b71b00
  409b84:	00f42400 	.word	0x00f42400

00409b88 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  409b88:	b580      	push	{r7, lr}
  409b8a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  409b8c:	2006      	movs	r0, #6
  409b8e:	4b04      	ldr	r3, [pc, #16]	; (409ba0 <sysclk_get_main_hz+0x18>)
  409b90:	4798      	blx	r3
  409b92:	4602      	mov	r2, r0
  409b94:	4613      	mov	r3, r2
  409b96:	011b      	lsls	r3, r3, #4
  409b98:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  409b9a:	4618      	mov	r0, r3
  409b9c:	bd80      	pop	{r7, pc}
  409b9e:	bf00      	nop
  409ba0:	00409b11 	.word	0x00409b11

00409ba4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  409ba4:	b580      	push	{r7, lr}
  409ba6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  409ba8:	4b02      	ldr	r3, [pc, #8]	; (409bb4 <sysclk_get_peripheral_hz+0x10>)
  409baa:	4798      	blx	r3
  409bac:	4603      	mov	r3, r0
  409bae:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  409bb0:	4618      	mov	r0, r3
  409bb2:	bd80      	pop	{r7, pc}
  409bb4:	00409b89 	.word	0x00409b89

00409bb8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  409bb8:	b580      	push	{r7, lr}
  409bba:	b082      	sub	sp, #8
  409bbc:	af00      	add	r7, sp, #0
  409bbe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  409bc0:	6878      	ldr	r0, [r7, #4]
  409bc2:	4b02      	ldr	r3, [pc, #8]	; (409bcc <sysclk_enable_peripheral_clock+0x14>)
  409bc4:	4798      	blx	r3
}
  409bc6:	3708      	adds	r7, #8
  409bc8:	46bd      	mov	sp, r7
  409bca:	bd80      	pop	{r7, pc}
  409bcc:	0040de71 	.word	0x0040de71

00409bd0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  409bd0:	b580      	push	{r7, lr}
  409bd2:	b08c      	sub	sp, #48	; 0x30
  409bd4:	af00      	add	r7, sp, #0
  409bd6:	6078      	str	r0, [r7, #4]
  409bd8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  409bda:	4b31      	ldr	r3, [pc, #196]	; (409ca0 <usart_serial_init+0xd0>)
  409bdc:	4798      	blx	r3
  409bde:	4603      	mov	r3, r0
  409be0:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  409be2:	683b      	ldr	r3, [r7, #0]
  409be4:	681b      	ldr	r3, [r3, #0]
  409be6:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  409be8:	683b      	ldr	r3, [r7, #0]
  409bea:	689b      	ldr	r3, [r3, #8]
  409bec:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  409bee:	683b      	ldr	r3, [r7, #0]
  409bf0:	681b      	ldr	r3, [r3, #0]
  409bf2:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  409bf4:	683b      	ldr	r3, [r7, #0]
  409bf6:	685b      	ldr	r3, [r3, #4]
  409bf8:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  409bfa:	683b      	ldr	r3, [r7, #0]
  409bfc:	689b      	ldr	r3, [r3, #8]
  409bfe:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  409c00:	683b      	ldr	r3, [r7, #0]
  409c02:	7b1b      	ldrb	r3, [r3, #12]
  409c04:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  409c06:	2300      	movs	r3, #0
  409c08:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  409c0a:	687a      	ldr	r2, [r7, #4]
  409c0c:	4b25      	ldr	r3, [pc, #148]	; (409ca4 <usart_serial_init+0xd4>)
  409c0e:	429a      	cmp	r2, r3
  409c10:	d108      	bne.n	409c24 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  409c12:	2008      	movs	r0, #8
  409c14:	4b24      	ldr	r3, [pc, #144]	; (409ca8 <usart_serial_init+0xd8>)
  409c16:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  409c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
  409c1c:	6878      	ldr	r0, [r7, #4]
  409c1e:	4619      	mov	r1, r3
  409c20:	4b22      	ldr	r3, [pc, #136]	; (409cac <usart_serial_init+0xdc>)
  409c22:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  409c24:	687a      	ldr	r2, [r7, #4]
  409c26:	4b22      	ldr	r3, [pc, #136]	; (409cb0 <usart_serial_init+0xe0>)
  409c28:	429a      	cmp	r2, r3
  409c2a:	d108      	bne.n	409c3e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  409c2c:	2009      	movs	r0, #9
  409c2e:	4b1e      	ldr	r3, [pc, #120]	; (409ca8 <usart_serial_init+0xd8>)
  409c30:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  409c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
  409c36:	6878      	ldr	r0, [r7, #4]
  409c38:	4619      	mov	r1, r3
  409c3a:	4b1c      	ldr	r3, [pc, #112]	; (409cac <usart_serial_init+0xdc>)
  409c3c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  409c3e:	687a      	ldr	r2, [r7, #4]
  409c40:	4b1c      	ldr	r3, [pc, #112]	; (409cb4 <usart_serial_init+0xe4>)
  409c42:	429a      	cmp	r2, r3
  409c44:	d112      	bne.n	409c6c <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  409c46:	200e      	movs	r0, #14
  409c48:	4b17      	ldr	r3, [pc, #92]	; (409ca8 <usart_serial_init+0xd8>)
  409c4a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409c4c:	4b14      	ldr	r3, [pc, #80]	; (409ca0 <usart_serial_init+0xd0>)
  409c4e:	4798      	blx	r3
  409c50:	4603      	mov	r3, r0
  409c52:	f107 020c 	add.w	r2, r7, #12
  409c56:	6878      	ldr	r0, [r7, #4]
  409c58:	4611      	mov	r1, r2
  409c5a:	461a      	mov	r2, r3
  409c5c:	4b16      	ldr	r3, [pc, #88]	; (409cb8 <usart_serial_init+0xe8>)
  409c5e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  409c60:	6878      	ldr	r0, [r7, #4]
  409c62:	4b16      	ldr	r3, [pc, #88]	; (409cbc <usart_serial_init+0xec>)
  409c64:	4798      	blx	r3
		usart_enable_rx(p_usart);
  409c66:	6878      	ldr	r0, [r7, #4]
  409c68:	4b15      	ldr	r3, [pc, #84]	; (409cc0 <usart_serial_init+0xf0>)
  409c6a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  409c6c:	687a      	ldr	r2, [r7, #4]
  409c6e:	4b15      	ldr	r3, [pc, #84]	; (409cc4 <usart_serial_init+0xf4>)
  409c70:	429a      	cmp	r2, r3
  409c72:	d112      	bne.n	409c9a <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  409c74:	200f      	movs	r0, #15
  409c76:	4b0c      	ldr	r3, [pc, #48]	; (409ca8 <usart_serial_init+0xd8>)
  409c78:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409c7a:	4b09      	ldr	r3, [pc, #36]	; (409ca0 <usart_serial_init+0xd0>)
  409c7c:	4798      	blx	r3
  409c7e:	4603      	mov	r3, r0
  409c80:	f107 020c 	add.w	r2, r7, #12
  409c84:	6878      	ldr	r0, [r7, #4]
  409c86:	4611      	mov	r1, r2
  409c88:	461a      	mov	r2, r3
  409c8a:	4b0b      	ldr	r3, [pc, #44]	; (409cb8 <usart_serial_init+0xe8>)
  409c8c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  409c8e:	6878      	ldr	r0, [r7, #4]
  409c90:	4b0a      	ldr	r3, [pc, #40]	; (409cbc <usart_serial_init+0xec>)
  409c92:	4798      	blx	r3
		usart_enable_rx(p_usart);
  409c94:	6878      	ldr	r0, [r7, #4]
  409c96:	4b0a      	ldr	r3, [pc, #40]	; (409cc0 <usart_serial_init+0xf0>)
  409c98:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  409c9a:	3730      	adds	r7, #48	; 0x30
  409c9c:	46bd      	mov	sp, r7
  409c9e:	bd80      	pop	{r7, pc}
  409ca0:	00409ba5 	.word	0x00409ba5
  409ca4:	400e0600 	.word	0x400e0600
  409ca8:	00409bb9 	.word	0x00409bb9
  409cac:	0040430d 	.word	0x0040430d
  409cb0:	400e0800 	.word	0x400e0800
  409cb4:	40024000 	.word	0x40024000
  409cb8:	004044f1 	.word	0x004044f1
  409cbc:	00404575 	.word	0x00404575
  409cc0:	004045a5 	.word	0x004045a5
  409cc4:	40028000 	.word	0x40028000

00409cc8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  409cc8:	b580      	push	{r7, lr}
  409cca:	b082      	sub	sp, #8
  409ccc:	af00      	add	r7, sp, #0
  409cce:	6078      	str	r0, [r7, #4]
  409cd0:	460b      	mov	r3, r1
  409cd2:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  409cd4:	687a      	ldr	r2, [r7, #4]
  409cd6:	4b20      	ldr	r3, [pc, #128]	; (409d58 <usart_serial_putchar+0x90>)
  409cd8:	429a      	cmp	r2, r3
  409cda:	d10a      	bne.n	409cf2 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  409cdc:	bf00      	nop
  409cde:	78fb      	ldrb	r3, [r7, #3]
  409ce0:	6878      	ldr	r0, [r7, #4]
  409ce2:	4619      	mov	r1, r3
  409ce4:	4b1d      	ldr	r3, [pc, #116]	; (409d5c <usart_serial_putchar+0x94>)
  409ce6:	4798      	blx	r3
  409ce8:	4603      	mov	r3, r0
  409cea:	2b00      	cmp	r3, #0
  409cec:	d1f7      	bne.n	409cde <usart_serial_putchar+0x16>
		return 1;
  409cee:	2301      	movs	r3, #1
  409cf0:	e02d      	b.n	409d4e <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  409cf2:	687a      	ldr	r2, [r7, #4]
  409cf4:	4b1a      	ldr	r3, [pc, #104]	; (409d60 <usart_serial_putchar+0x98>)
  409cf6:	429a      	cmp	r2, r3
  409cf8:	d10a      	bne.n	409d10 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  409cfa:	bf00      	nop
  409cfc:	78fb      	ldrb	r3, [r7, #3]
  409cfe:	6878      	ldr	r0, [r7, #4]
  409d00:	4619      	mov	r1, r3
  409d02:	4b16      	ldr	r3, [pc, #88]	; (409d5c <usart_serial_putchar+0x94>)
  409d04:	4798      	blx	r3
  409d06:	4603      	mov	r3, r0
  409d08:	2b00      	cmp	r3, #0
  409d0a:	d1f7      	bne.n	409cfc <usart_serial_putchar+0x34>
		return 1;
  409d0c:	2301      	movs	r3, #1
  409d0e:	e01e      	b.n	409d4e <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  409d10:	687a      	ldr	r2, [r7, #4]
  409d12:	4b14      	ldr	r3, [pc, #80]	; (409d64 <usart_serial_putchar+0x9c>)
  409d14:	429a      	cmp	r2, r3
  409d16:	d10a      	bne.n	409d2e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  409d18:	bf00      	nop
  409d1a:	78fb      	ldrb	r3, [r7, #3]
  409d1c:	6878      	ldr	r0, [r7, #4]
  409d1e:	4619      	mov	r1, r3
  409d20:	4b11      	ldr	r3, [pc, #68]	; (409d68 <usart_serial_putchar+0xa0>)
  409d22:	4798      	blx	r3
  409d24:	4603      	mov	r3, r0
  409d26:	2b00      	cmp	r3, #0
  409d28:	d1f7      	bne.n	409d1a <usart_serial_putchar+0x52>
		return 1;
  409d2a:	2301      	movs	r3, #1
  409d2c:	e00f      	b.n	409d4e <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  409d2e:	687a      	ldr	r2, [r7, #4]
  409d30:	4b0e      	ldr	r3, [pc, #56]	; (409d6c <usart_serial_putchar+0xa4>)
  409d32:	429a      	cmp	r2, r3
  409d34:	d10a      	bne.n	409d4c <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  409d36:	bf00      	nop
  409d38:	78fb      	ldrb	r3, [r7, #3]
  409d3a:	6878      	ldr	r0, [r7, #4]
  409d3c:	4619      	mov	r1, r3
  409d3e:	4b0a      	ldr	r3, [pc, #40]	; (409d68 <usart_serial_putchar+0xa0>)
  409d40:	4798      	blx	r3
  409d42:	4603      	mov	r3, r0
  409d44:	2b00      	cmp	r3, #0
  409d46:	d1f7      	bne.n	409d38 <usart_serial_putchar+0x70>
		return 1;
  409d48:	2301      	movs	r3, #1
  409d4a:	e000      	b.n	409d4e <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  409d4c:	2300      	movs	r3, #0
}
  409d4e:	4618      	mov	r0, r3
  409d50:	3708      	adds	r7, #8
  409d52:	46bd      	mov	sp, r7
  409d54:	bd80      	pop	{r7, pc}
  409d56:	bf00      	nop
  409d58:	400e0600 	.word	0x400e0600
  409d5c:	004043a5 	.word	0x004043a5
  409d60:	400e0800 	.word	0x400e0800
  409d64:	40024000 	.word	0x40024000
  409d68:	00404661 	.word	0x00404661
  409d6c:	40028000 	.word	0x40028000

00409d70 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  409d70:	b580      	push	{r7, lr}
  409d72:	b084      	sub	sp, #16
  409d74:	af00      	add	r7, sp, #0
  409d76:	6078      	str	r0, [r7, #4]
  409d78:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  409d7a:	2300      	movs	r3, #0
  409d7c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  409d7e:	687a      	ldr	r2, [r7, #4]
  409d80:	4b1e      	ldr	r3, [pc, #120]	; (409dfc <usart_serial_getchar+0x8c>)
  409d82:	429a      	cmp	r2, r3
  409d84:	d107      	bne.n	409d96 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  409d86:	bf00      	nop
  409d88:	6878      	ldr	r0, [r7, #4]
  409d8a:	6839      	ldr	r1, [r7, #0]
  409d8c:	4b1c      	ldr	r3, [pc, #112]	; (409e00 <usart_serial_getchar+0x90>)
  409d8e:	4798      	blx	r3
  409d90:	4603      	mov	r3, r0
  409d92:	2b00      	cmp	r3, #0
  409d94:	d1f8      	bne.n	409d88 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  409d96:	687a      	ldr	r2, [r7, #4]
  409d98:	4b1a      	ldr	r3, [pc, #104]	; (409e04 <usart_serial_getchar+0x94>)
  409d9a:	429a      	cmp	r2, r3
  409d9c:	d107      	bne.n	409dae <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  409d9e:	bf00      	nop
  409da0:	6878      	ldr	r0, [r7, #4]
  409da2:	6839      	ldr	r1, [r7, #0]
  409da4:	4b16      	ldr	r3, [pc, #88]	; (409e00 <usart_serial_getchar+0x90>)
  409da6:	4798      	blx	r3
  409da8:	4603      	mov	r3, r0
  409daa:	2b00      	cmp	r3, #0
  409dac:	d1f8      	bne.n	409da0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  409dae:	687a      	ldr	r2, [r7, #4]
  409db0:	4b15      	ldr	r3, [pc, #84]	; (409e08 <usart_serial_getchar+0x98>)
  409db2:	429a      	cmp	r2, r3
  409db4:	d10d      	bne.n	409dd2 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  409db6:	bf00      	nop
  409db8:	f107 030c 	add.w	r3, r7, #12
  409dbc:	6878      	ldr	r0, [r7, #4]
  409dbe:	4619      	mov	r1, r3
  409dc0:	4b12      	ldr	r3, [pc, #72]	; (409e0c <usart_serial_getchar+0x9c>)
  409dc2:	4798      	blx	r3
  409dc4:	4603      	mov	r3, r0
  409dc6:	2b00      	cmp	r3, #0
  409dc8:	d1f6      	bne.n	409db8 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  409dca:	68fb      	ldr	r3, [r7, #12]
  409dcc:	b2da      	uxtb	r2, r3
  409dce:	683b      	ldr	r3, [r7, #0]
  409dd0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  409dd2:	687a      	ldr	r2, [r7, #4]
  409dd4:	4b0e      	ldr	r3, [pc, #56]	; (409e10 <usart_serial_getchar+0xa0>)
  409dd6:	429a      	cmp	r2, r3
  409dd8:	d10d      	bne.n	409df6 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  409dda:	bf00      	nop
  409ddc:	f107 030c 	add.w	r3, r7, #12
  409de0:	6878      	ldr	r0, [r7, #4]
  409de2:	4619      	mov	r1, r3
  409de4:	4b09      	ldr	r3, [pc, #36]	; (409e0c <usart_serial_getchar+0x9c>)
  409de6:	4798      	blx	r3
  409de8:	4603      	mov	r3, r0
  409dea:	2b00      	cmp	r3, #0
  409dec:	d1f6      	bne.n	409ddc <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  409dee:	68fb      	ldr	r3, [r7, #12]
  409df0:	b2da      	uxtb	r2, r3
  409df2:	683b      	ldr	r3, [r7, #0]
  409df4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  409df6:	3710      	adds	r7, #16
  409df8:	46bd      	mov	sp, r7
  409dfa:	bd80      	pop	{r7, pc}
  409dfc:	400e0600 	.word	0x400e0600
  409e00:	004043d5 	.word	0x004043d5
  409e04:	400e0800 	.word	0x400e0800
  409e08:	40024000 	.word	0x40024000
  409e0c:	00404695 	.word	0x00404695
  409e10:	40028000 	.word	0x40028000

00409e14 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  409e14:	b580      	push	{r7, lr}
  409e16:	b082      	sub	sp, #8
  409e18:	af00      	add	r7, sp, #0
  409e1a:	6078      	str	r0, [r7, #4]
  409e1c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  409e1e:	4b0f      	ldr	r3, [pc, #60]	; (409e5c <stdio_serial_init+0x48>)
  409e20:	687a      	ldr	r2, [r7, #4]
  409e22:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  409e24:	4b0e      	ldr	r3, [pc, #56]	; (409e60 <stdio_serial_init+0x4c>)
  409e26:	4a0f      	ldr	r2, [pc, #60]	; (409e64 <stdio_serial_init+0x50>)
  409e28:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  409e2a:	4b0f      	ldr	r3, [pc, #60]	; (409e68 <stdio_serial_init+0x54>)
  409e2c:	4a0f      	ldr	r2, [pc, #60]	; (409e6c <stdio_serial_init+0x58>)
  409e2e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  409e30:	6878      	ldr	r0, [r7, #4]
  409e32:	6839      	ldr	r1, [r7, #0]
  409e34:	4b0e      	ldr	r3, [pc, #56]	; (409e70 <stdio_serial_init+0x5c>)
  409e36:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  409e38:	4b0e      	ldr	r3, [pc, #56]	; (409e74 <stdio_serial_init+0x60>)
  409e3a:	681b      	ldr	r3, [r3, #0]
  409e3c:	689b      	ldr	r3, [r3, #8]
  409e3e:	4618      	mov	r0, r3
  409e40:	2100      	movs	r1, #0
  409e42:	4b0d      	ldr	r3, [pc, #52]	; (409e78 <stdio_serial_init+0x64>)
  409e44:	4798      	blx	r3
	setbuf(stdin, NULL);
  409e46:	4b0b      	ldr	r3, [pc, #44]	; (409e74 <stdio_serial_init+0x60>)
  409e48:	681b      	ldr	r3, [r3, #0]
  409e4a:	685b      	ldr	r3, [r3, #4]
  409e4c:	4618      	mov	r0, r3
  409e4e:	2100      	movs	r1, #0
  409e50:	4b09      	ldr	r3, [pc, #36]	; (409e78 <stdio_serial_init+0x64>)
  409e52:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  409e54:	3708      	adds	r7, #8
  409e56:	46bd      	mov	sp, r7
  409e58:	bd80      	pop	{r7, pc}
  409e5a:	bf00      	nop
  409e5c:	200021c4 	.word	0x200021c4
  409e60:	200021c0 	.word	0x200021c0
  409e64:	00409cc9 	.word	0x00409cc9
  409e68:	200021bc 	.word	0x200021bc
  409e6c:	00409d71 	.word	0x00409d71
  409e70:	00409bd1 	.word	0x00409bd1
  409e74:	20000918 	.word	0x20000918
  409e78:	0040f251 	.word	0x0040f251

00409e7c <configure_console>:

/**
 * \brief Configure the console UART.
 */
static void configure_console(void)
{
  409e7c:	b590      	push	{r4, r7, lr}
  409e7e:	b085      	sub	sp, #20
  409e80:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = {
  409e82:	4b0a      	ldr	r3, [pc, #40]	; (409eac <configure_console+0x30>)
  409e84:	463c      	mov	r4, r7
  409e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  409e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &usart_serial_options);
  409e8c:	463b      	mov	r3, r7
  409e8e:	4808      	ldr	r0, [pc, #32]	; (409eb0 <configure_console+0x34>)
  409e90:	4619      	mov	r1, r3
  409e92:	4b08      	ldr	r3, [pc, #32]	; (409eb4 <configure_console+0x38>)
  409e94:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  409e96:	4b08      	ldr	r3, [pc, #32]	; (409eb8 <configure_console+0x3c>)
  409e98:	681b      	ldr	r3, [r3, #0]
  409e9a:	689b      	ldr	r3, [r3, #8]
  409e9c:	4618      	mov	r0, r3
  409e9e:	2100      	movs	r1, #0
  409ea0:	4b06      	ldr	r3, [pc, #24]	; (409ebc <configure_console+0x40>)
  409ea2:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  409ea4:	3714      	adds	r7, #20
  409ea6:	46bd      	mov	sp, r7
  409ea8:	bd90      	pop	{r4, r7, pc}
  409eaa:	bf00      	nop
  409eac:	00418c60 	.word	0x00418c60
  409eb0:	400e0600 	.word	0x400e0600
  409eb4:	00409e15 	.word	0x00409e15
  409eb8:	20000918 	.word	0x20000918
  409ebc:	0040f251 	.word	0x0040f251

00409ec0 <powerOnInit>:
/**
 * powerOnInit(void)
 * @brief Initialize the board after power up. 
 */
void powerOnInit(void) 
{		
  409ec0:	b580      	push	{r7, lr}
  409ec2:	b082      	sub	sp, #8
  409ec4:	af00      	add	r7, sp, #0
		static FRESULT res;
		Ctrl_status status;
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  409ec6:	2000      	movs	r0, #0
  409ec8:	4b38      	ldr	r3, [pc, #224]	; (409fac <powerOnInit+0xec>)
  409eca:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
  409ecc:	bf00      	nop
  409ece:	4b38      	ldr	r3, [pc, #224]	; (409fb0 <powerOnInit+0xf0>)
  409ed0:	4798      	blx	r3
  409ed2:	4603      	mov	r3, r0
  409ed4:	2b00      	cmp	r3, #0
  409ed6:	d0fa      	beq.n	409ece <powerOnInit+0xe>
		rtc_set_hour_mode(RTC, 0);
  409ed8:	4836      	ldr	r0, [pc, #216]	; (409fb4 <powerOnInit+0xf4>)
  409eda:	2100      	movs	r1, #0
  409edc:	4b36      	ldr	r3, [pc, #216]	; (409fb8 <powerOnInit+0xf8>)
  409ede:	4798      	blx	r3
		rtc_clear_date_alarm(RTC);
  409ee0:	4834      	ldr	r0, [pc, #208]	; (409fb4 <powerOnInit+0xf4>)
  409ee2:	4b36      	ldr	r3, [pc, #216]	; (409fbc <powerOnInit+0xfc>)
  409ee4:	4798      	blx	r3
		rtc_clear_time_alarm(RTC);
  409ee6:	4833      	ldr	r0, [pc, #204]	; (409fb4 <powerOnInit+0xf4>)
  409ee8:	4b35      	ldr	r3, [pc, #212]	; (409fc0 <powerOnInit+0x100>)
  409eea:	4798      	blx	r3
		//configure the gpio
		drv_gpio_initializeAll();
  409eec:	4b35      	ldr	r3, [pc, #212]	; (409fc4 <powerOnInit+0x104>)
  409eee:	4798      	blx	r3
		drv_led_init(&ledConfiguration);
  409ef0:	4835      	ldr	r0, [pc, #212]	; (409fc8 <powerOnInit+0x108>)
  409ef2:	4b36      	ldr	r3, [pc, #216]	; (409fcc <powerOnInit+0x10c>)
  409ef4:	4798      	blx	r3
		//drv_gpio_ConfigureBLEForProgramming(); 
		//configure UART1 to be used as a STDIO function
		configure_console();
  409ef6:	4b36      	ldr	r3, [pc, #216]	; (409fd0 <powerOnInit+0x110>)
  409ef8:	4798      	blx	r3
		//initialize the 
		if(drv_uart_init(&uart0Config) != STATUS_PASS)
  409efa:	4836      	ldr	r0, [pc, #216]	; (409fd4 <powerOnInit+0x114>)
  409efc:	4b36      	ldr	r3, [pc, #216]	; (409fd8 <powerOnInit+0x118>)
  409efe:	4798      	blx	r3
  409f00:	4603      	mov	r3, r0
  409f02:	2b00      	cmp	r3, #0
  409f04:	d000      	beq.n	409f08 <powerOnInit+0x48>
		{
			while(1); //spin here
  409f06:	e7fe      	b.n	409f06 <powerOnInit+0x46>
		}		
		if(drv_uart_init(&uart1Config) != STATUS_PASS)
  409f08:	4834      	ldr	r0, [pc, #208]	; (409fdc <powerOnInit+0x11c>)
  409f0a:	4b33      	ldr	r3, [pc, #204]	; (409fd8 <powerOnInit+0x118>)
  409f0c:	4798      	blx	r3
  409f0e:	4603      	mov	r3, r0
  409f10:	2b00      	cmp	r3, #0
  409f12:	d000      	beq.n	409f16 <powerOnInit+0x56>
		{
			while(1); //spin here
  409f14:	e7fe      	b.n	409f14 <powerOnInit+0x54>
		}
		if(drv_uart_init(&usart0Config) != STATUS_PASS)
  409f16:	4832      	ldr	r0, [pc, #200]	; (409fe0 <powerOnInit+0x120>)
  409f18:	4b2f      	ldr	r3, [pc, #188]	; (409fd8 <powerOnInit+0x118>)
  409f1a:	4798      	blx	r3
  409f1c:	4603      	mov	r3, r0
  409f1e:	2b00      	cmp	r3, #0
  409f20:	d000      	beq.n	409f24 <powerOnInit+0x64>
		{
			while(1); //spin here
  409f22:	e7fe      	b.n	409f22 <powerOnInit+0x62>
		}
		if(drv_uart_init(&usart1Config) != STATUS_PASS)
  409f24:	482f      	ldr	r0, [pc, #188]	; (409fe4 <powerOnInit+0x124>)
  409f26:	4b2c      	ldr	r3, [pc, #176]	; (409fd8 <powerOnInit+0x118>)
  409f28:	4798      	blx	r3
  409f2a:	4603      	mov	r3, r0
  409f2c:	2b00      	cmp	r3, #0
  409f2e:	d000      	beq.n	409f32 <powerOnInit+0x72>
		{
			while(1); //spin here
  409f30:	e7fe      	b.n	409f30 <powerOnInit+0x70>
		}
		
		////Initialize SD card
		//
		sd_mmc_init();
  409f32:	4b2d      	ldr	r3, [pc, #180]	; (409fe8 <powerOnInit+0x128>)
  409f34:	4798      	blx	r3
		///* Wait card present and ready */
		//
		////we don't want the firmware to freeze if we don't have an SD card. 
		do
		{
			status = sd_mmc_test_unit_ready(0);
  409f36:	2000      	movs	r0, #0
  409f38:	4b2c      	ldr	r3, [pc, #176]	; (409fec <powerOnInit+0x12c>)
  409f3a:	4798      	blx	r3
  409f3c:	4603      	mov	r3, r0
  409f3e:	71fb      	strb	r3, [r7, #7]
			if (CTRL_FAIL == status)
  409f40:	79fb      	ldrb	r3, [r7, #7]
  409f42:	2b01      	cmp	r3, #1
  409f44:	d10c      	bne.n	409f60 <powerOnInit+0xa0>
			{
				printf("Card install FAIL\n\r");
  409f46:	482a      	ldr	r0, [pc, #168]	; (409ff0 <powerOnInit+0x130>)
  409f48:	4b2a      	ldr	r3, [pc, #168]	; (409ff4 <powerOnInit+0x134>)
  409f4a:	4798      	blx	r3
				printf("Please unplug and re-plug the card.\n\r");
  409f4c:	482a      	ldr	r0, [pc, #168]	; (409ff8 <powerOnInit+0x138>)
  409f4e:	4b29      	ldr	r3, [pc, #164]	; (409ff4 <powerOnInit+0x134>)
  409f50:	4798      	blx	r3
				while (CTRL_NO_PRESENT != sd_mmc_check(0))
  409f52:	bf00      	nop
  409f54:	2000      	movs	r0, #0
  409f56:	4b29      	ldr	r3, [pc, #164]	; (409ffc <powerOnInit+0x13c>)
  409f58:	4798      	blx	r3
  409f5a:	4603      	mov	r3, r0
  409f5c:	2b02      	cmp	r3, #2
  409f5e:	d1f9      	bne.n	409f54 <powerOnInit+0x94>
				{
				}
			}
		} while (CTRL_GOOD != status);
  409f60:	79fb      	ldrb	r3, [r7, #7]
  409f62:	2b00      	cmp	r3, #0
  409f64:	d1e7      	bne.n	409f36 <powerOnInit+0x76>
		
		
		/*	Mount the SD card	*/
		memset(&fs, 0, sizeof(FATFS));
  409f66:	4826      	ldr	r0, [pc, #152]	; (40a000 <powerOnInit+0x140>)
  409f68:	2100      	movs	r1, #0
  409f6a:	f44f 720c 	mov.w	r2, #560	; 0x230
  409f6e:	4b25      	ldr	r3, [pc, #148]	; (40a004 <powerOnInit+0x144>)
  409f70:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  409f72:	2000      	movs	r0, #0
  409f74:	4922      	ldr	r1, [pc, #136]	; (40a000 <powerOnInit+0x140>)
  409f76:	4b24      	ldr	r3, [pc, #144]	; (40a008 <powerOnInit+0x148>)
  409f78:	4798      	blx	r3
  409f7a:	4603      	mov	r3, r0
  409f7c:	461a      	mov	r2, r3
  409f7e:	4b23      	ldr	r3, [pc, #140]	; (40a00c <powerOnInit+0x14c>)
  409f80:	701a      	strb	r2, [r3, #0]
		if (res == FR_INVALID_DRIVE)
  409f82:	4b22      	ldr	r3, [pc, #136]	; (40a00c <powerOnInit+0x14c>)
  409f84:	781b      	ldrb	r3, [r3, #0]
  409f86:	2b0b      	cmp	r3, #11
  409f88:	d103      	bne.n	409f92 <powerOnInit+0xd2>
		{
			printf("Error: Invalid Drive\r\n");
  409f8a:	4821      	ldr	r0, [pc, #132]	; (40a010 <powerOnInit+0x150>)
  409f8c:	4b19      	ldr	r3, [pc, #100]	; (409ff4 <powerOnInit+0x134>)
  409f8e:	4798      	blx	r3
			return 0;
  409f90:	e008      	b.n	409fa4 <powerOnInit+0xe4>
			//DebugLogBufPrint("Success: Passed Read Tests\r\n");
		//}
		//DebugLogSave();
		
		//load the settings
		if(loadSettings(SETTINGS_FILENAME) != STATUS_PASS)
  409f92:	4820      	ldr	r0, [pc, #128]	; (40a014 <powerOnInit+0x154>)
  409f94:	4b20      	ldr	r3, [pc, #128]	; (40a018 <powerOnInit+0x158>)
  409f96:	4798      	blx	r3
  409f98:	4603      	mov	r3, r0
  409f9a:	2b00      	cmp	r3, #0
  409f9c:	d002      	beq.n	409fa4 <powerOnInit+0xe4>
		{
			printf("failed to get read settings\r\n");
  409f9e:	481f      	ldr	r0, [pc, #124]	; (40a01c <powerOnInit+0x15c>)
  409fa0:	4b14      	ldr	r3, [pc, #80]	; (409ff4 <powerOnInit+0x134>)
  409fa2:	4798      	blx	r3
		}
		//DebugLogSave();
  409fa4:	3708      	adds	r7, #8
  409fa6:	46bd      	mov	sp, r7
  409fa8:	bd80      	pop	{r7, pc}
  409faa:	bf00      	nop
  409fac:	0040dc99 	.word	0x0040dc99
  409fb0:	0040dcd1 	.word	0x0040dcd1
  409fb4:	400e1460 	.word	0x400e1460
  409fb8:	00403eb5 	.word	0x00403eb5
  409fbc:	004042f1 	.word	0x004042f1
  409fc0:	004042d9 	.word	0x004042d9
  409fc4:	0040a799 	.word	0x0040a799
  409fc8:	200000ac 	.word	0x200000ac
  409fcc:	004001dd 	.word	0x004001dd
  409fd0:	00409e7d 	.word	0x00409e7d
  409fd4:	2000004c 	.word	0x2000004c
  409fd8:	0040b1dd 	.word	0x0040b1dd
  409fdc:	20000064 	.word	0x20000064
  409fe0:	2000007c 	.word	0x2000007c
  409fe4:	20000094 	.word	0x20000094
  409fe8:	00402b41 	.word	0x00402b41
  409fec:	00402ff9 	.word	0x00402ff9
  409ff0:	00418c70 	.word	0x00418c70
  409ff4:	0040eadd 	.word	0x0040eadd
  409ff8:	00418c84 	.word	0x00418c84
  409ffc:	00402b89 	.word	0x00402b89
  40a000:	200018fc 	.word	0x200018fc
  40a004:	0040f191 	.word	0x0040f191
  40a008:	00406a7d 	.word	0x00406a7d
  40a00c:	20001b2c 	.word	0x20001b2c
  40a010:	00418cac 	.word	0x00418cac
  40a014:	00418cc4 	.word	0x00418cc4
  40a018:	0040a021 	.word	0x0040a021
  40a01c:	00418cd4 	.word	0x00418cd4

0040a020 <loadSettings>:
/**
 * loadSettings(char* filename)
 * @brief Load configuration settings to buffers
 */
status_t loadSettings(char* filename)
{	
  40a020:	b5b0      	push	{r4, r5, r7, lr}
  40a022:	b0ea      	sub	sp, #424	; 0x1a8
  40a024:	af02      	add	r7, sp, #8
  40a026:	1d3b      	adds	r3, r7, #4
  40a028:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_PASS;
  40a02a:	2300      	movs	r3, #0
  40a02c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	static FIL configFileObj;
	//printf("Opening SD Card to read\r\n");
	DebugLogBufPrint("Opening SD Card to read\r\n");
  40a030:	489b      	ldr	r0, [pc, #620]	; (40a2a0 <loadSettings+0x280>)
  40a032:	4b9c      	ldr	r3, [pc, #624]	; (40a2a4 <loadSettings+0x284>)
  40a034:	4798      	blx	r3
	//initialize the suitNumber
	strncpy(brainSettings.suitNumber, "S0001", 10);
  40a036:	489c      	ldr	r0, [pc, #624]	; (40a2a8 <loadSettings+0x288>)
  40a038:	499c      	ldr	r1, [pc, #624]	; (40a2ac <loadSettings+0x28c>)
  40a03a:	220a      	movs	r2, #10
  40a03c:	4b9c      	ldr	r3, [pc, #624]	; (40a2b0 <loadSettings+0x290>)
  40a03e:	4798      	blx	r3
	filename[0] = LUN_ID_SD_MMC_0_MEM + '0'; //is this necessary? 
  40a040:	1d3b      	adds	r3, r7, #4
  40a042:	681b      	ldr	r3, [r3, #0]
  40a044:	2230      	movs	r2, #48	; 0x30
  40a046:	701a      	strb	r2, [r3, #0]
	FRESULT res = f_open(&configFileObj, (char const *)filename, FA_OPEN_EXISTING | FA_READ);
  40a048:	1d3b      	adds	r3, r7, #4
  40a04a:	489a      	ldr	r0, [pc, #616]	; (40a2b4 <loadSettings+0x294>)
  40a04c:	6819      	ldr	r1, [r3, #0]
  40a04e:	2201      	movs	r2, #1
  40a050:	4b99      	ldr	r3, [pc, #612]	; (40a2b8 <loadSettings+0x298>)
  40a052:	4798      	blx	r3
  40a054:	4603      	mov	r3, r0
  40a056:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	if (res != FR_OK)
  40a05a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
  40a05e:	2b00      	cmp	r3, #0
  40a060:	d007      	beq.n	40a072 <loadSettings+0x52>
	{
		result = STATUS_FAIL;
  40a062:	2301      	movs	r3, #1
  40a064:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		//printf("Error: Cannot Open file\r\n");
		DebugLogBufPrint("Error: Cannot Open file\r\n");
  40a068:	4894      	ldr	r0, [pc, #592]	; (40a2bc <loadSettings+0x29c>)
  40a06a:	4b8e      	ldr	r3, [pc, #568]	; (40a2a4 <loadSettings+0x284>)
  40a06c:	4798      	blx	r3
		return STATUS_FAIL;
  40a06e:	2301      	movs	r3, #1
  40a070:	e225      	b.n	40a4be <loadSettings+0x49e>
	}
	//read the whole file into a buffer
	//printf("Reading from SD\r\n");
	DebugLogBufPrint("Reading from SD\r\n");
  40a072:	4893      	ldr	r0, [pc, #588]	; (40a2c0 <loadSettings+0x2a0>)
  40a074:	4b8b      	ldr	r3, [pc, #556]	; (40a2a4 <loadSettings+0x284>)
  40a076:	4798      	blx	r3
	char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
  40a078:	f107 0360 	add.w	r3, r7, #96	; 0x60
  40a07c:	461a      	mov	r2, r3
  40a07e:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40a082:	4610      	mov	r0, r2
  40a084:	2100      	movs	r1, #0
  40a086:	461a      	mov	r2, r3
  40a088:	4b8e      	ldr	r3, [pc, #568]	; (40a2c4 <loadSettings+0x2a4>)
  40a08a:	4798      	blx	r3
	UINT bytes_read = 0, total_bytes_read = 0;	
  40a08c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40a090:	2200      	movs	r2, #0
  40a092:	601a      	str	r2, [r3, #0]
  40a094:	2300      	movs	r3, #0
  40a096:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  40a09a:	e018      	b.n	40a0ce <loadSettings+0xae>
	{
		res = f_read(&configFileObj, buf+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
  40a09c:	f107 0260 	add.w	r2, r7, #96	; 0x60
  40a0a0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
  40a0a4:	18d1      	adds	r1, r2, r3
  40a0a6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
  40a0aa:	f5c3 7296 	rsb	r2, r3, #300	; 0x12c
  40a0ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40a0b2:	4880      	ldr	r0, [pc, #512]	; (40a2b4 <loadSettings+0x294>)
  40a0b4:	4c84      	ldr	r4, [pc, #528]	; (40a2c8 <loadSettings+0x2a8>)
  40a0b6:	47a0      	blx	r4
  40a0b8:	4603      	mov	r3, r0
  40a0ba:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		total_bytes_read += bytes_read; 
  40a0be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
  40a0c2:	681b      	ldr	r3, [r3, #0]
  40a0c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
  40a0c8:	4413      	add	r3, r2
  40a0ca:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	//read the whole file into a buffer
	//printf("Reading from SD\r\n");
	DebugLogBufPrint("Reading from SD\r\n");
	char buf[MAX_CONFIG_FILE_SIZE] = {0}; 	 
	UINT bytes_read = 0, total_bytes_read = 0;	
	while(total_bytes_read < configFileObj.fsize && res == FR_OK)
  40a0ce:	4b79      	ldr	r3, [pc, #484]	; (40a2b4 <loadSettings+0x294>)
  40a0d0:	68da      	ldr	r2, [r3, #12]
  40a0d2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
  40a0d6:	429a      	cmp	r2, r3
  40a0d8:	d903      	bls.n	40a0e2 <loadSettings+0xc2>
  40a0da:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
  40a0de:	2b00      	cmp	r3, #0
  40a0e0:	d0dc      	beq.n	40a09c <loadSettings+0x7c>
	{
		res = f_read(&configFileObj, buf+total_bytes_read, MAX_CONFIG_FILE_SIZE - total_bytes_read, &bytes_read);
		total_bytes_read += bytes_read; 
	}
	char* bufPtr = 0;	//set pointer to start of buffer
  40a0e2:	2300      	movs	r3, #0
  40a0e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	//Decrypt the data
	if (strncmp(buf, "ee", 2) == 0)		//check if the file is encrypted
  40a0e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
  40a0ec:	4618      	mov	r0, r3
  40a0ee:	4977      	ldr	r1, [pc, #476]	; (40a2cc <loadSettings+0x2ac>)
  40a0f0:	2202      	movs	r2, #2
  40a0f2:	4b77      	ldr	r3, [pc, #476]	; (40a2d0 <loadSettings+0x2b0>)
  40a0f4:	4798      	blx	r3
  40a0f6:	4603      	mov	r3, r0
  40a0f8:	2b00      	cmp	r3, #0
  40a0fa:	d10f      	bne.n	40a11c <loadSettings+0xfc>
	{
		bufPtr = buf + 2;
  40a0fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
  40a100:	3302      	adds	r3, #2
  40a102:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		decryptBuf(buf+2, total_bytes_read);
  40a106:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
  40a10a:	b29b      	uxth	r3, r3
  40a10c:	f107 0260 	add.w	r2, r7, #96	; 0x60
  40a110:	3202      	adds	r2, #2
  40a112:	4610      	mov	r0, r2
  40a114:	4619      	mov	r1, r3
  40a116:	4b6f      	ldr	r3, [pc, #444]	; (40a2d4 <loadSettings+0x2b4>)
  40a118:	4798      	blx	r3
  40a11a:	e003      	b.n	40a124 <loadSettings+0x104>
	}
	else
	{
		bufPtr = buf;
  40a11c:	f107 0360 	add.w	r3, r7, #96	; 0x60
  40a120:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	}
	//now parse the file and 
	status_t step_status = STATUS_PASS;
  40a124:	2300      	movs	r3, #0
  40a126:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	char line[50] = {0}; 
  40a12a:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40a12e:	2200      	movs	r2, #0
  40a130:	601a      	str	r2, [r3, #0]
  40a132:	3304      	adds	r3, #4
  40a134:	2200      	movs	r2, #0
  40a136:	601a      	str	r2, [r3, #0]
  40a138:	3304      	adds	r3, #4
  40a13a:	2200      	movs	r2, #0
  40a13c:	601a      	str	r2, [r3, #0]
  40a13e:	3304      	adds	r3, #4
  40a140:	2200      	movs	r2, #0
  40a142:	601a      	str	r2, [r3, #0]
  40a144:	3304      	adds	r3, #4
  40a146:	2200      	movs	r2, #0
  40a148:	601a      	str	r2, [r3, #0]
  40a14a:	3304      	adds	r3, #4
  40a14c:	2200      	movs	r2, #0
  40a14e:	601a      	str	r2, [r3, #0]
  40a150:	3304      	adds	r3, #4
  40a152:	2200      	movs	r2, #0
  40a154:	601a      	str	r2, [r3, #0]
  40a156:	3304      	adds	r3, #4
  40a158:	2200      	movs	r2, #0
  40a15a:	601a      	str	r2, [r3, #0]
  40a15c:	3304      	adds	r3, #4
  40a15e:	2200      	movs	r2, #0
  40a160:	601a      	str	r2, [r3, #0]
  40a162:	3304      	adds	r3, #4
  40a164:	2200      	movs	r2, #0
  40a166:	601a      	str	r2, [r3, #0]
  40a168:	3304      	adds	r3, #4
  40a16a:	2200      	movs	r2, #0
  40a16c:	601a      	str	r2, [r3, #0]
  40a16e:	3304      	adds	r3, #4
  40a170:	2200      	movs	r2, #0
  40a172:	601a      	str	r2, [r3, #0]
  40a174:	3304      	adds	r3, #4
  40a176:	2200      	movs	r2, #0
  40a178:	801a      	strh	r2, [r3, #0]
  40a17a:	3302      	adds	r3, #2
	int NumberOfNods = 0;	
  40a17c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40a180:	2200      	movs	r2, #0
  40a182:	601a      	str	r2, [r3, #0]
	if(getLineFromBuf(bufPtr, line, sizeof(line)) == PASS)
  40a184:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40a188:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
  40a18c:	4619      	mov	r1, r3
  40a18e:	2232      	movs	r2, #50	; 0x32
  40a190:	4b51      	ldr	r3, [pc, #324]	; (40a2d8 <loadSettings+0x2b8>)
  40a192:	4798      	blx	r3
  40a194:	4603      	mov	r3, r0
  40a196:	2b00      	cmp	r3, #0
  40a198:	d11e      	bne.n	40a1d8 <loadSettings+0x1b8>
	{
		if(sscanf(line, "%s ,%d\r\n",brainSettings.suitNumber,&NumberOfNods) < 2)
  40a19a:	f107 0228 	add.w	r2, r7, #40	; 0x28
  40a19e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40a1a2:	4610      	mov	r0, r2
  40a1a4:	494d      	ldr	r1, [pc, #308]	; (40a2dc <loadSettings+0x2bc>)
  40a1a6:	4a40      	ldr	r2, [pc, #256]	; (40a2a8 <loadSettings+0x288>)
  40a1a8:	4c4d      	ldr	r4, [pc, #308]	; (40a2e0 <loadSettings+0x2c0>)
  40a1aa:	47a0      	blx	r4
  40a1ac:	4603      	mov	r3, r0
  40a1ae:	2b01      	cmp	r3, #1
  40a1b0:	dc07      	bgt.n	40a1c2 <loadSettings+0x1a2>
		{
			printf("failed to read settings\r\n");
  40a1b2:	484c      	ldr	r0, [pc, #304]	; (40a2e4 <loadSettings+0x2c4>)
  40a1b4:	4b4c      	ldr	r3, [pc, #304]	; (40a2e8 <loadSettings+0x2c8>)
  40a1b6:	4798      	blx	r3
			DebugLogBufPrint("failed to read settings\r\n");
  40a1b8:	484a      	ldr	r0, [pc, #296]	; (40a2e4 <loadSettings+0x2c4>)
  40a1ba:	4b3a      	ldr	r3, [pc, #232]	; (40a2a4 <loadSettings+0x284>)
  40a1bc:	4798      	blx	r3
			return STATUS_FAIL; 
  40a1be:	2301      	movs	r3, #1
  40a1c0:	e17d      	b.n	40a4be <loadSettings+0x49e>
		}
		bufPtr += strlen(line); 		
  40a1c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40a1c6:	4618      	mov	r0, r3
  40a1c8:	4b48      	ldr	r3, [pc, #288]	; (40a2ec <loadSettings+0x2cc>)
  40a1ca:	4798      	blx	r3
  40a1cc:	4603      	mov	r3, r0
  40a1ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
  40a1d2:	4413      	add	r3, r2
  40a1d4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	}
	brainSettings.numberOfImus = NumberOfNods; 
  40a1d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40a1dc:	681a      	ldr	r2, [r3, #0]
  40a1de:	4b44      	ldr	r3, [pc, #272]	; (40a2f0 <loadSettings+0x2d0>)
  40a1e0:	605a      	str	r2, [r3, #4]
	//initialize the expectedNumberOfNods
	quinticConfig[0].expectedNumberOfNods = 0;
  40a1e2:	4b44      	ldr	r3, [pc, #272]	; (40a2f4 <loadSettings+0x2d4>)
  40a1e4:	2200      	movs	r2, #0
  40a1e6:	619a      	str	r2, [r3, #24]
	quinticConfig[1].expectedNumberOfNods = 0;
  40a1e8:	4b42      	ldr	r3, [pc, #264]	; (40a2f4 <loadSettings+0x2d4>)
  40a1ea:	2200      	movs	r2, #0
  40a1ec:	645a      	str	r2, [r3, #68]	; 0x44
	quinticConfig[2].expectedNumberOfNods = 0;	
  40a1ee:	4b41      	ldr	r3, [pc, #260]	; (40a2f4 <loadSettings+0x2d4>)
  40a1f0:	2200      	movs	r2, #0
  40a1f2:	671a      	str	r2, [r3, #112]	; 0x70
	int i = 0; 
  40a1f4:	2300      	movs	r3, #0
  40a1f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	int quinticIndex = 0; 
  40a1fa:	f107 0320 	add.w	r3, r7, #32
  40a1fe:	2200      	movs	r2, #0
  40a200:	601a      	str	r2, [r3, #0]
	int imuId = 0;
  40a202:	f107 031c 	add.w	r3, r7, #28
  40a206:	2200      	movs	r2, #0
  40a208:	601a      	str	r2, [r3, #0]
	char tempMACAddress[20] = {0}; 
  40a20a:	f107 0308 	add.w	r3, r7, #8
  40a20e:	2200      	movs	r2, #0
  40a210:	601a      	str	r2, [r3, #0]
  40a212:	3304      	adds	r3, #4
  40a214:	2200      	movs	r2, #0
  40a216:	601a      	str	r2, [r3, #0]
  40a218:	3304      	adds	r3, #4
  40a21a:	2200      	movs	r2, #0
  40a21c:	601a      	str	r2, [r3, #0]
  40a21e:	3304      	adds	r3, #4
  40a220:	2200      	movs	r2, #0
  40a222:	601a      	str	r2, [r3, #0]
  40a224:	3304      	adds	r3, #4
  40a226:	2200      	movs	r2, #0
  40a228:	601a      	str	r2, [r3, #0]
  40a22a:	3304      	adds	r3, #4
	for(i = 0; i < NumberOfNods; i++)
  40a22c:	2300      	movs	r3, #0
  40a22e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  40a232:	e120      	b.n	40a476 <loadSettings+0x456>
	{
		if(getLineFromBuf(bufPtr, line,sizeof(line)) == STATUS_PASS)
  40a234:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40a238:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
  40a23c:	4619      	mov	r1, r3
  40a23e:	2232      	movs	r2, #50	; 0x32
  40a240:	4b25      	ldr	r3, [pc, #148]	; (40a2d8 <loadSettings+0x2b8>)
  40a242:	4798      	blx	r3
  40a244:	4603      	mov	r3, r0
  40a246:	2b00      	cmp	r3, #0
  40a248:	f040 8114 	bne.w	40a474 <loadSettings+0x454>
		{			
			if(sscanf(line,"%d,%d,%s\r\n",&quinticIndex, &imuId, tempMACAddress) < 2)
  40a24c:	f107 0128 	add.w	r1, r7, #40	; 0x28
  40a250:	f107 0220 	add.w	r2, r7, #32
  40a254:	f107 031c 	add.w	r3, r7, #28
  40a258:	f107 0008 	add.w	r0, r7, #8
  40a25c:	9000      	str	r0, [sp, #0]
  40a25e:	4608      	mov	r0, r1
  40a260:	4925      	ldr	r1, [pc, #148]	; (40a2f8 <loadSettings+0x2d8>)
  40a262:	4c1f      	ldr	r4, [pc, #124]	; (40a2e0 <loadSettings+0x2c0>)
  40a264:	47a0      	blx	r4
  40a266:	4603      	mov	r3, r0
  40a268:	2b01      	cmp	r3, #1
  40a26a:	dc06      	bgt.n	40a27a <loadSettings+0x25a>
			{
				printf("failed to parse IMU settings\r\n"); 
  40a26c:	4823      	ldr	r0, [pc, #140]	; (40a2fc <loadSettings+0x2dc>)
  40a26e:	4b1e      	ldr	r3, [pc, #120]	; (40a2e8 <loadSettings+0x2c8>)
  40a270:	4798      	blx	r3
				DebugLogBufPrint("failed to parse IMU settings\r\n");
  40a272:	4822      	ldr	r0, [pc, #136]	; (40a2fc <loadSettings+0x2dc>)
  40a274:	4b0b      	ldr	r3, [pc, #44]	; (40a2a4 <loadSettings+0x284>)
  40a276:	4798      	blx	r3
				break;
  40a278:	e105      	b.n	40a486 <loadSettings+0x466>
			}
			else
			{
				if(imuId < 0 || imuId > 9)
  40a27a:	f107 031c 	add.w	r3, r7, #28
  40a27e:	681b      	ldr	r3, [r3, #0]
  40a280:	2b00      	cmp	r3, #0
  40a282:	db04      	blt.n	40a28e <loadSettings+0x26e>
  40a284:	f107 031c 	add.w	r3, r7, #28
  40a288:	681b      	ldr	r3, [r3, #0]
  40a28a:	2b09      	cmp	r3, #9
  40a28c:	dd3a      	ble.n	40a304 <loadSettings+0x2e4>
				{
					printf("received incorrect imuId%d\r\n",imuId); 
  40a28e:	f107 031c 	add.w	r3, r7, #28
  40a292:	681b      	ldr	r3, [r3, #0]
  40a294:	481a      	ldr	r0, [pc, #104]	; (40a300 <loadSettings+0x2e0>)
  40a296:	4619      	mov	r1, r3
  40a298:	4b13      	ldr	r3, [pc, #76]	; (40a2e8 <loadSettings+0x2c8>)
  40a29a:	4798      	blx	r3
					break;	
  40a29c:	e0f3      	b.n	40a486 <loadSettings+0x466>
  40a29e:	bf00      	nop
  40a2a0:	00418cf4 	.word	0x00418cf4
  40a2a4:	0040a64d 	.word	0x0040a64d
  40a2a8:	20001b38 	.word	0x20001b38
  40a2ac:	00418d10 	.word	0x00418d10
  40a2b0:	0040f92d 	.word	0x0040f92d
  40a2b4:	20001b6c 	.word	0x20001b6c
  40a2b8:	00406ad9 	.word	0x00406ad9
  40a2bc:	00418d18 	.word	0x00418d18
  40a2c0:	00418d34 	.word	0x00418d34
  40a2c4:	0040f191 	.word	0x0040f191
  40a2c8:	00406f0d 	.word	0x00406f0d
  40a2cc:	00418d48 	.word	0x00418d48
  40a2d0:	0040f879 	.word	0x0040f879
  40a2d4:	0040a5dd 	.word	0x0040a5dd
  40a2d8:	0040a509 	.word	0x0040a509
  40a2dc:	00418d4c 	.word	0x00418d4c
  40a2e0:	0040f415 	.word	0x0040f415
  40a2e4:	00418d58 	.word	0x00418d58
  40a2e8:	0040eadd 	.word	0x0040eadd
  40a2ec:	0040f819 	.word	0x0040f819
  40a2f0:	20001b30 	.word	0x20001b30
  40a2f4:	200002e0 	.word	0x200002e0
  40a2f8:	00418d74 	.word	0x00418d74
  40a2fc:	00418d80 	.word	0x00418d80
  40a300:	00418da0 	.word	0x00418da0
				}
				packetReceivedMask |= (1<<imuId);
  40a304:	f107 031c 	add.w	r3, r7, #28
  40a308:	681b      	ldr	r3, [r3, #0]
  40a30a:	2201      	movs	r2, #1
  40a30c:	fa02 f303 	lsl.w	r3, r2, r3
  40a310:	b29a      	uxth	r2, r3
  40a312:	4b6d      	ldr	r3, [pc, #436]	; (40a4c8 <loadSettings+0x4a8>)
  40a314:	881b      	ldrh	r3, [r3, #0]
  40a316:	b29b      	uxth	r3, r3
  40a318:	4313      	orrs	r3, r2
  40a31a:	b29b      	uxth	r3, r3
  40a31c:	b29a      	uxth	r2, r3
  40a31e:	4b6a      	ldr	r3, [pc, #424]	; (40a4c8 <loadSettings+0x4a8>)
  40a320:	801a      	strh	r2, [r3, #0]
				imuConfig[imuId].imuId = imuId; 
  40a322:	f107 031c 	add.w	r3, r7, #28
  40a326:	681a      	ldr	r2, [r3, #0]
  40a328:	f107 031c 	add.w	r3, r7, #28
  40a32c:	6819      	ldr	r1, [r3, #0]
  40a32e:	4867      	ldr	r0, [pc, #412]	; (40a4cc <loadSettings+0x4ac>)
  40a330:	4613      	mov	r3, r2
  40a332:	00db      	lsls	r3, r3, #3
  40a334:	1a9b      	subs	r3, r3, r2
  40a336:	00db      	lsls	r3, r3, #3
  40a338:	4403      	add	r3, r0
  40a33a:	6019      	str	r1, [r3, #0]
				snprintf(imuConfig[imuId].macAddress,20, "%s\r\n",tempMACAddress); 
  40a33c:	f107 031c 	add.w	r3, r7, #28
  40a340:	681a      	ldr	r2, [r3, #0]
  40a342:	4613      	mov	r3, r2
  40a344:	00db      	lsls	r3, r3, #3
  40a346:	1a9b      	subs	r3, r3, r2
  40a348:	00db      	lsls	r3, r3, #3
  40a34a:	4a60      	ldr	r2, [pc, #384]	; (40a4cc <loadSettings+0x4ac>)
  40a34c:	4413      	add	r3, r2
  40a34e:	1d1a      	adds	r2, r3, #4
  40a350:	f107 0308 	add.w	r3, r7, #8
  40a354:	4610      	mov	r0, r2
  40a356:	2114      	movs	r1, #20
  40a358:	4a5d      	ldr	r2, [pc, #372]	; (40a4d0 <loadSettings+0x4b0>)
  40a35a:	4c5e      	ldr	r4, [pc, #376]	; (40a4d4 <loadSettings+0x4b4>)
  40a35c:	47a0      	blx	r4
				imuConfig[imuId].imuValid = true;
  40a35e:	f107 031c 	add.w	r3, r7, #28
  40a362:	681a      	ldr	r2, [r3, #0]
  40a364:	4959      	ldr	r1, [pc, #356]	; (40a4cc <loadSettings+0x4ac>)
  40a366:	4613      	mov	r3, r2
  40a368:	00db      	lsls	r3, r3, #3
  40a36a:	1a9b      	subs	r3, r3, r2
  40a36c:	00db      	lsls	r3, r3, #3
  40a36e:	440b      	add	r3, r1
  40a370:	3318      	adds	r3, #24
  40a372:	2201      	movs	r2, #1
  40a374:	601a      	str	r2, [r3, #0]
				if(quinticIndex < 0 || quinticIndex > 2)
  40a376:	f107 0320 	add.w	r3, r7, #32
  40a37a:	681b      	ldr	r3, [r3, #0]
  40a37c:	2b00      	cmp	r3, #0
  40a37e:	db04      	blt.n	40a38a <loadSettings+0x36a>
  40a380:	f107 0320 	add.w	r3, r7, #32
  40a384:	681b      	ldr	r3, [r3, #0]
  40a386:	2b02      	cmp	r3, #2
  40a388:	dd09      	ble.n	40a39e <loadSettings+0x37e>
				{
					printf("failed to assign IMU%d to quintic %d",i,quinticIndex); 
  40a38a:	f107 0320 	add.w	r3, r7, #32
  40a38e:	681b      	ldr	r3, [r3, #0]
  40a390:	4851      	ldr	r0, [pc, #324]	; (40a4d8 <loadSettings+0x4b8>)
  40a392:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
  40a396:	461a      	mov	r2, r3
  40a398:	4b50      	ldr	r3, [pc, #320]	; (40a4dc <loadSettings+0x4bc>)
  40a39a:	4798      	blx	r3
					break;
  40a39c:	e073      	b.n	40a486 <loadSettings+0x466>
				}
				if(quinticConfig[quinticIndex].expectedNumberOfNods >= MAX_NUMBER_OF_IMUS)
  40a39e:	f107 0320 	add.w	r3, r7, #32
  40a3a2:	681b      	ldr	r3, [r3, #0]
  40a3a4:	4a4e      	ldr	r2, [pc, #312]	; (40a4e0 <loadSettings+0x4c0>)
  40a3a6:	212c      	movs	r1, #44	; 0x2c
  40a3a8:	fb01 f303 	mul.w	r3, r1, r3
  40a3ac:	4413      	add	r3, r2
  40a3ae:	3318      	adds	r3, #24
  40a3b0:	681b      	ldr	r3, [r3, #0]
  40a3b2:	2b09      	cmp	r3, #9
  40a3b4:	dd0b      	ble.n	40a3ce <loadSettings+0x3ae>
				{
					printf("failed to assign IMU%d to quintic %d: too many IMUs",imuId,quinticIndex);
  40a3b6:	f107 031c 	add.w	r3, r7, #28
  40a3ba:	681a      	ldr	r2, [r3, #0]
  40a3bc:	f107 0320 	add.w	r3, r7, #32
  40a3c0:	681b      	ldr	r3, [r3, #0]
  40a3c2:	4848      	ldr	r0, [pc, #288]	; (40a4e4 <loadSettings+0x4c4>)
  40a3c4:	4611      	mov	r1, r2
  40a3c6:	461a      	mov	r2, r3
  40a3c8:	4b44      	ldr	r3, [pc, #272]	; (40a4dc <loadSettings+0x4bc>)
  40a3ca:	4798      	blx	r3
					break;
  40a3cc:	e05b      	b.n	40a486 <loadSettings+0x466>
				}
				quinticConfig[quinticIndex].imuArray[quinticConfig[quinticIndex].expectedNumberOfNods++] = &imuConfig[imuId]; 
  40a3ce:	f107 0320 	add.w	r3, r7, #32
  40a3d2:	681a      	ldr	r2, [r3, #0]
  40a3d4:	f107 0320 	add.w	r3, r7, #32
  40a3d8:	681b      	ldr	r3, [r3, #0]
  40a3da:	4841      	ldr	r0, [pc, #260]	; (40a4e0 <loadSettings+0x4c0>)
  40a3dc:	212c      	movs	r1, #44	; 0x2c
  40a3de:	fb01 f103 	mul.w	r1, r1, r3
  40a3e2:	4401      	add	r1, r0
  40a3e4:	3118      	adds	r1, #24
  40a3e6:	6809      	ldr	r1, [r1, #0]
  40a3e8:	1c48      	adds	r0, r1, #1
  40a3ea:	4c3d      	ldr	r4, [pc, #244]	; (40a4e0 <loadSettings+0x4c0>)
  40a3ec:	252c      	movs	r5, #44	; 0x2c
  40a3ee:	fb05 f303 	mul.w	r3, r5, r3
  40a3f2:	4423      	add	r3, r4
  40a3f4:	3318      	adds	r3, #24
  40a3f6:	6018      	str	r0, [r3, #0]
  40a3f8:	f107 031c 	add.w	r3, r7, #28
  40a3fc:	6818      	ldr	r0, [r3, #0]
  40a3fe:	4603      	mov	r3, r0
  40a400:	00db      	lsls	r3, r3, #3
  40a402:	1a1b      	subs	r3, r3, r0
  40a404:	00db      	lsls	r3, r3, #3
  40a406:	4831      	ldr	r0, [pc, #196]	; (40a4cc <loadSettings+0x4ac>)
  40a408:	181c      	adds	r4, r3, r0
  40a40a:	4835      	ldr	r0, [pc, #212]	; (40a4e0 <loadSettings+0x4c0>)
  40a40c:	4613      	mov	r3, r2
  40a40e:	009b      	lsls	r3, r3, #2
  40a410:	4413      	add	r3, r2
  40a412:	005b      	lsls	r3, r3, #1
  40a414:	4413      	add	r3, r2
  40a416:	440b      	add	r3, r1
  40a418:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			}
			printf("loaded settings for IMU %d on Q%d, %s",imuConfig[imuId].imuId,quinticIndex, imuConfig[imuId].macAddress);
  40a41c:	f107 031c 	add.w	r3, r7, #28
  40a420:	681a      	ldr	r2, [r3, #0]
  40a422:	492a      	ldr	r1, [pc, #168]	; (40a4cc <loadSettings+0x4ac>)
  40a424:	4613      	mov	r3, r2
  40a426:	00db      	lsls	r3, r3, #3
  40a428:	1a9b      	subs	r3, r3, r2
  40a42a:	00db      	lsls	r3, r3, #3
  40a42c:	440b      	add	r3, r1
  40a42e:	6819      	ldr	r1, [r3, #0]
  40a430:	f107 0320 	add.w	r3, r7, #32
  40a434:	681c      	ldr	r4, [r3, #0]
  40a436:	f107 031c 	add.w	r3, r7, #28
  40a43a:	681a      	ldr	r2, [r3, #0]
  40a43c:	4613      	mov	r3, r2
  40a43e:	00db      	lsls	r3, r3, #3
  40a440:	1a9b      	subs	r3, r3, r2
  40a442:	00db      	lsls	r3, r3, #3
  40a444:	4a21      	ldr	r2, [pc, #132]	; (40a4cc <loadSettings+0x4ac>)
  40a446:	4413      	add	r3, r2
  40a448:	3304      	adds	r3, #4
  40a44a:	4827      	ldr	r0, [pc, #156]	; (40a4e8 <loadSettings+0x4c8>)
  40a44c:	4622      	mov	r2, r4
  40a44e:	4c23      	ldr	r4, [pc, #140]	; (40a4dc <loadSettings+0x4bc>)
  40a450:	47a0      	blx	r4
			bufPtr += strlen(line); 
  40a452:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40a456:	4618      	mov	r0, r3
  40a458:	4b24      	ldr	r3, [pc, #144]	; (40a4ec <loadSettings+0x4cc>)
  40a45a:	4798      	blx	r3
  40a45c:	4603      	mov	r3, r0
  40a45e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
  40a462:	4413      	add	r3, r2
  40a464:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	quinticConfig[2].expectedNumberOfNods = 0;	
	int i = 0; 
	int quinticIndex = 0; 
	int imuId = 0;
	char tempMACAddress[20] = {0}; 
	for(i = 0; i < NumberOfNods; i++)
  40a468:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
  40a46c:	3301      	adds	r3, #1
  40a46e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  40a472:	e000      	b.n	40a476 <loadSettings+0x456>
			printf("loaded settings for IMU %d on Q%d, %s",imuConfig[imuId].imuId,quinticIndex, imuConfig[imuId].macAddress);
			bufPtr += strlen(line); 
		}
		else
		{
			break; 
  40a474:	e007      	b.n	40a486 <loadSettings+0x466>
	quinticConfig[2].expectedNumberOfNods = 0;	
	int i = 0; 
	int quinticIndex = 0; 
	int imuId = 0;
	char tempMACAddress[20] = {0}; 
	for(i = 0; i < NumberOfNods; i++)
  40a476:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40a47a:	681b      	ldr	r3, [r3, #0]
  40a47c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
  40a480:	429a      	cmp	r2, r3
  40a482:	f6ff aed7 	blt.w	40a234 <loadSettings+0x214>
		else
		{
			break; 
		}		
	}	
	printf("Closing the file\r\n");
  40a486:	481a      	ldr	r0, [pc, #104]	; (40a4f0 <loadSettings+0x4d0>)
  40a488:	4b14      	ldr	r3, [pc, #80]	; (40a4dc <loadSettings+0x4bc>)
  40a48a:	4798      	blx	r3
	DebugLogBufPrint("Closing the file\r\n");
  40a48c:	4818      	ldr	r0, [pc, #96]	; (40a4f0 <loadSettings+0x4d0>)
  40a48e:	4b19      	ldr	r3, [pc, #100]	; (40a4f4 <loadSettings+0x4d4>)
  40a490:	4798      	blx	r3
	res = f_close(&configFileObj);
  40a492:	4819      	ldr	r0, [pc, #100]	; (40a4f8 <loadSettings+0x4d8>)
  40a494:	4b19      	ldr	r3, [pc, #100]	; (40a4fc <loadSettings+0x4dc>)
  40a496:	4798      	blx	r3
  40a498:	4603      	mov	r3, r0
  40a49a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	if (res != FR_OK)
  40a49e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
  40a4a2:	2b00      	cmp	r3, #0
  40a4a4:	d007      	beq.n	40a4b6 <loadSettings+0x496>
	{		
		printf("Error: Cannot Open file\r\n");
  40a4a6:	4816      	ldr	r0, [pc, #88]	; (40a500 <loadSettings+0x4e0>)
  40a4a8:	4b0c      	ldr	r3, [pc, #48]	; (40a4dc <loadSettings+0x4bc>)
  40a4aa:	4798      	blx	r3
		DebugLogBufPrint("Error: Cannot Open file\r\n");
  40a4ac:	4814      	ldr	r0, [pc, #80]	; (40a500 <loadSettings+0x4e0>)
  40a4ae:	4b11      	ldr	r3, [pc, #68]	; (40a4f4 <loadSettings+0x4d4>)
  40a4b0:	4798      	blx	r3
		return STATUS_FAIL;
  40a4b2:	2301      	movs	r3, #1
  40a4b4:	e003      	b.n	40a4be <loadSettings+0x49e>
	}
	brainSettings.isLoaded = 1; 	
  40a4b6:	4b13      	ldr	r3, [pc, #76]	; (40a504 <loadSettings+0x4e4>)
  40a4b8:	2201      	movs	r2, #1
  40a4ba:	601a      	str	r2, [r3, #0]
	return STATUS_PASS; 	
  40a4bc:	2300      	movs	r3, #0
	
}
  40a4be:	4618      	mov	r0, r3
  40a4c0:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
  40a4c4:	46bd      	mov	sp, r7
  40a4c6:	bdb0      	pop	{r4, r5, r7, pc}
  40a4c8:	20001d9e 	.word	0x20001d9e
  40a4cc:	200000b0 	.word	0x200000b0
  40a4d0:	00418dc0 	.word	0x00418dc0
  40a4d4:	0040f361 	.word	0x0040f361
  40a4d8:	00418dc8 	.word	0x00418dc8
  40a4dc:	0040eadd 	.word	0x0040eadd
  40a4e0:	200002e0 	.word	0x200002e0
  40a4e4:	00418df0 	.word	0x00418df0
  40a4e8:	00418e24 	.word	0x00418e24
  40a4ec:	0040f819 	.word	0x0040f819
  40a4f0:	00418e4c 	.word	0x00418e4c
  40a4f4:	0040a64d 	.word	0x0040a64d
  40a4f8:	20001b6c 	.word	0x20001b6c
  40a4fc:	004076ad 	.word	0x004076ad
  40a500:	00418d18 	.word	0x00418d18
  40a504:	20001b30 	.word	0x20001b30

0040a508 <getLineFromBuf>:
/**
 * getLineFromBuf(char* bufPtr, char* resp, size_t respSize)
 * @brief Get one line from the buffer
 */
status_t getLineFromBuf(char* bufPtr, char* resp, size_t respSize)
{
  40a508:	b580      	push	{r7, lr}
  40a50a:	b088      	sub	sp, #32
  40a50c:	af00      	add	r7, sp, #0
  40a50e:	60f8      	str	r0, [r7, #12]
  40a510:	60b9      	str	r1, [r7, #8]
  40a512:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_FAIL; 
  40a514:	2301      	movs	r3, #1
  40a516:	77fb      	strb	r3, [r7, #31]
	int bufLen = strlen(bufPtr); 
  40a518:	68f8      	ldr	r0, [r7, #12]
  40a51a:	4b1e      	ldr	r3, [pc, #120]	; (40a594 <getLineFromBuf+0x8c>)
  40a51c:	4798      	blx	r3
  40a51e:	4603      	mov	r3, r0
  40a520:	617b      	str	r3, [r7, #20]
	int i = 0;
  40a522:	2300      	movs	r3, #0
  40a524:	61bb      	str	r3, [r7, #24]
	if(bufLen == 0)
  40a526:	697b      	ldr	r3, [r7, #20]
  40a528:	2b00      	cmp	r3, #0
  40a52a:	d101      	bne.n	40a530 <getLineFromBuf+0x28>
	{
		return STATUS_FAIL; 
  40a52c:	2301      	movs	r3, #1
  40a52e:	e02d      	b.n	40a58c <getLineFromBuf+0x84>
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  40a530:	2300      	movs	r3, #0
  40a532:	61bb      	str	r3, [r7, #24]
  40a534:	e019      	b.n	40a56a <getLineFromBuf+0x62>
	{
		resp[i] = bufPtr[i]; 
  40a536:	69bb      	ldr	r3, [r7, #24]
  40a538:	68ba      	ldr	r2, [r7, #8]
  40a53a:	4413      	add	r3, r2
  40a53c:	69ba      	ldr	r2, [r7, #24]
  40a53e:	68f9      	ldr	r1, [r7, #12]
  40a540:	440a      	add	r2, r1
  40a542:	7812      	ldrb	r2, [r2, #0]
  40a544:	701a      	strb	r2, [r3, #0]
		if(resp[i] == '\n')
  40a546:	69bb      	ldr	r3, [r7, #24]
  40a548:	68ba      	ldr	r2, [r7, #8]
  40a54a:	4413      	add	r3, r2
  40a54c:	781b      	ldrb	r3, [r3, #0]
  40a54e:	2b0a      	cmp	r3, #10
  40a550:	d108      	bne.n	40a564 <getLineFromBuf+0x5c>
		{
			result = STATUS_PASS;
  40a552:	2300      	movs	r3, #0
  40a554:	77fb      	strb	r3, [r7, #31]
			resp[i+1] = 0; //terminate the string! 
  40a556:	69bb      	ldr	r3, [r7, #24]
  40a558:	3301      	adds	r3, #1
  40a55a:	68ba      	ldr	r2, [r7, #8]
  40a55c:	4413      	add	r3, r2
  40a55e:	2200      	movs	r2, #0
  40a560:	701a      	strb	r2, [r3, #0]
			break; 			
  40a562:	e00a      	b.n	40a57a <getLineFromBuf+0x72>
	int i = 0;
	if(bufLen == 0)
	{
		return STATUS_FAIL; 
	}
	for(i = 0; i < bufLen && i<respSize; i++)
  40a564:	69bb      	ldr	r3, [r7, #24]
  40a566:	3301      	adds	r3, #1
  40a568:	61bb      	str	r3, [r7, #24]
  40a56a:	69ba      	ldr	r2, [r7, #24]
  40a56c:	697b      	ldr	r3, [r7, #20]
  40a56e:	429a      	cmp	r2, r3
  40a570:	da03      	bge.n	40a57a <getLineFromBuf+0x72>
  40a572:	69ba      	ldr	r2, [r7, #24]
  40a574:	687b      	ldr	r3, [r7, #4]
  40a576:	429a      	cmp	r2, r3
  40a578:	d3dd      	bcc.n	40a536 <getLineFromBuf+0x2e>
			result = STATUS_PASS;
			resp[i+1] = 0; //terminate the string! 
			break; 			
		}		
	}
	if(result == STATUS_PASS)
  40a57a:	7ffb      	ldrb	r3, [r7, #31]
  40a57c:	2b00      	cmp	r3, #0
  40a57e:	d104      	bne.n	40a58a <getLineFromBuf+0x82>
	{
		bufPtr += i+1; 
  40a580:	69bb      	ldr	r3, [r7, #24]
  40a582:	3301      	adds	r3, #1
  40a584:	68fa      	ldr	r2, [r7, #12]
  40a586:	4413      	add	r3, r2
  40a588:	60fb      	str	r3, [r7, #12]
	}
	return result; 
  40a58a:	7ffb      	ldrb	r3, [r7, #31]
}
  40a58c:	4618      	mov	r0, r3
  40a58e:	3720      	adds	r7, #32
  40a590:	46bd      	mov	sp, r7
  40a592:	bd80      	pop	{r7, pc}
  40a594:	0040f819 	.word	0x0040f819

0040a598 <rotr32>:
/**
 * rotr32 (uint8_t value, unsigned int count)
 * @brief Circular rotate right
 */
uint8_t rotr32 (uint8_t value, unsigned int count)
{
  40a598:	b480      	push	{r7}
  40a59a:	b085      	sub	sp, #20
  40a59c:	af00      	add	r7, sp, #0
  40a59e:	4603      	mov	r3, r0
  40a5a0:	6039      	str	r1, [r7, #0]
  40a5a2:	71fb      	strb	r3, [r7, #7]
	const unsigned int mask = (CHAR_BIT*sizeof(value)-1);
  40a5a4:	2307      	movs	r3, #7
  40a5a6:	60fb      	str	r3, [r7, #12]
	count &= mask;
  40a5a8:	683a      	ldr	r2, [r7, #0]
  40a5aa:	68fb      	ldr	r3, [r7, #12]
  40a5ac:	4013      	ands	r3, r2
  40a5ae:	603b      	str	r3, [r7, #0]
	return (value>>count) | (value<<( (-count) & mask ));
  40a5b0:	79fa      	ldrb	r2, [r7, #7]
  40a5b2:	683b      	ldr	r3, [r7, #0]
  40a5b4:	fa42 f303 	asr.w	r3, r2, r3
  40a5b8:	b2da      	uxtb	r2, r3
  40a5ba:	79f9      	ldrb	r1, [r7, #7]
  40a5bc:	683b      	ldr	r3, [r7, #0]
  40a5be:	4258      	negs	r0, r3
  40a5c0:	68fb      	ldr	r3, [r7, #12]
  40a5c2:	4003      	ands	r3, r0
  40a5c4:	fa01 f303 	lsl.w	r3, r1, r3
  40a5c8:	b2db      	uxtb	r3, r3
  40a5ca:	4313      	orrs	r3, r2
  40a5cc:	b2db      	uxtb	r3, r3
  40a5ce:	b2db      	uxtb	r3, r3
}
  40a5d0:	4618      	mov	r0, r3
  40a5d2:	3714      	adds	r7, #20
  40a5d4:	46bd      	mov	sp, r7
  40a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a5da:	4770      	bx	lr

0040a5dc <decryptBuf>:
/**
 * decryptBuf(uint8_t* buffer, uint16_t length)
 * @brief Decrypt the input buffer and save its updated contents
 */
void decryptBuf(uint8_t* buffer, uint16_t length)
{
  40a5dc:	b590      	push	{r4, r7, lr}
  40a5de:	b085      	sub	sp, #20
  40a5e0:	af00      	add	r7, sp, #0
  40a5e2:	6078      	str	r0, [r7, #4]
  40a5e4:	460b      	mov	r3, r1
  40a5e6:	807b      	strh	r3, [r7, #2]
	uint8_t shift;
	//decryption part
	for (int i = 0; i < length; i++)
  40a5e8:	2300      	movs	r3, #0
  40a5ea:	60bb      	str	r3, [r7, #8]
  40a5ec:	e023      	b.n	40a636 <decryptBuf+0x5a>
	{
		shift = i % 7;
  40a5ee:	68b9      	ldr	r1, [r7, #8]
  40a5f0:	4b14      	ldr	r3, [pc, #80]	; (40a644 <decryptBuf+0x68>)
  40a5f2:	fb81 2303 	smull	r2, r3, r1, r3
  40a5f6:	440b      	add	r3, r1
  40a5f8:	109a      	asrs	r2, r3, #2
  40a5fa:	17cb      	asrs	r3, r1, #31
  40a5fc:	1ad2      	subs	r2, r2, r3
  40a5fe:	4613      	mov	r3, r2
  40a600:	00db      	lsls	r3, r3, #3
  40a602:	1a9b      	subs	r3, r3, r2
  40a604:	1aca      	subs	r2, r1, r3
  40a606:	4613      	mov	r3, r2
  40a608:	73fb      	strb	r3, [r7, #15]
		if (shift == 0)
  40a60a:	7bfb      	ldrb	r3, [r7, #15]
  40a60c:	2b00      	cmp	r3, #0
  40a60e:	d101      	bne.n	40a614 <decryptBuf+0x38>
		{
			shift = 3;
  40a610:	2303      	movs	r3, #3
  40a612:	73fb      	strb	r3, [r7, #15]
		}
		buffer[i] = rotr32(buffer[i], shift);
  40a614:	68bb      	ldr	r3, [r7, #8]
  40a616:	687a      	ldr	r2, [r7, #4]
  40a618:	18d4      	adds	r4, r2, r3
  40a61a:	68bb      	ldr	r3, [r7, #8]
  40a61c:	687a      	ldr	r2, [r7, #4]
  40a61e:	4413      	add	r3, r2
  40a620:	781a      	ldrb	r2, [r3, #0]
  40a622:	7bfb      	ldrb	r3, [r7, #15]
  40a624:	4610      	mov	r0, r2
  40a626:	4619      	mov	r1, r3
  40a628:	4b07      	ldr	r3, [pc, #28]	; (40a648 <decryptBuf+0x6c>)
  40a62a:	4798      	blx	r3
  40a62c:	4603      	mov	r3, r0
  40a62e:	7023      	strb	r3, [r4, #0]
 */
void decryptBuf(uint8_t* buffer, uint16_t length)
{
	uint8_t shift;
	//decryption part
	for (int i = 0; i < length; i++)
  40a630:	68bb      	ldr	r3, [r7, #8]
  40a632:	3301      	adds	r3, #1
  40a634:	60bb      	str	r3, [r7, #8]
  40a636:	887a      	ldrh	r2, [r7, #2]
  40a638:	68bb      	ldr	r3, [r7, #8]
  40a63a:	429a      	cmp	r2, r3
  40a63c:	dcd7      	bgt.n	40a5ee <decryptBuf+0x12>
			shift = 3;
		}
		buffer[i] = rotr32(buffer[i], shift);
	}
	//printf("Decrypted string:\r\n%s\r\n", buffer);	//Debug prints
}
  40a63e:	3714      	adds	r7, #20
  40a640:	46bd      	mov	sp, r7
  40a642:	bd90      	pop	{r4, r7, pc}
  40a644:	92492493 	.word	0x92492493
  40a648:	0040a599 	.word	0x0040a599

0040a64c <DebugLogBufPrint>:

/**
 * \brief This function prints the input string to a buffer which is later stored in SD Card
 */
void DebugLogBufPrint(char* InputString)
{
  40a64c:	b590      	push	{r4, r7, lr}
  40a64e:	b085      	sub	sp, #20
  40a650:	af02      	add	r7, sp, #8
  40a652:	6078      	str	r0, [r7, #4]
	sgSDWriteLockBit = false;
  40a654:	4b24      	ldr	r3, [pc, #144]	; (40a6e8 <DebugLogBufPrint+0x9c>)
  40a656:	2200      	movs	r2, #0
  40a658:	701a      	strb	r2, [r3, #0]
	if (DebugLogSemaphore != NULL)		//Check if Semaphore is defined
  40a65a:	4b24      	ldr	r3, [pc, #144]	; (40a6ec <DebugLogBufPrint+0xa0>)
  40a65c:	681b      	ldr	r3, [r3, #0]
  40a65e:	2b00      	cmp	r3, #0
  40a660:	d03e      	beq.n	40a6e0 <DebugLogBufPrint+0x94>
	{
		if ((xSemaphoreTake(DebugLogSemaphore, (portTickType) 1000) == pdTRUE) )		//Semaphore available
  40a662:	4b22      	ldr	r3, [pc, #136]	; (40a6ec <DebugLogBufPrint+0xa0>)
  40a664:	681b      	ldr	r3, [r3, #0]
  40a666:	4618      	mov	r0, r3
  40a668:	2100      	movs	r1, #0
  40a66a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40a66e:	2300      	movs	r3, #0
  40a670:	4c1f      	ldr	r4, [pc, #124]	; (40a6f0 <DebugLogBufPrint+0xa4>)
  40a672:	47a0      	blx	r4
  40a674:	4603      	mov	r3, r0
  40a676:	2b01      	cmp	r3, #1
  40a678:	d12f      	bne.n	40a6da <DebugLogBufPrint+0x8e>
		{
			//size = strlen(InputString);
			//memcpy(&(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]), InputString, size);	//Store the input String to the defined DebugLog buffer
			//printf("%s", &(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]));		//Debug Print function
			//DebugLog.DebugLogBufHead += size;
			size = snprintf(&(DebugLog.DebugLogBuf[DebugLog.DebugLogBufHead]), (DATA_SIZE - DebugLog.DebugLogBufHead), "%d: %s", sgSysTickCount, InputString);
  40a67a:	4b1e      	ldr	r3, [pc, #120]	; (40a6f4 <DebugLogBufPrint+0xa8>)
  40a67c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  40a680:	4b1c      	ldr	r3, [pc, #112]	; (40a6f4 <DebugLogBufPrint+0xa8>)
  40a682:	18d1      	adds	r1, r2, r3
  40a684:	4b1b      	ldr	r3, [pc, #108]	; (40a6f4 <DebugLogBufPrint+0xa8>)
  40a686:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  40a68a:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
  40a68e:	4b1a      	ldr	r3, [pc, #104]	; (40a6f8 <DebugLogBufPrint+0xac>)
  40a690:	681b      	ldr	r3, [r3, #0]
  40a692:	6878      	ldr	r0, [r7, #4]
  40a694:	9000      	str	r0, [sp, #0]
  40a696:	4608      	mov	r0, r1
  40a698:	4611      	mov	r1, r2
  40a69a:	4a18      	ldr	r2, [pc, #96]	; (40a6fc <DebugLogBufPrint+0xb0>)
  40a69c:	4c18      	ldr	r4, [pc, #96]	; (40a700 <DebugLogBufPrint+0xb4>)
  40a69e:	47a0      	blx	r4
  40a6a0:	4602      	mov	r2, r0
  40a6a2:	4b18      	ldr	r3, [pc, #96]	; (40a704 <DebugLogBufPrint+0xb8>)
  40a6a4:	601a      	str	r2, [r3, #0]
			DebugLog.DebugLogBufHead += size;
  40a6a6:	4b13      	ldr	r3, [pc, #76]	; (40a6f4 <DebugLogBufPrint+0xa8>)
  40a6a8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  40a6ac:	4b15      	ldr	r3, [pc, #84]	; (40a704 <DebugLogBufPrint+0xb8>)
  40a6ae:	681b      	ldr	r3, [r3, #0]
  40a6b0:	441a      	add	r2, r3
  40a6b2:	4b10      	ldr	r3, [pc, #64]	; (40a6f4 <DebugLogBufPrint+0xa8>)
  40a6b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			InputString = 0;	//Clear the variable to ensure no duplication
  40a6b8:	2300      	movs	r3, #0
  40a6ba:	607b      	str	r3, [r7, #4]
			if (DebugLog.DebugLogBufHead >= DATA_SIZE)	//Reset the Head to the beginning of array
			{
				//DebugLog.DebugLogBufHead = 0;
			}
			
			if(xSemaphoreGive(DebugLogSemaphore) != pdTRUE)
  40a6bc:	4b0b      	ldr	r3, [pc, #44]	; (40a6ec <DebugLogBufPrint+0xa0>)
  40a6be:	681b      	ldr	r3, [r3, #0]
  40a6c0:	4618      	mov	r0, r3
  40a6c2:	2100      	movs	r1, #0
  40a6c4:	2200      	movs	r2, #0
  40a6c6:	2300      	movs	r3, #0
  40a6c8:	4c0f      	ldr	r4, [pc, #60]	; (40a708 <DebugLogBufPrint+0xbc>)
  40a6ca:	47a0      	blx	r4
  40a6cc:	4603      	mov	r3, r0
  40a6ce:	2b01      	cmp	r3, #1
  40a6d0:	d006      	beq.n	40a6e0 <DebugLogBufPrint+0x94>
			{
				printf("Semaphore not released\r\n");
  40a6d2:	480e      	ldr	r0, [pc, #56]	; (40a70c <DebugLogBufPrint+0xc0>)
  40a6d4:	4b0e      	ldr	r3, [pc, #56]	; (40a710 <DebugLogBufPrint+0xc4>)
  40a6d6:	4798      	blx	r3
  40a6d8:	e002      	b.n	40a6e0 <DebugLogBufPrint+0x94>
			}
		}
		else	//Semaphore unavailable
		{
			printf("Semaphore Unavailable to Debug Buffer function\r\n");			
  40a6da:	480e      	ldr	r0, [pc, #56]	; (40a714 <DebugLogBufPrint+0xc8>)
  40a6dc:	4b0c      	ldr	r3, [pc, #48]	; (40a710 <DebugLogBufPrint+0xc4>)
  40a6de:	4798      	blx	r3
		}
	}
}
  40a6e0:	370c      	adds	r7, #12
  40a6e2:	46bd      	mov	sp, r7
  40a6e4:	bd90      	pop	{r4, r7, pc}
  40a6e6:	bf00      	nop
  40a6e8:	20000374 	.word	0x20000374
  40a6ec:	200021c8 	.word	0x200021c8
  40a6f0:	004081dd 	.word	0x004081dd
  40a6f4:	200021d0 	.word	0x200021d0
  40a6f8:	20001f3c 	.word	0x20001f3c
  40a6fc:	00418e9c 	.word	0x00418e9c
  40a700:	0040f361 	.word	0x0040f361
  40a704:	20001d94 	.word	0x20001d94
  40a708:	00408019 	.word	0x00408019
  40a70c:	00418ea4 	.word	0x00418ea4
  40a710:	0040eadd 	.word	0x0040eadd
  40a714:	00418ec0 	.word	0x00418ec0

0040a718 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40a718:	b480      	push	{r7}
  40a71a:	b083      	sub	sp, #12
  40a71c:	af00      	add	r7, sp, #0
  40a71e:	4603      	mov	r3, r0
  40a720:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40a722:	4b08      	ldr	r3, [pc, #32]	; (40a744 <NVIC_EnableIRQ+0x2c>)
  40a724:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40a728:	0952      	lsrs	r2, r2, #5
  40a72a:	79f9      	ldrb	r1, [r7, #7]
  40a72c:	f001 011f 	and.w	r1, r1, #31
  40a730:	2001      	movs	r0, #1
  40a732:	fa00 f101 	lsl.w	r1, r0, r1
  40a736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40a73a:	370c      	adds	r7, #12
  40a73c:	46bd      	mov	sp, r7
  40a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a742:	4770      	bx	lr
  40a744:	e000e100 	.word	0xe000e100

0040a748 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40a748:	b480      	push	{r7}
  40a74a:	b089      	sub	sp, #36	; 0x24
  40a74c:	af00      	add	r7, sp, #0
  40a74e:	6078      	str	r0, [r7, #4]
  40a750:	687b      	ldr	r3, [r7, #4]
  40a752:	61fb      	str	r3, [r7, #28]
  40a754:	69fb      	ldr	r3, [r7, #28]
  40a756:	61bb      	str	r3, [r7, #24]
  40a758:	69bb      	ldr	r3, [r7, #24]
  40a75a:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40a75c:	697b      	ldr	r3, [r7, #20]
  40a75e:	095b      	lsrs	r3, r3, #5
  40a760:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40a762:	693b      	ldr	r3, [r7, #16]
  40a764:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40a768:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40a76c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40a76e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40a770:	69fb      	ldr	r3, [r7, #28]
  40a772:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40a774:	68fb      	ldr	r3, [r7, #12]
  40a776:	f003 031f 	and.w	r3, r3, #31
  40a77a:	2101      	movs	r1, #1
  40a77c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40a780:	4013      	ands	r3, r2
  40a782:	2b00      	cmp	r3, #0
  40a784:	bf0c      	ite	eq
  40a786:	2300      	moveq	r3, #0
  40a788:	2301      	movne	r3, #1
  40a78a:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  40a78c:	4618      	mov	r0, r3
  40a78e:	3724      	adds	r7, #36	; 0x24
  40a790:	46bd      	mov	sp, r7
  40a792:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a796:	4770      	bx	lr

0040a798 <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  40a798:	b580      	push	{r7, lr}
  40a79a:	b084      	sub	sp, #16
  40a79c:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40a79e:	2300      	movs	r3, #0
  40a7a0:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  40a7a2:	2311      	movs	r3, #17
  40a7a4:	607b      	str	r3, [r7, #4]
	int i = 0; 
  40a7a6:	2300      	movs	r3, #0
  40a7a8:	60bb      	str	r3, [r7, #8]
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;
  40a7aa:	4b14      	ldr	r3, [pc, #80]	; (40a7fc <drv_gpio_initializeAll+0x64>)
  40a7ac:	4a13      	ldr	r2, [pc, #76]	; (40a7fc <drv_gpio_initializeAll+0x64>)
  40a7ae:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
  40a7b2:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  40a7b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	
	for(i = 0; i < numGpio ; i++)
  40a7ba:	2300      	movs	r3, #0
  40a7bc:	60bb      	str	r3, [r7, #8]
  40a7be:	e014      	b.n	40a7ea <drv_gpio_initializeAll+0x52>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  40a7c0:	68bb      	ldr	r3, [r7, #8]
  40a7c2:	011a      	lsls	r2, r3, #4
  40a7c4:	4b0e      	ldr	r3, [pc, #56]	; (40a800 <drv_gpio_initializeAll+0x68>)
  40a7c6:	4413      	add	r3, r2
  40a7c8:	4618      	mov	r0, r3
  40a7ca:	4b0e      	ldr	r3, [pc, #56]	; (40a804 <drv_gpio_initializeAll+0x6c>)
  40a7cc:	4798      	blx	r3
  40a7ce:	4603      	mov	r3, r0
  40a7d0:	2b00      	cmp	r3, #0
  40a7d2:	d007      	beq.n	40a7e4 <drv_gpio_initializeAll+0x4c>
		{
			printf("failed to initialize GPIO at index %d", i);
  40a7d4:	480c      	ldr	r0, [pc, #48]	; (40a808 <drv_gpio_initializeAll+0x70>)
  40a7d6:	68b9      	ldr	r1, [r7, #8]
  40a7d8:	4b0c      	ldr	r3, [pc, #48]	; (40a80c <drv_gpio_initializeAll+0x74>)
  40a7da:	4798      	blx	r3
			status |= STATUS_FAIL;
  40a7dc:	7bfb      	ldrb	r3, [r7, #15]
  40a7de:	f043 0301 	orr.w	r3, r3, #1
  40a7e2:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	//Change the PB10 and PB11 to be configured as GPIO and not USB DDM and DDP 
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11;
	
	for(i = 0; i < numGpio ; i++)
  40a7e4:	68bb      	ldr	r3, [r7, #8]
  40a7e6:	3301      	adds	r3, #1
  40a7e8:	60bb      	str	r3, [r7, #8]
  40a7ea:	68ba      	ldr	r2, [r7, #8]
  40a7ec:	687b      	ldr	r3, [r7, #4]
  40a7ee:	429a      	cmp	r2, r3
  40a7f0:	dbe6      	blt.n	40a7c0 <drv_gpio_initializeAll+0x28>
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST1]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST2]);
	//drv_gpio_config(&gpioConfig[DRV_GPIO_PIN_BLE_RST3]);
	
	
	return status; 
  40a7f2:	7bfb      	ldrb	r3, [r7, #15]
}
  40a7f4:	4618      	mov	r0, r3
  40a7f6:	3710      	adds	r7, #16
  40a7f8:	46bd      	mov	sp, r7
  40a7fa:	bd80      	pop	{r7, pc}
  40a7fc:	400e0200 	.word	0x400e0200
  40a800:	20000378 	.word	0x20000378
  40a804:	0040a875 	.word	0x0040a875
  40a808:	00418f1c 	.word	0x00418f1c
  40a80c:	0040eadd 	.word	0x0040eadd

0040a810 <drv_gpio_ConfigureBLEForProgramming>:
 * @brief Set the GPIO for Rx and Tx of all UARTs to High Impedance
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_ConfigureBLEForProgramming(void)
{
  40a810:	b580      	push	{r7, lr}
  40a812:	b084      	sub	sp, #16
  40a814:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40a816:	2300      	movs	r3, #0
  40a818:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
  40a81a:	2306      	movs	r3, #6
  40a81c:	607b      	str	r3, [r7, #4]
	int i = 0;
  40a81e:	2300      	movs	r3, #0
  40a820:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < numGpio ; i++)
  40a822:	2300      	movs	r3, #0
  40a824:	60bb      	str	r3, [r7, #8]
  40a826:	e014      	b.n	40a852 <drv_gpio_ConfigureBLEForProgramming+0x42>
	{
		if(drv_gpio_config(&programmingGpioConfig[i]) != STATUS_PASS)
  40a828:	68bb      	ldr	r3, [r7, #8]
  40a82a:	011a      	lsls	r2, r3, #4
  40a82c:	4b0d      	ldr	r3, [pc, #52]	; (40a864 <drv_gpio_ConfigureBLEForProgramming+0x54>)
  40a82e:	4413      	add	r3, r2
  40a830:	4618      	mov	r0, r3
  40a832:	4b0d      	ldr	r3, [pc, #52]	; (40a868 <drv_gpio_ConfigureBLEForProgramming+0x58>)
  40a834:	4798      	blx	r3
  40a836:	4603      	mov	r3, r0
  40a838:	2b00      	cmp	r3, #0
  40a83a:	d007      	beq.n	40a84c <drv_gpio_ConfigureBLEForProgramming+0x3c>
		{
			printf("failed to initialize GPIO at index %d", i);
  40a83c:	480b      	ldr	r0, [pc, #44]	; (40a86c <drv_gpio_ConfigureBLEForProgramming+0x5c>)
  40a83e:	68b9      	ldr	r1, [r7, #8]
  40a840:	4b0b      	ldr	r3, [pc, #44]	; (40a870 <drv_gpio_ConfigureBLEForProgramming+0x60>)
  40a842:	4798      	blx	r3
			status |= STATUS_FAIL;
  40a844:	7bfb      	ldrb	r3, [r7, #15]
  40a846:	f043 0301 	orr.w	r3, r3, #1
  40a84a:	73fb      	strb	r3, [r7, #15]
{
	status_t status = STATUS_PASS;
	int numGpio = sizeof(programmingGpioConfig)/sizeof(drv_gpio_config_t);
	int i = 0;

	for(i = 0; i < numGpio ; i++)
  40a84c:	68bb      	ldr	r3, [r7, #8]
  40a84e:	3301      	adds	r3, #1
  40a850:	60bb      	str	r3, [r7, #8]
  40a852:	68ba      	ldr	r2, [r7, #8]
  40a854:	687b      	ldr	r3, [r7, #4]
  40a856:	429a      	cmp	r2, r3
  40a858:	dbe6      	blt.n	40a828 <drv_gpio_ConfigureBLEForProgramming+0x18>
		{
			printf("failed to initialize GPIO at index %d", i);
			status |= STATUS_FAIL;
		}
	}	
	return status;
  40a85a:	7bfb      	ldrb	r3, [r7, #15]
}
  40a85c:	4618      	mov	r0, r3
  40a85e:	3710      	adds	r7, #16
  40a860:	46bd      	mov	sp, r7
  40a862:	bd80      	pop	{r7, pc}
  40a864:	20000488 	.word	0x20000488
  40a868:	0040a875 	.word	0x0040a875
  40a86c:	00418f1c 	.word	0x00418f1c
  40a870:	0040eadd 	.word	0x0040eadd

0040a874 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  40a874:	b590      	push	{r4, r7, lr}
  40a876:	b08b      	sub	sp, #44	; 0x2c
  40a878:	af02      	add	r7, sp, #8
  40a87a:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40a87c:	2300      	movs	r3, #0
  40a87e:	76fb      	strb	r3, [r7, #27]
	unsigned long PinFlag = 0;	
  40a880:	2300      	movs	r3, #0
  40a882:	61fb      	str	r3, [r7, #28]
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  40a884:	687b      	ldr	r3, [r7, #4]
  40a886:	791b      	ldrb	r3, [r3, #4]
  40a888:	2b01      	cmp	r3, #1
  40a88a:	d177      	bne.n	40a97c <drv_gpio_config+0x108>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  40a88c:	69fb      	ldr	r3, [r7, #28]
  40a88e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  40a892:	61fb      	str	r3, [r7, #28]
		if (gpioConfig->pullUpEnabled == TRUE)
  40a894:	687b      	ldr	r3, [r7, #4]
  40a896:	7b1b      	ldrb	r3, [r3, #12]
  40a898:	2b01      	cmp	r3, #1
  40a89a:	d103      	bne.n	40a8a4 <drv_gpio_config+0x30>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  40a89c:	69fb      	ldr	r3, [r7, #28]
  40a89e:	f043 0301 	orr.w	r3, r3, #1
  40a8a2:	61fb      	str	r3, [r7, #28]
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  40a8a4:	687b      	ldr	r3, [r7, #4]
  40a8a6:	7b5b      	ldrb	r3, [r3, #13]
  40a8a8:	2b01      	cmp	r3, #1
  40a8aa:	d103      	bne.n	40a8b4 <drv_gpio_config+0x40>
		{
			PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
  40a8ac:	69fb      	ldr	r3, [r7, #28]
  40a8ae:	f043 0308 	orr.w	r3, r3, #8
  40a8b2:	61fb      	str	r3, [r7, #28]
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  40a8b4:	687b      	ldr	r3, [r7, #4]
  40a8b6:	681b      	ldr	r3, [r3, #0]
  40a8b8:	4618      	mov	r0, r3
  40a8ba:	4b3f      	ldr	r3, [pc, #252]	; (40a9b8 <drv_gpio_config+0x144>)
  40a8bc:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40a8be:	687b      	ldr	r3, [r7, #4]
  40a8c0:	681b      	ldr	r3, [r3, #0]
  40a8c2:	4618      	mov	r0, r3
  40a8c4:	69f9      	ldr	r1, [r7, #28]
  40a8c6:	4b3d      	ldr	r3, [pc, #244]	; (40a9bc <drv_gpio_config+0x148>)
  40a8c8:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  40a8ca:	2300      	movs	r3, #0
  40a8cc:	61fb      	str	r3, [r7, #28]
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  40a8ce:	687b      	ldr	r3, [r7, #4]
  40a8d0:	799b      	ldrb	r3, [r3, #6]
  40a8d2:	2b03      	cmp	r3, #3
  40a8d4:	d81e      	bhi.n	40a914 <drv_gpio_config+0xa0>
  40a8d6:	a201      	add	r2, pc, #4	; (adr r2, 40a8dc <drv_gpio_config+0x68>)
  40a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a8dc:	0040a8ed 	.word	0x0040a8ed
  40a8e0:	0040a8f7 	.word	0x0040a8f7
  40a8e4:	0040a901 	.word	0x0040a901
  40a8e8:	0040a90b 	.word	0x0040a90b
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  40a8ec:	69fb      	ldr	r3, [r7, #28]
  40a8ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40a8f2:	61fb      	str	r3, [r7, #28]
				break;
  40a8f4:	e00f      	b.n	40a916 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40a8f6:	69fb      	ldr	r3, [r7, #28]
  40a8f8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  40a8fc:	61fb      	str	r3, [r7, #28]
				break;
  40a8fe:	e00a      	b.n	40a916 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40a900:	69fb      	ldr	r3, [r7, #28]
  40a902:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40a906:	61fb      	str	r3, [r7, #28]
				break;
  40a908:	e005      	b.n	40a916 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  40a90a:	69fb      	ldr	r3, [r7, #28]
  40a90c:	f043 0310 	orr.w	r3, r3, #16
  40a910:	61fb      	str	r3, [r7, #28]
				break;
  40a912:	e000      	b.n	40a916 <drv_gpio_config+0xa2>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  40a914:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  40a916:	687b      	ldr	r3, [r7, #4]
  40a918:	681b      	ldr	r3, [r3, #0]
  40a91a:	4618      	mov	r0, r3
  40a91c:	4b28      	ldr	r3, [pc, #160]	; (40a9c0 <drv_gpio_config+0x14c>)
  40a91e:	4798      	blx	r3
  40a920:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40a922:	687b      	ldr	r3, [r7, #4]
  40a924:	681b      	ldr	r3, [r3, #0]
  40a926:	4618      	mov	r0, r3
  40a928:	4b26      	ldr	r3, [pc, #152]	; (40a9c4 <drv_gpio_config+0x150>)
  40a92a:	4798      	blx	r3
  40a92c:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  40a92e:	69fb      	ldr	r3, [r7, #28]
  40a930:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40a934:	2b00      	cmp	r3, #0
  40a936:	d018      	beq.n	40a96a <drv_gpio_config+0xf6>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  40a938:	687b      	ldr	r3, [r7, #4]
  40a93a:	681b      	ldr	r3, [r3, #0]
  40a93c:	4618      	mov	r0, r3
  40a93e:	4b22      	ldr	r3, [pc, #136]	; (40a9c8 <drv_gpio_config+0x154>)
  40a940:	4798      	blx	r3
  40a942:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  40a944:	687b      	ldr	r3, [r7, #4]
  40a946:	689b      	ldr	r3, [r3, #8]
  40a948:	9300      	str	r3, [sp, #0]
  40a94a:	6978      	ldr	r0, [r7, #20]
  40a94c:	68f9      	ldr	r1, [r7, #12]
  40a94e:	693a      	ldr	r2, [r7, #16]
  40a950:	69fb      	ldr	r3, [r7, #28]
  40a952:	4c1e      	ldr	r4, [pc, #120]	; (40a9cc <drv_gpio_config+0x158>)
  40a954:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  40a956:	6978      	ldr	r0, [r7, #20]
  40a958:	6939      	ldr	r1, [r7, #16]
  40a95a:	4b1d      	ldr	r3, [pc, #116]	; (40a9d0 <drv_gpio_config+0x15c>)
  40a95c:	4798      	blx	r3
			NVIC_EnableIRQ(PinPio);
  40a95e:	68fb      	ldr	r3, [r7, #12]
  40a960:	b2db      	uxtb	r3, r3
  40a962:	b25b      	sxtb	r3, r3
  40a964:	4618      	mov	r0, r3
  40a966:	4b1b      	ldr	r3, [pc, #108]	; (40a9d4 <drv_gpio_config+0x160>)
  40a968:	4798      	blx	r3
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  40a96a:	697b      	ldr	r3, [r7, #20]
  40a96c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  40a970:	693b      	ldr	r3, [r7, #16]
  40a972:	431a      	orrs	r2, r3
  40a974:	697b      	ldr	r3, [r7, #20]
  40a976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  40a97a:	e017      	b.n	40a9ac <drv_gpio_config+0x138>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  40a97c:	687b      	ldr	r3, [r7, #4]
  40a97e:	795b      	ldrb	r3, [r3, #5]
  40a980:	2b01      	cmp	r3, #1
  40a982:	d104      	bne.n	40a98e <drv_gpio_config+0x11a>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  40a984:	69fb      	ldr	r3, [r7, #28]
  40a986:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  40a98a:	61fb      	str	r3, [r7, #28]
  40a98c:	e003      	b.n	40a996 <drv_gpio_config+0x122>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  40a98e:	69fb      	ldr	r3, [r7, #28]
  40a990:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  40a994:	61fb      	str	r3, [r7, #28]
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  40a996:	687b      	ldr	r3, [r7, #4]
  40a998:	681b      	ldr	r3, [r3, #0]
  40a99a:	4618      	mov	r0, r3
  40a99c:	4b06      	ldr	r3, [pc, #24]	; (40a9b8 <drv_gpio_config+0x144>)
  40a99e:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40a9a0:	687b      	ldr	r3, [r7, #4]
  40a9a2:	681b      	ldr	r3, [r3, #0]
  40a9a4:	4618      	mov	r0, r3
  40a9a6:	69f9      	ldr	r1, [r7, #28]
  40a9a8:	4b04      	ldr	r3, [pc, #16]	; (40a9bc <drv_gpio_config+0x148>)
  40a9aa:	4798      	blx	r3
	}
	
	return status;
  40a9ac:	7efb      	ldrb	r3, [r7, #27]
}
  40a9ae:	4618      	mov	r0, r3
  40a9b0:	3724      	adds	r7, #36	; 0x24
  40a9b2:	46bd      	mov	sp, r7
  40a9b4:	bd90      	pop	{r4, r7, pc}
  40a9b6:	bf00      	nop
  40a9b8:	0040de71 	.word	0x0040de71
  40a9bc:	0040d769 	.word	0x0040d769
  40a9c0:	0040da45 	.word	0x0040da45
  40a9c4:	0040da8d 	.word	0x0040da8d
  40a9c8:	0040da6d 	.word	0x0040da6d
  40a9cc:	0040db7d 	.word	0x0040db7d
  40a9d0:	0040d64d 	.word	0x0040d64d
  40a9d4:	0040a719 	.word	0x0040a719

0040a9d8 <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  40a9d8:	b580      	push	{r7, lr}
  40a9da:	b084      	sub	sp, #16
  40a9dc:	af00      	add	r7, sp, #0
  40a9de:	4602      	mov	r2, r0
  40a9e0:	460b      	mov	r3, r1
  40a9e2:	71fa      	strb	r2, [r7, #7]
  40a9e4:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  40a9e6:	2300      	movs	r3, #0
  40a9e8:	73fb      	strb	r3, [r7, #15]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  40a9ea:	79fb      	ldrb	r3, [r7, #7]
  40a9ec:	4a10      	ldr	r2, [pc, #64]	; (40aa30 <drv_gpio_setPinState+0x58>)
  40a9ee:	011b      	lsls	r3, r3, #4
  40a9f0:	4413      	add	r3, r2
  40a9f2:	791b      	ldrb	r3, [r3, #4]
  40a9f4:	2b00      	cmp	r3, #0
  40a9f6:	d001      	beq.n	40a9fc <drv_gpio_setPinState+0x24>
	{
		return STATUS_FAIL; 
  40a9f8:	2301      	movs	r3, #1
  40a9fa:	e014      	b.n	40aa26 <drv_gpio_setPinState+0x4e>
	}
	if (state == DRV_GPIO_PIN_STATE_HIGH)
  40a9fc:	79bb      	ldrb	r3, [r7, #6]
  40a9fe:	2b01      	cmp	r3, #1
  40aa00:	d108      	bne.n	40aa14 <drv_gpio_setPinState+0x3c>
	{
		pio_set_pin_high(gpioConfig[pin].pinId);
  40aa02:	79fb      	ldrb	r3, [r7, #7]
  40aa04:	4a0a      	ldr	r2, [pc, #40]	; (40aa30 <drv_gpio_setPinState+0x58>)
  40aa06:	011b      	lsls	r3, r3, #4
  40aa08:	4413      	add	r3, r2
  40aa0a:	681b      	ldr	r3, [r3, #0]
  40aa0c:	4618      	mov	r0, r3
  40aa0e:	4b09      	ldr	r3, [pc, #36]	; (40aa34 <drv_gpio_setPinState+0x5c>)
  40aa10:	4798      	blx	r3
  40aa12:	e007      	b.n	40aa24 <drv_gpio_setPinState+0x4c>
	}
	else
	{
		pio_set_pin_low(gpioConfig[pin].pinId);
  40aa14:	79fb      	ldrb	r3, [r7, #7]
  40aa16:	4a06      	ldr	r2, [pc, #24]	; (40aa30 <drv_gpio_setPinState+0x58>)
  40aa18:	011b      	lsls	r3, r3, #4
  40aa1a:	4413      	add	r3, r2
  40aa1c:	681b      	ldr	r3, [r3, #0]
  40aa1e:	4618      	mov	r0, r3
  40aa20:	4b05      	ldr	r3, [pc, #20]	; (40aa38 <drv_gpio_setPinState+0x60>)
  40aa22:	4798      	blx	r3
	}
	return status;
  40aa24:	7bfb      	ldrb	r3, [r7, #15]
}
  40aa26:	4618      	mov	r0, r3
  40aa28:	3710      	adds	r7, #16
  40aa2a:	46bd      	mov	sp, r7
  40aa2c:	bd80      	pop	{r7, pc}
  40aa2e:	bf00      	nop
  40aa30:	20000378 	.word	0x20000378
  40aa34:	0040d6b9 	.word	0x0040d6b9
  40aa38:	0040d6e5 	.word	0x0040d6e5

0040aa3c <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  40aa3c:	b580      	push	{r7, lr}
  40aa3e:	b084      	sub	sp, #16
  40aa40:	af00      	add	r7, sp, #0
  40aa42:	4603      	mov	r3, r0
  40aa44:	6039      	str	r1, [r7, #0]
  40aa46:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40aa48:	2300      	movs	r3, #0
  40aa4a:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  40aa4c:	79fb      	ldrb	r3, [r7, #7]
  40aa4e:	4a0d      	ldr	r2, [pc, #52]	; (40aa84 <drv_gpio_getPinState+0x48>)
  40aa50:	011b      	lsls	r3, r3, #4
  40aa52:	4413      	add	r3, r2
  40aa54:	681b      	ldr	r3, [r3, #0]
  40aa56:	4618      	mov	r0, r3
  40aa58:	4b0b      	ldr	r3, [pc, #44]	; (40aa88 <drv_gpio_getPinState+0x4c>)
  40aa5a:	4798      	blx	r3
  40aa5c:	4603      	mov	r3, r0
  40aa5e:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  40aa60:	7bbb      	ldrb	r3, [r7, #14]
  40aa62:	f083 0301 	eor.w	r3, r3, #1
  40aa66:	b2db      	uxtb	r3, r3
  40aa68:	2b00      	cmp	r3, #0
  40aa6a:	d003      	beq.n	40aa74 <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  40aa6c:	683b      	ldr	r3, [r7, #0]
  40aa6e:	2200      	movs	r2, #0
  40aa70:	701a      	strb	r2, [r3, #0]
  40aa72:	e002      	b.n	40aa7a <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  40aa74:	683b      	ldr	r3, [r7, #0]
  40aa76:	2201      	movs	r2, #1
  40aa78:	701a      	strb	r2, [r3, #0]
	}
	return status;
  40aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
  40aa7c:	4618      	mov	r0, r3
  40aa7e:	3710      	adds	r7, #16
  40aa80:	46bd      	mov	sp, r7
  40aa82:	bd80      	pop	{r7, pc}
  40aa84:	20000378 	.word	0x20000378
  40aa88:	0040a749 	.word	0x0040a749

0040aa8c <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  40aa8c:	b580      	push	{r7, lr}
  40aa8e:	b084      	sub	sp, #16
  40aa90:	af00      	add	r7, sp, #0
  40aa92:	4603      	mov	r3, r0
  40aa94:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40aa96:	2300      	movs	r3, #0
  40aa98:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  40aa9a:	79fb      	ldrb	r3, [r7, #7]
  40aa9c:	4a05      	ldr	r2, [pc, #20]	; (40aab4 <drv_gpio_togglePin+0x28>)
  40aa9e:	011b      	lsls	r3, r3, #4
  40aaa0:	4413      	add	r3, r2
  40aaa2:	681b      	ldr	r3, [r3, #0]
  40aaa4:	4618      	mov	r0, r3
  40aaa6:	4b04      	ldr	r3, [pc, #16]	; (40aab8 <drv_gpio_togglePin+0x2c>)
  40aaa8:	4798      	blx	r3
	return status;
  40aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
  40aaac:	4618      	mov	r0, r3
  40aaae:	3710      	adds	r7, #16
  40aab0:	46bd      	mov	sp, r7
  40aab2:	bd80      	pop	{r7, pc}
  40aab4:	20000378 	.word	0x20000378
  40aab8:	0040d711 	.word	0x0040d711

0040aabc <drv_gpio_config_interrupt>:
 * @brief Set Interrupt Configuration for the requested pin
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt)
{
  40aabc:	b580      	push	{r7, lr}
  40aabe:	b086      	sub	sp, #24
  40aac0:	af00      	add	r7, sp, #0
  40aac2:	4602      	mov	r2, r0
  40aac4:	460b      	mov	r3, r1
  40aac6:	71fa      	strb	r2, [r7, #7]
  40aac8:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  40aaca:	2301      	movs	r3, #1
  40aacc:	75fb      	strb	r3, [r7, #23]
	unsigned long PinFlag;
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  40aace:	79fb      	ldrb	r3, [r7, #7]
  40aad0:	4a18      	ldr	r2, [pc, #96]	; (40ab34 <drv_gpio_config_interrupt+0x78>)
  40aad2:	011b      	lsls	r3, r3, #4
  40aad4:	4413      	add	r3, r2
  40aad6:	681b      	ldr	r3, [r3, #0]
  40aad8:	4618      	mov	r0, r3
  40aada:	4b17      	ldr	r3, [pc, #92]	; (40ab38 <drv_gpio_config_interrupt+0x7c>)
  40aadc:	4798      	blx	r3
  40aade:	60f8      	str	r0, [r7, #12]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  40aae0:	79fb      	ldrb	r3, [r7, #7]
  40aae2:	4a14      	ldr	r2, [pc, #80]	; (40ab34 <drv_gpio_config_interrupt+0x78>)
  40aae4:	011b      	lsls	r3, r3, #4
  40aae6:	4413      	add	r3, r2
  40aae8:	681b      	ldr	r3, [r3, #0]
  40aaea:	4618      	mov	r0, r3
  40aaec:	4b13      	ldr	r3, [pc, #76]	; (40ab3c <drv_gpio_config_interrupt+0x80>)
  40aaee:	4798      	blx	r3
  40aaf0:	60b8      	str	r0, [r7, #8]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  40aaf2:	79bb      	ldrb	r3, [r7, #6]
  40aaf4:	2b00      	cmp	r3, #0
  40aaf6:	d104      	bne.n	40ab02 <drv_gpio_config_interrupt+0x46>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  40aaf8:	2370      	movs	r3, #112	; 0x70
  40aafa:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40aafc:	2300      	movs	r3, #0
  40aafe:	75fb      	strb	r3, [r7, #23]
  40ab00:	e00d      	b.n	40ab1e <drv_gpio_config_interrupt+0x62>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  40ab02:	79bb      	ldrb	r3, [r7, #6]
  40ab04:	2b01      	cmp	r3, #1
  40ab06:	d104      	bne.n	40ab12 <drv_gpio_config_interrupt+0x56>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40ab08:	2350      	movs	r3, #80	; 0x50
  40ab0a:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40ab0c:	2300      	movs	r3, #0
  40ab0e:	75fb      	strb	r3, [r7, #23]
  40ab10:	e005      	b.n	40ab1e <drv_gpio_config_interrupt+0x62>
	}
	else if (pinInt = DRV_GPIO_INTERRUPT_HIGH_LVL)
  40ab12:	2302      	movs	r3, #2
  40ab14:	71bb      	strb	r3, [r7, #6]
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40ab16:	2330      	movs	r3, #48	; 0x30
  40ab18:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  40ab1a:	2300      	movs	r3, #0
  40ab1c:	75fb      	strb	r3, [r7, #23]
	else if (pinInt = DRV_GPIO_INTERRUPT_LOW_LVL)
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
		status = STATUS_PASS;
	}
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  40ab1e:	68f8      	ldr	r0, [r7, #12]
  40ab20:	68b9      	ldr	r1, [r7, #8]
  40ab22:	693a      	ldr	r2, [r7, #16]
  40ab24:	4b06      	ldr	r3, [pc, #24]	; (40ab40 <drv_gpio_config_interrupt+0x84>)
  40ab26:	4798      	blx	r3
	return status;
  40ab28:	7dfb      	ldrb	r3, [r7, #23]
}
  40ab2a:	4618      	mov	r0, r3
  40ab2c:	3718      	adds	r7, #24
  40ab2e:	46bd      	mov	sp, r7
  40ab30:	bd80      	pop	{r7, pc}
  40ab32:	bf00      	nop
  40ab34:	20000378 	.word	0x20000378
  40ab38:	0040da45 	.word	0x0040da45
  40ab3c:	0040da8d 	.word	0x0040da8d
  40ab40:	0040d5e1 	.word	0x0040d5e1

0040ab44 <drv_gpio_check_Int>:
 * @brief Check if Interrupt was generated on a Pin or GPIO input
 * @param drv_gpio_pins_t pin
 * @return gpioSetFlag
 ***********************************************************************************************/
bool drv_gpio_check_Int(drv_gpio_pins_t pin)
{
  40ab44:	b480      	push	{r7}
  40ab46:	b085      	sub	sp, #20
  40ab48:	af00      	add	r7, sp, #0
  40ab4a:	4603      	mov	r3, r0
  40ab4c:	71fb      	strb	r3, [r7, #7]
	bool returnVal;
	returnVal = gpioConfig[pin].gpioSetFlag;
  40ab4e:	79fb      	ldrb	r3, [r7, #7]
  40ab50:	4a09      	ldr	r2, [pc, #36]	; (40ab78 <drv_gpio_check_Int+0x34>)
  40ab52:	011b      	lsls	r3, r3, #4
  40ab54:	4413      	add	r3, r2
  40ab56:	3308      	adds	r3, #8
  40ab58:	799b      	ldrb	r3, [r3, #6]
  40ab5a:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40ab5c:	79fb      	ldrb	r3, [r7, #7]
  40ab5e:	4a06      	ldr	r2, [pc, #24]	; (40ab78 <drv_gpio_check_Int+0x34>)
  40ab60:	011b      	lsls	r3, r3, #4
  40ab62:	4413      	add	r3, r2
  40ab64:	3308      	adds	r3, #8
  40ab66:	2200      	movs	r2, #0
  40ab68:	719a      	strb	r2, [r3, #6]
	return	returnVal;
  40ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
  40ab6c:	4618      	mov	r0, r3
  40ab6e:	3714      	adds	r7, #20
  40ab70:	46bd      	mov	sp, r7
  40ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ab76:	4770      	bx	lr
  40ab78:	20000378 	.word	0x20000378

0040ab7c <drv_gpio_clear_Int>:
 * @brief Clear the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
bool drv_gpio_clear_Int(drv_gpio_pins_t pin)
{
  40ab7c:	b480      	push	{r7}
  40ab7e:	b085      	sub	sp, #20
  40ab80:	af00      	add	r7, sp, #0
  40ab82:	4603      	mov	r3, r0
  40ab84:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40ab86:	2300      	movs	r3, #0
  40ab88:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40ab8a:	79fb      	ldrb	r3, [r7, #7]
  40ab8c:	4a08      	ldr	r2, [pc, #32]	; (40abb0 <drv_gpio_clear_Int+0x34>)
  40ab8e:	011b      	lsls	r3, r3, #4
  40ab90:	4413      	add	r3, r2
  40ab92:	3308      	adds	r3, #8
  40ab94:	2200      	movs	r2, #0
  40ab96:	719a      	strb	r2, [r3, #6]
	return status;
  40ab98:	7bfb      	ldrb	r3, [r7, #15]
  40ab9a:	2b00      	cmp	r3, #0
  40ab9c:	bf0c      	ite	eq
  40ab9e:	2300      	moveq	r3, #0
  40aba0:	2301      	movne	r3, #1
  40aba2:	b2db      	uxtb	r3, r3
}
  40aba4:	4618      	mov	r0, r3
  40aba6:	3714      	adds	r7, #20
  40aba8:	46bd      	mov	sp, r7
  40abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  40abae:	4770      	bx	lr
  40abb0:	20000378 	.word	0x20000378

0040abb4 <drv_gpio_enable_interrupt>:
 * @brief Enable the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_enable_interrupt(drv_gpio_pins_t pin)
{
  40abb4:	b580      	push	{r7, lr}
  40abb6:	b086      	sub	sp, #24
  40abb8:	af00      	add	r7, sp, #0
  40abba:	4603      	mov	r3, r0
  40abbc:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40abbe:	2300      	movs	r3, #0
  40abc0:	75fb      	strb	r3, [r7, #23]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);
  40abc2:	79fb      	ldrb	r3, [r7, #7]
  40abc4:	4a0c      	ldr	r2, [pc, #48]	; (40abf8 <drv_gpio_enable_interrupt+0x44>)
  40abc6:	011b      	lsls	r3, r3, #4
  40abc8:	4413      	add	r3, r2
  40abca:	681b      	ldr	r3, [r3, #0]
  40abcc:	4618      	mov	r0, r3
  40abce:	4b0b      	ldr	r3, [pc, #44]	; (40abfc <drv_gpio_enable_interrupt+0x48>)
  40abd0:	4798      	blx	r3
  40abd2:	6138      	str	r0, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);
  40abd4:	79fb      	ldrb	r3, [r7, #7]
  40abd6:	4a08      	ldr	r2, [pc, #32]	; (40abf8 <drv_gpio_enable_interrupt+0x44>)
  40abd8:	011b      	lsls	r3, r3, #4
  40abda:	4413      	add	r3, r2
  40abdc:	681b      	ldr	r3, [r3, #0]
  40abde:	4618      	mov	r0, r3
  40abe0:	4b07      	ldr	r3, [pc, #28]	; (40ac00 <drv_gpio_enable_interrupt+0x4c>)
  40abe2:	4798      	blx	r3
  40abe4:	60f8      	str	r0, [r7, #12]
	pio_enable_interrupt(p_pio, PinMask);
  40abe6:	68f8      	ldr	r0, [r7, #12]
  40abe8:	6939      	ldr	r1, [r7, #16]
  40abea:	4b06      	ldr	r3, [pc, #24]	; (40ac04 <drv_gpio_enable_interrupt+0x50>)
  40abec:	4798      	blx	r3
	return status;
  40abee:	7dfb      	ldrb	r3, [r7, #23]
}
  40abf0:	4618      	mov	r0, r3
  40abf2:	3718      	adds	r7, #24
  40abf4:	46bd      	mov	sp, r7
  40abf6:	bd80      	pop	{r7, pc}
  40abf8:	20000378 	.word	0x20000378
  40abfc:	0040da8d 	.word	0x0040da8d
  40ac00:	0040da45 	.word	0x0040da45
  40ac04:	0040d64d 	.word	0x0040d64d

0040ac08 <drv_gpio_disable_interrupt_all>:
 * @brief Disable interrupts on every gpio pin of every port
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_disable_interrupt_all(void)
{
  40ac08:	b580      	push	{r7, lr}
  40ac0a:	b082      	sub	sp, #8
  40ac0c:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40ac0e:	2300      	movs	r3, #0
  40ac10:	71fb      	strb	r3, [r7, #7]
	pio_disable_interrupt(PIOA, ALL_INTERRUPT_MASK);
  40ac12:	4807      	ldr	r0, [pc, #28]	; (40ac30 <drv_gpio_disable_interrupt_all+0x28>)
  40ac14:	f04f 31ff 	mov.w	r1, #4294967295
  40ac18:	4b06      	ldr	r3, [pc, #24]	; (40ac34 <drv_gpio_disable_interrupt_all+0x2c>)
  40ac1a:	4798      	blx	r3
	pio_disable_interrupt(PIOB, ALL_INTERRUPT_MASK);
  40ac1c:	4806      	ldr	r0, [pc, #24]	; (40ac38 <drv_gpio_disable_interrupt_all+0x30>)
  40ac1e:	f04f 31ff 	mov.w	r1, #4294967295
  40ac22:	4b04      	ldr	r3, [pc, #16]	; (40ac34 <drv_gpio_disable_interrupt_all+0x2c>)
  40ac24:	4798      	blx	r3
	return status;
  40ac26:	79fb      	ldrb	r3, [r7, #7]
}
  40ac28:	4618      	mov	r0, r3
  40ac2a:	3708      	adds	r7, #8
  40ac2c:	46bd      	mov	sp, r7
  40ac2e:	bd80      	pop	{r7, pc}
  40ac30:	400e0e00 	.word	0x400e0e00
  40ac34:	0040d66d 	.word	0x0040d66d
  40ac38:	400e1000 	.word	0x400e1000

0040ac3c <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  40ac3c:	b580      	push	{r7, lr}
  40ac3e:	b084      	sub	sp, #16
  40ac40:	af00      	add	r7, sp, #0
  40ac42:	6078      	str	r0, [r7, #4]
  40ac44:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PW_SW].pinId);
  40ac46:	4b0d      	ldr	r3, [pc, #52]	; (40ac7c <drv_gpio_int_pw+0x40>)
  40ac48:	681b      	ldr	r3, [r3, #0]
  40ac4a:	4618      	mov	r0, r3
  40ac4c:	4b0c      	ldr	r3, [pc, #48]	; (40ac80 <drv_gpio_int_pw+0x44>)
  40ac4e:	4798      	blx	r3
  40ac50:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40ac52:	480c      	ldr	r0, [pc, #48]	; (40ac84 <drv_gpio_int_pw+0x48>)
  40ac54:	68f9      	ldr	r1, [r7, #12]
  40ac56:	4b0c      	ldr	r3, [pc, #48]	; (40ac88 <drv_gpio_int_pw+0x4c>)
  40ac58:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40ac5a:	4b0a      	ldr	r3, [pc, #40]	; (40ac84 <drv_gpio_int_pw+0x48>)
  40ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40ac5e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40ac60:	68fa      	ldr	r2, [r7, #12]
  40ac62:	683b      	ldr	r3, [r7, #0]
  40ac64:	429a      	cmp	r2, r3
  40ac66:	d102      	bne.n	40ac6e <drv_gpio_int_pw+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_PW_SW].gpioSetFlag = 1;
  40ac68:	4b04      	ldr	r3, [pc, #16]	; (40ac7c <drv_gpio_int_pw+0x40>)
  40ac6a:	2201      	movs	r2, #1
  40ac6c:	739a      	strb	r2, [r3, #14]
	}
	pio_enable_interrupt(PIOA, PinMask);
  40ac6e:	4805      	ldr	r0, [pc, #20]	; (40ac84 <drv_gpio_int_pw+0x48>)
  40ac70:	68f9      	ldr	r1, [r7, #12]
  40ac72:	4b06      	ldr	r3, [pc, #24]	; (40ac8c <drv_gpio_int_pw+0x50>)
  40ac74:	4798      	blx	r3
}
  40ac76:	3710      	adds	r7, #16
  40ac78:	46bd      	mov	sp, r7
  40ac7a:	bd80      	pop	{r7, pc}
  40ac7c:	20000378 	.word	0x20000378
  40ac80:	0040da8d 	.word	0x0040da8d
  40ac84:	400e0e00 	.word	0x400e0e00
  40ac88:	0040d66d 	.word	0x0040d66d
  40ac8c:	0040d64d 	.word	0x0040d64d

0040ac90 <drv_gpio_int_sw1>:
 * @brief Interrupt routine for Action Switch-1
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw1(uint32_t ul_id, uint32_t ul_mask)
{
  40ac90:	b580      	push	{r7, lr}
  40ac92:	b084      	sub	sp, #16
  40ac94:	af00      	add	r7, sp, #0
  40ac96:	6078      	str	r0, [r7, #4]
  40ac98:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW1].pinId);
  40ac9a:	4b0d      	ldr	r3, [pc, #52]	; (40acd0 <drv_gpio_int_sw1+0x40>)
  40ac9c:	691b      	ldr	r3, [r3, #16]
  40ac9e:	4618      	mov	r0, r3
  40aca0:	4b0c      	ldr	r3, [pc, #48]	; (40acd4 <drv_gpio_int_sw1+0x44>)
  40aca2:	4798      	blx	r3
  40aca4:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40aca6:	480c      	ldr	r0, [pc, #48]	; (40acd8 <drv_gpio_int_sw1+0x48>)
  40aca8:	68f9      	ldr	r1, [r7, #12]
  40acaa:	4b0c      	ldr	r3, [pc, #48]	; (40acdc <drv_gpio_int_sw1+0x4c>)
  40acac:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40acae:	4b0a      	ldr	r3, [pc, #40]	; (40acd8 <drv_gpio_int_sw1+0x48>)
  40acb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40acb2:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40acb4:	68fa      	ldr	r2, [r7, #12]
  40acb6:	683b      	ldr	r3, [r7, #0]
  40acb8:	429a      	cmp	r2, r3
  40acba:	d102      	bne.n	40acc2 <drv_gpio_int_sw1+0x32>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW1].gpioSetFlag = 1;
  40acbc:	4b04      	ldr	r3, [pc, #16]	; (40acd0 <drv_gpio_int_sw1+0x40>)
  40acbe:	2201      	movs	r2, #1
  40acc0:	779a      	strb	r2, [r3, #30]
	}
	pio_enable_interrupt(PIOA, PinMask);
  40acc2:	4805      	ldr	r0, [pc, #20]	; (40acd8 <drv_gpio_int_sw1+0x48>)
  40acc4:	68f9      	ldr	r1, [r7, #12]
  40acc6:	4b06      	ldr	r3, [pc, #24]	; (40ace0 <drv_gpio_int_sw1+0x50>)
  40acc8:	4798      	blx	r3
}
  40acca:	3710      	adds	r7, #16
  40accc:	46bd      	mov	sp, r7
  40acce:	bd80      	pop	{r7, pc}
  40acd0:	20000378 	.word	0x20000378
  40acd4:	0040da8d 	.word	0x0040da8d
  40acd8:	400e0e00 	.word	0x400e0e00
  40acdc:	0040d66d 	.word	0x0040d66d
  40ace0:	0040d64d 	.word	0x0040d64d

0040ace4 <drv_gpio_int_sw2>:
 * @brief Interrupt routine for Action Switch-2
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_sw2(uint32_t ul_id, uint32_t ul_mask)
{
  40ace4:	b580      	push	{r7, lr}
  40ace6:	b084      	sub	sp, #16
  40ace8:	af00      	add	r7, sp, #0
  40acea:	6078      	str	r0, [r7, #4]
  40acec:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_AC_SW2].pinId);
  40acee:	4b0e      	ldr	r3, [pc, #56]	; (40ad28 <drv_gpio_int_sw2+0x44>)
  40acf0:	6a1b      	ldr	r3, [r3, #32]
  40acf2:	4618      	mov	r0, r3
  40acf4:	4b0d      	ldr	r3, [pc, #52]	; (40ad2c <drv_gpio_int_sw2+0x48>)
  40acf6:	4798      	blx	r3
  40acf8:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40acfa:	480d      	ldr	r0, [pc, #52]	; (40ad30 <drv_gpio_int_sw2+0x4c>)
  40acfc:	68f9      	ldr	r1, [r7, #12]
  40acfe:	4b0d      	ldr	r3, [pc, #52]	; (40ad34 <drv_gpio_int_sw2+0x50>)
  40ad00:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40ad02:	4b0b      	ldr	r3, [pc, #44]	; (40ad30 <drv_gpio_int_sw2+0x4c>)
  40ad04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40ad06:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40ad08:	68fa      	ldr	r2, [r7, #12]
  40ad0a:	683b      	ldr	r3, [r7, #0]
  40ad0c:	429a      	cmp	r2, r3
  40ad0e:	d103      	bne.n	40ad18 <drv_gpio_int_sw2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_AC_SW2].gpioSetFlag = 1;
  40ad10:	4b05      	ldr	r3, [pc, #20]	; (40ad28 <drv_gpio_int_sw2+0x44>)
  40ad12:	2201      	movs	r2, #1
  40ad14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40ad18:	4805      	ldr	r0, [pc, #20]	; (40ad30 <drv_gpio_int_sw2+0x4c>)
  40ad1a:	68f9      	ldr	r1, [r7, #12]
  40ad1c:	4b06      	ldr	r3, [pc, #24]	; (40ad38 <drv_gpio_int_sw2+0x54>)
  40ad1e:	4798      	blx	r3
}
  40ad20:	3710      	adds	r7, #16
  40ad22:	46bd      	mov	sp, r7
  40ad24:	bd80      	pop	{r7, pc}
  40ad26:	bf00      	nop
  40ad28:	20000378 	.word	0x20000378
  40ad2c:	0040da8d 	.word	0x0040da8d
  40ad30:	400e0e00 	.word	0x400e0e00
  40ad34:	0040d66d 	.word	0x0040d66d
  40ad38:	0040d64d 	.word	0x0040d64d

0040ad3c <drv_gpio_int_oc1>:
 * @brief Interrupt routine for Jack-1 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc1(uint32_t ul_id, uint32_t ul_mask)
{
  40ad3c:	b580      	push	{r7, lr}
  40ad3e:	b084      	sub	sp, #16
  40ad40:	af00      	add	r7, sp, #0
  40ad42:	6078      	str	r0, [r7, #4]
  40ad44:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC1].pinId);
  40ad46:	4b0e      	ldr	r3, [pc, #56]	; (40ad80 <drv_gpio_int_oc1+0x44>)
  40ad48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40ad4a:	4618      	mov	r0, r3
  40ad4c:	4b0d      	ldr	r3, [pc, #52]	; (40ad84 <drv_gpio_int_oc1+0x48>)
  40ad4e:	4798      	blx	r3
  40ad50:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40ad52:	480d      	ldr	r0, [pc, #52]	; (40ad88 <drv_gpio_int_oc1+0x4c>)
  40ad54:	68f9      	ldr	r1, [r7, #12]
  40ad56:	4b0d      	ldr	r3, [pc, #52]	; (40ad8c <drv_gpio_int_oc1+0x50>)
  40ad58:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40ad5a:	4b0b      	ldr	r3, [pc, #44]	; (40ad88 <drv_gpio_int_oc1+0x4c>)
  40ad5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40ad5e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40ad60:	68fa      	ldr	r2, [r7, #12]
  40ad62:	683b      	ldr	r3, [r7, #0]
  40ad64:	429a      	cmp	r2, r3
  40ad66:	d103      	bne.n	40ad70 <drv_gpio_int_oc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC1].gpioSetFlag = 1;
  40ad68:	4b05      	ldr	r3, [pc, #20]	; (40ad80 <drv_gpio_int_oc1+0x44>)
  40ad6a:	2201      	movs	r2, #1
  40ad6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40ad70:	4805      	ldr	r0, [pc, #20]	; (40ad88 <drv_gpio_int_oc1+0x4c>)
  40ad72:	68f9      	ldr	r1, [r7, #12]
  40ad74:	4b06      	ldr	r3, [pc, #24]	; (40ad90 <drv_gpio_int_oc1+0x54>)
  40ad76:	4798      	blx	r3
}
  40ad78:	3710      	adds	r7, #16
  40ad7a:	46bd      	mov	sp, r7
  40ad7c:	bd80      	pop	{r7, pc}
  40ad7e:	bf00      	nop
  40ad80:	20000378 	.word	0x20000378
  40ad84:	0040da8d 	.word	0x0040da8d
  40ad88:	400e0e00 	.word	0x400e0e00
  40ad8c:	0040d66d 	.word	0x0040d66d
  40ad90:	0040d64d 	.word	0x0040d64d

0040ad94 <drv_gpio_int_oc2>:
 * @brief Interrupt routine for Jack-2 Over Current
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_oc2(uint32_t ul_id, uint32_t ul_mask)
{
  40ad94:	b580      	push	{r7, lr}
  40ad96:	b084      	sub	sp, #16
  40ad98:	af00      	add	r7, sp, #0
  40ad9a:	6078      	str	r0, [r7, #4]
  40ad9c:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_OC2].pinId);
  40ad9e:	4b0e      	ldr	r3, [pc, #56]	; (40add8 <drv_gpio_int_oc2+0x44>)
  40ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ada2:	4618      	mov	r0, r3
  40ada4:	4b0d      	ldr	r3, [pc, #52]	; (40addc <drv_gpio_int_oc2+0x48>)
  40ada6:	4798      	blx	r3
  40ada8:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40adaa:	480d      	ldr	r0, [pc, #52]	; (40ade0 <drv_gpio_int_oc2+0x4c>)
  40adac:	68f9      	ldr	r1, [r7, #12]
  40adae:	4b0d      	ldr	r3, [pc, #52]	; (40ade4 <drv_gpio_int_oc2+0x50>)
  40adb0:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40adb2:	4b0b      	ldr	r3, [pc, #44]	; (40ade0 <drv_gpio_int_oc2+0x4c>)
  40adb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40adb6:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40adb8:	68fa      	ldr	r2, [r7, #12]
  40adba:	683b      	ldr	r3, [r7, #0]
  40adbc:	429a      	cmp	r2, r3
  40adbe:	d103      	bne.n	40adc8 <drv_gpio_int_oc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_OC2].gpioSetFlag = 1;
  40adc0:	4b05      	ldr	r3, [pc, #20]	; (40add8 <drv_gpio_int_oc2+0x44>)
  40adc2:	2201      	movs	r2, #1
  40adc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40adc8:	4805      	ldr	r0, [pc, #20]	; (40ade0 <drv_gpio_int_oc2+0x4c>)
  40adca:	68f9      	ldr	r1, [r7, #12]
  40adcc:	4b06      	ldr	r3, [pc, #24]	; (40ade8 <drv_gpio_int_oc2+0x54>)
  40adce:	4798      	blx	r3
}
  40add0:	3710      	adds	r7, #16
  40add2:	46bd      	mov	sp, r7
  40add4:	bd80      	pop	{r7, pc}
  40add6:	bf00      	nop
  40add8:	20000378 	.word	0x20000378
  40addc:	0040da8d 	.word	0x0040da8d
  40ade0:	400e0e00 	.word	0x400e0e00
  40ade4:	0040d66d 	.word	0x0040d66d
  40ade8:	0040d64d 	.word	0x0040d64d

0040adec <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  40adec:	b580      	push	{r7, lr}
  40adee:	b084      	sub	sp, #16
  40adf0:	af00      	add	r7, sp, #0
  40adf2:	6078      	str	r0, [r7, #4]
  40adf4:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC1].pinId);
  40adf6:	4b0e      	ldr	r3, [pc, #56]	; (40ae30 <drv_gpio_int_dc1+0x44>)
  40adf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40adfa:	4618      	mov	r0, r3
  40adfc:	4b0d      	ldr	r3, [pc, #52]	; (40ae34 <drv_gpio_int_dc1+0x48>)
  40adfe:	4798      	blx	r3
  40ae00:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40ae02:	480d      	ldr	r0, [pc, #52]	; (40ae38 <drv_gpio_int_dc1+0x4c>)
  40ae04:	68f9      	ldr	r1, [r7, #12]
  40ae06:	4b0d      	ldr	r3, [pc, #52]	; (40ae3c <drv_gpio_int_dc1+0x50>)
  40ae08:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40ae0a:	4b0b      	ldr	r3, [pc, #44]	; (40ae38 <drv_gpio_int_dc1+0x4c>)
  40ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40ae0e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40ae10:	68fa      	ldr	r2, [r7, #12]
  40ae12:	683b      	ldr	r3, [r7, #0]
  40ae14:	429a      	cmp	r2, r3
  40ae16:	d103      	bne.n	40ae20 <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC1].gpioSetFlag = 1;
  40ae18:	4b05      	ldr	r3, [pc, #20]	; (40ae30 <drv_gpio_int_dc1+0x44>)
  40ae1a:	2201      	movs	r2, #1
  40ae1c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40ae20:	4805      	ldr	r0, [pc, #20]	; (40ae38 <drv_gpio_int_dc1+0x4c>)
  40ae22:	68f9      	ldr	r1, [r7, #12]
  40ae24:	4b06      	ldr	r3, [pc, #24]	; (40ae40 <drv_gpio_int_dc1+0x54>)
  40ae26:	4798      	blx	r3
}
  40ae28:	3710      	adds	r7, #16
  40ae2a:	46bd      	mov	sp, r7
  40ae2c:	bd80      	pop	{r7, pc}
  40ae2e:	bf00      	nop
  40ae30:	20000378 	.word	0x20000378
  40ae34:	0040da8d 	.word	0x0040da8d
  40ae38:	400e0e00 	.word	0x400e0e00
  40ae3c:	0040d66d 	.word	0x0040d66d
  40ae40:	0040d64d 	.word	0x0040d64d

0040ae44 <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  40ae44:	b580      	push	{r7, lr}
  40ae46:	b084      	sub	sp, #16
  40ae48:	af00      	add	r7, sp, #0
  40ae4a:	6078      	str	r0, [r7, #4]
  40ae4c:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC_DC2].pinId);
  40ae4e:	4b0e      	ldr	r3, [pc, #56]	; (40ae88 <drv_gpio_int_dc2+0x44>)
  40ae50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  40ae52:	4618      	mov	r0, r3
  40ae54:	4b0d      	ldr	r3, [pc, #52]	; (40ae8c <drv_gpio_int_dc2+0x48>)
  40ae56:	4798      	blx	r3
  40ae58:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40ae5a:	480d      	ldr	r0, [pc, #52]	; (40ae90 <drv_gpio_int_dc2+0x4c>)
  40ae5c:	68f9      	ldr	r1, [r7, #12]
  40ae5e:	4b0d      	ldr	r3, [pc, #52]	; (40ae94 <drv_gpio_int_dc2+0x50>)
  40ae60:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40ae62:	4b0b      	ldr	r3, [pc, #44]	; (40ae90 <drv_gpio_int_dc2+0x4c>)
  40ae64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40ae66:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40ae68:	68fa      	ldr	r2, [r7, #12]
  40ae6a:	683b      	ldr	r3, [r7, #0]
  40ae6c:	429a      	cmp	r2, r3
  40ae6e:	d103      	bne.n	40ae78 <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC_DC2].gpioSetFlag = 1;
  40ae70:	4b05      	ldr	r3, [pc, #20]	; (40ae88 <drv_gpio_int_dc2+0x44>)
  40ae72:	2201      	movs	r2, #1
  40ae74:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	}
	pio_enable_interrupt(PIOA, PinMask);
  40ae78:	4805      	ldr	r0, [pc, #20]	; (40ae90 <drv_gpio_int_dc2+0x4c>)
  40ae7a:	68f9      	ldr	r1, [r7, #12]
  40ae7c:	4b06      	ldr	r3, [pc, #24]	; (40ae98 <drv_gpio_int_dc2+0x54>)
  40ae7e:	4798      	blx	r3
}
  40ae80:	3710      	adds	r7, #16
  40ae82:	46bd      	mov	sp, r7
  40ae84:	bd80      	pop	{r7, pc}
  40ae86:	bf00      	nop
  40ae88:	20000378 	.word	0x20000378
  40ae8c:	0040da8d 	.word	0x0040da8d
  40ae90:	400e0e00 	.word	0x400e0e00
  40ae94:	0040d66d 	.word	0x0040d66d
  40ae98:	0040d64d 	.word	0x0040d64d

0040ae9c <drv_gpio_int_lbo>:
 * @brief Interrupt routine for Low Battery Out
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_lbo(uint32_t ul_id, uint32_t ul_mask)
{
  40ae9c:	b580      	push	{r7, lr}
  40ae9e:	b084      	sub	sp, #16
  40aea0:	af00      	add	r7, sp, #0
  40aea2:	6078      	str	r0, [r7, #4]
  40aea4:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_LBO].pinId);
  40aea6:	4b0e      	ldr	r3, [pc, #56]	; (40aee0 <drv_gpio_int_lbo+0x44>)
  40aea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
  40aeac:	4618      	mov	r0, r3
  40aeae:	4b0d      	ldr	r3, [pc, #52]	; (40aee4 <drv_gpio_int_lbo+0x48>)
  40aeb0:	4798      	blx	r3
  40aeb2:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40aeb4:	480c      	ldr	r0, [pc, #48]	; (40aee8 <drv_gpio_int_lbo+0x4c>)
  40aeb6:	68f9      	ldr	r1, [r7, #12]
  40aeb8:	4b0c      	ldr	r3, [pc, #48]	; (40aeec <drv_gpio_int_lbo+0x50>)
  40aeba:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40aebc:	4b0a      	ldr	r3, [pc, #40]	; (40aee8 <drv_gpio_int_lbo+0x4c>)
  40aebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40aec0:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40aec2:	68fa      	ldr	r2, [r7, #12]
  40aec4:	683b      	ldr	r3, [r7, #0]
  40aec6:	429a      	cmp	r2, r3
  40aec8:	d103      	bne.n	40aed2 <drv_gpio_int_lbo+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_LBO].gpioSetFlag = 1;
  40aeca:	4b05      	ldr	r3, [pc, #20]	; (40aee0 <drv_gpio_int_lbo+0x44>)
  40aecc:	2201      	movs	r2, #1
  40aece:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	}
	pio_enable_interrupt(PIOA, PinMask);
  40aed2:	4805      	ldr	r0, [pc, #20]	; (40aee8 <drv_gpio_int_lbo+0x4c>)
  40aed4:	68f9      	ldr	r1, [r7, #12]
  40aed6:	4b06      	ldr	r3, [pc, #24]	; (40aef0 <drv_gpio_int_lbo+0x54>)
  40aed8:	4798      	blx	r3
}
  40aeda:	3710      	adds	r7, #16
  40aedc:	46bd      	mov	sp, r7
  40aede:	bd80      	pop	{r7, pc}
  40aee0:	20000378 	.word	0x20000378
  40aee4:	0040da8d 	.word	0x0040da8d
  40aee8:	400e0e00 	.word	0x400e0e00
  40aeec:	0040d66d 	.word	0x0040d66d
  40aef0:	0040d64d 	.word	0x0040d64d

0040aef4 <drv_gpio_int_cd>:
 * @brief Interrupt routine for SD Card Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_cd(uint32_t ul_id, uint32_t ul_mask)
{
  40aef4:	b580      	push	{r7, lr}
  40aef6:	b084      	sub	sp, #16
  40aef8:	af00      	add	r7, sp, #0
  40aefa:	6078      	str	r0, [r7, #4]
  40aefc:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_SD_CD].pinId);
  40aefe:	4b0e      	ldr	r3, [pc, #56]	; (40af38 <drv_gpio_int_cd+0x44>)
  40af00:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
  40af04:	4618      	mov	r0, r3
  40af06:	4b0d      	ldr	r3, [pc, #52]	; (40af3c <drv_gpio_int_cd+0x48>)
  40af08:	4798      	blx	r3
  40af0a:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOB, PinMask);
  40af0c:	480c      	ldr	r0, [pc, #48]	; (40af40 <drv_gpio_int_cd+0x4c>)
  40af0e:	68f9      	ldr	r1, [r7, #12]
  40af10:	4b0c      	ldr	r3, [pc, #48]	; (40af44 <drv_gpio_int_cd+0x50>)
  40af12:	4798      	blx	r3
	uint32_t ReadIsr = PIOB->PIO_ISR;
  40af14:	4b0a      	ldr	r3, [pc, #40]	; (40af40 <drv_gpio_int_cd+0x4c>)
  40af16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40af18:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40af1a:	68fa      	ldr	r2, [r7, #12]
  40af1c:	683b      	ldr	r3, [r7, #0]
  40af1e:	429a      	cmp	r2, r3
  40af20:	d103      	bne.n	40af2a <drv_gpio_int_cd+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_SD_CD].gpioSetFlag = 1;
  40af22:	4b05      	ldr	r3, [pc, #20]	; (40af38 <drv_gpio_int_cd+0x44>)
  40af24:	2201      	movs	r2, #1
  40af26:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	}
	pio_enable_interrupt(PIOB, PinMask);
  40af2a:	4805      	ldr	r0, [pc, #20]	; (40af40 <drv_gpio_int_cd+0x4c>)
  40af2c:	68f9      	ldr	r1, [r7, #12]
  40af2e:	4b06      	ldr	r3, [pc, #24]	; (40af48 <drv_gpio_int_cd+0x54>)
  40af30:	4798      	blx	r3
}
  40af32:	3710      	adds	r7, #16
  40af34:	46bd      	mov	sp, r7
  40af36:	bd80      	pop	{r7, pc}
  40af38:	20000378 	.word	0x20000378
  40af3c:	0040da8d 	.word	0x0040da8d
  40af40:	400e1000 	.word	0x400e1000
  40af44:	0040d66d 	.word	0x0040d66d
  40af48:	0040d64d 	.word	0x0040d64d

0040af4c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40af4c:	b480      	push	{r7}
  40af4e:	b083      	sub	sp, #12
  40af50:	af00      	add	r7, sp, #0
  40af52:	4603      	mov	r3, r0
  40af54:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40af56:	4b08      	ldr	r3, [pc, #32]	; (40af78 <NVIC_EnableIRQ+0x2c>)
  40af58:	f997 2007 	ldrsb.w	r2, [r7, #7]
  40af5c:	0952      	lsrs	r2, r2, #5
  40af5e:	79f9      	ldrb	r1, [r7, #7]
  40af60:	f001 011f 	and.w	r1, r1, #31
  40af64:	2001      	movs	r0, #1
  40af66:	fa00 f101 	lsl.w	r1, r0, r1
  40af6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40af6e:	370c      	adds	r7, #12
  40af70:	46bd      	mov	sp, r7
  40af72:	f85d 7b04 	ldr.w	r7, [sp], #4
  40af76:	4770      	bx	lr
  40af78:	e000e100 	.word	0xe000e100

0040af7c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40af7c:	b480      	push	{r7}
  40af7e:	b083      	sub	sp, #12
  40af80:	af00      	add	r7, sp, #0
  40af82:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40af84:	687b      	ldr	r3, [r7, #4]
  40af86:	2b07      	cmp	r3, #7
  40af88:	d825      	bhi.n	40afd6 <osc_get_rate+0x5a>
  40af8a:	a201      	add	r2, pc, #4	; (adr r2, 40af90 <osc_get_rate+0x14>)
  40af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40af90:	0040afb1 	.word	0x0040afb1
  40af94:	0040afb7 	.word	0x0040afb7
  40af98:	0040afbd 	.word	0x0040afbd
  40af9c:	0040afc3 	.word	0x0040afc3
  40afa0:	0040afc7 	.word	0x0040afc7
  40afa4:	0040afcb 	.word	0x0040afcb
  40afa8:	0040afcf 	.word	0x0040afcf
  40afac:	0040afd3 	.word	0x0040afd3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40afb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40afb4:	e010      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40afb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40afba:	e00d      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40afbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40afc0:	e00a      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40afc2:	4b08      	ldr	r3, [pc, #32]	; (40afe4 <osc_get_rate+0x68>)
  40afc4:	e008      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40afc6:	4b08      	ldr	r3, [pc, #32]	; (40afe8 <osc_get_rate+0x6c>)
  40afc8:	e006      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40afca:	4b08      	ldr	r3, [pc, #32]	; (40afec <osc_get_rate+0x70>)
  40afcc:	e004      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40afce:	4b08      	ldr	r3, [pc, #32]	; (40aff0 <osc_get_rate+0x74>)
  40afd0:	e002      	b.n	40afd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40afd2:	4b07      	ldr	r3, [pc, #28]	; (40aff0 <osc_get_rate+0x74>)
  40afd4:	e000      	b.n	40afd8 <osc_get_rate+0x5c>
	}

	return 0;
  40afd6:	2300      	movs	r3, #0
}
  40afd8:	4618      	mov	r0, r3
  40afda:	370c      	adds	r7, #12
  40afdc:	46bd      	mov	sp, r7
  40afde:	f85d 7b04 	ldr.w	r7, [sp], #4
  40afe2:	4770      	bx	lr
  40afe4:	003d0900 	.word	0x003d0900
  40afe8:	007a1200 	.word	0x007a1200
  40afec:	00b71b00 	.word	0x00b71b00
  40aff0:	00f42400 	.word	0x00f42400

0040aff4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40aff4:	b580      	push	{r7, lr}
  40aff6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40aff8:	2006      	movs	r0, #6
  40affa:	4b04      	ldr	r3, [pc, #16]	; (40b00c <sysclk_get_main_hz+0x18>)
  40affc:	4798      	blx	r3
  40affe:	4602      	mov	r2, r0
  40b000:	4613      	mov	r3, r2
  40b002:	011b      	lsls	r3, r3, #4
  40b004:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40b006:	4618      	mov	r0, r3
  40b008:	bd80      	pop	{r7, pc}
  40b00a:	bf00      	nop
  40b00c:	0040af7d 	.word	0x0040af7d

0040b010 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40b010:	b580      	push	{r7, lr}
  40b012:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40b014:	4b02      	ldr	r3, [pc, #8]	; (40b020 <sysclk_get_peripheral_hz+0x10>)
  40b016:	4798      	blx	r3
  40b018:	4603      	mov	r3, r0
  40b01a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40b01c:	4618      	mov	r0, r3
  40b01e:	bd80      	pop	{r7, pc}
  40b020:	0040aff5 	.word	0x0040aff5

0040b024 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40b024:	b580      	push	{r7, lr}
  40b026:	b082      	sub	sp, #8
  40b028:	af00      	add	r7, sp, #0
  40b02a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40b02c:	6878      	ldr	r0, [r7, #4]
  40b02e:	4b02      	ldr	r3, [pc, #8]	; (40b038 <sysclk_enable_peripheral_clock+0x14>)
  40b030:	4798      	blx	r3
}
  40b032:	3708      	adds	r7, #8
  40b034:	46bd      	mov	sp, r7
  40b036:	bd80      	pop	{r7, pc}
  40b038:	0040de71 	.word	0x0040de71

0040b03c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40b03c:	b580      	push	{r7, lr}
  40b03e:	b08c      	sub	sp, #48	; 0x30
  40b040:	af00      	add	r7, sp, #0
  40b042:	6078      	str	r0, [r7, #4]
  40b044:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40b046:	4b31      	ldr	r3, [pc, #196]	; (40b10c <usart_serial_init+0xd0>)
  40b048:	4798      	blx	r3
  40b04a:	4603      	mov	r3, r0
  40b04c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40b04e:	683b      	ldr	r3, [r7, #0]
  40b050:	681b      	ldr	r3, [r3, #0]
  40b052:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40b054:	683b      	ldr	r3, [r7, #0]
  40b056:	689b      	ldr	r3, [r3, #8]
  40b058:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40b05a:	683b      	ldr	r3, [r7, #0]
  40b05c:	681b      	ldr	r3, [r3, #0]
  40b05e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40b060:	683b      	ldr	r3, [r7, #0]
  40b062:	685b      	ldr	r3, [r3, #4]
  40b064:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40b066:	683b      	ldr	r3, [r7, #0]
  40b068:	689b      	ldr	r3, [r3, #8]
  40b06a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40b06c:	683b      	ldr	r3, [r7, #0]
  40b06e:	7b1b      	ldrb	r3, [r3, #12]
  40b070:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40b072:	2300      	movs	r3, #0
  40b074:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40b076:	687a      	ldr	r2, [r7, #4]
  40b078:	4b25      	ldr	r3, [pc, #148]	; (40b110 <usart_serial_init+0xd4>)
  40b07a:	429a      	cmp	r2, r3
  40b07c:	d108      	bne.n	40b090 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40b07e:	2008      	movs	r0, #8
  40b080:	4b24      	ldr	r3, [pc, #144]	; (40b114 <usart_serial_init+0xd8>)
  40b082:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40b084:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40b088:	6878      	ldr	r0, [r7, #4]
  40b08a:	4619      	mov	r1, r3
  40b08c:	4b22      	ldr	r3, [pc, #136]	; (40b118 <usart_serial_init+0xdc>)
  40b08e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40b090:	687a      	ldr	r2, [r7, #4]
  40b092:	4b22      	ldr	r3, [pc, #136]	; (40b11c <usart_serial_init+0xe0>)
  40b094:	429a      	cmp	r2, r3
  40b096:	d108      	bne.n	40b0aa <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40b098:	2009      	movs	r0, #9
  40b09a:	4b1e      	ldr	r3, [pc, #120]	; (40b114 <usart_serial_init+0xd8>)
  40b09c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40b09e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40b0a2:	6878      	ldr	r0, [r7, #4]
  40b0a4:	4619      	mov	r1, r3
  40b0a6:	4b1c      	ldr	r3, [pc, #112]	; (40b118 <usart_serial_init+0xdc>)
  40b0a8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40b0aa:	687a      	ldr	r2, [r7, #4]
  40b0ac:	4b1c      	ldr	r3, [pc, #112]	; (40b120 <usart_serial_init+0xe4>)
  40b0ae:	429a      	cmp	r2, r3
  40b0b0:	d112      	bne.n	40b0d8 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40b0b2:	200e      	movs	r0, #14
  40b0b4:	4b17      	ldr	r3, [pc, #92]	; (40b114 <usart_serial_init+0xd8>)
  40b0b6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40b0b8:	4b14      	ldr	r3, [pc, #80]	; (40b10c <usart_serial_init+0xd0>)
  40b0ba:	4798      	blx	r3
  40b0bc:	4603      	mov	r3, r0
  40b0be:	f107 020c 	add.w	r2, r7, #12
  40b0c2:	6878      	ldr	r0, [r7, #4]
  40b0c4:	4611      	mov	r1, r2
  40b0c6:	461a      	mov	r2, r3
  40b0c8:	4b16      	ldr	r3, [pc, #88]	; (40b124 <usart_serial_init+0xe8>)
  40b0ca:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40b0cc:	6878      	ldr	r0, [r7, #4]
  40b0ce:	4b16      	ldr	r3, [pc, #88]	; (40b128 <usart_serial_init+0xec>)
  40b0d0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40b0d2:	6878      	ldr	r0, [r7, #4]
  40b0d4:	4b15      	ldr	r3, [pc, #84]	; (40b12c <usart_serial_init+0xf0>)
  40b0d6:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40b0d8:	687a      	ldr	r2, [r7, #4]
  40b0da:	4b15      	ldr	r3, [pc, #84]	; (40b130 <usart_serial_init+0xf4>)
  40b0dc:	429a      	cmp	r2, r3
  40b0de:	d112      	bne.n	40b106 <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40b0e0:	200f      	movs	r0, #15
  40b0e2:	4b0c      	ldr	r3, [pc, #48]	; (40b114 <usart_serial_init+0xd8>)
  40b0e4:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40b0e6:	4b09      	ldr	r3, [pc, #36]	; (40b10c <usart_serial_init+0xd0>)
  40b0e8:	4798      	blx	r3
  40b0ea:	4603      	mov	r3, r0
  40b0ec:	f107 020c 	add.w	r2, r7, #12
  40b0f0:	6878      	ldr	r0, [r7, #4]
  40b0f2:	4611      	mov	r1, r2
  40b0f4:	461a      	mov	r2, r3
  40b0f6:	4b0b      	ldr	r3, [pc, #44]	; (40b124 <usart_serial_init+0xe8>)
  40b0f8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40b0fa:	6878      	ldr	r0, [r7, #4]
  40b0fc:	4b0a      	ldr	r3, [pc, #40]	; (40b128 <usart_serial_init+0xec>)
  40b0fe:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40b100:	6878      	ldr	r0, [r7, #4]
  40b102:	4b0a      	ldr	r3, [pc, #40]	; (40b12c <usart_serial_init+0xf0>)
  40b104:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40b106:	3730      	adds	r7, #48	; 0x30
  40b108:	46bd      	mov	sp, r7
  40b10a:	bd80      	pop	{r7, pc}
  40b10c:	0040b011 	.word	0x0040b011
  40b110:	400e0600 	.word	0x400e0600
  40b114:	0040b025 	.word	0x0040b025
  40b118:	0040430d 	.word	0x0040430d
  40b11c:	400e0800 	.word	0x400e0800
  40b120:	40024000 	.word	0x40024000
  40b124:	004044f1 	.word	0x004044f1
  40b128:	00404575 	.word	0x00404575
  40b12c:	004045a5 	.word	0x004045a5
  40b130:	40028000 	.word	0x40028000

0040b134 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40b134:	b580      	push	{r7, lr}
  40b136:	b082      	sub	sp, #8
  40b138:	af00      	add	r7, sp, #0
  40b13a:	6078      	str	r0, [r7, #4]
  40b13c:	460b      	mov	r3, r1
  40b13e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40b140:	687a      	ldr	r2, [r7, #4]
  40b142:	4b20      	ldr	r3, [pc, #128]	; (40b1c4 <usart_serial_putchar+0x90>)
  40b144:	429a      	cmp	r2, r3
  40b146:	d10a      	bne.n	40b15e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40b148:	bf00      	nop
  40b14a:	78fb      	ldrb	r3, [r7, #3]
  40b14c:	6878      	ldr	r0, [r7, #4]
  40b14e:	4619      	mov	r1, r3
  40b150:	4b1d      	ldr	r3, [pc, #116]	; (40b1c8 <usart_serial_putchar+0x94>)
  40b152:	4798      	blx	r3
  40b154:	4603      	mov	r3, r0
  40b156:	2b00      	cmp	r3, #0
  40b158:	d1f7      	bne.n	40b14a <usart_serial_putchar+0x16>
		return 1;
  40b15a:	2301      	movs	r3, #1
  40b15c:	e02d      	b.n	40b1ba <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40b15e:	687a      	ldr	r2, [r7, #4]
  40b160:	4b1a      	ldr	r3, [pc, #104]	; (40b1cc <usart_serial_putchar+0x98>)
  40b162:	429a      	cmp	r2, r3
  40b164:	d10a      	bne.n	40b17c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40b166:	bf00      	nop
  40b168:	78fb      	ldrb	r3, [r7, #3]
  40b16a:	6878      	ldr	r0, [r7, #4]
  40b16c:	4619      	mov	r1, r3
  40b16e:	4b16      	ldr	r3, [pc, #88]	; (40b1c8 <usart_serial_putchar+0x94>)
  40b170:	4798      	blx	r3
  40b172:	4603      	mov	r3, r0
  40b174:	2b00      	cmp	r3, #0
  40b176:	d1f7      	bne.n	40b168 <usart_serial_putchar+0x34>
		return 1;
  40b178:	2301      	movs	r3, #1
  40b17a:	e01e      	b.n	40b1ba <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40b17c:	687a      	ldr	r2, [r7, #4]
  40b17e:	4b14      	ldr	r3, [pc, #80]	; (40b1d0 <usart_serial_putchar+0x9c>)
  40b180:	429a      	cmp	r2, r3
  40b182:	d10a      	bne.n	40b19a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40b184:	bf00      	nop
  40b186:	78fb      	ldrb	r3, [r7, #3]
  40b188:	6878      	ldr	r0, [r7, #4]
  40b18a:	4619      	mov	r1, r3
  40b18c:	4b11      	ldr	r3, [pc, #68]	; (40b1d4 <usart_serial_putchar+0xa0>)
  40b18e:	4798      	blx	r3
  40b190:	4603      	mov	r3, r0
  40b192:	2b00      	cmp	r3, #0
  40b194:	d1f7      	bne.n	40b186 <usart_serial_putchar+0x52>
		return 1;
  40b196:	2301      	movs	r3, #1
  40b198:	e00f      	b.n	40b1ba <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40b19a:	687a      	ldr	r2, [r7, #4]
  40b19c:	4b0e      	ldr	r3, [pc, #56]	; (40b1d8 <usart_serial_putchar+0xa4>)
  40b19e:	429a      	cmp	r2, r3
  40b1a0:	d10a      	bne.n	40b1b8 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40b1a2:	bf00      	nop
  40b1a4:	78fb      	ldrb	r3, [r7, #3]
  40b1a6:	6878      	ldr	r0, [r7, #4]
  40b1a8:	4619      	mov	r1, r3
  40b1aa:	4b0a      	ldr	r3, [pc, #40]	; (40b1d4 <usart_serial_putchar+0xa0>)
  40b1ac:	4798      	blx	r3
  40b1ae:	4603      	mov	r3, r0
  40b1b0:	2b00      	cmp	r3, #0
  40b1b2:	d1f7      	bne.n	40b1a4 <usart_serial_putchar+0x70>
		return 1;
  40b1b4:	2301      	movs	r3, #1
  40b1b6:	e000      	b.n	40b1ba <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40b1b8:	2300      	movs	r3, #0
}
  40b1ba:	4618      	mov	r0, r3
  40b1bc:	3708      	adds	r7, #8
  40b1be:	46bd      	mov	sp, r7
  40b1c0:	bd80      	pop	{r7, pc}
  40b1c2:	bf00      	nop
  40b1c4:	400e0600 	.word	0x400e0600
  40b1c8:	004043a5 	.word	0x004043a5
  40b1cc:	400e0800 	.word	0x400e0800
  40b1d0:	40024000 	.word	0x40024000
  40b1d4:	00404661 	.word	0x00404661
  40b1d8:	40028000 	.word	0x40028000

0040b1dc <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  40b1dc:	b580      	push	{r7, lr}
  40b1de:	b084      	sub	sp, #16
  40b1e0:	af00      	add	r7, sp, #0
  40b1e2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40b1e4:	2300      	movs	r3, #0
  40b1e6:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  40b1e8:	687b      	ldr	r3, [r7, #4]
  40b1ea:	681a      	ldr	r2, [r3, #0]
  40b1ec:	4b7a      	ldr	r3, [pc, #488]	; (40b3d8 <drv_uart_init+0x1fc>)
  40b1ee:	429a      	cmp	r2, r3
  40b1f0:	d103      	bne.n	40b1fa <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  40b1f2:	687b      	ldr	r3, [r7, #4]
  40b1f4:	2200      	movs	r2, #0
  40b1f6:	615a      	str	r2, [r3, #20]
  40b1f8:	e01c      	b.n	40b234 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == UART1)
  40b1fa:	687b      	ldr	r3, [r7, #4]
  40b1fc:	681a      	ldr	r2, [r3, #0]
  40b1fe:	4b77      	ldr	r3, [pc, #476]	; (40b3dc <drv_uart_init+0x200>)
  40b200:	429a      	cmp	r2, r3
  40b202:	d103      	bne.n	40b20c <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  40b204:	687b      	ldr	r3, [r7, #4]
  40b206:	2201      	movs	r2, #1
  40b208:	615a      	str	r2, [r3, #20]
  40b20a:	e013      	b.n	40b234 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART0)
  40b20c:	687b      	ldr	r3, [r7, #4]
  40b20e:	681a      	ldr	r2, [r3, #0]
  40b210:	4b73      	ldr	r3, [pc, #460]	; (40b3e0 <drv_uart_init+0x204>)
  40b212:	429a      	cmp	r2, r3
  40b214:	d103      	bne.n	40b21e <drv_uart_init+0x42>
	{	
		uartConfig->mem_index = 2;
  40b216:	687b      	ldr	r3, [r7, #4]
  40b218:	2202      	movs	r2, #2
  40b21a:	615a      	str	r2, [r3, #20]
  40b21c:	e00a      	b.n	40b234 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART1)
  40b21e:	687b      	ldr	r3, [r7, #4]
  40b220:	681a      	ldr	r2, [r3, #0]
  40b222:	4b70      	ldr	r3, [pc, #448]	; (40b3e4 <drv_uart_init+0x208>)
  40b224:	429a      	cmp	r2, r3
  40b226:	d103      	bne.n	40b230 <drv_uart_init+0x54>
	{

		uartConfig->mem_index = 3;
  40b228:	687b      	ldr	r3, [r7, #4]
  40b22a:	2203      	movs	r2, #3
  40b22c:	615a      	str	r2, [r3, #20]
  40b22e:	e001      	b.n	40b234 <drv_uart_init+0x58>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40b230:	2301      	movs	r3, #1
  40b232:	e191      	b.n	40b558 <drv_uart_init+0x37c>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 4)
  40b234:	687b      	ldr	r3, [r7, #4]
  40b236:	695b      	ldr	r3, [r3, #20]
  40b238:	2b00      	cmp	r3, #0
  40b23a:	db03      	blt.n	40b244 <drv_uart_init+0x68>
  40b23c:	687b      	ldr	r3, [r7, #4]
  40b23e:	695b      	ldr	r3, [r3, #20]
  40b240:	2b04      	cmp	r3, #4
  40b242:	dd01      	ble.n	40b248 <drv_uart_init+0x6c>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  40b244:	2301      	movs	r3, #1
  40b246:	e187      	b.n	40b558 <drv_uart_init+0x37c>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40b248:	687b      	ldr	r3, [r7, #4]
  40b24a:	695a      	ldr	r2, [r3, #20]
  40b24c:	4966      	ldr	r1, [pc, #408]	; (40b3e8 <drv_uart_init+0x20c>)
  40b24e:	4613      	mov	r3, r2
  40b250:	015b      	lsls	r3, r3, #5
  40b252:	4413      	add	r3, r2
  40b254:	015b      	lsls	r3, r3, #5
  40b256:	440b      	add	r3, r1
  40b258:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b25c:	799b      	ldrb	r3, [r3, #6]
  40b25e:	b2db      	uxtb	r3, r3
  40b260:	2b01      	cmp	r3, #1
  40b262:	d101      	bne.n	40b268 <drv_uart_init+0x8c>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  40b264:	2301      	movs	r3, #1
  40b266:	e177      	b.n	40b558 <drv_uart_init+0x37c>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  40b268:	687b      	ldr	r3, [r7, #4]
  40b26a:	681a      	ldr	r2, [r3, #0]
  40b26c:	687b      	ldr	r3, [r7, #4]
  40b26e:	3304      	adds	r3, #4
  40b270:	4610      	mov	r0, r2
  40b272:	4619      	mov	r1, r3
  40b274:	4b5d      	ldr	r3, [pc, #372]	; (40b3ec <drv_uart_init+0x210>)
  40b276:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40b278:	687b      	ldr	r3, [r7, #4]
  40b27a:	681b      	ldr	r3, [r3, #0]
  40b27c:	4618      	mov	r0, r3
  40b27e:	f04f 31ff 	mov.w	r1, #4294967295
  40b282:	4b5b      	ldr	r3, [pc, #364]	; (40b3f0 <drv_uart_init+0x214>)
  40b284:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  40b286:	687b      	ldr	r3, [r7, #4]
  40b288:	681a      	ldr	r2, [r3, #0]
  40b28a:	4b53      	ldr	r3, [pc, #332]	; (40b3d8 <drv_uart_init+0x1fc>)
  40b28c:	429a      	cmp	r2, r3
  40b28e:	d11e      	bne.n	40b2ce <drv_uart_init+0xf2>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  40b290:	200b      	movs	r0, #11
  40b292:	4b58      	ldr	r3, [pc, #352]	; (40b3f4 <drv_uart_init+0x218>)
  40b294:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40b296:	4b58      	ldr	r3, [pc, #352]	; (40b3f8 <drv_uart_init+0x21c>)
  40b298:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40b29c:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40b29e:	4b56      	ldr	r3, [pc, #344]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40b2a4:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40b2a6:	4b54      	ldr	r3, [pc, #336]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2a8:	4a53      	ldr	r2, [pc, #332]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40b2ac:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  40b2b0:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40b2b2:	4b51      	ldr	r3, [pc, #324]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2b4:	4a50      	ldr	r2, [pc, #320]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40b2b8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  40b2bc:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
  40b2be:	4b4e      	ldr	r3, [pc, #312]	; (40b3f8 <drv_uart_init+0x21c>)
  40b2c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40b2c4:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART0_IRQn);
  40b2c6:	2008      	movs	r0, #8
  40b2c8:	4b4c      	ldr	r3, [pc, #304]	; (40b3fc <drv_uart_init+0x220>)
  40b2ca:	4798      	blx	r3
  40b2cc:	e09a      	b.n	40b404 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == UART1)
  40b2ce:	687b      	ldr	r3, [r7, #4]
  40b2d0:	681a      	ldr	r2, [r3, #0]
  40b2d2:	4b42      	ldr	r3, [pc, #264]	; (40b3dc <drv_uart_init+0x200>)
  40b2d4:	429a      	cmp	r2, r3
  40b2d6:	d11b      	bne.n	40b310 <drv_uart_init+0x134>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  40b2d8:	200c      	movs	r0, #12
  40b2da:	4b46      	ldr	r3, [pc, #280]	; (40b3f4 <drv_uart_init+0x218>)
  40b2dc:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40b2de:	4b48      	ldr	r3, [pc, #288]	; (40b400 <drv_uart_init+0x224>)
  40b2e0:	220c      	movs	r2, #12
  40b2e2:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40b2e4:	4b46      	ldr	r3, [pc, #280]	; (40b400 <drv_uart_init+0x224>)
  40b2e6:	220c      	movs	r2, #12
  40b2e8:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40b2ea:	4b45      	ldr	r3, [pc, #276]	; (40b400 <drv_uart_init+0x224>)
  40b2ec:	4a44      	ldr	r2, [pc, #272]	; (40b400 <drv_uart_init+0x224>)
  40b2ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40b2f0:	f022 020c 	bic.w	r2, r2, #12
  40b2f4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40b2f6:	4b42      	ldr	r3, [pc, #264]	; (40b400 <drv_uart_init+0x224>)
  40b2f8:	4a41      	ldr	r2, [pc, #260]	; (40b400 <drv_uart_init+0x224>)
  40b2fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40b2fc:	f022 020c 	bic.w	r2, r2, #12
  40b300:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);			
  40b302:	4b3f      	ldr	r3, [pc, #252]	; (40b400 <drv_uart_init+0x224>)
  40b304:	220c      	movs	r2, #12
  40b306:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART1_IRQn);
  40b308:	2009      	movs	r0, #9
  40b30a:	4b3c      	ldr	r3, [pc, #240]	; (40b3fc <drv_uart_init+0x220>)
  40b30c:	4798      	blx	r3
  40b30e:	e079      	b.n	40b404 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART0)
  40b310:	687b      	ldr	r3, [r7, #4]
  40b312:	681a      	ldr	r2, [r3, #0]
  40b314:	4b32      	ldr	r3, [pc, #200]	; (40b3e0 <drv_uart_init+0x204>)
  40b316:	429a      	cmp	r2, r3
  40b318:	d127      	bne.n	40b36a <drv_uart_init+0x18e>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40b31a:	200b      	movs	r0, #11
  40b31c:	4b35      	ldr	r3, [pc, #212]	; (40b3f4 <drv_uart_init+0x218>)
  40b31e:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40b320:	4b35      	ldr	r3, [pc, #212]	; (40b3f8 <drv_uart_init+0x21c>)
  40b322:	2260      	movs	r2, #96	; 0x60
  40b324:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40b326:	4b34      	ldr	r3, [pc, #208]	; (40b3f8 <drv_uart_init+0x21c>)
  40b328:	2260      	movs	r2, #96	; 0x60
  40b32a:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40b32c:	4b32      	ldr	r3, [pc, #200]	; (40b3f8 <drv_uart_init+0x21c>)
  40b32e:	4a32      	ldr	r2, [pc, #200]	; (40b3f8 <drv_uart_init+0x21c>)
  40b330:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40b332:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40b336:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40b338:	4b2f      	ldr	r3, [pc, #188]	; (40b3f8 <drv_uart_init+0x21c>)
  40b33a:	4a2f      	ldr	r2, [pc, #188]	; (40b3f8 <drv_uart_init+0x21c>)
  40b33c:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40b33e:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40b342:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40b344:	4b2c      	ldr	r3, [pc, #176]	; (40b3f8 <drv_uart_init+0x21c>)
  40b346:	2260      	movs	r2, #96	; 0x60
  40b348:	605a      	str	r2, [r3, #4]
	
		/* configure USART0 enable Pin (PA2) Peripheral-B */
		PIOA->PIO_PUDR   =  (PIO_PA2);
  40b34a:	4b2b      	ldr	r3, [pc, #172]	; (40b3f8 <drv_uart_init+0x21c>)
  40b34c:	2204      	movs	r2, #4
  40b34e:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA2);
  40b350:	4b29      	ldr	r3, [pc, #164]	; (40b3f8 <drv_uart_init+0x21c>)
  40b352:	2204      	movs	r2, #4
  40b354:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA2);
  40b356:	4b28      	ldr	r3, [pc, #160]	; (40b3f8 <drv_uart_init+0x21c>)
  40b358:	2204      	movs	r2, #4
  40b35a:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA2);	
  40b35c:	4b26      	ldr	r3, [pc, #152]	; (40b3f8 <drv_uart_init+0x21c>)
  40b35e:	2204      	movs	r2, #4
  40b360:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART0_IRQn);
  40b362:	200e      	movs	r0, #14
  40b364:	4b25      	ldr	r3, [pc, #148]	; (40b3fc <drv_uart_init+0x220>)
  40b366:	4798      	blx	r3
  40b368:	e04c      	b.n	40b404 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART1)
  40b36a:	687b      	ldr	r3, [r7, #4]
  40b36c:	681a      	ldr	r2, [r3, #0]
  40b36e:	4b1d      	ldr	r3, [pc, #116]	; (40b3e4 <drv_uart_init+0x208>)
  40b370:	429a      	cmp	r2, r3
  40b372:	d12e      	bne.n	40b3d2 <drv_uart_init+0x1f6>
	{		
		/* Configure USART1 Pins (PA22 = TX, PA21 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40b374:	200b      	movs	r0, #11
  40b376:	4b1f      	ldr	r3, [pc, #124]	; (40b3f4 <drv_uart_init+0x218>)
  40b378:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40b37a:	4b1f      	ldr	r3, [pc, #124]	; (40b3f8 <drv_uart_init+0x21c>)
  40b37c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40b380:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA21A_RXD1 |  PIO_PA22A_TXD1);
  40b382:	4b1d      	ldr	r3, [pc, #116]	; (40b3f8 <drv_uart_init+0x21c>)
  40b384:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40b388:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40b38a:	4b1b      	ldr	r3, [pc, #108]	; (40b3f8 <drv_uart_init+0x21c>)
  40b38c:	4a1a      	ldr	r2, [pc, #104]	; (40b3f8 <drv_uart_init+0x21c>)
  40b38e:	6f12      	ldr	r2, [r2, #112]	; 0x70
  40b390:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  40b394:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40b396:	4b18      	ldr	r3, [pc, #96]	; (40b3f8 <drv_uart_init+0x21c>)
  40b398:	4a17      	ldr	r2, [pc, #92]	; (40b3f8 <drv_uart_init+0x21c>)
  40b39a:	6f52      	ldr	r2, [r2, #116]	; 0x74
  40b39c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  40b3a0:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  40b3a2:	4b15      	ldr	r3, [pc, #84]	; (40b3f8 <drv_uart_init+0x21c>)
  40b3a4:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  40b3a8:	605a      	str	r2, [r3, #4]
	
		/* configure USART1 enable Pin (PA23) */
		PIOA->PIO_PUDR   =  (PIO_PA23);
  40b3aa:	4b13      	ldr	r3, [pc, #76]	; (40b3f8 <drv_uart_init+0x21c>)
  40b3ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b3b0:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA23);
  40b3b2:	4b11      	ldr	r3, [pc, #68]	; (40b3f8 <drv_uart_init+0x21c>)
  40b3b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b3b8:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA23);
  40b3ba:	4b0f      	ldr	r3, [pc, #60]	; (40b3f8 <drv_uart_init+0x21c>)
  40b3bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b3c0:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA23);		
  40b3c2:	4b0d      	ldr	r3, [pc, #52]	; (40b3f8 <drv_uart_init+0x21c>)
  40b3c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b3c8:	601a      	str	r2, [r3, #0]
		
		NVIC_EnableIRQ(USART1_IRQn);
  40b3ca:	200f      	movs	r0, #15
  40b3cc:	4b0b      	ldr	r3, [pc, #44]	; (40b3fc <drv_uart_init+0x220>)
  40b3ce:	4798      	blx	r3
  40b3d0:	e018      	b.n	40b404 <drv_uart_init+0x228>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40b3d2:	2301      	movs	r3, #1
  40b3d4:	e0c0      	b.n	40b558 <drv_uart_init+0x37c>
  40b3d6:	bf00      	nop
  40b3d8:	400e0600 	.word	0x400e0600
  40b3dc:	400e0800 	.word	0x400e0800
  40b3e0:	40024000 	.word	0x40024000
  40b3e4:	40028000 	.word	0x40028000
  40b3e8:	200022a4 	.word	0x200022a4
  40b3ec:	0040b03d 	.word	0x0040b03d
  40b3f0:	004045f1 	.word	0x004045f1
  40b3f4:	0040b025 	.word	0x0040b025
  40b3f8:	400e0e00 	.word	0x400e0e00
  40b3fc:	0040af4d 	.word	0x0040af4d
  40b400:	400e1000 	.word	0x400e1000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  40b404:	687b      	ldr	r3, [r7, #4]
  40b406:	695a      	ldr	r2, [r3, #20]
  40b408:	4955      	ldr	r1, [pc, #340]	; (40b560 <drv_uart_init+0x384>)
  40b40a:	4613      	mov	r3, r2
  40b40c:	015b      	lsls	r3, r3, #5
  40b40e:	4413      	add	r3, r2
  40b410:	015b      	lsls	r3, r3, #5
  40b412:	440b      	add	r3, r1
  40b414:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b418:	2201      	movs	r2, #1
  40b41a:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  40b41c:	687b      	ldr	r3, [r7, #4]
  40b41e:	681b      	ldr	r3, [r3, #0]
  40b420:	4618      	mov	r0, r3
  40b422:	f240 2101 	movw	r1, #513	; 0x201
  40b426:	4b4f      	ldr	r3, [pc, #316]	; (40b564 <drv_uart_init+0x388>)
  40b428:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40b42a:	687b      	ldr	r3, [r7, #4]
  40b42c:	695a      	ldr	r2, [r3, #20]
  40b42e:	4613      	mov	r3, r2
  40b430:	015b      	lsls	r3, r3, #5
  40b432:	4413      	add	r3, r2
  40b434:	015b      	lsls	r3, r3, #5
  40b436:	4a4a      	ldr	r2, [pc, #296]	; (40b560 <drv_uart_init+0x384>)
  40b438:	4413      	add	r3, r2
  40b43a:	4618      	mov	r0, r3
  40b43c:	2100      	movs	r1, #0
  40b43e:	f44f 7200 	mov.w	r2, #512	; 0x200
  40b442:	4b49      	ldr	r3, [pc, #292]	; (40b568 <drv_uart_init+0x38c>)
  40b444:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40b446:	687b      	ldr	r3, [r7, #4]
  40b448:	695a      	ldr	r2, [r3, #20]
  40b44a:	4945      	ldr	r1, [pc, #276]	; (40b560 <drv_uart_init+0x384>)
  40b44c:	4613      	mov	r3, r2
  40b44e:	015b      	lsls	r3, r3, #5
  40b450:	4413      	add	r3, r2
  40b452:	015b      	lsls	r3, r3, #5
  40b454:	440b      	add	r3, r1
  40b456:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b45a:	2200      	movs	r2, #0
  40b45c:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  40b45e:	687b      	ldr	r3, [r7, #4]
  40b460:	695a      	ldr	r2, [r3, #20]
  40b462:	493f      	ldr	r1, [pc, #252]	; (40b560 <drv_uart_init+0x384>)
  40b464:	4613      	mov	r3, r2
  40b466:	015b      	lsls	r3, r3, #5
  40b468:	4413      	add	r3, r2
  40b46a:	015b      	lsls	r3, r3, #5
  40b46c:	440b      	add	r3, r1
  40b46e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b472:	2200      	movs	r2, #0
  40b474:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40b476:	687b      	ldr	r3, [r7, #4]
  40b478:	695a      	ldr	r2, [r3, #20]
  40b47a:	4939      	ldr	r1, [pc, #228]	; (40b560 <drv_uart_init+0x384>)
  40b47c:	4613      	mov	r3, r2
  40b47e:	015b      	lsls	r3, r3, #5
  40b480:	4413      	add	r3, r2
  40b482:	015b      	lsls	r3, r3, #5
  40b484:	440b      	add	r3, r1
  40b486:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40b48a:	2200      	movs	r2, #0
  40b48c:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  40b48e:	687b      	ldr	r3, [r7, #4]
  40b490:	695a      	ldr	r2, [r3, #20]
  40b492:	4933      	ldr	r1, [pc, #204]	; (40b560 <drv_uart_init+0x384>)
  40b494:	4613      	mov	r3, r2
  40b496:	015b      	lsls	r3, r3, #5
  40b498:	4413      	add	r3, r2
  40b49a:	015b      	lsls	r3, r3, #5
  40b49c:	440b      	add	r3, r1
  40b49e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b4a2:	2200      	movs	r2, #0
  40b4a4:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  40b4a6:	687b      	ldr	r3, [r7, #4]
  40b4a8:	695a      	ldr	r2, [r3, #20]
  40b4aa:	492d      	ldr	r1, [pc, #180]	; (40b560 <drv_uart_init+0x384>)
  40b4ac:	4613      	mov	r3, r2
  40b4ae:	015b      	lsls	r3, r3, #5
  40b4b0:	4413      	add	r3, r2
  40b4b2:	015b      	lsls	r3, r3, #5
  40b4b4:	440b      	add	r3, r1
  40b4b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40b4ba:	2200      	movs	r2, #0
  40b4bc:	705a      	strb	r2, [r3, #1]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40b4be:	687b      	ldr	r3, [r7, #4]
  40b4c0:	695a      	ldr	r2, [r3, #20]
  40b4c2:	4613      	mov	r3, r2
  40b4c4:	015b      	lsls	r3, r3, #5
  40b4c6:	4413      	add	r3, r2
  40b4c8:	015b      	lsls	r3, r3, #5
  40b4ca:	f503 7204 	add.w	r2, r3, #528	; 0x210
  40b4ce:	4b24      	ldr	r3, [pc, #144]	; (40b560 <drv_uart_init+0x384>)
  40b4d0:	4413      	add	r3, r2
  40b4d2:	4618      	mov	r0, r3
  40b4d4:	2100      	movs	r1, #0
  40b4d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  40b4da:	4b23      	ldr	r3, [pc, #140]	; (40b568 <drv_uart_init+0x38c>)
  40b4dc:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  40b4de:	687b      	ldr	r3, [r7, #4]
  40b4e0:	695a      	ldr	r2, [r3, #20]
  40b4e2:	491f      	ldr	r1, [pc, #124]	; (40b560 <drv_uart_init+0x384>)
  40b4e4:	4613      	mov	r3, r2
  40b4e6:	015b      	lsls	r3, r3, #5
  40b4e8:	4413      	add	r3, r2
  40b4ea:	015b      	lsls	r3, r3, #5
  40b4ec:	440b      	add	r3, r1
  40b4ee:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40b4f2:	2200      	movs	r2, #0
  40b4f4:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  40b4f6:	687b      	ldr	r3, [r7, #4]
  40b4f8:	695a      	ldr	r2, [r3, #20]
  40b4fa:	4919      	ldr	r1, [pc, #100]	; (40b560 <drv_uart_init+0x384>)
  40b4fc:	4613      	mov	r3, r2
  40b4fe:	015b      	lsls	r3, r3, #5
  40b500:	4413      	add	r3, r2
  40b502:	015b      	lsls	r3, r3, #5
  40b504:	440b      	add	r3, r1
  40b506:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40b50a:	2200      	movs	r2, #0
  40b50c:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  40b50e:	687b      	ldr	r3, [r7, #4]
  40b510:	695a      	ldr	r2, [r3, #20]
  40b512:	4913      	ldr	r1, [pc, #76]	; (40b560 <drv_uart_init+0x384>)
  40b514:	4613      	mov	r3, r2
  40b516:	015b      	lsls	r3, r3, #5
  40b518:	4413      	add	r3, r2
  40b51a:	015b      	lsls	r3, r3, #5
  40b51c:	440b      	add	r3, r1
  40b51e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40b522:	2200      	movs	r2, #0
  40b524:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  40b526:	687b      	ldr	r3, [r7, #4]
  40b528:	695a      	ldr	r2, [r3, #20]
  40b52a:	490d      	ldr	r1, [pc, #52]	; (40b560 <drv_uart_init+0x384>)
  40b52c:	4613      	mov	r3, r2
  40b52e:	015b      	lsls	r3, r3, #5
  40b530:	4413      	add	r3, r2
  40b532:	015b      	lsls	r3, r3, #5
  40b534:	440b      	add	r3, r1
  40b536:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  40b53a:	2200      	movs	r2, #0
  40b53c:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  40b53e:	687b      	ldr	r3, [r7, #4]
  40b540:	695a      	ldr	r2, [r3, #20]
  40b542:	4907      	ldr	r1, [pc, #28]	; (40b560 <drv_uart_init+0x384>)
  40b544:	4613      	mov	r3, r2
  40b546:	015b      	lsls	r3, r3, #5
  40b548:	4413      	add	r3, r2
  40b54a:	015b      	lsls	r3, r3, #5
  40b54c:	440b      	add	r3, r1
  40b54e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
  40b552:	2200      	movs	r2, #0
  40b554:	701a      	strb	r2, [r3, #0]
	
	return status; 
  40b556:	7bfb      	ldrb	r3, [r7, #15]
}
  40b558:	4618      	mov	r0, r3
  40b55a:	3710      	adds	r7, #16
  40b55c:	46bd      	mov	sp, r7
  40b55e:	bd80      	pop	{r7, pc}
  40b560:	200022a4 	.word	0x200022a4
  40b564:	004045d5 	.word	0x004045d5
  40b568:	0040f191 	.word	0x0040f191

0040b56c <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  40b56c:	b580      	push	{r7, lr}
  40b56e:	b086      	sub	sp, #24
  40b570:	af00      	add	r7, sp, #0
  40b572:	6078      	str	r0, [r7, #4]
  40b574:	460b      	mov	r3, r1
  40b576:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  40b578:	2300      	movs	r3, #0
  40b57a:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  40b57c:	687b      	ldr	r3, [r7, #4]
  40b57e:	681b      	ldr	r3, [r3, #0]
  40b580:	4618      	mov	r0, r3
  40b582:	f44f 7100 	mov.w	r1, #512	; 0x200
  40b586:	4b30      	ldr	r3, [pc, #192]	; (40b648 <drv_uart_putChar+0xdc>)
  40b588:	4798      	blx	r3
	uint32_t val = 0;
  40b58a:	2300      	movs	r3, #0
  40b58c:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  40b58e:	687b      	ldr	r3, [r7, #4]
  40b590:	695a      	ldr	r2, [r3, #20]
  40b592:	4613      	mov	r3, r2
  40b594:	015b      	lsls	r3, r3, #5
  40b596:	4413      	add	r3, r2
  40b598:	015b      	lsls	r3, r3, #5
  40b59a:	4a2c      	ldr	r2, [pc, #176]	; (40b64c <drv_uart_putChar+0xe0>)
  40b59c:	4413      	add	r3, r2
  40b59e:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  40b5a0:	68fb      	ldr	r3, [r7, #12]
  40b5a2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40b5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b5aa:	d10b      	bne.n	40b5c4 <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  40b5ac:	68fb      	ldr	r3, [r7, #12]
  40b5ae:	2201      	movs	r2, #1
  40b5b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  40b5b4:	68fb      	ldr	r3, [r7, #12]
  40b5b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  40b5ba:	1c5a      	adds	r2, r3, #1
  40b5bc:	68fb      	ldr	r3, [r7, #12]
  40b5be:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  40b5c2:	e01d      	b.n	40b600 <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40b5c4:	68fb      	ldr	r3, [r7, #12]
  40b5c6:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40b5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b5ce:	d217      	bcs.n	40b600 <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  40b5d0:	68fb      	ldr	r3, [r7, #12]
  40b5d2:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40b5d6:	68fa      	ldr	r2, [r7, #12]
  40b5d8:	4413      	add	r3, r2
  40b5da:	78fa      	ldrb	r2, [r7, #3]
  40b5dc:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  40b5e0:	68fb      	ldr	r3, [r7, #12]
  40b5e2:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40b5e6:	3301      	adds	r3, #1
  40b5e8:	b29a      	uxth	r2, r3
  40b5ea:	68fb      	ldr	r3, [r7, #12]
  40b5ec:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  40b5f0:	68fb      	ldr	r3, [r7, #12]
  40b5f2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40b5f6:	3301      	adds	r3, #1
  40b5f8:	b29a      	uxth	r2, r3
  40b5fa:	68fb      	ldr	r3, [r7, #12]
  40b5fc:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40b600:	68fb      	ldr	r3, [r7, #12]
  40b602:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40b606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b60a:	d103      	bne.n	40b614 <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  40b60c:	68fb      	ldr	r3, [r7, #12]
  40b60e:	2201      	movs	r2, #1
  40b610:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  40b614:	68fb      	ldr	r3, [r7, #12]
  40b616:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  40b61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b61e:	d103      	bne.n	40b628 <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  40b620:	68fb      	ldr	r3, [r7, #12]
  40b622:	2200      	movs	r2, #0
  40b624:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  40b628:	68fb      	ldr	r3, [r7, #12]
  40b62a:	2201      	movs	r2, #1
  40b62c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  40b630:	687b      	ldr	r3, [r7, #4]
  40b632:	681b      	ldr	r3, [r3, #0]
  40b634:	4618      	mov	r0, r3
  40b636:	f44f 7100 	mov.w	r1, #512	; 0x200
  40b63a:	4b05      	ldr	r3, [pc, #20]	; (40b650 <drv_uart_putChar+0xe4>)
  40b63c:	4798      	blx	r3
	return status;	
  40b63e:	7dfb      	ldrb	r3, [r7, #23]
}
  40b640:	4618      	mov	r0, r3
  40b642:	3718      	adds	r7, #24
  40b644:	46bd      	mov	sp, r7
  40b646:	bd80      	pop	{r7, pc}
  40b648:	004045f1 	.word	0x004045f1
  40b64c:	200022a4 	.word	0x200022a4
  40b650:	004045d5 	.word	0x004045d5

0040b654 <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  40b654:	b580      	push	{r7, lr}
  40b656:	b084      	sub	sp, #16
  40b658:	af00      	add	r7, sp, #0
  40b65a:	6078      	str	r0, [r7, #4]
  40b65c:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  40b65e:	2300      	movs	r3, #0
  40b660:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  40b662:	687b      	ldr	r3, [r7, #4]
  40b664:	695a      	ldr	r2, [r3, #20]
  40b666:	4917      	ldr	r1, [pc, #92]	; (40b6c4 <drv_uart_getChar+0x70>)
  40b668:	4613      	mov	r3, r2
  40b66a:	015b      	lsls	r3, r3, #5
  40b66c:	4413      	add	r3, r2
  40b66e:	015b      	lsls	r3, r3, #5
  40b670:	440b      	add	r3, r1
  40b672:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b676:	79db      	ldrb	r3, [r3, #7]
  40b678:	b2db      	uxtb	r3, r3
  40b67a:	2b01      	cmp	r3, #1
  40b67c:	d11a      	bne.n	40b6b4 <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  40b67e:	687b      	ldr	r3, [r7, #4]
  40b680:	681b      	ldr	r3, [r3, #0]
  40b682:	4618      	mov	r0, r3
  40b684:	2101      	movs	r1, #1
  40b686:	4b10      	ldr	r3, [pc, #64]	; (40b6c8 <drv_uart_getChar+0x74>)
  40b688:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  40b68a:	687b      	ldr	r3, [r7, #4]
  40b68c:	695a      	ldr	r2, [r3, #20]
  40b68e:	4613      	mov	r3, r2
  40b690:	015b      	lsls	r3, r3, #5
  40b692:	4413      	add	r3, r2
  40b694:	015b      	lsls	r3, r3, #5
  40b696:	4a0b      	ldr	r2, [pc, #44]	; (40b6c4 <drv_uart_getChar+0x70>)
  40b698:	4413      	add	r3, r2
  40b69a:	4618      	mov	r0, r3
  40b69c:	6839      	ldr	r1, [r7, #0]
  40b69e:	4b0b      	ldr	r3, [pc, #44]	; (40b6cc <drv_uart_getChar+0x78>)
  40b6a0:	4798      	blx	r3
  40b6a2:	4603      	mov	r3, r0
  40b6a4:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  40b6a6:	687b      	ldr	r3, [r7, #4]
  40b6a8:	681b      	ldr	r3, [r3, #0]
  40b6aa:	4618      	mov	r0, r3
  40b6ac:	2101      	movs	r1, #1
  40b6ae:	4b08      	ldr	r3, [pc, #32]	; (40b6d0 <drv_uart_getChar+0x7c>)
  40b6b0:	4798      	blx	r3
  40b6b2:	e001      	b.n	40b6b8 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  40b6b4:	2302      	movs	r3, #2
  40b6b6:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  40b6b8:	7bfb      	ldrb	r3, [r7, #15]
}
  40b6ba:	4618      	mov	r0, r3
  40b6bc:	3710      	adds	r7, #16
  40b6be:	46bd      	mov	sp, r7
  40b6c0:	bd80      	pop	{r7, pc}
  40b6c2:	bf00      	nop
  40b6c4:	200022a4 	.word	0x200022a4
  40b6c8:	004045f1 	.word	0x004045f1
  40b6cc:	0040bbad 	.word	0x0040bbad
  40b6d0:	004045d5 	.word	0x004045d5

0040b6d4 <drv_uart_deInit>:
 * @brief puts the uart driver in a deinitialized state
 * @param uartConfig, the configuration structure for the uart, 
 * @return STATUS_PASS if successful,	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_deInit(drv_uart_config_t* uartConfig)
{
  40b6d4:	b580      	push	{r7, lr}
  40b6d6:	b084      	sub	sp, #16
  40b6d8:	af00      	add	r7, sp, #0
  40b6da:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40b6dc:	2300      	movs	r3, #0
  40b6de:	73fb      	strb	r3, [r7, #15]
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40b6e0:	687b      	ldr	r3, [r7, #4]
  40b6e2:	681b      	ldr	r3, [r3, #0]
  40b6e4:	4618      	mov	r0, r3
  40b6e6:	f04f 31ff 	mov.w	r1, #4294967295
  40b6ea:	4b09      	ldr	r3, [pc, #36]	; (40b710 <drv_uart_deInit+0x3c>)
  40b6ec:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].isinit = false;	
  40b6ee:	687b      	ldr	r3, [r7, #4]
  40b6f0:	695a      	ldr	r2, [r3, #20]
  40b6f2:	4908      	ldr	r1, [pc, #32]	; (40b714 <drv_uart_deInit+0x40>)
  40b6f4:	4613      	mov	r3, r2
  40b6f6:	015b      	lsls	r3, r3, #5
  40b6f8:	4413      	add	r3, r2
  40b6fa:	015b      	lsls	r3, r3, #5
  40b6fc:	440b      	add	r3, r1
  40b6fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b702:	2200      	movs	r2, #0
  40b704:	719a      	strb	r2, [r3, #6]
	return status;	
  40b706:	7bfb      	ldrb	r3, [r7, #15]
}
  40b708:	4618      	mov	r0, r3
  40b70a:	3710      	adds	r7, #16
  40b70c:	46bd      	mov	sp, r7
  40b70e:	bd80      	pop	{r7, pc}
  40b710:	004045f1 	.word	0x004045f1
  40b714:	200022a4 	.word	0x200022a4

0040b718 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  40b718:	b480      	push	{r7}
  40b71a:	b083      	sub	sp, #12
  40b71c:	af00      	add	r7, sp, #0
  40b71e:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  40b720:	687b      	ldr	r3, [r7, #4]
  40b722:	695a      	ldr	r2, [r3, #20]
  40b724:	490a      	ldr	r1, [pc, #40]	; (40b750 <drv_uart_isInit+0x38>)
  40b726:	4613      	mov	r3, r2
  40b728:	015b      	lsls	r3, r3, #5
  40b72a:	4413      	add	r3, r2
  40b72c:	015b      	lsls	r3, r3, #5
  40b72e:	440b      	add	r3, r1
  40b730:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b734:	799b      	ldrb	r3, [r3, #6]
  40b736:	b2db      	uxtb	r3, r3
  40b738:	2b00      	cmp	r3, #0
  40b73a:	d001      	beq.n	40b740 <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  40b73c:	2300      	movs	r3, #0
  40b73e:	e000      	b.n	40b742 <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  40b740:	2301      	movs	r3, #1
	}
}
  40b742:	4618      	mov	r0, r3
  40b744:	370c      	adds	r7, #12
  40b746:	46bd      	mov	sp, r7
  40b748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b74c:	4770      	bx	lr
  40b74e:	bf00      	nop
  40b750:	200022a4 	.word	0x200022a4

0040b754 <drv_uart_getDroppedBytes>:
uint32_t drv_uart_getDroppedBytes(drv_uart_config_t* uartConfig)
{
  40b754:	b480      	push	{r7}
  40b756:	b083      	sub	sp, #12
  40b758:	af00      	add	r7, sp, #0
  40b75a:	6078      	str	r0, [r7, #4]
	return uartMemBuf[uartConfig->mem_index].uart_rx_fifo_dropped_bytes;
  40b75c:	687b      	ldr	r3, [r7, #4]
  40b75e:	695a      	ldr	r2, [r3, #20]
  40b760:	4907      	ldr	r1, [pc, #28]	; (40b780 <drv_uart_getDroppedBytes+0x2c>)
  40b762:	4613      	mov	r3, r2
  40b764:	015b      	lsls	r3, r3, #5
  40b766:	4413      	add	r3, r2
  40b768:	015b      	lsls	r3, r3, #5
  40b76a:	440b      	add	r3, r1
  40b76c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40b770:	685b      	ldr	r3, [r3, #4]
}
  40b772:	4618      	mov	r0, r3
  40b774:	370c      	adds	r7, #12
  40b776:	46bd      	mov	sp, r7
  40b778:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b77c:	4770      	bx	lr
  40b77e:	bf00      	nop
  40b780:	200022a4 	.word	0x200022a4

0040b784 <drv_uart_getline>:
 * @param str the pointer to the buffer where the string will be stored
 * @param strSize the size of the buffer that can be used to store the string
 * @return STATUS_PASS if a string is returned,	STATUS_FAIL if the string found is larger than the buffer. 
 ***********************************************************************************************/	
status_t drv_uart_getline(drv_uart_config_t* uartConfig, char* str, size_t strSize)
{
  40b784:	b580      	push	{r7, lr}
  40b786:	b088      	sub	sp, #32
  40b788:	af00      	add	r7, sp, #0
  40b78a:	60f8      	str	r0, [r7, #12]
  40b78c:	60b9      	str	r1, [r7, #8]
  40b78e:	607a      	str	r2, [r7, #4]
	status_t result = STATUS_PASS;
  40b790:	2300      	movs	r3, #0
  40b792:	77fb      	strb	r3, [r7, #31]
	char val;
	int pointer = 0;
  40b794:	2300      	movs	r3, #0
  40b796:	61bb      	str	r3, [r7, #24]
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
  40b798:	f107 0317 	add.w	r3, r7, #23
  40b79c:	68f8      	ldr	r0, [r7, #12]
  40b79e:	4619      	mov	r1, r3
  40b7a0:	4b1b      	ldr	r3, [pc, #108]	; (40b810 <drv_uart_getline+0x8c>)
  40b7a2:	4798      	blx	r3
  40b7a4:	4603      	mov	r3, r0
  40b7a6:	77fb      	strb	r3, [r7, #31]
		if(result != STATUS_EOF && val != NULL)
  40b7a8:	7ffb      	ldrb	r3, [r7, #31]
  40b7aa:	2b02      	cmp	r3, #2
  40b7ac:	d027      	beq.n	40b7fe <drv_uart_getline+0x7a>
  40b7ae:	7dfb      	ldrb	r3, [r7, #23]
  40b7b0:	2b00      	cmp	r3, #0
  40b7b2:	d024      	beq.n	40b7fe <drv_uart_getline+0x7a>
		{
			if(pointer < strSize)
  40b7b4:	69ba      	ldr	r2, [r7, #24]
  40b7b6:	687b      	ldr	r3, [r7, #4]
  40b7b8:	429a      	cmp	r2, r3
  40b7ba:	d213      	bcs.n	40b7e4 <drv_uart_getline+0x60>
			{
				str[pointer++] = val; //add the result;
  40b7bc:	69bb      	ldr	r3, [r7, #24]
  40b7be:	1c5a      	adds	r2, r3, #1
  40b7c0:	61ba      	str	r2, [r7, #24]
  40b7c2:	68ba      	ldr	r2, [r7, #8]
  40b7c4:	4413      	add	r3, r2
  40b7c6:	7dfa      	ldrb	r2, [r7, #23]
  40b7c8:	701a      	strb	r2, [r3, #0]
				if(val == '\n')
  40b7ca:	7dfb      	ldrb	r3, [r7, #23]
  40b7cc:	2b0a      	cmp	r3, #10
  40b7ce:	d114      	bne.n	40b7fa <drv_uart_getline+0x76>
				{
					str[pointer] = NULL; //terminate the string
  40b7d0:	69bb      	ldr	r3, [r7, #24]
  40b7d2:	68ba      	ldr	r2, [r7, #8]
  40b7d4:	4413      	add	r3, r2
  40b7d6:	2200      	movs	r2, #0
  40b7d8:	701a      	strb	r2, [r3, #0]
					result = STATUS_PASS;
  40b7da:	2300      	movs	r3, #0
  40b7dc:	77fb      	strb	r3, [r7, #31]
					pointer = 0; //reset the pointer.
  40b7de:	2300      	movs	r3, #0
  40b7e0:	61bb      	str	r3, [r7, #24]
					break;
  40b7e2:	e010      	b.n	40b806 <drv_uart_getline+0x82>
				}
			}
			else
			{
				//we overwrote the buffer
				result = STATUS_FAIL;
  40b7e4:	2301      	movs	r3, #1
  40b7e6:	77fb      	strb	r3, [r7, #31]
				str[strSize - 1] = NULL; //terminate what's in the buffer.
  40b7e8:	687b      	ldr	r3, [r7, #4]
  40b7ea:	3b01      	subs	r3, #1
  40b7ec:	68ba      	ldr	r2, [r7, #8]
  40b7ee:	4413      	add	r3, r2
  40b7f0:	2200      	movs	r2, #0
  40b7f2:	701a      	strb	r2, [r3, #0]
				pointer = 0;
  40b7f4:	2300      	movs	r3, #0
  40b7f6:	61bb      	str	r3, [r7, #24]
				break;
  40b7f8:	e005      	b.n	40b806 <drv_uart_getline+0x82>
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
		if(result != STATUS_EOF && val != NULL)
		{
			if(pointer < strSize)
  40b7fa:	bf00      	nop
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
		}
		
	}
  40b7fc:	e7cc      	b.n	40b798 <drv_uart_getline+0x14>
			//vTaskDelay(1);
		}
		else
		{
			//taskYIELD(); 
			vTaskDelay(1); //let the other processes do stuff	
  40b7fe:	2001      	movs	r0, #1
  40b800:	4b04      	ldr	r3, [pc, #16]	; (40b814 <drv_uart_getline+0x90>)
  40b802:	4798      	blx	r3
		}
		
	}
  40b804:	e7c8      	b.n	40b798 <drv_uart_getline+0x14>
	return result; 
  40b806:	7ffb      	ldrb	r3, [r7, #31]
}
  40b808:	4618      	mov	r0, r3
  40b80a:	3720      	adds	r7, #32
  40b80c:	46bd      	mov	sp, r7
  40b80e:	bd80      	pop	{r7, pc}
  40b810:	0040b655 	.word	0x0040b655
  40b814:	00408855 	.word	0x00408855

0040b818 <drv_uart_getlineTimed>:
 * @param strSize the size of the buffer that can be used to store the string
 * @param maxTime the maximum time in ticks the function should wait for the response. 
 * @return STATUS_PASS if a string is returned,	STATUS_FAIL if the string found is larger than the buffer, or timed out
 ***********************************************************************************************/	
status_t drv_uart_getlineTimed(drv_uart_config_t* uartConfig, char* str, size_t strSize, uint32_t maxTime)
{
  40b818:	b580      	push	{r7, lr}
  40b81a:	b088      	sub	sp, #32
  40b81c:	af00      	add	r7, sp, #0
  40b81e:	60f8      	str	r0, [r7, #12]
  40b820:	60b9      	str	r1, [r7, #8]
  40b822:	607a      	str	r2, [r7, #4]
  40b824:	603b      	str	r3, [r7, #0]
	status_t result = STATUS_PASS;
  40b826:	2300      	movs	r3, #0
  40b828:	77fb      	strb	r3, [r7, #31]
	char val;
	int pointer = 0;
  40b82a:	2300      	movs	r3, #0
  40b82c:	61bb      	str	r3, [r7, #24]
	uint32_t startTime = sgSysTickCount; 
  40b82e:	4b24      	ldr	r3, [pc, #144]	; (40b8c0 <drv_uart_getlineTimed+0xa8>)
  40b830:	681b      	ldr	r3, [r3, #0]
  40b832:	617b      	str	r3, [r7, #20]
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
  40b834:	f107 0313 	add.w	r3, r7, #19
  40b838:	68f8      	ldr	r0, [r7, #12]
  40b83a:	4619      	mov	r1, r3
  40b83c:	4b21      	ldr	r3, [pc, #132]	; (40b8c4 <drv_uart_getlineTimed+0xac>)
  40b83e:	4798      	blx	r3
  40b840:	4603      	mov	r3, r0
  40b842:	77fb      	strb	r3, [r7, #31]
		if(result != STATUS_EOF && val != NULL)
  40b844:	7ffb      	ldrb	r3, [r7, #31]
  40b846:	2b02      	cmp	r3, #2
  40b848:	d027      	beq.n	40b89a <drv_uart_getlineTimed+0x82>
  40b84a:	7cfb      	ldrb	r3, [r7, #19]
  40b84c:	2b00      	cmp	r3, #0
  40b84e:	d024      	beq.n	40b89a <drv_uart_getlineTimed+0x82>
		{
			if(pointer < strSize)
  40b850:	69ba      	ldr	r2, [r7, #24]
  40b852:	687b      	ldr	r3, [r7, #4]
  40b854:	429a      	cmp	r2, r3
  40b856:	d213      	bcs.n	40b880 <drv_uart_getlineTimed+0x68>
			{
				str[pointer++] = val; //add the result;
  40b858:	69bb      	ldr	r3, [r7, #24]
  40b85a:	1c5a      	adds	r2, r3, #1
  40b85c:	61ba      	str	r2, [r7, #24]
  40b85e:	68ba      	ldr	r2, [r7, #8]
  40b860:	4413      	add	r3, r2
  40b862:	7cfa      	ldrb	r2, [r7, #19]
  40b864:	701a      	strb	r2, [r3, #0]
				if(val == '\n')
  40b866:	7cfb      	ldrb	r3, [r7, #19]
  40b868:	2b0a      	cmp	r3, #10
  40b86a:	d114      	bne.n	40b896 <drv_uart_getlineTimed+0x7e>
				{
					str[pointer] = NULL; //terminate the string
  40b86c:	69bb      	ldr	r3, [r7, #24]
  40b86e:	68ba      	ldr	r2, [r7, #8]
  40b870:	4413      	add	r3, r2
  40b872:	2200      	movs	r2, #0
  40b874:	701a      	strb	r2, [r3, #0]
					result = STATUS_PASS;
  40b876:	2300      	movs	r3, #0
  40b878:	77fb      	strb	r3, [r7, #31]
					pointer = 0; //reset the pointer.
  40b87a:	2300      	movs	r3, #0
  40b87c:	61bb      	str	r3, [r7, #24]
					break;
  40b87e:	e01a      	b.n	40b8b6 <drv_uart_getlineTimed+0x9e>
				}
			}
			else
			{
				//we overwrote the buffer
				result = STATUS_FAIL;
  40b880:	2301      	movs	r3, #1
  40b882:	77fb      	strb	r3, [r7, #31]
				str[strSize - 1] = NULL; //terminate what's in the buffer.
  40b884:	687b      	ldr	r3, [r7, #4]
  40b886:	3b01      	subs	r3, #1
  40b888:	68ba      	ldr	r2, [r7, #8]
  40b88a:	4413      	add	r3, r2
  40b88c:	2200      	movs	r2, #0
  40b88e:	701a      	strb	r2, [r3, #0]
				pointer = 0;
  40b890:	2300      	movs	r3, #0
  40b892:	61bb      	str	r3, [r7, #24]
				break;
  40b894:	e00f      	b.n	40b8b6 <drv_uart_getlineTimed+0x9e>
	while(1) //TODO add timeout
	{
		result = drv_uart_getChar(uartConfig,&val);
		if(result != STATUS_EOF && val != NULL)
		{
			if(pointer < strSize)
  40b896:	bf00      	nop
				break;
			}
			vTaskDelay(1); //let the other processes do stuff	
		}
		
	}
  40b898:	e7cc      	b.n	40b834 <drv_uart_getlineTimed+0x1c>
			}
		}
		else
		{
			//check if we've timed out yet... 
			if(sgSysTickCount > (startTime + maxTime))
  40b89a:	697a      	ldr	r2, [r7, #20]
  40b89c:	683b      	ldr	r3, [r7, #0]
  40b89e:	441a      	add	r2, r3
  40b8a0:	4b07      	ldr	r3, [pc, #28]	; (40b8c0 <drv_uart_getlineTimed+0xa8>)
  40b8a2:	681b      	ldr	r3, [r3, #0]
  40b8a4:	429a      	cmp	r2, r3
  40b8a6:	d202      	bcs.n	40b8ae <drv_uart_getlineTimed+0x96>
			{
				//return fail, we've timed out. 
				result = STATUS_FAIL; 
  40b8a8:	2301      	movs	r3, #1
  40b8aa:	77fb      	strb	r3, [r7, #31]
				break;
  40b8ac:	e003      	b.n	40b8b6 <drv_uart_getlineTimed+0x9e>
			}
			vTaskDelay(1); //let the other processes do stuff	
  40b8ae:	2001      	movs	r0, #1
  40b8b0:	4b05      	ldr	r3, [pc, #20]	; (40b8c8 <drv_uart_getlineTimed+0xb0>)
  40b8b2:	4798      	blx	r3
		}
		
	}
  40b8b4:	e7be      	b.n	40b834 <drv_uart_getlineTimed+0x1c>
	return result; 
  40b8b6:	7ffb      	ldrb	r3, [r7, #31]
}
  40b8b8:	4618      	mov	r0, r3
  40b8ba:	3720      	adds	r7, #32
  40b8bc:	46bd      	mov	sp, r7
  40b8be:	bd80      	pop	{r7, pc}
  40b8c0:	20001f3c 	.word	0x20001f3c
  40b8c4:	0040b655 	.word	0x0040b655
  40b8c8:	00408855 	.word	0x00408855

0040b8cc <drv_uart_putString>:


void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
  40b8cc:	b580      	push	{r7, lr}
  40b8ce:	b084      	sub	sp, #16
  40b8d0:	af00      	add	r7, sp, #0
  40b8d2:	6078      	str	r0, [r7, #4]
  40b8d4:	6039      	str	r1, [r7, #0]
	int i=0;
  40b8d6:	2300      	movs	r3, #0
  40b8d8:	60fb      	str	r3, [r7, #12]
	int size = strlen(str);
  40b8da:	6838      	ldr	r0, [r7, #0]
  40b8dc:	4b0d      	ldr	r3, [pc, #52]	; (40b914 <drv_uart_putString+0x48>)
  40b8de:	4798      	blx	r3
  40b8e0:	4603      	mov	r3, r0
  40b8e2:	60bb      	str	r3, [r7, #8]

	for (i=0;i<size;)
  40b8e4:	2300      	movs	r3, #0
  40b8e6:	60fb      	str	r3, [r7, #12]
  40b8e8:	e00d      	b.n	40b906 <drv_uart_putString+0x3a>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  40b8ea:	68fb      	ldr	r3, [r7, #12]
  40b8ec:	683a      	ldr	r2, [r7, #0]
  40b8ee:	4413      	add	r3, r2
  40b8f0:	781b      	ldrb	r3, [r3, #0]
  40b8f2:	6878      	ldr	r0, [r7, #4]
  40b8f4:	4619      	mov	r1, r3
  40b8f6:	4b08      	ldr	r3, [pc, #32]	; (40b918 <drv_uart_putString+0x4c>)
  40b8f8:	4798      	blx	r3
  40b8fa:	4603      	mov	r3, r0
  40b8fc:	2b00      	cmp	r3, #0
  40b8fe:	d102      	bne.n	40b906 <drv_uart_putString+0x3a>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  40b900:	68fb      	ldr	r3, [r7, #12]
  40b902:	3301      	adds	r3, #1
  40b904:	60fb      	str	r3, [r7, #12]
void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
	int i=0;
	int size = strlen(str);

	for (i=0;i<size;)
  40b906:	68fa      	ldr	r2, [r7, #12]
  40b908:	68bb      	ldr	r3, [r7, #8]
  40b90a:	429a      	cmp	r2, r3
  40b90c:	dbed      	blt.n	40b8ea <drv_uart_putString+0x1e>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  40b90e:	3710      	adds	r7, #16
  40b910:	46bd      	mov	sp, r7
  40b912:	bd80      	pop	{r7, pc}
  40b914:	0040f819 	.word	0x0040f819
  40b918:	0040b56d 	.word	0x0040b56d

0040b91c <drv_uart_flushRx>:

void drv_uart_flushRx(drv_uart_config_t* uartConfig)
{
  40b91c:	b580      	push	{r7, lr}
  40b91e:	b082      	sub	sp, #8
  40b920:	af00      	add	r7, sp, #0
  40b922:	6078      	str	r0, [r7, #4]
	//clear the buffer
	if(drv_uart_isInit(uartConfig) == STATUS_PASS)
  40b924:	6878      	ldr	r0, [r7, #4]
  40b926:	4b35      	ldr	r3, [pc, #212]	; (40b9fc <drv_uart_flushRx+0xe0>)
  40b928:	4798      	blx	r3
  40b92a:	4603      	mov	r3, r0
  40b92c:	2b00      	cmp	r3, #0
  40b92e:	d161      	bne.n	40b9f4 <drv_uart_flushRx+0xd8>
	{	
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  40b930:	687b      	ldr	r3, [r7, #4]
  40b932:	681b      	ldr	r3, [r3, #0]
  40b934:	4618      	mov	r0, r3
  40b936:	2101      	movs	r1, #1
  40b938:	4b31      	ldr	r3, [pc, #196]	; (40ba00 <drv_uart_flushRx+0xe4>)
  40b93a:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers				
		memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40b93c:	687b      	ldr	r3, [r7, #4]
  40b93e:	695a      	ldr	r2, [r3, #20]
  40b940:	4613      	mov	r3, r2
  40b942:	015b      	lsls	r3, r3, #5
  40b944:	4413      	add	r3, r2
  40b946:	015b      	lsls	r3, r3, #5
  40b948:	4a2e      	ldr	r2, [pc, #184]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b94a:	4413      	add	r3, r2
  40b94c:	4618      	mov	r0, r3
  40b94e:	2100      	movs	r1, #0
  40b950:	f44f 7200 	mov.w	r2, #512	; 0x200
  40b954:	4b2c      	ldr	r3, [pc, #176]	; (40ba08 <drv_uart_flushRx+0xec>)
  40b956:	4798      	blx	r3
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40b958:	687b      	ldr	r3, [r7, #4]
  40b95a:	695a      	ldr	r2, [r3, #20]
  40b95c:	4929      	ldr	r1, [pc, #164]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b95e:	4613      	mov	r3, r2
  40b960:	015b      	lsls	r3, r3, #5
  40b962:	4413      	add	r3, r2
  40b964:	015b      	lsls	r3, r3, #5
  40b966:	440b      	add	r3, r1
  40b968:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b96c:	2200      	movs	r2, #0
  40b96e:	801a      	strh	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  40b970:	687b      	ldr	r3, [r7, #4]
  40b972:	695a      	ldr	r2, [r3, #20]
  40b974:	4923      	ldr	r1, [pc, #140]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b976:	4613      	mov	r3, r2
  40b978:	015b      	lsls	r3, r3, #5
  40b97a:	4413      	add	r3, r2
  40b97c:	015b      	lsls	r3, r3, #5
  40b97e:	440b      	add	r3, r1
  40b980:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b984:	2200      	movs	r2, #0
  40b986:	805a      	strh	r2, [r3, #2]
		uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  40b988:	687b      	ldr	r3, [r7, #4]
  40b98a:	695a      	ldr	r2, [r3, #20]
  40b98c:	491d      	ldr	r1, [pc, #116]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b98e:	4613      	mov	r3, r2
  40b990:	015b      	lsls	r3, r3, #5
  40b992:	4413      	add	r3, r2
  40b994:	015b      	lsls	r3, r3, #5
  40b996:	440b      	add	r3, r1
  40b998:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b99c:	2200      	movs	r2, #0
  40b99e:	809a      	strh	r2, [r3, #4]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40b9a0:	687b      	ldr	r3, [r7, #4]
  40b9a2:	695a      	ldr	r2, [r3, #20]
  40b9a4:	4917      	ldr	r1, [pc, #92]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b9a6:	4613      	mov	r3, r2
  40b9a8:	015b      	lsls	r3, r3, #5
  40b9aa:	4413      	add	r3, r2
  40b9ac:	015b      	lsls	r3, r3, #5
  40b9ae:	440b      	add	r3, r1
  40b9b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40b9b4:	2200      	movs	r2, #0
  40b9b6:	701a      	strb	r2, [r3, #0]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  40b9b8:	687b      	ldr	r3, [r7, #4]
  40b9ba:	695a      	ldr	r2, [r3, #20]
  40b9bc:	4911      	ldr	r1, [pc, #68]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b9be:	4613      	mov	r3, r2
  40b9c0:	015b      	lsls	r3, r3, #5
  40b9c2:	4413      	add	r3, r2
  40b9c4:	015b      	lsls	r3, r3, #5
  40b9c6:	440b      	add	r3, r1
  40b9c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b9cc:	2200      	movs	r2, #0
  40b9ce:	71da      	strb	r2, [r3, #7]
		uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;		
  40b9d0:	687b      	ldr	r3, [r7, #4]
  40b9d2:	695a      	ldr	r2, [r3, #20]
  40b9d4:	490b      	ldr	r1, [pc, #44]	; (40ba04 <drv_uart_flushRx+0xe8>)
  40b9d6:	4613      	mov	r3, r2
  40b9d8:	015b      	lsls	r3, r3, #5
  40b9da:	4413      	add	r3, r2
  40b9dc:	015b      	lsls	r3, r3, #5
  40b9de:	440b      	add	r3, r1
  40b9e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40b9e4:	2200      	movs	r2, #0
  40b9e6:	705a      	strb	r2, [r3, #1]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);	
  40b9e8:	687b      	ldr	r3, [r7, #4]
  40b9ea:	681b      	ldr	r3, [r3, #0]
  40b9ec:	4618      	mov	r0, r3
  40b9ee:	2101      	movs	r1, #1
  40b9f0:	4b06      	ldr	r3, [pc, #24]	; (40ba0c <drv_uart_flushRx+0xf0>)
  40b9f2:	4798      	blx	r3
	}
}
  40b9f4:	3708      	adds	r7, #8
  40b9f6:	46bd      	mov	sp, r7
  40b9f8:	bd80      	pop	{r7, pc}
  40b9fa:	bf00      	nop
  40b9fc:	0040b719 	.word	0x0040b719
  40ba00:	004045f1 	.word	0x004045f1
  40ba04:	200022a4 	.word	0x200022a4
  40ba08:	0040f191 	.word	0x0040f191
  40ba0c:	004045d5 	.word	0x004045d5

0040ba10 <UART0_Handler>:

// interrupt handlers
void UART0_Handler()
{	
  40ba10:	b580      	push	{r7, lr}
  40ba12:	b082      	sub	sp, #8
  40ba14:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  40ba16:	4812      	ldr	r0, [pc, #72]	; (40ba60 <UART0_Handler+0x50>)
  40ba18:	4b12      	ldr	r3, [pc, #72]	; (40ba64 <UART0_Handler+0x54>)
  40ba1a:	4798      	blx	r3
  40ba1c:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40ba1e:	687b      	ldr	r3, [r7, #4]
  40ba20:	f003 0301 	and.w	r3, r3, #1
  40ba24:	2b00      	cmp	r3, #0
  40ba26:	d009      	beq.n	40ba3c <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  40ba28:	4b0f      	ldr	r3, [pc, #60]	; (40ba68 <UART0_Handler+0x58>)
  40ba2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  40ba2e:	b2db      	uxtb	r3, r3
  40ba30:	2b00      	cmp	r3, #0
  40ba32:	d003      	beq.n	40ba3c <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  40ba34:	480a      	ldr	r0, [pc, #40]	; (40ba60 <UART0_Handler+0x50>)
  40ba36:	490c      	ldr	r1, [pc, #48]	; (40ba68 <UART0_Handler+0x58>)
  40ba38:	4b0c      	ldr	r3, [pc, #48]	; (40ba6c <UART0_Handler+0x5c>)
  40ba3a:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40ba3c:	687b      	ldr	r3, [r7, #4]
  40ba3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40ba42:	2b00      	cmp	r3, #0
  40ba44:	d009      	beq.n	40ba5a <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  40ba46:	4b08      	ldr	r3, [pc, #32]	; (40ba68 <UART0_Handler+0x58>)
  40ba48:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  40ba4c:	b2db      	uxtb	r3, r3
  40ba4e:	2b00      	cmp	r3, #0
  40ba50:	d003      	beq.n	40ba5a <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  40ba52:	4803      	ldr	r0, [pc, #12]	; (40ba60 <UART0_Handler+0x50>)
  40ba54:	4904      	ldr	r1, [pc, #16]	; (40ba68 <UART0_Handler+0x58>)
  40ba56:	4b06      	ldr	r3, [pc, #24]	; (40ba70 <UART0_Handler+0x60>)
  40ba58:	4798      	blx	r3
		}
	}	
}
  40ba5a:	3708      	adds	r7, #8
  40ba5c:	46bd      	mov	sp, r7
  40ba5e:	bd80      	pop	{r7, pc}
  40ba60:	400e0600 	.word	0x400e0600
  40ba64:	0040438d 	.word	0x0040438d
  40ba68:	200022a4 	.word	0x200022a4
  40ba6c:	0040bc39 	.word	0x0040bc39
  40ba70:	0040bcfd 	.word	0x0040bcfd

0040ba74 <UART1_Handler>:

void UART1_Handler()
{
  40ba74:	b580      	push	{r7, lr}
  40ba76:	b082      	sub	sp, #8
  40ba78:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  40ba7a:	4812      	ldr	r0, [pc, #72]	; (40bac4 <UART1_Handler+0x50>)
  40ba7c:	4b12      	ldr	r3, [pc, #72]	; (40bac8 <UART1_Handler+0x54>)
  40ba7e:	4798      	blx	r3
  40ba80:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40ba82:	687b      	ldr	r3, [r7, #4]
  40ba84:	f003 0301 	and.w	r3, r3, #1
  40ba88:	2b00      	cmp	r3, #0
  40ba8a:	d009      	beq.n	40baa0 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  40ba8c:	4b0f      	ldr	r3, [pc, #60]	; (40bacc <UART1_Handler+0x58>)
  40ba8e:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  40ba92:	b2db      	uxtb	r3, r3
  40ba94:	2b00      	cmp	r3, #0
  40ba96:	d003      	beq.n	40baa0 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  40ba98:	480a      	ldr	r0, [pc, #40]	; (40bac4 <UART1_Handler+0x50>)
  40ba9a:	490d      	ldr	r1, [pc, #52]	; (40bad0 <UART1_Handler+0x5c>)
  40ba9c:	4b0d      	ldr	r3, [pc, #52]	; (40bad4 <UART1_Handler+0x60>)
  40ba9e:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40baa0:	687b      	ldr	r3, [r7, #4]
  40baa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40baa6:	2b00      	cmp	r3, #0
  40baa8:	d009      	beq.n	40babe <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  40baaa:	4b08      	ldr	r3, [pc, #32]	; (40bacc <UART1_Handler+0x58>)
  40baac:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  40bab0:	b2db      	uxtb	r3, r3
  40bab2:	2b00      	cmp	r3, #0
  40bab4:	d003      	beq.n	40babe <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  40bab6:	4803      	ldr	r0, [pc, #12]	; (40bac4 <UART1_Handler+0x50>)
  40bab8:	4905      	ldr	r1, [pc, #20]	; (40bad0 <UART1_Handler+0x5c>)
  40baba:	4b07      	ldr	r3, [pc, #28]	; (40bad8 <UART1_Handler+0x64>)
  40babc:	4798      	blx	r3
		}
	}
}
  40babe:	3708      	adds	r7, #8
  40bac0:	46bd      	mov	sp, r7
  40bac2:	bd80      	pop	{r7, pc}
  40bac4:	400e0800 	.word	0x400e0800
  40bac8:	0040438d 	.word	0x0040438d
  40bacc:	200022a4 	.word	0x200022a4
  40bad0:	200026c4 	.word	0x200026c4
  40bad4:	0040bc39 	.word	0x0040bc39
  40bad8:	0040bcfd 	.word	0x0040bcfd

0040badc <USART0_Handler>:

void USART0_Handler()
{
  40badc:	b580      	push	{r7, lr}
  40bade:	b082      	sub	sp, #8
  40bae0:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  40bae2:	4812      	ldr	r0, [pc, #72]	; (40bb2c <USART0_Handler+0x50>)
  40bae4:	4b12      	ldr	r3, [pc, #72]	; (40bb30 <USART0_Handler+0x54>)
  40bae6:	4798      	blx	r3
  40bae8:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40baea:	687b      	ldr	r3, [r7, #4]
  40baec:	f003 0301 	and.w	r3, r3, #1
  40baf0:	2b00      	cmp	r3, #0
  40baf2:	d009      	beq.n	40bb08 <USART0_Handler+0x2c>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  40baf4:	4b0f      	ldr	r3, [pc, #60]	; (40bb34 <USART0_Handler+0x58>)
  40baf6:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  40bafa:	b2db      	uxtb	r3, r3
  40bafc:	2b00      	cmp	r3, #0
  40bafe:	d003      	beq.n	40bb08 <USART0_Handler+0x2c>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  40bb00:	480a      	ldr	r0, [pc, #40]	; (40bb2c <USART0_Handler+0x50>)
  40bb02:	490d      	ldr	r1, [pc, #52]	; (40bb38 <USART0_Handler+0x5c>)
  40bb04:	4b0d      	ldr	r3, [pc, #52]	; (40bb3c <USART0_Handler+0x60>)
  40bb06:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40bb08:	687b      	ldr	r3, [r7, #4]
  40bb0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40bb0e:	2b00      	cmp	r3, #0
  40bb10:	d009      	beq.n	40bb26 <USART0_Handler+0x4a>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  40bb12:	4b08      	ldr	r3, [pc, #32]	; (40bb34 <USART0_Handler+0x58>)
  40bb14:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  40bb18:	b2db      	uxtb	r3, r3
  40bb1a:	2b00      	cmp	r3, #0
  40bb1c:	d003      	beq.n	40bb26 <USART0_Handler+0x4a>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  40bb1e:	4803      	ldr	r0, [pc, #12]	; (40bb2c <USART0_Handler+0x50>)
  40bb20:	4905      	ldr	r1, [pc, #20]	; (40bb38 <USART0_Handler+0x5c>)
  40bb22:	4b07      	ldr	r3, [pc, #28]	; (40bb40 <USART0_Handler+0x64>)
  40bb24:	4798      	blx	r3
		}
	}	
}
  40bb26:	3708      	adds	r7, #8
  40bb28:	46bd      	mov	sp, r7
  40bb2a:	bd80      	pop	{r7, pc}
  40bb2c:	40024000 	.word	0x40024000
  40bb30:	0040438d 	.word	0x0040438d
  40bb34:	200022a4 	.word	0x200022a4
  40bb38:	20002ae4 	.word	0x20002ae4
  40bb3c:	0040bc39 	.word	0x0040bc39
  40bb40:	0040bcfd 	.word	0x0040bcfd

0040bb44 <USART1_Handler>:

void USART1_Handler()
{
  40bb44:	b580      	push	{r7, lr}
  40bb46:	b082      	sub	sp, #8
  40bb48:	af00      	add	r7, sp, #0
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  40bb4a:	4812      	ldr	r0, [pc, #72]	; (40bb94 <USART1_Handler+0x50>)
  40bb4c:	4b12      	ldr	r3, [pc, #72]	; (40bb98 <USART1_Handler+0x54>)
  40bb4e:	4798      	blx	r3
  40bb50:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  40bb52:	687b      	ldr	r3, [r7, #4]
  40bb54:	f003 0301 	and.w	r3, r3, #1
  40bb58:	2b00      	cmp	r3, #0
  40bb5a:	d009      	beq.n	40bb70 <USART1_Handler+0x2c>
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  40bb5c:	4b0f      	ldr	r3, [pc, #60]	; (40bb9c <USART1_Handler+0x58>)
  40bb5e:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  40bb62:	b2db      	uxtb	r3, r3
  40bb64:	2b00      	cmp	r3, #0
  40bb66:	d003      	beq.n	40bb70 <USART1_Handler+0x2c>
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
  40bb68:	480a      	ldr	r0, [pc, #40]	; (40bb94 <USART1_Handler+0x50>)
  40bb6a:	490d      	ldr	r1, [pc, #52]	; (40bba0 <USART1_Handler+0x5c>)
  40bb6c:	4b0d      	ldr	r3, [pc, #52]	; (40bba4 <USART1_Handler+0x60>)
  40bb6e:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  40bb70:	687b      	ldr	r3, [r7, #4]
  40bb72:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40bb76:	2b00      	cmp	r3, #0
  40bb78:	d009      	beq.n	40bb8e <USART1_Handler+0x4a>
	{
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  40bb7a:	4b08      	ldr	r3, [pc, #32]	; (40bb9c <USART1_Handler+0x58>)
  40bb7c:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  40bb80:	b2db      	uxtb	r3, r3
  40bb82:	2b00      	cmp	r3, #0
  40bb84:	d003      	beq.n	40bb8e <USART1_Handler+0x4a>
		{
			uart_process_tx_byte(USART1, &(uartMemBuf[3])); 	
  40bb86:	4803      	ldr	r0, [pc, #12]	; (40bb94 <USART1_Handler+0x50>)
  40bb88:	4905      	ldr	r1, [pc, #20]	; (40bba0 <USART1_Handler+0x5c>)
  40bb8a:	4b07      	ldr	r3, [pc, #28]	; (40bba8 <USART1_Handler+0x64>)
  40bb8c:	4798      	blx	r3
		}
	}	
}
  40bb8e:	3708      	adds	r7, #8
  40bb90:	46bd      	mov	sp, r7
  40bb92:	bd80      	pop	{r7, pc}
  40bb94:	40028000 	.word	0x40028000
  40bb98:	0040438d 	.word	0x0040438d
  40bb9c:	200022a4 	.word	0x200022a4
  40bba0:	20002f04 	.word	0x20002f04
  40bba4:	0040bc39 	.word	0x0040bc39
  40bba8:	0040bcfd 	.word	0x0040bcfd

0040bbac <uart_get_byte>:


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  40bbac:	b480      	push	{r7}
  40bbae:	b085      	sub	sp, #20
  40bbb0:	af00      	add	r7, sp, #0
  40bbb2:	6078      	str	r0, [r7, #4]
  40bbb4:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  40bbb6:	2300      	movs	r3, #0
  40bbb8:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40bbba:	687b      	ldr	r3, [r7, #4]
  40bbbc:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bbc4:	d103      	bne.n	40bbce <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  40bbc6:	687b      	ldr	r3, [r7, #4]
  40bbc8:	2200      	movs	r2, #0
  40bbca:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  40bbce:	687b      	ldr	r3, [r7, #4]
  40bbd0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bbd4:	2b00      	cmp	r3, #0
  40bbd6:	d017      	beq.n	40bc08 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  40bbd8:	687b      	ldr	r3, [r7, #4]
  40bbda:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40bbde:	687a      	ldr	r2, [r7, #4]
  40bbe0:	5cd2      	ldrb	r2, [r2, r3]
  40bbe2:	683b      	ldr	r3, [r7, #0]
  40bbe4:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  40bbe6:	687b      	ldr	r3, [r7, #4]
  40bbe8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40bbec:	3301      	adds	r3, #1
  40bbee:	b29a      	uxth	r2, r3
  40bbf0:	687b      	ldr	r3, [r7, #4]
  40bbf2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  40bbf6:	687b      	ldr	r3, [r7, #4]
  40bbf8:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bbfc:	3b01      	subs	r3, #1
  40bbfe:	b29a      	uxth	r2, r3
  40bc00:	687b      	ldr	r3, [r7, #4]
  40bc02:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  40bc06:	e005      	b.n	40bc14 <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  40bc08:	687b      	ldr	r3, [r7, #4]
  40bc0a:	2200      	movs	r2, #0
  40bc0c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		status = STATUS_EOF;
  40bc10:	2302      	movs	r3, #2
  40bc12:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  40bc14:	687b      	ldr	r3, [r7, #4]
  40bc16:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  40bc1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bc1e:	d103      	bne.n	40bc28 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  40bc20:	687b      	ldr	r3, [r7, #4]
  40bc22:	2200      	movs	r2, #0
  40bc24:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}		
	return status;
  40bc28:	7bfb      	ldrb	r3, [r7, #15]
}
  40bc2a:	4618      	mov	r0, r3
  40bc2c:	3714      	adds	r7, #20
  40bc2e:	46bd      	mov	sp, r7
  40bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc34:	4770      	bx	lr
  40bc36:	bf00      	nop

0040bc38 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  40bc38:	b580      	push	{r7, lr}
  40bc3a:	b084      	sub	sp, #16
  40bc3c:	af00      	add	r7, sp, #0
  40bc3e:	6078      	str	r0, [r7, #4]
  40bc40:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40bc42:	2300      	movs	r3, #0
  40bc44:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  40bc46:	683b      	ldr	r3, [r7, #0]
  40bc48:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bc50:	d111      	bne.n	40bc76 <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  40bc52:	683b      	ldr	r3, [r7, #0]
  40bc54:	2201      	movs	r2, #1
  40bc56:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  40bc5a:	683b      	ldr	r3, [r7, #0]
  40bc5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  40bc60:	1c5a      	adds	r2, r3, #1
  40bc62:	683b      	ldr	r3, [r7, #0]
  40bc64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  40bc68:	f107 030c 	add.w	r3, r7, #12
  40bc6c:	6878      	ldr	r0, [r7, #4]
  40bc6e:	4619      	mov	r1, r3
  40bc70:	4b21      	ldr	r3, [pc, #132]	; (40bcf8 <uart_process_byte+0xc0>)
  40bc72:	4798      	blx	r3
  40bc74:	e025      	b.n	40bcc2 <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40bc76:	683b      	ldr	r3, [r7, #0]
  40bc78:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bc80:	d21f      	bcs.n	40bcc2 <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  40bc82:	f107 030c 	add.w	r3, r7, #12
  40bc86:	6878      	ldr	r0, [r7, #4]
  40bc88:	4619      	mov	r1, r3
  40bc8a:	4b1b      	ldr	r3, [pc, #108]	; (40bcf8 <uart_process_byte+0xc0>)
  40bc8c:	4798      	blx	r3
  40bc8e:	4603      	mov	r3, r0
  40bc90:	2b00      	cmp	r3, #0
  40bc92:	d116      	bne.n	40bcc2 <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  40bc94:	683b      	ldr	r3, [r7, #0]
  40bc96:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40bc9a:	68fa      	ldr	r2, [r7, #12]
  40bc9c:	b2d1      	uxtb	r1, r2
  40bc9e:	683a      	ldr	r2, [r7, #0]
  40bca0:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  40bca2:	683b      	ldr	r3, [r7, #0]
  40bca4:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40bca8:	3301      	adds	r3, #1
  40bcaa:	b29a      	uxth	r2, r3
  40bcac:	683b      	ldr	r3, [r7, #0]
  40bcae:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  40bcb2:	683b      	ldr	r3, [r7, #0]
  40bcb4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bcb8:	3301      	adds	r3, #1
  40bcba:	b29a      	uxth	r2, r3
  40bcbc:	683b      	ldr	r3, [r7, #0]
  40bcbe:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40bcc2:	683b      	ldr	r3, [r7, #0]
  40bcc4:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  40bcc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bccc:	d103      	bne.n	40bcd6 <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  40bcce:	683b      	ldr	r3, [r7, #0]
  40bcd0:	2201      	movs	r2, #1
  40bcd2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  40bcd6:	683b      	ldr	r3, [r7, #0]
  40bcd8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  40bcdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bce0:	d103      	bne.n	40bcea <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  40bce2:	683b      	ldr	r3, [r7, #0]
  40bce4:	2200      	movs	r2, #0
  40bce6:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  40bcea:	683b      	ldr	r3, [r7, #0]
  40bcec:	2201      	movs	r2, #1
  40bcee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
}
  40bcf2:	3710      	adds	r7, #16
  40bcf4:	46bd      	mov	sp, r7
  40bcf6:	bd80      	pop	{r7, pc}
  40bcf8:	004046c9 	.word	0x004046c9

0040bcfc <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  40bcfc:	b580      	push	{r7, lr}
  40bcfe:	b082      	sub	sp, #8
  40bd00:	af00      	add	r7, sp, #0
  40bd02:	6078      	str	r0, [r7, #4]
  40bd04:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40bd06:	683b      	ldr	r3, [r7, #0]
  40bd08:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40bd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bd10:	d103      	bne.n	40bd1a <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  40bd12:	683b      	ldr	r3, [r7, #0]
  40bd14:	2200      	movs	r2, #0
  40bd16:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  40bd1a:	683b      	ldr	r3, [r7, #0]
  40bd1c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40bd20:	2b00      	cmp	r3, #0
  40bd22:	d01b      	beq.n	40bd5c <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  40bd24:	683b      	ldr	r3, [r7, #0]
  40bd26:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40bd2a:	683a      	ldr	r2, [r7, #0]
  40bd2c:	4413      	add	r3, r2
  40bd2e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
  40bd32:	6878      	ldr	r0, [r7, #4]
  40bd34:	4619      	mov	r1, r3
  40bd36:	4b14      	ldr	r3, [pc, #80]	; (40bd88 <uart_process_tx_byte+0x8c>)
  40bd38:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  40bd3a:	683b      	ldr	r3, [r7, #0]
  40bd3c:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40bd40:	3301      	adds	r3, #1
  40bd42:	b29a      	uxth	r2, r3
  40bd44:	683b      	ldr	r3, [r7, #0]
  40bd46:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  40bd4a:	683b      	ldr	r3, [r7, #0]
  40bd4c:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  40bd50:	3b01      	subs	r3, #1
  40bd52:	b29a      	uxth	r2, r3
  40bd54:	683b      	ldr	r3, [r7, #0]
  40bd56:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  40bd5a:	e008      	b.n	40bd6e <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  40bd5c:	683b      	ldr	r3, [r7, #0]
  40bd5e:	2200      	movs	r2, #0
  40bd60:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  40bd64:	6878      	ldr	r0, [r7, #4]
  40bd66:	f44f 7100 	mov.w	r1, #512	; 0x200
  40bd6a:	4b08      	ldr	r3, [pc, #32]	; (40bd8c <uart_process_tx_byte+0x90>)
  40bd6c:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  40bd6e:	683b      	ldr	r3, [r7, #0]
  40bd70:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40bd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bd78:	d103      	bne.n	40bd82 <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  40bd7a:	683b      	ldr	r3, [r7, #0]
  40bd7c:	2200      	movs	r2, #0
  40bd7e:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}	
  40bd82:	3708      	adds	r7, #8
  40bd84:	46bd      	mov	sp, r7
  40bd86:	bd80      	pop	{r7, pc}
  40bd88:	0040b135 	.word	0x0040b135
  40bd8c:	00404371 	.word	0x00404371

0040bd90 <task_dataHandler>:
 * @brief Handles the incoming data from IMUs
 * @param void *pvParameters
 * @return 
 ***********************************************************************************************/
void task_dataHandler(void *pvParameters)
{
  40bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bd92:	b08f      	sub	sp, #60	; 0x3c
  40bd94:	af00      	add	r7, sp, #0
  40bd96:	6078      	str	r0, [r7, #4]

	//setup the queue
	queue_dataHandler = xQueueCreate( 50, sizeof(dataPacket_t));
  40bd98:	2032      	movs	r0, #50	; 0x32
  40bd9a:	2123      	movs	r1, #35	; 0x23
  40bd9c:	4b55      	ldr	r3, [pc, #340]	; (40bef4 <task_dataHandler+0x164>)
  40bd9e:	4798      	blx	r3
  40bda0:	4602      	mov	r2, r0
  40bda2:	4b55      	ldr	r3, [pc, #340]	; (40bef8 <task_dataHandler+0x168>)
  40bda4:	601a      	str	r2, [r3, #0]
	if(queue_dataHandler == 0)
  40bda6:	4b54      	ldr	r3, [pc, #336]	; (40bef8 <task_dataHandler+0x168>)
  40bda8:	681b      	ldr	r3, [r3, #0]
  40bdaa:	2b00      	cmp	r3, #0
  40bdac:	d103      	bne.n	40bdb6 <task_dataHandler+0x26>
	{
		// Queue was not created this is an error!
		printf("an error has occurred, data handler queue failure\r\n"); 
  40bdae:	4853      	ldr	r0, [pc, #332]	; (40befc <task_dataHandler+0x16c>)
  40bdb0:	4b53      	ldr	r3, [pc, #332]	; (40bf00 <task_dataHandler+0x170>)
  40bdb2:	4798      	blx	r3
		return; 
  40bdb4:	e09b      	b.n	40beee <task_dataHandler+0x15e>
	}
	int timerId = 0;
  40bdb6:	2300      	movs	r3, #0
  40bdb8:	637b      	str	r3, [r7, #52]	; 0x34


	
	//open file to read. 
	dataPacket_t packet; 
	int i =0; 
  40bdba:	2300      	movs	r3, #0
  40bdbc:	633b      	str	r3, [r7, #48]	; 0x30
	//int index = dataFrameTail; 
	while(1)
	{
		
		if(xQueueReceive( queue_dataHandler, &( packet ), 1000) == TRUE)
  40bdbe:	4b4e      	ldr	r3, [pc, #312]	; (40bef8 <task_dataHandler+0x168>)
  40bdc0:	681a      	ldr	r2, [r3, #0]
  40bdc2:	f107 030c 	add.w	r3, r7, #12
  40bdc6:	4610      	mov	r0, r2
  40bdc8:	4619      	mov	r1, r3
  40bdca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40bdce:	2300      	movs	r3, #0
  40bdd0:	4c4c      	ldr	r4, [pc, #304]	; (40bf04 <task_dataHandler+0x174>)
  40bdd2:	47a0      	blx	r4
  40bdd4:	4603      	mov	r3, r0
  40bdd6:	2b01      	cmp	r3, #1
  40bdd8:	f040 8085 	bne.w	40bee6 <task_dataHandler+0x156>
		{			
			//handle packet
			if(packet.type == DATA_PACKET_TYPE_IMU)
  40bddc:	7b3b      	ldrb	r3, [r7, #12]
  40bdde:	2b00      	cmp	r3, #0
  40bde0:	d14f      	bne.n	40be82 <task_dataHandler+0xf2>
					//{
						//index = 0; 
					//}
															//
				//}
				if(packetReceivedFlags & (uint16_t)(1 << packet.imuId))
  40bde2:	7b7b      	ldrb	r3, [r7, #13]
  40bde4:	2201      	movs	r2, #1
  40bde6:	fa02 f303 	lsl.w	r3, r2, r3
  40bdea:	b29a      	uxth	r2, r3
  40bdec:	4b46      	ldr	r3, [pc, #280]	; (40bf08 <task_dataHandler+0x178>)
  40bdee:	881b      	ldrh	r3, [r3, #0]
  40bdf0:	4013      	ands	r3, r2
  40bdf2:	b29b      	uxth	r3, r3
  40bdf4:	2b00      	cmp	r3, #0
  40bdf6:	d013      	beq.n	40be20 <task_dataHandler+0x90>
				{
					//we've already received data for this sensor, copy over it...
					imuConfig[packet.imuIndex].stats.droppedPackets++; //we're dropping a packet. 	TODO must fix this case														
  40bdf8:	7bbb      	ldrb	r3, [r7, #14]
  40bdfa:	461a      	mov	r2, r3
  40bdfc:	4943      	ldr	r1, [pc, #268]	; (40bf0c <task_dataHandler+0x17c>)
  40bdfe:	4613      	mov	r3, r2
  40be00:	00db      	lsls	r3, r3, #3
  40be02:	1a9b      	subs	r3, r3, r2
  40be04:	00db      	lsls	r3, r3, #3
  40be06:	440b      	add	r3, r1
  40be08:	3320      	adds	r3, #32
  40be0a:	689b      	ldr	r3, [r3, #8]
  40be0c:	1c59      	adds	r1, r3, #1
  40be0e:	483f      	ldr	r0, [pc, #252]	; (40bf0c <task_dataHandler+0x17c>)
  40be10:	4613      	mov	r3, r2
  40be12:	00db      	lsls	r3, r3, #3
  40be14:	1a9b      	subs	r3, r3, r2
  40be16:	00db      	lsls	r3, r3, #3
  40be18:	4403      	add	r3, r0
  40be1a:	3320      	adds	r3, #32
  40be1c:	6099      	str	r1, [r3, #8]
  40be1e:	e056      	b.n	40bece <task_dataHandler+0x13e>
				}
				else
				{
					//make sure the index is alright. 
					if(packet.imuId < NUMBER_OF_SENSORS)
  40be20:	7b7b      	ldrb	r3, [r7, #13]
  40be22:	2b09      	cmp	r3, #9
  40be24:	d853      	bhi.n	40bece <task_dataHandler+0x13e>
					{
						memcpy(&packetBuffer[packet.imuId],&packet, sizeof(dataPacket_t));
  40be26:	7b7b      	ldrb	r3, [r7, #13]
  40be28:	461a      	mov	r2, r3
  40be2a:	4613      	mov	r3, r2
  40be2c:	009b      	lsls	r3, r3, #2
  40be2e:	4413      	add	r3, r2
  40be30:	00da      	lsls	r2, r3, #3
  40be32:	1ad2      	subs	r2, r2, r3
  40be34:	4b36      	ldr	r3, [pc, #216]	; (40bf10 <task_dataHandler+0x180>)
  40be36:	4413      	add	r3, r2
  40be38:	f107 040c 	add.w	r4, r7, #12
  40be3c:	461d      	mov	r5, r3
  40be3e:	f104 0c20 	add.w	ip, r4, #32
  40be42:	462e      	mov	r6, r5
  40be44:	46a6      	mov	lr, r4
  40be46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40be4a:	6030      	str	r0, [r6, #0]
  40be4c:	6071      	str	r1, [r6, #4]
  40be4e:	60b2      	str	r2, [r6, #8]
  40be50:	60f3      	str	r3, [r6, #12]
  40be52:	3410      	adds	r4, #16
  40be54:	3510      	adds	r5, #16
  40be56:	4564      	cmp	r4, ip
  40be58:	d1f3      	bne.n	40be42 <task_dataHandler+0xb2>
  40be5a:	462b      	mov	r3, r5
  40be5c:	4622      	mov	r2, r4
  40be5e:	8811      	ldrh	r1, [r2, #0]
  40be60:	7892      	ldrb	r2, [r2, #2]
  40be62:	8019      	strh	r1, [r3, #0]
  40be64:	709a      	strb	r2, [r3, #2]
						packetReceivedFlags |= (1 << packet.imuId); //set flag
  40be66:	7b7b      	ldrb	r3, [r7, #13]
  40be68:	2201      	movs	r2, #1
  40be6a:	fa02 f303 	lsl.w	r3, r2, r3
  40be6e:	b29a      	uxth	r2, r3
  40be70:	4b25      	ldr	r3, [pc, #148]	; (40bf08 <task_dataHandler+0x178>)
  40be72:	881b      	ldrh	r3, [r3, #0]
  40be74:	b29b      	uxth	r3, r3
  40be76:	4313      	orrs	r3, r2
  40be78:	b29b      	uxth	r3, r3
  40be7a:	b29a      	uxth	r2, r3
  40be7c:	4b22      	ldr	r3, [pc, #136]	; (40bf08 <task_dataHandler+0x178>)
  40be7e:	801a      	strh	r2, [r3, #0]
  40be80:	e025      	b.n	40bece <task_dataHandler+0x13e>
					}
				}	
			}
			else
			{
				if(packetReceivedFlags & (uint16_t)(1 << NUMBER_OF_SENSORS -1))
  40be82:	4b21      	ldr	r3, [pc, #132]	; (40bf08 <task_dataHandler+0x178>)
  40be84:	881b      	ldrh	r3, [r3, #0]
  40be86:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40be8a:	2b00      	cmp	r3, #0
  40be8c:	d11f      	bne.n	40bece <task_dataHandler+0x13e>
					//we've already received data for this sensor, process all the bytes as is.					
				}
				else
				{
					//FabSense data always stored at end of buffer
					memcpy(&packetBuffer[NUMBER_OF_SENSORS -1],&packet, sizeof(dataPacket_t));
  40be8e:	4b20      	ldr	r3, [pc, #128]	; (40bf10 <task_dataHandler+0x180>)
  40be90:	f107 040c 	add.w	r4, r7, #12
  40be94:	f203 153b 	addw	r5, r3, #315	; 0x13b
  40be98:	f104 0c20 	add.w	ip, r4, #32
  40be9c:	462e      	mov	r6, r5
  40be9e:	46a6      	mov	lr, r4
  40bea0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40bea4:	6030      	str	r0, [r6, #0]
  40bea6:	6071      	str	r1, [r6, #4]
  40bea8:	60b2      	str	r2, [r6, #8]
  40beaa:	60f3      	str	r3, [r6, #12]
  40beac:	3410      	adds	r4, #16
  40beae:	3510      	adds	r5, #16
  40beb0:	4564      	cmp	r4, ip
  40beb2:	d1f3      	bne.n	40be9c <task_dataHandler+0x10c>
  40beb4:	462b      	mov	r3, r5
  40beb6:	4622      	mov	r2, r4
  40beb8:	8811      	ldrh	r1, [r2, #0]
  40beba:	7892      	ldrb	r2, [r2, #2]
  40bebc:	8019      	strh	r1, [r3, #0]
  40bebe:	709a      	strb	r2, [r3, #2]
					packetReceivedFlags |= (1 << NUMBER_OF_SENSORS -1); //set flag
  40bec0:	4b11      	ldr	r3, [pc, #68]	; (40bf08 <task_dataHandler+0x178>)
  40bec2:	881b      	ldrh	r3, [r3, #0]
  40bec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40bec8:	b29a      	uxth	r2, r3
  40beca:	4b0f      	ldr	r3, [pc, #60]	; (40bf08 <task_dataHandler+0x178>)
  40becc:	801a      	strh	r2, [r3, #0]
				}				
			}
			
			if(packetReceivedFlags == packetReceivedMask)
  40bece:	4b0e      	ldr	r3, [pc, #56]	; (40bf08 <task_dataHandler+0x178>)
  40bed0:	881a      	ldrh	r2, [r3, #0]
  40bed2:	4b10      	ldr	r3, [pc, #64]	; (40bf14 <task_dataHandler+0x184>)
  40bed4:	881b      	ldrh	r3, [r3, #0]
  40bed6:	429a      	cmp	r2, r3
  40bed8:	d105      	bne.n	40bee6 <task_dataHandler+0x156>
			{				
				if(packetReceivedMask != 0x0000)
  40beda:	4b0e      	ldr	r3, [pc, #56]	; (40bf14 <task_dataHandler+0x184>)
  40bedc:	881b      	ldrh	r3, [r3, #0]
  40bede:	2b00      	cmp	r3, #0
  40bee0:	d001      	beq.n	40bee6 <task_dataHandler+0x156>
				{
					processPackets();
  40bee2:	4b0d      	ldr	r3, [pc, #52]	; (40bf18 <task_dataHandler+0x188>)
  40bee4:	4798      	blx	r3
				}				
			}			
		}		
		vTaskDelay(1);
  40bee6:	2001      	movs	r0, #1
  40bee8:	4b0c      	ldr	r3, [pc, #48]	; (40bf1c <task_dataHandler+0x18c>)
  40beea:	4798      	blx	r3
	}
  40beec:	e767      	b.n	40bdbe <task_dataHandler+0x2e>
	
}
  40beee:	373c      	adds	r7, #60	; 0x3c
  40bef0:	46bd      	mov	sp, r7
  40bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bef4:	00407ecd 	.word	0x00407ecd
  40bef8:	20001d98 	.word	0x20001d98
  40befc:	00418f44 	.word	0x00418f44
  40bf00:	0040eadd 	.word	0x0040eadd
  40bf04:	004081dd 	.word	0x004081dd
  40bf08:	20001d9c 	.word	0x20001d9c
  40bf0c:	200000b0 	.word	0x200000b0
  40bf10:	20003324 	.word	0x20003324
  40bf14:	20001d9e 	.word	0x20001d9e
  40bf18:	0040bf21 	.word	0x0040bf21
  40bf1c:	00408855 	.word	0x00408855

0040bf20 <processPackets>:
 * @brief process the incoming packets and create a full frame. 
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error 
 ***********************************************************************************************/	
static status_t processPackets()
{
  40bf20:	b590      	push	{r4, r7, lr}
  40bf22:	b089      	sub	sp, #36	; 0x24
  40bf24:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40bf26:	2300      	movs	r3, #0
  40bf28:	73fb      	strb	r3, [r7, #15]
	int i, j, k;	  
	int entryBufferPtr = 0; 
  40bf2a:	2300      	movs	r3, #0
  40bf2c:	613b      	str	r3, [r7, #16]
	int res = 0; 
  40bf2e:	2300      	movs	r3, #0
  40bf30:	60bb      	str	r3, [r7, #8]
	int numberBytes = 0; 
  40bf32:	2300      	movs	r3, #0
  40bf34:	607b      	str	r3, [r7, #4]
	//char* entryBuffer = NULL; 	
	
	entryBufferPtr = snprintf(entryBuffer, 12, "%010d,", sgSysTickCount);
  40bf36:	4b5f      	ldr	r3, [pc, #380]	; (40c0b4 <processPackets+0x194>)
  40bf38:	681b      	ldr	r3, [r3, #0]
  40bf3a:	485f      	ldr	r0, [pc, #380]	; (40c0b8 <processPackets+0x198>)
  40bf3c:	210c      	movs	r1, #12
  40bf3e:	4a5f      	ldr	r2, [pc, #380]	; (40c0bc <processPackets+0x19c>)
  40bf40:	4c5f      	ldr	r4, [pc, #380]	; (40c0c0 <processPackets+0x1a0>)
  40bf42:	47a0      	blx	r4
  40bf44:	6138      	str	r0, [r7, #16]
	for(i = 0; i < 10; i++) //sensor reading
  40bf46:	2300      	movs	r3, #0
  40bf48:	61fb      	str	r3, [r7, #28]
  40bf4a:	e086      	b.n	40c05a <processPackets+0x13a>
	{
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
  40bf4c:	495d      	ldr	r1, [pc, #372]	; (40c0c4 <processPackets+0x1a4>)
  40bf4e:	69fa      	ldr	r2, [r7, #28]
  40bf50:	4613      	mov	r3, r2
  40bf52:	009b      	lsls	r3, r3, #2
  40bf54:	4413      	add	r3, r2
  40bf56:	00da      	lsls	r2, r3, #3
  40bf58:	1ad2      	subs	r2, r2, r3
  40bf5a:	188b      	adds	r3, r1, r2
  40bf5c:	781b      	ldrb	r3, [r3, #0]
  40bf5e:	2b00      	cmp	r3, #0
  40bf60:	d139      	bne.n	40bfd6 <processPackets+0xb6>
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  40bf62:	2300      	movs	r3, #0
  40bf64:	61bb      	str	r3, [r7, #24]
  40bf66:	e032      	b.n	40bfce <processPackets+0xae>
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  40bf68:	2300      	movs	r3, #0
  40bf6a:	617b      	str	r3, [r7, #20]
  40bf6c:	e020      	b.n	40bfb0 <processPackets+0x90>
				{				
					//copy the asci data to the entry buffer
					if(packetBuffer[i].data != NULL)
					{
						entryBuffer[entryBufferPtr++] = packetBuffer[i].data[(j*4)+k];	
  40bf6e:	6939      	ldr	r1, [r7, #16]
  40bf70:	1c4b      	adds	r3, r1, #1
  40bf72:	613b      	str	r3, [r7, #16]
  40bf74:	69bb      	ldr	r3, [r7, #24]
  40bf76:	009a      	lsls	r2, r3, #2
  40bf78:	697b      	ldr	r3, [r7, #20]
  40bf7a:	18d4      	adds	r4, r2, r3
  40bf7c:	4851      	ldr	r0, [pc, #324]	; (40c0c4 <processPackets+0x1a4>)
  40bf7e:	69fa      	ldr	r2, [r7, #28]
  40bf80:	4613      	mov	r3, r2
  40bf82:	009b      	lsls	r3, r3, #2
  40bf84:	4413      	add	r3, r2
  40bf86:	00da      	lsls	r2, r3, #3
  40bf88:	1ad2      	subs	r2, r2, r3
  40bf8a:	1913      	adds	r3, r2, r4
  40bf8c:	4403      	add	r3, r0
  40bf8e:	78da      	ldrb	r2, [r3, #3]
  40bf90:	4b49      	ldr	r3, [pc, #292]	; (40c0b8 <processPackets+0x198>)
  40bf92:	545a      	strb	r2, [r3, r1]
					else
					{
						entryBuffer[entryBufferPtr++] = 0;
					}
						
					if(entryBuffer[entryBufferPtr-1] == 0)
  40bf94:	693b      	ldr	r3, [r7, #16]
  40bf96:	3b01      	subs	r3, #1
  40bf98:	4a47      	ldr	r2, [pc, #284]	; (40c0b8 <processPackets+0x198>)
  40bf9a:	5cd3      	ldrb	r3, [r2, r3]
  40bf9c:	2b00      	cmp	r3, #0
  40bf9e:	d104      	bne.n	40bfaa <processPackets+0x8a>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0'; 
  40bfa0:	693b      	ldr	r3, [r7, #16]
  40bfa2:	3b01      	subs	r3, #1
  40bfa4:	4a44      	ldr	r2, [pc, #272]	; (40c0b8 <processPackets+0x198>)
  40bfa6:	2130      	movs	r1, #48	; 0x30
  40bfa8:	54d1      	strb	r1, [r2, r3]
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < IMU_PACKET_DATA_SIZE; k++) //reading bytes
  40bfaa:	697b      	ldr	r3, [r7, #20]
  40bfac:	3301      	adds	r3, #1
  40bfae:	617b      	str	r3, [r7, #20]
  40bfb0:	697b      	ldr	r3, [r7, #20]
  40bfb2:	2b03      	cmp	r3, #3
  40bfb4:	dddb      	ble.n	40bf6e <processPackets+0x4e>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0'; 
					}
				}
				if(j != IMU_PACKET_LENGTH-1)
  40bfb6:	69bb      	ldr	r3, [r7, #24]
  40bfb8:	2b02      	cmp	r3, #2
  40bfba:	d005      	beq.n	40bfc8 <processPackets+0xa8>
				{
					entryBuffer[entryBufferPtr++] = ';';	
  40bfbc:	693b      	ldr	r3, [r7, #16]
  40bfbe:	1c5a      	adds	r2, r3, #1
  40bfc0:	613a      	str	r2, [r7, #16]
  40bfc2:	4a3d      	ldr	r2, [pc, #244]	; (40c0b8 <processPackets+0x198>)
  40bfc4:	213b      	movs	r1, #59	; 0x3b
  40bfc6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 10; i++) //sensor reading
	{
		//if IMU, process the data this way
		if(packetBuffer[i].type == DATA_PACKET_TYPE_IMU)
		{			
			for(j=0; j < IMU_PACKET_LENGTH; j++) //reading value
  40bfc8:	69bb      	ldr	r3, [r7, #24]
  40bfca:	3301      	adds	r3, #1
  40bfcc:	61bb      	str	r3, [r7, #24]
  40bfce:	69bb      	ldr	r3, [r7, #24]
  40bfd0:	2b02      	cmp	r3, #2
  40bfd2:	ddc9      	ble.n	40bf68 <processPackets+0x48>
  40bfd4:	e038      	b.n	40c048 <processPackets+0x128>
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  40bfd6:	2300      	movs	r3, #0
  40bfd8:	61bb      	str	r3, [r7, #24]
  40bfda:	e032      	b.n	40c042 <processPackets+0x122>
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40bfdc:	2300      	movs	r3, #0
  40bfde:	617b      	str	r3, [r7, #20]
  40bfe0:	e020      	b.n	40c024 <processPackets+0x104>
				{
					if(packetBuffer[i].data != NULL)
					{
						//copy the asci data to the entry buffer
						entryBuffer[entryBufferPtr++] = packetBuffer[i].data[(j*4)+k];							
  40bfe2:	6939      	ldr	r1, [r7, #16]
  40bfe4:	1c4b      	adds	r3, r1, #1
  40bfe6:	613b      	str	r3, [r7, #16]
  40bfe8:	69bb      	ldr	r3, [r7, #24]
  40bfea:	009a      	lsls	r2, r3, #2
  40bfec:	697b      	ldr	r3, [r7, #20]
  40bfee:	18d4      	adds	r4, r2, r3
  40bff0:	4834      	ldr	r0, [pc, #208]	; (40c0c4 <processPackets+0x1a4>)
  40bff2:	69fa      	ldr	r2, [r7, #28]
  40bff4:	4613      	mov	r3, r2
  40bff6:	009b      	lsls	r3, r3, #2
  40bff8:	4413      	add	r3, r2
  40bffa:	00da      	lsls	r2, r3, #3
  40bffc:	1ad2      	subs	r2, r2, r3
  40bffe:	1913      	adds	r3, r2, r4
  40c000:	4403      	add	r3, r0
  40c002:	78da      	ldrb	r2, [r3, #3]
  40c004:	4b2c      	ldr	r3, [pc, #176]	; (40c0b8 <processPackets+0x198>)
  40c006:	545a      	strb	r2, [r3, r1]
					else
					{
						//there is no data, set to zero. 
						entryBuffer[entryBufferPtr++] = 0;
					}
					if(entryBuffer[entryBufferPtr-1] == 0)
  40c008:	693b      	ldr	r3, [r7, #16]
  40c00a:	3b01      	subs	r3, #1
  40c00c:	4a2a      	ldr	r2, [pc, #168]	; (40c0b8 <processPackets+0x198>)
  40c00e:	5cd3      	ldrb	r3, [r2, r3]
  40c010:	2b00      	cmp	r3, #0
  40c012:	d104      	bne.n	40c01e <processPackets+0xfe>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0';
  40c014:	693b      	ldr	r3, [r7, #16]
  40c016:	3b01      	subs	r3, #1
  40c018:	4a27      	ldr	r2, [pc, #156]	; (40c0b8 <processPackets+0x198>)
  40c01a:	2130      	movs	r1, #48	; 0x30
  40c01c:	54d1      	strb	r1, [r2, r3]
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
			{
				for(k = 0; k < FS_PACKET_DATA_SIZE; k++) //reading bytes
  40c01e:	697b      	ldr	r3, [r7, #20]
  40c020:	3301      	adds	r3, #1
  40c022:	617b      	str	r3, [r7, #20]
  40c024:	697b      	ldr	r3, [r7, #20]
  40c026:	2b03      	cmp	r3, #3
  40c028:	dddb      	ble.n	40bfe2 <processPackets+0xc2>
					{
						//if that entry is empty/NULL, fill it in with '0's
						entryBuffer[entryBufferPtr-1] = '0';
					}
				}
				if(j != FS_PACKET_LENGTH-1)
  40c02a:	69bb      	ldr	r3, [r7, #24]
  40c02c:	2b04      	cmp	r3, #4
  40c02e:	d005      	beq.n	40c03c <processPackets+0x11c>
				{
					entryBuffer[entryBufferPtr++] = ';';
  40c030:	693b      	ldr	r3, [r7, #16]
  40c032:	1c5a      	adds	r2, r3, #1
  40c034:	613a      	str	r2, [r7, #16]
  40c036:	4a20      	ldr	r2, [pc, #128]	; (40c0b8 <processPackets+0x198>)
  40c038:	213b      	movs	r1, #59	; 0x3b
  40c03a:	54d1      	strb	r1, [r2, r3]
				}			
			}
		}
		else //if stretch sense data, add it differently.
		{
			for(j=0; j < FS_PACKET_LENGTH; j++) //reading value
  40c03c:	69bb      	ldr	r3, [r7, #24]
  40c03e:	3301      	adds	r3, #1
  40c040:	61bb      	str	r3, [r7, #24]
  40c042:	69bb      	ldr	r3, [r7, #24]
  40c044:	2b04      	cmp	r3, #4
  40c046:	ddc9      	ble.n	40bfdc <processPackets+0xbc>
				{
					entryBuffer[entryBufferPtr++] = ';';
				}
			}				
		}			 			
		entryBuffer[entryBufferPtr++] = ',';		
  40c048:	693b      	ldr	r3, [r7, #16]
  40c04a:	1c5a      	adds	r2, r3, #1
  40c04c:	613a      	str	r2, [r7, #16]
  40c04e:	4a1a      	ldr	r2, [pc, #104]	; (40c0b8 <processPackets+0x198>)
  40c050:	212c      	movs	r1, #44	; 0x2c
  40c052:	54d1      	strb	r1, [r2, r3]
	int res = 0; 
	int numberBytes = 0; 
	//char* entryBuffer = NULL; 	
	
	entryBufferPtr = snprintf(entryBuffer, 12, "%010d,", sgSysTickCount);
	for(i = 0; i < 10; i++) //sensor reading
  40c054:	69fb      	ldr	r3, [r7, #28]
  40c056:	3301      	adds	r3, #1
  40c058:	61fb      	str	r3, [r7, #28]
  40c05a:	69fb      	ldr	r3, [r7, #28]
  40c05c:	2b09      	cmp	r3, #9
  40c05e:	f77f af75 	ble.w	40bf4c <processPackets+0x2c>
				}
			}				
		}			 			
		entryBuffer[entryBufferPtr++] = ',';		
	}	
	entryBuffer[entryBufferPtr++] = '\r';
  40c062:	693b      	ldr	r3, [r7, #16]
  40c064:	1c5a      	adds	r2, r3, #1
  40c066:	613a      	str	r2, [r7, #16]
  40c068:	4a13      	ldr	r2, [pc, #76]	; (40c0b8 <processPackets+0x198>)
  40c06a:	210d      	movs	r1, #13
  40c06c:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferPtr++] = '\n';
  40c06e:	693b      	ldr	r3, [r7, #16]
  40c070:	1c5a      	adds	r2, r3, #1
  40c072:	613a      	str	r2, [r7, #16]
  40c074:	4a10      	ldr	r2, [pc, #64]	; (40c0b8 <processPackets+0x198>)
  40c076:	210a      	movs	r1, #10
  40c078:	54d1      	strb	r1, [r2, r3]
	entryBuffer[entryBufferPtr] = 0; //terminate the string
  40c07a:	4a0f      	ldr	r2, [pc, #60]	; (40c0b8 <processPackets+0x198>)
  40c07c:	693b      	ldr	r3, [r7, #16]
  40c07e:	4413      	add	r3, r2
  40c080:	2200      	movs	r2, #0
  40c082:	701a      	strb	r2, [r3, #0]
		
	drv_uart_putString(&uart0Config, entryBuffer);	
  40c084:	4810      	ldr	r0, [pc, #64]	; (40c0c8 <processPackets+0x1a8>)
  40c086:	490c      	ldr	r1, [pc, #48]	; (40c0b8 <processPackets+0x198>)
  40c088:	4b10      	ldr	r3, [pc, #64]	; (40c0cc <processPackets+0x1ac>)
  40c08a:	4798      	blx	r3
	totalFramesWritten++;	
  40c08c:	4b10      	ldr	r3, [pc, #64]	; (40c0d0 <processPackets+0x1b0>)
  40c08e:	681b      	ldr	r3, [r3, #0]
  40c090:	1c5a      	adds	r2, r3, #1
  40c092:	4b0f      	ldr	r3, [pc, #60]	; (40c0d0 <processPackets+0x1b0>)
  40c094:	601a      	str	r2, [r3, #0]
	//write the entry to file
	task_sdCardWriteEntry(entryBuffer,entryBufferPtr);
  40c096:	693b      	ldr	r3, [r7, #16]
  40c098:	4807      	ldr	r0, [pc, #28]	; (40c0b8 <processPackets+0x198>)
  40c09a:	4619      	mov	r1, r3
  40c09c:	4b0d      	ldr	r3, [pc, #52]	; (40c0d4 <processPackets+0x1b4>)
  40c09e:	4798      	blx	r3
	entryBufferPtr = 0; //reset pointer.		
  40c0a0:	2300      	movs	r3, #0
  40c0a2:	613b      	str	r3, [r7, #16]
	//clear flag at the end 
	packetReceivedFlags = 0x0000; 		
  40c0a4:	4b0c      	ldr	r3, [pc, #48]	; (40c0d8 <processPackets+0x1b8>)
  40c0a6:	2200      	movs	r2, #0
  40c0a8:	801a      	strh	r2, [r3, #0]
	return status; 
  40c0aa:	7bfb      	ldrb	r3, [r7, #15]
}
  40c0ac:	4618      	mov	r0, r3
  40c0ae:	3724      	adds	r7, #36	; 0x24
  40c0b0:	46bd      	mov	sp, r7
  40c0b2:	bd90      	pop	{r4, r7, pc}
  40c0b4:	20001f3c 	.word	0x20001f3c
  40c0b8:	20001da4 	.word	0x20001da4
  40c0bc:	00418f78 	.word	0x00418f78
  40c0c0:	0040f361 	.word	0x0040f361
  40c0c4:	20003324 	.word	0x20003324
  40c0c8:	2000004c 	.word	0x2000004c
  40c0cc:	0040b8cd 	.word	0x0040b8cd
  40c0d0:	20001da0 	.word	0x20001da0
  40c0d4:	00400b9d 	.word	0x00400b9d
  40c0d8:	20001d9c 	.word	0x20001d9c

0040c0dc <task_fabSenseHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
void task_fabSenseHandler(void *pvParameters)
{
  40c0dc:	b5b0      	push	{r4, r5, r7, lr}
  40c0de:	b0d0      	sub	sp, #320	; 0x140
  40c0e0:	af00      	add	r7, sp, #0
  40c0e2:	1d3b      	adds	r3, r7, #4
  40c0e4:	6018      	str	r0, [r3, #0]
	//cast void pointer to fabric sense config type.
	fabricSenseConfig_t *fsConfig = (fabricSenseConfig_t*)pvParameters;
  40c0e6:	1d3b      	adds	r3, r7, #4
  40c0e8:	681b      	ldr	r3, [r3, #0]
  40c0ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	//check that uart device is initialized
	if(drv_uart_isInit(fsConfig->uartDevice) != STATUS_PASS)
  40c0ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40c0f2:	689b      	ldr	r3, [r3, #8]
  40c0f4:	4618      	mov	r0, r3
  40c0f6:	4b31      	ldr	r3, [pc, #196]	; (40c1bc <task_fabSenseHandler+0xe0>)
  40c0f8:	4798      	blx	r3
  40c0fa:	4603      	mov	r3, r0
  40c0fc:	2b00      	cmp	r3, #0
  40c0fe:	d000      	beq.n	40c102 <task_fabSenseHandler+0x26>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		return;
  40c100:	e057      	b.n	40c1b2 <task_fabSenseHandler+0xd6>
	//{
		////this is an error, we should do something here!
		//return; 
	//} 
	dataPacket_t packet;
	packet.type = DATA_PACKET_TYPE_SS;
  40c102:	2301      	movs	r3, #1
  40c104:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	//main loop of task, this is where we request information and store it.
	char buf[FS_RESPONSE_BUF_SIZE] = {0};
  40c108:	f107 030c 	add.w	r3, r7, #12
  40c10c:	461a      	mov	r2, r3
  40c10e:	23ff      	movs	r3, #255	; 0xff
  40c110:	4610      	mov	r0, r2
  40c112:	2100      	movs	r1, #0
  40c114:	461a      	mov	r2, r3
  40c116:	4b2a      	ldr	r3, [pc, #168]	; (40c1c0 <task_fabSenseHandler+0xe4>)
  40c118:	4798      	blx	r3
	uint8_t numPacketsReceived = 0; 
  40c11a:	2300      	movs	r3, #0
  40c11c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	uint32_t sequenceNumber = 0;
  40c120:	2300      	movs	r3, #0
  40c122:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t packetsReceived = 0; 
  40c126:	2300      	movs	r3, #0
  40c128:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	packetReceivedMask |= 1<<9; //add mask for fabric sense
  40c12c:	4b25      	ldr	r3, [pc, #148]	; (40c1c4 <task_fabSenseHandler+0xe8>)
  40c12e:	881b      	ldrh	r3, [r3, #0]
  40c130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40c134:	b29a      	uxth	r2, r3
  40c136:	4b23      	ldr	r3, [pc, #140]	; (40c1c4 <task_fabSenseHandler+0xe8>)
  40c138:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(enableRecording)
  40c13a:	4b23      	ldr	r3, [pc, #140]	; (40c1c8 <task_fabSenseHandler+0xec>)
  40c13c:	781b      	ldrb	r3, [r3, #0]
  40c13e:	2b00      	cmp	r3, #0
  40c140:	d032      	beq.n	40c1a8 <task_fabSenseHandler+0xcc>
		{		
			#ifdef CREATE_DUMMY_PACKETS
			vTaskDelay(20); 
  40c142:	2014      	movs	r0, #20
  40c144:	4b21      	ldr	r3, [pc, #132]	; (40c1cc <task_fabSenseHandler+0xf0>)
  40c146:	4798      	blx	r3
			createDummyFabSensePacket(buf, FS_RESPONSE_BUF_SIZE, sequenceNumber++); 
  40c148:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40c14c:	1c5a      	adds	r2, r3, #1
  40c14e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
  40c152:	f107 020c 	add.w	r2, r7, #12
  40c156:	4610      	mov	r0, r2
  40c158:	21ff      	movs	r1, #255	; 0xff
  40c15a:	461a      	mov	r2, r3
  40c15c:	4b1c      	ldr	r3, [pc, #112]	; (40c1d0 <task_fabSenseHandler+0xf4>)
  40c15e:	4798      	blx	r3
			#endif
			//if this is our first packet in the set, assign memory for it. 
			memcpy(packet.data,buf,32); 
  40c160:	f107 030c 	add.w	r3, r7, #12
  40c164:	f207 140f 	addw	r4, r7, #271	; 0x10f
  40c168:	461d      	mov	r5, r3
  40c16a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40c16c:	6020      	str	r0, [r4, #0]
  40c16e:	6061      	str	r1, [r4, #4]
  40c170:	60a2      	str	r2, [r4, #8]
  40c172:	60e3      	str	r3, [r4, #12]
  40c174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40c176:	6120      	str	r0, [r4, #16]
  40c178:	6161      	str	r1, [r4, #20]
  40c17a:	61a2      	str	r2, [r4, #24]
  40c17c:	61e3      	str	r3, [r4, #28]
			//enqueue the packet for the data processor. 
			if(queue_dataHandler != NULL)
  40c17e:	4b15      	ldr	r3, [pc, #84]	; (40c1d4 <task_fabSenseHandler+0xf8>)
  40c180:	681b      	ldr	r3, [r3, #0]
  40c182:	2b00      	cmp	r3, #0
  40c184:	d014      	beq.n	40c1b0 <task_fabSenseHandler+0xd4>
			{
				if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,10 ) != TRUE)
  40c186:	4b13      	ldr	r3, [pc, #76]	; (40c1d4 <task_fabSenseHandler+0xf8>)
  40c188:	681a      	ldr	r2, [r3, #0]
  40c18a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
  40c18e:	4610      	mov	r0, r2
  40c190:	4619      	mov	r1, r3
  40c192:	220a      	movs	r2, #10
  40c194:	2300      	movs	r3, #0
  40c196:	4c10      	ldr	r4, [pc, #64]	; (40c1d8 <task_fabSenseHandler+0xfc>)
  40c198:	47a0      	blx	r4
  40c19a:	4603      	mov	r3, r0
  40c19c:	2b01      	cmp	r3, #1
  40c19e:	d007      	beq.n	40c1b0 <task_fabSenseHandler+0xd4>
					//if(packet.data != NULL)
					//{
						//free(packet.data);
						//packet.data = NULL;
					//}
					vTaskDelay(1);
  40c1a0:	2001      	movs	r0, #1
  40c1a2:	4b0a      	ldr	r3, [pc, #40]	; (40c1cc <task_fabSenseHandler+0xf0>)
  40c1a4:	4798      	blx	r3
		else
		{
			vTaskDelay(10); 
		}
		
	}
  40c1a6:	e7c8      	b.n	40c13a <task_fabSenseHandler+0x5e>
				}
			}		
		}
		else
		{
			vTaskDelay(10); 
  40c1a8:	200a      	movs	r0, #10
  40c1aa:	4b08      	ldr	r3, [pc, #32]	; (40c1cc <task_fabSenseHandler+0xf0>)
  40c1ac:	4798      	blx	r3
		}
		
	}
  40c1ae:	e7c4      	b.n	40c13a <task_fabSenseHandler+0x5e>
  40c1b0:	e7c3      	b.n	40c13a <task_fabSenseHandler+0x5e>
}
  40c1b2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
  40c1b6:	46bd      	mov	sp, r7
  40c1b8:	bdb0      	pop	{r4, r5, r7, pc}
  40c1ba:	bf00      	nop
  40c1bc:	0040b719 	.word	0x0040b719
  40c1c0:	0040f191 	.word	0x0040f191
  40c1c4:	20001d9e 	.word	0x20001d9e
  40c1c8:	20000db0 	.word	0x20000db0
  40c1cc:	00408855 	.word	0x00408855
  40c1d0:	0040c23d 	.word	0x0040c23d
  40c1d4:	20001d98 	.word	0x20001d98
  40c1d8:	00408019 	.word	0x00408019

0040c1dc <task_fabSense_init>:
 * @brief Function called to initialize the fabric sense module parameters
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_init(fabricSenseConfig_t* fabSenseConfig)
{
  40c1dc:	b480      	push	{r7}
  40c1de:	b083      	sub	sp, #12
  40c1e0:	af00      	add	r7, sp, #0
  40c1e2:	6078      	str	r0, [r7, #4]
	return STATUS_PASS;
  40c1e4:	2300      	movs	r3, #0
}
  40c1e6:	4618      	mov	r0, r3
  40c1e8:	370c      	adds	r7, #12
  40c1ea:	46bd      	mov	sp, r7
  40c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c1f0:	4770      	bx	lr
  40c1f2:	bf00      	nop

0040c1f4 <task_fabSense_start>:
 * @brief Function called to start the fabrix sense transmission of data. 
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_start(fabricSenseConfig_t* fabSenseConfig)
{
  40c1f4:	b480      	push	{r7}
  40c1f6:	b085      	sub	sp, #20
  40c1f8:	af00      	add	r7, sp, #0
  40c1fa:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40c1fc:	2300      	movs	r3, #0
  40c1fe:	73fb      	strb	r3, [r7, #15]
	enableRecording = true; 
  40c200:	4b04      	ldr	r3, [pc, #16]	; (40c214 <task_fabSense_start+0x20>)
  40c202:	2201      	movs	r2, #1
  40c204:	701a      	strb	r2, [r3, #0]
	return status; 
  40c206:	7bfb      	ldrb	r3, [r7, #15]
}
  40c208:	4618      	mov	r0, r3
  40c20a:	3714      	adds	r7, #20
  40c20c:	46bd      	mov	sp, r7
  40c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c212:	4770      	bx	lr
  40c214:	20000db0 	.word	0x20000db0

0040c218 <task_fabSense_stop>:
 * @brief Function called to stop the fabric sense module  
 * @param pvParameters, void pointer to structure containing fabric sense configuration. 
 * @return void
 ***********************************************************************************************/
status_t task_fabSense_stop(fabricSenseConfig_t* fabSenseConfig)
{
  40c218:	b480      	push	{r7}
  40c21a:	b085      	sub	sp, #20
  40c21c:	af00      	add	r7, sp, #0
  40c21e:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  40c220:	2300      	movs	r3, #0
  40c222:	73fb      	strb	r3, [r7, #15]
	enableRecording = false; 
  40c224:	4b04      	ldr	r3, [pc, #16]	; (40c238 <task_fabSense_stop+0x20>)
  40c226:	2200      	movs	r2, #0
  40c228:	701a      	strb	r2, [r3, #0]
	return status;	
  40c22a:	7bfb      	ldrb	r3, [r7, #15]
}
  40c22c:	4618      	mov	r0, r3
  40c22e:	3714      	adds	r7, #20
  40c230:	46bd      	mov	sp, r7
  40c232:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c236:	4770      	bx	lr
  40c238:	20000db0 	.word	0x20000db0

0040c23c <createDummyFabSensePacket>:

//static functions


void createDummyFabSensePacket(char* dataPacket, size_t maxPacketSize, uint32_t seqNum)
{
  40c23c:	b590      	push	{r4, r7, lr}
  40c23e:	b089      	sub	sp, #36	; 0x24
  40c240:	af02      	add	r7, sp, #8
  40c242:	60f8      	str	r0, [r7, #12]
  40c244:	60b9      	str	r1, [r7, #8]
  40c246:	607a      	str	r2, [r7, #4]
	int i = 0; 
  40c248:	2300      	movs	r3, #0
  40c24a:	617b      	str	r3, [r7, #20]
	snprintf(dataPacket, maxPacketSize, "%04dBBBBCCCCDDDDEEEE%08d\r\n",seqNum%10000, sgSysTickCount); 
  40c24c:	687a      	ldr	r2, [r7, #4]
  40c24e:	4b0a      	ldr	r3, [pc, #40]	; (40c278 <createDummyFabSensePacket+0x3c>)
  40c250:	fba3 1302 	umull	r1, r3, r3, r2
  40c254:	0b5b      	lsrs	r3, r3, #13
  40c256:	f242 7110 	movw	r1, #10000	; 0x2710
  40c25a:	fb01 f303 	mul.w	r3, r1, r3
  40c25e:	1ad3      	subs	r3, r2, r3
  40c260:	4a06      	ldr	r2, [pc, #24]	; (40c27c <createDummyFabSensePacket+0x40>)
  40c262:	6812      	ldr	r2, [r2, #0]
  40c264:	9200      	str	r2, [sp, #0]
  40c266:	68f8      	ldr	r0, [r7, #12]
  40c268:	68b9      	ldr	r1, [r7, #8]
  40c26a:	4a05      	ldr	r2, [pc, #20]	; (40c280 <createDummyFabSensePacket+0x44>)
  40c26c:	4c05      	ldr	r4, [pc, #20]	; (40c284 <createDummyFabSensePacket+0x48>)
  40c26e:	47a0      	blx	r4

  40c270:	371c      	adds	r7, #28
  40c272:	46bd      	mov	sp, r7
  40c274:	bd90      	pop	{r4, r7, pc}
  40c276:	bf00      	nop
  40c278:	d1b71759 	.word	0xd1b71759
  40c27c:	20001f3c 	.word	0x20001f3c
  40c280:	00418f80 	.word	0x00418f80
  40c284:	0040f361 	.word	0x0040f361

0040c288 <vTimerCallback>:

//TEMP REMOVE THIS
extern FIL dataLogFile_obj; 

void vTimerCallback( xTimerHandle xTimer )
{
  40c288:	b580      	push	{r7, lr}
  40c28a:	b084      	sub	sp, #16
  40c28c:	af00      	add	r7, sp, #0
  40c28e:	6078      	str	r0, [r7, #4]
	drv_gpio_pin_state_t pinState;
	drv_gpio_getPinState(DRV_GPIO_PIN_PW_SW, &pinState);
  40c290:	f107 030f 	add.w	r3, r7, #15
  40c294:	2000      	movs	r0, #0
  40c296:	4619      	mov	r1, r3
  40c298:	4b05      	ldr	r3, [pc, #20]	; (40c2b0 <vTimerCallback+0x28>)
  40c29a:	4798      	blx	r3
	if (pinState == DRV_GPIO_PIN_STATE_LOW)
  40c29c:	7bfb      	ldrb	r3, [r7, #15]
  40c29e:	2b00      	cmp	r3, #0
  40c2a0:	d102      	bne.n	40c2a8 <vTimerCallback+0x20>
	{
		SleepTimerHandle = 1;
  40c2a2:	4b04      	ldr	r3, [pc, #16]	; (40c2b4 <vTimerCallback+0x2c>)
  40c2a4:	2201      	movs	r2, #1
  40c2a6:	701a      	strb	r2, [r3, #0]
	}
}
  40c2a8:	3710      	adds	r7, #16
  40c2aa:	46bd      	mov	sp, r7
  40c2ac:	bd80      	pop	{r7, pc}
  40c2ae:	bf00      	nop
  40c2b0:	0040aa3d 	.word	0x0040aa3d
  40c2b4:	20001e6c 	.word	0x20001e6c

0040c2b8 <TaskMain>:

/**
 * \brief This task is initialized first to initiate the board peripherals and run the initial tests
 */
void TaskMain(void *pvParameters)
{
  40c2b8:	b590      	push	{r4, r7, lr}
  40c2ba:	b089      	sub	sp, #36	; 0x24
  40c2bc:	af04      	add	r7, sp, #16
  40c2be:	6078      	str	r0, [r7, #4]
	int retCode = 0; 
  40c2c0:	2300      	movs	r3, #0
  40c2c2:	60fb      	str	r3, [r7, #12]
	UNUSED(pvParameters);
	/*	Create a Semaphore to pass between tasks	*/
	//vSemaphoreCreateBinary(DebugLogSemaphore);
	powerOnInit();
  40c2c4:	4b61      	ldr	r3, [pc, #388]	; (40c44c <TaskMain+0x194>)
  40c2c6:	4798      	blx	r3
	
	//reset the quintics
	//drv_gpio_setPinState(DRV_GPIO_PIN_BLE_RST1, DRV_GPIO_PIN_STATE_LOW);
	SleepTimer = xTimerCreate("Sleep Timer", (5000/portTICK_RATE_MS), pdFALSE, NULL, vTimerCallback);
  40c2c8:	4b61      	ldr	r3, [pc, #388]	; (40c450 <TaskMain+0x198>)
  40c2ca:	9300      	str	r3, [sp, #0]
  40c2cc:	4861      	ldr	r0, [pc, #388]	; (40c454 <TaskMain+0x19c>)
  40c2ce:	f241 3188 	movw	r1, #5000	; 0x1388
  40c2d2:	2200      	movs	r2, #0
  40c2d4:	2300      	movs	r3, #0
  40c2d6:	4c60      	ldr	r4, [pc, #384]	; (40c458 <TaskMain+0x1a0>)
  40c2d8:	47a0      	blx	r4
  40c2da:	4602      	mov	r2, r0
  40c2dc:	4b5f      	ldr	r3, [pc, #380]	; (40c45c <TaskMain+0x1a4>)
  40c2de:	601a      	str	r2, [r3, #0]
	if (SleepTimer == NULL)
  40c2e0:	4b5e      	ldr	r3, [pc, #376]	; (40c45c <TaskMain+0x1a4>)
  40c2e2:	681b      	ldr	r3, [r3, #0]
  40c2e4:	2b00      	cmp	r3, #0
  40c2e6:	d105      	bne.n	40c2f4 <TaskMain+0x3c>
	{
		printf("Failed to create timer task code %d\r\n", SleepTimer);
  40c2e8:	4b5c      	ldr	r3, [pc, #368]	; (40c45c <TaskMain+0x1a4>)
  40c2ea:	681b      	ldr	r3, [r3, #0]
  40c2ec:	485c      	ldr	r0, [pc, #368]	; (40c460 <TaskMain+0x1a8>)
  40c2ee:	4619      	mov	r1, r3
  40c2f0:	4b5c      	ldr	r3, [pc, #368]	; (40c464 <TaskMain+0x1ac>)
  40c2f2:	4798      	blx	r3
	}
	
	retCode = xTaskCreate(task_quinticHandler, "Q1", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[0], TASK_QUINTIC_PRIORITY, NULL );
  40c2f4:	2305      	movs	r3, #5
  40c2f6:	9300      	str	r3, [sp, #0]
  40c2f8:	2300      	movs	r3, #0
  40c2fa:	9301      	str	r3, [sp, #4]
  40c2fc:	2300      	movs	r3, #0
  40c2fe:	9302      	str	r3, [sp, #8]
  40c300:	2300      	movs	r3, #0
  40c302:	9303      	str	r3, [sp, #12]
  40c304:	4858      	ldr	r0, [pc, #352]	; (40c468 <TaskMain+0x1b0>)
  40c306:	4959      	ldr	r1, [pc, #356]	; (40c46c <TaskMain+0x1b4>)
  40c308:	f240 22ee 	movw	r2, #750	; 0x2ee
  40c30c:	4b58      	ldr	r3, [pc, #352]	; (40c470 <TaskMain+0x1b8>)
  40c30e:	4c59      	ldr	r4, [pc, #356]	; (40c474 <TaskMain+0x1bc>)
  40c310:	47a0      	blx	r4
  40c312:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c314:	68fb      	ldr	r3, [r7, #12]
  40c316:	2b01      	cmp	r3, #1
  40c318:	d003      	beq.n	40c322 <TaskMain+0x6a>
	{
		printf("Failed to create Q1 task code %d\r\n", retCode);
  40c31a:	4857      	ldr	r0, [pc, #348]	; (40c478 <TaskMain+0x1c0>)
  40c31c:	68f9      	ldr	r1, [r7, #12]
  40c31e:	4b51      	ldr	r3, [pc, #324]	; (40c464 <TaskMain+0x1ac>)
  40c320:	4798      	blx	r3
	//retCode = xTaskCreate(task_quinticHandler, "Q2", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[1], TASK_QUINTIC_STACK_PRIORITY, NULL );
	//if (retCode != pdPASS)
	//{
		//printf("Failed to create Q2 task code %d\r\n", retCode);
	//}
	retCode = xTaskCreate(task_quinticHandler, "Q3", TASK_QUINTIC_STACK_SIZE, (void*)&quinticConfig[2], TASK_QUINTIC_PRIORITY, NULL );
  40c322:	2305      	movs	r3, #5
  40c324:	9300      	str	r3, [sp, #0]
  40c326:	2300      	movs	r3, #0
  40c328:	9301      	str	r3, [sp, #4]
  40c32a:	2300      	movs	r3, #0
  40c32c:	9302      	str	r3, [sp, #8]
  40c32e:	2300      	movs	r3, #0
  40c330:	9303      	str	r3, [sp, #12]
  40c332:	484d      	ldr	r0, [pc, #308]	; (40c468 <TaskMain+0x1b0>)
  40c334:	4951      	ldr	r1, [pc, #324]	; (40c47c <TaskMain+0x1c4>)
  40c336:	f240 22ee 	movw	r2, #750	; 0x2ee
  40c33a:	4b51      	ldr	r3, [pc, #324]	; (40c480 <TaskMain+0x1c8>)
  40c33c:	4c4d      	ldr	r4, [pc, #308]	; (40c474 <TaskMain+0x1bc>)
  40c33e:	47a0      	blx	r4
  40c340:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c342:	68fb      	ldr	r3, [r7, #12]
  40c344:	2b01      	cmp	r3, #1
  40c346:	d003      	beq.n	40c350 <TaskMain+0x98>
	{
		printf("Failed to create Q3 task code %d\r\n", retCode);
  40c348:	484e      	ldr	r0, [pc, #312]	; (40c484 <TaskMain+0x1cc>)
  40c34a:	68f9      	ldr	r1, [r7, #12]
  40c34c:	4b45      	ldr	r3, [pc, #276]	; (40c464 <TaskMain+0x1ac>)
  40c34e:	4798      	blx	r3
	}
	
	retCode = xTaskCreate(task_fabSenseHandler, "FS", TASK_FABSENSE_STACK_SIZE,(void*)&fsConfig, TASK_FABSENSE_PRIORITY, NULL );
  40c350:	2305      	movs	r3, #5
  40c352:	9300      	str	r3, [sp, #0]
  40c354:	2300      	movs	r3, #0
  40c356:	9301      	str	r3, [sp, #4]
  40c358:	2300      	movs	r3, #0
  40c35a:	9302      	str	r3, [sp, #8]
  40c35c:	2300      	movs	r3, #0
  40c35e:	9303      	str	r3, [sp, #12]
  40c360:	4849      	ldr	r0, [pc, #292]	; (40c488 <TaskMain+0x1d0>)
  40c362:	494a      	ldr	r1, [pc, #296]	; (40c48c <TaskMain+0x1d4>)
  40c364:	f44f 7280 	mov.w	r2, #256	; 0x100
  40c368:	4b49      	ldr	r3, [pc, #292]	; (40c490 <TaskMain+0x1d8>)
  40c36a:	4c42      	ldr	r4, [pc, #264]	; (40c474 <TaskMain+0x1bc>)
  40c36c:	47a0      	blx	r4
  40c36e:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c370:	68fb      	ldr	r3, [r7, #12]
  40c372:	2b01      	cmp	r3, #1
  40c374:	d003      	beq.n	40c37e <TaskMain+0xc6>
	{
		printf("Failed to fabric sense task code %d\r\n", retCode);
  40c376:	4847      	ldr	r0, [pc, #284]	; (40c494 <TaskMain+0x1dc>)
  40c378:	68f9      	ldr	r1, [r7, #12]
  40c37a:	4b3a      	ldr	r3, [pc, #232]	; (40c464 <TaskMain+0x1ac>)
  40c37c:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_commandHandler, "cmd", TASK_SERIAL_RECEIVE_STACK_SIZE,(void*)&cmdConfig, TASK_SERIAL_RECEIVE_PRIORITY, NULL );
  40c37e:	2306      	movs	r3, #6
  40c380:	9300      	str	r3, [sp, #0]
  40c382:	2300      	movs	r3, #0
  40c384:	9301      	str	r3, [sp, #4]
  40c386:	2300      	movs	r3, #0
  40c388:	9302      	str	r3, [sp, #8]
  40c38a:	2300      	movs	r3, #0
  40c38c:	9303      	str	r3, [sp, #12]
  40c38e:	4842      	ldr	r0, [pc, #264]	; (40c498 <TaskMain+0x1e0>)
  40c390:	4942      	ldr	r1, [pc, #264]	; (40c49c <TaskMain+0x1e4>)
  40c392:	f240 2271 	movw	r2, #625	; 0x271
  40c396:	4b42      	ldr	r3, [pc, #264]	; (40c4a0 <TaskMain+0x1e8>)
  40c398:	4c36      	ldr	r4, [pc, #216]	; (40c474 <TaskMain+0x1bc>)
  40c39a:	47a0      	blx	r4
  40c39c:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c39e:	68fb      	ldr	r3, [r7, #12]
  40c3a0:	2b01      	cmp	r3, #1
  40c3a2:	d003      	beq.n	40c3ac <TaskMain+0xf4>
	{
		printf("Failed to Serial handler task code %d\r\n", retCode);
  40c3a4:	483f      	ldr	r0, [pc, #252]	; (40c4a4 <TaskMain+0x1ec>)
  40c3a6:	68f9      	ldr	r1, [r7, #12]
  40c3a8:	4b2e      	ldr	r3, [pc, #184]	; (40c464 <TaskMain+0x1ac>)
  40c3aa:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_dataHandler, "DH", TASK_DATA_HANDLER_STACK_SIZE, NULL, TASK_DATA_HANDLER_PRIORITY, NULL );
  40c3ac:	2307      	movs	r3, #7
  40c3ae:	9300      	str	r3, [sp, #0]
  40c3b0:	2300      	movs	r3, #0
  40c3b2:	9301      	str	r3, [sp, #4]
  40c3b4:	2300      	movs	r3, #0
  40c3b6:	9302      	str	r3, [sp, #8]
  40c3b8:	2300      	movs	r3, #0
  40c3ba:	9303      	str	r3, [sp, #12]
  40c3bc:	483a      	ldr	r0, [pc, #232]	; (40c4a8 <TaskMain+0x1f0>)
  40c3be:	493b      	ldr	r1, [pc, #236]	; (40c4ac <TaskMain+0x1f4>)
  40c3c0:	f240 22ee 	movw	r2, #750	; 0x2ee
  40c3c4:	2300      	movs	r3, #0
  40c3c6:	4c2b      	ldr	r4, [pc, #172]	; (40c474 <TaskMain+0x1bc>)
  40c3c8:	47a0      	blx	r4
  40c3ca:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c3cc:	68fb      	ldr	r3, [r7, #12]
  40c3ce:	2b01      	cmp	r3, #1
  40c3d0:	d003      	beq.n	40c3da <TaskMain+0x122>
	{
		printf("Failed to create data handler task code %d\r\n", retCode);
  40c3d2:	4837      	ldr	r0, [pc, #220]	; (40c4b0 <TaskMain+0x1f8>)
  40c3d4:	68f9      	ldr	r1, [r7, #12]
  40c3d6:	4b23      	ldr	r3, [pc, #140]	; (40c464 <TaskMain+0x1ac>)
  40c3d8:	4798      	blx	r3
	}	
	retCode = xTaskCreate(task_sdCardHandler, "SD", TASK_SD_CARD_WRITE_STACK_SIZE, NULL, TASK_SD_CARD_WRITE_PRIORITY, NULL );
  40c3da:	2304      	movs	r3, #4
  40c3dc:	9300      	str	r3, [sp, #0]
  40c3de:	2300      	movs	r3, #0
  40c3e0:	9301      	str	r3, [sp, #4]
  40c3e2:	2300      	movs	r3, #0
  40c3e4:	9302      	str	r3, [sp, #8]
  40c3e6:	2300      	movs	r3, #0
  40c3e8:	9303      	str	r3, [sp, #12]
  40c3ea:	4832      	ldr	r0, [pc, #200]	; (40c4b4 <TaskMain+0x1fc>)
  40c3ec:	4932      	ldr	r1, [pc, #200]	; (40c4b8 <TaskMain+0x200>)
  40c3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  40c3f2:	2300      	movs	r3, #0
  40c3f4:	4c1f      	ldr	r4, [pc, #124]	; (40c474 <TaskMain+0x1bc>)
  40c3f6:	47a0      	blx	r4
  40c3f8:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c3fa:	68fb      	ldr	r3, [r7, #12]
  40c3fc:	2b01      	cmp	r3, #1
  40c3fe:	d003      	beq.n	40c408 <TaskMain+0x150>
	{
		printf("Failed to sd card task code %d\r\n", retCode);
  40c400:	482e      	ldr	r0, [pc, #184]	; (40c4bc <TaskMain+0x204>)
  40c402:	68f9      	ldr	r1, [r7, #12]
  40c404:	4b17      	ldr	r3, [pc, #92]	; (40c464 <TaskMain+0x1ac>)
  40c406:	4798      	blx	r3
	}
	retCode = xTaskCreate(task_stateMachineHandler, "SM", TASK_STATE_MACHINE_STACK_SIZE, NULL, TASK_STATE_MACHINE_PRIORITY, NULL );
  40c408:	2303      	movs	r3, #3
  40c40a:	9300      	str	r3, [sp, #0]
  40c40c:	2300      	movs	r3, #0
  40c40e:	9301      	str	r3, [sp, #4]
  40c410:	2300      	movs	r3, #0
  40c412:	9302      	str	r3, [sp, #8]
  40c414:	2300      	movs	r3, #0
  40c416:	9303      	str	r3, [sp, #12]
  40c418:	4829      	ldr	r0, [pc, #164]	; (40c4c0 <TaskMain+0x208>)
  40c41a:	492a      	ldr	r1, [pc, #168]	; (40c4c4 <TaskMain+0x20c>)
  40c41c:	f240 22ee 	movw	r2, #750	; 0x2ee
  40c420:	2300      	movs	r3, #0
  40c422:	4c14      	ldr	r4, [pc, #80]	; (40c474 <TaskMain+0x1bc>)
  40c424:	47a0      	blx	r4
  40c426:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  40c428:	68fb      	ldr	r3, [r7, #12]
  40c42a:	2b01      	cmp	r3, #1
  40c42c:	d003      	beq.n	40c436 <TaskMain+0x17e>
	{
		printf("Failed to sd card task code %d\r\n", retCode);
  40c42e:	4823      	ldr	r0, [pc, #140]	; (40c4bc <TaskMain+0x204>)
  40c430:	68f9      	ldr	r1, [r7, #12]
  40c432:	4b0c      	ldr	r3, [pc, #48]	; (40c464 <TaskMain+0x1ac>)
  40c434:	4798      	blx	r3
	}
	
	printf("Program start\r\n");
  40c436:	4824      	ldr	r0, [pc, #144]	; (40c4c8 <TaskMain+0x210>)
  40c438:	4b0a      	ldr	r3, [pc, #40]	; (40c464 <TaskMain+0x1ac>)
  40c43a:	4798      	blx	r3
	uint8_t interval = 0;
  40c43c:	2300      	movs	r3, #0
  40c43e:	72fb      	strb	r3, [r7, #11]
	for (;;) 
	{
		/*	Hardware Test routine	*/
		checkInputGpio();
  40c440:	4b22      	ldr	r3, [pc, #136]	; (40c4cc <TaskMain+0x214>)
  40c442:	4798      	blx	r3
		
		vTaskDelay(250);
  40c444:	20fa      	movs	r0, #250	; 0xfa
  40c446:	4b22      	ldr	r3, [pc, #136]	; (40c4d0 <TaskMain+0x218>)
  40c448:	4798      	blx	r3
		//ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		//
		//
		
		
	}
  40c44a:	e7f9      	b.n	40c440 <TaskMain+0x188>
  40c44c:	00409ec1 	.word	0x00409ec1
  40c450:	0040c289 	.word	0x0040c289
  40c454:	00418f9c 	.word	0x00418f9c
  40c458:	00409589 	.word	0x00409589
  40c45c:	20003488 	.word	0x20003488
  40c460:	00418fa8 	.word	0x00418fa8
  40c464:	0040eadd 	.word	0x0040eadd
  40c468:	0040c6e1 	.word	0x0040c6e1
  40c46c:	00418fd0 	.word	0x00418fd0
  40c470:	200002e0 	.word	0x200002e0
  40c474:	00408631 	.word	0x00408631
  40c478:	00418fd4 	.word	0x00418fd4
  40c47c:	00418ff8 	.word	0x00418ff8
  40c480:	20000338 	.word	0x20000338
  40c484:	00418ffc 	.word	0x00418ffc
  40c488:	0040c0dd 	.word	0x0040c0dd
  40c48c:	00419020 	.word	0x00419020
  40c490:	20000364 	.word	0x20000364
  40c494:	00419024 	.word	0x00419024
  40c498:	004003d9 	.word	0x004003d9
  40c49c:	0041904c 	.word	0x0041904c
  40c4a0:	20000370 	.word	0x20000370
  40c4a4:	00419050 	.word	0x00419050
  40c4a8:	0040bd91 	.word	0x0040bd91
  40c4ac:	00419078 	.word	0x00419078
  40c4b0:	0041907c 	.word	0x0041907c
  40c4b4:	00400a29 	.word	0x00400a29
  40c4b8:	004190ac 	.word	0x004190ac
  40c4bc:	004190b0 	.word	0x004190b0
  40c4c0:	00400f55 	.word	0x00400f55
  40c4c4:	004190d4 	.word	0x004190d4
  40c4c8:	004190d8 	.word	0x004190d8
  40c4cc:	0040c4d5 	.word	0x0040c4d5
  40c4d0:	00408855 	.word	0x00408855

0040c4d4 <checkInputGpio>:
 * @brief Check for interrupt flags on every GPIO pins, process them and raise State machine events
 * @param 
 * @return 
 ***********************************************************************************************/
static void checkInputGpio(void)
{
  40c4d4:	b590      	push	{r4, r7, lr}
  40c4d6:	b083      	sub	sp, #12
  40c4d8:	af02      	add	r7, sp, #8
	//TODO maybe the enqueing of event should be done in the interrupts??
	if ((drv_gpio_check_Int(DRV_GPIO_PIN_PW_SW) == 1) | (SleepTimerHandle == 1))
  40c4da:	2000      	movs	r0, #0
  40c4dc:	4b70      	ldr	r3, [pc, #448]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c4de:	4798      	blx	r3
  40c4e0:	4603      	mov	r3, r0
  40c4e2:	461a      	mov	r2, r3
  40c4e4:	4b6f      	ldr	r3, [pc, #444]	; (40c6a4 <checkInputGpio+0x1d0>)
  40c4e6:	781b      	ldrb	r3, [r3, #0]
  40c4e8:	2b01      	cmp	r3, #1
  40c4ea:	bf14      	ite	ne
  40c4ec:	2300      	movne	r3, #0
  40c4ee:	2301      	moveq	r3, #1
  40c4f0:	b2db      	uxtb	r3, r3
  40c4f2:	4313      	orrs	r3, r2
  40c4f4:	2b00      	cmp	r3, #0
  40c4f6:	d074      	beq.n	40c5e2 <checkInputGpio+0x10e>
	{
		unsigned long PinFlag;
		
		if (toggle == FALSE)
  40c4f8:	4b6b      	ldr	r3, [pc, #428]	; (40c6a8 <checkInputGpio+0x1d4>)
  40c4fa:	781b      	ldrb	r3, [r3, #0]
  40c4fc:	f083 0301 	eor.w	r3, r3, #1
  40c500:	b2db      	uxtb	r3, r3
  40c502:	2b00      	cmp	r3, #0
  40c504:	d032      	beq.n	40c56c <checkInputGpio+0x98>
		{
			SleepTimerHandle = 0;
  40c506:	4b67      	ldr	r3, [pc, #412]	; (40c6a4 <checkInputGpio+0x1d0>)
  40c508:	2200      	movs	r2, #0
  40c50a:	701a      	strb	r2, [r3, #0]
			xTimerStop(SleepTimer, 0);
  40c50c:	4b67      	ldr	r3, [pc, #412]	; (40c6ac <checkInputGpio+0x1d8>)
  40c50e:	681b      	ldr	r3, [r3, #0]
  40c510:	2200      	movs	r2, #0
  40c512:	9200      	str	r2, [sp, #0]
  40c514:	4618      	mov	r0, r3
  40c516:	2101      	movs	r1, #1
  40c518:	2200      	movs	r2, #0
  40c51a:	2300      	movs	r3, #0
  40c51c:	4c64      	ldr	r4, [pc, #400]	; (40c6b0 <checkInputGpio+0x1dc>)
  40c51e:	47a0      	blx	r4
			xTimerReset(SleepTimer, 0);
  40c520:	4b62      	ldr	r3, [pc, #392]	; (40c6ac <checkInputGpio+0x1d8>)
  40c522:	681c      	ldr	r4, [r3, #0]
  40c524:	4b63      	ldr	r3, [pc, #396]	; (40c6b4 <checkInputGpio+0x1e0>)
  40c526:	4798      	blx	r3
  40c528:	4603      	mov	r3, r0
  40c52a:	2200      	movs	r2, #0
  40c52c:	9200      	str	r2, [sp, #0]
  40c52e:	4620      	mov	r0, r4
  40c530:	2100      	movs	r1, #0
  40c532:	461a      	mov	r2, r3
  40c534:	2300      	movs	r3, #0
  40c536:	4c5e      	ldr	r4, [pc, #376]	; (40c6b0 <checkInputGpio+0x1dc>)
  40c538:	47a0      	blx	r4
			oldSysTick = sgSysTickCount;
  40c53a:	4b5f      	ldr	r3, [pc, #380]	; (40c6b8 <checkInputGpio+0x1e4>)
  40c53c:	681a      	ldr	r2, [r3, #0]
  40c53e:	4b5f      	ldr	r3, [pc, #380]	; (40c6bc <checkInputGpio+0x1e8>)
  40c540:	601a      	str	r2, [r3, #0]
			drv_gpio_config_interrupt(DRV_GPIO_PIN_PW_SW, DRV_GPIO_INTERRUPT_HIGH_EDGE);	//Power pin pressed; configure interrupt for Rising edge
  40c542:	2000      	movs	r0, #0
  40c544:	2100      	movs	r1, #0
  40c546:	4b5e      	ldr	r3, [pc, #376]	; (40c6c0 <checkInputGpio+0x1ec>)
  40c548:	4798      	blx	r3
			xTimerStart(SleepTimer, 0);
  40c54a:	4b58      	ldr	r3, [pc, #352]	; (40c6ac <checkInputGpio+0x1d8>)
  40c54c:	681c      	ldr	r4, [r3, #0]
  40c54e:	4b59      	ldr	r3, [pc, #356]	; (40c6b4 <checkInputGpio+0x1e0>)
  40c550:	4798      	blx	r3
  40c552:	4603      	mov	r3, r0
  40c554:	2200      	movs	r2, #0
  40c556:	9200      	str	r2, [sp, #0]
  40c558:	4620      	mov	r0, r4
  40c55a:	2100      	movs	r1, #0
  40c55c:	461a      	mov	r2, r3
  40c55e:	2300      	movs	r3, #0
  40c560:	4c53      	ldr	r4, [pc, #332]	; (40c6b0 <checkInputGpio+0x1dc>)
  40c562:	47a0      	blx	r4
			toggle = TRUE;
  40c564:	4b50      	ldr	r3, [pc, #320]	; (40c6a8 <checkInputGpio+0x1d4>)
  40c566:	2201      	movs	r2, #1
  40c568:	701a      	strb	r2, [r3, #0]
  40c56a:	e03a      	b.n	40c5e2 <checkInputGpio+0x10e>
		}
		else if((toggle == TRUE)|(SleepTimerHandle == 1))
  40c56c:	4b4e      	ldr	r3, [pc, #312]	; (40c6a8 <checkInputGpio+0x1d4>)
  40c56e:	781b      	ldrb	r3, [r3, #0]
  40c570:	461a      	mov	r2, r3
  40c572:	4b4c      	ldr	r3, [pc, #304]	; (40c6a4 <checkInputGpio+0x1d0>)
  40c574:	781b      	ldrb	r3, [r3, #0]
  40c576:	2b01      	cmp	r3, #1
  40c578:	bf14      	ite	ne
  40c57a:	2300      	movne	r3, #0
  40c57c:	2301      	moveq	r3, #1
  40c57e:	b2db      	uxtb	r3, r3
  40c580:	4313      	orrs	r3, r2
  40c582:	2b00      	cmp	r3, #0
  40c584:	d02d      	beq.n	40c5e2 <checkInputGpio+0x10e>
		{
			xTimerStop(SleepTimer, 0);
  40c586:	4b49      	ldr	r3, [pc, #292]	; (40c6ac <checkInputGpio+0x1d8>)
  40c588:	681b      	ldr	r3, [r3, #0]
  40c58a:	2200      	movs	r2, #0
  40c58c:	9200      	str	r2, [sp, #0]
  40c58e:	4618      	mov	r0, r3
  40c590:	2101      	movs	r1, #1
  40c592:	2200      	movs	r2, #0
  40c594:	2300      	movs	r3, #0
  40c596:	4c46      	ldr	r4, [pc, #280]	; (40c6b0 <checkInputGpio+0x1dc>)
  40c598:	47a0      	blx	r4
			newSysTick = sgSysTickCount;
  40c59a:	4b47      	ldr	r3, [pc, #284]	; (40c6b8 <checkInputGpio+0x1e4>)
  40c59c:	681a      	ldr	r2, [r3, #0]
  40c59e:	4b49      	ldr	r3, [pc, #292]	; (40c6c4 <checkInputGpio+0x1f0>)
  40c5a0:	601a      	str	r2, [r3, #0]
			drv_gpio_config_interrupt(DRV_GPIO_ID_PIN_PW_SW, DRV_GPIO_INTERRUPT_LOW_EDGE);	//Power pin released; configure interrupt for Falling edge
  40c5a2:	2000      	movs	r0, #0
  40c5a4:	2101      	movs	r1, #1
  40c5a6:	4b46      	ldr	r3, [pc, #280]	; (40c6c0 <checkInputGpio+0x1ec>)
  40c5a8:	4798      	blx	r3
			toggle = FALSE;
  40c5aa:	4b3f      	ldr	r3, [pc, #252]	; (40c6a8 <checkInputGpio+0x1d4>)
  40c5ac:	2200      	movs	r2, #0
  40c5ae:	701a      	strb	r2, [r3, #0]
			if (SleepTimerHandle == 1)
  40c5b0:	4b3c      	ldr	r3, [pc, #240]	; (40c6a4 <checkInputGpio+0x1d0>)
  40c5b2:	781b      	ldrb	r3, [r3, #0]
  40c5b4:	2b01      	cmp	r3, #1
  40c5b6:	d107      	bne.n	40c5c8 <checkInputGpio+0xf4>
			{
				printf("Sleep mode enabled\r\n");
  40c5b8:	4843      	ldr	r0, [pc, #268]	; (40c6c8 <checkInputGpio+0x1f4>)
  40c5ba:	4b44      	ldr	r3, [pc, #272]	; (40c6cc <checkInputGpio+0x1f8>)
  40c5bc:	4798      	blx	r3
				task_stateMachine_EnqueueEvent(SYS_EVENT_POWER_SWITCH,0); 
  40c5be:	2000      	movs	r0, #0
  40c5c0:	2100      	movs	r1, #0
  40c5c2:	4b43      	ldr	r3, [pc, #268]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c5c4:	4798      	blx	r3
  40c5c6:	e002      	b.n	40c5ce <checkInputGpio+0xfa>
			}
			else
			{
				printf("PW SW pressed\r\n");
  40c5c8:	4842      	ldr	r0, [pc, #264]	; (40c6d4 <checkInputGpio+0x200>)
  40c5ca:	4b40      	ldr	r3, [pc, #256]	; (40c6cc <checkInputGpio+0x1f8>)
  40c5cc:	4798      	blx	r3
			}
			newSysTick = oldSysTick = 0;
  40c5ce:	4b3b      	ldr	r3, [pc, #236]	; (40c6bc <checkInputGpio+0x1e8>)
  40c5d0:	2200      	movs	r2, #0
  40c5d2:	601a      	str	r2, [r3, #0]
  40c5d4:	4b39      	ldr	r3, [pc, #228]	; (40c6bc <checkInputGpio+0x1e8>)
  40c5d6:	681a      	ldr	r2, [r3, #0]
  40c5d8:	4b3a      	ldr	r3, [pc, #232]	; (40c6c4 <checkInputGpio+0x1f0>)
  40c5da:	601a      	str	r2, [r3, #0]
			SleepTimerHandle = 0;
  40c5dc:	4b31      	ldr	r3, [pc, #196]	; (40c6a4 <checkInputGpio+0x1d0>)
  40c5de:	2200      	movs	r2, #0
  40c5e0:	701a      	strb	r2, [r3, #0]
		}
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW1) == 1)
  40c5e2:	2001      	movs	r0, #1
  40c5e4:	4b2e      	ldr	r3, [pc, #184]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c5e6:	4798      	blx	r3
  40c5e8:	4603      	mov	r3, r0
  40c5ea:	2b00      	cmp	r3, #0
  40c5ec:	d003      	beq.n	40c5f6 <checkInputGpio+0x122>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RECORD_SWITCH,0); 
  40c5ee:	2002      	movs	r0, #2
  40c5f0:	2100      	movs	r1, #0
  40c5f2:	4b37      	ldr	r3, [pc, #220]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c5f4:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_AC_SW2) == 1)
  40c5f6:	2002      	movs	r0, #2
  40c5f8:	4b29      	ldr	r3, [pc, #164]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c5fa:	4798      	blx	r3
  40c5fc:	4603      	mov	r3, r0
  40c5fe:	2b00      	cmp	r3, #0
  40c600:	d003      	beq.n	40c60a <checkInputGpio+0x136>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_SWITCH,0); 
  40c602:	2001      	movs	r0, #1
  40c604:	2100      	movs	r1, #0
  40c606:	4b32      	ldr	r3, [pc, #200]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c608:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC1) == 1)
  40c60a:	2003      	movs	r0, #3
  40c60c:	4b24      	ldr	r3, [pc, #144]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c60e:	4798      	blx	r3
  40c610:	4603      	mov	r3, r0
  40c612:	2b00      	cmp	r3, #0
  40c614:	d003      	beq.n	40c61e <checkInputGpio+0x14a>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_OVER_CURRENT,1);
  40c616:	2003      	movs	r0, #3
  40c618:	2101      	movs	r1, #1
  40c61a:	4b2d      	ldr	r3, [pc, #180]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c61c:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_OC2) == 1)
  40c61e:	2004      	movs	r0, #4
  40c620:	4b1f      	ldr	r3, [pc, #124]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c622:	4798      	blx	r3
  40c624:	4603      	mov	r3, r0
  40c626:	2b00      	cmp	r3, #0
  40c628:	d003      	beq.n	40c632 <checkInputGpio+0x15e>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_OVER_CURRENT,2);
  40c62a:	2003      	movs	r0, #3
  40c62c:	2102      	movs	r1, #2
  40c62e:	4b28      	ldr	r3, [pc, #160]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c630:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC1) == 1)
  40c632:	2005      	movs	r0, #5
  40c634:	4b1a      	ldr	r3, [pc, #104]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c636:	4798      	blx	r3
  40c638:	4603      	mov	r3, r0
  40c63a:	2b00      	cmp	r3, #0
  40c63c:	d003      	beq.n	40c646 <checkInputGpio+0x172>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_JACK_DETECT,1);
  40c63e:	2007      	movs	r0, #7
  40c640:	2101      	movs	r1, #1
  40c642:	4b23      	ldr	r3, [pc, #140]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c644:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_JC_DC2) == 1)
  40c646:	2006      	movs	r0, #6
  40c648:	4b15      	ldr	r3, [pc, #84]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c64a:	4798      	blx	r3
  40c64c:	4603      	mov	r3, r0
  40c64e:	2b00      	cmp	r3, #0
  40c650:	d003      	beq.n	40c65a <checkInputGpio+0x186>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_JACK_DETECT,2);
  40c652:	2007      	movs	r0, #7
  40c654:	2102      	movs	r1, #2
  40c656:	4b1e      	ldr	r3, [pc, #120]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c658:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_LBO) == 1)
  40c65a:	200f      	movs	r0, #15
  40c65c:	4b10      	ldr	r3, [pc, #64]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c65e:	4798      	blx	r3
  40c660:	4603      	mov	r3, r0
  40c662:	2b00      	cmp	r3, #0
  40c664:	d003      	beq.n	40c66e <checkInputGpio+0x19a>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_LOW_BATTERY,0);
  40c666:	2008      	movs	r0, #8
  40c668:	2100      	movs	r1, #0
  40c66a:	4b19      	ldr	r3, [pc, #100]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c66c:	4798      	blx	r3
	}
	//no idea what to do with this one...	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_STAT) == 1)
  40c66e:	2011      	movs	r0, #17
  40c670:	4b0b      	ldr	r3, [pc, #44]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c672:	4798      	blx	r3
  40c674:	4603      	mov	r3, r0
  40c676:	2b00      	cmp	r3, #0
  40c678:	d005      	beq.n	40c686 <checkInputGpio+0x1b2>
	{
		printf("STAT detected\r\n");
  40c67a:	4817      	ldr	r0, [pc, #92]	; (40c6d8 <checkInputGpio+0x204>)
  40c67c:	4b13      	ldr	r3, [pc, #76]	; (40c6cc <checkInputGpio+0x1f8>)
  40c67e:	4798      	blx	r3
		vTaskDelay(1);
  40c680:	2001      	movs	r0, #1
  40c682:	4b16      	ldr	r3, [pc, #88]	; (40c6dc <checkInputGpio+0x208>)
  40c684:	4798      	blx	r3
	}	
	if (drv_gpio_check_Int(DRV_GPIO_PIN_SD_CD) == 1)
  40c686:	2010      	movs	r0, #16
  40c688:	4b05      	ldr	r3, [pc, #20]	; (40c6a0 <checkInputGpio+0x1cc>)
  40c68a:	4798      	blx	r3
  40c68c:	4603      	mov	r3, r0
  40c68e:	2b00      	cmp	r3, #0
  40c690:	d003      	beq.n	40c69a <checkInputGpio+0x1c6>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_SD_CARD_DETECT,0);
  40c692:	2004      	movs	r0, #4
  40c694:	2100      	movs	r1, #0
  40c696:	4b0e      	ldr	r3, [pc, #56]	; (40c6d0 <checkInputGpio+0x1fc>)
  40c698:	4798      	blx	r3
	}
  40c69a:	3704      	adds	r7, #4
  40c69c:	46bd      	mov	sp, r7
  40c69e:	bd90      	pop	{r4, r7, pc}
  40c6a0:	0040ab45 	.word	0x0040ab45
  40c6a4:	20001e6c 	.word	0x20001e6c
  40c6a8:	2000348c 	.word	0x2000348c
  40c6ac:	20003488 	.word	0x20003488
  40c6b0:	004095f5 	.word	0x004095f5
  40c6b4:	00408a55 	.word	0x00408a55
  40c6b8:	20001f3c 	.word	0x20001f3c
  40c6bc:	20003490 	.word	0x20003490
  40c6c0:	0040aabd 	.word	0x0040aabd
  40c6c4:	20003484 	.word	0x20003484
  40c6c8:	004190e8 	.word	0x004190e8
  40c6cc:	0040eadd 	.word	0x0040eadd
  40c6d0:	00401029 	.word	0x00401029
  40c6d4:	00419100 	.word	0x00419100
  40c6d8:	00419110 	.word	0x00419110
  40c6dc:	00408855 	.word	0x00408855

0040c6e0 <task_quinticHandler>:
 *	function. 
 * @param pvParameters, void pointer to structure containing quintic and imu configuration. 
 * @return void
 ***********************************************************************************************/
void task_quinticHandler(void *pvParameters)
{
  40c6e0:	b590      	push	{r4, r7, lr}
  40c6e2:	b0d1      	sub	sp, #324	; 0x144
  40c6e4:	af00      	add	r7, sp, #0
  40c6e6:	1d3b      	adds	r3, r7, #4
  40c6e8:	6018      	str	r0, [r3, #0]
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
  40c6ea:	1d3b      	adds	r3, r7, #4
  40c6ec:	681b      	ldr	r3, [r3, #0]
  40c6ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	//initialize all structures ,check everything is alright
	int i = 0;
  40c6f2:	2300      	movs	r3, #0
  40c6f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  40c6f8:	2300      	movs	r3, #0
  40c6fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  40c6fe:	e02d      	b.n	40c75c <task_quinticHandler+0x7c>
	{
		//qConfig->imuArray[i]->bufferEnd = 0;
		//qConfig->imuArray[i]->bufferHead = 0;
		//memset(qConfig->imuArray[i]->packetBuffer, 0 , IMU_BUFFER_SIZE*IMU_PACKET_LENGTH); 	
		qConfig->imuArray[i]->stats.avgPacketTime = 0;
  40c700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c704:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40c708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c70c:	2200      	movs	r2, #0
  40c70e:	635a      	str	r2, [r3, #52]	; 0x34
		qConfig->imuArray[i]->stats.droppedPackets = 0;
  40c710:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c714:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40c718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c71c:	2200      	movs	r2, #0
  40c71e:	629a      	str	r2, [r3, #40]	; 0x28
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
  40c720:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c724:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40c728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c72c:	4a99      	ldr	r2, [pc, #612]	; (40c994 <task_quinticHandler+0x2b4>)
  40c72e:	6812      	ldr	r2, [r2, #0]
  40c730:	62da      	str	r2, [r3, #44]	; 0x2c
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
  40c732:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c736:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40c73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c73e:	2200      	movs	r2, #0
  40c740:	631a      	str	r2, [r3, #48]	; 0x30
		qConfig->imuArray[i]->stats.packetCnt = 0;
  40c742:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c746:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  40c74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c74e:	2200      	movs	r2, #0
  40c750:	625a      	str	r2, [r3, #36]	; 0x24
	//cast void pointer to quintic config type. 
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters; 
	//initialize all structures ,check everything is alright
	int i = 0;
	//initialize all buffers and pointers to zero
	for(i = 0 ; i < QUINTIC_MAX_NUMBER_OF_IMUS ; i++)
  40c752:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40c756:	3301      	adds	r3, #1
  40c758:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  40c75c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
  40c760:	2b04      	cmp	r3, #4
  40c762:	ddcd      	ble.n	40c700 <task_quinticHandler+0x20>
		qConfig->imuArray[i]->stats.lastPacketTime = sgSysTickCount;
		qConfig->imuArray[i]->stats.maxPacketTime = 0;
		qConfig->imuArray[i]->stats.packetCnt = 0;
	}
	
	if(drv_uart_isInit(qConfig->uartDevice) != STATUS_PASS)
  40c764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c768:	695b      	ldr	r3, [r3, #20]
  40c76a:	4618      	mov	r0, r3
  40c76c:	4b8a      	ldr	r3, [pc, #552]	; (40c998 <task_quinticHandler+0x2b8>)
  40c76e:	4798      	blx	r3
  40c770:	4603      	mov	r3, r0
  40c772:	2b00      	cmp	r3, #0
  40c774:	d000      	beq.n	40c778 <task_quinticHandler+0x98>
	{
		//the UART driver has not been initialized, this should be done before starting this task!
		return; 
  40c776:	e109      	b.n	40c98c <task_quinticHandler+0x2ac>

	#else
	//task_quintic_initializeImus(qConfig);
	#endif 
	dataPacket_t packet; 
	packet.type = DATA_PACKET_TYPE_IMU; 
  40c778:	2300      	movs	r3, #0
  40c77a:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	//main loop of task, this is where we request information and store it. 
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; 
  40c77e:	f107 0308 	add.w	r3, r7, #8
  40c782:	461a      	mov	r2, r3
  40c784:	23ff      	movs	r3, #255	; 0xff
  40c786:	4610      	mov	r0, r2
  40c788:	2100      	movs	r1, #0
  40c78a:	461a      	mov	r2, r3
  40c78c:	4b83      	ldr	r3, [pc, #524]	; (40c99c <task_quinticHandler+0x2bc>)
  40c78e:	4798      	blx	r3
	int packetNumber = 0;
  40c790:	2300      	movs	r3, #0
  40c792:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint32_t timeNow = 0;
  40c796:	2300      	movs	r3, #0
  40c798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	int index = -1; 
  40c79c:	f04f 33ff 	mov.w	r3, #4294967295
  40c7a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	qConfig->isinit = true;
  40c7a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c7a8:	2201      	movs	r2, #1
  40c7aa:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{

		#ifndef DEBUG_DUMMY_DATA
		if(getCurrentState() != SYS_STATE_RESET)
  40c7ac:	4b7c      	ldr	r3, [pc, #496]	; (40c9a0 <task_quinticHandler+0x2c0>)
  40c7ae:	4798      	blx	r3
  40c7b0:	4603      	mov	r3, r0
  40c7b2:	2b02      	cmp	r3, #2
  40c7b4:	f000 80e6 	beq.w	40c984 <task_quinticHandler+0x2a4>
		{		
			if(drv_uart_getlineTimed(qConfig->uartDevice, buf, CMD_RESPONSE_BUF_SIZE, 400) == STATUS_PASS)
  40c7b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c7bc:	695a      	ldr	r2, [r3, #20]
  40c7be:	f107 0308 	add.w	r3, r7, #8
  40c7c2:	4610      	mov	r0, r2
  40c7c4:	4619      	mov	r1, r3
  40c7c6:	22ff      	movs	r2, #255	; 0xff
  40c7c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
  40c7cc:	4c75      	ldr	r4, [pc, #468]	; (40c9a4 <task_quinticHandler+0x2c4>)
  40c7ce:	47a0      	blx	r4
  40c7d0:	4603      	mov	r3, r0
  40c7d2:	2b00      	cmp	r3, #0
  40c7d4:	f040 80d6 	bne.w	40c984 <task_quinticHandler+0x2a4>
			{
				index = -1; 
  40c7d8:	f04f 33ff 	mov.w	r3, #4294967295
  40c7dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				if(strncmp(buf, "00", 2) == 0)
  40c7e0:	f107 0308 	add.w	r3, r7, #8
  40c7e4:	4618      	mov	r0, r3
  40c7e6:	4970      	ldr	r1, [pc, #448]	; (40c9a8 <task_quinticHandler+0x2c8>)
  40c7e8:	2202      	movs	r2, #2
  40c7ea:	4b70      	ldr	r3, [pc, #448]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c7ec:	4798      	blx	r3
  40c7ee:	4603      	mov	r3, r0
  40c7f0:	2b00      	cmp	r3, #0
  40c7f2:	d103      	bne.n	40c7fc <task_quinticHandler+0x11c>
				{
					index = 0;
  40c7f4:	2300      	movs	r3, #0
  40c7f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40c7fa:	e058      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}
				else if(strncmp(buf, "11", 2) == 0)
  40c7fc:	f107 0308 	add.w	r3, r7, #8
  40c800:	4618      	mov	r0, r3
  40c802:	496b      	ldr	r1, [pc, #428]	; (40c9b0 <task_quinticHandler+0x2d0>)
  40c804:	2202      	movs	r2, #2
  40c806:	4b69      	ldr	r3, [pc, #420]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c808:	4798      	blx	r3
  40c80a:	4603      	mov	r3, r0
  40c80c:	2b00      	cmp	r3, #0
  40c80e:	d103      	bne.n	40c818 <task_quinticHandler+0x138>
				{
					index = 1;
  40c810:	2301      	movs	r3, #1
  40c812:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40c816:	e04a      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}
				else if(strncmp(buf, "22", 2) == 0)	
  40c818:	f107 0308 	add.w	r3, r7, #8
  40c81c:	4618      	mov	r0, r3
  40c81e:	4965      	ldr	r1, [pc, #404]	; (40c9b4 <task_quinticHandler+0x2d4>)
  40c820:	2202      	movs	r2, #2
  40c822:	4b62      	ldr	r3, [pc, #392]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c824:	4798      	blx	r3
  40c826:	4603      	mov	r3, r0
  40c828:	2b00      	cmp	r3, #0
  40c82a:	d103      	bne.n	40c834 <task_quinticHandler+0x154>
				{				
					index = 2;
  40c82c:	2302      	movs	r3, #2
  40c82e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40c832:	e03c      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}
				else if(strncmp(buf, "33", 2) == 0)	
  40c834:	f107 0308 	add.w	r3, r7, #8
  40c838:	4618      	mov	r0, r3
  40c83a:	495f      	ldr	r1, [pc, #380]	; (40c9b8 <task_quinticHandler+0x2d8>)
  40c83c:	2202      	movs	r2, #2
  40c83e:	4b5b      	ldr	r3, [pc, #364]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c840:	4798      	blx	r3
  40c842:	4603      	mov	r3, r0
  40c844:	2b00      	cmp	r3, #0
  40c846:	d103      	bne.n	40c850 <task_quinticHandler+0x170>
				{				
					index = 3;
  40c848:	2303      	movs	r3, #3
  40c84a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40c84e:	e02e      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}				
				else if(strncmp(buf, "44", 2) == 0)
  40c850:	f107 0308 	add.w	r3, r7, #8
  40c854:	4618      	mov	r0, r3
  40c856:	4959      	ldr	r1, [pc, #356]	; (40c9bc <task_quinticHandler+0x2dc>)
  40c858:	2202      	movs	r2, #2
  40c85a:	4b54      	ldr	r3, [pc, #336]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c85c:	4798      	blx	r3
  40c85e:	4603      	mov	r3, r0
  40c860:	2b00      	cmp	r3, #0
  40c862:	d103      	bne.n	40c86c <task_quinticHandler+0x18c>
				{
					index = 4;
  40c864:	2304      	movs	r3, #4
  40c866:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  40c86a:	e020      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}
				else if (strncmp(buf, "DiscResp", 8) == 0)
  40c86c:	f107 0308 	add.w	r3, r7, #8
  40c870:	4618      	mov	r0, r3
  40c872:	4953      	ldr	r1, [pc, #332]	; (40c9c0 <task_quinticHandler+0x2e0>)
  40c874:	2208      	movs	r2, #8
  40c876:	4b4d      	ldr	r3, [pc, #308]	; (40c9ac <task_quinticHandler+0x2cc>)
  40c878:	4798      	blx	r3
  40c87a:	4603      	mov	r3, r0
  40c87c:	2b00      	cmp	r3, #0
  40c87e:	d10f      	bne.n	40c8a0 <task_quinticHandler+0x1c0>
				{
					printf("Disconnection event from Q%d\r\n", qConfig->qId);
  40c880:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c886:	484f      	ldr	r0, [pc, #316]	; (40c9c4 <task_quinticHandler+0x2e4>)
  40c888:	4619      	mov	r1, r3
  40c88a:	4b4f      	ldr	r3, [pc, #316]	; (40c9c8 <task_quinticHandler+0x2e8>)
  40c88c:	4798      	blx	r3
					task_stateMachine_EnqueueEvent(SYS_EVENT_IMU_DISCONNECT, qConfig->qId);
  40c88e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c894:	b29b      	uxth	r3, r3
  40c896:	2005      	movs	r0, #5
  40c898:	4619      	mov	r1, r3
  40c89a:	4b4c      	ldr	r3, [pc, #304]	; (40c9cc <task_quinticHandler+0x2ec>)
  40c89c:	4798      	blx	r3
  40c89e:	e006      	b.n	40c8ae <task_quinticHandler+0x1ce>
				}
				else
				{				
					//this is a corrupt packet, increment the count. 
					qConfig->corruptPacketCnt++;
  40c8a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c8a4:	69db      	ldr	r3, [r3, #28]
  40c8a6:	1c5a      	adds	r2, r3, #1
  40c8a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c8ac:	61da      	str	r2, [r3, #28]
					//vTaskDelay(10);
					
				}
				//validate the index
				if(index >= 0 && index <= 4)
  40c8ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40c8b2:	2b00      	cmp	r3, #0
  40c8b4:	db66      	blt.n	40c984 <task_quinticHandler+0x2a4>
  40c8b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
  40c8ba:	2b04      	cmp	r3, #4
  40c8bc:	dc62      	bgt.n	40c984 <task_quinticHandler+0x2a4>
				{
					packet.imuId = qConfig->imuArray[index]->imuId; 
  40c8be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c8c2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c8ca:	681b      	ldr	r3, [r3, #0]
  40c8cc:	b2db      	uxtb	r3, r3
  40c8ce:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
					packet.imuIndex = packet.imuId; 
  40c8d2:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
  40c8d6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
					qConfig->imuArray[index]->stats.packetCnt++; //increment the packets received count
  40c8da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c8de:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40c8e8:	3201      	adds	r2, #1
  40c8ea:	625a      	str	r2, [r3, #36]	; 0x24
					timeNow = sgSysTickCount; 
  40c8ec:	4b29      	ldr	r3, [pc, #164]	; (40c994 <task_quinticHandler+0x2b4>)
  40c8ee:	681b      	ldr	r3, [r3, #0]
  40c8f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
					//calculate the new running average packet time --> (average + (last packet received time - current Time)/2)
					qConfig->imuArray[index]->stats.avgPacketTime = (qConfig->imuArray[index]->stats.avgPacketTime + ( timeNow - qConfig->imuArray[index]->stats.lastPacketTime ))>>1;
  40c8f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c8f8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40c8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c900:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
  40c904:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
  40c908:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40c90c:	6b51      	ldr	r1, [r2, #52]	; 0x34
  40c90e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
  40c912:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
  40c916:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40c91a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40c91c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
  40c920:	1a82      	subs	r2, r0, r2
  40c922:	440a      	add	r2, r1
  40c924:	0852      	lsrs	r2, r2, #1
  40c926:	635a      	str	r2, [r3, #52]	; 0x34
					qConfig->imuArray[index]->stats.lastPacketTime = timeNow; 				
  40c928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c92c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40c930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c934:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
  40c938:	62da      	str	r2, [r3, #44]	; 0x2c
					memcpy(packet.data,buf+2, 12+1);				
  40c93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
  40c93e:	1cda      	adds	r2, r3, #3
  40c940:	f107 0308 	add.w	r3, r7, #8
  40c944:	3302      	adds	r3, #2
  40c946:	4610      	mov	r0, r2
  40c948:	4619      	mov	r1, r3
  40c94a:	220d      	movs	r2, #13
  40c94c:	4b20      	ldr	r3, [pc, #128]	; (40c9d0 <task_quinticHandler+0x2f0>)
  40c94e:	4798      	blx	r3
					if(queue_dataHandler != NULL)
  40c950:	4b20      	ldr	r3, [pc, #128]	; (40c9d4 <task_quinticHandler+0x2f4>)
  40c952:	681b      	ldr	r3, [r3, #0]
  40c954:	2b00      	cmp	r3, #0
  40c956:	d015      	beq.n	40c984 <task_quinticHandler+0x2a4>
					{
						if(xQueueSendToBack( queue_dataHandler,( void * ) &packet,5) != TRUE)
  40c958:	4b1e      	ldr	r3, [pc, #120]	; (40c9d4 <task_quinticHandler+0x2f4>)
  40c95a:	681a      	ldr	r2, [r3, #0]
  40c95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
  40c960:	4610      	mov	r0, r2
  40c962:	4619      	mov	r1, r3
  40c964:	2205      	movs	r2, #5
  40c966:	2300      	movs	r3, #0
  40c968:	4c1b      	ldr	r4, [pc, #108]	; (40c9d8 <task_quinticHandler+0x2f8>)
  40c96a:	47a0      	blx	r4
  40c96c:	4603      	mov	r3, r0
  40c96e:	2b01      	cmp	r3, #1
  40c970:	d008      	beq.n	40c984 <task_quinticHandler+0x2a4>
						{
							//error failed to queue the packet.
							qConfig->imuArray[index]->stats.droppedPackets++; 
  40c972:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  40c976:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  40c97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c97e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40c980:	3201      	adds	r2, #1
  40c982:	629a      	str	r2, [r3, #40]	; 0x28
					}				
				}
			}
		}
		//taskYIELD(); 
		vTaskDelay(1);
  40c984:	2001      	movs	r0, #1
  40c986:	4b15      	ldr	r3, [pc, #84]	; (40c9dc <task_quinticHandler+0x2fc>)
  40c988:	4798      	blx	r3
		#else

		#endif
					
		
	}	
  40c98a:	e70f      	b.n	40c7ac <task_quinticHandler+0xcc>
}
  40c98c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
  40c990:	46bd      	mov	sp, r7
  40c992:	bd90      	pop	{r4, r7, pc}
  40c994:	20001f3c 	.word	0x20001f3c
  40c998:	0040b719 	.word	0x0040b719
  40c99c:	0040f191 	.word	0x0040f191
  40c9a0:	0040107d 	.word	0x0040107d
  40c9a4:	0040b819 	.word	0x0040b819
  40c9a8:	00419120 	.word	0x00419120
  40c9ac:	0040f879 	.word	0x0040f879
  40c9b0:	00419124 	.word	0x00419124
  40c9b4:	00419128 	.word	0x00419128
  40c9b8:	0041912c 	.word	0x0041912c
  40c9bc:	00419130 	.word	0x00419130
  40c9c0:	00419134 	.word	0x00419134
  40c9c4:	00419140 	.word	0x00419140
  40c9c8:	0040eadd 	.word	0x0040eadd
  40c9cc:	00401029 	.word	0x00401029
  40c9d0:	0040f05d 	.word	0x0040f05d
  40c9d4:	20001d98 	.word	0x20001d98
  40c9d8:	00408019 	.word	0x00408019
  40c9dc:	00408855 	.word	0x00408855

0040c9e0 <task_quintic_initializeImus>:
 * @brief Start the initializing process for IMUs.
 * @param pvParameters, void pointer to structure containing quintic and imu configuration. 
 * @return void
 ***********************************************************************************************/
void task_quintic_initializeImus(void *pvParameters)
{
  40c9e0:	b580      	push	{r7, lr}
  40c9e2:	b086      	sub	sp, #24
  40c9e4:	af00      	add	r7, sp, #0
  40c9e6:	6078      	str	r0, [r7, #4]
	quinticConfiguration_t *qConfig = (quinticConfiguration_t*)pvParameters;
  40c9e8:	687b      	ldr	r3, [r7, #4]
  40c9ea:	60fb      	str	r3, [r7, #12]
	status_t result = STATUS_PASS;
  40c9ec:	2300      	movs	r3, #0
  40c9ee:	75fb      	strb	r3, [r7, #23]
	status_t scanSuccess=STATUS_FAIL, connSuccess=STATUS_FAIL;
  40c9f0:	2301      	movs	r3, #1
  40c9f2:	75bb      	strb	r3, [r7, #22]
  40c9f4:	2301      	movs	r3, #1
  40c9f6:	757b      	strb	r3, [r7, #21]
	int vScanLoopCount=0;
  40c9f8:	2300      	movs	r3, #0
  40c9fa:	60bb      	str	r3, [r7, #8]
	//reset the quintic here...
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  40c9fc:	68fb      	ldr	r3, [r7, #12]
  40c9fe:	695b      	ldr	r3, [r3, #20]
  40ca00:	4618      	mov	r0, r3
  40ca02:	4b67      	ldr	r3, [pc, #412]	; (40cba0 <task_quintic_initializeImus+0x1c0>)
  40ca04:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_LOW);
  40ca06:	68fb      	ldr	r3, [r7, #12]
  40ca08:	f893 3020 	ldrb.w	r3, [r3, #32]
  40ca0c:	4618      	mov	r0, r3
  40ca0e:	2100      	movs	r1, #0
  40ca10:	4b64      	ldr	r3, [pc, #400]	; (40cba4 <task_quintic_initializeImus+0x1c4>)
  40ca12:	4798      	blx	r3
	vTaskDelay(100);
  40ca14:	2064      	movs	r0, #100	; 0x64
  40ca16:	4b64      	ldr	r3, [pc, #400]	; (40cba8 <task_quintic_initializeImus+0x1c8>)
  40ca18:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin,DRV_GPIO_PIN_STATE_HIGH);
  40ca1a:	68fb      	ldr	r3, [r7, #12]
  40ca1c:	f893 3020 	ldrb.w	r3, [r3, #32]
  40ca20:	4618      	mov	r0, r3
  40ca22:	2101      	movs	r1, #1
  40ca24:	4b5f      	ldr	r3, [pc, #380]	; (40cba4 <task_quintic_initializeImus+0x1c4>)
  40ca26:	4798      	blx	r3

	//wait for first ACK
	result = getAck(qConfig->uartDevice);
  40ca28:	68fb      	ldr	r3, [r7, #12]
  40ca2a:	695b      	ldr	r3, [r3, #20]
  40ca2c:	4618      	mov	r0, r3
  40ca2e:	4b5f      	ldr	r3, [pc, #380]	; (40cbac <task_quintic_initializeImus+0x1cc>)
  40ca30:	4798      	blx	r3
  40ca32:	4603      	mov	r3, r0
  40ca34:	75fb      	strb	r3, [r7, #23]
	drv_uart_flushRx(qConfig->uartDevice);	//flush the uart first
  40ca36:	68fb      	ldr	r3, [r7, #12]
  40ca38:	695b      	ldr	r3, [r3, #20]
  40ca3a:	4618      	mov	r0, r3
  40ca3c:	4b58      	ldr	r3, [pc, #352]	; (40cba0 <task_quintic_initializeImus+0x1c0>)
  40ca3e:	4798      	blx	r3
	vTaskDelay(10);
  40ca40:	200a      	movs	r0, #10
  40ca42:	4b59      	ldr	r3, [pc, #356]	; (40cba8 <task_quintic_initializeImus+0x1c8>)
  40ca44:	4798      	blx	r3
	//get quintic ready to receive the
	if (result != STATUS_PASS)
  40ca46:	7dfb      	ldrb	r3, [r7, #23]
  40ca48:	2b00      	cmp	r3, #0
  40ca4a:	d007      	beq.n	40ca5c <task_quintic_initializeImus+0x7c>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  40ca4c:	2009      	movs	r0, #9
  40ca4e:	21ff      	movs	r1, #255	; 0xff
  40ca50:	4b57      	ldr	r3, [pc, #348]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40ca52:	4798      	blx	r3
		vTaskDelete(NULL);
  40ca54:	2000      	movs	r0, #0
  40ca56:	4b57      	ldr	r3, [pc, #348]	; (40cbb4 <task_quintic_initializeImus+0x1d4>)
  40ca58:	4798      	blx	r3
		return;
  40ca5a:	e09d      	b.n	40cb98 <task_quintic_initializeImus+0x1b8>
	}
	
	sendString(qConfig->uartDevice,QCMD_BEGIN);
  40ca5c:	68fb      	ldr	r3, [r7, #12]
  40ca5e:	695b      	ldr	r3, [r3, #20]
  40ca60:	4618      	mov	r0, r3
  40ca62:	4955      	ldr	r1, [pc, #340]	; (40cbb8 <task_quintic_initializeImus+0x1d8>)
  40ca64:	4b55      	ldr	r3, [pc, #340]	; (40cbbc <task_quintic_initializeImus+0x1dc>)
  40ca66:	4798      	blx	r3
	vTaskDelay(10);
  40ca68:	200a      	movs	r0, #10
  40ca6a:	4b4f      	ldr	r3, [pc, #316]	; (40cba8 <task_quintic_initializeImus+0x1c8>)
  40ca6c:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice);
  40ca6e:	68fb      	ldr	r3, [r7, #12]
  40ca70:	695b      	ldr	r3, [r3, #20]
  40ca72:	4618      	mov	r0, r3
  40ca74:	4b4d      	ldr	r3, [pc, #308]	; (40cbac <task_quintic_initializeImus+0x1cc>)
  40ca76:	4798      	blx	r3
  40ca78:	4603      	mov	r3, r0
  40ca7a:	461a      	mov	r2, r3
  40ca7c:	7dfb      	ldrb	r3, [r7, #23]
  40ca7e:	4313      	orrs	r3, r2
  40ca80:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_PASS)
  40ca82:	7dfb      	ldrb	r3, [r7, #23]
  40ca84:	2b00      	cmp	r3, #0
  40ca86:	d007      	beq.n	40ca98 <task_quintic_initializeImus+0xb8>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  40ca88:	2009      	movs	r0, #9
  40ca8a:	21ff      	movs	r1, #255	; 0xff
  40ca8c:	4b48      	ldr	r3, [pc, #288]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40ca8e:	4798      	blx	r3
		vTaskDelete(NULL);
  40ca90:	2000      	movs	r0, #0
  40ca92:	4b48      	ldr	r3, [pc, #288]	; (40cbb4 <task_quintic_initializeImus+0x1d4>)
  40ca94:	4798      	blx	r3
		return;
  40ca96:	e07f      	b.n	40cb98 <task_quintic_initializeImus+0x1b8>
	}
	
	//send MAC addresses for each NOD
	int i = 0;
  40ca98:	2300      	movs	r3, #0
  40ca9a:	613b      	str	r3, [r7, #16]
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  40ca9c:	2300      	movs	r3, #0
  40ca9e:	613b      	str	r3, [r7, #16]
  40caa0:	e025      	b.n	40caee <task_quintic_initializeImus+0x10e>
	{
		sendString(qConfig->uartDevice,qConfig->imuArray[i]->macAddress);
  40caa2:	68fb      	ldr	r3, [r7, #12]
  40caa4:	695a      	ldr	r2, [r3, #20]
  40caa6:	68fb      	ldr	r3, [r7, #12]
  40caa8:	6939      	ldr	r1, [r7, #16]
  40caaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40caae:	3304      	adds	r3, #4
  40cab0:	4610      	mov	r0, r2
  40cab2:	4619      	mov	r1, r3
  40cab4:	4b41      	ldr	r3, [pc, #260]	; (40cbbc <task_quintic_initializeImus+0x1dc>)
  40cab6:	4798      	blx	r3
		vTaskDelay(10);
  40cab8:	200a      	movs	r0, #10
  40caba:	4b3b      	ldr	r3, [pc, #236]	; (40cba8 <task_quintic_initializeImus+0x1c8>)
  40cabc:	4798      	blx	r3
		result |= getAck(qConfig->uartDevice);
  40cabe:	68fb      	ldr	r3, [r7, #12]
  40cac0:	695b      	ldr	r3, [r3, #20]
  40cac2:	4618      	mov	r0, r3
  40cac4:	4b39      	ldr	r3, [pc, #228]	; (40cbac <task_quintic_initializeImus+0x1cc>)
  40cac6:	4798      	blx	r3
  40cac8:	4603      	mov	r3, r0
  40caca:	461a      	mov	r2, r3
  40cacc:	7dfb      	ldrb	r3, [r7, #23]
  40cace:	4313      	orrs	r3, r2
  40cad0:	75fb      	strb	r3, [r7, #23]
		if (result != STATUS_PASS)
  40cad2:	7dfb      	ldrb	r3, [r7, #23]
  40cad4:	2b00      	cmp	r3, #0
  40cad6:	d007      	beq.n	40cae8 <task_quintic_initializeImus+0x108>
		{
			task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  40cad8:	2009      	movs	r0, #9
  40cada:	21ff      	movs	r1, #255	; 0xff
  40cadc:	4b34      	ldr	r3, [pc, #208]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40cade:	4798      	blx	r3
			vTaskDelete(NULL);
  40cae0:	2000      	movs	r0, #0
  40cae2:	4b34      	ldr	r3, [pc, #208]	; (40cbb4 <task_quintic_initializeImus+0x1d4>)
  40cae4:	4798      	blx	r3
			return;
  40cae6:	e057      	b.n	40cb98 <task_quintic_initializeImus+0x1b8>
		return;
	}
	
	//send MAC addresses for each NOD
	int i = 0;
	for(i=0;i<qConfig->expectedNumberOfNods; i++)
  40cae8:	693b      	ldr	r3, [r7, #16]
  40caea:	3301      	adds	r3, #1
  40caec:	613b      	str	r3, [r7, #16]
  40caee:	68fb      	ldr	r3, [r7, #12]
  40caf0:	699a      	ldr	r2, [r3, #24]
  40caf2:	693b      	ldr	r3, [r7, #16]
  40caf4:	429a      	cmp	r2, r3
  40caf6:	dcd4      	bgt.n	40caa2 <task_quintic_initializeImus+0xc2>
			task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
			vTaskDelete(NULL);
			return;
		}
	}
	sendString(qConfig->uartDevice,"end\r\n");
  40caf8:	68fb      	ldr	r3, [r7, #12]
  40cafa:	695b      	ldr	r3, [r3, #20]
  40cafc:	4618      	mov	r0, r3
  40cafe:	4930      	ldr	r1, [pc, #192]	; (40cbc0 <task_quintic_initializeImus+0x1e0>)
  40cb00:	4b2e      	ldr	r3, [pc, #184]	; (40cbbc <task_quintic_initializeImus+0x1dc>)
  40cb02:	4798      	blx	r3
	vTaskDelay(10);
  40cb04:	200a      	movs	r0, #10
  40cb06:	4b28      	ldr	r3, [pc, #160]	; (40cba8 <task_quintic_initializeImus+0x1c8>)
  40cb08:	4798      	blx	r3
	result |= getAck(qConfig->uartDevice);
  40cb0a:	68fb      	ldr	r3, [r7, #12]
  40cb0c:	695b      	ldr	r3, [r3, #20]
  40cb0e:	4618      	mov	r0, r3
  40cb10:	4b26      	ldr	r3, [pc, #152]	; (40cbac <task_quintic_initializeImus+0x1cc>)
  40cb12:	4798      	blx	r3
  40cb14:	4603      	mov	r3, r0
  40cb16:	461a      	mov	r2, r3
  40cb18:	7dfb      	ldrb	r3, [r7, #23]
  40cb1a:	4313      	orrs	r3, r2
  40cb1c:	75fb      	strb	r3, [r7, #23]
	if (result != STATUS_PASS)
  40cb1e:	7dfb      	ldrb	r3, [r7, #23]
  40cb20:	2b00      	cmp	r3, #0
  40cb22:	d007      	beq.n	40cb34 <task_quintic_initializeImus+0x154>
	{
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  40cb24:	2009      	movs	r0, #9
  40cb26:	21ff      	movs	r1, #255	; 0xff
  40cb28:	4b21      	ldr	r3, [pc, #132]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40cb2a:	4798      	blx	r3
		vTaskDelete(NULL);
  40cb2c:	2000      	movs	r0, #0
  40cb2e:	4b21      	ldr	r3, [pc, #132]	; (40cbb4 <task_quintic_initializeImus+0x1d4>)
  40cb30:	4798      	blx	r3
		return;
  40cb32:	e031      	b.n	40cb98 <task_quintic_initializeImus+0x1b8>
	}
	
	scanSuccess = scanForImus(qConfig);
  40cb34:	68f8      	ldr	r0, [r7, #12]
  40cb36:	4b23      	ldr	r3, [pc, #140]	; (40cbc4 <task_quintic_initializeImus+0x1e4>)
  40cb38:	4798      	blx	r3
  40cb3a:	4603      	mov	r3, r0
  40cb3c:	75bb      	strb	r3, [r7, #22]
	if(scanSuccess == STATUS_PASS)
  40cb3e:	7dbb      	ldrb	r3, [r7, #22]
  40cb40:	2b00      	cmp	r3, #0
  40cb42:	d114      	bne.n	40cb6e <task_quintic_initializeImus+0x18e>
	{
		connSuccess = connectToImus(qConfig);
  40cb44:	68f8      	ldr	r0, [r7, #12]
  40cb46:	4b20      	ldr	r3, [pc, #128]	; (40cbc8 <task_quintic_initializeImus+0x1e8>)
  40cb48:	4798      	blx	r3
  40cb4a:	4603      	mov	r3, r0
  40cb4c:	757b      	strb	r3, [r7, #21]
		if(connSuccess != STATUS_PASS)
  40cb4e:	7d7b      	ldrb	r3, [r7, #21]
  40cb50:	2b00      	cmp	r3, #0
  40cb52:	d00c      	beq.n	40cb6e <task_quintic_initializeImus+0x18e>
		{
			scanSuccess = scanForImus(qConfig);
  40cb54:	68f8      	ldr	r0, [r7, #12]
  40cb56:	4b1b      	ldr	r3, [pc, #108]	; (40cbc4 <task_quintic_initializeImus+0x1e4>)
  40cb58:	4798      	blx	r3
  40cb5a:	4603      	mov	r3, r0
  40cb5c:	75bb      	strb	r3, [r7, #22]
			if(scanSuccess == STATUS_PASS)
  40cb5e:	7dbb      	ldrb	r3, [r7, #22]
  40cb60:	2b00      	cmp	r3, #0
  40cb62:	d104      	bne.n	40cb6e <task_quintic_initializeImus+0x18e>
			{
				connSuccess = connectToImus(qConfig);
  40cb64:	68f8      	ldr	r0, [r7, #12]
  40cb66:	4b18      	ldr	r3, [pc, #96]	; (40cbc8 <task_quintic_initializeImus+0x1e8>)
  40cb68:	4798      	blx	r3
  40cb6a:	4603      	mov	r3, r0
  40cb6c:	757b      	strb	r3, [r7, #21]
			}
		}
	}	
	if(scanSuccess == STATUS_PASS && connSuccess == STATUS_PASS)
  40cb6e:	7dbb      	ldrb	r3, [r7, #22]
  40cb70:	2b00      	cmp	r3, #0
  40cb72:	d10a      	bne.n	40cb8a <task_quintic_initializeImus+0x1aa>
  40cb74:	7d7b      	ldrb	r3, [r7, #21]
  40cb76:	2b00      	cmp	r3, #0
  40cb78:	d107      	bne.n	40cb8a <task_quintic_initializeImus+0x1aa>
	{		
		//printf("connected to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, qConfig->qId);			
  40cb7a:	68fb      	ldr	r3, [r7, #12]
  40cb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40cb7e:	b29b      	uxth	r3, r3
  40cb80:	2009      	movs	r0, #9
  40cb82:	4619      	mov	r1, r3
  40cb84:	4b0a      	ldr	r3, [pc, #40]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40cb86:	4798      	blx	r3
  40cb88:	e003      	b.n	40cb92 <task_quintic_initializeImus+0x1b2>
	}
	else
	{
		//printf("Failed connection to IMUs %d, %d, %d\r\n",qConfig->imuArray[0]->imuId,qConfig->imuArray[1]->imuId,qConfig->imuArray[2]->imuId);
		//result = STATUS_FAIL; 
		task_stateMachine_EnqueueEvent(SYS_EVENT_RESET_COMPLETE, 0xff);
  40cb8a:	2009      	movs	r0, #9
  40cb8c:	21ff      	movs	r1, #255	; 0xff
  40cb8e:	4b08      	ldr	r3, [pc, #32]	; (40cbb0 <task_quintic_initializeImus+0x1d0>)
  40cb90:	4798      	blx	r3
	}
	vTaskDelete(NULL);
  40cb92:	2000      	movs	r0, #0
  40cb94:	4b07      	ldr	r3, [pc, #28]	; (40cbb4 <task_quintic_initializeImus+0x1d4>)
  40cb96:	4798      	blx	r3
	//return the result;
	//return result;

}
  40cb98:	3718      	adds	r7, #24
  40cb9a:	46bd      	mov	sp, r7
  40cb9c:	bd80      	pop	{r7, pc}
  40cb9e:	bf00      	nop
  40cba0:	0040b91d 	.word	0x0040b91d
  40cba4:	0040a9d9 	.word	0x0040a9d9
  40cba8:	00408855 	.word	0x00408855
  40cbac:	0040cc85 	.word	0x0040cc85
  40cbb0:	00401029 	.word	0x00401029
  40cbb4:	004087a9 	.word	0x004087a9
  40cbb8:	00419160 	.word	0x00419160
  40cbbc:	0040cc35 	.word	0x0040cc35
  40cbc0:	00419168 	.word	0x00419168
  40cbc4:	0040cd01 	.word	0x0040cd01
  40cbc8:	0040ce41 	.word	0x0040ce41

0040cbcc <task_quintic_startRecording>:
 * @brief Send the start command to the IMUs to request Notif data from them
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_startRecording(quinticConfiguration_t* qConfig)
{
  40cbcc:	b580      	push	{r7, lr}
  40cbce:	b082      	sub	sp, #8
  40cbd0:	af00      	add	r7, sp, #0
  40cbd2:	6078      	str	r0, [r7, #4]
	//send the start command. 	
	sendString(qConfig->uartDevice, "start\r\n");
  40cbd4:	687b      	ldr	r3, [r7, #4]
  40cbd6:	695b      	ldr	r3, [r3, #20]
  40cbd8:	4618      	mov	r0, r3
  40cbda:	4904      	ldr	r1, [pc, #16]	; (40cbec <task_quintic_startRecording+0x20>)
  40cbdc:	4b04      	ldr	r3, [pc, #16]	; (40cbf0 <task_quintic_startRecording+0x24>)
  40cbde:	4798      	blx	r3
	return STATUS_PASS; 
  40cbe0:	2300      	movs	r3, #0
}
  40cbe2:	4618      	mov	r0, r3
  40cbe4:	3708      	adds	r7, #8
  40cbe6:	46bd      	mov	sp, r7
  40cbe8:	bd80      	pop	{r7, pc}
  40cbea:	bf00      	nop
  40cbec:	00419170 	.word	0x00419170
  40cbf0:	0040cc35 	.word	0x0040cc35

0040cbf4 <task_quintic_stopRecording>:
 * @brief Send the stop command to the IMUs to stop Notif data from them
 * @param quinticConfiguration_t* qConfig 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t task_quintic_stopRecording(quinticConfiguration_t* qConfig)
{
  40cbf4:	b580      	push	{r7, lr}
  40cbf6:	b082      	sub	sp, #8
  40cbf8:	af00      	add	r7, sp, #0
  40cbfa:	6078      	str	r0, [r7, #4]
	//send the stop
	sendString(qConfig->uartDevice, "stop\r\n");
  40cbfc:	687b      	ldr	r3, [r7, #4]
  40cbfe:	695b      	ldr	r3, [r3, #20]
  40cc00:	4618      	mov	r0, r3
  40cc02:	4908      	ldr	r1, [pc, #32]	; (40cc24 <task_quintic_stopRecording+0x30>)
  40cc04:	4b08      	ldr	r3, [pc, #32]	; (40cc28 <task_quintic_stopRecording+0x34>)
  40cc06:	4798      	blx	r3
	//wait for a bit
	vTaskDelay(2);
  40cc08:	2002      	movs	r0, #2
  40cc0a:	4b08      	ldr	r3, [pc, #32]	; (40cc2c <task_quintic_stopRecording+0x38>)
  40cc0c:	4798      	blx	r3
	//flush the Rx buffer, it'll still have crap in it
	drv_uart_flushRx(qConfig->uartDevice);
  40cc0e:	687b      	ldr	r3, [r7, #4]
  40cc10:	695b      	ldr	r3, [r3, #20]
  40cc12:	4618      	mov	r0, r3
  40cc14:	4b06      	ldr	r3, [pc, #24]	; (40cc30 <task_quintic_stopRecording+0x3c>)
  40cc16:	4798      	blx	r3
	return STATUS_PASS;
  40cc18:	2300      	movs	r3, #0
}
  40cc1a:	4618      	mov	r0, r3
  40cc1c:	3708      	adds	r7, #8
  40cc1e:	46bd      	mov	sp, r7
  40cc20:	bd80      	pop	{r7, pc}
  40cc22:	bf00      	nop
  40cc24:	00419178 	.word	0x00419178
  40cc28:	0040cc35 	.word	0x0040cc35
  40cc2c:	00408855 	.word	0x00408855
  40cc30:	0040b91d 	.word	0x0040b91d

0040cc34 <sendString>:
 * @brief Send a string to requested serial port
 * @param drv_uart_config_t* uartConfig, char* cmd 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
  40cc34:	b580      	push	{r7, lr}
  40cc36:	b084      	sub	sp, #16
  40cc38:	af00      	add	r7, sp, #0
  40cc3a:	6078      	str	r0, [r7, #4]
  40cc3c:	6039      	str	r1, [r7, #0]
	int len = strlen(cmd); 
  40cc3e:	6838      	ldr	r0, [r7, #0]
  40cc40:	4b0e      	ldr	r3, [pc, #56]	; (40cc7c <sendString+0x48>)
  40cc42:	4798      	blx	r3
  40cc44:	4603      	mov	r3, r0
  40cc46:	60bb      	str	r3, [r7, #8]
	int i = 0; 
  40cc48:	2300      	movs	r3, #0
  40cc4a:	60fb      	str	r3, [r7, #12]
	for(;i<len;)
  40cc4c:	e00d      	b.n	40cc6a <sendString+0x36>
	{
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
  40cc4e:	68fb      	ldr	r3, [r7, #12]
  40cc50:	683a      	ldr	r2, [r7, #0]
  40cc52:	4413      	add	r3, r2
  40cc54:	781b      	ldrb	r3, [r3, #0]
  40cc56:	6878      	ldr	r0, [r7, #4]
  40cc58:	4619      	mov	r1, r3
  40cc5a:	4b09      	ldr	r3, [pc, #36]	; (40cc80 <sendString+0x4c>)
  40cc5c:	4798      	blx	r3
  40cc5e:	4603      	mov	r3, r0
  40cc60:	2b00      	cmp	r3, #0
  40cc62:	d102      	bne.n	40cc6a <sendString+0x36>
		{
			i++;
  40cc64:	68fb      	ldr	r3, [r7, #12]
  40cc66:	3301      	adds	r3, #1
  40cc68:	60fb      	str	r3, [r7, #12]
 ***********************************************************************************************/
static status_t sendString(drv_uart_config_t* uartConfig, char* cmd)
{
	int len = strlen(cmd); 
	int i = 0; 
	for(;i<len;)
  40cc6a:	68fa      	ldr	r2, [r7, #12]
  40cc6c:	68bb      	ldr	r3, [r7, #8]
  40cc6e:	429a      	cmp	r2, r3
  40cc70:	dbed      	blt.n	40cc4e <sendString+0x1a>
		if(drv_uart_putChar(uartConfig,cmd[i]) == STATUS_PASS) //returns pass only when char sent
		{
			i++;
		}
	}
}
  40cc72:	4618      	mov	r0, r3
  40cc74:	3710      	adds	r7, #16
  40cc76:	46bd      	mov	sp, r7
  40cc78:	bd80      	pop	{r7, pc}
  40cc7a:	bf00      	nop
  40cc7c:	0040f819 	.word	0x0040f819
  40cc80:	0040b56d 	.word	0x0040b56d

0040cc84 <getAck>:
 * @brief Look for an acknowledge from a Quintic
 * @param drv_uart_config_t* uartConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
static status_t getAck(drv_uart_config_t* uartConfig)
{
  40cc84:	b590      	push	{r4, r7, lr}
  40cc86:	b0c3      	sub	sp, #268	; 0x10c
  40cc88:	af00      	add	r7, sp, #0
  40cc8a:	1d3b      	adds	r3, r7, #4
  40cc8c:	6018      	str	r0, [r3, #0]
	status_t result = STATUS_PASS; 
  40cc8e:	2300      	movs	r3, #0
  40cc90:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char buf[CMD_RESPONSE_BUF_SIZE] = {0}; //should move to static buffer for each quintic?
  40cc94:	f107 0308 	add.w	r3, r7, #8
  40cc98:	461a      	mov	r2, r3
  40cc9a:	23ff      	movs	r3, #255	; 0xff
  40cc9c:	4610      	mov	r0, r2
  40cc9e:	2100      	movs	r1, #0
  40cca0:	461a      	mov	r2, r3
  40cca2:	4b13      	ldr	r3, [pc, #76]	; (40ccf0 <getAck+0x6c>)
  40cca4:	4798      	blx	r3
	/*result = drv_uart_getline(uartConfig, buf,CMD_RESPONSE_BUF_SIZE);*/
	result = drv_uart_getlineTimed(uartConfig, buf, CMD_RESPONSE_BUF_SIZE, 500);
  40cca6:	1d3a      	adds	r2, r7, #4
  40cca8:	f107 0308 	add.w	r3, r7, #8
  40ccac:	6810      	ldr	r0, [r2, #0]
  40ccae:	4619      	mov	r1, r3
  40ccb0:	22ff      	movs	r2, #255	; 0xff
  40ccb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40ccb6:	4c0f      	ldr	r4, [pc, #60]	; (40ccf4 <getAck+0x70>)
  40ccb8:	47a0      	blx	r4
  40ccba:	4603      	mov	r3, r0
  40ccbc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if(result == STATUS_PASS)
  40ccc0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
  40ccc4:	2b00      	cmp	r3, #0
  40ccc6:	d10b      	bne.n	40cce0 <getAck+0x5c>
	{
		if(strcmp(buf,QCMD_QN_ACK) != 0)
  40ccc8:	f107 0308 	add.w	r3, r7, #8
  40cccc:	4618      	mov	r0, r3
  40ccce:	490a      	ldr	r1, [pc, #40]	; (40ccf8 <getAck+0x74>)
  40ccd0:	4b0a      	ldr	r3, [pc, #40]	; (40ccfc <getAck+0x78>)
  40ccd2:	4798      	blx	r3
  40ccd4:	4603      	mov	r3, r0
  40ccd6:	2b00      	cmp	r3, #0
  40ccd8:	d002      	beq.n	40cce0 <getAck+0x5c>
		{
			result = STATUS_FAIL;
  40ccda:	2301      	movs	r3, #1
  40ccdc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		}
	}
	return result; 
  40cce0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
  40cce4:	4618      	mov	r0, r3
  40cce6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
  40ccea:	46bd      	mov	sp, r7
  40ccec:	bd90      	pop	{r4, r7, pc}
  40ccee:	bf00      	nop
  40ccf0:	0040f191 	.word	0x0040f191
  40ccf4:	0040b819 	.word	0x0040b819
  40ccf8:	00419180 	.word	0x00419180
  40ccfc:	0040f541 	.word	0x0040f541

0040cd00 <scanForImus>:
 * @brief Issue Scan command to Quintics and check the response. If it fails it tries two more times
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
static status_t scanForImus(quinticConfiguration_t* qConfig)
{
  40cd00:	b590      	push	{r4, r7, lr}
  40cd02:	b0af      	sub	sp, #188	; 0xbc
  40cd04:	af00      	add	r7, sp, #0
  40cd06:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL; 
  40cd08:	2301      	movs	r3, #1
  40cd0a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0}; 
  40cd0e:	f107 020c 	add.w	r2, r7, #12
  40cd12:	2396      	movs	r3, #150	; 0x96
  40cd14:	4610      	mov	r0, r2
  40cd16:	2100      	movs	r1, #0
  40cd18:	461a      	mov	r2, r3
  40cd1a:	4b41      	ldr	r3, [pc, #260]	; (40ce20 <scanForImus+0x120>)
  40cd1c:	4798      	blx	r3
	int i = 0;	
  40cd1e:	2300      	movs	r3, #0
  40cd20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf; 
  40cd24:	f107 030c 	add.w	r3, r7, #12
  40cd28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int vScanLoopCount = 0;
  40cd2c:	2300      	movs	r3, #0
  40cd2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int presentImuCount = 0;
  40cd32:	2300      	movs	r3, #0
  40cd34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	do
	{
		sendString(qConfig->uartDevice,QCMD_SCAN); //send the scan command
  40cd38:	687b      	ldr	r3, [r7, #4]
  40cd3a:	695b      	ldr	r3, [r3, #20]
  40cd3c:	4618      	mov	r0, r3
  40cd3e:	4939      	ldr	r1, [pc, #228]	; (40ce24 <scanForImus+0x124>)
  40cd40:	4b39      	ldr	r3, [pc, #228]	; (40ce28 <scanForImus+0x128>)
  40cd42:	4798      	blx	r3
		vTaskDelay(1);
  40cd44:	2001      	movs	r0, #1
  40cd46:	4b39      	ldr	r3, [pc, #228]	; (40ce2c <scanForImus+0x12c>)
  40cd48:	4798      	blx	r3
		if(drv_uart_getlineTimed(qConfig->uartDevice, buf, sizeof(buf), 15000) == STATUS_PASS)
  40cd4a:	687b      	ldr	r3, [r7, #4]
  40cd4c:	695a      	ldr	r2, [r3, #20]
  40cd4e:	f107 030c 	add.w	r3, r7, #12
  40cd52:	4610      	mov	r0, r2
  40cd54:	4619      	mov	r1, r3
  40cd56:	2296      	movs	r2, #150	; 0x96
  40cd58:	f643 2398 	movw	r3, #15000	; 0x3a98
  40cd5c:	4c34      	ldr	r4, [pc, #208]	; (40ce30 <scanForImus+0x130>)
  40cd5e:	47a0      	blx	r4
  40cd60:	4603      	mov	r3, r0
  40cd62:	2b00      	cmp	r3, #0
  40cd64:	d14a      	bne.n	40cdfc <scanForImus+0xfc>
		{
			sendString(&uart0Config,buf);
  40cd66:	f107 030c 	add.w	r3, r7, #12
  40cd6a:	4832      	ldr	r0, [pc, #200]	; (40ce34 <scanForImus+0x134>)
  40cd6c:	4619      	mov	r1, r3
  40cd6e:	4b2e      	ldr	r3, [pc, #184]	; (40ce28 <scanForImus+0x128>)
  40cd70:	4798      	blx	r3
			if(strncmp(buf,"ScanResp",8) == 0)
  40cd72:	f107 030c 	add.w	r3, r7, #12
  40cd76:	4618      	mov	r0, r3
  40cd78:	492f      	ldr	r1, [pc, #188]	; (40ce38 <scanForImus+0x138>)
  40cd7a:	2208      	movs	r2, #8
  40cd7c:	4b2f      	ldr	r3, [pc, #188]	; (40ce3c <scanForImus+0x13c>)
  40cd7e:	4798      	blx	r3
  40cd80:	4603      	mov	r3, r0
  40cd82:	2b00      	cmp	r3, #0
  40cd84:	d13a      	bne.n	40cdfc <scanForImus+0xfc>
			{
				bufPtr = buf + 8; 
  40cd86:	f107 030c 	add.w	r3, r7, #12
  40cd8a:	3308      	adds	r3, #8
  40cd8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				presentImuCount = 0;
  40cd90:	2300      	movs	r3, #0
  40cd92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				for(i=0;i<5;i++)
  40cd96:	2300      	movs	r3, #0
  40cd98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40cd9c:	e020      	b.n	40cde0 <scanForImus+0xe0>
				{
					if(bufPtr[i] == '1')
  40cd9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cda2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
  40cda6:	4413      	add	r3, r2
  40cda8:	781b      	ldrb	r3, [r3, #0]
  40cdaa:	2b31      	cmp	r3, #49	; 0x31
  40cdac:	d10c      	bne.n	40cdc8 <scanForImus+0xc8>
					{
						qConfig->imuArray[i]->imuPresent = 1; 	
  40cdae:	687b      	ldr	r3, [r7, #4]
  40cdb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40cdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40cdb8:	2201      	movs	r2, #1
  40cdba:	61da      	str	r2, [r3, #28]
						presentImuCount++;					
  40cdbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  40cdc0:	3301      	adds	r3, #1
  40cdc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  40cdc6:	e006      	b.n	40cdd6 <scanForImus+0xd6>
					}
					else
					{
						qConfig->imuArray[i]->imuPresent = 0; 
  40cdc8:	687b      	ldr	r3, [r7, #4]
  40cdca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40cdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40cdd2:	2200      	movs	r2, #0
  40cdd4:	61da      	str	r2, [r3, #28]
			sendString(&uart0Config,buf);
			if(strncmp(buf,"ScanResp",8) == 0)
			{
				bufPtr = buf + 8; 
				presentImuCount = 0;
				for(i=0;i<5;i++)
  40cdd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cdda:	3301      	adds	r3, #1
  40cddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40cde0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cde4:	2b04      	cmp	r3, #4
  40cde6:	ddda      	ble.n	40cd9e <scanForImus+0x9e>
					else
					{
						qConfig->imuArray[i]->imuPresent = 0; 
					}			
				}
				if(presentImuCount >= qConfig->expectedNumberOfNods)
  40cde8:	687b      	ldr	r3, [r7, #4]
  40cdea:	699a      	ldr	r2, [r3, #24]
  40cdec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
  40cdf0:	429a      	cmp	r2, r3
  40cdf2:	dc03      	bgt.n	40cdfc <scanForImus+0xfc>
				{
					status = STATUS_PASS; 
  40cdf4:	2300      	movs	r3, #0
  40cdf6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					break; 
  40cdfa:	e00b      	b.n	40ce14 <scanForImus+0x114>
				}
			}
		}		
		vTaskDelay(10);
  40cdfc:	200a      	movs	r0, #10
  40cdfe:	4b0b      	ldr	r3, [pc, #44]	; (40ce2c <scanForImus+0x12c>)
  40ce00:	4798      	blx	r3
		vScanLoopCount++;
  40ce02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40ce06:	3301      	adds	r3, #1
  40ce08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	}while(vScanLoopCount<=QN_MAX_CONN);	
  40ce0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40ce10:	2b03      	cmp	r3, #3
  40ce12:	dd91      	ble.n	40cd38 <scanForImus+0x38>
	return status; 
  40ce14:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  40ce18:	4618      	mov	r0, r3
  40ce1a:	37bc      	adds	r7, #188	; 0xbc
  40ce1c:	46bd      	mov	sp, r7
  40ce1e:	bd90      	pop	{r4, r7, pc}
  40ce20:	0040f191 	.word	0x0040f191
  40ce24:	00419198 	.word	0x00419198
  40ce28:	0040cc35 	.word	0x0040cc35
  40ce2c:	00408855 	.word	0x00408855
  40ce30:	0040b819 	.word	0x0040b819
  40ce34:	2000004c 	.word	0x2000004c
  40ce38:	004191a0 	.word	0x004191a0
  40ce3c:	0040f879 	.word	0x0040f879

0040ce40 <connectToImus>:
 * @brief Issue Connect command to Quintics and check the response. If it fails it tries two more times
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
static status_t connectToImus(quinticConfiguration_t* qConfig)
{
  40ce40:	b590      	push	{r4, r7, lr}
  40ce42:	b0af      	sub	sp, #188	; 0xbc
  40ce44:	af00      	add	r7, sp, #0
  40ce46:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  40ce48:	2301      	movs	r3, #1
  40ce4a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char buf[150] = {0};
  40ce4e:	f107 020c 	add.w	r2, r7, #12
  40ce52:	2396      	movs	r3, #150	; 0x96
  40ce54:	4610      	mov	r0, r2
  40ce56:	2100      	movs	r1, #0
  40ce58:	461a      	mov	r2, r3
  40ce5a:	4b3b      	ldr	r3, [pc, #236]	; (40cf48 <connectToImus+0x108>)
  40ce5c:	4798      	blx	r3
	int i = 0;
  40ce5e:	2300      	movs	r3, #0
  40ce60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char* bufPtr = buf;
  40ce64:	f107 030c 	add.w	r3, r7, #12
  40ce68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int vConnectionLoopCount = 0;
  40ce6c:	2300      	movs	r3, #0
  40ce6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int connectedImuCount = 0;
  40ce72:	2300      	movs	r3, #0
  40ce74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	sendString(qConfig->uartDevice,QCMD_CONNECT); //send the connect command
  40ce78:	687b      	ldr	r3, [r7, #4]
  40ce7a:	695b      	ldr	r3, [r3, #20]
  40ce7c:	4618      	mov	r0, r3
  40ce7e:	4933      	ldr	r1, [pc, #204]	; (40cf4c <connectToImus+0x10c>)
  40ce80:	4b33      	ldr	r3, [pc, #204]	; (40cf50 <connectToImus+0x110>)
  40ce82:	4798      	blx	r3
	vTaskDelay(1);
  40ce84:	2001      	movs	r0, #1
  40ce86:	4b33      	ldr	r3, [pc, #204]	; (40cf54 <connectToImus+0x114>)
  40ce88:	4798      	blx	r3
	if(drv_uart_getlineTimed(qConfig->uartDevice, buf, sizeof(buf), 15000) == STATUS_PASS)
  40ce8a:	687b      	ldr	r3, [r7, #4]
  40ce8c:	695a      	ldr	r2, [r3, #20]
  40ce8e:	f107 030c 	add.w	r3, r7, #12
  40ce92:	4610      	mov	r0, r2
  40ce94:	4619      	mov	r1, r3
  40ce96:	2296      	movs	r2, #150	; 0x96
  40ce98:	f643 2398 	movw	r3, #15000	; 0x3a98
  40ce9c:	4c2e      	ldr	r4, [pc, #184]	; (40cf58 <connectToImus+0x118>)
  40ce9e:	47a0      	blx	r4
  40cea0:	4603      	mov	r3, r0
  40cea2:	2b00      	cmp	r3, #0
  40cea4:	d149      	bne.n	40cf3a <connectToImus+0xfa>
	{
		sendString(&uart0Config,buf);
  40cea6:	f107 030c 	add.w	r3, r7, #12
  40ceaa:	482c      	ldr	r0, [pc, #176]	; (40cf5c <connectToImus+0x11c>)
  40ceac:	4619      	mov	r1, r3
  40ceae:	4b28      	ldr	r3, [pc, #160]	; (40cf50 <connectToImus+0x110>)
  40ceb0:	4798      	blx	r3
		if(strncmp(buf,"ConnResp",8) == 0)
  40ceb2:	f107 030c 	add.w	r3, r7, #12
  40ceb6:	4618      	mov	r0, r3
  40ceb8:	4929      	ldr	r1, [pc, #164]	; (40cf60 <connectToImus+0x120>)
  40ceba:	2208      	movs	r2, #8
  40cebc:	4b29      	ldr	r3, [pc, #164]	; (40cf64 <connectToImus+0x124>)
  40cebe:	4798      	blx	r3
  40cec0:	4603      	mov	r3, r0
  40cec2:	2b00      	cmp	r3, #0
  40cec4:	d139      	bne.n	40cf3a <connectToImus+0xfa>
		{
			bufPtr = buf + 8;
  40cec6:	f107 030c 	add.w	r3, r7, #12
  40ceca:	3308      	adds	r3, #8
  40cecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			connectedImuCount = 0;
  40ced0:	2300      	movs	r3, #0
  40ced2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			for(i=0;i<5;i++)
  40ced6:	2300      	movs	r3, #0
  40ced8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40cedc:	e020      	b.n	40cf20 <connectToImus+0xe0>
			{
				if(bufPtr[i] == '1')
  40cede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
  40cee6:	4413      	add	r3, r2
  40cee8:	781b      	ldrb	r3, [r3, #0]
  40ceea:	2b31      	cmp	r3, #49	; 0x31
  40ceec:	d10c      	bne.n	40cf08 <connectToImus+0xc8>
				{
					qConfig->imuArray[i]->imuConnected = 1;
  40ceee:	687b      	ldr	r3, [r7, #4]
  40cef0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40cef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40cef8:	2201      	movs	r2, #1
  40cefa:	621a      	str	r2, [r3, #32]
					connectedImuCount++;
  40cefc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40cf00:	3301      	adds	r3, #1
  40cf02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  40cf06:	e006      	b.n	40cf16 <connectToImus+0xd6>
				}
				else
				{
					qConfig->imuArray[i]->imuConnected = 0;
  40cf08:	687b      	ldr	r3, [r7, #4]
  40cf0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
  40cf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40cf12:	2200      	movs	r2, #0
  40cf14:	621a      	str	r2, [r3, #32]
		sendString(&uart0Config,buf);
		if(strncmp(buf,"ConnResp",8) == 0)
		{
			bufPtr = buf + 8;
			connectedImuCount = 0;
			for(i=0;i<5;i++)
  40cf16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cf1a:	3301      	adds	r3, #1
  40cf1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40cf20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
  40cf24:	2b04      	cmp	r3, #4
  40cf26:	ddda      	ble.n	40cede <connectToImus+0x9e>
				else
				{
					qConfig->imuArray[i]->imuConnected = 0;
				}
			}
			if(connectedImuCount >= qConfig->expectedNumberOfNods)
  40cf28:	687b      	ldr	r3, [r7, #4]
  40cf2a:	699a      	ldr	r2, [r3, #24]
  40cf2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40cf30:	429a      	cmp	r2, r3
  40cf32:	dc02      	bgt.n	40cf3a <connectToImus+0xfa>
			{
				status = STATUS_PASS;
  40cf34:	2300      	movs	r3, #0
  40cf36:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			}
		}
	}
	return status;
  40cf3a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
}
  40cf3e:	4618      	mov	r0, r3
  40cf40:	37bc      	adds	r7, #188	; 0xbc
  40cf42:	46bd      	mov	sp, r7
  40cf44:	bd90      	pop	{r4, r7, pc}
  40cf46:	bf00      	nop
  40cf48:	0040f191 	.word	0x0040f191
  40cf4c:	004191ac 	.word	0x004191ac
  40cf50:	0040cc35 	.word	0x0040cc35
  40cf54:	00408855 	.word	0x00408855
  40cf58:	0040b819 	.word	0x0040b819
  40cf5c:	2000004c 	.word	0x2000004c
  40cf60:	004191b8 	.word	0x004191b8
  40cf64:	0040f879 	.word	0x0040f879

0040cf68 <DisconnectImus>:
 * @brief Issue begin command to Quintics to disconnect and power cycle them
 * @param quinticConfiguration_t* qConfig
 * @return void
 ***********************************************************************************************/
void DisconnectImus(quinticConfiguration_t* qConfig)
{
  40cf68:	b580      	push	{r7, lr}
  40cf6a:	b082      	sub	sp, #8
  40cf6c:	af00      	add	r7, sp, #0
  40cf6e:	6078      	str	r0, [r7, #4]
	sendString(qConfig->uartDevice,QCMD_BEGIN);
  40cf70:	687b      	ldr	r3, [r7, #4]
  40cf72:	695b      	ldr	r3, [r3, #20]
  40cf74:	4618      	mov	r0, r3
  40cf76:	490f      	ldr	r1, [pc, #60]	; (40cfb4 <DisconnectImus+0x4c>)
  40cf78:	4b0f      	ldr	r3, [pc, #60]	; (40cfb8 <DisconnectImus+0x50>)
  40cf7a:	4798      	blx	r3
	vTaskDelay(100);
  40cf7c:	2064      	movs	r0, #100	; 0x64
  40cf7e:	4b0f      	ldr	r3, [pc, #60]	; (40cfbc <DisconnectImus+0x54>)
  40cf80:	4798      	blx	r3
	getAck(qConfig->uartDevice);
  40cf82:	687b      	ldr	r3, [r7, #4]
  40cf84:	695b      	ldr	r3, [r3, #20]
  40cf86:	4618      	mov	r0, r3
  40cf88:	4b0d      	ldr	r3, [pc, #52]	; (40cfc0 <DisconnectImus+0x58>)
  40cf8a:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin, DRV_GPIO_PIN_STATE_LOW);
  40cf8c:	687b      	ldr	r3, [r7, #4]
  40cf8e:	f893 3020 	ldrb.w	r3, [r3, #32]
  40cf92:	4618      	mov	r0, r3
  40cf94:	2100      	movs	r1, #0
  40cf96:	4b0b      	ldr	r3, [pc, #44]	; (40cfc4 <DisconnectImus+0x5c>)
  40cf98:	4798      	blx	r3
	vTaskDelay(100);
  40cf9a:	2064      	movs	r0, #100	; 0x64
  40cf9c:	4b07      	ldr	r3, [pc, #28]	; (40cfbc <DisconnectImus+0x54>)
  40cf9e:	4798      	blx	r3
	drv_gpio_setPinState(qConfig->resetPin, DRV_GPIO_PIN_STATE_HIGH);
  40cfa0:	687b      	ldr	r3, [r7, #4]
  40cfa2:	f893 3020 	ldrb.w	r3, [r3, #32]
  40cfa6:	4618      	mov	r0, r3
  40cfa8:	2101      	movs	r1, #1
  40cfaa:	4b06      	ldr	r3, [pc, #24]	; (40cfc4 <DisconnectImus+0x5c>)
  40cfac:	4798      	blx	r3
  40cfae:	3708      	adds	r7, #8
  40cfb0:	46bd      	mov	sp, r7
  40cfb2:	bd80      	pop	{r7, pc}
  40cfb4:	00419160 	.word	0x00419160
  40cfb8:	0040cc35 	.word	0x0040cc35
  40cfbc:	00408855 	.word	0x00408855
  40cfc0:	0040cc85 	.word	0x0040cc85
  40cfc4:	0040a9d9 	.word	0x0040a9d9

0040cfc8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40cfc8:	b580      	push	{r7, lr}
  40cfca:	b082      	sub	sp, #8
  40cfcc:	af00      	add	r7, sp, #0
  40cfce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40cfd0:	687b      	ldr	r3, [r7, #4]
  40cfd2:	2b07      	cmp	r3, #7
  40cfd4:	d830      	bhi.n	40d038 <osc_enable+0x70>
  40cfd6:	a201      	add	r2, pc, #4	; (adr r2, 40cfdc <osc_enable+0x14>)
  40cfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40cfdc:	0040d039 	.word	0x0040d039
  40cfe0:	0040cffd 	.word	0x0040cffd
  40cfe4:	0040d005 	.word	0x0040d005
  40cfe8:	0040d00d 	.word	0x0040d00d
  40cfec:	0040d015 	.word	0x0040d015
  40cff0:	0040d01d 	.word	0x0040d01d
  40cff4:	0040d025 	.word	0x0040d025
  40cff8:	0040d02f 	.word	0x0040d02f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40cffc:	2000      	movs	r0, #0
  40cffe:	4b10      	ldr	r3, [pc, #64]	; (40d040 <osc_enable+0x78>)
  40d000:	4798      	blx	r3
		break;
  40d002:	e019      	b.n	40d038 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40d004:	2001      	movs	r0, #1
  40d006:	4b0e      	ldr	r3, [pc, #56]	; (40d040 <osc_enable+0x78>)
  40d008:	4798      	blx	r3
		break;
  40d00a:	e015      	b.n	40d038 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40d00c:	2000      	movs	r0, #0
  40d00e:	4b0d      	ldr	r3, [pc, #52]	; (40d044 <osc_enable+0x7c>)
  40d010:	4798      	blx	r3
		break;
  40d012:	e011      	b.n	40d038 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40d014:	2010      	movs	r0, #16
  40d016:	4b0b      	ldr	r3, [pc, #44]	; (40d044 <osc_enable+0x7c>)
  40d018:	4798      	blx	r3
		break;
  40d01a:	e00d      	b.n	40d038 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40d01c:	2020      	movs	r0, #32
  40d01e:	4b09      	ldr	r3, [pc, #36]	; (40d044 <osc_enable+0x7c>)
  40d020:	4798      	blx	r3
		break;
  40d022:	e009      	b.n	40d038 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40d024:	2000      	movs	r0, #0
  40d026:	213e      	movs	r1, #62	; 0x3e
  40d028:	4b07      	ldr	r3, [pc, #28]	; (40d048 <osc_enable+0x80>)
  40d02a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40d02c:	e004      	b.n	40d038 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40d02e:	2001      	movs	r0, #1
  40d030:	213e      	movs	r1, #62	; 0x3e
  40d032:	4b05      	ldr	r3, [pc, #20]	; (40d048 <osc_enable+0x80>)
  40d034:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40d036:	bf00      	nop
	}
}
  40d038:	3708      	adds	r7, #8
  40d03a:	46bd      	mov	sp, r7
  40d03c:	bd80      	pop	{r7, pc}
  40d03e:	bf00      	nop
  40d040:	0040dc99 	.word	0x0040dc99
  40d044:	0040dd05 	.word	0x0040dd05
  40d048:	0040dd75 	.word	0x0040dd75

0040d04c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40d04c:	b580      	push	{r7, lr}
  40d04e:	b082      	sub	sp, #8
  40d050:	af00      	add	r7, sp, #0
  40d052:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40d054:	687b      	ldr	r3, [r7, #4]
  40d056:	2b07      	cmp	r3, #7
  40d058:	d826      	bhi.n	40d0a8 <osc_is_ready+0x5c>
  40d05a:	a201      	add	r2, pc, #4	; (adr r2, 40d060 <osc_is_ready+0x14>)
  40d05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d060:	0040d081 	.word	0x0040d081
  40d064:	0040d085 	.word	0x0040d085
  40d068:	0040d085 	.word	0x0040d085
  40d06c:	0040d097 	.word	0x0040d097
  40d070:	0040d097 	.word	0x0040d097
  40d074:	0040d097 	.word	0x0040d097
  40d078:	0040d097 	.word	0x0040d097
  40d07c:	0040d097 	.word	0x0040d097
	case OSC_SLCK_32K_RC:
		return 1;
  40d080:	2301      	movs	r3, #1
  40d082:	e012      	b.n	40d0aa <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40d084:	4b0b      	ldr	r3, [pc, #44]	; (40d0b4 <osc_is_ready+0x68>)
  40d086:	4798      	blx	r3
  40d088:	4603      	mov	r3, r0
  40d08a:	2b00      	cmp	r3, #0
  40d08c:	bf0c      	ite	eq
  40d08e:	2300      	moveq	r3, #0
  40d090:	2301      	movne	r3, #1
  40d092:	b2db      	uxtb	r3, r3
  40d094:	e009      	b.n	40d0aa <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40d096:	4b08      	ldr	r3, [pc, #32]	; (40d0b8 <osc_is_ready+0x6c>)
  40d098:	4798      	blx	r3
  40d09a:	4603      	mov	r3, r0
  40d09c:	2b00      	cmp	r3, #0
  40d09e:	bf0c      	ite	eq
  40d0a0:	2300      	moveq	r3, #0
  40d0a2:	2301      	movne	r3, #1
  40d0a4:	b2db      	uxtb	r3, r3
  40d0a6:	e000      	b.n	40d0aa <osc_is_ready+0x5e>
	}

	return 0;
  40d0a8:	2300      	movs	r3, #0
}
  40d0aa:	4618      	mov	r0, r3
  40d0ac:	3708      	adds	r7, #8
  40d0ae:	46bd      	mov	sp, r7
  40d0b0:	bd80      	pop	{r7, pc}
  40d0b2:	bf00      	nop
  40d0b4:	0040dcd1 	.word	0x0040dcd1
  40d0b8:	0040dded 	.word	0x0040dded

0040d0bc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40d0bc:	b480      	push	{r7}
  40d0be:	b083      	sub	sp, #12
  40d0c0:	af00      	add	r7, sp, #0
  40d0c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40d0c4:	687b      	ldr	r3, [r7, #4]
  40d0c6:	2b07      	cmp	r3, #7
  40d0c8:	d825      	bhi.n	40d116 <osc_get_rate+0x5a>
  40d0ca:	a201      	add	r2, pc, #4	; (adr r2, 40d0d0 <osc_get_rate+0x14>)
  40d0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d0d0:	0040d0f1 	.word	0x0040d0f1
  40d0d4:	0040d0f7 	.word	0x0040d0f7
  40d0d8:	0040d0fd 	.word	0x0040d0fd
  40d0dc:	0040d103 	.word	0x0040d103
  40d0e0:	0040d107 	.word	0x0040d107
  40d0e4:	0040d10b 	.word	0x0040d10b
  40d0e8:	0040d10f 	.word	0x0040d10f
  40d0ec:	0040d113 	.word	0x0040d113
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40d0f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40d0f4:	e010      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40d0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d0fa:	e00d      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40d0fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d100:	e00a      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40d102:	4b08      	ldr	r3, [pc, #32]	; (40d124 <osc_get_rate+0x68>)
  40d104:	e008      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40d106:	4b08      	ldr	r3, [pc, #32]	; (40d128 <osc_get_rate+0x6c>)
  40d108:	e006      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40d10a:	4b08      	ldr	r3, [pc, #32]	; (40d12c <osc_get_rate+0x70>)
  40d10c:	e004      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40d10e:	4b08      	ldr	r3, [pc, #32]	; (40d130 <osc_get_rate+0x74>)
  40d110:	e002      	b.n	40d118 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40d112:	4b07      	ldr	r3, [pc, #28]	; (40d130 <osc_get_rate+0x74>)
  40d114:	e000      	b.n	40d118 <osc_get_rate+0x5c>
	}

	return 0;
  40d116:	2300      	movs	r3, #0
}
  40d118:	4618      	mov	r0, r3
  40d11a:	370c      	adds	r7, #12
  40d11c:	46bd      	mov	sp, r7
  40d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d122:	4770      	bx	lr
  40d124:	003d0900 	.word	0x003d0900
  40d128:	007a1200 	.word	0x007a1200
  40d12c:	00b71b00 	.word	0x00b71b00
  40d130:	00f42400 	.word	0x00f42400

0040d134 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40d134:	b580      	push	{r7, lr}
  40d136:	b082      	sub	sp, #8
  40d138:	af00      	add	r7, sp, #0
  40d13a:	4603      	mov	r3, r0
  40d13c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40d13e:	bf00      	nop
  40d140:	79fb      	ldrb	r3, [r7, #7]
  40d142:	4618      	mov	r0, r3
  40d144:	4b05      	ldr	r3, [pc, #20]	; (40d15c <osc_wait_ready+0x28>)
  40d146:	4798      	blx	r3
  40d148:	4603      	mov	r3, r0
  40d14a:	f083 0301 	eor.w	r3, r3, #1
  40d14e:	b2db      	uxtb	r3, r3
  40d150:	2b00      	cmp	r3, #0
  40d152:	d1f5      	bne.n	40d140 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40d154:	3708      	adds	r7, #8
  40d156:	46bd      	mov	sp, r7
  40d158:	bd80      	pop	{r7, pc}
  40d15a:	bf00      	nop
  40d15c:	0040d04d 	.word	0x0040d04d

0040d160 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40d160:	b580      	push	{r7, lr}
  40d162:	b086      	sub	sp, #24
  40d164:	af00      	add	r7, sp, #0
  40d166:	60f8      	str	r0, [r7, #12]
  40d168:	607a      	str	r2, [r7, #4]
  40d16a:	603b      	str	r3, [r7, #0]
  40d16c:	460b      	mov	r3, r1
  40d16e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40d170:	7afb      	ldrb	r3, [r7, #11]
  40d172:	4618      	mov	r0, r3
  40d174:	4b0d      	ldr	r3, [pc, #52]	; (40d1ac <pll_config_init+0x4c>)
  40d176:	4798      	blx	r3
  40d178:	4602      	mov	r2, r0
  40d17a:	687b      	ldr	r3, [r7, #4]
  40d17c:	fbb2 f3f3 	udiv	r3, r2, r3
  40d180:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40d182:	697b      	ldr	r3, [r7, #20]
  40d184:	683a      	ldr	r2, [r7, #0]
  40d186:	fb02 f303 	mul.w	r3, r2, r3
  40d18a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40d18c:	683b      	ldr	r3, [r7, #0]
  40d18e:	3b01      	subs	r3, #1
  40d190:	041a      	lsls	r2, r3, #16
  40d192:	4b07      	ldr	r3, [pc, #28]	; (40d1b0 <pll_config_init+0x50>)
  40d194:	4013      	ands	r3, r2
  40d196:	687a      	ldr	r2, [r7, #4]
  40d198:	b2d2      	uxtb	r2, r2
  40d19a:	4313      	orrs	r3, r2
  40d19c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40d1a0:	68fb      	ldr	r3, [r7, #12]
  40d1a2:	601a      	str	r2, [r3, #0]
}
  40d1a4:	3718      	adds	r7, #24
  40d1a6:	46bd      	mov	sp, r7
  40d1a8:	bd80      	pop	{r7, pc}
  40d1aa:	bf00      	nop
  40d1ac:	0040d0bd 	.word	0x0040d0bd
  40d1b0:	07ff0000 	.word	0x07ff0000

0040d1b4 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40d1b4:	b580      	push	{r7, lr}
  40d1b6:	b082      	sub	sp, #8
  40d1b8:	af00      	add	r7, sp, #0
  40d1ba:	6078      	str	r0, [r7, #4]
  40d1bc:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40d1be:	683b      	ldr	r3, [r7, #0]
  40d1c0:	2b00      	cmp	r3, #0
  40d1c2:	d108      	bne.n	40d1d6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40d1c4:	4b08      	ldr	r3, [pc, #32]	; (40d1e8 <pll_enable+0x34>)
  40d1c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40d1c8:	4b08      	ldr	r3, [pc, #32]	; (40d1ec <pll_enable+0x38>)
  40d1ca:	687a      	ldr	r2, [r7, #4]
  40d1cc:	6812      	ldr	r2, [r2, #0]
  40d1ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40d1d2:	629a      	str	r2, [r3, #40]	; 0x28
  40d1d4:	e005      	b.n	40d1e2 <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  40d1d6:	4b06      	ldr	r3, [pc, #24]	; (40d1f0 <pll_enable+0x3c>)
  40d1d8:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40d1da:	4b04      	ldr	r3, [pc, #16]	; (40d1ec <pll_enable+0x38>)
  40d1dc:	687a      	ldr	r2, [r7, #4]
  40d1de:	6812      	ldr	r2, [r2, #0]
  40d1e0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  40d1e2:	3708      	adds	r7, #8
  40d1e4:	46bd      	mov	sp, r7
  40d1e6:	bd80      	pop	{r7, pc}
  40d1e8:	0040de09 	.word	0x0040de09
  40d1ec:	400e0400 	.word	0x400e0400
  40d1f0:	0040de3d 	.word	0x0040de3d

0040d1f4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40d1f4:	b580      	push	{r7, lr}
  40d1f6:	b082      	sub	sp, #8
  40d1f8:	af00      	add	r7, sp, #0
  40d1fa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40d1fc:	687b      	ldr	r3, [r7, #4]
  40d1fe:	2b00      	cmp	r3, #0
  40d200:	d103      	bne.n	40d20a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40d202:	4b05      	ldr	r3, [pc, #20]	; (40d218 <pll_is_locked+0x24>)
  40d204:	4798      	blx	r3
  40d206:	4603      	mov	r3, r0
  40d208:	e002      	b.n	40d210 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40d20a:	4b04      	ldr	r3, [pc, #16]	; (40d21c <pll_is_locked+0x28>)
  40d20c:	4798      	blx	r3
  40d20e:	4603      	mov	r3, r0
	}
}
  40d210:	4618      	mov	r0, r3
  40d212:	3708      	adds	r7, #8
  40d214:	46bd      	mov	sp, r7
  40d216:	bd80      	pop	{r7, pc}
  40d218:	0040de21 	.word	0x0040de21
  40d21c:	0040de55 	.word	0x0040de55

0040d220 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40d220:	b580      	push	{r7, lr}
  40d222:	b082      	sub	sp, #8
  40d224:	af00      	add	r7, sp, #0
  40d226:	4603      	mov	r3, r0
  40d228:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40d22a:	79fb      	ldrb	r3, [r7, #7]
  40d22c:	3b03      	subs	r3, #3
  40d22e:	2b04      	cmp	r3, #4
  40d230:	d808      	bhi.n	40d244 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40d232:	79fb      	ldrb	r3, [r7, #7]
  40d234:	4618      	mov	r0, r3
  40d236:	4b05      	ldr	r3, [pc, #20]	; (40d24c <pll_enable_source+0x2c>)
  40d238:	4798      	blx	r3
		osc_wait_ready(e_src);
  40d23a:	79fb      	ldrb	r3, [r7, #7]
  40d23c:	4618      	mov	r0, r3
  40d23e:	4b04      	ldr	r3, [pc, #16]	; (40d250 <pll_enable_source+0x30>)
  40d240:	4798      	blx	r3
		break;
  40d242:	e000      	b.n	40d246 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40d244:	bf00      	nop
	}
}
  40d246:	3708      	adds	r7, #8
  40d248:	46bd      	mov	sp, r7
  40d24a:	bd80      	pop	{r7, pc}
  40d24c:	0040cfc9 	.word	0x0040cfc9
  40d250:	0040d135 	.word	0x0040d135

0040d254 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40d254:	b580      	push	{r7, lr}
  40d256:	b082      	sub	sp, #8
  40d258:	af00      	add	r7, sp, #0
  40d25a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40d25c:	bf00      	nop
  40d25e:	6878      	ldr	r0, [r7, #4]
  40d260:	4b04      	ldr	r3, [pc, #16]	; (40d274 <pll_wait_for_lock+0x20>)
  40d262:	4798      	blx	r3
  40d264:	4603      	mov	r3, r0
  40d266:	2b00      	cmp	r3, #0
  40d268:	d0f9      	beq.n	40d25e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40d26a:	2300      	movs	r3, #0
}
  40d26c:	4618      	mov	r0, r3
  40d26e:	3708      	adds	r7, #8
  40d270:	46bd      	mov	sp, r7
  40d272:	bd80      	pop	{r7, pc}
  40d274:	0040d1f5 	.word	0x0040d1f5

0040d278 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40d278:	b580      	push	{r7, lr}
  40d27a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40d27c:	2006      	movs	r0, #6
  40d27e:	4b04      	ldr	r3, [pc, #16]	; (40d290 <sysclk_get_main_hz+0x18>)
  40d280:	4798      	blx	r3
  40d282:	4602      	mov	r2, r0
  40d284:	4613      	mov	r3, r2
  40d286:	011b      	lsls	r3, r3, #4
  40d288:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40d28a:	4618      	mov	r0, r3
  40d28c:	bd80      	pop	{r7, pc}
  40d28e:	bf00      	nop
  40d290:	0040d0bd 	.word	0x0040d0bd

0040d294 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40d294:	b580      	push	{r7, lr}
  40d296:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40d298:	4b02      	ldr	r3, [pc, #8]	; (40d2a4 <sysclk_get_cpu_hz+0x10>)
  40d29a:	4798      	blx	r3
  40d29c:	4603      	mov	r3, r0
  40d29e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40d2a0:	4618      	mov	r0, r3
  40d2a2:	bd80      	pop	{r7, pc}
  40d2a4:	0040d279 	.word	0x0040d279

0040d2a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40d2a8:	b590      	push	{r4, r7, lr}
  40d2aa:	b083      	sub	sp, #12
  40d2ac:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40d2ae:	4811      	ldr	r0, [pc, #68]	; (40d2f4 <sysclk_init+0x4c>)
  40d2b0:	4b11      	ldr	r3, [pc, #68]	; (40d2f8 <sysclk_init+0x50>)
  40d2b2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40d2b4:	2006      	movs	r0, #6
  40d2b6:	4b11      	ldr	r3, [pc, #68]	; (40d2fc <sysclk_init+0x54>)
  40d2b8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40d2ba:	1d3b      	adds	r3, r7, #4
  40d2bc:	4618      	mov	r0, r3
  40d2be:	2106      	movs	r1, #6
  40d2c0:	2201      	movs	r2, #1
  40d2c2:	230f      	movs	r3, #15
  40d2c4:	4c0e      	ldr	r4, [pc, #56]	; (40d300 <sysclk_init+0x58>)
  40d2c6:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40d2c8:	1d3b      	adds	r3, r7, #4
  40d2ca:	4618      	mov	r0, r3
  40d2cc:	2100      	movs	r1, #0
  40d2ce:	4b0d      	ldr	r3, [pc, #52]	; (40d304 <sysclk_init+0x5c>)
  40d2d0:	4798      	blx	r3
		pll_wait_for_lock(0);
  40d2d2:	2000      	movs	r0, #0
  40d2d4:	4b0c      	ldr	r3, [pc, #48]	; (40d308 <sysclk_init+0x60>)
  40d2d6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40d2d8:	2010      	movs	r0, #16
  40d2da:	4b0c      	ldr	r3, [pc, #48]	; (40d30c <sysclk_init+0x64>)
  40d2dc:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40d2de:	4b0c      	ldr	r3, [pc, #48]	; (40d310 <sysclk_init+0x68>)
  40d2e0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40d2e2:	4b0c      	ldr	r3, [pc, #48]	; (40d314 <sysclk_init+0x6c>)
  40d2e4:	4798      	blx	r3
  40d2e6:	4603      	mov	r3, r0
  40d2e8:	4618      	mov	r0, r3
  40d2ea:	4b03      	ldr	r3, [pc, #12]	; (40d2f8 <sysclk_init+0x50>)
  40d2ec:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40d2ee:	370c      	adds	r7, #12
  40d2f0:	46bd      	mov	sp, r7
  40d2f2:	bd90      	pop	{r4, r7, pc}
  40d2f4:	07270e00 	.word	0x07270e00
  40d2f8:	0040e1a5 	.word	0x0040e1a5
  40d2fc:	0040d221 	.word	0x0040d221
  40d300:	0040d161 	.word	0x0040d161
  40d304:	0040d1b5 	.word	0x0040d1b5
  40d308:	0040d255 	.word	0x0040d255
  40d30c:	0040dc15 	.word	0x0040dc15
  40d310:	0040e009 	.word	0x0040e009
  40d314:	0040d295 	.word	0x0040d295

0040d318 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40d318:	b580      	push	{r7, lr}
  40d31a:	b082      	sub	sp, #8
  40d31c:	af00      	add	r7, sp, #0
  40d31e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40d320:	6878      	ldr	r0, [r7, #4]
  40d322:	4b02      	ldr	r3, [pc, #8]	; (40d32c <sysclk_enable_peripheral_clock+0x14>)
  40d324:	4798      	blx	r3
}
  40d326:	3708      	adds	r7, #8
  40d328:	46bd      	mov	sp, r7
  40d32a:	bd80      	pop	{r7, pc}
  40d32c:	0040de71 	.word	0x0040de71

0040d330 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40d330:	b580      	push	{r7, lr}
  40d332:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40d334:	200b      	movs	r0, #11
  40d336:	4b03      	ldr	r3, [pc, #12]	; (40d344 <ioport_init+0x14>)
  40d338:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40d33a:	200c      	movs	r0, #12
  40d33c:	4b01      	ldr	r3, [pc, #4]	; (40d344 <ioport_init+0x14>)
  40d33e:	4798      	blx	r3
	arch_ioport_init();
}
  40d340:	bd80      	pop	{r7, pc}
  40d342:	bf00      	nop
  40d344:	0040d319 	.word	0x0040d319

0040d348 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40d348:	b580      	push	{r7, lr}
  40d34a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40d34c:	4816      	ldr	r0, [pc, #88]	; (40d3a8 <board_init+0x60>)
  40d34e:	4b17      	ldr	r3, [pc, #92]	; (40d3ac <board_init+0x64>)
  40d350:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  40d352:	4b17      	ldr	r3, [pc, #92]	; (40d3b0 <board_init+0x68>)
  40d354:	4798      	blx	r3
// 	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
// 	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
	
	
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  40d356:	201c      	movs	r0, #28
  40d358:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d35c:	4b15      	ldr	r3, [pc, #84]	; (40d3b4 <board_init+0x6c>)
  40d35e:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  40d360:	201d      	movs	r0, #29
  40d362:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d366:	4b13      	ldr	r3, [pc, #76]	; (40d3b4 <board_init+0x6c>)
  40d368:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  40d36a:	201e      	movs	r0, #30
  40d36c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d370:	4b10      	ldr	r3, [pc, #64]	; (40d3b4 <board_init+0x6c>)
  40d372:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  40d374:	201f      	movs	r0, #31
  40d376:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d37a:	4b0e      	ldr	r3, [pc, #56]	; (40d3b4 <board_init+0x6c>)
  40d37c:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  40d37e:	201a      	movs	r0, #26
  40d380:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d384:	4b0b      	ldr	r3, [pc, #44]	; (40d3b4 <board_init+0x6c>)
  40d386:	4798      	blx	r3
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  40d388:	201b      	movs	r0, #27
  40d38a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d38e:	4b09      	ldr	r3, [pc, #36]	; (40d3b4 <board_init+0x6c>)
  40d390:	4798      	blx	r3

	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  40d392:	202b      	movs	r0, #43	; 0x2b
  40d394:	4908      	ldr	r1, [pc, #32]	; (40d3b8 <board_init+0x70>)
  40d396:	4b07      	ldr	r3, [pc, #28]	; (40d3b4 <board_init+0x6c>)
  40d398:	4798      	blx	r3

//#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40d39a:	4808      	ldr	r0, [pc, #32]	; (40d3bc <board_init+0x74>)
  40d39c:	210c      	movs	r1, #12
  40d39e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40d3a2:	4b07      	ldr	r3, [pc, #28]	; (40d3c0 <board_init+0x78>)
  40d3a4:	4798      	blx	r3

#endif  



}
  40d3a6:	bd80      	pop	{r7, pc}
  40d3a8:	400e1450 	.word	0x400e1450
  40d3ac:	0040df1d 	.word	0x0040df1d
  40d3b0:	0040d331 	.word	0x0040d331
  40d3b4:	0040d769 	.word	0x0040d769
  40d3b8:	28000001 	.word	0x28000001
  40d3bc:	400e1000 	.word	0x400e1000
  40d3c0:	0040d91d 	.word	0x0040d91d

0040d3c4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40d3c4:	b480      	push	{r7}
  40d3c6:	b085      	sub	sp, #20
  40d3c8:	af00      	add	r7, sp, #0
  40d3ca:	60f8      	str	r0, [r7, #12]
  40d3cc:	60b9      	str	r1, [r7, #8]
  40d3ce:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40d3d0:	687b      	ldr	r3, [r7, #4]
  40d3d2:	2b00      	cmp	r3, #0
  40d3d4:	d003      	beq.n	40d3de <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40d3d6:	68fb      	ldr	r3, [r7, #12]
  40d3d8:	68ba      	ldr	r2, [r7, #8]
  40d3da:	665a      	str	r2, [r3, #100]	; 0x64
  40d3dc:	e002      	b.n	40d3e4 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40d3de:	68fb      	ldr	r3, [r7, #12]
  40d3e0:	68ba      	ldr	r2, [r7, #8]
  40d3e2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40d3e4:	3714      	adds	r7, #20
  40d3e6:	46bd      	mov	sp, r7
  40d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d3ec:	4770      	bx	lr
  40d3ee:	bf00      	nop

0040d3f0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40d3f0:	b480      	push	{r7}
  40d3f2:	b087      	sub	sp, #28
  40d3f4:	af00      	add	r7, sp, #0
  40d3f6:	60f8      	str	r0, [r7, #12]
  40d3f8:	60b9      	str	r1, [r7, #8]
  40d3fa:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40d3fc:	68fb      	ldr	r3, [r7, #12]
  40d3fe:	687a      	ldr	r2, [r7, #4]
  40d400:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40d402:	68bb      	ldr	r3, [r7, #8]
  40d404:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40d408:	d04a      	beq.n	40d4a0 <pio_set_peripheral+0xb0>
  40d40a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40d40e:	d808      	bhi.n	40d422 <pio_set_peripheral+0x32>
  40d410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40d414:	d016      	beq.n	40d444 <pio_set_peripheral+0x54>
  40d416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40d41a:	d02c      	beq.n	40d476 <pio_set_peripheral+0x86>
  40d41c:	2b00      	cmp	r3, #0
  40d41e:	d069      	beq.n	40d4f4 <pio_set_peripheral+0x104>
  40d420:	e064      	b.n	40d4ec <pio_set_peripheral+0xfc>
  40d422:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40d426:	d065      	beq.n	40d4f4 <pio_set_peripheral+0x104>
  40d428:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40d42c:	d803      	bhi.n	40d436 <pio_set_peripheral+0x46>
  40d42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40d432:	d04a      	beq.n	40d4ca <pio_set_peripheral+0xda>
  40d434:	e05a      	b.n	40d4ec <pio_set_peripheral+0xfc>
  40d436:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40d43a:	d05b      	beq.n	40d4f4 <pio_set_peripheral+0x104>
  40d43c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40d440:	d058      	beq.n	40d4f4 <pio_set_peripheral+0x104>
  40d442:	e053      	b.n	40d4ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40d444:	68fb      	ldr	r3, [r7, #12]
  40d446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40d448:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40d44a:	68fb      	ldr	r3, [r7, #12]
  40d44c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40d44e:	687b      	ldr	r3, [r7, #4]
  40d450:	43d9      	mvns	r1, r3
  40d452:	697b      	ldr	r3, [r7, #20]
  40d454:	400b      	ands	r3, r1
  40d456:	401a      	ands	r2, r3
  40d458:	68fb      	ldr	r3, [r7, #12]
  40d45a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40d45c:	68fb      	ldr	r3, [r7, #12]
  40d45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40d460:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40d462:	68fb      	ldr	r3, [r7, #12]
  40d464:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40d466:	687b      	ldr	r3, [r7, #4]
  40d468:	43d9      	mvns	r1, r3
  40d46a:	697b      	ldr	r3, [r7, #20]
  40d46c:	400b      	ands	r3, r1
  40d46e:	401a      	ands	r2, r3
  40d470:	68fb      	ldr	r3, [r7, #12]
  40d472:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40d474:	e03a      	b.n	40d4ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40d476:	68fb      	ldr	r3, [r7, #12]
  40d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40d47a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40d47c:	687a      	ldr	r2, [r7, #4]
  40d47e:	697b      	ldr	r3, [r7, #20]
  40d480:	431a      	orrs	r2, r3
  40d482:	68fb      	ldr	r3, [r7, #12]
  40d484:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40d486:	68fb      	ldr	r3, [r7, #12]
  40d488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40d48a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40d48c:	68fb      	ldr	r3, [r7, #12]
  40d48e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40d490:	687b      	ldr	r3, [r7, #4]
  40d492:	43d9      	mvns	r1, r3
  40d494:	697b      	ldr	r3, [r7, #20]
  40d496:	400b      	ands	r3, r1
  40d498:	401a      	ands	r2, r3
  40d49a:	68fb      	ldr	r3, [r7, #12]
  40d49c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40d49e:	e025      	b.n	40d4ec <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40d4a0:	68fb      	ldr	r3, [r7, #12]
  40d4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40d4a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40d4a6:	68fb      	ldr	r3, [r7, #12]
  40d4a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40d4aa:	687b      	ldr	r3, [r7, #4]
  40d4ac:	43d9      	mvns	r1, r3
  40d4ae:	697b      	ldr	r3, [r7, #20]
  40d4b0:	400b      	ands	r3, r1
  40d4b2:	401a      	ands	r2, r3
  40d4b4:	68fb      	ldr	r3, [r7, #12]
  40d4b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40d4b8:	68fb      	ldr	r3, [r7, #12]
  40d4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40d4bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40d4be:	687a      	ldr	r2, [r7, #4]
  40d4c0:	697b      	ldr	r3, [r7, #20]
  40d4c2:	431a      	orrs	r2, r3
  40d4c4:	68fb      	ldr	r3, [r7, #12]
  40d4c6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40d4c8:	e010      	b.n	40d4ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40d4ca:	68fb      	ldr	r3, [r7, #12]
  40d4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40d4ce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40d4d0:	687a      	ldr	r2, [r7, #4]
  40d4d2:	697b      	ldr	r3, [r7, #20]
  40d4d4:	431a      	orrs	r2, r3
  40d4d6:	68fb      	ldr	r3, [r7, #12]
  40d4d8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40d4da:	68fb      	ldr	r3, [r7, #12]
  40d4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40d4de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40d4e0:	687a      	ldr	r2, [r7, #4]
  40d4e2:	697b      	ldr	r3, [r7, #20]
  40d4e4:	431a      	orrs	r2, r3
  40d4e6:	68fb      	ldr	r3, [r7, #12]
  40d4e8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40d4ea:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40d4ec:	68fb      	ldr	r3, [r7, #12]
  40d4ee:	687a      	ldr	r2, [r7, #4]
  40d4f0:	605a      	str	r2, [r3, #4]
  40d4f2:	e000      	b.n	40d4f6 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40d4f4:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40d4f6:	371c      	adds	r7, #28
  40d4f8:	46bd      	mov	sp, r7
  40d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d4fe:	4770      	bx	lr

0040d500 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40d500:	b580      	push	{r7, lr}
  40d502:	b084      	sub	sp, #16
  40d504:	af00      	add	r7, sp, #0
  40d506:	60f8      	str	r0, [r7, #12]
  40d508:	60b9      	str	r1, [r7, #8]
  40d50a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40d50c:	68f8      	ldr	r0, [r7, #12]
  40d50e:	68b9      	ldr	r1, [r7, #8]
  40d510:	4b18      	ldr	r3, [pc, #96]	; (40d574 <pio_set_input+0x74>)
  40d512:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40d514:	687b      	ldr	r3, [r7, #4]
  40d516:	f003 0301 	and.w	r3, r3, #1
  40d51a:	68f8      	ldr	r0, [r7, #12]
  40d51c:	68b9      	ldr	r1, [r7, #8]
  40d51e:	461a      	mov	r2, r3
  40d520:	4b15      	ldr	r3, [pc, #84]	; (40d578 <pio_set_input+0x78>)
  40d522:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40d524:	687b      	ldr	r3, [r7, #4]
  40d526:	f003 030a 	and.w	r3, r3, #10
  40d52a:	2b00      	cmp	r3, #0
  40d52c:	d003      	beq.n	40d536 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40d52e:	68fb      	ldr	r3, [r7, #12]
  40d530:	68ba      	ldr	r2, [r7, #8]
  40d532:	621a      	str	r2, [r3, #32]
  40d534:	e002      	b.n	40d53c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40d536:	68fb      	ldr	r3, [r7, #12]
  40d538:	68ba      	ldr	r2, [r7, #8]
  40d53a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40d53c:	687b      	ldr	r3, [r7, #4]
  40d53e:	f003 0302 	and.w	r3, r3, #2
  40d542:	2b00      	cmp	r3, #0
  40d544:	d004      	beq.n	40d550 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40d546:	68fb      	ldr	r3, [r7, #12]
  40d548:	68ba      	ldr	r2, [r7, #8]
  40d54a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40d54e:	e008      	b.n	40d562 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40d550:	687b      	ldr	r3, [r7, #4]
  40d552:	f003 0308 	and.w	r3, r3, #8
  40d556:	2b00      	cmp	r3, #0
  40d558:	d003      	beq.n	40d562 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40d55a:	68fb      	ldr	r3, [r7, #12]
  40d55c:	68ba      	ldr	r2, [r7, #8]
  40d55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40d562:	68fb      	ldr	r3, [r7, #12]
  40d564:	68ba      	ldr	r2, [r7, #8]
  40d566:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40d568:	68fb      	ldr	r3, [r7, #12]
  40d56a:	68ba      	ldr	r2, [r7, #8]
  40d56c:	601a      	str	r2, [r3, #0]
}
  40d56e:	3710      	adds	r7, #16
  40d570:	46bd      	mov	sp, r7
  40d572:	bd80      	pop	{r7, pc}
  40d574:	0040d66d 	.word	0x0040d66d
  40d578:	0040d3c5 	.word	0x0040d3c5

0040d57c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40d57c:	b580      	push	{r7, lr}
  40d57e:	b084      	sub	sp, #16
  40d580:	af00      	add	r7, sp, #0
  40d582:	60f8      	str	r0, [r7, #12]
  40d584:	60b9      	str	r1, [r7, #8]
  40d586:	607a      	str	r2, [r7, #4]
  40d588:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40d58a:	68f8      	ldr	r0, [r7, #12]
  40d58c:	68b9      	ldr	r1, [r7, #8]
  40d58e:	4b12      	ldr	r3, [pc, #72]	; (40d5d8 <pio_set_output+0x5c>)
  40d590:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40d592:	68f8      	ldr	r0, [r7, #12]
  40d594:	68b9      	ldr	r1, [r7, #8]
  40d596:	69ba      	ldr	r2, [r7, #24]
  40d598:	4b10      	ldr	r3, [pc, #64]	; (40d5dc <pio_set_output+0x60>)
  40d59a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40d59c:	683b      	ldr	r3, [r7, #0]
  40d59e:	2b00      	cmp	r3, #0
  40d5a0:	d003      	beq.n	40d5aa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40d5a2:	68fb      	ldr	r3, [r7, #12]
  40d5a4:	68ba      	ldr	r2, [r7, #8]
  40d5a6:	651a      	str	r2, [r3, #80]	; 0x50
  40d5a8:	e002      	b.n	40d5b0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40d5aa:	68fb      	ldr	r3, [r7, #12]
  40d5ac:	68ba      	ldr	r2, [r7, #8]
  40d5ae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40d5b0:	687b      	ldr	r3, [r7, #4]
  40d5b2:	2b00      	cmp	r3, #0
  40d5b4:	d003      	beq.n	40d5be <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40d5b6:	68fb      	ldr	r3, [r7, #12]
  40d5b8:	68ba      	ldr	r2, [r7, #8]
  40d5ba:	631a      	str	r2, [r3, #48]	; 0x30
  40d5bc:	e002      	b.n	40d5c4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40d5be:	68fb      	ldr	r3, [r7, #12]
  40d5c0:	68ba      	ldr	r2, [r7, #8]
  40d5c2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40d5c4:	68fb      	ldr	r3, [r7, #12]
  40d5c6:	68ba      	ldr	r2, [r7, #8]
  40d5c8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40d5ca:	68fb      	ldr	r3, [r7, #12]
  40d5cc:	68ba      	ldr	r2, [r7, #8]
  40d5ce:	601a      	str	r2, [r3, #0]
}
  40d5d0:	3710      	adds	r7, #16
  40d5d2:	46bd      	mov	sp, r7
  40d5d4:	bd80      	pop	{r7, pc}
  40d5d6:	bf00      	nop
  40d5d8:	0040d66d 	.word	0x0040d66d
  40d5dc:	0040d3c5 	.word	0x0040d3c5

0040d5e0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40d5e0:	b480      	push	{r7}
  40d5e2:	b085      	sub	sp, #20
  40d5e4:	af00      	add	r7, sp, #0
  40d5e6:	60f8      	str	r0, [r7, #12]
  40d5e8:	60b9      	str	r1, [r7, #8]
  40d5ea:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40d5ec:	687b      	ldr	r3, [r7, #4]
  40d5ee:	f003 0310 	and.w	r3, r3, #16
  40d5f2:	2b00      	cmp	r3, #0
  40d5f4:	d020      	beq.n	40d638 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40d5f6:	68fb      	ldr	r3, [r7, #12]
  40d5f8:	68ba      	ldr	r2, [r7, #8]
  40d5fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40d5fe:	687b      	ldr	r3, [r7, #4]
  40d600:	f003 0320 	and.w	r3, r3, #32
  40d604:	2b00      	cmp	r3, #0
  40d606:	d004      	beq.n	40d612 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40d608:	68fb      	ldr	r3, [r7, #12]
  40d60a:	68ba      	ldr	r2, [r7, #8]
  40d60c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40d610:	e003      	b.n	40d61a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40d612:	68fb      	ldr	r3, [r7, #12]
  40d614:	68ba      	ldr	r2, [r7, #8]
  40d616:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40d61a:	687b      	ldr	r3, [r7, #4]
  40d61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40d620:	2b00      	cmp	r3, #0
  40d622:	d004      	beq.n	40d62e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40d624:	68fb      	ldr	r3, [r7, #12]
  40d626:	68ba      	ldr	r2, [r7, #8]
  40d628:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  40d62c:	e008      	b.n	40d640 <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40d62e:	68fb      	ldr	r3, [r7, #12]
  40d630:	68ba      	ldr	r2, [r7, #8]
  40d632:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  40d636:	e003      	b.n	40d640 <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40d638:	68fb      	ldr	r3, [r7, #12]
  40d63a:	68ba      	ldr	r2, [r7, #8]
  40d63c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  40d640:	3714      	adds	r7, #20
  40d642:	46bd      	mov	sp, r7
  40d644:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d648:	4770      	bx	lr
  40d64a:	bf00      	nop

0040d64c <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40d64c:	b480      	push	{r7}
  40d64e:	b083      	sub	sp, #12
  40d650:	af00      	add	r7, sp, #0
  40d652:	6078      	str	r0, [r7, #4]
  40d654:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  40d656:	687b      	ldr	r3, [r7, #4]
  40d658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40d65a:	687b      	ldr	r3, [r7, #4]
  40d65c:	683a      	ldr	r2, [r7, #0]
  40d65e:	641a      	str	r2, [r3, #64]	; 0x40
}
  40d660:	370c      	adds	r7, #12
  40d662:	46bd      	mov	sp, r7
  40d664:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d668:	4770      	bx	lr
  40d66a:	bf00      	nop

0040d66c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40d66c:	b480      	push	{r7}
  40d66e:	b083      	sub	sp, #12
  40d670:	af00      	add	r7, sp, #0
  40d672:	6078      	str	r0, [r7, #4]
  40d674:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40d676:	687b      	ldr	r3, [r7, #4]
  40d678:	683a      	ldr	r2, [r7, #0]
  40d67a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40d67c:	370c      	adds	r7, #12
  40d67e:	46bd      	mov	sp, r7
  40d680:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d684:	4770      	bx	lr
  40d686:	bf00      	nop

0040d688 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40d688:	b480      	push	{r7}
  40d68a:	b083      	sub	sp, #12
  40d68c:	af00      	add	r7, sp, #0
  40d68e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40d690:	687b      	ldr	r3, [r7, #4]
  40d692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40d694:	4618      	mov	r0, r3
  40d696:	370c      	adds	r7, #12
  40d698:	46bd      	mov	sp, r7
  40d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d69e:	4770      	bx	lr

0040d6a0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40d6a0:	b480      	push	{r7}
  40d6a2:	b083      	sub	sp, #12
  40d6a4:	af00      	add	r7, sp, #0
  40d6a6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40d6a8:	687b      	ldr	r3, [r7, #4]
  40d6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40d6ac:	4618      	mov	r0, r3
  40d6ae:	370c      	adds	r7, #12
  40d6b0:	46bd      	mov	sp, r7
  40d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d6b6:	4770      	bx	lr

0040d6b8 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  40d6b8:	b580      	push	{r7, lr}
  40d6ba:	b084      	sub	sp, #16
  40d6bc:	af00      	add	r7, sp, #0
  40d6be:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40d6c0:	6878      	ldr	r0, [r7, #4]
  40d6c2:	4b07      	ldr	r3, [pc, #28]	; (40d6e0 <pio_set_pin_high+0x28>)
  40d6c4:	4798      	blx	r3
  40d6c6:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40d6c8:	687b      	ldr	r3, [r7, #4]
  40d6ca:	f003 031f 	and.w	r3, r3, #31
  40d6ce:	2201      	movs	r2, #1
  40d6d0:	fa02 f303 	lsl.w	r3, r2, r3
  40d6d4:	461a      	mov	r2, r3
  40d6d6:	68fb      	ldr	r3, [r7, #12]
  40d6d8:	631a      	str	r2, [r3, #48]	; 0x30
}
  40d6da:	3710      	adds	r7, #16
  40d6dc:	46bd      	mov	sp, r7
  40d6de:	bd80      	pop	{r7, pc}
  40d6e0:	0040da45 	.word	0x0040da45

0040d6e4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40d6e4:	b580      	push	{r7, lr}
  40d6e6:	b084      	sub	sp, #16
  40d6e8:	af00      	add	r7, sp, #0
  40d6ea:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40d6ec:	6878      	ldr	r0, [r7, #4]
  40d6ee:	4b07      	ldr	r3, [pc, #28]	; (40d70c <pio_set_pin_low+0x28>)
  40d6f0:	4798      	blx	r3
  40d6f2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40d6f4:	687b      	ldr	r3, [r7, #4]
  40d6f6:	f003 031f 	and.w	r3, r3, #31
  40d6fa:	2201      	movs	r2, #1
  40d6fc:	fa02 f303 	lsl.w	r3, r2, r3
  40d700:	461a      	mov	r2, r3
  40d702:	68fb      	ldr	r3, [r7, #12]
  40d704:	635a      	str	r2, [r3, #52]	; 0x34
}
  40d706:	3710      	adds	r7, #16
  40d708:	46bd      	mov	sp, r7
  40d70a:	bd80      	pop	{r7, pc}
  40d70c:	0040da45 	.word	0x0040da45

0040d710 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  40d710:	b580      	push	{r7, lr}
  40d712:	b084      	sub	sp, #16
  40d714:	af00      	add	r7, sp, #0
  40d716:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40d718:	6878      	ldr	r0, [r7, #4]
  40d71a:	4b12      	ldr	r3, [pc, #72]	; (40d764 <pio_toggle_pin+0x54>)
  40d71c:	4798      	blx	r3
  40d71e:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  40d720:	68fb      	ldr	r3, [r7, #12]
  40d722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40d724:	687b      	ldr	r3, [r7, #4]
  40d726:	f003 031f 	and.w	r3, r3, #31
  40d72a:	2101      	movs	r1, #1
  40d72c:	fa01 f303 	lsl.w	r3, r1, r3
  40d730:	4013      	ands	r3, r2
  40d732:	2b00      	cmp	r3, #0
  40d734:	d009      	beq.n	40d74a <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40d736:	687b      	ldr	r3, [r7, #4]
  40d738:	f003 031f 	and.w	r3, r3, #31
  40d73c:	2201      	movs	r2, #1
  40d73e:	fa02 f303 	lsl.w	r3, r2, r3
  40d742:	461a      	mov	r2, r3
  40d744:	68fb      	ldr	r3, [r7, #12]
  40d746:	635a      	str	r2, [r3, #52]	; 0x34
  40d748:	e008      	b.n	40d75c <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40d74a:	687b      	ldr	r3, [r7, #4]
  40d74c:	f003 031f 	and.w	r3, r3, #31
  40d750:	2201      	movs	r2, #1
  40d752:	fa02 f303 	lsl.w	r3, r2, r3
  40d756:	461a      	mov	r2, r3
  40d758:	68fb      	ldr	r3, [r7, #12]
  40d75a:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  40d75c:	3710      	adds	r7, #16
  40d75e:	46bd      	mov	sp, r7
  40d760:	bd80      	pop	{r7, pc}
  40d762:	bf00      	nop
  40d764:	0040da45 	.word	0x0040da45

0040d768 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40d768:	b590      	push	{r4, r7, lr}
  40d76a:	b087      	sub	sp, #28
  40d76c:	af02      	add	r7, sp, #8
  40d76e:	6078      	str	r0, [r7, #4]
  40d770:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40d772:	6878      	ldr	r0, [r7, #4]
  40d774:	4b64      	ldr	r3, [pc, #400]	; (40d908 <pio_configure_pin+0x1a0>)
  40d776:	4798      	blx	r3
  40d778:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40d77a:	683b      	ldr	r3, [r7, #0]
  40d77c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40d780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40d784:	d06b      	beq.n	40d85e <pio_configure_pin+0xf6>
  40d786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40d78a:	d809      	bhi.n	40d7a0 <pio_configure_pin+0x38>
  40d78c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40d790:	d02d      	beq.n	40d7ee <pio_configure_pin+0x86>
  40d792:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40d796:	d046      	beq.n	40d826 <pio_configure_pin+0xbe>
  40d798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40d79c:	d00b      	beq.n	40d7b6 <pio_configure_pin+0x4e>
  40d79e:	e0ac      	b.n	40d8fa <pio_configure_pin+0x192>
  40d7a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40d7a4:	f000 8083 	beq.w	40d8ae <pio_configure_pin+0x146>
  40d7a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40d7ac:	d07f      	beq.n	40d8ae <pio_configure_pin+0x146>
  40d7ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40d7b2:	d070      	beq.n	40d896 <pio_configure_pin+0x12e>
  40d7b4:	e0a1      	b.n	40d8fa <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40d7b6:	687b      	ldr	r3, [r7, #4]
  40d7b8:	f003 031f 	and.w	r3, r3, #31
  40d7bc:	2201      	movs	r2, #1
  40d7be:	fa02 f303 	lsl.w	r3, r2, r3
  40d7c2:	68f8      	ldr	r0, [r7, #12]
  40d7c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40d7c8:	461a      	mov	r2, r3
  40d7ca:	4b50      	ldr	r3, [pc, #320]	; (40d90c <pio_configure_pin+0x1a4>)
  40d7cc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40d7ce:	687b      	ldr	r3, [r7, #4]
  40d7d0:	f003 031f 	and.w	r3, r3, #31
  40d7d4:	2201      	movs	r2, #1
  40d7d6:	fa02 f303 	lsl.w	r3, r2, r3
  40d7da:	461a      	mov	r2, r3
  40d7dc:	683b      	ldr	r3, [r7, #0]
  40d7de:	f003 0301 	and.w	r3, r3, #1
  40d7e2:	68f8      	ldr	r0, [r7, #12]
  40d7e4:	4611      	mov	r1, r2
  40d7e6:	461a      	mov	r2, r3
  40d7e8:	4b49      	ldr	r3, [pc, #292]	; (40d910 <pio_configure_pin+0x1a8>)
  40d7ea:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40d7ec:	e087      	b.n	40d8fe <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40d7ee:	687b      	ldr	r3, [r7, #4]
  40d7f0:	f003 031f 	and.w	r3, r3, #31
  40d7f4:	2201      	movs	r2, #1
  40d7f6:	fa02 f303 	lsl.w	r3, r2, r3
  40d7fa:	68f8      	ldr	r0, [r7, #12]
  40d7fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40d800:	461a      	mov	r2, r3
  40d802:	4b42      	ldr	r3, [pc, #264]	; (40d90c <pio_configure_pin+0x1a4>)
  40d804:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40d806:	687b      	ldr	r3, [r7, #4]
  40d808:	f003 031f 	and.w	r3, r3, #31
  40d80c:	2201      	movs	r2, #1
  40d80e:	fa02 f303 	lsl.w	r3, r2, r3
  40d812:	461a      	mov	r2, r3
  40d814:	683b      	ldr	r3, [r7, #0]
  40d816:	f003 0301 	and.w	r3, r3, #1
  40d81a:	68f8      	ldr	r0, [r7, #12]
  40d81c:	4611      	mov	r1, r2
  40d81e:	461a      	mov	r2, r3
  40d820:	4b3b      	ldr	r3, [pc, #236]	; (40d910 <pio_configure_pin+0x1a8>)
  40d822:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40d824:	e06b      	b.n	40d8fe <pio_configure_pin+0x196>
//#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40d826:	687b      	ldr	r3, [r7, #4]
  40d828:	f003 031f 	and.w	r3, r3, #31
  40d82c:	2201      	movs	r2, #1
  40d82e:	fa02 f303 	lsl.w	r3, r2, r3
  40d832:	68f8      	ldr	r0, [r7, #12]
  40d834:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d838:	461a      	mov	r2, r3
  40d83a:	4b34      	ldr	r3, [pc, #208]	; (40d90c <pio_configure_pin+0x1a4>)
  40d83c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40d83e:	687b      	ldr	r3, [r7, #4]
  40d840:	f003 031f 	and.w	r3, r3, #31
  40d844:	2201      	movs	r2, #1
  40d846:	fa02 f303 	lsl.w	r3, r2, r3
  40d84a:	461a      	mov	r2, r3
  40d84c:	683b      	ldr	r3, [r7, #0]
  40d84e:	f003 0301 	and.w	r3, r3, #1
  40d852:	68f8      	ldr	r0, [r7, #12]
  40d854:	4611      	mov	r1, r2
  40d856:	461a      	mov	r2, r3
  40d858:	4b2d      	ldr	r3, [pc, #180]	; (40d910 <pio_configure_pin+0x1a8>)
  40d85a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40d85c:	e04f      	b.n	40d8fe <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40d85e:	687b      	ldr	r3, [r7, #4]
  40d860:	f003 031f 	and.w	r3, r3, #31
  40d864:	2201      	movs	r2, #1
  40d866:	fa02 f303 	lsl.w	r3, r2, r3
  40d86a:	68f8      	ldr	r0, [r7, #12]
  40d86c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40d870:	461a      	mov	r2, r3
  40d872:	4b26      	ldr	r3, [pc, #152]	; (40d90c <pio_configure_pin+0x1a4>)
  40d874:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40d876:	687b      	ldr	r3, [r7, #4]
  40d878:	f003 031f 	and.w	r3, r3, #31
  40d87c:	2201      	movs	r2, #1
  40d87e:	fa02 f303 	lsl.w	r3, r2, r3
  40d882:	461a      	mov	r2, r3
  40d884:	683b      	ldr	r3, [r7, #0]
  40d886:	f003 0301 	and.w	r3, r3, #1
  40d88a:	68f8      	ldr	r0, [r7, #12]
  40d88c:	4611      	mov	r1, r2
  40d88e:	461a      	mov	r2, r3
  40d890:	4b1f      	ldr	r3, [pc, #124]	; (40d910 <pio_configure_pin+0x1a8>)
  40d892:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40d894:	e033      	b.n	40d8fe <pio_configure_pin+0x196>
//#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40d896:	687b      	ldr	r3, [r7, #4]
  40d898:	f003 031f 	and.w	r3, r3, #31
  40d89c:	2201      	movs	r2, #1
  40d89e:	fa02 f303 	lsl.w	r3, r2, r3
  40d8a2:	68f8      	ldr	r0, [r7, #12]
  40d8a4:	4619      	mov	r1, r3
  40d8a6:	683a      	ldr	r2, [r7, #0]
  40d8a8:	4b1a      	ldr	r3, [pc, #104]	; (40d914 <pio_configure_pin+0x1ac>)
  40d8aa:	4798      	blx	r3
		break;
  40d8ac:	e027      	b.n	40d8fe <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40d8ae:	687b      	ldr	r3, [r7, #4]
  40d8b0:	f003 031f 	and.w	r3, r3, #31
  40d8b4:	2201      	movs	r2, #1
  40d8b6:	fa02 f303 	lsl.w	r3, r2, r3
  40d8ba:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40d8bc:	683b      	ldr	r3, [r7, #0]
  40d8be:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40d8c2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40d8c6:	bf14      	ite	ne
  40d8c8:	2300      	movne	r3, #0
  40d8ca:	2301      	moveq	r3, #1
  40d8cc:	b2db      	uxtb	r3, r3
  40d8ce:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40d8d0:	683b      	ldr	r3, [r7, #0]
  40d8d2:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40d8d6:	2b00      	cmp	r3, #0
  40d8d8:	bf0c      	ite	eq
  40d8da:	2300      	moveq	r3, #0
  40d8dc:	2301      	movne	r3, #1
  40d8de:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40d8e0:	6838      	ldr	r0, [r7, #0]
  40d8e2:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40d8e6:	2800      	cmp	r0, #0
  40d8e8:	bf0c      	ite	eq
  40d8ea:	2000      	moveq	r0, #0
  40d8ec:	2001      	movne	r0, #1
  40d8ee:	b2c0      	uxtb	r0, r0
  40d8f0:	9000      	str	r0, [sp, #0]
  40d8f2:	68f8      	ldr	r0, [r7, #12]
  40d8f4:	4c08      	ldr	r4, [pc, #32]	; (40d918 <pio_configure_pin+0x1b0>)
  40d8f6:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40d8f8:	e001      	b.n	40d8fe <pio_configure_pin+0x196>

	default:
		return 0;
  40d8fa:	2300      	movs	r3, #0
  40d8fc:	e000      	b.n	40d900 <pio_configure_pin+0x198>
	}

	return 1;
  40d8fe:	2301      	movs	r3, #1
}
  40d900:	4618      	mov	r0, r3
  40d902:	3714      	adds	r7, #20
  40d904:	46bd      	mov	sp, r7
  40d906:	bd90      	pop	{r4, r7, pc}
  40d908:	0040da45 	.word	0x0040da45
  40d90c:	0040d3f1 	.word	0x0040d3f1
  40d910:	0040d3c5 	.word	0x0040d3c5
  40d914:	0040d501 	.word	0x0040d501
  40d918:	0040d57d 	.word	0x0040d57d

0040d91c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40d91c:	b590      	push	{r4, r7, lr}
  40d91e:	b087      	sub	sp, #28
  40d920:	af02      	add	r7, sp, #8
  40d922:	60f8      	str	r0, [r7, #12]
  40d924:	60b9      	str	r1, [r7, #8]
  40d926:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40d928:	687b      	ldr	r3, [r7, #4]
  40d92a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40d92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40d932:	d043      	beq.n	40d9bc <pio_configure_pin_group+0xa0>
  40d934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40d938:	d809      	bhi.n	40d94e <pio_configure_pin_group+0x32>
  40d93a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40d93e:	d01f      	beq.n	40d980 <pio_configure_pin_group+0x64>
  40d940:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40d944:	d02b      	beq.n	40d99e <pio_configure_pin_group+0x82>
  40d946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40d94a:	d00a      	beq.n	40d962 <pio_configure_pin_group+0x46>
  40d94c:	e06b      	b.n	40da26 <pio_configure_pin_group+0x10a>
  40d94e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40d952:	d048      	beq.n	40d9e6 <pio_configure_pin_group+0xca>
  40d954:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40d958:	d045      	beq.n	40d9e6 <pio_configure_pin_group+0xca>
  40d95a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40d95e:	d03c      	beq.n	40d9da <pio_configure_pin_group+0xbe>
  40d960:	e061      	b.n	40da26 <pio_configure_pin_group+0x10a>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40d962:	68f8      	ldr	r0, [r7, #12]
  40d964:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40d968:	68ba      	ldr	r2, [r7, #8]
  40d96a:	4b32      	ldr	r3, [pc, #200]	; (40da34 <pio_configure_pin_group+0x118>)
  40d96c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40d96e:	687b      	ldr	r3, [r7, #4]
  40d970:	f003 0301 	and.w	r3, r3, #1
  40d974:	68f8      	ldr	r0, [r7, #12]
  40d976:	68b9      	ldr	r1, [r7, #8]
  40d978:	461a      	mov	r2, r3
  40d97a:	4b2f      	ldr	r3, [pc, #188]	; (40da38 <pio_configure_pin_group+0x11c>)
  40d97c:	4798      	blx	r3
		break;
  40d97e:	e054      	b.n	40da2a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40d980:	68f8      	ldr	r0, [r7, #12]
  40d982:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40d986:	68ba      	ldr	r2, [r7, #8]
  40d988:	4b2a      	ldr	r3, [pc, #168]	; (40da34 <pio_configure_pin_group+0x118>)
  40d98a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40d98c:	687b      	ldr	r3, [r7, #4]
  40d98e:	f003 0301 	and.w	r3, r3, #1
  40d992:	68f8      	ldr	r0, [r7, #12]
  40d994:	68b9      	ldr	r1, [r7, #8]
  40d996:	461a      	mov	r2, r3
  40d998:	4b27      	ldr	r3, [pc, #156]	; (40da38 <pio_configure_pin_group+0x11c>)
  40d99a:	4798      	blx	r3
		break;
  40d99c:	e045      	b.n	40da2a <pio_configure_pin_group+0x10e>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40d99e:	68f8      	ldr	r0, [r7, #12]
  40d9a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40d9a4:	68ba      	ldr	r2, [r7, #8]
  40d9a6:	4b23      	ldr	r3, [pc, #140]	; (40da34 <pio_configure_pin_group+0x118>)
  40d9a8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40d9aa:	687b      	ldr	r3, [r7, #4]
  40d9ac:	f003 0301 	and.w	r3, r3, #1
  40d9b0:	68f8      	ldr	r0, [r7, #12]
  40d9b2:	68b9      	ldr	r1, [r7, #8]
  40d9b4:	461a      	mov	r2, r3
  40d9b6:	4b20      	ldr	r3, [pc, #128]	; (40da38 <pio_configure_pin_group+0x11c>)
  40d9b8:	4798      	blx	r3
		break;
  40d9ba:	e036      	b.n	40da2a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40d9bc:	68f8      	ldr	r0, [r7, #12]
  40d9be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40d9c2:	68ba      	ldr	r2, [r7, #8]
  40d9c4:	4b1b      	ldr	r3, [pc, #108]	; (40da34 <pio_configure_pin_group+0x118>)
  40d9c6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40d9c8:	687b      	ldr	r3, [r7, #4]
  40d9ca:	f003 0301 	and.w	r3, r3, #1
  40d9ce:	68f8      	ldr	r0, [r7, #12]
  40d9d0:	68b9      	ldr	r1, [r7, #8]
  40d9d2:	461a      	mov	r2, r3
  40d9d4:	4b18      	ldr	r3, [pc, #96]	; (40da38 <pio_configure_pin_group+0x11c>)
  40d9d6:	4798      	blx	r3
		break;
  40d9d8:	e027      	b.n	40da2a <pio_configure_pin_group+0x10e>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40d9da:	68f8      	ldr	r0, [r7, #12]
  40d9dc:	68b9      	ldr	r1, [r7, #8]
  40d9de:	687a      	ldr	r2, [r7, #4]
  40d9e0:	4b16      	ldr	r3, [pc, #88]	; (40da3c <pio_configure_pin_group+0x120>)
  40d9e2:	4798      	blx	r3
		break;
  40d9e4:	e021      	b.n	40da2a <pio_configure_pin_group+0x10e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40d9e6:	687b      	ldr	r3, [r7, #4]
  40d9e8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40d9ec:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40d9f0:	bf14      	ite	ne
  40d9f2:	2300      	movne	r3, #0
  40d9f4:	2301      	moveq	r3, #1
  40d9f6:	b2db      	uxtb	r3, r3
  40d9f8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40d9fa:	687b      	ldr	r3, [r7, #4]
  40d9fc:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40da00:	2b00      	cmp	r3, #0
  40da02:	bf0c      	ite	eq
  40da04:	2300      	moveq	r3, #0
  40da06:	2301      	movne	r3, #1
  40da08:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40da0a:	6879      	ldr	r1, [r7, #4]
  40da0c:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40da10:	2900      	cmp	r1, #0
  40da12:	bf0c      	ite	eq
  40da14:	2100      	moveq	r1, #0
  40da16:	2101      	movne	r1, #1
  40da18:	b2c9      	uxtb	r1, r1
  40da1a:	9100      	str	r1, [sp, #0]
  40da1c:	68f8      	ldr	r0, [r7, #12]
  40da1e:	68b9      	ldr	r1, [r7, #8]
  40da20:	4c07      	ldr	r4, [pc, #28]	; (40da40 <pio_configure_pin_group+0x124>)
  40da22:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40da24:	e001      	b.n	40da2a <pio_configure_pin_group+0x10e>

	default:
		return 0;
  40da26:	2300      	movs	r3, #0
  40da28:	e000      	b.n	40da2c <pio_configure_pin_group+0x110>
	}

	return 1;
  40da2a:	2301      	movs	r3, #1
}
  40da2c:	4618      	mov	r0, r3
  40da2e:	3714      	adds	r7, #20
  40da30:	46bd      	mov	sp, r7
  40da32:	bd90      	pop	{r4, r7, pc}
  40da34:	0040d3f1 	.word	0x0040d3f1
  40da38:	0040d3c5 	.word	0x0040d3c5
  40da3c:	0040d501 	.word	0x0040d501
  40da40:	0040d57d 	.word	0x0040d57d

0040da44 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40da44:	b480      	push	{r7}
  40da46:	b085      	sub	sp, #20
  40da48:	af00      	add	r7, sp, #0
  40da4a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40da4c:	687b      	ldr	r3, [r7, #4]
  40da4e:	095b      	lsrs	r3, r3, #5
  40da50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40da54:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40da58:	025b      	lsls	r3, r3, #9
  40da5a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40da5c:	68fb      	ldr	r3, [r7, #12]
}
  40da5e:	4618      	mov	r0, r3
  40da60:	3714      	adds	r7, #20
  40da62:	46bd      	mov	sp, r7
  40da64:	f85d 7b04 	ldr.w	r7, [sp], #4
  40da68:	4770      	bx	lr
  40da6a:	bf00      	nop

0040da6c <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  40da6c:	b480      	push	{r7}
  40da6e:	b085      	sub	sp, #20
  40da70:	af00      	add	r7, sp, #0
  40da72:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  40da74:	687b      	ldr	r3, [r7, #4]
  40da76:	095b      	lsrs	r3, r3, #5
  40da78:	330b      	adds	r3, #11
  40da7a:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  40da7c:	68fb      	ldr	r3, [r7, #12]
}
  40da7e:	4618      	mov	r0, r3
  40da80:	3714      	adds	r7, #20
  40da82:	46bd      	mov	sp, r7
  40da84:	f85d 7b04 	ldr.w	r7, [sp], #4
  40da88:	4770      	bx	lr
  40da8a:	bf00      	nop

0040da8c <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  40da8c:	b480      	push	{r7}
  40da8e:	b085      	sub	sp, #20
  40da90:	af00      	add	r7, sp, #0
  40da92:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  40da94:	687b      	ldr	r3, [r7, #4]
  40da96:	f003 031f 	and.w	r3, r3, #31
  40da9a:	2201      	movs	r2, #1
  40da9c:	fa02 f303 	lsl.w	r3, r2, r3
  40daa0:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  40daa2:	68fb      	ldr	r3, [r7, #12]
}
  40daa4:	4618      	mov	r0, r3
  40daa6:	3714      	adds	r7, #20
  40daa8:	46bd      	mov	sp, r7
  40daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  40daae:	4770      	bx	lr

0040dab0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40dab0:	b580      	push	{r7, lr}
  40dab2:	b084      	sub	sp, #16
  40dab4:	af00      	add	r7, sp, #0
  40dab6:	6078      	str	r0, [r7, #4]
  40dab8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40daba:	6878      	ldr	r0, [r7, #4]
  40dabc:	4b2a      	ldr	r3, [pc, #168]	; (40db68 <pio_handler_process+0xb8>)
  40dabe:	4798      	blx	r3
  40dac0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40dac2:	6878      	ldr	r0, [r7, #4]
  40dac4:	4b29      	ldr	r3, [pc, #164]	; (40db6c <pio_handler_process+0xbc>)
  40dac6:	4798      	blx	r3
  40dac8:	4603      	mov	r3, r0
  40daca:	68fa      	ldr	r2, [r7, #12]
  40dacc:	4013      	ands	r3, r2
  40dace:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40dad0:	68fb      	ldr	r3, [r7, #12]
  40dad2:	2b00      	cmp	r3, #0
  40dad4:	d039      	beq.n	40db4a <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  40dad6:	2300      	movs	r3, #0
  40dad8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40dada:	e033      	b.n	40db44 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40dadc:	4a24      	ldr	r2, [pc, #144]	; (40db70 <pio_handler_process+0xc0>)
  40dade:	68bb      	ldr	r3, [r7, #8]
  40dae0:	011b      	lsls	r3, r3, #4
  40dae2:	4413      	add	r3, r2
  40dae4:	681a      	ldr	r2, [r3, #0]
  40dae6:	683b      	ldr	r3, [r7, #0]
  40dae8:	429a      	cmp	r2, r3
  40daea:	d124      	bne.n	40db36 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40daec:	4a20      	ldr	r2, [pc, #128]	; (40db70 <pio_handler_process+0xc0>)
  40daee:	68bb      	ldr	r3, [r7, #8]
  40daf0:	011b      	lsls	r3, r3, #4
  40daf2:	4413      	add	r3, r2
  40daf4:	685a      	ldr	r2, [r3, #4]
  40daf6:	68fb      	ldr	r3, [r7, #12]
  40daf8:	4013      	ands	r3, r2
  40dafa:	2b00      	cmp	r3, #0
  40dafc:	d01b      	beq.n	40db36 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40dafe:	4a1c      	ldr	r2, [pc, #112]	; (40db70 <pio_handler_process+0xc0>)
  40db00:	68bb      	ldr	r3, [r7, #8]
  40db02:	011b      	lsls	r3, r3, #4
  40db04:	4413      	add	r3, r2
  40db06:	3308      	adds	r3, #8
  40db08:	685b      	ldr	r3, [r3, #4]
  40db0a:	4919      	ldr	r1, [pc, #100]	; (40db70 <pio_handler_process+0xc0>)
  40db0c:	68ba      	ldr	r2, [r7, #8]
  40db0e:	0112      	lsls	r2, r2, #4
  40db10:	440a      	add	r2, r1
  40db12:	6811      	ldr	r1, [r2, #0]
  40db14:	4816      	ldr	r0, [pc, #88]	; (40db70 <pio_handler_process+0xc0>)
  40db16:	68ba      	ldr	r2, [r7, #8]
  40db18:	0112      	lsls	r2, r2, #4
  40db1a:	4402      	add	r2, r0
  40db1c:	6852      	ldr	r2, [r2, #4]
  40db1e:	4608      	mov	r0, r1
  40db20:	4611      	mov	r1, r2
  40db22:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40db24:	4a12      	ldr	r2, [pc, #72]	; (40db70 <pio_handler_process+0xc0>)
  40db26:	68bb      	ldr	r3, [r7, #8]
  40db28:	011b      	lsls	r3, r3, #4
  40db2a:	4413      	add	r3, r2
  40db2c:	685b      	ldr	r3, [r3, #4]
  40db2e:	43db      	mvns	r3, r3
  40db30:	68fa      	ldr	r2, [r7, #12]
  40db32:	4013      	ands	r3, r2
  40db34:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40db36:	68bb      	ldr	r3, [r7, #8]
  40db38:	3301      	adds	r3, #1
  40db3a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40db3c:	68bb      	ldr	r3, [r7, #8]
  40db3e:	2b0b      	cmp	r3, #11
  40db40:	d900      	bls.n	40db44 <pio_handler_process+0x94>
				break;
  40db42:	e002      	b.n	40db4a <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40db44:	68fb      	ldr	r3, [r7, #12]
  40db46:	2b00      	cmp	r3, #0
  40db48:	d1c8      	bne.n	40dadc <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40db4a:	4b0a      	ldr	r3, [pc, #40]	; (40db74 <pio_handler_process+0xc4>)
  40db4c:	681b      	ldr	r3, [r3, #0]
  40db4e:	2b00      	cmp	r3, #0
  40db50:	d007      	beq.n	40db62 <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  40db52:	4b09      	ldr	r3, [pc, #36]	; (40db78 <pio_handler_process+0xc8>)
  40db54:	681b      	ldr	r3, [r3, #0]
  40db56:	2b00      	cmp	r3, #0
  40db58:	d003      	beq.n	40db62 <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  40db5a:	4b07      	ldr	r3, [pc, #28]	; (40db78 <pio_handler_process+0xc8>)
  40db5c:	681b      	ldr	r3, [r3, #0]
  40db5e:	6878      	ldr	r0, [r7, #4]
  40db60:	4798      	blx	r3
		}
	}
#endif
}
  40db62:	3710      	adds	r7, #16
  40db64:	46bd      	mov	sp, r7
  40db66:	bd80      	pop	{r7, pc}
  40db68:	0040d689 	.word	0x0040d689
  40db6c:	0040d6a1 	.word	0x0040d6a1
  40db70:	20001e70 	.word	0x20001e70
  40db74:	20003494 	.word	0x20003494
  40db78:	20001f34 	.word	0x20001f34

0040db7c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40db7c:	b580      	push	{r7, lr}
  40db7e:	b086      	sub	sp, #24
  40db80:	af00      	add	r7, sp, #0
  40db82:	60f8      	str	r0, [r7, #12]
  40db84:	60b9      	str	r1, [r7, #8]
  40db86:	607a      	str	r2, [r7, #4]
  40db88:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40db8a:	4b13      	ldr	r3, [pc, #76]	; (40dbd8 <pio_handler_set+0x5c>)
  40db8c:	681b      	ldr	r3, [r3, #0]
  40db8e:	2b0b      	cmp	r3, #11
  40db90:	d901      	bls.n	40db96 <pio_handler_set+0x1a>
		return 1;
  40db92:	2301      	movs	r3, #1
  40db94:	e01c      	b.n	40dbd0 <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40db96:	4b10      	ldr	r3, [pc, #64]	; (40dbd8 <pio_handler_set+0x5c>)
  40db98:	681b      	ldr	r3, [r3, #0]
  40db9a:	011a      	lsls	r2, r3, #4
  40db9c:	4b0f      	ldr	r3, [pc, #60]	; (40dbdc <pio_handler_set+0x60>)
  40db9e:	4413      	add	r3, r2
  40dba0:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  40dba2:	697b      	ldr	r3, [r7, #20]
  40dba4:	68ba      	ldr	r2, [r7, #8]
  40dba6:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40dba8:	697b      	ldr	r3, [r7, #20]
  40dbaa:	687a      	ldr	r2, [r7, #4]
  40dbac:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40dbae:	697b      	ldr	r3, [r7, #20]
  40dbb0:	683a      	ldr	r2, [r7, #0]
  40dbb2:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40dbb4:	697b      	ldr	r3, [r7, #20]
  40dbb6:	6a3a      	ldr	r2, [r7, #32]
  40dbb8:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  40dbba:	4b07      	ldr	r3, [pc, #28]	; (40dbd8 <pio_handler_set+0x5c>)
  40dbbc:	681b      	ldr	r3, [r3, #0]
  40dbbe:	1c5a      	adds	r2, r3, #1
  40dbc0:	4b05      	ldr	r3, [pc, #20]	; (40dbd8 <pio_handler_set+0x5c>)
  40dbc2:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40dbc4:	68f8      	ldr	r0, [r7, #12]
  40dbc6:	6879      	ldr	r1, [r7, #4]
  40dbc8:	683a      	ldr	r2, [r7, #0]
  40dbca:	4b05      	ldr	r3, [pc, #20]	; (40dbe0 <pio_handler_set+0x64>)
  40dbcc:	4798      	blx	r3

	return 0;
  40dbce:	2300      	movs	r3, #0
}
  40dbd0:	4618      	mov	r0, r3
  40dbd2:	3718      	adds	r7, #24
  40dbd4:	46bd      	mov	sp, r7
  40dbd6:	bd80      	pop	{r7, pc}
  40dbd8:	20001f30 	.word	0x20001f30
  40dbdc:	20001e70 	.word	0x20001e70
  40dbe0:	0040d5e1 	.word	0x0040d5e1

0040dbe4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40dbe4:	b580      	push	{r7, lr}
  40dbe6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40dbe8:	4802      	ldr	r0, [pc, #8]	; (40dbf4 <PIOA_Handler+0x10>)
  40dbea:	210b      	movs	r1, #11
  40dbec:	4b02      	ldr	r3, [pc, #8]	; (40dbf8 <PIOA_Handler+0x14>)
  40dbee:	4798      	blx	r3
}
  40dbf0:	bd80      	pop	{r7, pc}
  40dbf2:	bf00      	nop
  40dbf4:	400e0e00 	.word	0x400e0e00
  40dbf8:	0040dab1 	.word	0x0040dab1

0040dbfc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40dbfc:	b580      	push	{r7, lr}
  40dbfe:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40dc00:	4802      	ldr	r0, [pc, #8]	; (40dc0c <PIOB_Handler+0x10>)
  40dc02:	210c      	movs	r1, #12
  40dc04:	4b02      	ldr	r3, [pc, #8]	; (40dc10 <PIOB_Handler+0x14>)
  40dc06:	4798      	blx	r3
}
  40dc08:	bd80      	pop	{r7, pc}
  40dc0a:	bf00      	nop
  40dc0c:	400e1000 	.word	0x400e1000
  40dc10:	0040dab1 	.word	0x0040dab1

0040dc14 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40dc14:	b480      	push	{r7}
  40dc16:	b085      	sub	sp, #20
  40dc18:	af00      	add	r7, sp, #0
  40dc1a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40dc1c:	4b1d      	ldr	r3, [pc, #116]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc1e:	4a1d      	ldr	r2, [pc, #116]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc20:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40dc22:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40dc26:	687a      	ldr	r2, [r7, #4]
  40dc28:	430a      	orrs	r2, r1
  40dc2a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40dc2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40dc30:	60fb      	str	r3, [r7, #12]
  40dc32:	e007      	b.n	40dc44 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40dc34:	68fb      	ldr	r3, [r7, #12]
  40dc36:	2b00      	cmp	r3, #0
  40dc38:	d101      	bne.n	40dc3e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40dc3a:	2301      	movs	r3, #1
  40dc3c:	e023      	b.n	40dc86 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40dc3e:	68fb      	ldr	r3, [r7, #12]
  40dc40:	3b01      	subs	r3, #1
  40dc42:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40dc44:	4b13      	ldr	r3, [pc, #76]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40dc48:	f003 0308 	and.w	r3, r3, #8
  40dc4c:	2b00      	cmp	r3, #0
  40dc4e:	d0f1      	beq.n	40dc34 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40dc50:	4b10      	ldr	r3, [pc, #64]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc52:	4a10      	ldr	r2, [pc, #64]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc54:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40dc56:	f022 0203 	bic.w	r2, r2, #3
  40dc5a:	f042 0202 	orr.w	r2, r2, #2
  40dc5e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40dc60:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40dc64:	60fb      	str	r3, [r7, #12]
  40dc66:	e007      	b.n	40dc78 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40dc68:	68fb      	ldr	r3, [r7, #12]
  40dc6a:	2b00      	cmp	r3, #0
  40dc6c:	d101      	bne.n	40dc72 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40dc6e:	2301      	movs	r3, #1
  40dc70:	e009      	b.n	40dc86 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40dc72:	68fb      	ldr	r3, [r7, #12]
  40dc74:	3b01      	subs	r3, #1
  40dc76:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40dc78:	4b06      	ldr	r3, [pc, #24]	; (40dc94 <pmc_switch_mck_to_pllack+0x80>)
  40dc7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40dc7c:	f003 0308 	and.w	r3, r3, #8
  40dc80:	2b00      	cmp	r3, #0
  40dc82:	d0f1      	beq.n	40dc68 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40dc84:	2300      	movs	r3, #0
}
  40dc86:	4618      	mov	r0, r3
  40dc88:	3714      	adds	r7, #20
  40dc8a:	46bd      	mov	sp, r7
  40dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dc90:	4770      	bx	lr
  40dc92:	bf00      	nop
  40dc94:	400e0400 	.word	0x400e0400

0040dc98 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40dc98:	b480      	push	{r7}
  40dc9a:	b083      	sub	sp, #12
  40dc9c:	af00      	add	r7, sp, #0
  40dc9e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40dca0:	687b      	ldr	r3, [r7, #4]
  40dca2:	2b01      	cmp	r3, #1
  40dca4:	d107      	bne.n	40dcb6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40dca6:	4a08      	ldr	r2, [pc, #32]	; (40dcc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40dca8:	4b07      	ldr	r3, [pc, #28]	; (40dcc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40dcaa:	689b      	ldr	r3, [r3, #8]
  40dcac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40dcb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40dcb4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40dcb6:	4b04      	ldr	r3, [pc, #16]	; (40dcc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40dcb8:	4a04      	ldr	r2, [pc, #16]	; (40dccc <pmc_switch_sclk_to_32kxtal+0x34>)
  40dcba:	601a      	str	r2, [r3, #0]
}
  40dcbc:	370c      	adds	r7, #12
  40dcbe:	46bd      	mov	sp, r7
  40dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dcc4:	4770      	bx	lr
  40dcc6:	bf00      	nop
  40dcc8:	400e1410 	.word	0x400e1410
  40dccc:	a5000008 	.word	0xa5000008

0040dcd0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40dcd0:	b480      	push	{r7}
  40dcd2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40dcd4:	4b09      	ldr	r3, [pc, #36]	; (40dcfc <pmc_osc_is_ready_32kxtal+0x2c>)
  40dcd6:	695b      	ldr	r3, [r3, #20]
  40dcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40dcdc:	2b00      	cmp	r3, #0
  40dcde:	d007      	beq.n	40dcf0 <pmc_osc_is_ready_32kxtal+0x20>
  40dce0:	4b07      	ldr	r3, [pc, #28]	; (40dd00 <pmc_osc_is_ready_32kxtal+0x30>)
  40dce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40dce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40dce8:	2b00      	cmp	r3, #0
  40dcea:	d001      	beq.n	40dcf0 <pmc_osc_is_ready_32kxtal+0x20>
  40dcec:	2301      	movs	r3, #1
  40dcee:	e000      	b.n	40dcf2 <pmc_osc_is_ready_32kxtal+0x22>
  40dcf0:	2300      	movs	r3, #0
}
  40dcf2:	4618      	mov	r0, r3
  40dcf4:	46bd      	mov	sp, r7
  40dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dcfa:	4770      	bx	lr
  40dcfc:	400e1410 	.word	0x400e1410
  40dd00:	400e0400 	.word	0x400e0400

0040dd04 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40dd04:	b480      	push	{r7}
  40dd06:	b083      	sub	sp, #12
  40dd08:	af00      	add	r7, sp, #0
  40dd0a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40dd0c:	4a18      	ldr	r2, [pc, #96]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd0e:	4b18      	ldr	r3, [pc, #96]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd10:	6a1b      	ldr	r3, [r3, #32]
  40dd12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40dd16:	f043 0308 	orr.w	r3, r3, #8
  40dd1a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40dd1c:	bf00      	nop
  40dd1e:	4b14      	ldr	r3, [pc, #80]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40dd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40dd26:	2b00      	cmp	r3, #0
  40dd28:	d0f9      	beq.n	40dd1e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40dd2a:	4a11      	ldr	r2, [pc, #68]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd2c:	4b10      	ldr	r3, [pc, #64]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd2e:	6a1b      	ldr	r3, [r3, #32]
  40dd30:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40dd34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40dd38:	6879      	ldr	r1, [r7, #4]
  40dd3a:	430b      	orrs	r3, r1
  40dd3c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40dd40:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40dd42:	bf00      	nop
  40dd44:	4b0a      	ldr	r3, [pc, #40]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40dd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40dd4c:	2b00      	cmp	r3, #0
  40dd4e:	d0f9      	beq.n	40dd44 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40dd50:	4a07      	ldr	r2, [pc, #28]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd52:	4b07      	ldr	r3, [pc, #28]	; (40dd70 <pmc_switch_mainck_to_fastrc+0x6c>)
  40dd54:	6a1b      	ldr	r3, [r3, #32]
  40dd56:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40dd5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40dd5e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40dd62:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40dd64:	370c      	adds	r7, #12
  40dd66:	46bd      	mov	sp, r7
  40dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dd6c:	4770      	bx	lr
  40dd6e:	bf00      	nop
  40dd70:	400e0400 	.word	0x400e0400

0040dd74 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40dd74:	b480      	push	{r7}
  40dd76:	b083      	sub	sp, #12
  40dd78:	af00      	add	r7, sp, #0
  40dd7a:	6078      	str	r0, [r7, #4]
  40dd7c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40dd7e:	687b      	ldr	r3, [r7, #4]
  40dd80:	2b00      	cmp	r3, #0
  40dd82:	d008      	beq.n	40dd96 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40dd84:	4916      	ldr	r1, [pc, #88]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40dd86:	4b16      	ldr	r3, [pc, #88]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40dd88:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40dd8a:	4a16      	ldr	r2, [pc, #88]	; (40dde4 <pmc_switch_mainck_to_xtal+0x70>)
  40dd8c:	401a      	ands	r2, r3
  40dd8e:	4b16      	ldr	r3, [pc, #88]	; (40dde8 <pmc_switch_mainck_to_xtal+0x74>)
  40dd90:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40dd92:	620b      	str	r3, [r1, #32]
  40dd94:	e01e      	b.n	40ddd4 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40dd96:	4a12      	ldr	r2, [pc, #72]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40dd98:	4b11      	ldr	r3, [pc, #68]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40dd9a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40dd9c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40dda0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40dda4:	6839      	ldr	r1, [r7, #0]
  40dda6:	0209      	lsls	r1, r1, #8
  40dda8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40ddaa:	430b      	orrs	r3, r1
  40ddac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40ddb0:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40ddb4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40ddb6:	bf00      	nop
  40ddb8:	4b09      	ldr	r3, [pc, #36]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40ddba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40ddbc:	f003 0301 	and.w	r3, r3, #1
  40ddc0:	2b00      	cmp	r3, #0
  40ddc2:	d0f9      	beq.n	40ddb8 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40ddc4:	4a06      	ldr	r2, [pc, #24]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40ddc6:	4b06      	ldr	r3, [pc, #24]	; (40dde0 <pmc_switch_mainck_to_xtal+0x6c>)
  40ddc8:	6a1b      	ldr	r3, [r3, #32]
  40ddca:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40ddce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40ddd2:	6213      	str	r3, [r2, #32]
	}
}
  40ddd4:	370c      	adds	r7, #12
  40ddd6:	46bd      	mov	sp, r7
  40ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dddc:	4770      	bx	lr
  40ddde:	bf00      	nop
  40dde0:	400e0400 	.word	0x400e0400
  40dde4:	fec8fffc 	.word	0xfec8fffc
  40dde8:	01370002 	.word	0x01370002

0040ddec <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40ddec:	b480      	push	{r7}
  40ddee:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40ddf0:	4b04      	ldr	r3, [pc, #16]	; (40de04 <pmc_osc_is_ready_mainck+0x18>)
  40ddf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40ddf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40ddf8:	4618      	mov	r0, r3
  40ddfa:	46bd      	mov	sp, r7
  40ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40de00:	4770      	bx	lr
  40de02:	bf00      	nop
  40de04:	400e0400 	.word	0x400e0400

0040de08 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40de08:	b480      	push	{r7}
  40de0a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40de0c:	4b03      	ldr	r3, [pc, #12]	; (40de1c <pmc_disable_pllack+0x14>)
  40de0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40de12:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40de14:	46bd      	mov	sp, r7
  40de16:	f85d 7b04 	ldr.w	r7, [sp], #4
  40de1a:	4770      	bx	lr
  40de1c:	400e0400 	.word	0x400e0400

0040de20 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40de20:	b480      	push	{r7}
  40de22:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40de24:	4b04      	ldr	r3, [pc, #16]	; (40de38 <pmc_is_locked_pllack+0x18>)
  40de26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40de28:	f003 0302 	and.w	r3, r3, #2
}
  40de2c:	4618      	mov	r0, r3
  40de2e:	46bd      	mov	sp, r7
  40de30:	f85d 7b04 	ldr.w	r7, [sp], #4
  40de34:	4770      	bx	lr
  40de36:	bf00      	nop
  40de38:	400e0400 	.word	0x400e0400

0040de3c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40de3c:	b480      	push	{r7}
  40de3e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40de40:	4b03      	ldr	r3, [pc, #12]	; (40de50 <pmc_disable_pllbck+0x14>)
  40de42:	2200      	movs	r2, #0
  40de44:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40de46:	46bd      	mov	sp, r7
  40de48:	f85d 7b04 	ldr.w	r7, [sp], #4
  40de4c:	4770      	bx	lr
  40de4e:	bf00      	nop
  40de50:	400e0400 	.word	0x400e0400

0040de54 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40de54:	b480      	push	{r7}
  40de56:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40de58:	4b04      	ldr	r3, [pc, #16]	; (40de6c <pmc_is_locked_pllbck+0x18>)
  40de5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40de5c:	f003 0304 	and.w	r3, r3, #4
}
  40de60:	4618      	mov	r0, r3
  40de62:	46bd      	mov	sp, r7
  40de64:	f85d 7b04 	ldr.w	r7, [sp], #4
  40de68:	4770      	bx	lr
  40de6a:	bf00      	nop
  40de6c:	400e0400 	.word	0x400e0400

0040de70 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40de70:	b480      	push	{r7}
  40de72:	b083      	sub	sp, #12
  40de74:	af00      	add	r7, sp, #0
  40de76:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40de78:	687b      	ldr	r3, [r7, #4]
  40de7a:	2b22      	cmp	r3, #34	; 0x22
  40de7c:	d901      	bls.n	40de82 <pmc_enable_periph_clk+0x12>
		return 1;
  40de7e:	2301      	movs	r3, #1
  40de80:	e02f      	b.n	40dee2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40de82:	687b      	ldr	r3, [r7, #4]
  40de84:	2b1f      	cmp	r3, #31
  40de86:	d813      	bhi.n	40deb0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40de88:	4b19      	ldr	r3, [pc, #100]	; (40def0 <pmc_enable_periph_clk+0x80>)
  40de8a:	699a      	ldr	r2, [r3, #24]
  40de8c:	687b      	ldr	r3, [r7, #4]
  40de8e:	2101      	movs	r1, #1
  40de90:	fa01 f303 	lsl.w	r3, r1, r3
  40de94:	401a      	ands	r2, r3
  40de96:	687b      	ldr	r3, [r7, #4]
  40de98:	2101      	movs	r1, #1
  40de9a:	fa01 f303 	lsl.w	r3, r1, r3
  40de9e:	429a      	cmp	r2, r3
  40dea0:	d01e      	beq.n	40dee0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40dea2:	4b13      	ldr	r3, [pc, #76]	; (40def0 <pmc_enable_periph_clk+0x80>)
  40dea4:	687a      	ldr	r2, [r7, #4]
  40dea6:	2101      	movs	r1, #1
  40dea8:	fa01 f202 	lsl.w	r2, r1, r2
  40deac:	611a      	str	r2, [r3, #16]
  40deae:	e017      	b.n	40dee0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40deb0:	687b      	ldr	r3, [r7, #4]
  40deb2:	3b20      	subs	r3, #32
  40deb4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40deb6:	4b0e      	ldr	r3, [pc, #56]	; (40def0 <pmc_enable_periph_clk+0x80>)
  40deb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40debc:	687b      	ldr	r3, [r7, #4]
  40debe:	2101      	movs	r1, #1
  40dec0:	fa01 f303 	lsl.w	r3, r1, r3
  40dec4:	401a      	ands	r2, r3
  40dec6:	687b      	ldr	r3, [r7, #4]
  40dec8:	2101      	movs	r1, #1
  40deca:	fa01 f303 	lsl.w	r3, r1, r3
  40dece:	429a      	cmp	r2, r3
  40ded0:	d006      	beq.n	40dee0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40ded2:	4b07      	ldr	r3, [pc, #28]	; (40def0 <pmc_enable_periph_clk+0x80>)
  40ded4:	687a      	ldr	r2, [r7, #4]
  40ded6:	2101      	movs	r1, #1
  40ded8:	fa01 f202 	lsl.w	r2, r1, r2
  40dedc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40dee0:	2300      	movs	r3, #0
}
  40dee2:	4618      	mov	r0, r3
  40dee4:	370c      	adds	r7, #12
  40dee6:	46bd      	mov	sp, r7
  40dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40deec:	4770      	bx	lr
  40deee:	bf00      	nop
  40def0:	400e0400 	.word	0x400e0400

0040def4 <pmc_enable_sleepmode>:
 * \param uc_type 0 for wait for interrupt, 1 for wait for event.
 * \note For SAM4S, SAM4C, SAM4CM, SAM4CP, SAMV71 and SAM4E series,
 * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
 */
void pmc_enable_sleepmode(uint8_t uc_type)
{
  40def4:	b480      	push	{r7}
  40def6:	b083      	sub	sp, #12
  40def8:	af00      	add	r7, sp, #0
  40defa:	4603      	mov	r3, r0
  40defc:	71fb      	strb	r3, [r7, #7]
#if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
#endif
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
  40defe:	4b06      	ldr	r3, [pc, #24]	; (40df18 <pmc_enable_sleepmode+0x24>)
  40df00:	4a05      	ldr	r2, [pc, #20]	; (40df18 <pmc_enable_sleepmode+0x24>)
  40df02:	6912      	ldr	r2, [r2, #16]
  40df04:	f022 0204 	bic.w	r2, r2, #4
  40df08:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40df0a:	bf30      	wfi
		__WFI();
	} else {
		__WFE();
	}
#endif
}
  40df0c:	370c      	adds	r7, #12
  40df0e:	46bd      	mov	sp, r7
  40df10:	f85d 7b04 	ldr.w	r7, [sp], #4
  40df14:	4770      	bx	lr
  40df16:	bf00      	nop
  40df18:	e000ed00 	.word	0xe000ed00

0040df1c <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  40df1c:	b480      	push	{r7}
  40df1e:	b083      	sub	sp, #12
  40df20:	af00      	add	r7, sp, #0
  40df22:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40df24:	687b      	ldr	r3, [r7, #4]
  40df26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40df2a:	605a      	str	r2, [r3, #4]

}
  40df2c:	370c      	adds	r7, #12
  40df2e:	46bd      	mov	sp, r7
  40df30:	f85d 7b04 	ldr.w	r7, [sp], #4
  40df34:	4770      	bx	lr
  40df36:	bf00      	nop

0040df38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40df38:	b580      	push	{r7, lr}
  40df3a:	b084      	sub	sp, #16
  40df3c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40df3e:	4b27      	ldr	r3, [pc, #156]	; (40dfdc <Reset_Handler+0xa4>)
  40df40:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40df42:	4b27      	ldr	r3, [pc, #156]	; (40dfe0 <Reset_Handler+0xa8>)
  40df44:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40df46:	68fa      	ldr	r2, [r7, #12]
  40df48:	68bb      	ldr	r3, [r7, #8]
  40df4a:	429a      	cmp	r2, r3
  40df4c:	d90d      	bls.n	40df6a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40df4e:	e007      	b.n	40df60 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40df50:	68bb      	ldr	r3, [r7, #8]
  40df52:	1d1a      	adds	r2, r3, #4
  40df54:	60ba      	str	r2, [r7, #8]
  40df56:	68fa      	ldr	r2, [r7, #12]
  40df58:	1d11      	adds	r1, r2, #4
  40df5a:	60f9      	str	r1, [r7, #12]
  40df5c:	6812      	ldr	r2, [r2, #0]
  40df5e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40df60:	68ba      	ldr	r2, [r7, #8]
  40df62:	4b20      	ldr	r3, [pc, #128]	; (40dfe4 <Reset_Handler+0xac>)
  40df64:	429a      	cmp	r2, r3
  40df66:	d3f3      	bcc.n	40df50 <Reset_Handler+0x18>
  40df68:	e020      	b.n	40dfac <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40df6a:	68fa      	ldr	r2, [r7, #12]
  40df6c:	68bb      	ldr	r3, [r7, #8]
  40df6e:	429a      	cmp	r2, r3
  40df70:	d21c      	bcs.n	40dfac <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40df72:	4a1c      	ldr	r2, [pc, #112]	; (40dfe4 <Reset_Handler+0xac>)
  40df74:	4b1a      	ldr	r3, [pc, #104]	; (40dfe0 <Reset_Handler+0xa8>)
  40df76:	1ad3      	subs	r3, r2, r3
  40df78:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40df7a:	68fa      	ldr	r2, [r7, #12]
  40df7c:	687b      	ldr	r3, [r7, #4]
  40df7e:	4413      	add	r3, r2
  40df80:	3b04      	subs	r3, #4
  40df82:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40df84:	68ba      	ldr	r2, [r7, #8]
  40df86:	687b      	ldr	r3, [r7, #4]
  40df88:	4413      	add	r3, r2
  40df8a:	3b04      	subs	r3, #4
  40df8c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40df8e:	e00a      	b.n	40dfa6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40df90:	68bb      	ldr	r3, [r7, #8]
  40df92:	1f1a      	subs	r2, r3, #4
  40df94:	60ba      	str	r2, [r7, #8]
  40df96:	68fa      	ldr	r2, [r7, #12]
  40df98:	1f11      	subs	r1, r2, #4
  40df9a:	60f9      	str	r1, [r7, #12]
  40df9c:	6812      	ldr	r2, [r2, #0]
  40df9e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40dfa0:	687b      	ldr	r3, [r7, #4]
  40dfa2:	3b04      	subs	r3, #4
  40dfa4:	607b      	str	r3, [r7, #4]
  40dfa6:	687b      	ldr	r3, [r7, #4]
  40dfa8:	2b00      	cmp	r3, #0
  40dfaa:	d1f1      	bne.n	40df90 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40dfac:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40dfae:	4b0e      	ldr	r3, [pc, #56]	; (40dfe8 <Reset_Handler+0xb0>)
  40dfb0:	60bb      	str	r3, [r7, #8]
  40dfb2:	e004      	b.n	40dfbe <Reset_Handler+0x86>
		*pDest++ = 0;
  40dfb4:	68bb      	ldr	r3, [r7, #8]
  40dfb6:	1d1a      	adds	r2, r3, #4
  40dfb8:	60ba      	str	r2, [r7, #8]
  40dfba:	2200      	movs	r2, #0
  40dfbc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40dfbe:	68ba      	ldr	r2, [r7, #8]
  40dfc0:	4b0a      	ldr	r3, [pc, #40]	; (40dfec <Reset_Handler+0xb4>)
  40dfc2:	429a      	cmp	r2, r3
  40dfc4:	d3f6      	bcc.n	40dfb4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40dfc6:	4b0a      	ldr	r3, [pc, #40]	; (40dff0 <Reset_Handler+0xb8>)
  40dfc8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40dfca:	4b0a      	ldr	r3, [pc, #40]	; (40dff4 <Reset_Handler+0xbc>)
  40dfcc:	68fa      	ldr	r2, [r7, #12]
  40dfce:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40dfd0:	4b09      	ldr	r3, [pc, #36]	; (40dff8 <Reset_Handler+0xc0>)
  40dfd2:	4798      	blx	r3

	/* Branch to main function */
	main();
  40dfd4:	4b09      	ldr	r3, [pc, #36]	; (40dffc <Reset_Handler+0xc4>)
  40dfd6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40dfd8:	e7fe      	b.n	40dfd8 <Reset_Handler+0xa0>
  40dfda:	bf00      	nop
  40dfdc:	00419654 	.word	0x00419654
  40dfe0:	20000000 	.word	0x20000000
  40dfe4:	20000d94 	.word	0x20000d94
  40dfe8:	20000d94 	.word	0x20000d94
  40dfec:	2000349c 	.word	0x2000349c
  40dff0:	00400000 	.word	0x00400000
  40dff4:	e000ed00 	.word	0xe000ed00
  40dff8:	0040ea8d 	.word	0x0040ea8d
  40dffc:	0040e3e1 	.word	0x0040e3e1

0040e000 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40e000:	b480      	push	{r7}
  40e002:	af00      	add	r7, sp, #0
	while (1) {
	}
  40e004:	e7fe      	b.n	40e004 <Dummy_Handler+0x4>
  40e006:	bf00      	nop

0040e008 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40e008:	b480      	push	{r7}
  40e00a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40e00c:	4b5d      	ldr	r3, [pc, #372]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40e010:	f003 0303 	and.w	r3, r3, #3
  40e014:	2b03      	cmp	r3, #3
  40e016:	f200 8096 	bhi.w	40e146 <SystemCoreClockUpdate+0x13e>
  40e01a:	a101      	add	r1, pc, #4	; (adr r1, 40e020 <SystemCoreClockUpdate+0x18>)
  40e01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40e020:	0040e031 	.word	0x0040e031
  40e024:	0040e051 	.word	0x0040e051
  40e028:	0040e09b 	.word	0x0040e09b
  40e02c:	0040e09b 	.word	0x0040e09b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40e030:	4b55      	ldr	r3, [pc, #340]	; (40e188 <SystemCoreClockUpdate+0x180>)
  40e032:	695b      	ldr	r3, [r3, #20]
  40e034:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40e038:	2b00      	cmp	r3, #0
  40e03a:	d004      	beq.n	40e046 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40e03c:	4b53      	ldr	r3, [pc, #332]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e03e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40e042:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40e044:	e080      	b.n	40e148 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40e046:	4b51      	ldr	r3, [pc, #324]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e048:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40e04c:	601a      	str	r2, [r3, #0]
			}
		break;
  40e04e:	e07b      	b.n	40e148 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40e050:	4b4c      	ldr	r3, [pc, #304]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e052:	6a1b      	ldr	r3, [r3, #32]
  40e054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40e058:	2b00      	cmp	r3, #0
  40e05a:	d003      	beq.n	40e064 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40e05c:	4b4b      	ldr	r3, [pc, #300]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e05e:	4a4c      	ldr	r2, [pc, #304]	; (40e190 <SystemCoreClockUpdate+0x188>)
  40e060:	601a      	str	r2, [r3, #0]
  40e062:	e019      	b.n	40e098 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40e064:	4b49      	ldr	r3, [pc, #292]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e066:	4a4b      	ldr	r2, [pc, #300]	; (40e194 <SystemCoreClockUpdate+0x18c>)
  40e068:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40e06a:	4b46      	ldr	r3, [pc, #280]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e06c:	6a1b      	ldr	r3, [r3, #32]
  40e06e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40e072:	2b10      	cmp	r3, #16
  40e074:	d008      	beq.n	40e088 <SystemCoreClockUpdate+0x80>
  40e076:	2b20      	cmp	r3, #32
  40e078:	d00a      	beq.n	40e090 <SystemCoreClockUpdate+0x88>
  40e07a:	2b00      	cmp	r3, #0
  40e07c:	d000      	beq.n	40e080 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40e07e:	e00b      	b.n	40e098 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40e080:	4b42      	ldr	r3, [pc, #264]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e082:	4a44      	ldr	r2, [pc, #272]	; (40e194 <SystemCoreClockUpdate+0x18c>)
  40e084:	601a      	str	r2, [r3, #0]
			break;
  40e086:	e007      	b.n	40e098 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40e088:	4b40      	ldr	r3, [pc, #256]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e08a:	4a43      	ldr	r2, [pc, #268]	; (40e198 <SystemCoreClockUpdate+0x190>)
  40e08c:	601a      	str	r2, [r3, #0]
			break;
  40e08e:	e003      	b.n	40e098 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40e090:	4b3e      	ldr	r3, [pc, #248]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e092:	4a3f      	ldr	r2, [pc, #252]	; (40e190 <SystemCoreClockUpdate+0x188>)
  40e094:	601a      	str	r2, [r3, #0]
			break;
  40e096:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40e098:	e056      	b.n	40e148 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40e09a:	4b3a      	ldr	r3, [pc, #232]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e09c:	6a1b      	ldr	r3, [r3, #32]
  40e09e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40e0a2:	2b00      	cmp	r3, #0
  40e0a4:	d003      	beq.n	40e0ae <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40e0a6:	4b39      	ldr	r3, [pc, #228]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0a8:	4a39      	ldr	r2, [pc, #228]	; (40e190 <SystemCoreClockUpdate+0x188>)
  40e0aa:	601a      	str	r2, [r3, #0]
  40e0ac:	e019      	b.n	40e0e2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40e0ae:	4b37      	ldr	r3, [pc, #220]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0b0:	4a38      	ldr	r2, [pc, #224]	; (40e194 <SystemCoreClockUpdate+0x18c>)
  40e0b2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40e0b4:	4b33      	ldr	r3, [pc, #204]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e0b6:	6a1b      	ldr	r3, [r3, #32]
  40e0b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40e0bc:	2b10      	cmp	r3, #16
  40e0be:	d008      	beq.n	40e0d2 <SystemCoreClockUpdate+0xca>
  40e0c0:	2b20      	cmp	r3, #32
  40e0c2:	d00a      	beq.n	40e0da <SystemCoreClockUpdate+0xd2>
  40e0c4:	2b00      	cmp	r3, #0
  40e0c6:	d000      	beq.n	40e0ca <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40e0c8:	e00b      	b.n	40e0e2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40e0ca:	4b30      	ldr	r3, [pc, #192]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0cc:	4a31      	ldr	r2, [pc, #196]	; (40e194 <SystemCoreClockUpdate+0x18c>)
  40e0ce:	601a      	str	r2, [r3, #0]
					break;
  40e0d0:	e007      	b.n	40e0e2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40e0d2:	4b2e      	ldr	r3, [pc, #184]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0d4:	4a30      	ldr	r2, [pc, #192]	; (40e198 <SystemCoreClockUpdate+0x190>)
  40e0d6:	601a      	str	r2, [r3, #0]
					break;
  40e0d8:	e003      	b.n	40e0e2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40e0da:	4b2c      	ldr	r3, [pc, #176]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0dc:	4a2c      	ldr	r2, [pc, #176]	; (40e190 <SystemCoreClockUpdate+0x188>)
  40e0de:	601a      	str	r2, [r3, #0]
					break;
  40e0e0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40e0e2:	4b28      	ldr	r3, [pc, #160]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40e0e6:	f003 0303 	and.w	r3, r3, #3
  40e0ea:	2b02      	cmp	r3, #2
  40e0ec:	d115      	bne.n	40e11a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40e0ee:	4b25      	ldr	r3, [pc, #148]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e0f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40e0f2:	4b2a      	ldr	r3, [pc, #168]	; (40e19c <SystemCoreClockUpdate+0x194>)
  40e0f4:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40e0f6:	0c1b      	lsrs	r3, r3, #16
  40e0f8:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40e0fa:	4a24      	ldr	r2, [pc, #144]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e0fc:	6812      	ldr	r2, [r2, #0]
  40e0fe:	fb02 f203 	mul.w	r2, r2, r3
  40e102:	4b22      	ldr	r3, [pc, #136]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e104:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40e106:	4b21      	ldr	r3, [pc, #132]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e108:	681a      	ldr	r2, [r3, #0]
  40e10a:	4b1e      	ldr	r3, [pc, #120]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40e10e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40e110:	fbb2 f2f3 	udiv	r2, r2, r3
  40e114:	4b1d      	ldr	r3, [pc, #116]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e116:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40e118:	e016      	b.n	40e148 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40e11a:	4b1a      	ldr	r3, [pc, #104]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40e11e:	4b1f      	ldr	r3, [pc, #124]	; (40e19c <SystemCoreClockUpdate+0x194>)
  40e120:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40e122:	0c1b      	lsrs	r3, r3, #16
  40e124:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40e126:	4a19      	ldr	r2, [pc, #100]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e128:	6812      	ldr	r2, [r2, #0]
  40e12a:	fb02 f203 	mul.w	r2, r2, r3
  40e12e:	4b17      	ldr	r3, [pc, #92]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e130:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40e132:	4b16      	ldr	r3, [pc, #88]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e134:	681a      	ldr	r2, [r3, #0]
  40e136:	4b13      	ldr	r3, [pc, #76]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40e13a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40e13c:	fbb2 f2f3 	udiv	r2, r2, r3
  40e140:	4b12      	ldr	r3, [pc, #72]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e142:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40e144:	e000      	b.n	40e148 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40e146:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40e148:	4b0e      	ldr	r3, [pc, #56]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40e14c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40e150:	2b70      	cmp	r3, #112	; 0x70
  40e152:	d108      	bne.n	40e166 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  40e154:	4b0d      	ldr	r3, [pc, #52]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e156:	681a      	ldr	r2, [r3, #0]
  40e158:	4b11      	ldr	r3, [pc, #68]	; (40e1a0 <SystemCoreClockUpdate+0x198>)
  40e15a:	fba3 1302 	umull	r1, r3, r3, r2
  40e15e:	085a      	lsrs	r2, r3, #1
  40e160:	4b0a      	ldr	r3, [pc, #40]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e162:	601a      	str	r2, [r3, #0]
  40e164:	e009      	b.n	40e17a <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  40e166:	4b09      	ldr	r3, [pc, #36]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e168:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40e16a:	4b06      	ldr	r3, [pc, #24]	; (40e184 <SystemCoreClockUpdate+0x17c>)
  40e16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40e16e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40e172:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40e174:	40da      	lsrs	r2, r3
  40e176:	4b05      	ldr	r3, [pc, #20]	; (40e18c <SystemCoreClockUpdate+0x184>)
  40e178:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40e17a:	46bd      	mov	sp, r7
  40e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e180:	4770      	bx	lr
  40e182:	bf00      	nop
  40e184:	400e0400 	.word	0x400e0400
  40e188:	400e1410 	.word	0x400e1410
  40e18c:	200004ec 	.word	0x200004ec
  40e190:	00b71b00 	.word	0x00b71b00
  40e194:	003d0900 	.word	0x003d0900
  40e198:	007a1200 	.word	0x007a1200
  40e19c:	07ff0000 	.word	0x07ff0000
  40e1a0:	aaaaaaab 	.word	0xaaaaaaab

0040e1a4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40e1a4:	b480      	push	{r7}
  40e1a6:	b083      	sub	sp, #12
  40e1a8:	af00      	add	r7, sp, #0
  40e1aa:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40e1ac:	687a      	ldr	r2, [r7, #4]
  40e1ae:	4b18      	ldr	r3, [pc, #96]	; (40e210 <system_init_flash+0x6c>)
  40e1b0:	429a      	cmp	r2, r3
  40e1b2:	d804      	bhi.n	40e1be <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40e1b4:	4b17      	ldr	r3, [pc, #92]	; (40e214 <system_init_flash+0x70>)
  40e1b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40e1ba:	601a      	str	r2, [r3, #0]
  40e1bc:	e023      	b.n	40e206 <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40e1be:	687a      	ldr	r2, [r7, #4]
  40e1c0:	4b15      	ldr	r3, [pc, #84]	; (40e218 <system_init_flash+0x74>)
  40e1c2:	429a      	cmp	r2, r3
  40e1c4:	d803      	bhi.n	40e1ce <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40e1c6:	4b13      	ldr	r3, [pc, #76]	; (40e214 <system_init_flash+0x70>)
  40e1c8:	4a14      	ldr	r2, [pc, #80]	; (40e21c <system_init_flash+0x78>)
  40e1ca:	601a      	str	r2, [r3, #0]
  40e1cc:	e01b      	b.n	40e206 <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40e1ce:	687a      	ldr	r2, [r7, #4]
  40e1d0:	4b13      	ldr	r3, [pc, #76]	; (40e220 <system_init_flash+0x7c>)
  40e1d2:	429a      	cmp	r2, r3
  40e1d4:	d803      	bhi.n	40e1de <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40e1d6:	4b0f      	ldr	r3, [pc, #60]	; (40e214 <system_init_flash+0x70>)
  40e1d8:	4a12      	ldr	r2, [pc, #72]	; (40e224 <system_init_flash+0x80>)
  40e1da:	601a      	str	r2, [r3, #0]
  40e1dc:	e013      	b.n	40e206 <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40e1de:	687a      	ldr	r2, [r7, #4]
  40e1e0:	4b11      	ldr	r3, [pc, #68]	; (40e228 <system_init_flash+0x84>)
  40e1e2:	429a      	cmp	r2, r3
  40e1e4:	d803      	bhi.n	40e1ee <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40e1e6:	4b0b      	ldr	r3, [pc, #44]	; (40e214 <system_init_flash+0x70>)
  40e1e8:	4a10      	ldr	r2, [pc, #64]	; (40e22c <system_init_flash+0x88>)
  40e1ea:	601a      	str	r2, [r3, #0]
  40e1ec:	e00b      	b.n	40e206 <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40e1ee:	687a      	ldr	r2, [r7, #4]
  40e1f0:	4b0f      	ldr	r3, [pc, #60]	; (40e230 <system_init_flash+0x8c>)
  40e1f2:	429a      	cmp	r2, r3
  40e1f4:	d804      	bhi.n	40e200 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40e1f6:	4b07      	ldr	r3, [pc, #28]	; (40e214 <system_init_flash+0x70>)
  40e1f8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40e1fc:	601a      	str	r2, [r3, #0]
  40e1fe:	e002      	b.n	40e206 <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40e200:	4b04      	ldr	r3, [pc, #16]	; (40e214 <system_init_flash+0x70>)
  40e202:	4a0c      	ldr	r2, [pc, #48]	; (40e234 <system_init_flash+0x90>)
  40e204:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40e206:	370c      	adds	r7, #12
  40e208:	46bd      	mov	sp, r7
  40e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e20e:	4770      	bx	lr
  40e210:	01ba813f 	.word	0x01ba813f
  40e214:	400e0a00 	.word	0x400e0a00
  40e218:	0375027f 	.word	0x0375027f
  40e21c:	04000100 	.word	0x04000100
  40e220:	053ec5ff 	.word	0x053ec5ff
  40e224:	04000200 	.word	0x04000200
  40e228:	00a4cb7f 	.word	0x00a4cb7f
  40e22c:	04000300 	.word	0x04000300
  40e230:	07270dff 	.word	0x07270dff
  40e234:	04000500 	.word	0x04000500

0040e238 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40e238:	b480      	push	{r7}
  40e23a:	b085      	sub	sp, #20
  40e23c:	af00      	add	r7, sp, #0
  40e23e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40e240:	4b10      	ldr	r3, [pc, #64]	; (40e284 <_sbrk+0x4c>)
  40e242:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40e244:	4b10      	ldr	r3, [pc, #64]	; (40e288 <_sbrk+0x50>)
  40e246:	681b      	ldr	r3, [r3, #0]
  40e248:	2b00      	cmp	r3, #0
  40e24a:	d102      	bne.n	40e252 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40e24c:	4b0e      	ldr	r3, [pc, #56]	; (40e288 <_sbrk+0x50>)
  40e24e:	4a0f      	ldr	r2, [pc, #60]	; (40e28c <_sbrk+0x54>)
  40e250:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40e252:	4b0d      	ldr	r3, [pc, #52]	; (40e288 <_sbrk+0x50>)
  40e254:	681b      	ldr	r3, [r3, #0]
  40e256:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40e258:	68ba      	ldr	r2, [r7, #8]
  40e25a:	687b      	ldr	r3, [r7, #4]
  40e25c:	441a      	add	r2, r3
  40e25e:	68fb      	ldr	r3, [r7, #12]
  40e260:	429a      	cmp	r2, r3
  40e262:	dd02      	ble.n	40e26a <_sbrk+0x32>
		return (caddr_t) -1;	
  40e264:	f04f 33ff 	mov.w	r3, #4294967295
  40e268:	e006      	b.n	40e278 <_sbrk+0x40>
	}

	heap += incr;
  40e26a:	4b07      	ldr	r3, [pc, #28]	; (40e288 <_sbrk+0x50>)
  40e26c:	681a      	ldr	r2, [r3, #0]
  40e26e:	687b      	ldr	r3, [r7, #4]
  40e270:	441a      	add	r2, r3
  40e272:	4b05      	ldr	r3, [pc, #20]	; (40e288 <_sbrk+0x50>)
  40e274:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  40e276:	68bb      	ldr	r3, [r7, #8]
}
  40e278:	4618      	mov	r0, r3
  40e27a:	3714      	adds	r7, #20
  40e27c:	46bd      	mov	sp, r7
  40e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e282:	4770      	bx	lr
  40e284:	2000fffc 	.word	0x2000fffc
  40e288:	20001f38 	.word	0x20001f38
  40e28c:	200064a0 	.word	0x200064a0

0040e290 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40e290:	b480      	push	{r7}
  40e292:	b083      	sub	sp, #12
  40e294:	af00      	add	r7, sp, #0
  40e296:	6078      	str	r0, [r7, #4]
	return -1;
  40e298:	f04f 33ff 	mov.w	r3, #4294967295
}
  40e29c:	4618      	mov	r0, r3
  40e29e:	370c      	adds	r7, #12
  40e2a0:	46bd      	mov	sp, r7
  40e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e2a6:	4770      	bx	lr

0040e2a8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40e2a8:	b480      	push	{r7}
  40e2aa:	b083      	sub	sp, #12
  40e2ac:	af00      	add	r7, sp, #0
  40e2ae:	6078      	str	r0, [r7, #4]
  40e2b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40e2b2:	683b      	ldr	r3, [r7, #0]
  40e2b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40e2b8:	605a      	str	r2, [r3, #4]

	return 0;
  40e2ba:	2300      	movs	r3, #0
}
  40e2bc:	4618      	mov	r0, r3
  40e2be:	370c      	adds	r7, #12
  40e2c0:	46bd      	mov	sp, r7
  40e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e2c6:	4770      	bx	lr

0040e2c8 <_isatty>:

extern int _isatty(int file)
{
  40e2c8:	b480      	push	{r7}
  40e2ca:	b083      	sub	sp, #12
  40e2cc:	af00      	add	r7, sp, #0
  40e2ce:	6078      	str	r0, [r7, #4]
	return 1;
  40e2d0:	2301      	movs	r3, #1
}
  40e2d2:	4618      	mov	r0, r3
  40e2d4:	370c      	adds	r7, #12
  40e2d6:	46bd      	mov	sp, r7
  40e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e2dc:	4770      	bx	lr
  40e2de:	bf00      	nop

0040e2e0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40e2e0:	b480      	push	{r7}
  40e2e2:	b085      	sub	sp, #20
  40e2e4:	af00      	add	r7, sp, #0
  40e2e6:	60f8      	str	r0, [r7, #12]
  40e2e8:	60b9      	str	r1, [r7, #8]
  40e2ea:	607a      	str	r2, [r7, #4]
	return 0;
  40e2ec:	2300      	movs	r3, #0
}
  40e2ee:	4618      	mov	r0, r3
  40e2f0:	3714      	adds	r7, #20
  40e2f2:	46bd      	mov	sp, r7
  40e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e2f8:	4770      	bx	lr
  40e2fa:	bf00      	nop

0040e2fc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40e2fc:	b480      	push	{r7}
  40e2fe:	b083      	sub	sp, #12
  40e300:	af00      	add	r7, sp, #0
  40e302:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40e304:	687b      	ldr	r3, [r7, #4]
  40e306:	2b07      	cmp	r3, #7
  40e308:	d825      	bhi.n	40e356 <osc_get_rate+0x5a>
  40e30a:	a201      	add	r2, pc, #4	; (adr r2, 40e310 <osc_get_rate+0x14>)
  40e30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40e310:	0040e331 	.word	0x0040e331
  40e314:	0040e337 	.word	0x0040e337
  40e318:	0040e33d 	.word	0x0040e33d
  40e31c:	0040e343 	.word	0x0040e343
  40e320:	0040e347 	.word	0x0040e347
  40e324:	0040e34b 	.word	0x0040e34b
  40e328:	0040e34f 	.word	0x0040e34f
  40e32c:	0040e353 	.word	0x0040e353
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40e330:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40e334:	e010      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40e336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40e33a:	e00d      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40e33c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40e340:	e00a      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40e342:	4b08      	ldr	r3, [pc, #32]	; (40e364 <osc_get_rate+0x68>)
  40e344:	e008      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40e346:	4b08      	ldr	r3, [pc, #32]	; (40e368 <osc_get_rate+0x6c>)
  40e348:	e006      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40e34a:	4b08      	ldr	r3, [pc, #32]	; (40e36c <osc_get_rate+0x70>)
  40e34c:	e004      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40e34e:	4b08      	ldr	r3, [pc, #32]	; (40e370 <osc_get_rate+0x74>)
  40e350:	e002      	b.n	40e358 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40e352:	4b07      	ldr	r3, [pc, #28]	; (40e370 <osc_get_rate+0x74>)
  40e354:	e000      	b.n	40e358 <osc_get_rate+0x5c>
	}

	return 0;
  40e356:	2300      	movs	r3, #0
}
  40e358:	4618      	mov	r0, r3
  40e35a:	370c      	adds	r7, #12
  40e35c:	46bd      	mov	sp, r7
  40e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40e362:	4770      	bx	lr
  40e364:	003d0900 	.word	0x003d0900
  40e368:	007a1200 	.word	0x007a1200
  40e36c:	00b71b00 	.word	0x00b71b00
  40e370:	00f42400 	.word	0x00f42400

0040e374 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40e374:	b580      	push	{r7, lr}
  40e376:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40e378:	2006      	movs	r0, #6
  40e37a:	4b04      	ldr	r3, [pc, #16]	; (40e38c <sysclk_get_main_hz+0x18>)
  40e37c:	4798      	blx	r3
  40e37e:	4602      	mov	r2, r0
  40e380:	4613      	mov	r3, r2
  40e382:	011b      	lsls	r3, r3, #4
  40e384:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40e386:	4618      	mov	r0, r3
  40e388:	bd80      	pop	{r7, pc}
  40e38a:	bf00      	nop
  40e38c:	0040e2fd 	.word	0x0040e2fd

0040e390 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40e390:	b580      	push	{r7, lr}
  40e392:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40e394:	4b02      	ldr	r3, [pc, #8]	; (40e3a0 <sysclk_get_cpu_hz+0x10>)
  40e396:	4798      	blx	r3
  40e398:	4603      	mov	r3, r0
  40e39a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40e39c:	4618      	mov	r0, r3
  40e39e:	bd80      	pop	{r7, pc}
  40e3a0:	0040e375 	.word	0x0040e375

0040e3a4 <HardFault_Handler>:
extern drv_uart_config_t usart1Config;
extern brainSettings_t brainSettings; 
volatile unsigned long sgSysTickCount = 0;

void HardFault_Handler()
{
  40e3a4:	b480      	push	{r7}
  40e3a6:	af00      	add	r7, sp, #0
	while(1); 
  40e3a8:	e7fe      	b.n	40e3a8 <HardFault_Handler+0x4>
  40e3aa:	bf00      	nop

0040e3ac <MemManage_Handler>:
}
void MemManage_Handler()
{
  40e3ac:	b480      	push	{r7}
  40e3ae:	af00      	add	r7, sp, #0
	while(1); 
  40e3b0:	e7fe      	b.n	40e3b0 <MemManage_Handler+0x4>
  40e3b2:	bf00      	nop

0040e3b4 <BusFault_Handler>:
}
void BusFault_Handler()
{
  40e3b4:	b480      	push	{r7}
  40e3b6:	af00      	add	r7, sp, #0
	while(1); 
  40e3b8:	e7fe      	b.n	40e3b8 <BusFault_Handler+0x4>
  40e3ba:	bf00      	nop

0040e3bc <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  40e3bc:	b480      	push	{r7}
  40e3be:	af00      	add	r7, sp, #0
	while(1); 
  40e3c0:	e7fe      	b.n	40e3c0 <UsageFault_Handler+0x4>
  40e3c2:	bf00      	nop

0040e3c4 <SysTick_Handler>:

/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
  40e3c4:	b580      	push	{r7, lr}
  40e3c6:	af00      	add	r7, sp, #0
	sgSysTickCount++;
  40e3c8:	4b03      	ldr	r3, [pc, #12]	; (40e3d8 <SysTick_Handler+0x14>)
  40e3ca:	681b      	ldr	r3, [r3, #0]
  40e3cc:	1c5a      	adds	r2, r3, #1
  40e3ce:	4b02      	ldr	r3, [pc, #8]	; (40e3d8 <SysTick_Handler+0x14>)
  40e3d0:	601a      	str	r2, [r3, #0]
	xPortSysTickHandler();
  40e3d2:	4b02      	ldr	r3, [pc, #8]	; (40e3dc <SysTick_Handler+0x18>)
  40e3d4:	4798      	blx	r3
}
  40e3d6:	bd80      	pop	{r7, pc}
  40e3d8:	20001f3c 	.word	0x20001f3c
  40e3dc:	00407e09 	.word	0x00407e09

0040e3e0 <main>:

int main (void)
{
  40e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e3e4:	b085      	sub	sp, #20
  40e3e6:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  40e3e8:	4b30      	ldr	r3, [pc, #192]	; (40e4ac <main+0xcc>)
  40e3ea:	2201      	movs	r2, #1
  40e3ec:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40e3ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40e3f2:	b662      	cpsie	i
	//Initialize system clock and peripherals
	sysclk_init();
  40e3f4:	4b2e      	ldr	r3, [pc, #184]	; (40e4b0 <main+0xd0>)
  40e3f6:	4798      	blx	r3
	//turn on pullups for SWDIO (PB5) and SWDIO (PB6)
	PIOB->PIO_PUER |= PIO_PB5 | PIO_PB6; 
  40e3f8:	4b2e      	ldr	r3, [pc, #184]	; (40e4b4 <main+0xd4>)
  40e3fa:	4a2e      	ldr	r2, [pc, #184]	; (40e4b4 <main+0xd4>)
  40e3fc:	6e52      	ldr	r2, [r2, #100]	; 0x64
  40e3fe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  40e402:	665a      	str	r2, [r3, #100]	; 0x64
	board_init();
  40e404:	4b2c      	ldr	r3, [pc, #176]	; (40e4b8 <main+0xd8>)
  40e406:	4798      	blx	r3
	//
	//
	//
	//
	/*	Create task Main	*/
	if (xTaskCreate(TaskMain, "Main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_STACK_PRIORITY, NULL ) != pdPASS)
  40e408:	2302      	movs	r3, #2
  40e40a:	9300      	str	r3, [sp, #0]
  40e40c:	2300      	movs	r3, #0
  40e40e:	9301      	str	r3, [sp, #4]
  40e410:	2300      	movs	r3, #0
  40e412:	9302      	str	r3, [sp, #8]
  40e414:	2300      	movs	r3, #0
  40e416:	9303      	str	r3, [sp, #12]
  40e418:	4828      	ldr	r0, [pc, #160]	; (40e4bc <main+0xdc>)
  40e41a:	4929      	ldr	r1, [pc, #164]	; (40e4c0 <main+0xe0>)
  40e41c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40e420:	2300      	movs	r3, #0
  40e422:	4e28      	ldr	r6, [pc, #160]	; (40e4c4 <main+0xe4>)
  40e424:	47b0      	blx	r6
  40e426:	4603      	mov	r3, r0
  40e428:	2b01      	cmp	r3, #1
  40e42a:	d002      	beq.n	40e432 <main+0x52>
	{
		printf("Failed to create Main task\r\n");
  40e42c:	4826      	ldr	r0, [pc, #152]	; (40e4c8 <main+0xe8>)
  40e42e:	4b27      	ldr	r3, [pc, #156]	; (40e4cc <main+0xec>)
  40e430:	4798      	blx	r3
	//{
		//printf("Failed to create Debug Log task\r\n");
	//}

	/* Start the scheduler. */
	vTaskStartScheduler();
  40e432:	4b27      	ldr	r3, [pc, #156]	; (40e4d0 <main+0xf0>)
  40e434:	4798      	blx	r3
	//we should never get here. 
	/*	Debug code */
	while (1) 
	{		

		delay_ms(1000);
  40e436:	4b27      	ldr	r3, [pc, #156]	; (40e4d4 <main+0xf4>)
  40e438:	4798      	blx	r3
  40e43a:	4603      	mov	r3, r0
  40e43c:	4618      	mov	r0, r3
  40e43e:	f04f 0100 	mov.w	r1, #0
  40e442:	4602      	mov	r2, r0
  40e444:	460b      	mov	r3, r1
  40e446:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  40e44a:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  40e44e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  40e452:	4652      	mov	r2, sl
  40e454:	465b      	mov	r3, fp
  40e456:	015d      	lsls	r5, r3, #5
  40e458:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  40e45c:	0154      	lsls	r4, r2, #5
  40e45e:	1aa4      	subs	r4, r4, r2
  40e460:	eb65 0503 	sbc.w	r5, r5, r3
  40e464:	1824      	adds	r4, r4, r0
  40e466:	eb45 0501 	adc.w	r5, r5, r1
  40e46a:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  40e46e:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  40e472:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  40e476:	4644      	mov	r4, r8
  40e478:	464d      	mov	r5, r9
  40e47a:	4620      	mov	r0, r4
  40e47c:	4629      	mov	r1, r5
  40e47e:	f243 62af 	movw	r2, #13999	; 0x36af
  40e482:	f04f 0300 	mov.w	r3, #0
  40e486:	1812      	adds	r2, r2, r0
  40e488:	eb43 0301 	adc.w	r3, r3, r1
  40e48c:	4e12      	ldr	r6, [pc, #72]	; (40e4d8 <main+0xf8>)
  40e48e:	4610      	mov	r0, r2
  40e490:	4619      	mov	r1, r3
  40e492:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40e496:	f04f 0300 	mov.w	r3, #0
  40e49a:	47b0      	blx	r6
  40e49c:	4602      	mov	r2, r0
  40e49e:	460b      	mov	r3, r1
  40e4a0:	4613      	mov	r3, r2
  40e4a2:	4618      	mov	r0, r3
  40e4a4:	4b0d      	ldr	r3, [pc, #52]	; (40e4dc <main+0xfc>)
  40e4a6:	4798      	blx	r3
	}
  40e4a8:	e7c5      	b.n	40e436 <main+0x56>
  40e4aa:	bf00      	nop
  40e4ac:	200004e8 	.word	0x200004e8
  40e4b0:	0040d2a9 	.word	0x0040d2a9
  40e4b4:	400e1000 	.word	0x400e1000
  40e4b8:	0040d349 	.word	0x0040d349
  40e4bc:	0040c2b9 	.word	0x0040c2b9
  40e4c0:	004191c4 	.word	0x004191c4
  40e4c4:	00408631 	.word	0x00408631
  40e4c8:	004191cc 	.word	0x004191cc
  40e4cc:	0040eadd 	.word	0x0040eadd
  40e4d0:	004088b9 	.word	0x004088b9
  40e4d4:	0040e391 	.word	0x0040e391
  40e4d8:	0040e4e1 	.word	0x0040e4e1
  40e4dc:	20000001 	.word	0x20000001

0040e4e0 <__aeabi_uldivmod>:
  40e4e0:	b94b      	cbnz	r3, 40e4f6 <__aeabi_uldivmod+0x16>
  40e4e2:	b942      	cbnz	r2, 40e4f6 <__aeabi_uldivmod+0x16>
  40e4e4:	2900      	cmp	r1, #0
  40e4e6:	bf08      	it	eq
  40e4e8:	2800      	cmpeq	r0, #0
  40e4ea:	d002      	beq.n	40e4f2 <__aeabi_uldivmod+0x12>
  40e4ec:	f04f 31ff 	mov.w	r1, #4294967295
  40e4f0:	4608      	mov	r0, r1
  40e4f2:	f000 b83b 	b.w	40e56c <__aeabi_idiv0>
  40e4f6:	b082      	sub	sp, #8
  40e4f8:	46ec      	mov	ip, sp
  40e4fa:	e92d 5000 	stmdb	sp!, {ip, lr}
  40e4fe:	f000 f81d 	bl	40e53c <__gnu_uldivmod_helper>
  40e502:	f8dd e004 	ldr.w	lr, [sp, #4]
  40e506:	b002      	add	sp, #8
  40e508:	bc0c      	pop	{r2, r3}
  40e50a:	4770      	bx	lr

0040e50c <__gnu_ldivmod_helper>:
  40e50c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40e510:	9e06      	ldr	r6, [sp, #24]
  40e512:	4614      	mov	r4, r2
  40e514:	461d      	mov	r5, r3
  40e516:	4680      	mov	r8, r0
  40e518:	4689      	mov	r9, r1
  40e51a:	f000 f829 	bl	40e570 <__divdi3>
  40e51e:	fb04 f301 	mul.w	r3, r4, r1
  40e522:	fb00 3305 	mla	r3, r0, r5, r3
  40e526:	fba4 4500 	umull	r4, r5, r4, r0
  40e52a:	441d      	add	r5, r3
  40e52c:	ebb8 0404 	subs.w	r4, r8, r4
  40e530:	eb69 0505 	sbc.w	r5, r9, r5
  40e534:	e9c6 4500 	strd	r4, r5, [r6]
  40e538:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040e53c <__gnu_uldivmod_helper>:
  40e53c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40e540:	9e06      	ldr	r6, [sp, #24]
  40e542:	4614      	mov	r4, r2
  40e544:	4680      	mov	r8, r0
  40e546:	4689      	mov	r9, r1
  40e548:	461d      	mov	r5, r3
  40e54a:	f000 f95d 	bl	40e808 <__udivdi3>
  40e54e:	fb00 f505 	mul.w	r5, r0, r5
  40e552:	fb04 5301 	mla	r3, r4, r1, r5
  40e556:	fba0 4504 	umull	r4, r5, r0, r4
  40e55a:	441d      	add	r5, r3
  40e55c:	ebb8 0404 	subs.w	r4, r8, r4
  40e560:	eb69 0505 	sbc.w	r5, r9, r5
  40e564:	e9c6 4500 	strd	r4, r5, [r6]
  40e568:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040e56c <__aeabi_idiv0>:
  40e56c:	4770      	bx	lr
  40e56e:	bf00      	nop

0040e570 <__divdi3>:
  40e570:	2900      	cmp	r1, #0
  40e572:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e576:	f2c0 809f 	blt.w	40e6b8 <__divdi3+0x148>
  40e57a:	2400      	movs	r4, #0
  40e57c:	2b00      	cmp	r3, #0
  40e57e:	f2c0 8096 	blt.w	40e6ae <__divdi3+0x13e>
  40e582:	4615      	mov	r5, r2
  40e584:	4606      	mov	r6, r0
  40e586:	460f      	mov	r7, r1
  40e588:	2b00      	cmp	r3, #0
  40e58a:	d13e      	bne.n	40e60a <__divdi3+0x9a>
  40e58c:	428a      	cmp	r2, r1
  40e58e:	d957      	bls.n	40e640 <__divdi3+0xd0>
  40e590:	fab2 f382 	clz	r3, r2
  40e594:	b14b      	cbz	r3, 40e5aa <__divdi3+0x3a>
  40e596:	f1c3 0220 	rsb	r2, r3, #32
  40e59a:	fa01 f703 	lsl.w	r7, r1, r3
  40e59e:	fa20 f202 	lsr.w	r2, r0, r2
  40e5a2:	409d      	lsls	r5, r3
  40e5a4:	4317      	orrs	r7, r2
  40e5a6:	fa00 f603 	lsl.w	r6, r0, r3
  40e5aa:	0c29      	lsrs	r1, r5, #16
  40e5ac:	fbb7 f2f1 	udiv	r2, r7, r1
  40e5b0:	0c33      	lsrs	r3, r6, #16
  40e5b2:	fb01 7c12 	mls	ip, r1, r2, r7
  40e5b6:	b2a8      	uxth	r0, r5
  40e5b8:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40e5bc:	fb00 f302 	mul.w	r3, r0, r2
  40e5c0:	42bb      	cmp	r3, r7
  40e5c2:	d909      	bls.n	40e5d8 <__divdi3+0x68>
  40e5c4:	197f      	adds	r7, r7, r5
  40e5c6:	f102 3cff 	add.w	ip, r2, #4294967295
  40e5ca:	f080 8101 	bcs.w	40e7d0 <__divdi3+0x260>
  40e5ce:	42bb      	cmp	r3, r7
  40e5d0:	f240 80fe 	bls.w	40e7d0 <__divdi3+0x260>
  40e5d4:	3a02      	subs	r2, #2
  40e5d6:	442f      	add	r7, r5
  40e5d8:	1aff      	subs	r7, r7, r3
  40e5da:	fbb7 f3f1 	udiv	r3, r7, r1
  40e5de:	b2b6      	uxth	r6, r6
  40e5e0:	fb01 7113 	mls	r1, r1, r3, r7
  40e5e4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40e5e8:	fb00 f003 	mul.w	r0, r0, r3
  40e5ec:	4288      	cmp	r0, r1
  40e5ee:	d908      	bls.n	40e602 <__divdi3+0x92>
  40e5f0:	1949      	adds	r1, r1, r5
  40e5f2:	f103 37ff 	add.w	r7, r3, #4294967295
  40e5f6:	f080 80ed 	bcs.w	40e7d4 <__divdi3+0x264>
  40e5fa:	4288      	cmp	r0, r1
  40e5fc:	f240 80ea 	bls.w	40e7d4 <__divdi3+0x264>
  40e600:	3b02      	subs	r3, #2
  40e602:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40e606:	2300      	movs	r3, #0
  40e608:	e003      	b.n	40e612 <__divdi3+0xa2>
  40e60a:	428b      	cmp	r3, r1
  40e60c:	d90a      	bls.n	40e624 <__divdi3+0xb4>
  40e60e:	2300      	movs	r3, #0
  40e610:	461a      	mov	r2, r3
  40e612:	4610      	mov	r0, r2
  40e614:	4619      	mov	r1, r3
  40e616:	b114      	cbz	r4, 40e61e <__divdi3+0xae>
  40e618:	4240      	negs	r0, r0
  40e61a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e61e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e622:	4770      	bx	lr
  40e624:	fab3 f883 	clz	r8, r3
  40e628:	f1b8 0f00 	cmp.w	r8, #0
  40e62c:	f040 8084 	bne.w	40e738 <__divdi3+0x1c8>
  40e630:	428b      	cmp	r3, r1
  40e632:	d302      	bcc.n	40e63a <__divdi3+0xca>
  40e634:	4282      	cmp	r2, r0
  40e636:	f200 80de 	bhi.w	40e7f6 <__divdi3+0x286>
  40e63a:	2300      	movs	r3, #0
  40e63c:	2201      	movs	r2, #1
  40e63e:	e7e8      	b.n	40e612 <__divdi3+0xa2>
  40e640:	b912      	cbnz	r2, 40e648 <__divdi3+0xd8>
  40e642:	2301      	movs	r3, #1
  40e644:	fbb3 f5f2 	udiv	r5, r3, r2
  40e648:	fab5 f285 	clz	r2, r5
  40e64c:	2a00      	cmp	r2, #0
  40e64e:	d139      	bne.n	40e6c4 <__divdi3+0x154>
  40e650:	1b7f      	subs	r7, r7, r5
  40e652:	0c28      	lsrs	r0, r5, #16
  40e654:	fa1f fc85 	uxth.w	ip, r5
  40e658:	2301      	movs	r3, #1
  40e65a:	fbb7 f1f0 	udiv	r1, r7, r0
  40e65e:	0c32      	lsrs	r2, r6, #16
  40e660:	fb00 7711 	mls	r7, r0, r1, r7
  40e664:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40e668:	fb0c f201 	mul.w	r2, ip, r1
  40e66c:	42ba      	cmp	r2, r7
  40e66e:	d907      	bls.n	40e680 <__divdi3+0x110>
  40e670:	197f      	adds	r7, r7, r5
  40e672:	f101 38ff 	add.w	r8, r1, #4294967295
  40e676:	d202      	bcs.n	40e67e <__divdi3+0x10e>
  40e678:	42ba      	cmp	r2, r7
  40e67a:	f200 80c1 	bhi.w	40e800 <__divdi3+0x290>
  40e67e:	4641      	mov	r1, r8
  40e680:	1abf      	subs	r7, r7, r2
  40e682:	fbb7 f2f0 	udiv	r2, r7, r0
  40e686:	b2b6      	uxth	r6, r6
  40e688:	fb00 7012 	mls	r0, r0, r2, r7
  40e68c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40e690:	fb0c fc02 	mul.w	ip, ip, r2
  40e694:	4584      	cmp	ip, r0
  40e696:	d907      	bls.n	40e6a8 <__divdi3+0x138>
  40e698:	1940      	adds	r0, r0, r5
  40e69a:	f102 37ff 	add.w	r7, r2, #4294967295
  40e69e:	d202      	bcs.n	40e6a6 <__divdi3+0x136>
  40e6a0:	4584      	cmp	ip, r0
  40e6a2:	f200 80ab 	bhi.w	40e7fc <__divdi3+0x28c>
  40e6a6:	463a      	mov	r2, r7
  40e6a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40e6ac:	e7b1      	b.n	40e612 <__divdi3+0xa2>
  40e6ae:	43e4      	mvns	r4, r4
  40e6b0:	4252      	negs	r2, r2
  40e6b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40e6b6:	e764      	b.n	40e582 <__divdi3+0x12>
  40e6b8:	4240      	negs	r0, r0
  40e6ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e6be:	f04f 34ff 	mov.w	r4, #4294967295
  40e6c2:	e75b      	b.n	40e57c <__divdi3+0xc>
  40e6c4:	4095      	lsls	r5, r2
  40e6c6:	f1c2 0320 	rsb	r3, r2, #32
  40e6ca:	fa27 f103 	lsr.w	r1, r7, r3
  40e6ce:	0c28      	lsrs	r0, r5, #16
  40e6d0:	fa26 f303 	lsr.w	r3, r6, r3
  40e6d4:	4097      	lsls	r7, r2
  40e6d6:	fbb1 f8f0 	udiv	r8, r1, r0
  40e6da:	431f      	orrs	r7, r3
  40e6dc:	0c3b      	lsrs	r3, r7, #16
  40e6de:	fb00 1118 	mls	r1, r0, r8, r1
  40e6e2:	fa1f fc85 	uxth.w	ip, r5
  40e6e6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40e6ea:	fb0c f308 	mul.w	r3, ip, r8
  40e6ee:	428b      	cmp	r3, r1
  40e6f0:	fa06 f602 	lsl.w	r6, r6, r2
  40e6f4:	d908      	bls.n	40e708 <__divdi3+0x198>
  40e6f6:	1949      	adds	r1, r1, r5
  40e6f8:	f108 32ff 	add.w	r2, r8, #4294967295
  40e6fc:	d279      	bcs.n	40e7f2 <__divdi3+0x282>
  40e6fe:	428b      	cmp	r3, r1
  40e700:	d977      	bls.n	40e7f2 <__divdi3+0x282>
  40e702:	f1a8 0802 	sub.w	r8, r8, #2
  40e706:	4429      	add	r1, r5
  40e708:	1ac9      	subs	r1, r1, r3
  40e70a:	fbb1 f3f0 	udiv	r3, r1, r0
  40e70e:	b2bf      	uxth	r7, r7
  40e710:	fb00 1113 	mls	r1, r0, r3, r1
  40e714:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  40e718:	fb0c f203 	mul.w	r2, ip, r3
  40e71c:	42ba      	cmp	r2, r7
  40e71e:	d907      	bls.n	40e730 <__divdi3+0x1c0>
  40e720:	197f      	adds	r7, r7, r5
  40e722:	f103 31ff 	add.w	r1, r3, #4294967295
  40e726:	d260      	bcs.n	40e7ea <__divdi3+0x27a>
  40e728:	42ba      	cmp	r2, r7
  40e72a:	d95e      	bls.n	40e7ea <__divdi3+0x27a>
  40e72c:	3b02      	subs	r3, #2
  40e72e:	442f      	add	r7, r5
  40e730:	1abf      	subs	r7, r7, r2
  40e732:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40e736:	e790      	b.n	40e65a <__divdi3+0xea>
  40e738:	f1c8 0220 	rsb	r2, r8, #32
  40e73c:	fa03 fc08 	lsl.w	ip, r3, r8
  40e740:	fa25 f302 	lsr.w	r3, r5, r2
  40e744:	ea43 0c0c 	orr.w	ip, r3, ip
  40e748:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40e74c:	fa21 f302 	lsr.w	r3, r1, r2
  40e750:	fa01 f708 	lsl.w	r7, r1, r8
  40e754:	fa20 f202 	lsr.w	r2, r0, r2
  40e758:	fbb3 f1f9 	udiv	r1, r3, r9
  40e75c:	4317      	orrs	r7, r2
  40e75e:	fb09 3311 	mls	r3, r9, r1, r3
  40e762:	0c3a      	lsrs	r2, r7, #16
  40e764:	fa1f fb8c 	uxth.w	fp, ip
  40e768:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40e76c:	fb0b fa01 	mul.w	sl, fp, r1
  40e770:	459a      	cmp	sl, r3
  40e772:	fa05 f008 	lsl.w	r0, r5, r8
  40e776:	d908      	bls.n	40e78a <__divdi3+0x21a>
  40e778:	eb13 030c 	adds.w	r3, r3, ip
  40e77c:	f101 32ff 	add.w	r2, r1, #4294967295
  40e780:	d235      	bcs.n	40e7ee <__divdi3+0x27e>
  40e782:	459a      	cmp	sl, r3
  40e784:	d933      	bls.n	40e7ee <__divdi3+0x27e>
  40e786:	3902      	subs	r1, #2
  40e788:	4463      	add	r3, ip
  40e78a:	ebca 0303 	rsb	r3, sl, r3
  40e78e:	fbb3 f2f9 	udiv	r2, r3, r9
  40e792:	fb09 3312 	mls	r3, r9, r2, r3
  40e796:	b2bf      	uxth	r7, r7
  40e798:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40e79c:	fb0b f902 	mul.w	r9, fp, r2
  40e7a0:	45b9      	cmp	r9, r7
  40e7a2:	d908      	bls.n	40e7b6 <__divdi3+0x246>
  40e7a4:	eb17 070c 	adds.w	r7, r7, ip
  40e7a8:	f102 33ff 	add.w	r3, r2, #4294967295
  40e7ac:	d21b      	bcs.n	40e7e6 <__divdi3+0x276>
  40e7ae:	45b9      	cmp	r9, r7
  40e7b0:	d919      	bls.n	40e7e6 <__divdi3+0x276>
  40e7b2:	3a02      	subs	r2, #2
  40e7b4:	4467      	add	r7, ip
  40e7b6:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40e7ba:	fba5 0100 	umull	r0, r1, r5, r0
  40e7be:	ebc9 0707 	rsb	r7, r9, r7
  40e7c2:	428f      	cmp	r7, r1
  40e7c4:	f04f 0300 	mov.w	r3, #0
  40e7c8:	d30a      	bcc.n	40e7e0 <__divdi3+0x270>
  40e7ca:	d005      	beq.n	40e7d8 <__divdi3+0x268>
  40e7cc:	462a      	mov	r2, r5
  40e7ce:	e720      	b.n	40e612 <__divdi3+0xa2>
  40e7d0:	4662      	mov	r2, ip
  40e7d2:	e701      	b.n	40e5d8 <__divdi3+0x68>
  40e7d4:	463b      	mov	r3, r7
  40e7d6:	e714      	b.n	40e602 <__divdi3+0x92>
  40e7d8:	fa06 f608 	lsl.w	r6, r6, r8
  40e7dc:	4286      	cmp	r6, r0
  40e7de:	d2f5      	bcs.n	40e7cc <__divdi3+0x25c>
  40e7e0:	1e6a      	subs	r2, r5, #1
  40e7e2:	2300      	movs	r3, #0
  40e7e4:	e715      	b.n	40e612 <__divdi3+0xa2>
  40e7e6:	461a      	mov	r2, r3
  40e7e8:	e7e5      	b.n	40e7b6 <__divdi3+0x246>
  40e7ea:	460b      	mov	r3, r1
  40e7ec:	e7a0      	b.n	40e730 <__divdi3+0x1c0>
  40e7ee:	4611      	mov	r1, r2
  40e7f0:	e7cb      	b.n	40e78a <__divdi3+0x21a>
  40e7f2:	4690      	mov	r8, r2
  40e7f4:	e788      	b.n	40e708 <__divdi3+0x198>
  40e7f6:	4643      	mov	r3, r8
  40e7f8:	4642      	mov	r2, r8
  40e7fa:	e70a      	b.n	40e612 <__divdi3+0xa2>
  40e7fc:	3a02      	subs	r2, #2
  40e7fe:	e753      	b.n	40e6a8 <__divdi3+0x138>
  40e800:	3902      	subs	r1, #2
  40e802:	442f      	add	r7, r5
  40e804:	e73c      	b.n	40e680 <__divdi3+0x110>
  40e806:	bf00      	nop

0040e808 <__udivdi3>:
  40e808:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e80c:	4614      	mov	r4, r2
  40e80e:	4605      	mov	r5, r0
  40e810:	460e      	mov	r6, r1
  40e812:	2b00      	cmp	r3, #0
  40e814:	d143      	bne.n	40e89e <__udivdi3+0x96>
  40e816:	428a      	cmp	r2, r1
  40e818:	d953      	bls.n	40e8c2 <__udivdi3+0xba>
  40e81a:	fab2 f782 	clz	r7, r2
  40e81e:	b157      	cbz	r7, 40e836 <__udivdi3+0x2e>
  40e820:	f1c7 0620 	rsb	r6, r7, #32
  40e824:	fa20 f606 	lsr.w	r6, r0, r6
  40e828:	fa01 f307 	lsl.w	r3, r1, r7
  40e82c:	fa02 f407 	lsl.w	r4, r2, r7
  40e830:	431e      	orrs	r6, r3
  40e832:	fa00 f507 	lsl.w	r5, r0, r7
  40e836:	0c21      	lsrs	r1, r4, #16
  40e838:	fbb6 f2f1 	udiv	r2, r6, r1
  40e83c:	0c2b      	lsrs	r3, r5, #16
  40e83e:	fb01 6712 	mls	r7, r1, r2, r6
  40e842:	b2a0      	uxth	r0, r4
  40e844:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40e848:	fb00 f302 	mul.w	r3, r0, r2
  40e84c:	42b3      	cmp	r3, r6
  40e84e:	d909      	bls.n	40e864 <__udivdi3+0x5c>
  40e850:	1936      	adds	r6, r6, r4
  40e852:	f102 37ff 	add.w	r7, r2, #4294967295
  40e856:	f080 80f6 	bcs.w	40ea46 <__udivdi3+0x23e>
  40e85a:	42b3      	cmp	r3, r6
  40e85c:	f240 80f3 	bls.w	40ea46 <__udivdi3+0x23e>
  40e860:	3a02      	subs	r2, #2
  40e862:	4426      	add	r6, r4
  40e864:	1af6      	subs	r6, r6, r3
  40e866:	fbb6 f3f1 	udiv	r3, r6, r1
  40e86a:	b2ad      	uxth	r5, r5
  40e86c:	fb01 6113 	mls	r1, r1, r3, r6
  40e870:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40e874:	fb00 f003 	mul.w	r0, r0, r3
  40e878:	4288      	cmp	r0, r1
  40e87a:	d908      	bls.n	40e88e <__udivdi3+0x86>
  40e87c:	1909      	adds	r1, r1, r4
  40e87e:	f103 36ff 	add.w	r6, r3, #4294967295
  40e882:	f080 80e2 	bcs.w	40ea4a <__udivdi3+0x242>
  40e886:	4288      	cmp	r0, r1
  40e888:	f240 80df 	bls.w	40ea4a <__udivdi3+0x242>
  40e88c:	3b02      	subs	r3, #2
  40e88e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40e892:	2300      	movs	r3, #0
  40e894:	4610      	mov	r0, r2
  40e896:	4619      	mov	r1, r3
  40e898:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e89c:	4770      	bx	lr
  40e89e:	428b      	cmp	r3, r1
  40e8a0:	d84a      	bhi.n	40e938 <__udivdi3+0x130>
  40e8a2:	fab3 f683 	clz	r6, r3
  40e8a6:	2e00      	cmp	r6, #0
  40e8a8:	d14d      	bne.n	40e946 <__udivdi3+0x13e>
  40e8aa:	428b      	cmp	r3, r1
  40e8ac:	d302      	bcc.n	40e8b4 <__udivdi3+0xac>
  40e8ae:	4282      	cmp	r2, r0
  40e8b0:	f200 80d6 	bhi.w	40ea60 <__udivdi3+0x258>
  40e8b4:	2300      	movs	r3, #0
  40e8b6:	2201      	movs	r2, #1
  40e8b8:	4610      	mov	r0, r2
  40e8ba:	4619      	mov	r1, r3
  40e8bc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e8c0:	4770      	bx	lr
  40e8c2:	b912      	cbnz	r2, 40e8ca <__udivdi3+0xc2>
  40e8c4:	2401      	movs	r4, #1
  40e8c6:	fbb4 f4f2 	udiv	r4, r4, r2
  40e8ca:	fab4 f284 	clz	r2, r4
  40e8ce:	2a00      	cmp	r2, #0
  40e8d0:	d17c      	bne.n	40e9cc <__udivdi3+0x1c4>
  40e8d2:	1b09      	subs	r1, r1, r4
  40e8d4:	0c26      	lsrs	r6, r4, #16
  40e8d6:	b2a7      	uxth	r7, r4
  40e8d8:	2301      	movs	r3, #1
  40e8da:	fbb1 f0f6 	udiv	r0, r1, r6
  40e8de:	0c2a      	lsrs	r2, r5, #16
  40e8e0:	fb06 1110 	mls	r1, r6, r0, r1
  40e8e4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40e8e8:	fb07 f200 	mul.w	r2, r7, r0
  40e8ec:	428a      	cmp	r2, r1
  40e8ee:	d907      	bls.n	40e900 <__udivdi3+0xf8>
  40e8f0:	1909      	adds	r1, r1, r4
  40e8f2:	f100 3cff 	add.w	ip, r0, #4294967295
  40e8f6:	d202      	bcs.n	40e8fe <__udivdi3+0xf6>
  40e8f8:	428a      	cmp	r2, r1
  40e8fa:	f200 80c3 	bhi.w	40ea84 <__udivdi3+0x27c>
  40e8fe:	4660      	mov	r0, ip
  40e900:	1a89      	subs	r1, r1, r2
  40e902:	fbb1 f2f6 	udiv	r2, r1, r6
  40e906:	b2ad      	uxth	r5, r5
  40e908:	fb06 1112 	mls	r1, r6, r2, r1
  40e90c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40e910:	fb07 f702 	mul.w	r7, r7, r2
  40e914:	42af      	cmp	r7, r5
  40e916:	d908      	bls.n	40e92a <__udivdi3+0x122>
  40e918:	192c      	adds	r4, r5, r4
  40e91a:	f102 31ff 	add.w	r1, r2, #4294967295
  40e91e:	f080 8096 	bcs.w	40ea4e <__udivdi3+0x246>
  40e922:	42a7      	cmp	r7, r4
  40e924:	f240 8093 	bls.w	40ea4e <__udivdi3+0x246>
  40e928:	3a02      	subs	r2, #2
  40e92a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40e92e:	4610      	mov	r0, r2
  40e930:	4619      	mov	r1, r3
  40e932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e936:	4770      	bx	lr
  40e938:	2300      	movs	r3, #0
  40e93a:	461a      	mov	r2, r3
  40e93c:	4610      	mov	r0, r2
  40e93e:	4619      	mov	r1, r3
  40e940:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40e944:	4770      	bx	lr
  40e946:	f1c6 0520 	rsb	r5, r6, #32
  40e94a:	fa22 f405 	lsr.w	r4, r2, r5
  40e94e:	40b3      	lsls	r3, r6
  40e950:	431c      	orrs	r4, r3
  40e952:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40e956:	fa21 f305 	lsr.w	r3, r1, r5
  40e95a:	fa01 f706 	lsl.w	r7, r1, r6
  40e95e:	fa20 f505 	lsr.w	r5, r0, r5
  40e962:	fbb3 fcf8 	udiv	ip, r3, r8
  40e966:	432f      	orrs	r7, r5
  40e968:	fb08 331c 	mls	r3, r8, ip, r3
  40e96c:	0c3d      	lsrs	r5, r7, #16
  40e96e:	fa1f fa84 	uxth.w	sl, r4
  40e972:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40e976:	fb0a f90c 	mul.w	r9, sl, ip
  40e97a:	4599      	cmp	r9, r3
  40e97c:	fa02 fb06 	lsl.w	fp, r2, r6
  40e980:	d904      	bls.n	40e98c <__udivdi3+0x184>
  40e982:	191b      	adds	r3, r3, r4
  40e984:	f10c 32ff 	add.w	r2, ip, #4294967295
  40e988:	d36d      	bcc.n	40ea66 <__udivdi3+0x25e>
  40e98a:	4694      	mov	ip, r2
  40e98c:	ebc9 0303 	rsb	r3, r9, r3
  40e990:	fbb3 f5f8 	udiv	r5, r3, r8
  40e994:	fb08 3315 	mls	r3, r8, r5, r3
  40e998:	b2bf      	uxth	r7, r7
  40e99a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40e99e:	fb0a f805 	mul.w	r8, sl, r5
  40e9a2:	45b8      	cmp	r8, r7
  40e9a4:	d904      	bls.n	40e9b0 <__udivdi3+0x1a8>
  40e9a6:	193f      	adds	r7, r7, r4
  40e9a8:	f105 33ff 	add.w	r3, r5, #4294967295
  40e9ac:	d361      	bcc.n	40ea72 <__udivdi3+0x26a>
  40e9ae:	461d      	mov	r5, r3
  40e9b0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40e9b4:	fbac 230b 	umull	r2, r3, ip, fp
  40e9b8:	ebc8 0707 	rsb	r7, r8, r7
  40e9bc:	429f      	cmp	r7, r3
  40e9be:	f04f 0500 	mov.w	r5, #0
  40e9c2:	d349      	bcc.n	40ea58 <__udivdi3+0x250>
  40e9c4:	d045      	beq.n	40ea52 <__udivdi3+0x24a>
  40e9c6:	4662      	mov	r2, ip
  40e9c8:	462b      	mov	r3, r5
  40e9ca:	e763      	b.n	40e894 <__udivdi3+0x8c>
  40e9cc:	4094      	lsls	r4, r2
  40e9ce:	f1c2 0320 	rsb	r3, r2, #32
  40e9d2:	fa21 fc03 	lsr.w	ip, r1, r3
  40e9d6:	0c26      	lsrs	r6, r4, #16
  40e9d8:	fa20 f303 	lsr.w	r3, r0, r3
  40e9dc:	fa01 f502 	lsl.w	r5, r1, r2
  40e9e0:	fbbc f8f6 	udiv	r8, ip, r6
  40e9e4:	ea43 0105 	orr.w	r1, r3, r5
  40e9e8:	0c0b      	lsrs	r3, r1, #16
  40e9ea:	fb06 cc18 	mls	ip, r6, r8, ip
  40e9ee:	b2a7      	uxth	r7, r4
  40e9f0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40e9f4:	fb07 f308 	mul.w	r3, r7, r8
  40e9f8:	4563      	cmp	r3, ip
  40e9fa:	fa00 f502 	lsl.w	r5, r0, r2
  40e9fe:	d909      	bls.n	40ea14 <__udivdi3+0x20c>
  40ea00:	eb1c 0c04 	adds.w	ip, ip, r4
  40ea04:	f108 32ff 	add.w	r2, r8, #4294967295
  40ea08:	d23a      	bcs.n	40ea80 <__udivdi3+0x278>
  40ea0a:	4563      	cmp	r3, ip
  40ea0c:	d938      	bls.n	40ea80 <__udivdi3+0x278>
  40ea0e:	f1a8 0802 	sub.w	r8, r8, #2
  40ea12:	44a4      	add	ip, r4
  40ea14:	ebc3 0c0c 	rsb	ip, r3, ip
  40ea18:	fbbc f3f6 	udiv	r3, ip, r6
  40ea1c:	b289      	uxth	r1, r1
  40ea1e:	fb06 cc13 	mls	ip, r6, r3, ip
  40ea22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40ea26:	fb07 f203 	mul.w	r2, r7, r3
  40ea2a:	428a      	cmp	r2, r1
  40ea2c:	d907      	bls.n	40ea3e <__udivdi3+0x236>
  40ea2e:	1909      	adds	r1, r1, r4
  40ea30:	f103 30ff 	add.w	r0, r3, #4294967295
  40ea34:	d222      	bcs.n	40ea7c <__udivdi3+0x274>
  40ea36:	428a      	cmp	r2, r1
  40ea38:	d920      	bls.n	40ea7c <__udivdi3+0x274>
  40ea3a:	3b02      	subs	r3, #2
  40ea3c:	4421      	add	r1, r4
  40ea3e:	1a89      	subs	r1, r1, r2
  40ea40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40ea44:	e749      	b.n	40e8da <__udivdi3+0xd2>
  40ea46:	463a      	mov	r2, r7
  40ea48:	e70c      	b.n	40e864 <__udivdi3+0x5c>
  40ea4a:	4633      	mov	r3, r6
  40ea4c:	e71f      	b.n	40e88e <__udivdi3+0x86>
  40ea4e:	460a      	mov	r2, r1
  40ea50:	e76b      	b.n	40e92a <__udivdi3+0x122>
  40ea52:	40b0      	lsls	r0, r6
  40ea54:	4290      	cmp	r0, r2
  40ea56:	d2b6      	bcs.n	40e9c6 <__udivdi3+0x1be>
  40ea58:	f10c 32ff 	add.w	r2, ip, #4294967295
  40ea5c:	2300      	movs	r3, #0
  40ea5e:	e719      	b.n	40e894 <__udivdi3+0x8c>
  40ea60:	4633      	mov	r3, r6
  40ea62:	4632      	mov	r2, r6
  40ea64:	e716      	b.n	40e894 <__udivdi3+0x8c>
  40ea66:	4599      	cmp	r9, r3
  40ea68:	d98f      	bls.n	40e98a <__udivdi3+0x182>
  40ea6a:	f1ac 0c02 	sub.w	ip, ip, #2
  40ea6e:	4423      	add	r3, r4
  40ea70:	e78c      	b.n	40e98c <__udivdi3+0x184>
  40ea72:	45b8      	cmp	r8, r7
  40ea74:	d99b      	bls.n	40e9ae <__udivdi3+0x1a6>
  40ea76:	3d02      	subs	r5, #2
  40ea78:	4427      	add	r7, r4
  40ea7a:	e799      	b.n	40e9b0 <__udivdi3+0x1a8>
  40ea7c:	4603      	mov	r3, r0
  40ea7e:	e7de      	b.n	40ea3e <__udivdi3+0x236>
  40ea80:	4690      	mov	r8, r2
  40ea82:	e7c7      	b.n	40ea14 <__udivdi3+0x20c>
  40ea84:	3802      	subs	r0, #2
  40ea86:	4421      	add	r1, r4
  40ea88:	e73a      	b.n	40e900 <__udivdi3+0xf8>
  40ea8a:	bf00      	nop

0040ea8c <__libc_init_array>:
  40ea8c:	b570      	push	{r4, r5, r6, lr}
  40ea8e:	4e0f      	ldr	r6, [pc, #60]	; (40eacc <__libc_init_array+0x40>)
  40ea90:	4d0f      	ldr	r5, [pc, #60]	; (40ead0 <__libc_init_array+0x44>)
  40ea92:	1b76      	subs	r6, r6, r5
  40ea94:	10b6      	asrs	r6, r6, #2
  40ea96:	d007      	beq.n	40eaa8 <__libc_init_array+0x1c>
  40ea98:	3d04      	subs	r5, #4
  40ea9a:	2400      	movs	r4, #0
  40ea9c:	3401      	adds	r4, #1
  40ea9e:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40eaa2:	4798      	blx	r3
  40eaa4:	42a6      	cmp	r6, r4
  40eaa6:	d1f9      	bne.n	40ea9c <__libc_init_array+0x10>
  40eaa8:	4e0a      	ldr	r6, [pc, #40]	; (40ead4 <__libc_init_array+0x48>)
  40eaaa:	4d0b      	ldr	r5, [pc, #44]	; (40ead8 <__libc_init_array+0x4c>)
  40eaac:	1b76      	subs	r6, r6, r5
  40eaae:	f00a fdbb 	bl	419628 <_init>
  40eab2:	10b6      	asrs	r6, r6, #2
  40eab4:	d008      	beq.n	40eac8 <__libc_init_array+0x3c>
  40eab6:	3d04      	subs	r5, #4
  40eab8:	2400      	movs	r4, #0
  40eaba:	3401      	adds	r4, #1
  40eabc:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40eac0:	4798      	blx	r3
  40eac2:	42a6      	cmp	r6, r4
  40eac4:	d1f9      	bne.n	40eaba <__libc_init_array+0x2e>
  40eac6:	bd70      	pop	{r4, r5, r6, pc}
  40eac8:	bd70      	pop	{r4, r5, r6, pc}
  40eaca:	bf00      	nop
  40eacc:	00419634 	.word	0x00419634
  40ead0:	00419634 	.word	0x00419634
  40ead4:	0041963c 	.word	0x0041963c
  40ead8:	00419634 	.word	0x00419634

0040eadc <iprintf>:
  40eadc:	b40f      	push	{r0, r1, r2, r3}
  40eade:	b500      	push	{lr}
  40eae0:	4a07      	ldr	r2, [pc, #28]	; (40eb00 <iprintf+0x24>)
  40eae2:	b083      	sub	sp, #12
  40eae4:	ab04      	add	r3, sp, #16
  40eae6:	6810      	ldr	r0, [r2, #0]
  40eae8:	f853 2b04 	ldr.w	r2, [r3], #4
  40eaec:	6881      	ldr	r1, [r0, #8]
  40eaee:	9301      	str	r3, [sp, #4]
  40eaf0:	f003 f944 	bl	411d7c <_vfiprintf_r>
  40eaf4:	b003      	add	sp, #12
  40eaf6:	f85d eb04 	ldr.w	lr, [sp], #4
  40eafa:	b004      	add	sp, #16
  40eafc:	4770      	bx	lr
  40eafe:	bf00      	nop
  40eb00:	20000918 	.word	0x20000918

0040eb04 <malloc>:
  40eb04:	4b02      	ldr	r3, [pc, #8]	; (40eb10 <malloc+0xc>)
  40eb06:	4601      	mov	r1, r0
  40eb08:	6818      	ldr	r0, [r3, #0]
  40eb0a:	f000 b80b 	b.w	40eb24 <_malloc_r>
  40eb0e:	bf00      	nop
  40eb10:	20000918 	.word	0x20000918

0040eb14 <free>:
  40eb14:	4b02      	ldr	r3, [pc, #8]	; (40eb20 <free+0xc>)
  40eb16:	4601      	mov	r1, r0
  40eb18:	6818      	ldr	r0, [r3, #0]
  40eb1a:	f005 b9e9 	b.w	413ef0 <_free_r>
  40eb1e:	bf00      	nop
  40eb20:	20000918 	.word	0x20000918

0040eb24 <_malloc_r>:
  40eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eb28:	f101 050b 	add.w	r5, r1, #11
  40eb2c:	2d16      	cmp	r5, #22
  40eb2e:	b083      	sub	sp, #12
  40eb30:	4606      	mov	r6, r0
  40eb32:	d927      	bls.n	40eb84 <_malloc_r+0x60>
  40eb34:	f035 0507 	bics.w	r5, r5, #7
  40eb38:	d427      	bmi.n	40eb8a <_malloc_r+0x66>
  40eb3a:	42a9      	cmp	r1, r5
  40eb3c:	d825      	bhi.n	40eb8a <_malloc_r+0x66>
  40eb3e:	4630      	mov	r0, r6
  40eb40:	f000 fb70 	bl	40f224 <__malloc_lock>
  40eb44:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40eb48:	d226      	bcs.n	40eb98 <_malloc_r+0x74>
  40eb4a:	4fc1      	ldr	r7, [pc, #772]	; (40ee50 <_malloc_r+0x32c>)
  40eb4c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  40eb50:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  40eb54:	68dc      	ldr	r4, [r3, #12]
  40eb56:	429c      	cmp	r4, r3
  40eb58:	f000 81d2 	beq.w	40ef00 <_malloc_r+0x3dc>
  40eb5c:	6863      	ldr	r3, [r4, #4]
  40eb5e:	68e2      	ldr	r2, [r4, #12]
  40eb60:	68a1      	ldr	r1, [r4, #8]
  40eb62:	f023 0303 	bic.w	r3, r3, #3
  40eb66:	4423      	add	r3, r4
  40eb68:	4630      	mov	r0, r6
  40eb6a:	685d      	ldr	r5, [r3, #4]
  40eb6c:	60ca      	str	r2, [r1, #12]
  40eb6e:	f045 0501 	orr.w	r5, r5, #1
  40eb72:	6091      	str	r1, [r2, #8]
  40eb74:	605d      	str	r5, [r3, #4]
  40eb76:	f000 fb57 	bl	40f228 <__malloc_unlock>
  40eb7a:	3408      	adds	r4, #8
  40eb7c:	4620      	mov	r0, r4
  40eb7e:	b003      	add	sp, #12
  40eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb84:	2510      	movs	r5, #16
  40eb86:	42a9      	cmp	r1, r5
  40eb88:	d9d9      	bls.n	40eb3e <_malloc_r+0x1a>
  40eb8a:	2400      	movs	r4, #0
  40eb8c:	230c      	movs	r3, #12
  40eb8e:	4620      	mov	r0, r4
  40eb90:	6033      	str	r3, [r6, #0]
  40eb92:	b003      	add	sp, #12
  40eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb98:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  40eb9c:	f000 808a 	beq.w	40ecb4 <_malloc_r+0x190>
  40eba0:	f1bc 0f04 	cmp.w	ip, #4
  40eba4:	f200 8160 	bhi.w	40ee68 <_malloc_r+0x344>
  40eba8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  40ebac:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40ebb0:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40ebb4:	4fa6      	ldr	r7, [pc, #664]	; (40ee50 <_malloc_r+0x32c>)
  40ebb6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40ebba:	68cc      	ldr	r4, [r1, #12]
  40ebbc:	42a1      	cmp	r1, r4
  40ebbe:	d105      	bne.n	40ebcc <_malloc_r+0xa8>
  40ebc0:	e00c      	b.n	40ebdc <_malloc_r+0xb8>
  40ebc2:	2b00      	cmp	r3, #0
  40ebc4:	da7a      	bge.n	40ecbc <_malloc_r+0x198>
  40ebc6:	68e4      	ldr	r4, [r4, #12]
  40ebc8:	42a1      	cmp	r1, r4
  40ebca:	d007      	beq.n	40ebdc <_malloc_r+0xb8>
  40ebcc:	6862      	ldr	r2, [r4, #4]
  40ebce:	f022 0203 	bic.w	r2, r2, #3
  40ebd2:	1b53      	subs	r3, r2, r5
  40ebd4:	2b0f      	cmp	r3, #15
  40ebd6:	ddf4      	ble.n	40ebc2 <_malloc_r+0x9e>
  40ebd8:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ebdc:	f10c 0c01 	add.w	ip, ip, #1
  40ebe0:	4b9b      	ldr	r3, [pc, #620]	; (40ee50 <_malloc_r+0x32c>)
  40ebe2:	693c      	ldr	r4, [r7, #16]
  40ebe4:	f103 0e08 	add.w	lr, r3, #8
  40ebe8:	4574      	cmp	r4, lr
  40ebea:	f000 817e 	beq.w	40eeea <_malloc_r+0x3c6>
  40ebee:	6861      	ldr	r1, [r4, #4]
  40ebf0:	f021 0103 	bic.w	r1, r1, #3
  40ebf4:	1b4a      	subs	r2, r1, r5
  40ebf6:	2a0f      	cmp	r2, #15
  40ebf8:	f300 8164 	bgt.w	40eec4 <_malloc_r+0x3a0>
  40ebfc:	2a00      	cmp	r2, #0
  40ebfe:	f8c3 e014 	str.w	lr, [r3, #20]
  40ec02:	f8c3 e010 	str.w	lr, [r3, #16]
  40ec06:	da6a      	bge.n	40ecde <_malloc_r+0x1ba>
  40ec08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40ec0c:	f080 813a 	bcs.w	40ee84 <_malloc_r+0x360>
  40ec10:	08c9      	lsrs	r1, r1, #3
  40ec12:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40ec16:	ea4f 08a1 	mov.w	r8, r1, asr #2
  40ec1a:	685a      	ldr	r2, [r3, #4]
  40ec1c:	6881      	ldr	r1, [r0, #8]
  40ec1e:	60a1      	str	r1, [r4, #8]
  40ec20:	f04f 0901 	mov.w	r9, #1
  40ec24:	fa09 f808 	lsl.w	r8, r9, r8
  40ec28:	ea48 0202 	orr.w	r2, r8, r2
  40ec2c:	60e0      	str	r0, [r4, #12]
  40ec2e:	605a      	str	r2, [r3, #4]
  40ec30:	6084      	str	r4, [r0, #8]
  40ec32:	60cc      	str	r4, [r1, #12]
  40ec34:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40ec38:	2001      	movs	r0, #1
  40ec3a:	4098      	lsls	r0, r3
  40ec3c:	4290      	cmp	r0, r2
  40ec3e:	d85b      	bhi.n	40ecf8 <_malloc_r+0x1d4>
  40ec40:	4202      	tst	r2, r0
  40ec42:	d106      	bne.n	40ec52 <_malloc_r+0x12e>
  40ec44:	f02c 0c03 	bic.w	ip, ip, #3
  40ec48:	0040      	lsls	r0, r0, #1
  40ec4a:	4202      	tst	r2, r0
  40ec4c:	f10c 0c04 	add.w	ip, ip, #4
  40ec50:	d0fa      	beq.n	40ec48 <_malloc_r+0x124>
  40ec52:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  40ec56:	4644      	mov	r4, r8
  40ec58:	46e1      	mov	r9, ip
  40ec5a:	68e3      	ldr	r3, [r4, #12]
  40ec5c:	429c      	cmp	r4, r3
  40ec5e:	d107      	bne.n	40ec70 <_malloc_r+0x14c>
  40ec60:	e145      	b.n	40eeee <_malloc_r+0x3ca>
  40ec62:	2a00      	cmp	r2, #0
  40ec64:	f280 8156 	bge.w	40ef14 <_malloc_r+0x3f0>
  40ec68:	68db      	ldr	r3, [r3, #12]
  40ec6a:	429c      	cmp	r4, r3
  40ec6c:	f000 813f 	beq.w	40eeee <_malloc_r+0x3ca>
  40ec70:	6859      	ldr	r1, [r3, #4]
  40ec72:	f021 0103 	bic.w	r1, r1, #3
  40ec76:	1b4a      	subs	r2, r1, r5
  40ec78:	2a0f      	cmp	r2, #15
  40ec7a:	ddf2      	ble.n	40ec62 <_malloc_r+0x13e>
  40ec7c:	461c      	mov	r4, r3
  40ec7e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40ec82:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40ec86:	1959      	adds	r1, r3, r5
  40ec88:	f045 0901 	orr.w	r9, r5, #1
  40ec8c:	f042 0501 	orr.w	r5, r2, #1
  40ec90:	f8c3 9004 	str.w	r9, [r3, #4]
  40ec94:	4630      	mov	r0, r6
  40ec96:	f8c8 c00c 	str.w	ip, [r8, #12]
  40ec9a:	f8cc 8008 	str.w	r8, [ip, #8]
  40ec9e:	6179      	str	r1, [r7, #20]
  40eca0:	6139      	str	r1, [r7, #16]
  40eca2:	f8c1 e00c 	str.w	lr, [r1, #12]
  40eca6:	f8c1 e008 	str.w	lr, [r1, #8]
  40ecaa:	604d      	str	r5, [r1, #4]
  40ecac:	508a      	str	r2, [r1, r2]
  40ecae:	f000 fabb 	bl	40f228 <__malloc_unlock>
  40ecb2:	e763      	b.n	40eb7c <_malloc_r+0x58>
  40ecb4:	217e      	movs	r1, #126	; 0x7e
  40ecb6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40ecba:	e77b      	b.n	40ebb4 <_malloc_r+0x90>
  40ecbc:	4422      	add	r2, r4
  40ecbe:	68e3      	ldr	r3, [r4, #12]
  40ecc0:	6850      	ldr	r0, [r2, #4]
  40ecc2:	68a1      	ldr	r1, [r4, #8]
  40ecc4:	f040 0501 	orr.w	r5, r0, #1
  40ecc8:	60cb      	str	r3, [r1, #12]
  40ecca:	4630      	mov	r0, r6
  40eccc:	6099      	str	r1, [r3, #8]
  40ecce:	6055      	str	r5, [r2, #4]
  40ecd0:	f000 faaa 	bl	40f228 <__malloc_unlock>
  40ecd4:	3408      	adds	r4, #8
  40ecd6:	4620      	mov	r0, r4
  40ecd8:	b003      	add	sp, #12
  40ecda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecde:	4421      	add	r1, r4
  40ece0:	4630      	mov	r0, r6
  40ece2:	684b      	ldr	r3, [r1, #4]
  40ece4:	f043 0301 	orr.w	r3, r3, #1
  40ece8:	604b      	str	r3, [r1, #4]
  40ecea:	f000 fa9d 	bl	40f228 <__malloc_unlock>
  40ecee:	3408      	adds	r4, #8
  40ecf0:	4620      	mov	r0, r4
  40ecf2:	b003      	add	sp, #12
  40ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecf8:	68bc      	ldr	r4, [r7, #8]
  40ecfa:	6863      	ldr	r3, [r4, #4]
  40ecfc:	f023 0903 	bic.w	r9, r3, #3
  40ed00:	45a9      	cmp	r9, r5
  40ed02:	d304      	bcc.n	40ed0e <_malloc_r+0x1ea>
  40ed04:	ebc5 0309 	rsb	r3, r5, r9
  40ed08:	2b0f      	cmp	r3, #15
  40ed0a:	f300 8091 	bgt.w	40ee30 <_malloc_r+0x30c>
  40ed0e:	4b51      	ldr	r3, [pc, #324]	; (40ee54 <_malloc_r+0x330>)
  40ed10:	4a51      	ldr	r2, [pc, #324]	; (40ee58 <_malloc_r+0x334>)
  40ed12:	6819      	ldr	r1, [r3, #0]
  40ed14:	6813      	ldr	r3, [r2, #0]
  40ed16:	3301      	adds	r3, #1
  40ed18:	eb05 0a01 	add.w	sl, r5, r1
  40ed1c:	eb04 0b09 	add.w	fp, r4, r9
  40ed20:	f000 8161 	beq.w	40efe6 <_malloc_r+0x4c2>
  40ed24:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40ed28:	f10a 0a0f 	add.w	sl, sl, #15
  40ed2c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  40ed30:	f02a 0a0f 	bic.w	sl, sl, #15
  40ed34:	4630      	mov	r0, r6
  40ed36:	4651      	mov	r1, sl
  40ed38:	9201      	str	r2, [sp, #4]
  40ed3a:	f000 fa77 	bl	40f22c <_sbrk_r>
  40ed3e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40ed42:	4680      	mov	r8, r0
  40ed44:	9a01      	ldr	r2, [sp, #4]
  40ed46:	f000 8100 	beq.w	40ef4a <_malloc_r+0x426>
  40ed4a:	4583      	cmp	fp, r0
  40ed4c:	f200 80fa 	bhi.w	40ef44 <_malloc_r+0x420>
  40ed50:	f8df c110 	ldr.w	ip, [pc, #272]	; 40ee64 <_malloc_r+0x340>
  40ed54:	f8dc 3000 	ldr.w	r3, [ip]
  40ed58:	45c3      	cmp	fp, r8
  40ed5a:	4453      	add	r3, sl
  40ed5c:	f8cc 3000 	str.w	r3, [ip]
  40ed60:	f000 814a 	beq.w	40eff8 <_malloc_r+0x4d4>
  40ed64:	6812      	ldr	r2, [r2, #0]
  40ed66:	493c      	ldr	r1, [pc, #240]	; (40ee58 <_malloc_r+0x334>)
  40ed68:	3201      	adds	r2, #1
  40ed6a:	bf1b      	ittet	ne
  40ed6c:	ebcb 0b08 	rsbne	fp, fp, r8
  40ed70:	445b      	addne	r3, fp
  40ed72:	f8c1 8000 	streq.w	r8, [r1]
  40ed76:	f8cc 3000 	strne.w	r3, [ip]
  40ed7a:	f018 0307 	ands.w	r3, r8, #7
  40ed7e:	f000 8113 	beq.w	40efa8 <_malloc_r+0x484>
  40ed82:	f1c3 0208 	rsb	r2, r3, #8
  40ed86:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  40ed8a:	4490      	add	r8, r2
  40ed8c:	3308      	adds	r3, #8
  40ed8e:	44c2      	add	sl, r8
  40ed90:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  40ed94:	ebca 0a03 	rsb	sl, sl, r3
  40ed98:	4651      	mov	r1, sl
  40ed9a:	4630      	mov	r0, r6
  40ed9c:	f8cd c004 	str.w	ip, [sp, #4]
  40eda0:	f000 fa44 	bl	40f22c <_sbrk_r>
  40eda4:	1c43      	adds	r3, r0, #1
  40eda6:	f8dd c004 	ldr.w	ip, [sp, #4]
  40edaa:	f000 8135 	beq.w	40f018 <_malloc_r+0x4f4>
  40edae:	ebc8 0200 	rsb	r2, r8, r0
  40edb2:	4452      	add	r2, sl
  40edb4:	f042 0201 	orr.w	r2, r2, #1
  40edb8:	f8dc 3000 	ldr.w	r3, [ip]
  40edbc:	f8c7 8008 	str.w	r8, [r7, #8]
  40edc0:	4453      	add	r3, sl
  40edc2:	42bc      	cmp	r4, r7
  40edc4:	f8c8 2004 	str.w	r2, [r8, #4]
  40edc8:	f8cc 3000 	str.w	r3, [ip]
  40edcc:	f8df a094 	ldr.w	sl, [pc, #148]	; 40ee64 <_malloc_r+0x340>
  40edd0:	d015      	beq.n	40edfe <_malloc_r+0x2da>
  40edd2:	f1b9 0f0f 	cmp.w	r9, #15
  40edd6:	f240 80ea 	bls.w	40efae <_malloc_r+0x48a>
  40edda:	6861      	ldr	r1, [r4, #4]
  40eddc:	f1a9 020c 	sub.w	r2, r9, #12
  40ede0:	f022 0207 	bic.w	r2, r2, #7
  40ede4:	f001 0e01 	and.w	lr, r1, #1
  40ede8:	18a1      	adds	r1, r4, r2
  40edea:	2005      	movs	r0, #5
  40edec:	ea42 0e0e 	orr.w	lr, r2, lr
  40edf0:	2a0f      	cmp	r2, #15
  40edf2:	f8c4 e004 	str.w	lr, [r4, #4]
  40edf6:	6048      	str	r0, [r1, #4]
  40edf8:	6088      	str	r0, [r1, #8]
  40edfa:	f200 8111 	bhi.w	40f020 <_malloc_r+0x4fc>
  40edfe:	4a17      	ldr	r2, [pc, #92]	; (40ee5c <_malloc_r+0x338>)
  40ee00:	68bc      	ldr	r4, [r7, #8]
  40ee02:	6811      	ldr	r1, [r2, #0]
  40ee04:	428b      	cmp	r3, r1
  40ee06:	bf88      	it	hi
  40ee08:	6013      	strhi	r3, [r2, #0]
  40ee0a:	4a15      	ldr	r2, [pc, #84]	; (40ee60 <_malloc_r+0x33c>)
  40ee0c:	6811      	ldr	r1, [r2, #0]
  40ee0e:	428b      	cmp	r3, r1
  40ee10:	bf88      	it	hi
  40ee12:	6013      	strhi	r3, [r2, #0]
  40ee14:	6862      	ldr	r2, [r4, #4]
  40ee16:	f022 0203 	bic.w	r2, r2, #3
  40ee1a:	4295      	cmp	r5, r2
  40ee1c:	ebc5 0302 	rsb	r3, r5, r2
  40ee20:	d801      	bhi.n	40ee26 <_malloc_r+0x302>
  40ee22:	2b0f      	cmp	r3, #15
  40ee24:	dc04      	bgt.n	40ee30 <_malloc_r+0x30c>
  40ee26:	4630      	mov	r0, r6
  40ee28:	f000 f9fe 	bl	40f228 <__malloc_unlock>
  40ee2c:	2400      	movs	r4, #0
  40ee2e:	e6a5      	b.n	40eb7c <_malloc_r+0x58>
  40ee30:	1962      	adds	r2, r4, r5
  40ee32:	f043 0301 	orr.w	r3, r3, #1
  40ee36:	f045 0501 	orr.w	r5, r5, #1
  40ee3a:	6065      	str	r5, [r4, #4]
  40ee3c:	4630      	mov	r0, r6
  40ee3e:	60ba      	str	r2, [r7, #8]
  40ee40:	6053      	str	r3, [r2, #4]
  40ee42:	f000 f9f1 	bl	40f228 <__malloc_unlock>
  40ee46:	3408      	adds	r4, #8
  40ee48:	4620      	mov	r0, r4
  40ee4a:	b003      	add	sp, #12
  40ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ee50:	2000091c 	.word	0x2000091c
  40ee54:	20001f48 	.word	0x20001f48
  40ee58:	20000d28 	.word	0x20000d28
  40ee5c:	20001f44 	.word	0x20001f44
  40ee60:	20001f40 	.word	0x20001f40
  40ee64:	20001f4c 	.word	0x20001f4c
  40ee68:	f1bc 0f14 	cmp.w	ip, #20
  40ee6c:	d961      	bls.n	40ef32 <_malloc_r+0x40e>
  40ee6e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40ee72:	f200 808f 	bhi.w	40ef94 <_malloc_r+0x470>
  40ee76:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40ee7a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40ee7e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40ee82:	e697      	b.n	40ebb4 <_malloc_r+0x90>
  40ee84:	0a4b      	lsrs	r3, r1, #9
  40ee86:	2b04      	cmp	r3, #4
  40ee88:	d958      	bls.n	40ef3c <_malloc_r+0x418>
  40ee8a:	2b14      	cmp	r3, #20
  40ee8c:	f200 80ae 	bhi.w	40efec <_malloc_r+0x4c8>
  40ee90:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  40ee94:	0050      	lsls	r0, r2, #1
  40ee96:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40ee9a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 40f058 <_malloc_r+0x534>
  40ee9e:	6883      	ldr	r3, [r0, #8]
  40eea0:	4283      	cmp	r3, r0
  40eea2:	f000 808a 	beq.w	40efba <_malloc_r+0x496>
  40eea6:	685a      	ldr	r2, [r3, #4]
  40eea8:	f022 0203 	bic.w	r2, r2, #3
  40eeac:	4291      	cmp	r1, r2
  40eeae:	d202      	bcs.n	40eeb6 <_malloc_r+0x392>
  40eeb0:	689b      	ldr	r3, [r3, #8]
  40eeb2:	4298      	cmp	r0, r3
  40eeb4:	d1f7      	bne.n	40eea6 <_malloc_r+0x382>
  40eeb6:	68d9      	ldr	r1, [r3, #12]
  40eeb8:	687a      	ldr	r2, [r7, #4]
  40eeba:	60e1      	str	r1, [r4, #12]
  40eebc:	60a3      	str	r3, [r4, #8]
  40eebe:	608c      	str	r4, [r1, #8]
  40eec0:	60dc      	str	r4, [r3, #12]
  40eec2:	e6b7      	b.n	40ec34 <_malloc_r+0x110>
  40eec4:	1961      	adds	r1, r4, r5
  40eec6:	f042 0701 	orr.w	r7, r2, #1
  40eeca:	f045 0501 	orr.w	r5, r5, #1
  40eece:	6065      	str	r5, [r4, #4]
  40eed0:	4630      	mov	r0, r6
  40eed2:	6159      	str	r1, [r3, #20]
  40eed4:	6119      	str	r1, [r3, #16]
  40eed6:	f8c1 e00c 	str.w	lr, [r1, #12]
  40eeda:	f8c1 e008 	str.w	lr, [r1, #8]
  40eede:	604f      	str	r7, [r1, #4]
  40eee0:	508a      	str	r2, [r1, r2]
  40eee2:	3408      	adds	r4, #8
  40eee4:	f000 f9a0 	bl	40f228 <__malloc_unlock>
  40eee8:	e648      	b.n	40eb7c <_malloc_r+0x58>
  40eeea:	685a      	ldr	r2, [r3, #4]
  40eeec:	e6a2      	b.n	40ec34 <_malloc_r+0x110>
  40eeee:	f109 0901 	add.w	r9, r9, #1
  40eef2:	f019 0f03 	tst.w	r9, #3
  40eef6:	f104 0408 	add.w	r4, r4, #8
  40eefa:	f47f aeae 	bne.w	40ec5a <_malloc_r+0x136>
  40eefe:	e02d      	b.n	40ef5c <_malloc_r+0x438>
  40ef00:	f104 0308 	add.w	r3, r4, #8
  40ef04:	6964      	ldr	r4, [r4, #20]
  40ef06:	42a3      	cmp	r3, r4
  40ef08:	bf08      	it	eq
  40ef0a:	f10c 0c02 	addeq.w	ip, ip, #2
  40ef0e:	f43f ae67 	beq.w	40ebe0 <_malloc_r+0xbc>
  40ef12:	e623      	b.n	40eb5c <_malloc_r+0x38>
  40ef14:	4419      	add	r1, r3
  40ef16:	461c      	mov	r4, r3
  40ef18:	6848      	ldr	r0, [r1, #4]
  40ef1a:	68db      	ldr	r3, [r3, #12]
  40ef1c:	f854 2f08 	ldr.w	r2, [r4, #8]!
  40ef20:	f040 0501 	orr.w	r5, r0, #1
  40ef24:	604d      	str	r5, [r1, #4]
  40ef26:	4630      	mov	r0, r6
  40ef28:	60d3      	str	r3, [r2, #12]
  40ef2a:	609a      	str	r2, [r3, #8]
  40ef2c:	f000 f97c 	bl	40f228 <__malloc_unlock>
  40ef30:	e624      	b.n	40eb7c <_malloc_r+0x58>
  40ef32:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40ef36:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40ef3a:	e63b      	b.n	40ebb4 <_malloc_r+0x90>
  40ef3c:	098a      	lsrs	r2, r1, #6
  40ef3e:	3238      	adds	r2, #56	; 0x38
  40ef40:	0050      	lsls	r0, r2, #1
  40ef42:	e7a8      	b.n	40ee96 <_malloc_r+0x372>
  40ef44:	42bc      	cmp	r4, r7
  40ef46:	f43f af03 	beq.w	40ed50 <_malloc_r+0x22c>
  40ef4a:	68bc      	ldr	r4, [r7, #8]
  40ef4c:	6862      	ldr	r2, [r4, #4]
  40ef4e:	f022 0203 	bic.w	r2, r2, #3
  40ef52:	e762      	b.n	40ee1a <_malloc_r+0x2f6>
  40ef54:	f8d8 8000 	ldr.w	r8, [r8]
  40ef58:	4598      	cmp	r8, r3
  40ef5a:	d17b      	bne.n	40f054 <_malloc_r+0x530>
  40ef5c:	f01c 0f03 	tst.w	ip, #3
  40ef60:	f1a8 0308 	sub.w	r3, r8, #8
  40ef64:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ef68:	d1f4      	bne.n	40ef54 <_malloc_r+0x430>
  40ef6a:	687b      	ldr	r3, [r7, #4]
  40ef6c:	ea23 0300 	bic.w	r3, r3, r0
  40ef70:	607b      	str	r3, [r7, #4]
  40ef72:	0040      	lsls	r0, r0, #1
  40ef74:	4298      	cmp	r0, r3
  40ef76:	f63f aebf 	bhi.w	40ecf8 <_malloc_r+0x1d4>
  40ef7a:	2800      	cmp	r0, #0
  40ef7c:	f43f aebc 	beq.w	40ecf8 <_malloc_r+0x1d4>
  40ef80:	4203      	tst	r3, r0
  40ef82:	46cc      	mov	ip, r9
  40ef84:	f47f ae65 	bne.w	40ec52 <_malloc_r+0x12e>
  40ef88:	0040      	lsls	r0, r0, #1
  40ef8a:	4203      	tst	r3, r0
  40ef8c:	f10c 0c04 	add.w	ip, ip, #4
  40ef90:	d0fa      	beq.n	40ef88 <_malloc_r+0x464>
  40ef92:	e65e      	b.n	40ec52 <_malloc_r+0x12e>
  40ef94:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40ef98:	d81a      	bhi.n	40efd0 <_malloc_r+0x4ac>
  40ef9a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40ef9e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40efa2:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40efa6:	e605      	b.n	40ebb4 <_malloc_r+0x90>
  40efa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40efac:	e6ef      	b.n	40ed8e <_malloc_r+0x26a>
  40efae:	2301      	movs	r3, #1
  40efb0:	f8c8 3004 	str.w	r3, [r8, #4]
  40efb4:	4644      	mov	r4, r8
  40efb6:	2200      	movs	r2, #0
  40efb8:	e72f      	b.n	40ee1a <_malloc_r+0x2f6>
  40efba:	1091      	asrs	r1, r2, #2
  40efbc:	2001      	movs	r0, #1
  40efbe:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40efc2:	fa00 f101 	lsl.w	r1, r0, r1
  40efc6:	430a      	orrs	r2, r1
  40efc8:	f8c8 2004 	str.w	r2, [r8, #4]
  40efcc:	4619      	mov	r1, r3
  40efce:	e774      	b.n	40eeba <_malloc_r+0x396>
  40efd0:	f240 5354 	movw	r3, #1364	; 0x554
  40efd4:	459c      	cmp	ip, r3
  40efd6:	d81b      	bhi.n	40f010 <_malloc_r+0x4ec>
  40efd8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40efdc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40efe0:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40efe4:	e5e6      	b.n	40ebb4 <_malloc_r+0x90>
  40efe6:	f10a 0a10 	add.w	sl, sl, #16
  40efea:	e6a3      	b.n	40ed34 <_malloc_r+0x210>
  40efec:	2b54      	cmp	r3, #84	; 0x54
  40efee:	d81f      	bhi.n	40f030 <_malloc_r+0x50c>
  40eff0:	0b0a      	lsrs	r2, r1, #12
  40eff2:	326e      	adds	r2, #110	; 0x6e
  40eff4:	0050      	lsls	r0, r2, #1
  40eff6:	e74e      	b.n	40ee96 <_malloc_r+0x372>
  40eff8:	f3cb 010b 	ubfx	r1, fp, #0, #12
  40effc:	2900      	cmp	r1, #0
  40effe:	f47f aeb1 	bne.w	40ed64 <_malloc_r+0x240>
  40f002:	eb0a 0109 	add.w	r1, sl, r9
  40f006:	68ba      	ldr	r2, [r7, #8]
  40f008:	f041 0101 	orr.w	r1, r1, #1
  40f00c:	6051      	str	r1, [r2, #4]
  40f00e:	e6f6      	b.n	40edfe <_malloc_r+0x2da>
  40f010:	21fc      	movs	r1, #252	; 0xfc
  40f012:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40f016:	e5cd      	b.n	40ebb4 <_malloc_r+0x90>
  40f018:	2201      	movs	r2, #1
  40f01a:	f04f 0a00 	mov.w	sl, #0
  40f01e:	e6cb      	b.n	40edb8 <_malloc_r+0x294>
  40f020:	f104 0108 	add.w	r1, r4, #8
  40f024:	4630      	mov	r0, r6
  40f026:	f004 ff63 	bl	413ef0 <_free_r>
  40f02a:	f8da 3000 	ldr.w	r3, [sl]
  40f02e:	e6e6      	b.n	40edfe <_malloc_r+0x2da>
  40f030:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40f034:	d803      	bhi.n	40f03e <_malloc_r+0x51a>
  40f036:	0bca      	lsrs	r2, r1, #15
  40f038:	3277      	adds	r2, #119	; 0x77
  40f03a:	0050      	lsls	r0, r2, #1
  40f03c:	e72b      	b.n	40ee96 <_malloc_r+0x372>
  40f03e:	f240 5254 	movw	r2, #1364	; 0x554
  40f042:	4293      	cmp	r3, r2
  40f044:	d803      	bhi.n	40f04e <_malloc_r+0x52a>
  40f046:	0c8a      	lsrs	r2, r1, #18
  40f048:	327c      	adds	r2, #124	; 0x7c
  40f04a:	0050      	lsls	r0, r2, #1
  40f04c:	e723      	b.n	40ee96 <_malloc_r+0x372>
  40f04e:	20fc      	movs	r0, #252	; 0xfc
  40f050:	227e      	movs	r2, #126	; 0x7e
  40f052:	e720      	b.n	40ee96 <_malloc_r+0x372>
  40f054:	687b      	ldr	r3, [r7, #4]
  40f056:	e78c      	b.n	40ef72 <_malloc_r+0x44e>
  40f058:	2000091c 	.word	0x2000091c

0040f05c <memcpy>:
  40f05c:	4684      	mov	ip, r0
  40f05e:	ea41 0300 	orr.w	r3, r1, r0
  40f062:	f013 0303 	ands.w	r3, r3, #3
  40f066:	d16d      	bne.n	40f144 <memcpy+0xe8>
  40f068:	3a40      	subs	r2, #64	; 0x40
  40f06a:	d341      	bcc.n	40f0f0 <memcpy+0x94>
  40f06c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f070:	f840 3b04 	str.w	r3, [r0], #4
  40f074:	f851 3b04 	ldr.w	r3, [r1], #4
  40f078:	f840 3b04 	str.w	r3, [r0], #4
  40f07c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f080:	f840 3b04 	str.w	r3, [r0], #4
  40f084:	f851 3b04 	ldr.w	r3, [r1], #4
  40f088:	f840 3b04 	str.w	r3, [r0], #4
  40f08c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f090:	f840 3b04 	str.w	r3, [r0], #4
  40f094:	f851 3b04 	ldr.w	r3, [r1], #4
  40f098:	f840 3b04 	str.w	r3, [r0], #4
  40f09c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0a0:	f840 3b04 	str.w	r3, [r0], #4
  40f0a4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0a8:	f840 3b04 	str.w	r3, [r0], #4
  40f0ac:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0b0:	f840 3b04 	str.w	r3, [r0], #4
  40f0b4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0b8:	f840 3b04 	str.w	r3, [r0], #4
  40f0bc:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0c0:	f840 3b04 	str.w	r3, [r0], #4
  40f0c4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0c8:	f840 3b04 	str.w	r3, [r0], #4
  40f0cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0d0:	f840 3b04 	str.w	r3, [r0], #4
  40f0d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0d8:	f840 3b04 	str.w	r3, [r0], #4
  40f0dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0e0:	f840 3b04 	str.w	r3, [r0], #4
  40f0e4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0e8:	f840 3b04 	str.w	r3, [r0], #4
  40f0ec:	3a40      	subs	r2, #64	; 0x40
  40f0ee:	d2bd      	bcs.n	40f06c <memcpy+0x10>
  40f0f0:	3230      	adds	r2, #48	; 0x30
  40f0f2:	d311      	bcc.n	40f118 <memcpy+0xbc>
  40f0f4:	f851 3b04 	ldr.w	r3, [r1], #4
  40f0f8:	f840 3b04 	str.w	r3, [r0], #4
  40f0fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40f100:	f840 3b04 	str.w	r3, [r0], #4
  40f104:	f851 3b04 	ldr.w	r3, [r1], #4
  40f108:	f840 3b04 	str.w	r3, [r0], #4
  40f10c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f110:	f840 3b04 	str.w	r3, [r0], #4
  40f114:	3a10      	subs	r2, #16
  40f116:	d2ed      	bcs.n	40f0f4 <memcpy+0x98>
  40f118:	320c      	adds	r2, #12
  40f11a:	d305      	bcc.n	40f128 <memcpy+0xcc>
  40f11c:	f851 3b04 	ldr.w	r3, [r1], #4
  40f120:	f840 3b04 	str.w	r3, [r0], #4
  40f124:	3a04      	subs	r2, #4
  40f126:	d2f9      	bcs.n	40f11c <memcpy+0xc0>
  40f128:	3204      	adds	r2, #4
  40f12a:	d008      	beq.n	40f13e <memcpy+0xe2>
  40f12c:	07d2      	lsls	r2, r2, #31
  40f12e:	bf1c      	itt	ne
  40f130:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f134:	f800 3b01 	strbne.w	r3, [r0], #1
  40f138:	d301      	bcc.n	40f13e <memcpy+0xe2>
  40f13a:	880b      	ldrh	r3, [r1, #0]
  40f13c:	8003      	strh	r3, [r0, #0]
  40f13e:	4660      	mov	r0, ip
  40f140:	4770      	bx	lr
  40f142:	bf00      	nop
  40f144:	2a08      	cmp	r2, #8
  40f146:	d313      	bcc.n	40f170 <memcpy+0x114>
  40f148:	078b      	lsls	r3, r1, #30
  40f14a:	d08d      	beq.n	40f068 <memcpy+0xc>
  40f14c:	f010 0303 	ands.w	r3, r0, #3
  40f150:	d08a      	beq.n	40f068 <memcpy+0xc>
  40f152:	f1c3 0304 	rsb	r3, r3, #4
  40f156:	1ad2      	subs	r2, r2, r3
  40f158:	07db      	lsls	r3, r3, #31
  40f15a:	bf1c      	itt	ne
  40f15c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f160:	f800 3b01 	strbne.w	r3, [r0], #1
  40f164:	d380      	bcc.n	40f068 <memcpy+0xc>
  40f166:	f831 3b02 	ldrh.w	r3, [r1], #2
  40f16a:	f820 3b02 	strh.w	r3, [r0], #2
  40f16e:	e77b      	b.n	40f068 <memcpy+0xc>
  40f170:	3a04      	subs	r2, #4
  40f172:	d3d9      	bcc.n	40f128 <memcpy+0xcc>
  40f174:	3a01      	subs	r2, #1
  40f176:	f811 3b01 	ldrb.w	r3, [r1], #1
  40f17a:	f800 3b01 	strb.w	r3, [r0], #1
  40f17e:	d2f9      	bcs.n	40f174 <memcpy+0x118>
  40f180:	780b      	ldrb	r3, [r1, #0]
  40f182:	7003      	strb	r3, [r0, #0]
  40f184:	784b      	ldrb	r3, [r1, #1]
  40f186:	7043      	strb	r3, [r0, #1]
  40f188:	788b      	ldrb	r3, [r1, #2]
  40f18a:	7083      	strb	r3, [r0, #2]
  40f18c:	4660      	mov	r0, ip
  40f18e:	4770      	bx	lr

0040f190 <memset>:
  40f190:	b4f0      	push	{r4, r5, r6, r7}
  40f192:	0784      	lsls	r4, r0, #30
  40f194:	d043      	beq.n	40f21e <memset+0x8e>
  40f196:	1e54      	subs	r4, r2, #1
  40f198:	2a00      	cmp	r2, #0
  40f19a:	d03e      	beq.n	40f21a <memset+0x8a>
  40f19c:	b2cd      	uxtb	r5, r1
  40f19e:	4603      	mov	r3, r0
  40f1a0:	e003      	b.n	40f1aa <memset+0x1a>
  40f1a2:	1e62      	subs	r2, r4, #1
  40f1a4:	2c00      	cmp	r4, #0
  40f1a6:	d038      	beq.n	40f21a <memset+0x8a>
  40f1a8:	4614      	mov	r4, r2
  40f1aa:	f803 5b01 	strb.w	r5, [r3], #1
  40f1ae:	079a      	lsls	r2, r3, #30
  40f1b0:	d1f7      	bne.n	40f1a2 <memset+0x12>
  40f1b2:	2c03      	cmp	r4, #3
  40f1b4:	d92a      	bls.n	40f20c <memset+0x7c>
  40f1b6:	b2cd      	uxtb	r5, r1
  40f1b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40f1bc:	2c0f      	cmp	r4, #15
  40f1be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40f1c2:	d915      	bls.n	40f1f0 <memset+0x60>
  40f1c4:	f1a4 0710 	sub.w	r7, r4, #16
  40f1c8:	093f      	lsrs	r7, r7, #4
  40f1ca:	f103 0610 	add.w	r6, r3, #16
  40f1ce:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40f1d2:	461a      	mov	r2, r3
  40f1d4:	6015      	str	r5, [r2, #0]
  40f1d6:	6055      	str	r5, [r2, #4]
  40f1d8:	6095      	str	r5, [r2, #8]
  40f1da:	60d5      	str	r5, [r2, #12]
  40f1dc:	3210      	adds	r2, #16
  40f1de:	42b2      	cmp	r2, r6
  40f1e0:	d1f8      	bne.n	40f1d4 <memset+0x44>
  40f1e2:	f004 040f 	and.w	r4, r4, #15
  40f1e6:	3701      	adds	r7, #1
  40f1e8:	2c03      	cmp	r4, #3
  40f1ea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40f1ee:	d90d      	bls.n	40f20c <memset+0x7c>
  40f1f0:	461e      	mov	r6, r3
  40f1f2:	4622      	mov	r2, r4
  40f1f4:	3a04      	subs	r2, #4
  40f1f6:	2a03      	cmp	r2, #3
  40f1f8:	f846 5b04 	str.w	r5, [r6], #4
  40f1fc:	d8fa      	bhi.n	40f1f4 <memset+0x64>
  40f1fe:	1f22      	subs	r2, r4, #4
  40f200:	f022 0203 	bic.w	r2, r2, #3
  40f204:	3204      	adds	r2, #4
  40f206:	4413      	add	r3, r2
  40f208:	f004 0403 	and.w	r4, r4, #3
  40f20c:	b12c      	cbz	r4, 40f21a <memset+0x8a>
  40f20e:	b2c9      	uxtb	r1, r1
  40f210:	441c      	add	r4, r3
  40f212:	f803 1b01 	strb.w	r1, [r3], #1
  40f216:	42a3      	cmp	r3, r4
  40f218:	d1fb      	bne.n	40f212 <memset+0x82>
  40f21a:	bcf0      	pop	{r4, r5, r6, r7}
  40f21c:	4770      	bx	lr
  40f21e:	4614      	mov	r4, r2
  40f220:	4603      	mov	r3, r0
  40f222:	e7c6      	b.n	40f1b2 <memset+0x22>

0040f224 <__malloc_lock>:
  40f224:	4770      	bx	lr
  40f226:	bf00      	nop

0040f228 <__malloc_unlock>:
  40f228:	4770      	bx	lr
  40f22a:	bf00      	nop

0040f22c <_sbrk_r>:
  40f22c:	b538      	push	{r3, r4, r5, lr}
  40f22e:	4c07      	ldr	r4, [pc, #28]	; (40f24c <_sbrk_r+0x20>)
  40f230:	2300      	movs	r3, #0
  40f232:	4605      	mov	r5, r0
  40f234:	4608      	mov	r0, r1
  40f236:	6023      	str	r3, [r4, #0]
  40f238:	f7fe fffe 	bl	40e238 <_sbrk>
  40f23c:	1c43      	adds	r3, r0, #1
  40f23e:	d000      	beq.n	40f242 <_sbrk_r+0x16>
  40f240:	bd38      	pop	{r3, r4, r5, pc}
  40f242:	6823      	ldr	r3, [r4, #0]
  40f244:	2b00      	cmp	r3, #0
  40f246:	d0fb      	beq.n	40f240 <_sbrk_r+0x14>
  40f248:	602b      	str	r3, [r5, #0]
  40f24a:	bd38      	pop	{r3, r4, r5, pc}
  40f24c:	20003498 	.word	0x20003498

0040f250 <setbuf>:
  40f250:	2900      	cmp	r1, #0
  40f252:	bf0c      	ite	eq
  40f254:	2202      	moveq	r2, #2
  40f256:	2200      	movne	r2, #0
  40f258:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f25c:	f000 b800 	b.w	40f260 <setvbuf>

0040f260 <setvbuf>:
  40f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f264:	4c3c      	ldr	r4, [pc, #240]	; (40f358 <setvbuf+0xf8>)
  40f266:	6825      	ldr	r5, [r4, #0]
  40f268:	4688      	mov	r8, r1
  40f26a:	4604      	mov	r4, r0
  40f26c:	4616      	mov	r6, r2
  40f26e:	461f      	mov	r7, r3
  40f270:	b115      	cbz	r5, 40f278 <setvbuf+0x18>
  40f272:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40f274:	2b00      	cmp	r3, #0
  40f276:	d04f      	beq.n	40f318 <setvbuf+0xb8>
  40f278:	2e02      	cmp	r6, #2
  40f27a:	d830      	bhi.n	40f2de <setvbuf+0x7e>
  40f27c:	2f00      	cmp	r7, #0
  40f27e:	db2e      	blt.n	40f2de <setvbuf+0x7e>
  40f280:	4628      	mov	r0, r5
  40f282:	4621      	mov	r1, r4
  40f284:	f004 fcd6 	bl	413c34 <_fflush_r>
  40f288:	89a3      	ldrh	r3, [r4, #12]
  40f28a:	2200      	movs	r2, #0
  40f28c:	6062      	str	r2, [r4, #4]
  40f28e:	61a2      	str	r2, [r4, #24]
  40f290:	061a      	lsls	r2, r3, #24
  40f292:	d428      	bmi.n	40f2e6 <setvbuf+0x86>
  40f294:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40f298:	b29b      	uxth	r3, r3
  40f29a:	2e02      	cmp	r6, #2
  40f29c:	81a3      	strh	r3, [r4, #12]
  40f29e:	d02d      	beq.n	40f2fc <setvbuf+0x9c>
  40f2a0:	f1b8 0f00 	cmp.w	r8, #0
  40f2a4:	d03c      	beq.n	40f320 <setvbuf+0xc0>
  40f2a6:	2e01      	cmp	r6, #1
  40f2a8:	d013      	beq.n	40f2d2 <setvbuf+0x72>
  40f2aa:	b29b      	uxth	r3, r3
  40f2ac:	f003 0008 	and.w	r0, r3, #8
  40f2b0:	4a2a      	ldr	r2, [pc, #168]	; (40f35c <setvbuf+0xfc>)
  40f2b2:	63ea      	str	r2, [r5, #60]	; 0x3c
  40f2b4:	b280      	uxth	r0, r0
  40f2b6:	f8c4 8000 	str.w	r8, [r4]
  40f2ba:	f8c4 8010 	str.w	r8, [r4, #16]
  40f2be:	6167      	str	r7, [r4, #20]
  40f2c0:	b178      	cbz	r0, 40f2e2 <setvbuf+0x82>
  40f2c2:	f013 0f03 	tst.w	r3, #3
  40f2c6:	bf18      	it	ne
  40f2c8:	2700      	movne	r7, #0
  40f2ca:	60a7      	str	r7, [r4, #8]
  40f2cc:	2000      	movs	r0, #0
  40f2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f2d2:	f043 0301 	orr.w	r3, r3, #1
  40f2d6:	427a      	negs	r2, r7
  40f2d8:	81a3      	strh	r3, [r4, #12]
  40f2da:	61a2      	str	r2, [r4, #24]
  40f2dc:	e7e5      	b.n	40f2aa <setvbuf+0x4a>
  40f2de:	f04f 30ff 	mov.w	r0, #4294967295
  40f2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f2e6:	4628      	mov	r0, r5
  40f2e8:	6921      	ldr	r1, [r4, #16]
  40f2ea:	f004 fe01 	bl	413ef0 <_free_r>
  40f2ee:	89a3      	ldrh	r3, [r4, #12]
  40f2f0:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40f2f4:	b29b      	uxth	r3, r3
  40f2f6:	2e02      	cmp	r6, #2
  40f2f8:	81a3      	strh	r3, [r4, #12]
  40f2fa:	d1d1      	bne.n	40f2a0 <setvbuf+0x40>
  40f2fc:	2000      	movs	r0, #0
  40f2fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40f302:	f043 0302 	orr.w	r3, r3, #2
  40f306:	2500      	movs	r5, #0
  40f308:	2101      	movs	r1, #1
  40f30a:	81a3      	strh	r3, [r4, #12]
  40f30c:	60a5      	str	r5, [r4, #8]
  40f30e:	6022      	str	r2, [r4, #0]
  40f310:	6122      	str	r2, [r4, #16]
  40f312:	6161      	str	r1, [r4, #20]
  40f314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f318:	4628      	mov	r0, r5
  40f31a:	f004 fca7 	bl	413c6c <__sinit>
  40f31e:	e7ab      	b.n	40f278 <setvbuf+0x18>
  40f320:	2f00      	cmp	r7, #0
  40f322:	bf08      	it	eq
  40f324:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40f328:	4638      	mov	r0, r7
  40f32a:	f7ff fbeb 	bl	40eb04 <malloc>
  40f32e:	4680      	mov	r8, r0
  40f330:	b128      	cbz	r0, 40f33e <setvbuf+0xde>
  40f332:	89a3      	ldrh	r3, [r4, #12]
  40f334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40f338:	b29b      	uxth	r3, r3
  40f33a:	81a3      	strh	r3, [r4, #12]
  40f33c:	e7b3      	b.n	40f2a6 <setvbuf+0x46>
  40f33e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40f342:	f7ff fbdf 	bl	40eb04 <malloc>
  40f346:	4680      	mov	r8, r0
  40f348:	b918      	cbnz	r0, 40f352 <setvbuf+0xf2>
  40f34a:	89a3      	ldrh	r3, [r4, #12]
  40f34c:	f04f 30ff 	mov.w	r0, #4294967295
  40f350:	e7d5      	b.n	40f2fe <setvbuf+0x9e>
  40f352:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40f356:	e7ec      	b.n	40f332 <setvbuf+0xd2>
  40f358:	20000918 	.word	0x20000918
  40f35c:	00413c61 	.word	0x00413c61

0040f360 <snprintf>:
  40f360:	b40c      	push	{r2, r3}
  40f362:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f364:	4b17      	ldr	r3, [pc, #92]	; (40f3c4 <snprintf+0x64>)
  40f366:	1e0c      	subs	r4, r1, #0
  40f368:	b09d      	sub	sp, #116	; 0x74
  40f36a:	681f      	ldr	r7, [r3, #0]
  40f36c:	db24      	blt.n	40f3b8 <snprintf+0x58>
  40f36e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40f372:	ad23      	add	r5, sp, #140	; 0x8c
  40f374:	bf14      	ite	ne
  40f376:	f104 36ff 	addne.w	r6, r4, #4294967295
  40f37a:	4626      	moveq	r6, r4
  40f37c:	9002      	str	r0, [sp, #8]
  40f37e:	9006      	str	r0, [sp, #24]
  40f380:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f384:	f64f 7eff 	movw	lr, #65535	; 0xffff
  40f388:	462b      	mov	r3, r5
  40f38a:	4638      	mov	r0, r7
  40f38c:	a902      	add	r1, sp, #8
  40f38e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40f390:	9604      	str	r6, [sp, #16]
  40f392:	9607      	str	r6, [sp, #28]
  40f394:	9501      	str	r5, [sp, #4]
  40f396:	f8ad e016 	strh.w	lr, [sp, #22]
  40f39a:	f000 faf9 	bl	40f990 <_svfprintf_r>
  40f39e:	1c43      	adds	r3, r0, #1
  40f3a0:	bfbc      	itt	lt
  40f3a2:	238b      	movlt	r3, #139	; 0x8b
  40f3a4:	603b      	strlt	r3, [r7, #0]
  40f3a6:	b114      	cbz	r4, 40f3ae <snprintf+0x4e>
  40f3a8:	9b02      	ldr	r3, [sp, #8]
  40f3aa:	2200      	movs	r2, #0
  40f3ac:	701a      	strb	r2, [r3, #0]
  40f3ae:	b01d      	add	sp, #116	; 0x74
  40f3b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40f3b4:	b002      	add	sp, #8
  40f3b6:	4770      	bx	lr
  40f3b8:	238b      	movs	r3, #139	; 0x8b
  40f3ba:	603b      	str	r3, [r7, #0]
  40f3bc:	f04f 30ff 	mov.w	r0, #4294967295
  40f3c0:	e7f5      	b.n	40f3ae <snprintf+0x4e>
  40f3c2:	bf00      	nop
  40f3c4:	20000918 	.word	0x20000918

0040f3c8 <sprintf>:
  40f3c8:	b40e      	push	{r1, r2, r3}
  40f3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f3cc:	b09c      	sub	sp, #112	; 0x70
  40f3ce:	ab21      	add	r3, sp, #132	; 0x84
  40f3d0:	490f      	ldr	r1, [pc, #60]	; (40f410 <sprintf+0x48>)
  40f3d2:	f853 2b04 	ldr.w	r2, [r3], #4
  40f3d6:	9301      	str	r3, [sp, #4]
  40f3d8:	4605      	mov	r5, r0
  40f3da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40f3de:	6808      	ldr	r0, [r1, #0]
  40f3e0:	9502      	str	r5, [sp, #8]
  40f3e2:	f44f 7702 	mov.w	r7, #520	; 0x208
  40f3e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40f3ea:	a902      	add	r1, sp, #8
  40f3ec:	9506      	str	r5, [sp, #24]
  40f3ee:	f8ad 7014 	strh.w	r7, [sp, #20]
  40f3f2:	9404      	str	r4, [sp, #16]
  40f3f4:	9407      	str	r4, [sp, #28]
  40f3f6:	f8ad 6016 	strh.w	r6, [sp, #22]
  40f3fa:	f000 fac9 	bl	40f990 <_svfprintf_r>
  40f3fe:	9b02      	ldr	r3, [sp, #8]
  40f400:	2200      	movs	r2, #0
  40f402:	701a      	strb	r2, [r3, #0]
  40f404:	b01c      	add	sp, #112	; 0x70
  40f406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40f40a:	b003      	add	sp, #12
  40f40c:	4770      	bx	lr
  40f40e:	bf00      	nop
  40f410:	20000918 	.word	0x20000918

0040f414 <sscanf>:
  40f414:	b40e      	push	{r1, r2, r3}
  40f416:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f418:	b09c      	sub	sp, #112	; 0x70
  40f41a:	ac21      	add	r4, sp, #132	; 0x84
  40f41c:	f44f 7201 	mov.w	r2, #516	; 0x204
  40f420:	f854 6b04 	ldr.w	r6, [r4], #4
  40f424:	f8ad 2014 	strh.w	r2, [sp, #20]
  40f428:	9002      	str	r0, [sp, #8]
  40f42a:	9006      	str	r0, [sp, #24]
  40f42c:	f000 f9f4 	bl	40f818 <strlen>
  40f430:	4b0c      	ldr	r3, [pc, #48]	; (40f464 <sscanf+0x50>)
  40f432:	9401      	str	r4, [sp, #4]
  40f434:	4605      	mov	r5, r0
  40f436:	4632      	mov	r2, r6
  40f438:	4f0b      	ldr	r7, [pc, #44]	; (40f468 <sscanf+0x54>)
  40f43a:	6818      	ldr	r0, [r3, #0]
  40f43c:	9503      	str	r5, [sp, #12]
  40f43e:	4623      	mov	r3, r4
  40f440:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40f444:	2400      	movs	r4, #0
  40f446:	a902      	add	r1, sp, #8
  40f448:	9507      	str	r5, [sp, #28]
  40f44a:	970a      	str	r7, [sp, #40]	; 0x28
  40f44c:	940e      	str	r4, [sp, #56]	; 0x38
  40f44e:	9413      	str	r4, [sp, #76]	; 0x4c
  40f450:	f8ad 6016 	strh.w	r6, [sp, #22]
  40f454:	f001 fd18 	bl	410e88 <__ssvfscanf_r>
  40f458:	b01c      	add	sp, #112	; 0x70
  40f45a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40f45e:	b003      	add	sp, #12
  40f460:	4770      	bx	lr
  40f462:	bf00      	nop
  40f464:	20000918 	.word	0x20000918
  40f468:	0040f491 	.word	0x0040f491

0040f46c <__sread>:
  40f46c:	b510      	push	{r4, lr}
  40f46e:	460c      	mov	r4, r1
  40f470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f474:	f005 fd94 	bl	414fa0 <_read_r>
  40f478:	2800      	cmp	r0, #0
  40f47a:	db03      	blt.n	40f484 <__sread+0x18>
  40f47c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40f47e:	4403      	add	r3, r0
  40f480:	6523      	str	r3, [r4, #80]	; 0x50
  40f482:	bd10      	pop	{r4, pc}
  40f484:	89a3      	ldrh	r3, [r4, #12]
  40f486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40f48a:	81a3      	strh	r3, [r4, #12]
  40f48c:	bd10      	pop	{r4, pc}
  40f48e:	bf00      	nop

0040f490 <__seofread>:
  40f490:	2000      	movs	r0, #0
  40f492:	4770      	bx	lr

0040f494 <__swrite>:
  40f494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f498:	460c      	mov	r4, r1
  40f49a:	8989      	ldrh	r1, [r1, #12]
  40f49c:	461d      	mov	r5, r3
  40f49e:	05cb      	lsls	r3, r1, #23
  40f4a0:	4616      	mov	r6, r2
  40f4a2:	4607      	mov	r7, r0
  40f4a4:	d506      	bpl.n	40f4b4 <__swrite+0x20>
  40f4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f4aa:	2200      	movs	r2, #0
  40f4ac:	2302      	movs	r3, #2
  40f4ae:	f004 ffbb 	bl	414428 <_lseek_r>
  40f4b2:	89a1      	ldrh	r1, [r4, #12]
  40f4b4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40f4b8:	81a1      	strh	r1, [r4, #12]
  40f4ba:	4638      	mov	r0, r7
  40f4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f4c0:	4632      	mov	r2, r6
  40f4c2:	462b      	mov	r3, r5
  40f4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f4c8:	f003 babe 	b.w	412a48 <_write_r>

0040f4cc <__sseek>:
  40f4cc:	b510      	push	{r4, lr}
  40f4ce:	460c      	mov	r4, r1
  40f4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f4d4:	f004 ffa8 	bl	414428 <_lseek_r>
  40f4d8:	89a3      	ldrh	r3, [r4, #12]
  40f4da:	1c42      	adds	r2, r0, #1
  40f4dc:	bf0e      	itee	eq
  40f4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40f4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40f4e6:	6520      	strne	r0, [r4, #80]	; 0x50
  40f4e8:	81a3      	strh	r3, [r4, #12]
  40f4ea:	bd10      	pop	{r4, pc}

0040f4ec <__sclose>:
  40f4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f4f0:	f003 bb30 	b.w	412b54 <_close_r>

0040f4f4 <strcat>:
  40f4f4:	0783      	lsls	r3, r0, #30
  40f4f6:	b570      	push	{r4, r5, r6, lr}
  40f4f8:	4606      	mov	r6, r0
  40f4fa:	d11f      	bne.n	40f53c <strcat+0x48>
  40f4fc:	6803      	ldr	r3, [r0, #0]
  40f4fe:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40f502:	ea22 0303 	bic.w	r3, r2, r3
  40f506:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40f50a:	bf08      	it	eq
  40f50c:	1d03      	addeq	r3, r0, #4
  40f50e:	d115      	bne.n	40f53c <strcat+0x48>
  40f510:	4618      	mov	r0, r3
  40f512:	f853 4b04 	ldr.w	r4, [r3], #4
  40f516:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40f51a:	ea25 0404 	bic.w	r4, r5, r4
  40f51e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40f522:	d0f5      	beq.n	40f510 <strcat+0x1c>
  40f524:	7803      	ldrb	r3, [r0, #0]
  40f526:	b12b      	cbz	r3, 40f534 <strcat+0x40>
  40f528:	1c43      	adds	r3, r0, #1
  40f52a:	4618      	mov	r0, r3
  40f52c:	3301      	adds	r3, #1
  40f52e:	7804      	ldrb	r4, [r0, #0]
  40f530:	2c00      	cmp	r4, #0
  40f532:	d1fa      	bne.n	40f52a <strcat+0x36>
  40f534:	f000 f912 	bl	40f75c <strcpy>
  40f538:	4630      	mov	r0, r6
  40f53a:	bd70      	pop	{r4, r5, r6, pc}
  40f53c:	4630      	mov	r0, r6
  40f53e:	e7f1      	b.n	40f524 <strcat+0x30>

0040f540 <strcmp>:
  40f540:	ea40 0c01 	orr.w	ip, r0, r1
  40f544:	f01c 0f07 	tst.w	ip, #7
  40f548:	d123      	bne.n	40f592 <strcmp+0x52>
  40f54a:	f1bd 0d10 	subs.w	sp, sp, #16
  40f54e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40f552:	e9cd 6700 	strd	r6, r7, [sp]
  40f556:	f06f 0600 	mvn.w	r6, #0
  40f55a:	f04f 0700 	mov.w	r7, #0
  40f55e:	bf00      	nop
  40f560:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  40f564:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  40f568:	42a2      	cmp	r2, r4
  40f56a:	fa82 fc46 	uadd8	ip, r2, r6
  40f56e:	faa7 fc86 	sel	ip, r7, r6
  40f572:	bf08      	it	eq
  40f574:	f1bc 0f00 	cmpeq.w	ip, #0
  40f578:	f040 80d7 	bne.w	40f72a <strcmp+0x1ea>
  40f57c:	42ab      	cmp	r3, r5
  40f57e:	fa83 fc46 	uadd8	ip, r3, r6
  40f582:	faa7 fc86 	sel	ip, r7, r6
  40f586:	bf08      	it	eq
  40f588:	f1bc 0f00 	cmpeq.w	ip, #0
  40f58c:	f040 80ca 	bne.w	40f724 <strcmp+0x1e4>
  40f590:	e7e6      	b.n	40f560 <strcmp+0x20>
  40f592:	f010 0c03 	ands.w	ip, r0, #3
  40f596:	d021      	beq.n	40f5dc <strcmp+0x9c>
  40f598:	f020 0003 	bic.w	r0, r0, #3
  40f59c:	f850 2b04 	ldr.w	r2, [r0], #4
  40f5a0:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
  40f5a4:	d008      	beq.n	40f5b8 <strcmp+0x78>
  40f5a6:	d20f      	bcs.n	40f5c8 <strcmp+0x88>
  40f5a8:	f811 cb01 	ldrb.w	ip, [r1], #1
  40f5ac:	fa5f f392 	uxtb.w	r3, r2, ror #8
  40f5b0:	ebb3 0c0c 	subs.w	ip, r3, ip
  40f5b4:	d110      	bne.n	40f5d8 <strcmp+0x98>
  40f5b6:	b17b      	cbz	r3, 40f5d8 <strcmp+0x98>
  40f5b8:	f811 cb01 	ldrb.w	ip, [r1], #1
  40f5bc:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
  40f5c0:	ebb3 0c0c 	subs.w	ip, r3, ip
  40f5c4:	d108      	bne.n	40f5d8 <strcmp+0x98>
  40f5c6:	b13b      	cbz	r3, 40f5d8 <strcmp+0x98>
  40f5c8:	f811 cb01 	ldrb.w	ip, [r1], #1
  40f5cc:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
  40f5d0:	ebb3 0c0c 	subs.w	ip, r3, ip
  40f5d4:	d100      	bne.n	40f5d8 <strcmp+0x98>
  40f5d6:	b90b      	cbnz	r3, 40f5dc <strcmp+0x9c>
  40f5d8:	4660      	mov	r0, ip
  40f5da:	4770      	bx	lr
  40f5dc:	f1bd 0d10 	subs.w	sp, sp, #16
  40f5e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40f5e4:	e9cd 6700 	strd	r6, r7, [sp]
  40f5e8:	f06f 0600 	mvn.w	r6, #0
  40f5ec:	f04f 0700 	mov.w	r7, #0
  40f5f0:	f011 0c03 	ands.w	ip, r1, #3
  40f5f4:	d12d      	bne.n	40f652 <strcmp+0x112>
  40f5f6:	f010 0f04 	tst.w	r0, #4
  40f5fa:	d00d      	beq.n	40f618 <strcmp+0xd8>
  40f5fc:	f850 2b04 	ldr.w	r2, [r0], #4
  40f600:	f851 4b04 	ldr.w	r4, [r1], #4
  40f604:	42a2      	cmp	r2, r4
  40f606:	fa82 fc46 	uadd8	ip, r2, r6
  40f60a:	faa7 fc86 	sel	ip, r7, r6
  40f60e:	bf08      	it	eq
  40f610:	f1bc 0f00 	cmpeq.w	ip, #0
  40f614:	f040 8089 	bne.w	40f72a <strcmp+0x1ea>
  40f618:	f011 0f04 	tst.w	r1, #4
  40f61c:	d09f      	beq.n	40f55e <strcmp+0x1e>
  40f61e:	f851 5b04 	ldr.w	r5, [r1], #4
  40f622:	bf00      	nop
  40f624:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  40f628:	42aa      	cmp	r2, r5
  40f62a:	fa82 fc46 	uadd8	ip, r2, r6
  40f62e:	faa7 fc86 	sel	ip, r7, r6
  40f632:	bf08      	it	eq
  40f634:	f1bc 0f00 	cmpeq.w	ip, #0
  40f638:	d171      	bne.n	40f71e <strcmp+0x1de>
  40f63a:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  40f63e:	42a3      	cmp	r3, r4
  40f640:	fa83 fc46 	uadd8	ip, r3, r6
  40f644:	faa7 fc86 	sel	ip, r7, r6
  40f648:	bf08      	it	eq
  40f64a:	f1bc 0f00 	cmpeq.w	ip, #0
  40f64e:	d163      	bne.n	40f718 <strcmp+0x1d8>
  40f650:	e7e8      	b.n	40f624 <strcmp+0xe4>
  40f652:	f021 0103 	bic.w	r1, r1, #3
  40f656:	f1bc 0f02 	cmp.w	ip, #2
  40f65a:	d01e      	beq.n	40f69a <strcmp+0x15a>
  40f65c:	da3b      	bge.n	40f6d6 <strcmp+0x196>
  40f65e:	f851 5b04 	ldr.w	r5, [r1], #4
  40f662:	bf00      	nop
  40f664:	f850 3b04 	ldr.w	r3, [r0], #4
  40f668:	ea4f 2515 	mov.w	r5, r5, lsr #8
  40f66c:	fa83 fc46 	uadd8	ip, r3, r6
  40f670:	faa7 fc86 	sel	ip, r7, r6
  40f674:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
  40f678:	ea03 2216 	and.w	r2, r3, r6, lsr #8
  40f67c:	bf08      	it	eq
  40f67e:	42aa      	cmpeq	r2, r5
  40f680:	d14d      	bne.n	40f71e <strcmp+0x1de>
  40f682:	f851 5b04 	ldr.w	r5, [r1], #4
  40f686:	f1bc 0f00 	cmp.w	ip, #0
  40f68a:	ea82 0303 	eor.w	r3, r2, r3
  40f68e:	ea4f 6205 	mov.w	r2, r5, lsl #24
  40f692:	bf08      	it	eq
  40f694:	4293      	cmpeq	r3, r2
  40f696:	d13c      	bne.n	40f712 <strcmp+0x1d2>
  40f698:	e7e4      	b.n	40f664 <strcmp+0x124>
  40f69a:	f851 5b04 	ldr.w	r5, [r1], #4
  40f69e:	bf00      	nop
  40f6a0:	f850 3b04 	ldr.w	r3, [r0], #4
  40f6a4:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40f6a8:	fa83 fc46 	uadd8	ip, r3, r6
  40f6ac:	faa7 fc86 	sel	ip, r7, r6
  40f6b0:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
  40f6b4:	ea03 4216 	and.w	r2, r3, r6, lsr #16
  40f6b8:	bf08      	it	eq
  40f6ba:	42aa      	cmpeq	r2, r5
  40f6bc:	d12f      	bne.n	40f71e <strcmp+0x1de>
  40f6be:	f851 5b04 	ldr.w	r5, [r1], #4
  40f6c2:	f1bc 0f00 	cmp.w	ip, #0
  40f6c6:	ea82 0303 	eor.w	r3, r2, r3
  40f6ca:	ea4f 4205 	mov.w	r2, r5, lsl #16
  40f6ce:	bf08      	it	eq
  40f6d0:	4293      	cmpeq	r3, r2
  40f6d2:	d11e      	bne.n	40f712 <strcmp+0x1d2>
  40f6d4:	e7e4      	b.n	40f6a0 <strcmp+0x160>
  40f6d6:	f851 5b04 	ldr.w	r5, [r1], #4
  40f6da:	bf00      	nop
  40f6dc:	f850 3b04 	ldr.w	r3, [r0], #4
  40f6e0:	ea4f 6515 	mov.w	r5, r5, lsr #24
  40f6e4:	fa83 fc46 	uadd8	ip, r3, r6
  40f6e8:	faa7 fc86 	sel	ip, r7, r6
  40f6ec:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
  40f6f0:	ea03 6216 	and.w	r2, r3, r6, lsr #24
  40f6f4:	bf08      	it	eq
  40f6f6:	42aa      	cmpeq	r2, r5
  40f6f8:	d111      	bne.n	40f71e <strcmp+0x1de>
  40f6fa:	f851 5b04 	ldr.w	r5, [r1], #4
  40f6fe:	f1bc 0f00 	cmp.w	ip, #0
  40f702:	ea82 0303 	eor.w	r3, r2, r3
  40f706:	ea4f 2205 	mov.w	r2, r5, lsl #8
  40f70a:	bf08      	it	eq
  40f70c:	4293      	cmpeq	r3, r2
  40f70e:	d100      	bne.n	40f712 <strcmp+0x1d2>
  40f710:	e7e4      	b.n	40f6dc <strcmp+0x19c>
  40f712:	ba19      	rev	r1, r3
  40f714:	ba12      	rev	r2, r2
  40f716:	e00a      	b.n	40f72e <strcmp+0x1ee>
  40f718:	ba19      	rev	r1, r3
  40f71a:	ba22      	rev	r2, r4
  40f71c:	e007      	b.n	40f72e <strcmp+0x1ee>
  40f71e:	ba11      	rev	r1, r2
  40f720:	ba2a      	rev	r2, r5
  40f722:	e004      	b.n	40f72e <strcmp+0x1ee>
  40f724:	ba19      	rev	r1, r3
  40f726:	ba2a      	rev	r2, r5
  40f728:	e001      	b.n	40f72e <strcmp+0x1ee>
  40f72a:	ba11      	rev	r1, r2
  40f72c:	ba22      	rev	r2, r4
  40f72e:	fa9c f08c 	rev.w	r0, ip
  40f732:	e9dd 6700 	ldrd	r6, r7, [sp]
  40f736:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40f73a:	f11d 0d10 	adds.w	sp, sp, #16
  40f73e:	b138      	cbz	r0, 40f750 <strcmp+0x210>
  40f740:	fab0 f080 	clz	r0, r0
  40f744:	f1c0 0018 	rsb	r0, r0, #24
  40f748:	fa21 f100 	lsr.w	r1, r1, r0
  40f74c:	fa22 f200 	lsr.w	r2, r2, r0
  40f750:	2001      	movs	r0, #1
  40f752:	4291      	cmp	r1, r2
  40f754:	bf98      	it	ls
  40f756:	4180      	sbcls	r0, r0
  40f758:	4770      	bx	lr
  40f75a:	bf00      	nop

0040f75c <strcpy>:
  40f75c:	ea80 0201 	eor.w	r2, r0, r1
  40f760:	4684      	mov	ip, r0
  40f762:	f012 0f03 	tst.w	r2, #3
  40f766:	d14f      	bne.n	40f808 <strcpy+0xac>
  40f768:	f011 0f03 	tst.w	r1, #3
  40f76c:	d132      	bne.n	40f7d4 <strcpy+0x78>
  40f76e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40f772:	f011 0f04 	tst.w	r1, #4
  40f776:	f851 3b04 	ldr.w	r3, [r1], #4
  40f77a:	d00b      	beq.n	40f794 <strcpy+0x38>
  40f77c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40f780:	439a      	bics	r2, r3
  40f782:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f786:	bf04      	itt	eq
  40f788:	f84c 3b04 	streq.w	r3, [ip], #4
  40f78c:	f851 3b04 	ldreq.w	r3, [r1], #4
  40f790:	d116      	bne.n	40f7c0 <strcpy+0x64>
  40f792:	bf00      	nop
  40f794:	f851 4b04 	ldr.w	r4, [r1], #4
  40f798:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40f79c:	439a      	bics	r2, r3
  40f79e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f7a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40f7a6:	d10b      	bne.n	40f7c0 <strcpy+0x64>
  40f7a8:	f84c 3b04 	str.w	r3, [ip], #4
  40f7ac:	43a2      	bics	r2, r4
  40f7ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f7b2:	bf04      	itt	eq
  40f7b4:	f851 3b04 	ldreq.w	r3, [r1], #4
  40f7b8:	f84c 4b04 	streq.w	r4, [ip], #4
  40f7bc:	d0ea      	beq.n	40f794 <strcpy+0x38>
  40f7be:	4623      	mov	r3, r4
  40f7c0:	f80c 3b01 	strb.w	r3, [ip], #1
  40f7c4:	f013 0fff 	tst.w	r3, #255	; 0xff
  40f7c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  40f7cc:	d1f8      	bne.n	40f7c0 <strcpy+0x64>
  40f7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  40f7d2:	4770      	bx	lr
  40f7d4:	f011 0f01 	tst.w	r1, #1
  40f7d8:	d006      	beq.n	40f7e8 <strcpy+0x8c>
  40f7da:	f811 2b01 	ldrb.w	r2, [r1], #1
  40f7de:	f80c 2b01 	strb.w	r2, [ip], #1
  40f7e2:	2a00      	cmp	r2, #0
  40f7e4:	bf08      	it	eq
  40f7e6:	4770      	bxeq	lr
  40f7e8:	f011 0f02 	tst.w	r1, #2
  40f7ec:	d0bf      	beq.n	40f76e <strcpy+0x12>
  40f7ee:	f831 2b02 	ldrh.w	r2, [r1], #2
  40f7f2:	f012 0fff 	tst.w	r2, #255	; 0xff
  40f7f6:	bf16      	itet	ne
  40f7f8:	f82c 2b02 	strhne.w	r2, [ip], #2
  40f7fc:	f88c 2000 	strbeq.w	r2, [ip]
  40f800:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40f804:	d1b3      	bne.n	40f76e <strcpy+0x12>
  40f806:	4770      	bx	lr
  40f808:	f811 2b01 	ldrb.w	r2, [r1], #1
  40f80c:	f80c 2b01 	strb.w	r2, [ip], #1
  40f810:	2a00      	cmp	r2, #0
  40f812:	d1f9      	bne.n	40f808 <strcpy+0xac>
  40f814:	4770      	bx	lr
  40f816:	bf00      	nop

0040f818 <strlen>:
  40f818:	f020 0103 	bic.w	r1, r0, #3
  40f81c:	f010 0003 	ands.w	r0, r0, #3
  40f820:	f1c0 0000 	rsb	r0, r0, #0
  40f824:	f851 3b04 	ldr.w	r3, [r1], #4
  40f828:	f100 0c04 	add.w	ip, r0, #4
  40f82c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40f830:	f06f 0200 	mvn.w	r2, #0
  40f834:	bf1c      	itt	ne
  40f836:	fa22 f20c 	lsrne.w	r2, r2, ip
  40f83a:	4313      	orrne	r3, r2
  40f83c:	f04f 0c01 	mov.w	ip, #1
  40f840:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40f844:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40f848:	eba3 020c 	sub.w	r2, r3, ip
  40f84c:	ea22 0203 	bic.w	r2, r2, r3
  40f850:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40f854:	bf04      	itt	eq
  40f856:	f851 3b04 	ldreq.w	r3, [r1], #4
  40f85a:	3004      	addeq	r0, #4
  40f85c:	d0f4      	beq.n	40f848 <strlen+0x30>
  40f85e:	f013 0fff 	tst.w	r3, #255	; 0xff
  40f862:	bf1f      	itttt	ne
  40f864:	3001      	addne	r0, #1
  40f866:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40f86a:	3001      	addne	r0, #1
  40f86c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40f870:	bf18      	it	ne
  40f872:	3001      	addne	r0, #1
  40f874:	4770      	bx	lr
  40f876:	bf00      	nop

0040f878 <strncmp>:
  40f878:	b430      	push	{r4, r5}
  40f87a:	2a00      	cmp	r2, #0
  40f87c:	d04a      	beq.n	40f914 <strncmp+0x9c>
  40f87e:	ea40 0301 	orr.w	r3, r0, r1
  40f882:	f013 0303 	ands.w	r3, r3, #3
  40f886:	d12d      	bne.n	40f8e4 <strncmp+0x6c>
  40f888:	2a03      	cmp	r2, #3
  40f88a:	d92b      	bls.n	40f8e4 <strncmp+0x6c>
  40f88c:	6804      	ldr	r4, [r0, #0]
  40f88e:	680d      	ldr	r5, [r1, #0]
  40f890:	42ac      	cmp	r4, r5
  40f892:	d127      	bne.n	40f8e4 <strncmp+0x6c>
  40f894:	3a04      	subs	r2, #4
  40f896:	d03d      	beq.n	40f914 <strncmp+0x9c>
  40f898:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40f89c:	ea25 0404 	bic.w	r4, r5, r4
  40f8a0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40f8a4:	d13c      	bne.n	40f920 <strncmp+0xa8>
  40f8a6:	460c      	mov	r4, r1
  40f8a8:	4603      	mov	r3, r0
  40f8aa:	e00e      	b.n	40f8ca <strncmp+0x52>
  40f8ac:	685b      	ldr	r3, [r3, #4]
  40f8ae:	6864      	ldr	r4, [r4, #4]
  40f8b0:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40f8b4:	42a3      	cmp	r3, r4
  40f8b6:	ea25 0503 	bic.w	r5, r5, r3
  40f8ba:	d113      	bne.n	40f8e4 <strncmp+0x6c>
  40f8bc:	3a04      	subs	r2, #4
  40f8be:	d029      	beq.n	40f914 <strncmp+0x9c>
  40f8c0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40f8c4:	d129      	bne.n	40f91a <strncmp+0xa2>
  40f8c6:	4603      	mov	r3, r0
  40f8c8:	460c      	mov	r4, r1
  40f8ca:	2a03      	cmp	r2, #3
  40f8cc:	f100 0004 	add.w	r0, r0, #4
  40f8d0:	f101 0104 	add.w	r1, r1, #4
  40f8d4:	d8ea      	bhi.n	40f8ac <strncmp+0x34>
  40f8d6:	1e55      	subs	r5, r2, #1
  40f8d8:	b92a      	cbnz	r2, 40f8e6 <strncmp+0x6e>
  40f8da:	7918      	ldrb	r0, [r3, #4]
  40f8dc:	7922      	ldrb	r2, [r4, #4]
  40f8de:	1a80      	subs	r0, r0, r2
  40f8e0:	bc30      	pop	{r4, r5}
  40f8e2:	4770      	bx	lr
  40f8e4:	1e55      	subs	r5, r2, #1
  40f8e6:	7803      	ldrb	r3, [r0, #0]
  40f8e8:	780a      	ldrb	r2, [r1, #0]
  40f8ea:	4293      	cmp	r3, r2
  40f8ec:	d11a      	bne.n	40f924 <strncmp+0xac>
  40f8ee:	b1dd      	cbz	r5, 40f928 <strncmp+0xb0>
  40f8f0:	b1b3      	cbz	r3, 40f920 <strncmp+0xa8>
  40f8f2:	1c6c      	adds	r4, r5, #1
  40f8f4:	440c      	add	r4, r1
  40f8f6:	1c8b      	adds	r3, r1, #2
  40f8f8:	4601      	mov	r1, r0
  40f8fa:	e004      	b.n	40f906 <strncmp+0x8e>
  40f8fc:	42a3      	cmp	r3, r4
  40f8fe:	d00c      	beq.n	40f91a <strncmp+0xa2>
  40f900:	3301      	adds	r3, #1
  40f902:	2800      	cmp	r0, #0
  40f904:	d0ec      	beq.n	40f8e0 <strncmp+0x68>
  40f906:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40f90a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40f90e:	4290      	cmp	r0, r2
  40f910:	d0f4      	beq.n	40f8fc <strncmp+0x84>
  40f912:	e7e4      	b.n	40f8de <strncmp+0x66>
  40f914:	4610      	mov	r0, r2
  40f916:	bc30      	pop	{r4, r5}
  40f918:	4770      	bx	lr
  40f91a:	2000      	movs	r0, #0
  40f91c:	bc30      	pop	{r4, r5}
  40f91e:	4770      	bx	lr
  40f920:	4618      	mov	r0, r3
  40f922:	e7dd      	b.n	40f8e0 <strncmp+0x68>
  40f924:	4618      	mov	r0, r3
  40f926:	e7da      	b.n	40f8de <strncmp+0x66>
  40f928:	4628      	mov	r0, r5
  40f92a:	e7d9      	b.n	40f8e0 <strncmp+0x68>

0040f92c <strncpy>:
  40f92c:	ea40 0301 	orr.w	r3, r0, r1
  40f930:	079b      	lsls	r3, r3, #30
  40f932:	b470      	push	{r4, r5, r6}
  40f934:	d12a      	bne.n	40f98c <strncpy+0x60>
  40f936:	2a03      	cmp	r2, #3
  40f938:	d928      	bls.n	40f98c <strncpy+0x60>
  40f93a:	460c      	mov	r4, r1
  40f93c:	4603      	mov	r3, r0
  40f93e:	4621      	mov	r1, r4
  40f940:	f854 5b04 	ldr.w	r5, [r4], #4
  40f944:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40f948:	ea26 0605 	bic.w	r6, r6, r5
  40f94c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40f950:	d105      	bne.n	40f95e <strncpy+0x32>
  40f952:	3a04      	subs	r2, #4
  40f954:	2a03      	cmp	r2, #3
  40f956:	f843 5b04 	str.w	r5, [r3], #4
  40f95a:	4621      	mov	r1, r4
  40f95c:	d8ef      	bhi.n	40f93e <strncpy+0x12>
  40f95e:	b19a      	cbz	r2, 40f988 <strncpy+0x5c>
  40f960:	780c      	ldrb	r4, [r1, #0]
  40f962:	701c      	strb	r4, [r3, #0]
  40f964:	3a01      	subs	r2, #1
  40f966:	3301      	adds	r3, #1
  40f968:	b13c      	cbz	r4, 40f97a <strncpy+0x4e>
  40f96a:	b16a      	cbz	r2, 40f988 <strncpy+0x5c>
  40f96c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40f970:	f803 4b01 	strb.w	r4, [r3], #1
  40f974:	3a01      	subs	r2, #1
  40f976:	2c00      	cmp	r4, #0
  40f978:	d1f7      	bne.n	40f96a <strncpy+0x3e>
  40f97a:	b12a      	cbz	r2, 40f988 <strncpy+0x5c>
  40f97c:	441a      	add	r2, r3
  40f97e:	2100      	movs	r1, #0
  40f980:	f803 1b01 	strb.w	r1, [r3], #1
  40f984:	4293      	cmp	r3, r2
  40f986:	d1fb      	bne.n	40f980 <strncpy+0x54>
  40f988:	bc70      	pop	{r4, r5, r6}
  40f98a:	4770      	bx	lr
  40f98c:	4603      	mov	r3, r0
  40f98e:	e7e6      	b.n	40f95e <strncpy+0x32>

0040f990 <_svfprintf_r>:
  40f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f994:	b0c9      	sub	sp, #292	; 0x124
  40f996:	4691      	mov	r9, r2
  40f998:	9310      	str	r3, [sp, #64]	; 0x40
  40f99a:	910c      	str	r1, [sp, #48]	; 0x30
  40f99c:	900d      	str	r0, [sp, #52]	; 0x34
  40f99e:	f004 fd3f 	bl	414420 <_localeconv_r>
  40f9a2:	6800      	ldr	r0, [r0, #0]
  40f9a4:	9015      	str	r0, [sp, #84]	; 0x54
  40f9a6:	f7ff ff37 	bl	40f818 <strlen>
  40f9aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40f9ac:	9018      	str	r0, [sp, #96]	; 0x60
  40f9ae:	89a3      	ldrh	r3, [r4, #12]
  40f9b0:	061a      	lsls	r2, r3, #24
  40f9b2:	d503      	bpl.n	40f9bc <_svfprintf_r+0x2c>
  40f9b4:	6923      	ldr	r3, [r4, #16]
  40f9b6:	2b00      	cmp	r3, #0
  40f9b8:	f001 808d 	beq.w	410ad6 <_svfprintf_r+0x1146>
  40f9bc:	ac38      	add	r4, sp, #224	; 0xe0
  40f9be:	46a4      	mov	ip, r4
  40f9c0:	9408      	str	r4, [sp, #32]
  40f9c2:	942b      	str	r4, [sp, #172]	; 0xac
  40f9c4:	2500      	movs	r5, #0
  40f9c6:	2400      	movs	r4, #0
  40f9c8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40f9cc:	2300      	movs	r3, #0
  40f9ce:	9311      	str	r3, [sp, #68]	; 0x44
  40f9d0:	932d      	str	r3, [sp, #180]	; 0xb4
  40f9d2:	932c      	str	r3, [sp, #176]	; 0xb0
  40f9d4:	931a      	str	r3, [sp, #104]	; 0x68
  40f9d6:	9319      	str	r3, [sp, #100]	; 0x64
  40f9d8:	930e      	str	r3, [sp, #56]	; 0x38
  40f9da:	4666      	mov	r6, ip
  40f9dc:	f899 3000 	ldrb.w	r3, [r9]
  40f9e0:	2b00      	cmp	r3, #0
  40f9e2:	f000 80f8 	beq.w	40fbd6 <_svfprintf_r+0x246>
  40f9e6:	2b25      	cmp	r3, #37	; 0x25
  40f9e8:	f000 80f5 	beq.w	40fbd6 <_svfprintf_r+0x246>
  40f9ec:	f109 0201 	add.w	r2, r9, #1
  40f9f0:	e001      	b.n	40f9f6 <_svfprintf_r+0x66>
  40f9f2:	2b25      	cmp	r3, #37	; 0x25
  40f9f4:	d004      	beq.n	40fa00 <_svfprintf_r+0x70>
  40f9f6:	4614      	mov	r4, r2
  40f9f8:	3201      	adds	r2, #1
  40f9fa:	7823      	ldrb	r3, [r4, #0]
  40f9fc:	2b00      	cmp	r3, #0
  40f9fe:	d1f8      	bne.n	40f9f2 <_svfprintf_r+0x62>
  40fa00:	ebc9 0504 	rsb	r5, r9, r4
  40fa04:	b17d      	cbz	r5, 40fa26 <_svfprintf_r+0x96>
  40fa06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fa08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40fa0a:	f8c6 9000 	str.w	r9, [r6]
  40fa0e:	3301      	adds	r3, #1
  40fa10:	442a      	add	r2, r5
  40fa12:	2b07      	cmp	r3, #7
  40fa14:	6075      	str	r5, [r6, #4]
  40fa16:	922d      	str	r2, [sp, #180]	; 0xb4
  40fa18:	932c      	str	r3, [sp, #176]	; 0xb0
  40fa1a:	f300 80c2 	bgt.w	40fba2 <_svfprintf_r+0x212>
  40fa1e:	3608      	adds	r6, #8
  40fa20:	980e      	ldr	r0, [sp, #56]	; 0x38
  40fa22:	4428      	add	r0, r5
  40fa24:	900e      	str	r0, [sp, #56]	; 0x38
  40fa26:	7823      	ldrb	r3, [r4, #0]
  40fa28:	2b00      	cmp	r3, #0
  40fa2a:	f000 80c2 	beq.w	40fbb2 <_svfprintf_r+0x222>
  40fa2e:	2300      	movs	r3, #0
  40fa30:	f894 8001 	ldrb.w	r8, [r4, #1]
  40fa34:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40fa38:	461a      	mov	r2, r3
  40fa3a:	930f      	str	r3, [sp, #60]	; 0x3c
  40fa3c:	9309      	str	r3, [sp, #36]	; 0x24
  40fa3e:	f104 0901 	add.w	r9, r4, #1
  40fa42:	f04f 34ff 	mov.w	r4, #4294967295
  40fa46:	940a      	str	r4, [sp, #40]	; 0x28
  40fa48:	f109 0901 	add.w	r9, r9, #1
  40fa4c:	f1a8 0320 	sub.w	r3, r8, #32
  40fa50:	2b58      	cmp	r3, #88	; 0x58
  40fa52:	f200 83c7 	bhi.w	4101e4 <_svfprintf_r+0x854>
  40fa56:	e8df f013 	tbh	[pc, r3, lsl #1]
  40fa5a:	026a      	.short	0x026a
  40fa5c:	03c503c5 	.word	0x03c503c5
  40fa60:	03c50271 	.word	0x03c50271
  40fa64:	03c503c5 	.word	0x03c503c5
  40fa68:	03c503c5 	.word	0x03c503c5
  40fa6c:	031403c5 	.word	0x031403c5
  40fa70:	03c50364 	.word	0x03c50364
  40fa74:	00c0009d 	.word	0x00c0009d
  40fa78:	027803c5 	.word	0x027803c5
  40fa7c:	027f027f 	.word	0x027f027f
  40fa80:	027f027f 	.word	0x027f027f
  40fa84:	027f027f 	.word	0x027f027f
  40fa88:	027f027f 	.word	0x027f027f
  40fa8c:	03c5027f 	.word	0x03c5027f
  40fa90:	03c503c5 	.word	0x03c503c5
  40fa94:	03c503c5 	.word	0x03c503c5
  40fa98:	03c503c5 	.word	0x03c503c5
  40fa9c:	03c503c5 	.word	0x03c503c5
  40faa0:	029003c5 	.word	0x029003c5
  40faa4:	03c5036f 	.word	0x03c5036f
  40faa8:	03c5036f 	.word	0x03c5036f
  40faac:	03c503c5 	.word	0x03c503c5
  40fab0:	036803c5 	.word	0x036803c5
  40fab4:	03c503c5 	.word	0x03c503c5
  40fab8:	03c50078 	.word	0x03c50078
  40fabc:	03c503c5 	.word	0x03c503c5
  40fac0:	03c503c5 	.word	0x03c503c5
  40fac4:	03c50059 	.word	0x03c50059
  40fac8:	02af03c5 	.word	0x02af03c5
  40facc:	03c503c5 	.word	0x03c503c5
  40fad0:	03c503c5 	.word	0x03c503c5
  40fad4:	03c503c5 	.word	0x03c503c5
  40fad8:	03c503c5 	.word	0x03c503c5
  40fadc:	03c503c5 	.word	0x03c503c5
  40fae0:	03480337 	.word	0x03480337
  40fae4:	036f036f 	.word	0x036f036f
  40fae8:	02ff036f 	.word	0x02ff036f
  40faec:	03c50348 	.word	0x03c50348
  40faf0:	030803c5 	.word	0x030803c5
  40faf4:	02c503c5 	.word	0x02c503c5
  40faf8:	0321007c 	.word	0x0321007c
  40fafc:	03c503a5 	.word	0x03c503a5
  40fb00:	03c502d9 	.word	0x03c502d9
  40fb04:	03c5005f 	.word	0x03c5005f
  40fb08:	00de03c5 	.word	0x00de03c5
  40fb0c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fb10:	f04c 0c10 	orr.w	ip, ip, #16
  40fb14:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40fb18:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fb1a:	06a2      	lsls	r2, r4, #26
  40fb1c:	f100 8356 	bmi.w	4101cc <_svfprintf_r+0x83c>
  40fb20:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fb22:	06e3      	lsls	r3, r4, #27
  40fb24:	f100 85e0 	bmi.w	4106e8 <_svfprintf_r+0xd58>
  40fb28:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fb2c:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40fb30:	f000 85da 	beq.w	4106e8 <_svfprintf_r+0xd58>
  40fb34:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40fb38:	f8bc 4000 	ldrh.w	r4, [ip]
  40fb3c:	f10c 0c04 	add.w	ip, ip, #4
  40fb40:	2500      	movs	r5, #0
  40fb42:	2301      	movs	r3, #1
  40fb44:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40fb48:	e08c      	b.n	40fc64 <_svfprintf_r+0x2d4>
  40fb4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40fb4c:	f045 0510 	orr.w	r5, r5, #16
  40fb50:	9509      	str	r5, [sp, #36]	; 0x24
  40fb52:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fb56:	f01c 0320 	ands.w	r3, ip, #32
  40fb5a:	f040 832c 	bne.w	4101b6 <_svfprintf_r+0x826>
  40fb5e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fb62:	f01c 0210 	ands.w	r2, ip, #16
  40fb66:	f040 85b8 	bne.w	4106da <_svfprintf_r+0xd4a>
  40fb6a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fb6e:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40fb72:	f000 85b2 	beq.w	4106da <_svfprintf_r+0xd4a>
  40fb76:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40fb7a:	f8bc 4000 	ldrh.w	r4, [ip]
  40fb7e:	f10c 0c04 	add.w	ip, ip, #4
  40fb82:	4613      	mov	r3, r2
  40fb84:	2500      	movs	r5, #0
  40fb86:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40fb8a:	e06b      	b.n	40fc64 <_svfprintf_r+0x2d4>
  40fb8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40fb8e:	9310      	str	r3, [sp, #64]	; 0x40
  40fb90:	4264      	negs	r4, r4
  40fb92:	940f      	str	r4, [sp, #60]	; 0x3c
  40fb94:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40fb96:	f045 0504 	orr.w	r5, r5, #4
  40fb9a:	9509      	str	r5, [sp, #36]	; 0x24
  40fb9c:	f899 8000 	ldrb.w	r8, [r9]
  40fba0:	e752      	b.n	40fa48 <_svfprintf_r+0xb8>
  40fba2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40fba4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fba6:	aa2b      	add	r2, sp, #172	; 0xac
  40fba8:	f006 feca 	bl	416940 <__ssprint_r>
  40fbac:	b940      	cbnz	r0, 40fbc0 <_svfprintf_r+0x230>
  40fbae:	ae38      	add	r6, sp, #224	; 0xe0
  40fbb0:	e736      	b.n	40fa20 <_svfprintf_r+0x90>
  40fbb2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40fbb4:	b123      	cbz	r3, 40fbc0 <_svfprintf_r+0x230>
  40fbb6:	980d      	ldr	r0, [sp, #52]	; 0x34
  40fbb8:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fbba:	aa2b      	add	r2, sp, #172	; 0xac
  40fbbc:	f006 fec0 	bl	416940 <__ssprint_r>
  40fbc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40fbc2:	980e      	ldr	r0, [sp, #56]	; 0x38
  40fbc4:	89a3      	ldrh	r3, [r4, #12]
  40fbc6:	f013 0f40 	tst.w	r3, #64	; 0x40
  40fbca:	bf18      	it	ne
  40fbcc:	f04f 30ff 	movne.w	r0, #4294967295
  40fbd0:	b049      	add	sp, #292	; 0x124
  40fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fbd6:	464c      	mov	r4, r9
  40fbd8:	e725      	b.n	40fa26 <_svfprintf_r+0x96>
  40fbda:	f899 8000 	ldrb.w	r8, [r9]
  40fbde:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40fbe2:	f109 0001 	add.w	r0, r9, #1
  40fbe6:	f001 8118 	beq.w	410e1a <_svfprintf_r+0x148a>
  40fbea:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40fbee:	2b09      	cmp	r3, #9
  40fbf0:	bf98      	it	ls
  40fbf2:	2100      	movls	r1, #0
  40fbf4:	f201 8077 	bhi.w	410ce6 <_svfprintf_r+0x1356>
  40fbf8:	f810 8b01 	ldrb.w	r8, [r0], #1
  40fbfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40fc00:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40fc04:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40fc08:	2b09      	cmp	r3, #9
  40fc0a:	d9f5      	bls.n	40fbf8 <_svfprintf_r+0x268>
  40fc0c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40fc10:	910a      	str	r1, [sp, #40]	; 0x28
  40fc12:	4681      	mov	r9, r0
  40fc14:	e71a      	b.n	40fa4c <_svfprintf_r+0xbc>
  40fc16:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40fc18:	4ca1      	ldr	r4, [pc, #644]	; (40fea0 <_svfprintf_r+0x510>)
  40fc1a:	941a      	str	r4, [sp, #104]	; 0x68
  40fc1c:	06af      	lsls	r7, r5, #26
  40fc1e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40fc22:	f140 81d1 	bpl.w	40ffc8 <_svfprintf_r+0x638>
  40fc26:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40fc2a:	f10c 0307 	add.w	r3, ip, #7
  40fc2e:	f023 0307 	bic.w	r3, r3, #7
  40fc32:	f103 0408 	add.w	r4, r3, #8
  40fc36:	9410      	str	r4, [sp, #64]	; 0x40
  40fc38:	e9d3 4500 	ldrd	r4, r5, [r3]
  40fc3c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fc40:	f01c 0f01 	tst.w	ip, #1
  40fc44:	f000 8464 	beq.w	410510 <_svfprintf_r+0xb80>
  40fc48:	ea54 0005 	orrs.w	r0, r4, r5
  40fc4c:	f000 8460 	beq.w	410510 <_svfprintf_r+0xb80>
  40fc50:	2330      	movs	r3, #48	; 0x30
  40fc52:	f04c 0c02 	orr.w	ip, ip, #2
  40fc56:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40fc5a:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40fc5e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40fc62:	2302      	movs	r3, #2
  40fc64:	f04f 0a00 	mov.w	sl, #0
  40fc68:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40fc6c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40fc6e:	2900      	cmp	r1, #0
  40fc70:	db05      	blt.n	40fc7e <_svfprintf_r+0x2ee>
  40fc72:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fc76:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40fc7a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40fc7e:	ea54 0005 	orrs.w	r0, r4, r5
  40fc82:	f040 82c7 	bne.w	410214 <_svfprintf_r+0x884>
  40fc86:	990a      	ldr	r1, [sp, #40]	; 0x28
  40fc88:	2900      	cmp	r1, #0
  40fc8a:	f040 82c3 	bne.w	410214 <_svfprintf_r+0x884>
  40fc8e:	2b00      	cmp	r3, #0
  40fc90:	f040 843a 	bne.w	410508 <_svfprintf_r+0xb78>
  40fc94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fc98:	f01c 0f01 	tst.w	ip, #1
  40fc9c:	f000 8434 	beq.w	410508 <_svfprintf_r+0xb78>
  40fca0:	af48      	add	r7, sp, #288	; 0x120
  40fca2:	2330      	movs	r3, #48	; 0x30
  40fca4:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40fca8:	9d08      	ldr	r5, [sp, #32]
  40fcaa:	1bec      	subs	r4, r5, r7
  40fcac:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40fcb0:	2500      	movs	r5, #0
  40fcb2:	4564      	cmp	r4, ip
  40fcb4:	bfa8      	it	ge
  40fcb6:	46a4      	movge	ip, r4
  40fcb8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40fcbc:	9514      	str	r5, [sp, #80]	; 0x50
  40fcbe:	f1ba 0f00 	cmp.w	sl, #0
  40fcc2:	d002      	beq.n	40fcca <_svfprintf_r+0x33a>
  40fcc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40fcc6:	3501      	adds	r5, #1
  40fcc8:	950b      	str	r5, [sp, #44]	; 0x2c
  40fcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fccc:	f013 0302 	ands.w	r3, r3, #2
  40fcd0:	9312      	str	r3, [sp, #72]	; 0x48
  40fcd2:	d002      	beq.n	40fcda <_svfprintf_r+0x34a>
  40fcd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40fcd6:	3502      	adds	r5, #2
  40fcd8:	950b      	str	r5, [sp, #44]	; 0x2c
  40fcda:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40fcde:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40fce2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40fce6:	f040 8292 	bne.w	41020e <_svfprintf_r+0x87e>
  40fcea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40fcec:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40fcf0:	ebcc 0b05 	rsb	fp, ip, r5
  40fcf4:	f1bb 0f00 	cmp.w	fp, #0
  40fcf8:	f340 8289 	ble.w	41020e <_svfprintf_r+0x87e>
  40fcfc:	f1bb 0f10 	cmp.w	fp, #16
  40fd00:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40fd02:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40fd04:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40fea8 <_svfprintf_r+0x518>
  40fd08:	dd2c      	ble.n	40fd64 <_svfprintf_r+0x3d4>
  40fd0a:	971b      	str	r7, [sp, #108]	; 0x6c
  40fd0c:	4630      	mov	r0, r6
  40fd0e:	4657      	mov	r7, sl
  40fd10:	2510      	movs	r5, #16
  40fd12:	46ca      	mov	sl, r9
  40fd14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40fd16:	46a1      	mov	r9, r4
  40fd18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40fd1a:	e006      	b.n	40fd2a <_svfprintf_r+0x39a>
  40fd1c:	f1ab 0b10 	sub.w	fp, fp, #16
  40fd20:	f1bb 0f10 	cmp.w	fp, #16
  40fd24:	f100 0008 	add.w	r0, r0, #8
  40fd28:	dd17      	ble.n	40fd5a <_svfprintf_r+0x3ca>
  40fd2a:	3201      	adds	r2, #1
  40fd2c:	3110      	adds	r1, #16
  40fd2e:	2a07      	cmp	r2, #7
  40fd30:	912d      	str	r1, [sp, #180]	; 0xb4
  40fd32:	922c      	str	r2, [sp, #176]	; 0xb0
  40fd34:	6007      	str	r7, [r0, #0]
  40fd36:	6045      	str	r5, [r0, #4]
  40fd38:	ddf0      	ble.n	40fd1c <_svfprintf_r+0x38c>
  40fd3a:	4620      	mov	r0, r4
  40fd3c:	4631      	mov	r1, r6
  40fd3e:	aa2b      	add	r2, sp, #172	; 0xac
  40fd40:	f006 fdfe 	bl	416940 <__ssprint_r>
  40fd44:	2800      	cmp	r0, #0
  40fd46:	f47f af3b 	bne.w	40fbc0 <_svfprintf_r+0x230>
  40fd4a:	f1ab 0b10 	sub.w	fp, fp, #16
  40fd4e:	f1bb 0f10 	cmp.w	fp, #16
  40fd52:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40fd54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40fd56:	a838      	add	r0, sp, #224	; 0xe0
  40fd58:	dce7      	bgt.n	40fd2a <_svfprintf_r+0x39a>
  40fd5a:	464c      	mov	r4, r9
  40fd5c:	46d1      	mov	r9, sl
  40fd5e:	46ba      	mov	sl, r7
  40fd60:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40fd62:	4606      	mov	r6, r0
  40fd64:	3201      	adds	r2, #1
  40fd66:	eb0b 0c01 	add.w	ip, fp, r1
  40fd6a:	2a07      	cmp	r2, #7
  40fd6c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fd70:	922c      	str	r2, [sp, #176]	; 0xb0
  40fd72:	e886 0c00 	stmia.w	r6, {sl, fp}
  40fd76:	f300 841c 	bgt.w	4105b2 <_svfprintf_r+0xc22>
  40fd7a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40fd7e:	3608      	adds	r6, #8
  40fd80:	f1ba 0f00 	cmp.w	sl, #0
  40fd84:	d00f      	beq.n	40fda6 <_svfprintf_r+0x416>
  40fd86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fd88:	3301      	adds	r3, #1
  40fd8a:	f10c 0c01 	add.w	ip, ip, #1
  40fd8e:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40fd92:	2201      	movs	r2, #1
  40fd94:	2b07      	cmp	r3, #7
  40fd96:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fd9a:	932c      	str	r3, [sp, #176]	; 0xb0
  40fd9c:	e886 0006 	stmia.w	r6, {r1, r2}
  40fda0:	f300 839a 	bgt.w	4104d8 <_svfprintf_r+0xb48>
  40fda4:	3608      	adds	r6, #8
  40fda6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fda8:	b173      	cbz	r3, 40fdc8 <_svfprintf_r+0x438>
  40fdaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fdac:	3301      	adds	r3, #1
  40fdae:	f10c 0c02 	add.w	ip, ip, #2
  40fdb2:	a924      	add	r1, sp, #144	; 0x90
  40fdb4:	2202      	movs	r2, #2
  40fdb6:	2b07      	cmp	r3, #7
  40fdb8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fdbc:	932c      	str	r3, [sp, #176]	; 0xb0
  40fdbe:	e886 0006 	stmia.w	r6, {r1, r2}
  40fdc2:	f300 8395 	bgt.w	4104f0 <_svfprintf_r+0xb60>
  40fdc6:	3608      	adds	r6, #8
  40fdc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40fdca:	2d80      	cmp	r5, #128	; 0x80
  40fdcc:	f000 82cc 	beq.w	410368 <_svfprintf_r+0x9d8>
  40fdd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40fdd2:	ebc4 0a05 	rsb	sl, r4, r5
  40fdd6:	f1ba 0f00 	cmp.w	sl, #0
  40fdda:	dd3b      	ble.n	40fe54 <_svfprintf_r+0x4c4>
  40fddc:	f1ba 0f10 	cmp.w	sl, #16
  40fde0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fde2:	4d30      	ldr	r5, [pc, #192]	; (40fea4 <_svfprintf_r+0x514>)
  40fde4:	dd2b      	ble.n	40fe3e <_svfprintf_r+0x4ae>
  40fde6:	940a      	str	r4, [sp, #40]	; 0x28
  40fde8:	4632      	mov	r2, r6
  40fdea:	f04f 0b10 	mov.w	fp, #16
  40fdee:	462e      	mov	r6, r5
  40fdf0:	4661      	mov	r1, ip
  40fdf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40fdf4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40fdf6:	e006      	b.n	40fe06 <_svfprintf_r+0x476>
  40fdf8:	f1aa 0a10 	sub.w	sl, sl, #16
  40fdfc:	f1ba 0f10 	cmp.w	sl, #16
  40fe00:	f102 0208 	add.w	r2, r2, #8
  40fe04:	dd17      	ble.n	40fe36 <_svfprintf_r+0x4a6>
  40fe06:	3301      	adds	r3, #1
  40fe08:	3110      	adds	r1, #16
  40fe0a:	2b07      	cmp	r3, #7
  40fe0c:	912d      	str	r1, [sp, #180]	; 0xb4
  40fe0e:	932c      	str	r3, [sp, #176]	; 0xb0
  40fe10:	e882 0840 	stmia.w	r2, {r6, fp}
  40fe14:	ddf0      	ble.n	40fdf8 <_svfprintf_r+0x468>
  40fe16:	4620      	mov	r0, r4
  40fe18:	4629      	mov	r1, r5
  40fe1a:	aa2b      	add	r2, sp, #172	; 0xac
  40fe1c:	f006 fd90 	bl	416940 <__ssprint_r>
  40fe20:	2800      	cmp	r0, #0
  40fe22:	f47f aecd 	bne.w	40fbc0 <_svfprintf_r+0x230>
  40fe26:	f1aa 0a10 	sub.w	sl, sl, #16
  40fe2a:	f1ba 0f10 	cmp.w	sl, #16
  40fe2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40fe30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fe32:	aa38      	add	r2, sp, #224	; 0xe0
  40fe34:	dce7      	bgt.n	40fe06 <_svfprintf_r+0x476>
  40fe36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40fe38:	4635      	mov	r5, r6
  40fe3a:	468c      	mov	ip, r1
  40fe3c:	4616      	mov	r6, r2
  40fe3e:	3301      	adds	r3, #1
  40fe40:	44d4      	add	ip, sl
  40fe42:	2b07      	cmp	r3, #7
  40fe44:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fe48:	932c      	str	r3, [sp, #176]	; 0xb0
  40fe4a:	e886 0420 	stmia.w	r6, {r5, sl}
  40fe4e:	f300 8337 	bgt.w	4104c0 <_svfprintf_r+0xb30>
  40fe52:	3608      	adds	r6, #8
  40fe54:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40fe56:	05ed      	lsls	r5, r5, #23
  40fe58:	f100 8226 	bmi.w	4102a8 <_svfprintf_r+0x918>
  40fe5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fe5e:	6037      	str	r7, [r6, #0]
  40fe60:	3301      	adds	r3, #1
  40fe62:	44a4      	add	ip, r4
  40fe64:	2b07      	cmp	r3, #7
  40fe66:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fe6a:	6074      	str	r4, [r6, #4]
  40fe6c:	932c      	str	r3, [sp, #176]	; 0xb0
  40fe6e:	f300 8311 	bgt.w	410494 <_svfprintf_r+0xb04>
  40fe72:	3608      	adds	r6, #8
  40fe74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fe76:	0763      	lsls	r3, r4, #29
  40fe78:	d549      	bpl.n	40ff0e <_svfprintf_r+0x57e>
  40fe7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40fe7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40fe7e:	1a2c      	subs	r4, r5, r0
  40fe80:	2c00      	cmp	r4, #0
  40fe82:	dd44      	ble.n	40ff0e <_svfprintf_r+0x57e>
  40fe84:	2c10      	cmp	r4, #16
  40fe86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fe88:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40fea8 <_svfprintf_r+0x518>
  40fe8c:	dd2b      	ble.n	40fee6 <_svfprintf_r+0x556>
  40fe8e:	4657      	mov	r7, sl
  40fe90:	2510      	movs	r5, #16
  40fe92:	4662      	mov	r2, ip
  40fe94:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40fe98:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40fe9c:	e00b      	b.n	40feb6 <_svfprintf_r+0x526>
  40fe9e:	bf00      	nop
  40fea0:	00419228 	.word	0x00419228
  40fea4:	004191f4 	.word	0x004191f4
  40fea8:	00419248 	.word	0x00419248
  40feac:	3c10      	subs	r4, #16
  40feae:	2c10      	cmp	r4, #16
  40feb0:	f106 0608 	add.w	r6, r6, #8
  40feb4:	dd15      	ble.n	40fee2 <_svfprintf_r+0x552>
  40feb6:	3301      	adds	r3, #1
  40feb8:	3210      	adds	r2, #16
  40feba:	2b07      	cmp	r3, #7
  40febc:	922d      	str	r2, [sp, #180]	; 0xb4
  40febe:	932c      	str	r3, [sp, #176]	; 0xb0
  40fec0:	6037      	str	r7, [r6, #0]
  40fec2:	6075      	str	r5, [r6, #4]
  40fec4:	ddf2      	ble.n	40feac <_svfprintf_r+0x51c>
  40fec6:	4650      	mov	r0, sl
  40fec8:	4641      	mov	r1, r8
  40feca:	aa2b      	add	r2, sp, #172	; 0xac
  40fecc:	f006 fd38 	bl	416940 <__ssprint_r>
  40fed0:	2800      	cmp	r0, #0
  40fed2:	f47f ae75 	bne.w	40fbc0 <_svfprintf_r+0x230>
  40fed6:	3c10      	subs	r4, #16
  40fed8:	2c10      	cmp	r4, #16
  40feda:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40fedc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40fede:	ae38      	add	r6, sp, #224	; 0xe0
  40fee0:	dce9      	bgt.n	40feb6 <_svfprintf_r+0x526>
  40fee2:	4694      	mov	ip, r2
  40fee4:	46ba      	mov	sl, r7
  40fee6:	3301      	adds	r3, #1
  40fee8:	44a4      	add	ip, r4
  40feea:	2b07      	cmp	r3, #7
  40feec:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40fef0:	932c      	str	r3, [sp, #176]	; 0xb0
  40fef2:	f8c6 a000 	str.w	sl, [r6]
  40fef6:	6074      	str	r4, [r6, #4]
  40fef8:	dd09      	ble.n	40ff0e <_svfprintf_r+0x57e>
  40fefa:	980d      	ldr	r0, [sp, #52]	; 0x34
  40fefc:	990c      	ldr	r1, [sp, #48]	; 0x30
  40fefe:	aa2b      	add	r2, sp, #172	; 0xac
  40ff00:	f006 fd1e 	bl	416940 <__ssprint_r>
  40ff04:	2800      	cmp	r0, #0
  40ff06:	f47f ae5b 	bne.w	40fbc0 <_svfprintf_r+0x230>
  40ff0a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40ff0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ff10:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ff12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ff14:	42a8      	cmp	r0, r5
  40ff16:	bfac      	ite	ge
  40ff18:	1824      	addge	r4, r4, r0
  40ff1a:	1964      	addlt	r4, r4, r5
  40ff1c:	940e      	str	r4, [sp, #56]	; 0x38
  40ff1e:	f1bc 0f00 	cmp.w	ip, #0
  40ff22:	f040 82c3 	bne.w	4104ac <_svfprintf_r+0xb1c>
  40ff26:	2300      	movs	r3, #0
  40ff28:	932c      	str	r3, [sp, #176]	; 0xb0
  40ff2a:	ae38      	add	r6, sp, #224	; 0xe0
  40ff2c:	e556      	b.n	40f9dc <_svfprintf_r+0x4c>
  40ff2e:	f899 8000 	ldrb.w	r8, [r9]
  40ff32:	2a00      	cmp	r2, #0
  40ff34:	f47f ad88 	bne.w	40fa48 <_svfprintf_r+0xb8>
  40ff38:	2220      	movs	r2, #32
  40ff3a:	e585      	b.n	40fa48 <_svfprintf_r+0xb8>
  40ff3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ff3e:	f045 0501 	orr.w	r5, r5, #1
  40ff42:	9509      	str	r5, [sp, #36]	; 0x24
  40ff44:	f899 8000 	ldrb.w	r8, [r9]
  40ff48:	e57e      	b.n	40fa48 <_svfprintf_r+0xb8>
  40ff4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ff4c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40ff50:	9509      	str	r5, [sp, #36]	; 0x24
  40ff52:	f899 8000 	ldrb.w	r8, [r9]
  40ff56:	e577      	b.n	40fa48 <_svfprintf_r+0xb8>
  40ff58:	2400      	movs	r4, #0
  40ff5a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ff5e:	940f      	str	r4, [sp, #60]	; 0x3c
  40ff60:	4621      	mov	r1, r4
  40ff62:	f819 8b01 	ldrb.w	r8, [r9], #1
  40ff66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40ff6a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40ff6e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ff72:	2b09      	cmp	r3, #9
  40ff74:	d9f5      	bls.n	40ff62 <_svfprintf_r+0x5d2>
  40ff76:	910f      	str	r1, [sp, #60]	; 0x3c
  40ff78:	e568      	b.n	40fa4c <_svfprintf_r+0xbc>
  40ff7a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ff7e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ff82:	f04c 0c10 	orr.w	ip, ip, #16
  40ff86:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ff8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ff8c:	06a3      	lsls	r3, r4, #26
  40ff8e:	f140 80b2 	bpl.w	4100f6 <_svfprintf_r+0x766>
  40ff92:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40ff94:	1de9      	adds	r1, r5, #7
  40ff96:	f021 0107 	bic.w	r1, r1, #7
  40ff9a:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ff9e:	3108      	adds	r1, #8
  40ffa0:	9110      	str	r1, [sp, #64]	; 0x40
  40ffa2:	4614      	mov	r4, r2
  40ffa4:	461d      	mov	r5, r3
  40ffa6:	2a00      	cmp	r2, #0
  40ffa8:	f173 0000 	sbcs.w	r0, r3, #0
  40ffac:	f2c0 838b 	blt.w	4106c6 <_svfprintf_r+0xd36>
  40ffb0:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ffb4:	2301      	movs	r3, #1
  40ffb6:	e659      	b.n	40fc6c <_svfprintf_r+0x2dc>
  40ffb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ffba:	4cb7      	ldr	r4, [pc, #732]	; (410298 <_svfprintf_r+0x908>)
  40ffbc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ffc0:	06af      	lsls	r7, r5, #26
  40ffc2:	941a      	str	r4, [sp, #104]	; 0x68
  40ffc4:	f53f ae2f 	bmi.w	40fc26 <_svfprintf_r+0x296>
  40ffc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ffca:	06ed      	lsls	r5, r5, #27
  40ffcc:	f140 845d 	bpl.w	41088a <_svfprintf_r+0xefa>
  40ffd0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ffd4:	f8dc 4000 	ldr.w	r4, [ip]
  40ffd8:	f10c 0c04 	add.w	ip, ip, #4
  40ffdc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ffe0:	2500      	movs	r5, #0
  40ffe2:	e62b      	b.n	40fc3c <_svfprintf_r+0x2ac>
  40ffe4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ffe8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40ffec:	f01c 0f20 	tst.w	ip, #32
  40fff0:	f000 843d 	beq.w	41086e <_svfprintf_r+0xede>
  40fff4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40fff6:	6821      	ldr	r1, [r4, #0]
  40fff8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40fffa:	17e5      	asrs	r5, r4, #31
  40fffc:	462b      	mov	r3, r5
  40fffe:	9d10      	ldr	r5, [sp, #64]	; 0x40
  410000:	4622      	mov	r2, r4
  410002:	3504      	adds	r5, #4
  410004:	9510      	str	r5, [sp, #64]	; 0x40
  410006:	e9c1 2300 	strd	r2, r3, [r1]
  41000a:	e4e7      	b.n	40f9dc <_svfprintf_r+0x4c>
  41000c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  41000e:	6827      	ldr	r7, [r4, #0]
  410010:	f04f 0a00 	mov.w	sl, #0
  410014:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  410018:	1d25      	adds	r5, r4, #4
  41001a:	2f00      	cmp	r7, #0
  41001c:	f000 85f5 	beq.w	410c0a <_svfprintf_r+0x127a>
  410020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410022:	2c00      	cmp	r4, #0
  410024:	4638      	mov	r0, r7
  410026:	f2c0 85a7 	blt.w	410b78 <_svfprintf_r+0x11e8>
  41002a:	4651      	mov	r1, sl
  41002c:	4622      	mov	r2, r4
  41002e:	f004 fac3 	bl	4145b8 <memchr>
  410032:	2800      	cmp	r0, #0
  410034:	f000 861f 	beq.w	410c76 <_svfprintf_r+0x12e6>
  410038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41003a:	9510      	str	r5, [sp, #64]	; 0x40
  41003c:	1bc0      	subs	r0, r0, r7
  41003e:	42a0      	cmp	r0, r4
  410040:	bfb8      	it	lt
  410042:	4604      	movlt	r4, r0
  410044:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  410048:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  41004c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  410050:	950b      	str	r5, [sp, #44]	; 0x2c
  410052:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410056:	e632      	b.n	40fcbe <_svfprintf_r+0x32e>
  410058:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  41005c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  410060:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  410064:	f899 8000 	ldrb.w	r8, [r9]
  410068:	e4ee      	b.n	40fa48 <_svfprintf_r+0xb8>
  41006a:	f899 8000 	ldrb.w	r8, [r9]
  41006e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  410072:	464b      	mov	r3, r9
  410074:	f000 848b 	beq.w	41098e <_svfprintf_r+0xffe>
  410078:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41007a:	f045 0510 	orr.w	r5, r5, #16
  41007e:	9509      	str	r5, [sp, #36]	; 0x24
  410080:	e4e2      	b.n	40fa48 <_svfprintf_r+0xb8>
  410082:	9c10      	ldr	r4, [sp, #64]	; 0x40
  410084:	9d10      	ldr	r5, [sp, #64]	; 0x40
  410086:	6824      	ldr	r4, [r4, #0]
  410088:	940f      	str	r4, [sp, #60]	; 0x3c
  41008a:	2c00      	cmp	r4, #0
  41008c:	f105 0304 	add.w	r3, r5, #4
  410090:	f6ff ad7c 	blt.w	40fb8c <_svfprintf_r+0x1fc>
  410094:	9310      	str	r3, [sp, #64]	; 0x40
  410096:	f899 8000 	ldrb.w	r8, [r9]
  41009a:	e4d5      	b.n	40fa48 <_svfprintf_r+0xb8>
  41009c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  41009e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4100a2:	487e      	ldr	r0, [pc, #504]	; (41029c <_svfprintf_r+0x90c>)
  4100a4:	6814      	ldr	r4, [r2, #0]
  4100a6:	901a      	str	r0, [sp, #104]	; 0x68
  4100a8:	2330      	movs	r3, #48	; 0x30
  4100aa:	1d15      	adds	r5, r2, #4
  4100ac:	f04f 0878 	mov.w	r8, #120	; 0x78
  4100b0:	f04c 0c02 	orr.w	ip, ip, #2
  4100b4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  4100b8:	9510      	str	r5, [sp, #64]	; 0x40
  4100ba:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4100be:	2500      	movs	r5, #0
  4100c0:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  4100c4:	2302      	movs	r3, #2
  4100c6:	e5cd      	b.n	40fc64 <_svfprintf_r+0x2d4>
  4100c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4100ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4100cc:	6812      	ldr	r2, [r2, #0]
  4100ce:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  4100d2:	2300      	movs	r3, #0
  4100d4:	2401      	movs	r4, #1
  4100d6:	3504      	adds	r5, #4
  4100d8:	469a      	mov	sl, r3
  4100da:	940b      	str	r4, [sp, #44]	; 0x2c
  4100dc:	9510      	str	r5, [sp, #64]	; 0x40
  4100de:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  4100e2:	930a      	str	r3, [sp, #40]	; 0x28
  4100e4:	9314      	str	r3, [sp, #80]	; 0x50
  4100e6:	af2e      	add	r7, sp, #184	; 0xb8
  4100e8:	e5ef      	b.n	40fcca <_svfprintf_r+0x33a>
  4100ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4100ec:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4100f0:	06a3      	lsls	r3, r4, #26
  4100f2:	f53f af4e 	bmi.w	40ff92 <_svfprintf_r+0x602>
  4100f6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4100fa:	f01c 0f10 	tst.w	ip, #16
  4100fe:	f040 82d2 	bne.w	4106a6 <_svfprintf_r+0xd16>
  410102:	9c09      	ldr	r4, [sp, #36]	; 0x24
  410104:	0667      	lsls	r7, r4, #25
  410106:	f140 82ce 	bpl.w	4106a6 <_svfprintf_r+0xd16>
  41010a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  41010e:	f9bc 4000 	ldrsh.w	r4, [ip]
  410112:	f10c 0c04 	add.w	ip, ip, #4
  410116:	17e5      	asrs	r5, r4, #31
  410118:	4622      	mov	r2, r4
  41011a:	462b      	mov	r3, r5
  41011c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  410120:	e741      	b.n	40ffa6 <_svfprintf_r+0x616>
  410122:	f899 8000 	ldrb.w	r8, [r9]
  410126:	222b      	movs	r2, #43	; 0x2b
  410128:	e48e      	b.n	40fa48 <_svfprintf_r+0xb8>
  41012a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41012c:	f045 0508 	orr.w	r5, r5, #8
  410130:	9509      	str	r5, [sp, #36]	; 0x24
  410132:	f899 8000 	ldrb.w	r8, [r9]
  410136:	e487      	b.n	40fa48 <_svfprintf_r+0xb8>
  410138:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41013a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41013c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  410140:	1deb      	adds	r3, r5, #7
  410142:	0725      	lsls	r5, r4, #28
  410144:	f023 0307 	bic.w	r3, r3, #7
  410148:	f140 838a 	bpl.w	410860 <_svfprintf_r+0xed0>
  41014c:	e9d3 4500 	ldrd	r4, r5, [r3]
  410150:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  410154:	f103 0c08 	add.w	ip, r3, #8
  410158:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  41015c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  410160:	f005 f918 	bl	415394 <__fpclassifyd>
  410164:	2801      	cmp	r0, #1
  410166:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  41016a:	f040 835f 	bne.w	41082c <_svfprintf_r+0xe9c>
  41016e:	2200      	movs	r2, #0
  410170:	2300      	movs	r3, #0
  410172:	f007 fe97 	bl	417ea4 <__aeabi_dcmplt>
  410176:	2800      	cmp	r0, #0
  410178:	f040 856d 	bne.w	410c56 <_svfprintf_r+0x12c6>
  41017c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410180:	2503      	movs	r5, #3
  410182:	950b      	str	r5, [sp, #44]	; 0x2c
  410184:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410186:	4f46      	ldr	r7, [pc, #280]	; (4102a0 <_svfprintf_r+0x910>)
  410188:	4b46      	ldr	r3, [pc, #280]	; (4102a4 <_svfprintf_r+0x914>)
  41018a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  41018e:	2400      	movs	r4, #0
  410190:	9509      	str	r5, [sp, #36]	; 0x24
  410192:	2500      	movs	r5, #0
  410194:	940a      	str	r4, [sp, #40]	; 0x28
  410196:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  41019a:	bfd8      	it	le
  41019c:	461f      	movle	r7, r3
  41019e:	2403      	movs	r4, #3
  4101a0:	9514      	str	r5, [sp, #80]	; 0x50
  4101a2:	e58c      	b.n	40fcbe <_svfprintf_r+0x32e>
  4101a4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4101a8:	f04c 0c20 	orr.w	ip, ip, #32
  4101ac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4101b0:	f899 8000 	ldrb.w	r8, [r9]
  4101b4:	e448      	b.n	40fa48 <_svfprintf_r+0xb8>
  4101b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4101b8:	1de3      	adds	r3, r4, #7
  4101ba:	f023 0307 	bic.w	r3, r3, #7
  4101be:	f103 0508 	add.w	r5, r3, #8
  4101c2:	9510      	str	r5, [sp, #64]	; 0x40
  4101c4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4101c8:	2300      	movs	r3, #0
  4101ca:	e54b      	b.n	40fc64 <_svfprintf_r+0x2d4>
  4101cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4101ce:	1deb      	adds	r3, r5, #7
  4101d0:	f023 0307 	bic.w	r3, r3, #7
  4101d4:	f103 0c08 	add.w	ip, r3, #8
  4101d8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4101dc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4101e0:	2301      	movs	r3, #1
  4101e2:	e53f      	b.n	40fc64 <_svfprintf_r+0x2d4>
  4101e4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4101e8:	f1b8 0f00 	cmp.w	r8, #0
  4101ec:	f43f ace1 	beq.w	40fbb2 <_svfprintf_r+0x222>
  4101f0:	2300      	movs	r3, #0
  4101f2:	f04f 0c01 	mov.w	ip, #1
  4101f6:	469a      	mov	sl, r3
  4101f8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4101fc:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  410200:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  410204:	930a      	str	r3, [sp, #40]	; 0x28
  410206:	9314      	str	r3, [sp, #80]	; 0x50
  410208:	4664      	mov	r4, ip
  41020a:	af2e      	add	r7, sp, #184	; 0xb8
  41020c:	e55d      	b.n	40fcca <_svfprintf_r+0x33a>
  41020e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410212:	e5b5      	b.n	40fd80 <_svfprintf_r+0x3f0>
  410214:	2b01      	cmp	r3, #1
  410216:	f000 80ec 	beq.w	4103f2 <_svfprintf_r+0xa62>
  41021a:	2b02      	cmp	r3, #2
  41021c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  410220:	d118      	bne.n	410254 <_svfprintf_r+0x8c4>
  410222:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  410226:	4619      	mov	r1, r3
  410228:	f004 000f 	and.w	r0, r4, #15
  41022c:	0922      	lsrs	r2, r4, #4
  41022e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  410232:	460f      	mov	r7, r1
  410234:	092b      	lsrs	r3, r5, #4
  410236:	f81c 1000 	ldrb.w	r1, [ip, r0]
  41023a:	7039      	strb	r1, [r7, #0]
  41023c:	ea52 0003 	orrs.w	r0, r2, r3
  410240:	4614      	mov	r4, r2
  410242:	461d      	mov	r5, r3
  410244:	f107 31ff 	add.w	r1, r7, #4294967295
  410248:	d1ee      	bne.n	410228 <_svfprintf_r+0x898>
  41024a:	9d08      	ldr	r5, [sp, #32]
  41024c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  410250:	1bec      	subs	r4, r5, r7
  410252:	e52b      	b.n	40fcac <_svfprintf_r+0x31c>
  410254:	08e0      	lsrs	r0, r4, #3
  410256:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  41025a:	f004 0207 	and.w	r2, r4, #7
  41025e:	08e9      	lsrs	r1, r5, #3
  410260:	3230      	adds	r2, #48	; 0x30
  410262:	ea50 0c01 	orrs.w	ip, r0, r1
  410266:	461f      	mov	r7, r3
  410268:	701a      	strb	r2, [r3, #0]
  41026a:	4604      	mov	r4, r0
  41026c:	460d      	mov	r5, r1
  41026e:	f103 33ff 	add.w	r3, r3, #4294967295
  410272:	d1ef      	bne.n	410254 <_svfprintf_r+0x8c4>
  410274:	9c09      	ldr	r4, [sp, #36]	; 0x24
  410276:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  41027a:	07e0      	lsls	r0, r4, #31
  41027c:	4639      	mov	r1, r7
  41027e:	f140 80c1 	bpl.w	410404 <_svfprintf_r+0xa74>
  410282:	2a30      	cmp	r2, #48	; 0x30
  410284:	f000 80be 	beq.w	410404 <_svfprintf_r+0xa74>
  410288:	9d08      	ldr	r5, [sp, #32]
  41028a:	461f      	mov	r7, r3
  41028c:	2330      	movs	r3, #48	; 0x30
  41028e:	1bec      	subs	r4, r5, r7
  410290:	f801 3c01 	strb.w	r3, [r1, #-1]
  410294:	e50a      	b.n	40fcac <_svfprintf_r+0x31c>
  410296:	bf00      	nop
  410298:	00419214 	.word	0x00419214
  41029c:	00419228 	.word	0x00419228
  4102a0:	00419208 	.word	0x00419208
  4102a4:	00419204 	.word	0x00419204
  4102a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4102ac:	f340 80ad 	ble.w	41040a <_svfprintf_r+0xa7a>
  4102b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4102b4:	2200      	movs	r2, #0
  4102b6:	2300      	movs	r3, #0
  4102b8:	f8cd c01c 	str.w	ip, [sp, #28]
  4102bc:	f007 fde8 	bl	417e90 <__aeabi_dcmpeq>
  4102c0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4102c4:	2800      	cmp	r0, #0
  4102c6:	f000 8126 	beq.w	410516 <_svfprintf_r+0xb86>
  4102ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4102cc:	4aaa      	ldr	r2, [pc, #680]	; (410578 <_svfprintf_r+0xbe8>)
  4102ce:	6032      	str	r2, [r6, #0]
  4102d0:	3301      	adds	r3, #1
  4102d2:	f10c 0c01 	add.w	ip, ip, #1
  4102d6:	2201      	movs	r2, #1
  4102d8:	2b07      	cmp	r3, #7
  4102da:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4102de:	932c      	str	r3, [sp, #176]	; 0xb0
  4102e0:	6072      	str	r2, [r6, #4]
  4102e2:	f300 82f7 	bgt.w	4108d4 <_svfprintf_r+0xf44>
  4102e6:	3608      	adds	r6, #8
  4102e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4102ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4102ec:	42a3      	cmp	r3, r4
  4102ee:	db03      	blt.n	4102f8 <_svfprintf_r+0x968>
  4102f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4102f2:	07ec      	lsls	r4, r5, #31
  4102f4:	f57f adbe 	bpl.w	40fe74 <_svfprintf_r+0x4e4>
  4102f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4102fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4102fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4102fe:	6034      	str	r4, [r6, #0]
  410300:	3301      	adds	r3, #1
  410302:	44ac      	add	ip, r5
  410304:	2b07      	cmp	r3, #7
  410306:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  41030a:	6075      	str	r5, [r6, #4]
  41030c:	932c      	str	r3, [sp, #176]	; 0xb0
  41030e:	f300 8348 	bgt.w	4109a2 <_svfprintf_r+0x1012>
  410312:	3608      	adds	r6, #8
  410314:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410316:	1e6c      	subs	r4, r5, #1
  410318:	2c00      	cmp	r4, #0
  41031a:	f77f adab 	ble.w	40fe74 <_svfprintf_r+0x4e4>
  41031e:	2c10      	cmp	r4, #16
  410320:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410322:	4d96      	ldr	r5, [pc, #600]	; (41057c <_svfprintf_r+0xbec>)
  410324:	f340 8197 	ble.w	410656 <_svfprintf_r+0xcc6>
  410328:	2710      	movs	r7, #16
  41032a:	4662      	mov	r2, ip
  41032c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  410330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  410334:	e004      	b.n	410340 <_svfprintf_r+0x9b0>
  410336:	3608      	adds	r6, #8
  410338:	3c10      	subs	r4, #16
  41033a:	2c10      	cmp	r4, #16
  41033c:	f340 818a 	ble.w	410654 <_svfprintf_r+0xcc4>
  410340:	3301      	adds	r3, #1
  410342:	3210      	adds	r2, #16
  410344:	2b07      	cmp	r3, #7
  410346:	922d      	str	r2, [sp, #180]	; 0xb4
  410348:	932c      	str	r3, [sp, #176]	; 0xb0
  41034a:	e886 00a0 	stmia.w	r6, {r5, r7}
  41034e:	ddf2      	ble.n	410336 <_svfprintf_r+0x9a6>
  410350:	4640      	mov	r0, r8
  410352:	4651      	mov	r1, sl
  410354:	aa2b      	add	r2, sp, #172	; 0xac
  410356:	f006 faf3 	bl	416940 <__ssprint_r>
  41035a:	2800      	cmp	r0, #0
  41035c:	f47f ac30 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410360:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  410362:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410364:	ae38      	add	r6, sp, #224	; 0xe0
  410366:	e7e7      	b.n	410338 <_svfprintf_r+0x9a8>
  410368:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  41036a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41036c:	ebc0 0a05 	rsb	sl, r0, r5
  410370:	f1ba 0f00 	cmp.w	sl, #0
  410374:	f77f ad2c 	ble.w	40fdd0 <_svfprintf_r+0x440>
  410378:	f1ba 0f10 	cmp.w	sl, #16
  41037c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41037e:	4d7f      	ldr	r5, [pc, #508]	; (41057c <_svfprintf_r+0xbec>)
  410380:	dd2b      	ble.n	4103da <_svfprintf_r+0xa4a>
  410382:	9412      	str	r4, [sp, #72]	; 0x48
  410384:	4632      	mov	r2, r6
  410386:	f04f 0b10 	mov.w	fp, #16
  41038a:	462e      	mov	r6, r5
  41038c:	4661      	mov	r1, ip
  41038e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  410390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  410392:	e006      	b.n	4103a2 <_svfprintf_r+0xa12>
  410394:	f1aa 0a10 	sub.w	sl, sl, #16
  410398:	f1ba 0f10 	cmp.w	sl, #16
  41039c:	f102 0208 	add.w	r2, r2, #8
  4103a0:	dd17      	ble.n	4103d2 <_svfprintf_r+0xa42>
  4103a2:	3301      	adds	r3, #1
  4103a4:	3110      	adds	r1, #16
  4103a6:	2b07      	cmp	r3, #7
  4103a8:	912d      	str	r1, [sp, #180]	; 0xb4
  4103aa:	932c      	str	r3, [sp, #176]	; 0xb0
  4103ac:	e882 0840 	stmia.w	r2, {r6, fp}
  4103b0:	ddf0      	ble.n	410394 <_svfprintf_r+0xa04>
  4103b2:	4620      	mov	r0, r4
  4103b4:	4629      	mov	r1, r5
  4103b6:	aa2b      	add	r2, sp, #172	; 0xac
  4103b8:	f006 fac2 	bl	416940 <__ssprint_r>
  4103bc:	2800      	cmp	r0, #0
  4103be:	f47f abff 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4103c2:	f1aa 0a10 	sub.w	sl, sl, #16
  4103c6:	f1ba 0f10 	cmp.w	sl, #16
  4103ca:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4103cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4103ce:	aa38      	add	r2, sp, #224	; 0xe0
  4103d0:	dce7      	bgt.n	4103a2 <_svfprintf_r+0xa12>
  4103d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4103d4:	4635      	mov	r5, r6
  4103d6:	468c      	mov	ip, r1
  4103d8:	4616      	mov	r6, r2
  4103da:	3301      	adds	r3, #1
  4103dc:	44d4      	add	ip, sl
  4103de:	2b07      	cmp	r3, #7
  4103e0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4103e4:	932c      	str	r3, [sp, #176]	; 0xb0
  4103e6:	e886 0420 	stmia.w	r6, {r5, sl}
  4103ea:	f300 8212 	bgt.w	410812 <_svfprintf_r+0xe82>
  4103ee:	3608      	adds	r6, #8
  4103f0:	e4ee      	b.n	40fdd0 <_svfprintf_r+0x440>
  4103f2:	2d00      	cmp	r5, #0
  4103f4:	bf08      	it	eq
  4103f6:	2c0a      	cmpeq	r4, #10
  4103f8:	f080 8138 	bcs.w	41066c <_svfprintf_r+0xcdc>
  4103fc:	af48      	add	r7, sp, #288	; 0x120
  4103fe:	3430      	adds	r4, #48	; 0x30
  410400:	f807 4d41 	strb.w	r4, [r7, #-65]!
  410404:	9d08      	ldr	r5, [sp, #32]
  410406:	1bec      	subs	r4, r5, r7
  410408:	e450      	b.n	40fcac <_svfprintf_r+0x31c>
  41040a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  41040c:	2c01      	cmp	r4, #1
  41040e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  410410:	f340 81d5 	ble.w	4107be <_svfprintf_r+0xe2e>
  410414:	3401      	adds	r4, #1
  410416:	f10c 0301 	add.w	r3, ip, #1
  41041a:	2201      	movs	r2, #1
  41041c:	2c07      	cmp	r4, #7
  41041e:	6037      	str	r7, [r6, #0]
  410420:	932d      	str	r3, [sp, #180]	; 0xb4
  410422:	942c      	str	r4, [sp, #176]	; 0xb0
  410424:	6072      	str	r2, [r6, #4]
  410426:	f300 81db 	bgt.w	4107e0 <_svfprintf_r+0xe50>
  41042a:	3608      	adds	r6, #8
  41042c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  410430:	9d15      	ldr	r5, [sp, #84]	; 0x54
  410432:	6035      	str	r5, [r6, #0]
  410434:	3401      	adds	r4, #1
  410436:	4498      	add	r8, r3
  410438:	9d18      	ldr	r5, [sp, #96]	; 0x60
  41043a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  41043e:	2c07      	cmp	r4, #7
  410440:	942c      	str	r4, [sp, #176]	; 0xb0
  410442:	6075      	str	r5, [r6, #4]
  410444:	f300 81d8 	bgt.w	4107f8 <_svfprintf_r+0xe68>
  410448:	3608      	adds	r6, #8
  41044a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  41044e:	2200      	movs	r2, #0
  410450:	2300      	movs	r3, #0
  410452:	f007 fd1d 	bl	417e90 <__aeabi_dcmpeq>
  410456:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410458:	2800      	cmp	r0, #0
  41045a:	f040 80b9 	bne.w	4105d0 <_svfprintf_r+0xc40>
  41045e:	1e6b      	subs	r3, r5, #1
  410460:	3401      	adds	r4, #1
  410462:	3701      	adds	r7, #1
  410464:	4498      	add	r8, r3
  410466:	2c07      	cmp	r4, #7
  410468:	942c      	str	r4, [sp, #176]	; 0xb0
  41046a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  41046e:	6037      	str	r7, [r6, #0]
  410470:	6073      	str	r3, [r6, #4]
  410472:	f300 80e2 	bgt.w	41063a <_svfprintf_r+0xcaa>
  410476:	3608      	adds	r6, #8
  410478:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  41047c:	9d19      	ldr	r5, [sp, #100]	; 0x64
  41047e:	3401      	adds	r4, #1
  410480:	44c4      	add	ip, r8
  410482:	ab27      	add	r3, sp, #156	; 0x9c
  410484:	2c07      	cmp	r4, #7
  410486:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  41048a:	942c      	str	r4, [sp, #176]	; 0xb0
  41048c:	e886 0028 	stmia.w	r6, {r3, r5}
  410490:	f77f acef 	ble.w	40fe72 <_svfprintf_r+0x4e2>
  410494:	980d      	ldr	r0, [sp, #52]	; 0x34
  410496:	990c      	ldr	r1, [sp, #48]	; 0x30
  410498:	aa2b      	add	r2, sp, #172	; 0xac
  41049a:	f006 fa51 	bl	416940 <__ssprint_r>
  41049e:	2800      	cmp	r0, #0
  4104a0:	f47f ab8e 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4104a4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4104a8:	ae38      	add	r6, sp, #224	; 0xe0
  4104aa:	e4e3      	b.n	40fe74 <_svfprintf_r+0x4e4>
  4104ac:	980d      	ldr	r0, [sp, #52]	; 0x34
  4104ae:	990c      	ldr	r1, [sp, #48]	; 0x30
  4104b0:	aa2b      	add	r2, sp, #172	; 0xac
  4104b2:	f006 fa45 	bl	416940 <__ssprint_r>
  4104b6:	2800      	cmp	r0, #0
  4104b8:	f43f ad35 	beq.w	40ff26 <_svfprintf_r+0x596>
  4104bc:	f7ff bb80 	b.w	40fbc0 <_svfprintf_r+0x230>
  4104c0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4104c2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4104c4:	aa2b      	add	r2, sp, #172	; 0xac
  4104c6:	f006 fa3b 	bl	416940 <__ssprint_r>
  4104ca:	2800      	cmp	r0, #0
  4104cc:	f47f ab78 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4104d0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4104d4:	ae38      	add	r6, sp, #224	; 0xe0
  4104d6:	e4bd      	b.n	40fe54 <_svfprintf_r+0x4c4>
  4104d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4104da:	990c      	ldr	r1, [sp, #48]	; 0x30
  4104dc:	aa2b      	add	r2, sp, #172	; 0xac
  4104de:	f006 fa2f 	bl	416940 <__ssprint_r>
  4104e2:	2800      	cmp	r0, #0
  4104e4:	f47f ab6c 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4104e8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4104ec:	ae38      	add	r6, sp, #224	; 0xe0
  4104ee:	e45a      	b.n	40fda6 <_svfprintf_r+0x416>
  4104f0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4104f2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4104f4:	aa2b      	add	r2, sp, #172	; 0xac
  4104f6:	f006 fa23 	bl	416940 <__ssprint_r>
  4104fa:	2800      	cmp	r0, #0
  4104fc:	f47f ab60 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410500:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410504:	ae38      	add	r6, sp, #224	; 0xe0
  410506:	e45f      	b.n	40fdc8 <_svfprintf_r+0x438>
  410508:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41050a:	af38      	add	r7, sp, #224	; 0xe0
  41050c:	f7ff bbce 	b.w	40fcac <_svfprintf_r+0x31c>
  410510:	2302      	movs	r3, #2
  410512:	f7ff bba7 	b.w	40fc64 <_svfprintf_r+0x2d4>
  410516:	9b25      	ldr	r3, [sp, #148]	; 0x94
  410518:	2b00      	cmp	r3, #0
  41051a:	f340 81e7 	ble.w	4108ec <_svfprintf_r+0xf5c>
  41051e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  410520:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410522:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  410526:	42ac      	cmp	r4, r5
  410528:	bfa8      	it	ge
  41052a:	462c      	movge	r4, r5
  41052c:	2c00      	cmp	r4, #0
  41052e:	44ba      	add	sl, r7
  410530:	dd0b      	ble.n	41054a <_svfprintf_r+0xbba>
  410532:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410534:	6037      	str	r7, [r6, #0]
  410536:	3301      	adds	r3, #1
  410538:	44a4      	add	ip, r4
  41053a:	2b07      	cmp	r3, #7
  41053c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  410540:	6074      	str	r4, [r6, #4]
  410542:	932c      	str	r3, [sp, #176]	; 0xb0
  410544:	f300 8328 	bgt.w	410b98 <_svfprintf_r+0x1208>
  410548:	3608      	adds	r6, #8
  41054a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  41054c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  410550:	1b2c      	subs	r4, r5, r4
  410552:	2c00      	cmp	r4, #0
  410554:	f340 80db 	ble.w	41070e <_svfprintf_r+0xd7e>
  410558:	2c10      	cmp	r4, #16
  41055a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41055c:	4d07      	ldr	r5, [pc, #28]	; (41057c <_svfprintf_r+0xbec>)
  41055e:	f340 81ad 	ble.w	4108bc <_svfprintf_r+0xf2c>
  410562:	970a      	str	r7, [sp, #40]	; 0x28
  410564:	f04f 0810 	mov.w	r8, #16
  410568:	462f      	mov	r7, r5
  41056a:	4662      	mov	r2, ip
  41056c:	4625      	mov	r5, r4
  41056e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  410572:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410574:	e009      	b.n	41058a <_svfprintf_r+0xbfa>
  410576:	bf00      	nop
  410578:	00419244 	.word	0x00419244
  41057c:	004191f4 	.word	0x004191f4
  410580:	3608      	adds	r6, #8
  410582:	3d10      	subs	r5, #16
  410584:	2d10      	cmp	r5, #16
  410586:	f340 8195 	ble.w	4108b4 <_svfprintf_r+0xf24>
  41058a:	3301      	adds	r3, #1
  41058c:	3210      	adds	r2, #16
  41058e:	2b07      	cmp	r3, #7
  410590:	922d      	str	r2, [sp, #180]	; 0xb4
  410592:	932c      	str	r3, [sp, #176]	; 0xb0
  410594:	e886 0180 	stmia.w	r6, {r7, r8}
  410598:	ddf2      	ble.n	410580 <_svfprintf_r+0xbf0>
  41059a:	4658      	mov	r0, fp
  41059c:	4621      	mov	r1, r4
  41059e:	aa2b      	add	r2, sp, #172	; 0xac
  4105a0:	f006 f9ce 	bl	416940 <__ssprint_r>
  4105a4:	2800      	cmp	r0, #0
  4105a6:	f47f ab0b 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4105aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4105ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4105ae:	ae38      	add	r6, sp, #224	; 0xe0
  4105b0:	e7e7      	b.n	410582 <_svfprintf_r+0xbf2>
  4105b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4105b4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4105b6:	aa2b      	add	r2, sp, #172	; 0xac
  4105b8:	f006 f9c2 	bl	416940 <__ssprint_r>
  4105bc:	2800      	cmp	r0, #0
  4105be:	f47f aaff 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4105c2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4105c6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4105ca:	ae38      	add	r6, sp, #224	; 0xe0
  4105cc:	f7ff bbd8 	b.w	40fd80 <_svfprintf_r+0x3f0>
  4105d0:	1e6f      	subs	r7, r5, #1
  4105d2:	2f00      	cmp	r7, #0
  4105d4:	f77f af50 	ble.w	410478 <_svfprintf_r+0xae8>
  4105d8:	2f10      	cmp	r7, #16
  4105da:	4db3      	ldr	r5, [pc, #716]	; (4108a8 <_svfprintf_r+0xf18>)
  4105dc:	dd23      	ble.n	410626 <_svfprintf_r+0xc96>
  4105de:	4643      	mov	r3, r8
  4105e0:	f04f 0a10 	mov.w	sl, #16
  4105e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4105e8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4105ec:	e004      	b.n	4105f8 <_svfprintf_r+0xc68>
  4105ee:	3f10      	subs	r7, #16
  4105f0:	2f10      	cmp	r7, #16
  4105f2:	f106 0608 	add.w	r6, r6, #8
  4105f6:	dd15      	ble.n	410624 <_svfprintf_r+0xc94>
  4105f8:	3401      	adds	r4, #1
  4105fa:	3310      	adds	r3, #16
  4105fc:	2c07      	cmp	r4, #7
  4105fe:	932d      	str	r3, [sp, #180]	; 0xb4
  410600:	942c      	str	r4, [sp, #176]	; 0xb0
  410602:	e886 0420 	stmia.w	r6, {r5, sl}
  410606:	ddf2      	ble.n	4105ee <_svfprintf_r+0xc5e>
  410608:	4640      	mov	r0, r8
  41060a:	4659      	mov	r1, fp
  41060c:	aa2b      	add	r2, sp, #172	; 0xac
  41060e:	f006 f997 	bl	416940 <__ssprint_r>
  410612:	2800      	cmp	r0, #0
  410614:	f47f aad4 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410618:	3f10      	subs	r7, #16
  41061a:	2f10      	cmp	r7, #16
  41061c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  41061e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  410620:	ae38      	add	r6, sp, #224	; 0xe0
  410622:	dce9      	bgt.n	4105f8 <_svfprintf_r+0xc68>
  410624:	4698      	mov	r8, r3
  410626:	3401      	adds	r4, #1
  410628:	44b8      	add	r8, r7
  41062a:	2c07      	cmp	r4, #7
  41062c:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  410630:	942c      	str	r4, [sp, #176]	; 0xb0
  410632:	e886 00a0 	stmia.w	r6, {r5, r7}
  410636:	f77f af1e 	ble.w	410476 <_svfprintf_r+0xae6>
  41063a:	980d      	ldr	r0, [sp, #52]	; 0x34
  41063c:	990c      	ldr	r1, [sp, #48]	; 0x30
  41063e:	aa2b      	add	r2, sp, #172	; 0xac
  410640:	f006 f97e 	bl	416940 <__ssprint_r>
  410644:	2800      	cmp	r0, #0
  410646:	f47f aabb 	bne.w	40fbc0 <_svfprintf_r+0x230>
  41064a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  41064e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  410650:	ae38      	add	r6, sp, #224	; 0xe0
  410652:	e711      	b.n	410478 <_svfprintf_r+0xae8>
  410654:	4694      	mov	ip, r2
  410656:	3301      	adds	r3, #1
  410658:	44a4      	add	ip, r4
  41065a:	2b07      	cmp	r3, #7
  41065c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  410660:	932c      	str	r3, [sp, #176]	; 0xb0
  410662:	6035      	str	r5, [r6, #0]
  410664:	6074      	str	r4, [r6, #4]
  410666:	f77f ac04 	ble.w	40fe72 <_svfprintf_r+0x4e2>
  41066a:	e713      	b.n	410494 <_svfprintf_r+0xb04>
  41066c:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  410670:	4620      	mov	r0, r4
  410672:	4629      	mov	r1, r5
  410674:	220a      	movs	r2, #10
  410676:	2300      	movs	r3, #0
  410678:	f7fd ff32 	bl	40e4e0 <__aeabi_uldivmod>
  41067c:	3230      	adds	r2, #48	; 0x30
  41067e:	f88b 2000 	strb.w	r2, [fp]
  410682:	4620      	mov	r0, r4
  410684:	4629      	mov	r1, r5
  410686:	220a      	movs	r2, #10
  410688:	2300      	movs	r3, #0
  41068a:	f7fd ff29 	bl	40e4e0 <__aeabi_uldivmod>
  41068e:	4604      	mov	r4, r0
  410690:	460d      	mov	r5, r1
  410692:	ea54 0c05 	orrs.w	ip, r4, r5
  410696:	465f      	mov	r7, fp
  410698:	f10b 3bff 	add.w	fp, fp, #4294967295
  41069c:	d1e8      	bne.n	410670 <_svfprintf_r+0xce0>
  41069e:	9d08      	ldr	r5, [sp, #32]
  4106a0:	1bec      	subs	r4, r5, r7
  4106a2:	f7ff bb03 	b.w	40fcac <_svfprintf_r+0x31c>
  4106a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4106a8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4106ac:	682c      	ldr	r4, [r5, #0]
  4106ae:	17e5      	asrs	r5, r4, #31
  4106b0:	4622      	mov	r2, r4
  4106b2:	462b      	mov	r3, r5
  4106b4:	f10c 0c04 	add.w	ip, ip, #4
  4106b8:	2a00      	cmp	r2, #0
  4106ba:	f173 0000 	sbcs.w	r0, r3, #0
  4106be:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4106c2:	f6bf ac75 	bge.w	40ffb0 <_svfprintf_r+0x620>
  4106c6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4106ca:	4264      	negs	r4, r4
  4106cc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4106d0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4106d4:	2301      	movs	r3, #1
  4106d6:	f7ff bac9 	b.w	40fc6c <_svfprintf_r+0x2dc>
  4106da:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4106dc:	682c      	ldr	r4, [r5, #0]
  4106de:	3504      	adds	r5, #4
  4106e0:	9510      	str	r5, [sp, #64]	; 0x40
  4106e2:	2500      	movs	r5, #0
  4106e4:	f7ff babe 	b.w	40fc64 <_svfprintf_r+0x2d4>
  4106e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4106ea:	682c      	ldr	r4, [r5, #0]
  4106ec:	3504      	adds	r5, #4
  4106ee:	9510      	str	r5, [sp, #64]	; 0x40
  4106f0:	2301      	movs	r3, #1
  4106f2:	2500      	movs	r5, #0
  4106f4:	f7ff bab6 	b.w	40fc64 <_svfprintf_r+0x2d4>
  4106f8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4106fa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4106fc:	aa2b      	add	r2, sp, #172	; 0xac
  4106fe:	f006 f91f 	bl	416940 <__ssprint_r>
  410702:	2800      	cmp	r0, #0
  410704:	f47f aa5c 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410708:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  41070c:	ae38      	add	r6, sp, #224	; 0xe0
  41070e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410710:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410712:	442f      	add	r7, r5
  410714:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410716:	42ac      	cmp	r4, r5
  410718:	db42      	blt.n	4107a0 <_svfprintf_r+0xe10>
  41071a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41071c:	07e9      	lsls	r1, r5, #31
  41071e:	d43f      	bmi.n	4107a0 <_svfprintf_r+0xe10>
  410720:	9811      	ldr	r0, [sp, #68]	; 0x44
  410722:	ebc7 050a 	rsb	r5, r7, sl
  410726:	1b04      	subs	r4, r0, r4
  410728:	42ac      	cmp	r4, r5
  41072a:	bfb8      	it	lt
  41072c:	4625      	movlt	r5, r4
  41072e:	2d00      	cmp	r5, #0
  410730:	dd0b      	ble.n	41074a <_svfprintf_r+0xdba>
  410732:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410734:	6037      	str	r7, [r6, #0]
  410736:	3301      	adds	r3, #1
  410738:	44ac      	add	ip, r5
  41073a:	2b07      	cmp	r3, #7
  41073c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  410740:	6075      	str	r5, [r6, #4]
  410742:	932c      	str	r3, [sp, #176]	; 0xb0
  410744:	f300 8252 	bgt.w	410bec <_svfprintf_r+0x125c>
  410748:	3608      	adds	r6, #8
  41074a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  41074e:	1b64      	subs	r4, r4, r5
  410750:	2c00      	cmp	r4, #0
  410752:	f77f ab8f 	ble.w	40fe74 <_svfprintf_r+0x4e4>
  410756:	2c10      	cmp	r4, #16
  410758:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41075a:	4d53      	ldr	r5, [pc, #332]	; (4108a8 <_svfprintf_r+0xf18>)
  41075c:	f77f af7b 	ble.w	410656 <_svfprintf_r+0xcc6>
  410760:	2710      	movs	r7, #16
  410762:	4662      	mov	r2, ip
  410764:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  410768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  41076c:	e004      	b.n	410778 <_svfprintf_r+0xde8>
  41076e:	3608      	adds	r6, #8
  410770:	3c10      	subs	r4, #16
  410772:	2c10      	cmp	r4, #16
  410774:	f77f af6e 	ble.w	410654 <_svfprintf_r+0xcc4>
  410778:	3301      	adds	r3, #1
  41077a:	3210      	adds	r2, #16
  41077c:	2b07      	cmp	r3, #7
  41077e:	922d      	str	r2, [sp, #180]	; 0xb4
  410780:	932c      	str	r3, [sp, #176]	; 0xb0
  410782:	e886 00a0 	stmia.w	r6, {r5, r7}
  410786:	ddf2      	ble.n	41076e <_svfprintf_r+0xdde>
  410788:	4640      	mov	r0, r8
  41078a:	4651      	mov	r1, sl
  41078c:	aa2b      	add	r2, sp, #172	; 0xac
  41078e:	f006 f8d7 	bl	416940 <__ssprint_r>
  410792:	2800      	cmp	r0, #0
  410794:	f47f aa14 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410798:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  41079a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41079c:	ae38      	add	r6, sp, #224	; 0xe0
  41079e:	e7e7      	b.n	410770 <_svfprintf_r+0xde0>
  4107a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4107a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4107a4:	6035      	str	r5, [r6, #0]
  4107a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4107a8:	6075      	str	r5, [r6, #4]
  4107aa:	3301      	adds	r3, #1
  4107ac:	44ac      	add	ip, r5
  4107ae:	2b07      	cmp	r3, #7
  4107b0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4107b4:	932c      	str	r3, [sp, #176]	; 0xb0
  4107b6:	f300 81fb 	bgt.w	410bb0 <_svfprintf_r+0x1220>
  4107ba:	3608      	adds	r6, #8
  4107bc:	e7b0      	b.n	410720 <_svfprintf_r+0xd90>
  4107be:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4107c0:	07ea      	lsls	r2, r5, #31
  4107c2:	f53f ae27 	bmi.w	410414 <_svfprintf_r+0xa84>
  4107c6:	3401      	adds	r4, #1
  4107c8:	f10c 0801 	add.w	r8, ip, #1
  4107cc:	2301      	movs	r3, #1
  4107ce:	2c07      	cmp	r4, #7
  4107d0:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4107d4:	942c      	str	r4, [sp, #176]	; 0xb0
  4107d6:	6037      	str	r7, [r6, #0]
  4107d8:	6073      	str	r3, [r6, #4]
  4107da:	f77f ae4c 	ble.w	410476 <_svfprintf_r+0xae6>
  4107de:	e72c      	b.n	41063a <_svfprintf_r+0xcaa>
  4107e0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4107e2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4107e4:	aa2b      	add	r2, sp, #172	; 0xac
  4107e6:	f006 f8ab 	bl	416940 <__ssprint_r>
  4107ea:	2800      	cmp	r0, #0
  4107ec:	f47f a9e8 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4107f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4107f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4107f4:	ae38      	add	r6, sp, #224	; 0xe0
  4107f6:	e619      	b.n	41042c <_svfprintf_r+0xa9c>
  4107f8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4107fa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4107fc:	aa2b      	add	r2, sp, #172	; 0xac
  4107fe:	f006 f89f 	bl	416940 <__ssprint_r>
  410802:	2800      	cmp	r0, #0
  410804:	f47f a9dc 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410808:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  41080c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  41080e:	ae38      	add	r6, sp, #224	; 0xe0
  410810:	e61b      	b.n	41044a <_svfprintf_r+0xaba>
  410812:	980d      	ldr	r0, [sp, #52]	; 0x34
  410814:	990c      	ldr	r1, [sp, #48]	; 0x30
  410816:	aa2b      	add	r2, sp, #172	; 0xac
  410818:	f006 f892 	bl	416940 <__ssprint_r>
  41081c:	2800      	cmp	r0, #0
  41081e:	f47f a9cf 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410822:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410826:	ae38      	add	r6, sp, #224	; 0xe0
  410828:	f7ff bad2 	b.w	40fdd0 <_svfprintf_r+0x440>
  41082c:	f004 fdb2 	bl	415394 <__fpclassifyd>
  410830:	2800      	cmp	r0, #0
  410832:	f040 80c2 	bne.w	4109ba <_svfprintf_r+0x102a>
  410836:	9c09      	ldr	r4, [sp, #36]	; 0x24
  410838:	4f1c      	ldr	r7, [pc, #112]	; (4108ac <_svfprintf_r+0xf1c>)
  41083a:	4b1d      	ldr	r3, [pc, #116]	; (4108b0 <_svfprintf_r+0xf20>)
  41083c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410840:	900a      	str	r0, [sp, #40]	; 0x28
  410842:	f04f 0c03 	mov.w	ip, #3
  410846:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  41084a:	9409      	str	r4, [sp, #36]	; 0x24
  41084c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  410850:	9014      	str	r0, [sp, #80]	; 0x50
  410852:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  410856:	bfd8      	it	le
  410858:	461f      	movle	r7, r3
  41085a:	4664      	mov	r4, ip
  41085c:	f7ff ba2f 	b.w	40fcbe <_svfprintf_r+0x32e>
  410860:	e9d3 4500 	ldrd	r4, r5, [r3]
  410864:	3308      	adds	r3, #8
  410866:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  41086a:	9310      	str	r3, [sp, #64]	; 0x40
  41086c:	e476      	b.n	41015c <_svfprintf_r+0x7cc>
  41086e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  410872:	f01c 0f10 	tst.w	ip, #16
  410876:	f000 8155 	beq.w	410b24 <_svfprintf_r+0x1194>
  41087a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  41087c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  41087e:	6823      	ldr	r3, [r4, #0]
  410880:	3404      	adds	r4, #4
  410882:	9410      	str	r4, [sp, #64]	; 0x40
  410884:	601d      	str	r5, [r3, #0]
  410886:	f7ff b8a9 	b.w	40f9dc <_svfprintf_r+0x4c>
  41088a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41088c:	0664      	lsls	r4, r4, #25
  41088e:	f140 8142 	bpl.w	410b16 <_svfprintf_r+0x1186>
  410892:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  410896:	f8bc 4000 	ldrh.w	r4, [ip]
  41089a:	f10c 0c04 	add.w	ip, ip, #4
  41089e:	2500      	movs	r5, #0
  4108a0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4108a4:	f7ff b9ca 	b.w	40fc3c <_svfprintf_r+0x2ac>
  4108a8:	004191f4 	.word	0x004191f4
  4108ac:	00419210 	.word	0x00419210
  4108b0:	0041920c 	.word	0x0041920c
  4108b4:	462c      	mov	r4, r5
  4108b6:	463d      	mov	r5, r7
  4108b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4108ba:	4694      	mov	ip, r2
  4108bc:	3301      	adds	r3, #1
  4108be:	44a4      	add	ip, r4
  4108c0:	2b07      	cmp	r3, #7
  4108c2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4108c6:	932c      	str	r3, [sp, #176]	; 0xb0
  4108c8:	6035      	str	r5, [r6, #0]
  4108ca:	6074      	str	r4, [r6, #4]
  4108cc:	f73f af14 	bgt.w	4106f8 <_svfprintf_r+0xd68>
  4108d0:	3608      	adds	r6, #8
  4108d2:	e71c      	b.n	41070e <_svfprintf_r+0xd7e>
  4108d4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4108d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4108d8:	aa2b      	add	r2, sp, #172	; 0xac
  4108da:	f006 f831 	bl	416940 <__ssprint_r>
  4108de:	2800      	cmp	r0, #0
  4108e0:	f47f a96e 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4108e4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4108e8:	ae38      	add	r6, sp, #224	; 0xe0
  4108ea:	e4fd      	b.n	4102e8 <_svfprintf_r+0x958>
  4108ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4108ee:	49b7      	ldr	r1, [pc, #732]	; (410bcc <_svfprintf_r+0x123c>)
  4108f0:	6031      	str	r1, [r6, #0]
  4108f2:	3201      	adds	r2, #1
  4108f4:	f10c 0c01 	add.w	ip, ip, #1
  4108f8:	2101      	movs	r1, #1
  4108fa:	2a07      	cmp	r2, #7
  4108fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  410900:	922c      	str	r2, [sp, #176]	; 0xb0
  410902:	6071      	str	r1, [r6, #4]
  410904:	f300 80f7 	bgt.w	410af6 <_svfprintf_r+0x1166>
  410908:	3608      	adds	r6, #8
  41090a:	461c      	mov	r4, r3
  41090c:	b92c      	cbnz	r4, 41091a <_svfprintf_r+0xf8a>
  41090e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410910:	b91d      	cbnz	r5, 41091a <_svfprintf_r+0xf8a>
  410912:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410914:	07e8      	lsls	r0, r5, #31
  410916:	f57f aaad 	bpl.w	40fe74 <_svfprintf_r+0x4e4>
  41091a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41091c:	9918      	ldr	r1, [sp, #96]	; 0x60
  41091e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  410920:	6035      	str	r5, [r6, #0]
  410922:	3301      	adds	r3, #1
  410924:	4461      	add	r1, ip
  410926:	9d18      	ldr	r5, [sp, #96]	; 0x60
  410928:	912d      	str	r1, [sp, #180]	; 0xb4
  41092a:	2b07      	cmp	r3, #7
  41092c:	6075      	str	r5, [r6, #4]
  41092e:	932c      	str	r3, [sp, #176]	; 0xb0
  410930:	f300 81de 	bgt.w	410cf0 <_svfprintf_r+0x1360>
  410934:	f106 0208 	add.w	r2, r6, #8
  410938:	4264      	negs	r4, r4
  41093a:	2c00      	cmp	r4, #0
  41093c:	f340 810b 	ble.w	410b56 <_svfprintf_r+0x11c6>
  410940:	2c10      	cmp	r4, #16
  410942:	4da3      	ldr	r5, [pc, #652]	; (410bd0 <_svfprintf_r+0x1240>)
  410944:	f340 8148 	ble.w	410bd8 <_svfprintf_r+0x1248>
  410948:	46a3      	mov	fp, r4
  41094a:	2610      	movs	r6, #16
  41094c:	460c      	mov	r4, r1
  41094e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  410952:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  410956:	e006      	b.n	410966 <_svfprintf_r+0xfd6>
  410958:	3208      	adds	r2, #8
  41095a:	f1ab 0b10 	sub.w	fp, fp, #16
  41095e:	f1bb 0f10 	cmp.w	fp, #16
  410962:	f340 8137 	ble.w	410bd4 <_svfprintf_r+0x1244>
  410966:	3301      	adds	r3, #1
  410968:	3410      	adds	r4, #16
  41096a:	2b07      	cmp	r3, #7
  41096c:	942d      	str	r4, [sp, #180]	; 0xb4
  41096e:	932c      	str	r3, [sp, #176]	; 0xb0
  410970:	e882 0060 	stmia.w	r2, {r5, r6}
  410974:	ddf0      	ble.n	410958 <_svfprintf_r+0xfc8>
  410976:	4640      	mov	r0, r8
  410978:	4651      	mov	r1, sl
  41097a:	aa2b      	add	r2, sp, #172	; 0xac
  41097c:	f005 ffe0 	bl	416940 <__ssprint_r>
  410980:	2800      	cmp	r0, #0
  410982:	f47f a91d 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410986:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  410988:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  41098a:	aa38      	add	r2, sp, #224	; 0xe0
  41098c:	e7e5      	b.n	41095a <_svfprintf_r+0xfca>
  41098e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  410990:	f893 8001 	ldrb.w	r8, [r3, #1]
  410994:	f044 0420 	orr.w	r4, r4, #32
  410998:	f109 0901 	add.w	r9, r9, #1
  41099c:	9409      	str	r4, [sp, #36]	; 0x24
  41099e:	f7ff b853 	b.w	40fa48 <_svfprintf_r+0xb8>
  4109a2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4109a4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4109a6:	aa2b      	add	r2, sp, #172	; 0xac
  4109a8:	f005 ffca 	bl	416940 <__ssprint_r>
  4109ac:	2800      	cmp	r0, #0
  4109ae:	f47f a907 	bne.w	40fbc0 <_svfprintf_r+0x230>
  4109b2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4109b6:	ae38      	add	r6, sp, #224	; 0xe0
  4109b8:	e4ac      	b.n	410314 <_svfprintf_r+0x984>
  4109ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4109bc:	3501      	adds	r5, #1
  4109be:	f028 0a20 	bic.w	sl, r8, #32
  4109c2:	f000 80a5 	beq.w	410b10 <_svfprintf_r+0x1180>
  4109c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4109ca:	d104      	bne.n	4109d6 <_svfprintf_r+0x1046>
  4109cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4109ce:	2d00      	cmp	r5, #0
  4109d0:	bf08      	it	eq
  4109d2:	2501      	moveq	r5, #1
  4109d4:	950a      	str	r5, [sp, #40]	; 0x28
  4109d6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4109da:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4109de:	2b00      	cmp	r3, #0
  4109e0:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  4109e4:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4109e8:	f2c0 819c 	blt.w	410d24 <_svfprintf_r+0x1394>
  4109ec:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4109f0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  4109f4:	f04f 0b00 	mov.w	fp, #0
  4109f8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4109fc:	f000 819b 	beq.w	410d36 <_svfprintf_r+0x13a6>
  410a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  410a04:	f000 81a9 	beq.w	410d5a <_svfprintf_r+0x13ca>
  410a08:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  410a0c:	bf0a      	itet	eq
  410a0e:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  410a10:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  410a12:	1c65      	addeq	r5, r4, #1
  410a14:	2002      	movs	r0, #2
  410a16:	a925      	add	r1, sp, #148	; 0x94
  410a18:	aa26      	add	r2, sp, #152	; 0x98
  410a1a:	ab29      	add	r3, sp, #164	; 0xa4
  410a1c:	e88d 0021 	stmia.w	sp, {r0, r5}
  410a20:	9203      	str	r2, [sp, #12]
  410a22:	9304      	str	r3, [sp, #16]
  410a24:	9102      	str	r1, [sp, #8]
  410a26:	980d      	ldr	r0, [sp, #52]	; 0x34
  410a28:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  410a2c:	f002 f93c 	bl	412ca8 <_dtoa_r>
  410a30:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  410a34:	4607      	mov	r7, r0
  410a36:	d002      	beq.n	410a3e <_svfprintf_r+0x10ae>
  410a38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  410a3c:	d105      	bne.n	410a4a <_svfprintf_r+0x10ba>
  410a3e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  410a42:	f01c 0f01 	tst.w	ip, #1
  410a46:	f000 819c 	beq.w	410d82 <_svfprintf_r+0x13f2>
  410a4a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  410a4e:	eb07 0405 	add.w	r4, r7, r5
  410a52:	f000 811c 	beq.w	410c8e <_svfprintf_r+0x12fe>
  410a56:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  410a5a:	2200      	movs	r2, #0
  410a5c:	2300      	movs	r3, #0
  410a5e:	f007 fa17 	bl	417e90 <__aeabi_dcmpeq>
  410a62:	2800      	cmp	r0, #0
  410a64:	f040 8105 	bne.w	410c72 <_svfprintf_r+0x12e2>
  410a68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  410a6a:	429c      	cmp	r4, r3
  410a6c:	d906      	bls.n	410a7c <_svfprintf_r+0x10ec>
  410a6e:	2130      	movs	r1, #48	; 0x30
  410a70:	1c5a      	adds	r2, r3, #1
  410a72:	9229      	str	r2, [sp, #164]	; 0xa4
  410a74:	7019      	strb	r1, [r3, #0]
  410a76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  410a78:	429c      	cmp	r4, r3
  410a7a:	d8f9      	bhi.n	410a70 <_svfprintf_r+0x10e0>
  410a7c:	1bdb      	subs	r3, r3, r7
  410a7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  410a82:	9311      	str	r3, [sp, #68]	; 0x44
  410a84:	f000 80ed 	beq.w	410c62 <_svfprintf_r+0x12d2>
  410a88:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  410a8c:	f340 81f2 	ble.w	410e74 <_svfprintf_r+0x14e4>
  410a90:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  410a94:	f000 8168 	beq.w	410d68 <_svfprintf_r+0x13d8>
  410a98:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410a9a:	9414      	str	r4, [sp, #80]	; 0x50
  410a9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
  410a9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410aa0:	42ac      	cmp	r4, r5
  410aa2:	f300 8132 	bgt.w	410d0a <_svfprintf_r+0x137a>
  410aa6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  410aaa:	f01c 0f01 	tst.w	ip, #1
  410aae:	f040 81ad 	bne.w	410e0c <_svfprintf_r+0x147c>
  410ab2:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  410ab6:	462c      	mov	r4, r5
  410ab8:	f04f 0867 	mov.w	r8, #103	; 0x67
  410abc:	f1bb 0f00 	cmp.w	fp, #0
  410ac0:	f040 80b2 	bne.w	410c28 <_svfprintf_r+0x1298>
  410ac4:	9d12      	ldr	r5, [sp, #72]	; 0x48
  410ac6:	930b      	str	r3, [sp, #44]	; 0x2c
  410ac8:	9509      	str	r5, [sp, #36]	; 0x24
  410aca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  410ace:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410ad2:	f7ff b8f4 	b.w	40fcbe <_svfprintf_r+0x32e>
  410ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
  410ad8:	2140      	movs	r1, #64	; 0x40
  410ada:	f7fe f823 	bl	40eb24 <_malloc_r>
  410ade:	6020      	str	r0, [r4, #0]
  410ae0:	6120      	str	r0, [r4, #16]
  410ae2:	2800      	cmp	r0, #0
  410ae4:	f000 81bf 	beq.w	410e66 <_svfprintf_r+0x14d6>
  410ae8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  410aec:	2340      	movs	r3, #64	; 0x40
  410aee:	f8cc 3014 	str.w	r3, [ip, #20]
  410af2:	f7fe bf63 	b.w	40f9bc <_svfprintf_r+0x2c>
  410af6:	980d      	ldr	r0, [sp, #52]	; 0x34
  410af8:	990c      	ldr	r1, [sp, #48]	; 0x30
  410afa:	aa2b      	add	r2, sp, #172	; 0xac
  410afc:	f005 ff20 	bl	416940 <__ssprint_r>
  410b00:	2800      	cmp	r0, #0
  410b02:	f47f a85d 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410b06:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410b08:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410b0c:	ae38      	add	r6, sp, #224	; 0xe0
  410b0e:	e6fd      	b.n	41090c <_svfprintf_r+0xf7c>
  410b10:	2406      	movs	r4, #6
  410b12:	940a      	str	r4, [sp, #40]	; 0x28
  410b14:	e75f      	b.n	4109d6 <_svfprintf_r+0x1046>
  410b16:	9d10      	ldr	r5, [sp, #64]	; 0x40
  410b18:	682c      	ldr	r4, [r5, #0]
  410b1a:	3504      	adds	r5, #4
  410b1c:	9510      	str	r5, [sp, #64]	; 0x40
  410b1e:	2500      	movs	r5, #0
  410b20:	f7ff b88c 	b.w	40fc3c <_svfprintf_r+0x2ac>
  410b24:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  410b28:	f01c 0f40 	tst.w	ip, #64	; 0x40
  410b2c:	f000 8087 	beq.w	410c3e <_svfprintf_r+0x12ae>
  410b30:	9c10      	ldr	r4, [sp, #64]	; 0x40
  410b32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  410b34:	6823      	ldr	r3, [r4, #0]
  410b36:	3404      	adds	r4, #4
  410b38:	9410      	str	r4, [sp, #64]	; 0x40
  410b3a:	801d      	strh	r5, [r3, #0]
  410b3c:	f7fe bf4e 	b.w	40f9dc <_svfprintf_r+0x4c>
  410b40:	980d      	ldr	r0, [sp, #52]	; 0x34
  410b42:	990c      	ldr	r1, [sp, #48]	; 0x30
  410b44:	aa2b      	add	r2, sp, #172	; 0xac
  410b46:	f005 fefb 	bl	416940 <__ssprint_r>
  410b4a:	2800      	cmp	r0, #0
  410b4c:	f47f a838 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410b50:	992d      	ldr	r1, [sp, #180]	; 0xb4
  410b52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410b54:	aa38      	add	r2, sp, #224	; 0xe0
  410b56:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  410b5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  410b5c:	6017      	str	r7, [r2, #0]
  410b5e:	3301      	adds	r3, #1
  410b60:	448c      	add	ip, r1
  410b62:	2b07      	cmp	r3, #7
  410b64:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  410b68:	932c      	str	r3, [sp, #176]	; 0xb0
  410b6a:	6054      	str	r4, [r2, #4]
  410b6c:	f73f ac92 	bgt.w	410494 <_svfprintf_r+0xb04>
  410b70:	f102 0608 	add.w	r6, r2, #8
  410b74:	f7ff b97e 	b.w	40fe74 <_svfprintf_r+0x4e4>
  410b78:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  410b7c:	f7fe fe4c 	bl	40f818 <strlen>
  410b80:	9510      	str	r5, [sp, #64]	; 0x40
  410b82:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  410b86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410b88:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  410b8c:	4604      	mov	r4, r0
  410b8e:	9514      	str	r5, [sp, #80]	; 0x50
  410b90:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410b94:	f7ff b893 	b.w	40fcbe <_svfprintf_r+0x32e>
  410b98:	980d      	ldr	r0, [sp, #52]	; 0x34
  410b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
  410b9c:	aa2b      	add	r2, sp, #172	; 0xac
  410b9e:	f005 fecf 	bl	416940 <__ssprint_r>
  410ba2:	2800      	cmp	r0, #0
  410ba4:	f47f a80c 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410ba8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410bac:	ae38      	add	r6, sp, #224	; 0xe0
  410bae:	e4cc      	b.n	41054a <_svfprintf_r+0xbba>
  410bb0:	980d      	ldr	r0, [sp, #52]	; 0x34
  410bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
  410bb4:	aa2b      	add	r2, sp, #172	; 0xac
  410bb6:	f005 fec3 	bl	416940 <__ssprint_r>
  410bba:	2800      	cmp	r0, #0
  410bbc:	f47f a800 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410bc0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410bc2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410bc6:	ae38      	add	r6, sp, #224	; 0xe0
  410bc8:	e5aa      	b.n	410720 <_svfprintf_r+0xd90>
  410bca:	bf00      	nop
  410bcc:	00419244 	.word	0x00419244
  410bd0:	004191f4 	.word	0x004191f4
  410bd4:	4621      	mov	r1, r4
  410bd6:	465c      	mov	r4, fp
  410bd8:	3301      	adds	r3, #1
  410bda:	4421      	add	r1, r4
  410bdc:	2b07      	cmp	r3, #7
  410bde:	912d      	str	r1, [sp, #180]	; 0xb4
  410be0:	932c      	str	r3, [sp, #176]	; 0xb0
  410be2:	6015      	str	r5, [r2, #0]
  410be4:	6054      	str	r4, [r2, #4]
  410be6:	dcab      	bgt.n	410b40 <_svfprintf_r+0x11b0>
  410be8:	3208      	adds	r2, #8
  410bea:	e7b4      	b.n	410b56 <_svfprintf_r+0x11c6>
  410bec:	980d      	ldr	r0, [sp, #52]	; 0x34
  410bee:	990c      	ldr	r1, [sp, #48]	; 0x30
  410bf0:	aa2b      	add	r2, sp, #172	; 0xac
  410bf2:	f005 fea5 	bl	416940 <__ssprint_r>
  410bf6:	2800      	cmp	r0, #0
  410bf8:	f47e afe2 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410bfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410bfe:	9911      	ldr	r1, [sp, #68]	; 0x44
  410c00:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  410c04:	1b0c      	subs	r4, r1, r4
  410c06:	ae38      	add	r6, sp, #224	; 0xe0
  410c08:	e59f      	b.n	41074a <_svfprintf_r+0xdba>
  410c0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410c0c:	9714      	str	r7, [sp, #80]	; 0x50
  410c0e:	2c06      	cmp	r4, #6
  410c10:	bf28      	it	cs
  410c12:	2406      	movcs	r4, #6
  410c14:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  410c18:	46ba      	mov	sl, r7
  410c1a:	970a      	str	r7, [sp, #40]	; 0x28
  410c1c:	9510      	str	r5, [sp, #64]	; 0x40
  410c1e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  410c22:	4f97      	ldr	r7, [pc, #604]	; (410e80 <_svfprintf_r+0x14f0>)
  410c24:	f7ff b84b 	b.w	40fcbe <_svfprintf_r+0x32e>
  410c28:	9d12      	ldr	r5, [sp, #72]	; 0x48
  410c2a:	9509      	str	r5, [sp, #36]	; 0x24
  410c2c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  410c30:	2500      	movs	r5, #0
  410c32:	930b      	str	r3, [sp, #44]	; 0x2c
  410c34:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  410c38:	950a      	str	r5, [sp, #40]	; 0x28
  410c3a:	f7ff b843 	b.w	40fcc4 <_svfprintf_r+0x334>
  410c3e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  410c42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  410c44:	f8dc 3000 	ldr.w	r3, [ip]
  410c48:	f10c 0c04 	add.w	ip, ip, #4
  410c4c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  410c50:	601c      	str	r4, [r3, #0]
  410c52:	f7fe bec3 	b.w	40f9dc <_svfprintf_r+0x4c>
  410c56:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  410c5a:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  410c5e:	f7ff ba8f 	b.w	410180 <_svfprintf_r+0x7f0>
  410c62:	9b25      	ldr	r3, [sp, #148]	; 0x94
  410c64:	1cdc      	adds	r4, r3, #3
  410c66:	db19      	blt.n	410c9c <_svfprintf_r+0x130c>
  410c68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410c6a:	429c      	cmp	r4, r3
  410c6c:	db16      	blt.n	410c9c <_svfprintf_r+0x130c>
  410c6e:	9314      	str	r3, [sp, #80]	; 0x50
  410c70:	e714      	b.n	410a9c <_svfprintf_r+0x110c>
  410c72:	4623      	mov	r3, r4
  410c74:	e702      	b.n	410a7c <_svfprintf_r+0x10ec>
  410c76:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  410c7a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  410c7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410c80:	9510      	str	r5, [sp, #64]	; 0x40
  410c82:	900a      	str	r0, [sp, #40]	; 0x28
  410c84:	9014      	str	r0, [sp, #80]	; 0x50
  410c86:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  410c8a:	f7ff b818 	b.w	40fcbe <_svfprintf_r+0x32e>
  410c8e:	783b      	ldrb	r3, [r7, #0]
  410c90:	2b30      	cmp	r3, #48	; 0x30
  410c92:	f000 80ad 	beq.w	410df0 <_svfprintf_r+0x1460>
  410c96:	9d25      	ldr	r5, [sp, #148]	; 0x94
  410c98:	442c      	add	r4, r5
  410c9a:	e6dc      	b.n	410a56 <_svfprintf_r+0x10c6>
  410c9c:	f1a8 0802 	sub.w	r8, r8, #2
  410ca0:	3b01      	subs	r3, #1
  410ca2:	2b00      	cmp	r3, #0
  410ca4:	9325      	str	r3, [sp, #148]	; 0x94
  410ca6:	bfba      	itte	lt
  410ca8:	425b      	neglt	r3, r3
  410caa:	222d      	movlt	r2, #45	; 0x2d
  410cac:	222b      	movge	r2, #43	; 0x2b
  410cae:	2b09      	cmp	r3, #9
  410cb0:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  410cb4:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  410cb8:	dc65      	bgt.n	410d86 <_svfprintf_r+0x13f6>
  410cba:	3330      	adds	r3, #48	; 0x30
  410cbc:	2230      	movs	r2, #48	; 0x30
  410cbe:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  410cc2:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  410cc6:	ab28      	add	r3, sp, #160	; 0xa0
  410cc8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410cca:	9c11      	ldr	r4, [sp, #68]	; 0x44
  410ccc:	aa27      	add	r2, sp, #156	; 0x9c
  410cce:	1a9a      	subs	r2, r3, r2
  410cd0:	2d01      	cmp	r5, #1
  410cd2:	9219      	str	r2, [sp, #100]	; 0x64
  410cd4:	4414      	add	r4, r2
  410cd6:	f340 80b7 	ble.w	410e48 <_svfprintf_r+0x14b8>
  410cda:	3401      	adds	r4, #1
  410cdc:	2500      	movs	r5, #0
  410cde:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410ce2:	9514      	str	r5, [sp, #80]	; 0x50
  410ce4:	e6ea      	b.n	410abc <_svfprintf_r+0x112c>
  410ce6:	2400      	movs	r4, #0
  410ce8:	4681      	mov	r9, r0
  410cea:	940a      	str	r4, [sp, #40]	; 0x28
  410cec:	f7fe beae 	b.w	40fa4c <_svfprintf_r+0xbc>
  410cf0:	980d      	ldr	r0, [sp, #52]	; 0x34
  410cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
  410cf4:	aa2b      	add	r2, sp, #172	; 0xac
  410cf6:	f005 fe23 	bl	416940 <__ssprint_r>
  410cfa:	2800      	cmp	r0, #0
  410cfc:	f47e af60 	bne.w	40fbc0 <_svfprintf_r+0x230>
  410d00:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410d02:	992d      	ldr	r1, [sp, #180]	; 0xb4
  410d04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410d06:	aa38      	add	r2, sp, #224	; 0xe0
  410d08:	e616      	b.n	410938 <_svfprintf_r+0xfa8>
  410d0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
  410d0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  410d0e:	2c00      	cmp	r4, #0
  410d10:	bfd4      	ite	le
  410d12:	f1c4 0402 	rsble	r4, r4, #2
  410d16:	2401      	movgt	r4, #1
  410d18:	442c      	add	r4, r5
  410d1a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410d1e:	f04f 0867 	mov.w	r8, #103	; 0x67
  410d22:	e6cb      	b.n	410abc <_svfprintf_r+0x112c>
  410d24:	9917      	ldr	r1, [sp, #92]	; 0x5c
  410d26:	9816      	ldr	r0, [sp, #88]	; 0x58
  410d28:	9020      	str	r0, [sp, #128]	; 0x80
  410d2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  410d2e:	9121      	str	r1, [sp, #132]	; 0x84
  410d30:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  410d34:	e660      	b.n	4109f8 <_svfprintf_r+0x1068>
  410d36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410d38:	9501      	str	r5, [sp, #4]
  410d3a:	2003      	movs	r0, #3
  410d3c:	a925      	add	r1, sp, #148	; 0x94
  410d3e:	aa26      	add	r2, sp, #152	; 0x98
  410d40:	ab29      	add	r3, sp, #164	; 0xa4
  410d42:	9000      	str	r0, [sp, #0]
  410d44:	9203      	str	r2, [sp, #12]
  410d46:	9304      	str	r3, [sp, #16]
  410d48:	9102      	str	r1, [sp, #8]
  410d4a:	980d      	ldr	r0, [sp, #52]	; 0x34
  410d4c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  410d50:	f001 ffaa 	bl	412ca8 <_dtoa_r>
  410d54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410d56:	4607      	mov	r7, r0
  410d58:	e677      	b.n	410a4a <_svfprintf_r+0x10ba>
  410d5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410d5c:	9401      	str	r4, [sp, #4]
  410d5e:	2003      	movs	r0, #3
  410d60:	a925      	add	r1, sp, #148	; 0x94
  410d62:	aa26      	add	r2, sp, #152	; 0x98
  410d64:	ab29      	add	r3, sp, #164	; 0xa4
  410d66:	e7ec      	b.n	410d42 <_svfprintf_r+0x13b2>
  410d68:	9d25      	ldr	r5, [sp, #148]	; 0x94
  410d6a:	9514      	str	r5, [sp, #80]	; 0x50
  410d6c:	2d00      	cmp	r5, #0
  410d6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  410d70:	dd63      	ble.n	410e3a <_svfprintf_r+0x14aa>
  410d72:	bbb4      	cbnz	r4, 410de2 <_svfprintf_r+0x1452>
  410d74:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410d76:	07e8      	lsls	r0, r5, #31
  410d78:	d433      	bmi.n	410de2 <_svfprintf_r+0x1452>
  410d7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
  410d7c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410d80:	e69c      	b.n	410abc <_svfprintf_r+0x112c>
  410d82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  410d84:	e67a      	b.n	410a7c <_svfprintf_r+0x10ec>
  410d86:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  410d8a:	4d3e      	ldr	r5, [pc, #248]	; (410e84 <_svfprintf_r+0x14f4>)
  410d8c:	17da      	asrs	r2, r3, #31
  410d8e:	fb85 5103 	smull	r5, r1, r5, r3
  410d92:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  410d96:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  410d9a:	4602      	mov	r2, r0
  410d9c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  410da0:	f103 0030 	add.w	r0, r3, #48	; 0x30
  410da4:	2909      	cmp	r1, #9
  410da6:	7010      	strb	r0, [r2, #0]
  410da8:	460b      	mov	r3, r1
  410daa:	f102 30ff 	add.w	r0, r2, #4294967295
  410dae:	dcec      	bgt.n	410d8a <_svfprintf_r+0x13fa>
  410db0:	f101 0330 	add.w	r3, r1, #48	; 0x30
  410db4:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  410db8:	b2d9      	uxtb	r1, r3
  410dba:	4284      	cmp	r4, r0
  410dbc:	f802 1c01 	strb.w	r1, [r2, #-1]
  410dc0:	d95a      	bls.n	410e78 <_svfprintf_r+0x14e8>
  410dc2:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  410dc6:	4613      	mov	r3, r2
  410dc8:	e001      	b.n	410dce <_svfprintf_r+0x143e>
  410dca:	f813 1b01 	ldrb.w	r1, [r3], #1
  410dce:	42a3      	cmp	r3, r4
  410dd0:	f800 1f01 	strb.w	r1, [r0, #1]!
  410dd4:	d1f9      	bne.n	410dca <_svfprintf_r+0x143a>
  410dd6:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  410dda:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  410dde:	3bf6      	subs	r3, #246	; 0xf6
  410de0:	e772      	b.n	410cc8 <_svfprintf_r+0x1338>
  410de2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410de4:	1c6c      	adds	r4, r5, #1
  410de6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410de8:	442c      	add	r4, r5
  410dea:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410dee:	e665      	b.n	410abc <_svfprintf_r+0x112c>
  410df0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  410df4:	2200      	movs	r2, #0
  410df6:	2300      	movs	r3, #0
  410df8:	f007 f84a 	bl	417e90 <__aeabi_dcmpeq>
  410dfc:	2800      	cmp	r0, #0
  410dfe:	f47f af4a 	bne.w	410c96 <_svfprintf_r+0x1306>
  410e02:	f1c5 0501 	rsb	r5, r5, #1
  410e06:	9525      	str	r5, [sp, #148]	; 0x94
  410e08:	442c      	add	r4, r5
  410e0a:	e624      	b.n	410a56 <_svfprintf_r+0x10c6>
  410e0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410e0e:	1c6c      	adds	r4, r5, #1
  410e10:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410e14:	f04f 0867 	mov.w	r8, #103	; 0x67
  410e18:	e650      	b.n	410abc <_svfprintf_r+0x112c>
  410e1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  410e1c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  410e20:	682d      	ldr	r5, [r5, #0]
  410e22:	f899 8001 	ldrb.w	r8, [r9, #1]
  410e26:	950a      	str	r5, [sp, #40]	; 0x28
  410e28:	f10c 0304 	add.w	r3, ip, #4
  410e2c:	2d00      	cmp	r5, #0
  410e2e:	9310      	str	r3, [sp, #64]	; 0x40
  410e30:	4681      	mov	r9, r0
  410e32:	f6be ae09 	bge.w	40fa48 <_svfprintf_r+0xb8>
  410e36:	f7fe be04 	b.w	40fa42 <_svfprintf_r+0xb2>
  410e3a:	b97c      	cbnz	r4, 410e5c <_svfprintf_r+0x14cc>
  410e3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410e3e:	07e9      	lsls	r1, r5, #31
  410e40:	d40c      	bmi.n	410e5c <_svfprintf_r+0x14cc>
  410e42:	2301      	movs	r3, #1
  410e44:	461c      	mov	r4, r3
  410e46:	e639      	b.n	410abc <_svfprintf_r+0x112c>
  410e48:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  410e4c:	f01c 0301 	ands.w	r3, ip, #1
  410e50:	f47f af43 	bne.w	410cda <_svfprintf_r+0x134a>
  410e54:	9314      	str	r3, [sp, #80]	; 0x50
  410e56:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410e5a:	e62f      	b.n	410abc <_svfprintf_r+0x112c>
  410e5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410e5e:	1cac      	adds	r4, r5, #2
  410e60:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  410e64:	e62a      	b.n	410abc <_svfprintf_r+0x112c>
  410e66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  410e68:	230c      	movs	r3, #12
  410e6a:	602b      	str	r3, [r5, #0]
  410e6c:	f04f 30ff 	mov.w	r0, #4294967295
  410e70:	f7fe beae 	b.w	40fbd0 <_svfprintf_r+0x240>
  410e74:	9b25      	ldr	r3, [sp, #148]	; 0x94
  410e76:	e713      	b.n	410ca0 <_svfprintf_r+0x1310>
  410e78:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  410e7c:	e724      	b.n	410cc8 <_svfprintf_r+0x1338>
  410e7e:	bf00      	nop
  410e80:	0041923c 	.word	0x0041923c
  410e84:	66666667 	.word	0x66666667

00410e88 <__ssvfscanf_r>:
  410e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410e8c:	460d      	mov	r5, r1
  410e8e:	8989      	ldrh	r1, [r1, #12]
  410e90:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  410e94:	048c      	lsls	r4, r1, #18
  410e96:	900e      	str	r0, [sp, #56]	; 0x38
  410e98:	9306      	str	r3, [sp, #24]
  410e9a:	d406      	bmi.n	410eaa <__ssvfscanf_r+0x22>
  410e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  410e9e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  410ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  410ea6:	81a9      	strh	r1, [r5, #12]
  410ea8:	666b      	str	r3, [r5, #100]	; 0x64
  410eaa:	4692      	mov	sl, r2
  410eac:	2400      	movs	r4, #0
  410eae:	f81a 3b01 	ldrb.w	r3, [sl], #1
  410eb2:	9409      	str	r4, [sp, #36]	; 0x24
  410eb4:	940c      	str	r4, [sp, #48]	; 0x30
  410eb6:	46a1      	mov	r9, r4
  410eb8:	940b      	str	r4, [sp, #44]	; 0x2c
  410eba:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 4112a0 <__ssvfscanf_r+0x418>
  410ebe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  410ec0:	9313      	str	r3, [sp, #76]	; 0x4c
  410ec2:	b343      	cbz	r3, 410f16 <__ssvfscanf_r+0x8e>
  410ec4:	f8d8 1000 	ldr.w	r1, [r8]
  410ec8:	18c8      	adds	r0, r1, r3
  410eca:	7840      	ldrb	r0, [r0, #1]
  410ecc:	f000 0008 	and.w	r0, r0, #8
  410ed0:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  410ed4:	b320      	cbz	r0, 410f20 <__ssvfscanf_r+0x98>
  410ed6:	686b      	ldr	r3, [r5, #4]
  410ed8:	e00e      	b.n	410ef8 <__ssvfscanf_r+0x70>
  410eda:	682b      	ldr	r3, [r5, #0]
  410edc:	f8d8 2000 	ldr.w	r2, [r8]
  410ee0:	7819      	ldrb	r1, [r3, #0]
  410ee2:	440a      	add	r2, r1
  410ee4:	3301      	adds	r3, #1
  410ee6:	7852      	ldrb	r2, [r2, #1]
  410ee8:	0710      	lsls	r0, r2, #28
  410eea:	d50d      	bpl.n	410f08 <__ssvfscanf_r+0x80>
  410eec:	686a      	ldr	r2, [r5, #4]
  410eee:	602b      	str	r3, [r5, #0]
  410ef0:	1e53      	subs	r3, r2, #1
  410ef2:	f109 0901 	add.w	r9, r9, #1
  410ef6:	606b      	str	r3, [r5, #4]
  410ef8:	2b00      	cmp	r3, #0
  410efa:	dcee      	bgt.n	410eda <__ssvfscanf_r+0x52>
  410efc:	4630      	mov	r0, r6
  410efe:	4629      	mov	r1, r5
  410f00:	f005 fdde 	bl	416ac0 <__ssrefill_r>
  410f04:	2800      	cmp	r0, #0
  410f06:	d0e8      	beq.n	410eda <__ssvfscanf_r+0x52>
  410f08:	4652      	mov	r2, sl
  410f0a:	4692      	mov	sl, r2
  410f0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  410f10:	9313      	str	r3, [sp, #76]	; 0x4c
  410f12:	2b00      	cmp	r3, #0
  410f14:	d1d6      	bne.n	410ec4 <__ssvfscanf_r+0x3c>
  410f16:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410f18:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  410f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410f20:	2b25      	cmp	r3, #37	; 0x25
  410f22:	f040 8084 	bne.w	41102e <__ssvfscanf_r+0x1a6>
  410f26:	7853      	ldrb	r3, [r2, #1]
  410f28:	463c      	mov	r4, r7
  410f2a:	f10a 0201 	add.w	r2, sl, #1
  410f2e:	2b78      	cmp	r3, #120	; 0x78
  410f30:	f200 82e5 	bhi.w	4114fe <__ssvfscanf_r+0x676>
  410f34:	e8df f013 	tbh	[pc, r3, lsl #1]
  410f38:	02e3008f 	.word	0x02e3008f
  410f3c:	02e302e3 	.word	0x02e302e3
  410f40:	02e302e3 	.word	0x02e302e3
  410f44:	02e302e3 	.word	0x02e302e3
  410f48:	02e302e3 	.word	0x02e302e3
  410f4c:	02e302e3 	.word	0x02e302e3
  410f50:	02e302e3 	.word	0x02e302e3
  410f54:	02e302e3 	.word	0x02e302e3
  410f58:	02e302e3 	.word	0x02e302e3
  410f5c:	02e302e3 	.word	0x02e302e3
  410f60:	02e302e3 	.word	0x02e302e3
  410f64:	02e302e3 	.word	0x02e302e3
  410f68:	02e302e3 	.word	0x02e302e3
  410f6c:	02e302e3 	.word	0x02e302e3
  410f70:	02e302e3 	.word	0x02e302e3
  410f74:	02e302e3 	.word	0x02e302e3
  410f78:	02e302e3 	.word	0x02e302e3
  410f7c:	02e302e3 	.word	0x02e302e3
  410f80:	007902e3 	.word	0x007902e3
  410f84:	02e302e3 	.word	0x02e302e3
  410f88:	02e302e3 	.word	0x02e302e3
  410f8c:	02e30226 	.word	0x02e30226
  410f90:	02e302e3 	.word	0x02e302e3
  410f94:	02e302e3 	.word	0x02e302e3
  410f98:	024f024f 	.word	0x024f024f
  410f9c:	024f024f 	.word	0x024f024f
  410fa0:	024f024f 	.word	0x024f024f
  410fa4:	024f024f 	.word	0x024f024f
  410fa8:	024f024f 	.word	0x024f024f
  410fac:	02e302e3 	.word	0x02e302e3
  410fb0:	02e302e3 	.word	0x02e302e3
  410fb4:	02e302e3 	.word	0x02e302e3
  410fb8:	02e302e3 	.word	0x02e302e3
  410fbc:	02e302e3 	.word	0x02e302e3
  410fc0:	0273022c 	.word	0x0273022c
  410fc4:	027302e3 	.word	0x027302e3
  410fc8:	02e302e3 	.word	0x02e302e3
  410fcc:	02e302e3 	.word	0x02e302e3
  410fd0:	02e3026d 	.word	0x02e3026d
  410fd4:	026302e3 	.word	0x026302e3
  410fd8:	02e302e3 	.word	0x02e302e3
  410fdc:	02e302e3 	.word	0x02e302e3
  410fe0:	02e302e3 	.word	0x02e302e3
  410fe4:	02e302e3 	.word	0x02e302e3
  410fe8:	02e30259 	.word	0x02e30259
  410fec:	029302e3 	.word	0x029302e3
  410ff0:	02e302e3 	.word	0x02e302e3
  410ff4:	02e302e3 	.word	0x02e302e3
  410ff8:	02e302e3 	.word	0x02e302e3
  410ffc:	028d02e3 	.word	0x028d02e3
  411000:	0273029e 	.word	0x0273029e
  411004:	02730273 	.word	0x02730273
  411008:	00950287 	.word	0x00950287
  41100c:	02e302e3 	.word	0x02e302e3
  411010:	02e302b6 	.word	0x02e302b6
  411014:	02770279 	.word	0x02770279
  411018:	02e302ac 	.word	0x02e302ac
  41101c:	02a802e3 	.word	0x02a802e3
  411020:	02a002e3 	.word	0x02a002e3
  411024:	02e302e3 	.word	0x02e302e3
  411028:	0259      	.short	0x0259
  41102a:	9207      	str	r2, [sp, #28]
  41102c:	4692      	mov	sl, r2
  41102e:	686b      	ldr	r3, [r5, #4]
  411030:	2b00      	cmp	r3, #0
  411032:	f340 8557 	ble.w	411ae4 <__ssvfscanf_r+0xc5c>
  411036:	682b      	ldr	r3, [r5, #0]
  411038:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  41103c:	7819      	ldrb	r1, [r3, #0]
  41103e:	4291      	cmp	r1, r2
  411040:	f47f af69 	bne.w	410f16 <__ssvfscanf_r+0x8e>
  411044:	686a      	ldr	r2, [r5, #4]
  411046:	3301      	adds	r3, #1
  411048:	3a01      	subs	r2, #1
  41104a:	606a      	str	r2, [r5, #4]
  41104c:	602b      	str	r3, [r5, #0]
  41104e:	f109 0901 	add.w	r9, r9, #1
  411052:	4652      	mov	r2, sl
  411054:	e759      	b.n	410f0a <__ssvfscanf_r+0x82>
  411056:	f04f 30ff 	mov.w	r0, #4294967295
  41105a:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  41105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411062:	9207      	str	r2, [sp, #28]
  411064:	2300      	movs	r3, #0
  411066:	4a8d      	ldr	r2, [pc, #564]	; (41129c <__ssvfscanf_r+0x414>)
  411068:	9209      	str	r2, [sp, #36]	; 0x24
  41106a:	930c      	str	r3, [sp, #48]	; 0x30
  41106c:	f04f 0a03 	mov.w	sl, #3
  411070:	686b      	ldr	r3, [r5, #4]
  411072:	2b00      	cmp	r3, #0
  411074:	f340 8199 	ble.w	4113aa <__ssvfscanf_r+0x522>
  411078:	0679      	lsls	r1, r7, #25
  41107a:	d512      	bpl.n	4110a2 <__ssvfscanf_r+0x21a>
  41107c:	f10a 3aff 	add.w	sl, sl, #4294967295
  411080:	f1ba 0f03 	cmp.w	sl, #3
  411084:	f200 80b7 	bhi.w	4111f6 <__ssvfscanf_r+0x36e>
  411088:	e8df f01a 	tbh	[pc, sl, lsl #1]
  41108c:	008e00da 	.word	0x008e00da
  411090:	0244001e 	.word	0x0244001e
  411094:	4630      	mov	r0, r6
  411096:	4629      	mov	r1, r5
  411098:	f005 fd12 	bl	416ac0 <__ssrefill_r>
  41109c:	2800      	cmp	r0, #0
  41109e:	f040 818b 	bne.w	4113b8 <__ssvfscanf_r+0x530>
  4110a2:	f8d8 1000 	ldr.w	r1, [r8]
  4110a6:	682b      	ldr	r3, [r5, #0]
  4110a8:	e000      	b.n	4110ac <__ssvfscanf_r+0x224>
  4110aa:	602b      	str	r3, [r5, #0]
  4110ac:	781a      	ldrb	r2, [r3, #0]
  4110ae:	440a      	add	r2, r1
  4110b0:	3301      	adds	r3, #1
  4110b2:	7852      	ldrb	r2, [r2, #1]
  4110b4:	0712      	lsls	r2, r2, #28
  4110b6:	d5e1      	bpl.n	41107c <__ssvfscanf_r+0x1f4>
  4110b8:	686a      	ldr	r2, [r5, #4]
  4110ba:	3a01      	subs	r2, #1
  4110bc:	2a00      	cmp	r2, #0
  4110be:	f109 0901 	add.w	r9, r9, #1
  4110c2:	606a      	str	r2, [r5, #4]
  4110c4:	dcf1      	bgt.n	4110aa <__ssvfscanf_r+0x222>
  4110c6:	e7e5      	b.n	411094 <__ssvfscanf_r+0x20c>
  4110c8:	1e63      	subs	r3, r4, #1
  4110ca:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  4110ce:	bf86      	itte	hi
  4110d0:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  4110d4:	1863      	addhi	r3, r4, r1
  4110d6:	2300      	movls	r3, #0
  4110d8:	f04f 0b00 	mov.w	fp, #0
  4110dc:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  4110e0:	9308      	str	r3, [sp, #32]
  4110e2:	465b      	mov	r3, fp
  4110e4:	46b3      	mov	fp, r6
  4110e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4110e8:	f8cd c014 	str.w	ip, [sp, #20]
  4110ec:	46e2      	mov	sl, ip
  4110ee:	bf88      	it	hi
  4110f0:	f240 145d 	movwhi	r4, #349	; 0x15d
  4110f4:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  4110f8:	46cc      	mov	ip, r9
  4110fa:	6828      	ldr	r0, [r5, #0]
  4110fc:	7801      	ldrb	r1, [r0, #0]
  4110fe:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  411102:	2a4d      	cmp	r2, #77	; 0x4d
  411104:	f200 80e2 	bhi.w	4112cc <__ssvfscanf_r+0x444>
  411108:	e8df f012 	tbh	[pc, r2, lsl #1]
  41110c:	00e00126 	.word	0x00e00126
  411110:	00e00126 	.word	0x00e00126
  411114:	00fd00e0 	.word	0x00fd00e0
  411118:	00cc00cc 	.word	0x00cc00cc
  41111c:	00cc00cc 	.word	0x00cc00cc
  411120:	00cc00cc 	.word	0x00cc00cc
  411124:	013600cc 	.word	0x013600cc
  411128:	00e00136 	.word	0x00e00136
  41112c:	00e000e0 	.word	0x00e000e0
  411130:	00e000e0 	.word	0x00e000e0
  411134:	00e000e0 	.word	0x00e000e0
  411138:	01210121 	.word	0x01210121
  41113c:	01210121 	.word	0x01210121
  411140:	01210121 	.word	0x01210121
  411144:	00e000e0 	.word	0x00e000e0
  411148:	00e000e0 	.word	0x00e000e0
  41114c:	00e000e0 	.word	0x00e000e0
  411150:	00e000e0 	.word	0x00e000e0
  411154:	00e000e0 	.word	0x00e000e0
  411158:	00e000e0 	.word	0x00e000e0
  41115c:	00e000e0 	.word	0x00e000e0
  411160:	00e000e0 	.word	0x00e000e0
  411164:	012b00e0 	.word	0x012b00e0
  411168:	00e000e0 	.word	0x00e000e0
  41116c:	00e000e0 	.word	0x00e000e0
  411170:	00e000e0 	.word	0x00e000e0
  411174:	00e000e0 	.word	0x00e000e0
  411178:	01210121 	.word	0x01210121
  41117c:	01210121 	.word	0x01210121
  411180:	01210121 	.word	0x01210121
  411184:	00e000e0 	.word	0x00e000e0
  411188:	00e000e0 	.word	0x00e000e0
  41118c:	00e000e0 	.word	0x00e000e0
  411190:	00e000e0 	.word	0x00e000e0
  411194:	00e000e0 	.word	0x00e000e0
  411198:	00e000e0 	.word	0x00e000e0
  41119c:	00e000e0 	.word	0x00e000e0
  4111a0:	00e000e0 	.word	0x00e000e0
  4111a4:	012b00e0 	.word	0x012b00e0
  4111a8:	2c00      	cmp	r4, #0
  4111aa:	bf08      	it	eq
  4111ac:	f04f 34ff 	moveq.w	r4, #4294967295
  4111b0:	f017 0301 	ands.w	r3, r7, #1
  4111b4:	f040 817f 	bne.w	4114b6 <__ssvfscanf_r+0x62e>
  4111b8:	06f9      	lsls	r1, r7, #27
  4111ba:	f140 8390 	bpl.w	4118de <__ssvfscanf_r+0xa56>
  4111be:	461f      	mov	r7, r3
  4111c0:	f8d8 1000 	ldr.w	r1, [r8]
  4111c4:	682b      	ldr	r3, [r5, #0]
  4111c6:	781a      	ldrb	r2, [r3, #0]
  4111c8:	440a      	add	r2, r1
  4111ca:	3301      	adds	r3, #1
  4111cc:	7852      	ldrb	r2, [r2, #1]
  4111ce:	0712      	lsls	r2, r2, #28
  4111d0:	d431      	bmi.n	411236 <__ssvfscanf_r+0x3ae>
  4111d2:	686a      	ldr	r2, [r5, #4]
  4111d4:	602b      	str	r3, [r5, #0]
  4111d6:	3701      	adds	r7, #1
  4111d8:	3a01      	subs	r2, #1
  4111da:	42bc      	cmp	r4, r7
  4111dc:	606a      	str	r2, [r5, #4]
  4111de:	d02a      	beq.n	411236 <__ssvfscanf_r+0x3ae>
  4111e0:	2a00      	cmp	r2, #0
  4111e2:	dcf0      	bgt.n	4111c6 <__ssvfscanf_r+0x33e>
  4111e4:	4630      	mov	r0, r6
  4111e6:	4629      	mov	r1, r5
  4111e8:	f005 fc6a 	bl	416ac0 <__ssrefill_r>
  4111ec:	bb18      	cbnz	r0, 411236 <__ssvfscanf_r+0x3ae>
  4111ee:	f8d8 1000 	ldr.w	r1, [r8]
  4111f2:	682b      	ldr	r3, [r5, #0]
  4111f4:	e7e7      	b.n	4111c6 <__ssvfscanf_r+0x33e>
  4111f6:	2c00      	cmp	r4, #0
  4111f8:	bf08      	it	eq
  4111fa:	2401      	moveq	r4, #1
  4111fc:	f017 0301 	ands.w	r3, r7, #1
  411200:	f040 839f 	bne.w	411942 <__ssvfscanf_r+0xaba>
  411204:	06f9      	lsls	r1, r7, #27
  411206:	f140 8454 	bpl.w	411ab2 <__ssvfscanf_r+0xc2a>
  41120a:	461f      	mov	r7, r3
  41120c:	e008      	b.n	411220 <__ssvfscanf_r+0x398>
  41120e:	441a      	add	r2, r3
  411210:	602a      	str	r2, [r5, #0]
  411212:	441f      	add	r7, r3
  411214:	1ae4      	subs	r4, r4, r3
  411216:	f005 fc53 	bl	416ac0 <__ssrefill_r>
  41121a:	2800      	cmp	r0, #0
  41121c:	f040 8441 	bne.w	411aa2 <__ssvfscanf_r+0xc1a>
  411220:	686b      	ldr	r3, [r5, #4]
  411222:	682a      	ldr	r2, [r5, #0]
  411224:	42a3      	cmp	r3, r4
  411226:	4630      	mov	r0, r6
  411228:	4629      	mov	r1, r5
  41122a:	dbf0      	blt.n	41120e <__ssvfscanf_r+0x386>
  41122c:	1b1b      	subs	r3, r3, r4
  41122e:	4422      	add	r2, r4
  411230:	606b      	str	r3, [r5, #4]
  411232:	4427      	add	r7, r4
  411234:	602a      	str	r2, [r5, #0]
  411236:	f8dd a01c 	ldr.w	sl, [sp, #28]
  41123a:	44b9      	add	r9, r7
  41123c:	4652      	mov	r2, sl
  41123e:	e664      	b.n	410f0a <__ssvfscanf_r+0x82>
  411240:	2c00      	cmp	r4, #0
  411242:	bf08      	it	eq
  411244:	f04f 34ff 	moveq.w	r4, #4294967295
  411248:	06fa      	lsls	r2, r7, #27
  41124a:	f140 8315 	bpl.w	411878 <__ssvfscanf_r+0x9f0>
  41124e:	682b      	ldr	r3, [r5, #0]
  411250:	2700      	movs	r7, #0
  411252:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  411256:	781a      	ldrb	r2, [r3, #0]
  411258:	f81b 2002 	ldrb.w	r2, [fp, r2]
  41125c:	3301      	adds	r3, #1
  41125e:	b1aa      	cbz	r2, 41128c <__ssvfscanf_r+0x404>
  411260:	686a      	ldr	r2, [r5, #4]
  411262:	602b      	str	r3, [r5, #0]
  411264:	3701      	adds	r7, #1
  411266:	3a01      	subs	r2, #1
  411268:	42bc      	cmp	r4, r7
  41126a:	606a      	str	r2, [r5, #4]
  41126c:	d0e3      	beq.n	411236 <__ssvfscanf_r+0x3ae>
  41126e:	2a00      	cmp	r2, #0
  411270:	dcf1      	bgt.n	411256 <__ssvfscanf_r+0x3ce>
  411272:	4630      	mov	r0, r6
  411274:	4629      	mov	r1, r5
  411276:	f005 fc23 	bl	416ac0 <__ssrefill_r>
  41127a:	2800      	cmp	r0, #0
  41127c:	d1db      	bne.n	411236 <__ssvfscanf_r+0x3ae>
  41127e:	682b      	ldr	r3, [r5, #0]
  411280:	781a      	ldrb	r2, [r3, #0]
  411282:	f81b 2002 	ldrb.w	r2, [fp, r2]
  411286:	3301      	adds	r3, #1
  411288:	2a00      	cmp	r2, #0
  41128a:	d1e9      	bne.n	411260 <__ssvfscanf_r+0x3d8>
  41128c:	2f00      	cmp	r7, #0
  41128e:	f43f ae42 	beq.w	410f16 <__ssvfscanf_r+0x8e>
  411292:	44b9      	add	r9, r7
  411294:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411298:	e7d0      	b.n	41123c <__ssvfscanf_r+0x3b4>
  41129a:	bf00      	nop
  41129c:	004163e1 	.word	0x004163e1
  4112a0:	20000d2c 	.word	0x20000d2c
  4112a4:	f8df 9364 	ldr.w	r9, [pc, #868]	; 41160c <__ssvfscanf_r+0x784>
  4112a8:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  4112ac:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  4112b0:	686a      	ldr	r2, [r5, #4]
  4112b2:	f88a 1000 	strb.w	r1, [sl]
  4112b6:	3a01      	subs	r2, #1
  4112b8:	2a00      	cmp	r2, #0
  4112ba:	f10a 0a01 	add.w	sl, sl, #1
  4112be:	606a      	str	r2, [r5, #4]
  4112c0:	dd38      	ble.n	411334 <__ssvfscanf_r+0x4ac>
  4112c2:	3001      	adds	r0, #1
  4112c4:	6028      	str	r0, [r5, #0]
  4112c6:	3c01      	subs	r4, #1
  4112c8:	f47f af17 	bne.w	4110fa <__ssvfscanf_r+0x272>
  4112cc:	05f9      	lsls	r1, r7, #23
  4112ce:	960c      	str	r6, [sp, #48]	; 0x30
  4112d0:	46e1      	mov	r9, ip
  4112d2:	465e      	mov	r6, fp
  4112d4:	469b      	mov	fp, r3
  4112d6:	d508      	bpl.n	4112ea <__ssvfscanf_r+0x462>
  4112d8:	9c05      	ldr	r4, [sp, #20]
  4112da:	45a2      	cmp	sl, r4
  4112dc:	f200 840a 	bhi.w	411af4 <__ssvfscanf_r+0xc6c>
  4112e0:	f8dd c014 	ldr.w	ip, [sp, #20]
  4112e4:	45e2      	cmp	sl, ip
  4112e6:	f43f ae16 	beq.w	410f16 <__ssvfscanf_r+0x8e>
  4112ea:	f017 0410 	ands.w	r4, r7, #16
  4112ee:	f000 8372 	beq.w	4119d6 <__ssvfscanf_r+0xb4e>
  4112f2:	f8dd c014 	ldr.w	ip, [sp, #20]
  4112f6:	ebcc 0a0a 	rsb	sl, ip, sl
  4112fa:	44d3      	add	fp, sl
  4112fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411300:	44d9      	add	r9, fp
  411302:	4652      	mov	r2, sl
  411304:	e601      	b.n	410f0a <__ssvfscanf_r+0x82>
  411306:	053a      	lsls	r2, r7, #20
  411308:	d5d2      	bpl.n	4112b0 <__ssvfscanf_r+0x428>
  41130a:	b916      	cbnz	r6, 411312 <__ssvfscanf_r+0x48a>
  41130c:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  411310:	2608      	movs	r6, #8
  411312:	057a      	lsls	r2, r7, #21
  411314:	f100 837d 	bmi.w	411a12 <__ssvfscanf_r+0xb8a>
  411318:	9a08      	ldr	r2, [sp, #32]
  41131a:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  41131e:	b112      	cbz	r2, 411326 <__ssvfscanf_r+0x49e>
  411320:	3a01      	subs	r2, #1
  411322:	9208      	str	r2, [sp, #32]
  411324:	3401      	adds	r4, #1
  411326:	686a      	ldr	r2, [r5, #4]
  411328:	3a01      	subs	r2, #1
  41132a:	2a00      	cmp	r2, #0
  41132c:	f103 0301 	add.w	r3, r3, #1
  411330:	606a      	str	r2, [r5, #4]
  411332:	dcc6      	bgt.n	4112c2 <__ssvfscanf_r+0x43a>
  411334:	4658      	mov	r0, fp
  411336:	4629      	mov	r1, r5
  411338:	9303      	str	r3, [sp, #12]
  41133a:	f8cd c010 	str.w	ip, [sp, #16]
  41133e:	f005 fbbf 	bl	416ac0 <__ssrefill_r>
  411342:	9b03      	ldr	r3, [sp, #12]
  411344:	f8dd c010 	ldr.w	ip, [sp, #16]
  411348:	2800      	cmp	r0, #0
  41134a:	d0bc      	beq.n	4112c6 <__ssvfscanf_r+0x43e>
  41134c:	e7be      	b.n	4112cc <__ssvfscanf_r+0x444>
  41134e:	2e0a      	cmp	r6, #10
  411350:	ddbc      	ble.n	4112cc <__ssvfscanf_r+0x444>
  411352:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  411356:	e7ab      	b.n	4112b0 <__ssvfscanf_r+0x428>
  411358:	063a      	lsls	r2, r7, #24
  41135a:	d5b7      	bpl.n	4112cc <__ssvfscanf_r+0x444>
  41135c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  411360:	e7a6      	b.n	4112b0 <__ssvfscanf_r+0x428>
  411362:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  411366:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  41136a:	d1af      	bne.n	4112cc <__ssvfscanf_r+0x444>
  41136c:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  411370:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  411374:	2610      	movs	r6, #16
  411376:	e79b      	b.n	4112b0 <__ssvfscanf_r+0x428>
  411378:	4aa4      	ldr	r2, [pc, #656]	; (41160c <__ssvfscanf_r+0x784>)
  41137a:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  41137e:	2e08      	cmp	r6, #8
  411380:	dce7      	bgt.n	411352 <__ssvfscanf_r+0x4ca>
  411382:	e7a3      	b.n	4112cc <__ssvfscanf_r+0x444>
  411384:	f89a 3001 	ldrb.w	r3, [sl, #1]
  411388:	f047 0710 	orr.w	r7, r7, #16
  41138c:	4692      	mov	sl, r2
  41138e:	e5cc      	b.n	410f2a <__ssvfscanf_r+0xa2>
  411390:	9207      	str	r2, [sp, #28]
  411392:	f047 0701 	orr.w	r7, r7, #1
  411396:	686b      	ldr	r3, [r5, #4]
  411398:	489d      	ldr	r0, [pc, #628]	; (411610 <__ssvfscanf_r+0x788>)
  41139a:	9009      	str	r0, [sp, #36]	; 0x24
  41139c:	210a      	movs	r1, #10
  41139e:	2b00      	cmp	r3, #0
  4113a0:	910c      	str	r1, [sp, #48]	; 0x30
  4113a2:	f04f 0a03 	mov.w	sl, #3
  4113a6:	f73f ae67 	bgt.w	411078 <__ssvfscanf_r+0x1f0>
  4113aa:	4630      	mov	r0, r6
  4113ac:	4629      	mov	r1, r5
  4113ae:	f005 fb87 	bl	416ac0 <__ssrefill_r>
  4113b2:	2800      	cmp	r0, #0
  4113b4:	f43f ae60 	beq.w	411078 <__ssvfscanf_r+0x1f0>
  4113b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4113ba:	2c00      	cmp	r4, #0
  4113bc:	f43f ae4b 	beq.w	411056 <__ssvfscanf_r+0x1ce>
  4113c0:	89ab      	ldrh	r3, [r5, #12]
  4113c2:	4620      	mov	r0, r4
  4113c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4113c8:	bf18      	it	ne
  4113ca:	f04f 30ff 	movne.w	r0, #4294967295
  4113ce:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  4113d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4113d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4113da:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  4113de:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  4113e2:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4113e6:	4692      	mov	sl, r2
  4113e8:	e59f      	b.n	410f2a <__ssvfscanf_r+0xa2>
  4113ea:	9207      	str	r2, [sp, #28]
  4113ec:	2310      	movs	r3, #16
  4113ee:	4a89      	ldr	r2, [pc, #548]	; (411614 <__ssvfscanf_r+0x78c>)
  4113f0:	9209      	str	r2, [sp, #36]	; 0x24
  4113f2:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  4113f6:	930c      	str	r3, [sp, #48]	; 0x30
  4113f8:	f04f 0a03 	mov.w	sl, #3
  4113fc:	e638      	b.n	411070 <__ssvfscanf_r+0x1e8>
  4113fe:	9207      	str	r2, [sp, #28]
  411400:	f047 0701 	orr.w	r7, r7, #1
  411404:	4a83      	ldr	r2, [pc, #524]	; (411614 <__ssvfscanf_r+0x78c>)
  411406:	9209      	str	r2, [sp, #36]	; 0x24
  411408:	2308      	movs	r3, #8
  41140a:	930c      	str	r3, [sp, #48]	; 0x30
  41140c:	f04f 0a03 	mov.w	sl, #3
  411410:	e62e      	b.n	411070 <__ssvfscanf_r+0x1e8>
  411412:	f89a 3001 	ldrb.w	r3, [sl, #1]
  411416:	f047 0702 	orr.w	r7, r7, #2
  41141a:	4692      	mov	sl, r2
  41141c:	e585      	b.n	410f2a <__ssvfscanf_r+0xa2>
  41141e:	9207      	str	r2, [sp, #28]
  411420:	f04f 0a04 	mov.w	sl, #4
  411424:	e624      	b.n	411070 <__ssvfscanf_r+0x1e8>
  411426:	9207      	str	r2, [sp, #28]
  411428:	e7ec      	b.n	411404 <__ssvfscanf_r+0x57c>
  41142a:	06f9      	lsls	r1, r7, #27
  41142c:	9207      	str	r2, [sp, #28]
  41142e:	d462      	bmi.n	4114f6 <__ssvfscanf_r+0x66e>
  411430:	077b      	lsls	r3, r7, #29
  411432:	f140 8381 	bpl.w	411b38 <__ssvfscanf_r+0xcb0>
  411436:	9c06      	ldr	r4, [sp, #24]
  411438:	6823      	ldr	r3, [r4, #0]
  41143a:	3404      	adds	r4, #4
  41143c:	4692      	mov	sl, r2
  41143e:	f8a3 9000 	strh.w	r9, [r3]
  411442:	9406      	str	r4, [sp, #24]
  411444:	e560      	b.n	410f08 <__ssvfscanf_r+0x80>
  411446:	f89a 3001 	ldrb.w	r3, [sl, #1]
  41144a:	f047 0704 	orr.w	r7, r7, #4
  41144e:	4692      	mov	sl, r2
  411450:	e56b      	b.n	410f2a <__ssvfscanf_r+0xa2>
  411452:	9207      	str	r2, [sp, #28]
  411454:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  411458:	f04f 0a00 	mov.w	sl, #0
  41145c:	e608      	b.n	411070 <__ssvfscanf_r+0x1e8>
  41145e:	4611      	mov	r1, r2
  411460:	a816      	add	r0, sp, #88	; 0x58
  411462:	9207      	str	r2, [sp, #28]
  411464:	f003 ffbe 	bl	4153e4 <__sccl>
  411468:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  41146c:	9007      	str	r0, [sp, #28]
  41146e:	f04f 0a01 	mov.w	sl, #1
  411472:	e5fd      	b.n	411070 <__ssvfscanf_r+0x1e8>
  411474:	9207      	str	r2, [sp, #28]
  411476:	e78e      	b.n	411396 <__ssvfscanf_r+0x50e>
  411478:	4866      	ldr	r0, [pc, #408]	; (411614 <__ssvfscanf_r+0x78c>)
  41147a:	9207      	str	r2, [sp, #28]
  41147c:	210a      	movs	r1, #10
  41147e:	9009      	str	r0, [sp, #36]	; 0x24
  411480:	910c      	str	r1, [sp, #48]	; 0x30
  411482:	f04f 0a03 	mov.w	sl, #3
  411486:	e5f3      	b.n	411070 <__ssvfscanf_r+0x1e8>
  411488:	9207      	str	r2, [sp, #28]
  41148a:	f04f 0a02 	mov.w	sl, #2
  41148e:	e5ef      	b.n	411070 <__ssvfscanf_r+0x1e8>
  411490:	4860      	ldr	r0, [pc, #384]	; (411614 <__ssvfscanf_r+0x78c>)
  411492:	9207      	str	r2, [sp, #28]
  411494:	2110      	movs	r1, #16
  411496:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  41149a:	9009      	str	r0, [sp, #36]	; 0x24
  41149c:	910c      	str	r1, [sp, #48]	; 0x30
  41149e:	f04f 0a03 	mov.w	sl, #3
  4114a2:	e5e5      	b.n	411070 <__ssvfscanf_r+0x1e8>
  4114a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4114a8:	2b6c      	cmp	r3, #108	; 0x6c
  4114aa:	f000 8336 	beq.w	411b1a <__ssvfscanf_r+0xc92>
  4114ae:	f047 0701 	orr.w	r7, r7, #1
  4114b2:	4692      	mov	sl, r2
  4114b4:	e539      	b.n	410f2a <__ssvfscanf_r+0xa2>
  4114b6:	a814      	add	r0, sp, #80	; 0x50
  4114b8:	2100      	movs	r1, #0
  4114ba:	2208      	movs	r2, #8
  4114bc:	900a      	str	r0, [sp, #40]	; 0x28
  4114be:	f7fd fe67 	bl	40f190 <memset>
  4114c2:	f017 0b10 	ands.w	fp, r7, #16
  4114c6:	f000 82bd 	beq.w	411a44 <__ssvfscanf_r+0xbbc>
  4114ca:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  4114ce:	2200      	movs	r2, #0
  4114d0:	6829      	ldr	r1, [r5, #0]
  4114d2:	f8d8 3000 	ldr.w	r3, [r8]
  4114d6:	7809      	ldrb	r1, [r1, #0]
  4114d8:	440b      	add	r3, r1
  4114da:	785b      	ldrb	r3, [r3, #1]
  4114dc:	0718      	lsls	r0, r3, #28
  4114de:	d402      	bmi.n	4114e6 <__ssvfscanf_r+0x65e>
  4114e0:	2c00      	cmp	r4, #0
  4114e2:	f040 8372 	bne.w	411bca <__ssvfscanf_r+0xd42>
  4114e6:	f1bb 0f00 	cmp.w	fp, #0
  4114ea:	d104      	bne.n	4114f6 <__ssvfscanf_r+0x66e>
  4114ec:	f8ca b000 	str.w	fp, [sl]
  4114f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4114f2:	3401      	adds	r4, #1
  4114f4:	940b      	str	r4, [sp, #44]	; 0x2c
  4114f6:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4114fa:	4652      	mov	r2, sl
  4114fc:	e505      	b.n	410f0a <__ssvfscanf_r+0x82>
  4114fe:	440b      	add	r3, r1
  411500:	9207      	str	r2, [sp, #28]
  411502:	785b      	ldrb	r3, [r3, #1]
  411504:	f003 0303 	and.w	r3, r3, #3
  411508:	2b01      	cmp	r3, #1
  41150a:	f47f af44 	bne.w	411396 <__ssvfscanf_r+0x50e>
  41150e:	f047 0701 	orr.w	r7, r7, #1
  411512:	e740      	b.n	411396 <__ssvfscanf_r+0x50e>
  411514:	4630      	mov	r0, r6
  411516:	f002 ff83 	bl	414420 <_localeconv_r>
  41151a:	1e63      	subs	r3, r4, #1
  41151c:	6800      	ldr	r0, [r0, #0]
  41151e:	900f      	str	r0, [sp, #60]	; 0x3c
  411520:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  411524:	f240 81a5 	bls.w	411872 <__ssvfscanf_r+0x9ea>
  411528:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  41152c:	4404      	add	r4, r0
  41152e:	940d      	str	r4, [sp, #52]	; 0x34
  411530:	f240 145d 	movw	r4, #349	; 0x15d
  411534:	f04f 0a00 	mov.w	sl, #0
  411538:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  41153c:	960e      	str	r6, [sp, #56]	; 0x38
  41153e:	f8cd c014 	str.w	ip, [sp, #20]
  411542:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  411546:	4653      	mov	r3, sl
  411548:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  41154c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  411550:	f8cd a020 	str.w	sl, [sp, #32]
  411554:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  411558:	46e3      	mov	fp, ip
  41155a:	4656      	mov	r6, sl
  41155c:	6828      	ldr	r0, [r5, #0]
  41155e:	7802      	ldrb	r2, [r0, #0]
  411560:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  411564:	294e      	cmp	r1, #78	; 0x4e
  411566:	f200 8156 	bhi.w	411816 <__ssvfscanf_r+0x98e>
  41156a:	e8df f011 	tbh	[pc, r1, lsl #1]
  41156e:	007e      	.short	0x007e
  411570:	007e0154 	.word	0x007e0154
  411574:	01540154 	.word	0x01540154
  411578:	00550072 	.word	0x00550072
  41157c:	00550055 	.word	0x00550055
  411580:	00550055 	.word	0x00550055
  411584:	00550055 	.word	0x00550055
  411588:	00550055 	.word	0x00550055
  41158c:	01540154 	.word	0x01540154
  411590:	01540154 	.word	0x01540154
  411594:	01540154 	.word	0x01540154
  411598:	014f0154 	.word	0x014f0154
  41159c:	01540154 	.word	0x01540154
  4115a0:	01350154 	.word	0x01350154
  4115a4:	0154012e 	.word	0x0154012e
  4115a8:	00a40154 	.word	0x00a40154
  4115ac:	01540154 	.word	0x01540154
  4115b0:	01540154 	.word	0x01540154
  4115b4:	0154008f 	.word	0x0154008f
  4115b8:	01540154 	.word	0x01540154
  4115bc:	01540154 	.word	0x01540154
  4115c0:	01540089 	.word	0x01540089
  4115c4:	01540154 	.word	0x01540154
  4115c8:	00830154 	.word	0x00830154
  4115cc:	01540154 	.word	0x01540154
  4115d0:	01540154 	.word	0x01540154
  4115d4:	01540154 	.word	0x01540154
  4115d8:	014f0154 	.word	0x014f0154
  4115dc:	01540154 	.word	0x01540154
  4115e0:	01350154 	.word	0x01350154
  4115e4:	0154012e 	.word	0x0154012e
  4115e8:	00a40154 	.word	0x00a40154
  4115ec:	01540154 	.word	0x01540154
  4115f0:	01540154 	.word	0x01540154
  4115f4:	0154008f 	.word	0x0154008f
  4115f8:	01540154 	.word	0x01540154
  4115fc:	01540154 	.word	0x01540154
  411600:	01540089 	.word	0x01540089
  411604:	01540154 	.word	0x01540154
  411608:	00830154 	.word	0x00830154
  41160c:	00419258 	.word	0x00419258
  411610:	004163e1 	.word	0x004163e1
  411614:	00416691 	.word	0x00416691
  411618:	eb03 010a 	add.w	r1, r3, sl
  41161c:	b999      	cbnz	r1, 411646 <__ssvfscanf_r+0x7be>
  41161e:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  411622:	f88b 2000 	strb.w	r2, [fp]
  411626:	f10b 0b01 	add.w	fp, fp, #1
  41162a:	686a      	ldr	r2, [r5, #4]
  41162c:	3a01      	subs	r2, #1
  41162e:	2a00      	cmp	r2, #0
  411630:	f104 34ff 	add.w	r4, r4, #4294967295
  411634:	f109 0901 	add.w	r9, r9, #1
  411638:	606a      	str	r2, [r5, #4]
  41163a:	f340 80fa 	ble.w	411832 <__ssvfscanf_r+0x9aa>
  41163e:	3001      	adds	r0, #1
  411640:	6028      	str	r0, [r5, #0]
  411642:	2c00      	cmp	r4, #0
  411644:	d18a      	bne.n	41155c <__ssvfscanf_r+0x6d4>
  411646:	9608      	str	r6, [sp, #32]
  411648:	9c08      	ldr	r4, [sp, #32]
  41164a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  41164c:	2c00      	cmp	r4, #0
  41164e:	d041      	beq.n	4116d4 <__ssvfscanf_r+0x84c>
  411650:	e10c      	b.n	41186c <__ssvfscanf_r+0x9e4>
  411652:	05f9      	lsls	r1, r7, #23
  411654:	d5e0      	bpl.n	411618 <__ssvfscanf_r+0x790>
  411656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  411658:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  41165c:	3601      	adds	r6, #1
  41165e:	2a00      	cmp	r2, #0
  411660:	d0e3      	beq.n	41162a <__ssvfscanf_r+0x7a2>
  411662:	3a01      	subs	r2, #1
  411664:	920d      	str	r2, [sp, #52]	; 0x34
  411666:	3401      	adds	r4, #1
  411668:	e7df      	b.n	41162a <__ssvfscanf_r+0x7a2>
  41166a:	0639      	lsls	r1, r7, #24
  41166c:	d5eb      	bpl.n	411646 <__ssvfscanf_r+0x7be>
  41166e:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  411672:	e7d6      	b.n	411622 <__ssvfscanf_r+0x79a>
  411674:	f1ba 0f07 	cmp.w	sl, #7
  411678:	d1e5      	bne.n	411646 <__ssvfscanf_r+0x7be>
  41167a:	f04f 0a08 	mov.w	sl, #8
  41167e:	e7d0      	b.n	411622 <__ssvfscanf_r+0x79a>
  411680:	f1ba 0f06 	cmp.w	sl, #6
  411684:	d1df      	bne.n	411646 <__ssvfscanf_r+0x7be>
  411686:	f04f 0a07 	mov.w	sl, #7
  41168a:	e7ca      	b.n	411622 <__ssvfscanf_r+0x79a>
  41168c:	2b00      	cmp	r3, #0
  41168e:	f040 80e6 	bne.w	41185e <__ssvfscanf_r+0x9d6>
  411692:	b92e      	cbnz	r6, 4116a0 <__ssvfscanf_r+0x818>
  411694:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  411698:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  41169c:	f000 8239 	beq.w	411b12 <__ssvfscanf_r+0xc8a>
  4116a0:	f1ba 0f01 	cmp.w	sl, #1
  4116a4:	d002      	beq.n	4116ac <__ssvfscanf_r+0x824>
  4116a6:	f1ba 0f04 	cmp.w	sl, #4
  4116aa:	d1cc      	bne.n	411646 <__ssvfscanf_r+0x7be>
  4116ac:	f10a 0a01 	add.w	sl, sl, #1
  4116b0:	fa5f fa8a 	uxtb.w	sl, sl
  4116b4:	e7b5      	b.n	411622 <__ssvfscanf_r+0x79a>
  4116b6:	f1ba 0f00 	cmp.w	sl, #0
  4116ba:	f040 80c7 	bne.w	41184c <__ssvfscanf_r+0x9c4>
  4116be:	2e00      	cmp	r6, #0
  4116c0:	f040 80d2 	bne.w	411868 <__ssvfscanf_r+0x9e0>
  4116c4:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  4116c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  4116cc:	f000 821c 	beq.w	411b08 <__ssvfscanf_r+0xc80>
  4116d0:	9608      	str	r6, [sp, #32]
  4116d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4116d4:	f103 3cff 	add.w	ip, r3, #4294967295
  4116d8:	f1bc 0f01 	cmp.w	ip, #1
  4116dc:	f240 82dc 	bls.w	411c98 <__ssvfscanf_r+0xe10>
  4116e0:	f10a 32ff 	add.w	r2, sl, #4294967295
  4116e4:	2a06      	cmp	r2, #6
  4116e6:	d822      	bhi.n	41172e <__ssvfscanf_r+0x8a6>
  4116e8:	f1ba 0f02 	cmp.w	sl, #2
  4116ec:	f240 82ad 	bls.w	411c4a <__ssvfscanf_r+0xdc2>
  4116f0:	f1ba 0f03 	cmp.w	sl, #3
  4116f4:	d01b      	beq.n	41172e <__ssvfscanf_r+0x8a6>
  4116f6:	f1aa 0a04 	sub.w	sl, sl, #4
  4116fa:	fa5f fa8a 	uxtb.w	sl, sl
  4116fe:	f10b 34ff 	add.w	r4, fp, #4294967295
  411702:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  411706:	ebca 0404 	rsb	r4, sl, r4
  41170a:	46da      	mov	sl, fp
  41170c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  411710:	4630      	mov	r0, r6
  411712:	462a      	mov	r2, r5
  411714:	f005 f994 	bl	416a40 <_sungetc_r>
  411718:	45a2      	cmp	sl, r4
  41171a:	d1f7      	bne.n	41170c <__ssvfscanf_r+0x884>
  41171c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  411720:	f109 39ff 	add.w	r9, r9, #4294967295
  411724:	ea6f 020c 	mvn.w	r2, ip
  411728:	ebcc 0909 	rsb	r9, ip, r9
  41172c:	4493      	add	fp, r2
  41172e:	05f8      	lsls	r0, r7, #23
  411730:	d51c      	bpl.n	41176c <__ssvfscanf_r+0x8e4>
  411732:	0579      	lsls	r1, r7, #21
  411734:	f100 829b 	bmi.w	411c6e <__ssvfscanf_r+0xde6>
  411738:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  41173c:	2965      	cmp	r1, #101	; 0x65
  41173e:	f10b 34ff 	add.w	r4, fp, #4294967295
  411742:	f109 3aff 	add.w	sl, r9, #4294967295
  411746:	d00b      	beq.n	411760 <__ssvfscanf_r+0x8d8>
  411748:	2945      	cmp	r1, #69	; 0x45
  41174a:	d009      	beq.n	411760 <__ssvfscanf_r+0x8d8>
  41174c:	4630      	mov	r0, r6
  41174e:	462a      	mov	r2, r5
  411750:	f005 f976 	bl	416a40 <_sungetc_r>
  411754:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  411758:	f1a9 0a02 	sub.w	sl, r9, #2
  41175c:	f1ab 0402 	sub.w	r4, fp, #2
  411760:	4630      	mov	r0, r6
  411762:	462a      	mov	r2, r5
  411764:	f005 f96c 	bl	416a40 <_sungetc_r>
  411768:	46d1      	mov	r9, sl
  41176a:	46a3      	mov	fp, r4
  41176c:	f017 0210 	ands.w	r2, r7, #16
  411770:	f47f aec1 	bne.w	4114f6 <__ssvfscanf_r+0x66e>
  411774:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  411778:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  41177c:	f88b 2000 	strb.w	r2, [fp]
  411780:	f000 81d3 	beq.w	411b2a <__ssvfscanf_r+0xca2>
  411784:	9c10      	ldr	r4, [sp, #64]	; 0x40
  411786:	2c00      	cmp	r4, #0
  411788:	f040 816e 	bne.w	411a68 <__ssvfscanf_r+0xbe0>
  41178c:	2200      	movs	r2, #0
  41178e:	9905      	ldr	r1, [sp, #20]
  411790:	4630      	mov	r0, r6
  411792:	f003 fe85 	bl	4154a0 <_strtod_r>
  411796:	07fa      	lsls	r2, r7, #31
  411798:	4682      	mov	sl, r0
  41179a:	468b      	mov	fp, r1
  41179c:	f100 8132 	bmi.w	411a04 <__ssvfscanf_r+0xb7c>
  4117a0:	07bb      	lsls	r3, r7, #30
  4117a2:	f140 81e8 	bpl.w	411b76 <__ssvfscanf_r+0xcee>
  4117a6:	f8dd c018 	ldr.w	ip, [sp, #24]
  4117aa:	f8dc 3000 	ldr.w	r3, [ip]
  4117ae:	f10c 0c04 	add.w	ip, ip, #4
  4117b2:	f8cd c018 	str.w	ip, [sp, #24]
  4117b6:	e9c3 ab00 	strd	sl, fp, [r3]
  4117ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4117bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4117c0:	3401      	adds	r4, #1
  4117c2:	940b      	str	r4, [sp, #44]	; 0x2c
  4117c4:	4652      	mov	r2, sl
  4117c6:	f7ff bba0 	b.w	410f0a <__ssvfscanf_r+0x82>
  4117ca:	f1ba 0f02 	cmp.w	sl, #2
  4117ce:	f47f af3a 	bne.w	411646 <__ssvfscanf_r+0x7be>
  4117d2:	f04f 0a03 	mov.w	sl, #3
  4117d6:	e724      	b.n	411622 <__ssvfscanf_r+0x79a>
  4117d8:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  4117dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  4117e0:	d005      	beq.n	4117ee <__ssvfscanf_r+0x966>
  4117e2:	0579      	lsls	r1, r7, #21
  4117e4:	f57f af2f 	bpl.w	411646 <__ssvfscanf_r+0x7be>
  4117e8:	2e00      	cmp	r6, #0
  4117ea:	f43f af71 	beq.w	4116d0 <__ssvfscanf_r+0x848>
  4117ee:	05b9      	lsls	r1, r7, #22
  4117f0:	d406      	bmi.n	411800 <__ssvfscanf_r+0x978>
  4117f2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  4117f6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  4117fa:	ebcc 0606 	rsb	r6, ip, r6
  4117fe:	9610      	str	r6, [sp, #64]	; 0x40
  411800:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  411804:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  411808:	2600      	movs	r6, #0
  41180a:	e70a      	b.n	411622 <__ssvfscanf_r+0x79a>
  41180c:	2b01      	cmp	r3, #1
  41180e:	f47f af1a 	bne.w	411646 <__ssvfscanf_r+0x7be>
  411812:	2302      	movs	r3, #2
  411814:	e705      	b.n	411622 <__ssvfscanf_r+0x79a>
  411816:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  41181a:	f89c 1000 	ldrb.w	r1, [ip]
  41181e:	4291      	cmp	r1, r2
  411820:	f47f af11 	bne.w	411646 <__ssvfscanf_r+0x7be>
  411824:	05b9      	lsls	r1, r7, #22
  411826:	f57f af0e 	bpl.w	411646 <__ssvfscanf_r+0x7be>
  41182a:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  41182e:	960a      	str	r6, [sp, #40]	; 0x28
  411830:	e6f7      	b.n	411622 <__ssvfscanf_r+0x79a>
  411832:	980e      	ldr	r0, [sp, #56]	; 0x38
  411834:	9303      	str	r3, [sp, #12]
  411836:	4629      	mov	r1, r5
  411838:	f005 f942 	bl	416ac0 <__ssrefill_r>
  41183c:	9b03      	ldr	r3, [sp, #12]
  41183e:	2800      	cmp	r0, #0
  411840:	f47f af01 	bne.w	411646 <__ssvfscanf_r+0x7be>
  411844:	2c00      	cmp	r4, #0
  411846:	f47f ae89 	bne.w	41155c <__ssvfscanf_r+0x6d4>
  41184a:	e6fc      	b.n	411646 <__ssvfscanf_r+0x7be>
  41184c:	f1ba 0f03 	cmp.w	sl, #3
  411850:	f43f af2c 	beq.w	4116ac <__ssvfscanf_r+0x824>
  411854:	f1ba 0f05 	cmp.w	sl, #5
  411858:	f43f af28 	beq.w	4116ac <__ssvfscanf_r+0x824>
  41185c:	e6f3      	b.n	411646 <__ssvfscanf_r+0x7be>
  41185e:	2b02      	cmp	r3, #2
  411860:	f47f af1e 	bne.w	4116a0 <__ssvfscanf_r+0x818>
  411864:	2303      	movs	r3, #3
  411866:	e6dc      	b.n	411622 <__ssvfscanf_r+0x79a>
  411868:	9608      	str	r6, [sp, #32]
  41186a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  41186c:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  411870:	e730      	b.n	4116d4 <__ssvfscanf_r+0x84c>
  411872:	2200      	movs	r2, #0
  411874:	920d      	str	r2, [sp, #52]	; 0x34
  411876:	e65d      	b.n	411534 <__ssvfscanf_r+0x6ac>
  411878:	f8dd c018 	ldr.w	ip, [sp, #24]
  41187c:	f8dc 7000 	ldr.w	r7, [ip]
  411880:	f10c 0204 	add.w	r2, ip, #4
  411884:	9206      	str	r2, [sp, #24]
  411886:	46ba      	mov	sl, r7
  411888:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  41188c:	682b      	ldr	r3, [r5, #0]
  41188e:	781a      	ldrb	r2, [r3, #0]
  411890:	f81b 2002 	ldrb.w	r2, [fp, r2]
  411894:	1c59      	adds	r1, r3, #1
  411896:	b1a2      	cbz	r2, 4118c2 <__ssvfscanf_r+0xa3a>
  411898:	686a      	ldr	r2, [r5, #4]
  41189a:	6029      	str	r1, [r5, #0]
  41189c:	3a01      	subs	r2, #1
  41189e:	606a      	str	r2, [r5, #4]
  4118a0:	781b      	ldrb	r3, [r3, #0]
  4118a2:	f80a 3b01 	strb.w	r3, [sl], #1
  4118a6:	3c01      	subs	r4, #1
  4118a8:	d00b      	beq.n	4118c2 <__ssvfscanf_r+0xa3a>
  4118aa:	686b      	ldr	r3, [r5, #4]
  4118ac:	2b00      	cmp	r3, #0
  4118ae:	dced      	bgt.n	41188c <__ssvfscanf_r+0xa04>
  4118b0:	4630      	mov	r0, r6
  4118b2:	4629      	mov	r1, r5
  4118b4:	f005 f904 	bl	416ac0 <__ssrefill_r>
  4118b8:	2800      	cmp	r0, #0
  4118ba:	d0e7      	beq.n	41188c <__ssvfscanf_r+0xa04>
  4118bc:	4557      	cmp	r7, sl
  4118be:	f43f ad7b 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  4118c2:	ebba 0707 	subs.w	r7, sl, r7
  4118c6:	f43f ab26 	beq.w	410f16 <__ssvfscanf_r+0x8e>
  4118ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4118cc:	2300      	movs	r3, #0
  4118ce:	3401      	adds	r4, #1
  4118d0:	f88a 3000 	strb.w	r3, [sl]
  4118d4:	940b      	str	r4, [sp, #44]	; 0x2c
  4118d6:	44b9      	add	r9, r7
  4118d8:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4118dc:	e4ae      	b.n	41123c <__ssvfscanf_r+0x3b4>
  4118de:	f8dd c018 	ldr.w	ip, [sp, #24]
  4118e2:	f8dc 7000 	ldr.w	r7, [ip]
  4118e6:	f10c 0a04 	add.w	sl, ip, #4
  4118ea:	46bb      	mov	fp, r7
  4118ec:	682b      	ldr	r3, [r5, #0]
  4118ee:	f8d8 2000 	ldr.w	r2, [r8]
  4118f2:	7819      	ldrb	r1, [r3, #0]
  4118f4:	440a      	add	r2, r1
  4118f6:	1c59      	adds	r1, r3, #1
  4118f8:	7852      	ldrb	r2, [r2, #1]
  4118fa:	0710      	lsls	r0, r2, #28
  4118fc:	d411      	bmi.n	411922 <__ssvfscanf_r+0xa9a>
  4118fe:	686a      	ldr	r2, [r5, #4]
  411900:	6029      	str	r1, [r5, #0]
  411902:	3a01      	subs	r2, #1
  411904:	606a      	str	r2, [r5, #4]
  411906:	781b      	ldrb	r3, [r3, #0]
  411908:	f80b 3b01 	strb.w	r3, [fp], #1
  41190c:	3c01      	subs	r4, #1
  41190e:	d008      	beq.n	411922 <__ssvfscanf_r+0xa9a>
  411910:	686b      	ldr	r3, [r5, #4]
  411912:	2b00      	cmp	r3, #0
  411914:	dcea      	bgt.n	4118ec <__ssvfscanf_r+0xa64>
  411916:	4630      	mov	r0, r6
  411918:	4629      	mov	r1, r5
  41191a:	f005 f8d1 	bl	416ac0 <__ssrefill_r>
  41191e:	2800      	cmp	r0, #0
  411920:	d0e4      	beq.n	4118ec <__ssvfscanf_r+0xa64>
  411922:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  411924:	f8cd a018 	str.w	sl, [sp, #24]
  411928:	f8dd a01c 	ldr.w	sl, [sp, #28]
  41192c:	ebc7 070b 	rsb	r7, r7, fp
  411930:	2300      	movs	r3, #0
  411932:	3401      	adds	r4, #1
  411934:	44b9      	add	r9, r7
  411936:	940b      	str	r4, [sp, #44]	; 0x2c
  411938:	f88b 3000 	strb.w	r3, [fp]
  41193c:	4652      	mov	r2, sl
  41193e:	f7ff bae4 	b.w	410f0a <__ssvfscanf_r+0x82>
  411942:	ab14      	add	r3, sp, #80	; 0x50
  411944:	4618      	mov	r0, r3
  411946:	2100      	movs	r1, #0
  411948:	2208      	movs	r2, #8
  41194a:	930a      	str	r3, [sp, #40]	; 0x28
  41194c:	f7fd fc20 	bl	40f190 <memset>
  411950:	f017 0710 	ands.w	r7, r7, #16
  411954:	970d      	str	r7, [sp, #52]	; 0x34
  411956:	d06c      	beq.n	411a32 <__ssvfscanf_r+0xbaa>
  411958:	f04f 0a00 	mov.w	sl, #0
  41195c:	9608      	str	r6, [sp, #32]
  41195e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  411960:	f8cd 9014 	str.w	r9, [sp, #20]
  411964:	f04f 0b00 	mov.w	fp, #0
  411968:	af56      	add	r7, sp, #344	; 0x158
  41196a:	f002 fd53 	bl	414414 <__locale_mb_cur_max>
  41196e:	4558      	cmp	r0, fp
  411970:	f43f ad22 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  411974:	682b      	ldr	r3, [r5, #0]
  411976:	6869      	ldr	r1, [r5, #4]
  411978:	f813 eb01 	ldrb.w	lr, [r3], #1
  41197c:	980a      	ldr	r0, [sp, #40]	; 0x28
  41197e:	602b      	str	r3, [r5, #0]
  411980:	3901      	subs	r1, #1
  411982:	f10b 0901 	add.w	r9, fp, #1
  411986:	9000      	str	r0, [sp, #0]
  411988:	464b      	mov	r3, r9
  41198a:	6069      	str	r1, [r5, #4]
  41198c:	9808      	ldr	r0, [sp, #32]
  41198e:	f807 e00b 	strb.w	lr, [r7, fp]
  411992:	4651      	mov	r1, sl
  411994:	463a      	mov	r2, r7
  411996:	f002 fdcb 	bl	414530 <_mbrtowc_r>
  41199a:	1c43      	adds	r3, r0, #1
  41199c:	f43f ad0c 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  4119a0:	2800      	cmp	r0, #0
  4119a2:	d177      	bne.n	411a94 <__ssvfscanf_r+0xc0c>
  4119a4:	b90e      	cbnz	r6, 4119aa <__ssvfscanf_r+0xb22>
  4119a6:	f8ca 6000 	str.w	r6, [sl]
  4119aa:	9905      	ldr	r1, [sp, #20]
  4119ac:	4449      	add	r1, r9
  4119ae:	9105      	str	r1, [sp, #20]
  4119b0:	3c01      	subs	r4, #1
  4119b2:	2e00      	cmp	r6, #0
  4119b4:	d172      	bne.n	411a9c <__ssvfscanf_r+0xc14>
  4119b6:	f10a 0a04 	add.w	sl, sl, #4
  4119ba:	46b3      	mov	fp, r6
  4119bc:	686b      	ldr	r3, [r5, #4]
  4119be:	2b00      	cmp	r3, #0
  4119c0:	dd2a      	ble.n	411a18 <__ssvfscanf_r+0xb90>
  4119c2:	2c00      	cmp	r4, #0
  4119c4:	d1d1      	bne.n	41196a <__ssvfscanf_r+0xae2>
  4119c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4119ca:	9e08      	ldr	r6, [sp, #32]
  4119cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4119ce:	2c00      	cmp	r4, #0
  4119d0:	f43f ad8e 	beq.w	4114f0 <__ssvfscanf_r+0x668>
  4119d4:	e58f      	b.n	4114f6 <__ssvfscanf_r+0x66e>
  4119d6:	4622      	mov	r2, r4
  4119d8:	f88a 4000 	strb.w	r4, [sl]
  4119dc:	4630      	mov	r0, r6
  4119de:	9905      	ldr	r1, [sp, #20]
  4119e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4119e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4119e4:	47a0      	blx	r4
  4119e6:	06ba      	lsls	r2, r7, #26
  4119e8:	d535      	bpl.n	411a56 <__ssvfscanf_r+0xbce>
  4119ea:	f8dd c018 	ldr.w	ip, [sp, #24]
  4119ee:	f8dc 3000 	ldr.w	r3, [ip]
  4119f2:	f10c 0c04 	add.w	ip, ip, #4
  4119f6:	f8cd c018 	str.w	ip, [sp, #24]
  4119fa:	6018      	str	r0, [r3, #0]
  4119fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4119fe:	3401      	adds	r4, #1
  411a00:	940b      	str	r4, [sp, #44]	; 0x2c
  411a02:	e476      	b.n	4112f2 <__ssvfscanf_r+0x46a>
  411a04:	9c06      	ldr	r4, [sp, #24]
  411a06:	6823      	ldr	r3, [r4, #0]
  411a08:	3404      	adds	r4, #4
  411a0a:	9406      	str	r4, [sp, #24]
  411a0c:	e9c3 ab00 	strd	sl, fp, [r3]
  411a10:	e6d3      	b.n	4117ba <__ssvfscanf_r+0x932>
  411a12:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  411a16:	e44b      	b.n	4112b0 <__ssvfscanf_r+0x428>
  411a18:	9808      	ldr	r0, [sp, #32]
  411a1a:	4629      	mov	r1, r5
  411a1c:	f005 f850 	bl	416ac0 <__ssrefill_r>
  411a20:	2800      	cmp	r0, #0
  411a22:	d0ce      	beq.n	4119c2 <__ssvfscanf_r+0xb3a>
  411a24:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411a28:	9e08      	ldr	r6, [sp, #32]
  411a2a:	f1bb 0f00 	cmp.w	fp, #0
  411a2e:	d0cd      	beq.n	4119cc <__ssvfscanf_r+0xb44>
  411a30:	e4c2      	b.n	4113b8 <__ssvfscanf_r+0x530>
  411a32:	f8dd c018 	ldr.w	ip, [sp, #24]
  411a36:	f8dc a000 	ldr.w	sl, [ip]
  411a3a:	f10c 0c04 	add.w	ip, ip, #4
  411a3e:	f8cd c018 	str.w	ip, [sp, #24]
  411a42:	e78b      	b.n	41195c <__ssvfscanf_r+0xad4>
  411a44:	f8dd c018 	ldr.w	ip, [sp, #24]
  411a48:	f8dc a000 	ldr.w	sl, [ip]
  411a4c:	f10c 0c04 	add.w	ip, ip, #4
  411a50:	f8cd c018 	str.w	ip, [sp, #24]
  411a54:	e53b      	b.n	4114ce <__ssvfscanf_r+0x646>
  411a56:	077b      	lsls	r3, r7, #29
  411a58:	f140 809b 	bpl.w	411b92 <__ssvfscanf_r+0xd0a>
  411a5c:	9c06      	ldr	r4, [sp, #24]
  411a5e:	6823      	ldr	r3, [r4, #0]
  411a60:	3404      	adds	r4, #4
  411a62:	9406      	str	r4, [sp, #24]
  411a64:	8018      	strh	r0, [r3, #0]
  411a66:	e7c9      	b.n	4119fc <__ssvfscanf_r+0xb74>
  411a68:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  411a6c:	4630      	mov	r0, r6
  411a6e:	f10c 0101 	add.w	r1, ip, #1
  411a72:	230a      	movs	r3, #10
  411a74:	f004 fcb4 	bl	4163e0 <_strtol_r>
  411a78:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  411a7c:	1b02      	subs	r2, r0, r4
  411a7e:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  411a82:	458b      	cmp	fp, r1
  411a84:	bf28      	it	cs
  411a86:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  411a8a:	4658      	mov	r0, fp
  411a8c:	499b      	ldr	r1, [pc, #620]	; (411cfc <__ssvfscanf_r+0xe74>)
  411a8e:	f7fd fc9b 	bl	40f3c8 <sprintf>
  411a92:	e67b      	b.n	41178c <__ssvfscanf_r+0x904>
  411a94:	3002      	adds	r0, #2
  411a96:	d188      	bne.n	4119aa <__ssvfscanf_r+0xb22>
  411a98:	46cb      	mov	fp, r9
  411a9a:	e78f      	b.n	4119bc <__ssvfscanf_r+0xb34>
  411a9c:	f04f 0b00 	mov.w	fp, #0
  411aa0:	e78c      	b.n	4119bc <__ssvfscanf_r+0xb34>
  411aa2:	2f00      	cmp	r7, #0
  411aa4:	f43f ac88 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  411aa8:	44b9      	add	r9, r7
  411aaa:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411aae:	f7ff bbc5 	b.w	41123c <__ssvfscanf_r+0x3b4>
  411ab2:	f8dd c018 	ldr.w	ip, [sp, #24]
  411ab6:	4623      	mov	r3, r4
  411ab8:	f8dc 1000 	ldr.w	r1, [ip]
  411abc:	9500      	str	r5, [sp, #0]
  411abe:	4630      	mov	r0, r6
  411ac0:	2201      	movs	r2, #1
  411ac2:	f005 f81b 	bl	416afc <_sfread_r>
  411ac6:	9c06      	ldr	r4, [sp, #24]
  411ac8:	1d23      	adds	r3, r4, #4
  411aca:	2800      	cmp	r0, #0
  411acc:	f43f ac74 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  411ad0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  411ad2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411ad6:	9306      	str	r3, [sp, #24]
  411ad8:	3401      	adds	r4, #1
  411ada:	4481      	add	r9, r0
  411adc:	940b      	str	r4, [sp, #44]	; 0x2c
  411ade:	4652      	mov	r2, sl
  411ae0:	f7ff ba13 	b.w	410f0a <__ssvfscanf_r+0x82>
  411ae4:	4630      	mov	r0, r6
  411ae6:	4629      	mov	r1, r5
  411ae8:	f004 ffea 	bl	416ac0 <__ssrefill_r>
  411aec:	2800      	cmp	r0, #0
  411aee:	f43f aaa2 	beq.w	411036 <__ssvfscanf_r+0x1ae>
  411af2:	e461      	b.n	4113b8 <__ssvfscanf_r+0x530>
  411af4:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  411af8:	4630      	mov	r0, r6
  411afa:	462a      	mov	r2, r5
  411afc:	f004 ffa0 	bl	416a40 <_sungetc_r>
  411b00:	f10a 3aff 	add.w	sl, sl, #4294967295
  411b04:	f7ff bbec 	b.w	4112e0 <__ssvfscanf_r+0x458>
  411b08:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  411b0c:	f04f 0a01 	mov.w	sl, #1
  411b10:	e587      	b.n	411622 <__ssvfscanf_r+0x79a>
  411b12:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  411b16:	2301      	movs	r3, #1
  411b18:	e583      	b.n	411622 <__ssvfscanf_r+0x79a>
  411b1a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  411b1e:	f047 0702 	orr.w	r7, r7, #2
  411b22:	f10a 0a02 	add.w	sl, sl, #2
  411b26:	f7ff ba00 	b.w	410f2a <__ssvfscanf_r+0xa2>
  411b2a:	9b08      	ldr	r3, [sp, #32]
  411b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  411b2e:	1b19      	subs	r1, r3, r4
  411b30:	424a      	negs	r2, r1
  411b32:	2900      	cmp	r1, #0
  411b34:	d1a3      	bne.n	411a7e <__ssvfscanf_r+0xbf6>
  411b36:	e629      	b.n	41178c <__ssvfscanf_r+0x904>
  411b38:	07fc      	lsls	r4, r7, #31
  411b3a:	d40e      	bmi.n	411b5a <__ssvfscanf_r+0xcd2>
  411b3c:	07b8      	lsls	r0, r7, #30
  411b3e:	d50c      	bpl.n	411b5a <__ssvfscanf_r+0xcd2>
  411b40:	9c06      	ldr	r4, [sp, #24]
  411b42:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411b46:	6821      	ldr	r1, [r4, #0]
  411b48:	464a      	mov	r2, r9
  411b4a:	ea4f 73e9 	mov.w	r3, r9, asr #31
  411b4e:	3404      	adds	r4, #4
  411b50:	9406      	str	r4, [sp, #24]
  411b52:	e9c1 2300 	strd	r2, r3, [r1]
  411b56:	f7ff b9d7 	b.w	410f08 <__ssvfscanf_r+0x80>
  411b5a:	f8dd c018 	ldr.w	ip, [sp, #24]
  411b5e:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411b62:	f8dc 3000 	ldr.w	r3, [ip]
  411b66:	f10c 0c04 	add.w	ip, ip, #4
  411b6a:	f8c3 9000 	str.w	r9, [r3]
  411b6e:	f8cd c018 	str.w	ip, [sp, #24]
  411b72:	f7ff b9c9 	b.w	410f08 <__ssvfscanf_r+0x80>
  411b76:	9c06      	ldr	r4, [sp, #24]
  411b78:	1d27      	adds	r7, r4, #4
  411b7a:	6824      	ldr	r4, [r4, #0]
  411b7c:	f003 fc0a 	bl	415394 <__fpclassifyd>
  411b80:	2800      	cmp	r0, #0
  411b82:	d056      	beq.n	411c32 <__ssvfscanf_r+0xdaa>
  411b84:	4650      	mov	r0, sl
  411b86:	4659      	mov	r1, fp
  411b88:	f006 f9fc 	bl	417f84 <__aeabi_d2f>
  411b8c:	9706      	str	r7, [sp, #24]
  411b8e:	6020      	str	r0, [r4, #0]
  411b90:	e613      	b.n	4117ba <__ssvfscanf_r+0x932>
  411b92:	f017 0201 	ands.w	r2, r7, #1
  411b96:	f47f af28 	bne.w	4119ea <__ssvfscanf_r+0xb62>
  411b9a:	07bc      	lsls	r4, r7, #30
  411b9c:	f140 8097 	bpl.w	411cce <__ssvfscanf_r+0xe46>
  411ba0:	4b57      	ldr	r3, [pc, #348]	; (411d00 <__ssvfscanf_r+0xe78>)
  411ba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  411ba4:	9905      	ldr	r1, [sp, #20]
  411ba6:	429c      	cmp	r4, r3
  411ba8:	4630      	mov	r0, r6
  411baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411bac:	f000 80a2 	beq.w	411cf4 <__ssvfscanf_r+0xe6c>
  411bb0:	f004 fca0 	bl	4164f4 <_strtoll_r>
  411bb4:	f8dd c018 	ldr.w	ip, [sp, #24]
  411bb8:	f8dc 3000 	ldr.w	r3, [ip]
  411bbc:	f10c 0c04 	add.w	ip, ip, #4
  411bc0:	f8cd c018 	str.w	ip, [sp, #24]
  411bc4:	e9c3 0100 	strd	r0, r1, [r3]
  411bc8:	e718      	b.n	4119fc <__ssvfscanf_r+0xb74>
  411bca:	9204      	str	r2, [sp, #16]
  411bcc:	f002 fc22 	bl	414414 <__locale_mb_cur_max>
  411bd0:	9a04      	ldr	r2, [sp, #16]
  411bd2:	4290      	cmp	r0, r2
  411bd4:	f43f abf0 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  411bd8:	682b      	ldr	r3, [r5, #0]
  411bda:	6869      	ldr	r1, [r5, #4]
  411bdc:	f813 eb01 	ldrb.w	lr, [r3], #1
  411be0:	980a      	ldr	r0, [sp, #40]	; 0x28
  411be2:	602b      	str	r3, [r5, #0]
  411be4:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  411be8:	1c57      	adds	r7, r2, #1
  411bea:	3901      	subs	r1, #1
  411bec:	9000      	str	r0, [sp, #0]
  411bee:	463b      	mov	r3, r7
  411bf0:	6069      	str	r1, [r5, #4]
  411bf2:	f80c e002 	strb.w	lr, [ip, r2]
  411bf6:	4630      	mov	r0, r6
  411bf8:	4651      	mov	r1, sl
  411bfa:	4662      	mov	r2, ip
  411bfc:	f002 fc98 	bl	414530 <_mbrtowc_r>
  411c00:	1c43      	adds	r3, r0, #1
  411c02:	f43f abd9 	beq.w	4113b8 <__ssvfscanf_r+0x530>
  411c06:	b9c8      	cbnz	r0, 411c3c <__ssvfscanf_r+0xdb4>
  411c08:	f8ca 0000 	str.w	r0, [sl]
  411c0c:	f002 fbf0 	bl	4143f0 <iswspace>
  411c10:	2800      	cmp	r0, #0
  411c12:	d053      	beq.n	411cbc <__ssvfscanf_r+0xe34>
  411c14:	2f00      	cmp	r7, #0
  411c16:	f43f ac66 	beq.w	4114e6 <__ssvfscanf_r+0x65e>
  411c1a:	ac56      	add	r4, sp, #344	; 0x158
  411c1c:	443c      	add	r4, r7
  411c1e:	3f01      	subs	r7, #1
  411c20:	4630      	mov	r0, r6
  411c22:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  411c26:	462a      	mov	r2, r5
  411c28:	f004 ff0a 	bl	416a40 <_sungetc_r>
  411c2c:	2f00      	cmp	r7, #0
  411c2e:	d1f6      	bne.n	411c1e <__ssvfscanf_r+0xd96>
  411c30:	e459      	b.n	4114e6 <__ssvfscanf_r+0x65e>
  411c32:	f003 fc0f 	bl	415454 <nanf>
  411c36:	9706      	str	r7, [sp, #24]
  411c38:	6020      	str	r0, [r4, #0]
  411c3a:	e5be      	b.n	4117ba <__ssvfscanf_r+0x932>
  411c3c:	3002      	adds	r0, #2
  411c3e:	d128      	bne.n	411c92 <__ssvfscanf_r+0xe0a>
  411c40:	686b      	ldr	r3, [r5, #4]
  411c42:	2b00      	cmp	r3, #0
  411c44:	dd4b      	ble.n	411cde <__ssvfscanf_r+0xe56>
  411c46:	463a      	mov	r2, r7
  411c48:	e442      	b.n	4114d0 <__ssvfscanf_r+0x648>
  411c4a:	9c05      	ldr	r4, [sp, #20]
  411c4c:	45a3      	cmp	fp, r4
  411c4e:	bf88      	it	hi
  411c50:	465c      	movhi	r4, fp
  411c52:	f67f a960 	bls.w	410f16 <__ssvfscanf_r+0x8e>
  411c56:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  411c5a:	980e      	ldr	r0, [sp, #56]	; 0x38
  411c5c:	462a      	mov	r2, r5
  411c5e:	f004 feef 	bl	416a40 <_sungetc_r>
  411c62:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411c66:	454c      	cmp	r4, r9
  411c68:	d1f5      	bne.n	411c56 <__ssvfscanf_r+0xdce>
  411c6a:	f7ff b954 	b.w	410f16 <__ssvfscanf_r+0x8e>
  411c6e:	f8dd c014 	ldr.w	ip, [sp, #20]
  411c72:	45e3      	cmp	fp, ip
  411c74:	f67f a94f 	bls.w	410f16 <__ssvfscanf_r+0x8e>
  411c78:	465c      	mov	r4, fp
  411c7a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  411c7e:	980e      	ldr	r0, [sp, #56]	; 0x38
  411c80:	462a      	mov	r2, r5
  411c82:	f004 fedd 	bl	416a40 <_sungetc_r>
  411c86:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411c8a:	454c      	cmp	r4, r9
  411c8c:	d1f5      	bne.n	411c7a <__ssvfscanf_r+0xdf2>
  411c8e:	f7ff b942 	b.w	410f16 <__ssvfscanf_r+0x8e>
  411c92:	f8da 0000 	ldr.w	r0, [sl]
  411c96:	e7b9      	b.n	411c0c <__ssvfscanf_r+0xd84>
  411c98:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411c9c:	45cb      	cmp	fp, r9
  411c9e:	f67f a93a 	bls.w	410f16 <__ssvfscanf_r+0x8e>
  411ca2:	465c      	mov	r4, fp
  411ca4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  411ca8:	980e      	ldr	r0, [sp, #56]	; 0x38
  411caa:	462a      	mov	r2, r5
  411cac:	f004 fec8 	bl	416a40 <_sungetc_r>
  411cb0:	f8dd c014 	ldr.w	ip, [sp, #20]
  411cb4:	4564      	cmp	r4, ip
  411cb6:	d1f5      	bne.n	411ca4 <__ssvfscanf_r+0xe1c>
  411cb8:	f7ff b92d 	b.w	410f16 <__ssvfscanf_r+0x8e>
  411cbc:	44b9      	add	r9, r7
  411cbe:	3c01      	subs	r4, #1
  411cc0:	f1bb 0f00 	cmp.w	fp, #0
  411cc4:	d109      	bne.n	411cda <__ssvfscanf_r+0xe52>
  411cc6:	f10a 0a04 	add.w	sl, sl, #4
  411cca:	465f      	mov	r7, fp
  411ccc:	e7b8      	b.n	411c40 <__ssvfscanf_r+0xdb8>
  411cce:	9c06      	ldr	r4, [sp, #24]
  411cd0:	6823      	ldr	r3, [r4, #0]
  411cd2:	3404      	adds	r4, #4
  411cd4:	9406      	str	r4, [sp, #24]
  411cd6:	6018      	str	r0, [r3, #0]
  411cd8:	e690      	b.n	4119fc <__ssvfscanf_r+0xb74>
  411cda:	4607      	mov	r7, r0
  411cdc:	e7b0      	b.n	411c40 <__ssvfscanf_r+0xdb8>
  411cde:	4630      	mov	r0, r6
  411ce0:	4629      	mov	r1, r5
  411ce2:	f004 feed 	bl	416ac0 <__ssrefill_r>
  411ce6:	2800      	cmp	r0, #0
  411ce8:	d0ad      	beq.n	411c46 <__ssvfscanf_r+0xdbe>
  411cea:	2f00      	cmp	r7, #0
  411cec:	f47f ab64 	bne.w	4113b8 <__ssvfscanf_r+0x530>
  411cf0:	f7ff bbf9 	b.w	4114e6 <__ssvfscanf_r+0x65e>
  411cf4:	f004 fd5c 	bl	4167b0 <_strtoull_r>
  411cf8:	e75c      	b.n	411bb4 <__ssvfscanf_r+0xd2c>
  411cfa:	bf00      	nop
  411cfc:	0041927c 	.word	0x0041927c
  411d00:	00416691 	.word	0x00416691

00411d04 <__sprint_r.part.0>:
  411d04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  411d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  411d0a:	049c      	lsls	r4, r3, #18
  411d0c:	460e      	mov	r6, r1
  411d0e:	4680      	mov	r8, r0
  411d10:	4691      	mov	r9, r2
  411d12:	d52a      	bpl.n	411d6a <__sprint_r.part.0+0x66>
  411d14:	6893      	ldr	r3, [r2, #8]
  411d16:	6812      	ldr	r2, [r2, #0]
  411d18:	f102 0a08 	add.w	sl, r2, #8
  411d1c:	b31b      	cbz	r3, 411d66 <__sprint_r.part.0+0x62>
  411d1e:	e91a 00a0 	ldmdb	sl, {r5, r7}
  411d22:	08bf      	lsrs	r7, r7, #2
  411d24:	d017      	beq.n	411d56 <__sprint_r.part.0+0x52>
  411d26:	3d04      	subs	r5, #4
  411d28:	2400      	movs	r4, #0
  411d2a:	e001      	b.n	411d30 <__sprint_r.part.0+0x2c>
  411d2c:	42a7      	cmp	r7, r4
  411d2e:	d010      	beq.n	411d52 <__sprint_r.part.0+0x4e>
  411d30:	4640      	mov	r0, r8
  411d32:	f855 1f04 	ldr.w	r1, [r5, #4]!
  411d36:	4632      	mov	r2, r6
  411d38:	f002 f82e 	bl	413d98 <_fputwc_r>
  411d3c:	1c43      	adds	r3, r0, #1
  411d3e:	f104 0401 	add.w	r4, r4, #1
  411d42:	d1f3      	bne.n	411d2c <__sprint_r.part.0+0x28>
  411d44:	2300      	movs	r3, #0
  411d46:	f8c9 3008 	str.w	r3, [r9, #8]
  411d4a:	f8c9 3004 	str.w	r3, [r9, #4]
  411d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411d52:	f8d9 3008 	ldr.w	r3, [r9, #8]
  411d56:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  411d5a:	f8c9 3008 	str.w	r3, [r9, #8]
  411d5e:	f10a 0a08 	add.w	sl, sl, #8
  411d62:	2b00      	cmp	r3, #0
  411d64:	d1db      	bne.n	411d1e <__sprint_r.part.0+0x1a>
  411d66:	2000      	movs	r0, #0
  411d68:	e7ec      	b.n	411d44 <__sprint_r.part.0+0x40>
  411d6a:	f002 f98f 	bl	41408c <__sfvwrite_r>
  411d6e:	2300      	movs	r3, #0
  411d70:	f8c9 3008 	str.w	r3, [r9, #8]
  411d74:	f8c9 3004 	str.w	r3, [r9, #4]
  411d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00411d7c <_vfiprintf_r>:
  411d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d80:	b0b1      	sub	sp, #196	; 0xc4
  411d82:	461c      	mov	r4, r3
  411d84:	9102      	str	r1, [sp, #8]
  411d86:	4690      	mov	r8, r2
  411d88:	9308      	str	r3, [sp, #32]
  411d8a:	9006      	str	r0, [sp, #24]
  411d8c:	b118      	cbz	r0, 411d96 <_vfiprintf_r+0x1a>
  411d8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411d90:	2b00      	cmp	r3, #0
  411d92:	f000 80e8 	beq.w	411f66 <_vfiprintf_r+0x1ea>
  411d96:	9d02      	ldr	r5, [sp, #8]
  411d98:	89ab      	ldrh	r3, [r5, #12]
  411d9a:	b29a      	uxth	r2, r3
  411d9c:	0490      	lsls	r0, r2, #18
  411d9e:	d407      	bmi.n	411db0 <_vfiprintf_r+0x34>
  411da0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  411da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  411da6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  411daa:	81ab      	strh	r3, [r5, #12]
  411dac:	b29a      	uxth	r2, r3
  411dae:	6669      	str	r1, [r5, #100]	; 0x64
  411db0:	0711      	lsls	r1, r2, #28
  411db2:	f140 80b7 	bpl.w	411f24 <_vfiprintf_r+0x1a8>
  411db6:	f8dd b008 	ldr.w	fp, [sp, #8]
  411dba:	f8db 3010 	ldr.w	r3, [fp, #16]
  411dbe:	2b00      	cmp	r3, #0
  411dc0:	f000 80b0 	beq.w	411f24 <_vfiprintf_r+0x1a8>
  411dc4:	f002 021a 	and.w	r2, r2, #26
  411dc8:	2a0a      	cmp	r2, #10
  411dca:	f000 80b7 	beq.w	411f3c <_vfiprintf_r+0x1c0>
  411dce:	2300      	movs	r3, #0
  411dd0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  411dd4:	930a      	str	r3, [sp, #40]	; 0x28
  411dd6:	9315      	str	r3, [sp, #84]	; 0x54
  411dd8:	9314      	str	r3, [sp, #80]	; 0x50
  411dda:	9309      	str	r3, [sp, #36]	; 0x24
  411ddc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  411de0:	464e      	mov	r6, r9
  411de2:	f898 3000 	ldrb.w	r3, [r8]
  411de6:	2b00      	cmp	r3, #0
  411de8:	f000 84c4 	beq.w	412774 <_vfiprintf_r+0x9f8>
  411dec:	2b25      	cmp	r3, #37	; 0x25
  411dee:	f000 84c1 	beq.w	412774 <_vfiprintf_r+0x9f8>
  411df2:	f108 0201 	add.w	r2, r8, #1
  411df6:	e001      	b.n	411dfc <_vfiprintf_r+0x80>
  411df8:	2b25      	cmp	r3, #37	; 0x25
  411dfa:	d004      	beq.n	411e06 <_vfiprintf_r+0x8a>
  411dfc:	4614      	mov	r4, r2
  411dfe:	3201      	adds	r2, #1
  411e00:	7823      	ldrb	r3, [r4, #0]
  411e02:	2b00      	cmp	r3, #0
  411e04:	d1f8      	bne.n	411df8 <_vfiprintf_r+0x7c>
  411e06:	ebc8 0504 	rsb	r5, r8, r4
  411e0a:	b195      	cbz	r5, 411e32 <_vfiprintf_r+0xb6>
  411e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  411e0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  411e10:	f8c6 8000 	str.w	r8, [r6]
  411e14:	3301      	adds	r3, #1
  411e16:	442a      	add	r2, r5
  411e18:	2b07      	cmp	r3, #7
  411e1a:	6075      	str	r5, [r6, #4]
  411e1c:	9215      	str	r2, [sp, #84]	; 0x54
  411e1e:	9314      	str	r3, [sp, #80]	; 0x50
  411e20:	dd7b      	ble.n	411f1a <_vfiprintf_r+0x19e>
  411e22:	2a00      	cmp	r2, #0
  411e24:	f040 84d4 	bne.w	4127d0 <_vfiprintf_r+0xa54>
  411e28:	9809      	ldr	r0, [sp, #36]	; 0x24
  411e2a:	9214      	str	r2, [sp, #80]	; 0x50
  411e2c:	4428      	add	r0, r5
  411e2e:	464e      	mov	r6, r9
  411e30:	9009      	str	r0, [sp, #36]	; 0x24
  411e32:	7823      	ldrb	r3, [r4, #0]
  411e34:	2b00      	cmp	r3, #0
  411e36:	f000 83e9 	beq.w	41260c <_vfiprintf_r+0x890>
  411e3a:	2100      	movs	r1, #0
  411e3c:	f04f 0200 	mov.w	r2, #0
  411e40:	f04f 3cff 	mov.w	ip, #4294967295
  411e44:	7863      	ldrb	r3, [r4, #1]
  411e46:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  411e4a:	9104      	str	r1, [sp, #16]
  411e4c:	468a      	mov	sl, r1
  411e4e:	f104 0801 	add.w	r8, r4, #1
  411e52:	4608      	mov	r0, r1
  411e54:	4665      	mov	r5, ip
  411e56:	f108 0801 	add.w	r8, r8, #1
  411e5a:	f1a3 0220 	sub.w	r2, r3, #32
  411e5e:	2a58      	cmp	r2, #88	; 0x58
  411e60:	f200 82d5 	bhi.w	41240e <_vfiprintf_r+0x692>
  411e64:	e8df f012 	tbh	[pc, r2, lsl #1]
  411e68:	02d302c7 	.word	0x02d302c7
  411e6c:	02ce02d3 	.word	0x02ce02d3
  411e70:	02d302d3 	.word	0x02d302d3
  411e74:	02d302d3 	.word	0x02d302d3
  411e78:	02d302d3 	.word	0x02d302d3
  411e7c:	028b027e 	.word	0x028b027e
  411e80:	008402d3 	.word	0x008402d3
  411e84:	02d3028f 	.word	0x02d3028f
  411e88:	0194012b 	.word	0x0194012b
  411e8c:	01940194 	.word	0x01940194
  411e90:	01940194 	.word	0x01940194
  411e94:	01940194 	.word	0x01940194
  411e98:	01940194 	.word	0x01940194
  411e9c:	02d302d3 	.word	0x02d302d3
  411ea0:	02d302d3 	.word	0x02d302d3
  411ea4:	02d302d3 	.word	0x02d302d3
  411ea8:	02d302d3 	.word	0x02d302d3
  411eac:	02d302d3 	.word	0x02d302d3
  411eb0:	02d30130 	.word	0x02d30130
  411eb4:	02d302d3 	.word	0x02d302d3
  411eb8:	02d302d3 	.word	0x02d302d3
  411ebc:	02d302d3 	.word	0x02d302d3
  411ec0:	02d302d3 	.word	0x02d302d3
  411ec4:	017902d3 	.word	0x017902d3
  411ec8:	02d302d3 	.word	0x02d302d3
  411ecc:	02d302d3 	.word	0x02d302d3
  411ed0:	01a202d3 	.word	0x01a202d3
  411ed4:	02d302d3 	.word	0x02d302d3
  411ed8:	02d301bd 	.word	0x02d301bd
  411edc:	02d302d3 	.word	0x02d302d3
  411ee0:	02d302d3 	.word	0x02d302d3
  411ee4:	02d302d3 	.word	0x02d302d3
  411ee8:	02d302d3 	.word	0x02d302d3
  411eec:	01e202d3 	.word	0x01e202d3
  411ef0:	02d301f8 	.word	0x02d301f8
  411ef4:	02d302d3 	.word	0x02d302d3
  411ef8:	01f80214 	.word	0x01f80214
  411efc:	02d302d3 	.word	0x02d302d3
  411f00:	02d30219 	.word	0x02d30219
  411f04:	00890226 	.word	0x00890226
  411f08:	02790264 	.word	0x02790264
  411f0c:	023802d3 	.word	0x023802d3
  411f10:	011902d3 	.word	0x011902d3
  411f14:	02d302d3 	.word	0x02d302d3
  411f18:	02ab      	.short	0x02ab
  411f1a:	3608      	adds	r6, #8
  411f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
  411f1e:	4428      	add	r0, r5
  411f20:	9009      	str	r0, [sp, #36]	; 0x24
  411f22:	e786      	b.n	411e32 <_vfiprintf_r+0xb6>
  411f24:	9806      	ldr	r0, [sp, #24]
  411f26:	9902      	ldr	r1, [sp, #8]
  411f28:	f000 fda2 	bl	412a70 <__swsetup_r>
  411f2c:	b9b0      	cbnz	r0, 411f5c <_vfiprintf_r+0x1e0>
  411f2e:	9d02      	ldr	r5, [sp, #8]
  411f30:	89aa      	ldrh	r2, [r5, #12]
  411f32:	f002 021a 	and.w	r2, r2, #26
  411f36:	2a0a      	cmp	r2, #10
  411f38:	f47f af49 	bne.w	411dce <_vfiprintf_r+0x52>
  411f3c:	f8dd b008 	ldr.w	fp, [sp, #8]
  411f40:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  411f44:	2b00      	cmp	r3, #0
  411f46:	f6ff af42 	blt.w	411dce <_vfiprintf_r+0x52>
  411f4a:	9806      	ldr	r0, [sp, #24]
  411f4c:	4659      	mov	r1, fp
  411f4e:	4642      	mov	r2, r8
  411f50:	4623      	mov	r3, r4
  411f52:	f000 fd3d 	bl	4129d0 <__sbprintf>
  411f56:	b031      	add	sp, #196	; 0xc4
  411f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f5c:	f04f 30ff 	mov.w	r0, #4294967295
  411f60:	b031      	add	sp, #196	; 0xc4
  411f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f66:	f001 fe81 	bl	413c6c <__sinit>
  411f6a:	e714      	b.n	411d96 <_vfiprintf_r+0x1a>
  411f6c:	4240      	negs	r0, r0
  411f6e:	9308      	str	r3, [sp, #32]
  411f70:	f04a 0a04 	orr.w	sl, sl, #4
  411f74:	f898 3000 	ldrb.w	r3, [r8]
  411f78:	e76d      	b.n	411e56 <_vfiprintf_r+0xda>
  411f7a:	f01a 0320 	ands.w	r3, sl, #32
  411f7e:	9004      	str	r0, [sp, #16]
  411f80:	46ac      	mov	ip, r5
  411f82:	f000 80f2 	beq.w	41216a <_vfiprintf_r+0x3ee>
  411f86:	f8dd b020 	ldr.w	fp, [sp, #32]
  411f8a:	f10b 0307 	add.w	r3, fp, #7
  411f8e:	f023 0307 	bic.w	r3, r3, #7
  411f92:	f103 0408 	add.w	r4, r3, #8
  411f96:	9408      	str	r4, [sp, #32]
  411f98:	e9d3 4500 	ldrd	r4, r5, [r3]
  411f9c:	2300      	movs	r3, #0
  411f9e:	f04f 0000 	mov.w	r0, #0
  411fa2:	2100      	movs	r1, #0
  411fa4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  411fa8:	f8cd c014 	str.w	ip, [sp, #20]
  411fac:	9107      	str	r1, [sp, #28]
  411fae:	f1bc 0f00 	cmp.w	ip, #0
  411fb2:	bfa8      	it	ge
  411fb4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  411fb8:	ea54 0205 	orrs.w	r2, r4, r5
  411fbc:	f040 80ad 	bne.w	41211a <_vfiprintf_r+0x39e>
  411fc0:	f1bc 0f00 	cmp.w	ip, #0
  411fc4:	f040 80a9 	bne.w	41211a <_vfiprintf_r+0x39e>
  411fc8:	2b00      	cmp	r3, #0
  411fca:	f040 83bc 	bne.w	412746 <_vfiprintf_r+0x9ca>
  411fce:	f01a 0f01 	tst.w	sl, #1
  411fd2:	f000 83b8 	beq.w	412746 <_vfiprintf_r+0x9ca>
  411fd6:	af30      	add	r7, sp, #192	; 0xc0
  411fd8:	2330      	movs	r3, #48	; 0x30
  411fda:	f807 3d41 	strb.w	r3, [r7, #-65]!
  411fde:	ebc7 0409 	rsb	r4, r7, r9
  411fe2:	9405      	str	r4, [sp, #20]
  411fe4:	f8dd b014 	ldr.w	fp, [sp, #20]
  411fe8:	9c07      	ldr	r4, [sp, #28]
  411fea:	45e3      	cmp	fp, ip
  411fec:	bfb8      	it	lt
  411fee:	46e3      	movlt	fp, ip
  411ff0:	f8cd b00c 	str.w	fp, [sp, #12]
  411ff4:	b11c      	cbz	r4, 411ffe <_vfiprintf_r+0x282>
  411ff6:	f10b 0b01 	add.w	fp, fp, #1
  411ffa:	f8cd b00c 	str.w	fp, [sp, #12]
  411ffe:	f01a 0502 	ands.w	r5, sl, #2
  412002:	9507      	str	r5, [sp, #28]
  412004:	d005      	beq.n	412012 <_vfiprintf_r+0x296>
  412006:	f8dd b00c 	ldr.w	fp, [sp, #12]
  41200a:	f10b 0b02 	add.w	fp, fp, #2
  41200e:	f8cd b00c 	str.w	fp, [sp, #12]
  412012:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  412016:	930b      	str	r3, [sp, #44]	; 0x2c
  412018:	f040 8217 	bne.w	41244a <_vfiprintf_r+0x6ce>
  41201c:	9d04      	ldr	r5, [sp, #16]
  41201e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  412022:	ebcb 0405 	rsb	r4, fp, r5
  412026:	2c00      	cmp	r4, #0
  412028:	f340 820f 	ble.w	41244a <_vfiprintf_r+0x6ce>
  41202c:	2c10      	cmp	r4, #16
  41202e:	f340 8488 	ble.w	412942 <_vfiprintf_r+0xbc6>
  412032:	4dbd      	ldr	r5, [pc, #756]	; (412328 <_vfiprintf_r+0x5ac>)
  412034:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412036:	9814      	ldr	r0, [sp, #80]	; 0x50
  412038:	462b      	mov	r3, r5
  41203a:	f04f 0b10 	mov.w	fp, #16
  41203e:	4625      	mov	r5, r4
  412040:	4664      	mov	r4, ip
  412042:	46b4      	mov	ip, r6
  412044:	461e      	mov	r6, r3
  412046:	e006      	b.n	412056 <_vfiprintf_r+0x2da>
  412048:	1c83      	adds	r3, r0, #2
  41204a:	f10c 0c08 	add.w	ip, ip, #8
  41204e:	4608      	mov	r0, r1
  412050:	3d10      	subs	r5, #16
  412052:	2d10      	cmp	r5, #16
  412054:	dd11      	ble.n	41207a <_vfiprintf_r+0x2fe>
  412056:	1c41      	adds	r1, r0, #1
  412058:	3210      	adds	r2, #16
  41205a:	2907      	cmp	r1, #7
  41205c:	9215      	str	r2, [sp, #84]	; 0x54
  41205e:	e88c 0840 	stmia.w	ip, {r6, fp}
  412062:	9114      	str	r1, [sp, #80]	; 0x50
  412064:	ddf0      	ble.n	412048 <_vfiprintf_r+0x2cc>
  412066:	2a00      	cmp	r2, #0
  412068:	f040 81e2 	bne.w	412430 <_vfiprintf_r+0x6b4>
  41206c:	3d10      	subs	r5, #16
  41206e:	2d10      	cmp	r5, #16
  412070:	f04f 0301 	mov.w	r3, #1
  412074:	4610      	mov	r0, r2
  412076:	46cc      	mov	ip, r9
  412078:	dced      	bgt.n	412056 <_vfiprintf_r+0x2da>
  41207a:	4631      	mov	r1, r6
  41207c:	4666      	mov	r6, ip
  41207e:	46a4      	mov	ip, r4
  412080:	462c      	mov	r4, r5
  412082:	460d      	mov	r5, r1
  412084:	4422      	add	r2, r4
  412086:	2b07      	cmp	r3, #7
  412088:	9215      	str	r2, [sp, #84]	; 0x54
  41208a:	6035      	str	r5, [r6, #0]
  41208c:	6074      	str	r4, [r6, #4]
  41208e:	9314      	str	r3, [sp, #80]	; 0x50
  412090:	f300 8369 	bgt.w	412766 <_vfiprintf_r+0x9ea>
  412094:	3608      	adds	r6, #8
  412096:	1c59      	adds	r1, r3, #1
  412098:	e1da      	b.n	412450 <_vfiprintf_r+0x6d4>
  41209a:	f01a 0f20 	tst.w	sl, #32
  41209e:	9004      	str	r0, [sp, #16]
  4120a0:	46ac      	mov	ip, r5
  4120a2:	f000 808b 	beq.w	4121bc <_vfiprintf_r+0x440>
  4120a6:	9d08      	ldr	r5, [sp, #32]
  4120a8:	1deb      	adds	r3, r5, #7
  4120aa:	f023 0307 	bic.w	r3, r3, #7
  4120ae:	f103 0b08 	add.w	fp, r3, #8
  4120b2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4120b6:	f8cd b020 	str.w	fp, [sp, #32]
  4120ba:	2301      	movs	r3, #1
  4120bc:	e76f      	b.n	411f9e <_vfiprintf_r+0x222>
  4120be:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  4120c2:	f898 3000 	ldrb.w	r3, [r8]
  4120c6:	e6c6      	b.n	411e56 <_vfiprintf_r+0xda>
  4120c8:	f04a 0a10 	orr.w	sl, sl, #16
  4120cc:	f01a 0f20 	tst.w	sl, #32
  4120d0:	9004      	str	r0, [sp, #16]
  4120d2:	46ac      	mov	ip, r5
  4120d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4120d8:	f000 80c6 	beq.w	412268 <_vfiprintf_r+0x4ec>
  4120dc:	9c08      	ldr	r4, [sp, #32]
  4120de:	1de1      	adds	r1, r4, #7
  4120e0:	f021 0107 	bic.w	r1, r1, #7
  4120e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4120e8:	3108      	adds	r1, #8
  4120ea:	9108      	str	r1, [sp, #32]
  4120ec:	4614      	mov	r4, r2
  4120ee:	461d      	mov	r5, r3
  4120f0:	2a00      	cmp	r2, #0
  4120f2:	f173 0000 	sbcs.w	r0, r3, #0
  4120f6:	f2c0 83cd 	blt.w	412894 <_vfiprintf_r+0xb18>
  4120fa:	f1bc 0f00 	cmp.w	ip, #0
  4120fe:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  412102:	9107      	str	r1, [sp, #28]
  412104:	bfa8      	it	ge
  412106:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  41210a:	ea54 0205 	orrs.w	r2, r4, r5
  41210e:	f8cd c014 	str.w	ip, [sp, #20]
  412112:	f04f 0301 	mov.w	r3, #1
  412116:	f43f af53 	beq.w	411fc0 <_vfiprintf_r+0x244>
  41211a:	2b01      	cmp	r3, #1
  41211c:	f000 8315 	beq.w	41274a <_vfiprintf_r+0x9ce>
  412120:	2b02      	cmp	r3, #2
  412122:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  412126:	f040 8248 	bne.w	4125ba <_vfiprintf_r+0x83e>
  41212a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41212c:	4619      	mov	r1, r3
  41212e:	0922      	lsrs	r2, r4, #4
  412130:	f004 040f 	and.w	r4, r4, #15
  412134:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  412138:	460f      	mov	r7, r1
  41213a:	092b      	lsrs	r3, r5, #4
  41213c:	5d01      	ldrb	r1, [r0, r4]
  41213e:	7039      	strb	r1, [r7, #0]
  412140:	ea52 0b03 	orrs.w	fp, r2, r3
  412144:	4614      	mov	r4, r2
  412146:	461d      	mov	r5, r3
  412148:	f107 31ff 	add.w	r1, r7, #4294967295
  41214c:	d1ef      	bne.n	41212e <_vfiprintf_r+0x3b2>
  41214e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  412152:	ebc7 0309 	rsb	r3, r7, r9
  412156:	9305      	str	r3, [sp, #20]
  412158:	e744      	b.n	411fe4 <_vfiprintf_r+0x268>
  41215a:	f04a 0a10 	orr.w	sl, sl, #16
  41215e:	f01a 0320 	ands.w	r3, sl, #32
  412162:	9004      	str	r0, [sp, #16]
  412164:	46ac      	mov	ip, r5
  412166:	f47f af0e 	bne.w	411f86 <_vfiprintf_r+0x20a>
  41216a:	f01a 0210 	ands.w	r2, sl, #16
  41216e:	f040 830f 	bne.w	412790 <_vfiprintf_r+0xa14>
  412172:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  412176:	f000 830b 	beq.w	412790 <_vfiprintf_r+0xa14>
  41217a:	f8dd b020 	ldr.w	fp, [sp, #32]
  41217e:	f8bb 4000 	ldrh.w	r4, [fp]
  412182:	f10b 0b04 	add.w	fp, fp, #4
  412186:	4613      	mov	r3, r2
  412188:	2500      	movs	r5, #0
  41218a:	f8cd b020 	str.w	fp, [sp, #32]
  41218e:	e706      	b.n	411f9e <_vfiprintf_r+0x222>
  412190:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  412194:	2000      	movs	r0, #0
  412196:	f818 3b01 	ldrb.w	r3, [r8], #1
  41219a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41219e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  4121a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4121a6:	2a09      	cmp	r2, #9
  4121a8:	d9f5      	bls.n	412196 <_vfiprintf_r+0x41a>
  4121aa:	e656      	b.n	411e5a <_vfiprintf_r+0xde>
  4121ac:	f04a 0a10 	orr.w	sl, sl, #16
  4121b0:	f01a 0f20 	tst.w	sl, #32
  4121b4:	9004      	str	r0, [sp, #16]
  4121b6:	46ac      	mov	ip, r5
  4121b8:	f47f af75 	bne.w	4120a6 <_vfiprintf_r+0x32a>
  4121bc:	f01a 0f10 	tst.w	sl, #16
  4121c0:	f040 82ec 	bne.w	41279c <_vfiprintf_r+0xa20>
  4121c4:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4121c8:	f000 82e8 	beq.w	41279c <_vfiprintf_r+0xa20>
  4121cc:	f8dd b020 	ldr.w	fp, [sp, #32]
  4121d0:	f8bb 4000 	ldrh.w	r4, [fp]
  4121d4:	f10b 0b04 	add.w	fp, fp, #4
  4121d8:	2500      	movs	r5, #0
  4121da:	2301      	movs	r3, #1
  4121dc:	f8cd b020 	str.w	fp, [sp, #32]
  4121e0:	e6dd      	b.n	411f9e <_vfiprintf_r+0x222>
  4121e2:	46ac      	mov	ip, r5
  4121e4:	f01a 0f20 	tst.w	sl, #32
  4121e8:	4d50      	ldr	r5, [pc, #320]	; (41232c <_vfiprintf_r+0x5b0>)
  4121ea:	9004      	str	r0, [sp, #16]
  4121ec:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4121f0:	950a      	str	r5, [sp, #40]	; 0x28
  4121f2:	f000 80ee 	beq.w	4123d2 <_vfiprintf_r+0x656>
  4121f6:	9d08      	ldr	r5, [sp, #32]
  4121f8:	1dea      	adds	r2, r5, #7
  4121fa:	f022 0207 	bic.w	r2, r2, #7
  4121fe:	e9d2 4500 	ldrd	r4, r5, [r2]
  412202:	f102 0b08 	add.w	fp, r2, #8
  412206:	f8cd b020 	str.w	fp, [sp, #32]
  41220a:	f01a 0f01 	tst.w	sl, #1
  41220e:	f000 82a8 	beq.w	412762 <_vfiprintf_r+0x9e6>
  412212:	ea54 0b05 	orrs.w	fp, r4, r5
  412216:	f000 82a4 	beq.w	412762 <_vfiprintf_r+0x9e6>
  41221a:	2230      	movs	r2, #48	; 0x30
  41221c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  412220:	f04a 0a02 	orr.w	sl, sl, #2
  412224:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  412228:	2302      	movs	r3, #2
  41222a:	e6b8      	b.n	411f9e <_vfiprintf_r+0x222>
  41222c:	9b08      	ldr	r3, [sp, #32]
  41222e:	f8dd b020 	ldr.w	fp, [sp, #32]
  412232:	681b      	ldr	r3, [r3, #0]
  412234:	9004      	str	r0, [sp, #16]
  412236:	2401      	movs	r4, #1
  412238:	f04f 0500 	mov.w	r5, #0
  41223c:	f10b 0b04 	add.w	fp, fp, #4
  412240:	9403      	str	r4, [sp, #12]
  412242:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  412246:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  41224a:	f8cd b020 	str.w	fp, [sp, #32]
  41224e:	9405      	str	r4, [sp, #20]
  412250:	af16      	add	r7, sp, #88	; 0x58
  412252:	f04f 0c00 	mov.w	ip, #0
  412256:	e6d2      	b.n	411ffe <_vfiprintf_r+0x282>
  412258:	f01a 0f20 	tst.w	sl, #32
  41225c:	9004      	str	r0, [sp, #16]
  41225e:	46ac      	mov	ip, r5
  412260:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  412264:	f47f af3a 	bne.w	4120dc <_vfiprintf_r+0x360>
  412268:	f01a 0f10 	tst.w	sl, #16
  41226c:	f040 82a4 	bne.w	4127b8 <_vfiprintf_r+0xa3c>
  412270:	f01a 0f40 	tst.w	sl, #64	; 0x40
  412274:	f000 82a0 	beq.w	4127b8 <_vfiprintf_r+0xa3c>
  412278:	f8dd b020 	ldr.w	fp, [sp, #32]
  41227c:	f9bb 4000 	ldrsh.w	r4, [fp]
  412280:	f10b 0b04 	add.w	fp, fp, #4
  412284:	17e5      	asrs	r5, r4, #31
  412286:	4622      	mov	r2, r4
  412288:	462b      	mov	r3, r5
  41228a:	f8cd b020 	str.w	fp, [sp, #32]
  41228e:	e72f      	b.n	4120f0 <_vfiprintf_r+0x374>
  412290:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  412294:	f898 3000 	ldrb.w	r3, [r8]
  412298:	e5dd      	b.n	411e56 <_vfiprintf_r+0xda>
  41229a:	f898 3000 	ldrb.w	r3, [r8]
  41229e:	4642      	mov	r2, r8
  4122a0:	2b6c      	cmp	r3, #108	; 0x6c
  4122a2:	bf03      	ittte	eq
  4122a4:	f108 0801 	addeq.w	r8, r8, #1
  4122a8:	f04a 0a20 	orreq.w	sl, sl, #32
  4122ac:	7853      	ldrbeq	r3, [r2, #1]
  4122ae:	f04a 0a10 	orrne.w	sl, sl, #16
  4122b2:	e5d0      	b.n	411e56 <_vfiprintf_r+0xda>
  4122b4:	f01a 0f20 	tst.w	sl, #32
  4122b8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4122bc:	f000 82f8 	beq.w	4128b0 <_vfiprintf_r+0xb34>
  4122c0:	9c08      	ldr	r4, [sp, #32]
  4122c2:	6821      	ldr	r1, [r4, #0]
  4122c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4122c6:	17e5      	asrs	r5, r4, #31
  4122c8:	462b      	mov	r3, r5
  4122ca:	9d08      	ldr	r5, [sp, #32]
  4122cc:	4622      	mov	r2, r4
  4122ce:	3504      	adds	r5, #4
  4122d0:	9508      	str	r5, [sp, #32]
  4122d2:	e9c1 2300 	strd	r2, r3, [r1]
  4122d6:	e584      	b.n	411de2 <_vfiprintf_r+0x66>
  4122d8:	9c08      	ldr	r4, [sp, #32]
  4122da:	9004      	str	r0, [sp, #16]
  4122dc:	6827      	ldr	r7, [r4, #0]
  4122de:	46ac      	mov	ip, r5
  4122e0:	f04f 0500 	mov.w	r5, #0
  4122e4:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  4122e8:	3404      	adds	r4, #4
  4122ea:	2f00      	cmp	r7, #0
  4122ec:	f000 8334 	beq.w	412958 <_vfiprintf_r+0xbdc>
  4122f0:	f1bc 0f00 	cmp.w	ip, #0
  4122f4:	4638      	mov	r0, r7
  4122f6:	f2c0 8308 	blt.w	41290a <_vfiprintf_r+0xb8e>
  4122fa:	4662      	mov	r2, ip
  4122fc:	2100      	movs	r1, #0
  4122fe:	f8cd c004 	str.w	ip, [sp, #4]
  412302:	f002 f959 	bl	4145b8 <memchr>
  412306:	f8dd c004 	ldr.w	ip, [sp, #4]
  41230a:	2800      	cmp	r0, #0
  41230c:	f000 833c 	beq.w	412988 <_vfiprintf_r+0xc0c>
  412310:	1bc0      	subs	r0, r0, r7
  412312:	4560      	cmp	r0, ip
  412314:	bfa8      	it	ge
  412316:	4660      	movge	r0, ip
  412318:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  41231c:	9005      	str	r0, [sp, #20]
  41231e:	9408      	str	r4, [sp, #32]
  412320:	9507      	str	r5, [sp, #28]
  412322:	f04f 0c00 	mov.w	ip, #0
  412326:	e65d      	b.n	411fe4 <_vfiprintf_r+0x268>
  412328:	00419294 	.word	0x00419294
  41232c:	00419214 	.word	0x00419214
  412330:	9a08      	ldr	r2, [sp, #32]
  412332:	9004      	str	r0, [sp, #16]
  412334:	2330      	movs	r3, #48	; 0x30
  412336:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  41233a:	f102 0b04 	add.w	fp, r2, #4
  41233e:	2378      	movs	r3, #120	; 0x78
  412340:	48af      	ldr	r0, [pc, #700]	; (412600 <_vfiprintf_r+0x884>)
  412342:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  412346:	46ac      	mov	ip, r5
  412348:	6814      	ldr	r4, [r2, #0]
  41234a:	f8cd b020 	str.w	fp, [sp, #32]
  41234e:	f04a 0a02 	orr.w	sl, sl, #2
  412352:	2500      	movs	r5, #0
  412354:	900a      	str	r0, [sp, #40]	; 0x28
  412356:	2302      	movs	r3, #2
  412358:	e621      	b.n	411f9e <_vfiprintf_r+0x222>
  41235a:	f04a 0a20 	orr.w	sl, sl, #32
  41235e:	f898 3000 	ldrb.w	r3, [r8]
  412362:	e578      	b.n	411e56 <_vfiprintf_r+0xda>
  412364:	f8dd b020 	ldr.w	fp, [sp, #32]
  412368:	f8db 0000 	ldr.w	r0, [fp]
  41236c:	2800      	cmp	r0, #0
  41236e:	f10b 0304 	add.w	r3, fp, #4
  412372:	f6ff adfb 	blt.w	411f6c <_vfiprintf_r+0x1f0>
  412376:	9308      	str	r3, [sp, #32]
  412378:	f898 3000 	ldrb.w	r3, [r8]
  41237c:	e56b      	b.n	411e56 <_vfiprintf_r+0xda>
  41237e:	f898 3000 	ldrb.w	r3, [r8]
  412382:	212b      	movs	r1, #43	; 0x2b
  412384:	e567      	b.n	411e56 <_vfiprintf_r+0xda>
  412386:	f898 3000 	ldrb.w	r3, [r8]
  41238a:	2b2a      	cmp	r3, #42	; 0x2a
  41238c:	f108 0401 	add.w	r4, r8, #1
  412390:	f000 8309 	beq.w	4129a6 <_vfiprintf_r+0xc2a>
  412394:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  412398:	2a09      	cmp	r2, #9
  41239a:	bf98      	it	ls
  41239c:	2500      	movls	r5, #0
  41239e:	f200 82fe 	bhi.w	41299e <_vfiprintf_r+0xc22>
  4123a2:	f814 3b01 	ldrb.w	r3, [r4], #1
  4123a6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4123aa:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4123ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4123b2:	2a09      	cmp	r2, #9
  4123b4:	d9f5      	bls.n	4123a2 <_vfiprintf_r+0x626>
  4123b6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4123ba:	46a0      	mov	r8, r4
  4123bc:	e54d      	b.n	411e5a <_vfiprintf_r+0xde>
  4123be:	4c90      	ldr	r4, [pc, #576]	; (412600 <_vfiprintf_r+0x884>)
  4123c0:	9004      	str	r0, [sp, #16]
  4123c2:	f01a 0f20 	tst.w	sl, #32
  4123c6:	46ac      	mov	ip, r5
  4123c8:	940a      	str	r4, [sp, #40]	; 0x28
  4123ca:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4123ce:	f47f af12 	bne.w	4121f6 <_vfiprintf_r+0x47a>
  4123d2:	f01a 0f10 	tst.w	sl, #16
  4123d6:	f040 81e9 	bne.w	4127ac <_vfiprintf_r+0xa30>
  4123da:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4123de:	f000 81e5 	beq.w	4127ac <_vfiprintf_r+0xa30>
  4123e2:	f8dd b020 	ldr.w	fp, [sp, #32]
  4123e6:	f8bb 4000 	ldrh.w	r4, [fp]
  4123ea:	f10b 0b04 	add.w	fp, fp, #4
  4123ee:	2500      	movs	r5, #0
  4123f0:	f8cd b020 	str.w	fp, [sp, #32]
  4123f4:	e709      	b.n	41220a <_vfiprintf_r+0x48e>
  4123f6:	f898 3000 	ldrb.w	r3, [r8]
  4123fa:	2900      	cmp	r1, #0
  4123fc:	f47f ad2b 	bne.w	411e56 <_vfiprintf_r+0xda>
  412400:	2120      	movs	r1, #32
  412402:	e528      	b.n	411e56 <_vfiprintf_r+0xda>
  412404:	f04a 0a01 	orr.w	sl, sl, #1
  412408:	f898 3000 	ldrb.w	r3, [r8]
  41240c:	e523      	b.n	411e56 <_vfiprintf_r+0xda>
  41240e:	9004      	str	r0, [sp, #16]
  412410:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  412414:	2b00      	cmp	r3, #0
  412416:	f000 80f9 	beq.w	41260c <_vfiprintf_r+0x890>
  41241a:	2501      	movs	r5, #1
  41241c:	f04f 0b00 	mov.w	fp, #0
  412420:	9503      	str	r5, [sp, #12]
  412422:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  412426:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  41242a:	9505      	str	r5, [sp, #20]
  41242c:	af16      	add	r7, sp, #88	; 0x58
  41242e:	e710      	b.n	412252 <_vfiprintf_r+0x4d6>
  412430:	9806      	ldr	r0, [sp, #24]
  412432:	9902      	ldr	r1, [sp, #8]
  412434:	aa13      	add	r2, sp, #76	; 0x4c
  412436:	f7ff fc65 	bl	411d04 <__sprint_r.part.0>
  41243a:	2800      	cmp	r0, #0
  41243c:	f040 80ed 	bne.w	41261a <_vfiprintf_r+0x89e>
  412440:	9814      	ldr	r0, [sp, #80]	; 0x50
  412442:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412444:	1c43      	adds	r3, r0, #1
  412446:	46cc      	mov	ip, r9
  412448:	e602      	b.n	412050 <_vfiprintf_r+0x2d4>
  41244a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41244c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41244e:	1c59      	adds	r1, r3, #1
  412450:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  412454:	b168      	cbz	r0, 412472 <_vfiprintf_r+0x6f6>
  412456:	3201      	adds	r2, #1
  412458:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  41245c:	2301      	movs	r3, #1
  41245e:	2907      	cmp	r1, #7
  412460:	9215      	str	r2, [sp, #84]	; 0x54
  412462:	9114      	str	r1, [sp, #80]	; 0x50
  412464:	e886 0009 	stmia.w	r6, {r0, r3}
  412468:	f300 8160 	bgt.w	41272c <_vfiprintf_r+0x9b0>
  41246c:	460b      	mov	r3, r1
  41246e:	3608      	adds	r6, #8
  412470:	3101      	adds	r1, #1
  412472:	9c07      	ldr	r4, [sp, #28]
  412474:	b164      	cbz	r4, 412490 <_vfiprintf_r+0x714>
  412476:	3202      	adds	r2, #2
  412478:	a812      	add	r0, sp, #72	; 0x48
  41247a:	2302      	movs	r3, #2
  41247c:	2907      	cmp	r1, #7
  41247e:	9215      	str	r2, [sp, #84]	; 0x54
  412480:	9114      	str	r1, [sp, #80]	; 0x50
  412482:	e886 0009 	stmia.w	r6, {r0, r3}
  412486:	f300 8157 	bgt.w	412738 <_vfiprintf_r+0x9bc>
  41248a:	460b      	mov	r3, r1
  41248c:	3608      	adds	r6, #8
  41248e:	3101      	adds	r1, #1
  412490:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  412492:	2d80      	cmp	r5, #128	; 0x80
  412494:	f000 8101 	beq.w	41269a <_vfiprintf_r+0x91e>
  412498:	9d05      	ldr	r5, [sp, #20]
  41249a:	ebc5 040c 	rsb	r4, r5, ip
  41249e:	2c00      	cmp	r4, #0
  4124a0:	dd2f      	ble.n	412502 <_vfiprintf_r+0x786>
  4124a2:	2c10      	cmp	r4, #16
  4124a4:	4d57      	ldr	r5, [pc, #348]	; (412604 <_vfiprintf_r+0x888>)
  4124a6:	dd22      	ble.n	4124ee <_vfiprintf_r+0x772>
  4124a8:	4630      	mov	r0, r6
  4124aa:	f04f 0b10 	mov.w	fp, #16
  4124ae:	462e      	mov	r6, r5
  4124b0:	4625      	mov	r5, r4
  4124b2:	9c06      	ldr	r4, [sp, #24]
  4124b4:	e006      	b.n	4124c4 <_vfiprintf_r+0x748>
  4124b6:	f103 0c02 	add.w	ip, r3, #2
  4124ba:	3008      	adds	r0, #8
  4124bc:	460b      	mov	r3, r1
  4124be:	3d10      	subs	r5, #16
  4124c0:	2d10      	cmp	r5, #16
  4124c2:	dd10      	ble.n	4124e6 <_vfiprintf_r+0x76a>
  4124c4:	1c59      	adds	r1, r3, #1
  4124c6:	3210      	adds	r2, #16
  4124c8:	2907      	cmp	r1, #7
  4124ca:	9215      	str	r2, [sp, #84]	; 0x54
  4124cc:	e880 0840 	stmia.w	r0, {r6, fp}
  4124d0:	9114      	str	r1, [sp, #80]	; 0x50
  4124d2:	ddf0      	ble.n	4124b6 <_vfiprintf_r+0x73a>
  4124d4:	2a00      	cmp	r2, #0
  4124d6:	d163      	bne.n	4125a0 <_vfiprintf_r+0x824>
  4124d8:	3d10      	subs	r5, #16
  4124da:	2d10      	cmp	r5, #16
  4124dc:	f04f 0c01 	mov.w	ip, #1
  4124e0:	4613      	mov	r3, r2
  4124e2:	4648      	mov	r0, r9
  4124e4:	dcee      	bgt.n	4124c4 <_vfiprintf_r+0x748>
  4124e6:	462c      	mov	r4, r5
  4124e8:	4661      	mov	r1, ip
  4124ea:	4635      	mov	r5, r6
  4124ec:	4606      	mov	r6, r0
  4124ee:	4422      	add	r2, r4
  4124f0:	2907      	cmp	r1, #7
  4124f2:	9215      	str	r2, [sp, #84]	; 0x54
  4124f4:	6035      	str	r5, [r6, #0]
  4124f6:	6074      	str	r4, [r6, #4]
  4124f8:	9114      	str	r1, [sp, #80]	; 0x50
  4124fa:	f300 80c1 	bgt.w	412680 <_vfiprintf_r+0x904>
  4124fe:	3608      	adds	r6, #8
  412500:	3101      	adds	r1, #1
  412502:	9d05      	ldr	r5, [sp, #20]
  412504:	6037      	str	r7, [r6, #0]
  412506:	442a      	add	r2, r5
  412508:	2907      	cmp	r1, #7
  41250a:	9215      	str	r2, [sp, #84]	; 0x54
  41250c:	6075      	str	r5, [r6, #4]
  41250e:	9114      	str	r1, [sp, #80]	; 0x50
  412510:	f340 80c1 	ble.w	412696 <_vfiprintf_r+0x91a>
  412514:	2a00      	cmp	r2, #0
  412516:	f040 8130 	bne.w	41277a <_vfiprintf_r+0x9fe>
  41251a:	9214      	str	r2, [sp, #80]	; 0x50
  41251c:	464e      	mov	r6, r9
  41251e:	f01a 0f04 	tst.w	sl, #4
  412522:	f000 808b 	beq.w	41263c <_vfiprintf_r+0x8c0>
  412526:	9d04      	ldr	r5, [sp, #16]
  412528:	f8dd b00c 	ldr.w	fp, [sp, #12]
  41252c:	ebcb 0405 	rsb	r4, fp, r5
  412530:	2c00      	cmp	r4, #0
  412532:	f340 8083 	ble.w	41263c <_vfiprintf_r+0x8c0>
  412536:	2c10      	cmp	r4, #16
  412538:	f340 8222 	ble.w	412980 <_vfiprintf_r+0xc04>
  41253c:	9914      	ldr	r1, [sp, #80]	; 0x50
  41253e:	4d32      	ldr	r5, [pc, #200]	; (412608 <_vfiprintf_r+0x88c>)
  412540:	f8dd a018 	ldr.w	sl, [sp, #24]
  412544:	f8dd b008 	ldr.w	fp, [sp, #8]
  412548:	2710      	movs	r7, #16
  41254a:	e005      	b.n	412558 <_vfiprintf_r+0x7dc>
  41254c:	1c88      	adds	r0, r1, #2
  41254e:	3608      	adds	r6, #8
  412550:	4619      	mov	r1, r3
  412552:	3c10      	subs	r4, #16
  412554:	2c10      	cmp	r4, #16
  412556:	dd10      	ble.n	41257a <_vfiprintf_r+0x7fe>
  412558:	1c4b      	adds	r3, r1, #1
  41255a:	3210      	adds	r2, #16
  41255c:	2b07      	cmp	r3, #7
  41255e:	9215      	str	r2, [sp, #84]	; 0x54
  412560:	e886 00a0 	stmia.w	r6, {r5, r7}
  412564:	9314      	str	r3, [sp, #80]	; 0x50
  412566:	ddf1      	ble.n	41254c <_vfiprintf_r+0x7d0>
  412568:	2a00      	cmp	r2, #0
  41256a:	d17d      	bne.n	412668 <_vfiprintf_r+0x8ec>
  41256c:	3c10      	subs	r4, #16
  41256e:	2c10      	cmp	r4, #16
  412570:	f04f 0001 	mov.w	r0, #1
  412574:	4611      	mov	r1, r2
  412576:	464e      	mov	r6, r9
  412578:	dcee      	bgt.n	412558 <_vfiprintf_r+0x7dc>
  41257a:	4422      	add	r2, r4
  41257c:	2807      	cmp	r0, #7
  41257e:	9215      	str	r2, [sp, #84]	; 0x54
  412580:	6035      	str	r5, [r6, #0]
  412582:	6074      	str	r4, [r6, #4]
  412584:	9014      	str	r0, [sp, #80]	; 0x50
  412586:	dd59      	ble.n	41263c <_vfiprintf_r+0x8c0>
  412588:	2a00      	cmp	r2, #0
  41258a:	d14f      	bne.n	41262c <_vfiprintf_r+0x8b0>
  41258c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41258e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  412592:	9d04      	ldr	r5, [sp, #16]
  412594:	45ab      	cmp	fp, r5
  412596:	bfac      	ite	ge
  412598:	445c      	addge	r4, fp
  41259a:	1964      	addlt	r4, r4, r5
  41259c:	9409      	str	r4, [sp, #36]	; 0x24
  41259e:	e05e      	b.n	41265e <_vfiprintf_r+0x8e2>
  4125a0:	4620      	mov	r0, r4
  4125a2:	9902      	ldr	r1, [sp, #8]
  4125a4:	aa13      	add	r2, sp, #76	; 0x4c
  4125a6:	f7ff fbad 	bl	411d04 <__sprint_r.part.0>
  4125aa:	2800      	cmp	r0, #0
  4125ac:	d135      	bne.n	41261a <_vfiprintf_r+0x89e>
  4125ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4125b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4125b2:	f103 0c01 	add.w	ip, r3, #1
  4125b6:	4648      	mov	r0, r9
  4125b8:	e781      	b.n	4124be <_vfiprintf_r+0x742>
  4125ba:	08e0      	lsrs	r0, r4, #3
  4125bc:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  4125c0:	f004 0207 	and.w	r2, r4, #7
  4125c4:	08e9      	lsrs	r1, r5, #3
  4125c6:	3230      	adds	r2, #48	; 0x30
  4125c8:	ea50 0b01 	orrs.w	fp, r0, r1
  4125cc:	461f      	mov	r7, r3
  4125ce:	701a      	strb	r2, [r3, #0]
  4125d0:	4604      	mov	r4, r0
  4125d2:	460d      	mov	r5, r1
  4125d4:	f103 33ff 	add.w	r3, r3, #4294967295
  4125d8:	d1ef      	bne.n	4125ba <_vfiprintf_r+0x83e>
  4125da:	f01a 0f01 	tst.w	sl, #1
  4125de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4125e2:	4639      	mov	r1, r7
  4125e4:	f000 80b9 	beq.w	41275a <_vfiprintf_r+0x9de>
  4125e8:	2a30      	cmp	r2, #48	; 0x30
  4125ea:	f43f acf8 	beq.w	411fde <_vfiprintf_r+0x262>
  4125ee:	461f      	mov	r7, r3
  4125f0:	ebc7 0509 	rsb	r5, r7, r9
  4125f4:	2330      	movs	r3, #48	; 0x30
  4125f6:	9505      	str	r5, [sp, #20]
  4125f8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4125fc:	e4f2      	b.n	411fe4 <_vfiprintf_r+0x268>
  4125fe:	bf00      	nop
  412600:	00419228 	.word	0x00419228
  412604:	00419284 	.word	0x00419284
  412608:	00419294 	.word	0x00419294
  41260c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41260e:	b123      	cbz	r3, 41261a <_vfiprintf_r+0x89e>
  412610:	9806      	ldr	r0, [sp, #24]
  412612:	9902      	ldr	r1, [sp, #8]
  412614:	aa13      	add	r2, sp, #76	; 0x4c
  412616:	f7ff fb75 	bl	411d04 <__sprint_r.part.0>
  41261a:	9c02      	ldr	r4, [sp, #8]
  41261c:	89a3      	ldrh	r3, [r4, #12]
  41261e:	065b      	lsls	r3, r3, #25
  412620:	f53f ac9c 	bmi.w	411f5c <_vfiprintf_r+0x1e0>
  412624:	9809      	ldr	r0, [sp, #36]	; 0x24
  412626:	b031      	add	sp, #196	; 0xc4
  412628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41262c:	9806      	ldr	r0, [sp, #24]
  41262e:	9902      	ldr	r1, [sp, #8]
  412630:	aa13      	add	r2, sp, #76	; 0x4c
  412632:	f7ff fb67 	bl	411d04 <__sprint_r.part.0>
  412636:	2800      	cmp	r0, #0
  412638:	d1ef      	bne.n	41261a <_vfiprintf_r+0x89e>
  41263a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41263c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  41263e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  412642:	9d04      	ldr	r5, [sp, #16]
  412644:	45ab      	cmp	fp, r5
  412646:	bfac      	ite	ge
  412648:	445c      	addge	r4, fp
  41264a:	1964      	addlt	r4, r4, r5
  41264c:	9409      	str	r4, [sp, #36]	; 0x24
  41264e:	b132      	cbz	r2, 41265e <_vfiprintf_r+0x8e2>
  412650:	9806      	ldr	r0, [sp, #24]
  412652:	9902      	ldr	r1, [sp, #8]
  412654:	aa13      	add	r2, sp, #76	; 0x4c
  412656:	f7ff fb55 	bl	411d04 <__sprint_r.part.0>
  41265a:	2800      	cmp	r0, #0
  41265c:	d1dd      	bne.n	41261a <_vfiprintf_r+0x89e>
  41265e:	2000      	movs	r0, #0
  412660:	9014      	str	r0, [sp, #80]	; 0x50
  412662:	464e      	mov	r6, r9
  412664:	f7ff bbbd 	b.w	411de2 <_vfiprintf_r+0x66>
  412668:	4650      	mov	r0, sl
  41266a:	4659      	mov	r1, fp
  41266c:	aa13      	add	r2, sp, #76	; 0x4c
  41266e:	f7ff fb49 	bl	411d04 <__sprint_r.part.0>
  412672:	2800      	cmp	r0, #0
  412674:	d1d1      	bne.n	41261a <_vfiprintf_r+0x89e>
  412676:	9914      	ldr	r1, [sp, #80]	; 0x50
  412678:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41267a:	1c48      	adds	r0, r1, #1
  41267c:	464e      	mov	r6, r9
  41267e:	e768      	b.n	412552 <_vfiprintf_r+0x7d6>
  412680:	2a00      	cmp	r2, #0
  412682:	f040 80fa 	bne.w	41287a <_vfiprintf_r+0xafe>
  412686:	9c05      	ldr	r4, [sp, #20]
  412688:	9720      	str	r7, [sp, #128]	; 0x80
  41268a:	2301      	movs	r3, #1
  41268c:	9421      	str	r4, [sp, #132]	; 0x84
  41268e:	9415      	str	r4, [sp, #84]	; 0x54
  412690:	4622      	mov	r2, r4
  412692:	9314      	str	r3, [sp, #80]	; 0x50
  412694:	464e      	mov	r6, r9
  412696:	3608      	adds	r6, #8
  412698:	e741      	b.n	41251e <_vfiprintf_r+0x7a2>
  41269a:	9d04      	ldr	r5, [sp, #16]
  41269c:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4126a0:	ebcb 0405 	rsb	r4, fp, r5
  4126a4:	2c00      	cmp	r4, #0
  4126a6:	f77f aef7 	ble.w	412498 <_vfiprintf_r+0x71c>
  4126aa:	2c10      	cmp	r4, #16
  4126ac:	4da8      	ldr	r5, [pc, #672]	; (412950 <_vfiprintf_r+0xbd4>)
  4126ae:	f340 8174 	ble.w	41299a <_vfiprintf_r+0xc1e>
  4126b2:	4629      	mov	r1, r5
  4126b4:	f04f 0b10 	mov.w	fp, #16
  4126b8:	4625      	mov	r5, r4
  4126ba:	4664      	mov	r4, ip
  4126bc:	46b4      	mov	ip, r6
  4126be:	460e      	mov	r6, r1
  4126c0:	e006      	b.n	4126d0 <_vfiprintf_r+0x954>
  4126c2:	1c98      	adds	r0, r3, #2
  4126c4:	f10c 0c08 	add.w	ip, ip, #8
  4126c8:	460b      	mov	r3, r1
  4126ca:	3d10      	subs	r5, #16
  4126cc:	2d10      	cmp	r5, #16
  4126ce:	dd0f      	ble.n	4126f0 <_vfiprintf_r+0x974>
  4126d0:	1c59      	adds	r1, r3, #1
  4126d2:	3210      	adds	r2, #16
  4126d4:	2907      	cmp	r1, #7
  4126d6:	9215      	str	r2, [sp, #84]	; 0x54
  4126d8:	e88c 0840 	stmia.w	ip, {r6, fp}
  4126dc:	9114      	str	r1, [sp, #80]	; 0x50
  4126de:	ddf0      	ble.n	4126c2 <_vfiprintf_r+0x946>
  4126e0:	b9ba      	cbnz	r2, 412712 <_vfiprintf_r+0x996>
  4126e2:	3d10      	subs	r5, #16
  4126e4:	2d10      	cmp	r5, #16
  4126e6:	f04f 0001 	mov.w	r0, #1
  4126ea:	4613      	mov	r3, r2
  4126ec:	46cc      	mov	ip, r9
  4126ee:	dcef      	bgt.n	4126d0 <_vfiprintf_r+0x954>
  4126f0:	4633      	mov	r3, r6
  4126f2:	4666      	mov	r6, ip
  4126f4:	46a4      	mov	ip, r4
  4126f6:	462c      	mov	r4, r5
  4126f8:	461d      	mov	r5, r3
  4126fa:	4422      	add	r2, r4
  4126fc:	2807      	cmp	r0, #7
  4126fe:	9215      	str	r2, [sp, #84]	; 0x54
  412700:	6035      	str	r5, [r6, #0]
  412702:	6074      	str	r4, [r6, #4]
  412704:	9014      	str	r0, [sp, #80]	; 0x50
  412706:	f300 80b2 	bgt.w	41286e <_vfiprintf_r+0xaf2>
  41270a:	3608      	adds	r6, #8
  41270c:	1c41      	adds	r1, r0, #1
  41270e:	4603      	mov	r3, r0
  412710:	e6c2      	b.n	412498 <_vfiprintf_r+0x71c>
  412712:	9806      	ldr	r0, [sp, #24]
  412714:	9902      	ldr	r1, [sp, #8]
  412716:	aa13      	add	r2, sp, #76	; 0x4c
  412718:	f7ff faf4 	bl	411d04 <__sprint_r.part.0>
  41271c:	2800      	cmp	r0, #0
  41271e:	f47f af7c 	bne.w	41261a <_vfiprintf_r+0x89e>
  412722:	9b14      	ldr	r3, [sp, #80]	; 0x50
  412724:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412726:	1c58      	adds	r0, r3, #1
  412728:	46cc      	mov	ip, r9
  41272a:	e7ce      	b.n	4126ca <_vfiprintf_r+0x94e>
  41272c:	2a00      	cmp	r2, #0
  41272e:	d17c      	bne.n	41282a <_vfiprintf_r+0xaae>
  412730:	4619      	mov	r1, r3
  412732:	464e      	mov	r6, r9
  412734:	4613      	mov	r3, r2
  412736:	e69c      	b.n	412472 <_vfiprintf_r+0x6f6>
  412738:	2a00      	cmp	r2, #0
  41273a:	f040 8087 	bne.w	41284c <_vfiprintf_r+0xad0>
  41273e:	2101      	movs	r1, #1
  412740:	4613      	mov	r3, r2
  412742:	464e      	mov	r6, r9
  412744:	e6a4      	b.n	412490 <_vfiprintf_r+0x714>
  412746:	464f      	mov	r7, r9
  412748:	e44c      	b.n	411fe4 <_vfiprintf_r+0x268>
  41274a:	2d00      	cmp	r5, #0
  41274c:	bf08      	it	eq
  41274e:	2c0a      	cmpeq	r4, #10
  412750:	d249      	bcs.n	4127e6 <_vfiprintf_r+0xa6a>
  412752:	af30      	add	r7, sp, #192	; 0xc0
  412754:	3430      	adds	r4, #48	; 0x30
  412756:	f807 4d41 	strb.w	r4, [r7, #-65]!
  41275a:	ebc7 0309 	rsb	r3, r7, r9
  41275e:	9305      	str	r3, [sp, #20]
  412760:	e440      	b.n	411fe4 <_vfiprintf_r+0x268>
  412762:	2302      	movs	r3, #2
  412764:	e41b      	b.n	411f9e <_vfiprintf_r+0x222>
  412766:	2a00      	cmp	r2, #0
  412768:	f040 80b2 	bne.w	4128d0 <_vfiprintf_r+0xb54>
  41276c:	4613      	mov	r3, r2
  41276e:	2101      	movs	r1, #1
  412770:	464e      	mov	r6, r9
  412772:	e66d      	b.n	412450 <_vfiprintf_r+0x6d4>
  412774:	4644      	mov	r4, r8
  412776:	f7ff bb5c 	b.w	411e32 <_vfiprintf_r+0xb6>
  41277a:	9806      	ldr	r0, [sp, #24]
  41277c:	9902      	ldr	r1, [sp, #8]
  41277e:	aa13      	add	r2, sp, #76	; 0x4c
  412780:	f7ff fac0 	bl	411d04 <__sprint_r.part.0>
  412784:	2800      	cmp	r0, #0
  412786:	f47f af48 	bne.w	41261a <_vfiprintf_r+0x89e>
  41278a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41278c:	464e      	mov	r6, r9
  41278e:	e6c6      	b.n	41251e <_vfiprintf_r+0x7a2>
  412790:	9d08      	ldr	r5, [sp, #32]
  412792:	682c      	ldr	r4, [r5, #0]
  412794:	3504      	adds	r5, #4
  412796:	9508      	str	r5, [sp, #32]
  412798:	2500      	movs	r5, #0
  41279a:	e400      	b.n	411f9e <_vfiprintf_r+0x222>
  41279c:	9d08      	ldr	r5, [sp, #32]
  41279e:	682c      	ldr	r4, [r5, #0]
  4127a0:	3504      	adds	r5, #4
  4127a2:	9508      	str	r5, [sp, #32]
  4127a4:	2301      	movs	r3, #1
  4127a6:	2500      	movs	r5, #0
  4127a8:	f7ff bbf9 	b.w	411f9e <_vfiprintf_r+0x222>
  4127ac:	9d08      	ldr	r5, [sp, #32]
  4127ae:	682c      	ldr	r4, [r5, #0]
  4127b0:	3504      	adds	r5, #4
  4127b2:	9508      	str	r5, [sp, #32]
  4127b4:	2500      	movs	r5, #0
  4127b6:	e528      	b.n	41220a <_vfiprintf_r+0x48e>
  4127b8:	9d08      	ldr	r5, [sp, #32]
  4127ba:	f8dd b020 	ldr.w	fp, [sp, #32]
  4127be:	682c      	ldr	r4, [r5, #0]
  4127c0:	f10b 0b04 	add.w	fp, fp, #4
  4127c4:	17e5      	asrs	r5, r4, #31
  4127c6:	f8cd b020 	str.w	fp, [sp, #32]
  4127ca:	4622      	mov	r2, r4
  4127cc:	462b      	mov	r3, r5
  4127ce:	e48f      	b.n	4120f0 <_vfiprintf_r+0x374>
  4127d0:	9806      	ldr	r0, [sp, #24]
  4127d2:	9902      	ldr	r1, [sp, #8]
  4127d4:	aa13      	add	r2, sp, #76	; 0x4c
  4127d6:	f7ff fa95 	bl	411d04 <__sprint_r.part.0>
  4127da:	2800      	cmp	r0, #0
  4127dc:	f47f af1d 	bne.w	41261a <_vfiprintf_r+0x89e>
  4127e0:	464e      	mov	r6, r9
  4127e2:	f7ff bb9b 	b.w	411f1c <_vfiprintf_r+0x1a0>
  4127e6:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  4127ea:	9603      	str	r6, [sp, #12]
  4127ec:	465e      	mov	r6, fp
  4127ee:	46e3      	mov	fp, ip
  4127f0:	4620      	mov	r0, r4
  4127f2:	4629      	mov	r1, r5
  4127f4:	220a      	movs	r2, #10
  4127f6:	2300      	movs	r3, #0
  4127f8:	f7fb fe72 	bl	40e4e0 <__aeabi_uldivmod>
  4127fc:	3230      	adds	r2, #48	; 0x30
  4127fe:	7032      	strb	r2, [r6, #0]
  412800:	4620      	mov	r0, r4
  412802:	4629      	mov	r1, r5
  412804:	220a      	movs	r2, #10
  412806:	2300      	movs	r3, #0
  412808:	f7fb fe6a 	bl	40e4e0 <__aeabi_uldivmod>
  41280c:	4604      	mov	r4, r0
  41280e:	460d      	mov	r5, r1
  412810:	ea54 0005 	orrs.w	r0, r4, r5
  412814:	4637      	mov	r7, r6
  412816:	f106 36ff 	add.w	r6, r6, #4294967295
  41281a:	d1e9      	bne.n	4127f0 <_vfiprintf_r+0xa74>
  41281c:	ebc7 0309 	rsb	r3, r7, r9
  412820:	46dc      	mov	ip, fp
  412822:	9e03      	ldr	r6, [sp, #12]
  412824:	9305      	str	r3, [sp, #20]
  412826:	f7ff bbdd 	b.w	411fe4 <_vfiprintf_r+0x268>
  41282a:	9806      	ldr	r0, [sp, #24]
  41282c:	9902      	ldr	r1, [sp, #8]
  41282e:	f8cd c004 	str.w	ip, [sp, #4]
  412832:	aa13      	add	r2, sp, #76	; 0x4c
  412834:	f7ff fa66 	bl	411d04 <__sprint_r.part.0>
  412838:	f8dd c004 	ldr.w	ip, [sp, #4]
  41283c:	2800      	cmp	r0, #0
  41283e:	f47f aeec 	bne.w	41261a <_vfiprintf_r+0x89e>
  412842:	9b14      	ldr	r3, [sp, #80]	; 0x50
  412844:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412846:	1c59      	adds	r1, r3, #1
  412848:	464e      	mov	r6, r9
  41284a:	e612      	b.n	412472 <_vfiprintf_r+0x6f6>
  41284c:	9806      	ldr	r0, [sp, #24]
  41284e:	9902      	ldr	r1, [sp, #8]
  412850:	f8cd c004 	str.w	ip, [sp, #4]
  412854:	aa13      	add	r2, sp, #76	; 0x4c
  412856:	f7ff fa55 	bl	411d04 <__sprint_r.part.0>
  41285a:	f8dd c004 	ldr.w	ip, [sp, #4]
  41285e:	2800      	cmp	r0, #0
  412860:	f47f aedb 	bne.w	41261a <_vfiprintf_r+0x89e>
  412864:	9b14      	ldr	r3, [sp, #80]	; 0x50
  412866:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412868:	1c59      	adds	r1, r3, #1
  41286a:	464e      	mov	r6, r9
  41286c:	e610      	b.n	412490 <_vfiprintf_r+0x714>
  41286e:	2a00      	cmp	r2, #0
  412870:	d156      	bne.n	412920 <_vfiprintf_r+0xba4>
  412872:	2101      	movs	r1, #1
  412874:	4613      	mov	r3, r2
  412876:	464e      	mov	r6, r9
  412878:	e60e      	b.n	412498 <_vfiprintf_r+0x71c>
  41287a:	9806      	ldr	r0, [sp, #24]
  41287c:	9902      	ldr	r1, [sp, #8]
  41287e:	aa13      	add	r2, sp, #76	; 0x4c
  412880:	f7ff fa40 	bl	411d04 <__sprint_r.part.0>
  412884:	2800      	cmp	r0, #0
  412886:	f47f aec8 	bne.w	41261a <_vfiprintf_r+0x89e>
  41288a:	9914      	ldr	r1, [sp, #80]	; 0x50
  41288c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41288e:	3101      	adds	r1, #1
  412890:	464e      	mov	r6, r9
  412892:	e636      	b.n	412502 <_vfiprintf_r+0x786>
  412894:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  412898:	4264      	negs	r4, r4
  41289a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  41289e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  4128a2:	f8cd b01c 	str.w	fp, [sp, #28]
  4128a6:	f8cd c014 	str.w	ip, [sp, #20]
  4128aa:	2301      	movs	r3, #1
  4128ac:	f7ff bb7f 	b.w	411fae <_vfiprintf_r+0x232>
  4128b0:	f01a 0f10 	tst.w	sl, #16
  4128b4:	d11d      	bne.n	4128f2 <_vfiprintf_r+0xb76>
  4128b6:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4128ba:	d059      	beq.n	412970 <_vfiprintf_r+0xbf4>
  4128bc:	9d08      	ldr	r5, [sp, #32]
  4128be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4128c2:	682b      	ldr	r3, [r5, #0]
  4128c4:	3504      	adds	r5, #4
  4128c6:	9508      	str	r5, [sp, #32]
  4128c8:	f8a3 b000 	strh.w	fp, [r3]
  4128cc:	f7ff ba89 	b.w	411de2 <_vfiprintf_r+0x66>
  4128d0:	9806      	ldr	r0, [sp, #24]
  4128d2:	9902      	ldr	r1, [sp, #8]
  4128d4:	f8cd c004 	str.w	ip, [sp, #4]
  4128d8:	aa13      	add	r2, sp, #76	; 0x4c
  4128da:	f7ff fa13 	bl	411d04 <__sprint_r.part.0>
  4128de:	f8dd c004 	ldr.w	ip, [sp, #4]
  4128e2:	2800      	cmp	r0, #0
  4128e4:	f47f ae99 	bne.w	41261a <_vfiprintf_r+0x89e>
  4128e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4128ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4128ec:	1c59      	adds	r1, r3, #1
  4128ee:	464e      	mov	r6, r9
  4128f0:	e5ae      	b.n	412450 <_vfiprintf_r+0x6d4>
  4128f2:	f8dd b020 	ldr.w	fp, [sp, #32]
  4128f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4128f8:	f8db 3000 	ldr.w	r3, [fp]
  4128fc:	f10b 0b04 	add.w	fp, fp, #4
  412900:	f8cd b020 	str.w	fp, [sp, #32]
  412904:	601c      	str	r4, [r3, #0]
  412906:	f7ff ba6c 	b.w	411de2 <_vfiprintf_r+0x66>
  41290a:	9408      	str	r4, [sp, #32]
  41290c:	f7fc ff84 	bl	40f818 <strlen>
  412910:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  412914:	9005      	str	r0, [sp, #20]
  412916:	9407      	str	r4, [sp, #28]
  412918:	f04f 0c00 	mov.w	ip, #0
  41291c:	f7ff bb62 	b.w	411fe4 <_vfiprintf_r+0x268>
  412920:	9806      	ldr	r0, [sp, #24]
  412922:	9902      	ldr	r1, [sp, #8]
  412924:	f8cd c004 	str.w	ip, [sp, #4]
  412928:	aa13      	add	r2, sp, #76	; 0x4c
  41292a:	f7ff f9eb 	bl	411d04 <__sprint_r.part.0>
  41292e:	f8dd c004 	ldr.w	ip, [sp, #4]
  412932:	2800      	cmp	r0, #0
  412934:	f47f ae71 	bne.w	41261a <_vfiprintf_r+0x89e>
  412938:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41293a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41293c:	1c59      	adds	r1, r3, #1
  41293e:	464e      	mov	r6, r9
  412940:	e5aa      	b.n	412498 <_vfiprintf_r+0x71c>
  412942:	9b14      	ldr	r3, [sp, #80]	; 0x50
  412944:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412946:	4d03      	ldr	r5, [pc, #12]	; (412954 <_vfiprintf_r+0xbd8>)
  412948:	3301      	adds	r3, #1
  41294a:	f7ff bb9b 	b.w	412084 <_vfiprintf_r+0x308>
  41294e:	bf00      	nop
  412950:	00419284 	.word	0x00419284
  412954:	00419294 	.word	0x00419294
  412958:	f1bc 0f06 	cmp.w	ip, #6
  41295c:	bf34      	ite	cc
  41295e:	4663      	movcc	r3, ip
  412960:	2306      	movcs	r3, #6
  412962:	9408      	str	r4, [sp, #32]
  412964:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  412968:	9305      	str	r3, [sp, #20]
  41296a:	9403      	str	r4, [sp, #12]
  41296c:	4f16      	ldr	r7, [pc, #88]	; (4129c8 <_vfiprintf_r+0xc4c>)
  41296e:	e470      	b.n	412252 <_vfiprintf_r+0x4d6>
  412970:	9c08      	ldr	r4, [sp, #32]
  412972:	9d09      	ldr	r5, [sp, #36]	; 0x24
  412974:	6823      	ldr	r3, [r4, #0]
  412976:	3404      	adds	r4, #4
  412978:	9408      	str	r4, [sp, #32]
  41297a:	601d      	str	r5, [r3, #0]
  41297c:	f7ff ba31 	b.w	411de2 <_vfiprintf_r+0x66>
  412980:	9814      	ldr	r0, [sp, #80]	; 0x50
  412982:	4d12      	ldr	r5, [pc, #72]	; (4129cc <_vfiprintf_r+0xc50>)
  412984:	3001      	adds	r0, #1
  412986:	e5f8      	b.n	41257a <_vfiprintf_r+0x7fe>
  412988:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  41298c:	f8cd c014 	str.w	ip, [sp, #20]
  412990:	9507      	str	r5, [sp, #28]
  412992:	9408      	str	r4, [sp, #32]
  412994:	4684      	mov	ip, r0
  412996:	f7ff bb25 	b.w	411fe4 <_vfiprintf_r+0x268>
  41299a:	4608      	mov	r0, r1
  41299c:	e6ad      	b.n	4126fa <_vfiprintf_r+0x97e>
  41299e:	46a0      	mov	r8, r4
  4129a0:	2500      	movs	r5, #0
  4129a2:	f7ff ba5a 	b.w	411e5a <_vfiprintf_r+0xde>
  4129a6:	f8dd b020 	ldr.w	fp, [sp, #32]
  4129aa:	f898 3001 	ldrb.w	r3, [r8, #1]
  4129ae:	f8db 5000 	ldr.w	r5, [fp]
  4129b2:	f10b 0204 	add.w	r2, fp, #4
  4129b6:	2d00      	cmp	r5, #0
  4129b8:	9208      	str	r2, [sp, #32]
  4129ba:	46a0      	mov	r8, r4
  4129bc:	f6bf aa4b 	bge.w	411e56 <_vfiprintf_r+0xda>
  4129c0:	f04f 35ff 	mov.w	r5, #4294967295
  4129c4:	f7ff ba47 	b.w	411e56 <_vfiprintf_r+0xda>
  4129c8:	0041923c 	.word	0x0041923c
  4129cc:	00419294 	.word	0x00419294

004129d0 <__sbprintf>:
  4129d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4129d4:	460c      	mov	r4, r1
  4129d6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4129da:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  4129de:	69e7      	ldr	r7, [r4, #28]
  4129e0:	6e49      	ldr	r1, [r1, #100]	; 0x64
  4129e2:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  4129e6:	9119      	str	r1, [sp, #100]	; 0x64
  4129e8:	ad1a      	add	r5, sp, #104	; 0x68
  4129ea:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4129ee:	f04f 0e00 	mov.w	lr, #0
  4129f2:	9707      	str	r7, [sp, #28]
  4129f4:	f029 0902 	bic.w	r9, r9, #2
  4129f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4129fa:	9500      	str	r5, [sp, #0]
  4129fc:	4669      	mov	r1, sp
  4129fe:	9504      	str	r5, [sp, #16]
  412a00:	9602      	str	r6, [sp, #8]
  412a02:	9605      	str	r6, [sp, #20]
  412a04:	f8ad 900c 	strh.w	r9, [sp, #12]
  412a08:	f8ad 800e 	strh.w	r8, [sp, #14]
  412a0c:	9709      	str	r7, [sp, #36]	; 0x24
  412a0e:	f8cd e018 	str.w	lr, [sp, #24]
  412a12:	4606      	mov	r6, r0
  412a14:	f7ff f9b2 	bl	411d7c <_vfiprintf_r>
  412a18:	1e05      	subs	r5, r0, #0
  412a1a:	db07      	blt.n	412a2c <__sbprintf+0x5c>
  412a1c:	4630      	mov	r0, r6
  412a1e:	4669      	mov	r1, sp
  412a20:	f001 f908 	bl	413c34 <_fflush_r>
  412a24:	2800      	cmp	r0, #0
  412a26:	bf18      	it	ne
  412a28:	f04f 35ff 	movne.w	r5, #4294967295
  412a2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  412a30:	065b      	lsls	r3, r3, #25
  412a32:	d503      	bpl.n	412a3c <__sbprintf+0x6c>
  412a34:	89a3      	ldrh	r3, [r4, #12]
  412a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  412a3a:	81a3      	strh	r3, [r4, #12]
  412a3c:	4628      	mov	r0, r5
  412a3e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  412a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412a46:	bf00      	nop

00412a48 <_write_r>:
  412a48:	b570      	push	{r4, r5, r6, lr}
  412a4a:	4c08      	ldr	r4, [pc, #32]	; (412a6c <_write_r+0x24>)
  412a4c:	4606      	mov	r6, r0
  412a4e:	2500      	movs	r5, #0
  412a50:	4608      	mov	r0, r1
  412a52:	4611      	mov	r1, r2
  412a54:	461a      	mov	r2, r3
  412a56:	6025      	str	r5, [r4, #0]
  412a58:	f7f0 fd52 	bl	403500 <_write>
  412a5c:	1c43      	adds	r3, r0, #1
  412a5e:	d000      	beq.n	412a62 <_write_r+0x1a>
  412a60:	bd70      	pop	{r4, r5, r6, pc}
  412a62:	6823      	ldr	r3, [r4, #0]
  412a64:	2b00      	cmp	r3, #0
  412a66:	d0fb      	beq.n	412a60 <_write_r+0x18>
  412a68:	6033      	str	r3, [r6, #0]
  412a6a:	bd70      	pop	{r4, r5, r6, pc}
  412a6c:	20003498 	.word	0x20003498

00412a70 <__swsetup_r>:
  412a70:	4b2f      	ldr	r3, [pc, #188]	; (412b30 <__swsetup_r+0xc0>)
  412a72:	681b      	ldr	r3, [r3, #0]
  412a74:	b570      	push	{r4, r5, r6, lr}
  412a76:	4606      	mov	r6, r0
  412a78:	460c      	mov	r4, r1
  412a7a:	b113      	cbz	r3, 412a82 <__swsetup_r+0x12>
  412a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  412a7e:	2a00      	cmp	r2, #0
  412a80:	d036      	beq.n	412af0 <__swsetup_r+0x80>
  412a82:	89a5      	ldrh	r5, [r4, #12]
  412a84:	b2ab      	uxth	r3, r5
  412a86:	0719      	lsls	r1, r3, #28
  412a88:	d50c      	bpl.n	412aa4 <__swsetup_r+0x34>
  412a8a:	6922      	ldr	r2, [r4, #16]
  412a8c:	b1aa      	cbz	r2, 412aba <__swsetup_r+0x4a>
  412a8e:	f013 0101 	ands.w	r1, r3, #1
  412a92:	d01e      	beq.n	412ad2 <__swsetup_r+0x62>
  412a94:	6963      	ldr	r3, [r4, #20]
  412a96:	2100      	movs	r1, #0
  412a98:	425b      	negs	r3, r3
  412a9a:	61a3      	str	r3, [r4, #24]
  412a9c:	60a1      	str	r1, [r4, #8]
  412a9e:	b1f2      	cbz	r2, 412ade <__swsetup_r+0x6e>
  412aa0:	2000      	movs	r0, #0
  412aa2:	bd70      	pop	{r4, r5, r6, pc}
  412aa4:	06da      	lsls	r2, r3, #27
  412aa6:	d53b      	bpl.n	412b20 <__swsetup_r+0xb0>
  412aa8:	075b      	lsls	r3, r3, #29
  412aaa:	d425      	bmi.n	412af8 <__swsetup_r+0x88>
  412aac:	6922      	ldr	r2, [r4, #16]
  412aae:	f045 0308 	orr.w	r3, r5, #8
  412ab2:	81a3      	strh	r3, [r4, #12]
  412ab4:	b29b      	uxth	r3, r3
  412ab6:	2a00      	cmp	r2, #0
  412ab8:	d1e9      	bne.n	412a8e <__swsetup_r+0x1e>
  412aba:	f403 7120 	and.w	r1, r3, #640	; 0x280
  412abe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  412ac2:	d0e4      	beq.n	412a8e <__swsetup_r+0x1e>
  412ac4:	4630      	mov	r0, r6
  412ac6:	4621      	mov	r1, r4
  412ac8:	f001 fcc2 	bl	414450 <__smakebuf_r>
  412acc:	89a3      	ldrh	r3, [r4, #12]
  412ace:	6922      	ldr	r2, [r4, #16]
  412ad0:	e7dd      	b.n	412a8e <__swsetup_r+0x1e>
  412ad2:	0798      	lsls	r0, r3, #30
  412ad4:	bf58      	it	pl
  412ad6:	6961      	ldrpl	r1, [r4, #20]
  412ad8:	60a1      	str	r1, [r4, #8]
  412ada:	2a00      	cmp	r2, #0
  412adc:	d1e0      	bne.n	412aa0 <__swsetup_r+0x30>
  412ade:	89a3      	ldrh	r3, [r4, #12]
  412ae0:	061a      	lsls	r2, r3, #24
  412ae2:	d5dd      	bpl.n	412aa0 <__swsetup_r+0x30>
  412ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  412ae8:	81a3      	strh	r3, [r4, #12]
  412aea:	f04f 30ff 	mov.w	r0, #4294967295
  412aee:	bd70      	pop	{r4, r5, r6, pc}
  412af0:	4618      	mov	r0, r3
  412af2:	f001 f8bb 	bl	413c6c <__sinit>
  412af6:	e7c4      	b.n	412a82 <__swsetup_r+0x12>
  412af8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  412afa:	b149      	cbz	r1, 412b10 <__swsetup_r+0xa0>
  412afc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  412b00:	4299      	cmp	r1, r3
  412b02:	d003      	beq.n	412b0c <__swsetup_r+0x9c>
  412b04:	4630      	mov	r0, r6
  412b06:	f001 f9f3 	bl	413ef0 <_free_r>
  412b0a:	89a5      	ldrh	r5, [r4, #12]
  412b0c:	2300      	movs	r3, #0
  412b0e:	6323      	str	r3, [r4, #48]	; 0x30
  412b10:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  412b14:	2300      	movs	r3, #0
  412b16:	6922      	ldr	r2, [r4, #16]
  412b18:	6063      	str	r3, [r4, #4]
  412b1a:	b2ad      	uxth	r5, r5
  412b1c:	6022      	str	r2, [r4, #0]
  412b1e:	e7c6      	b.n	412aae <__swsetup_r+0x3e>
  412b20:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  412b24:	2309      	movs	r3, #9
  412b26:	6033      	str	r3, [r6, #0]
  412b28:	f04f 30ff 	mov.w	r0, #4294967295
  412b2c:	81a5      	strh	r5, [r4, #12]
  412b2e:	bd70      	pop	{r4, r5, r6, pc}
  412b30:	20000918 	.word	0x20000918

00412b34 <register_fini>:
  412b34:	4b02      	ldr	r3, [pc, #8]	; (412b40 <register_fini+0xc>)
  412b36:	b113      	cbz	r3, 412b3e <register_fini+0xa>
  412b38:	4802      	ldr	r0, [pc, #8]	; (412b44 <register_fini+0x10>)
  412b3a:	f000 b805 	b.w	412b48 <atexit>
  412b3e:	4770      	bx	lr
  412b40:	00000000 	.word	0x00000000
  412b44:	00413d69 	.word	0x00413d69

00412b48 <atexit>:
  412b48:	4601      	mov	r1, r0
  412b4a:	2000      	movs	r0, #0
  412b4c:	4602      	mov	r2, r0
  412b4e:	4603      	mov	r3, r0
  412b50:	f004 b8da 	b.w	416d08 <__register_exitproc>

00412b54 <_close_r>:
  412b54:	b538      	push	{r3, r4, r5, lr}
  412b56:	4c07      	ldr	r4, [pc, #28]	; (412b74 <_close_r+0x20>)
  412b58:	2300      	movs	r3, #0
  412b5a:	4605      	mov	r5, r0
  412b5c:	4608      	mov	r0, r1
  412b5e:	6023      	str	r3, [r4, #0]
  412b60:	f7fb fb96 	bl	40e290 <_close>
  412b64:	1c43      	adds	r3, r0, #1
  412b66:	d000      	beq.n	412b6a <_close_r+0x16>
  412b68:	bd38      	pop	{r3, r4, r5, pc}
  412b6a:	6823      	ldr	r3, [r4, #0]
  412b6c:	2b00      	cmp	r3, #0
  412b6e:	d0fb      	beq.n	412b68 <_close_r+0x14>
  412b70:	602b      	str	r3, [r5, #0]
  412b72:	bd38      	pop	{r3, r4, r5, pc}
  412b74:	20003498 	.word	0x20003498

00412b78 <quorem>:
  412b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412b7c:	6903      	ldr	r3, [r0, #16]
  412b7e:	690d      	ldr	r5, [r1, #16]
  412b80:	429d      	cmp	r5, r3
  412b82:	b083      	sub	sp, #12
  412b84:	4683      	mov	fp, r0
  412b86:	f300 808b 	bgt.w	412ca0 <quorem+0x128>
  412b8a:	3d01      	subs	r5, #1
  412b8c:	f101 0414 	add.w	r4, r1, #20
  412b90:	f100 0a14 	add.w	sl, r0, #20
  412b94:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  412b98:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  412b9c:	3201      	adds	r2, #1
  412b9e:	fbb3 f8f2 	udiv	r8, r3, r2
  412ba2:	00aa      	lsls	r2, r5, #2
  412ba4:	4691      	mov	r9, r2
  412ba6:	9200      	str	r2, [sp, #0]
  412ba8:	4452      	add	r2, sl
  412baa:	44a1      	add	r9, r4
  412bac:	9201      	str	r2, [sp, #4]
  412bae:	f1b8 0f00 	cmp.w	r8, #0
  412bb2:	d03d      	beq.n	412c30 <quorem+0xb8>
  412bb4:	f04f 0e00 	mov.w	lr, #0
  412bb8:	4670      	mov	r0, lr
  412bba:	4622      	mov	r2, r4
  412bbc:	4653      	mov	r3, sl
  412bbe:	468c      	mov	ip, r1
  412bc0:	f852 6b04 	ldr.w	r6, [r2], #4
  412bc4:	6819      	ldr	r1, [r3, #0]
  412bc6:	b2b7      	uxth	r7, r6
  412bc8:	0c36      	lsrs	r6, r6, #16
  412bca:	fb07 ee08 	mla	lr, r7, r8, lr
  412bce:	fb06 f608 	mul.w	r6, r6, r8
  412bd2:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  412bd6:	fa1f f78e 	uxth.w	r7, lr
  412bda:	1bc7      	subs	r7, r0, r7
  412bdc:	b2b0      	uxth	r0, r6
  412bde:	fa17 f781 	uxtah	r7, r7, r1
  412be2:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  412be6:	eb00 4027 	add.w	r0, r0, r7, asr #16
  412bea:	b2bf      	uxth	r7, r7
  412bec:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  412bf0:	4591      	cmp	r9, r2
  412bf2:	f843 7b04 	str.w	r7, [r3], #4
  412bf6:	ea4f 4020 	mov.w	r0, r0, asr #16
  412bfa:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  412bfe:	d2df      	bcs.n	412bc0 <quorem+0x48>
  412c00:	9a00      	ldr	r2, [sp, #0]
  412c02:	f85a 3002 	ldr.w	r3, [sl, r2]
  412c06:	4661      	mov	r1, ip
  412c08:	b993      	cbnz	r3, 412c30 <quorem+0xb8>
  412c0a:	9a01      	ldr	r2, [sp, #4]
  412c0c:	1f13      	subs	r3, r2, #4
  412c0e:	459a      	cmp	sl, r3
  412c10:	d20c      	bcs.n	412c2c <quorem+0xb4>
  412c12:	f852 3c04 	ldr.w	r3, [r2, #-4]
  412c16:	b94b      	cbnz	r3, 412c2c <quorem+0xb4>
  412c18:	f1a2 0308 	sub.w	r3, r2, #8
  412c1c:	e002      	b.n	412c24 <quorem+0xac>
  412c1e:	681a      	ldr	r2, [r3, #0]
  412c20:	3b04      	subs	r3, #4
  412c22:	b91a      	cbnz	r2, 412c2c <quorem+0xb4>
  412c24:	459a      	cmp	sl, r3
  412c26:	f105 35ff 	add.w	r5, r5, #4294967295
  412c2a:	d3f8      	bcc.n	412c1e <quorem+0xa6>
  412c2c:	f8cb 5010 	str.w	r5, [fp, #16]
  412c30:	4658      	mov	r0, fp
  412c32:	f001 ffd3 	bl	414bdc <__mcmp>
  412c36:	2800      	cmp	r0, #0
  412c38:	db2e      	blt.n	412c98 <quorem+0x120>
  412c3a:	f108 0801 	add.w	r8, r8, #1
  412c3e:	4653      	mov	r3, sl
  412c40:	2200      	movs	r2, #0
  412c42:	f854 6b04 	ldr.w	r6, [r4], #4
  412c46:	6818      	ldr	r0, [r3, #0]
  412c48:	b2b1      	uxth	r1, r6
  412c4a:	1a52      	subs	r2, r2, r1
  412c4c:	0c36      	lsrs	r6, r6, #16
  412c4e:	fa12 f180 	uxtah	r1, r2, r0
  412c52:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  412c56:	eb02 4221 	add.w	r2, r2, r1, asr #16
  412c5a:	b289      	uxth	r1, r1
  412c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  412c60:	45a1      	cmp	r9, r4
  412c62:	f843 1b04 	str.w	r1, [r3], #4
  412c66:	ea4f 4222 	mov.w	r2, r2, asr #16
  412c6a:	d2ea      	bcs.n	412c42 <quorem+0xca>
  412c6c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  412c70:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  412c74:	b982      	cbnz	r2, 412c98 <quorem+0x120>
  412c76:	1f1a      	subs	r2, r3, #4
  412c78:	4592      	cmp	sl, r2
  412c7a:	d20b      	bcs.n	412c94 <quorem+0x11c>
  412c7c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  412c80:	b942      	cbnz	r2, 412c94 <quorem+0x11c>
  412c82:	3b08      	subs	r3, #8
  412c84:	e002      	b.n	412c8c <quorem+0x114>
  412c86:	681a      	ldr	r2, [r3, #0]
  412c88:	3b04      	subs	r3, #4
  412c8a:	b91a      	cbnz	r2, 412c94 <quorem+0x11c>
  412c8c:	459a      	cmp	sl, r3
  412c8e:	f105 35ff 	add.w	r5, r5, #4294967295
  412c92:	d3f8      	bcc.n	412c86 <quorem+0x10e>
  412c94:	f8cb 5010 	str.w	r5, [fp, #16]
  412c98:	4640      	mov	r0, r8
  412c9a:	b003      	add	sp, #12
  412c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412ca0:	2000      	movs	r0, #0
  412ca2:	b003      	add	sp, #12
  412ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412ca8 <_dtoa_r>:
  412ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412cac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  412cae:	b09b      	sub	sp, #108	; 0x6c
  412cb0:	4604      	mov	r4, r0
  412cb2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  412cb4:	4692      	mov	sl, r2
  412cb6:	469b      	mov	fp, r3
  412cb8:	b149      	cbz	r1, 412cce <_dtoa_r+0x26>
  412cba:	6c43      	ldr	r3, [r0, #68]	; 0x44
  412cbc:	604b      	str	r3, [r1, #4]
  412cbe:	2201      	movs	r2, #1
  412cc0:	fa02 f303 	lsl.w	r3, r2, r3
  412cc4:	608b      	str	r3, [r1, #8]
  412cc6:	f001 fd45 	bl	414754 <_Bfree>
  412cca:	2300      	movs	r3, #0
  412ccc:	6423      	str	r3, [r4, #64]	; 0x40
  412cce:	f1bb 0f00 	cmp.w	fp, #0
  412cd2:	46d9      	mov	r9, fp
  412cd4:	db33      	blt.n	412d3e <_dtoa_r+0x96>
  412cd6:	2300      	movs	r3, #0
  412cd8:	602b      	str	r3, [r5, #0]
  412cda:	4ba5      	ldr	r3, [pc, #660]	; (412f70 <_dtoa_r+0x2c8>)
  412cdc:	461a      	mov	r2, r3
  412cde:	ea09 0303 	and.w	r3, r9, r3
  412ce2:	4293      	cmp	r3, r2
  412ce4:	d014      	beq.n	412d10 <_dtoa_r+0x68>
  412ce6:	4650      	mov	r0, sl
  412ce8:	4659      	mov	r1, fp
  412cea:	2200      	movs	r2, #0
  412cec:	2300      	movs	r3, #0
  412cee:	f005 f8cf 	bl	417e90 <__aeabi_dcmpeq>
  412cf2:	4680      	mov	r8, r0
  412cf4:	b348      	cbz	r0, 412d4a <_dtoa_r+0xa2>
  412cf6:	9e26      	ldr	r6, [sp, #152]	; 0x98
  412cf8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  412cfa:	2301      	movs	r3, #1
  412cfc:	6033      	str	r3, [r6, #0]
  412cfe:	2d00      	cmp	r5, #0
  412d00:	f000 80c9 	beq.w	412e96 <_dtoa_r+0x1ee>
  412d04:	489b      	ldr	r0, [pc, #620]	; (412f74 <_dtoa_r+0x2cc>)
  412d06:	6028      	str	r0, [r5, #0]
  412d08:	3801      	subs	r0, #1
  412d0a:	b01b      	add	sp, #108	; 0x6c
  412d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412d10:	9d26      	ldr	r5, [sp, #152]	; 0x98
  412d12:	f242 730f 	movw	r3, #9999	; 0x270f
  412d16:	602b      	str	r3, [r5, #0]
  412d18:	f1ba 0f00 	cmp.w	sl, #0
  412d1c:	f000 80a4 	beq.w	412e68 <_dtoa_r+0x1c0>
  412d20:	4895      	ldr	r0, [pc, #596]	; (412f78 <_dtoa_r+0x2d0>)
  412d22:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  412d24:	2e00      	cmp	r6, #0
  412d26:	d0f0      	beq.n	412d0a <_dtoa_r+0x62>
  412d28:	78c3      	ldrb	r3, [r0, #3]
  412d2a:	2b00      	cmp	r3, #0
  412d2c:	f000 80b5 	beq.w	412e9a <_dtoa_r+0x1f2>
  412d30:	f100 0308 	add.w	r3, r0, #8
  412d34:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  412d36:	602b      	str	r3, [r5, #0]
  412d38:	b01b      	add	sp, #108	; 0x6c
  412d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412d3e:	2301      	movs	r3, #1
  412d40:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  412d44:	602b      	str	r3, [r5, #0]
  412d46:	46cb      	mov	fp, r9
  412d48:	e7c7      	b.n	412cda <_dtoa_r+0x32>
  412d4a:	aa19      	add	r2, sp, #100	; 0x64
  412d4c:	ab18      	add	r3, sp, #96	; 0x60
  412d4e:	e88d 000c 	stmia.w	sp, {r2, r3}
  412d52:	4620      	mov	r0, r4
  412d54:	4652      	mov	r2, sl
  412d56:	465b      	mov	r3, fp
  412d58:	f002 f848 	bl	414dec <__d2b>
  412d5c:	ea5f 5519 	movs.w	r5, r9, lsr #20
  412d60:	900a      	str	r0, [sp, #40]	; 0x28
  412d62:	f040 808a 	bne.w	412e7a <_dtoa_r+0x1d2>
  412d66:	9f18      	ldr	r7, [sp, #96]	; 0x60
  412d68:	9d19      	ldr	r5, [sp, #100]	; 0x64
  412d6a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  412d6e:	443d      	add	r5, r7
  412d70:	429d      	cmp	r5, r3
  412d72:	f2c0 8294 	blt.w	41329e <_dtoa_r+0x5f6>
  412d76:	331f      	adds	r3, #31
  412d78:	f205 4212 	addw	r2, r5, #1042	; 0x412
  412d7c:	1b5b      	subs	r3, r3, r5
  412d7e:	fa09 f303 	lsl.w	r3, r9, r3
  412d82:	fa2a f202 	lsr.w	r2, sl, r2
  412d86:	ea43 0002 	orr.w	r0, r3, r2
  412d8a:	f004 fda3 	bl	4178d4 <__aeabi_ui2d>
  412d8e:	2601      	movs	r6, #1
  412d90:	3d01      	subs	r5, #1
  412d92:	46b8      	mov	r8, r7
  412d94:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  412d98:	9616      	str	r6, [sp, #88]	; 0x58
  412d9a:	2200      	movs	r2, #0
  412d9c:	4b77      	ldr	r3, [pc, #476]	; (412f7c <_dtoa_r+0x2d4>)
  412d9e:	f004 fc5b 	bl	417658 <__aeabi_dsub>
  412da2:	a36d      	add	r3, pc, #436	; (adr r3, 412f58 <_dtoa_r+0x2b0>)
  412da4:	e9d3 2300 	ldrd	r2, r3, [r3]
  412da8:	f004 fe0a 	bl	4179c0 <__aeabi_dmul>
  412dac:	a36c      	add	r3, pc, #432	; (adr r3, 412f60 <_dtoa_r+0x2b8>)
  412dae:	e9d3 2300 	ldrd	r2, r3, [r3]
  412db2:	f004 fc53 	bl	41765c <__adddf3>
  412db6:	4606      	mov	r6, r0
  412db8:	4628      	mov	r0, r5
  412dba:	460f      	mov	r7, r1
  412dbc:	f004 fd9a 	bl	4178f4 <__aeabi_i2d>
  412dc0:	a369      	add	r3, pc, #420	; (adr r3, 412f68 <_dtoa_r+0x2c0>)
  412dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  412dc6:	f004 fdfb 	bl	4179c0 <__aeabi_dmul>
  412dca:	4602      	mov	r2, r0
  412dcc:	460b      	mov	r3, r1
  412dce:	4630      	mov	r0, r6
  412dd0:	4639      	mov	r1, r7
  412dd2:	f004 fc43 	bl	41765c <__adddf3>
  412dd6:	4606      	mov	r6, r0
  412dd8:	460f      	mov	r7, r1
  412dda:	f005 f88b 	bl	417ef4 <__aeabi_d2iz>
  412dde:	4639      	mov	r1, r7
  412de0:	9007      	str	r0, [sp, #28]
  412de2:	2200      	movs	r2, #0
  412de4:	4630      	mov	r0, r6
  412de6:	2300      	movs	r3, #0
  412de8:	f005 f85c 	bl	417ea4 <__aeabi_dcmplt>
  412dec:	2800      	cmp	r0, #0
  412dee:	f040 8228 	bne.w	413242 <_dtoa_r+0x59a>
  412df2:	9e07      	ldr	r6, [sp, #28]
  412df4:	2e16      	cmp	r6, #22
  412df6:	f200 8221 	bhi.w	41323c <_dtoa_r+0x594>
  412dfa:	4b61      	ldr	r3, [pc, #388]	; (412f80 <_dtoa_r+0x2d8>)
  412dfc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  412e00:	e9d3 0100 	ldrd	r0, r1, [r3]
  412e04:	4652      	mov	r2, sl
  412e06:	465b      	mov	r3, fp
  412e08:	f005 f86a 	bl	417ee0 <__aeabi_dcmpgt>
  412e0c:	2800      	cmp	r0, #0
  412e0e:	f000 824b 	beq.w	4132a8 <_dtoa_r+0x600>
  412e12:	3e01      	subs	r6, #1
  412e14:	9607      	str	r6, [sp, #28]
  412e16:	2600      	movs	r6, #0
  412e18:	960e      	str	r6, [sp, #56]	; 0x38
  412e1a:	ebc5 0508 	rsb	r5, r5, r8
  412e1e:	3d01      	subs	r5, #1
  412e20:	9506      	str	r5, [sp, #24]
  412e22:	f100 8225 	bmi.w	413270 <_dtoa_r+0x5c8>
  412e26:	2500      	movs	r5, #0
  412e28:	9508      	str	r5, [sp, #32]
  412e2a:	9e07      	ldr	r6, [sp, #28]
  412e2c:	2e00      	cmp	r6, #0
  412e2e:	f2c0 8216 	blt.w	41325e <_dtoa_r+0x5b6>
  412e32:	9d06      	ldr	r5, [sp, #24]
  412e34:	960d      	str	r6, [sp, #52]	; 0x34
  412e36:	4435      	add	r5, r6
  412e38:	2600      	movs	r6, #0
  412e3a:	9506      	str	r5, [sp, #24]
  412e3c:	960c      	str	r6, [sp, #48]	; 0x30
  412e3e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  412e40:	2d09      	cmp	r5, #9
  412e42:	d82c      	bhi.n	412e9e <_dtoa_r+0x1f6>
  412e44:	2d05      	cmp	r5, #5
  412e46:	bfc4      	itt	gt
  412e48:	3d04      	subgt	r5, #4
  412e4a:	9524      	strgt	r5, [sp, #144]	; 0x90
  412e4c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  412e4e:	f1a6 0302 	sub.w	r3, r6, #2
  412e52:	bfcc      	ite	gt
  412e54:	2500      	movgt	r5, #0
  412e56:	2501      	movle	r5, #1
  412e58:	2b03      	cmp	r3, #3
  412e5a:	d822      	bhi.n	412ea2 <_dtoa_r+0x1fa>
  412e5c:	e8df f013 	tbh	[pc, r3, lsl #1]
  412e60:	029e03b7 	.word	0x029e03b7
  412e64:	049a03c0 	.word	0x049a03c0
  412e68:	4a46      	ldr	r2, [pc, #280]	; (412f84 <_dtoa_r+0x2dc>)
  412e6a:	4b43      	ldr	r3, [pc, #268]	; (412f78 <_dtoa_r+0x2d0>)
  412e6c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  412e70:	2800      	cmp	r0, #0
  412e72:	bf0c      	ite	eq
  412e74:	4610      	moveq	r0, r2
  412e76:	4618      	movne	r0, r3
  412e78:	e753      	b.n	412d22 <_dtoa_r+0x7a>
  412e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  412e7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  412e82:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  412e86:	4650      	mov	r0, sl
  412e88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  412e8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  412e90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  412e94:	e781      	b.n	412d9a <_dtoa_r+0xf2>
  412e96:	483c      	ldr	r0, [pc, #240]	; (412f88 <_dtoa_r+0x2e0>)
  412e98:	e737      	b.n	412d0a <_dtoa_r+0x62>
  412e9a:	1cc3      	adds	r3, r0, #3
  412e9c:	e74a      	b.n	412d34 <_dtoa_r+0x8c>
  412e9e:	2500      	movs	r5, #0
  412ea0:	9524      	str	r5, [sp, #144]	; 0x90
  412ea2:	2500      	movs	r5, #0
  412ea4:	6465      	str	r5, [r4, #68]	; 0x44
  412ea6:	4629      	mov	r1, r5
  412ea8:	4620      	mov	r0, r4
  412eaa:	f001 fc2d 	bl	414708 <_Balloc>
  412eae:	f04f 39ff 	mov.w	r9, #4294967295
  412eb2:	2601      	movs	r6, #1
  412eb4:	9009      	str	r0, [sp, #36]	; 0x24
  412eb6:	9525      	str	r5, [sp, #148]	; 0x94
  412eb8:	6420      	str	r0, [r4, #64]	; 0x40
  412eba:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  412ebe:	960b      	str	r6, [sp, #44]	; 0x2c
  412ec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  412ec2:	2b00      	cmp	r3, #0
  412ec4:	f2c0 80d2 	blt.w	41306c <_dtoa_r+0x3c4>
  412ec8:	9e07      	ldr	r6, [sp, #28]
  412eca:	2e0e      	cmp	r6, #14
  412ecc:	f300 80ce 	bgt.w	41306c <_dtoa_r+0x3c4>
  412ed0:	4b2b      	ldr	r3, [pc, #172]	; (412f80 <_dtoa_r+0x2d8>)
  412ed2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  412ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
  412eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
  412ede:	9925      	ldr	r1, [sp, #148]	; 0x94
  412ee0:	2900      	cmp	r1, #0
  412ee2:	f2c0 8380 	blt.w	4135e6 <_dtoa_r+0x93e>
  412ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  412eea:	4659      	mov	r1, fp
  412eec:	4650      	mov	r0, sl
  412eee:	f004 fe91 	bl	417c14 <__aeabi_ddiv>
  412ef2:	f004 ffff 	bl	417ef4 <__aeabi_d2iz>
  412ef6:	4605      	mov	r5, r0
  412ef8:	f004 fcfc 	bl	4178f4 <__aeabi_i2d>
  412efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  412f00:	f004 fd5e 	bl	4179c0 <__aeabi_dmul>
  412f04:	4602      	mov	r2, r0
  412f06:	460b      	mov	r3, r1
  412f08:	4650      	mov	r0, sl
  412f0a:	4659      	mov	r1, fp
  412f0c:	f004 fba4 	bl	417658 <__aeabi_dsub>
  412f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  412f12:	f105 0330 	add.w	r3, r5, #48	; 0x30
  412f16:	f1b9 0f01 	cmp.w	r9, #1
  412f1a:	4606      	mov	r6, r0
  412f1c:	460f      	mov	r7, r1
  412f1e:	7013      	strb	r3, [r2, #0]
  412f20:	f102 0b01 	add.w	fp, r2, #1
  412f24:	d064      	beq.n	412ff0 <_dtoa_r+0x348>
  412f26:	2200      	movs	r2, #0
  412f28:	4b18      	ldr	r3, [pc, #96]	; (412f8c <_dtoa_r+0x2e4>)
  412f2a:	f004 fd49 	bl	4179c0 <__aeabi_dmul>
  412f2e:	2200      	movs	r2, #0
  412f30:	2300      	movs	r3, #0
  412f32:	4606      	mov	r6, r0
  412f34:	460f      	mov	r7, r1
  412f36:	f004 ffab 	bl	417e90 <__aeabi_dcmpeq>
  412f3a:	2800      	cmp	r0, #0
  412f3c:	f040 8081 	bne.w	413042 <_dtoa_r+0x39a>
  412f40:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  412f44:	9d09      	ldr	r5, [sp, #36]	; 0x24
  412f46:	9403      	str	r4, [sp, #12]
  412f48:	44c8      	add	r8, r9
  412f4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  412f4e:	f105 0902 	add.w	r9, r5, #2
  412f52:	e028      	b.n	412fa6 <_dtoa_r+0x2fe>
  412f54:	f3af 8000 	nop.w
  412f58:	636f4361 	.word	0x636f4361
  412f5c:	3fd287a7 	.word	0x3fd287a7
  412f60:	8b60c8b3 	.word	0x8b60c8b3
  412f64:	3fc68a28 	.word	0x3fc68a28
  412f68:	509f79fb 	.word	0x509f79fb
  412f6c:	3fd34413 	.word	0x3fd34413
  412f70:	7ff00000 	.word	0x7ff00000
  412f74:	00419245 	.word	0x00419245
  412f78:	004193b4 	.word	0x004193b4
  412f7c:	3ff80000 	.word	0x3ff80000
  412f80:	004193c8 	.word	0x004193c8
  412f84:	004193a8 	.word	0x004193a8
  412f88:	00419244 	.word	0x00419244
  412f8c:	40240000 	.word	0x40240000
  412f90:	f004 fd16 	bl	4179c0 <__aeabi_dmul>
  412f94:	2200      	movs	r2, #0
  412f96:	2300      	movs	r3, #0
  412f98:	4606      	mov	r6, r0
  412f9a:	460f      	mov	r7, r1
  412f9c:	f004 ff78 	bl	417e90 <__aeabi_dcmpeq>
  412fa0:	2800      	cmp	r0, #0
  412fa2:	f040 83c1 	bne.w	413728 <_dtoa_r+0xa80>
  412fa6:	4652      	mov	r2, sl
  412fa8:	465b      	mov	r3, fp
  412faa:	4630      	mov	r0, r6
  412fac:	4639      	mov	r1, r7
  412fae:	f004 fe31 	bl	417c14 <__aeabi_ddiv>
  412fb2:	f004 ff9f 	bl	417ef4 <__aeabi_d2iz>
  412fb6:	4605      	mov	r5, r0
  412fb8:	f004 fc9c 	bl	4178f4 <__aeabi_i2d>
  412fbc:	4652      	mov	r2, sl
  412fbe:	465b      	mov	r3, fp
  412fc0:	f004 fcfe 	bl	4179c0 <__aeabi_dmul>
  412fc4:	4602      	mov	r2, r0
  412fc6:	460b      	mov	r3, r1
  412fc8:	4630      	mov	r0, r6
  412fca:	4639      	mov	r1, r7
  412fcc:	f004 fb44 	bl	417658 <__aeabi_dsub>
  412fd0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  412fd4:	45c1      	cmp	r9, r8
  412fd6:	f809 ec01 	strb.w	lr, [r9, #-1]
  412fda:	464c      	mov	r4, r9
  412fdc:	4606      	mov	r6, r0
  412fde:	460f      	mov	r7, r1
  412fe0:	f04f 0200 	mov.w	r2, #0
  412fe4:	4ba7      	ldr	r3, [pc, #668]	; (413284 <_dtoa_r+0x5dc>)
  412fe6:	f109 0901 	add.w	r9, r9, #1
  412fea:	d1d1      	bne.n	412f90 <_dtoa_r+0x2e8>
  412fec:	46a3      	mov	fp, r4
  412fee:	9c03      	ldr	r4, [sp, #12]
  412ff0:	4632      	mov	r2, r6
  412ff2:	463b      	mov	r3, r7
  412ff4:	4630      	mov	r0, r6
  412ff6:	4639      	mov	r1, r7
  412ff8:	f004 fb30 	bl	41765c <__adddf3>
  412ffc:	4606      	mov	r6, r0
  412ffe:	460f      	mov	r7, r1
  413000:	4632      	mov	r2, r6
  413002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  413006:	463b      	mov	r3, r7
  413008:	f004 ff4c 	bl	417ea4 <__aeabi_dcmplt>
  41300c:	b940      	cbnz	r0, 413020 <_dtoa_r+0x378>
  41300e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  413012:	4632      	mov	r2, r6
  413014:	463b      	mov	r3, r7
  413016:	f004 ff3b 	bl	417e90 <__aeabi_dcmpeq>
  41301a:	b190      	cbz	r0, 413042 <_dtoa_r+0x39a>
  41301c:	07eb      	lsls	r3, r5, #31
  41301e:	d510      	bpl.n	413042 <_dtoa_r+0x39a>
  413020:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  413024:	9a09      	ldr	r2, [sp, #36]	; 0x24
  413026:	e005      	b.n	413034 <_dtoa_r+0x38c>
  413028:	429a      	cmp	r2, r3
  41302a:	f000 8428 	beq.w	41387e <_dtoa_r+0xbd6>
  41302e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  413032:	469b      	mov	fp, r3
  413034:	2d39      	cmp	r5, #57	; 0x39
  413036:	f10b 33ff 	add.w	r3, fp, #4294967295
  41303a:	d0f5      	beq.n	413028 <_dtoa_r+0x380>
  41303c:	1c6a      	adds	r2, r5, #1
  41303e:	b2d2      	uxtb	r2, r2
  413040:	701a      	strb	r2, [r3, #0]
  413042:	4620      	mov	r0, r4
  413044:	990a      	ldr	r1, [sp, #40]	; 0x28
  413046:	f001 fb85 	bl	414754 <_Bfree>
  41304a:	9e07      	ldr	r6, [sp, #28]
  41304c:	9d26      	ldr	r5, [sp, #152]	; 0x98
  41304e:	1c73      	adds	r3, r6, #1
  413050:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  413052:	2200      	movs	r2, #0
  413054:	f88b 2000 	strb.w	r2, [fp]
  413058:	602b      	str	r3, [r5, #0]
  41305a:	2e00      	cmp	r6, #0
  41305c:	f000 8325 	beq.w	4136aa <_dtoa_r+0xa02>
  413060:	9809      	ldr	r0, [sp, #36]	; 0x24
  413062:	f8c6 b000 	str.w	fp, [r6]
  413066:	b01b      	add	sp, #108	; 0x6c
  413068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41306c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41306e:	2d00      	cmp	r5, #0
  413070:	f000 8103 	beq.w	41327a <_dtoa_r+0x5d2>
  413074:	9e24      	ldr	r6, [sp, #144]	; 0x90
  413076:	2e01      	cmp	r6, #1
  413078:	f340 82dc 	ble.w	413634 <_dtoa_r+0x98c>
  41307c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  41307e:	f109 37ff 	add.w	r7, r9, #4294967295
  413082:	42be      	cmp	r6, r7
  413084:	f2c0 8389 	blt.w	41379a <_dtoa_r+0xaf2>
  413088:	1bf7      	subs	r7, r6, r7
  41308a:	f1b9 0f00 	cmp.w	r9, #0
  41308e:	f2c0 8486 	blt.w	41399e <_dtoa_r+0xcf6>
  413092:	9d08      	ldr	r5, [sp, #32]
  413094:	464b      	mov	r3, r9
  413096:	9e08      	ldr	r6, [sp, #32]
  413098:	441e      	add	r6, r3
  41309a:	9608      	str	r6, [sp, #32]
  41309c:	9e06      	ldr	r6, [sp, #24]
  41309e:	4620      	mov	r0, r4
  4130a0:	441e      	add	r6, r3
  4130a2:	2101      	movs	r1, #1
  4130a4:	9606      	str	r6, [sp, #24]
  4130a6:	f001 fc45 	bl	414934 <__i2b>
  4130aa:	4606      	mov	r6, r0
  4130ac:	b165      	cbz	r5, 4130c8 <_dtoa_r+0x420>
  4130ae:	9806      	ldr	r0, [sp, #24]
  4130b0:	2800      	cmp	r0, #0
  4130b2:	dd09      	ble.n	4130c8 <_dtoa_r+0x420>
  4130b4:	4603      	mov	r3, r0
  4130b6:	9908      	ldr	r1, [sp, #32]
  4130b8:	42ab      	cmp	r3, r5
  4130ba:	bfa8      	it	ge
  4130bc:	462b      	movge	r3, r5
  4130be:	1ac9      	subs	r1, r1, r3
  4130c0:	1ac0      	subs	r0, r0, r3
  4130c2:	9108      	str	r1, [sp, #32]
  4130c4:	1aed      	subs	r5, r5, r3
  4130c6:	9006      	str	r0, [sp, #24]
  4130c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4130ca:	2a00      	cmp	r2, #0
  4130cc:	dd1d      	ble.n	41310a <_dtoa_r+0x462>
  4130ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4130d0:	2b00      	cmp	r3, #0
  4130d2:	f000 8358 	beq.w	413786 <_dtoa_r+0xade>
  4130d6:	2f00      	cmp	r7, #0
  4130d8:	dd11      	ble.n	4130fe <_dtoa_r+0x456>
  4130da:	4631      	mov	r1, r6
  4130dc:	463a      	mov	r2, r7
  4130de:	4620      	mov	r0, r4
  4130e0:	f001 fcd0 	bl	414a84 <__pow5mult>
  4130e4:	4606      	mov	r6, r0
  4130e6:	4631      	mov	r1, r6
  4130e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4130ea:	4620      	mov	r0, r4
  4130ec:	f001 fc2c 	bl	414948 <__multiply>
  4130f0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4130f2:	4680      	mov	r8, r0
  4130f4:	4620      	mov	r0, r4
  4130f6:	f001 fb2d 	bl	414754 <_Bfree>
  4130fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  4130fe:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  413102:	ebbe 0207 	subs.w	r2, lr, r7
  413106:	f040 828f 	bne.w	413628 <_dtoa_r+0x980>
  41310a:	4620      	mov	r0, r4
  41310c:	2101      	movs	r1, #1
  41310e:	f001 fc11 	bl	414934 <__i2b>
  413112:	4680      	mov	r8, r0
  413114:	980d      	ldr	r0, [sp, #52]	; 0x34
  413116:	2800      	cmp	r0, #0
  413118:	dd05      	ble.n	413126 <_dtoa_r+0x47e>
  41311a:	4641      	mov	r1, r8
  41311c:	4620      	mov	r0, r4
  41311e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413120:	f001 fcb0 	bl	414a84 <__pow5mult>
  413124:	4680      	mov	r8, r0
  413126:	9924      	ldr	r1, [sp, #144]	; 0x90
  413128:	2901      	cmp	r1, #1
  41312a:	f340 82c1 	ble.w	4136b0 <_dtoa_r+0xa08>
  41312e:	2700      	movs	r7, #0
  413130:	980d      	ldr	r0, [sp, #52]	; 0x34
  413132:	2800      	cmp	r0, #0
  413134:	f040 82af 	bne.w	413696 <_dtoa_r+0x9ee>
  413138:	2001      	movs	r0, #1
  41313a:	9b06      	ldr	r3, [sp, #24]
  41313c:	4403      	add	r3, r0
  41313e:	f013 031f 	ands.w	r3, r3, #31
  413142:	f000 80a1 	beq.w	413288 <_dtoa_r+0x5e0>
  413146:	f1c3 0220 	rsb	r2, r3, #32
  41314a:	2a04      	cmp	r2, #4
  41314c:	f340 84b5 	ble.w	413aba <_dtoa_r+0xe12>
  413150:	9908      	ldr	r1, [sp, #32]
  413152:	9a06      	ldr	r2, [sp, #24]
  413154:	f1c3 031c 	rsb	r3, r3, #28
  413158:	4419      	add	r1, r3
  41315a:	441a      	add	r2, r3
  41315c:	9108      	str	r1, [sp, #32]
  41315e:	441d      	add	r5, r3
  413160:	9206      	str	r2, [sp, #24]
  413162:	9908      	ldr	r1, [sp, #32]
  413164:	2900      	cmp	r1, #0
  413166:	dd05      	ble.n	413174 <_dtoa_r+0x4cc>
  413168:	990a      	ldr	r1, [sp, #40]	; 0x28
  41316a:	9a08      	ldr	r2, [sp, #32]
  41316c:	4620      	mov	r0, r4
  41316e:	f001 fcd7 	bl	414b20 <__lshift>
  413172:	900a      	str	r0, [sp, #40]	; 0x28
  413174:	9a06      	ldr	r2, [sp, #24]
  413176:	2a00      	cmp	r2, #0
  413178:	dd04      	ble.n	413184 <_dtoa_r+0x4dc>
  41317a:	4641      	mov	r1, r8
  41317c:	4620      	mov	r0, r4
  41317e:	f001 fccf 	bl	414b20 <__lshift>
  413182:	4680      	mov	r8, r0
  413184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  413186:	2b00      	cmp	r3, #0
  413188:	f040 826a 	bne.w	413660 <_dtoa_r+0x9b8>
  41318c:	f1b9 0f00 	cmp.w	r9, #0
  413190:	f340 82a6 	ble.w	4136e0 <_dtoa_r+0xa38>
  413194:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413196:	2800      	cmp	r0, #0
  413198:	f040 8088 	bne.w	4132ac <_dtoa_r+0x604>
  41319c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41319e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4131a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4131a4:	e006      	b.n	4131b4 <_dtoa_r+0x50c>
  4131a6:	4639      	mov	r1, r7
  4131a8:	4620      	mov	r0, r4
  4131aa:	220a      	movs	r2, #10
  4131ac:	2300      	movs	r3, #0
  4131ae:	f001 fadb 	bl	414768 <__multadd>
  4131b2:	4607      	mov	r7, r0
  4131b4:	4638      	mov	r0, r7
  4131b6:	4641      	mov	r1, r8
  4131b8:	f7ff fcde 	bl	412b78 <quorem>
  4131bc:	3030      	adds	r0, #48	; 0x30
  4131be:	f80b 0005 	strb.w	r0, [fp, r5]
  4131c2:	3501      	adds	r5, #1
  4131c4:	45a9      	cmp	r9, r5
  4131c6:	dcee      	bgt.n	4131a6 <_dtoa_r+0x4fe>
  4131c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4131cc:	970a      	str	r7, [sp, #40]	; 0x28
  4131ce:	4682      	mov	sl, r0
  4131d0:	f1b9 0f01 	cmp.w	r9, #1
  4131d4:	bfac      	ite	ge
  4131d6:	44cb      	addge	fp, r9
  4131d8:	f10b 0b01 	addlt.w	fp, fp, #1
  4131dc:	2500      	movs	r5, #0
  4131de:	990a      	ldr	r1, [sp, #40]	; 0x28
  4131e0:	2201      	movs	r2, #1
  4131e2:	4620      	mov	r0, r4
  4131e4:	f001 fc9c 	bl	414b20 <__lshift>
  4131e8:	4641      	mov	r1, r8
  4131ea:	900a      	str	r0, [sp, #40]	; 0x28
  4131ec:	f001 fcf6 	bl	414bdc <__mcmp>
  4131f0:	2800      	cmp	r0, #0
  4131f2:	f340 8309 	ble.w	413808 <_dtoa_r+0xb60>
  4131f6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  4131fa:	9909      	ldr	r1, [sp, #36]	; 0x24
  4131fc:	e005      	b.n	41320a <_dtoa_r+0x562>
  4131fe:	4299      	cmp	r1, r3
  413200:	f000 828b 	beq.w	41371a <_dtoa_r+0xa72>
  413204:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  413208:	469b      	mov	fp, r3
  41320a:	2a39      	cmp	r2, #57	; 0x39
  41320c:	f10b 33ff 	add.w	r3, fp, #4294967295
  413210:	d0f5      	beq.n	4131fe <_dtoa_r+0x556>
  413212:	3201      	adds	r2, #1
  413214:	701a      	strb	r2, [r3, #0]
  413216:	4641      	mov	r1, r8
  413218:	4620      	mov	r0, r4
  41321a:	f001 fa9b 	bl	414754 <_Bfree>
  41321e:	2e00      	cmp	r6, #0
  413220:	f43f af0f 	beq.w	413042 <_dtoa_r+0x39a>
  413224:	b12d      	cbz	r5, 413232 <_dtoa_r+0x58a>
  413226:	42b5      	cmp	r5, r6
  413228:	d003      	beq.n	413232 <_dtoa_r+0x58a>
  41322a:	4629      	mov	r1, r5
  41322c:	4620      	mov	r0, r4
  41322e:	f001 fa91 	bl	414754 <_Bfree>
  413232:	4631      	mov	r1, r6
  413234:	4620      	mov	r0, r4
  413236:	f001 fa8d 	bl	414754 <_Bfree>
  41323a:	e702      	b.n	413042 <_dtoa_r+0x39a>
  41323c:	2601      	movs	r6, #1
  41323e:	960e      	str	r6, [sp, #56]	; 0x38
  413240:	e5eb      	b.n	412e1a <_dtoa_r+0x172>
  413242:	9807      	ldr	r0, [sp, #28]
  413244:	f004 fb56 	bl	4178f4 <__aeabi_i2d>
  413248:	4632      	mov	r2, r6
  41324a:	463b      	mov	r3, r7
  41324c:	f004 fe20 	bl	417e90 <__aeabi_dcmpeq>
  413250:	2800      	cmp	r0, #0
  413252:	f47f adce 	bne.w	412df2 <_dtoa_r+0x14a>
  413256:	9e07      	ldr	r6, [sp, #28]
  413258:	3e01      	subs	r6, #1
  41325a:	9607      	str	r6, [sp, #28]
  41325c:	e5c9      	b.n	412df2 <_dtoa_r+0x14a>
  41325e:	9e07      	ldr	r6, [sp, #28]
  413260:	9d08      	ldr	r5, [sp, #32]
  413262:	1bad      	subs	r5, r5, r6
  413264:	9508      	str	r5, [sp, #32]
  413266:	4275      	negs	r5, r6
  413268:	2600      	movs	r6, #0
  41326a:	950c      	str	r5, [sp, #48]	; 0x30
  41326c:	960d      	str	r6, [sp, #52]	; 0x34
  41326e:	e5e6      	b.n	412e3e <_dtoa_r+0x196>
  413270:	426d      	negs	r5, r5
  413272:	2600      	movs	r6, #0
  413274:	9508      	str	r5, [sp, #32]
  413276:	9606      	str	r6, [sp, #24]
  413278:	e5d7      	b.n	412e2a <_dtoa_r+0x182>
  41327a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41327c:	9d08      	ldr	r5, [sp, #32]
  41327e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  413280:	e714      	b.n	4130ac <_dtoa_r+0x404>
  413282:	bf00      	nop
  413284:	40240000 	.word	0x40240000
  413288:	231c      	movs	r3, #28
  41328a:	f8dd e020 	ldr.w	lr, [sp, #32]
  41328e:	9806      	ldr	r0, [sp, #24]
  413290:	449e      	add	lr, r3
  413292:	4418      	add	r0, r3
  413294:	f8cd e020 	str.w	lr, [sp, #32]
  413298:	441d      	add	r5, r3
  41329a:	9006      	str	r0, [sp, #24]
  41329c:	e761      	b.n	413162 <_dtoa_r+0x4ba>
  41329e:	48a7      	ldr	r0, [pc, #668]	; (41353c <_dtoa_r+0x894>)
  4132a0:	1b40      	subs	r0, r0, r5
  4132a2:	fa0a f000 	lsl.w	r0, sl, r0
  4132a6:	e570      	b.n	412d8a <_dtoa_r+0xe2>
  4132a8:	900e      	str	r0, [sp, #56]	; 0x38
  4132aa:	e5b6      	b.n	412e1a <_dtoa_r+0x172>
  4132ac:	2d00      	cmp	r5, #0
  4132ae:	dd05      	ble.n	4132bc <_dtoa_r+0x614>
  4132b0:	4631      	mov	r1, r6
  4132b2:	462a      	mov	r2, r5
  4132b4:	4620      	mov	r0, r4
  4132b6:	f001 fc33 	bl	414b20 <__lshift>
  4132ba:	4606      	mov	r6, r0
  4132bc:	2f00      	cmp	r7, #0
  4132be:	f040 82e8 	bne.w	413892 <_dtoa_r+0xbea>
  4132c2:	4637      	mov	r7, r6
  4132c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4132c6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4132c8:	444d      	add	r5, r9
  4132ca:	9508      	str	r5, [sp, #32]
  4132cc:	f00a 0501 	and.w	r5, sl, #1
  4132d0:	950b      	str	r5, [sp, #44]	; 0x2c
  4132d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4132d6:	1c45      	adds	r5, r0, #1
  4132d8:	e00a      	b.n	4132f0 <_dtoa_r+0x648>
  4132da:	f001 fa45 	bl	414768 <__multadd>
  4132de:	4639      	mov	r1, r7
  4132e0:	4606      	mov	r6, r0
  4132e2:	220a      	movs	r2, #10
  4132e4:	4620      	mov	r0, r4
  4132e6:	2300      	movs	r3, #0
  4132e8:	f001 fa3e 	bl	414768 <__multadd>
  4132ec:	4607      	mov	r7, r0
  4132ee:	3501      	adds	r5, #1
  4132f0:	4641      	mov	r1, r8
  4132f2:	4648      	mov	r0, r9
  4132f4:	f7ff fc40 	bl	412b78 <quorem>
  4132f8:	4631      	mov	r1, r6
  4132fa:	4683      	mov	fp, r0
  4132fc:	4648      	mov	r0, r9
  4132fe:	f001 fc6d 	bl	414bdc <__mcmp>
  413302:	4641      	mov	r1, r8
  413304:	9003      	str	r0, [sp, #12]
  413306:	463a      	mov	r2, r7
  413308:	4620      	mov	r0, r4
  41330a:	f001 fc8b 	bl	414c24 <__mdiff>
  41330e:	68c2      	ldr	r2, [r0, #12]
  413310:	1e69      	subs	r1, r5, #1
  413312:	4603      	mov	r3, r0
  413314:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  413318:	9106      	str	r1, [sp, #24]
  41331a:	2a00      	cmp	r2, #0
  41331c:	f040 8193 	bne.w	413646 <_dtoa_r+0x99e>
  413320:	4619      	mov	r1, r3
  413322:	4648      	mov	r0, r9
  413324:	9302      	str	r3, [sp, #8]
  413326:	f001 fc59 	bl	414bdc <__mcmp>
  41332a:	9b02      	ldr	r3, [sp, #8]
  41332c:	4602      	mov	r2, r0
  41332e:	4619      	mov	r1, r3
  413330:	4620      	mov	r0, r4
  413332:	9202      	str	r2, [sp, #8]
  413334:	f001 fa0e 	bl	414754 <_Bfree>
  413338:	9a02      	ldr	r2, [sp, #8]
  41333a:	b92a      	cbnz	r2, 413348 <_dtoa_r+0x6a0>
  41333c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41333e:	b91b      	cbnz	r3, 413348 <_dtoa_r+0x6a0>
  413340:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413342:	2800      	cmp	r0, #0
  413344:	f000 8391 	beq.w	413a6a <_dtoa_r+0xdc2>
  413348:	9b03      	ldr	r3, [sp, #12]
  41334a:	2b00      	cmp	r3, #0
  41334c:	f2c0 8234 	blt.w	4137b8 <_dtoa_r+0xb10>
  413350:	d105      	bne.n	41335e <_dtoa_r+0x6b6>
  413352:	9824      	ldr	r0, [sp, #144]	; 0x90
  413354:	b918      	cbnz	r0, 41335e <_dtoa_r+0x6b6>
  413356:	990b      	ldr	r1, [sp, #44]	; 0x2c
  413358:	2900      	cmp	r1, #0
  41335a:	f000 822d 	beq.w	4137b8 <_dtoa_r+0xb10>
  41335e:	2a00      	cmp	r2, #0
  413360:	f300 82ab 	bgt.w	4138ba <_dtoa_r+0xc12>
  413364:	f8dd e020 	ldr.w	lr, [sp, #32]
  413368:	f805 ac01 	strb.w	sl, [r5, #-1]
  41336c:	4575      	cmp	r5, lr
  41336e:	46ab      	mov	fp, r5
  413370:	f000 82b3 	beq.w	4138da <_dtoa_r+0xc32>
  413374:	4649      	mov	r1, r9
  413376:	220a      	movs	r2, #10
  413378:	2300      	movs	r3, #0
  41337a:	4620      	mov	r0, r4
  41337c:	f001 f9f4 	bl	414768 <__multadd>
  413380:	42be      	cmp	r6, r7
  413382:	4681      	mov	r9, r0
  413384:	4631      	mov	r1, r6
  413386:	4620      	mov	r0, r4
  413388:	f04f 020a 	mov.w	r2, #10
  41338c:	f04f 0300 	mov.w	r3, #0
  413390:	d1a3      	bne.n	4132da <_dtoa_r+0x632>
  413392:	f001 f9e9 	bl	414768 <__multadd>
  413396:	4606      	mov	r6, r0
  413398:	4607      	mov	r7, r0
  41339a:	e7a8      	b.n	4132ee <_dtoa_r+0x646>
  41339c:	2600      	movs	r6, #0
  41339e:	960b      	str	r6, [sp, #44]	; 0x2c
  4133a0:	9e07      	ldr	r6, [sp, #28]
  4133a2:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  4133a6:	44b6      	add	lr, r6
  4133a8:	f10e 0901 	add.w	r9, lr, #1
  4133ac:	f1b9 0f00 	cmp.w	r9, #0
  4133b0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  4133b4:	464e      	mov	r6, r9
  4133b6:	f340 8150 	ble.w	41365a <_dtoa_r+0x9b2>
  4133ba:	2100      	movs	r1, #0
  4133bc:	2e17      	cmp	r6, #23
  4133be:	6461      	str	r1, [r4, #68]	; 0x44
  4133c0:	d90a      	bls.n	4133d8 <_dtoa_r+0x730>
  4133c2:	2201      	movs	r2, #1
  4133c4:	2304      	movs	r3, #4
  4133c6:	005b      	lsls	r3, r3, #1
  4133c8:	f103 0014 	add.w	r0, r3, #20
  4133cc:	42b0      	cmp	r0, r6
  4133ce:	4611      	mov	r1, r2
  4133d0:	f102 0201 	add.w	r2, r2, #1
  4133d4:	d9f7      	bls.n	4133c6 <_dtoa_r+0x71e>
  4133d6:	6461      	str	r1, [r4, #68]	; 0x44
  4133d8:	4620      	mov	r0, r4
  4133da:	f001 f995 	bl	414708 <_Balloc>
  4133de:	2e0e      	cmp	r6, #14
  4133e0:	9009      	str	r0, [sp, #36]	; 0x24
  4133e2:	6420      	str	r0, [r4, #64]	; 0x40
  4133e4:	f63f ad6c 	bhi.w	412ec0 <_dtoa_r+0x218>
  4133e8:	2d00      	cmp	r5, #0
  4133ea:	f43f ad69 	beq.w	412ec0 <_dtoa_r+0x218>
  4133ee:	9d07      	ldr	r5, [sp, #28]
  4133f0:	2d00      	cmp	r5, #0
  4133f2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  4133f6:	f340 821b 	ble.w	413830 <_dtoa_r+0xb88>
  4133fa:	4b51      	ldr	r3, [pc, #324]	; (413540 <_dtoa_r+0x898>)
  4133fc:	f005 020f 	and.w	r2, r5, #15
  413400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  413404:	112d      	asrs	r5, r5, #4
  413406:	e9d3 6700 	ldrd	r6, r7, [r3]
  41340a:	06eb      	lsls	r3, r5, #27
  41340c:	f140 81cd 	bpl.w	4137aa <_dtoa_r+0xb02>
  413410:	4b4c      	ldr	r3, [pc, #304]	; (413544 <_dtoa_r+0x89c>)
  413412:	4650      	mov	r0, sl
  413414:	4659      	mov	r1, fp
  413416:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  41341a:	f004 fbfb 	bl	417c14 <__aeabi_ddiv>
  41341e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  413422:	f005 050f 	and.w	r5, r5, #15
  413426:	f04f 0803 	mov.w	r8, #3
  41342a:	b18d      	cbz	r5, 413450 <_dtoa_r+0x7a8>
  41342c:	f8df a114 	ldr.w	sl, [pc, #276]	; 413544 <_dtoa_r+0x89c>
  413430:	4630      	mov	r0, r6
  413432:	4639      	mov	r1, r7
  413434:	07ee      	lsls	r6, r5, #31
  413436:	d505      	bpl.n	413444 <_dtoa_r+0x79c>
  413438:	e9da 2300 	ldrd	r2, r3, [sl]
  41343c:	f108 0801 	add.w	r8, r8, #1
  413440:	f004 fabe 	bl	4179c0 <__aeabi_dmul>
  413444:	106d      	asrs	r5, r5, #1
  413446:	f10a 0a08 	add.w	sl, sl, #8
  41344a:	d1f3      	bne.n	413434 <_dtoa_r+0x78c>
  41344c:	4606      	mov	r6, r0
  41344e:	460f      	mov	r7, r1
  413450:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  413454:	4632      	mov	r2, r6
  413456:	463b      	mov	r3, r7
  413458:	f004 fbdc 	bl	417c14 <__aeabi_ddiv>
  41345c:	4682      	mov	sl, r0
  41345e:	468b      	mov	fp, r1
  413460:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  413462:	b145      	cbz	r5, 413476 <_dtoa_r+0x7ce>
  413464:	4650      	mov	r0, sl
  413466:	4659      	mov	r1, fp
  413468:	2200      	movs	r2, #0
  41346a:	4b37      	ldr	r3, [pc, #220]	; (413548 <_dtoa_r+0x8a0>)
  41346c:	f004 fd1a 	bl	417ea4 <__aeabi_dcmplt>
  413470:	2800      	cmp	r0, #0
  413472:	f040 82a9 	bne.w	4139c8 <_dtoa_r+0xd20>
  413476:	4640      	mov	r0, r8
  413478:	f004 fa3c 	bl	4178f4 <__aeabi_i2d>
  41347c:	4652      	mov	r2, sl
  41347e:	465b      	mov	r3, fp
  413480:	f004 fa9e 	bl	4179c0 <__aeabi_dmul>
  413484:	2200      	movs	r2, #0
  413486:	4b31      	ldr	r3, [pc, #196]	; (41354c <_dtoa_r+0x8a4>)
  413488:	f004 f8e8 	bl	41765c <__adddf3>
  41348c:	4606      	mov	r6, r0
  41348e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  413492:	f1b9 0f00 	cmp.w	r9, #0
  413496:	f000 815a 	beq.w	41374e <_dtoa_r+0xaa6>
  41349a:	9d07      	ldr	r5, [sp, #28]
  41349c:	9517      	str	r5, [sp, #92]	; 0x5c
  41349e:	46c8      	mov	r8, r9
  4134a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4134a2:	2d00      	cmp	r5, #0
  4134a4:	f000 8222 	beq.w	4138ec <_dtoa_r+0xc44>
  4134a8:	4b25      	ldr	r3, [pc, #148]	; (413540 <_dtoa_r+0x898>)
  4134aa:	4929      	ldr	r1, [pc, #164]	; (413550 <_dtoa_r+0x8a8>)
  4134ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4134b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4134b4:	2000      	movs	r0, #0
  4134b6:	f004 fbad 	bl	417c14 <__aeabi_ddiv>
  4134ba:	4632      	mov	r2, r6
  4134bc:	463b      	mov	r3, r7
  4134be:	f004 f8cb 	bl	417658 <__aeabi_dsub>
  4134c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4134c6:	4659      	mov	r1, fp
  4134c8:	4650      	mov	r0, sl
  4134ca:	f004 fd13 	bl	417ef4 <__aeabi_d2iz>
  4134ce:	4605      	mov	r5, r0
  4134d0:	f004 fa10 	bl	4178f4 <__aeabi_i2d>
  4134d4:	4602      	mov	r2, r0
  4134d6:	460b      	mov	r3, r1
  4134d8:	4650      	mov	r0, sl
  4134da:	4659      	mov	r1, fp
  4134dc:	f004 f8bc 	bl	417658 <__aeabi_dsub>
  4134e0:	3530      	adds	r5, #48	; 0x30
  4134e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4134e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4134e8:	b2ed      	uxtb	r5, r5
  4134ea:	7035      	strb	r5, [r6, #0]
  4134ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4134f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4134f4:	f106 0b01 	add.w	fp, r6, #1
  4134f8:	f004 fcf2 	bl	417ee0 <__aeabi_dcmpgt>
  4134fc:	2800      	cmp	r0, #0
  4134fe:	f040 82a9 	bne.w	413a54 <_dtoa_r+0xdac>
  413502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  413506:	2000      	movs	r0, #0
  413508:	490f      	ldr	r1, [pc, #60]	; (413548 <_dtoa_r+0x8a0>)
  41350a:	f004 f8a5 	bl	417658 <__aeabi_dsub>
  41350e:	4602      	mov	r2, r0
  413510:	460b      	mov	r3, r1
  413512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  413516:	f004 fce3 	bl	417ee0 <__aeabi_dcmpgt>
  41351a:	2800      	cmp	r0, #0
  41351c:	f040 82a0 	bne.w	413a60 <_dtoa_r+0xdb8>
  413520:	f1b8 0f01 	cmp.w	r8, #1
  413524:	f340 8180 	ble.w	413828 <_dtoa_r+0xb80>
  413528:	44b0      	add	r8, r6
  41352a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  41352e:	46a2      	mov	sl, r4
  413530:	46c1      	mov	r9, r8
  413532:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  413536:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  41353a:	e019      	b.n	413570 <_dtoa_r+0x8c8>
  41353c:	fffffbee 	.word	0xfffffbee
  413540:	004193c8 	.word	0x004193c8
  413544:	00419490 	.word	0x00419490
  413548:	3ff00000 	.word	0x3ff00000
  41354c:	401c0000 	.word	0x401c0000
  413550:	3fe00000 	.word	0x3fe00000
  413554:	2000      	movs	r0, #0
  413556:	49a8      	ldr	r1, [pc, #672]	; (4137f8 <_dtoa_r+0xb50>)
  413558:	f004 f87e 	bl	417658 <__aeabi_dsub>
  41355c:	4622      	mov	r2, r4
  41355e:	462b      	mov	r3, r5
  413560:	f004 fca0 	bl	417ea4 <__aeabi_dcmplt>
  413564:	2800      	cmp	r0, #0
  413566:	f040 8279 	bne.w	413a5c <_dtoa_r+0xdb4>
  41356a:	45cb      	cmp	fp, r9
  41356c:	f000 8159 	beq.w	413822 <_dtoa_r+0xb7a>
  413570:	4620      	mov	r0, r4
  413572:	4629      	mov	r1, r5
  413574:	2200      	movs	r2, #0
  413576:	4ba1      	ldr	r3, [pc, #644]	; (4137fc <_dtoa_r+0xb54>)
  413578:	f004 fa22 	bl	4179c0 <__aeabi_dmul>
  41357c:	2200      	movs	r2, #0
  41357e:	4b9f      	ldr	r3, [pc, #636]	; (4137fc <_dtoa_r+0xb54>)
  413580:	4604      	mov	r4, r0
  413582:	460d      	mov	r5, r1
  413584:	4630      	mov	r0, r6
  413586:	4639      	mov	r1, r7
  413588:	f004 fa1a 	bl	4179c0 <__aeabi_dmul>
  41358c:	460f      	mov	r7, r1
  41358e:	4606      	mov	r6, r0
  413590:	f004 fcb0 	bl	417ef4 <__aeabi_d2iz>
  413594:	4680      	mov	r8, r0
  413596:	f004 f9ad 	bl	4178f4 <__aeabi_i2d>
  41359a:	4602      	mov	r2, r0
  41359c:	460b      	mov	r3, r1
  41359e:	4630      	mov	r0, r6
  4135a0:	4639      	mov	r1, r7
  4135a2:	f004 f859 	bl	417658 <__aeabi_dsub>
  4135a6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4135aa:	fa5f f888 	uxtb.w	r8, r8
  4135ae:	4622      	mov	r2, r4
  4135b0:	462b      	mov	r3, r5
  4135b2:	f80b 8b01 	strb.w	r8, [fp], #1
  4135b6:	4606      	mov	r6, r0
  4135b8:	460f      	mov	r7, r1
  4135ba:	f004 fc73 	bl	417ea4 <__aeabi_dcmplt>
  4135be:	4632      	mov	r2, r6
  4135c0:	463b      	mov	r3, r7
  4135c2:	2800      	cmp	r0, #0
  4135c4:	d0c6      	beq.n	413554 <_dtoa_r+0x8ac>
  4135c6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4135c8:	9607      	str	r6, [sp, #28]
  4135ca:	4654      	mov	r4, sl
  4135cc:	e539      	b.n	413042 <_dtoa_r+0x39a>
  4135ce:	2600      	movs	r6, #0
  4135d0:	960b      	str	r6, [sp, #44]	; 0x2c
  4135d2:	9825      	ldr	r0, [sp, #148]	; 0x94
  4135d4:	2800      	cmp	r0, #0
  4135d6:	dd3c      	ble.n	413652 <_dtoa_r+0x9aa>
  4135d8:	4606      	mov	r6, r0
  4135da:	900f      	str	r0, [sp, #60]	; 0x3c
  4135dc:	4681      	mov	r9, r0
  4135de:	e6ec      	b.n	4133ba <_dtoa_r+0x712>
  4135e0:	2601      	movs	r6, #1
  4135e2:	960b      	str	r6, [sp, #44]	; 0x2c
  4135e4:	e7f5      	b.n	4135d2 <_dtoa_r+0x92a>
  4135e6:	f1b9 0f00 	cmp.w	r9, #0
  4135ea:	f73f ac7c 	bgt.w	412ee6 <_dtoa_r+0x23e>
  4135ee:	f040 80c6 	bne.w	41377e <_dtoa_r+0xad6>
  4135f2:	2200      	movs	r2, #0
  4135f4:	4b82      	ldr	r3, [pc, #520]	; (413800 <_dtoa_r+0xb58>)
  4135f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4135fa:	f004 f9e1 	bl	4179c0 <__aeabi_dmul>
  4135fe:	4652      	mov	r2, sl
  413600:	465b      	mov	r3, fp
  413602:	f004 fc63 	bl	417ecc <__aeabi_dcmpge>
  413606:	46c8      	mov	r8, r9
  413608:	464e      	mov	r6, r9
  41360a:	2800      	cmp	r0, #0
  41360c:	d07c      	beq.n	413708 <_dtoa_r+0xa60>
  41360e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  413610:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  413614:	43ed      	mvns	r5, r5
  413616:	9507      	str	r5, [sp, #28]
  413618:	4641      	mov	r1, r8
  41361a:	4620      	mov	r0, r4
  41361c:	f001 f89a 	bl	414754 <_Bfree>
  413620:	2e00      	cmp	r6, #0
  413622:	f47f ae06 	bne.w	413232 <_dtoa_r+0x58a>
  413626:	e50c      	b.n	413042 <_dtoa_r+0x39a>
  413628:	990a      	ldr	r1, [sp, #40]	; 0x28
  41362a:	4620      	mov	r0, r4
  41362c:	f001 fa2a 	bl	414a84 <__pow5mult>
  413630:	900a      	str	r0, [sp, #40]	; 0x28
  413632:	e56a      	b.n	41310a <_dtoa_r+0x462>
  413634:	9d16      	ldr	r5, [sp, #88]	; 0x58
  413636:	2d00      	cmp	r5, #0
  413638:	f000 81b7 	beq.w	4139aa <_dtoa_r+0xd02>
  41363c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  413640:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  413642:	9d08      	ldr	r5, [sp, #32]
  413644:	e527      	b.n	413096 <_dtoa_r+0x3ee>
  413646:	4601      	mov	r1, r0
  413648:	4620      	mov	r0, r4
  41364a:	f001 f883 	bl	414754 <_Bfree>
  41364e:	2201      	movs	r2, #1
  413650:	e67a      	b.n	413348 <_dtoa_r+0x6a0>
  413652:	2601      	movs	r6, #1
  413654:	9625      	str	r6, [sp, #148]	; 0x94
  413656:	960f      	str	r6, [sp, #60]	; 0x3c
  413658:	46b1      	mov	r9, r6
  41365a:	2100      	movs	r1, #0
  41365c:	6461      	str	r1, [r4, #68]	; 0x44
  41365e:	e6bb      	b.n	4133d8 <_dtoa_r+0x730>
  413660:	980a      	ldr	r0, [sp, #40]	; 0x28
  413662:	4641      	mov	r1, r8
  413664:	f001 faba 	bl	414bdc <__mcmp>
  413668:	2800      	cmp	r0, #0
  41366a:	f6bf ad8f 	bge.w	41318c <_dtoa_r+0x4e4>
  41366e:	f8dd e01c 	ldr.w	lr, [sp, #28]
  413672:	990a      	ldr	r1, [sp, #40]	; 0x28
  413674:	f10e 3eff 	add.w	lr, lr, #4294967295
  413678:	4620      	mov	r0, r4
  41367a:	220a      	movs	r2, #10
  41367c:	2300      	movs	r3, #0
  41367e:	f8cd e01c 	str.w	lr, [sp, #28]
  413682:	f001 f871 	bl	414768 <__multadd>
  413686:	900a      	str	r0, [sp, #40]	; 0x28
  413688:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41368a:	2800      	cmp	r0, #0
  41368c:	f040 8207 	bne.w	413a9e <_dtoa_r+0xdf6>
  413690:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  413694:	e57a      	b.n	41318c <_dtoa_r+0x4e4>
  413696:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41369a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  41369e:	6918      	ldr	r0, [r3, #16]
  4136a0:	f001 f8fa 	bl	414898 <__hi0bits>
  4136a4:	f1c0 0020 	rsb	r0, r0, #32
  4136a8:	e547      	b.n	41313a <_dtoa_r+0x492>
  4136aa:	9809      	ldr	r0, [sp, #36]	; 0x24
  4136ac:	f7ff bb2d 	b.w	412d0a <_dtoa_r+0x62>
  4136b0:	f1ba 0f00 	cmp.w	sl, #0
  4136b4:	f47f ad3b 	bne.w	41312e <_dtoa_r+0x486>
  4136b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4136bc:	2b00      	cmp	r3, #0
  4136be:	f040 817b 	bne.w	4139b8 <_dtoa_r+0xd10>
  4136c2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4136c6:	0d3f      	lsrs	r7, r7, #20
  4136c8:	053f      	lsls	r7, r7, #20
  4136ca:	2f00      	cmp	r7, #0
  4136cc:	f43f ad30 	beq.w	413130 <_dtoa_r+0x488>
  4136d0:	9a08      	ldr	r2, [sp, #32]
  4136d2:	9b06      	ldr	r3, [sp, #24]
  4136d4:	3201      	adds	r2, #1
  4136d6:	3301      	adds	r3, #1
  4136d8:	9208      	str	r2, [sp, #32]
  4136da:	9306      	str	r3, [sp, #24]
  4136dc:	2701      	movs	r7, #1
  4136de:	e527      	b.n	413130 <_dtoa_r+0x488>
  4136e0:	9924      	ldr	r1, [sp, #144]	; 0x90
  4136e2:	2902      	cmp	r1, #2
  4136e4:	f77f ad56 	ble.w	413194 <_dtoa_r+0x4ec>
  4136e8:	f1b9 0f00 	cmp.w	r9, #0
  4136ec:	d18f      	bne.n	41360e <_dtoa_r+0x966>
  4136ee:	4641      	mov	r1, r8
  4136f0:	464b      	mov	r3, r9
  4136f2:	2205      	movs	r2, #5
  4136f4:	4620      	mov	r0, r4
  4136f6:	f001 f837 	bl	414768 <__multadd>
  4136fa:	4680      	mov	r8, r0
  4136fc:	4641      	mov	r1, r8
  4136fe:	980a      	ldr	r0, [sp, #40]	; 0x28
  413700:	f001 fa6c 	bl	414bdc <__mcmp>
  413704:	2800      	cmp	r0, #0
  413706:	dd82      	ble.n	41360e <_dtoa_r+0x966>
  413708:	9d07      	ldr	r5, [sp, #28]
  41370a:	3501      	adds	r5, #1
  41370c:	9507      	str	r5, [sp, #28]
  41370e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413710:	2331      	movs	r3, #49	; 0x31
  413712:	702b      	strb	r3, [r5, #0]
  413714:	f105 0b01 	add.w	fp, r5, #1
  413718:	e77e      	b.n	413618 <_dtoa_r+0x970>
  41371a:	9807      	ldr	r0, [sp, #28]
  41371c:	9909      	ldr	r1, [sp, #36]	; 0x24
  41371e:	2331      	movs	r3, #49	; 0x31
  413720:	3001      	adds	r0, #1
  413722:	9007      	str	r0, [sp, #28]
  413724:	700b      	strb	r3, [r1, #0]
  413726:	e576      	b.n	413216 <_dtoa_r+0x56e>
  413728:	46a3      	mov	fp, r4
  41372a:	9c03      	ldr	r4, [sp, #12]
  41372c:	e489      	b.n	413042 <_dtoa_r+0x39a>
  41372e:	4640      	mov	r0, r8
  413730:	f004 f8e0 	bl	4178f4 <__aeabi_i2d>
  413734:	4602      	mov	r2, r0
  413736:	460b      	mov	r3, r1
  413738:	4650      	mov	r0, sl
  41373a:	4659      	mov	r1, fp
  41373c:	f004 f940 	bl	4179c0 <__aeabi_dmul>
  413740:	2200      	movs	r2, #0
  413742:	4b30      	ldr	r3, [pc, #192]	; (413804 <_dtoa_r+0xb5c>)
  413744:	f003 ff8a 	bl	41765c <__adddf3>
  413748:	4606      	mov	r6, r0
  41374a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  41374e:	4650      	mov	r0, sl
  413750:	4659      	mov	r1, fp
  413752:	2200      	movs	r2, #0
  413754:	4b2a      	ldr	r3, [pc, #168]	; (413800 <_dtoa_r+0xb58>)
  413756:	f003 ff7f 	bl	417658 <__aeabi_dsub>
  41375a:	4632      	mov	r2, r6
  41375c:	463b      	mov	r3, r7
  41375e:	4682      	mov	sl, r0
  413760:	468b      	mov	fp, r1
  413762:	f004 fbbd 	bl	417ee0 <__aeabi_dcmpgt>
  413766:	2800      	cmp	r0, #0
  413768:	f040 80bc 	bne.w	4138e4 <_dtoa_r+0xc3c>
  41376c:	4632      	mov	r2, r6
  41376e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  413772:	4650      	mov	r0, sl
  413774:	4659      	mov	r1, fp
  413776:	f004 fb95 	bl	417ea4 <__aeabi_dcmplt>
  41377a:	2800      	cmp	r0, #0
  41377c:	d054      	beq.n	413828 <_dtoa_r+0xb80>
  41377e:	f04f 0800 	mov.w	r8, #0
  413782:	4646      	mov	r6, r8
  413784:	e743      	b.n	41360e <_dtoa_r+0x966>
  413786:	990a      	ldr	r1, [sp, #40]	; 0x28
  413788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41378a:	4620      	mov	r0, r4
  41378c:	f001 f97a 	bl	414a84 <__pow5mult>
  413790:	900a      	str	r0, [sp, #40]	; 0x28
  413792:	e4ba      	b.n	41310a <_dtoa_r+0x462>
  413794:	2601      	movs	r6, #1
  413796:	960b      	str	r6, [sp, #44]	; 0x2c
  413798:	e602      	b.n	4133a0 <_dtoa_r+0x6f8>
  41379a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  41379c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  41379e:	970c      	str	r7, [sp, #48]	; 0x30
  4137a0:	1b7b      	subs	r3, r7, r5
  4137a2:	441e      	add	r6, r3
  4137a4:	960d      	str	r6, [sp, #52]	; 0x34
  4137a6:	2700      	movs	r7, #0
  4137a8:	e46f      	b.n	41308a <_dtoa_r+0x3e2>
  4137aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4137ae:	f04f 0802 	mov.w	r8, #2
  4137b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4137b6:	e638      	b.n	41342a <_dtoa_r+0x782>
  4137b8:	2a00      	cmp	r2, #0
  4137ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4137be:	46d9      	mov	r9, fp
  4137c0:	dd11      	ble.n	4137e6 <_dtoa_r+0xb3e>
  4137c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4137c4:	2201      	movs	r2, #1
  4137c6:	4620      	mov	r0, r4
  4137c8:	f001 f9aa 	bl	414b20 <__lshift>
  4137cc:	4641      	mov	r1, r8
  4137ce:	900a      	str	r0, [sp, #40]	; 0x28
  4137d0:	f001 fa04 	bl	414bdc <__mcmp>
  4137d4:	2800      	cmp	r0, #0
  4137d6:	f340 815b 	ble.w	413a90 <_dtoa_r+0xde8>
  4137da:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4137de:	f000 811a 	beq.w	413a16 <_dtoa_r+0xd6e>
  4137e2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  4137e6:	9b06      	ldr	r3, [sp, #24]
  4137e8:	4635      	mov	r5, r6
  4137ea:	f883 a000 	strb.w	sl, [r3]
  4137ee:	f103 0b01 	add.w	fp, r3, #1
  4137f2:	463e      	mov	r6, r7
  4137f4:	e50f      	b.n	413216 <_dtoa_r+0x56e>
  4137f6:	bf00      	nop
  4137f8:	3ff00000 	.word	0x3ff00000
  4137fc:	40240000 	.word	0x40240000
  413800:	40140000 	.word	0x40140000
  413804:	401c0000 	.word	0x401c0000
  413808:	d103      	bne.n	413812 <_dtoa_r+0xb6a>
  41380a:	f01a 0f01 	tst.w	sl, #1
  41380e:	f47f acf2 	bne.w	4131f6 <_dtoa_r+0x54e>
  413812:	465b      	mov	r3, fp
  413814:	469b      	mov	fp, r3
  413816:	3b01      	subs	r3, #1
  413818:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  41381c:	2a30      	cmp	r2, #48	; 0x30
  41381e:	d0f9      	beq.n	413814 <_dtoa_r+0xb6c>
  413820:	e4f9      	b.n	413216 <_dtoa_r+0x56e>
  413822:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  413826:	4654      	mov	r4, sl
  413828:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  41382c:	f7ff bb48 	b.w	412ec0 <_dtoa_r+0x218>
  413830:	9e07      	ldr	r6, [sp, #28]
  413832:	4275      	negs	r5, r6
  413834:	2d00      	cmp	r5, #0
  413836:	f000 80c2 	beq.w	4139be <_dtoa_r+0xd16>
  41383a:	4ba3      	ldr	r3, [pc, #652]	; (413ac8 <_dtoa_r+0xe20>)
  41383c:	f005 020f 	and.w	r2, r5, #15
  413840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  413844:	e9d3 2300 	ldrd	r2, r3, [r3]
  413848:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  41384c:	f004 f8b8 	bl	4179c0 <__aeabi_dmul>
  413850:	112d      	asrs	r5, r5, #4
  413852:	4682      	mov	sl, r0
  413854:	468b      	mov	fp, r1
  413856:	f000 812d 	beq.w	413ab4 <_dtoa_r+0xe0c>
  41385a:	4e9c      	ldr	r6, [pc, #624]	; (413acc <_dtoa_r+0xe24>)
  41385c:	f04f 0802 	mov.w	r8, #2
  413860:	07ea      	lsls	r2, r5, #31
  413862:	d505      	bpl.n	413870 <_dtoa_r+0xbc8>
  413864:	e9d6 2300 	ldrd	r2, r3, [r6]
  413868:	f108 0801 	add.w	r8, r8, #1
  41386c:	f004 f8a8 	bl	4179c0 <__aeabi_dmul>
  413870:	106d      	asrs	r5, r5, #1
  413872:	f106 0608 	add.w	r6, r6, #8
  413876:	d1f3      	bne.n	413860 <_dtoa_r+0xbb8>
  413878:	4682      	mov	sl, r0
  41387a:	468b      	mov	fp, r1
  41387c:	e5f0      	b.n	413460 <_dtoa_r+0x7b8>
  41387e:	9e07      	ldr	r6, [sp, #28]
  413880:	9d09      	ldr	r5, [sp, #36]	; 0x24
  413882:	2230      	movs	r2, #48	; 0x30
  413884:	702a      	strb	r2, [r5, #0]
  413886:	3601      	adds	r6, #1
  413888:	2231      	movs	r2, #49	; 0x31
  41388a:	9607      	str	r6, [sp, #28]
  41388c:	701a      	strb	r2, [r3, #0]
  41388e:	f7ff bbd8 	b.w	413042 <_dtoa_r+0x39a>
  413892:	6871      	ldr	r1, [r6, #4]
  413894:	4620      	mov	r0, r4
  413896:	f000 ff37 	bl	414708 <_Balloc>
  41389a:	6933      	ldr	r3, [r6, #16]
  41389c:	1c9a      	adds	r2, r3, #2
  41389e:	4605      	mov	r5, r0
  4138a0:	0092      	lsls	r2, r2, #2
  4138a2:	f106 010c 	add.w	r1, r6, #12
  4138a6:	300c      	adds	r0, #12
  4138a8:	f7fb fbd8 	bl	40f05c <memcpy>
  4138ac:	4620      	mov	r0, r4
  4138ae:	4629      	mov	r1, r5
  4138b0:	2201      	movs	r2, #1
  4138b2:	f001 f935 	bl	414b20 <__lshift>
  4138b6:	4607      	mov	r7, r0
  4138b8:	e504      	b.n	4132c4 <_dtoa_r+0x61c>
  4138ba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4138be:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4138c2:	f000 80a8 	beq.w	413a16 <_dtoa_r+0xd6e>
  4138c6:	9d06      	ldr	r5, [sp, #24]
  4138c8:	f10a 0301 	add.w	r3, sl, #1
  4138cc:	702b      	strb	r3, [r5, #0]
  4138ce:	4635      	mov	r5, r6
  4138d0:	9e06      	ldr	r6, [sp, #24]
  4138d2:	f106 0b01 	add.w	fp, r6, #1
  4138d6:	463e      	mov	r6, r7
  4138d8:	e49d      	b.n	413216 <_dtoa_r+0x56e>
  4138da:	4635      	mov	r5, r6
  4138dc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4138e0:	463e      	mov	r6, r7
  4138e2:	e47c      	b.n	4131de <_dtoa_r+0x536>
  4138e4:	f04f 0800 	mov.w	r8, #0
  4138e8:	4646      	mov	r6, r8
  4138ea:	e70d      	b.n	413708 <_dtoa_r+0xa60>
  4138ec:	4976      	ldr	r1, [pc, #472]	; (413ac8 <_dtoa_r+0xe20>)
  4138ee:	f108 35ff 	add.w	r5, r8, #4294967295
  4138f2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4138f6:	4632      	mov	r2, r6
  4138f8:	463b      	mov	r3, r7
  4138fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4138fe:	9510      	str	r5, [sp, #64]	; 0x40
  413900:	f004 f85e 	bl	4179c0 <__aeabi_dmul>
  413904:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  413908:	4659      	mov	r1, fp
  41390a:	4650      	mov	r0, sl
  41390c:	f004 faf2 	bl	417ef4 <__aeabi_d2iz>
  413910:	4605      	mov	r5, r0
  413912:	f003 ffef 	bl	4178f4 <__aeabi_i2d>
  413916:	4602      	mov	r2, r0
  413918:	460b      	mov	r3, r1
  41391a:	4650      	mov	r0, sl
  41391c:	4659      	mov	r1, fp
  41391e:	f003 fe9b 	bl	417658 <__aeabi_dsub>
  413922:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  413926:	3530      	adds	r5, #48	; 0x30
  413928:	f1b8 0f01 	cmp.w	r8, #1
  41392c:	4606      	mov	r6, r0
  41392e:	460f      	mov	r7, r1
  413930:	f88e 5000 	strb.w	r5, [lr]
  413934:	f10e 0b01 	add.w	fp, lr, #1
  413938:	d01e      	beq.n	413978 <_dtoa_r+0xcd0>
  41393a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41393c:	1e6b      	subs	r3, r5, #1
  41393e:	eb03 0a08 	add.w	sl, r3, r8
  413942:	2200      	movs	r2, #0
  413944:	4b62      	ldr	r3, [pc, #392]	; (413ad0 <_dtoa_r+0xe28>)
  413946:	f004 f83b 	bl	4179c0 <__aeabi_dmul>
  41394a:	460f      	mov	r7, r1
  41394c:	4606      	mov	r6, r0
  41394e:	f004 fad1 	bl	417ef4 <__aeabi_d2iz>
  413952:	4680      	mov	r8, r0
  413954:	f003 ffce 	bl	4178f4 <__aeabi_i2d>
  413958:	f108 0830 	add.w	r8, r8, #48	; 0x30
  41395c:	4602      	mov	r2, r0
  41395e:	460b      	mov	r3, r1
  413960:	4630      	mov	r0, r6
  413962:	4639      	mov	r1, r7
  413964:	f003 fe78 	bl	417658 <__aeabi_dsub>
  413968:	f805 8f01 	strb.w	r8, [r5, #1]!
  41396c:	4555      	cmp	r5, sl
  41396e:	d1e8      	bne.n	413942 <_dtoa_r+0xc9a>
  413970:	9d10      	ldr	r5, [sp, #64]	; 0x40
  413972:	4606      	mov	r6, r0
  413974:	460f      	mov	r7, r1
  413976:	44ab      	add	fp, r5
  413978:	2200      	movs	r2, #0
  41397a:	4b56      	ldr	r3, [pc, #344]	; (413ad4 <_dtoa_r+0xe2c>)
  41397c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  413980:	f003 fe6c 	bl	41765c <__adddf3>
  413984:	4632      	mov	r2, r6
  413986:	463b      	mov	r3, r7
  413988:	f004 fa8c 	bl	417ea4 <__aeabi_dcmplt>
  41398c:	2800      	cmp	r0, #0
  41398e:	d04d      	beq.n	413a2c <_dtoa_r+0xd84>
  413990:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  413992:	9607      	str	r6, [sp, #28]
  413994:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  413998:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41399a:	f7ff bb4b 	b.w	413034 <_dtoa_r+0x38c>
  41399e:	9e08      	ldr	r6, [sp, #32]
  4139a0:	2300      	movs	r3, #0
  4139a2:	ebc9 0506 	rsb	r5, r9, r6
  4139a6:	f7ff bb76 	b.w	413096 <_dtoa_r+0x3ee>
  4139aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4139ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4139ae:	9d08      	ldr	r5, [sp, #32]
  4139b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4139b4:	f7ff bb6f 	b.w	413096 <_dtoa_r+0x3ee>
  4139b8:	4657      	mov	r7, sl
  4139ba:	f7ff bbb9 	b.w	413130 <_dtoa_r+0x488>
  4139be:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  4139c2:	f04f 0802 	mov.w	r8, #2
  4139c6:	e54b      	b.n	413460 <_dtoa_r+0x7b8>
  4139c8:	f1b9 0f00 	cmp.w	r9, #0
  4139cc:	f43f aeaf 	beq.w	41372e <_dtoa_r+0xa86>
  4139d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  4139d2:	2e00      	cmp	r6, #0
  4139d4:	f77f af28 	ble.w	413828 <_dtoa_r+0xb80>
  4139d8:	2200      	movs	r2, #0
  4139da:	4b3d      	ldr	r3, [pc, #244]	; (413ad0 <_dtoa_r+0xe28>)
  4139dc:	4650      	mov	r0, sl
  4139de:	4659      	mov	r1, fp
  4139e0:	f003 ffee 	bl	4179c0 <__aeabi_dmul>
  4139e4:	4682      	mov	sl, r0
  4139e6:	f108 0001 	add.w	r0, r8, #1
  4139ea:	468b      	mov	fp, r1
  4139ec:	f003 ff82 	bl	4178f4 <__aeabi_i2d>
  4139f0:	4602      	mov	r2, r0
  4139f2:	460b      	mov	r3, r1
  4139f4:	4650      	mov	r0, sl
  4139f6:	4659      	mov	r1, fp
  4139f8:	f003 ffe2 	bl	4179c0 <__aeabi_dmul>
  4139fc:	2200      	movs	r2, #0
  4139fe:	4b36      	ldr	r3, [pc, #216]	; (413ad8 <_dtoa_r+0xe30>)
  413a00:	f003 fe2c 	bl	41765c <__adddf3>
  413a04:	9d07      	ldr	r5, [sp, #28]
  413a06:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  413a0a:	3d01      	subs	r5, #1
  413a0c:	4606      	mov	r6, r0
  413a0e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  413a12:	9517      	str	r5, [sp, #92]	; 0x5c
  413a14:	e544      	b.n	4134a0 <_dtoa_r+0x7f8>
  413a16:	4635      	mov	r5, r6
  413a18:	9b06      	ldr	r3, [sp, #24]
  413a1a:	9e06      	ldr	r6, [sp, #24]
  413a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
  413a1e:	2239      	movs	r2, #57	; 0x39
  413a20:	7032      	strb	r2, [r6, #0]
  413a22:	f103 0b01 	add.w	fp, r3, #1
  413a26:	463e      	mov	r6, r7
  413a28:	f7ff bbef 	b.w	41320a <_dtoa_r+0x562>
  413a2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  413a30:	2000      	movs	r0, #0
  413a32:	4928      	ldr	r1, [pc, #160]	; (413ad4 <_dtoa_r+0xe2c>)
  413a34:	f003 fe10 	bl	417658 <__aeabi_dsub>
  413a38:	4632      	mov	r2, r6
  413a3a:	463b      	mov	r3, r7
  413a3c:	f004 fa50 	bl	417ee0 <__aeabi_dcmpgt>
  413a40:	2800      	cmp	r0, #0
  413a42:	f43f aef1 	beq.w	413828 <_dtoa_r+0xb80>
  413a46:	465b      	mov	r3, fp
  413a48:	469b      	mov	fp, r3
  413a4a:	3b01      	subs	r3, #1
  413a4c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  413a50:	2a30      	cmp	r2, #48	; 0x30
  413a52:	d0f9      	beq.n	413a48 <_dtoa_r+0xda0>
  413a54:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  413a56:	9507      	str	r5, [sp, #28]
  413a58:	f7ff baf3 	b.w	413042 <_dtoa_r+0x39a>
  413a5c:	4645      	mov	r5, r8
  413a5e:	4654      	mov	r4, sl
  413a60:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  413a62:	9607      	str	r6, [sp, #28]
  413a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
  413a66:	f7ff bae5 	b.w	413034 <_dtoa_r+0x38c>
  413a6a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  413a6e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  413a72:	d0d0      	beq.n	413a16 <_dtoa_r+0xd6e>
  413a74:	9b03      	ldr	r3, [sp, #12]
  413a76:	4635      	mov	r5, r6
  413a78:	2b00      	cmp	r3, #0
  413a7a:	9e06      	ldr	r6, [sp, #24]
  413a7c:	bfc8      	it	gt
  413a7e:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  413a82:	f886 a000 	strb.w	sl, [r6]
  413a86:	f106 0b01 	add.w	fp, r6, #1
  413a8a:	463e      	mov	r6, r7
  413a8c:	f7ff bbc3 	b.w	413216 <_dtoa_r+0x56e>
  413a90:	f47f aea9 	bne.w	4137e6 <_dtoa_r+0xb3e>
  413a94:	f01a 0f01 	tst.w	sl, #1
  413a98:	f43f aea5 	beq.w	4137e6 <_dtoa_r+0xb3e>
  413a9c:	e69d      	b.n	4137da <_dtoa_r+0xb32>
  413a9e:	4631      	mov	r1, r6
  413aa0:	4620      	mov	r0, r4
  413aa2:	220a      	movs	r2, #10
  413aa4:	2300      	movs	r3, #0
  413aa6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  413aaa:	f000 fe5d 	bl	414768 <__multadd>
  413aae:	4606      	mov	r6, r0
  413ab0:	f7ff bb6c 	b.w	41318c <_dtoa_r+0x4e4>
  413ab4:	f04f 0802 	mov.w	r8, #2
  413ab8:	e4d2      	b.n	413460 <_dtoa_r+0x7b8>
  413aba:	f43f ab52 	beq.w	413162 <_dtoa_r+0x4ba>
  413abe:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  413ac2:	f7ff bbe2 	b.w	41328a <_dtoa_r+0x5e2>
  413ac6:	bf00      	nop
  413ac8:	004193c8 	.word	0x004193c8
  413acc:	00419490 	.word	0x00419490
  413ad0:	40240000 	.word	0x40240000
  413ad4:	3fe00000 	.word	0x3fe00000
  413ad8:	401c0000 	.word	0x401c0000
  413adc:	f3af 8000 	nop.w

00413ae0 <__sflush_r>:
  413ae0:	898b      	ldrh	r3, [r1, #12]
  413ae2:	b29a      	uxth	r2, r3
  413ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413ae8:	460d      	mov	r5, r1
  413aea:	0711      	lsls	r1, r2, #28
  413aec:	4680      	mov	r8, r0
  413aee:	d43c      	bmi.n	413b6a <__sflush_r+0x8a>
  413af0:	686a      	ldr	r2, [r5, #4]
  413af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  413af6:	2a00      	cmp	r2, #0
  413af8:	81ab      	strh	r3, [r5, #12]
  413afa:	dd59      	ble.n	413bb0 <__sflush_r+0xd0>
  413afc:	6aac      	ldr	r4, [r5, #40]	; 0x28
  413afe:	2c00      	cmp	r4, #0
  413b00:	d04b      	beq.n	413b9a <__sflush_r+0xba>
  413b02:	b29b      	uxth	r3, r3
  413b04:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  413b08:	2100      	movs	r1, #0
  413b0a:	b292      	uxth	r2, r2
  413b0c:	f8d8 6000 	ldr.w	r6, [r8]
  413b10:	f8c8 1000 	str.w	r1, [r8]
  413b14:	2a00      	cmp	r2, #0
  413b16:	d04f      	beq.n	413bb8 <__sflush_r+0xd8>
  413b18:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  413b1a:	075f      	lsls	r7, r3, #29
  413b1c:	d505      	bpl.n	413b2a <__sflush_r+0x4a>
  413b1e:	6869      	ldr	r1, [r5, #4]
  413b20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  413b22:	1a52      	subs	r2, r2, r1
  413b24:	b10b      	cbz	r3, 413b2a <__sflush_r+0x4a>
  413b26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  413b28:	1ad2      	subs	r2, r2, r3
  413b2a:	4640      	mov	r0, r8
  413b2c:	69e9      	ldr	r1, [r5, #28]
  413b2e:	2300      	movs	r3, #0
  413b30:	47a0      	blx	r4
  413b32:	1c44      	adds	r4, r0, #1
  413b34:	d04a      	beq.n	413bcc <__sflush_r+0xec>
  413b36:	89aa      	ldrh	r2, [r5, #12]
  413b38:	692b      	ldr	r3, [r5, #16]
  413b3a:	602b      	str	r3, [r5, #0]
  413b3c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  413b40:	b29b      	uxth	r3, r3
  413b42:	2200      	movs	r2, #0
  413b44:	606a      	str	r2, [r5, #4]
  413b46:	04da      	lsls	r2, r3, #19
  413b48:	81ab      	strh	r3, [r5, #12]
  413b4a:	d44c      	bmi.n	413be6 <__sflush_r+0x106>
  413b4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  413b4e:	f8c8 6000 	str.w	r6, [r8]
  413b52:	b311      	cbz	r1, 413b9a <__sflush_r+0xba>
  413b54:	f105 0340 	add.w	r3, r5, #64	; 0x40
  413b58:	4299      	cmp	r1, r3
  413b5a:	d002      	beq.n	413b62 <__sflush_r+0x82>
  413b5c:	4640      	mov	r0, r8
  413b5e:	f000 f9c7 	bl	413ef0 <_free_r>
  413b62:	2000      	movs	r0, #0
  413b64:	6328      	str	r0, [r5, #48]	; 0x30
  413b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413b6a:	692e      	ldr	r6, [r5, #16]
  413b6c:	b1ae      	cbz	r6, 413b9a <__sflush_r+0xba>
  413b6e:	682c      	ldr	r4, [r5, #0]
  413b70:	602e      	str	r6, [r5, #0]
  413b72:	0791      	lsls	r1, r2, #30
  413b74:	bf0c      	ite	eq
  413b76:	696b      	ldreq	r3, [r5, #20]
  413b78:	2300      	movne	r3, #0
  413b7a:	1ba4      	subs	r4, r4, r6
  413b7c:	60ab      	str	r3, [r5, #8]
  413b7e:	e00a      	b.n	413b96 <__sflush_r+0xb6>
  413b80:	4632      	mov	r2, r6
  413b82:	4623      	mov	r3, r4
  413b84:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  413b86:	69e9      	ldr	r1, [r5, #28]
  413b88:	4640      	mov	r0, r8
  413b8a:	47b8      	blx	r7
  413b8c:	2800      	cmp	r0, #0
  413b8e:	ebc0 0404 	rsb	r4, r0, r4
  413b92:	4406      	add	r6, r0
  413b94:	dd04      	ble.n	413ba0 <__sflush_r+0xc0>
  413b96:	2c00      	cmp	r4, #0
  413b98:	dcf2      	bgt.n	413b80 <__sflush_r+0xa0>
  413b9a:	2000      	movs	r0, #0
  413b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413ba0:	89ab      	ldrh	r3, [r5, #12]
  413ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413ba6:	81ab      	strh	r3, [r5, #12]
  413ba8:	f04f 30ff 	mov.w	r0, #4294967295
  413bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413bb0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  413bb2:	2a00      	cmp	r2, #0
  413bb4:	dca2      	bgt.n	413afc <__sflush_r+0x1c>
  413bb6:	e7f0      	b.n	413b9a <__sflush_r+0xba>
  413bb8:	2301      	movs	r3, #1
  413bba:	4640      	mov	r0, r8
  413bbc:	69e9      	ldr	r1, [r5, #28]
  413bbe:	47a0      	blx	r4
  413bc0:	1c43      	adds	r3, r0, #1
  413bc2:	4602      	mov	r2, r0
  413bc4:	d01e      	beq.n	413c04 <__sflush_r+0x124>
  413bc6:	89ab      	ldrh	r3, [r5, #12]
  413bc8:	6aac      	ldr	r4, [r5, #40]	; 0x28
  413bca:	e7a6      	b.n	413b1a <__sflush_r+0x3a>
  413bcc:	f8d8 3000 	ldr.w	r3, [r8]
  413bd0:	b95b      	cbnz	r3, 413bea <__sflush_r+0x10a>
  413bd2:	89a9      	ldrh	r1, [r5, #12]
  413bd4:	606b      	str	r3, [r5, #4]
  413bd6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  413bda:	b29b      	uxth	r3, r3
  413bdc:	692a      	ldr	r2, [r5, #16]
  413bde:	81ab      	strh	r3, [r5, #12]
  413be0:	04db      	lsls	r3, r3, #19
  413be2:	602a      	str	r2, [r5, #0]
  413be4:	d5b2      	bpl.n	413b4c <__sflush_r+0x6c>
  413be6:	6528      	str	r0, [r5, #80]	; 0x50
  413be8:	e7b0      	b.n	413b4c <__sflush_r+0x6c>
  413bea:	2b1d      	cmp	r3, #29
  413bec:	d001      	beq.n	413bf2 <__sflush_r+0x112>
  413bee:	2b16      	cmp	r3, #22
  413bf0:	d119      	bne.n	413c26 <__sflush_r+0x146>
  413bf2:	89aa      	ldrh	r2, [r5, #12]
  413bf4:	692b      	ldr	r3, [r5, #16]
  413bf6:	602b      	str	r3, [r5, #0]
  413bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  413bfc:	2300      	movs	r3, #0
  413bfe:	81aa      	strh	r2, [r5, #12]
  413c00:	606b      	str	r3, [r5, #4]
  413c02:	e7a3      	b.n	413b4c <__sflush_r+0x6c>
  413c04:	f8d8 3000 	ldr.w	r3, [r8]
  413c08:	2b00      	cmp	r3, #0
  413c0a:	d0dc      	beq.n	413bc6 <__sflush_r+0xe6>
  413c0c:	2b1d      	cmp	r3, #29
  413c0e:	d007      	beq.n	413c20 <__sflush_r+0x140>
  413c10:	2b16      	cmp	r3, #22
  413c12:	d005      	beq.n	413c20 <__sflush_r+0x140>
  413c14:	89ab      	ldrh	r3, [r5, #12]
  413c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413c1a:	81ab      	strh	r3, [r5, #12]
  413c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413c20:	f8c8 6000 	str.w	r6, [r8]
  413c24:	e7b9      	b.n	413b9a <__sflush_r+0xba>
  413c26:	89ab      	ldrh	r3, [r5, #12]
  413c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413c2c:	81ab      	strh	r3, [r5, #12]
  413c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413c32:	bf00      	nop

00413c34 <_fflush_r>:
  413c34:	b510      	push	{r4, lr}
  413c36:	4604      	mov	r4, r0
  413c38:	b082      	sub	sp, #8
  413c3a:	b108      	cbz	r0, 413c40 <_fflush_r+0xc>
  413c3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  413c3e:	b153      	cbz	r3, 413c56 <_fflush_r+0x22>
  413c40:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  413c44:	b908      	cbnz	r0, 413c4a <_fflush_r+0x16>
  413c46:	b002      	add	sp, #8
  413c48:	bd10      	pop	{r4, pc}
  413c4a:	4620      	mov	r0, r4
  413c4c:	b002      	add	sp, #8
  413c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  413c52:	f7ff bf45 	b.w	413ae0 <__sflush_r>
  413c56:	9101      	str	r1, [sp, #4]
  413c58:	f000 f808 	bl	413c6c <__sinit>
  413c5c:	9901      	ldr	r1, [sp, #4]
  413c5e:	e7ef      	b.n	413c40 <_fflush_r+0xc>

00413c60 <_cleanup_r>:
  413c60:	4901      	ldr	r1, [pc, #4]	; (413c68 <_cleanup_r+0x8>)
  413c62:	f000 bb9f 	b.w	4143a4 <_fwalk>
  413c66:	bf00      	nop
  413c68:	00416e91 	.word	0x00416e91

00413c6c <__sinit>:
  413c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413c70:	6b84      	ldr	r4, [r0, #56]	; 0x38
  413c72:	b083      	sub	sp, #12
  413c74:	4607      	mov	r7, r0
  413c76:	2c00      	cmp	r4, #0
  413c78:	d165      	bne.n	413d46 <__sinit+0xda>
  413c7a:	6845      	ldr	r5, [r0, #4]
  413c7c:	4833      	ldr	r0, [pc, #204]	; (413d4c <__sinit+0xe0>)
  413c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
  413c80:	2304      	movs	r3, #4
  413c82:	2103      	movs	r1, #3
  413c84:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  413c88:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  413c8c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  413c90:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  413c94:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  413c98:	81ab      	strh	r3, [r5, #12]
  413c9a:	602c      	str	r4, [r5, #0]
  413c9c:	606c      	str	r4, [r5, #4]
  413c9e:	60ac      	str	r4, [r5, #8]
  413ca0:	666c      	str	r4, [r5, #100]	; 0x64
  413ca2:	81ec      	strh	r4, [r5, #14]
  413ca4:	612c      	str	r4, [r5, #16]
  413ca6:	616c      	str	r4, [r5, #20]
  413ca8:	61ac      	str	r4, [r5, #24]
  413caa:	4621      	mov	r1, r4
  413cac:	2208      	movs	r2, #8
  413cae:	f7fb fa6f 	bl	40f190 <memset>
  413cb2:	68be      	ldr	r6, [r7, #8]
  413cb4:	f8df b098 	ldr.w	fp, [pc, #152]	; 413d50 <__sinit+0xe4>
  413cb8:	f8df a098 	ldr.w	sl, [pc, #152]	; 413d54 <__sinit+0xe8>
  413cbc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 413d58 <__sinit+0xec>
  413cc0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 413d5c <__sinit+0xf0>
  413cc4:	61ed      	str	r5, [r5, #28]
  413cc6:	2301      	movs	r3, #1
  413cc8:	2209      	movs	r2, #9
  413cca:	f8c5 b020 	str.w	fp, [r5, #32]
  413cce:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  413cd2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  413cd6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  413cda:	4621      	mov	r1, r4
  413cdc:	81f3      	strh	r3, [r6, #14]
  413cde:	81b2      	strh	r2, [r6, #12]
  413ce0:	6034      	str	r4, [r6, #0]
  413ce2:	6074      	str	r4, [r6, #4]
  413ce4:	60b4      	str	r4, [r6, #8]
  413ce6:	6674      	str	r4, [r6, #100]	; 0x64
  413ce8:	6134      	str	r4, [r6, #16]
  413cea:	6174      	str	r4, [r6, #20]
  413cec:	61b4      	str	r4, [r6, #24]
  413cee:	2208      	movs	r2, #8
  413cf0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  413cf4:	9301      	str	r3, [sp, #4]
  413cf6:	f7fb fa4b 	bl	40f190 <memset>
  413cfa:	68fd      	ldr	r5, [r7, #12]
  413cfc:	61f6      	str	r6, [r6, #28]
  413cfe:	2012      	movs	r0, #18
  413d00:	2202      	movs	r2, #2
  413d02:	f8c6 b020 	str.w	fp, [r6, #32]
  413d06:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  413d0a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  413d0e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  413d12:	4621      	mov	r1, r4
  413d14:	81a8      	strh	r0, [r5, #12]
  413d16:	81ea      	strh	r2, [r5, #14]
  413d18:	602c      	str	r4, [r5, #0]
  413d1a:	606c      	str	r4, [r5, #4]
  413d1c:	60ac      	str	r4, [r5, #8]
  413d1e:	666c      	str	r4, [r5, #100]	; 0x64
  413d20:	612c      	str	r4, [r5, #16]
  413d22:	616c      	str	r4, [r5, #20]
  413d24:	61ac      	str	r4, [r5, #24]
  413d26:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  413d2a:	2208      	movs	r2, #8
  413d2c:	f7fb fa30 	bl	40f190 <memset>
  413d30:	9b01      	ldr	r3, [sp, #4]
  413d32:	61ed      	str	r5, [r5, #28]
  413d34:	f8c5 b020 	str.w	fp, [r5, #32]
  413d38:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  413d3c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  413d40:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  413d44:	63bb      	str	r3, [r7, #56]	; 0x38
  413d46:	b003      	add	sp, #12
  413d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413d4c:	00413c61 	.word	0x00413c61
  413d50:	0040f46d 	.word	0x0040f46d
  413d54:	0040f495 	.word	0x0040f495
  413d58:	0040f4cd 	.word	0x0040f4cd
  413d5c:	0040f4ed 	.word	0x0040f4ed

00413d60 <__sfp_lock_acquire>:
  413d60:	4770      	bx	lr
  413d62:	bf00      	nop

00413d64 <__sfp_lock_release>:
  413d64:	4770      	bx	lr
  413d66:	bf00      	nop

00413d68 <__libc_fini_array>:
  413d68:	b538      	push	{r3, r4, r5, lr}
  413d6a:	4d09      	ldr	r5, [pc, #36]	; (413d90 <__libc_fini_array+0x28>)
  413d6c:	4c09      	ldr	r4, [pc, #36]	; (413d94 <__libc_fini_array+0x2c>)
  413d6e:	1b64      	subs	r4, r4, r5
  413d70:	10a4      	asrs	r4, r4, #2
  413d72:	bf18      	it	ne
  413d74:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  413d78:	d005      	beq.n	413d86 <__libc_fini_array+0x1e>
  413d7a:	3c01      	subs	r4, #1
  413d7c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  413d80:	4798      	blx	r3
  413d82:	2c00      	cmp	r4, #0
  413d84:	d1f9      	bne.n	413d7a <__libc_fini_array+0x12>
  413d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  413d8a:	f005 bc57 	b.w	41963c <_fini>
  413d8e:	bf00      	nop
  413d90:	00419648 	.word	0x00419648
  413d94:	0041964c 	.word	0x0041964c

00413d98 <_fputwc_r>:
  413d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413d9c:	8993      	ldrh	r3, [r2, #12]
  413d9e:	460f      	mov	r7, r1
  413da0:	0499      	lsls	r1, r3, #18
  413da2:	b082      	sub	sp, #8
  413da4:	4614      	mov	r4, r2
  413da6:	4680      	mov	r8, r0
  413da8:	d406      	bmi.n	413db8 <_fputwc_r+0x20>
  413daa:	6e52      	ldr	r2, [r2, #100]	; 0x64
  413dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  413db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  413db4:	81a3      	strh	r3, [r4, #12]
  413db6:	6662      	str	r2, [r4, #100]	; 0x64
  413db8:	f000 fb2c 	bl	414414 <__locale_mb_cur_max>
  413dbc:	2801      	cmp	r0, #1
  413dbe:	d03d      	beq.n	413e3c <_fputwc_r+0xa4>
  413dc0:	463a      	mov	r2, r7
  413dc2:	4640      	mov	r0, r8
  413dc4:	a901      	add	r1, sp, #4
  413dc6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  413dca:	f002 ff67 	bl	416c9c <_wcrtomb_r>
  413dce:	1c42      	adds	r2, r0, #1
  413dd0:	4606      	mov	r6, r0
  413dd2:	d02c      	beq.n	413e2e <_fputwc_r+0x96>
  413dd4:	2800      	cmp	r0, #0
  413dd6:	d039      	beq.n	413e4c <_fputwc_r+0xb4>
  413dd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  413ddc:	2500      	movs	r5, #0
  413dde:	e009      	b.n	413df4 <_fputwc_r+0x5c>
  413de0:	6823      	ldr	r3, [r4, #0]
  413de2:	7019      	strb	r1, [r3, #0]
  413de4:	6823      	ldr	r3, [r4, #0]
  413de6:	3301      	adds	r3, #1
  413de8:	6023      	str	r3, [r4, #0]
  413dea:	3501      	adds	r5, #1
  413dec:	42b5      	cmp	r5, r6
  413dee:	d22d      	bcs.n	413e4c <_fputwc_r+0xb4>
  413df0:	ab01      	add	r3, sp, #4
  413df2:	5ce9      	ldrb	r1, [r5, r3]
  413df4:	68a3      	ldr	r3, [r4, #8]
  413df6:	3b01      	subs	r3, #1
  413df8:	2b00      	cmp	r3, #0
  413dfa:	60a3      	str	r3, [r4, #8]
  413dfc:	daf0      	bge.n	413de0 <_fputwc_r+0x48>
  413dfe:	69a2      	ldr	r2, [r4, #24]
  413e00:	4293      	cmp	r3, r2
  413e02:	db05      	blt.n	413e10 <_fputwc_r+0x78>
  413e04:	6823      	ldr	r3, [r4, #0]
  413e06:	7019      	strb	r1, [r3, #0]
  413e08:	6823      	ldr	r3, [r4, #0]
  413e0a:	7819      	ldrb	r1, [r3, #0]
  413e0c:	290a      	cmp	r1, #10
  413e0e:	d1ea      	bne.n	413de6 <_fputwc_r+0x4e>
  413e10:	4640      	mov	r0, r8
  413e12:	4622      	mov	r2, r4
  413e14:	f002 feee 	bl	416bf4 <__swbuf_r>
  413e18:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  413e1c:	4258      	negs	r0, r3
  413e1e:	4158      	adcs	r0, r3
  413e20:	2800      	cmp	r0, #0
  413e22:	d0e2      	beq.n	413dea <_fputwc_r+0x52>
  413e24:	f04f 30ff 	mov.w	r0, #4294967295
  413e28:	b002      	add	sp, #8
  413e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413e2e:	89a3      	ldrh	r3, [r4, #12]
  413e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413e34:	81a3      	strh	r3, [r4, #12]
  413e36:	b002      	add	sp, #8
  413e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413e3c:	1e7b      	subs	r3, r7, #1
  413e3e:	2bfe      	cmp	r3, #254	; 0xfe
  413e40:	d8be      	bhi.n	413dc0 <_fputwc_r+0x28>
  413e42:	b2f9      	uxtb	r1, r7
  413e44:	4606      	mov	r6, r0
  413e46:	f88d 1004 	strb.w	r1, [sp, #4]
  413e4a:	e7c7      	b.n	413ddc <_fputwc_r+0x44>
  413e4c:	4638      	mov	r0, r7
  413e4e:	b002      	add	sp, #8
  413e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00413e54 <_malloc_trim_r>:
  413e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413e56:	4d23      	ldr	r5, [pc, #140]	; (413ee4 <_malloc_trim_r+0x90>)
  413e58:	460f      	mov	r7, r1
  413e5a:	4604      	mov	r4, r0
  413e5c:	f7fb f9e2 	bl	40f224 <__malloc_lock>
  413e60:	68ab      	ldr	r3, [r5, #8]
  413e62:	685e      	ldr	r6, [r3, #4]
  413e64:	f026 0603 	bic.w	r6, r6, #3
  413e68:	1bf1      	subs	r1, r6, r7
  413e6a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  413e6e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  413e72:	f021 010f 	bic.w	r1, r1, #15
  413e76:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  413e7a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  413e7e:	db07      	blt.n	413e90 <_malloc_trim_r+0x3c>
  413e80:	4620      	mov	r0, r4
  413e82:	2100      	movs	r1, #0
  413e84:	f7fb f9d2 	bl	40f22c <_sbrk_r>
  413e88:	68ab      	ldr	r3, [r5, #8]
  413e8a:	4433      	add	r3, r6
  413e8c:	4298      	cmp	r0, r3
  413e8e:	d004      	beq.n	413e9a <_malloc_trim_r+0x46>
  413e90:	4620      	mov	r0, r4
  413e92:	f7fb f9c9 	bl	40f228 <__malloc_unlock>
  413e96:	2000      	movs	r0, #0
  413e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413e9a:	4620      	mov	r0, r4
  413e9c:	4279      	negs	r1, r7
  413e9e:	f7fb f9c5 	bl	40f22c <_sbrk_r>
  413ea2:	3001      	adds	r0, #1
  413ea4:	d00d      	beq.n	413ec2 <_malloc_trim_r+0x6e>
  413ea6:	4b10      	ldr	r3, [pc, #64]	; (413ee8 <_malloc_trim_r+0x94>)
  413ea8:	68aa      	ldr	r2, [r5, #8]
  413eaa:	6819      	ldr	r1, [r3, #0]
  413eac:	1bf6      	subs	r6, r6, r7
  413eae:	f046 0601 	orr.w	r6, r6, #1
  413eb2:	4620      	mov	r0, r4
  413eb4:	1bc9      	subs	r1, r1, r7
  413eb6:	6056      	str	r6, [r2, #4]
  413eb8:	6019      	str	r1, [r3, #0]
  413eba:	f7fb f9b5 	bl	40f228 <__malloc_unlock>
  413ebe:	2001      	movs	r0, #1
  413ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413ec2:	4620      	mov	r0, r4
  413ec4:	2100      	movs	r1, #0
  413ec6:	f7fb f9b1 	bl	40f22c <_sbrk_r>
  413eca:	68ab      	ldr	r3, [r5, #8]
  413ecc:	1ac2      	subs	r2, r0, r3
  413ece:	2a0f      	cmp	r2, #15
  413ed0:	ddde      	ble.n	413e90 <_malloc_trim_r+0x3c>
  413ed2:	4d06      	ldr	r5, [pc, #24]	; (413eec <_malloc_trim_r+0x98>)
  413ed4:	4904      	ldr	r1, [pc, #16]	; (413ee8 <_malloc_trim_r+0x94>)
  413ed6:	682d      	ldr	r5, [r5, #0]
  413ed8:	f042 0201 	orr.w	r2, r2, #1
  413edc:	1b40      	subs	r0, r0, r5
  413ede:	605a      	str	r2, [r3, #4]
  413ee0:	6008      	str	r0, [r1, #0]
  413ee2:	e7d5      	b.n	413e90 <_malloc_trim_r+0x3c>
  413ee4:	2000091c 	.word	0x2000091c
  413ee8:	20001f4c 	.word	0x20001f4c
  413eec:	20000d28 	.word	0x20000d28

00413ef0 <_free_r>:
  413ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413ef4:	460d      	mov	r5, r1
  413ef6:	4606      	mov	r6, r0
  413ef8:	2900      	cmp	r1, #0
  413efa:	d055      	beq.n	413fa8 <_free_r+0xb8>
  413efc:	f7fb f992 	bl	40f224 <__malloc_lock>
  413f00:	f855 1c04 	ldr.w	r1, [r5, #-4]
  413f04:	f8df c174 	ldr.w	ip, [pc, #372]	; 41407c <_free_r+0x18c>
  413f08:	f021 0301 	bic.w	r3, r1, #1
  413f0c:	f1a5 0408 	sub.w	r4, r5, #8
  413f10:	18e2      	adds	r2, r4, r3
  413f12:	f8dc 0008 	ldr.w	r0, [ip, #8]
  413f16:	6857      	ldr	r7, [r2, #4]
  413f18:	4290      	cmp	r0, r2
  413f1a:	f027 0703 	bic.w	r7, r7, #3
  413f1e:	d069      	beq.n	413ff4 <_free_r+0x104>
  413f20:	f011 0101 	ands.w	r1, r1, #1
  413f24:	6057      	str	r7, [r2, #4]
  413f26:	d032      	beq.n	413f8e <_free_r+0x9e>
  413f28:	2100      	movs	r1, #0
  413f2a:	19d0      	adds	r0, r2, r7
  413f2c:	6840      	ldr	r0, [r0, #4]
  413f2e:	07c0      	lsls	r0, r0, #31
  413f30:	d406      	bmi.n	413f40 <_free_r+0x50>
  413f32:	443b      	add	r3, r7
  413f34:	6890      	ldr	r0, [r2, #8]
  413f36:	2900      	cmp	r1, #0
  413f38:	d04e      	beq.n	413fd8 <_free_r+0xe8>
  413f3a:	68d2      	ldr	r2, [r2, #12]
  413f3c:	60c2      	str	r2, [r0, #12]
  413f3e:	6090      	str	r0, [r2, #8]
  413f40:	f043 0201 	orr.w	r2, r3, #1
  413f44:	6062      	str	r2, [r4, #4]
  413f46:	50e3      	str	r3, [r4, r3]
  413f48:	b9e1      	cbnz	r1, 413f84 <_free_r+0x94>
  413f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  413f4e:	d32d      	bcc.n	413fac <_free_r+0xbc>
  413f50:	0a5a      	lsrs	r2, r3, #9
  413f52:	2a04      	cmp	r2, #4
  413f54:	d86a      	bhi.n	41402c <_free_r+0x13c>
  413f56:	0998      	lsrs	r0, r3, #6
  413f58:	3038      	adds	r0, #56	; 0x38
  413f5a:	0041      	lsls	r1, r0, #1
  413f5c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  413f60:	4946      	ldr	r1, [pc, #280]	; (41407c <_free_r+0x18c>)
  413f62:	f8dc 2008 	ldr.w	r2, [ip, #8]
  413f66:	4562      	cmp	r2, ip
  413f68:	d066      	beq.n	414038 <_free_r+0x148>
  413f6a:	6851      	ldr	r1, [r2, #4]
  413f6c:	f021 0103 	bic.w	r1, r1, #3
  413f70:	428b      	cmp	r3, r1
  413f72:	d202      	bcs.n	413f7a <_free_r+0x8a>
  413f74:	6892      	ldr	r2, [r2, #8]
  413f76:	4594      	cmp	ip, r2
  413f78:	d1f7      	bne.n	413f6a <_free_r+0x7a>
  413f7a:	68d3      	ldr	r3, [r2, #12]
  413f7c:	60e3      	str	r3, [r4, #12]
  413f7e:	60a2      	str	r2, [r4, #8]
  413f80:	609c      	str	r4, [r3, #8]
  413f82:	60d4      	str	r4, [r2, #12]
  413f84:	4630      	mov	r0, r6
  413f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  413f8a:	f7fb b94d 	b.w	40f228 <__malloc_unlock>
  413f8e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  413f92:	1b64      	subs	r4, r4, r5
  413f94:	f10c 0808 	add.w	r8, ip, #8
  413f98:	68a0      	ldr	r0, [r4, #8]
  413f9a:	4540      	cmp	r0, r8
  413f9c:	442b      	add	r3, r5
  413f9e:	d043      	beq.n	414028 <_free_r+0x138>
  413fa0:	68e5      	ldr	r5, [r4, #12]
  413fa2:	60c5      	str	r5, [r0, #12]
  413fa4:	60a8      	str	r0, [r5, #8]
  413fa6:	e7c0      	b.n	413f2a <_free_r+0x3a>
  413fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413fac:	08db      	lsrs	r3, r3, #3
  413fae:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  413fb2:	2501      	movs	r5, #1
  413fb4:	f8dc 0004 	ldr.w	r0, [ip, #4]
  413fb8:	6891      	ldr	r1, [r2, #8]
  413fba:	60a1      	str	r1, [r4, #8]
  413fbc:	109b      	asrs	r3, r3, #2
  413fbe:	fa05 f303 	lsl.w	r3, r5, r3
  413fc2:	4318      	orrs	r0, r3
  413fc4:	60e2      	str	r2, [r4, #12]
  413fc6:	f8cc 0004 	str.w	r0, [ip, #4]
  413fca:	6094      	str	r4, [r2, #8]
  413fcc:	4630      	mov	r0, r6
  413fce:	60cc      	str	r4, [r1, #12]
  413fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  413fd4:	f7fb b928 	b.w	40f228 <__malloc_unlock>
  413fd8:	4d29      	ldr	r5, [pc, #164]	; (414080 <_free_r+0x190>)
  413fda:	42a8      	cmp	r0, r5
  413fdc:	d1ad      	bne.n	413f3a <_free_r+0x4a>
  413fde:	f043 0201 	orr.w	r2, r3, #1
  413fe2:	f8cc 4014 	str.w	r4, [ip, #20]
  413fe6:	f8cc 4010 	str.w	r4, [ip, #16]
  413fea:	60e0      	str	r0, [r4, #12]
  413fec:	60a0      	str	r0, [r4, #8]
  413fee:	6062      	str	r2, [r4, #4]
  413ff0:	50e3      	str	r3, [r4, r3]
  413ff2:	e7c7      	b.n	413f84 <_free_r+0x94>
  413ff4:	441f      	add	r7, r3
  413ff6:	07cb      	lsls	r3, r1, #31
  413ff8:	d407      	bmi.n	41400a <_free_r+0x11a>
  413ffa:	f855 3c08 	ldr.w	r3, [r5, #-8]
  413ffe:	1ae4      	subs	r4, r4, r3
  414000:	441f      	add	r7, r3
  414002:	68a2      	ldr	r2, [r4, #8]
  414004:	68e3      	ldr	r3, [r4, #12]
  414006:	60d3      	str	r3, [r2, #12]
  414008:	609a      	str	r2, [r3, #8]
  41400a:	4b1e      	ldr	r3, [pc, #120]	; (414084 <_free_r+0x194>)
  41400c:	681b      	ldr	r3, [r3, #0]
  41400e:	f047 0201 	orr.w	r2, r7, #1
  414012:	429f      	cmp	r7, r3
  414014:	6062      	str	r2, [r4, #4]
  414016:	f8cc 4008 	str.w	r4, [ip, #8]
  41401a:	d3b3      	bcc.n	413f84 <_free_r+0x94>
  41401c:	4b1a      	ldr	r3, [pc, #104]	; (414088 <_free_r+0x198>)
  41401e:	4630      	mov	r0, r6
  414020:	6819      	ldr	r1, [r3, #0]
  414022:	f7ff ff17 	bl	413e54 <_malloc_trim_r>
  414026:	e7ad      	b.n	413f84 <_free_r+0x94>
  414028:	2101      	movs	r1, #1
  41402a:	e77e      	b.n	413f2a <_free_r+0x3a>
  41402c:	2a14      	cmp	r2, #20
  41402e:	d80c      	bhi.n	41404a <_free_r+0x15a>
  414030:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  414034:	0041      	lsls	r1, r0, #1
  414036:	e791      	b.n	413f5c <_free_r+0x6c>
  414038:	684b      	ldr	r3, [r1, #4]
  41403a:	1080      	asrs	r0, r0, #2
  41403c:	2501      	movs	r5, #1
  41403e:	fa05 f000 	lsl.w	r0, r5, r0
  414042:	4303      	orrs	r3, r0
  414044:	604b      	str	r3, [r1, #4]
  414046:	4613      	mov	r3, r2
  414048:	e798      	b.n	413f7c <_free_r+0x8c>
  41404a:	2a54      	cmp	r2, #84	; 0x54
  41404c:	d803      	bhi.n	414056 <_free_r+0x166>
  41404e:	0b18      	lsrs	r0, r3, #12
  414050:	306e      	adds	r0, #110	; 0x6e
  414052:	0041      	lsls	r1, r0, #1
  414054:	e782      	b.n	413f5c <_free_r+0x6c>
  414056:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41405a:	d803      	bhi.n	414064 <_free_r+0x174>
  41405c:	0bd8      	lsrs	r0, r3, #15
  41405e:	3077      	adds	r0, #119	; 0x77
  414060:	0041      	lsls	r1, r0, #1
  414062:	e77b      	b.n	413f5c <_free_r+0x6c>
  414064:	f240 5154 	movw	r1, #1364	; 0x554
  414068:	428a      	cmp	r2, r1
  41406a:	d803      	bhi.n	414074 <_free_r+0x184>
  41406c:	0c98      	lsrs	r0, r3, #18
  41406e:	307c      	adds	r0, #124	; 0x7c
  414070:	0041      	lsls	r1, r0, #1
  414072:	e773      	b.n	413f5c <_free_r+0x6c>
  414074:	21fc      	movs	r1, #252	; 0xfc
  414076:	207e      	movs	r0, #126	; 0x7e
  414078:	e770      	b.n	413f5c <_free_r+0x6c>
  41407a:	bf00      	nop
  41407c:	2000091c 	.word	0x2000091c
  414080:	20000924 	.word	0x20000924
  414084:	20000d24 	.word	0x20000d24
  414088:	20001f48 	.word	0x20001f48

0041408c <__sfvwrite_r>:
  41408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414090:	6893      	ldr	r3, [r2, #8]
  414092:	b083      	sub	sp, #12
  414094:	4616      	mov	r6, r2
  414096:	4681      	mov	r9, r0
  414098:	460c      	mov	r4, r1
  41409a:	b32b      	cbz	r3, 4140e8 <__sfvwrite_r+0x5c>
  41409c:	898b      	ldrh	r3, [r1, #12]
  41409e:	0719      	lsls	r1, r3, #28
  4140a0:	d526      	bpl.n	4140f0 <__sfvwrite_r+0x64>
  4140a2:	6922      	ldr	r2, [r4, #16]
  4140a4:	b322      	cbz	r2, 4140f0 <__sfvwrite_r+0x64>
  4140a6:	f003 0202 	and.w	r2, r3, #2
  4140aa:	b292      	uxth	r2, r2
  4140ac:	6835      	ldr	r5, [r6, #0]
  4140ae:	2a00      	cmp	r2, #0
  4140b0:	d02c      	beq.n	41410c <__sfvwrite_r+0x80>
  4140b2:	f04f 0a00 	mov.w	sl, #0
  4140b6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 4143a0 <__sfvwrite_r+0x314>
  4140ba:	46d0      	mov	r8, sl
  4140bc:	45d8      	cmp	r8, fp
  4140be:	bf34      	ite	cc
  4140c0:	4643      	movcc	r3, r8
  4140c2:	465b      	movcs	r3, fp
  4140c4:	4652      	mov	r2, sl
  4140c6:	4648      	mov	r0, r9
  4140c8:	f1b8 0f00 	cmp.w	r8, #0
  4140cc:	d04f      	beq.n	41416e <__sfvwrite_r+0xe2>
  4140ce:	69e1      	ldr	r1, [r4, #28]
  4140d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4140d2:	47b8      	blx	r7
  4140d4:	2800      	cmp	r0, #0
  4140d6:	dd56      	ble.n	414186 <__sfvwrite_r+0xfa>
  4140d8:	68b3      	ldr	r3, [r6, #8]
  4140da:	1a1b      	subs	r3, r3, r0
  4140dc:	4482      	add	sl, r0
  4140de:	ebc0 0808 	rsb	r8, r0, r8
  4140e2:	60b3      	str	r3, [r6, #8]
  4140e4:	2b00      	cmp	r3, #0
  4140e6:	d1e9      	bne.n	4140bc <__sfvwrite_r+0x30>
  4140e8:	2000      	movs	r0, #0
  4140ea:	b003      	add	sp, #12
  4140ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4140f0:	4648      	mov	r0, r9
  4140f2:	4621      	mov	r1, r4
  4140f4:	f7fe fcbc 	bl	412a70 <__swsetup_r>
  4140f8:	2800      	cmp	r0, #0
  4140fa:	f040 8148 	bne.w	41438e <__sfvwrite_r+0x302>
  4140fe:	89a3      	ldrh	r3, [r4, #12]
  414100:	6835      	ldr	r5, [r6, #0]
  414102:	f003 0202 	and.w	r2, r3, #2
  414106:	b292      	uxth	r2, r2
  414108:	2a00      	cmp	r2, #0
  41410a:	d1d2      	bne.n	4140b2 <__sfvwrite_r+0x26>
  41410c:	f013 0a01 	ands.w	sl, r3, #1
  414110:	d142      	bne.n	414198 <__sfvwrite_r+0x10c>
  414112:	46d0      	mov	r8, sl
  414114:	f1b8 0f00 	cmp.w	r8, #0
  414118:	d023      	beq.n	414162 <__sfvwrite_r+0xd6>
  41411a:	059a      	lsls	r2, r3, #22
  41411c:	68a7      	ldr	r7, [r4, #8]
  41411e:	d576      	bpl.n	41420e <__sfvwrite_r+0x182>
  414120:	45b8      	cmp	r8, r7
  414122:	f0c0 80a4 	bcc.w	41426e <__sfvwrite_r+0x1e2>
  414126:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41412a:	f040 80b2 	bne.w	414292 <__sfvwrite_r+0x206>
  41412e:	6820      	ldr	r0, [r4, #0]
  414130:	46bb      	mov	fp, r7
  414132:	4651      	mov	r1, sl
  414134:	465a      	mov	r2, fp
  414136:	f000 fa87 	bl	414648 <memmove>
  41413a:	68a2      	ldr	r2, [r4, #8]
  41413c:	6821      	ldr	r1, [r4, #0]
  41413e:	1bd2      	subs	r2, r2, r7
  414140:	eb01 030b 	add.w	r3, r1, fp
  414144:	60a2      	str	r2, [r4, #8]
  414146:	6023      	str	r3, [r4, #0]
  414148:	4642      	mov	r2, r8
  41414a:	68b3      	ldr	r3, [r6, #8]
  41414c:	1a9b      	subs	r3, r3, r2
  41414e:	4492      	add	sl, r2
  414150:	ebc2 0808 	rsb	r8, r2, r8
  414154:	60b3      	str	r3, [r6, #8]
  414156:	2b00      	cmp	r3, #0
  414158:	d0c6      	beq.n	4140e8 <__sfvwrite_r+0x5c>
  41415a:	89a3      	ldrh	r3, [r4, #12]
  41415c:	f1b8 0f00 	cmp.w	r8, #0
  414160:	d1db      	bne.n	41411a <__sfvwrite_r+0x8e>
  414162:	f8d5 a000 	ldr.w	sl, [r5]
  414166:	f8d5 8004 	ldr.w	r8, [r5, #4]
  41416a:	3508      	adds	r5, #8
  41416c:	e7d2      	b.n	414114 <__sfvwrite_r+0x88>
  41416e:	f8d5 a000 	ldr.w	sl, [r5]
  414172:	f8d5 8004 	ldr.w	r8, [r5, #4]
  414176:	3508      	adds	r5, #8
  414178:	e7a0      	b.n	4140bc <__sfvwrite_r+0x30>
  41417a:	4648      	mov	r0, r9
  41417c:	4621      	mov	r1, r4
  41417e:	f7ff fd59 	bl	413c34 <_fflush_r>
  414182:	2800      	cmp	r0, #0
  414184:	d059      	beq.n	41423a <__sfvwrite_r+0x1ae>
  414186:	89a3      	ldrh	r3, [r4, #12]
  414188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41418c:	f04f 30ff 	mov.w	r0, #4294967295
  414190:	81a3      	strh	r3, [r4, #12]
  414192:	b003      	add	sp, #12
  414194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414198:	4692      	mov	sl, r2
  41419a:	9201      	str	r2, [sp, #4]
  41419c:	4693      	mov	fp, r2
  41419e:	4690      	mov	r8, r2
  4141a0:	f1b8 0f00 	cmp.w	r8, #0
  4141a4:	d02b      	beq.n	4141fe <__sfvwrite_r+0x172>
  4141a6:	9f01      	ldr	r7, [sp, #4]
  4141a8:	2f00      	cmp	r7, #0
  4141aa:	d064      	beq.n	414276 <__sfvwrite_r+0x1ea>
  4141ac:	6820      	ldr	r0, [r4, #0]
  4141ae:	6921      	ldr	r1, [r4, #16]
  4141b0:	f8d4 c008 	ldr.w	ip, [r4, #8]
  4141b4:	6962      	ldr	r2, [r4, #20]
  4141b6:	45c2      	cmp	sl, r8
  4141b8:	bf34      	ite	cc
  4141ba:	4653      	movcc	r3, sl
  4141bc:	4643      	movcs	r3, r8
  4141be:	4288      	cmp	r0, r1
  4141c0:	461f      	mov	r7, r3
  4141c2:	d903      	bls.n	4141cc <__sfvwrite_r+0x140>
  4141c4:	4494      	add	ip, r2
  4141c6:	4563      	cmp	r3, ip
  4141c8:	f300 80ae 	bgt.w	414328 <__sfvwrite_r+0x29c>
  4141cc:	4293      	cmp	r3, r2
  4141ce:	db36      	blt.n	41423e <__sfvwrite_r+0x1b2>
  4141d0:	4613      	mov	r3, r2
  4141d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4141d4:	69e1      	ldr	r1, [r4, #28]
  4141d6:	4648      	mov	r0, r9
  4141d8:	465a      	mov	r2, fp
  4141da:	47b8      	blx	r7
  4141dc:	1e07      	subs	r7, r0, #0
  4141de:	ddd2      	ble.n	414186 <__sfvwrite_r+0xfa>
  4141e0:	ebba 0a07 	subs.w	sl, sl, r7
  4141e4:	d03a      	beq.n	41425c <__sfvwrite_r+0x1d0>
  4141e6:	68b3      	ldr	r3, [r6, #8]
  4141e8:	1bdb      	subs	r3, r3, r7
  4141ea:	44bb      	add	fp, r7
  4141ec:	ebc7 0808 	rsb	r8, r7, r8
  4141f0:	60b3      	str	r3, [r6, #8]
  4141f2:	2b00      	cmp	r3, #0
  4141f4:	f43f af78 	beq.w	4140e8 <__sfvwrite_r+0x5c>
  4141f8:	f1b8 0f00 	cmp.w	r8, #0
  4141fc:	d1d3      	bne.n	4141a6 <__sfvwrite_r+0x11a>
  4141fe:	2700      	movs	r7, #0
  414200:	f8d5 b000 	ldr.w	fp, [r5]
  414204:	f8d5 8004 	ldr.w	r8, [r5, #4]
  414208:	9701      	str	r7, [sp, #4]
  41420a:	3508      	adds	r5, #8
  41420c:	e7c8      	b.n	4141a0 <__sfvwrite_r+0x114>
  41420e:	6820      	ldr	r0, [r4, #0]
  414210:	6923      	ldr	r3, [r4, #16]
  414212:	4298      	cmp	r0, r3
  414214:	d802      	bhi.n	41421c <__sfvwrite_r+0x190>
  414216:	6963      	ldr	r3, [r4, #20]
  414218:	4598      	cmp	r8, r3
  41421a:	d272      	bcs.n	414302 <__sfvwrite_r+0x276>
  41421c:	45b8      	cmp	r8, r7
  41421e:	bf38      	it	cc
  414220:	4647      	movcc	r7, r8
  414222:	463a      	mov	r2, r7
  414224:	4651      	mov	r1, sl
  414226:	f000 fa0f 	bl	414648 <memmove>
  41422a:	68a3      	ldr	r3, [r4, #8]
  41422c:	6822      	ldr	r2, [r4, #0]
  41422e:	1bdb      	subs	r3, r3, r7
  414230:	443a      	add	r2, r7
  414232:	60a3      	str	r3, [r4, #8]
  414234:	6022      	str	r2, [r4, #0]
  414236:	2b00      	cmp	r3, #0
  414238:	d09f      	beq.n	41417a <__sfvwrite_r+0xee>
  41423a:	463a      	mov	r2, r7
  41423c:	e785      	b.n	41414a <__sfvwrite_r+0xbe>
  41423e:	461a      	mov	r2, r3
  414240:	4659      	mov	r1, fp
  414242:	9300      	str	r3, [sp, #0]
  414244:	f000 fa00 	bl	414648 <memmove>
  414248:	9b00      	ldr	r3, [sp, #0]
  41424a:	68a1      	ldr	r1, [r4, #8]
  41424c:	6822      	ldr	r2, [r4, #0]
  41424e:	1ac9      	subs	r1, r1, r3
  414250:	ebba 0a07 	subs.w	sl, sl, r7
  414254:	4413      	add	r3, r2
  414256:	60a1      	str	r1, [r4, #8]
  414258:	6023      	str	r3, [r4, #0]
  41425a:	d1c4      	bne.n	4141e6 <__sfvwrite_r+0x15a>
  41425c:	4648      	mov	r0, r9
  41425e:	4621      	mov	r1, r4
  414260:	f7ff fce8 	bl	413c34 <_fflush_r>
  414264:	2800      	cmp	r0, #0
  414266:	d18e      	bne.n	414186 <__sfvwrite_r+0xfa>
  414268:	f8cd a004 	str.w	sl, [sp, #4]
  41426c:	e7bb      	b.n	4141e6 <__sfvwrite_r+0x15a>
  41426e:	6820      	ldr	r0, [r4, #0]
  414270:	4647      	mov	r7, r8
  414272:	46c3      	mov	fp, r8
  414274:	e75d      	b.n	414132 <__sfvwrite_r+0xa6>
  414276:	4658      	mov	r0, fp
  414278:	210a      	movs	r1, #10
  41427a:	4642      	mov	r2, r8
  41427c:	f000 f99c 	bl	4145b8 <memchr>
  414280:	2800      	cmp	r0, #0
  414282:	d07f      	beq.n	414384 <__sfvwrite_r+0x2f8>
  414284:	f100 0a01 	add.w	sl, r0, #1
  414288:	2701      	movs	r7, #1
  41428a:	ebcb 0a0a 	rsb	sl, fp, sl
  41428e:	9701      	str	r7, [sp, #4]
  414290:	e78c      	b.n	4141ac <__sfvwrite_r+0x120>
  414292:	6822      	ldr	r2, [r4, #0]
  414294:	6921      	ldr	r1, [r4, #16]
  414296:	6967      	ldr	r7, [r4, #20]
  414298:	ebc1 0c02 	rsb	ip, r1, r2
  41429c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4142a0:	f10c 0201 	add.w	r2, ip, #1
  4142a4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4142a8:	4442      	add	r2, r8
  4142aa:	107f      	asrs	r7, r7, #1
  4142ac:	4297      	cmp	r7, r2
  4142ae:	bf34      	ite	cc
  4142b0:	4617      	movcc	r7, r2
  4142b2:	463a      	movcs	r2, r7
  4142b4:	055b      	lsls	r3, r3, #21
  4142b6:	d54f      	bpl.n	414358 <__sfvwrite_r+0x2cc>
  4142b8:	4611      	mov	r1, r2
  4142ba:	4648      	mov	r0, r9
  4142bc:	f8cd c000 	str.w	ip, [sp]
  4142c0:	f7fa fc30 	bl	40eb24 <_malloc_r>
  4142c4:	f8dd c000 	ldr.w	ip, [sp]
  4142c8:	4683      	mov	fp, r0
  4142ca:	2800      	cmp	r0, #0
  4142cc:	d062      	beq.n	414394 <__sfvwrite_r+0x308>
  4142ce:	4662      	mov	r2, ip
  4142d0:	6921      	ldr	r1, [r4, #16]
  4142d2:	f8cd c000 	str.w	ip, [sp]
  4142d6:	f7fa fec1 	bl	40f05c <memcpy>
  4142da:	89a2      	ldrh	r2, [r4, #12]
  4142dc:	f8dd c000 	ldr.w	ip, [sp]
  4142e0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4142e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4142e8:	81a2      	strh	r2, [r4, #12]
  4142ea:	eb0b 000c 	add.w	r0, fp, ip
  4142ee:	ebcc 0207 	rsb	r2, ip, r7
  4142f2:	f8c4 b010 	str.w	fp, [r4, #16]
  4142f6:	6167      	str	r7, [r4, #20]
  4142f8:	6020      	str	r0, [r4, #0]
  4142fa:	60a2      	str	r2, [r4, #8]
  4142fc:	4647      	mov	r7, r8
  4142fe:	46c3      	mov	fp, r8
  414300:	e717      	b.n	414132 <__sfvwrite_r+0xa6>
  414302:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  414306:	4590      	cmp	r8, r2
  414308:	bf38      	it	cc
  41430a:	4642      	movcc	r2, r8
  41430c:	fb92 f2f3 	sdiv	r2, r2, r3
  414310:	fb02 f303 	mul.w	r3, r2, r3
  414314:	6a67      	ldr	r7, [r4, #36]	; 0x24
  414316:	69e1      	ldr	r1, [r4, #28]
  414318:	4648      	mov	r0, r9
  41431a:	4652      	mov	r2, sl
  41431c:	47b8      	blx	r7
  41431e:	2800      	cmp	r0, #0
  414320:	f77f af31 	ble.w	414186 <__sfvwrite_r+0xfa>
  414324:	4602      	mov	r2, r0
  414326:	e710      	b.n	41414a <__sfvwrite_r+0xbe>
  414328:	4662      	mov	r2, ip
  41432a:	4659      	mov	r1, fp
  41432c:	f8cd c000 	str.w	ip, [sp]
  414330:	f000 f98a 	bl	414648 <memmove>
  414334:	f8dd c000 	ldr.w	ip, [sp]
  414338:	6823      	ldr	r3, [r4, #0]
  41433a:	4463      	add	r3, ip
  41433c:	6023      	str	r3, [r4, #0]
  41433e:	4648      	mov	r0, r9
  414340:	4621      	mov	r1, r4
  414342:	f8cd c000 	str.w	ip, [sp]
  414346:	f7ff fc75 	bl	413c34 <_fflush_r>
  41434a:	f8dd c000 	ldr.w	ip, [sp]
  41434e:	2800      	cmp	r0, #0
  414350:	f47f af19 	bne.w	414186 <__sfvwrite_r+0xfa>
  414354:	4667      	mov	r7, ip
  414356:	e743      	b.n	4141e0 <__sfvwrite_r+0x154>
  414358:	4648      	mov	r0, r9
  41435a:	f8cd c000 	str.w	ip, [sp]
  41435e:	f000 fe33 	bl	414fc8 <_realloc_r>
  414362:	f8dd c000 	ldr.w	ip, [sp]
  414366:	4683      	mov	fp, r0
  414368:	2800      	cmp	r0, #0
  41436a:	d1be      	bne.n	4142ea <__sfvwrite_r+0x25e>
  41436c:	4648      	mov	r0, r9
  41436e:	6921      	ldr	r1, [r4, #16]
  414370:	f7ff fdbe 	bl	413ef0 <_free_r>
  414374:	89a3      	ldrh	r3, [r4, #12]
  414376:	220c      	movs	r2, #12
  414378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41437c:	b29b      	uxth	r3, r3
  41437e:	f8c9 2000 	str.w	r2, [r9]
  414382:	e701      	b.n	414188 <__sfvwrite_r+0xfc>
  414384:	2701      	movs	r7, #1
  414386:	f108 0a01 	add.w	sl, r8, #1
  41438a:	9701      	str	r7, [sp, #4]
  41438c:	e70e      	b.n	4141ac <__sfvwrite_r+0x120>
  41438e:	f04f 30ff 	mov.w	r0, #4294967295
  414392:	e6aa      	b.n	4140ea <__sfvwrite_r+0x5e>
  414394:	230c      	movs	r3, #12
  414396:	f8c9 3000 	str.w	r3, [r9]
  41439a:	89a3      	ldrh	r3, [r4, #12]
  41439c:	e6f4      	b.n	414188 <__sfvwrite_r+0xfc>
  41439e:	bf00      	nop
  4143a0:	7ffffc00 	.word	0x7ffffc00

004143a4 <_fwalk>:
  4143a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4143a8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4143ac:	4688      	mov	r8, r1
  4143ae:	d01a      	beq.n	4143e6 <_fwalk+0x42>
  4143b0:	2600      	movs	r6, #0
  4143b2:	687d      	ldr	r5, [r7, #4]
  4143b4:	68bc      	ldr	r4, [r7, #8]
  4143b6:	3d01      	subs	r5, #1
  4143b8:	d40f      	bmi.n	4143da <_fwalk+0x36>
  4143ba:	89a3      	ldrh	r3, [r4, #12]
  4143bc:	2b01      	cmp	r3, #1
  4143be:	f105 35ff 	add.w	r5, r5, #4294967295
  4143c2:	d906      	bls.n	4143d2 <_fwalk+0x2e>
  4143c4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4143c8:	3301      	adds	r3, #1
  4143ca:	4620      	mov	r0, r4
  4143cc:	d001      	beq.n	4143d2 <_fwalk+0x2e>
  4143ce:	47c0      	blx	r8
  4143d0:	4306      	orrs	r6, r0
  4143d2:	1c6b      	adds	r3, r5, #1
  4143d4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4143d8:	d1ef      	bne.n	4143ba <_fwalk+0x16>
  4143da:	683f      	ldr	r7, [r7, #0]
  4143dc:	2f00      	cmp	r7, #0
  4143de:	d1e8      	bne.n	4143b2 <_fwalk+0xe>
  4143e0:	4630      	mov	r0, r6
  4143e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4143e6:	463e      	mov	r6, r7
  4143e8:	4630      	mov	r0, r6
  4143ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4143ee:	bf00      	nop

004143f0 <iswspace>:
  4143f0:	28ff      	cmp	r0, #255	; 0xff
  4143f2:	d807      	bhi.n	414404 <iswspace+0x14>
  4143f4:	4b04      	ldr	r3, [pc, #16]	; (414408 <iswspace+0x18>)
  4143f6:	681b      	ldr	r3, [r3, #0]
  4143f8:	4418      	add	r0, r3
  4143fa:	7840      	ldrb	r0, [r0, #1]
  4143fc:	f000 0008 	and.w	r0, r0, #8
  414400:	b2c0      	uxtb	r0, r0
  414402:	4770      	bx	lr
  414404:	2000      	movs	r0, #0
  414406:	4770      	bx	lr
  414408:	20000d2c 	.word	0x20000d2c

0041440c <__locale_charset>:
  41440c:	4800      	ldr	r0, [pc, #0]	; (414410 <__locale_charset+0x4>)
  41440e:	4770      	bx	lr
  414410:	20000d68 	.word	0x20000d68

00414414 <__locale_mb_cur_max>:
  414414:	4b01      	ldr	r3, [pc, #4]	; (41441c <__locale_mb_cur_max+0x8>)
  414416:	6818      	ldr	r0, [r3, #0]
  414418:	4770      	bx	lr
  41441a:	bf00      	nop
  41441c:	20000d88 	.word	0x20000d88

00414420 <_localeconv_r>:
  414420:	4800      	ldr	r0, [pc, #0]	; (414424 <_localeconv_r+0x4>)
  414422:	4770      	bx	lr
  414424:	20000d30 	.word	0x20000d30

00414428 <_lseek_r>:
  414428:	b570      	push	{r4, r5, r6, lr}
  41442a:	4c08      	ldr	r4, [pc, #32]	; (41444c <_lseek_r+0x24>)
  41442c:	4606      	mov	r6, r0
  41442e:	2500      	movs	r5, #0
  414430:	4608      	mov	r0, r1
  414432:	4611      	mov	r1, r2
  414434:	461a      	mov	r2, r3
  414436:	6025      	str	r5, [r4, #0]
  414438:	f7f9 ff52 	bl	40e2e0 <_lseek>
  41443c:	1c43      	adds	r3, r0, #1
  41443e:	d000      	beq.n	414442 <_lseek_r+0x1a>
  414440:	bd70      	pop	{r4, r5, r6, pc}
  414442:	6823      	ldr	r3, [r4, #0]
  414444:	2b00      	cmp	r3, #0
  414446:	d0fb      	beq.n	414440 <_lseek_r+0x18>
  414448:	6033      	str	r3, [r6, #0]
  41444a:	bd70      	pop	{r4, r5, r6, pc}
  41444c:	20003498 	.word	0x20003498

00414450 <__smakebuf_r>:
  414450:	b5f0      	push	{r4, r5, r6, r7, lr}
  414452:	898b      	ldrh	r3, [r1, #12]
  414454:	b29a      	uxth	r2, r3
  414456:	0796      	lsls	r6, r2, #30
  414458:	b091      	sub	sp, #68	; 0x44
  41445a:	460c      	mov	r4, r1
  41445c:	4605      	mov	r5, r0
  41445e:	d437      	bmi.n	4144d0 <__smakebuf_r+0x80>
  414460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  414464:	2900      	cmp	r1, #0
  414466:	db17      	blt.n	414498 <__smakebuf_r+0x48>
  414468:	aa01      	add	r2, sp, #4
  41446a:	f002 fd19 	bl	416ea0 <_fstat_r>
  41446e:	2800      	cmp	r0, #0
  414470:	db10      	blt.n	414494 <__smakebuf_r+0x44>
  414472:	9b02      	ldr	r3, [sp, #8]
  414474:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  414478:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  41447c:	424f      	negs	r7, r1
  41447e:	414f      	adcs	r7, r1
  414480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  414484:	d02c      	beq.n	4144e0 <__smakebuf_r+0x90>
  414486:	89a3      	ldrh	r3, [r4, #12]
  414488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41448c:	81a3      	strh	r3, [r4, #12]
  41448e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  414492:	e00b      	b.n	4144ac <__smakebuf_r+0x5c>
  414494:	89a3      	ldrh	r3, [r4, #12]
  414496:	b29a      	uxth	r2, r3
  414498:	f012 0f80 	tst.w	r2, #128	; 0x80
  41449c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4144a0:	81a3      	strh	r3, [r4, #12]
  4144a2:	bf14      	ite	ne
  4144a4:	2640      	movne	r6, #64	; 0x40
  4144a6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4144aa:	2700      	movs	r7, #0
  4144ac:	4628      	mov	r0, r5
  4144ae:	4631      	mov	r1, r6
  4144b0:	f7fa fb38 	bl	40eb24 <_malloc_r>
  4144b4:	89a3      	ldrh	r3, [r4, #12]
  4144b6:	2800      	cmp	r0, #0
  4144b8:	d029      	beq.n	41450e <__smakebuf_r+0xbe>
  4144ba:	4a1b      	ldr	r2, [pc, #108]	; (414528 <__smakebuf_r+0xd8>)
  4144bc:	63ea      	str	r2, [r5, #60]	; 0x3c
  4144be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4144c2:	81a3      	strh	r3, [r4, #12]
  4144c4:	6020      	str	r0, [r4, #0]
  4144c6:	6120      	str	r0, [r4, #16]
  4144c8:	6166      	str	r6, [r4, #20]
  4144ca:	b9a7      	cbnz	r7, 4144f6 <__smakebuf_r+0xa6>
  4144cc:	b011      	add	sp, #68	; 0x44
  4144ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4144d0:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4144d4:	2201      	movs	r2, #1
  4144d6:	600b      	str	r3, [r1, #0]
  4144d8:	610b      	str	r3, [r1, #16]
  4144da:	614a      	str	r2, [r1, #20]
  4144dc:	b011      	add	sp, #68	; 0x44
  4144de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4144e0:	4a12      	ldr	r2, [pc, #72]	; (41452c <__smakebuf_r+0xdc>)
  4144e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4144e4:	4293      	cmp	r3, r2
  4144e6:	d1ce      	bne.n	414486 <__smakebuf_r+0x36>
  4144e8:	89a3      	ldrh	r3, [r4, #12]
  4144ea:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4144ee:	4333      	orrs	r3, r6
  4144f0:	81a3      	strh	r3, [r4, #12]
  4144f2:	64e6      	str	r6, [r4, #76]	; 0x4c
  4144f4:	e7da      	b.n	4144ac <__smakebuf_r+0x5c>
  4144f6:	4628      	mov	r0, r5
  4144f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4144fc:	f003 f896 	bl	41762c <_isatty_r>
  414500:	2800      	cmp	r0, #0
  414502:	d0e3      	beq.n	4144cc <__smakebuf_r+0x7c>
  414504:	89a3      	ldrh	r3, [r4, #12]
  414506:	f043 0301 	orr.w	r3, r3, #1
  41450a:	81a3      	strh	r3, [r4, #12]
  41450c:	e7de      	b.n	4144cc <__smakebuf_r+0x7c>
  41450e:	059a      	lsls	r2, r3, #22
  414510:	d4dc      	bmi.n	4144cc <__smakebuf_r+0x7c>
  414512:	f104 0243 	add.w	r2, r4, #67	; 0x43
  414516:	f043 0302 	orr.w	r3, r3, #2
  41451a:	2101      	movs	r1, #1
  41451c:	81a3      	strh	r3, [r4, #12]
  41451e:	6022      	str	r2, [r4, #0]
  414520:	6122      	str	r2, [r4, #16]
  414522:	6161      	str	r1, [r4, #20]
  414524:	e7d2      	b.n	4144cc <__smakebuf_r+0x7c>
  414526:	bf00      	nop
  414528:	00413c61 	.word	0x00413c61
  41452c:	0040f4cd 	.word	0x0040f4cd

00414530 <_mbrtowc_r>:
  414530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  414534:	b083      	sub	sp, #12
  414536:	461f      	mov	r7, r3
  414538:	4614      	mov	r4, r2
  41453a:	4605      	mov	r5, r0
  41453c:	4688      	mov	r8, r1
  41453e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  414540:	4b10      	ldr	r3, [pc, #64]	; (414584 <_mbrtowc_r+0x54>)
  414542:	b19a      	cbz	r2, 41456c <_mbrtowc_r+0x3c>
  414544:	f8d3 9000 	ldr.w	r9, [r3]
  414548:	f7ff ff60 	bl	41440c <__locale_charset>
  41454c:	4641      	mov	r1, r8
  41454e:	e88d 0041 	stmia.w	sp, {r0, r6}
  414552:	4622      	mov	r2, r4
  414554:	463b      	mov	r3, r7
  414556:	4628      	mov	r0, r5
  414558:	47c8      	blx	r9
  41455a:	1c43      	adds	r3, r0, #1
  41455c:	d103      	bne.n	414566 <_mbrtowc_r+0x36>
  41455e:	2200      	movs	r2, #0
  414560:	238a      	movs	r3, #138	; 0x8a
  414562:	6032      	str	r2, [r6, #0]
  414564:	602b      	str	r3, [r5, #0]
  414566:	b003      	add	sp, #12
  414568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41456c:	681f      	ldr	r7, [r3, #0]
  41456e:	f7ff ff4d 	bl	41440c <__locale_charset>
  414572:	4621      	mov	r1, r4
  414574:	e88d 0041 	stmia.w	sp, {r0, r6}
  414578:	4a03      	ldr	r2, [pc, #12]	; (414588 <_mbrtowc_r+0x58>)
  41457a:	4628      	mov	r0, r5
  41457c:	2301      	movs	r3, #1
  41457e:	47b8      	blx	r7
  414580:	e7eb      	b.n	41455a <_mbrtowc_r+0x2a>
  414582:	bf00      	nop
  414584:	20000d8c 	.word	0x20000d8c
  414588:	00419224 	.word	0x00419224

0041458c <__ascii_mbtowc>:
  41458c:	b082      	sub	sp, #8
  41458e:	b149      	cbz	r1, 4145a4 <__ascii_mbtowc+0x18>
  414590:	b15a      	cbz	r2, 4145aa <__ascii_mbtowc+0x1e>
  414592:	b16b      	cbz	r3, 4145b0 <__ascii_mbtowc+0x24>
  414594:	7813      	ldrb	r3, [r2, #0]
  414596:	600b      	str	r3, [r1, #0]
  414598:	7810      	ldrb	r0, [r2, #0]
  41459a:	3000      	adds	r0, #0
  41459c:	bf18      	it	ne
  41459e:	2001      	movne	r0, #1
  4145a0:	b002      	add	sp, #8
  4145a2:	4770      	bx	lr
  4145a4:	a901      	add	r1, sp, #4
  4145a6:	2a00      	cmp	r2, #0
  4145a8:	d1f3      	bne.n	414592 <__ascii_mbtowc+0x6>
  4145aa:	4610      	mov	r0, r2
  4145ac:	b002      	add	sp, #8
  4145ae:	4770      	bx	lr
  4145b0:	f06f 0001 	mvn.w	r0, #1
  4145b4:	e7f4      	b.n	4145a0 <__ascii_mbtowc+0x14>
  4145b6:	bf00      	nop

004145b8 <memchr>:
  4145b8:	0783      	lsls	r3, r0, #30
  4145ba:	b470      	push	{r4, r5, r6}
  4145bc:	b2c9      	uxtb	r1, r1
  4145be:	d03f      	beq.n	414640 <memchr+0x88>
  4145c0:	1e54      	subs	r4, r2, #1
  4145c2:	b32a      	cbz	r2, 414610 <memchr+0x58>
  4145c4:	7803      	ldrb	r3, [r0, #0]
  4145c6:	428b      	cmp	r3, r1
  4145c8:	d023      	beq.n	414612 <memchr+0x5a>
  4145ca:	1c43      	adds	r3, r0, #1
  4145cc:	e004      	b.n	4145d8 <memchr+0x20>
  4145ce:	b1fc      	cbz	r4, 414610 <memchr+0x58>
  4145d0:	7804      	ldrb	r4, [r0, #0]
  4145d2:	428c      	cmp	r4, r1
  4145d4:	d01d      	beq.n	414612 <memchr+0x5a>
  4145d6:	4614      	mov	r4, r2
  4145d8:	f013 0f03 	tst.w	r3, #3
  4145dc:	4618      	mov	r0, r3
  4145de:	f104 32ff 	add.w	r2, r4, #4294967295
  4145e2:	f103 0301 	add.w	r3, r3, #1
  4145e6:	d1f2      	bne.n	4145ce <memchr+0x16>
  4145e8:	2c03      	cmp	r4, #3
  4145ea:	d814      	bhi.n	414616 <memchr+0x5e>
  4145ec:	1e65      	subs	r5, r4, #1
  4145ee:	b34c      	cbz	r4, 414644 <memchr+0x8c>
  4145f0:	7803      	ldrb	r3, [r0, #0]
  4145f2:	428b      	cmp	r3, r1
  4145f4:	d00d      	beq.n	414612 <memchr+0x5a>
  4145f6:	1c42      	adds	r2, r0, #1
  4145f8:	2300      	movs	r3, #0
  4145fa:	e002      	b.n	414602 <memchr+0x4a>
  4145fc:	7804      	ldrb	r4, [r0, #0]
  4145fe:	428c      	cmp	r4, r1
  414600:	d007      	beq.n	414612 <memchr+0x5a>
  414602:	42ab      	cmp	r3, r5
  414604:	4610      	mov	r0, r2
  414606:	f103 0301 	add.w	r3, r3, #1
  41460a:	f102 0201 	add.w	r2, r2, #1
  41460e:	d1f5      	bne.n	4145fc <memchr+0x44>
  414610:	2000      	movs	r0, #0
  414612:	bc70      	pop	{r4, r5, r6}
  414614:	4770      	bx	lr
  414616:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  41461a:	4603      	mov	r3, r0
  41461c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  414620:	4618      	mov	r0, r3
  414622:	3304      	adds	r3, #4
  414624:	6802      	ldr	r2, [r0, #0]
  414626:	4072      	eors	r2, r6
  414628:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  41462c:	ea25 0202 	bic.w	r2, r5, r2
  414630:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  414634:	d1da      	bne.n	4145ec <memchr+0x34>
  414636:	3c04      	subs	r4, #4
  414638:	2c03      	cmp	r4, #3
  41463a:	4618      	mov	r0, r3
  41463c:	d8f0      	bhi.n	414620 <memchr+0x68>
  41463e:	e7d5      	b.n	4145ec <memchr+0x34>
  414640:	4614      	mov	r4, r2
  414642:	e7d1      	b.n	4145e8 <memchr+0x30>
  414644:	4620      	mov	r0, r4
  414646:	e7e4      	b.n	414612 <memchr+0x5a>

00414648 <memmove>:
  414648:	4288      	cmp	r0, r1
  41464a:	b4f0      	push	{r4, r5, r6, r7}
  41464c:	d910      	bls.n	414670 <memmove+0x28>
  41464e:	188c      	adds	r4, r1, r2
  414650:	42a0      	cmp	r0, r4
  414652:	d20d      	bcs.n	414670 <memmove+0x28>
  414654:	1885      	adds	r5, r0, r2
  414656:	1e53      	subs	r3, r2, #1
  414658:	b142      	cbz	r2, 41466c <memmove+0x24>
  41465a:	4621      	mov	r1, r4
  41465c:	462a      	mov	r2, r5
  41465e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  414662:	f802 4d01 	strb.w	r4, [r2, #-1]!
  414666:	3b01      	subs	r3, #1
  414668:	1c5c      	adds	r4, r3, #1
  41466a:	d1f8      	bne.n	41465e <memmove+0x16>
  41466c:	bcf0      	pop	{r4, r5, r6, r7}
  41466e:	4770      	bx	lr
  414670:	2a0f      	cmp	r2, #15
  414672:	d93f      	bls.n	4146f4 <memmove+0xac>
  414674:	ea40 0301 	orr.w	r3, r0, r1
  414678:	079b      	lsls	r3, r3, #30
  41467a:	d13f      	bne.n	4146fc <memmove+0xb4>
  41467c:	f1a2 0710 	sub.w	r7, r2, #16
  414680:	093f      	lsrs	r7, r7, #4
  414682:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  414686:	3610      	adds	r6, #16
  414688:	460c      	mov	r4, r1
  41468a:	4603      	mov	r3, r0
  41468c:	6825      	ldr	r5, [r4, #0]
  41468e:	601d      	str	r5, [r3, #0]
  414690:	6865      	ldr	r5, [r4, #4]
  414692:	605d      	str	r5, [r3, #4]
  414694:	68a5      	ldr	r5, [r4, #8]
  414696:	609d      	str	r5, [r3, #8]
  414698:	68e5      	ldr	r5, [r4, #12]
  41469a:	60dd      	str	r5, [r3, #12]
  41469c:	3310      	adds	r3, #16
  41469e:	42b3      	cmp	r3, r6
  4146a0:	f104 0410 	add.w	r4, r4, #16
  4146a4:	d1f2      	bne.n	41468c <memmove+0x44>
  4146a6:	1c7b      	adds	r3, r7, #1
  4146a8:	f002 0c0f 	and.w	ip, r2, #15
  4146ac:	011b      	lsls	r3, r3, #4
  4146ae:	f1bc 0f03 	cmp.w	ip, #3
  4146b2:	4419      	add	r1, r3
  4146b4:	4403      	add	r3, r0
  4146b6:	d923      	bls.n	414700 <memmove+0xb8>
  4146b8:	460e      	mov	r6, r1
  4146ba:	461d      	mov	r5, r3
  4146bc:	4664      	mov	r4, ip
  4146be:	3c04      	subs	r4, #4
  4146c0:	f856 7b04 	ldr.w	r7, [r6], #4
  4146c4:	f845 7b04 	str.w	r7, [r5], #4
  4146c8:	2c03      	cmp	r4, #3
  4146ca:	d8f8      	bhi.n	4146be <memmove+0x76>
  4146cc:	f1ac 0404 	sub.w	r4, ip, #4
  4146d0:	f024 0403 	bic.w	r4, r4, #3
  4146d4:	3404      	adds	r4, #4
  4146d6:	f002 0203 	and.w	r2, r2, #3
  4146da:	4423      	add	r3, r4
  4146dc:	4421      	add	r1, r4
  4146de:	2a00      	cmp	r2, #0
  4146e0:	d0c4      	beq.n	41466c <memmove+0x24>
  4146e2:	441a      	add	r2, r3
  4146e4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4146e8:	f803 4b01 	strb.w	r4, [r3], #1
  4146ec:	4293      	cmp	r3, r2
  4146ee:	d1f9      	bne.n	4146e4 <memmove+0x9c>
  4146f0:	bcf0      	pop	{r4, r5, r6, r7}
  4146f2:	4770      	bx	lr
  4146f4:	4603      	mov	r3, r0
  4146f6:	2a00      	cmp	r2, #0
  4146f8:	d1f3      	bne.n	4146e2 <memmove+0x9a>
  4146fa:	e7b7      	b.n	41466c <memmove+0x24>
  4146fc:	4603      	mov	r3, r0
  4146fe:	e7f0      	b.n	4146e2 <memmove+0x9a>
  414700:	4662      	mov	r2, ip
  414702:	2a00      	cmp	r2, #0
  414704:	d1ed      	bne.n	4146e2 <memmove+0x9a>
  414706:	e7b1      	b.n	41466c <memmove+0x24>

00414708 <_Balloc>:
  414708:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  41470a:	b570      	push	{r4, r5, r6, lr}
  41470c:	4605      	mov	r5, r0
  41470e:	460c      	mov	r4, r1
  414710:	b14a      	cbz	r2, 414726 <_Balloc+0x1e>
  414712:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  414716:	b180      	cbz	r0, 41473a <_Balloc+0x32>
  414718:	6801      	ldr	r1, [r0, #0]
  41471a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  41471e:	2200      	movs	r2, #0
  414720:	6102      	str	r2, [r0, #16]
  414722:	60c2      	str	r2, [r0, #12]
  414724:	bd70      	pop	{r4, r5, r6, pc}
  414726:	2221      	movs	r2, #33	; 0x21
  414728:	2104      	movs	r1, #4
  41472a:	f002 fb41 	bl	416db0 <_calloc_r>
  41472e:	64e8      	str	r0, [r5, #76]	; 0x4c
  414730:	4602      	mov	r2, r0
  414732:	2800      	cmp	r0, #0
  414734:	d1ed      	bne.n	414712 <_Balloc+0xa>
  414736:	2000      	movs	r0, #0
  414738:	bd70      	pop	{r4, r5, r6, pc}
  41473a:	2101      	movs	r1, #1
  41473c:	fa01 f604 	lsl.w	r6, r1, r4
  414740:	1d72      	adds	r2, r6, #5
  414742:	4628      	mov	r0, r5
  414744:	0092      	lsls	r2, r2, #2
  414746:	f002 fb33 	bl	416db0 <_calloc_r>
  41474a:	2800      	cmp	r0, #0
  41474c:	d0f3      	beq.n	414736 <_Balloc+0x2e>
  41474e:	6044      	str	r4, [r0, #4]
  414750:	6086      	str	r6, [r0, #8]
  414752:	e7e4      	b.n	41471e <_Balloc+0x16>

00414754 <_Bfree>:
  414754:	b131      	cbz	r1, 414764 <_Bfree+0x10>
  414756:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  414758:	684a      	ldr	r2, [r1, #4]
  41475a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  41475e:	6008      	str	r0, [r1, #0]
  414760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  414764:	4770      	bx	lr
  414766:	bf00      	nop

00414768 <__multadd>:
  414768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41476c:	f8d1 8010 	ldr.w	r8, [r1, #16]
  414770:	b082      	sub	sp, #8
  414772:	4689      	mov	r9, r1
  414774:	4682      	mov	sl, r0
  414776:	f101 0514 	add.w	r5, r1, #20
  41477a:	2400      	movs	r4, #0
  41477c:	682f      	ldr	r7, [r5, #0]
  41477e:	b2be      	uxth	r6, r7
  414780:	0c3f      	lsrs	r7, r7, #16
  414782:	fb02 3606 	mla	r6, r2, r6, r3
  414786:	fb02 f307 	mul.w	r3, r2, r7
  41478a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  41478e:	3401      	adds	r4, #1
  414790:	b2b6      	uxth	r6, r6
  414792:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  414796:	45a0      	cmp	r8, r4
  414798:	f845 6b04 	str.w	r6, [r5], #4
  41479c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4147a0:	dcec      	bgt.n	41477c <__multadd+0x14>
  4147a2:	b153      	cbz	r3, 4147ba <__multadd+0x52>
  4147a4:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4147a8:	4590      	cmp	r8, r2
  4147aa:	da0a      	bge.n	4147c2 <__multadd+0x5a>
  4147ac:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  4147b0:	f108 0201 	add.w	r2, r8, #1
  4147b4:	614b      	str	r3, [r1, #20]
  4147b6:	f8c9 2010 	str.w	r2, [r9, #16]
  4147ba:	4648      	mov	r0, r9
  4147bc:	b002      	add	sp, #8
  4147be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4147c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4147c6:	9301      	str	r3, [sp, #4]
  4147c8:	3101      	adds	r1, #1
  4147ca:	4650      	mov	r0, sl
  4147cc:	f7ff ff9c 	bl	414708 <_Balloc>
  4147d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4147d4:	3202      	adds	r2, #2
  4147d6:	f109 010c 	add.w	r1, r9, #12
  4147da:	4604      	mov	r4, r0
  4147dc:	0092      	lsls	r2, r2, #2
  4147de:	300c      	adds	r0, #12
  4147e0:	f7fa fc3c 	bl	40f05c <memcpy>
  4147e4:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  4147e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4147ec:	9b01      	ldr	r3, [sp, #4]
  4147ee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4147f2:	f8c9 0000 	str.w	r0, [r9]
  4147f6:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  4147fa:	46a1      	mov	r9, r4
  4147fc:	e7d6      	b.n	4147ac <__multadd+0x44>
  4147fe:	bf00      	nop

00414800 <__s2b>:
  414800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  414804:	4699      	mov	r9, r3
  414806:	4b23      	ldr	r3, [pc, #140]	; (414894 <__s2b+0x94>)
  414808:	9e08      	ldr	r6, [sp, #32]
  41480a:	f109 0408 	add.w	r4, r9, #8
  41480e:	fb83 5304 	smull	r5, r3, r3, r4
  414812:	17e4      	asrs	r4, r4, #31
  414814:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  414818:	2b01      	cmp	r3, #1
  41481a:	4607      	mov	r7, r0
  41481c:	460c      	mov	r4, r1
  41481e:	4690      	mov	r8, r2
  414820:	dd35      	ble.n	41488e <__s2b+0x8e>
  414822:	2501      	movs	r5, #1
  414824:	2100      	movs	r1, #0
  414826:	006d      	lsls	r5, r5, #1
  414828:	42ab      	cmp	r3, r5
  41482a:	f101 0101 	add.w	r1, r1, #1
  41482e:	dcfa      	bgt.n	414826 <__s2b+0x26>
  414830:	4638      	mov	r0, r7
  414832:	f7ff ff69 	bl	414708 <_Balloc>
  414836:	2301      	movs	r3, #1
  414838:	f1b8 0f09 	cmp.w	r8, #9
  41483c:	6146      	str	r6, [r0, #20]
  41483e:	6103      	str	r3, [r0, #16]
  414840:	dd21      	ble.n	414886 <__s2b+0x86>
  414842:	f104 0609 	add.w	r6, r4, #9
  414846:	4635      	mov	r5, r6
  414848:	4444      	add	r4, r8
  41484a:	f815 3b01 	ldrb.w	r3, [r5], #1
  41484e:	4601      	mov	r1, r0
  414850:	3b30      	subs	r3, #48	; 0x30
  414852:	4638      	mov	r0, r7
  414854:	220a      	movs	r2, #10
  414856:	f7ff ff87 	bl	414768 <__multadd>
  41485a:	42a5      	cmp	r5, r4
  41485c:	d1f5      	bne.n	41484a <__s2b+0x4a>
  41485e:	eb06 0408 	add.w	r4, r6, r8
  414862:	3c08      	subs	r4, #8
  414864:	45c1      	cmp	r9, r8
  414866:	dd0c      	ble.n	414882 <__s2b+0x82>
  414868:	ebc8 0809 	rsb	r8, r8, r9
  41486c:	44a0      	add	r8, r4
  41486e:	f814 3b01 	ldrb.w	r3, [r4], #1
  414872:	4601      	mov	r1, r0
  414874:	3b30      	subs	r3, #48	; 0x30
  414876:	4638      	mov	r0, r7
  414878:	220a      	movs	r2, #10
  41487a:	f7ff ff75 	bl	414768 <__multadd>
  41487e:	4544      	cmp	r4, r8
  414880:	d1f5      	bne.n	41486e <__s2b+0x6e>
  414882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  414886:	340a      	adds	r4, #10
  414888:	f04f 0809 	mov.w	r8, #9
  41488c:	e7ea      	b.n	414864 <__s2b+0x64>
  41488e:	2100      	movs	r1, #0
  414890:	e7ce      	b.n	414830 <__s2b+0x30>
  414892:	bf00      	nop
  414894:	38e38e39 	.word	0x38e38e39

00414898 <__hi0bits>:
  414898:	0c03      	lsrs	r3, r0, #16
  41489a:	041b      	lsls	r3, r3, #16
  41489c:	b9b3      	cbnz	r3, 4148cc <__hi0bits+0x34>
  41489e:	0400      	lsls	r0, r0, #16
  4148a0:	2310      	movs	r3, #16
  4148a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4148a6:	bf04      	itt	eq
  4148a8:	0200      	lsleq	r0, r0, #8
  4148aa:	3308      	addeq	r3, #8
  4148ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4148b0:	bf04      	itt	eq
  4148b2:	0100      	lsleq	r0, r0, #4
  4148b4:	3304      	addeq	r3, #4
  4148b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4148ba:	bf04      	itt	eq
  4148bc:	0080      	lsleq	r0, r0, #2
  4148be:	3302      	addeq	r3, #2
  4148c0:	2800      	cmp	r0, #0
  4148c2:	db07      	blt.n	4148d4 <__hi0bits+0x3c>
  4148c4:	0042      	lsls	r2, r0, #1
  4148c6:	d403      	bmi.n	4148d0 <__hi0bits+0x38>
  4148c8:	2020      	movs	r0, #32
  4148ca:	4770      	bx	lr
  4148cc:	2300      	movs	r3, #0
  4148ce:	e7e8      	b.n	4148a2 <__hi0bits+0xa>
  4148d0:	1c58      	adds	r0, r3, #1
  4148d2:	4770      	bx	lr
  4148d4:	4618      	mov	r0, r3
  4148d6:	4770      	bx	lr

004148d8 <__lo0bits>:
  4148d8:	6803      	ldr	r3, [r0, #0]
  4148da:	f013 0207 	ands.w	r2, r3, #7
  4148de:	d007      	beq.n	4148f0 <__lo0bits+0x18>
  4148e0:	07d9      	lsls	r1, r3, #31
  4148e2:	d420      	bmi.n	414926 <__lo0bits+0x4e>
  4148e4:	079a      	lsls	r2, r3, #30
  4148e6:	d420      	bmi.n	41492a <__lo0bits+0x52>
  4148e8:	089b      	lsrs	r3, r3, #2
  4148ea:	6003      	str	r3, [r0, #0]
  4148ec:	2002      	movs	r0, #2
  4148ee:	4770      	bx	lr
  4148f0:	b299      	uxth	r1, r3
  4148f2:	b909      	cbnz	r1, 4148f8 <__lo0bits+0x20>
  4148f4:	0c1b      	lsrs	r3, r3, #16
  4148f6:	2210      	movs	r2, #16
  4148f8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4148fc:	bf04      	itt	eq
  4148fe:	0a1b      	lsreq	r3, r3, #8
  414900:	3208      	addeq	r2, #8
  414902:	0719      	lsls	r1, r3, #28
  414904:	bf04      	itt	eq
  414906:	091b      	lsreq	r3, r3, #4
  414908:	3204      	addeq	r2, #4
  41490a:	0799      	lsls	r1, r3, #30
  41490c:	bf04      	itt	eq
  41490e:	089b      	lsreq	r3, r3, #2
  414910:	3202      	addeq	r2, #2
  414912:	07d9      	lsls	r1, r3, #31
  414914:	d404      	bmi.n	414920 <__lo0bits+0x48>
  414916:	085b      	lsrs	r3, r3, #1
  414918:	d101      	bne.n	41491e <__lo0bits+0x46>
  41491a:	2020      	movs	r0, #32
  41491c:	4770      	bx	lr
  41491e:	3201      	adds	r2, #1
  414920:	6003      	str	r3, [r0, #0]
  414922:	4610      	mov	r0, r2
  414924:	4770      	bx	lr
  414926:	2000      	movs	r0, #0
  414928:	4770      	bx	lr
  41492a:	085b      	lsrs	r3, r3, #1
  41492c:	6003      	str	r3, [r0, #0]
  41492e:	2001      	movs	r0, #1
  414930:	4770      	bx	lr
  414932:	bf00      	nop

00414934 <__i2b>:
  414934:	b510      	push	{r4, lr}
  414936:	460c      	mov	r4, r1
  414938:	2101      	movs	r1, #1
  41493a:	f7ff fee5 	bl	414708 <_Balloc>
  41493e:	2201      	movs	r2, #1
  414940:	6144      	str	r4, [r0, #20]
  414942:	6102      	str	r2, [r0, #16]
  414944:	bd10      	pop	{r4, pc}
  414946:	bf00      	nop

00414948 <__multiply>:
  414948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41494c:	690d      	ldr	r5, [r1, #16]
  41494e:	f8d2 9010 	ldr.w	r9, [r2, #16]
  414952:	454d      	cmp	r5, r9
  414954:	b085      	sub	sp, #20
  414956:	460c      	mov	r4, r1
  414958:	4692      	mov	sl, r2
  41495a:	da04      	bge.n	414966 <__multiply+0x1e>
  41495c:	462a      	mov	r2, r5
  41495e:	4654      	mov	r4, sl
  414960:	464d      	mov	r5, r9
  414962:	468a      	mov	sl, r1
  414964:	4691      	mov	r9, r2
  414966:	68a3      	ldr	r3, [r4, #8]
  414968:	6861      	ldr	r1, [r4, #4]
  41496a:	eb05 0709 	add.w	r7, r5, r9
  41496e:	429f      	cmp	r7, r3
  414970:	bfc8      	it	gt
  414972:	3101      	addgt	r1, #1
  414974:	f7ff fec8 	bl	414708 <_Balloc>
  414978:	f100 0614 	add.w	r6, r0, #20
  41497c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  414980:	4546      	cmp	r6, r8
  414982:	9001      	str	r0, [sp, #4]
  414984:	d205      	bcs.n	414992 <__multiply+0x4a>
  414986:	4633      	mov	r3, r6
  414988:	2000      	movs	r0, #0
  41498a:	f843 0b04 	str.w	r0, [r3], #4
  41498e:	4598      	cmp	r8, r3
  414990:	d8fb      	bhi.n	41498a <__multiply+0x42>
  414992:	f10a 0c14 	add.w	ip, sl, #20
  414996:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  41499a:	3414      	adds	r4, #20
  41499c:	45cc      	cmp	ip, r9
  41499e:	9400      	str	r4, [sp, #0]
  4149a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4149a4:	d25b      	bcs.n	414a5e <__multiply+0x116>
  4149a6:	f8cd 8008 	str.w	r8, [sp, #8]
  4149aa:	9703      	str	r7, [sp, #12]
  4149ac:	46c8      	mov	r8, r9
  4149ae:	f85c 3b04 	ldr.w	r3, [ip], #4
  4149b2:	b29c      	uxth	r4, r3
  4149b4:	b324      	cbz	r4, 414a00 <__multiply+0xb8>
  4149b6:	9a00      	ldr	r2, [sp, #0]
  4149b8:	4633      	mov	r3, r6
  4149ba:	f04f 0900 	mov.w	r9, #0
  4149be:	e000      	b.n	4149c2 <__multiply+0x7a>
  4149c0:	460b      	mov	r3, r1
  4149c2:	f852 7b04 	ldr.w	r7, [r2], #4
  4149c6:	6819      	ldr	r1, [r3, #0]
  4149c8:	fa1f fb87 	uxth.w	fp, r7
  4149cc:	fa1f fa81 	uxth.w	sl, r1
  4149d0:	0c38      	lsrs	r0, r7, #16
  4149d2:	0c09      	lsrs	r1, r1, #16
  4149d4:	fb04 a70b 	mla	r7, r4, fp, sl
  4149d8:	44b9      	add	r9, r7
  4149da:	fb04 1000 	mla	r0, r4, r0, r1
  4149de:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  4149e2:	4619      	mov	r1, r3
  4149e4:	fa1f f989 	uxth.w	r9, r9
  4149e8:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  4149ec:	4295      	cmp	r5, r2
  4149ee:	ea4f 4910 	mov.w	r9, r0, lsr #16
  4149f2:	f841 7b04 	str.w	r7, [r1], #4
  4149f6:	d8e3      	bhi.n	4149c0 <__multiply+0x78>
  4149f8:	f8c3 9004 	str.w	r9, [r3, #4]
  4149fc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  414a00:	ea5f 4913 	movs.w	r9, r3, lsr #16
  414a04:	d024      	beq.n	414a50 <__multiply+0x108>
  414a06:	f8d6 a000 	ldr.w	sl, [r6]
  414a0a:	9b00      	ldr	r3, [sp, #0]
  414a0c:	4650      	mov	r0, sl
  414a0e:	4631      	mov	r1, r6
  414a10:	f04f 0b00 	mov.w	fp, #0
  414a14:	e000      	b.n	414a18 <__multiply+0xd0>
  414a16:	4611      	mov	r1, r2
  414a18:	881a      	ldrh	r2, [r3, #0]
  414a1a:	0c00      	lsrs	r0, r0, #16
  414a1c:	fb09 0002 	mla	r0, r9, r2, r0
  414a20:	4483      	add	fp, r0
  414a22:	fa1f fa8a 	uxth.w	sl, sl
  414a26:	460a      	mov	r2, r1
  414a28:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  414a2c:	f842 0b04 	str.w	r0, [r2], #4
  414a30:	f853 7b04 	ldr.w	r7, [r3], #4
  414a34:	6848      	ldr	r0, [r1, #4]
  414a36:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  414a3a:	b284      	uxth	r4, r0
  414a3c:	fb09 4a0a 	mla	sl, r9, sl, r4
  414a40:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  414a44:	429d      	cmp	r5, r3
  414a46:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  414a4a:	d8e4      	bhi.n	414a16 <__multiply+0xce>
  414a4c:	f8c1 a004 	str.w	sl, [r1, #4]
  414a50:	45e0      	cmp	r8, ip
  414a52:	f106 0604 	add.w	r6, r6, #4
  414a56:	d8aa      	bhi.n	4149ae <__multiply+0x66>
  414a58:	f8dd 8008 	ldr.w	r8, [sp, #8]
  414a5c:	9f03      	ldr	r7, [sp, #12]
  414a5e:	2f00      	cmp	r7, #0
  414a60:	dd0a      	ble.n	414a78 <__multiply+0x130>
  414a62:	f858 3c04 	ldr.w	r3, [r8, #-4]
  414a66:	f1a8 0804 	sub.w	r8, r8, #4
  414a6a:	b11b      	cbz	r3, 414a74 <__multiply+0x12c>
  414a6c:	e004      	b.n	414a78 <__multiply+0x130>
  414a6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  414a72:	b90b      	cbnz	r3, 414a78 <__multiply+0x130>
  414a74:	3f01      	subs	r7, #1
  414a76:	d1fa      	bne.n	414a6e <__multiply+0x126>
  414a78:	9b01      	ldr	r3, [sp, #4]
  414a7a:	4618      	mov	r0, r3
  414a7c:	611f      	str	r7, [r3, #16]
  414a7e:	b005      	add	sp, #20
  414a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414a84 <__pow5mult>:
  414a84:	f012 0303 	ands.w	r3, r2, #3
  414a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414a8c:	4614      	mov	r4, r2
  414a8e:	4607      	mov	r7, r0
  414a90:	460e      	mov	r6, r1
  414a92:	d12c      	bne.n	414aee <__pow5mult+0x6a>
  414a94:	10a4      	asrs	r4, r4, #2
  414a96:	d01c      	beq.n	414ad2 <__pow5mult+0x4e>
  414a98:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  414a9a:	2d00      	cmp	r5, #0
  414a9c:	d030      	beq.n	414b00 <__pow5mult+0x7c>
  414a9e:	f04f 0800 	mov.w	r8, #0
  414aa2:	e004      	b.n	414aae <__pow5mult+0x2a>
  414aa4:	1064      	asrs	r4, r4, #1
  414aa6:	d014      	beq.n	414ad2 <__pow5mult+0x4e>
  414aa8:	6828      	ldr	r0, [r5, #0]
  414aaa:	b1a8      	cbz	r0, 414ad8 <__pow5mult+0x54>
  414aac:	4605      	mov	r5, r0
  414aae:	07e3      	lsls	r3, r4, #31
  414ab0:	d5f8      	bpl.n	414aa4 <__pow5mult+0x20>
  414ab2:	4638      	mov	r0, r7
  414ab4:	4631      	mov	r1, r6
  414ab6:	462a      	mov	r2, r5
  414ab8:	f7ff ff46 	bl	414948 <__multiply>
  414abc:	b1ae      	cbz	r6, 414aea <__pow5mult+0x66>
  414abe:	6872      	ldr	r2, [r6, #4]
  414ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  414ac2:	1064      	asrs	r4, r4, #1
  414ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  414ac8:	6031      	str	r1, [r6, #0]
  414aca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  414ace:	4606      	mov	r6, r0
  414ad0:	d1ea      	bne.n	414aa8 <__pow5mult+0x24>
  414ad2:	4630      	mov	r0, r6
  414ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414ad8:	4638      	mov	r0, r7
  414ada:	4629      	mov	r1, r5
  414adc:	462a      	mov	r2, r5
  414ade:	f7ff ff33 	bl	414948 <__multiply>
  414ae2:	6028      	str	r0, [r5, #0]
  414ae4:	f8c0 8000 	str.w	r8, [r0]
  414ae8:	e7e0      	b.n	414aac <__pow5mult+0x28>
  414aea:	4606      	mov	r6, r0
  414aec:	e7da      	b.n	414aa4 <__pow5mult+0x20>
  414aee:	1e5d      	subs	r5, r3, #1
  414af0:	4a0a      	ldr	r2, [pc, #40]	; (414b1c <__pow5mult+0x98>)
  414af2:	2300      	movs	r3, #0
  414af4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  414af8:	f7ff fe36 	bl	414768 <__multadd>
  414afc:	4606      	mov	r6, r0
  414afe:	e7c9      	b.n	414a94 <__pow5mult+0x10>
  414b00:	2101      	movs	r1, #1
  414b02:	4638      	mov	r0, r7
  414b04:	f7ff fe00 	bl	414708 <_Balloc>
  414b08:	f240 2171 	movw	r1, #625	; 0x271
  414b0c:	2201      	movs	r2, #1
  414b0e:	2300      	movs	r3, #0
  414b10:	6141      	str	r1, [r0, #20]
  414b12:	6102      	str	r2, [r0, #16]
  414b14:	4605      	mov	r5, r0
  414b16:	64b8      	str	r0, [r7, #72]	; 0x48
  414b18:	6003      	str	r3, [r0, #0]
  414b1a:	e7c0      	b.n	414a9e <__pow5mult+0x1a>
  414b1c:	004194b8 	.word	0x004194b8

00414b20 <__lshift>:
  414b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414b24:	4693      	mov	fp, r2
  414b26:	690a      	ldr	r2, [r1, #16]
  414b28:	688b      	ldr	r3, [r1, #8]
  414b2a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  414b2e:	eb0a 0902 	add.w	r9, sl, r2
  414b32:	f109 0601 	add.w	r6, r9, #1
  414b36:	429e      	cmp	r6, r3
  414b38:	460f      	mov	r7, r1
  414b3a:	4680      	mov	r8, r0
  414b3c:	6849      	ldr	r1, [r1, #4]
  414b3e:	dd04      	ble.n	414b4a <__lshift+0x2a>
  414b40:	005b      	lsls	r3, r3, #1
  414b42:	429e      	cmp	r6, r3
  414b44:	f101 0101 	add.w	r1, r1, #1
  414b48:	dcfa      	bgt.n	414b40 <__lshift+0x20>
  414b4a:	4640      	mov	r0, r8
  414b4c:	f7ff fddc 	bl	414708 <_Balloc>
  414b50:	f1ba 0f00 	cmp.w	sl, #0
  414b54:	f100 0414 	add.w	r4, r0, #20
  414b58:	dd09      	ble.n	414b6e <__lshift+0x4e>
  414b5a:	2300      	movs	r3, #0
  414b5c:	461a      	mov	r2, r3
  414b5e:	4625      	mov	r5, r4
  414b60:	3301      	adds	r3, #1
  414b62:	4553      	cmp	r3, sl
  414b64:	f845 2b04 	str.w	r2, [r5], #4
  414b68:	d1fa      	bne.n	414b60 <__lshift+0x40>
  414b6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  414b6e:	693a      	ldr	r2, [r7, #16]
  414b70:	f107 0314 	add.w	r3, r7, #20
  414b74:	f01b 0b1f 	ands.w	fp, fp, #31
  414b78:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  414b7c:	d021      	beq.n	414bc2 <__lshift+0xa2>
  414b7e:	f1cb 0a20 	rsb	sl, fp, #32
  414b82:	2200      	movs	r2, #0
  414b84:	e000      	b.n	414b88 <__lshift+0x68>
  414b86:	462c      	mov	r4, r5
  414b88:	6819      	ldr	r1, [r3, #0]
  414b8a:	4625      	mov	r5, r4
  414b8c:	fa01 f10b 	lsl.w	r1, r1, fp
  414b90:	430a      	orrs	r2, r1
  414b92:	f845 2b04 	str.w	r2, [r5], #4
  414b96:	f853 2b04 	ldr.w	r2, [r3], #4
  414b9a:	4563      	cmp	r3, ip
  414b9c:	fa22 f20a 	lsr.w	r2, r2, sl
  414ba0:	d3f1      	bcc.n	414b86 <__lshift+0x66>
  414ba2:	6062      	str	r2, [r4, #4]
  414ba4:	b10a      	cbz	r2, 414baa <__lshift+0x8a>
  414ba6:	f109 0602 	add.w	r6, r9, #2
  414baa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  414bae:	687a      	ldr	r2, [r7, #4]
  414bb0:	3e01      	subs	r6, #1
  414bb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  414bb6:	6106      	str	r6, [r0, #16]
  414bb8:	6039      	str	r1, [r7, #0]
  414bba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  414bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414bc2:	f853 2b04 	ldr.w	r2, [r3], #4
  414bc6:	f844 2b04 	str.w	r2, [r4], #4
  414bca:	459c      	cmp	ip, r3
  414bcc:	d9ed      	bls.n	414baa <__lshift+0x8a>
  414bce:	f853 2b04 	ldr.w	r2, [r3], #4
  414bd2:	f844 2b04 	str.w	r2, [r4], #4
  414bd6:	459c      	cmp	ip, r3
  414bd8:	d8f3      	bhi.n	414bc2 <__lshift+0xa2>
  414bda:	e7e6      	b.n	414baa <__lshift+0x8a>

00414bdc <__mcmp>:
  414bdc:	6902      	ldr	r2, [r0, #16]
  414bde:	690b      	ldr	r3, [r1, #16]
  414be0:	1ad2      	subs	r2, r2, r3
  414be2:	b410      	push	{r4}
  414be4:	d115      	bne.n	414c12 <__mcmp+0x36>
  414be6:	009b      	lsls	r3, r3, #2
  414be8:	3014      	adds	r0, #20
  414bea:	3114      	adds	r1, #20
  414bec:	4419      	add	r1, r3
  414bee:	4403      	add	r3, r0
  414bf0:	e001      	b.n	414bf6 <__mcmp+0x1a>
  414bf2:	4298      	cmp	r0, r3
  414bf4:	d211      	bcs.n	414c1a <__mcmp+0x3e>
  414bf6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  414bfa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  414bfe:	42a2      	cmp	r2, r4
  414c00:	d0f7      	beq.n	414bf2 <__mcmp+0x16>
  414c02:	4294      	cmp	r4, r2
  414c04:	bf94      	ite	ls
  414c06:	2001      	movls	r0, #1
  414c08:	f04f 30ff 	movhi.w	r0, #4294967295
  414c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  414c10:	4770      	bx	lr
  414c12:	4610      	mov	r0, r2
  414c14:	f85d 4b04 	ldr.w	r4, [sp], #4
  414c18:	4770      	bx	lr
  414c1a:	2000      	movs	r0, #0
  414c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  414c20:	4770      	bx	lr
  414c22:	bf00      	nop

00414c24 <__mdiff>:
  414c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  414c28:	460d      	mov	r5, r1
  414c2a:	4604      	mov	r4, r0
  414c2c:	4611      	mov	r1, r2
  414c2e:	4628      	mov	r0, r5
  414c30:	4616      	mov	r6, r2
  414c32:	f7ff ffd3 	bl	414bdc <__mcmp>
  414c36:	1e07      	subs	r7, r0, #0
  414c38:	d055      	beq.n	414ce6 <__mdiff+0xc2>
  414c3a:	db4e      	blt.n	414cda <__mdiff+0xb6>
  414c3c:	f04f 0800 	mov.w	r8, #0
  414c40:	6869      	ldr	r1, [r5, #4]
  414c42:	4620      	mov	r0, r4
  414c44:	f7ff fd60 	bl	414708 <_Balloc>
  414c48:	692f      	ldr	r7, [r5, #16]
  414c4a:	6932      	ldr	r2, [r6, #16]
  414c4c:	f8c0 800c 	str.w	r8, [r0, #12]
  414c50:	3514      	adds	r5, #20
  414c52:	3614      	adds	r6, #20
  414c54:	f100 0314 	add.w	r3, r0, #20
  414c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  414c5c:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  414c60:	2100      	movs	r1, #0
  414c62:	f856 2b04 	ldr.w	r2, [r6], #4
  414c66:	f855 4b04 	ldr.w	r4, [r5], #4
  414c6a:	fa1f f982 	uxth.w	r9, r2
  414c6e:	fa11 fa84 	uxtah	sl, r1, r4
  414c72:	0c11      	lsrs	r1, r2, #16
  414c74:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  414c78:	ebc9 020a 	rsb	r2, r9, sl
  414c7c:	eb01 4122 	add.w	r1, r1, r2, asr #16
  414c80:	b292      	uxth	r2, r2
  414c82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  414c86:	45b0      	cmp	r8, r6
  414c88:	f843 2b04 	str.w	r2, [r3], #4
  414c8c:	ea4f 4121 	mov.w	r1, r1, asr #16
  414c90:	462c      	mov	r4, r5
  414c92:	d8e6      	bhi.n	414c62 <__mdiff+0x3e>
  414c94:	45ac      	cmp	ip, r5
  414c96:	4698      	mov	r8, r3
  414c98:	d915      	bls.n	414cc6 <__mdiff+0xa2>
  414c9a:	f854 6b04 	ldr.w	r6, [r4], #4
  414c9e:	fa11 f186 	uxtah	r1, r1, r6
  414ca2:	0c36      	lsrs	r6, r6, #16
  414ca4:	eb06 4621 	add.w	r6, r6, r1, asr #16
  414ca8:	b289      	uxth	r1, r1
  414caa:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  414cae:	45a4      	cmp	ip, r4
  414cb0:	f843 2b04 	str.w	r2, [r3], #4
  414cb4:	ea4f 4126 	mov.w	r1, r6, asr #16
  414cb8:	d8ef      	bhi.n	414c9a <__mdiff+0x76>
  414cba:	43eb      	mvns	r3, r5
  414cbc:	4463      	add	r3, ip
  414cbe:	f023 0303 	bic.w	r3, r3, #3
  414cc2:	3304      	adds	r3, #4
  414cc4:	4443      	add	r3, r8
  414cc6:	3b04      	subs	r3, #4
  414cc8:	b922      	cbnz	r2, 414cd4 <__mdiff+0xb0>
  414cca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  414cce:	3f01      	subs	r7, #1
  414cd0:	2a00      	cmp	r2, #0
  414cd2:	d0fa      	beq.n	414cca <__mdiff+0xa6>
  414cd4:	6107      	str	r7, [r0, #16]
  414cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  414cda:	462b      	mov	r3, r5
  414cdc:	f04f 0801 	mov.w	r8, #1
  414ce0:	4635      	mov	r5, r6
  414ce2:	461e      	mov	r6, r3
  414ce4:	e7ac      	b.n	414c40 <__mdiff+0x1c>
  414ce6:	4620      	mov	r0, r4
  414ce8:	4639      	mov	r1, r7
  414cea:	f7ff fd0d 	bl	414708 <_Balloc>
  414cee:	2301      	movs	r3, #1
  414cf0:	6147      	str	r7, [r0, #20]
  414cf2:	6103      	str	r3, [r0, #16]
  414cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00414cf8 <__ulp>:
  414cf8:	4b0e      	ldr	r3, [pc, #56]	; (414d34 <__ulp+0x3c>)
  414cfa:	400b      	ands	r3, r1
  414cfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  414d00:	2b00      	cmp	r3, #0
  414d02:	dd02      	ble.n	414d0a <__ulp+0x12>
  414d04:	4619      	mov	r1, r3
  414d06:	2000      	movs	r0, #0
  414d08:	4770      	bx	lr
  414d0a:	425b      	negs	r3, r3
  414d0c:	151b      	asrs	r3, r3, #20
  414d0e:	2b13      	cmp	r3, #19
  414d10:	dd0a      	ble.n	414d28 <__ulp+0x30>
  414d12:	2b32      	cmp	r3, #50	; 0x32
  414d14:	bfdd      	ittte	le
  414d16:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  414d1a:	2201      	movle	r2, #1
  414d1c:	fa02 f303 	lslle.w	r3, r2, r3
  414d20:	2301      	movgt	r3, #1
  414d22:	2100      	movs	r1, #0
  414d24:	4618      	mov	r0, r3
  414d26:	4770      	bx	lr
  414d28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  414d2c:	fa42 f103 	asr.w	r1, r2, r3
  414d30:	2000      	movs	r0, #0
  414d32:	4770      	bx	lr
  414d34:	7ff00000 	.word	0x7ff00000

00414d38 <__b2d>:
  414d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414d3a:	6904      	ldr	r4, [r0, #16]
  414d3c:	f100 0614 	add.w	r6, r0, #20
  414d40:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  414d44:	460f      	mov	r7, r1
  414d46:	f854 5c04 	ldr.w	r5, [r4, #-4]
  414d4a:	4628      	mov	r0, r5
  414d4c:	f7ff fda4 	bl	414898 <__hi0bits>
  414d50:	f1c0 0320 	rsb	r3, r0, #32
  414d54:	280a      	cmp	r0, #10
  414d56:	603b      	str	r3, [r7, #0]
  414d58:	f1a4 0104 	sub.w	r1, r4, #4
  414d5c:	dc19      	bgt.n	414d92 <__b2d+0x5a>
  414d5e:	428e      	cmp	r6, r1
  414d60:	f1c0 070b 	rsb	r7, r0, #11
  414d64:	bf38      	it	cc
  414d66:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  414d6a:	fa25 fc07 	lsr.w	ip, r5, r7
  414d6e:	f100 0015 	add.w	r0, r0, #21
  414d72:	bf38      	it	cc
  414d74:	fa21 f707 	lsrcc.w	r7, r1, r7
  414d78:	fa05 f500 	lsl.w	r5, r5, r0
  414d7c:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  414d80:	bf28      	it	cs
  414d82:	2700      	movcs	r7, #0
  414d84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  414d88:	ea47 0205 	orr.w	r2, r7, r5
  414d8c:	4610      	mov	r0, r2
  414d8e:	4619      	mov	r1, r3
  414d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414d92:	428e      	cmp	r6, r1
  414d94:	bf36      	itet	cc
  414d96:	f1a4 0108 	subcc.w	r1, r4, #8
  414d9a:	2400      	movcs	r4, #0
  414d9c:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  414da0:	f1b0 070b 	subs.w	r7, r0, #11
  414da4:	d019      	beq.n	414dda <__b2d+0xa2>
  414da6:	42b1      	cmp	r1, r6
  414da8:	bf88      	it	hi
  414daa:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  414dae:	fa05 f507 	lsl.w	r5, r5, r7
  414db2:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  414db6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  414dba:	fa24 fc00 	lsr.w	ip, r4, r0
  414dbe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  414dc2:	bf8c      	ite	hi
  414dc4:	fa21 f000 	lsrhi.w	r0, r1, r0
  414dc8:	2000      	movls	r0, #0
  414dca:	40bc      	lsls	r4, r7
  414dcc:	ea45 030c 	orr.w	r3, r5, ip
  414dd0:	ea40 0204 	orr.w	r2, r0, r4
  414dd4:	4610      	mov	r0, r2
  414dd6:	4619      	mov	r1, r3
  414dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414dda:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  414dde:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  414de2:	4622      	mov	r2, r4
  414de4:	4610      	mov	r0, r2
  414de6:	4619      	mov	r1, r3
  414de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414dea:	bf00      	nop

00414dec <__d2b>:
  414dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  414df0:	b083      	sub	sp, #12
  414df2:	2101      	movs	r1, #1
  414df4:	461d      	mov	r5, r3
  414df6:	f3c3 560a 	ubfx	r6, r3, #20, #11
  414dfa:	4614      	mov	r4, r2
  414dfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  414dfe:	f7ff fc83 	bl	414708 <_Balloc>
  414e02:	f3c5 0313 	ubfx	r3, r5, #0, #20
  414e06:	4680      	mov	r8, r0
  414e08:	b10e      	cbz	r6, 414e0e <__d2b+0x22>
  414e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  414e0e:	9301      	str	r3, [sp, #4]
  414e10:	b324      	cbz	r4, 414e5c <__d2b+0x70>
  414e12:	a802      	add	r0, sp, #8
  414e14:	f840 4d08 	str.w	r4, [r0, #-8]!
  414e18:	4668      	mov	r0, sp
  414e1a:	f7ff fd5d 	bl	4148d8 <__lo0bits>
  414e1e:	2800      	cmp	r0, #0
  414e20:	d135      	bne.n	414e8e <__d2b+0xa2>
  414e22:	e89d 000c 	ldmia.w	sp, {r2, r3}
  414e26:	f8c8 2014 	str.w	r2, [r8, #20]
  414e2a:	2b00      	cmp	r3, #0
  414e2c:	bf0c      	ite	eq
  414e2e:	2401      	moveq	r4, #1
  414e30:	2402      	movne	r4, #2
  414e32:	f8c8 3018 	str.w	r3, [r8, #24]
  414e36:	f8c8 4010 	str.w	r4, [r8, #16]
  414e3a:	b9de      	cbnz	r6, 414e74 <__d2b+0x88>
  414e3c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  414e40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  414e44:	6038      	str	r0, [r7, #0]
  414e46:	6918      	ldr	r0, [r3, #16]
  414e48:	f7ff fd26 	bl	414898 <__hi0bits>
  414e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  414e4e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  414e52:	6018      	str	r0, [r3, #0]
  414e54:	4640      	mov	r0, r8
  414e56:	b003      	add	sp, #12
  414e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  414e5c:	a801      	add	r0, sp, #4
  414e5e:	f7ff fd3b 	bl	4148d8 <__lo0bits>
  414e62:	2401      	movs	r4, #1
  414e64:	9b01      	ldr	r3, [sp, #4]
  414e66:	f8c8 3014 	str.w	r3, [r8, #20]
  414e6a:	3020      	adds	r0, #32
  414e6c:	f8c8 4010 	str.w	r4, [r8, #16]
  414e70:	2e00      	cmp	r6, #0
  414e72:	d0e3      	beq.n	414e3c <__d2b+0x50>
  414e74:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  414e78:	eb09 0300 	add.w	r3, r9, r0
  414e7c:	603b      	str	r3, [r7, #0]
  414e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  414e80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  414e84:	6018      	str	r0, [r3, #0]
  414e86:	4640      	mov	r0, r8
  414e88:	b003      	add	sp, #12
  414e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  414e8e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  414e92:	f1c0 0120 	rsb	r1, r0, #32
  414e96:	fa03 f101 	lsl.w	r1, r3, r1
  414e9a:	430a      	orrs	r2, r1
  414e9c:	40c3      	lsrs	r3, r0
  414e9e:	9301      	str	r3, [sp, #4]
  414ea0:	f8c8 2014 	str.w	r2, [r8, #20]
  414ea4:	e7c1      	b.n	414e2a <__d2b+0x3e>
  414ea6:	bf00      	nop

00414ea8 <__ratio>:
  414ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  414eaa:	b083      	sub	sp, #12
  414eac:	460e      	mov	r6, r1
  414eae:	4669      	mov	r1, sp
  414eb0:	4607      	mov	r7, r0
  414eb2:	f7ff ff41 	bl	414d38 <__b2d>
  414eb6:	4604      	mov	r4, r0
  414eb8:	460d      	mov	r5, r1
  414eba:	4630      	mov	r0, r6
  414ebc:	a901      	add	r1, sp, #4
  414ebe:	f7ff ff3b 	bl	414d38 <__b2d>
  414ec2:	4602      	mov	r2, r0
  414ec4:	460b      	mov	r3, r1
  414ec6:	e89d 0003 	ldmia.w	sp, {r0, r1}
  414eca:	693f      	ldr	r7, [r7, #16]
  414ecc:	6936      	ldr	r6, [r6, #16]
  414ece:	1a41      	subs	r1, r0, r1
  414ed0:	ebc6 0e07 	rsb	lr, r6, r7
  414ed4:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  414ed8:	f1be 0f00 	cmp.w	lr, #0
  414edc:	dd08      	ble.n	414ef0 <__ratio+0x48>
  414ede:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  414ee2:	460d      	mov	r5, r1
  414ee4:	4620      	mov	r0, r4
  414ee6:	4629      	mov	r1, r5
  414ee8:	f002 fe94 	bl	417c14 <__aeabi_ddiv>
  414eec:	b003      	add	sp, #12
  414eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414ef0:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  414ef4:	463b      	mov	r3, r7
  414ef6:	e7f5      	b.n	414ee4 <__ratio+0x3c>

00414ef8 <__copybits>:
  414ef8:	b470      	push	{r4, r5, r6}
  414efa:	6915      	ldr	r5, [r2, #16]
  414efc:	f102 0314 	add.w	r3, r2, #20
  414f00:	3901      	subs	r1, #1
  414f02:	114e      	asrs	r6, r1, #5
  414f04:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  414f08:	3601      	adds	r6, #1
  414f0a:	42ab      	cmp	r3, r5
  414f0c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  414f10:	d20c      	bcs.n	414f2c <__copybits+0x34>
  414f12:	4601      	mov	r1, r0
  414f14:	f853 4b04 	ldr.w	r4, [r3], #4
  414f18:	f841 4b04 	str.w	r4, [r1], #4
  414f1c:	429d      	cmp	r5, r3
  414f1e:	d8f9      	bhi.n	414f14 <__copybits+0x1c>
  414f20:	1aab      	subs	r3, r5, r2
  414f22:	3b15      	subs	r3, #21
  414f24:	f023 0303 	bic.w	r3, r3, #3
  414f28:	3304      	adds	r3, #4
  414f2a:	4418      	add	r0, r3
  414f2c:	4286      	cmp	r6, r0
  414f2e:	d904      	bls.n	414f3a <__copybits+0x42>
  414f30:	2300      	movs	r3, #0
  414f32:	f840 3b04 	str.w	r3, [r0], #4
  414f36:	4286      	cmp	r6, r0
  414f38:	d8fb      	bhi.n	414f32 <__copybits+0x3a>
  414f3a:	bc70      	pop	{r4, r5, r6}
  414f3c:	4770      	bx	lr
  414f3e:	bf00      	nop

00414f40 <__any_on>:
  414f40:	6903      	ldr	r3, [r0, #16]
  414f42:	114a      	asrs	r2, r1, #5
  414f44:	4293      	cmp	r3, r2
  414f46:	b410      	push	{r4}
  414f48:	f100 0414 	add.w	r4, r0, #20
  414f4c:	da10      	bge.n	414f70 <__any_on+0x30>
  414f4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  414f52:	429c      	cmp	r4, r3
  414f54:	d221      	bcs.n	414f9a <__any_on+0x5a>
  414f56:	f853 0c04 	ldr.w	r0, [r3, #-4]
  414f5a:	3b04      	subs	r3, #4
  414f5c:	b118      	cbz	r0, 414f66 <__any_on+0x26>
  414f5e:	e015      	b.n	414f8c <__any_on+0x4c>
  414f60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  414f64:	b992      	cbnz	r2, 414f8c <__any_on+0x4c>
  414f66:	429c      	cmp	r4, r3
  414f68:	d3fa      	bcc.n	414f60 <__any_on+0x20>
  414f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  414f6e:	4770      	bx	lr
  414f70:	dd10      	ble.n	414f94 <__any_on+0x54>
  414f72:	f011 011f 	ands.w	r1, r1, #31
  414f76:	d00d      	beq.n	414f94 <__any_on+0x54>
  414f78:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  414f7c:	fa20 f301 	lsr.w	r3, r0, r1
  414f80:	fa03 f101 	lsl.w	r1, r3, r1
  414f84:	4281      	cmp	r1, r0
  414f86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  414f8a:	d0e2      	beq.n	414f52 <__any_on+0x12>
  414f8c:	2001      	movs	r0, #1
  414f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  414f92:	4770      	bx	lr
  414f94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  414f98:	e7db      	b.n	414f52 <__any_on+0x12>
  414f9a:	2000      	movs	r0, #0
  414f9c:	e7e5      	b.n	414f6a <__any_on+0x2a>
  414f9e:	bf00      	nop

00414fa0 <_read_r>:
  414fa0:	b570      	push	{r4, r5, r6, lr}
  414fa2:	4c08      	ldr	r4, [pc, #32]	; (414fc4 <_read_r+0x24>)
  414fa4:	4606      	mov	r6, r0
  414fa6:	2500      	movs	r5, #0
  414fa8:	4608      	mov	r0, r1
  414faa:	4611      	mov	r1, r2
  414fac:	461a      	mov	r2, r3
  414fae:	6025      	str	r5, [r4, #0]
  414fb0:	f7ee fa7a 	bl	4034a8 <_read>
  414fb4:	1c43      	adds	r3, r0, #1
  414fb6:	d000      	beq.n	414fba <_read_r+0x1a>
  414fb8:	bd70      	pop	{r4, r5, r6, pc}
  414fba:	6823      	ldr	r3, [r4, #0]
  414fbc:	2b00      	cmp	r3, #0
  414fbe:	d0fb      	beq.n	414fb8 <_read_r+0x18>
  414fc0:	6033      	str	r3, [r6, #0]
  414fc2:	bd70      	pop	{r4, r5, r6, pc}
  414fc4:	20003498 	.word	0x20003498

00414fc8 <_realloc_r>:
  414fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414fcc:	460c      	mov	r4, r1
  414fce:	b083      	sub	sp, #12
  414fd0:	4690      	mov	r8, r2
  414fd2:	4681      	mov	r9, r0
  414fd4:	2900      	cmp	r1, #0
  414fd6:	f000 80e2 	beq.w	41519e <_realloc_r+0x1d6>
  414fda:	f7fa f923 	bl	40f224 <__malloc_lock>
  414fde:	f108 060b 	add.w	r6, r8, #11
  414fe2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  414fe6:	2e16      	cmp	r6, #22
  414fe8:	f023 0503 	bic.w	r5, r3, #3
  414fec:	f1a4 0708 	sub.w	r7, r4, #8
  414ff0:	d84b      	bhi.n	41508a <_realloc_r+0xc2>
  414ff2:	2110      	movs	r1, #16
  414ff4:	460e      	mov	r6, r1
  414ff6:	45b0      	cmp	r8, r6
  414ff8:	d84c      	bhi.n	415094 <_realloc_r+0xcc>
  414ffa:	428d      	cmp	r5, r1
  414ffc:	da78      	bge.n	4150f0 <_realloc_r+0x128>
  414ffe:	f8df b390 	ldr.w	fp, [pc, #912]	; 415390 <_realloc_r+0x3c8>
  415002:	f8db e008 	ldr.w	lr, [fp, #8]
  415006:	1978      	adds	r0, r7, r5
  415008:	4586      	cmp	lr, r0
  41500a:	f000 80ce 	beq.w	4151aa <_realloc_r+0x1e2>
  41500e:	6842      	ldr	r2, [r0, #4]
  415010:	f022 0c01 	bic.w	ip, r2, #1
  415014:	4484      	add	ip, r0
  415016:	f8dc c004 	ldr.w	ip, [ip, #4]
  41501a:	f01c 0f01 	tst.w	ip, #1
  41501e:	d07a      	beq.n	415116 <_realloc_r+0x14e>
  415020:	2200      	movs	r2, #0
  415022:	4610      	mov	r0, r2
  415024:	07db      	lsls	r3, r3, #31
  415026:	f100 8092 	bmi.w	41514e <_realloc_r+0x186>
  41502a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  41502e:	ebc3 0a07 	rsb	sl, r3, r7
  415032:	f8da 3004 	ldr.w	r3, [sl, #4]
  415036:	f023 0303 	bic.w	r3, r3, #3
  41503a:	442b      	add	r3, r5
  41503c:	b388      	cbz	r0, 4150a2 <_realloc_r+0xda>
  41503e:	4570      	cmp	r0, lr
  415040:	f000 80ed 	beq.w	41521e <_realloc_r+0x256>
  415044:	eb02 0e03 	add.w	lr, r2, r3
  415048:	458e      	cmp	lr, r1
  41504a:	db2a      	blt.n	4150a2 <_realloc_r+0xda>
  41504c:	68c3      	ldr	r3, [r0, #12]
  41504e:	6882      	ldr	r2, [r0, #8]
  415050:	4657      	mov	r7, sl
  415052:	60d3      	str	r3, [r2, #12]
  415054:	609a      	str	r2, [r3, #8]
  415056:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41505a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41505e:	60cb      	str	r3, [r1, #12]
  415060:	1f2a      	subs	r2, r5, #4
  415062:	2a24      	cmp	r2, #36	; 0x24
  415064:	6099      	str	r1, [r3, #8]
  415066:	f200 8126 	bhi.w	4152b6 <_realloc_r+0x2ee>
  41506a:	2a13      	cmp	r2, #19
  41506c:	f240 80b3 	bls.w	4151d6 <_realloc_r+0x20e>
  415070:	6823      	ldr	r3, [r4, #0]
  415072:	f8ca 3008 	str.w	r3, [sl, #8]
  415076:	6863      	ldr	r3, [r4, #4]
  415078:	f8ca 300c 	str.w	r3, [sl, #12]
  41507c:	2a1b      	cmp	r2, #27
  41507e:	f200 8130 	bhi.w	4152e2 <_realloc_r+0x31a>
  415082:	3408      	adds	r4, #8
  415084:	f10a 0310 	add.w	r3, sl, #16
  415088:	e0a6      	b.n	4151d8 <_realloc_r+0x210>
  41508a:	f026 0607 	bic.w	r6, r6, #7
  41508e:	2e00      	cmp	r6, #0
  415090:	4631      	mov	r1, r6
  415092:	dab0      	bge.n	414ff6 <_realloc_r+0x2e>
  415094:	230c      	movs	r3, #12
  415096:	2000      	movs	r0, #0
  415098:	f8c9 3000 	str.w	r3, [r9]
  41509c:	b003      	add	sp, #12
  41509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4150a2:	428b      	cmp	r3, r1
  4150a4:	db53      	blt.n	41514e <_realloc_r+0x186>
  4150a6:	4657      	mov	r7, sl
  4150a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4150ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4150b0:	1f2a      	subs	r2, r5, #4
  4150b2:	2a24      	cmp	r2, #36	; 0x24
  4150b4:	60c1      	str	r1, [r0, #12]
  4150b6:	6088      	str	r0, [r1, #8]
  4150b8:	f200 8109 	bhi.w	4152ce <_realloc_r+0x306>
  4150bc:	2a13      	cmp	r2, #19
  4150be:	f240 8104 	bls.w	4152ca <_realloc_r+0x302>
  4150c2:	6821      	ldr	r1, [r4, #0]
  4150c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4150c8:	6861      	ldr	r1, [r4, #4]
  4150ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4150ce:	2a1b      	cmp	r2, #27
  4150d0:	f200 811c 	bhi.w	41530c <_realloc_r+0x344>
  4150d4:	3408      	adds	r4, #8
  4150d6:	f10a 0210 	add.w	r2, sl, #16
  4150da:	6821      	ldr	r1, [r4, #0]
  4150dc:	6011      	str	r1, [r2, #0]
  4150de:	6861      	ldr	r1, [r4, #4]
  4150e0:	6051      	str	r1, [r2, #4]
  4150e2:	68a1      	ldr	r1, [r4, #8]
  4150e4:	6091      	str	r1, [r2, #8]
  4150e6:	461d      	mov	r5, r3
  4150e8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4150ec:	463c      	mov	r4, r7
  4150ee:	4657      	mov	r7, sl
  4150f0:	1baa      	subs	r2, r5, r6
  4150f2:	2a0f      	cmp	r2, #15
  4150f4:	f003 0301 	and.w	r3, r3, #1
  4150f8:	d819      	bhi.n	41512e <_realloc_r+0x166>
  4150fa:	432b      	orrs	r3, r5
  4150fc:	443d      	add	r5, r7
  4150fe:	607b      	str	r3, [r7, #4]
  415100:	686b      	ldr	r3, [r5, #4]
  415102:	f043 0301 	orr.w	r3, r3, #1
  415106:	606b      	str	r3, [r5, #4]
  415108:	4648      	mov	r0, r9
  41510a:	f7fa f88d 	bl	40f228 <__malloc_unlock>
  41510e:	4620      	mov	r0, r4
  415110:	b003      	add	sp, #12
  415112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415116:	f022 0203 	bic.w	r2, r2, #3
  41511a:	eb02 0c05 	add.w	ip, r2, r5
  41511e:	458c      	cmp	ip, r1
  415120:	db80      	blt.n	415024 <_realloc_r+0x5c>
  415122:	68c2      	ldr	r2, [r0, #12]
  415124:	6881      	ldr	r1, [r0, #8]
  415126:	4665      	mov	r5, ip
  415128:	60ca      	str	r2, [r1, #12]
  41512a:	6091      	str	r1, [r2, #8]
  41512c:	e7e0      	b.n	4150f0 <_realloc_r+0x128>
  41512e:	19b9      	adds	r1, r7, r6
  415130:	f042 0001 	orr.w	r0, r2, #1
  415134:	431e      	orrs	r6, r3
  415136:	440a      	add	r2, r1
  415138:	607e      	str	r6, [r7, #4]
  41513a:	6048      	str	r0, [r1, #4]
  41513c:	6853      	ldr	r3, [r2, #4]
  41513e:	f043 0301 	orr.w	r3, r3, #1
  415142:	3108      	adds	r1, #8
  415144:	6053      	str	r3, [r2, #4]
  415146:	4648      	mov	r0, r9
  415148:	f7fe fed2 	bl	413ef0 <_free_r>
  41514c:	e7dc      	b.n	415108 <_realloc_r+0x140>
  41514e:	4641      	mov	r1, r8
  415150:	4648      	mov	r0, r9
  415152:	f7f9 fce7 	bl	40eb24 <_malloc_r>
  415156:	4680      	mov	r8, r0
  415158:	b1d0      	cbz	r0, 415190 <_realloc_r+0x1c8>
  41515a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  41515e:	f023 0201 	bic.w	r2, r3, #1
  415162:	443a      	add	r2, r7
  415164:	f1a0 0108 	sub.w	r1, r0, #8
  415168:	4291      	cmp	r1, r2
  41516a:	f000 809e 	beq.w	4152aa <_realloc_r+0x2e2>
  41516e:	1f2a      	subs	r2, r5, #4
  415170:	2a24      	cmp	r2, #36	; 0x24
  415172:	d850      	bhi.n	415216 <_realloc_r+0x24e>
  415174:	2a13      	cmp	r2, #19
  415176:	d823      	bhi.n	4151c0 <_realloc_r+0x1f8>
  415178:	4603      	mov	r3, r0
  41517a:	4622      	mov	r2, r4
  41517c:	6811      	ldr	r1, [r2, #0]
  41517e:	6019      	str	r1, [r3, #0]
  415180:	6851      	ldr	r1, [r2, #4]
  415182:	6059      	str	r1, [r3, #4]
  415184:	6892      	ldr	r2, [r2, #8]
  415186:	609a      	str	r2, [r3, #8]
  415188:	4621      	mov	r1, r4
  41518a:	4648      	mov	r0, r9
  41518c:	f7fe feb0 	bl	413ef0 <_free_r>
  415190:	4648      	mov	r0, r9
  415192:	f7fa f849 	bl	40f228 <__malloc_unlock>
  415196:	4640      	mov	r0, r8
  415198:	b003      	add	sp, #12
  41519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41519e:	4611      	mov	r1, r2
  4151a0:	b003      	add	sp, #12
  4151a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4151a6:	f7f9 bcbd 	b.w	40eb24 <_malloc_r>
  4151aa:	f8de 2004 	ldr.w	r2, [lr, #4]
  4151ae:	f022 0203 	bic.w	r2, r2, #3
  4151b2:	1950      	adds	r0, r2, r5
  4151b4:	f106 0c10 	add.w	ip, r6, #16
  4151b8:	4560      	cmp	r0, ip
  4151ba:	da19      	bge.n	4151f0 <_realloc_r+0x228>
  4151bc:	4670      	mov	r0, lr
  4151be:	e731      	b.n	415024 <_realloc_r+0x5c>
  4151c0:	6823      	ldr	r3, [r4, #0]
  4151c2:	6003      	str	r3, [r0, #0]
  4151c4:	6863      	ldr	r3, [r4, #4]
  4151c6:	6043      	str	r3, [r0, #4]
  4151c8:	2a1b      	cmp	r2, #27
  4151ca:	d863      	bhi.n	415294 <_realloc_r+0x2cc>
  4151cc:	f100 0308 	add.w	r3, r0, #8
  4151d0:	f104 0208 	add.w	r2, r4, #8
  4151d4:	e7d2      	b.n	41517c <_realloc_r+0x1b4>
  4151d6:	463b      	mov	r3, r7
  4151d8:	6822      	ldr	r2, [r4, #0]
  4151da:	601a      	str	r2, [r3, #0]
  4151dc:	6862      	ldr	r2, [r4, #4]
  4151de:	605a      	str	r2, [r3, #4]
  4151e0:	68a2      	ldr	r2, [r4, #8]
  4151e2:	609a      	str	r2, [r3, #8]
  4151e4:	463c      	mov	r4, r7
  4151e6:	4675      	mov	r5, lr
  4151e8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4151ec:	4657      	mov	r7, sl
  4151ee:	e77f      	b.n	4150f0 <_realloc_r+0x128>
  4151f0:	4437      	add	r7, r6
  4151f2:	1b83      	subs	r3, r0, r6
  4151f4:	f043 0301 	orr.w	r3, r3, #1
  4151f8:	f8cb 7008 	str.w	r7, [fp, #8]
  4151fc:	607b      	str	r3, [r7, #4]
  4151fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
  415202:	f003 0301 	and.w	r3, r3, #1
  415206:	431e      	orrs	r6, r3
  415208:	4648      	mov	r0, r9
  41520a:	f844 6c04 	str.w	r6, [r4, #-4]
  41520e:	f7fa f80b 	bl	40f228 <__malloc_unlock>
  415212:	4620      	mov	r0, r4
  415214:	e77c      	b.n	415110 <_realloc_r+0x148>
  415216:	4621      	mov	r1, r4
  415218:	f7ff fa16 	bl	414648 <memmove>
  41521c:	e7b4      	b.n	415188 <_realloc_r+0x1c0>
  41521e:	eb02 0c03 	add.w	ip, r2, r3
  415222:	f106 0210 	add.w	r2, r6, #16
  415226:	4594      	cmp	ip, r2
  415228:	f6ff af3b 	blt.w	4150a2 <_realloc_r+0xda>
  41522c:	4657      	mov	r7, sl
  41522e:	f8da 300c 	ldr.w	r3, [sl, #12]
  415232:	f857 1f08 	ldr.w	r1, [r7, #8]!
  415236:	1f2a      	subs	r2, r5, #4
  415238:	2a24      	cmp	r2, #36	; 0x24
  41523a:	60cb      	str	r3, [r1, #12]
  41523c:	6099      	str	r1, [r3, #8]
  41523e:	f200 8087 	bhi.w	415350 <_realloc_r+0x388>
  415242:	2a13      	cmp	r2, #19
  415244:	d978      	bls.n	415338 <_realloc_r+0x370>
  415246:	6823      	ldr	r3, [r4, #0]
  415248:	f8ca 3008 	str.w	r3, [sl, #8]
  41524c:	6863      	ldr	r3, [r4, #4]
  41524e:	f8ca 300c 	str.w	r3, [sl, #12]
  415252:	2a1b      	cmp	r2, #27
  415254:	f200 8085 	bhi.w	415362 <_realloc_r+0x39a>
  415258:	3408      	adds	r4, #8
  41525a:	f10a 0310 	add.w	r3, sl, #16
  41525e:	6822      	ldr	r2, [r4, #0]
  415260:	601a      	str	r2, [r3, #0]
  415262:	6862      	ldr	r2, [r4, #4]
  415264:	605a      	str	r2, [r3, #4]
  415266:	68a2      	ldr	r2, [r4, #8]
  415268:	609a      	str	r2, [r3, #8]
  41526a:	eb0a 0306 	add.w	r3, sl, r6
  41526e:	ebc6 020c 	rsb	r2, r6, ip
  415272:	f042 0201 	orr.w	r2, r2, #1
  415276:	f8cb 3008 	str.w	r3, [fp, #8]
  41527a:	605a      	str	r2, [r3, #4]
  41527c:	f8da 3004 	ldr.w	r3, [sl, #4]
  415280:	f003 0301 	and.w	r3, r3, #1
  415284:	431e      	orrs	r6, r3
  415286:	4648      	mov	r0, r9
  415288:	f8ca 6004 	str.w	r6, [sl, #4]
  41528c:	f7f9 ffcc 	bl	40f228 <__malloc_unlock>
  415290:	4638      	mov	r0, r7
  415292:	e73d      	b.n	415110 <_realloc_r+0x148>
  415294:	68a3      	ldr	r3, [r4, #8]
  415296:	6083      	str	r3, [r0, #8]
  415298:	68e3      	ldr	r3, [r4, #12]
  41529a:	60c3      	str	r3, [r0, #12]
  41529c:	2a24      	cmp	r2, #36	; 0x24
  41529e:	d02c      	beq.n	4152fa <_realloc_r+0x332>
  4152a0:	f100 0310 	add.w	r3, r0, #16
  4152a4:	f104 0210 	add.w	r2, r4, #16
  4152a8:	e768      	b.n	41517c <_realloc_r+0x1b4>
  4152aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4152ae:	f022 0203 	bic.w	r2, r2, #3
  4152b2:	4415      	add	r5, r2
  4152b4:	e71c      	b.n	4150f0 <_realloc_r+0x128>
  4152b6:	4621      	mov	r1, r4
  4152b8:	4638      	mov	r0, r7
  4152ba:	4675      	mov	r5, lr
  4152bc:	463c      	mov	r4, r7
  4152be:	f7ff f9c3 	bl	414648 <memmove>
  4152c2:	4657      	mov	r7, sl
  4152c4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4152c8:	e712      	b.n	4150f0 <_realloc_r+0x128>
  4152ca:	463a      	mov	r2, r7
  4152cc:	e705      	b.n	4150da <_realloc_r+0x112>
  4152ce:	4621      	mov	r1, r4
  4152d0:	4638      	mov	r0, r7
  4152d2:	461d      	mov	r5, r3
  4152d4:	463c      	mov	r4, r7
  4152d6:	f7ff f9b7 	bl	414648 <memmove>
  4152da:	4657      	mov	r7, sl
  4152dc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4152e0:	e706      	b.n	4150f0 <_realloc_r+0x128>
  4152e2:	68a3      	ldr	r3, [r4, #8]
  4152e4:	f8ca 3010 	str.w	r3, [sl, #16]
  4152e8:	68e3      	ldr	r3, [r4, #12]
  4152ea:	f8ca 3014 	str.w	r3, [sl, #20]
  4152ee:	2a24      	cmp	r2, #36	; 0x24
  4152f0:	d018      	beq.n	415324 <_realloc_r+0x35c>
  4152f2:	3410      	adds	r4, #16
  4152f4:	f10a 0318 	add.w	r3, sl, #24
  4152f8:	e76e      	b.n	4151d8 <_realloc_r+0x210>
  4152fa:	6923      	ldr	r3, [r4, #16]
  4152fc:	6103      	str	r3, [r0, #16]
  4152fe:	6963      	ldr	r3, [r4, #20]
  415300:	6143      	str	r3, [r0, #20]
  415302:	f104 0218 	add.w	r2, r4, #24
  415306:	f100 0318 	add.w	r3, r0, #24
  41530a:	e737      	b.n	41517c <_realloc_r+0x1b4>
  41530c:	68a1      	ldr	r1, [r4, #8]
  41530e:	f8ca 1010 	str.w	r1, [sl, #16]
  415312:	68e1      	ldr	r1, [r4, #12]
  415314:	f8ca 1014 	str.w	r1, [sl, #20]
  415318:	2a24      	cmp	r2, #36	; 0x24
  41531a:	d00f      	beq.n	41533c <_realloc_r+0x374>
  41531c:	3410      	adds	r4, #16
  41531e:	f10a 0218 	add.w	r2, sl, #24
  415322:	e6da      	b.n	4150da <_realloc_r+0x112>
  415324:	6923      	ldr	r3, [r4, #16]
  415326:	f8ca 3018 	str.w	r3, [sl, #24]
  41532a:	6963      	ldr	r3, [r4, #20]
  41532c:	f8ca 301c 	str.w	r3, [sl, #28]
  415330:	3418      	adds	r4, #24
  415332:	f10a 0320 	add.w	r3, sl, #32
  415336:	e74f      	b.n	4151d8 <_realloc_r+0x210>
  415338:	463b      	mov	r3, r7
  41533a:	e790      	b.n	41525e <_realloc_r+0x296>
  41533c:	6922      	ldr	r2, [r4, #16]
  41533e:	f8ca 2018 	str.w	r2, [sl, #24]
  415342:	6962      	ldr	r2, [r4, #20]
  415344:	f8ca 201c 	str.w	r2, [sl, #28]
  415348:	3418      	adds	r4, #24
  41534a:	f10a 0220 	add.w	r2, sl, #32
  41534e:	e6c4      	b.n	4150da <_realloc_r+0x112>
  415350:	4621      	mov	r1, r4
  415352:	4638      	mov	r0, r7
  415354:	f8cd c004 	str.w	ip, [sp, #4]
  415358:	f7ff f976 	bl	414648 <memmove>
  41535c:	f8dd c004 	ldr.w	ip, [sp, #4]
  415360:	e783      	b.n	41526a <_realloc_r+0x2a2>
  415362:	68a3      	ldr	r3, [r4, #8]
  415364:	f8ca 3010 	str.w	r3, [sl, #16]
  415368:	68e3      	ldr	r3, [r4, #12]
  41536a:	f8ca 3014 	str.w	r3, [sl, #20]
  41536e:	2a24      	cmp	r2, #36	; 0x24
  415370:	d003      	beq.n	41537a <_realloc_r+0x3b2>
  415372:	3410      	adds	r4, #16
  415374:	f10a 0318 	add.w	r3, sl, #24
  415378:	e771      	b.n	41525e <_realloc_r+0x296>
  41537a:	6923      	ldr	r3, [r4, #16]
  41537c:	f8ca 3018 	str.w	r3, [sl, #24]
  415380:	6963      	ldr	r3, [r4, #20]
  415382:	f8ca 301c 	str.w	r3, [sl, #28]
  415386:	3418      	adds	r4, #24
  415388:	f10a 0320 	add.w	r3, sl, #32
  41538c:	e767      	b.n	41525e <_realloc_r+0x296>
  41538e:	bf00      	nop
  415390:	2000091c 	.word	0x2000091c

00415394 <__fpclassifyd>:
  415394:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  415398:	b410      	push	{r4}
  41539a:	d008      	beq.n	4153ae <__fpclassifyd+0x1a>
  41539c:	4a0f      	ldr	r2, [pc, #60]	; (4153dc <__fpclassifyd+0x48>)
  41539e:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  4153a2:	4294      	cmp	r4, r2
  4153a4:	d80a      	bhi.n	4153bc <__fpclassifyd+0x28>
  4153a6:	2004      	movs	r0, #4
  4153a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4153ac:	4770      	bx	lr
  4153ae:	2800      	cmp	r0, #0
  4153b0:	bf0c      	ite	eq
  4153b2:	2002      	moveq	r0, #2
  4153b4:	2003      	movne	r0, #3
  4153b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4153ba:	4770      	bx	lr
  4153bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  4153c0:	d201      	bcs.n	4153c6 <__fpclassifyd+0x32>
  4153c2:	2003      	movs	r0, #3
  4153c4:	e7f7      	b.n	4153b6 <__fpclassifyd+0x22>
  4153c6:	4a06      	ldr	r2, [pc, #24]	; (4153e0 <__fpclassifyd+0x4c>)
  4153c8:	4293      	cmp	r3, r2
  4153ca:	d001      	beq.n	4153d0 <__fpclassifyd+0x3c>
  4153cc:	2000      	movs	r0, #0
  4153ce:	e7f2      	b.n	4153b6 <__fpclassifyd+0x22>
  4153d0:	f1d0 0001 	rsbs	r0, r0, #1
  4153d4:	bf38      	it	cc
  4153d6:	2000      	movcc	r0, #0
  4153d8:	e7ed      	b.n	4153b6 <__fpclassifyd+0x22>
  4153da:	bf00      	nop
  4153dc:	7fdfffff 	.word	0x7fdfffff
  4153e0:	7ff00000 	.word	0x7ff00000

004153e4 <__sccl>:
  4153e4:	b470      	push	{r4, r5, r6}
  4153e6:	780c      	ldrb	r4, [r1, #0]
  4153e8:	2c5e      	cmp	r4, #94	; 0x5e
  4153ea:	d02e      	beq.n	41544a <__sccl+0x66>
  4153ec:	2200      	movs	r2, #0
  4153ee:	1c4d      	adds	r5, r1, #1
  4153f0:	4616      	mov	r6, r2
  4153f2:	2300      	movs	r3, #0
  4153f4:	54c2      	strb	r2, [r0, r3]
  4153f6:	3301      	adds	r3, #1
  4153f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4153fc:	d1fa      	bne.n	4153f4 <__sccl+0x10>
  4153fe:	b184      	cbz	r4, 415422 <__sccl+0x3e>
  415400:	f086 0201 	eor.w	r2, r6, #1
  415404:	5502      	strb	r2, [r0, r4]
  415406:	1c6e      	adds	r6, r5, #1
  415408:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  41540c:	2b2d      	cmp	r3, #45	; 0x2d
  41540e:	d00e      	beq.n	41542e <__sccl+0x4a>
  415410:	2b5d      	cmp	r3, #93	; 0x5d
  415412:	d009      	beq.n	415428 <__sccl+0x44>
  415414:	b113      	cbz	r3, 41541c <__sccl+0x38>
  415416:	461c      	mov	r4, r3
  415418:	4635      	mov	r5, r6
  41541a:	e7f3      	b.n	415404 <__sccl+0x20>
  41541c:	4628      	mov	r0, r5
  41541e:	bc70      	pop	{r4, r5, r6}
  415420:	4770      	bx	lr
  415422:	1e68      	subs	r0, r5, #1
  415424:	bc70      	pop	{r4, r5, r6}
  415426:	4770      	bx	lr
  415428:	4630      	mov	r0, r6
  41542a:	bc70      	pop	{r4, r5, r6}
  41542c:	4770      	bx	lr
  41542e:	7869      	ldrb	r1, [r5, #1]
  415430:	295d      	cmp	r1, #93	; 0x5d
  415432:	d0f0      	beq.n	415416 <__sccl+0x32>
  415434:	428c      	cmp	r4, r1
  415436:	dcee      	bgt.n	415416 <__sccl+0x32>
  415438:	3502      	adds	r5, #2
  41543a:	1903      	adds	r3, r0, r4
  41543c:	3401      	adds	r4, #1
  41543e:	42a1      	cmp	r1, r4
  415440:	f803 2f01 	strb.w	r2, [r3, #1]!
  415444:	dcfa      	bgt.n	41543c <__sccl+0x58>
  415446:	3602      	adds	r6, #2
  415448:	e7de      	b.n	415408 <__sccl+0x24>
  41544a:	2201      	movs	r2, #1
  41544c:	784c      	ldrb	r4, [r1, #1]
  41544e:	4616      	mov	r6, r2
  415450:	1c8d      	adds	r5, r1, #2
  415452:	e7ce      	b.n	4153f2 <__sccl+0xe>

00415454 <nanf>:
  415454:	4800      	ldr	r0, [pc, #0]	; (415458 <nanf+0x4>)
  415456:	4770      	bx	lr
  415458:	7fc00000 	.word	0x7fc00000

0041545c <sulp>:
  41545c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415460:	460d      	mov	r5, r1
  415462:	4690      	mov	r8, r2
  415464:	f7ff fc48 	bl	414cf8 <__ulp>
  415468:	4606      	mov	r6, r0
  41546a:	460f      	mov	r7, r1
  41546c:	f1b8 0f00 	cmp.w	r8, #0
  415470:	d00f      	beq.n	415492 <sulp+0x36>
  415472:	f3c5 530a 	ubfx	r3, r5, #20, #11
  415476:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  41547a:	2b00      	cmp	r3, #0
  41547c:	dd09      	ble.n	415492 <sulp+0x36>
  41547e:	051c      	lsls	r4, r3, #20
  415480:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  415484:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  415488:	2200      	movs	r2, #0
  41548a:	f002 fa99 	bl	4179c0 <__aeabi_dmul>
  41548e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415492:	4630      	mov	r0, r6
  415494:	4639      	mov	r1, r7
  415496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41549a:	bf00      	nop
  41549c:	0000      	movs	r0, r0
	...

004154a0 <_strtod_r>:
  4154a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4154a4:	b09f      	sub	sp, #124	; 0x7c
  4154a6:	460d      	mov	r5, r1
  4154a8:	9119      	str	r1, [sp, #100]	; 0x64
  4154aa:	4683      	mov	fp, r0
  4154ac:	9205      	str	r2, [sp, #20]
  4154ae:	2000      	movs	r0, #0
  4154b0:	460a      	mov	r2, r1
  4154b2:	2100      	movs	r1, #0
  4154b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4154b8:	2300      	movs	r3, #0
  4154ba:	931a      	str	r3, [sp, #104]	; 0x68
  4154bc:	4616      	mov	r6, r2
  4154be:	f812 4b01 	ldrb.w	r4, [r2], #1
  4154c2:	2c2d      	cmp	r4, #45	; 0x2d
  4154c4:	f200 8158 	bhi.w	415778 <_strtod_r+0x2d8>
  4154c8:	e8df f014 	tbh	[pc, r4, lsl #1]
  4154cc:	01560039 	.word	0x01560039
  4154d0:	01560156 	.word	0x01560156
  4154d4:	01560156 	.word	0x01560156
  4154d8:	01560156 	.word	0x01560156
  4154dc:	007d0156 	.word	0x007d0156
  4154e0:	007d007d 	.word	0x007d007d
  4154e4:	007d007d 	.word	0x007d007d
  4154e8:	01560156 	.word	0x01560156
  4154ec:	01560156 	.word	0x01560156
  4154f0:	01560156 	.word	0x01560156
  4154f4:	01560156 	.word	0x01560156
  4154f8:	01560156 	.word	0x01560156
  4154fc:	01560156 	.word	0x01560156
  415500:	01560156 	.word	0x01560156
  415504:	01560156 	.word	0x01560156
  415508:	01560156 	.word	0x01560156
  41550c:	0156007d 	.word	0x0156007d
  415510:	01560156 	.word	0x01560156
  415514:	01560156 	.word	0x01560156
  415518:	01560156 	.word	0x01560156
  41551c:	01560156 	.word	0x01560156
  415520:	004d0156 	.word	0x004d0156
  415524:	007f0156 	.word	0x007f0156
  415528:	2300      	movs	r3, #0
  41552a:	2101      	movs	r1, #1
  41552c:	469a      	mov	sl, r3
  41552e:	910b      	str	r1, [sp, #44]	; 0x2c
  415530:	2800      	cmp	r0, #0
  415532:	f040 8151 	bne.w	4157d8 <_strtod_r+0x338>
  415536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  415538:	2a00      	cmp	r2, #0
  41553a:	f040 814d 	bne.w	4157d8 <_strtod_r+0x338>
  41553e:	2000      	movs	r0, #0
  415540:	f04f 0800 	mov.w	r8, #0
  415544:	f04f 0900 	mov.w	r9, #0
  415548:	9519      	str	r5, [sp, #100]	; 0x64
  41554a:	9007      	str	r0, [sp, #28]
  41554c:	9805      	ldr	r0, [sp, #20]
  41554e:	b108      	cbz	r0, 415554 <_strtod_r+0xb4>
  415550:	9b19      	ldr	r3, [sp, #100]	; 0x64
  415552:	6003      	str	r3, [r0, #0]
  415554:	9907      	ldr	r1, [sp, #28]
  415556:	2900      	cmp	r1, #0
  415558:	f040 809e 	bne.w	415698 <_strtod_r+0x1f8>
  41555c:	4640      	mov	r0, r8
  41555e:	4649      	mov	r1, r9
  415560:	b01f      	add	sp, #124	; 0x7c
  415562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415566:	2300      	movs	r3, #0
  415568:	9307      	str	r3, [sp, #28]
  41556a:	1c73      	adds	r3, r6, #1
  41556c:	9319      	str	r3, [sp, #100]	; 0x64
  41556e:	7874      	ldrb	r4, [r6, #1]
  415570:	2c00      	cmp	r4, #0
  415572:	d0e4      	beq.n	41553e <_strtod_r+0x9e>
  415574:	2c30      	cmp	r4, #48	; 0x30
  415576:	461e      	mov	r6, r3
  415578:	f000 8103 	beq.w	415782 <_strtod_r+0x2e2>
  41557c:	2300      	movs	r3, #0
  41557e:	9606      	str	r6, [sp, #24]
  415580:	930a      	str	r3, [sp, #40]	; 0x28
  415582:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  415586:	2700      	movs	r7, #0
  415588:	2b09      	cmp	r3, #9
  41558a:	46b9      	mov	r9, r7
  41558c:	463e      	mov	r6, r7
  41558e:	d81f      	bhi.n	4155d0 <_strtod_r+0x130>
  415590:	9806      	ldr	r0, [sp, #24]
  415592:	1c43      	adds	r3, r0, #1
  415594:	e00f      	b.n	4155b6 <_strtod_r+0x116>
  415596:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  41559a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  41559e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  4155a2:	9319      	str	r3, [sp, #100]	; 0x64
  4155a4:	4698      	mov	r8, r3
  4155a6:	f813 4b01 	ldrb.w	r4, [r3], #1
  4155aa:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4155ae:	2a09      	cmp	r2, #9
  4155b0:	f106 0601 	add.w	r6, r6, #1
  4155b4:	d80e      	bhi.n	4155d4 <_strtod_r+0x134>
  4155b6:	2e08      	cmp	r6, #8
  4155b8:	dded      	ble.n	415596 <_strtod_r+0xf6>
  4155ba:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4155be:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  4155c2:	3f30      	subs	r7, #48	; 0x30
  4155c4:	e7ed      	b.n	4155a2 <_strtod_r+0x102>
  4155c6:	9219      	str	r2, [sp, #100]	; 0x64
  4155c8:	e778      	b.n	4154bc <_strtod_r+0x1c>
  4155ca:	2201      	movs	r2, #1
  4155cc:	9207      	str	r2, [sp, #28]
  4155ce:	e7cc      	b.n	41556a <_strtod_r+0xca>
  4155d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4155d4:	4658      	mov	r0, fp
  4155d6:	f7fe ff23 	bl	414420 <_localeconv_r>
  4155da:	f8d0 a000 	ldr.w	sl, [r0]
  4155de:	4658      	mov	r0, fp
  4155e0:	f7fe ff1e 	bl	414420 <_localeconv_r>
  4155e4:	6800      	ldr	r0, [r0, #0]
  4155e6:	f7fa f917 	bl	40f818 <strlen>
  4155ea:	4651      	mov	r1, sl
  4155ec:	4602      	mov	r2, r0
  4155ee:	4640      	mov	r0, r8
  4155f0:	f7fa f942 	bl	40f878 <strncmp>
  4155f4:	4680      	mov	r8, r0
  4155f6:	2800      	cmp	r0, #0
  4155f8:	f000 8146 	beq.w	415888 <_strtod_r+0x3e8>
  4155fc:	2000      	movs	r0, #0
  4155fe:	4603      	mov	r3, r0
  415600:	900b      	str	r0, [sp, #44]	; 0x2c
  415602:	46b2      	mov	sl, r6
  415604:	f024 0220 	bic.w	r2, r4, #32
  415608:	2a45      	cmp	r2, #69	; 0x45
  41560a:	f000 80e1 	beq.w	4157d0 <_strtod_r+0x330>
  41560e:	2100      	movs	r1, #0
  415610:	f1ba 0f00 	cmp.w	sl, #0
  415614:	d054      	beq.n	4156c0 <_strtod_r+0x220>
  415616:	1acb      	subs	r3, r1, r3
  415618:	4648      	mov	r0, r9
  41561a:	9308      	str	r3, [sp, #32]
  41561c:	f002 f95a 	bl	4178d4 <__aeabi_ui2d>
  415620:	f1ba 0f10 	cmp.w	sl, #16
  415624:	bfb4      	ite	lt
  415626:	46d0      	movlt	r8, sl
  415628:	f04f 0810 	movge.w	r8, #16
  41562c:	2e00      	cmp	r6, #0
  41562e:	bf08      	it	eq
  415630:	4656      	moveq	r6, sl
  415632:	f1b8 0f09 	cmp.w	r8, #9
  415636:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41563a:	dd13      	ble.n	415664 <_strtod_r+0x1c4>
  41563c:	4ba0      	ldr	r3, [pc, #640]	; (4158c0 <_strtod_r+0x420>)
  41563e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  415642:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  415646:	f002 f9bb 	bl	4179c0 <__aeabi_dmul>
  41564a:	4604      	mov	r4, r0
  41564c:	4638      	mov	r0, r7
  41564e:	460d      	mov	r5, r1
  415650:	f002 f940 	bl	4178d4 <__aeabi_ui2d>
  415654:	4602      	mov	r2, r0
  415656:	460b      	mov	r3, r1
  415658:	4620      	mov	r0, r4
  41565a:	4629      	mov	r1, r5
  41565c:	f001 fffe 	bl	41765c <__adddf3>
  415660:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415664:	f1ba 0f0f 	cmp.w	sl, #15
  415668:	f300 812c 	bgt.w	4158c4 <_strtod_r+0x424>
  41566c:	9908      	ldr	r1, [sp, #32]
  41566e:	2900      	cmp	r1, #0
  415670:	f000 80ab 	beq.w	4157ca <_strtod_r+0x32a>
  415674:	f340 8580 	ble.w	416178 <_strtod_r+0xcd8>
  415678:	9a08      	ldr	r2, [sp, #32]
  41567a:	2a16      	cmp	r2, #22
  41567c:	f300 84ef 	bgt.w	41605e <_strtod_r+0xbbe>
  415680:	4b8f      	ldr	r3, [pc, #572]	; (4158c0 <_strtod_r+0x420>)
  415682:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  415686:	e9da 0100 	ldrd	r0, r1, [sl]
  41568a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41568e:	f002 f997 	bl	4179c0 <__aeabi_dmul>
  415692:	4680      	mov	r8, r0
  415694:	4689      	mov	r9, r1
  415696:	e759      	b.n	41554c <_strtod_r+0xac>
  415698:	4640      	mov	r0, r8
  41569a:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  41569e:	b01f      	add	sp, #124	; 0x7c
  4156a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4156a4:	4633      	mov	r3, r6
  4156a6:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  4156aa:	2a08      	cmp	r2, #8
  4156ac:	f240 833c 	bls.w	415d28 <_strtod_r+0x888>
  4156b0:	f024 0220 	bic.w	r2, r4, #32
  4156b4:	2a45      	cmp	r2, #69	; 0x45
  4156b6:	4618      	mov	r0, r3
  4156b8:	f43f af36 	beq.w	415528 <_strtod_r+0x88>
  4156bc:	2101      	movs	r1, #1
  4156be:	910b      	str	r1, [sp, #44]	; 0x2c
  4156c0:	2800      	cmp	r0, #0
  4156c2:	d171      	bne.n	4157a8 <_strtod_r+0x308>
  4156c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4156c6:	2b00      	cmp	r3, #0
  4156c8:	d16e      	bne.n	4157a8 <_strtod_r+0x308>
  4156ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4156cc:	2800      	cmp	r0, #0
  4156ce:	f47f af36 	bne.w	41553e <_strtod_r+0x9e>
  4156d2:	3c49      	subs	r4, #73	; 0x49
  4156d4:	2c25      	cmp	r4, #37	; 0x25
  4156d6:	f63f af32 	bhi.w	41553e <_strtod_r+0x9e>
  4156da:	a101      	add	r1, pc, #4	; (adr r1, 4156e0 <_strtod_r+0x240>)
  4156dc:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  4156e0:	00415da3 	.word	0x00415da3
  4156e4:	0041553f 	.word	0x0041553f
  4156e8:	0041553f 	.word	0x0041553f
  4156ec:	0041553f 	.word	0x0041553f
  4156f0:	0041553f 	.word	0x0041553f
  4156f4:	00415d6b 	.word	0x00415d6b
  4156f8:	0041553f 	.word	0x0041553f
  4156fc:	0041553f 	.word	0x0041553f
  415700:	0041553f 	.word	0x0041553f
  415704:	0041553f 	.word	0x0041553f
  415708:	0041553f 	.word	0x0041553f
  41570c:	0041553f 	.word	0x0041553f
  415710:	0041553f 	.word	0x0041553f
  415714:	0041553f 	.word	0x0041553f
  415718:	0041553f 	.word	0x0041553f
  41571c:	0041553f 	.word	0x0041553f
  415720:	0041553f 	.word	0x0041553f
  415724:	0041553f 	.word	0x0041553f
  415728:	0041553f 	.word	0x0041553f
  41572c:	0041553f 	.word	0x0041553f
  415730:	0041553f 	.word	0x0041553f
  415734:	0041553f 	.word	0x0041553f
  415738:	0041553f 	.word	0x0041553f
  41573c:	0041553f 	.word	0x0041553f
  415740:	0041553f 	.word	0x0041553f
  415744:	0041553f 	.word	0x0041553f
  415748:	0041553f 	.word	0x0041553f
  41574c:	0041553f 	.word	0x0041553f
  415750:	0041553f 	.word	0x0041553f
  415754:	0041553f 	.word	0x0041553f
  415758:	0041553f 	.word	0x0041553f
  41575c:	0041553f 	.word	0x0041553f
  415760:	00415da3 	.word	0x00415da3
  415764:	0041553f 	.word	0x0041553f
  415768:	0041553f 	.word	0x0041553f
  41576c:	0041553f 	.word	0x0041553f
  415770:	0041553f 	.word	0x0041553f
  415774:	00415d6b 	.word	0x00415d6b
  415778:	2000      	movs	r0, #0
  41577a:	2c30      	cmp	r4, #48	; 0x30
  41577c:	9007      	str	r0, [sp, #28]
  41577e:	f47f aefd 	bne.w	41557c <_strtod_r+0xdc>
  415782:	7873      	ldrb	r3, [r6, #1]
  415784:	2b58      	cmp	r3, #88	; 0x58
  415786:	f000 8336 	beq.w	415df6 <_strtod_r+0x956>
  41578a:	2b78      	cmp	r3, #120	; 0x78
  41578c:	f000 8333 	beq.w	415df6 <_strtod_r+0x956>
  415790:	3601      	adds	r6, #1
  415792:	9619      	str	r6, [sp, #100]	; 0x64
  415794:	4633      	mov	r3, r6
  415796:	f816 4b01 	ldrb.w	r4, [r6], #1
  41579a:	2c30      	cmp	r4, #48	; 0x30
  41579c:	d0f9      	beq.n	415792 <_strtod_r+0x2f2>
  41579e:	b11c      	cbz	r4, 4157a8 <_strtod_r+0x308>
  4157a0:	9306      	str	r3, [sp, #24]
  4157a2:	2301      	movs	r3, #1
  4157a4:	930a      	str	r3, [sp, #40]	; 0x28
  4157a6:	e6ec      	b.n	415582 <_strtod_r+0xe2>
  4157a8:	f04f 0800 	mov.w	r8, #0
  4157ac:	f04f 0900 	mov.w	r9, #0
  4157b0:	e6cc      	b.n	41554c <_strtod_r+0xac>
  4157b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4157b6:	f04f 30ff 	mov.w	r0, #4294967295
  4157ba:	9303      	str	r3, [sp, #12]
  4157bc:	9002      	str	r0, [sp, #8]
  4157be:	0722      	lsls	r2, r4, #28
  4157c0:	bf42      	ittt	mi
  4157c2:	9903      	ldrmi	r1, [sp, #12]
  4157c4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  4157c8:	9103      	strmi	r1, [sp, #12]
  4157ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4157ce:	e6bd      	b.n	41554c <_strtod_r+0xac>
  4157d0:	f1ba 0f00 	cmp.w	sl, #0
  4157d4:	f43f aeac 	beq.w	415530 <_strtod_r+0x90>
  4157d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4157da:	1c6a      	adds	r2, r5, #1
  4157dc:	9219      	str	r2, [sp, #100]	; 0x64
  4157de:	786c      	ldrb	r4, [r5, #1]
  4157e0:	2c2b      	cmp	r4, #43	; 0x2b
  4157e2:	f000 824b 	beq.w	415c7c <_strtod_r+0x7dc>
  4157e6:	2c2d      	cmp	r4, #45	; 0x2d
  4157e8:	f040 8245 	bne.w	415c76 <_strtod_r+0x7d6>
  4157ec:	2101      	movs	r1, #1
  4157ee:	9108      	str	r1, [sp, #32]
  4157f0:	1caa      	adds	r2, r5, #2
  4157f2:	9219      	str	r2, [sp, #100]	; 0x64
  4157f4:	78ac      	ldrb	r4, [r5, #2]
  4157f6:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4157fa:	2a09      	cmp	r2, #9
  4157fc:	f200 81e5 	bhi.w	415bca <_strtod_r+0x72a>
  415800:	2c30      	cmp	r4, #48	; 0x30
  415802:	d106      	bne.n	415812 <_strtod_r+0x372>
  415804:	9a19      	ldr	r2, [sp, #100]	; 0x64
  415806:	3201      	adds	r2, #1
  415808:	9219      	str	r2, [sp, #100]	; 0x64
  41580a:	f812 4b01 	ldrb.w	r4, [r2], #1
  41580e:	2c30      	cmp	r4, #48	; 0x30
  415810:	d0fa      	beq.n	415808 <_strtod_r+0x368>
  415812:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  415816:	2a08      	cmp	r2, #8
  415818:	f63f aef9 	bhi.w	41560e <_strtod_r+0x16e>
  41581c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  41581e:	920e      	str	r2, [sp, #56]	; 0x38
  415820:	f102 0801 	add.w	r8, r2, #1
  415824:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  415828:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  41582c:	7854      	ldrb	r4, [r2, #1]
  41582e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  415832:	2a09      	cmp	r2, #9
  415834:	d812      	bhi.n	41585c <_strtod_r+0x3bc>
  415836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  415838:	f102 0c02 	add.w	ip, r2, #2
  41583c:	4662      	mov	r2, ip
  41583e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  415842:	9219      	str	r2, [sp, #100]	; 0x64
  415844:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  415848:	4690      	mov	r8, r2
  41584a:	f812 4b01 	ldrb.w	r4, [r2], #1
  41584e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  415852:	f1bc 0f09 	cmp.w	ip, #9
  415856:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  41585a:	d9f0      	bls.n	41583e <_strtod_r+0x39e>
  41585c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41585e:	ebc2 0808 	rsb	r8, r2, r8
  415862:	f1b8 0f08 	cmp.w	r8, #8
  415866:	f300 83f2 	bgt.w	41604e <_strtod_r+0xbae>
  41586a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  41586e:	4291      	cmp	r1, r2
  415870:	bfa8      	it	ge
  415872:	4611      	movge	r1, r2
  415874:	9a08      	ldr	r2, [sp, #32]
  415876:	2a00      	cmp	r2, #0
  415878:	f43f aeca 	beq.w	415610 <_strtod_r+0x170>
  41587c:	4249      	negs	r1, r1
  41587e:	f1ba 0f00 	cmp.w	sl, #0
  415882:	f47f aec8 	bne.w	415616 <_strtod_r+0x176>
  415886:	e71b      	b.n	4156c0 <_strtod_r+0x220>
  415888:	4658      	mov	r0, fp
  41588a:	9c19      	ldr	r4, [sp, #100]	; 0x64
  41588c:	f7fe fdc8 	bl	414420 <_localeconv_r>
  415890:	6800      	ldr	r0, [r0, #0]
  415892:	f7f9 ffc1 	bl	40f818 <strlen>
  415896:	1823      	adds	r3, r4, r0
  415898:	9319      	str	r3, [sp, #100]	; 0x64
  41589a:	5c24      	ldrb	r4, [r4, r0]
  41589c:	2e00      	cmp	r6, #0
  41589e:	f040 81c3 	bne.w	415c28 <_strtod_r+0x788>
  4158a2:	2c30      	cmp	r4, #48	; 0x30
  4158a4:	f47f aefe 	bne.w	4156a4 <_strtod_r+0x204>
  4158a8:	461a      	mov	r2, r3
  4158aa:	4633      	mov	r3, r6
  4158ac:	e000      	b.n	4158b0 <_strtod_r+0x410>
  4158ae:	460a      	mov	r2, r1
  4158b0:	1c51      	adds	r1, r2, #1
  4158b2:	9119      	str	r1, [sp, #100]	; 0x64
  4158b4:	7854      	ldrb	r4, [r2, #1]
  4158b6:	2c30      	cmp	r4, #48	; 0x30
  4158b8:	f103 0301 	add.w	r3, r3, #1
  4158bc:	d0f7      	beq.n	4158ae <_strtod_r+0x40e>
  4158be:	e6f2      	b.n	4156a6 <_strtod_r+0x206>
  4158c0:	004193c8 	.word	0x004193c8
  4158c4:	9908      	ldr	r1, [sp, #32]
  4158c6:	ebc8 080a 	rsb	r8, r8, sl
  4158ca:	4488      	add	r8, r1
  4158cc:	f1b8 0f00 	cmp.w	r8, #0
  4158d0:	f340 8369 	ble.w	415fa6 <_strtod_r+0xb06>
  4158d4:	f018 030f 	ands.w	r3, r8, #15
  4158d8:	d00a      	beq.n	4158f0 <_strtod_r+0x450>
  4158da:	49a7      	ldr	r1, [pc, #668]	; (415b78 <_strtod_r+0x6d8>)
  4158dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4158e0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4158e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4158e8:	f002 f86a 	bl	4179c0 <__aeabi_dmul>
  4158ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4158f0:	f038 040f 	bics.w	r4, r8, #15
  4158f4:	f040 81c8 	bne.w	415c88 <_strtod_r+0x7e8>
  4158f8:	2200      	movs	r2, #0
  4158fa:	920a      	str	r2, [sp, #40]	; 0x28
  4158fc:	f8cd 9000 	str.w	r9, [sp]
  415900:	9906      	ldr	r1, [sp, #24]
  415902:	4632      	mov	r2, r6
  415904:	4653      	mov	r3, sl
  415906:	4658      	mov	r0, fp
  415908:	f7fe ff7a 	bl	414800 <__s2b>
  41590c:	900b      	str	r0, [sp, #44]	; 0x2c
  41590e:	2800      	cmp	r0, #0
  415910:	f000 82d5 	beq.w	415ebe <_strtod_r+0xa1e>
  415914:	9908      	ldr	r1, [sp, #32]
  415916:	2200      	movs	r2, #0
  415918:	2900      	cmp	r1, #0
  41591a:	f1c1 0300 	rsb	r3, r1, #0
  41591e:	bfa8      	it	ge
  415920:	4613      	movge	r3, r2
  415922:	930e      	str	r3, [sp, #56]	; 0x38
  415924:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  415928:	9206      	str	r2, [sp, #24]
  41592a:	930f      	str	r3, [sp, #60]	; 0x3c
  41592c:	4617      	mov	r7, r2
  41592e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  415930:	4658      	mov	r0, fp
  415932:	6851      	ldr	r1, [r2, #4]
  415934:	f7fe fee8 	bl	414708 <_Balloc>
  415938:	4606      	mov	r6, r0
  41593a:	2800      	cmp	r0, #0
  41593c:	f000 82cd 	beq.w	415eda <_strtod_r+0xa3a>
  415940:	980b      	ldr	r0, [sp, #44]	; 0x2c
  415942:	6903      	ldr	r3, [r0, #16]
  415944:	1c9a      	adds	r2, r3, #2
  415946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415948:	0092      	lsls	r2, r2, #2
  41594a:	f103 010c 	add.w	r1, r3, #12
  41594e:	f106 000c 	add.w	r0, r6, #12
  415952:	f7f9 fb83 	bl	40f05c <memcpy>
  415956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41595a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  41595e:	a81b      	add	r0, sp, #108	; 0x6c
  415960:	a91c      	add	r1, sp, #112	; 0x70
  415962:	e88d 0003 	stmia.w	sp, {r0, r1}
  415966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  41596a:	4658      	mov	r0, fp
  41596c:	f7ff fa3e 	bl	414dec <__d2b>
  415970:	901a      	str	r0, [sp, #104]	; 0x68
  415972:	2800      	cmp	r0, #0
  415974:	f000 8412 	beq.w	41619c <_strtod_r+0xcfc>
  415978:	4658      	mov	r0, fp
  41597a:	2101      	movs	r1, #1
  41597c:	f7fe ffda 	bl	414934 <__i2b>
  415980:	4607      	mov	r7, r0
  415982:	2800      	cmp	r0, #0
  415984:	f000 82a9 	beq.w	415eda <_strtod_r+0xa3a>
  415988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  41598a:	2b00      	cmp	r3, #0
  41598c:	f2c0 8110 	blt.w	415bb0 <_strtod_r+0x710>
  415990:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  415994:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  415996:	4499      	add	r9, r3
  415998:	980a      	ldr	r0, [sp, #40]	; 0x28
  41599a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  41599c:	1a1b      	subs	r3, r3, r0
  41599e:	4413      	add	r3, r2
  4159a0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  4159a4:	428b      	cmp	r3, r1
  4159a6:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  4159aa:	f280 80da 	bge.w	415b62 <_strtod_r+0x6c2>
  4159ae:	1aca      	subs	r2, r1, r3
  4159b0:	2a1f      	cmp	r2, #31
  4159b2:	ebc2 0a0a 	rsb	sl, r2, sl
  4159b6:	f300 8100 	bgt.w	415bba <_strtod_r+0x71a>
  4159ba:	f04f 0801 	mov.w	r8, #1
  4159be:	2300      	movs	r3, #0
  4159c0:	fa08 f802 	lsl.w	r8, r8, r2
  4159c4:	930c      	str	r3, [sp, #48]	; 0x30
  4159c6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4159c8:	4455      	add	r5, sl
  4159ca:	44ca      	add	sl, r9
  4159cc:	45ca      	cmp	sl, r9
  4159ce:	bfb4      	ite	lt
  4159d0:	4653      	movlt	r3, sl
  4159d2:	464b      	movge	r3, r9
  4159d4:	4405      	add	r5, r0
  4159d6:	42ab      	cmp	r3, r5
  4159d8:	bfa8      	it	ge
  4159da:	462b      	movge	r3, r5
  4159dc:	2b00      	cmp	r3, #0
  4159de:	dd04      	ble.n	4159ea <_strtod_r+0x54a>
  4159e0:	ebc3 0a0a 	rsb	sl, r3, sl
  4159e4:	1aed      	subs	r5, r5, r3
  4159e6:	ebc3 0909 	rsb	r9, r3, r9
  4159ea:	990e      	ldr	r1, [sp, #56]	; 0x38
  4159ec:	b1b1      	cbz	r1, 415a1c <_strtod_r+0x57c>
  4159ee:	4639      	mov	r1, r7
  4159f0:	4658      	mov	r0, fp
  4159f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4159f4:	f7ff f846 	bl	414a84 <__pow5mult>
  4159f8:	4607      	mov	r7, r0
  4159fa:	2800      	cmp	r0, #0
  4159fc:	f000 826d 	beq.w	415eda <_strtod_r+0xa3a>
  415a00:	4658      	mov	r0, fp
  415a02:	4639      	mov	r1, r7
  415a04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  415a06:	f7fe ff9f 	bl	414948 <__multiply>
  415a0a:	4604      	mov	r4, r0
  415a0c:	2800      	cmp	r0, #0
  415a0e:	f000 8264 	beq.w	415eda <_strtod_r+0xa3a>
  415a12:	4658      	mov	r0, fp
  415a14:	991a      	ldr	r1, [sp, #104]	; 0x68
  415a16:	f7fe fe9d 	bl	414754 <_Bfree>
  415a1a:	941a      	str	r4, [sp, #104]	; 0x68
  415a1c:	f1ba 0f00 	cmp.w	sl, #0
  415a20:	dd08      	ble.n	415a34 <_strtod_r+0x594>
  415a22:	4652      	mov	r2, sl
  415a24:	4658      	mov	r0, fp
  415a26:	991a      	ldr	r1, [sp, #104]	; 0x68
  415a28:	f7ff f87a 	bl	414b20 <__lshift>
  415a2c:	901a      	str	r0, [sp, #104]	; 0x68
  415a2e:	2800      	cmp	r0, #0
  415a30:	f000 83b4 	beq.w	41619c <_strtod_r+0xcfc>
  415a34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  415a36:	b142      	cbz	r2, 415a4a <_strtod_r+0x5aa>
  415a38:	4631      	mov	r1, r6
  415a3a:	4658      	mov	r0, fp
  415a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  415a3e:	f7ff f821 	bl	414a84 <__pow5mult>
  415a42:	4606      	mov	r6, r0
  415a44:	2800      	cmp	r0, #0
  415a46:	f000 8248 	beq.w	415eda <_strtod_r+0xa3a>
  415a4a:	2d00      	cmp	r5, #0
  415a4c:	dd08      	ble.n	415a60 <_strtod_r+0x5c0>
  415a4e:	4631      	mov	r1, r6
  415a50:	462a      	mov	r2, r5
  415a52:	4658      	mov	r0, fp
  415a54:	f7ff f864 	bl	414b20 <__lshift>
  415a58:	4606      	mov	r6, r0
  415a5a:	2800      	cmp	r0, #0
  415a5c:	f000 823d 	beq.w	415eda <_strtod_r+0xa3a>
  415a60:	f1b9 0f00 	cmp.w	r9, #0
  415a64:	dd08      	ble.n	415a78 <_strtod_r+0x5d8>
  415a66:	4639      	mov	r1, r7
  415a68:	464a      	mov	r2, r9
  415a6a:	4658      	mov	r0, fp
  415a6c:	f7ff f858 	bl	414b20 <__lshift>
  415a70:	4607      	mov	r7, r0
  415a72:	2800      	cmp	r0, #0
  415a74:	f000 8231 	beq.w	415eda <_strtod_r+0xa3a>
  415a78:	4658      	mov	r0, fp
  415a7a:	991a      	ldr	r1, [sp, #104]	; 0x68
  415a7c:	4632      	mov	r2, r6
  415a7e:	f7ff f8d1 	bl	414c24 <__mdiff>
  415a82:	9006      	str	r0, [sp, #24]
  415a84:	2800      	cmp	r0, #0
  415a86:	f000 8228 	beq.w	415eda <_strtod_r+0xa3a>
  415a8a:	9906      	ldr	r1, [sp, #24]
  415a8c:	2300      	movs	r3, #0
  415a8e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  415a92:	60cb      	str	r3, [r1, #12]
  415a94:	4639      	mov	r1, r7
  415a96:	f7ff f8a1 	bl	414bdc <__mcmp>
  415a9a:	2800      	cmp	r0, #0
  415a9c:	f2c0 83cb 	blt.w	416236 <_strtod_r+0xd96>
  415aa0:	f000 8388 	beq.w	4161b4 <_strtod_r+0xd14>
  415aa4:	9806      	ldr	r0, [sp, #24]
  415aa6:	4639      	mov	r1, r7
  415aa8:	f7ff f9fe 	bl	414ea8 <__ratio>
  415aac:	2200      	movs	r2, #0
  415aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  415ab2:	4604      	mov	r4, r0
  415ab4:	460d      	mov	r5, r1
  415ab6:	f002 f9ff 	bl	417eb8 <__aeabi_dcmple>
  415aba:	2800      	cmp	r0, #0
  415abc:	d064      	beq.n	415b88 <_strtod_r+0x6e8>
  415abe:	f1ba 0f00 	cmp.w	sl, #0
  415ac2:	f000 808e 	beq.w	415be2 <_strtod_r+0x742>
  415ac6:	4d2d      	ldr	r5, [pc, #180]	; (415b7c <_strtod_r+0x6dc>)
  415ac8:	f8dd 900c 	ldr.w	r9, [sp, #12]
  415acc:	2400      	movs	r4, #0
  415ace:	4622      	mov	r2, r4
  415ad0:	462b      	mov	r3, r5
  415ad2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  415ad6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 415b84 <_strtod_r+0x6e4>
  415ada:	4b29      	ldr	r3, [pc, #164]	; (415b80 <_strtod_r+0x6e0>)
  415adc:	ea09 0808 	and.w	r8, r9, r8
  415ae0:	4598      	cmp	r8, r3
  415ae2:	f000 81bf 	beq.w	415e64 <_strtod_r+0x9c4>
  415ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  415ae8:	b182      	cbz	r2, 415b0c <_strtod_r+0x66c>
  415aea:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  415aee:	d80d      	bhi.n	415b0c <_strtod_r+0x66c>
  415af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  415af4:	a31e      	add	r3, pc, #120	; (adr r3, 415b70 <_strtod_r+0x6d0>)
  415af6:	e9d3 2300 	ldrd	r2, r3, [r3]
  415afa:	f002 f9dd 	bl	417eb8 <__aeabi_dcmple>
  415afe:	2800      	cmp	r0, #0
  415b00:	f040 811b 	bne.w	415d3a <_strtod_r+0x89a>
  415b04:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  415b08:	ebc8 0503 	rsb	r5, r8, r3
  415b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  415b10:	f7ff f8f2 	bl	414cf8 <__ulp>
  415b14:	4602      	mov	r2, r0
  415b16:	460b      	mov	r3, r1
  415b18:	4620      	mov	r0, r4
  415b1a:	4629      	mov	r1, r5
  415b1c:	f001 ff50 	bl	4179c0 <__aeabi_dmul>
  415b20:	4602      	mov	r2, r0
  415b22:	460b      	mov	r3, r1
  415b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  415b28:	f001 fd98 	bl	41765c <__adddf3>
  415b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415b30:	9c03      	ldr	r4, [sp, #12]
  415b32:	990a      	ldr	r1, [sp, #40]	; 0x28
  415b34:	b921      	cbnz	r1, 415b40 <_strtod_r+0x6a0>
  415b36:	4b13      	ldr	r3, [pc, #76]	; (415b84 <_strtod_r+0x6e4>)
  415b38:	4023      	ands	r3, r4
  415b3a:	4598      	cmp	r8, r3
  415b3c:	f000 81ed 	beq.w	415f1a <_strtod_r+0xa7a>
  415b40:	4658      	mov	r0, fp
  415b42:	991a      	ldr	r1, [sp, #104]	; 0x68
  415b44:	f7fe fe06 	bl	414754 <_Bfree>
  415b48:	4658      	mov	r0, fp
  415b4a:	4631      	mov	r1, r6
  415b4c:	f7fe fe02 	bl	414754 <_Bfree>
  415b50:	4658      	mov	r0, fp
  415b52:	4639      	mov	r1, r7
  415b54:	f7fe fdfe 	bl	414754 <_Bfree>
  415b58:	4658      	mov	r0, fp
  415b5a:	9906      	ldr	r1, [sp, #24]
  415b5c:	f7fe fdfa 	bl	414754 <_Bfree>
  415b60:	e6e5      	b.n	41592e <_strtod_r+0x48e>
  415b62:	2300      	movs	r3, #0
  415b64:	930c      	str	r3, [sp, #48]	; 0x30
  415b66:	f04f 0801 	mov.w	r8, #1
  415b6a:	e72c      	b.n	4159c6 <_strtod_r+0x526>
  415b6c:	f3af 8000 	nop.w
  415b70:	ffc00000 	.word	0xffc00000
  415b74:	41dfffff 	.word	0x41dfffff
  415b78:	004193c8 	.word	0x004193c8
  415b7c:	3ff00000 	.word	0x3ff00000
  415b80:	7fe00000 	.word	0x7fe00000
  415b84:	7ff00000 	.word	0x7ff00000
  415b88:	4620      	mov	r0, r4
  415b8a:	4629      	mov	r1, r5
  415b8c:	2200      	movs	r2, #0
  415b8e:	4ba8      	ldr	r3, [pc, #672]	; (415e30 <_strtod_r+0x990>)
  415b90:	f001 ff16 	bl	4179c0 <__aeabi_dmul>
  415b94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  415b98:	f1ba 0f00 	cmp.w	sl, #0
  415b9c:	d11c      	bne.n	415bd8 <_strtod_r+0x738>
  415b9e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  415ba2:	9010      	str	r0, [sp, #64]	; 0x40
  415ba4:	9111      	str	r1, [sp, #68]	; 0x44
  415ba6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  415baa:	f8dd 900c 	ldr.w	r9, [sp, #12]
  415bae:	e792      	b.n	415ad6 <_strtod_r+0x636>
  415bb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  415bb2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  415bb6:	1acd      	subs	r5, r1, r3
  415bb8:	e6ee      	b.n	415998 <_strtod_r+0x4f8>
  415bba:	4c9e      	ldr	r4, [pc, #632]	; (415e34 <_strtod_r+0x994>)
  415bbc:	f04f 0801 	mov.w	r8, #1
  415bc0:	1ae4      	subs	r4, r4, r3
  415bc2:	fa08 f404 	lsl.w	r4, r8, r4
  415bc6:	940c      	str	r4, [sp, #48]	; 0x30
  415bc8:	e6fd      	b.n	4159c6 <_strtod_r+0x526>
  415bca:	9519      	str	r5, [sp, #100]	; 0x64
  415bcc:	2100      	movs	r1, #0
  415bce:	f1ba 0f00 	cmp.w	sl, #0
  415bd2:	f47f ad20 	bne.w	415616 <_strtod_r+0x176>
  415bd6:	e573      	b.n	4156c0 <_strtod_r+0x220>
  415bd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  415bdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  415be0:	e7e1      	b.n	415ba6 <_strtod_r+0x706>
  415be2:	9b02      	ldr	r3, [sp, #8]
  415be4:	2b00      	cmp	r3, #0
  415be6:	f040 8092 	bne.w	415d0e <_strtod_r+0x86e>
  415bea:	9803      	ldr	r0, [sp, #12]
  415bec:	f3c0 0313 	ubfx	r3, r0, #0, #20
  415bf0:	4681      	mov	r9, r0
  415bf2:	2b00      	cmp	r3, #0
  415bf4:	f040 8091 	bne.w	415d1a <_strtod_r+0x87a>
  415bf8:	4620      	mov	r0, r4
  415bfa:	4629      	mov	r1, r5
  415bfc:	2200      	movs	r2, #0
  415bfe:	4b8e      	ldr	r3, [pc, #568]	; (415e38 <_strtod_r+0x998>)
  415c00:	f002 f950 	bl	417ea4 <__aeabi_dcmplt>
  415c04:	2800      	cmp	r0, #0
  415c06:	f040 8356 	bne.w	4162b6 <_strtod_r+0xe16>
  415c0a:	4620      	mov	r0, r4
  415c0c:	4629      	mov	r1, r5
  415c0e:	2200      	movs	r2, #0
  415c10:	4b87      	ldr	r3, [pc, #540]	; (415e30 <_strtod_r+0x990>)
  415c12:	f001 fed5 	bl	4179c0 <__aeabi_dmul>
  415c16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  415c1a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  415c1e:	9016      	str	r0, [sp, #88]	; 0x58
  415c20:	9117      	str	r1, [sp, #92]	; 0x5c
  415c22:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  415c26:	e756      	b.n	415ad6 <_strtod_r+0x636>
  415c28:	4640      	mov	r0, r8
  415c2a:	4643      	mov	r3, r8
  415c2c:	46b2      	mov	sl, r6
  415c2e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  415c32:	2a09      	cmp	r2, #9
  415c34:	d825      	bhi.n	415c82 <_strtod_r+0x7e2>
  415c36:	9c19      	ldr	r4, [sp, #100]	; 0x64
  415c38:	3001      	adds	r0, #1
  415c3a:	2a00      	cmp	r2, #0
  415c3c:	f000 81af 	beq.w	415f9e <_strtod_r+0xafe>
  415c40:	2801      	cmp	r0, #1
  415c42:	4403      	add	r3, r0
  415c44:	f000 81a0 	beq.w	415f88 <_strtod_r+0xae8>
  415c48:	4450      	add	r0, sl
  415c4a:	3801      	subs	r0, #1
  415c4c:	e006      	b.n	415c5c <_strtod_r+0x7bc>
  415c4e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  415c52:	ea4f 0949 	mov.w	r9, r9, lsl #1
  415c56:	4582      	cmp	sl, r0
  415c58:	f000 8197 	beq.w	415f8a <_strtod_r+0xaea>
  415c5c:	f10a 0a01 	add.w	sl, sl, #1
  415c60:	f10a 31ff 	add.w	r1, sl, #4294967295
  415c64:	2908      	cmp	r1, #8
  415c66:	ddf2      	ble.n	415c4e <_strtod_r+0x7ae>
  415c68:	f1ba 0f10 	cmp.w	sl, #16
  415c6c:	bfdc      	itt	le
  415c6e:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  415c72:	007f      	lslle	r7, r7, #1
  415c74:	e7ef      	b.n	415c56 <_strtod_r+0x7b6>
  415c76:	2200      	movs	r2, #0
  415c78:	9208      	str	r2, [sp, #32]
  415c7a:	e5bc      	b.n	4157f6 <_strtod_r+0x356>
  415c7c:	2100      	movs	r1, #0
  415c7e:	9108      	str	r1, [sp, #32]
  415c80:	e5b6      	b.n	4157f0 <_strtod_r+0x350>
  415c82:	2201      	movs	r2, #1
  415c84:	920b      	str	r2, [sp, #44]	; 0x2c
  415c86:	e4bd      	b.n	415604 <_strtod_r+0x164>
  415c88:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  415c8c:	f300 8117 	bgt.w	415ebe <_strtod_r+0xa1e>
  415c90:	1124      	asrs	r4, r4, #4
  415c92:	2c01      	cmp	r4, #1
  415c94:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 415e60 <_strtod_r+0x9c0>
  415c98:	f340 832a 	ble.w	4162f0 <_strtod_r+0xe50>
  415c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  415ca0:	4645      	mov	r5, r8
  415ca2:	2700      	movs	r7, #0
  415ca4:	f014 0f01 	tst.w	r4, #1
  415ca8:	f107 0701 	add.w	r7, r7, #1
  415cac:	ea4f 0464 	mov.w	r4, r4, asr #1
  415cb0:	d003      	beq.n	415cba <_strtod_r+0x81a>
  415cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
  415cb6:	f001 fe83 	bl	4179c0 <__aeabi_dmul>
  415cba:	2c01      	cmp	r4, #1
  415cbc:	f105 0508 	add.w	r5, r5, #8
  415cc0:	dcf0      	bgt.n	415ca4 <_strtod_r+0x804>
  415cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415cc6:	9b03      	ldr	r3, [sp, #12]
  415cc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  415ccc:	9303      	str	r3, [sp, #12]
  415cce:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  415cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  415cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
  415cda:	f001 fe71 	bl	4179c0 <__aeabi_dmul>
  415cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415ce2:	9803      	ldr	r0, [sp, #12]
  415ce4:	4a55      	ldr	r2, [pc, #340]	; (415e3c <_strtod_r+0x99c>)
  415ce6:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  415cea:	0d1b      	lsrs	r3, r3, #20
  415cec:	051b      	lsls	r3, r3, #20
  415cee:	4293      	cmp	r3, r2
  415cf0:	f200 80e5 	bhi.w	415ebe <_strtod_r+0xa1e>
  415cf4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  415cf8:	4293      	cmp	r3, r2
  415cfa:	f240 82d5 	bls.w	4162a8 <_strtod_r+0xe08>
  415cfe:	4950      	ldr	r1, [pc, #320]	; (415e40 <_strtod_r+0x9a0>)
  415d00:	9103      	str	r1, [sp, #12]
  415d02:	2200      	movs	r2, #0
  415d04:	f04f 33ff 	mov.w	r3, #4294967295
  415d08:	920a      	str	r2, [sp, #40]	; 0x28
  415d0a:	9302      	str	r3, [sp, #8]
  415d0c:	e5f6      	b.n	4158fc <_strtod_r+0x45c>
  415d0e:	9902      	ldr	r1, [sp, #8]
  415d10:	f8dd 900c 	ldr.w	r9, [sp, #12]
  415d14:	2901      	cmp	r1, #1
  415d16:	f000 81c9 	beq.w	4160ac <_strtod_r+0xc0c>
  415d1a:	4947      	ldr	r1, [pc, #284]	; (415e38 <_strtod_r+0x998>)
  415d1c:	4d49      	ldr	r5, [pc, #292]	; (415e44 <_strtod_r+0x9a4>)
  415d1e:	2000      	movs	r0, #0
  415d20:	2400      	movs	r4, #0
  415d22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  415d26:	e6d6      	b.n	415ad6 <_strtod_r+0x636>
  415d28:	9919      	ldr	r1, [sp, #100]	; 0x64
  415d2a:	9106      	str	r1, [sp, #24]
  415d2c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  415d30:	f04f 0a00 	mov.w	sl, #0
  415d34:	460c      	mov	r4, r1
  415d36:	2001      	movs	r0, #1
  415d38:	e77f      	b.n	415c3a <_strtod_r+0x79a>
  415d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  415d3e:	f002 f901 	bl	417f44 <__aeabi_d2uiz>
  415d42:	2800      	cmp	r0, #0
  415d44:	f000 81ad 	beq.w	4160a2 <_strtod_r+0xc02>
  415d48:	f001 fdc4 	bl	4178d4 <__aeabi_ui2d>
  415d4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  415d50:	f1ba 0f00 	cmp.w	sl, #0
  415d54:	f040 81a0 	bne.w	416098 <_strtod_r+0xbf8>
  415d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  415d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
  415d5c:	9114      	str	r1, [sp, #80]	; 0x50
  415d5e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  415d62:	9215      	str	r2, [sp, #84]	; 0x54
  415d64:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  415d68:	e6cc      	b.n	415b04 <_strtod_r+0x664>
  415d6a:	4837      	ldr	r0, [pc, #220]	; (415e48 <_strtod_r+0x9a8>)
  415d6c:	9919      	ldr	r1, [sp, #100]	; 0x64
  415d6e:	e009      	b.n	415d84 <_strtod_r+0x8e4>
  415d70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  415d74:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  415d78:	2c19      	cmp	r4, #25
  415d7a:	bf98      	it	ls
  415d7c:	3320      	addls	r3, #32
  415d7e:	4293      	cmp	r3, r2
  415d80:	f47f abdd 	bne.w	41553e <_strtod_r+0x9e>
  415d84:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  415d88:	2a00      	cmp	r2, #0
  415d8a:	d1f1      	bne.n	415d70 <_strtod_r+0x8d0>
  415d8c:	1c4b      	adds	r3, r1, #1
  415d8e:	9319      	str	r3, [sp, #100]	; 0x64
  415d90:	784b      	ldrb	r3, [r1, #1]
  415d92:	2b28      	cmp	r3, #40	; 0x28
  415d94:	f000 82e2 	beq.w	41635c <_strtod_r+0xebc>
  415d98:	4a2c      	ldr	r2, [pc, #176]	; (415e4c <_strtod_r+0x9ac>)
  415d9a:	9203      	str	r2, [sp, #12]
  415d9c:	2300      	movs	r3, #0
  415d9e:	9302      	str	r3, [sp, #8]
  415da0:	e513      	b.n	4157ca <_strtod_r+0x32a>
  415da2:	482b      	ldr	r0, [pc, #172]	; (415e50 <_strtod_r+0x9b0>)
  415da4:	9919      	ldr	r1, [sp, #100]	; 0x64
  415da6:	e009      	b.n	415dbc <_strtod_r+0x91c>
  415da8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  415dac:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  415db0:	2c19      	cmp	r4, #25
  415db2:	bf98      	it	ls
  415db4:	3320      	addls	r3, #32
  415db6:	4293      	cmp	r3, r2
  415db8:	f47f abc1 	bne.w	41553e <_strtod_r+0x9e>
  415dbc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  415dc0:	2a00      	cmp	r2, #0
  415dc2:	d1f1      	bne.n	415da8 <_strtod_r+0x908>
  415dc4:	9119      	str	r1, [sp, #100]	; 0x64
  415dc6:	4c23      	ldr	r4, [pc, #140]	; (415e54 <_strtod_r+0x9b4>)
  415dc8:	4608      	mov	r0, r1
  415dca:	e009      	b.n	415de0 <_strtod_r+0x940>
  415dcc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  415dd0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  415dd4:	2d19      	cmp	r5, #25
  415dd6:	bf98      	it	ls
  415dd8:	3320      	addls	r3, #32
  415dda:	4293      	cmp	r3, r2
  415ddc:	f040 8285 	bne.w	4162ea <_strtod_r+0xe4a>
  415de0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  415de4:	2a00      	cmp	r2, #0
  415de6:	d1f1      	bne.n	415dcc <_strtod_r+0x92c>
  415de8:	3001      	adds	r0, #1
  415dea:	9019      	str	r0, [sp, #100]	; 0x64
  415dec:	4a1a      	ldr	r2, [pc, #104]	; (415e58 <_strtod_r+0x9b8>)
  415dee:	9203      	str	r2, [sp, #12]
  415df0:	2300      	movs	r3, #0
  415df2:	9302      	str	r3, [sp, #8]
  415df4:	e4e9      	b.n	4157ca <_strtod_r+0x32a>
  415df6:	9907      	ldr	r1, [sp, #28]
  415df8:	9101      	str	r1, [sp, #4]
  415dfa:	ab1a      	add	r3, sp, #104	; 0x68
  415dfc:	9300      	str	r3, [sp, #0]
  415dfe:	4658      	mov	r0, fp
  415e00:	a919      	add	r1, sp, #100	; 0x64
  415e02:	4a16      	ldr	r2, [pc, #88]	; (415e5c <_strtod_r+0x9bc>)
  415e04:	ab1b      	add	r3, sp, #108	; 0x6c
  415e06:	f001 f8af 	bl	416f68 <__gethex>
  415e0a:	f010 0507 	ands.w	r5, r0, #7
  415e0e:	4604      	mov	r4, r0
  415e10:	f43f acca 	beq.w	4157a8 <_strtod_r+0x308>
  415e14:	2d06      	cmp	r5, #6
  415e16:	f040 8157 	bne.w	4160c8 <_strtod_r+0xc28>
  415e1a:	3601      	adds	r6, #1
  415e1c:	2200      	movs	r2, #0
  415e1e:	9619      	str	r6, [sp, #100]	; 0x64
  415e20:	f04f 0800 	mov.w	r8, #0
  415e24:	f04f 0900 	mov.w	r9, #0
  415e28:	9207      	str	r2, [sp, #28]
  415e2a:	f7ff bb8f 	b.w	41554c <_strtod_r+0xac>
  415e2e:	bf00      	nop
  415e30:	3fe00000 	.word	0x3fe00000
  415e34:	fffffbe3 	.word	0xfffffbe3
  415e38:	3ff00000 	.word	0x3ff00000
  415e3c:	7ca00000 	.word	0x7ca00000
  415e40:	7fefffff 	.word	0x7fefffff
  415e44:	bff00000 	.word	0xbff00000
  415e48:	004194e3 	.word	0x004194e3
  415e4c:	fff80000 	.word	0xfff80000
  415e50:	004194d7 	.word	0x004194d7
  415e54:	004194db 	.word	0x004194db
  415e58:	7ff00000 	.word	0x7ff00000
  415e5c:	004194c4 	.word	0x004194c4
  415e60:	00419490 	.word	0x00419490
  415e64:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  415e68:	f8cd 900c 	str.w	r9, [sp, #12]
  415e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  415e70:	f7fe ff42 	bl	414cf8 <__ulp>
  415e74:	4602      	mov	r2, r0
  415e76:	460b      	mov	r3, r1
  415e78:	4620      	mov	r0, r4
  415e7a:	4629      	mov	r1, r5
  415e7c:	f001 fda0 	bl	4179c0 <__aeabi_dmul>
  415e80:	4602      	mov	r2, r0
  415e82:	460b      	mov	r3, r1
  415e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  415e88:	f001 fbe8 	bl	41765c <__adddf3>
  415e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415e90:	9903      	ldr	r1, [sp, #12]
  415e92:	4aad      	ldr	r2, [pc, #692]	; (416148 <_strtod_r+0xca8>)
  415e94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  415e98:	0d1b      	lsrs	r3, r3, #20
  415e9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  415e9e:	051b      	lsls	r3, r3, #20
  415ea0:	4293      	cmp	r3, r2
  415ea2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  415ea6:	f240 80d5 	bls.w	416054 <_strtod_r+0xbb4>
  415eaa:	4ba8      	ldr	r3, [pc, #672]	; (41614c <_strtod_r+0xcac>)
  415eac:	9913      	ldr	r1, [sp, #76]	; 0x4c
  415eae:	4299      	cmp	r1, r3
  415eb0:	d010      	beq.n	415ed4 <_strtod_r+0xa34>
  415eb2:	4ba6      	ldr	r3, [pc, #664]	; (41614c <_strtod_r+0xcac>)
  415eb4:	9303      	str	r3, [sp, #12]
  415eb6:	f04f 30ff 	mov.w	r0, #4294967295
  415eba:	9002      	str	r0, [sp, #8]
  415ebc:	e640      	b.n	415b40 <_strtod_r+0x6a0>
  415ebe:	4aa4      	ldr	r2, [pc, #656]	; (416150 <_strtod_r+0xcb0>)
  415ec0:	9203      	str	r2, [sp, #12]
  415ec2:	2000      	movs	r0, #0
  415ec4:	2322      	movs	r3, #34	; 0x22
  415ec6:	9002      	str	r0, [sp, #8]
  415ec8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  415ecc:	f8cb 3000 	str.w	r3, [fp]
  415ed0:	f7ff bb3c 	b.w	41554c <_strtod_r+0xac>
  415ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  415ed6:	3201      	adds	r2, #1
  415ed8:	d1eb      	bne.n	415eb2 <_strtod_r+0xa12>
  415eda:	46b2      	mov	sl, r6
  415edc:	991a      	ldr	r1, [sp, #104]	; 0x68
  415ede:	4a9c      	ldr	r2, [pc, #624]	; (416150 <_strtod_r+0xcb0>)
  415ee0:	9203      	str	r2, [sp, #12]
  415ee2:	2000      	movs	r0, #0
  415ee4:	9002      	str	r0, [sp, #8]
  415ee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  415eea:	2322      	movs	r3, #34	; 0x22
  415eec:	f8cb 3000 	str.w	r3, [fp]
  415ef0:	4658      	mov	r0, fp
  415ef2:	f7fe fc2f 	bl	414754 <_Bfree>
  415ef6:	4658      	mov	r0, fp
  415ef8:	4651      	mov	r1, sl
  415efa:	f7fe fc2b 	bl	414754 <_Bfree>
  415efe:	4658      	mov	r0, fp
  415f00:	4639      	mov	r1, r7
  415f02:	f7fe fc27 	bl	414754 <_Bfree>
  415f06:	4658      	mov	r0, fp
  415f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  415f0a:	f7fe fc23 	bl	414754 <_Bfree>
  415f0e:	4658      	mov	r0, fp
  415f10:	9906      	ldr	r1, [sp, #24]
  415f12:	f7fe fc1f 	bl	414754 <_Bfree>
  415f16:	f7ff bb19 	b.w	41554c <_strtod_r+0xac>
  415f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  415f1e:	f001 ffe9 	bl	417ef4 <__aeabi_d2iz>
  415f22:	f001 fce7 	bl	4178f4 <__aeabi_i2d>
  415f26:	4602      	mov	r2, r0
  415f28:	460b      	mov	r3, r1
  415f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  415f2e:	f001 fb93 	bl	417658 <__aeabi_dsub>
  415f32:	4680      	mov	r8, r0
  415f34:	4689      	mov	r9, r1
  415f36:	f1ba 0f00 	cmp.w	sl, #0
  415f3a:	d111      	bne.n	415f60 <_strtod_r+0xac0>
  415f3c:	9a02      	ldr	r2, [sp, #8]
  415f3e:	b97a      	cbnz	r2, 415f60 <_strtod_r+0xac0>
  415f40:	f3c4 0413 	ubfx	r4, r4, #0, #20
  415f44:	b964      	cbnz	r4, 415f60 <_strtod_r+0xac0>
  415f46:	a37a      	add	r3, pc, #488	; (adr r3, 416130 <_strtod_r+0xc90>)
  415f48:	e9d3 2300 	ldrd	r2, r3, [r3]
  415f4c:	f001 ffaa 	bl	417ea4 <__aeabi_dcmplt>
  415f50:	2800      	cmp	r0, #0
  415f52:	f43f adf5 	beq.w	415b40 <_strtod_r+0x6a0>
  415f56:	46b2      	mov	sl, r6
  415f58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  415f5c:	991a      	ldr	r1, [sp, #104]	; 0x68
  415f5e:	e7c7      	b.n	415ef0 <_strtod_r+0xa50>
  415f60:	4640      	mov	r0, r8
  415f62:	4649      	mov	r1, r9
  415f64:	a374      	add	r3, pc, #464	; (adr r3, 416138 <_strtod_r+0xc98>)
  415f66:	e9d3 2300 	ldrd	r2, r3, [r3]
  415f6a:	f001 ff9b 	bl	417ea4 <__aeabi_dcmplt>
  415f6e:	2800      	cmp	r0, #0
  415f70:	d1f1      	bne.n	415f56 <_strtod_r+0xab6>
  415f72:	4640      	mov	r0, r8
  415f74:	4649      	mov	r1, r9
  415f76:	a372      	add	r3, pc, #456	; (adr r3, 416140 <_strtod_r+0xca0>)
  415f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  415f7c:	f001 ffb0 	bl	417ee0 <__aeabi_dcmpgt>
  415f80:	2800      	cmp	r0, #0
  415f82:	f43f addd 	beq.w	415b40 <_strtod_r+0x6a0>
  415f86:	e7e6      	b.n	415f56 <_strtod_r+0xab6>
  415f88:	4650      	mov	r0, sl
  415f8a:	2808      	cmp	r0, #8
  415f8c:	f100 0a01 	add.w	sl, r0, #1
  415f90:	f300 8107 	bgt.w	4161a2 <_strtod_r+0xd02>
  415f94:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  415f98:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  415f9c:	2000      	movs	r0, #0
  415f9e:	1c62      	adds	r2, r4, #1
  415fa0:	9219      	str	r2, [sp, #100]	; 0x64
  415fa2:	7864      	ldrb	r4, [r4, #1]
  415fa4:	e643      	b.n	415c2e <_strtod_r+0x78e>
  415fa6:	f43f aca7 	beq.w	4158f8 <_strtod_r+0x458>
  415faa:	f1c8 0400 	rsb	r4, r8, #0
  415fae:	f014 030f 	ands.w	r3, r4, #15
  415fb2:	d00a      	beq.n	415fca <_strtod_r+0xb2a>
  415fb4:	4a67      	ldr	r2, [pc, #412]	; (416154 <_strtod_r+0xcb4>)
  415fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  415fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  415fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  415fc2:	f001 fe27 	bl	417c14 <__aeabi_ddiv>
  415fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  415fca:	1124      	asrs	r4, r4, #4
  415fcc:	f43f ac94 	beq.w	4158f8 <_strtod_r+0x458>
  415fd0:	2c1f      	cmp	r4, #31
  415fd2:	dc33      	bgt.n	41603c <_strtod_r+0xb9c>
  415fd4:	f014 0f10 	tst.w	r4, #16
  415fd8:	bf14      	ite	ne
  415fda:	216a      	movne	r1, #106	; 0x6a
  415fdc:	2100      	moveq	r1, #0
  415fde:	2c00      	cmp	r4, #0
  415fe0:	910a      	str	r1, [sp, #40]	; 0x28
  415fe2:	dd0e      	ble.n	416002 <_strtod_r+0xb62>
  415fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  415fe8:	4d5b      	ldr	r5, [pc, #364]	; (416158 <_strtod_r+0xcb8>)
  415fea:	07e3      	lsls	r3, r4, #31
  415fec:	d503      	bpl.n	415ff6 <_strtod_r+0xb56>
  415fee:	e9d5 2300 	ldrd	r2, r3, [r5]
  415ff2:	f001 fce5 	bl	4179c0 <__aeabi_dmul>
  415ff6:	1064      	asrs	r4, r4, #1
  415ff8:	f105 0508 	add.w	r5, r5, #8
  415ffc:	d1f5      	bne.n	415fea <_strtod_r+0xb4a>
  415ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  416002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  416004:	b18a      	cbz	r2, 41602a <_strtod_r+0xb8a>
  416006:	9803      	ldr	r0, [sp, #12]
  416008:	f3c0 530a 	ubfx	r3, r0, #20, #11
  41600c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  416010:	2b00      	cmp	r3, #0
  416012:	dd0a      	ble.n	41602a <_strtod_r+0xb8a>
  416014:	2b1f      	cmp	r3, #31
  416016:	f340 81bd 	ble.w	416394 <_strtod_r+0xef4>
  41601a:	2100      	movs	r1, #0
  41601c:	2b34      	cmp	r3, #52	; 0x34
  41601e:	9102      	str	r1, [sp, #8]
  416020:	f340 81c0 	ble.w	4163a4 <_strtod_r+0xf04>
  416024:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  416028:	9203      	str	r2, [sp, #12]
  41602a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41602e:	2200      	movs	r2, #0
  416030:	2300      	movs	r3, #0
  416032:	f001 ff2d 	bl	417e90 <__aeabi_dcmpeq>
  416036:	2800      	cmp	r0, #0
  416038:	f43f ac60 	beq.w	4158fc <_strtod_r+0x45c>
  41603c:	2322      	movs	r3, #34	; 0x22
  41603e:	f8cb 3000 	str.w	r3, [fp]
  416042:	f04f 0800 	mov.w	r8, #0
  416046:	f04f 0900 	mov.w	r9, #0
  41604a:	f7ff ba7f 	b.w	41554c <_strtod_r+0xac>
  41604e:	f644 611f 	movw	r1, #19999	; 0x4e1f
  416052:	e40f      	b.n	415874 <_strtod_r+0x3d4>
  416054:	9903      	ldr	r1, [sp, #12]
  416056:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  41605a:	9403      	str	r4, [sp, #12]
  41605c:	e569      	b.n	415b32 <_strtod_r+0x692>
  41605e:	9808      	ldr	r0, [sp, #32]
  416060:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  416064:	4298      	cmp	r0, r3
  416066:	f73f ac2d 	bgt.w	4158c4 <_strtod_r+0x424>
  41606a:	4c3a      	ldr	r4, [pc, #232]	; (416154 <_strtod_r+0xcb4>)
  41606c:	f1ca 050f 	rsb	r5, sl, #15
  416070:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  416074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  416078:	e9d1 0100 	ldrd	r0, r1, [r1]
  41607c:	f001 fca0 	bl	4179c0 <__aeabi_dmul>
  416080:	9a08      	ldr	r2, [sp, #32]
  416082:	1b55      	subs	r5, r2, r5
  416084:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  416088:	e9d4 2300 	ldrd	r2, r3, [r4]
  41608c:	f001 fc98 	bl	4179c0 <__aeabi_dmul>
  416090:	4680      	mov	r8, r0
  416092:	4689      	mov	r9, r1
  416094:	f7ff ba5a 	b.w	41554c <_strtod_r+0xac>
  416098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41609c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4160a0:	e660      	b.n	415d64 <_strtod_r+0x8c4>
  4160a2:	492e      	ldr	r1, [pc, #184]	; (41615c <_strtod_r+0xcbc>)
  4160a4:	2000      	movs	r0, #0
  4160a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4160aa:	e651      	b.n	415d50 <_strtod_r+0x8b0>
  4160ac:	464a      	mov	r2, r9
  4160ae:	2a00      	cmp	r2, #0
  4160b0:	f47f ae33 	bne.w	415d1a <_strtod_r+0x87a>
  4160b4:	46b2      	mov	sl, r6
  4160b6:	2322      	movs	r3, #34	; 0x22
  4160b8:	f8cb 3000 	str.w	r3, [fp]
  4160bc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4160be:	f04f 0800 	mov.w	r8, #0
  4160c2:	f04f 0900 	mov.w	r9, #0
  4160c6:	e713      	b.n	415ef0 <_strtod_r+0xa50>
  4160c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4160ca:	b13a      	cbz	r2, 4160dc <_strtod_r+0xc3c>
  4160cc:	a81c      	add	r0, sp, #112	; 0x70
  4160ce:	2135      	movs	r1, #53	; 0x35
  4160d0:	f7fe ff12 	bl	414ef8 <__copybits>
  4160d4:	4658      	mov	r0, fp
  4160d6:	991a      	ldr	r1, [sp, #104]	; 0x68
  4160d8:	f7fe fb3c 	bl	414754 <_Bfree>
  4160dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4160de:	2d06      	cmp	r5, #6
  4160e0:	f63f ab6d 	bhi.w	4157be <_strtod_r+0x31e>
  4160e4:	a001      	add	r0, pc, #4	; (adr r0, 4160ec <_strtod_r+0xc4c>)
  4160e6:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  4160ea:	bf00      	nop
  4160ec:	00416121 	.word	0x00416121
  4160f0:	00416161 	.word	0x00416161
  4160f4:	00416115 	.word	0x00416115
  4160f8:	00416109 	.word	0x00416109
  4160fc:	004157b3 	.word	0x004157b3
  416100:	00416161 	.word	0x00416161
  416104:	00416121 	.word	0x00416121
  416108:	4911      	ldr	r1, [pc, #68]	; (416150 <_strtod_r+0xcb0>)
  41610a:	9103      	str	r1, [sp, #12]
  41610c:	2200      	movs	r2, #0
  41610e:	9202      	str	r2, [sp, #8]
  416110:	f7ff bb55 	b.w	4157be <_strtod_r+0x31e>
  416114:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  416116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  416118:	9202      	str	r2, [sp, #8]
  41611a:	9303      	str	r3, [sp, #12]
  41611c:	f7ff bb4f 	b.w	4157be <_strtod_r+0x31e>
  416120:	2100      	movs	r1, #0
  416122:	9103      	str	r1, [sp, #12]
  416124:	9102      	str	r1, [sp, #8]
  416126:	f7ff bb4a 	b.w	4157be <_strtod_r+0x31e>
  41612a:	bf00      	nop
  41612c:	f3af 8000 	nop.w
  416130:	94a03595 	.word	0x94a03595
  416134:	3fcfffff 	.word	0x3fcfffff
  416138:	94a03595 	.word	0x94a03595
  41613c:	3fdfffff 	.word	0x3fdfffff
  416140:	35afe535 	.word	0x35afe535
  416144:	3fe00000 	.word	0x3fe00000
  416148:	7c9fffff 	.word	0x7c9fffff
  41614c:	7fefffff 	.word	0x7fefffff
  416150:	7ff00000 	.word	0x7ff00000
  416154:	004193c8 	.word	0x004193c8
  416158:	00419500 	.word	0x00419500
  41615c:	3ff00000 	.word	0x3ff00000
  416160:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  416162:	981c      	ldr	r0, [sp, #112]	; 0x70
  416164:	9002      	str	r0, [sp, #8]
  416166:	f203 4333 	addw	r3, r3, #1075	; 0x433
  41616a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  41616e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  416172:	9203      	str	r2, [sp, #12]
  416174:	f7ff bb23 	b.w	4157be <_strtod_r+0x31e>
  416178:	9b08      	ldr	r3, [sp, #32]
  41617a:	3316      	adds	r3, #22
  41617c:	f6ff aba2 	blt.w	4158c4 <_strtod_r+0x424>
  416180:	4b8e      	ldr	r3, [pc, #568]	; (4163bc <_strtod_r+0xf1c>)
  416182:	9808      	ldr	r0, [sp, #32]
  416184:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  416188:	e9da 2300 	ldrd	r2, r3, [sl]
  41618c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  416190:	f001 fd40 	bl	417c14 <__aeabi_ddiv>
  416194:	4680      	mov	r8, r0
  416196:	4689      	mov	r9, r1
  416198:	f7ff b9d8 	b.w	41554c <_strtod_r+0xac>
  41619c:	46b2      	mov	sl, r6
  41619e:	4601      	mov	r1, r0
  4161a0:	e69d      	b.n	415ede <_strtod_r+0xa3e>
  4161a2:	f1ba 0f10 	cmp.w	sl, #16
  4161a6:	bfdc      	itt	le
  4161a8:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  4161ac:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  4161b0:	2000      	movs	r0, #0
  4161b2:	e6f4      	b.n	415f9e <_strtod_r+0xafe>
  4161b4:	4655      	mov	r5, sl
  4161b6:	46c4      	mov	ip, r8
  4161b8:	46b2      	mov	sl, r6
  4161ba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4161be:	2d00      	cmp	r5, #0
  4161c0:	f000 8082 	beq.w	4162c8 <_strtod_r+0xe28>
  4161c4:	9a03      	ldr	r2, [sp, #12]
  4161c6:	4b7e      	ldr	r3, [pc, #504]	; (4163c0 <_strtod_r+0xf20>)
  4161c8:	f3c2 0113 	ubfx	r1, r2, #0, #20
  4161cc:	4299      	cmp	r1, r3
  4161ce:	f000 80a3 	beq.w	416318 <_strtod_r+0xe78>
  4161d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4161d4:	2b00      	cmp	r3, #0
  4161d6:	f000 8083 	beq.w	4162e0 <_strtod_r+0xe40>
  4161da:	9803      	ldr	r0, [sp, #12]
  4161dc:	4203      	tst	r3, r0
  4161de:	d00f      	beq.n	416200 <_strtod_r+0xd60>
  4161e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4161e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4161e6:	2d00      	cmp	r5, #0
  4161e8:	f000 8084 	beq.w	4162f4 <_strtod_r+0xe54>
  4161ec:	f7ff f936 	bl	41545c <sulp>
  4161f0:	4602      	mov	r2, r0
  4161f2:	460b      	mov	r3, r1
  4161f4:	4640      	mov	r0, r8
  4161f6:	4649      	mov	r1, r9
  4161f8:	f001 fa30 	bl	41765c <__adddf3>
  4161fc:	4680      	mov	r8, r0
  4161fe:	4689      	mov	r9, r1
  416200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416202:	b1b3      	cbz	r3, 416232 <_strtod_r+0xd92>
  416204:	486f      	ldr	r0, [pc, #444]	; (4163c4 <_strtod_r+0xf24>)
  416206:	9013      	str	r0, [sp, #76]	; 0x4c
  416208:	2100      	movs	r1, #0
  41620a:	9112      	str	r1, [sp, #72]	; 0x48
  41620c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  416210:	4640      	mov	r0, r8
  416212:	4649      	mov	r1, r9
  416214:	f001 fbd4 	bl	4179c0 <__aeabi_dmul>
  416218:	4680      	mov	r8, r0
  41621a:	4689      	mov	r9, r1
  41621c:	e9cd 8902 	strd	r8, r9, [sp, #8]
  416220:	9a03      	ldr	r2, [sp, #12]
  416222:	b932      	cbnz	r2, 416232 <_strtod_r+0xd92>
  416224:	9b02      	ldr	r3, [sp, #8]
  416226:	b923      	cbnz	r3, 416232 <_strtod_r+0xd92>
  416228:	2322      	movs	r3, #34	; 0x22
  41622a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41622c:	f8cb 3000 	str.w	r3, [fp]
  416230:	e65e      	b.n	415ef0 <_strtod_r+0xa50>
  416232:	991a      	ldr	r1, [sp, #104]	; 0x68
  416234:	e65c      	b.n	415ef0 <_strtod_r+0xa50>
  416236:	4655      	mov	r5, sl
  416238:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  41623c:	46b2      	mov	sl, r6
  41623e:	2d00      	cmp	r5, #0
  416240:	d1de      	bne.n	416200 <_strtod_r+0xd60>
  416242:	9a02      	ldr	r2, [sp, #8]
  416244:	2a00      	cmp	r2, #0
  416246:	d1db      	bne.n	416200 <_strtod_r+0xd60>
  416248:	9803      	ldr	r0, [sp, #12]
  41624a:	f3c0 0313 	ubfx	r3, r0, #0, #20
  41624e:	4604      	mov	r4, r0
  416250:	2b00      	cmp	r3, #0
  416252:	d1d5      	bne.n	416200 <_strtod_r+0xd60>
  416254:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  416258:	0d1b      	lsrs	r3, r3, #20
  41625a:	051b      	lsls	r3, r3, #20
  41625c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  416260:	d9ce      	bls.n	416200 <_strtod_r+0xd60>
  416262:	9906      	ldr	r1, [sp, #24]
  416264:	694b      	ldr	r3, [r1, #20]
  416266:	b913      	cbnz	r3, 41626e <_strtod_r+0xdce>
  416268:	690b      	ldr	r3, [r1, #16]
  41626a:	2b01      	cmp	r3, #1
  41626c:	ddc8      	ble.n	416200 <_strtod_r+0xd60>
  41626e:	9906      	ldr	r1, [sp, #24]
  416270:	2201      	movs	r2, #1
  416272:	4658      	mov	r0, fp
  416274:	f7fe fc54 	bl	414b20 <__lshift>
  416278:	4639      	mov	r1, r7
  41627a:	9006      	str	r0, [sp, #24]
  41627c:	f7fe fcae 	bl	414bdc <__mcmp>
  416280:	2800      	cmp	r0, #0
  416282:	ddbd      	ble.n	416200 <_strtod_r+0xd60>
  416284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416286:	2b00      	cmp	r3, #0
  416288:	d17a      	bne.n	416380 <_strtod_r+0xee0>
  41628a:	4b4f      	ldr	r3, [pc, #316]	; (4163c8 <_strtod_r+0xf28>)
  41628c:	4023      	ands	r3, r4
  41628e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  416292:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  416296:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  41629a:	f04f 31ff 	mov.w	r1, #4294967295
  41629e:	9003      	str	r0, [sp, #12]
  4162a0:	9102      	str	r1, [sp, #8]
  4162a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4162a6:	e7ab      	b.n	416200 <_strtod_r+0xd60>
  4162a8:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  4162ac:	2000      	movs	r0, #0
  4162ae:	9103      	str	r1, [sp, #12]
  4162b0:	900a      	str	r0, [sp, #40]	; 0x28
  4162b2:	f7ff bb23 	b.w	4158fc <_strtod_r+0x45c>
  4162b6:	4b45      	ldr	r3, [pc, #276]	; (4163cc <_strtod_r+0xf2c>)
  4162b8:	4945      	ldr	r1, [pc, #276]	; (4163d0 <_strtod_r+0xf30>)
  4162ba:	2200      	movs	r2, #0
  4162bc:	2000      	movs	r0, #0
  4162be:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4162c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4162c6:	e4ac      	b.n	415c22 <_strtod_r+0x782>
  4162c8:	9903      	ldr	r1, [sp, #12]
  4162ca:	f3c1 0313 	ubfx	r3, r1, #0, #20
  4162ce:	460c      	mov	r4, r1
  4162d0:	2b00      	cmp	r3, #0
  4162d2:	f47f af7e 	bne.w	4161d2 <_strtod_r+0xd32>
  4162d6:	9a02      	ldr	r2, [sp, #8]
  4162d8:	2a00      	cmp	r2, #0
  4162da:	f47f af7a 	bne.w	4161d2 <_strtod_r+0xd32>
  4162de:	e7d1      	b.n	416284 <_strtod_r+0xde4>
  4162e0:	9902      	ldr	r1, [sp, #8]
  4162e2:	ea1c 0f01 	tst.w	ip, r1
  4162e6:	d08b      	beq.n	416200 <_strtod_r+0xd60>
  4162e8:	e77a      	b.n	4161e0 <_strtod_r+0xd40>
  4162ea:	3101      	adds	r1, #1
  4162ec:	9119      	str	r1, [sp, #100]	; 0x64
  4162ee:	e57d      	b.n	415dec <_strtod_r+0x94c>
  4162f0:	2700      	movs	r7, #0
  4162f2:	e4e8      	b.n	415cc6 <_strtod_r+0x826>
  4162f4:	f7ff f8b2 	bl	41545c <sulp>
  4162f8:	4602      	mov	r2, r0
  4162fa:	460b      	mov	r3, r1
  4162fc:	4640      	mov	r0, r8
  4162fe:	4649      	mov	r1, r9
  416300:	f001 f9aa 	bl	417658 <__aeabi_dsub>
  416304:	2200      	movs	r2, #0
  416306:	2300      	movs	r3, #0
  416308:	4680      	mov	r8, r0
  41630a:	4689      	mov	r9, r1
  41630c:	f001 fdc0 	bl	417e90 <__aeabi_dcmpeq>
  416310:	2800      	cmp	r0, #0
  416312:	f47f aed0 	bne.w	4160b6 <_strtod_r+0xc16>
  416316:	e773      	b.n	416200 <_strtod_r+0xd60>
  416318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41631a:	9902      	ldr	r1, [sp, #8]
  41631c:	b1db      	cbz	r3, 416356 <_strtod_r+0xeb6>
  41631e:	4b2a      	ldr	r3, [pc, #168]	; (4163c8 <_strtod_r+0xf28>)
  416320:	4013      	ands	r3, r2
  416322:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  416326:	d816      	bhi.n	416356 <_strtod_r+0xeb6>
  416328:	0d1b      	lsrs	r3, r3, #20
  41632a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  41632e:	f04f 30ff 	mov.w	r0, #4294967295
  416332:	fa00 f303 	lsl.w	r3, r0, r3
  416336:	4299      	cmp	r1, r3
  416338:	f47f af4b 	bne.w	4161d2 <_strtod_r+0xd32>
  41633c:	4b25      	ldr	r3, [pc, #148]	; (4163d4 <_strtod_r+0xf34>)
  41633e:	429a      	cmp	r2, r3
  416340:	d038      	beq.n	4163b4 <_strtod_r+0xf14>
  416342:	4b21      	ldr	r3, [pc, #132]	; (4163c8 <_strtod_r+0xf28>)
  416344:	4013      	ands	r3, r2
  416346:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  41634a:	2000      	movs	r0, #0
  41634c:	9303      	str	r3, [sp, #12]
  41634e:	9002      	str	r0, [sp, #8]
  416350:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  416354:	e754      	b.n	416200 <_strtod_r+0xd60>
  416356:	f04f 33ff 	mov.w	r3, #4294967295
  41635a:	e7ec      	b.n	416336 <_strtod_r+0xe96>
  41635c:	a819      	add	r0, sp, #100	; 0x64
  41635e:	491e      	ldr	r1, [pc, #120]	; (4163d8 <_strtod_r+0xf38>)
  416360:	aa1c      	add	r2, sp, #112	; 0x70
  416362:	f001 f899 	bl	417498 <__hexnan>
  416366:	2805      	cmp	r0, #5
  416368:	f47f ad16 	bne.w	415d98 <_strtod_r+0x8f8>
  41636c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  41636e:	991c      	ldr	r1, [sp, #112]	; 0x70
  416370:	9102      	str	r1, [sp, #8]
  416372:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  416376:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  41637a:	9003      	str	r0, [sp, #12]
  41637c:	f7ff ba25 	b.w	4157ca <_strtod_r+0x32a>
  416380:	4b11      	ldr	r3, [pc, #68]	; (4163c8 <_strtod_r+0xf28>)
  416382:	4023      	ands	r3, r4
  416384:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  416388:	d881      	bhi.n	41628e <_strtod_r+0xdee>
  41638a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  41638e:	f63f af39 	bhi.w	416204 <_strtod_r+0xd64>
  416392:	e690      	b.n	4160b6 <_strtod_r+0xc16>
  416394:	9802      	ldr	r0, [sp, #8]
  416396:	f04f 32ff 	mov.w	r2, #4294967295
  41639a:	fa02 f303 	lsl.w	r3, r2, r3
  41639e:	4003      	ands	r3, r0
  4163a0:	9302      	str	r3, [sp, #8]
  4163a2:	e642      	b.n	41602a <_strtod_r+0xb8a>
  4163a4:	3b20      	subs	r3, #32
  4163a6:	f04f 31ff 	mov.w	r1, #4294967295
  4163aa:	fa01 f303 	lsl.w	r3, r1, r3
  4163ae:	4003      	ands	r3, r0
  4163b0:	9303      	str	r3, [sp, #12]
  4163b2:	e63a      	b.n	41602a <_strtod_r+0xb8a>
  4163b4:	3101      	adds	r1, #1
  4163b6:	d1c4      	bne.n	416342 <_strtod_r+0xea2>
  4163b8:	e590      	b.n	415edc <_strtod_r+0xa3c>
  4163ba:	bf00      	nop
  4163bc:	004193c8 	.word	0x004193c8
  4163c0:	000fffff 	.word	0x000fffff
  4163c4:	39500000 	.word	0x39500000
  4163c8:	7ff00000 	.word	0x7ff00000
  4163cc:	bfe00000 	.word	0xbfe00000
  4163d0:	3fe00000 	.word	0x3fe00000
  4163d4:	7fefffff 	.word	0x7fefffff
  4163d8:	004194e8 	.word	0x004194e8
  4163dc:	f3af 8000 	nop.w

004163e0 <_strtol_r>:
  4163e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4163e4:	4c42      	ldr	r4, [pc, #264]	; (4164f0 <_strtol_r+0x110>)
  4163e6:	b082      	sub	sp, #8
  4163e8:	f8d4 c000 	ldr.w	ip, [r4]
  4163ec:	9001      	str	r0, [sp, #4]
  4163ee:	460e      	mov	r6, r1
  4163f0:	e000      	b.n	4163f4 <_strtol_r+0x14>
  4163f2:	4626      	mov	r6, r4
  4163f4:	4634      	mov	r4, r6
  4163f6:	f814 5b01 	ldrb.w	r5, [r4], #1
  4163fa:	eb0c 0005 	add.w	r0, ip, r5
  4163fe:	7840      	ldrb	r0, [r0, #1]
  416400:	f000 0008 	and.w	r0, r0, #8
  416404:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  416408:	2800      	cmp	r0, #0
  41640a:	d1f2      	bne.n	4163f2 <_strtol_r+0x12>
  41640c:	2d2d      	cmp	r5, #45	; 0x2d
  41640e:	d05b      	beq.n	4164c8 <_strtol_r+0xe8>
  416410:	2d2b      	cmp	r5, #43	; 0x2b
  416412:	bf04      	itt	eq
  416414:	7875      	ldrbeq	r5, [r6, #1]
  416416:	1cb4      	addeq	r4, r6, #2
  416418:	f033 0010 	bics.w	r0, r3, #16
  41641c:	d03c      	beq.n	416498 <_strtol_r+0xb8>
  41641e:	4699      	mov	r9, r3
  416420:	f1ba 0f00 	cmp.w	sl, #0
  416424:	bf0c      	ite	eq
  416426:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  41642a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  41642e:	fbbb f8f9 	udiv	r8, fp, r9
  416432:	2700      	movs	r7, #0
  416434:	fb09 bb18 	mls	fp, r9, r8, fp
  416438:	4638      	mov	r0, r7
  41643a:	e00c      	b.n	416456 <_strtol_r+0x76>
  41643c:	3d30      	subs	r5, #48	; 0x30
  41643e:	42ab      	cmp	r3, r5
  416440:	dd19      	ble.n	416476 <_strtol_r+0x96>
  416442:	1c7e      	adds	r6, r7, #1
  416444:	d005      	beq.n	416452 <_strtol_r+0x72>
  416446:	4540      	cmp	r0, r8
  416448:	d823      	bhi.n	416492 <_strtol_r+0xb2>
  41644a:	d020      	beq.n	41648e <_strtol_r+0xae>
  41644c:	fb09 5000 	mla	r0, r9, r0, r5
  416450:	2701      	movs	r7, #1
  416452:	f814 5b01 	ldrb.w	r5, [r4], #1
  416456:	eb0c 0605 	add.w	r6, ip, r5
  41645a:	7876      	ldrb	r6, [r6, #1]
  41645c:	f016 0f04 	tst.w	r6, #4
  416460:	d1ec      	bne.n	41643c <_strtol_r+0x5c>
  416462:	f016 0603 	ands.w	r6, r6, #3
  416466:	d006      	beq.n	416476 <_strtol_r+0x96>
  416468:	2e01      	cmp	r6, #1
  41646a:	bf14      	ite	ne
  41646c:	2657      	movne	r6, #87	; 0x57
  41646e:	2637      	moveq	r6, #55	; 0x37
  416470:	1bad      	subs	r5, r5, r6
  416472:	42ab      	cmp	r3, r5
  416474:	dce5      	bgt.n	416442 <_strtol_r+0x62>
  416476:	1c7b      	adds	r3, r7, #1
  416478:	d015      	beq.n	4164a6 <_strtol_r+0xc6>
  41647a:	f1ba 0f00 	cmp.w	sl, #0
  41647e:	d121      	bne.n	4164c4 <_strtol_r+0xe4>
  416480:	b10a      	cbz	r2, 416486 <_strtol_r+0xa6>
  416482:	b9ef      	cbnz	r7, 4164c0 <_strtol_r+0xe0>
  416484:	6011      	str	r1, [r2, #0]
  416486:	b002      	add	sp, #8
  416488:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41648c:	4770      	bx	lr
  41648e:	455d      	cmp	r5, fp
  416490:	dddc      	ble.n	41644c <_strtol_r+0x6c>
  416492:	f04f 37ff 	mov.w	r7, #4294967295
  416496:	e7dc      	b.n	416452 <_strtol_r+0x72>
  416498:	2d30      	cmp	r5, #48	; 0x30
  41649a:	d01a      	beq.n	4164d2 <_strtol_r+0xf2>
  41649c:	2b00      	cmp	r3, #0
  41649e:	d1be      	bne.n	41641e <_strtol_r+0x3e>
  4164a0:	230a      	movs	r3, #10
  4164a2:	4699      	mov	r9, r3
  4164a4:	e7bc      	b.n	416420 <_strtol_r+0x40>
  4164a6:	9901      	ldr	r1, [sp, #4]
  4164a8:	f1ba 0f00 	cmp.w	sl, #0
  4164ac:	f04f 0322 	mov.w	r3, #34	; 0x22
  4164b0:	bf0c      	ite	eq
  4164b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4164b6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4164ba:	600b      	str	r3, [r1, #0]
  4164bc:	2a00      	cmp	r2, #0
  4164be:	d0e2      	beq.n	416486 <_strtol_r+0xa6>
  4164c0:	1e61      	subs	r1, r4, #1
  4164c2:	e7df      	b.n	416484 <_strtol_r+0xa4>
  4164c4:	4240      	negs	r0, r0
  4164c6:	e7db      	b.n	416480 <_strtol_r+0xa0>
  4164c8:	1cb4      	adds	r4, r6, #2
  4164ca:	7875      	ldrb	r5, [r6, #1]
  4164cc:	f04f 0a01 	mov.w	sl, #1
  4164d0:	e7a2      	b.n	416418 <_strtol_r+0x38>
  4164d2:	7820      	ldrb	r0, [r4, #0]
  4164d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4164d8:	2858      	cmp	r0, #88	; 0x58
  4164da:	d003      	beq.n	4164e4 <_strtol_r+0x104>
  4164dc:	2b00      	cmp	r3, #0
  4164de:	d19e      	bne.n	41641e <_strtol_r+0x3e>
  4164e0:	2308      	movs	r3, #8
  4164e2:	e79c      	b.n	41641e <_strtol_r+0x3e>
  4164e4:	2310      	movs	r3, #16
  4164e6:	7865      	ldrb	r5, [r4, #1]
  4164e8:	4699      	mov	r9, r3
  4164ea:	3402      	adds	r4, #2
  4164ec:	e798      	b.n	416420 <_strtol_r+0x40>
  4164ee:	bf00      	nop
  4164f0:	20000d2c 	.word	0x20000d2c

004164f4 <_strtoll_r>:
  4164f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4164f8:	4c64      	ldr	r4, [pc, #400]	; (41668c <_strtoll_r+0x198>)
  4164fa:	b087      	sub	sp, #28
  4164fc:	4694      	mov	ip, r2
  4164fe:	9104      	str	r1, [sp, #16]
  416500:	f8d4 8000 	ldr.w	r8, [r4]
  416504:	9005      	str	r0, [sp, #20]
  416506:	4699      	mov	r9, r3
  416508:	460a      	mov	r2, r1
  41650a:	e000      	b.n	41650e <_strtoll_r+0x1a>
  41650c:	4632      	mov	r2, r6
  41650e:	4616      	mov	r6, r2
  416510:	f816 7b01 	ldrb.w	r7, [r6], #1
  416514:	eb08 0307 	add.w	r3, r8, r7
  416518:	785b      	ldrb	r3, [r3, #1]
  41651a:	f003 0308 	and.w	r3, r3, #8
  41651e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  416522:	2b00      	cmp	r3, #0
  416524:	d1f2      	bne.n	41650c <_strtoll_r+0x18>
  416526:	2f2d      	cmp	r7, #45	; 0x2d
  416528:	f000 808d 	beq.w	416646 <_strtoll_r+0x152>
  41652c:	2f2b      	cmp	r7, #43	; 0x2b
  41652e:	bf08      	it	eq
  416530:	7857      	ldrbeq	r7, [r2, #1]
  416532:	9102      	str	r1, [sp, #8]
  416534:	bf08      	it	eq
  416536:	1c96      	addeq	r6, r2, #2
  416538:	f039 0110 	bics.w	r1, r9, #16
  41653c:	d05e      	beq.n	4165fc <_strtoll_r+0x108>
  41653e:	46ca      	mov	sl, r9
  416540:	ea4f 7be9 	mov.w	fp, r9, asr #31
  416544:	9c02      	ldr	r4, [sp, #8]
  416546:	2c00      	cmp	r4, #0
  416548:	d066      	beq.n	416618 <_strtoll_r+0x124>
  41654a:	2400      	movs	r4, #0
  41654c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  416550:	4620      	mov	r0, r4
  416552:	4629      	mov	r1, r5
  416554:	4652      	mov	r2, sl
  416556:	465b      	mov	r3, fp
  416558:	f8cd c004 	str.w	ip, [sp, #4]
  41655c:	f7f7 ffc0 	bl	40e4e0 <__aeabi_uldivmod>
  416560:	4620      	mov	r0, r4
  416562:	9203      	str	r2, [sp, #12]
  416564:	465b      	mov	r3, fp
  416566:	4652      	mov	r2, sl
  416568:	4629      	mov	r1, r5
  41656a:	f7f7 ffb9 	bl	40e4e0 <__aeabi_uldivmod>
  41656e:	2400      	movs	r4, #0
  416570:	2200      	movs	r2, #0
  416572:	2300      	movs	r3, #0
  416574:	f8dd c004 	ldr.w	ip, [sp, #4]
  416578:	e019      	b.n	4165ae <_strtoll_r+0xba>
  41657a:	3f30      	subs	r7, #48	; 0x30
  41657c:	45b9      	cmp	r9, r7
  41657e:	dd26      	ble.n	4165ce <_strtoll_r+0xda>
  416580:	1c65      	adds	r5, r4, #1
  416582:	d012      	beq.n	4165aa <_strtoll_r+0xb6>
  416584:	4299      	cmp	r1, r3
  416586:	bf08      	it	eq
  416588:	4290      	cmpeq	r0, r2
  41658a:	d334      	bcc.n	4165f6 <_strtoll_r+0x102>
  41658c:	428b      	cmp	r3, r1
  41658e:	bf08      	it	eq
  416590:	4282      	cmpeq	r2, r0
  416592:	d02d      	beq.n	4165f0 <_strtoll_r+0xfc>
  416594:	fb02 f40b 	mul.w	r4, r2, fp
  416598:	fb0a 4403 	mla	r4, sl, r3, r4
  41659c:	fba2 230a 	umull	r2, r3, r2, sl
  4165a0:	4423      	add	r3, r4
  4165a2:	19d2      	adds	r2, r2, r7
  4165a4:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  4165a8:	2401      	movs	r4, #1
  4165aa:	f816 7b01 	ldrb.w	r7, [r6], #1
  4165ae:	eb08 0507 	add.w	r5, r8, r7
  4165b2:	786d      	ldrb	r5, [r5, #1]
  4165b4:	f015 0f04 	tst.w	r5, #4
  4165b8:	d1df      	bne.n	41657a <_strtoll_r+0x86>
  4165ba:	f015 0503 	ands.w	r5, r5, #3
  4165be:	d006      	beq.n	4165ce <_strtoll_r+0xda>
  4165c0:	2d01      	cmp	r5, #1
  4165c2:	bf14      	ite	ne
  4165c4:	2557      	movne	r5, #87	; 0x57
  4165c6:	2537      	moveq	r5, #55	; 0x37
  4165c8:	1b7f      	subs	r7, r7, r5
  4165ca:	45b9      	cmp	r9, r7
  4165cc:	dcd8      	bgt.n	416580 <_strtoll_r+0x8c>
  4165ce:	1c61      	adds	r1, r4, #1
  4165d0:	d027      	beq.n	416622 <_strtoll_r+0x12e>
  4165d2:	9902      	ldr	r1, [sp, #8]
  4165d4:	2900      	cmp	r1, #0
  4165d6:	d132      	bne.n	41663e <_strtoll_r+0x14a>
  4165d8:	4610      	mov	r0, r2
  4165da:	4619      	mov	r1, r3
  4165dc:	f1bc 0f00 	cmp.w	ip, #0
  4165e0:	d003      	beq.n	4165ea <_strtoll_r+0xf6>
  4165e2:	bb54      	cbnz	r4, 41663a <_strtoll_r+0x146>
  4165e4:	9e04      	ldr	r6, [sp, #16]
  4165e6:	f8cc 6000 	str.w	r6, [ip]
  4165ea:	b007      	add	sp, #28
  4165ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4165f0:	9c03      	ldr	r4, [sp, #12]
  4165f2:	42a7      	cmp	r7, r4
  4165f4:	ddce      	ble.n	416594 <_strtoll_r+0xa0>
  4165f6:	f04f 34ff 	mov.w	r4, #4294967295
  4165fa:	e7d6      	b.n	4165aa <_strtoll_r+0xb6>
  4165fc:	2f30      	cmp	r7, #48	; 0x30
  4165fe:	d027      	beq.n	416650 <_strtoll_r+0x15c>
  416600:	f1b9 0f00 	cmp.w	r9, #0
  416604:	d19b      	bne.n	41653e <_strtoll_r+0x4a>
  416606:	9c02      	ldr	r4, [sp, #8]
  416608:	f04f 0a0a 	mov.w	sl, #10
  41660c:	f04f 0b00 	mov.w	fp, #0
  416610:	f04f 090a 	mov.w	r9, #10
  416614:	2c00      	cmp	r4, #0
  416616:	d198      	bne.n	41654a <_strtoll_r+0x56>
  416618:	f04f 34ff 	mov.w	r4, #4294967295
  41661c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  416620:	e796      	b.n	416550 <_strtoll_r+0x5c>
  416622:	9c02      	ldr	r4, [sp, #8]
  416624:	bb24      	cbnz	r4, 416670 <_strtoll_r+0x17c>
  416626:	f04f 30ff 	mov.w	r0, #4294967295
  41662a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  41662e:	9c05      	ldr	r4, [sp, #20]
  416630:	2322      	movs	r3, #34	; 0x22
  416632:	6023      	str	r3, [r4, #0]
  416634:	f1bc 0f00 	cmp.w	ip, #0
  416638:	d0d7      	beq.n	4165ea <_strtoll_r+0xf6>
  41663a:	3e01      	subs	r6, #1
  41663c:	e7d3      	b.n	4165e6 <_strtoll_r+0xf2>
  41663e:	4252      	negs	r2, r2
  416640:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  416644:	e7c8      	b.n	4165d8 <_strtoll_r+0xe4>
  416646:	2401      	movs	r4, #1
  416648:	1c96      	adds	r6, r2, #2
  41664a:	7857      	ldrb	r7, [r2, #1]
  41664c:	9402      	str	r4, [sp, #8]
  41664e:	e773      	b.n	416538 <_strtoll_r+0x44>
  416650:	7833      	ldrb	r3, [r6, #0]
  416652:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  416656:	2b58      	cmp	r3, #88	; 0x58
  416658:	d00e      	beq.n	416678 <_strtoll_r+0x184>
  41665a:	f1b9 0f00 	cmp.w	r9, #0
  41665e:	f47f af6e 	bne.w	41653e <_strtoll_r+0x4a>
  416662:	f04f 0a08 	mov.w	sl, #8
  416666:	f04f 0b00 	mov.w	fp, #0
  41666a:	f04f 0908 	mov.w	r9, #8
  41666e:	e769      	b.n	416544 <_strtoll_r+0x50>
  416670:	2000      	movs	r0, #0
  416672:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  416676:	e7da      	b.n	41662e <_strtoll_r+0x13a>
  416678:	7877      	ldrb	r7, [r6, #1]
  41667a:	f04f 0a10 	mov.w	sl, #16
  41667e:	f04f 0b00 	mov.w	fp, #0
  416682:	3602      	adds	r6, #2
  416684:	f04f 0910 	mov.w	r9, #16
  416688:	e75c      	b.n	416544 <_strtoll_r+0x50>
  41668a:	bf00      	nop
  41668c:	20000d2c 	.word	0x20000d2c

00416690 <_strtoul_r>:
  416690:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  416694:	4c44      	ldr	r4, [pc, #272]	; (4167a8 <_strtoul_r+0x118>)
  416696:	b082      	sub	sp, #8
  416698:	f8d4 c000 	ldr.w	ip, [r4]
  41669c:	9001      	str	r0, [sp, #4]
  41669e:	460e      	mov	r6, r1
  4166a0:	e000      	b.n	4166a4 <_strtoul_r+0x14>
  4166a2:	4626      	mov	r6, r4
  4166a4:	4634      	mov	r4, r6
  4166a6:	f814 5b01 	ldrb.w	r5, [r4], #1
  4166aa:	eb0c 0005 	add.w	r0, ip, r5
  4166ae:	7840      	ldrb	r0, [r0, #1]
  4166b0:	f000 0008 	and.w	r0, r0, #8
  4166b4:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  4166b8:	2800      	cmp	r0, #0
  4166ba:	d1f2      	bne.n	4166a2 <_strtoul_r+0x12>
  4166bc:	2d2d      	cmp	r5, #45	; 0x2d
  4166be:	d057      	beq.n	416770 <_strtoul_r+0xe0>
  4166c0:	2d2b      	cmp	r5, #43	; 0x2b
  4166c2:	bf08      	it	eq
  4166c4:	7875      	ldrbeq	r5, [r6, #1]
  4166c6:	46ba      	mov	sl, r7
  4166c8:	bf08      	it	eq
  4166ca:	1cb4      	addeq	r4, r6, #2
  4166cc:	f033 0010 	bics.w	r0, r3, #16
  4166d0:	d039      	beq.n	416746 <_strtoul_r+0xb6>
  4166d2:	f04f 38ff 	mov.w	r8, #4294967295
  4166d6:	fbb8 f8f3 	udiv	r8, r8, r3
  4166da:	fb03 fb08 	mul.w	fp, r3, r8
  4166de:	ea6f 0b0b 	mvn.w	fp, fp
  4166e2:	4699      	mov	r9, r3
  4166e4:	2700      	movs	r7, #0
  4166e6:	4638      	mov	r0, r7
  4166e8:	e00c      	b.n	416704 <_strtoul_r+0x74>
  4166ea:	3d30      	subs	r5, #48	; 0x30
  4166ec:	42ab      	cmp	r3, r5
  4166ee:	dd19      	ble.n	416724 <_strtoul_r+0x94>
  4166f0:	2f00      	cmp	r7, #0
  4166f2:	db25      	blt.n	416740 <_strtoul_r+0xb0>
  4166f4:	4540      	cmp	r0, r8
  4166f6:	d823      	bhi.n	416740 <_strtoul_r+0xb0>
  4166f8:	d020      	beq.n	41673c <_strtoul_r+0xac>
  4166fa:	fb09 5000 	mla	r0, r9, r0, r5
  4166fe:	2701      	movs	r7, #1
  416700:	f814 5b01 	ldrb.w	r5, [r4], #1
  416704:	eb0c 0605 	add.w	r6, ip, r5
  416708:	7876      	ldrb	r6, [r6, #1]
  41670a:	f016 0f04 	tst.w	r6, #4
  41670e:	d1ec      	bne.n	4166ea <_strtoul_r+0x5a>
  416710:	f016 0603 	ands.w	r6, r6, #3
  416714:	d006      	beq.n	416724 <_strtoul_r+0x94>
  416716:	2e01      	cmp	r6, #1
  416718:	bf14      	ite	ne
  41671a:	2657      	movne	r6, #87	; 0x57
  41671c:	2637      	moveq	r6, #55	; 0x37
  41671e:	1bad      	subs	r5, r5, r6
  416720:	42ab      	cmp	r3, r5
  416722:	dce5      	bgt.n	4166f0 <_strtoul_r+0x60>
  416724:	2f00      	cmp	r7, #0
  416726:	db1d      	blt.n	416764 <_strtoul_r+0xd4>
  416728:	f1ba 0f00 	cmp.w	sl, #0
  41672c:	d118      	bne.n	416760 <_strtoul_r+0xd0>
  41672e:	b10a      	cbz	r2, 416734 <_strtoul_r+0xa4>
  416730:	b9a7      	cbnz	r7, 41675c <_strtoul_r+0xcc>
  416732:	6011      	str	r1, [r2, #0]
  416734:	b002      	add	sp, #8
  416736:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41673a:	4770      	bx	lr
  41673c:	455d      	cmp	r5, fp
  41673e:	dddc      	ble.n	4166fa <_strtoul_r+0x6a>
  416740:	f04f 37ff 	mov.w	r7, #4294967295
  416744:	e7dc      	b.n	416700 <_strtoul_r+0x70>
  416746:	2d30      	cmp	r5, #48	; 0x30
  416748:	d017      	beq.n	41677a <_strtoul_r+0xea>
  41674a:	2b00      	cmp	r3, #0
  41674c:	d1c1      	bne.n	4166d2 <_strtoul_r+0x42>
  41674e:	230a      	movs	r3, #10
  416750:	4699      	mov	r9, r3
  416752:	f04f 0b05 	mov.w	fp, #5
  416756:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4167ac <_strtoul_r+0x11c>
  41675a:	e7c3      	b.n	4166e4 <_strtoul_r+0x54>
  41675c:	1e61      	subs	r1, r4, #1
  41675e:	e7e8      	b.n	416732 <_strtoul_r+0xa2>
  416760:	4240      	negs	r0, r0
  416762:	e7e4      	b.n	41672e <_strtoul_r+0x9e>
  416764:	9801      	ldr	r0, [sp, #4]
  416766:	2322      	movs	r3, #34	; 0x22
  416768:	6003      	str	r3, [r0, #0]
  41676a:	f04f 30ff 	mov.w	r0, #4294967295
  41676e:	e7de      	b.n	41672e <_strtoul_r+0x9e>
  416770:	1cb4      	adds	r4, r6, #2
  416772:	7875      	ldrb	r5, [r6, #1]
  416774:	f04f 0a01 	mov.w	sl, #1
  416778:	e7a8      	b.n	4166cc <_strtoul_r+0x3c>
  41677a:	7820      	ldrb	r0, [r4, #0]
  41677c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  416780:	2858      	cmp	r0, #88	; 0x58
  416782:	d008      	beq.n	416796 <_strtoul_r+0x106>
  416784:	2b00      	cmp	r3, #0
  416786:	d1a4      	bne.n	4166d2 <_strtoul_r+0x42>
  416788:	2308      	movs	r3, #8
  41678a:	4699      	mov	r9, r3
  41678c:	f04f 0b07 	mov.w	fp, #7
  416790:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  416794:	e7a6      	b.n	4166e4 <_strtoul_r+0x54>
  416796:	2310      	movs	r3, #16
  416798:	7865      	ldrb	r5, [r4, #1]
  41679a:	4699      	mov	r9, r3
  41679c:	f04f 0b0f 	mov.w	fp, #15
  4167a0:	3402      	adds	r4, #2
  4167a2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  4167a6:	e79d      	b.n	4166e4 <_strtoul_r+0x54>
  4167a8:	20000d2c 	.word	0x20000d2c
  4167ac:	19999999 	.word	0x19999999

004167b0 <_strtoull_r>:
  4167b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4167b4:	4c60      	ldr	r4, [pc, #384]	; (416938 <_strtoull_r+0x188>)
  4167b6:	b085      	sub	sp, #20
  4167b8:	f8d4 8000 	ldr.w	r8, [r4]
  4167bc:	9200      	str	r2, [sp, #0]
  4167be:	9101      	str	r1, [sp, #4]
  4167c0:	9003      	str	r0, [sp, #12]
  4167c2:	4699      	mov	r9, r3
  4167c4:	460a      	mov	r2, r1
  4167c6:	e000      	b.n	4167ca <_strtoull_r+0x1a>
  4167c8:	4632      	mov	r2, r6
  4167ca:	4616      	mov	r6, r2
  4167cc:	f816 7b01 	ldrb.w	r7, [r6], #1
  4167d0:	eb08 0307 	add.w	r3, r8, r7
  4167d4:	785b      	ldrb	r3, [r3, #1]
  4167d6:	f003 0308 	and.w	r3, r3, #8
  4167da:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  4167de:	2b00      	cmp	r3, #0
  4167e0:	d1f2      	bne.n	4167c8 <_strtoull_r+0x18>
  4167e2:	2f2d      	cmp	r7, #45	; 0x2d
  4167e4:	d07d      	beq.n	4168e2 <_strtoull_r+0x132>
  4167e6:	2f2b      	cmp	r7, #43	; 0x2b
  4167e8:	bf08      	it	eq
  4167ea:	7857      	ldrbeq	r7, [r2, #1]
  4167ec:	9102      	str	r1, [sp, #8]
  4167ee:	bf08      	it	eq
  4167f0:	1c96      	addeq	r6, r2, #2
  4167f2:	f039 0210 	bics.w	r2, r9, #16
  4167f6:	d055      	beq.n	4168a4 <_strtoull_r+0xf4>
  4167f8:	ea4f 7be9 	mov.w	fp, r9, asr #31
  4167fc:	464a      	mov	r2, r9
  4167fe:	465b      	mov	r3, fp
  416800:	f04f 30ff 	mov.w	r0, #4294967295
  416804:	f04f 31ff 	mov.w	r1, #4294967295
  416808:	f7f7 fe6a 	bl	40e4e0 <__aeabi_uldivmod>
  41680c:	464a      	mov	r2, r9
  41680e:	4604      	mov	r4, r0
  416810:	460d      	mov	r5, r1
  416812:	465b      	mov	r3, fp
  416814:	f04f 30ff 	mov.w	r0, #4294967295
  416818:	f04f 31ff 	mov.w	r1, #4294967295
  41681c:	f7f7 fe60 	bl	40e4e0 <__aeabi_uldivmod>
  416820:	46ca      	mov	sl, r9
  416822:	4694      	mov	ip, r2
  416824:	2300      	movs	r3, #0
  416826:	2000      	movs	r0, #0
  416828:	2100      	movs	r1, #0
  41682a:	e019      	b.n	416860 <_strtoull_r+0xb0>
  41682c:	3f30      	subs	r7, #48	; 0x30
  41682e:	45b9      	cmp	r9, r7
  416830:	dd26      	ble.n	416880 <_strtoull_r+0xd0>
  416832:	2b00      	cmp	r3, #0
  416834:	db33      	blt.n	41689e <_strtoull_r+0xee>
  416836:	428d      	cmp	r5, r1
  416838:	bf08      	it	eq
  41683a:	4284      	cmpeq	r4, r0
  41683c:	d32f      	bcc.n	41689e <_strtoull_r+0xee>
  41683e:	42a9      	cmp	r1, r5
  416840:	bf08      	it	eq
  416842:	42a0      	cmpeq	r0, r4
  416844:	d029      	beq.n	41689a <_strtoull_r+0xea>
  416846:	fb00 f30b 	mul.w	r3, r0, fp
  41684a:	fb0a 3301 	mla	r3, sl, r1, r3
  41684e:	fba0 010a 	umull	r0, r1, r0, sl
  416852:	4419      	add	r1, r3
  416854:	19c0      	adds	r0, r0, r7
  416856:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  41685a:	2301      	movs	r3, #1
  41685c:	f816 7b01 	ldrb.w	r7, [r6], #1
  416860:	eb08 0207 	add.w	r2, r8, r7
  416864:	7852      	ldrb	r2, [r2, #1]
  416866:	f012 0f04 	tst.w	r2, #4
  41686a:	d1df      	bne.n	41682c <_strtoull_r+0x7c>
  41686c:	f012 0203 	ands.w	r2, r2, #3
  416870:	d006      	beq.n	416880 <_strtoull_r+0xd0>
  416872:	2a01      	cmp	r2, #1
  416874:	bf14      	ite	ne
  416876:	2257      	movne	r2, #87	; 0x57
  416878:	2237      	moveq	r2, #55	; 0x37
  41687a:	1abf      	subs	r7, r7, r2
  41687c:	45b9      	cmp	r9, r7
  41687e:	dcd8      	bgt.n	416832 <_strtoull_r+0x82>
  416880:	2b00      	cmp	r3, #0
  416882:	db26      	blt.n	4168d2 <_strtoull_r+0x122>
  416884:	9a02      	ldr	r2, [sp, #8]
  416886:	bb02      	cbnz	r2, 4168ca <_strtoull_r+0x11a>
  416888:	9a00      	ldr	r2, [sp, #0]
  41688a:	b11a      	cbz	r2, 416894 <_strtoull_r+0xe4>
  41688c:	b9db      	cbnz	r3, 4168c6 <_strtoull_r+0x116>
  41688e:	9e01      	ldr	r6, [sp, #4]
  416890:	9b00      	ldr	r3, [sp, #0]
  416892:	601e      	str	r6, [r3, #0]
  416894:	b005      	add	sp, #20
  416896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41689a:	4567      	cmp	r7, ip
  41689c:	ddd3      	ble.n	416846 <_strtoull_r+0x96>
  41689e:	f04f 33ff 	mov.w	r3, #4294967295
  4168a2:	e7db      	b.n	41685c <_strtoull_r+0xac>
  4168a4:	2f30      	cmp	r7, #48	; 0x30
  4168a6:	d021      	beq.n	4168ec <_strtoull_r+0x13c>
  4168a8:	f1b9 0f00 	cmp.w	r9, #0
  4168ac:	d1a4      	bne.n	4167f8 <_strtoull_r+0x48>
  4168ae:	f04f 0c05 	mov.w	ip, #5
  4168b2:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  4168b6:	4d21      	ldr	r5, [pc, #132]	; (41693c <_strtoull_r+0x18c>)
  4168b8:	f04f 0a0a 	mov.w	sl, #10
  4168bc:	f04f 0b00 	mov.w	fp, #0
  4168c0:	f04f 090a 	mov.w	r9, #10
  4168c4:	e7ae      	b.n	416824 <_strtoull_r+0x74>
  4168c6:	3e01      	subs	r6, #1
  4168c8:	e7e2      	b.n	416890 <_strtoull_r+0xe0>
  4168ca:	4240      	negs	r0, r0
  4168cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4168d0:	e7da      	b.n	416888 <_strtoull_r+0xd8>
  4168d2:	9903      	ldr	r1, [sp, #12]
  4168d4:	2222      	movs	r2, #34	; 0x22
  4168d6:	600a      	str	r2, [r1, #0]
  4168d8:	f04f 30ff 	mov.w	r0, #4294967295
  4168dc:	f04f 31ff 	mov.w	r1, #4294967295
  4168e0:	e7d2      	b.n	416888 <_strtoull_r+0xd8>
  4168e2:	2101      	movs	r1, #1
  4168e4:	1c96      	adds	r6, r2, #2
  4168e6:	7857      	ldrb	r7, [r2, #1]
  4168e8:	9102      	str	r1, [sp, #8]
  4168ea:	e782      	b.n	4167f2 <_strtoull_r+0x42>
  4168ec:	7833      	ldrb	r3, [r6, #0]
  4168ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4168f2:	2b58      	cmp	r3, #88	; 0x58
  4168f4:	d010      	beq.n	416918 <_strtoull_r+0x168>
  4168f6:	f1b9 0f00 	cmp.w	r9, #0
  4168fa:	f47f af7d 	bne.w	4167f8 <_strtoull_r+0x48>
  4168fe:	f04f 0c07 	mov.w	ip, #7
  416902:	f04f 34ff 	mov.w	r4, #4294967295
  416906:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  41690a:	f04f 0a08 	mov.w	sl, #8
  41690e:	f04f 0b00 	mov.w	fp, #0
  416912:	f04f 0908 	mov.w	r9, #8
  416916:	e785      	b.n	416824 <_strtoull_r+0x74>
  416918:	7877      	ldrb	r7, [r6, #1]
  41691a:	f04f 0c0f 	mov.w	ip, #15
  41691e:	3602      	adds	r6, #2
  416920:	f04f 34ff 	mov.w	r4, #4294967295
  416924:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  416928:	f04f 0a10 	mov.w	sl, #16
  41692c:	f04f 0b00 	mov.w	fp, #0
  416930:	f04f 0910 	mov.w	r9, #16
  416934:	e776      	b.n	416824 <_strtoull_r+0x74>
  416936:	bf00      	nop
  416938:	20000d2c 	.word	0x20000d2c
  41693c:	19999999 	.word	0x19999999

00416940 <__ssprint_r>:
  416940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416944:	6894      	ldr	r4, [r2, #8]
  416946:	6816      	ldr	r6, [r2, #0]
  416948:	b083      	sub	sp, #12
  41694a:	4692      	mov	sl, r2
  41694c:	4680      	mov	r8, r0
  41694e:	460d      	mov	r5, r1
  416950:	2c00      	cmp	r4, #0
  416952:	d06f      	beq.n	416a34 <__ssprint_r+0xf4>
  416954:	f04f 0b00 	mov.w	fp, #0
  416958:	6808      	ldr	r0, [r1, #0]
  41695a:	688b      	ldr	r3, [r1, #8]
  41695c:	465c      	mov	r4, fp
  41695e:	2c00      	cmp	r4, #0
  416960:	d043      	beq.n	4169ea <__ssprint_r+0xaa>
  416962:	429c      	cmp	r4, r3
  416964:	461f      	mov	r7, r3
  416966:	d345      	bcc.n	4169f4 <__ssprint_r+0xb4>
  416968:	89ab      	ldrh	r3, [r5, #12]
  41696a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41696e:	d044      	beq.n	4169fa <__ssprint_r+0xba>
  416970:	696f      	ldr	r7, [r5, #20]
  416972:	6929      	ldr	r1, [r5, #16]
  416974:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  416978:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  41697c:	ebc1 0900 	rsb	r9, r1, r0
  416980:	1c62      	adds	r2, r4, #1
  416982:	107f      	asrs	r7, r7, #1
  416984:	444a      	add	r2, r9
  416986:	4297      	cmp	r7, r2
  416988:	bf34      	ite	cc
  41698a:	4617      	movcc	r7, r2
  41698c:	463a      	movcs	r2, r7
  41698e:	055b      	lsls	r3, r3, #21
  416990:	d535      	bpl.n	4169fe <__ssprint_r+0xbe>
  416992:	4611      	mov	r1, r2
  416994:	4640      	mov	r0, r8
  416996:	f7f8 f8c5 	bl	40eb24 <_malloc_r>
  41699a:	2800      	cmp	r0, #0
  41699c:	d039      	beq.n	416a12 <__ssprint_r+0xd2>
  41699e:	6929      	ldr	r1, [r5, #16]
  4169a0:	9001      	str	r0, [sp, #4]
  4169a2:	464a      	mov	r2, r9
  4169a4:	f7f8 fb5a 	bl	40f05c <memcpy>
  4169a8:	89aa      	ldrh	r2, [r5, #12]
  4169aa:	9b01      	ldr	r3, [sp, #4]
  4169ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4169b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4169b4:	81aa      	strh	r2, [r5, #12]
  4169b6:	ebc9 0207 	rsb	r2, r9, r7
  4169ba:	eb03 0009 	add.w	r0, r3, r9
  4169be:	616f      	str	r7, [r5, #20]
  4169c0:	612b      	str	r3, [r5, #16]
  4169c2:	6028      	str	r0, [r5, #0]
  4169c4:	60aa      	str	r2, [r5, #8]
  4169c6:	4627      	mov	r7, r4
  4169c8:	46a1      	mov	r9, r4
  4169ca:	464a      	mov	r2, r9
  4169cc:	4659      	mov	r1, fp
  4169ce:	f7fd fe3b 	bl	414648 <memmove>
  4169d2:	f8da 2008 	ldr.w	r2, [sl, #8]
  4169d6:	68ab      	ldr	r3, [r5, #8]
  4169d8:	6828      	ldr	r0, [r5, #0]
  4169da:	1bdb      	subs	r3, r3, r7
  4169dc:	4448      	add	r0, r9
  4169de:	1b14      	subs	r4, r2, r4
  4169e0:	60ab      	str	r3, [r5, #8]
  4169e2:	6028      	str	r0, [r5, #0]
  4169e4:	f8ca 4008 	str.w	r4, [sl, #8]
  4169e8:	b324      	cbz	r4, 416a34 <__ssprint_r+0xf4>
  4169ea:	f8d6 b000 	ldr.w	fp, [r6]
  4169ee:	6874      	ldr	r4, [r6, #4]
  4169f0:	3608      	adds	r6, #8
  4169f2:	e7b4      	b.n	41695e <__ssprint_r+0x1e>
  4169f4:	4627      	mov	r7, r4
  4169f6:	46a1      	mov	r9, r4
  4169f8:	e7e7      	b.n	4169ca <__ssprint_r+0x8a>
  4169fa:	46b9      	mov	r9, r7
  4169fc:	e7e5      	b.n	4169ca <__ssprint_r+0x8a>
  4169fe:	4640      	mov	r0, r8
  416a00:	f7fe fae2 	bl	414fc8 <_realloc_r>
  416a04:	4603      	mov	r3, r0
  416a06:	2800      	cmp	r0, #0
  416a08:	d1d5      	bne.n	4169b6 <__ssprint_r+0x76>
  416a0a:	4640      	mov	r0, r8
  416a0c:	6929      	ldr	r1, [r5, #16]
  416a0e:	f7fd fa6f 	bl	413ef0 <_free_r>
  416a12:	89aa      	ldrh	r2, [r5, #12]
  416a14:	230c      	movs	r3, #12
  416a16:	f8c8 3000 	str.w	r3, [r8]
  416a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  416a1e:	2300      	movs	r3, #0
  416a20:	f04f 30ff 	mov.w	r0, #4294967295
  416a24:	81aa      	strh	r2, [r5, #12]
  416a26:	f8ca 3008 	str.w	r3, [sl, #8]
  416a2a:	f8ca 3004 	str.w	r3, [sl, #4]
  416a2e:	b003      	add	sp, #12
  416a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416a34:	4620      	mov	r0, r4
  416a36:	f8ca 4004 	str.w	r4, [sl, #4]
  416a3a:	b003      	add	sp, #12
  416a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416a40 <_sungetc_r>:
  416a40:	b538      	push	{r3, r4, r5, lr}
  416a42:	1c4b      	adds	r3, r1, #1
  416a44:	4614      	mov	r4, r2
  416a46:	d019      	beq.n	416a7c <_sungetc_r+0x3c>
  416a48:	8992      	ldrh	r2, [r2, #12]
  416a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  416a4c:	f022 0220 	bic.w	r2, r2, #32
  416a50:	b2cd      	uxtb	r5, r1
  416a52:	81a2      	strh	r2, [r4, #12]
  416a54:	b1ab      	cbz	r3, 416a82 <_sungetc_r+0x42>
  416a56:	6862      	ldr	r2, [r4, #4]
  416a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
  416a5a:	429a      	cmp	r2, r3
  416a5c:	da09      	bge.n	416a72 <_sungetc_r+0x32>
  416a5e:	6823      	ldr	r3, [r4, #0]
  416a60:	1e5a      	subs	r2, r3, #1
  416a62:	6022      	str	r2, [r4, #0]
  416a64:	f803 5c01 	strb.w	r5, [r3, #-1]
  416a68:	6863      	ldr	r3, [r4, #4]
  416a6a:	3301      	adds	r3, #1
  416a6c:	4628      	mov	r0, r5
  416a6e:	6063      	str	r3, [r4, #4]
  416a70:	bd38      	pop	{r3, r4, r5, pc}
  416a72:	4621      	mov	r1, r4
  416a74:	f000 f882 	bl	416b7c <__submore>
  416a78:	2800      	cmp	r0, #0
  416a7a:	d0f0      	beq.n	416a5e <_sungetc_r+0x1e>
  416a7c:	f04f 30ff 	mov.w	r0, #4294967295
  416a80:	bd38      	pop	{r3, r4, r5, pc}
  416a82:	6923      	ldr	r3, [r4, #16]
  416a84:	6822      	ldr	r2, [r4, #0]
  416a86:	b12b      	cbz	r3, 416a94 <_sungetc_r+0x54>
  416a88:	4293      	cmp	r3, r2
  416a8a:	d203      	bcs.n	416a94 <_sungetc_r+0x54>
  416a8c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  416a90:	42a8      	cmp	r0, r5
  416a92:	d00f      	beq.n	416ab4 <_sungetc_r+0x74>
  416a94:	4623      	mov	r3, r4
  416a96:	6861      	ldr	r1, [r4, #4]
  416a98:	63a2      	str	r2, [r4, #56]	; 0x38
  416a9a:	f104 0040 	add.w	r0, r4, #64	; 0x40
  416a9e:	2203      	movs	r2, #3
  416aa0:	6320      	str	r0, [r4, #48]	; 0x30
  416aa2:	6362      	str	r2, [r4, #52]	; 0x34
  416aa4:	63e1      	str	r1, [r4, #60]	; 0x3c
  416aa6:	f803 5f42 	strb.w	r5, [r3, #66]!
  416aaa:	2201      	movs	r2, #1
  416aac:	6023      	str	r3, [r4, #0]
  416aae:	4628      	mov	r0, r5
  416ab0:	6062      	str	r2, [r4, #4]
  416ab2:	bd38      	pop	{r3, r4, r5, pc}
  416ab4:	6863      	ldr	r3, [r4, #4]
  416ab6:	3a01      	subs	r2, #1
  416ab8:	3301      	adds	r3, #1
  416aba:	e884 000c 	stmia.w	r4, {r2, r3}
  416abe:	bd38      	pop	{r3, r4, r5, pc}

00416ac0 <__ssrefill_r>:
  416ac0:	b510      	push	{r4, lr}
  416ac2:	460c      	mov	r4, r1
  416ac4:	6b09      	ldr	r1, [r1, #48]	; 0x30
  416ac6:	b169      	cbz	r1, 416ae4 <__ssrefill_r+0x24>
  416ac8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  416acc:	4299      	cmp	r1, r3
  416ace:	d001      	beq.n	416ad4 <__ssrefill_r+0x14>
  416ad0:	f7fd fa0e 	bl	413ef0 <_free_r>
  416ad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  416ad6:	6063      	str	r3, [r4, #4]
  416ad8:	2000      	movs	r0, #0
  416ada:	6320      	str	r0, [r4, #48]	; 0x30
  416adc:	b113      	cbz	r3, 416ae4 <__ssrefill_r+0x24>
  416ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  416ae0:	6023      	str	r3, [r4, #0]
  416ae2:	bd10      	pop	{r4, pc}
  416ae4:	89a2      	ldrh	r2, [r4, #12]
  416ae6:	6923      	ldr	r3, [r4, #16]
  416ae8:	6023      	str	r3, [r4, #0]
  416aea:	f042 0220 	orr.w	r2, r2, #32
  416aee:	2300      	movs	r3, #0
  416af0:	81a2      	strh	r2, [r4, #12]
  416af2:	6063      	str	r3, [r4, #4]
  416af4:	f04f 30ff 	mov.w	r0, #4294967295
  416af8:	bd10      	pop	{r4, pc}
  416afa:	bf00      	nop

00416afc <_sfread_r>:
  416afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416b00:	b083      	sub	sp, #12
  416b02:	fb02 f903 	mul.w	r9, r2, r3
  416b06:	9201      	str	r2, [sp, #4]
  416b08:	469a      	mov	sl, r3
  416b0a:	4607      	mov	r7, r0
  416b0c:	460e      	mov	r6, r1
  416b0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  416b10:	f1b9 0f00 	cmp.w	r9, #0
  416b14:	d026      	beq.n	416b64 <_sfread_r+0x68>
  416b16:	464d      	mov	r5, r9
  416b18:	f04f 0800 	mov.w	r8, #0
  416b1c:	e00e      	b.n	416b3c <_sfread_r+0x40>
  416b1e:	f7f8 fa9d 	bl	40f05c <memcpy>
  416b22:	6822      	ldr	r2, [r4, #0]
  416b24:	f8c4 8004 	str.w	r8, [r4, #4]
  416b28:	445a      	add	r2, fp
  416b2a:	6022      	str	r2, [r4, #0]
  416b2c:	4638      	mov	r0, r7
  416b2e:	4621      	mov	r1, r4
  416b30:	445e      	add	r6, fp
  416b32:	ebcb 0505 	rsb	r5, fp, r5
  416b36:	f7ff ffc3 	bl	416ac0 <__ssrefill_r>
  416b3a:	b9b8      	cbnz	r0, 416b6c <_sfread_r+0x70>
  416b3c:	f8d4 b004 	ldr.w	fp, [r4, #4]
  416b40:	6821      	ldr	r1, [r4, #0]
  416b42:	455d      	cmp	r5, fp
  416b44:	4630      	mov	r0, r6
  416b46:	465a      	mov	r2, fp
  416b48:	d8e9      	bhi.n	416b1e <_sfread_r+0x22>
  416b4a:	462a      	mov	r2, r5
  416b4c:	f7f8 fa86 	bl	40f05c <memcpy>
  416b50:	6862      	ldr	r2, [r4, #4]
  416b52:	6823      	ldr	r3, [r4, #0]
  416b54:	1b52      	subs	r2, r2, r5
  416b56:	442b      	add	r3, r5
  416b58:	4650      	mov	r0, sl
  416b5a:	6062      	str	r2, [r4, #4]
  416b5c:	6023      	str	r3, [r4, #0]
  416b5e:	b003      	add	sp, #12
  416b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416b64:	4648      	mov	r0, r9
  416b66:	b003      	add	sp, #12
  416b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416b6c:	9b01      	ldr	r3, [sp, #4]
  416b6e:	ebc5 0909 	rsb	r9, r5, r9
  416b72:	fbb9 f0f3 	udiv	r0, r9, r3
  416b76:	b003      	add	sp, #12
  416b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416b7c <__submore>:
  416b7c:	f101 0340 	add.w	r3, r1, #64	; 0x40
  416b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416b84:	460c      	mov	r4, r1
  416b86:	6b09      	ldr	r1, [r1, #48]	; 0x30
  416b88:	4299      	cmp	r1, r3
  416b8a:	d014      	beq.n	416bb6 <__submore+0x3a>
  416b8c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  416b8e:	0077      	lsls	r7, r6, #1
  416b90:	463a      	mov	r2, r7
  416b92:	f7fe fa19 	bl	414fc8 <_realloc_r>
  416b96:	4605      	mov	r5, r0
  416b98:	b340      	cbz	r0, 416bec <__submore+0x70>
  416b9a:	eb00 0806 	add.w	r8, r0, r6
  416b9e:	4632      	mov	r2, r6
  416ba0:	4640      	mov	r0, r8
  416ba2:	4629      	mov	r1, r5
  416ba4:	f7f8 fa5a 	bl	40f05c <memcpy>
  416ba8:	f8c4 8000 	str.w	r8, [r4]
  416bac:	6325      	str	r5, [r4, #48]	; 0x30
  416bae:	6367      	str	r7, [r4, #52]	; 0x34
  416bb0:	2000      	movs	r0, #0
  416bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  416bba:	f7f7 ffb3 	bl	40eb24 <_malloc_r>
  416bbe:	b1a8      	cbz	r0, 416bec <__submore+0x70>
  416bc0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  416bc4:	6320      	str	r0, [r4, #48]	; 0x30
  416bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  416bca:	6362      	str	r2, [r4, #52]	; 0x34
  416bcc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  416bd0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  416bd4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  416bd8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  416bdc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  416be0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  416be4:	6020      	str	r0, [r4, #0]
  416be6:	2000      	movs	r0, #0
  416be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416bec:	f04f 30ff 	mov.w	r0, #4294967295
  416bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416bf4 <__swbuf_r>:
  416bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  416bf6:	460d      	mov	r5, r1
  416bf8:	4614      	mov	r4, r2
  416bfa:	4607      	mov	r7, r0
  416bfc:	b110      	cbz	r0, 416c04 <__swbuf_r+0x10>
  416bfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  416c00:	2b00      	cmp	r3, #0
  416c02:	d048      	beq.n	416c96 <__swbuf_r+0xa2>
  416c04:	89a2      	ldrh	r2, [r4, #12]
  416c06:	69a3      	ldr	r3, [r4, #24]
  416c08:	60a3      	str	r3, [r4, #8]
  416c0a:	b293      	uxth	r3, r2
  416c0c:	0718      	lsls	r0, r3, #28
  416c0e:	d538      	bpl.n	416c82 <__swbuf_r+0x8e>
  416c10:	6926      	ldr	r6, [r4, #16]
  416c12:	2e00      	cmp	r6, #0
  416c14:	d035      	beq.n	416c82 <__swbuf_r+0x8e>
  416c16:	0499      	lsls	r1, r3, #18
  416c18:	b2ed      	uxtb	r5, r5
  416c1a:	d515      	bpl.n	416c48 <__swbuf_r+0x54>
  416c1c:	6823      	ldr	r3, [r4, #0]
  416c1e:	6962      	ldr	r2, [r4, #20]
  416c20:	1b9e      	subs	r6, r3, r6
  416c22:	4296      	cmp	r6, r2
  416c24:	da1c      	bge.n	416c60 <__swbuf_r+0x6c>
  416c26:	3601      	adds	r6, #1
  416c28:	68a2      	ldr	r2, [r4, #8]
  416c2a:	1c59      	adds	r1, r3, #1
  416c2c:	3a01      	subs	r2, #1
  416c2e:	60a2      	str	r2, [r4, #8]
  416c30:	6021      	str	r1, [r4, #0]
  416c32:	701d      	strb	r5, [r3, #0]
  416c34:	6963      	ldr	r3, [r4, #20]
  416c36:	42b3      	cmp	r3, r6
  416c38:	d01a      	beq.n	416c70 <__swbuf_r+0x7c>
  416c3a:	89a3      	ldrh	r3, [r4, #12]
  416c3c:	07db      	lsls	r3, r3, #31
  416c3e:	d501      	bpl.n	416c44 <__swbuf_r+0x50>
  416c40:	2d0a      	cmp	r5, #10
  416c42:	d015      	beq.n	416c70 <__swbuf_r+0x7c>
  416c44:	4628      	mov	r0, r5
  416c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  416c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
  416c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  416c4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  416c52:	6663      	str	r3, [r4, #100]	; 0x64
  416c54:	6823      	ldr	r3, [r4, #0]
  416c56:	81a2      	strh	r2, [r4, #12]
  416c58:	6962      	ldr	r2, [r4, #20]
  416c5a:	1b9e      	subs	r6, r3, r6
  416c5c:	4296      	cmp	r6, r2
  416c5e:	dbe2      	blt.n	416c26 <__swbuf_r+0x32>
  416c60:	4638      	mov	r0, r7
  416c62:	4621      	mov	r1, r4
  416c64:	f7fc ffe6 	bl	413c34 <_fflush_r>
  416c68:	b940      	cbnz	r0, 416c7c <__swbuf_r+0x88>
  416c6a:	6823      	ldr	r3, [r4, #0]
  416c6c:	2601      	movs	r6, #1
  416c6e:	e7db      	b.n	416c28 <__swbuf_r+0x34>
  416c70:	4638      	mov	r0, r7
  416c72:	4621      	mov	r1, r4
  416c74:	f7fc ffde 	bl	413c34 <_fflush_r>
  416c78:	2800      	cmp	r0, #0
  416c7a:	d0e3      	beq.n	416c44 <__swbuf_r+0x50>
  416c7c:	f04f 30ff 	mov.w	r0, #4294967295
  416c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  416c82:	4638      	mov	r0, r7
  416c84:	4621      	mov	r1, r4
  416c86:	f7fb fef3 	bl	412a70 <__swsetup_r>
  416c8a:	2800      	cmp	r0, #0
  416c8c:	d1f6      	bne.n	416c7c <__swbuf_r+0x88>
  416c8e:	89a2      	ldrh	r2, [r4, #12]
  416c90:	6926      	ldr	r6, [r4, #16]
  416c92:	b293      	uxth	r3, r2
  416c94:	e7bf      	b.n	416c16 <__swbuf_r+0x22>
  416c96:	f7fc ffe9 	bl	413c6c <__sinit>
  416c9a:	e7b3      	b.n	416c04 <__swbuf_r+0x10>

00416c9c <_wcrtomb_r>:
  416c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416ca0:	461e      	mov	r6, r3
  416ca2:	b086      	sub	sp, #24
  416ca4:	460c      	mov	r4, r1
  416ca6:	4605      	mov	r5, r0
  416ca8:	4617      	mov	r7, r2
  416caa:	4b0f      	ldr	r3, [pc, #60]	; (416ce8 <_wcrtomb_r+0x4c>)
  416cac:	b191      	cbz	r1, 416cd4 <_wcrtomb_r+0x38>
  416cae:	f8d3 8000 	ldr.w	r8, [r3]
  416cb2:	f7fd fbab 	bl	41440c <__locale_charset>
  416cb6:	9600      	str	r6, [sp, #0]
  416cb8:	4603      	mov	r3, r0
  416cba:	4621      	mov	r1, r4
  416cbc:	463a      	mov	r2, r7
  416cbe:	4628      	mov	r0, r5
  416cc0:	47c0      	blx	r8
  416cc2:	1c43      	adds	r3, r0, #1
  416cc4:	d103      	bne.n	416cce <_wcrtomb_r+0x32>
  416cc6:	2200      	movs	r2, #0
  416cc8:	238a      	movs	r3, #138	; 0x8a
  416cca:	6032      	str	r2, [r6, #0]
  416ccc:	602b      	str	r3, [r5, #0]
  416cce:	b006      	add	sp, #24
  416cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416cd4:	681f      	ldr	r7, [r3, #0]
  416cd6:	f7fd fb99 	bl	41440c <__locale_charset>
  416cda:	9600      	str	r6, [sp, #0]
  416cdc:	4603      	mov	r3, r0
  416cde:	4622      	mov	r2, r4
  416ce0:	4628      	mov	r0, r5
  416ce2:	a903      	add	r1, sp, #12
  416ce4:	47b8      	blx	r7
  416ce6:	e7ec      	b.n	416cc2 <_wcrtomb_r+0x26>
  416ce8:	20000d90 	.word	0x20000d90

00416cec <__ascii_wctomb>:
  416cec:	b121      	cbz	r1, 416cf8 <__ascii_wctomb+0xc>
  416cee:	2aff      	cmp	r2, #255	; 0xff
  416cf0:	d804      	bhi.n	416cfc <__ascii_wctomb+0x10>
  416cf2:	700a      	strb	r2, [r1, #0]
  416cf4:	2001      	movs	r0, #1
  416cf6:	4770      	bx	lr
  416cf8:	4608      	mov	r0, r1
  416cfa:	4770      	bx	lr
  416cfc:	238a      	movs	r3, #138	; 0x8a
  416cfe:	6003      	str	r3, [r0, #0]
  416d00:	f04f 30ff 	mov.w	r0, #4294967295
  416d04:	4770      	bx	lr
  416d06:	bf00      	nop

00416d08 <__register_exitproc>:
  416d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  416d0a:	4c27      	ldr	r4, [pc, #156]	; (416da8 <__register_exitproc+0xa0>)
  416d0c:	6826      	ldr	r6, [r4, #0]
  416d0e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  416d12:	b085      	sub	sp, #20
  416d14:	4607      	mov	r7, r0
  416d16:	2c00      	cmp	r4, #0
  416d18:	d041      	beq.n	416d9e <__register_exitproc+0x96>
  416d1a:	6865      	ldr	r5, [r4, #4]
  416d1c:	2d1f      	cmp	r5, #31
  416d1e:	dd1e      	ble.n	416d5e <__register_exitproc+0x56>
  416d20:	4822      	ldr	r0, [pc, #136]	; (416dac <__register_exitproc+0xa4>)
  416d22:	b918      	cbnz	r0, 416d2c <__register_exitproc+0x24>
  416d24:	f04f 30ff 	mov.w	r0, #4294967295
  416d28:	b005      	add	sp, #20
  416d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  416d2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  416d30:	9103      	str	r1, [sp, #12]
  416d32:	9202      	str	r2, [sp, #8]
  416d34:	9301      	str	r3, [sp, #4]
  416d36:	f7f7 fee5 	bl	40eb04 <malloc>
  416d3a:	9903      	ldr	r1, [sp, #12]
  416d3c:	9a02      	ldr	r2, [sp, #8]
  416d3e:	9b01      	ldr	r3, [sp, #4]
  416d40:	4604      	mov	r4, r0
  416d42:	2800      	cmp	r0, #0
  416d44:	d0ee      	beq.n	416d24 <__register_exitproc+0x1c>
  416d46:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  416d4a:	6025      	str	r5, [r4, #0]
  416d4c:	2000      	movs	r0, #0
  416d4e:	6060      	str	r0, [r4, #4]
  416d50:	4605      	mov	r5, r0
  416d52:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  416d56:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  416d5a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  416d5e:	b93f      	cbnz	r7, 416d70 <__register_exitproc+0x68>
  416d60:	1cab      	adds	r3, r5, #2
  416d62:	2000      	movs	r0, #0
  416d64:	3501      	adds	r5, #1
  416d66:	6065      	str	r5, [r4, #4]
  416d68:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  416d6c:	b005      	add	sp, #20
  416d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  416d70:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  416d74:	f04f 0c01 	mov.w	ip, #1
  416d78:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  416d7c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  416d80:	fa0c f205 	lsl.w	r2, ip, r5
  416d84:	4316      	orrs	r6, r2
  416d86:	2f02      	cmp	r7, #2
  416d88:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  416d8c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  416d90:	d1e6      	bne.n	416d60 <__register_exitproc+0x58>
  416d92:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  416d96:	431a      	orrs	r2, r3
  416d98:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  416d9c:	e7e0      	b.n	416d60 <__register_exitproc+0x58>
  416d9e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  416da2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  416da6:	e7b8      	b.n	416d1a <__register_exitproc+0x12>
  416da8:	004191f0 	.word	0x004191f0
  416dac:	0040eb05 	.word	0x0040eb05

00416db0 <_calloc_r>:
  416db0:	b510      	push	{r4, lr}
  416db2:	fb02 f101 	mul.w	r1, r2, r1
  416db6:	f7f7 feb5 	bl	40eb24 <_malloc_r>
  416dba:	4604      	mov	r4, r0
  416dbc:	b168      	cbz	r0, 416dda <_calloc_r+0x2a>
  416dbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  416dc2:	f022 0203 	bic.w	r2, r2, #3
  416dc6:	3a04      	subs	r2, #4
  416dc8:	2a24      	cmp	r2, #36	; 0x24
  416dca:	d818      	bhi.n	416dfe <_calloc_r+0x4e>
  416dcc:	2a13      	cmp	r2, #19
  416dce:	d806      	bhi.n	416dde <_calloc_r+0x2e>
  416dd0:	4603      	mov	r3, r0
  416dd2:	2200      	movs	r2, #0
  416dd4:	601a      	str	r2, [r3, #0]
  416dd6:	605a      	str	r2, [r3, #4]
  416dd8:	609a      	str	r2, [r3, #8]
  416dda:	4620      	mov	r0, r4
  416ddc:	bd10      	pop	{r4, pc}
  416dde:	2300      	movs	r3, #0
  416de0:	2a1b      	cmp	r2, #27
  416de2:	6003      	str	r3, [r0, #0]
  416de4:	6043      	str	r3, [r0, #4]
  416de6:	d90f      	bls.n	416e08 <_calloc_r+0x58>
  416de8:	2a24      	cmp	r2, #36	; 0x24
  416dea:	6083      	str	r3, [r0, #8]
  416dec:	60c3      	str	r3, [r0, #12]
  416dee:	bf05      	ittet	eq
  416df0:	6103      	streq	r3, [r0, #16]
  416df2:	6143      	streq	r3, [r0, #20]
  416df4:	f100 0310 	addne.w	r3, r0, #16
  416df8:	f100 0318 	addeq.w	r3, r0, #24
  416dfc:	e7e9      	b.n	416dd2 <_calloc_r+0x22>
  416dfe:	2100      	movs	r1, #0
  416e00:	f7f8 f9c6 	bl	40f190 <memset>
  416e04:	4620      	mov	r0, r4
  416e06:	bd10      	pop	{r4, pc}
  416e08:	f100 0308 	add.w	r3, r0, #8
  416e0c:	e7e1      	b.n	416dd2 <_calloc_r+0x22>
  416e0e:	bf00      	nop

00416e10 <_fclose_r>:
  416e10:	b570      	push	{r4, r5, r6, lr}
  416e12:	460c      	mov	r4, r1
  416e14:	4605      	mov	r5, r0
  416e16:	b131      	cbz	r1, 416e26 <_fclose_r+0x16>
  416e18:	b110      	cbz	r0, 416e20 <_fclose_r+0x10>
  416e1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  416e1c:	2b00      	cmp	r3, #0
  416e1e:	d02f      	beq.n	416e80 <_fclose_r+0x70>
  416e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  416e24:	b90b      	cbnz	r3, 416e2a <_fclose_r+0x1a>
  416e26:	2000      	movs	r0, #0
  416e28:	bd70      	pop	{r4, r5, r6, pc}
  416e2a:	4628      	mov	r0, r5
  416e2c:	4621      	mov	r1, r4
  416e2e:	f7fc ff01 	bl	413c34 <_fflush_r>
  416e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  416e34:	4606      	mov	r6, r0
  416e36:	b133      	cbz	r3, 416e46 <_fclose_r+0x36>
  416e38:	4628      	mov	r0, r5
  416e3a:	69e1      	ldr	r1, [r4, #28]
  416e3c:	4798      	blx	r3
  416e3e:	2800      	cmp	r0, #0
  416e40:	bfb8      	it	lt
  416e42:	f04f 36ff 	movlt.w	r6, #4294967295
  416e46:	89a3      	ldrh	r3, [r4, #12]
  416e48:	061b      	lsls	r3, r3, #24
  416e4a:	d41c      	bmi.n	416e86 <_fclose_r+0x76>
  416e4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  416e4e:	b141      	cbz	r1, 416e62 <_fclose_r+0x52>
  416e50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  416e54:	4299      	cmp	r1, r3
  416e56:	d002      	beq.n	416e5e <_fclose_r+0x4e>
  416e58:	4628      	mov	r0, r5
  416e5a:	f7fd f849 	bl	413ef0 <_free_r>
  416e5e:	2300      	movs	r3, #0
  416e60:	6323      	str	r3, [r4, #48]	; 0x30
  416e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
  416e64:	b121      	cbz	r1, 416e70 <_fclose_r+0x60>
  416e66:	4628      	mov	r0, r5
  416e68:	f7fd f842 	bl	413ef0 <_free_r>
  416e6c:	2300      	movs	r3, #0
  416e6e:	6463      	str	r3, [r4, #68]	; 0x44
  416e70:	f7fc ff76 	bl	413d60 <__sfp_lock_acquire>
  416e74:	2300      	movs	r3, #0
  416e76:	81a3      	strh	r3, [r4, #12]
  416e78:	f7fc ff74 	bl	413d64 <__sfp_lock_release>
  416e7c:	4630      	mov	r0, r6
  416e7e:	bd70      	pop	{r4, r5, r6, pc}
  416e80:	f7fc fef4 	bl	413c6c <__sinit>
  416e84:	e7cc      	b.n	416e20 <_fclose_r+0x10>
  416e86:	4628      	mov	r0, r5
  416e88:	6921      	ldr	r1, [r4, #16]
  416e8a:	f7fd f831 	bl	413ef0 <_free_r>
  416e8e:	e7dd      	b.n	416e4c <_fclose_r+0x3c>

00416e90 <fclose>:
  416e90:	4b02      	ldr	r3, [pc, #8]	; (416e9c <fclose+0xc>)
  416e92:	4601      	mov	r1, r0
  416e94:	6818      	ldr	r0, [r3, #0]
  416e96:	f7ff bfbb 	b.w	416e10 <_fclose_r>
  416e9a:	bf00      	nop
  416e9c:	20000918 	.word	0x20000918

00416ea0 <_fstat_r>:
  416ea0:	b538      	push	{r3, r4, r5, lr}
  416ea2:	4c08      	ldr	r4, [pc, #32]	; (416ec4 <_fstat_r+0x24>)
  416ea4:	2300      	movs	r3, #0
  416ea6:	4605      	mov	r5, r0
  416ea8:	4608      	mov	r0, r1
  416eaa:	4611      	mov	r1, r2
  416eac:	6023      	str	r3, [r4, #0]
  416eae:	f7f7 f9fb 	bl	40e2a8 <_fstat>
  416eb2:	1c43      	adds	r3, r0, #1
  416eb4:	d000      	beq.n	416eb8 <_fstat_r+0x18>
  416eb6:	bd38      	pop	{r3, r4, r5, pc}
  416eb8:	6823      	ldr	r3, [r4, #0]
  416eba:	2b00      	cmp	r3, #0
  416ebc:	d0fb      	beq.n	416eb6 <_fstat_r+0x16>
  416ebe:	602b      	str	r3, [r5, #0]
  416ec0:	bd38      	pop	{r3, r4, r5, pc}
  416ec2:	bf00      	nop
  416ec4:	20003498 	.word	0x20003498

00416ec8 <rshift>:
  416ec8:	6902      	ldr	r2, [r0, #16]
  416eca:	114b      	asrs	r3, r1, #5
  416ecc:	4293      	cmp	r3, r2
  416ece:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  416ed2:	f100 0814 	add.w	r8, r0, #20
  416ed6:	da28      	bge.n	416f2a <rshift+0x62>
  416ed8:	f011 0c1f 	ands.w	ip, r1, #31
  416edc:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  416ee0:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  416ee4:	d028      	beq.n	416f38 <rshift+0x70>
  416ee6:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  416eea:	1d3b      	adds	r3, r7, #4
  416eec:	429a      	cmp	r2, r3
  416eee:	fa24 f40c 	lsr.w	r4, r4, ip
  416ef2:	f1cc 0120 	rsb	r1, ip, #32
  416ef6:	d935      	bls.n	416f64 <rshift+0x9c>
  416ef8:	4645      	mov	r5, r8
  416efa:	681e      	ldr	r6, [r3, #0]
  416efc:	408e      	lsls	r6, r1
  416efe:	4334      	orrs	r4, r6
  416f00:	f845 4b04 	str.w	r4, [r5], #4
  416f04:	f853 4b04 	ldr.w	r4, [r3], #4
  416f08:	4293      	cmp	r3, r2
  416f0a:	fa24 f40c 	lsr.w	r4, r4, ip
  416f0e:	d3f4      	bcc.n	416efa <rshift+0x32>
  416f10:	1bd3      	subs	r3, r2, r7
  416f12:	3b05      	subs	r3, #5
  416f14:	f023 0303 	bic.w	r3, r3, #3
  416f18:	3304      	adds	r3, #4
  416f1a:	4443      	add	r3, r8
  416f1c:	601c      	str	r4, [r3, #0]
  416f1e:	b104      	cbz	r4, 416f22 <rshift+0x5a>
  416f20:	3304      	adds	r3, #4
  416f22:	ebc8 0303 	rsb	r3, r8, r3
  416f26:	109b      	asrs	r3, r3, #2
  416f28:	e016      	b.n	416f58 <rshift+0x90>
  416f2a:	2300      	movs	r3, #0
  416f2c:	6103      	str	r3, [r0, #16]
  416f2e:	2300      	movs	r3, #0
  416f30:	6143      	str	r3, [r0, #20]
  416f32:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  416f36:	4770      	bx	lr
  416f38:	42ba      	cmp	r2, r7
  416f3a:	d9f6      	bls.n	416f2a <rshift+0x62>
  416f3c:	4641      	mov	r1, r8
  416f3e:	463b      	mov	r3, r7
  416f40:	f853 4b04 	ldr.w	r4, [r3], #4
  416f44:	f841 4b04 	str.w	r4, [r1], #4
  416f48:	429a      	cmp	r2, r3
  416f4a:	d8f9      	bhi.n	416f40 <rshift+0x78>
  416f4c:	43fb      	mvns	r3, r7
  416f4e:	4413      	add	r3, r2
  416f50:	f023 0303 	bic.w	r3, r3, #3
  416f54:	3304      	adds	r3, #4
  416f56:	109b      	asrs	r3, r3, #2
  416f58:	6103      	str	r3, [r0, #16]
  416f5a:	2b00      	cmp	r3, #0
  416f5c:	d0e7      	beq.n	416f2e <rshift+0x66>
  416f5e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  416f62:	4770      	bx	lr
  416f64:	4643      	mov	r3, r8
  416f66:	e7d9      	b.n	416f1c <rshift+0x54>

00416f68 <__gethex>:
  416f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416f6c:	b08b      	sub	sp, #44	; 0x2c
  416f6e:	4688      	mov	r8, r1
  416f70:	9206      	str	r2, [sp, #24]
  416f72:	9309      	str	r3, [sp, #36]	; 0x24
  416f74:	9007      	str	r0, [sp, #28]
  416f76:	f7fd fa53 	bl	414420 <_localeconv_r>
  416f7a:	6800      	ldr	r0, [r0, #0]
  416f7c:	9002      	str	r0, [sp, #8]
  416f7e:	f7f8 fc4b 	bl	40f818 <strlen>
  416f82:	f8d8 3000 	ldr.w	r3, [r8]
  416f86:	9902      	ldr	r1, [sp, #8]
  416f88:	789a      	ldrb	r2, [r3, #2]
  416f8a:	9003      	str	r0, [sp, #12]
  416f8c:	4401      	add	r1, r0
  416f8e:	2a30      	cmp	r2, #48	; 0x30
  416f90:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  416f94:	f103 0502 	add.w	r5, r3, #2
  416f98:	f040 81a6 	bne.w	4172e8 <__gethex+0x380>
  416f9c:	3303      	adds	r3, #3
  416f9e:	2700      	movs	r7, #0
  416fa0:	461d      	mov	r5, r3
  416fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
  416fa6:	2a30      	cmp	r2, #48	; 0x30
  416fa8:	f107 0701 	add.w	r7, r7, #1
  416fac:	d0f8      	beq.n	416fa0 <__gethex+0x38>
  416fae:	4eb1      	ldr	r6, [pc, #708]	; (417274 <__gethex+0x30c>)
  416fb0:	5cb4      	ldrb	r4, [r6, r2]
  416fb2:	2c00      	cmp	r4, #0
  416fb4:	f000 80f4 	beq.w	4171a0 <__gethex+0x238>
  416fb8:	782b      	ldrb	r3, [r5, #0]
  416fba:	f04f 0900 	mov.w	r9, #0
  416fbe:	5cf3      	ldrb	r3, [r6, r3]
  416fc0:	46cb      	mov	fp, r9
  416fc2:	2b00      	cmp	r3, #0
  416fc4:	f000 8198 	beq.w	4172f8 <__gethex+0x390>
  416fc8:	1c6b      	adds	r3, r5, #1
  416fca:	461c      	mov	r4, r3
  416fcc:	3301      	adds	r3, #1
  416fce:	7822      	ldrb	r2, [r4, #0]
  416fd0:	5cb2      	ldrb	r2, [r6, r2]
  416fd2:	2a00      	cmp	r2, #0
  416fd4:	d1f9      	bne.n	416fca <__gethex+0x62>
  416fd6:	4620      	mov	r0, r4
  416fd8:	9902      	ldr	r1, [sp, #8]
  416fda:	9a03      	ldr	r2, [sp, #12]
  416fdc:	f7f8 fc4c 	bl	40f878 <strncmp>
  416fe0:	b1e0      	cbz	r0, 41701c <__gethex+0xb4>
  416fe2:	7823      	ldrb	r3, [r4, #0]
  416fe4:	f1bb 0f00 	cmp.w	fp, #0
  416fe8:	f000 816c 	beq.w	4172c4 <__gethex+0x35c>
  416fec:	ebc4 0b0b 	rsb	fp, r4, fp
  416ff0:	ea4f 028b 	mov.w	r2, fp, lsl #2
  416ff4:	9204      	str	r2, [sp, #16]
  416ff6:	2b50      	cmp	r3, #80	; 0x50
  416ff8:	f000 809d 	beq.w	417136 <__gethex+0x1ce>
  416ffc:	2b70      	cmp	r3, #112	; 0x70
  416ffe:	f000 809a 	beq.w	417136 <__gethex+0x1ce>
  417002:	4623      	mov	r3, r4
  417004:	f8c8 3000 	str.w	r3, [r8]
  417008:	f1b9 0f00 	cmp.w	r9, #0
  41700c:	d00c      	beq.n	417028 <__gethex+0xc0>
  41700e:	2f00      	cmp	r7, #0
  417010:	bf0c      	ite	eq
  417012:	2006      	moveq	r0, #6
  417014:	2000      	movne	r0, #0
  417016:	b00b      	add	sp, #44	; 0x2c
  417018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41701c:	f1bb 0f00 	cmp.w	fp, #0
  417020:	f000 818c 	beq.w	41733c <__gethex+0x3d4>
  417024:	7823      	ldrb	r3, [r4, #0]
  417026:	e7e1      	b.n	416fec <__gethex+0x84>
  417028:	1b63      	subs	r3, r4, r5
  41702a:	3b01      	subs	r3, #1
  41702c:	2b07      	cmp	r3, #7
  41702e:	4649      	mov	r1, r9
  417030:	dd04      	ble.n	41703c <__gethex+0xd4>
  417032:	105b      	asrs	r3, r3, #1
  417034:	2b07      	cmp	r3, #7
  417036:	f101 0101 	add.w	r1, r1, #1
  41703a:	dcfa      	bgt.n	417032 <__gethex+0xca>
  41703c:	9807      	ldr	r0, [sp, #28]
  41703e:	f7fd fb63 	bl	414708 <_Balloc>
  417042:	42a5      	cmp	r5, r4
  417044:	f100 0314 	add.w	r3, r0, #20
  417048:	9005      	str	r0, [sp, #20]
  41704a:	9308      	str	r3, [sp, #32]
  41704c:	f080 81cd 	bcs.w	4173ea <__gethex+0x482>
  417050:	469b      	mov	fp, r3
  417052:	9b03      	ldr	r3, [sp, #12]
  417054:	f04f 0900 	mov.w	r9, #0
  417058:	464f      	mov	r7, r9
  41705a:	f1c3 0c01 	rsb	ip, r3, #1
  41705e:	e00e      	b.n	41707e <__gethex+0x116>
  417060:	2f20      	cmp	r7, #32
  417062:	d05f      	beq.n	417124 <__gethex+0x1bc>
  417064:	463a      	mov	r2, r7
  417066:	3704      	adds	r7, #4
  417068:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  41706c:	5cf3      	ldrb	r3, [r6, r3]
  41706e:	f003 030f 	and.w	r3, r3, #15
  417072:	4093      	lsls	r3, r2
  417074:	4545      	cmp	r5, r8
  417076:	ea49 0903 	orr.w	r9, r9, r3
  41707a:	d21a      	bcs.n	4170b2 <__gethex+0x14a>
  41707c:	4644      	mov	r4, r8
  41707e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  417082:	4553      	cmp	r3, sl
  417084:	f104 38ff 	add.w	r8, r4, #4294967295
  417088:	d1ea      	bne.n	417060 <__gethex+0xf8>
  41708a:	eb08 030c 	add.w	r3, r8, ip
  41708e:	429d      	cmp	r5, r3
  417090:	d8e6      	bhi.n	417060 <__gethex+0xf8>
  417092:	4618      	mov	r0, r3
  417094:	9902      	ldr	r1, [sp, #8]
  417096:	9a03      	ldr	r2, [sp, #12]
  417098:	9301      	str	r3, [sp, #4]
  41709a:	f8cd c000 	str.w	ip, [sp]
  41709e:	f7f8 fbeb 	bl	40f878 <strncmp>
  4170a2:	9b01      	ldr	r3, [sp, #4]
  4170a4:	f8dd c000 	ldr.w	ip, [sp]
  4170a8:	2800      	cmp	r0, #0
  4170aa:	d1d9      	bne.n	417060 <__gethex+0xf8>
  4170ac:	4698      	mov	r8, r3
  4170ae:	4545      	cmp	r5, r8
  4170b0:	d3e4      	bcc.n	41707c <__gethex+0x114>
  4170b2:	f84b 9b04 	str.w	r9, [fp], #4
  4170b6:	9b08      	ldr	r3, [sp, #32]
  4170b8:	9905      	ldr	r1, [sp, #20]
  4170ba:	ebc3 0b0b 	rsb	fp, r3, fp
  4170be:	ea4f 03ab 	mov.w	r3, fp, asr #2
  4170c2:	4648      	mov	r0, r9
  4170c4:	610b      	str	r3, [r1, #16]
  4170c6:	015d      	lsls	r5, r3, #5
  4170c8:	f7fd fbe6 	bl	414898 <__hi0bits>
  4170cc:	9a06      	ldr	r2, [sp, #24]
  4170ce:	6814      	ldr	r4, [r2, #0]
  4170d0:	1a28      	subs	r0, r5, r0
  4170d2:	42a0      	cmp	r0, r4
  4170d4:	f300 80d0 	bgt.w	417278 <__gethex+0x310>
  4170d8:	f2c0 80f7 	blt.w	4172ca <__gethex+0x362>
  4170dc:	2600      	movs	r6, #0
  4170de:	9806      	ldr	r0, [sp, #24]
  4170e0:	9904      	ldr	r1, [sp, #16]
  4170e2:	6883      	ldr	r3, [r0, #8]
  4170e4:	4299      	cmp	r1, r3
  4170e6:	f300 8092 	bgt.w	41720e <__gethex+0x2a6>
  4170ea:	9806      	ldr	r0, [sp, #24]
  4170ec:	9904      	ldr	r1, [sp, #16]
  4170ee:	6843      	ldr	r3, [r0, #4]
  4170f0:	4299      	cmp	r1, r3
  4170f2:	f280 80a2 	bge.w	41723a <__gethex+0x2d2>
  4170f6:	1a5d      	subs	r5, r3, r1
  4170f8:	42ac      	cmp	r4, r5
  4170fa:	f300 80ff 	bgt.w	4172fc <__gethex+0x394>
  4170fe:	68c2      	ldr	r2, [r0, #12]
  417100:	2a02      	cmp	r2, #2
  417102:	f000 8188 	beq.w	417416 <__gethex+0x4ae>
  417106:	2a03      	cmp	r2, #3
  417108:	f000 8156 	beq.w	4173b8 <__gethex+0x450>
  41710c:	2a01      	cmp	r2, #1
  41710e:	f000 8173 	beq.w	4173f8 <__gethex+0x490>
  417112:	9807      	ldr	r0, [sp, #28]
  417114:	9905      	ldr	r1, [sp, #20]
  417116:	f7fd fb1d 	bl	414754 <_Bfree>
  41711a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41711c:	2300      	movs	r3, #0
  41711e:	6013      	str	r3, [r2, #0]
  417120:	2050      	movs	r0, #80	; 0x50
  417122:	e778      	b.n	417016 <__gethex+0xae>
  417124:	f8cb 9000 	str.w	r9, [fp]
  417128:	f04f 0900 	mov.w	r9, #0
  41712c:	f10b 0b04 	add.w	fp, fp, #4
  417130:	464a      	mov	r2, r9
  417132:	2704      	movs	r7, #4
  417134:	e798      	b.n	417068 <__gethex+0x100>
  417136:	7863      	ldrb	r3, [r4, #1]
  417138:	2b2b      	cmp	r3, #43	; 0x2b
  41713a:	f000 8097 	beq.w	41726c <__gethex+0x304>
  41713e:	2b2d      	cmp	r3, #45	; 0x2d
  417140:	d070      	beq.n	417224 <__gethex+0x2bc>
  417142:	1c60      	adds	r0, r4, #1
  417144:	f04f 0b00 	mov.w	fp, #0
  417148:	5cf2      	ldrb	r2, [r6, r3]
  41714a:	494a      	ldr	r1, [pc, #296]	; (417274 <__gethex+0x30c>)
  41714c:	1e53      	subs	r3, r2, #1
  41714e:	2b18      	cmp	r3, #24
  417150:	f63f af57 	bhi.w	417002 <__gethex+0x9a>
  417154:	7843      	ldrb	r3, [r0, #1]
  417156:	5cc9      	ldrb	r1, [r1, r3]
  417158:	f101 3cff 	add.w	ip, r1, #4294967295
  41715c:	f1bc 0f18 	cmp.w	ip, #24
  417160:	f1a2 0210 	sub.w	r2, r2, #16
  417164:	f100 0301 	add.w	r3, r0, #1
  417168:	d812      	bhi.n	417190 <__gethex+0x228>
  41716a:	3002      	adds	r0, #2
  41716c:	f890 c000 	ldrb.w	ip, [r0]
  417170:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  417174:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  417178:	f816 100c 	ldrb.w	r1, [r6, ip]
  41717c:	f101 3cff 	add.w	ip, r1, #4294967295
  417180:	f1bc 0f18 	cmp.w	ip, #24
  417184:	4603      	mov	r3, r0
  417186:	f1a2 0210 	sub.w	r2, r2, #16
  41718a:	f100 0001 	add.w	r0, r0, #1
  41718e:	d9ed      	bls.n	41716c <__gethex+0x204>
  417190:	f1bb 0f00 	cmp.w	fp, #0
  417194:	d000      	beq.n	417198 <__gethex+0x230>
  417196:	4252      	negs	r2, r2
  417198:	9804      	ldr	r0, [sp, #16]
  41719a:	4410      	add	r0, r2
  41719c:	9004      	str	r0, [sp, #16]
  41719e:	e731      	b.n	417004 <__gethex+0x9c>
  4171a0:	4628      	mov	r0, r5
  4171a2:	9902      	ldr	r1, [sp, #8]
  4171a4:	9a03      	ldr	r2, [sp, #12]
  4171a6:	f7f8 fb67 	bl	40f878 <strncmp>
  4171aa:	2800      	cmp	r0, #0
  4171ac:	d13f      	bne.n	41722e <__gethex+0x2c6>
  4171ae:	9803      	ldr	r0, [sp, #12]
  4171b0:	5c2b      	ldrb	r3, [r5, r0]
  4171b2:	5cf2      	ldrb	r2, [r6, r3]
  4171b4:	4604      	mov	r4, r0
  4171b6:	442c      	add	r4, r5
  4171b8:	2a00      	cmp	r2, #0
  4171ba:	f000 8097 	beq.w	4172ec <__gethex+0x384>
  4171be:	2b30      	cmp	r3, #48	; 0x30
  4171c0:	f040 8142 	bne.w	417448 <__gethex+0x4e0>
  4171c4:	1c62      	adds	r2, r4, #1
  4171c6:	4615      	mov	r5, r2
  4171c8:	3201      	adds	r2, #1
  4171ca:	782b      	ldrb	r3, [r5, #0]
  4171cc:	2b30      	cmp	r3, #48	; 0x30
  4171ce:	d0fa      	beq.n	4171c6 <__gethex+0x25e>
  4171d0:	5cf3      	ldrb	r3, [r6, r3]
  4171d2:	f1d3 0901 	rsbs	r9, r3, #1
  4171d6:	46a3      	mov	fp, r4
  4171d8:	bf38      	it	cc
  4171da:	f04f 0900 	movcc.w	r9, #0
  4171de:	2701      	movs	r7, #1
  4171e0:	e6ef      	b.n	416fc2 <__gethex+0x5a>
  4171e2:	4447      	add	r7, r8
  4171e4:	f857 0c04 	ldr.w	r0, [r7, #-4]
  4171e8:	f7fd fb56 	bl	414898 <__hi0bits>
  4171ec:	f1c4 0320 	rsb	r3, r4, #32
  4171f0:	4298      	cmp	r0, r3
  4171f2:	f280 80dd 	bge.w	4173b0 <__gethex+0x448>
  4171f6:	9805      	ldr	r0, [sp, #20]
  4171f8:	2101      	movs	r1, #1
  4171fa:	f7ff fe65 	bl	416ec8 <rshift>
  4171fe:	9806      	ldr	r0, [sp, #24]
  417200:	9904      	ldr	r1, [sp, #16]
  417202:	6883      	ldr	r3, [r0, #8]
  417204:	3101      	adds	r1, #1
  417206:	4299      	cmp	r1, r3
  417208:	9104      	str	r1, [sp, #16]
  41720a:	f340 80d1 	ble.w	4173b0 <__gethex+0x448>
  41720e:	9807      	ldr	r0, [sp, #28]
  417210:	9905      	ldr	r1, [sp, #20]
  417212:	f7fd fa9f 	bl	414754 <_Bfree>
  417216:	9a14      	ldr	r2, [sp, #80]	; 0x50
  417218:	2300      	movs	r3, #0
  41721a:	20a3      	movs	r0, #163	; 0xa3
  41721c:	6013      	str	r3, [r2, #0]
  41721e:	b00b      	add	sp, #44	; 0x2c
  417220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  417224:	f04f 0b01 	mov.w	fp, #1
  417228:	78a3      	ldrb	r3, [r4, #2]
  41722a:	1ca0      	adds	r0, r4, #2
  41722c:	e78c      	b.n	417148 <__gethex+0x1e0>
  41722e:	9404      	str	r4, [sp, #16]
  417230:	782b      	ldrb	r3, [r5, #0]
  417232:	462c      	mov	r4, r5
  417234:	f04f 0901 	mov.w	r9, #1
  417238:	e6dd      	b.n	416ff6 <__gethex+0x8e>
  41723a:	2501      	movs	r5, #1
  41723c:	b166      	cbz	r6, 417258 <__gethex+0x2f0>
  41723e:	9806      	ldr	r0, [sp, #24]
  417240:	68c3      	ldr	r3, [r0, #12]
  417242:	2b02      	cmp	r3, #2
  417244:	f000 808b 	beq.w	41735e <__gethex+0x3f6>
  417248:	2b03      	cmp	r3, #3
  41724a:	f000 808c 	beq.w	417366 <__gethex+0x3fe>
  41724e:	2b01      	cmp	r3, #1
  417250:	f000 80c2 	beq.w	4173d8 <__gethex+0x470>
  417254:	f045 0510 	orr.w	r5, r5, #16
  417258:	9814      	ldr	r0, [sp, #80]	; 0x50
  41725a:	9b05      	ldr	r3, [sp, #20]
  41725c:	6003      	str	r3, [r0, #0]
  41725e:	9909      	ldr	r1, [sp, #36]	; 0x24
  417260:	9b04      	ldr	r3, [sp, #16]
  417262:	600b      	str	r3, [r1, #0]
  417264:	4628      	mov	r0, r5
  417266:	b00b      	add	sp, #44	; 0x2c
  417268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41726c:	f04f 0b00 	mov.w	fp, #0
  417270:	e7da      	b.n	417228 <__gethex+0x2c0>
  417272:	bf00      	nop
  417274:	00419528 	.word	0x00419528
  417278:	1b05      	subs	r5, r0, r4
  41727a:	4629      	mov	r1, r5
  41727c:	9805      	ldr	r0, [sp, #20]
  41727e:	f7fd fe5f 	bl	414f40 <__any_on>
  417282:	2800      	cmp	r0, #0
  417284:	d036      	beq.n	4172f4 <__gethex+0x38c>
  417286:	1e6b      	subs	r3, r5, #1
  417288:	115a      	asrs	r2, r3, #5
  41728a:	9808      	ldr	r0, [sp, #32]
  41728c:	f003 011f 	and.w	r1, r3, #31
  417290:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  417294:	2601      	movs	r6, #1
  417296:	fa06 f101 	lsl.w	r1, r6, r1
  41729a:	4211      	tst	r1, r2
  41729c:	d00a      	beq.n	4172b4 <__gethex+0x34c>
  41729e:	42b3      	cmp	r3, r6
  4172a0:	f340 80a8 	ble.w	4173f4 <__gethex+0x48c>
  4172a4:	9805      	ldr	r0, [sp, #20]
  4172a6:	1ea9      	subs	r1, r5, #2
  4172a8:	f7fd fe4a 	bl	414f40 <__any_on>
  4172ac:	2800      	cmp	r0, #0
  4172ae:	f000 80a1 	beq.w	4173f4 <__gethex+0x48c>
  4172b2:	2603      	movs	r6, #3
  4172b4:	9b04      	ldr	r3, [sp, #16]
  4172b6:	9805      	ldr	r0, [sp, #20]
  4172b8:	442b      	add	r3, r5
  4172ba:	4629      	mov	r1, r5
  4172bc:	9304      	str	r3, [sp, #16]
  4172be:	f7ff fe03 	bl	416ec8 <rshift>
  4172c2:	e70c      	b.n	4170de <__gethex+0x176>
  4172c4:	f8cd b010 	str.w	fp, [sp, #16]
  4172c8:	e695      	b.n	416ff6 <__gethex+0x8e>
  4172ca:	1a25      	subs	r5, r4, r0
  4172cc:	9905      	ldr	r1, [sp, #20]
  4172ce:	9807      	ldr	r0, [sp, #28]
  4172d0:	462a      	mov	r2, r5
  4172d2:	f7fd fc25 	bl	414b20 <__lshift>
  4172d6:	9b04      	ldr	r3, [sp, #16]
  4172d8:	9005      	str	r0, [sp, #20]
  4172da:	1b5b      	subs	r3, r3, r5
  4172dc:	9304      	str	r3, [sp, #16]
  4172de:	f100 0314 	add.w	r3, r0, #20
  4172e2:	9308      	str	r3, [sp, #32]
  4172e4:	2600      	movs	r6, #0
  4172e6:	e6fa      	b.n	4170de <__gethex+0x176>
  4172e8:	2700      	movs	r7, #0
  4172ea:	e660      	b.n	416fae <__gethex+0x46>
  4172ec:	9204      	str	r2, [sp, #16]
  4172ee:	f04f 0901 	mov.w	r9, #1
  4172f2:	e680      	b.n	416ff6 <__gethex+0x8e>
  4172f4:	4606      	mov	r6, r0
  4172f6:	e7dd      	b.n	4172b4 <__gethex+0x34c>
  4172f8:	462c      	mov	r4, r5
  4172fa:	e66c      	b.n	416fd6 <__gethex+0x6e>
  4172fc:	1e6f      	subs	r7, r5, #1
  4172fe:	2e00      	cmp	r6, #0
  417300:	d158      	bne.n	4173b4 <__gethex+0x44c>
  417302:	2f00      	cmp	r7, #0
  417304:	dd04      	ble.n	417310 <__gethex+0x3a8>
  417306:	9805      	ldr	r0, [sp, #20]
  417308:	4639      	mov	r1, r7
  41730a:	f7fd fe19 	bl	414f40 <__any_on>
  41730e:	4606      	mov	r6, r0
  417310:	9808      	ldr	r0, [sp, #32]
  417312:	117b      	asrs	r3, r7, #5
  417314:	2201      	movs	r2, #1
  417316:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41731a:	9805      	ldr	r0, [sp, #20]
  41731c:	f007 071f 	and.w	r7, r7, #31
  417320:	40ba      	lsls	r2, r7
  417322:	421a      	tst	r2, r3
  417324:	4629      	mov	r1, r5
  417326:	bf18      	it	ne
  417328:	f046 0602 	orrne.w	r6, r6, #2
  41732c:	f7ff fdcc 	bl	416ec8 <rshift>
  417330:	9b06      	ldr	r3, [sp, #24]
  417332:	685b      	ldr	r3, [r3, #4]
  417334:	9304      	str	r3, [sp, #16]
  417336:	1b64      	subs	r4, r4, r5
  417338:	2502      	movs	r5, #2
  41733a:	e77f      	b.n	41723c <__gethex+0x2d4>
  41733c:	9903      	ldr	r1, [sp, #12]
  41733e:	5c63      	ldrb	r3, [r4, r1]
  417340:	5cf2      	ldrb	r2, [r6, r3]
  417342:	468b      	mov	fp, r1
  417344:	44a3      	add	fp, r4
  417346:	2a00      	cmp	r2, #0
  417348:	f000 8081 	beq.w	41744e <__gethex+0x4e6>
  41734c:	f10b 0201 	add.w	r2, fp, #1
  417350:	4614      	mov	r4, r2
  417352:	3201      	adds	r2, #1
  417354:	7823      	ldrb	r3, [r4, #0]
  417356:	5cf1      	ldrb	r1, [r6, r3]
  417358:	2900      	cmp	r1, #0
  41735a:	d1f9      	bne.n	417350 <__gethex+0x3e8>
  41735c:	e646      	b.n	416fec <__gethex+0x84>
  41735e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  417360:	f1c2 0201 	rsb	r2, r2, #1
  417364:	9215      	str	r2, [sp, #84]	; 0x54
  417366:	9b15      	ldr	r3, [sp, #84]	; 0x54
  417368:	2b00      	cmp	r3, #0
  41736a:	f43f af73 	beq.w	417254 <__gethex+0x2ec>
  41736e:	9b05      	ldr	r3, [sp, #20]
  417370:	9f08      	ldr	r7, [sp, #32]
  417372:	691e      	ldr	r6, [r3, #16]
  417374:	9b08      	ldr	r3, [sp, #32]
  417376:	ea4f 0886 	mov.w	r8, r6, lsl #2
  41737a:	4447      	add	r7, r8
  41737c:	2000      	movs	r0, #0
  41737e:	e003      	b.n	417388 <__gethex+0x420>
  417380:	429f      	cmp	r7, r3
  417382:	f843 0c04 	str.w	r0, [r3, #-4]
  417386:	d94a      	bls.n	41741e <__gethex+0x4b6>
  417388:	4619      	mov	r1, r3
  41738a:	f853 2b04 	ldr.w	r2, [r3], #4
  41738e:	f1b2 3fff 	cmp.w	r2, #4294967295
  417392:	d0f5      	beq.n	417380 <__gethex+0x418>
  417394:	3201      	adds	r2, #1
  417396:	9f08      	ldr	r7, [sp, #32]
  417398:	600a      	str	r2, [r1, #0]
  41739a:	2d02      	cmp	r5, #2
  41739c:	d04d      	beq.n	41743a <__gethex+0x4d2>
  41739e:	9a05      	ldr	r2, [sp, #20]
  4173a0:	6913      	ldr	r3, [r2, #16]
  4173a2:	429e      	cmp	r6, r3
  4173a4:	f6ff af27 	blt.w	4171f6 <__gethex+0x28e>
  4173a8:	f014 041f 	ands.w	r4, r4, #31
  4173ac:	f47f af19 	bne.w	4171e2 <__gethex+0x27a>
  4173b0:	2521      	movs	r5, #33	; 0x21
  4173b2:	e751      	b.n	417258 <__gethex+0x2f0>
  4173b4:	2601      	movs	r6, #1
  4173b6:	e7ab      	b.n	417310 <__gethex+0x3a8>
  4173b8:	9915      	ldr	r1, [sp, #84]	; 0x54
  4173ba:	2900      	cmp	r1, #0
  4173bc:	f43f aea9 	beq.w	417112 <__gethex+0x1aa>
  4173c0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4173c2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4173c4:	6003      	str	r3, [r0, #0]
  4173c6:	9b05      	ldr	r3, [sp, #20]
  4173c8:	2201      	movs	r2, #1
  4173ca:	611a      	str	r2, [r3, #16]
  4173cc:	9b08      	ldr	r3, [sp, #32]
  4173ce:	601a      	str	r2, [r3, #0]
  4173d0:	9b05      	ldr	r3, [sp, #20]
  4173d2:	600b      	str	r3, [r1, #0]
  4173d4:	2062      	movs	r0, #98	; 0x62
  4173d6:	e61e      	b.n	417016 <__gethex+0xae>
  4173d8:	07b2      	lsls	r2, r6, #30
  4173da:	f57f af3b 	bpl.w	417254 <__gethex+0x2ec>
  4173de:	9908      	ldr	r1, [sp, #32]
  4173e0:	680b      	ldr	r3, [r1, #0]
  4173e2:	4333      	orrs	r3, r6
  4173e4:	07db      	lsls	r3, r3, #31
  4173e6:	d4c2      	bmi.n	41736e <__gethex+0x406>
  4173e8:	e734      	b.n	417254 <__gethex+0x2ec>
  4173ea:	f8dd b020 	ldr.w	fp, [sp, #32]
  4173ee:	f04f 0900 	mov.w	r9, #0
  4173f2:	e65e      	b.n	4170b2 <__gethex+0x14a>
  4173f4:	2602      	movs	r6, #2
  4173f6:	e75d      	b.n	4172b4 <__gethex+0x34c>
  4173f8:	42a5      	cmp	r5, r4
  4173fa:	f47f ae8a 	bne.w	417112 <__gethex+0x1aa>
  4173fe:	2c01      	cmp	r4, #1
  417400:	ddde      	ble.n	4173c0 <__gethex+0x458>
  417402:	1e61      	subs	r1, r4, #1
  417404:	9805      	ldr	r0, [sp, #20]
  417406:	f7fd fd9b 	bl	414f40 <__any_on>
  41740a:	2800      	cmp	r0, #0
  41740c:	f43f ae81 	beq.w	417112 <__gethex+0x1aa>
  417410:	9a06      	ldr	r2, [sp, #24]
  417412:	6853      	ldr	r3, [r2, #4]
  417414:	e7d4      	b.n	4173c0 <__gethex+0x458>
  417416:	9815      	ldr	r0, [sp, #84]	; 0x54
  417418:	2800      	cmp	r0, #0
  41741a:	d0d1      	beq.n	4173c0 <__gethex+0x458>
  41741c:	e679      	b.n	417112 <__gethex+0x1aa>
  41741e:	9805      	ldr	r0, [sp, #20]
  417420:	6883      	ldr	r3, [r0, #8]
  417422:	429e      	cmp	r6, r3
  417424:	da15      	bge.n	417452 <__gethex+0x4ea>
  417426:	9f08      	ldr	r7, [sp, #32]
  417428:	4633      	mov	r3, r6
  41742a:	9805      	ldr	r0, [sp, #20]
  41742c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  417430:	2101      	movs	r1, #1
  417432:	3301      	adds	r3, #1
  417434:	6103      	str	r3, [r0, #16]
  417436:	6151      	str	r1, [r2, #20]
  417438:	e7af      	b.n	41739a <__gethex+0x432>
  41743a:	9906      	ldr	r1, [sp, #24]
  41743c:	680b      	ldr	r3, [r1, #0]
  41743e:	3b01      	subs	r3, #1
  417440:	42a3      	cmp	r3, r4
  417442:	d01c      	beq.n	41747e <__gethex+0x516>
  417444:	2522      	movs	r5, #34	; 0x22
  417446:	e707      	b.n	417258 <__gethex+0x2f0>
  417448:	4613      	mov	r3, r2
  41744a:	4625      	mov	r5, r4
  41744c:	e6c1      	b.n	4171d2 <__gethex+0x26a>
  41744e:	465c      	mov	r4, fp
  417450:	e5cc      	b.n	416fec <__gethex+0x84>
  417452:	6841      	ldr	r1, [r0, #4]
  417454:	9807      	ldr	r0, [sp, #28]
  417456:	3101      	adds	r1, #1
  417458:	f7fd f956 	bl	414708 <_Balloc>
  41745c:	9905      	ldr	r1, [sp, #20]
  41745e:	690b      	ldr	r3, [r1, #16]
  417460:	1c9a      	adds	r2, r3, #2
  417462:	4607      	mov	r7, r0
  417464:	0092      	lsls	r2, r2, #2
  417466:	310c      	adds	r1, #12
  417468:	300c      	adds	r0, #12
  41746a:	f7f7 fdf7 	bl	40f05c <memcpy>
  41746e:	9807      	ldr	r0, [sp, #28]
  417470:	9905      	ldr	r1, [sp, #20]
  417472:	f7fd f96f 	bl	414754 <_Bfree>
  417476:	9705      	str	r7, [sp, #20]
  417478:	693b      	ldr	r3, [r7, #16]
  41747a:	3714      	adds	r7, #20
  41747c:	e7d5      	b.n	41742a <__gethex+0x4c2>
  41747e:	1163      	asrs	r3, r4, #5
  417480:	2201      	movs	r2, #1
  417482:	f004 041f 	and.w	r4, r4, #31
  417486:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  41748a:	40a2      	lsls	r2, r4
  41748c:	421a      	tst	r2, r3
  41748e:	bf14      	ite	ne
  417490:	2521      	movne	r5, #33	; 0x21
  417492:	2522      	moveq	r5, #34	; 0x22
  417494:	e6e0      	b.n	417258 <__gethex+0x2f0>
  417496:	bf00      	nop

00417498 <__hexnan>:
  417498:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41749c:	680b      	ldr	r3, [r1, #0]
  41749e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 417628 <__hexnan+0x190>
  4174a2:	b084      	sub	sp, #16
  4174a4:	4691      	mov	r9, r2
  4174a6:	115a      	asrs	r2, r3, #5
  4174a8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  4174ac:	f013 031f 	ands.w	r3, r3, #31
  4174b0:	9200      	str	r2, [sp, #0]
  4174b2:	9001      	str	r0, [sp, #4]
  4174b4:	bf1c      	itt	ne
  4174b6:	3204      	addne	r2, #4
  4174b8:	9200      	strne	r2, [sp, #0]
  4174ba:	9a01      	ldr	r2, [sp, #4]
  4174bc:	9800      	ldr	r0, [sp, #0]
  4174be:	9303      	str	r3, [sp, #12]
  4174c0:	6811      	ldr	r1, [r2, #0]
  4174c2:	2300      	movs	r3, #0
  4174c4:	f840 3c04 	str.w	r3, [r0, #-4]
  4174c8:	469a      	mov	sl, r3
  4174ca:	461d      	mov	r5, r3
  4174cc:	461e      	mov	r6, r3
  4174ce:	784b      	ldrb	r3, [r1, #1]
  4174d0:	1f07      	subs	r7, r0, #4
  4174d2:	46bc      	mov	ip, r7
  4174d4:	4638      	mov	r0, r7
  4174d6:	9702      	str	r7, [sp, #8]
  4174d8:	b33b      	cbz	r3, 41752a <__hexnan+0x92>
  4174da:	f818 2003 	ldrb.w	r2, [r8, r3]
  4174de:	2a00      	cmp	r2, #0
  4174e0:	d148      	bne.n	417574 <__hexnan+0xdc>
  4174e2:	2b20      	cmp	r3, #32
  4174e4:	d866      	bhi.n	4175b4 <__hexnan+0x11c>
  4174e6:	42ae      	cmp	r6, r5
  4174e8:	dd1b      	ble.n	417522 <__hexnan+0x8a>
  4174ea:	4560      	cmp	r0, ip
  4174ec:	d215      	bcs.n	41751a <__hexnan+0x82>
  4174ee:	f1ba 0f07 	cmp.w	sl, #7
  4174f2:	dc12      	bgt.n	41751a <__hexnan+0x82>
  4174f4:	f1ca 0a08 	rsb	sl, sl, #8
  4174f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  4174fc:	6802      	ldr	r2, [r0, #0]
  4174fe:	f1ca 0b20 	rsb	fp, sl, #32
  417502:	4603      	mov	r3, r0
  417504:	685c      	ldr	r4, [r3, #4]
  417506:	fa04 f70b 	lsl.w	r7, r4, fp
  41750a:	4317      	orrs	r7, r2
  41750c:	fa24 f20a 	lsr.w	r2, r4, sl
  417510:	601f      	str	r7, [r3, #0]
  417512:	f843 2f04 	str.w	r2, [r3, #4]!
  417516:	459c      	cmp	ip, r3
  417518:	d8f4      	bhi.n	417504 <__hexnan+0x6c>
  41751a:	4548      	cmp	r0, r9
  41751c:	d841      	bhi.n	4175a2 <__hexnan+0x10a>
  41751e:	f04f 0a08 	mov.w	sl, #8
  417522:	3101      	adds	r1, #1
  417524:	784b      	ldrb	r3, [r1, #1]
  417526:	2b00      	cmp	r3, #0
  417528:	d1d7      	bne.n	4174da <__hexnan+0x42>
  41752a:	9f02      	ldr	r7, [sp, #8]
  41752c:	2e00      	cmp	r6, #0
  41752e:	d044      	beq.n	4175ba <__hexnan+0x122>
  417530:	4560      	cmp	r0, ip
  417532:	d202      	bcs.n	41753a <__hexnan+0xa2>
  417534:	f1ba 0f07 	cmp.w	sl, #7
  417538:	dd62      	ble.n	417600 <__hexnan+0x168>
  41753a:	4581      	cmp	r9, r0
  41753c:	d242      	bcs.n	4175c4 <__hexnan+0x12c>
  41753e:	464b      	mov	r3, r9
  417540:	f850 2b04 	ldr.w	r2, [r0], #4
  417544:	f843 2b04 	str.w	r2, [r3], #4
  417548:	4287      	cmp	r7, r0
  41754a:	d2f9      	bcs.n	417540 <__hexnan+0xa8>
  41754c:	2200      	movs	r2, #0
  41754e:	f843 2b04 	str.w	r2, [r3], #4
  417552:	429f      	cmp	r7, r3
  417554:	d2fb      	bcs.n	41754e <__hexnan+0xb6>
  417556:	9800      	ldr	r0, [sp, #0]
  417558:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41755c:	b92b      	cbnz	r3, 41756a <__hexnan+0xd2>
  41755e:	45b9      	cmp	r9, r7
  417560:	d041      	beq.n	4175e6 <__hexnan+0x14e>
  417562:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  417566:	2b00      	cmp	r3, #0
  417568:	d0f9      	beq.n	41755e <__hexnan+0xc6>
  41756a:	2005      	movs	r0, #5
  41756c:	b004      	add	sp, #16
  41756e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  417572:	4770      	bx	lr
  417574:	f10a 0a01 	add.w	sl, sl, #1
  417578:	f1ba 0f08 	cmp.w	sl, #8
  41757c:	f106 0601 	add.w	r6, r6, #1
  417580:	dc06      	bgt.n	417590 <__hexnan+0xf8>
  417582:	6803      	ldr	r3, [r0, #0]
  417584:	011b      	lsls	r3, r3, #4
  417586:	f002 020f 	and.w	r2, r2, #15
  41758a:	431a      	orrs	r2, r3
  41758c:	6002      	str	r2, [r0, #0]
  41758e:	e7c8      	b.n	417522 <__hexnan+0x8a>
  417590:	4548      	cmp	r0, r9
  417592:	d9c6      	bls.n	417522 <__hexnan+0x8a>
  417594:	2300      	movs	r3, #0
  417596:	f840 3c04 	str.w	r3, [r0, #-4]
  41759a:	f04f 0a01 	mov.w	sl, #1
  41759e:	3804      	subs	r0, #4
  4175a0:	e7f1      	b.n	417586 <__hexnan+0xee>
  4175a2:	2300      	movs	r3, #0
  4175a4:	f1a0 0c04 	sub.w	ip, r0, #4
  4175a8:	f840 3c04 	str.w	r3, [r0, #-4]
  4175ac:	4635      	mov	r5, r6
  4175ae:	4660      	mov	r0, ip
  4175b0:	469a      	mov	sl, r3
  4175b2:	e7b6      	b.n	417522 <__hexnan+0x8a>
  4175b4:	2b29      	cmp	r3, #41	; 0x29
  4175b6:	9f02      	ldr	r7, [sp, #8]
  4175b8:	d01c      	beq.n	4175f4 <__hexnan+0x15c>
  4175ba:	2004      	movs	r0, #4
  4175bc:	b004      	add	sp, #16
  4175be:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4175c2:	4770      	bx	lr
  4175c4:	9a03      	ldr	r2, [sp, #12]
  4175c6:	2a00      	cmp	r2, #0
  4175c8:	d0c5      	beq.n	417556 <__hexnan+0xbe>
  4175ca:	9b03      	ldr	r3, [sp, #12]
  4175cc:	9800      	ldr	r0, [sp, #0]
  4175ce:	f1c3 0220 	rsb	r2, r3, #32
  4175d2:	f04f 31ff 	mov.w	r1, #4294967295
  4175d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4175da:	fa21 f202 	lsr.w	r2, r1, r2
  4175de:	4013      	ands	r3, r2
  4175e0:	f840 3c04 	str.w	r3, [r0, #-4]
  4175e4:	e7ba      	b.n	41755c <__hexnan+0xc4>
  4175e6:	2301      	movs	r3, #1
  4175e8:	2005      	movs	r0, #5
  4175ea:	603b      	str	r3, [r7, #0]
  4175ec:	b004      	add	sp, #16
  4175ee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4175f2:	4770      	bx	lr
  4175f4:	9a01      	ldr	r2, [sp, #4]
  4175f6:	3102      	adds	r1, #2
  4175f8:	6011      	str	r1, [r2, #0]
  4175fa:	2e00      	cmp	r6, #0
  4175fc:	d198      	bne.n	417530 <__hexnan+0x98>
  4175fe:	e7dc      	b.n	4175ba <__hexnan+0x122>
  417600:	f1ca 0508 	rsb	r5, sl, #8
  417604:	00ad      	lsls	r5, r5, #2
  417606:	6802      	ldr	r2, [r0, #0]
  417608:	f1c5 0620 	rsb	r6, r5, #32
  41760c:	4603      	mov	r3, r0
  41760e:	6859      	ldr	r1, [r3, #4]
  417610:	fa01 f406 	lsl.w	r4, r1, r6
  417614:	4314      	orrs	r4, r2
  417616:	fa21 f205 	lsr.w	r2, r1, r5
  41761a:	601c      	str	r4, [r3, #0]
  41761c:	f843 2f04 	str.w	r2, [r3, #4]!
  417620:	4563      	cmp	r3, ip
  417622:	d3f4      	bcc.n	41760e <__hexnan+0x176>
  417624:	e789      	b.n	41753a <__hexnan+0xa2>
  417626:	bf00      	nop
  417628:	00419528 	.word	0x00419528

0041762c <_isatty_r>:
  41762c:	b538      	push	{r3, r4, r5, lr}
  41762e:	4c07      	ldr	r4, [pc, #28]	; (41764c <_isatty_r+0x20>)
  417630:	2300      	movs	r3, #0
  417632:	4605      	mov	r5, r0
  417634:	4608      	mov	r0, r1
  417636:	6023      	str	r3, [r4, #0]
  417638:	f7f6 fe46 	bl	40e2c8 <_isatty>
  41763c:	1c43      	adds	r3, r0, #1
  41763e:	d000      	beq.n	417642 <_isatty_r+0x16>
  417640:	bd38      	pop	{r3, r4, r5, pc}
  417642:	6823      	ldr	r3, [r4, #0]
  417644:	2b00      	cmp	r3, #0
  417646:	d0fb      	beq.n	417640 <_isatty_r+0x14>
  417648:	602b      	str	r3, [r5, #0]
  41764a:	bd38      	pop	{r3, r4, r5, pc}
  41764c:	20003498 	.word	0x20003498

00417650 <__aeabi_drsub>:
  417650:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  417654:	e002      	b.n	41765c <__adddf3>
  417656:	bf00      	nop

00417658 <__aeabi_dsub>:
  417658:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0041765c <__adddf3>:
  41765c:	b530      	push	{r4, r5, lr}
  41765e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  417662:	ea4f 0543 	mov.w	r5, r3, lsl #1
  417666:	ea94 0f05 	teq	r4, r5
  41766a:	bf08      	it	eq
  41766c:	ea90 0f02 	teqeq	r0, r2
  417670:	bf1f      	itttt	ne
  417672:	ea54 0c00 	orrsne.w	ip, r4, r0
  417676:	ea55 0c02 	orrsne.w	ip, r5, r2
  41767a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  41767e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  417682:	f000 80e2 	beq.w	41784a <__adddf3+0x1ee>
  417686:	ea4f 5454 	mov.w	r4, r4, lsr #21
  41768a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  41768e:	bfb8      	it	lt
  417690:	426d      	neglt	r5, r5
  417692:	dd0c      	ble.n	4176ae <__adddf3+0x52>
  417694:	442c      	add	r4, r5
  417696:	ea80 0202 	eor.w	r2, r0, r2
  41769a:	ea81 0303 	eor.w	r3, r1, r3
  41769e:	ea82 0000 	eor.w	r0, r2, r0
  4176a2:	ea83 0101 	eor.w	r1, r3, r1
  4176a6:	ea80 0202 	eor.w	r2, r0, r2
  4176aa:	ea81 0303 	eor.w	r3, r1, r3
  4176ae:	2d36      	cmp	r5, #54	; 0x36
  4176b0:	bf88      	it	hi
  4176b2:	bd30      	pophi	{r4, r5, pc}
  4176b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4176b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4176bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4176c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4176c4:	d002      	beq.n	4176cc <__adddf3+0x70>
  4176c6:	4240      	negs	r0, r0
  4176c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4176cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4176d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4176d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4176d8:	d002      	beq.n	4176e0 <__adddf3+0x84>
  4176da:	4252      	negs	r2, r2
  4176dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4176e0:	ea94 0f05 	teq	r4, r5
  4176e4:	f000 80a7 	beq.w	417836 <__adddf3+0x1da>
  4176e8:	f1a4 0401 	sub.w	r4, r4, #1
  4176ec:	f1d5 0e20 	rsbs	lr, r5, #32
  4176f0:	db0d      	blt.n	41770e <__adddf3+0xb2>
  4176f2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4176f6:	fa22 f205 	lsr.w	r2, r2, r5
  4176fa:	1880      	adds	r0, r0, r2
  4176fc:	f141 0100 	adc.w	r1, r1, #0
  417700:	fa03 f20e 	lsl.w	r2, r3, lr
  417704:	1880      	adds	r0, r0, r2
  417706:	fa43 f305 	asr.w	r3, r3, r5
  41770a:	4159      	adcs	r1, r3
  41770c:	e00e      	b.n	41772c <__adddf3+0xd0>
  41770e:	f1a5 0520 	sub.w	r5, r5, #32
  417712:	f10e 0e20 	add.w	lr, lr, #32
  417716:	2a01      	cmp	r2, #1
  417718:	fa03 fc0e 	lsl.w	ip, r3, lr
  41771c:	bf28      	it	cs
  41771e:	f04c 0c02 	orrcs.w	ip, ip, #2
  417722:	fa43 f305 	asr.w	r3, r3, r5
  417726:	18c0      	adds	r0, r0, r3
  417728:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  41772c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  417730:	d507      	bpl.n	417742 <__adddf3+0xe6>
  417732:	f04f 0e00 	mov.w	lr, #0
  417736:	f1dc 0c00 	rsbs	ip, ip, #0
  41773a:	eb7e 0000 	sbcs.w	r0, lr, r0
  41773e:	eb6e 0101 	sbc.w	r1, lr, r1
  417742:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  417746:	d31b      	bcc.n	417780 <__adddf3+0x124>
  417748:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  41774c:	d30c      	bcc.n	417768 <__adddf3+0x10c>
  41774e:	0849      	lsrs	r1, r1, #1
  417750:	ea5f 0030 	movs.w	r0, r0, rrx
  417754:	ea4f 0c3c 	mov.w	ip, ip, rrx
  417758:	f104 0401 	add.w	r4, r4, #1
  41775c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  417760:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  417764:	f080 809a 	bcs.w	41789c <__adddf3+0x240>
  417768:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  41776c:	bf08      	it	eq
  41776e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  417772:	f150 0000 	adcs.w	r0, r0, #0
  417776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41777a:	ea41 0105 	orr.w	r1, r1, r5
  41777e:	bd30      	pop	{r4, r5, pc}
  417780:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  417784:	4140      	adcs	r0, r0
  417786:	eb41 0101 	adc.w	r1, r1, r1
  41778a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41778e:	f1a4 0401 	sub.w	r4, r4, #1
  417792:	d1e9      	bne.n	417768 <__adddf3+0x10c>
  417794:	f091 0f00 	teq	r1, #0
  417798:	bf04      	itt	eq
  41779a:	4601      	moveq	r1, r0
  41779c:	2000      	moveq	r0, #0
  41779e:	fab1 f381 	clz	r3, r1
  4177a2:	bf08      	it	eq
  4177a4:	3320      	addeq	r3, #32
  4177a6:	f1a3 030b 	sub.w	r3, r3, #11
  4177aa:	f1b3 0220 	subs.w	r2, r3, #32
  4177ae:	da0c      	bge.n	4177ca <__adddf3+0x16e>
  4177b0:	320c      	adds	r2, #12
  4177b2:	dd08      	ble.n	4177c6 <__adddf3+0x16a>
  4177b4:	f102 0c14 	add.w	ip, r2, #20
  4177b8:	f1c2 020c 	rsb	r2, r2, #12
  4177bc:	fa01 f00c 	lsl.w	r0, r1, ip
  4177c0:	fa21 f102 	lsr.w	r1, r1, r2
  4177c4:	e00c      	b.n	4177e0 <__adddf3+0x184>
  4177c6:	f102 0214 	add.w	r2, r2, #20
  4177ca:	bfd8      	it	le
  4177cc:	f1c2 0c20 	rsble	ip, r2, #32
  4177d0:	fa01 f102 	lsl.w	r1, r1, r2
  4177d4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4177d8:	bfdc      	itt	le
  4177da:	ea41 010c 	orrle.w	r1, r1, ip
  4177de:	4090      	lslle	r0, r2
  4177e0:	1ae4      	subs	r4, r4, r3
  4177e2:	bfa2      	ittt	ge
  4177e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4177e8:	4329      	orrge	r1, r5
  4177ea:	bd30      	popge	{r4, r5, pc}
  4177ec:	ea6f 0404 	mvn.w	r4, r4
  4177f0:	3c1f      	subs	r4, #31
  4177f2:	da1c      	bge.n	41782e <__adddf3+0x1d2>
  4177f4:	340c      	adds	r4, #12
  4177f6:	dc0e      	bgt.n	417816 <__adddf3+0x1ba>
  4177f8:	f104 0414 	add.w	r4, r4, #20
  4177fc:	f1c4 0220 	rsb	r2, r4, #32
  417800:	fa20 f004 	lsr.w	r0, r0, r4
  417804:	fa01 f302 	lsl.w	r3, r1, r2
  417808:	ea40 0003 	orr.w	r0, r0, r3
  41780c:	fa21 f304 	lsr.w	r3, r1, r4
  417810:	ea45 0103 	orr.w	r1, r5, r3
  417814:	bd30      	pop	{r4, r5, pc}
  417816:	f1c4 040c 	rsb	r4, r4, #12
  41781a:	f1c4 0220 	rsb	r2, r4, #32
  41781e:	fa20 f002 	lsr.w	r0, r0, r2
  417822:	fa01 f304 	lsl.w	r3, r1, r4
  417826:	ea40 0003 	orr.w	r0, r0, r3
  41782a:	4629      	mov	r1, r5
  41782c:	bd30      	pop	{r4, r5, pc}
  41782e:	fa21 f004 	lsr.w	r0, r1, r4
  417832:	4629      	mov	r1, r5
  417834:	bd30      	pop	{r4, r5, pc}
  417836:	f094 0f00 	teq	r4, #0
  41783a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  41783e:	bf06      	itte	eq
  417840:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  417844:	3401      	addeq	r4, #1
  417846:	3d01      	subne	r5, #1
  417848:	e74e      	b.n	4176e8 <__adddf3+0x8c>
  41784a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41784e:	bf18      	it	ne
  417850:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  417854:	d029      	beq.n	4178aa <__adddf3+0x24e>
  417856:	ea94 0f05 	teq	r4, r5
  41785a:	bf08      	it	eq
  41785c:	ea90 0f02 	teqeq	r0, r2
  417860:	d005      	beq.n	41786e <__adddf3+0x212>
  417862:	ea54 0c00 	orrs.w	ip, r4, r0
  417866:	bf04      	itt	eq
  417868:	4619      	moveq	r1, r3
  41786a:	4610      	moveq	r0, r2
  41786c:	bd30      	pop	{r4, r5, pc}
  41786e:	ea91 0f03 	teq	r1, r3
  417872:	bf1e      	ittt	ne
  417874:	2100      	movne	r1, #0
  417876:	2000      	movne	r0, #0
  417878:	bd30      	popne	{r4, r5, pc}
  41787a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41787e:	d105      	bne.n	41788c <__adddf3+0x230>
  417880:	0040      	lsls	r0, r0, #1
  417882:	4149      	adcs	r1, r1
  417884:	bf28      	it	cs
  417886:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41788a:	bd30      	pop	{r4, r5, pc}
  41788c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  417890:	bf3c      	itt	cc
  417892:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  417896:	bd30      	popcc	{r4, r5, pc}
  417898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41789c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4178a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4178a4:	f04f 0000 	mov.w	r0, #0
  4178a8:	bd30      	pop	{r4, r5, pc}
  4178aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4178ae:	bf1a      	itte	ne
  4178b0:	4619      	movne	r1, r3
  4178b2:	4610      	movne	r0, r2
  4178b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4178b8:	bf1c      	itt	ne
  4178ba:	460b      	movne	r3, r1
  4178bc:	4602      	movne	r2, r0
  4178be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4178c2:	bf06      	itte	eq
  4178c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4178c8:	ea91 0f03 	teqeq	r1, r3
  4178cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4178d0:	bd30      	pop	{r4, r5, pc}
  4178d2:	bf00      	nop

004178d4 <__aeabi_ui2d>:
  4178d4:	f090 0f00 	teq	r0, #0
  4178d8:	bf04      	itt	eq
  4178da:	2100      	moveq	r1, #0
  4178dc:	4770      	bxeq	lr
  4178de:	b530      	push	{r4, r5, lr}
  4178e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4178e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4178e8:	f04f 0500 	mov.w	r5, #0
  4178ec:	f04f 0100 	mov.w	r1, #0
  4178f0:	e750      	b.n	417794 <__adddf3+0x138>
  4178f2:	bf00      	nop

004178f4 <__aeabi_i2d>:
  4178f4:	f090 0f00 	teq	r0, #0
  4178f8:	bf04      	itt	eq
  4178fa:	2100      	moveq	r1, #0
  4178fc:	4770      	bxeq	lr
  4178fe:	b530      	push	{r4, r5, lr}
  417900:	f44f 6480 	mov.w	r4, #1024	; 0x400
  417904:	f104 0432 	add.w	r4, r4, #50	; 0x32
  417908:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  41790c:	bf48      	it	mi
  41790e:	4240      	negmi	r0, r0
  417910:	f04f 0100 	mov.w	r1, #0
  417914:	e73e      	b.n	417794 <__adddf3+0x138>
  417916:	bf00      	nop

00417918 <__aeabi_f2d>:
  417918:	0042      	lsls	r2, r0, #1
  41791a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  41791e:	ea4f 0131 	mov.w	r1, r1, rrx
  417922:	ea4f 7002 	mov.w	r0, r2, lsl #28
  417926:	bf1f      	itttt	ne
  417928:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  41792c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  417930:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  417934:	4770      	bxne	lr
  417936:	f092 0f00 	teq	r2, #0
  41793a:	bf14      	ite	ne
  41793c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  417940:	4770      	bxeq	lr
  417942:	b530      	push	{r4, r5, lr}
  417944:	f44f 7460 	mov.w	r4, #896	; 0x380
  417948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41794c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  417950:	e720      	b.n	417794 <__adddf3+0x138>
  417952:	bf00      	nop

00417954 <__aeabi_ul2d>:
  417954:	ea50 0201 	orrs.w	r2, r0, r1
  417958:	bf08      	it	eq
  41795a:	4770      	bxeq	lr
  41795c:	b530      	push	{r4, r5, lr}
  41795e:	f04f 0500 	mov.w	r5, #0
  417962:	e00a      	b.n	41797a <__aeabi_l2d+0x16>

00417964 <__aeabi_l2d>:
  417964:	ea50 0201 	orrs.w	r2, r0, r1
  417968:	bf08      	it	eq
  41796a:	4770      	bxeq	lr
  41796c:	b530      	push	{r4, r5, lr}
  41796e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  417972:	d502      	bpl.n	41797a <__aeabi_l2d+0x16>
  417974:	4240      	negs	r0, r0
  417976:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41797a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41797e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  417982:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  417986:	f43f aedc 	beq.w	417742 <__adddf3+0xe6>
  41798a:	f04f 0203 	mov.w	r2, #3
  41798e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  417992:	bf18      	it	ne
  417994:	3203      	addne	r2, #3
  417996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41799a:	bf18      	it	ne
  41799c:	3203      	addne	r2, #3
  41799e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4179a2:	f1c2 0320 	rsb	r3, r2, #32
  4179a6:	fa00 fc03 	lsl.w	ip, r0, r3
  4179aa:	fa20 f002 	lsr.w	r0, r0, r2
  4179ae:	fa01 fe03 	lsl.w	lr, r1, r3
  4179b2:	ea40 000e 	orr.w	r0, r0, lr
  4179b6:	fa21 f102 	lsr.w	r1, r1, r2
  4179ba:	4414      	add	r4, r2
  4179bc:	e6c1      	b.n	417742 <__adddf3+0xe6>
  4179be:	bf00      	nop

004179c0 <__aeabi_dmul>:
  4179c0:	b570      	push	{r4, r5, r6, lr}
  4179c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4179c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4179ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4179ce:	bf1d      	ittte	ne
  4179d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4179d4:	ea94 0f0c 	teqne	r4, ip
  4179d8:	ea95 0f0c 	teqne	r5, ip
  4179dc:	f000 f8de 	bleq	417b9c <__aeabi_dmul+0x1dc>
  4179e0:	442c      	add	r4, r5
  4179e2:	ea81 0603 	eor.w	r6, r1, r3
  4179e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4179ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4179ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4179f2:	bf18      	it	ne
  4179f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4179f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4179fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  417a00:	d038      	beq.n	417a74 <__aeabi_dmul+0xb4>
  417a02:	fba0 ce02 	umull	ip, lr, r0, r2
  417a06:	f04f 0500 	mov.w	r5, #0
  417a0a:	fbe1 e502 	umlal	lr, r5, r1, r2
  417a0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  417a12:	fbe0 e503 	umlal	lr, r5, r0, r3
  417a16:	f04f 0600 	mov.w	r6, #0
  417a1a:	fbe1 5603 	umlal	r5, r6, r1, r3
  417a1e:	f09c 0f00 	teq	ip, #0
  417a22:	bf18      	it	ne
  417a24:	f04e 0e01 	orrne.w	lr, lr, #1
  417a28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  417a2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  417a30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  417a34:	d204      	bcs.n	417a40 <__aeabi_dmul+0x80>
  417a36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  417a3a:	416d      	adcs	r5, r5
  417a3c:	eb46 0606 	adc.w	r6, r6, r6
  417a40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  417a44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  417a48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  417a4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  417a50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  417a54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  417a58:	bf88      	it	hi
  417a5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  417a5e:	d81e      	bhi.n	417a9e <__aeabi_dmul+0xde>
  417a60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  417a64:	bf08      	it	eq
  417a66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  417a6a:	f150 0000 	adcs.w	r0, r0, #0
  417a6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  417a72:	bd70      	pop	{r4, r5, r6, pc}
  417a74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  417a78:	ea46 0101 	orr.w	r1, r6, r1
  417a7c:	ea40 0002 	orr.w	r0, r0, r2
  417a80:	ea81 0103 	eor.w	r1, r1, r3
  417a84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  417a88:	bfc2      	ittt	gt
  417a8a:	ebd4 050c 	rsbsgt	r5, r4, ip
  417a8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  417a92:	bd70      	popgt	{r4, r5, r6, pc}
  417a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  417a98:	f04f 0e00 	mov.w	lr, #0
  417a9c:	3c01      	subs	r4, #1
  417a9e:	f300 80ab 	bgt.w	417bf8 <__aeabi_dmul+0x238>
  417aa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  417aa6:	bfde      	ittt	le
  417aa8:	2000      	movle	r0, #0
  417aaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  417aae:	bd70      	pople	{r4, r5, r6, pc}
  417ab0:	f1c4 0400 	rsb	r4, r4, #0
  417ab4:	3c20      	subs	r4, #32
  417ab6:	da35      	bge.n	417b24 <__aeabi_dmul+0x164>
  417ab8:	340c      	adds	r4, #12
  417aba:	dc1b      	bgt.n	417af4 <__aeabi_dmul+0x134>
  417abc:	f104 0414 	add.w	r4, r4, #20
  417ac0:	f1c4 0520 	rsb	r5, r4, #32
  417ac4:	fa00 f305 	lsl.w	r3, r0, r5
  417ac8:	fa20 f004 	lsr.w	r0, r0, r4
  417acc:	fa01 f205 	lsl.w	r2, r1, r5
  417ad0:	ea40 0002 	orr.w	r0, r0, r2
  417ad4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  417ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  417adc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  417ae0:	fa21 f604 	lsr.w	r6, r1, r4
  417ae4:	eb42 0106 	adc.w	r1, r2, r6
  417ae8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  417aec:	bf08      	it	eq
  417aee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  417af2:	bd70      	pop	{r4, r5, r6, pc}
  417af4:	f1c4 040c 	rsb	r4, r4, #12
  417af8:	f1c4 0520 	rsb	r5, r4, #32
  417afc:	fa00 f304 	lsl.w	r3, r0, r4
  417b00:	fa20 f005 	lsr.w	r0, r0, r5
  417b04:	fa01 f204 	lsl.w	r2, r1, r4
  417b08:	ea40 0002 	orr.w	r0, r0, r2
  417b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  417b10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  417b14:	f141 0100 	adc.w	r1, r1, #0
  417b18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  417b1c:	bf08      	it	eq
  417b1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  417b22:	bd70      	pop	{r4, r5, r6, pc}
  417b24:	f1c4 0520 	rsb	r5, r4, #32
  417b28:	fa00 f205 	lsl.w	r2, r0, r5
  417b2c:	ea4e 0e02 	orr.w	lr, lr, r2
  417b30:	fa20 f304 	lsr.w	r3, r0, r4
  417b34:	fa01 f205 	lsl.w	r2, r1, r5
  417b38:	ea43 0302 	orr.w	r3, r3, r2
  417b3c:	fa21 f004 	lsr.w	r0, r1, r4
  417b40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  417b44:	fa21 f204 	lsr.w	r2, r1, r4
  417b48:	ea20 0002 	bic.w	r0, r0, r2
  417b4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  417b50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  417b54:	bf08      	it	eq
  417b56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  417b5a:	bd70      	pop	{r4, r5, r6, pc}
  417b5c:	f094 0f00 	teq	r4, #0
  417b60:	d10f      	bne.n	417b82 <__aeabi_dmul+0x1c2>
  417b62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  417b66:	0040      	lsls	r0, r0, #1
  417b68:	eb41 0101 	adc.w	r1, r1, r1
  417b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  417b70:	bf08      	it	eq
  417b72:	3c01      	subeq	r4, #1
  417b74:	d0f7      	beq.n	417b66 <__aeabi_dmul+0x1a6>
  417b76:	ea41 0106 	orr.w	r1, r1, r6
  417b7a:	f095 0f00 	teq	r5, #0
  417b7e:	bf18      	it	ne
  417b80:	4770      	bxne	lr
  417b82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  417b86:	0052      	lsls	r2, r2, #1
  417b88:	eb43 0303 	adc.w	r3, r3, r3
  417b8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  417b90:	bf08      	it	eq
  417b92:	3d01      	subeq	r5, #1
  417b94:	d0f7      	beq.n	417b86 <__aeabi_dmul+0x1c6>
  417b96:	ea43 0306 	orr.w	r3, r3, r6
  417b9a:	4770      	bx	lr
  417b9c:	ea94 0f0c 	teq	r4, ip
  417ba0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  417ba4:	bf18      	it	ne
  417ba6:	ea95 0f0c 	teqne	r5, ip
  417baa:	d00c      	beq.n	417bc6 <__aeabi_dmul+0x206>
  417bac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  417bb0:	bf18      	it	ne
  417bb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  417bb6:	d1d1      	bne.n	417b5c <__aeabi_dmul+0x19c>
  417bb8:	ea81 0103 	eor.w	r1, r1, r3
  417bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  417bc0:	f04f 0000 	mov.w	r0, #0
  417bc4:	bd70      	pop	{r4, r5, r6, pc}
  417bc6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  417bca:	bf06      	itte	eq
  417bcc:	4610      	moveq	r0, r2
  417bce:	4619      	moveq	r1, r3
  417bd0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  417bd4:	d019      	beq.n	417c0a <__aeabi_dmul+0x24a>
  417bd6:	ea94 0f0c 	teq	r4, ip
  417bda:	d102      	bne.n	417be2 <__aeabi_dmul+0x222>
  417bdc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  417be0:	d113      	bne.n	417c0a <__aeabi_dmul+0x24a>
  417be2:	ea95 0f0c 	teq	r5, ip
  417be6:	d105      	bne.n	417bf4 <__aeabi_dmul+0x234>
  417be8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  417bec:	bf1c      	itt	ne
  417bee:	4610      	movne	r0, r2
  417bf0:	4619      	movne	r1, r3
  417bf2:	d10a      	bne.n	417c0a <__aeabi_dmul+0x24a>
  417bf4:	ea81 0103 	eor.w	r1, r1, r3
  417bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  417bfc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  417c00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  417c04:	f04f 0000 	mov.w	r0, #0
  417c08:	bd70      	pop	{r4, r5, r6, pc}
  417c0a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  417c0e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  417c12:	bd70      	pop	{r4, r5, r6, pc}

00417c14 <__aeabi_ddiv>:
  417c14:	b570      	push	{r4, r5, r6, lr}
  417c16:	f04f 0cff 	mov.w	ip, #255	; 0xff
  417c1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  417c1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  417c22:	bf1d      	ittte	ne
  417c24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  417c28:	ea94 0f0c 	teqne	r4, ip
  417c2c:	ea95 0f0c 	teqne	r5, ip
  417c30:	f000 f8a7 	bleq	417d82 <__aeabi_ddiv+0x16e>
  417c34:	eba4 0405 	sub.w	r4, r4, r5
  417c38:	ea81 0e03 	eor.w	lr, r1, r3
  417c3c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  417c40:	ea4f 3101 	mov.w	r1, r1, lsl #12
  417c44:	f000 8088 	beq.w	417d58 <__aeabi_ddiv+0x144>
  417c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
  417c4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  417c50:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  417c54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  417c58:	ea4f 2202 	mov.w	r2, r2, lsl #8
  417c5c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  417c60:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  417c64:	ea4f 2600 	mov.w	r6, r0, lsl #8
  417c68:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  417c6c:	429d      	cmp	r5, r3
  417c6e:	bf08      	it	eq
  417c70:	4296      	cmpeq	r6, r2
  417c72:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  417c76:	f504 7440 	add.w	r4, r4, #768	; 0x300
  417c7a:	d202      	bcs.n	417c82 <__aeabi_ddiv+0x6e>
  417c7c:	085b      	lsrs	r3, r3, #1
  417c7e:	ea4f 0232 	mov.w	r2, r2, rrx
  417c82:	1ab6      	subs	r6, r6, r2
  417c84:	eb65 0503 	sbc.w	r5, r5, r3
  417c88:	085b      	lsrs	r3, r3, #1
  417c8a:	ea4f 0232 	mov.w	r2, r2, rrx
  417c8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  417c92:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  417c96:	ebb6 0e02 	subs.w	lr, r6, r2
  417c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  417c9e:	bf22      	ittt	cs
  417ca0:	1ab6      	subcs	r6, r6, r2
  417ca2:	4675      	movcs	r5, lr
  417ca4:	ea40 000c 	orrcs.w	r0, r0, ip
  417ca8:	085b      	lsrs	r3, r3, #1
  417caa:	ea4f 0232 	mov.w	r2, r2, rrx
  417cae:	ebb6 0e02 	subs.w	lr, r6, r2
  417cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
  417cb6:	bf22      	ittt	cs
  417cb8:	1ab6      	subcs	r6, r6, r2
  417cba:	4675      	movcs	r5, lr
  417cbc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  417cc0:	085b      	lsrs	r3, r3, #1
  417cc2:	ea4f 0232 	mov.w	r2, r2, rrx
  417cc6:	ebb6 0e02 	subs.w	lr, r6, r2
  417cca:	eb75 0e03 	sbcs.w	lr, r5, r3
  417cce:	bf22      	ittt	cs
  417cd0:	1ab6      	subcs	r6, r6, r2
  417cd2:	4675      	movcs	r5, lr
  417cd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  417cd8:	085b      	lsrs	r3, r3, #1
  417cda:	ea4f 0232 	mov.w	r2, r2, rrx
  417cde:	ebb6 0e02 	subs.w	lr, r6, r2
  417ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
  417ce6:	bf22      	ittt	cs
  417ce8:	1ab6      	subcs	r6, r6, r2
  417cea:	4675      	movcs	r5, lr
  417cec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  417cf0:	ea55 0e06 	orrs.w	lr, r5, r6
  417cf4:	d018      	beq.n	417d28 <__aeabi_ddiv+0x114>
  417cf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  417cfa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  417cfe:	ea4f 1606 	mov.w	r6, r6, lsl #4
  417d02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  417d06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  417d0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  417d0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  417d12:	d1c0      	bne.n	417c96 <__aeabi_ddiv+0x82>
  417d14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  417d18:	d10b      	bne.n	417d32 <__aeabi_ddiv+0x11e>
  417d1a:	ea41 0100 	orr.w	r1, r1, r0
  417d1e:	f04f 0000 	mov.w	r0, #0
  417d22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  417d26:	e7b6      	b.n	417c96 <__aeabi_ddiv+0x82>
  417d28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  417d2c:	bf04      	itt	eq
  417d2e:	4301      	orreq	r1, r0
  417d30:	2000      	moveq	r0, #0
  417d32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  417d36:	bf88      	it	hi
  417d38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  417d3c:	f63f aeaf 	bhi.w	417a9e <__aeabi_dmul+0xde>
  417d40:	ebb5 0c03 	subs.w	ip, r5, r3
  417d44:	bf04      	itt	eq
  417d46:	ebb6 0c02 	subseq.w	ip, r6, r2
  417d4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  417d4e:	f150 0000 	adcs.w	r0, r0, #0
  417d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  417d56:	bd70      	pop	{r4, r5, r6, pc}
  417d58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  417d5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  417d60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  417d64:	bfc2      	ittt	gt
  417d66:	ebd4 050c 	rsbsgt	r5, r4, ip
  417d6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  417d6e:	bd70      	popgt	{r4, r5, r6, pc}
  417d70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  417d74:	f04f 0e00 	mov.w	lr, #0
  417d78:	3c01      	subs	r4, #1
  417d7a:	e690      	b.n	417a9e <__aeabi_dmul+0xde>
  417d7c:	ea45 0e06 	orr.w	lr, r5, r6
  417d80:	e68d      	b.n	417a9e <__aeabi_dmul+0xde>
  417d82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  417d86:	ea94 0f0c 	teq	r4, ip
  417d8a:	bf08      	it	eq
  417d8c:	ea95 0f0c 	teqeq	r5, ip
  417d90:	f43f af3b 	beq.w	417c0a <__aeabi_dmul+0x24a>
  417d94:	ea94 0f0c 	teq	r4, ip
  417d98:	d10a      	bne.n	417db0 <__aeabi_ddiv+0x19c>
  417d9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  417d9e:	f47f af34 	bne.w	417c0a <__aeabi_dmul+0x24a>
  417da2:	ea95 0f0c 	teq	r5, ip
  417da6:	f47f af25 	bne.w	417bf4 <__aeabi_dmul+0x234>
  417daa:	4610      	mov	r0, r2
  417dac:	4619      	mov	r1, r3
  417dae:	e72c      	b.n	417c0a <__aeabi_dmul+0x24a>
  417db0:	ea95 0f0c 	teq	r5, ip
  417db4:	d106      	bne.n	417dc4 <__aeabi_ddiv+0x1b0>
  417db6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  417dba:	f43f aefd 	beq.w	417bb8 <__aeabi_dmul+0x1f8>
  417dbe:	4610      	mov	r0, r2
  417dc0:	4619      	mov	r1, r3
  417dc2:	e722      	b.n	417c0a <__aeabi_dmul+0x24a>
  417dc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  417dc8:	bf18      	it	ne
  417dca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  417dce:	f47f aec5 	bne.w	417b5c <__aeabi_dmul+0x19c>
  417dd2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  417dd6:	f47f af0d 	bne.w	417bf4 <__aeabi_dmul+0x234>
  417dda:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  417dde:	f47f aeeb 	bne.w	417bb8 <__aeabi_dmul+0x1f8>
  417de2:	e712      	b.n	417c0a <__aeabi_dmul+0x24a>

00417de4 <__gedf2>:
  417de4:	f04f 3cff 	mov.w	ip, #4294967295
  417de8:	e006      	b.n	417df8 <__cmpdf2+0x4>
  417dea:	bf00      	nop

00417dec <__ledf2>:
  417dec:	f04f 0c01 	mov.w	ip, #1
  417df0:	e002      	b.n	417df8 <__cmpdf2+0x4>
  417df2:	bf00      	nop

00417df4 <__cmpdf2>:
  417df4:	f04f 0c01 	mov.w	ip, #1
  417df8:	f84d cd04 	str.w	ip, [sp, #-4]!
  417dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  417e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  417e04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  417e08:	bf18      	it	ne
  417e0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  417e0e:	d01b      	beq.n	417e48 <__cmpdf2+0x54>
  417e10:	b001      	add	sp, #4
  417e12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  417e16:	bf0c      	ite	eq
  417e18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  417e1c:	ea91 0f03 	teqne	r1, r3
  417e20:	bf02      	ittt	eq
  417e22:	ea90 0f02 	teqeq	r0, r2
  417e26:	2000      	moveq	r0, #0
  417e28:	4770      	bxeq	lr
  417e2a:	f110 0f00 	cmn.w	r0, #0
  417e2e:	ea91 0f03 	teq	r1, r3
  417e32:	bf58      	it	pl
  417e34:	4299      	cmppl	r1, r3
  417e36:	bf08      	it	eq
  417e38:	4290      	cmpeq	r0, r2
  417e3a:	bf2c      	ite	cs
  417e3c:	17d8      	asrcs	r0, r3, #31
  417e3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  417e42:	f040 0001 	orr.w	r0, r0, #1
  417e46:	4770      	bx	lr
  417e48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  417e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  417e50:	d102      	bne.n	417e58 <__cmpdf2+0x64>
  417e52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  417e56:	d107      	bne.n	417e68 <__cmpdf2+0x74>
  417e58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  417e5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  417e60:	d1d6      	bne.n	417e10 <__cmpdf2+0x1c>
  417e62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  417e66:	d0d3      	beq.n	417e10 <__cmpdf2+0x1c>
  417e68:	f85d 0b04 	ldr.w	r0, [sp], #4
  417e6c:	4770      	bx	lr
  417e6e:	bf00      	nop

00417e70 <__aeabi_cdrcmple>:
  417e70:	4684      	mov	ip, r0
  417e72:	4610      	mov	r0, r2
  417e74:	4662      	mov	r2, ip
  417e76:	468c      	mov	ip, r1
  417e78:	4619      	mov	r1, r3
  417e7a:	4663      	mov	r3, ip
  417e7c:	e000      	b.n	417e80 <__aeabi_cdcmpeq>
  417e7e:	bf00      	nop

00417e80 <__aeabi_cdcmpeq>:
  417e80:	b501      	push	{r0, lr}
  417e82:	f7ff ffb7 	bl	417df4 <__cmpdf2>
  417e86:	2800      	cmp	r0, #0
  417e88:	bf48      	it	mi
  417e8a:	f110 0f00 	cmnmi.w	r0, #0
  417e8e:	bd01      	pop	{r0, pc}

00417e90 <__aeabi_dcmpeq>:
  417e90:	f84d ed08 	str.w	lr, [sp, #-8]!
  417e94:	f7ff fff4 	bl	417e80 <__aeabi_cdcmpeq>
  417e98:	bf0c      	ite	eq
  417e9a:	2001      	moveq	r0, #1
  417e9c:	2000      	movne	r0, #0
  417e9e:	f85d fb08 	ldr.w	pc, [sp], #8
  417ea2:	bf00      	nop

00417ea4 <__aeabi_dcmplt>:
  417ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
  417ea8:	f7ff ffea 	bl	417e80 <__aeabi_cdcmpeq>
  417eac:	bf34      	ite	cc
  417eae:	2001      	movcc	r0, #1
  417eb0:	2000      	movcs	r0, #0
  417eb2:	f85d fb08 	ldr.w	pc, [sp], #8
  417eb6:	bf00      	nop

00417eb8 <__aeabi_dcmple>:
  417eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  417ebc:	f7ff ffe0 	bl	417e80 <__aeabi_cdcmpeq>
  417ec0:	bf94      	ite	ls
  417ec2:	2001      	movls	r0, #1
  417ec4:	2000      	movhi	r0, #0
  417ec6:	f85d fb08 	ldr.w	pc, [sp], #8
  417eca:	bf00      	nop

00417ecc <__aeabi_dcmpge>:
  417ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
  417ed0:	f7ff ffce 	bl	417e70 <__aeabi_cdrcmple>
  417ed4:	bf94      	ite	ls
  417ed6:	2001      	movls	r0, #1
  417ed8:	2000      	movhi	r0, #0
  417eda:	f85d fb08 	ldr.w	pc, [sp], #8
  417ede:	bf00      	nop

00417ee0 <__aeabi_dcmpgt>:
  417ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
  417ee4:	f7ff ffc4 	bl	417e70 <__aeabi_cdrcmple>
  417ee8:	bf34      	ite	cc
  417eea:	2001      	movcc	r0, #1
  417eec:	2000      	movcs	r0, #0
  417eee:	f85d fb08 	ldr.w	pc, [sp], #8
  417ef2:	bf00      	nop

00417ef4 <__aeabi_d2iz>:
  417ef4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  417ef8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  417efc:	d215      	bcs.n	417f2a <__aeabi_d2iz+0x36>
  417efe:	d511      	bpl.n	417f24 <__aeabi_d2iz+0x30>
  417f00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  417f04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  417f08:	d912      	bls.n	417f30 <__aeabi_d2iz+0x3c>
  417f0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  417f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  417f12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  417f16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  417f1a:	fa23 f002 	lsr.w	r0, r3, r2
  417f1e:	bf18      	it	ne
  417f20:	4240      	negne	r0, r0
  417f22:	4770      	bx	lr
  417f24:	f04f 0000 	mov.w	r0, #0
  417f28:	4770      	bx	lr
  417f2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  417f2e:	d105      	bne.n	417f3c <__aeabi_d2iz+0x48>
  417f30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  417f34:	bf08      	it	eq
  417f36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  417f3a:	4770      	bx	lr
  417f3c:	f04f 0000 	mov.w	r0, #0
  417f40:	4770      	bx	lr
  417f42:	bf00      	nop

00417f44 <__aeabi_d2uiz>:
  417f44:	004a      	lsls	r2, r1, #1
  417f46:	d211      	bcs.n	417f6c <__aeabi_d2uiz+0x28>
  417f48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  417f4c:	d211      	bcs.n	417f72 <__aeabi_d2uiz+0x2e>
  417f4e:	d50d      	bpl.n	417f6c <__aeabi_d2uiz+0x28>
  417f50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  417f54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  417f58:	d40e      	bmi.n	417f78 <__aeabi_d2uiz+0x34>
  417f5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  417f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  417f62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  417f66:	fa23 f002 	lsr.w	r0, r3, r2
  417f6a:	4770      	bx	lr
  417f6c:	f04f 0000 	mov.w	r0, #0
  417f70:	4770      	bx	lr
  417f72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  417f76:	d102      	bne.n	417f7e <__aeabi_d2uiz+0x3a>
  417f78:	f04f 30ff 	mov.w	r0, #4294967295
  417f7c:	4770      	bx	lr
  417f7e:	f04f 0000 	mov.w	r0, #0
  417f82:	4770      	bx	lr

00417f84 <__aeabi_d2f>:
  417f84:	ea4f 0241 	mov.w	r2, r1, lsl #1
  417f88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  417f8c:	bf24      	itt	cs
  417f8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  417f92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  417f96:	d90d      	bls.n	417fb4 <__aeabi_d2f+0x30>
  417f98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  417f9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  417fa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  417fa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  417fa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  417fac:	bf08      	it	eq
  417fae:	f020 0001 	biceq.w	r0, r0, #1
  417fb2:	4770      	bx	lr
  417fb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  417fb8:	d121      	bne.n	417ffe <__aeabi_d2f+0x7a>
  417fba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  417fbe:	bfbc      	itt	lt
  417fc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  417fc4:	4770      	bxlt	lr
  417fc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  417fca:	ea4f 5252 	mov.w	r2, r2, lsr #21
  417fce:	f1c2 0218 	rsb	r2, r2, #24
  417fd2:	f1c2 0c20 	rsb	ip, r2, #32
  417fd6:	fa10 f30c 	lsls.w	r3, r0, ip
  417fda:	fa20 f002 	lsr.w	r0, r0, r2
  417fde:	bf18      	it	ne
  417fe0:	f040 0001 	orrne.w	r0, r0, #1
  417fe4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  417fe8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  417fec:	fa03 fc0c 	lsl.w	ip, r3, ip
  417ff0:	ea40 000c 	orr.w	r0, r0, ip
  417ff4:	fa23 f302 	lsr.w	r3, r3, r2
  417ff8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  417ffc:	e7cc      	b.n	417f98 <__aeabi_d2f+0x14>
  417ffe:	ea7f 5362 	mvns.w	r3, r2, asr #21
  418002:	d107      	bne.n	418014 <__aeabi_d2f+0x90>
  418004:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  418008:	bf1e      	ittt	ne
  41800a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  41800e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  418012:	4770      	bxne	lr
  418014:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  418018:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  41801c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  418020:	4770      	bx	lr
  418022:	bf00      	nop
  418024:	2064654c 	.word	0x2064654c
  418028:	656d6954 	.word	0x656d6954
  41802c:	00000072 	.word	0x00000072
  418030:	6c696146 	.word	0x6c696146
  418034:	74206465 	.word	0x74206465
  418038:	7263206f 	.word	0x7263206f
  41803c:	65746165 	.word	0x65746165
  418040:	64654c20 	.word	0x64654c20
  418044:	6d697420 	.word	0x6d697420
  418048:	74207265 	.word	0x74207265
  41804c:	206b7361 	.word	0x206b7361
  418050:	65646f63 	.word	0x65646f63
  418054:	0d642520 	.word	0x0d642520
  418058:	0000000a 	.word	0x0000000a
  41805c:	4e495551 	.word	0x4e495551
  418060:	20434954 	.word	0x20434954
  418064:	54415453 	.word	0x54415453
  418068:	0a0d2053 	.word	0x0a0d2053
  41806c:	00000000 	.word	0x00000000
  418070:	3a642551 	.word	0x3a642551
  418074:	00000a0d 	.word	0x00000a0d
  418078:	726f4309 	.word	0x726f4309
  41807c:	74707572 	.word	0x74707572
  418080:	63615020 	.word	0x63615020
  418084:	7374656b 	.word	0x7374656b
  418088:	6425203a 	.word	0x6425203a
  41808c:	00000a0d 	.word	0x00000a0d
  418090:	6f724409 	.word	0x6f724409
  418094:	64657070 	.word	0x64657070
  418098:	74794220 	.word	0x74794220
  41809c:	203a7365 	.word	0x203a7365
  4180a0:	64252020 	.word	0x64252020
  4180a4:	00000a0d 	.word	0x00000a0d
  4180a8:	20554d49 	.word	0x20554d49
  4180ac:	54415453 	.word	0x54415453
  4180b0:	0a0d2053 	.word	0x0a0d2053
  4180b4:	00000000 	.word	0x00000000
  4180b8:	25554d49 	.word	0x25554d49
  4180bc:	0a0d3a64 	.word	0x0a0d3a64
  4180c0:	00000000 	.word	0x00000000
  4180c4:	554d4909 	.word	0x554d4909
  4180c8:	65725020 	.word	0x65725020
  4180cc:	746e6573 	.word	0x746e6573
  4180d0:	6425203a 	.word	0x6425203a
  4180d4:	00000a0d 	.word	0x00000a0d
  4180d8:	554d4909 	.word	0x554d4909
  4180dc:	6e6f4320 	.word	0x6e6f4320
  4180e0:	7463656e 	.word	0x7463656e
  4180e4:	203a6465 	.word	0x203a6465
  4180e8:	0a0d6425 	.word	0x0a0d6425
  4180ec:	00000000 	.word	0x00000000
  4180f0:	6f724409 	.word	0x6f724409
  4180f4:	64657070 	.word	0x64657070
  4180f8:	63615020 	.word	0x63615020
  4180fc:	7374656b 	.word	0x7374656b
  418100:	6425203a 	.word	0x6425203a
  418104:	00000a0d 	.word	0x00000a0d
  418108:	65764109 	.word	0x65764109
  41810c:	65676172 	.word	0x65676172
  418110:	20785220 	.word	0x20785220
  418114:	65746e69 	.word	0x65746e69
  418118:	6c617672 	.word	0x6c617672
  41811c:	63697428 	.word	0x63697428
  418120:	3a29736b 	.word	0x3a29736b
  418124:	0d642520 	.word	0x0d642520
  418128:	0000000a 	.word	0x0000000a
  41812c:	63615009 	.word	0x63615009
  418130:	2074656b 	.word	0x2074656b
  418134:	43207852 	.word	0x43207852
  418138:	746e756f 	.word	0x746e756f
  41813c:	2020203a 	.word	0x2020203a
  418140:	0a0d6425 	.word	0x0a0d6425
  418144:	00000000 	.word	0x00000000
  418148:	61746f54 	.word	0x61746f54
  41814c:	7942206c 	.word	0x7942206c
  418150:	20736574 	.word	0x20736574
  418154:	74697257 	.word	0x74697257
  418158:	3a6e6574 	.word	0x3a6e6574
  41815c:	0d642520 	.word	0x0d642520
  418160:	0000000a 	.word	0x0000000a
  418164:	61746f54 	.word	0x61746f54
  418168:	7246206c 	.word	0x7246206c
  41816c:	73656d61 	.word	0x73656d61
  418170:	69725720 	.word	0x69725720
  418174:	6e657474 	.word	0x6e657474
  418178:	6425203a 	.word	0x6425203a
  41817c:	000a0d20 	.word	0x000a0d20
  418180:	75657551 	.word	0x75657551
  418184:	4d206465 	.word	0x4d206465
  418188:	61737365 	.word	0x61737365
  41818c:	3a736567 	.word	0x3a736567
  418190:	0d642520 	.word	0x0d642520
  418194:	0000000a 	.word	0x0000000a
  418198:	202d2d2d 	.word	0x202d2d2d
  41819c:	6b736174 	.word	0x6b736174
  4181a0:	20232320 	.word	0x20232320
  4181a4:	00007525 	.word	0x00007525
  4181a8:	61434453 	.word	0x61434453
  4181ac:	65546472 	.word	0x65546472
  4181b0:	0a0d7473 	.word	0x0a0d7473
  4181b4:	00000000 	.word	0x00000000
  4181b8:	65636572 	.word	0x65636572
  4181bc:	64657669 	.word	0x64657669
  4181c0:	65687420 	.word	0x65687420
  4181c4:	20445320 	.word	0x20445320
  4181c8:	64726163 	.word	0x64726163
  4181cc:	73657420 	.word	0x73657420
  4181d0:	6f632074 	.word	0x6f632074
  4181d4:	6e616d6d 	.word	0x6e616d6d
  4181d8:	000a0d64 	.word	0x000a0d64
  4181dc:	61746164 	.word	0x61746164
  4181e0:	72616f42 	.word	0x72616f42
  4181e4:	69704764 	.word	0x69704764
  4181e8:	7365546f 	.word	0x7365546f
  4181ec:	000a0d74 	.word	0x000a0d74
  4181f0:	65636572 	.word	0x65636572
  4181f4:	64657669 	.word	0x64657669
  4181f8:	65687420 	.word	0x65687420
  4181fc:	49504720 	.word	0x49504720
  418200:	6574204f 	.word	0x6574204f
  418204:	63207473 	.word	0x63207473
  418208:	616d6d6f 	.word	0x616d6d6f
  41820c:	0a0d646e 	.word	0x0a0d646e
  418210:	00000000 	.word	0x00000000
  418214:	20454c42 	.word	0x20454c42
  418218:	74736554 	.word	0x74736554
  41821c:	00000a0d 	.word	0x00000a0d
  418220:	72617453 	.word	0x72617453
  418224:	756d4974 	.word	0x756d4974
  418228:	000a0d73 	.word	0x000a0d73
  41822c:	72617473 	.word	0x72617473
  418230:	6f632074 	.word	0x6f632074
  418234:	6e616d6d 	.word	0x6e616d6d
  418238:	73492064 	.word	0x73492064
  41823c:	64657573 	.word	0x64657573
  418240:	00000a0d 	.word	0x00000a0d
  418244:	706f7453 	.word	0x706f7453
  418248:	73756d49 	.word	0x73756d49
  41824c:	00000a0d 	.word	0x00000a0d
  418250:	706f7473 	.word	0x706f7473
  418254:	6d6f6320 	.word	0x6d6f6320
  418258:	646e616d 	.word	0x646e616d
  41825c:	73736920 	.word	0x73736920
  418260:	0d646575 	.word	0x0d646575
  418264:	0000000a 	.word	0x0000000a
  418268:	52746573 	.word	0x52746573
  41826c:	4c327473 	.word	0x4c327473
  418270:	0a0d776f 	.word	0x0a0d776f
  418274:	00000000 	.word	0x00000000
  418278:	206e6950 	.word	0x206e6950
  41827c:	20746573 	.word	0x20746573
  418280:	0d776f6c 	.word	0x0d776f6c
  418284:	0000000a 	.word	0x0000000a
  418288:	52746573 	.word	0x52746573
  41828c:	48327473 	.word	0x48327473
  418290:	0d686769 	.word	0x0d686769
  418294:	0000000a 	.word	0x0000000a
  418298:	206e6950 	.word	0x206e6950
  41829c:	20746573 	.word	0x20746573
  4182a0:	68676968 	.word	0x68676968
  4182a4:	00000a0d 	.word	0x00000a0d
  4182a8:	42747372 	.word	0x42747372
  4182ac:	0a0d454c 	.word	0x0a0d454c
  4182b0:	00000000 	.word	0x00000000
  4182b4:	206e6950 	.word	0x206e6950
  4182b8:	65736572 	.word	0x65736572
  4182bc:	000a0d74 	.word	0x000a0d74
  4182c0:	61736964 	.word	0x61736964
  4182c4:	55656c62 	.word	0x55656c62
  4182c8:	73545241 	.word	0x73545241
  4182cc:	00000a0d 	.word	0x00000a0d
  4182d0:	54524155 	.word	0x54524155
  4182d4:	65732073 	.word	0x65732073
  4182d8:	73612074 	.word	0x73612074
  4182dc:	67694820 	.word	0x67694820
  4182e0:	6d692068 	.word	0x6d692068
  4182e4:	61646570 	.word	0x61646570
  4182e8:	0d65636e 	.word	0x0d65636e
  4182ec:	0000000a 	.word	0x0000000a
  4182f0:	54746573 	.word	0x54746573
  4182f4:	00656d69 	.word	0x00656d69
  4182f8:	000a0d3f 	.word	0x000a0d3f
  4182fc:	44444548 	.word	0x44444548
  418300:	204f4b4f 	.word	0x204f4b4f
  418304:	49415242 	.word	0x49415242
  418308:	4150204e 	.word	0x4150204e
  41830c:	25204b43 	.word	0x25204b43
  418310:	000a0d73 	.word	0x000a0d73
  418314:	392e3056 	.word	0x392e3056
  418318:	00000000 	.word	0x00000000
  41831c:	4c495542 	.word	0x4c495542
  418320:	41442044 	.word	0x41442044
  418324:	203a4554 	.word	0x203a4554
  418328:	25207325 	.word	0x25207325
  41832c:	000a0d73 	.word	0x000a0d73
  418330:	2074634f 	.word	0x2074634f
  418334:	32203033 	.word	0x32203033
  418338:	00353130 	.word	0x00353130
  41833c:	343a3930 	.word	0x343a3930
  418340:	36333a36 	.word	0x36333a36
  418344:	00000000 	.word	0x00000000
  418348:	54495553 	.word	0x54495553
  41834c:	4d554e20 	.word	0x4d554e20
  418350:	3a524542 	.word	0x3a524542
  418354:	0d732520 	.word	0x0d732520
  418358:	0000000a 	.word	0x0000000a
  41835c:	54495553 	.word	0x54495553
  418360:	4d495420 	.word	0x4d495420
  418364:	25203a45 	.word	0x25203a45
  418368:	0a0d2073 	.word	0x0a0d2073
  41836c:	00000000 	.word	0x00000000
  418370:	73756c66 	.word	0x73756c66
  418374:	72615568 	.word	0x72615568
  418378:	0a0d7374 	.word	0x0a0d7374
  41837c:	00000000 	.word	0x00000000
  418380:	53746567 	.word	0x53746567
  418384:	73746174 	.word	0x73746174
  418388:	00000a0d 	.word	0x00000a0d
  41838c:	65736572 	.word	0x65736572
  418390:	000a0d74 	.word	0x000a0d74
  418394:	65636552 	.word	0x65636552
  418398:	64657669 	.word	0x64657669
  41839c:	6b6e7520 	.word	0x6b6e7520
  4183a0:	6e776f6e 	.word	0x6e776f6e
  4183a4:	6d6f6320 	.word	0x6d6f6320
  4183a8:	646e616d 	.word	0x646e616d
  4183ac:	7325203a 	.word	0x7325203a
  4183b0:	000a0d20 	.word	0x000a0d20
  4183b4:	252d6425 	.word	0x252d6425
  4183b8:	64252d64 	.word	0x64252d64
  4183bc:	2d64252d 	.word	0x2d64252d
  4183c0:	253a6425 	.word	0x253a6425
  4183c4:	64253a64 	.word	0x64253a64
  4183c8:	00000a0d 	.word	0x00000a0d
  4183cc:	64323025 	.word	0x64323025
  4183d0:	3230253a 	.word	0x3230253a
  4183d4:	30253a64 	.word	0x30253a64
  4183d8:	00006432 	.word	0x00006432
  4183dc:	656c6966 	.word	0x656c6966
  4183e0:	6e797320 	.word	0x6e797320
  4183e4:	61662063 	.word	0x61662063
  4183e8:	64656c69 	.word	0x64656c69
  4183ec:	74697720 	.word	0x74697720
  4183f0:	6f632068 	.word	0x6f632068
  4183f4:	25206564 	.word	0x25206564
  4183f8:	000a0d64 	.word	0x000a0d64
  4183fc:	0a0d6425 	.word	0x0a0d6425
  418400:	00000000 	.word	0x00000000
  418404:	64353025 	.word	0x64353025
  418408:	00000a0d 	.word	0x00000a0d
  41840c:	73253a30 	.word	0x73253a30
  418410:	766f4d5f 	.word	0x766f4d5f
  418414:	6e656d65 	.word	0x6e656d65
  418418:	676f4c74 	.word	0x676f4c74
  41841c:	64353025 	.word	0x64353025
  418420:	7673632e 	.word	0x7673632e
  418424:	00000000 	.word	0x00000000
  418428:	20676f6c 	.word	0x20676f6c
  41842c:	6e65706f 	.word	0x6e65706f
  418430:	00000a0d 	.word	0x00000a0d
  418434:	20676f6c 	.word	0x20676f6c
  418438:	6c696166 	.word	0x6c696166
  41843c:	74206465 	.word	0x74206465
  418440:	706f206f 	.word	0x706f206f
  418444:	0a0d6e65 	.word	0x0a0d6e65
  418448:	00000000 	.word	0x00000000
  41844c:	6f6c3a30 	.word	0x6f6c3a30
  418450:	646e4967 	.word	0x646e4967
  418454:	642e7865 	.word	0x642e7865
  418458:	00007461 	.word	0x00007461
  41845c:	656d6954 	.word	0x656d6954
  418460:	74754f20 	.word	0x74754f20
  418464:	6d695420 	.word	0x6d695420
  418468:	00007265 	.word	0x00007265
  41846c:	6c696146 	.word	0x6c696146
  418470:	74206465 	.word	0x74206465
  418474:	7263206f 	.word	0x7263206f
  418478:	65746165 	.word	0x65746165
  41847c:	6d697420 	.word	0x6d697420
  418480:	74207265 	.word	0x74207265
  418484:	206b7361 	.word	0x206b7361
  418488:	65646f63 	.word	0x65646f63
  41848c:	0d642520 	.word	0x0d642520
  418490:	0000000a 	.word	0x0000000a
  418494:	65206e61 	.word	0x65206e61
  418498:	726f7272 	.word	0x726f7272
  41849c:	73616820 	.word	0x73616820
  4184a0:	63636f20 	.word	0x63636f20
  4184a4:	65727275 	.word	0x65727275
  4184a8:	73202c64 	.word	0x73202c64
  4184ac:	65746174 	.word	0x65746174
  4184b0:	63616d20 	.word	0x63616d20
  4184b4:	656e6968 	.word	0x656e6968
  4184b8:	65757120 	.word	0x65757120
  4184bc:	63206575 	.word	0x63206575
  4184c0:	74616572 	.word	0x74616572
  4184c4:	206e6f69 	.word	0x206e6f69
  4184c8:	6c696166 	.word	0x6c696166
  4184cc:	202e6465 	.word	0x202e6465
  4184d0:	00000a0d 	.word	0x00000a0d
  4184d4:	65656c53 	.word	0x65656c53
  4184d8:	6f6d2070 	.word	0x6f6d2070
  4184dc:	65206564 	.word	0x65206564
  4184e0:	6c62616e 	.word	0x6c62616e
  4184e4:	0a0d6465 	.word	0x0a0d6465
  4184e8:	00000000 	.word	0x00000000
  4184ec:	00006951 	.word	0x00006951
  4184f0:	6c696146 	.word	0x6c696146
  4184f4:	74206465 	.word	0x74206465
  4184f8:	7263206f 	.word	0x7263206f
  4184fc:	65746165 	.word	0x65746165
  418500:	20315120 	.word	0x20315120
  418504:	6b736174 	.word	0x6b736174
  418508:	646f6320 	.word	0x646f6320
  41850c:	64252065 	.word	0x64252065
  418510:	00000a0d 	.word	0x00000a0d
  418514:	74697845 	.word	0x74697845
  418518:	656c5320 	.word	0x656c5320
  41851c:	6d207065 	.word	0x6d207065
  418520:	0d65646f 	.word	0x0d65646f
  418524:	0000000a 	.word	0x0000000a
  418528:	69204453 	.word	0x69204453
  41852c:	7265736e 	.word	0x7265736e
  418530:	69542074 	.word	0x69542074
  418534:	4f20656d 	.word	0x4f20656d
  418538:	54207475 	.word	0x54207475
  41853c:	72656d69 	.word	0x72656d69
  418540:	00000000 	.word	0x00000000
  418544:	64726143 	.word	0x64726143
  418548:	736e6920 	.word	0x736e6920
  41854c:	6c6c6174 	.word	0x6c6c6174
  418550:	49414620 	.word	0x49414620
  418554:	000d0a4c 	.word	0x000d0a4c
  418558:	61656c50 	.word	0x61656c50
  41855c:	75206573 	.word	0x75206573
  418560:	756c706e 	.word	0x756c706e
  418564:	6e612067 	.word	0x6e612067
  418568:	65722064 	.word	0x65722064
  41856c:	756c702d 	.word	0x756c702d
  418570:	68742067 	.word	0x68742067
  418574:	61632065 	.word	0x61632065
  418578:	0a2e6472 	.word	0x0a2e6472
  41857c:	0000000d 	.word	0x0000000d
  418580:	6f727245 	.word	0x6f727245
  418584:	49203a72 	.word	0x49203a72
  418588:	6c61766e 	.word	0x6c61766e
  41858c:	44206469 	.word	0x44206469
  418590:	65766972 	.word	0x65766972
  418594:	00000a0d 	.word	0x00000a0d
  418598:	65733a30 	.word	0x65733a30
  41859c:	6e697474 	.word	0x6e697474
  4185a0:	642e7367 	.word	0x642e7367
  4185a4:	00007461 	.word	0x00007461
  4185a8:	6c696166 	.word	0x6c696166
  4185ac:	74206465 	.word	0x74206465
  4185b0:	6567206f 	.word	0x6567206f
  4185b4:	65722074 	.word	0x65722074
  4185b8:	73206461 	.word	0x73206461
  4185bc:	69747465 	.word	0x69747465
  4185c0:	0d73676e 	.word	0x0d73676e
  4185c4:	0000000a 	.word	0x0000000a

004185c8 <sd_mmc_trans_units>:
  4185c8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

004185e4 <sd_trans_multipliers>:
  4185e4:	00000000 0000000a 0000000c 0000000d     ................
  4185f4:	0000000f 00000014 00000019 0000001e     ................
  418604:	00000023 00000028 0000002d 00000032     #...(...-...2...
  418614:	00000037 0000003c 00000046 00000050     7...<...F...P...

00418624 <mmc_trans_multipliers>:
  418624:	00000000 0000000a 0000000c 0000000d     ................
  418634:	0000000f 00000014 0000001a 0000001e     ................
  418644:	00000023 00000028 0000002d 00000034     #...(...-...4...
  418654:	00000037 0000003c 00000046 00000050     7...<...F...P...
  418664:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  418674:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  418684:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

00418694 <lun_desc>:
  418694:	00403069 004030c9 00403131 00403199     i0@..0@.11@..1@.
  4186a4:	004031d9 00403269 00403319 00418664     .1@.i2@..3@.d.A.
  4186b4:	0040307d 004030e9 00403155 004031ad     }0@..0@.U1@..1@.
  4186c4:	004031ed 0040328d 0040333d 0041867c     .1@..2@.=3@.|.A.

004186d4 <LfnOfs>:
  4186d4:	07050301 12100e09 1c181614 0000001e     ................
  4186e4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  4186f4:	00005d5b                                []..

004186f8 <excvt.4554>:
  4186f8:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  418708:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  418718:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  418728:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  418738:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  418748:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  418758:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  418768:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00418778 <Tbl>:
  418778:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  418788:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  418798:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  4187a8:	00d600ff 00f800dc 00d800a3 019200d7     ................
  4187b8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  4187c8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  4187d8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  4187e8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  4187f8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  418808:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  418818:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  418828:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  418838:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  418848:	00da00de 00d900db 00dd00fd 00b400af     ................
  418858:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  418868:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00418878 <tbl_lower.4258>:
  418878:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  418888:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  418898:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  4188a8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  4188b8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  4188c8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  4188d8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  4188e8:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  4188f8:	01050103 01090107 010d010b 0111010f     ................
  418908:	01150113 01190117 011d011b 0121011f     ..............!.
  418918:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  418928:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  418938:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  418948:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  418958:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  418968:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  418978:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  418988:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  418998:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  4189a8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  4189b8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  4189c8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  4189d8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  4189e8:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  4189f8:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  418a08:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  418a18:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  418a28:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  418a38:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  418a48:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00418a58 <tbl_upper.4259>:
  418a58:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  418a68:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  418a78:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  418a88:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  418a98:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  418aa8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  418ab8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  418ac8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  418ad8:	01040102 01080106 010c010a 0110010e     ................
  418ae8:	01140112 01180116 011c011a 0120011e     .............. .
  418af8:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  418b08:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  418b18:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  418b28:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  418b38:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  418b48:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  418b58:	03940393 03960395 03980397 039a0399     ................
  418b68:	039c039b 039e039d 03a0039f 03a303a1     ................
  418b78:	03a503a4 03a703a6 03a903a8 041003aa     ................
  418b88:	04120411 04140413 04160415 04180417     ................
  418b98:	041a0419 041c041b 041e041d 0420041f     .............. .
  418ba8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  418bb8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  418bc8:	04030402 04050404 04070406 04090408     ................
  418bd8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  418be8:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  418bf8:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  418c08:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  418c18:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  418c28:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  418c38:	454c4449 00000000 00000a0d 09097325     IDLE........%s..
  418c48:	25096325 75250975 0d752509 0000000a     %c.%u.%u.%u.....
  418c58:	20726d54 00637653 0001c200 00000000     Tmr Svc.........
  418c68:	00000800 00000000 64726143 736e6920     ........Card ins
  418c78:	6c6c6174 49414620 000d0a4c 61656c50     tall FAIL...Plea
  418c88:	75206573 756c706e 6e612067 65722064     se unplug and re
  418c98:	756c702d 68742067 61632065 0a2e6472     -plug the card..
  418ca8:	0000000d 6f727245 49203a72 6c61766e     ....Error: Inval
  418cb8:	44206469 65766972 00000a0d 65733a30     id Drive....0:se
  418cc8:	6e697474 642e7367 00007461 6c696166     ttings.dat..fail
  418cd8:	74206465 6567206f 65722074 73206461     ed to get read s
  418ce8:	69747465 0d73676e 0000000a 6e65704f     ettings.....Open
  418cf8:	20676e69 43204453 20647261 72206f74     ing SD Card to r
  418d08:	0d646165 0000000a 30303053 00000031     ead.....S0001...
  418d18:	6f727245 43203a72 6f6e6e61 704f2074     Error: Cannot Op
  418d28:	66206e65 0d656c69 0000000a 64616552     en file.....Read
  418d38:	20676e69 6d6f7266 0d445320 0000000a     ing from SD.....
  418d48:	00006565 2c207325 0a0d6425 00000000     ee..%s ,%d......
  418d58:	6c696166 74206465 6572206f 73206461     failed to read s
  418d68:	69747465 0d73676e 0000000a 252c6425     ettings.....%d,%
  418d78:	73252c64 00000a0d 6c696166 74206465     d,%s....failed t
  418d88:	6170206f 20657372 20554d49 74746573     o parse IMU sett
  418d98:	73676e69 00000a0d 65636572 64657669     ings....received
  418da8:	636e6920 6572726f 69207463 6449756d      incorrect imuId
  418db8:	0a0d6425 00000000 0a0d7325 00000000     %d......%s......
  418dc8:	6c696166 74206465 7361206f 6e676973     failed to assign
  418dd8:	554d4920 74206425 7571206f 69746e69      IMU%d to quinti
  418de8:	64252063 00000000 6c696166 74206465     c %d....failed t
  418df8:	7361206f 6e676973 554d4920 74206425     o assign IMU%d t
  418e08:	7571206f 69746e69 64252063 6f74203a     o quintic %d: to
  418e18:	616d206f 4920796e 0073554d 64616f6c     o many IMUs.load
  418e28:	73206465 69747465 2073676e 20726f66     ed settings for 
  418e38:	20554d49 6f206425 2551206e 25202c64     IMU %d on Q%d, %
  418e48:	00000073 736f6c43 20676e69 20656874     s...Closing the 
  418e58:	656c6966 00000a0d 75626544 6f4c2067     file....Debug Lo
  418e68:	706f2067 73206e65 65636375 75667373     g open successfu
  418e78:	000a0d6c 75626544 6f4c2067 706f2067     l...Debug Log op
  418e88:	75206e65 6375736e 73736563 0d6c7566     en unsuccessful.
  418e98:	0000000a 203a6425 00007325 616d6553     ....%d: %s..Sema
  418ea8:	726f6870 6f6e2065 65722074 7361656c     phore not releas
  418eb8:	0a0d6465 00000000 616d6553 726f6870     ed......Semaphor
  418ec8:	6e552065 69617661 6c62616c 6f742065     e Unavailable to
  418ed8:	62654420 42206775 65666675 75662072      Debug Buffer fu
  418ee8:	6974636e 0a0d6e6f 00000000 616d6553     nction......Sema
  418ef8:	726f6870 6e552065 69617661 6c62616c     phore Unavailabl
  418f08:	6f742065 69727020 7420746e 0d6b7361     e to print task.
  418f18:	0000000a 6c696166 74206465 6e69206f     ....failed to in
  418f28:	61697469 657a696c 49504720 7461204f     itialize GPIO at
  418f38:	646e6920 25207865 00000064 65206e61      index %d...an e
  418f48:	726f7272 73616820 63636f20 65727275     rror has occurre
  418f58:	64202c64 20617461 646e6168 2072656c     d, data handler 
  418f68:	75657571 61662065 72756c69 000a0d65     queue failure...
  418f78:	30313025 00002c64 64343025 42424242     %010d,..%04dBBBB
  418f88:	43434343 44444444 45454545 64383025     CCCCDDDDEEEE%08d
  418f98:	00000a0d 65656c53 69542070 0072656d     ....Sleep Timer.
  418fa8:	6c696146 74206465 7263206f 65746165     Failed to create
  418fb8:	6d697420 74207265 206b7361 65646f63      timer task code
  418fc8:	0d642520 0000000a 00003151 6c696146      %d.....Q1..Fail
  418fd8:	74206465 7263206f 65746165 20315120     ed to create Q1 
  418fe8:	6b736174 646f6320 64252065 00000a0d     task code %d....
  418ff8:	00003351 6c696146 74206465 7263206f     Q3..Failed to cr
  419008:	65746165 20335120 6b736174 646f6320     eate Q3 task cod
  419018:	64252065 00000a0d 00005346 6c696146     e %d....FS..Fail
  419028:	74206465 6166206f 63697262 6e657320     ed to fabric sen
  419038:	74206573 206b7361 65646f63 0d642520     se task code %d.
  419048:	0000000a 00646d63 6c696146 74206465     ....cmd.Failed t
  419058:	6553206f 6c616972 6e616820 72656c64     o Serial handler
  419068:	73617420 6f63206b 25206564 000a0d64      task code %d...
  419078:	00004844 6c696146 74206465 7263206f     DH..Failed to cr
  419088:	65746165 74616420 61682061 656c646e     eate data handle
  419098:	61742072 63206b73 2065646f 0a0d6425     r task code %d..
  4190a8:	00000000 00004453 6c696146 74206465     ....SD..Failed t
  4190b8:	6473206f 72616320 61742064 63206b73     o sd card task c
  4190c8:	2065646f 0a0d6425 00000000 00004d53     ode %d......SM..
  4190d8:	676f7250 206d6172 72617473 000a0d74     Program start...
  4190e8:	65656c53 6f6d2070 65206564 6c62616e     Sleep mode enabl
  4190f8:	0a0d6465 00000000 53205750 72702057     ed......PW SW pr
  419108:	65737365 000a0d64 54415453 74656420     essed...STAT det
  419118:	65746365 000a0d64 00003030 00003131     ected...00..11..
  419128:	00003232 00003333 00003434 63736944     22..33..44..Disc
  419138:	70736552 00000000 63736944 656e6e6f     Resp....Disconne
  419148:	6f697463 7665206e 20746e65 6d6f7266     ction event from
  419158:	64255120 00000a0d 69676562 000a0d6e      Q%d....begin...
  419168:	0d646e65 0000000a 72617473 000a0d74     end.....start...
  419178:	706f7473 00000a0d 63416e51 000a0d6b     stop....QnAck...
  419188:	64323025 30255959 52526434 00642552     %02dYY%04dRRR%d.
  419198:	6e616373 00000a0d 6e616353 70736552     scan....ScanResp
  4191a8:	00000000 6e6e6f63 0d746365 0000000a     ....connect.....
  4191b8:	6e6e6f43 70736552 00000000 6e69614d     ConnResp....Main
  4191c8:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  4191d8:	65746165 69614d20 6174206e 0a0d6b73     eate Main task..
  4191e8:	00000000 00000043                       ....C...

004191f0 <_global_impure_ptr>:
  4191f0:	200004f0                                ... 

004191f4 <zeroes.6763>:
  4191f4:	30303030 30303030 30303030 30303030     0000000000000000
  419204:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  419214:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  419224:	00000000 33323130 37363534 62613938     ....0123456789ab
  419234:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  419244:	00000030                                0...

00419248 <blanks.6762>:
  419248:	20202020 20202020 20202020 20202020                     

00419258 <basefix.6714>:
  419258:	0001000a 00030002 00050004 00070006     ................
  419268:	00090008 000b000a 000d000c 000f000e     ................
  419278:	00000010 646c2565 00000000              ....e%ld....

00419284 <zeroes.6721>:
  419284:	30303030 30303030 30303030 30303030     0000000000000000

00419294 <blanks.6720>:
  419294:	20202020 20202020 20202020 20202020                     

004192a4 <_ctype_>:
  4192a4:	20202000 20202020 28282020 20282828     .         ((((( 
  4192b4:	20202020 20202020 20202020 20202020                     
  4192c4:	10108820 10101010 10101010 10101010      ...............
  4192d4:	04040410 04040404 10040404 10101010     ................
  4192e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4192f4:	01010101 01010101 01010101 10101010     ................
  419304:	42421010 42424242 02020202 02020202     ..BBBBBB........
  419314:	02020202 02020202 02020202 10101010     ................
  419324:	00000020 00000000 00000000 00000000      ...............
	...
  4193a8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4193b8:	49534f50 00000058 0000002e 00000000     POSIX...........

004193c8 <__mprec_tens>:
  4193c8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4193d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4193e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4193f8:	00000000 412e8480 00000000 416312d0     .......A......cA
  419408:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  419418:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  419428:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  419438:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  419448:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  419458:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  419468:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  419478:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  419488:	79d99db4 44ea7843                       ...yCx.D

00419490 <__mprec_bigtens>:
  419490:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4194a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4194b0:	7f73bf3c 75154fdd                       <.s..O.u

004194b8 <p05.5269>:
  4194b8:	00000005 00000019 0000007d              ........}...

004194c4 <fpi.5238>:
  4194c4:	00000035 fffffbce 000003cb 00000001     5...............
  4194d4:	00000000 0000666e 74696e69 00000079     ....nf..inity...
  4194e4:	00006e61                                an..

004194e8 <fpinan.5274>:
  4194e8:	00000034 fffffbce 000003cb 00000001     4...............
	...

00419500 <tinytens>:
  419500:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  419510:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  419520:	64ac6f43 11680628                       Co.d(.h.

00419528 <__hexdig>:
	...
  419558:	13121110 17161514 00001918 00000000     ................
  419568:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
  419588:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

00419628 <_init>:
  419628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41962a:	bf00      	nop
  41962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41962e:	bc08      	pop	{r3}
  419630:	469e      	mov	lr, r3
  419632:	4770      	bx	lr

00419634 <__init_array_start>:
  419634:	00412b35 	.word	0x00412b35

00419638 <__frame_dummy_init_array_entry>:
  419638:	004000f1                                ..@.

0041963c <_fini>:
  41963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41963e:	bf00      	nop
  419640:	bcf8      	pop	{r3, r4, r5, r6, r7}
  419642:	bc08      	pop	{r3}
  419644:	469e      	mov	lr, r3
  419646:	4770      	bx	lr

00419648 <__fini_array_start>:
  419648:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <sd_mmc_cards>:
	...
20000024:	002b 0000 0000 0000 0000 0000 0000 0000     +...............
	...

20000040 <uxCriticalNesting>:
20000040:	aaaa aaaa                                   ....

20000044 <xNextTaskUnblockTime>:
20000044:	ffff ffff                                   ....

20000048 <uxPreviousTask>:
20000048:	00ff 0000                                   ....

2000004c <uart0Config>:
2000004c:	0600 400e c200 0001 00c0 0000 0800 0000     ...@............
	...

20000064 <uart1Config>:
20000064:	0800 400e c200 0001 00c0 0000 0800 0000     ...@............
20000074:	0000 0000 0001 0000                         ........

2000007c <usart0Config>:
2000007c:	4000 4002 c200 0001 00c0 0000 0800 0000     .@.@............
2000008c:	0000 0000 0002 0000                         ........

20000094 <usart1Config>:
20000094:	8000 4002 c200 0001 00c0 0000 0800 0000     ...@............
200000a4:	0000 0000 0003 0000                         ........

200000ac <ledConfiguration>:
200000ac:	0d0e 000c                                   ....

200000b0 <imuConfig>:
200000b0:	0000 0000 4131 4242 4343 4444 4545 4646     ....1ABBCCDDEEFF
	...
200000e8:	0001 0000 4132 4242 4343 4444 4545 4646     ....2ABBCCDDEEFF
	...
20000120:	0002 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000158:	0003 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000190:	0004 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200001c8:	0005 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000200:	0006 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000238:	0007 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
20000270:	0008 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...
200002a8:	0009 0000 4133 4242 4343 4444 4545 4646     ....3ABBCCDDEEFF
	...

200002e0 <quinticConfig>:
200002e0:	00b0 2000 00e8 2000 0120 2000 0000 0000     ... ...  .. ....
200002f0:	0000 0000 0064 2000 0003 0000 0000 0000     ....d.. ........
20000300:	0009 0000 0000 0000 0000 0000 0158 2000     ............X.. 
20000310:	0190 2000 01c8 2000 0000 0000 0000 0000     ... ... ........
20000320:	007c 2000 0003 0000 0000 0000 000a 0000     |.. ............
20000330:	0000 0000 0001 0000 0200 2000 0238 2000     ........... 8.. 
20000340:	0270 2000 0000 0000 0000 0000 0094 2000     p.. ........... 
20000350:	0003 0000 0000 0000 000b 0000 0000 0000     ................
20000360:	0002 0000                                   ....

20000364 <fsConfig>:
20000364:	0014 0000 0014 0000 004c 2000               ........L.. 

20000370 <cmdConfig>:
20000370:	004c 2000                                   L.. 

20000374 <sgSDWriteLockBit>:
20000374:	0001 0000                                   ....

20000378 <gpioConfig>:
20000378:	0000 0000 0001 0001 ac3d 0040 0101 0000     ........=.@.....
20000388:	0001 0000 0001 0001 ac91 0040 0101 0000     ..........@.....
20000398:	0014 0000 0001 0001 ace5 0040 0101 0000     ..........@.....
200003a8:	0010 0000 0001 0001 ad3d 0040 0101 0000     ........=.@.....
200003b8:	000f 0000 0001 0001 ad95 0040 0101 0000     ..........@.....
200003c8:	0018 0000 0001 0001 aded 0040 0101 0000     ..........@.....
200003d8:	0019 0000 0001 0001 ae45 0040 0101 0000     ........E.@.....
200003e8:	0013 0000 0100 0004 0000 0000 0000 0000     ................
200003f8:	0017 0000 0100 0004 0000 0000 0000 0000     ................
20000408:	002a 0000 0100 0004 0000 0000 0100 0000     *...............
20000418:	0011 0000 0100 0004 0000 0000 0100 0000     ................
20000428:	0012 0000 0100 0004 0000 0000 0100 0000     ................
20000438:	002d 0000 0100 0004 0000 0000 0000 0000     -...............
20000448:	0020 0000 0100 0004 0000 0000 0000 0000      ...............
20000458:	0021 0000 0100 0004 0000 0000 0000 0000     !...............
20000468:	000b 0000 0001 0001 ae9d 0040 0101 0000     ..........@.....
20000478:	002b 0000 0001 0001 aef5 0040 0101 0000     +.........@.....

20000488 <programmingGpioConfig>:
20000488:	0023 0000 0001 0004 0000 0000 0101 0000     #...............
20000498:	0022 0000 0001 0004 0000 0000 0101 0000     "...............
200004a8:	0006 0000 0001 0004 0000 0000 0101 0000     ................
200004b8:	0005 0000 0001 0004 0000 0000 0101 0000     ................
200004c8:	0016 0000 0001 0004 0000 0000 0101 0000     ................
200004d8:	0012 0000 0001 0004 0000 0000 0101 0000     ................

200004e8 <g_interrupt_enabled>:
200004e8:	0001 0000                                   ....

200004ec <SystemCoreClock>:
200004ec:	0900 003d                                   ..=.

200004f0 <impure_data>:
200004f0:	0000 0000 07dc 2000 0844 2000 08ac 2000     ....... D.. ... 
	...
20000524:	91ec 0041 0000 0000 0000 0000 0000 0000     ..A.............
	...
20000598:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200005a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000918 <_impure_ptr>:
20000918:	04f0 2000                                   ... 

2000091c <__malloc_av_>:
	...
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 
20000c04:	0bfc 2000 0bfc 2000 0c04 2000 0c04 2000     ... ... ... ... 
20000c14:	0c0c 2000 0c0c 2000 0c14 2000 0c14 2000     ... ... ... ... 
20000c24:	0c1c 2000 0c1c 2000 0c24 2000 0c24 2000     ... ... $.. $.. 
20000c34:	0c2c 2000 0c2c 2000 0c34 2000 0c34 2000     ,.. ,.. 4.. 4.. 
20000c44:	0c3c 2000 0c3c 2000 0c44 2000 0c44 2000     <.. <.. D.. D.. 
20000c54:	0c4c 2000 0c4c 2000 0c54 2000 0c54 2000     L.. L.. T.. T.. 
20000c64:	0c5c 2000 0c5c 2000 0c64 2000 0c64 2000     \.. \.. d.. d.. 
20000c74:	0c6c 2000 0c6c 2000 0c74 2000 0c74 2000     l.. l.. t.. t.. 
20000c84:	0c7c 2000 0c7c 2000 0c84 2000 0c84 2000     |.. |.. ... ... 
20000c94:	0c8c 2000 0c8c 2000 0c94 2000 0c94 2000     ... ... ... ... 
20000ca4:	0c9c 2000 0c9c 2000 0ca4 2000 0ca4 2000     ... ... ... ... 
20000cb4:	0cac 2000 0cac 2000 0cb4 2000 0cb4 2000     ... ... ... ... 
20000cc4:	0cbc 2000 0cbc 2000 0cc4 2000 0cc4 2000     ... ... ... ... 
20000cd4:	0ccc 2000 0ccc 2000 0cd4 2000 0cd4 2000     ... ... ... ... 
20000ce4:	0cdc 2000 0cdc 2000 0ce4 2000 0ce4 2000     ... ... ... ... 
20000cf4:	0cec 2000 0cec 2000 0cf4 2000 0cf4 2000     ... ... ... ... 
20000d04:	0cfc 2000 0cfc 2000 0d04 2000 0d04 2000     ... ... ... ... 
20000d14:	0d0c 2000 0d0c 2000 0d14 2000 0d14 2000     ... ... ... ... 

20000d24 <__malloc_trim_threshold>:
20000d24:	0000 0002                                   ....

20000d28 <__malloc_sbrk_base>:
20000d28:	ffff ffff                                   ....

20000d2c <__ctype_ptr__>:
20000d2c:	92a4 0041                                   ..A.

20000d30 <lconv>:
20000d30:	93c0 0041 9224 0041 9224 0041 9224 0041     ..A.$.A.$.A.$.A.
20000d40:	9224 0041 9224 0041 9224 0041 9224 0041     $.A.$.A.$.A.$.A.
20000d50:	9224 0041 9224 0041 ffff ffff ffff ffff     $.A.$.A.........
20000d60:	ffff ffff ffff 0000                         ........

20000d68 <lc_ctype_charset>:
20000d68:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000d88 <__mb_cur_max>:
20000d88:	0001 0000                                   ....

20000d8c <__mbtowc>:
20000d8c:	458d 0041                                   .EA.

20000d90 <__wctomb>:
20000d90:	6ced 0041                                   .lA.
