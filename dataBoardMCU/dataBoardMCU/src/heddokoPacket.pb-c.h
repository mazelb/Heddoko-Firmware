/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: heddokoPacket.proto */

#ifndef PROTOBUF_C_heddokoPacket_2eproto__INCLUDED
#define PROTOBUF_C_heddokoPacket_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Heddoko__ImuDataFrame Heddoko__ImuDataFrame;
typedef struct _Heddoko__FullDataFrame Heddoko__FullDataFrame;
typedef struct _Heddoko__Packet Heddoko__Packet;


/* --- enums --- */

typedef enum _Heddoko__Packet__BrainPackState {
  HEDDOKO__PACKET__BRAIN_PACK_STATE__Idle = 0,
  HEDDOKO__PACKET__BRAIN_PACK_STATE__Recording = 1,
  HEDDOKO__PACKET__BRAIN_PACK_STATE__Reset = 2,
  HEDDOKO__PACKET__BRAIN_PACK_STATE__Error = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HEDDOKO__PACKET__BRAIN_PACK_STATE)
} Heddoko__Packet__BrainPackState;
typedef enum _Heddoko__PacketType {
  HEDDOKO__PACKET_TYPE__StateRequest = 0,
  HEDDOKO__PACKET_TYPE__StateResponse = 1,
  HEDDOKO__PACKET_TYPE__DataFrame = 2,
  HEDDOKO__PACKET_TYPE__BatteryChargeRequest = 3,
  HEDDOKO__PACKET_TYPE__BatteryChargeResponse = 4,
  HEDDOKO__PACKET_TYPE__BrainPackVersionRequest = 5,
  HEDDOKO__PACKET_TYPE__BrainPackVersionResponse = 6,
  HEDDOKO__PACKET_TYPE__SetRecordingName = 7,
  HEDDOKO__PACKET_TYPE__GetRecordingName = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HEDDOKO__PACKET_TYPE)
} Heddoko__PacketType;

/* --- messages --- */

struct  _Heddoko__ImuDataFrame
{
  ProtobufCMessage base;
  uint32_t imuid;
  protobuf_c_boolean has_sensormask;
  uint32_t sensormask;
  protobuf_c_boolean has_quat_x_yaw;
  float quat_x_yaw;
  protobuf_c_boolean has_quat_y_pitch;
  float quat_y_pitch;
  protobuf_c_boolean has_quat_z_roll;
  float quat_z_roll;
  protobuf_c_boolean has_quat_w;
  float quat_w;
  protobuf_c_boolean has_mag_x;
  int32_t mag_x;
  protobuf_c_boolean has_mag_y;
  int32_t mag_y;
  protobuf_c_boolean has_mag_z;
  int32_t mag_z;
  protobuf_c_boolean has_accel_x;
  int32_t accel_x;
  protobuf_c_boolean has_accel_y;
  int32_t accel_y;
  protobuf_c_boolean has_accel_z;
  int32_t accel_z;
  protobuf_c_boolean has_rot_x;
  int32_t rot_x;
  protobuf_c_boolean has_rot_y;
  int32_t rot_y;
  protobuf_c_boolean has_rot_z;
  int32_t rot_z;
};
#define HEDDOKO__IMU_DATA_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&heddoko__imu_data_frame__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Heddoko__FullDataFrame
{
  ProtobufCMessage base;
  uint32_t timestamp;
  size_t n_imudataframe;
  Heddoko__ImuDataFrame **imudataframe;
};
#define HEDDOKO__FULL_DATA_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&heddoko__full_data_frame__descriptor) \
    , 0, 0,NULL }


struct  _Heddoko__Packet
{
  ProtobufCMessage base;
  Heddoko__PacketType type;
  protobuf_c_boolean has_state;
  Heddoko__Packet__BrainPackState state;
  char *brainpackversion;
  protobuf_c_boolean has_batterycharge;
  int32_t batterycharge;
  Heddoko__FullDataFrame *fulldataframe;
  char *recordingname;
};
#define HEDDOKO__PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&heddoko__packet__descriptor) \
    , 0, 0,0, NULL, 0,0, NULL, NULL }


/* Heddoko__ImuDataFrame methods */
void   heddoko__imu_data_frame__init
                     (Heddoko__ImuDataFrame         *message);
size_t heddoko__imu_data_frame__get_packed_size
                     (const Heddoko__ImuDataFrame   *message);
size_t heddoko__imu_data_frame__pack
                     (const Heddoko__ImuDataFrame   *message,
                      uint8_t             *out);
size_t heddoko__imu_data_frame__pack_to_buffer
                     (const Heddoko__ImuDataFrame   *message,
                      ProtobufCBuffer     *buffer);
Heddoko__ImuDataFrame *
       heddoko__imu_data_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   heddoko__imu_data_frame__free_unpacked
                     (Heddoko__ImuDataFrame *message,
                      ProtobufCAllocator *allocator);
/* Heddoko__FullDataFrame methods */
void   heddoko__full_data_frame__init
                     (Heddoko__FullDataFrame         *message);
size_t heddoko__full_data_frame__get_packed_size
                     (const Heddoko__FullDataFrame   *message);
size_t heddoko__full_data_frame__pack
                     (const Heddoko__FullDataFrame   *message,
                      uint8_t             *out);
size_t heddoko__full_data_frame__pack_to_buffer
                     (const Heddoko__FullDataFrame   *message,
                      ProtobufCBuffer     *buffer);
Heddoko__FullDataFrame *
       heddoko__full_data_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   heddoko__full_data_frame__free_unpacked
                     (Heddoko__FullDataFrame *message,
                      ProtobufCAllocator *allocator);
/* Heddoko__Packet methods */
void   heddoko__packet__init
                     (Heddoko__Packet         *message);
size_t heddoko__packet__get_packed_size
                     (const Heddoko__Packet   *message);
size_t heddoko__packet__pack
                     (const Heddoko__Packet   *message,
                      uint8_t             *out);
size_t heddoko__packet__pack_to_buffer
                     (const Heddoko__Packet   *message,
                      ProtobufCBuffer     *buffer);
Heddoko__Packet *
       heddoko__packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   heddoko__packet__free_unpacked
                     (Heddoko__Packet *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Heddoko__ImuDataFrame_Closure)
                 (const Heddoko__ImuDataFrame *message,
                  void *closure_data);
typedef void (*Heddoko__FullDataFrame_Closure)
                 (const Heddoko__FullDataFrame *message,
                  void *closure_data);
typedef void (*Heddoko__Packet_Closure)
                 (const Heddoko__Packet *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    heddoko__packet_type__descriptor;
extern const ProtobufCMessageDescriptor heddoko__imu_data_frame__descriptor;
extern const ProtobufCMessageDescriptor heddoko__full_data_frame__descriptor;
extern const ProtobufCMessageDescriptor heddoko__packet__descriptor;
extern const ProtobufCEnumDescriptor    heddoko__packet__brain_pack_state__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_heddokoPacket_2eproto__INCLUDED */
