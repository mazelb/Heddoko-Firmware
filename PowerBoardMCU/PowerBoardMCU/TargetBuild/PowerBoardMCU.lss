
PowerBoardMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00016264  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00416264  00416264  0001e264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c14  20000000  0041626c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00008db4  20000c18  00416e88  00020c18  2**3
                  ALLOC
  4 .stack        00003004  200099cc  0041fc3c  00020c18  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020c14  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020c3e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020abf  00000000  00000000  00020c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000052b7  00000000  00000000  00041758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000969c  00000000  00000000  00046a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a88  00000000  00000000  000500ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017d0  00000000  00000000  00051b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b6a0  00000000  00000000  00053303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002438d  00000000  00000000  0006e9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058d80  00000000  00000000  00092d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000068d0  00000000  00000000  000ebab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000c9d0 	.word	0x2000c9d0
  400004:	0040bb85 	.word	0x0040bb85
  400008:	0040bc4d 	.word	0x0040bc4d
  40000c:	0040c005 	.word	0x0040c005
  400010:	0040c00d 	.word	0x0040c00d
  400014:	0040c015 	.word	0x0040c015
  400018:	0040c01d 	.word	0x0040c01d
	...
  40002c:	004080fd 	.word	0x004080fd
  400030:	0040bc4d 	.word	0x0040bc4d
  400034:	00000000 	.word	0x00000000
  400038:	004081e9 	.word	0x004081e9
  40003c:	00408225 	.word	0x00408225
  400040:	0040bc4d 	.word	0x0040bc4d
  400044:	0040bc4d 	.word	0x0040bc4d
  400048:	0040bc4d 	.word	0x0040bc4d
  40004c:	0040bc4d 	.word	0x0040bc4d
  400050:	00404399 	.word	0x00404399
  400054:	0040bc4d 	.word	0x0040bc4d
  400058:	0040bc4d 	.word	0x0040bc4d
  40005c:	00000000 	.word	0x00000000
  400060:	00407b79 	.word	0x00407b79
  400064:	00407bdd 	.word	0x00407bdd
  400068:	00000000 	.word	0x00000000
  40006c:	0040b215 	.word	0x0040b215
  400070:	0040b22d 	.word	0x0040b22d
  400074:	00000000 	.word	0x00000000
  400078:	00407c45 	.word	0x00407c45
	...
  40008c:	0040044d 	.word	0x0040044d
  400090:	0040045d 	.word	0x0040045d
  400094:	0040bc4d 	.word	0x0040bc4d
  400098:	0040bc4d 	.word	0x0040bc4d
  40009c:	0040bc4d 	.word	0x0040bc4d
  4000a0:	0040bc4d 	.word	0x0040bc4d
  4000a4:	0040bc4d 	.word	0x0040bc4d
	...
  4000b4:	0040bc4d 	.word	0x0040bc4d
  4000b8:	00000000 	.word	0x00000000
  4000bc:	0040bc4d 	.word	0x0040bc4d
  4000c0:	0040bc4d 	.word	0x0040bc4d
  4000c4:	0040bc4d 	.word	0x0040bc4d
  4000c8:	00401f95 	.word	0x00401f95

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000c18 	.word	0x20000c18
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0041626c 	.word	0x0041626c

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	0041626c 	.word	0x0041626c
  400114:	20000c1c 	.word	0x20000c1c
  400118:	0041626c 	.word	0x0041626c
  40011c:	00000000 	.word	0x00000000

00400120 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400120:	b590      	push	{r4, r7, lr}
  400122:	b08b      	sub	sp, #44	; 0x2c
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400128:	2300      	movs	r3, #0
  40012a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40012c:	2300      	movs	r3, #0
  40012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400132:	4a81      	ldr	r2, [pc, #516]	; (400338 <local_twi_handler+0x218>)
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	011b      	lsls	r3, r3, #4
  400138:	4413      	add	r3, r2
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40013e:	69b8      	ldr	r0, [r7, #24]
  400140:	4b7e      	ldr	r3, [pc, #504]	; (40033c <local_twi_handler+0x21c>)
  400142:	4798      	blx	r3
  400144:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  400146:	69b8      	ldr	r0, [r7, #24]
  400148:	4b7d      	ldr	r3, [pc, #500]	; (400340 <local_twi_handler+0x220>)
  40014a:	4798      	blx	r3
  40014c:	4603      	mov	r3, r0
  40014e:	697a      	ldr	r2, [r7, #20]
  400150:	4013      	ands	r3, r2
  400152:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40015a:	2b00      	cmp	r3, #0
  40015c:	d076      	beq.n	40024c <local_twi_handler+0x12c>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  40015e:	4a76      	ldr	r2, [pc, #472]	; (400338 <local_twi_handler+0x218>)
  400160:	687b      	ldr	r3, [r7, #4]
  400162:	011b      	lsls	r3, r3, #4
  400164:	4413      	add	r3, r2
  400166:	685b      	ldr	r3, [r3, #4]
  400168:	4618      	mov	r0, r3
  40016a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40016e:	4b75      	ldr	r3, [pc, #468]	; (400344 <local_twi_handler+0x224>)
  400170:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  400172:	69b8      	ldr	r0, [r7, #24]
  400174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400178:	4b73      	ldr	r3, [pc, #460]	; (400348 <local_twi_handler+0x228>)
  40017a:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400180:	69bb      	ldr	r3, [r7, #24]
  400182:	6a1b      	ldr	r3, [r3, #32]
  400184:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  400186:	7cfb      	ldrb	r3, [r7, #19]
  400188:	f003 0304 	and.w	r3, r3, #4
  40018c:	2b00      	cmp	r3, #0
  40018e:	d000      	beq.n	400192 <local_twi_handler+0x72>
				break;
  400190:	e00b      	b.n	4001aa <local_twi_handler+0x8a>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400192:	6a3b      	ldr	r3, [r7, #32]
  400194:	3301      	adds	r3, #1
  400196:	623b      	str	r3, [r7, #32]
  400198:	6a3b      	ldr	r3, [r7, #32]
  40019a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40019e:	d103      	bne.n	4001a8 <local_twi_handler+0x88>
				transfer_timeout = true;
  4001a0:	2301      	movs	r3, #1
  4001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001a6:	e000      	b.n	4001aa <local_twi_handler+0x8a>
			}
		}
  4001a8:	e7ea      	b.n	400180 <local_twi_handler+0x60>
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4001aa:	69bb      	ldr	r3, [r7, #24]
  4001ac:	2202      	movs	r2, #2
  4001ae:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4001b0:	4b66      	ldr	r3, [pc, #408]	; (40034c <local_twi_handler+0x22c>)
  4001b2:	687a      	ldr	r2, [r7, #4]
  4001b4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4001b8:	4964      	ldr	r1, [pc, #400]	; (40034c <local_twi_handler+0x22c>)
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	00db      	lsls	r3, r3, #3
  4001be:	440b      	add	r3, r1
  4001c0:	685b      	ldr	r3, [r3, #4]
  4001c2:	3b01      	subs	r3, #1
  4001c4:	4413      	add	r3, r2
  4001c6:	781b      	ldrb	r3, [r3, #0]
  4001c8:	461a      	mov	r2, r3
  4001ca:	69bb      	ldr	r3, [r7, #24]
  4001cc:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4001ce:	69bb      	ldr	r3, [r7, #24]
  4001d0:	6a1b      	ldr	r3, [r3, #32]
  4001d2:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  4001d4:	7cfb      	ldrb	r3, [r7, #19]
  4001d6:	f003 0301 	and.w	r3, r3, #1
  4001da:	2b00      	cmp	r3, #0
  4001dc:	d000      	beq.n	4001e0 <local_twi_handler+0xc0>
				break;
  4001de:	e00b      	b.n	4001f8 <local_twi_handler+0xd8>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4001e0:	6a3b      	ldr	r3, [r7, #32]
  4001e2:	3301      	adds	r3, #1
  4001e4:	623b      	str	r3, [r7, #32]
  4001e6:	6a3b      	ldr	r3, [r7, #32]
  4001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001ec:	d103      	bne.n	4001f6 <local_twi_handler+0xd6>
				transfer_timeout = true;
  4001ee:	2301      	movs	r3, #1
  4001f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001f4:	e000      	b.n	4001f8 <local_twi_handler+0xd8>
			}
		}
  4001f6:	e7ea      	b.n	4001ce <local_twi_handler+0xae>
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4001f8:	4a55      	ldr	r2, [pc, #340]	; (400350 <local_twi_handler+0x230>)
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	00db      	lsls	r3, r3, #3
  4001fe:	4413      	add	r3, r2
  400200:	685b      	ldr	r3, [r3, #4]
  400202:	2b00      	cmp	r3, #0
  400204:	d00c      	beq.n	400220 <local_twi_handler+0x100>
			xSemaphoreGiveFromISR(
  400206:	4a52      	ldr	r2, [pc, #328]	; (400350 <local_twi_handler+0x230>)
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	4413      	add	r3, r2
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	f107 0308 	add.w	r3, r7, #8
  400214:	4610      	mov	r0, r2
  400216:	2100      	movs	r1, #0
  400218:	461a      	mov	r2, r3
  40021a:	2300      	movs	r3, #0
  40021c:	4c4d      	ldr	r4, [pc, #308]	; (400354 <local_twi_handler+0x234>)
  40021e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400220:	6a3b      	ldr	r3, [r7, #32]
  400222:	f1b3 3fff 	cmp.w	r3, #4294967295
  400226:	d011      	beq.n	40024c <local_twi_handler+0x12c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400228:	4b49      	ldr	r3, [pc, #292]	; (400350 <local_twi_handler+0x230>)
  40022a:	687a      	ldr	r2, [r7, #4]
  40022c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400230:	2b00      	cmp	r3, #0
  400232:	d00b      	beq.n	40024c <local_twi_handler+0x12c>
				xSemaphoreGiveFromISR(
  400234:	4b46      	ldr	r3, [pc, #280]	; (400350 <local_twi_handler+0x230>)
  400236:	687a      	ldr	r2, [r7, #4]
  400238:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40023c:	f107 0308 	add.w	r3, r7, #8
  400240:	4610      	mov	r0, r2
  400242:	2100      	movs	r1, #0
  400244:	461a      	mov	r2, r3
  400246:	2300      	movs	r3, #0
  400248:	4c42      	ldr	r4, [pc, #264]	; (400354 <local_twi_handler+0x234>)
  40024a:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40024c:	697b      	ldr	r3, [r7, #20]
  40024e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400252:	2b00      	cmp	r3, #0
  400254:	f000 80aa 	beq.w	4003ac <local_twi_handler+0x28c>
		uint32_t timeout_counter = 0;
  400258:	2300      	movs	r3, #0
  40025a:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40025c:	4a36      	ldr	r2, [pc, #216]	; (400338 <local_twi_handler+0x218>)
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	011b      	lsls	r3, r3, #4
  400262:	4413      	add	r3, r2
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	4618      	mov	r0, r3
  400268:	2102      	movs	r1, #2
  40026a:	4b36      	ldr	r3, [pc, #216]	; (400344 <local_twi_handler+0x224>)
  40026c:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40026e:	69b8      	ldr	r0, [r7, #24]
  400270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400274:	4b34      	ldr	r3, [pc, #208]	; (400348 <local_twi_handler+0x228>)
  400276:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400278:	69bb      	ldr	r3, [r7, #24]
  40027a:	6a1b      	ldr	r3, [r3, #32]
  40027c:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	f003 0302 	and.w	r3, r3, #2
  400284:	2b00      	cmp	r3, #0
  400286:	d000      	beq.n	40028a <local_twi_handler+0x16a>
				break;
  400288:	e008      	b.n	40029c <local_twi_handler+0x17c>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40028a:	69fb      	ldr	r3, [r7, #28]
  40028c:	3301      	adds	r3, #1
  40028e:	61fb      	str	r3, [r7, #28]
  400290:	69fb      	ldr	r3, [r7, #28]
  400292:	f1b3 3fff 	cmp.w	r3, #4294967295
  400296:	d100      	bne.n	40029a <local_twi_handler+0x17a>
				break;
  400298:	e000      	b.n	40029c <local_twi_handler+0x17c>
			}
		}
  40029a:	e7ed      	b.n	400278 <local_twi_handler+0x158>
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  40029c:	69bb      	ldr	r3, [r7, #24]
  40029e:	2202      	movs	r2, #2
  4002a0:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4002a2:	4b2a      	ldr	r3, [pc, #168]	; (40034c <local_twi_handler+0x22c>)
  4002a4:	687a      	ldr	r2, [r7, #4]
  4002a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002aa:	4928      	ldr	r1, [pc, #160]	; (40034c <local_twi_handler+0x22c>)
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	00db      	lsls	r3, r3, #3
  4002b0:	440b      	add	r3, r1
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	3b02      	subs	r3, #2
  4002b6:	4413      	add	r3, r2
  4002b8:	69ba      	ldr	r2, [r7, #24]
  4002ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4002bc:	b2d2      	uxtb	r2, r2
  4002be:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4002c0:	69bb      	ldr	r3, [r7, #24]
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	f003 0302 	and.w	r3, r3, #2
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d000      	beq.n	4002d2 <local_twi_handler+0x1b2>
				break;
  4002d0:	e008      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4002d2:	69fb      	ldr	r3, [r7, #28]
  4002d4:	3301      	adds	r3, #1
  4002d6:	61fb      	str	r3, [r7, #28]
  4002d8:	69fb      	ldr	r3, [r7, #28]
  4002da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002de:	d100      	bne.n	4002e2 <local_twi_handler+0x1c2>
				break;
  4002e0:	e000      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
		}
  4002e2:	e7ed      	b.n	4002c0 <local_twi_handler+0x1a0>

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ea:	d035      	beq.n	400358 <local_twi_handler+0x238>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  4002ec:	4b17      	ldr	r3, [pc, #92]	; (40034c <local_twi_handler+0x22c>)
  4002ee:	687a      	ldr	r2, [r7, #4]
  4002f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002f4:	4915      	ldr	r1, [pc, #84]	; (40034c <local_twi_handler+0x22c>)
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	00db      	lsls	r3, r3, #3
  4002fa:	440b      	add	r3, r1
  4002fc:	685b      	ldr	r3, [r3, #4]
  4002fe:	3b01      	subs	r3, #1
  400300:	4413      	add	r3, r2
  400302:	69ba      	ldr	r2, [r7, #24]
  400304:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400306:	b2d2      	uxtb	r2, r2
  400308:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40030a:	2300      	movs	r3, #0
  40030c:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40030e:	69bb      	ldr	r3, [r7, #24]
  400310:	6a1b      	ldr	r3, [r3, #32]
  400312:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	f003 0301 	and.w	r3, r3, #1
  40031a:	2b00      	cmp	r3, #0
  40031c:	d000      	beq.n	400320 <local_twi_handler+0x200>
					break;
  40031e:	e01b      	b.n	400358 <local_twi_handler+0x238>
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	3301      	adds	r3, #1
  400324:	61fb      	str	r3, [r7, #28]
  400326:	69fb      	ldr	r3, [r7, #28]
  400328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40032c:	d103      	bne.n	400336 <local_twi_handler+0x216>
					transfer_timeout = true;
  40032e:	2301      	movs	r3, #1
  400330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  400334:	e010      	b.n	400358 <local_twi_handler+0x238>
				}
			}
  400336:	e7ea      	b.n	40030e <local_twi_handler+0x1ee>
  400338:	004158e4 	.word	0x004158e4
  40033c:	00406701 	.word	0x00406701
  400340:	00406719 	.word	0x00406719
  400344:	0040a101 	.word	0x0040a101
  400348:	004066e1 	.word	0x004066e1
  40034c:	20000c54 	.word	0x20000c54
  400350:	20000c34 	.word	0x20000c34
  400354:	004087ed 	.word	0x004087ed
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400358:	4a35      	ldr	r2, [pc, #212]	; (400430 <local_twi_handler+0x310>)
  40035a:	687b      	ldr	r3, [r7, #4]
  40035c:	00db      	lsls	r3, r3, #3
  40035e:	4413      	add	r3, r2
  400360:	685b      	ldr	r3, [r3, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d00c      	beq.n	400380 <local_twi_handler+0x260>
			xSemaphoreGiveFromISR(
  400366:	4a32      	ldr	r2, [pc, #200]	; (400430 <local_twi_handler+0x310>)
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	00db      	lsls	r3, r3, #3
  40036c:	4413      	add	r3, r2
  40036e:	685a      	ldr	r2, [r3, #4]
  400370:	f107 0308 	add.w	r3, r7, #8
  400374:	4610      	mov	r0, r2
  400376:	2100      	movs	r1, #0
  400378:	461a      	mov	r2, r3
  40037a:	2300      	movs	r3, #0
  40037c:	4c2d      	ldr	r4, [pc, #180]	; (400434 <local_twi_handler+0x314>)
  40037e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	f1b3 3fff 	cmp.w	r3, #4294967295
  400386:	d011      	beq.n	4003ac <local_twi_handler+0x28c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <local_twi_handler+0x318>)
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400390:	2b00      	cmp	r3, #0
  400392:	d00b      	beq.n	4003ac <local_twi_handler+0x28c>
				xSemaphoreGiveFromISR(
  400394:	4b28      	ldr	r3, [pc, #160]	; (400438 <local_twi_handler+0x318>)
  400396:	687a      	ldr	r2, [r7, #4]
  400398:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40039c:	f107 0308 	add.w	r3, r7, #8
  4003a0:	4610      	mov	r0, r2
  4003a2:	2100      	movs	r1, #0
  4003a4:	461a      	mov	r2, r3
  4003a6:	2300      	movs	r3, #0
  4003a8:	4c22      	ldr	r4, [pc, #136]	; (400434 <local_twi_handler+0x314>)
  4003aa:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4003b2:	2b00      	cmp	r3, #0
  4003b4:	d103      	bne.n	4003be <local_twi_handler+0x29e>
  4003b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003ba:	2b00      	cmp	r3, #0
  4003bc:	d02f      	beq.n	40041e <local_twi_handler+0x2fe>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4003be:	4a1f      	ldr	r2, [pc, #124]	; (40043c <local_twi_handler+0x31c>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	011b      	lsls	r3, r3, #4
  4003c4:	4413      	add	r3, r2
  4003c6:	685b      	ldr	r3, [r3, #4]
  4003c8:	4618      	mov	r0, r3
  4003ca:	f240 2102 	movw	r1, #514	; 0x202
  4003ce:	4b1c      	ldr	r3, [pc, #112]	; (400440 <local_twi_handler+0x320>)
  4003d0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  4003d2:	697b      	ldr	r3, [r7, #20]
  4003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4003d8:	2b00      	cmp	r3, #0
  4003da:	d102      	bne.n	4003e2 <local_twi_handler+0x2c2>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  4003dc:	69bb      	ldr	r3, [r7, #24]
  4003de:	2202      	movs	r2, #2
  4003e0:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003e2:	69b8      	ldr	r0, [r7, #24]
  4003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003e8:	4b16      	ldr	r3, [pc, #88]	; (400444 <local_twi_handler+0x324>)
  4003ea:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4003ec:	69b8      	ldr	r0, [r7, #24]
  4003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4003f2:	4b14      	ldr	r3, [pc, #80]	; (400444 <local_twi_handler+0x324>)
  4003f4:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4003f6:	4a0e      	ldr	r2, [pc, #56]	; (400430 <local_twi_handler+0x310>)
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	00db      	lsls	r3, r3, #3
  4003fc:	4413      	add	r3, r2
  4003fe:	685b      	ldr	r3, [r3, #4]
  400400:	2b00      	cmp	r3, #0
  400402:	d00c      	beq.n	40041e <local_twi_handler+0x2fe>
			xSemaphoreGiveFromISR(
  400404:	4a0a      	ldr	r2, [pc, #40]	; (400430 <local_twi_handler+0x310>)
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	00db      	lsls	r3, r3, #3
  40040a:	4413      	add	r3, r2
  40040c:	685a      	ldr	r2, [r3, #4]
  40040e:	f107 0308 	add.w	r3, r7, #8
  400412:	4610      	mov	r0, r2
  400414:	2100      	movs	r1, #0
  400416:	461a      	mov	r2, r3
  400418:	2300      	movs	r3, #0
  40041a:	4c06      	ldr	r4, [pc, #24]	; (400434 <local_twi_handler+0x314>)
  40041c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	2b00      	cmp	r3, #0
  400422:	d001      	beq.n	400428 <local_twi_handler+0x308>
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <local_twi_handler+0x328>)
  400426:	4798      	blx	r3
}
  400428:	372c      	adds	r7, #44	; 0x2c
  40042a:	46bd      	mov	sp, r7
  40042c:	bd90      	pop	{r4, r7, pc}
  40042e:	bf00      	nop
  400430:	20000c34 	.word	0x20000c34
  400434:	004087ed 	.word	0x004087ed
  400438:	20000c44 	.word	0x20000c44
  40043c:	004158e4 	.word	0x004158e4
  400440:	0040a101 	.word	0x0040a101
  400444:	004066e1 	.word	0x004066e1
  400448:	00408171 	.word	0x00408171

0040044c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  400450:	2000      	movs	r0, #0
  400452:	4b01      	ldr	r3, [pc, #4]	; (400458 <TWI0_Handler+0xc>)
  400454:	4798      	blx	r3
}
  400456:	bd80      	pop	{r7, pc}
  400458:	00400121 	.word	0x00400121

0040045c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  400460:	2001      	movs	r0, #1
  400462:	4b01      	ldr	r3, [pc, #4]	; (400468 <TWI1_Handler+0xc>)
  400464:	4798      	blx	r3
}
  400466:	bd80      	pop	{r7, pc}
  400468:	00400121 	.word	0x00400121

0040046c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400472:	f3ef 8310 	mrs	r3, PRIMASK
  400476:	603b      	str	r3, [r7, #0]
  return(result);
  400478:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  40047a:	2b00      	cmp	r3, #0
  40047c:	bf14      	ite	ne
  40047e:	2300      	movne	r3, #0
  400480:	2301      	moveq	r3, #1
  400482:	b2db      	uxtb	r3, r3
  400484:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400486:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400488:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40048c:	4b04      	ldr	r3, [pc, #16]	; (4004a0 <cpu_irq_save+0x34>)
  40048e:	2200      	movs	r2, #0
  400490:	701a      	strb	r2, [r3, #0]
	return flags;
  400492:	687b      	ldr	r3, [r7, #4]
}
  400494:	4618      	mov	r0, r3
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40049e:	4770      	bx	lr
  4004a0:	20000364 	.word	0x20000364

004004a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4004a4:	b480      	push	{r7}
  4004a6:	b083      	sub	sp, #12
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	bf0c      	ite	eq
  4004b2:	2300      	moveq	r3, #0
  4004b4:	2301      	movne	r3, #1
  4004b6:	b2db      	uxtb	r3, r3
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	370c      	adds	r7, #12
  4004bc:	46bd      	mov	sp, r7
  4004be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c2:	4770      	bx	lr

004004c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4004c4:	b580      	push	{r7, lr}
  4004c6:	b082      	sub	sp, #8
  4004c8:	af00      	add	r7, sp, #0
  4004ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4004cc:	6878      	ldr	r0, [r7, #4]
  4004ce:	4b07      	ldr	r3, [pc, #28]	; (4004ec <cpu_irq_restore+0x28>)
  4004d0:	4798      	blx	r3
  4004d2:	4603      	mov	r3, r0
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d005      	beq.n	4004e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4004d8:	4b05      	ldr	r3, [pc, #20]	; (4004f0 <cpu_irq_restore+0x2c>)
  4004da:	2201      	movs	r2, #1
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4004e2:	b662      	cpsie	i
}
  4004e4:	3708      	adds	r7, #8
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bd80      	pop	{r7, pc}
  4004ea:	bf00      	nop
  4004ec:	004004a5 	.word	0x004004a5
  4004f0:	20000364 	.word	0x20000364

004004f4 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4004f4:	b480      	push	{r7}
  4004f6:	b083      	sub	sp, #12
  4004f8:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4004fa:	2300      	movs	r3, #0
  4004fc:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  4004fe:	4b41      	ldr	r3, [pc, #260]	; (400604 <udi_cdc_comm_enable+0x110>)
  400500:	2200      	movs	r2, #0
  400502:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400504:	79ba      	ldrb	r2, [r7, #6]
  400506:	4b40      	ldr	r3, [pc, #256]	; (400608 <udi_cdc_comm_enable+0x114>)
  400508:	2100      	movs	r1, #0
  40050a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  40050e:	79ba      	ldrb	r2, [r7, #6]
  400510:	493e      	ldr	r1, [pc, #248]	; (40060c <udi_cdc_comm_enable+0x118>)
  400512:	4613      	mov	r3, r2
  400514:	009b      	lsls	r3, r3, #2
  400516:	4413      	add	r3, r2
  400518:	005b      	lsls	r3, r3, #1
  40051a:	440b      	add	r3, r1
  40051c:	22a1      	movs	r2, #161	; 0xa1
  40051e:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400520:	79ba      	ldrb	r2, [r7, #6]
  400522:	493a      	ldr	r1, [pc, #232]	; (40060c <udi_cdc_comm_enable+0x118>)
  400524:	4613      	mov	r3, r2
  400526:	009b      	lsls	r3, r3, #2
  400528:	4413      	add	r3, r2
  40052a:	005b      	lsls	r3, r3, #1
  40052c:	440b      	add	r3, r1
  40052e:	2220      	movs	r2, #32
  400530:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400532:	79ba      	ldrb	r2, [r7, #6]
  400534:	4935      	ldr	r1, [pc, #212]	; (40060c <udi_cdc_comm_enable+0x118>)
  400536:	4613      	mov	r3, r2
  400538:	009b      	lsls	r3, r3, #2
  40053a:	4413      	add	r3, r2
  40053c:	005b      	lsls	r3, r3, #1
  40053e:	440b      	add	r3, r1
  400540:	2200      	movs	r2, #0
  400542:	805a      	strh	r2, [r3, #2]

	switch (port) {
  400544:	79bb      	ldrb	r3, [r7, #6]
  400546:	2b00      	cmp	r3, #0
  400548:	d102      	bne.n	400550 <udi_cdc_comm_enable+0x5c>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  40054a:	2300      	movs	r3, #0
  40054c:	71fb      	strb	r3, [r7, #7]
  40054e:	e002      	b.n	400556 <udi_cdc_comm_enable+0x62>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  400550:	2300      	movs	r3, #0
  400552:	71fb      	strb	r3, [r7, #7]
		break;
  400554:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400556:	79ba      	ldrb	r2, [r7, #6]
  400558:	79fb      	ldrb	r3, [r7, #7]
  40055a:	b299      	uxth	r1, r3
  40055c:	482b      	ldr	r0, [pc, #172]	; (40060c <udi_cdc_comm_enable+0x118>)
  40055e:	4613      	mov	r3, r2
  400560:	009b      	lsls	r3, r3, #2
  400562:	4413      	add	r3, r2
  400564:	005b      	lsls	r3, r3, #1
  400566:	4403      	add	r3, r0
  400568:	460a      	mov	r2, r1
  40056a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40056c:	79ba      	ldrb	r2, [r7, #6]
  40056e:	4927      	ldr	r1, [pc, #156]	; (40060c <udi_cdc_comm_enable+0x118>)
  400570:	4613      	mov	r3, r2
  400572:	009b      	lsls	r3, r3, #2
  400574:	4413      	add	r3, r2
  400576:	005b      	lsls	r3, r3, #1
  400578:	440b      	add	r3, r1
  40057a:	2202      	movs	r2, #2
  40057c:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40057e:	79ba      	ldrb	r2, [r7, #6]
  400580:	4922      	ldr	r1, [pc, #136]	; (40060c <udi_cdc_comm_enable+0x118>)
  400582:	4613      	mov	r3, r2
  400584:	009b      	lsls	r3, r3, #2
  400586:	4413      	add	r3, r2
  400588:	005b      	lsls	r3, r3, #1
  40058a:	440b      	add	r3, r1
  40058c:	3308      	adds	r3, #8
  40058e:	2200      	movs	r2, #0
  400590:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400592:	79ba      	ldrb	r2, [r7, #6]
  400594:	491e      	ldr	r1, [pc, #120]	; (400610 <udi_cdc_comm_enable+0x11c>)
  400596:	4613      	mov	r3, r2
  400598:	00db      	lsls	r3, r3, #3
  40059a:	1a9b      	subs	r3, r3, r2
  40059c:	440b      	add	r3, r1
  40059e:	2200      	movs	r2, #0
  4005a0:	701a      	strb	r2, [r3, #0]
  4005a2:	2200      	movs	r2, #0
  4005a4:	f062 027b 	orn	r2, r2, #123	; 0x7b
  4005a8:	705a      	strb	r2, [r3, #1]
  4005aa:	2200      	movs	r2, #0
  4005ac:	f042 0203 	orr.w	r2, r2, #3
  4005b0:	709a      	strb	r2, [r3, #2]
  4005b2:	2200      	movs	r2, #0
  4005b4:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4005b6:	79ba      	ldrb	r2, [r7, #6]
  4005b8:	4915      	ldr	r1, [pc, #84]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ba:	4613      	mov	r3, r2
  4005bc:	00db      	lsls	r3, r3, #3
  4005be:	1a9b      	subs	r3, r3, r2
  4005c0:	440b      	add	r3, r1
  4005c2:	2200      	movs	r2, #0
  4005c4:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4005c6:	79ba      	ldrb	r2, [r7, #6]
  4005c8:	4911      	ldr	r1, [pc, #68]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ca:	4613      	mov	r3, r2
  4005cc:	00db      	lsls	r3, r3, #3
  4005ce:	1a9b      	subs	r3, r3, r2
  4005d0:	440b      	add	r3, r1
  4005d2:	2200      	movs	r2, #0
  4005d4:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4005d6:	79ba      	ldrb	r2, [r7, #6]
  4005d8:	490d      	ldr	r1, [pc, #52]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005da:	4613      	mov	r3, r2
  4005dc:	00db      	lsls	r3, r3, #3
  4005de:	1a9b      	subs	r3, r3, r2
  4005e0:	440b      	add	r3, r1
  4005e2:	2208      	movs	r2, #8
  4005e4:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4005e6:	4b07      	ldr	r3, [pc, #28]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005e8:	781b      	ldrb	r3, [r3, #0]
  4005ea:	b2db      	uxtb	r3, r3
  4005ec:	3301      	adds	r3, #1
  4005ee:	b2da      	uxtb	r2, r3
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005f2:	701a      	strb	r2, [r3, #0]
	return true;
  4005f4:	2301      	movs	r3, #1
}
  4005f6:	4618      	mov	r0, r3
  4005f8:	370c      	adds	r7, #12
  4005fa:	46bd      	mov	sp, r7
  4005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	20000c7c 	.word	0x20000c7c
  400608:	20000c6c 	.word	0x20000c6c
  40060c:	20000c70 	.word	0x20000c70
  400610:	20000c64 	.word	0x20000c64

00400614 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  400614:	b580      	push	{r7, lr}
  400616:	b082      	sub	sp, #8
  400618:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40061a:	2300      	movs	r3, #0
  40061c:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  40061e:	4b2a      	ldr	r3, [pc, #168]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  400620:	2200      	movs	r2, #0
  400622:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400624:	79fb      	ldrb	r3, [r7, #7]
  400626:	4a29      	ldr	r2, [pc, #164]	; (4006cc <udi_cdc_data_enable+0xb8>)
  400628:	2100      	movs	r1, #0
  40062a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40062c:	79fb      	ldrb	r3, [r7, #7]
  40062e:	4a28      	ldr	r2, [pc, #160]	; (4006d0 <udi_cdc_data_enable+0xbc>)
  400630:	2100      	movs	r1, #0
  400632:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  400634:	79fb      	ldrb	r3, [r7, #7]
  400636:	4a27      	ldr	r2, [pc, #156]	; (4006d4 <udi_cdc_data_enable+0xc0>)
  400638:	2100      	movs	r1, #0
  40063a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40063c:	79fa      	ldrb	r2, [r7, #7]
  40063e:	4b26      	ldr	r3, [pc, #152]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  400640:	2100      	movs	r1, #0
  400642:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400646:	79fb      	ldrb	r3, [r7, #7]
  400648:	4a23      	ldr	r2, [pc, #140]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  40064a:	009b      	lsls	r3, r3, #2
  40064c:	4413      	add	r3, r2
  40064e:	2200      	movs	r2, #0
  400650:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400652:	79fa      	ldrb	r2, [r7, #7]
  400654:	4b21      	ldr	r3, [pc, #132]	; (4006dc <udi_cdc_data_enable+0xc8>)
  400656:	2100      	movs	r1, #0
  400658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_send(port);
  40065c:	79fb      	ldrb	r3, [r7, #7]
  40065e:	4618      	mov	r0, r3
  400660:	4b1f      	ldr	r3, [pc, #124]	; (4006e0 <udi_cdc_data_enable+0xcc>)
  400662:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400664:	79fb      	ldrb	r3, [r7, #7]
  400666:	4a1f      	ldr	r2, [pc, #124]	; (4006e4 <udi_cdc_data_enable+0xd0>)
  400668:	2100      	movs	r1, #0
  40066a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  40066c:	79fb      	ldrb	r3, [r7, #7]
  40066e:	4a1e      	ldr	r2, [pc, #120]	; (4006e8 <udi_cdc_data_enable+0xd4>)
  400670:	2100      	movs	r1, #0
  400672:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400674:	79fa      	ldrb	r2, [r7, #7]
  400676:	4b1d      	ldr	r3, [pc, #116]	; (4006ec <udi_cdc_data_enable+0xd8>)
  400678:	2100      	movs	r1, #0
  40067a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_rx_pos[port] = 0;
  40067e:	79fa      	ldrb	r2, [r7, #7]
  400680:	4b1b      	ldr	r3, [pc, #108]	; (4006f0 <udi_cdc_data_enable+0xdc>)
  400682:	2100      	movs	r1, #0
  400684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  400688:	79fb      	ldrb	r3, [r7, #7]
  40068a:	4618      	mov	r0, r3
  40068c:	4b19      	ldr	r3, [pc, #100]	; (4006f4 <udi_cdc_data_enable+0xe0>)
  40068e:	4798      	blx	r3
  400690:	4603      	mov	r3, r0
  400692:	f083 0301 	eor.w	r3, r3, #1
  400696:	b2db      	uxtb	r3, r3
  400698:	2b00      	cmp	r3, #0
  40069a:	d001      	beq.n	4006a0 <udi_cdc_data_enable+0x8c>
		return false;
  40069c:	2300      	movs	r3, #0
  40069e:	e00f      	b.n	4006c0 <udi_cdc_data_enable+0xac>
	}
	udi_cdc_nb_data_enabled++;
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006a2:	781b      	ldrb	r3, [r3, #0]
  4006a4:	b2db      	uxtb	r3, r3
  4006a6:	3301      	adds	r3, #1
  4006a8:	b2da      	uxtb	r2, r3
  4006aa:	4b07      	ldr	r3, [pc, #28]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006ac:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4006ae:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	b2db      	uxtb	r3, r3
  4006b4:	2b01      	cmp	r3, #1
  4006b6:	d102      	bne.n	4006be <udi_cdc_data_enable+0xaa>
		udi_cdc_data_running = true;
  4006b8:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <udi_cdc_data_enable+0xe4>)
  4006ba:	2201      	movs	r2, #1
  4006bc:	701a      	strb	r2, [r3, #0]
	}
	return true;
  4006be:	2301      	movs	r3, #1
}
  4006c0:	4618      	mov	r0, r3
  4006c2:	3708      	adds	r7, #8
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bd80      	pop	{r7, pc}
  4006c8:	20000c7d 	.word	0x20000c7d
  4006cc:	20000d9c 	.word	0x20000d9c
  4006d0:	20000da0 	.word	0x20000da0
  4006d4:	20000d94 	.word	0x20000d94
  4006d8:	20000d90 	.word	0x20000d90
  4006dc:	20000d98 	.word	0x20000d98
  4006e0:	00400aa9 	.word	0x00400aa9
  4006e4:	20000d0c 	.word	0x20000d0c
  4006e8:	20000d04 	.word	0x20000d04
  4006ec:	20000d00 	.word	0x20000d00
  4006f0:	20000d08 	.word	0x20000d08
  4006f4:	00400895 	.word	0x00400895
  4006f8:	20000c7e 	.word	0x20000c7e

004006fc <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  4006fc:	b480      	push	{r7}
  4006fe:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400700:	4b05      	ldr	r3, [pc, #20]	; (400718 <udi_cdc_comm_disable+0x1c>)
  400702:	781b      	ldrb	r3, [r3, #0]
  400704:	b2db      	uxtb	r3, r3
  400706:	3b01      	subs	r3, #1
  400708:	b2da      	uxtb	r2, r3
  40070a:	4b03      	ldr	r3, [pc, #12]	; (400718 <udi_cdc_comm_disable+0x1c>)
  40070c:	701a      	strb	r2, [r3, #0]
}
  40070e:	46bd      	mov	sp, r7
  400710:	f85d 7b04 	ldr.w	r7, [sp], #4
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	20000c7c 	.word	0x20000c7c

0040071c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400722:	4b09      	ldr	r3, [pc, #36]	; (400748 <udi_cdc_data_disable+0x2c>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	3b01      	subs	r3, #1
  40072a:	b2da      	uxtb	r2, r3
  40072c:	4b06      	ldr	r3, [pc, #24]	; (400748 <udi_cdc_data_disable+0x2c>)
  40072e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400730:	4b05      	ldr	r3, [pc, #20]	; (400748 <udi_cdc_data_disable+0x2c>)
  400732:	781b      	ldrb	r3, [r3, #0]
  400734:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <udi_cdc_data_disable+0x30>)
  400738:	2200      	movs	r2, #0
  40073a:	701a      	strb	r2, [r3, #0]
}
  40073c:	370c      	adds	r7, #12
  40073e:	46bd      	mov	sp, r7
  400740:	f85d 7b04 	ldr.w	r7, [sp], #4
  400744:	4770      	bx	lr
  400746:	bf00      	nop
  400748:	20000c7d 	.word	0x20000c7d
  40074c:	20000c7e 	.word	0x20000c7e

00400750 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  400750:	b580      	push	{r7, lr}
  400752:	b082      	sub	sp, #8
  400754:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400756:	4b2b      	ldr	r3, [pc, #172]	; (400804 <udi_cdc_comm_setup+0xb4>)
  400758:	4798      	blx	r3
  40075a:	4603      	mov	r3, r0
  40075c:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  40075e:	4b2a      	ldr	r3, [pc, #168]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400760:	781b      	ldrb	r3, [r3, #0]
  400762:	b2db      	uxtb	r3, r3
  400764:	b25b      	sxtb	r3, r3
  400766:	2b00      	cmp	r3, #0
  400768:	da1c      	bge.n	4007a4 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40076a:	4b27      	ldr	r3, [pc, #156]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40076c:	781b      	ldrb	r3, [r3, #0]
  40076e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400772:	2b20      	cmp	r3, #32
  400774:	d116      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400776:	4b24      	ldr	r3, [pc, #144]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400778:	785b      	ldrb	r3, [r3, #1]
  40077a:	2b21      	cmp	r3, #33	; 0x21
  40077c:	d112      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40077e:	4b22      	ldr	r3, [pc, #136]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400780:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400782:	2b07      	cmp	r3, #7
  400784:	d001      	beq.n	40078a <udi_cdc_comm_setup+0x3a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400786:	2300      	movs	r3, #0
  400788:	e038      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  40078a:	79fa      	ldrb	r2, [r7, #7]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  40078c:	4613      	mov	r3, r2
  40078e:	00db      	lsls	r3, r3, #3
  400790:	1a9b      	subs	r3, r3, r2
  400792:	4a1e      	ldr	r2, [pc, #120]	; (40080c <udi_cdc_comm_setup+0xbc>)
  400794:	441a      	add	r2, r3
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400796:	4b1c      	ldr	r3, [pc, #112]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400798:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40079a:	4b1b      	ldr	r3, [pc, #108]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40079c:	2207      	movs	r2, #7
  40079e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007a0:	2301      	movs	r3, #1
  4007a2:	e02b      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	if (Udd_setup_is_out()) {
  4007a4:	4b18      	ldr	r3, [pc, #96]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	b2db      	uxtb	r3, r3
  4007aa:	b25b      	sxtb	r3, r3
  4007ac:	2b00      	cmp	r3, #0
  4007ae:	db24      	blt.n	4007fa <udi_cdc_comm_setup+0xaa>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4007b0:	4b15      	ldr	r3, [pc, #84]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007b2:	781b      	ldrb	r3, [r3, #0]
  4007b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4007b8:	2b20      	cmp	r3, #32
  4007ba:	d11e      	bne.n	4007fa <udi_cdc_comm_setup+0xaa>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4007bc:	4b12      	ldr	r3, [pc, #72]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007be:	785b      	ldrb	r3, [r3, #1]
  4007c0:	2b20      	cmp	r3, #32
  4007c2:	d002      	beq.n	4007ca <udi_cdc_comm_setup+0x7a>
  4007c4:	2b22      	cmp	r3, #34	; 0x22
  4007c6:	d016      	beq.n	4007f6 <udi_cdc_comm_setup+0xa6>
  4007c8:	e017      	b.n	4007fa <udi_cdc_comm_setup+0xaa>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007cc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4007ce:	2b07      	cmp	r3, #7
  4007d0:	d001      	beq.n	4007d6 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4007d2:	2300      	movs	r3, #0
  4007d4:	e012      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.callback =
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007d8:	4a0d      	ldr	r2, [pc, #52]	; (400810 <udi_cdc_comm_setup+0xc0>)
  4007da:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4007dc:	79fa      	ldrb	r2, [r7, #7]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  4007de:	4613      	mov	r3, r2
  4007e0:	00db      	lsls	r3, r3, #3
  4007e2:	1a9b      	subs	r3, r3, r2
  4007e4:	4a09      	ldr	r2, [pc, #36]	; (40080c <udi_cdc_comm_setup+0xbc>)
  4007e6:	441a      	add	r2, r3
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4007e8:	4b07      	ldr	r3, [pc, #28]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ea:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4007ec:	4b06      	ldr	r3, [pc, #24]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ee:	2207      	movs	r2, #7
  4007f0:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007f2:	2301      	movs	r3, #1
  4007f4:	e002      	b.n	4007fc <udi_cdc_comm_setup+0xac>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  4007f6:	2301      	movs	r3, #1
  4007f8:	e000      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	return false;  // request Not supported
  4007fa:	2300      	movs	r3, #0
}
  4007fc:	4618      	mov	r0, r3
  4007fe:	3708      	adds	r7, #8
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	0040084d 	.word	0x0040084d
  400808:	2000894c 	.word	0x2000894c
  40080c:	20000c64 	.word	0x20000c64
  400810:	0040087d 	.word	0x0040087d

00400814 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  400814:	b480      	push	{r7}
  400816:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	46bd      	mov	sp, r7
  40081e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400822:	4770      	bx	lr

00400824 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  400824:	b480      	push	{r7}
  400826:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  400828:	2300      	movs	r3, #0
}
  40082a:	4618      	mov	r0, r3
  40082c:	46bd      	mov	sp, r7
  40082e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400832:	4770      	bx	lr

00400834 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  400834:	b580      	push	{r7, lr}
  400836:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <udi_cdc_data_sof_notify+0x10>)
  40083a:	781b      	ldrb	r3, [r3, #0]
  40083c:	4618      	mov	r0, r3
  40083e:	4b02      	ldr	r3, [pc, #8]	; (400848 <udi_cdc_data_sof_notify+0x14>)
  400840:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  400842:	bd80      	pop	{r7, pc}
  400844:	20000da4 	.word	0x20000da4
  400848:	00400aa9 	.word	0x00400aa9

0040084c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  400852:	4b09      	ldr	r3, [pc, #36]	; (400878 <udi_cdc_setup_to_port+0x2c>)
  400854:	889b      	ldrh	r3, [r3, #4]
  400856:	b2db      	uxtb	r3, r3
  400858:	2b00      	cmp	r3, #0
  40085a:	d102      	bne.n	400862 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  40085c:	2300      	movs	r3, #0
  40085e:	71fb      	strb	r3, [r7, #7]
  400860:	e002      	b.n	400868 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  400862:	2300      	movs	r3, #0
  400864:	71fb      	strb	r3, [r7, #7]
		break;
  400866:	bf00      	nop
	}
	return port;
  400868:	79fb      	ldrb	r3, [r7, #7]
}
  40086a:	4618      	mov	r0, r3
  40086c:	370c      	adds	r7, #12
  40086e:	46bd      	mov	sp, r7
  400870:	f85d 7b04 	ldr.w	r7, [sp], #4
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	2000894c 	.word	0x2000894c

0040087c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  40087c:	b580      	push	{r7, lr}
  40087e:	b082      	sub	sp, #8
  400880:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <udi_cdc_line_coding_received+0x14>)
  400884:	4798      	blx	r3
  400886:	4603      	mov	r3, r0
  400888:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  40088a:	3708      	adds	r7, #8
  40088c:	46bd      	mov	sp, r7
  40088e:	bd80      	pop	{r7, pc}
  400890:	0040084d 	.word	0x0040084d

00400894 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400894:	b590      	push	{r4, r7, lr}
  400896:	b089      	sub	sp, #36	; 0x24
  400898:	af02      	add	r7, sp, #8
  40089a:	4603      	mov	r3, r0
  40089c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40089e:	2300      	movs	r3, #0
  4008a0:	75bb      	strb	r3, [r7, #22]
#endif

	flags = cpu_irq_save();
  4008a2:	4b2c      	ldr	r3, [pc, #176]	; (400954 <udi_cdc_rx_start+0xc0>)
  4008a4:	4798      	blx	r3
  4008a6:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4008a8:	7dbb      	ldrb	r3, [r7, #22]
  4008aa:	4a2b      	ldr	r2, [pc, #172]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008ac:	5cd3      	ldrb	r3, [r2, r3]
  4008ae:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008b0:	7dbb      	ldrb	r3, [r7, #22]
  4008b2:	4a2a      	ldr	r2, [pc, #168]	; (40095c <udi_cdc_rx_start+0xc8>)
  4008b4:	5cd3      	ldrb	r3, [r2, r3]
  4008b6:	b2db      	uxtb	r3, r3
  4008b8:	2b00      	cmp	r3, #0
  4008ba:	d10d      	bne.n	4008d8 <udi_cdc_rx_start+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4008bc:	7dba      	ldrb	r2, [r7, #22]
  4008be:	4b28      	ldr	r3, [pc, #160]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  4008c4:	b29a      	uxth	r2, r3
  4008c6:	7db8      	ldrb	r0, [r7, #22]
  4008c8:	7bf9      	ldrb	r1, [r7, #15]
  4008ca:	4b26      	ldr	r3, [pc, #152]	; (400964 <udi_cdc_rx_start+0xd0>)
  4008cc:	0040      	lsls	r0, r0, #1
  4008ce:	4401      	add	r1, r0
  4008d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008d4:	429a      	cmp	r2, r3
  4008d6:	d204      	bcs.n	4008e2 <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  4008d8:	6938      	ldr	r0, [r7, #16]
  4008da:	4b23      	ldr	r3, [pc, #140]	; (400968 <udi_cdc_rx_start+0xd4>)
  4008dc:	4798      	blx	r3
		return false;
  4008de:	2300      	movs	r3, #0
  4008e0:	e033      	b.n	40094a <udi_cdc_rx_start+0xb6>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4008e2:	7dba      	ldrb	r2, [r7, #22]
  4008e4:	4b1e      	ldr	r3, [pc, #120]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008e6:	2100      	movs	r1, #0
  4008e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4008ec:	7dbb      	ldrb	r3, [r7, #22]
  4008ee:	7bfa      	ldrb	r2, [r7, #15]
  4008f0:	2a00      	cmp	r2, #0
  4008f2:	bf14      	ite	ne
  4008f4:	2200      	movne	r2, #0
  4008f6:	2201      	moveq	r2, #1
  4008f8:	b2d2      	uxtb	r2, r2
  4008fa:	4611      	mov	r1, r2
  4008fc:	4a16      	ldr	r2, [pc, #88]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008fe:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400900:	7dbb      	ldrb	r3, [r7, #22]
  400902:	4a16      	ldr	r2, [pc, #88]	; (40095c <udi_cdc_rx_start+0xc8>)
  400904:	2101      	movs	r1, #1
  400906:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400908:	6938      	ldr	r0, [r7, #16]
  40090a:	4b17      	ldr	r3, [pc, #92]	; (400968 <udi_cdc_rx_start+0xd4>)
  40090c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  40090e:	7dbb      	ldrb	r3, [r7, #22]
  400910:	4618      	mov	r0, r3
  400912:	4b16      	ldr	r3, [pc, #88]	; (40096c <udi_cdc_rx_start+0xd8>)
  400914:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
  400916:	7dbb      	ldrb	r3, [r7, #22]
  400918:	2b00      	cmp	r3, #0
  40091a:	d102      	bne.n	400922 <udi_cdc_rx_start+0x8e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  40091c:	2302      	movs	r3, #2
  40091e:	75fb      	strb	r3, [r7, #23]
  400920:	e002      	b.n	400928 <udi_cdc_rx_start+0x94>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  400922:	2302      	movs	r3, #2
  400924:	75fb      	strb	r3, [r7, #23]
		break;
  400926:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  400928:	7dba      	ldrb	r2, [r7, #22]
  40092a:	7bfb      	ldrb	r3, [r7, #15]
  40092c:	0052      	lsls	r2, r2, #1
  40092e:	4413      	add	r3, r2
  400930:	019a      	lsls	r2, r3, #6
  400932:	4b0f      	ldr	r3, [pc, #60]	; (400970 <udi_cdc_rx_start+0xdc>)
  400934:	4413      	add	r3, r2
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400936:	7dfa      	ldrb	r2, [r7, #23]
  400938:	490e      	ldr	r1, [pc, #56]	; (400974 <udi_cdc_rx_start+0xe0>)
  40093a:	9100      	str	r1, [sp, #0]
  40093c:	4610      	mov	r0, r2
  40093e:	2101      	movs	r1, #1
  400940:	461a      	mov	r2, r3
  400942:	2340      	movs	r3, #64	; 0x40
  400944:	4c0c      	ldr	r4, [pc, #48]	; (400978 <udi_cdc_rx_start+0xe4>)
  400946:	47a0      	blx	r4
  400948:	4603      	mov	r3, r0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  40094a:	4618      	mov	r0, r3
  40094c:	371c      	adds	r7, #28
  40094e:	46bd      	mov	sp, r7
  400950:	bd90      	pop	{r4, r7, pc}
  400952:	bf00      	nop
  400954:	0040046d 	.word	0x0040046d
  400958:	20000d04 	.word	0x20000d04
  40095c:	20000d0c 	.word	0x20000d0c
  400960:	20000d08 	.word	0x20000d08
  400964:	20000d00 	.word	0x20000d00
  400968:	004004c5 	.word	0x004004c5
  40096c:	00400cd1 	.word	0x00400cd1
  400970:	20000c80 	.word	0x20000c80
  400974:	0040097d 	.word	0x0040097d
  400978:	00402789 	.word	0x00402789

0040097c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40097c:	b590      	push	{r4, r7, lr}
  40097e:	b087      	sub	sp, #28
  400980:	af02      	add	r7, sp, #8
  400982:	6039      	str	r1, [r7, #0]
  400984:	4613      	mov	r3, r2
  400986:	4602      	mov	r2, r0
  400988:	71fa      	strb	r2, [r7, #7]
  40098a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  40098c:	79bb      	ldrb	r3, [r7, #6]
  40098e:	2b02      	cmp	r3, #2
  400990:	d102      	bne.n	400998 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  400992:	2300      	movs	r3, #0
  400994:	73fb      	strb	r3, [r7, #15]
  400996:	e002      	b.n	40099e <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  400998:	2300      	movs	r3, #0
  40099a:	73fb      	strb	r3, [r7, #15]
		break;
  40099c:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40099e:	79fb      	ldrb	r3, [r7, #7]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d000      	beq.n	4009a6 <udi_cdc_data_received+0x2a>
		// Abort reception
		return;
  4009a4:	e02e      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4009a6:	7bfb      	ldrb	r3, [r7, #15]
  4009a8:	4a18      	ldr	r2, [pc, #96]	; (400a0c <udi_cdc_data_received+0x90>)
  4009aa:	5cd3      	ldrb	r3, [r2, r3]
  4009ac:	b2db      	uxtb	r3, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bf14      	ite	ne
  4009b2:	2300      	movne	r3, #0
  4009b4:	2301      	moveq	r3, #1
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  4009ba:	683b      	ldr	r3, [r7, #0]
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d110      	bne.n	4009e2 <udi_cdc_data_received+0x66>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  4009c0:	7bfa      	ldrb	r2, [r7, #15]
  4009c2:	7bbb      	ldrb	r3, [r7, #14]
  4009c4:	0052      	lsls	r2, r2, #1
  4009c6:	4413      	add	r3, r2
  4009c8:	019a      	lsls	r2, r3, #6
  4009ca:	4b11      	ldr	r3, [pc, #68]	; (400a10 <udi_cdc_data_received+0x94>)
  4009cc:	4413      	add	r3, r2
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
  4009ce:	79ba      	ldrb	r2, [r7, #6]
  4009d0:	4910      	ldr	r1, [pc, #64]	; (400a14 <udi_cdc_data_received+0x98>)
  4009d2:	9100      	str	r1, [sp, #0]
  4009d4:	4610      	mov	r0, r2
  4009d6:	2101      	movs	r1, #1
  4009d8:	461a      	mov	r2, r3
  4009da:	2340      	movs	r3, #64	; 0x40
  4009dc:	4c0e      	ldr	r4, [pc, #56]	; (400a18 <udi_cdc_data_received+0x9c>)
  4009de:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4009e0:	e010      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4009e2:	7bf8      	ldrb	r0, [r7, #15]
  4009e4:	7bba      	ldrb	r2, [r7, #14]
  4009e6:	683b      	ldr	r3, [r7, #0]
  4009e8:	b299      	uxth	r1, r3
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <udi_cdc_data_received+0xa0>)
  4009ec:	0040      	lsls	r0, r0, #1
  4009ee:	4402      	add	r2, r0
  4009f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4009f4:	7bfb      	ldrb	r3, [r7, #15]
  4009f6:	4a0a      	ldr	r2, [pc, #40]	; (400a20 <udi_cdc_data_received+0xa4>)
  4009f8:	2100      	movs	r1, #0
  4009fa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  4009fc:	7bfb      	ldrb	r3, [r7, #15]
  4009fe:	4618      	mov	r0, r3
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <udi_cdc_data_received+0xa8>)
  400a02:	4798      	blx	r3
}
  400a04:	3714      	adds	r7, #20
  400a06:	46bd      	mov	sp, r7
  400a08:	bd90      	pop	{r4, r7, pc}
  400a0a:	bf00      	nop
  400a0c:	20000d04 	.word	0x20000d04
  400a10:	20000c80 	.word	0x20000c80
  400a14:	0040097d 	.word	0x0040097d
  400a18:	00402789 	.word	0x00402789
  400a1c:	20000d00 	.word	0x20000d00
  400a20:	20000d0c 	.word	0x20000d0c
  400a24:	00400895 	.word	0x00400895

00400a28 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6039      	str	r1, [r7, #0]
  400a30:	4613      	mov	r3, r2
  400a32:	4602      	mov	r2, r0
  400a34:	71fa      	strb	r2, [r7, #7]
  400a36:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  400a38:	79bb      	ldrb	r3, [r7, #6]
  400a3a:	2b81      	cmp	r3, #129	; 0x81
  400a3c:	d102      	bne.n	400a44 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  400a3e:	2300      	movs	r3, #0
  400a40:	73fb      	strb	r3, [r7, #15]
  400a42:	e002      	b.n	400a4a <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  400a44:	2300      	movs	r3, #0
  400a46:	73fb      	strb	r3, [r7, #15]
		break;
  400a48:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a4a:	79fb      	ldrb	r3, [r7, #7]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d000      	beq.n	400a52 <udi_cdc_data_sent+0x2a>
		// Abort transfer
		return;
  400a50:	e01c      	b.n	400a8c <udi_cdc_data_sent+0x64>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a52:	7bf9      	ldrb	r1, [r7, #15]
  400a54:	7bfb      	ldrb	r3, [r7, #15]
  400a56:	4a0f      	ldr	r2, [pc, #60]	; (400a94 <udi_cdc_data_sent+0x6c>)
  400a58:	5cd3      	ldrb	r3, [r2, r3]
  400a5a:	b2db      	uxtb	r3, r3
  400a5c:	2b00      	cmp	r3, #0
  400a5e:	bf14      	ite	ne
  400a60:	2300      	movne	r3, #0
  400a62:	2301      	moveq	r3, #1
  400a64:	b2db      	uxtb	r3, r3
  400a66:	461a      	mov	r2, r3
  400a68:	4b0b      	ldr	r3, [pc, #44]	; (400a98 <udi_cdc_data_sent+0x70>)
  400a6a:	0049      	lsls	r1, r1, #1
  400a6c:	440a      	add	r2, r1
  400a6e:	2100      	movs	r1, #0
  400a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400a74:	7bfb      	ldrb	r3, [r7, #15]
  400a76:	4a09      	ldr	r2, [pc, #36]	; (400a9c <udi_cdc_data_sent+0x74>)
  400a78:	2100      	movs	r1, #0
  400a7a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  400a7c:	7bfb      	ldrb	r3, [r7, #15]
  400a7e:	4a08      	ldr	r2, [pc, #32]	; (400aa0 <udi_cdc_data_sent+0x78>)
  400a80:	2100      	movs	r1, #0
  400a82:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400a84:	7bfb      	ldrb	r3, [r7, #15]
  400a86:	4618      	mov	r0, r3
  400a88:	4b06      	ldr	r3, [pc, #24]	; (400aa4 <udi_cdc_data_sent+0x7c>)
  400a8a:	4798      	blx	r3
}
  400a8c:	3710      	adds	r7, #16
  400a8e:	46bd      	mov	sp, r7
  400a90:	bd80      	pop	{r7, pc}
  400a92:	bf00      	nop
  400a94:	20000d94 	.word	0x20000d94
  400a98:	20000d90 	.word	0x20000d90
  400a9c:	20000da0 	.word	0x20000da0
  400aa0:	20000d9c 	.word	0x20000d9c
  400aa4:	00400aa9 	.word	0x00400aa9

00400aa8 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  400aa8:	b590      	push	{r4, r7, lr}
  400aaa:	b089      	sub	sp, #36	; 0x24
  400aac:	af02      	add	r7, sp, #8
  400aae:	4603      	mov	r3, r0
  400ab0:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400ab2:	2300      	movs	r3, #0
  400ab4:	757b      	strb	r3, [r7, #21]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400ab6:	7d7b      	ldrb	r3, [r7, #21]
  400ab8:	4a5f      	ldr	r2, [pc, #380]	; (400c38 <udi_cdc_tx_send+0x190>)
  400aba:	5cd3      	ldrb	r3, [r2, r3]
  400abc:	b2db      	uxtb	r3, r3
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d000      	beq.n	400ac4 <udi_cdc_tx_send+0x1c>
		return; // Already on going or wait next SOF to send next data
  400ac2:	e0b5      	b.n	400c30 <udi_cdc_tx_send+0x188>
	}
	if (udd_is_high_speed()) {
  400ac4:	4b5d      	ldr	r3, [pc, #372]	; (400c3c <udi_cdc_tx_send+0x194>)
  400ac6:	4798      	blx	r3
  400ac8:	4603      	mov	r3, r0
  400aca:	2b00      	cmp	r3, #0
  400acc:	d009      	beq.n	400ae2 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400ace:	7d7a      	ldrb	r2, [r7, #21]
  400ad0:	4b5b      	ldr	r3, [pc, #364]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ad2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400ad6:	4b5b      	ldr	r3, [pc, #364]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400ad8:	4798      	blx	r3
  400ada:	4603      	mov	r3, r0
  400adc:	429c      	cmp	r4, r3
  400ade:	d10a      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400ae0:	e0a6      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400ae2:	7d7a      	ldrb	r2, [r7, #21]
  400ae4:	4b56      	ldr	r3, [pc, #344]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ae6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400aea:	4b57      	ldr	r3, [pc, #348]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400aec:	4798      	blx	r3
  400aee:	4603      	mov	r3, r0
  400af0:	429c      	cmp	r4, r3
  400af2:	d100      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400af4:	e09c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  400af6:	4b55      	ldr	r3, [pc, #340]	; (400c4c <udi_cdc_tx_send+0x1a4>)
  400af8:	4798      	blx	r3
  400afa:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400afc:	7d7b      	ldrb	r3, [r7, #21]
  400afe:	4a54      	ldr	r2, [pc, #336]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b00:	5cd3      	ldrb	r3, [r2, r3]
  400b02:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400b04:	7d79      	ldrb	r1, [r7, #21]
  400b06:	7dfa      	ldrb	r2, [r7, #23]
  400b08:	4b52      	ldr	r3, [pc, #328]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400b0a:	0049      	lsls	r1, r1, #1
  400b0c:	440a      	add	r2, r1
  400b0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400b12:	2b00      	cmp	r3, #0
  400b14:	d11f      	bne.n	400b56 <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  400b16:	4b50      	ldr	r3, [pc, #320]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b18:	881b      	ldrh	r3, [r3, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b29a      	uxth	r2, r3
  400b1e:	4b4e      	ldr	r3, [pc, #312]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b20:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400b22:	4b46      	ldr	r3, [pc, #280]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b24:	4798      	blx	r3
  400b26:	4603      	mov	r3, r0
  400b28:	f083 0301 	eor.w	r3, r3, #1
  400b2c:	b2db      	uxtb	r3, r3
  400b2e:	2b00      	cmp	r3, #0
  400b30:	d003      	beq.n	400b3a <udi_cdc_tx_send+0x92>
  400b32:	4b49      	ldr	r3, [pc, #292]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b34:	881b      	ldrh	r3, [r3, #0]
  400b36:	2b63      	cmp	r3, #99	; 0x63
  400b38:	d909      	bls.n	400b4e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400b3a:	4b40      	ldr	r3, [pc, #256]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	2b00      	cmp	r3, #0
  400b42:	d008      	beq.n	400b56 <udi_cdc_tx_send+0xae>
  400b44:	4b44      	ldr	r3, [pc, #272]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b46:	881b      	ldrh	r3, [r3, #0]
  400b48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400b4c:	d203      	bcs.n	400b56 <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  400b4e:	6938      	ldr	r0, [r7, #16]
  400b50:	4b42      	ldr	r3, [pc, #264]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b52:	4798      	blx	r3
			return;
  400b54:	e06c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}
	sof_zlp_counter = 0;
  400b56:	4b40      	ldr	r3, [pc, #256]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b58:	2200      	movs	r2, #0
  400b5a:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400b5c:	7d7b      	ldrb	r3, [r7, #21]
  400b5e:	4a40      	ldr	r2, [pc, #256]	; (400c60 <udi_cdc_tx_send+0x1b8>)
  400b60:	5cd3      	ldrb	r3, [r2, r3]
  400b62:	b2db      	uxtb	r3, r3
  400b64:	f083 0301 	eor.w	r3, r3, #1
  400b68:	b2db      	uxtb	r3, r3
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	d00a      	beq.n	400b84 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b6e:	7d7b      	ldrb	r3, [r7, #21]
  400b70:	7dfa      	ldrb	r2, [r7, #23]
  400b72:	2a00      	cmp	r2, #0
  400b74:	bf14      	ite	ne
  400b76:	2200      	movne	r2, #0
  400b78:	2201      	moveq	r2, #1
  400b7a:	b2d2      	uxtb	r2, r2
  400b7c:	4611      	mov	r1, r2
  400b7e:	4a34      	ldr	r2, [pc, #208]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b80:	54d1      	strb	r1, [r2, r3]
  400b82:	e006      	b.n	400b92 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400b84:	7dfb      	ldrb	r3, [r7, #23]
  400b86:	2b00      	cmp	r3, #0
  400b88:	bf14      	ite	ne
  400b8a:	2300      	movne	r3, #0
  400b8c:	2301      	moveq	r3, #1
  400b8e:	b2db      	uxtb	r3, r3
  400b90:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400b92:	7d7b      	ldrb	r3, [r7, #21]
  400b94:	4a28      	ldr	r2, [pc, #160]	; (400c38 <udi_cdc_tx_send+0x190>)
  400b96:	2101      	movs	r1, #1
  400b98:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400b9a:	6938      	ldr	r0, [r7, #16]
  400b9c:	4b2f      	ldr	r3, [pc, #188]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b9e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400ba0:	7d79      	ldrb	r1, [r7, #21]
  400ba2:	7dfa      	ldrb	r2, [r7, #23]
  400ba4:	4b2b      	ldr	r3, [pc, #172]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400ba6:	0049      	lsls	r1, r1, #1
  400ba8:	440a      	add	r2, r1
  400baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400bae:	2b40      	cmp	r3, #64	; 0x40
  400bb0:	bf0c      	ite	eq
  400bb2:	2300      	moveq	r3, #0
  400bb4:	2301      	movne	r3, #1
  400bb6:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  400bb8:	7bfb      	ldrb	r3, [r7, #15]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d016      	beq.n	400bec <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
  400bbe:	4b1f      	ldr	r3, [pc, #124]	; (400c3c <udi_cdc_tx_send+0x194>)
  400bc0:	4798      	blx	r3
  400bc2:	4603      	mov	r3, r0
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d008      	beq.n	400bda <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400bc8:	7d7c      	ldrb	r4, [r7, #21]
  400bca:	4b1e      	ldr	r3, [pc, #120]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400bcc:	4798      	blx	r3
  400bce:	4603      	mov	r3, r0
  400bd0:	461a      	mov	r2, r3
  400bd2:	4b1b      	ldr	r3, [pc, #108]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bd8:	e00d      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400bda:	7d7c      	ldrb	r4, [r7, #21]
  400bdc:	4b1a      	ldr	r3, [pc, #104]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400bde:	4798      	blx	r3
  400be0:	4603      	mov	r3, r0
  400be2:	461a      	mov	r2, r3
  400be4:	4b16      	ldr	r3, [pc, #88]	; (400c40 <udi_cdc_tx_send+0x198>)
  400be6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bea:	e004      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400bec:	7d7a      	ldrb	r2, [r7, #21]
  400bee:	4b14      	ldr	r3, [pc, #80]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bf0:	2100      	movs	r1, #0
  400bf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  400bf6:	7d7b      	ldrb	r3, [r7, #21]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d102      	bne.n	400c02 <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  400bfc:	2381      	movs	r3, #129	; 0x81
  400bfe:	75bb      	strb	r3, [r7, #22]
  400c00:	e002      	b.n	400c08 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  400c02:	2381      	movs	r3, #129	; 0x81
  400c04:	75bb      	strb	r3, [r7, #22]
		break;
  400c06:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  400c08:	7d7a      	ldrb	r2, [r7, #21]
  400c0a:	7dfb      	ldrb	r3, [r7, #23]
  400c0c:	0052      	lsls	r2, r2, #1
  400c0e:	4413      	add	r3, r2
  400c10:	019a      	lsls	r2, r3, #6
  400c12:	4b14      	ldr	r3, [pc, #80]	; (400c64 <udi_cdc_tx_send+0x1bc>)
  400c14:	441a      	add	r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400c16:	7d78      	ldrb	r0, [r7, #21]
  400c18:	7df9      	ldrb	r1, [r7, #23]
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400c1c:	0040      	lsls	r0, r0, #1
  400c1e:	4401      	add	r1, r0
  400c20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400c24:	7db8      	ldrb	r0, [r7, #22]
  400c26:	7bf9      	ldrb	r1, [r7, #15]
  400c28:	4c0f      	ldr	r4, [pc, #60]	; (400c68 <udi_cdc_tx_send+0x1c0>)
  400c2a:	9400      	str	r4, [sp, #0]
  400c2c:	4c0f      	ldr	r4, [pc, #60]	; (400c6c <udi_cdc_tx_send+0x1c4>)
  400c2e:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400c30:	371c      	adds	r7, #28
  400c32:	46bd      	mov	sp, r7
  400c34:	bd90      	pop	{r4, r7, pc}
  400c36:	bf00      	nop
  400c38:	20000d9c 	.word	0x20000d9c
  400c3c:	00402245 	.word	0x00402245
  400c40:	20000d98 	.word	0x20000d98
  400c44:	00402309 	.word	0x00402309
  400c48:	004022e9 	.word	0x004022e9
  400c4c:	0040046d 	.word	0x0040046d
  400c50:	20000d94 	.word	0x20000d94
  400c54:	20000d90 	.word	0x20000d90
  400c58:	20000da6 	.word	0x20000da6
  400c5c:	004004c5 	.word	0x004004c5
  400c60:	20000da0 	.word	0x20000da0
  400c64:	20000d10 	.word	0x20000d10
  400c68:	00400a29 	.word	0x00400a29
  400c6c:	00402789 	.word	0x00402789

00400c70 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400c70:	b580      	push	{r7, lr}
  400c72:	b086      	sub	sp, #24
  400c74:	af00      	add	r7, sp, #0
  400c76:	4603      	mov	r3, r0
  400c78:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400c7a:	2300      	movs	r3, #0
  400c7c:	75fb      	strb	r3, [r7, #23]
#endif
	flags = cpu_irq_save();
  400c7e:	4b0f      	ldr	r3, [pc, #60]	; (400cbc <udi_cdc_multi_get_nb_received_data+0x4c>)
  400c80:	4798      	blx	r3
  400c82:	6138      	str	r0, [r7, #16]
	pos = udi_cdc_rx_pos[port];
  400c84:	7dfa      	ldrb	r2, [r7, #23]
  400c86:	4b0e      	ldr	r3, [pc, #56]	; (400cc0 <udi_cdc_multi_get_nb_received_data+0x50>)
  400c88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400c8c:	81fb      	strh	r3, [r7, #14]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400c8e:	7df9      	ldrb	r1, [r7, #23]
  400c90:	7dfb      	ldrb	r3, [r7, #23]
  400c92:	4a0c      	ldr	r2, [pc, #48]	; (400cc4 <udi_cdc_multi_get_nb_received_data+0x54>)
  400c94:	5cd3      	ldrb	r3, [r2, r3]
  400c96:	b2db      	uxtb	r3, r3
  400c98:	461a      	mov	r2, r3
  400c9a:	4b0b      	ldr	r3, [pc, #44]	; (400cc8 <udi_cdc_multi_get_nb_received_data+0x58>)
  400c9c:	0049      	lsls	r1, r1, #1
  400c9e:	440a      	add	r2, r1
  400ca0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400ca4:	461a      	mov	r2, r3
  400ca6:	89fb      	ldrh	r3, [r7, #14]
  400ca8:	1ad3      	subs	r3, r2, r3
  400caa:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400cac:	6938      	ldr	r0, [r7, #16]
  400cae:	4b07      	ldr	r3, [pc, #28]	; (400ccc <udi_cdc_multi_get_nb_received_data+0x5c>)
  400cb0:	4798      	blx	r3
	return nb_received;
  400cb2:	68bb      	ldr	r3, [r7, #8]
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	3718      	adds	r7, #24
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	0040046d 	.word	0x0040046d
  400cc0:	20000d08 	.word	0x20000d08
  400cc4:	20000d04 	.word	0x20000d04
  400cc8:	20000d00 	.word	0x20000d00
  400ccc:	004004c5 	.word	0x004004c5

00400cd0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	4618      	mov	r0, r3
  400cde:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <udi_cdc_multi_is_rx_ready+0x28>)
  400ce0:	4798      	blx	r3
  400ce2:	4603      	mov	r3, r0
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	bf0c      	ite	eq
  400ce8:	2300      	moveq	r3, #0
  400cea:	2301      	movne	r3, #1
  400cec:	b2db      	uxtb	r3, r3
}
  400cee:	4618      	mov	r0, r3
  400cf0:	3708      	adds	r7, #8
  400cf2:	46bd      	mov	sp, r7
  400cf4:	bd80      	pop	{r7, pc}
  400cf6:	bf00      	nop
  400cf8:	00400c71 	.word	0x00400c71

00400cfc <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
  400d00:	2000      	movs	r0, #0
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <udi_cdc_is_rx_ready+0x10>)
  400d04:	4798      	blx	r3
  400d06:	4603      	mov	r3, r0
}
  400d08:	4618      	mov	r0, r3
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cd1 	.word	0x00400cd1

00400d10 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400d10:	b580      	push	{r7, lr}
  400d12:	b086      	sub	sp, #24
  400d14:	af00      	add	r7, sp, #0
  400d16:	4603      	mov	r3, r0
  400d18:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	int rx_data = 0;
  400d1a:	2300      	movs	r3, #0
  400d1c:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400d1e:	2300      	movs	r3, #0
  400d20:	74bb      	strb	r3, [r7, #18]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400d22:	7cba      	ldrb	r2, [r7, #18]
  400d24:	492a      	ldr	r1, [pc, #168]	; (400dd0 <udi_cdc_multi_getc+0xc0>)
  400d26:	4613      	mov	r3, r2
  400d28:	00db      	lsls	r3, r3, #3
  400d2a:	1a9b      	subs	r3, r3, r2
  400d2c:	440b      	add	r3, r1
  400d2e:	799b      	ldrb	r3, [r3, #6]
  400d30:	2b09      	cmp	r3, #9
  400d32:	bf14      	ite	ne
  400d34:	2300      	movne	r3, #0
  400d36:	2301      	moveq	r3, #1
  400d38:	74fb      	strb	r3, [r7, #19]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
  400d3a:	4b26      	ldr	r3, [pc, #152]	; (400dd4 <udi_cdc_multi_getc+0xc4>)
  400d3c:	4798      	blx	r3
  400d3e:	60f8      	str	r0, [r7, #12]
	pos = udi_cdc_rx_pos[port];
  400d40:	7cba      	ldrb	r2, [r7, #18]
  400d42:	4b25      	ldr	r3, [pc, #148]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d48:	817b      	strh	r3, [r7, #10]
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d4a:	7cbb      	ldrb	r3, [r7, #18]
  400d4c:	4a23      	ldr	r2, [pc, #140]	; (400ddc <udi_cdc_multi_getc+0xcc>)
  400d4e:	5cd3      	ldrb	r3, [r2, r3]
  400d50:	727b      	strb	r3, [r7, #9]
	cpu_irq_restore(flags);
  400d52:	68f8      	ldr	r0, [r7, #12]
  400d54:	4b22      	ldr	r3, [pc, #136]	; (400de0 <udi_cdc_multi_getc+0xd0>)
  400d56:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400d58:	bf00      	nop
  400d5a:	7cb9      	ldrb	r1, [r7, #18]
  400d5c:	7a7a      	ldrb	r2, [r7, #9]
  400d5e:	4b21      	ldr	r3, [pc, #132]	; (400de4 <udi_cdc_multi_getc+0xd4>)
  400d60:	0049      	lsls	r1, r1, #1
  400d62:	440a      	add	r2, r1
  400d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d68:	897a      	ldrh	r2, [r7, #10]
  400d6a:	429a      	cmp	r2, r3
  400d6c:	d30a      	bcc.n	400d84 <udi_cdc_multi_getc+0x74>
		if (!udi_cdc_data_running) {
  400d6e:	4b1e      	ldr	r3, [pc, #120]	; (400de8 <udi_cdc_multi_getc+0xd8>)
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	f083 0301 	eor.w	r3, r3, #1
  400d78:	b2db      	uxtb	r3, r3
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d001      	beq.n	400d82 <udi_cdc_multi_getc+0x72>
			return 0;
  400d7e:	2300      	movs	r3, #0
  400d80:	e022      	b.n	400dc8 <udi_cdc_multi_getc+0xb8>
		}
		goto udi_cdc_getc_process_one_byte;
  400d82:	e7da      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d84:	7cb8      	ldrb	r0, [r7, #18]
  400d86:	7a79      	ldrb	r1, [r7, #9]
  400d88:	897b      	ldrh	r3, [r7, #10]
  400d8a:	4a18      	ldr	r2, [pc, #96]	; (400dec <udi_cdc_multi_getc+0xdc>)
  400d8c:	0040      	lsls	r0, r0, #1
  400d8e:	4401      	add	r1, r0
  400d90:	0189      	lsls	r1, r1, #6
  400d92:	440b      	add	r3, r1
  400d94:	4413      	add	r3, r2
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	697a      	ldr	r2, [r7, #20]
  400d9a:	4313      	orrs	r3, r2
  400d9c:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
  400d9e:	7cba      	ldrb	r2, [r7, #18]
  400da0:	897b      	ldrh	r3, [r7, #10]
  400da2:	3301      	adds	r3, #1
  400da4:	b299      	uxth	r1, r3
  400da6:	4b0c      	ldr	r3, [pc, #48]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	udi_cdc_rx_start(port);
  400dac:	7cbb      	ldrb	r3, [r7, #18]
  400dae:	4618      	mov	r0, r3
  400db0:	4b0f      	ldr	r3, [pc, #60]	; (400df0 <udi_cdc_multi_getc+0xe0>)
  400db2:	4798      	blx	r3

	if (b_databit_9) {
  400db4:	7cfb      	ldrb	r3, [r7, #19]
  400db6:	2b00      	cmp	r3, #0
  400db8:	d005      	beq.n	400dc6 <udi_cdc_multi_getc+0xb6>
		// Receive MSB
		b_databit_9 = false;
  400dba:	2300      	movs	r3, #0
  400dbc:	74fb      	strb	r3, [r7, #19]
		rx_data = rx_data << 8;
  400dbe:	697b      	ldr	r3, [r7, #20]
  400dc0:	021b      	lsls	r3, r3, #8
  400dc2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
  400dc4:	e7b9      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}
	return rx_data;
  400dc6:	697b      	ldr	r3, [r7, #20]
}
  400dc8:	4618      	mov	r0, r3
  400dca:	3718      	adds	r7, #24
  400dcc:	46bd      	mov	sp, r7
  400dce:	bd80      	pop	{r7, pc}
  400dd0:	20000c64 	.word	0x20000c64
  400dd4:	0040046d 	.word	0x0040046d
  400dd8:	20000d08 	.word	0x20000d08
  400ddc:	20000d04 	.word	0x20000d04
  400de0:	004004c5 	.word	0x004004c5
  400de4:	20000d00 	.word	0x20000d00
  400de8:	20000c7e 	.word	0x20000c7e
  400dec:	20000c80 	.word	0x20000c80
  400df0:	00400895 	.word	0x00400895

00400df4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
  400df8:	2000      	movs	r0, #0
  400dfa:	4b02      	ldr	r3, [pc, #8]	; (400e04 <udi_cdc_getc+0x10>)
  400dfc:	4798      	blx	r3
  400dfe:	4603      	mov	r3, r0
}
  400e00:	4618      	mov	r0, r3
  400e02:	bd80      	pop	{r7, pc}
  400e04:	00400d11 	.word	0x00400d11

00400e08 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	b088      	sub	sp, #32
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	4603      	mov	r3, r0
  400e10:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400e12:	2300      	movs	r3, #0
  400e14:	76fb      	strb	r3, [r7, #27]
#endif

	flags = cpu_irq_save();
  400e16:	4b28      	ldr	r3, [pc, #160]	; (400eb8 <udi_cdc_multi_get_free_tx_buffer+0xb0>)
  400e18:	4798      	blx	r3
  400e1a:	6178      	str	r0, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e1c:	7efb      	ldrb	r3, [r7, #27]
  400e1e:	4a27      	ldr	r2, [pc, #156]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e20:	5cd3      	ldrb	r3, [r2, r3]
  400e22:	74fb      	strb	r3, [r7, #19]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400e24:	7ef9      	ldrb	r1, [r7, #27]
  400e26:	7cfa      	ldrb	r2, [r7, #19]
  400e28:	4b25      	ldr	r3, [pc, #148]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e2a:	0049      	lsls	r1, r1, #1
  400e2c:	440a      	add	r2, r1
  400e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e32:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400e34:	7ef9      	ldrb	r1, [r7, #27]
  400e36:	7cfb      	ldrb	r3, [r7, #19]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	bf14      	ite	ne
  400e3c:	2300      	movne	r3, #0
  400e3e:	2301      	moveq	r3, #1
  400e40:	b2db      	uxtb	r3, r3
  400e42:	461a      	mov	r2, r3
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e46:	0049      	lsls	r1, r1, #1
  400e48:	440a      	add	r2, r1
  400e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e4e:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400e50:	69fb      	ldr	r3, [r7, #28]
  400e52:	2b40      	cmp	r3, #64	; 0x40
  400e54:	d123      	bne.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400e56:	7efb      	ldrb	r3, [r7, #27]
  400e58:	4a1a      	ldr	r2, [pc, #104]	; (400ec4 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
  400e5a:	5cd3      	ldrb	r3, [r2, r3]
  400e5c:	b2db      	uxtb	r3, r3
  400e5e:	f083 0301 	eor.w	r3, r3, #1
  400e62:	b2db      	uxtb	r3, r3
  400e64:	2b00      	cmp	r3, #0
  400e66:	d01a      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400e68:	7efb      	ldrb	r3, [r7, #27]
  400e6a:	4a17      	ldr	r2, [pc, #92]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e6c:	5cd3      	ldrb	r3, [r2, r3]
  400e6e:	b2db      	uxtb	r3, r3
  400e70:	f083 0301 	eor.w	r3, r3, #1
  400e74:	b2db      	uxtb	r3, r3
  400e76:	2b00      	cmp	r3, #0
  400e78:	d011      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400e7a:	7efb      	ldrb	r3, [r7, #27]
  400e7c:	4a12      	ldr	r2, [pc, #72]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e7e:	2101      	movs	r1, #1
  400e80:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400e82:	7efb      	ldrb	r3, [r7, #27]
  400e84:	7cfa      	ldrb	r2, [r7, #19]
  400e86:	2a00      	cmp	r2, #0
  400e88:	bf14      	ite	ne
  400e8a:	2200      	movne	r2, #0
  400e8c:	2201      	moveq	r2, #1
  400e8e:	b2d2      	uxtb	r2, r2
  400e90:	4611      	mov	r1, r2
  400e92:	4a0a      	ldr	r2, [pc, #40]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e94:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
  400e96:	2300      	movs	r3, #0
  400e98:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400e9a:	2340      	movs	r3, #64	; 0x40
  400e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400e9e:	69fb      	ldr	r3, [r7, #28]
  400ea0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  400ea4:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400ea6:	6978      	ldr	r0, [r7, #20]
  400ea8:	4b08      	ldr	r3, [pc, #32]	; (400ecc <udi_cdc_multi_get_free_tx_buffer+0xc4>)
  400eaa:	4798      	blx	r3
	return retval;
  400eac:	68bb      	ldr	r3, [r7, #8]
}
  400eae:	4618      	mov	r0, r3
  400eb0:	3720      	adds	r7, #32
  400eb2:	46bd      	mov	sp, r7
  400eb4:	bd80      	pop	{r7, pc}
  400eb6:	bf00      	nop
  400eb8:	0040046d 	.word	0x0040046d
  400ebc:	20000d94 	.word	0x20000d94
  400ec0:	20000d90 	.word	0x20000d90
  400ec4:	20000d9c 	.word	0x20000d9c
  400ec8:	20000da0 	.word	0x20000da0
  400ecc:	004004c5 	.word	0x004004c5

00400ed0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400ed0:	b580      	push	{r7, lr}
  400ed2:	b082      	sub	sp, #8
  400ed4:	af00      	add	r7, sp, #0
  400ed6:	4603      	mov	r3, r0
  400ed8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400eda:	79fb      	ldrb	r3, [r7, #7]
  400edc:	4618      	mov	r0, r3
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <udi_cdc_multi_is_tx_ready+0x28>)
  400ee0:	4798      	blx	r3
  400ee2:	4603      	mov	r3, r0
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	bf0c      	ite	eq
  400ee8:	2300      	moveq	r3, #0
  400eea:	2301      	movne	r3, #1
  400eec:	b2db      	uxtb	r3, r3
}
  400eee:	4618      	mov	r0, r3
  400ef0:	3708      	adds	r7, #8
  400ef2:	46bd      	mov	sp, r7
  400ef4:	bd80      	pop	{r7, pc}
  400ef6:	bf00      	nop
  400ef8:	00400e09 	.word	0x00400e09

00400efc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
  400f00:	2000      	movs	r0, #0
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <udi_cdc_is_tx_ready+0x10>)
  400f04:	4798      	blx	r3
  400f06:	4603      	mov	r3, r0
}
  400f08:	4618      	mov	r0, r3
  400f0a:	bd80      	pop	{r7, pc}
  400f0c:	00400ed1 	.word	0x00400ed1

00400f10 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f12:	b087      	sub	sp, #28
  400f14:	af00      	add	r7, sp, #0
  400f16:	4603      	mov	r3, r0
  400f18:	6039      	str	r1, [r7, #0]
  400f1a:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400f1c:	2300      	movs	r3, #0
  400f1e:	75bb      	strb	r3, [r7, #22]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400f20:	7dba      	ldrb	r2, [r7, #22]
  400f22:	4929      	ldr	r1, [pc, #164]	; (400fc8 <udi_cdc_multi_putc+0xb8>)
  400f24:	4613      	mov	r3, r2
  400f26:	00db      	lsls	r3, r3, #3
  400f28:	1a9b      	subs	r3, r3, r2
  400f2a:	440b      	add	r3, r1
  400f2c:	799b      	ldrb	r3, [r3, #6]
  400f2e:	2b09      	cmp	r3, #9
  400f30:	bf14      	ite	ne
  400f32:	2300      	movne	r3, #0
  400f34:	2301      	moveq	r3, #1
  400f36:	75fb      	strb	r3, [r7, #23]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400f38:	7dbb      	ldrb	r3, [r7, #22]
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b23      	ldr	r3, [pc, #140]	; (400fcc <udi_cdc_multi_putc+0xbc>)
  400f3e:	4798      	blx	r3
  400f40:	4603      	mov	r3, r0
  400f42:	f083 0301 	eor.w	r3, r3, #1
  400f46:	b2db      	uxtb	r3, r3
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d00a      	beq.n	400f62 <udi_cdc_multi_putc+0x52>
		if (!udi_cdc_data_running) {
  400f4c:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <udi_cdc_multi_putc+0xc0>)
  400f4e:	781b      	ldrb	r3, [r3, #0]
  400f50:	b2db      	uxtb	r3, r3
  400f52:	f083 0301 	eor.w	r3, r3, #1
  400f56:	b2db      	uxtb	r3, r3
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d001      	beq.n	400f60 <udi_cdc_multi_putc+0x50>
			return false;
  400f5c:	2300      	movs	r3, #0
  400f5e:	e02e      	b.n	400fbe <udi_cdc_multi_putc+0xae>
		}
		goto udi_cdc_putc_process_one_byte;
  400f60:	e7ea      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}

	// Write value
	flags = cpu_irq_save();
  400f62:	4b1c      	ldr	r3, [pc, #112]	; (400fd4 <udi_cdc_multi_putc+0xc4>)
  400f64:	4798      	blx	r3
  400f66:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400f68:	7dbb      	ldrb	r3, [r7, #22]
  400f6a:	4a1b      	ldr	r2, [pc, #108]	; (400fd8 <udi_cdc_multi_putc+0xc8>)
  400f6c:	5cd3      	ldrb	r3, [r2, r3]
  400f6e:	73fb      	strb	r3, [r7, #15]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400f70:	7dbc      	ldrb	r4, [r7, #22]
  400f72:	7bf8      	ldrb	r0, [r7, #15]
  400f74:	7db9      	ldrb	r1, [r7, #22]
  400f76:	7bfa      	ldrb	r2, [r7, #15]
  400f78:	4b18      	ldr	r3, [pc, #96]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f7a:	004d      	lsls	r5, r1, #1
  400f7c:	4415      	add	r5, r2
  400f7e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400f82:	1c5d      	adds	r5, r3, #1
  400f84:	b2ae      	uxth	r6, r5
  400f86:	4d15      	ldr	r5, [pc, #84]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f88:	0049      	lsls	r1, r1, #1
  400f8a:	440a      	add	r2, r1
  400f8c:	4631      	mov	r1, r6
  400f8e:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
  400f92:	683a      	ldr	r2, [r7, #0]
  400f94:	b2d2      	uxtb	r2, r2
  400f96:	4912      	ldr	r1, [pc, #72]	; (400fe0 <udi_cdc_multi_putc+0xd0>)
  400f98:	0064      	lsls	r4, r4, #1
  400f9a:	4420      	add	r0, r4
  400f9c:	0180      	lsls	r0, r0, #6
  400f9e:	4403      	add	r3, r0
  400fa0:	440b      	add	r3, r1
  400fa2:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
  400fa4:	6938      	ldr	r0, [r7, #16]
  400fa6:	4b0f      	ldr	r3, [pc, #60]	; (400fe4 <udi_cdc_multi_putc+0xd4>)
  400fa8:	4798      	blx	r3

	if (b_databit_9) {
  400faa:	7dfb      	ldrb	r3, [r7, #23]
  400fac:	2b00      	cmp	r3, #0
  400fae:	d005      	beq.n	400fbc <udi_cdc_multi_putc+0xac>
		// Send MSB
		b_databit_9 = false;
  400fb0:	2300      	movs	r3, #0
  400fb2:	75fb      	strb	r3, [r7, #23]
		value = value >> 8;
  400fb4:	683b      	ldr	r3, [r7, #0]
  400fb6:	121b      	asrs	r3, r3, #8
  400fb8:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
  400fba:	e7bd      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}
	return true;
  400fbc:	2301      	movs	r3, #1
}
  400fbe:	4618      	mov	r0, r3
  400fc0:	371c      	adds	r7, #28
  400fc2:	46bd      	mov	sp, r7
  400fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc6:	bf00      	nop
  400fc8:	20000c64 	.word	0x20000c64
  400fcc:	00400ed1 	.word	0x00400ed1
  400fd0:	20000c7e 	.word	0x20000c7e
  400fd4:	0040046d 	.word	0x0040046d
  400fd8:	20000d94 	.word	0x20000d94
  400fdc:	20000d90 	.word	0x20000d90
  400fe0:	20000d10 	.word	0x20000d10
  400fe4:	004004c5 	.word	0x004004c5

00400fe8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b082      	sub	sp, #8
  400fec:	af00      	add	r7, sp, #0
  400fee:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
  400ff0:	2000      	movs	r0, #0
  400ff2:	6879      	ldr	r1, [r7, #4]
  400ff4:	4b03      	ldr	r3, [pc, #12]	; (401004 <udi_cdc_putc+0x1c>)
  400ff6:	4798      	blx	r3
  400ff8:	4603      	mov	r3, r0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3708      	adds	r7, #8
  400ffe:	46bd      	mov	sp, r7
  401000:	bd80      	pop	{r7, pc}
  401002:	bf00      	nop
  401004:	00400f11 	.word	0x00400f11

00401008 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  401008:	b580      	push	{r7, lr}
  40100a:	b08a      	sub	sp, #40	; 0x28
  40100c:	af00      	add	r7, sp, #0
  40100e:	4603      	mov	r3, r0
  401010:	60b9      	str	r1, [r7, #8]
  401012:	607a      	str	r2, [r7, #4]
  401014:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
  401016:	68bb      	ldr	r3, [r7, #8]
  401018:	623b      	str	r3, [r7, #32]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40101a:	2300      	movs	r3, #0
  40101c:	77fb      	strb	r3, [r7, #31]
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  40101e:	7ffa      	ldrb	r2, [r7, #31]
  401020:	4933      	ldr	r1, [pc, #204]	; (4010f0 <udi_cdc_multi_write_buf+0xe8>)
  401022:	4613      	mov	r3, r2
  401024:	00db      	lsls	r3, r3, #3
  401026:	1a9b      	subs	r3, r3, r2
  401028:	440b      	add	r3, r1
  40102a:	799b      	ldrb	r3, [r3, #6]
  40102c:	2b09      	cmp	r3, #9
  40102e:	d102      	bne.n	401036 <udi_cdc_multi_write_buf+0x2e>
		size *=2;
  401030:	687b      	ldr	r3, [r7, #4]
  401032:	005b      	lsls	r3, r3, #1
  401034:	607b      	str	r3, [r7, #4]
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  401036:	7ffb      	ldrb	r3, [r7, #31]
  401038:	4618      	mov	r0, r3
  40103a:	4b2e      	ldr	r3, [pc, #184]	; (4010f4 <udi_cdc_multi_write_buf+0xec>)
  40103c:	4798      	blx	r3
  40103e:	4603      	mov	r3, r0
  401040:	f083 0301 	eor.w	r3, r3, #1
  401044:	b2db      	uxtb	r3, r3
  401046:	2b00      	cmp	r3, #0
  401048:	d00a      	beq.n	401060 <udi_cdc_multi_write_buf+0x58>
		if (!udi_cdc_data_running) {
  40104a:	4b2b      	ldr	r3, [pc, #172]	; (4010f8 <udi_cdc_multi_write_buf+0xf0>)
  40104c:	781b      	ldrb	r3, [r3, #0]
  40104e:	b2db      	uxtb	r3, r3
  401050:	f083 0301 	eor.w	r3, r3, #1
  401054:	b2db      	uxtb	r3, r3
  401056:	2b00      	cmp	r3, #0
  401058:	d001      	beq.n	40105e <udi_cdc_multi_write_buf+0x56>
			return size;
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	e043      	b.n	4010e6 <udi_cdc_multi_write_buf+0xde>
		}
		goto udi_cdc_write_buf_loop_wait;
  40105e:	e7ea      	b.n	401036 <udi_cdc_multi_write_buf+0x2e>
	}

	// Write values
	flags = cpu_irq_save();
  401060:	4b26      	ldr	r3, [pc, #152]	; (4010fc <udi_cdc_multi_write_buf+0xf4>)
  401062:	4798      	blx	r3
  401064:	61b8      	str	r0, [r7, #24]
	buf_sel = udi_cdc_tx_buf_sel[port];
  401066:	7ffb      	ldrb	r3, [r7, #31]
  401068:	4a25      	ldr	r2, [pc, #148]	; (401100 <udi_cdc_multi_write_buf+0xf8>)
  40106a:	5cd3      	ldrb	r3, [r2, r3]
  40106c:	75fb      	strb	r3, [r7, #23]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  40106e:	7ff9      	ldrb	r1, [r7, #31]
  401070:	7dfa      	ldrb	r2, [r7, #23]
  401072:	4b24      	ldr	r3, [pc, #144]	; (401104 <udi_cdc_multi_write_buf+0xfc>)
  401074:	0049      	lsls	r1, r1, #1
  401076:	440a      	add	r2, r1
  401078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40107c:	82bb      	strh	r3, [r7, #20]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  40107e:	8abb      	ldrh	r3, [r7, #20]
  401080:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  401084:	627b      	str	r3, [r7, #36]	; 0x24
	if (copy_nb > size) {
  401086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	429a      	cmp	r2, r3
  40108c:	d901      	bls.n	401092 <udi_cdc_multi_write_buf+0x8a>
		copy_nb = size;
  40108e:	687b      	ldr	r3, [r7, #4]
  401090:	627b      	str	r3, [r7, #36]	; 0x24
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  401092:	7ff9      	ldrb	r1, [r7, #31]
  401094:	7dfa      	ldrb	r2, [r7, #23]
  401096:	8abb      	ldrh	r3, [r7, #20]
  401098:	0049      	lsls	r1, r1, #1
  40109a:	440a      	add	r2, r1
  40109c:	0192      	lsls	r2, r2, #6
  40109e:	441a      	add	r2, r3
  4010a0:	4b19      	ldr	r3, [pc, #100]	; (401108 <udi_cdc_multi_write_buf+0x100>)
  4010a2:	4413      	add	r3, r2
  4010a4:	4618      	mov	r0, r3
  4010a6:	6a39      	ldr	r1, [r7, #32]
  4010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4010aa:	4b18      	ldr	r3, [pc, #96]	; (40110c <udi_cdc_multi_write_buf+0x104>)
  4010ac:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  4010ae:	7ff8      	ldrb	r0, [r7, #31]
  4010b0:	7dfa      	ldrb	r2, [r7, #23]
  4010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010b4:	b299      	uxth	r1, r3
  4010b6:	8abb      	ldrh	r3, [r7, #20]
  4010b8:	440b      	add	r3, r1
  4010ba:	b299      	uxth	r1, r3
  4010bc:	4b11      	ldr	r3, [pc, #68]	; (401104 <udi_cdc_multi_write_buf+0xfc>)
  4010be:	0040      	lsls	r0, r0, #1
  4010c0:	4402      	add	r2, r0
  4010c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	cpu_irq_restore(flags);
  4010c6:	69b8      	ldr	r0, [r7, #24]
  4010c8:	4b11      	ldr	r3, [pc, #68]	; (401110 <udi_cdc_multi_write_buf+0x108>)
  4010ca:	4798      	blx	r3

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  4010cc:	6a3a      	ldr	r2, [r7, #32]
  4010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010d0:	4413      	add	r3, r2
  4010d2:	623b      	str	r3, [r7, #32]
	size -= copy_nb;
  4010d4:	687a      	ldr	r2, [r7, #4]
  4010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010d8:	1ad3      	subs	r3, r2, r3
  4010da:	607b      	str	r3, [r7, #4]

	if (size) {
  4010dc:	687b      	ldr	r3, [r7, #4]
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d000      	beq.n	4010e4 <udi_cdc_multi_write_buf+0xdc>
		goto udi_cdc_write_buf_loop_wait;
  4010e2:	e7a8      	b.n	401036 <udi_cdc_multi_write_buf+0x2e>
	}

	return 0;
  4010e4:	2300      	movs	r3, #0
}
  4010e6:	4618      	mov	r0, r3
  4010e8:	3728      	adds	r7, #40	; 0x28
  4010ea:	46bd      	mov	sp, r7
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	20000c64 	.word	0x20000c64
  4010f4:	00400ed1 	.word	0x00400ed1
  4010f8:	20000c7e 	.word	0x20000c7e
  4010fc:	0040046d 	.word	0x0040046d
  401100:	20000d94 	.word	0x20000d94
  401104:	20000d90 	.word	0x20000d90
  401108:	20000d10 	.word	0x20000d10
  40110c:	0040c6f9 	.word	0x0040c6f9
  401110:	004004c5 	.word	0x004004c5

00401114 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  401114:	b580      	push	{r7, lr}
  401116:	b082      	sub	sp, #8
  401118:	af00      	add	r7, sp, #0
  40111a:	6078      	str	r0, [r7, #4]
  40111c:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_write_buf(0, buf, size);
  40111e:	2000      	movs	r0, #0
  401120:	6879      	ldr	r1, [r7, #4]
  401122:	683a      	ldr	r2, [r7, #0]
  401124:	4b03      	ldr	r3, [pc, #12]	; (401134 <udi_cdc_write_buf+0x20>)
  401126:	4798      	blx	r3
  401128:	4603      	mov	r3, r0
}
  40112a:	4618      	mov	r0, r3
  40112c:	3708      	adds	r7, #8
  40112e:	46bd      	mov	sp, r7
  401130:	bd80      	pop	{r7, pc}
  401132:	bf00      	nop
  401134:	00401009 	.word	0x00401009

00401138 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  401138:	b480      	push	{r7}
  40113a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40113c:	4b06      	ldr	r3, [pc, #24]	; (401158 <udc_get_eof_conf+0x20>)
  40113e:	681b      	ldr	r3, [r3, #0]
  401140:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401142:	4b05      	ldr	r3, [pc, #20]	; (401158 <udc_get_eof_conf+0x20>)
  401144:	681b      	ldr	r3, [r3, #0]
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	885b      	ldrh	r3, [r3, #2]
  40114a:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40114c:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
  40114e:	4618      	mov	r0, r3
  401150:	46bd      	mov	sp, r7
  401152:	f85d 7b04 	ldr.w	r7, [sp], #4
  401156:	4770      	bx	lr
  401158:	20000db4 	.word	0x20000db4

0040115c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  40115c:	b580      	push	{r7, lr}
  40115e:	b084      	sub	sp, #16
  401160:	af00      	add	r7, sp, #0
  401162:	6078      	str	r0, [r7, #4]
  401164:	460b      	mov	r3, r1
  401166:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  401168:	4b11      	ldr	r3, [pc, #68]	; (4011b0 <udc_next_desc_in_iface+0x54>)
  40116a:	4798      	blx	r3
  40116c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40116e:	687b      	ldr	r3, [r7, #4]
  401170:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401172:	687a      	ldr	r2, [r7, #4]
  401174:	4413      	add	r3, r2
  401176:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401178:	e010      	b.n	40119c <udc_next_desc_in_iface+0x40>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	785b      	ldrb	r3, [r3, #1]
  40117e:	2b04      	cmp	r3, #4
  401180:	d100      	bne.n	401184 <udc_next_desc_in_iface+0x28>
			break; // End of global interface descriptor
  401182:	e00f      	b.n	4011a4 <udc_next_desc_in_iface+0x48>
		}
		if (desc_id == desc->bDescriptorType) {
  401184:	687b      	ldr	r3, [r7, #4]
  401186:	785b      	ldrb	r3, [r3, #1]
  401188:	78fa      	ldrb	r2, [r7, #3]
  40118a:	429a      	cmp	r2, r3
  40118c:	d101      	bne.n	401192 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  40118e:	687b      	ldr	r3, [r7, #4]
  401190:	e009      	b.n	4011a6 <udc_next_desc_in_iface+0x4a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  401192:	687b      	ldr	r3, [r7, #4]
  401194:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401196:	687a      	ldr	r2, [r7, #4]
  401198:	4413      	add	r3, r2
  40119a:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40119c:	68fa      	ldr	r2, [r7, #12]
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	429a      	cmp	r2, r3
  4011a2:	d8ea      	bhi.n	40117a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  4011a4:	2300      	movs	r3, #0
}
  4011a6:	4618      	mov	r0, r3
  4011a8:	3710      	adds	r7, #16
  4011aa:	46bd      	mov	sp, r7
  4011ac:	bd80      	pop	{r7, pc}
  4011ae:	bf00      	nop
  4011b0:	00401139 	.word	0x00401139

004011b4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  4011b4:	b580      	push	{r7, lr}
  4011b6:	b084      	sub	sp, #16
  4011b8:	af00      	add	r7, sp, #0
  4011ba:	4602      	mov	r2, r0
  4011bc:	460b      	mov	r3, r1
  4011be:	71fa      	strb	r2, [r7, #7]
  4011c0:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  4011c2:	4b1e      	ldr	r3, [pc, #120]	; (40123c <udc_update_iface_desc+0x88>)
  4011c4:	781b      	ldrb	r3, [r3, #0]
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d101      	bne.n	4011ce <udc_update_iface_desc+0x1a>
		return false;
  4011ca:	2300      	movs	r3, #0
  4011cc:	e032      	b.n	401234 <udc_update_iface_desc+0x80>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4011ce:	4b1c      	ldr	r3, [pc, #112]	; (401240 <udc_update_iface_desc+0x8c>)
  4011d0:	681b      	ldr	r3, [r3, #0]
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	791b      	ldrb	r3, [r3, #4]
  4011d6:	79fa      	ldrb	r2, [r7, #7]
  4011d8:	429a      	cmp	r2, r3
  4011da:	d301      	bcc.n	4011e0 <udc_update_iface_desc+0x2c>
		return false;
  4011dc:	2300      	movs	r3, #0
  4011de:	e029      	b.n	401234 <udc_update_iface_desc+0x80>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  4011e0:	4b17      	ldr	r3, [pc, #92]	; (401240 <udc_update_iface_desc+0x8c>)
  4011e2:	681b      	ldr	r3, [r3, #0]
  4011e4:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4011e6:	4b17      	ldr	r3, [pc, #92]	; (401244 <udc_update_iface_desc+0x90>)
  4011e8:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  4011ea:	4b17      	ldr	r3, [pc, #92]	; (401248 <udc_update_iface_desc+0x94>)
  4011ec:	4798      	blx	r3
  4011ee:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  4011f0:	e01a      	b.n	401228 <udc_update_iface_desc+0x74>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4011f2:	4b14      	ldr	r3, [pc, #80]	; (401244 <udc_update_iface_desc+0x90>)
  4011f4:	681b      	ldr	r3, [r3, #0]
  4011f6:	785b      	ldrb	r3, [r3, #1]
  4011f8:	2b04      	cmp	r3, #4
  4011fa:	d10d      	bne.n	401218 <udc_update_iface_desc+0x64>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4011fc:	4b11      	ldr	r3, [pc, #68]	; (401244 <udc_update_iface_desc+0x90>)
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	789b      	ldrb	r3, [r3, #2]
  401202:	79fa      	ldrb	r2, [r7, #7]
  401204:	429a      	cmp	r2, r3
  401206:	d107      	bne.n	401218 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  401208:	4b0e      	ldr	r3, [pc, #56]	; (401244 <udc_update_iface_desc+0x90>)
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40120e:	79ba      	ldrb	r2, [r7, #6]
  401210:	429a      	cmp	r2, r3
  401212:	d101      	bne.n	401218 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  401214:	2301      	movs	r3, #1
  401216:	e00d      	b.n	401234 <udc_update_iface_desc+0x80>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401218:	4b0a      	ldr	r3, [pc, #40]	; (401244 <udc_update_iface_desc+0x90>)
  40121a:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  40121c:	4b09      	ldr	r3, [pc, #36]	; (401244 <udc_update_iface_desc+0x90>)
  40121e:	681b      	ldr	r3, [r3, #0]
  401220:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401222:	441a      	add	r2, r3
  401224:	4b07      	ldr	r3, [pc, #28]	; (401244 <udc_update_iface_desc+0x90>)
  401226:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  401228:	4b06      	ldr	r3, [pc, #24]	; (401244 <udc_update_iface_desc+0x90>)
  40122a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40122c:	68fa      	ldr	r2, [r7, #12]
  40122e:	429a      	cmp	r2, r3
  401230:	d8df      	bhi.n	4011f2 <udc_update_iface_desc+0x3e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401232:	2300      	movs	r3, #0
}
  401234:	4618      	mov	r0, r3
  401236:	3710      	adds	r7, #16
  401238:	46bd      	mov	sp, r7
  40123a:	bd80      	pop	{r7, pc}
  40123c:	20000db0 	.word	0x20000db0
  401240:	20000db4 	.word	0x20000db4
  401244:	20000db8 	.word	0x20000db8
  401248:	00401139 	.word	0x00401139

0040124c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  40124c:	b580      	push	{r7, lr}
  40124e:	b084      	sub	sp, #16
  401250:	af00      	add	r7, sp, #0
  401252:	4603      	mov	r3, r0
  401254:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401256:	79fb      	ldrb	r3, [r7, #7]
  401258:	4618      	mov	r0, r3
  40125a:	2100      	movs	r1, #0
  40125c:	4b1e      	ldr	r3, [pc, #120]	; (4012d8 <udc_iface_disable+0x8c>)
  40125e:	4798      	blx	r3
  401260:	4603      	mov	r3, r0
  401262:	f083 0301 	eor.w	r3, r3, #1
  401266:	b2db      	uxtb	r3, r3
  401268:	2b00      	cmp	r3, #0
  40126a:	d001      	beq.n	401270 <udc_iface_disable+0x24>
		return false;
  40126c:	2300      	movs	r3, #0
  40126e:	e02f      	b.n	4012d0 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401270:	4b1a      	ldr	r3, [pc, #104]	; (4012dc <udc_iface_disable+0x90>)
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	685a      	ldr	r2, [r3, #4]
  401276:	79fb      	ldrb	r3, [r7, #7]
  401278:	009b      	lsls	r3, r3, #2
  40127a:	4413      	add	r3, r2
  40127c:	681b      	ldr	r3, [r3, #0]
  40127e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401280:	68bb      	ldr	r3, [r7, #8]
  401282:	68db      	ldr	r3, [r3, #12]
  401284:	4798      	blx	r3
  401286:	4603      	mov	r3, r0
  401288:	79fa      	ldrb	r2, [r7, #7]
  40128a:	4610      	mov	r0, r2
  40128c:	4619      	mov	r1, r3
  40128e:	4b12      	ldr	r3, [pc, #72]	; (4012d8 <udc_iface_disable+0x8c>)
  401290:	4798      	blx	r3
  401292:	4603      	mov	r3, r0
  401294:	f083 0301 	eor.w	r3, r3, #1
  401298:	b2db      	uxtb	r3, r3
  40129a:	2b00      	cmp	r3, #0
  40129c:	d001      	beq.n	4012a2 <udc_iface_disable+0x56>
		return false;
  40129e:	2300      	movs	r3, #0
  4012a0:	e016      	b.n	4012d0 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4012a2:	4b0f      	ldr	r3, [pc, #60]	; (4012e0 <udc_iface_disable+0x94>)
  4012a4:	681b      	ldr	r3, [r3, #0]
  4012a6:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4012a8:	68f8      	ldr	r0, [r7, #12]
  4012aa:	2105      	movs	r1, #5
  4012ac:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <udc_iface_disable+0x98>)
  4012ae:	4798      	blx	r3
  4012b0:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  4012b2:	68fb      	ldr	r3, [r7, #12]
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d105      	bne.n	4012c4 <udc_iface_disable+0x78>
				break;
  4012b8:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  4012ba:	68bb      	ldr	r3, [r7, #8]
  4012bc:	685b      	ldr	r3, [r3, #4]
  4012be:	4798      	blx	r3
	return true;
  4012c0:	2301      	movs	r3, #1
  4012c2:	e005      	b.n	4012d0 <udc_iface_disable+0x84>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4012c4:	68fb      	ldr	r3, [r7, #12]
  4012c6:	789b      	ldrb	r3, [r3, #2]
  4012c8:	4618      	mov	r0, r3
  4012ca:	4b07      	ldr	r3, [pc, #28]	; (4012e8 <udc_iface_disable+0x9c>)
  4012cc:	4798      	blx	r3
		}
  4012ce:	e7eb      	b.n	4012a8 <udc_iface_disable+0x5c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
  4012d0:	4618      	mov	r0, r3
  4012d2:	3710      	adds	r7, #16
  4012d4:	46bd      	mov	sp, r7
  4012d6:	bd80      	pop	{r7, pc}
  4012d8:	004011b5 	.word	0x004011b5
  4012dc:	20000db4 	.word	0x20000db4
  4012e0:	20000db8 	.word	0x20000db8
  4012e4:	0040115d 	.word	0x0040115d
  4012e8:	004024c1 	.word	0x004024c1

004012ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b084      	sub	sp, #16
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	4602      	mov	r2, r0
  4012f4:	460b      	mov	r3, r1
  4012f6:	71fa      	strb	r2, [r7, #7]
  4012f8:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4012fa:	79fa      	ldrb	r2, [r7, #7]
  4012fc:	79bb      	ldrb	r3, [r7, #6]
  4012fe:	4610      	mov	r0, r2
  401300:	4619      	mov	r1, r3
  401302:	4b1d      	ldr	r3, [pc, #116]	; (401378 <udc_iface_enable+0x8c>)
  401304:	4798      	blx	r3
  401306:	4603      	mov	r3, r0
  401308:	f083 0301 	eor.w	r3, r3, #1
  40130c:	b2db      	uxtb	r3, r3
  40130e:	2b00      	cmp	r3, #0
  401310:	d001      	beq.n	401316 <udc_iface_enable+0x2a>
		return false;
  401312:	2300      	movs	r3, #0
  401314:	e02b      	b.n	40136e <udc_iface_enable+0x82>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401316:	4b19      	ldr	r3, [pc, #100]	; (40137c <udc_iface_enable+0x90>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40131c:	68f8      	ldr	r0, [r7, #12]
  40131e:	2105      	movs	r1, #5
  401320:	4b17      	ldr	r3, [pc, #92]	; (401380 <udc_iface_enable+0x94>)
  401322:	4798      	blx	r3
  401324:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  401326:	68fb      	ldr	r3, [r7, #12]
  401328:	2b00      	cmp	r3, #0
  40132a:	d10b      	bne.n	401344 <udc_iface_enable+0x58>
			break;
  40132c:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40132e:	4b15      	ldr	r3, [pc, #84]	; (401384 <udc_iface_enable+0x98>)
  401330:	681b      	ldr	r3, [r3, #0]
  401332:	685a      	ldr	r2, [r3, #4]
  401334:	79fb      	ldrb	r3, [r7, #7]
  401336:	009b      	lsls	r3, r3, #2
  401338:	4413      	add	r3, r2
  40133a:	681b      	ldr	r3, [r3, #0]
  40133c:	681b      	ldr	r3, [r3, #0]
  40133e:	4798      	blx	r3
  401340:	4603      	mov	r3, r0
  401342:	e014      	b.n	40136e <udc_iface_enable+0x82>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401344:	68fb      	ldr	r3, [r7, #12]
  401346:	7899      	ldrb	r1, [r3, #2]
  401348:	68fb      	ldr	r3, [r7, #12]
  40134a:	78da      	ldrb	r2, [r3, #3]
  40134c:	68fb      	ldr	r3, [r7, #12]
  40134e:	889b      	ldrh	r3, [r3, #4]
  401350:	b29b      	uxth	r3, r3
  401352:	4608      	mov	r0, r1
  401354:	4611      	mov	r1, r2
  401356:	461a      	mov	r2, r3
  401358:	4b0b      	ldr	r3, [pc, #44]	; (401388 <udc_iface_enable+0x9c>)
  40135a:	4798      	blx	r3
  40135c:	4603      	mov	r3, r0
  40135e:	f083 0301 	eor.w	r3, r3, #1
  401362:	b2db      	uxtb	r3, r3
  401364:	2b00      	cmp	r3, #0
  401366:	d001      	beq.n	40136c <udc_iface_enable+0x80>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  401368:	2300      	movs	r3, #0
  40136a:	e000      	b.n	40136e <udc_iface_enable+0x82>
		}
	}
  40136c:	e7d6      	b.n	40131c <udc_iface_enable+0x30>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
  40136e:	4618      	mov	r0, r3
  401370:	3710      	adds	r7, #16
  401372:	46bd      	mov	sp, r7
  401374:	bd80      	pop	{r7, pc}
  401376:	bf00      	nop
  401378:	004011b5 	.word	0x004011b5
  40137c:	20000db8 	.word	0x20000db8
  401380:	0040115d 	.word	0x0040115d
  401384:	20000db4 	.word	0x20000db4
  401388:	00402341 	.word	0x00402341

0040138c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  40138c:	b580      	push	{r7, lr}
  40138e:	af00      	add	r7, sp, #0
	udd_enable();
  401390:	4b01      	ldr	r3, [pc, #4]	; (401398 <udc_start+0xc>)
  401392:	4798      	blx	r3
}
  401394:	bd80      	pop	{r7, pc}
  401396:	bf00      	nop
  401398:	00402155 	.word	0x00402155

0040139c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	b082      	sub	sp, #8
  4013a0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4013a2:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <udc_reset+0x44>)
  4013a4:	781b      	ldrb	r3, [r3, #0]
  4013a6:	2b00      	cmp	r3, #0
  4013a8:	d010      	beq.n	4013cc <udc_reset+0x30>
		for (iface_num = 0;
  4013aa:	2300      	movs	r3, #0
  4013ac:	71fb      	strb	r3, [r7, #7]
  4013ae:	e006      	b.n	4013be <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  4013b0:	79fb      	ldrb	r3, [r7, #7]
  4013b2:	4618      	mov	r0, r3
  4013b4:	4b0b      	ldr	r3, [pc, #44]	; (4013e4 <udc_reset+0x48>)
  4013b6:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4013b8:	79fb      	ldrb	r3, [r7, #7]
  4013ba:	3301      	adds	r3, #1
  4013bc:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013be:	4b0a      	ldr	r3, [pc, #40]	; (4013e8 <udc_reset+0x4c>)
  4013c0:	681b      	ldr	r3, [r3, #0]
  4013c2:	681b      	ldr	r3, [r3, #0]
  4013c4:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4013c6:	79fa      	ldrb	r2, [r7, #7]
  4013c8:	429a      	cmp	r2, r3
  4013ca:	d3f1      	bcc.n	4013b0 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  4013cc:	4b04      	ldr	r3, [pc, #16]	; (4013e0 <udc_reset+0x44>)
  4013ce:	2200      	movs	r2, #0
  4013d0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4013d2:	4b06      	ldr	r3, [pc, #24]	; (4013ec <udc_reset+0x50>)
  4013d4:	2201      	movs	r2, #1
  4013d6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  4013d8:	3708      	adds	r7, #8
  4013da:	46bd      	mov	sp, r7
  4013dc:	bd80      	pop	{r7, pc}
  4013de:	bf00      	nop
  4013e0:	20000db0 	.word	0x20000db0
  4013e4:	0040124d 	.word	0x0040124d
  4013e8:	20000db4 	.word	0x20000db4
  4013ec:	20000da8 	.word	0x20000da8

004013f0 <udc_sof_notify>:

void udc_sof_notify(void)
{
  4013f0:	b580      	push	{r7, lr}
  4013f2:	b082      	sub	sp, #8
  4013f4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4013f6:	4b13      	ldr	r3, [pc, #76]	; (401444 <udc_sof_notify+0x54>)
  4013f8:	781b      	ldrb	r3, [r3, #0]
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d01f      	beq.n	40143e <udc_sof_notify+0x4e>
		for (iface_num = 0;
  4013fe:	2300      	movs	r3, #0
  401400:	71fb      	strb	r3, [r7, #7]
  401402:	e015      	b.n	401430 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  401404:	4b10      	ldr	r3, [pc, #64]	; (401448 <udc_sof_notify+0x58>)
  401406:	681b      	ldr	r3, [r3, #0]
  401408:	685a      	ldr	r2, [r3, #4]
  40140a:	79fb      	ldrb	r3, [r7, #7]
  40140c:	009b      	lsls	r3, r3, #2
  40140e:	4413      	add	r3, r2
  401410:	681b      	ldr	r3, [r3, #0]
  401412:	691b      	ldr	r3, [r3, #16]
  401414:	2b00      	cmp	r3, #0
  401416:	d008      	beq.n	40142a <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  401418:	4b0b      	ldr	r3, [pc, #44]	; (401448 <udc_sof_notify+0x58>)
  40141a:	681b      	ldr	r3, [r3, #0]
  40141c:	685a      	ldr	r2, [r3, #4]
  40141e:	79fb      	ldrb	r3, [r7, #7]
  401420:	009b      	lsls	r3, r3, #2
  401422:	4413      	add	r3, r2
  401424:	681b      	ldr	r3, [r3, #0]
  401426:	691b      	ldr	r3, [r3, #16]
  401428:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  40142a:	79fb      	ldrb	r3, [r7, #7]
  40142c:	3301      	adds	r3, #1
  40142e:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401430:	4b05      	ldr	r3, [pc, #20]	; (401448 <udc_sof_notify+0x58>)
  401432:	681b      	ldr	r3, [r3, #0]
  401434:	681b      	ldr	r3, [r3, #0]
  401436:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401438:	79fa      	ldrb	r2, [r7, #7]
  40143a:	429a      	cmp	r2, r3
  40143c:	d3e2      	bcc.n	401404 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
  40143e:	3708      	adds	r7, #8
  401440:	46bd      	mov	sp, r7
  401442:	bd80      	pop	{r7, pc}
  401444:	20000db0 	.word	0x20000db0
  401448:	20000db4 	.word	0x20000db4

0040144c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  40144c:	b580      	push	{r7, lr}
  40144e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401450:	4b06      	ldr	r3, [pc, #24]	; (40146c <udc_req_std_dev_get_status+0x20>)
  401452:	88db      	ldrh	r3, [r3, #6]
  401454:	2b02      	cmp	r3, #2
  401456:	d001      	beq.n	40145c <udc_req_std_dev_get_status+0x10>
		return false;
  401458:	2300      	movs	r3, #0
  40145a:	e004      	b.n	401466 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40145c:	4804      	ldr	r0, [pc, #16]	; (401470 <udc_req_std_dev_get_status+0x24>)
  40145e:	2102      	movs	r1, #2
  401460:	4b04      	ldr	r3, [pc, #16]	; (401474 <udc_req_std_dev_get_status+0x28>)
  401462:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  401464:	2301      	movs	r3, #1
}
  401466:	4618      	mov	r0, r3
  401468:	bd80      	pop	{r7, pc}
  40146a:	bf00      	nop
  40146c:	2000894c 	.word	0x2000894c
  401470:	20000da8 	.word	0x20000da8
  401474:	00402319 	.word	0x00402319

00401478 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  401478:	b580      	push	{r7, lr}
  40147a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40147c:	4b0b      	ldr	r3, [pc, #44]	; (4014ac <udc_req_std_ep_get_status+0x34>)
  40147e:	88db      	ldrh	r3, [r3, #6]
  401480:	2b02      	cmp	r3, #2
  401482:	d001      	beq.n	401488 <udc_req_std_ep_get_status+0x10>
		return false;
  401484:	2300      	movs	r3, #0
  401486:	e00e      	b.n	4014a6 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401488:	4b08      	ldr	r3, [pc, #32]	; (4014ac <udc_req_std_ep_get_status+0x34>)
  40148a:	889b      	ldrh	r3, [r3, #4]
  40148c:	b2db      	uxtb	r3, r3
  40148e:	4618      	mov	r0, r3
  401490:	4b07      	ldr	r3, [pc, #28]	; (4014b0 <udc_req_std_ep_get_status+0x38>)
  401492:	4798      	blx	r3
  401494:	4603      	mov	r3, r0
  401496:	461a      	mov	r2, r3
  401498:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <udc_req_std_ep_get_status+0x3c>)
  40149a:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40149c:	4805      	ldr	r0, [pc, #20]	; (4014b4 <udc_req_std_ep_get_status+0x3c>)
  40149e:	2102      	movs	r1, #2
  4014a0:	4b05      	ldr	r3, [pc, #20]	; (4014b8 <udc_req_std_ep_get_status+0x40>)
  4014a2:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4014a4:	2301      	movs	r3, #1
}
  4014a6:	4618      	mov	r0, r3
  4014a8:	bd80      	pop	{r7, pc}
  4014aa:	bf00      	nop
  4014ac:	2000894c 	.word	0x2000894c
  4014b0:	00402509 	.word	0x00402509
  4014b4:	20000dbc 	.word	0x20000dbc
  4014b8:	00402319 	.word	0x00402319

004014bc <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  4014bc:	b480      	push	{r7}
  4014be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4014c0:	4b0c      	ldr	r3, [pc, #48]	; (4014f4 <udc_req_std_dev_clear_feature+0x38>)
  4014c2:	88db      	ldrh	r3, [r3, #6]
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d001      	beq.n	4014cc <udc_req_std_dev_clear_feature+0x10>
		return false;
  4014c8:	2300      	movs	r3, #0
  4014ca:	e00d      	b.n	4014e8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4014cc:	4b09      	ldr	r3, [pc, #36]	; (4014f4 <udc_req_std_dev_clear_feature+0x38>)
  4014ce:	885b      	ldrh	r3, [r3, #2]
  4014d0:	2b01      	cmp	r3, #1
  4014d2:	d108      	bne.n	4014e6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4014d4:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <udc_req_std_dev_clear_feature+0x3c>)
  4014d6:	881b      	ldrh	r3, [r3, #0]
  4014d8:	f023 0302 	bic.w	r3, r3, #2
  4014dc:	b29a      	uxth	r2, r3
  4014de:	4b06      	ldr	r3, [pc, #24]	; (4014f8 <udc_req_std_dev_clear_feature+0x3c>)
  4014e0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  4014e2:	2301      	movs	r3, #1
  4014e4:	e000      	b.n	4014e8 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  4014e6:	2300      	movs	r3, #0
}
  4014e8:	4618      	mov	r0, r3
  4014ea:	46bd      	mov	sp, r7
  4014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	2000894c 	.word	0x2000894c
  4014f8:	20000da8 	.word	0x20000da8

004014fc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  4014fc:	b580      	push	{r7, lr}
  4014fe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401500:	4b0a      	ldr	r3, [pc, #40]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  401502:	88db      	ldrh	r3, [r3, #6]
  401504:	2b00      	cmp	r3, #0
  401506:	d001      	beq.n	40150c <udc_req_std_ep_clear_feature+0x10>
		return false;
  401508:	2300      	movs	r3, #0
  40150a:	e00c      	b.n	401526 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40150c:	4b07      	ldr	r3, [pc, #28]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  40150e:	885b      	ldrh	r3, [r3, #2]
  401510:	2b00      	cmp	r3, #0
  401512:	d107      	bne.n	401524 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401514:	4b05      	ldr	r3, [pc, #20]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  401516:	889b      	ldrh	r3, [r3, #4]
  401518:	b2db      	uxtb	r3, r3
  40151a:	4618      	mov	r0, r3
  40151c:	4b04      	ldr	r3, [pc, #16]	; (401530 <udc_req_std_ep_clear_feature+0x34>)
  40151e:	4798      	blx	r3
  401520:	4603      	mov	r3, r0
  401522:	e000      	b.n	401526 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  401524:	2300      	movs	r3, #0
}
  401526:	4618      	mov	r0, r3
  401528:	bd80      	pop	{r7, pc}
  40152a:	bf00      	nop
  40152c:	2000894c 	.word	0x2000894c
  401530:	00402671 	.word	0x00402671

00401534 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  401534:	b480      	push	{r7}
  401536:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401538:	4b09      	ldr	r3, [pc, #36]	; (401560 <udc_req_std_dev_set_feature+0x2c>)
  40153a:	88db      	ldrh	r3, [r3, #6]
  40153c:	2b00      	cmp	r3, #0
  40153e:	d001      	beq.n	401544 <udc_req_std_dev_set_feature+0x10>
		return false;
  401540:	2300      	movs	r3, #0
  401542:	e007      	b.n	401554 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  401544:	4b06      	ldr	r3, [pc, #24]	; (401560 <udc_req_std_dev_set_feature+0x2c>)
  401546:	885b      	ldrh	r3, [r3, #2]
  401548:	2b01      	cmp	r3, #1
  40154a:	d002      	beq.n	401552 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  40154c:	bf00      	nop
	}
	return false;
  40154e:	2300      	movs	r3, #0
  401550:	e000      	b.n	401554 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
  401552:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
  401554:	4618      	mov	r0, r3
  401556:	46bd      	mov	sp, r7
  401558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40155c:	4770      	bx	lr
  40155e:	bf00      	nop
  401560:	2000894c 	.word	0x2000894c

00401564 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  401564:	b580      	push	{r7, lr}
  401566:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401568:	4b0d      	ldr	r3, [pc, #52]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40156a:	88db      	ldrh	r3, [r3, #6]
  40156c:	2b00      	cmp	r3, #0
  40156e:	d001      	beq.n	401574 <udc_req_std_ep_set_feature+0x10>
		return false;
  401570:	2300      	movs	r3, #0
  401572:	e012      	b.n	40159a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401574:	4b0a      	ldr	r3, [pc, #40]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  401576:	885b      	ldrh	r3, [r3, #2]
  401578:	2b00      	cmp	r3, #0
  40157a:	d10d      	bne.n	401598 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40157c:	4b08      	ldr	r3, [pc, #32]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40157e:	889b      	ldrh	r3, [r3, #4]
  401580:	b2db      	uxtb	r3, r3
  401582:	4618      	mov	r0, r3
  401584:	4b07      	ldr	r3, [pc, #28]	; (4015a4 <udc_req_std_ep_set_feature+0x40>)
  401586:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401588:	4b05      	ldr	r3, [pc, #20]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40158a:	889b      	ldrh	r3, [r3, #4]
  40158c:	b2db      	uxtb	r3, r3
  40158e:	4618      	mov	r0, r3
  401590:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <udc_req_std_ep_set_feature+0x44>)
  401592:	4798      	blx	r3
  401594:	4603      	mov	r3, r0
  401596:	e000      	b.n	40159a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  401598:	2300      	movs	r3, #0
}
  40159a:	4618      	mov	r0, r3
  40159c:	bd80      	pop	{r7, pc}
  40159e:	bf00      	nop
  4015a0:	2000894c 	.word	0x2000894c
  4015a4:	004028e1 	.word	0x004028e1
  4015a8:	0040257d 	.word	0x0040257d

004015ac <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4015b0:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <udc_valid_address+0x18>)
  4015b2:	885b      	ldrh	r3, [r3, #2]
  4015b4:	b2db      	uxtb	r3, r3
  4015b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4015ba:	b2db      	uxtb	r3, r3
  4015bc:	4618      	mov	r0, r3
  4015be:	4b02      	ldr	r3, [pc, #8]	; (4015c8 <udc_valid_address+0x1c>)
  4015c0:	4798      	blx	r3
}
  4015c2:	bd80      	pop	{r7, pc}
  4015c4:	2000894c 	.word	0x2000894c
  4015c8:	00402255 	.word	0x00402255

004015cc <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  4015cc:	b480      	push	{r7}
  4015ce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4015d0:	4b07      	ldr	r3, [pc, #28]	; (4015f0 <udc_req_std_dev_set_address+0x24>)
  4015d2:	88db      	ldrh	r3, [r3, #6]
  4015d4:	2b00      	cmp	r3, #0
  4015d6:	d001      	beq.n	4015dc <udc_req_std_dev_set_address+0x10>
		return false;
  4015d8:	2300      	movs	r3, #0
  4015da:	e003      	b.n	4015e4 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4015dc:	4b04      	ldr	r3, [pc, #16]	; (4015f0 <udc_req_std_dev_set_address+0x24>)
  4015de:	4a05      	ldr	r2, [pc, #20]	; (4015f4 <udc_req_std_dev_set_address+0x28>)
  4015e0:	611a      	str	r2, [r3, #16]
	return true;
  4015e2:	2301      	movs	r3, #1
}
  4015e4:	4618      	mov	r0, r3
  4015e6:	46bd      	mov	sp, r7
  4015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop
  4015f0:	2000894c 	.word	0x2000894c
  4015f4:	004015ad 	.word	0x004015ad

004015f8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  4015f8:	b580      	push	{r7, lr}
  4015fa:	b084      	sub	sp, #16
  4015fc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  4015fe:	2300      	movs	r3, #0
  401600:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401602:	4b21      	ldr	r3, [pc, #132]	; (401688 <udc_req_std_dev_get_str_desc+0x90>)
  401604:	885b      	ldrh	r3, [r3, #2]
  401606:	b2db      	uxtb	r3, r3
  401608:	2b01      	cmp	r3, #1
  40160a:	d008      	beq.n	40161e <udc_req_std_dev_get_str_desc+0x26>
  40160c:	2b02      	cmp	r3, #2
  40160e:	d00b      	beq.n	401628 <udc_req_std_dev_get_str_desc+0x30>
  401610:	2b00      	cmp	r3, #0
  401612:	d10e      	bne.n	401632 <udc_req_std_dev_get_str_desc+0x3a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401614:	481d      	ldr	r0, [pc, #116]	; (40168c <udc_req_std_dev_get_str_desc+0x94>)
  401616:	2104      	movs	r1, #4
  401618:	4b1d      	ldr	r3, [pc, #116]	; (401690 <udc_req_std_dev_get_str_desc+0x98>)
  40161a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  40161c:	e00b      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  40161e:	2307      	movs	r3, #7
  401620:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  401622:	4b1c      	ldr	r3, [pc, #112]	; (401694 <udc_req_std_dev_get_str_desc+0x9c>)
  401624:	60bb      	str	r3, [r7, #8]
		break;
  401626:	e006      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401628:	230a      	movs	r3, #10
  40162a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  40162c:	4b1a      	ldr	r3, [pc, #104]	; (401698 <udc_req_std_dev_get_str_desc+0xa0>)
  40162e:	60bb      	str	r3, [r7, #8]
		break;
  401630:	e001      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  401632:	2300      	movs	r3, #0
  401634:	e023      	b.n	40167e <udc_req_std_dev_get_str_desc+0x86>
	}

	if (str_length) {
  401636:	79fb      	ldrb	r3, [r7, #7]
  401638:	2b00      	cmp	r3, #0
  40163a:	d01f      	beq.n	40167c <udc_req_std_dev_get_str_desc+0x84>
		for(i = 0; i < str_length; i++) {
  40163c:	2300      	movs	r3, #0
  40163e:	73fb      	strb	r3, [r7, #15]
  401640:	e00b      	b.n	40165a <udc_req_std_dev_get_str_desc+0x62>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401642:	7bfb      	ldrb	r3, [r7, #15]
  401644:	7bfa      	ldrb	r2, [r7, #15]
  401646:	68b9      	ldr	r1, [r7, #8]
  401648:	440a      	add	r2, r1
  40164a:	7812      	ldrb	r2, [r2, #0]
  40164c:	4913      	ldr	r1, [pc, #76]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  40164e:	005b      	lsls	r3, r3, #1
  401650:	440b      	add	r3, r1
  401652:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  401654:	7bfb      	ldrb	r3, [r7, #15]
  401656:	3301      	adds	r3, #1
  401658:	73fb      	strb	r3, [r7, #15]
  40165a:	7bfa      	ldrb	r2, [r7, #15]
  40165c:	79fb      	ldrb	r3, [r7, #7]
  40165e:	429a      	cmp	r2, r3
  401660:	d3ef      	bcc.n	401642 <udc_req_std_dev_get_str_desc+0x4a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401662:	79fb      	ldrb	r3, [r7, #7]
  401664:	3301      	adds	r3, #1
  401666:	b2db      	uxtb	r3, r3
  401668:	005b      	lsls	r3, r3, #1
  40166a:	b2da      	uxtb	r2, r3
  40166c:	4b0b      	ldr	r3, [pc, #44]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  40166e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  401670:	4b0a      	ldr	r3, [pc, #40]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  401672:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
  401674:	4809      	ldr	r0, [pc, #36]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  401676:	4619      	mov	r1, r3
  401678:	4b05      	ldr	r3, [pc, #20]	; (401690 <udc_req_std_dev_get_str_desc+0x98>)
  40167a:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
  40167c:	2301      	movs	r3, #1
}
  40167e:	4618      	mov	r0, r3
  401680:	3710      	adds	r7, #16
  401682:	46bd      	mov	sp, r7
  401684:	bd80      	pop	{r7, pc}
  401686:	bf00      	nop
  401688:	2000894c 	.word	0x2000894c
  40168c:	20000138 	.word	0x20000138
  401690:	00402319 	.word	0x00402319
  401694:	2000013c 	.word	0x2000013c
  401698:	20000144 	.word	0x20000144
  40169c:	20000150 	.word	0x20000150

004016a0 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  4016a0:	b580      	push	{r7, lr}
  4016a2:	b082      	sub	sp, #8
  4016a4:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4016a6:	4b41      	ldr	r3, [pc, #260]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4016a8:	885b      	ldrh	r3, [r3, #2]
  4016aa:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4016ac:	4b3f      	ldr	r3, [pc, #252]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4016ae:	885b      	ldrh	r3, [r3, #2]
  4016b0:	0a1b      	lsrs	r3, r3, #8
  4016b2:	b29b      	uxth	r3, r3
  4016b4:	b2db      	uxtb	r3, r3
  4016b6:	3b01      	subs	r3, #1
  4016b8:	2b0e      	cmp	r3, #14
  4016ba:	d866      	bhi.n	40178a <udc_req_std_dev_get_descriptor+0xea>
  4016bc:	a201      	add	r2, pc, #4	; (adr r2, 4016c4 <udc_req_std_dev_get_descriptor+0x24>)
  4016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4016c2:	bf00      	nop
  4016c4:	00401701 	.word	0x00401701
  4016c8:	00401715 	.word	0x00401715
  4016cc:	00401775 	.word	0x00401775
  4016d0:	0040178b 	.word	0x0040178b
  4016d4:	0040178b 	.word	0x0040178b
  4016d8:	0040178b 	.word	0x0040178b
  4016dc:	0040178b 	.word	0x0040178b
  4016e0:	0040178b 	.word	0x0040178b
  4016e4:	0040178b 	.word	0x0040178b
  4016e8:	0040178b 	.word	0x0040178b
  4016ec:	0040178b 	.word	0x0040178b
  4016f0:	0040178b 	.word	0x0040178b
  4016f4:	0040178b 	.word	0x0040178b
  4016f8:	0040178b 	.word	0x0040178b
  4016fc:	00401753 	.word	0x00401753
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  401700:	4b2b      	ldr	r3, [pc, #172]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401702:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  401704:	4b2a      	ldr	r3, [pc, #168]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401706:	681b      	ldr	r3, [r3, #0]
  401708:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  40170a:	4610      	mov	r0, r2
  40170c:	4619      	mov	r1, r3
  40170e:	4b29      	ldr	r3, [pc, #164]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401710:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
  401712:	e03c      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  401714:	4b26      	ldr	r3, [pc, #152]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	7c5b      	ldrb	r3, [r3, #17]
  40171a:	79fa      	ldrb	r2, [r7, #7]
  40171c:	429a      	cmp	r2, r3
  40171e:	d301      	bcc.n	401724 <udc_req_std_dev_get_descriptor+0x84>
					bNumConfigurations) {
				return false;
  401720:	2300      	movs	r3, #0
  401722:	e03f      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401724:	4b22      	ldr	r3, [pc, #136]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401726:	685a      	ldr	r2, [r3, #4]
  401728:	79fb      	ldrb	r3, [r7, #7]
  40172a:	00db      	lsls	r3, r3, #3
  40172c:	4413      	add	r3, r2
  40172e:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401730:	4b1f      	ldr	r3, [pc, #124]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401732:	6859      	ldr	r1, [r3, #4]
  401734:	79fb      	ldrb	r3, [r7, #7]
  401736:	00db      	lsls	r3, r3, #3
  401738:	440b      	add	r3, r1
  40173a:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40173c:	885b      	ldrh	r3, [r3, #2]
  40173e:	b29b      	uxth	r3, r3
  401740:	4610      	mov	r0, r2
  401742:	4619      	mov	r1, r3
  401744:	4b1b      	ldr	r3, [pc, #108]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401746:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401748:	4b18      	ldr	r3, [pc, #96]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  40174a:	689b      	ldr	r3, [r3, #8]
  40174c:	2202      	movs	r2, #2
  40174e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  401750:	e01d      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401752:	4b17      	ldr	r3, [pc, #92]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401754:	689b      	ldr	r3, [r3, #8]
  401756:	2b00      	cmp	r3, #0
  401758:	d101      	bne.n	40175e <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  40175a:	2300      	movs	r3, #0
  40175c:	e022      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40175e:	4b14      	ldr	r3, [pc, #80]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401760:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  401762:	4b13      	ldr	r3, [pc, #76]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401764:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401766:	885b      	ldrh	r3, [r3, #2]
  401768:	b29b      	uxth	r3, r3
  40176a:	4610      	mov	r0, r2
  40176c:	4619      	mov	r1, r3
  40176e:	4b11      	ldr	r3, [pc, #68]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401770:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
  401772:	e00c      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  401774:	4b10      	ldr	r3, [pc, #64]	; (4017b8 <udc_req_std_dev_get_descriptor+0x118>)
  401776:	4798      	blx	r3
  401778:	4603      	mov	r3, r0
  40177a:	f083 0301 	eor.w	r3, r3, #1
  40177e:	b2db      	uxtb	r3, r3
  401780:	2b00      	cmp	r3, #0
  401782:	d001      	beq.n	401788 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
  401784:	2300      	movs	r3, #0
  401786:	e00d      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;
  401788:	e001      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>

	default:
		// Unknown descriptor requested
		return false;
  40178a:	2300      	movs	r3, #0
  40178c:	e00a      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40178e:	4b07      	ldr	r3, [pc, #28]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  401790:	88da      	ldrh	r2, [r3, #6]
  401792:	4b06      	ldr	r3, [pc, #24]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  401794:	899b      	ldrh	r3, [r3, #12]
  401796:	429a      	cmp	r2, r3
  401798:	d203      	bcs.n	4017a2 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40179a:	4b04      	ldr	r3, [pc, #16]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  40179c:	88da      	ldrh	r2, [r3, #6]
  40179e:	4b03      	ldr	r3, [pc, #12]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4017a0:	819a      	strh	r2, [r3, #12]
	}
	return true;
  4017a2:	2301      	movs	r3, #1
}
  4017a4:	4618      	mov	r0, r3
  4017a6:	3708      	adds	r7, #8
  4017a8:	46bd      	mov	sp, r7
  4017aa:	bd80      	pop	{r7, pc}
  4017ac:	2000894c 	.word	0x2000894c
  4017b0:	2000034c 	.word	0x2000034c
  4017b4:	00402319 	.word	0x00402319
  4017b8:	004015f9 	.word	0x004015f9

004017bc <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  4017bc:	b580      	push	{r7, lr}
  4017be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  4017c0:	4b06      	ldr	r3, [pc, #24]	; (4017dc <udc_req_std_dev_get_configuration+0x20>)
  4017c2:	88db      	ldrh	r3, [r3, #6]
  4017c4:	2b01      	cmp	r3, #1
  4017c6:	d001      	beq.n	4017cc <udc_req_std_dev_get_configuration+0x10>
		return false;
  4017c8:	2300      	movs	r3, #0
  4017ca:	e004      	b.n	4017d6 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  4017cc:	4804      	ldr	r0, [pc, #16]	; (4017e0 <udc_req_std_dev_get_configuration+0x24>)
  4017ce:	2101      	movs	r1, #1
  4017d0:	4b04      	ldr	r3, [pc, #16]	; (4017e4 <udc_req_std_dev_get_configuration+0x28>)
  4017d2:	4798      	blx	r3
	return true;
  4017d4:	2301      	movs	r3, #1
}
  4017d6:	4618      	mov	r0, r3
  4017d8:	bd80      	pop	{r7, pc}
  4017da:	bf00      	nop
  4017dc:	2000894c 	.word	0x2000894c
  4017e0:	20000db0 	.word	0x20000db0
  4017e4:	00402319 	.word	0x00402319

004017e8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  4017e8:	b580      	push	{r7, lr}
  4017ea:	b082      	sub	sp, #8
  4017ec:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4017ee:	4b27      	ldr	r3, [pc, #156]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  4017f0:	88db      	ldrh	r3, [r3, #6]
  4017f2:	2b00      	cmp	r3, #0
  4017f4:	d001      	beq.n	4017fa <udc_req_std_dev_set_configuration+0x12>
		return false;
  4017f6:	2300      	movs	r3, #0
  4017f8:	e043      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4017fa:	4b25      	ldr	r3, [pc, #148]	; (401890 <udc_req_std_dev_set_configuration+0xa8>)
  4017fc:	4798      	blx	r3
  4017fe:	4603      	mov	r3, r0
  401800:	2b00      	cmp	r3, #0
  401802:	d101      	bne.n	401808 <udc_req_std_dev_set_configuration+0x20>
		return false;
  401804:	2300      	movs	r3, #0
  401806:	e03c      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401808:	4b20      	ldr	r3, [pc, #128]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  40180a:	885b      	ldrh	r3, [r3, #2]
  40180c:	b2da      	uxtb	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  40180e:	4b21      	ldr	r3, [pc, #132]	; (401894 <udc_req_std_dev_set_configuration+0xac>)
  401810:	681b      	ldr	r3, [r3, #0]
  401812:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401814:	429a      	cmp	r2, r3
  401816:	dd01      	ble.n	40181c <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  401818:	2300      	movs	r3, #0
  40181a:	e032      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  40181c:	4b1e      	ldr	r3, [pc, #120]	; (401898 <udc_req_std_dev_set_configuration+0xb0>)
  40181e:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401820:	4b1a      	ldr	r3, [pc, #104]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  401822:	885b      	ldrh	r3, [r3, #2]
  401824:	b2da      	uxtb	r2, r3
  401826:	4b1d      	ldr	r3, [pc, #116]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  401828:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  40182a:	4b1c      	ldr	r3, [pc, #112]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  40182c:	781b      	ldrb	r3, [r3, #0]
  40182e:	2b00      	cmp	r3, #0
  401830:	d101      	bne.n	401836 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  401832:	2301      	movs	r3, #1
  401834:	e025      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401836:	4b17      	ldr	r3, [pc, #92]	; (401894 <udc_req_std_dev_set_configuration+0xac>)
  401838:	685a      	ldr	r2, [r3, #4]
  40183a:	4b18      	ldr	r3, [pc, #96]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  40183c:	781b      	ldrb	r3, [r3, #0]
  40183e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401842:	3b01      	subs	r3, #1
  401844:	00db      	lsls	r3, r3, #3
  401846:	441a      	add	r2, r3
  401848:	4b15      	ldr	r3, [pc, #84]	; (4018a0 <udc_req_std_dev_set_configuration+0xb8>)
  40184a:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40184c:	2300      	movs	r3, #0
  40184e:	71fb      	strb	r3, [r7, #7]
  401850:	e00f      	b.n	401872 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401852:	79fb      	ldrb	r3, [r7, #7]
  401854:	4618      	mov	r0, r3
  401856:	2100      	movs	r1, #0
  401858:	4b12      	ldr	r3, [pc, #72]	; (4018a4 <udc_req_std_dev_set_configuration+0xbc>)
  40185a:	4798      	blx	r3
  40185c:	4603      	mov	r3, r0
  40185e:	f083 0301 	eor.w	r3, r3, #1
  401862:	b2db      	uxtb	r3, r3
  401864:	2b00      	cmp	r3, #0
  401866:	d001      	beq.n	40186c <udc_req_std_dev_set_configuration+0x84>
			return false;
  401868:	2300      	movs	r3, #0
  40186a:	e00a      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40186c:	79fb      	ldrb	r3, [r7, #7]
  40186e:	3301      	adds	r3, #1
  401870:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401872:	4b0b      	ldr	r3, [pc, #44]	; (4018a0 <udc_req_std_dev_set_configuration+0xb8>)
  401874:	681b      	ldr	r3, [r3, #0]
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	791b      	ldrb	r3, [r3, #4]
  40187a:	79fa      	ldrb	r2, [r7, #7]
  40187c:	429a      	cmp	r2, r3
  40187e:	d3e8      	bcc.n	401852 <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401880:	2301      	movs	r3, #1
}
  401882:	4618      	mov	r0, r3
  401884:	3708      	adds	r7, #8
  401886:	46bd      	mov	sp, r7
  401888:	bd80      	pop	{r7, pc}
  40188a:	bf00      	nop
  40188c:	2000894c 	.word	0x2000894c
  401890:	004022b9 	.word	0x004022b9
  401894:	2000034c 	.word	0x2000034c
  401898:	0040139d 	.word	0x0040139d
  40189c:	20000db0 	.word	0x20000db0
  4018a0:	20000db4 	.word	0x20000db4
  4018a4:	004012ed 	.word	0x004012ed

004018a8 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  4018a8:	b580      	push	{r7, lr}
  4018aa:	b082      	sub	sp, #8
  4018ac:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4018ae:	4b1e      	ldr	r3, [pc, #120]	; (401928 <udc_req_std_iface_get_setting+0x80>)
  4018b0:	88db      	ldrh	r3, [r3, #6]
  4018b2:	2b01      	cmp	r3, #1
  4018b4:	d001      	beq.n	4018ba <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  4018b6:	2300      	movs	r3, #0
  4018b8:	e032      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  4018ba:	4b1c      	ldr	r3, [pc, #112]	; (40192c <udc_req_std_iface_get_setting+0x84>)
  4018bc:	781b      	ldrb	r3, [r3, #0]
  4018be:	2b00      	cmp	r3, #0
  4018c0:	d101      	bne.n	4018c6 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  4018c2:	2300      	movs	r3, #0
  4018c4:	e02c      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4018c6:	4b18      	ldr	r3, [pc, #96]	; (401928 <udc_req_std_iface_get_setting+0x80>)
  4018c8:	889b      	ldrh	r3, [r3, #4]
  4018ca:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4018cc:	4b18      	ldr	r3, [pc, #96]	; (401930 <udc_req_std_iface_get_setting+0x88>)
  4018ce:	681b      	ldr	r3, [r3, #0]
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	791b      	ldrb	r3, [r3, #4]
  4018d4:	79fa      	ldrb	r2, [r7, #7]
  4018d6:	429a      	cmp	r2, r3
  4018d8:	d301      	bcc.n	4018de <udc_req_std_iface_get_setting+0x36>
		return false;
  4018da:	2300      	movs	r3, #0
  4018dc:	e020      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4018de:	79fb      	ldrb	r3, [r7, #7]
  4018e0:	4618      	mov	r0, r3
  4018e2:	2100      	movs	r1, #0
  4018e4:	4b13      	ldr	r3, [pc, #76]	; (401934 <udc_req_std_iface_get_setting+0x8c>)
  4018e6:	4798      	blx	r3
  4018e8:	4603      	mov	r3, r0
  4018ea:	f083 0301 	eor.w	r3, r3, #1
  4018ee:	b2db      	uxtb	r3, r3
  4018f0:	2b00      	cmp	r3, #0
  4018f2:	d001      	beq.n	4018f8 <udc_req_std_iface_get_setting+0x50>
		return false;
  4018f4:	2300      	movs	r3, #0
  4018f6:	e013      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4018f8:	4b0d      	ldr	r3, [pc, #52]	; (401930 <udc_req_std_iface_get_setting+0x88>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	685a      	ldr	r2, [r3, #4]
  4018fe:	79fb      	ldrb	r3, [r7, #7]
  401900:	009b      	lsls	r3, r3, #2
  401902:	4413      	add	r3, r2
  401904:	681b      	ldr	r3, [r3, #0]
  401906:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  401908:	683b      	ldr	r3, [r7, #0]
  40190a:	68db      	ldr	r3, [r3, #12]
  40190c:	4798      	blx	r3
  40190e:	4603      	mov	r3, r0
  401910:	461a      	mov	r2, r3
  401912:	4b09      	ldr	r3, [pc, #36]	; (401938 <udc_req_std_iface_get_setting+0x90>)
  401914:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  401916:	4808      	ldr	r0, [pc, #32]	; (401938 <udc_req_std_iface_get_setting+0x90>)
  401918:	2101      	movs	r1, #1
  40191a:	4b08      	ldr	r3, [pc, #32]	; (40193c <udc_req_std_iface_get_setting+0x94>)
  40191c:	4798      	blx	r3
	return true;
  40191e:	2301      	movs	r3, #1
}
  401920:	4618      	mov	r0, r3
  401922:	3708      	adds	r7, #8
  401924:	46bd      	mov	sp, r7
  401926:	bd80      	pop	{r7, pc}
  401928:	2000894c 	.word	0x2000894c
  40192c:	20000db0 	.word	0x20000db0
  401930:	20000db4 	.word	0x20000db4
  401934:	004011b5 	.word	0x004011b5
  401938:	20000dac 	.word	0x20000dac
  40193c:	00402319 	.word	0x00402319

00401940 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  401940:	b580      	push	{r7, lr}
  401942:	b082      	sub	sp, #8
  401944:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401946:	4b14      	ldr	r3, [pc, #80]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401948:	88db      	ldrh	r3, [r3, #6]
  40194a:	2b00      	cmp	r3, #0
  40194c:	d001      	beq.n	401952 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  40194e:	2300      	movs	r3, #0
  401950:	e01e      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  401952:	4b12      	ldr	r3, [pc, #72]	; (40199c <udc_req_std_iface_set_setting+0x5c>)
  401954:	781b      	ldrb	r3, [r3, #0]
  401956:	2b00      	cmp	r3, #0
  401958:	d101      	bne.n	40195e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  40195a:	2300      	movs	r3, #0
  40195c:	e018      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40195e:	4b0e      	ldr	r3, [pc, #56]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401960:	889b      	ldrh	r3, [r3, #4]
  401962:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401964:	4b0c      	ldr	r3, [pc, #48]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401966:	885b      	ldrh	r3, [r3, #2]
  401968:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40196a:	79fb      	ldrb	r3, [r7, #7]
  40196c:	4618      	mov	r0, r3
  40196e:	4b0c      	ldr	r3, [pc, #48]	; (4019a0 <udc_req_std_iface_set_setting+0x60>)
  401970:	4798      	blx	r3
  401972:	4603      	mov	r3, r0
  401974:	f083 0301 	eor.w	r3, r3, #1
  401978:	b2db      	uxtb	r3, r3
  40197a:	2b00      	cmp	r3, #0
  40197c:	d001      	beq.n	401982 <udc_req_std_iface_set_setting+0x42>
		return false;
  40197e:	2300      	movs	r3, #0
  401980:	e006      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401982:	79fa      	ldrb	r2, [r7, #7]
  401984:	79bb      	ldrb	r3, [r7, #6]
  401986:	4610      	mov	r0, r2
  401988:	4619      	mov	r1, r3
  40198a:	4b06      	ldr	r3, [pc, #24]	; (4019a4 <udc_req_std_iface_set_setting+0x64>)
  40198c:	4798      	blx	r3
  40198e:	4603      	mov	r3, r0
}
  401990:	4618      	mov	r0, r3
  401992:	3708      	adds	r7, #8
  401994:	46bd      	mov	sp, r7
  401996:	bd80      	pop	{r7, pc}
  401998:	2000894c 	.word	0x2000894c
  40199c:	20000db0 	.word	0x20000db0
  4019a0:	0040124d 	.word	0x0040124d
  4019a4:	004012ed 	.word	0x004012ed

004019a8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  4019a8:	b580      	push	{r7, lr}
  4019aa:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  4019ac:	4b4e      	ldr	r3, [pc, #312]	; (401ae8 <udc_reqstd+0x140>)
  4019ae:	781b      	ldrb	r3, [r3, #0]
  4019b0:	b2db      	uxtb	r3, r3
  4019b2:	b25b      	sxtb	r3, r3
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	da3f      	bge.n	401a38 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  4019b8:	4b4b      	ldr	r3, [pc, #300]	; (401ae8 <udc_reqstd+0x140>)
  4019ba:	88db      	ldrh	r3, [r3, #6]
  4019bc:	2b00      	cmp	r3, #0
  4019be:	d101      	bne.n	4019c4 <udc_reqstd+0x1c>
			return false; // Error for USB host
  4019c0:	2300      	movs	r3, #0
  4019c2:	e08f      	b.n	401ae4 <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4019c4:	4b48      	ldr	r3, [pc, #288]	; (401ae8 <udc_reqstd+0x140>)
  4019c6:	781b      	ldrb	r3, [r3, #0]
  4019c8:	f003 031f 	and.w	r3, r3, #31
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	d114      	bne.n	4019fa <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4019d0:	4b45      	ldr	r3, [pc, #276]	; (401ae8 <udc_reqstd+0x140>)
  4019d2:	785b      	ldrb	r3, [r3, #1]
  4019d4:	2b06      	cmp	r3, #6
  4019d6:	d008      	beq.n	4019ea <udc_reqstd+0x42>
  4019d8:	2b08      	cmp	r3, #8
  4019da:	d00a      	beq.n	4019f2 <udc_reqstd+0x4a>
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d000      	beq.n	4019e2 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  4019e0:	e00b      	b.n	4019fa <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
  4019e2:	4b42      	ldr	r3, [pc, #264]	; (401aec <udc_reqstd+0x144>)
  4019e4:	4798      	blx	r3
  4019e6:	4603      	mov	r3, r0
  4019e8:	e07c      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
  4019ea:	4b41      	ldr	r3, [pc, #260]	; (401af0 <udc_reqstd+0x148>)
  4019ec:	4798      	blx	r3
  4019ee:	4603      	mov	r3, r0
  4019f0:	e078      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
  4019f2:	4b40      	ldr	r3, [pc, #256]	; (401af4 <udc_reqstd+0x14c>)
  4019f4:	4798      	blx	r3
  4019f6:	4603      	mov	r3, r0
  4019f8:	e074      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4019fa:	4b3b      	ldr	r3, [pc, #236]	; (401ae8 <udc_reqstd+0x140>)
  4019fc:	781b      	ldrb	r3, [r3, #0]
  4019fe:	f003 031f 	and.w	r3, r3, #31
  401a02:	2b01      	cmp	r3, #1
  401a04:	d108      	bne.n	401a18 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a06:	4b38      	ldr	r3, [pc, #224]	; (401ae8 <udc_reqstd+0x140>)
  401a08:	785b      	ldrb	r3, [r3, #1]
  401a0a:	2b0a      	cmp	r3, #10
  401a0c:	d000      	beq.n	401a10 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  401a0e:	e003      	b.n	401a18 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
  401a10:	4b39      	ldr	r3, [pc, #228]	; (401af8 <udc_reqstd+0x150>)
  401a12:	4798      	blx	r3
  401a14:	4603      	mov	r3, r0
  401a16:	e065      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401a18:	4b33      	ldr	r3, [pc, #204]	; (401ae8 <udc_reqstd+0x140>)
  401a1a:	781b      	ldrb	r3, [r3, #0]
  401a1c:	f003 031f 	and.w	r3, r3, #31
  401a20:	2b02      	cmp	r3, #2
  401a22:	d15e      	bne.n	401ae2 <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a24:	4b30      	ldr	r3, [pc, #192]	; (401ae8 <udc_reqstd+0x140>)
  401a26:	785b      	ldrb	r3, [r3, #1]
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d001      	beq.n	401a30 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  401a2c:	bf00      	nop
  401a2e:	e058      	b.n	401ae2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
  401a30:	4b32      	ldr	r3, [pc, #200]	; (401afc <udc_reqstd+0x154>)
  401a32:	4798      	blx	r3
  401a34:	4603      	mov	r3, r0
  401a36:	e055      	b.n	401ae4 <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401a38:	4b2b      	ldr	r3, [pc, #172]	; (401ae8 <udc_reqstd+0x140>)
  401a3a:	781b      	ldrb	r3, [r3, #0]
  401a3c:	f003 031f 	and.w	r3, r3, #31
  401a40:	2b00      	cmp	r3, #0
  401a42:	d12a      	bne.n	401a9a <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a44:	4b28      	ldr	r3, [pc, #160]	; (401ae8 <udc_reqstd+0x140>)
  401a46:	785b      	ldrb	r3, [r3, #1]
  401a48:	3b01      	subs	r3, #1
  401a4a:	2b08      	cmp	r3, #8
  401a4c:	d824      	bhi.n	401a98 <udc_reqstd+0xf0>
  401a4e:	a201      	add	r2, pc, #4	; (adr r2, 401a54 <udc_reqstd+0xac>)
  401a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a54:	00401a81 	.word	0x00401a81
  401a58:	00401a99 	.word	0x00401a99
  401a5c:	00401a89 	.word	0x00401a89
  401a60:	00401a99 	.word	0x00401a99
  401a64:	00401a79 	.word	0x00401a79
  401a68:	00401a99 	.word	0x00401a99
  401a6c:	00401a99 	.word	0x00401a99
  401a70:	00401a99 	.word	0x00401a99
  401a74:	00401a91 	.word	0x00401a91
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  401a78:	4b21      	ldr	r3, [pc, #132]	; (401b00 <udc_reqstd+0x158>)
  401a7a:	4798      	blx	r3
  401a7c:	4603      	mov	r3, r0
  401a7e:	e031      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  401a80:	4b20      	ldr	r3, [pc, #128]	; (401b04 <udc_reqstd+0x15c>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	e02d      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401a88:	4b1f      	ldr	r3, [pc, #124]	; (401b08 <udc_reqstd+0x160>)
  401a8a:	4798      	blx	r3
  401a8c:	4603      	mov	r3, r0
  401a8e:	e029      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  401a90:	4b1e      	ldr	r3, [pc, #120]	; (401b0c <udc_reqstd+0x164>)
  401a92:	4798      	blx	r3
  401a94:	4603      	mov	r3, r0
  401a96:	e025      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  401a98:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401a9a:	4b13      	ldr	r3, [pc, #76]	; (401ae8 <udc_reqstd+0x140>)
  401a9c:	781b      	ldrb	r3, [r3, #0]
  401a9e:	f003 031f 	and.w	r3, r3, #31
  401aa2:	2b01      	cmp	r3, #1
  401aa4:	d108      	bne.n	401ab8 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401aa6:	4b10      	ldr	r3, [pc, #64]	; (401ae8 <udc_reqstd+0x140>)
  401aa8:	785b      	ldrb	r3, [r3, #1]
  401aaa:	2b0b      	cmp	r3, #11
  401aac:	d000      	beq.n	401ab0 <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  401aae:	e003      	b.n	401ab8 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
  401ab0:	4b17      	ldr	r3, [pc, #92]	; (401b10 <udc_reqstd+0x168>)
  401ab2:	4798      	blx	r3
  401ab4:	4603      	mov	r3, r0
  401ab6:	e015      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401ab8:	4b0b      	ldr	r3, [pc, #44]	; (401ae8 <udc_reqstd+0x140>)
  401aba:	781b      	ldrb	r3, [r3, #0]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2b02      	cmp	r3, #2
  401ac2:	d10e      	bne.n	401ae2 <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401ac4:	4b08      	ldr	r3, [pc, #32]	; (401ae8 <udc_reqstd+0x140>)
  401ac6:	785b      	ldrb	r3, [r3, #1]
  401ac8:	2b01      	cmp	r3, #1
  401aca:	d002      	beq.n	401ad2 <udc_reqstd+0x12a>
  401acc:	2b03      	cmp	r3, #3
  401ace:	d004      	beq.n	401ada <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  401ad0:	e007      	b.n	401ae2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
  401ad2:	4b10      	ldr	r3, [pc, #64]	; (401b14 <udc_reqstd+0x16c>)
  401ad4:	4798      	blx	r3
  401ad6:	4603      	mov	r3, r0
  401ad8:	e004      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
  401ada:	4b0f      	ldr	r3, [pc, #60]	; (401b18 <udc_reqstd+0x170>)
  401adc:	4798      	blx	r3
  401ade:	4603      	mov	r3, r0
  401ae0:	e000      	b.n	401ae4 <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
  401ae2:	2300      	movs	r3, #0
}
  401ae4:	4618      	mov	r0, r3
  401ae6:	bd80      	pop	{r7, pc}
  401ae8:	2000894c 	.word	0x2000894c
  401aec:	0040144d 	.word	0x0040144d
  401af0:	004016a1 	.word	0x004016a1
  401af4:	004017bd 	.word	0x004017bd
  401af8:	004018a9 	.word	0x004018a9
  401afc:	00401479 	.word	0x00401479
  401b00:	004015cd 	.word	0x004015cd
  401b04:	004014bd 	.word	0x004014bd
  401b08:	00401535 	.word	0x00401535
  401b0c:	004017e9 	.word	0x004017e9
  401b10:	00401941 	.word	0x00401941
  401b14:	004014fd 	.word	0x004014fd
  401b18:	00401565 	.word	0x00401565

00401b1c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  401b1c:	b580      	push	{r7, lr}
  401b1e:	b082      	sub	sp, #8
  401b20:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401b22:	4b20      	ldr	r3, [pc, #128]	; (401ba4 <udc_req_iface+0x88>)
  401b24:	781b      	ldrb	r3, [r3, #0]
  401b26:	2b00      	cmp	r3, #0
  401b28:	d101      	bne.n	401b2e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  401b2a:	2300      	movs	r3, #0
  401b2c:	e035      	b.n	401b9a <udc_req_iface+0x7e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401b2e:	4b1e      	ldr	r3, [pc, #120]	; (401ba8 <udc_req_iface+0x8c>)
  401b30:	889b      	ldrh	r3, [r3, #4]
  401b32:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401b34:	4b1d      	ldr	r3, [pc, #116]	; (401bac <udc_req_iface+0x90>)
  401b36:	681b      	ldr	r3, [r3, #0]
  401b38:	681b      	ldr	r3, [r3, #0]
  401b3a:	791b      	ldrb	r3, [r3, #4]
  401b3c:	79fa      	ldrb	r2, [r7, #7]
  401b3e:	429a      	cmp	r2, r3
  401b40:	d301      	bcc.n	401b46 <udc_req_iface+0x2a>
		return false;
  401b42:	2300      	movs	r3, #0
  401b44:	e029      	b.n	401b9a <udc_req_iface+0x7e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401b46:	79fb      	ldrb	r3, [r7, #7]
  401b48:	4618      	mov	r0, r3
  401b4a:	2100      	movs	r1, #0
  401b4c:	4b18      	ldr	r3, [pc, #96]	; (401bb0 <udc_req_iface+0x94>)
  401b4e:	4798      	blx	r3
  401b50:	4603      	mov	r3, r0
  401b52:	f083 0301 	eor.w	r3, r3, #1
  401b56:	b2db      	uxtb	r3, r3
  401b58:	2b00      	cmp	r3, #0
  401b5a:	d001      	beq.n	401b60 <udc_req_iface+0x44>
		return false;
  401b5c:	2300      	movs	r3, #0
  401b5e:	e01c      	b.n	401b9a <udc_req_iface+0x7e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401b60:	4b12      	ldr	r3, [pc, #72]	; (401bac <udc_req_iface+0x90>)
  401b62:	681b      	ldr	r3, [r3, #0]
  401b64:	685a      	ldr	r2, [r3, #4]
  401b66:	79fb      	ldrb	r3, [r7, #7]
  401b68:	009b      	lsls	r3, r3, #2
  401b6a:	4413      	add	r3, r2
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401b70:	683b      	ldr	r3, [r7, #0]
  401b72:	68db      	ldr	r3, [r3, #12]
  401b74:	4798      	blx	r3
  401b76:	4603      	mov	r3, r0
  401b78:	79fa      	ldrb	r2, [r7, #7]
  401b7a:	4610      	mov	r0, r2
  401b7c:	4619      	mov	r1, r3
  401b7e:	4b0c      	ldr	r3, [pc, #48]	; (401bb0 <udc_req_iface+0x94>)
  401b80:	4798      	blx	r3
  401b82:	4603      	mov	r3, r0
  401b84:	f083 0301 	eor.w	r3, r3, #1
  401b88:	b2db      	uxtb	r3, r3
  401b8a:	2b00      	cmp	r3, #0
  401b8c:	d001      	beq.n	401b92 <udc_req_iface+0x76>
		return false;
  401b8e:	2300      	movs	r3, #0
  401b90:	e003      	b.n	401b9a <udc_req_iface+0x7e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401b92:	683b      	ldr	r3, [r7, #0]
  401b94:	689b      	ldr	r3, [r3, #8]
  401b96:	4798      	blx	r3
  401b98:	4603      	mov	r3, r0
}
  401b9a:	4618      	mov	r0, r3
  401b9c:	3708      	adds	r7, #8
  401b9e:	46bd      	mov	sp, r7
  401ba0:	bd80      	pop	{r7, pc}
  401ba2:	bf00      	nop
  401ba4:	20000db0 	.word	0x20000db0
  401ba8:	2000894c 	.word	0x2000894c
  401bac:	20000db4 	.word	0x20000db4
  401bb0:	004011b5 	.word	0x004011b5

00401bb4 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  401bb4:	b580      	push	{r7, lr}
  401bb6:	b082      	sub	sp, #8
  401bb8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401bba:	4b1e      	ldr	r3, [pc, #120]	; (401c34 <udc_req_ep+0x80>)
  401bbc:	781b      	ldrb	r3, [r3, #0]
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d101      	bne.n	401bc6 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  401bc2:	2300      	movs	r3, #0
  401bc4:	e031      	b.n	401c2a <udc_req_ep+0x76>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401bc6:	4b1c      	ldr	r3, [pc, #112]	; (401c38 <udc_req_ep+0x84>)
  401bc8:	889b      	ldrh	r3, [r3, #4]
  401bca:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401bcc:	2300      	movs	r3, #0
  401bce:	71fb      	strb	r3, [r7, #7]
  401bd0:	e023      	b.n	401c1a <udc_req_ep+0x66>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401bd2:	4b1a      	ldr	r3, [pc, #104]	; (401c3c <udc_req_ep+0x88>)
  401bd4:	681b      	ldr	r3, [r3, #0]
  401bd6:	685a      	ldr	r2, [r3, #4]
  401bd8:	79fb      	ldrb	r3, [r7, #7]
  401bda:	009b      	lsls	r3, r3, #2
  401bdc:	4413      	add	r3, r2
  401bde:	681b      	ldr	r3, [r3, #0]
  401be0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401be2:	683b      	ldr	r3, [r7, #0]
  401be4:	68db      	ldr	r3, [r3, #12]
  401be6:	4798      	blx	r3
  401be8:	4603      	mov	r3, r0
  401bea:	79fa      	ldrb	r2, [r7, #7]
  401bec:	4610      	mov	r0, r2
  401bee:	4619      	mov	r1, r3
  401bf0:	4b13      	ldr	r3, [pc, #76]	; (401c40 <udc_req_ep+0x8c>)
  401bf2:	4798      	blx	r3
  401bf4:	4603      	mov	r3, r0
  401bf6:	f083 0301 	eor.w	r3, r3, #1
  401bfa:	b2db      	uxtb	r3, r3
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d001      	beq.n	401c04 <udc_req_ep+0x50>
			return false;
  401c00:	2300      	movs	r3, #0
  401c02:	e012      	b.n	401c2a <udc_req_ep+0x76>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401c04:	683b      	ldr	r3, [r7, #0]
  401c06:	689b      	ldr	r3, [r3, #8]
  401c08:	4798      	blx	r3
  401c0a:	4603      	mov	r3, r0
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d001      	beq.n	401c14 <udc_req_ep+0x60>
			return true;
  401c10:	2301      	movs	r3, #1
  401c12:	e00a      	b.n	401c2a <udc_req_ep+0x76>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401c14:	79fb      	ldrb	r3, [r7, #7]
  401c16:	3301      	adds	r3, #1
  401c18:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401c1a:	4b08      	ldr	r3, [pc, #32]	; (401c3c <udc_req_ep+0x88>)
  401c1c:	681b      	ldr	r3, [r3, #0]
  401c1e:	681b      	ldr	r3, [r3, #0]
  401c20:	791b      	ldrb	r3, [r3, #4]
  401c22:	79fa      	ldrb	r2, [r7, #7]
  401c24:	429a      	cmp	r2, r3
  401c26:	d3d4      	bcc.n	401bd2 <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401c28:	2300      	movs	r3, #0
}
  401c2a:	4618      	mov	r0, r3
  401c2c:	3708      	adds	r7, #8
  401c2e:	46bd      	mov	sp, r7
  401c30:	bd80      	pop	{r7, pc}
  401c32:	bf00      	nop
  401c34:	20000db0 	.word	0x20000db0
  401c38:	2000894c 	.word	0x2000894c
  401c3c:	20000db4 	.word	0x20000db4
  401c40:	004011b5 	.word	0x004011b5

00401c44 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401c44:	b580      	push	{r7, lr}
  401c46:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401c48:	4b1f      	ldr	r3, [pc, #124]	; (401cc8 <udc_process_setup+0x84>)
  401c4a:	2200      	movs	r2, #0
  401c4c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401c4e:	4b1e      	ldr	r3, [pc, #120]	; (401cc8 <udc_process_setup+0x84>)
  401c50:	2200      	movs	r2, #0
  401c52:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401c54:	4b1c      	ldr	r3, [pc, #112]	; (401cc8 <udc_process_setup+0x84>)
  401c56:	2200      	movs	r2, #0
  401c58:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401c5a:	4b1b      	ldr	r3, [pc, #108]	; (401cc8 <udc_process_setup+0x84>)
  401c5c:	781b      	ldrb	r3, [r3, #0]
  401c5e:	b2db      	uxtb	r3, r3
  401c60:	b25b      	sxtb	r3, r3
  401c62:	2b00      	cmp	r3, #0
  401c64:	da05      	bge.n	401c72 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401c66:	4b18      	ldr	r3, [pc, #96]	; (401cc8 <udc_process_setup+0x84>)
  401c68:	88db      	ldrh	r3, [r3, #6]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d101      	bne.n	401c72 <udc_process_setup+0x2e>
			return false; // Error from USB host
  401c6e:	2300      	movs	r3, #0
  401c70:	e027      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401c72:	4b15      	ldr	r3, [pc, #84]	; (401cc8 <udc_process_setup+0x84>)
  401c74:	781b      	ldrb	r3, [r3, #0]
  401c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d106      	bne.n	401c8c <udc_process_setup+0x48>
		if (udc_reqstd()) {
  401c7e:	4b13      	ldr	r3, [pc, #76]	; (401ccc <udc_process_setup+0x88>)
  401c80:	4798      	blx	r3
  401c82:	4603      	mov	r3, r0
  401c84:	2b00      	cmp	r3, #0
  401c86:	d001      	beq.n	401c8c <udc_process_setup+0x48>
			return true;
  401c88:	2301      	movs	r3, #1
  401c8a:	e01a      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401c8c:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <udc_process_setup+0x84>)
  401c8e:	781b      	ldrb	r3, [r3, #0]
  401c90:	f003 031f 	and.w	r3, r3, #31
  401c94:	2b01      	cmp	r3, #1
  401c96:	d106      	bne.n	401ca6 <udc_process_setup+0x62>
		if (udc_req_iface()) {
  401c98:	4b0d      	ldr	r3, [pc, #52]	; (401cd0 <udc_process_setup+0x8c>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b00      	cmp	r3, #0
  401ca0:	d001      	beq.n	401ca6 <udc_process_setup+0x62>
			return true;
  401ca2:	2301      	movs	r3, #1
  401ca4:	e00d      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401ca6:	4b08      	ldr	r3, [pc, #32]	; (401cc8 <udc_process_setup+0x84>)
  401ca8:	781b      	ldrb	r3, [r3, #0]
  401caa:	f003 031f 	and.w	r3, r3, #31
  401cae:	2b02      	cmp	r3, #2
  401cb0:	d106      	bne.n	401cc0 <udc_process_setup+0x7c>
		if (udc_req_ep()) {
  401cb2:	4b08      	ldr	r3, [pc, #32]	; (401cd4 <udc_process_setup+0x90>)
  401cb4:	4798      	blx	r3
  401cb6:	4603      	mov	r3, r0
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d001      	beq.n	401cc0 <udc_process_setup+0x7c>
			return true;
  401cbc:	2301      	movs	r3, #1
  401cbe:	e000      	b.n	401cc2 <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401cc0:	2300      	movs	r3, #0
#endif
}
  401cc2:	4618      	mov	r0, r3
  401cc4:	bd80      	pop	{r7, pc}
  401cc6:	bf00      	nop
  401cc8:	2000894c 	.word	0x2000894c
  401ccc:	004019a9 	.word	0x004019a9
  401cd0:	00401b1d 	.word	0x00401b1d
  401cd4:	00401bb5 	.word	0x00401bb5

00401cd8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401cd8:	b480      	push	{r7}
  401cda:	b083      	sub	sp, #12
  401cdc:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401cde:	f3ef 8310 	mrs	r3, PRIMASK
  401ce2:	603b      	str	r3, [r7, #0]
  return(result);
  401ce4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	bf14      	ite	ne
  401cea:	2300      	movne	r3, #0
  401cec:	2301      	moveq	r3, #1
  401cee:	b2db      	uxtb	r3, r3
  401cf0:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401cf2:	b672      	cpsid	i
  401cf4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401cf8:	4b04      	ldr	r3, [pc, #16]	; (401d0c <cpu_irq_save+0x34>)
  401cfa:	2200      	movs	r2, #0
  401cfc:	701a      	strb	r2, [r3, #0]
	return flags;
  401cfe:	687b      	ldr	r3, [r7, #4]
}
  401d00:	4618      	mov	r0, r3
  401d02:	370c      	adds	r7, #12
  401d04:	46bd      	mov	sp, r7
  401d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d0a:	4770      	bx	lr
  401d0c:	20000364 	.word	0x20000364

00401d10 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401d10:	b480      	push	{r7}
  401d12:	b083      	sub	sp, #12
  401d14:	af00      	add	r7, sp, #0
  401d16:	6078      	str	r0, [r7, #4]
	return (flags);
  401d18:	687b      	ldr	r3, [r7, #4]
  401d1a:	2b00      	cmp	r3, #0
  401d1c:	bf0c      	ite	eq
  401d1e:	2300      	moveq	r3, #0
  401d20:	2301      	movne	r3, #1
  401d22:	b2db      	uxtb	r3, r3
}
  401d24:	4618      	mov	r0, r3
  401d26:	370c      	adds	r7, #12
  401d28:	46bd      	mov	sp, r7
  401d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d2e:	4770      	bx	lr

00401d30 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401d30:	b580      	push	{r7, lr}
  401d32:	b082      	sub	sp, #8
  401d34:	af00      	add	r7, sp, #0
  401d36:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4b07      	ldr	r3, [pc, #28]	; (401d58 <cpu_irq_restore+0x28>)
  401d3c:	4798      	blx	r3
  401d3e:	4603      	mov	r3, r0
  401d40:	2b00      	cmp	r3, #0
  401d42:	d005      	beq.n	401d50 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401d44:	4b05      	ldr	r3, [pc, #20]	; (401d5c <cpu_irq_restore+0x2c>)
  401d46:	2201      	movs	r2, #1
  401d48:	701a      	strb	r2, [r3, #0]
  401d4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401d4e:	b662      	cpsie	i
}
  401d50:	3708      	adds	r7, #8
  401d52:	46bd      	mov	sp, r7
  401d54:	bd80      	pop	{r7, pc}
  401d56:	bf00      	nop
  401d58:	00401d11 	.word	0x00401d11
  401d5c:	20000364 	.word	0x20000364

00401d60 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  401d60:	b580      	push	{r7, lr}
  401d62:	b086      	sub	sp, #24
  401d64:	af00      	add	r7, sp, #0
  401d66:	60f8      	str	r0, [r7, #12]
  401d68:	60b9      	str	r1, [r7, #8]
  401d6a:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  401d6c:	68bb      	ldr	r3, [r7, #8]
  401d6e:	2b0e      	cmp	r3, #14
  401d70:	d002      	beq.n	401d78 <efc_perform_command+0x18>
  401d72:	68bb      	ldr	r3, [r7, #8]
  401d74:	2b0f      	cmp	r3, #15
  401d76:	d102      	bne.n	401d7e <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  401d78:	f04f 33ff 	mov.w	r3, #4294967295
  401d7c:	e016      	b.n	401dac <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  401d7e:	4b0d      	ldr	r3, [pc, #52]	; (401db4 <efc_perform_command+0x54>)
  401d80:	4798      	blx	r3
  401d82:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  401d84:	687b      	ldr	r3, [r7, #4]
  401d86:	021b      	lsls	r3, r3, #8
  401d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401d8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  401d90:	68ba      	ldr	r2, [r7, #8]
  401d92:	b2d2      	uxtb	r2, r2
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  401d94:	4313      	orrs	r3, r2
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
  401d96:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  401d9a:	68f8      	ldr	r0, [r7, #12]
  401d9c:	4619      	mov	r1, r3
  401d9e:	4b06      	ldr	r3, [pc, #24]	; (401db8 <efc_perform_command+0x58>)
  401da0:	4798      	blx	r3
  401da2:	6138      	str	r0, [r7, #16]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
  401da4:	6978      	ldr	r0, [r7, #20]
  401da6:	4b05      	ldr	r3, [pc, #20]	; (401dbc <efc_perform_command+0x5c>)
  401da8:	4798      	blx	r3
	return result;
  401daa:	693b      	ldr	r3, [r7, #16]
}
  401dac:	4618      	mov	r0, r3
  401dae:	3718      	adds	r7, #24
  401db0:	46bd      	mov	sp, r7
  401db2:	bd80      	pop	{r7, pc}
  401db4:	00401cd9 	.word	0x00401cd9
  401db8:	200000dd 	.word	0x200000dd
  401dbc:	00401d31 	.word	0x00401d31

00401dc0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401dc0:	b480      	push	{r7}
  401dc2:	b083      	sub	sp, #12
  401dc4:	af00      	add	r7, sp, #0
  401dc6:	4603      	mov	r3, r0
  401dc8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401dca:	4b08      	ldr	r3, [pc, #32]	; (401dec <NVIC_EnableIRQ+0x2c>)
  401dcc:	f997 2007 	ldrsb.w	r2, [r7, #7]
  401dd0:	0952      	lsrs	r2, r2, #5
  401dd2:	79f9      	ldrb	r1, [r7, #7]
  401dd4:	f001 011f 	and.w	r1, r1, #31
  401dd8:	2001      	movs	r0, #1
  401dda:	fa00 f101 	lsl.w	r1, r0, r1
  401dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401de2:	370c      	adds	r7, #12
  401de4:	46bd      	mov	sp, r7
  401de6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dea:	4770      	bx	lr
  401dec:	e000e100 	.word	0xe000e100

00401df0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401df0:	b480      	push	{r7}
  401df2:	b083      	sub	sp, #12
  401df4:	af00      	add	r7, sp, #0
  401df6:	4603      	mov	r3, r0
  401df8:	6039      	str	r1, [r7, #0]
  401dfa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e00:	2b00      	cmp	r3, #0
  401e02:	da0b      	bge.n	401e1c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401e04:	490d      	ldr	r1, [pc, #52]	; (401e3c <NVIC_SetPriority+0x4c>)
  401e06:	79fb      	ldrb	r3, [r7, #7]
  401e08:	f003 030f 	and.w	r3, r3, #15
  401e0c:	3b04      	subs	r3, #4
  401e0e:	683a      	ldr	r2, [r7, #0]
  401e10:	b2d2      	uxtb	r2, r2
  401e12:	0112      	lsls	r2, r2, #4
  401e14:	b2d2      	uxtb	r2, r2
  401e16:	440b      	add	r3, r1
  401e18:	761a      	strb	r2, [r3, #24]
  401e1a:	e009      	b.n	401e30 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401e1c:	4908      	ldr	r1, [pc, #32]	; (401e40 <NVIC_SetPriority+0x50>)
  401e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e22:	683a      	ldr	r2, [r7, #0]
  401e24:	b2d2      	uxtb	r2, r2
  401e26:	0112      	lsls	r2, r2, #4
  401e28:	b2d2      	uxtb	r2, r2
  401e2a:	440b      	add	r3, r1
  401e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401e30:	370c      	adds	r7, #12
  401e32:	46bd      	mov	sp, r7
  401e34:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e38:	4770      	bx	lr
  401e3a:	bf00      	nop
  401e3c:	e000ed00 	.word	0xe000ed00
  401e40:	e000e100 	.word	0xe000e100

00401e44 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401e44:	b480      	push	{r7}
  401e46:	b083      	sub	sp, #12
  401e48:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e4a:	f3ef 8310 	mrs	r3, PRIMASK
  401e4e:	603b      	str	r3, [r7, #0]
  return(result);
  401e50:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401e52:	2b00      	cmp	r3, #0
  401e54:	bf14      	ite	ne
  401e56:	2300      	movne	r3, #0
  401e58:	2301      	moveq	r3, #1
  401e5a:	b2db      	uxtb	r3, r3
  401e5c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401e5e:	b672      	cpsid	i
  401e60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e64:	4b04      	ldr	r3, [pc, #16]	; (401e78 <cpu_irq_save+0x34>)
  401e66:	2200      	movs	r2, #0
  401e68:	701a      	strb	r2, [r3, #0]
	return flags;
  401e6a:	687b      	ldr	r3, [r7, #4]
}
  401e6c:	4618      	mov	r0, r3
  401e6e:	370c      	adds	r7, #12
  401e70:	46bd      	mov	sp, r7
  401e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e76:	4770      	bx	lr
  401e78:	20000364 	.word	0x20000364

00401e7c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401e7c:	b480      	push	{r7}
  401e7e:	b083      	sub	sp, #12
  401e80:	af00      	add	r7, sp, #0
  401e82:	6078      	str	r0, [r7, #4]
	return (flags);
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	2b00      	cmp	r3, #0
  401e88:	bf0c      	ite	eq
  401e8a:	2300      	moveq	r3, #0
  401e8c:	2301      	movne	r3, #1
  401e8e:	b2db      	uxtb	r3, r3
}
  401e90:	4618      	mov	r0, r3
  401e92:	370c      	adds	r7, #12
  401e94:	46bd      	mov	sp, r7
  401e96:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e9a:	4770      	bx	lr

00401e9c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401e9c:	b580      	push	{r7, lr}
  401e9e:	b082      	sub	sp, #8
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401ea4:	6878      	ldr	r0, [r7, #4]
  401ea6:	4b07      	ldr	r3, [pc, #28]	; (401ec4 <cpu_irq_restore+0x28>)
  401ea8:	4798      	blx	r3
  401eaa:	4603      	mov	r3, r0
  401eac:	2b00      	cmp	r3, #0
  401eae:	d005      	beq.n	401ebc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401eb0:	4b05      	ldr	r3, [pc, #20]	; (401ec8 <cpu_irq_restore+0x2c>)
  401eb2:	2201      	movs	r2, #1
  401eb4:	701a      	strb	r2, [r3, #0]
  401eb6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401eba:	b662      	cpsie	i
}
  401ebc:	3708      	adds	r7, #8
  401ebe:	46bd      	mov	sp, r7
  401ec0:	bd80      	pop	{r7, pc}
  401ec2:	bf00      	nop
  401ec4:	00401e7d 	.word	0x00401e7d
  401ec8:	20000364 	.word	0x20000364

00401ecc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  401ecc:	b580      	push	{r7, lr}
  401ece:	b084      	sub	sp, #16
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	4603      	mov	r3, r0
  401ed4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
  401ed6:	4b08      	ldr	r3, [pc, #32]	; (401ef8 <sleepmgr_lock_mode+0x2c>)
  401ed8:	4798      	blx	r3
  401eda:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  401edc:	79fb      	ldrb	r3, [r7, #7]
  401ede:	4a07      	ldr	r2, [pc, #28]	; (401efc <sleepmgr_lock_mode+0x30>)
  401ee0:	5cd2      	ldrb	r2, [r2, r3]
  401ee2:	3201      	adds	r2, #1
  401ee4:	b2d1      	uxtb	r1, r2
  401ee6:	4a05      	ldr	r2, [pc, #20]	; (401efc <sleepmgr_lock_mode+0x30>)
  401ee8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401eea:	68f8      	ldr	r0, [r7, #12]
  401eec:	4b04      	ldr	r3, [pc, #16]	; (401f00 <sleepmgr_lock_mode+0x34>)
  401eee:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401ef0:	3710      	adds	r7, #16
  401ef2:	46bd      	mov	sp, r7
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	00401e45 	.word	0x00401e45
  401efc:	20008944 	.word	0x20008944
  401f00:	00401e9d 	.word	0x00401e9d

00401f04 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  401f04:	b580      	push	{r7, lr}
  401f06:	b084      	sub	sp, #16
  401f08:	af00      	add	r7, sp, #0
  401f0a:	4603      	mov	r3, r0
  401f0c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
  401f0e:	4b08      	ldr	r3, [pc, #32]	; (401f30 <sleepmgr_unlock_mode+0x2c>)
  401f10:	4798      	blx	r3
  401f12:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  401f14:	79fb      	ldrb	r3, [r7, #7]
  401f16:	4a07      	ldr	r2, [pc, #28]	; (401f34 <sleepmgr_unlock_mode+0x30>)
  401f18:	5cd2      	ldrb	r2, [r2, r3]
  401f1a:	3a01      	subs	r2, #1
  401f1c:	b2d1      	uxtb	r1, r2
  401f1e:	4a05      	ldr	r2, [pc, #20]	; (401f34 <sleepmgr_unlock_mode+0x30>)
  401f20:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401f22:	68f8      	ldr	r0, [r7, #12]
  401f24:	4b04      	ldr	r3, [pc, #16]	; (401f38 <sleepmgr_unlock_mode+0x34>)
  401f26:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401f28:	3710      	adds	r7, #16
  401f2a:	46bd      	mov	sp, r7
  401f2c:	bd80      	pop	{r7, pc}
  401f2e:	bf00      	nop
  401f30:	00401e45 	.word	0x00401e45
  401f34:	20008944 	.word	0x20008944
  401f38:	00401e9d 	.word	0x00401e9d

00401f3c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401f3c:	b580      	push	{r7, lr}
  401f3e:	b082      	sub	sp, #8
  401f40:	af00      	add	r7, sp, #0
  401f42:	4603      	mov	r3, r0
  401f44:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  401f46:	79fb      	ldrb	r3, [r7, #7]
  401f48:	f083 0301 	eor.w	r3, r3, #1
  401f4c:	b2db      	uxtb	r3, r3
  401f4e:	2b00      	cmp	r3, #0
  401f50:	d006      	beq.n	401f60 <udd_sleep_mode+0x24>
  401f52:	4b0d      	ldr	r3, [pc, #52]	; (401f88 <udd_sleep_mode+0x4c>)
  401f54:	781b      	ldrb	r3, [r3, #0]
  401f56:	2b00      	cmp	r3, #0
  401f58:	d002      	beq.n	401f60 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401f5a:	2002      	movs	r0, #2
  401f5c:	4b0b      	ldr	r3, [pc, #44]	; (401f8c <udd_sleep_mode+0x50>)
  401f5e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  401f60:	79fb      	ldrb	r3, [r7, #7]
  401f62:	2b00      	cmp	r3, #0
  401f64:	d009      	beq.n	401f7a <udd_sleep_mode+0x3e>
  401f66:	4b08      	ldr	r3, [pc, #32]	; (401f88 <udd_sleep_mode+0x4c>)
  401f68:	781b      	ldrb	r3, [r3, #0]
  401f6a:	f083 0301 	eor.w	r3, r3, #1
  401f6e:	b2db      	uxtb	r3, r3
  401f70:	2b00      	cmp	r3, #0
  401f72:	d002      	beq.n	401f7a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401f74:	2002      	movs	r0, #2
  401f76:	4b06      	ldr	r3, [pc, #24]	; (401f90 <udd_sleep_mode+0x54>)
  401f78:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  401f7a:	4b03      	ldr	r3, [pc, #12]	; (401f88 <udd_sleep_mode+0x4c>)
  401f7c:	79fa      	ldrb	r2, [r7, #7]
  401f7e:	701a      	strb	r2, [r3, #0]
}
  401f80:	3708      	adds	r7, #8
  401f82:	46bd      	mov	sp, r7
  401f84:	bd80      	pop	{r7, pc}
  401f86:	bf00      	nop
  401f88:	20000dbe 	.word	0x20000dbe
  401f8c:	00401f05 	.word	0x00401f05
  401f90:	00401ecd 	.word	0x00401ecd

00401f94 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401f94:	b580      	push	{r7, lr}
  401f96:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401f98:	4b61      	ldr	r3, [pc, #388]	; (402120 <UDP_Handler+0x18c>)
  401f9a:	4798      	blx	r3
  401f9c:	4603      	mov	r3, r0
  401f9e:	f083 0301 	eor.w	r3, r3, #1
  401fa2:	b2db      	uxtb	r3, r3
  401fa4:	2b00      	cmp	r3, #0
  401fa6:	d00c      	beq.n	401fc2 <UDP_Handler+0x2e>
  401fa8:	4b5e      	ldr	r3, [pc, #376]	; (402124 <UDP_Handler+0x190>)
  401faa:	69db      	ldr	r3, [r3, #28]
  401fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	d106      	bne.n	401fc2 <UDP_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401fb4:	b672      	cpsid	i
  401fb6:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401fba:	4b5b      	ldr	r3, [pc, #364]	; (402128 <UDP_Handler+0x194>)
  401fbc:	2200      	movs	r2, #0
  401fbe:	701a      	strb	r2, [r3, #0]
		return;
  401fc0:	e0ac      	b.n	40211c <UDP_Handler+0x188>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401fc2:	2022      	movs	r0, #34	; 0x22
  401fc4:	4b59      	ldr	r3, [pc, #356]	; (40212c <UDP_Handler+0x198>)
  401fc6:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401fc8:	4b56      	ldr	r3, [pc, #344]	; (402124 <UDP_Handler+0x190>)
  401fca:	699b      	ldr	r3, [r3, #24]
  401fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401fd0:	2b00      	cmp	r3, #0
  401fd2:	d00c      	beq.n	401fee <UDP_Handler+0x5a>
  401fd4:	4b53      	ldr	r3, [pc, #332]	; (402124 <UDP_Handler+0x190>)
  401fd6:	69db      	ldr	r3, [r3, #28]
  401fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d006      	beq.n	401fee <UDP_Handler+0x5a>
		udd_ack_sof();
  401fe0:	4b50      	ldr	r3, [pc, #320]	; (402124 <UDP_Handler+0x190>)
  401fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fe6:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401fe8:	4b51      	ldr	r3, [pc, #324]	; (402130 <UDP_Handler+0x19c>)
  401fea:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401fec:	e095      	b.n	40211a <UDP_Handler+0x186>
	}

	if (udd_ctrl_interrupt()) {
  401fee:	4b51      	ldr	r3, [pc, #324]	; (402134 <UDP_Handler+0x1a0>)
  401ff0:	4798      	blx	r3
  401ff2:	4603      	mov	r3, r0
  401ff4:	2b00      	cmp	r3, #0
  401ff6:	d000      	beq.n	401ffa <UDP_Handler+0x66>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  401ff8:	e08f      	b.n	40211a <UDP_Handler+0x186>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  401ffa:	4b4f      	ldr	r3, [pc, #316]	; (402138 <UDP_Handler+0x1a4>)
  401ffc:	4798      	blx	r3
  401ffe:	4603      	mov	r3, r0
  402000:	2b00      	cmp	r3, #0
  402002:	d000      	beq.n	402006 <UDP_Handler+0x72>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  402004:	e089      	b.n	40211a <UDP_Handler+0x186>
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402006:	4b47      	ldr	r3, [pc, #284]	; (402124 <UDP_Handler+0x190>)
  402008:	699b      	ldr	r3, [r3, #24]
  40200a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40200e:	2b00      	cmp	r3, #0
  402010:	d005      	beq.n	40201e <UDP_Handler+0x8a>
  402012:	4b44      	ldr	r3, [pc, #272]	; (402124 <UDP_Handler+0x190>)
  402014:	69db      	ldr	r3, [r3, #28]
  402016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40201a:	2b00      	cmp	r3, #0
  40201c:	d117      	bne.n	40204e <UDP_Handler+0xba>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40201e:	4b41      	ldr	r3, [pc, #260]	; (402124 <UDP_Handler+0x190>)
  402020:	699b      	ldr	r3, [r3, #24]
  402022:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402026:	2b00      	cmp	r3, #0
  402028:	d005      	beq.n	402036 <UDP_Handler+0xa2>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40202a:	4b3e      	ldr	r3, [pc, #248]	; (402124 <UDP_Handler+0x190>)
  40202c:	69db      	ldr	r3, [r3, #28]
  40202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402032:	2b00      	cmp	r3, #0
  402034:	d10b      	bne.n	40204e <UDP_Handler+0xba>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402036:	4b3b      	ldr	r3, [pc, #236]	; (402124 <UDP_Handler+0x190>)
  402038:	699b      	ldr	r3, [r3, #24]
  40203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40203e:	2b00      	cmp	r3, #0
  402040:	d01d      	beq.n	40207e <UDP_Handler+0xea>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402042:	4b38      	ldr	r3, [pc, #224]	; (402124 <UDP_Handler+0x190>)
  402044:	69db      	ldr	r3, [r3, #28]
  402046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40204a:	2b00      	cmp	r3, #0
  40204c:	d017      	beq.n	40207e <UDP_Handler+0xea>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40204e:	4b35      	ldr	r3, [pc, #212]	; (402124 <UDP_Handler+0x190>)
  402050:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  402054:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  402056:	4b33      	ldr	r3, [pc, #204]	; (402124 <UDP_Handler+0x190>)
  402058:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  40205c:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  40205e:	2001      	movs	r0, #1
  402060:	4b36      	ldr	r3, [pc, #216]	; (40213c <UDP_Handler+0x1a8>)
  402062:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  402064:	4b2f      	ldr	r3, [pc, #188]	; (402124 <UDP_Handler+0x190>)
  402066:	f44f 7280 	mov.w	r2, #256	; 0x100
  40206a:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  40206c:	4b2d      	ldr	r3, [pc, #180]	; (402124 <UDP_Handler+0x190>)
  40206e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402072:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402074:	4b2b      	ldr	r3, [pc, #172]	; (402124 <UDP_Handler+0x190>)
  402076:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40207a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40207c:	e04d      	b.n	40211a <UDP_Handler+0x186>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  40207e:	4b29      	ldr	r3, [pc, #164]	; (402124 <UDP_Handler+0x190>)
  402080:	699b      	ldr	r3, [r3, #24]
  402082:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402086:	2b00      	cmp	r3, #0
  402088:	d020      	beq.n	4020cc <UDP_Handler+0x138>
  40208a:	4b26      	ldr	r3, [pc, #152]	; (402124 <UDP_Handler+0x190>)
  40208c:	69db      	ldr	r3, [r3, #28]
  40208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402092:	2b00      	cmp	r3, #0
  402094:	d01a      	beq.n	4020cc <UDP_Handler+0x138>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402096:	4b23      	ldr	r3, [pc, #140]	; (402124 <UDP_Handler+0x190>)
  402098:	f44f 7280 	mov.w	r2, #256	; 0x100
  40209c:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  40209e:	4b21      	ldr	r3, [pc, #132]	; (402124 <UDP_Handler+0x190>)
  4020a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4020a4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4020a6:	4b1f      	ldr	r3, [pc, #124]	; (402124 <UDP_Handler+0x190>)
  4020a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4020ac:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4020ae:	4b1d      	ldr	r3, [pc, #116]	; (402124 <UDP_Handler+0x190>)
  4020b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4020b4:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4020b6:	4b1b      	ldr	r3, [pc, #108]	; (402124 <UDP_Handler+0x190>)
  4020b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4020bc:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4020be:	2022      	movs	r0, #34	; 0x22
  4020c0:	4b1f      	ldr	r3, [pc, #124]	; (402140 <UDP_Handler+0x1ac>)
  4020c2:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  4020c4:	2000      	movs	r0, #0
  4020c6:	4b1d      	ldr	r3, [pc, #116]	; (40213c <UDP_Handler+0x1a8>)
  4020c8:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  4020ca:	e026      	b.n	40211a <UDP_Handler+0x186>
	}
	if (Is_udd_reset()) {
  4020cc:	4b15      	ldr	r3, [pc, #84]	; (402124 <UDP_Handler+0x190>)
  4020ce:	69db      	ldr	r3, [r3, #28]
  4020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4020d4:	2b00      	cmp	r3, #0
  4020d6:	d020      	beq.n	40211a <UDP_Handler+0x186>
		// USB bus reset detection
		udd_ack_reset();
  4020d8:	4b12      	ldr	r3, [pc, #72]	; (402124 <UDP_Handler+0x190>)
  4020da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4020de:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  4020e0:	4b18      	ldr	r3, [pc, #96]	; (402144 <UDP_Handler+0x1b0>)
  4020e2:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4020e4:	4b18      	ldr	r3, [pc, #96]	; (402148 <UDP_Handler+0x1b4>)
  4020e6:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4020e8:	4b0e      	ldr	r3, [pc, #56]	; (402124 <UDP_Handler+0x190>)
  4020ea:	4a0e      	ldr	r2, [pc, #56]	; (402124 <UDP_Handler+0x190>)
  4020ec:	6852      	ldr	r2, [r2, #4]
  4020ee:	f022 0201 	bic.w	r2, r2, #1
  4020f2:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4020f4:	4b0b      	ldr	r3, [pc, #44]	; (402124 <UDP_Handler+0x190>)
  4020f6:	4a0b      	ldr	r2, [pc, #44]	; (402124 <UDP_Handler+0x190>)
  4020f8:	6852      	ldr	r2, [r2, #4]
  4020fa:	f022 0202 	bic.w	r2, r2, #2
  4020fe:	605a      	str	r2, [r3, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  402100:	4b12      	ldr	r3, [pc, #72]	; (40214c <UDP_Handler+0x1b8>)
  402102:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  402104:	4b12      	ldr	r3, [pc, #72]	; (402150 <UDP_Handler+0x1bc>)
  402106:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402108:	4b06      	ldr	r3, [pc, #24]	; (402124 <UDP_Handler+0x190>)
  40210a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40210e:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402110:	4b04      	ldr	r3, [pc, #16]	; (402124 <UDP_Handler+0x190>)
  402112:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402116:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402118:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  40211a:	bf00      	nop
}
  40211c:	bd80      	pop	{r7, pc}
  40211e:	bf00      	nop
  402120:	0040ba8d 	.word	0x0040ba8d
  402124:	40034000 	.word	0x40034000
  402128:	20000364 	.word	0x20000364
  40212c:	0040b4a1 	.word	0x0040b4a1
  402130:	004013f1 	.word	0x004013f1
  402134:	004032d9 	.word	0x004032d9
  402138:	004039b9 	.word	0x004039b9
  40213c:	00401f3d 	.word	0x00401f3d
  402140:	0040b525 	.word	0x0040b525
  402144:	0040342d 	.word	0x0040342d
  402148:	0040139d 	.word	0x0040139d
  40214c:	00402aa1 	.word	0x00402aa1
  402150:	00402b51 	.word	0x00402b51

00402154 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402154:	b580      	push	{r7, lr}
  402156:	b082      	sub	sp, #8
  402158:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  40215a:	4b11      	ldr	r3, [pc, #68]	; (4021a0 <udd_enable+0x4c>)
  40215c:	4798      	blx	r3
  40215e:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  402160:	2022      	movs	r0, #34	; 0x22
  402162:	4b10      	ldr	r3, [pc, #64]	; (4021a4 <udd_enable+0x50>)
  402164:	4798      	blx	r3
	sysclk_enable_usb();
  402166:	4b10      	ldr	r3, [pc, #64]	; (4021a8 <udd_enable+0x54>)
  402168:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  40216a:	2022      	movs	r0, #34	; 0x22
  40216c:	2105      	movs	r1, #5
  40216e:	4b0f      	ldr	r3, [pc, #60]	; (4021ac <udd_enable+0x58>)
  402170:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  402172:	2022      	movs	r0, #34	; 0x22
  402174:	4b0e      	ldr	r3, [pc, #56]	; (4021b0 <udd_enable+0x5c>)
  402176:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  402178:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <udd_enable+0x60>)
  40217a:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  40217c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402180:	4b0d      	ldr	r3, [pc, #52]	; (4021b8 <udd_enable+0x64>)
  402182:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402184:	4b0d      	ldr	r3, [pc, #52]	; (4021bc <udd_enable+0x68>)
  402186:	2200      	movs	r2, #0
  402188:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  40218a:	2000      	movs	r0, #0
  40218c:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <udd_enable+0x6c>)
  40218e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402190:	4b0c      	ldr	r3, [pc, #48]	; (4021c4 <udd_enable+0x70>)
  402192:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  402194:	6878      	ldr	r0, [r7, #4]
  402196:	4b0c      	ldr	r3, [pc, #48]	; (4021c8 <udd_enable+0x74>)
  402198:	4798      	blx	r3
}
  40219a:	3708      	adds	r7, #8
  40219c:	46bd      	mov	sp, r7
  40219e:	bd80      	pop	{r7, pc}
  4021a0:	00401e45 	.word	0x00401e45
  4021a4:	0040b4a1 	.word	0x0040b4a1
  4021a8:	0040a985 	.word	0x0040a985
  4021ac:	00401df1 	.word	0x00401df1
  4021b0:	00401dc1 	.word	0x00401dc1
  4021b4:	00403385 	.word	0x00403385
  4021b8:	0040b5e9 	.word	0x0040b5e9
  4021bc:	20000dbe 	.word	0x20000dbe
  4021c0:	00401ecd 	.word	0x00401ecd
  4021c4:	004021cd 	.word	0x004021cd
  4021c8:	00401e9d 	.word	0x00401e9d

004021cc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4021cc:	b580      	push	{r7, lr}
  4021ce:	b082      	sub	sp, #8
  4021d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  4021d2:	4b17      	ldr	r3, [pc, #92]	; (402230 <udd_attach+0x64>)
  4021d4:	4798      	blx	r3
  4021d6:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  4021d8:	2001      	movs	r0, #1
  4021da:	4b16      	ldr	r3, [pc, #88]	; (402234 <udd_attach+0x68>)
  4021dc:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  4021de:	2022      	movs	r0, #34	; 0x22
  4021e0:	4b15      	ldr	r3, [pc, #84]	; (402238 <udd_attach+0x6c>)
  4021e2:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  4021e4:	4b15      	ldr	r3, [pc, #84]	; (40223c <udd_attach+0x70>)
  4021e6:	4a15      	ldr	r2, [pc, #84]	; (40223c <udd_attach+0x70>)
  4021e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4021ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4021ee:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  4021f0:	4b12      	ldr	r3, [pc, #72]	; (40223c <udd_attach+0x70>)
  4021f2:	4a12      	ldr	r2, [pc, #72]	; (40223c <udd_attach+0x70>)
  4021f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4021fa:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  4021fc:	4b0f      	ldr	r3, [pc, #60]	; (40223c <udd_attach+0x70>)
  4021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  402202:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  402204:	4b0d      	ldr	r3, [pc, #52]	; (40223c <udd_attach+0x70>)
  402206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40220a:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  40220c:	4b0b      	ldr	r3, [pc, #44]	; (40223c <udd_attach+0x70>)
  40220e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402212:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  402214:	4b09      	ldr	r3, [pc, #36]	; (40223c <udd_attach+0x70>)
  402216:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40221a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  40221c:	4b07      	ldr	r3, [pc, #28]	; (40223c <udd_attach+0x70>)
  40221e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402222:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  402224:	6878      	ldr	r0, [r7, #4]
  402226:	4b06      	ldr	r3, [pc, #24]	; (402240 <udd_attach+0x74>)
  402228:	4798      	blx	r3
}
  40222a:	3708      	adds	r7, #8
  40222c:	46bd      	mov	sp, r7
  40222e:	bd80      	pop	{r7, pc}
  402230:	00401e45 	.word	0x00401e45
  402234:	00401f3d 	.word	0x00401f3d
  402238:	0040b4a1 	.word	0x0040b4a1
  40223c:	40034000 	.word	0x40034000
  402240:	00401e9d 	.word	0x00401e9d

00402244 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  402244:	b480      	push	{r7}
  402246:	af00      	add	r7, sp, #0
	return false;
  402248:	2300      	movs	r3, #0
}
  40224a:	4618      	mov	r0, r3
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <udd_set_address>:


void udd_set_address(uint8_t address)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	4603      	mov	r3, r0
  40225c:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  40225e:	4b15      	ldr	r3, [pc, #84]	; (4022b4 <udd_set_address+0x60>)
  402260:	4a14      	ldr	r2, [pc, #80]	; (4022b4 <udd_set_address+0x60>)
  402262:	6852      	ldr	r2, [r2, #4]
  402264:	f022 0201 	bic.w	r2, r2, #1
  402268:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40226a:	4b12      	ldr	r3, [pc, #72]	; (4022b4 <udd_set_address+0x60>)
  40226c:	4a11      	ldr	r2, [pc, #68]	; (4022b4 <udd_set_address+0x60>)
  40226e:	6892      	ldr	r2, [r2, #8]
  402270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402274:	609a      	str	r2, [r3, #8]
	if (address) {
  402276:	79fb      	ldrb	r3, [r7, #7]
  402278:	2b00      	cmp	r3, #0
  40227a:	d015      	beq.n	4022a8 <udd_set_address+0x54>
		udd_configure_address(address);
  40227c:	4b0d      	ldr	r3, [pc, #52]	; (4022b4 <udd_set_address+0x60>)
  40227e:	4a0d      	ldr	r2, [pc, #52]	; (4022b4 <udd_set_address+0x60>)
  402280:	6892      	ldr	r2, [r2, #8]
  402282:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  402286:	79fa      	ldrb	r2, [r7, #7]
  402288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40228c:	430a      	orrs	r2, r1
  40228e:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402290:	4b08      	ldr	r3, [pc, #32]	; (4022b4 <udd_set_address+0x60>)
  402292:	4a08      	ldr	r2, [pc, #32]	; (4022b4 <udd_set_address+0x60>)
  402294:	6892      	ldr	r2, [r2, #8]
  402296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40229a:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40229c:	4b05      	ldr	r3, [pc, #20]	; (4022b4 <udd_set_address+0x60>)
  40229e:	4a05      	ldr	r2, [pc, #20]	; (4022b4 <udd_set_address+0x60>)
  4022a0:	6852      	ldr	r2, [r2, #4]
  4022a2:	f042 0201 	orr.w	r2, r2, #1
  4022a6:	605a      	str	r2, [r3, #4]
	}
}
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop
  4022b4:	40034000 	.word	0x40034000

004022b8 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  4022b8:	b480      	push	{r7}
  4022ba:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  4022bc:	4b09      	ldr	r3, [pc, #36]	; (4022e4 <udd_getaddress+0x2c>)
  4022be:	685b      	ldr	r3, [r3, #4]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	d006      	beq.n	4022d6 <udd_getaddress+0x1e>
		return udd_get_configured_address();
  4022c8:	4b06      	ldr	r3, [pc, #24]	; (4022e4 <udd_getaddress+0x2c>)
  4022ca:	689b      	ldr	r3, [r3, #8]
  4022cc:	b2db      	uxtb	r3, r3
  4022ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4022d2:	b2db      	uxtb	r3, r3
  4022d4:	e000      	b.n	4022d8 <udd_getaddress+0x20>
	return 0;
  4022d6:	2300      	movs	r3, #0
}
  4022d8:	4618      	mov	r0, r3
  4022da:	46bd      	mov	sp, r7
  4022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022e0:	4770      	bx	lr
  4022e2:	bf00      	nop
  4022e4:	40034000 	.word	0x40034000

004022e8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  4022e8:	b480      	push	{r7}
  4022ea:	af00      	add	r7, sp, #0
	return udd_frame_number();
  4022ec:	4b05      	ldr	r3, [pc, #20]	; (402304 <udd_get_frame_number+0x1c>)
  4022ee:	681b      	ldr	r3, [r3, #0]
  4022f0:	b29b      	uxth	r3, r3
  4022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4022f6:	b29b      	uxth	r3, r3
}
  4022f8:	4618      	mov	r0, r3
  4022fa:	46bd      	mov	sp, r7
  4022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402300:	4770      	bx	lr
  402302:	bf00      	nop
  402304:	40034000 	.word	0x40034000

00402308 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  402308:	b480      	push	{r7}
  40230a:	af00      	add	r7, sp, #0
	return 0;
  40230c:	2300      	movs	r3, #0
}
  40230e:	4618      	mov	r0, r3
  402310:	46bd      	mov	sp, r7
  402312:	f85d 7b04 	ldr.w	r7, [sp], #4
  402316:	4770      	bx	lr

00402318 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  402318:	b480      	push	{r7}
  40231a:	b083      	sub	sp, #12
  40231c:	af00      	add	r7, sp, #0
  40231e:	6078      	str	r0, [r7, #4]
  402320:	460b      	mov	r3, r1
  402322:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  402324:	4b05      	ldr	r3, [pc, #20]	; (40233c <udd_set_setup_payload+0x24>)
  402326:	687a      	ldr	r2, [r7, #4]
  402328:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  40232a:	4b04      	ldr	r3, [pc, #16]	; (40233c <udd_set_setup_payload+0x24>)
  40232c:	887a      	ldrh	r2, [r7, #2]
  40232e:	819a      	strh	r2, [r3, #12]
}
  402330:	370c      	adds	r7, #12
  402332:	46bd      	mov	sp, r7
  402334:	f85d 7b04 	ldr.w	r7, [sp], #4
  402338:	4770      	bx	lr
  40233a:	bf00      	nop
  40233c:	2000894c 	.word	0x2000894c

00402340 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402340:	b480      	push	{r7}
  402342:	b087      	sub	sp, #28
  402344:	af00      	add	r7, sp, #0
  402346:	4613      	mov	r3, r2
  402348:	4602      	mov	r2, r0
  40234a:	71fa      	strb	r2, [r7, #7]
  40234c:	460a      	mov	r2, r1
  40234e:	71ba      	strb	r2, [r7, #6]
  402350:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  402352:	79fb      	ldrb	r3, [r7, #7]
  402354:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402358:	2b00      	cmp	r3, #0
  40235a:	bf0c      	ite	eq
  40235c:	2300      	moveq	r3, #0
  40235e:	2301      	movne	r3, #1
  402360:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  402362:	79bb      	ldrb	r3, [r7, #6]
  402364:	f003 0303 	and.w	r3, r3, #3
  402368:	2b01      	cmp	r3, #1
  40236a:	bf14      	ite	ne
  40236c:	2300      	movne	r3, #0
  40236e:	2301      	moveq	r3, #1
  402370:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  402372:	79fb      	ldrb	r3, [r7, #7]
  402374:	f003 030f 	and.w	r3, r3, #15
  402378:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  40237a:	79fb      	ldrb	r3, [r7, #7]
  40237c:	2b03      	cmp	r3, #3
  40237e:	d901      	bls.n	402384 <udd_ep_alloc+0x44>
		return false;
  402380:	2300      	movs	r3, #0
  402382:	e092      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402384:	4b4c      	ldr	r3, [pc, #304]	; (4024b8 <udd_ep_alloc+0x178>)
  402386:	79fa      	ldrb	r2, [r7, #7]
  402388:	320c      	adds	r2, #12
  40238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40238e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402392:	2b00      	cmp	r3, #0
  402394:	d001      	beq.n	40239a <udd_ep_alloc+0x5a>
		return false;
  402396:	2300      	movs	r3, #0
  402398:	e087      	b.n	4024aa <udd_ep_alloc+0x16a>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40239a:	7dbb      	ldrb	r3, [r7, #22]
  40239c:	2b00      	cmp	r3, #0
  40239e:	d007      	beq.n	4023b0 <udd_ep_alloc+0x70>
  4023a0:	79fb      	ldrb	r3, [r7, #7]
  4023a2:	2b00      	cmp	r3, #0
  4023a4:	d002      	beq.n	4023ac <udd_ep_alloc+0x6c>
  4023a6:	79fb      	ldrb	r3, [r7, #7]
  4023a8:	2b03      	cmp	r3, #3
  4023aa:	d101      	bne.n	4023b0 <udd_ep_alloc+0x70>
		return false;
  4023ac:	2300      	movs	r3, #0
  4023ae:	e07c      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4023b0:	88ba      	ldrh	r2, [r7, #4]
  4023b2:	79fb      	ldrb	r3, [r7, #7]
  4023b4:	2b04      	cmp	r3, #4
  4023b6:	d002      	beq.n	4023be <udd_ep_alloc+0x7e>
  4023b8:	79fb      	ldrb	r3, [r7, #7]
  4023ba:	2b05      	cmp	r3, #5
  4023bc:	d102      	bne.n	4023c4 <udd_ep_alloc+0x84>
  4023be:	f44f 7300 	mov.w	r3, #512	; 0x200
  4023c2:	e000      	b.n	4023c6 <udd_ep_alloc+0x86>
  4023c4:	2340      	movs	r3, #64	; 0x40
  4023c6:	429a      	cmp	r2, r3
  4023c8:	dd01      	ble.n	4023ce <udd_ep_alloc+0x8e>
		return false;
  4023ca:	2300      	movs	r3, #0
  4023cc:	e06d      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	ptr_job = &udd_ep_job[ep - 1];
  4023ce:	79fb      	ldrb	r3, [r7, #7]
  4023d0:	1e5a      	subs	r2, r3, #1
  4023d2:	4613      	mov	r3, r2
  4023d4:	009b      	lsls	r3, r3, #2
  4023d6:	4413      	add	r3, r2
  4023d8:	009b      	lsls	r3, r3, #2
  4023da:	4a38      	ldr	r2, [pc, #224]	; (4024bc <udd_ep_alloc+0x17c>)
  4023dc:	4413      	add	r3, r2
  4023de:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  4023e0:	88bb      	ldrh	r3, [r7, #4]
  4023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4023e6:	b299      	uxth	r1, r3
  4023e8:	693a      	ldr	r2, [r7, #16]
  4023ea:	8a13      	ldrh	r3, [r2, #16]
  4023ec:	f361 0309 	bfi	r3, r1, #0, #10
  4023f0:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  4023f2:	693a      	ldr	r2, [r7, #16]
  4023f4:	7c53      	ldrb	r3, [r2, #17]
  4023f6:	f36f 13c7 	bfc	r3, #7, #1
  4023fa:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  4023fc:	693a      	ldr	r2, [r7, #16]
  4023fe:	7c53      	ldrb	r3, [r2, #17]
  402400:	f36f 1345 	bfc	r3, #5, #1
  402404:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  402406:	7dfb      	ldrb	r3, [r7, #23]
  402408:	2b00      	cmp	r3, #0
  40240a:	d004      	beq.n	402416 <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  40240c:	693a      	ldr	r2, [r7, #16]
  40240e:	7c53      	ldrb	r3, [r2, #17]
  402410:	f36f 0383 	bfc	r3, #2, #2
  402414:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402416:	4b28      	ldr	r3, [pc, #160]	; (4024b8 <udd_ep_alloc+0x178>)
  402418:	4a27      	ldr	r2, [pc, #156]	; (4024b8 <udd_ep_alloc+0x178>)
  40241a:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40241c:	79fa      	ldrb	r2, [r7, #7]
  40241e:	2001      	movs	r0, #1
  402420:	fa00 f202 	lsl.w	r2, r0, r2
  402424:	430a      	orrs	r2, r1
  402426:	629a      	str	r2, [r3, #40]	; 0x28
  402428:	4b23      	ldr	r3, [pc, #140]	; (4024b8 <udd_ep_alloc+0x178>)
  40242a:	4a23      	ldr	r2, [pc, #140]	; (4024b8 <udd_ep_alloc+0x178>)
  40242c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40242e:	79fa      	ldrb	r2, [r7, #7]
  402430:	2001      	movs	r0, #1
  402432:	fa00 f202 	lsl.w	r2, r0, r2
  402436:	43d2      	mvns	r2, r2
  402438:	400a      	ands	r2, r1
  40243a:	629a      	str	r2, [r3, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  40243c:	4b1e      	ldr	r3, [pc, #120]	; (4024b8 <udd_ep_alloc+0x178>)
  40243e:	79fa      	ldrb	r2, [r7, #7]
  402440:	320c      	adds	r2, #12
  402442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402446:	60fb      	str	r3, [r7, #12]
  402448:	68fb      	ldr	r3, [r7, #12]
  40244a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40244e:	60fb      	str	r3, [r7, #12]
  402450:	68fb      	ldr	r3, [r7, #12]
  402452:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40245a:	60fb      	str	r3, [r7, #12]
  40245c:	7dfb      	ldrb	r3, [r7, #23]
  40245e:	2b00      	cmp	r3, #0
  402460:	d009      	beq.n	402476 <udd_ep_alloc+0x136>
  402462:	79bb      	ldrb	r3, [r7, #6]
  402464:	f043 0304 	orr.w	r3, r3, #4
  402468:	b2db      	uxtb	r3, r3
  40246a:	021b      	lsls	r3, r3, #8
  40246c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402474:	e005      	b.n	402482 <udd_ep_alloc+0x142>
  402476:	79bb      	ldrb	r3, [r7, #6]
  402478:	021b      	lsls	r3, r3, #8
  40247a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402482:	68fa      	ldr	r2, [r7, #12]
  402484:	4313      	orrs	r3, r2
  402486:	60fb      	str	r3, [r7, #12]
  402488:	4b0b      	ldr	r3, [pc, #44]	; (4024b8 <udd_ep_alloc+0x178>)
  40248a:	79fa      	ldrb	r2, [r7, #7]
  40248c:	68f9      	ldr	r1, [r7, #12]
  40248e:	320c      	adds	r2, #12
  402490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402494:	2300      	movs	r3, #0
  402496:	60bb      	str	r3, [r7, #8]
  402498:	e003      	b.n	4024a2 <udd_ep_alloc+0x162>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40249a:	bf00      	nop
  40249c:	68bb      	ldr	r3, [r7, #8]
  40249e:	3301      	adds	r3, #1
  4024a0:	60bb      	str	r3, [r7, #8]
  4024a2:	68bb      	ldr	r3, [r7, #8]
  4024a4:	2b13      	cmp	r3, #19
  4024a6:	d9f8      	bls.n	40249a <udd_ep_alloc+0x15a>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4024a8:	2301      	movs	r3, #1
}
  4024aa:	4618      	mov	r0, r3
  4024ac:	371c      	adds	r7, #28
  4024ae:	46bd      	mov	sp, r7
  4024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024b4:	4770      	bx	lr
  4024b6:	bf00      	nop
  4024b8:	40034000 	.word	0x40034000
  4024bc:	20000dc4 	.word	0x20000dc4

004024c0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  4024c0:	b580      	push	{r7, lr}
  4024c2:	b084      	sub	sp, #16
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	4603      	mov	r3, r0
  4024c8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4024ca:	79fb      	ldrb	r3, [r7, #7]
  4024cc:	f003 030f 	and.w	r3, r3, #15
  4024d0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  4024d2:	7bfb      	ldrb	r3, [r7, #15]
  4024d4:	2b03      	cmp	r3, #3
  4024d6:	d900      	bls.n	4024da <udd_ep_free+0x1a>
		return;
  4024d8:	e00f      	b.n	4024fa <udd_ep_free+0x3a>
	}
	udd_disable_endpoint(ep_index);
  4024da:	4b09      	ldr	r3, [pc, #36]	; (402500 <udd_ep_free+0x40>)
  4024dc:	7bfa      	ldrb	r2, [r7, #15]
  4024de:	4908      	ldr	r1, [pc, #32]	; (402500 <udd_ep_free+0x40>)
  4024e0:	7bf8      	ldrb	r0, [r7, #15]
  4024e2:	300c      	adds	r0, #12
  4024e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4024e8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4024ec:	320c      	adds	r2, #12
  4024ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	udd_ep_abort_job(ep);
  4024f2:	79fb      	ldrb	r3, [r7, #7]
  4024f4:	4618      	mov	r0, r3
  4024f6:	4b03      	ldr	r3, [pc, #12]	; (402504 <udd_ep_free+0x44>)
  4024f8:	4798      	blx	r3
}
  4024fa:	3710      	adds	r7, #16
  4024fc:	46bd      	mov	sp, r7
  4024fe:	bd80      	pop	{r7, pc}
  402500:	40034000 	.word	0x40034000
  402504:	00403471 	.word	0x00403471

00402508 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  402508:	b480      	push	{r7}
  40250a:	b085      	sub	sp, #20
  40250c:	af00      	add	r7, sp, #0
  40250e:	4603      	mov	r3, r0
  402510:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402512:	79fb      	ldrb	r3, [r7, #7]
  402514:	f003 030f 	and.w	r3, r3, #15
  402518:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40251a:	7bfb      	ldrb	r3, [r7, #15]
  40251c:	1e5a      	subs	r2, r3, #1
  40251e:	4613      	mov	r3, r2
  402520:	009b      	lsls	r3, r3, #2
  402522:	4413      	add	r3, r2
  402524:	009b      	lsls	r3, r3, #2
  402526:	4a13      	ldr	r2, [pc, #76]	; (402574 <udd_ep_is_halted+0x6c>)
  402528:	4413      	add	r3, r2
  40252a:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  40252c:	7bfb      	ldrb	r3, [r7, #15]
  40252e:	2b03      	cmp	r3, #3
  402530:	d901      	bls.n	402536 <udd_ep_is_halted+0x2e>
		return false;
  402532:	2300      	movs	r3, #0
  402534:	e017      	b.n	402566 <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  402536:	68bb      	ldr	r3, [r7, #8]
  402538:	7c5b      	ldrb	r3, [r3, #17]
  40253a:	f3c3 1340 	ubfx	r3, r3, #5, #1
  40253e:	b2db      	uxtb	r3, r3
  402540:	2b00      	cmp	r3, #0
  402542:	d10a      	bne.n	40255a <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402544:	4b0c      	ldr	r3, [pc, #48]	; (402578 <udd_ep_is_halted+0x70>)
  402546:	79fa      	ldrb	r2, [r7, #7]
  402548:	f002 020f 	and.w	r2, r2, #15
  40254c:	320c      	adds	r2, #12
  40254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402552:	f003 0328 	and.w	r3, r3, #40	; 0x28
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402556:	2b00      	cmp	r3, #0
  402558:	d001      	beq.n	40255e <udd_ep_is_halted+0x56>
  40255a:	2301      	movs	r3, #1
  40255c:	e000      	b.n	402560 <udd_ep_is_halted+0x58>
  40255e:	2300      	movs	r3, #0
  402560:	f003 0301 	and.w	r3, r3, #1
  402564:	b2db      	uxtb	r3, r3
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402566:	4618      	mov	r0, r3
  402568:	3714      	adds	r7, #20
  40256a:	46bd      	mov	sp, r7
  40256c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	20000dc4 	.word	0x20000dc4
  402578:	40034000 	.word	0x40034000

0040257c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  40257c:	b580      	push	{r7, lr}
  40257e:	b088      	sub	sp, #32
  402580:	af00      	add	r7, sp, #0
  402582:	4603      	mov	r3, r0
  402584:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  402586:	79fb      	ldrb	r3, [r7, #7]
  402588:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40258c:	2b00      	cmp	r3, #0
  40258e:	bf0c      	ite	eq
  402590:	2300      	moveq	r3, #0
  402592:	2301      	movne	r3, #1
  402594:	77fb      	strb	r3, [r7, #31]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402596:	79fb      	ldrb	r3, [r7, #7]
  402598:	f003 030f 	and.w	r3, r3, #15
  40259c:	77bb      	strb	r3, [r7, #30]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40259e:	7fbb      	ldrb	r3, [r7, #30]
  4025a0:	1e5a      	subs	r2, r3, #1
  4025a2:	4613      	mov	r3, r2
  4025a4:	009b      	lsls	r3, r3, #2
  4025a6:	4413      	add	r3, r2
  4025a8:	009b      	lsls	r3, r3, #2
  4025aa:	4a2d      	ldr	r2, [pc, #180]	; (402660 <udd_ep_set_halt+0xe4>)
  4025ac:	4413      	add	r3, r2
  4025ae:	61bb      	str	r3, [r7, #24]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  4025b0:	7fbb      	ldrb	r3, [r7, #30]
  4025b2:	2b03      	cmp	r3, #3
  4025b4:	d901      	bls.n	4025ba <udd_ep_set_halt+0x3e>
		return false;
  4025b6:	2300      	movs	r3, #0
  4025b8:	e04d      	b.n	402656 <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  4025ba:	4b2a      	ldr	r3, [pc, #168]	; (402664 <udd_ep_set_halt+0xe8>)
  4025bc:	4798      	blx	r3
  4025be:	6178      	str	r0, [r7, #20]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4025c0:	7ffb      	ldrb	r3, [r7, #31]
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d01f      	beq.n	402606 <udd_ep_set_halt+0x8a>
  4025c6:	4b28      	ldr	r3, [pc, #160]	; (402668 <udd_ep_set_halt+0xec>)
  4025c8:	7fba      	ldrb	r2, [r7, #30]
  4025ca:	320c      	adds	r2, #12
  4025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025d0:	f003 0310 	and.w	r3, r3, #16
  4025d4:	2b00      	cmp	r3, #0
  4025d6:	d106      	bne.n	4025e6 <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4025d8:	69bb      	ldr	r3, [r7, #24]
  4025da:	7c5b      	ldrb	r3, [r3, #17]
  4025dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4025e0:	b2db      	uxtb	r3, r3
  4025e2:	2b01      	cmp	r3, #1
  4025e4:	dd0f      	ble.n	402606 <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4025e6:	69ba      	ldr	r2, [r7, #24]
  4025e8:	7c53      	ldrb	r3, [r2, #17]
  4025ea:	f043 0320 	orr.w	r3, r3, #32
  4025ee:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4025f0:	4b1d      	ldr	r3, [pc, #116]	; (402668 <udd_ep_set_halt+0xec>)
  4025f2:	7fba      	ldrb	r2, [r7, #30]
  4025f4:	2101      	movs	r1, #1
  4025f6:	fa01 f202 	lsl.w	r2, r1, r2
  4025fa:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  4025fc:	6978      	ldr	r0, [r7, #20]
  4025fe:	4b1b      	ldr	r3, [pc, #108]	; (40266c <udd_ep_set_halt+0xf0>)
  402600:	4798      	blx	r3
		return true;
  402602:	2301      	movs	r3, #1
  402604:	e027      	b.n	402656 <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402606:	4b18      	ldr	r3, [pc, #96]	; (402668 <udd_ep_set_halt+0xec>)
  402608:	7fba      	ldrb	r2, [r7, #30]
  40260a:	320c      	adds	r2, #12
  40260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402610:	613b      	str	r3, [r7, #16]
  402612:	693b      	ldr	r3, [r7, #16]
  402614:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402618:	613b      	str	r3, [r7, #16]
  40261a:	693b      	ldr	r3, [r7, #16]
  40261c:	f043 0320 	orr.w	r3, r3, #32
  402620:	613b      	str	r3, [r7, #16]
  402622:	4b11      	ldr	r3, [pc, #68]	; (402668 <udd_ep_set_halt+0xec>)
  402624:	7fba      	ldrb	r2, [r7, #30]
  402626:	6939      	ldr	r1, [r7, #16]
  402628:	320c      	adds	r2, #12
  40262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40262e:	2300      	movs	r3, #0
  402630:	60fb      	str	r3, [r7, #12]
  402632:	e003      	b.n	40263c <udd_ep_set_halt+0xc0>
  402634:	bf00      	nop
  402636:	68fb      	ldr	r3, [r7, #12]
  402638:	3301      	adds	r3, #1
  40263a:	60fb      	str	r3, [r7, #12]
  40263c:	68fb      	ldr	r3, [r7, #12]
  40263e:	2b13      	cmp	r3, #19
  402640:	d9f8      	bls.n	402634 <udd_ep_set_halt+0xb8>
		udd_enable_endpoint_interrupt(ep_index);
  402642:	4b09      	ldr	r3, [pc, #36]	; (402668 <udd_ep_set_halt+0xec>)
  402644:	7fba      	ldrb	r2, [r7, #30]
  402646:	2101      	movs	r1, #1
  402648:	fa01 f202 	lsl.w	r2, r1, r2
  40264c:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  40264e:	6978      	ldr	r0, [r7, #20]
  402650:	4b06      	ldr	r3, [pc, #24]	; (40266c <udd_ep_set_halt+0xf0>)
  402652:	4798      	blx	r3
	}
	return true;
  402654:	2301      	movs	r3, #1
}
  402656:	4618      	mov	r0, r3
  402658:	3720      	adds	r7, #32
  40265a:	46bd      	mov	sp, r7
  40265c:	bd80      	pop	{r7, pc}
  40265e:	bf00      	nop
  402660:	20000dc4 	.word	0x20000dc4
  402664:	00401e45 	.word	0x00401e45
  402668:	40034000 	.word	0x40034000
  40266c:	00401e9d 	.word	0x00401e9d

00402670 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402670:	b580      	push	{r7, lr}
  402672:	b088      	sub	sp, #32
  402674:	af00      	add	r7, sp, #0
  402676:	4603      	mov	r3, r0
  402678:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  40267a:	79fb      	ldrb	r3, [r7, #7]
  40267c:	f003 030f 	and.w	r3, r3, #15
  402680:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  402682:	79fb      	ldrb	r3, [r7, #7]
  402684:	2b03      	cmp	r3, #3
  402686:	d901      	bls.n	40268c <udd_ep_clear_halt+0x1c>
		return false;
  402688:	2300      	movs	r3, #0
  40268a:	e075      	b.n	402778 <udd_ep_clear_halt+0x108>
	ptr_job = &udd_ep_job[ep - 1];
  40268c:	79fb      	ldrb	r3, [r7, #7]
  40268e:	1e5a      	subs	r2, r3, #1
  402690:	4613      	mov	r3, r2
  402692:	009b      	lsls	r3, r3, #2
  402694:	4413      	add	r3, r2
  402696:	009b      	lsls	r3, r3, #2
  402698:	4a39      	ldr	r2, [pc, #228]	; (402780 <udd_ep_clear_halt+0x110>)
  40269a:	4413      	add	r3, r2
  40269c:	61fb      	str	r3, [r7, #28]

	ptr_job->b_stall_requested = false;
  40269e:	69fa      	ldr	r2, [r7, #28]
  4026a0:	7c53      	ldrb	r3, [r2, #17]
  4026a2:	f36f 1345 	bfc	r3, #5, #1
  4026a6:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  4026a8:	4b36      	ldr	r3, [pc, #216]	; (402784 <udd_ep_clear_halt+0x114>)
  4026aa:	79fa      	ldrb	r2, [r7, #7]
  4026ac:	320c      	adds	r2, #12
  4026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4026b2:	f003 0320 	and.w	r3, r3, #32
  4026b6:	2b00      	cmp	r3, #0
  4026b8:	d05d      	beq.n	402776 <udd_ep_clear_halt+0x106>
		// Remove stall
		udd_disable_stall_handshake(ep);
  4026ba:	4b32      	ldr	r3, [pc, #200]	; (402784 <udd_ep_clear_halt+0x114>)
  4026bc:	79fa      	ldrb	r2, [r7, #7]
  4026be:	320c      	adds	r2, #12
  4026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4026c4:	61bb      	str	r3, [r7, #24]
  4026c6:	69bb      	ldr	r3, [r7, #24]
  4026c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026cc:	61bb      	str	r3, [r7, #24]
  4026ce:	69bb      	ldr	r3, [r7, #24]
  4026d0:	f023 0320 	bic.w	r3, r3, #32
  4026d4:	61bb      	str	r3, [r7, #24]
  4026d6:	4b2b      	ldr	r3, [pc, #172]	; (402784 <udd_ep_clear_halt+0x114>)
  4026d8:	79fa      	ldrb	r2, [r7, #7]
  4026da:	69b9      	ldr	r1, [r7, #24]
  4026dc:	320c      	adds	r2, #12
  4026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4026e2:	2300      	movs	r3, #0
  4026e4:	617b      	str	r3, [r7, #20]
  4026e6:	e003      	b.n	4026f0 <udd_ep_clear_halt+0x80>
  4026e8:	bf00      	nop
  4026ea:	697b      	ldr	r3, [r7, #20]
  4026ec:	3301      	adds	r3, #1
  4026ee:	617b      	str	r3, [r7, #20]
  4026f0:	697b      	ldr	r3, [r7, #20]
  4026f2:	2b13      	cmp	r3, #19
  4026f4:	d9f8      	bls.n	4026e8 <udd_ep_clear_halt+0x78>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4026f6:	4b23      	ldr	r3, [pc, #140]	; (402784 <udd_ep_clear_halt+0x114>)
  4026f8:	4a22      	ldr	r2, [pc, #136]	; (402784 <udd_ep_clear_halt+0x114>)
  4026fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4026fc:	79fa      	ldrb	r2, [r7, #7]
  4026fe:	2001      	movs	r0, #1
  402700:	fa00 f202 	lsl.w	r2, r0, r2
  402704:	430a      	orrs	r2, r1
  402706:	629a      	str	r2, [r3, #40]	; 0x28
  402708:	4b1e      	ldr	r3, [pc, #120]	; (402784 <udd_ep_clear_halt+0x114>)
  40270a:	4a1e      	ldr	r2, [pc, #120]	; (402784 <udd_ep_clear_halt+0x114>)
  40270c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40270e:	79fa      	ldrb	r2, [r7, #7]
  402710:	2001      	movs	r0, #1
  402712:	fa00 f202 	lsl.w	r2, r0, r2
  402716:	43d2      	mvns	r2, r2
  402718:	400a      	ands	r2, r1
  40271a:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  40271c:	4b19      	ldr	r3, [pc, #100]	; (402784 <udd_ep_clear_halt+0x114>)
  40271e:	79fa      	ldrb	r2, [r7, #7]
  402720:	320c      	adds	r2, #12
  402722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402726:	613b      	str	r3, [r7, #16]
  402728:	693b      	ldr	r3, [r7, #16]
  40272a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40272e:	613b      	str	r3, [r7, #16]
  402730:	693b      	ldr	r3, [r7, #16]
  402732:	f023 0308 	bic.w	r3, r3, #8
  402736:	613b      	str	r3, [r7, #16]
  402738:	4b12      	ldr	r3, [pc, #72]	; (402784 <udd_ep_clear_halt+0x114>)
  40273a:	79fa      	ldrb	r2, [r7, #7]
  40273c:	6939      	ldr	r1, [r7, #16]
  40273e:	320c      	adds	r2, #12
  402740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402744:	2300      	movs	r3, #0
  402746:	60fb      	str	r3, [r7, #12]
  402748:	e003      	b.n	402752 <udd_ep_clear_halt+0xe2>
  40274a:	bf00      	nop
  40274c:	68fb      	ldr	r3, [r7, #12]
  40274e:	3301      	adds	r3, #1
  402750:	60fb      	str	r3, [r7, #12]
  402752:	68fb      	ldr	r3, [r7, #12]
  402754:	2b13      	cmp	r3, #19
  402756:	d9f8      	bls.n	40274a <udd_ep_clear_halt+0xda>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402758:	69fb      	ldr	r3, [r7, #28]
  40275a:	7c5b      	ldrb	r3, [r3, #17]
  40275c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402760:	b2db      	uxtb	r3, r3
  402762:	2b01      	cmp	r3, #1
  402764:	d107      	bne.n	402776 <udd_ep_clear_halt+0x106>
			ptr_job->busy = false;
  402766:	69fa      	ldr	r2, [r7, #28]
  402768:	7c53      	ldrb	r3, [r2, #17]
  40276a:	f36f 1304 	bfc	r3, #4, #1
  40276e:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  402770:	69fb      	ldr	r3, [r7, #28]
  402772:	681b      	ldr	r3, [r3, #0]
  402774:	4798      	blx	r3
		}
	}
	return true;
  402776:	2301      	movs	r3, #1
}
  402778:	4618      	mov	r0, r3
  40277a:	3720      	adds	r7, #32
  40277c:	46bd      	mov	sp, r7
  40277e:	bd80      	pop	{r7, pc}
  402780:	20000dc4 	.word	0x20000dc4
  402784:	40034000 	.word	0x40034000

00402788 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402788:	b580      	push	{r7, lr}
  40278a:	b088      	sub	sp, #32
  40278c:	af00      	add	r7, sp, #0
  40278e:	60ba      	str	r2, [r7, #8]
  402790:	607b      	str	r3, [r7, #4]
  402792:	4603      	mov	r3, r0
  402794:	73fb      	strb	r3, [r7, #15]
  402796:	460b      	mov	r3, r1
  402798:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  40279a:	7bfb      	ldrb	r3, [r7, #15]
  40279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	bf0c      	ite	eq
  4027a4:	2300      	moveq	r3, #0
  4027a6:	2301      	movne	r3, #1
  4027a8:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  4027aa:	7bfb      	ldrb	r3, [r7, #15]
  4027ac:	f003 030f 	and.w	r3, r3, #15
  4027b0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  4027b2:	7bfb      	ldrb	r3, [r7, #15]
  4027b4:	2b03      	cmp	r3, #3
  4027b6:	d901      	bls.n	4027bc <udd_ep_run+0x34>
		return false;
  4027b8:	2300      	movs	r3, #0
  4027ba:	e083      	b.n	4028c4 <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4027bc:	7bfb      	ldrb	r3, [r7, #15]
  4027be:	1e5a      	subs	r2, r3, #1
  4027c0:	4613      	mov	r3, r2
  4027c2:	009b      	lsls	r3, r3, #2
  4027c4:	4413      	add	r3, r2
  4027c6:	009b      	lsls	r3, r3, #2
  4027c8:	4a40      	ldr	r2, [pc, #256]	; (4028cc <udd_ep_run+0x144>)
  4027ca:	4413      	add	r3, r2
  4027cc:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  4027ce:	4b40      	ldr	r3, [pc, #256]	; (4028d0 <udd_ep_run+0x148>)
  4027d0:	7bfa      	ldrb	r2, [r7, #15]
  4027d2:	320c      	adds	r2, #12
  4027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4027dc:	2b00      	cmp	r3, #0
  4027de:	d00f      	beq.n	402800 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  4027e0:	69bb      	ldr	r3, [r7, #24]
  4027e2:	7c5b      	ldrb	r3, [r3, #17]
  4027e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4027e8:	b2db      	uxtb	r3, r3
  4027ea:	2b00      	cmp	r3, #0
  4027ec:	d108      	bne.n	402800 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4027ee:	4b38      	ldr	r3, [pc, #224]	; (4028d0 <udd_ep_run+0x148>)
  4027f0:	7bfa      	ldrb	r2, [r7, #15]
  4027f2:	320c      	adds	r2, #12
  4027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027f8:	f003 0320 	and.w	r3, r3, #32
  4027fc:	2b00      	cmp	r3, #0
  4027fe:	d001      	beq.n	402804 <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  402800:	2300      	movs	r3, #0
  402802:	e05f      	b.n	4028c4 <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  402804:	4b33      	ldr	r3, [pc, #204]	; (4028d4 <udd_ep_run+0x14c>)
  402806:	4798      	blx	r3
  402808:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  40280a:	69bb      	ldr	r3, [r7, #24]
  40280c:	7c5b      	ldrb	r3, [r3, #17]
  40280e:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402812:	b2db      	uxtb	r3, r3
  402814:	2b01      	cmp	r3, #1
  402816:	d104      	bne.n	402822 <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  402818:	6978      	ldr	r0, [r7, #20]
  40281a:	4b2f      	ldr	r3, [pc, #188]	; (4028d8 <udd_ep_run+0x150>)
  40281c:	4798      	blx	r3
		return false; // Job already on going
  40281e:	2300      	movs	r3, #0
  402820:	e050      	b.n	4028c4 <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  402822:	69ba      	ldr	r2, [r7, #24]
  402824:	7c53      	ldrb	r3, [r2, #17]
  402826:	f043 0310 	orr.w	r3, r3, #16
  40282a:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  40282c:	6978      	ldr	r0, [r7, #20]
  40282e:	4b2a      	ldr	r3, [pc, #168]	; (4028d8 <udd_ep_run+0x150>)
  402830:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402832:	69bb      	ldr	r3, [r7, #24]
  402834:	68ba      	ldr	r2, [r7, #8]
  402836:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  402838:	69bb      	ldr	r3, [r7, #24]
  40283a:	687a      	ldr	r2, [r7, #4]
  40283c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  40283e:	69bb      	ldr	r3, [r7, #24]
  402840:	2200      	movs	r2, #0
  402842:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  402844:	69bb      	ldr	r3, [r7, #24]
  402846:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402848:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40284a:	7bbb      	ldrb	r3, [r7, #14]
  40284c:	2b00      	cmp	r3, #0
  40284e:	d102      	bne.n	402856 <udd_ep_run+0xce>
  402850:	687b      	ldr	r3, [r7, #4]
  402852:	2b00      	cmp	r3, #0
  402854:	d101      	bne.n	40285a <udd_ep_run+0xd2>
  402856:	2301      	movs	r3, #1
  402858:	e000      	b.n	40285c <udd_ep_run+0xd4>
  40285a:	2300      	movs	r3, #0
  40285c:	b2db      	uxtb	r3, r3
  40285e:	f003 0301 	and.w	r3, r3, #1
  402862:	b2d9      	uxtb	r1, r3
  402864:	69ba      	ldr	r2, [r7, #24]
  402866:	7c53      	ldrb	r3, [r2, #17]
  402868:	f361 1386 	bfi	r3, r1, #6, #1
  40286c:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  40286e:	69ba      	ldr	r2, [r7, #24]
  402870:	7c53      	ldrb	r3, [r2, #17]
  402872:	f36f 13c7 	bfc	r3, #7, #1
  402876:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  402878:	4b16      	ldr	r3, [pc, #88]	; (4028d4 <udd_ep_run+0x14c>)
  40287a:	4798      	blx	r3
  40287c:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  40287e:	4b14      	ldr	r3, [pc, #80]	; (4028d0 <udd_ep_run+0x148>)
  402880:	7bfa      	ldrb	r2, [r7, #15]
  402882:	2101      	movs	r1, #1
  402884:	fa01 f202 	lsl.w	r2, r1, r2
  402888:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  40288a:	7ffb      	ldrb	r3, [r7, #31]
  40288c:	2b00      	cmp	r3, #0
  40288e:	d015      	beq.n	4028bc <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  402890:	4b0f      	ldr	r3, [pc, #60]	; (4028d0 <udd_ep_run+0x148>)
  402892:	7bfa      	ldrb	r2, [r7, #15]
  402894:	320c      	adds	r2, #12
  402896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40289a:	f003 0311 	and.w	r3, r3, #17
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d10c      	bne.n	4028bc <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  4028a2:	7bfb      	ldrb	r3, [r7, #15]
  4028a4:	4618      	mov	r0, r3
  4028a6:	2101      	movs	r1, #1
  4028a8:	4b0c      	ldr	r3, [pc, #48]	; (4028dc <udd_ep_run+0x154>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	d004      	beq.n	4028bc <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  4028b2:	7bfb      	ldrb	r3, [r7, #15]
  4028b4:	4618      	mov	r0, r3
  4028b6:	2100      	movs	r1, #0
  4028b8:	4b08      	ldr	r3, [pc, #32]	; (4028dc <udd_ep_run+0x154>)
  4028ba:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  4028bc:	6978      	ldr	r0, [r7, #20]
  4028be:	4b06      	ldr	r3, [pc, #24]	; (4028d8 <udd_ep_run+0x150>)
  4028c0:	4798      	blx	r3

	return true;
  4028c2:	2301      	movs	r3, #1
}
  4028c4:	4618      	mov	r0, r3
  4028c6:	3720      	adds	r7, #32
  4028c8:	46bd      	mov	sp, r7
  4028ca:	bd80      	pop	{r7, pc}
  4028cc:	20000dc4 	.word	0x20000dc4
  4028d0:	40034000 	.word	0x40034000
  4028d4:	00401e45 	.word	0x00401e45
  4028d8:	00401e9d 	.word	0x00401e9d
  4028dc:	004037a5 	.word	0x004037a5

004028e0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4028e0:	b580      	push	{r7, lr}
  4028e2:	b088      	sub	sp, #32
  4028e4:	af00      	add	r7, sp, #0
  4028e6:	4603      	mov	r3, r0
  4028e8:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  4028ea:	79fb      	ldrb	r3, [r7, #7]
  4028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028f0:	2b00      	cmp	r3, #0
  4028f2:	bf0c      	ite	eq
  4028f4:	2300      	moveq	r3, #0
  4028f6:	2301      	movne	r3, #1
  4028f8:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4028fa:	79fb      	ldrb	r3, [r7, #7]
  4028fc:	f003 030f 	and.w	r3, r3, #15
  402900:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  402902:	79fb      	ldrb	r3, [r7, #7]
  402904:	2b03      	cmp	r3, #3
  402906:	d900      	bls.n	40290a <udd_ep_abort+0x2a>
		return;
  402908:	e0ba      	b.n	402a80 <udd_ep_abort+0x1a0>

	// Disable interrupts
	flags = cpu_irq_save();
  40290a:	4b5f      	ldr	r3, [pc, #380]	; (402a88 <udd_ep_abort+0x1a8>)
  40290c:	4798      	blx	r3
  40290e:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  402910:	4b5e      	ldr	r3, [pc, #376]	; (402a8c <udd_ep_abort+0x1ac>)
  402912:	79fa      	ldrb	r2, [r7, #7]
  402914:	2101      	movs	r1, #1
  402916:	fa01 f202 	lsl.w	r2, r1, r2
  40291a:	615a      	str	r2, [r3, #20]
	cpu_irq_restore(flags);
  40291c:	69b8      	ldr	r0, [r7, #24]
  40291e:	4b5c      	ldr	r3, [pc, #368]	; (402a90 <udd_ep_abort+0x1b0>)
  402920:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  402922:	7ffb      	ldrb	r3, [r7, #31]
  402924:	2b00      	cmp	r3, #0
  402926:	f000 8086 	beq.w	402a36 <udd_ep_abort+0x156>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  40292a:	4b58      	ldr	r3, [pc, #352]	; (402a8c <udd_ep_abort+0x1ac>)
  40292c:	79fa      	ldrb	r2, [r7, #7]
  40292e:	320c      	adds	r2, #12
  402930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402934:	f003 0310 	and.w	r3, r3, #16
  402938:	2b00      	cmp	r3, #0
  40293a:	d04f      	beq.n	4029dc <udd_ep_abort+0xfc>
			udd_kill_data_in_fifo(ep,
  40293c:	79fb      	ldrb	r3, [r7, #7]
  40293e:	2b00      	cmp	r3, #0
  402940:	d02e      	beq.n	4029a0 <udd_ep_abort+0xc0>
  402942:	79fb      	ldrb	r3, [r7, #7]
  402944:	2b03      	cmp	r3, #3
  402946:	d02b      	beq.n	4029a0 <udd_ep_abort+0xc0>
  402948:	4b50      	ldr	r3, [pc, #320]	; (402a8c <udd_ep_abort+0x1ac>)
  40294a:	79fa      	ldrb	r2, [r7, #7]
  40294c:	494f      	ldr	r1, [pc, #316]	; (402a8c <udd_ep_abort+0x1ac>)
  40294e:	79f8      	ldrb	r0, [r7, #7]
  402950:	300c      	adds	r0, #12
  402952:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  402956:	f021 0110 	bic.w	r1, r1, #16
  40295a:	320c      	adds	r2, #12
  40295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402960:	bf00      	nop
  402962:	4b4a      	ldr	r3, [pc, #296]	; (402a8c <udd_ep_abort+0x1ac>)
  402964:	79fa      	ldrb	r2, [r7, #7]
  402966:	320c      	adds	r2, #12
  402968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40296c:	f003 0310 	and.w	r3, r3, #16
  402970:	2b00      	cmp	r3, #0
  402972:	d1f6      	bne.n	402962 <udd_ep_abort+0x82>
  402974:	4b45      	ldr	r3, [pc, #276]	; (402a8c <udd_ep_abort+0x1ac>)
  402976:	79fa      	ldrb	r2, [r7, #7]
  402978:	4944      	ldr	r1, [pc, #272]	; (402a8c <udd_ep_abort+0x1ac>)
  40297a:	79f8      	ldrb	r0, [r7, #7]
  40297c:	300c      	adds	r0, #12
  40297e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  402982:	f041 0110 	orr.w	r1, r1, #16
  402986:	320c      	adds	r2, #12
  402988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40298c:	bf00      	nop
  40298e:	4b3f      	ldr	r3, [pc, #252]	; (402a8c <udd_ep_abort+0x1ac>)
  402990:	79fa      	ldrb	r2, [r7, #7]
  402992:	320c      	adds	r2, #12
  402994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402998:	f003 0310 	and.w	r3, r3, #16
  40299c:	2b00      	cmp	r3, #0
  40299e:	d0f6      	beq.n	40298e <udd_ep_abort+0xae>
  4029a0:	4b3a      	ldr	r3, [pc, #232]	; (402a8c <udd_ep_abort+0x1ac>)
  4029a2:	79fa      	ldrb	r2, [r7, #7]
  4029a4:	320c      	adds	r2, #12
  4029a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4029aa:	617b      	str	r3, [r7, #20]
  4029ac:	697b      	ldr	r3, [r7, #20]
  4029ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029b2:	617b      	str	r3, [r7, #20]
  4029b4:	697b      	ldr	r3, [r7, #20]
  4029b6:	f023 0310 	bic.w	r3, r3, #16
  4029ba:	617b      	str	r3, [r7, #20]
  4029bc:	4b33      	ldr	r3, [pc, #204]	; (402a8c <udd_ep_abort+0x1ac>)
  4029be:	79fa      	ldrb	r2, [r7, #7]
  4029c0:	6979      	ldr	r1, [r7, #20]
  4029c2:	320c      	adds	r2, #12
  4029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4029c8:	2300      	movs	r3, #0
  4029ca:	613b      	str	r3, [r7, #16]
  4029cc:	e003      	b.n	4029d6 <udd_ep_abort+0xf6>
  4029ce:	bf00      	nop
  4029d0:	693b      	ldr	r3, [r7, #16]
  4029d2:	3301      	adds	r3, #1
  4029d4:	613b      	str	r3, [r7, #16]
  4029d6:	693b      	ldr	r3, [r7, #16]
  4029d8:	2b13      	cmp	r3, #19
  4029da:	d9f8      	bls.n	4029ce <udd_ep_abort+0xee>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4029dc:	4b2b      	ldr	r3, [pc, #172]	; (402a8c <udd_ep_abort+0x1ac>)
  4029de:	79fa      	ldrb	r2, [r7, #7]
  4029e0:	320c      	adds	r2, #12
  4029e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4029e6:	60fb      	str	r3, [r7, #12]
  4029e8:	68fb      	ldr	r3, [r7, #12]
  4029ea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029ee:	60fb      	str	r3, [r7, #12]
  4029f0:	68fb      	ldr	r3, [r7, #12]
  4029f2:	f023 0301 	bic.w	r3, r3, #1
  4029f6:	60fb      	str	r3, [r7, #12]
  4029f8:	4b24      	ldr	r3, [pc, #144]	; (402a8c <udd_ep_abort+0x1ac>)
  4029fa:	79fa      	ldrb	r2, [r7, #7]
  4029fc:	68f9      	ldr	r1, [r7, #12]
  4029fe:	320c      	adds	r2, #12
  402a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402a04:	2300      	movs	r3, #0
  402a06:	60bb      	str	r3, [r7, #8]
  402a08:	e003      	b.n	402a12 <udd_ep_abort+0x132>
  402a0a:	bf00      	nop
  402a0c:	68bb      	ldr	r3, [r7, #8]
  402a0e:	3301      	adds	r3, #1
  402a10:	60bb      	str	r3, [r7, #8]
  402a12:	68bb      	ldr	r3, [r7, #8]
  402a14:	2b13      	cmp	r3, #19
  402a16:	d9f8      	bls.n	402a0a <udd_ep_abort+0x12a>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402a18:	79fb      	ldrb	r3, [r7, #7]
  402a1a:	1e5a      	subs	r2, r3, #1
  402a1c:	491d      	ldr	r1, [pc, #116]	; (402a94 <udd_ep_abort+0x1b4>)
  402a1e:	4613      	mov	r3, r2
  402a20:	009b      	lsls	r3, r3, #2
  402a22:	4413      	add	r3, r2
  402a24:	009b      	lsls	r3, r3, #2
  402a26:	440b      	add	r3, r1
  402a28:	f103 0210 	add.w	r2, r3, #16
  402a2c:	7853      	ldrb	r3, [r2, #1]
  402a2e:	f36f 0383 	bfc	r3, #2, #2
  402a32:	7053      	strb	r3, [r2, #1]
  402a34:	e00d      	b.n	402a52 <udd_ep_abort+0x172>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402a36:	e003      	b.n	402a40 <udd_ep_abort+0x160>
			udd_ep_ack_out_received(ep);
  402a38:	79fb      	ldrb	r3, [r7, #7]
  402a3a:	4618      	mov	r0, r3
  402a3c:	4b16      	ldr	r3, [pc, #88]	; (402a98 <udd_ep_abort+0x1b8>)
  402a3e:	4798      	blx	r3
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402a40:	4b12      	ldr	r3, [pc, #72]	; (402a8c <udd_ep_abort+0x1ac>)
  402a42:	79fa      	ldrb	r2, [r7, #7]
  402a44:	320c      	adds	r2, #12
  402a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402a4a:	f003 0342 	and.w	r3, r3, #66	; 0x42
  402a4e:	2b00      	cmp	r3, #0
  402a50:	d1f2      	bne.n	402a38 <udd_ep_abort+0x158>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402a52:	4b0e      	ldr	r3, [pc, #56]	; (402a8c <udd_ep_abort+0x1ac>)
  402a54:	4a0d      	ldr	r2, [pc, #52]	; (402a8c <udd_ep_abort+0x1ac>)
  402a56:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402a58:	79fa      	ldrb	r2, [r7, #7]
  402a5a:	2001      	movs	r0, #1
  402a5c:	fa00 f202 	lsl.w	r2, r0, r2
  402a60:	430a      	orrs	r2, r1
  402a62:	629a      	str	r2, [r3, #40]	; 0x28
  402a64:	4b09      	ldr	r3, [pc, #36]	; (402a8c <udd_ep_abort+0x1ac>)
  402a66:	4a09      	ldr	r2, [pc, #36]	; (402a8c <udd_ep_abort+0x1ac>)
  402a68:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402a6a:	79fa      	ldrb	r2, [r7, #7]
  402a6c:	2001      	movs	r0, #1
  402a6e:	fa00 f202 	lsl.w	r2, r0, r2
  402a72:	43d2      	mvns	r2, r2
  402a74:	400a      	ands	r2, r1
  402a76:	629a      	str	r2, [r3, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  402a78:	79fb      	ldrb	r3, [r7, #7]
  402a7a:	4618      	mov	r0, r3
  402a7c:	4b07      	ldr	r3, [pc, #28]	; (402a9c <udd_ep_abort+0x1bc>)
  402a7e:	4798      	blx	r3
}
  402a80:	3720      	adds	r7, #32
  402a82:	46bd      	mov	sp, r7
  402a84:	bd80      	pop	{r7, pc}
  402a86:	bf00      	nop
  402a88:	00401e45 	.word	0x00401e45
  402a8c:	40034000 	.word	0x40034000
  402a90:	00401e9d 	.word	0x00401e9d
  402a94:	20000dc4 	.word	0x20000dc4
  402a98:	0040351d 	.word	0x0040351d
  402a9c:	00403471 	.word	0x00403471

00402aa0 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  402aa0:	b580      	push	{r7, lr}
  402aa2:	b086      	sub	sp, #24
  402aa4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  402aa6:	4b27      	ldr	r3, [pc, #156]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402aa8:	4a26      	ldr	r2, [pc, #152]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402aaa:	6892      	ldr	r2, [r2, #8]
  402aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402ab0:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402ab2:	4b24      	ldr	r3, [pc, #144]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ab4:	4a23      	ldr	r2, [pc, #140]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ab6:	6892      	ldr	r2, [r2, #8]
  402ab8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402abc:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402abe:	4b21      	ldr	r3, [pc, #132]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ac2:	613b      	str	r3, [r7, #16]
  402ac4:	693b      	ldr	r3, [r7, #16]
  402ac6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402aca:	613b      	str	r3, [r7, #16]
  402acc:	693b      	ldr	r3, [r7, #16]
  402ace:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ad6:	613b      	str	r3, [r7, #16]
  402ad8:	693b      	ldr	r3, [r7, #16]
  402ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402ade:	613b      	str	r3, [r7, #16]
  402ae0:	4b18      	ldr	r3, [pc, #96]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ae2:	693a      	ldr	r2, [r7, #16]
  402ae4:	631a      	str	r2, [r3, #48]	; 0x30
  402ae6:	2300      	movs	r3, #0
  402ae8:	60fb      	str	r3, [r7, #12]
  402aea:	e003      	b.n	402af4 <udd_reset_ep_ctrl+0x54>
  402aec:	bf00      	nop
  402aee:	68fb      	ldr	r3, [r7, #12]
  402af0:	3301      	adds	r3, #1
  402af2:	60fb      	str	r3, [r7, #12]
  402af4:	68fb      	ldr	r3, [r7, #12]
  402af6:	2b13      	cmp	r3, #19
  402af8:	d9f8      	bls.n	402aec <udd_reset_ep_ctrl+0x4c>
	udd_enable_endpoint(0);
  402afa:	4b12      	ldr	r3, [pc, #72]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402afe:	60bb      	str	r3, [r7, #8]
  402b00:	68bb      	ldr	r3, [r7, #8]
  402b02:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b06:	60bb      	str	r3, [r7, #8]
  402b08:	68bb      	ldr	r3, [r7, #8]
  402b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402b0e:	60bb      	str	r3, [r7, #8]
  402b10:	4b0c      	ldr	r3, [pc, #48]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402b12:	68ba      	ldr	r2, [r7, #8]
  402b14:	631a      	str	r2, [r3, #48]	; 0x30
  402b16:	2300      	movs	r3, #0
  402b18:	607b      	str	r3, [r7, #4]
  402b1a:	e003      	b.n	402b24 <udd_reset_ep_ctrl+0x84>
  402b1c:	bf00      	nop
  402b1e:	687b      	ldr	r3, [r7, #4]
  402b20:	3301      	adds	r3, #1
  402b22:	607b      	str	r3, [r7, #4]
  402b24:	687b      	ldr	r3, [r7, #4]
  402b26:	2b13      	cmp	r3, #19
  402b28:	d9f8      	bls.n	402b1c <udd_reset_ep_ctrl+0x7c>

	flags = cpu_irq_save();
  402b2a:	4b07      	ldr	r3, [pc, #28]	; (402b48 <udd_reset_ep_ctrl+0xa8>)
  402b2c:	4798      	blx	r3
  402b2e:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(0);
  402b30:	4b04      	ldr	r3, [pc, #16]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402b32:	2201      	movs	r2, #1
  402b34:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  402b36:	6978      	ldr	r0, [r7, #20]
  402b38:	4b04      	ldr	r3, [pc, #16]	; (402b4c <udd_reset_ep_ctrl+0xac>)
  402b3a:	4798      	blx	r3
}
  402b3c:	3718      	adds	r7, #24
  402b3e:	46bd      	mov	sp, r7
  402b40:	bd80      	pop	{r7, pc}
  402b42:	bf00      	nop
  402b44:	40034000 	.word	0x40034000
  402b48:	00401e45 	.word	0x00401e45
  402b4c:	00401e9d 	.word	0x00401e9d

00402b50 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  402b50:	b480      	push	{r7}
  402b52:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  402b54:	4b07      	ldr	r3, [pc, #28]	; (402b74 <udd_ctrl_init+0x24>)
  402b56:	2200      	movs	r2, #0
  402b58:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402b5a:	4b06      	ldr	r3, [pc, #24]	; (402b74 <udd_ctrl_init+0x24>)
  402b5c:	2200      	movs	r2, #0
  402b5e:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  402b60:	4b04      	ldr	r3, [pc, #16]	; (402b74 <udd_ctrl_init+0x24>)
  402b62:	2200      	movs	r2, #0
  402b64:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  402b66:	4b04      	ldr	r3, [pc, #16]	; (402b78 <udd_ctrl_init+0x28>)
  402b68:	2200      	movs	r2, #0
  402b6a:	701a      	strb	r2, [r3, #0]
}
  402b6c:	46bd      	mov	sp, r7
  402b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b72:	4770      	bx	lr
  402b74:	2000894c 	.word	0x2000894c
  402b78:	20000dbf 	.word	0x20000dbf

00402b7c <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b08c      	sub	sp, #48	; 0x30
  402b80:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  402b82:	4b6d      	ldr	r3, [pc, #436]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402b84:	781b      	ldrb	r3, [r3, #0]
  402b86:	2b00      	cmp	r3, #0
  402b88:	d003      	beq.n	402b92 <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  402b8a:	4b6c      	ldr	r3, [pc, #432]	; (402d3c <udd_ctrl_setup_received+0x1c0>)
  402b8c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  402b8e:	4b6c      	ldr	r3, [pc, #432]	; (402d40 <udd_ctrl_setup_received+0x1c4>)
  402b90:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  402b92:	4b6c      	ldr	r3, [pc, #432]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b96:	4b6c      	ldr	r3, [pc, #432]	; (402d48 <udd_ctrl_setup_received+0x1cc>)
  402b98:	4013      	ands	r3, r2
  402b9a:	0c1b      	lsrs	r3, r3, #16
  402b9c:	2b08      	cmp	r3, #8
  402b9e:	d01a      	beq.n	402bd6 <udd_ctrl_setup_received+0x5a>
		udd_ack_setup_received(0);
  402ba0:	4b68      	ldr	r3, [pc, #416]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  402ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402ba8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bac:	62bb      	str	r3, [r7, #40]	; 0x28
  402bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402bb0:	f023 0304 	bic.w	r3, r3, #4
  402bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  402bb6:	4b63      	ldr	r3, [pc, #396]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402bba:	631a      	str	r2, [r3, #48]	; 0x30
  402bbc:	2300      	movs	r3, #0
  402bbe:	627b      	str	r3, [r7, #36]	; 0x24
  402bc0:	e003      	b.n	402bca <udd_ctrl_setup_received+0x4e>
  402bc2:	bf00      	nop
  402bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bc6:	3301      	adds	r3, #1
  402bc8:	627b      	str	r3, [r7, #36]	; 0x24
  402bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bcc:	2b13      	cmp	r3, #19
  402bce:	d9f8      	bls.n	402bc2 <udd_ctrl_setup_received+0x46>
		udd_ctrl_stall_data();
  402bd0:	4b5e      	ldr	r3, [pc, #376]	; (402d4c <udd_ctrl_setup_received+0x1d0>)
  402bd2:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  402bd4:	e0ad      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	}
	for (i = 0; i < 8; i++) {
  402bd6:	2300      	movs	r3, #0
  402bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  402bdc:	e00c      	b.n	402bf8 <udd_ctrl_setup_received+0x7c>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402bde:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  402be2:	4b5b      	ldr	r3, [pc, #364]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402be4:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  402be6:	4a57      	ldr	r2, [pc, #348]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402bea:	b2d2      	uxtb	r2, r2
  402bec:	701a      	strb	r2, [r3, #0]
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  402bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402bf2:	3301      	adds	r3, #1
  402bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  402bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402bfc:	2b07      	cmp	r3, #7
  402bfe:	d9ee      	bls.n	402bde <udd_ctrl_setup_received+0x62>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  402c00:	4b53      	ldr	r3, [pc, #332]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c02:	885a      	ldrh	r2, [r3, #2]
  402c04:	4b52      	ldr	r3, [pc, #328]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c06:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  402c08:	4b51      	ldr	r3, [pc, #324]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c0a:	889a      	ldrh	r2, [r3, #4]
  402c0c:	4b50      	ldr	r3, [pc, #320]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c0e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  402c10:	4b4f      	ldr	r3, [pc, #316]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c12:	88da      	ldrh	r2, [r3, #6]
  402c14:	4b4e      	ldr	r3, [pc, #312]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c16:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  402c18:	4b4e      	ldr	r3, [pc, #312]	; (402d54 <udd_ctrl_setup_received+0x1d8>)
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0
  402c1e:	f083 0301 	eor.w	r3, r3, #1
  402c22:	b2db      	uxtb	r3, r3
  402c24:	2b00      	cmp	r3, #0
  402c26:	d01a      	beq.n	402c5e <udd_ctrl_setup_received+0xe2>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402c28:	4b46      	ldr	r3, [pc, #280]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c2c:	623b      	str	r3, [r7, #32]
  402c2e:	6a3b      	ldr	r3, [r7, #32]
  402c30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c34:	623b      	str	r3, [r7, #32]
  402c36:	6a3b      	ldr	r3, [r7, #32]
  402c38:	f023 0304 	bic.w	r3, r3, #4
  402c3c:	623b      	str	r3, [r7, #32]
  402c3e:	4b41      	ldr	r3, [pc, #260]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c40:	6a3a      	ldr	r2, [r7, #32]
  402c42:	631a      	str	r2, [r3, #48]	; 0x30
  402c44:	2300      	movs	r3, #0
  402c46:	61fb      	str	r3, [r7, #28]
  402c48:	e003      	b.n	402c52 <udd_ctrl_setup_received+0xd6>
  402c4a:	bf00      	nop
  402c4c:	69fb      	ldr	r3, [r7, #28]
  402c4e:	3301      	adds	r3, #1
  402c50:	61fb      	str	r3, [r7, #28]
  402c52:	69fb      	ldr	r3, [r7, #28]
  402c54:	2b13      	cmp	r3, #19
  402c56:	d9f8      	bls.n	402c4a <udd_ctrl_setup_received+0xce>
		udd_ctrl_stall_data();
  402c58:	4b3c      	ldr	r3, [pc, #240]	; (402d4c <udd_ctrl_setup_received+0x1d0>)
  402c5a:	4798      	blx	r3
		return;
  402c5c:	e069      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	}

	if (Udd_setup_is_in()) {
  402c5e:	4b3c      	ldr	r3, [pc, #240]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c60:	781b      	ldrb	r3, [r3, #0]
  402c62:	b2db      	uxtb	r3, r3
  402c64:	b25b      	sxtb	r3, r3
  402c66:	2b00      	cmp	r3, #0
  402c68:	da3b      	bge.n	402ce2 <udd_ctrl_setup_received+0x166>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402c6a:	4b36      	ldr	r3, [pc, #216]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c6e:	61bb      	str	r3, [r7, #24]
  402c70:	69bb      	ldr	r3, [r7, #24]
  402c72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c76:	61bb      	str	r3, [r7, #24]
  402c78:	69bb      	ldr	r3, [r7, #24]
  402c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c7e:	61bb      	str	r3, [r7, #24]
  402c80:	4b30      	ldr	r3, [pc, #192]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c82:	69ba      	ldr	r2, [r7, #24]
  402c84:	631a      	str	r2, [r3, #48]	; 0x30
  402c86:	2300      	movs	r3, #0
  402c88:	617b      	str	r3, [r7, #20]
  402c8a:	e003      	b.n	402c94 <udd_ctrl_setup_received+0x118>
  402c8c:	bf00      	nop
  402c8e:	697b      	ldr	r3, [r7, #20]
  402c90:	3301      	adds	r3, #1
  402c92:	617b      	str	r3, [r7, #20]
  402c94:	697b      	ldr	r3, [r7, #20]
  402c96:	2b13      	cmp	r3, #19
  402c98:	d9f8      	bls.n	402c8c <udd_ctrl_setup_received+0x110>
		udd_ack_setup_received(0);
  402c9a:	4b2a      	ldr	r3, [pc, #168]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c9e:	613b      	str	r3, [r7, #16]
  402ca0:	693b      	ldr	r3, [r7, #16]
  402ca2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ca6:	613b      	str	r3, [r7, #16]
  402ca8:	693b      	ldr	r3, [r7, #16]
  402caa:	f023 0304 	bic.w	r3, r3, #4
  402cae:	613b      	str	r3, [r7, #16]
  402cb0:	4b24      	ldr	r3, [pc, #144]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402cb2:	693a      	ldr	r2, [r7, #16]
  402cb4:	631a      	str	r2, [r3, #48]	; 0x30
  402cb6:	2300      	movs	r3, #0
  402cb8:	60fb      	str	r3, [r7, #12]
  402cba:	e003      	b.n	402cc4 <udd_ctrl_setup_received+0x148>
  402cbc:	bf00      	nop
  402cbe:	68fb      	ldr	r3, [r7, #12]
  402cc0:	3301      	adds	r3, #1
  402cc2:	60fb      	str	r3, [r7, #12]
  402cc4:	68fb      	ldr	r3, [r7, #12]
  402cc6:	2b13      	cmp	r3, #19
  402cc8:	d9f8      	bls.n	402cbc <udd_ctrl_setup_received+0x140>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402cca:	4b23      	ldr	r3, [pc, #140]	; (402d58 <udd_ctrl_setup_received+0x1dc>)
  402ccc:	2200      	movs	r2, #0
  402cce:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402cd0:	4b22      	ldr	r3, [pc, #136]	; (402d5c <udd_ctrl_setup_received+0x1e0>)
  402cd2:	2200      	movs	r2, #0
  402cd4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402cd6:	4b18      	ldr	r3, [pc, #96]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402cd8:	2202      	movs	r2, #2
  402cda:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402cdc:	4b20      	ldr	r3, [pc, #128]	; (402d60 <udd_ctrl_setup_received+0x1e4>)
  402cde:	4798      	blx	r3
  402ce0:	e027      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	} else {
		udd_ack_setup_received(0);
  402ce2:	4b18      	ldr	r3, [pc, #96]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ce6:	60bb      	str	r3, [r7, #8]
  402ce8:	68bb      	ldr	r3, [r7, #8]
  402cea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402cee:	60bb      	str	r3, [r7, #8]
  402cf0:	68bb      	ldr	r3, [r7, #8]
  402cf2:	f023 0304 	bic.w	r3, r3, #4
  402cf6:	60bb      	str	r3, [r7, #8]
  402cf8:	4b12      	ldr	r3, [pc, #72]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402cfa:	68ba      	ldr	r2, [r7, #8]
  402cfc:	631a      	str	r2, [r3, #48]	; 0x30
  402cfe:	2300      	movs	r3, #0
  402d00:	607b      	str	r3, [r7, #4]
  402d02:	e003      	b.n	402d0c <udd_ctrl_setup_received+0x190>
  402d04:	bf00      	nop
  402d06:	687b      	ldr	r3, [r7, #4]
  402d08:	3301      	adds	r3, #1
  402d0a:	607b      	str	r3, [r7, #4]
  402d0c:	687b      	ldr	r3, [r7, #4]
  402d0e:	2b13      	cmp	r3, #19
  402d10:	d9f8      	bls.n	402d04 <udd_ctrl_setup_received+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402d12:	4b0f      	ldr	r3, [pc, #60]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402d14:	88db      	ldrh	r3, [r3, #6]
  402d16:	2b00      	cmp	r3, #0
  402d18:	d102      	bne.n	402d20 <udd_ctrl_setup_received+0x1a4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402d1a:	4b12      	ldr	r3, [pc, #72]	; (402d64 <udd_ctrl_setup_received+0x1e8>)
  402d1c:	4798      	blx	r3
			return;
  402d1e:	e008      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402d20:	4b0d      	ldr	r3, [pc, #52]	; (402d58 <udd_ctrl_setup_received+0x1dc>)
  402d22:	2200      	movs	r2, #0
  402d24:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402d26:	4b0d      	ldr	r3, [pc, #52]	; (402d5c <udd_ctrl_setup_received+0x1e0>)
  402d28:	2200      	movs	r2, #0
  402d2a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402d2c:	4b02      	ldr	r3, [pc, #8]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402d2e:	2201      	movs	r2, #1
  402d30:	701a      	strb	r2, [r3, #0]
	}
}
  402d32:	3730      	adds	r7, #48	; 0x30
  402d34:	46bd      	mov	sp, r7
  402d36:	bd80      	pop	{r7, pc}
  402d38:	20000dbf 	.word	0x20000dbf
  402d3c:	004032c1 	.word	0x004032c1
  402d40:	00402b51 	.word	0x00402b51
  402d44:	40034000 	.word	0x40034000
  402d48:	07ff0000 	.word	0x07ff0000
  402d4c:	00403209 	.word	0x00403209
  402d50:	2000894c 	.word	0x2000894c
  402d54:	00401c45 	.word	0x00401c45
  402d58:	20000dc0 	.word	0x20000dc0
  402d5c:	20000dc2 	.word	0x20000dc2
  402d60:	00402d69 	.word	0x00402d69
  402d64:	00403259 	.word	0x00403259

00402d68 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  402d68:	b580      	push	{r7, lr}
  402d6a:	b08e      	sub	sp, #56	; 0x38
  402d6c:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402d6e:	4b7b      	ldr	r3, [pc, #492]	; (402f5c <udd_ctrl_in_sent+0x1f4>)
  402d70:	781b      	ldrb	r3, [r3, #0]
  402d72:	2b03      	cmp	r3, #3
  402d74:	d11c      	bne.n	402db0 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  402d76:	4b7a      	ldr	r3, [pc, #488]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  402d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402d7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d82:	62bb      	str	r3, [r7, #40]	; 0x28
  402d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402d86:	f023 0301 	bic.w	r3, r3, #1
  402d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  402d8c:	4b74      	ldr	r3, [pc, #464]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402d90:	631a      	str	r2, [r3, #48]	; 0x30
  402d92:	2300      	movs	r3, #0
  402d94:	627b      	str	r3, [r7, #36]	; 0x24
  402d96:	e003      	b.n	402da0 <udd_ctrl_in_sent+0x38>
  402d98:	bf00      	nop
  402d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d9c:	3301      	adds	r3, #1
  402d9e:	627b      	str	r3, [r7, #36]	; 0x24
  402da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402da2:	2b13      	cmp	r3, #19
  402da4:	d9f8      	bls.n	402d98 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  402da6:	4b6f      	ldr	r3, [pc, #444]	; (402f64 <udd_ctrl_in_sent+0x1fc>)
  402da8:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402daa:	4b6f      	ldr	r3, [pc, #444]	; (402f68 <udd_ctrl_in_sent+0x200>)
  402dac:	4798      	blx	r3
		return;
  402dae:	e0d1      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  402db0:	4b6e      	ldr	r3, [pc, #440]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402db2:	899a      	ldrh	r2, [r3, #12]
  402db4:	4b6e      	ldr	r3, [pc, #440]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402db6:	881b      	ldrh	r3, [r3, #0]
  402db8:	1ad3      	subs	r3, r2, r3
  402dba:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (0 == nb_remain) {
  402dbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402dbe:	2b00      	cmp	r3, #0
  402dc0:	d13f      	bne.n	402e42 <udd_ctrl_in_sent+0xda>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402dc2:	4b6c      	ldr	r3, [pc, #432]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dc4:	881a      	ldrh	r2, [r3, #0]
  402dc6:	4b6a      	ldr	r3, [pc, #424]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402dc8:	881b      	ldrh	r3, [r3, #0]
  402dca:	4413      	add	r3, r2
  402dcc:	b29a      	uxth	r2, r3
  402dce:	4b69      	ldr	r3, [pc, #420]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dd0:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  402dd2:	4b66      	ldr	r3, [pc, #408]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402dd4:	88da      	ldrh	r2, [r3, #6]
  402dd6:	4b67      	ldr	r3, [pc, #412]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dd8:	881b      	ldrh	r3, [r3, #0]
  402dda:	429a      	cmp	r2, r3
  402ddc:	d003      	beq.n	402de6 <udd_ctrl_in_sent+0x7e>
				|| b_shortpacket) {
  402dde:	4b66      	ldr	r3, [pc, #408]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402de0:	781b      	ldrb	r3, [r3, #0]
  402de2:	2b00      	cmp	r3, #0
  402de4:	d01a      	beq.n	402e1c <udd_ctrl_in_sent+0xb4>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  402de6:	4b65      	ldr	r3, [pc, #404]	; (402f7c <udd_ctrl_in_sent+0x214>)
  402de8:	4798      	blx	r3
			udd_ack_in_sent(0);
  402dea:	4b5d      	ldr	r3, [pc, #372]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dee:	623b      	str	r3, [r7, #32]
  402df0:	6a3b      	ldr	r3, [r7, #32]
  402df2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402df6:	623b      	str	r3, [r7, #32]
  402df8:	6a3b      	ldr	r3, [r7, #32]
  402dfa:	f023 0301 	bic.w	r3, r3, #1
  402dfe:	623b      	str	r3, [r7, #32]
  402e00:	4b57      	ldr	r3, [pc, #348]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e02:	6a3a      	ldr	r2, [r7, #32]
  402e04:	631a      	str	r2, [r3, #48]	; 0x30
  402e06:	2300      	movs	r3, #0
  402e08:	61fb      	str	r3, [r7, #28]
  402e0a:	e003      	b.n	402e14 <udd_ctrl_in_sent+0xac>
  402e0c:	bf00      	nop
  402e0e:	69fb      	ldr	r3, [r7, #28]
  402e10:	3301      	adds	r3, #1
  402e12:	61fb      	str	r3, [r7, #28]
  402e14:	69fb      	ldr	r3, [r7, #28]
  402e16:	2b13      	cmp	r3, #19
  402e18:	d9f8      	bls.n	402e0c <udd_ctrl_in_sent+0xa4>
			return;
  402e1a:	e09b      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  402e1c:	4b53      	ldr	r3, [pc, #332]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e1e:	695b      	ldr	r3, [r3, #20]
  402e20:	2b00      	cmp	r3, #0
  402e22:	d00e      	beq.n	402e42 <udd_ctrl_in_sent+0xda>
				|| (!udd_g_ctrlreq.over_under_run())) {
  402e24:	4b51      	ldr	r3, [pc, #324]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e26:	695b      	ldr	r3, [r3, #20]
  402e28:	4798      	blx	r3
  402e2a:	4603      	mov	r3, r0
  402e2c:	f083 0301 	eor.w	r3, r3, #1
  402e30:	b2db      	uxtb	r3, r3
  402e32:	2b00      	cmp	r3, #0
  402e34:	d105      	bne.n	402e42 <udd_ctrl_in_sent+0xda>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  402e36:	4b4e      	ldr	r3, [pc, #312]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402e38:	2200      	movs	r2, #0
  402e3a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  402e3c:	4b4b      	ldr	r3, [pc, #300]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e3e:	899b      	ldrh	r3, [r3, #12]
  402e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  402e42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402e44:	2b3f      	cmp	r3, #63	; 0x3f
  402e46:	d905      	bls.n	402e54 <udd_ctrl_in_sent+0xec>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  402e48:	2340      	movs	r3, #64	; 0x40
  402e4a:	86fb      	strh	r3, [r7, #54]	; 0x36
		b_shortpacket = false;
  402e4c:	4b4a      	ldr	r3, [pc, #296]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402e4e:	2200      	movs	r2, #0
  402e50:	701a      	strb	r2, [r3, #0]
  402e52:	e002      	b.n	402e5a <udd_ctrl_in_sent+0xf2>
	} else {
		b_shortpacket = true;
  402e54:	4b48      	ldr	r3, [pc, #288]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402e56:	2201      	movs	r2, #1
  402e58:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402e5a:	4b44      	ldr	r3, [pc, #272]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e5c:	689a      	ldr	r2, [r3, #8]
  402e5e:	4b44      	ldr	r3, [pc, #272]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402e60:	881b      	ldrh	r3, [r3, #0]
  402e62:	4413      	add	r3, r2
  402e64:	633b      	str	r3, [r7, #48]	; 0x30
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  402e66:	4b46      	ldr	r3, [pc, #280]	; (402f80 <udd_ctrl_in_sent+0x218>)
  402e68:	4798      	blx	r3
  402e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Is_udd_bank0_received(0)) {
  402e6c:	4b3c      	ldr	r3, [pc, #240]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e70:	f003 0302 	and.w	r3, r3, #2
  402e74:	2b00      	cmp	r3, #0
  402e76:	d01e      	beq.n	402eb6 <udd_ctrl_in_sent+0x14e>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  402e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402e7a:	4b42      	ldr	r3, [pc, #264]	; (402f84 <udd_ctrl_in_sent+0x21c>)
  402e7c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  402e7e:	4b37      	ldr	r3, [pc, #220]	; (402f5c <udd_ctrl_in_sent+0x1f4>)
  402e80:	2204      	movs	r2, #4
  402e82:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  402e84:	4b36      	ldr	r3, [pc, #216]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e88:	61bb      	str	r3, [r7, #24]
  402e8a:	69bb      	ldr	r3, [r7, #24]
  402e8c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e90:	61bb      	str	r3, [r7, #24]
  402e92:	69bb      	ldr	r3, [r7, #24]
  402e94:	f023 0301 	bic.w	r3, r3, #1
  402e98:	61bb      	str	r3, [r7, #24]
  402e9a:	4b31      	ldr	r3, [pc, #196]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e9c:	69ba      	ldr	r2, [r7, #24]
  402e9e:	631a      	str	r2, [r3, #48]	; 0x30
  402ea0:	2300      	movs	r3, #0
  402ea2:	617b      	str	r3, [r7, #20]
  402ea4:	e003      	b.n	402eae <udd_ctrl_in_sent+0x146>
  402ea6:	bf00      	nop
  402ea8:	697b      	ldr	r3, [r7, #20]
  402eaa:	3301      	adds	r3, #1
  402eac:	617b      	str	r3, [r7, #20]
  402eae:	697b      	ldr	r3, [r7, #20]
  402eb0:	2b13      	cmp	r3, #19
  402eb2:	d9f8      	bls.n	402ea6 <udd_ctrl_in_sent+0x13e>
		return; // Exit of IN DATA phase
  402eb4:	e04e      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402eb6:	2300      	movs	r3, #0
  402eb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ebc:	e00a      	b.n	402ed4 <udd_ctrl_in_sent+0x16c>
		udd_endpoint_fifo_write(0, *ptr_src++);
  402ebe:	4a28      	ldr	r2, [pc, #160]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402ec2:	1c59      	adds	r1, r3, #1
  402ec4:	6339      	str	r1, [r7, #48]	; 0x30
  402ec6:	781b      	ldrb	r3, [r3, #0]
  402ec8:	6513      	str	r3, [r2, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402eca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402ece:	3301      	adds	r3, #1
  402ed0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ed4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402ed8:	b29b      	uxth	r3, r3
  402eda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  402edc:	429a      	cmp	r2, r3
  402ede:	d8ee      	bhi.n	402ebe <udd_ctrl_in_sent+0x156>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  402ee0:	4b23      	ldr	r3, [pc, #140]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402ee2:	881a      	ldrh	r2, [r3, #0]
  402ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ee6:	4413      	add	r3, r2
  402ee8:	b29a      	uxth	r2, r3
  402eea:	4b21      	ldr	r3, [pc, #132]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402eec:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  402eee:	4b1c      	ldr	r3, [pc, #112]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ef2:	613b      	str	r3, [r7, #16]
  402ef4:	693b      	ldr	r3, [r7, #16]
  402ef6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402efa:	613b      	str	r3, [r7, #16]
  402efc:	693b      	ldr	r3, [r7, #16]
  402efe:	f043 0310 	orr.w	r3, r3, #16
  402f02:	613b      	str	r3, [r7, #16]
  402f04:	4b16      	ldr	r3, [pc, #88]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f06:	693a      	ldr	r2, [r7, #16]
  402f08:	631a      	str	r2, [r3, #48]	; 0x30
  402f0a:	2300      	movs	r3, #0
  402f0c:	60fb      	str	r3, [r7, #12]
  402f0e:	e003      	b.n	402f18 <udd_ctrl_in_sent+0x1b0>
  402f10:	bf00      	nop
  402f12:	68fb      	ldr	r3, [r7, #12]
  402f14:	3301      	adds	r3, #1
  402f16:	60fb      	str	r3, [r7, #12]
  402f18:	68fb      	ldr	r3, [r7, #12]
  402f1a:	2b13      	cmp	r3, #19
  402f1c:	d9f8      	bls.n	402f10 <udd_ctrl_in_sent+0x1a8>
	udd_ack_in_sent(0);
  402f1e:	4b10      	ldr	r3, [pc, #64]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f22:	60bb      	str	r3, [r7, #8]
  402f24:	68bb      	ldr	r3, [r7, #8]
  402f26:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f2a:	60bb      	str	r3, [r7, #8]
  402f2c:	68bb      	ldr	r3, [r7, #8]
  402f2e:	f023 0301 	bic.w	r3, r3, #1
  402f32:	60bb      	str	r3, [r7, #8]
  402f34:	4b0a      	ldr	r3, [pc, #40]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f36:	68ba      	ldr	r2, [r7, #8]
  402f38:	631a      	str	r2, [r3, #48]	; 0x30
  402f3a:	2300      	movs	r3, #0
  402f3c:	607b      	str	r3, [r7, #4]
  402f3e:	e003      	b.n	402f48 <udd_ctrl_in_sent+0x1e0>
  402f40:	bf00      	nop
  402f42:	687b      	ldr	r3, [r7, #4]
  402f44:	3301      	adds	r3, #1
  402f46:	607b      	str	r3, [r7, #4]
  402f48:	687b      	ldr	r3, [r7, #4]
  402f4a:	2b13      	cmp	r3, #19
  402f4c:	d9f8      	bls.n	402f40 <udd_ctrl_in_sent+0x1d8>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  402f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402f50:	4b0c      	ldr	r3, [pc, #48]	; (402f84 <udd_ctrl_in_sent+0x21c>)
  402f52:	4798      	blx	r3
}
  402f54:	3738      	adds	r7, #56	; 0x38
  402f56:	46bd      	mov	sp, r7
  402f58:	bd80      	pop	{r7, pc}
  402f5a:	bf00      	nop
  402f5c:	20000dbf 	.word	0x20000dbf
  402f60:	40034000 	.word	0x40034000
  402f64:	004032c1 	.word	0x004032c1
  402f68:	00402b51 	.word	0x00402b51
  402f6c:	2000894c 	.word	0x2000894c
  402f70:	20000dc2 	.word	0x20000dc2
  402f74:	20000dc0 	.word	0x20000dc0
  402f78:	20000e00 	.word	0x20000e00
  402f7c:	004032a9 	.word	0x004032a9
  402f80:	00401e45 	.word	0x00401e45
  402f84:	00401e9d 	.word	0x00401e9d

00402f88 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  402f88:	b580      	push	{r7, lr}
  402f8a:	b08e      	sub	sp, #56	; 0x38
  402f8c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402f8e:	4b8f      	ldr	r3, [pc, #572]	; (4031cc <udd_ctrl_out_received+0x244>)
  402f90:	781b      	ldrb	r3, [r3, #0]
  402f92:	2b01      	cmp	r3, #1
  402f94:	d027      	beq.n	402fe6 <udd_ctrl_out_received+0x5e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402f96:	4b8d      	ldr	r3, [pc, #564]	; (4031cc <udd_ctrl_out_received+0x244>)
  402f98:	781b      	ldrb	r3, [r3, #0]
  402f9a:	2b02      	cmp	r3, #2
  402f9c:	d003      	beq.n	402fa6 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402f9e:	4b8b      	ldr	r3, [pc, #556]	; (4031cc <udd_ctrl_out_received+0x244>)
  402fa0:	781b      	ldrb	r3, [r3, #0]
  402fa2:	2b04      	cmp	r3, #4
  402fa4:	d102      	bne.n	402fac <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402fa6:	4b8a      	ldr	r3, [pc, #552]	; (4031d0 <udd_ctrl_out_received+0x248>)
  402fa8:	4798      	blx	r3
  402faa:	e001      	b.n	402fb0 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402fac:	4b89      	ldr	r3, [pc, #548]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  402fae:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402fb0:	4b89      	ldr	r3, [pc, #548]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402fb8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402fc0:	f023 0302 	bic.w	r3, r3, #2
  402fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fc6:	4b84      	ldr	r3, [pc, #528]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402fca:	631a      	str	r2, [r3, #48]	; 0x30
  402fcc:	2300      	movs	r3, #0
  402fce:	62bb      	str	r3, [r7, #40]	; 0x28
  402fd0:	e003      	b.n	402fda <udd_ctrl_out_received+0x52>
  402fd2:	bf00      	nop
  402fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fd6:	3301      	adds	r3, #1
  402fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  402fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fdc:	2b13      	cmp	r3, #19
  402fde:	d9f8      	bls.n	402fd2 <udd_ctrl_out_received+0x4a>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402fe0:	4b7e      	ldr	r3, [pc, #504]	; (4031dc <udd_ctrl_out_received+0x254>)
  402fe2:	4798      	blx	r3
		return;
  402fe4:	e10d      	b.n	403202 <udd_ctrl_out_received+0x27a>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402fe6:	4b7c      	ldr	r3, [pc, #496]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fea:	4b7d      	ldr	r3, [pc, #500]	; (4031e0 <udd_ctrl_out_received+0x258>)
  402fec:	4013      	ands	r3, r2
  402fee:	0c1b      	lsrs	r3, r3, #16
  402ff0:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402ff2:	4b7c      	ldr	r3, [pc, #496]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  402ff4:	899b      	ldrh	r3, [r3, #12]
  402ff6:	461a      	mov	r2, r3
  402ff8:	4b7b      	ldr	r3, [pc, #492]	; (4031e8 <udd_ctrl_out_received+0x260>)
  402ffa:	881b      	ldrh	r3, [r3, #0]
  402ffc:	4619      	mov	r1, r3
  402ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  403000:	440b      	add	r3, r1
  403002:	429a      	cmp	r2, r3
  403004:	da05      	bge.n	403012 <udd_ctrl_out_received+0x8a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  403006:	4b77      	ldr	r3, [pc, #476]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403008:	899a      	ldrh	r2, [r3, #12]
  40300a:	4b77      	ldr	r3, [pc, #476]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40300c:	881b      	ldrh	r3, [r3, #0]
  40300e:	1ad3      	subs	r3, r2, r3
  403010:	86bb      	strh	r3, [r7, #52]	; 0x34
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  403012:	4b74      	ldr	r3, [pc, #464]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403014:	689a      	ldr	r2, [r3, #8]
  403016:	4b74      	ldr	r3, [pc, #464]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403018:	881b      	ldrh	r3, [r3, #0]
  40301a:	4413      	add	r3, r2
  40301c:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < nb_data; i++) {
  40301e:	2300      	movs	r3, #0
  403020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  403024:	e00b      	b.n	40303e <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  403026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403028:	1c5a      	adds	r2, r3, #1
  40302a:	633a      	str	r2, [r7, #48]	; 0x30
  40302c:	4a6a      	ldr	r2, [pc, #424]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40302e:	6d12      	ldr	r2, [r2, #80]	; 0x50
  403030:	b2d2      	uxtb	r2, r2
  403032:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  403034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  403038:	3301      	adds	r3, #1
  40303a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  40303e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  403042:	b29b      	uxth	r3, r3
  403044:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  403046:	429a      	cmp	r2, r3
  403048:	d8ed      	bhi.n	403026 <udd_ctrl_out_received+0x9e>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40304a:	4b67      	ldr	r3, [pc, #412]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40304c:	881a      	ldrh	r2, [r3, #0]
  40304e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  403050:	4413      	add	r3, r2
  403052:	b29a      	uxth	r2, r3
  403054:	4b64      	ldr	r3, [pc, #400]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403056:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403058:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40305a:	2b40      	cmp	r3, #64	; 0x40
  40305c:	d10a      	bne.n	403074 <udd_ctrl_out_received+0xec>
			|| (udd_g_ctrlreq.req.wLength <=
  40305e:	4b61      	ldr	r3, [pc, #388]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403060:	88db      	ldrh	r3, [r3, #6]
  403062:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  403064:	4b61      	ldr	r3, [pc, #388]	; (4031ec <udd_ctrl_out_received+0x264>)
  403066:	881b      	ldrh	r3, [r3, #0]
  403068:	4619      	mov	r1, r3
  40306a:	4b5f      	ldr	r3, [pc, #380]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40306c:	881b      	ldrh	r3, [r3, #0]
  40306e:	440b      	add	r3, r1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  403070:	429a      	cmp	r2, r3
  403072:	dc46      	bgt.n	403102 <udd_ctrl_out_received+0x17a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  403074:	4b5c      	ldr	r3, [pc, #368]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403076:	881a      	ldrh	r2, [r3, #0]
  403078:	4b5a      	ldr	r3, [pc, #360]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40307a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40307c:	4b59      	ldr	r3, [pc, #356]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40307e:	695b      	ldr	r3, [r3, #20]
  403080:	2b00      	cmp	r3, #0
  403082:	d023      	beq.n	4030cc <udd_ctrl_out_received+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
  403084:	4b57      	ldr	r3, [pc, #348]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403086:	695b      	ldr	r3, [r3, #20]
  403088:	4798      	blx	r3
  40308a:	4603      	mov	r3, r0
  40308c:	f083 0301 	eor.w	r3, r3, #1
  403090:	b2db      	uxtb	r3, r3
  403092:	2b00      	cmp	r3, #0
  403094:	d01a      	beq.n	4030cc <udd_ctrl_out_received+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
  403096:	4b4f      	ldr	r3, [pc, #316]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403098:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  40309a:	4b4f      	ldr	r3, [pc, #316]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40309e:	627b      	str	r3, [r7, #36]	; 0x24
  4030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4030a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4030a6:	627b      	str	r3, [r7, #36]	; 0x24
  4030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4030aa:	f023 0302 	bic.w	r3, r3, #2
  4030ae:	627b      	str	r3, [r7, #36]	; 0x24
  4030b0:	4b49      	ldr	r3, [pc, #292]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4030b4:	631a      	str	r2, [r3, #48]	; 0x30
  4030b6:	2300      	movs	r3, #0
  4030b8:	623b      	str	r3, [r7, #32]
  4030ba:	e003      	b.n	4030c4 <udd_ctrl_out_received+0x13c>
  4030bc:	bf00      	nop
  4030be:	6a3b      	ldr	r3, [r7, #32]
  4030c0:	3301      	adds	r3, #1
  4030c2:	623b      	str	r3, [r7, #32]
  4030c4:	6a3b      	ldr	r3, [r7, #32]
  4030c6:	2b13      	cmp	r3, #19
  4030c8:	d9f8      	bls.n	4030bc <udd_ctrl_out_received+0x134>
				return;
  4030ca:	e09a      	b.n	403202 <udd_ctrl_out_received+0x27a>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4030cc:	4b42      	ldr	r3, [pc, #264]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030d0:	61fb      	str	r3, [r7, #28]
  4030d2:	69fb      	ldr	r3, [r7, #28]
  4030d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4030d8:	61fb      	str	r3, [r7, #28]
  4030da:	69fb      	ldr	r3, [r7, #28]
  4030dc:	f023 0302 	bic.w	r3, r3, #2
  4030e0:	61fb      	str	r3, [r7, #28]
  4030e2:	4b3d      	ldr	r3, [pc, #244]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030e4:	69fa      	ldr	r2, [r7, #28]
  4030e6:	631a      	str	r2, [r3, #48]	; 0x30
  4030e8:	2300      	movs	r3, #0
  4030ea:	61bb      	str	r3, [r7, #24]
  4030ec:	e003      	b.n	4030f6 <udd_ctrl_out_received+0x16e>
  4030ee:	bf00      	nop
  4030f0:	69bb      	ldr	r3, [r7, #24]
  4030f2:	3301      	adds	r3, #1
  4030f4:	61bb      	str	r3, [r7, #24]
  4030f6:	69bb      	ldr	r3, [r7, #24]
  4030f8:	2b13      	cmp	r3, #19
  4030fa:	d9f8      	bls.n	4030ee <udd_ctrl_out_received+0x166>
		udd_ctrl_send_zlp_in();
  4030fc:	4b3c      	ldr	r3, [pc, #240]	; (4031f0 <udd_ctrl_out_received+0x268>)
  4030fe:	4798      	blx	r3
		return;
  403100:	e07f      	b.n	403202 <udd_ctrl_out_received+0x27a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  403102:	4b38      	ldr	r3, [pc, #224]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403104:	899a      	ldrh	r2, [r3, #12]
  403106:	4b38      	ldr	r3, [pc, #224]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403108:	881b      	ldrh	r3, [r3, #0]
  40310a:	429a      	cmp	r2, r3
  40310c:	d14d      	bne.n	4031aa <udd_ctrl_out_received+0x222>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  40310e:	4b35      	ldr	r3, [pc, #212]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403110:	695b      	ldr	r3, [r3, #20]
  403112:	2b00      	cmp	r3, #0
  403114:	d11a      	bne.n	40314c <udd_ctrl_out_received+0x1c4>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  403116:	4b2f      	ldr	r3, [pc, #188]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403118:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40311a:	4b2f      	ldr	r3, [pc, #188]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40311e:	617b      	str	r3, [r7, #20]
  403120:	697b      	ldr	r3, [r7, #20]
  403122:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403126:	617b      	str	r3, [r7, #20]
  403128:	697b      	ldr	r3, [r7, #20]
  40312a:	f023 0302 	bic.w	r3, r3, #2
  40312e:	617b      	str	r3, [r7, #20]
  403130:	4b29      	ldr	r3, [pc, #164]	; (4031d8 <udd_ctrl_out_received+0x250>)
  403132:	697a      	ldr	r2, [r7, #20]
  403134:	631a      	str	r2, [r3, #48]	; 0x30
  403136:	2300      	movs	r3, #0
  403138:	613b      	str	r3, [r7, #16]
  40313a:	e003      	b.n	403144 <udd_ctrl_out_received+0x1bc>
  40313c:	bf00      	nop
  40313e:	693b      	ldr	r3, [r7, #16]
  403140:	3301      	adds	r3, #1
  403142:	613b      	str	r3, [r7, #16]
  403144:	693b      	ldr	r3, [r7, #16]
  403146:	2b13      	cmp	r3, #19
  403148:	d9f8      	bls.n	40313c <udd_ctrl_out_received+0x1b4>
			return;
  40314a:	e05a      	b.n	403202 <udd_ctrl_out_received+0x27a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  40314c:	4b25      	ldr	r3, [pc, #148]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40314e:	695b      	ldr	r3, [r3, #20]
  403150:	4798      	blx	r3
  403152:	4603      	mov	r3, r0
  403154:	f083 0301 	eor.w	r3, r3, #1
  403158:	b2db      	uxtb	r3, r3
  40315a:	2b00      	cmp	r3, #0
  40315c:	d01a      	beq.n	403194 <udd_ctrl_out_received+0x20c>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  40315e:	4b1d      	ldr	r3, [pc, #116]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403160:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  403162:	4b1d      	ldr	r3, [pc, #116]	; (4031d8 <udd_ctrl_out_received+0x250>)
  403164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403166:	60fb      	str	r3, [r7, #12]
  403168:	68fb      	ldr	r3, [r7, #12]
  40316a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40316e:	60fb      	str	r3, [r7, #12]
  403170:	68fb      	ldr	r3, [r7, #12]
  403172:	f023 0302 	bic.w	r3, r3, #2
  403176:	60fb      	str	r3, [r7, #12]
  403178:	4b17      	ldr	r3, [pc, #92]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40317a:	68fa      	ldr	r2, [r7, #12]
  40317c:	631a      	str	r2, [r3, #48]	; 0x30
  40317e:	2300      	movs	r3, #0
  403180:	60bb      	str	r3, [r7, #8]
  403182:	e003      	b.n	40318c <udd_ctrl_out_received+0x204>
  403184:	bf00      	nop
  403186:	68bb      	ldr	r3, [r7, #8]
  403188:	3301      	adds	r3, #1
  40318a:	60bb      	str	r3, [r7, #8]
  40318c:	68bb      	ldr	r3, [r7, #8]
  40318e:	2b13      	cmp	r3, #19
  403190:	d9f8      	bls.n	403184 <udd_ctrl_out_received+0x1fc>
			return;
  403192:	e036      	b.n	403202 <udd_ctrl_out_received+0x27a>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  403194:	4b15      	ldr	r3, [pc, #84]	; (4031ec <udd_ctrl_out_received+0x264>)
  403196:	881a      	ldrh	r2, [r3, #0]
  403198:	4b13      	ldr	r3, [pc, #76]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40319a:	881b      	ldrh	r3, [r3, #0]
  40319c:	4413      	add	r3, r2
  40319e:	b29a      	uxth	r2, r3
  4031a0:	4b12      	ldr	r3, [pc, #72]	; (4031ec <udd_ctrl_out_received+0x264>)
  4031a2:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  4031a4:	4b10      	ldr	r3, [pc, #64]	; (4031e8 <udd_ctrl_out_received+0x260>)
  4031a6:	2200      	movs	r2, #0
  4031a8:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  4031aa:	4b0b      	ldr	r3, [pc, #44]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031ae:	607b      	str	r3, [r7, #4]
  4031b0:	687b      	ldr	r3, [r7, #4]
  4031b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4031b6:	607b      	str	r3, [r7, #4]
  4031b8:	687b      	ldr	r3, [r7, #4]
  4031ba:	f023 0302 	bic.w	r3, r3, #2
  4031be:	607b      	str	r3, [r7, #4]
  4031c0:	4b05      	ldr	r3, [pc, #20]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4031c2:	687a      	ldr	r2, [r7, #4]
  4031c4:	631a      	str	r2, [r3, #48]	; 0x30
  4031c6:	2300      	movs	r3, #0
  4031c8:	603b      	str	r3, [r7, #0]
  4031ca:	e017      	b.n	4031fc <udd_ctrl_out_received+0x274>
  4031cc:	20000dbf 	.word	0x20000dbf
  4031d0:	004032c1 	.word	0x004032c1
  4031d4:	00403209 	.word	0x00403209
  4031d8:	40034000 	.word	0x40034000
  4031dc:	00402b51 	.word	0x00402b51
  4031e0:	07ff0000 	.word	0x07ff0000
  4031e4:	2000894c 	.word	0x2000894c
  4031e8:	20000dc2 	.word	0x20000dc2
  4031ec:	20000dc0 	.word	0x20000dc0
  4031f0:	00403259 	.word	0x00403259
  4031f4:	bf00      	nop
  4031f6:	683b      	ldr	r3, [r7, #0]
  4031f8:	3301      	adds	r3, #1
  4031fa:	603b      	str	r3, [r7, #0]
  4031fc:	683b      	ldr	r3, [r7, #0]
  4031fe:	2b13      	cmp	r3, #19
  403200:	d9f8      	bls.n	4031f4 <udd_ctrl_out_received+0x26c>
}
  403202:	3738      	adds	r7, #56	; 0x38
  403204:	46bd      	mov	sp, r7
  403206:	bd80      	pop	{r7, pc}

00403208 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  403208:	b480      	push	{r7}
  40320a:	b083      	sub	sp, #12
  40320c:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40320e:	4b10      	ldr	r3, [pc, #64]	; (403250 <udd_ctrl_stall_data+0x48>)
  403210:	2205      	movs	r2, #5
  403212:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  403214:	4b0f      	ldr	r3, [pc, #60]	; (403254 <udd_ctrl_stall_data+0x4c>)
  403216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403218:	607b      	str	r3, [r7, #4]
  40321a:	687b      	ldr	r3, [r7, #4]
  40321c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403220:	607b      	str	r3, [r7, #4]
  403222:	687b      	ldr	r3, [r7, #4]
  403224:	f043 0320 	orr.w	r3, r3, #32
  403228:	607b      	str	r3, [r7, #4]
  40322a:	4b0a      	ldr	r3, [pc, #40]	; (403254 <udd_ctrl_stall_data+0x4c>)
  40322c:	687a      	ldr	r2, [r7, #4]
  40322e:	631a      	str	r2, [r3, #48]	; 0x30
  403230:	2300      	movs	r3, #0
  403232:	603b      	str	r3, [r7, #0]
  403234:	e003      	b.n	40323e <udd_ctrl_stall_data+0x36>
  403236:	bf00      	nop
  403238:	683b      	ldr	r3, [r7, #0]
  40323a:	3301      	adds	r3, #1
  40323c:	603b      	str	r3, [r7, #0]
  40323e:	683b      	ldr	r3, [r7, #0]
  403240:	2b13      	cmp	r3, #19
  403242:	d9f8      	bls.n	403236 <udd_ctrl_stall_data+0x2e>
}
  403244:	370c      	adds	r7, #12
  403246:	46bd      	mov	sp, r7
  403248:	f85d 7b04 	ldr.w	r7, [sp], #4
  40324c:	4770      	bx	lr
  40324e:	bf00      	nop
  403250:	20000dbf 	.word	0x20000dbf
  403254:	40034000 	.word	0x40034000

00403258 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  403258:	b480      	push	{r7}
  40325a:	b083      	sub	sp, #12
  40325c:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40325e:	4b10      	ldr	r3, [pc, #64]	; (4032a0 <udd_ctrl_send_zlp_in+0x48>)
  403260:	2203      	movs	r2, #3
  403262:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  403264:	4b0f      	ldr	r3, [pc, #60]	; (4032a4 <udd_ctrl_send_zlp_in+0x4c>)
  403266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403268:	607b      	str	r3, [r7, #4]
  40326a:	687b      	ldr	r3, [r7, #4]
  40326c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403270:	607b      	str	r3, [r7, #4]
  403272:	687b      	ldr	r3, [r7, #4]
  403274:	f043 0310 	orr.w	r3, r3, #16
  403278:	607b      	str	r3, [r7, #4]
  40327a:	4b0a      	ldr	r3, [pc, #40]	; (4032a4 <udd_ctrl_send_zlp_in+0x4c>)
  40327c:	687a      	ldr	r2, [r7, #4]
  40327e:	631a      	str	r2, [r3, #48]	; 0x30
  403280:	2300      	movs	r3, #0
  403282:	603b      	str	r3, [r7, #0]
  403284:	e003      	b.n	40328e <udd_ctrl_send_zlp_in+0x36>
  403286:	bf00      	nop
  403288:	683b      	ldr	r3, [r7, #0]
  40328a:	3301      	adds	r3, #1
  40328c:	603b      	str	r3, [r7, #0]
  40328e:	683b      	ldr	r3, [r7, #0]
  403290:	2b13      	cmp	r3, #19
  403292:	d9f8      	bls.n	403286 <udd_ctrl_send_zlp_in+0x2e>
}
  403294:	370c      	adds	r7, #12
  403296:	46bd      	mov	sp, r7
  403298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40329c:	4770      	bx	lr
  40329e:	bf00      	nop
  4032a0:	20000dbf 	.word	0x20000dbf
  4032a4:	40034000 	.word	0x40034000

004032a8 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  4032a8:	b480      	push	{r7}
  4032aa:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4032ac:	4b03      	ldr	r3, [pc, #12]	; (4032bc <udd_ctrl_send_zlp_out+0x14>)
  4032ae:	2204      	movs	r2, #4
  4032b0:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  4032b2:	46bd      	mov	sp, r7
  4032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032b8:	4770      	bx	lr
  4032ba:	bf00      	nop
  4032bc:	20000dbf 	.word	0x20000dbf

004032c0 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  4032c0:	b580      	push	{r7, lr}
  4032c2:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4032c4:	4b03      	ldr	r3, [pc, #12]	; (4032d4 <udd_ctrl_endofrequest+0x14>)
  4032c6:	691b      	ldr	r3, [r3, #16]
  4032c8:	2b00      	cmp	r3, #0
  4032ca:	d002      	beq.n	4032d2 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  4032cc:	4b01      	ldr	r3, [pc, #4]	; (4032d4 <udd_ctrl_endofrequest+0x14>)
  4032ce:	691b      	ldr	r3, [r3, #16]
  4032d0:	4798      	blx	r3
	}
}
  4032d2:	bd80      	pop	{r7, pc}
  4032d4:	2000894c 	.word	0x2000894c

004032d8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  4032d8:	b580      	push	{r7, lr}
  4032da:	b082      	sub	sp, #8
  4032dc:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  4032de:	4b25      	ldr	r3, [pc, #148]	; (403374 <udd_ctrl_interrupt+0x9c>)
  4032e0:	69db      	ldr	r3, [r3, #28]
  4032e2:	f003 0301 	and.w	r3, r3, #1
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	d101      	bne.n	4032ee <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4032ea:	2300      	movs	r3, #0
  4032ec:	e03e      	b.n	40336c <udd_ctrl_interrupt+0x94>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4032ee:	4b21      	ldr	r3, [pc, #132]	; (403374 <udd_ctrl_interrupt+0x9c>)
  4032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032f2:	f003 0304 	and.w	r3, r3, #4
  4032f6:	2b00      	cmp	r3, #0
  4032f8:	d003      	beq.n	403302 <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4032fa:	4b1f      	ldr	r3, [pc, #124]	; (403378 <udd_ctrl_interrupt+0xa0>)
  4032fc:	4798      	blx	r3
		return true;
  4032fe:	2301      	movs	r3, #1
  403300:	e034      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_in_sent(0)) {
  403302:	4b1c      	ldr	r3, [pc, #112]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403306:	f003 0301 	and.w	r3, r3, #1
  40330a:	2b00      	cmp	r3, #0
  40330c:	d003      	beq.n	403316 <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  40330e:	4b1b      	ldr	r3, [pc, #108]	; (40337c <udd_ctrl_interrupt+0xa4>)
  403310:	4798      	blx	r3
		return true;
  403312:	2301      	movs	r3, #1
  403314:	e02a      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_bank0_received(0)) {
  403316:	4b17      	ldr	r3, [pc, #92]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40331a:	f003 0302 	and.w	r3, r3, #2
  40331e:	2b00      	cmp	r3, #0
  403320:	d003      	beq.n	40332a <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  403322:	4b17      	ldr	r3, [pc, #92]	; (403380 <udd_ctrl_interrupt+0xa8>)
  403324:	4798      	blx	r3
		return true;
  403326:	2301      	movs	r3, #1
  403328:	e020      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_stall(0)) {
  40332a:	4b12      	ldr	r3, [pc, #72]	; (403374 <udd_ctrl_interrupt+0x9c>)
  40332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40332e:	f003 0308 	and.w	r3, r3, #8
  403332:	2b00      	cmp	r3, #0
  403334:	d019      	beq.n	40336a <udd_ctrl_interrupt+0x92>
		// STALLed
		udd_ack_stall(0);
  403336:	4b0f      	ldr	r3, [pc, #60]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40333a:	607b      	str	r3, [r7, #4]
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403342:	607b      	str	r3, [r7, #4]
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	f023 0308 	bic.w	r3, r3, #8
  40334a:	607b      	str	r3, [r7, #4]
  40334c:	4b09      	ldr	r3, [pc, #36]	; (403374 <udd_ctrl_interrupt+0x9c>)
  40334e:	687a      	ldr	r2, [r7, #4]
  403350:	631a      	str	r2, [r3, #48]	; 0x30
  403352:	2300      	movs	r3, #0
  403354:	603b      	str	r3, [r7, #0]
  403356:	e003      	b.n	403360 <udd_ctrl_interrupt+0x88>
  403358:	bf00      	nop
  40335a:	683b      	ldr	r3, [r7, #0]
  40335c:	3301      	adds	r3, #1
  40335e:	603b      	str	r3, [r7, #0]
  403360:	683b      	ldr	r3, [r7, #0]
  403362:	2b13      	cmp	r3, #19
  403364:	d9f8      	bls.n	403358 <udd_ctrl_interrupt+0x80>
		return true;
  403366:	2301      	movs	r3, #1
  403368:	e000      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	return false;
  40336a:	2300      	movs	r3, #0
}
  40336c:	4618      	mov	r0, r3
  40336e:	3708      	adds	r7, #8
  403370:	46bd      	mov	sp, r7
  403372:	bd80      	pop	{r7, pc}
  403374:	40034000 	.word	0x40034000
  403378:	00402b7d 	.word	0x00402b7d
  40337c:	00402d69 	.word	0x00402d69
  403380:	00402f89 	.word	0x00402f89

00403384 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  403384:	b480      	push	{r7}
  403386:	b083      	sub	sp, #12
  403388:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40338a:	2300      	movs	r3, #0
  40338c:	71fb      	strb	r3, [r7, #7]
  40338e:	e043      	b.n	403418 <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  403390:	79fa      	ldrb	r2, [r7, #7]
  403392:	4925      	ldr	r1, [pc, #148]	; (403428 <udd_ep_job_table_reset+0xa4>)
  403394:	4613      	mov	r3, r2
  403396:	009b      	lsls	r3, r3, #2
  403398:	4413      	add	r3, r2
  40339a:	009b      	lsls	r3, r3, #2
  40339c:	440b      	add	r3, r1
  40339e:	f103 0210 	add.w	r2, r3, #16
  4033a2:	7853      	ldrb	r3, [r2, #1]
  4033a4:	f36f 0383 	bfc	r3, #2, #2
  4033a8:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  4033aa:	79fa      	ldrb	r2, [r7, #7]
  4033ac:	491e      	ldr	r1, [pc, #120]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033ae:	4613      	mov	r3, r2
  4033b0:	009b      	lsls	r3, r3, #2
  4033b2:	4413      	add	r3, r2
  4033b4:	009b      	lsls	r3, r3, #2
  4033b6:	440b      	add	r3, r1
  4033b8:	f103 0210 	add.w	r2, r3, #16
  4033bc:	7853      	ldrb	r3, [r2, #1]
  4033be:	f36f 1304 	bfc	r3, #4, #1
  4033c2:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  4033c4:	79fa      	ldrb	r2, [r7, #7]
  4033c6:	4918      	ldr	r1, [pc, #96]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033c8:	4613      	mov	r3, r2
  4033ca:	009b      	lsls	r3, r3, #2
  4033cc:	4413      	add	r3, r2
  4033ce:	009b      	lsls	r3, r3, #2
  4033d0:	440b      	add	r3, r1
  4033d2:	f103 0210 	add.w	r2, r3, #16
  4033d6:	7853      	ldrb	r3, [r2, #1]
  4033d8:	f36f 1345 	bfc	r3, #5, #1
  4033dc:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  4033de:	79fa      	ldrb	r2, [r7, #7]
  4033e0:	4911      	ldr	r1, [pc, #68]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033e2:	4613      	mov	r3, r2
  4033e4:	009b      	lsls	r3, r3, #2
  4033e6:	4413      	add	r3, r2
  4033e8:	009b      	lsls	r3, r3, #2
  4033ea:	440b      	add	r3, r1
  4033ec:	f103 0210 	add.w	r2, r3, #16
  4033f0:	7853      	ldrb	r3, [r2, #1]
  4033f2:	f36f 1386 	bfc	r3, #6, #1
  4033f6:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  4033f8:	79fa      	ldrb	r2, [r7, #7]
  4033fa:	490b      	ldr	r1, [pc, #44]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033fc:	4613      	mov	r3, r2
  4033fe:	009b      	lsls	r3, r3, #2
  403400:	4413      	add	r3, r2
  403402:	009b      	lsls	r3, r3, #2
  403404:	440b      	add	r3, r1
  403406:	f103 0210 	add.w	r2, r3, #16
  40340a:	7853      	ldrb	r3, [r2, #1]
  40340c:	f36f 13c7 	bfc	r3, #7, #1
  403410:	7053      	strb	r3, [r2, #1]
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403412:	79fb      	ldrb	r3, [r7, #7]
  403414:	3301      	adds	r3, #1
  403416:	71fb      	strb	r3, [r7, #7]
  403418:	79fb      	ldrb	r3, [r7, #7]
  40341a:	2b02      	cmp	r3, #2
  40341c:	d9b8      	bls.n	403390 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
	}
}
  40341e:	370c      	adds	r7, #12
  403420:	46bd      	mov	sp, r7
  403422:	f85d 7b04 	ldr.w	r7, [sp], #4
  403426:	4770      	bx	lr
  403428:	20000dc4 	.word	0x20000dc4

0040342c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  40342c:	b580      	push	{r7, lr}
  40342e:	b082      	sub	sp, #8
  403430:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403432:	2300      	movs	r3, #0
  403434:	71fb      	strb	r3, [r7, #7]
  403436:	e011      	b.n	40345c <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  403438:	79fa      	ldrb	r2, [r7, #7]
  40343a:	4613      	mov	r3, r2
  40343c:	009b      	lsls	r3, r3, #2
  40343e:	4413      	add	r3, r2
  403440:	009b      	lsls	r3, r3, #2
  403442:	4a09      	ldr	r2, [pc, #36]	; (403468 <udd_ep_job_table_kill+0x3c>)
  403444:	441a      	add	r2, r3
  403446:	79fb      	ldrb	r3, [r7, #7]
  403448:	3301      	adds	r3, #1
  40344a:	b2db      	uxtb	r3, r3
  40344c:	4610      	mov	r0, r2
  40344e:	2101      	movs	r1, #1
  403450:	461a      	mov	r2, r3
  403452:	4b06      	ldr	r3, [pc, #24]	; (40346c <udd_ep_job_table_kill+0x40>)
  403454:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403456:	79fb      	ldrb	r3, [r7, #7]
  403458:	3301      	adds	r3, #1
  40345a:	71fb      	strb	r3, [r7, #7]
  40345c:	79fb      	ldrb	r3, [r7, #7]
  40345e:	2b02      	cmp	r3, #2
  403460:	d9ea      	bls.n	403438 <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
	}
}
  403462:	3708      	adds	r7, #8
  403464:	46bd      	mov	sp, r7
  403466:	bd80      	pop	{r7, pc}
  403468:	20000dc4 	.word	0x20000dc4
  40346c:	004034ad 	.word	0x004034ad

00403470 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  403470:	b580      	push	{r7, lr}
  403472:	b082      	sub	sp, #8
  403474:	af00      	add	r7, sp, #0
  403476:	4603      	mov	r3, r0
  403478:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  40347a:	79fb      	ldrb	r3, [r7, #7]
  40347c:	f003 030f 	and.w	r3, r3, #15
  403480:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403482:	79fb      	ldrb	r3, [r7, #7]
  403484:	1e5a      	subs	r2, r3, #1
  403486:	4613      	mov	r3, r2
  403488:	009b      	lsls	r3, r3, #2
  40348a:	4413      	add	r3, r2
  40348c:	009b      	lsls	r3, r3, #2
  40348e:	4a05      	ldr	r2, [pc, #20]	; (4034a4 <udd_ep_abort_job+0x34>)
  403490:	441a      	add	r2, r3
  403492:	79fb      	ldrb	r3, [r7, #7]
  403494:	4610      	mov	r0, r2
  403496:	2101      	movs	r1, #1
  403498:	461a      	mov	r2, r3
  40349a:	4b03      	ldr	r3, [pc, #12]	; (4034a8 <udd_ep_abort_job+0x38>)
  40349c:	4798      	blx	r3
}
  40349e:	3708      	adds	r7, #8
  4034a0:	46bd      	mov	sp, r7
  4034a2:	bd80      	pop	{r7, pc}
  4034a4:	20000dc4 	.word	0x20000dc4
  4034a8:	004034ad 	.word	0x004034ad

004034ac <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4034ac:	b580      	push	{r7, lr}
  4034ae:	b084      	sub	sp, #16
  4034b0:	af00      	add	r7, sp, #0
  4034b2:	60f8      	str	r0, [r7, #12]
  4034b4:	60b9      	str	r1, [r7, #8]
  4034b6:	4613      	mov	r3, r2
  4034b8:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  4034ba:	68fb      	ldr	r3, [r7, #12]
  4034bc:	7c5b      	ldrb	r3, [r3, #17]
  4034be:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4034c2:	b2db      	uxtb	r3, r3
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	d100      	bne.n	4034ca <udd_ep_finish_job+0x1e>
		return; // No on-going job
  4034c8:	e023      	b.n	403512 <udd_ep_finish_job+0x66>
	}
	ptr_job->busy = false;
  4034ca:	68fa      	ldr	r2, [r7, #12]
  4034cc:	7c53      	ldrb	r3, [r2, #17]
  4034ce:	f36f 1304 	bfc	r3, #4, #1
  4034d2:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  4034d4:	68fb      	ldr	r3, [r7, #12]
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	2b00      	cmp	r3, #0
  4034da:	d100      	bne.n	4034de <udd_ep_finish_job+0x32>
		return; // No callback linked to job
  4034dc:	e019      	b.n	403512 <udd_ep_finish_job+0x66>
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4034de:	4b0e      	ldr	r3, [pc, #56]	; (403518 <udd_ep_finish_job+0x6c>)
  4034e0:	79fa      	ldrb	r2, [r7, #7]
  4034e2:	320c      	adds	r2, #12
  4034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	d003      	beq.n	4034f8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
  4034f0:	79fb      	ldrb	r3, [r7, #7]
  4034f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4034f6:	71fb      	strb	r3, [r7, #7]
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4034f8:	68fb      	ldr	r3, [r7, #12]
  4034fa:	681b      	ldr	r3, [r3, #0]
  4034fc:	68ba      	ldr	r2, [r7, #8]
  4034fe:	2a01      	cmp	r2, #1
  403500:	bf14      	ite	ne
  403502:	2200      	movne	r2, #0
  403504:	2201      	moveq	r2, #1
  403506:	b2d2      	uxtb	r2, r2
  403508:	4610      	mov	r0, r2
  40350a:	68fa      	ldr	r2, [r7, #12]
  40350c:	6891      	ldr	r1, [r2, #8]
  40350e:	79fa      	ldrb	r2, [r7, #7]
  403510:	4798      	blx	r3
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  403512:	3710      	adds	r7, #16
  403514:	46bd      	mov	sp, r7
  403516:	bd80      	pop	{r7, pc}
  403518:	40034000 	.word	0x40034000

0040351c <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  40351c:	b480      	push	{r7}
  40351e:	b089      	sub	sp, #36	; 0x24
  403520:	af00      	add	r7, sp, #0
  403522:	4603      	mov	r3, r0
  403524:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403526:	79fb      	ldrb	r3, [r7, #7]
  403528:	1e5a      	subs	r2, r3, #1
  40352a:	4613      	mov	r3, r2
  40352c:	009b      	lsls	r3, r3, #2
  40352e:	4413      	add	r3, r2
  403530:	009b      	lsls	r3, r3, #2
  403532:	4a3d      	ldr	r2, [pc, #244]	; (403628 <udd_ep_ack_out_received+0x10c>)
  403534:	4413      	add	r3, r2
  403536:	61fb      	str	r3, [r7, #28]
	if (Is_udd_all_banks_received(ep)) {
  403538:	4b3c      	ldr	r3, [pc, #240]	; (40362c <udd_ep_ack_out_received+0x110>)
  40353a:	79fa      	ldrb	r2, [r7, #7]
  40353c:	320c      	adds	r2, #12
  40353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403542:	f003 0342 	and.w	r3, r3, #66	; 0x42
  403546:	2b42      	cmp	r3, #66	; 0x42
  403548:	d014      	beq.n	403574 <udd_ep_ack_out_received+0x58>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  40354a:	4b38      	ldr	r3, [pc, #224]	; (40362c <udd_ep_ack_out_received+0x110>)
  40354c:	79fa      	ldrb	r2, [r7, #7]
  40354e:	320c      	adds	r2, #12
  403550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403554:	f003 0302 	and.w	r3, r3, #2
  403558:	2b00      	cmp	r3, #0
  40355a:	d005      	beq.n	403568 <udd_ep_ack_out_received+0x4c>
		// Must be bank0
		ptr_job->bank = 0;
  40355c:	69fa      	ldr	r2, [r7, #28]
  40355e:	7c53      	ldrb	r3, [r2, #17]
  403560:	f36f 0383 	bfc	r3, #2, #2
  403564:	7453      	strb	r3, [r2, #17]
  403566:	e005      	b.n	403574 <udd_ep_ack_out_received+0x58>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  403568:	69fa      	ldr	r2, [r7, #28]
  40356a:	7c53      	ldrb	r3, [r2, #17]
  40356c:	2101      	movs	r1, #1
  40356e:	f361 0383 	bfi	r3, r1, #2, #2
  403572:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  403574:	69fb      	ldr	r3, [r7, #28]
  403576:	7c5b      	ldrb	r3, [r3, #17]
  403578:	f3c3 0381 	ubfx	r3, r3, #2, #2
  40357c:	b2db      	uxtb	r3, r3
  40357e:	2b00      	cmp	r3, #0
  403580:	d12a      	bne.n	4035d8 <udd_ep_ack_out_received+0xbc>
		udd_ack_bank0_received(ep);
  403582:	4b2a      	ldr	r3, [pc, #168]	; (40362c <udd_ep_ack_out_received+0x110>)
  403584:	79fa      	ldrb	r2, [r7, #7]
  403586:	320c      	adds	r2, #12
  403588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40358c:	61bb      	str	r3, [r7, #24]
  40358e:	69bb      	ldr	r3, [r7, #24]
  403590:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403594:	61bb      	str	r3, [r7, #24]
  403596:	69bb      	ldr	r3, [r7, #24]
  403598:	f023 0302 	bic.w	r3, r3, #2
  40359c:	61bb      	str	r3, [r7, #24]
  40359e:	4b23      	ldr	r3, [pc, #140]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035a0:	79fa      	ldrb	r2, [r7, #7]
  4035a2:	69b9      	ldr	r1, [r7, #24]
  4035a4:	320c      	adds	r2, #12
  4035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4035aa:	2300      	movs	r3, #0
  4035ac:	617b      	str	r3, [r7, #20]
  4035ae:	e003      	b.n	4035b8 <udd_ep_ack_out_received+0x9c>
  4035b0:	bf00      	nop
  4035b2:	697b      	ldr	r3, [r7, #20]
  4035b4:	3301      	adds	r3, #1
  4035b6:	617b      	str	r3, [r7, #20]
  4035b8:	697b      	ldr	r3, [r7, #20]
  4035ba:	2b13      	cmp	r3, #19
  4035bc:	d9f8      	bls.n	4035b0 <udd_ep_ack_out_received+0x94>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4035be:	79fb      	ldrb	r3, [r7, #7]
  4035c0:	2b00      	cmp	r3, #0
  4035c2:	d02c      	beq.n	40361e <udd_ep_ack_out_received+0x102>
  4035c4:	79fb      	ldrb	r3, [r7, #7]
  4035c6:	2b03      	cmp	r3, #3
  4035c8:	d029      	beq.n	40361e <udd_ep_ack_out_received+0x102>
			ptr_job->bank = 1;
  4035ca:	69fa      	ldr	r2, [r7, #28]
  4035cc:	7c53      	ldrb	r3, [r2, #17]
  4035ce:	2101      	movs	r1, #1
  4035d0:	f361 0383 	bfi	r3, r1, #2, #2
  4035d4:	7453      	strb	r3, [r2, #17]
  4035d6:	e022      	b.n	40361e <udd_ep_ack_out_received+0x102>
		}
	} else {
		udd_ack_bank1_received(ep);
  4035d8:	4b14      	ldr	r3, [pc, #80]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035da:	79fa      	ldrb	r2, [r7, #7]
  4035dc:	320c      	adds	r2, #12
  4035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4035e2:	613b      	str	r3, [r7, #16]
  4035e4:	693b      	ldr	r3, [r7, #16]
  4035e6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035ea:	613b      	str	r3, [r7, #16]
  4035ec:	693b      	ldr	r3, [r7, #16]
  4035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4035f2:	613b      	str	r3, [r7, #16]
  4035f4:	4b0d      	ldr	r3, [pc, #52]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035f6:	79fa      	ldrb	r2, [r7, #7]
  4035f8:	6939      	ldr	r1, [r7, #16]
  4035fa:	320c      	adds	r2, #12
  4035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403600:	2300      	movs	r3, #0
  403602:	60fb      	str	r3, [r7, #12]
  403604:	e003      	b.n	40360e <udd_ep_ack_out_received+0xf2>
  403606:	bf00      	nop
  403608:	68fb      	ldr	r3, [r7, #12]
  40360a:	3301      	adds	r3, #1
  40360c:	60fb      	str	r3, [r7, #12]
  40360e:	68fb      	ldr	r3, [r7, #12]
  403610:	2b13      	cmp	r3, #19
  403612:	d9f8      	bls.n	403606 <udd_ep_ack_out_received+0xea>
		ptr_job->bank = 0;
  403614:	69fa      	ldr	r2, [r7, #28]
  403616:	7c53      	ldrb	r3, [r2, #17]
  403618:	f36f 0383 	bfc	r3, #2, #2
  40361c:	7453      	strb	r3, [r2, #17]
	}
}
  40361e:	3724      	adds	r7, #36	; 0x24
  403620:	46bd      	mov	sp, r7
  403622:	f85d 7b04 	ldr.w	r7, [sp], #4
  403626:	4770      	bx	lr
  403628:	20000dc4 	.word	0x20000dc4
  40362c:	40034000 	.word	0x40034000

00403630 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  403630:	b480      	push	{r7}
  403632:	b089      	sub	sp, #36	; 0x24
  403634:	af00      	add	r7, sp, #0
  403636:	4603      	mov	r3, r0
  403638:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40363a:	79fb      	ldrb	r3, [r7, #7]
  40363c:	1e5a      	subs	r2, r3, #1
  40363e:	4613      	mov	r3, r2
  403640:	009b      	lsls	r3, r3, #2
  403642:	4413      	add	r3, r2
  403644:	009b      	lsls	r3, r3, #2
  403646:	4a55      	ldr	r2, [pc, #340]	; (40379c <udd_ep_write_fifo+0x16c>)
  403648:	4413      	add	r3, r2
  40364a:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40364c:	693b      	ldr	r3, [r7, #16]
  40364e:	685a      	ldr	r2, [r3, #4]
  403650:	693b      	ldr	r3, [r7, #16]
  403652:	68db      	ldr	r3, [r3, #12]
  403654:	4413      	add	r3, r2
  403656:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403658:	693b      	ldr	r3, [r7, #16]
  40365a:	689a      	ldr	r2, [r3, #8]
  40365c:	693b      	ldr	r3, [r7, #16]
  40365e:	68db      	ldr	r3, [r3, #12]
  403660:	1ad3      	subs	r3, r2, r3
  403662:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  403664:	693b      	ldr	r3, [r7, #16]
  403666:	8a1b      	ldrh	r3, [r3, #16]
  403668:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40366c:	b29b      	uxth	r3, r3
  40366e:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  403670:	2300      	movs	r3, #0
  403672:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  403674:	68fa      	ldr	r2, [r7, #12]
  403676:	69bb      	ldr	r3, [r7, #24]
  403678:	429a      	cmp	r2, r3
  40367a:	d203      	bcs.n	403684 <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  40367c:	68fb      	ldr	r3, [r7, #12]
  40367e:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  403680:	2301      	movs	r3, #1
  403682:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  403684:	693b      	ldr	r3, [r7, #16]
  403686:	68da      	ldr	r2, [r3, #12]
  403688:	69bb      	ldr	r3, [r7, #24]
  40368a:	441a      	add	r2, r3
  40368c:	693b      	ldr	r3, [r7, #16]
  40368e:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403690:	e05a      	b.n	403748 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403692:	4a43      	ldr	r2, [pc, #268]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403694:	79f8      	ldrb	r0, [r7, #7]
  403696:	69fb      	ldr	r3, [r7, #28]
  403698:	1c59      	adds	r1, r3, #1
  40369a:	61f9      	str	r1, [r7, #28]
  40369c:	781b      	ldrb	r3, [r3, #0]
  40369e:	4619      	mov	r1, r3
  4036a0:	f100 0314 	add.w	r3, r0, #20
  4036a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036a8:	4a3d      	ldr	r2, [pc, #244]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036aa:	79f8      	ldrb	r0, [r7, #7]
  4036ac:	69fb      	ldr	r3, [r7, #28]
  4036ae:	1c59      	adds	r1, r3, #1
  4036b0:	61f9      	str	r1, [r7, #28]
  4036b2:	781b      	ldrb	r3, [r3, #0]
  4036b4:	4619      	mov	r1, r3
  4036b6:	f100 0314 	add.w	r3, r0, #20
  4036ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036be:	4a38      	ldr	r2, [pc, #224]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036c0:	79f8      	ldrb	r0, [r7, #7]
  4036c2:	69fb      	ldr	r3, [r7, #28]
  4036c4:	1c59      	adds	r1, r3, #1
  4036c6:	61f9      	str	r1, [r7, #28]
  4036c8:	781b      	ldrb	r3, [r3, #0]
  4036ca:	4619      	mov	r1, r3
  4036cc:	f100 0314 	add.w	r3, r0, #20
  4036d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036d4:	4a32      	ldr	r2, [pc, #200]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036d6:	79f8      	ldrb	r0, [r7, #7]
  4036d8:	69fb      	ldr	r3, [r7, #28]
  4036da:	1c59      	adds	r1, r3, #1
  4036dc:	61f9      	str	r1, [r7, #28]
  4036de:	781b      	ldrb	r3, [r3, #0]
  4036e0:	4619      	mov	r1, r3
  4036e2:	f100 0314 	add.w	r3, r0, #20
  4036e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036ea:	4a2d      	ldr	r2, [pc, #180]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036ec:	79f8      	ldrb	r0, [r7, #7]
  4036ee:	69fb      	ldr	r3, [r7, #28]
  4036f0:	1c59      	adds	r1, r3, #1
  4036f2:	61f9      	str	r1, [r7, #28]
  4036f4:	781b      	ldrb	r3, [r3, #0]
  4036f6:	4619      	mov	r1, r3
  4036f8:	f100 0314 	add.w	r3, r0, #20
  4036fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403700:	4a27      	ldr	r2, [pc, #156]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403702:	79f8      	ldrb	r0, [r7, #7]
  403704:	69fb      	ldr	r3, [r7, #28]
  403706:	1c59      	adds	r1, r3, #1
  403708:	61f9      	str	r1, [r7, #28]
  40370a:	781b      	ldrb	r3, [r3, #0]
  40370c:	4619      	mov	r1, r3
  40370e:	f100 0314 	add.w	r3, r0, #20
  403712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403716:	4a22      	ldr	r2, [pc, #136]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403718:	79f8      	ldrb	r0, [r7, #7]
  40371a:	69fb      	ldr	r3, [r7, #28]
  40371c:	1c59      	adds	r1, r3, #1
  40371e:	61f9      	str	r1, [r7, #28]
  403720:	781b      	ldrb	r3, [r3, #0]
  403722:	4619      	mov	r1, r3
  403724:	f100 0314 	add.w	r3, r0, #20
  403728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40372c:	4a1c      	ldr	r2, [pc, #112]	; (4037a0 <udd_ep_write_fifo+0x170>)
  40372e:	79f8      	ldrb	r0, [r7, #7]
  403730:	69fb      	ldr	r3, [r7, #28]
  403732:	1c59      	adds	r1, r3, #1
  403734:	61f9      	str	r1, [r7, #28]
  403736:	781b      	ldrb	r3, [r3, #0]
  403738:	4619      	mov	r1, r3
  40373a:	f100 0314 	add.w	r3, r0, #20
  40373e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403742:	69bb      	ldr	r3, [r7, #24]
  403744:	3b08      	subs	r3, #8
  403746:	61bb      	str	r3, [r7, #24]
  403748:	69bb      	ldr	r3, [r7, #24]
  40374a:	2b07      	cmp	r3, #7
  40374c:	d8a1      	bhi.n	403692 <udd_ep_write_fifo+0x62>
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40374e:	e00d      	b.n	40376c <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403750:	4a13      	ldr	r2, [pc, #76]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403752:	79f8      	ldrb	r0, [r7, #7]
  403754:	69fb      	ldr	r3, [r7, #28]
  403756:	1c59      	adds	r1, r3, #1
  403758:	61f9      	str	r1, [r7, #28]
  40375a:	781b      	ldrb	r3, [r3, #0]
  40375c:	4619      	mov	r1, r3
  40375e:	f100 0314 	add.w	r3, r0, #20
  403762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  403766:	69bb      	ldr	r3, [r7, #24]
  403768:	3b01      	subs	r3, #1
  40376a:	61bb      	str	r3, [r7, #24]
  40376c:	69bb      	ldr	r3, [r7, #24]
  40376e:	2b00      	cmp	r3, #0
  403770:	d1ee      	bne.n	403750 <udd_ep_write_fifo+0x120>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  403772:	693b      	ldr	r3, [r7, #16]
  403774:	7c5b      	ldrb	r3, [r3, #17]
  403776:	f3c3 0381 	ubfx	r3, r3, #2, #2
  40377a:	b2db      	uxtb	r3, r3
  40377c:	3301      	adds	r3, #1
  40377e:	f003 0303 	and.w	r3, r3, #3
  403782:	b2d9      	uxtb	r1, r3
  403784:	693a      	ldr	r2, [r7, #16]
  403786:	7c53      	ldrb	r3, [r2, #17]
  403788:	f361 0383 	bfi	r3, r1, #2, #2
  40378c:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  40378e:	7dfb      	ldrb	r3, [r7, #23]
}
  403790:	4618      	mov	r0, r3
  403792:	3724      	adds	r7, #36	; 0x24
  403794:	46bd      	mov	sp, r7
  403796:	f85d 7b04 	ldr.w	r7, [sp], #4
  40379a:	4770      	bx	lr
  40379c:	20000dc4 	.word	0x20000dc4
  4037a0:	40034000 	.word	0x40034000

004037a4 <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4037a4:	b580      	push	{r7, lr}
  4037a6:	b086      	sub	sp, #24
  4037a8:	af00      	add	r7, sp, #0
  4037aa:	4602      	mov	r2, r0
  4037ac:	460b      	mov	r3, r1
  4037ae:	71fa      	strb	r2, [r7, #7]
  4037b0:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4037b2:	79fb      	ldrb	r3, [r7, #7]
  4037b4:	1e5a      	subs	r2, r3, #1
  4037b6:	4613      	mov	r3, r2
  4037b8:	009b      	lsls	r3, r3, #2
  4037ba:	4413      	add	r3, r2
  4037bc:	009b      	lsls	r3, r3, #2
  4037be:	4a36      	ldr	r2, [pc, #216]	; (403898 <udd_ep_in_sent+0xf4>)
  4037c0:	4413      	add	r3, r2
  4037c2:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4037c4:	697b      	ldr	r3, [r7, #20]
  4037c6:	7c5b      	ldrb	r3, [r3, #17]
  4037c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4037cc:	b2db      	uxtb	r3, r3
  4037ce:	461a      	mov	r2, r3
  4037d0:	79fb      	ldrb	r3, [r7, #7]
  4037d2:	2b00      	cmp	r3, #0
  4037d4:	d002      	beq.n	4037dc <udd_ep_in_sent+0x38>
  4037d6:	79fb      	ldrb	r3, [r7, #7]
  4037d8:	2b03      	cmp	r3, #3
  4037da:	d101      	bne.n	4037e0 <udd_ep_in_sent+0x3c>
  4037dc:	2301      	movs	r3, #1
  4037de:	e000      	b.n	4037e2 <udd_ep_in_sent+0x3e>
  4037e0:	2302      	movs	r3, #2
  4037e2:	429a      	cmp	r2, r3
  4037e4:	db01      	blt.n	4037ea <udd_ep_in_sent+0x46>
		return true; // Data pending
  4037e6:	2301      	movs	r3, #1
  4037e8:	e052      	b.n	403890 <udd_ep_in_sent+0xec>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4037ea:	697b      	ldr	r3, [r7, #20]
  4037ec:	68da      	ldr	r2, [r3, #12]
  4037ee:	697b      	ldr	r3, [r7, #20]
  4037f0:	689b      	ldr	r3, [r3, #8]
  4037f2:	429a      	cmp	r2, r3
  4037f4:	d308      	bcc.n	403808 <udd_ep_in_sent+0x64>
  4037f6:	697b      	ldr	r3, [r7, #20]
  4037f8:	7c5b      	ldrb	r3, [r3, #17]
  4037fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4037fe:	b2db      	uxtb	r3, r3
  403800:	2b00      	cmp	r3, #0
  403802:	d101      	bne.n	403808 <udd_ep_in_sent+0x64>
		return false;
  403804:	2300      	movs	r3, #0
  403806:	e043      	b.n	403890 <udd_ep_in_sent+0xec>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  403808:	79fb      	ldrb	r3, [r7, #7]
  40380a:	4618      	mov	r0, r3
  40380c:	4b23      	ldr	r3, [pc, #140]	; (40389c <udd_ep_in_sent+0xf8>)
  40380e:	4798      	blx	r3
  403810:	4603      	mov	r3, r0
  403812:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  403814:	79bb      	ldrb	r3, [r7, #6]
  403816:	2b00      	cmp	r3, #0
  403818:	d01d      	beq.n	403856 <udd_ep_in_sent+0xb2>
		udd_set_transmit_ready(ep);
  40381a:	4b21      	ldr	r3, [pc, #132]	; (4038a0 <udd_ep_in_sent+0xfc>)
  40381c:	79fa      	ldrb	r2, [r7, #7]
  40381e:	320c      	adds	r2, #12
  403820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403824:	60fb      	str	r3, [r7, #12]
  403826:	68fb      	ldr	r3, [r7, #12]
  403828:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40382c:	60fb      	str	r3, [r7, #12]
  40382e:	68fb      	ldr	r3, [r7, #12]
  403830:	f043 0310 	orr.w	r3, r3, #16
  403834:	60fb      	str	r3, [r7, #12]
  403836:	4b1a      	ldr	r3, [pc, #104]	; (4038a0 <udd_ep_in_sent+0xfc>)
  403838:	79fa      	ldrb	r2, [r7, #7]
  40383a:	68f9      	ldr	r1, [r7, #12]
  40383c:	320c      	adds	r2, #12
  40383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403842:	2300      	movs	r3, #0
  403844:	60bb      	str	r3, [r7, #8]
  403846:	e003      	b.n	403850 <udd_ep_in_sent+0xac>
  403848:	bf00      	nop
  40384a:	68bb      	ldr	r3, [r7, #8]
  40384c:	3301      	adds	r3, #1
  40384e:	60bb      	str	r3, [r7, #8]
  403850:	68bb      	ldr	r3, [r7, #8]
  403852:	2b13      	cmp	r3, #19
  403854:	d9f8      	bls.n	403848 <udd_ep_in_sent+0xa4>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  403856:	7cfb      	ldrb	r3, [r7, #19]
  403858:	2b00      	cmp	r3, #0
  40385a:	d004      	beq.n	403866 <udd_ep_in_sent+0xc2>
		ptr_job->b_shortpacket = false;
  40385c:	697a      	ldr	r2, [r7, #20]
  40385e:	7c53      	ldrb	r3, [r2, #17]
  403860:	f36f 1386 	bfc	r3, #6, #1
  403864:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  403866:	697b      	ldr	r3, [r7, #20]
  403868:	68da      	ldr	r2, [r3, #12]
  40386a:	697b      	ldr	r3, [r7, #20]
  40386c:	689b      	ldr	r3, [r3, #8]
  40386e:	429a      	cmp	r2, r3
  403870:	d30d      	bcc.n	40388e <udd_ep_in_sent+0xea>
			&& (!ptr_job->b_shortpacket)) {
  403872:	697b      	ldr	r3, [r7, #20]
  403874:	7c5b      	ldrb	r3, [r3, #17]
  403876:	f3c3 1380 	ubfx	r3, r3, #6, #1
  40387a:	b2db      	uxtb	r3, r3
  40387c:	2b00      	cmp	r3, #0
  40387e:	d106      	bne.n	40388e <udd_ep_in_sent+0xea>
		ptr_job->b_buf_end = true;
  403880:	697a      	ldr	r2, [r7, #20]
  403882:	7c53      	ldrb	r3, [r2, #17]
  403884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403888:	7453      	strb	r3, [r2, #17]
		return false;
  40388a:	2300      	movs	r3, #0
  40388c:	e000      	b.n	403890 <udd_ep_in_sent+0xec>
	}
	return true; // Pending
  40388e:	2301      	movs	r3, #1
}
  403890:	4618      	mov	r0, r3
  403892:	3718      	adds	r7, #24
  403894:	46bd      	mov	sp, r7
  403896:	bd80      	pop	{r7, pc}
  403898:	20000dc4 	.word	0x20000dc4
  40389c:	00403631 	.word	0x00403631
  4038a0:	40034000 	.word	0x40034000

004038a4 <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  4038a4:	b580      	push	{r7, lr}
  4038a6:	b08a      	sub	sp, #40	; 0x28
  4038a8:	af00      	add	r7, sp, #0
  4038aa:	4603      	mov	r3, r0
  4038ac:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4038ae:	79fb      	ldrb	r3, [r7, #7]
  4038b0:	1e5a      	subs	r2, r3, #1
  4038b2:	4613      	mov	r3, r2
  4038b4:	009b      	lsls	r3, r3, #2
  4038b6:	4413      	add	r3, r2
  4038b8:	009b      	lsls	r3, r3, #2
  4038ba:	4a3a      	ldr	r2, [pc, #232]	; (4039a4 <udd_ep_out_received+0x100>)
  4038bc:	4413      	add	r3, r2
  4038be:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  4038c0:	2300      	movs	r3, #0
  4038c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4038c4:	697b      	ldr	r3, [r7, #20]
  4038c6:	689a      	ldr	r2, [r3, #8]
  4038c8:	697b      	ldr	r3, [r7, #20]
  4038ca:	68db      	ldr	r3, [r3, #12]
  4038cc:	1ad3      	subs	r3, r2, r3
  4038ce:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  4038d0:	697b      	ldr	r3, [r7, #20]
  4038d2:	8a1b      	ldrh	r3, [r3, #16]
  4038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4038d8:	b29b      	uxth	r3, r3
  4038da:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4038dc:	697b      	ldr	r3, [r7, #20]
  4038de:	685a      	ldr	r2, [r3, #4]
  4038e0:	697b      	ldr	r3, [r7, #20]
  4038e2:	68db      	ldr	r3, [r3, #12]
  4038e4:	4413      	add	r3, r2
  4038e6:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  4038e8:	2300      	movs	r3, #0
  4038ea:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  4038ec:	4b2e      	ldr	r3, [pc, #184]	; (4039a8 <udd_ep_out_received+0x104>)
  4038ee:	79fa      	ldrb	r2, [r7, #7]
  4038f0:	320c      	adds	r2, #12
  4038f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4038f6:	4b2d      	ldr	r3, [pc, #180]	; (4039ac <udd_ep_out_received+0x108>)
  4038f8:	4013      	ands	r3, r2
  4038fa:	0c1b      	lsrs	r3, r3, #16
  4038fc:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  4038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403900:	68fb      	ldr	r3, [r7, #12]
  403902:	429a      	cmp	r2, r3
  403904:	bf2c      	ite	cs
  403906:	2300      	movcs	r3, #0
  403908:	2301      	movcc	r3, #1
  40390a:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  40390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40390e:	2b00      	cmp	r3, #0
  403910:	d021      	beq.n	403956 <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  403912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403914:	693b      	ldr	r3, [r7, #16]
  403916:	429a      	cmp	r2, r3
  403918:	d303      	bcc.n	403922 <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  40391a:	693b      	ldr	r3, [r7, #16]
  40391c:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  40391e:	2301      	movs	r3, #1
  403920:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  403922:	697b      	ldr	r3, [r7, #20]
  403924:	68da      	ldr	r2, [r3, #12]
  403926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403928:	441a      	add	r2, r3
  40392a:	697b      	ldr	r3, [r7, #20]
  40392c:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  40392e:	2300      	movs	r3, #0
  403930:	623b      	str	r3, [r7, #32]
  403932:	e00c      	b.n	40394e <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  403934:	69fb      	ldr	r3, [r7, #28]
  403936:	1c5a      	adds	r2, r3, #1
  403938:	61fa      	str	r2, [r7, #28]
  40393a:	4a1b      	ldr	r2, [pc, #108]	; (4039a8 <udd_ep_out_received+0x104>)
  40393c:	79f9      	ldrb	r1, [r7, #7]
  40393e:	3114      	adds	r1, #20
  403940:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403944:	b2d2      	uxtb	r2, r2
  403946:	701a      	strb	r2, [r3, #0]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403948:	6a3b      	ldr	r3, [r7, #32]
  40394a:	3301      	adds	r3, #1
  40394c:	623b      	str	r3, [r7, #32]
  40394e:	6a3a      	ldr	r2, [r7, #32]
  403950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403952:	429a      	cmp	r2, r3
  403954:	d3ee      	bcc.n	403934 <udd_ep_out_received+0x90>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  403956:	79fb      	ldrb	r3, [r7, #7]
  403958:	4618      	mov	r0, r3
  40395a:	4b15      	ldr	r3, [pc, #84]	; (4039b0 <udd_ep_out_received+0x10c>)
  40395c:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40395e:	7efb      	ldrb	r3, [r7, #27]
  403960:	2b00      	cmp	r3, #0
  403962:	d102      	bne.n	40396a <udd_ep_out_received+0xc6>
  403964:	7afb      	ldrb	r3, [r7, #11]
  403966:	2b00      	cmp	r3, #0
  403968:	d018      	beq.n	40399c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  40396a:	4b0f      	ldr	r3, [pc, #60]	; (4039a8 <udd_ep_out_received+0x104>)
  40396c:	79fa      	ldrb	r2, [r7, #7]
  40396e:	320c      	adds	r2, #12
  403970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403974:	f003 0320 	and.w	r3, r3, #32
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403978:	2b00      	cmp	r3, #0
  40397a:	d10f      	bne.n	40399c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  40397c:	4b0a      	ldr	r3, [pc, #40]	; (4039a8 <udd_ep_out_received+0x104>)
  40397e:	79fa      	ldrb	r2, [r7, #7]
  403980:	2101      	movs	r1, #1
  403982:	fa01 f202 	lsl.w	r2, r1, r2
  403986:	615a      	str	r2, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403988:	697b      	ldr	r3, [r7, #20]
  40398a:	68da      	ldr	r2, [r3, #12]
  40398c:	697b      	ldr	r3, [r7, #20]
  40398e:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403990:	79fb      	ldrb	r3, [r7, #7]
  403992:	6978      	ldr	r0, [r7, #20]
  403994:	2100      	movs	r1, #0
  403996:	461a      	mov	r2, r3
  403998:	4b06      	ldr	r3, [pc, #24]	; (4039b4 <udd_ep_out_received+0x110>)
  40399a:	4798      	blx	r3
	}
}
  40399c:	3728      	adds	r7, #40	; 0x28
  40399e:	46bd      	mov	sp, r7
  4039a0:	bd80      	pop	{r7, pc}
  4039a2:	bf00      	nop
  4039a4:	20000dc4 	.word	0x20000dc4
  4039a8:	40034000 	.word	0x40034000
  4039ac:	07ff0000 	.word	0x07ff0000
  4039b0:	0040351d 	.word	0x0040351d
  4039b4:	004034ad 	.word	0x004034ad

004039b8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  4039b8:	b580      	push	{r7, lr}
  4039ba:	b098      	sub	sp, #96	; 0x60
  4039bc:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4039be:	2301      	movs	r3, #1
  4039c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  4039c4:	e247      	b.n	403e56 <udd_ep_interrupt+0x49e>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4039c6:	4bac      	ldr	r3, [pc, #688]	; (403c78 <udd_ep_interrupt+0x2c0>)
  4039c8:	699a      	ldr	r2, [r3, #24]
  4039ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4039ce:	2101      	movs	r1, #1
  4039d0:	fa01 f303 	lsl.w	r3, r1, r3
  4039d4:	4013      	ands	r3, r2
  4039d6:	2b00      	cmp	r3, #0
  4039d8:	d100      	bne.n	4039dc <udd_ep_interrupt+0x24>
			continue;
  4039da:	e237      	b.n	403e4c <udd_ep_interrupt+0x494>
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4039dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4039e0:	1e5a      	subs	r2, r3, #1
  4039e2:	4613      	mov	r3, r2
  4039e4:	009b      	lsls	r3, r3, #2
  4039e6:	4413      	add	r3, r2
  4039e8:	009b      	lsls	r3, r3, #2
  4039ea:	4aa4      	ldr	r2, [pc, #656]	; (403c7c <udd_ep_interrupt+0x2c4>)
  4039ec:	4413      	add	r3, r2
  4039ee:	65bb      	str	r3, [r7, #88]	; 0x58

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4039f0:	4ba1      	ldr	r3, [pc, #644]	; (403c78 <udd_ep_interrupt+0x2c0>)
  4039f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039f6:	320c      	adds	r2, #12
  4039f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039fc:	f003 0342 	and.w	r3, r3, #66	; 0x42
  403a00:	2b00      	cmp	r3, #0
  403a02:	d006      	beq.n	403a12 <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  403a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a08:	4618      	mov	r0, r3
  403a0a:	4b9d      	ldr	r3, [pc, #628]	; (403c80 <udd_ep_interrupt+0x2c8>)
  403a0c:	4798      	blx	r3
			return true;
  403a0e:	2301      	movs	r3, #1
  403a10:	e227      	b.n	403e62 <udd_ep_interrupt+0x4aa>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  403a12:	4b99      	ldr	r3, [pc, #612]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a14:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a18:	320c      	adds	r2, #12
  403a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a1e:	f003 0301 	and.w	r3, r3, #1
  403a22:	2b00      	cmp	r3, #0
  403a24:	f000 81d5 	beq.w	403dd2 <udd_ep_interrupt+0x41a>

			ptr_job->bank--;
  403a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a2a:	7c5b      	ldrb	r3, [r3, #17]
  403a2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a30:	b2db      	uxtb	r3, r3
  403a32:	3303      	adds	r3, #3
  403a34:	f003 0303 	and.w	r3, r3, #3
  403a38:	b2d9      	uxtb	r1, r3
  403a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403a3c:	7c53      	ldrb	r3, [r2, #17]
  403a3e:	f361 0383 	bfi	r3, r1, #2, #2
  403a42:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  403a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a46:	7c5b      	ldrb	r3, [r3, #17]
  403a48:	f3c3 1340 	ubfx	r3, r3, #5, #1
  403a4c:	b2db      	uxtb	r3, r3
  403a4e:	2b00      	cmp	r3, #0
  403a50:	f000 808f 	beq.w	403b72 <udd_ep_interrupt+0x1ba>
				if (ptr_job->bank) {
  403a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a56:	7c5b      	ldrb	r3, [r3, #17]
  403a58:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a5c:	b2db      	uxtb	r3, r3
  403a5e:	2b00      	cmp	r3, #0
  403a60:	d040      	beq.n	403ae4 <udd_ep_interrupt+0x12c>
					// Send remaining
					udd_set_transmit_ready(ep);
  403a62:	4b85      	ldr	r3, [pc, #532]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a64:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a68:	320c      	adds	r2, #12
  403a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a6e:	653b      	str	r3, [r7, #80]	; 0x50
  403a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403a72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a76:	653b      	str	r3, [r7, #80]	; 0x50
  403a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403a7a:	f043 0310 	orr.w	r3, r3, #16
  403a7e:	653b      	str	r3, [r7, #80]	; 0x50
  403a80:	4b7d      	ldr	r3, [pc, #500]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a82:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
  403a88:	320c      	adds	r2, #12
  403a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403a8e:	2300      	movs	r3, #0
  403a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  403a92:	e003      	b.n	403a9c <udd_ep_interrupt+0xe4>
  403a94:	bf00      	nop
  403a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403a98:	3301      	adds	r3, #1
  403a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  403a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403a9e:	2b13      	cmp	r3, #19
  403aa0:	d9f8      	bls.n	403a94 <udd_ep_interrupt+0xdc>
					udd_ack_in_sent(ep);
  403aa2:	4b75      	ldr	r3, [pc, #468]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403aa4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aa8:	320c      	adds	r2, #12
  403aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403aae:	64bb      	str	r3, [r7, #72]	; 0x48
  403ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403ab2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  403ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403aba:	f023 0301 	bic.w	r3, r3, #1
  403abe:	64bb      	str	r3, [r7, #72]	; 0x48
  403ac0:	4b6d      	ldr	r3, [pc, #436]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403ac2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403ac6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  403ac8:	320c      	adds	r2, #12
  403aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ace:	2300      	movs	r3, #0
  403ad0:	647b      	str	r3, [r7, #68]	; 0x44
  403ad2:	e003      	b.n	403adc <udd_ep_interrupt+0x124>
  403ad4:	bf00      	nop
  403ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403ad8:	3301      	adds	r3, #1
  403ada:	647b      	str	r3, [r7, #68]	; 0x44
  403adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403ade:	2b13      	cmp	r3, #19
  403ae0:	d9f8      	bls.n	403ad4 <udd_ep_interrupt+0x11c>
  403ae2:	e044      	b.n	403b6e <udd_ep_interrupt+0x1b6>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  403ae4:	4b64      	ldr	r3, [pc, #400]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403ae6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aea:	320c      	adds	r2, #12
  403aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403af0:	643b      	str	r3, [r7, #64]	; 0x40
  403af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403af4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403af8:	643b      	str	r3, [r7, #64]	; 0x40
  403afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403afc:	f023 0301 	bic.w	r3, r3, #1
  403b00:	643b      	str	r3, [r7, #64]	; 0x40
  403b02:	4b5d      	ldr	r3, [pc, #372]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b04:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
  403b0a:	320c      	adds	r2, #12
  403b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b10:	2300      	movs	r3, #0
  403b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  403b14:	e003      	b.n	403b1e <udd_ep_interrupt+0x166>
  403b16:	bf00      	nop
  403b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403b1a:	3301      	adds	r3, #1
  403b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  403b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403b20:	2b13      	cmp	r3, #19
  403b22:	d9f8      	bls.n	403b16 <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  403b24:	4b54      	ldr	r3, [pc, #336]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b2a:	320c      	adds	r2, #12
  403b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b30:	63bb      	str	r3, [r7, #56]	; 0x38
  403b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403b34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b38:	63bb      	str	r3, [r7, #56]	; 0x38
  403b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403b3c:	f043 0320 	orr.w	r3, r3, #32
  403b40:	63bb      	str	r3, [r7, #56]	; 0x38
  403b42:	4b4d      	ldr	r3, [pc, #308]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b44:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  403b4a:	320c      	adds	r2, #12
  403b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b50:	2300      	movs	r3, #0
  403b52:	637b      	str	r3, [r7, #52]	; 0x34
  403b54:	e003      	b.n	403b5e <udd_ep_interrupt+0x1a6>
  403b56:	bf00      	nop
  403b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403b5a:	3301      	adds	r3, #1
  403b5c:	637b      	str	r3, [r7, #52]	; 0x34
  403b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403b60:	2b13      	cmp	r3, #19
  403b62:	d9f8      	bls.n	403b56 <udd_ep_interrupt+0x19e>
					// Halt executed
					ptr_job->b_stall_requested = false;
  403b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403b66:	7c53      	ldrb	r3, [r2, #17]
  403b68:	f36f 1345 	bfc	r3, #5, #1
  403b6c:	7453      	strb	r3, [r2, #17]
				}
				return true;
  403b6e:	2301      	movs	r3, #1
  403b70:	e177      	b.n	403e62 <udd_ep_interrupt+0x4aa>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  403b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b74:	7c5b      	ldrb	r3, [r3, #17]
  403b76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  403b7a:	b2db      	uxtb	r3, r3
  403b7c:	2b00      	cmp	r3, #0
  403b7e:	d00f      	beq.n	403ba0 <udd_ep_interrupt+0x1e8>
				ptr_job->b_buf_end = false;
  403b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403b82:	7c53      	ldrb	r3, [r2, #17]
  403b84:	f36f 13c7 	bfc	r3, #7, #1
  403b88:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b8c:	68da      	ldr	r2, [r3, #12]
  403b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b90:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b96:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403b98:	2100      	movs	r1, #0
  403b9a:	461a      	mov	r2, r3
  403b9c:	4b39      	ldr	r3, [pc, #228]	; (403c84 <udd_ep_interrupt+0x2cc>)
  403b9e:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403ba2:	68da      	ldr	r2, [r3, #12]
  403ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403ba6:	689b      	ldr	r3, [r3, #8]
  403ba8:	429a      	cmp	r2, r3
  403baa:	d33c      	bcc.n	403c26 <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
  403bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403bae:	7c5b      	ldrb	r3, [r3, #17]
  403bb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  403bb4:	b2db      	uxtb	r3, r3
			if (ptr_job->b_buf_end) {
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403bb6:	2b00      	cmp	r3, #0
  403bb8:	d135      	bne.n	403c26 <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
					ptr_job->bank == 0) {
  403bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403bbc:	7c5b      	ldrb	r3, [r3, #17]
  403bbe:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403bc2:	b2db      	uxtb	r3, r3
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
					!ptr_job->b_shortpacket &&
  403bc4:	2b00      	cmp	r3, #0
  403bc6:	d12e      	bne.n	403c26 <udd_ep_interrupt+0x26e>
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  403bc8:	4b2f      	ldr	r3, [pc, #188]	; (403c88 <udd_ep_interrupt+0x2d0>)
  403bca:	4798      	blx	r3
  403bcc:	6578      	str	r0, [r7, #84]	; 0x54
				udd_disable_endpoint_interrupt(ep);
  403bce:	4b2a      	ldr	r3, [pc, #168]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403bd0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bd4:	2101      	movs	r1, #1
  403bd6:	fa01 f202 	lsl.w	r2, r1, r2
  403bda:	615a      	str	r2, [r3, #20]
				cpu_irq_restore(flags);
  403bdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
  403bde:	4b2b      	ldr	r3, [pc, #172]	; (403c8c <udd_ep_interrupt+0x2d4>)
  403be0:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  403be2:	4b25      	ldr	r3, [pc, #148]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403be4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403be8:	320c      	adds	r2, #12
  403bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bee:	633b      	str	r3, [r7, #48]	; 0x30
  403bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403bf2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403bf6:	633b      	str	r3, [r7, #48]	; 0x30
  403bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403bfa:	f023 0301 	bic.w	r3, r3, #1
  403bfe:	633b      	str	r3, [r7, #48]	; 0x30
  403c00:	4b1d      	ldr	r3, [pc, #116]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c02:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
  403c08:	320c      	adds	r2, #12
  403c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403c0e:	2300      	movs	r3, #0
  403c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  403c12:	e003      	b.n	403c1c <udd_ep_interrupt+0x264>
  403c14:	bf00      	nop
  403c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403c18:	3301      	adds	r3, #1
  403c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  403c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403c1e:	2b13      	cmp	r3, #19
  403c20:	d9f8      	bls.n	403c14 <udd_ep_interrupt+0x25c>
				return true;
  403c22:	2301      	movs	r3, #1
  403c24:	e11d      	b.n	403e62 <udd_ep_interrupt+0x4aa>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  403c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c2a:	2b00      	cmp	r3, #0
  403c2c:	d05e      	beq.n	403cec <udd_ep_interrupt+0x334>
  403c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c32:	2b03      	cmp	r3, #3
  403c34:	d05a      	beq.n	403cec <udd_ep_interrupt+0x334>
					&& ptr_job->bank > 0) {
  403c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403c38:	7c5b      	ldrb	r3, [r3, #17]
  403c3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403c3e:	b2db      	uxtb	r3, r3
  403c40:	2b00      	cmp	r3, #0
  403c42:	dd53      	ble.n	403cec <udd_ep_interrupt+0x334>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  403c44:	4b0c      	ldr	r3, [pc, #48]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c46:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c4a:	320c      	adds	r2, #12
  403c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403c50:	62bb      	str	r3, [r7, #40]	; 0x28
  403c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403c54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403c58:	62bb      	str	r3, [r7, #40]	; 0x28
  403c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403c5c:	f043 0310 	orr.w	r3, r3, #16
  403c60:	62bb      	str	r3, [r7, #40]	; 0x28
  403c62:	4b05      	ldr	r3, [pc, #20]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c64:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  403c6a:	320c      	adds	r2, #12
  403c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403c70:	2300      	movs	r3, #0
  403c72:	627b      	str	r3, [r7, #36]	; 0x24
  403c74:	e010      	b.n	403c98 <udd_ep_interrupt+0x2e0>
  403c76:	bf00      	nop
  403c78:	40034000 	.word	0x40034000
  403c7c:	20000dc4 	.word	0x20000dc4
  403c80:	004038a5 	.word	0x004038a5
  403c84:	004034ad 	.word	0x004034ad
  403c88:	00401e45 	.word	0x00401e45
  403c8c:	00401e9d 	.word	0x00401e9d
  403c90:	bf00      	nop
  403c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c94:	3301      	adds	r3, #1
  403c96:	627b      	str	r3, [r7, #36]	; 0x24
  403c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c9a:	2b13      	cmp	r3, #19
  403c9c:	d9f8      	bls.n	403c90 <udd_ep_interrupt+0x2d8>
				udd_ack_in_sent(ep);
  403c9e:	4b73      	ldr	r3, [pc, #460]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403ca0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403ca4:	320c      	adds	r2, #12
  403ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403caa:	623b      	str	r3, [r7, #32]
  403cac:	6a3b      	ldr	r3, [r7, #32]
  403cae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403cb2:	623b      	str	r3, [r7, #32]
  403cb4:	6a3b      	ldr	r3, [r7, #32]
  403cb6:	f023 0301 	bic.w	r3, r3, #1
  403cba:	623b      	str	r3, [r7, #32]
  403cbc:	4b6b      	ldr	r3, [pc, #428]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403cbe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403cc2:	6a39      	ldr	r1, [r7, #32]
  403cc4:	320c      	adds	r2, #12
  403cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403cca:	2300      	movs	r3, #0
  403ccc:	61fb      	str	r3, [r7, #28]
  403cce:	e003      	b.n	403cd8 <udd_ep_interrupt+0x320>
  403cd0:	bf00      	nop
  403cd2:	69fb      	ldr	r3, [r7, #28]
  403cd4:	3301      	adds	r3, #1
  403cd6:	61fb      	str	r3, [r7, #28]
  403cd8:	69fb      	ldr	r3, [r7, #28]
  403cda:	2b13      	cmp	r3, #19
  403cdc:	d9f8      	bls.n	403cd0 <udd_ep_interrupt+0x318>
				udd_ep_in_sent(ep, false);
  403cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ce2:	4618      	mov	r0, r3
  403ce4:	2100      	movs	r1, #0
  403ce6:	4b62      	ldr	r3, [pc, #392]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403ce8:	4798      	blx	r3
  403cea:	e070      	b.n	403dce <udd_ep_interrupt+0x416>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  403cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403cf0:	2b00      	cmp	r3, #0
  403cf2:	d046      	beq.n	403d82 <udd_ep_interrupt+0x3ca>
  403cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403cf8:	2b03      	cmp	r3, #3
  403cfa:	d042      	beq.n	403d82 <udd_ep_interrupt+0x3ca>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  403cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d00:	4618      	mov	r0, r3
  403d02:	2101      	movs	r1, #1
  403d04:	4b5a      	ldr	r3, [pc, #360]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d06:	4798      	blx	r3
  403d08:	4603      	mov	r3, r0
  403d0a:	f083 0301 	eor.w	r3, r3, #1
  403d0e:	b2db      	uxtb	r3, r3
  403d10:	2b00      	cmp	r3, #0
  403d12:	d00f      	beq.n	403d34 <udd_ep_interrupt+0x37c>
					ptr_job->b_buf_end = false;
  403d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403d16:	7c53      	ldrb	r3, [r2, #17]
  403d18:	f36f 13c7 	bfc	r3, #7, #1
  403d1c:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403d20:	68da      	ldr	r2, [r3, #12]
  403d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403d24:	609a      	str	r2, [r3, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403d2c:	2100      	movs	r1, #0
  403d2e:	461a      	mov	r2, r3
  403d30:	4b50      	ldr	r3, [pc, #320]	; (403e74 <udd_ep_interrupt+0x4bc>)
  403d32:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  403d34:	4b4d      	ldr	r3, [pc, #308]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d36:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d3a:	320c      	adds	r2, #12
  403d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403d40:	61bb      	str	r3, [r7, #24]
  403d42:	69bb      	ldr	r3, [r7, #24]
  403d44:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d48:	61bb      	str	r3, [r7, #24]
  403d4a:	69bb      	ldr	r3, [r7, #24]
  403d4c:	f023 0301 	bic.w	r3, r3, #1
  403d50:	61bb      	str	r3, [r7, #24]
  403d52:	4b46      	ldr	r3, [pc, #280]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d54:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d58:	69b9      	ldr	r1, [r7, #24]
  403d5a:	320c      	adds	r2, #12
  403d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403d60:	2300      	movs	r3, #0
  403d62:	617b      	str	r3, [r7, #20]
  403d64:	e003      	b.n	403d6e <udd_ep_interrupt+0x3b6>
  403d66:	bf00      	nop
  403d68:	697b      	ldr	r3, [r7, #20]
  403d6a:	3301      	adds	r3, #1
  403d6c:	617b      	str	r3, [r7, #20]
  403d6e:	697b      	ldr	r3, [r7, #20]
  403d70:	2b13      	cmp	r3, #19
  403d72:	d9f8      	bls.n	403d66 <udd_ep_interrupt+0x3ae>
				udd_ep_in_sent(ep, false);
  403d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d78:	4618      	mov	r0, r3
  403d7a:	2100      	movs	r1, #0
  403d7c:	4b3c      	ldr	r3, [pc, #240]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d7e:	4798      	blx	r3
  403d80:	e025      	b.n	403dce <udd_ep_interrupt+0x416>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  403d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d86:	4618      	mov	r0, r3
  403d88:	2101      	movs	r1, #1
  403d8a:	4b39      	ldr	r3, [pc, #228]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d8c:	4798      	blx	r3
				udd_ack_in_sent(ep);
  403d8e:	4b37      	ldr	r3, [pc, #220]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d90:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d94:	320c      	adds	r2, #12
  403d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403d9a:	613b      	str	r3, [r7, #16]
  403d9c:	693b      	ldr	r3, [r7, #16]
  403d9e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403da2:	613b      	str	r3, [r7, #16]
  403da4:	693b      	ldr	r3, [r7, #16]
  403da6:	f023 0301 	bic.w	r3, r3, #1
  403daa:	613b      	str	r3, [r7, #16]
  403dac:	4b2f      	ldr	r3, [pc, #188]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403dae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403db2:	6939      	ldr	r1, [r7, #16]
  403db4:	320c      	adds	r2, #12
  403db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403dba:	2300      	movs	r3, #0
  403dbc:	60fb      	str	r3, [r7, #12]
  403dbe:	e003      	b.n	403dc8 <udd_ep_interrupt+0x410>
  403dc0:	bf00      	nop
  403dc2:	68fb      	ldr	r3, [r7, #12]
  403dc4:	3301      	adds	r3, #1
  403dc6:	60fb      	str	r3, [r7, #12]
  403dc8:	68fb      	ldr	r3, [r7, #12]
  403dca:	2b13      	cmp	r3, #19
  403dcc:	d9f8      	bls.n	403dc0 <udd_ep_interrupt+0x408>
			}
			return true;
  403dce:	2301      	movs	r3, #1
  403dd0:	e047      	b.n	403e62 <udd_ep_interrupt+0x4aa>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  403dd2:	4b26      	ldr	r3, [pc, #152]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403dd4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403dd8:	320c      	adds	r2, #12
  403dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403dde:	f003 0308 	and.w	r3, r3, #8
  403de2:	2b00      	cmp	r3, #0
  403de4:	d032      	beq.n	403e4c <udd_ep_interrupt+0x494>
			udd_ack_stall(ep);
  403de6:	4b21      	ldr	r3, [pc, #132]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403de8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403dec:	320c      	adds	r2, #12
  403dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403df2:	60bb      	str	r3, [r7, #8]
  403df4:	68bb      	ldr	r3, [r7, #8]
  403df6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403dfa:	60bb      	str	r3, [r7, #8]
  403dfc:	68bb      	ldr	r3, [r7, #8]
  403dfe:	f023 0308 	bic.w	r3, r3, #8
  403e02:	60bb      	str	r3, [r7, #8]
  403e04:	4b19      	ldr	r3, [pc, #100]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e06:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e0a:	68b9      	ldr	r1, [r7, #8]
  403e0c:	320c      	adds	r2, #12
  403e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403e12:	2300      	movs	r3, #0
  403e14:	607b      	str	r3, [r7, #4]
  403e16:	e003      	b.n	403e20 <udd_ep_interrupt+0x468>
  403e18:	bf00      	nop
  403e1a:	687b      	ldr	r3, [r7, #4]
  403e1c:	3301      	adds	r3, #1
  403e1e:	607b      	str	r3, [r7, #4]
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	2b13      	cmp	r3, #19
  403e24:	d9f8      	bls.n	403e18 <udd_ep_interrupt+0x460>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403e26:	4b11      	ldr	r3, [pc, #68]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e28:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e2c:	320c      	adds	r2, #12
  403e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403e32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403e3a:	d005      	beq.n	403e48 <udd_ep_interrupt+0x490>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403e3c:	4b0b      	ldr	r3, [pc, #44]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e3e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e42:	320c      	adds	r2, #12
  403e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			}
			return true;
  403e48:	2301      	movs	r3, #1
  403e4a:	e00a      	b.n	403e62 <udd_ep_interrupt+0x4aa>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403e50:	3301      	adds	r3, #1
  403e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  403e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403e5a:	2b03      	cmp	r3, #3
  403e5c:	f67f adb3 	bls.w	4039c6 <udd_ep_interrupt+0xe>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
			}
			return true;
		}
	}
	return false;
  403e60:	2300      	movs	r3, #0
}
  403e62:	4618      	mov	r0, r3
  403e64:	3760      	adds	r7, #96	; 0x60
  403e66:	46bd      	mov	sp, r7
  403e68:	bd80      	pop	{r7, pc}
  403e6a:	bf00      	nop
  403e6c:	40034000 	.word	0x40034000
  403e70:	004037a5 	.word	0x004037a5
  403e74:	004034ad 	.word	0x004034ad

00403e78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403e78:	b480      	push	{r7}
  403e7a:	b083      	sub	sp, #12
  403e7c:	af00      	add	r7, sp, #0
  403e7e:	4603      	mov	r3, r0
  403e80:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403e82:	4b08      	ldr	r3, [pc, #32]	; (403ea4 <NVIC_EnableIRQ+0x2c>)
  403e84:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403e88:	0952      	lsrs	r2, r2, #5
  403e8a:	79f9      	ldrb	r1, [r7, #7]
  403e8c:	f001 011f 	and.w	r1, r1, #31
  403e90:	2001      	movs	r0, #1
  403e92:	fa00 f101 	lsl.w	r1, r0, r1
  403e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403e9a:	370c      	adds	r7, #12
  403e9c:	46bd      	mov	sp, r7
  403e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ea2:	4770      	bx	lr
  403ea4:	e000e100 	.word	0xe000e100

00403ea8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  403ea8:	b480      	push	{r7}
  403eaa:	b083      	sub	sp, #12
  403eac:	af00      	add	r7, sp, #0
  403eae:	4603      	mov	r3, r0
  403eb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403eb2:	4b09      	ldr	r3, [pc, #36]	; (403ed8 <NVIC_DisableIRQ+0x30>)
  403eb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403eb8:	0952      	lsrs	r2, r2, #5
  403eba:	79f9      	ldrb	r1, [r7, #7]
  403ebc:	f001 011f 	and.w	r1, r1, #31
  403ec0:	2001      	movs	r0, #1
  403ec2:	fa00 f101 	lsl.w	r1, r0, r1
  403ec6:	3220      	adds	r2, #32
  403ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403ecc:	370c      	adds	r7, #12
  403ece:	46bd      	mov	sp, r7
  403ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ed4:	4770      	bx	lr
  403ed6:	bf00      	nop
  403ed8:	e000e100 	.word	0xe000e100

00403edc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  403edc:	b480      	push	{r7}
  403ede:	b083      	sub	sp, #12
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	4603      	mov	r3, r0
  403ee4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403ee6:	4b09      	ldr	r3, [pc, #36]	; (403f0c <NVIC_ClearPendingIRQ+0x30>)
  403ee8:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403eec:	0952      	lsrs	r2, r2, #5
  403eee:	79f9      	ldrb	r1, [r7, #7]
  403ef0:	f001 011f 	and.w	r1, r1, #31
  403ef4:	2001      	movs	r0, #1
  403ef6:	fa00 f101 	lsl.w	r1, r0, r1
  403efa:	3260      	adds	r2, #96	; 0x60
  403efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403f00:	370c      	adds	r7, #12
  403f02:	46bd      	mov	sp, r7
  403f04:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f08:	4770      	bx	lr
  403f0a:	bf00      	nop
  403f0c:	e000e100 	.word	0xe000e100

00403f10 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403f10:	b480      	push	{r7}
  403f12:	b083      	sub	sp, #12
  403f14:	af00      	add	r7, sp, #0
  403f16:	4603      	mov	r3, r0
  403f18:	6039      	str	r1, [r7, #0]
  403f1a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  403f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f20:	2b00      	cmp	r3, #0
  403f22:	da0b      	bge.n	403f3c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403f24:	490d      	ldr	r1, [pc, #52]	; (403f5c <NVIC_SetPriority+0x4c>)
  403f26:	79fb      	ldrb	r3, [r7, #7]
  403f28:	f003 030f 	and.w	r3, r3, #15
  403f2c:	3b04      	subs	r3, #4
  403f2e:	683a      	ldr	r2, [r7, #0]
  403f30:	b2d2      	uxtb	r2, r2
  403f32:	0112      	lsls	r2, r2, #4
  403f34:	b2d2      	uxtb	r2, r2
  403f36:	440b      	add	r3, r1
  403f38:	761a      	strb	r2, [r3, #24]
  403f3a:	e009      	b.n	403f50 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403f3c:	4908      	ldr	r1, [pc, #32]	; (403f60 <NVIC_SetPriority+0x50>)
  403f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f42:	683a      	ldr	r2, [r7, #0]
  403f44:	b2d2      	uxtb	r2, r2
  403f46:	0112      	lsls	r2, r2, #4
  403f48:	b2d2      	uxtb	r2, r2
  403f4a:	440b      	add	r3, r1
  403f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403f50:	370c      	adds	r7, #12
  403f52:	46bd      	mov	sp, r7
  403f54:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f58:	4770      	bx	lr
  403f5a:	bf00      	nop
  403f5c:	e000ed00 	.word	0xe000ed00
  403f60:	e000e100 	.word	0xe000e100

00403f64 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403f64:	b480      	push	{r7}
  403f66:	b083      	sub	sp, #12
  403f68:	af00      	add	r7, sp, #0
  403f6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403f6c:	687b      	ldr	r3, [r7, #4]
  403f6e:	2b07      	cmp	r3, #7
  403f70:	d825      	bhi.n	403fbe <osc_get_rate+0x5a>
  403f72:	a201      	add	r2, pc, #4	; (adr r2, 403f78 <osc_get_rate+0x14>)
  403f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403f78:	00403f99 	.word	0x00403f99
  403f7c:	00403f9f 	.word	0x00403f9f
  403f80:	00403fa5 	.word	0x00403fa5
  403f84:	00403fab 	.word	0x00403fab
  403f88:	00403faf 	.word	0x00403faf
  403f8c:	00403fb3 	.word	0x00403fb3
  403f90:	00403fb7 	.word	0x00403fb7
  403f94:	00403fbb 	.word	0x00403fbb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403f98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403f9c:	e010      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403fa2:	e00d      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403fa8:	e00a      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403faa:	4b08      	ldr	r3, [pc, #32]	; (403fcc <osc_get_rate+0x68>)
  403fac:	e008      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403fae:	4b08      	ldr	r3, [pc, #32]	; (403fd0 <osc_get_rate+0x6c>)
  403fb0:	e006      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403fb2:	4b08      	ldr	r3, [pc, #32]	; (403fd4 <osc_get_rate+0x70>)
  403fb4:	e004      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403fb6:	4b07      	ldr	r3, [pc, #28]	; (403fd4 <osc_get_rate+0x70>)
  403fb8:	e002      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403fba:	4b06      	ldr	r3, [pc, #24]	; (403fd4 <osc_get_rate+0x70>)
  403fbc:	e000      	b.n	403fc0 <osc_get_rate+0x5c>
	}

	return 0;
  403fbe:	2300      	movs	r3, #0
}
  403fc0:	4618      	mov	r0, r3
  403fc2:	370c      	adds	r7, #12
  403fc4:	46bd      	mov	sp, r7
  403fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fca:	4770      	bx	lr
  403fcc:	003d0900 	.word	0x003d0900
  403fd0:	007a1200 	.word	0x007a1200
  403fd4:	00b71b00 	.word	0x00b71b00

00403fd8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403fd8:	b580      	push	{r7, lr}
  403fda:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403fdc:	2006      	movs	r0, #6
  403fde:	4b04      	ldr	r3, [pc, #16]	; (403ff0 <sysclk_get_main_hz+0x18>)
  403fe0:	4798      	blx	r3
  403fe2:	4602      	mov	r2, r0
  403fe4:	4613      	mov	r3, r2
  403fe6:	011b      	lsls	r3, r3, #4
  403fe8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403fea:	4618      	mov	r0, r3
  403fec:	bd80      	pop	{r7, pc}
  403fee:	bf00      	nop
  403ff0:	00403f65 	.word	0x00403f65

00403ff4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  403ff4:	b580      	push	{r7, lr}
  403ff6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403ff8:	4b02      	ldr	r3, [pc, #8]	; (404004 <sysclk_get_peripheral_hz+0x10>)
  403ffa:	4798      	blx	r3
  403ffc:	4603      	mov	r3, r0
  403ffe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404000:	4618      	mov	r0, r3
  404002:	bd80      	pop	{r7, pc}
  404004:	00403fd9 	.word	0x00403fd9

00404008 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  404008:	b580      	push	{r7, lr}
  40400a:	b082      	sub	sp, #8
  40400c:	af00      	add	r7, sp, #0
  40400e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404010:	6878      	ldr	r0, [r7, #4]
  404012:	4b02      	ldr	r3, [pc, #8]	; (40401c <sysclk_enable_peripheral_clock+0x14>)
  404014:	4798      	blx	r3
}
  404016:	3708      	adds	r7, #8
  404018:	46bd      	mov	sp, r7
  40401a:	bd80      	pop	{r7, pc}
  40401c:	0040b4a1 	.word	0x0040b4a1

00404020 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  404020:	b580      	push	{r7, lr}
  404022:	b08c      	sub	sp, #48	; 0x30
  404024:	af00      	add	r7, sp, #0
  404026:	6078      	str	r0, [r7, #4]
  404028:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = 120000000;//sysclk_get_peripheral_hz();
  40402a:	4b25      	ldr	r3, [pc, #148]	; (4040c0 <usart_serial_init+0xa0>)
  40402c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40402e:	683b      	ldr	r3, [r7, #0]
  404030:	681b      	ldr	r3, [r3, #0]
  404032:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  404034:	683b      	ldr	r3, [r7, #0]
  404036:	689b      	ldr	r3, [r3, #8]
  404038:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40403a:	683b      	ldr	r3, [r7, #0]
  40403c:	681b      	ldr	r3, [r3, #0]
  40403e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  404040:	683b      	ldr	r3, [r7, #0]
  404042:	685b      	ldr	r3, [r3, #4]
  404044:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  404046:	683b      	ldr	r3, [r7, #0]
  404048:	689b      	ldr	r3, [r3, #8]
  40404a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40404c:	683b      	ldr	r3, [r7, #0]
  40404e:	7b1b      	ldrb	r3, [r3, #12]
  404050:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404052:	2300      	movs	r3, #0
  404054:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404056:	687a      	ldr	r2, [r7, #4]
  404058:	4b1a      	ldr	r3, [pc, #104]	; (4040c4 <usart_serial_init+0xa4>)
  40405a:	429a      	cmp	r2, r3
  40405c:	d108      	bne.n	404070 <usart_serial_init+0x50>
		sysclk_enable_peripheral_clock(ID_UART0);
  40405e:	2008      	movs	r0, #8
  404060:	4b19      	ldr	r3, [pc, #100]	; (4040c8 <usart_serial_init+0xa8>)
  404062:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  404064:	f107 0324 	add.w	r3, r7, #36	; 0x24
  404068:	6878      	ldr	r0, [r7, #4]
  40406a:	4619      	mov	r1, r3
  40406c:	4b17      	ldr	r3, [pc, #92]	; (4040cc <usart_serial_init+0xac>)
  40406e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404070:	687a      	ldr	r2, [r7, #4]
  404072:	4b17      	ldr	r3, [pc, #92]	; (4040d0 <usart_serial_init+0xb0>)
  404074:	429a      	cmp	r2, r3
  404076:	d108      	bne.n	40408a <usart_serial_init+0x6a>
		sysclk_enable_peripheral_clock(ID_UART1);
  404078:	2009      	movs	r0, #9
  40407a:	4b13      	ldr	r3, [pc, #76]	; (4040c8 <usart_serial_init+0xa8>)
  40407c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40407e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  404082:	6878      	ldr	r0, [r7, #4]
  404084:	4619      	mov	r1, r3
  404086:	4b11      	ldr	r3, [pc, #68]	; (4040cc <usart_serial_init+0xac>)
  404088:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40408a:	687a      	ldr	r2, [r7, #4]
  40408c:	4b11      	ldr	r3, [pc, #68]	; (4040d4 <usart_serial_init+0xb4>)
  40408e:	429a      	cmp	r2, r3
  404090:	d112      	bne.n	4040b8 <usart_serial_init+0x98>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  404092:	200e      	movs	r0, #14
  404094:	4b0c      	ldr	r3, [pc, #48]	; (4040c8 <usart_serial_init+0xa8>)
  404096:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404098:	4b0f      	ldr	r3, [pc, #60]	; (4040d8 <usart_serial_init+0xb8>)
  40409a:	4798      	blx	r3
  40409c:	4603      	mov	r3, r0
  40409e:	f107 020c 	add.w	r2, r7, #12
  4040a2:	6878      	ldr	r0, [r7, #4]
  4040a4:	4611      	mov	r1, r2
  4040a6:	461a      	mov	r2, r3
  4040a8:	4b0c      	ldr	r3, [pc, #48]	; (4040dc <usart_serial_init+0xbc>)
  4040aa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4040ac:	6878      	ldr	r0, [r7, #4]
  4040ae:	4b0c      	ldr	r3, [pc, #48]	; (4040e0 <usart_serial_init+0xc0>)
  4040b0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4040b2:	6878      	ldr	r0, [r7, #4]
  4040b4:	4b0b      	ldr	r3, [pc, #44]	; (4040e4 <usart_serial_init+0xc4>)
  4040b6:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4040b8:	3730      	adds	r7, #48	; 0x30
  4040ba:	46bd      	mov	sp, r7
  4040bc:	bd80      	pop	{r7, pc}
  4040be:	bf00      	nop
  4040c0:	07270e00 	.word	0x07270e00
  4040c4:	400e0600 	.word	0x400e0600
  4040c8:	00404009 	.word	0x00404009
  4040cc:	0040a579 	.word	0x0040a579
  4040d0:	400e0800 	.word	0x400e0800
  4040d4:	40024000 	.word	0x40024000
  4040d8:	00403ff5 	.word	0x00403ff5
  4040dc:	00406835 	.word	0x00406835
  4040e0:	004068b9 	.word	0x004068b9
  4040e4:	004068e9 	.word	0x004068e9

004040e8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4040e8:	b580      	push	{r7, lr}
  4040ea:	b082      	sub	sp, #8
  4040ec:	af00      	add	r7, sp, #0
  4040ee:	6078      	str	r0, [r7, #4]
  4040f0:	460b      	mov	r3, r1
  4040f2:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4040f4:	687a      	ldr	r2, [r7, #4]
  4040f6:	4b18      	ldr	r3, [pc, #96]	; (404158 <usart_serial_putchar+0x70>)
  4040f8:	429a      	cmp	r2, r3
  4040fa:	d10a      	bne.n	404112 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4040fc:	bf00      	nop
  4040fe:	78fb      	ldrb	r3, [r7, #3]
  404100:	6878      	ldr	r0, [r7, #4]
  404102:	4619      	mov	r1, r3
  404104:	4b15      	ldr	r3, [pc, #84]	; (40415c <usart_serial_putchar+0x74>)
  404106:	4798      	blx	r3
  404108:	4603      	mov	r3, r0
  40410a:	2b00      	cmp	r3, #0
  40410c:	d1f7      	bne.n	4040fe <usart_serial_putchar+0x16>
		return 1;
  40410e:	2301      	movs	r3, #1
  404110:	e01e      	b.n	404150 <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404112:	687a      	ldr	r2, [r7, #4]
  404114:	4b12      	ldr	r3, [pc, #72]	; (404160 <usart_serial_putchar+0x78>)
  404116:	429a      	cmp	r2, r3
  404118:	d10a      	bne.n	404130 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40411a:	bf00      	nop
  40411c:	78fb      	ldrb	r3, [r7, #3]
  40411e:	6878      	ldr	r0, [r7, #4]
  404120:	4619      	mov	r1, r3
  404122:	4b0e      	ldr	r3, [pc, #56]	; (40415c <usart_serial_putchar+0x74>)
  404124:	4798      	blx	r3
  404126:	4603      	mov	r3, r0
  404128:	2b00      	cmp	r3, #0
  40412a:	d1f7      	bne.n	40411c <usart_serial_putchar+0x34>
		return 1;
  40412c:	2301      	movs	r3, #1
  40412e:	e00f      	b.n	404150 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404130:	687a      	ldr	r2, [r7, #4]
  404132:	4b0c      	ldr	r3, [pc, #48]	; (404164 <usart_serial_putchar+0x7c>)
  404134:	429a      	cmp	r2, r3
  404136:	d10a      	bne.n	40414e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  404138:	bf00      	nop
  40413a:	78fb      	ldrb	r3, [r7, #3]
  40413c:	6878      	ldr	r0, [r7, #4]
  40413e:	4619      	mov	r1, r3
  404140:	4b09      	ldr	r3, [pc, #36]	; (404168 <usart_serial_putchar+0x80>)
  404142:	4798      	blx	r3
  404144:	4603      	mov	r3, r0
  404146:	2b00      	cmp	r3, #0
  404148:	d1f7      	bne.n	40413a <usart_serial_putchar+0x52>
		return 1;
  40414a:	2301      	movs	r3, #1
  40414c:	e000      	b.n	404150 <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40414e:	2300      	movs	r3, #0
}
  404150:	4618      	mov	r0, r3
  404152:	3708      	adds	r7, #8
  404154:	46bd      	mov	sp, r7
  404156:	bd80      	pop	{r7, pc}
  404158:	400e0600 	.word	0x400e0600
  40415c:	0040a629 	.word	0x0040a629
  404160:	400e0800 	.word	0x400e0800
  404164:	40024000 	.word	0x40024000
  404168:	004069a5 	.word	0x004069a5

0040416c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40416c:	b580      	push	{r7, lr}
  40416e:	b084      	sub	sp, #16
  404170:	af00      	add	r7, sp, #0
  404172:	6078      	str	r0, [r7, #4]
  404174:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  404176:	2300      	movs	r3, #0
  404178:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40417a:	687a      	ldr	r2, [r7, #4]
  40417c:	4b15      	ldr	r3, [pc, #84]	; (4041d4 <usart_serial_getchar+0x68>)
  40417e:	429a      	cmp	r2, r3
  404180:	d107      	bne.n	404192 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  404182:	bf00      	nop
  404184:	6878      	ldr	r0, [r7, #4]
  404186:	6839      	ldr	r1, [r7, #0]
  404188:	4b13      	ldr	r3, [pc, #76]	; (4041d8 <usart_serial_getchar+0x6c>)
  40418a:	4798      	blx	r3
  40418c:	4603      	mov	r3, r0
  40418e:	2b00      	cmp	r3, #0
  404190:	d1f8      	bne.n	404184 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404192:	687a      	ldr	r2, [r7, #4]
  404194:	4b11      	ldr	r3, [pc, #68]	; (4041dc <usart_serial_getchar+0x70>)
  404196:	429a      	cmp	r2, r3
  404198:	d107      	bne.n	4041aa <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40419a:	bf00      	nop
  40419c:	6878      	ldr	r0, [r7, #4]
  40419e:	6839      	ldr	r1, [r7, #0]
  4041a0:	4b0d      	ldr	r3, [pc, #52]	; (4041d8 <usart_serial_getchar+0x6c>)
  4041a2:	4798      	blx	r3
  4041a4:	4603      	mov	r3, r0
  4041a6:	2b00      	cmp	r3, #0
  4041a8:	d1f8      	bne.n	40419c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4041aa:	687a      	ldr	r2, [r7, #4]
  4041ac:	4b0c      	ldr	r3, [pc, #48]	; (4041e0 <usart_serial_getchar+0x74>)
  4041ae:	429a      	cmp	r2, r3
  4041b0:	d10d      	bne.n	4041ce <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  4041b2:	bf00      	nop
  4041b4:	f107 030c 	add.w	r3, r7, #12
  4041b8:	6878      	ldr	r0, [r7, #4]
  4041ba:	4619      	mov	r1, r3
  4041bc:	4b09      	ldr	r3, [pc, #36]	; (4041e4 <usart_serial_getchar+0x78>)
  4041be:	4798      	blx	r3
  4041c0:	4603      	mov	r3, r0
  4041c2:	2b00      	cmp	r3, #0
  4041c4:	d1f6      	bne.n	4041b4 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  4041c6:	68fb      	ldr	r3, [r7, #12]
  4041c8:	b2da      	uxtb	r2, r3
  4041ca:	683b      	ldr	r3, [r7, #0]
  4041cc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4041ce:	3710      	adds	r7, #16
  4041d0:	46bd      	mov	sp, r7
  4041d2:	bd80      	pop	{r7, pc}
  4041d4:	400e0600 	.word	0x400e0600
  4041d8:	0040a659 	.word	0x0040a659
  4041dc:	400e0800 	.word	0x400e0800
  4041e0:	40024000 	.word	0x40024000
  4041e4:	004069d9 	.word	0x004069d9

004041e8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4041e8:	b580      	push	{r7, lr}
  4041ea:	b082      	sub	sp, #8
  4041ec:	af00      	add	r7, sp, #0
  4041ee:	6078      	str	r0, [r7, #4]
  4041f0:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4041f2:	4b0f      	ldr	r3, [pc, #60]	; (404230 <stdio_serial_init+0x48>)
  4041f4:	687a      	ldr	r2, [r7, #4]
  4041f6:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4041f8:	4b0e      	ldr	r3, [pc, #56]	; (404234 <stdio_serial_init+0x4c>)
  4041fa:	4a0f      	ldr	r2, [pc, #60]	; (404238 <stdio_serial_init+0x50>)
  4041fc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4041fe:	4b0f      	ldr	r3, [pc, #60]	; (40423c <stdio_serial_init+0x54>)
  404200:	4a0f      	ldr	r2, [pc, #60]	; (404240 <stdio_serial_init+0x58>)
  404202:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  404204:	6878      	ldr	r0, [r7, #4]
  404206:	6839      	ldr	r1, [r7, #0]
  404208:	4b0e      	ldr	r3, [pc, #56]	; (404244 <stdio_serial_init+0x5c>)
  40420a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40420c:	4b0e      	ldr	r3, [pc, #56]	; (404248 <stdio_serial_init+0x60>)
  40420e:	681b      	ldr	r3, [r3, #0]
  404210:	689b      	ldr	r3, [r3, #8]
  404212:	4618      	mov	r0, r3
  404214:	2100      	movs	r1, #0
  404216:	4b0d      	ldr	r3, [pc, #52]	; (40424c <stdio_serial_init+0x64>)
  404218:	4798      	blx	r3
	setbuf(stdin, NULL);
  40421a:	4b0b      	ldr	r3, [pc, #44]	; (404248 <stdio_serial_init+0x60>)
  40421c:	681b      	ldr	r3, [r3, #0]
  40421e:	685b      	ldr	r3, [r3, #4]
  404220:	4618      	mov	r0, r3
  404222:	2100      	movs	r1, #0
  404224:	4b09      	ldr	r3, [pc, #36]	; (40424c <stdio_serial_init+0x64>)
  404226:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  404228:	3708      	adds	r7, #8
  40422a:	46bd      	mov	sp, r7
  40422c:	bd80      	pop	{r7, pc}
  40422e:	bf00      	nop
  404230:	200099c0 	.word	0x200099c0
  404234:	200099bc 	.word	0x200099bc
  404238:	004040e9 	.word	0x004040e9
  40423c:	20008968 	.word	0x20008968
  404240:	0040416d 	.word	0x0040416d
  404244:	00404021 	.word	0x00404021
  404248:	20000798 	.word	0x20000798
  40424c:	0040c92d 	.word	0x0040c92d

00404250 <configure_console>:

/**
 * \brief Configure the console UART for using printf.
 */
static void configure_console(void)
{
  404250:	b590      	push	{r4, r7, lr}
  404252:	b085      	sub	sp, #20
  404254:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = 
  404256:	4b0a      	ldr	r3, [pc, #40]	; (404280 <configure_console+0x30>)
  404258:	463c      	mov	r4, r7
  40425a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40425c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(UART0, &usart_serial_options);
  404260:	463b      	mov	r3, r7
  404262:	4808      	ldr	r0, [pc, #32]	; (404284 <configure_console+0x34>)
  404264:	4619      	mov	r1, r3
  404266:	4b08      	ldr	r3, [pc, #32]	; (404288 <configure_console+0x38>)
  404268:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  40426a:	4b08      	ldr	r3, [pc, #32]	; (40428c <configure_console+0x3c>)
  40426c:	681b      	ldr	r3, [r3, #0]
  40426e:	689b      	ldr	r3, [r3, #8]
  404270:	4618      	mov	r0, r3
  404272:	2100      	movs	r1, #0
  404274:	4b06      	ldr	r3, [pc, #24]	; (404290 <configure_console+0x40>)
  404276:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  404278:	3714      	adds	r7, #20
  40427a:	46bd      	mov	sp, r7
  40427c:	bd90      	pop	{r4, r7, pc}
  40427e:	bf00      	nop
  404280:	00415904 	.word	0x00415904
  404284:	400e0600 	.word	0x400e0600
  404288:	004041e9 	.word	0x004041e9
  40428c:	20000798 	.word	0x20000798
  404290:	0040c92d 	.word	0x0040c92d

00404294 <brd_board_init>:

void brd_board_init()
{
  404294:	b580      	push	{r7, lr}
  404296:	af00      	add	r7, sp, #0
	//configure the interrupt handlers first. 
	brd_enableWatchdog();
  404298:	4b18      	ldr	r3, [pc, #96]	; (4042fc <brd_board_init+0x68>)
  40429a:	4798      	blx	r3
	//configure the gpio
	drv_gpio_initializeAll();
  40429c:	4b18      	ldr	r3, [pc, #96]	; (404300 <brd_board_init+0x6c>)
  40429e:	4798      	blx	r3
	//configure LED driver
	drv_led_init(&ledConfiguration);
  4042a0:	4818      	ldr	r0, [pc, #96]	; (404304 <brd_board_init+0x70>)
  4042a2:	4b19      	ldr	r3, [pc, #100]	; (404308 <brd_board_init+0x74>)
  4042a4:	4798      	blx	r3
	//Set LED white to indicate power on
	drv_led_set(DRV_LED_WHITE,DRV_LED_SOLID);
  4042a6:	2004      	movs	r0, #4
  4042a8:	2101      	movs	r1, #1
  4042aa:	4b18      	ldr	r3, [pc, #96]	; (40430c <brd_board_init+0x78>)
  4042ac:	4798      	blx	r3
	vTaskDelay(200);
  4042ae:	20c8      	movs	r0, #200	; 0xc8
  4042b0:	4b17      	ldr	r3, [pc, #92]	; (404310 <brd_board_init+0x7c>)
  4042b2:	4798      	blx	r3
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4042b4:	2000      	movs	r0, #0
  4042b6:	4b17      	ldr	r3, [pc, #92]	; (404314 <brd_board_init+0x80>)
  4042b8:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  4042ba:	bf00      	nop
  4042bc:	4b16      	ldr	r3, [pc, #88]	; (404318 <brd_board_init+0x84>)
  4042be:	4798      	blx	r3
  4042c0:	4603      	mov	r3, r0
  4042c2:	2b00      	cmp	r3, #0
  4042c4:	d0fa      	beq.n	4042bc <brd_board_init+0x28>
	rtc_set_hour_mode(RTC, 0);
  4042c6:	4815      	ldr	r0, [pc, #84]	; (40431c <brd_board_init+0x88>)
  4042c8:	2100      	movs	r1, #0
  4042ca:	4b15      	ldr	r3, [pc, #84]	; (404320 <brd_board_init+0x8c>)
  4042cc:	4798      	blx	r3
	rtc_clear_date_alarm(RTC);
  4042ce:	4813      	ldr	r0, [pc, #76]	; (40431c <brd_board_init+0x88>)
  4042d0:	4b14      	ldr	r3, [pc, #80]	; (404324 <brd_board_init+0x90>)
  4042d2:	4798      	blx	r3
	rtc_clear_time_alarm(RTC);
  4042d4:	4811      	ldr	r0, [pc, #68]	; (40431c <brd_board_init+0x88>)
  4042d6:	4b14      	ldr	r3, [pc, #80]	; (404328 <brd_board_init+0x94>)
  4042d8:	4798      	blx	r3
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  4042da:	2007      	movs	r0, #7
  4042dc:	2101      	movs	r1, #1
  4042de:	4b0b      	ldr	r3, [pc, #44]	; (40430c <brd_board_init+0x78>)
  4042e0:	4798      	blx	r3
	brd_initAllUarts();
  4042e2:	4b12      	ldr	r3, [pc, #72]	; (40432c <brd_board_init+0x98>)
  4042e4:	4798      	blx	r3
	configure_console();
  4042e6:	4b12      	ldr	r3, [pc, #72]	; (404330 <brd_board_init+0x9c>)
  4042e8:	4798      	blx	r3
	//try to configure the USB
	udc_start(); 
  4042ea:	4b12      	ldr	r3, [pc, #72]	; (404334 <brd_board_init+0xa0>)
  4042ec:	4798      	blx	r3
	drv_i2c_init(&twiConfig[0]);
  4042ee:	4812      	ldr	r0, [pc, #72]	; (404338 <brd_board_init+0xa4>)
  4042f0:	4b12      	ldr	r3, [pc, #72]	; (40433c <brd_board_init+0xa8>)
  4042f2:	4798      	blx	r3
	ltc2941Init(&ltc2941Config);
  4042f4:	4812      	ldr	r0, [pc, #72]	; (404340 <brd_board_init+0xac>)
  4042f6:	4b13      	ldr	r3, [pc, #76]	; (404344 <brd_board_init+0xb0>)
  4042f8:	4798      	blx	r3
}
  4042fa:	bd80      	pop	{r7, pc}
  4042fc:	004043bd 	.word	0x004043bd
  404300:	00405265 	.word	0x00405265
  404304:	20000198 	.word	0x20000198
  404308:	00407051 	.word	0x00407051
  40430c:	004070b9 	.word	0x004070b9
  404310:	00408f05 	.word	0x00408f05
  404314:	0040b2c9 	.word	0x0040b2c9
  404318:	0040b301 	.word	0x0040b301
  40431c:	400e1460 	.word	0x400e1460
  404320:	0040a121 	.word	0x0040a121
  404324:	0040a55d 	.word	0x0040a55d
  404328:	0040a545 	.word	0x0040a545
  40432c:	00404349 	.word	0x00404349
  404330:	00404251 	.word	0x00404251
  404334:	0040138d 	.word	0x0040138d
  404338:	2000019c 	.word	0x2000019c
  40433c:	00406b05 	.word	0x00406b05
  404340:	200001d4 	.word	0x200001d4
  404344:	004059bd 	.word	0x004059bd

00404348 <brd_initAllUarts>:


void brd_initAllUarts()
{
  404348:	b580      	push	{r7, lr}
  40434a:	af00      	add	r7, sp, #0
	if(drv_uart_init(&uart0Config) != STATUS_PASS)
  40434c:	4807      	ldr	r0, [pc, #28]	; (40436c <brd_initAllUarts+0x24>)
  40434e:	4b08      	ldr	r3, [pc, #32]	; (404370 <brd_initAllUarts+0x28>)
  404350:	4798      	blx	r3
  404352:	4603      	mov	r3, r0
  404354:	2b00      	cmp	r3, #0
  404356:	d000      	beq.n	40435a <brd_initAllUarts+0x12>
	{
		while(1); //spin here
  404358:	e7fe      	b.n	404358 <brd_initAllUarts+0x10>
	}
	if(drv_uart_init(&uart1Config) != STATUS_PASS)
  40435a:	4806      	ldr	r0, [pc, #24]	; (404374 <brd_initAllUarts+0x2c>)
  40435c:	4b04      	ldr	r3, [pc, #16]	; (404370 <brd_initAllUarts+0x28>)
  40435e:	4798      	blx	r3
  404360:	4603      	mov	r3, r0
  404362:	2b00      	cmp	r3, #0
  404364:	d000      	beq.n	404368 <brd_initAllUarts+0x20>
	{
		while(1); //spin here
  404366:	e7fe      	b.n	404366 <brd_initAllUarts+0x1e>
	}
}
  404368:	bd80      	pop	{r7, pc}
  40436a:	bf00      	nop
  40436c:	20000168 	.word	0x20000168
  404370:	00407505 	.word	0x00407505
  404374:	20000180 	.word	0x20000180

00404378 <brd_deInitAllUarts>:

void brd_deInitAllUarts()
{
  404378:	b580      	push	{r7, lr}
  40437a:	af00      	add	r7, sp, #0
	drv_uart_deInit(&uart0Config);
  40437c:	4803      	ldr	r0, [pc, #12]	; (40438c <brd_deInitAllUarts+0x14>)
  40437e:	4b04      	ldr	r3, [pc, #16]	; (404390 <brd_deInitAllUarts+0x18>)
  404380:	4798      	blx	r3
	drv_uart_deInit(&uart1Config);
  404382:	4804      	ldr	r0, [pc, #16]	; (404394 <brd_deInitAllUarts+0x1c>)
  404384:	4b02      	ldr	r3, [pc, #8]	; (404390 <brd_deInitAllUarts+0x18>)
  404386:	4798      	blx	r3
}
  404388:	bd80      	pop	{r7, pc}
  40438a:	bf00      	nop
  40438c:	20000168 	.word	0x20000168
  404390:	0040799d 	.word	0x0040799d
  404394:	20000180 	.word	0x20000180

00404398 <WDT_Handler>:

/**
 *  \brief Handler for watchdog interrupt.
 */
void WDT_Handler(void)
{
  404398:	b580      	push	{r7, lr}
  40439a:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
  40439c:	4803      	ldr	r0, [pc, #12]	; (4043ac <WDT_Handler+0x14>)
  40439e:	4b04      	ldr	r3, [pc, #16]	; (4043b0 <WDT_Handler+0x18>)
  4043a0:	4798      	blx	r3

	//debugPrintString("Restarting system!!!\r");
	rstc_start_software_reset(RSTC);	
  4043a2:	4804      	ldr	r0, [pc, #16]	; (4043b4 <WDT_Handler+0x1c>)
  4043a4:	4b04      	ldr	r3, [pc, #16]	; (4043b8 <WDT_Handler+0x20>)
  4043a6:	4798      	blx	r3
}
  4043a8:	bd80      	pop	{r7, pc}
  4043aa:	bf00      	nop
  4043ac:	400e1450 	.word	0x400e1450
  4043b0:	0040bb6d 	.word	0x0040bb6d
  4043b4:	400e1400 	.word	0x400e1400
  4043b8:	0040a68d 	.word	0x0040a68d

004043bc <brd_enableWatchdog>:
/**
 * configureWatchDog(void)
 * @brief Initialize the watchdog timer, only done once on power up. 
 */
void brd_enableWatchdog()
{
  4043bc:	b590      	push	{r4, r7, lr}
  4043be:	b083      	sub	sp, #12
  4043c0:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_WDT);
  4043c2:	2004      	movs	r0, #4
  4043c4:	4b13      	ldr	r3, [pc, #76]	; (404414 <brd_enableWatchdog+0x58>)
  4043c6:	4798      	blx	r3
	/* Get timeout value. */
	uint32_t timeout_value = wdt_get_timeout_value(WDT_PERIOD * 1000,
  4043c8:	4813      	ldr	r0, [pc, #76]	; (404418 <brd_enableWatchdog+0x5c>)
  4043ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4043ce:	4b13      	ldr	r3, [pc, #76]	; (40441c <brd_enableWatchdog+0x60>)
  4043d0:	4798      	blx	r3
  4043d2:	6078      	str	r0, [r7, #4]
			BOARD_FREQ_SLCK_XTAL);
	if (timeout_value == WDT_INVALID_ARGUMENT) {
  4043d4:	687a      	ldr	r2, [r7, #4]
  4043d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4043da:	429a      	cmp	r2, r3
  4043dc:	d100      	bne.n	4043e0 <brd_enableWatchdog+0x24>
		while (1) {
			/* Invalid timeout value, error. */
		}
  4043de:	e7fe      	b.n	4043de <brd_enableWatchdog+0x22>
	}
	/* Configure WDT to trigger an interrupt (or reset). */
	//WDT_MR_WDFIEN |  /* Enable WDT fault interrupt. */
	uint32_t wdt_mode = WDT_MR_WDRSTEN | 			
  4043e0:	4b0f      	ldr	r3, [pc, #60]	; (404420 <brd_enableWatchdog+0x64>)
  4043e2:	603b      	str	r3, [r7, #0]
			WDT_MR_WDDBGHLT  |  /* WDT stops in debug state. */
			WDT_MR_WDIDLEHLT;   /* WDT stops in idle state. */
	
	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  4043e4:	687b      	ldr	r3, [r7, #4]
  4043e6:	b29a      	uxth	r2, r3
  4043e8:	687b      	ldr	r3, [r7, #4]
  4043ea:	b29b      	uxth	r3, r3
  4043ec:	480d      	ldr	r0, [pc, #52]	; (404424 <brd_enableWatchdog+0x68>)
  4043ee:	6839      	ldr	r1, [r7, #0]
  4043f0:	4c0d      	ldr	r4, [pc, #52]	; (404428 <brd_enableWatchdog+0x6c>)
  4043f2:	47a0      	blx	r4
			
	/* Configure and enable WDT interrupt. */
	NVIC_DisableIRQ(WDT_IRQn);
  4043f4:	2004      	movs	r0, #4
  4043f6:	4b0d      	ldr	r3, [pc, #52]	; (40442c <brd_enableWatchdog+0x70>)
  4043f8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
  4043fa:	2004      	movs	r0, #4
  4043fc:	4b0c      	ldr	r3, [pc, #48]	; (404430 <brd_enableWatchdog+0x74>)
  4043fe:	4798      	blx	r3
	NVIC_SetPriority(WDT_IRQn, 0);
  404400:	2004      	movs	r0, #4
  404402:	2100      	movs	r1, #0
  404404:	4b0b      	ldr	r3, [pc, #44]	; (404434 <brd_enableWatchdog+0x78>)
  404406:	4798      	blx	r3
	NVIC_EnableIRQ(WDT_IRQn);
  404408:	2004      	movs	r0, #4
  40440a:	4b0b      	ldr	r3, [pc, #44]	; (404438 <brd_enableWatchdog+0x7c>)
  40440c:	4798      	blx	r3
				
  40440e:	370c      	adds	r7, #12
  404410:	46bd      	mov	sp, r7
  404412:	bd90      	pop	{r4, r7, pc}
  404414:	0040b4a1 	.word	0x0040b4a1
  404418:	00989680 	.word	0x00989680
  40441c:	0040babd 	.word	0x0040babd
  404420:	30002000 	.word	0x30002000
  404424:	400e1450 	.word	0x400e1450
  404428:	0040bb0d 	.word	0x0040bb0d
  40442c:	00403ea9 	.word	0x00403ea9
  404430:	00403edd 	.word	0x00403edd
  404434:	00403f11 	.word	0x00403f11
  404438:	00403e79 	.word	0x00403e79

0040443c <chrg_task_chargeMonitor>:
 * @brief This task will monitor the current charger status and battery charge level.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void chrg_task_chargeMonitor(void *pvParameters)
{
  40443c:	b590      	push	{r4, r7, lr}
  40443e:	b0a1      	sub	sp, #132	; 0x84
  404440:	af00      	add	r7, sp, #0
  404442:	6078      	str	r0, [r7, #4]
	chrg_chargeMonitorConfig_t* chargeMonitorConfig = (chrg_chargeMonitorConfig_t*)pvParameters;  	
  404444:	687b      	ldr	r3, [r7, #4]
  404446:	67bb      	str	r3, [r7, #120]	; 0x78
	chrg_chargerState_t newChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  404448:	2305      	movs	r3, #5
  40444a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	mgr_eventMessage_t eventMessage; 
	uint16_t chargeLevel = 0, newChargeLevel = 0;
  40444e:	2300      	movs	r3, #0
  404450:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  404454:	2300      	movs	r3, #0
  404456:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	drv_gpio_pin_state_t usbConnectedState = DRV_GPIO_PIN_STATE_PULLED_HIGH,
  40445a:	2302      	movs	r3, #2
  40445c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		 newUsbConnectedState = DRV_GPIO_PIN_STATE_LOW; 
  404460:	2300      	movs	r3, #0
  404462:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	drv_gpio_pin_state_t pwrButtonState = DRV_GPIO_PIN_STATE_PULLED_HIGH,
  404466:	2302      	movs	r3, #2
  404468:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		 newPwrButtonState = DRV_GPIO_PIN_STATE_LOW; 
  40446c:	2300      	movs	r3, #0
  40446e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	
	char tempString[100] = {0}; 	 
  404472:	f107 0208 	add.w	r2, r7, #8
  404476:	2364      	movs	r3, #100	; 0x64
  404478:	4610      	mov	r0, r2
  40447a:	2100      	movs	r1, #0
  40447c:	461a      	mov	r2, r3
  40447e:	4b9b      	ldr	r3, [pc, #620]	; (4046ec <chrg_task_chargeMonitor+0x2b0>)
  404480:	4798      	blx	r3
	while(1)
	{
		newChargerState = getChargerState(chargeMonitorConfig); 	
  404482:	6fb8      	ldr	r0, [r7, #120]	; 0x78
  404484:	4b9a      	ldr	r3, [pc, #616]	; (4046f0 <chrg_task_chargeMonitor+0x2b4>)
  404486:	4798      	blx	r3
  404488:	4603      	mov	r3, r0
  40448a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		newChargeLevel = getCalculatedPercentage(&ltc2941Config);	
  40448e:	4899      	ldr	r0, [pc, #612]	; (4046f4 <chrg_task_chargeMonitor+0x2b8>)
  404490:	4b99      	ldr	r3, [pc, #612]	; (4046f8 <chrg_task_chargeMonitor+0x2bc>)
  404492:	4798      	blx	r3
  404494:	4603      	mov	r3, r0
  404496:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		drv_gpio_getPinState(DRV_GPIO_PIN_USB_DET, &newUsbConnectedState);
  40449a:	f107 036f 	add.w	r3, r7, #111	; 0x6f
  40449e:	200b      	movs	r0, #11
  4044a0:	4619      	mov	r1, r3
  4044a2:	4b96      	ldr	r3, [pc, #600]	; (4046fc <chrg_task_chargeMonitor+0x2c0>)
  4044a4:	4798      	blx	r3
		if(newUsbConnectedState != usbConnectedState)
  4044a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  4044aa:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
  4044ae:	429a      	cmp	r2, r3
  4044b0:	d01c      	beq.n	4044ec <chrg_task_chargeMonitor+0xb0>
		{
			if(newUsbConnectedState == DRV_GPIO_PIN_STATE_HIGH)
  4044b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  4044b6:	2b01      	cmp	r3, #1
  4044b8:	d103      	bne.n	4044c2 <chrg_task_chargeMonitor+0x86>
			{
				//send GPIO connected state
				eventMessage.sysEvent = SYS_EVENT_USB_CONNECTED;
  4044ba:	2304      	movs	r3, #4
  4044bc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  4044c0:	e002      	b.n	4044c8 <chrg_task_chargeMonitor+0x8c>
			}
			else
			{
				eventMessage.sysEvent = SYS_EVENT_USB_DISCONNECTED;
  4044c2:	2305      	movs	r3, #5
  4044c4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			}
			if(mgr_eventQueue != NULL)
  4044c8:	4b8d      	ldr	r3, [pc, #564]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  4044ca:	681b      	ldr	r3, [r3, #0]
  4044cc:	2b00      	cmp	r3, #0
  4044ce:	d009      	beq.n	4044e4 <chrg_task_chargeMonitor+0xa8>
			{
				if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  4044d0:	4b8b      	ldr	r3, [pc, #556]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  4044d2:	681a      	ldr	r2, [r3, #0]
  4044d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
  4044d8:	4610      	mov	r0, r2
  4044da:	4619      	mov	r1, r3
  4044dc:	2205      	movs	r2, #5
  4044de:	2300      	movs	r3, #0
  4044e0:	4c88      	ldr	r4, [pc, #544]	; (404704 <chrg_task_chargeMonitor+0x2c8>)
  4044e2:	47a0      	blx	r4
				{
					//this is an error, we should log it.
				}
			}
			usbConnectedState = newUsbConnectedState; 			
  4044e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  4044e8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		}
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &newPwrButtonState);
  4044ec:	f107 036e 	add.w	r3, r7, #110	; 0x6e
  4044f0:	200a      	movs	r0, #10
  4044f2:	4619      	mov	r1, r3
  4044f4:	4b81      	ldr	r3, [pc, #516]	; (4046fc <chrg_task_chargeMonitor+0x2c0>)
  4044f6:	4798      	blx	r3
		if(newPwrButtonState != pwrButtonState)
  4044f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  4044fc:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
  404500:	429a      	cmp	r2, r3
  404502:	d011      	beq.n	404528 <chrg_task_chargeMonitor+0xec>
		{
			if(newPwrButtonState == DRV_GPIO_PIN_STATE_HIGH)
  404504:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  404508:	2b01      	cmp	r3, #1
  40450a:	d106      	bne.n	40451a <chrg_task_chargeMonitor+0xde>
			{
				powerButtonLowCount = 0;
  40450c:	4b7e      	ldr	r3, [pc, #504]	; (404708 <chrg_task_chargeMonitor+0x2cc>)
  40450e:	2200      	movs	r2, #0
  404510:	601a      	str	r2, [r3, #0]
				dat_sendDebugMsgToDataBoard("PwrBrdMsg:pwr Button high\r\n");
  404512:	487e      	ldr	r0, [pc, #504]	; (40470c <chrg_task_chargeMonitor+0x2d0>)
  404514:	4b7e      	ldr	r3, [pc, #504]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  404516:	4798      	blx	r3
  404518:	e002      	b.n	404520 <chrg_task_chargeMonitor+0xe4>
			}
			else
			{				
				dat_sendDebugMsgToDataBoard("PwrBrdMsg:pwr Button low\r\n");
  40451a:	487e      	ldr	r0, [pc, #504]	; (404714 <chrg_task_chargeMonitor+0x2d8>)
  40451c:	4b7c      	ldr	r3, [pc, #496]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  40451e:	4798      	blx	r3
			}
			pwrButtonState = newPwrButtonState;
  404520:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  404524:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		}
		if(pwrButtonState == DRV_GPIO_PIN_STATE_LOW)
  404528:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
  40452c:	2b00      	cmp	r3, #0
  40452e:	d104      	bne.n	40453a <chrg_task_chargeMonitor+0xfe>
		{
			powerButtonLowCount++;
  404530:	4b75      	ldr	r3, [pc, #468]	; (404708 <chrg_task_chargeMonitor+0x2cc>)
  404532:	681b      	ldr	r3, [r3, #0]
  404534:	1c5a      	adds	r2, r3, #1
  404536:	4b74      	ldr	r3, [pc, #464]	; (404708 <chrg_task_chargeMonitor+0x2cc>)
  404538:	601a      	str	r2, [r3, #0]
		}
		if(powerButtonLowCount == 10) //approximately 3.5 seconds
  40453a:	4b73      	ldr	r3, [pc, #460]	; (404708 <chrg_task_chargeMonitor+0x2cc>)
  40453c:	681b      	ldr	r3, [r3, #0]
  40453e:	2b0a      	cmp	r3, #10
  404540:	d110      	bne.n	404564 <chrg_task_chargeMonitor+0x128>
		{			
			//should be we reset the power board? or just power off
			eventMessage.sysEvent = SYS_EVENT_POWER_SWITCH;
  404542:	2300      	movs	r3, #0
  404544:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			if(mgr_eventQueue != NULL)
  404548:	4b6d      	ldr	r3, [pc, #436]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	2b00      	cmp	r3, #0
  40454e:	d009      	beq.n	404564 <chrg_task_chargeMonitor+0x128>
			{
				if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  404550:	4b6b      	ldr	r3, [pc, #428]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  404552:	681a      	ldr	r2, [r3, #0]
  404554:	f107 0370 	add.w	r3, r7, #112	; 0x70
  404558:	4610      	mov	r0, r2
  40455a:	4619      	mov	r1, r3
  40455c:	2205      	movs	r2, #5
  40455e:	2300      	movs	r3, #0
  404560:	4c68      	ldr	r4, [pc, #416]	; (404704 <chrg_task_chargeMonitor+0x2c8>)
  404562:	47a0      	blx	r4
				}
			}				
		}
				
		//check if the state is new
		if(newChargerState != chrg_currentChargerState)
  404564:	4b6c      	ldr	r3, [pc, #432]	; (404718 <chrg_task_chargeMonitor+0x2dc>)
  404566:	781b      	ldrb	r3, [r3, #0]
  404568:	b2db      	uxtb	r3, r3
  40456a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
  40456e:	429a      	cmp	r2, r3
  404570:	d07b      	beq.n	40466a <chrg_task_chargeMonitor+0x22e>
		{
			switch(newChargerState)
  404572:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
  404576:	3b01      	subs	r3, #1
  404578:	2b06      	cmp	r3, #6
  40457a:	d86a      	bhi.n	404652 <chrg_task_chargeMonitor+0x216>
  40457c:	a201      	add	r2, pc, #4	; (adr r2, 404584 <chrg_task_chargeMonitor+0x148>)
  40457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404582:	bf00      	nop
  404584:	00404643 	.word	0x00404643
  404588:	004045b3 	.word	0x004045b3
  40458c:	004045ed 	.word	0x004045ed
  404590:	004045bd 	.word	0x004045bd
  404594:	00404653 	.word	0x00404653
  404598:	004045a9 	.word	0x004045a9
  40459c:	004045a1 	.word	0x004045a1
			{
				case CHRG_CHARGER_STATE_SHUTDOWN_VBAT:
					//the charger is shutdown, this means that we're running on battery							
					chargeLevel = 0; //set the current charge level to zero so we update the LED color below. 				
  4045a0:	2300      	movs	r3, #0
  4045a2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
				break;
  4045a6:	e05c      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_SHUTDOWN_VIN:
					drv_led_set(DRV_LED_YELLOW,DRV_LED_SOLID); //TODO: maybe change this... since it's not actually charging. 
  4045a8:	2003      	movs	r0, #3
  4045aa:	2101      	movs	r1, #1
  4045ac:	4b5b      	ldr	r3, [pc, #364]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4045ae:	4798      	blx	r3
				break;
  4045b0:	e057      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_CHARGING:
				{					
					drv_led_set(DRV_LED_YELLOW,DRV_LED_SOLID);	
  4045b2:	2003      	movs	r0, #3
  4045b4:	2101      	movs	r1, #1
  4045b6:	4b59      	ldr	r3, [pc, #356]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4045b8:	4798      	blx	r3
				}				
				break;
  4045ba:	e052      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_CHARGE_COMPLETE:
				{					
					sprintf(tempString,"PwrBrdMsg:Receive Battery Full indication at %d level\r\n",ltc2941GetCharge(&ltc2941Config));
  4045bc:	484d      	ldr	r0, [pc, #308]	; (4046f4 <chrg_task_chargeMonitor+0x2b8>)
  4045be:	4b58      	ldr	r3, [pc, #352]	; (404720 <chrg_task_chargeMonitor+0x2e4>)
  4045c0:	4798      	blx	r3
  4045c2:	4603      	mov	r3, r0
  4045c4:	f107 0208 	add.w	r2, r7, #8
  4045c8:	4610      	mov	r0, r2
  4045ca:	4956      	ldr	r1, [pc, #344]	; (404724 <chrg_task_chargeMonitor+0x2e8>)
  4045cc:	461a      	mov	r2, r3
  4045ce:	4b56      	ldr	r3, [pc, #344]	; (404728 <chrg_task_chargeMonitor+0x2ec>)
  4045d0:	4798      	blx	r3
					dat_sendDebugMsgToDataBoard(tempString);
  4045d2:	f107 0308 	add.w	r3, r7, #8
  4045d6:	4618      	mov	r0, r3
  4045d8:	4b4d      	ldr	r3, [pc, #308]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  4045da:	4798      	blx	r3
					ltc2941SetChargeComplete(&ltc2941Config);									
  4045dc:	4845      	ldr	r0, [pc, #276]	; (4046f4 <chrg_task_chargeMonitor+0x2b8>)
  4045de:	4b53      	ldr	r3, [pc, #332]	; (40472c <chrg_task_chargeMonitor+0x2f0>)
  4045e0:	4798      	blx	r3
					drv_led_set(DRV_LED_GREEN,DRV_LED_SOLID);
  4045e2:	2002      	movs	r0, #2
  4045e4:	2101      	movs	r1, #1
  4045e6:	4b4d      	ldr	r3, [pc, #308]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4045e8:	4798      	blx	r3
				}
				break;
  4045ea:	e03a      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_LOW_BATTERY:
				{
					eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY; 
  4045ec:	2302      	movs	r3, #2
  4045ee:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
					if(mgr_eventQueue != NULL)
  4045f2:	4b43      	ldr	r3, [pc, #268]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  4045f4:	681b      	ldr	r3, [r3, #0]
  4045f6:	2b00      	cmp	r3, #0
  4045f8:	d01e      	beq.n	404638 <chrg_task_chargeMonitor+0x1fc>
					{						
						sprintf(tempString,"PwrBrdMsg:Receive Low Battery indication at %d level\r\n",ltc2941GetCharge(&ltc2941Config));
  4045fa:	483e      	ldr	r0, [pc, #248]	; (4046f4 <chrg_task_chargeMonitor+0x2b8>)
  4045fc:	4b48      	ldr	r3, [pc, #288]	; (404720 <chrg_task_chargeMonitor+0x2e4>)
  4045fe:	4798      	blx	r3
  404600:	4603      	mov	r3, r0
  404602:	f107 0208 	add.w	r2, r7, #8
  404606:	4610      	mov	r0, r2
  404608:	4949      	ldr	r1, [pc, #292]	; (404730 <chrg_task_chargeMonitor+0x2f4>)
  40460a:	461a      	mov	r2, r3
  40460c:	4b46      	ldr	r3, [pc, #280]	; (404728 <chrg_task_chargeMonitor+0x2ec>)
  40460e:	4798      	blx	r3
						dat_sendDebugMsgToDataBoard(tempString);
  404610:	f107 0308 	add.w	r3, r7, #8
  404614:	4618      	mov	r0, r3
  404616:	4b3e      	ldr	r3, [pc, #248]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  404618:	4798      	blx	r3
						ltc2941SetCharge(&ltc2941Config, CHARGE_EMPTY_VALUE); //set the gas gauge to zero. 						
  40461a:	4836      	ldr	r0, [pc, #216]	; (4046f4 <chrg_task_chargeMonitor+0x2b8>)
  40461c:	f644 0198 	movw	r1, #18584	; 0x4898
  404620:	4b44      	ldr	r3, [pc, #272]	; (404734 <chrg_task_chargeMonitor+0x2f8>)
  404622:	4798      	blx	r3
						if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  404624:	4b36      	ldr	r3, [pc, #216]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  404626:	681a      	ldr	r2, [r3, #0]
  404628:	f107 0370 	add.w	r3, r7, #112	; 0x70
  40462c:	4610      	mov	r0, r2
  40462e:	4619      	mov	r1, r3
  404630:	2205      	movs	r2, #5
  404632:	2300      	movs	r3, #0
  404634:	4c33      	ldr	r4, [pc, #204]	; (404704 <chrg_task_chargeMonitor+0x2c8>)
  404636:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}				
					}
					drv_led_set(DRV_LED_RED,DRV_LED_SOLID);
  404638:	2000      	movs	r0, #0
  40463a:	2101      	movs	r1, #1
  40463c:	4b37      	ldr	r3, [pc, #220]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  40463e:	4798      	blx	r3
				}
				break;
  404640:	e00f      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_NO_BATTERY:
				{				
					drv_led_set(DRV_LED_PURPLE,DRV_LED_SOLID);
  404642:	2006      	movs	r0, #6
  404644:	2101      	movs	r1, #1
  404646:	4b35      	ldr	r3, [pc, #212]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  404648:	4798      	blx	r3
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:No Battery\r\n");
  40464a:	483b      	ldr	r0, [pc, #236]	; (404738 <chrg_task_chargeMonitor+0x2fc>)
  40464c:	4b30      	ldr	r3, [pc, #192]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  40464e:	4798      	blx	r3
				}
				break;
  404650:	e007      	b.n	404662 <chrg_task_chargeMonitor+0x226>
				case CHRG_CHARGER_STATE_INVALID_CODE:
				default:
				{
					//drv_led_set(DRV_LED_TURQUOISE,DRV_LED_FLASH);	
					//turn off LED for now, figure out what to do with this state later
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Battery Fault\r\n");
  404652:	483a      	ldr	r0, [pc, #232]	; (40473c <chrg_task_chargeMonitor+0x300>)
  404654:	4b2e      	ldr	r3, [pc, #184]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  404656:	4798      	blx	r3
					drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);
  404658:	2007      	movs	r0, #7
  40465a:	2101      	movs	r1, #1
  40465c:	4b2f      	ldr	r3, [pc, #188]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  40465e:	4798      	blx	r3
				}				
				break;				
  404660:	bf00      	nop
			}		
			chrg_currentChargerState = newChargerState; 		
  404662:	4b2d      	ldr	r3, [pc, #180]	; (404718 <chrg_task_chargeMonitor+0x2dc>)
  404664:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
  404668:	701a      	strb	r2, [r3, #0]
		}
		if(newChargeLevel != chargeLevel)
  40466a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
  40466e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
  404672:	429a      	cmp	r2, r3
  404674:	d035      	beq.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
		{			
			chargeLevel = newChargeLevel; 
  404676:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
  40467a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			if(chrg_currentChargerState == CHRG_CHARGER_STATE_SHUTDOWN_VBAT)
  40467e:	4b26      	ldr	r3, [pc, #152]	; (404718 <chrg_task_chargeMonitor+0x2dc>)
  404680:	781b      	ldrb	r3, [r3, #0]
  404682:	b2db      	uxtb	r3, r3
  404684:	2b07      	cmp	r3, #7
  404686:	d12c      	bne.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
			{
				//we are being powered by VBAT, determine what the battery level is. 
				if(chargeLevel <= BATTERY_PERCENT_FAULT)
  404688:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
  40468c:	2b05      	cmp	r3, #5
  40468e:	d80e      	bhi.n	4046ae <chrg_task_chargeMonitor+0x272>
				{
					//the battery is pretty much dead
					drv_led_set(DRV_LED_RED, DRV_LED_FLASH); 
  404690:	2000      	movs	r0, #0
  404692:	2100      	movs	r1, #0
  404694:	4b21      	ldr	r3, [pc, #132]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  404696:	4798      	blx	r3
					eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY;
  404698:	2302      	movs	r3, #2
  40469a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
					if(mgr_eventQueue != NULL)
  40469e:	4b18      	ldr	r3, [pc, #96]	; (404700 <chrg_task_chargeMonitor+0x2c4>)
  4046a0:	681b      	ldr	r3, [r3, #0]
  4046a2:	2b00      	cmp	r3, #0
  4046a4:	d01d      	beq.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
					{
						dat_sendDebugMsgToDataBoard("PwrBrdMsg:Battery Level Empty\r\n");
  4046a6:	4826      	ldr	r0, [pc, #152]	; (404740 <chrg_task_chargeMonitor+0x304>)
  4046a8:	4b19      	ldr	r3, [pc, #100]	; (404710 <chrg_task_chargeMonitor+0x2d4>)
  4046aa:	4798      	blx	r3
  4046ac:	e019      	b.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
						//{
							////this is an error, we should log it.
						//}
					}					
				}
				else if(chargeLevel <= BATTERY_PERCENT_CRITICAL)
  4046ae:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
  4046b2:	2b08      	cmp	r3, #8
  4046b4:	d804      	bhi.n	4046c0 <chrg_task_chargeMonitor+0x284>
				{
					drv_led_set(DRV_LED_RED, DRV_LED_FLASH); 
  4046b6:	2000      	movs	r0, #0
  4046b8:	2100      	movs	r1, #0
  4046ba:	4b18      	ldr	r3, [pc, #96]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4046bc:	4798      	blx	r3
  4046be:	e010      	b.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
				}				
				else if(chargeLevel <= BATTERY_PERCENT_LOW)
  4046c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
  4046c4:	2b0f      	cmp	r3, #15
  4046c6:	d804      	bhi.n	4046d2 <chrg_task_chargeMonitor+0x296>
				{
					//battery is low, we need to indicate that to the user
					
					drv_led_set(DRV_LED_RED, DRV_LED_SOLID);
  4046c8:	2000      	movs	r0, #0
  4046ca:	2101      	movs	r1, #1
  4046cc:	4b13      	ldr	r3, [pc, #76]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4046ce:	4798      	blx	r3
  4046d0:	e007      	b.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
				}
				else if(chargeLevel > BATTERY_PERCENT_LOW)
  4046d2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
  4046d6:	2b0f      	cmp	r3, #15
  4046d8:	d903      	bls.n	4046e2 <chrg_task_chargeMonitor+0x2a6>
				{
					//battery level is good. no need to indicate anything. 
					//drv_led_set(DRV_LED_BLUE,DRV_LED_SOLID);					
					drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);
  4046da:	2007      	movs	r0, #7
  4046dc:	2101      	movs	r1, #1
  4046de:	4b0f      	ldr	r3, [pc, #60]	; (40471c <chrg_task_chargeMonitor+0x2e0>)
  4046e0:	4798      	blx	r3
				}				
			}
		}			
		vTaskDelay(250); 
  4046e2:	20fa      	movs	r0, #250	; 0xfa
  4046e4:	4b17      	ldr	r3, [pc, #92]	; (404744 <chrg_task_chargeMonitor+0x308>)
  4046e6:	4798      	blx	r3
	}	
  4046e8:	e6cb      	b.n	404482 <chrg_task_chargeMonitor+0x46>
  4046ea:	bf00      	nop
  4046ec:	0040c82d 	.word	0x0040c82d
  4046f0:	00404749 	.word	0x00404749
  4046f4:	200001d4 	.word	0x200001d4
  4046f8:	00405b3d 	.word	0x00405b3d
  4046fc:	00405561 	.word	0x00405561
  404700:	20000f70 	.word	0x20000f70
  404704:	0040867d 	.word	0x0040867d
  404708:	20000e04 	.word	0x20000e04
  40470c:	00415914 	.word	0x00415914
  404710:	00405129 	.word	0x00405129
  404714:	00415930 	.word	0x00415930
  404718:	200001e0 	.word	0x200001e0
  40471c:	004070b9 	.word	0x004070b9
  404720:	00405ae1 	.word	0x00405ae1
  404724:	0041594c 	.word	0x0041594c
  404728:	0040ca3d 	.word	0x0040ca3d
  40472c:	00405ba9 	.word	0x00405ba9
  404730:	00415984 	.word	0x00415984
  404734:	00405a75 	.word	0x00405a75
  404738:	004159bc 	.word	0x004159bc
  40473c:	004159d4 	.word	0x004159d4
  404740:	004159f0 	.word	0x004159f0
  404744:	00408f05 	.word	0x00408f05

00404748 <getChargerState>:

//static functions

//get charge status
chrg_chargerState_t getChargerState(chrg_chargeMonitorConfig_t* chargerConfig)
{
  404748:	b580      	push	{r7, lr}
  40474a:	b084      	sub	sp, #16
  40474c:	af00      	add	r7, sp, #0
  40474e:	6078      	str	r0, [r7, #4]
	chrg_chargerState_t chargerState = 0x00; 
  404750:	2300      	movs	r3, #0
  404752:	73fb      	strb	r3, [r7, #15]
	drv_gpio_pin_state_t tempPinState = DRV_GPIO_PIN_STATE_LOW; 
  404754:	2300      	movs	r3, #0
  404756:	73bb      	strb	r3, [r7, #14]
	drv_gpio_getPinState(chargerConfig->pin_pg, &tempPinState); 
  404758:	687b      	ldr	r3, [r7, #4]
  40475a:	789a      	ldrb	r2, [r3, #2]
  40475c:	f107 030e 	add.w	r3, r7, #14
  404760:	4610      	mov	r0, r2
  404762:	4619      	mov	r1, r3
  404764:	4b19      	ldr	r3, [pc, #100]	; (4047cc <getChargerState+0x84>)
  404766:	4798      	blx	r3
	chargerState |= (tempPinState & 0x01); 
  404768:	7bbb      	ldrb	r3, [r7, #14]
  40476a:	b2db      	uxtb	r3, r3
  40476c:	f003 0301 	and.w	r3, r3, #1
  404770:	b2da      	uxtb	r2, r3
  404772:	7bfb      	ldrb	r3, [r7, #15]
  404774:	4313      	orrs	r3, r2
  404776:	b2db      	uxtb	r3, r3
  404778:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat2, &tempPinState);
  40477a:	687b      	ldr	r3, [r7, #4]
  40477c:	785a      	ldrb	r2, [r3, #1]
  40477e:	f107 030e 	add.w	r3, r7, #14
  404782:	4610      	mov	r0, r2
  404784:	4619      	mov	r1, r3
  404786:	4b11      	ldr	r3, [pc, #68]	; (4047cc <getChargerState+0x84>)
  404788:	4798      	blx	r3
	chargerState |= ((tempPinState<<1) & 0x02);
  40478a:	7bbb      	ldrb	r3, [r7, #14]
  40478c:	005b      	lsls	r3, r3, #1
  40478e:	b2db      	uxtb	r3, r3
  404790:	f003 0302 	and.w	r3, r3, #2
  404794:	b2da      	uxtb	r2, r3
  404796:	7bfb      	ldrb	r3, [r7, #15]
  404798:	4313      	orrs	r3, r2
  40479a:	b2db      	uxtb	r3, r3
  40479c:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat1, &tempPinState);
  40479e:	687b      	ldr	r3, [r7, #4]
  4047a0:	781a      	ldrb	r2, [r3, #0]
  4047a2:	f107 030e 	add.w	r3, r7, #14
  4047a6:	4610      	mov	r0, r2
  4047a8:	4619      	mov	r1, r3
  4047aa:	4b08      	ldr	r3, [pc, #32]	; (4047cc <getChargerState+0x84>)
  4047ac:	4798      	blx	r3
	chargerState |= ((tempPinState<<2) & 0x04);		
  4047ae:	7bbb      	ldrb	r3, [r7, #14]
  4047b0:	009b      	lsls	r3, r3, #2
  4047b2:	b2db      	uxtb	r3, r3
  4047b4:	f003 0304 	and.w	r3, r3, #4
  4047b8:	b2da      	uxtb	r2, r3
  4047ba:	7bfb      	ldrb	r3, [r7, #15]
  4047bc:	4313      	orrs	r3, r2
  4047be:	b2db      	uxtb	r3, r3
  4047c0:	73fb      	strb	r3, [r7, #15]
	return chargerState; 		
  4047c2:	7bfb      	ldrb	r3, [r7, #15]
  4047c4:	4618      	mov	r0, r3
  4047c6:	3710      	adds	r7, #16
  4047c8:	46bd      	mov	sp, r7
  4047ca:	bd80      	pop	{r7, pc}
  4047cc:	00405561 	.word	0x00405561

004047d0 <cmd_task_commandProcesor>:
 * @brief This task receives all incoming commands to the brain pack, and responds to the ones it needs to.   
 * @param pvParameters, void pointer to structure containing configuration
 * @return void
 ***********************************************************************************************/
void cmd_task_commandProcesor(void *pvParameters)
{
  4047d0:	b590      	push	{r4, r7, lr}
  4047d2:	b09f      	sub	sp, #124	; 0x7c
  4047d4:	af00      	add	r7, sp, #0
  4047d6:	6078      	str	r0, [r7, #4]
	cmd_queue_commandQueue = xQueueCreate( 10, sizeof(cmd_commandPacket_t));
  4047d8:	200a      	movs	r0, #10
  4047da:	2168      	movs	r1, #104	; 0x68
  4047dc:	2200      	movs	r2, #0
  4047de:	4b96      	ldr	r3, [pc, #600]	; (404a38 <cmd_task_commandProcesor+0x268>)
  4047e0:	4798      	blx	r3
  4047e2:	4602      	mov	r2, r0
  4047e4:	4b95      	ldr	r3, [pc, #596]	; (404a3c <cmd_task_commandProcesor+0x26c>)
  4047e6:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t packet; 
	cmd_initPacketStructure(&packet);
  4047e8:	f107 0308 	add.w	r3, r7, #8
  4047ec:	4618      	mov	r0, r3
  4047ee:	4b94      	ldr	r3, [pc, #592]	; (404a40 <cmd_task_commandProcesor+0x270>)
  4047f0:	4798      	blx	r3
	uint16_t chargeLevel = 0; 
  4047f2:	2300      	movs	r3, #0
  4047f4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	uint32_t chargeRegValue = 0; 
  4047f8:	2300      	movs	r3, #0
  4047fa:	673b      	str	r3, [r7, #112]	; 0x70
	bool forwardCommand = true; 
  4047fc:	2301      	movs	r3, #1
  4047fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(cmd_queue_commandQueue == 0)
  404802:	4b8e      	ldr	r3, [pc, #568]	; (404a3c <cmd_task_commandProcesor+0x26c>)
  404804:	681b      	ldr	r3, [r3, #0]
  404806:	2b00      	cmp	r3, #0
  404808:	d100      	bne.n	40480c <cmd_task_commandProcesor+0x3c>
	{
		// Queue was not created this is an error!		
		return;
  40480a:	e253      	b.n	404cb4 <cmd_task_commandProcesor+0x4e4>
	}
	while(1)
	{	
		if(xQueueReceive( cmd_queue_commandQueue, &(packet), 250) == TRUE)
  40480c:	4b8b      	ldr	r3, [pc, #556]	; (404a3c <cmd_task_commandProcesor+0x26c>)
  40480e:	681a      	ldr	r2, [r3, #0]
  404810:	f107 0308 	add.w	r3, r7, #8
  404814:	4610      	mov	r0, r2
  404816:	4619      	mov	r1, r3
  404818:	22fa      	movs	r2, #250	; 0xfa
  40481a:	2300      	movs	r3, #0
  40481c:	4c89      	ldr	r4, [pc, #548]	; (404a44 <cmd_task_commandProcesor+0x274>)
  40481e:	47a0      	blx	r4
  404820:	4603      	mov	r3, r0
  404822:	2b01      	cmp	r3, #1
  404824:	f040 8245 	bne.w	404cb2 <cmd_task_commandProcesor+0x4e2>
		{
			//only a small subset of commands are handled on the power board
			//send the rest to the data board for processing.
			if(packet.packetSize > 0)
  404828:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
  40482c:	2b00      	cmp	r3, #0
  40482e:	f000 8240 	beq.w	404cb2 <cmd_task_commandProcesor+0x4e2>
			{		
				forwardCommand = true; //by default always forward the command to the databoard
  404832:	2301      	movs	r3, #1
  404834:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if(strncmp(packet.packetData,"setTime",7)==0)
  404838:	f107 0308 	add.w	r3, r7, #8
  40483c:	3301      	adds	r3, #1
  40483e:	4618      	mov	r0, r3
  404840:	4981      	ldr	r1, [pc, #516]	; (404a48 <cmd_task_commandProcesor+0x278>)
  404842:	2207      	movs	r2, #7
  404844:	4b81      	ldr	r3, [pc, #516]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  404846:	4798      	blx	r3
  404848:	4603      	mov	r3, r0
  40484a:	2b00      	cmp	r3, #0
  40484c:	d114      	bne.n	404878 <cmd_task_commandProcesor+0xa8>
				{
					//handle the set time command. 
					if(packet.packetSource != CMD_COMMAND_SOURCE_LOCAL)
  40484e:	7a3b      	ldrb	r3, [r7, #8]
  404850:	2b02      	cmp	r3, #2
  404852:	f000 8224 	beq.w	404c9e <cmd_task_commandProcesor+0x4ce>
					{					
						if(strlen(packet.packetData) >= 24)
  404856:	f107 0308 	add.w	r3, r7, #8
  40485a:	3301      	adds	r3, #1
  40485c:	4618      	mov	r0, r3
  40485e:	4b7c      	ldr	r3, [pc, #496]	; (404a50 <cmd_task_commandProcesor+0x280>)
  404860:	4798      	blx	r3
  404862:	4603      	mov	r3, r0
  404864:	2b17      	cmp	r3, #23
  404866:	f240 821a 	bls.w	404c9e <cmd_task_commandProcesor+0x4ce>
						{
							setTimeFromString(packet.packetData+7);
  40486a:	f107 0308 	add.w	r3, r7, #8
  40486e:	3308      	adds	r3, #8
  404870:	4618      	mov	r0, r3
  404872:	4b78      	ldr	r3, [pc, #480]	; (404a54 <cmd_task_commandProcesor+0x284>)
  404874:	4798      	blx	r3
  404876:	e212      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
						}
					}
				}
				else if(strncmp(packet.packetData,"pbGetTime",9)==0)
  404878:	f107 0308 	add.w	r3, r7, #8
  40487c:	3301      	adds	r3, #1
  40487e:	4618      	mov	r0, r3
  404880:	4975      	ldr	r1, [pc, #468]	; (404a58 <cmd_task_commandProcesor+0x288>)
  404882:	2209      	movs	r2, #9
  404884:	4b71      	ldr	r3, [pc, #452]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  404886:	4798      	blx	r3
  404888:	4603      	mov	r3, r0
  40488a:	2b00      	cmp	r3, #0
  40488c:	d11c      	bne.n	4048c8 <cmd_task_commandProcesor+0xf8>
				{
					forwardCommand = false; 
  40488e:	2300      	movs	r3, #0
  404890:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					cmd_sendDateTimeCommand();
  404894:	4b71      	ldr	r3, [pc, #452]	; (404a5c <cmd_task_commandProcesor+0x28c>)
  404896:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404898:	7a3b      	ldrb	r3, [r7, #8]
  40489a:	2b00      	cmp	r3, #0
  40489c:	d109      	bne.n	4048b2 <cmd_task_commandProcesor+0xe2>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, getTimeString());
  40489e:	4b70      	ldr	r3, [pc, #448]	; (404a60 <cmd_task_commandProcesor+0x290>)
  4048a0:	685c      	ldr	r4, [r3, #4]
  4048a2:	4b70      	ldr	r3, [pc, #448]	; (404a64 <cmd_task_commandProcesor+0x294>)
  4048a4:	4798      	blx	r3
  4048a6:	4603      	mov	r3, r0
  4048a8:	4620      	mov	r0, r4
  4048aa:	4619      	mov	r1, r3
  4048ac:	4b6e      	ldr	r3, [pc, #440]	; (404a68 <cmd_task_commandProcesor+0x298>)
  4048ae:	4798      	blx	r3
  4048b0:	e1f5      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  4048b2:	7a3b      	ldrb	r3, [r7, #8]
  4048b4:	2b01      	cmp	r3, #1
  4048b6:	f040 81f2 	bne.w	404c9e <cmd_task_commandProcesor+0x4ce>
					{
						dat_sendStringToUsb(getTimeString());
  4048ba:	4b6a      	ldr	r3, [pc, #424]	; (404a64 <cmd_task_commandProcesor+0x294>)
  4048bc:	4798      	blx	r3
  4048be:	4603      	mov	r3, r0
  4048c0:	4618      	mov	r0, r3
  4048c2:	4b6a      	ldr	r3, [pc, #424]	; (404a6c <cmd_task_commandProcesor+0x29c>)
  4048c4:	4798      	blx	r3
  4048c6:	e1ea      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
					}
				}
				else if(strncmp(packet.packetData,"getRawCharge",12)==0)
  4048c8:	f107 0308 	add.w	r3, r7, #8
  4048cc:	3301      	adds	r3, #1
  4048ce:	4618      	mov	r0, r3
  4048d0:	4967      	ldr	r1, [pc, #412]	; (404a70 <cmd_task_commandProcesor+0x2a0>)
  4048d2:	220c      	movs	r2, #12
  4048d4:	4b5d      	ldr	r3, [pc, #372]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  4048d6:	4798      	blx	r3
  4048d8:	4603      	mov	r3, r0
  4048da:	2b00      	cmp	r3, #0
  4048dc:	d120      	bne.n	404920 <cmd_task_commandProcesor+0x150>
				{
					//handle the set time command. 					
					chargeLevel = ltc2941GetCharge(&ltc2941Config);
  4048de:	4865      	ldr	r0, [pc, #404]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  4048e0:	4b65      	ldr	r3, [pc, #404]	; (404a78 <cmd_task_commandProcesor+0x2a8>)
  4048e2:	4798      	blx	r3
  4048e4:	4603      	mov	r3, r0
  4048e6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					sprintf(tempString,"raw charge Level: %d\r\n",chargeLevel);
  4048ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
  4048ee:	4863      	ldr	r0, [pc, #396]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  4048f0:	4963      	ldr	r1, [pc, #396]	; (404a80 <cmd_task_commandProcesor+0x2b0>)
  4048f2:	461a      	mov	r2, r3
  4048f4:	4b63      	ldr	r3, [pc, #396]	; (404a84 <cmd_task_commandProcesor+0x2b4>)
  4048f6:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  4048f8:	7a3b      	ldrb	r3, [r7, #8]
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d106      	bne.n	40490c <cmd_task_commandProcesor+0x13c>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  4048fe:	4b58      	ldr	r3, [pc, #352]	; (404a60 <cmd_task_commandProcesor+0x290>)
  404900:	685b      	ldr	r3, [r3, #4]
  404902:	4618      	mov	r0, r3
  404904:	495d      	ldr	r1, [pc, #372]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  404906:	4b58      	ldr	r3, [pc, #352]	; (404a68 <cmd_task_commandProcesor+0x298>)
  404908:	4798      	blx	r3
  40490a:	e005      	b.n	404918 <cmd_task_commandProcesor+0x148>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  40490c:	7a3b      	ldrb	r3, [r7, #8]
  40490e:	2b01      	cmp	r3, #1
  404910:	d102      	bne.n	404918 <cmd_task_commandProcesor+0x148>
					{
						dat_sendStringToUsb(tempString);
  404912:	485a      	ldr	r0, [pc, #360]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  404914:	4b55      	ldr	r3, [pc, #340]	; (404a6c <cmd_task_commandProcesor+0x29c>)
  404916:	4798      	blx	r3
					}
					//don't forward this message on. 	
					forwardCommand = false; 						
  404918:	2300      	movs	r3, #0
  40491a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  40491e:	e1be      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}		
				else if(strncmp(packet.packetData,"getCharge",9)==0)
  404920:	f107 0308 	add.w	r3, r7, #8
  404924:	3301      	adds	r3, #1
  404926:	4618      	mov	r0, r3
  404928:	4957      	ldr	r1, [pc, #348]	; (404a88 <cmd_task_commandProcesor+0x2b8>)
  40492a:	2209      	movs	r2, #9
  40492c:	4b47      	ldr	r3, [pc, #284]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  40492e:	4798      	blx	r3
  404930:	4603      	mov	r3, r0
  404932:	2b00      	cmp	r3, #0
  404934:	d120      	bne.n	404978 <cmd_task_commandProcesor+0x1a8>
				{
					//handle the set time command. 					
					chargeLevel = getCalculatedPercentage(&ltc2941Config);
  404936:	484f      	ldr	r0, [pc, #316]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  404938:	4b54      	ldr	r3, [pc, #336]	; (404a8c <cmd_task_commandProcesor+0x2bc>)
  40493a:	4798      	blx	r3
  40493c:	4603      	mov	r3, r0
  40493e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					sprintf(tempString,"charge Level: %d\r\n",chargeLevel);
  404942:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
  404946:	484d      	ldr	r0, [pc, #308]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  404948:	4951      	ldr	r1, [pc, #324]	; (404a90 <cmd_task_commandProcesor+0x2c0>)
  40494a:	461a      	mov	r2, r3
  40494c:	4b4d      	ldr	r3, [pc, #308]	; (404a84 <cmd_task_commandProcesor+0x2b4>)
  40494e:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404950:	7a3b      	ldrb	r3, [r7, #8]
  404952:	2b00      	cmp	r3, #0
  404954:	d106      	bne.n	404964 <cmd_task_commandProcesor+0x194>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404956:	4b42      	ldr	r3, [pc, #264]	; (404a60 <cmd_task_commandProcesor+0x290>)
  404958:	685b      	ldr	r3, [r3, #4]
  40495a:	4618      	mov	r0, r3
  40495c:	4947      	ldr	r1, [pc, #284]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  40495e:	4b42      	ldr	r3, [pc, #264]	; (404a68 <cmd_task_commandProcesor+0x298>)
  404960:	4798      	blx	r3
  404962:	e005      	b.n	404970 <cmd_task_commandProcesor+0x1a0>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404964:	7a3b      	ldrb	r3, [r7, #8]
  404966:	2b01      	cmp	r3, #1
  404968:	d102      	bne.n	404970 <cmd_task_commandProcesor+0x1a0>
					{
						dat_sendStringToUsb(tempString);
  40496a:	4844      	ldr	r0, [pc, #272]	; (404a7c <cmd_task_commandProcesor+0x2ac>)
  40496c:	4b3f      	ldr	r3, [pc, #252]	; (404a6c <cmd_task_commandProcesor+0x29c>)
  40496e:	4798      	blx	r3
					}
					//don't forward this message on. 	
					forwardCommand = false; 						
  404970:	2300      	movs	r3, #0
  404972:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404976:	e192      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}		
				else if(strncmp(packet.packetData,"setChargeLow",12)==0)
  404978:	f107 0308 	add.w	r3, r7, #8
  40497c:	3301      	adds	r3, #1
  40497e:	4618      	mov	r0, r3
  404980:	4944      	ldr	r1, [pc, #272]	; (404a94 <cmd_task_commandProcesor+0x2c4>)
  404982:	220c      	movs	r2, #12
  404984:	4b31      	ldr	r3, [pc, #196]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  404986:	4798      	blx	r3
  404988:	4603      	mov	r3, r0
  40498a:	2b00      	cmp	r3, #0
  40498c:	d10d      	bne.n	4049aa <cmd_task_commandProcesor+0x1da>
				{					
					chargeRegValue = getRegValueForPercent(14);					
  40498e:	200e      	movs	r0, #14
  404990:	4b41      	ldr	r3, [pc, #260]	; (404a98 <cmd_task_commandProcesor+0x2c8>)
  404992:	4798      	blx	r3
  404994:	6738      	str	r0, [r7, #112]	; 0x70
					ltc2941SetCharge(&ltc2941Config, chargeRegValue);
  404996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404998:	b29b      	uxth	r3, r3
  40499a:	4836      	ldr	r0, [pc, #216]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  40499c:	4619      	mov	r1, r3
  40499e:	4b3f      	ldr	r3, [pc, #252]	; (404a9c <cmd_task_commandProcesor+0x2cc>)
  4049a0:	4798      	blx	r3
					forwardCommand = false; 	 
  4049a2:	2300      	movs	r3, #0
  4049a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  4049a8:	e179      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}						
				else if(strncmp(packet.packetData,"setChargeCritical",17)==0)
  4049aa:	f107 0308 	add.w	r3, r7, #8
  4049ae:	3301      	adds	r3, #1
  4049b0:	4618      	mov	r0, r3
  4049b2:	493b      	ldr	r1, [pc, #236]	; (404aa0 <cmd_task_commandProcesor+0x2d0>)
  4049b4:	2211      	movs	r2, #17
  4049b6:	4b25      	ldr	r3, [pc, #148]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  4049b8:	4798      	blx	r3
  4049ba:	4603      	mov	r3, r0
  4049bc:	2b00      	cmp	r3, #0
  4049be:	d10d      	bne.n	4049dc <cmd_task_commandProcesor+0x20c>
				{
					chargeRegValue = getRegValueForPercent(7);					
  4049c0:	2007      	movs	r0, #7
  4049c2:	4b35      	ldr	r3, [pc, #212]	; (404a98 <cmd_task_commandProcesor+0x2c8>)
  4049c4:	4798      	blx	r3
  4049c6:	6738      	str	r0, [r7, #112]	; 0x70
					ltc2941SetCharge(&ltc2941Config,chargeRegValue);
  4049c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  4049ca:	b29b      	uxth	r3, r3
  4049cc:	4829      	ldr	r0, [pc, #164]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  4049ce:	4619      	mov	r1, r3
  4049d0:	4b32      	ldr	r3, [pc, #200]	; (404a9c <cmd_task_commandProcesor+0x2cc>)
  4049d2:	4798      	blx	r3
					forwardCommand = false; 	 
  4049d4:	2300      	movs	r3, #0
  4049d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  4049da:	e160      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}										
				else if(strncmp(packet.packetData,"setChargeFault",14)==0)
  4049dc:	f107 0308 	add.w	r3, r7, #8
  4049e0:	3301      	adds	r3, #1
  4049e2:	4618      	mov	r0, r3
  4049e4:	492f      	ldr	r1, [pc, #188]	; (404aa4 <cmd_task_commandProcesor+0x2d4>)
  4049e6:	220e      	movs	r2, #14
  4049e8:	4b18      	ldr	r3, [pc, #96]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  4049ea:	4798      	blx	r3
  4049ec:	4603      	mov	r3, r0
  4049ee:	2b00      	cmp	r3, #0
  4049f0:	d10d      	bne.n	404a0e <cmd_task_commandProcesor+0x23e>
				{
					chargeRegValue = getRegValueForPercent(4);					
  4049f2:	2004      	movs	r0, #4
  4049f4:	4b28      	ldr	r3, [pc, #160]	; (404a98 <cmd_task_commandProcesor+0x2c8>)
  4049f6:	4798      	blx	r3
  4049f8:	6738      	str	r0, [r7, #112]	; 0x70
					ltc2941SetCharge(&ltc2941Config, chargeRegValue);
  4049fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  4049fc:	b29b      	uxth	r3, r3
  4049fe:	481d      	ldr	r0, [pc, #116]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  404a00:	4619      	mov	r1, r3
  404a02:	4b26      	ldr	r3, [pc, #152]	; (404a9c <cmd_task_commandProcesor+0x2cc>)
  404a04:	4798      	blx	r3
					forwardCommand = false; 	 
  404a06:	2300      	movs	r3, #0
  404a08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404a0c:	e147      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}
				else if(strncmp(packet.packetData,"setChargeFull",13)==0)
  404a0e:	f107 0308 	add.w	r3, r7, #8
  404a12:	3301      	adds	r3, #1
  404a14:	4618      	mov	r0, r3
  404a16:	4924      	ldr	r1, [pc, #144]	; (404aa8 <cmd_task_commandProcesor+0x2d8>)
  404a18:	220d      	movs	r2, #13
  404a1a:	4b0c      	ldr	r3, [pc, #48]	; (404a4c <cmd_task_commandProcesor+0x27c>)
  404a1c:	4798      	blx	r3
  404a1e:	4603      	mov	r3, r0
  404a20:	2b00      	cmp	r3, #0
  404a22:	d143      	bne.n	404aac <cmd_task_commandProcesor+0x2dc>
				{										
					ltc2941SetCharge(&ltc2941Config, 0xFFFF);
  404a24:	4813      	ldr	r0, [pc, #76]	; (404a74 <cmd_task_commandProcesor+0x2a4>)
  404a26:	f64f 71ff 	movw	r1, #65535	; 0xffff
  404a2a:	4b1c      	ldr	r3, [pc, #112]	; (404a9c <cmd_task_commandProcesor+0x2cc>)
  404a2c:	4798      	blx	r3
					forwardCommand = false; 	 
  404a2e:	2300      	movs	r3, #0
  404a30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404a34:	e133      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
  404a36:	bf00      	nop
  404a38:	004085e5 	.word	0x004085e5
  404a3c:	20000e08 	.word	0x20000e08
  404a40:	00404d91 	.word	0x00404d91
  404a44:	004088a9 	.word	0x004088a9
  404a48:	00415a10 	.word	0x00415a10
  404a4c:	0040cbc9 	.word	0x0040cbc9
  404a50:	0040cb69 	.word	0x0040cb69
  404a54:	00404e7d 	.word	0x00404e7d
  404a58:	00415a18 	.word	0x00415a18
  404a5c:	00404db9 	.word	0x00404db9
  404a60:	200002d8 	.word	0x200002d8
  404a64:	00404d4d 	.word	0x00404d4d
  404a68:	00407ae5 	.word	0x00407ae5
  404a6c:	00405185 	.word	0x00405185
  404a70:	00415a24 	.word	0x00415a24
  404a74:	200001d4 	.word	0x200001d4
  404a78:	00405ae1 	.word	0x00405ae1
  404a7c:	20000e0c 	.word	0x20000e0c
  404a80:	00415a34 	.word	0x00415a34
  404a84:	0040ca3d 	.word	0x0040ca3d
  404a88:	00415a4c 	.word	0x00415a4c
  404a8c:	00405b3d 	.word	0x00405b3d
  404a90:	00415a58 	.word	0x00415a58
  404a94:	00415a6c 	.word	0x00415a6c
  404a98:	00405b79 	.word	0x00405b79
  404a9c:	00405a75 	.word	0x00405a75
  404aa0:	00415a7c 	.word	0x00415a7c
  404aa4:	00415a90 	.word	0x00415a90
  404aa8:	00415aa0 	.word	0x00415aa0
				}									
				else if(strncmp(packet.packetData,"getChrgStatus",13)==0)
  404aac:	f107 0308 	add.w	r3, r7, #8
  404ab0:	3301      	adds	r3, #1
  404ab2:	4618      	mov	r0, r3
  404ab4:	4981      	ldr	r1, [pc, #516]	; (404cbc <cmd_task_commandProcesor+0x4ec>)
  404ab6:	220d      	movs	r2, #13
  404ab8:	4b81      	ldr	r3, [pc, #516]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404aba:	4798      	blx	r3
  404abc:	4603      	mov	r3, r0
  404abe:	2b00      	cmp	r3, #0
  404ac0:	d11c      	bne.n	404afc <cmd_task_commandProcesor+0x32c>
				{
					//handle the set time command. 
					sprintf(tempString,"charger status: %x\r\n",ltc2941GetStatus(&ltc2941Config));
  404ac2:	4880      	ldr	r0, [pc, #512]	; (404cc4 <cmd_task_commandProcesor+0x4f4>)
  404ac4:	4b80      	ldr	r3, [pc, #512]	; (404cc8 <cmd_task_commandProcesor+0x4f8>)
  404ac6:	4798      	blx	r3
  404ac8:	4603      	mov	r3, r0
  404aca:	4880      	ldr	r0, [pc, #512]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404acc:	4980      	ldr	r1, [pc, #512]	; (404cd0 <cmd_task_commandProcesor+0x500>)
  404ace:	461a      	mov	r2, r3
  404ad0:	4b80      	ldr	r3, [pc, #512]	; (404cd4 <cmd_task_commandProcesor+0x504>)
  404ad2:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404ad4:	7a3b      	ldrb	r3, [r7, #8]
  404ad6:	2b00      	cmp	r3, #0
  404ad8:	d106      	bne.n	404ae8 <cmd_task_commandProcesor+0x318>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404ada:	4b7f      	ldr	r3, [pc, #508]	; (404cd8 <cmd_task_commandProcesor+0x508>)
  404adc:	685b      	ldr	r3, [r3, #4]
  404ade:	4618      	mov	r0, r3
  404ae0:	497a      	ldr	r1, [pc, #488]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404ae2:	4b7e      	ldr	r3, [pc, #504]	; (404cdc <cmd_task_commandProcesor+0x50c>)
  404ae4:	4798      	blx	r3
  404ae6:	e005      	b.n	404af4 <cmd_task_commandProcesor+0x324>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404ae8:	7a3b      	ldrb	r3, [r7, #8]
  404aea:	2b01      	cmp	r3, #1
  404aec:	d102      	bne.n	404af4 <cmd_task_commandProcesor+0x324>
					{
						dat_sendStringToUsb(tempString);
  404aee:	4877      	ldr	r0, [pc, #476]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404af0:	4b7b      	ldr	r3, [pc, #492]	; (404ce0 <cmd_task_commandProcesor+0x510>)
  404af2:	4798      	blx	r3
					}						
					//don't forward this message on. 						
					forwardCommand = false; 						
  404af4:	2300      	movs	r3, #0
  404af6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404afa:	e0d0      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}	
				else if (strncmp(packet.packetData,"resetPb",7)==0)
  404afc:	f107 0308 	add.w	r3, r7, #8
  404b00:	3301      	adds	r3, #1
  404b02:	4618      	mov	r0, r3
  404b04:	4977      	ldr	r1, [pc, #476]	; (404ce4 <cmd_task_commandProcesor+0x514>)
  404b06:	2207      	movs	r2, #7
  404b08:	4b6d      	ldr	r3, [pc, #436]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404b0a:	4798      	blx	r3
  404b0c:	4603      	mov	r3, r0
  404b0e:	2b00      	cmp	r3, #0
  404b10:	d103      	bne.n	404b1a <cmd_task_commandProcesor+0x34a>
				{
					rstc_start_software_reset(RSTC);											
  404b12:	4875      	ldr	r0, [pc, #468]	; (404ce8 <cmd_task_commandProcesor+0x518>)
  404b14:	4b75      	ldr	r3, [pc, #468]	; (404cec <cmd_task_commandProcesor+0x51c>)
  404b16:	4798      	blx	r3
  404b18:	e0c1      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}	
				else if (strncmp(packet.packetData,"fastChrg1",9)==0)
  404b1a:	f107 0308 	add.w	r3, r7, #8
  404b1e:	3301      	adds	r3, #1
  404b20:	4618      	mov	r0, r3
  404b22:	4973      	ldr	r1, [pc, #460]	; (404cf0 <cmd_task_commandProcesor+0x520>)
  404b24:	2209      	movs	r2, #9
  404b26:	4b66      	ldr	r3, [pc, #408]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404b28:	4798      	blx	r3
  404b2a:	4603      	mov	r3, r0
  404b2c:	2b00      	cmp	r3, #0
  404b2e:	d10a      	bne.n	404b46 <cmd_task_commandProcesor+0x376>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Fast Charge On\r\n");
  404b30:	4870      	ldr	r0, [pc, #448]	; (404cf4 <cmd_task_commandProcesor+0x524>)
  404b32:	4b71      	ldr	r3, [pc, #452]	; (404cf8 <cmd_task_commandProcesor+0x528>)
  404b34:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);	
  404b36:	2005      	movs	r0, #5
  404b38:	2101      	movs	r1, #1
  404b3a:	4b70      	ldr	r3, [pc, #448]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404b3c:	4798      	blx	r3
					forwardCommand = false; 
  404b3e:	2300      	movs	r3, #0
  404b40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404b44:	e0ab      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}
				else if (strncmp(packet.packetData,"fastChrg0",9)==0)
  404b46:	f107 0308 	add.w	r3, r7, #8
  404b4a:	3301      	adds	r3, #1
  404b4c:	4618      	mov	r0, r3
  404b4e:	496c      	ldr	r1, [pc, #432]	; (404d00 <cmd_task_commandProcesor+0x530>)
  404b50:	2209      	movs	r2, #9
  404b52:	4b5b      	ldr	r3, [pc, #364]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404b54:	4798      	blx	r3
  404b56:	4603      	mov	r3, r0
  404b58:	2b00      	cmp	r3, #0
  404b5a:	d10a      	bne.n	404b72 <cmd_task_commandProcesor+0x3a2>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Fast Charge Off\r\n");
  404b5c:	4869      	ldr	r0, [pc, #420]	; (404d04 <cmd_task_commandProcesor+0x534>)
  404b5e:	4b66      	ldr	r3, [pc, #408]	; (404cf8 <cmd_task_commandProcesor+0x528>)
  404b60:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_LOW);
  404b62:	2005      	movs	r0, #5
  404b64:	2100      	movs	r1, #0
  404b66:	4b65      	ldr	r3, [pc, #404]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404b68:	4798      	blx	r3
					forwardCommand = false; 	
  404b6a:	2300      	movs	r3, #0
  404b6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404b70:	e095      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}
				else if (strncmp(packet.packetData,"jacksEn1",9)==0)
  404b72:	f107 0308 	add.w	r3, r7, #8
  404b76:	3301      	adds	r3, #1
  404b78:	4618      	mov	r0, r3
  404b7a:	4963      	ldr	r1, [pc, #396]	; (404d08 <cmd_task_commandProcesor+0x538>)
  404b7c:	2209      	movs	r2, #9
  404b7e:	4b50      	ldr	r3, [pc, #320]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404b80:	4798      	blx	r3
  404b82:	4603      	mov	r3, r0
  404b84:	2b00      	cmp	r3, #0
  404b86:	d10e      	bne.n	404ba6 <cmd_task_commandProcesor+0x3d6>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Jacks Enabled\r\n");
  404b88:	4860      	ldr	r0, [pc, #384]	; (404d0c <cmd_task_commandProcesor+0x53c>)
  404b8a:	4b5b      	ldr	r3, [pc, #364]	; (404cf8 <cmd_task_commandProcesor+0x528>)
  404b8c:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  404b8e:	2001      	movs	r0, #1
  404b90:	2100      	movs	r1, #0
  404b92:	4b5a      	ldr	r3, [pc, #360]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404b94:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  404b96:	2000      	movs	r0, #0
  404b98:	2100      	movs	r1, #0
  404b9a:	4b58      	ldr	r3, [pc, #352]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404b9c:	4798      	blx	r3
					forwardCommand = false; 	
  404b9e:	2300      	movs	r3, #0
  404ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404ba4:	e07b      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}
				else if (strncmp(packet.packetData,"jacksEn0",9)==0)
  404ba6:	f107 0308 	add.w	r3, r7, #8
  404baa:	3301      	adds	r3, #1
  404bac:	4618      	mov	r0, r3
  404bae:	4958      	ldr	r1, [pc, #352]	; (404d10 <cmd_task_commandProcesor+0x540>)
  404bb0:	2209      	movs	r2, #9
  404bb2:	4b43      	ldr	r3, [pc, #268]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404bb4:	4798      	blx	r3
  404bb6:	4603      	mov	r3, r0
  404bb8:	2b00      	cmp	r3, #0
  404bba:	d10e      	bne.n	404bda <cmd_task_commandProcesor+0x40a>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Jacks Disabled\r\n");
  404bbc:	4855      	ldr	r0, [pc, #340]	; (404d14 <cmd_task_commandProcesor+0x544>)
  404bbe:	4b4e      	ldr	r3, [pc, #312]	; (404cf8 <cmd_task_commandProcesor+0x528>)
  404bc0:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  404bc2:	2001      	movs	r0, #1
  404bc4:	2101      	movs	r1, #1
  404bc6:	4b4d      	ldr	r3, [pc, #308]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404bc8:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  404bca:	2000      	movs	r0, #0
  404bcc:	2101      	movs	r1, #1
  404bce:	4b4b      	ldr	r3, [pc, #300]	; (404cfc <cmd_task_commandProcesor+0x52c>)
  404bd0:	4798      	blx	r3
					forwardCommand = false; 	
  404bd2:	2300      	movs	r3, #0
  404bd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  404bd8:	e061      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}				
				else if (strncmp(packet.packetData,"crashSystem",11)==0)
  404bda:	f107 0308 	add.w	r3, r7, #8
  404bde:	3301      	adds	r3, #1
  404be0:	4618      	mov	r0, r3
  404be2:	494d      	ldr	r1, [pc, #308]	; (404d18 <cmd_task_commandProcesor+0x548>)
  404be4:	220b      	movs	r2, #11
  404be6:	4b36      	ldr	r3, [pc, #216]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404be8:	4798      	blx	r3
  404bea:	4603      	mov	r3, r0
  404bec:	2b00      	cmp	r3, #0
  404bee:	d109      	bne.n	404c04 <cmd_task_commandProcesor+0x434>
					//sprintf(1234213,"crashity crash crash!%s\r\n",NULL);
					//assert(false);
					//*((unsigned int*)0) = 0xDEAD;
					//uint32_t* deadPointer = malloc(10000000000);
					//strncpy(deadPointer+4, deadPointer+6, 10000);
					memcpy(0x20000000, packet.packetData, 1000000);
  404bf0:	f107 0308 	add.w	r3, r7, #8
  404bf4:	3301      	adds	r3, #1
  404bf6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  404bfa:	4619      	mov	r1, r3
  404bfc:	4a47      	ldr	r2, [pc, #284]	; (404d1c <cmd_task_commandProcesor+0x54c>)
  404bfe:	4b48      	ldr	r3, [pc, #288]	; (404d20 <cmd_task_commandProcesor+0x550>)
  404c00:	4798      	blx	r3
  404c02:	e04c      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
										
				}
				else if (strncmp(packet.packetData,"enterBootloader",11)==0)
  404c04:	f107 0308 	add.w	r3, r7, #8
  404c08:	3301      	adds	r3, #1
  404c0a:	4618      	mov	r0, r3
  404c0c:	4945      	ldr	r1, [pc, #276]	; (404d24 <cmd_task_commandProcesor+0x554>)
  404c0e:	220b      	movs	r2, #11
  404c10:	4b2b      	ldr	r3, [pc, #172]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404c12:	4798      	blx	r3
  404c14:	4603      	mov	r3, r0
  404c16:	2b00      	cmp	r3, #0
  404c18:	d108      	bne.n	404c2c <cmd_task_commandProcesor+0x45c>
				{
					//clear GPNVM bit 1 to get the processor to boot from the ROM
					efc_perform_command(EFC0,EFC_FCMD_CGPB,1);
  404c1a:	4843      	ldr	r0, [pc, #268]	; (404d28 <cmd_task_commandProcesor+0x558>)
  404c1c:	210c      	movs	r1, #12
  404c1e:	2201      	movs	r2, #1
  404c20:	4b42      	ldr	r3, [pc, #264]	; (404d2c <cmd_task_commandProcesor+0x55c>)
  404c22:	4798      	blx	r3
					//restart the processor, so we enter the ROM bootloader. 
					rstc_start_software_reset(RSTC);								
  404c24:	4830      	ldr	r0, [pc, #192]	; (404ce8 <cmd_task_commandProcesor+0x518>)
  404c26:	4b31      	ldr	r3, [pc, #196]	; (404cec <cmd_task_commandProcesor+0x51c>)
  404c28:	4798      	blx	r3
  404c2a:	e038      	b.n	404c9e <cmd_task_commandProcesor+0x4ce>
				}
				else if(strncmp(packet.packetData,"pbVersion",9)==0)
  404c2c:	f107 0308 	add.w	r3, r7, #8
  404c30:	3301      	adds	r3, #1
  404c32:	4618      	mov	r0, r3
  404c34:	493e      	ldr	r1, [pc, #248]	; (404d30 <cmd_task_commandProcesor+0x560>)
  404c36:	2209      	movs	r2, #9
  404c38:	4b21      	ldr	r3, [pc, #132]	; (404cc0 <cmd_task_commandProcesor+0x4f0>)
  404c3a:	4798      	blx	r3
  404c3c:	4603      	mov	r3, r0
  404c3e:	2b00      	cmp	r3, #0
  404c40:	d12d      	bne.n	404c9e <cmd_task_commandProcesor+0x4ce>
				{
					sprintf(tempString," PB VERSION %s\r\n", VERSION);
  404c42:	4822      	ldr	r0, [pc, #136]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c44:	493b      	ldr	r1, [pc, #236]	; (404d34 <cmd_task_commandProcesor+0x564>)
  404c46:	4a3c      	ldr	r2, [pc, #240]	; (404d38 <cmd_task_commandProcesor+0x568>)
  404c48:	4b22      	ldr	r3, [pc, #136]	; (404cd4 <cmd_task_commandProcesor+0x504>)
  404c4a:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404c4c:	7a3b      	ldrb	r3, [r7, #8]
  404c4e:	2b00      	cmp	r3, #0
  404c50:	d106      	bne.n	404c60 <cmd_task_commandProcesor+0x490>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404c52:	4b21      	ldr	r3, [pc, #132]	; (404cd8 <cmd_task_commandProcesor+0x508>)
  404c54:	685b      	ldr	r3, [r3, #4]
  404c56:	4618      	mov	r0, r3
  404c58:	491c      	ldr	r1, [pc, #112]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c5a:	4b20      	ldr	r3, [pc, #128]	; (404cdc <cmd_task_commandProcesor+0x50c>)
  404c5c:	4798      	blx	r3
  404c5e:	e005      	b.n	404c6c <cmd_task_commandProcesor+0x49c>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404c60:	7a3b      	ldrb	r3, [r7, #8]
  404c62:	2b01      	cmp	r3, #1
  404c64:	d102      	bne.n	404c6c <cmd_task_commandProcesor+0x49c>
					{
						dat_sendStringToUsb(tempString);
  404c66:	4819      	ldr	r0, [pc, #100]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c68:	4b1d      	ldr	r3, [pc, #116]	; (404ce0 <cmd_task_commandProcesor+0x510>)
  404c6a:	4798      	blx	r3
					}
					sprintf(tempString,"BUILD DATE: %s %s\r\n", __DATE__,__TIME__);
  404c6c:	4817      	ldr	r0, [pc, #92]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c6e:	4933      	ldr	r1, [pc, #204]	; (404d3c <cmd_task_commandProcesor+0x56c>)
  404c70:	4a33      	ldr	r2, [pc, #204]	; (404d40 <cmd_task_commandProcesor+0x570>)
  404c72:	4b34      	ldr	r3, [pc, #208]	; (404d44 <cmd_task_commandProcesor+0x574>)
  404c74:	4c17      	ldr	r4, [pc, #92]	; (404cd4 <cmd_task_commandProcesor+0x504>)
  404c76:	47a0      	blx	r4
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404c78:	7a3b      	ldrb	r3, [r7, #8]
  404c7a:	2b00      	cmp	r3, #0
  404c7c:	d106      	bne.n	404c8c <cmd_task_commandProcesor+0x4bc>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404c7e:	4b16      	ldr	r3, [pc, #88]	; (404cd8 <cmd_task_commandProcesor+0x508>)
  404c80:	685b      	ldr	r3, [r3, #4]
  404c82:	4618      	mov	r0, r3
  404c84:	4911      	ldr	r1, [pc, #68]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c86:	4b15      	ldr	r3, [pc, #84]	; (404cdc <cmd_task_commandProcesor+0x50c>)
  404c88:	4798      	blx	r3
  404c8a:	e005      	b.n	404c98 <cmd_task_commandProcesor+0x4c8>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404c8c:	7a3b      	ldrb	r3, [r7, #8]
  404c8e:	2b01      	cmp	r3, #1
  404c90:	d102      	bne.n	404c98 <cmd_task_commandProcesor+0x4c8>
					{
						dat_sendStringToUsb(tempString);
  404c92:	480e      	ldr	r0, [pc, #56]	; (404ccc <cmd_task_commandProcesor+0x4fc>)
  404c94:	4b12      	ldr	r3, [pc, #72]	; (404ce0 <cmd_task_commandProcesor+0x510>)
  404c96:	4798      	blx	r3
					}
					forwardCommand = false; 
  404c98:	2300      	movs	r3, #0
  404c9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}				
				if(forwardCommand == true)
  404c9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
  404ca2:	2b00      	cmp	r3, #0
  404ca4:	d005      	beq.n	404cb2 <cmd_task_commandProcesor+0x4e2>
				{
					//forward the command to the data board. 
					dat_sendPacketToDataBoard(&packet); 	
  404ca6:	f107 0308 	add.w	r3, r7, #8
  404caa:	4618      	mov	r0, r3
  404cac:	4b26      	ldr	r3, [pc, #152]	; (404d48 <cmd_task_commandProcesor+0x578>)
  404cae:	4798      	blx	r3
				}				
			}
		}
	}
  404cb0:	e5ac      	b.n	40480c <cmd_task_commandProcesor+0x3c>
  404cb2:	e5ab      	b.n	40480c <cmd_task_commandProcesor+0x3c>
		
}
  404cb4:	377c      	adds	r7, #124	; 0x7c
  404cb6:	46bd      	mov	sp, r7
  404cb8:	bd90      	pop	{r4, r7, pc}
  404cba:	bf00      	nop
  404cbc:	00415ab0 	.word	0x00415ab0
  404cc0:	0040cbc9 	.word	0x0040cbc9
  404cc4:	200001d4 	.word	0x200001d4
  404cc8:	00405bcd 	.word	0x00405bcd
  404ccc:	20000e0c 	.word	0x20000e0c
  404cd0:	00415ac0 	.word	0x00415ac0
  404cd4:	0040ca3d 	.word	0x0040ca3d
  404cd8:	200002d8 	.word	0x200002d8
  404cdc:	00407ae5 	.word	0x00407ae5
  404ce0:	00405185 	.word	0x00405185
  404ce4:	00415ad8 	.word	0x00415ad8
  404ce8:	400e1400 	.word	0x400e1400
  404cec:	0040a68d 	.word	0x0040a68d
  404cf0:	00415ae0 	.word	0x00415ae0
  404cf4:	00415aec 	.word	0x00415aec
  404cf8:	00405129 	.word	0x00405129
  404cfc:	0040546d 	.word	0x0040546d
  404d00:	00415b08 	.word	0x00415b08
  404d04:	00415b14 	.word	0x00415b14
  404d08:	00415b30 	.word	0x00415b30
  404d0c:	00415b3c 	.word	0x00415b3c
  404d10:	00415b58 	.word	0x00415b58
  404d14:	00415b64 	.word	0x00415b64
  404d18:	00415b80 	.word	0x00415b80
  404d1c:	000f4240 	.word	0x000f4240
  404d20:	0040c6f9 	.word	0x0040c6f9
  404d24:	00415b8c 	.word	0x00415b8c
  404d28:	400e0a00 	.word	0x400e0a00
  404d2c:	00401d61 	.word	0x00401d61
  404d30:	00415b9c 	.word	0x00415b9c
  404d34:	00415ba8 	.word	0x00415ba8
  404d38:	00415bbc 	.word	0x00415bbc
  404d3c:	00415bc4 	.word	0x00415bc4
  404d40:	00415bd8 	.word	0x00415bd8
  404d44:	00415be4 	.word	0x00415be4
  404d48:	00405151 	.word	0x00405151

00404d4c <getTimeString>:
char timeString[100] = {0};
static char* getTimeString()
{
  404d4c:	b590      	push	{r4, r7, lr}
  404d4e:	b087      	sub	sp, #28
  404d50:	af02      	add	r7, sp, #8
	uint32_t hour, minute, second;
	rtc_get_time(RTC,&hour,&minute,&second);
  404d52:	f107 010c 	add.w	r1, r7, #12
  404d56:	f107 0208 	add.w	r2, r7, #8
  404d5a:	1d3b      	adds	r3, r7, #4
  404d5c:	4807      	ldr	r0, [pc, #28]	; (404d7c <getTimeString+0x30>)
  404d5e:	4c08      	ldr	r4, [pc, #32]	; (404d80 <getTimeString+0x34>)
  404d60:	47a0      	blx	r4
	sprintf(timeString,"%02d:%02d:%02d\r\n",hour,minute,second);
  404d62:	68fa      	ldr	r2, [r7, #12]
  404d64:	68bb      	ldr	r3, [r7, #8]
  404d66:	6879      	ldr	r1, [r7, #4]
  404d68:	9100      	str	r1, [sp, #0]
  404d6a:	4806      	ldr	r0, [pc, #24]	; (404d84 <getTimeString+0x38>)
  404d6c:	4906      	ldr	r1, [pc, #24]	; (404d88 <getTimeString+0x3c>)
  404d6e:	4c07      	ldr	r4, [pc, #28]	; (404d8c <getTimeString+0x40>)
  404d70:	47a0      	blx	r4
	return timeString;
  404d72:	4b04      	ldr	r3, [pc, #16]	; (404d84 <getTimeString+0x38>)
}
  404d74:	4618      	mov	r0, r3
  404d76:	3714      	adds	r7, #20
  404d78:	46bd      	mov	sp, r7
  404d7a:	bd90      	pop	{r4, r7, pc}
  404d7c:	400e1460 	.word	0x400e1460
  404d80:	0040a155 	.word	0x0040a155
  404d84:	20000f0c 	.word	0x20000f0c
  404d88:	00415bf0 	.word	0x00415bf0
  404d8c:	0040ca3d 	.word	0x0040ca3d

00404d90 <cmd_initPacketStructure>:


void cmd_initPacketStructure(cmd_commandPacket_t* packet)
{
  404d90:	b580      	push	{r7, lr}
  404d92:	b082      	sub	sp, #8
  404d94:	af00      	add	r7, sp, #0
  404d96:	6078      	str	r0, [r7, #4]
	memset(packet->packetData,0,CMD_INCOMING_CMD_SIZE_MAX);
  404d98:	687b      	ldr	r3, [r7, #4]
  404d9a:	3301      	adds	r3, #1
  404d9c:	4618      	mov	r0, r3
  404d9e:	2100      	movs	r1, #0
  404da0:	2264      	movs	r2, #100	; 0x64
  404da2:	4b04      	ldr	r3, [pc, #16]	; (404db4 <cmd_initPacketStructure+0x24>)
  404da4:	4798      	blx	r3
	packet->packetSize = 0;
  404da6:	687b      	ldr	r3, [r7, #4]
  404da8:	2200      	movs	r2, #0
  404daa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
}
  404dae:	3708      	adds	r7, #8
  404db0:	46bd      	mov	sp, r7
  404db2:	bd80      	pop	{r7, pc}
  404db4:	0040c82d 	.word	0x0040c82d

00404db8 <cmd_sendDateTimeCommand>:
			//this is an error, we should log it.
		}	
	}
}
status_t cmd_sendDateTimeCommand()
{
  404db8:	b5f0      	push	{r4, r5, r6, r7, lr}
  404dba:	b0a9      	sub	sp, #164	; 0xa4
  404dbc:	af06      	add	r7, sp, #24
	cmd_commandPacket_t packet;
	packet.packetSource = CMD_COMMAND_SOURCE_LOCAL; 
  404dbe:	2302      	movs	r3, #2
  404dc0:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t hour, minute, second, year, month, day, dow; 
	rtc_get_date(RTC,&year,&month,&day, &dow); 
  404dc4:	f107 0110 	add.w	r1, r7, #16
  404dc8:	f107 020c 	add.w	r2, r7, #12
  404dcc:	f107 0308 	add.w	r3, r7, #8
  404dd0:	1d38      	adds	r0, r7, #4
  404dd2:	9000      	str	r0, [sp, #0]
  404dd4:	4821      	ldr	r0, [pc, #132]	; (404e5c <cmd_sendDateTimeCommand+0xa4>)
  404dd6:	4c22      	ldr	r4, [pc, #136]	; (404e60 <cmd_sendDateTimeCommand+0xa8>)
  404dd8:	47a0      	blx	r4
	rtc_get_time(RTC,&hour,&minute,&second); 
  404dda:	f107 011c 	add.w	r1, r7, #28
  404dde:	f107 0218 	add.w	r2, r7, #24
  404de2:	f107 0314 	add.w	r3, r7, #20
  404de6:	481d      	ldr	r0, [pc, #116]	; (404e5c <cmd_sendDateTimeCommand+0xa4>)
  404de8:	4c1e      	ldr	r4, [pc, #120]	; (404e64 <cmd_sendDateTimeCommand+0xac>)
  404dea:	47a0      	blx	r4
	sprintf(packet.packetData,"setTime%04d-%02d-%02d-%02d-%02d:%02d:%02d\r\n", year, month, day, dow, hour, minute, second ); 	
  404dec:	693a      	ldr	r2, [r7, #16]
  404dee:	68fb      	ldr	r3, [r7, #12]
  404df0:	f8d7 e008 	ldr.w	lr, [r7, #8]
  404df4:	687e      	ldr	r6, [r7, #4]
  404df6:	69fd      	ldr	r5, [r7, #28]
  404df8:	69bc      	ldr	r4, [r7, #24]
  404dfa:	6978      	ldr	r0, [r7, #20]
  404dfc:	f107 0120 	add.w	r1, r7, #32
  404e00:	3101      	adds	r1, #1
  404e02:	f8cd e000 	str.w	lr, [sp]
  404e06:	9601      	str	r6, [sp, #4]
  404e08:	9502      	str	r5, [sp, #8]
  404e0a:	9403      	str	r4, [sp, #12]
  404e0c:	9004      	str	r0, [sp, #16]
  404e0e:	4608      	mov	r0, r1
  404e10:	4915      	ldr	r1, [pc, #84]	; (404e68 <cmd_sendDateTimeCommand+0xb0>)
  404e12:	4c16      	ldr	r4, [pc, #88]	; (404e6c <cmd_sendDateTimeCommand+0xb4>)
  404e14:	47a0      	blx	r4
	packet.packetSize = strlen(packet.packetData); 
  404e16:	f107 0320 	add.w	r3, r7, #32
  404e1a:	3301      	adds	r3, #1
  404e1c:	4618      	mov	r0, r3
  404e1e:	4b14      	ldr	r3, [pc, #80]	; (404e70 <cmd_sendDateTimeCommand+0xb8>)
  404e20:	4798      	blx	r3
  404e22:	4603      	mov	r3, r0
  404e24:	b29b      	uxth	r3, r3
  404e26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if(cmd_queue_commandQueue != NULL)
  404e2a:	4b12      	ldr	r3, [pc, #72]	; (404e74 <cmd_sendDateTimeCommand+0xbc>)
  404e2c:	681b      	ldr	r3, [r3, #0]
  404e2e:	2b00      	cmp	r3, #0
  404e30:	d00e      	beq.n	404e50 <cmd_sendDateTimeCommand+0x98>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  404e32:	4b10      	ldr	r3, [pc, #64]	; (404e74 <cmd_sendDateTimeCommand+0xbc>)
  404e34:	681a      	ldr	r2, [r3, #0]
  404e36:	f107 0320 	add.w	r3, r7, #32
  404e3a:	4610      	mov	r0, r2
  404e3c:	4619      	mov	r1, r3
  404e3e:	2205      	movs	r2, #5
  404e40:	2300      	movs	r3, #0
  404e42:	4c0d      	ldr	r4, [pc, #52]	; (404e78 <cmd_sendDateTimeCommand+0xc0>)
  404e44:	47a0      	blx	r4
  404e46:	4603      	mov	r3, r0
  404e48:	2b01      	cmp	r3, #1
  404e4a:	d001      	beq.n	404e50 <cmd_sendDateTimeCommand+0x98>
		{
			//this is an error, we should log it.
			return STATUS_FAIL;
  404e4c:	2301      	movs	r3, #1
  404e4e:	e000      	b.n	404e52 <cmd_sendDateTimeCommand+0x9a>
		}	
	}
	return STATUS_PASS;	
  404e50:	2300      	movs	r3, #0
	
} 
  404e52:	4618      	mov	r0, r3
  404e54:	378c      	adds	r7, #140	; 0x8c
  404e56:	46bd      	mov	sp, r7
  404e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e5a:	bf00      	nop
  404e5c:	400e1460 	.word	0x400e1460
  404e60:	0040a321 	.word	0x0040a321
  404e64:	0040a155 	.word	0x0040a155
  404e68:	00415c14 	.word	0x00415c14
  404e6c:	0040ca3d 	.word	0x0040ca3d
  404e70:	0040cb69 	.word	0x0040cb69
  404e74:	20000e08 	.word	0x20000e08
  404e78:	0040867d 	.word	0x0040867d

00404e7c <setTimeFromString>:
//static functions


static void setTimeFromString(char* dateTime)
{
  404e7c:	b590      	push	{r4, r7, lr}
  404e7e:	b091      	sub	sp, #68	; 0x44
  404e80:	af06      	add	r7, sp, #24
  404e82:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second;
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  404e84:	f107 0224 	add.w	r2, r7, #36	; 0x24
  404e88:	f107 0320 	add.w	r3, r7, #32
  404e8c:	f107 011c 	add.w	r1, r7, #28
  404e90:	9100      	str	r1, [sp, #0]
  404e92:	f107 0118 	add.w	r1, r7, #24
  404e96:	9101      	str	r1, [sp, #4]
  404e98:	f107 0114 	add.w	r1, r7, #20
  404e9c:	9102      	str	r1, [sp, #8]
  404e9e:	f107 0110 	add.w	r1, r7, #16
  404ea2:	9103      	str	r1, [sp, #12]
  404ea4:	f107 010c 	add.w	r1, r7, #12
  404ea8:	9104      	str	r1, [sp, #16]
  404eaa:	6878      	ldr	r0, [r7, #4]
  404eac:	490b      	ldr	r1, [pc, #44]	; (404edc <setTimeFromString+0x60>)
  404eae:	4c0c      	ldr	r4, [pc, #48]	; (404ee0 <setTimeFromString+0x64>)
  404eb0:	47a0      	blx	r4
  404eb2:	4603      	mov	r3, r0
  404eb4:	2b07      	cmp	r3, #7
  404eb6:	d10d      	bne.n	404ed4 <setTimeFromString+0x58>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second);
  404eb8:	6979      	ldr	r1, [r7, #20]
  404eba:	693a      	ldr	r2, [r7, #16]
  404ebc:	68fb      	ldr	r3, [r7, #12]
  404ebe:	4809      	ldr	r0, [pc, #36]	; (404ee4 <setTimeFromString+0x68>)
  404ec0:	4c09      	ldr	r4, [pc, #36]	; (404ee8 <setTimeFromString+0x6c>)
  404ec2:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow);
  404ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
  404ec6:	6a3a      	ldr	r2, [r7, #32]
  404ec8:	69fb      	ldr	r3, [r7, #28]
  404eca:	69b8      	ldr	r0, [r7, #24]
  404ecc:	9000      	str	r0, [sp, #0]
  404ece:	4805      	ldr	r0, [pc, #20]	; (404ee4 <setTimeFromString+0x68>)
  404ed0:	4c06      	ldr	r4, [pc, #24]	; (404eec <setTimeFromString+0x70>)
  404ed2:	47a0      	blx	r4
	}
}
  404ed4:	372c      	adds	r7, #44	; 0x2c
  404ed6:	46bd      	mov	sp, r7
  404ed8:	bd90      	pop	{r4, r7, pc}
  404eda:	bf00      	nop
  404edc:	00415c40 	.word	0x00415c40
  404ee0:	0040ca89 	.word	0x0040ca89
  404ee4:	400e1460 	.word	0x400e1460
  404ee8:	0040a219 	.word	0x0040a219
  404eec:	0040a409 	.word	0x0040a409

00404ef0 <dat_task_dataRouter>:
 *	the daughter board UART 
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void dat_task_dataRouter(void *pvParameters)
{
  404ef0:	b590      	push	{r4, r7, lr}
  404ef2:	b0b9      	sub	sp, #228	; 0xe4
  404ef4:	af00      	add	r7, sp, #0
  404ef6:	6078      	str	r0, [r7, #4]
	dataRouterConfig = (dat_dataRouterConfig_t*)pvParameters; 
  404ef8:	4b7b      	ldr	r3, [pc, #492]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404efa:	687a      	ldr	r2, [r7, #4]
  404efc:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t daughterBoardPacket, usbPacket;
	//mgr_eventMessage_t eventMessage; 
	//initialize the packets
	cmd_initPacketStructure(&daughterBoardPacket);
  404efe:	f107 0374 	add.w	r3, r7, #116	; 0x74
  404f02:	4618      	mov	r0, r3
  404f04:	4b79      	ldr	r3, [pc, #484]	; (4050ec <dat_task_dataRouter+0x1fc>)
  404f06:	4798      	blx	r3
	daughterBoardPacket.packetSource = CMD_COMMAND_SOURCE_DAUGHTER; 
  404f08:	2300      	movs	r3, #0
  404f0a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	cmd_initPacketStructure(&usbPacket);
  404f0e:	f107 030c 	add.w	r3, r7, #12
  404f12:	4618      	mov	r0, r3
  404f14:	4b75      	ldr	r3, [pc, #468]	; (4050ec <dat_task_dataRouter+0x1fc>)
  404f16:	4798      	blx	r3
	usbPacket.packetSource = CMD_COMMAND_SOURCE_USB;
  404f18:	2301      	movs	r3, #1
  404f1a:	733b      	strb	r3, [r7, #12]
		
	if(drv_uart_isInit(dataRouterConfig->daughterBoard) != STATUS_PASS)
  404f1c:	4b72      	ldr	r3, [pc, #456]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404f1e:	681b      	ldr	r3, [r3, #0]
  404f20:	685b      	ldr	r3, [r3, #4]
  404f22:	4618      	mov	r0, r3
  404f24:	4b72      	ldr	r3, [pc, #456]	; (4050f0 <dat_task_dataRouter+0x200>)
  404f26:	4798      	blx	r3
  404f28:	4603      	mov	r3, r0
  404f2a:	2b00      	cmp	r3, #0
  404f2c:	d000      	beq.n	404f30 <dat_task_dataRouter+0x40>
	{
		//fail!
		return; 
  404f2e:	e0d7      	b.n	4050e0 <dat_task_dataRouter+0x1f0>
	}
	
	if(drv_uart_isInit(dataRouterConfig->dataBoardUart) != STATUS_PASS)
  404f30:	4b6d      	ldr	r3, [pc, #436]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404f32:	681b      	ldr	r3, [r3, #0]
  404f34:	681b      	ldr	r3, [r3, #0]
  404f36:	4618      	mov	r0, r3
  404f38:	4b6d      	ldr	r3, [pc, #436]	; (4050f0 <dat_task_dataRouter+0x200>)
  404f3a:	4798      	blx	r3
  404f3c:	4603      	mov	r3, r0
  404f3e:	2b00      	cmp	r3, #0
  404f40:	d000      	beq.n	404f44 <dat_task_dataRouter+0x54>
	{
		//fail!
		return;
  404f42:	e0cd      	b.n	4050e0 <dat_task_dataRouter+0x1f0>
	}

	char receivedByte = 0x00; 
  404f44:	2300      	movs	r3, #0
  404f46:	72fb      	strb	r3, [r7, #11]
	int receivedUsbData = 0x00; 
  404f48:	2300      	movs	r3, #0
  404f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	while(1)
	{
		//try to read byte from databoard mcu
		if(drv_uart_getChar(dataRouterConfig->dataBoardUart, &receivedByte) == STATUS_PASS)
  404f4e:	4b66      	ldr	r3, [pc, #408]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404f50:	681b      	ldr	r3, [r3, #0]
  404f52:	681a      	ldr	r2, [r3, #0]
  404f54:	f107 030b 	add.w	r3, r7, #11
  404f58:	4610      	mov	r0, r2
  404f5a:	4619      	mov	r1, r3
  404f5c:	4b65      	ldr	r3, [pc, #404]	; (4050f4 <dat_task_dataRouter+0x204>)
  404f5e:	4798      	blx	r3
  404f60:	4603      	mov	r3, r0
  404f62:	2b00      	cmp	r3, #0
  404f64:	d134      	bne.n	404fd0 <dat_task_dataRouter+0xe0>
		{
			if((receivedByte & 0xA0) == 0xA0)
  404f66:	7afb      	ldrb	r3, [r7, #11]
  404f68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  404f6c:	2ba0      	cmp	r3, #160	; 0xa0
  404f6e:	d11d      	bne.n	404fac <dat_task_dataRouter+0xbc>
			{
				if(receivedByte == POWER_BOARD_CMD_TOGGLE_JACKS)
  404f70:	7afb      	ldrb	r3, [r7, #11]
  404f72:	2baa      	cmp	r3, #170	; 0xaa
  404f74:	d114      	bne.n	404fa0 <dat_task_dataRouter+0xb0>
				{
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  404f76:	2001      	movs	r0, #1
  404f78:	2101      	movs	r1, #1
  404f7a:	4b5f      	ldr	r3, [pc, #380]	; (4050f8 <dat_task_dataRouter+0x208>)
  404f7c:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  404f7e:	2000      	movs	r0, #0
  404f80:	2101      	movs	r1, #1
  404f82:	4b5d      	ldr	r3, [pc, #372]	; (4050f8 <dat_task_dataRouter+0x208>)
  404f84:	4798      	blx	r3
					vTaskDelay(500);
  404f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404f8a:	4b5c      	ldr	r3, [pc, #368]	; (4050fc <dat_task_dataRouter+0x20c>)
  404f8c:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  404f8e:	2001      	movs	r0, #1
  404f90:	2100      	movs	r1, #0
  404f92:	4b59      	ldr	r3, [pc, #356]	; (4050f8 <dat_task_dataRouter+0x208>)
  404f94:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  404f96:	2000      	movs	r0, #0
  404f98:	2100      	movs	r1, #0
  404f9a:	4b57      	ldr	r3, [pc, #348]	; (4050f8 <dat_task_dataRouter+0x208>)
  404f9c:	4798      	blx	r3
  404f9e:	e01a      	b.n	404fd6 <dat_task_dataRouter+0xe6>
				}
				else if(receivedByte == POWER_BOARD_CMD_GET_TIME)
  404fa0:	7afb      	ldrb	r3, [r7, #11]
  404fa2:	2bac      	cmp	r3, #172	; 0xac
  404fa4:	d117      	bne.n	404fd6 <dat_task_dataRouter+0xe6>
				{
					cmd_sendDateTimeCommand();
  404fa6:	4b56      	ldr	r3, [pc, #344]	; (405100 <dat_task_dataRouter+0x210>)
  404fa8:	4798      	blx	r3
  404faa:	e014      	b.n	404fd6 <dat_task_dataRouter+0xe6>
				}			
			}
			else
			{			
				//if byte exists, pass through to the daughter board and USB (if connected)
				drv_uart_putChar(dataRouterConfig->daughterBoard, receivedByte); 
  404fac:	4b4e      	ldr	r3, [pc, #312]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404fae:	681b      	ldr	r3, [r3, #0]
  404fb0:	685a      	ldr	r2, [r3, #4]
  404fb2:	7afb      	ldrb	r3, [r7, #11]
  404fb4:	4610      	mov	r0, r2
  404fb6:	4619      	mov	r1, r3
  404fb8:	4b52      	ldr	r3, [pc, #328]	; (405104 <dat_task_dataRouter+0x214>)
  404fba:	4798      	blx	r3
				if(udi_cdc_is_tx_ready() == true)
  404fbc:	4b52      	ldr	r3, [pc, #328]	; (405108 <dat_task_dataRouter+0x218>)
  404fbe:	4798      	blx	r3
  404fc0:	4603      	mov	r3, r0
  404fc2:	2b00      	cmp	r3, #0
  404fc4:	d007      	beq.n	404fd6 <dat_task_dataRouter+0xe6>
				{
					udi_cdc_putc(receivedByte); 
  404fc6:	7afb      	ldrb	r3, [r7, #11]
  404fc8:	4618      	mov	r0, r3
  404fca:	4b50      	ldr	r3, [pc, #320]	; (40510c <dat_task_dataRouter+0x21c>)
  404fcc:	4798      	blx	r3
  404fce:	e002      	b.n	404fd6 <dat_task_dataRouter+0xe6>
			}
			
		}
		else
		{
			vTaskDelay(1);
  404fd0:	2001      	movs	r0, #1
  404fd2:	4b4a      	ldr	r3, [pc, #296]	; (4050fc <dat_task_dataRouter+0x20c>)
  404fd4:	4798      	blx	r3
		}

				
		//try to read byte from daughter board
		if(drv_uart_getChar(dataRouterConfig->daughterBoard, &receivedByte) == STATUS_PASS)
  404fd6:	4b44      	ldr	r3, [pc, #272]	; (4050e8 <dat_task_dataRouter+0x1f8>)
  404fd8:	681b      	ldr	r3, [r3, #0]
  404fda:	685a      	ldr	r2, [r3, #4]
  404fdc:	f107 030b 	add.w	r3, r7, #11
  404fe0:	4610      	mov	r0, r2
  404fe2:	4619      	mov	r1, r3
  404fe4:	4b43      	ldr	r3, [pc, #268]	; (4050f4 <dat_task_dataRouter+0x204>)
  404fe6:	4798      	blx	r3
  404fe8:	4603      	mov	r3, r0
  404fea:	2b00      	cmp	r3, #0
  404fec:	d133      	bne.n	405056 <dat_task_dataRouter+0x166>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(daughterBoardPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command. 
  404fee:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  404ff2:	2b62      	cmp	r3, #98	; 0x62
  404ff4:	d82a      	bhi.n	40504c <dat_task_dataRouter+0x15c>
			{				
				daughterBoardPacket.packetData[daughterBoardPacket.packetSize++] = receivedByte;				
  404ff6:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  404ffa:	1c5a      	adds	r2, r3, #1
  404ffc:	b292      	uxth	r2, r2
  404ffe:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
  405002:	7afa      	ldrb	r2, [r7, #11]
  405004:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
  405008:	440b      	add	r3, r1
  40500a:	f803 2c6b 	strb.w	r2, [r3, #-107]
				if(receivedByte == '\n')
  40500e:	7afb      	ldrb	r3, [r7, #11]
  405010:	2b0a      	cmp	r3, #10
  405012:	d120      	bne.n	405056 <dat_task_dataRouter+0x166>
				{
					//make sure the packet is null terminated
					daughterBoardPacket.packetData[daughterBoardPacket.packetSize] = 0x00;
  405014:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  405018:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
  40501c:	4413      	add	r3, r2
  40501e:	2200      	movs	r2, #0
  405020:	f803 2c6b 	strb.w	r2, [r3, #-107]
					if(cmd_queue_commandQueue != NULL)
  405024:	4b3a      	ldr	r3, [pc, #232]	; (405110 <dat_task_dataRouter+0x220>)
  405026:	681b      	ldr	r3, [r3, #0]
  405028:	2b00      	cmp	r3, #0
  40502a:	d009      	beq.n	405040 <dat_task_dataRouter+0x150>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &daughterBoardPacket,5) != TRUE)
  40502c:	4b38      	ldr	r3, [pc, #224]	; (405110 <dat_task_dataRouter+0x220>)
  40502e:	681a      	ldr	r2, [r3, #0]
  405030:	f107 0374 	add.w	r3, r7, #116	; 0x74
  405034:	4610      	mov	r0, r2
  405036:	4619      	mov	r1, r3
  405038:	2205      	movs	r2, #5
  40503a:	2300      	movs	r3, #0
  40503c:	4c35      	ldr	r4, [pc, #212]	; (405114 <dat_task_dataRouter+0x224>)
  40503e:	47a0      	blx	r4
						{
							//this is an error, we should log it. 
						}						
					}
					//clear the packet for the next one. 
					cmd_initPacketStructure(&daughterBoardPacket);
  405040:	f107 0374 	add.w	r3, r7, #116	; 0x74
  405044:	4618      	mov	r0, r3
  405046:	4b29      	ldr	r3, [pc, #164]	; (4050ec <dat_task_dataRouter+0x1fc>)
  405048:	4798      	blx	r3
  40504a:	e004      	b.n	405056 <dat_task_dataRouter+0x166>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&daughterBoardPacket);
  40504c:	f107 0374 	add.w	r3, r7, #116	; 0x74
  405050:	4618      	mov	r0, r3
  405052:	4b26      	ldr	r3, [pc, #152]	; (4050ec <dat_task_dataRouter+0x1fc>)
  405054:	4798      	blx	r3
			}
		}
		//check if there's any data on the 
		if(udi_cdc_is_rx_ready() == true)
  405056:	4b30      	ldr	r3, [pc, #192]	; (405118 <dat_task_dataRouter+0x228>)
  405058:	4798      	blx	r3
  40505a:	4603      	mov	r3, r0
  40505c:	2b00      	cmp	r3, #0
  40505e:	d03b      	beq.n	4050d8 <dat_task_dataRouter+0x1e8>
		{
			receivedUsbData = udi_cdc_getc();
  405060:	4b2e      	ldr	r3, [pc, #184]	; (40511c <dat_task_dataRouter+0x22c>)
  405062:	4798      	blx	r3
  405064:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(usbPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command.
  405068:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  40506c:	2b62      	cmp	r3, #98	; 0x62
  40506e:	d82e      	bhi.n	4050ce <dat_task_dataRouter+0x1de>
			{
				usbPacket.packetData[usbPacket.packetSize++] = (char)receivedUsbData;
  405070:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  405074:	1c5a      	adds	r2, r3, #1
  405076:	b292      	uxth	r2, r2
  405078:	f8a7 2072 	strh.w	r2, [r7, #114]	; 0x72
  40507c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
  405080:	b2d2      	uxtb	r2, r2
  405082:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
  405086:	440b      	add	r3, r1
  405088:	f803 2cd3 	strb.w	r2, [r3, #-211]
				if((char)receivedUsbData == '\n')
  40508c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
  405090:	b2db      	uxtb	r3, r3
  405092:	2b0a      	cmp	r3, #10
  405094:	d120      	bne.n	4050d8 <dat_task_dataRouter+0x1e8>
				{
					//make sure the packet is null terminated
					usbPacket.packetData[usbPacket.packetSize] = 0x00;
  405096:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  40509a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
  40509e:	4413      	add	r3, r2
  4050a0:	2200      	movs	r2, #0
  4050a2:	f803 2cd3 	strb.w	r2, [r3, #-211]
					if(cmd_queue_commandQueue != NULL)
  4050a6:	4b1a      	ldr	r3, [pc, #104]	; (405110 <dat_task_dataRouter+0x220>)
  4050a8:	681b      	ldr	r3, [r3, #0]
  4050aa:	2b00      	cmp	r3, #0
  4050ac:	d009      	beq.n	4050c2 <dat_task_dataRouter+0x1d2>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &usbPacket,5) != TRUE)
  4050ae:	4b18      	ldr	r3, [pc, #96]	; (405110 <dat_task_dataRouter+0x220>)
  4050b0:	681a      	ldr	r2, [r3, #0]
  4050b2:	f107 030c 	add.w	r3, r7, #12
  4050b6:	4610      	mov	r0, r2
  4050b8:	4619      	mov	r1, r3
  4050ba:	2205      	movs	r2, #5
  4050bc:	2300      	movs	r3, #0
  4050be:	4c15      	ldr	r4, [pc, #84]	; (405114 <dat_task_dataRouter+0x224>)
  4050c0:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}
					}
					//clear the packet for the next one.
					cmd_initPacketStructure(&usbPacket);
  4050c2:	f107 030c 	add.w	r3, r7, #12
  4050c6:	4618      	mov	r0, r3
  4050c8:	4b08      	ldr	r3, [pc, #32]	; (4050ec <dat_task_dataRouter+0x1fc>)
  4050ca:	4798      	blx	r3
  4050cc:	e004      	b.n	4050d8 <dat_task_dataRouter+0x1e8>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&usbPacket);
  4050ce:	f107 030c 	add.w	r3, r7, #12
  4050d2:	4618      	mov	r0, r3
  4050d4:	4b05      	ldr	r3, [pc, #20]	; (4050ec <dat_task_dataRouter+0x1fc>)
  4050d6:	4798      	blx	r3
			}
		}
		wdt_restart(WDT);
  4050d8:	4811      	ldr	r0, [pc, #68]	; (405120 <dat_task_dataRouter+0x230>)
  4050da:	4b12      	ldr	r3, [pc, #72]	; (405124 <dat_task_dataRouter+0x234>)
  4050dc:	4798      	blx	r3
		//taskYIELD();
		//vTaskDelay(1);
				
		
	}	
  4050de:	e736      	b.n	404f4e <dat_task_dataRouter+0x5e>
}
  4050e0:	37e4      	adds	r7, #228	; 0xe4
  4050e2:	46bd      	mov	sp, r7
  4050e4:	bd90      	pop	{r4, r7, pc}
  4050e6:	bf00      	nop
  4050e8:	20008964 	.word	0x20008964
  4050ec:	00404d91 	.word	0x00404d91
  4050f0:	00407aa9 	.word	0x00407aa9
  4050f4:	0040791d 	.word	0x0040791d
  4050f8:	0040546d 	.word	0x0040546d
  4050fc:	00408f05 	.word	0x00408f05
  405100:	00404db9 	.word	0x00404db9
  405104:	00407835 	.word	0x00407835
  405108:	00400efd 	.word	0x00400efd
  40510c:	00400fe9 	.word	0x00400fe9
  405110:	20000e08 	.word	0x20000e08
  405114:	0040867d 	.word	0x0040867d
  405118:	00400cfd 	.word	0x00400cfd
  40511c:	00400df5 	.word	0x00400df5
  405120:	400e1450 	.word	0x400e1450
  405124:	0040bb45 	.word	0x0040bb45

00405128 <dat_sendDebugMsgToDataBoard>:
//note... for now it must be prepended with "PwrBrdMsg:"
status_t dat_sendDebugMsgToDataBoard(char* debugString)
{
  405128:	b580      	push	{r7, lr}
  40512a:	b082      	sub	sp, #8
  40512c:	af00      	add	r7, sp, #0
  40512e:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.	
	drv_uart_putString(dataRouterConfig->dataBoardUart, debugString);
  405130:	4b05      	ldr	r3, [pc, #20]	; (405148 <dat_sendDebugMsgToDataBoard+0x20>)
  405132:	681b      	ldr	r3, [r3, #0]
  405134:	681b      	ldr	r3, [r3, #0]
  405136:	4618      	mov	r0, r3
  405138:	6879      	ldr	r1, [r7, #4]
  40513a:	4b04      	ldr	r3, [pc, #16]	; (40514c <dat_sendDebugMsgToDataBoard+0x24>)
  40513c:	4798      	blx	r3
	return STATUS_PASS;
  40513e:	2300      	movs	r3, #0
}
  405140:	4618      	mov	r0, r3
  405142:	3708      	adds	r7, #8
  405144:	46bd      	mov	sp, r7
  405146:	bd80      	pop	{r7, pc}
  405148:	20008964 	.word	0x20008964
  40514c:	00407ae5 	.word	0x00407ae5

00405150 <dat_sendPacketToDataBoard>:

status_t dat_sendPacketToDataBoard(cmd_commandPacket_t* packet)
{ 
  405150:	b580      	push	{r7, lr}
  405152:	b082      	sub	sp, #8
  405154:	af00      	add	r7, sp, #0
  405156:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.
	drv_uart_putData(dataRouterConfig->dataBoardUart, packet->packetData, packet->packetSize);	
  405158:	4b08      	ldr	r3, [pc, #32]	; (40517c <dat_sendPacketToDataBoard+0x2c>)
  40515a:	681b      	ldr	r3, [r3, #0]
  40515c:	6819      	ldr	r1, [r3, #0]
  40515e:	687b      	ldr	r3, [r7, #4]
  405160:	1c5a      	adds	r2, r3, #1
  405162:	687b      	ldr	r3, [r7, #4]
  405164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  405168:	4608      	mov	r0, r1
  40516a:	4611      	mov	r1, r2
  40516c:	461a      	mov	r2, r3
  40516e:	4b04      	ldr	r3, [pc, #16]	; (405180 <dat_sendPacketToDataBoard+0x30>)
  405170:	4798      	blx	r3
	return STATUS_PASS;	
  405172:	2300      	movs	r3, #0
}
  405174:	4618      	mov	r0, r3
  405176:	3708      	adds	r7, #8
  405178:	46bd      	mov	sp, r7
  40517a:	bd80      	pop	{r7, pc}
  40517c:	20008964 	.word	0x20008964
  405180:	00407b35 	.word	0x00407b35

00405184 <dat_sendStringToUsb>:

status_t dat_sendStringToUsb(char* str)
{	
  405184:	b580      	push	{r7, lr}
  405186:	b084      	sub	sp, #16
  405188:	af00      	add	r7, sp, #0
  40518a:	6078      	str	r0, [r7, #4]
	size_t length = strlen(str); 
  40518c:	6878      	ldr	r0, [r7, #4]
  40518e:	4b06      	ldr	r3, [pc, #24]	; (4051a8 <dat_sendStringToUsb+0x24>)
  405190:	4798      	blx	r3
  405192:	60f8      	str	r0, [r7, #12]
	udi_cdc_write_buf(str, length); 
  405194:	6878      	ldr	r0, [r7, #4]
  405196:	68f9      	ldr	r1, [r7, #12]
  405198:	4b04      	ldr	r3, [pc, #16]	; (4051ac <dat_sendStringToUsb+0x28>)
  40519a:	4798      	blx	r3
	return STATUS_PASS;	
  40519c:	2300      	movs	r3, #0
}
  40519e:	4618      	mov	r0, r3
  4051a0:	3710      	adds	r7, #16
  4051a2:	46bd      	mov	sp, r7
  4051a4:	bd80      	pop	{r7, pc}
  4051a6:	bf00      	nop
  4051a8:	0040cb69 	.word	0x0040cb69
  4051ac:	00401115 	.word	0x00401115

004051b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4051b0:	b480      	push	{r7}
  4051b2:	b083      	sub	sp, #12
  4051b4:	af00      	add	r7, sp, #0
  4051b6:	4603      	mov	r3, r0
  4051b8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4051ba:	4b08      	ldr	r3, [pc, #32]	; (4051dc <NVIC_EnableIRQ+0x2c>)
  4051bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4051c0:	0952      	lsrs	r2, r2, #5
  4051c2:	79f9      	ldrb	r1, [r7, #7]
  4051c4:	f001 011f 	and.w	r1, r1, #31
  4051c8:	2001      	movs	r0, #1
  4051ca:	fa00 f101 	lsl.w	r1, r0, r1
  4051ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4051d2:	370c      	adds	r7, #12
  4051d4:	46bd      	mov	sp, r7
  4051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051da:	4770      	bx	lr
  4051dc:	e000e100 	.word	0xe000e100

004051e0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4051e0:	b480      	push	{r7}
  4051e2:	b083      	sub	sp, #12
  4051e4:	af00      	add	r7, sp, #0
  4051e6:	4603      	mov	r3, r0
  4051e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4051ea:	4b09      	ldr	r3, [pc, #36]	; (405210 <NVIC_DisableIRQ+0x30>)
  4051ec:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4051f0:	0952      	lsrs	r2, r2, #5
  4051f2:	79f9      	ldrb	r1, [r7, #7]
  4051f4:	f001 011f 	and.w	r1, r1, #31
  4051f8:	2001      	movs	r0, #1
  4051fa:	fa00 f101 	lsl.w	r1, r0, r1
  4051fe:	3220      	adds	r2, #32
  405200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405204:	370c      	adds	r7, #12
  405206:	46bd      	mov	sp, r7
  405208:	f85d 7b04 	ldr.w	r7, [sp], #4
  40520c:	4770      	bx	lr
  40520e:	bf00      	nop
  405210:	e000e100 	.word	0xe000e100

00405214 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  405214:	b480      	push	{r7}
  405216:	b089      	sub	sp, #36	; 0x24
  405218:	af00      	add	r7, sp, #0
  40521a:	6078      	str	r0, [r7, #4]
  40521c:	687b      	ldr	r3, [r7, #4]
  40521e:	61fb      	str	r3, [r7, #28]
  405220:	69fb      	ldr	r3, [r7, #28]
  405222:	61bb      	str	r3, [r7, #24]
  405224:	69bb      	ldr	r3, [r7, #24]
  405226:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405228:	697b      	ldr	r3, [r7, #20]
  40522a:	095b      	lsrs	r3, r3, #5
  40522c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40522e:	693b      	ldr	r3, [r7, #16]
  405230:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405234:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405238:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40523a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40523c:	69fb      	ldr	r3, [r7, #28]
  40523e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405240:	68fb      	ldr	r3, [r7, #12]
  405242:	f003 031f 	and.w	r3, r3, #31
  405246:	2101      	movs	r1, #1
  405248:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40524c:	4013      	ands	r3, r2
  40524e:	2b00      	cmp	r3, #0
  405250:	bf0c      	ite	eq
  405252:	2300      	moveq	r3, #0
  405254:	2301      	movne	r3, #1
  405256:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  405258:	4618      	mov	r0, r3
  40525a:	3724      	adds	r7, #36	; 0x24
  40525c:	46bd      	mov	sp, r7
  40525e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405262:	4770      	bx	lr

00405264 <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  405264:	b580      	push	{r7, lr}
  405266:	b084      	sub	sp, #16
  405268:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40526a:	2300      	movs	r3, #0
  40526c:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  40526e:	230f      	movs	r3, #15
  405270:	607b      	str	r3, [r7, #4]
	int i = 0; 
  405272:	2300      	movs	r3, #0
  405274:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < numGpio ; i++)
  405276:	2300      	movs	r3, #0
  405278:	60bb      	str	r3, [r7, #8]
  40527a:	e010      	b.n	40529e <drv_gpio_initializeAll+0x3a>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  40527c:	68bb      	ldr	r3, [r7, #8]
  40527e:	011a      	lsls	r2, r3, #4
  405280:	4b0b      	ldr	r3, [pc, #44]	; (4052b0 <drv_gpio_initializeAll+0x4c>)
  405282:	4413      	add	r3, r2
  405284:	4618      	mov	r0, r3
  405286:	4b0b      	ldr	r3, [pc, #44]	; (4052b4 <drv_gpio_initializeAll+0x50>)
  405288:	4798      	blx	r3
  40528a:	4603      	mov	r3, r0
  40528c:	2b00      	cmp	r3, #0
  40528e:	d003      	beq.n	405298 <drv_gpio_initializeAll+0x34>
		{
			status |= STATUS_FAIL;
  405290:	7bfb      	ldrb	r3, [r7, #15]
  405292:	f043 0301 	orr.w	r3, r3, #1
  405296:	73fb      	strb	r3, [r7, #15]
status_t drv_gpio_initializeAll(void)
{
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	for(i = 0; i < numGpio ; i++)
  405298:	68bb      	ldr	r3, [r7, #8]
  40529a:	3301      	adds	r3, #1
  40529c:	60bb      	str	r3, [r7, #8]
  40529e:	68ba      	ldr	r2, [r7, #8]
  4052a0:	687b      	ldr	r3, [r7, #4]
  4052a2:	429a      	cmp	r2, r3
  4052a4:	dbea      	blt.n	40527c <drv_gpio_initializeAll+0x18>
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
		{
			status |= STATUS_FAIL;
		}
	}	
	return status; 
  4052a6:	7bfb      	ldrb	r3, [r7, #15]
}
  4052a8:	4618      	mov	r0, r3
  4052aa:	3710      	adds	r7, #16
  4052ac:	46bd      	mov	sp, r7
  4052ae:	bd80      	pop	{r7, pc}
  4052b0:	200001e4 	.word	0x200001e4
  4052b4:	004052b9 	.word	0x004052b9

004052b8 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  4052b8:	b590      	push	{r4, r7, lr}
  4052ba:	b08d      	sub	sp, #52	; 0x34
  4052bc:	af02      	add	r7, sp, #8
  4052be:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  4052c0:	2300      	movs	r3, #0
  4052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned long PinFlag = 0;	
  4052c6:	2300      	movs	r3, #0
  4052c8:	627b      	str	r3, [r7, #36]	; 0x24
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  4052ca:	687b      	ldr	r3, [r7, #4]
  4052cc:	791b      	ldrb	r3, [r3, #4]
  4052ce:	2b01      	cmp	r3, #1
  4052d0:	f040 8093 	bne.w	4053fa <drv_gpio_config+0x142>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  4052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4052d6:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  4052da:	627b      	str	r3, [r7, #36]	; 0x24
		if (gpioConfig->pullUpEnabled == TRUE)
  4052dc:	687b      	ldr	r3, [r7, #4]
  4052de:	7b1b      	ldrb	r3, [r3, #12]
  4052e0:	2b01      	cmp	r3, #1
  4052e2:	d103      	bne.n	4052ec <drv_gpio_config+0x34>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  4052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4052e6:	f043 0301 	orr.w	r3, r3, #1
  4052ea:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  4052ec:	687b      	ldr	r3, [r7, #4]
  4052ee:	7b5b      	ldrb	r3, [r3, #13]
  4052f0:	2b01      	cmp	r3, #1
  4052f2:	d110      	bne.n	405316 <drv_gpio_config+0x5e>
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  4052f4:	687b      	ldr	r3, [r7, #4]
  4052f6:	681b      	ldr	r3, [r3, #0]
  4052f8:	4618      	mov	r0, r3
  4052fa:	4b51      	ldr	r3, [pc, #324]	; (405440 <drv_gpio_config+0x188>)
  4052fc:	4798      	blx	r3
  4052fe:	61f8      	str	r0, [r7, #28]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  405300:	687b      	ldr	r3, [r7, #4]
  405302:	681b      	ldr	r3, [r3, #0]
  405304:	4618      	mov	r0, r3
  405306:	4b4f      	ldr	r3, [pc, #316]	; (405444 <drv_gpio_config+0x18c>)
  405308:	4798      	blx	r3
  40530a:	61b8      	str	r0, [r7, #24]
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  40530c:	69f8      	ldr	r0, [r7, #28]
  40530e:	69b9      	ldr	r1, [r7, #24]
  405310:	2205      	movs	r2, #5
  405312:	4b4d      	ldr	r3, [pc, #308]	; (405448 <drv_gpio_config+0x190>)
  405314:	4798      	blx	r3
		}
		
		pmc_enable_periph_clk(pio_get_pin_group_id(gpioConfig->pinId));	//pio_get_pin_group_id(gpioConfig->pinId
  405316:	687b      	ldr	r3, [r7, #4]
  405318:	681b      	ldr	r3, [r3, #0]
  40531a:	4618      	mov	r0, r3
  40531c:	4b4b      	ldr	r3, [pc, #300]	; (40544c <drv_gpio_config+0x194>)
  40531e:	4798      	blx	r3
  405320:	4603      	mov	r3, r0
  405322:	4618      	mov	r0, r3
  405324:	4b4a      	ldr	r3, [pc, #296]	; (405450 <drv_gpio_config+0x198>)
  405326:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  405328:	687b      	ldr	r3, [r7, #4]
  40532a:	681b      	ldr	r3, [r3, #0]
  40532c:	4618      	mov	r0, r3
  40532e:	6a79      	ldr	r1, [r7, #36]	; 0x24
  405330:	4b48      	ldr	r3, [pc, #288]	; (405454 <drv_gpio_config+0x19c>)
  405332:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  405334:	2300      	movs	r3, #0
  405336:	627b      	str	r3, [r7, #36]	; 0x24
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  405338:	687b      	ldr	r3, [r7, #4]
  40533a:	799b      	ldrb	r3, [r3, #6]
  40533c:	2b03      	cmp	r3, #3
  40533e:	d81f      	bhi.n	405380 <drv_gpio_config+0xc8>
  405340:	a201      	add	r2, pc, #4	; (adr r2, 405348 <drv_gpio_config+0x90>)
  405342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405346:	bf00      	nop
  405348:	00405359 	.word	0x00405359
  40534c:	00405363 	.word	0x00405363
  405350:	0040536d 	.word	0x0040536d
  405354:	00405377 	.word	0x00405377
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  405358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40535a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40535e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  405360:	e00f      	b.n	405382 <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  405362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405364:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  405368:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40536a:	e00a      	b.n	405382 <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40536e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  405372:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  405374:	e005      	b.n	405382 <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  405376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405378:	f043 0310 	orr.w	r3, r3, #16
  40537c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40537e:	e000      	b.n	405382 <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  405380:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  405382:	687b      	ldr	r3, [r7, #4]
  405384:	681b      	ldr	r3, [r3, #0]
  405386:	4618      	mov	r0, r3
  405388:	4b2d      	ldr	r3, [pc, #180]	; (405440 <drv_gpio_config+0x188>)
  40538a:	4798      	blx	r3
  40538c:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40538e:	687b      	ldr	r3, [r7, #4]
  405390:	681b      	ldr	r3, [r3, #0]
  405392:	4618      	mov	r0, r3
  405394:	4b2b      	ldr	r3, [pc, #172]	; (405444 <drv_gpio_config+0x18c>)
  405396:	4798      	blx	r3
  405398:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  40539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40539c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4053a0:	2b00      	cmp	r3, #0
  4053a2:	d021      	beq.n	4053e8 <drv_gpio_config+0x130>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  4053a4:	687b      	ldr	r3, [r7, #4]
  4053a6:	681b      	ldr	r3, [r3, #0]
  4053a8:	4618      	mov	r0, r3
  4053aa:	4b28      	ldr	r3, [pc, #160]	; (40544c <drv_gpio_config+0x194>)
  4053ac:	4798      	blx	r3
  4053ae:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  4053b0:	687b      	ldr	r3, [r7, #4]
  4053b2:	689b      	ldr	r3, [r3, #8]
  4053b4:	9300      	str	r3, [sp, #0]
  4053b6:	6978      	ldr	r0, [r7, #20]
  4053b8:	68f9      	ldr	r1, [r7, #12]
  4053ba:	693a      	ldr	r2, [r7, #16]
  4053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4053be:	4c26      	ldr	r4, [pc, #152]	; (405458 <drv_gpio_config+0x1a0>)
  4053c0:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  4053c2:	6978      	ldr	r0, [r7, #20]
  4053c4:	6939      	ldr	r1, [r7, #16]
  4053c6:	4b25      	ldr	r3, [pc, #148]	; (40545c <drv_gpio_config+0x1a4>)
  4053c8:	4798      	blx	r3
			if (p_pio == PIOA)
  4053ca:	697a      	ldr	r2, [r7, #20]
  4053cc:	4b24      	ldr	r3, [pc, #144]	; (405460 <drv_gpio_config+0x1a8>)
  4053ce:	429a      	cmp	r2, r3
  4053d0:	d103      	bne.n	4053da <drv_gpio_config+0x122>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
  4053d2:	200b      	movs	r0, #11
  4053d4:	4b23      	ldr	r3, [pc, #140]	; (405464 <drv_gpio_config+0x1ac>)
  4053d6:	4798      	blx	r3
  4053d8:	e006      	b.n	4053e8 <drv_gpio_config+0x130>
			}
			else if (p_pio == PIOB)
  4053da:	697a      	ldr	r2, [r7, #20]
  4053dc:	4b22      	ldr	r3, [pc, #136]	; (405468 <drv_gpio_config+0x1b0>)
  4053de:	429a      	cmp	r2, r3
  4053e0:	d102      	bne.n	4053e8 <drv_gpio_config+0x130>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
  4053e2:	200c      	movs	r0, #12
  4053e4:	4b1f      	ldr	r3, [pc, #124]	; (405464 <drv_gpio_config+0x1ac>)
  4053e6:	4798      	blx	r3
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  4053e8:	697b      	ldr	r3, [r7, #20]
  4053ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4053ee:	693b      	ldr	r3, [r7, #16]
  4053f0:	431a      	orrs	r2, r3
  4053f2:	697b      	ldr	r3, [r7, #20]
  4053f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  4053f8:	e01b      	b.n	405432 <drv_gpio_config+0x17a>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  4053fa:	687b      	ldr	r3, [r7, #4]
  4053fc:	795b      	ldrb	r3, [r3, #5]
  4053fe:	2b01      	cmp	r3, #1
  405400:	d104      	bne.n	40540c <drv_gpio_config+0x154>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  405402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405404:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  405408:	627b      	str	r3, [r7, #36]	; 0x24
  40540a:	e003      	b.n	405414 <drv_gpio_config+0x15c>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  40540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40540e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  405412:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		pmc_enable_periph_clk(pio_get_pin_group_id(gpioConfig->pinId)); //pio_get_pin_group_id(
  405414:	687b      	ldr	r3, [r7, #4]
  405416:	681b      	ldr	r3, [r3, #0]
  405418:	4618      	mov	r0, r3
  40541a:	4b0c      	ldr	r3, [pc, #48]	; (40544c <drv_gpio_config+0x194>)
  40541c:	4798      	blx	r3
  40541e:	4603      	mov	r3, r0
  405420:	4618      	mov	r0, r3
  405422:	4b0b      	ldr	r3, [pc, #44]	; (405450 <drv_gpio_config+0x198>)
  405424:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  405426:	687b      	ldr	r3, [r7, #4]
  405428:	681b      	ldr	r3, [r3, #0]
  40542a:	4618      	mov	r0, r3
  40542c:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40542e:	4b09      	ldr	r3, [pc, #36]	; (405454 <drv_gpio_config+0x19c>)
  405430:	4798      	blx	r3
	}
	
	return status;
  405432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  405436:	4618      	mov	r0, r3
  405438:	372c      	adds	r7, #44	; 0x2c
  40543a:	46bd      	mov	sp, r7
  40543c:	bd90      	pop	{r4, r7, pc}
  40543e:	bf00      	nop
  405440:	0040b019 	.word	0x0040b019
  405444:	0040b061 	.word	0x0040b061
  405448:	0040aab5 	.word	0x0040aab5
  40544c:	0040b041 	.word	0x0040b041
  405450:	0040b4a1 	.word	0x0040b4a1
  405454:	0040ae65 	.word	0x0040ae65
  405458:	0040b151 	.word	0x0040b151
  40545c:	0040ad49 	.word	0x0040ad49
  405460:	400e0e00 	.word	0x400e0e00
  405464:	004051b1 	.word	0x004051b1
  405468:	400e1000 	.word	0x400e1000

0040546c <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  40546c:	b580      	push	{r7, lr}
  40546e:	b084      	sub	sp, #16
  405470:	af00      	add	r7, sp, #0
  405472:	4602      	mov	r2, r0
  405474:	460b      	mov	r3, r1
  405476:	71fa      	strb	r2, [r7, #7]
  405478:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  40547a:	2300      	movs	r3, #0
  40547c:	72fb      	strb	r3, [r7, #11]
	uint32_t pinFlag = 0x00; 
  40547e:	2300      	movs	r3, #0
  405480:	60fb      	str	r3, [r7, #12]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  405482:	79fb      	ldrb	r3, [r7, #7]
  405484:	4a32      	ldr	r2, [pc, #200]	; (405550 <drv_gpio_setPinState+0xe4>)
  405486:	011b      	lsls	r3, r3, #4
  405488:	4413      	add	r3, r2
  40548a:	791b      	ldrb	r3, [r3, #4]
  40548c:	2b00      	cmp	r3, #0
  40548e:	d001      	beq.n	405494 <drv_gpio_setPinState+0x28>
	{
		return STATUS_FAIL;
  405490:	2301      	movs	r3, #1
  405492:	e059      	b.n	405548 <drv_gpio_setPinState+0xdc>
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  405494:	79fb      	ldrb	r3, [r7, #7]
  405496:	4a2e      	ldr	r2, [pc, #184]	; (405550 <drv_gpio_setPinState+0xe4>)
  405498:	011b      	lsls	r3, r3, #4
  40549a:	4413      	add	r3, r2
  40549c:	3308      	adds	r3, #8
  40549e:	79db      	ldrb	r3, [r3, #7]
  4054a0:	2b02      	cmp	r3, #2
  4054a2:	d007      	beq.n	4054b4 <drv_gpio_setPinState+0x48>
  4054a4:	79fb      	ldrb	r3, [r7, #7]
  4054a6:	4a2a      	ldr	r2, [pc, #168]	; (405550 <drv_gpio_setPinState+0xe4>)
  4054a8:	011b      	lsls	r3, r3, #4
  4054aa:	4413      	add	r3, r2
  4054ac:	3308      	adds	r3, #8
  4054ae:	79db      	ldrb	r3, [r3, #7]
  4054b0:	2b03      	cmp	r3, #3
  4054b2:	d11a      	bne.n	4054ea <drv_gpio_setPinState+0x7e>
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  4054b4:	79bb      	ldrb	r3, [r7, #6]
  4054b6:	2b01      	cmp	r3, #1
  4054b8:	d10a      	bne.n	4054d0 <drv_gpio_setPinState+0x64>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
  4054ba:	68fb      	ldr	r3, [r7, #12]
  4054bc:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4054c0:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  4054c2:	4b23      	ldr	r3, [pc, #140]	; (405550 <drv_gpio_setPinState+0xe4>)
  4054c4:	681b      	ldr	r3, [r3, #0]
  4054c6:	4618      	mov	r0, r3
  4054c8:	68f9      	ldr	r1, [r7, #12]
  4054ca:	4b22      	ldr	r3, [pc, #136]	; (405554 <drv_gpio_setPinState+0xe8>)
  4054cc:	4798      	blx	r3
  4054ce:	e00c      	b.n	4054ea <drv_gpio_setPinState+0x7e>
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  4054d0:	79bb      	ldrb	r3, [r7, #6]
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d109      	bne.n	4054ea <drv_gpio_setPinState+0x7e>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
  4054d6:	68fb      	ldr	r3, [r7, #12]
  4054d8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  4054dc:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  4054de:	4b1c      	ldr	r3, [pc, #112]	; (405550 <drv_gpio_setPinState+0xe4>)
  4054e0:	681b      	ldr	r3, [r3, #0]
  4054e2:	4618      	mov	r0, r3
  4054e4:	68f9      	ldr	r1, [r7, #12]
  4054e6:	4b1b      	ldr	r3, [pc, #108]	; (405554 <drv_gpio_setPinState+0xe8>)
  4054e8:	4798      	blx	r3
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  4054ea:	79bb      	ldrb	r3, [r7, #6]
  4054ec:	2b03      	cmp	r3, #3
  4054ee:	d82a      	bhi.n	405546 <drv_gpio_setPinState+0xda>
  4054f0:	a201      	add	r2, pc, #4	; (adr r2, 4054f8 <drv_gpio_setPinState+0x8c>)
  4054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4054f6:	bf00      	nop
  4054f8:	0040551b 	.word	0x0040551b
  4054fc:	00405509 	.word	0x00405509
  405500:	0040552d 	.word	0x0040552d
  405504:	00405547 	.word	0x00405547
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  405508:	79fb      	ldrb	r3, [r7, #7]
  40550a:	4a11      	ldr	r2, [pc, #68]	; (405550 <drv_gpio_setPinState+0xe4>)
  40550c:	011b      	lsls	r3, r3, #4
  40550e:	4413      	add	r3, r2
  405510:	681b      	ldr	r3, [r3, #0]
  405512:	4618      	mov	r0, r3
  405514:	4b10      	ldr	r3, [pc, #64]	; (405558 <drv_gpio_setPinState+0xec>)
  405516:	4798      	blx	r3
		break;
  405518:	e015      	b.n	405546 <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  40551a:	79fb      	ldrb	r3, [r7, #7]
  40551c:	4a0c      	ldr	r2, [pc, #48]	; (405550 <drv_gpio_setPinState+0xe4>)
  40551e:	011b      	lsls	r3, r3, #4
  405520:	4413      	add	r3, r2
  405522:	681b      	ldr	r3, [r3, #0]
  405524:	4618      	mov	r0, r3
  405526:	4b0d      	ldr	r3, [pc, #52]	; (40555c <drv_gpio_setPinState+0xf0>)
  405528:	4798      	blx	r3
		break;
  40552a:	e00c      	b.n	405546 <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
  40552c:	68fb      	ldr	r3, [r7, #12]
  40552e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  405532:	f043 0301 	orr.w	r3, r3, #1
  405536:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  405538:	4b05      	ldr	r3, [pc, #20]	; (405550 <drv_gpio_setPinState+0xe4>)
  40553a:	681b      	ldr	r3, [r3, #0]
  40553c:	4618      	mov	r0, r3
  40553e:	68f9      	ldr	r1, [r7, #12]
  405540:	4b04      	ldr	r3, [pc, #16]	; (405554 <drv_gpio_setPinState+0xe8>)
  405542:	4798      	blx	r3
		break;
  405544:	bf00      	nop
		case DRV_GPIO_PIN_STATE_PULLED_LOW:
		break; 
	}
	return status;
  405546:	7afb      	ldrb	r3, [r7, #11]
}
  405548:	4618      	mov	r0, r3
  40554a:	3710      	adds	r7, #16
  40554c:	46bd      	mov	sp, r7
  40554e:	bd80      	pop	{r7, pc}
  405550:	200001e4 	.word	0x200001e4
  405554:	0040ae65 	.word	0x0040ae65
  405558:	0040adb5 	.word	0x0040adb5
  40555c:	0040ade1 	.word	0x0040ade1

00405560 <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  405560:	b580      	push	{r7, lr}
  405562:	b084      	sub	sp, #16
  405564:	af00      	add	r7, sp, #0
  405566:	4603      	mov	r3, r0
  405568:	6039      	str	r1, [r7, #0]
  40556a:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40556c:	2300      	movs	r3, #0
  40556e:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  405570:	79fb      	ldrb	r3, [r7, #7]
  405572:	4a0d      	ldr	r2, [pc, #52]	; (4055a8 <drv_gpio_getPinState+0x48>)
  405574:	011b      	lsls	r3, r3, #4
  405576:	4413      	add	r3, r2
  405578:	681b      	ldr	r3, [r3, #0]
  40557a:	4618      	mov	r0, r3
  40557c:	4b0b      	ldr	r3, [pc, #44]	; (4055ac <drv_gpio_getPinState+0x4c>)
  40557e:	4798      	blx	r3
  405580:	4603      	mov	r3, r0
  405582:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  405584:	7bbb      	ldrb	r3, [r7, #14]
  405586:	f083 0301 	eor.w	r3, r3, #1
  40558a:	b2db      	uxtb	r3, r3
  40558c:	2b00      	cmp	r3, #0
  40558e:	d003      	beq.n	405598 <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  405590:	683b      	ldr	r3, [r7, #0]
  405592:	2200      	movs	r2, #0
  405594:	701a      	strb	r2, [r3, #0]
  405596:	e002      	b.n	40559e <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  405598:	683b      	ldr	r3, [r7, #0]
  40559a:	2201      	movs	r2, #1
  40559c:	701a      	strb	r2, [r3, #0]
	}
	return status;
  40559e:	7bfb      	ldrb	r3, [r7, #15]
}
  4055a0:	4618      	mov	r0, r3
  4055a2:	3710      	adds	r7, #16
  4055a4:	46bd      	mov	sp, r7
  4055a6:	bd80      	pop	{r7, pc}
  4055a8:	200001e4 	.word	0x200001e4
  4055ac:	00405215 	.word	0x00405215

004055b0 <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  4055b0:	b580      	push	{r7, lr}
  4055b2:	b084      	sub	sp, #16
  4055b4:	af00      	add	r7, sp, #0
  4055b6:	4603      	mov	r3, r0
  4055b8:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  4055ba:	2300      	movs	r3, #0
  4055bc:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  4055be:	79fb      	ldrb	r3, [r7, #7]
  4055c0:	4a05      	ldr	r2, [pc, #20]	; (4055d8 <drv_gpio_togglePin+0x28>)
  4055c2:	011b      	lsls	r3, r3, #4
  4055c4:	4413      	add	r3, r2
  4055c6:	681b      	ldr	r3, [r3, #0]
  4055c8:	4618      	mov	r0, r3
  4055ca:	4b04      	ldr	r3, [pc, #16]	; (4055dc <drv_gpio_togglePin+0x2c>)
  4055cc:	4798      	blx	r3
	return status;
  4055ce:	7bfb      	ldrb	r3, [r7, #15]
}
  4055d0:	4618      	mov	r0, r3
  4055d2:	3710      	adds	r7, #16
  4055d4:	46bd      	mov	sp, r7
  4055d6:	bd80      	pop	{r7, pc}
  4055d8:	200001e4 	.word	0x200001e4
  4055dc:	0040ae0d 	.word	0x0040ae0d

004055e0 <drv_gpio_config_interrupt>:
 * @brief Set Interrupt Configuration for the requested pin
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt)
{
  4055e0:	b580      	push	{r7, lr}
  4055e2:	b086      	sub	sp, #24
  4055e4:	af00      	add	r7, sp, #0
  4055e6:	4602      	mov	r2, r0
  4055e8:	460b      	mov	r3, r1
  4055ea:	71fa      	strb	r2, [r7, #7]
  4055ec:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  4055ee:	2301      	movs	r3, #1
  4055f0:	75fb      	strb	r3, [r7, #23]
	unsigned long PinFlag = 0;
  4055f2:	2300      	movs	r3, #0
  4055f4:	613b      	str	r3, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  4055f6:	79fb      	ldrb	r3, [r7, #7]
  4055f8:	4a1c      	ldr	r2, [pc, #112]	; (40566c <drv_gpio_config_interrupt+0x8c>)
  4055fa:	011b      	lsls	r3, r3, #4
  4055fc:	4413      	add	r3, r2
  4055fe:	681b      	ldr	r3, [r3, #0]
  405600:	4618      	mov	r0, r3
  405602:	4b1b      	ldr	r3, [pc, #108]	; (405670 <drv_gpio_config_interrupt+0x90>)
  405604:	4798      	blx	r3
  405606:	60f8      	str	r0, [r7, #12]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  405608:	79fb      	ldrb	r3, [r7, #7]
  40560a:	4a18      	ldr	r2, [pc, #96]	; (40566c <drv_gpio_config_interrupt+0x8c>)
  40560c:	011b      	lsls	r3, r3, #4
  40560e:	4413      	add	r3, r2
  405610:	681b      	ldr	r3, [r3, #0]
  405612:	4618      	mov	r0, r3
  405614:	4b17      	ldr	r3, [pc, #92]	; (405674 <drv_gpio_config_interrupt+0x94>)
  405616:	4798      	blx	r3
  405618:	60b8      	str	r0, [r7, #8]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  40561a:	79bb      	ldrb	r3, [r7, #6]
  40561c:	2b00      	cmp	r3, #0
  40561e:	d104      	bne.n	40562a <drv_gpio_config_interrupt+0x4a>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  405620:	2370      	movs	r3, #112	; 0x70
  405622:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405624:	2300      	movs	r3, #0
  405626:	75fb      	strb	r3, [r7, #23]
  405628:	e016      	b.n	405658 <drv_gpio_config_interrupt+0x78>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  40562a:	79bb      	ldrb	r3, [r7, #6]
  40562c:	2b01      	cmp	r3, #1
  40562e:	d104      	bne.n	40563a <drv_gpio_config_interrupt+0x5a>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  405630:	2350      	movs	r3, #80	; 0x50
  405632:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405634:	2300      	movs	r3, #0
  405636:	75fb      	strb	r3, [r7, #23]
  405638:	e00e      	b.n	405658 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  40563a:	79bb      	ldrb	r3, [r7, #6]
  40563c:	2b02      	cmp	r3, #2
  40563e:	d104      	bne.n	40564a <drv_gpio_config_interrupt+0x6a>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  405640:	2330      	movs	r3, #48	; 0x30
  405642:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405644:	2300      	movs	r3, #0
  405646:	75fb      	strb	r3, [r7, #23]
  405648:	e006      	b.n	405658 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  40564a:	79bb      	ldrb	r3, [r7, #6]
  40564c:	2b03      	cmp	r3, #3
  40564e:	d103      	bne.n	405658 <drv_gpio_config_interrupt+0x78>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  405650:	2310      	movs	r3, #16
  405652:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405654:	2300      	movs	r3, #0
  405656:	75fb      	strb	r3, [r7, #23]
	}
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  405658:	68f8      	ldr	r0, [r7, #12]
  40565a:	68b9      	ldr	r1, [r7, #8]
  40565c:	693a      	ldr	r2, [r7, #16]
  40565e:	4b06      	ldr	r3, [pc, #24]	; (405678 <drv_gpio_config_interrupt+0x98>)
  405660:	4798      	blx	r3
	return status;
  405662:	7dfb      	ldrb	r3, [r7, #23]
}
  405664:	4618      	mov	r0, r3
  405666:	3718      	adds	r7, #24
  405668:	46bd      	mov	sp, r7
  40566a:	bd80      	pop	{r7, pc}
  40566c:	200001e4 	.word	0x200001e4
  405670:	0040b019 	.word	0x0040b019
  405674:	0040b061 	.word	0x0040b061
  405678:	0040acdd 	.word	0x0040acdd

0040567c <drv_gpio_config_interrupt_handler>:
 * @brief Set Interrupt Configuration for the requested pin, and also what handler to use
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag, void* handler 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt_handler(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt, void* handler)
{
  40567c:	b590      	push	{r4, r7, lr}
  40567e:	b08b      	sub	sp, #44	; 0x2c
  405680:	af02      	add	r7, sp, #8
  405682:	460b      	mov	r3, r1
  405684:	603a      	str	r2, [r7, #0]
  405686:	4602      	mov	r2, r0
  405688:	71fa      	strb	r2, [r7, #7]
  40568a:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  40568c:	2301      	movs	r3, #1
  40568e:	77fb      	strb	r3, [r7, #31]
	unsigned long PinFlag = 0;
  405690:	2300      	movs	r3, #0
  405692:	61bb      	str	r3, [r7, #24]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  405694:	79fb      	ldrb	r3, [r7, #7]
  405696:	4a2a      	ldr	r2, [pc, #168]	; (405740 <drv_gpio_config_interrupt_handler+0xc4>)
  405698:	011b      	lsls	r3, r3, #4
  40569a:	4413      	add	r3, r2
  40569c:	681b      	ldr	r3, [r3, #0]
  40569e:	4618      	mov	r0, r3
  4056a0:	4b28      	ldr	r3, [pc, #160]	; (405744 <drv_gpio_config_interrupt_handler+0xc8>)
  4056a2:	4798      	blx	r3
  4056a4:	6178      	str	r0, [r7, #20]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  4056a6:	79fb      	ldrb	r3, [r7, #7]
  4056a8:	4a25      	ldr	r2, [pc, #148]	; (405740 <drv_gpio_config_interrupt_handler+0xc4>)
  4056aa:	011b      	lsls	r3, r3, #4
  4056ac:	4413      	add	r3, r2
  4056ae:	681b      	ldr	r3, [r3, #0]
  4056b0:	4618      	mov	r0, r3
  4056b2:	4b25      	ldr	r3, [pc, #148]	; (405748 <drv_gpio_config_interrupt_handler+0xcc>)
  4056b4:	4798      	blx	r3
  4056b6:	6138      	str	r0, [r7, #16]
	uint32_t PinPio = pio_get_pin_group_id(gpioConfig[pin].pinId);	//Pin ID
  4056b8:	79fb      	ldrb	r3, [r7, #7]
  4056ba:	4a21      	ldr	r2, [pc, #132]	; (405740 <drv_gpio_config_interrupt_handler+0xc4>)
  4056bc:	011b      	lsls	r3, r3, #4
  4056be:	4413      	add	r3, r2
  4056c0:	681b      	ldr	r3, [r3, #0]
  4056c2:	4618      	mov	r0, r3
  4056c4:	4b21      	ldr	r3, [pc, #132]	; (40574c <drv_gpio_config_interrupt_handler+0xd0>)
  4056c6:	4798      	blx	r3
  4056c8:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PinPio, PinMask);
  4056ca:	68fb      	ldr	r3, [r7, #12]
  4056cc:	4618      	mov	r0, r3
  4056ce:	6939      	ldr	r1, [r7, #16]
  4056d0:	4b1f      	ldr	r3, [pc, #124]	; (405750 <drv_gpio_config_interrupt_handler+0xd4>)
  4056d2:	4798      	blx	r3
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  4056d4:	79bb      	ldrb	r3, [r7, #6]
  4056d6:	2b00      	cmp	r3, #0
  4056d8:	d104      	bne.n	4056e4 <drv_gpio_config_interrupt_handler+0x68>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  4056da:	2370      	movs	r3, #112	; 0x70
  4056dc:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4056de:	2300      	movs	r3, #0
  4056e0:	77fb      	strb	r3, [r7, #31]
  4056e2:	e016      	b.n	405712 <drv_gpio_config_interrupt_handler+0x96>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  4056e4:	79bb      	ldrb	r3, [r7, #6]
  4056e6:	2b01      	cmp	r3, #1
  4056e8:	d104      	bne.n	4056f4 <drv_gpio_config_interrupt_handler+0x78>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  4056ea:	2350      	movs	r3, #80	; 0x50
  4056ec:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4056ee:	2300      	movs	r3, #0
  4056f0:	77fb      	strb	r3, [r7, #31]
  4056f2:	e00e      	b.n	405712 <drv_gpio_config_interrupt_handler+0x96>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  4056f4:	79bb      	ldrb	r3, [r7, #6]
  4056f6:	2b02      	cmp	r3, #2
  4056f8:	d104      	bne.n	405704 <drv_gpio_config_interrupt_handler+0x88>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  4056fa:	2330      	movs	r3, #48	; 0x30
  4056fc:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4056fe:	2300      	movs	r3, #0
  405700:	77fb      	strb	r3, [r7, #31]
  405702:	e006      	b.n	405712 <drv_gpio_config_interrupt_handler+0x96>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  405704:	79bb      	ldrb	r3, [r7, #6]
  405706:	2b03      	cmp	r3, #3
  405708:	d103      	bne.n	405712 <drv_gpio_config_interrupt_handler+0x96>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  40570a:	2310      	movs	r3, #16
  40570c:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  40570e:	2300      	movs	r3, #0
  405710:	77fb      	strb	r3, [r7, #31]
	}
	pio_handler_set(p_pio, PinPio, PinMask, PinFlag, handler);
  405712:	683b      	ldr	r3, [r7, #0]
  405714:	9300      	str	r3, [sp, #0]
  405716:	6978      	ldr	r0, [r7, #20]
  405718:	68f9      	ldr	r1, [r7, #12]
  40571a:	693a      	ldr	r2, [r7, #16]
  40571c:	69bb      	ldr	r3, [r7, #24]
  40571e:	4c0d      	ldr	r4, [pc, #52]	; (405754 <drv_gpio_config_interrupt_handler+0xd8>)
  405720:	47a0      	blx	r4
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  405722:	6978      	ldr	r0, [r7, #20]
  405724:	6939      	ldr	r1, [r7, #16]
  405726:	69ba      	ldr	r2, [r7, #24]
  405728:	4b0b      	ldr	r3, [pc, #44]	; (405758 <drv_gpio_config_interrupt_handler+0xdc>)
  40572a:	4798      	blx	r3
	pio_enable_interrupt(PinPio, PinMask);
  40572c:	68fb      	ldr	r3, [r7, #12]
  40572e:	4618      	mov	r0, r3
  405730:	6939      	ldr	r1, [r7, #16]
  405732:	4b0a      	ldr	r3, [pc, #40]	; (40575c <drv_gpio_config_interrupt_handler+0xe0>)
  405734:	4798      	blx	r3
	return status;
  405736:	7ffb      	ldrb	r3, [r7, #31]
}
  405738:	4618      	mov	r0, r3
  40573a:	3724      	adds	r7, #36	; 0x24
  40573c:	46bd      	mov	sp, r7
  40573e:	bd90      	pop	{r4, r7, pc}
  405740:	200001e4 	.word	0x200001e4
  405744:	0040b019 	.word	0x0040b019
  405748:	0040b061 	.word	0x0040b061
  40574c:	0040b041 	.word	0x0040b041
  405750:	0040ad69 	.word	0x0040ad69
  405754:	0040b151 	.word	0x0040b151
  405758:	0040acdd 	.word	0x0040acdd
  40575c:	0040ad49 	.word	0x0040ad49

00405760 <drv_gpio_clear_Int>:
 * @brief Clear the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
bool drv_gpio_clear_Int(drv_gpio_pins_t pin)
{
  405760:	b480      	push	{r7}
  405762:	b085      	sub	sp, #20
  405764:	af00      	add	r7, sp, #0
  405766:	4603      	mov	r3, r0
  405768:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40576a:	2300      	movs	r3, #0
  40576c:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40576e:	79fb      	ldrb	r3, [r7, #7]
  405770:	4a08      	ldr	r2, [pc, #32]	; (405794 <drv_gpio_clear_Int+0x34>)
  405772:	011b      	lsls	r3, r3, #4
  405774:	4413      	add	r3, r2
  405776:	3308      	adds	r3, #8
  405778:	2200      	movs	r2, #0
  40577a:	719a      	strb	r2, [r3, #6]
	return status;
  40577c:	7bfb      	ldrb	r3, [r7, #15]
  40577e:	2b00      	cmp	r3, #0
  405780:	bf0c      	ite	eq
  405782:	2300      	moveq	r3, #0
  405784:	2301      	movne	r3, #1
  405786:	b2db      	uxtb	r3, r3
}
  405788:	4618      	mov	r0, r3
  40578a:	3714      	adds	r7, #20
  40578c:	46bd      	mov	sp, r7
  40578e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405792:	4770      	bx	lr
  405794:	200001e4 	.word	0x200001e4

00405798 <drv_gpio_enable_interrupt>:
 * @brief Enable the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_enable_interrupt(drv_gpio_pins_t pin)
{
  405798:	b580      	push	{r7, lr}
  40579a:	b086      	sub	sp, #24
  40579c:	af00      	add	r7, sp, #0
  40579e:	4603      	mov	r3, r0
  4057a0:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  4057a2:	2300      	movs	r3, #0
  4057a4:	75fb      	strb	r3, [r7, #23]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);
  4057a6:	79fb      	ldrb	r3, [r7, #7]
  4057a8:	4a14      	ldr	r2, [pc, #80]	; (4057fc <drv_gpio_enable_interrupt+0x64>)
  4057aa:	011b      	lsls	r3, r3, #4
  4057ac:	4413      	add	r3, r2
  4057ae:	681b      	ldr	r3, [r3, #0]
  4057b0:	4618      	mov	r0, r3
  4057b2:	4b13      	ldr	r3, [pc, #76]	; (405800 <drv_gpio_enable_interrupt+0x68>)
  4057b4:	4798      	blx	r3
  4057b6:	6138      	str	r0, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);
  4057b8:	79fb      	ldrb	r3, [r7, #7]
  4057ba:	4a10      	ldr	r2, [pc, #64]	; (4057fc <drv_gpio_enable_interrupt+0x64>)
  4057bc:	011b      	lsls	r3, r3, #4
  4057be:	4413      	add	r3, r2
  4057c0:	681b      	ldr	r3, [r3, #0]
  4057c2:	4618      	mov	r0, r3
  4057c4:	4b0f      	ldr	r3, [pc, #60]	; (405804 <drv_gpio_enable_interrupt+0x6c>)
  4057c6:	4798      	blx	r3
  4057c8:	60f8      	str	r0, [r7, #12]
	pio_enable_interrupt(p_pio, PinMask);
  4057ca:	68f8      	ldr	r0, [r7, #12]
  4057cc:	6939      	ldr	r1, [r7, #16]
  4057ce:	4b0e      	ldr	r3, [pc, #56]	; (405808 <drv_gpio_enable_interrupt+0x70>)
  4057d0:	4798      	blx	r3
	if (p_pio == PIOA)
  4057d2:	68fa      	ldr	r2, [r7, #12]
  4057d4:	4b0d      	ldr	r3, [pc, #52]	; (40580c <drv_gpio_enable_interrupt+0x74>)
  4057d6:	429a      	cmp	r2, r3
  4057d8:	d103      	bne.n	4057e2 <drv_gpio_enable_interrupt+0x4a>
	{
		NVIC_EnableIRQ(PIOA_IRQn);
  4057da:	200b      	movs	r0, #11
  4057dc:	4b0c      	ldr	r3, [pc, #48]	; (405810 <drv_gpio_enable_interrupt+0x78>)
  4057de:	4798      	blx	r3
  4057e0:	e006      	b.n	4057f0 <drv_gpio_enable_interrupt+0x58>
	}
	else if (p_pio == PIOB)
  4057e2:	68fa      	ldr	r2, [r7, #12]
  4057e4:	4b0b      	ldr	r3, [pc, #44]	; (405814 <drv_gpio_enable_interrupt+0x7c>)
  4057e6:	429a      	cmp	r2, r3
  4057e8:	d102      	bne.n	4057f0 <drv_gpio_enable_interrupt+0x58>
	{
		NVIC_EnableIRQ(PIOB_IRQn);
  4057ea:	200c      	movs	r0, #12
  4057ec:	4b08      	ldr	r3, [pc, #32]	; (405810 <drv_gpio_enable_interrupt+0x78>)
  4057ee:	4798      	blx	r3
	}
	return status;
  4057f0:	7dfb      	ldrb	r3, [r7, #23]
}
  4057f2:	4618      	mov	r0, r3
  4057f4:	3718      	adds	r7, #24
  4057f6:	46bd      	mov	sp, r7
  4057f8:	bd80      	pop	{r7, pc}
  4057fa:	bf00      	nop
  4057fc:	200001e4 	.word	0x200001e4
  405800:	0040b061 	.word	0x0040b061
  405804:	0040b019 	.word	0x0040b019
  405808:	0040ad49 	.word	0x0040ad49
  40580c:	400e0e00 	.word	0x400e0e00
  405810:	004051b1 	.word	0x004051b1
  405814:	400e1000 	.word	0x400e1000

00405818 <drv_gpio_disable_interrupt_all>:
 * @brief Disable interrupts on every gpio pin of every port
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_disable_interrupt_all(void)
{
  405818:	b580      	push	{r7, lr}
  40581a:	b082      	sub	sp, #8
  40581c:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40581e:	2300      	movs	r3, #0
  405820:	71fb      	strb	r3, [r7, #7]
	pio_disable_interrupt(PIOA, ALL_INTERRUPT_MASK);
  405822:	480a      	ldr	r0, [pc, #40]	; (40584c <drv_gpio_disable_interrupt_all+0x34>)
  405824:	f04f 31ff 	mov.w	r1, #4294967295
  405828:	4b09      	ldr	r3, [pc, #36]	; (405850 <drv_gpio_disable_interrupt_all+0x38>)
  40582a:	4798      	blx	r3
	NVIC_DisableIRQ(PIOA_IRQn);
  40582c:	200b      	movs	r0, #11
  40582e:	4b09      	ldr	r3, [pc, #36]	; (405854 <drv_gpio_disable_interrupt_all+0x3c>)
  405830:	4798      	blx	r3
	pio_disable_interrupt(PIOB, ALL_INTERRUPT_MASK);
  405832:	4809      	ldr	r0, [pc, #36]	; (405858 <drv_gpio_disable_interrupt_all+0x40>)
  405834:	f04f 31ff 	mov.w	r1, #4294967295
  405838:	4b05      	ldr	r3, [pc, #20]	; (405850 <drv_gpio_disable_interrupt_all+0x38>)
  40583a:	4798      	blx	r3
	NVIC_DisableIRQ(PIOB_IRQn);
  40583c:	200c      	movs	r0, #12
  40583e:	4b05      	ldr	r3, [pc, #20]	; (405854 <drv_gpio_disable_interrupt_all+0x3c>)
  405840:	4798      	blx	r3
	return status;
  405842:	79fb      	ldrb	r3, [r7, #7]
}
  405844:	4618      	mov	r0, r3
  405846:	3708      	adds	r7, #8
  405848:	46bd      	mov	sp, r7
  40584a:	bd80      	pop	{r7, pc}
  40584c:	400e0e00 	.word	0x400e0e00
  405850:	0040ad69 	.word	0x0040ad69
  405854:	004051e1 	.word	0x004051e1
  405858:	400e1000 	.word	0x400e1000

0040585c <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  40585c:	b580      	push	{r7, lr}
  40585e:	b084      	sub	sp, #16
  405860:	af00      	add	r7, sp, #0
  405862:	6078      	str	r0, [r7, #4]
  405864:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PWR_BTN].pinId);
  405866:	4b0e      	ldr	r3, [pc, #56]	; (4058a0 <drv_gpio_int_pw+0x44>)
  405868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  40586c:	4618      	mov	r0, r3
  40586e:	4b0d      	ldr	r3, [pc, #52]	; (4058a4 <drv_gpio_int_pw+0x48>)
  405870:	4798      	blx	r3
  405872:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405874:	480c      	ldr	r0, [pc, #48]	; (4058a8 <drv_gpio_int_pw+0x4c>)
  405876:	68f9      	ldr	r1, [r7, #12]
  405878:	4b0c      	ldr	r3, [pc, #48]	; (4058ac <drv_gpio_int_pw+0x50>)
  40587a:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40587c:	4b0a      	ldr	r3, [pc, #40]	; (4058a8 <drv_gpio_int_pw+0x4c>)
  40587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  405880:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  405882:	68fa      	ldr	r2, [r7, #12]
  405884:	683b      	ldr	r3, [r7, #0]
  405886:	429a      	cmp	r2, r3
  405888:	d103      	bne.n	405892 <drv_gpio_int_pw+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_PWR_BTN].gpioSetFlag = 1;
  40588a:	4b05      	ldr	r3, [pc, #20]	; (4058a0 <drv_gpio_int_pw+0x44>)
  40588c:	2201      	movs	r2, #1
  40588e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}
	pio_enable_interrupt(PIOA, PinMask);
  405892:	4805      	ldr	r0, [pc, #20]	; (4058a8 <drv_gpio_int_pw+0x4c>)
  405894:	68f9      	ldr	r1, [r7, #12]
  405896:	4b06      	ldr	r3, [pc, #24]	; (4058b0 <drv_gpio_int_pw+0x54>)
  405898:	4798      	blx	r3
}
  40589a:	3710      	adds	r7, #16
  40589c:	46bd      	mov	sp, r7
  40589e:	bd80      	pop	{r7, pc}
  4058a0:	200001e4 	.word	0x200001e4
  4058a4:	0040b061 	.word	0x0040b061
  4058a8:	400e0e00 	.word	0x400e0e00
  4058ac:	0040ad69 	.word	0x0040ad69
  4058b0:	0040ad49 	.word	0x0040ad49

004058b4 <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  4058b4:	b580      	push	{r7, lr}
  4058b6:	b084      	sub	sp, #16
  4058b8:	af00      	add	r7, sp, #0
  4058ba:	6078      	str	r0, [r7, #4]
  4058bc:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC1_DET].pinId);
  4058be:	4b0e      	ldr	r3, [pc, #56]	; (4058f8 <drv_gpio_int_dc1+0x44>)
  4058c0:	6a1b      	ldr	r3, [r3, #32]
  4058c2:	4618      	mov	r0, r3
  4058c4:	4b0d      	ldr	r3, [pc, #52]	; (4058fc <drv_gpio_int_dc1+0x48>)
  4058c6:	4798      	blx	r3
  4058c8:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4058ca:	480d      	ldr	r0, [pc, #52]	; (405900 <drv_gpio_int_dc1+0x4c>)
  4058cc:	68f9      	ldr	r1, [r7, #12]
  4058ce:	4b0d      	ldr	r3, [pc, #52]	; (405904 <drv_gpio_int_dc1+0x50>)
  4058d0:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4058d2:	4b0b      	ldr	r3, [pc, #44]	; (405900 <drv_gpio_int_dc1+0x4c>)
  4058d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4058d6:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4058d8:	68fa      	ldr	r2, [r7, #12]
  4058da:	683b      	ldr	r3, [r7, #0]
  4058dc:	429a      	cmp	r2, r3
  4058de:	d103      	bne.n	4058e8 <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC1_DET].gpioSetFlag = 1;
  4058e0:	4b05      	ldr	r3, [pc, #20]	; (4058f8 <drv_gpio_int_dc1+0x44>)
  4058e2:	2201      	movs	r2, #1
  4058e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  4058e8:	4805      	ldr	r0, [pc, #20]	; (405900 <drv_gpio_int_dc1+0x4c>)
  4058ea:	68f9      	ldr	r1, [r7, #12]
  4058ec:	4b06      	ldr	r3, [pc, #24]	; (405908 <drv_gpio_int_dc1+0x54>)
  4058ee:	4798      	blx	r3
}
  4058f0:	3710      	adds	r7, #16
  4058f2:	46bd      	mov	sp, r7
  4058f4:	bd80      	pop	{r7, pc}
  4058f6:	bf00      	nop
  4058f8:	200001e4 	.word	0x200001e4
  4058fc:	0040b061 	.word	0x0040b061
  405900:	400e0e00 	.word	0x400e0e00
  405904:	0040ad69 	.word	0x0040ad69
  405908:	0040ad49 	.word	0x0040ad49

0040590c <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  40590c:	b580      	push	{r7, lr}
  40590e:	b084      	sub	sp, #16
  405910:	af00      	add	r7, sp, #0
  405912:	6078      	str	r0, [r7, #4]
  405914:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC2_DET].pinId);
  405916:	4b0e      	ldr	r3, [pc, #56]	; (405950 <drv_gpio_int_dc2+0x44>)
  405918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40591a:	4618      	mov	r0, r3
  40591c:	4b0d      	ldr	r3, [pc, #52]	; (405954 <drv_gpio_int_dc2+0x48>)
  40591e:	4798      	blx	r3
  405920:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405922:	480d      	ldr	r0, [pc, #52]	; (405958 <drv_gpio_int_dc2+0x4c>)
  405924:	68f9      	ldr	r1, [r7, #12]
  405926:	4b0d      	ldr	r3, [pc, #52]	; (40595c <drv_gpio_int_dc2+0x50>)
  405928:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  40592a:	4b0b      	ldr	r3, [pc, #44]	; (405958 <drv_gpio_int_dc2+0x4c>)
  40592c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40592e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  405930:	68fa      	ldr	r2, [r7, #12]
  405932:	683b      	ldr	r3, [r7, #0]
  405934:	429a      	cmp	r2, r3
  405936:	d103      	bne.n	405940 <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC2_DET].gpioSetFlag = 1;
  405938:	4b05      	ldr	r3, [pc, #20]	; (405950 <drv_gpio_int_dc2+0x44>)
  40593a:	2201      	movs	r2, #1
  40593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  405940:	4805      	ldr	r0, [pc, #20]	; (405958 <drv_gpio_int_dc2+0x4c>)
  405942:	68f9      	ldr	r1, [r7, #12]
  405944:	4b06      	ldr	r3, [pc, #24]	; (405960 <drv_gpio_int_dc2+0x54>)
  405946:	4798      	blx	r3
}
  405948:	3710      	adds	r7, #16
  40594a:	46bd      	mov	sp, r7
  40594c:	bd80      	pop	{r7, pc}
  40594e:	bf00      	nop
  405950:	200001e4 	.word	0x200001e4
  405954:	0040b061 	.word	0x0040b061
  405958:	400e0e00 	.word	0x400e0e00
  40595c:	0040ad69 	.word	0x0040ad69
  405960:	0040ad49 	.word	0x0040ad49

00405964 <drv_gpio_int_usb>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_usb(uint32_t ul_id, uint32_t ul_mask)
{
  405964:	b580      	push	{r7, lr}
  405966:	b084      	sub	sp, #16
  405968:	af00      	add	r7, sp, #0
  40596a:	6078      	str	r0, [r7, #4]
  40596c:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_USB_DET].pinId);
  40596e:	4b0e      	ldr	r3, [pc, #56]	; (4059a8 <drv_gpio_int_usb+0x44>)
  405970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  405974:	4618      	mov	r0, r3
  405976:	4b0d      	ldr	r3, [pc, #52]	; (4059ac <drv_gpio_int_usb+0x48>)
  405978:	4798      	blx	r3
  40597a:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  40597c:	480c      	ldr	r0, [pc, #48]	; (4059b0 <drv_gpio_int_usb+0x4c>)
  40597e:	68f9      	ldr	r1, [r7, #12]
  405980:	4b0c      	ldr	r3, [pc, #48]	; (4059b4 <drv_gpio_int_usb+0x50>)
  405982:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  405984:	4b0a      	ldr	r3, [pc, #40]	; (4059b0 <drv_gpio_int_usb+0x4c>)
  405986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  405988:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40598a:	68fa      	ldr	r2, [r7, #12]
  40598c:	683b      	ldr	r3, [r7, #0]
  40598e:	429a      	cmp	r2, r3
  405990:	d103      	bne.n	40599a <drv_gpio_int_usb+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_USB_DET].gpioSetFlag = 1;
  405992:	4b05      	ldr	r3, [pc, #20]	; (4059a8 <drv_gpio_int_usb+0x44>)
  405994:	2201      	movs	r2, #1
  405996:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	}
	pio_enable_interrupt(PIOA, PinMask);
  40599a:	4805      	ldr	r0, [pc, #20]	; (4059b0 <drv_gpio_int_usb+0x4c>)
  40599c:	68f9      	ldr	r1, [r7, #12]
  40599e:	4b06      	ldr	r3, [pc, #24]	; (4059b8 <drv_gpio_int_usb+0x54>)
  4059a0:	4798      	blx	r3
  4059a2:	3710      	adds	r7, #16
  4059a4:	46bd      	mov	sp, r7
  4059a6:	bd80      	pop	{r7, pc}
  4059a8:	200001e4 	.word	0x200001e4
  4059ac:	0040b061 	.word	0x0040b061
  4059b0:	400e0e00 	.word	0x400e0e00
  4059b4:	0040ad69 	.word	0x0040ad69
  4059b8:	0040ad49 	.word	0x0040ad49

004059bc <ltc2941Init>:
#include "LTC2941-1.h"
#include "common.h"


status_t ltc2941Init(slave_twi_config_t* slaveConfig)
{
  4059bc:	b580      	push	{r7, lr}
  4059be:	b084      	sub	sp, #16
  4059c0:	af00      	add	r7, sp, #0
  4059c2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  4059c4:	2301      	movs	r3, #1
  4059c6:	73fb      	strb	r3, [r7, #15]
	
	//Set configuration for charger 0xFC 	
	status = drv_i2c_write(slaveConfig, LTC_2941_CONTROL_REG_ADDR, 0xf0);
  4059c8:	6878      	ldr	r0, [r7, #4]
  4059ca:	2101      	movs	r1, #1
  4059cc:	22f0      	movs	r2, #240	; 0xf0
  4059ce:	4b26      	ldr	r3, [pc, #152]	; (405a68 <ltc2941Init+0xac>)
  4059d0:	4798      	blx	r3
  4059d2:	4603      	mov	r3, r0
  4059d4:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  4059d6:	7bfb      	ldrb	r3, [r7, #15]
  4059d8:	2b00      	cmp	r3, #0
  4059da:	d004      	beq.n	4059e6 <ltc2941Init+0x2a>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  4059dc:	4823      	ldr	r0, [pc, #140]	; (405a6c <ltc2941Init+0xb0>)
  4059de:	4b24      	ldr	r3, [pc, #144]	; (405a70 <ltc2941Init+0xb4>)
  4059e0:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  4059e2:	2301      	movs	r3, #1
  4059e4:	e03b      	b.n	405a5e <ltc2941Init+0xa2>
	}
	
	//Write the high threshold registers
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_HIGH_REG_ADDR, 0xff);
  4059e6:	6878      	ldr	r0, [r7, #4]
  4059e8:	2104      	movs	r1, #4
  4059ea:	22ff      	movs	r2, #255	; 0xff
  4059ec:	4b1e      	ldr	r3, [pc, #120]	; (405a68 <ltc2941Init+0xac>)
  4059ee:	4798      	blx	r3
  4059f0:	4603      	mov	r3, r0
  4059f2:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  4059f4:	7bfb      	ldrb	r3, [r7, #15]
  4059f6:	2b00      	cmp	r3, #0
  4059f8:	d004      	beq.n	405a04 <ltc2941Init+0x48>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  4059fa:	481c      	ldr	r0, [pc, #112]	; (405a6c <ltc2941Init+0xb0>)
  4059fc:	4b1c      	ldr	r3, [pc, #112]	; (405a70 <ltc2941Init+0xb4>)
  4059fe:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405a00:	2301      	movs	r3, #1
  405a02:	e02c      	b.n	405a5e <ltc2941Init+0xa2>
	}
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_HIGH_REG_ADDR + 1, 0xff);
  405a04:	6878      	ldr	r0, [r7, #4]
  405a06:	2105      	movs	r1, #5
  405a08:	22ff      	movs	r2, #255	; 0xff
  405a0a:	4b17      	ldr	r3, [pc, #92]	; (405a68 <ltc2941Init+0xac>)
  405a0c:	4798      	blx	r3
  405a0e:	4603      	mov	r3, r0
  405a10:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405a12:	7bfb      	ldrb	r3, [r7, #15]
  405a14:	2b00      	cmp	r3, #0
  405a16:	d004      	beq.n	405a22 <ltc2941Init+0x66>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405a18:	4814      	ldr	r0, [pc, #80]	; (405a6c <ltc2941Init+0xb0>)
  405a1a:	4b15      	ldr	r3, [pc, #84]	; (405a70 <ltc2941Init+0xb4>)
  405a1c:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405a1e:	2301      	movs	r3, #1
  405a20:	e01d      	b.n	405a5e <ltc2941Init+0xa2>
	}
	
	//Write the low threshold values
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_LOW_REG_ADDR, 0x48);
  405a22:	6878      	ldr	r0, [r7, #4]
  405a24:	2106      	movs	r1, #6
  405a26:	2248      	movs	r2, #72	; 0x48
  405a28:	4b0f      	ldr	r3, [pc, #60]	; (405a68 <ltc2941Init+0xac>)
  405a2a:	4798      	blx	r3
  405a2c:	4603      	mov	r3, r0
  405a2e:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405a30:	7bfb      	ldrb	r3, [r7, #15]
  405a32:	2b00      	cmp	r3, #0
  405a34:	d004      	beq.n	405a40 <ltc2941Init+0x84>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405a36:	480d      	ldr	r0, [pc, #52]	; (405a6c <ltc2941Init+0xb0>)
  405a38:	4b0d      	ldr	r3, [pc, #52]	; (405a70 <ltc2941Init+0xb4>)
  405a3a:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405a3c:	2301      	movs	r3, #1
  405a3e:	e00e      	b.n	405a5e <ltc2941Init+0xa2>
	}
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_LOW_REG_ADDR + 1, 0x2c);
  405a40:	6878      	ldr	r0, [r7, #4]
  405a42:	2107      	movs	r1, #7
  405a44:	222c      	movs	r2, #44	; 0x2c
  405a46:	4b08      	ldr	r3, [pc, #32]	; (405a68 <ltc2941Init+0xac>)
  405a48:	4798      	blx	r3
  405a4a:	4603      	mov	r3, r0
  405a4c:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405a4e:	7bfb      	ldrb	r3, [r7, #15]
  405a50:	2b00      	cmp	r3, #0
  405a52:	d004      	beq.n	405a5e <ltc2941Init+0xa2>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405a54:	4805      	ldr	r0, [pc, #20]	; (405a6c <ltc2941Init+0xb0>)
  405a56:	4b06      	ldr	r3, [pc, #24]	; (405a70 <ltc2941Init+0xb4>)
  405a58:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405a5a:	2301      	movs	r3, #1
  405a5c:	e7ff      	b.n	405a5e <ltc2941Init+0xa2>
	}
}
  405a5e:	4618      	mov	r0, r3
  405a60:	3710      	adds	r7, #16
  405a62:	46bd      	mov	sp, r7
  405a64:	bd80      	pop	{r7, pc}
  405a66:	bf00      	nop
  405a68:	00406bc5 	.word	0x00406bc5
  405a6c:	00415c58 	.word	0x00415c58
  405a70:	0040c91d 	.word	0x0040c91d

00405a74 <ltc2941SetCharge>:
status_t ltc2941SetCharge(slave_twi_config_t* slaveConfig, uint16_t chargeLevel)
{
  405a74:	b580      	push	{r7, lr}
  405a76:	b084      	sub	sp, #16
  405a78:	af00      	add	r7, sp, #0
  405a7a:	6078      	str	r0, [r7, #4]
  405a7c:	460b      	mov	r3, r1
  405a7e:	807b      	strh	r3, [r7, #2]
	status_t status = STATUS_FAIL;
  405a80:	2301      	movs	r3, #1
  405a82:	73fb      	strb	r3, [r7, #15]
	
	//Set the Accumulated charge register to indicate battery full
	status = drv_i2c_write(slaveConfig, 0x03, chargeLevel&0xFF);
  405a84:	887b      	ldrh	r3, [r7, #2]
  405a86:	b2db      	uxtb	r3, r3
  405a88:	6878      	ldr	r0, [r7, #4]
  405a8a:	2103      	movs	r1, #3
  405a8c:	461a      	mov	r2, r3
  405a8e:	4b11      	ldr	r3, [pc, #68]	; (405ad4 <ltc2941SetCharge+0x60>)
  405a90:	4798      	blx	r3
  405a92:	4603      	mov	r3, r0
  405a94:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405a96:	7bfb      	ldrb	r3, [r7, #15]
  405a98:	2b00      	cmp	r3, #0
  405a9a:	d004      	beq.n	405aa6 <ltc2941SetCharge+0x32>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405a9c:	480e      	ldr	r0, [pc, #56]	; (405ad8 <ltc2941SetCharge+0x64>)
  405a9e:	4b0f      	ldr	r3, [pc, #60]	; (405adc <ltc2941SetCharge+0x68>)
  405aa0:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405aa2:	2301      	movs	r3, #1
  405aa4:	e012      	b.n	405acc <ltc2941SetCharge+0x58>
	}
	status = drv_i2c_write(slaveConfig, 0x02, (chargeLevel>>8)&0xFF);
  405aa6:	887b      	ldrh	r3, [r7, #2]
  405aa8:	0a1b      	lsrs	r3, r3, #8
  405aaa:	b29b      	uxth	r3, r3
  405aac:	b2db      	uxtb	r3, r3
  405aae:	6878      	ldr	r0, [r7, #4]
  405ab0:	2102      	movs	r1, #2
  405ab2:	461a      	mov	r2, r3
  405ab4:	4b07      	ldr	r3, [pc, #28]	; (405ad4 <ltc2941SetCharge+0x60>)
  405ab6:	4798      	blx	r3
  405ab8:	4603      	mov	r3, r0
  405aba:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405abc:	7bfb      	ldrb	r3, [r7, #15]
  405abe:	2b00      	cmp	r3, #0
  405ac0:	d004      	beq.n	405acc <ltc2941SetCharge+0x58>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405ac2:	4805      	ldr	r0, [pc, #20]	; (405ad8 <ltc2941SetCharge+0x64>)
  405ac4:	4b05      	ldr	r3, [pc, #20]	; (405adc <ltc2941SetCharge+0x68>)
  405ac6:	4798      	blx	r3
		#endif
		return STATUS_FAIL;
  405ac8:	2301      	movs	r3, #1
  405aca:	e7ff      	b.n	405acc <ltc2941SetCharge+0x58>
	}	
};
  405acc:	4618      	mov	r0, r3
  405ace:	3710      	adds	r7, #16
  405ad0:	46bd      	mov	sp, r7
  405ad2:	bd80      	pop	{r7, pc}
  405ad4:	00406bc5 	.word	0x00406bc5
  405ad8:	00415c58 	.word	0x00415c58
  405adc:	0040c91d 	.word	0x0040c91d

00405ae0 <ltc2941GetCharge>:
uint16_t ltc2941GetCharge(slave_twi_config_t* slaveConfig)
{
  405ae0:	b590      	push	{r4, r7, lr}
  405ae2:	b085      	sub	sp, #20
  405ae4:	af00      	add	r7, sp, #0
  405ae6:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  405ae8:	2301      	movs	r3, #1
  405aea:	73fb      	strb	r3, [r7, #15]
	uint8_t chargeBytes[2] = {0};
  405aec:	2300      	movs	r3, #0
  405aee:	813b      	strh	r3, [r7, #8]
	uint16_t readData = 0;	
  405af0:	2300      	movs	r3, #0
  405af2:	81bb      	strh	r3, [r7, #12]
	//Read two bytes of Accumulated charge
	status = drv_i2c_read(slaveConfig, 0x02, chargeBytes, 2);
  405af4:	f107 0308 	add.w	r3, r7, #8
  405af8:	6878      	ldr	r0, [r7, #4]
  405afa:	2102      	movs	r1, #2
  405afc:	461a      	mov	r2, r3
  405afe:	2302      	movs	r3, #2
  405b00:	4c0b      	ldr	r4, [pc, #44]	; (405b30 <ltc2941GetCharge+0x50>)
  405b02:	47a0      	blx	r4
  405b04:	4603      	mov	r3, r0
  405b06:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405b08:	7bfb      	ldrb	r3, [r7, #15]
  405b0a:	2b00      	cmp	r3, #0
  405b0c:	d004      	beq.n	405b18 <ltc2941GetCharge+0x38>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Read from register failed\r\n");
  405b0e:	4809      	ldr	r0, [pc, #36]	; (405b34 <ltc2941GetCharge+0x54>)
  405b10:	4b09      	ldr	r3, [pc, #36]	; (405b38 <ltc2941GetCharge+0x58>)
  405b12:	4798      	blx	r3
		#endif
		return 0;
  405b14:	2300      	movs	r3, #0
  405b16:	e006      	b.n	405b26 <ltc2941GetCharge+0x46>
	}
	readData = (((chargeBytes[0]&0xFF)<<8) + (chargeBytes[1]&0xFF));	
  405b18:	7a3b      	ldrb	r3, [r7, #8]
  405b1a:	021b      	lsls	r3, r3, #8
  405b1c:	b29a      	uxth	r2, r3
  405b1e:	7a7b      	ldrb	r3, [r7, #9]
  405b20:	4413      	add	r3, r2
  405b22:	81bb      	strh	r3, [r7, #12]
	return readData;
  405b24:	89bb      	ldrh	r3, [r7, #12]
}
  405b26:	4618      	mov	r0, r3
  405b28:	3714      	adds	r7, #20
  405b2a:	46bd      	mov	sp, r7
  405b2c:	bd90      	pop	{r4, r7, pc}
  405b2e:	bf00      	nop
  405b30:	00406c35 	.word	0x00406c35
  405b34:	00415c7c 	.word	0x00415c7c
  405b38:	0040c91d 	.word	0x0040c91d

00405b3c <getCalculatedPercentage>:
//[?3/?25/?2016 2:19 PM] Hriday Mehta: 
uint32_t getCalculatedPercentage(slave_twi_config_t* slaveConfig)
{	
  405b3c:	b580      	push	{r7, lr}
  405b3e:	b084      	sub	sp, #16
  405b40:	af00      	add	r7, sp, #0
  405b42:	6078      	str	r0, [r7, #4]
	uint32_t charge = ltc2941GetCharge(slaveConfig);
  405b44:	6878      	ldr	r0, [r7, #4]
  405b46:	4b0a      	ldr	r3, [pc, #40]	; (405b70 <getCalculatedPercentage+0x34>)
  405b48:	4798      	blx	r3
  405b4a:	4603      	mov	r3, r0
  405b4c:	60fb      	str	r3, [r7, #12]
	return (((charge - CHARGE_EMPTY_VALUE)*100) / (CHARGE_FULL_VALUE - CHARGE_EMPTY_VALUE));
  405b4e:	68fb      	ldr	r3, [r7, #12]
  405b50:	2264      	movs	r2, #100	; 0x64
  405b52:	fb02 f303 	mul.w	r3, r2, r3
  405b56:	f5a3 13e2 	sub.w	r3, r3, #1851392	; 0x1c4000
  405b5a:	f5a3 53db 	sub.w	r3, r3, #7008	; 0x1b60
  405b5e:	4a05      	ldr	r2, [pc, #20]	; (405b74 <getCalculatedPercentage+0x38>)
  405b60:	fba2 1303 	umull	r1, r3, r2, r3
  405b64:	0bdb      	lsrs	r3, r3, #15
} 
  405b66:	4618      	mov	r0, r3
  405b68:	3710      	adds	r7, #16
  405b6a:	46bd      	mov	sp, r7
  405b6c:	bd80      	pop	{r7, pc}
  405b6e:	bf00      	nop
  405b70:	00405ae1 	.word	0x00405ae1
  405b74:	c43be2c7 	.word	0xc43be2c7

00405b78 <getRegValueForPercent>:
uint32_t getRegValueForPercent(uint32_t percent)
{
  405b78:	b480      	push	{r7}
  405b7a:	b083      	sub	sp, #12
  405b7c:	af00      	add	r7, sp, #0
  405b7e:	6078      	str	r0, [r7, #4]
	return (percent*(CHARGE_FULL_VALUE-CHARGE_EMPTY_VALUE)/100 + CHARGE_EMPTY_VALUE); 
  405b80:	687b      	ldr	r3, [r7, #4]
  405b82:	f24a 62fc 	movw	r2, #42748	; 0xa6fc
  405b86:	fb02 f203 	mul.w	r2, r2, r3
  405b8a:	4b06      	ldr	r3, [pc, #24]	; (405ba4 <getRegValueForPercent+0x2c>)
  405b8c:	fba3 1302 	umull	r1, r3, r3, r2
  405b90:	095b      	lsrs	r3, r3, #5
  405b92:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
  405b96:	3318      	adds	r3, #24
}
  405b98:	4618      	mov	r0, r3
  405b9a:	370c      	adds	r7, #12
  405b9c:	46bd      	mov	sp, r7
  405b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ba2:	4770      	bx	lr
  405ba4:	51eb851f 	.word	0x51eb851f

00405ba8 <ltc2941SetChargeComplete>:
status_t ltc2941SetChargeComplete(slave_twi_config_t* slaveConfig)
{
  405ba8:	b580      	push	{r7, lr}
  405baa:	b084      	sub	sp, #16
  405bac:	af00      	add	r7, sp, #0
  405bae:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;	
  405bb0:	2301      	movs	r3, #1
  405bb2:	73fb      	strb	r3, [r7, #15]
	ltc2941SetCharge(slaveConfig, CHARGE_FULL_VALUE);
  405bb4:	6878      	ldr	r0, [r7, #4]
  405bb6:	f64e 7194 	movw	r1, #61332	; 0xef94
  405bba:	4b03      	ldr	r3, [pc, #12]	; (405bc8 <ltc2941SetChargeComplete+0x20>)
  405bbc:	4798      	blx	r3
}
  405bbe:	4618      	mov	r0, r3
  405bc0:	3710      	adds	r7, #16
  405bc2:	46bd      	mov	sp, r7
  405bc4:	bd80      	pop	{r7, pc}
  405bc6:	bf00      	nop
  405bc8:	00405a75 	.word	0x00405a75

00405bcc <ltc2941GetStatus>:

uint8_t ltc2941GetStatus(slave_twi_config_t* slaveConfig)
{
  405bcc:	b590      	push	{r4, r7, lr}
  405bce:	b085      	sub	sp, #20
  405bd0:	af00      	add	r7, sp, #0
  405bd2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  405bd4:	2301      	movs	r3, #1
  405bd6:	73fb      	strb	r3, [r7, #15]
	uint8_t readData = 0;
  405bd8:	2300      	movs	r3, #0
  405bda:	73bb      	strb	r3, [r7, #14]
	
	//uint8_t fullRead[10]; 
	
	//Read the status register
	status = drv_i2c_read(slaveConfig, 0x00, &readData, 1);
  405bdc:	f107 030e 	add.w	r3, r7, #14
  405be0:	6878      	ldr	r0, [r7, #4]
  405be2:	2100      	movs	r1, #0
  405be4:	461a      	mov	r2, r3
  405be6:	2301      	movs	r3, #1
  405be8:	4c08      	ldr	r4, [pc, #32]	; (405c0c <ltc2941GetStatus+0x40>)
  405bea:	47a0      	blx	r4
  405bec:	4603      	mov	r3, r0
  405bee:	73fb      	strb	r3, [r7, #15]
	//for(i=0;i<8;i++)
	//{
		//printf("%02x:",fullRead[i]);
	//}
	//printf("\r\n");
	if (status != STATUS_PASS)
  405bf0:	7bfb      	ldrb	r3, [r7, #15]
  405bf2:	2b00      	cmp	r3, #0
  405bf4:	d004      	beq.n	405c00 <ltc2941GetStatus+0x34>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
  405bf6:	4806      	ldr	r0, [pc, #24]	; (405c10 <ltc2941GetStatus+0x44>)
  405bf8:	4b06      	ldr	r3, [pc, #24]	; (405c14 <ltc2941GetStatus+0x48>)
  405bfa:	4798      	blx	r3
		#endif
		return 0;
  405bfc:	2300      	movs	r3, #0
  405bfe:	e000      	b.n	405c02 <ltc2941GetStatus+0x36>
	}	
	return readData;
  405c00:	7bbb      	ldrb	r3, [r7, #14]
}
  405c02:	4618      	mov	r0, r3
  405c04:	3714      	adds	r7, #20
  405c06:	46bd      	mov	sp, r7
  405c08:	bd90      	pop	{r4, r7, pc}
  405c0a:	bf00      	nop
  405c0c:	00406c35 	.word	0x00406c35
  405c10:	00415c58 	.word	0x00415c58
  405c14:	0040c91d 	.word	0x0040c91d

00405c18 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  405c18:	b480      	push	{r7}
  405c1a:	b083      	sub	sp, #12
  405c1c:	af00      	add	r7, sp, #0
  405c1e:	4603      	mov	r3, r0
  405c20:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405c22:	4b08      	ldr	r3, [pc, #32]	; (405c44 <NVIC_EnableIRQ+0x2c>)
  405c24:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405c28:	0952      	lsrs	r2, r2, #5
  405c2a:	79f9      	ldrb	r1, [r7, #7]
  405c2c:	f001 011f 	and.w	r1, r1, #31
  405c30:	2001      	movs	r0, #1
  405c32:	fa00 f101 	lsl.w	r1, r0, r1
  405c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405c3a:	370c      	adds	r7, #12
  405c3c:	46bd      	mov	sp, r7
  405c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c42:	4770      	bx	lr
  405c44:	e000e100 	.word	0xe000e100

00405c48 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  405c48:	b480      	push	{r7}
  405c4a:	b083      	sub	sp, #12
  405c4c:	af00      	add	r7, sp, #0
  405c4e:	4603      	mov	r3, r0
  405c50:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405c52:	4b09      	ldr	r3, [pc, #36]	; (405c78 <NVIC_DisableIRQ+0x30>)
  405c54:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405c58:	0952      	lsrs	r2, r2, #5
  405c5a:	79f9      	ldrb	r1, [r7, #7]
  405c5c:	f001 011f 	and.w	r1, r1, #31
  405c60:	2001      	movs	r0, #1
  405c62:	fa00 f101 	lsl.w	r1, r0, r1
  405c66:	3220      	adds	r2, #32
  405c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405c6c:	370c      	adds	r7, #12
  405c6e:	46bd      	mov	sp, r7
  405c70:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c74:	4770      	bx	lr
  405c76:	bf00      	nop
  405c78:	e000e100 	.word	0xe000e100

00405c7c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  405c7c:	b480      	push	{r7}
  405c7e:	b083      	sub	sp, #12
  405c80:	af00      	add	r7, sp, #0
  405c82:	4603      	mov	r3, r0
  405c84:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405c86:	4b09      	ldr	r3, [pc, #36]	; (405cac <NVIC_ClearPendingIRQ+0x30>)
  405c88:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405c8c:	0952      	lsrs	r2, r2, #5
  405c8e:	79f9      	ldrb	r1, [r7, #7]
  405c90:	f001 011f 	and.w	r1, r1, #31
  405c94:	2001      	movs	r0, #1
  405c96:	fa00 f101 	lsl.w	r1, r0, r1
  405c9a:	3260      	adds	r2, #96	; 0x60
  405c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405ca0:	370c      	adds	r7, #12
  405ca2:	46bd      	mov	sp, r7
  405ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ca8:	4770      	bx	lr
  405caa:	bf00      	nop
  405cac:	e000e100 	.word	0xe000e100

00405cb0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  405cb0:	b480      	push	{r7}
  405cb2:	b083      	sub	sp, #12
  405cb4:	af00      	add	r7, sp, #0
  405cb6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405cb8:	687b      	ldr	r3, [r7, #4]
  405cba:	2b07      	cmp	r3, #7
  405cbc:	d825      	bhi.n	405d0a <osc_get_rate+0x5a>
  405cbe:	a201      	add	r2, pc, #4	; (adr r2, 405cc4 <osc_get_rate+0x14>)
  405cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405cc4:	00405ce5 	.word	0x00405ce5
  405cc8:	00405ceb 	.word	0x00405ceb
  405ccc:	00405cf1 	.word	0x00405cf1
  405cd0:	00405cf7 	.word	0x00405cf7
  405cd4:	00405cfb 	.word	0x00405cfb
  405cd8:	00405cff 	.word	0x00405cff
  405cdc:	00405d03 	.word	0x00405d03
  405ce0:	00405d07 	.word	0x00405d07
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  405ce4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405ce8:	e010      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  405cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405cee:	e00d      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  405cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405cf4:	e00a      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  405cf6:	4b08      	ldr	r3, [pc, #32]	; (405d18 <osc_get_rate+0x68>)
  405cf8:	e008      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  405cfa:	4b08      	ldr	r3, [pc, #32]	; (405d1c <osc_get_rate+0x6c>)
  405cfc:	e006      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  405cfe:	4b08      	ldr	r3, [pc, #32]	; (405d20 <osc_get_rate+0x70>)
  405d00:	e004      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  405d02:	4b07      	ldr	r3, [pc, #28]	; (405d20 <osc_get_rate+0x70>)
  405d04:	e002      	b.n	405d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  405d06:	4b06      	ldr	r3, [pc, #24]	; (405d20 <osc_get_rate+0x70>)
  405d08:	e000      	b.n	405d0c <osc_get_rate+0x5c>
	}

	return 0;
  405d0a:	2300      	movs	r3, #0
}
  405d0c:	4618      	mov	r0, r3
  405d0e:	370c      	adds	r7, #12
  405d10:	46bd      	mov	sp, r7
  405d12:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d16:	4770      	bx	lr
  405d18:	003d0900 	.word	0x003d0900
  405d1c:	007a1200 	.word	0x007a1200
  405d20:	00b71b00 	.word	0x00b71b00

00405d24 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  405d24:	b580      	push	{r7, lr}
  405d26:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  405d28:	2006      	movs	r0, #6
  405d2a:	4b04      	ldr	r3, [pc, #16]	; (405d3c <sysclk_get_main_hz+0x18>)
  405d2c:	4798      	blx	r3
  405d2e:	4602      	mov	r2, r0
  405d30:	4613      	mov	r3, r2
  405d32:	011b      	lsls	r3, r3, #4
  405d34:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  405d36:	4618      	mov	r0, r3
  405d38:	bd80      	pop	{r7, pc}
  405d3a:	bf00      	nop
  405d3c:	00405cb1 	.word	0x00405cb1

00405d40 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  405d40:	b580      	push	{r7, lr}
  405d42:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405d44:	4b02      	ldr	r3, [pc, #8]	; (405d50 <sysclk_get_cpu_hz+0x10>)
  405d46:	4798      	blx	r3
  405d48:	4603      	mov	r3, r0
  405d4a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405d4c:	4618      	mov	r0, r3
  405d4e:	bd80      	pop	{r7, pc}
  405d50:	00405d25 	.word	0x00405d25

00405d54 <mgr_managerTask>:
 * @brief Handles queued events for the power board.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void mgr_managerTask(void *pvParameters)
{
  405d54:	b590      	push	{r4, r7, lr}
  405d56:	b08b      	sub	sp, #44	; 0x2c
  405d58:	af04      	add	r7, sp, #16
  405d5a:	6078      	str	r0, [r7, #4]
	mgr_eventMessage_t msgEvent; 
	//initialize the board
	
	brd_board_init(); 
  405d5c:	4b72      	ldr	r3, [pc, #456]	; (405f28 <mgr_managerTask+0x1d4>)
  405d5e:	4798      	blx	r3
	printf("startApplication!\r\n");
  405d60:	4872      	ldr	r0, [pc, #456]	; (405f2c <mgr_managerTask+0x1d8>)
  405d62:	4b73      	ldr	r3, [pc, #460]	; (405f30 <mgr_managerTask+0x1dc>)
  405d64:	4798      	blx	r3
	//initialize power button listener. 	
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  405d66:	200a      	movs	r0, #10
  405d68:	2101      	movs	r1, #1
  405d6a:	4a72      	ldr	r2, [pc, #456]	; (405f34 <mgr_managerTask+0x1e0>)
  405d6c:	4b72      	ldr	r3, [pc, #456]	; (405f38 <mgr_managerTask+0x1e4>)
  405d6e:	4798      	blx	r3
	mgr_eventQueue = xQueueCreate( 10, sizeof(mgr_eventMessage_t));
  405d70:	200a      	movs	r0, #10
  405d72:	2104      	movs	r1, #4
  405d74:	2200      	movs	r2, #0
  405d76:	4b71      	ldr	r3, [pc, #452]	; (405f3c <mgr_managerTask+0x1e8>)
  405d78:	4798      	blx	r3
  405d7a:	4602      	mov	r2, r0
  405d7c:	4b70      	ldr	r3, [pc, #448]	; (405f40 <mgr_managerTask+0x1ec>)
  405d7e:	601a      	str	r2, [r3, #0]
	pwrButtonTimer = xTimerCreate("PowerBnt timer", (SLEEP_ENTRY_WAIT_TIME/portTICK_RATE_MS), pdFALSE, NULL, powerButtonTimerCallback);
  405d80:	4b70      	ldr	r3, [pc, #448]	; (405f44 <mgr_managerTask+0x1f0>)
  405d82:	9300      	str	r3, [sp, #0]
  405d84:	4870      	ldr	r0, [pc, #448]	; (405f48 <mgr_managerTask+0x1f4>)
  405d86:	f240 51dc 	movw	r1, #1500	; 0x5dc
  405d8a:	2200      	movs	r2, #0
  405d8c:	2300      	movs	r3, #0
  405d8e:	4c6f      	ldr	r4, [pc, #444]	; (405f4c <mgr_managerTask+0x1f8>)
  405d90:	47a0      	blx	r4
  405d92:	4602      	mov	r2, r0
  405d94:	4b6e      	ldr	r3, [pc, #440]	; (405f50 <mgr_managerTask+0x1fc>)
  405d96:	601a      	str	r2, [r3, #0]
	//start all the other tasks
	int retCode = 0;
  405d98:	2300      	movs	r3, #0
  405d9a:	617b      	str	r3, [r7, #20]
	retCode = xTaskCreate(chrg_task_chargeMonitor, "CHRG", TASK_CHRG_MON_STACK_SIZE, &chargeMonitorConfiguration, TASK_CHRG_MON_STACK_PRIORITY, NULL);
  405d9c:	2302      	movs	r3, #2
  405d9e:	9300      	str	r3, [sp, #0]
  405da0:	2300      	movs	r3, #0
  405da2:	9301      	str	r3, [sp, #4]
  405da4:	2300      	movs	r3, #0
  405da6:	9302      	str	r3, [sp, #8]
  405da8:	2300      	movs	r3, #0
  405daa:	9303      	str	r3, [sp, #12]
  405dac:	4869      	ldr	r0, [pc, #420]	; (405f54 <mgr_managerTask+0x200>)
  405dae:	496a      	ldr	r1, [pc, #424]	; (405f58 <mgr_managerTask+0x204>)
  405db0:	f44f 7240 	mov.w	r2, #768	; 0x300
  405db4:	4b69      	ldr	r3, [pc, #420]	; (405f5c <mgr_managerTask+0x208>)
  405db6:	4c6a      	ldr	r4, [pc, #424]	; (405f60 <mgr_managerTask+0x20c>)
  405db8:	47a0      	blx	r4
  405dba:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405dbc:	697b      	ldr	r3, [r7, #20]
  405dbe:	2b01      	cmp	r3, #1
  405dc0:	d003      	beq.n	405dca <mgr_managerTask+0x76>
	{
		printf("Failed to create CHRG task code %d\r\n", retCode);
  405dc2:	4868      	ldr	r0, [pc, #416]	; (405f64 <mgr_managerTask+0x210>)
  405dc4:	6979      	ldr	r1, [r7, #20]
  405dc6:	4b5a      	ldr	r3, [pc, #360]	; (405f30 <mgr_managerTask+0x1dc>)
  405dc8:	4798      	blx	r3
	}
	retCode = xTaskCreate(cmd_task_commandProcesor, "CMD", TASK_COMMAND_PROC_STACK_SIZE, NULL, TASK_COMMAND_PROC_PRIORITY, NULL);
  405dca:	2305      	movs	r3, #5
  405dcc:	9300      	str	r3, [sp, #0]
  405dce:	2300      	movs	r3, #0
  405dd0:	9301      	str	r3, [sp, #4]
  405dd2:	2300      	movs	r3, #0
  405dd4:	9302      	str	r3, [sp, #8]
  405dd6:	2300      	movs	r3, #0
  405dd8:	9303      	str	r3, [sp, #12]
  405dda:	4863      	ldr	r0, [pc, #396]	; (405f68 <mgr_managerTask+0x214>)
  405ddc:	4963      	ldr	r1, [pc, #396]	; (405f6c <mgr_managerTask+0x218>)
  405dde:	f44f 7200 	mov.w	r2, #512	; 0x200
  405de2:	2300      	movs	r3, #0
  405de4:	4c5e      	ldr	r4, [pc, #376]	; (405f60 <mgr_managerTask+0x20c>)
  405de6:	47a0      	blx	r4
  405de8:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405dea:	697b      	ldr	r3, [r7, #20]
  405dec:	2b01      	cmp	r3, #1
  405dee:	d003      	beq.n	405df8 <mgr_managerTask+0xa4>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  405df0:	485f      	ldr	r0, [pc, #380]	; (405f70 <mgr_managerTask+0x21c>)
  405df2:	6979      	ldr	r1, [r7, #20]
  405df4:	4b4e      	ldr	r3, [pc, #312]	; (405f30 <mgr_managerTask+0x1dc>)
  405df6:	4798      	blx	r3
	}
	retCode = xTaskCreate(dat_task_dataRouter, "DAT", TASK_DATA_ROUTER_STACK_SIZE, &dataRouterConfiguration, TASK_DATA_ROUTER_PRIORITY, NULL);
  405df8:	2306      	movs	r3, #6
  405dfa:	9300      	str	r3, [sp, #0]
  405dfc:	2300      	movs	r3, #0
  405dfe:	9301      	str	r3, [sp, #4]
  405e00:	2300      	movs	r3, #0
  405e02:	9302      	str	r3, [sp, #8]
  405e04:	2300      	movs	r3, #0
  405e06:	9303      	str	r3, [sp, #12]
  405e08:	485a      	ldr	r0, [pc, #360]	; (405f74 <mgr_managerTask+0x220>)
  405e0a:	495b      	ldr	r1, [pc, #364]	; (405f78 <mgr_managerTask+0x224>)
  405e0c:	f44f 7240 	mov.w	r2, #768	; 0x300
  405e10:	4b5a      	ldr	r3, [pc, #360]	; (405f7c <mgr_managerTask+0x228>)
  405e12:	4c53      	ldr	r4, [pc, #332]	; (405f60 <mgr_managerTask+0x20c>)
  405e14:	47a0      	blx	r4
  405e16:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405e18:	697b      	ldr	r3, [r7, #20]
  405e1a:	2b01      	cmp	r3, #1
  405e1c:	d003      	beq.n	405e26 <mgr_managerTask+0xd2>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  405e1e:	4854      	ldr	r0, [pc, #336]	; (405f70 <mgr_managerTask+0x21c>)
  405e20:	6979      	ldr	r1, [r7, #20]
  405e22:	4b43      	ldr	r3, [pc, #268]	; (405f30 <mgr_managerTask+0x1dc>)
  405e24:	4798      	blx	r3
	}
	drv_led_set(DRV_LED_GREEN, DRV_LED_FLASH);
  405e26:	2002      	movs	r0, #2
  405e28:	2100      	movs	r1, #0
  405e2a:	4b55      	ldr	r3, [pc, #340]	; (405f80 <mgr_managerTask+0x22c>)
  405e2c:	4798      	blx	r3
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  405e2e:	2004      	movs	r0, #4
  405e30:	2101      	movs	r1, #1
  405e32:	4b54      	ldr	r3, [pc, #336]	; (405f84 <mgr_managerTask+0x230>)
  405e34:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  405e36:	2001      	movs	r0, #1
  405e38:	2100      	movs	r1, #0
  405e3a:	4b52      	ldr	r3, [pc, #328]	; (405f84 <mgr_managerTask+0x230>)
  405e3c:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);	
  405e3e:	2000      	movs	r0, #0
  405e40:	2100      	movs	r1, #0
  405e42:	4b50      	ldr	r3, [pc, #320]	; (405f84 <mgr_managerTask+0x230>)
  405e44:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  405e46:	2009      	movs	r0, #9
  405e48:	2103      	movs	r1, #3
  405e4a:	4b4e      	ldr	r3, [pc, #312]	; (405f84 <mgr_managerTask+0x230>)
  405e4c:	4798      	blx	r3
	currentSystemState = SYS_STATE_POWER_ON;
  405e4e:	4b4e      	ldr	r3, [pc, #312]	; (405f88 <mgr_managerTask+0x234>)
  405e50:	2200      	movs	r2, #0
  405e52:	701a      	strb	r2, [r3, #0]
	//by default enable fast charging
	drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);	
  405e54:	2005      	movs	r0, #5
  405e56:	2101      	movs	r1, #1
  405e58:	4b4a      	ldr	r3, [pc, #296]	; (405f84 <mgr_managerTask+0x230>)
  405e5a:	4798      	blx	r3
	uint32_t pwrButtonHeldLowCount = 0;
  405e5c:	2300      	movs	r3, #0
  405e5e:	613b      	str	r3, [r7, #16]
	drv_gpio_pin_state_t pwrButtonState = DRV_GPIO_PIN_STATE_HIGH; 
  405e60:	2301      	movs	r3, #1
  405e62:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		//test code for the power board. 
		if(xQueueReceive( mgr_eventQueue, &(msgEvent), 50) == TRUE)
  405e64:	4b36      	ldr	r3, [pc, #216]	; (405f40 <mgr_managerTask+0x1ec>)
  405e66:	681a      	ldr	r2, [r3, #0]
  405e68:	f107 0308 	add.w	r3, r7, #8
  405e6c:	4610      	mov	r0, r2
  405e6e:	4619      	mov	r1, r3
  405e70:	2232      	movs	r2, #50	; 0x32
  405e72:	2300      	movs	r3, #0
  405e74:	4c45      	ldr	r4, [pc, #276]	; (405f8c <mgr_managerTask+0x238>)
  405e76:	47a0      	blx	r4
  405e78:	4603      	mov	r3, r0
  405e7a:	2b01      	cmp	r3, #1
  405e7c:	d14f      	bne.n	405f1e <mgr_managerTask+0x1ca>
		{	
			switch(msgEvent.sysEvent)
  405e7e:	7a3b      	ldrb	r3, [r7, #8]
  405e80:	2b05      	cmp	r3, #5
  405e82:	d84b      	bhi.n	405f1c <mgr_managerTask+0x1c8>
  405e84:	a201      	add	r2, pc, #4	; (adr r2, 405e8c <mgr_managerTask+0x138>)
  405e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405e8a:	bf00      	nop
  405e8c:	00405ea5 	.word	0x00405ea5
  405e90:	00405f1d 	.word	0x00405f1d
  405e94:	00405edd 	.word	0x00405edd
  405e98:	00405f1d 	.word	0x00405f1d
  405e9c:	00405ee9 	.word	0x00405ee9
  405ea0:	00405f07 	.word	0x00405f07
			{
				case SYS_EVENT_POWER_SWITCH:
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Received PwrSwitch Event\r\n");
  405ea4:	483a      	ldr	r0, [pc, #232]	; (405f90 <mgr_managerTask+0x23c>)
  405ea6:	4b3b      	ldr	r3, [pc, #236]	; (405f94 <mgr_managerTask+0x240>)
  405ea8:	4798      	blx	r3
					if(currentSystemState == SYS_STATE_POWER_ON)
  405eaa:	4b37      	ldr	r3, [pc, #220]	; (405f88 <mgr_managerTask+0x234>)
  405eac:	781b      	ldrb	r3, [r3, #0]
  405eae:	b2db      	uxtb	r3, r3
  405eb0:	2b00      	cmp	r3, #0
  405eb2:	d10a      	bne.n	405eca <mgr_managerTask+0x176>
					{						
						if(UsbConnected() == true)
  405eb4:	4b38      	ldr	r3, [pc, #224]	; (405f98 <mgr_managerTask+0x244>)
  405eb6:	4798      	blx	r3
  405eb8:	4603      	mov	r3, r0
  405eba:	2b00      	cmp	r3, #0
  405ebc:	d002      	beq.n	405ec4 <mgr_managerTask+0x170>
						{
							//go to power down charge state
							enterPowerDownChargeState();
  405ebe:	4b37      	ldr	r3, [pc, #220]	; (405f9c <mgr_managerTask+0x248>)
  405ec0:	4798      	blx	r3
  405ec2:	e00a      	b.n	405eda <mgr_managerTask+0x186>
						}
						else
						{
							//go to power down state.
							enterSleepMode();
  405ec4:	4b36      	ldr	r3, [pc, #216]	; (405fa0 <mgr_managerTask+0x24c>)
  405ec6:	4798      	blx	r3
					{ 
						//we need to power everything back on
						exitPowerDownChargeState();
					}						
				}
				break;
  405ec8:	e029      	b.n	405f1e <mgr_managerTask+0x1ca>
						{
							//go to power down state.
							enterSleepMode();
						}						
					}
					else if(currentSystemState == SYS_STATE_POWER_OFF_CHARGING)
  405eca:	4b2f      	ldr	r3, [pc, #188]	; (405f88 <mgr_managerTask+0x234>)
  405ecc:	781b      	ldrb	r3, [r3, #0]
  405ece:	b2db      	uxtb	r3, r3
  405ed0:	2b01      	cmp	r3, #1
  405ed2:	d102      	bne.n	405eda <mgr_managerTask+0x186>
					{ 
						//we need to power everything back on
						exitPowerDownChargeState();
  405ed4:	4b33      	ldr	r3, [pc, #204]	; (405fa4 <mgr_managerTask+0x250>)
  405ed6:	4798      	blx	r3
					}						
				}
				break;
  405ed8:	e021      	b.n	405f1e <mgr_managerTask+0x1ca>
  405eda:	e020      	b.n	405f1e <mgr_managerTask+0x1ca>
					
				}
				break;
				case SYS_EVENT_LOW_BATTERY:
				{
					vTaskDelay(200);
  405edc:	20c8      	movs	r0, #200	; 0xc8
  405ede:	4b32      	ldr	r3, [pc, #200]	; (405fa8 <mgr_managerTask+0x254>)
  405ee0:	4798      	blx	r3
					enterSleepMode();
  405ee2:	4b2f      	ldr	r3, [pc, #188]	; (405fa0 <mgr_managerTask+0x24c>)
  405ee4:	4798      	blx	r3
				}
				break; 
  405ee6:	e01a      	b.n	405f1e <mgr_managerTask+0x1ca>
					
				}
				break;
				case SYS_EVENT_USB_CONNECTED:
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:USB Connected\r\n");
  405ee8:	4830      	ldr	r0, [pc, #192]	; (405fac <mgr_managerTask+0x258>)
  405eea:	4b2a      	ldr	r3, [pc, #168]	; (405f94 <mgr_managerTask+0x240>)
  405eec:	4798      	blx	r3
					//toggle fast Charge
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_LOW);
  405eee:	2005      	movs	r0, #5
  405ef0:	2100      	movs	r1, #0
  405ef2:	4b24      	ldr	r3, [pc, #144]	; (405f84 <mgr_managerTask+0x230>)
  405ef4:	4798      	blx	r3
					vTaskDelay(200);
  405ef6:	20c8      	movs	r0, #200	; 0xc8
  405ef8:	4b2b      	ldr	r3, [pc, #172]	; (405fa8 <mgr_managerTask+0x254>)
  405efa:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);
  405efc:	2005      	movs	r0, #5
  405efe:	2101      	movs	r1, #1
  405f00:	4b20      	ldr	r3, [pc, #128]	; (405f84 <mgr_managerTask+0x230>)
  405f02:	4798      	blx	r3
					
				}
				break;
  405f04:	e00b      	b.n	405f1e <mgr_managerTask+0x1ca>
				case SYS_EVENT_USB_DISCONNECTED:
				{
					//if we're currently charging with the power off, then go to sleep mode
					if(currentSystemState == SYS_STATE_POWER_OFF_CHARGING)
  405f06:	4b20      	ldr	r3, [pc, #128]	; (405f88 <mgr_managerTask+0x234>)
  405f08:	781b      	ldrb	r3, [r3, #0]
  405f0a:	b2db      	uxtb	r3, r3
  405f0c:	2b01      	cmp	r3, #1
  405f0e:	d101      	bne.n	405f14 <mgr_managerTask+0x1c0>
					{
						enterSleepMode();
  405f10:	4b23      	ldr	r3, [pc, #140]	; (405fa0 <mgr_managerTask+0x24c>)
  405f12:	4798      	blx	r3
					}
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:USB Disconnected\r\n");
  405f14:	4826      	ldr	r0, [pc, #152]	; (405fb0 <mgr_managerTask+0x25c>)
  405f16:	4b1f      	ldr	r3, [pc, #124]	; (405f94 <mgr_managerTask+0x240>)
  405f18:	4798      	blx	r3
				}
				break;
  405f1a:	e000      	b.n	405f1e <mgr_managerTask+0x1ca>
				default:
				{
					
				}
				break;
  405f1c:	bf00      	nop
				
			}
		}
		vTaskDelay(150);
  405f1e:	2096      	movs	r0, #150	; 0x96
  405f20:	4b21      	ldr	r3, [pc, #132]	; (405fa8 <mgr_managerTask+0x254>)
  405f22:	4798      	blx	r3
		//if(pwrButtonHeldLowCount == 75)
		//{
			////reset the board.
			//rstc_start_software_reset(RSTC);
		//}
	}
  405f24:	e79e      	b.n	405e64 <mgr_managerTask+0x110>
  405f26:	bf00      	nop
  405f28:	00404295 	.word	0x00404295
  405f2c:	00415c98 	.word	0x00415c98
  405f30:	0040c6d1 	.word	0x0040c6d1
  405f34:	00405fdd 	.word	0x00405fdd
  405f38:	0040567d 	.word	0x0040567d
  405f3c:	004085e5 	.word	0x004085e5
  405f40:	20000f70 	.word	0x20000f70
  405f44:	00405fb5 	.word	0x00405fb5
  405f48:	00415cac 	.word	0x00415cac
  405f4c:	00409ab1 	.word	0x00409ab1
  405f50:	20000f74 	.word	0x20000f74
  405f54:	0040443d 	.word	0x0040443d
  405f58:	00415cbc 	.word	0x00415cbc
  405f5c:	200002e0 	.word	0x200002e0
  405f60:	00408d45 	.word	0x00408d45
  405f64:	00415cc4 	.word	0x00415cc4
  405f68:	004047d1 	.word	0x004047d1
  405f6c:	00415cec 	.word	0x00415cec
  405f70:	00415cf0 	.word	0x00415cf0
  405f74:	00404ef1 	.word	0x00404ef1
  405f78:	00415d14 	.word	0x00415d14
  405f7c:	200002d8 	.word	0x200002d8
  405f80:	004070b9 	.word	0x004070b9
  405f84:	0040546d 	.word	0x0040546d
  405f88:	200002d4 	.word	0x200002d4
  405f8c:	004088a9 	.word	0x004088a9
  405f90:	00415d18 	.word	0x00415d18
  405f94:	00405129 	.word	0x00405129
  405f98:	00406399 	.word	0x00406399
  405f9c:	004063c5 	.word	0x004063c5
  405fa0:	0040605d 	.word	0x0040605d
  405fa4:	0040649d 	.word	0x0040649d
  405fa8:	00408f05 	.word	0x00408f05
  405fac:	00415d40 	.word	0x00415d40
  405fb0:	00415d5c 	.word	0x00415d5c

00405fb4 <powerButtonTimerCallback>:
}


//static functions
void powerButtonTimerCallback()
{
  405fb4:	b580      	push	{r7, lr}
  405fb6:	b082      	sub	sp, #8
  405fb8:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH; 
  405fba:	2301      	movs	r3, #1
  405fbc:	71fb      	strb	r3, [r7, #7]
	mgr_eventMessage_t pwrDownEvent = 
  405fbe:	2300      	movs	r3, #0
  405fc0:	703b      	strb	r3, [r7, #0]
  405fc2:	2300      	movs	r3, #0
  405fc4:	807b      	strh	r3, [r7, #2]
	{
		.sysEvent = SYS_EVENT_POWER_SWITCH,
		.data = 0		
	};
	//check if the button is still low
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  405fc6:	1dfb      	adds	r3, r7, #7
  405fc8:	200a      	movs	r0, #10
  405fca:	4619      	mov	r1, r3
  405fcc:	4b02      	ldr	r3, [pc, #8]	; (405fd8 <powerButtonTimerCallback+0x24>)
  405fce:	4798      	blx	r3
			////this is an error, we should log it.
			//
		//}	
	}
	
}
  405fd0:	3708      	adds	r7, #8
  405fd2:	46bd      	mov	sp, r7
  405fd4:	bd80      	pop	{r7, pc}
  405fd6:	bf00      	nop
  405fd8:	00405561 	.word	0x00405561

00405fdc <powerButtonHandler_LowEdge>:
	pio_enable_interrupt(PIOA, PinMask);	

}
volatile uint32_t hasWoken = pdFALSE; 
static void powerButtonHandler_LowEdge(uint32_t ul_id, uint32_t ul_mask)
{
  405fdc:	b590      	push	{r4, r7, lr}
  405fde:	b087      	sub	sp, #28
  405fe0:	af02      	add	r7, sp, #8
  405fe2:	6078      	str	r0, [r7, #4]
  405fe4:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(DRV_GPIO_ID_PIN_PWR_BTN);
  405fe6:	2005      	movs	r0, #5
  405fe8:	4b13      	ldr	r3, [pc, #76]	; (406038 <powerButtonHandler_LowEdge+0x5c>)
  405fea:	4798      	blx	r3
  405fec:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405fee:	4813      	ldr	r0, [pc, #76]	; (40603c <powerButtonHandler_LowEdge+0x60>)
  405ff0:	68f9      	ldr	r1, [r7, #12]
  405ff2:	4b13      	ldr	r3, [pc, #76]	; (406040 <powerButtonHandler_LowEdge+0x64>)
  405ff4:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  405ff6:	4b11      	ldr	r3, [pc, #68]	; (40603c <powerButtonHandler_LowEdge+0x60>)
  405ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  405ffa:	60bb      	str	r3, [r7, #8]
	
	if (PinMask == ul_mask)
  405ffc:	68fa      	ldr	r2, [r7, #12]
  405ffe:	683b      	ldr	r3, [r7, #0]
  406000:	429a      	cmp	r2, r3
  406002:	d10c      	bne.n	40601e <powerButtonHandler_LowEdge+0x42>
	{
		//drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_HIGH_EDGE,powerButtonHandler_HighEdge);
		xTimerResetFromISR(pwrButtonTimer,&hasWoken);
  406004:	4b0f      	ldr	r3, [pc, #60]	; (406044 <powerButtonHandler_LowEdge+0x68>)
  406006:	681c      	ldr	r4, [r3, #0]
  406008:	4b0f      	ldr	r3, [pc, #60]	; (406048 <powerButtonHandler_LowEdge+0x6c>)
  40600a:	4798      	blx	r3
  40600c:	4603      	mov	r3, r0
  40600e:	2200      	movs	r2, #0
  406010:	9200      	str	r2, [sp, #0]
  406012:	4620      	mov	r0, r4
  406014:	2100      	movs	r1, #0
  406016:	461a      	mov	r2, r3
  406018:	4b0c      	ldr	r3, [pc, #48]	; (40604c <powerButtonHandler_LowEdge+0x70>)
  40601a:	4c0d      	ldr	r4, [pc, #52]	; (406050 <powerButtonHandler_LowEdge+0x74>)
  40601c:	47a0      	blx	r4
	}
	pio_enable_interrupt(PIOA, PinMask);	
  40601e:	4807      	ldr	r0, [pc, #28]	; (40603c <powerButtonHandler_LowEdge+0x60>)
  406020:	68f9      	ldr	r1, [r7, #12]
  406022:	4b0c      	ldr	r3, [pc, #48]	; (406054 <powerButtonHandler_LowEdge+0x78>)
  406024:	4798      	blx	r3
	if( hasWoken != pdFALSE )
  406026:	4b09      	ldr	r3, [pc, #36]	; (40604c <powerButtonHandler_LowEdge+0x70>)
  406028:	681b      	ldr	r3, [r3, #0]
  40602a:	2b00      	cmp	r3, #0
  40602c:	d001      	beq.n	406032 <powerButtonHandler_LowEdge+0x56>
    {
        /* Call the interrupt safe yield function here (actual function
        depends on the FreeRTOS port being used). */
		taskYIELD();
  40602e:	4b0a      	ldr	r3, [pc, #40]	; (406058 <powerButtonHandler_LowEdge+0x7c>)
  406030:	4798      	blx	r3
    }
	
}
  406032:	3714      	adds	r7, #20
  406034:	46bd      	mov	sp, r7
  406036:	bd90      	pop	{r4, r7, pc}
  406038:	0040b061 	.word	0x0040b061
  40603c:	400e0e00 	.word	0x400e0e00
  406040:	0040ad69 	.word	0x0040ad69
  406044:	20000f74 	.word	0x20000f74
  406048:	00409151 	.word	0x00409151
  40604c:	20000f78 	.word	0x20000f78
  406050:	00409b2d 	.word	0x00409b2d
  406054:	0040ad49 	.word	0x0040ad49
  406058:	00408171 	.word	0x00408171

0040605c <enterSleepMode>:

static void enterSleepMode()
{
  40605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406060:	b0a1      	sub	sp, #132	; 0x84
  406062:	af00      	add	r7, sp, #0
	cmd_commandPacket_t packet;
	uint32_t powerOnFlag = FALSE, chargeFlag = FALSE;
  406064:	2300      	movs	r3, #0
  406066:	67fb      	str	r3, [r7, #124]	; 0x7c
  406068:	2300      	movs	r3, #0
  40606a:	67bb      	str	r3, [r7, #120]	; 0x78
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH;  
  40606c:	2301      	movs	r3, #1
  40606e:	70fb      	strb	r3, [r7, #3]
	drv_gpio_pin_state_t chargingDetect = DRV_GPIO_INTERRUPT_LOW_EDGE; 
  406070:	2301      	movs	r3, #1
  406072:	70bb      	strb	r3, [r7, #2]
	strncpy(packet.packetData,"Power\r\n",CMD_INCOMING_CMD_SIZE_MAX); 
  406074:	1d3b      	adds	r3, r7, #4
  406076:	3301      	adds	r3, #1
  406078:	4618      	mov	r0, r3
  40607a:	498a      	ldr	r1, [pc, #552]	; (4062a4 <enterSleepMode+0x248>)
  40607c:	2264      	movs	r2, #100	; 0x64
  40607e:	4b8a      	ldr	r3, [pc, #552]	; (4062a8 <enterSleepMode+0x24c>)
  406080:	4798      	blx	r3
	uint32_t loopCount = 0;
  406082:	2300      	movs	r3, #0
  406084:	677b      	str	r3, [r7, #116]	; 0x74
	packet.packetSize = strlen(packet.packetData); 
  406086:	1d3b      	adds	r3, r7, #4
  406088:	3301      	adds	r3, #1
  40608a:	4618      	mov	r0, r3
  40608c:	4b87      	ldr	r3, [pc, #540]	; (4062ac <enterSleepMode+0x250>)
  40608e:	4798      	blx	r3
  406090:	4603      	mov	r3, r0
  406092:	b29b      	uxth	r3, r3
  406094:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	//Send power down message to data board
	if(cmd_queue_commandQueue != NULL)
  406098:	4b85      	ldr	r3, [pc, #532]	; (4062b0 <enterSleepMode+0x254>)
  40609a:	681b      	ldr	r3, [r3, #0]
  40609c:	2b00      	cmp	r3, #0
  40609e:	d008      	beq.n	4060b2 <enterSleepMode+0x56>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  4060a0:	4b83      	ldr	r3, [pc, #524]	; (4062b0 <enterSleepMode+0x254>)
  4060a2:	681a      	ldr	r2, [r3, #0]
  4060a4:	1d3b      	adds	r3, r7, #4
  4060a6:	4610      	mov	r0, r2
  4060a8:	4619      	mov	r1, r3
  4060aa:	2205      	movs	r2, #5
  4060ac:	2300      	movs	r3, #0
  4060ae:	4e81      	ldr	r6, [pc, #516]	; (4062b4 <enterSleepMode+0x258>)
  4060b0:	47b0      	blx	r6
		{
			//this is an error, we should log it.
		}
	}	
	//turn off power to both Jacks
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  4060b2:	2001      	movs	r0, #1
  4060b4:	2101      	movs	r1, #1
  4060b6:	4b80      	ldr	r3, [pc, #512]	; (4062b8 <enterSleepMode+0x25c>)
  4060b8:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  4060ba:	2000      	movs	r0, #0
  4060bc:	2101      	movs	r1, #1
  4060be:	4b7e      	ldr	r3, [pc, #504]	; (4062b8 <enterSleepMode+0x25c>)
  4060c0:	4798      	blx	r3
	//wait for GPIO to go low (indication that data board is ready to sleep)
	loopCount = 0;
  4060c2:	2300      	movs	r3, #0
  4060c4:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t startTime = xTaskGetTickCount(); 
  4060c6:	4b7d      	ldr	r3, [pc, #500]	; (4062bc <enterSleepMode+0x260>)
  4060c8:	4798      	blx	r3
  4060ca:	6738      	str	r0, [r7, #112]	; 0x70
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;  
  4060cc:	2301      	movs	r3, #1
  4060ce:	707b      	strb	r3, [r7, #1]
	vTaskDelay(2000);
  4060d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4060d4:	4b7a      	ldr	r3, [pc, #488]	; (4062c0 <enterSleepMode+0x264>)
  4060d6:	4798      	blx	r3
	while(loopCount < 30)
  4060d8:	e00e      	b.n	4060f8 <enterSleepMode+0x9c>
	{		
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  4060da:	1c7b      	adds	r3, r7, #1
  4060dc:	2009      	movs	r0, #9
  4060de:	4619      	mov	r1, r3
  4060e0:	4b78      	ldr	r3, [pc, #480]	; (4062c4 <enterSleepMode+0x268>)
  4060e2:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_LOW)
  4060e4:	787b      	ldrb	r3, [r7, #1]
  4060e6:	2b00      	cmp	r3, #0
  4060e8:	d100      	bne.n	4060ec <enterSleepMode+0x90>
		{
			//the data board is ready to shutdown, leave the loop. 
			break;
  4060ea:	e008      	b.n	4060fe <enterSleepMode+0xa2>
		}
		vTaskDelay(10);
  4060ec:	200a      	movs	r0, #10
  4060ee:	4b74      	ldr	r3, [pc, #464]	; (4062c0 <enterSleepMode+0x264>)
  4060f0:	4798      	blx	r3
		loopCount++;
  4060f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4060f4:	3301      	adds	r3, #1
  4060f6:	677b      	str	r3, [r7, #116]	; 0x74
	//wait for GPIO to go low (indication that data board is ready to sleep)
	loopCount = 0;
	uint32_t startTime = xTaskGetTickCount(); 
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;  
	vTaskDelay(2000);
	while(loopCount < 30)
  4060f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4060fa:	2b1d      	cmp	r3, #29
  4060fc:	d9ed      	bls.n	4060da <enterSleepMode+0x7e>
		vTaskDelay(10);
		loopCount++;
	}
	
	//turn off power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
  4060fe:	2004      	movs	r0, #4
  406100:	2100      	movs	r1, #0
  406102:	4b6d      	ldr	r3, [pc, #436]	; (4062b8 <enterSleepMode+0x25c>)
  406104:	4798      	blx	r3
	//wait for the button to go high
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  406106:	1cfb      	adds	r3, r7, #3
  406108:	200a      	movs	r0, #10
  40610a:	4619      	mov	r1, r3
  40610c:	4b6d      	ldr	r3, [pc, #436]	; (4062c4 <enterSleepMode+0x268>)
  40610e:	4798      	blx	r3
	loopCount = 0;
  406110:	2300      	movs	r3, #0
  406112:	677b      	str	r3, [r7, #116]	; 0x74
	//wait up to 5 seconds for the button to go high before going to sleep. 
	while(loopCount < 50)
  406114:	e00e      	b.n	406134 <enterSleepMode+0xd8>
	{		
		vTaskDelay(100); 
  406116:	2064      	movs	r0, #100	; 0x64
  406118:	4b69      	ldr	r3, [pc, #420]	; (4062c0 <enterSleepMode+0x264>)
  40611a:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  40611c:	1cfb      	adds	r3, r7, #3
  40611e:	200a      	movs	r0, #10
  406120:	4619      	mov	r1, r3
  406122:	4b68      	ldr	r3, [pc, #416]	; (4062c4 <enterSleepMode+0x268>)
  406124:	4798      	blx	r3
		if(pwSwState == DRV_GPIO_PIN_STATE_HIGH)
  406126:	78fb      	ldrb	r3, [r7, #3]
  406128:	2b01      	cmp	r3, #1
  40612a:	d100      	bne.n	40612e <enterSleepMode+0xd2>
		{
			break;
  40612c:	e005      	b.n	40613a <enterSleepMode+0xde>
		}
		loopCount++;
  40612e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406130:	3301      	adds	r3, #1
  406132:	677b      	str	r3, [r7, #116]	; 0x74
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
	//wait for the button to go high
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
	loopCount = 0;
	//wait up to 5 seconds for the button to go high before going to sleep. 
	while(loopCount < 50)
  406134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406136:	2b31      	cmp	r3, #49	; 0x31
  406138:	d9ed      	bls.n	406116 <enterSleepMode+0xba>
			break;
		}
		loopCount++;
	}	
	//go to sleep, and wait for power button press again. 
	PreSleepProcess();
  40613a:	4b63      	ldr	r3, [pc, #396]	; (4062c8 <enterSleepMode+0x26c>)
  40613c:	4798      	blx	r3
	while ((powerOnFlag == FALSE) && (chargeFlag == FALSE))	//Stay in sleep mode until wakeup
  40613e:	e05b      	b.n	4061f8 <enterSleepMode+0x19c>
	{
		//cpu_irq_disable();
		//pmc_enable_sleepmode(0);
		uint32_t startupInput = (1<<4 | 1<<14); //WKUP14 and WKUP4 (power button and USB detect) 
  406140:	f244 0310 	movw	r3, #16400	; 0x4010
  406144:	66fb      	str	r3, [r7, #108]	; 0x6c
		pmc_set_fast_startup_input(startupInput);
  406146:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  406148:	4b60      	ldr	r3, [pc, #384]	; (4062cc <enterSleepMode+0x270>)
  40614a:	4798      	blx	r3
		//uint32_t regVal = SUPC->SUPC_SR;  
		pmc_sleep(SAM_PM_SMODE_WAIT);
  40614c:	2004      	movs	r0, #4
  40614e:	4b60      	ldr	r3, [pc, #384]	; (4062d0 <enterSleepMode+0x274>)
  406150:	4798      	blx	r3
		//drv_gpio_togglePin(DRV_GPIO_PIN_LED_BLUE);
		//Processor wakes up from sleep
		delay_ms(WAKEUP_DELAY);
  406152:	4b60      	ldr	r3, [pc, #384]	; (4062d4 <enterSleepMode+0x278>)
  406154:	4798      	blx	r3
  406156:	4603      	mov	r3, r0
  406158:	4618      	mov	r0, r3
  40615a:	f04f 0100 	mov.w	r1, #0
  40615e:	4602      	mov	r2, r0
  406160:	460b      	mov	r3, r1
  406162:	ea4f 0983 	mov.w	r9, r3, lsl #2
  406166:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  40616a:	ea4f 0882 	mov.w	r8, r2, lsl #2
  40616e:	4642      	mov	r2, r8
  406170:	464b      	mov	r3, r9
  406172:	015d      	lsls	r5, r3, #5
  406174:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  406178:	0154      	lsls	r4, r2, #5
  40617a:	1aa4      	subs	r4, r4, r2
  40617c:	eb65 0503 	sbc.w	r5, r5, r3
  406180:	1824      	adds	r4, r4, r0
  406182:	eb45 0501 	adc.w	r5, r5, r1
  406186:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
  40618a:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
  40618e:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  406192:	4654      	mov	r4, sl
  406194:	465d      	mov	r5, fp
  406196:	4620      	mov	r0, r4
  406198:	4629      	mov	r1, r5
  40619a:	f243 62af 	movw	r2, #13999	; 0x36af
  40619e:	f04f 0300 	mov.w	r3, #0
  4061a2:	1812      	adds	r2, r2, r0
  4061a4:	eb43 0301 	adc.w	r3, r3, r1
  4061a8:	4e4b      	ldr	r6, [pc, #300]	; (4062d8 <enterSleepMode+0x27c>)
  4061aa:	4610      	mov	r0, r2
  4061ac:	4619      	mov	r1, r3
  4061ae:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4061b2:	f04f 0300 	mov.w	r3, #0
  4061b6:	47b0      	blx	r6
  4061b8:	4602      	mov	r2, r0
  4061ba:	460b      	mov	r3, r1
  4061bc:	4613      	mov	r3, r2
  4061be:	4618      	mov	r0, r3
  4061c0:	4b46      	ldr	r3, [pc, #280]	; (4062dc <enterSleepMode+0x280>)
  4061c2:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  4061c4:	1cfb      	adds	r3, r7, #3
  4061c6:	200a      	movs	r0, #10
  4061c8:	4619      	mov	r1, r3
  4061ca:	4b3e      	ldr	r3, [pc, #248]	; (4062c4 <enterSleepMode+0x268>)
  4061cc:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_ID_PIN_CHRG_PG, &chargingDetect); //
  4061ce:	1cbb      	adds	r3, r7, #2
  4061d0:	200f      	movs	r0, #15
  4061d2:	4619      	mov	r1, r3
  4061d4:	4b3b      	ldr	r3, [pc, #236]	; (4062c4 <enterSleepMode+0x268>)
  4061d6:	4798      	blx	r3
		if(pwSwState == DRV_GPIO_PIN_STATE_LOW)	//check if it is a false wakeup
  4061d8:	78fb      	ldrb	r3, [r7, #3]
  4061da:	2b00      	cmp	r3, #0
  4061dc:	d102      	bne.n	4061e4 <enterSleepMode+0x188>
		{
			//The power button has been held long enough, break the loop and power on. 
			powerOnFlag = TRUE; 
  4061de:	2301      	movs	r3, #1
  4061e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  4061e2:	e001      	b.n	4061e8 <enterSleepMode+0x18c>
		}
		else
		{
			powerOnFlag = FALSE;
  4061e4:	2300      	movs	r3, #0
  4061e6:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
		if(chargingDetect == DRV_GPIO_PIN_STATE_LOW)
  4061e8:	78bb      	ldrb	r3, [r7, #2]
  4061ea:	2b00      	cmp	r3, #0
  4061ec:	d102      	bne.n	4061f4 <enterSleepMode+0x198>
		{
			chargeFlag = TRUE; 
  4061ee:	2301      	movs	r3, #1
  4061f0:	67bb      	str	r3, [r7, #120]	; 0x78
  4061f2:	e001      	b.n	4061f8 <enterSleepMode+0x19c>
		}
		else
		{
			chargeFlag = FALSE; 
  4061f4:	2300      	movs	r3, #0
  4061f6:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		loopCount++;
	}	
	//go to sleep, and wait for power button press again. 
	PreSleepProcess();
	while ((powerOnFlag == FALSE) && (chargeFlag == FALSE))	//Stay in sleep mode until wakeup
  4061f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4061fa:	2b00      	cmp	r3, #0
  4061fc:	d102      	bne.n	406204 <enterSleepMode+0x1a8>
  4061fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  406200:	2b00      	cmp	r3, #0
  406202:	d09d      	beq.n	406140 <enterSleepMode+0xe4>
		else
		{
			chargeFlag = FALSE; 
		}
	}
	PostSleepProcess();
  406204:	4b36      	ldr	r3, [pc, #216]	; (4062e0 <enterSleepMode+0x284>)
  406206:	4798      	blx	r3
	if(powerOnFlag == TRUE)
  406208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  40620a:	2b01      	cmp	r3, #1
  40620c:	d13b      	bne.n	406286 <enterSleepMode+0x22a>
	{	
		//set the GPIO pin to be an input. 
		drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  40620e:	2009      	movs	r0, #9
  406210:	2103      	movs	r1, #3
  406212:	4b29      	ldr	r3, [pc, #164]	; (4062b8 <enterSleepMode+0x25c>)
  406214:	4798      	blx	r3
		//enable power to the data board
		drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  406216:	2004      	movs	r0, #4
  406218:	2101      	movs	r1, #1
  40621a:	4b27      	ldr	r3, [pc, #156]	; (4062b8 <enterSleepMode+0x25c>)
  40621c:	4798      	blx	r3
		//wait for brain mcu to start up
		gpioPinState = DRV_GPIO_PIN_STATE_LOW; 
  40621e:	2300      	movs	r3, #0
  406220:	707b      	strb	r3, [r7, #1]
		loopCount = 0;
  406222:	2300      	movs	r3, #0
  406224:	677b      	str	r3, [r7, #116]	; 0x74
		//set the count over the threshold so it needs to be reset by it going high again. 
		powerButtonLowCount = 16;
  406226:	4b2f      	ldr	r3, [pc, #188]	; (4062e4 <enterSleepMode+0x288>)
  406228:	2210      	movs	r2, #16
  40622a:	601a      	str	r2, [r3, #0]
		while(loopCount < 30)
  40622c:	e00e      	b.n	40624c <enterSleepMode+0x1f0>
		{
			drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  40622e:	1c7b      	adds	r3, r7, #1
  406230:	2009      	movs	r0, #9
  406232:	4619      	mov	r1, r3
  406234:	4b23      	ldr	r3, [pc, #140]	; (4062c4 <enterSleepMode+0x268>)
  406236:	4798      	blx	r3
			if(gpioPinState == DRV_GPIO_PIN_STATE_HIGH)
  406238:	787b      	ldrb	r3, [r7, #1]
  40623a:	2b01      	cmp	r3, #1
  40623c:	d100      	bne.n	406240 <enterSleepMode+0x1e4>
			{
				//the data board is powered up, break loop
				break;
  40623e:	e008      	b.n	406252 <enterSleepMode+0x1f6>
			}
			vTaskDelay(50);
  406240:	2032      	movs	r0, #50	; 0x32
  406242:	4b1f      	ldr	r3, [pc, #124]	; (4062c0 <enterSleepMode+0x264>)
  406244:	4798      	blx	r3
			loopCount++;
  406246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406248:	3301      	adds	r3, #1
  40624a:	677b      	str	r3, [r7, #116]	; 0x74
		//wait for brain mcu to start up
		gpioPinState = DRV_GPIO_PIN_STATE_LOW; 
		loopCount = 0;
		//set the count over the threshold so it needs to be reset by it going high again. 
		powerButtonLowCount = 16;
		while(loopCount < 30)
  40624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  40624e:	2b1d      	cmp	r3, #29
  406250:	d9ed      	bls.n	40622e <enterSleepMode+0x1d2>
			}
			vTaskDelay(50);
			loopCount++;
		}
		//invalidate the current charger state so that it is re-evaluated
		chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  406252:	4b25      	ldr	r3, [pc, #148]	; (4062e8 <enterSleepMode+0x28c>)
  406254:	2205      	movs	r2, #5
  406256:	701a      	strb	r2, [r3, #0]
		//send the date time command to the brain MCU. 	
		vTaskDelay(2000);
  406258:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40625c:	4b18      	ldr	r3, [pc, #96]	; (4062c0 <enterSleepMode+0x264>)
  40625e:	4798      	blx	r3
		cmd_sendDateTimeCommand(); 
  406260:	4b22      	ldr	r3, [pc, #136]	; (4062ec <enterSleepMode+0x290>)
  406262:	4798      	blx	r3
		//enable power to both Jacks
		vTaskDelay(100);
  406264:	2064      	movs	r0, #100	; 0x64
  406266:	4b16      	ldr	r3, [pc, #88]	; (4062c0 <enterSleepMode+0x264>)
  406268:	4798      	blx	r3
		//TODO add switching auto-enabling to this code. 
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  40626a:	2001      	movs	r0, #1
  40626c:	2100      	movs	r1, #0
  40626e:	4b12      	ldr	r3, [pc, #72]	; (4062b8 <enterSleepMode+0x25c>)
  406270:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);	
  406272:	2000      	movs	r0, #0
  406274:	2100      	movs	r1, #0
  406276:	4b10      	ldr	r3, [pc, #64]	; (4062b8 <enterSleepMode+0x25c>)
  406278:	4798      	blx	r3
	
		//clear the events
		clearAllEvents();
  40627a:	4b1d      	ldr	r3, [pc, #116]	; (4062f0 <enterSleepMode+0x294>)
  40627c:	4798      	blx	r3
		currentSystemState = SYS_STATE_POWER_ON; 
  40627e:	4b1d      	ldr	r3, [pc, #116]	; (4062f4 <enterSleepMode+0x298>)
  406280:	2200      	movs	r2, #0
  406282:	701a      	strb	r2, [r3, #0]
  406284:	e00a      	b.n	40629c <enterSleepMode+0x240>
	}
	else if(chargeFlag == TRUE)
  406286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  406288:	2b01      	cmp	r3, #1
  40628a:	d107      	bne.n	40629c <enterSleepMode+0x240>
	{
		//invalidate the current charger state so that it is re-evaluated
		chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE;
  40628c:	4b16      	ldr	r3, [pc, #88]	; (4062e8 <enterSleepMode+0x28c>)
  40628e:	2205      	movs	r2, #5
  406290:	701a      	strb	r2, [r3, #0]
		//clear the events
		clearAllEvents();
  406292:	4b17      	ldr	r3, [pc, #92]	; (4062f0 <enterSleepMode+0x294>)
  406294:	4798      	blx	r3
		currentSystemState = SYS_STATE_POWER_OFF_CHARGING;		
  406296:	4b17      	ldr	r3, [pc, #92]	; (4062f4 <enterSleepMode+0x298>)
  406298:	2201      	movs	r2, #1
  40629a:	701a      	strb	r2, [r3, #0]
	}
}
  40629c:	3784      	adds	r7, #132	; 0x84
  40629e:	46bd      	mov	sp, r7
  4062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062a4:	00415d7c 	.word	0x00415d7c
  4062a8:	0040cc7d 	.word	0x0040cc7d
  4062ac:	0040cb69 	.word	0x0040cb69
  4062b0:	20000e08 	.word	0x20000e08
  4062b4:	0040867d 	.word	0x0040867d
  4062b8:	0040546d 	.word	0x0040546d
  4062bc:	00409125 	.word	0x00409125
  4062c0:	00408f05 	.word	0x00408f05
  4062c4:	00405561 	.word	0x00405561
  4062c8:	004062f9 	.word	0x004062f9
  4062cc:	0040b5e9 	.word	0x0040b5e9
  4062d0:	0040b6c5 	.word	0x0040b6c5
  4062d4:	00405d41 	.word	0x00405d41
  4062d8:	0040c0d5 	.word	0x0040c0d5
  4062dc:	20000001 	.word	0x20000001
  4062e0:	00406351 	.word	0x00406351
  4062e4:	20000e04 	.word	0x20000e04
  4062e8:	200001e0 	.word	0x200001e0
  4062ec:	00404db9 	.word	0x00404db9
  4062f0:	0040652d 	.word	0x0040652d
  4062f4:	200002d4 	.word	0x200002d4

004062f8 <PreSleepProcess>:
 * @brief This does the necessary processing before putting the processor to sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PreSleepProcess()
{
  4062f8:	b580      	push	{r7, lr}
  4062fa:	af00      	add	r7, sp, #0
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  4062fc:	2007      	movs	r0, #7
  4062fe:	2101      	movs	r1, #1
  406300:	4b0b      	ldr	r3, [pc, #44]	; (406330 <PreSleepProcess+0x38>)
  406302:	4798      	blx	r3
	//supc_disable_brownout_detector(SUPC);	
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;	//disable the systick timer
  406304:	4b0b      	ldr	r3, [pc, #44]	; (406334 <PreSleepProcess+0x3c>)
  406306:	2205      	movs	r2, #5
  406308:	601a      	str	r2, [r3, #0]
	brd_deInitAllUarts();
  40630a:	4b0b      	ldr	r3, [pc, #44]	; (406338 <PreSleepProcess+0x40>)
  40630c:	4798      	blx	r3
	drv_gpio_disable_interrupt_all();
  40630e:	4b0b      	ldr	r3, [pc, #44]	; (40633c <PreSleepProcess+0x44>)
  406310:	4798      	blx	r3
	//disable the watchdog
	drv_gpio_config_interrupt(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE);
  406312:	200a      	movs	r0, #10
  406314:	2101      	movs	r1, #1
  406316:	4b0a      	ldr	r3, [pc, #40]	; (406340 <PreSleepProcess+0x48>)
  406318:	4798      	blx	r3
	drv_gpio_enable_interrupt(DRV_GPIO_PIN_PWR_BTN);
  40631a:	200a      	movs	r0, #10
  40631c:	4b09      	ldr	r3, [pc, #36]	; (406344 <PreSleepProcess+0x4c>)
  40631e:	4798      	blx	r3
	//drv_gpio_config_interrupt(DRV_GPIO_PIN_USB_DET, DRV_GPIO_INTERRUPT_HIGH_EDGE);
	//drv_gpio_enable_interrupt(DRV_GPIO_PIN_USB_DET);
	NVIC_DisableIRQ(WDT_IRQn);
  406320:	2004      	movs	r0, #4
  406322:	4b09      	ldr	r3, [pc, #36]	; (406348 <PreSleepProcess+0x50>)
  406324:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
  406326:	2004      	movs	r0, #4
  406328:	4b08      	ldr	r3, [pc, #32]	; (40634c <PreSleepProcess+0x54>)
  40632a:	4798      	blx	r3
	
}
  40632c:	bd80      	pop	{r7, pc}
  40632e:	bf00      	nop
  406330:	004070b9 	.word	0x004070b9
  406334:	e000e010 	.word	0xe000e010
  406338:	00404379 	.word	0x00404379
  40633c:	00405819 	.word	0x00405819
  406340:	004055e1 	.word	0x004055e1
  406344:	00405799 	.word	0x00405799
  406348:	00405c49 	.word	0x00405c49
  40634c:	00405c7d 	.word	0x00405c7d

00406350 <PostSleepProcess>:
 * @brief This does the necessary processing required after waking up the processor from sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PostSleepProcess()
{
  406350:	b580      	push	{r7, lr}
  406352:	af00      	add	r7, sp, #0
	drv_gpio_clear_Int(DRV_GPIO_PIN_PWR_BTN);	//Clear the interrupt generated by power switch flag
  406354:	200a      	movs	r0, #10
  406356:	4b09      	ldr	r3, [pc, #36]	; (40637c <PostSleepProcess+0x2c>)
  406358:	4798      	blx	r3
	drv_gpio_initializeAll();
  40635a:	4b09      	ldr	r3, [pc, #36]	; (406380 <PostSleepProcess+0x30>)
  40635c:	4798      	blx	r3
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  40635e:	200a      	movs	r0, #10
  406360:	2101      	movs	r1, #1
  406362:	4a08      	ldr	r2, [pc, #32]	; (406384 <PostSleepProcess+0x34>)
  406364:	4b08      	ldr	r3, [pc, #32]	; (406388 <PostSleepProcess+0x38>)
  406366:	4798      	blx	r3
	brd_initAllUarts();
  406368:	4b08      	ldr	r3, [pc, #32]	; (40638c <PostSleepProcess+0x3c>)
  40636a:	4798      	blx	r3
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	//enable the systick timer
  40636c:	4b08      	ldr	r3, [pc, #32]	; (406390 <PostSleepProcess+0x40>)
  40636e:	2207      	movs	r2, #7
  406370:	601a      	str	r2, [r3, #0]
	
	//pmc_disable_periph_clk(ID_WDT);
	NVIC_EnableIRQ(WDT_IRQn);		
  406372:	2004      	movs	r0, #4
  406374:	4b07      	ldr	r3, [pc, #28]	; (406394 <PostSleepProcess+0x44>)
  406376:	4798      	blx	r3
}
  406378:	bd80      	pop	{r7, pc}
  40637a:	bf00      	nop
  40637c:	00405761 	.word	0x00405761
  406380:	00405265 	.word	0x00405265
  406384:	00405fdd 	.word	0x00405fdd
  406388:	0040567d 	.word	0x0040567d
  40638c:	00404349 	.word	0x00404349
  406390:	e000e010 	.word	0xe000e010
  406394:	00405c19 	.word	0x00405c19

00406398 <UsbConnected>:

static bool UsbConnected()
{
  406398:	b580      	push	{r7, lr}
  40639a:	b082      	sub	sp, #8
  40639c:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t usbConnectedState = DRV_GPIO_PIN_STATE_LOW; 
  40639e:	2300      	movs	r3, #0
  4063a0:	71fb      	strb	r3, [r7, #7]
	drv_gpio_getPinState(DRV_GPIO_PIN_USB_DET, &usbConnectedState);
  4063a2:	1dfb      	adds	r3, r7, #7
  4063a4:	200b      	movs	r0, #11
  4063a6:	4619      	mov	r1, r3
  4063a8:	4b05      	ldr	r3, [pc, #20]	; (4063c0 <UsbConnected+0x28>)
  4063aa:	4798      	blx	r3
	if(usbConnectedState == DRV_GPIO_PIN_STATE_HIGH)
  4063ac:	79fb      	ldrb	r3, [r7, #7]
  4063ae:	2b01      	cmp	r3, #1
  4063b0:	d101      	bne.n	4063b6 <UsbConnected+0x1e>
	{
		return true;
  4063b2:	2301      	movs	r3, #1
  4063b4:	e000      	b.n	4063b8 <UsbConnected+0x20>
	}
	else
	{
		return false;
  4063b6:	2300      	movs	r3, #0
	}	
}
  4063b8:	4618      	mov	r0, r3
  4063ba:	3708      	adds	r7, #8
  4063bc:	46bd      	mov	sp, r7
  4063be:	bd80      	pop	{r7, pc}
  4063c0:	00405561 	.word	0x00405561

004063c4 <enterPowerDownChargeState>:

static void enterPowerDownChargeState()
{
  4063c4:	b590      	push	{r4, r7, lr}
  4063c6:	b09f      	sub	sp, #124	; 0x7c
  4063c8:	af00      	add	r7, sp, #0
	cmd_commandPacket_t packet;
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH;
  4063ca:	2301      	movs	r3, #1
  4063cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	strncpy(packet.packetData,"Power\r\n",CMD_INCOMING_CMD_SIZE_MAX);
  4063d0:	1d3b      	adds	r3, r7, #4
  4063d2:	3301      	adds	r3, #1
  4063d4:	4618      	mov	r0, r3
  4063d6:	4927      	ldr	r1, [pc, #156]	; (406474 <enterPowerDownChargeState+0xb0>)
  4063d8:	2264      	movs	r2, #100	; 0x64
  4063da:	4b27      	ldr	r3, [pc, #156]	; (406478 <enterPowerDownChargeState+0xb4>)
  4063dc:	4798      	blx	r3
	packet.packetSize = strlen(packet.packetData);
  4063de:	1d3b      	adds	r3, r7, #4
  4063e0:	3301      	adds	r3, #1
  4063e2:	4618      	mov	r0, r3
  4063e4:	4b25      	ldr	r3, [pc, #148]	; (40647c <enterPowerDownChargeState+0xb8>)
  4063e6:	4798      	blx	r3
  4063e8:	4603      	mov	r3, r0
  4063ea:	b29b      	uxth	r3, r3
  4063ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	//Send power down message to data board
	if(cmd_queue_commandQueue != NULL)
  4063f0:	4b23      	ldr	r3, [pc, #140]	; (406480 <enterPowerDownChargeState+0xbc>)
  4063f2:	681b      	ldr	r3, [r3, #0]
  4063f4:	2b00      	cmp	r3, #0
  4063f6:	d008      	beq.n	40640a <enterPowerDownChargeState+0x46>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  4063f8:	4b21      	ldr	r3, [pc, #132]	; (406480 <enterPowerDownChargeState+0xbc>)
  4063fa:	681a      	ldr	r2, [r3, #0]
  4063fc:	1d3b      	adds	r3, r7, #4
  4063fe:	4610      	mov	r0, r2
  406400:	4619      	mov	r1, r3
  406402:	2205      	movs	r2, #5
  406404:	2300      	movs	r3, #0
  406406:	4c1f      	ldr	r4, [pc, #124]	; (406484 <enterPowerDownChargeState+0xc0>)
  406408:	47a0      	blx	r4
		{
			//this is an error, we should log it.
		}
	}
	//turn off power to both Jacks
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  40640a:	2001      	movs	r0, #1
  40640c:	2101      	movs	r1, #1
  40640e:	4b1e      	ldr	r3, [pc, #120]	; (406488 <enterPowerDownChargeState+0xc4>)
  406410:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  406412:	2000      	movs	r0, #0
  406414:	2101      	movs	r1, #1
  406416:	4b1c      	ldr	r3, [pc, #112]	; (406488 <enterPowerDownChargeState+0xc4>)
  406418:	4798      	blx	r3
	//wait for GPIO to go low (indication that data board is ready to sleep)
	uint32_t startTime = xTaskGetTickCount();
  40641a:	4b1c      	ldr	r3, [pc, #112]	; (40648c <enterPowerDownChargeState+0xc8>)
  40641c:	4798      	blx	r3
  40641e:	66f8      	str	r0, [r7, #108]	; 0x6c
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;
  406420:	2301      	movs	r3, #1
  406422:	70fb      	strb	r3, [r7, #3]
	uint32_t loopCount = 0;	
  406424:	2300      	movs	r3, #0
  406426:	677b      	str	r3, [r7, #116]	; 0x74
	vTaskDelay(2000);
  406428:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40642c:	4b18      	ldr	r3, [pc, #96]	; (406490 <enterPowerDownChargeState+0xcc>)
  40642e:	4798      	blx	r3
	while(loopCount < 30)
  406430:	e00e      	b.n	406450 <enterPowerDownChargeState+0x8c>
	{
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  406432:	1cfb      	adds	r3, r7, #3
  406434:	2009      	movs	r0, #9
  406436:	4619      	mov	r1, r3
  406438:	4b16      	ldr	r3, [pc, #88]	; (406494 <enterPowerDownChargeState+0xd0>)
  40643a:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_LOW)
  40643c:	78fb      	ldrb	r3, [r7, #3]
  40643e:	2b00      	cmp	r3, #0
  406440:	d100      	bne.n	406444 <enterPowerDownChargeState+0x80>
		{
			//the data board is ready to shutdown, leave the loop.
			break;
  406442:	e008      	b.n	406456 <enterPowerDownChargeState+0x92>
		}
		vTaskDelay(100);
  406444:	2064      	movs	r0, #100	; 0x64
  406446:	4b12      	ldr	r3, [pc, #72]	; (406490 <enterPowerDownChargeState+0xcc>)
  406448:	4798      	blx	r3
		loopCount++;
  40644a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  40644c:	3301      	adds	r3, #1
  40644e:	677b      	str	r3, [r7, #116]	; 0x74
	//wait for GPIO to go low (indication that data board is ready to sleep)
	uint32_t startTime = xTaskGetTickCount();
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;
	uint32_t loopCount = 0;	
	vTaskDelay(2000);
	while(loopCount < 30)
  406450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406452:	2b1d      	cmp	r3, #29
  406454:	d9ed      	bls.n	406432 <enterPowerDownChargeState+0x6e>
			break;
		}
		vTaskDelay(100);
		loopCount++;
	}	
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_LOW);
  406456:	2009      	movs	r0, #9
  406458:	2100      	movs	r1, #0
  40645a:	4b0b      	ldr	r3, [pc, #44]	; (406488 <enterPowerDownChargeState+0xc4>)
  40645c:	4798      	blx	r3
	//turn off power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
  40645e:	2004      	movs	r0, #4
  406460:	2100      	movs	r1, #0
  406462:	4b09      	ldr	r3, [pc, #36]	; (406488 <enterPowerDownChargeState+0xc4>)
  406464:	4798      	blx	r3
	
	currentSystemState = SYS_STATE_POWER_OFF_CHARGING; 
  406466:	4b0c      	ldr	r3, [pc, #48]	; (406498 <enterPowerDownChargeState+0xd4>)
  406468:	2201      	movs	r2, #1
  40646a:	701a      	strb	r2, [r3, #0]
		
}
  40646c:	377c      	adds	r7, #124	; 0x7c
  40646e:	46bd      	mov	sp, r7
  406470:	bd90      	pop	{r4, r7, pc}
  406472:	bf00      	nop
  406474:	00415d7c 	.word	0x00415d7c
  406478:	0040cc7d 	.word	0x0040cc7d
  40647c:	0040cb69 	.word	0x0040cb69
  406480:	20000e08 	.word	0x20000e08
  406484:	0040867d 	.word	0x0040867d
  406488:	0040546d 	.word	0x0040546d
  40648c:	00409125 	.word	0x00409125
  406490:	00408f05 	.word	0x00408f05
  406494:	00405561 	.word	0x00405561
  406498:	200002d4 	.word	0x200002d4

0040649c <exitPowerDownChargeState>:
static void exitPowerDownChargeState()
{
  40649c:	b580      	push	{r7, lr}
  40649e:	b082      	sub	sp, #8
  4064a0:	af00      	add	r7, sp, #0
	//set the GPIO pin to be an input.
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  4064a2:	2009      	movs	r0, #9
  4064a4:	2103      	movs	r1, #3
  4064a6:	4b1a      	ldr	r3, [pc, #104]	; (406510 <exitPowerDownChargeState+0x74>)
  4064a8:	4798      	blx	r3
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  4064aa:	2004      	movs	r0, #4
  4064ac:	2101      	movs	r1, #1
  4064ae:	4b18      	ldr	r3, [pc, #96]	; (406510 <exitPowerDownChargeState+0x74>)
  4064b0:	4798      	blx	r3
	//wait for brain mcu to start up
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_LOW;
  4064b2:	2300      	movs	r3, #0
  4064b4:	70fb      	strb	r3, [r7, #3]
	uint32_t loopCount = 0;
  4064b6:	2300      	movs	r3, #0
  4064b8:	607b      	str	r3, [r7, #4]
	while(loopCount < 30)
  4064ba:	e00e      	b.n	4064da <exitPowerDownChargeState+0x3e>
	{
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  4064bc:	1cfb      	adds	r3, r7, #3
  4064be:	2009      	movs	r0, #9
  4064c0:	4619      	mov	r1, r3
  4064c2:	4b14      	ldr	r3, [pc, #80]	; (406514 <exitPowerDownChargeState+0x78>)
  4064c4:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_HIGH)
  4064c6:	78fb      	ldrb	r3, [r7, #3]
  4064c8:	2b01      	cmp	r3, #1
  4064ca:	d100      	bne.n	4064ce <exitPowerDownChargeState+0x32>
		{
			//the data board is ready to shutdown, leave the loop.
			break;
  4064cc:	e008      	b.n	4064e0 <exitPowerDownChargeState+0x44>
		}
		vTaskDelay(100);
  4064ce:	2064      	movs	r0, #100	; 0x64
  4064d0:	4b11      	ldr	r3, [pc, #68]	; (406518 <exitPowerDownChargeState+0x7c>)
  4064d2:	4798      	blx	r3
		loopCount++;
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	3301      	adds	r3, #1
  4064d8:	607b      	str	r3, [r7, #4]
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
	//wait for brain mcu to start up
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_LOW;
	uint32_t loopCount = 0;
	while(loopCount < 30)
  4064da:	687b      	ldr	r3, [r7, #4]
  4064dc:	2b1d      	cmp	r3, #29
  4064de:	d9ed      	bls.n	4064bc <exitPowerDownChargeState+0x20>
		}
		vTaskDelay(100);
		loopCount++;
	}	
	//invalidate the current charger state so that it is re-evaluated
	chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE;
  4064e0:	4b0e      	ldr	r3, [pc, #56]	; (40651c <exitPowerDownChargeState+0x80>)
  4064e2:	2205      	movs	r2, #5
  4064e4:	701a      	strb	r2, [r3, #0]
	//send the date time command to the brain MCU.
	cmd_sendDateTimeCommand();
  4064e6:	4b0e      	ldr	r3, [pc, #56]	; (406520 <exitPowerDownChargeState+0x84>)
  4064e8:	4798      	blx	r3
	//enable power to both Jacks
	vTaskDelay(100);
  4064ea:	2064      	movs	r0, #100	; 0x64
  4064ec:	4b0a      	ldr	r3, [pc, #40]	; (406518 <exitPowerDownChargeState+0x7c>)
  4064ee:	4798      	blx	r3
	//TODO add switching auto-enabling to this code.
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  4064f0:	2001      	movs	r0, #1
  4064f2:	2100      	movs	r1, #0
  4064f4:	4b06      	ldr	r3, [pc, #24]	; (406510 <exitPowerDownChargeState+0x74>)
  4064f6:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  4064f8:	2000      	movs	r0, #0
  4064fa:	2100      	movs	r1, #0
  4064fc:	4b04      	ldr	r3, [pc, #16]	; (406510 <exitPowerDownChargeState+0x74>)
  4064fe:	4798      	blx	r3
	currentSystemState = SYS_STATE_POWER_ON; 
  406500:	4b08      	ldr	r3, [pc, #32]	; (406524 <exitPowerDownChargeState+0x88>)
  406502:	2200      	movs	r2, #0
  406504:	701a      	strb	r2, [r3, #0]
	clearAllEvents();
  406506:	4b08      	ldr	r3, [pc, #32]	; (406528 <exitPowerDownChargeState+0x8c>)
  406508:	4798      	blx	r3
}
  40650a:	3708      	adds	r7, #8
  40650c:	46bd      	mov	sp, r7
  40650e:	bd80      	pop	{r7, pc}
  406510:	0040546d 	.word	0x0040546d
  406514:	00405561 	.word	0x00405561
  406518:	00408f05 	.word	0x00408f05
  40651c:	200001e0 	.word	0x200001e0
  406520:	00404db9 	.word	0x00404db9
  406524:	200002d4 	.word	0x200002d4
  406528:	0040652d 	.word	0x0040652d

0040652c <clearAllEvents>:

void clearAllEvents()
{
  40652c:	b590      	push	{r4, r7, lr}
  40652e:	b085      	sub	sp, #20
  406530:	af00      	add	r7, sp, #0
	uint32_t numberOfMessages = 0; 
  406532:	2300      	movs	r3, #0
  406534:	60fb      	str	r3, [r7, #12]
	if(mgr_eventQueue != NULL)
  406536:	4b12      	ldr	r3, [pc, #72]	; (406580 <clearAllEvents+0x54>)
  406538:	681b      	ldr	r3, [r3, #0]
  40653a:	2b00      	cmp	r3, #0
  40653c:	d005      	beq.n	40654a <clearAllEvents+0x1e>
	{
		numberOfMessages = uxQueueMessagesWaiting(mgr_eventQueue); 
  40653e:	4b10      	ldr	r3, [pc, #64]	; (406580 <clearAllEvents+0x54>)
  406540:	681b      	ldr	r3, [r3, #0]
  406542:	4618      	mov	r0, r3
  406544:	4b0f      	ldr	r3, [pc, #60]	; (406584 <clearAllEvents+0x58>)
  406546:	4798      	blx	r3
  406548:	60f8      	str	r0, [r7, #12]
	}	
	int i = 0; 
  40654a:	2300      	movs	r3, #0
  40654c:	60bb      	str	r3, [r7, #8]
	mgr_eventMessage_t eventMessage;
	if(numberOfMessages > 0)
  40654e:	68fb      	ldr	r3, [r7, #12]
  406550:	2b00      	cmp	r3, #0
  406552:	d012      	beq.n	40657a <clearAllEvents+0x4e>
	{
		for(i=0;i<numberOfMessages;i++)
  406554:	2300      	movs	r3, #0
  406556:	60bb      	str	r3, [r7, #8]
  406558:	e00b      	b.n	406572 <clearAllEvents+0x46>
		{
			xQueueReceive(mgr_eventQueue, &(eventMessage), 10); 						
  40655a:	4b09      	ldr	r3, [pc, #36]	; (406580 <clearAllEvents+0x54>)
  40655c:	681a      	ldr	r2, [r3, #0]
  40655e:	1d3b      	adds	r3, r7, #4
  406560:	4610      	mov	r0, r2
  406562:	4619      	mov	r1, r3
  406564:	220a      	movs	r2, #10
  406566:	2300      	movs	r3, #0
  406568:	4c07      	ldr	r4, [pc, #28]	; (406588 <clearAllEvents+0x5c>)
  40656a:	47a0      	blx	r4
	}	
	int i = 0; 
	mgr_eventMessage_t eventMessage;
	if(numberOfMessages > 0)
	{
		for(i=0;i<numberOfMessages;i++)
  40656c:	68bb      	ldr	r3, [r7, #8]
  40656e:	3301      	adds	r3, #1
  406570:	60bb      	str	r3, [r7, #8]
  406572:	68ba      	ldr	r2, [r7, #8]
  406574:	68fb      	ldr	r3, [r7, #12]
  406576:	429a      	cmp	r2, r3
  406578:	d3ef      	bcc.n	40655a <clearAllEvents+0x2e>
		{
			xQueueReceive(mgr_eventQueue, &(eventMessage), 10); 						
		}
	}		
  40657a:	3714      	adds	r7, #20
  40657c:	46bd      	mov	sp, r7
  40657e:	bd90      	pop	{r4, r7, pc}
  406580:	20000f70 	.word	0x20000f70
  406584:	00408a81 	.word	0x00408a81
  406588:	004088a9 	.word	0x004088a9

0040658c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40658c:	b580      	push	{r7, lr}
  40658e:	b086      	sub	sp, #24
  406590:	af00      	add	r7, sp, #0
  406592:	60f8      	str	r0, [r7, #12]
  406594:	60b9      	str	r1, [r7, #8]
  406596:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  406598:	2300      	movs	r3, #0
  40659a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40659c:	68fb      	ldr	r3, [r7, #12]
  40659e:	2b00      	cmp	r3, #0
  4065a0:	d002      	beq.n	4065a8 <_read+0x1c>
		return -1;
  4065a2:	f04f 33ff 	mov.w	r3, #4294967295
  4065a6:	e014      	b.n	4065d2 <_read+0x46>
	}

	for (; len > 0; --len) {
  4065a8:	e00f      	b.n	4065ca <_read+0x3e>
		ptr_get(stdio_base, ptr);
  4065aa:	4b0c      	ldr	r3, [pc, #48]	; (4065dc <_read+0x50>)
  4065ac:	681b      	ldr	r3, [r3, #0]
  4065ae:	4a0c      	ldr	r2, [pc, #48]	; (4065e0 <_read+0x54>)
  4065b0:	6812      	ldr	r2, [r2, #0]
  4065b2:	4610      	mov	r0, r2
  4065b4:	68b9      	ldr	r1, [r7, #8]
  4065b6:	4798      	blx	r3
		ptr++;
  4065b8:	68bb      	ldr	r3, [r7, #8]
  4065ba:	3301      	adds	r3, #1
  4065bc:	60bb      	str	r3, [r7, #8]
		nChars++;
  4065be:	697b      	ldr	r3, [r7, #20]
  4065c0:	3301      	adds	r3, #1
  4065c2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4065c4:	687b      	ldr	r3, [r7, #4]
  4065c6:	3b01      	subs	r3, #1
  4065c8:	607b      	str	r3, [r7, #4]
  4065ca:	687b      	ldr	r3, [r7, #4]
  4065cc:	2b00      	cmp	r3, #0
  4065ce:	dcec      	bgt.n	4065aa <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4065d0:	697b      	ldr	r3, [r7, #20]
}
  4065d2:	4618      	mov	r0, r3
  4065d4:	3718      	adds	r7, #24
  4065d6:	46bd      	mov	sp, r7
  4065d8:	bd80      	pop	{r7, pc}
  4065da:	bf00      	nop
  4065dc:	20008968 	.word	0x20008968
  4065e0:	200099c0 	.word	0x200099c0

004065e4 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4065e4:	b480      	push	{r7}
  4065e6:	b083      	sub	sp, #12
  4065e8:	af00      	add	r7, sp, #0
  4065ea:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4065ec:	687b      	ldr	r3, [r7, #4]
  4065ee:	2208      	movs	r2, #8
  4065f0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4065f2:	687b      	ldr	r3, [r7, #4]
  4065f4:	2220      	movs	r2, #32
  4065f6:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4065f8:	687b      	ldr	r3, [r7, #4]
  4065fa:	2204      	movs	r2, #4
  4065fc:	601a      	str	r2, [r3, #0]
}
  4065fe:	370c      	adds	r7, #12
  406600:	46bd      	mov	sp, r7
  406602:	f85d 7b04 	ldr.w	r7, [sp], #4
  406606:	4770      	bx	lr

00406608 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  406608:	b580      	push	{r7, lr}
  40660a:	b084      	sub	sp, #16
  40660c:	af00      	add	r7, sp, #0
  40660e:	6078      	str	r0, [r7, #4]
  406610:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  406612:	2300      	movs	r3, #0
  406614:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  406616:	687b      	ldr	r3, [r7, #4]
  406618:	f04f 32ff 	mov.w	r2, #4294967295
  40661c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40661e:	687b      	ldr	r3, [r7, #4]
  406620:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  406622:	6878      	ldr	r0, [r7, #4]
  406624:	4b0f      	ldr	r3, [pc, #60]	; (406664 <twi_master_init+0x5c>)
  406626:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  406628:	6878      	ldr	r0, [r7, #4]
  40662a:	4b0f      	ldr	r3, [pc, #60]	; (406668 <twi_master_init+0x60>)
  40662c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40662e:	683b      	ldr	r3, [r7, #0]
  406630:	685a      	ldr	r2, [r3, #4]
  406632:	683b      	ldr	r3, [r7, #0]
  406634:	681b      	ldr	r3, [r3, #0]
  406636:	6878      	ldr	r0, [r7, #4]
  406638:	4611      	mov	r1, r2
  40663a:	461a      	mov	r2, r3
  40663c:	4b0b      	ldr	r3, [pc, #44]	; (40666c <twi_master_init+0x64>)
  40663e:	4798      	blx	r3
  406640:	4603      	mov	r3, r0
  406642:	2b01      	cmp	r3, #1
  406644:	d101      	bne.n	40664a <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  406646:	2301      	movs	r3, #1
  406648:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  40664a:	683b      	ldr	r3, [r7, #0]
  40664c:	7a5b      	ldrb	r3, [r3, #9]
  40664e:	2b01      	cmp	r3, #1
  406650:	d102      	bne.n	406658 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
  406652:	687b      	ldr	r3, [r7, #4]
  406654:	2240      	movs	r2, #64	; 0x40
  406656:	601a      	str	r2, [r3, #0]
	}

	return status;
  406658:	68fb      	ldr	r3, [r7, #12]
}
  40665a:	4618      	mov	r0, r3
  40665c:	3710      	adds	r7, #16
  40665e:	46bd      	mov	sp, r7
  406660:	bd80      	pop	{r7, pc}
  406662:	bf00      	nop
  406664:	00406731 	.word	0x00406731
  406668:	004065e5 	.word	0x004065e5
  40666c:	00406671 	.word	0x00406671

00406670 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  406670:	b480      	push	{r7}
  406672:	b087      	sub	sp, #28
  406674:	af00      	add	r7, sp, #0
  406676:	60f8      	str	r0, [r7, #12]
  406678:	60b9      	str	r1, [r7, #8]
  40667a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40667c:	2300      	movs	r3, #0
  40667e:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  406680:	68ba      	ldr	r2, [r7, #8]
  406682:	4b16      	ldr	r3, [pc, #88]	; (4066dc <twi_set_speed+0x6c>)
  406684:	429a      	cmp	r2, r3
  406686:	d901      	bls.n	40668c <twi_set_speed+0x1c>
		return FAIL;
  406688:	2301      	movs	r3, #1
  40668a:	e021      	b.n	4066d0 <twi_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40668c:	68bb      	ldr	r3, [r7, #8]
  40668e:	005b      	lsls	r3, r3, #1
  406690:	687a      	ldr	r2, [r7, #4]
  406692:	fbb2 f3f3 	udiv	r3, r2, r3
  406696:	3b04      	subs	r3, #4
  406698:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40669a:	e005      	b.n	4066a8 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  40669c:	697b      	ldr	r3, [r7, #20]
  40669e:	3301      	adds	r3, #1
  4066a0:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  4066a2:	693b      	ldr	r3, [r7, #16]
  4066a4:	085b      	lsrs	r3, r3, #1
  4066a6:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4066a8:	693b      	ldr	r3, [r7, #16]
  4066aa:	2bff      	cmp	r3, #255	; 0xff
  4066ac:	d902      	bls.n	4066b4 <twi_set_speed+0x44>
  4066ae:	697b      	ldr	r3, [r7, #20]
  4066b0:	2b06      	cmp	r3, #6
  4066b2:	d9f3      	bls.n	40669c <twi_set_speed+0x2c>
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4066b4:	693b      	ldr	r3, [r7, #16]
  4066b6:	b2da      	uxtb	r2, r3
  4066b8:	693b      	ldr	r3, [r7, #16]
  4066ba:	021b      	lsls	r3, r3, #8
  4066bc:	b29b      	uxth	r3, r3
  4066be:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
  4066c0:	697b      	ldr	r3, [r7, #20]
  4066c2:	041b      	lsls	r3, r3, #16
  4066c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4066c8:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  4066ca:	68fb      	ldr	r3, [r7, #12]
  4066cc:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  4066ce:	2300      	movs	r3, #0
}
  4066d0:	4618      	mov	r0, r3
  4066d2:	371c      	adds	r7, #28
  4066d4:	46bd      	mov	sp, r7
  4066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066da:	4770      	bx	lr
  4066dc:	00061a80 	.word	0x00061a80

004066e0 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  4066e0:	b480      	push	{r7}
  4066e2:	b083      	sub	sp, #12
  4066e4:	af00      	add	r7, sp, #0
  4066e6:	6078      	str	r0, [r7, #4]
  4066e8:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	683a      	ldr	r2, [r7, #0]
  4066ee:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  4066f0:	687b      	ldr	r3, [r7, #4]
  4066f2:	6a1b      	ldr	r3, [r3, #32]
}
  4066f4:	370c      	adds	r7, #12
  4066f6:	46bd      	mov	sp, r7
  4066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066fc:	4770      	bx	lr
  4066fe:	bf00      	nop

00406700 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  406700:	b480      	push	{r7}
  406702:	b083      	sub	sp, #12
  406704:	af00      	add	r7, sp, #0
  406706:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  406708:	687b      	ldr	r3, [r7, #4]
  40670a:	6a1b      	ldr	r3, [r3, #32]
}
  40670c:	4618      	mov	r0, r3
  40670e:	370c      	adds	r7, #12
  406710:	46bd      	mov	sp, r7
  406712:	f85d 7b04 	ldr.w	r7, [sp], #4
  406716:	4770      	bx	lr

00406718 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  406718:	b480      	push	{r7}
  40671a:	b083      	sub	sp, #12
  40671c:	af00      	add	r7, sp, #0
  40671e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  406720:	687b      	ldr	r3, [r7, #4]
  406722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  406724:	4618      	mov	r0, r3
  406726:	370c      	adds	r7, #12
  406728:	46bd      	mov	sp, r7
  40672a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40672e:	4770      	bx	lr

00406730 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  406730:	b480      	push	{r7}
  406732:	b083      	sub	sp, #12
  406734:	af00      	add	r7, sp, #0
  406736:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  406738:	687b      	ldr	r3, [r7, #4]
  40673a:	2280      	movs	r2, #128	; 0x80
  40673c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40673e:	687b      	ldr	r3, [r7, #4]
  406740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  406742:	370c      	adds	r7, #12
  406744:	46bd      	mov	sp, r7
  406746:	f85d 7b04 	ldr.w	r7, [sp], #4
  40674a:	4770      	bx	lr

0040674c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40674c:	b480      	push	{r7}
  40674e:	b089      	sub	sp, #36	; 0x24
  406750:	af00      	add	r7, sp, #0
  406752:	60f8      	str	r0, [r7, #12]
  406754:	60b9      	str	r1, [r7, #8]
  406756:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  406758:	68bb      	ldr	r3, [r7, #8]
  40675a:	011a      	lsls	r2, r3, #4
  40675c:	687b      	ldr	r3, [r7, #4]
  40675e:	429a      	cmp	r2, r3
  406760:	d802      	bhi.n	406768 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  406762:	2310      	movs	r3, #16
  406764:	61fb      	str	r3, [r7, #28]
  406766:	e001      	b.n	40676c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  406768:	2308      	movs	r3, #8
  40676a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40676c:	687b      	ldr	r3, [r7, #4]
  40676e:	00da      	lsls	r2, r3, #3
  406770:	69fb      	ldr	r3, [r7, #28]
  406772:	68b9      	ldr	r1, [r7, #8]
  406774:	fb01 f303 	mul.w	r3, r1, r3
  406778:	085b      	lsrs	r3, r3, #1
  40677a:	441a      	add	r2, r3
  40677c:	69fb      	ldr	r3, [r7, #28]
  40677e:	68b9      	ldr	r1, [r7, #8]
  406780:	fb01 f303 	mul.w	r3, r1, r3
  406784:	fbb2 f3f3 	udiv	r3, r2, r3
  406788:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40678a:	69bb      	ldr	r3, [r7, #24]
  40678c:	08db      	lsrs	r3, r3, #3
  40678e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  406790:	69bb      	ldr	r3, [r7, #24]
  406792:	f003 0307 	and.w	r3, r3, #7
  406796:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  406798:	697b      	ldr	r3, [r7, #20]
  40679a:	2b00      	cmp	r3, #0
  40679c:	d003      	beq.n	4067a6 <usart_set_async_baudrate+0x5a>
  40679e:	697b      	ldr	r3, [r7, #20]
  4067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4067a4:	d301      	bcc.n	4067aa <usart_set_async_baudrate+0x5e>
		return 1;
  4067a6:	2301      	movs	r3, #1
  4067a8:	e00f      	b.n	4067ca <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4067aa:	69fb      	ldr	r3, [r7, #28]
  4067ac:	2b08      	cmp	r3, #8
  4067ae:	d105      	bne.n	4067bc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4067b0:	68fb      	ldr	r3, [r7, #12]
  4067b2:	685b      	ldr	r3, [r3, #4]
  4067b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4067b8:	68fb      	ldr	r3, [r7, #12]
  4067ba:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4067bc:	693b      	ldr	r3, [r7, #16]
  4067be:	041a      	lsls	r2, r3, #16
  4067c0:	697b      	ldr	r3, [r7, #20]
  4067c2:	431a      	orrs	r2, r3
  4067c4:	68fb      	ldr	r3, [r7, #12]
  4067c6:	621a      	str	r2, [r3, #32]

	return 0;
  4067c8:	2300      	movs	r3, #0
}
  4067ca:	4618      	mov	r0, r3
  4067cc:	3724      	adds	r7, #36	; 0x24
  4067ce:	46bd      	mov	sp, r7
  4067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067d4:	4770      	bx	lr
  4067d6:	bf00      	nop

004067d8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4067d8:	b580      	push	{r7, lr}
  4067da:	b082      	sub	sp, #8
  4067dc:	af00      	add	r7, sp, #0
  4067de:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4067e0:	6878      	ldr	r0, [r7, #4]
  4067e2:	4b0e      	ldr	r3, [pc, #56]	; (40681c <usart_reset+0x44>)
  4067e4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4067e6:	687b      	ldr	r3, [r7, #4]
  4067e8:	2200      	movs	r2, #0
  4067ea:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4067ec:	687b      	ldr	r3, [r7, #4]
  4067ee:	2200      	movs	r2, #0
  4067f0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4067f2:	687b      	ldr	r3, [r7, #4]
  4067f4:	2200      	movs	r2, #0
  4067f6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4067f8:	6878      	ldr	r0, [r7, #4]
  4067fa:	4b09      	ldr	r3, [pc, #36]	; (406820 <usart_reset+0x48>)
  4067fc:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4067fe:	6878      	ldr	r0, [r7, #4]
  406800:	4b08      	ldr	r3, [pc, #32]	; (406824 <usart_reset+0x4c>)
  406802:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  406804:	6878      	ldr	r0, [r7, #4]
  406806:	4b08      	ldr	r3, [pc, #32]	; (406828 <usart_reset+0x50>)
  406808:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40680a:	6878      	ldr	r0, [r7, #4]
  40680c:	4b07      	ldr	r3, [pc, #28]	; (40682c <usart_reset+0x54>)
  40680e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  406810:	6878      	ldr	r0, [r7, #4]
  406812:	4b07      	ldr	r3, [pc, #28]	; (406830 <usart_reset+0x58>)
  406814:	4798      	blx	r3
#endif
}
  406816:	3708      	adds	r7, #8
  406818:	46bd      	mov	sp, r7
  40681a:	bd80      	pop	{r7, pc}
  40681c:	00406a41 	.word	0x00406a41
  406820:	004068d1 	.word	0x004068d1
  406824:	00406901 	.word	0x00406901
  406828:	00406951 	.word	0x00406951
  40682c:	00406989 	.word	0x00406989
  406830:	0040696d 	.word	0x0040696d

00406834 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  406834:	b580      	push	{r7, lr}
  406836:	b084      	sub	sp, #16
  406838:	af00      	add	r7, sp, #0
  40683a:	60f8      	str	r0, [r7, #12]
  40683c:	60b9      	str	r1, [r7, #8]
  40683e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  406840:	68f8      	ldr	r0, [r7, #12]
  406842:	4b1a      	ldr	r3, [pc, #104]	; (4068ac <usart_init_rs232+0x78>)
  406844:	4798      	blx	r3

	ul_reg_val = 0;
  406846:	4b1a      	ldr	r3, [pc, #104]	; (4068b0 <usart_init_rs232+0x7c>)
  406848:	2200      	movs	r2, #0
  40684a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40684c:	68bb      	ldr	r3, [r7, #8]
  40684e:	2b00      	cmp	r3, #0
  406850:	d009      	beq.n	406866 <usart_init_rs232+0x32>
  406852:	68bb      	ldr	r3, [r7, #8]
  406854:	681b      	ldr	r3, [r3, #0]
  406856:	68f8      	ldr	r0, [r7, #12]
  406858:	4619      	mov	r1, r3
  40685a:	687a      	ldr	r2, [r7, #4]
  40685c:	4b15      	ldr	r3, [pc, #84]	; (4068b4 <usart_init_rs232+0x80>)
  40685e:	4798      	blx	r3
  406860:	4603      	mov	r3, r0
  406862:	2b00      	cmp	r3, #0
  406864:	d001      	beq.n	40686a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  406866:	2301      	movs	r3, #1
  406868:	e01b      	b.n	4068a2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40686a:	68bb      	ldr	r3, [r7, #8]
  40686c:	685a      	ldr	r2, [r3, #4]
  40686e:	68bb      	ldr	r3, [r7, #8]
  406870:	689b      	ldr	r3, [r3, #8]
  406872:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406874:	68bb      	ldr	r3, [r7, #8]
  406876:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406878:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40687a:	68bb      	ldr	r3, [r7, #8]
  40687c:	68db      	ldr	r3, [r3, #12]
  40687e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406880:	4b0b      	ldr	r3, [pc, #44]	; (4068b0 <usart_init_rs232+0x7c>)
  406882:	681b      	ldr	r3, [r3, #0]
  406884:	431a      	orrs	r2, r3
  406886:	4b0a      	ldr	r3, [pc, #40]	; (4068b0 <usart_init_rs232+0x7c>)
  406888:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40688a:	4b09      	ldr	r3, [pc, #36]	; (4068b0 <usart_init_rs232+0x7c>)
  40688c:	681a      	ldr	r2, [r3, #0]
  40688e:	4b08      	ldr	r3, [pc, #32]	; (4068b0 <usart_init_rs232+0x7c>)
  406890:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  406892:	68fb      	ldr	r3, [r7, #12]
  406894:	685a      	ldr	r2, [r3, #4]
  406896:	4b06      	ldr	r3, [pc, #24]	; (4068b0 <usart_init_rs232+0x7c>)
  406898:	681b      	ldr	r3, [r3, #0]
  40689a:	431a      	orrs	r2, r3
  40689c:	68fb      	ldr	r3, [r7, #12]
  40689e:	605a      	str	r2, [r3, #4]

	return 0;
  4068a0:	2300      	movs	r3, #0
}
  4068a2:	4618      	mov	r0, r3
  4068a4:	3710      	adds	r7, #16
  4068a6:	46bd      	mov	sp, r7
  4068a8:	bd80      	pop	{r7, pc}
  4068aa:	bf00      	nop
  4068ac:	004067d9 	.word	0x004067d9
  4068b0:	20000f7c 	.word	0x20000f7c
  4068b4:	0040674d 	.word	0x0040674d

004068b8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4068b8:	b480      	push	{r7}
  4068ba:	b083      	sub	sp, #12
  4068bc:	af00      	add	r7, sp, #0
  4068be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4068c0:	687b      	ldr	r3, [r7, #4]
  4068c2:	2240      	movs	r2, #64	; 0x40
  4068c4:	601a      	str	r2, [r3, #0]
}
  4068c6:	370c      	adds	r7, #12
  4068c8:	46bd      	mov	sp, r7
  4068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068ce:	4770      	bx	lr

004068d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4068d0:	b480      	push	{r7}
  4068d2:	b083      	sub	sp, #12
  4068d4:	af00      	add	r7, sp, #0
  4068d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4068d8:	687b      	ldr	r3, [r7, #4]
  4068da:	2288      	movs	r2, #136	; 0x88
  4068dc:	601a      	str	r2, [r3, #0]
}
  4068de:	370c      	adds	r7, #12
  4068e0:	46bd      	mov	sp, r7
  4068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068e6:	4770      	bx	lr

004068e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4068e8:	b480      	push	{r7}
  4068ea:	b083      	sub	sp, #12
  4068ec:	af00      	add	r7, sp, #0
  4068ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4068f0:	687b      	ldr	r3, [r7, #4]
  4068f2:	2210      	movs	r2, #16
  4068f4:	601a      	str	r2, [r3, #0]
}
  4068f6:	370c      	adds	r7, #12
  4068f8:	46bd      	mov	sp, r7
  4068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068fe:	4770      	bx	lr

00406900 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  406900:	b480      	push	{r7}
  406902:	b083      	sub	sp, #12
  406904:	af00      	add	r7, sp, #0
  406906:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  406908:	687b      	ldr	r3, [r7, #4]
  40690a:	2224      	movs	r2, #36	; 0x24
  40690c:	601a      	str	r2, [r3, #0]
}
  40690e:	370c      	adds	r7, #12
  406910:	46bd      	mov	sp, r7
  406912:	f85d 7b04 	ldr.w	r7, [sp], #4
  406916:	4770      	bx	lr

00406918 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  406918:	b480      	push	{r7}
  40691a:	b083      	sub	sp, #12
  40691c:	af00      	add	r7, sp, #0
  40691e:	6078      	str	r0, [r7, #4]
  406920:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  406922:	687b      	ldr	r3, [r7, #4]
  406924:	683a      	ldr	r2, [r7, #0]
  406926:	609a      	str	r2, [r3, #8]
}
  406928:	370c      	adds	r7, #12
  40692a:	46bd      	mov	sp, r7
  40692c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406930:	4770      	bx	lr
  406932:	bf00      	nop

00406934 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  406934:	b480      	push	{r7}
  406936:	b083      	sub	sp, #12
  406938:	af00      	add	r7, sp, #0
  40693a:	6078      	str	r0, [r7, #4]
  40693c:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40693e:	687b      	ldr	r3, [r7, #4]
  406940:	683a      	ldr	r2, [r7, #0]
  406942:	60da      	str	r2, [r3, #12]
}
  406944:	370c      	adds	r7, #12
  406946:	46bd      	mov	sp, r7
  406948:	f85d 7b04 	ldr.w	r7, [sp], #4
  40694c:	4770      	bx	lr
  40694e:	bf00      	nop

00406950 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  406950:	b480      	push	{r7}
  406952:	b083      	sub	sp, #12
  406954:	af00      	add	r7, sp, #0
  406956:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  406958:	687b      	ldr	r3, [r7, #4]
  40695a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40695e:	601a      	str	r2, [r3, #0]
}
  406960:	370c      	adds	r7, #12
  406962:	46bd      	mov	sp, r7
  406964:	f85d 7b04 	ldr.w	r7, [sp], #4
  406968:	4770      	bx	lr
  40696a:	bf00      	nop

0040696c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40696c:	b480      	push	{r7}
  40696e:	b083      	sub	sp, #12
  406970:	af00      	add	r7, sp, #0
  406972:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  406974:	687b      	ldr	r3, [r7, #4]
  406976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40697a:	601a      	str	r2, [r3, #0]
}
  40697c:	370c      	adds	r7, #12
  40697e:	46bd      	mov	sp, r7
  406980:	f85d 7b04 	ldr.w	r7, [sp], #4
  406984:	4770      	bx	lr
  406986:	bf00      	nop

00406988 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  406988:	b480      	push	{r7}
  40698a:	b083      	sub	sp, #12
  40698c:	af00      	add	r7, sp, #0
  40698e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  406990:	687b      	ldr	r3, [r7, #4]
  406992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406996:	601a      	str	r2, [r3, #0]
}
  406998:	370c      	adds	r7, #12
  40699a:	46bd      	mov	sp, r7
  40699c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069a0:	4770      	bx	lr
  4069a2:	bf00      	nop

004069a4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4069a4:	b480      	push	{r7}
  4069a6:	b083      	sub	sp, #12
  4069a8:	af00      	add	r7, sp, #0
  4069aa:	6078      	str	r0, [r7, #4]
  4069ac:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4069ae:	687b      	ldr	r3, [r7, #4]
  4069b0:	695b      	ldr	r3, [r3, #20]
  4069b2:	f003 0302 	and.w	r3, r3, #2
  4069b6:	2b00      	cmp	r3, #0
  4069b8:	d101      	bne.n	4069be <usart_write+0x1a>
		return 1;
  4069ba:	2301      	movs	r3, #1
  4069bc:	e005      	b.n	4069ca <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4069be:	683b      	ldr	r3, [r7, #0]
  4069c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4069c4:	687b      	ldr	r3, [r7, #4]
  4069c6:	61da      	str	r2, [r3, #28]
	return 0;
  4069c8:	2300      	movs	r3, #0
}
  4069ca:	4618      	mov	r0, r3
  4069cc:	370c      	adds	r7, #12
  4069ce:	46bd      	mov	sp, r7
  4069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069d4:	4770      	bx	lr
  4069d6:	bf00      	nop

004069d8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4069d8:	b480      	push	{r7}
  4069da:	b083      	sub	sp, #12
  4069dc:	af00      	add	r7, sp, #0
  4069de:	6078      	str	r0, [r7, #4]
  4069e0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4069e2:	687b      	ldr	r3, [r7, #4]
  4069e4:	695b      	ldr	r3, [r3, #20]
  4069e6:	f003 0301 	and.w	r3, r3, #1
  4069ea:	2b00      	cmp	r3, #0
  4069ec:	d101      	bne.n	4069f2 <usart_read+0x1a>
		return 1;
  4069ee:	2301      	movs	r3, #1
  4069f0:	e006      	b.n	406a00 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4069f2:	687b      	ldr	r3, [r7, #4]
  4069f4:	699b      	ldr	r3, [r3, #24]
  4069f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4069fa:	683b      	ldr	r3, [r7, #0]
  4069fc:	601a      	str	r2, [r3, #0]

	return 0;
  4069fe:	2300      	movs	r3, #0
}
  406a00:	4618      	mov	r0, r3
  406a02:	370c      	adds	r7, #12
  406a04:	46bd      	mov	sp, r7
  406a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a0a:	4770      	bx	lr

00406a0c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  406a0c:	b480      	push	{r7}
  406a0e:	b083      	sub	sp, #12
  406a10:	af00      	add	r7, sp, #0
  406a12:	6078      	str	r0, [r7, #4]
  406a14:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406a16:	bf00      	nop
  406a18:	687b      	ldr	r3, [r7, #4]
  406a1a:	695b      	ldr	r3, [r3, #20]
  406a1c:	f003 0301 	and.w	r3, r3, #1
  406a20:	2b00      	cmp	r3, #0
  406a22:	d0f9      	beq.n	406a18 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406a24:	687b      	ldr	r3, [r7, #4]
  406a26:	699b      	ldr	r3, [r3, #24]
  406a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406a2c:	683b      	ldr	r3, [r7, #0]
  406a2e:	601a      	str	r2, [r3, #0]

	return 0;
  406a30:	2300      	movs	r3, #0
}
  406a32:	4618      	mov	r0, r3
  406a34:	370c      	adds	r7, #12
  406a36:	46bd      	mov	sp, r7
  406a38:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a3c:	4770      	bx	lr
  406a3e:	bf00      	nop

00406a40 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  406a40:	b480      	push	{r7}
  406a42:	b083      	sub	sp, #12
  406a44:	af00      	add	r7, sp, #0
  406a46:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  406a48:	687b      	ldr	r3, [r7, #4]
  406a4a:	4a04      	ldr	r2, [pc, #16]	; (406a5c <usart_disable_writeprotect+0x1c>)
  406a4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  406a50:	370c      	adds	r7, #12
  406a52:	46bd      	mov	sp, r7
  406a54:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a58:	4770      	bx	lr
  406a5a:	bf00      	nop
  406a5c:	55534100 	.word	0x55534100

00406a60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  406a60:	b480      	push	{r7}
  406a62:	b083      	sub	sp, #12
  406a64:	af00      	add	r7, sp, #0
  406a66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406a68:	687b      	ldr	r3, [r7, #4]
  406a6a:	2b07      	cmp	r3, #7
  406a6c:	d825      	bhi.n	406aba <osc_get_rate+0x5a>
  406a6e:	a201      	add	r2, pc, #4	; (adr r2, 406a74 <osc_get_rate+0x14>)
  406a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406a74:	00406a95 	.word	0x00406a95
  406a78:	00406a9b 	.word	0x00406a9b
  406a7c:	00406aa1 	.word	0x00406aa1
  406a80:	00406aa7 	.word	0x00406aa7
  406a84:	00406aab 	.word	0x00406aab
  406a88:	00406aaf 	.word	0x00406aaf
  406a8c:	00406ab3 	.word	0x00406ab3
  406a90:	00406ab7 	.word	0x00406ab7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406a94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406a98:	e010      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  406a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406a9e:	e00d      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406aa4:	e00a      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  406aa6:	4b08      	ldr	r3, [pc, #32]	; (406ac8 <osc_get_rate+0x68>)
  406aa8:	e008      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  406aaa:	4b08      	ldr	r3, [pc, #32]	; (406acc <osc_get_rate+0x6c>)
  406aac:	e006      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  406aae:	4b08      	ldr	r3, [pc, #32]	; (406ad0 <osc_get_rate+0x70>)
  406ab0:	e004      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406ab2:	4b07      	ldr	r3, [pc, #28]	; (406ad0 <osc_get_rate+0x70>)
  406ab4:	e002      	b.n	406abc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406ab6:	4b06      	ldr	r3, [pc, #24]	; (406ad0 <osc_get_rate+0x70>)
  406ab8:	e000      	b.n	406abc <osc_get_rate+0x5c>
	}

	return 0;
  406aba:	2300      	movs	r3, #0
}
  406abc:	4618      	mov	r0, r3
  406abe:	370c      	adds	r7, #12
  406ac0:	46bd      	mov	sp, r7
  406ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ac6:	4770      	bx	lr
  406ac8:	003d0900 	.word	0x003d0900
  406acc:	007a1200 	.word	0x007a1200
  406ad0:	00b71b00 	.word	0x00b71b00

00406ad4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406ad4:	b580      	push	{r7, lr}
  406ad6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  406ad8:	2006      	movs	r0, #6
  406ada:	4b04      	ldr	r3, [pc, #16]	; (406aec <sysclk_get_main_hz+0x18>)
  406adc:	4798      	blx	r3
  406ade:	4602      	mov	r2, r0
  406ae0:	4613      	mov	r3, r2
  406ae2:	011b      	lsls	r3, r3, #4
  406ae4:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  406ae6:	4618      	mov	r0, r3
  406ae8:	bd80      	pop	{r7, pc}
  406aea:	bf00      	nop
  406aec:	00406a61 	.word	0x00406a61

00406af0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  406af0:	b580      	push	{r7, lr}
  406af2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406af4:	4b02      	ldr	r3, [pc, #8]	; (406b00 <sysclk_get_cpu_hz+0x10>)
  406af6:	4798      	blx	r3
  406af8:	4603      	mov	r3, r0
  406afa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  406afc:	4618      	mov	r0, r3
  406afe:	bd80      	pop	{r7, pc}
  406b00:	00406ad5 	.word	0x00406ad5

00406b04 <drv_i2c_init>:

//global variables
volatile drv_i2c_memory_buf_t twiMemBuf[2]; //2 TWIs, 2 buffers
 
int drv_i2c_init(drv_twi_config_t* twi_config)
{
  406b04:	b580      	push	{r7, lr}
  406b06:	b084      	sub	sp, #16
  406b08:	af00      	add	r7, sp, #0
  406b0a:	6078      	str	r0, [r7, #4]
	int status = STATUS_PASS;
  406b0c:	2300      	movs	r3, #0
  406b0e:	60fb      	str	r3, [r7, #12]
	
	if (twi_config->p_i2c == TWI0)
  406b10:	687b      	ldr	r3, [r7, #4]
  406b12:	681a      	ldr	r2, [r3, #0]
  406b14:	4b23      	ldr	r3, [pc, #140]	; (406ba4 <drv_i2c_init+0xa0>)
  406b16:	429a      	cmp	r2, r3
  406b18:	d10d      	bne.n	406b36 <drv_i2c_init+0x32>
	{
		twi_config->mem_index = 0;
  406b1a:	687b      	ldr	r3, [r7, #4]
  406b1c:	2200      	movs	r2, #0
  406b1e:	615a      	str	r2, [r3, #20]
 		gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	//TODO: use drv_gpio to do this.
  406b20:	2003      	movs	r0, #3
  406b22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406b26:	4b20      	ldr	r3, [pc, #128]	; (406ba8 <drv_i2c_init+0xa4>)
  406b28:	4798      	blx	r3
 		gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  406b2a:	2004      	movs	r0, #4
  406b2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406b30:	4b1d      	ldr	r3, [pc, #116]	; (406ba8 <drv_i2c_init+0xa4>)
  406b32:	4798      	blx	r3
  406b34:	e014      	b.n	406b60 <drv_i2c_init+0x5c>
	}
	else if (twi_config->p_i2c == TWI1)
  406b36:	687b      	ldr	r3, [r7, #4]
  406b38:	681a      	ldr	r2, [r3, #0]
  406b3a:	4b1c      	ldr	r3, [pc, #112]	; (406bac <drv_i2c_init+0xa8>)
  406b3c:	429a      	cmp	r2, r3
  406b3e:	d10d      	bne.n	406b5c <drv_i2c_init+0x58>
	{
		twi_config->mem_index = 1;
  406b40:	687b      	ldr	r3, [r7, #4]
  406b42:	2201      	movs	r2, #1
  406b44:	615a      	str	r2, [r3, #20]
 		gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
  406b46:	2024      	movs	r0, #36	; 0x24
  406b48:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b4c:	4b16      	ldr	r3, [pc, #88]	; (406ba8 <drv_i2c_init+0xa4>)
  406b4e:	4798      	blx	r3
 		gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
  406b50:	2025      	movs	r0, #37	; 0x25
  406b52:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b56:	4b14      	ldr	r3, [pc, #80]	; (406ba8 <drv_i2c_init+0xa4>)
  406b58:	4798      	blx	r3
  406b5a:	e001      	b.n	406b60 <drv_i2c_init+0x5c>
	}
	else
	{
		return STATUS_FAIL;	//return error
  406b5c:	2301      	movs	r3, #1
  406b5e:	e01c      	b.n	406b9a <drv_i2c_init+0x96>
	}
	
	//update the master clock value to current cpu_hz before initializing
	twi_config->twi_options.master_clk = sysclk_get_cpu_hz();
  406b60:	4b13      	ldr	r3, [pc, #76]	; (406bb0 <drv_i2c_init+0xac>)
  406b62:	4798      	blx	r3
  406b64:	4602      	mov	r2, r0
  406b66:	687b      	ldr	r3, [r7, #4]
  406b68:	605a      	str	r2, [r3, #4]
	}
	/* Configure the TWI bus parameters.  Do this after calling freertos_twi_master_init(). */
	twi_set_speed(twi_config->p_i2c, twi_config->twi_options.speed, twi_config->twi_options.master_clk);
	
	#else
	pmc_enable_periph_clk(twi_config->peripheral_Id);	//enable clock for I2C
  406b6a:	687b      	ldr	r3, [r7, #4]
  406b6c:	699b      	ldr	r3, [r3, #24]
  406b6e:	4618      	mov	r0, r3
  406b70:	4b10      	ldr	r3, [pc, #64]	; (406bb4 <drv_i2c_init+0xb0>)
  406b72:	4798      	blx	r3
	status = twi_master_init(twi_config->p_i2c, &twi_config->twi_options);	//can also use twi_master_setup
  406b74:	687b      	ldr	r3, [r7, #4]
  406b76:	681a      	ldr	r2, [r3, #0]
  406b78:	687b      	ldr	r3, [r7, #4]
  406b7a:	3304      	adds	r3, #4
  406b7c:	4610      	mov	r0, r2
  406b7e:	4619      	mov	r1, r3
  406b80:	4b0d      	ldr	r3, [pc, #52]	; (406bb8 <drv_i2c_init+0xb4>)
  406b82:	4798      	blx	r3
  406b84:	4603      	mov	r3, r0
  406b86:	60fb      	str	r3, [r7, #12]
	if (status != TWI_SUCCESS)
  406b88:	68fb      	ldr	r3, [r7, #12]
  406b8a:	2b00      	cmp	r3, #0
  406b8c:	d004      	beq.n	406b98 <drv_i2c_init+0x94>
	{
		puts("Failed to initialize as master.\r\n");
  406b8e:	480b      	ldr	r0, [pc, #44]	; (406bbc <drv_i2c_init+0xb8>)
  406b90:	4b0b      	ldr	r3, [pc, #44]	; (406bc0 <drv_i2c_init+0xbc>)
  406b92:	4798      	blx	r3
		return STATUS_FAIL;	//return error
  406b94:	2301      	movs	r3, #1
  406b96:	e000      	b.n	406b9a <drv_i2c_init+0x96>
	}
	#endif
	
	return STATUS_PASS;
  406b98:	2300      	movs	r3, #0
}
  406b9a:	4618      	mov	r0, r3
  406b9c:	3710      	adds	r7, #16
  406b9e:	46bd      	mov	sp, r7
  406ba0:	bd80      	pop	{r7, pc}
  406ba2:	bf00      	nop
  406ba4:	40018000 	.word	0x40018000
  406ba8:	0040ae65 	.word	0x0040ae65
  406bac:	4001c000 	.word	0x4001c000
  406bb0:	00406af1 	.word	0x00406af1
  406bb4:	0040b4a1 	.word	0x0040b4a1
  406bb8:	00406609 	.word	0x00406609
  406bbc:	00415d84 	.word	0x00415d84
  406bc0:	0040c91d 	.word	0x0040c91d

00406bc4 <drv_i2c_write>:

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
  406bc4:	b580      	push	{r7, lr}
  406bc6:	b088      	sub	sp, #32
  406bc8:	af00      	add	r7, sp, #0
  406bca:	6078      	str	r0, [r7, #4]
  406bcc:	4613      	mov	r3, r2
  406bce:	460a      	mov	r2, r1
  406bd0:	70fa      	strb	r2, [r7, #3]
  406bd2:	70bb      	strb	r3, [r7, #2]
	status_t status = STATUS_FAIL;
  406bd4:	2301      	movs	r3, #1
  406bd6:	77fb      	strb	r3, [r7, #31]
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
  406bd8:	2300      	movs	r3, #0
  406bda:	83bb      	strh	r3, [r7, #28]
	twi_packet_t packet;
	dataPacket[0] = reg;
  406bdc:	78fb      	ldrb	r3, [r7, #3]
  406bde:	773b      	strb	r3, [r7, #28]
	#ifdef ENABLE_TWO_BYTE_WRITE
	dataPacket[1] = data;
  406be0:	78bb      	ldrb	r3, [r7, #2]
  406be2:	777b      	strb	r3, [r7, #29]
	packet.length = 2;
  406be4:	2302      	movs	r3, #2
  406be6:	617b      	str	r3, [r7, #20]
	#else
	packet.length = 1;
	#endif
	packet.buffer = &dataPacket[0];
  406be8:	f107 031c 	add.w	r3, r7, #28
  406bec:	613b      	str	r3, [r7, #16]
	packet.chip = (uint32_t) slave_twi_config->address;
  406bee:	687b      	ldr	r3, [r7, #4]
  406bf0:	685b      	ldr	r3, [r3, #4]
  406bf2:	b2db      	uxtb	r3, r3
  406bf4:	763b      	strb	r3, [r7, #24]
	packet.addr[0] = 0x00;	//no internal register should be assigned
  406bf6:	2300      	movs	r3, #0
  406bf8:	723b      	strb	r3, [r7, #8]
	packet.addr[1] = 0x00;
  406bfa:	2300      	movs	r3, #0
  406bfc:	727b      	strb	r3, [r7, #9]
	packet.addr[2] = 0x00;
  406bfe:	2300      	movs	r3, #0
  406c00:	72bb      	strb	r3, [r7, #10]
	packet.addr_length = 0;	
  406c02:	2300      	movs	r3, #0
  406c04:	60fb      	str	r3, [r7, #12]
	//status = twi_master_write(slave_twi_config->drv_twi_options->p_i2c, &packet);
	//if (status != TWI_SUCCESS)
	//{
		//return STATUS_FAIL;
	//}
	status = twi_write(slave_twi_config->drv_twi_options->p_i2c, &packet);
  406c06:	687b      	ldr	r3, [r7, #4]
  406c08:	689b      	ldr	r3, [r3, #8]
  406c0a:	681a      	ldr	r2, [r3, #0]
  406c0c:	f107 0308 	add.w	r3, r7, #8
  406c10:	4610      	mov	r0, r2
  406c12:	4619      	mov	r1, r3
  406c14:	4b06      	ldr	r3, [pc, #24]	; (406c30 <drv_i2c_write+0x6c>)
  406c16:	4798      	blx	r3
  406c18:	4603      	mov	r3, r0
  406c1a:	77fb      	strb	r3, [r7, #31]
	if (status != TWI_SUCCESS)
  406c1c:	7ffb      	ldrb	r3, [r7, #31]
  406c1e:	2b00      	cmp	r3, #0
  406c20:	d001      	beq.n	406c26 <drv_i2c_write+0x62>
	{
		return STATUS_FAIL;
  406c22:	2301      	movs	r3, #1
  406c24:	e000      	b.n	406c28 <drv_i2c_write+0x64>
	}
	#endif
	
	return STATUS_PASS;
  406c26:	2300      	movs	r3, #0
}
  406c28:	4618      	mov	r0, r3
  406c2a:	3720      	adds	r7, #32
  406c2c:	46bd      	mov	sp, r7
  406c2e:	bd80      	pop	{r7, pc}
  406c30:	00406d1d 	.word	0x00406d1d

00406c34 <drv_i2c_read>:

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
  406c34:	b580      	push	{r7, lr}
  406c36:	b08a      	sub	sp, #40	; 0x28
  406c38:	af00      	add	r7, sp, #0
  406c3a:	60f8      	str	r0, [r7, #12]
  406c3c:	607a      	str	r2, [r7, #4]
  406c3e:	460a      	mov	r2, r1
  406c40:	72fa      	strb	r2, [r7, #11]
  406c42:	72bb      	strb	r3, [r7, #10]
	uint8_t status = STATUS_FAIL;
  406c44:	2301      	movs	r3, #1
  406c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
  406c4a:	2300      	movs	r3, #0
  406c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	twi_packet_t packet;
	dataPacket[0] = reg;
  406c4e:	7afb      	ldrb	r3, [r7, #11]
  406c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet.buffer = dataPacket;
  406c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406c58:	61bb      	str	r3, [r7, #24]
	packet.length = 1;
  406c5a:	2301      	movs	r3, #1
  406c5c:	61fb      	str	r3, [r7, #28]
	packet.chip = (uint32_t) slave_twi_config->address;
  406c5e:	68fb      	ldr	r3, [r7, #12]
  406c60:	685b      	ldr	r3, [r3, #4]
  406c62:	b2db      	uxtb	r3, r3
  406c64:	f887 3020 	strb.w	r3, [r7, #32]
	packet.addr[0] = 0x00;
  406c68:	2300      	movs	r3, #0
  406c6a:	743b      	strb	r3, [r7, #16]
	packet.addr[1] = 0x00;
  406c6c:	2300      	movs	r3, #0
  406c6e:	747b      	strb	r3, [r7, #17]
	packet.addr[2] = 0x00;
  406c70:	2300      	movs	r3, #0
  406c72:	74bb      	strb	r3, [r7, #18]
	packet.addr_length = 0;
  406c74:	2300      	movs	r3, #0
  406c76:	617b      	str	r3, [r7, #20]
	//}
	//#endif
	
	//delay_ms(1);
	//initialize the read sequence
	packet.buffer = data;
  406c78:	687b      	ldr	r3, [r7, #4]
  406c7a:	61bb      	str	r3, [r7, #24]
	packet.length = length;
  406c7c:	7abb      	ldrb	r3, [r7, #10]
  406c7e:	61fb      	str	r3, [r7, #28]
	packet.addr[0] = reg;
  406c80:	7afb      	ldrb	r3, [r7, #11]
  406c82:	743b      	strb	r3, [r7, #16]
	packet.addr[1] = 0x00;
  406c84:	2300      	movs	r3, #0
  406c86:	747b      	strb	r3, [r7, #17]
	packet.addr[2] = 0x00;
  406c88:	2300      	movs	r3, #0
  406c8a:	74bb      	strb	r3, [r7, #18]
	packet.addr_length = 1;
  406c8c:	2301      	movs	r3, #1
  406c8e:	617b      	str	r3, [r7, #20]
		return STATUS_FAIL;
	}
	
	#else
	#ifdef ENABLE_MULTI_BYTE_READ 
	status = twi_read(slave_twi_config->drv_twi_options->p_i2c, &packet);
  406c90:	68fb      	ldr	r3, [r7, #12]
  406c92:	689b      	ldr	r3, [r3, #8]
  406c94:	681a      	ldr	r2, [r3, #0]
  406c96:	f107 0310 	add.w	r3, r7, #16
  406c9a:	4610      	mov	r0, r2
  406c9c:	4619      	mov	r1, r3
  406c9e:	4b08      	ldr	r3, [pc, #32]	; (406cc0 <drv_i2c_read+0x8c>)
  406ca0:	4798      	blx	r3
  406ca2:	4603      	mov	r3, r0
  406ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != TWI_SUCCESS)
  406ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406cac:	2b00      	cmp	r3, #0
  406cae:	d001      	beq.n	406cb4 <drv_i2c_read+0x80>
	{
		return STATUS_FAIL;
  406cb0:	2301      	movs	r3, #1
  406cb2:	e000      	b.n	406cb6 <drv_i2c_read+0x82>
			return STATUS_FAIL;
		}
	}
	#endif
	#endif
	return STATUS_PASS;
  406cb4:	2300      	movs	r3, #0
}
  406cb6:	4618      	mov	r0, r3
  406cb8:	3728      	adds	r7, #40	; 0x28
  406cba:	46bd      	mov	sp, r7
  406cbc:	bd80      	pop	{r7, pc}
  406cbe:	bf00      	nop
  406cc0:	00406e49 	.word	0x00406e49

00406cc4 <twi_mk_addr>:
	twi_disable_interrupt(twi_config->p_i2c, ul_sources);
	return STATUS_PASS;
}

static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  406cc4:	b480      	push	{r7}
  406cc6:	b085      	sub	sp, #20
  406cc8:	af00      	add	r7, sp, #0
  406cca:	6078      	str	r0, [r7, #4]
  406ccc:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  406cce:	683b      	ldr	r3, [r7, #0]
  406cd0:	2b00      	cmp	r3, #0
  406cd2:	d101      	bne.n	406cd8 <twi_mk_addr+0x14>
	return 0;
  406cd4:	2300      	movs	r3, #0
  406cd6:	e01b      	b.n	406d10 <twi_mk_addr+0x4c>

	val = addr[0];
  406cd8:	687b      	ldr	r3, [r7, #4]
  406cda:	781b      	ldrb	r3, [r3, #0]
  406cdc:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  406cde:	683b      	ldr	r3, [r7, #0]
  406ce0:	2b01      	cmp	r3, #1
  406ce2:	dd08      	ble.n	406cf6 <twi_mk_addr+0x32>
		val <<= 8;
  406ce4:	68fb      	ldr	r3, [r7, #12]
  406ce6:	021b      	lsls	r3, r3, #8
  406ce8:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  406cea:	687b      	ldr	r3, [r7, #4]
  406cec:	3301      	adds	r3, #1
  406cee:	781b      	ldrb	r3, [r3, #0]
  406cf0:	68fa      	ldr	r2, [r7, #12]
  406cf2:	4313      	orrs	r3, r2
  406cf4:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  406cf6:	683b      	ldr	r3, [r7, #0]
  406cf8:	2b02      	cmp	r3, #2
  406cfa:	dd08      	ble.n	406d0e <twi_mk_addr+0x4a>
		val <<= 8;
  406cfc:	68fb      	ldr	r3, [r7, #12]
  406cfe:	021b      	lsls	r3, r3, #8
  406d00:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  406d02:	687b      	ldr	r3, [r7, #4]
  406d04:	3302      	adds	r3, #2
  406d06:	781b      	ldrb	r3, [r3, #0]
  406d08:	68fa      	ldr	r2, [r7, #12]
  406d0a:	4313      	orrs	r3, r2
  406d0c:	60fb      	str	r3, [r7, #12]
	}
	return val;
  406d0e:	68fb      	ldr	r3, [r7, #12]
}
  406d10:	4618      	mov	r0, r3
  406d12:	3714      	adds	r7, #20
  406d14:	46bd      	mov	sp, r7
  406d16:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d1a:	4770      	bx	lr

00406d1c <twi_write>:

uint32_t twi_write(Twi *p_twi, twi_packet_t *p_packet)
{
  406d1c:	b580      	push	{r7, lr}
  406d1e:	b086      	sub	sp, #24
  406d20:	af00      	add	r7, sp, #0
  406d22:	6078      	str	r0, [r7, #4]
  406d24:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406d26:	683b      	ldr	r3, [r7, #0]
  406d28:	68db      	ldr	r3, [r3, #12]
  406d2a:	613b      	str	r3, [r7, #16]
	uint8_t *buffer = p_packet->buffer;
  406d2c:	683b      	ldr	r3, [r7, #0]
  406d2e:	689b      	ldr	r3, [r3, #8]
  406d30:	60fb      	str	r3, [r7, #12]
	uint32_t timeout = TWI_TIMEOUT;
  406d32:	f643 2398 	movw	r3, #15000	; 0x3a98
  406d36:	617b      	str	r3, [r7, #20]

	/* Check argument */
	if (cnt == 0) {
  406d38:	693b      	ldr	r3, [r7, #16]
  406d3a:	2b00      	cmp	r3, #0
  406d3c:	d101      	bne.n	406d42 <twi_write+0x26>
		return TWI_INVALID_ARGUMENT;
  406d3e:	2301      	movs	r3, #1
  406d40:	e07c      	b.n	406e3c <twi_write+0x120>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406d42:	687b      	ldr	r3, [r7, #4]
  406d44:	2200      	movs	r2, #0
  406d46:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406d48:	683b      	ldr	r3, [r7, #0]
  406d4a:	7c1b      	ldrb	r3, [r3, #16]
  406d4c:	041b      	lsls	r3, r3, #16
  406d4e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406d52:	683b      	ldr	r3, [r7, #0]
  406d54:	685b      	ldr	r3, [r3, #4]
  406d56:	021b      	lsls	r3, r3, #8
  406d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406d5c:	431a      	orrs	r2, r3
  406d5e:	687b      	ldr	r3, [r7, #4]
  406d60:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406d62:	687b      	ldr	r3, [r7, #4]
  406d64:	2200      	movs	r2, #0
  406d66:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406d68:	683a      	ldr	r2, [r7, #0]
  406d6a:	683b      	ldr	r3, [r7, #0]
  406d6c:	685b      	ldr	r3, [r3, #4]
  406d6e:	4610      	mov	r0, r2
  406d70:	4619      	mov	r1, r3
  406d72:	4b34      	ldr	r3, [pc, #208]	; (406e44 <twi_write+0x128>)
  406d74:	4798      	blx	r3
  406d76:	4602      	mov	r2, r0
  406d78:	687b      	ldr	r3, [r7, #4]
  406d7a:	60da      	str	r2, [r3, #12]

	/* Send one bytes */
		status = p_twi->TWI_SR;
  406d7c:	687b      	ldr	r3, [r7, #4]
  406d7e:	6a1b      	ldr	r3, [r3, #32]
  406d80:	60bb      	str	r3, [r7, #8]
		if (status & TWI_SR_NACK) {
  406d82:	68bb      	ldr	r3, [r7, #8]
  406d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406d88:	2b00      	cmp	r3, #0
  406d8a:	d001      	beq.n	406d90 <twi_write+0x74>
			return TWI_RECEIVE_NACK;
  406d8c:	2305      	movs	r3, #5
  406d8e:	e055      	b.n	406e3c <twi_write+0x120>
		}
		p_twi->TWI_THR = *buffer++;
  406d90:	68fb      	ldr	r3, [r7, #12]
  406d92:	1c5a      	adds	r2, r3, #1
  406d94:	60fa      	str	r2, [r7, #12]
  406d96:	781b      	ldrb	r3, [r3, #0]
  406d98:	461a      	mov	r2, r3
  406d9a:	687b      	ldr	r3, [r7, #4]
  406d9c:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(p_twi->TWI_SR & TWI_SR_TXRDY))
  406d9e:	e005      	b.n	406dac <twi_write+0x90>
		{
			if (!(timeout--))
  406da0:	697b      	ldr	r3, [r7, #20]
  406da2:	1e5a      	subs	r2, r3, #1
  406da4:	617a      	str	r2, [r7, #20]
  406da6:	2b00      	cmp	r3, #0
  406da8:	d100      	bne.n	406dac <twi_write+0x90>
			{
				break;
  406daa:	e005      	b.n	406db8 <twi_write+0x9c>
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}
		p_twi->TWI_THR = *buffer++;
		while (!(p_twi->TWI_SR & TWI_SR_TXRDY))
  406dac:	687b      	ldr	r3, [r7, #4]
  406dae:	6a1b      	ldr	r3, [r3, #32]
  406db0:	f003 0304 	and.w	r3, r3, #4
  406db4:	2b00      	cmp	r3, #0
  406db6:	d0f3      	beq.n	406da0 <twi_write+0x84>
			if (!(timeout--))
			{
				break;
			}
		}
		if (cnt>1)
  406db8:	693b      	ldr	r3, [r7, #16]
  406dba:	2b01      	cmp	r3, #1
  406dbc:	d910      	bls.n	406de0 <twi_write+0xc4>
		{
			status = p_twi->TWI_SR;
  406dbe:	687b      	ldr	r3, [r7, #4]
  406dc0:	6a1b      	ldr	r3, [r3, #32]
  406dc2:	60bb      	str	r3, [r7, #8]
			if (status & TWI_SR_NACK) {
  406dc4:	68bb      	ldr	r3, [r7, #8]
  406dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406dca:	2b00      	cmp	r3, #0
  406dcc:	d001      	beq.n	406dd2 <twi_write+0xb6>
				return TWI_RECEIVE_NACK;
  406dce:	2305      	movs	r3, #5
  406dd0:	e034      	b.n	406e3c <twi_write+0x120>
			}
			p_twi->TWI_THR = *buffer++;		
  406dd2:	68fb      	ldr	r3, [r7, #12]
  406dd4:	1c5a      	adds	r2, r3, #1
  406dd6:	60fa      	str	r2, [r7, #12]
  406dd8:	781b      	ldrb	r3, [r3, #0]
  406dda:	461a      	mov	r2, r3
  406ddc:	687b      	ldr	r3, [r7, #4]
  406dde:	635a      	str	r2, [r3, #52]	; 0x34
		}
		p_twi->TWI_CR = TWI_CR_STOP;
  406de0:	687b      	ldr	r3, [r7, #4]
  406de2:	2202      	movs	r2, #2
  406de4:	601a      	str	r2, [r3, #0]
		
	timeout = TWI_TIMEOUT;
  406de6:	f643 2398 	movw	r3, #15000	; 0x3a98
  406dea:	617b      	str	r3, [r7, #20]
	while (1) {
		status = p_twi->TWI_SR;
  406dec:	687b      	ldr	r3, [r7, #4]
  406dee:	6a1b      	ldr	r3, [r3, #32]
  406df0:	60bb      	str	r3, [r7, #8]
		if (status & TWI_SR_NACK) {
  406df2:	68bb      	ldr	r3, [r7, #8]
  406df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406df8:	2b00      	cmp	r3, #0
  406dfa:	d001      	beq.n	406e00 <twi_write+0xe4>
			return TWI_RECEIVE_NACK;
  406dfc:	2305      	movs	r3, #5
  406dfe:	e01d      	b.n	406e3c <twi_write+0x120>
		}

		if (status & TWI_SR_TXRDY) {
  406e00:	68bb      	ldr	r3, [r7, #8]
  406e02:	f003 0304 	and.w	r3, r3, #4
  406e06:	2b00      	cmp	r3, #0
  406e08:	d000      	beq.n	406e0c <twi_write+0xf0>
			break;
  406e0a:	e006      	b.n	406e1a <twi_write+0xfe>
		}
		if (!(timeout--))
  406e0c:	697b      	ldr	r3, [r7, #20]
  406e0e:	1e5a      	subs	r2, r3, #1
  406e10:	617a      	str	r2, [r7, #20]
  406e12:	2b00      	cmp	r3, #0
  406e14:	d100      	bne.n	406e18 <twi_write+0xfc>
		{
			break;
  406e16:	e000      	b.n	406e1a <twi_write+0xfe>
		}
	}
  406e18:	e7e8      	b.n	406dec <twi_write+0xd0>
	
	timeout = TWI_TIMEOUT;
  406e1a:	f643 2398 	movw	r3, #15000	; 0x3a98
  406e1e:	617b      	str	r3, [r7, #20]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406e20:	e005      	b.n	406e2e <twi_write+0x112>
		if (!(timeout--))
  406e22:	697b      	ldr	r3, [r7, #20]
  406e24:	1e5a      	subs	r2, r3, #1
  406e26:	617a      	str	r2, [r7, #20]
  406e28:	2b00      	cmp	r3, #0
  406e2a:	d100      	bne.n	406e2e <twi_write+0x112>
		{
			break;
  406e2c:	e005      	b.n	406e3a <twi_write+0x11e>
			break;
		}
	}
	
	timeout = TWI_TIMEOUT;
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406e2e:	687b      	ldr	r3, [r7, #4]
  406e30:	6a1b      	ldr	r3, [r3, #32]
  406e32:	f003 0301 	and.w	r3, r3, #1
  406e36:	2b00      	cmp	r3, #0
  406e38:	d0f3      	beq.n	406e22 <twi_write+0x106>
		{
			break;
		}
	}

	return TWI_SUCCESS;
  406e3a:	2300      	movs	r3, #0
}
  406e3c:	4618      	mov	r0, r3
  406e3e:	3718      	adds	r7, #24
  406e40:	46bd      	mov	sp, r7
  406e42:	bd80      	pop	{r7, pc}
  406e44:	00406cc5 	.word	0x00406cc5

00406e48 <twi_read>:

uint32_t twi_read(Twi *p_twi, twi_packet_t *p_packet)
{
  406e48:	b580      	push	{r7, lr}
  406e4a:	b088      	sub	sp, #32
  406e4c:	af00      	add	r7, sp, #0
  406e4e:	6078      	str	r0, [r7, #4]
  406e50:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406e52:	683b      	ldr	r3, [r7, #0]
  406e54:	68db      	ldr	r3, [r3, #12]
  406e56:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  406e58:	683b      	ldr	r3, [r7, #0]
  406e5a:	689b      	ldr	r3, [r3, #8]
  406e5c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  406e5e:	2300      	movs	r3, #0
  406e60:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;
  406e62:	f643 2398 	movw	r3, #15000	; 0x3a98
  406e66:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  406e68:	69fb      	ldr	r3, [r7, #28]
  406e6a:	2b00      	cmp	r3, #0
  406e6c:	d101      	bne.n	406e72 <twi_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  406e6e:	2301      	movs	r3, #1
  406e70:	e078      	b.n	406f64 <twi_read+0x11c>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406e72:	687b      	ldr	r3, [r7, #4]
  406e74:	2200      	movs	r2, #0
  406e76:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406e78:	683b      	ldr	r3, [r7, #0]
  406e7a:	7c1b      	ldrb	r3, [r3, #16]
  406e7c:	041b      	lsls	r3, r3, #16
  406e7e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406e82:	683b      	ldr	r3, [r7, #0]
  406e84:	685b      	ldr	r3, [r3, #4]
  406e86:	021b      	lsls	r3, r3, #8
  406e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406e8c:	4313      	orrs	r3, r2
  406e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  406e92:	687b      	ldr	r3, [r7, #4]
  406e94:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406e96:	687b      	ldr	r3, [r7, #4]
  406e98:	2200      	movs	r2, #0
  406e9a:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406e9c:	683a      	ldr	r2, [r7, #0]
  406e9e:	683b      	ldr	r3, [r7, #0]
  406ea0:	685b      	ldr	r3, [r3, #4]
  406ea2:	4610      	mov	r0, r2
  406ea4:	4619      	mov	r1, r3
  406ea6:	4b31      	ldr	r3, [pc, #196]	; (406f6c <twi_read+0x124>)
  406ea8:	4798      	blx	r3
  406eaa:	4602      	mov	r2, r0
  406eac:	687b      	ldr	r3, [r7, #4]
  406eae:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  406eb0:	69fb      	ldr	r3, [r7, #28]
  406eb2:	2b01      	cmp	r3, #1
  406eb4:	d105      	bne.n	406ec2 <twi_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  406eb6:	687b      	ldr	r3, [r7, #4]
  406eb8:	2203      	movs	r2, #3
  406eba:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  406ebc:	2301      	movs	r3, #1
  406ebe:	75fb      	strb	r3, [r7, #23]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  406ec0:	e03a      	b.n	406f38 <twi_read+0xf0>
	/* Send a START condition */
	if (cnt == 1) {
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  406ec2:	687b      	ldr	r3, [r7, #4]
  406ec4:	2201      	movs	r2, #1
  406ec6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  406ec8:	2300      	movs	r3, #0
  406eca:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  406ecc:	e034      	b.n	406f38 <twi_read+0xf0>
		status = p_twi->TWI_SR;
  406ece:	687b      	ldr	r3, [r7, #4]
  406ed0:	6a1b      	ldr	r3, [r3, #32]
  406ed2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406ed4:	68fb      	ldr	r3, [r7, #12]
  406ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406eda:	2b00      	cmp	r3, #0
  406edc:	d001      	beq.n	406ee2 <twi_read+0x9a>
			return TWI_RECEIVE_NACK;
  406ede:	2305      	movs	r3, #5
  406ee0:	e040      	b.n	406f64 <twi_read+0x11c>
		}

		if (!timeout--) {
  406ee2:	693b      	ldr	r3, [r7, #16]
  406ee4:	1e5a      	subs	r2, r3, #1
  406ee6:	613a      	str	r2, [r7, #16]
  406ee8:	2b00      	cmp	r3, #0
  406eea:	d101      	bne.n	406ef0 <twi_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  406eec:	2309      	movs	r3, #9
  406eee:	e039      	b.n	406f64 <twi_read+0x11c>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  406ef0:	69fb      	ldr	r3, [r7, #28]
  406ef2:	2b01      	cmp	r3, #1
  406ef4:	d107      	bne.n	406f06 <twi_read+0xbe>
  406ef6:	7dfb      	ldrb	r3, [r7, #23]
  406ef8:	2b00      	cmp	r3, #0
  406efa:	d104      	bne.n	406f06 <twi_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  406efc:	687b      	ldr	r3, [r7, #4]
  406efe:	2202      	movs	r2, #2
  406f00:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  406f02:	2301      	movs	r3, #1
  406f04:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  406f06:	68fb      	ldr	r3, [r7, #12]
  406f08:	f003 0302 	and.w	r3, r3, #2
  406f0c:	2b00      	cmp	r3, #0
  406f0e:	d106      	bne.n	406f1e <twi_read+0xd6>
			if (!(timeout--))
  406f10:	693b      	ldr	r3, [r7, #16]
  406f12:	1e5a      	subs	r2, r3, #1
  406f14:	613a      	str	r2, [r7, #16]
  406f16:	2b00      	cmp	r3, #0
  406f18:	d100      	bne.n	406f1c <twi_read+0xd4>
			{
				break;
  406f1a:	e010      	b.n	406f3e <twi_read+0xf6>
			}
			continue;
  406f1c:	e00c      	b.n	406f38 <twi_read+0xf0>
		}
		timeout = TWI_TIMEOUT;
  406f1e:	f643 2398 	movw	r3, #15000	; 0x3a98
  406f22:	613b      	str	r3, [r7, #16]
		*buffer++ = p_twi->TWI_RHR;
  406f24:	69bb      	ldr	r3, [r7, #24]
  406f26:	1c5a      	adds	r2, r3, #1
  406f28:	61ba      	str	r2, [r7, #24]
  406f2a:	687a      	ldr	r2, [r7, #4]
  406f2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  406f2e:	b2d2      	uxtb	r2, r2
  406f30:	701a      	strb	r2, [r3, #0]

		cnt--;
  406f32:	69fb      	ldr	r3, [r7, #28]
  406f34:	3b01      	subs	r3, #1
  406f36:	61fb      	str	r3, [r7, #28]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  406f38:	69fb      	ldr	r3, [r7, #28]
  406f3a:	2b00      	cmp	r3, #0
  406f3c:	d1c7      	bne.n	406ece <twi_read+0x86>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	timeout = TWI_TIMEOUT;
  406f3e:	f643 2398 	movw	r3, #15000	; 0x3a98
  406f42:	613b      	str	r3, [r7, #16]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406f44:	e005      	b.n	406f52 <twi_read+0x10a>
		if (!(timeout--))
  406f46:	693b      	ldr	r3, [r7, #16]
  406f48:	1e5a      	subs	r2, r3, #1
  406f4a:	613a      	str	r2, [r7, #16]
  406f4c:	2b00      	cmp	r3, #0
  406f4e:	d100      	bne.n	406f52 <twi_read+0x10a>
		{
			break;
  406f50:	e005      	b.n	406f5e <twi_read+0x116>

		cnt--;
	}

	timeout = TWI_TIMEOUT;
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406f52:	687b      	ldr	r3, [r7, #4]
  406f54:	6a1b      	ldr	r3, [r3, #32]
  406f56:	f003 0301 	and.w	r3, r3, #1
  406f5a:	2b00      	cmp	r3, #0
  406f5c:	d0f3      	beq.n	406f46 <twi_read+0xfe>
		{
			break;
		}
	}

	p_twi->TWI_SR;
  406f5e:	687b      	ldr	r3, [r7, #4]
  406f60:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  406f62:	2300      	movs	r3, #0
  406f64:	4618      	mov	r0, r3
  406f66:	3720      	adds	r7, #32
  406f68:	46bd      	mov	sp, r7
  406f6a:	bd80      	pop	{r7, pc}
  406f6c:	00406cc5 	.word	0x00406cc5

00406f70 <vLedTimerCallback>:
volatile drv_led_color_type_t vledColor;	//global variable to store led color, used in timer callback
volatile drv_led_state_type_t vledState; //global variable to store led state, used in timer callback

//Led Timer callback function
void vLedTimerCallback( xTimerHandle xTimer )
{
  406f70:	b580      	push	{r7, lr}
  406f72:	b082      	sub	sp, #8
  406f74:	af00      	add	r7, sp, #0
  406f76:	6078      	str	r0, [r7, #4]
	if(vledState == DRV_LED_FLASH)	//perform the action only if state is flashing
  406f78:	4b31      	ldr	r3, [pc, #196]	; (407040 <vLedTimerCallback+0xd0>)
  406f7a:	781b      	ldrb	r3, [r3, #0]
  406f7c:	b2db      	uxtb	r3, r3
  406f7e:	2b00      	cmp	r3, #0
  406f80:	d15a      	bne.n	407038 <vLedTimerCallback+0xc8>
	{
		//check which led color is set and toggle the pin state
		switch(vledColor)
  406f82:	4b30      	ldr	r3, [pc, #192]	; (407044 <vLedTimerCallback+0xd4>)
  406f84:	781b      	ldrb	r3, [r3, #0]
  406f86:	b2db      	uxtb	r3, r3
  406f88:	2b06      	cmp	r3, #6
  406f8a:	d854      	bhi.n	407036 <vLedTimerCallback+0xc6>
  406f8c:	a201      	add	r2, pc, #4	; (adr r2, 406f94 <vLedTimerCallback+0x24>)
  406f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406f92:	bf00      	nop
  406f94:	00406fb1 	.word	0x00406fb1
  406f98:	00406fbd 	.word	0x00406fbd
  406f9c:	00406fc9 	.word	0x00406fc9
  406fa0:	00406fd5 	.word	0x00406fd5
  406fa4:	00406feb 	.word	0x00406feb
  406fa8:	0040700b 	.word	0x0040700b
  406fac:	00407021 	.word	0x00407021
		{
			case DRV_LED_RED:
				drv_gpio_togglePin(ledConfig.redLed);
  406fb0:	4b25      	ldr	r3, [pc, #148]	; (407048 <vLedTimerCallback+0xd8>)
  406fb2:	781b      	ldrb	r3, [r3, #0]
  406fb4:	4618      	mov	r0, r3
  406fb6:	4b25      	ldr	r3, [pc, #148]	; (40704c <vLedTimerCallback+0xdc>)
  406fb8:	4798      	blx	r3
				break;
  406fba:	e03d      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_BLUE:
				drv_gpio_togglePin(ledConfig.blueLed);
  406fbc:	4b22      	ldr	r3, [pc, #136]	; (407048 <vLedTimerCallback+0xd8>)
  406fbe:	785b      	ldrb	r3, [r3, #1]
  406fc0:	4618      	mov	r0, r3
  406fc2:	4b22      	ldr	r3, [pc, #136]	; (40704c <vLedTimerCallback+0xdc>)
  406fc4:	4798      	blx	r3
				break;
  406fc6:	e037      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_GREEN:
				drv_gpio_togglePin(ledConfig.greenLed);
  406fc8:	4b1f      	ldr	r3, [pc, #124]	; (407048 <vLedTimerCallback+0xd8>)
  406fca:	789b      	ldrb	r3, [r3, #2]
  406fcc:	4618      	mov	r0, r3
  406fce:	4b1f      	ldr	r3, [pc, #124]	; (40704c <vLedTimerCallback+0xdc>)
  406fd0:	4798      	blx	r3
				break;
  406fd2:	e031      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_YELLOW:
				drv_gpio_togglePin(ledConfig.redLed);
  406fd4:	4b1c      	ldr	r3, [pc, #112]	; (407048 <vLedTimerCallback+0xd8>)
  406fd6:	781b      	ldrb	r3, [r3, #0]
  406fd8:	4618      	mov	r0, r3
  406fda:	4b1c      	ldr	r3, [pc, #112]	; (40704c <vLedTimerCallback+0xdc>)
  406fdc:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  406fde:	4b1a      	ldr	r3, [pc, #104]	; (407048 <vLedTimerCallback+0xd8>)
  406fe0:	789b      	ldrb	r3, [r3, #2]
  406fe2:	4618      	mov	r0, r3
  406fe4:	4b19      	ldr	r3, [pc, #100]	; (40704c <vLedTimerCallback+0xdc>)
  406fe6:	4798      	blx	r3
				break;
  406fe8:	e026      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_WHITE:
				drv_gpio_togglePin(ledConfig.redLed);
  406fea:	4b17      	ldr	r3, [pc, #92]	; (407048 <vLedTimerCallback+0xd8>)
  406fec:	781b      	ldrb	r3, [r3, #0]
  406fee:	4618      	mov	r0, r3
  406ff0:	4b16      	ldr	r3, [pc, #88]	; (40704c <vLedTimerCallback+0xdc>)
  406ff2:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  406ff4:	4b14      	ldr	r3, [pc, #80]	; (407048 <vLedTimerCallback+0xd8>)
  406ff6:	789b      	ldrb	r3, [r3, #2]
  406ff8:	4618      	mov	r0, r3
  406ffa:	4b14      	ldr	r3, [pc, #80]	; (40704c <vLedTimerCallback+0xdc>)
  406ffc:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  406ffe:	4b12      	ldr	r3, [pc, #72]	; (407048 <vLedTimerCallback+0xd8>)
  407000:	785b      	ldrb	r3, [r3, #1]
  407002:	4618      	mov	r0, r3
  407004:	4b11      	ldr	r3, [pc, #68]	; (40704c <vLedTimerCallback+0xdc>)
  407006:	4798      	blx	r3
				break;
  407008:	e016      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_TURQUOISE:
				drv_gpio_togglePin(ledConfig.greenLed);
  40700a:	4b0f      	ldr	r3, [pc, #60]	; (407048 <vLedTimerCallback+0xd8>)
  40700c:	789b      	ldrb	r3, [r3, #2]
  40700e:	4618      	mov	r0, r3
  407010:	4b0e      	ldr	r3, [pc, #56]	; (40704c <vLedTimerCallback+0xdc>)
  407012:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  407014:	4b0c      	ldr	r3, [pc, #48]	; (407048 <vLedTimerCallback+0xd8>)
  407016:	785b      	ldrb	r3, [r3, #1]
  407018:	4618      	mov	r0, r3
  40701a:	4b0c      	ldr	r3, [pc, #48]	; (40704c <vLedTimerCallback+0xdc>)
  40701c:	4798      	blx	r3
				break;
  40701e:	e00b      	b.n	407038 <vLedTimerCallback+0xc8>
			case DRV_LED_PURPLE:
				drv_gpio_togglePin(ledConfig.redLed);
  407020:	4b09      	ldr	r3, [pc, #36]	; (407048 <vLedTimerCallback+0xd8>)
  407022:	781b      	ldrb	r3, [r3, #0]
  407024:	4618      	mov	r0, r3
  407026:	4b09      	ldr	r3, [pc, #36]	; (40704c <vLedTimerCallback+0xdc>)
  407028:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  40702a:	4b07      	ldr	r3, [pc, #28]	; (407048 <vLedTimerCallback+0xd8>)
  40702c:	785b      	ldrb	r3, [r3, #1]
  40702e:	4618      	mov	r0, r3
  407030:	4b06      	ldr	r3, [pc, #24]	; (40704c <vLedTimerCallback+0xdc>)
  407032:	4798      	blx	r3
				break;
  407034:	e000      	b.n	407038 <vLedTimerCallback+0xc8>
			default:
				break;
  407036:	bf00      	nop
			
		}
	}
}
  407038:	3708      	adds	r7, #8
  40703a:	46bd      	mov	sp, r7
  40703c:	bd80      	pop	{r7, pc}
  40703e:	bf00      	nop
  407040:	20008974 	.word	0x20008974
  407044:	2000896c 	.word	0x2000896c
  407048:	20008978 	.word	0x20008978
  40704c:	004055b1 	.word	0x004055b1

00407050 <drv_led_init>:
int timerId = 0;
//store the led configuration
status_t drv_led_init(drv_led_config_t* configLed)
{
  407050:	b590      	push	{r4, r7, lr}
  407052:	b087      	sub	sp, #28
  407054:	af02      	add	r7, sp, #8
  407056:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  407058:	2300      	movs	r3, #0
  40705a:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  40705c:	687b      	ldr	r3, [r7, #4]
  40705e:	781a      	ldrb	r2, [r3, #0]
  407060:	4b0f      	ldr	r3, [pc, #60]	; (4070a0 <drv_led_init+0x50>)
  407062:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  407064:	687b      	ldr	r3, [r7, #4]
  407066:	785a      	ldrb	r2, [r3, #1]
  407068:	4b0d      	ldr	r3, [pc, #52]	; (4070a0 <drv_led_init+0x50>)
  40706a:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  40706c:	687b      	ldr	r3, [r7, #4]
  40706e:	789a      	ldrb	r2, [r3, #2]
  407070:	4b0b      	ldr	r3, [pc, #44]	; (4070a0 <drv_led_init+0x50>)
  407072:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, &timerId, vLedTimerCallback);
  407074:	4b0b      	ldr	r3, [pc, #44]	; (4070a4 <drv_led_init+0x54>)
  407076:	9300      	str	r3, [sp, #0]
  407078:	480b      	ldr	r0, [pc, #44]	; (4070a8 <drv_led_init+0x58>)
  40707a:	21fa      	movs	r1, #250	; 0xfa
  40707c:	2201      	movs	r2, #1
  40707e:	4b0b      	ldr	r3, [pc, #44]	; (4070ac <drv_led_init+0x5c>)
  407080:	4c0b      	ldr	r4, [pc, #44]	; (4070b0 <drv_led_init+0x60>)
  407082:	47a0      	blx	r4
  407084:	4602      	mov	r2, r0
  407086:	4b0b      	ldr	r3, [pc, #44]	; (4070b4 <drv_led_init+0x64>)
  407088:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  40708a:	4b0a      	ldr	r3, [pc, #40]	; (4070b4 <drv_led_init+0x64>)
  40708c:	681b      	ldr	r3, [r3, #0]
  40708e:	2b00      	cmp	r3, #0
  407090:	d101      	bne.n	407096 <drv_led_init+0x46>
	{
		result = STATUS_FAIL;
  407092:	2301      	movs	r3, #1
  407094:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  407096:	7bfb      	ldrb	r3, [r7, #15]
}
  407098:	4618      	mov	r0, r3
  40709a:	3714      	adds	r7, #20
  40709c:	46bd      	mov	sp, r7
  40709e:	bd90      	pop	{r4, r7, pc}
  4070a0:	20008978 	.word	0x20008978
  4070a4:	00406f71 	.word	0x00406f71
  4070a8:	00415da8 	.word	0x00415da8
  4070ac:	20000f80 	.word	0x20000f80
  4070b0:	00409ab1 	.word	0x00409ab1
  4070b4:	20008970 	.word	0x20008970

004070b8 <drv_led_set>:

status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  4070b8:	b590      	push	{r4, r7, lr}
  4070ba:	b087      	sub	sp, #28
  4070bc:	af02      	add	r7, sp, #8
  4070be:	4602      	mov	r2, r0
  4070c0:	460b      	mov	r3, r1
  4070c2:	71fa      	strb	r2, [r7, #7]
  4070c4:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  4070c6:	2300      	movs	r3, #0
  4070c8:	73fb      	strb	r3, [r7, #15]
	if(LedTimer != NULL)
  4070ca:	4b72      	ldr	r3, [pc, #456]	; (407294 <drv_led_set+0x1dc>)
  4070cc:	681b      	ldr	r3, [r3, #0]
  4070ce:	2b00      	cmp	r3, #0
  4070d0:	d011      	beq.n	4070f6 <drv_led_set+0x3e>
	{
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  4070d2:	4b70      	ldr	r3, [pc, #448]	; (407294 <drv_led_set+0x1dc>)
  4070d4:	681b      	ldr	r3, [r3, #0]
  4070d6:	4618      	mov	r0, r3
  4070d8:	4b6f      	ldr	r3, [pc, #444]	; (407298 <drv_led_set+0x1e0>)
  4070da:	4798      	blx	r3
  4070dc:	4603      	mov	r3, r0
  4070de:	2b00      	cmp	r3, #0
  4070e0:	d009      	beq.n	4070f6 <drv_led_set+0x3e>
		{
			//timer is active, stop it
			xTimerStop(LedTimer, 0);		
  4070e2:	4b6c      	ldr	r3, [pc, #432]	; (407294 <drv_led_set+0x1dc>)
  4070e4:	681b      	ldr	r3, [r3, #0]
  4070e6:	2200      	movs	r2, #0
  4070e8:	9200      	str	r2, [sp, #0]
  4070ea:	4618      	mov	r0, r3
  4070ec:	2101      	movs	r1, #1
  4070ee:	2200      	movs	r2, #0
  4070f0:	2300      	movs	r3, #0
  4070f2:	4c6a      	ldr	r4, [pc, #424]	; (40729c <drv_led_set+0x1e4>)
  4070f4:	47a0      	blx	r4
		}
	}
	//switch off all LEDs
	drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  4070f6:	4b6a      	ldr	r3, [pc, #424]	; (4072a0 <drv_led_set+0x1e8>)
  4070f8:	781b      	ldrb	r3, [r3, #0]
  4070fa:	4618      	mov	r0, r3
  4070fc:	2101      	movs	r1, #1
  4070fe:	4b69      	ldr	r3, [pc, #420]	; (4072a4 <drv_led_set+0x1ec>)
  407100:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  407102:	4b67      	ldr	r3, [pc, #412]	; (4072a0 <drv_led_set+0x1e8>)
  407104:	785b      	ldrb	r3, [r3, #1]
  407106:	4618      	mov	r0, r3
  407108:	2101      	movs	r1, #1
  40710a:	4b66      	ldr	r3, [pc, #408]	; (4072a4 <drv_led_set+0x1ec>)
  40710c:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  40710e:	4b64      	ldr	r3, [pc, #400]	; (4072a0 <drv_led_set+0x1e8>)
  407110:	789b      	ldrb	r3, [r3, #2]
  407112:	4618      	mov	r0, r3
  407114:	2101      	movs	r1, #1
  407116:	4b63      	ldr	r3, [pc, #396]	; (4072a4 <drv_led_set+0x1ec>)
  407118:	4798      	blx	r3
	
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  40711a:	4b63      	ldr	r3, [pc, #396]	; (4072a8 <drv_led_set+0x1f0>)
  40711c:	79fa      	ldrb	r2, [r7, #7]
  40711e:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  407120:	4b62      	ldr	r3, [pc, #392]	; (4072ac <drv_led_set+0x1f4>)
  407122:	79ba      	ldrb	r2, [r7, #6]
  407124:	701a      	strb	r2, [r3, #0]
	switch (ledColor)
  407126:	79fb      	ldrb	r3, [r7, #7]
  407128:	2b07      	cmp	r3, #7
  40712a:	d875      	bhi.n	407218 <drv_led_set+0x160>
  40712c:	a201      	add	r2, pc, #4	; (adr r2, 407134 <drv_led_set+0x7c>)
  40712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407132:	bf00      	nop
  407134:	00407155 	.word	0x00407155
  407138:	00407163 	.word	0x00407163
  40713c:	00407171 	.word	0x00407171
  407140:	0040717f 	.word	0x0040717f
  407144:	00407199 	.word	0x00407199
  407148:	004071bf 	.word	0x004071bf
  40714c:	004071d9 	.word	0x004071d9
  407150:	004071f3 	.word	0x004071f3
	{
		case DRV_LED_RED:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  407154:	4b52      	ldr	r3, [pc, #328]	; (4072a0 <drv_led_set+0x1e8>)
  407156:	781b      	ldrb	r3, [r3, #0]
  407158:	4618      	mov	r0, r3
  40715a:	2100      	movs	r1, #0
  40715c:	4b51      	ldr	r3, [pc, #324]	; (4072a4 <drv_led_set+0x1ec>)
  40715e:	4798      	blx	r3
			break;
  407160:	e05b      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_BLUE:
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  407162:	4b4f      	ldr	r3, [pc, #316]	; (4072a0 <drv_led_set+0x1e8>)
  407164:	785b      	ldrb	r3, [r3, #1]
  407166:	4618      	mov	r0, r3
  407168:	2100      	movs	r1, #0
  40716a:	4b4e      	ldr	r3, [pc, #312]	; (4072a4 <drv_led_set+0x1ec>)
  40716c:	4798      	blx	r3
			break;
  40716e:	e054      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_GREEN:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  407170:	4b4b      	ldr	r3, [pc, #300]	; (4072a0 <drv_led_set+0x1e8>)
  407172:	789b      	ldrb	r3, [r3, #2]
  407174:	4618      	mov	r0, r3
  407176:	2100      	movs	r1, #0
  407178:	4b4a      	ldr	r3, [pc, #296]	; (4072a4 <drv_led_set+0x1ec>)
  40717a:	4798      	blx	r3
			break;
  40717c:	e04d      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_YELLOW:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  40717e:	4b48      	ldr	r3, [pc, #288]	; (4072a0 <drv_led_set+0x1e8>)
  407180:	781b      	ldrb	r3, [r3, #0]
  407182:	4618      	mov	r0, r3
  407184:	2100      	movs	r1, #0
  407186:	4b47      	ldr	r3, [pc, #284]	; (4072a4 <drv_led_set+0x1ec>)
  407188:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  40718a:	4b45      	ldr	r3, [pc, #276]	; (4072a0 <drv_led_set+0x1e8>)
  40718c:	789b      	ldrb	r3, [r3, #2]
  40718e:	4618      	mov	r0, r3
  407190:	2100      	movs	r1, #0
  407192:	4b44      	ldr	r3, [pc, #272]	; (4072a4 <drv_led_set+0x1ec>)
  407194:	4798      	blx	r3
			break;
  407196:	e040      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_WHITE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  407198:	4b41      	ldr	r3, [pc, #260]	; (4072a0 <drv_led_set+0x1e8>)
  40719a:	781b      	ldrb	r3, [r3, #0]
  40719c:	4618      	mov	r0, r3
  40719e:	2100      	movs	r1, #0
  4071a0:	4b40      	ldr	r3, [pc, #256]	; (4072a4 <drv_led_set+0x1ec>)
  4071a2:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4071a4:	4b3e      	ldr	r3, [pc, #248]	; (4072a0 <drv_led_set+0x1e8>)
  4071a6:	789b      	ldrb	r3, [r3, #2]
  4071a8:	4618      	mov	r0, r3
  4071aa:	2100      	movs	r1, #0
  4071ac:	4b3d      	ldr	r3, [pc, #244]	; (4072a4 <drv_led_set+0x1ec>)
  4071ae:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4071b0:	4b3b      	ldr	r3, [pc, #236]	; (4072a0 <drv_led_set+0x1e8>)
  4071b2:	785b      	ldrb	r3, [r3, #1]
  4071b4:	4618      	mov	r0, r3
  4071b6:	2100      	movs	r1, #0
  4071b8:	4b3a      	ldr	r3, [pc, #232]	; (4072a4 <drv_led_set+0x1ec>)
  4071ba:	4798      	blx	r3
			break;
  4071bc:	e02d      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_TURQUOISE:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4071be:	4b38      	ldr	r3, [pc, #224]	; (4072a0 <drv_led_set+0x1e8>)
  4071c0:	789b      	ldrb	r3, [r3, #2]
  4071c2:	4618      	mov	r0, r3
  4071c4:	2100      	movs	r1, #0
  4071c6:	4b37      	ldr	r3, [pc, #220]	; (4072a4 <drv_led_set+0x1ec>)
  4071c8:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4071ca:	4b35      	ldr	r3, [pc, #212]	; (4072a0 <drv_led_set+0x1e8>)
  4071cc:	785b      	ldrb	r3, [r3, #1]
  4071ce:	4618      	mov	r0, r3
  4071d0:	2100      	movs	r1, #0
  4071d2:	4b34      	ldr	r3, [pc, #208]	; (4072a4 <drv_led_set+0x1ec>)
  4071d4:	4798      	blx	r3
			break;
  4071d6:	e020      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_PURPLE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  4071d8:	4b31      	ldr	r3, [pc, #196]	; (4072a0 <drv_led_set+0x1e8>)
  4071da:	781b      	ldrb	r3, [r3, #0]
  4071dc:	4618      	mov	r0, r3
  4071de:	2100      	movs	r1, #0
  4071e0:	4b30      	ldr	r3, [pc, #192]	; (4072a4 <drv_led_set+0x1ec>)
  4071e2:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4071e4:	4b2e      	ldr	r3, [pc, #184]	; (4072a0 <drv_led_set+0x1e8>)
  4071e6:	785b      	ldrb	r3, [r3, #1]
  4071e8:	4618      	mov	r0, r3
  4071ea:	2100      	movs	r1, #0
  4071ec:	4b2d      	ldr	r3, [pc, #180]	; (4072a4 <drv_led_set+0x1ec>)
  4071ee:	4798      	blx	r3
			break;
  4071f0:	e013      	b.n	40721a <drv_led_set+0x162>
		case DRV_LED_OFF:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  4071f2:	4b2b      	ldr	r3, [pc, #172]	; (4072a0 <drv_led_set+0x1e8>)
  4071f4:	781b      	ldrb	r3, [r3, #0]
  4071f6:	4618      	mov	r0, r3
  4071f8:	2101      	movs	r1, #1
  4071fa:	4b2a      	ldr	r3, [pc, #168]	; (4072a4 <drv_led_set+0x1ec>)
  4071fc:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  4071fe:	4b28      	ldr	r3, [pc, #160]	; (4072a0 <drv_led_set+0x1e8>)
  407200:	789b      	ldrb	r3, [r3, #2]
  407202:	4618      	mov	r0, r3
  407204:	2101      	movs	r1, #1
  407206:	4b27      	ldr	r3, [pc, #156]	; (4072a4 <drv_led_set+0x1ec>)
  407208:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  40720a:	4b25      	ldr	r3, [pc, #148]	; (4072a0 <drv_led_set+0x1e8>)
  40720c:	785b      	ldrb	r3, [r3, #1]
  40720e:	4618      	mov	r0, r3
  407210:	2101      	movs	r1, #1
  407212:	4b24      	ldr	r3, [pc, #144]	; (4072a4 <drv_led_set+0x1ec>)
  407214:	4798      	blx	r3
			break;
  407216:	e000      	b.n	40721a <drv_led_set+0x162>
		default:
			break;
  407218:	bf00      	nop
	}
	
	if ((ledState == DRV_LED_FLASH) & (ledColor != DRV_LED_OFF))
  40721a:	79bb      	ldrb	r3, [r7, #6]
  40721c:	2b00      	cmp	r3, #0
  40721e:	bf14      	ite	ne
  407220:	2300      	movne	r3, #0
  407222:	2301      	moveq	r3, #1
  407224:	b2da      	uxtb	r2, r3
  407226:	79fb      	ldrb	r3, [r7, #7]
  407228:	2b07      	cmp	r3, #7
  40722a:	bf0c      	ite	eq
  40722c:	2300      	moveq	r3, #0
  40722e:	2301      	movne	r3, #1
  407230:	b2db      	uxtb	r3, r3
  407232:	4013      	ands	r3, r2
  407234:	b2db      	uxtb	r3, r3
  407236:	2b00      	cmp	r3, #0
  407238:	d011      	beq.n	40725e <drv_led_set+0x1a6>
	{
		if(LedTimer != NULL)
  40723a:	4b16      	ldr	r3, [pc, #88]	; (407294 <drv_led_set+0x1dc>)
  40723c:	681b      	ldr	r3, [r3, #0]
  40723e:	2b00      	cmp	r3, #0
  407240:	d023      	beq.n	40728a <drv_led_set+0x1d2>
		{
			xTimerReset(LedTimer, 0);	
  407242:	4b14      	ldr	r3, [pc, #80]	; (407294 <drv_led_set+0x1dc>)
  407244:	681c      	ldr	r4, [r3, #0]
  407246:	4b1a      	ldr	r3, [pc, #104]	; (4072b0 <drv_led_set+0x1f8>)
  407248:	4798      	blx	r3
  40724a:	4603      	mov	r3, r0
  40724c:	2200      	movs	r2, #0
  40724e:	9200      	str	r2, [sp, #0]
  407250:	4620      	mov	r0, r4
  407252:	2100      	movs	r1, #0
  407254:	461a      	mov	r2, r3
  407256:	2300      	movs	r3, #0
  407258:	4c10      	ldr	r4, [pc, #64]	; (40729c <drv_led_set+0x1e4>)
  40725a:	47a0      	blx	r4
  40725c:	e015      	b.n	40728a <drv_led_set+0x1d2>
		}
		
	}
	else
	{
		if(LedTimer != NULL)
  40725e:	4b0d      	ldr	r3, [pc, #52]	; (407294 <drv_led_set+0x1dc>)
  407260:	681b      	ldr	r3, [r3, #0]
  407262:	2b00      	cmp	r3, #0
  407264:	d011      	beq.n	40728a <drv_led_set+0x1d2>
		{				
			//stop the timer
			if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  407266:	4b0b      	ldr	r3, [pc, #44]	; (407294 <drv_led_set+0x1dc>)
  407268:	681b      	ldr	r3, [r3, #0]
  40726a:	4618      	mov	r0, r3
  40726c:	4b0a      	ldr	r3, [pc, #40]	; (407298 <drv_led_set+0x1e0>)
  40726e:	4798      	blx	r3
  407270:	4603      	mov	r3, r0
  407272:	2b00      	cmp	r3, #0
  407274:	d009      	beq.n	40728a <drv_led_set+0x1d2>
			{
				xTimerStop(LedTimer, 0);
  407276:	4b07      	ldr	r3, [pc, #28]	; (407294 <drv_led_set+0x1dc>)
  407278:	681b      	ldr	r3, [r3, #0]
  40727a:	2200      	movs	r2, #0
  40727c:	9200      	str	r2, [sp, #0]
  40727e:	4618      	mov	r0, r3
  407280:	2101      	movs	r1, #1
  407282:	2200      	movs	r2, #0
  407284:	2300      	movs	r3, #0
  407286:	4c05      	ldr	r4, [pc, #20]	; (40729c <drv_led_set+0x1e4>)
  407288:	47a0      	blx	r4
			}
		}
	}
	return result;
  40728a:	7bfb      	ldrb	r3, [r7, #15]
}
  40728c:	4618      	mov	r0, r3
  40728e:	3714      	adds	r7, #20
  407290:	46bd      	mov	sp, r7
  407292:	bd90      	pop	{r4, r7, pc}
  407294:	20008970 	.word	0x20008970
  407298:	0040a059 	.word	0x0040a059
  40729c:	00409b2d 	.word	0x00409b2d
  4072a0:	20008978 	.word	0x20008978
  4072a4:	0040546d 	.word	0x0040546d
  4072a8:	2000896c 	.word	0x2000896c
  4072ac:	20008974 	.word	0x20008974
  4072b0:	00409125 	.word	0x00409125

004072b4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4072b4:	b480      	push	{r7}
  4072b6:	b083      	sub	sp, #12
  4072b8:	af00      	add	r7, sp, #0
  4072ba:	4603      	mov	r3, r0
  4072bc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4072be:	4b08      	ldr	r3, [pc, #32]	; (4072e0 <NVIC_EnableIRQ+0x2c>)
  4072c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4072c4:	0952      	lsrs	r2, r2, #5
  4072c6:	79f9      	ldrb	r1, [r7, #7]
  4072c8:	f001 011f 	and.w	r1, r1, #31
  4072cc:	2001      	movs	r0, #1
  4072ce:	fa00 f101 	lsl.w	r1, r0, r1
  4072d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4072d6:	370c      	adds	r7, #12
  4072d8:	46bd      	mov	sp, r7
  4072da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072de:	4770      	bx	lr
  4072e0:	e000e100 	.word	0xe000e100

004072e4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4072e4:	b480      	push	{r7}
  4072e6:	b083      	sub	sp, #12
  4072e8:	af00      	add	r7, sp, #0
  4072ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4072ec:	687b      	ldr	r3, [r7, #4]
  4072ee:	2b07      	cmp	r3, #7
  4072f0:	d825      	bhi.n	40733e <osc_get_rate+0x5a>
  4072f2:	a201      	add	r2, pc, #4	; (adr r2, 4072f8 <osc_get_rate+0x14>)
  4072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4072f8:	00407319 	.word	0x00407319
  4072fc:	0040731f 	.word	0x0040731f
  407300:	00407325 	.word	0x00407325
  407304:	0040732b 	.word	0x0040732b
  407308:	0040732f 	.word	0x0040732f
  40730c:	00407333 	.word	0x00407333
  407310:	00407337 	.word	0x00407337
  407314:	0040733b 	.word	0x0040733b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407318:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40731c:	e010      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40731e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407322:	e00d      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407328:	e00a      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40732a:	4b08      	ldr	r3, [pc, #32]	; (40734c <osc_get_rate+0x68>)
  40732c:	e008      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40732e:	4b08      	ldr	r3, [pc, #32]	; (407350 <osc_get_rate+0x6c>)
  407330:	e006      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  407332:	4b08      	ldr	r3, [pc, #32]	; (407354 <osc_get_rate+0x70>)
  407334:	e004      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407336:	4b07      	ldr	r3, [pc, #28]	; (407354 <osc_get_rate+0x70>)
  407338:	e002      	b.n	407340 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40733a:	4b06      	ldr	r3, [pc, #24]	; (407354 <osc_get_rate+0x70>)
  40733c:	e000      	b.n	407340 <osc_get_rate+0x5c>
	}

	return 0;
  40733e:	2300      	movs	r3, #0
}
  407340:	4618      	mov	r0, r3
  407342:	370c      	adds	r7, #12
  407344:	46bd      	mov	sp, r7
  407346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40734a:	4770      	bx	lr
  40734c:	003d0900 	.word	0x003d0900
  407350:	007a1200 	.word	0x007a1200
  407354:	00b71b00 	.word	0x00b71b00

00407358 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407358:	b580      	push	{r7, lr}
  40735a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40735c:	2006      	movs	r0, #6
  40735e:	4b04      	ldr	r3, [pc, #16]	; (407370 <sysclk_get_main_hz+0x18>)
  407360:	4798      	blx	r3
  407362:	4602      	mov	r2, r0
  407364:	4613      	mov	r3, r2
  407366:	011b      	lsls	r3, r3, #4
  407368:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40736a:	4618      	mov	r0, r3
  40736c:	bd80      	pop	{r7, pc}
  40736e:	bf00      	nop
  407370:	004072e5 	.word	0x004072e5

00407374 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  407374:	b580      	push	{r7, lr}
  407376:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407378:	4b02      	ldr	r3, [pc, #8]	; (407384 <sysclk_get_peripheral_hz+0x10>)
  40737a:	4798      	blx	r3
  40737c:	4603      	mov	r3, r0
  40737e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  407380:	4618      	mov	r0, r3
  407382:	bd80      	pop	{r7, pc}
  407384:	00407359 	.word	0x00407359

00407388 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  407388:	b580      	push	{r7, lr}
  40738a:	b082      	sub	sp, #8
  40738c:	af00      	add	r7, sp, #0
  40738e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  407390:	6878      	ldr	r0, [r7, #4]
  407392:	4b02      	ldr	r3, [pc, #8]	; (40739c <sysclk_enable_peripheral_clock+0x14>)
  407394:	4798      	blx	r3
}
  407396:	3708      	adds	r7, #8
  407398:	46bd      	mov	sp, r7
  40739a:	bd80      	pop	{r7, pc}
  40739c:	0040b4a1 	.word	0x0040b4a1

004073a0 <sysclk_disable_peripheral_clock>:
 * \brief Disable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
  4073a0:	b580      	push	{r7, lr}
  4073a2:	b082      	sub	sp, #8
  4073a4:	af00      	add	r7, sp, #0
  4073a6:	6078      	str	r0, [r7, #4]
	pmc_disable_periph_clk(ul_id);
  4073a8:	6878      	ldr	r0, [r7, #4]
  4073aa:	4b02      	ldr	r3, [pc, #8]	; (4073b4 <sysclk_disable_peripheral_clock+0x14>)
  4073ac:	4798      	blx	r3
}
  4073ae:	3708      	adds	r7, #8
  4073b0:	46bd      	mov	sp, r7
  4073b2:	bd80      	pop	{r7, pc}
  4073b4:	0040b525 	.word	0x0040b525

004073b8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4073b8:	b580      	push	{r7, lr}
  4073ba:	b08c      	sub	sp, #48	; 0x30
  4073bc:	af00      	add	r7, sp, #0
  4073be:	6078      	str	r0, [r7, #4]
  4073c0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = 120000000;//sysclk_get_peripheral_hz();
  4073c2:	4b25      	ldr	r3, [pc, #148]	; (407458 <usart_serial_init+0xa0>)
  4073c4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4073c6:	683b      	ldr	r3, [r7, #0]
  4073c8:	681b      	ldr	r3, [r3, #0]
  4073ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4073cc:	683b      	ldr	r3, [r7, #0]
  4073ce:	689b      	ldr	r3, [r3, #8]
  4073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4073d2:	683b      	ldr	r3, [r7, #0]
  4073d4:	681b      	ldr	r3, [r3, #0]
  4073d6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4073d8:	683b      	ldr	r3, [r7, #0]
  4073da:	685b      	ldr	r3, [r3, #4]
  4073dc:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4073de:	683b      	ldr	r3, [r7, #0]
  4073e0:	689b      	ldr	r3, [r3, #8]
  4073e2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4073e4:	683b      	ldr	r3, [r7, #0]
  4073e6:	7b1b      	ldrb	r3, [r3, #12]
  4073e8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4073ea:	2300      	movs	r3, #0
  4073ec:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4073ee:	687a      	ldr	r2, [r7, #4]
  4073f0:	4b1a      	ldr	r3, [pc, #104]	; (40745c <usart_serial_init+0xa4>)
  4073f2:	429a      	cmp	r2, r3
  4073f4:	d108      	bne.n	407408 <usart_serial_init+0x50>
		sysclk_enable_peripheral_clock(ID_UART0);
  4073f6:	2008      	movs	r0, #8
  4073f8:	4b19      	ldr	r3, [pc, #100]	; (407460 <usart_serial_init+0xa8>)
  4073fa:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4073fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
  407400:	6878      	ldr	r0, [r7, #4]
  407402:	4619      	mov	r1, r3
  407404:	4b17      	ldr	r3, [pc, #92]	; (407464 <usart_serial_init+0xac>)
  407406:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  407408:	687a      	ldr	r2, [r7, #4]
  40740a:	4b17      	ldr	r3, [pc, #92]	; (407468 <usart_serial_init+0xb0>)
  40740c:	429a      	cmp	r2, r3
  40740e:	d108      	bne.n	407422 <usart_serial_init+0x6a>
		sysclk_enable_peripheral_clock(ID_UART1);
  407410:	2009      	movs	r0, #9
  407412:	4b13      	ldr	r3, [pc, #76]	; (407460 <usart_serial_init+0xa8>)
  407414:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  407416:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40741a:	6878      	ldr	r0, [r7, #4]
  40741c:	4619      	mov	r1, r3
  40741e:	4b11      	ldr	r3, [pc, #68]	; (407464 <usart_serial_init+0xac>)
  407420:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407422:	687a      	ldr	r2, [r7, #4]
  407424:	4b11      	ldr	r3, [pc, #68]	; (40746c <usart_serial_init+0xb4>)
  407426:	429a      	cmp	r2, r3
  407428:	d112      	bne.n	407450 <usart_serial_init+0x98>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40742a:	200e      	movs	r0, #14
  40742c:	4b0c      	ldr	r3, [pc, #48]	; (407460 <usart_serial_init+0xa8>)
  40742e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  407430:	4b0f      	ldr	r3, [pc, #60]	; (407470 <usart_serial_init+0xb8>)
  407432:	4798      	blx	r3
  407434:	4603      	mov	r3, r0
  407436:	f107 020c 	add.w	r2, r7, #12
  40743a:	6878      	ldr	r0, [r7, #4]
  40743c:	4611      	mov	r1, r2
  40743e:	461a      	mov	r2, r3
  407440:	4b0c      	ldr	r3, [pc, #48]	; (407474 <usart_serial_init+0xbc>)
  407442:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  407444:	6878      	ldr	r0, [r7, #4]
  407446:	4b0c      	ldr	r3, [pc, #48]	; (407478 <usart_serial_init+0xc0>)
  407448:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40744a:	6878      	ldr	r0, [r7, #4]
  40744c:	4b0b      	ldr	r3, [pc, #44]	; (40747c <usart_serial_init+0xc4>)
  40744e:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  407450:	3730      	adds	r7, #48	; 0x30
  407452:	46bd      	mov	sp, r7
  407454:	bd80      	pop	{r7, pc}
  407456:	bf00      	nop
  407458:	07270e00 	.word	0x07270e00
  40745c:	400e0600 	.word	0x400e0600
  407460:	00407389 	.word	0x00407389
  407464:	0040a579 	.word	0x0040a579
  407468:	400e0800 	.word	0x400e0800
  40746c:	40024000 	.word	0x40024000
  407470:	00407375 	.word	0x00407375
  407474:	00406835 	.word	0x00406835
  407478:	004068b9 	.word	0x004068b9
  40747c:	004068e9 	.word	0x004068e9

00407480 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  407480:	b580      	push	{r7, lr}
  407482:	b082      	sub	sp, #8
  407484:	af00      	add	r7, sp, #0
  407486:	6078      	str	r0, [r7, #4]
  407488:	460b      	mov	r3, r1
  40748a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40748c:	687a      	ldr	r2, [r7, #4]
  40748e:	4b18      	ldr	r3, [pc, #96]	; (4074f0 <usart_serial_putchar+0x70>)
  407490:	429a      	cmp	r2, r3
  407492:	d10a      	bne.n	4074aa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  407494:	bf00      	nop
  407496:	78fb      	ldrb	r3, [r7, #3]
  407498:	6878      	ldr	r0, [r7, #4]
  40749a:	4619      	mov	r1, r3
  40749c:	4b15      	ldr	r3, [pc, #84]	; (4074f4 <usart_serial_putchar+0x74>)
  40749e:	4798      	blx	r3
  4074a0:	4603      	mov	r3, r0
  4074a2:	2b00      	cmp	r3, #0
  4074a4:	d1f7      	bne.n	407496 <usart_serial_putchar+0x16>
		return 1;
  4074a6:	2301      	movs	r3, #1
  4074a8:	e01e      	b.n	4074e8 <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4074aa:	687a      	ldr	r2, [r7, #4]
  4074ac:	4b12      	ldr	r3, [pc, #72]	; (4074f8 <usart_serial_putchar+0x78>)
  4074ae:	429a      	cmp	r2, r3
  4074b0:	d10a      	bne.n	4074c8 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4074b2:	bf00      	nop
  4074b4:	78fb      	ldrb	r3, [r7, #3]
  4074b6:	6878      	ldr	r0, [r7, #4]
  4074b8:	4619      	mov	r1, r3
  4074ba:	4b0e      	ldr	r3, [pc, #56]	; (4074f4 <usart_serial_putchar+0x74>)
  4074bc:	4798      	blx	r3
  4074be:	4603      	mov	r3, r0
  4074c0:	2b00      	cmp	r3, #0
  4074c2:	d1f7      	bne.n	4074b4 <usart_serial_putchar+0x34>
		return 1;
  4074c4:	2301      	movs	r3, #1
  4074c6:	e00f      	b.n	4074e8 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4074c8:	687a      	ldr	r2, [r7, #4]
  4074ca:	4b0c      	ldr	r3, [pc, #48]	; (4074fc <usart_serial_putchar+0x7c>)
  4074cc:	429a      	cmp	r2, r3
  4074ce:	d10a      	bne.n	4074e6 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  4074d0:	bf00      	nop
  4074d2:	78fb      	ldrb	r3, [r7, #3]
  4074d4:	6878      	ldr	r0, [r7, #4]
  4074d6:	4619      	mov	r1, r3
  4074d8:	4b09      	ldr	r3, [pc, #36]	; (407500 <usart_serial_putchar+0x80>)
  4074da:	4798      	blx	r3
  4074dc:	4603      	mov	r3, r0
  4074de:	2b00      	cmp	r3, #0
  4074e0:	d1f7      	bne.n	4074d2 <usart_serial_putchar+0x52>
		return 1;
  4074e2:	2301      	movs	r3, #1
  4074e4:	e000      	b.n	4074e8 <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4074e6:	2300      	movs	r3, #0
}
  4074e8:	4618      	mov	r0, r3
  4074ea:	3708      	adds	r7, #8
  4074ec:	46bd      	mov	sp, r7
  4074ee:	bd80      	pop	{r7, pc}
  4074f0:	400e0600 	.word	0x400e0600
  4074f4:	0040a629 	.word	0x0040a629
  4074f8:	400e0800 	.word	0x400e0800
  4074fc:	40024000 	.word	0x40024000
  407500:	004069a5 	.word	0x004069a5

00407504 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  407504:	b580      	push	{r7, lr}
  407506:	b084      	sub	sp, #16
  407508:	af00      	add	r7, sp, #0
  40750a:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40750c:	2300      	movs	r3, #0
  40750e:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  407510:	687b      	ldr	r3, [r7, #4]
  407512:	681a      	ldr	r2, [r3, #0]
  407514:	4b57      	ldr	r3, [pc, #348]	; (407674 <drv_uart_init+0x170>)
  407516:	429a      	cmp	r2, r3
  407518:	d103      	bne.n	407522 <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  40751a:	687b      	ldr	r3, [r7, #4]
  40751c:	2200      	movs	r2, #0
  40751e:	615a      	str	r2, [r3, #20]
  407520:	e00a      	b.n	407538 <drv_uart_init+0x34>
	}
	else if(uartConfig->p_usart == UART1)
  407522:	687b      	ldr	r3, [r7, #4]
  407524:	681a      	ldr	r2, [r3, #0]
  407526:	4b54      	ldr	r3, [pc, #336]	; (407678 <drv_uart_init+0x174>)
  407528:	429a      	cmp	r2, r3
  40752a:	d103      	bne.n	407534 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  40752c:	687b      	ldr	r3, [r7, #4]
  40752e:	2201      	movs	r2, #1
  407530:	615a      	str	r2, [r3, #20]
  407532:	e001      	b.n	407538 <drv_uart_init+0x34>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  407534:	2301      	movs	r3, #1
  407536:	e173      	b.n	407820 <drv_uart_init+0x31c>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 2)
  407538:	687b      	ldr	r3, [r7, #4]
  40753a:	695b      	ldr	r3, [r3, #20]
  40753c:	2b00      	cmp	r3, #0
  40753e:	db03      	blt.n	407548 <drv_uart_init+0x44>
  407540:	687b      	ldr	r3, [r7, #4]
  407542:	695b      	ldr	r3, [r3, #20]
  407544:	2b02      	cmp	r3, #2
  407546:	dd01      	ble.n	40754c <drv_uart_init+0x48>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  407548:	2301      	movs	r3, #1
  40754a:	e169      	b.n	407820 <drv_uart_init+0x31c>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40754c:	687b      	ldr	r3, [r7, #4]
  40754e:	695a      	ldr	r2, [r3, #20]
  407550:	494a      	ldr	r1, [pc, #296]	; (40767c <drv_uart_init+0x178>)
  407552:	4613      	mov	r3, r2
  407554:	019b      	lsls	r3, r3, #6
  407556:	4413      	add	r3, r2
  407558:	015b      	lsls	r3, r3, #5
  40755a:	440b      	add	r3, r1
  40755c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407560:	799b      	ldrb	r3, [r3, #6]
  407562:	b2db      	uxtb	r3, r3
  407564:	2b01      	cmp	r3, #1
  407566:	d101      	bne.n	40756c <drv_uart_init+0x68>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  407568:	2301      	movs	r3, #1
  40756a:	e159      	b.n	407820 <drv_uart_init+0x31c>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  40756c:	687b      	ldr	r3, [r7, #4]
  40756e:	681a      	ldr	r2, [r3, #0]
  407570:	687b      	ldr	r3, [r7, #4]
  407572:	3304      	adds	r3, #4
  407574:	4610      	mov	r0, r2
  407576:	4619      	mov	r1, r3
  407578:	4b41      	ldr	r3, [pc, #260]	; (407680 <drv_uart_init+0x17c>)
  40757a:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  40757c:	687b      	ldr	r3, [r7, #4]
  40757e:	681b      	ldr	r3, [r3, #0]
  407580:	4618      	mov	r0, r3
  407582:	f04f 31ff 	mov.w	r1, #4294967295
  407586:	4b3f      	ldr	r3, [pc, #252]	; (407684 <drv_uart_init+0x180>)
  407588:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  40758a:	687b      	ldr	r3, [r7, #4]
  40758c:	681a      	ldr	r2, [r3, #0]
  40758e:	4b39      	ldr	r3, [pc, #228]	; (407674 <drv_uart_init+0x170>)
  407590:	429a      	cmp	r2, r3
  407592:	d11e      	bne.n	4075d2 <drv_uart_init+0xce>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  407594:	200b      	movs	r0, #11
  407596:	4b3c      	ldr	r3, [pc, #240]	; (407688 <drv_uart_init+0x184>)
  407598:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  40759a:	4b3c      	ldr	r3, [pc, #240]	; (40768c <drv_uart_init+0x188>)
  40759c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4075a0:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4075a2:	4b3a      	ldr	r3, [pc, #232]	; (40768c <drv_uart_init+0x188>)
  4075a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4075a8:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4075aa:	4b38      	ldr	r3, [pc, #224]	; (40768c <drv_uart_init+0x188>)
  4075ac:	4a37      	ldr	r2, [pc, #220]	; (40768c <drv_uart_init+0x188>)
  4075ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4075b0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4075b4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4075b6:	4b35      	ldr	r3, [pc, #212]	; (40768c <drv_uart_init+0x188>)
  4075b8:	4a34      	ldr	r2, [pc, #208]	; (40768c <drv_uart_init+0x188>)
  4075ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4075bc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4075c0:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);	
  4075c2:	4b32      	ldr	r3, [pc, #200]	; (40768c <drv_uart_init+0x188>)
  4075c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4075c8:	605a      	str	r2, [r3, #4]
		
		//PIOA->PIO_PUDR   =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
		//PIOA->PIO_CODR   =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
		//PIOA->PIO_OER    =  (PIO_PA10A_UTXD0);
		//PIOA->PIO_PER    =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
		NVIC_EnableIRQ(UART0_IRQn);
  4075ca:	2008      	movs	r0, #8
  4075cc:	4b30      	ldr	r3, [pc, #192]	; (407690 <drv_uart_init+0x18c>)
  4075ce:	4798      	blx	r3
  4075d0:	e064      	b.n	40769c <drv_uart_init+0x198>
	}
	else if(uartConfig->p_usart == UART1)
  4075d2:	687b      	ldr	r3, [r7, #4]
  4075d4:	681a      	ldr	r2, [r3, #0]
  4075d6:	4b28      	ldr	r3, [pc, #160]	; (407678 <drv_uart_init+0x174>)
  4075d8:	429a      	cmp	r2, r3
  4075da:	d11b      	bne.n	407614 <drv_uart_init+0x110>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  4075dc:	200c      	movs	r0, #12
  4075de:	4b2a      	ldr	r3, [pc, #168]	; (407688 <drv_uart_init+0x184>)
  4075e0:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  4075e2:	4b2c      	ldr	r3, [pc, #176]	; (407694 <drv_uart_init+0x190>)
  4075e4:	220c      	movs	r2, #12
  4075e6:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  4075e8:	4b2a      	ldr	r3, [pc, #168]	; (407694 <drv_uart_init+0x190>)
  4075ea:	220c      	movs	r2, #12
  4075ec:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  4075ee:	4b29      	ldr	r3, [pc, #164]	; (407694 <drv_uart_init+0x190>)
  4075f0:	4a28      	ldr	r2, [pc, #160]	; (407694 <drv_uart_init+0x190>)
  4075f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4075f4:	f022 020c 	bic.w	r2, r2, #12
  4075f8:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  4075fa:	4b26      	ldr	r3, [pc, #152]	; (407694 <drv_uart_init+0x190>)
  4075fc:	4a25      	ldr	r2, [pc, #148]	; (407694 <drv_uart_init+0x190>)
  4075fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
  407600:	f022 020c 	bic.w	r2, r2, #12
  407604:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407606:	4b23      	ldr	r3, [pc, #140]	; (407694 <drv_uart_init+0x190>)
  407608:	220c      	movs	r2, #12
  40760a:	605a      	str	r2, [r3, #4]
		//PIOB->PIO_PUDR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
		//PIOB->PIO_CODR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
		//PIOB->PIO_OER    =  (PIO_PB3A_UTXD1);
		//PIOB->PIO_PER    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
			
		NVIC_EnableIRQ(UART1_IRQn);
  40760c:	2009      	movs	r0, #9
  40760e:	4b20      	ldr	r3, [pc, #128]	; (407690 <drv_uart_init+0x18c>)
  407610:	4798      	blx	r3
  407612:	e043      	b.n	40769c <drv_uart_init+0x198>
	}
	else if(uartConfig->p_usart == USART0)
  407614:	687b      	ldr	r3, [r7, #4]
  407616:	681a      	ldr	r2, [r3, #0]
  407618:	4b1f      	ldr	r3, [pc, #124]	; (407698 <drv_uart_init+0x194>)
  40761a:	429a      	cmp	r2, r3
  40761c:	d127      	bne.n	40766e <drv_uart_init+0x16a>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40761e:	200b      	movs	r0, #11
  407620:	4b19      	ldr	r3, [pc, #100]	; (407688 <drv_uart_init+0x184>)
  407622:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407624:	4b19      	ldr	r3, [pc, #100]	; (40768c <drv_uart_init+0x188>)
  407626:	2260      	movs	r2, #96	; 0x60
  407628:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40762a:	4b18      	ldr	r3, [pc, #96]	; (40768c <drv_uart_init+0x188>)
  40762c:	2260      	movs	r2, #96	; 0x60
  40762e:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  407630:	4b16      	ldr	r3, [pc, #88]	; (40768c <drv_uart_init+0x188>)
  407632:	4a16      	ldr	r2, [pc, #88]	; (40768c <drv_uart_init+0x188>)
  407634:	6f12      	ldr	r2, [r2, #112]	; 0x70
  407636:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40763a:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40763c:	4b13      	ldr	r3, [pc, #76]	; (40768c <drv_uart_init+0x188>)
  40763e:	4a13      	ldr	r2, [pc, #76]	; (40768c <drv_uart_init+0x188>)
  407640:	6f52      	ldr	r2, [r2, #116]	; 0x74
  407642:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  407646:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407648:	4b10      	ldr	r3, [pc, #64]	; (40768c <drv_uart_init+0x188>)
  40764a:	2260      	movs	r2, #96	; 0x60
  40764c:	605a      	str	r2, [r3, #4]
		PIOA->PIO_PUDR   =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40764e:	4b0f      	ldr	r3, [pc, #60]	; (40768c <drv_uart_init+0x188>)
  407650:	2260      	movs	r2, #96	; 0x60
  407652:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407654:	4b0d      	ldr	r3, [pc, #52]	; (40768c <drv_uart_init+0x188>)
  407656:	2260      	movs	r2, #96	; 0x60
  407658:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA6A_TXD0);
  40765a:	4b0c      	ldr	r3, [pc, #48]	; (40768c <drv_uart_init+0x188>)
  40765c:	2240      	movs	r2, #64	; 0x40
  40765e:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);			
  407660:	4b0a      	ldr	r3, [pc, #40]	; (40768c <drv_uart_init+0x188>)
  407662:	2260      	movs	r2, #96	; 0x60
  407664:	601a      	str	r2, [r3, #0]
		/* configure USART0 enable Pin (PA2) Peripheral-B */

		NVIC_EnableIRQ(USART0_IRQn);
  407666:	200e      	movs	r0, #14
  407668:	4b09      	ldr	r3, [pc, #36]	; (407690 <drv_uart_init+0x18c>)
  40766a:	4798      	blx	r3
  40766c:	e016      	b.n	40769c <drv_uart_init+0x198>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40766e:	2301      	movs	r3, #1
  407670:	e0d6      	b.n	407820 <drv_uart_init+0x31c>
  407672:	bf00      	nop
  407674:	400e0600 	.word	0x400e0600
  407678:	400e0800 	.word	0x400e0800
  40767c:	2000897c 	.word	0x2000897c
  407680:	004073b9 	.word	0x004073b9
  407684:	00406935 	.word	0x00406935
  407688:	00407389 	.word	0x00407389
  40768c:	400e0e00 	.word	0x400e0e00
  407690:	004072b5 	.word	0x004072b5
  407694:	400e1000 	.word	0x400e1000
  407698:	40024000 	.word	0x40024000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  40769c:	687b      	ldr	r3, [r7, #4]
  40769e:	695a      	ldr	r2, [r3, #20]
  4076a0:	4961      	ldr	r1, [pc, #388]	; (407828 <drv_uart_init+0x324>)
  4076a2:	4613      	mov	r3, r2
  4076a4:	019b      	lsls	r3, r3, #6
  4076a6:	4413      	add	r3, r2
  4076a8:	015b      	lsls	r3, r3, #5
  4076aa:	440b      	add	r3, r1
  4076ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4076b0:	2201      	movs	r2, #1
  4076b2:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  4076b4:	687b      	ldr	r3, [r7, #4]
  4076b6:	681b      	ldr	r3, [r3, #0]
  4076b8:	4618      	mov	r0, r3
  4076ba:	f240 2101 	movw	r1, #513	; 0x201
  4076be:	4b5b      	ldr	r3, [pc, #364]	; (40782c <drv_uart_init+0x328>)
  4076c0:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  4076c2:	687b      	ldr	r3, [r7, #4]
  4076c4:	695a      	ldr	r2, [r3, #20]
  4076c6:	4613      	mov	r3, r2
  4076c8:	019b      	lsls	r3, r3, #6
  4076ca:	4413      	add	r3, r2
  4076cc:	015b      	lsls	r3, r3, #5
  4076ce:	4a56      	ldr	r2, [pc, #344]	; (407828 <drv_uart_init+0x324>)
  4076d0:	4413      	add	r3, r2
  4076d2:	4618      	mov	r0, r3
  4076d4:	2100      	movs	r1, #0
  4076d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4076da:	4b55      	ldr	r3, [pc, #340]	; (407830 <drv_uart_init+0x32c>)
  4076dc:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  4076de:	687b      	ldr	r3, [r7, #4]
  4076e0:	695a      	ldr	r2, [r3, #20]
  4076e2:	4951      	ldr	r1, [pc, #324]	; (407828 <drv_uart_init+0x324>)
  4076e4:	4613      	mov	r3, r2
  4076e6:	019b      	lsls	r3, r3, #6
  4076e8:	4413      	add	r3, r2
  4076ea:	015b      	lsls	r3, r3, #5
  4076ec:	440b      	add	r3, r1
  4076ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4076f2:	2200      	movs	r2, #0
  4076f4:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  4076f6:	687b      	ldr	r3, [r7, #4]
  4076f8:	695a      	ldr	r2, [r3, #20]
  4076fa:	494b      	ldr	r1, [pc, #300]	; (407828 <drv_uart_init+0x324>)
  4076fc:	4613      	mov	r3, r2
  4076fe:	019b      	lsls	r3, r3, #6
  407700:	4413      	add	r3, r2
  407702:	015b      	lsls	r3, r3, #5
  407704:	440b      	add	r3, r1
  407706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40770a:	2200      	movs	r2, #0
  40770c:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  40770e:	687b      	ldr	r3, [r7, #4]
  407710:	695a      	ldr	r2, [r3, #20]
  407712:	4945      	ldr	r1, [pc, #276]	; (407828 <drv_uart_init+0x324>)
  407714:	4613      	mov	r3, r2
  407716:	019b      	lsls	r3, r3, #6
  407718:	4413      	add	r3, r2
  40771a:	015b      	lsls	r3, r3, #5
  40771c:	440b      	add	r3, r1
  40771e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
  407722:	2200      	movs	r2, #0
  407724:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  407726:	687b      	ldr	r3, [r7, #4]
  407728:	695a      	ldr	r2, [r3, #20]
  40772a:	493f      	ldr	r1, [pc, #252]	; (407828 <drv_uart_init+0x324>)
  40772c:	4613      	mov	r3, r2
  40772e:	019b      	lsls	r3, r3, #6
  407730:	4413      	add	r3, r2
  407732:	015b      	lsls	r3, r3, #5
  407734:	440b      	add	r3, r1
  407736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40773a:	2200      	movs	r2, #0
  40773c:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  40773e:	687b      	ldr	r3, [r7, #4]
  407740:	695a      	ldr	r2, [r3, #20]
  407742:	4939      	ldr	r1, [pc, #228]	; (407828 <drv_uart_init+0x324>)
  407744:	4613      	mov	r3, r2
  407746:	019b      	lsls	r3, r3, #6
  407748:	4413      	add	r3, r2
  40774a:	015b      	lsls	r3, r3, #5
  40774c:	440b      	add	r3, r1
  40774e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
  407752:	2200      	movs	r2, #0
  407754:	705a      	strb	r2, [r3, #1]
	uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  407756:	687b      	ldr	r3, [r7, #4]
  407758:	695a      	ldr	r2, [r3, #20]
  40775a:	4933      	ldr	r1, [pc, #204]	; (407828 <drv_uart_init+0x324>)
  40775c:	4613      	mov	r3, r2
  40775e:	019b      	lsls	r3, r3, #6
  407760:	4413      	add	r3, r2
  407762:	015b      	lsls	r3, r3, #5
  407764:	440b      	add	r3, r1
  407766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40776a:	2200      	movs	r2, #0
  40776c:	809a      	strh	r2, [r3, #4]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40776e:	687b      	ldr	r3, [r7, #4]
  407770:	695a      	ldr	r2, [r3, #20]
  407772:	4613      	mov	r3, r2
  407774:	019b      	lsls	r3, r3, #6
  407776:	4413      	add	r3, r2
  407778:	015b      	lsls	r3, r3, #5
  40777a:	f503 6282 	add.w	r2, r3, #1040	; 0x410
  40777e:	4b2a      	ldr	r3, [pc, #168]	; (407828 <drv_uart_init+0x324>)
  407780:	4413      	add	r3, r2
  407782:	4618      	mov	r0, r3
  407784:	2100      	movs	r1, #0
  407786:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40778a:	4b29      	ldr	r3, [pc, #164]	; (407830 <drv_uart_init+0x32c>)
  40778c:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  40778e:	687b      	ldr	r3, [r7, #4]
  407790:	695a      	ldr	r2, [r3, #20]
  407792:	4925      	ldr	r1, [pc, #148]	; (407828 <drv_uart_init+0x324>)
  407794:	4613      	mov	r3, r2
  407796:	019b      	lsls	r3, r3, #6
  407798:	4413      	add	r3, r2
  40779a:	015b      	lsls	r3, r3, #5
  40779c:	440b      	add	r3, r1
  40779e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  4077a2:	2200      	movs	r2, #0
  4077a4:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  4077a6:	687b      	ldr	r3, [r7, #4]
  4077a8:	695a      	ldr	r2, [r3, #20]
  4077aa:	491f      	ldr	r1, [pc, #124]	; (407828 <drv_uart_init+0x324>)
  4077ac:	4613      	mov	r3, r2
  4077ae:	019b      	lsls	r3, r3, #6
  4077b0:	4413      	add	r3, r2
  4077b2:	015b      	lsls	r3, r3, #5
  4077b4:	440b      	add	r3, r1
  4077b6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  4077ba:	2200      	movs	r2, #0
  4077bc:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  4077be:	687b      	ldr	r3, [r7, #4]
  4077c0:	695a      	ldr	r2, [r3, #20]
  4077c2:	4919      	ldr	r1, [pc, #100]	; (407828 <drv_uart_init+0x324>)
  4077c4:	4613      	mov	r3, r2
  4077c6:	019b      	lsls	r3, r3, #6
  4077c8:	4413      	add	r3, r2
  4077ca:	015b      	lsls	r3, r3, #5
  4077cc:	440b      	add	r3, r1
  4077ce:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  4077d2:	2200      	movs	r2, #0
  4077d4:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  4077d6:	687b      	ldr	r3, [r7, #4]
  4077d8:	695a      	ldr	r2, [r3, #20]
  4077da:	4913      	ldr	r1, [pc, #76]	; (407828 <drv_uart_init+0x324>)
  4077dc:	4613      	mov	r3, r2
  4077de:	019b      	lsls	r3, r3, #6
  4077e0:	4413      	add	r3, r2
  4077e2:	015b      	lsls	r3, r3, #5
  4077e4:	440b      	add	r3, r1
  4077e6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  4077ea:	2200      	movs	r2, #0
  4077ec:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  4077ee:	687b      	ldr	r3, [r7, #4]
  4077f0:	695a      	ldr	r2, [r3, #20]
  4077f2:	490d      	ldr	r1, [pc, #52]	; (407828 <drv_uart_init+0x324>)
  4077f4:	4613      	mov	r3, r2
  4077f6:	019b      	lsls	r3, r3, #6
  4077f8:	4413      	add	r3, r2
  4077fa:	015b      	lsls	r3, r3, #5
  4077fc:	440b      	add	r3, r1
  4077fe:	f603 0318 	addw	r3, r3, #2072	; 0x818
  407802:	2200      	movs	r2, #0
  407804:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  407806:	687b      	ldr	r3, [r7, #4]
  407808:	695a      	ldr	r2, [r3, #20]
  40780a:	4907      	ldr	r1, [pc, #28]	; (407828 <drv_uart_init+0x324>)
  40780c:	4613      	mov	r3, r2
  40780e:	019b      	lsls	r3, r3, #6
  407810:	4413      	add	r3, r2
  407812:	015b      	lsls	r3, r3, #5
  407814:	440b      	add	r3, r1
  407816:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  40781a:	2200      	movs	r2, #0
  40781c:	809a      	strh	r2, [r3, #4]
	
	return status; 
  40781e:	7bfb      	ldrb	r3, [r7, #15]
}
  407820:	4618      	mov	r0, r3
  407822:	3710      	adds	r7, #16
  407824:	46bd      	mov	sp, r7
  407826:	bd80      	pop	{r7, pc}
  407828:	2000897c 	.word	0x2000897c
  40782c:	00406919 	.word	0x00406919
  407830:	0040c82d 	.word	0x0040c82d

00407834 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  407834:	b580      	push	{r7, lr}
  407836:	b086      	sub	sp, #24
  407838:	af00      	add	r7, sp, #0
  40783a:	6078      	str	r0, [r7, #4]
  40783c:	460b      	mov	r3, r1
  40783e:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  407840:	2300      	movs	r3, #0
  407842:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  407844:	687b      	ldr	r3, [r7, #4]
  407846:	681b      	ldr	r3, [r3, #0]
  407848:	4618      	mov	r0, r3
  40784a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40784e:	4b30      	ldr	r3, [pc, #192]	; (407910 <drv_uart_putChar+0xdc>)
  407850:	4798      	blx	r3
	uint32_t val = 0;
  407852:	2300      	movs	r3, #0
  407854:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  407856:	687b      	ldr	r3, [r7, #4]
  407858:	695a      	ldr	r2, [r3, #20]
  40785a:	4613      	mov	r3, r2
  40785c:	019b      	lsls	r3, r3, #6
  40785e:	4413      	add	r3, r2
  407860:	015b      	lsls	r3, r3, #5
  407862:	4a2c      	ldr	r2, [pc, #176]	; (407914 <drv_uart_putChar+0xe0>)
  407864:	4413      	add	r3, r2
  407866:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  407868:	68fb      	ldr	r3, [r7, #12]
  40786a:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  40786e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407872:	d10b      	bne.n	40788c <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  407874:	68fb      	ldr	r3, [r7, #12]
  407876:	2201      	movs	r2, #1
  407878:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  40787c:	68fb      	ldr	r3, [r7, #12]
  40787e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
  407882:	1c5a      	adds	r2, r3, #1
  407884:	68fb      	ldr	r3, [r7, #12]
  407886:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  40788a:	e01d      	b.n	4078c8 <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  40788c:	68fb      	ldr	r3, [r7, #12]
  40788e:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407896:	d217      	bcs.n	4078c8 <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  407898:	68fb      	ldr	r3, [r7, #12]
  40789a:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  40789e:	68fa      	ldr	r2, [r7, #12]
  4078a0:	4413      	add	r3, r2
  4078a2:	78fa      	ldrb	r2, [r7, #3]
  4078a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  4078a8:	68fb      	ldr	r3, [r7, #12]
  4078aa:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  4078ae:	3301      	adds	r3, #1
  4078b0:	b29a      	uxth	r2, r3
  4078b2:	68fb      	ldr	r3, [r7, #12]
  4078b4:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  4078b8:	68fb      	ldr	r3, [r7, #12]
  4078ba:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  4078be:	3301      	adds	r3, #1
  4078c0:	b29a      	uxth	r2, r3
  4078c2:	68fb      	ldr	r3, [r7, #12]
  4078c4:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  4078c8:	68fb      	ldr	r3, [r7, #12]
  4078ca:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  4078ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4078d2:	d103      	bne.n	4078dc <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  4078d4:	68fb      	ldr	r3, [r7, #12]
  4078d6:	2201      	movs	r2, #1
  4078d8:	f883 2817 	strb.w	r2, [r3, #2071]	; 0x817
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  4078dc:	68fb      	ldr	r3, [r7, #12]
  4078de:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  4078e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4078e6:	d103      	bne.n	4078f0 <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  4078e8:	68fb      	ldr	r3, [r7, #12]
  4078ea:	2200      	movs	r2, #0
  4078ec:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  4078f0:	68fb      	ldr	r3, [r7, #12]
  4078f2:	2201      	movs	r2, #1
  4078f4:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  4078f8:	687b      	ldr	r3, [r7, #4]
  4078fa:	681b      	ldr	r3, [r3, #0]
  4078fc:	4618      	mov	r0, r3
  4078fe:	f44f 7100 	mov.w	r1, #512	; 0x200
  407902:	4b05      	ldr	r3, [pc, #20]	; (407918 <drv_uart_putChar+0xe4>)
  407904:	4798      	blx	r3
	return status;	
  407906:	7dfb      	ldrb	r3, [r7, #23]
}
  407908:	4618      	mov	r0, r3
  40790a:	3718      	adds	r7, #24
  40790c:	46bd      	mov	sp, r7
  40790e:	bd80      	pop	{r7, pc}
  407910:	00406935 	.word	0x00406935
  407914:	2000897c 	.word	0x2000897c
  407918:	00406919 	.word	0x00406919

0040791c <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  40791c:	b580      	push	{r7, lr}
  40791e:	b084      	sub	sp, #16
  407920:	af00      	add	r7, sp, #0
  407922:	6078      	str	r0, [r7, #4]
  407924:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  407926:	2300      	movs	r3, #0
  407928:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  40792a:	687b      	ldr	r3, [r7, #4]
  40792c:	695a      	ldr	r2, [r3, #20]
  40792e:	4917      	ldr	r1, [pc, #92]	; (40798c <drv_uart_getChar+0x70>)
  407930:	4613      	mov	r3, r2
  407932:	019b      	lsls	r3, r3, #6
  407934:	4413      	add	r3, r2
  407936:	015b      	lsls	r3, r3, #5
  407938:	440b      	add	r3, r1
  40793a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40793e:	79db      	ldrb	r3, [r3, #7]
  407940:	b2db      	uxtb	r3, r3
  407942:	2b01      	cmp	r3, #1
  407944:	d11a      	bne.n	40797c <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  407946:	687b      	ldr	r3, [r7, #4]
  407948:	681b      	ldr	r3, [r3, #0]
  40794a:	4618      	mov	r0, r3
  40794c:	2101      	movs	r1, #1
  40794e:	4b10      	ldr	r3, [pc, #64]	; (407990 <drv_uart_getChar+0x74>)
  407950:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  407952:	687b      	ldr	r3, [r7, #4]
  407954:	695a      	ldr	r2, [r3, #20]
  407956:	4613      	mov	r3, r2
  407958:	019b      	lsls	r3, r3, #6
  40795a:	4413      	add	r3, r2
  40795c:	015b      	lsls	r3, r3, #5
  40795e:	4a0b      	ldr	r2, [pc, #44]	; (40798c <drv_uart_getChar+0x70>)
  407960:	4413      	add	r3, r2
  407962:	4618      	mov	r0, r3
  407964:	6839      	ldr	r1, [r7, #0]
  407966:	4b0b      	ldr	r3, [pc, #44]	; (407994 <drv_uart_getChar+0x78>)
  407968:	4798      	blx	r3
  40796a:	4603      	mov	r3, r0
  40796c:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  40796e:	687b      	ldr	r3, [r7, #4]
  407970:	681b      	ldr	r3, [r3, #0]
  407972:	4618      	mov	r0, r3
  407974:	2101      	movs	r1, #1
  407976:	4b08      	ldr	r3, [pc, #32]	; (407998 <drv_uart_getChar+0x7c>)
  407978:	4798      	blx	r3
  40797a:	e001      	b.n	407980 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  40797c:	2302      	movs	r3, #2
  40797e:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  407980:	7bfb      	ldrb	r3, [r7, #15]
}
  407982:	4618      	mov	r0, r3
  407984:	3710      	adds	r7, #16
  407986:	46bd      	mov	sp, r7
  407988:	bd80      	pop	{r7, pc}
  40798a:	bf00      	nop
  40798c:	2000897c 	.word	0x2000897c
  407990:	00406935 	.word	0x00406935
  407994:	00407cb5 	.word	0x00407cb5
  407998:	00406919 	.word	0x00406919

0040799c <drv_uart_deInit>:
 * @brief puts the uart driver in a deinitialized state
 * @param uartConfig, the configuration structure for the uart, 
 * @return STATUS_PASS if successful,	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_deInit(drv_uart_config_t* uartConfig)
{
  40799c:	b580      	push	{r7, lr}
  40799e:	b084      	sub	sp, #16
  4079a0:	af00      	add	r7, sp, #0
  4079a2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  4079a4:	2300      	movs	r3, #0
  4079a6:	73fb      	strb	r3, [r7, #15]
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  4079a8:	687b      	ldr	r3, [r7, #4]
  4079aa:	681b      	ldr	r3, [r3, #0]
  4079ac:	4618      	mov	r0, r3
  4079ae:	f04f 31ff 	mov.w	r1, #4294967295
  4079b2:	4b34      	ldr	r3, [pc, #208]	; (407a84 <drv_uart_deInit+0xe8>)
  4079b4:	4798      	blx	r3
	uart_disable(uartConfig->p_usart);
  4079b6:	687b      	ldr	r3, [r7, #4]
  4079b8:	681b      	ldr	r3, [r3, #0]
  4079ba:	4618      	mov	r0, r3
  4079bc:	4b32      	ldr	r3, [pc, #200]	; (407a88 <drv_uart_deInit+0xec>)
  4079be:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].isinit = false;		
  4079c0:	687b      	ldr	r3, [r7, #4]
  4079c2:	695a      	ldr	r2, [r3, #20]
  4079c4:	4931      	ldr	r1, [pc, #196]	; (407a8c <drv_uart_deInit+0xf0>)
  4079c6:	4613      	mov	r3, r2
  4079c8:	019b      	lsls	r3, r3, #6
  4079ca:	4413      	add	r3, r2
  4079cc:	015b      	lsls	r3, r3, #5
  4079ce:	440b      	add	r3, r1
  4079d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4079d4:	2200      	movs	r2, #0
  4079d6:	719a      	strb	r2, [r3, #6]
	unsigned long PinFlag = PIO_TYPE_PIO_OUTPUT_0;
  4079d8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  4079dc:	60bb      	str	r3, [r7, #8]
	if(uartConfig->p_usart == UART0)
  4079de:	687b      	ldr	r3, [r7, #4]
  4079e0:	681a      	ldr	r2, [r3, #0]
  4079e2:	4b2b      	ldr	r3, [pc, #172]	; (407a90 <drv_uart_deInit+0xf4>)
  4079e4:	429a      	cmp	r2, r3
  4079e6:	d129      	bne.n	407a3c <drv_uart_deInit+0xa0>
	{
		sysclk_disable_peripheral_clock(ID_UART0);
  4079e8:	2008      	movs	r0, #8
  4079ea:	4b2a      	ldr	r3, [pc, #168]	; (407a94 <drv_uart_deInit+0xf8>)
  4079ec:	4798      	blx	r3

		//enable the pin
		PIOA->PIO_PDR    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);			
  4079ee:	4b2a      	ldr	r3, [pc, #168]	; (407a98 <drv_uart_deInit+0xfc>)
  4079f0:	4a29      	ldr	r2, [pc, #164]	; (407a98 <drv_uart_deInit+0xfc>)
  4079f2:	6852      	ldr	r2, [r2, #4]
  4079f4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  4079f8:	605a      	str	r2, [r3, #4]
		PIOA->PIO_PUDR   |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4079fa:	4b27      	ldr	r3, [pc, #156]	; (407a98 <drv_uart_deInit+0xfc>)
  4079fc:	4a26      	ldr	r2, [pc, #152]	; (407a98 <drv_uart_deInit+0xfc>)
  4079fe:	6e12      	ldr	r2, [r2, #96]	; 0x60
  407a00:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407a04:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  407a06:	4b24      	ldr	r3, [pc, #144]	; (407a98 <drv_uart_deInit+0xfc>)
  407a08:	4a23      	ldr	r2, [pc, #140]	; (407a98 <drv_uart_deInit+0xfc>)
  407a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
  407a0c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407a10:	635a      	str	r2, [r3, #52]	; 0x34
		//disable pin as output
		PIOA->PIO_ODR    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  407a12:	4b21      	ldr	r3, [pc, #132]	; (407a98 <drv_uart_deInit+0xfc>)
  407a14:	4a20      	ldr	r2, [pc, #128]	; (407a98 <drv_uart_deInit+0xfc>)
  407a16:	6952      	ldr	r2, [r2, #20]
  407a18:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407a1c:	615a      	str	r2, [r3, #20]
		//re-enable the pin
		PIOA->PIO_PER    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);	
  407a1e:	4b1e      	ldr	r3, [pc, #120]	; (407a98 <drv_uart_deInit+0xfc>)
  407a20:	4a1d      	ldr	r2, [pc, #116]	; (407a98 <drv_uart_deInit+0xfc>)
  407a22:	6812      	ldr	r2, [r2, #0]
  407a24:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407a28:	601a      	str	r2, [r3, #0]
		pio_configure_pin(PIO_PA9_IDX, PinFlag);
  407a2a:	2009      	movs	r0, #9
  407a2c:	68b9      	ldr	r1, [r7, #8]
  407a2e:	4b1b      	ldr	r3, [pc, #108]	; (407a9c <drv_uart_deInit+0x100>)
  407a30:	4798      	blx	r3
		pio_configure_pin(PIO_PA10_IDX, PinFlag);
  407a32:	200a      	movs	r0, #10
  407a34:	68b9      	ldr	r1, [r7, #8]
  407a36:	4b19      	ldr	r3, [pc, #100]	; (407a9c <drv_uart_deInit+0x100>)
  407a38:	4798      	blx	r3
  407a3a:	e01e      	b.n	407a7a <drv_uart_deInit+0xde>
	}
	else if(uartConfig->p_usart == UART1)
  407a3c:	687b      	ldr	r3, [r7, #4]
  407a3e:	681a      	ldr	r2, [r3, #0]
  407a40:	4b17      	ldr	r3, [pc, #92]	; (407aa0 <drv_uart_deInit+0x104>)
  407a42:	429a      	cmp	r2, r3
  407a44:	d119      	bne.n	407a7a <drv_uart_deInit+0xde>
	{
		sysclk_disable_peripheral_clock(ID_UART1);
  407a46:	2009      	movs	r0, #9
  407a48:	4b12      	ldr	r3, [pc, #72]	; (407a94 <drv_uart_deInit+0xf8>)
  407a4a:	4798      	blx	r3
		PIOB->PIO_PDR    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407a4c:	4b15      	ldr	r3, [pc, #84]	; (407aa4 <drv_uart_deInit+0x108>)
  407a4e:	220c      	movs	r2, #12
  407a50:	605a      	str	r2, [r3, #4]
		PIOB->PIO_PUDR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407a52:	4b14      	ldr	r3, [pc, #80]	; (407aa4 <drv_uart_deInit+0x108>)
  407a54:	220c      	movs	r2, #12
  407a56:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_CODR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407a58:	4b12      	ldr	r3, [pc, #72]	; (407aa4 <drv_uart_deInit+0x108>)
  407a5a:	220c      	movs	r2, #12
  407a5c:	635a      	str	r2, [r3, #52]	; 0x34
		PIOB->PIO_ODR    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407a5e:	4b11      	ldr	r3, [pc, #68]	; (407aa4 <drv_uart_deInit+0x108>)
  407a60:	220c      	movs	r2, #12
  407a62:	615a      	str	r2, [r3, #20]
		PIOB->PIO_PER    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407a64:	4b0f      	ldr	r3, [pc, #60]	; (407aa4 <drv_uart_deInit+0x108>)
  407a66:	220c      	movs	r2, #12
  407a68:	601a      	str	r2, [r3, #0]
		pio_configure_pin(PIO_PB2_IDX, PinFlag);
  407a6a:	2022      	movs	r0, #34	; 0x22
  407a6c:	68b9      	ldr	r1, [r7, #8]
  407a6e:	4b0b      	ldr	r3, [pc, #44]	; (407a9c <drv_uart_deInit+0x100>)
  407a70:	4798      	blx	r3
		pio_configure_pin(PIO_PB3_IDX, PinFlag);		
  407a72:	2023      	movs	r0, #35	; 0x23
  407a74:	68b9      	ldr	r1, [r7, #8]
  407a76:	4b09      	ldr	r3, [pc, #36]	; (407a9c <drv_uart_deInit+0x100>)
  407a78:	4798      	blx	r3
	}	
	return status;	
  407a7a:	7bfb      	ldrb	r3, [r7, #15]
}
  407a7c:	4618      	mov	r0, r3
  407a7e:	3710      	adds	r7, #16
  407a80:	46bd      	mov	sp, r7
  407a82:	bd80      	pop	{r7, pc}
  407a84:	00406935 	.word	0x00406935
  407a88:	0040a5dd 	.word	0x0040a5dd
  407a8c:	2000897c 	.word	0x2000897c
  407a90:	400e0600 	.word	0x400e0600
  407a94:	004073a1 	.word	0x004073a1
  407a98:	400e0e00 	.word	0x400e0e00
  407a9c:	0040ae65 	.word	0x0040ae65
  407aa0:	400e0800 	.word	0x400e0800
  407aa4:	400e1000 	.word	0x400e1000

00407aa8 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  407aa8:	b480      	push	{r7}
  407aaa:	b083      	sub	sp, #12
  407aac:	af00      	add	r7, sp, #0
  407aae:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  407ab0:	687b      	ldr	r3, [r7, #4]
  407ab2:	695a      	ldr	r2, [r3, #20]
  407ab4:	490a      	ldr	r1, [pc, #40]	; (407ae0 <drv_uart_isInit+0x38>)
  407ab6:	4613      	mov	r3, r2
  407ab8:	019b      	lsls	r3, r3, #6
  407aba:	4413      	add	r3, r2
  407abc:	015b      	lsls	r3, r3, #5
  407abe:	440b      	add	r3, r1
  407ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407ac4:	799b      	ldrb	r3, [r3, #6]
  407ac6:	b2db      	uxtb	r3, r3
  407ac8:	2b00      	cmp	r3, #0
  407aca:	d001      	beq.n	407ad0 <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  407acc:	2300      	movs	r3, #0
  407ace:	e000      	b.n	407ad2 <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  407ad0:	2301      	movs	r3, #1
	}
}
  407ad2:	4618      	mov	r0, r3
  407ad4:	370c      	adds	r7, #12
  407ad6:	46bd      	mov	sp, r7
  407ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
  407adc:	4770      	bx	lr
  407ade:	bf00      	nop
  407ae0:	2000897c 	.word	0x2000897c

00407ae4 <drv_uart_putString>:
	*strLength = pointer;
	return result; 
}

void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
  407ae4:	b580      	push	{r7, lr}
  407ae6:	b084      	sub	sp, #16
  407ae8:	af00      	add	r7, sp, #0
  407aea:	6078      	str	r0, [r7, #4]
  407aec:	6039      	str	r1, [r7, #0]
	int i=0;
  407aee:	2300      	movs	r3, #0
  407af0:	60fb      	str	r3, [r7, #12]
	int size = strlen(str);
  407af2:	6838      	ldr	r0, [r7, #0]
  407af4:	4b0d      	ldr	r3, [pc, #52]	; (407b2c <drv_uart_putString+0x48>)
  407af6:	4798      	blx	r3
  407af8:	4603      	mov	r3, r0
  407afa:	60bb      	str	r3, [r7, #8]

	for (i=0;i<size;)
  407afc:	2300      	movs	r3, #0
  407afe:	60fb      	str	r3, [r7, #12]
  407b00:	e00d      	b.n	407b1e <drv_uart_putString+0x3a>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  407b02:	68fb      	ldr	r3, [r7, #12]
  407b04:	683a      	ldr	r2, [r7, #0]
  407b06:	4413      	add	r3, r2
  407b08:	781b      	ldrb	r3, [r3, #0]
  407b0a:	6878      	ldr	r0, [r7, #4]
  407b0c:	4619      	mov	r1, r3
  407b0e:	4b08      	ldr	r3, [pc, #32]	; (407b30 <drv_uart_putString+0x4c>)
  407b10:	4798      	blx	r3
  407b12:	4603      	mov	r3, r0
  407b14:	2b00      	cmp	r3, #0
  407b16:	d102      	bne.n	407b1e <drv_uart_putString+0x3a>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  407b18:	68fb      	ldr	r3, [r7, #12]
  407b1a:	3301      	adds	r3, #1
  407b1c:	60fb      	str	r3, [r7, #12]
void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
	int i=0;
	int size = strlen(str);

	for (i=0;i<size;)
  407b1e:	68fa      	ldr	r2, [r7, #12]
  407b20:	68bb      	ldr	r3, [r7, #8]
  407b22:	429a      	cmp	r2, r3
  407b24:	dbed      	blt.n	407b02 <drv_uart_putString+0x1e>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}		
	}
}
  407b26:	3710      	adds	r7, #16
  407b28:	46bd      	mov	sp, r7
  407b2a:	bd80      	pop	{r7, pc}
  407b2c:	0040cb69 	.word	0x0040cb69
  407b30:	00407835 	.word	0x00407835

00407b34 <drv_uart_putData>:

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  407b34:	b580      	push	{r7, lr}
  407b36:	b086      	sub	sp, #24
  407b38:	af00      	add	r7, sp, #0
  407b3a:	60f8      	str	r0, [r7, #12]
  407b3c:	60b9      	str	r1, [r7, #8]
  407b3e:	607a      	str	r2, [r7, #4]
	int i=0;
  407b40:	2300      	movs	r3, #0
  407b42:	617b      	str	r3, [r7, #20]
	for (i=0;i<length;)
  407b44:	2300      	movs	r3, #0
  407b46:	617b      	str	r3, [r7, #20]
  407b48:	e00d      	b.n	407b66 <drv_uart_putData+0x32>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  407b4a:	697b      	ldr	r3, [r7, #20]
  407b4c:	68ba      	ldr	r2, [r7, #8]
  407b4e:	4413      	add	r3, r2
  407b50:	781b      	ldrb	r3, [r3, #0]
  407b52:	68f8      	ldr	r0, [r7, #12]
  407b54:	4619      	mov	r1, r3
  407b56:	4b07      	ldr	r3, [pc, #28]	; (407b74 <drv_uart_putData+0x40>)
  407b58:	4798      	blx	r3
  407b5a:	4603      	mov	r3, r0
  407b5c:	2b00      	cmp	r3, #0
  407b5e:	d102      	bne.n	407b66 <drv_uart_putData+0x32>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  407b60:	697b      	ldr	r3, [r7, #20]
  407b62:	3301      	adds	r3, #1
  407b64:	617b      	str	r3, [r7, #20]
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  407b66:	697a      	ldr	r2, [r7, #20]
  407b68:	687b      	ldr	r3, [r7, #4]
  407b6a:	429a      	cmp	r2, r3
  407b6c:	d3ed      	bcc.n	407b4a <drv_uart_putData+0x16>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  407b6e:	3718      	adds	r7, #24
  407b70:	46bd      	mov	sp, r7
  407b72:	bd80      	pop	{r7, pc}
  407b74:	00407835 	.word	0x00407835

00407b78 <UART0_Handler>:
	}
}

// interrupt handlers
void UART0_Handler()
{	
  407b78:	b580      	push	{r7, lr}
  407b7a:	b082      	sub	sp, #8
  407b7c:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  407b7e:	4812      	ldr	r0, [pc, #72]	; (407bc8 <UART0_Handler+0x50>)
  407b80:	4b12      	ldr	r3, [pc, #72]	; (407bcc <UART0_Handler+0x54>)
  407b82:	4798      	blx	r3
  407b84:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407b86:	687b      	ldr	r3, [r7, #4]
  407b88:	f003 0301 	and.w	r3, r3, #1
  407b8c:	2b00      	cmp	r3, #0
  407b8e:	d009      	beq.n	407ba4 <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  407b90:	4b0f      	ldr	r3, [pc, #60]	; (407bd0 <UART0_Handler+0x58>)
  407b92:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
  407b96:	b2db      	uxtb	r3, r3
  407b98:	2b00      	cmp	r3, #0
  407b9a:	d003      	beq.n	407ba4 <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  407b9c:	480a      	ldr	r0, [pc, #40]	; (407bc8 <UART0_Handler+0x50>)
  407b9e:	490c      	ldr	r1, [pc, #48]	; (407bd0 <UART0_Handler+0x58>)
  407ba0:	4b0c      	ldr	r3, [pc, #48]	; (407bd4 <UART0_Handler+0x5c>)
  407ba2:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407ba4:	687b      	ldr	r3, [r7, #4]
  407ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407baa:	2b00      	cmp	r3, #0
  407bac:	d009      	beq.n	407bc2 <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  407bae:	4b08      	ldr	r3, [pc, #32]	; (407bd0 <UART0_Handler+0x58>)
  407bb0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
  407bb4:	b2db      	uxtb	r3, r3
  407bb6:	2b00      	cmp	r3, #0
  407bb8:	d003      	beq.n	407bc2 <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  407bba:	4803      	ldr	r0, [pc, #12]	; (407bc8 <UART0_Handler+0x50>)
  407bbc:	4904      	ldr	r1, [pc, #16]	; (407bd0 <UART0_Handler+0x58>)
  407bbe:	4b06      	ldr	r3, [pc, #24]	; (407bd8 <UART0_Handler+0x60>)
  407bc0:	4798      	blx	r3
		}
	}	
}
  407bc2:	3708      	adds	r7, #8
  407bc4:	46bd      	mov	sp, r7
  407bc6:	bd80      	pop	{r7, pc}
  407bc8:	400e0600 	.word	0x400e0600
  407bcc:	0040a611 	.word	0x0040a611
  407bd0:	2000897c 	.word	0x2000897c
  407bd4:	00407d41 	.word	0x00407d41
  407bd8:	00407e05 	.word	0x00407e05

00407bdc <UART1_Handler>:

void UART1_Handler()
{
  407bdc:	b580      	push	{r7, lr}
  407bde:	b082      	sub	sp, #8
  407be0:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  407be2:	4812      	ldr	r0, [pc, #72]	; (407c2c <UART1_Handler+0x50>)
  407be4:	4b12      	ldr	r3, [pc, #72]	; (407c30 <UART1_Handler+0x54>)
  407be6:	4798      	blx	r3
  407be8:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407bea:	687b      	ldr	r3, [r7, #4]
  407bec:	f003 0301 	and.w	r3, r3, #1
  407bf0:	2b00      	cmp	r3, #0
  407bf2:	d009      	beq.n	407c08 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  407bf4:	4b0f      	ldr	r3, [pc, #60]	; (407c34 <UART1_Handler+0x58>)
  407bf6:	f893 3c26 	ldrb.w	r3, [r3, #3110]	; 0xc26
  407bfa:	b2db      	uxtb	r3, r3
  407bfc:	2b00      	cmp	r3, #0
  407bfe:	d003      	beq.n	407c08 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  407c00:	480a      	ldr	r0, [pc, #40]	; (407c2c <UART1_Handler+0x50>)
  407c02:	490d      	ldr	r1, [pc, #52]	; (407c38 <UART1_Handler+0x5c>)
  407c04:	4b0d      	ldr	r3, [pc, #52]	; (407c3c <UART1_Handler+0x60>)
  407c06:	4798      	blx	r3
			
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407c08:	687b      	ldr	r3, [r7, #4]
  407c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407c0e:	2b00      	cmp	r3, #0
  407c10:	d009      	beq.n	407c26 <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  407c12:	4b08      	ldr	r3, [pc, #32]	; (407c34 <UART1_Handler+0x58>)
  407c14:	f893 3c26 	ldrb.w	r3, [r3, #3110]	; 0xc26
  407c18:	b2db      	uxtb	r3, r3
  407c1a:	2b00      	cmp	r3, #0
  407c1c:	d003      	beq.n	407c26 <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  407c1e:	4803      	ldr	r0, [pc, #12]	; (407c2c <UART1_Handler+0x50>)
  407c20:	4905      	ldr	r1, [pc, #20]	; (407c38 <UART1_Handler+0x5c>)
  407c22:	4b07      	ldr	r3, [pc, #28]	; (407c40 <UART1_Handler+0x64>)
  407c24:	4798      	blx	r3
		}
	}
}
  407c26:	3708      	adds	r7, #8
  407c28:	46bd      	mov	sp, r7
  407c2a:	bd80      	pop	{r7, pc}
  407c2c:	400e0800 	.word	0x400e0800
  407c30:	0040a611 	.word	0x0040a611
  407c34:	2000897c 	.word	0x2000897c
  407c38:	2000919c 	.word	0x2000919c
  407c3c:	00407d41 	.word	0x00407d41
  407c40:	00407e05 	.word	0x00407e05

00407c44 <USART0_Handler>:

void USART0_Handler()
{
  407c44:	b580      	push	{r7, lr}
  407c46:	b082      	sub	sp, #8
  407c48:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  407c4a:	4814      	ldr	r0, [pc, #80]	; (407c9c <USART0_Handler+0x58>)
  407c4c:	4b14      	ldr	r3, [pc, #80]	; (407ca0 <USART0_Handler+0x5c>)
  407c4e:	4798      	blx	r3
  407c50:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407c52:	687b      	ldr	r3, [r7, #4]
  407c54:	f003 0301 	and.w	r3, r3, #1
  407c58:	2b00      	cmp	r3, #0
  407c5a:	d00b      	beq.n	407c74 <USART0_Handler+0x30>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  407c5c:	4b11      	ldr	r3, [pc, #68]	; (407ca4 <USART0_Handler+0x60>)
  407c5e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
  407c62:	3306      	adds	r3, #6
  407c64:	781b      	ldrb	r3, [r3, #0]
  407c66:	b2db      	uxtb	r3, r3
  407c68:	2b00      	cmp	r3, #0
  407c6a:	d003      	beq.n	407c74 <USART0_Handler+0x30>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  407c6c:	480b      	ldr	r0, [pc, #44]	; (407c9c <USART0_Handler+0x58>)
  407c6e:	490e      	ldr	r1, [pc, #56]	; (407ca8 <USART0_Handler+0x64>)
  407c70:	4b0e      	ldr	r3, [pc, #56]	; (407cac <USART0_Handler+0x68>)
  407c72:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407c74:	687b      	ldr	r3, [r7, #4]
  407c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407c7a:	2b00      	cmp	r3, #0
  407c7c:	d00b      	beq.n	407c96 <USART0_Handler+0x52>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  407c7e:	4b09      	ldr	r3, [pc, #36]	; (407ca4 <USART0_Handler+0x60>)
  407c80:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
  407c84:	3306      	adds	r3, #6
  407c86:	781b      	ldrb	r3, [r3, #0]
  407c88:	b2db      	uxtb	r3, r3
  407c8a:	2b00      	cmp	r3, #0
  407c8c:	d003      	beq.n	407c96 <USART0_Handler+0x52>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  407c8e:	4803      	ldr	r0, [pc, #12]	; (407c9c <USART0_Handler+0x58>)
  407c90:	4905      	ldr	r1, [pc, #20]	; (407ca8 <USART0_Handler+0x64>)
  407c92:	4b07      	ldr	r3, [pc, #28]	; (407cb0 <USART0_Handler+0x6c>)
  407c94:	4798      	blx	r3
		}
	}	
}
  407c96:	3708      	adds	r7, #8
  407c98:	46bd      	mov	sp, r7
  407c9a:	bd80      	pop	{r7, pc}
  407c9c:	40024000 	.word	0x40024000
  407ca0:	0040a611 	.word	0x0040a611
  407ca4:	2000897c 	.word	0x2000897c
  407ca8:	200099bc 	.word	0x200099bc
  407cac:	00407d41 	.word	0x00407d41
  407cb0:	00407e05 	.word	0x00407e05

00407cb4 <uart_get_byte>:
}


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  407cb4:	b480      	push	{r7}
  407cb6:	b085      	sub	sp, #20
  407cb8:	af00      	add	r7, sp, #0
  407cba:	6078      	str	r0, [r7, #4]
  407cbc:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  407cbe:	2300      	movs	r3, #0
  407cc0:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  407cc2:	687b      	ldr	r3, [r7, #4]
  407cc4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407ccc:	d103      	bne.n	407cd6 <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  407cce:	687b      	ldr	r3, [r7, #4]
  407cd0:	2200      	movs	r2, #0
  407cd2:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  407cd6:	687b      	ldr	r3, [r7, #4]
  407cd8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407cdc:	2b00      	cmp	r3, #0
  407cde:	d017      	beq.n	407d10 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  407ce0:	687b      	ldr	r3, [r7, #4]
  407ce2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  407ce6:	687a      	ldr	r2, [r7, #4]
  407ce8:	5cd2      	ldrb	r2, [r2, r3]
  407cea:	683b      	ldr	r3, [r7, #0]
  407cec:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  407cee:	687b      	ldr	r3, [r7, #4]
  407cf0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  407cf4:	3301      	adds	r3, #1
  407cf6:	b29a      	uxth	r2, r3
  407cf8:	687b      	ldr	r3, [r7, #4]
  407cfa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  407cfe:	687b      	ldr	r3, [r7, #4]
  407d00:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407d04:	3b01      	subs	r3, #1
  407d06:	b29a      	uxth	r2, r3
  407d08:	687b      	ldr	r3, [r7, #4]
  407d0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  407d0e:	e005      	b.n	407d1c <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  407d10:	687b      	ldr	r3, [r7, #4]
  407d12:	2200      	movs	r2, #0
  407d14:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
		status = STATUS_EOF;
  407d18:	2302      	movs	r3, #2
  407d1a:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  407d1c:	687b      	ldr	r3, [r7, #4]
  407d1e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  407d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407d26:	d103      	bne.n	407d30 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  407d28:	687b      	ldr	r3, [r7, #4]
  407d2a:	2200      	movs	r2, #0
  407d2c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}		
	return status;
  407d30:	7bfb      	ldrb	r3, [r7, #15]
}
  407d32:	4618      	mov	r0, r3
  407d34:	3714      	adds	r7, #20
  407d36:	46bd      	mov	sp, r7
  407d38:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d3c:	4770      	bx	lr
  407d3e:	bf00      	nop

00407d40 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  407d40:	b580      	push	{r7, lr}
  407d42:	b084      	sub	sp, #16
  407d44:	af00      	add	r7, sp, #0
  407d46:	6078      	str	r0, [r7, #4]
  407d48:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  407d4a:	2300      	movs	r3, #0
  407d4c:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  407d4e:	683b      	ldr	r3, [r7, #0]
  407d50:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407d58:	d111      	bne.n	407d7e <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  407d5a:	683b      	ldr	r3, [r7, #0]
  407d5c:	2201      	movs	r2, #1
  407d5e:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  407d62:	683b      	ldr	r3, [r7, #0]
  407d64:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
  407d68:	1c5a      	adds	r2, r3, #1
  407d6a:	683b      	ldr	r3, [r7, #0]
  407d6c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		usart_getchar(p_usart,&val);		
  407d70:	f107 030c 	add.w	r3, r7, #12
  407d74:	6878      	ldr	r0, [r7, #4]
  407d76:	4619      	mov	r1, r3
  407d78:	4b21      	ldr	r3, [pc, #132]	; (407e00 <uart_process_byte+0xc0>)
  407d7a:	4798      	blx	r3
  407d7c:	e025      	b.n	407dca <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  407d7e:	683b      	ldr	r3, [r7, #0]
  407d80:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407d88:	d21f      	bcs.n	407dca <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  407d8a:	f107 030c 	add.w	r3, r7, #12
  407d8e:	6878      	ldr	r0, [r7, #4]
  407d90:	4619      	mov	r1, r3
  407d92:	4b1b      	ldr	r3, [pc, #108]	; (407e00 <uart_process_byte+0xc0>)
  407d94:	4798      	blx	r3
  407d96:	4603      	mov	r3, r0
  407d98:	2b00      	cmp	r3, #0
  407d9a:	d116      	bne.n	407dca <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  407d9c:	683b      	ldr	r3, [r7, #0]
  407d9e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  407da2:	68fa      	ldr	r2, [r7, #12]
  407da4:	b2d1      	uxtb	r1, r2
  407da6:	683a      	ldr	r2, [r7, #0]
  407da8:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  407daa:	683b      	ldr	r3, [r7, #0]
  407dac:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  407db0:	3301      	adds	r3, #1
  407db2:	b29a      	uxth	r2, r3
  407db4:	683b      	ldr	r3, [r7, #0]
  407db6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  407dba:	683b      	ldr	r3, [r7, #0]
  407dbc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407dc0:	3301      	adds	r3, #1
  407dc2:	b29a      	uxth	r2, r3
  407dc4:	683b      	ldr	r3, [r7, #0]
  407dc6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  407dca:	683b      	ldr	r3, [r7, #0]
  407dcc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407dd4:	d103      	bne.n	407dde <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  407dd6:	683b      	ldr	r3, [r7, #0]
  407dd8:	2201      	movs	r2, #1
  407dda:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  407dde:	683b      	ldr	r3, [r7, #0]
  407de0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  407de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407de8:	d103      	bne.n	407df2 <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  407dea:	683b      	ldr	r3, [r7, #0]
  407dec:	2200      	movs	r2, #0
  407dee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  407df2:	683b      	ldr	r3, [r7, #0]
  407df4:	2201      	movs	r2, #1
  407df6:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
}
  407dfa:	3710      	adds	r7, #16
  407dfc:	46bd      	mov	sp, r7
  407dfe:	bd80      	pop	{r7, pc}
  407e00:	00406a0d 	.word	0x00406a0d

00407e04 <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  407e04:	b580      	push	{r7, lr}
  407e06:	b082      	sub	sp, #8
  407e08:	af00      	add	r7, sp, #0
  407e0a:	6078      	str	r0, [r7, #4]
  407e0c:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  407e0e:	683b      	ldr	r3, [r7, #0]
  407e10:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407e18:	d103      	bne.n	407e22 <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  407e1a:	683b      	ldr	r3, [r7, #0]
  407e1c:	2200      	movs	r2, #0
  407e1e:	f883 2817 	strb.w	r2, [r3, #2071]	; 0x817
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  407e22:	683b      	ldr	r3, [r7, #0]
  407e24:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407e28:	2b00      	cmp	r3, #0
  407e2a:	d01b      	beq.n	407e64 <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  407e2c:	683b      	ldr	r3, [r7, #0]
  407e2e:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  407e32:	683a      	ldr	r2, [r7, #0]
  407e34:	4413      	add	r3, r2
  407e36:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
  407e3a:	6878      	ldr	r0, [r7, #4]
  407e3c:	4619      	mov	r1, r3
  407e3e:	4b14      	ldr	r3, [pc, #80]	; (407e90 <uart_process_tx_byte+0x8c>)
  407e40:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  407e42:	683b      	ldr	r3, [r7, #0]
  407e44:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  407e48:	3301      	adds	r3, #1
  407e4a:	b29a      	uxth	r2, r3
  407e4c:	683b      	ldr	r3, [r7, #0]
  407e4e:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  407e52:	683b      	ldr	r3, [r7, #0]
  407e54:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407e58:	3b01      	subs	r3, #1
  407e5a:	b29a      	uxth	r2, r3
  407e5c:	683b      	ldr	r3, [r7, #0]
  407e5e:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  407e62:	e008      	b.n	407e76 <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  407e64:	683b      	ldr	r3, [r7, #0]
  407e66:	2200      	movs	r2, #0
  407e68:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  407e6c:	6878      	ldr	r0, [r7, #4]
  407e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
  407e72:	4b08      	ldr	r3, [pc, #32]	; (407e94 <uart_process_tx_byte+0x90>)
  407e74:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  407e76:	683b      	ldr	r3, [r7, #0]
  407e78:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  407e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407e80:	d103      	bne.n	407e8a <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  407e82:	683b      	ldr	r3, [r7, #0]
  407e84:	2200      	movs	r2, #0
  407e86:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
	}	
  407e8a:	3708      	adds	r7, #8
  407e8c:	46bd      	mov	sp, r7
  407e8e:	bd80      	pop	{r7, pc}
  407e90:	00407481 	.word	0x00407481
  407e94:	0040a5f5 	.word	0x0040a5f5

00407e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  407e98:	b480      	push	{r7}
  407e9a:	b083      	sub	sp, #12
  407e9c:	af00      	add	r7, sp, #0
  407e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  407ea0:	687b      	ldr	r3, [r7, #4]
  407ea2:	f103 0208 	add.w	r2, r3, #8
  407ea6:	687b      	ldr	r3, [r7, #4]
  407ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  407eaa:	687b      	ldr	r3, [r7, #4]
  407eac:	f04f 32ff 	mov.w	r2, #4294967295
  407eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  407eb2:	687b      	ldr	r3, [r7, #4]
  407eb4:	f103 0208 	add.w	r2, r3, #8
  407eb8:	687b      	ldr	r3, [r7, #4]
  407eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  407ebc:	687b      	ldr	r3, [r7, #4]
  407ebe:	f103 0208 	add.w	r2, r3, #8
  407ec2:	687b      	ldr	r3, [r7, #4]
  407ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  407ec6:	687b      	ldr	r3, [r7, #4]
  407ec8:	2200      	movs	r2, #0
  407eca:	601a      	str	r2, [r3, #0]
}
  407ecc:	370c      	adds	r7, #12
  407ece:	46bd      	mov	sp, r7
  407ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ed4:	4770      	bx	lr
  407ed6:	bf00      	nop

00407ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  407ed8:	b480      	push	{r7}
  407eda:	b083      	sub	sp, #12
  407edc:	af00      	add	r7, sp, #0
  407ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  407ee0:	687b      	ldr	r3, [r7, #4]
  407ee2:	2200      	movs	r2, #0
  407ee4:	611a      	str	r2, [r3, #16]
}
  407ee6:	370c      	adds	r7, #12
  407ee8:	46bd      	mov	sp, r7
  407eea:	f85d 7b04 	ldr.w	r7, [sp], #4
  407eee:	4770      	bx	lr

00407ef0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  407ef0:	b480      	push	{r7}
  407ef2:	b085      	sub	sp, #20
  407ef4:	af00      	add	r7, sp, #0
  407ef6:	6078      	str	r0, [r7, #4]
  407ef8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  407efa:	687b      	ldr	r3, [r7, #4]
  407efc:	685b      	ldr	r3, [r3, #4]
  407efe:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  407f00:	68fb      	ldr	r3, [r7, #12]
  407f02:	685a      	ldr	r2, [r3, #4]
  407f04:	683b      	ldr	r3, [r7, #0]
  407f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  407f08:	687b      	ldr	r3, [r7, #4]
  407f0a:	685a      	ldr	r2, [r3, #4]
  407f0c:	683b      	ldr	r3, [r7, #0]
  407f0e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  407f10:	68fb      	ldr	r3, [r7, #12]
  407f12:	685b      	ldr	r3, [r3, #4]
  407f14:	683a      	ldr	r2, [r7, #0]
  407f16:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  407f18:	68fb      	ldr	r3, [r7, #12]
  407f1a:	683a      	ldr	r2, [r7, #0]
  407f1c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  407f1e:	687b      	ldr	r3, [r7, #4]
  407f20:	683a      	ldr	r2, [r7, #0]
  407f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  407f24:	683b      	ldr	r3, [r7, #0]
  407f26:	687a      	ldr	r2, [r7, #4]
  407f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  407f2a:	687b      	ldr	r3, [r7, #4]
  407f2c:	681b      	ldr	r3, [r3, #0]
  407f2e:	1c5a      	adds	r2, r3, #1
  407f30:	687b      	ldr	r3, [r7, #4]
  407f32:	601a      	str	r2, [r3, #0]
}
  407f34:	3714      	adds	r7, #20
  407f36:	46bd      	mov	sp, r7
  407f38:	f85d 7b04 	ldr.w	r7, [sp], #4
  407f3c:	4770      	bx	lr
  407f3e:	bf00      	nop

00407f40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  407f40:	b480      	push	{r7}
  407f42:	b085      	sub	sp, #20
  407f44:	af00      	add	r7, sp, #0
  407f46:	6078      	str	r0, [r7, #4]
  407f48:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  407f4a:	683b      	ldr	r3, [r7, #0]
  407f4c:	681b      	ldr	r3, [r3, #0]
  407f4e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  407f50:	68bb      	ldr	r3, [r7, #8]
  407f52:	f1b3 3fff 	cmp.w	r3, #4294967295
  407f56:	d103      	bne.n	407f60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  407f58:	687b      	ldr	r3, [r7, #4]
  407f5a:	691b      	ldr	r3, [r3, #16]
  407f5c:	60fb      	str	r3, [r7, #12]
  407f5e:	e00c      	b.n	407f7a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  407f60:	687b      	ldr	r3, [r7, #4]
  407f62:	3308      	adds	r3, #8
  407f64:	60fb      	str	r3, [r7, #12]
  407f66:	e002      	b.n	407f6e <vListInsert+0x2e>
  407f68:	68fb      	ldr	r3, [r7, #12]
  407f6a:	685b      	ldr	r3, [r3, #4]
  407f6c:	60fb      	str	r3, [r7, #12]
  407f6e:	68fb      	ldr	r3, [r7, #12]
  407f70:	685b      	ldr	r3, [r3, #4]
  407f72:	681a      	ldr	r2, [r3, #0]
  407f74:	68bb      	ldr	r3, [r7, #8]
  407f76:	429a      	cmp	r2, r3
  407f78:	d9f6      	bls.n	407f68 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  407f7a:	68fb      	ldr	r3, [r7, #12]
  407f7c:	685a      	ldr	r2, [r3, #4]
  407f7e:	683b      	ldr	r3, [r7, #0]
  407f80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  407f82:	683b      	ldr	r3, [r7, #0]
  407f84:	685b      	ldr	r3, [r3, #4]
  407f86:	683a      	ldr	r2, [r7, #0]
  407f88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  407f8a:	683b      	ldr	r3, [r7, #0]
  407f8c:	68fa      	ldr	r2, [r7, #12]
  407f8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  407f90:	68fb      	ldr	r3, [r7, #12]
  407f92:	683a      	ldr	r2, [r7, #0]
  407f94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  407f96:	683b      	ldr	r3, [r7, #0]
  407f98:	687a      	ldr	r2, [r7, #4]
  407f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  407f9c:	687b      	ldr	r3, [r7, #4]
  407f9e:	681b      	ldr	r3, [r3, #0]
  407fa0:	1c5a      	adds	r2, r3, #1
  407fa2:	687b      	ldr	r3, [r7, #4]
  407fa4:	601a      	str	r2, [r3, #0]
}
  407fa6:	3714      	adds	r7, #20
  407fa8:	46bd      	mov	sp, r7
  407faa:	f85d 7b04 	ldr.w	r7, [sp], #4
  407fae:	4770      	bx	lr

00407fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  407fb0:	b480      	push	{r7}
  407fb2:	b085      	sub	sp, #20
  407fb4:	af00      	add	r7, sp, #0
  407fb6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  407fb8:	687b      	ldr	r3, [r7, #4]
  407fba:	685b      	ldr	r3, [r3, #4]
  407fbc:	687a      	ldr	r2, [r7, #4]
  407fbe:	6892      	ldr	r2, [r2, #8]
  407fc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  407fc2:	687b      	ldr	r3, [r7, #4]
  407fc4:	689b      	ldr	r3, [r3, #8]
  407fc6:	687a      	ldr	r2, [r7, #4]
  407fc8:	6852      	ldr	r2, [r2, #4]
  407fca:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  407fcc:	687b      	ldr	r3, [r7, #4]
  407fce:	691b      	ldr	r3, [r3, #16]
  407fd0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  407fd2:	68fb      	ldr	r3, [r7, #12]
  407fd4:	685a      	ldr	r2, [r3, #4]
  407fd6:	687b      	ldr	r3, [r7, #4]
  407fd8:	429a      	cmp	r2, r3
  407fda:	d103      	bne.n	407fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  407fdc:	687b      	ldr	r3, [r7, #4]
  407fde:	689a      	ldr	r2, [r3, #8]
  407fe0:	68fb      	ldr	r3, [r7, #12]
  407fe2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  407fe4:	687b      	ldr	r3, [r7, #4]
  407fe6:	2200      	movs	r2, #0
  407fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  407fea:	68fb      	ldr	r3, [r7, #12]
  407fec:	681b      	ldr	r3, [r3, #0]
  407fee:	1e5a      	subs	r2, r3, #1
  407ff0:	68fb      	ldr	r3, [r7, #12]
  407ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  407ff4:	68fb      	ldr	r3, [r7, #12]
  407ff6:	681b      	ldr	r3, [r3, #0]
}
  407ff8:	4618      	mov	r0, r3
  407ffa:	3714      	adds	r7, #20
  407ffc:	46bd      	mov	sp, r7
  407ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
  408002:	4770      	bx	lr

00408004 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  408004:	b480      	push	{r7}
  408006:	b083      	sub	sp, #12
  408008:	af00      	add	r7, sp, #0
  40800a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40800c:	687b      	ldr	r3, [r7, #4]
  40800e:	2b07      	cmp	r3, #7
  408010:	d825      	bhi.n	40805e <osc_get_rate+0x5a>
  408012:	a201      	add	r2, pc, #4	; (adr r2, 408018 <osc_get_rate+0x14>)
  408014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408018:	00408039 	.word	0x00408039
  40801c:	0040803f 	.word	0x0040803f
  408020:	00408045 	.word	0x00408045
  408024:	0040804b 	.word	0x0040804b
  408028:	0040804f 	.word	0x0040804f
  40802c:	00408053 	.word	0x00408053
  408030:	00408057 	.word	0x00408057
  408034:	0040805b 	.word	0x0040805b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  408038:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40803c:	e010      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40803e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408042:	e00d      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  408044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408048:	e00a      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40804a:	4b08      	ldr	r3, [pc, #32]	; (40806c <osc_get_rate+0x68>)
  40804c:	e008      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40804e:	4b08      	ldr	r3, [pc, #32]	; (408070 <osc_get_rate+0x6c>)
  408050:	e006      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  408052:	4b08      	ldr	r3, [pc, #32]	; (408074 <osc_get_rate+0x70>)
  408054:	e004      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  408056:	4b07      	ldr	r3, [pc, #28]	; (408074 <osc_get_rate+0x70>)
  408058:	e002      	b.n	408060 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40805a:	4b06      	ldr	r3, [pc, #24]	; (408074 <osc_get_rate+0x70>)
  40805c:	e000      	b.n	408060 <osc_get_rate+0x5c>
	}

	return 0;
  40805e:	2300      	movs	r3, #0
}
  408060:	4618      	mov	r0, r3
  408062:	370c      	adds	r7, #12
  408064:	46bd      	mov	sp, r7
  408066:	f85d 7b04 	ldr.w	r7, [sp], #4
  40806a:	4770      	bx	lr
  40806c:	003d0900 	.word	0x003d0900
  408070:	007a1200 	.word	0x007a1200
  408074:	00b71b00 	.word	0x00b71b00

00408078 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  408078:	b580      	push	{r7, lr}
  40807a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40807c:	2006      	movs	r0, #6
  40807e:	4b04      	ldr	r3, [pc, #16]	; (408090 <sysclk_get_main_hz+0x18>)
  408080:	4798      	blx	r3
  408082:	4602      	mov	r2, r0
  408084:	4613      	mov	r3, r2
  408086:	011b      	lsls	r3, r3, #4
  408088:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40808a:	4618      	mov	r0, r3
  40808c:	bd80      	pop	{r7, pc}
  40808e:	bf00      	nop
  408090:	00408005 	.word	0x00408005

00408094 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  408094:	b580      	push	{r7, lr}
  408096:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  408098:	4b02      	ldr	r3, [pc, #8]	; (4080a4 <sysclk_get_cpu_hz+0x10>)
  40809a:	4798      	blx	r3
  40809c:	4603      	mov	r3, r0
  40809e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4080a0:	4618      	mov	r0, r3
  4080a2:	bd80      	pop	{r7, pc}
  4080a4:	00408079 	.word	0x00408079

004080a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  4080a8:	b480      	push	{r7}
  4080aa:	b085      	sub	sp, #20
  4080ac:	af00      	add	r7, sp, #0
  4080ae:	60f8      	str	r0, [r7, #12]
  4080b0:	60b9      	str	r1, [r7, #8]
  4080b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  4080b4:	68fb      	ldr	r3, [r7, #12]
  4080b6:	3b04      	subs	r3, #4
  4080b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4080ba:	68fb      	ldr	r3, [r7, #12]
  4080bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4080c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4080c2:	68fb      	ldr	r3, [r7, #12]
  4080c4:	3b04      	subs	r3, #4
  4080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  4080c8:	68ba      	ldr	r2, [r7, #8]
  4080ca:	68fb      	ldr	r3, [r7, #12]
  4080cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4080ce:	68fb      	ldr	r3, [r7, #12]
  4080d0:	3b04      	subs	r3, #4
  4080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  4080d4:	68fb      	ldr	r3, [r7, #12]
  4080d6:	2200      	movs	r2, #0
  4080d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  4080da:	68fb      	ldr	r3, [r7, #12]
  4080dc:	3b14      	subs	r3, #20
  4080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  4080e0:	687a      	ldr	r2, [r7, #4]
  4080e2:	68fb      	ldr	r3, [r7, #12]
  4080e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  4080e6:	68fb      	ldr	r3, [r7, #12]
  4080e8:	3b20      	subs	r3, #32
  4080ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4080ec:	68fb      	ldr	r3, [r7, #12]
}
  4080ee:	4618      	mov	r0, r3
  4080f0:	3714      	adds	r7, #20
  4080f2:	46bd      	mov	sp, r7
  4080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4080f8:	4770      	bx	lr
  4080fa:	bf00      	nop

004080fc <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  4080fc:	4b06      	ldr	r3, [pc, #24]	; (408118 <pxCurrentTCBConst2>)
  4080fe:	6819      	ldr	r1, [r3, #0]
  408100:	6808      	ldr	r0, [r1, #0]
  408102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  408106:	f380 8809 	msr	PSP, r0
  40810a:	f04f 0000 	mov.w	r0, #0
  40810e:	f380 8811 	msr	BASEPRI, r0
  408112:	f04e 0e0d 	orr.w	lr, lr, #13
  408116:	4770      	bx	lr

00408118 <pxCurrentTCBConst2>:
  408118:	2000868c 	.word	0x2000868c

0040811c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40811c:	4803      	ldr	r0, [pc, #12]	; (40812c <prvPortStartFirstTask+0x10>)
  40811e:	6800      	ldr	r0, [r0, #0]
  408120:	6800      	ldr	r0, [r0, #0]
  408122:	f380 8808 	msr	MSP, r0
  408126:	b662      	cpsie	i
  408128:	df00      	svc	0
  40812a:	bf00      	nop
  40812c:	e000ed08 	.word	0xe000ed08

00408130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  408130:	b580      	push	{r7, lr}
  408132:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  408134:	4b0a      	ldr	r3, [pc, #40]	; (408160 <xPortStartScheduler+0x30>)
  408136:	4a0a      	ldr	r2, [pc, #40]	; (408160 <xPortStartScheduler+0x30>)
  408138:	6812      	ldr	r2, [r2, #0]
  40813a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40813e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  408140:	4b07      	ldr	r3, [pc, #28]	; (408160 <xPortStartScheduler+0x30>)
  408142:	4a07      	ldr	r2, [pc, #28]	; (408160 <xPortStartScheduler+0x30>)
  408144:	6812      	ldr	r2, [r2, #0]
  408146:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40814a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  40814c:	4b05      	ldr	r3, [pc, #20]	; (408164 <xPortStartScheduler+0x34>)
  40814e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  408150:	4b05      	ldr	r3, [pc, #20]	; (408168 <xPortStartScheduler+0x38>)
  408152:	2200      	movs	r2, #0
  408154:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  408156:	4b05      	ldr	r3, [pc, #20]	; (40816c <xPortStartScheduler+0x3c>)
  408158:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40815a:	2300      	movs	r3, #0
}
  40815c:	4618      	mov	r0, r3
  40815e:	bd80      	pop	{r7, pc}
  408160:	e000ed20 	.word	0xe000ed20
  408164:	00408251 	.word	0x00408251
  408168:	20000358 	.word	0x20000358
  40816c:	0040811d 	.word	0x0040811d

00408170 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  408170:	b480      	push	{r7}
  408172:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  408174:	4b03      	ldr	r3, [pc, #12]	; (408184 <vPortYieldFromISR+0x14>)
  408176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40817a:	601a      	str	r2, [r3, #0]
}
  40817c:	46bd      	mov	sp, r7
  40817e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408182:	4770      	bx	lr
  408184:	e000ed04 	.word	0xe000ed04

00408188 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  408188:	b580      	push	{r7, lr}
  40818a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  40818c:	4b03      	ldr	r3, [pc, #12]	; (40819c <vPortEnterCritical+0x14>)
  40818e:	4798      	blx	r3
	uxCriticalNesting++;
  408190:	4b03      	ldr	r3, [pc, #12]	; (4081a0 <vPortEnterCritical+0x18>)
  408192:	681b      	ldr	r3, [r3, #0]
  408194:	1c5a      	adds	r2, r3, #1
  408196:	4b02      	ldr	r3, [pc, #8]	; (4081a0 <vPortEnterCritical+0x18>)
  408198:	601a      	str	r2, [r3, #0]
}
  40819a:	bd80      	pop	{r7, pc}
  40819c:	004081cd 	.word	0x004081cd
  4081a0:	20000358 	.word	0x20000358

004081a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4081a4:	b580      	push	{r7, lr}
  4081a6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  4081a8:	4b06      	ldr	r3, [pc, #24]	; (4081c4 <vPortExitCritical+0x20>)
  4081aa:	681b      	ldr	r3, [r3, #0]
  4081ac:	1e5a      	subs	r2, r3, #1
  4081ae:	4b05      	ldr	r3, [pc, #20]	; (4081c4 <vPortExitCritical+0x20>)
  4081b0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
  4081b2:	4b04      	ldr	r3, [pc, #16]	; (4081c4 <vPortExitCritical+0x20>)
  4081b4:	681b      	ldr	r3, [r3, #0]
  4081b6:	2b00      	cmp	r3, #0
  4081b8:	d102      	bne.n	4081c0 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  4081ba:	2000      	movs	r0, #0
  4081bc:	4b02      	ldr	r3, [pc, #8]	; (4081c8 <vPortExitCritical+0x24>)
  4081be:	4798      	blx	r3
	}
}
  4081c0:	bd80      	pop	{r7, pc}
  4081c2:	bf00      	nop
  4081c4:	20000358 	.word	0x20000358
  4081c8:	004081e1 	.word	0x004081e1

004081cc <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  4081cc:	f3ef 8011 	mrs	r0, BASEPRI
  4081d0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4081d4:	f381 8811 	msr	BASEPRI, r1
  4081d8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  4081da:	2300      	movs	r3, #0
}
  4081dc:	4618      	mov	r0, r3
  4081de:	bf00      	nop

004081e0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  4081e0:	f380 8811 	msr	BASEPRI, r0
  4081e4:	4770      	bx	lr
  4081e6:	bf00      	nop

004081e8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  4081e8:	f3ef 8009 	mrs	r0, PSP
  4081ec:	4b0c      	ldr	r3, [pc, #48]	; (408220 <pxCurrentTCBConst>)
  4081ee:	681a      	ldr	r2, [r3, #0]
  4081f0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4081f4:	6010      	str	r0, [r2, #0]
  4081f6:	e92d 4008 	stmdb	sp!, {r3, lr}
  4081fa:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4081fe:	f380 8811 	msr	BASEPRI, r0
  408202:	f001 f861 	bl	4092c8 <vTaskSwitchContext>
  408206:	f04f 0000 	mov.w	r0, #0
  40820a:	f380 8811 	msr	BASEPRI, r0
  40820e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  408212:	6819      	ldr	r1, [r3, #0]
  408214:	6808      	ldr	r0, [r1, #0]
  408216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40821a:	f380 8809 	msr	PSP, r0
  40821e:	4770      	bx	lr

00408220 <pxCurrentTCBConst>:
  408220:	2000868c 	.word	0x2000868c

00408224 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  408224:	b580      	push	{r7, lr}
  408226:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  408228:	4b05      	ldr	r3, [pc, #20]	; (408240 <SysTick_Handler+0x1c>)
  40822a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40822e:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  408230:	4b04      	ldr	r3, [pc, #16]	; (408244 <SysTick_Handler+0x20>)
  408232:	4798      	blx	r3
	{
		vTaskIncrementTick();
  408234:	4b04      	ldr	r3, [pc, #16]	; (408248 <SysTick_Handler+0x24>)
  408236:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  408238:	2000      	movs	r0, #0
  40823a:	4b04      	ldr	r3, [pc, #16]	; (40824c <SysTick_Handler+0x28>)
  40823c:	4798      	blx	r3
}
  40823e:	bd80      	pop	{r7, pc}
  408240:	e000ed04 	.word	0xe000ed04
  408244:	004081cd 	.word	0x004081cd
  408248:	00409181 	.word	0x00409181
  40824c:	004081e1 	.word	0x004081e1

00408250 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  408250:	b598      	push	{r3, r4, r7, lr}
  408252:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  408254:	4c06      	ldr	r4, [pc, #24]	; (408270 <vPortSetupTimerInterrupt+0x20>)
  408256:	4b07      	ldr	r3, [pc, #28]	; (408274 <vPortSetupTimerInterrupt+0x24>)
  408258:	4798      	blx	r3
  40825a:	4602      	mov	r2, r0
  40825c:	4b06      	ldr	r3, [pc, #24]	; (408278 <vPortSetupTimerInterrupt+0x28>)
  40825e:	fba3 1302 	umull	r1, r3, r3, r2
  408262:	099b      	lsrs	r3, r3, #6
  408264:	3b01      	subs	r3, #1
  408266:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  408268:	4b04      	ldr	r3, [pc, #16]	; (40827c <vPortSetupTimerInterrupt+0x2c>)
  40826a:	2207      	movs	r2, #7
  40826c:	601a      	str	r2, [r3, #0]
}
  40826e:	bd98      	pop	{r3, r4, r7, pc}
  408270:	e000e014 	.word	0xe000e014
  408274:	00408095 	.word	0x00408095
  408278:	10624dd3 	.word	0x10624dd3
  40827c:	e000e010 	.word	0xe000e010

00408280 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  408280:	b580      	push	{r7, lr}
  408282:	b086      	sub	sp, #24
  408284:	af00      	add	r7, sp, #0
  408286:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  408288:	2300      	movs	r3, #0
  40828a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  40828c:	4b36      	ldr	r3, [pc, #216]	; (408368 <pvPortMalloc+0xe8>)
  40828e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  408290:	4b36      	ldr	r3, [pc, #216]	; (40836c <pvPortMalloc+0xec>)
  408292:	681b      	ldr	r3, [r3, #0]
  408294:	2b00      	cmp	r3, #0
  408296:	d101      	bne.n	40829c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  408298:	4b35      	ldr	r3, [pc, #212]	; (408370 <pvPortMalloc+0xf0>)
  40829a:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  40829c:	687b      	ldr	r3, [r7, #4]
  40829e:	2b00      	cmp	r3, #0
  4082a0:	d00d      	beq.n	4082be <pvPortMalloc+0x3e>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4082a2:	2310      	movs	r3, #16
  4082a4:	687a      	ldr	r2, [r7, #4]
  4082a6:	4413      	add	r3, r2
  4082a8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4082aa:	687b      	ldr	r3, [r7, #4]
  4082ac:	f003 0307 	and.w	r3, r3, #7
  4082b0:	2b00      	cmp	r3, #0
  4082b2:	d004      	beq.n	4082be <pvPortMalloc+0x3e>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4082b4:	687b      	ldr	r3, [r7, #4]
  4082b6:	f023 0307 	bic.w	r3, r3, #7
  4082ba:	3308      	adds	r3, #8
  4082bc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4082be:	687b      	ldr	r3, [r7, #4]
  4082c0:	2b00      	cmp	r3, #0
  4082c2:	d045      	beq.n	408350 <pvPortMalloc+0xd0>
  4082c4:	f247 63f0 	movw	r3, #30448	; 0x76f0
  4082c8:	687a      	ldr	r2, [r7, #4]
  4082ca:	429a      	cmp	r2, r3
  4082cc:	d240      	bcs.n	408350 <pvPortMalloc+0xd0>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4082ce:	4b29      	ldr	r3, [pc, #164]	; (408374 <pvPortMalloc+0xf4>)
  4082d0:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4082d2:	4b28      	ldr	r3, [pc, #160]	; (408374 <pvPortMalloc+0xf4>)
  4082d4:	681b      	ldr	r3, [r3, #0]
  4082d6:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4082d8:	e004      	b.n	4082e4 <pvPortMalloc+0x64>
			{
				pxPreviousBlock = pxBlock;
  4082da:	697b      	ldr	r3, [r7, #20]
  4082dc:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4082de:	697b      	ldr	r3, [r7, #20]
  4082e0:	681b      	ldr	r3, [r3, #0]
  4082e2:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4082e4:	697b      	ldr	r3, [r7, #20]
  4082e6:	685a      	ldr	r2, [r3, #4]
  4082e8:	687b      	ldr	r3, [r7, #4]
  4082ea:	429a      	cmp	r2, r3
  4082ec:	d203      	bcs.n	4082f6 <pvPortMalloc+0x76>
  4082ee:	697b      	ldr	r3, [r7, #20]
  4082f0:	681b      	ldr	r3, [r3, #0]
  4082f2:	2b00      	cmp	r3, #0
  4082f4:	d1f1      	bne.n	4082da <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4082f6:	4b1d      	ldr	r3, [pc, #116]	; (40836c <pvPortMalloc+0xec>)
  4082f8:	681b      	ldr	r3, [r3, #0]
  4082fa:	697a      	ldr	r2, [r7, #20]
  4082fc:	429a      	cmp	r2, r3
  4082fe:	d027      	beq.n	408350 <pvPortMalloc+0xd0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  408300:	693b      	ldr	r3, [r7, #16]
  408302:	681a      	ldr	r2, [r3, #0]
  408304:	2310      	movs	r3, #16
  408306:	4413      	add	r3, r2
  408308:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40830a:	697b      	ldr	r3, [r7, #20]
  40830c:	681a      	ldr	r2, [r3, #0]
  40830e:	693b      	ldr	r3, [r7, #16]
  408310:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  408312:	697b      	ldr	r3, [r7, #20]
  408314:	685a      	ldr	r2, [r3, #4]
  408316:	687b      	ldr	r3, [r7, #4]
  408318:	1ad2      	subs	r2, r2, r3
  40831a:	2310      	movs	r3, #16
  40831c:	005b      	lsls	r3, r3, #1
  40831e:	429a      	cmp	r2, r3
  408320:	d90f      	bls.n	408342 <pvPortMalloc+0xc2>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  408322:	697a      	ldr	r2, [r7, #20]
  408324:	687b      	ldr	r3, [r7, #4]
  408326:	4413      	add	r3, r2
  408328:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40832a:	697b      	ldr	r3, [r7, #20]
  40832c:	685a      	ldr	r2, [r3, #4]
  40832e:	687b      	ldr	r3, [r7, #4]
  408330:	1ad2      	subs	r2, r2, r3
  408332:	68bb      	ldr	r3, [r7, #8]
  408334:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  408336:	697b      	ldr	r3, [r7, #20]
  408338:	687a      	ldr	r2, [r7, #4]
  40833a:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40833c:	68b8      	ldr	r0, [r7, #8]
  40833e:	4b0e      	ldr	r3, [pc, #56]	; (408378 <pvPortMalloc+0xf8>)
  408340:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  408342:	4b0e      	ldr	r3, [pc, #56]	; (40837c <pvPortMalloc+0xfc>)
  408344:	681a      	ldr	r2, [r3, #0]
  408346:	697b      	ldr	r3, [r7, #20]
  408348:	685b      	ldr	r3, [r3, #4]
  40834a:	1ad2      	subs	r2, r2, r3
  40834c:	4b0b      	ldr	r3, [pc, #44]	; (40837c <pvPortMalloc+0xfc>)
  40834e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
  408350:	4b0b      	ldr	r3, [pc, #44]	; (408380 <pvPortMalloc+0x100>)
  408352:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  408354:	68fb      	ldr	r3, [r7, #12]
  408356:	2b00      	cmp	r3, #0
  408358:	d101      	bne.n	40835e <pvPortMalloc+0xde>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  40835a:	4b0a      	ldr	r3, [pc, #40]	; (408384 <pvPortMalloc+0x104>)
  40835c:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  40835e:	68fb      	ldr	r3, [r7, #12]
}
  408360:	4618      	mov	r0, r3
  408362:	3718      	adds	r7, #24
  408364:	46bd      	mov	sp, r7
  408366:	bd80      	pop	{r7, pc}
  408368:	00408fe9 	.word	0x00408fe9
  40836c:	20008688 	.word	0x20008688
  408370:	004083dd 	.word	0x004083dd
  408374:	20008680 	.word	0x20008680
  408378:	0040846d 	.word	0x0040846d
  40837c:	2000035c 	.word	0x2000035c
  408380:	00409005 	.word	0x00409005
  408384:	0040c025 	.word	0x0040c025

00408388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  408388:	b580      	push	{r7, lr}
  40838a:	b084      	sub	sp, #16
  40838c:	af00      	add	r7, sp, #0
  40838e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  408390:	687b      	ldr	r3, [r7, #4]
  408392:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  408394:	687b      	ldr	r3, [r7, #4]
  408396:	2b00      	cmp	r3, #0
  408398:	d014      	beq.n	4083c4 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  40839a:	2310      	movs	r3, #16
  40839c:	425b      	negs	r3, r3
  40839e:	68fa      	ldr	r2, [r7, #12]
  4083a0:	4413      	add	r3, r2
  4083a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4083a4:	68fb      	ldr	r3, [r7, #12]
  4083a6:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4083a8:	4b08      	ldr	r3, [pc, #32]	; (4083cc <vPortFree+0x44>)
  4083aa:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4083ac:	68bb      	ldr	r3, [r7, #8]
  4083ae:	685a      	ldr	r2, [r3, #4]
  4083b0:	4b07      	ldr	r3, [pc, #28]	; (4083d0 <vPortFree+0x48>)
  4083b2:	681b      	ldr	r3, [r3, #0]
  4083b4:	441a      	add	r2, r3
  4083b6:	4b06      	ldr	r3, [pc, #24]	; (4083d0 <vPortFree+0x48>)
  4083b8:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4083ba:	68b8      	ldr	r0, [r7, #8]
  4083bc:	4b05      	ldr	r3, [pc, #20]	; (4083d4 <vPortFree+0x4c>)
  4083be:	4798      	blx	r3
		}
		xTaskResumeAll();
  4083c0:	4b05      	ldr	r3, [pc, #20]	; (4083d8 <vPortFree+0x50>)
  4083c2:	4798      	blx	r3
	}
}
  4083c4:	3710      	adds	r7, #16
  4083c6:	46bd      	mov	sp, r7
  4083c8:	bd80      	pop	{r7, pc}
  4083ca:	bf00      	nop
  4083cc:	00408fe9 	.word	0x00408fe9
  4083d0:	2000035c 	.word	0x2000035c
  4083d4:	0040846d 	.word	0x0040846d
  4083d8:	00409005 	.word	0x00409005

004083dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4083dc:	b580      	push	{r7, lr}
  4083de:	b082      	sub	sp, #8
  4083e0:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4083e2:	4b1d      	ldr	r3, [pc, #116]	; (408458 <prvHeapInit+0x7c>)
  4083e4:	4a1d      	ldr	r2, [pc, #116]	; (40845c <prvHeapInit+0x80>)
  4083e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4083e8:	4b1b      	ldr	r3, [pc, #108]	; (408458 <prvHeapInit+0x7c>)
  4083ea:	2200      	movs	r2, #0
  4083ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4083ee:	f247 62f0 	movw	r2, #30448	; 0x76f0
  4083f2:	4b1a      	ldr	r3, [pc, #104]	; (40845c <prvHeapInit+0x80>)
  4083f4:	4413      	add	r3, r2
  4083f6:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  4083f8:	2310      	movs	r3, #16
  4083fa:	425b      	negs	r3, r3
  4083fc:	687a      	ldr	r2, [r7, #4]
  4083fe:	4413      	add	r3, r2
  408400:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  408402:	4b17      	ldr	r3, [pc, #92]	; (408460 <prvHeapInit+0x84>)
  408404:	687a      	ldr	r2, [r7, #4]
  408406:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  408408:	4b15      	ldr	r3, [pc, #84]	; (408460 <prvHeapInit+0x84>)
  40840a:	681b      	ldr	r3, [r3, #0]
  40840c:	f003 0307 	and.w	r3, r3, #7
  408410:	2b00      	cmp	r3, #0
  408412:	d003      	beq.n	40841c <prvHeapInit+0x40>
  408414:	4b13      	ldr	r3, [pc, #76]	; (408464 <prvHeapInit+0x88>)
  408416:	4798      	blx	r3
  408418:	bf00      	nop
  40841a:	e7fd      	b.n	408418 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  40841c:	4b10      	ldr	r3, [pc, #64]	; (408460 <prvHeapInit+0x84>)
  40841e:	681b      	ldr	r3, [r3, #0]
  408420:	2200      	movs	r2, #0
  408422:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  408424:	4b0e      	ldr	r3, [pc, #56]	; (408460 <prvHeapInit+0x84>)
  408426:	681b      	ldr	r3, [r3, #0]
  408428:	2200      	movs	r2, #0
  40842a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  40842c:	4b0b      	ldr	r3, [pc, #44]	; (40845c <prvHeapInit+0x80>)
  40842e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  408430:	f247 62f0 	movw	r2, #30448	; 0x76f0
  408434:	2310      	movs	r3, #16
  408436:	1ad2      	subs	r2, r2, r3
  408438:	683b      	ldr	r3, [r7, #0]
  40843a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  40843c:	4b08      	ldr	r3, [pc, #32]	; (408460 <prvHeapInit+0x84>)
  40843e:	681a      	ldr	r2, [r3, #0]
  408440:	683b      	ldr	r3, [r7, #0]
  408442:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  408444:	4b08      	ldr	r3, [pc, #32]	; (408468 <prvHeapInit+0x8c>)
  408446:	681a      	ldr	r2, [r3, #0]
  408448:	2310      	movs	r3, #16
  40844a:	1ad2      	subs	r2, r2, r3
  40844c:	4b06      	ldr	r3, [pc, #24]	; (408468 <prvHeapInit+0x8c>)
  40844e:	601a      	str	r2, [r3, #0]
}
  408450:	3708      	adds	r7, #8
  408452:	46bd      	mov	sp, r7
  408454:	bd80      	pop	{r7, pc}
  408456:	bf00      	nop
  408458:	20008680 	.word	0x20008680
  40845c:	20000f88 	.word	0x20000f88
  408460:	20008688 	.word	0x20008688
  408464:	004081cd 	.word	0x004081cd
  408468:	2000035c 	.word	0x2000035c

0040846c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  40846c:	b480      	push	{r7}
  40846e:	b085      	sub	sp, #20
  408470:	af00      	add	r7, sp, #0
  408472:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  408474:	4b27      	ldr	r3, [pc, #156]	; (408514 <prvInsertBlockIntoFreeList+0xa8>)
  408476:	60fb      	str	r3, [r7, #12]
  408478:	e002      	b.n	408480 <prvInsertBlockIntoFreeList+0x14>
  40847a:	68fb      	ldr	r3, [r7, #12]
  40847c:	681b      	ldr	r3, [r3, #0]
  40847e:	60fb      	str	r3, [r7, #12]
  408480:	68fb      	ldr	r3, [r7, #12]
  408482:	681a      	ldr	r2, [r3, #0]
  408484:	687b      	ldr	r3, [r7, #4]
  408486:	429a      	cmp	r2, r3
  408488:	d3f7      	bcc.n	40847a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  40848a:	68fb      	ldr	r3, [r7, #12]
  40848c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  40848e:	68fb      	ldr	r3, [r7, #12]
  408490:	685b      	ldr	r3, [r3, #4]
  408492:	68ba      	ldr	r2, [r7, #8]
  408494:	441a      	add	r2, r3
  408496:	687b      	ldr	r3, [r7, #4]
  408498:	429a      	cmp	r2, r3
  40849a:	d108      	bne.n	4084ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  40849c:	68fb      	ldr	r3, [r7, #12]
  40849e:	685a      	ldr	r2, [r3, #4]
  4084a0:	687b      	ldr	r3, [r7, #4]
  4084a2:	685b      	ldr	r3, [r3, #4]
  4084a4:	441a      	add	r2, r3
  4084a6:	68fb      	ldr	r3, [r7, #12]
  4084a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4084aa:	68fb      	ldr	r3, [r7, #12]
  4084ac:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4084ae:	687b      	ldr	r3, [r7, #4]
  4084b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4084b2:	687b      	ldr	r3, [r7, #4]
  4084b4:	685b      	ldr	r3, [r3, #4]
  4084b6:	68ba      	ldr	r2, [r7, #8]
  4084b8:	441a      	add	r2, r3
  4084ba:	68fb      	ldr	r3, [r7, #12]
  4084bc:	681b      	ldr	r3, [r3, #0]
  4084be:	429a      	cmp	r2, r3
  4084c0:	d118      	bne.n	4084f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4084c2:	68fb      	ldr	r3, [r7, #12]
  4084c4:	681a      	ldr	r2, [r3, #0]
  4084c6:	4b14      	ldr	r3, [pc, #80]	; (408518 <prvInsertBlockIntoFreeList+0xac>)
  4084c8:	681b      	ldr	r3, [r3, #0]
  4084ca:	429a      	cmp	r2, r3
  4084cc:	d00d      	beq.n	4084ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4084ce:	687b      	ldr	r3, [r7, #4]
  4084d0:	685a      	ldr	r2, [r3, #4]
  4084d2:	68fb      	ldr	r3, [r7, #12]
  4084d4:	681b      	ldr	r3, [r3, #0]
  4084d6:	685b      	ldr	r3, [r3, #4]
  4084d8:	441a      	add	r2, r3
  4084da:	687b      	ldr	r3, [r7, #4]
  4084dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4084de:	68fb      	ldr	r3, [r7, #12]
  4084e0:	681b      	ldr	r3, [r3, #0]
  4084e2:	681a      	ldr	r2, [r3, #0]
  4084e4:	687b      	ldr	r3, [r7, #4]
  4084e6:	601a      	str	r2, [r3, #0]
  4084e8:	e008      	b.n	4084fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4084ea:	4b0b      	ldr	r3, [pc, #44]	; (408518 <prvInsertBlockIntoFreeList+0xac>)
  4084ec:	681a      	ldr	r2, [r3, #0]
  4084ee:	687b      	ldr	r3, [r7, #4]
  4084f0:	601a      	str	r2, [r3, #0]
  4084f2:	e003      	b.n	4084fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4084f4:	68fb      	ldr	r3, [r7, #12]
  4084f6:	681a      	ldr	r2, [r3, #0]
  4084f8:	687b      	ldr	r3, [r7, #4]
  4084fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4084fc:	68fa      	ldr	r2, [r7, #12]
  4084fe:	687b      	ldr	r3, [r7, #4]
  408500:	429a      	cmp	r2, r3
  408502:	d002      	beq.n	40850a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  408504:	68fb      	ldr	r3, [r7, #12]
  408506:	687a      	ldr	r2, [r7, #4]
  408508:	601a      	str	r2, [r3, #0]
	}
}
  40850a:	3714      	adds	r7, #20
  40850c:	46bd      	mov	sp, r7
  40850e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408512:	4770      	bx	lr
  408514:	20008680 	.word	0x20008680
  408518:	20008688 	.word	0x20008688

0040851c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  40851c:	b580      	push	{r7, lr}
  40851e:	b082      	sub	sp, #8
  408520:	af00      	add	r7, sp, #0
  408522:	6078      	str	r0, [r7, #4]
  408524:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  408526:	687b      	ldr	r3, [r7, #4]
  408528:	2b00      	cmp	r3, #0
  40852a:	d103      	bne.n	408534 <xQueueGenericReset+0x18>
  40852c:	4b27      	ldr	r3, [pc, #156]	; (4085cc <xQueueGenericReset+0xb0>)
  40852e:	4798      	blx	r3
  408530:	bf00      	nop
  408532:	e7fd      	b.n	408530 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  408534:	4b26      	ldr	r3, [pc, #152]	; (4085d0 <xQueueGenericReset+0xb4>)
  408536:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  408538:	687b      	ldr	r3, [r7, #4]
  40853a:	681a      	ldr	r2, [r3, #0]
  40853c:	687b      	ldr	r3, [r7, #4]
  40853e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408540:	6879      	ldr	r1, [r7, #4]
  408542:	6c09      	ldr	r1, [r1, #64]	; 0x40
  408544:	fb01 f303 	mul.w	r3, r1, r3
  408548:	441a      	add	r2, r3
  40854a:	687b      	ldr	r3, [r7, #4]
  40854c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40854e:	687b      	ldr	r3, [r7, #4]
  408550:	2200      	movs	r2, #0
  408552:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  408554:	687b      	ldr	r3, [r7, #4]
  408556:	681a      	ldr	r2, [r3, #0]
  408558:	687b      	ldr	r3, [r7, #4]
  40855a:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  40855c:	687b      	ldr	r3, [r7, #4]
  40855e:	681a      	ldr	r2, [r3, #0]
  408560:	687b      	ldr	r3, [r7, #4]
  408562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408564:	3b01      	subs	r3, #1
  408566:	6879      	ldr	r1, [r7, #4]
  408568:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40856a:	fb01 f303 	mul.w	r3, r1, r3
  40856e:	441a      	add	r2, r3
  408570:	687b      	ldr	r3, [r7, #4]
  408572:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  408574:	687b      	ldr	r3, [r7, #4]
  408576:	f04f 32ff 	mov.w	r2, #4294967295
  40857a:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40857c:	687b      	ldr	r3, [r7, #4]
  40857e:	f04f 32ff 	mov.w	r2, #4294967295
  408582:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  408584:	683b      	ldr	r3, [r7, #0]
  408586:	2b00      	cmp	r3, #0
  408588:	d10e      	bne.n	4085a8 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40858a:	687b      	ldr	r3, [r7, #4]
  40858c:	691b      	ldr	r3, [r3, #16]
  40858e:	2b00      	cmp	r3, #0
  408590:	d014      	beq.n	4085bc <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  408592:	687b      	ldr	r3, [r7, #4]
  408594:	3310      	adds	r3, #16
  408596:	4618      	mov	r0, r3
  408598:	4b0e      	ldr	r3, [pc, #56]	; (4085d4 <xQueueGenericReset+0xb8>)
  40859a:	4798      	blx	r3
  40859c:	4603      	mov	r3, r0
  40859e:	2b01      	cmp	r3, #1
  4085a0:	d10c      	bne.n	4085bc <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4085a2:	4b0d      	ldr	r3, [pc, #52]	; (4085d8 <xQueueGenericReset+0xbc>)
  4085a4:	4798      	blx	r3
  4085a6:	e009      	b.n	4085bc <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4085a8:	687b      	ldr	r3, [r7, #4]
  4085aa:	3310      	adds	r3, #16
  4085ac:	4618      	mov	r0, r3
  4085ae:	4b0b      	ldr	r3, [pc, #44]	; (4085dc <xQueueGenericReset+0xc0>)
  4085b0:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4085b2:	687b      	ldr	r3, [r7, #4]
  4085b4:	3324      	adds	r3, #36	; 0x24
  4085b6:	4618      	mov	r0, r3
  4085b8:	4b08      	ldr	r3, [pc, #32]	; (4085dc <xQueueGenericReset+0xc0>)
  4085ba:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4085bc:	4b08      	ldr	r3, [pc, #32]	; (4085e0 <xQueueGenericReset+0xc4>)
  4085be:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4085c0:	2301      	movs	r3, #1
}
  4085c2:	4618      	mov	r0, r3
  4085c4:	3708      	adds	r7, #8
  4085c6:	46bd      	mov	sp, r7
  4085c8:	bd80      	pop	{r7, pc}
  4085ca:	bf00      	nop
  4085cc:	004081cd 	.word	0x004081cd
  4085d0:	00408189 	.word	0x00408189
  4085d4:	0040944d 	.word	0x0040944d
  4085d8:	00408171 	.word	0x00408171
  4085dc:	00407e99 	.word	0x00407e99
  4085e0:	004081a5 	.word	0x004081a5

004085e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4085e4:	b580      	push	{r7, lr}
  4085e6:	b088      	sub	sp, #32
  4085e8:	af00      	add	r7, sp, #0
  4085ea:	60f8      	str	r0, [r7, #12]
  4085ec:	60b9      	str	r1, [r7, #8]
  4085ee:	4613      	mov	r3, r2
  4085f0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4085f2:	2300      	movs	r3, #0
  4085f4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4085f6:	68fb      	ldr	r3, [r7, #12]
  4085f8:	2b00      	cmp	r3, #0
  4085fa:	d02a      	beq.n	408652 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4085fc:	2050      	movs	r0, #80	; 0x50
  4085fe:	4b1b      	ldr	r3, [pc, #108]	; (40866c <xQueueGenericCreate+0x88>)
  408600:	4798      	blx	r3
  408602:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  408604:	69bb      	ldr	r3, [r7, #24]
  408606:	2b00      	cmp	r3, #0
  408608:	d023      	beq.n	408652 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  40860a:	68fb      	ldr	r3, [r7, #12]
  40860c:	68ba      	ldr	r2, [r7, #8]
  40860e:	fb02 f303 	mul.w	r3, r2, r3
  408612:	3301      	adds	r3, #1
  408614:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  408616:	6978      	ldr	r0, [r7, #20]
  408618:	4b14      	ldr	r3, [pc, #80]	; (40866c <xQueueGenericCreate+0x88>)
  40861a:	4798      	blx	r3
  40861c:	4602      	mov	r2, r0
  40861e:	69bb      	ldr	r3, [r7, #24]
  408620:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  408622:	69bb      	ldr	r3, [r7, #24]
  408624:	681b      	ldr	r3, [r3, #0]
  408626:	2b00      	cmp	r3, #0
  408628:	d010      	beq.n	40864c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  40862a:	69bb      	ldr	r3, [r7, #24]
  40862c:	68fa      	ldr	r2, [r7, #12]
  40862e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  408630:	69bb      	ldr	r3, [r7, #24]
  408632:	68ba      	ldr	r2, [r7, #8]
  408634:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  408636:	69b8      	ldr	r0, [r7, #24]
  408638:	2101      	movs	r1, #1
  40863a:	4b0d      	ldr	r3, [pc, #52]	; (408670 <xQueueGenericCreate+0x8c>)
  40863c:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  40863e:	69bb      	ldr	r3, [r7, #24]
  408640:	79fa      	ldrb	r2, [r7, #7]
  408642:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  408646:	69bb      	ldr	r3, [r7, #24]
  408648:	61fb      	str	r3, [r7, #28]
  40864a:	e002      	b.n	408652 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  40864c:	69b8      	ldr	r0, [r7, #24]
  40864e:	4b09      	ldr	r3, [pc, #36]	; (408674 <xQueueGenericCreate+0x90>)
  408650:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  408652:	69fb      	ldr	r3, [r7, #28]
  408654:	2b00      	cmp	r3, #0
  408656:	d103      	bne.n	408660 <xQueueGenericCreate+0x7c>
  408658:	4b07      	ldr	r3, [pc, #28]	; (408678 <xQueueGenericCreate+0x94>)
  40865a:	4798      	blx	r3
  40865c:	bf00      	nop
  40865e:	e7fd      	b.n	40865c <xQueueGenericCreate+0x78>

	return xReturn;
  408660:	69fb      	ldr	r3, [r7, #28]
}
  408662:	4618      	mov	r0, r3
  408664:	3720      	adds	r7, #32
  408666:	46bd      	mov	sp, r7
  408668:	bd80      	pop	{r7, pc}
  40866a:	bf00      	nop
  40866c:	00408281 	.word	0x00408281
  408670:	0040851d 	.word	0x0040851d
  408674:	00408389 	.word	0x00408389
  408678:	004081cd 	.word	0x004081cd

0040867c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40867c:	b580      	push	{r7, lr}
  40867e:	b088      	sub	sp, #32
  408680:	af00      	add	r7, sp, #0
  408682:	60f8      	str	r0, [r7, #12]
  408684:	60b9      	str	r1, [r7, #8]
  408686:	607a      	str	r2, [r7, #4]
  408688:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40868a:	2300      	movs	r3, #0
  40868c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40868e:	68fb      	ldr	r3, [r7, #12]
  408690:	2b00      	cmp	r3, #0
  408692:	d103      	bne.n	40869c <xQueueGenericSend+0x20>
  408694:	4b48      	ldr	r3, [pc, #288]	; (4087b8 <xQueueGenericSend+0x13c>)
  408696:	4798      	blx	r3
  408698:	bf00      	nop
  40869a:	e7fd      	b.n	408698 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40869c:	68bb      	ldr	r3, [r7, #8]
  40869e:	2b00      	cmp	r3, #0
  4086a0:	d103      	bne.n	4086aa <xQueueGenericSend+0x2e>
  4086a2:	68fb      	ldr	r3, [r7, #12]
  4086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4086a6:	2b00      	cmp	r3, #0
  4086a8:	d101      	bne.n	4086ae <xQueueGenericSend+0x32>
  4086aa:	2301      	movs	r3, #1
  4086ac:	e000      	b.n	4086b0 <xQueueGenericSend+0x34>
  4086ae:	2300      	movs	r3, #0
  4086b0:	2b00      	cmp	r3, #0
  4086b2:	d103      	bne.n	4086bc <xQueueGenericSend+0x40>
  4086b4:	4b40      	ldr	r3, [pc, #256]	; (4087b8 <xQueueGenericSend+0x13c>)
  4086b6:	4798      	blx	r3
  4086b8:	bf00      	nop
  4086ba:	e7fd      	b.n	4086b8 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4086bc:	4b3f      	ldr	r3, [pc, #252]	; (4087bc <xQueueGenericSend+0x140>)
  4086be:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4086c0:	68fb      	ldr	r3, [r7, #12]
  4086c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4086c4:	68fb      	ldr	r3, [r7, #12]
  4086c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4086c8:	429a      	cmp	r2, r3
  4086ca:	d216      	bcs.n	4086fa <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4086cc:	68f8      	ldr	r0, [r7, #12]
  4086ce:	68b9      	ldr	r1, [r7, #8]
  4086d0:	683a      	ldr	r2, [r7, #0]
  4086d2:	4b3b      	ldr	r3, [pc, #236]	; (4087c0 <xQueueGenericSend+0x144>)
  4086d4:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4086d6:	68fb      	ldr	r3, [r7, #12]
  4086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4086da:	2b00      	cmp	r3, #0
  4086dc:	d009      	beq.n	4086f2 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4086de:	68fb      	ldr	r3, [r7, #12]
  4086e0:	3324      	adds	r3, #36	; 0x24
  4086e2:	4618      	mov	r0, r3
  4086e4:	4b37      	ldr	r3, [pc, #220]	; (4087c4 <xQueueGenericSend+0x148>)
  4086e6:	4798      	blx	r3
  4086e8:	4603      	mov	r3, r0
  4086ea:	2b01      	cmp	r3, #1
  4086ec:	d101      	bne.n	4086f2 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  4086ee:	4b36      	ldr	r3, [pc, #216]	; (4087c8 <xQueueGenericSend+0x14c>)
  4086f0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4086f2:	4b36      	ldr	r3, [pc, #216]	; (4087cc <xQueueGenericSend+0x150>)
  4086f4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4086f6:	2301      	movs	r3, #1
  4086f8:	e059      	b.n	4087ae <xQueueGenericSend+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4086fa:	687b      	ldr	r3, [r7, #4]
  4086fc:	2b00      	cmp	r3, #0
  4086fe:	d103      	bne.n	408708 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  408700:	4b32      	ldr	r3, [pc, #200]	; (4087cc <xQueueGenericSend+0x150>)
  408702:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  408704:	2300      	movs	r3, #0
  408706:	e052      	b.n	4087ae <xQueueGenericSend+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
  408708:	69fb      	ldr	r3, [r7, #28]
  40870a:	2b00      	cmp	r3, #0
  40870c:	d106      	bne.n	40871c <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40870e:	f107 0314 	add.w	r3, r7, #20
  408712:	4618      	mov	r0, r3
  408714:	4b2e      	ldr	r3, [pc, #184]	; (4087d0 <xQueueGenericSend+0x154>)
  408716:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  408718:	2301      	movs	r3, #1
  40871a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40871c:	4b2b      	ldr	r3, [pc, #172]	; (4087cc <xQueueGenericSend+0x150>)
  40871e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  408720:	4b2c      	ldr	r3, [pc, #176]	; (4087d4 <xQueueGenericSend+0x158>)
  408722:	4798      	blx	r3
		prvLockQueue( pxQueue );
  408724:	4b25      	ldr	r3, [pc, #148]	; (4087bc <xQueueGenericSend+0x140>)
  408726:	4798      	blx	r3
  408728:	68fb      	ldr	r3, [r7, #12]
  40872a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40872c:	f1b3 3fff 	cmp.w	r3, #4294967295
  408730:	d102      	bne.n	408738 <xQueueGenericSend+0xbc>
  408732:	68fb      	ldr	r3, [r7, #12]
  408734:	2200      	movs	r2, #0
  408736:	645a      	str	r2, [r3, #68]	; 0x44
  408738:	68fb      	ldr	r3, [r7, #12]
  40873a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40873c:	f1b3 3fff 	cmp.w	r3, #4294967295
  408740:	d102      	bne.n	408748 <xQueueGenericSend+0xcc>
  408742:	68fb      	ldr	r3, [r7, #12]
  408744:	2200      	movs	r2, #0
  408746:	649a      	str	r2, [r3, #72]	; 0x48
  408748:	4b20      	ldr	r3, [pc, #128]	; (4087cc <xQueueGenericSend+0x150>)
  40874a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40874c:	f107 0214 	add.w	r2, r7, #20
  408750:	1d3b      	adds	r3, r7, #4
  408752:	4610      	mov	r0, r2
  408754:	4619      	mov	r1, r3
  408756:	4b20      	ldr	r3, [pc, #128]	; (4087d8 <xQueueGenericSend+0x15c>)
  408758:	4798      	blx	r3
  40875a:	4603      	mov	r3, r0
  40875c:	2b00      	cmp	r3, #0
  40875e:	d11e      	bne.n	40879e <xQueueGenericSend+0x122>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  408760:	68f8      	ldr	r0, [r7, #12]
  408762:	4b1e      	ldr	r3, [pc, #120]	; (4087dc <xQueueGenericSend+0x160>)
  408764:	4798      	blx	r3
  408766:	4603      	mov	r3, r0
  408768:	2b00      	cmp	r3, #0
  40876a:	d012      	beq.n	408792 <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40876c:	68fb      	ldr	r3, [r7, #12]
  40876e:	f103 0210 	add.w	r2, r3, #16
  408772:	687b      	ldr	r3, [r7, #4]
  408774:	4610      	mov	r0, r2
  408776:	4619      	mov	r1, r3
  408778:	4b19      	ldr	r3, [pc, #100]	; (4087e0 <xQueueGenericSend+0x164>)
  40877a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40877c:	68f8      	ldr	r0, [r7, #12]
  40877e:	4b19      	ldr	r3, [pc, #100]	; (4087e4 <xQueueGenericSend+0x168>)
  408780:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  408782:	4b19      	ldr	r3, [pc, #100]	; (4087e8 <xQueueGenericSend+0x16c>)
  408784:	4798      	blx	r3
  408786:	4603      	mov	r3, r0
  408788:	2b00      	cmp	r3, #0
  40878a:	d10f      	bne.n	4087ac <xQueueGenericSend+0x130>
				{
					portYIELD_WITHIN_API();
  40878c:	4b0e      	ldr	r3, [pc, #56]	; (4087c8 <xQueueGenericSend+0x14c>)
  40878e:	4798      	blx	r3
  408790:	e00c      	b.n	4087ac <xQueueGenericSend+0x130>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408792:	68f8      	ldr	r0, [r7, #12]
  408794:	4b13      	ldr	r3, [pc, #76]	; (4087e4 <xQueueGenericSend+0x168>)
  408796:	4798      	blx	r3
				( void ) xTaskResumeAll();
  408798:	4b13      	ldr	r3, [pc, #76]	; (4087e8 <xQueueGenericSend+0x16c>)
  40879a:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  40879c:	e78e      	b.n	4086bc <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40879e:	68f8      	ldr	r0, [r7, #12]
  4087a0:	4b10      	ldr	r3, [pc, #64]	; (4087e4 <xQueueGenericSend+0x168>)
  4087a2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4087a4:	4b10      	ldr	r3, [pc, #64]	; (4087e8 <xQueueGenericSend+0x16c>)
  4087a6:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4087a8:	2300      	movs	r3, #0
  4087aa:	e000      	b.n	4087ae <xQueueGenericSend+0x132>
		}
	}
  4087ac:	e786      	b.n	4086bc <xQueueGenericSend+0x40>
}
  4087ae:	4618      	mov	r0, r3
  4087b0:	3720      	adds	r7, #32
  4087b2:	46bd      	mov	sp, r7
  4087b4:	bd80      	pop	{r7, pc}
  4087b6:	bf00      	nop
  4087b8:	004081cd 	.word	0x004081cd
  4087bc:	00408189 	.word	0x00408189
  4087c0:	00408abd 	.word	0x00408abd
  4087c4:	0040944d 	.word	0x0040944d
  4087c8:	00408171 	.word	0x00408171
  4087cc:	004081a5 	.word	0x004081a5
  4087d0:	00409509 	.word	0x00409509
  4087d4:	00408fe9 	.word	0x00408fe9
  4087d8:	00409541 	.word	0x00409541
  4087dc:	00408ca9 	.word	0x00408ca9
  4087e0:	0040936d 	.word	0x0040936d
  4087e4:	00408bcd 	.word	0x00408bcd
  4087e8:	00409005 	.word	0x00409005

004087ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  4087ec:	b580      	push	{r7, lr}
  4087ee:	b086      	sub	sp, #24
  4087f0:	af00      	add	r7, sp, #0
  4087f2:	60f8      	str	r0, [r7, #12]
  4087f4:	60b9      	str	r1, [r7, #8]
  4087f6:	607a      	str	r2, [r7, #4]
  4087f8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  4087fa:	68fb      	ldr	r3, [r7, #12]
  4087fc:	2b00      	cmp	r3, #0
  4087fe:	d103      	bne.n	408808 <xQueueGenericSendFromISR+0x1c>
  408800:	4b25      	ldr	r3, [pc, #148]	; (408898 <xQueueGenericSendFromISR+0xac>)
  408802:	4798      	blx	r3
  408804:	bf00      	nop
  408806:	e7fd      	b.n	408804 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  408808:	68bb      	ldr	r3, [r7, #8]
  40880a:	2b00      	cmp	r3, #0
  40880c:	d103      	bne.n	408816 <xQueueGenericSendFromISR+0x2a>
  40880e:	68fb      	ldr	r3, [r7, #12]
  408810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408812:	2b00      	cmp	r3, #0
  408814:	d101      	bne.n	40881a <xQueueGenericSendFromISR+0x2e>
  408816:	2301      	movs	r3, #1
  408818:	e000      	b.n	40881c <xQueueGenericSendFromISR+0x30>
  40881a:	2300      	movs	r3, #0
  40881c:	2b00      	cmp	r3, #0
  40881e:	d103      	bne.n	408828 <xQueueGenericSendFromISR+0x3c>
  408820:	4b1d      	ldr	r3, [pc, #116]	; (408898 <xQueueGenericSendFromISR+0xac>)
  408822:	4798      	blx	r3
  408824:	bf00      	nop
  408826:	e7fd      	b.n	408824 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  408828:	4b1b      	ldr	r3, [pc, #108]	; (408898 <xQueueGenericSendFromISR+0xac>)
  40882a:	4798      	blx	r3
  40882c:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40882e:	68fb      	ldr	r3, [r7, #12]
  408830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408832:	68fb      	ldr	r3, [r7, #12]
  408834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408836:	429a      	cmp	r2, r3
  408838:	d224      	bcs.n	408884 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40883a:	68f8      	ldr	r0, [r7, #12]
  40883c:	68b9      	ldr	r1, [r7, #8]
  40883e:	683a      	ldr	r2, [r7, #0]
  408840:	4b16      	ldr	r3, [pc, #88]	; (40889c <xQueueGenericSendFromISR+0xb0>)
  408842:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  408844:	68fb      	ldr	r3, [r7, #12]
  408846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408848:	f1b3 3fff 	cmp.w	r3, #4294967295
  40884c:	d112      	bne.n	408874 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40884e:	68fb      	ldr	r3, [r7, #12]
  408850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408852:	2b00      	cmp	r3, #0
  408854:	d013      	beq.n	40887e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408856:	68fb      	ldr	r3, [r7, #12]
  408858:	3324      	adds	r3, #36	; 0x24
  40885a:	4618      	mov	r0, r3
  40885c:	4b10      	ldr	r3, [pc, #64]	; (4088a0 <xQueueGenericSendFromISR+0xb4>)
  40885e:	4798      	blx	r3
  408860:	4603      	mov	r3, r0
  408862:	2b00      	cmp	r3, #0
  408864:	d00b      	beq.n	40887e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  408866:	687b      	ldr	r3, [r7, #4]
  408868:	2b00      	cmp	r3, #0
  40886a:	d008      	beq.n	40887e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  40886c:	687b      	ldr	r3, [r7, #4]
  40886e:	2201      	movs	r2, #1
  408870:	601a      	str	r2, [r3, #0]
  408872:	e004      	b.n	40887e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  408874:	68fb      	ldr	r3, [r7, #12]
  408876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408878:	1c5a      	adds	r2, r3, #1
  40887a:	68fb      	ldr	r3, [r7, #12]
  40887c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  40887e:	2301      	movs	r3, #1
  408880:	617b      	str	r3, [r7, #20]
  408882:	e001      	b.n	408888 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  408884:	2300      	movs	r3, #0
  408886:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  408888:	6938      	ldr	r0, [r7, #16]
  40888a:	4b06      	ldr	r3, [pc, #24]	; (4088a4 <xQueueGenericSendFromISR+0xb8>)
  40888c:	4798      	blx	r3

	return xReturn;
  40888e:	697b      	ldr	r3, [r7, #20]
}
  408890:	4618      	mov	r0, r3
  408892:	3718      	adds	r7, #24
  408894:	46bd      	mov	sp, r7
  408896:	bd80      	pop	{r7, pc}
  408898:	004081cd 	.word	0x004081cd
  40889c:	00408abd 	.word	0x00408abd
  4088a0:	0040944d 	.word	0x0040944d
  4088a4:	004081e1 	.word	0x004081e1

004088a8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4088a8:	b580      	push	{r7, lr}
  4088aa:	b088      	sub	sp, #32
  4088ac:	af00      	add	r7, sp, #0
  4088ae:	60f8      	str	r0, [r7, #12]
  4088b0:	60b9      	str	r1, [r7, #8]
  4088b2:	607a      	str	r2, [r7, #4]
  4088b4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4088b6:	2300      	movs	r3, #0
  4088b8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  4088ba:	68fb      	ldr	r3, [r7, #12]
  4088bc:	2b00      	cmp	r3, #0
  4088be:	d103      	bne.n	4088c8 <xQueueGenericReceive+0x20>
  4088c0:	4b60      	ldr	r3, [pc, #384]	; (408a44 <xQueueGenericReceive+0x19c>)
  4088c2:	4798      	blx	r3
  4088c4:	bf00      	nop
  4088c6:	e7fd      	b.n	4088c4 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4088c8:	68bb      	ldr	r3, [r7, #8]
  4088ca:	2b00      	cmp	r3, #0
  4088cc:	d103      	bne.n	4088d6 <xQueueGenericReceive+0x2e>
  4088ce:	68fb      	ldr	r3, [r7, #12]
  4088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4088d2:	2b00      	cmp	r3, #0
  4088d4:	d101      	bne.n	4088da <xQueueGenericReceive+0x32>
  4088d6:	2301      	movs	r3, #1
  4088d8:	e000      	b.n	4088dc <xQueueGenericReceive+0x34>
  4088da:	2300      	movs	r3, #0
  4088dc:	2b00      	cmp	r3, #0
  4088de:	d103      	bne.n	4088e8 <xQueueGenericReceive+0x40>
  4088e0:	4b58      	ldr	r3, [pc, #352]	; (408a44 <xQueueGenericReceive+0x19c>)
  4088e2:	4798      	blx	r3
  4088e4:	bf00      	nop
  4088e6:	e7fd      	b.n	4088e4 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4088e8:	4b57      	ldr	r3, [pc, #348]	; (408a48 <xQueueGenericReceive+0x1a0>)
  4088ea:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4088ec:	68fb      	ldr	r3, [r7, #12]
  4088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4088f0:	2b00      	cmp	r3, #0
  4088f2:	d03b      	beq.n	40896c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  4088f4:	68fb      	ldr	r3, [r7, #12]
  4088f6:	68db      	ldr	r3, [r3, #12]
  4088f8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4088fa:	68f8      	ldr	r0, [r7, #12]
  4088fc:	68b9      	ldr	r1, [r7, #8]
  4088fe:	4b53      	ldr	r3, [pc, #332]	; (408a4c <xQueueGenericReceive+0x1a4>)
  408900:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  408902:	683b      	ldr	r3, [r7, #0]
  408904:	2b00      	cmp	r3, #0
  408906:	d11c      	bne.n	408942 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  408908:	68fb      	ldr	r3, [r7, #12]
  40890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40890c:	1e5a      	subs	r2, r3, #1
  40890e:	68fb      	ldr	r3, [r7, #12]
  408910:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408912:	68fb      	ldr	r3, [r7, #12]
  408914:	681b      	ldr	r3, [r3, #0]
  408916:	2b00      	cmp	r3, #0
  408918:	d104      	bne.n	408924 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  40891a:	4b4d      	ldr	r3, [pc, #308]	; (408a50 <xQueueGenericReceive+0x1a8>)
  40891c:	4798      	blx	r3
  40891e:	4602      	mov	r2, r0
  408920:	68fb      	ldr	r3, [r7, #12]
  408922:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  408924:	68fb      	ldr	r3, [r7, #12]
  408926:	691b      	ldr	r3, [r3, #16]
  408928:	2b00      	cmp	r3, #0
  40892a:	d01b      	beq.n	408964 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40892c:	68fb      	ldr	r3, [r7, #12]
  40892e:	3310      	adds	r3, #16
  408930:	4618      	mov	r0, r3
  408932:	4b48      	ldr	r3, [pc, #288]	; (408a54 <xQueueGenericReceive+0x1ac>)
  408934:	4798      	blx	r3
  408936:	4603      	mov	r3, r0
  408938:	2b01      	cmp	r3, #1
  40893a:	d113      	bne.n	408964 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  40893c:	4b46      	ldr	r3, [pc, #280]	; (408a58 <xQueueGenericReceive+0x1b0>)
  40893e:	4798      	blx	r3
  408940:	e010      	b.n	408964 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  408942:	68fb      	ldr	r3, [r7, #12]
  408944:	69ba      	ldr	r2, [r7, #24]
  408946:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408948:	68fb      	ldr	r3, [r7, #12]
  40894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40894c:	2b00      	cmp	r3, #0
  40894e:	d009      	beq.n	408964 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408950:	68fb      	ldr	r3, [r7, #12]
  408952:	3324      	adds	r3, #36	; 0x24
  408954:	4618      	mov	r0, r3
  408956:	4b3f      	ldr	r3, [pc, #252]	; (408a54 <xQueueGenericReceive+0x1ac>)
  408958:	4798      	blx	r3
  40895a:	4603      	mov	r3, r0
  40895c:	2b00      	cmp	r3, #0
  40895e:	d001      	beq.n	408964 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  408960:	4b3d      	ldr	r3, [pc, #244]	; (408a58 <xQueueGenericReceive+0x1b0>)
  408962:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  408964:	4b3d      	ldr	r3, [pc, #244]	; (408a5c <xQueueGenericReceive+0x1b4>)
  408966:	4798      	blx	r3
				return pdPASS;
  408968:	2301      	movs	r3, #1
  40896a:	e066      	b.n	408a3a <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40896c:	687b      	ldr	r3, [r7, #4]
  40896e:	2b00      	cmp	r3, #0
  408970:	d103      	bne.n	40897a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  408972:	4b3a      	ldr	r3, [pc, #232]	; (408a5c <xQueueGenericReceive+0x1b4>)
  408974:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  408976:	2300      	movs	r3, #0
  408978:	e05f      	b.n	408a3a <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
  40897a:	69fb      	ldr	r3, [r7, #28]
  40897c:	2b00      	cmp	r3, #0
  40897e:	d106      	bne.n	40898e <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  408980:	f107 0310 	add.w	r3, r7, #16
  408984:	4618      	mov	r0, r3
  408986:	4b36      	ldr	r3, [pc, #216]	; (408a60 <xQueueGenericReceive+0x1b8>)
  408988:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40898a:	2301      	movs	r3, #1
  40898c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40898e:	4b33      	ldr	r3, [pc, #204]	; (408a5c <xQueueGenericReceive+0x1b4>)
  408990:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  408992:	4b34      	ldr	r3, [pc, #208]	; (408a64 <xQueueGenericReceive+0x1bc>)
  408994:	4798      	blx	r3
		prvLockQueue( pxQueue );
  408996:	4b2c      	ldr	r3, [pc, #176]	; (408a48 <xQueueGenericReceive+0x1a0>)
  408998:	4798      	blx	r3
  40899a:	68fb      	ldr	r3, [r7, #12]
  40899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40899e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4089a2:	d102      	bne.n	4089aa <xQueueGenericReceive+0x102>
  4089a4:	68fb      	ldr	r3, [r7, #12]
  4089a6:	2200      	movs	r2, #0
  4089a8:	645a      	str	r2, [r3, #68]	; 0x44
  4089aa:	68fb      	ldr	r3, [r7, #12]
  4089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4089b2:	d102      	bne.n	4089ba <xQueueGenericReceive+0x112>
  4089b4:	68fb      	ldr	r3, [r7, #12]
  4089b6:	2200      	movs	r2, #0
  4089b8:	649a      	str	r2, [r3, #72]	; 0x48
  4089ba:	4b28      	ldr	r3, [pc, #160]	; (408a5c <xQueueGenericReceive+0x1b4>)
  4089bc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4089be:	f107 0210 	add.w	r2, r7, #16
  4089c2:	1d3b      	adds	r3, r7, #4
  4089c4:	4610      	mov	r0, r2
  4089c6:	4619      	mov	r1, r3
  4089c8:	4b27      	ldr	r3, [pc, #156]	; (408a68 <xQueueGenericReceive+0x1c0>)
  4089ca:	4798      	blx	r3
  4089cc:	4603      	mov	r3, r0
  4089ce:	2b00      	cmp	r3, #0
  4089d0:	d12b      	bne.n	408a2a <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4089d2:	68f8      	ldr	r0, [r7, #12]
  4089d4:	4b25      	ldr	r3, [pc, #148]	; (408a6c <xQueueGenericReceive+0x1c4>)
  4089d6:	4798      	blx	r3
  4089d8:	4603      	mov	r3, r0
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d01f      	beq.n	408a1e <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4089de:	68fb      	ldr	r3, [r7, #12]
  4089e0:	681b      	ldr	r3, [r3, #0]
  4089e2:	2b00      	cmp	r3, #0
  4089e4:	d108      	bne.n	4089f8 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  4089e6:	4b18      	ldr	r3, [pc, #96]	; (408a48 <xQueueGenericReceive+0x1a0>)
  4089e8:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4089ea:	68fb      	ldr	r3, [r7, #12]
  4089ec:	685b      	ldr	r3, [r3, #4]
  4089ee:	4618      	mov	r0, r3
  4089f0:	4b1f      	ldr	r3, [pc, #124]	; (408a70 <xQueueGenericReceive+0x1c8>)
  4089f2:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4089f4:	4b19      	ldr	r3, [pc, #100]	; (408a5c <xQueueGenericReceive+0x1b4>)
  4089f6:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4089f8:	68fb      	ldr	r3, [r7, #12]
  4089fa:	f103 0224 	add.w	r2, r3, #36	; 0x24
  4089fe:	687b      	ldr	r3, [r7, #4]
  408a00:	4610      	mov	r0, r2
  408a02:	4619      	mov	r1, r3
  408a04:	4b1b      	ldr	r3, [pc, #108]	; (408a74 <xQueueGenericReceive+0x1cc>)
  408a06:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  408a08:	68f8      	ldr	r0, [r7, #12]
  408a0a:	4b1b      	ldr	r3, [pc, #108]	; (408a78 <xQueueGenericReceive+0x1d0>)
  408a0c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  408a0e:	4b1b      	ldr	r3, [pc, #108]	; (408a7c <xQueueGenericReceive+0x1d4>)
  408a10:	4798      	blx	r3
  408a12:	4603      	mov	r3, r0
  408a14:	2b00      	cmp	r3, #0
  408a16:	d10f      	bne.n	408a38 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
  408a18:	4b0f      	ldr	r3, [pc, #60]	; (408a58 <xQueueGenericReceive+0x1b0>)
  408a1a:	4798      	blx	r3
  408a1c:	e00c      	b.n	408a38 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408a1e:	68f8      	ldr	r0, [r7, #12]
  408a20:	4b15      	ldr	r3, [pc, #84]	; (408a78 <xQueueGenericReceive+0x1d0>)
  408a22:	4798      	blx	r3
				( void ) xTaskResumeAll();
  408a24:	4b15      	ldr	r3, [pc, #84]	; (408a7c <xQueueGenericReceive+0x1d4>)
  408a26:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  408a28:	e75e      	b.n	4088e8 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  408a2a:	68f8      	ldr	r0, [r7, #12]
  408a2c:	4b12      	ldr	r3, [pc, #72]	; (408a78 <xQueueGenericReceive+0x1d0>)
  408a2e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  408a30:	4b12      	ldr	r3, [pc, #72]	; (408a7c <xQueueGenericReceive+0x1d4>)
  408a32:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  408a34:	2300      	movs	r3, #0
  408a36:	e000      	b.n	408a3a <xQueueGenericReceive+0x192>
		}
	}
  408a38:	e756      	b.n	4088e8 <xQueueGenericReceive+0x40>
}
  408a3a:	4618      	mov	r0, r3
  408a3c:	3720      	adds	r7, #32
  408a3e:	46bd      	mov	sp, r7
  408a40:	bd80      	pop	{r7, pc}
  408a42:	bf00      	nop
  408a44:	004081cd 	.word	0x004081cd
  408a48:	00408189 	.word	0x00408189
  408a4c:	00408b7d 	.word	0x00408b7d
  408a50:	004098b9 	.word	0x004098b9
  408a54:	0040944d 	.word	0x0040944d
  408a58:	00408171 	.word	0x00408171
  408a5c:	004081a5 	.word	0x004081a5
  408a60:	00409509 	.word	0x00409509
  408a64:	00408fe9 	.word	0x00408fe9
  408a68:	00409541 	.word	0x00409541
  408a6c:	00408c75 	.word	0x00408c75
  408a70:	00409915 	.word	0x00409915
  408a74:	0040936d 	.word	0x0040936d
  408a78:	00408bcd 	.word	0x00408bcd
  408a7c:	00409005 	.word	0x00409005

00408a80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
  408a80:	b580      	push	{r7, lr}
  408a82:	b084      	sub	sp, #16
  408a84:	af00      	add	r7, sp, #0
  408a86:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );
  408a88:	687b      	ldr	r3, [r7, #4]
  408a8a:	2b00      	cmp	r3, #0
  408a8c:	d103      	bne.n	408a96 <uxQueueMessagesWaiting+0x16>
  408a8e:	4b08      	ldr	r3, [pc, #32]	; (408ab0 <uxQueueMessagesWaiting+0x30>)
  408a90:	4798      	blx	r3
  408a92:	bf00      	nop
  408a94:	e7fd      	b.n	408a92 <uxQueueMessagesWaiting+0x12>

	taskENTER_CRITICAL();
  408a96:	4b07      	ldr	r3, [pc, #28]	; (408ab4 <uxQueueMessagesWaiting+0x34>)
  408a98:	4798      	blx	r3
		uxReturn = pxQueue->uxMessagesWaiting;
  408a9a:	687b      	ldr	r3, [r7, #4]
  408a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408a9e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408aa0:	4b05      	ldr	r3, [pc, #20]	; (408ab8 <uxQueueMessagesWaiting+0x38>)
  408aa2:	4798      	blx	r3

	return uxReturn;
  408aa4:	68fb      	ldr	r3, [r7, #12]
}
  408aa6:	4618      	mov	r0, r3
  408aa8:	3710      	adds	r7, #16
  408aaa:	46bd      	mov	sp, r7
  408aac:	bd80      	pop	{r7, pc}
  408aae:	bf00      	nop
  408ab0:	004081cd 	.word	0x004081cd
  408ab4:	00408189 	.word	0x00408189
  408ab8:	004081a5 	.word	0x004081a5

00408abc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  408abc:	b580      	push	{r7, lr}
  408abe:	b084      	sub	sp, #16
  408ac0:	af00      	add	r7, sp, #0
  408ac2:	60f8      	str	r0, [r7, #12]
  408ac4:	60b9      	str	r1, [r7, #8]
  408ac6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  408ac8:	68fb      	ldr	r3, [r7, #12]
  408aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408acc:	2b00      	cmp	r3, #0
  408ace:	d10c      	bne.n	408aea <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408ad0:	68fb      	ldr	r3, [r7, #12]
  408ad2:	681b      	ldr	r3, [r3, #0]
  408ad4:	2b00      	cmp	r3, #0
  408ad6:	d145      	bne.n	408b64 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  408ad8:	68fb      	ldr	r3, [r7, #12]
  408ada:	685b      	ldr	r3, [r3, #4]
  408adc:	4618      	mov	r0, r3
  408ade:	4b25      	ldr	r3, [pc, #148]	; (408b74 <prvCopyDataToQueue+0xb8>)
  408ae0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  408ae2:	68fb      	ldr	r3, [r7, #12]
  408ae4:	2200      	movs	r2, #0
  408ae6:	605a      	str	r2, [r3, #4]
  408ae8:	e03c      	b.n	408b64 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  408aea:	687b      	ldr	r3, [r7, #4]
  408aec:	2b00      	cmp	r3, #0
  408aee:	d11a      	bne.n	408b26 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  408af0:	68fb      	ldr	r3, [r7, #12]
  408af2:	689a      	ldr	r2, [r3, #8]
  408af4:	68fb      	ldr	r3, [r7, #12]
  408af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408af8:	4610      	mov	r0, r2
  408afa:	68b9      	ldr	r1, [r7, #8]
  408afc:	461a      	mov	r2, r3
  408afe:	4b1e      	ldr	r3, [pc, #120]	; (408b78 <prvCopyDataToQueue+0xbc>)
  408b00:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  408b02:	68fb      	ldr	r3, [r7, #12]
  408b04:	689a      	ldr	r2, [r3, #8]
  408b06:	68fb      	ldr	r3, [r7, #12]
  408b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b0a:	441a      	add	r2, r3
  408b0c:	68fb      	ldr	r3, [r7, #12]
  408b0e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  408b10:	68fb      	ldr	r3, [r7, #12]
  408b12:	689a      	ldr	r2, [r3, #8]
  408b14:	68fb      	ldr	r3, [r7, #12]
  408b16:	685b      	ldr	r3, [r3, #4]
  408b18:	429a      	cmp	r2, r3
  408b1a:	d323      	bcc.n	408b64 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  408b1c:	68fb      	ldr	r3, [r7, #12]
  408b1e:	681a      	ldr	r2, [r3, #0]
  408b20:	68fb      	ldr	r3, [r7, #12]
  408b22:	609a      	str	r2, [r3, #8]
  408b24:	e01e      	b.n	408b64 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  408b26:	68fb      	ldr	r3, [r7, #12]
  408b28:	68da      	ldr	r2, [r3, #12]
  408b2a:	68fb      	ldr	r3, [r7, #12]
  408b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b2e:	4610      	mov	r0, r2
  408b30:	68b9      	ldr	r1, [r7, #8]
  408b32:	461a      	mov	r2, r3
  408b34:	4b10      	ldr	r3, [pc, #64]	; (408b78 <prvCopyDataToQueue+0xbc>)
  408b36:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  408b38:	68fb      	ldr	r3, [r7, #12]
  408b3a:	68da      	ldr	r2, [r3, #12]
  408b3c:	68fb      	ldr	r3, [r7, #12]
  408b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b40:	425b      	negs	r3, r3
  408b42:	441a      	add	r2, r3
  408b44:	68fb      	ldr	r3, [r7, #12]
  408b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  408b48:	68fb      	ldr	r3, [r7, #12]
  408b4a:	68da      	ldr	r2, [r3, #12]
  408b4c:	68fb      	ldr	r3, [r7, #12]
  408b4e:	681b      	ldr	r3, [r3, #0]
  408b50:	429a      	cmp	r2, r3
  408b52:	d207      	bcs.n	408b64 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  408b54:	68fb      	ldr	r3, [r7, #12]
  408b56:	685a      	ldr	r2, [r3, #4]
  408b58:	68fb      	ldr	r3, [r7, #12]
  408b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b5c:	425b      	negs	r3, r3
  408b5e:	441a      	add	r2, r3
  408b60:	68fb      	ldr	r3, [r7, #12]
  408b62:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  408b64:	68fb      	ldr	r3, [r7, #12]
  408b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408b68:	1c5a      	adds	r2, r3, #1
  408b6a:	68fb      	ldr	r3, [r7, #12]
  408b6c:	639a      	str	r2, [r3, #56]	; 0x38
}
  408b6e:	3710      	adds	r7, #16
  408b70:	46bd      	mov	sp, r7
  408b72:	bd80      	pop	{r7, pc}
  408b74:	004099c5 	.word	0x004099c5
  408b78:	0040c6f9 	.word	0x0040c6f9

00408b7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  408b7c:	b580      	push	{r7, lr}
  408b7e:	b082      	sub	sp, #8
  408b80:	af00      	add	r7, sp, #0
  408b82:	6078      	str	r0, [r7, #4]
  408b84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  408b86:	687b      	ldr	r3, [r7, #4]
  408b88:	681b      	ldr	r3, [r3, #0]
  408b8a:	2b00      	cmp	r3, #0
  408b8c:	d019      	beq.n	408bc2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  408b8e:	687b      	ldr	r3, [r7, #4]
  408b90:	68da      	ldr	r2, [r3, #12]
  408b92:	687b      	ldr	r3, [r7, #4]
  408b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b96:	441a      	add	r2, r3
  408b98:	687b      	ldr	r3, [r7, #4]
  408b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  408b9c:	687b      	ldr	r3, [r7, #4]
  408b9e:	68da      	ldr	r2, [r3, #12]
  408ba0:	687b      	ldr	r3, [r7, #4]
  408ba2:	685b      	ldr	r3, [r3, #4]
  408ba4:	429a      	cmp	r2, r3
  408ba6:	d303      	bcc.n	408bb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  408ba8:	687b      	ldr	r3, [r7, #4]
  408baa:	681a      	ldr	r2, [r3, #0]
  408bac:	687b      	ldr	r3, [r7, #4]
  408bae:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  408bb0:	687b      	ldr	r3, [r7, #4]
  408bb2:	68da      	ldr	r2, [r3, #12]
  408bb4:	687b      	ldr	r3, [r7, #4]
  408bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408bb8:	6838      	ldr	r0, [r7, #0]
  408bba:	4611      	mov	r1, r2
  408bbc:	461a      	mov	r2, r3
  408bbe:	4b02      	ldr	r3, [pc, #8]	; (408bc8 <prvCopyDataFromQueue+0x4c>)
  408bc0:	4798      	blx	r3
	}
}
  408bc2:	3708      	adds	r7, #8
  408bc4:	46bd      	mov	sp, r7
  408bc6:	bd80      	pop	{r7, pc}
  408bc8:	0040c6f9 	.word	0x0040c6f9

00408bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  408bcc:	b580      	push	{r7, lr}
  408bce:	b082      	sub	sp, #8
  408bd0:	af00      	add	r7, sp, #0
  408bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  408bd4:	4b23      	ldr	r3, [pc, #140]	; (408c64 <prvUnlockQueue+0x98>)
  408bd6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  408bd8:	e014      	b.n	408c04 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408bda:	687b      	ldr	r3, [r7, #4]
  408bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408bde:	2b00      	cmp	r3, #0
  408be0:	d00f      	beq.n	408c02 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408be2:	687b      	ldr	r3, [r7, #4]
  408be4:	3324      	adds	r3, #36	; 0x24
  408be6:	4618      	mov	r0, r3
  408be8:	4b1f      	ldr	r3, [pc, #124]	; (408c68 <prvUnlockQueue+0x9c>)
  408bea:	4798      	blx	r3
  408bec:	4603      	mov	r3, r0
  408bee:	2b00      	cmp	r3, #0
  408bf0:	d001      	beq.n	408bf6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  408bf2:	4b1e      	ldr	r3, [pc, #120]	; (408c6c <prvUnlockQueue+0xa0>)
  408bf4:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  408bf6:	687b      	ldr	r3, [r7, #4]
  408bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408bfa:	1e5a      	subs	r2, r3, #1
  408bfc:	687b      	ldr	r3, [r7, #4]
  408bfe:	649a      	str	r2, [r3, #72]	; 0x48
  408c00:	e000      	b.n	408c04 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  408c02:	e003      	b.n	408c0c <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  408c04:	687b      	ldr	r3, [r7, #4]
  408c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408c08:	2b00      	cmp	r3, #0
  408c0a:	dce6      	bgt.n	408bda <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  408c0c:	687b      	ldr	r3, [r7, #4]
  408c0e:	f04f 32ff 	mov.w	r2, #4294967295
  408c12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  408c14:	4b16      	ldr	r3, [pc, #88]	; (408c70 <prvUnlockQueue+0xa4>)
  408c16:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  408c18:	4b12      	ldr	r3, [pc, #72]	; (408c64 <prvUnlockQueue+0x98>)
  408c1a:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408c1c:	e014      	b.n	408c48 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  408c1e:	687b      	ldr	r3, [r7, #4]
  408c20:	691b      	ldr	r3, [r3, #16]
  408c22:	2b00      	cmp	r3, #0
  408c24:	d00f      	beq.n	408c46 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  408c26:	687b      	ldr	r3, [r7, #4]
  408c28:	3310      	adds	r3, #16
  408c2a:	4618      	mov	r0, r3
  408c2c:	4b0e      	ldr	r3, [pc, #56]	; (408c68 <prvUnlockQueue+0x9c>)
  408c2e:	4798      	blx	r3
  408c30:	4603      	mov	r3, r0
  408c32:	2b00      	cmp	r3, #0
  408c34:	d001      	beq.n	408c3a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  408c36:	4b0d      	ldr	r3, [pc, #52]	; (408c6c <prvUnlockQueue+0xa0>)
  408c38:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  408c3a:	687b      	ldr	r3, [r7, #4]
  408c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408c3e:	1e5a      	subs	r2, r3, #1
  408c40:	687b      	ldr	r3, [r7, #4]
  408c42:	645a      	str	r2, [r3, #68]	; 0x44
  408c44:	e000      	b.n	408c48 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  408c46:	e003      	b.n	408c50 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408c48:	687b      	ldr	r3, [r7, #4]
  408c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408c4c:	2b00      	cmp	r3, #0
  408c4e:	dce6      	bgt.n	408c1e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  408c50:	687b      	ldr	r3, [r7, #4]
  408c52:	f04f 32ff 	mov.w	r2, #4294967295
  408c56:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  408c58:	4b05      	ldr	r3, [pc, #20]	; (408c70 <prvUnlockQueue+0xa4>)
  408c5a:	4798      	blx	r3
}
  408c5c:	3708      	adds	r7, #8
  408c5e:	46bd      	mov	sp, r7
  408c60:	bd80      	pop	{r7, pc}
  408c62:	bf00      	nop
  408c64:	00408189 	.word	0x00408189
  408c68:	0040944d 	.word	0x0040944d
  408c6c:	004095f5 	.word	0x004095f5
  408c70:	004081a5 	.word	0x004081a5

00408c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  408c74:	b580      	push	{r7, lr}
  408c76:	b084      	sub	sp, #16
  408c78:	af00      	add	r7, sp, #0
  408c7a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  408c7c:	4b08      	ldr	r3, [pc, #32]	; (408ca0 <prvIsQueueEmpty+0x2c>)
  408c7e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  408c80:	687b      	ldr	r3, [r7, #4]
  408c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408c84:	2b00      	cmp	r3, #0
  408c86:	bf14      	ite	ne
  408c88:	2300      	movne	r3, #0
  408c8a:	2301      	moveq	r3, #1
  408c8c:	b2db      	uxtb	r3, r3
  408c8e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408c90:	4b04      	ldr	r3, [pc, #16]	; (408ca4 <prvIsQueueEmpty+0x30>)
  408c92:	4798      	blx	r3

	return xReturn;
  408c94:	68fb      	ldr	r3, [r7, #12]
}
  408c96:	4618      	mov	r0, r3
  408c98:	3710      	adds	r7, #16
  408c9a:	46bd      	mov	sp, r7
  408c9c:	bd80      	pop	{r7, pc}
  408c9e:	bf00      	nop
  408ca0:	00408189 	.word	0x00408189
  408ca4:	004081a5 	.word	0x004081a5

00408ca8 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  408ca8:	b580      	push	{r7, lr}
  408caa:	b084      	sub	sp, #16
  408cac:	af00      	add	r7, sp, #0
  408cae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  408cb0:	4b09      	ldr	r3, [pc, #36]	; (408cd8 <prvIsQueueFull+0x30>)
  408cb2:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  408cb4:	687b      	ldr	r3, [r7, #4]
  408cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408cb8:	687b      	ldr	r3, [r7, #4]
  408cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408cbc:	429a      	cmp	r2, r3
  408cbe:	bf14      	ite	ne
  408cc0:	2300      	movne	r3, #0
  408cc2:	2301      	moveq	r3, #1
  408cc4:	b2db      	uxtb	r3, r3
  408cc6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408cc8:	4b04      	ldr	r3, [pc, #16]	; (408cdc <prvIsQueueFull+0x34>)
  408cca:	4798      	blx	r3

	return xReturn;
  408ccc:	68fb      	ldr	r3, [r7, #12]
}
  408cce:	4618      	mov	r0, r3
  408cd0:	3710      	adds	r7, #16
  408cd2:	46bd      	mov	sp, r7
  408cd4:	bd80      	pop	{r7, pc}
  408cd6:	bf00      	nop
  408cd8:	00408189 	.word	0x00408189
  408cdc:	004081a5 	.word	0x004081a5

00408ce0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  408ce0:	b580      	push	{r7, lr}
  408ce2:	b082      	sub	sp, #8
  408ce4:	af00      	add	r7, sp, #0
  408ce6:	6078      	str	r0, [r7, #4]
  408ce8:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  408cea:	4b12      	ldr	r3, [pc, #72]	; (408d34 <vQueueWaitForMessageRestricted+0x54>)
  408cec:	4798      	blx	r3
  408cee:	687b      	ldr	r3, [r7, #4]
  408cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  408cf6:	d102      	bne.n	408cfe <vQueueWaitForMessageRestricted+0x1e>
  408cf8:	687b      	ldr	r3, [r7, #4]
  408cfa:	2200      	movs	r2, #0
  408cfc:	645a      	str	r2, [r3, #68]	; 0x44
  408cfe:	687b      	ldr	r3, [r7, #4]
  408d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408d02:	f1b3 3fff 	cmp.w	r3, #4294967295
  408d06:	d102      	bne.n	408d0e <vQueueWaitForMessageRestricted+0x2e>
  408d08:	687b      	ldr	r3, [r7, #4]
  408d0a:	2200      	movs	r2, #0
  408d0c:	649a      	str	r2, [r3, #72]	; 0x48
  408d0e:	4b0a      	ldr	r3, [pc, #40]	; (408d38 <vQueueWaitForMessageRestricted+0x58>)
  408d10:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  408d12:	687b      	ldr	r3, [r7, #4]
  408d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408d16:	2b00      	cmp	r3, #0
  408d18:	d105      	bne.n	408d26 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  408d1a:	687b      	ldr	r3, [r7, #4]
  408d1c:	3324      	adds	r3, #36	; 0x24
  408d1e:	4618      	mov	r0, r3
  408d20:	6839      	ldr	r1, [r7, #0]
  408d22:	4b06      	ldr	r3, [pc, #24]	; (408d3c <vQueueWaitForMessageRestricted+0x5c>)
  408d24:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  408d26:	6878      	ldr	r0, [r7, #4]
  408d28:	4b05      	ldr	r3, [pc, #20]	; (408d40 <vQueueWaitForMessageRestricted+0x60>)
  408d2a:	4798      	blx	r3
	}
  408d2c:	3708      	adds	r7, #8
  408d2e:	46bd      	mov	sp, r7
  408d30:	bd80      	pop	{r7, pc}
  408d32:	bf00      	nop
  408d34:	00408189 	.word	0x00408189
  408d38:	004081a5 	.word	0x004081a5
  408d3c:	004093ed 	.word	0x004093ed
  408d40:	00408bcd 	.word	0x00408bcd

00408d44 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  408d44:	b590      	push	{r4, r7, lr}
  408d46:	b08b      	sub	sp, #44	; 0x2c
  408d48:	af02      	add	r7, sp, #8
  408d4a:	60f8      	str	r0, [r7, #12]
  408d4c:	60b9      	str	r1, [r7, #8]
  408d4e:	603b      	str	r3, [r7, #0]
  408d50:	4613      	mov	r3, r2
  408d52:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  408d54:	68fb      	ldr	r3, [r7, #12]
  408d56:	2b00      	cmp	r3, #0
  408d58:	d103      	bne.n	408d62 <xTaskGenericCreate+0x1e>
  408d5a:	4b5a      	ldr	r3, [pc, #360]	; (408ec4 <xTaskGenericCreate+0x180>)
  408d5c:	4798      	blx	r3
  408d5e:	bf00      	nop
  408d60:	e7fd      	b.n	408d5e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  408d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  408d64:	2b0e      	cmp	r3, #14
  408d66:	d903      	bls.n	408d70 <xTaskGenericCreate+0x2c>
  408d68:	4b56      	ldr	r3, [pc, #344]	; (408ec4 <xTaskGenericCreate+0x180>)
  408d6a:	4798      	blx	r3
  408d6c:	bf00      	nop
  408d6e:	e7fd      	b.n	408d6c <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  408d70:	88fb      	ldrh	r3, [r7, #6]
  408d72:	4618      	mov	r0, r3
  408d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  408d76:	4b54      	ldr	r3, [pc, #336]	; (408ec8 <xTaskGenericCreate+0x184>)
  408d78:	4798      	blx	r3
  408d7a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  408d7c:	69bb      	ldr	r3, [r7, #24]
  408d7e:	2b00      	cmp	r3, #0
  408d80:	f000 8088 	beq.w	408e94 <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  408d84:	69bb      	ldr	r3, [r7, #24]
  408d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  408d88:	88fb      	ldrh	r3, [r7, #6]
  408d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  408d8e:	3b01      	subs	r3, #1
  408d90:	009b      	lsls	r3, r3, #2
  408d92:	4413      	add	r3, r2
  408d94:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  408d96:	697b      	ldr	r3, [r7, #20]
  408d98:	f023 0307 	bic.w	r3, r3, #7
  408d9c:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  408d9e:	697b      	ldr	r3, [r7, #20]
  408da0:	f003 0307 	and.w	r3, r3, #7
  408da4:	2b00      	cmp	r3, #0
  408da6:	d003      	beq.n	408db0 <xTaskGenericCreate+0x6c>
  408da8:	4b46      	ldr	r3, [pc, #280]	; (408ec4 <xTaskGenericCreate+0x180>)
  408daa:	4798      	blx	r3
  408dac:	bf00      	nop
  408dae:	e7fd      	b.n	408dac <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  408db0:	88fb      	ldrh	r3, [r7, #6]
  408db2:	9300      	str	r3, [sp, #0]
  408db4:	69b8      	ldr	r0, [r7, #24]
  408db6:	68b9      	ldr	r1, [r7, #8]
  408db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  408dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  408dbc:	4c43      	ldr	r4, [pc, #268]	; (408ecc <xTaskGenericCreate+0x188>)
  408dbe:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  408dc0:	6978      	ldr	r0, [r7, #20]
  408dc2:	68f9      	ldr	r1, [r7, #12]
  408dc4:	683a      	ldr	r2, [r7, #0]
  408dc6:	4b42      	ldr	r3, [pc, #264]	; (408ed0 <xTaskGenericCreate+0x18c>)
  408dc8:	4798      	blx	r3
  408dca:	4602      	mov	r2, r0
  408dcc:	69bb      	ldr	r3, [r7, #24]
  408dce:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  408dd0:	69bb      	ldr	r3, [r7, #24]
  408dd2:	681b      	ldr	r3, [r3, #0]
  408dd4:	f003 0307 	and.w	r3, r3, #7
  408dd8:	2b00      	cmp	r3, #0
  408dda:	d003      	beq.n	408de4 <xTaskGenericCreate+0xa0>
  408ddc:	4b39      	ldr	r3, [pc, #228]	; (408ec4 <xTaskGenericCreate+0x180>)
  408dde:	4798      	blx	r3
  408de0:	bf00      	nop
  408de2:	e7fd      	b.n	408de0 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  408de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  408de6:	2b00      	cmp	r3, #0
  408de8:	d002      	beq.n	408df0 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  408dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  408dec:	69ba      	ldr	r2, [r7, #24]
  408dee:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  408df0:	4b38      	ldr	r3, [pc, #224]	; (408ed4 <xTaskGenericCreate+0x190>)
  408df2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  408df4:	4b38      	ldr	r3, [pc, #224]	; (408ed8 <xTaskGenericCreate+0x194>)
  408df6:	681b      	ldr	r3, [r3, #0]
  408df8:	1c5a      	adds	r2, r3, #1
  408dfa:	4b37      	ldr	r3, [pc, #220]	; (408ed8 <xTaskGenericCreate+0x194>)
  408dfc:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  408dfe:	4b37      	ldr	r3, [pc, #220]	; (408edc <xTaskGenericCreate+0x198>)
  408e00:	681b      	ldr	r3, [r3, #0]
  408e02:	2b00      	cmp	r3, #0
  408e04:	d109      	bne.n	408e1a <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  408e06:	4b35      	ldr	r3, [pc, #212]	; (408edc <xTaskGenericCreate+0x198>)
  408e08:	69ba      	ldr	r2, [r7, #24]
  408e0a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  408e0c:	4b32      	ldr	r3, [pc, #200]	; (408ed8 <xTaskGenericCreate+0x194>)
  408e0e:	681b      	ldr	r3, [r3, #0]
  408e10:	2b01      	cmp	r3, #1
  408e12:	d10f      	bne.n	408e34 <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  408e14:	4b32      	ldr	r3, [pc, #200]	; (408ee0 <xTaskGenericCreate+0x19c>)
  408e16:	4798      	blx	r3
  408e18:	e00c      	b.n	408e34 <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  408e1a:	4b32      	ldr	r3, [pc, #200]	; (408ee4 <xTaskGenericCreate+0x1a0>)
  408e1c:	681b      	ldr	r3, [r3, #0]
  408e1e:	2b00      	cmp	r3, #0
  408e20:	d108      	bne.n	408e34 <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  408e22:	4b2e      	ldr	r3, [pc, #184]	; (408edc <xTaskGenericCreate+0x198>)
  408e24:	681b      	ldr	r3, [r3, #0]
  408e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  408e2a:	429a      	cmp	r2, r3
  408e2c:	d802      	bhi.n	408e34 <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  408e2e:	4b2b      	ldr	r3, [pc, #172]	; (408edc <xTaskGenericCreate+0x198>)
  408e30:	69ba      	ldr	r2, [r7, #24]
  408e32:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  408e34:	69bb      	ldr	r3, [r7, #24]
  408e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e38:	4b2b      	ldr	r3, [pc, #172]	; (408ee8 <xTaskGenericCreate+0x1a4>)
  408e3a:	681b      	ldr	r3, [r3, #0]
  408e3c:	429a      	cmp	r2, r3
  408e3e:	d903      	bls.n	408e48 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  408e40:	69bb      	ldr	r3, [r7, #24]
  408e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e44:	4b28      	ldr	r3, [pc, #160]	; (408ee8 <xTaskGenericCreate+0x1a4>)
  408e46:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  408e48:	4b28      	ldr	r3, [pc, #160]	; (408eec <xTaskGenericCreate+0x1a8>)
  408e4a:	681a      	ldr	r2, [r3, #0]
  408e4c:	69bb      	ldr	r3, [r7, #24]
  408e4e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  408e50:	4b26      	ldr	r3, [pc, #152]	; (408eec <xTaskGenericCreate+0x1a8>)
  408e52:	681b      	ldr	r3, [r3, #0]
  408e54:	1c5a      	adds	r2, r3, #1
  408e56:	4b25      	ldr	r3, [pc, #148]	; (408eec <xTaskGenericCreate+0x1a8>)
  408e58:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  408e5a:	69bb      	ldr	r3, [r7, #24]
  408e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e5e:	4b24      	ldr	r3, [pc, #144]	; (408ef0 <xTaskGenericCreate+0x1ac>)
  408e60:	681b      	ldr	r3, [r3, #0]
  408e62:	429a      	cmp	r2, r3
  408e64:	d903      	bls.n	408e6e <xTaskGenericCreate+0x12a>
  408e66:	69bb      	ldr	r3, [r7, #24]
  408e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e6a:	4b21      	ldr	r3, [pc, #132]	; (408ef0 <xTaskGenericCreate+0x1ac>)
  408e6c:	601a      	str	r2, [r3, #0]
  408e6e:	69bb      	ldr	r3, [r7, #24]
  408e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408e72:	4613      	mov	r3, r2
  408e74:	009b      	lsls	r3, r3, #2
  408e76:	4413      	add	r3, r2
  408e78:	009b      	lsls	r3, r3, #2
  408e7a:	4a1e      	ldr	r2, [pc, #120]	; (408ef4 <xTaskGenericCreate+0x1b0>)
  408e7c:	441a      	add	r2, r3
  408e7e:	69bb      	ldr	r3, [r7, #24]
  408e80:	3304      	adds	r3, #4
  408e82:	4610      	mov	r0, r2
  408e84:	4619      	mov	r1, r3
  408e86:	4b1c      	ldr	r3, [pc, #112]	; (408ef8 <xTaskGenericCreate+0x1b4>)
  408e88:	4798      	blx	r3

			xReturn = pdPASS;
  408e8a:	2301      	movs	r3, #1
  408e8c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  408e8e:	4b1b      	ldr	r3, [pc, #108]	; (408efc <xTaskGenericCreate+0x1b8>)
  408e90:	4798      	blx	r3
  408e92:	e002      	b.n	408e9a <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  408e94:	f04f 33ff 	mov.w	r3, #4294967295
  408e98:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  408e9a:	69fb      	ldr	r3, [r7, #28]
  408e9c:	2b01      	cmp	r3, #1
  408e9e:	d10b      	bne.n	408eb8 <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
  408ea0:	4b10      	ldr	r3, [pc, #64]	; (408ee4 <xTaskGenericCreate+0x1a0>)
  408ea2:	681b      	ldr	r3, [r3, #0]
  408ea4:	2b00      	cmp	r3, #0
  408ea6:	d007      	beq.n	408eb8 <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  408ea8:	4b0c      	ldr	r3, [pc, #48]	; (408edc <xTaskGenericCreate+0x198>)
  408eaa:	681b      	ldr	r3, [r3, #0]
  408eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  408eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  408eb0:	429a      	cmp	r2, r3
  408eb2:	d201      	bcs.n	408eb8 <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
  408eb4:	4b12      	ldr	r3, [pc, #72]	; (408f00 <xTaskGenericCreate+0x1bc>)
  408eb6:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  408eb8:	69fb      	ldr	r3, [r7, #28]
}
  408eba:	4618      	mov	r0, r3
  408ebc:	3724      	adds	r7, #36	; 0x24
  408ebe:	46bd      	mov	sp, r7
  408ec0:	bd90      	pop	{r4, r7, pc}
  408ec2:	bf00      	nop
  408ec4:	004081cd 	.word	0x004081cd
  408ec8:	00409825 	.word	0x00409825
  408ecc:	00409635 	.word	0x00409635
  408ed0:	004080a9 	.word	0x004080a9
  408ed4:	00408189 	.word	0x00408189
  408ed8:	2000882c 	.word	0x2000882c
  408edc:	2000868c 	.word	0x2000868c
  408ee0:	004096a9 	.word	0x004096a9
  408ee4:	2000883c 	.word	0x2000883c
  408ee8:	20008834 	.word	0x20008834
  408eec:	20008850 	.word	0x20008850
  408ef0:	20008838 	.word	0x20008838
  408ef4:	20008690 	.word	0x20008690
  408ef8:	00407ef1 	.word	0x00407ef1
  408efc:	004081a5 	.word	0x004081a5
  408f00:	00408171 	.word	0x00408171

00408f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  408f04:	b580      	push	{r7, lr}
  408f06:	b084      	sub	sp, #16
  408f08:	af00      	add	r7, sp, #0
  408f0a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  408f0c:	2300      	movs	r3, #0
  408f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  408f10:	687b      	ldr	r3, [r7, #4]
  408f12:	2b00      	cmp	r3, #0
  408f14:	d012      	beq.n	408f3c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  408f16:	4b0d      	ldr	r3, [pc, #52]	; (408f4c <vTaskDelay+0x48>)
  408f18:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  408f1a:	4b0d      	ldr	r3, [pc, #52]	; (408f50 <vTaskDelay+0x4c>)
  408f1c:	681a      	ldr	r2, [r3, #0]
  408f1e:	687b      	ldr	r3, [r7, #4]
  408f20:	4413      	add	r3, r2
  408f22:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  408f24:	4b0b      	ldr	r3, [pc, #44]	; (408f54 <vTaskDelay+0x50>)
  408f26:	681b      	ldr	r3, [r3, #0]
  408f28:	3304      	adds	r3, #4
  408f2a:	4618      	mov	r0, r3
  408f2c:	4b0a      	ldr	r3, [pc, #40]	; (408f58 <vTaskDelay+0x54>)
  408f2e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  408f30:	68b8      	ldr	r0, [r7, #8]
  408f32:	4b0a      	ldr	r3, [pc, #40]	; (408f5c <vTaskDelay+0x58>)
  408f34:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  408f36:	4b0a      	ldr	r3, [pc, #40]	; (408f60 <vTaskDelay+0x5c>)
  408f38:	4798      	blx	r3
  408f3a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  408f3c:	68fb      	ldr	r3, [r7, #12]
  408f3e:	2b00      	cmp	r3, #0
  408f40:	d101      	bne.n	408f46 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  408f42:	4b08      	ldr	r3, [pc, #32]	; (408f64 <vTaskDelay+0x60>)
  408f44:	4798      	blx	r3
		}
	}
  408f46:	3710      	adds	r7, #16
  408f48:	46bd      	mov	sp, r7
  408f4a:	bd80      	pop	{r7, pc}
  408f4c:	00408fe9 	.word	0x00408fe9
  408f50:	20008830 	.word	0x20008830
  408f54:	2000868c 	.word	0x2000868c
  408f58:	00407fb1 	.word	0x00407fb1
  408f5c:	004097b5 	.word	0x004097b5
  408f60:	00409005 	.word	0x00409005
  408f64:	00408171 	.word	0x00408171

00408f68 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  408f68:	b590      	push	{r4, r7, lr}
  408f6a:	b087      	sub	sp, #28
  408f6c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  408f6e:	2300      	movs	r3, #0
  408f70:	9300      	str	r3, [sp, #0]
  408f72:	2300      	movs	r3, #0
  408f74:	9301      	str	r3, [sp, #4]
  408f76:	2300      	movs	r3, #0
  408f78:	9302      	str	r3, [sp, #8]
  408f7a:	2300      	movs	r3, #0
  408f7c:	9303      	str	r3, [sp, #12]
  408f7e:	4812      	ldr	r0, [pc, #72]	; (408fc8 <vTaskStartScheduler+0x60>)
  408f80:	4912      	ldr	r1, [pc, #72]	; (408fcc <vTaskStartScheduler+0x64>)
  408f82:	2282      	movs	r2, #130	; 0x82
  408f84:	2300      	movs	r3, #0
  408f86:	4c12      	ldr	r4, [pc, #72]	; (408fd0 <vTaskStartScheduler+0x68>)
  408f88:	47a0      	blx	r4
  408f8a:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  408f8c:	687b      	ldr	r3, [r7, #4]
  408f8e:	2b01      	cmp	r3, #1
  408f90:	d102      	bne.n	408f98 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  408f92:	4b10      	ldr	r3, [pc, #64]	; (408fd4 <vTaskStartScheduler+0x6c>)
  408f94:	4798      	blx	r3
  408f96:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  408f98:	687b      	ldr	r3, [r7, #4]
  408f9a:	2b01      	cmp	r3, #1
  408f9c:	d109      	bne.n	408fb2 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  408f9e:	4b0e      	ldr	r3, [pc, #56]	; (408fd8 <vTaskStartScheduler+0x70>)
  408fa0:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  408fa2:	4b0e      	ldr	r3, [pc, #56]	; (408fdc <vTaskStartScheduler+0x74>)
  408fa4:	2201      	movs	r2, #1
  408fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  408fa8:	4b0d      	ldr	r3, [pc, #52]	; (408fe0 <vTaskStartScheduler+0x78>)
  408faa:	2200      	movs	r2, #0
  408fac:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  408fae:	4b0d      	ldr	r3, [pc, #52]	; (408fe4 <vTaskStartScheduler+0x7c>)
  408fb0:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  408fb2:	687b      	ldr	r3, [r7, #4]
  408fb4:	2b00      	cmp	r3, #0
  408fb6:	d103      	bne.n	408fc0 <vTaskStartScheduler+0x58>
  408fb8:	4b07      	ldr	r3, [pc, #28]	; (408fd8 <vTaskStartScheduler+0x70>)
  408fba:	4798      	blx	r3
  408fbc:	bf00      	nop
  408fbe:	e7fd      	b.n	408fbc <vTaskStartScheduler+0x54>
}
  408fc0:	370c      	adds	r7, #12
  408fc2:	46bd      	mov	sp, r7
  408fc4:	bd90      	pop	{r4, r7, pc}
  408fc6:	bf00      	nop
  408fc8:	0040960d 	.word	0x0040960d
  408fcc:	00415db4 	.word	0x00415db4
  408fd0:	00408d45 	.word	0x00408d45
  408fd4:	00409a49 	.word	0x00409a49
  408fd8:	004081cd 	.word	0x004081cd
  408fdc:	2000883c 	.word	0x2000883c
  408fe0:	20008830 	.word	0x20008830
  408fe4:	00408131 	.word	0x00408131

00408fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  408fe8:	b480      	push	{r7}
  408fea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  408fec:	4b04      	ldr	r3, [pc, #16]	; (409000 <vTaskSuspendAll+0x18>)
  408fee:	681b      	ldr	r3, [r3, #0]
  408ff0:	1c5a      	adds	r2, r3, #1
  408ff2:	4b03      	ldr	r3, [pc, #12]	; (409000 <vTaskSuspendAll+0x18>)
  408ff4:	601a      	str	r2, [r3, #0]
}
  408ff6:	46bd      	mov	sp, r7
  408ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408ffc:	4770      	bx	lr
  408ffe:	bf00      	nop
  409000:	20008840 	.word	0x20008840

00409004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  409004:	b590      	push	{r4, r7, lr}
  409006:	b083      	sub	sp, #12
  409008:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40900a:	2300      	movs	r3, #0
  40900c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  40900e:	4b36      	ldr	r3, [pc, #216]	; (4090e8 <xTaskResumeAll+0xe4>)
  409010:	681b      	ldr	r3, [r3, #0]
  409012:	2b00      	cmp	r3, #0
  409014:	d103      	bne.n	40901e <xTaskResumeAll+0x1a>
  409016:	4b35      	ldr	r3, [pc, #212]	; (4090ec <xTaskResumeAll+0xe8>)
  409018:	4798      	blx	r3
  40901a:	bf00      	nop
  40901c:	e7fd      	b.n	40901a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  40901e:	4b34      	ldr	r3, [pc, #208]	; (4090f0 <xTaskResumeAll+0xec>)
  409020:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  409022:	4b31      	ldr	r3, [pc, #196]	; (4090e8 <xTaskResumeAll+0xe4>)
  409024:	681b      	ldr	r3, [r3, #0]
  409026:	1e5a      	subs	r2, r3, #1
  409028:	4b2f      	ldr	r3, [pc, #188]	; (4090e8 <xTaskResumeAll+0xe4>)
  40902a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40902c:	4b2e      	ldr	r3, [pc, #184]	; (4090e8 <xTaskResumeAll+0xe4>)
  40902e:	681b      	ldr	r3, [r3, #0]
  409030:	2b00      	cmp	r3, #0
  409032:	d152      	bne.n	4090da <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  409034:	4b2f      	ldr	r3, [pc, #188]	; (4090f4 <xTaskResumeAll+0xf0>)
  409036:	681b      	ldr	r3, [r3, #0]
  409038:	2b00      	cmp	r3, #0
  40903a:	d04e      	beq.n	4090da <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  40903c:	2300      	movs	r3, #0
  40903e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  409040:	e027      	b.n	409092 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  409042:	4b2d      	ldr	r3, [pc, #180]	; (4090f8 <xTaskResumeAll+0xf4>)
  409044:	68db      	ldr	r3, [r3, #12]
  409046:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  409048:	f104 0318 	add.w	r3, r4, #24
  40904c:	4618      	mov	r0, r3
  40904e:	4b2b      	ldr	r3, [pc, #172]	; (4090fc <xTaskResumeAll+0xf8>)
  409050:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  409052:	1d23      	adds	r3, r4, #4
  409054:	4618      	mov	r0, r3
  409056:	4b29      	ldr	r3, [pc, #164]	; (4090fc <xTaskResumeAll+0xf8>)
  409058:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40905a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40905c:	4b28      	ldr	r3, [pc, #160]	; (409100 <xTaskResumeAll+0xfc>)
  40905e:	681b      	ldr	r3, [r3, #0]
  409060:	429a      	cmp	r2, r3
  409062:	d902      	bls.n	40906a <xTaskResumeAll+0x66>
  409064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  409066:	4b26      	ldr	r3, [pc, #152]	; (409100 <xTaskResumeAll+0xfc>)
  409068:	601a      	str	r2, [r3, #0]
  40906a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40906c:	4613      	mov	r3, r2
  40906e:	009b      	lsls	r3, r3, #2
  409070:	4413      	add	r3, r2
  409072:	009b      	lsls	r3, r3, #2
  409074:	4a23      	ldr	r2, [pc, #140]	; (409104 <xTaskResumeAll+0x100>)
  409076:	441a      	add	r2, r3
  409078:	1d23      	adds	r3, r4, #4
  40907a:	4610      	mov	r0, r2
  40907c:	4619      	mov	r1, r3
  40907e:	4b22      	ldr	r3, [pc, #136]	; (409108 <xTaskResumeAll+0x104>)
  409080:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  409082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  409084:	4b21      	ldr	r3, [pc, #132]	; (40910c <xTaskResumeAll+0x108>)
  409086:	681b      	ldr	r3, [r3, #0]
  409088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40908a:	429a      	cmp	r2, r3
  40908c:	d301      	bcc.n	409092 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  40908e:	2301      	movs	r3, #1
  409090:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  409092:	4b19      	ldr	r3, [pc, #100]	; (4090f8 <xTaskResumeAll+0xf4>)
  409094:	681b      	ldr	r3, [r3, #0]
  409096:	2b00      	cmp	r3, #0
  409098:	d1d3      	bne.n	409042 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40909a:	4b1d      	ldr	r3, [pc, #116]	; (409110 <xTaskResumeAll+0x10c>)
  40909c:	681b      	ldr	r3, [r3, #0]
  40909e:	2b00      	cmp	r3, #0
  4090a0:	d00d      	beq.n	4090be <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4090a2:	e006      	b.n	4090b2 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  4090a4:	4b1b      	ldr	r3, [pc, #108]	; (409114 <xTaskResumeAll+0x110>)
  4090a6:	4798      	blx	r3
						--uxMissedTicks;
  4090a8:	4b19      	ldr	r3, [pc, #100]	; (409110 <xTaskResumeAll+0x10c>)
  4090aa:	681b      	ldr	r3, [r3, #0]
  4090ac:	1e5a      	subs	r2, r3, #1
  4090ae:	4b18      	ldr	r3, [pc, #96]	; (409110 <xTaskResumeAll+0x10c>)
  4090b0:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4090b2:	4b17      	ldr	r3, [pc, #92]	; (409110 <xTaskResumeAll+0x10c>)
  4090b4:	681b      	ldr	r3, [r3, #0]
  4090b6:	2b00      	cmp	r3, #0
  4090b8:	d1f4      	bne.n	4090a4 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  4090ba:	2301      	movs	r3, #1
  4090bc:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  4090be:	683b      	ldr	r3, [r7, #0]
  4090c0:	2b01      	cmp	r3, #1
  4090c2:	d003      	beq.n	4090cc <xTaskResumeAll+0xc8>
  4090c4:	4b14      	ldr	r3, [pc, #80]	; (409118 <xTaskResumeAll+0x114>)
  4090c6:	681b      	ldr	r3, [r3, #0]
  4090c8:	2b01      	cmp	r3, #1
  4090ca:	d106      	bne.n	4090da <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  4090cc:	2301      	movs	r3, #1
  4090ce:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  4090d0:	4b11      	ldr	r3, [pc, #68]	; (409118 <xTaskResumeAll+0x114>)
  4090d2:	2200      	movs	r2, #0
  4090d4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  4090d6:	4b11      	ldr	r3, [pc, #68]	; (40911c <xTaskResumeAll+0x118>)
  4090d8:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4090da:	4b11      	ldr	r3, [pc, #68]	; (409120 <xTaskResumeAll+0x11c>)
  4090dc:	4798      	blx	r3

	return xAlreadyYielded;
  4090de:	687b      	ldr	r3, [r7, #4]
}
  4090e0:	4618      	mov	r0, r3
  4090e2:	370c      	adds	r7, #12
  4090e4:	46bd      	mov	sp, r7
  4090e6:	bd90      	pop	{r4, r7, pc}
  4090e8:	20008840 	.word	0x20008840
  4090ec:	004081cd 	.word	0x004081cd
  4090f0:	00408189 	.word	0x00408189
  4090f4:	2000882c 	.word	0x2000882c
  4090f8:	200087ec 	.word	0x200087ec
  4090fc:	00407fb1 	.word	0x00407fb1
  409100:	20008838 	.word	0x20008838
  409104:	20008690 	.word	0x20008690
  409108:	00407ef1 	.word	0x00407ef1
  40910c:	2000868c 	.word	0x2000868c
  409110:	20008844 	.word	0x20008844
  409114:	00409181 	.word	0x00409181
  409118:	20008848 	.word	0x20008848
  40911c:	00408171 	.word	0x00408171
  409120:	004081a5 	.word	0x004081a5

00409124 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  409124:	b580      	push	{r7, lr}
  409126:	b082      	sub	sp, #8
  409128:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40912a:	4b06      	ldr	r3, [pc, #24]	; (409144 <xTaskGetTickCount+0x20>)
  40912c:	4798      	blx	r3
	{
		xTicks = xTickCount;
  40912e:	4b06      	ldr	r3, [pc, #24]	; (409148 <xTaskGetTickCount+0x24>)
  409130:	681b      	ldr	r3, [r3, #0]
  409132:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  409134:	4b05      	ldr	r3, [pc, #20]	; (40914c <xTaskGetTickCount+0x28>)
  409136:	4798      	blx	r3

	return xTicks;
  409138:	687b      	ldr	r3, [r7, #4]
}
  40913a:	4618      	mov	r0, r3
  40913c:	3708      	adds	r7, #8
  40913e:	46bd      	mov	sp, r7
  409140:	bd80      	pop	{r7, pc}
  409142:	bf00      	nop
  409144:	00408189 	.word	0x00408189
  409148:	20008830 	.word	0x20008830
  40914c:	004081a5 	.word	0x004081a5

00409150 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  409150:	b580      	push	{r7, lr}
  409152:	b082      	sub	sp, #8
  409154:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  409156:	4b07      	ldr	r3, [pc, #28]	; (409174 <xTaskGetTickCountFromISR+0x24>)
  409158:	4798      	blx	r3
  40915a:	6078      	str	r0, [r7, #4]
	xReturn = xTickCount;
  40915c:	4b06      	ldr	r3, [pc, #24]	; (409178 <xTaskGetTickCountFromISR+0x28>)
  40915e:	681b      	ldr	r3, [r3, #0]
  409160:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  409162:	6878      	ldr	r0, [r7, #4]
  409164:	4b05      	ldr	r3, [pc, #20]	; (40917c <xTaskGetTickCountFromISR+0x2c>)
  409166:	4798      	blx	r3

	return xReturn;
  409168:	683b      	ldr	r3, [r7, #0]
}
  40916a:	4618      	mov	r0, r3
  40916c:	3708      	adds	r7, #8
  40916e:	46bd      	mov	sp, r7
  409170:	bd80      	pop	{r7, pc}
  409172:	bf00      	nop
  409174:	004081cd 	.word	0x004081cd
  409178:	20008830 	.word	0x20008830
  40917c:	004081e1 	.word	0x004081e1

00409180 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  409180:	b580      	push	{r7, lr}
  409182:	b084      	sub	sp, #16
  409184:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  409186:	4b44      	ldr	r3, [pc, #272]	; (409298 <vTaskIncrementTick+0x118>)
  409188:	681b      	ldr	r3, [r3, #0]
  40918a:	2b00      	cmp	r3, #0
  40918c:	d17c      	bne.n	409288 <vTaskIncrementTick+0x108>
	{
		++xTickCount;
  40918e:	4b43      	ldr	r3, [pc, #268]	; (40929c <vTaskIncrementTick+0x11c>)
  409190:	681b      	ldr	r3, [r3, #0]
  409192:	1c5a      	adds	r2, r3, #1
  409194:	4b41      	ldr	r3, [pc, #260]	; (40929c <vTaskIncrementTick+0x11c>)
  409196:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  409198:	4b40      	ldr	r3, [pc, #256]	; (40929c <vTaskIncrementTick+0x11c>)
  40919a:	681b      	ldr	r3, [r3, #0]
  40919c:	2b00      	cmp	r3, #0
  40919e:	d12a      	bne.n	4091f6 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4091a0:	4b3f      	ldr	r3, [pc, #252]	; (4092a0 <vTaskIncrementTick+0x120>)
  4091a2:	681b      	ldr	r3, [r3, #0]
  4091a4:	681b      	ldr	r3, [r3, #0]
  4091a6:	2b00      	cmp	r3, #0
  4091a8:	d003      	beq.n	4091b2 <vTaskIncrementTick+0x32>
  4091aa:	4b3e      	ldr	r3, [pc, #248]	; (4092a4 <vTaskIncrementTick+0x124>)
  4091ac:	4798      	blx	r3
  4091ae:	bf00      	nop
  4091b0:	e7fd      	b.n	4091ae <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4091b2:	4b3b      	ldr	r3, [pc, #236]	; (4092a0 <vTaskIncrementTick+0x120>)
  4091b4:	681b      	ldr	r3, [r3, #0]
  4091b6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4091b8:	4b3b      	ldr	r3, [pc, #236]	; (4092a8 <vTaskIncrementTick+0x128>)
  4091ba:	681a      	ldr	r2, [r3, #0]
  4091bc:	4b38      	ldr	r3, [pc, #224]	; (4092a0 <vTaskIncrementTick+0x120>)
  4091be:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4091c0:	4b39      	ldr	r3, [pc, #228]	; (4092a8 <vTaskIncrementTick+0x128>)
  4091c2:	68fa      	ldr	r2, [r7, #12]
  4091c4:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  4091c6:	4b39      	ldr	r3, [pc, #228]	; (4092ac <vTaskIncrementTick+0x12c>)
  4091c8:	681b      	ldr	r3, [r3, #0]
  4091ca:	1c5a      	adds	r2, r3, #1
  4091cc:	4b37      	ldr	r3, [pc, #220]	; (4092ac <vTaskIncrementTick+0x12c>)
  4091ce:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4091d0:	4b33      	ldr	r3, [pc, #204]	; (4092a0 <vTaskIncrementTick+0x120>)
  4091d2:	681b      	ldr	r3, [r3, #0]
  4091d4:	681b      	ldr	r3, [r3, #0]
  4091d6:	2b00      	cmp	r3, #0
  4091d8:	d104      	bne.n	4091e4 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4091da:	4b35      	ldr	r3, [pc, #212]	; (4092b0 <vTaskIncrementTick+0x130>)
  4091dc:	f04f 32ff 	mov.w	r2, #4294967295
  4091e0:	601a      	str	r2, [r3, #0]
  4091e2:	e008      	b.n	4091f6 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4091e4:	4b2e      	ldr	r3, [pc, #184]	; (4092a0 <vTaskIncrementTick+0x120>)
  4091e6:	681b      	ldr	r3, [r3, #0]
  4091e8:	68db      	ldr	r3, [r3, #12]
  4091ea:	68db      	ldr	r3, [r3, #12]
  4091ec:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4091ee:	68bb      	ldr	r3, [r7, #8]
  4091f0:	685a      	ldr	r2, [r3, #4]
  4091f2:	4b2f      	ldr	r3, [pc, #188]	; (4092b0 <vTaskIncrementTick+0x130>)
  4091f4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4091f6:	4b29      	ldr	r3, [pc, #164]	; (40929c <vTaskIncrementTick+0x11c>)
  4091f8:	681a      	ldr	r2, [r3, #0]
  4091fa:	4b2d      	ldr	r3, [pc, #180]	; (4092b0 <vTaskIncrementTick+0x130>)
  4091fc:	681b      	ldr	r3, [r3, #0]
  4091fe:	429a      	cmp	r2, r3
  409200:	d341      	bcc.n	409286 <vTaskIncrementTick+0x106>
  409202:	4b27      	ldr	r3, [pc, #156]	; (4092a0 <vTaskIncrementTick+0x120>)
  409204:	681b      	ldr	r3, [r3, #0]
  409206:	681b      	ldr	r3, [r3, #0]
  409208:	2b00      	cmp	r3, #0
  40920a:	d104      	bne.n	409216 <vTaskIncrementTick+0x96>
  40920c:	4b28      	ldr	r3, [pc, #160]	; (4092b0 <vTaskIncrementTick+0x130>)
  40920e:	f04f 32ff 	mov.w	r2, #4294967295
  409212:	601a      	str	r2, [r3, #0]
  409214:	e037      	b.n	409286 <vTaskIncrementTick+0x106>
  409216:	4b22      	ldr	r3, [pc, #136]	; (4092a0 <vTaskIncrementTick+0x120>)
  409218:	681b      	ldr	r3, [r3, #0]
  40921a:	68db      	ldr	r3, [r3, #12]
  40921c:	68db      	ldr	r3, [r3, #12]
  40921e:	60bb      	str	r3, [r7, #8]
  409220:	68bb      	ldr	r3, [r7, #8]
  409222:	685b      	ldr	r3, [r3, #4]
  409224:	607b      	str	r3, [r7, #4]
  409226:	4b1d      	ldr	r3, [pc, #116]	; (40929c <vTaskIncrementTick+0x11c>)
  409228:	681a      	ldr	r2, [r3, #0]
  40922a:	687b      	ldr	r3, [r7, #4]
  40922c:	429a      	cmp	r2, r3
  40922e:	d203      	bcs.n	409238 <vTaskIncrementTick+0xb8>
  409230:	4b1f      	ldr	r3, [pc, #124]	; (4092b0 <vTaskIncrementTick+0x130>)
  409232:	687a      	ldr	r2, [r7, #4]
  409234:	601a      	str	r2, [r3, #0]
  409236:	e026      	b.n	409286 <vTaskIncrementTick+0x106>
  409238:	68bb      	ldr	r3, [r7, #8]
  40923a:	3304      	adds	r3, #4
  40923c:	4618      	mov	r0, r3
  40923e:	4b1d      	ldr	r3, [pc, #116]	; (4092b4 <vTaskIncrementTick+0x134>)
  409240:	4798      	blx	r3
  409242:	68bb      	ldr	r3, [r7, #8]
  409244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409246:	2b00      	cmp	r3, #0
  409248:	d004      	beq.n	409254 <vTaskIncrementTick+0xd4>
  40924a:	68bb      	ldr	r3, [r7, #8]
  40924c:	3318      	adds	r3, #24
  40924e:	4618      	mov	r0, r3
  409250:	4b18      	ldr	r3, [pc, #96]	; (4092b4 <vTaskIncrementTick+0x134>)
  409252:	4798      	blx	r3
  409254:	68bb      	ldr	r3, [r7, #8]
  409256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409258:	4b17      	ldr	r3, [pc, #92]	; (4092b8 <vTaskIncrementTick+0x138>)
  40925a:	681b      	ldr	r3, [r3, #0]
  40925c:	429a      	cmp	r2, r3
  40925e:	d903      	bls.n	409268 <vTaskIncrementTick+0xe8>
  409260:	68bb      	ldr	r3, [r7, #8]
  409262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409264:	4b14      	ldr	r3, [pc, #80]	; (4092b8 <vTaskIncrementTick+0x138>)
  409266:	601a      	str	r2, [r3, #0]
  409268:	68bb      	ldr	r3, [r7, #8]
  40926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40926c:	4613      	mov	r3, r2
  40926e:	009b      	lsls	r3, r3, #2
  409270:	4413      	add	r3, r2
  409272:	009b      	lsls	r3, r3, #2
  409274:	4a11      	ldr	r2, [pc, #68]	; (4092bc <vTaskIncrementTick+0x13c>)
  409276:	441a      	add	r2, r3
  409278:	68bb      	ldr	r3, [r7, #8]
  40927a:	3304      	adds	r3, #4
  40927c:	4610      	mov	r0, r2
  40927e:	4619      	mov	r1, r3
  409280:	4b0f      	ldr	r3, [pc, #60]	; (4092c0 <vTaskIncrementTick+0x140>)
  409282:	4798      	blx	r3
  409284:	e7bd      	b.n	409202 <vTaskIncrementTick+0x82>
  409286:	e004      	b.n	409292 <vTaskIncrementTick+0x112>
	}
	else
	{
		++uxMissedTicks;
  409288:	4b0e      	ldr	r3, [pc, #56]	; (4092c4 <vTaskIncrementTick+0x144>)
  40928a:	681b      	ldr	r3, [r3, #0]
  40928c:	1c5a      	adds	r2, r3, #1
  40928e:	4b0d      	ldr	r3, [pc, #52]	; (4092c4 <vTaskIncrementTick+0x144>)
  409290:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  409292:	3710      	adds	r7, #16
  409294:	46bd      	mov	sp, r7
  409296:	bd80      	pop	{r7, pc}
  409298:	20008840 	.word	0x20008840
  40929c:	20008830 	.word	0x20008830
  4092a0:	200087e4 	.word	0x200087e4
  4092a4:	004081cd 	.word	0x004081cd
  4092a8:	200087e8 	.word	0x200087e8
  4092ac:	2000884c 	.word	0x2000884c
  4092b0:	20000360 	.word	0x20000360
  4092b4:	00407fb1 	.word	0x00407fb1
  4092b8:	20008838 	.word	0x20008838
  4092bc:	20008690 	.word	0x20008690
  4092c0:	00407ef1 	.word	0x00407ef1
  4092c4:	20008844 	.word	0x20008844

004092c8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4092c8:	b580      	push	{r7, lr}
  4092ca:	b082      	sub	sp, #8
  4092cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4092ce:	4b21      	ldr	r3, [pc, #132]	; (409354 <vTaskSwitchContext+0x8c>)
  4092d0:	681b      	ldr	r3, [r3, #0]
  4092d2:	2b00      	cmp	r3, #0
  4092d4:	d003      	beq.n	4092de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4092d6:	4b20      	ldr	r3, [pc, #128]	; (409358 <vTaskSwitchContext+0x90>)
  4092d8:	2201      	movs	r2, #1
  4092da:	601a      	str	r2, [r3, #0]
  4092dc:	e036      	b.n	40934c <vTaskSwitchContext+0x84>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  4092de:	e00c      	b.n	4092fa <vTaskSwitchContext+0x32>
  4092e0:	4b1e      	ldr	r3, [pc, #120]	; (40935c <vTaskSwitchContext+0x94>)
  4092e2:	681b      	ldr	r3, [r3, #0]
  4092e4:	2b00      	cmp	r3, #0
  4092e6:	d103      	bne.n	4092f0 <vTaskSwitchContext+0x28>
  4092e8:	4b1d      	ldr	r3, [pc, #116]	; (409360 <vTaskSwitchContext+0x98>)
  4092ea:	4798      	blx	r3
  4092ec:	bf00      	nop
  4092ee:	e7fd      	b.n	4092ec <vTaskSwitchContext+0x24>
  4092f0:	4b1a      	ldr	r3, [pc, #104]	; (40935c <vTaskSwitchContext+0x94>)
  4092f2:	681b      	ldr	r3, [r3, #0]
  4092f4:	1e5a      	subs	r2, r3, #1
  4092f6:	4b19      	ldr	r3, [pc, #100]	; (40935c <vTaskSwitchContext+0x94>)
  4092f8:	601a      	str	r2, [r3, #0]
  4092fa:	4b18      	ldr	r3, [pc, #96]	; (40935c <vTaskSwitchContext+0x94>)
  4092fc:	681a      	ldr	r2, [r3, #0]
  4092fe:	4919      	ldr	r1, [pc, #100]	; (409364 <vTaskSwitchContext+0x9c>)
  409300:	4613      	mov	r3, r2
  409302:	009b      	lsls	r3, r3, #2
  409304:	4413      	add	r3, r2
  409306:	009b      	lsls	r3, r3, #2
  409308:	440b      	add	r3, r1
  40930a:	681b      	ldr	r3, [r3, #0]
  40930c:	2b00      	cmp	r3, #0
  40930e:	d0e7      	beq.n	4092e0 <vTaskSwitchContext+0x18>
  409310:	4b12      	ldr	r3, [pc, #72]	; (40935c <vTaskSwitchContext+0x94>)
  409312:	681a      	ldr	r2, [r3, #0]
  409314:	4613      	mov	r3, r2
  409316:	009b      	lsls	r3, r3, #2
  409318:	4413      	add	r3, r2
  40931a:	009b      	lsls	r3, r3, #2
  40931c:	4a11      	ldr	r2, [pc, #68]	; (409364 <vTaskSwitchContext+0x9c>)
  40931e:	4413      	add	r3, r2
  409320:	607b      	str	r3, [r7, #4]
  409322:	687b      	ldr	r3, [r7, #4]
  409324:	685b      	ldr	r3, [r3, #4]
  409326:	685a      	ldr	r2, [r3, #4]
  409328:	687b      	ldr	r3, [r7, #4]
  40932a:	605a      	str	r2, [r3, #4]
  40932c:	687b      	ldr	r3, [r7, #4]
  40932e:	685a      	ldr	r2, [r3, #4]
  409330:	687b      	ldr	r3, [r7, #4]
  409332:	3308      	adds	r3, #8
  409334:	429a      	cmp	r2, r3
  409336:	d104      	bne.n	409342 <vTaskSwitchContext+0x7a>
  409338:	687b      	ldr	r3, [r7, #4]
  40933a:	685b      	ldr	r3, [r3, #4]
  40933c:	685a      	ldr	r2, [r3, #4]
  40933e:	687b      	ldr	r3, [r7, #4]
  409340:	605a      	str	r2, [r3, #4]
  409342:	687b      	ldr	r3, [r7, #4]
  409344:	685b      	ldr	r3, [r3, #4]
  409346:	68da      	ldr	r2, [r3, #12]
  409348:	4b07      	ldr	r3, [pc, #28]	; (409368 <vTaskSwitchContext+0xa0>)
  40934a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
  40934c:	3708      	adds	r7, #8
  40934e:	46bd      	mov	sp, r7
  409350:	bd80      	pop	{r7, pc}
  409352:	bf00      	nop
  409354:	20008840 	.word	0x20008840
  409358:	20008848 	.word	0x20008848
  40935c:	20008838 	.word	0x20008838
  409360:	004081cd 	.word	0x004081cd
  409364:	20008690 	.word	0x20008690
  409368:	2000868c 	.word	0x2000868c

0040936c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  40936c:	b580      	push	{r7, lr}
  40936e:	b084      	sub	sp, #16
  409370:	af00      	add	r7, sp, #0
  409372:	6078      	str	r0, [r7, #4]
  409374:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  409376:	687b      	ldr	r3, [r7, #4]
  409378:	2b00      	cmp	r3, #0
  40937a:	d103      	bne.n	409384 <vTaskPlaceOnEventList+0x18>
  40937c:	4b13      	ldr	r3, [pc, #76]	; (4093cc <vTaskPlaceOnEventList+0x60>)
  40937e:	4798      	blx	r3
  409380:	bf00      	nop
  409382:	e7fd      	b.n	409380 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  409384:	4b12      	ldr	r3, [pc, #72]	; (4093d0 <vTaskPlaceOnEventList+0x64>)
  409386:	681b      	ldr	r3, [r3, #0]
  409388:	3318      	adds	r3, #24
  40938a:	6878      	ldr	r0, [r7, #4]
  40938c:	4619      	mov	r1, r3
  40938e:	4b11      	ldr	r3, [pc, #68]	; (4093d4 <vTaskPlaceOnEventList+0x68>)
  409390:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  409392:	4b0f      	ldr	r3, [pc, #60]	; (4093d0 <vTaskPlaceOnEventList+0x64>)
  409394:	681b      	ldr	r3, [r3, #0]
  409396:	3304      	adds	r3, #4
  409398:	4618      	mov	r0, r3
  40939a:	4b0f      	ldr	r3, [pc, #60]	; (4093d8 <vTaskPlaceOnEventList+0x6c>)
  40939c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40939e:	683b      	ldr	r3, [r7, #0]
  4093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4093a4:	d107      	bne.n	4093b6 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4093a6:	4b0a      	ldr	r3, [pc, #40]	; (4093d0 <vTaskPlaceOnEventList+0x64>)
  4093a8:	681b      	ldr	r3, [r3, #0]
  4093aa:	3304      	adds	r3, #4
  4093ac:	480b      	ldr	r0, [pc, #44]	; (4093dc <vTaskPlaceOnEventList+0x70>)
  4093ae:	4619      	mov	r1, r3
  4093b0:	4b0b      	ldr	r3, [pc, #44]	; (4093e0 <vTaskPlaceOnEventList+0x74>)
  4093b2:	4798      	blx	r3
  4093b4:	e007      	b.n	4093c6 <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  4093b6:	4b0b      	ldr	r3, [pc, #44]	; (4093e4 <vTaskPlaceOnEventList+0x78>)
  4093b8:	681a      	ldr	r2, [r3, #0]
  4093ba:	683b      	ldr	r3, [r7, #0]
  4093bc:	4413      	add	r3, r2
  4093be:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4093c0:	68f8      	ldr	r0, [r7, #12]
  4093c2:	4b09      	ldr	r3, [pc, #36]	; (4093e8 <vTaskPlaceOnEventList+0x7c>)
  4093c4:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  4093c6:	3710      	adds	r7, #16
  4093c8:	46bd      	mov	sp, r7
  4093ca:	bd80      	pop	{r7, pc}
  4093cc:	004081cd 	.word	0x004081cd
  4093d0:	2000868c 	.word	0x2000868c
  4093d4:	00407f41 	.word	0x00407f41
  4093d8:	00407fb1 	.word	0x00407fb1
  4093dc:	20008818 	.word	0x20008818
  4093e0:	00407ef1 	.word	0x00407ef1
  4093e4:	20008830 	.word	0x20008830
  4093e8:	004097b5 	.word	0x004097b5

004093ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  4093ec:	b580      	push	{r7, lr}
  4093ee:	b084      	sub	sp, #16
  4093f0:	af00      	add	r7, sp, #0
  4093f2:	6078      	str	r0, [r7, #4]
  4093f4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  4093f6:	687b      	ldr	r3, [r7, #4]
  4093f8:	2b00      	cmp	r3, #0
  4093fa:	d103      	bne.n	409404 <vTaskPlaceOnEventListRestricted+0x18>
  4093fc:	4b0d      	ldr	r3, [pc, #52]	; (409434 <vTaskPlaceOnEventListRestricted+0x48>)
  4093fe:	4798      	blx	r3
  409400:	bf00      	nop
  409402:	e7fd      	b.n	409400 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  409404:	4b0c      	ldr	r3, [pc, #48]	; (409438 <vTaskPlaceOnEventListRestricted+0x4c>)
  409406:	681b      	ldr	r3, [r3, #0]
  409408:	3318      	adds	r3, #24
  40940a:	6878      	ldr	r0, [r7, #4]
  40940c:	4619      	mov	r1, r3
  40940e:	4b0b      	ldr	r3, [pc, #44]	; (40943c <vTaskPlaceOnEventListRestricted+0x50>)
  409410:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  409412:	4b09      	ldr	r3, [pc, #36]	; (409438 <vTaskPlaceOnEventListRestricted+0x4c>)
  409414:	681b      	ldr	r3, [r3, #0]
  409416:	3304      	adds	r3, #4
  409418:	4618      	mov	r0, r3
  40941a:	4b09      	ldr	r3, [pc, #36]	; (409440 <vTaskPlaceOnEventListRestricted+0x54>)
  40941c:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  40941e:	4b09      	ldr	r3, [pc, #36]	; (409444 <vTaskPlaceOnEventListRestricted+0x58>)
  409420:	681a      	ldr	r2, [r3, #0]
  409422:	683b      	ldr	r3, [r7, #0]
  409424:	4413      	add	r3, r2
  409426:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  409428:	68f8      	ldr	r0, [r7, #12]
  40942a:	4b07      	ldr	r3, [pc, #28]	; (409448 <vTaskPlaceOnEventListRestricted+0x5c>)
  40942c:	4798      	blx	r3
	}
  40942e:	3710      	adds	r7, #16
  409430:	46bd      	mov	sp, r7
  409432:	bd80      	pop	{r7, pc}
  409434:	004081cd 	.word	0x004081cd
  409438:	2000868c 	.word	0x2000868c
  40943c:	00407ef1 	.word	0x00407ef1
  409440:	00407fb1 	.word	0x00407fb1
  409444:	20008830 	.word	0x20008830
  409448:	004097b5 	.word	0x004097b5

0040944c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40944c:	b580      	push	{r7, lr}
  40944e:	b084      	sub	sp, #16
  409450:	af00      	add	r7, sp, #0
  409452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  409454:	687b      	ldr	r3, [r7, #4]
  409456:	68db      	ldr	r3, [r3, #12]
  409458:	68db      	ldr	r3, [r3, #12]
  40945a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  40945c:	68bb      	ldr	r3, [r7, #8]
  40945e:	2b00      	cmp	r3, #0
  409460:	d103      	bne.n	40946a <xTaskRemoveFromEventList+0x1e>
  409462:	4b21      	ldr	r3, [pc, #132]	; (4094e8 <xTaskRemoveFromEventList+0x9c>)
  409464:	4798      	blx	r3
  409466:	bf00      	nop
  409468:	e7fd      	b.n	409466 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40946a:	68bb      	ldr	r3, [r7, #8]
  40946c:	3318      	adds	r3, #24
  40946e:	4618      	mov	r0, r3
  409470:	4b1e      	ldr	r3, [pc, #120]	; (4094ec <xTaskRemoveFromEventList+0xa0>)
  409472:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  409474:	4b1e      	ldr	r3, [pc, #120]	; (4094f0 <xTaskRemoveFromEventList+0xa4>)
  409476:	681b      	ldr	r3, [r3, #0]
  409478:	2b00      	cmp	r3, #0
  40947a:	d11d      	bne.n	4094b8 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40947c:	68bb      	ldr	r3, [r7, #8]
  40947e:	3304      	adds	r3, #4
  409480:	4618      	mov	r0, r3
  409482:	4b1a      	ldr	r3, [pc, #104]	; (4094ec <xTaskRemoveFromEventList+0xa0>)
  409484:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  409486:	68bb      	ldr	r3, [r7, #8]
  409488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40948a:	4b1a      	ldr	r3, [pc, #104]	; (4094f4 <xTaskRemoveFromEventList+0xa8>)
  40948c:	681b      	ldr	r3, [r3, #0]
  40948e:	429a      	cmp	r2, r3
  409490:	d903      	bls.n	40949a <xTaskRemoveFromEventList+0x4e>
  409492:	68bb      	ldr	r3, [r7, #8]
  409494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409496:	4b17      	ldr	r3, [pc, #92]	; (4094f4 <xTaskRemoveFromEventList+0xa8>)
  409498:	601a      	str	r2, [r3, #0]
  40949a:	68bb      	ldr	r3, [r7, #8]
  40949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40949e:	4613      	mov	r3, r2
  4094a0:	009b      	lsls	r3, r3, #2
  4094a2:	4413      	add	r3, r2
  4094a4:	009b      	lsls	r3, r3, #2
  4094a6:	4a14      	ldr	r2, [pc, #80]	; (4094f8 <xTaskRemoveFromEventList+0xac>)
  4094a8:	441a      	add	r2, r3
  4094aa:	68bb      	ldr	r3, [r7, #8]
  4094ac:	3304      	adds	r3, #4
  4094ae:	4610      	mov	r0, r2
  4094b0:	4619      	mov	r1, r3
  4094b2:	4b12      	ldr	r3, [pc, #72]	; (4094fc <xTaskRemoveFromEventList+0xb0>)
  4094b4:	4798      	blx	r3
  4094b6:	e005      	b.n	4094c4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4094b8:	68bb      	ldr	r3, [r7, #8]
  4094ba:	3318      	adds	r3, #24
  4094bc:	4810      	ldr	r0, [pc, #64]	; (409500 <xTaskRemoveFromEventList+0xb4>)
  4094be:	4619      	mov	r1, r3
  4094c0:	4b0e      	ldr	r3, [pc, #56]	; (4094fc <xTaskRemoveFromEventList+0xb0>)
  4094c2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4094c4:	68bb      	ldr	r3, [r7, #8]
  4094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4094c8:	4b0e      	ldr	r3, [pc, #56]	; (409504 <xTaskRemoveFromEventList+0xb8>)
  4094ca:	681b      	ldr	r3, [r3, #0]
  4094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4094ce:	429a      	cmp	r2, r3
  4094d0:	d302      	bcc.n	4094d8 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  4094d2:	2301      	movs	r3, #1
  4094d4:	60fb      	str	r3, [r7, #12]
  4094d6:	e001      	b.n	4094dc <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  4094d8:	2300      	movs	r3, #0
  4094da:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  4094dc:	68fb      	ldr	r3, [r7, #12]
}
  4094de:	4618      	mov	r0, r3
  4094e0:	3710      	adds	r7, #16
  4094e2:	46bd      	mov	sp, r7
  4094e4:	bd80      	pop	{r7, pc}
  4094e6:	bf00      	nop
  4094e8:	004081cd 	.word	0x004081cd
  4094ec:	00407fb1 	.word	0x00407fb1
  4094f0:	20008840 	.word	0x20008840
  4094f4:	20008838 	.word	0x20008838
  4094f8:	20008690 	.word	0x20008690
  4094fc:	00407ef1 	.word	0x00407ef1
  409500:	200087ec 	.word	0x200087ec
  409504:	2000868c 	.word	0x2000868c

00409508 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  409508:	b580      	push	{r7, lr}
  40950a:	b082      	sub	sp, #8
  40950c:	af00      	add	r7, sp, #0
  40950e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  409510:	687b      	ldr	r3, [r7, #4]
  409512:	2b00      	cmp	r3, #0
  409514:	d103      	bne.n	40951e <vTaskSetTimeOutState+0x16>
  409516:	4b07      	ldr	r3, [pc, #28]	; (409534 <vTaskSetTimeOutState+0x2c>)
  409518:	4798      	blx	r3
  40951a:	bf00      	nop
  40951c:	e7fd      	b.n	40951a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40951e:	4b06      	ldr	r3, [pc, #24]	; (409538 <vTaskSetTimeOutState+0x30>)
  409520:	681a      	ldr	r2, [r3, #0]
  409522:	687b      	ldr	r3, [r7, #4]
  409524:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  409526:	4b05      	ldr	r3, [pc, #20]	; (40953c <vTaskSetTimeOutState+0x34>)
  409528:	681a      	ldr	r2, [r3, #0]
  40952a:	687b      	ldr	r3, [r7, #4]
  40952c:	605a      	str	r2, [r3, #4]
}
  40952e:	3708      	adds	r7, #8
  409530:	46bd      	mov	sp, r7
  409532:	bd80      	pop	{r7, pc}
  409534:	004081cd 	.word	0x004081cd
  409538:	2000884c 	.word	0x2000884c
  40953c:	20008830 	.word	0x20008830

00409540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  409540:	b580      	push	{r7, lr}
  409542:	b084      	sub	sp, #16
  409544:	af00      	add	r7, sp, #0
  409546:	6078      	str	r0, [r7, #4]
  409548:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  40954a:	687b      	ldr	r3, [r7, #4]
  40954c:	2b00      	cmp	r3, #0
  40954e:	d103      	bne.n	409558 <xTaskCheckForTimeOut+0x18>
  409550:	4b22      	ldr	r3, [pc, #136]	; (4095dc <xTaskCheckForTimeOut+0x9c>)
  409552:	4798      	blx	r3
  409554:	bf00      	nop
  409556:	e7fd      	b.n	409554 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  409558:	683b      	ldr	r3, [r7, #0]
  40955a:	2b00      	cmp	r3, #0
  40955c:	d103      	bne.n	409566 <xTaskCheckForTimeOut+0x26>
  40955e:	4b1f      	ldr	r3, [pc, #124]	; (4095dc <xTaskCheckForTimeOut+0x9c>)
  409560:	4798      	blx	r3
  409562:	bf00      	nop
  409564:	e7fd      	b.n	409562 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  409566:	4b1e      	ldr	r3, [pc, #120]	; (4095e0 <xTaskCheckForTimeOut+0xa0>)
  409568:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40956a:	683b      	ldr	r3, [r7, #0]
  40956c:	681b      	ldr	r3, [r3, #0]
  40956e:	f1b3 3fff 	cmp.w	r3, #4294967295
  409572:	d102      	bne.n	40957a <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  409574:	2300      	movs	r3, #0
  409576:	60fb      	str	r3, [r7, #12]
  409578:	e029      	b.n	4095ce <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40957a:	687b      	ldr	r3, [r7, #4]
  40957c:	681a      	ldr	r2, [r3, #0]
  40957e:	4b19      	ldr	r3, [pc, #100]	; (4095e4 <xTaskCheckForTimeOut+0xa4>)
  409580:	681b      	ldr	r3, [r3, #0]
  409582:	429a      	cmp	r2, r3
  409584:	d008      	beq.n	409598 <xTaskCheckForTimeOut+0x58>
  409586:	687b      	ldr	r3, [r7, #4]
  409588:	685a      	ldr	r2, [r3, #4]
  40958a:	4b17      	ldr	r3, [pc, #92]	; (4095e8 <xTaskCheckForTimeOut+0xa8>)
  40958c:	681b      	ldr	r3, [r3, #0]
  40958e:	429a      	cmp	r2, r3
  409590:	d802      	bhi.n	409598 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  409592:	2301      	movs	r3, #1
  409594:	60fb      	str	r3, [r7, #12]
  409596:	e01a      	b.n	4095ce <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  409598:	4b13      	ldr	r3, [pc, #76]	; (4095e8 <xTaskCheckForTimeOut+0xa8>)
  40959a:	681a      	ldr	r2, [r3, #0]
  40959c:	687b      	ldr	r3, [r7, #4]
  40959e:	685b      	ldr	r3, [r3, #4]
  4095a0:	1ad2      	subs	r2, r2, r3
  4095a2:	683b      	ldr	r3, [r7, #0]
  4095a4:	681b      	ldr	r3, [r3, #0]
  4095a6:	429a      	cmp	r2, r3
  4095a8:	d20f      	bcs.n	4095ca <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4095aa:	683b      	ldr	r3, [r7, #0]
  4095ac:	681a      	ldr	r2, [r3, #0]
  4095ae:	687b      	ldr	r3, [r7, #4]
  4095b0:	6859      	ldr	r1, [r3, #4]
  4095b2:	4b0d      	ldr	r3, [pc, #52]	; (4095e8 <xTaskCheckForTimeOut+0xa8>)
  4095b4:	681b      	ldr	r3, [r3, #0]
  4095b6:	1acb      	subs	r3, r1, r3
  4095b8:	441a      	add	r2, r3
  4095ba:	683b      	ldr	r3, [r7, #0]
  4095bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4095be:	6878      	ldr	r0, [r7, #4]
  4095c0:	4b0a      	ldr	r3, [pc, #40]	; (4095ec <xTaskCheckForTimeOut+0xac>)
  4095c2:	4798      	blx	r3
			xReturn = pdFALSE;
  4095c4:	2300      	movs	r3, #0
  4095c6:	60fb      	str	r3, [r7, #12]
  4095c8:	e001      	b.n	4095ce <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  4095ca:	2301      	movs	r3, #1
  4095cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  4095ce:	4b08      	ldr	r3, [pc, #32]	; (4095f0 <xTaskCheckForTimeOut+0xb0>)
  4095d0:	4798      	blx	r3

	return xReturn;
  4095d2:	68fb      	ldr	r3, [r7, #12]
}
  4095d4:	4618      	mov	r0, r3
  4095d6:	3710      	adds	r7, #16
  4095d8:	46bd      	mov	sp, r7
  4095da:	bd80      	pop	{r7, pc}
  4095dc:	004081cd 	.word	0x004081cd
  4095e0:	00408189 	.word	0x00408189
  4095e4:	2000884c 	.word	0x2000884c
  4095e8:	20008830 	.word	0x20008830
  4095ec:	00409509 	.word	0x00409509
  4095f0:	004081a5 	.word	0x004081a5

004095f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4095f4:	b480      	push	{r7}
  4095f6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4095f8:	4b03      	ldr	r3, [pc, #12]	; (409608 <vTaskMissedYield+0x14>)
  4095fa:	2201      	movs	r2, #1
  4095fc:	601a      	str	r2, [r3, #0]
}
  4095fe:	46bd      	mov	sp, r7
  409600:	f85d 7b04 	ldr.w	r7, [sp], #4
  409604:	4770      	bx	lr
  409606:	bf00      	nop
  409608:	20008848 	.word	0x20008848

0040960c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  40960c:	b580      	push	{r7, lr}
  40960e:	b082      	sub	sp, #8
  409610:	af00      	add	r7, sp, #0
  409612:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  409614:	4b04      	ldr	r3, [pc, #16]	; (409628 <prvIdleTask+0x1c>)
  409616:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  409618:	4b04      	ldr	r3, [pc, #16]	; (40962c <prvIdleTask+0x20>)
  40961a:	681b      	ldr	r3, [r3, #0]
  40961c:	2b01      	cmp	r3, #1
  40961e:	d902      	bls.n	409626 <prvIdleTask+0x1a>
			{
				taskYIELD();
  409620:	4b03      	ldr	r3, [pc, #12]	; (409630 <prvIdleTask+0x24>)
  409622:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  409624:	e7f6      	b.n	409614 <prvIdleTask+0x8>
  409626:	e7f5      	b.n	409614 <prvIdleTask+0x8>
  409628:	00409729 	.word	0x00409729
  40962c:	20008690 	.word	0x20008690
  409630:	00408171 	.word	0x00408171

00409634 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  409634:	b580      	push	{r7, lr}
  409636:	b084      	sub	sp, #16
  409638:	af00      	add	r7, sp, #0
  40963a:	60f8      	str	r0, [r7, #12]
  40963c:	60b9      	str	r1, [r7, #8]
  40963e:	607a      	str	r2, [r7, #4]
  409640:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  409642:	68fb      	ldr	r3, [r7, #12]
  409644:	3334      	adds	r3, #52	; 0x34
  409646:	4618      	mov	r0, r3
  409648:	68b9      	ldr	r1, [r7, #8]
  40964a:	220a      	movs	r2, #10
  40964c:	4b14      	ldr	r3, [pc, #80]	; (4096a0 <prvInitialiseTCBVariables+0x6c>)
  40964e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  409650:	68fb      	ldr	r3, [r7, #12]
  409652:	2200      	movs	r2, #0
  409654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  409658:	687b      	ldr	r3, [r7, #4]
  40965a:	2b0e      	cmp	r3, #14
  40965c:	d901      	bls.n	409662 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40965e:	230e      	movs	r3, #14
  409660:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  409662:	68fb      	ldr	r3, [r7, #12]
  409664:	687a      	ldr	r2, [r7, #4]
  409666:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  409668:	68fb      	ldr	r3, [r7, #12]
  40966a:	687a      	ldr	r2, [r7, #4]
  40966c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40966e:	68fb      	ldr	r3, [r7, #12]
  409670:	3304      	adds	r3, #4
  409672:	4618      	mov	r0, r3
  409674:	4b0b      	ldr	r3, [pc, #44]	; (4096a4 <prvInitialiseTCBVariables+0x70>)
  409676:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  409678:	68fb      	ldr	r3, [r7, #12]
  40967a:	3318      	adds	r3, #24
  40967c:	4618      	mov	r0, r3
  40967e:	4b09      	ldr	r3, [pc, #36]	; (4096a4 <prvInitialiseTCBVariables+0x70>)
  409680:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  409682:	68fb      	ldr	r3, [r7, #12]
  409684:	68fa      	ldr	r2, [r7, #12]
  409686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  409688:	687b      	ldr	r3, [r7, #4]
  40968a:	f1c3 020f 	rsb	r2, r3, #15
  40968e:	68fb      	ldr	r3, [r7, #12]
  409690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  409692:	68fb      	ldr	r3, [r7, #12]
  409694:	68fa      	ldr	r2, [r7, #12]
  409696:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  409698:	3710      	adds	r7, #16
  40969a:	46bd      	mov	sp, r7
  40969c:	bd80      	pop	{r7, pc}
  40969e:	bf00      	nop
  4096a0:	0040cc7d 	.word	0x0040cc7d
  4096a4:	00407ed9 	.word	0x00407ed9

004096a8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  4096a8:	b580      	push	{r7, lr}
  4096aa:	b082      	sub	sp, #8
  4096ac:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4096ae:	2300      	movs	r3, #0
  4096b0:	607b      	str	r3, [r7, #4]
  4096b2:	e00c      	b.n	4096ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4096b4:	687a      	ldr	r2, [r7, #4]
  4096b6:	4613      	mov	r3, r2
  4096b8:	009b      	lsls	r3, r3, #2
  4096ba:	4413      	add	r3, r2
  4096bc:	009b      	lsls	r3, r3, #2
  4096be:	4a11      	ldr	r2, [pc, #68]	; (409704 <prvInitialiseTaskLists+0x5c>)
  4096c0:	4413      	add	r3, r2
  4096c2:	4618      	mov	r0, r3
  4096c4:	4b10      	ldr	r3, [pc, #64]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096c6:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4096c8:	687b      	ldr	r3, [r7, #4]
  4096ca:	3301      	adds	r3, #1
  4096cc:	607b      	str	r3, [r7, #4]
  4096ce:	687b      	ldr	r3, [r7, #4]
  4096d0:	2b0e      	cmp	r3, #14
  4096d2:	d9ef      	bls.n	4096b4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4096d4:	480d      	ldr	r0, [pc, #52]	; (40970c <prvInitialiseTaskLists+0x64>)
  4096d6:	4b0c      	ldr	r3, [pc, #48]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096d8:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4096da:	480d      	ldr	r0, [pc, #52]	; (409710 <prvInitialiseTaskLists+0x68>)
  4096dc:	4b0a      	ldr	r3, [pc, #40]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096de:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  4096e0:	480c      	ldr	r0, [pc, #48]	; (409714 <prvInitialiseTaskLists+0x6c>)
  4096e2:	4b09      	ldr	r3, [pc, #36]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096e4:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4096e6:	480c      	ldr	r0, [pc, #48]	; (409718 <prvInitialiseTaskLists+0x70>)
  4096e8:	4b07      	ldr	r3, [pc, #28]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096ea:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4096ec:	480b      	ldr	r0, [pc, #44]	; (40971c <prvInitialiseTaskLists+0x74>)
  4096ee:	4b06      	ldr	r3, [pc, #24]	; (409708 <prvInitialiseTaskLists+0x60>)
  4096f0:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4096f2:	4b0b      	ldr	r3, [pc, #44]	; (409720 <prvInitialiseTaskLists+0x78>)
  4096f4:	4a05      	ldr	r2, [pc, #20]	; (40970c <prvInitialiseTaskLists+0x64>)
  4096f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4096f8:	4b0a      	ldr	r3, [pc, #40]	; (409724 <prvInitialiseTaskLists+0x7c>)
  4096fa:	4a05      	ldr	r2, [pc, #20]	; (409710 <prvInitialiseTaskLists+0x68>)
  4096fc:	601a      	str	r2, [r3, #0]
}
  4096fe:	3708      	adds	r7, #8
  409700:	46bd      	mov	sp, r7
  409702:	bd80      	pop	{r7, pc}
  409704:	20008690 	.word	0x20008690
  409708:	00407e99 	.word	0x00407e99
  40970c:	200087bc 	.word	0x200087bc
  409710:	200087d0 	.word	0x200087d0
  409714:	200087ec 	.word	0x200087ec
  409718:	20008800 	.word	0x20008800
  40971c:	20008818 	.word	0x20008818
  409720:	200087e4 	.word	0x200087e4
  409724:	200087e8 	.word	0x200087e8

00409728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  409728:	b580      	push	{r7, lr}
  40972a:	b082      	sub	sp, #8
  40972c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40972e:	e028      	b.n	409782 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  409730:	4b17      	ldr	r3, [pc, #92]	; (409790 <prvCheckTasksWaitingTermination+0x68>)
  409732:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  409734:	4b17      	ldr	r3, [pc, #92]	; (409794 <prvCheckTasksWaitingTermination+0x6c>)
  409736:	681b      	ldr	r3, [r3, #0]
  409738:	2b00      	cmp	r3, #0
  40973a:	bf14      	ite	ne
  40973c:	2300      	movne	r3, #0
  40973e:	2301      	moveq	r3, #1
  409740:	b2db      	uxtb	r3, r3
  409742:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  409744:	4b14      	ldr	r3, [pc, #80]	; (409798 <prvCheckTasksWaitingTermination+0x70>)
  409746:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  409748:	687b      	ldr	r3, [r7, #4]
  40974a:	2b00      	cmp	r3, #0
  40974c:	d119      	bne.n	409782 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  40974e:	4b13      	ldr	r3, [pc, #76]	; (40979c <prvCheckTasksWaitingTermination+0x74>)
  409750:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  409752:	4b10      	ldr	r3, [pc, #64]	; (409794 <prvCheckTasksWaitingTermination+0x6c>)
  409754:	68db      	ldr	r3, [r3, #12]
  409756:	68db      	ldr	r3, [r3, #12]
  409758:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40975a:	683b      	ldr	r3, [r7, #0]
  40975c:	3304      	adds	r3, #4
  40975e:	4618      	mov	r0, r3
  409760:	4b0f      	ldr	r3, [pc, #60]	; (4097a0 <prvCheckTasksWaitingTermination+0x78>)
  409762:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  409764:	4b0f      	ldr	r3, [pc, #60]	; (4097a4 <prvCheckTasksWaitingTermination+0x7c>)
  409766:	681b      	ldr	r3, [r3, #0]
  409768:	1e5a      	subs	r2, r3, #1
  40976a:	4b0e      	ldr	r3, [pc, #56]	; (4097a4 <prvCheckTasksWaitingTermination+0x7c>)
  40976c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  40976e:	4b0e      	ldr	r3, [pc, #56]	; (4097a8 <prvCheckTasksWaitingTermination+0x80>)
  409770:	681b      	ldr	r3, [r3, #0]
  409772:	1e5a      	subs	r2, r3, #1
  409774:	4b0c      	ldr	r3, [pc, #48]	; (4097a8 <prvCheckTasksWaitingTermination+0x80>)
  409776:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  409778:	4b0c      	ldr	r3, [pc, #48]	; (4097ac <prvCheckTasksWaitingTermination+0x84>)
  40977a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  40977c:	6838      	ldr	r0, [r7, #0]
  40977e:	4b0c      	ldr	r3, [pc, #48]	; (4097b0 <prvCheckTasksWaitingTermination+0x88>)
  409780:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  409782:	4b09      	ldr	r3, [pc, #36]	; (4097a8 <prvCheckTasksWaitingTermination+0x80>)
  409784:	681b      	ldr	r3, [r3, #0]
  409786:	2b00      	cmp	r3, #0
  409788:	d1d2      	bne.n	409730 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  40978a:	3708      	adds	r7, #8
  40978c:	46bd      	mov	sp, r7
  40978e:	bd80      	pop	{r7, pc}
  409790:	00408fe9 	.word	0x00408fe9
  409794:	20008800 	.word	0x20008800
  409798:	00409005 	.word	0x00409005
  40979c:	00408189 	.word	0x00408189
  4097a0:	00407fb1 	.word	0x00407fb1
  4097a4:	2000882c 	.word	0x2000882c
  4097a8:	20008814 	.word	0x20008814
  4097ac:	004081a5 	.word	0x004081a5
  4097b0:	00409895 	.word	0x00409895

004097b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4097b4:	b580      	push	{r7, lr}
  4097b6:	b082      	sub	sp, #8
  4097b8:	af00      	add	r7, sp, #0
  4097ba:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4097bc:	4b13      	ldr	r3, [pc, #76]	; (40980c <prvAddCurrentTaskToDelayedList+0x58>)
  4097be:	681b      	ldr	r3, [r3, #0]
  4097c0:	687a      	ldr	r2, [r7, #4]
  4097c2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  4097c4:	4b12      	ldr	r3, [pc, #72]	; (409810 <prvAddCurrentTaskToDelayedList+0x5c>)
  4097c6:	681b      	ldr	r3, [r3, #0]
  4097c8:	687a      	ldr	r2, [r7, #4]
  4097ca:	429a      	cmp	r2, r3
  4097cc:	d209      	bcs.n	4097e2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4097ce:	4b11      	ldr	r3, [pc, #68]	; (409814 <prvAddCurrentTaskToDelayedList+0x60>)
  4097d0:	681a      	ldr	r2, [r3, #0]
  4097d2:	4b0e      	ldr	r3, [pc, #56]	; (40980c <prvAddCurrentTaskToDelayedList+0x58>)
  4097d4:	681b      	ldr	r3, [r3, #0]
  4097d6:	3304      	adds	r3, #4
  4097d8:	4610      	mov	r0, r2
  4097da:	4619      	mov	r1, r3
  4097dc:	4b0e      	ldr	r3, [pc, #56]	; (409818 <prvAddCurrentTaskToDelayedList+0x64>)
  4097de:	4798      	blx	r3
  4097e0:	e010      	b.n	409804 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4097e2:	4b0e      	ldr	r3, [pc, #56]	; (40981c <prvAddCurrentTaskToDelayedList+0x68>)
  4097e4:	681a      	ldr	r2, [r3, #0]
  4097e6:	4b09      	ldr	r3, [pc, #36]	; (40980c <prvAddCurrentTaskToDelayedList+0x58>)
  4097e8:	681b      	ldr	r3, [r3, #0]
  4097ea:	3304      	adds	r3, #4
  4097ec:	4610      	mov	r0, r2
  4097ee:	4619      	mov	r1, r3
  4097f0:	4b09      	ldr	r3, [pc, #36]	; (409818 <prvAddCurrentTaskToDelayedList+0x64>)
  4097f2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4097f4:	4b0a      	ldr	r3, [pc, #40]	; (409820 <prvAddCurrentTaskToDelayedList+0x6c>)
  4097f6:	681b      	ldr	r3, [r3, #0]
  4097f8:	687a      	ldr	r2, [r7, #4]
  4097fa:	429a      	cmp	r2, r3
  4097fc:	d202      	bcs.n	409804 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4097fe:	4b08      	ldr	r3, [pc, #32]	; (409820 <prvAddCurrentTaskToDelayedList+0x6c>)
  409800:	687a      	ldr	r2, [r7, #4]
  409802:	601a      	str	r2, [r3, #0]
		}
	}
}
  409804:	3708      	adds	r7, #8
  409806:	46bd      	mov	sp, r7
  409808:	bd80      	pop	{r7, pc}
  40980a:	bf00      	nop
  40980c:	2000868c 	.word	0x2000868c
  409810:	20008830 	.word	0x20008830
  409814:	200087e8 	.word	0x200087e8
  409818:	00407f41 	.word	0x00407f41
  40981c:	200087e4 	.word	0x200087e4
  409820:	20000360 	.word	0x20000360

00409824 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  409824:	b580      	push	{r7, lr}
  409826:	b084      	sub	sp, #16
  409828:	af00      	add	r7, sp, #0
  40982a:	4603      	mov	r3, r0
  40982c:	6039      	str	r1, [r7, #0]
  40982e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  409830:	204c      	movs	r0, #76	; 0x4c
  409832:	4b15      	ldr	r3, [pc, #84]	; (409888 <prvAllocateTCBAndStack+0x64>)
  409834:	4798      	blx	r3
  409836:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  409838:	68fb      	ldr	r3, [r7, #12]
  40983a:	2b00      	cmp	r3, #0
  40983c:	d01f      	beq.n	40987e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40983e:	683b      	ldr	r3, [r7, #0]
  409840:	2b00      	cmp	r3, #0
  409842:	d106      	bne.n	409852 <prvAllocateTCBAndStack+0x2e>
  409844:	88fb      	ldrh	r3, [r7, #6]
  409846:	009b      	lsls	r3, r3, #2
  409848:	4618      	mov	r0, r3
  40984a:	4b0f      	ldr	r3, [pc, #60]	; (409888 <prvAllocateTCBAndStack+0x64>)
  40984c:	4798      	blx	r3
  40984e:	4603      	mov	r3, r0
  409850:	e000      	b.n	409854 <prvAllocateTCBAndStack+0x30>
  409852:	683b      	ldr	r3, [r7, #0]
  409854:	68fa      	ldr	r2, [r7, #12]
  409856:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  409858:	68fb      	ldr	r3, [r7, #12]
  40985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40985c:	2b00      	cmp	r3, #0
  40985e:	d105      	bne.n	40986c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  409860:	68f8      	ldr	r0, [r7, #12]
  409862:	4b0a      	ldr	r3, [pc, #40]	; (40988c <prvAllocateTCBAndStack+0x68>)
  409864:	4798      	blx	r3
			pxNewTCB = NULL;
  409866:	2300      	movs	r3, #0
  409868:	60fb      	str	r3, [r7, #12]
  40986a:	e008      	b.n	40987e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40986c:	68fb      	ldr	r3, [r7, #12]
  40986e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  409870:	88fb      	ldrh	r3, [r7, #6]
  409872:	009b      	lsls	r3, r3, #2
  409874:	4610      	mov	r0, r2
  409876:	21a5      	movs	r1, #165	; 0xa5
  409878:	461a      	mov	r2, r3
  40987a:	4b05      	ldr	r3, [pc, #20]	; (409890 <prvAllocateTCBAndStack+0x6c>)
  40987c:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40987e:	68fb      	ldr	r3, [r7, #12]
}
  409880:	4618      	mov	r0, r3
  409882:	3710      	adds	r7, #16
  409884:	46bd      	mov	sp, r7
  409886:	bd80      	pop	{r7, pc}
  409888:	00408281 	.word	0x00408281
  40988c:	00408389 	.word	0x00408389
  409890:	0040c82d 	.word	0x0040c82d

00409894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  409894:	b580      	push	{r7, lr}
  409896:	b082      	sub	sp, #8
  409898:	af00      	add	r7, sp, #0
  40989a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40989c:	687b      	ldr	r3, [r7, #4]
  40989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098a0:	4618      	mov	r0, r3
  4098a2:	4b04      	ldr	r3, [pc, #16]	; (4098b4 <prvDeleteTCB+0x20>)
  4098a4:	4798      	blx	r3
		vPortFree( pxTCB );
  4098a6:	6878      	ldr	r0, [r7, #4]
  4098a8:	4b02      	ldr	r3, [pc, #8]	; (4098b4 <prvDeleteTCB+0x20>)
  4098aa:	4798      	blx	r3
	}
  4098ac:	3708      	adds	r7, #8
  4098ae:	46bd      	mov	sp, r7
  4098b0:	bd80      	pop	{r7, pc}
  4098b2:	bf00      	nop
  4098b4:	00408389 	.word	0x00408389

004098b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  4098b8:	b480      	push	{r7}
  4098ba:	b083      	sub	sp, #12
  4098bc:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  4098be:	4b05      	ldr	r3, [pc, #20]	; (4098d4 <xTaskGetCurrentTaskHandle+0x1c>)
  4098c0:	681b      	ldr	r3, [r3, #0]
  4098c2:	607b      	str	r3, [r7, #4]

		return xReturn;
  4098c4:	687b      	ldr	r3, [r7, #4]
	}
  4098c6:	4618      	mov	r0, r3
  4098c8:	370c      	adds	r7, #12
  4098ca:	46bd      	mov	sp, r7
  4098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098d0:	4770      	bx	lr
  4098d2:	bf00      	nop
  4098d4:	2000868c 	.word	0x2000868c

004098d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  4098d8:	b480      	push	{r7}
  4098da:	b083      	sub	sp, #12
  4098dc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  4098de:	4b0b      	ldr	r3, [pc, #44]	; (40990c <xTaskGetSchedulerState+0x34>)
  4098e0:	681b      	ldr	r3, [r3, #0]
  4098e2:	2b00      	cmp	r3, #0
  4098e4:	d102      	bne.n	4098ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  4098e6:	2300      	movs	r3, #0
  4098e8:	607b      	str	r3, [r7, #4]
  4098ea:	e008      	b.n	4098fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4098ec:	4b08      	ldr	r3, [pc, #32]	; (409910 <xTaskGetSchedulerState+0x38>)
  4098ee:	681b      	ldr	r3, [r3, #0]
  4098f0:	2b00      	cmp	r3, #0
  4098f2:	d102      	bne.n	4098fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  4098f4:	2301      	movs	r3, #1
  4098f6:	607b      	str	r3, [r7, #4]
  4098f8:	e001      	b.n	4098fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4098fa:	2302      	movs	r3, #2
  4098fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  4098fe:	687b      	ldr	r3, [r7, #4]
	}
  409900:	4618      	mov	r0, r3
  409902:	370c      	adds	r7, #12
  409904:	46bd      	mov	sp, r7
  409906:	f85d 7b04 	ldr.w	r7, [sp], #4
  40990a:	4770      	bx	lr
  40990c:	2000883c 	.word	0x2000883c
  409910:	20008840 	.word	0x20008840

00409914 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  409914:	b580      	push	{r7, lr}
  409916:	b084      	sub	sp, #16
  409918:	af00      	add	r7, sp, #0
  40991a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40991c:	687b      	ldr	r3, [r7, #4]
  40991e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  409920:	687b      	ldr	r3, [r7, #4]
  409922:	2b00      	cmp	r3, #0
  409924:	d041      	beq.n	4099aa <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  409926:	68fb      	ldr	r3, [r7, #12]
  409928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40992a:	4b21      	ldr	r3, [pc, #132]	; (4099b0 <vTaskPriorityInherit+0x9c>)
  40992c:	681b      	ldr	r3, [r3, #0]
  40992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409930:	429a      	cmp	r2, r3
  409932:	d23a      	bcs.n	4099aa <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  409934:	4b1e      	ldr	r3, [pc, #120]	; (4099b0 <vTaskPriorityInherit+0x9c>)
  409936:	681b      	ldr	r3, [r3, #0]
  409938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40993a:	f1c3 020f 	rsb	r2, r3, #15
  40993e:	68fb      	ldr	r3, [r7, #12]
  409940:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  409942:	68fb      	ldr	r3, [r7, #12]
  409944:	6959      	ldr	r1, [r3, #20]
  409946:	68fb      	ldr	r3, [r7, #12]
  409948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40994a:	4613      	mov	r3, r2
  40994c:	009b      	lsls	r3, r3, #2
  40994e:	4413      	add	r3, r2
  409950:	009b      	lsls	r3, r3, #2
  409952:	4a18      	ldr	r2, [pc, #96]	; (4099b4 <vTaskPriorityInherit+0xa0>)
  409954:	4413      	add	r3, r2
  409956:	4299      	cmp	r1, r3
  409958:	d122      	bne.n	4099a0 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40995a:	68fb      	ldr	r3, [r7, #12]
  40995c:	3304      	adds	r3, #4
  40995e:	4618      	mov	r0, r3
  409960:	4b15      	ldr	r3, [pc, #84]	; (4099b8 <vTaskPriorityInherit+0xa4>)
  409962:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  409964:	4b12      	ldr	r3, [pc, #72]	; (4099b0 <vTaskPriorityInherit+0x9c>)
  409966:	681b      	ldr	r3, [r3, #0]
  409968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40996a:	68fb      	ldr	r3, [r7, #12]
  40996c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  40996e:	68fb      	ldr	r3, [r7, #12]
  409970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409972:	4b12      	ldr	r3, [pc, #72]	; (4099bc <vTaskPriorityInherit+0xa8>)
  409974:	681b      	ldr	r3, [r3, #0]
  409976:	429a      	cmp	r2, r3
  409978:	d903      	bls.n	409982 <vTaskPriorityInherit+0x6e>
  40997a:	68fb      	ldr	r3, [r7, #12]
  40997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40997e:	4b0f      	ldr	r3, [pc, #60]	; (4099bc <vTaskPriorityInherit+0xa8>)
  409980:	601a      	str	r2, [r3, #0]
  409982:	68fb      	ldr	r3, [r7, #12]
  409984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409986:	4613      	mov	r3, r2
  409988:	009b      	lsls	r3, r3, #2
  40998a:	4413      	add	r3, r2
  40998c:	009b      	lsls	r3, r3, #2
  40998e:	4a09      	ldr	r2, [pc, #36]	; (4099b4 <vTaskPriorityInherit+0xa0>)
  409990:	441a      	add	r2, r3
  409992:	68fb      	ldr	r3, [r7, #12]
  409994:	3304      	adds	r3, #4
  409996:	4610      	mov	r0, r2
  409998:	4619      	mov	r1, r3
  40999a:	4b09      	ldr	r3, [pc, #36]	; (4099c0 <vTaskPriorityInherit+0xac>)
  40999c:	4798      	blx	r3
  40999e:	e004      	b.n	4099aa <vTaskPriorityInherit+0x96>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4099a0:	4b03      	ldr	r3, [pc, #12]	; (4099b0 <vTaskPriorityInherit+0x9c>)
  4099a2:	681b      	ldr	r3, [r3, #0]
  4099a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4099a6:	68fb      	ldr	r3, [r7, #12]
  4099a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  4099aa:	3710      	adds	r7, #16
  4099ac:	46bd      	mov	sp, r7
  4099ae:	bd80      	pop	{r7, pc}
  4099b0:	2000868c 	.word	0x2000868c
  4099b4:	20008690 	.word	0x20008690
  4099b8:	00407fb1 	.word	0x00407fb1
  4099bc:	20008838 	.word	0x20008838
  4099c0:	00407ef1 	.word	0x00407ef1

004099c4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4099c4:	b580      	push	{r7, lr}
  4099c6:	b084      	sub	sp, #16
  4099c8:	af00      	add	r7, sp, #0
  4099ca:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4099cc:	687b      	ldr	r3, [r7, #4]
  4099ce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  4099d0:	687b      	ldr	r3, [r7, #4]
  4099d2:	2b00      	cmp	r3, #0
  4099d4:	d02c      	beq.n	409a30 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4099d6:	68fb      	ldr	r3, [r7, #12]
  4099d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4099da:	68fb      	ldr	r3, [r7, #12]
  4099dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4099de:	429a      	cmp	r2, r3
  4099e0:	d026      	beq.n	409a30 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4099e2:	68fb      	ldr	r3, [r7, #12]
  4099e4:	3304      	adds	r3, #4
  4099e6:	4618      	mov	r0, r3
  4099e8:	4b13      	ldr	r3, [pc, #76]	; (409a38 <vTaskPriorityDisinherit+0x74>)
  4099ea:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4099ec:	68fb      	ldr	r3, [r7, #12]
  4099ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4099f0:	68fb      	ldr	r3, [r7, #12]
  4099f2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4099f4:	68fb      	ldr	r3, [r7, #12]
  4099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4099f8:	f1c3 020f 	rsb	r2, r3, #15
  4099fc:	68fb      	ldr	r3, [r7, #12]
  4099fe:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  409a00:	68fb      	ldr	r3, [r7, #12]
  409a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409a04:	4b0d      	ldr	r3, [pc, #52]	; (409a3c <vTaskPriorityDisinherit+0x78>)
  409a06:	681b      	ldr	r3, [r3, #0]
  409a08:	429a      	cmp	r2, r3
  409a0a:	d903      	bls.n	409a14 <vTaskPriorityDisinherit+0x50>
  409a0c:	68fb      	ldr	r3, [r7, #12]
  409a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409a10:	4b0a      	ldr	r3, [pc, #40]	; (409a3c <vTaskPriorityDisinherit+0x78>)
  409a12:	601a      	str	r2, [r3, #0]
  409a14:	68fb      	ldr	r3, [r7, #12]
  409a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409a18:	4613      	mov	r3, r2
  409a1a:	009b      	lsls	r3, r3, #2
  409a1c:	4413      	add	r3, r2
  409a1e:	009b      	lsls	r3, r3, #2
  409a20:	4a07      	ldr	r2, [pc, #28]	; (409a40 <vTaskPriorityDisinherit+0x7c>)
  409a22:	441a      	add	r2, r3
  409a24:	68fb      	ldr	r3, [r7, #12]
  409a26:	3304      	adds	r3, #4
  409a28:	4610      	mov	r0, r2
  409a2a:	4619      	mov	r1, r3
  409a2c:	4b05      	ldr	r3, [pc, #20]	; (409a44 <vTaskPriorityDisinherit+0x80>)
  409a2e:	4798      	blx	r3
			}
		}
	}
  409a30:	3710      	adds	r7, #16
  409a32:	46bd      	mov	sp, r7
  409a34:	bd80      	pop	{r7, pc}
  409a36:	bf00      	nop
  409a38:	00407fb1 	.word	0x00407fb1
  409a3c:	20008838 	.word	0x20008838
  409a40:	20008690 	.word	0x20008690
  409a44:	00407ef1 	.word	0x00407ef1

00409a48 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  409a48:	b590      	push	{r4, r7, lr}
  409a4a:	b087      	sub	sp, #28
  409a4c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  409a4e:	2300      	movs	r3, #0
  409a50:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  409a52:	4b11      	ldr	r3, [pc, #68]	; (409a98 <xTimerCreateTimerTask+0x50>)
  409a54:	4798      	blx	r3

	if( xTimerQueue != NULL )
  409a56:	4b11      	ldr	r3, [pc, #68]	; (409a9c <xTimerCreateTimerTask+0x54>)
  409a58:	681b      	ldr	r3, [r3, #0]
  409a5a:	2b00      	cmp	r3, #0
  409a5c:	d00f      	beq.n	409a7e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  409a5e:	230e      	movs	r3, #14
  409a60:	9300      	str	r3, [sp, #0]
  409a62:	2300      	movs	r3, #0
  409a64:	9301      	str	r3, [sp, #4]
  409a66:	2300      	movs	r3, #0
  409a68:	9302      	str	r3, [sp, #8]
  409a6a:	2300      	movs	r3, #0
  409a6c:	9303      	str	r3, [sp, #12]
  409a6e:	480c      	ldr	r0, [pc, #48]	; (409aa0 <xTimerCreateTimerTask+0x58>)
  409a70:	490c      	ldr	r1, [pc, #48]	; (409aa4 <xTimerCreateTimerTask+0x5c>)
  409a72:	f240 228a 	movw	r2, #650	; 0x28a
  409a76:	2300      	movs	r3, #0
  409a78:	4c0b      	ldr	r4, [pc, #44]	; (409aa8 <xTimerCreateTimerTask+0x60>)
  409a7a:	47a0      	blx	r4
  409a7c:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  409a7e:	687b      	ldr	r3, [r7, #4]
  409a80:	2b00      	cmp	r3, #0
  409a82:	d103      	bne.n	409a8c <xTimerCreateTimerTask+0x44>
  409a84:	4b09      	ldr	r3, [pc, #36]	; (409aac <xTimerCreateTimerTask+0x64>)
  409a86:	4798      	blx	r3
  409a88:	bf00      	nop
  409a8a:	e7fd      	b.n	409a88 <xTimerCreateTimerTask+0x40>
	return xReturn;
  409a8c:	687b      	ldr	r3, [r7, #4]
}
  409a8e:	4618      	mov	r0, r3
  409a90:	370c      	adds	r7, #12
  409a92:	46bd      	mov	sp, r7
  409a94:	bd90      	pop	{r4, r7, pc}
  409a96:	bf00      	nop
  409a98:	00409ff5 	.word	0x00409ff5
  409a9c:	20008884 	.word	0x20008884
  409aa0:	00409c49 	.word	0x00409c49
  409aa4:	00415dd4 	.word	0x00415dd4
  409aa8:	00408d45 	.word	0x00408d45
  409aac:	004081cd 	.word	0x004081cd

00409ab0 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  409ab0:	b580      	push	{r7, lr}
  409ab2:	b086      	sub	sp, #24
  409ab4:	af00      	add	r7, sp, #0
  409ab6:	60f8      	str	r0, [r7, #12]
  409ab8:	60b9      	str	r1, [r7, #8]
  409aba:	607a      	str	r2, [r7, #4]
  409abc:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  409abe:	68bb      	ldr	r3, [r7, #8]
  409ac0:	2b00      	cmp	r3, #0
  409ac2:	d108      	bne.n	409ad6 <xTimerCreate+0x26>
	{
		pxNewTimer = NULL;
  409ac4:	2300      	movs	r3, #0
  409ac6:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  409ac8:	68bb      	ldr	r3, [r7, #8]
  409aca:	2b00      	cmp	r3, #0
  409acc:	d120      	bne.n	409b10 <xTimerCreate+0x60>
  409ace:	4b13      	ldr	r3, [pc, #76]	; (409b1c <xTimerCreate+0x6c>)
  409ad0:	4798      	blx	r3
  409ad2:	bf00      	nop
  409ad4:	e7fd      	b.n	409ad2 <xTimerCreate+0x22>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  409ad6:	2028      	movs	r0, #40	; 0x28
  409ad8:	4b11      	ldr	r3, [pc, #68]	; (409b20 <xTimerCreate+0x70>)
  409ada:	4798      	blx	r3
  409adc:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  409ade:	697b      	ldr	r3, [r7, #20]
  409ae0:	2b00      	cmp	r3, #0
  409ae2:	d015      	beq.n	409b10 <xTimerCreate+0x60>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  409ae4:	4b0f      	ldr	r3, [pc, #60]	; (409b24 <xTimerCreate+0x74>)
  409ae6:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  409ae8:	697b      	ldr	r3, [r7, #20]
  409aea:	68fa      	ldr	r2, [r7, #12]
  409aec:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  409aee:	697b      	ldr	r3, [r7, #20]
  409af0:	68ba      	ldr	r2, [r7, #8]
  409af2:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  409af4:	697b      	ldr	r3, [r7, #20]
  409af6:	687a      	ldr	r2, [r7, #4]
  409af8:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  409afa:	697b      	ldr	r3, [r7, #20]
  409afc:	683a      	ldr	r2, [r7, #0]
  409afe:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  409b00:	697b      	ldr	r3, [r7, #20]
  409b02:	6a3a      	ldr	r2, [r7, #32]
  409b04:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  409b06:	697b      	ldr	r3, [r7, #20]
  409b08:	3304      	adds	r3, #4
  409b0a:	4618      	mov	r0, r3
  409b0c:	4b06      	ldr	r3, [pc, #24]	; (409b28 <xTimerCreate+0x78>)
  409b0e:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  409b10:	697b      	ldr	r3, [r7, #20]
}
  409b12:	4618      	mov	r0, r3
  409b14:	3718      	adds	r7, #24
  409b16:	46bd      	mov	sp, r7
  409b18:	bd80      	pop	{r7, pc}
  409b1a:	bf00      	nop
  409b1c:	004081cd 	.word	0x004081cd
  409b20:	00408281 	.word	0x00408281
  409b24:	00409ff5 	.word	0x00409ff5
  409b28:	00407ed9 	.word	0x00407ed9

00409b2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  409b2c:	b590      	push	{r4, r7, lr}
  409b2e:	b089      	sub	sp, #36	; 0x24
  409b30:	af00      	add	r7, sp, #0
  409b32:	60f8      	str	r0, [r7, #12]
  409b34:	60b9      	str	r1, [r7, #8]
  409b36:	607a      	str	r2, [r7, #4]
  409b38:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  409b3a:	2300      	movs	r3, #0
  409b3c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  409b3e:	4b1d      	ldr	r3, [pc, #116]	; (409bb4 <xTimerGenericCommand+0x88>)
  409b40:	681b      	ldr	r3, [r3, #0]
  409b42:	2b00      	cmp	r3, #0
  409b44:	d030      	beq.n	409ba8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  409b46:	68bb      	ldr	r3, [r7, #8]
  409b48:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  409b4a:	687b      	ldr	r3, [r7, #4]
  409b4c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  409b4e:	68fb      	ldr	r3, [r7, #12]
  409b50:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  409b52:	683b      	ldr	r3, [r7, #0]
  409b54:	2b00      	cmp	r3, #0
  409b56:	d11c      	bne.n	409b92 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  409b58:	4b17      	ldr	r3, [pc, #92]	; (409bb8 <xTimerGenericCommand+0x8c>)
  409b5a:	4798      	blx	r3
  409b5c:	4603      	mov	r3, r0
  409b5e:	2b01      	cmp	r3, #1
  409b60:	d10b      	bne.n	409b7a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  409b62:	4b14      	ldr	r3, [pc, #80]	; (409bb4 <xTimerGenericCommand+0x88>)
  409b64:	681a      	ldr	r2, [r3, #0]
  409b66:	f107 0310 	add.w	r3, r7, #16
  409b6a:	4610      	mov	r0, r2
  409b6c:	4619      	mov	r1, r3
  409b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  409b70:	2300      	movs	r3, #0
  409b72:	4c12      	ldr	r4, [pc, #72]	; (409bbc <xTimerGenericCommand+0x90>)
  409b74:	47a0      	blx	r4
  409b76:	61f8      	str	r0, [r7, #28]
  409b78:	e016      	b.n	409ba8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  409b7a:	4b0e      	ldr	r3, [pc, #56]	; (409bb4 <xTimerGenericCommand+0x88>)
  409b7c:	681a      	ldr	r2, [r3, #0]
  409b7e:	f107 0310 	add.w	r3, r7, #16
  409b82:	4610      	mov	r0, r2
  409b84:	4619      	mov	r1, r3
  409b86:	2200      	movs	r2, #0
  409b88:	2300      	movs	r3, #0
  409b8a:	4c0c      	ldr	r4, [pc, #48]	; (409bbc <xTimerGenericCommand+0x90>)
  409b8c:	47a0      	blx	r4
  409b8e:	61f8      	str	r0, [r7, #28]
  409b90:	e00a      	b.n	409ba8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  409b92:	4b08      	ldr	r3, [pc, #32]	; (409bb4 <xTimerGenericCommand+0x88>)
  409b94:	681a      	ldr	r2, [r3, #0]
  409b96:	f107 0310 	add.w	r3, r7, #16
  409b9a:	4610      	mov	r0, r2
  409b9c:	4619      	mov	r1, r3
  409b9e:	683a      	ldr	r2, [r7, #0]
  409ba0:	2300      	movs	r3, #0
  409ba2:	4c07      	ldr	r4, [pc, #28]	; (409bc0 <xTimerGenericCommand+0x94>)
  409ba4:	47a0      	blx	r4
  409ba6:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  409ba8:	69fb      	ldr	r3, [r7, #28]
}
  409baa:	4618      	mov	r0, r3
  409bac:	3724      	adds	r7, #36	; 0x24
  409bae:	46bd      	mov	sp, r7
  409bb0:	bd90      	pop	{r4, r7, pc}
  409bb2:	bf00      	nop
  409bb4:	20008884 	.word	0x20008884
  409bb8:	004098d9 	.word	0x004098d9
  409bbc:	0040867d 	.word	0x0040867d
  409bc0:	004087ed 	.word	0x004087ed

00409bc4 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  409bc4:	b590      	push	{r4, r7, lr}
  409bc6:	b087      	sub	sp, #28
  409bc8:	af02      	add	r7, sp, #8
  409bca:	6078      	str	r0, [r7, #4]
  409bcc:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  409bce:	4b19      	ldr	r3, [pc, #100]	; (409c34 <prvProcessExpiredTimer+0x70>)
  409bd0:	681b      	ldr	r3, [r3, #0]
  409bd2:	68db      	ldr	r3, [r3, #12]
  409bd4:	68db      	ldr	r3, [r3, #12]
  409bd6:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  409bd8:	68fb      	ldr	r3, [r7, #12]
  409bda:	3304      	adds	r3, #4
  409bdc:	4618      	mov	r0, r3
  409bde:	4b16      	ldr	r3, [pc, #88]	; (409c38 <prvProcessExpiredTimer+0x74>)
  409be0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  409be2:	68fb      	ldr	r3, [r7, #12]
  409be4:	69db      	ldr	r3, [r3, #28]
  409be6:	2b01      	cmp	r3, #1
  409be8:	d11c      	bne.n	409c24 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  409bea:	68fb      	ldr	r3, [r7, #12]
  409bec:	699a      	ldr	r2, [r3, #24]
  409bee:	687b      	ldr	r3, [r7, #4]
  409bf0:	4413      	add	r3, r2
  409bf2:	68f8      	ldr	r0, [r7, #12]
  409bf4:	4619      	mov	r1, r3
  409bf6:	683a      	ldr	r2, [r7, #0]
  409bf8:	687b      	ldr	r3, [r7, #4]
  409bfa:	4c10      	ldr	r4, [pc, #64]	; (409c3c <prvProcessExpiredTimer+0x78>)
  409bfc:	47a0      	blx	r4
  409bfe:	4603      	mov	r3, r0
  409c00:	2b01      	cmp	r3, #1
  409c02:	d10f      	bne.n	409c24 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  409c04:	2300      	movs	r3, #0
  409c06:	9300      	str	r3, [sp, #0]
  409c08:	68f8      	ldr	r0, [r7, #12]
  409c0a:	2100      	movs	r1, #0
  409c0c:	687a      	ldr	r2, [r7, #4]
  409c0e:	2300      	movs	r3, #0
  409c10:	4c0b      	ldr	r4, [pc, #44]	; (409c40 <prvProcessExpiredTimer+0x7c>)
  409c12:	47a0      	blx	r4
  409c14:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  409c16:	68bb      	ldr	r3, [r7, #8]
  409c18:	2b00      	cmp	r3, #0
  409c1a:	d103      	bne.n	409c24 <prvProcessExpiredTimer+0x60>
  409c1c:	4b09      	ldr	r3, [pc, #36]	; (409c44 <prvProcessExpiredTimer+0x80>)
  409c1e:	4798      	blx	r3
  409c20:	bf00      	nop
  409c22:	e7fd      	b.n	409c20 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  409c24:	68fb      	ldr	r3, [r7, #12]
  409c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409c28:	68f8      	ldr	r0, [r7, #12]
  409c2a:	4798      	blx	r3
}
  409c2c:	3714      	adds	r7, #20
  409c2e:	46bd      	mov	sp, r7
  409c30:	bd90      	pop	{r4, r7, pc}
  409c32:	bf00      	nop
  409c34:	2000887c 	.word	0x2000887c
  409c38:	00407fb1 	.word	0x00407fb1
  409c3c:	00409d91 	.word	0x00409d91
  409c40:	00409b2d 	.word	0x00409b2d
  409c44:	004081cd 	.word	0x004081cd

00409c48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  409c48:	b580      	push	{r7, lr}
  409c4a:	b084      	sub	sp, #16
  409c4c:	af00      	add	r7, sp, #0
  409c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  409c50:	f107 0308 	add.w	r3, r7, #8
  409c54:	4618      	mov	r0, r3
  409c56:	4b05      	ldr	r3, [pc, #20]	; (409c6c <prvTimerTask+0x24>)
  409c58:	4798      	blx	r3
  409c5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  409c5c:	68bb      	ldr	r3, [r7, #8]
  409c5e:	68f8      	ldr	r0, [r7, #12]
  409c60:	4619      	mov	r1, r3
  409c62:	4b03      	ldr	r3, [pc, #12]	; (409c70 <prvTimerTask+0x28>)
  409c64:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  409c66:	4b03      	ldr	r3, [pc, #12]	; (409c74 <prvTimerTask+0x2c>)
  409c68:	4798      	blx	r3
	}
  409c6a:	e7f1      	b.n	409c50 <prvTimerTask+0x8>
  409c6c:	00409cfd 	.word	0x00409cfd
  409c70:	00409c79 	.word	0x00409c79
  409c74:	00409e19 	.word	0x00409e19

00409c78 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  409c78:	b580      	push	{r7, lr}
  409c7a:	b084      	sub	sp, #16
  409c7c:	af00      	add	r7, sp, #0
  409c7e:	6078      	str	r0, [r7, #4]
  409c80:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  409c82:	4b17      	ldr	r3, [pc, #92]	; (409ce0 <prvProcessTimerOrBlockTask+0x68>)
  409c84:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  409c86:	f107 0308 	add.w	r3, r7, #8
  409c8a:	4618      	mov	r0, r3
  409c8c:	4b15      	ldr	r3, [pc, #84]	; (409ce4 <prvProcessTimerOrBlockTask+0x6c>)
  409c8e:	4798      	blx	r3
  409c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  409c92:	68bb      	ldr	r3, [r7, #8]
  409c94:	2b00      	cmp	r3, #0
  409c96:	d11e      	bne.n	409cd6 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  409c98:	683b      	ldr	r3, [r7, #0]
  409c9a:	2b00      	cmp	r3, #0
  409c9c:	d10a      	bne.n	409cb4 <prvProcessTimerOrBlockTask+0x3c>
  409c9e:	687a      	ldr	r2, [r7, #4]
  409ca0:	68fb      	ldr	r3, [r7, #12]
  409ca2:	429a      	cmp	r2, r3
  409ca4:	d806      	bhi.n	409cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  409ca6:	4b10      	ldr	r3, [pc, #64]	; (409ce8 <prvProcessTimerOrBlockTask+0x70>)
  409ca8:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  409caa:	6878      	ldr	r0, [r7, #4]
  409cac:	68f9      	ldr	r1, [r7, #12]
  409cae:	4b0f      	ldr	r3, [pc, #60]	; (409cec <prvProcessTimerOrBlockTask+0x74>)
  409cb0:	4798      	blx	r3
  409cb2:	e012      	b.n	409cda <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  409cb4:	4b0e      	ldr	r3, [pc, #56]	; (409cf0 <prvProcessTimerOrBlockTask+0x78>)
  409cb6:	681a      	ldr	r2, [r3, #0]
  409cb8:	6879      	ldr	r1, [r7, #4]
  409cba:	68fb      	ldr	r3, [r7, #12]
  409cbc:	1acb      	subs	r3, r1, r3
  409cbe:	4610      	mov	r0, r2
  409cc0:	4619      	mov	r1, r3
  409cc2:	4b0c      	ldr	r3, [pc, #48]	; (409cf4 <prvProcessTimerOrBlockTask+0x7c>)
  409cc4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  409cc6:	4b08      	ldr	r3, [pc, #32]	; (409ce8 <prvProcessTimerOrBlockTask+0x70>)
  409cc8:	4798      	blx	r3
  409cca:	4603      	mov	r3, r0
  409ccc:	2b00      	cmp	r3, #0
  409cce:	d104      	bne.n	409cda <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  409cd0:	4b09      	ldr	r3, [pc, #36]	; (409cf8 <prvProcessTimerOrBlockTask+0x80>)
  409cd2:	4798      	blx	r3
  409cd4:	e001      	b.n	409cda <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  409cd6:	4b04      	ldr	r3, [pc, #16]	; (409ce8 <prvProcessTimerOrBlockTask+0x70>)
  409cd8:	4798      	blx	r3
		}
	}
}
  409cda:	3710      	adds	r7, #16
  409cdc:	46bd      	mov	sp, r7
  409cde:	bd80      	pop	{r7, pc}
  409ce0:	00408fe9 	.word	0x00408fe9
  409ce4:	00409d45 	.word	0x00409d45
  409ce8:	00409005 	.word	0x00409005
  409cec:	00409bc5 	.word	0x00409bc5
  409cf0:	20008884 	.word	0x20008884
  409cf4:	00408ce1 	.word	0x00408ce1
  409cf8:	00408171 	.word	0x00408171

00409cfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  409cfc:	b480      	push	{r7}
  409cfe:	b085      	sub	sp, #20
  409d00:	af00      	add	r7, sp, #0
  409d02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  409d04:	4b0e      	ldr	r3, [pc, #56]	; (409d40 <prvGetNextExpireTime+0x44>)
  409d06:	681b      	ldr	r3, [r3, #0]
  409d08:	681b      	ldr	r3, [r3, #0]
  409d0a:	2b00      	cmp	r3, #0
  409d0c:	bf14      	ite	ne
  409d0e:	2300      	movne	r3, #0
  409d10:	2301      	moveq	r3, #1
  409d12:	b2db      	uxtb	r3, r3
  409d14:	461a      	mov	r2, r3
  409d16:	687b      	ldr	r3, [r7, #4]
  409d18:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  409d1a:	687b      	ldr	r3, [r7, #4]
  409d1c:	681b      	ldr	r3, [r3, #0]
  409d1e:	2b00      	cmp	r3, #0
  409d20:	d105      	bne.n	409d2e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  409d22:	4b07      	ldr	r3, [pc, #28]	; (409d40 <prvGetNextExpireTime+0x44>)
  409d24:	681b      	ldr	r3, [r3, #0]
  409d26:	68db      	ldr	r3, [r3, #12]
  409d28:	681b      	ldr	r3, [r3, #0]
  409d2a:	60fb      	str	r3, [r7, #12]
  409d2c:	e001      	b.n	409d32 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  409d2e:	2300      	movs	r3, #0
  409d30:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  409d32:	68fb      	ldr	r3, [r7, #12]
}
  409d34:	4618      	mov	r0, r3
  409d36:	3714      	adds	r7, #20
  409d38:	46bd      	mov	sp, r7
  409d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d3e:	4770      	bx	lr
  409d40:	2000887c 	.word	0x2000887c

00409d44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  409d44:	b580      	push	{r7, lr}
  409d46:	b084      	sub	sp, #16
  409d48:	af00      	add	r7, sp, #0
  409d4a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  409d4c:	4b0d      	ldr	r3, [pc, #52]	; (409d84 <prvSampleTimeNow+0x40>)
  409d4e:	4798      	blx	r3
  409d50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  409d52:	4b0d      	ldr	r3, [pc, #52]	; (409d88 <prvSampleTimeNow+0x44>)
  409d54:	681b      	ldr	r3, [r3, #0]
  409d56:	68fa      	ldr	r2, [r7, #12]
  409d58:	429a      	cmp	r2, r3
  409d5a:	d208      	bcs.n	409d6e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  409d5c:	4b0a      	ldr	r3, [pc, #40]	; (409d88 <prvSampleTimeNow+0x44>)
  409d5e:	681b      	ldr	r3, [r3, #0]
  409d60:	4618      	mov	r0, r3
  409d62:	4b0a      	ldr	r3, [pc, #40]	; (409d8c <prvSampleTimeNow+0x48>)
  409d64:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  409d66:	687b      	ldr	r3, [r7, #4]
  409d68:	2201      	movs	r2, #1
  409d6a:	601a      	str	r2, [r3, #0]
  409d6c:	e002      	b.n	409d74 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  409d6e:	687b      	ldr	r3, [r7, #4]
  409d70:	2200      	movs	r2, #0
  409d72:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  409d74:	4b04      	ldr	r3, [pc, #16]	; (409d88 <prvSampleTimeNow+0x44>)
  409d76:	68fa      	ldr	r2, [r7, #12]
  409d78:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  409d7a:	68fb      	ldr	r3, [r7, #12]
}
  409d7c:	4618      	mov	r0, r3
  409d7e:	3710      	adds	r7, #16
  409d80:	46bd      	mov	sp, r7
  409d82:	bd80      	pop	{r7, pc}
  409d84:	00409125 	.word	0x00409125
  409d88:	20008888 	.word	0x20008888
  409d8c:	00409f31 	.word	0x00409f31

00409d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  409d90:	b580      	push	{r7, lr}
  409d92:	b086      	sub	sp, #24
  409d94:	af00      	add	r7, sp, #0
  409d96:	60f8      	str	r0, [r7, #12]
  409d98:	60b9      	str	r1, [r7, #8]
  409d9a:	607a      	str	r2, [r7, #4]
  409d9c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  409d9e:	2300      	movs	r3, #0
  409da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  409da2:	68fb      	ldr	r3, [r7, #12]
  409da4:	68ba      	ldr	r2, [r7, #8]
  409da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  409da8:	68fb      	ldr	r3, [r7, #12]
  409daa:	68fa      	ldr	r2, [r7, #12]
  409dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  409dae:	68ba      	ldr	r2, [r7, #8]
  409db0:	687b      	ldr	r3, [r7, #4]
  409db2:	429a      	cmp	r2, r3
  409db4:	d812      	bhi.n	409ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  409db6:	687a      	ldr	r2, [r7, #4]
  409db8:	683b      	ldr	r3, [r7, #0]
  409dba:	1ad2      	subs	r2, r2, r3
  409dbc:	68fb      	ldr	r3, [r7, #12]
  409dbe:	699b      	ldr	r3, [r3, #24]
  409dc0:	429a      	cmp	r2, r3
  409dc2:	d302      	bcc.n	409dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  409dc4:	2301      	movs	r3, #1
  409dc6:	617b      	str	r3, [r7, #20]
  409dc8:	e01b      	b.n	409e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  409dca:	4b10      	ldr	r3, [pc, #64]	; (409e0c <prvInsertTimerInActiveList+0x7c>)
  409dcc:	681a      	ldr	r2, [r3, #0]
  409dce:	68fb      	ldr	r3, [r7, #12]
  409dd0:	3304      	adds	r3, #4
  409dd2:	4610      	mov	r0, r2
  409dd4:	4619      	mov	r1, r3
  409dd6:	4b0e      	ldr	r3, [pc, #56]	; (409e10 <prvInsertTimerInActiveList+0x80>)
  409dd8:	4798      	blx	r3
  409dda:	e012      	b.n	409e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  409ddc:	687a      	ldr	r2, [r7, #4]
  409dde:	683b      	ldr	r3, [r7, #0]
  409de0:	429a      	cmp	r2, r3
  409de2:	d206      	bcs.n	409df2 <prvInsertTimerInActiveList+0x62>
  409de4:	68ba      	ldr	r2, [r7, #8]
  409de6:	683b      	ldr	r3, [r7, #0]
  409de8:	429a      	cmp	r2, r3
  409dea:	d302      	bcc.n	409df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  409dec:	2301      	movs	r3, #1
  409dee:	617b      	str	r3, [r7, #20]
  409df0:	e007      	b.n	409e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  409df2:	4b08      	ldr	r3, [pc, #32]	; (409e14 <prvInsertTimerInActiveList+0x84>)
  409df4:	681a      	ldr	r2, [r3, #0]
  409df6:	68fb      	ldr	r3, [r7, #12]
  409df8:	3304      	adds	r3, #4
  409dfa:	4610      	mov	r0, r2
  409dfc:	4619      	mov	r1, r3
  409dfe:	4b04      	ldr	r3, [pc, #16]	; (409e10 <prvInsertTimerInActiveList+0x80>)
  409e00:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  409e02:	697b      	ldr	r3, [r7, #20]
}
  409e04:	4618      	mov	r0, r3
  409e06:	3718      	adds	r7, #24
  409e08:	46bd      	mov	sp, r7
  409e0a:	bd80      	pop	{r7, pc}
  409e0c:	20008880 	.word	0x20008880
  409e10:	00407f41 	.word	0x00407f41
  409e14:	2000887c 	.word	0x2000887c

00409e18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  409e18:	b590      	push	{r4, r7, lr}
  409e1a:	b08b      	sub	sp, #44	; 0x2c
  409e1c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  409e1e:	1d3b      	adds	r3, r7, #4
  409e20:	4618      	mov	r0, r3
  409e22:	4b3b      	ldr	r3, [pc, #236]	; (409f10 <prvProcessReceivedCommands+0xf8>)
  409e24:	4798      	blx	r3
  409e26:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  409e28:	e061      	b.n	409eee <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
  409e2a:	693b      	ldr	r3, [r7, #16]
  409e2c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  409e2e:	69bb      	ldr	r3, [r7, #24]
  409e30:	2b00      	cmp	r3, #0
  409e32:	d008      	beq.n	409e46 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  409e34:	69bb      	ldr	r3, [r7, #24]
  409e36:	695b      	ldr	r3, [r3, #20]
  409e38:	2b00      	cmp	r3, #0
  409e3a:	d004      	beq.n	409e46 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  409e3c:	69bb      	ldr	r3, [r7, #24]
  409e3e:	3304      	adds	r3, #4
  409e40:	4618      	mov	r0, r3
  409e42:	4b34      	ldr	r3, [pc, #208]	; (409f14 <prvProcessReceivedCommands+0xfc>)
  409e44:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  409e46:	68bb      	ldr	r3, [r7, #8]
  409e48:	2b03      	cmp	r3, #3
  409e4a:	d84f      	bhi.n	409eec <prvProcessReceivedCommands+0xd4>
  409e4c:	a201      	add	r2, pc, #4	; (adr r2, 409e54 <prvProcessReceivedCommands+0x3c>)
  409e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  409e52:	bf00      	nop
  409e54:	00409e65 	.word	0x00409e65
  409e58:	00409eed 	.word	0x00409eed
  409e5c:	00409eb9 	.word	0x00409eb9
  409e60:	00409ee5 	.word	0x00409ee5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  409e64:	68fa      	ldr	r2, [r7, #12]
  409e66:	69bb      	ldr	r3, [r7, #24]
  409e68:	699b      	ldr	r3, [r3, #24]
  409e6a:	441a      	add	r2, r3
  409e6c:	68fb      	ldr	r3, [r7, #12]
  409e6e:	69b8      	ldr	r0, [r7, #24]
  409e70:	4611      	mov	r1, r2
  409e72:	69fa      	ldr	r2, [r7, #28]
  409e74:	4c28      	ldr	r4, [pc, #160]	; (409f18 <prvProcessReceivedCommands+0x100>)
  409e76:	47a0      	blx	r4
  409e78:	4603      	mov	r3, r0
  409e7a:	2b01      	cmp	r3, #1
  409e7c:	d11b      	bne.n	409eb6 <prvProcessReceivedCommands+0x9e>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  409e7e:	69bb      	ldr	r3, [r7, #24]
  409e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409e82:	69b8      	ldr	r0, [r7, #24]
  409e84:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  409e86:	69bb      	ldr	r3, [r7, #24]
  409e88:	69db      	ldr	r3, [r3, #28]
  409e8a:	2b01      	cmp	r3, #1
  409e8c:	d113      	bne.n	409eb6 <prvProcessReceivedCommands+0x9e>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  409e8e:	68fa      	ldr	r2, [r7, #12]
  409e90:	69bb      	ldr	r3, [r7, #24]
  409e92:	699b      	ldr	r3, [r3, #24]
  409e94:	4413      	add	r3, r2
  409e96:	2200      	movs	r2, #0
  409e98:	9200      	str	r2, [sp, #0]
  409e9a:	69b8      	ldr	r0, [r7, #24]
  409e9c:	2100      	movs	r1, #0
  409e9e:	461a      	mov	r2, r3
  409ea0:	2300      	movs	r3, #0
  409ea2:	4c1e      	ldr	r4, [pc, #120]	; (409f1c <prvProcessReceivedCommands+0x104>)
  409ea4:	47a0      	blx	r4
  409ea6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  409ea8:	697b      	ldr	r3, [r7, #20]
  409eaa:	2b00      	cmp	r3, #0
  409eac:	d103      	bne.n	409eb6 <prvProcessReceivedCommands+0x9e>
  409eae:	4b1c      	ldr	r3, [pc, #112]	; (409f20 <prvProcessReceivedCommands+0x108>)
  409eb0:	4798      	blx	r3
  409eb2:	bf00      	nop
  409eb4:	e7fd      	b.n	409eb2 <prvProcessReceivedCommands+0x9a>
						( void ) xResult;
					}
				}
				break;
  409eb6:	e01a      	b.n	409eee <prvProcessReceivedCommands+0xd6>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  409eb8:	68fa      	ldr	r2, [r7, #12]
  409eba:	69bb      	ldr	r3, [r7, #24]
  409ebc:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  409ebe:	69bb      	ldr	r3, [r7, #24]
  409ec0:	699b      	ldr	r3, [r3, #24]
  409ec2:	2b00      	cmp	r3, #0
  409ec4:	d103      	bne.n	409ece <prvProcessReceivedCommands+0xb6>
  409ec6:	4b16      	ldr	r3, [pc, #88]	; (409f20 <prvProcessReceivedCommands+0x108>)
  409ec8:	4798      	blx	r3
  409eca:	bf00      	nop
  409ecc:	e7fd      	b.n	409eca <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  409ece:	69bb      	ldr	r3, [r7, #24]
  409ed0:	699a      	ldr	r2, [r3, #24]
  409ed2:	69fb      	ldr	r3, [r7, #28]
  409ed4:	4413      	add	r3, r2
  409ed6:	69b8      	ldr	r0, [r7, #24]
  409ed8:	4619      	mov	r1, r3
  409eda:	69fa      	ldr	r2, [r7, #28]
  409edc:	69fb      	ldr	r3, [r7, #28]
  409ede:	4c0e      	ldr	r4, [pc, #56]	; (409f18 <prvProcessReceivedCommands+0x100>)
  409ee0:	47a0      	blx	r4
				break;
  409ee2:	e004      	b.n	409eee <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  409ee4:	69b8      	ldr	r0, [r7, #24]
  409ee6:	4b0f      	ldr	r3, [pc, #60]	; (409f24 <prvProcessReceivedCommands+0x10c>)
  409ee8:	4798      	blx	r3
				break;
  409eea:	e000      	b.n	409eee <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
  409eec:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  409eee:	4b0e      	ldr	r3, [pc, #56]	; (409f28 <prvProcessReceivedCommands+0x110>)
  409ef0:	681a      	ldr	r2, [r3, #0]
  409ef2:	f107 0308 	add.w	r3, r7, #8
  409ef6:	4610      	mov	r0, r2
  409ef8:	4619      	mov	r1, r3
  409efa:	2200      	movs	r2, #0
  409efc:	2300      	movs	r3, #0
  409efe:	4c0b      	ldr	r4, [pc, #44]	; (409f2c <prvProcessReceivedCommands+0x114>)
  409f00:	47a0      	blx	r4
  409f02:	4603      	mov	r3, r0
  409f04:	2b00      	cmp	r3, #0
  409f06:	d190      	bne.n	409e2a <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  409f08:	3724      	adds	r7, #36	; 0x24
  409f0a:	46bd      	mov	sp, r7
  409f0c:	bd90      	pop	{r4, r7, pc}
  409f0e:	bf00      	nop
  409f10:	00409d45 	.word	0x00409d45
  409f14:	00407fb1 	.word	0x00407fb1
  409f18:	00409d91 	.word	0x00409d91
  409f1c:	00409b2d 	.word	0x00409b2d
  409f20:	004081cd 	.word	0x004081cd
  409f24:	00408389 	.word	0x00408389
  409f28:	20008884 	.word	0x20008884
  409f2c:	004088a9 	.word	0x004088a9

00409f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  409f30:	b590      	push	{r4, r7, lr}
  409f32:	b08b      	sub	sp, #44	; 0x2c
  409f34:	af02      	add	r7, sp, #8
  409f36:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  409f38:	e03e      	b.n	409fb8 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  409f3a:	4b28      	ldr	r3, [pc, #160]	; (409fdc <prvSwitchTimerLists+0xac>)
  409f3c:	681b      	ldr	r3, [r3, #0]
  409f3e:	68db      	ldr	r3, [r3, #12]
  409f40:	681b      	ldr	r3, [r3, #0]
  409f42:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  409f44:	4b25      	ldr	r3, [pc, #148]	; (409fdc <prvSwitchTimerLists+0xac>)
  409f46:	681b      	ldr	r3, [r3, #0]
  409f48:	68db      	ldr	r3, [r3, #12]
  409f4a:	68db      	ldr	r3, [r3, #12]
  409f4c:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  409f4e:	69bb      	ldr	r3, [r7, #24]
  409f50:	3304      	adds	r3, #4
  409f52:	4618      	mov	r0, r3
  409f54:	4b22      	ldr	r3, [pc, #136]	; (409fe0 <prvSwitchTimerLists+0xb0>)
  409f56:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  409f58:	69bb      	ldr	r3, [r7, #24]
  409f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409f5c:	69b8      	ldr	r0, [r7, #24]
  409f5e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  409f60:	69bb      	ldr	r3, [r7, #24]
  409f62:	69db      	ldr	r3, [r3, #28]
  409f64:	2b01      	cmp	r3, #1
  409f66:	d127      	bne.n	409fb8 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  409f68:	69bb      	ldr	r3, [r7, #24]
  409f6a:	699a      	ldr	r2, [r3, #24]
  409f6c:	69fb      	ldr	r3, [r7, #28]
  409f6e:	4413      	add	r3, r2
  409f70:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  409f72:	697a      	ldr	r2, [r7, #20]
  409f74:	69fb      	ldr	r3, [r7, #28]
  409f76:	429a      	cmp	r2, r3
  409f78:	d90e      	bls.n	409f98 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  409f7a:	69bb      	ldr	r3, [r7, #24]
  409f7c:	697a      	ldr	r2, [r7, #20]
  409f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  409f80:	69bb      	ldr	r3, [r7, #24]
  409f82:	69ba      	ldr	r2, [r7, #24]
  409f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  409f86:	4b15      	ldr	r3, [pc, #84]	; (409fdc <prvSwitchTimerLists+0xac>)
  409f88:	681a      	ldr	r2, [r3, #0]
  409f8a:	69bb      	ldr	r3, [r7, #24]
  409f8c:	3304      	adds	r3, #4
  409f8e:	4610      	mov	r0, r2
  409f90:	4619      	mov	r1, r3
  409f92:	4b14      	ldr	r3, [pc, #80]	; (409fe4 <prvSwitchTimerLists+0xb4>)
  409f94:	4798      	blx	r3
  409f96:	e00f      	b.n	409fb8 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  409f98:	2300      	movs	r3, #0
  409f9a:	9300      	str	r3, [sp, #0]
  409f9c:	69b8      	ldr	r0, [r7, #24]
  409f9e:	2100      	movs	r1, #0
  409fa0:	69fa      	ldr	r2, [r7, #28]
  409fa2:	2300      	movs	r3, #0
  409fa4:	4c10      	ldr	r4, [pc, #64]	; (409fe8 <prvSwitchTimerLists+0xb8>)
  409fa6:	47a0      	blx	r4
  409fa8:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  409faa:	693b      	ldr	r3, [r7, #16]
  409fac:	2b00      	cmp	r3, #0
  409fae:	d103      	bne.n	409fb8 <prvSwitchTimerLists+0x88>
  409fb0:	4b0e      	ldr	r3, [pc, #56]	; (409fec <prvSwitchTimerLists+0xbc>)
  409fb2:	4798      	blx	r3
  409fb4:	bf00      	nop
  409fb6:	e7fd      	b.n	409fb4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  409fb8:	4b08      	ldr	r3, [pc, #32]	; (409fdc <prvSwitchTimerLists+0xac>)
  409fba:	681b      	ldr	r3, [r3, #0]
  409fbc:	681b      	ldr	r3, [r3, #0]
  409fbe:	2b00      	cmp	r3, #0
  409fc0:	d1bb      	bne.n	409f3a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  409fc2:	4b06      	ldr	r3, [pc, #24]	; (409fdc <prvSwitchTimerLists+0xac>)
  409fc4:	681b      	ldr	r3, [r3, #0]
  409fc6:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  409fc8:	4b09      	ldr	r3, [pc, #36]	; (409ff0 <prvSwitchTimerLists+0xc0>)
  409fca:	681a      	ldr	r2, [r3, #0]
  409fcc:	4b03      	ldr	r3, [pc, #12]	; (409fdc <prvSwitchTimerLists+0xac>)
  409fce:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  409fd0:	4b07      	ldr	r3, [pc, #28]	; (409ff0 <prvSwitchTimerLists+0xc0>)
  409fd2:	68fa      	ldr	r2, [r7, #12]
  409fd4:	601a      	str	r2, [r3, #0]
}
  409fd6:	3724      	adds	r7, #36	; 0x24
  409fd8:	46bd      	mov	sp, r7
  409fda:	bd90      	pop	{r4, r7, pc}
  409fdc:	2000887c 	.word	0x2000887c
  409fe0:	00407fb1 	.word	0x00407fb1
  409fe4:	00407f41 	.word	0x00407f41
  409fe8:	00409b2d 	.word	0x00409b2d
  409fec:	004081cd 	.word	0x004081cd
  409ff0:	20008880 	.word	0x20008880

00409ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  409ff4:	b580      	push	{r7, lr}
  409ff6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  409ff8:	4b0e      	ldr	r3, [pc, #56]	; (40a034 <prvCheckForValidListAndQueue+0x40>)
  409ffa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  409ffc:	4b0e      	ldr	r3, [pc, #56]	; (40a038 <prvCheckForValidListAndQueue+0x44>)
  409ffe:	681b      	ldr	r3, [r3, #0]
  40a000:	2b00      	cmp	r3, #0
  40a002:	d113      	bne.n	40a02c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  40a004:	480d      	ldr	r0, [pc, #52]	; (40a03c <prvCheckForValidListAndQueue+0x48>)
  40a006:	4b0e      	ldr	r3, [pc, #56]	; (40a040 <prvCheckForValidListAndQueue+0x4c>)
  40a008:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40a00a:	480e      	ldr	r0, [pc, #56]	; (40a044 <prvCheckForValidListAndQueue+0x50>)
  40a00c:	4b0c      	ldr	r3, [pc, #48]	; (40a040 <prvCheckForValidListAndQueue+0x4c>)
  40a00e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40a010:	4b0d      	ldr	r3, [pc, #52]	; (40a048 <prvCheckForValidListAndQueue+0x54>)
  40a012:	4a0a      	ldr	r2, [pc, #40]	; (40a03c <prvCheckForValidListAndQueue+0x48>)
  40a014:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40a016:	4b0d      	ldr	r3, [pc, #52]	; (40a04c <prvCheckForValidListAndQueue+0x58>)
  40a018:	4a0a      	ldr	r2, [pc, #40]	; (40a044 <prvCheckForValidListAndQueue+0x50>)
  40a01a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40a01c:	200a      	movs	r0, #10
  40a01e:	210c      	movs	r1, #12
  40a020:	2200      	movs	r2, #0
  40a022:	4b0b      	ldr	r3, [pc, #44]	; (40a050 <prvCheckForValidListAndQueue+0x5c>)
  40a024:	4798      	blx	r3
  40a026:	4602      	mov	r2, r0
  40a028:	4b03      	ldr	r3, [pc, #12]	; (40a038 <prvCheckForValidListAndQueue+0x44>)
  40a02a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40a02c:	4b09      	ldr	r3, [pc, #36]	; (40a054 <prvCheckForValidListAndQueue+0x60>)
  40a02e:	4798      	blx	r3
}
  40a030:	bd80      	pop	{r7, pc}
  40a032:	bf00      	nop
  40a034:	00408189 	.word	0x00408189
  40a038:	20008884 	.word	0x20008884
  40a03c:	20008854 	.word	0x20008854
  40a040:	00407e99 	.word	0x00407e99
  40a044:	20008868 	.word	0x20008868
  40a048:	2000887c 	.word	0x2000887c
  40a04c:	20008880 	.word	0x20008880
  40a050:	004085e5 	.word	0x004085e5
  40a054:	004081a5 	.word	0x004081a5

0040a058 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  40a058:	b580      	push	{r7, lr}
  40a05a:	b084      	sub	sp, #16
  40a05c:	af00      	add	r7, sp, #0
  40a05e:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  40a060:	687b      	ldr	r3, [r7, #4]
  40a062:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  40a064:	4b08      	ldr	r3, [pc, #32]	; (40a088 <xTimerIsTimerActive+0x30>)
  40a066:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  40a068:	68fb      	ldr	r3, [r7, #12]
  40a06a:	695b      	ldr	r3, [r3, #20]
  40a06c:	2b00      	cmp	r3, #0
  40a06e:	bf0c      	ite	eq
  40a070:	2300      	moveq	r3, #0
  40a072:	2301      	movne	r3, #1
  40a074:	b2db      	uxtb	r3, r3
  40a076:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  40a078:	4b04      	ldr	r3, [pc, #16]	; (40a08c <xTimerIsTimerActive+0x34>)
  40a07a:	4798      	blx	r3

	return xTimerIsInActiveList;
  40a07c:	68bb      	ldr	r3, [r7, #8]
}
  40a07e:	4618      	mov	r0, r3
  40a080:	3710      	adds	r7, #16
  40a082:	46bd      	mov	sp, r7
  40a084:	bd80      	pop	{r7, pc}
  40a086:	bf00      	nop
  40a088:	00408189 	.word	0x00408189
  40a08c:	004081a5 	.word	0x004081a5

0040a090 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40a090:	b580      	push	{r7, lr}
  40a092:	b086      	sub	sp, #24
  40a094:	af00      	add	r7, sp, #0
  40a096:	60f8      	str	r0, [r7, #12]
  40a098:	60b9      	str	r1, [r7, #8]
  40a09a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40a09c:	2300      	movs	r3, #0
  40a09e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40a0a0:	68fb      	ldr	r3, [r7, #12]
  40a0a2:	2b01      	cmp	r3, #1
  40a0a4:	d008      	beq.n	40a0b8 <_write+0x28>
  40a0a6:	68fb      	ldr	r3, [r7, #12]
  40a0a8:	2b02      	cmp	r3, #2
  40a0aa:	d005      	beq.n	40a0b8 <_write+0x28>
  40a0ac:	68fb      	ldr	r3, [r7, #12]
  40a0ae:	2b03      	cmp	r3, #3
  40a0b0:	d002      	beq.n	40a0b8 <_write+0x28>
		return -1;
  40a0b2:	f04f 33ff 	mov.w	r3, #4294967295
  40a0b6:	e01b      	b.n	40a0f0 <_write+0x60>
	}

	for (; len != 0; --len) {
  40a0b8:	e016      	b.n	40a0e8 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40a0ba:	4b0f      	ldr	r3, [pc, #60]	; (40a0f8 <_write+0x68>)
  40a0bc:	681a      	ldr	r2, [r3, #0]
  40a0be:	4b0f      	ldr	r3, [pc, #60]	; (40a0fc <_write+0x6c>)
  40a0c0:	6819      	ldr	r1, [r3, #0]
  40a0c2:	68bb      	ldr	r3, [r7, #8]
  40a0c4:	1c58      	adds	r0, r3, #1
  40a0c6:	60b8      	str	r0, [r7, #8]
  40a0c8:	781b      	ldrb	r3, [r3, #0]
  40a0ca:	4608      	mov	r0, r1
  40a0cc:	4619      	mov	r1, r3
  40a0ce:	4790      	blx	r2
  40a0d0:	4603      	mov	r3, r0
  40a0d2:	2b00      	cmp	r3, #0
  40a0d4:	da02      	bge.n	40a0dc <_write+0x4c>
			return -1;
  40a0d6:	f04f 33ff 	mov.w	r3, #4294967295
  40a0da:	e009      	b.n	40a0f0 <_write+0x60>
		}
		++nChars;
  40a0dc:	697b      	ldr	r3, [r7, #20]
  40a0de:	3301      	adds	r3, #1
  40a0e0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40a0e2:	687b      	ldr	r3, [r7, #4]
  40a0e4:	3b01      	subs	r3, #1
  40a0e6:	607b      	str	r3, [r7, #4]
  40a0e8:	687b      	ldr	r3, [r7, #4]
  40a0ea:	2b00      	cmp	r3, #0
  40a0ec:	d1e5      	bne.n	40a0ba <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40a0ee:	697b      	ldr	r3, [r7, #20]
}
  40a0f0:	4618      	mov	r0, r3
  40a0f2:	3718      	adds	r7, #24
  40a0f4:	46bd      	mov	sp, r7
  40a0f6:	bd80      	pop	{r7, pc}
  40a0f8:	200099bc 	.word	0x200099bc
  40a0fc:	200099c0 	.word	0x200099c0

0040a100 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  40a100:	b480      	push	{r7}
  40a102:	b083      	sub	sp, #12
  40a104:	af00      	add	r7, sp, #0
  40a106:	6078      	str	r0, [r7, #4]
  40a108:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40a10a:	683a      	ldr	r2, [r7, #0]
  40a10c:	f240 2302 	movw	r3, #514	; 0x202
  40a110:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40a112:	687a      	ldr	r2, [r7, #4]
  40a114:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40a116:	370c      	adds	r7, #12
  40a118:	46bd      	mov	sp, r7
  40a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a11e:	4770      	bx	lr

0040a120 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  40a120:	b480      	push	{r7}
  40a122:	b083      	sub	sp, #12
  40a124:	af00      	add	r7, sp, #0
  40a126:	6078      	str	r0, [r7, #4]
  40a128:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  40a12a:	683b      	ldr	r3, [r7, #0]
  40a12c:	2b00      	cmp	r3, #0
  40a12e:	d006      	beq.n	40a13e <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  40a130:	687b      	ldr	r3, [r7, #4]
  40a132:	685b      	ldr	r3, [r3, #4]
  40a134:	f043 0201 	orr.w	r2, r3, #1
  40a138:	687b      	ldr	r3, [r7, #4]
  40a13a:	605a      	str	r2, [r3, #4]
  40a13c:	e005      	b.n	40a14a <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40a13e:	687b      	ldr	r3, [r7, #4]
  40a140:	685b      	ldr	r3, [r3, #4]
  40a142:	f023 0201 	bic.w	r2, r3, #1
  40a146:	687b      	ldr	r3, [r7, #4]
  40a148:	605a      	str	r2, [r3, #4]
	}
}
  40a14a:	370c      	adds	r7, #12
  40a14c:	46bd      	mov	sp, r7
  40a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a152:	4770      	bx	lr

0040a154 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40a154:	b480      	push	{r7}
  40a156:	b087      	sub	sp, #28
  40a158:	af00      	add	r7, sp, #0
  40a15a:	60f8      	str	r0, [r7, #12]
  40a15c:	60b9      	str	r1, [r7, #8]
  40a15e:	607a      	str	r2, [r7, #4]
  40a160:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  40a162:	68fb      	ldr	r3, [r7, #12]
  40a164:	689b      	ldr	r3, [r3, #8]
  40a166:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  40a168:	e002      	b.n	40a170 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  40a16a:	68fb      	ldr	r3, [r7, #12]
  40a16c:	689b      	ldr	r3, [r3, #8]
  40a16e:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  40a170:	68fb      	ldr	r3, [r7, #12]
  40a172:	689a      	ldr	r2, [r3, #8]
  40a174:	697b      	ldr	r3, [r7, #20]
  40a176:	429a      	cmp	r2, r3
  40a178:	d1f7      	bne.n	40a16a <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  40a17a:	68bb      	ldr	r3, [r7, #8]
  40a17c:	2b00      	cmp	r3, #0
  40a17e:	d01c      	beq.n	40a1ba <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  40a180:	697b      	ldr	r3, [r7, #20]
  40a182:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  40a186:	0c1b      	lsrs	r3, r3, #16
  40a188:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a18a:	693b      	ldr	r3, [r7, #16]
  40a18c:	091a      	lsrs	r2, r3, #4
  40a18e:	4613      	mov	r3, r2
  40a190:	009b      	lsls	r3, r3, #2
  40a192:	4413      	add	r3, r2
  40a194:	005b      	lsls	r3, r3, #1
  40a196:	461a      	mov	r2, r3
  40a198:	693b      	ldr	r3, [r7, #16]
  40a19a:	f003 030f 	and.w	r3, r3, #15
  40a19e:	441a      	add	r2, r3
  40a1a0:	68bb      	ldr	r3, [r7, #8]
  40a1a2:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40a1a4:	697b      	ldr	r3, [r7, #20]
  40a1a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40a1aa:	2b00      	cmp	r3, #0
  40a1ac:	d005      	beq.n	40a1ba <rtc_get_time+0x66>
			*pul_hour += 12;
  40a1ae:	68bb      	ldr	r3, [r7, #8]
  40a1b0:	681b      	ldr	r3, [r3, #0]
  40a1b2:	f103 020c 	add.w	r2, r3, #12
  40a1b6:	68bb      	ldr	r3, [r7, #8]
  40a1b8:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40a1ba:	687b      	ldr	r3, [r7, #4]
  40a1bc:	2b00      	cmp	r3, #0
  40a1be:	d011      	beq.n	40a1e4 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  40a1c0:	697b      	ldr	r3, [r7, #20]
  40a1c2:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  40a1c6:	0a1b      	lsrs	r3, r3, #8
  40a1c8:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40a1ca:	693b      	ldr	r3, [r7, #16]
  40a1cc:	091a      	lsrs	r2, r3, #4
  40a1ce:	4613      	mov	r3, r2
  40a1d0:	009b      	lsls	r3, r3, #2
  40a1d2:	4413      	add	r3, r2
  40a1d4:	005b      	lsls	r3, r3, #1
  40a1d6:	461a      	mov	r2, r3
  40a1d8:	693b      	ldr	r3, [r7, #16]
  40a1da:	f003 030f 	and.w	r3, r3, #15
  40a1de:	441a      	add	r2, r3
  40a1e0:	687b      	ldr	r3, [r7, #4]
  40a1e2:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  40a1e4:	683b      	ldr	r3, [r7, #0]
  40a1e6:	2b00      	cmp	r3, #0
  40a1e8:	d010      	beq.n	40a20c <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  40a1ea:	697b      	ldr	r3, [r7, #20]
  40a1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a1f0:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a1f2:	693b      	ldr	r3, [r7, #16]
  40a1f4:	091a      	lsrs	r2, r3, #4
  40a1f6:	4613      	mov	r3, r2
  40a1f8:	009b      	lsls	r3, r3, #2
  40a1fa:	4413      	add	r3, r2
  40a1fc:	005b      	lsls	r3, r3, #1
  40a1fe:	461a      	mov	r2, r3
  40a200:	693b      	ldr	r3, [r7, #16]
  40a202:	f003 030f 	and.w	r3, r3, #15
  40a206:	441a      	add	r2, r3
  40a208:	683b      	ldr	r3, [r7, #0]
  40a20a:	601a      	str	r2, [r3, #0]
	}
}
  40a20c:	371c      	adds	r7, #28
  40a20e:	46bd      	mov	sp, r7
  40a210:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a214:	4770      	bx	lr
  40a216:	bf00      	nop

0040a218 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40a218:	b480      	push	{r7}
  40a21a:	b087      	sub	sp, #28
  40a21c:	af00      	add	r7, sp, #0
  40a21e:	60f8      	str	r0, [r7, #12]
  40a220:	60b9      	str	r1, [r7, #8]
  40a222:	607a      	str	r2, [r7, #4]
  40a224:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  40a226:	2300      	movs	r3, #0
  40a228:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40a22a:	68fb      	ldr	r3, [r7, #12]
  40a22c:	685b      	ldr	r3, [r3, #4]
  40a22e:	f003 0301 	and.w	r3, r3, #1
  40a232:	2b00      	cmp	r3, #0
  40a234:	d009      	beq.n	40a24a <rtc_set_time+0x32>
		if (ul_hour > 12) {
  40a236:	68bb      	ldr	r3, [r7, #8]
  40a238:	2b0c      	cmp	r3, #12
  40a23a:	d906      	bls.n	40a24a <rtc_set_time+0x32>
			ul_hour -= 12;
  40a23c:	68bb      	ldr	r3, [r7, #8]
  40a23e:	3b0c      	subs	r3, #12
  40a240:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  40a242:	697b      	ldr	r3, [r7, #20]
  40a244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40a248:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40a24a:	68ba      	ldr	r2, [r7, #8]
  40a24c:	4b33      	ldr	r3, [pc, #204]	; (40a31c <rtc_set_time+0x104>)
  40a24e:	fba3 1302 	umull	r1, r3, r3, r2
  40a252:	08db      	lsrs	r3, r3, #3
  40a254:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40a256:	68b9      	ldr	r1, [r7, #8]
  40a258:	4b30      	ldr	r3, [pc, #192]	; (40a31c <rtc_set_time+0x104>)
  40a25a:	fba3 2301 	umull	r2, r3, r3, r1
  40a25e:	08da      	lsrs	r2, r3, #3
  40a260:	4613      	mov	r3, r2
  40a262:	009b      	lsls	r3, r3, #2
  40a264:	4413      	add	r3, r2
  40a266:	005b      	lsls	r3, r3, #1
  40a268:	1aca      	subs	r2, r1, r3
  40a26a:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40a26c:	4303      	orrs	r3, r0
  40a26e:	697a      	ldr	r2, [r7, #20]
  40a270:	4313      	orrs	r3, r2
  40a272:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40a274:	687a      	ldr	r2, [r7, #4]
  40a276:	4b29      	ldr	r3, [pc, #164]	; (40a31c <rtc_set_time+0x104>)
  40a278:	fba3 1302 	umull	r1, r3, r3, r2
  40a27c:	08db      	lsrs	r3, r3, #3
  40a27e:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40a280:	6879      	ldr	r1, [r7, #4]
  40a282:	4b26      	ldr	r3, [pc, #152]	; (40a31c <rtc_set_time+0x104>)
  40a284:	fba3 2301 	umull	r2, r3, r3, r1
  40a288:	08da      	lsrs	r2, r3, #3
  40a28a:	4613      	mov	r3, r2
  40a28c:	009b      	lsls	r3, r3, #2
  40a28e:	4413      	add	r3, r2
  40a290:	005b      	lsls	r3, r3, #1
  40a292:	1aca      	subs	r2, r1, r3
  40a294:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40a296:	4303      	orrs	r3, r0
  40a298:	697a      	ldr	r2, [r7, #20]
  40a29a:	4313      	orrs	r3, r2
  40a29c:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40a29e:	683a      	ldr	r2, [r7, #0]
  40a2a0:	4b1e      	ldr	r3, [pc, #120]	; (40a31c <rtc_set_time+0x104>)
  40a2a2:	fba3 1302 	umull	r1, r3, r3, r2
  40a2a6:	08db      	lsrs	r3, r3, #3
  40a2a8:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40a2aa:	6839      	ldr	r1, [r7, #0]
  40a2ac:	4b1b      	ldr	r3, [pc, #108]	; (40a31c <rtc_set_time+0x104>)
  40a2ae:	fba3 2301 	umull	r2, r3, r3, r1
  40a2b2:	08da      	lsrs	r2, r3, #3
  40a2b4:	4613      	mov	r3, r2
  40a2b6:	009b      	lsls	r3, r3, #2
  40a2b8:	4413      	add	r3, r2
  40a2ba:	005b      	lsls	r3, r3, #1
  40a2bc:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40a2be:	ea40 0302 	orr.w	r3, r0, r2
  40a2c2:	697a      	ldr	r2, [r7, #20]
  40a2c4:	4313      	orrs	r3, r2
  40a2c6:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40a2c8:	68fb      	ldr	r3, [r7, #12]
  40a2ca:	681b      	ldr	r3, [r3, #0]
  40a2cc:	f043 0201 	orr.w	r2, r3, #1
  40a2d0:	68fb      	ldr	r3, [r7, #12]
  40a2d2:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40a2d4:	bf00      	nop
  40a2d6:	68fb      	ldr	r3, [r7, #12]
  40a2d8:	699b      	ldr	r3, [r3, #24]
  40a2da:	f003 0301 	and.w	r3, r3, #1
  40a2de:	2b00      	cmp	r3, #0
  40a2e0:	d0f9      	beq.n	40a2d6 <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40a2e2:	68fb      	ldr	r3, [r7, #12]
  40a2e4:	2201      	movs	r2, #1
  40a2e6:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  40a2e8:	68fb      	ldr	r3, [r7, #12]
  40a2ea:	697a      	ldr	r2, [r7, #20]
  40a2ec:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40a2ee:	68fb      	ldr	r3, [r7, #12]
  40a2f0:	681b      	ldr	r3, [r3, #0]
  40a2f2:	f023 0201 	bic.w	r2, r3, #1
  40a2f6:	68fb      	ldr	r3, [r7, #12]
  40a2f8:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40a2fa:	68fb      	ldr	r3, [r7, #12]
  40a2fc:	69db      	ldr	r3, [r3, #28]
  40a2fe:	f043 0204 	orr.w	r2, r3, #4
  40a302:	68fb      	ldr	r3, [r7, #12]
  40a304:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40a306:	68fb      	ldr	r3, [r7, #12]
  40a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a30a:	f003 0301 	and.w	r3, r3, #1
}
  40a30e:	4618      	mov	r0, r3
  40a310:	371c      	adds	r7, #28
  40a312:	46bd      	mov	sp, r7
  40a314:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a318:	4770      	bx	lr
  40a31a:	bf00      	nop
  40a31c:	cccccccd 	.word	0xcccccccd

0040a320 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40a320:	b480      	push	{r7}
  40a322:	b089      	sub	sp, #36	; 0x24
  40a324:	af00      	add	r7, sp, #0
  40a326:	60f8      	str	r0, [r7, #12]
  40a328:	60b9      	str	r1, [r7, #8]
  40a32a:	607a      	str	r2, [r7, #4]
  40a32c:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40a32e:	68fb      	ldr	r3, [r7, #12]
  40a330:	68db      	ldr	r3, [r3, #12]
  40a332:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  40a334:	e002      	b.n	40a33c <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  40a336:	68fb      	ldr	r3, [r7, #12]
  40a338:	68db      	ldr	r3, [r3, #12]
  40a33a:	61fb      	str	r3, [r7, #28]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  40a33c:	68fb      	ldr	r3, [r7, #12]
  40a33e:	68da      	ldr	r2, [r3, #12]
  40a340:	69fb      	ldr	r3, [r7, #28]
  40a342:	429a      	cmp	r2, r3
  40a344:	d1f7      	bne.n	40a336 <rtc_get_date+0x16>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  40a346:	68bb      	ldr	r3, [r7, #8]
  40a348:	2b00      	cmp	r3, #0
  40a34a:	d025      	beq.n	40a398 <rtc_get_date+0x78>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  40a34c:	69fb      	ldr	r3, [r7, #28]
  40a34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a352:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a354:	69bb      	ldr	r3, [r7, #24]
  40a356:	091a      	lsrs	r2, r3, #4
  40a358:	4613      	mov	r3, r2
  40a35a:	009b      	lsls	r3, r3, #2
  40a35c:	4413      	add	r3, r2
  40a35e:	005b      	lsls	r3, r3, #1
  40a360:	461a      	mov	r2, r3
  40a362:	69bb      	ldr	r3, [r7, #24]
  40a364:	f003 030f 	and.w	r3, r3, #15
  40a368:	4413      	add	r3, r2
  40a36a:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  40a36c:	69fb      	ldr	r3, [r7, #28]
  40a36e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40a372:	0a1b      	lsrs	r3, r3, #8
  40a374:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a376:	697b      	ldr	r3, [r7, #20]
  40a378:	2264      	movs	r2, #100	; 0x64
  40a37a:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a37e:	69bb      	ldr	r3, [r7, #24]
  40a380:	091a      	lsrs	r2, r3, #4
  40a382:	4613      	mov	r3, r2
  40a384:	009b      	lsls	r3, r3, #2
  40a386:	4413      	add	r3, r2
  40a388:	005b      	lsls	r3, r3, #1
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a38a:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a38c:	69bb      	ldr	r3, [r7, #24]
  40a38e:	f003 030f 	and.w	r3, r3, #15
  40a392:	441a      	add	r2, r3
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a394:	68bb      	ldr	r3, [r7, #8]
  40a396:	601a      	str	r2, [r3, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  40a398:	687b      	ldr	r3, [r7, #4]
  40a39a:	2b00      	cmp	r3, #0
  40a39c:	d011      	beq.n	40a3c2 <rtc_get_date+0xa2>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  40a39e:	69fb      	ldr	r3, [r7, #28]
  40a3a0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  40a3a4:	0c1b      	lsrs	r3, r3, #16
  40a3a6:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a3a8:	69bb      	ldr	r3, [r7, #24]
  40a3aa:	091a      	lsrs	r2, r3, #4
  40a3ac:	4613      	mov	r3, r2
  40a3ae:	009b      	lsls	r3, r3, #2
  40a3b0:	4413      	add	r3, r2
  40a3b2:	005b      	lsls	r3, r3, #1
  40a3b4:	461a      	mov	r2, r3
  40a3b6:	69bb      	ldr	r3, [r7, #24]
  40a3b8:	f003 030f 	and.w	r3, r3, #15
  40a3bc:	441a      	add	r2, r3
  40a3be:	687b      	ldr	r3, [r7, #4]
  40a3c0:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40a3c2:	683b      	ldr	r3, [r7, #0]
  40a3c4:	2b00      	cmp	r3, #0
  40a3c6:	d011      	beq.n	40a3ec <rtc_get_date+0xcc>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  40a3c8:	69fb      	ldr	r3, [r7, #28]
  40a3ca:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  40a3ce:	0e1b      	lsrs	r3, r3, #24
  40a3d0:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a3d2:	69bb      	ldr	r3, [r7, #24]
  40a3d4:	091a      	lsrs	r2, r3, #4
  40a3d6:	4613      	mov	r3, r2
  40a3d8:	009b      	lsls	r3, r3, #2
  40a3da:	4413      	add	r3, r2
  40a3dc:	005b      	lsls	r3, r3, #1
  40a3de:	461a      	mov	r2, r3
  40a3e0:	69bb      	ldr	r3, [r7, #24]
  40a3e2:	f003 030f 	and.w	r3, r3, #15
  40a3e6:	441a      	add	r2, r3
  40a3e8:	683b      	ldr	r3, [r7, #0]
  40a3ea:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40a3ee:	2b00      	cmp	r3, #0
  40a3f0:	d005      	beq.n	40a3fe <rtc_get_date+0xde>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40a3f2:	69fb      	ldr	r3, [r7, #28]
  40a3f4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
  40a3f8:	0d5a      	lsrs	r2, r3, #21
  40a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40a3fc:	601a      	str	r2, [r3, #0]
	}
}
  40a3fe:	3724      	adds	r7, #36	; 0x24
  40a400:	46bd      	mov	sp, r7
  40a402:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a406:	4770      	bx	lr

0040a408 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40a408:	b480      	push	{r7}
  40a40a:	b087      	sub	sp, #28
  40a40c:	af00      	add	r7, sp, #0
  40a40e:	60f8      	str	r0, [r7, #12]
  40a410:	60b9      	str	r1, [r7, #8]
  40a412:	607a      	str	r2, [r7, #4]
  40a414:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  40a416:	2300      	movs	r3, #0
  40a418:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40a41a:	68ba      	ldr	r2, [r7, #8]
  40a41c:	4b46      	ldr	r3, [pc, #280]	; (40a538 <rtc_set_date+0x130>)
  40a41e:	fba3 1302 	umull	r1, r3, r3, r2
  40a422:	099b      	lsrs	r3, r3, #6
  40a424:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40a426:	68ba      	ldr	r2, [r7, #8]
  40a428:	4b44      	ldr	r3, [pc, #272]	; (40a53c <rtc_set_date+0x134>)
  40a42a:	fba3 1302 	umull	r1, r3, r3, r2
  40a42e:	0959      	lsrs	r1, r3, #5
  40a430:	4b43      	ldr	r3, [pc, #268]	; (40a540 <rtc_set_date+0x138>)
  40a432:	fba3 2301 	umull	r2, r3, r3, r1
  40a436:	08da      	lsrs	r2, r3, #3
  40a438:	4613      	mov	r3, r2
  40a43a:	009b      	lsls	r3, r3, #2
  40a43c:	4413      	add	r3, r2
  40a43e:	005b      	lsls	r3, r3, #1
  40a440:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40a442:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40a446:	697a      	ldr	r2, [r7, #20]
  40a448:	4313      	orrs	r3, r2
  40a44a:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40a44c:	68ba      	ldr	r2, [r7, #8]
  40a44e:	4b3c      	ldr	r3, [pc, #240]	; (40a540 <rtc_set_date+0x138>)
  40a450:	fba3 1302 	umull	r1, r3, r3, r2
  40a454:	08d9      	lsrs	r1, r3, #3
  40a456:	4b3a      	ldr	r3, [pc, #232]	; (40a540 <rtc_set_date+0x138>)
  40a458:	fba3 2301 	umull	r2, r3, r3, r1
  40a45c:	08da      	lsrs	r2, r3, #3
  40a45e:	4613      	mov	r3, r2
  40a460:	009b      	lsls	r3, r3, #2
  40a462:	4413      	add	r3, r2
  40a464:	005b      	lsls	r3, r3, #1
  40a466:	1aca      	subs	r2, r1, r3
  40a468:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40a46a:	68b9      	ldr	r1, [r7, #8]
  40a46c:	4b34      	ldr	r3, [pc, #208]	; (40a540 <rtc_set_date+0x138>)
  40a46e:	fba3 2301 	umull	r2, r3, r3, r1
  40a472:	08da      	lsrs	r2, r3, #3
  40a474:	4613      	mov	r3, r2
  40a476:	009b      	lsls	r3, r3, #2
  40a478:	4413      	add	r3, r2
  40a47a:	005b      	lsls	r3, r3, #1
  40a47c:	1aca      	subs	r2, r1, r3
  40a47e:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  40a480:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40a482:	697a      	ldr	r2, [r7, #20]
  40a484:	4313      	orrs	r3, r2
  40a486:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40a488:	687a      	ldr	r2, [r7, #4]
  40a48a:	4b2d      	ldr	r3, [pc, #180]	; (40a540 <rtc_set_date+0x138>)
  40a48c:	fba3 1302 	umull	r1, r3, r3, r2
  40a490:	08db      	lsrs	r3, r3, #3
  40a492:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40a494:	6879      	ldr	r1, [r7, #4]
  40a496:	4b2a      	ldr	r3, [pc, #168]	; (40a540 <rtc_set_date+0x138>)
  40a498:	fba3 2301 	umull	r2, r3, r3, r1
  40a49c:	08da      	lsrs	r2, r3, #3
  40a49e:	4613      	mov	r3, r2
  40a4a0:	009b      	lsls	r3, r3, #2
  40a4a2:	4413      	add	r3, r2
  40a4a4:	005b      	lsls	r3, r3, #1
  40a4a6:	1aca      	subs	r2, r1, r3
  40a4a8:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40a4aa:	4303      	orrs	r3, r0
  40a4ac:	697a      	ldr	r2, [r7, #20]
  40a4ae:	4313      	orrs	r3, r2
  40a4b0:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40a4b2:	6a3b      	ldr	r3, [r7, #32]
  40a4b4:	055b      	lsls	r3, r3, #21
  40a4b6:	697a      	ldr	r2, [r7, #20]
  40a4b8:	4313      	orrs	r3, r2
  40a4ba:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40a4bc:	683a      	ldr	r2, [r7, #0]
  40a4be:	4b20      	ldr	r3, [pc, #128]	; (40a540 <rtc_set_date+0x138>)
  40a4c0:	fba3 1302 	umull	r1, r3, r3, r2
  40a4c4:	08db      	lsrs	r3, r3, #3
  40a4c6:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40a4c8:	6839      	ldr	r1, [r7, #0]
  40a4ca:	4b1d      	ldr	r3, [pc, #116]	; (40a540 <rtc_set_date+0x138>)
  40a4cc:	fba3 2301 	umull	r2, r3, r3, r1
  40a4d0:	08da      	lsrs	r2, r3, #3
  40a4d2:	4613      	mov	r3, r2
  40a4d4:	009b      	lsls	r3, r3, #2
  40a4d6:	4413      	add	r3, r2
  40a4d8:	005b      	lsls	r3, r3, #1
  40a4da:	1aca      	subs	r2, r1, r3
  40a4dc:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40a4de:	4303      	orrs	r3, r0
  40a4e0:	697a      	ldr	r2, [r7, #20]
  40a4e2:	4313      	orrs	r3, r2
  40a4e4:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40a4e6:	68fb      	ldr	r3, [r7, #12]
  40a4e8:	681b      	ldr	r3, [r3, #0]
  40a4ea:	f043 0202 	orr.w	r2, r3, #2
  40a4ee:	68fb      	ldr	r3, [r7, #12]
  40a4f0:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40a4f2:	bf00      	nop
  40a4f4:	68fb      	ldr	r3, [r7, #12]
  40a4f6:	699b      	ldr	r3, [r3, #24]
  40a4f8:	f003 0301 	and.w	r3, r3, #1
  40a4fc:	2b00      	cmp	r3, #0
  40a4fe:	d0f9      	beq.n	40a4f4 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40a500:	68fb      	ldr	r3, [r7, #12]
  40a502:	2201      	movs	r2, #1
  40a504:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  40a506:	68fb      	ldr	r3, [r7, #12]
  40a508:	697a      	ldr	r2, [r7, #20]
  40a50a:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40a50c:	68fb      	ldr	r3, [r7, #12]
  40a50e:	681b      	ldr	r3, [r3, #0]
  40a510:	f023 0202 	bic.w	r2, r3, #2
  40a514:	68fb      	ldr	r3, [r7, #12]
  40a516:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40a518:	68fb      	ldr	r3, [r7, #12]
  40a51a:	69db      	ldr	r3, [r3, #28]
  40a51c:	f043 0204 	orr.w	r2, r3, #4
  40a520:	68fb      	ldr	r3, [r7, #12]
  40a522:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40a524:	68fb      	ldr	r3, [r7, #12]
  40a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a528:	f003 0302 	and.w	r3, r3, #2
}
  40a52c:	4618      	mov	r0, r3
  40a52e:	371c      	adds	r7, #28
  40a530:	46bd      	mov	sp, r7
  40a532:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a536:	4770      	bx	lr
  40a538:	10624dd3 	.word	0x10624dd3
  40a53c:	51eb851f 	.word	0x51eb851f
  40a540:	cccccccd 	.word	0xcccccccd

0040a544 <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  40a544:	b480      	push	{r7}
  40a546:	b083      	sub	sp, #12
  40a548:	af00      	add	r7, sp, #0
  40a54a:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  40a54c:	687b      	ldr	r3, [r7, #4]
  40a54e:	2200      	movs	r2, #0
  40a550:	611a      	str	r2, [r3, #16]
}
  40a552:	370c      	adds	r7, #12
  40a554:	46bd      	mov	sp, r7
  40a556:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a55a:	4770      	bx	lr

0040a55c <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  40a55c:	b480      	push	{r7}
  40a55e:	b083      	sub	sp, #12
  40a560:	af00      	add	r7, sp, #0
  40a562:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  40a564:	687b      	ldr	r3, [r7, #4]
  40a566:	4a03      	ldr	r2, [pc, #12]	; (40a574 <rtc_clear_date_alarm+0x18>)
  40a568:	615a      	str	r2, [r3, #20]
}
  40a56a:	370c      	adds	r7, #12
  40a56c:	46bd      	mov	sp, r7
  40a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a572:	4770      	bx	lr
  40a574:	01010000 	.word	0x01010000

0040a578 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40a578:	b480      	push	{r7}
  40a57a:	b085      	sub	sp, #20
  40a57c:	af00      	add	r7, sp, #0
  40a57e:	6078      	str	r0, [r7, #4]
  40a580:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40a582:	2300      	movs	r3, #0
  40a584:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40a586:	687b      	ldr	r3, [r7, #4]
  40a588:	22ac      	movs	r2, #172	; 0xac
  40a58a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40a58c:	683b      	ldr	r3, [r7, #0]
  40a58e:	681a      	ldr	r2, [r3, #0]
  40a590:	683b      	ldr	r3, [r7, #0]
  40a592:	685b      	ldr	r3, [r3, #4]
  40a594:	fbb2 f3f3 	udiv	r3, r2, r3
  40a598:	091b      	lsrs	r3, r3, #4
  40a59a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40a59c:	68fb      	ldr	r3, [r7, #12]
  40a59e:	2b00      	cmp	r3, #0
  40a5a0:	d003      	beq.n	40a5aa <uart_init+0x32>
  40a5a2:	68fb      	ldr	r3, [r7, #12]
  40a5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40a5a8:	d301      	bcc.n	40a5ae <uart_init+0x36>
		return 1;
  40a5aa:	2301      	movs	r3, #1
  40a5ac:	e00f      	b.n	40a5ce <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40a5ae:	687b      	ldr	r3, [r7, #4]
  40a5b0:	68fa      	ldr	r2, [r7, #12]
  40a5b2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40a5b4:	683b      	ldr	r3, [r7, #0]
  40a5b6:	689a      	ldr	r2, [r3, #8]
  40a5b8:	687b      	ldr	r3, [r7, #4]
  40a5ba:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40a5bc:	687b      	ldr	r3, [r7, #4]
  40a5be:	f240 2202 	movw	r2, #514	; 0x202
  40a5c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40a5c6:	687b      	ldr	r3, [r7, #4]
  40a5c8:	2250      	movs	r2, #80	; 0x50
  40a5ca:	601a      	str	r2, [r3, #0]

	return 0;
  40a5cc:	2300      	movs	r3, #0
}
  40a5ce:	4618      	mov	r0, r3
  40a5d0:	3714      	adds	r7, #20
  40a5d2:	46bd      	mov	sp, r7
  40a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a5d8:	4770      	bx	lr
  40a5da:	bf00      	nop

0040a5dc <uart_disable>:
 * \brief Disable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable(Uart *p_uart)
{
  40a5dc:	b480      	push	{r7}
  40a5de:	b083      	sub	sp, #12
  40a5e0:	af00      	add	r7, sp, #0
  40a5e2:	6078      	str	r0, [r7, #4]
	/* Disable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXDIS | UART_CR_TXDIS;
  40a5e4:	687b      	ldr	r3, [r7, #4]
  40a5e6:	22a0      	movs	r2, #160	; 0xa0
  40a5e8:	601a      	str	r2, [r3, #0]
}
  40a5ea:	370c      	adds	r7, #12
  40a5ec:	46bd      	mov	sp, r7
  40a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a5f2:	4770      	bx	lr

0040a5f4 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  40a5f4:	b480      	push	{r7}
  40a5f6:	b083      	sub	sp, #12
  40a5f8:	af00      	add	r7, sp, #0
  40a5fa:	6078      	str	r0, [r7, #4]
  40a5fc:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  40a5fe:	687b      	ldr	r3, [r7, #4]
  40a600:	683a      	ldr	r2, [r7, #0]
  40a602:	60da      	str	r2, [r3, #12]
}
  40a604:	370c      	adds	r7, #12
  40a606:	46bd      	mov	sp, r7
  40a608:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a60c:	4770      	bx	lr
  40a60e:	bf00      	nop

0040a610 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  40a610:	b480      	push	{r7}
  40a612:	b083      	sub	sp, #12
  40a614:	af00      	add	r7, sp, #0
  40a616:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  40a618:	687b      	ldr	r3, [r7, #4]
  40a61a:	695b      	ldr	r3, [r3, #20]
}
  40a61c:	4618      	mov	r0, r3
  40a61e:	370c      	adds	r7, #12
  40a620:	46bd      	mov	sp, r7
  40a622:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a626:	4770      	bx	lr

0040a628 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40a628:	b480      	push	{r7}
  40a62a:	b083      	sub	sp, #12
  40a62c:	af00      	add	r7, sp, #0
  40a62e:	6078      	str	r0, [r7, #4]
  40a630:	460b      	mov	r3, r1
  40a632:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40a634:	687b      	ldr	r3, [r7, #4]
  40a636:	695b      	ldr	r3, [r3, #20]
  40a638:	f003 0302 	and.w	r3, r3, #2
  40a63c:	2b00      	cmp	r3, #0
  40a63e:	d101      	bne.n	40a644 <uart_write+0x1c>
		return 1;
  40a640:	2301      	movs	r3, #1
  40a642:	e003      	b.n	40a64c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40a644:	78fa      	ldrb	r2, [r7, #3]
  40a646:	687b      	ldr	r3, [r7, #4]
  40a648:	61da      	str	r2, [r3, #28]
	return 0;
  40a64a:	2300      	movs	r3, #0
}
  40a64c:	4618      	mov	r0, r3
  40a64e:	370c      	adds	r7, #12
  40a650:	46bd      	mov	sp, r7
  40a652:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a656:	4770      	bx	lr

0040a658 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40a658:	b480      	push	{r7}
  40a65a:	b083      	sub	sp, #12
  40a65c:	af00      	add	r7, sp, #0
  40a65e:	6078      	str	r0, [r7, #4]
  40a660:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40a662:	687b      	ldr	r3, [r7, #4]
  40a664:	695b      	ldr	r3, [r3, #20]
  40a666:	f003 0301 	and.w	r3, r3, #1
  40a66a:	2b00      	cmp	r3, #0
  40a66c:	d101      	bne.n	40a672 <uart_read+0x1a>
		return 1;
  40a66e:	2301      	movs	r3, #1
  40a670:	e005      	b.n	40a67e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40a672:	687b      	ldr	r3, [r7, #4]
  40a674:	699b      	ldr	r3, [r3, #24]
  40a676:	b2da      	uxtb	r2, r3
  40a678:	683b      	ldr	r3, [r7, #0]
  40a67a:	701a      	strb	r2, [r3, #0]
	return 0;
  40a67c:	2300      	movs	r3, #0
}
  40a67e:	4618      	mov	r0, r3
  40a680:	370c      	adds	r7, #12
  40a682:	46bd      	mov	sp, r7
  40a684:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a688:	4770      	bx	lr
  40a68a:	bf00      	nop

0040a68c <rstc_start_software_reset>:
 *
 * \param[out] p_rstc Module hardware register base address pointer
 */
void rstc_start_software_reset(
		Rstc *p_rstc)
{
  40a68c:	b480      	push	{r7}
  40a68e:	b083      	sub	sp, #12
  40a690:	af00      	add	r7, sp, #0
  40a692:	6078      	str	r0, [r7, #4]
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  40a694:	687b      	ldr	r3, [r7, #4]
  40a696:	4a03      	ldr	r2, [pc, #12]	; (40a6a4 <rstc_start_software_reset+0x18>)
  40a698:	601a      	str	r2, [r3, #0]
}
  40a69a:	370c      	adds	r7, #12
  40a69c:	46bd      	mov	sp, r7
  40a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a6a2:	4770      	bx	lr
  40a6a4:	a5000005 	.word	0xa5000005

0040a6a8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40a6a8:	b580      	push	{r7, lr}
  40a6aa:	b082      	sub	sp, #8
  40a6ac:	af00      	add	r7, sp, #0
  40a6ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40a6b0:	687b      	ldr	r3, [r7, #4]
  40a6b2:	2b07      	cmp	r3, #7
  40a6b4:	d830      	bhi.n	40a718 <osc_enable+0x70>
  40a6b6:	a201      	add	r2, pc, #4	; (adr r2, 40a6bc <osc_enable+0x14>)
  40a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a6bc:	0040a719 	.word	0x0040a719
  40a6c0:	0040a6dd 	.word	0x0040a6dd
  40a6c4:	0040a6e5 	.word	0x0040a6e5
  40a6c8:	0040a6ed 	.word	0x0040a6ed
  40a6cc:	0040a6f5 	.word	0x0040a6f5
  40a6d0:	0040a6fd 	.word	0x0040a6fd
  40a6d4:	0040a705 	.word	0x0040a705
  40a6d8:	0040a70f 	.word	0x0040a70f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40a6dc:	2000      	movs	r0, #0
  40a6de:	4b10      	ldr	r3, [pc, #64]	; (40a720 <osc_enable+0x78>)
  40a6e0:	4798      	blx	r3
		break;
  40a6e2:	e019      	b.n	40a718 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40a6e4:	2001      	movs	r0, #1
  40a6e6:	4b0e      	ldr	r3, [pc, #56]	; (40a720 <osc_enable+0x78>)
  40a6e8:	4798      	blx	r3
		break;
  40a6ea:	e015      	b.n	40a718 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40a6ec:	2000      	movs	r0, #0
  40a6ee:	4b0d      	ldr	r3, [pc, #52]	; (40a724 <osc_enable+0x7c>)
  40a6f0:	4798      	blx	r3
		break;
  40a6f2:	e011      	b.n	40a718 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40a6f4:	2010      	movs	r0, #16
  40a6f6:	4b0b      	ldr	r3, [pc, #44]	; (40a724 <osc_enable+0x7c>)
  40a6f8:	4798      	blx	r3
		break;
  40a6fa:	e00d      	b.n	40a718 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40a6fc:	2020      	movs	r0, #32
  40a6fe:	4b09      	ldr	r3, [pc, #36]	; (40a724 <osc_enable+0x7c>)
  40a700:	4798      	blx	r3
		break;
  40a702:	e009      	b.n	40a718 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40a704:	2000      	movs	r0, #0
  40a706:	213e      	movs	r1, #62	; 0x3e
  40a708:	4b07      	ldr	r3, [pc, #28]	; (40a728 <osc_enable+0x80>)
  40a70a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40a70c:	e004      	b.n	40a718 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40a70e:	2001      	movs	r0, #1
  40a710:	213e      	movs	r1, #62	; 0x3e
  40a712:	4b05      	ldr	r3, [pc, #20]	; (40a728 <osc_enable+0x80>)
  40a714:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40a716:	bf00      	nop
	}
}
  40a718:	3708      	adds	r7, #8
  40a71a:	46bd      	mov	sp, r7
  40a71c:	bd80      	pop	{r7, pc}
  40a71e:	bf00      	nop
  40a720:	0040b2c9 	.word	0x0040b2c9
  40a724:	0040b335 	.word	0x0040b335
  40a728:	0040b3a5 	.word	0x0040b3a5

0040a72c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40a72c:	b580      	push	{r7, lr}
  40a72e:	b082      	sub	sp, #8
  40a730:	af00      	add	r7, sp, #0
  40a732:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40a734:	687b      	ldr	r3, [r7, #4]
  40a736:	2b07      	cmp	r3, #7
  40a738:	d826      	bhi.n	40a788 <osc_is_ready+0x5c>
  40a73a:	a201      	add	r2, pc, #4	; (adr r2, 40a740 <osc_is_ready+0x14>)
  40a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a740:	0040a761 	.word	0x0040a761
  40a744:	0040a765 	.word	0x0040a765
  40a748:	0040a765 	.word	0x0040a765
  40a74c:	0040a777 	.word	0x0040a777
  40a750:	0040a777 	.word	0x0040a777
  40a754:	0040a777 	.word	0x0040a777
  40a758:	0040a777 	.word	0x0040a777
  40a75c:	0040a777 	.word	0x0040a777
	case OSC_SLCK_32K_RC:
		return 1;
  40a760:	2301      	movs	r3, #1
  40a762:	e012      	b.n	40a78a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40a764:	4b0b      	ldr	r3, [pc, #44]	; (40a794 <osc_is_ready+0x68>)
  40a766:	4798      	blx	r3
  40a768:	4603      	mov	r3, r0
  40a76a:	2b00      	cmp	r3, #0
  40a76c:	bf0c      	ite	eq
  40a76e:	2300      	moveq	r3, #0
  40a770:	2301      	movne	r3, #1
  40a772:	b2db      	uxtb	r3, r3
  40a774:	e009      	b.n	40a78a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40a776:	4b08      	ldr	r3, [pc, #32]	; (40a798 <osc_is_ready+0x6c>)
  40a778:	4798      	blx	r3
  40a77a:	4603      	mov	r3, r0
  40a77c:	2b00      	cmp	r3, #0
  40a77e:	bf0c      	ite	eq
  40a780:	2300      	moveq	r3, #0
  40a782:	2301      	movne	r3, #1
  40a784:	b2db      	uxtb	r3, r3
  40a786:	e000      	b.n	40a78a <osc_is_ready+0x5e>
	}

	return 0;
  40a788:	2300      	movs	r3, #0
}
  40a78a:	4618      	mov	r0, r3
  40a78c:	3708      	adds	r7, #8
  40a78e:	46bd      	mov	sp, r7
  40a790:	bd80      	pop	{r7, pc}
  40a792:	bf00      	nop
  40a794:	0040b301 	.word	0x0040b301
  40a798:	0040b41d 	.word	0x0040b41d

0040a79c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40a79c:	b480      	push	{r7}
  40a79e:	b083      	sub	sp, #12
  40a7a0:	af00      	add	r7, sp, #0
  40a7a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40a7a4:	687b      	ldr	r3, [r7, #4]
  40a7a6:	2b07      	cmp	r3, #7
  40a7a8:	d825      	bhi.n	40a7f6 <osc_get_rate+0x5a>
  40a7aa:	a201      	add	r2, pc, #4	; (adr r2, 40a7b0 <osc_get_rate+0x14>)
  40a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a7b0:	0040a7d1 	.word	0x0040a7d1
  40a7b4:	0040a7d7 	.word	0x0040a7d7
  40a7b8:	0040a7dd 	.word	0x0040a7dd
  40a7bc:	0040a7e3 	.word	0x0040a7e3
  40a7c0:	0040a7e7 	.word	0x0040a7e7
  40a7c4:	0040a7eb 	.word	0x0040a7eb
  40a7c8:	0040a7ef 	.word	0x0040a7ef
  40a7cc:	0040a7f3 	.word	0x0040a7f3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40a7d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40a7d4:	e010      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40a7d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a7da:	e00d      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40a7dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a7e0:	e00a      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40a7e2:	4b08      	ldr	r3, [pc, #32]	; (40a804 <osc_get_rate+0x68>)
  40a7e4:	e008      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40a7e6:	4b08      	ldr	r3, [pc, #32]	; (40a808 <osc_get_rate+0x6c>)
  40a7e8:	e006      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40a7ea:	4b08      	ldr	r3, [pc, #32]	; (40a80c <osc_get_rate+0x70>)
  40a7ec:	e004      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40a7ee:	4b07      	ldr	r3, [pc, #28]	; (40a80c <osc_get_rate+0x70>)
  40a7f0:	e002      	b.n	40a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40a7f2:	4b06      	ldr	r3, [pc, #24]	; (40a80c <osc_get_rate+0x70>)
  40a7f4:	e000      	b.n	40a7f8 <osc_get_rate+0x5c>
	}

	return 0;
  40a7f6:	2300      	movs	r3, #0
}
  40a7f8:	4618      	mov	r0, r3
  40a7fa:	370c      	adds	r7, #12
  40a7fc:	46bd      	mov	sp, r7
  40a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a802:	4770      	bx	lr
  40a804:	003d0900 	.word	0x003d0900
  40a808:	007a1200 	.word	0x007a1200
  40a80c:	00b71b00 	.word	0x00b71b00

0040a810 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40a810:	b580      	push	{r7, lr}
  40a812:	b082      	sub	sp, #8
  40a814:	af00      	add	r7, sp, #0
  40a816:	4603      	mov	r3, r0
  40a818:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40a81a:	bf00      	nop
  40a81c:	79fb      	ldrb	r3, [r7, #7]
  40a81e:	4618      	mov	r0, r3
  40a820:	4b05      	ldr	r3, [pc, #20]	; (40a838 <osc_wait_ready+0x28>)
  40a822:	4798      	blx	r3
  40a824:	4603      	mov	r3, r0
  40a826:	f083 0301 	eor.w	r3, r3, #1
  40a82a:	b2db      	uxtb	r3, r3
  40a82c:	2b00      	cmp	r3, #0
  40a82e:	d1f5      	bne.n	40a81c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40a830:	3708      	adds	r7, #8
  40a832:	46bd      	mov	sp, r7
  40a834:	bd80      	pop	{r7, pc}
  40a836:	bf00      	nop
  40a838:	0040a72d 	.word	0x0040a72d

0040a83c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40a83c:	b580      	push	{r7, lr}
  40a83e:	b086      	sub	sp, #24
  40a840:	af00      	add	r7, sp, #0
  40a842:	60f8      	str	r0, [r7, #12]
  40a844:	607a      	str	r2, [r7, #4]
  40a846:	603b      	str	r3, [r7, #0]
  40a848:	460b      	mov	r3, r1
  40a84a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40a84c:	7afb      	ldrb	r3, [r7, #11]
  40a84e:	4618      	mov	r0, r3
  40a850:	4b0d      	ldr	r3, [pc, #52]	; (40a888 <pll_config_init+0x4c>)
  40a852:	4798      	blx	r3
  40a854:	4602      	mov	r2, r0
  40a856:	687b      	ldr	r3, [r7, #4]
  40a858:	fbb2 f3f3 	udiv	r3, r2, r3
  40a85c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40a85e:	697b      	ldr	r3, [r7, #20]
  40a860:	683a      	ldr	r2, [r7, #0]
  40a862:	fb02 f303 	mul.w	r3, r2, r3
  40a866:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40a868:	683b      	ldr	r3, [r7, #0]
  40a86a:	3b01      	subs	r3, #1
  40a86c:	041a      	lsls	r2, r3, #16
  40a86e:	4b07      	ldr	r3, [pc, #28]	; (40a88c <pll_config_init+0x50>)
  40a870:	4013      	ands	r3, r2
  40a872:	687a      	ldr	r2, [r7, #4]
  40a874:	b2d2      	uxtb	r2, r2
  40a876:	4313      	orrs	r3, r2
  40a878:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40a87c:	68fb      	ldr	r3, [r7, #12]
  40a87e:	601a      	str	r2, [r3, #0]
}
  40a880:	3718      	adds	r7, #24
  40a882:	46bd      	mov	sp, r7
  40a884:	bd80      	pop	{r7, pc}
  40a886:	bf00      	nop
  40a888:	0040a79d 	.word	0x0040a79d
  40a88c:	07ff0000 	.word	0x07ff0000

0040a890 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40a890:	b580      	push	{r7, lr}
  40a892:	b082      	sub	sp, #8
  40a894:	af00      	add	r7, sp, #0
  40a896:	6078      	str	r0, [r7, #4]
  40a898:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40a89a:	683b      	ldr	r3, [r7, #0]
  40a89c:	2b00      	cmp	r3, #0
  40a89e:	d108      	bne.n	40a8b2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40a8a0:	4b08      	ldr	r3, [pc, #32]	; (40a8c4 <pll_enable+0x34>)
  40a8a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40a8a4:	4b08      	ldr	r3, [pc, #32]	; (40a8c8 <pll_enable+0x38>)
  40a8a6:	687a      	ldr	r2, [r7, #4]
  40a8a8:	6812      	ldr	r2, [r2, #0]
  40a8aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40a8ae:	629a      	str	r2, [r3, #40]	; 0x28
  40a8b0:	e005      	b.n	40a8be <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  40a8b2:	4b06      	ldr	r3, [pc, #24]	; (40a8cc <pll_enable+0x3c>)
  40a8b4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40a8b6:	4b04      	ldr	r3, [pc, #16]	; (40a8c8 <pll_enable+0x38>)
  40a8b8:	687a      	ldr	r2, [r7, #4]
  40a8ba:	6812      	ldr	r2, [r2, #0]
  40a8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  40a8be:	3708      	adds	r7, #8
  40a8c0:	46bd      	mov	sp, r7
  40a8c2:	bd80      	pop	{r7, pc}
  40a8c4:	0040b439 	.word	0x0040b439
  40a8c8:	400e0400 	.word	0x400e0400
  40a8cc:	0040b46d 	.word	0x0040b46d

0040a8d0 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40a8d0:	b580      	push	{r7, lr}
  40a8d2:	b082      	sub	sp, #8
  40a8d4:	af00      	add	r7, sp, #0
  40a8d6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40a8d8:	687b      	ldr	r3, [r7, #4]
  40a8da:	2b00      	cmp	r3, #0
  40a8dc:	d103      	bne.n	40a8e6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40a8de:	4b05      	ldr	r3, [pc, #20]	; (40a8f4 <pll_is_locked+0x24>)
  40a8e0:	4798      	blx	r3
  40a8e2:	4603      	mov	r3, r0
  40a8e4:	e002      	b.n	40a8ec <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40a8e6:	4b04      	ldr	r3, [pc, #16]	; (40a8f8 <pll_is_locked+0x28>)
  40a8e8:	4798      	blx	r3
  40a8ea:	4603      	mov	r3, r0
	}
}
  40a8ec:	4618      	mov	r0, r3
  40a8ee:	3708      	adds	r7, #8
  40a8f0:	46bd      	mov	sp, r7
  40a8f2:	bd80      	pop	{r7, pc}
  40a8f4:	0040b451 	.word	0x0040b451
  40a8f8:	0040b485 	.word	0x0040b485

0040a8fc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40a8fc:	b580      	push	{r7, lr}
  40a8fe:	b082      	sub	sp, #8
  40a900:	af00      	add	r7, sp, #0
  40a902:	4603      	mov	r3, r0
  40a904:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40a906:	79fb      	ldrb	r3, [r7, #7]
  40a908:	3b03      	subs	r3, #3
  40a90a:	2b04      	cmp	r3, #4
  40a90c:	d808      	bhi.n	40a920 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40a90e:	79fb      	ldrb	r3, [r7, #7]
  40a910:	4618      	mov	r0, r3
  40a912:	4b05      	ldr	r3, [pc, #20]	; (40a928 <pll_enable_source+0x2c>)
  40a914:	4798      	blx	r3
		osc_wait_ready(e_src);
  40a916:	79fb      	ldrb	r3, [r7, #7]
  40a918:	4618      	mov	r0, r3
  40a91a:	4b04      	ldr	r3, [pc, #16]	; (40a92c <pll_enable_source+0x30>)
  40a91c:	4798      	blx	r3
		break;
  40a91e:	e000      	b.n	40a922 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40a920:	bf00      	nop
	}
}
  40a922:	3708      	adds	r7, #8
  40a924:	46bd      	mov	sp, r7
  40a926:	bd80      	pop	{r7, pc}
  40a928:	0040a6a9 	.word	0x0040a6a9
  40a92c:	0040a811 	.word	0x0040a811

0040a930 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40a930:	b580      	push	{r7, lr}
  40a932:	b082      	sub	sp, #8
  40a934:	af00      	add	r7, sp, #0
  40a936:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40a938:	bf00      	nop
  40a93a:	6878      	ldr	r0, [r7, #4]
  40a93c:	4b04      	ldr	r3, [pc, #16]	; (40a950 <pll_wait_for_lock+0x20>)
  40a93e:	4798      	blx	r3
  40a940:	4603      	mov	r3, r0
  40a942:	2b00      	cmp	r3, #0
  40a944:	d0f9      	beq.n	40a93a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40a946:	2300      	movs	r3, #0
}
  40a948:	4618      	mov	r0, r3
  40a94a:	3708      	adds	r7, #8
  40a94c:	46bd      	mov	sp, r7
  40a94e:	bd80      	pop	{r7, pc}
  40a950:	0040a8d1 	.word	0x0040a8d1

0040a954 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40a954:	b580      	push	{r7, lr}
  40a956:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40a958:	2006      	movs	r0, #6
  40a95a:	4b04      	ldr	r3, [pc, #16]	; (40a96c <sysclk_get_main_hz+0x18>)
  40a95c:	4798      	blx	r3
  40a95e:	4602      	mov	r2, r0
  40a960:	4613      	mov	r3, r2
  40a962:	011b      	lsls	r3, r3, #4
  40a964:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40a966:	4618      	mov	r0, r3
  40a968:	bd80      	pop	{r7, pc}
  40a96a:	bf00      	nop
  40a96c:	0040a79d 	.word	0x0040a79d

0040a970 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40a970:	b580      	push	{r7, lr}
  40a972:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40a974:	4b02      	ldr	r3, [pc, #8]	; (40a980 <sysclk_get_cpu_hz+0x10>)
  40a976:	4798      	blx	r3
  40a978:	4603      	mov	r3, r0
  40a97a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40a97c:	4618      	mov	r0, r3
  40a97e:	bd80      	pop	{r7, pc}
  40a980:	0040a955 	.word	0x0040a955

0040a984 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  40a984:	b590      	push	{r4, r7, lr}
  40a986:	b083      	sub	sp, #12
  40a988:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  40a98a:	2006      	movs	r0, #6
  40a98c:	4b0c      	ldr	r3, [pc, #48]	; (40a9c0 <sysclk_enable_usb+0x3c>)
  40a98e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  40a990:	463b      	mov	r3, r7
  40a992:	4618      	mov	r0, r3
  40a994:	2106      	movs	r1, #6
  40a996:	2202      	movs	r2, #2
  40a998:	230c      	movs	r3, #12
  40a99a:	4c0a      	ldr	r4, [pc, #40]	; (40a9c4 <sysclk_enable_usb+0x40>)
  40a99c:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  40a99e:	463b      	mov	r3, r7
  40a9a0:	4618      	mov	r0, r3
  40a9a2:	2101      	movs	r1, #1
  40a9a4:	4b08      	ldr	r3, [pc, #32]	; (40a9c8 <sysclk_enable_usb+0x44>)
  40a9a6:	4798      	blx	r3
		pll_wait_for_lock(1);
  40a9a8:	2001      	movs	r0, #1
  40a9aa:	4b08      	ldr	r3, [pc, #32]	; (40a9cc <sysclk_enable_usb+0x48>)
  40a9ac:	4798      	blx	r3
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  40a9ae:	2001      	movs	r0, #1
  40a9b0:	4b07      	ldr	r3, [pc, #28]	; (40a9d0 <sysclk_enable_usb+0x4c>)
  40a9b2:	4798      	blx	r3
		pmc_enable_udpck();
  40a9b4:	4b07      	ldr	r3, [pc, #28]	; (40a9d4 <sysclk_enable_usb+0x50>)
  40a9b6:	4798      	blx	r3
		return;
  40a9b8:	bf00      	nop
	}
#endif
}
  40a9ba:	370c      	adds	r7, #12
  40a9bc:	46bd      	mov	sp, r7
  40a9be:	bd90      	pop	{r4, r7, pc}
  40a9c0:	0040a8fd 	.word	0x0040a8fd
  40a9c4:	0040a83d 	.word	0x0040a83d
  40a9c8:	0040a891 	.word	0x0040a891
  40a9cc:	0040a931 	.word	0x0040a931
  40a9d0:	0040b5a9 	.word	0x0040b5a9
  40a9d4:	0040b5d1 	.word	0x0040b5d1

0040a9d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40a9d8:	b590      	push	{r4, r7, lr}
  40a9da:	b083      	sub	sp, #12
  40a9dc:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40a9de:	4811      	ldr	r0, [pc, #68]	; (40aa24 <sysclk_init+0x4c>)
  40a9e0:	4b11      	ldr	r3, [pc, #68]	; (40aa28 <sysclk_init+0x50>)
  40a9e2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40a9e4:	2006      	movs	r0, #6
  40a9e6:	4b11      	ldr	r3, [pc, #68]	; (40aa2c <sysclk_init+0x54>)
  40a9e8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40a9ea:	1d3b      	adds	r3, r7, #4
  40a9ec:	4618      	mov	r0, r3
  40a9ee:	2106      	movs	r1, #6
  40a9f0:	2201      	movs	r2, #1
  40a9f2:	230f      	movs	r3, #15
  40a9f4:	4c0e      	ldr	r4, [pc, #56]	; (40aa30 <sysclk_init+0x58>)
  40a9f6:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40a9f8:	1d3b      	adds	r3, r7, #4
  40a9fa:	4618      	mov	r0, r3
  40a9fc:	2100      	movs	r1, #0
  40a9fe:	4b0d      	ldr	r3, [pc, #52]	; (40aa34 <sysclk_init+0x5c>)
  40aa00:	4798      	blx	r3
		pll_wait_for_lock(0);
  40aa02:	2000      	movs	r0, #0
  40aa04:	4b0c      	ldr	r3, [pc, #48]	; (40aa38 <sysclk_init+0x60>)
  40aa06:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40aa08:	2010      	movs	r0, #16
  40aa0a:	4b0c      	ldr	r3, [pc, #48]	; (40aa3c <sysclk_init+0x64>)
  40aa0c:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40aa0e:	4b0c      	ldr	r3, [pc, #48]	; (40aa40 <sysclk_init+0x68>)
  40aa10:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40aa12:	4b0c      	ldr	r3, [pc, #48]	; (40aa44 <sysclk_init+0x6c>)
  40aa14:	4798      	blx	r3
  40aa16:	4603      	mov	r3, r0
  40aa18:	4618      	mov	r0, r3
  40aa1a:	4b03      	ldr	r3, [pc, #12]	; (40aa28 <sysclk_init+0x50>)
  40aa1c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40aa1e:	370c      	adds	r7, #12
  40aa20:	46bd      	mov	sp, r7
  40aa22:	bd90      	pop	{r4, r7, pc}
  40aa24:	07270e00 	.word	0x07270e00
  40aa28:	0040bdf1 	.word	0x0040bdf1
  40aa2c:	0040a8fd 	.word	0x0040a8fd
  40aa30:	0040a83d 	.word	0x0040a83d
  40aa34:	0040a891 	.word	0x0040a891
  40aa38:	0040a931 	.word	0x0040a931
  40aa3c:	0040b245 	.word	0x0040b245
  40aa40:	0040bc55 	.word	0x0040bc55
  40aa44:	0040a971 	.word	0x0040a971

0040aa48 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40aa48:	b580      	push	{r7, lr}
  40aa4a:	b082      	sub	sp, #8
  40aa4c:	af00      	add	r7, sp, #0
  40aa4e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40aa50:	6878      	ldr	r0, [r7, #4]
  40aa52:	4b02      	ldr	r3, [pc, #8]	; (40aa5c <sysclk_enable_peripheral_clock+0x14>)
  40aa54:	4798      	blx	r3
}
  40aa56:	3708      	adds	r7, #8
  40aa58:	46bd      	mov	sp, r7
  40aa5a:	bd80      	pop	{r7, pc}
  40aa5c:	0040b4a1 	.word	0x0040b4a1

0040aa60 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40aa60:	b580      	push	{r7, lr}
  40aa62:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40aa64:	200b      	movs	r0, #11
  40aa66:	4b03      	ldr	r3, [pc, #12]	; (40aa74 <ioport_init+0x14>)
  40aa68:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40aa6a:	200c      	movs	r0, #12
  40aa6c:	4b01      	ldr	r3, [pc, #4]	; (40aa74 <ioport_init+0x14>)
  40aa6e:	4798      	blx	r3
	arch_ioport_init();
}
  40aa70:	bd80      	pop	{r7, pc}
  40aa72:	bf00      	nop
  40aa74:	0040aa49 	.word	0x0040aa49

0040aa78 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40aa78:	b580      	push	{r7, lr}
  40aa7a:	af00      	add	r7, sp, #0

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  40aa7c:	4b01      	ldr	r3, [pc, #4]	; (40aa84 <board_init+0xc>)
  40aa7e:	4798      	blx	r3

#endif  



}
  40aa80:	bd80      	pop	{r7, pc}
  40aa82:	bf00      	nop
  40aa84:	0040aa61 	.word	0x0040aa61

0040aa88 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40aa88:	b480      	push	{r7}
  40aa8a:	b085      	sub	sp, #20
  40aa8c:	af00      	add	r7, sp, #0
  40aa8e:	60f8      	str	r0, [r7, #12]
  40aa90:	60b9      	str	r1, [r7, #8]
  40aa92:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40aa94:	687b      	ldr	r3, [r7, #4]
  40aa96:	2b00      	cmp	r3, #0
  40aa98:	d003      	beq.n	40aaa2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40aa9a:	68fb      	ldr	r3, [r7, #12]
  40aa9c:	68ba      	ldr	r2, [r7, #8]
  40aa9e:	665a      	str	r2, [r3, #100]	; 0x64
  40aaa0:	e002      	b.n	40aaa8 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40aaa2:	68fb      	ldr	r3, [r7, #12]
  40aaa4:	68ba      	ldr	r2, [r7, #8]
  40aaa6:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40aaa8:	3714      	adds	r7, #20
  40aaaa:	46bd      	mov	sp, r7
  40aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
  40aab0:	4770      	bx	lr
  40aab2:	bf00      	nop

0040aab4 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  40aab4:	b480      	push	{r7}
  40aab6:	b085      	sub	sp, #20
  40aab8:	af00      	add	r7, sp, #0
  40aaba:	60f8      	str	r0, [r7, #12]
  40aabc:	60b9      	str	r1, [r7, #8]
  40aabe:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40aac0:	68fb      	ldr	r3, [r7, #12]
  40aac2:	68ba      	ldr	r2, [r7, #8]
  40aac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40aac8:	687b      	ldr	r3, [r7, #4]
  40aaca:	005b      	lsls	r3, r3, #1
  40aacc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40aad0:	fbb2 f3f3 	udiv	r3, r2, r3
  40aad4:	3b01      	subs	r3, #1
  40aad6:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40aada:	68fb      	ldr	r3, [r7, #12]
  40aadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  40aae0:	3714      	adds	r7, #20
  40aae2:	46bd      	mov	sp, r7
  40aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40aae8:	4770      	bx	lr
  40aaea:	bf00      	nop

0040aaec <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40aaec:	b480      	push	{r7}
  40aaee:	b087      	sub	sp, #28
  40aaf0:	af00      	add	r7, sp, #0
  40aaf2:	60f8      	str	r0, [r7, #12]
  40aaf4:	60b9      	str	r1, [r7, #8]
  40aaf6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40aaf8:	68fb      	ldr	r3, [r7, #12]
  40aafa:	687a      	ldr	r2, [r7, #4]
  40aafc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  40aafe:	68bb      	ldr	r3, [r7, #8]
  40ab00:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40ab04:	d04a      	beq.n	40ab9c <pio_set_peripheral+0xb0>
  40ab06:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40ab0a:	d808      	bhi.n	40ab1e <pio_set_peripheral+0x32>
  40ab0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40ab10:	d016      	beq.n	40ab40 <pio_set_peripheral+0x54>
  40ab12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40ab16:	d02c      	beq.n	40ab72 <pio_set_peripheral+0x86>
  40ab18:	2b00      	cmp	r3, #0
  40ab1a:	d069      	beq.n	40abf0 <pio_set_peripheral+0x104>
  40ab1c:	e064      	b.n	40abe8 <pio_set_peripheral+0xfc>
  40ab1e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40ab22:	d065      	beq.n	40abf0 <pio_set_peripheral+0x104>
  40ab24:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40ab28:	d803      	bhi.n	40ab32 <pio_set_peripheral+0x46>
  40ab2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40ab2e:	d04a      	beq.n	40abc6 <pio_set_peripheral+0xda>
  40ab30:	e05a      	b.n	40abe8 <pio_set_peripheral+0xfc>
  40ab32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40ab36:	d05b      	beq.n	40abf0 <pio_set_peripheral+0x104>
  40ab38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40ab3c:	d058      	beq.n	40abf0 <pio_set_peripheral+0x104>
  40ab3e:	e053      	b.n	40abe8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40ab40:	68fb      	ldr	r3, [r7, #12]
  40ab42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40ab44:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40ab46:	68fb      	ldr	r3, [r7, #12]
  40ab48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40ab4a:	687b      	ldr	r3, [r7, #4]
  40ab4c:	43d9      	mvns	r1, r3
  40ab4e:	697b      	ldr	r3, [r7, #20]
  40ab50:	400b      	ands	r3, r1
  40ab52:	401a      	ands	r2, r3
  40ab54:	68fb      	ldr	r3, [r7, #12]
  40ab56:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40ab58:	68fb      	ldr	r3, [r7, #12]
  40ab5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40ab5c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40ab5e:	68fb      	ldr	r3, [r7, #12]
  40ab60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40ab62:	687b      	ldr	r3, [r7, #4]
  40ab64:	43d9      	mvns	r1, r3
  40ab66:	697b      	ldr	r3, [r7, #20]
  40ab68:	400b      	ands	r3, r1
  40ab6a:	401a      	ands	r2, r3
  40ab6c:	68fb      	ldr	r3, [r7, #12]
  40ab6e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40ab70:	e03a      	b.n	40abe8 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40ab72:	68fb      	ldr	r3, [r7, #12]
  40ab74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40ab76:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40ab78:	687a      	ldr	r2, [r7, #4]
  40ab7a:	697b      	ldr	r3, [r7, #20]
  40ab7c:	431a      	orrs	r2, r3
  40ab7e:	68fb      	ldr	r3, [r7, #12]
  40ab80:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40ab82:	68fb      	ldr	r3, [r7, #12]
  40ab84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40ab86:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40ab88:	68fb      	ldr	r3, [r7, #12]
  40ab8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40ab8c:	687b      	ldr	r3, [r7, #4]
  40ab8e:	43d9      	mvns	r1, r3
  40ab90:	697b      	ldr	r3, [r7, #20]
  40ab92:	400b      	ands	r3, r1
  40ab94:	401a      	ands	r2, r3
  40ab96:	68fb      	ldr	r3, [r7, #12]
  40ab98:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40ab9a:	e025      	b.n	40abe8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40ab9c:	68fb      	ldr	r3, [r7, #12]
  40ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40aba0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40aba2:	68fb      	ldr	r3, [r7, #12]
  40aba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40aba6:	687b      	ldr	r3, [r7, #4]
  40aba8:	43d9      	mvns	r1, r3
  40abaa:	697b      	ldr	r3, [r7, #20]
  40abac:	400b      	ands	r3, r1
  40abae:	401a      	ands	r2, r3
  40abb0:	68fb      	ldr	r3, [r7, #12]
  40abb2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40abb4:	68fb      	ldr	r3, [r7, #12]
  40abb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40abb8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40abba:	687a      	ldr	r2, [r7, #4]
  40abbc:	697b      	ldr	r3, [r7, #20]
  40abbe:	431a      	orrs	r2, r3
  40abc0:	68fb      	ldr	r3, [r7, #12]
  40abc2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40abc4:	e010      	b.n	40abe8 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40abc6:	68fb      	ldr	r3, [r7, #12]
  40abc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40abca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40abcc:	687a      	ldr	r2, [r7, #4]
  40abce:	697b      	ldr	r3, [r7, #20]
  40abd0:	431a      	orrs	r2, r3
  40abd2:	68fb      	ldr	r3, [r7, #12]
  40abd4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40abd6:	68fb      	ldr	r3, [r7, #12]
  40abd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40abda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40abdc:	687a      	ldr	r2, [r7, #4]
  40abde:	697b      	ldr	r3, [r7, #20]
  40abe0:	431a      	orrs	r2, r3
  40abe2:	68fb      	ldr	r3, [r7, #12]
  40abe4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40abe6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40abe8:	68fb      	ldr	r3, [r7, #12]
  40abea:	687a      	ldr	r2, [r7, #4]
  40abec:	605a      	str	r2, [r3, #4]
  40abee:	e000      	b.n	40abf2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40abf0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40abf2:	371c      	adds	r7, #28
  40abf4:	46bd      	mov	sp, r7
  40abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40abfa:	4770      	bx	lr

0040abfc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40abfc:	b580      	push	{r7, lr}
  40abfe:	b084      	sub	sp, #16
  40ac00:	af00      	add	r7, sp, #0
  40ac02:	60f8      	str	r0, [r7, #12]
  40ac04:	60b9      	str	r1, [r7, #8]
  40ac06:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40ac08:	68f8      	ldr	r0, [r7, #12]
  40ac0a:	68b9      	ldr	r1, [r7, #8]
  40ac0c:	4b18      	ldr	r3, [pc, #96]	; (40ac70 <pio_set_input+0x74>)
  40ac0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40ac10:	687b      	ldr	r3, [r7, #4]
  40ac12:	f003 0301 	and.w	r3, r3, #1
  40ac16:	68f8      	ldr	r0, [r7, #12]
  40ac18:	68b9      	ldr	r1, [r7, #8]
  40ac1a:	461a      	mov	r2, r3
  40ac1c:	4b15      	ldr	r3, [pc, #84]	; (40ac74 <pio_set_input+0x78>)
  40ac1e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40ac20:	687b      	ldr	r3, [r7, #4]
  40ac22:	f003 030a 	and.w	r3, r3, #10
  40ac26:	2b00      	cmp	r3, #0
  40ac28:	d003      	beq.n	40ac32 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40ac2a:	68fb      	ldr	r3, [r7, #12]
  40ac2c:	68ba      	ldr	r2, [r7, #8]
  40ac2e:	621a      	str	r2, [r3, #32]
  40ac30:	e002      	b.n	40ac38 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40ac32:	68fb      	ldr	r3, [r7, #12]
  40ac34:	68ba      	ldr	r2, [r7, #8]
  40ac36:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40ac38:	687b      	ldr	r3, [r7, #4]
  40ac3a:	f003 0302 	and.w	r3, r3, #2
  40ac3e:	2b00      	cmp	r3, #0
  40ac40:	d004      	beq.n	40ac4c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40ac42:	68fb      	ldr	r3, [r7, #12]
  40ac44:	68ba      	ldr	r2, [r7, #8]
  40ac46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40ac4a:	e008      	b.n	40ac5e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40ac4c:	687b      	ldr	r3, [r7, #4]
  40ac4e:	f003 0308 	and.w	r3, r3, #8
  40ac52:	2b00      	cmp	r3, #0
  40ac54:	d003      	beq.n	40ac5e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40ac56:	68fb      	ldr	r3, [r7, #12]
  40ac58:	68ba      	ldr	r2, [r7, #8]
  40ac5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40ac5e:	68fb      	ldr	r3, [r7, #12]
  40ac60:	68ba      	ldr	r2, [r7, #8]
  40ac62:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40ac64:	68fb      	ldr	r3, [r7, #12]
  40ac66:	68ba      	ldr	r2, [r7, #8]
  40ac68:	601a      	str	r2, [r3, #0]
}
  40ac6a:	3710      	adds	r7, #16
  40ac6c:	46bd      	mov	sp, r7
  40ac6e:	bd80      	pop	{r7, pc}
  40ac70:	0040ad69 	.word	0x0040ad69
  40ac74:	0040aa89 	.word	0x0040aa89

0040ac78 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40ac78:	b580      	push	{r7, lr}
  40ac7a:	b084      	sub	sp, #16
  40ac7c:	af00      	add	r7, sp, #0
  40ac7e:	60f8      	str	r0, [r7, #12]
  40ac80:	60b9      	str	r1, [r7, #8]
  40ac82:	607a      	str	r2, [r7, #4]
  40ac84:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40ac86:	68f8      	ldr	r0, [r7, #12]
  40ac88:	68b9      	ldr	r1, [r7, #8]
  40ac8a:	4b12      	ldr	r3, [pc, #72]	; (40acd4 <pio_set_output+0x5c>)
  40ac8c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40ac8e:	68f8      	ldr	r0, [r7, #12]
  40ac90:	68b9      	ldr	r1, [r7, #8]
  40ac92:	69ba      	ldr	r2, [r7, #24]
  40ac94:	4b10      	ldr	r3, [pc, #64]	; (40acd8 <pio_set_output+0x60>)
  40ac96:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40ac98:	683b      	ldr	r3, [r7, #0]
  40ac9a:	2b00      	cmp	r3, #0
  40ac9c:	d003      	beq.n	40aca6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40ac9e:	68fb      	ldr	r3, [r7, #12]
  40aca0:	68ba      	ldr	r2, [r7, #8]
  40aca2:	651a      	str	r2, [r3, #80]	; 0x50
  40aca4:	e002      	b.n	40acac <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40aca6:	68fb      	ldr	r3, [r7, #12]
  40aca8:	68ba      	ldr	r2, [r7, #8]
  40acaa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40acac:	687b      	ldr	r3, [r7, #4]
  40acae:	2b00      	cmp	r3, #0
  40acb0:	d003      	beq.n	40acba <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40acb2:	68fb      	ldr	r3, [r7, #12]
  40acb4:	68ba      	ldr	r2, [r7, #8]
  40acb6:	631a      	str	r2, [r3, #48]	; 0x30
  40acb8:	e002      	b.n	40acc0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40acba:	68fb      	ldr	r3, [r7, #12]
  40acbc:	68ba      	ldr	r2, [r7, #8]
  40acbe:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40acc0:	68fb      	ldr	r3, [r7, #12]
  40acc2:	68ba      	ldr	r2, [r7, #8]
  40acc4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40acc6:	68fb      	ldr	r3, [r7, #12]
  40acc8:	68ba      	ldr	r2, [r7, #8]
  40acca:	601a      	str	r2, [r3, #0]
}
  40accc:	3710      	adds	r7, #16
  40acce:	46bd      	mov	sp, r7
  40acd0:	bd80      	pop	{r7, pc}
  40acd2:	bf00      	nop
  40acd4:	0040ad69 	.word	0x0040ad69
  40acd8:	0040aa89 	.word	0x0040aa89

0040acdc <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40acdc:	b480      	push	{r7}
  40acde:	b085      	sub	sp, #20
  40ace0:	af00      	add	r7, sp, #0
  40ace2:	60f8      	str	r0, [r7, #12]
  40ace4:	60b9      	str	r1, [r7, #8]
  40ace6:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40ace8:	687b      	ldr	r3, [r7, #4]
  40acea:	f003 0310 	and.w	r3, r3, #16
  40acee:	2b00      	cmp	r3, #0
  40acf0:	d020      	beq.n	40ad34 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40acf2:	68fb      	ldr	r3, [r7, #12]
  40acf4:	68ba      	ldr	r2, [r7, #8]
  40acf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40acfa:	687b      	ldr	r3, [r7, #4]
  40acfc:	f003 0320 	and.w	r3, r3, #32
  40ad00:	2b00      	cmp	r3, #0
  40ad02:	d004      	beq.n	40ad0e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40ad04:	68fb      	ldr	r3, [r7, #12]
  40ad06:	68ba      	ldr	r2, [r7, #8]
  40ad08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40ad0c:	e003      	b.n	40ad16 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40ad0e:	68fb      	ldr	r3, [r7, #12]
  40ad10:	68ba      	ldr	r2, [r7, #8]
  40ad12:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40ad16:	687b      	ldr	r3, [r7, #4]
  40ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40ad1c:	2b00      	cmp	r3, #0
  40ad1e:	d004      	beq.n	40ad2a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40ad20:	68fb      	ldr	r3, [r7, #12]
  40ad22:	68ba      	ldr	r2, [r7, #8]
  40ad24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  40ad28:	e008      	b.n	40ad3c <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40ad2a:	68fb      	ldr	r3, [r7, #12]
  40ad2c:	68ba      	ldr	r2, [r7, #8]
  40ad2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  40ad32:	e003      	b.n	40ad3c <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40ad34:	68fb      	ldr	r3, [r7, #12]
  40ad36:	68ba      	ldr	r2, [r7, #8]
  40ad38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  40ad3c:	3714      	adds	r7, #20
  40ad3e:	46bd      	mov	sp, r7
  40ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad44:	4770      	bx	lr
  40ad46:	bf00      	nop

0040ad48 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40ad48:	b480      	push	{r7}
  40ad4a:	b083      	sub	sp, #12
  40ad4c:	af00      	add	r7, sp, #0
  40ad4e:	6078      	str	r0, [r7, #4]
  40ad50:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  40ad52:	687b      	ldr	r3, [r7, #4]
  40ad54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40ad56:	687b      	ldr	r3, [r7, #4]
  40ad58:	683a      	ldr	r2, [r7, #0]
  40ad5a:	641a      	str	r2, [r3, #64]	; 0x40
}
  40ad5c:	370c      	adds	r7, #12
  40ad5e:	46bd      	mov	sp, r7
  40ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad64:	4770      	bx	lr
  40ad66:	bf00      	nop

0040ad68 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40ad68:	b480      	push	{r7}
  40ad6a:	b083      	sub	sp, #12
  40ad6c:	af00      	add	r7, sp, #0
  40ad6e:	6078      	str	r0, [r7, #4]
  40ad70:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40ad72:	687b      	ldr	r3, [r7, #4]
  40ad74:	683a      	ldr	r2, [r7, #0]
  40ad76:	645a      	str	r2, [r3, #68]	; 0x44
}
  40ad78:	370c      	adds	r7, #12
  40ad7a:	46bd      	mov	sp, r7
  40ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad80:	4770      	bx	lr
  40ad82:	bf00      	nop

0040ad84 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40ad84:	b480      	push	{r7}
  40ad86:	b083      	sub	sp, #12
  40ad88:	af00      	add	r7, sp, #0
  40ad8a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40ad8c:	687b      	ldr	r3, [r7, #4]
  40ad8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40ad90:	4618      	mov	r0, r3
  40ad92:	370c      	adds	r7, #12
  40ad94:	46bd      	mov	sp, r7
  40ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad9a:	4770      	bx	lr

0040ad9c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40ad9c:	b480      	push	{r7}
  40ad9e:	b083      	sub	sp, #12
  40ada0:	af00      	add	r7, sp, #0
  40ada2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40ada4:	687b      	ldr	r3, [r7, #4]
  40ada6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40ada8:	4618      	mov	r0, r3
  40adaa:	370c      	adds	r7, #12
  40adac:	46bd      	mov	sp, r7
  40adae:	f85d 7b04 	ldr.w	r7, [sp], #4
  40adb2:	4770      	bx	lr

0040adb4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  40adb4:	b580      	push	{r7, lr}
  40adb6:	b084      	sub	sp, #16
  40adb8:	af00      	add	r7, sp, #0
  40adba:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40adbc:	6878      	ldr	r0, [r7, #4]
  40adbe:	4b07      	ldr	r3, [pc, #28]	; (40addc <pio_set_pin_high+0x28>)
  40adc0:	4798      	blx	r3
  40adc2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40adc4:	687b      	ldr	r3, [r7, #4]
  40adc6:	f003 031f 	and.w	r3, r3, #31
  40adca:	2201      	movs	r2, #1
  40adcc:	fa02 f303 	lsl.w	r3, r2, r3
  40add0:	461a      	mov	r2, r3
  40add2:	68fb      	ldr	r3, [r7, #12]
  40add4:	631a      	str	r2, [r3, #48]	; 0x30
}
  40add6:	3710      	adds	r7, #16
  40add8:	46bd      	mov	sp, r7
  40adda:	bd80      	pop	{r7, pc}
  40addc:	0040b019 	.word	0x0040b019

0040ade0 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40ade0:	b580      	push	{r7, lr}
  40ade2:	b084      	sub	sp, #16
  40ade4:	af00      	add	r7, sp, #0
  40ade6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40ade8:	6878      	ldr	r0, [r7, #4]
  40adea:	4b07      	ldr	r3, [pc, #28]	; (40ae08 <pio_set_pin_low+0x28>)
  40adec:	4798      	blx	r3
  40adee:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40adf0:	687b      	ldr	r3, [r7, #4]
  40adf2:	f003 031f 	and.w	r3, r3, #31
  40adf6:	2201      	movs	r2, #1
  40adf8:	fa02 f303 	lsl.w	r3, r2, r3
  40adfc:	461a      	mov	r2, r3
  40adfe:	68fb      	ldr	r3, [r7, #12]
  40ae00:	635a      	str	r2, [r3, #52]	; 0x34
}
  40ae02:	3710      	adds	r7, #16
  40ae04:	46bd      	mov	sp, r7
  40ae06:	bd80      	pop	{r7, pc}
  40ae08:	0040b019 	.word	0x0040b019

0040ae0c <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  40ae0c:	b580      	push	{r7, lr}
  40ae0e:	b084      	sub	sp, #16
  40ae10:	af00      	add	r7, sp, #0
  40ae12:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40ae14:	6878      	ldr	r0, [r7, #4]
  40ae16:	4b12      	ldr	r3, [pc, #72]	; (40ae60 <pio_toggle_pin+0x54>)
  40ae18:	4798      	blx	r3
  40ae1a:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  40ae1c:	68fb      	ldr	r3, [r7, #12]
  40ae1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40ae20:	687b      	ldr	r3, [r7, #4]
  40ae22:	f003 031f 	and.w	r3, r3, #31
  40ae26:	2101      	movs	r1, #1
  40ae28:	fa01 f303 	lsl.w	r3, r1, r3
  40ae2c:	4013      	ands	r3, r2
  40ae2e:	2b00      	cmp	r3, #0
  40ae30:	d009      	beq.n	40ae46 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40ae32:	687b      	ldr	r3, [r7, #4]
  40ae34:	f003 031f 	and.w	r3, r3, #31
  40ae38:	2201      	movs	r2, #1
  40ae3a:	fa02 f303 	lsl.w	r3, r2, r3
  40ae3e:	461a      	mov	r2, r3
  40ae40:	68fb      	ldr	r3, [r7, #12]
  40ae42:	635a      	str	r2, [r3, #52]	; 0x34
  40ae44:	e008      	b.n	40ae58 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40ae46:	687b      	ldr	r3, [r7, #4]
  40ae48:	f003 031f 	and.w	r3, r3, #31
  40ae4c:	2201      	movs	r2, #1
  40ae4e:	fa02 f303 	lsl.w	r3, r2, r3
  40ae52:	461a      	mov	r2, r3
  40ae54:	68fb      	ldr	r3, [r7, #12]
  40ae56:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  40ae58:	3710      	adds	r7, #16
  40ae5a:	46bd      	mov	sp, r7
  40ae5c:	bd80      	pop	{r7, pc}
  40ae5e:	bf00      	nop
  40ae60:	0040b019 	.word	0x0040b019

0040ae64 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40ae64:	b590      	push	{r4, r7, lr}
  40ae66:	b087      	sub	sp, #28
  40ae68:	af02      	add	r7, sp, #8
  40ae6a:	6078      	str	r0, [r7, #4]
  40ae6c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40ae6e:	6878      	ldr	r0, [r7, #4]
  40ae70:	4b64      	ldr	r3, [pc, #400]	; (40b004 <pio_configure_pin+0x1a0>)
  40ae72:	4798      	blx	r3
  40ae74:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40ae76:	683b      	ldr	r3, [r7, #0]
  40ae78:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40ae7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40ae80:	d06b      	beq.n	40af5a <pio_configure_pin+0xf6>
  40ae82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40ae86:	d809      	bhi.n	40ae9c <pio_configure_pin+0x38>
  40ae88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40ae8c:	d02d      	beq.n	40aeea <pio_configure_pin+0x86>
  40ae8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40ae92:	d046      	beq.n	40af22 <pio_configure_pin+0xbe>
  40ae94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40ae98:	d00b      	beq.n	40aeb2 <pio_configure_pin+0x4e>
  40ae9a:	e0ac      	b.n	40aff6 <pio_configure_pin+0x192>
  40ae9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40aea0:	f000 8083 	beq.w	40afaa <pio_configure_pin+0x146>
  40aea4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40aea8:	d07f      	beq.n	40afaa <pio_configure_pin+0x146>
  40aeaa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40aeae:	d070      	beq.n	40af92 <pio_configure_pin+0x12e>
  40aeb0:	e0a1      	b.n	40aff6 <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40aeb2:	687b      	ldr	r3, [r7, #4]
  40aeb4:	f003 031f 	and.w	r3, r3, #31
  40aeb8:	2201      	movs	r2, #1
  40aeba:	fa02 f303 	lsl.w	r3, r2, r3
  40aebe:	68f8      	ldr	r0, [r7, #12]
  40aec0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40aec4:	461a      	mov	r2, r3
  40aec6:	4b50      	ldr	r3, [pc, #320]	; (40b008 <pio_configure_pin+0x1a4>)
  40aec8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40aeca:	687b      	ldr	r3, [r7, #4]
  40aecc:	f003 031f 	and.w	r3, r3, #31
  40aed0:	2201      	movs	r2, #1
  40aed2:	fa02 f303 	lsl.w	r3, r2, r3
  40aed6:	461a      	mov	r2, r3
  40aed8:	683b      	ldr	r3, [r7, #0]
  40aeda:	f003 0301 	and.w	r3, r3, #1
  40aede:	68f8      	ldr	r0, [r7, #12]
  40aee0:	4611      	mov	r1, r2
  40aee2:	461a      	mov	r2, r3
  40aee4:	4b49      	ldr	r3, [pc, #292]	; (40b00c <pio_configure_pin+0x1a8>)
  40aee6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40aee8:	e087      	b.n	40affa <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40aeea:	687b      	ldr	r3, [r7, #4]
  40aeec:	f003 031f 	and.w	r3, r3, #31
  40aef0:	2201      	movs	r2, #1
  40aef2:	fa02 f303 	lsl.w	r3, r2, r3
  40aef6:	68f8      	ldr	r0, [r7, #12]
  40aef8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40aefc:	461a      	mov	r2, r3
  40aefe:	4b42      	ldr	r3, [pc, #264]	; (40b008 <pio_configure_pin+0x1a4>)
  40af00:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40af02:	687b      	ldr	r3, [r7, #4]
  40af04:	f003 031f 	and.w	r3, r3, #31
  40af08:	2201      	movs	r2, #1
  40af0a:	fa02 f303 	lsl.w	r3, r2, r3
  40af0e:	461a      	mov	r2, r3
  40af10:	683b      	ldr	r3, [r7, #0]
  40af12:	f003 0301 	and.w	r3, r3, #1
  40af16:	68f8      	ldr	r0, [r7, #12]
  40af18:	4611      	mov	r1, r2
  40af1a:	461a      	mov	r2, r3
  40af1c:	4b3b      	ldr	r3, [pc, #236]	; (40b00c <pio_configure_pin+0x1a8>)
  40af1e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40af20:	e06b      	b.n	40affa <pio_configure_pin+0x196>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40af22:	687b      	ldr	r3, [r7, #4]
  40af24:	f003 031f 	and.w	r3, r3, #31
  40af28:	2201      	movs	r2, #1
  40af2a:	fa02 f303 	lsl.w	r3, r2, r3
  40af2e:	68f8      	ldr	r0, [r7, #12]
  40af30:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40af34:	461a      	mov	r2, r3
  40af36:	4b34      	ldr	r3, [pc, #208]	; (40b008 <pio_configure_pin+0x1a4>)
  40af38:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40af3a:	687b      	ldr	r3, [r7, #4]
  40af3c:	f003 031f 	and.w	r3, r3, #31
  40af40:	2201      	movs	r2, #1
  40af42:	fa02 f303 	lsl.w	r3, r2, r3
  40af46:	461a      	mov	r2, r3
  40af48:	683b      	ldr	r3, [r7, #0]
  40af4a:	f003 0301 	and.w	r3, r3, #1
  40af4e:	68f8      	ldr	r0, [r7, #12]
  40af50:	4611      	mov	r1, r2
  40af52:	461a      	mov	r2, r3
  40af54:	4b2d      	ldr	r3, [pc, #180]	; (40b00c <pio_configure_pin+0x1a8>)
  40af56:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40af58:	e04f      	b.n	40affa <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40af5a:	687b      	ldr	r3, [r7, #4]
  40af5c:	f003 031f 	and.w	r3, r3, #31
  40af60:	2201      	movs	r2, #1
  40af62:	fa02 f303 	lsl.w	r3, r2, r3
  40af66:	68f8      	ldr	r0, [r7, #12]
  40af68:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40af6c:	461a      	mov	r2, r3
  40af6e:	4b26      	ldr	r3, [pc, #152]	; (40b008 <pio_configure_pin+0x1a4>)
  40af70:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40af72:	687b      	ldr	r3, [r7, #4]
  40af74:	f003 031f 	and.w	r3, r3, #31
  40af78:	2201      	movs	r2, #1
  40af7a:	fa02 f303 	lsl.w	r3, r2, r3
  40af7e:	461a      	mov	r2, r3
  40af80:	683b      	ldr	r3, [r7, #0]
  40af82:	f003 0301 	and.w	r3, r3, #1
  40af86:	68f8      	ldr	r0, [r7, #12]
  40af88:	4611      	mov	r1, r2
  40af8a:	461a      	mov	r2, r3
  40af8c:	4b1f      	ldr	r3, [pc, #124]	; (40b00c <pio_configure_pin+0x1a8>)
  40af8e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40af90:	e033      	b.n	40affa <pio_configure_pin+0x196>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40af92:	687b      	ldr	r3, [r7, #4]
  40af94:	f003 031f 	and.w	r3, r3, #31
  40af98:	2201      	movs	r2, #1
  40af9a:	fa02 f303 	lsl.w	r3, r2, r3
  40af9e:	68f8      	ldr	r0, [r7, #12]
  40afa0:	4619      	mov	r1, r3
  40afa2:	683a      	ldr	r2, [r7, #0]
  40afa4:	4b1a      	ldr	r3, [pc, #104]	; (40b010 <pio_configure_pin+0x1ac>)
  40afa6:	4798      	blx	r3
		break;
  40afa8:	e027      	b.n	40affa <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40afaa:	687b      	ldr	r3, [r7, #4]
  40afac:	f003 031f 	and.w	r3, r3, #31
  40afb0:	2201      	movs	r2, #1
  40afb2:	fa02 f303 	lsl.w	r3, r2, r3
  40afb6:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40afb8:	683b      	ldr	r3, [r7, #0]
  40afba:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40afbe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40afc2:	bf14      	ite	ne
  40afc4:	2300      	movne	r3, #0
  40afc6:	2301      	moveq	r3, #1
  40afc8:	b2db      	uxtb	r3, r3
  40afca:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40afcc:	683b      	ldr	r3, [r7, #0]
  40afce:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40afd2:	2b00      	cmp	r3, #0
  40afd4:	bf0c      	ite	eq
  40afd6:	2300      	moveq	r3, #0
  40afd8:	2301      	movne	r3, #1
  40afda:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40afdc:	6838      	ldr	r0, [r7, #0]
  40afde:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40afe2:	2800      	cmp	r0, #0
  40afe4:	bf0c      	ite	eq
  40afe6:	2000      	moveq	r0, #0
  40afe8:	2001      	movne	r0, #1
  40afea:	b2c0      	uxtb	r0, r0
  40afec:	9000      	str	r0, [sp, #0]
  40afee:	68f8      	ldr	r0, [r7, #12]
  40aff0:	4c08      	ldr	r4, [pc, #32]	; (40b014 <pio_configure_pin+0x1b0>)
  40aff2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40aff4:	e001      	b.n	40affa <pio_configure_pin+0x196>

	default:
		return 0;
  40aff6:	2300      	movs	r3, #0
  40aff8:	e000      	b.n	40affc <pio_configure_pin+0x198>
	}

	return 1;
  40affa:	2301      	movs	r3, #1
}
  40affc:	4618      	mov	r0, r3
  40affe:	3714      	adds	r7, #20
  40b000:	46bd      	mov	sp, r7
  40b002:	bd90      	pop	{r4, r7, pc}
  40b004:	0040b019 	.word	0x0040b019
  40b008:	0040aaed 	.word	0x0040aaed
  40b00c:	0040aa89 	.word	0x0040aa89
  40b010:	0040abfd 	.word	0x0040abfd
  40b014:	0040ac79 	.word	0x0040ac79

0040b018 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40b018:	b480      	push	{r7}
  40b01a:	b085      	sub	sp, #20
  40b01c:	af00      	add	r7, sp, #0
  40b01e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40b020:	687b      	ldr	r3, [r7, #4]
  40b022:	095b      	lsrs	r3, r3, #5
  40b024:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40b028:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40b02c:	025b      	lsls	r3, r3, #9
  40b02e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40b030:	68fb      	ldr	r3, [r7, #12]
}
  40b032:	4618      	mov	r0, r3
  40b034:	3714      	adds	r7, #20
  40b036:	46bd      	mov	sp, r7
  40b038:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b03c:	4770      	bx	lr
  40b03e:	bf00      	nop

0040b040 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  40b040:	b480      	push	{r7}
  40b042:	b085      	sub	sp, #20
  40b044:	af00      	add	r7, sp, #0
  40b046:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  40b048:	687b      	ldr	r3, [r7, #4]
  40b04a:	095b      	lsrs	r3, r3, #5
  40b04c:	330b      	adds	r3, #11
  40b04e:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  40b050:	68fb      	ldr	r3, [r7, #12]
}
  40b052:	4618      	mov	r0, r3
  40b054:	3714      	adds	r7, #20
  40b056:	46bd      	mov	sp, r7
  40b058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b05c:	4770      	bx	lr
  40b05e:	bf00      	nop

0040b060 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  40b060:	b480      	push	{r7}
  40b062:	b085      	sub	sp, #20
  40b064:	af00      	add	r7, sp, #0
  40b066:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  40b068:	687b      	ldr	r3, [r7, #4]
  40b06a:	f003 031f 	and.w	r3, r3, #31
  40b06e:	2201      	movs	r2, #1
  40b070:	fa02 f303 	lsl.w	r3, r2, r3
  40b074:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  40b076:	68fb      	ldr	r3, [r7, #12]
}
  40b078:	4618      	mov	r0, r3
  40b07a:	3714      	adds	r7, #20
  40b07c:	46bd      	mov	sp, r7
  40b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b082:	4770      	bx	lr

0040b084 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40b084:	b580      	push	{r7, lr}
  40b086:	b084      	sub	sp, #16
  40b088:	af00      	add	r7, sp, #0
  40b08a:	6078      	str	r0, [r7, #4]
  40b08c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40b08e:	6878      	ldr	r0, [r7, #4]
  40b090:	4b2a      	ldr	r3, [pc, #168]	; (40b13c <pio_handler_process+0xb8>)
  40b092:	4798      	blx	r3
  40b094:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40b096:	6878      	ldr	r0, [r7, #4]
  40b098:	4b29      	ldr	r3, [pc, #164]	; (40b140 <pio_handler_process+0xbc>)
  40b09a:	4798      	blx	r3
  40b09c:	4603      	mov	r3, r0
  40b09e:	68fa      	ldr	r2, [r7, #12]
  40b0a0:	4013      	ands	r3, r2
  40b0a2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40b0a4:	68fb      	ldr	r3, [r7, #12]
  40b0a6:	2b00      	cmp	r3, #0
  40b0a8:	d039      	beq.n	40b11e <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  40b0aa:	2300      	movs	r3, #0
  40b0ac:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40b0ae:	e033      	b.n	40b118 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40b0b0:	4a24      	ldr	r2, [pc, #144]	; (40b144 <pio_handler_process+0xc0>)
  40b0b2:	68bb      	ldr	r3, [r7, #8]
  40b0b4:	011b      	lsls	r3, r3, #4
  40b0b6:	4413      	add	r3, r2
  40b0b8:	681a      	ldr	r2, [r3, #0]
  40b0ba:	683b      	ldr	r3, [r7, #0]
  40b0bc:	429a      	cmp	r2, r3
  40b0be:	d124      	bne.n	40b10a <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40b0c0:	4a20      	ldr	r2, [pc, #128]	; (40b144 <pio_handler_process+0xc0>)
  40b0c2:	68bb      	ldr	r3, [r7, #8]
  40b0c4:	011b      	lsls	r3, r3, #4
  40b0c6:	4413      	add	r3, r2
  40b0c8:	685a      	ldr	r2, [r3, #4]
  40b0ca:	68fb      	ldr	r3, [r7, #12]
  40b0cc:	4013      	ands	r3, r2
  40b0ce:	2b00      	cmp	r3, #0
  40b0d0:	d01b      	beq.n	40b10a <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40b0d2:	4a1c      	ldr	r2, [pc, #112]	; (40b144 <pio_handler_process+0xc0>)
  40b0d4:	68bb      	ldr	r3, [r7, #8]
  40b0d6:	011b      	lsls	r3, r3, #4
  40b0d8:	4413      	add	r3, r2
  40b0da:	3308      	adds	r3, #8
  40b0dc:	685b      	ldr	r3, [r3, #4]
  40b0de:	4919      	ldr	r1, [pc, #100]	; (40b144 <pio_handler_process+0xc0>)
  40b0e0:	68ba      	ldr	r2, [r7, #8]
  40b0e2:	0112      	lsls	r2, r2, #4
  40b0e4:	440a      	add	r2, r1
  40b0e6:	6811      	ldr	r1, [r2, #0]
  40b0e8:	4816      	ldr	r0, [pc, #88]	; (40b144 <pio_handler_process+0xc0>)
  40b0ea:	68ba      	ldr	r2, [r7, #8]
  40b0ec:	0112      	lsls	r2, r2, #4
  40b0ee:	4402      	add	r2, r0
  40b0f0:	6852      	ldr	r2, [r2, #4]
  40b0f2:	4608      	mov	r0, r1
  40b0f4:	4611      	mov	r1, r2
  40b0f6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40b0f8:	4a12      	ldr	r2, [pc, #72]	; (40b144 <pio_handler_process+0xc0>)
  40b0fa:	68bb      	ldr	r3, [r7, #8]
  40b0fc:	011b      	lsls	r3, r3, #4
  40b0fe:	4413      	add	r3, r2
  40b100:	685b      	ldr	r3, [r3, #4]
  40b102:	43db      	mvns	r3, r3
  40b104:	68fa      	ldr	r2, [r7, #12]
  40b106:	4013      	ands	r3, r2
  40b108:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40b10a:	68bb      	ldr	r3, [r7, #8]
  40b10c:	3301      	adds	r3, #1
  40b10e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40b110:	68bb      	ldr	r3, [r7, #8]
  40b112:	2b06      	cmp	r3, #6
  40b114:	d900      	bls.n	40b118 <pio_handler_process+0x94>
				break;
  40b116:	e002      	b.n	40b11e <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40b118:	68fb      	ldr	r3, [r7, #12]
  40b11a:	2b00      	cmp	r3, #0
  40b11c:	d1c8      	bne.n	40b0b0 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40b11e:	4b0a      	ldr	r3, [pc, #40]	; (40b148 <pio_handler_process+0xc4>)
  40b120:	681b      	ldr	r3, [r3, #0]
  40b122:	2b00      	cmp	r3, #0
  40b124:	d007      	beq.n	40b136 <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  40b126:	4b09      	ldr	r3, [pc, #36]	; (40b14c <pio_handler_process+0xc8>)
  40b128:	681b      	ldr	r3, [r3, #0]
  40b12a:	2b00      	cmp	r3, #0
  40b12c:	d003      	beq.n	40b136 <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  40b12e:	4b07      	ldr	r3, [pc, #28]	; (40b14c <pio_handler_process+0xc8>)
  40b130:	681b      	ldr	r3, [r3, #0]
  40b132:	6878      	ldr	r0, [r7, #4]
  40b134:	4798      	blx	r3
		}
	}
#endif
}
  40b136:	3710      	adds	r7, #16
  40b138:	46bd      	mov	sp, r7
  40b13a:	bd80      	pop	{r7, pc}
  40b13c:	0040ad85 	.word	0x0040ad85
  40b140:	0040ad9d 	.word	0x0040ad9d
  40b144:	2000888c 	.word	0x2000888c
  40b148:	200099c4 	.word	0x200099c4
  40b14c:	20008900 	.word	0x20008900

0040b150 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40b150:	b580      	push	{r7, lr}
  40b152:	b086      	sub	sp, #24
  40b154:	af00      	add	r7, sp, #0
  40b156:	60f8      	str	r0, [r7, #12]
  40b158:	60b9      	str	r1, [r7, #8]
  40b15a:	607a      	str	r2, [r7, #4]
  40b15c:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;
	
	//search to see if there's already an entry. 
	int i = 0;
  40b15e:	2300      	movs	r3, #0
  40b160:	617b      	str	r3, [r7, #20]
	for(i=0;i<gs_ul_nb_sources; i++)
  40b162:	2300      	movs	r3, #0
  40b164:	617b      	str	r3, [r7, #20]
  40b166:	e022      	b.n	40b1ae <pio_handler_set+0x5e>
	{
		if(gs_interrupt_sources[i].id == ul_id)
  40b168:	4a27      	ldr	r2, [pc, #156]	; (40b208 <pio_handler_set+0xb8>)
  40b16a:	697b      	ldr	r3, [r7, #20]
  40b16c:	011b      	lsls	r3, r3, #4
  40b16e:	4413      	add	r3, r2
  40b170:	681a      	ldr	r2, [r3, #0]
  40b172:	68bb      	ldr	r3, [r7, #8]
  40b174:	429a      	cmp	r2, r3
  40b176:	d117      	bne.n	40b1a8 <pio_handler_set+0x58>
		{
			pSource = &(gs_interrupt_sources[i]);
  40b178:	697b      	ldr	r3, [r7, #20]
  40b17a:	011a      	lsls	r2, r3, #4
  40b17c:	4b22      	ldr	r3, [pc, #136]	; (40b208 <pio_handler_set+0xb8>)
  40b17e:	4413      	add	r3, r2
  40b180:	613b      	str	r3, [r7, #16]
			pSource->id = ul_id;
  40b182:	693b      	ldr	r3, [r7, #16]
  40b184:	68ba      	ldr	r2, [r7, #8]
  40b186:	601a      	str	r2, [r3, #0]
			pSource->mask = ul_mask;
  40b188:	693b      	ldr	r3, [r7, #16]
  40b18a:	687a      	ldr	r2, [r7, #4]
  40b18c:	605a      	str	r2, [r3, #4]
			pSource->attr = ul_attr;
  40b18e:	693b      	ldr	r3, [r7, #16]
  40b190:	683a      	ldr	r2, [r7, #0]
  40b192:	609a      	str	r2, [r3, #8]
			pSource->handler = p_handler;	
  40b194:	693b      	ldr	r3, [r7, #16]
  40b196:	6a3a      	ldr	r2, [r7, #32]
  40b198:	60da      	str	r2, [r3, #12]
			/* Configure interrupt mode */
			pio_configure_interrupt(p_pio, ul_mask, ul_attr);	
  40b19a:	68f8      	ldr	r0, [r7, #12]
  40b19c:	6879      	ldr	r1, [r7, #4]
  40b19e:	683a      	ldr	r2, [r7, #0]
  40b1a0:	4b1a      	ldr	r3, [pc, #104]	; (40b20c <pio_handler_set+0xbc>)
  40b1a2:	4798      	blx	r3
			return 0;
  40b1a4:	2300      	movs	r3, #0
  40b1a6:	e02a      	b.n	40b1fe <pio_handler_set+0xae>
{
	struct s_interrupt_source *pSource;
	
	//search to see if there's already an entry. 
	int i = 0;
	for(i=0;i<gs_ul_nb_sources; i++)
  40b1a8:	697b      	ldr	r3, [r7, #20]
  40b1aa:	3301      	adds	r3, #1
  40b1ac:	617b      	str	r3, [r7, #20]
  40b1ae:	697a      	ldr	r2, [r7, #20]
  40b1b0:	4b17      	ldr	r3, [pc, #92]	; (40b210 <pio_handler_set+0xc0>)
  40b1b2:	681b      	ldr	r3, [r3, #0]
  40b1b4:	429a      	cmp	r2, r3
  40b1b6:	d3d7      	bcc.n	40b168 <pio_handler_set+0x18>
			pio_configure_interrupt(p_pio, ul_mask, ul_attr);	
			return 0;
		}
	}
	
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40b1b8:	4b15      	ldr	r3, [pc, #84]	; (40b210 <pio_handler_set+0xc0>)
  40b1ba:	681b      	ldr	r3, [r3, #0]
  40b1bc:	2b06      	cmp	r3, #6
  40b1be:	d901      	bls.n	40b1c4 <pio_handler_set+0x74>
		return 1;
  40b1c0:	2301      	movs	r3, #1
  40b1c2:	e01c      	b.n	40b1fe <pio_handler_set+0xae>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40b1c4:	4b12      	ldr	r3, [pc, #72]	; (40b210 <pio_handler_set+0xc0>)
  40b1c6:	681b      	ldr	r3, [r3, #0]
  40b1c8:	011a      	lsls	r2, r3, #4
  40b1ca:	4b0f      	ldr	r3, [pc, #60]	; (40b208 <pio_handler_set+0xb8>)
  40b1cc:	4413      	add	r3, r2
  40b1ce:	613b      	str	r3, [r7, #16]
	pSource->id = ul_id;
  40b1d0:	693b      	ldr	r3, [r7, #16]
  40b1d2:	68ba      	ldr	r2, [r7, #8]
  40b1d4:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40b1d6:	693b      	ldr	r3, [r7, #16]
  40b1d8:	687a      	ldr	r2, [r7, #4]
  40b1da:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40b1dc:	693b      	ldr	r3, [r7, #16]
  40b1de:	683a      	ldr	r2, [r7, #0]
  40b1e0:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40b1e2:	693b      	ldr	r3, [r7, #16]
  40b1e4:	6a3a      	ldr	r2, [r7, #32]
  40b1e6:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  40b1e8:	4b09      	ldr	r3, [pc, #36]	; (40b210 <pio_handler_set+0xc0>)
  40b1ea:	681b      	ldr	r3, [r3, #0]
  40b1ec:	1c5a      	adds	r2, r3, #1
  40b1ee:	4b08      	ldr	r3, [pc, #32]	; (40b210 <pio_handler_set+0xc0>)
  40b1f0:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40b1f2:	68f8      	ldr	r0, [r7, #12]
  40b1f4:	6879      	ldr	r1, [r7, #4]
  40b1f6:	683a      	ldr	r2, [r7, #0]
  40b1f8:	4b04      	ldr	r3, [pc, #16]	; (40b20c <pio_handler_set+0xbc>)
  40b1fa:	4798      	blx	r3

	return 0;
  40b1fc:	2300      	movs	r3, #0
}
  40b1fe:	4618      	mov	r0, r3
  40b200:	3718      	adds	r7, #24
  40b202:	46bd      	mov	sp, r7
  40b204:	bd80      	pop	{r7, pc}
  40b206:	bf00      	nop
  40b208:	2000888c 	.word	0x2000888c
  40b20c:	0040acdd 	.word	0x0040acdd
  40b210:	200088fc 	.word	0x200088fc

0040b214 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40b214:	b580      	push	{r7, lr}
  40b216:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40b218:	4802      	ldr	r0, [pc, #8]	; (40b224 <PIOA_Handler+0x10>)
  40b21a:	210b      	movs	r1, #11
  40b21c:	4b02      	ldr	r3, [pc, #8]	; (40b228 <PIOA_Handler+0x14>)
  40b21e:	4798      	blx	r3
}
  40b220:	bd80      	pop	{r7, pc}
  40b222:	bf00      	nop
  40b224:	400e0e00 	.word	0x400e0e00
  40b228:	0040b085 	.word	0x0040b085

0040b22c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40b22c:	b580      	push	{r7, lr}
  40b22e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40b230:	4802      	ldr	r0, [pc, #8]	; (40b23c <PIOB_Handler+0x10>)
  40b232:	210c      	movs	r1, #12
  40b234:	4b02      	ldr	r3, [pc, #8]	; (40b240 <PIOB_Handler+0x14>)
  40b236:	4798      	blx	r3
}
  40b238:	bd80      	pop	{r7, pc}
  40b23a:	bf00      	nop
  40b23c:	400e1000 	.word	0x400e1000
  40b240:	0040b085 	.word	0x0040b085

0040b244 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40b244:	b480      	push	{r7}
  40b246:	b085      	sub	sp, #20
  40b248:	af00      	add	r7, sp, #0
  40b24a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40b24c:	4b1d      	ldr	r3, [pc, #116]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b24e:	4a1d      	ldr	r2, [pc, #116]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b250:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40b252:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40b256:	687a      	ldr	r2, [r7, #4]
  40b258:	430a      	orrs	r2, r1
  40b25a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b25c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40b260:	60fb      	str	r3, [r7, #12]
  40b262:	e007      	b.n	40b274 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40b264:	68fb      	ldr	r3, [r7, #12]
  40b266:	2b00      	cmp	r3, #0
  40b268:	d101      	bne.n	40b26e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40b26a:	2301      	movs	r3, #1
  40b26c:	e023      	b.n	40b2b6 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40b26e:	68fb      	ldr	r3, [r7, #12]
  40b270:	3b01      	subs	r3, #1
  40b272:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b274:	4b13      	ldr	r3, [pc, #76]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b278:	f003 0308 	and.w	r3, r3, #8
  40b27c:	2b00      	cmp	r3, #0
  40b27e:	d0f1      	beq.n	40b264 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40b280:	4b10      	ldr	r3, [pc, #64]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b282:	4a10      	ldr	r2, [pc, #64]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b284:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40b286:	f022 0203 	bic.w	r2, r2, #3
  40b28a:	f042 0202 	orr.w	r2, r2, #2
  40b28e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b290:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40b294:	60fb      	str	r3, [r7, #12]
  40b296:	e007      	b.n	40b2a8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40b298:	68fb      	ldr	r3, [r7, #12]
  40b29a:	2b00      	cmp	r3, #0
  40b29c:	d101      	bne.n	40b2a2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40b29e:	2301      	movs	r3, #1
  40b2a0:	e009      	b.n	40b2b6 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40b2a2:	68fb      	ldr	r3, [r7, #12]
  40b2a4:	3b01      	subs	r3, #1
  40b2a6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b2a8:	4b06      	ldr	r3, [pc, #24]	; (40b2c4 <pmc_switch_mck_to_pllack+0x80>)
  40b2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b2ac:	f003 0308 	and.w	r3, r3, #8
  40b2b0:	2b00      	cmp	r3, #0
  40b2b2:	d0f1      	beq.n	40b298 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40b2b4:	2300      	movs	r3, #0
}
  40b2b6:	4618      	mov	r0, r3
  40b2b8:	3714      	adds	r7, #20
  40b2ba:	46bd      	mov	sp, r7
  40b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b2c0:	4770      	bx	lr
  40b2c2:	bf00      	nop
  40b2c4:	400e0400 	.word	0x400e0400

0040b2c8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40b2c8:	b480      	push	{r7}
  40b2ca:	b083      	sub	sp, #12
  40b2cc:	af00      	add	r7, sp, #0
  40b2ce:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40b2d0:	687b      	ldr	r3, [r7, #4]
  40b2d2:	2b01      	cmp	r3, #1
  40b2d4:	d107      	bne.n	40b2e6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40b2d6:	4a08      	ldr	r2, [pc, #32]	; (40b2f8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b2d8:	4b07      	ldr	r3, [pc, #28]	; (40b2f8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b2da:	689b      	ldr	r3, [r3, #8]
  40b2dc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40b2e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40b2e4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40b2e6:	4b04      	ldr	r3, [pc, #16]	; (40b2f8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b2e8:	4a04      	ldr	r2, [pc, #16]	; (40b2fc <pmc_switch_sclk_to_32kxtal+0x34>)
  40b2ea:	601a      	str	r2, [r3, #0]
}
  40b2ec:	370c      	adds	r7, #12
  40b2ee:	46bd      	mov	sp, r7
  40b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b2f4:	4770      	bx	lr
  40b2f6:	bf00      	nop
  40b2f8:	400e1410 	.word	0x400e1410
  40b2fc:	a5000008 	.word	0xa5000008

0040b300 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40b300:	b480      	push	{r7}
  40b302:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40b304:	4b09      	ldr	r3, [pc, #36]	; (40b32c <pmc_osc_is_ready_32kxtal+0x2c>)
  40b306:	695b      	ldr	r3, [r3, #20]
  40b308:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40b30c:	2b00      	cmp	r3, #0
  40b30e:	d007      	beq.n	40b320 <pmc_osc_is_ready_32kxtal+0x20>
  40b310:	4b07      	ldr	r3, [pc, #28]	; (40b330 <pmc_osc_is_ready_32kxtal+0x30>)
  40b312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b314:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40b318:	2b00      	cmp	r3, #0
  40b31a:	d001      	beq.n	40b320 <pmc_osc_is_ready_32kxtal+0x20>
  40b31c:	2301      	movs	r3, #1
  40b31e:	e000      	b.n	40b322 <pmc_osc_is_ready_32kxtal+0x22>
  40b320:	2300      	movs	r3, #0
}
  40b322:	4618      	mov	r0, r3
  40b324:	46bd      	mov	sp, r7
  40b326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b32a:	4770      	bx	lr
  40b32c:	400e1410 	.word	0x400e1410
  40b330:	400e0400 	.word	0x400e0400

0040b334 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40b334:	b480      	push	{r7}
  40b336:	b083      	sub	sp, #12
  40b338:	af00      	add	r7, sp, #0
  40b33a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40b33c:	4a18      	ldr	r2, [pc, #96]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b33e:	4b18      	ldr	r3, [pc, #96]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b340:	6a1b      	ldr	r3, [r3, #32]
  40b342:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b346:	f043 0308 	orr.w	r3, r3, #8
  40b34a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40b34c:	bf00      	nop
  40b34e:	4b14      	ldr	r3, [pc, #80]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40b356:	2b00      	cmp	r3, #0
  40b358:	d0f9      	beq.n	40b34e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40b35a:	4a11      	ldr	r2, [pc, #68]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b35c:	4b10      	ldr	r3, [pc, #64]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b35e:	6a1b      	ldr	r3, [r3, #32]
  40b360:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40b368:	6879      	ldr	r1, [r7, #4]
  40b36a:	430b      	orrs	r3, r1
  40b36c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40b370:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40b372:	bf00      	nop
  40b374:	4b0a      	ldr	r3, [pc, #40]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40b37c:	2b00      	cmp	r3, #0
  40b37e:	d0f9      	beq.n	40b374 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40b380:	4a07      	ldr	r2, [pc, #28]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b382:	4b07      	ldr	r3, [pc, #28]	; (40b3a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b384:	6a1b      	ldr	r3, [r3, #32]
  40b386:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40b38a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b38e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b392:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40b394:	370c      	adds	r7, #12
  40b396:	46bd      	mov	sp, r7
  40b398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b39c:	4770      	bx	lr
  40b39e:	bf00      	nop
  40b3a0:	400e0400 	.word	0x400e0400

0040b3a4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40b3a4:	b480      	push	{r7}
  40b3a6:	b083      	sub	sp, #12
  40b3a8:	af00      	add	r7, sp, #0
  40b3aa:	6078      	str	r0, [r7, #4]
  40b3ac:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40b3ae:	687b      	ldr	r3, [r7, #4]
  40b3b0:	2b00      	cmp	r3, #0
  40b3b2:	d008      	beq.n	40b3c6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b3b4:	4916      	ldr	r1, [pc, #88]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3b6:	4b16      	ldr	r3, [pc, #88]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3b8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40b3ba:	4a16      	ldr	r2, [pc, #88]	; (40b414 <pmc_switch_mainck_to_xtal+0x70>)
  40b3bc:	401a      	ands	r2, r3
  40b3be:	4b16      	ldr	r3, [pc, #88]	; (40b418 <pmc_switch_mainck_to_xtal+0x74>)
  40b3c0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b3c2:	620b      	str	r3, [r1, #32]
  40b3c4:	e01e      	b.n	40b404 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b3c6:	4a12      	ldr	r2, [pc, #72]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3c8:	4b11      	ldr	r3, [pc, #68]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3ca:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40b3cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b3d0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40b3d4:	6839      	ldr	r1, [r7, #0]
  40b3d6:	0209      	lsls	r1, r1, #8
  40b3d8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40b3da:	430b      	orrs	r3, r1
  40b3dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b3e0:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b3e4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40b3e6:	bf00      	nop
  40b3e8:	4b09      	ldr	r3, [pc, #36]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b3ec:	f003 0301 	and.w	r3, r3, #1
  40b3f0:	2b00      	cmp	r3, #0
  40b3f2:	d0f9      	beq.n	40b3e8 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40b3f4:	4a06      	ldr	r2, [pc, #24]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3f6:	4b06      	ldr	r3, [pc, #24]	; (40b410 <pmc_switch_mainck_to_xtal+0x6c>)
  40b3f8:	6a1b      	ldr	r3, [r3, #32]
  40b3fa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40b3fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40b402:	6213      	str	r3, [r2, #32]
	}
}
  40b404:	370c      	adds	r7, #12
  40b406:	46bd      	mov	sp, r7
  40b408:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b40c:	4770      	bx	lr
  40b40e:	bf00      	nop
  40b410:	400e0400 	.word	0x400e0400
  40b414:	fec8fffc 	.word	0xfec8fffc
  40b418:	01370002 	.word	0x01370002

0040b41c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40b41c:	b480      	push	{r7}
  40b41e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40b420:	4b04      	ldr	r3, [pc, #16]	; (40b434 <pmc_osc_is_ready_mainck+0x18>)
  40b422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40b428:	4618      	mov	r0, r3
  40b42a:	46bd      	mov	sp, r7
  40b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b430:	4770      	bx	lr
  40b432:	bf00      	nop
  40b434:	400e0400 	.word	0x400e0400

0040b438 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40b438:	b480      	push	{r7}
  40b43a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40b43c:	4b03      	ldr	r3, [pc, #12]	; (40b44c <pmc_disable_pllack+0x14>)
  40b43e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40b442:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40b444:	46bd      	mov	sp, r7
  40b446:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b44a:	4770      	bx	lr
  40b44c:	400e0400 	.word	0x400e0400

0040b450 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40b450:	b480      	push	{r7}
  40b452:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40b454:	4b04      	ldr	r3, [pc, #16]	; (40b468 <pmc_is_locked_pllack+0x18>)
  40b456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b458:	f003 0302 	and.w	r3, r3, #2
}
  40b45c:	4618      	mov	r0, r3
  40b45e:	46bd      	mov	sp, r7
  40b460:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b464:	4770      	bx	lr
  40b466:	bf00      	nop
  40b468:	400e0400 	.word	0x400e0400

0040b46c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40b46c:	b480      	push	{r7}
  40b46e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40b470:	4b03      	ldr	r3, [pc, #12]	; (40b480 <pmc_disable_pllbck+0x14>)
  40b472:	2200      	movs	r2, #0
  40b474:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40b476:	46bd      	mov	sp, r7
  40b478:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b47c:	4770      	bx	lr
  40b47e:	bf00      	nop
  40b480:	400e0400 	.word	0x400e0400

0040b484 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40b484:	b480      	push	{r7}
  40b486:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40b488:	4b04      	ldr	r3, [pc, #16]	; (40b49c <pmc_is_locked_pllbck+0x18>)
  40b48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b48c:	f003 0304 	and.w	r3, r3, #4
}
  40b490:	4618      	mov	r0, r3
  40b492:	46bd      	mov	sp, r7
  40b494:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b498:	4770      	bx	lr
  40b49a:	bf00      	nop
  40b49c:	400e0400 	.word	0x400e0400

0040b4a0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40b4a0:	b480      	push	{r7}
  40b4a2:	b083      	sub	sp, #12
  40b4a4:	af00      	add	r7, sp, #0
  40b4a6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40b4a8:	687b      	ldr	r3, [r7, #4]
  40b4aa:	2b22      	cmp	r3, #34	; 0x22
  40b4ac:	d901      	bls.n	40b4b2 <pmc_enable_periph_clk+0x12>
		return 1;
  40b4ae:	2301      	movs	r3, #1
  40b4b0:	e02f      	b.n	40b512 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40b4b2:	687b      	ldr	r3, [r7, #4]
  40b4b4:	2b1f      	cmp	r3, #31
  40b4b6:	d813      	bhi.n	40b4e0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40b4b8:	4b19      	ldr	r3, [pc, #100]	; (40b520 <pmc_enable_periph_clk+0x80>)
  40b4ba:	699a      	ldr	r2, [r3, #24]
  40b4bc:	687b      	ldr	r3, [r7, #4]
  40b4be:	2101      	movs	r1, #1
  40b4c0:	fa01 f303 	lsl.w	r3, r1, r3
  40b4c4:	401a      	ands	r2, r3
  40b4c6:	687b      	ldr	r3, [r7, #4]
  40b4c8:	2101      	movs	r1, #1
  40b4ca:	fa01 f303 	lsl.w	r3, r1, r3
  40b4ce:	429a      	cmp	r2, r3
  40b4d0:	d01e      	beq.n	40b510 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40b4d2:	4b13      	ldr	r3, [pc, #76]	; (40b520 <pmc_enable_periph_clk+0x80>)
  40b4d4:	687a      	ldr	r2, [r7, #4]
  40b4d6:	2101      	movs	r1, #1
  40b4d8:	fa01 f202 	lsl.w	r2, r1, r2
  40b4dc:	611a      	str	r2, [r3, #16]
  40b4de:	e017      	b.n	40b510 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  40b4e0:	687b      	ldr	r3, [r7, #4]
  40b4e2:	3b20      	subs	r3, #32
  40b4e4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40b4e6:	4b0e      	ldr	r3, [pc, #56]	; (40b520 <pmc_enable_periph_clk+0x80>)
  40b4e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40b4ec:	687b      	ldr	r3, [r7, #4]
  40b4ee:	2101      	movs	r1, #1
  40b4f0:	fa01 f303 	lsl.w	r3, r1, r3
  40b4f4:	401a      	ands	r2, r3
  40b4f6:	687b      	ldr	r3, [r7, #4]
  40b4f8:	2101      	movs	r1, #1
  40b4fa:	fa01 f303 	lsl.w	r3, r1, r3
  40b4fe:	429a      	cmp	r2, r3
  40b500:	d006      	beq.n	40b510 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40b502:	4b07      	ldr	r3, [pc, #28]	; (40b520 <pmc_enable_periph_clk+0x80>)
  40b504:	687a      	ldr	r2, [r7, #4]
  40b506:	2101      	movs	r1, #1
  40b508:	fa01 f202 	lsl.w	r2, r1, r2
  40b50c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40b510:	2300      	movs	r3, #0
}
  40b512:	4618      	mov	r0, r3
  40b514:	370c      	adds	r7, #12
  40b516:	46bd      	mov	sp, r7
  40b518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b51c:	4770      	bx	lr
  40b51e:	bf00      	nop
  40b520:	400e0400 	.word	0x400e0400

0040b524 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  40b524:	b480      	push	{r7}
  40b526:	b083      	sub	sp, #12
  40b528:	af00      	add	r7, sp, #0
  40b52a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40b52c:	687b      	ldr	r3, [r7, #4]
  40b52e:	2b22      	cmp	r3, #34	; 0x22
  40b530:	d901      	bls.n	40b536 <pmc_disable_periph_clk+0x12>
		return 1;
  40b532:	2301      	movs	r3, #1
  40b534:	e02f      	b.n	40b596 <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40b536:	687b      	ldr	r3, [r7, #4]
  40b538:	2b1f      	cmp	r3, #31
  40b53a:	d813      	bhi.n	40b564 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40b53c:	4b19      	ldr	r3, [pc, #100]	; (40b5a4 <pmc_disable_periph_clk+0x80>)
  40b53e:	699a      	ldr	r2, [r3, #24]
  40b540:	687b      	ldr	r3, [r7, #4]
  40b542:	2101      	movs	r1, #1
  40b544:	fa01 f303 	lsl.w	r3, r1, r3
  40b548:	401a      	ands	r2, r3
  40b54a:	687b      	ldr	r3, [r7, #4]
  40b54c:	2101      	movs	r1, #1
  40b54e:	fa01 f303 	lsl.w	r3, r1, r3
  40b552:	429a      	cmp	r2, r3
  40b554:	d11e      	bne.n	40b594 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40b556:	4b13      	ldr	r3, [pc, #76]	; (40b5a4 <pmc_disable_periph_clk+0x80>)
  40b558:	687a      	ldr	r2, [r7, #4]
  40b55a:	2101      	movs	r1, #1
  40b55c:	fa01 f202 	lsl.w	r2, r1, r2
  40b560:	615a      	str	r2, [r3, #20]
  40b562:	e017      	b.n	40b594 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  40b564:	687b      	ldr	r3, [r7, #4]
  40b566:	3b20      	subs	r3, #32
  40b568:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40b56a:	4b0e      	ldr	r3, [pc, #56]	; (40b5a4 <pmc_disable_periph_clk+0x80>)
  40b56c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40b570:	687b      	ldr	r3, [r7, #4]
  40b572:	2101      	movs	r1, #1
  40b574:	fa01 f303 	lsl.w	r3, r1, r3
  40b578:	401a      	ands	r2, r3
  40b57a:	687b      	ldr	r3, [r7, #4]
  40b57c:	2101      	movs	r1, #1
  40b57e:	fa01 f303 	lsl.w	r3, r1, r3
  40b582:	429a      	cmp	r2, r3
  40b584:	d106      	bne.n	40b594 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40b586:	4b07      	ldr	r3, [pc, #28]	; (40b5a4 <pmc_disable_periph_clk+0x80>)
  40b588:	687a      	ldr	r2, [r7, #4]
  40b58a:	2101      	movs	r1, #1
  40b58c:	fa01 f202 	lsl.w	r2, r1, r2
  40b590:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  40b594:	2300      	movs	r3, #0
}
  40b596:	4618      	mov	r0, r3
  40b598:	370c      	adds	r7, #12
  40b59a:	46bd      	mov	sp, r7
  40b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b5a0:	4770      	bx	lr
  40b5a2:	bf00      	nop
  40b5a4:	400e0400 	.word	0x400e0400

0040b5a8 <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  40b5a8:	b480      	push	{r7}
  40b5aa:	b083      	sub	sp, #12
  40b5ac:	af00      	add	r7, sp, #0
  40b5ae:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40b5b0:	4b06      	ldr	r3, [pc, #24]	; (40b5cc <pmc_switch_udpck_to_pllbck+0x24>)
  40b5b2:	687a      	ldr	r2, [r7, #4]
  40b5b4:	0212      	lsls	r2, r2, #8
  40b5b6:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  40b5ba:	f042 0201 	orr.w	r2, r2, #1
  40b5be:	639a      	str	r2, [r3, #56]	; 0x38
}
  40b5c0:	370c      	adds	r7, #12
  40b5c2:	46bd      	mov	sp, r7
  40b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b5c8:	4770      	bx	lr
  40b5ca:	bf00      	nop
  40b5cc:	400e0400 	.word	0x400e0400

0040b5d0 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  40b5d0:	b480      	push	{r7}
  40b5d2:	af00      	add	r7, sp, #0
# if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  40b5d4:	4b03      	ldr	r3, [pc, #12]	; (40b5e4 <pmc_enable_udpck+0x14>)
  40b5d6:	2280      	movs	r2, #128	; 0x80
  40b5d8:	601a      	str	r2, [r3, #0]
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  40b5da:	46bd      	mov	sp, r7
  40b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b5e0:	4770      	bx	lr
  40b5e2:	bf00      	nop
  40b5e4:	400e0400 	.word	0x400e0400

0040b5e8 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  40b5e8:	b480      	push	{r7}
  40b5ea:	b083      	sub	sp, #12
  40b5ec:	af00      	add	r7, sp, #0
  40b5ee:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  40b5f0:	687b      	ldr	r3, [r7, #4]
  40b5f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
  40b5f6:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  40b5f8:	4b05      	ldr	r3, [pc, #20]	; (40b610 <pmc_set_fast_startup_input+0x28>)
  40b5fa:	4a05      	ldr	r2, [pc, #20]	; (40b610 <pmc_set_fast_startup_input+0x28>)
  40b5fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40b5fe:	687a      	ldr	r2, [r7, #4]
  40b600:	430a      	orrs	r2, r1
  40b602:	671a      	str	r2, [r3, #112]	; 0x70
}
  40b604:	370c      	adds	r7, #12
  40b606:	46bd      	mov	sp, r7
  40b608:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b60c:	4770      	bx	lr
  40b60e:	bf00      	nop
  40b610:	400e0400 	.word	0x400e0400

0040b614 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40b614:	b480      	push	{r7}
  40b616:	b083      	sub	sp, #12
  40b618:	af00      	add	r7, sp, #0
  40b61a:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  40b61c:	4b03      	ldr	r3, [pc, #12]	; (40b62c <pmc_set_flash_in_wait_mode+0x18>)
  40b61e:	687a      	ldr	r2, [r7, #4]
  40b620:	601a      	str	r2, [r3, #0]
}
  40b622:	370c      	adds	r7, #12
  40b624:	46bd      	mov	sp, r7
  40b626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b62a:	4770      	bx	lr
  40b62c:	20000368 	.word	0x20000368

0040b630 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to 
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  40b630:	b480      	push	{r7}
  40b632:	b083      	sub	sp, #12
  40b634:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40b636:	4b21      	ldr	r3, [pc, #132]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b63a:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40b63c:	687b      	ldr	r3, [r7, #4]
  40b63e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40b642:	607b      	str	r3, [r7, #4]
	i |= ul_flash_in_wait_mode;
  40b644:	4b1e      	ldr	r3, [pc, #120]	; (40b6c0 <pmc_enable_waitmode+0x90>)
  40b646:	681b      	ldr	r3, [r3, #0]
  40b648:	687a      	ldr	r2, [r7, #4]
  40b64a:	4313      	orrs	r3, r2
  40b64c:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40b64e:	4b1b      	ldr	r3, [pc, #108]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b650:	687a      	ldr	r2, [r7, #4]
  40b652:	671a      	str	r2, [r3, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40b654:	4a19      	ldr	r2, [pc, #100]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b656:	4b19      	ldr	r3, [pc, #100]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b658:	6a1b      	ldr	r3, [r3, #32]
  40b65a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b65e:	f043 0304 	orr.w	r3, r3, #4
  40b662:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b664:	bf00      	nop
  40b666:	4b15      	ldr	r3, [pc, #84]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b66a:	f003 0308 	and.w	r3, r3, #8
  40b66e:	2b00      	cmp	r3, #0
  40b670:	d0f9      	beq.n	40b666 <pmc_enable_waitmode+0x36>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  40b672:	2300      	movs	r3, #0
  40b674:	607b      	str	r3, [r7, #4]
  40b676:	e003      	b.n	40b680 <pmc_enable_waitmode+0x50>
  40b678:	bf00      	nop
  40b67a:	687b      	ldr	r3, [r7, #4]
  40b67c:	3301      	adds	r3, #1
  40b67e:	607b      	str	r3, [r7, #4]
  40b680:	687b      	ldr	r3, [r7, #4]
  40b682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40b686:	d3f7      	bcc.n	40b678 <pmc_enable_waitmode+0x48>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40b688:	bf00      	nop
  40b68a:	4b0c      	ldr	r3, [pc, #48]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b68c:	6a1b      	ldr	r3, [r3, #32]
  40b68e:	f003 0308 	and.w	r3, r3, #8
  40b692:	2b00      	cmp	r3, #0
  40b694:	d0f9      	beq.n	40b68a <pmc_enable_waitmode+0x5a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40b696:	4b09      	ldr	r3, [pc, #36]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b69a:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40b69c:	687b      	ldr	r3, [r7, #4]
  40b69e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40b6a2:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40b6a4:	687b      	ldr	r3, [r7, #4]
  40b6a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40b6aa:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40b6ac:	4b03      	ldr	r3, [pc, #12]	; (40b6bc <pmc_enable_waitmode+0x8c>)
  40b6ae:	687a      	ldr	r2, [r7, #4]
  40b6b0:	671a      	str	r2, [r3, #112]	; 0x70
#endif
}
  40b6b2:	370c      	adds	r7, #12
  40b6b4:	46bd      	mov	sp, r7
  40b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b6ba:	4770      	bx	lr
  40b6bc:	400e0400 	.word	0x400e0400
  40b6c0:	20000368 	.word	0x20000368

0040b6c4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40b6c4:	b590      	push	{r4, r7, lr}
  40b6c6:	b099      	sub	sp, #100	; 0x64
  40b6c8:	af00      	add	r7, sp, #0
  40b6ca:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  40b6cc:	687b      	ldr	r3, [r7, #4]
  40b6ce:	3b01      	subs	r3, #1
  40b6d0:	2b04      	cmp	r3, #4
  40b6d2:	f200 81c5 	bhi.w	40ba60 <pmc_sleep+0x39c>
  40b6d6:	a201      	add	r2, pc, #4	; (adr r2, 40b6dc <pmc_sleep+0x18>)
  40b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40b6dc:	0040b6f1 	.word	0x0040b6f1
  40b6e0:	0040b6f1 	.word	0x0040b6f1
  40b6e4:	0040b70d 	.word	0x0040b70d
  40b6e8:	0040b70d 	.word	0x0040b70d
  40b6ec:	0040ba3f 	.word	0x0040ba3f
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40b6f0:	4b76      	ldr	r3, [pc, #472]	; (40b8cc <pmc_sleep+0x208>)
  40b6f2:	4a76      	ldr	r2, [pc, #472]	; (40b8cc <pmc_sleep+0x208>)
  40b6f4:	6912      	ldr	r2, [r2, #16]
  40b6f6:	f022 0204 	bic.w	r2, r2, #4
  40b6fa:	611a      	str	r2, [r3, #16]
		cpu_irq_enable();
  40b6fc:	4b74      	ldr	r3, [pc, #464]	; (40b8d0 <pmc_sleep+0x20c>)
  40b6fe:	2201      	movs	r2, #1
  40b700:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40b702:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40b706:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40b708:	bf30      	wfi
		__WFI();
		break;
  40b70a:	e1a9      	b.n	40ba60 <pmc_sleep+0x39c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40b70c:	687b      	ldr	r3, [r7, #4]
  40b70e:	2b03      	cmp	r3, #3
  40b710:	d103      	bne.n	40b71a <pmc_sleep+0x56>
  40b712:	2000      	movs	r0, #0
  40b714:	4b6f      	ldr	r3, [pc, #444]	; (40b8d4 <pmc_sleep+0x210>)
  40b716:	4798      	blx	r3
  40b718:	e003      	b.n	40b722 <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40b71a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40b71e:	4b6d      	ldr	r3, [pc, #436]	; (40b8d4 <pmc_sleep+0x210>)
  40b720:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40b722:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40b724:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40b728:	4b69      	ldr	r3, [pc, #420]	; (40b8d0 <pmc_sleep+0x20c>)
  40b72a:	2200      	movs	r2, #0
  40b72c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40b72e:	4b6a      	ldr	r3, [pc, #424]	; (40b8d8 <pmc_sleep+0x214>)
  40b730:	2201      	movs	r2, #1
  40b732:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  40b734:	687b      	ldr	r3, [r7, #4]
  40b736:	2b04      	cmp	r3, #4
  40b738:	bf14      	ite	ne
  40b73a:	2300      	movne	r3, #0
  40b73c:	2301      	moveq	r3, #1
  40b73e:	b2db      	uxtb	r3, r3
  40b740:	f107 021c 	add.w	r2, r7, #28
  40b744:	65fa      	str	r2, [r7, #92]	; 0x5c
  40b746:	f107 0218 	add.w	r2, r7, #24
  40b74a:	65ba      	str	r2, [r7, #88]	; 0x58
  40b74c:	f107 0214 	add.w	r2, r7, #20
  40b750:	657a      	str	r2, [r7, #84]	; 0x54
  40b752:	f107 0210 	add.w	r2, r7, #16
  40b756:	653a      	str	r2, [r7, #80]	; 0x50
  40b758:	f107 020c 	add.w	r2, r7, #12
  40b75c:	64fa      	str	r2, [r7, #76]	; 0x4c
  40b75e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  40b762:	4b5e      	ldr	r3, [pc, #376]	; (40b8dc <pmc_sleep+0x218>)
  40b764:	6a1b      	ldr	r3, [r3, #32]
  40b766:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t mckr = PMC->PMC_MCKR;
  40b768:	4b5c      	ldr	r3, [pc, #368]	; (40b8dc <pmc_sleep+0x218>)
  40b76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40b76c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t fmr  = EFC0->EEFC_FMR;
  40b76e:	4b5c      	ldr	r3, [pc, #368]	; (40b8e0 <pmc_sleep+0x21c>)
  40b770:	681b      	ldr	r3, [r3, #0]
  40b772:	63fb      	str	r3, [r7, #60]	; 0x3c
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
# endif

	if (p_osc_setting) {
  40b774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40b776:	2b00      	cmp	r3, #0
  40b778:	d002      	beq.n	40b780 <pmc_sleep+0xbc>
		*p_osc_setting = mor;
  40b77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40b77c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40b77e:	601a      	str	r2, [r3, #0]
	}
	if (p_pll0_setting) {
  40b780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40b782:	2b00      	cmp	r3, #0
  40b784:	d003      	beq.n	40b78e <pmc_sleep+0xca>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40b786:	4b55      	ldr	r3, [pc, #340]	; (40b8dc <pmc_sleep+0x218>)
  40b788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40b78a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40b78c:	601a      	str	r2, [r3, #0]
	}
	if (p_pll1_setting) {
  40b78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40b790:	2b00      	cmp	r3, #0
  40b792:	d003      	beq.n	40b79c <pmc_sleep+0xd8>
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
  40b794:	4b51      	ldr	r3, [pc, #324]	; (40b8dc <pmc_sleep+0x218>)
  40b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40b79a:	601a      	str	r2, [r3, #0]
		*p_pll1_setting = PMC->CKGR_UCKR;
#else
		*p_pll1_setting = 0;
#endif
	}
	if (p_mck_setting) {
  40b79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40b79e:	2b00      	cmp	r3, #0
  40b7a0:	d002      	beq.n	40b7a8 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  40b7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40b7a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40b7a6:	601a      	str	r2, [r3, #0]
	}
	if (p_fmr_setting) {
  40b7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b7aa:	2b00      	cmp	r3, #0
  40b7ac:	d002      	beq.n	40b7b4 <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  40b7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b7b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40b7b2:	601a      	str	r2, [r3, #0]
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40b7b4:	4a49      	ldr	r2, [pc, #292]	; (40b8dc <pmc_sleep+0x218>)
  40b7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40b7b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b7bc:	f043 0308 	orr.w	r3, r3, #8
  40b7c0:	6213      	str	r3, [r2, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40b7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b7c4:	f003 0303 	and.w	r3, r3, #3
  40b7c8:	2b01      	cmp	r3, #1
  40b7ca:	d90e      	bls.n	40b7ea <pmc_sleep+0x126>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40b7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b7ce:	f023 0303 	bic.w	r3, r3, #3
  40b7d2:	f043 0301 	orr.w	r3, r3, #1
  40b7d6:	643b      	str	r3, [r7, #64]	; 0x40
		PMC->PMC_MCKR = mckr;
  40b7d8:	4b40      	ldr	r3, [pc, #256]	; (40b8dc <pmc_sleep+0x218>)
  40b7da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40b7dc:	631a      	str	r2, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b7de:	4b3f      	ldr	r3, [pc, #252]	; (40b8dc <pmc_sleep+0x218>)
  40b7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b7e2:	f003 0308 	and.w	r3, r3, #8
  40b7e6:	2b00      	cmp	r3, #0
  40b7e8:	d0f9      	beq.n	40b7de <pmc_sleep+0x11a>
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  40b7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b7ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40b7f0:	2b00      	cmp	r3, #0
  40b7f2:	d00c      	beq.n	40b80e <pmc_sleep+0x14a>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40b7fa:	643b      	str	r3, [r7, #64]	; 0x40
		PMC->PMC_MCKR = mckr;
  40b7fc:	4b37      	ldr	r3, [pc, #220]	; (40b8dc <pmc_sleep+0x218>)
  40b7fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40b800:	631a      	str	r2, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b802:	4b36      	ldr	r3, [pc, #216]	; (40b8dc <pmc_sleep+0x218>)
  40b804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b806:	f003 0308 	and.w	r3, r3, #8
  40b80a:	2b00      	cmp	r3, #0
  40b80c:	d0f9      	beq.n	40b802 <pmc_sleep+0x13e>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  40b80e:	4b35      	ldr	r3, [pc, #212]	; (40b8e4 <pmc_sleep+0x220>)
  40b810:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	pmc_disable_pllbck();
  40b812:	4b35      	ldr	r3, [pc, #212]	; (40b8e8 <pmc_sleep+0x224>)
  40b814:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40b816:	4b31      	ldr	r3, [pc, #196]	; (40b8dc <pmc_sleep+0x218>)
  40b818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40b81e:	2b00      	cmp	r3, #0
  40b820:	d0f9      	beq.n	40b816 <pmc_sleep+0x152>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40b822:	4a2e      	ldr	r2, [pc, #184]	; (40b8dc <pmc_sleep+0x218>)
  40b824:	4b2d      	ldr	r3, [pc, #180]	; (40b8dc <pmc_sleep+0x218>)
  40b826:	6a1b      	ldr	r3, [r3, #32]
  40b828:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40b82c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b830:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b834:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40b836:	4b29      	ldr	r3, [pc, #164]	; (40b8dc <pmc_sleep+0x218>)
  40b838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b83a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40b83e:	2b00      	cmp	r3, #0
  40b840:	d0f9      	beq.n	40b836 <pmc_sleep+0x172>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40b842:	4b27      	ldr	r3, [pc, #156]	; (40b8e0 <pmc_sleep+0x21c>)
  40b844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40b846:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  40b84a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  40b84c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
  40b850:	2b00      	cmp	r3, #0
  40b852:	d009      	beq.n	40b868 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b854:	4a21      	ldr	r2, [pc, #132]	; (40b8dc <pmc_sleep+0x218>)
  40b856:	4b21      	ldr	r3, [pc, #132]	; (40b8dc <pmc_sleep+0x218>)
  40b858:	6a1b      	ldr	r3, [r3, #32]
  40b85a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b85e:	f023 0301 	bic.w	r3, r3, #1
  40b862:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b866:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  40b868:	4b19      	ldr	r3, [pc, #100]	; (40b8d0 <pmc_sleep+0x20c>)
  40b86a:	2201      	movs	r2, #1
  40b86c:	701a      	strb	r2, [r3, #0]
  40b86e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40b872:	b662      	cpsie	i

		pmc_enable_waitmode();
  40b874:	4b1d      	ldr	r3, [pc, #116]	; (40b8ec <pmc_sleep+0x228>)
  40b876:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40b878:	b672      	cpsid	i
  40b87a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40b87e:	4b14      	ldr	r3, [pc, #80]	; (40b8d0 <pmc_sleep+0x20c>)
  40b880:	2200      	movs	r2, #0
  40b882:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  40b884:	69fc      	ldr	r4, [r7, #28]
  40b886:	69b8      	ldr	r0, [r7, #24]
  40b888:	6979      	ldr	r1, [r7, #20]
  40b88a:	693a      	ldr	r2, [r7, #16]
  40b88c:	68fb      	ldr	r3, [r7, #12]
  40b88e:	63bc      	str	r4, [r7, #56]	; 0x38
  40b890:	6378      	str	r0, [r7, #52]	; 0x34
  40b892:	6339      	str	r1, [r7, #48]	; 0x30
  40b894:	62fa      	str	r2, [r7, #44]	; 0x2c
  40b896:	62bb      	str	r3, [r7, #40]	; 0x28
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  40b898:	2300      	movs	r3, #0
  40b89a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40b89e:	f003 0302 	and.w	r3, r3, #2
  40b8a2:	2b00      	cmp	r3, #0
  40b8a4:	d028      	beq.n	40b8f8 <pmc_sleep+0x234>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b8a6:	490d      	ldr	r1, [pc, #52]	; (40b8dc <pmc_sleep+0x218>)
  40b8a8:	4b0c      	ldr	r3, [pc, #48]	; (40b8dc <pmc_sleep+0x218>)
  40b8aa:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40b8ac:	4a10      	ldr	r2, [pc, #64]	; (40b8f0 <pmc_sleep+0x22c>)
  40b8ae:	401a      	ands	r2, r3
  40b8b0:	4b10      	ldr	r3, [pc, #64]	; (40b8f4 <pmc_sleep+0x230>)
  40b8b2:	4313      	orrs	r3, r2
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b8b4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40b8b6:	4a09      	ldr	r2, [pc, #36]	; (40b8dc <pmc_sleep+0x218>)
  40b8b8:	4b08      	ldr	r3, [pc, #32]	; (40b8dc <pmc_sleep+0x218>)
  40b8ba:	6a1b      	ldr	r3, [r3, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  40b8bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b8c0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40b8c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40b8c8:	6213      	str	r3, [r2, #32]
  40b8ca:	e050      	b.n	40b96e <pmc_sleep+0x2aa>
  40b8cc:	e000ed00 	.word	0xe000ed00
  40b8d0:	20000364 	.word	0x20000364
  40b8d4:	0040b615 	.word	0x0040b615
  40b8d8:	20008904 	.word	0x20008904
  40b8dc:	400e0400 	.word	0x400e0400
  40b8e0:	400e0a00 	.word	0x400e0a00
  40b8e4:	0040b439 	.word	0x0040b439
  40b8e8:	0040b46d 	.word	0x0040b46d
  40b8ec:	0040b631 	.word	0x0040b631
  40b8f0:	fec8fffc 	.word	0xfec8fffc
  40b8f4:	01370002 	.word	0x01370002
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40b8fa:	f003 0301 	and.w	r3, r3, #1
  40b8fe:	2b00      	cmp	r3, #0
  40b900:	d035      	beq.n	40b96e <pmc_sleep+0x2aa>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40b902:	4b59      	ldr	r3, [pc, #356]	; (40ba68 <pmc_sleep+0x3a4>)
  40b904:	6a1b      	ldr	r3, [r3, #32]
  40b906:	f003 0301 	and.w	r3, r3, #1
  40b90a:	2b00      	cmp	r3, #0
  40b90c:	d111      	bne.n	40b932 <pmc_sleep+0x26e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b90e:	4a56      	ldr	r2, [pc, #344]	; (40ba68 <pmc_sleep+0x3a4>)
  40b910:	4b55      	ldr	r3, [pc, #340]	; (40ba68 <pmc_sleep+0x3a4>)
  40b912:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40b914:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b918:	f023 0303 	bic.w	r3, r3, #3
  40b91c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b920:	f043 0301 	orr.w	r3, r3, #1
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b924:	6213      	str	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40b926:	4b50      	ldr	r3, [pc, #320]	; (40ba68 <pmc_sleep+0x3a4>)
  40b928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b92a:	f003 0301 	and.w	r3, r3, #1
  40b92e:	2b00      	cmp	r3, #0
  40b930:	d0f9      	beq.n	40b926 <pmc_sleep+0x262>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40b932:	4b4d      	ldr	r3, [pc, #308]	; (40ba68 <pmc_sleep+0x3a4>)
  40b934:	6a1b      	ldr	r3, [r3, #32]
  40b936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40b93a:	2b00      	cmp	r3, #0
  40b93c:	d10d      	bne.n	40b95a <pmc_sleep+0x296>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40b93e:	4a4a      	ldr	r2, [pc, #296]	; (40ba68 <pmc_sleep+0x3a4>)
  40b940:	4b49      	ldr	r3, [pc, #292]	; (40ba68 <pmc_sleep+0x3a4>)
  40b942:	6a1b      	ldr	r3, [r3, #32]
  40b944:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40b948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40b94c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40b94e:	4b46      	ldr	r3, [pc, #280]	; (40ba68 <pmc_sleep+0x3a4>)
  40b950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40b956:	2b00      	cmp	r3, #0
  40b958:	d0f9      	beq.n	40b94e <pmc_sleep+0x28a>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40b95a:	4a43      	ldr	r2, [pc, #268]	; (40ba68 <pmc_sleep+0x3a4>)
  40b95c:	4b42      	ldr	r3, [pc, #264]	; (40ba68 <pmc_sleep+0x3a4>)
  40b95e:	6a1b      	ldr	r3, [r3, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  40b960:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b964:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40b968:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40b96c:	6213      	str	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40b96e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40b970:	4b3e      	ldr	r3, [pc, #248]	; (40ba6c <pmc_sleep+0x3a8>)
  40b972:	4013      	ands	r3, r2
  40b974:	2b00      	cmp	r3, #0
  40b976:	d008      	beq.n	40b98a <pmc_sleep+0x2c6>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40b978:	4b3b      	ldr	r3, [pc, #236]	; (40ba68 <pmc_sleep+0x3a4>)
  40b97a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40b97c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40b980:	629a      	str	r2, [r3, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  40b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b984:	f043 0302 	orr.w	r3, r3, #2
  40b988:	627b      	str	r3, [r7, #36]	; 0x24
	}
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  40b98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40b98c:	4b37      	ldr	r3, [pc, #220]	; (40ba6c <pmc_sleep+0x3a8>)
  40b98e:	4013      	ands	r3, r2
  40b990:	2b00      	cmp	r3, #0
  40b992:	d006      	beq.n	40b9a2 <pmc_sleep+0x2de>
		PMC->CKGR_PLLBR = pll1_setting;
  40b994:	4b34      	ldr	r3, [pc, #208]	; (40ba68 <pmc_sleep+0x3a4>)
  40b996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40b998:	62da      	str	r2, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  40b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b99c:	f043 0304 	orr.w	r3, r3, #4
  40b9a0:	627b      	str	r3, [r7, #36]	; 0x24
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b9a4:	f003 0303 	and.w	r3, r3, #3
  40b9a8:	2b02      	cmp	r3, #2
  40b9aa:	d002      	beq.n	40b9b2 <pmc_sleep+0x2ee>
  40b9ac:	2b03      	cmp	r3, #3
  40b9ae:	d007      	beq.n	40b9c0 <pmc_sleep+0x2fc>
  40b9b0:	e00c      	b.n	40b9cc <pmc_sleep+0x308>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40b9b2:	4b2d      	ldr	r3, [pc, #180]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b9b6:	f003 0302 	and.w	r3, r3, #2
  40b9ba:	2b00      	cmp	r3, #0
  40b9bc:	d0f9      	beq.n	40b9b2 <pmc_sleep+0x2ee>
  40b9be:	e005      	b.n	40b9cc <pmc_sleep+0x308>
		break;
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	case PMC_MCKR_CSS_PLLB_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  40b9c0:	4b29      	ldr	r3, [pc, #164]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b9c4:	f003 0304 	and.w	r3, r3, #4
  40b9c8:	2b00      	cmp	r3, #0
  40b9ca:	d0f9      	beq.n	40b9c0 <pmc_sleep+0x2fc>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  40b9cc:	4b26      	ldr	r3, [pc, #152]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40b9d0:	623b      	str	r3, [r7, #32]

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40b9d2:	4b25      	ldr	r3, [pc, #148]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9d4:	6a3a      	ldr	r2, [r7, #32]
  40b9d6:	f022 0170 	bic.w	r1, r2, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40b9da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40b9dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40b9e0:	430a      	orrs	r2, r1

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40b9e2:	631a      	str	r2, [r3, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b9e4:	4b20      	ldr	r3, [pc, #128]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b9e8:	f003 0308 	and.w	r3, r3, #8
  40b9ec:	2b00      	cmp	r3, #0
  40b9ee:	d0f9      	beq.n	40b9e4 <pmc_sleep+0x320>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  40b9f0:	4b1f      	ldr	r3, [pc, #124]	; (40ba70 <pmc_sleep+0x3ac>)
  40b9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b9f4:	601a      	str	r2, [r3, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  40b9f6:	4b1c      	ldr	r3, [pc, #112]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40b9fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b9fc:	4b1a      	ldr	r3, [pc, #104]	; (40ba68 <pmc_sleep+0x3a4>)
  40b9fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40ba00:	f003 0308 	and.w	r3, r3, #8
  40ba04:	2b00      	cmp	r3, #0
  40ba06:	d0f9      	beq.n	40b9fc <pmc_sleep+0x338>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  40ba08:	4b17      	ldr	r3, [pc, #92]	; (40ba68 <pmc_sleep+0x3a4>)
  40ba0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ba0e:	4013      	ands	r3, r2
  40ba10:	2b00      	cmp	r3, #0
  40ba12:	d0f9      	beq.n	40ba08 <pmc_sleep+0x344>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40ba14:	4b17      	ldr	r3, [pc, #92]	; (40ba74 <pmc_sleep+0x3b0>)
  40ba16:	2200      	movs	r2, #0
  40ba18:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40ba1a:	4b17      	ldr	r3, [pc, #92]	; (40ba78 <pmc_sleep+0x3b4>)
  40ba1c:	681b      	ldr	r3, [r3, #0]
  40ba1e:	2b00      	cmp	r3, #0
  40ba20:	d005      	beq.n	40ba2e <pmc_sleep+0x36a>
			callback_clocks_restored();
  40ba22:	4b15      	ldr	r3, [pc, #84]	; (40ba78 <pmc_sleep+0x3b4>)
  40ba24:	681b      	ldr	r3, [r3, #0]
  40ba26:	4798      	blx	r3
			callback_clocks_restored = NULL;
  40ba28:	4b13      	ldr	r3, [pc, #76]	; (40ba78 <pmc_sleep+0x3b4>)
  40ba2a:	2200      	movs	r2, #0
  40ba2c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40ba2e:	4b13      	ldr	r3, [pc, #76]	; (40ba7c <pmc_sleep+0x3b8>)
  40ba30:	2201      	movs	r2, #1
  40ba32:	701a      	strb	r2, [r3, #0]
  40ba34:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40ba38:	b662      	cpsie	i

		break;
  40ba3a:	bf00      	nop
  40ba3c:	e010      	b.n	40ba60 <pmc_sleep+0x39c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40ba3e:	4b10      	ldr	r3, [pc, #64]	; (40ba80 <pmc_sleep+0x3bc>)
  40ba40:	4a0f      	ldr	r2, [pc, #60]	; (40ba80 <pmc_sleep+0x3bc>)
  40ba42:	6912      	ldr	r2, [r2, #16]
  40ba44:	f042 0204 	orr.w	r2, r2, #4
  40ba48:	611a      	str	r2, [r3, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40ba4a:	4b0e      	ldr	r3, [pc, #56]	; (40ba84 <pmc_sleep+0x3c0>)
  40ba4c:	4a0e      	ldr	r2, [pc, #56]	; (40ba88 <pmc_sleep+0x3c4>)
  40ba4e:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40ba50:	4b0a      	ldr	r3, [pc, #40]	; (40ba7c <pmc_sleep+0x3b8>)
  40ba52:	2201      	movs	r2, #1
  40ba54:	701a      	strb	r2, [r3, #0]
  40ba56:	f3bf 8f5f 	dmb	sy
  40ba5a:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40ba5c:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  40ba5e:	bf00      	nop
#endif
	}
}
  40ba60:	3764      	adds	r7, #100	; 0x64
  40ba62:	46bd      	mov	sp, r7
  40ba64:	bd90      	pop	{r4, r7, pc}
  40ba66:	bf00      	nop
  40ba68:	400e0400 	.word	0x400e0400
  40ba6c:	07ff0000 	.word	0x07ff0000
  40ba70:	400e0a00 	.word	0x400e0a00
  40ba74:	20008904 	.word	0x20008904
  40ba78:	20008908 	.word	0x20008908
  40ba7c:	20000364 	.word	0x20000364
  40ba80:	e000ed00 	.word	0xe000ed00
  40ba84:	400e1410 	.word	0x400e1410
  40ba88:	a5000004 	.word	0xa5000004

0040ba8c <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
  40ba8c:	b480      	push	{r7}
  40ba8e:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  40ba90:	4b09      	ldr	r3, [pc, #36]	; (40bab8 <pmc_is_wakeup_clocks_restored+0x2c>)
  40ba92:	781b      	ldrb	r3, [r3, #0]
  40ba94:	b2db      	uxtb	r3, r3
  40ba96:	2b00      	cmp	r3, #0
  40ba98:	bf0c      	ite	eq
  40ba9a:	2300      	moveq	r3, #0
  40ba9c:	2301      	movne	r3, #1
  40ba9e:	b2db      	uxtb	r3, r3
  40baa0:	f083 0301 	eor.w	r3, r3, #1
  40baa4:	b2db      	uxtb	r3, r3
  40baa6:	f003 0301 	and.w	r3, r3, #1
  40baaa:	b2db      	uxtb	r3, r3
}
  40baac:	4618      	mov	r0, r3
  40baae:	46bd      	mov	sp, r7
  40bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bab4:	4770      	bx	lr
  40bab6:	bf00      	nop
  40bab8:	20008904 	.word	0x20008904

0040babc <wdt_get_timeout_value>:
 *
 * \return If the desired period is beyond the watchdog period, this function
 * returns WDT_INVALID_ARGUMENT. Otherwise it returns valid value.
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
  40babc:	b480      	push	{r7}
  40babe:	b085      	sub	sp, #20
  40bac0:	af00      	add	r7, sp, #0
  40bac2:	6078      	str	r0, [r7, #4]
  40bac4:	6039      	str	r1, [r7, #0]
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
  40bac6:	4a10      	ldr	r2, [pc, #64]	; (40bb08 <wdt_get_timeout_value+0x4c>)
  40bac8:	683b      	ldr	r3, [r7, #0]
  40baca:	fbb2 f3f3 	udiv	r3, r2, r3
  40bace:	60fb      	str	r3, [r7, #12]
	max = min * WDT_MAX_VALUE;
  40bad0:	68fa      	ldr	r2, [r7, #12]
  40bad2:	4613      	mov	r3, r2
  40bad4:	031b      	lsls	r3, r3, #12
  40bad6:	1a9b      	subs	r3, r3, r2
  40bad8:	60bb      	str	r3, [r7, #8]

	if ((ul_us < min) || (ul_us > max)) {
  40bada:	687a      	ldr	r2, [r7, #4]
  40badc:	68fb      	ldr	r3, [r7, #12]
  40bade:	429a      	cmp	r2, r3
  40bae0:	d303      	bcc.n	40baea <wdt_get_timeout_value+0x2e>
  40bae2:	687a      	ldr	r2, [r7, #4]
  40bae4:	68bb      	ldr	r3, [r7, #8]
  40bae6:	429a      	cmp	r2, r3
  40bae8:	d902      	bls.n	40baf0 <wdt_get_timeout_value+0x34>
		return WDT_INVALID_ARGUMENT;
  40baea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40baee:	e005      	b.n	40bafc <wdt_get_timeout_value+0x40>
	}

	return WDT_MR_WDV(ul_us / min);
  40baf0:	687a      	ldr	r2, [r7, #4]
  40baf2:	68fb      	ldr	r3, [r7, #12]
  40baf4:	fbb2 f3f3 	udiv	r3, r2, r3
  40baf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
  40bafc:	4618      	mov	r0, r3
  40bafe:	3714      	adds	r7, #20
  40bb00:	46bd      	mov	sp, r7
  40bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb06:	4770      	bx	lr
  40bb08:	07a12000 	.word	0x07a12000

0040bb0c <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
  40bb0c:	b480      	push	{r7}
  40bb0e:	b085      	sub	sp, #20
  40bb10:	af00      	add	r7, sp, #0
  40bb12:	60f8      	str	r0, [r7, #12]
  40bb14:	60b9      	str	r1, [r7, #8]
  40bb16:	80fa      	strh	r2, [r7, #6]
  40bb18:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
  40bb1a:	88fb      	ldrh	r3, [r7, #6]
  40bb1c:	f3c3 020b 	ubfx	r2, r3, #0, #12
  40bb20:	68bb      	ldr	r3, [r7, #8]
  40bb22:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40bb24:	88bb      	ldrh	r3, [r7, #4]
  40bb26:	041b      	lsls	r3, r3, #16
  40bb28:	4619      	mov	r1, r3
  40bb2a:	4b05      	ldr	r3, [pc, #20]	; (40bb40 <wdt_init+0x34>)
  40bb2c:	400b      	ands	r3, r1
  40bb2e:	431a      	orrs	r2, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
  40bb30:	68fb      	ldr	r3, [r7, #12]
  40bb32:	605a      	str	r2, [r3, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
  40bb34:	3714      	adds	r7, #20
  40bb36:	46bd      	mov	sp, r7
  40bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb3c:	4770      	bx	lr
  40bb3e:	bf00      	nop
  40bb40:	0fff0000 	.word	0x0fff0000

0040bb44 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
  40bb44:	b480      	push	{r7}
  40bb46:	b083      	sub	sp, #12
  40bb48:	af00      	add	r7, sp, #0
  40bb4a:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
  40bb4c:	687a      	ldr	r2, [r7, #4]
  40bb4e:	4b05      	ldr	r3, [pc, #20]	; (40bb64 <wdt_restart+0x20>)
  40bb50:	429a      	cmp	r2, r3
  40bb52:	d102      	bne.n	40bb5a <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  40bb54:	687b      	ldr	r3, [r7, #4]
  40bb56:	4a04      	ldr	r2, [pc, #16]	; (40bb68 <wdt_restart+0x24>)
  40bb58:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
  40bb5a:	370c      	adds	r7, #12
  40bb5c:	46bd      	mov	sp, r7
  40bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb62:	4770      	bx	lr
  40bb64:	400e1450 	.word	0x400e1450
  40bb68:	a5000001 	.word	0xa5000001

0040bb6c <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
  40bb6c:	b480      	push	{r7}
  40bb6e:	b083      	sub	sp, #12
  40bb70:	af00      	add	r7, sp, #0
  40bb72:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
  40bb74:	687b      	ldr	r3, [r7, #4]
  40bb76:	689b      	ldr	r3, [r3, #8]
}
  40bb78:	4618      	mov	r0, r3
  40bb7a:	370c      	adds	r7, #12
  40bb7c:	46bd      	mov	sp, r7
  40bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb82:	4770      	bx	lr

0040bb84 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40bb84:	b580      	push	{r7, lr}
  40bb86:	b084      	sub	sp, #16
  40bb88:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40bb8a:	4b27      	ldr	r3, [pc, #156]	; (40bc28 <Reset_Handler+0xa4>)
  40bb8c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40bb8e:	4b27      	ldr	r3, [pc, #156]	; (40bc2c <Reset_Handler+0xa8>)
  40bb90:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40bb92:	68fa      	ldr	r2, [r7, #12]
  40bb94:	68bb      	ldr	r3, [r7, #8]
  40bb96:	429a      	cmp	r2, r3
  40bb98:	d90d      	bls.n	40bbb6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40bb9a:	e007      	b.n	40bbac <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40bb9c:	68bb      	ldr	r3, [r7, #8]
  40bb9e:	1d1a      	adds	r2, r3, #4
  40bba0:	60ba      	str	r2, [r7, #8]
  40bba2:	68fa      	ldr	r2, [r7, #12]
  40bba4:	1d11      	adds	r1, r2, #4
  40bba6:	60f9      	str	r1, [r7, #12]
  40bba8:	6812      	ldr	r2, [r2, #0]
  40bbaa:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40bbac:	68ba      	ldr	r2, [r7, #8]
  40bbae:	4b20      	ldr	r3, [pc, #128]	; (40bc30 <Reset_Handler+0xac>)
  40bbb0:	429a      	cmp	r2, r3
  40bbb2:	d3f3      	bcc.n	40bb9c <Reset_Handler+0x18>
  40bbb4:	e020      	b.n	40bbf8 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40bbb6:	68fa      	ldr	r2, [r7, #12]
  40bbb8:	68bb      	ldr	r3, [r7, #8]
  40bbba:	429a      	cmp	r2, r3
  40bbbc:	d21c      	bcs.n	40bbf8 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40bbbe:	4a1c      	ldr	r2, [pc, #112]	; (40bc30 <Reset_Handler+0xac>)
  40bbc0:	4b1a      	ldr	r3, [pc, #104]	; (40bc2c <Reset_Handler+0xa8>)
  40bbc2:	1ad3      	subs	r3, r2, r3
  40bbc4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40bbc6:	68fa      	ldr	r2, [r7, #12]
  40bbc8:	687b      	ldr	r3, [r7, #4]
  40bbca:	4413      	add	r3, r2
  40bbcc:	3b04      	subs	r3, #4
  40bbce:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40bbd0:	68ba      	ldr	r2, [r7, #8]
  40bbd2:	687b      	ldr	r3, [r7, #4]
  40bbd4:	4413      	add	r3, r2
  40bbd6:	3b04      	subs	r3, #4
  40bbd8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40bbda:	e00a      	b.n	40bbf2 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40bbdc:	68bb      	ldr	r3, [r7, #8]
  40bbde:	1f1a      	subs	r2, r3, #4
  40bbe0:	60ba      	str	r2, [r7, #8]
  40bbe2:	68fa      	ldr	r2, [r7, #12]
  40bbe4:	1f11      	subs	r1, r2, #4
  40bbe6:	60f9      	str	r1, [r7, #12]
  40bbe8:	6812      	ldr	r2, [r2, #0]
  40bbea:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40bbec:	687b      	ldr	r3, [r7, #4]
  40bbee:	3b04      	subs	r3, #4
  40bbf0:	607b      	str	r3, [r7, #4]
  40bbf2:	687b      	ldr	r3, [r7, #4]
  40bbf4:	2b00      	cmp	r3, #0
  40bbf6:	d1f1      	bne.n	40bbdc <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40bbf8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bbfa:	4b0e      	ldr	r3, [pc, #56]	; (40bc34 <Reset_Handler+0xb0>)
  40bbfc:	60bb      	str	r3, [r7, #8]
  40bbfe:	e004      	b.n	40bc0a <Reset_Handler+0x86>
		*pDest++ = 0;
  40bc00:	68bb      	ldr	r3, [r7, #8]
  40bc02:	1d1a      	adds	r2, r3, #4
  40bc04:	60ba      	str	r2, [r7, #8]
  40bc06:	2200      	movs	r2, #0
  40bc08:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bc0a:	68ba      	ldr	r2, [r7, #8]
  40bc0c:	4b0a      	ldr	r3, [pc, #40]	; (40bc38 <Reset_Handler+0xb4>)
  40bc0e:	429a      	cmp	r2, r3
  40bc10:	d3f6      	bcc.n	40bc00 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40bc12:	4b0a      	ldr	r3, [pc, #40]	; (40bc3c <Reset_Handler+0xb8>)
  40bc14:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40bc16:	4b0a      	ldr	r3, [pc, #40]	; (40bc40 <Reset_Handler+0xbc>)
  40bc18:	68fa      	ldr	r2, [r7, #12]
  40bc1a:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40bc1c:	4b09      	ldr	r3, [pc, #36]	; (40bc44 <Reset_Handler+0xc0>)
  40bc1e:	4798      	blx	r3

	/* Branch to main function */
	main();
  40bc20:	4b09      	ldr	r3, [pc, #36]	; (40bc48 <Reset_Handler+0xc4>)
  40bc22:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40bc24:	e7fe      	b.n	40bc24 <Reset_Handler+0xa0>
  40bc26:	bf00      	nop
  40bc28:	0041626c 	.word	0x0041626c
  40bc2c:	20000000 	.word	0x20000000
  40bc30:	20000c14 	.word	0x20000c14
  40bc34:	20000c18 	.word	0x20000c18
  40bc38:	200099cc 	.word	0x200099cc
  40bc3c:	00400000 	.word	0x00400000
  40bc40:	e000ed00 	.word	0xe000ed00
  40bc44:	0040c681 	.word	0x0040c681
  40bc48:	0040c02d 	.word	0x0040c02d

0040bc4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40bc4c:	b480      	push	{r7}
  40bc4e:	af00      	add	r7, sp, #0
	while (1) {
	}
  40bc50:	e7fe      	b.n	40bc50 <Dummy_Handler+0x4>
  40bc52:	bf00      	nop

0040bc54 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40bc54:	b480      	push	{r7}
  40bc56:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40bc58:	4b5d      	ldr	r3, [pc, #372]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bc5c:	f003 0303 	and.w	r3, r3, #3
  40bc60:	2b03      	cmp	r3, #3
  40bc62:	f200 8096 	bhi.w	40bd92 <SystemCoreClockUpdate+0x13e>
  40bc66:	a101      	add	r1, pc, #4	; (adr r1, 40bc6c <SystemCoreClockUpdate+0x18>)
  40bc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40bc6c:	0040bc7d 	.word	0x0040bc7d
  40bc70:	0040bc9d 	.word	0x0040bc9d
  40bc74:	0040bce7 	.word	0x0040bce7
  40bc78:	0040bce7 	.word	0x0040bce7
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40bc7c:	4b55      	ldr	r3, [pc, #340]	; (40bdd4 <SystemCoreClockUpdate+0x180>)
  40bc7e:	695b      	ldr	r3, [r3, #20]
  40bc80:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40bc84:	2b00      	cmp	r3, #0
  40bc86:	d004      	beq.n	40bc92 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40bc88:	4b53      	ldr	r3, [pc, #332]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bc8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40bc8e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40bc90:	e080      	b.n	40bd94 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40bc92:	4b51      	ldr	r3, [pc, #324]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bc94:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40bc98:	601a      	str	r2, [r3, #0]
			}
		break;
  40bc9a:	e07b      	b.n	40bd94 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40bc9c:	4b4c      	ldr	r3, [pc, #304]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bc9e:	6a1b      	ldr	r3, [r3, #32]
  40bca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40bca4:	2b00      	cmp	r3, #0
  40bca6:	d003      	beq.n	40bcb0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40bca8:	4b4b      	ldr	r3, [pc, #300]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcaa:	4a4c      	ldr	r2, [pc, #304]	; (40bddc <SystemCoreClockUpdate+0x188>)
  40bcac:	601a      	str	r2, [r3, #0]
  40bcae:	e019      	b.n	40bce4 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40bcb0:	4b49      	ldr	r3, [pc, #292]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcb2:	4a4b      	ldr	r2, [pc, #300]	; (40bde0 <SystemCoreClockUpdate+0x18c>)
  40bcb4:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40bcb6:	4b46      	ldr	r3, [pc, #280]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bcb8:	6a1b      	ldr	r3, [r3, #32]
  40bcba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bcbe:	2b10      	cmp	r3, #16
  40bcc0:	d008      	beq.n	40bcd4 <SystemCoreClockUpdate+0x80>
  40bcc2:	2b20      	cmp	r3, #32
  40bcc4:	d00a      	beq.n	40bcdc <SystemCoreClockUpdate+0x88>
  40bcc6:	2b00      	cmp	r3, #0
  40bcc8:	d000      	beq.n	40bccc <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40bcca:	e00b      	b.n	40bce4 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40bccc:	4b42      	ldr	r3, [pc, #264]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcce:	4a44      	ldr	r2, [pc, #272]	; (40bde0 <SystemCoreClockUpdate+0x18c>)
  40bcd0:	601a      	str	r2, [r3, #0]
			break;
  40bcd2:	e007      	b.n	40bce4 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40bcd4:	4b40      	ldr	r3, [pc, #256]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcd6:	4a43      	ldr	r2, [pc, #268]	; (40bde4 <SystemCoreClockUpdate+0x190>)
  40bcd8:	601a      	str	r2, [r3, #0]
			break;
  40bcda:	e003      	b.n	40bce4 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40bcdc:	4b3e      	ldr	r3, [pc, #248]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcde:	4a3f      	ldr	r2, [pc, #252]	; (40bddc <SystemCoreClockUpdate+0x188>)
  40bce0:	601a      	str	r2, [r3, #0]
			break;
  40bce2:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40bce4:	e056      	b.n	40bd94 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40bce6:	4b3a      	ldr	r3, [pc, #232]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bce8:	6a1b      	ldr	r3, [r3, #32]
  40bcea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40bcee:	2b00      	cmp	r3, #0
  40bcf0:	d003      	beq.n	40bcfa <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40bcf2:	4b39      	ldr	r3, [pc, #228]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcf4:	4a39      	ldr	r2, [pc, #228]	; (40bddc <SystemCoreClockUpdate+0x188>)
  40bcf6:	601a      	str	r2, [r3, #0]
  40bcf8:	e019      	b.n	40bd2e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40bcfa:	4b37      	ldr	r3, [pc, #220]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bcfc:	4a38      	ldr	r2, [pc, #224]	; (40bde0 <SystemCoreClockUpdate+0x18c>)
  40bcfe:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40bd00:	4b33      	ldr	r3, [pc, #204]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd02:	6a1b      	ldr	r3, [r3, #32]
  40bd04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bd08:	2b10      	cmp	r3, #16
  40bd0a:	d008      	beq.n	40bd1e <SystemCoreClockUpdate+0xca>
  40bd0c:	2b20      	cmp	r3, #32
  40bd0e:	d00a      	beq.n	40bd26 <SystemCoreClockUpdate+0xd2>
  40bd10:	2b00      	cmp	r3, #0
  40bd12:	d000      	beq.n	40bd16 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40bd14:	e00b      	b.n	40bd2e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40bd16:	4b30      	ldr	r3, [pc, #192]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd18:	4a31      	ldr	r2, [pc, #196]	; (40bde0 <SystemCoreClockUpdate+0x18c>)
  40bd1a:	601a      	str	r2, [r3, #0]
					break;
  40bd1c:	e007      	b.n	40bd2e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40bd1e:	4b2e      	ldr	r3, [pc, #184]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd20:	4a30      	ldr	r2, [pc, #192]	; (40bde4 <SystemCoreClockUpdate+0x190>)
  40bd22:	601a      	str	r2, [r3, #0]
					break;
  40bd24:	e003      	b.n	40bd2e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40bd26:	4b2c      	ldr	r3, [pc, #176]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd28:	4a2c      	ldr	r2, [pc, #176]	; (40bddc <SystemCoreClockUpdate+0x188>)
  40bd2a:	601a      	str	r2, [r3, #0]
					break;
  40bd2c:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40bd2e:	4b28      	ldr	r3, [pc, #160]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bd32:	f003 0303 	and.w	r3, r3, #3
  40bd36:	2b02      	cmp	r3, #2
  40bd38:	d115      	bne.n	40bd66 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40bd3a:	4b25      	ldr	r3, [pc, #148]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40bd3e:	4b2a      	ldr	r3, [pc, #168]	; (40bde8 <SystemCoreClockUpdate+0x194>)
  40bd40:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40bd42:	0c1b      	lsrs	r3, r3, #16
  40bd44:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40bd46:	4a24      	ldr	r2, [pc, #144]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd48:	6812      	ldr	r2, [r2, #0]
  40bd4a:	fb02 f203 	mul.w	r2, r2, r3
  40bd4e:	4b22      	ldr	r3, [pc, #136]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd50:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40bd52:	4b21      	ldr	r3, [pc, #132]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd54:	681a      	ldr	r2, [r3, #0]
  40bd56:	4b1e      	ldr	r3, [pc, #120]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40bd5a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40bd5c:	fbb2 f2f3 	udiv	r2, r2, r3
  40bd60:	4b1d      	ldr	r3, [pc, #116]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd62:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40bd64:	e016      	b.n	40bd94 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40bd66:	4b1a      	ldr	r3, [pc, #104]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bd6a:	4b1f      	ldr	r3, [pc, #124]	; (40bde8 <SystemCoreClockUpdate+0x194>)
  40bd6c:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40bd6e:	0c1b      	lsrs	r3, r3, #16
  40bd70:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40bd72:	4a19      	ldr	r2, [pc, #100]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd74:	6812      	ldr	r2, [r2, #0]
  40bd76:	fb02 f203 	mul.w	r2, r2, r3
  40bd7a:	4b17      	ldr	r3, [pc, #92]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd7c:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40bd7e:	4b16      	ldr	r3, [pc, #88]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd80:	681a      	ldr	r2, [r3, #0]
  40bd82:	4b13      	ldr	r3, [pc, #76]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40bd86:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40bd88:	fbb2 f2f3 	udiv	r2, r2, r3
  40bd8c:	4b12      	ldr	r3, [pc, #72]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bd8e:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40bd90:	e000      	b.n	40bd94 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40bd92:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40bd94:	4b0e      	ldr	r3, [pc, #56]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bd98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bd9c:	2b70      	cmp	r3, #112	; 0x70
  40bd9e:	d108      	bne.n	40bdb2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  40bda0:	4b0d      	ldr	r3, [pc, #52]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bda2:	681a      	ldr	r2, [r3, #0]
  40bda4:	4b11      	ldr	r3, [pc, #68]	; (40bdec <SystemCoreClockUpdate+0x198>)
  40bda6:	fba3 1302 	umull	r1, r3, r3, r2
  40bdaa:	085a      	lsrs	r2, r3, #1
  40bdac:	4b0a      	ldr	r3, [pc, #40]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bdae:	601a      	str	r2, [r3, #0]
  40bdb0:	e009      	b.n	40bdc6 <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  40bdb2:	4b09      	ldr	r3, [pc, #36]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bdb4:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40bdb6:	4b06      	ldr	r3, [pc, #24]	; (40bdd0 <SystemCoreClockUpdate+0x17c>)
  40bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bdba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bdbe:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40bdc0:	40da      	lsrs	r2, r3
  40bdc2:	4b05      	ldr	r3, [pc, #20]	; (40bdd8 <SystemCoreClockUpdate+0x184>)
  40bdc4:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40bdc6:	46bd      	mov	sp, r7
  40bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdcc:	4770      	bx	lr
  40bdce:	bf00      	nop
  40bdd0:	400e0400 	.word	0x400e0400
  40bdd4:	400e1410 	.word	0x400e1410
  40bdd8:	2000036c 	.word	0x2000036c
  40bddc:	00b71b00 	.word	0x00b71b00
  40bde0:	003d0900 	.word	0x003d0900
  40bde4:	007a1200 	.word	0x007a1200
  40bde8:	07ff0000 	.word	0x07ff0000
  40bdec:	aaaaaaab 	.word	0xaaaaaaab

0040bdf0 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40bdf0:	b480      	push	{r7}
  40bdf2:	b083      	sub	sp, #12
  40bdf4:	af00      	add	r7, sp, #0
  40bdf6:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40bdf8:	687a      	ldr	r2, [r7, #4]
  40bdfa:	4b18      	ldr	r3, [pc, #96]	; (40be5c <system_init_flash+0x6c>)
  40bdfc:	429a      	cmp	r2, r3
  40bdfe:	d804      	bhi.n	40be0a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40be00:	4b17      	ldr	r3, [pc, #92]	; (40be60 <system_init_flash+0x70>)
  40be02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40be06:	601a      	str	r2, [r3, #0]
  40be08:	e023      	b.n	40be52 <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40be0a:	687a      	ldr	r2, [r7, #4]
  40be0c:	4b15      	ldr	r3, [pc, #84]	; (40be64 <system_init_flash+0x74>)
  40be0e:	429a      	cmp	r2, r3
  40be10:	d803      	bhi.n	40be1a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40be12:	4b13      	ldr	r3, [pc, #76]	; (40be60 <system_init_flash+0x70>)
  40be14:	4a14      	ldr	r2, [pc, #80]	; (40be68 <system_init_flash+0x78>)
  40be16:	601a      	str	r2, [r3, #0]
  40be18:	e01b      	b.n	40be52 <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40be1a:	687a      	ldr	r2, [r7, #4]
  40be1c:	4b13      	ldr	r3, [pc, #76]	; (40be6c <system_init_flash+0x7c>)
  40be1e:	429a      	cmp	r2, r3
  40be20:	d803      	bhi.n	40be2a <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40be22:	4b0f      	ldr	r3, [pc, #60]	; (40be60 <system_init_flash+0x70>)
  40be24:	4a12      	ldr	r2, [pc, #72]	; (40be70 <system_init_flash+0x80>)
  40be26:	601a      	str	r2, [r3, #0]
  40be28:	e013      	b.n	40be52 <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40be2a:	687a      	ldr	r2, [r7, #4]
  40be2c:	4b11      	ldr	r3, [pc, #68]	; (40be74 <system_init_flash+0x84>)
  40be2e:	429a      	cmp	r2, r3
  40be30:	d803      	bhi.n	40be3a <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40be32:	4b0b      	ldr	r3, [pc, #44]	; (40be60 <system_init_flash+0x70>)
  40be34:	4a10      	ldr	r2, [pc, #64]	; (40be78 <system_init_flash+0x88>)
  40be36:	601a      	str	r2, [r3, #0]
  40be38:	e00b      	b.n	40be52 <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40be3a:	687a      	ldr	r2, [r7, #4]
  40be3c:	4b0f      	ldr	r3, [pc, #60]	; (40be7c <system_init_flash+0x8c>)
  40be3e:	429a      	cmp	r2, r3
  40be40:	d804      	bhi.n	40be4c <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40be42:	4b07      	ldr	r3, [pc, #28]	; (40be60 <system_init_flash+0x70>)
  40be44:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40be48:	601a      	str	r2, [r3, #0]
  40be4a:	e002      	b.n	40be52 <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40be4c:	4b04      	ldr	r3, [pc, #16]	; (40be60 <system_init_flash+0x70>)
  40be4e:	4a0c      	ldr	r2, [pc, #48]	; (40be80 <system_init_flash+0x90>)
  40be50:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40be52:	370c      	adds	r7, #12
  40be54:	46bd      	mov	sp, r7
  40be56:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be5a:	4770      	bx	lr
  40be5c:	01ba813f 	.word	0x01ba813f
  40be60:	400e0a00 	.word	0x400e0a00
  40be64:	0375027f 	.word	0x0375027f
  40be68:	04000100 	.word	0x04000100
  40be6c:	053ec5ff 	.word	0x053ec5ff
  40be70:	04000200 	.word	0x04000200
  40be74:	00a4cb7f 	.word	0x00a4cb7f
  40be78:	04000300 	.word	0x04000300
  40be7c:	07270dff 	.word	0x07270dff
  40be80:	04000500 	.word	0x04000500

0040be84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40be84:	b480      	push	{r7}
  40be86:	b085      	sub	sp, #20
  40be88:	af00      	add	r7, sp, #0
  40be8a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40be8c:	4b10      	ldr	r3, [pc, #64]	; (40bed0 <_sbrk+0x4c>)
  40be8e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40be90:	4b10      	ldr	r3, [pc, #64]	; (40bed4 <_sbrk+0x50>)
  40be92:	681b      	ldr	r3, [r3, #0]
  40be94:	2b00      	cmp	r3, #0
  40be96:	d102      	bne.n	40be9e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40be98:	4b0e      	ldr	r3, [pc, #56]	; (40bed4 <_sbrk+0x50>)
  40be9a:	4a0f      	ldr	r2, [pc, #60]	; (40bed8 <_sbrk+0x54>)
  40be9c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40be9e:	4b0d      	ldr	r3, [pc, #52]	; (40bed4 <_sbrk+0x50>)
  40bea0:	681b      	ldr	r3, [r3, #0]
  40bea2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40bea4:	68ba      	ldr	r2, [r7, #8]
  40bea6:	687b      	ldr	r3, [r7, #4]
  40bea8:	441a      	add	r2, r3
  40beaa:	68fb      	ldr	r3, [r7, #12]
  40beac:	429a      	cmp	r2, r3
  40beae:	dd02      	ble.n	40beb6 <_sbrk+0x32>
		return (caddr_t) -1;	
  40beb0:	f04f 33ff 	mov.w	r3, #4294967295
  40beb4:	e006      	b.n	40bec4 <_sbrk+0x40>
	}

	heap += incr;
  40beb6:	4b07      	ldr	r3, [pc, #28]	; (40bed4 <_sbrk+0x50>)
  40beb8:	681a      	ldr	r2, [r3, #0]
  40beba:	687b      	ldr	r3, [r7, #4]
  40bebc:	441a      	add	r2, r3
  40bebe:	4b05      	ldr	r3, [pc, #20]	; (40bed4 <_sbrk+0x50>)
  40bec0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  40bec2:	68bb      	ldr	r3, [r7, #8]
}
  40bec4:	4618      	mov	r0, r3
  40bec6:	3714      	adds	r7, #20
  40bec8:	46bd      	mov	sp, r7
  40beca:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bece:	4770      	bx	lr
  40bed0:	2000fffc 	.word	0x2000fffc
  40bed4:	2000890c 	.word	0x2000890c
  40bed8:	2000c9d0 	.word	0x2000c9d0

0040bedc <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40bedc:	b480      	push	{r7}
  40bede:	b083      	sub	sp, #12
  40bee0:	af00      	add	r7, sp, #0
  40bee2:	6078      	str	r0, [r7, #4]
	return -1;
  40bee4:	f04f 33ff 	mov.w	r3, #4294967295
}
  40bee8:	4618      	mov	r0, r3
  40beea:	370c      	adds	r7, #12
  40beec:	46bd      	mov	sp, r7
  40beee:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bef2:	4770      	bx	lr

0040bef4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40bef4:	b480      	push	{r7}
  40bef6:	b083      	sub	sp, #12
  40bef8:	af00      	add	r7, sp, #0
  40befa:	6078      	str	r0, [r7, #4]
  40befc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40befe:	683b      	ldr	r3, [r7, #0]
  40bf00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40bf04:	605a      	str	r2, [r3, #4]

	return 0;
  40bf06:	2300      	movs	r3, #0
}
  40bf08:	4618      	mov	r0, r3
  40bf0a:	370c      	adds	r7, #12
  40bf0c:	46bd      	mov	sp, r7
  40bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf12:	4770      	bx	lr

0040bf14 <_isatty>:

extern int _isatty(int file)
{
  40bf14:	b480      	push	{r7}
  40bf16:	b083      	sub	sp, #12
  40bf18:	af00      	add	r7, sp, #0
  40bf1a:	6078      	str	r0, [r7, #4]
	return 1;
  40bf1c:	2301      	movs	r3, #1
}
  40bf1e:	4618      	mov	r0, r3
  40bf20:	370c      	adds	r7, #12
  40bf22:	46bd      	mov	sp, r7
  40bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf28:	4770      	bx	lr
  40bf2a:	bf00      	nop

0040bf2c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40bf2c:	b480      	push	{r7}
  40bf2e:	b085      	sub	sp, #20
  40bf30:	af00      	add	r7, sp, #0
  40bf32:	60f8      	str	r0, [r7, #12]
  40bf34:	60b9      	str	r1, [r7, #8]
  40bf36:	607a      	str	r2, [r7, #4]
	return 0;
  40bf38:	2300      	movs	r3, #0
}
  40bf3a:	4618      	mov	r0, r3
  40bf3c:	3714      	adds	r7, #20
  40bf3e:	46bd      	mov	sp, r7
  40bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf44:	4770      	bx	lr
  40bf46:	bf00      	nop

0040bf48 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40bf48:	b480      	push	{r7}
  40bf4a:	b08b      	sub	sp, #44	; 0x2c
  40bf4c:	af00      	add	r7, sp, #0
  40bf4e:	6078      	str	r0, [r7, #4]
  40bf50:	460b      	mov	r3, r1
  40bf52:	70fb      	strb	r3, [r7, #3]
  40bf54:	687b      	ldr	r3, [r7, #4]
  40bf56:	627b      	str	r3, [r7, #36]	; 0x24
  40bf58:	78fb      	ldrb	r3, [r7, #3]
  40bf5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40bf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bf60:	61fb      	str	r3, [r7, #28]
  40bf62:	69fb      	ldr	r3, [r7, #28]
  40bf64:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40bf66:	69bb      	ldr	r3, [r7, #24]
  40bf68:	095b      	lsrs	r3, r3, #5
  40bf6a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40bf6c:	697b      	ldr	r3, [r7, #20]
  40bf6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40bf72:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40bf76:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40bf78:	613b      	str	r3, [r7, #16]

	if (level) {
  40bf7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40bf7e:	2b00      	cmp	r3, #0
  40bf80:	d009      	beq.n	40bf96 <ioport_set_pin_level+0x4e>
  40bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bf84:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40bf86:	68fb      	ldr	r3, [r7, #12]
  40bf88:	f003 031f 	and.w	r3, r3, #31
  40bf8c:	2201      	movs	r2, #1
  40bf8e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40bf90:	693b      	ldr	r3, [r7, #16]
  40bf92:	631a      	str	r2, [r3, #48]	; 0x30
  40bf94:	e008      	b.n	40bfa8 <ioport_set_pin_level+0x60>
  40bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bf98:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40bf9a:	68bb      	ldr	r3, [r7, #8]
  40bf9c:	f003 031f 	and.w	r3, r3, #31
  40bfa0:	2201      	movs	r2, #1
  40bfa2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40bfa4:	693b      	ldr	r3, [r7, #16]
  40bfa6:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40bfa8:	372c      	adds	r7, #44	; 0x2c
  40bfaa:	46bd      	mov	sp, r7
  40bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bfb0:	4770      	bx	lr
  40bfb2:	bf00      	nop

0040bfb4 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40bfb4:	b480      	push	{r7}
  40bfb6:	b089      	sub	sp, #36	; 0x24
  40bfb8:	af00      	add	r7, sp, #0
  40bfba:	6078      	str	r0, [r7, #4]
  40bfbc:	687b      	ldr	r3, [r7, #4]
  40bfbe:	61fb      	str	r3, [r7, #28]
  40bfc0:	69fb      	ldr	r3, [r7, #28]
  40bfc2:	61bb      	str	r3, [r7, #24]
  40bfc4:	69bb      	ldr	r3, [r7, #24]
  40bfc6:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40bfc8:	697b      	ldr	r3, [r7, #20]
  40bfca:	095b      	lsrs	r3, r3, #5
  40bfcc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40bfce:	693b      	ldr	r3, [r7, #16]
  40bfd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40bfd4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40bfd8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40bfda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40bfdc:	69fb      	ldr	r3, [r7, #28]
  40bfde:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40bfe0:	68fb      	ldr	r3, [r7, #12]
  40bfe2:	f003 031f 	and.w	r3, r3, #31
  40bfe6:	2101      	movs	r1, #1
  40bfe8:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40bfec:	4013      	ands	r3, r2
  40bfee:	2b00      	cmp	r3, #0
  40bff0:	bf0c      	ite	eq
  40bff2:	2300      	moveq	r3, #0
  40bff4:	2301      	movne	r3, #1
  40bff6:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  40bff8:	4618      	mov	r0, r3
  40bffa:	3724      	adds	r7, #36	; 0x24
  40bffc:	46bd      	mov	sp, r7
  40bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c002:	4770      	bx	lr

0040c004 <HardFault_Handler>:
#include "chrg_chargeMonitor.h"

extern void xPortSysTickHandler(void);
extern void vApplicationMallocFailedHook( void );
void HardFault_Handler()
{
  40c004:	b480      	push	{r7}
  40c006:	af00      	add	r7, sp, #0
	while(1); 
  40c008:	e7fe      	b.n	40c008 <HardFault_Handler+0x4>
  40c00a:	bf00      	nop

0040c00c <MemManage_Handler>:
}
void MemManage_Handler()
{
  40c00c:	b480      	push	{r7}
  40c00e:	af00      	add	r7, sp, #0
	while(1); 
  40c010:	e7fe      	b.n	40c010 <MemManage_Handler+0x4>
  40c012:	bf00      	nop

0040c014 <BusFault_Handler>:
}
void BusFault_Handler()
{
  40c014:	b480      	push	{r7}
  40c016:	af00      	add	r7, sp, #0
	while(1); 
  40c018:	e7fe      	b.n	40c018 <BusFault_Handler+0x4>
  40c01a:	bf00      	nop

0040c01c <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  40c01c:	b480      	push	{r7}
  40c01e:	af00      	add	r7, sp, #0
	while(1); 
  40c020:	e7fe      	b.n	40c020 <UsageFault_Handler+0x4>
  40c022:	bf00      	nop

0040c024 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  40c024:	b480      	push	{r7}
  40c026:	af00      	add	r7, sp, #0
	while(1);
  40c028:	e7fe      	b.n	40c028 <vApplicationMallocFailedHook+0x4>
  40c02a:	bf00      	nop

0040c02c <main>:
	////sgSysTickCount++;
	//xPortSysTickHandler();
//}

int main (void)
{
  40c02c:	b590      	push	{r4, r7, lr}
  40c02e:	b087      	sub	sp, #28
  40c030:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  40c032:	4b1c      	ldr	r3, [pc, #112]	; (40c0a4 <main+0x78>)
  40c034:	2201      	movs	r2, #1
  40c036:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40c038:	f3bf 8f5f 	dmb	sy
  40c03c:	b662      	cpsie	i
	////Initialize system clock and peripherals
	sysclk_init();	
  40c03e:	4b1a      	ldr	r3, [pc, #104]	; (40c0a8 <main+0x7c>)
  40c040:	4798      	blx	r3
	
	board_init();
  40c042:	4b1a      	ldr	r3, [pc, #104]	; (40c0ac <main+0x80>)
  40c044:	4798      	blx	r3
	brd_enableWatchdog();
  40c046:	4b1a      	ldr	r3, [pc, #104]	; (40c0b0 <main+0x84>)
  40c048:	4798      	blx	r3
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_RED, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_BLUE, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_GREEN, DRV_GPIO_PIN_STATE_LOW);
	// Insert application code here, after the board has been initialized.
	//start all the tasks
	int retCode = xTaskCreate(mgr_managerTask, "MGR", TASK_MANAGER_STACK_SIZE, NULL, TASK_MANAGER_PRIORITY, NULL);
  40c04a:	2304      	movs	r3, #4
  40c04c:	9300      	str	r3, [sp, #0]
  40c04e:	2300      	movs	r3, #0
  40c050:	9301      	str	r3, [sp, #4]
  40c052:	2300      	movs	r3, #0
  40c054:	9302      	str	r3, [sp, #8]
  40c056:	2300      	movs	r3, #0
  40c058:	9303      	str	r3, [sp, #12]
  40c05a:	4816      	ldr	r0, [pc, #88]	; (40c0b4 <main+0x88>)
  40c05c:	4916      	ldr	r1, [pc, #88]	; (40c0b8 <main+0x8c>)
  40c05e:	f44f 7200 	mov.w	r2, #512	; 0x200
  40c062:	2300      	movs	r3, #0
  40c064:	4c15      	ldr	r4, [pc, #84]	; (40c0bc <main+0x90>)
  40c066:	47a0      	blx	r4
  40c068:	6078      	str	r0, [r7, #4]
	if (retCode != pdPASS)
  40c06a:	687b      	ldr	r3, [r7, #4]
  40c06c:	2b01      	cmp	r3, #1
  40c06e:	d003      	beq.n	40c078 <main+0x4c>
	{
		printf("Failed to create MGR task code %d\r\n", retCode);
  40c070:	4813      	ldr	r0, [pc, #76]	; (40c0c0 <main+0x94>)
  40c072:	6879      	ldr	r1, [r7, #4]
  40c074:	4b13      	ldr	r3, [pc, #76]	; (40c0c4 <main+0x98>)
  40c076:	4798      	blx	r3
	}	
	/* Start the scheduler. */
	vTaskStartScheduler();	
  40c078:	4b13      	ldr	r3, [pc, #76]	; (40c0c8 <main+0x9c>)
  40c07a:	4798      	blx	r3
	
	// This skeleton code simply sets the LED to the state of the button.
	while (1) 
	{
		// Is button pressed?
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) 
  40c07c:	2002      	movs	r0, #2
  40c07e:	4b13      	ldr	r3, [pc, #76]	; (40c0cc <main+0xa0>)
  40c080:	4798      	blx	r3
  40c082:	4603      	mov	r3, r0
  40c084:	f083 0301 	eor.w	r3, r3, #1
  40c088:	b2db      	uxtb	r3, r3
  40c08a:	2b00      	cmp	r3, #0
  40c08c:	d004      	beq.n	40c098 <main+0x6c>
		{
			// Yes, so turn LED on.
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
  40c08e:	2057      	movs	r0, #87	; 0x57
  40c090:	2100      	movs	r1, #0
  40c092:	4b0f      	ldr	r3, [pc, #60]	; (40c0d0 <main+0xa4>)
  40c094:	4798      	blx	r3
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}

	}
  40c096:	e7f1      	b.n	40c07c <main+0x50>
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
		}
		else 
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  40c098:	2057      	movs	r0, #87	; 0x57
  40c09a:	2101      	movs	r1, #1
  40c09c:	4b0c      	ldr	r3, [pc, #48]	; (40c0d0 <main+0xa4>)
  40c09e:	4798      	blx	r3
		}

	}
  40c0a0:	e7ec      	b.n	40c07c <main+0x50>
  40c0a2:	bf00      	nop
  40c0a4:	20000364 	.word	0x20000364
  40c0a8:	0040a9d9 	.word	0x0040a9d9
  40c0ac:	0040aa79 	.word	0x0040aa79
  40c0b0:	004043bd 	.word	0x004043bd
  40c0b4:	00405d55 	.word	0x00405d55
  40c0b8:	00415ddc 	.word	0x00415ddc
  40c0bc:	00408d45 	.word	0x00408d45
  40c0c0:	00415de0 	.word	0x00415de0
  40c0c4:	0040c6d1 	.word	0x0040c6d1
  40c0c8:	00408f69 	.word	0x00408f69
  40c0cc:	0040bfb5 	.word	0x0040bfb5
  40c0d0:	0040bf49 	.word	0x0040bf49

0040c0d4 <__aeabi_uldivmod>:
  40c0d4:	b94b      	cbnz	r3, 40c0ea <__aeabi_uldivmod+0x16>
  40c0d6:	b942      	cbnz	r2, 40c0ea <__aeabi_uldivmod+0x16>
  40c0d8:	2900      	cmp	r1, #0
  40c0da:	bf08      	it	eq
  40c0dc:	2800      	cmpeq	r0, #0
  40c0de:	d002      	beq.n	40c0e6 <__aeabi_uldivmod+0x12>
  40c0e0:	f04f 31ff 	mov.w	r1, #4294967295
  40c0e4:	4608      	mov	r0, r1
  40c0e6:	f000 b83b 	b.w	40c160 <__aeabi_idiv0>
  40c0ea:	b082      	sub	sp, #8
  40c0ec:	46ec      	mov	ip, sp
  40c0ee:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c0f2:	f000 f81d 	bl	40c130 <__gnu_uldivmod_helper>
  40c0f6:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c0fa:	b002      	add	sp, #8
  40c0fc:	bc0c      	pop	{r2, r3}
  40c0fe:	4770      	bx	lr

0040c100 <__gnu_ldivmod_helper>:
  40c100:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c104:	9e06      	ldr	r6, [sp, #24]
  40c106:	4614      	mov	r4, r2
  40c108:	461d      	mov	r5, r3
  40c10a:	4680      	mov	r8, r0
  40c10c:	4689      	mov	r9, r1
  40c10e:	f000 f829 	bl	40c164 <__divdi3>
  40c112:	fb04 f301 	mul.w	r3, r4, r1
  40c116:	fb00 3305 	mla	r3, r0, r5, r3
  40c11a:	fba4 4500 	umull	r4, r5, r4, r0
  40c11e:	441d      	add	r5, r3
  40c120:	ebb8 0404 	subs.w	r4, r8, r4
  40c124:	eb69 0505 	sbc.w	r5, r9, r5
  40c128:	e9c6 4500 	strd	r4, r5, [r6]
  40c12c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c130 <__gnu_uldivmod_helper>:
  40c130:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c134:	9e06      	ldr	r6, [sp, #24]
  40c136:	4614      	mov	r4, r2
  40c138:	4680      	mov	r8, r0
  40c13a:	4689      	mov	r9, r1
  40c13c:	461d      	mov	r5, r3
  40c13e:	f000 f95d 	bl	40c3fc <__udivdi3>
  40c142:	fb00 f505 	mul.w	r5, r0, r5
  40c146:	fb04 5301 	mla	r3, r4, r1, r5
  40c14a:	fba0 4504 	umull	r4, r5, r0, r4
  40c14e:	441d      	add	r5, r3
  40c150:	ebb8 0404 	subs.w	r4, r8, r4
  40c154:	eb69 0505 	sbc.w	r5, r9, r5
  40c158:	e9c6 4500 	strd	r4, r5, [r6]
  40c15c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c160 <__aeabi_idiv0>:
  40c160:	4770      	bx	lr
  40c162:	bf00      	nop

0040c164 <__divdi3>:
  40c164:	2900      	cmp	r1, #0
  40c166:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c16a:	f2c0 809f 	blt.w	40c2ac <__divdi3+0x148>
  40c16e:	2400      	movs	r4, #0
  40c170:	2b00      	cmp	r3, #0
  40c172:	f2c0 8096 	blt.w	40c2a2 <__divdi3+0x13e>
  40c176:	4615      	mov	r5, r2
  40c178:	4606      	mov	r6, r0
  40c17a:	460f      	mov	r7, r1
  40c17c:	2b00      	cmp	r3, #0
  40c17e:	d13e      	bne.n	40c1fe <__divdi3+0x9a>
  40c180:	428a      	cmp	r2, r1
  40c182:	d957      	bls.n	40c234 <__divdi3+0xd0>
  40c184:	fab2 f382 	clz	r3, r2
  40c188:	b14b      	cbz	r3, 40c19e <__divdi3+0x3a>
  40c18a:	f1c3 0220 	rsb	r2, r3, #32
  40c18e:	fa01 f703 	lsl.w	r7, r1, r3
  40c192:	fa20 f202 	lsr.w	r2, r0, r2
  40c196:	409d      	lsls	r5, r3
  40c198:	4317      	orrs	r7, r2
  40c19a:	fa00 f603 	lsl.w	r6, r0, r3
  40c19e:	0c29      	lsrs	r1, r5, #16
  40c1a0:	fbb7 f2f1 	udiv	r2, r7, r1
  40c1a4:	0c33      	lsrs	r3, r6, #16
  40c1a6:	fb01 7c12 	mls	ip, r1, r2, r7
  40c1aa:	b2a8      	uxth	r0, r5
  40c1ac:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40c1b0:	fb00 f302 	mul.w	r3, r0, r2
  40c1b4:	42bb      	cmp	r3, r7
  40c1b6:	d909      	bls.n	40c1cc <__divdi3+0x68>
  40c1b8:	197f      	adds	r7, r7, r5
  40c1ba:	f102 3cff 	add.w	ip, r2, #4294967295
  40c1be:	f080 8101 	bcs.w	40c3c4 <__divdi3+0x260>
  40c1c2:	42bb      	cmp	r3, r7
  40c1c4:	f240 80fe 	bls.w	40c3c4 <__divdi3+0x260>
  40c1c8:	3a02      	subs	r2, #2
  40c1ca:	442f      	add	r7, r5
  40c1cc:	1aff      	subs	r7, r7, r3
  40c1ce:	fbb7 f3f1 	udiv	r3, r7, r1
  40c1d2:	b2b6      	uxth	r6, r6
  40c1d4:	fb01 7113 	mls	r1, r1, r3, r7
  40c1d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40c1dc:	fb00 f003 	mul.w	r0, r0, r3
  40c1e0:	4288      	cmp	r0, r1
  40c1e2:	d908      	bls.n	40c1f6 <__divdi3+0x92>
  40c1e4:	1949      	adds	r1, r1, r5
  40c1e6:	f103 37ff 	add.w	r7, r3, #4294967295
  40c1ea:	f080 80ed 	bcs.w	40c3c8 <__divdi3+0x264>
  40c1ee:	4288      	cmp	r0, r1
  40c1f0:	f240 80ea 	bls.w	40c3c8 <__divdi3+0x264>
  40c1f4:	3b02      	subs	r3, #2
  40c1f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c1fa:	2300      	movs	r3, #0
  40c1fc:	e003      	b.n	40c206 <__divdi3+0xa2>
  40c1fe:	428b      	cmp	r3, r1
  40c200:	d90a      	bls.n	40c218 <__divdi3+0xb4>
  40c202:	2300      	movs	r3, #0
  40c204:	461a      	mov	r2, r3
  40c206:	4610      	mov	r0, r2
  40c208:	4619      	mov	r1, r3
  40c20a:	b114      	cbz	r4, 40c212 <__divdi3+0xae>
  40c20c:	4240      	negs	r0, r0
  40c20e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c212:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c216:	4770      	bx	lr
  40c218:	fab3 f883 	clz	r8, r3
  40c21c:	f1b8 0f00 	cmp.w	r8, #0
  40c220:	f040 8084 	bne.w	40c32c <__divdi3+0x1c8>
  40c224:	428b      	cmp	r3, r1
  40c226:	d302      	bcc.n	40c22e <__divdi3+0xca>
  40c228:	4282      	cmp	r2, r0
  40c22a:	f200 80de 	bhi.w	40c3ea <__divdi3+0x286>
  40c22e:	2300      	movs	r3, #0
  40c230:	2201      	movs	r2, #1
  40c232:	e7e8      	b.n	40c206 <__divdi3+0xa2>
  40c234:	b912      	cbnz	r2, 40c23c <__divdi3+0xd8>
  40c236:	2301      	movs	r3, #1
  40c238:	fbb3 f5f2 	udiv	r5, r3, r2
  40c23c:	fab5 f285 	clz	r2, r5
  40c240:	2a00      	cmp	r2, #0
  40c242:	d139      	bne.n	40c2b8 <__divdi3+0x154>
  40c244:	1b7f      	subs	r7, r7, r5
  40c246:	0c28      	lsrs	r0, r5, #16
  40c248:	fa1f fc85 	uxth.w	ip, r5
  40c24c:	2301      	movs	r3, #1
  40c24e:	fbb7 f1f0 	udiv	r1, r7, r0
  40c252:	0c32      	lsrs	r2, r6, #16
  40c254:	fb00 7711 	mls	r7, r0, r1, r7
  40c258:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c25c:	fb0c f201 	mul.w	r2, ip, r1
  40c260:	42ba      	cmp	r2, r7
  40c262:	d907      	bls.n	40c274 <__divdi3+0x110>
  40c264:	197f      	adds	r7, r7, r5
  40c266:	f101 38ff 	add.w	r8, r1, #4294967295
  40c26a:	d202      	bcs.n	40c272 <__divdi3+0x10e>
  40c26c:	42ba      	cmp	r2, r7
  40c26e:	f200 80c1 	bhi.w	40c3f4 <__divdi3+0x290>
  40c272:	4641      	mov	r1, r8
  40c274:	1abf      	subs	r7, r7, r2
  40c276:	fbb7 f2f0 	udiv	r2, r7, r0
  40c27a:	b2b6      	uxth	r6, r6
  40c27c:	fb00 7012 	mls	r0, r0, r2, r7
  40c280:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40c284:	fb0c fc02 	mul.w	ip, ip, r2
  40c288:	4584      	cmp	ip, r0
  40c28a:	d907      	bls.n	40c29c <__divdi3+0x138>
  40c28c:	1940      	adds	r0, r0, r5
  40c28e:	f102 37ff 	add.w	r7, r2, #4294967295
  40c292:	d202      	bcs.n	40c29a <__divdi3+0x136>
  40c294:	4584      	cmp	ip, r0
  40c296:	f200 80ab 	bhi.w	40c3f0 <__divdi3+0x28c>
  40c29a:	463a      	mov	r2, r7
  40c29c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40c2a0:	e7b1      	b.n	40c206 <__divdi3+0xa2>
  40c2a2:	43e4      	mvns	r4, r4
  40c2a4:	4252      	negs	r2, r2
  40c2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c2aa:	e764      	b.n	40c176 <__divdi3+0x12>
  40c2ac:	4240      	negs	r0, r0
  40c2ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c2b2:	f04f 34ff 	mov.w	r4, #4294967295
  40c2b6:	e75b      	b.n	40c170 <__divdi3+0xc>
  40c2b8:	4095      	lsls	r5, r2
  40c2ba:	f1c2 0320 	rsb	r3, r2, #32
  40c2be:	fa27 f103 	lsr.w	r1, r7, r3
  40c2c2:	0c28      	lsrs	r0, r5, #16
  40c2c4:	fa26 f303 	lsr.w	r3, r6, r3
  40c2c8:	4097      	lsls	r7, r2
  40c2ca:	fbb1 f8f0 	udiv	r8, r1, r0
  40c2ce:	431f      	orrs	r7, r3
  40c2d0:	0c3b      	lsrs	r3, r7, #16
  40c2d2:	fb00 1118 	mls	r1, r0, r8, r1
  40c2d6:	fa1f fc85 	uxth.w	ip, r5
  40c2da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40c2de:	fb0c f308 	mul.w	r3, ip, r8
  40c2e2:	428b      	cmp	r3, r1
  40c2e4:	fa06 f602 	lsl.w	r6, r6, r2
  40c2e8:	d908      	bls.n	40c2fc <__divdi3+0x198>
  40c2ea:	1949      	adds	r1, r1, r5
  40c2ec:	f108 32ff 	add.w	r2, r8, #4294967295
  40c2f0:	d279      	bcs.n	40c3e6 <__divdi3+0x282>
  40c2f2:	428b      	cmp	r3, r1
  40c2f4:	d977      	bls.n	40c3e6 <__divdi3+0x282>
  40c2f6:	f1a8 0802 	sub.w	r8, r8, #2
  40c2fa:	4429      	add	r1, r5
  40c2fc:	1ac9      	subs	r1, r1, r3
  40c2fe:	fbb1 f3f0 	udiv	r3, r1, r0
  40c302:	b2bf      	uxth	r7, r7
  40c304:	fb00 1113 	mls	r1, r0, r3, r1
  40c308:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  40c30c:	fb0c f203 	mul.w	r2, ip, r3
  40c310:	42ba      	cmp	r2, r7
  40c312:	d907      	bls.n	40c324 <__divdi3+0x1c0>
  40c314:	197f      	adds	r7, r7, r5
  40c316:	f103 31ff 	add.w	r1, r3, #4294967295
  40c31a:	d260      	bcs.n	40c3de <__divdi3+0x27a>
  40c31c:	42ba      	cmp	r2, r7
  40c31e:	d95e      	bls.n	40c3de <__divdi3+0x27a>
  40c320:	3b02      	subs	r3, #2
  40c322:	442f      	add	r7, r5
  40c324:	1abf      	subs	r7, r7, r2
  40c326:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c32a:	e790      	b.n	40c24e <__divdi3+0xea>
  40c32c:	f1c8 0220 	rsb	r2, r8, #32
  40c330:	fa03 fc08 	lsl.w	ip, r3, r8
  40c334:	fa25 f302 	lsr.w	r3, r5, r2
  40c338:	ea43 0c0c 	orr.w	ip, r3, ip
  40c33c:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40c340:	fa21 f302 	lsr.w	r3, r1, r2
  40c344:	fa01 f708 	lsl.w	r7, r1, r8
  40c348:	fa20 f202 	lsr.w	r2, r0, r2
  40c34c:	fbb3 f1f9 	udiv	r1, r3, r9
  40c350:	4317      	orrs	r7, r2
  40c352:	fb09 3311 	mls	r3, r9, r1, r3
  40c356:	0c3a      	lsrs	r2, r7, #16
  40c358:	fa1f fb8c 	uxth.w	fp, ip
  40c35c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40c360:	fb0b fa01 	mul.w	sl, fp, r1
  40c364:	459a      	cmp	sl, r3
  40c366:	fa05 f008 	lsl.w	r0, r5, r8
  40c36a:	d908      	bls.n	40c37e <__divdi3+0x21a>
  40c36c:	eb13 030c 	adds.w	r3, r3, ip
  40c370:	f101 32ff 	add.w	r2, r1, #4294967295
  40c374:	d235      	bcs.n	40c3e2 <__divdi3+0x27e>
  40c376:	459a      	cmp	sl, r3
  40c378:	d933      	bls.n	40c3e2 <__divdi3+0x27e>
  40c37a:	3902      	subs	r1, #2
  40c37c:	4463      	add	r3, ip
  40c37e:	ebca 0303 	rsb	r3, sl, r3
  40c382:	fbb3 f2f9 	udiv	r2, r3, r9
  40c386:	fb09 3312 	mls	r3, r9, r2, r3
  40c38a:	b2bf      	uxth	r7, r7
  40c38c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c390:	fb0b f902 	mul.w	r9, fp, r2
  40c394:	45b9      	cmp	r9, r7
  40c396:	d908      	bls.n	40c3aa <__divdi3+0x246>
  40c398:	eb17 070c 	adds.w	r7, r7, ip
  40c39c:	f102 33ff 	add.w	r3, r2, #4294967295
  40c3a0:	d21b      	bcs.n	40c3da <__divdi3+0x276>
  40c3a2:	45b9      	cmp	r9, r7
  40c3a4:	d919      	bls.n	40c3da <__divdi3+0x276>
  40c3a6:	3a02      	subs	r2, #2
  40c3a8:	4467      	add	r7, ip
  40c3aa:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40c3ae:	fba5 0100 	umull	r0, r1, r5, r0
  40c3b2:	ebc9 0707 	rsb	r7, r9, r7
  40c3b6:	428f      	cmp	r7, r1
  40c3b8:	f04f 0300 	mov.w	r3, #0
  40c3bc:	d30a      	bcc.n	40c3d4 <__divdi3+0x270>
  40c3be:	d005      	beq.n	40c3cc <__divdi3+0x268>
  40c3c0:	462a      	mov	r2, r5
  40c3c2:	e720      	b.n	40c206 <__divdi3+0xa2>
  40c3c4:	4662      	mov	r2, ip
  40c3c6:	e701      	b.n	40c1cc <__divdi3+0x68>
  40c3c8:	463b      	mov	r3, r7
  40c3ca:	e714      	b.n	40c1f6 <__divdi3+0x92>
  40c3cc:	fa06 f608 	lsl.w	r6, r6, r8
  40c3d0:	4286      	cmp	r6, r0
  40c3d2:	d2f5      	bcs.n	40c3c0 <__divdi3+0x25c>
  40c3d4:	1e6a      	subs	r2, r5, #1
  40c3d6:	2300      	movs	r3, #0
  40c3d8:	e715      	b.n	40c206 <__divdi3+0xa2>
  40c3da:	461a      	mov	r2, r3
  40c3dc:	e7e5      	b.n	40c3aa <__divdi3+0x246>
  40c3de:	460b      	mov	r3, r1
  40c3e0:	e7a0      	b.n	40c324 <__divdi3+0x1c0>
  40c3e2:	4611      	mov	r1, r2
  40c3e4:	e7cb      	b.n	40c37e <__divdi3+0x21a>
  40c3e6:	4690      	mov	r8, r2
  40c3e8:	e788      	b.n	40c2fc <__divdi3+0x198>
  40c3ea:	4643      	mov	r3, r8
  40c3ec:	4642      	mov	r2, r8
  40c3ee:	e70a      	b.n	40c206 <__divdi3+0xa2>
  40c3f0:	3a02      	subs	r2, #2
  40c3f2:	e753      	b.n	40c29c <__divdi3+0x138>
  40c3f4:	3902      	subs	r1, #2
  40c3f6:	442f      	add	r7, r5
  40c3f8:	e73c      	b.n	40c274 <__divdi3+0x110>
  40c3fa:	bf00      	nop

0040c3fc <__udivdi3>:
  40c3fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c400:	4614      	mov	r4, r2
  40c402:	4605      	mov	r5, r0
  40c404:	460e      	mov	r6, r1
  40c406:	2b00      	cmp	r3, #0
  40c408:	d143      	bne.n	40c492 <__udivdi3+0x96>
  40c40a:	428a      	cmp	r2, r1
  40c40c:	d953      	bls.n	40c4b6 <__udivdi3+0xba>
  40c40e:	fab2 f782 	clz	r7, r2
  40c412:	b157      	cbz	r7, 40c42a <__udivdi3+0x2e>
  40c414:	f1c7 0620 	rsb	r6, r7, #32
  40c418:	fa20 f606 	lsr.w	r6, r0, r6
  40c41c:	fa01 f307 	lsl.w	r3, r1, r7
  40c420:	fa02 f407 	lsl.w	r4, r2, r7
  40c424:	431e      	orrs	r6, r3
  40c426:	fa00 f507 	lsl.w	r5, r0, r7
  40c42a:	0c21      	lsrs	r1, r4, #16
  40c42c:	fbb6 f2f1 	udiv	r2, r6, r1
  40c430:	0c2b      	lsrs	r3, r5, #16
  40c432:	fb01 6712 	mls	r7, r1, r2, r6
  40c436:	b2a0      	uxth	r0, r4
  40c438:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40c43c:	fb00 f302 	mul.w	r3, r0, r2
  40c440:	42b3      	cmp	r3, r6
  40c442:	d909      	bls.n	40c458 <__udivdi3+0x5c>
  40c444:	1936      	adds	r6, r6, r4
  40c446:	f102 37ff 	add.w	r7, r2, #4294967295
  40c44a:	f080 80f6 	bcs.w	40c63a <__udivdi3+0x23e>
  40c44e:	42b3      	cmp	r3, r6
  40c450:	f240 80f3 	bls.w	40c63a <__udivdi3+0x23e>
  40c454:	3a02      	subs	r2, #2
  40c456:	4426      	add	r6, r4
  40c458:	1af6      	subs	r6, r6, r3
  40c45a:	fbb6 f3f1 	udiv	r3, r6, r1
  40c45e:	b2ad      	uxth	r5, r5
  40c460:	fb01 6113 	mls	r1, r1, r3, r6
  40c464:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40c468:	fb00 f003 	mul.w	r0, r0, r3
  40c46c:	4288      	cmp	r0, r1
  40c46e:	d908      	bls.n	40c482 <__udivdi3+0x86>
  40c470:	1909      	adds	r1, r1, r4
  40c472:	f103 36ff 	add.w	r6, r3, #4294967295
  40c476:	f080 80e2 	bcs.w	40c63e <__udivdi3+0x242>
  40c47a:	4288      	cmp	r0, r1
  40c47c:	f240 80df 	bls.w	40c63e <__udivdi3+0x242>
  40c480:	3b02      	subs	r3, #2
  40c482:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c486:	2300      	movs	r3, #0
  40c488:	4610      	mov	r0, r2
  40c48a:	4619      	mov	r1, r3
  40c48c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c490:	4770      	bx	lr
  40c492:	428b      	cmp	r3, r1
  40c494:	d84a      	bhi.n	40c52c <__udivdi3+0x130>
  40c496:	fab3 f683 	clz	r6, r3
  40c49a:	2e00      	cmp	r6, #0
  40c49c:	d14d      	bne.n	40c53a <__udivdi3+0x13e>
  40c49e:	428b      	cmp	r3, r1
  40c4a0:	d302      	bcc.n	40c4a8 <__udivdi3+0xac>
  40c4a2:	4282      	cmp	r2, r0
  40c4a4:	f200 80d6 	bhi.w	40c654 <__udivdi3+0x258>
  40c4a8:	2300      	movs	r3, #0
  40c4aa:	2201      	movs	r2, #1
  40c4ac:	4610      	mov	r0, r2
  40c4ae:	4619      	mov	r1, r3
  40c4b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c4b4:	4770      	bx	lr
  40c4b6:	b912      	cbnz	r2, 40c4be <__udivdi3+0xc2>
  40c4b8:	2401      	movs	r4, #1
  40c4ba:	fbb4 f4f2 	udiv	r4, r4, r2
  40c4be:	fab4 f284 	clz	r2, r4
  40c4c2:	2a00      	cmp	r2, #0
  40c4c4:	d17c      	bne.n	40c5c0 <__udivdi3+0x1c4>
  40c4c6:	1b09      	subs	r1, r1, r4
  40c4c8:	0c26      	lsrs	r6, r4, #16
  40c4ca:	b2a7      	uxth	r7, r4
  40c4cc:	2301      	movs	r3, #1
  40c4ce:	fbb1 f0f6 	udiv	r0, r1, r6
  40c4d2:	0c2a      	lsrs	r2, r5, #16
  40c4d4:	fb06 1110 	mls	r1, r6, r0, r1
  40c4d8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40c4dc:	fb07 f200 	mul.w	r2, r7, r0
  40c4e0:	428a      	cmp	r2, r1
  40c4e2:	d907      	bls.n	40c4f4 <__udivdi3+0xf8>
  40c4e4:	1909      	adds	r1, r1, r4
  40c4e6:	f100 3cff 	add.w	ip, r0, #4294967295
  40c4ea:	d202      	bcs.n	40c4f2 <__udivdi3+0xf6>
  40c4ec:	428a      	cmp	r2, r1
  40c4ee:	f200 80c3 	bhi.w	40c678 <__udivdi3+0x27c>
  40c4f2:	4660      	mov	r0, ip
  40c4f4:	1a89      	subs	r1, r1, r2
  40c4f6:	fbb1 f2f6 	udiv	r2, r1, r6
  40c4fa:	b2ad      	uxth	r5, r5
  40c4fc:	fb06 1112 	mls	r1, r6, r2, r1
  40c500:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40c504:	fb07 f702 	mul.w	r7, r7, r2
  40c508:	42af      	cmp	r7, r5
  40c50a:	d908      	bls.n	40c51e <__udivdi3+0x122>
  40c50c:	192c      	adds	r4, r5, r4
  40c50e:	f102 31ff 	add.w	r1, r2, #4294967295
  40c512:	f080 8096 	bcs.w	40c642 <__udivdi3+0x246>
  40c516:	42a7      	cmp	r7, r4
  40c518:	f240 8093 	bls.w	40c642 <__udivdi3+0x246>
  40c51c:	3a02      	subs	r2, #2
  40c51e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40c522:	4610      	mov	r0, r2
  40c524:	4619      	mov	r1, r3
  40c526:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c52a:	4770      	bx	lr
  40c52c:	2300      	movs	r3, #0
  40c52e:	461a      	mov	r2, r3
  40c530:	4610      	mov	r0, r2
  40c532:	4619      	mov	r1, r3
  40c534:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c538:	4770      	bx	lr
  40c53a:	f1c6 0520 	rsb	r5, r6, #32
  40c53e:	fa22 f405 	lsr.w	r4, r2, r5
  40c542:	40b3      	lsls	r3, r6
  40c544:	431c      	orrs	r4, r3
  40c546:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40c54a:	fa21 f305 	lsr.w	r3, r1, r5
  40c54e:	fa01 f706 	lsl.w	r7, r1, r6
  40c552:	fa20 f505 	lsr.w	r5, r0, r5
  40c556:	fbb3 fcf8 	udiv	ip, r3, r8
  40c55a:	432f      	orrs	r7, r5
  40c55c:	fb08 331c 	mls	r3, r8, ip, r3
  40c560:	0c3d      	lsrs	r5, r7, #16
  40c562:	fa1f fa84 	uxth.w	sl, r4
  40c566:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40c56a:	fb0a f90c 	mul.w	r9, sl, ip
  40c56e:	4599      	cmp	r9, r3
  40c570:	fa02 fb06 	lsl.w	fp, r2, r6
  40c574:	d904      	bls.n	40c580 <__udivdi3+0x184>
  40c576:	191b      	adds	r3, r3, r4
  40c578:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c57c:	d36d      	bcc.n	40c65a <__udivdi3+0x25e>
  40c57e:	4694      	mov	ip, r2
  40c580:	ebc9 0303 	rsb	r3, r9, r3
  40c584:	fbb3 f5f8 	udiv	r5, r3, r8
  40c588:	fb08 3315 	mls	r3, r8, r5, r3
  40c58c:	b2bf      	uxth	r7, r7
  40c58e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c592:	fb0a f805 	mul.w	r8, sl, r5
  40c596:	45b8      	cmp	r8, r7
  40c598:	d904      	bls.n	40c5a4 <__udivdi3+0x1a8>
  40c59a:	193f      	adds	r7, r7, r4
  40c59c:	f105 33ff 	add.w	r3, r5, #4294967295
  40c5a0:	d361      	bcc.n	40c666 <__udivdi3+0x26a>
  40c5a2:	461d      	mov	r5, r3
  40c5a4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40c5a8:	fbac 230b 	umull	r2, r3, ip, fp
  40c5ac:	ebc8 0707 	rsb	r7, r8, r7
  40c5b0:	429f      	cmp	r7, r3
  40c5b2:	f04f 0500 	mov.w	r5, #0
  40c5b6:	d349      	bcc.n	40c64c <__udivdi3+0x250>
  40c5b8:	d045      	beq.n	40c646 <__udivdi3+0x24a>
  40c5ba:	4662      	mov	r2, ip
  40c5bc:	462b      	mov	r3, r5
  40c5be:	e763      	b.n	40c488 <__udivdi3+0x8c>
  40c5c0:	4094      	lsls	r4, r2
  40c5c2:	f1c2 0320 	rsb	r3, r2, #32
  40c5c6:	fa21 fc03 	lsr.w	ip, r1, r3
  40c5ca:	0c26      	lsrs	r6, r4, #16
  40c5cc:	fa20 f303 	lsr.w	r3, r0, r3
  40c5d0:	fa01 f502 	lsl.w	r5, r1, r2
  40c5d4:	fbbc f8f6 	udiv	r8, ip, r6
  40c5d8:	ea43 0105 	orr.w	r1, r3, r5
  40c5dc:	0c0b      	lsrs	r3, r1, #16
  40c5de:	fb06 cc18 	mls	ip, r6, r8, ip
  40c5e2:	b2a7      	uxth	r7, r4
  40c5e4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40c5e8:	fb07 f308 	mul.w	r3, r7, r8
  40c5ec:	4563      	cmp	r3, ip
  40c5ee:	fa00 f502 	lsl.w	r5, r0, r2
  40c5f2:	d909      	bls.n	40c608 <__udivdi3+0x20c>
  40c5f4:	eb1c 0c04 	adds.w	ip, ip, r4
  40c5f8:	f108 32ff 	add.w	r2, r8, #4294967295
  40c5fc:	d23a      	bcs.n	40c674 <__udivdi3+0x278>
  40c5fe:	4563      	cmp	r3, ip
  40c600:	d938      	bls.n	40c674 <__udivdi3+0x278>
  40c602:	f1a8 0802 	sub.w	r8, r8, #2
  40c606:	44a4      	add	ip, r4
  40c608:	ebc3 0c0c 	rsb	ip, r3, ip
  40c60c:	fbbc f3f6 	udiv	r3, ip, r6
  40c610:	b289      	uxth	r1, r1
  40c612:	fb06 cc13 	mls	ip, r6, r3, ip
  40c616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40c61a:	fb07 f203 	mul.w	r2, r7, r3
  40c61e:	428a      	cmp	r2, r1
  40c620:	d907      	bls.n	40c632 <__udivdi3+0x236>
  40c622:	1909      	adds	r1, r1, r4
  40c624:	f103 30ff 	add.w	r0, r3, #4294967295
  40c628:	d222      	bcs.n	40c670 <__udivdi3+0x274>
  40c62a:	428a      	cmp	r2, r1
  40c62c:	d920      	bls.n	40c670 <__udivdi3+0x274>
  40c62e:	3b02      	subs	r3, #2
  40c630:	4421      	add	r1, r4
  40c632:	1a89      	subs	r1, r1, r2
  40c634:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c638:	e749      	b.n	40c4ce <__udivdi3+0xd2>
  40c63a:	463a      	mov	r2, r7
  40c63c:	e70c      	b.n	40c458 <__udivdi3+0x5c>
  40c63e:	4633      	mov	r3, r6
  40c640:	e71f      	b.n	40c482 <__udivdi3+0x86>
  40c642:	460a      	mov	r2, r1
  40c644:	e76b      	b.n	40c51e <__udivdi3+0x122>
  40c646:	40b0      	lsls	r0, r6
  40c648:	4290      	cmp	r0, r2
  40c64a:	d2b6      	bcs.n	40c5ba <__udivdi3+0x1be>
  40c64c:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c650:	2300      	movs	r3, #0
  40c652:	e719      	b.n	40c488 <__udivdi3+0x8c>
  40c654:	4633      	mov	r3, r6
  40c656:	4632      	mov	r2, r6
  40c658:	e716      	b.n	40c488 <__udivdi3+0x8c>
  40c65a:	4599      	cmp	r9, r3
  40c65c:	d98f      	bls.n	40c57e <__udivdi3+0x182>
  40c65e:	f1ac 0c02 	sub.w	ip, ip, #2
  40c662:	4423      	add	r3, r4
  40c664:	e78c      	b.n	40c580 <__udivdi3+0x184>
  40c666:	45b8      	cmp	r8, r7
  40c668:	d99b      	bls.n	40c5a2 <__udivdi3+0x1a6>
  40c66a:	3d02      	subs	r5, #2
  40c66c:	4427      	add	r7, r4
  40c66e:	e799      	b.n	40c5a4 <__udivdi3+0x1a8>
  40c670:	4603      	mov	r3, r0
  40c672:	e7de      	b.n	40c632 <__udivdi3+0x236>
  40c674:	4690      	mov	r8, r2
  40c676:	e7c7      	b.n	40c608 <__udivdi3+0x20c>
  40c678:	3802      	subs	r0, #2
  40c67a:	4421      	add	r1, r4
  40c67c:	e73a      	b.n	40c4f4 <__udivdi3+0xf8>
  40c67e:	bf00      	nop

0040c680 <__libc_init_array>:
  40c680:	b570      	push	{r4, r5, r6, lr}
  40c682:	4e0f      	ldr	r6, [pc, #60]	; (40c6c0 <__libc_init_array+0x40>)
  40c684:	4d0f      	ldr	r5, [pc, #60]	; (40c6c4 <__libc_init_array+0x44>)
  40c686:	1b76      	subs	r6, r6, r5
  40c688:	10b6      	asrs	r6, r6, #2
  40c68a:	d007      	beq.n	40c69c <__libc_init_array+0x1c>
  40c68c:	3d04      	subs	r5, #4
  40c68e:	2400      	movs	r4, #0
  40c690:	3401      	adds	r4, #1
  40c692:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40c696:	4798      	blx	r3
  40c698:	42a6      	cmp	r6, r4
  40c69a:	d1f9      	bne.n	40c690 <__libc_init_array+0x10>
  40c69c:	4e0a      	ldr	r6, [pc, #40]	; (40c6c8 <__libc_init_array+0x48>)
  40c69e:	4d0b      	ldr	r5, [pc, #44]	; (40c6cc <__libc_init_array+0x4c>)
  40c6a0:	1b76      	subs	r6, r6, r5
  40c6a2:	f009 fdcd 	bl	416240 <_init>
  40c6a6:	10b6      	asrs	r6, r6, #2
  40c6a8:	d008      	beq.n	40c6bc <__libc_init_array+0x3c>
  40c6aa:	3d04      	subs	r5, #4
  40c6ac:	2400      	movs	r4, #0
  40c6ae:	3401      	adds	r4, #1
  40c6b0:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40c6b4:	4798      	blx	r3
  40c6b6:	42a6      	cmp	r6, r4
  40c6b8:	d1f9      	bne.n	40c6ae <__libc_init_array+0x2e>
  40c6ba:	bd70      	pop	{r4, r5, r6, pc}
  40c6bc:	bd70      	pop	{r4, r5, r6, pc}
  40c6be:	bf00      	nop
  40c6c0:	0041624c 	.word	0x0041624c
  40c6c4:	0041624c 	.word	0x0041624c
  40c6c8:	00416254 	.word	0x00416254
  40c6cc:	0041624c 	.word	0x0041624c

0040c6d0 <iprintf>:
  40c6d0:	b40f      	push	{r0, r1, r2, r3}
  40c6d2:	b500      	push	{lr}
  40c6d4:	4a07      	ldr	r2, [pc, #28]	; (40c6f4 <iprintf+0x24>)
  40c6d6:	b083      	sub	sp, #12
  40c6d8:	ab04      	add	r3, sp, #16
  40c6da:	6810      	ldr	r0, [r2, #0]
  40c6dc:	f853 2b04 	ldr.w	r2, [r3], #4
  40c6e0:	6881      	ldr	r1, [r0, #8]
  40c6e2:	9301      	str	r3, [sp, #4]
  40c6e4:	f002 fcf2 	bl	40f0cc <_vfiprintf_r>
  40c6e8:	b003      	add	sp, #12
  40c6ea:	f85d eb04 	ldr.w	lr, [sp], #4
  40c6ee:	b004      	add	sp, #16
  40c6f0:	4770      	bx	lr
  40c6f2:	bf00      	nop
  40c6f4:	20000798 	.word	0x20000798

0040c6f8 <memcpy>:
  40c6f8:	4684      	mov	ip, r0
  40c6fa:	ea41 0300 	orr.w	r3, r1, r0
  40c6fe:	f013 0303 	ands.w	r3, r3, #3
  40c702:	d16d      	bne.n	40c7e0 <memcpy+0xe8>
  40c704:	3a40      	subs	r2, #64	; 0x40
  40c706:	d341      	bcc.n	40c78c <memcpy+0x94>
  40c708:	f851 3b04 	ldr.w	r3, [r1], #4
  40c70c:	f840 3b04 	str.w	r3, [r0], #4
  40c710:	f851 3b04 	ldr.w	r3, [r1], #4
  40c714:	f840 3b04 	str.w	r3, [r0], #4
  40c718:	f851 3b04 	ldr.w	r3, [r1], #4
  40c71c:	f840 3b04 	str.w	r3, [r0], #4
  40c720:	f851 3b04 	ldr.w	r3, [r1], #4
  40c724:	f840 3b04 	str.w	r3, [r0], #4
  40c728:	f851 3b04 	ldr.w	r3, [r1], #4
  40c72c:	f840 3b04 	str.w	r3, [r0], #4
  40c730:	f851 3b04 	ldr.w	r3, [r1], #4
  40c734:	f840 3b04 	str.w	r3, [r0], #4
  40c738:	f851 3b04 	ldr.w	r3, [r1], #4
  40c73c:	f840 3b04 	str.w	r3, [r0], #4
  40c740:	f851 3b04 	ldr.w	r3, [r1], #4
  40c744:	f840 3b04 	str.w	r3, [r0], #4
  40c748:	f851 3b04 	ldr.w	r3, [r1], #4
  40c74c:	f840 3b04 	str.w	r3, [r0], #4
  40c750:	f851 3b04 	ldr.w	r3, [r1], #4
  40c754:	f840 3b04 	str.w	r3, [r0], #4
  40c758:	f851 3b04 	ldr.w	r3, [r1], #4
  40c75c:	f840 3b04 	str.w	r3, [r0], #4
  40c760:	f851 3b04 	ldr.w	r3, [r1], #4
  40c764:	f840 3b04 	str.w	r3, [r0], #4
  40c768:	f851 3b04 	ldr.w	r3, [r1], #4
  40c76c:	f840 3b04 	str.w	r3, [r0], #4
  40c770:	f851 3b04 	ldr.w	r3, [r1], #4
  40c774:	f840 3b04 	str.w	r3, [r0], #4
  40c778:	f851 3b04 	ldr.w	r3, [r1], #4
  40c77c:	f840 3b04 	str.w	r3, [r0], #4
  40c780:	f851 3b04 	ldr.w	r3, [r1], #4
  40c784:	f840 3b04 	str.w	r3, [r0], #4
  40c788:	3a40      	subs	r2, #64	; 0x40
  40c78a:	d2bd      	bcs.n	40c708 <memcpy+0x10>
  40c78c:	3230      	adds	r2, #48	; 0x30
  40c78e:	d311      	bcc.n	40c7b4 <memcpy+0xbc>
  40c790:	f851 3b04 	ldr.w	r3, [r1], #4
  40c794:	f840 3b04 	str.w	r3, [r0], #4
  40c798:	f851 3b04 	ldr.w	r3, [r1], #4
  40c79c:	f840 3b04 	str.w	r3, [r0], #4
  40c7a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c7a4:	f840 3b04 	str.w	r3, [r0], #4
  40c7a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c7ac:	f840 3b04 	str.w	r3, [r0], #4
  40c7b0:	3a10      	subs	r2, #16
  40c7b2:	d2ed      	bcs.n	40c790 <memcpy+0x98>
  40c7b4:	320c      	adds	r2, #12
  40c7b6:	d305      	bcc.n	40c7c4 <memcpy+0xcc>
  40c7b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c7bc:	f840 3b04 	str.w	r3, [r0], #4
  40c7c0:	3a04      	subs	r2, #4
  40c7c2:	d2f9      	bcs.n	40c7b8 <memcpy+0xc0>
  40c7c4:	3204      	adds	r2, #4
  40c7c6:	d008      	beq.n	40c7da <memcpy+0xe2>
  40c7c8:	07d2      	lsls	r2, r2, #31
  40c7ca:	bf1c      	itt	ne
  40c7cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c7d0:	f800 3b01 	strbne.w	r3, [r0], #1
  40c7d4:	d301      	bcc.n	40c7da <memcpy+0xe2>
  40c7d6:	880b      	ldrh	r3, [r1, #0]
  40c7d8:	8003      	strh	r3, [r0, #0]
  40c7da:	4660      	mov	r0, ip
  40c7dc:	4770      	bx	lr
  40c7de:	bf00      	nop
  40c7e0:	2a08      	cmp	r2, #8
  40c7e2:	d313      	bcc.n	40c80c <memcpy+0x114>
  40c7e4:	078b      	lsls	r3, r1, #30
  40c7e6:	d08d      	beq.n	40c704 <memcpy+0xc>
  40c7e8:	f010 0303 	ands.w	r3, r0, #3
  40c7ec:	d08a      	beq.n	40c704 <memcpy+0xc>
  40c7ee:	f1c3 0304 	rsb	r3, r3, #4
  40c7f2:	1ad2      	subs	r2, r2, r3
  40c7f4:	07db      	lsls	r3, r3, #31
  40c7f6:	bf1c      	itt	ne
  40c7f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c7fc:	f800 3b01 	strbne.w	r3, [r0], #1
  40c800:	d380      	bcc.n	40c704 <memcpy+0xc>
  40c802:	f831 3b02 	ldrh.w	r3, [r1], #2
  40c806:	f820 3b02 	strh.w	r3, [r0], #2
  40c80a:	e77b      	b.n	40c704 <memcpy+0xc>
  40c80c:	3a04      	subs	r2, #4
  40c80e:	d3d9      	bcc.n	40c7c4 <memcpy+0xcc>
  40c810:	3a01      	subs	r2, #1
  40c812:	f811 3b01 	ldrb.w	r3, [r1], #1
  40c816:	f800 3b01 	strb.w	r3, [r0], #1
  40c81a:	d2f9      	bcs.n	40c810 <memcpy+0x118>
  40c81c:	780b      	ldrb	r3, [r1, #0]
  40c81e:	7003      	strb	r3, [r0, #0]
  40c820:	784b      	ldrb	r3, [r1, #1]
  40c822:	7043      	strb	r3, [r0, #1]
  40c824:	788b      	ldrb	r3, [r1, #2]
  40c826:	7083      	strb	r3, [r0, #2]
  40c828:	4660      	mov	r0, ip
  40c82a:	4770      	bx	lr

0040c82c <memset>:
  40c82c:	b4f0      	push	{r4, r5, r6, r7}
  40c82e:	0784      	lsls	r4, r0, #30
  40c830:	d043      	beq.n	40c8ba <memset+0x8e>
  40c832:	1e54      	subs	r4, r2, #1
  40c834:	2a00      	cmp	r2, #0
  40c836:	d03e      	beq.n	40c8b6 <memset+0x8a>
  40c838:	b2cd      	uxtb	r5, r1
  40c83a:	4603      	mov	r3, r0
  40c83c:	e003      	b.n	40c846 <memset+0x1a>
  40c83e:	1e62      	subs	r2, r4, #1
  40c840:	2c00      	cmp	r4, #0
  40c842:	d038      	beq.n	40c8b6 <memset+0x8a>
  40c844:	4614      	mov	r4, r2
  40c846:	f803 5b01 	strb.w	r5, [r3], #1
  40c84a:	079a      	lsls	r2, r3, #30
  40c84c:	d1f7      	bne.n	40c83e <memset+0x12>
  40c84e:	2c03      	cmp	r4, #3
  40c850:	d92a      	bls.n	40c8a8 <memset+0x7c>
  40c852:	b2cd      	uxtb	r5, r1
  40c854:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40c858:	2c0f      	cmp	r4, #15
  40c85a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40c85e:	d915      	bls.n	40c88c <memset+0x60>
  40c860:	f1a4 0710 	sub.w	r7, r4, #16
  40c864:	093f      	lsrs	r7, r7, #4
  40c866:	f103 0610 	add.w	r6, r3, #16
  40c86a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40c86e:	461a      	mov	r2, r3
  40c870:	6015      	str	r5, [r2, #0]
  40c872:	6055      	str	r5, [r2, #4]
  40c874:	6095      	str	r5, [r2, #8]
  40c876:	60d5      	str	r5, [r2, #12]
  40c878:	3210      	adds	r2, #16
  40c87a:	42b2      	cmp	r2, r6
  40c87c:	d1f8      	bne.n	40c870 <memset+0x44>
  40c87e:	f004 040f 	and.w	r4, r4, #15
  40c882:	3701      	adds	r7, #1
  40c884:	2c03      	cmp	r4, #3
  40c886:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40c88a:	d90d      	bls.n	40c8a8 <memset+0x7c>
  40c88c:	461e      	mov	r6, r3
  40c88e:	4622      	mov	r2, r4
  40c890:	3a04      	subs	r2, #4
  40c892:	2a03      	cmp	r2, #3
  40c894:	f846 5b04 	str.w	r5, [r6], #4
  40c898:	d8fa      	bhi.n	40c890 <memset+0x64>
  40c89a:	1f22      	subs	r2, r4, #4
  40c89c:	f022 0203 	bic.w	r2, r2, #3
  40c8a0:	3204      	adds	r2, #4
  40c8a2:	4413      	add	r3, r2
  40c8a4:	f004 0403 	and.w	r4, r4, #3
  40c8a8:	b12c      	cbz	r4, 40c8b6 <memset+0x8a>
  40c8aa:	b2c9      	uxtb	r1, r1
  40c8ac:	441c      	add	r4, r3
  40c8ae:	f803 1b01 	strb.w	r1, [r3], #1
  40c8b2:	42a3      	cmp	r3, r4
  40c8b4:	d1fb      	bne.n	40c8ae <memset+0x82>
  40c8b6:	bcf0      	pop	{r4, r5, r6, r7}
  40c8b8:	4770      	bx	lr
  40c8ba:	4614      	mov	r4, r2
  40c8bc:	4603      	mov	r3, r0
  40c8be:	e7c6      	b.n	40c84e <memset+0x22>

0040c8c0 <_puts_r>:
  40c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c8c2:	4604      	mov	r4, r0
  40c8c4:	b089      	sub	sp, #36	; 0x24
  40c8c6:	4608      	mov	r0, r1
  40c8c8:	460d      	mov	r5, r1
  40c8ca:	f000 f94d 	bl	40cb68 <strlen>
  40c8ce:	68a3      	ldr	r3, [r4, #8]
  40c8d0:	4f11      	ldr	r7, [pc, #68]	; (40c918 <_puts_r+0x58>)
  40c8d2:	899a      	ldrh	r2, [r3, #12]
  40c8d4:	9504      	str	r5, [sp, #16]
  40c8d6:	2102      	movs	r1, #2
  40c8d8:	f100 0e01 	add.w	lr, r0, #1
  40c8dc:	2601      	movs	r6, #1
  40c8de:	ad04      	add	r5, sp, #16
  40c8e0:	9102      	str	r1, [sp, #8]
  40c8e2:	0491      	lsls	r1, r2, #18
  40c8e4:	9005      	str	r0, [sp, #20]
  40c8e6:	f8cd e00c 	str.w	lr, [sp, #12]
  40c8ea:	9706      	str	r7, [sp, #24]
  40c8ec:	9607      	str	r6, [sp, #28]
  40c8ee:	9501      	str	r5, [sp, #4]
  40c8f0:	d406      	bmi.n	40c900 <_puts_r+0x40>
  40c8f2:	6e59      	ldr	r1, [r3, #100]	; 0x64
  40c8f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c8f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c8fc:	819a      	strh	r2, [r3, #12]
  40c8fe:	6659      	str	r1, [r3, #100]	; 0x64
  40c900:	4620      	mov	r0, r4
  40c902:	4619      	mov	r1, r3
  40c904:	aa01      	add	r2, sp, #4
  40c906:	f004 fd69 	bl	4113dc <__sfvwrite_r>
  40c90a:	2800      	cmp	r0, #0
  40c90c:	bf0c      	ite	eq
  40c90e:	200a      	moveq	r0, #10
  40c910:	f04f 30ff 	movne.w	r0, #4294967295
  40c914:	b009      	add	sp, #36	; 0x24
  40c916:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c918:	00415e0c 	.word	0x00415e0c

0040c91c <puts>:
  40c91c:	4b02      	ldr	r3, [pc, #8]	; (40c928 <puts+0xc>)
  40c91e:	4601      	mov	r1, r0
  40c920:	6818      	ldr	r0, [r3, #0]
  40c922:	f7ff bfcd 	b.w	40c8c0 <_puts_r>
  40c926:	bf00      	nop
  40c928:	20000798 	.word	0x20000798

0040c92c <setbuf>:
  40c92c:	2900      	cmp	r1, #0
  40c92e:	bf0c      	ite	eq
  40c930:	2202      	moveq	r2, #2
  40c932:	2200      	movne	r2, #0
  40c934:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c938:	f000 b800 	b.w	40c93c <setvbuf>

0040c93c <setvbuf>:
  40c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c940:	4c3c      	ldr	r4, [pc, #240]	; (40ca34 <setvbuf+0xf8>)
  40c942:	6825      	ldr	r5, [r4, #0]
  40c944:	4688      	mov	r8, r1
  40c946:	4604      	mov	r4, r0
  40c948:	4616      	mov	r6, r2
  40c94a:	461f      	mov	r7, r3
  40c94c:	b115      	cbz	r5, 40c954 <setvbuf+0x18>
  40c94e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40c950:	2b00      	cmp	r3, #0
  40c952:	d04f      	beq.n	40c9f4 <setvbuf+0xb8>
  40c954:	2e02      	cmp	r6, #2
  40c956:	d830      	bhi.n	40c9ba <setvbuf+0x7e>
  40c958:	2f00      	cmp	r7, #0
  40c95a:	db2e      	blt.n	40c9ba <setvbuf+0x7e>
  40c95c:	4628      	mov	r0, r5
  40c95e:	4621      	mov	r1, r4
  40c960:	f004 fb10 	bl	410f84 <_fflush_r>
  40c964:	89a3      	ldrh	r3, [r4, #12]
  40c966:	2200      	movs	r2, #0
  40c968:	6062      	str	r2, [r4, #4]
  40c96a:	61a2      	str	r2, [r4, #24]
  40c96c:	061a      	lsls	r2, r3, #24
  40c96e:	d428      	bmi.n	40c9c2 <setvbuf+0x86>
  40c970:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40c974:	b29b      	uxth	r3, r3
  40c976:	2e02      	cmp	r6, #2
  40c978:	81a3      	strh	r3, [r4, #12]
  40c97a:	d02d      	beq.n	40c9d8 <setvbuf+0x9c>
  40c97c:	f1b8 0f00 	cmp.w	r8, #0
  40c980:	d03c      	beq.n	40c9fc <setvbuf+0xc0>
  40c982:	2e01      	cmp	r6, #1
  40c984:	d013      	beq.n	40c9ae <setvbuf+0x72>
  40c986:	b29b      	uxth	r3, r3
  40c988:	f003 0008 	and.w	r0, r3, #8
  40c98c:	4a2a      	ldr	r2, [pc, #168]	; (40ca38 <setvbuf+0xfc>)
  40c98e:	63ea      	str	r2, [r5, #60]	; 0x3c
  40c990:	b280      	uxth	r0, r0
  40c992:	f8c4 8000 	str.w	r8, [r4]
  40c996:	f8c4 8010 	str.w	r8, [r4, #16]
  40c99a:	6167      	str	r7, [r4, #20]
  40c99c:	b178      	cbz	r0, 40c9be <setvbuf+0x82>
  40c99e:	f013 0f03 	tst.w	r3, #3
  40c9a2:	bf18      	it	ne
  40c9a4:	2700      	movne	r7, #0
  40c9a6:	60a7      	str	r7, [r4, #8]
  40c9a8:	2000      	movs	r0, #0
  40c9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c9ae:	f043 0301 	orr.w	r3, r3, #1
  40c9b2:	427a      	negs	r2, r7
  40c9b4:	81a3      	strh	r3, [r4, #12]
  40c9b6:	61a2      	str	r2, [r4, #24]
  40c9b8:	e7e5      	b.n	40c986 <setvbuf+0x4a>
  40c9ba:	f04f 30ff 	mov.w	r0, #4294967295
  40c9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c9c2:	4628      	mov	r0, r5
  40c9c4:	6921      	ldr	r1, [r4, #16]
  40c9c6:	f004 fc3b 	bl	411240 <_free_r>
  40c9ca:	89a3      	ldrh	r3, [r4, #12]
  40c9cc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40c9d0:	b29b      	uxth	r3, r3
  40c9d2:	2e02      	cmp	r6, #2
  40c9d4:	81a3      	strh	r3, [r4, #12]
  40c9d6:	d1d1      	bne.n	40c97c <setvbuf+0x40>
  40c9d8:	2000      	movs	r0, #0
  40c9da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c9de:	f043 0302 	orr.w	r3, r3, #2
  40c9e2:	2500      	movs	r5, #0
  40c9e4:	2101      	movs	r1, #1
  40c9e6:	81a3      	strh	r3, [r4, #12]
  40c9e8:	60a5      	str	r5, [r4, #8]
  40c9ea:	6022      	str	r2, [r4, #0]
  40c9ec:	6122      	str	r2, [r4, #16]
  40c9ee:	6161      	str	r1, [r4, #20]
  40c9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c9f4:	4628      	mov	r0, r5
  40c9f6:	f004 fae1 	bl	410fbc <__sinit>
  40c9fa:	e7ab      	b.n	40c954 <setvbuf+0x18>
  40c9fc:	2f00      	cmp	r7, #0
  40c9fe:	bf08      	it	eq
  40ca00:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40ca04:	4638      	mov	r0, r7
  40ca06:	f004 ff3b 	bl	411880 <malloc>
  40ca0a:	4680      	mov	r8, r0
  40ca0c:	b128      	cbz	r0, 40ca1a <setvbuf+0xde>
  40ca0e:	89a3      	ldrh	r3, [r4, #12]
  40ca10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ca14:	b29b      	uxth	r3, r3
  40ca16:	81a3      	strh	r3, [r4, #12]
  40ca18:	e7b3      	b.n	40c982 <setvbuf+0x46>
  40ca1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40ca1e:	f004 ff2f 	bl	411880 <malloc>
  40ca22:	4680      	mov	r8, r0
  40ca24:	b918      	cbnz	r0, 40ca2e <setvbuf+0xf2>
  40ca26:	89a3      	ldrh	r3, [r4, #12]
  40ca28:	f04f 30ff 	mov.w	r0, #4294967295
  40ca2c:	e7d5      	b.n	40c9da <setvbuf+0x9e>
  40ca2e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40ca32:	e7ec      	b.n	40ca0e <setvbuf+0xd2>
  40ca34:	20000798 	.word	0x20000798
  40ca38:	00410fb1 	.word	0x00410fb1

0040ca3c <sprintf>:
  40ca3c:	b40e      	push	{r1, r2, r3}
  40ca3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ca40:	b09c      	sub	sp, #112	; 0x70
  40ca42:	ab21      	add	r3, sp, #132	; 0x84
  40ca44:	490f      	ldr	r1, [pc, #60]	; (40ca84 <sprintf+0x48>)
  40ca46:	f853 2b04 	ldr.w	r2, [r3], #4
  40ca4a:	9301      	str	r3, [sp, #4]
  40ca4c:	4605      	mov	r5, r0
  40ca4e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40ca52:	6808      	ldr	r0, [r1, #0]
  40ca54:	9502      	str	r5, [sp, #8]
  40ca56:	f44f 7702 	mov.w	r7, #520	; 0x208
  40ca5a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40ca5e:	a902      	add	r1, sp, #8
  40ca60:	9506      	str	r5, [sp, #24]
  40ca62:	f8ad 7014 	strh.w	r7, [sp, #20]
  40ca66:	9404      	str	r4, [sp, #16]
  40ca68:	9407      	str	r4, [sp, #28]
  40ca6a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40ca6e:	f000 f937 	bl	40cce0 <_svfprintf_r>
  40ca72:	9b02      	ldr	r3, [sp, #8]
  40ca74:	2200      	movs	r2, #0
  40ca76:	701a      	strb	r2, [r3, #0]
  40ca78:	b01c      	add	sp, #112	; 0x70
  40ca7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40ca7e:	b003      	add	sp, #12
  40ca80:	4770      	bx	lr
  40ca82:	bf00      	nop
  40ca84:	20000798 	.word	0x20000798

0040ca88 <sscanf>:
  40ca88:	b40e      	push	{r1, r2, r3}
  40ca8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ca8c:	b09c      	sub	sp, #112	; 0x70
  40ca8e:	ac21      	add	r4, sp, #132	; 0x84
  40ca90:	f44f 7201 	mov.w	r2, #516	; 0x204
  40ca94:	f854 6b04 	ldr.w	r6, [r4], #4
  40ca98:	f8ad 2014 	strh.w	r2, [sp, #20]
  40ca9c:	9002      	str	r0, [sp, #8]
  40ca9e:	9006      	str	r0, [sp, #24]
  40caa0:	f000 f862 	bl	40cb68 <strlen>
  40caa4:	4b0c      	ldr	r3, [pc, #48]	; (40cad8 <sscanf+0x50>)
  40caa6:	9401      	str	r4, [sp, #4]
  40caa8:	4605      	mov	r5, r0
  40caaa:	4632      	mov	r2, r6
  40caac:	4f0b      	ldr	r7, [pc, #44]	; (40cadc <sscanf+0x54>)
  40caae:	6818      	ldr	r0, [r3, #0]
  40cab0:	9503      	str	r5, [sp, #12]
  40cab2:	4623      	mov	r3, r4
  40cab4:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40cab8:	2400      	movs	r4, #0
  40caba:	a902      	add	r1, sp, #8
  40cabc:	9507      	str	r5, [sp, #28]
  40cabe:	970a      	str	r7, [sp, #40]	; 0x28
  40cac0:	940e      	str	r4, [sp, #56]	; 0x38
  40cac2:	9413      	str	r4, [sp, #76]	; 0x4c
  40cac4:	f8ad 6016 	strh.w	r6, [sp, #22]
  40cac8:	f001 fb86 	bl	40e1d8 <__ssvfscanf_r>
  40cacc:	b01c      	add	sp, #112	; 0x70
  40cace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40cad2:	b003      	add	sp, #12
  40cad4:	4770      	bx	lr
  40cad6:	bf00      	nop
  40cad8:	20000798 	.word	0x20000798
  40cadc:	0040cb05 	.word	0x0040cb05

0040cae0 <__sread>:
  40cae0:	b510      	push	{r4, lr}
  40cae2:	460c      	mov	r4, r1
  40cae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cae8:	f005 feaa 	bl	412840 <_read_r>
  40caec:	2800      	cmp	r0, #0
  40caee:	db03      	blt.n	40caf8 <__sread+0x18>
  40caf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40caf2:	4403      	add	r3, r0
  40caf4:	6523      	str	r3, [r4, #80]	; 0x50
  40caf6:	bd10      	pop	{r4, pc}
  40caf8:	89a3      	ldrh	r3, [r4, #12]
  40cafa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cafe:	81a3      	strh	r3, [r4, #12]
  40cb00:	bd10      	pop	{r4, pc}
  40cb02:	bf00      	nop

0040cb04 <__seofread>:
  40cb04:	2000      	movs	r0, #0
  40cb06:	4770      	bx	lr

0040cb08 <__swrite>:
  40cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cb0c:	460c      	mov	r4, r1
  40cb0e:	8989      	ldrh	r1, [r1, #12]
  40cb10:	461d      	mov	r5, r3
  40cb12:	05cb      	lsls	r3, r1, #23
  40cb14:	4616      	mov	r6, r2
  40cb16:	4607      	mov	r7, r0
  40cb18:	d506      	bpl.n	40cb28 <__swrite+0x20>
  40cb1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cb1e:	2200      	movs	r2, #0
  40cb20:	2302      	movs	r3, #2
  40cb22:	f004 fe29 	bl	411778 <_lseek_r>
  40cb26:	89a1      	ldrh	r1, [r4, #12]
  40cb28:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40cb2c:	81a1      	strh	r1, [r4, #12]
  40cb2e:	4638      	mov	r0, r7
  40cb30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cb34:	4632      	mov	r2, r6
  40cb36:	462b      	mov	r3, r5
  40cb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cb3c:	f003 b92c 	b.w	40fd98 <_write_r>

0040cb40 <__sseek>:
  40cb40:	b510      	push	{r4, lr}
  40cb42:	460c      	mov	r4, r1
  40cb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cb48:	f004 fe16 	bl	411778 <_lseek_r>
  40cb4c:	89a3      	ldrh	r3, [r4, #12]
  40cb4e:	1c42      	adds	r2, r0, #1
  40cb50:	bf0e      	itee	eq
  40cb52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40cb56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40cb5a:	6520      	strne	r0, [r4, #80]	; 0x50
  40cb5c:	81a3      	strh	r3, [r4, #12]
  40cb5e:	bd10      	pop	{r4, pc}

0040cb60 <__sclose>:
  40cb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cb64:	f003 b99e 	b.w	40fea4 <_close_r>

0040cb68 <strlen>:
  40cb68:	f020 0103 	bic.w	r1, r0, #3
  40cb6c:	f010 0003 	ands.w	r0, r0, #3
  40cb70:	f1c0 0000 	rsb	r0, r0, #0
  40cb74:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb78:	f100 0c04 	add.w	ip, r0, #4
  40cb7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40cb80:	f06f 0200 	mvn.w	r2, #0
  40cb84:	bf1c      	itt	ne
  40cb86:	fa22 f20c 	lsrne.w	r2, r2, ip
  40cb8a:	4313      	orrne	r3, r2
  40cb8c:	f04f 0c01 	mov.w	ip, #1
  40cb90:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40cb94:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40cb98:	eba3 020c 	sub.w	r2, r3, ip
  40cb9c:	ea22 0203 	bic.w	r2, r2, r3
  40cba0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40cba4:	bf04      	itt	eq
  40cba6:	f851 3b04 	ldreq.w	r3, [r1], #4
  40cbaa:	3004      	addeq	r0, #4
  40cbac:	d0f4      	beq.n	40cb98 <strlen+0x30>
  40cbae:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cbb2:	bf1f      	itttt	ne
  40cbb4:	3001      	addne	r0, #1
  40cbb6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40cbba:	3001      	addne	r0, #1
  40cbbc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40cbc0:	bf18      	it	ne
  40cbc2:	3001      	addne	r0, #1
  40cbc4:	4770      	bx	lr
  40cbc6:	bf00      	nop

0040cbc8 <strncmp>:
  40cbc8:	b430      	push	{r4, r5}
  40cbca:	2a00      	cmp	r2, #0
  40cbcc:	d04a      	beq.n	40cc64 <strncmp+0x9c>
  40cbce:	ea40 0301 	orr.w	r3, r0, r1
  40cbd2:	f013 0303 	ands.w	r3, r3, #3
  40cbd6:	d12d      	bne.n	40cc34 <strncmp+0x6c>
  40cbd8:	2a03      	cmp	r2, #3
  40cbda:	d92b      	bls.n	40cc34 <strncmp+0x6c>
  40cbdc:	6804      	ldr	r4, [r0, #0]
  40cbde:	680d      	ldr	r5, [r1, #0]
  40cbe0:	42ac      	cmp	r4, r5
  40cbe2:	d127      	bne.n	40cc34 <strncmp+0x6c>
  40cbe4:	3a04      	subs	r2, #4
  40cbe6:	d03d      	beq.n	40cc64 <strncmp+0x9c>
  40cbe8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40cbec:	ea25 0404 	bic.w	r4, r5, r4
  40cbf0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40cbf4:	d13c      	bne.n	40cc70 <strncmp+0xa8>
  40cbf6:	460c      	mov	r4, r1
  40cbf8:	4603      	mov	r3, r0
  40cbfa:	e00e      	b.n	40cc1a <strncmp+0x52>
  40cbfc:	685b      	ldr	r3, [r3, #4]
  40cbfe:	6864      	ldr	r4, [r4, #4]
  40cc00:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40cc04:	42a3      	cmp	r3, r4
  40cc06:	ea25 0503 	bic.w	r5, r5, r3
  40cc0a:	d113      	bne.n	40cc34 <strncmp+0x6c>
  40cc0c:	3a04      	subs	r2, #4
  40cc0e:	d029      	beq.n	40cc64 <strncmp+0x9c>
  40cc10:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40cc14:	d129      	bne.n	40cc6a <strncmp+0xa2>
  40cc16:	4603      	mov	r3, r0
  40cc18:	460c      	mov	r4, r1
  40cc1a:	2a03      	cmp	r2, #3
  40cc1c:	f100 0004 	add.w	r0, r0, #4
  40cc20:	f101 0104 	add.w	r1, r1, #4
  40cc24:	d8ea      	bhi.n	40cbfc <strncmp+0x34>
  40cc26:	1e55      	subs	r5, r2, #1
  40cc28:	b92a      	cbnz	r2, 40cc36 <strncmp+0x6e>
  40cc2a:	7918      	ldrb	r0, [r3, #4]
  40cc2c:	7922      	ldrb	r2, [r4, #4]
  40cc2e:	1a80      	subs	r0, r0, r2
  40cc30:	bc30      	pop	{r4, r5}
  40cc32:	4770      	bx	lr
  40cc34:	1e55      	subs	r5, r2, #1
  40cc36:	7803      	ldrb	r3, [r0, #0]
  40cc38:	780a      	ldrb	r2, [r1, #0]
  40cc3a:	4293      	cmp	r3, r2
  40cc3c:	d11a      	bne.n	40cc74 <strncmp+0xac>
  40cc3e:	b1dd      	cbz	r5, 40cc78 <strncmp+0xb0>
  40cc40:	b1b3      	cbz	r3, 40cc70 <strncmp+0xa8>
  40cc42:	1c6c      	adds	r4, r5, #1
  40cc44:	440c      	add	r4, r1
  40cc46:	1c8b      	adds	r3, r1, #2
  40cc48:	4601      	mov	r1, r0
  40cc4a:	e004      	b.n	40cc56 <strncmp+0x8e>
  40cc4c:	42a3      	cmp	r3, r4
  40cc4e:	d00c      	beq.n	40cc6a <strncmp+0xa2>
  40cc50:	3301      	adds	r3, #1
  40cc52:	2800      	cmp	r0, #0
  40cc54:	d0ec      	beq.n	40cc30 <strncmp+0x68>
  40cc56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40cc5a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40cc5e:	4290      	cmp	r0, r2
  40cc60:	d0f4      	beq.n	40cc4c <strncmp+0x84>
  40cc62:	e7e4      	b.n	40cc2e <strncmp+0x66>
  40cc64:	4610      	mov	r0, r2
  40cc66:	bc30      	pop	{r4, r5}
  40cc68:	4770      	bx	lr
  40cc6a:	2000      	movs	r0, #0
  40cc6c:	bc30      	pop	{r4, r5}
  40cc6e:	4770      	bx	lr
  40cc70:	4618      	mov	r0, r3
  40cc72:	e7dd      	b.n	40cc30 <strncmp+0x68>
  40cc74:	4618      	mov	r0, r3
  40cc76:	e7da      	b.n	40cc2e <strncmp+0x66>
  40cc78:	4628      	mov	r0, r5
  40cc7a:	e7d9      	b.n	40cc30 <strncmp+0x68>

0040cc7c <strncpy>:
  40cc7c:	ea40 0301 	orr.w	r3, r0, r1
  40cc80:	079b      	lsls	r3, r3, #30
  40cc82:	b470      	push	{r4, r5, r6}
  40cc84:	d12a      	bne.n	40ccdc <strncpy+0x60>
  40cc86:	2a03      	cmp	r2, #3
  40cc88:	d928      	bls.n	40ccdc <strncpy+0x60>
  40cc8a:	460c      	mov	r4, r1
  40cc8c:	4603      	mov	r3, r0
  40cc8e:	4621      	mov	r1, r4
  40cc90:	f854 5b04 	ldr.w	r5, [r4], #4
  40cc94:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40cc98:	ea26 0605 	bic.w	r6, r6, r5
  40cc9c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40cca0:	d105      	bne.n	40ccae <strncpy+0x32>
  40cca2:	3a04      	subs	r2, #4
  40cca4:	2a03      	cmp	r2, #3
  40cca6:	f843 5b04 	str.w	r5, [r3], #4
  40ccaa:	4621      	mov	r1, r4
  40ccac:	d8ef      	bhi.n	40cc8e <strncpy+0x12>
  40ccae:	b19a      	cbz	r2, 40ccd8 <strncpy+0x5c>
  40ccb0:	780c      	ldrb	r4, [r1, #0]
  40ccb2:	701c      	strb	r4, [r3, #0]
  40ccb4:	3a01      	subs	r2, #1
  40ccb6:	3301      	adds	r3, #1
  40ccb8:	b13c      	cbz	r4, 40ccca <strncpy+0x4e>
  40ccba:	b16a      	cbz	r2, 40ccd8 <strncpy+0x5c>
  40ccbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40ccc0:	f803 4b01 	strb.w	r4, [r3], #1
  40ccc4:	3a01      	subs	r2, #1
  40ccc6:	2c00      	cmp	r4, #0
  40ccc8:	d1f7      	bne.n	40ccba <strncpy+0x3e>
  40ccca:	b12a      	cbz	r2, 40ccd8 <strncpy+0x5c>
  40cccc:	441a      	add	r2, r3
  40ccce:	2100      	movs	r1, #0
  40ccd0:	f803 1b01 	strb.w	r1, [r3], #1
  40ccd4:	4293      	cmp	r3, r2
  40ccd6:	d1fb      	bne.n	40ccd0 <strncpy+0x54>
  40ccd8:	bc70      	pop	{r4, r5, r6}
  40ccda:	4770      	bx	lr
  40ccdc:	4603      	mov	r3, r0
  40ccde:	e7e6      	b.n	40ccae <strncpy+0x32>

0040cce0 <_svfprintf_r>:
  40cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cce4:	b0c9      	sub	sp, #292	; 0x124
  40cce6:	4691      	mov	r9, r2
  40cce8:	9310      	str	r3, [sp, #64]	; 0x40
  40ccea:	910c      	str	r1, [sp, #48]	; 0x30
  40ccec:	900d      	str	r0, [sp, #52]	; 0x34
  40ccee:	f004 fd3f 	bl	411770 <_localeconv_r>
  40ccf2:	6800      	ldr	r0, [r0, #0]
  40ccf4:	9015      	str	r0, [sp, #84]	; 0x54
  40ccf6:	f7ff ff37 	bl	40cb68 <strlen>
  40ccfa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ccfc:	9018      	str	r0, [sp, #96]	; 0x60
  40ccfe:	89a3      	ldrh	r3, [r4, #12]
  40cd00:	061a      	lsls	r2, r3, #24
  40cd02:	d503      	bpl.n	40cd0c <_svfprintf_r+0x2c>
  40cd04:	6923      	ldr	r3, [r4, #16]
  40cd06:	2b00      	cmp	r3, #0
  40cd08:	f001 808d 	beq.w	40de26 <_svfprintf_r+0x1146>
  40cd0c:	ac38      	add	r4, sp, #224	; 0xe0
  40cd0e:	46a4      	mov	ip, r4
  40cd10:	9408      	str	r4, [sp, #32]
  40cd12:	942b      	str	r4, [sp, #172]	; 0xac
  40cd14:	2500      	movs	r5, #0
  40cd16:	2400      	movs	r4, #0
  40cd18:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40cd1c:	2300      	movs	r3, #0
  40cd1e:	9311      	str	r3, [sp, #68]	; 0x44
  40cd20:	932d      	str	r3, [sp, #180]	; 0xb4
  40cd22:	932c      	str	r3, [sp, #176]	; 0xb0
  40cd24:	931a      	str	r3, [sp, #104]	; 0x68
  40cd26:	9319      	str	r3, [sp, #100]	; 0x64
  40cd28:	930e      	str	r3, [sp, #56]	; 0x38
  40cd2a:	4666      	mov	r6, ip
  40cd2c:	f899 3000 	ldrb.w	r3, [r9]
  40cd30:	2b00      	cmp	r3, #0
  40cd32:	f000 80f8 	beq.w	40cf26 <_svfprintf_r+0x246>
  40cd36:	2b25      	cmp	r3, #37	; 0x25
  40cd38:	f000 80f5 	beq.w	40cf26 <_svfprintf_r+0x246>
  40cd3c:	f109 0201 	add.w	r2, r9, #1
  40cd40:	e001      	b.n	40cd46 <_svfprintf_r+0x66>
  40cd42:	2b25      	cmp	r3, #37	; 0x25
  40cd44:	d004      	beq.n	40cd50 <_svfprintf_r+0x70>
  40cd46:	4614      	mov	r4, r2
  40cd48:	3201      	adds	r2, #1
  40cd4a:	7823      	ldrb	r3, [r4, #0]
  40cd4c:	2b00      	cmp	r3, #0
  40cd4e:	d1f8      	bne.n	40cd42 <_svfprintf_r+0x62>
  40cd50:	ebc9 0504 	rsb	r5, r9, r4
  40cd54:	b17d      	cbz	r5, 40cd76 <_svfprintf_r+0x96>
  40cd56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40cd58:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40cd5a:	f8c6 9000 	str.w	r9, [r6]
  40cd5e:	3301      	adds	r3, #1
  40cd60:	442a      	add	r2, r5
  40cd62:	2b07      	cmp	r3, #7
  40cd64:	6075      	str	r5, [r6, #4]
  40cd66:	922d      	str	r2, [sp, #180]	; 0xb4
  40cd68:	932c      	str	r3, [sp, #176]	; 0xb0
  40cd6a:	f300 80c2 	bgt.w	40cef2 <_svfprintf_r+0x212>
  40cd6e:	3608      	adds	r6, #8
  40cd70:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cd72:	4428      	add	r0, r5
  40cd74:	900e      	str	r0, [sp, #56]	; 0x38
  40cd76:	7823      	ldrb	r3, [r4, #0]
  40cd78:	2b00      	cmp	r3, #0
  40cd7a:	f000 80c2 	beq.w	40cf02 <_svfprintf_r+0x222>
  40cd7e:	2300      	movs	r3, #0
  40cd80:	f894 8001 	ldrb.w	r8, [r4, #1]
  40cd84:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40cd88:	461a      	mov	r2, r3
  40cd8a:	930f      	str	r3, [sp, #60]	; 0x3c
  40cd8c:	9309      	str	r3, [sp, #36]	; 0x24
  40cd8e:	f104 0901 	add.w	r9, r4, #1
  40cd92:	f04f 34ff 	mov.w	r4, #4294967295
  40cd96:	940a      	str	r4, [sp, #40]	; 0x28
  40cd98:	f109 0901 	add.w	r9, r9, #1
  40cd9c:	f1a8 0320 	sub.w	r3, r8, #32
  40cda0:	2b58      	cmp	r3, #88	; 0x58
  40cda2:	f200 83c7 	bhi.w	40d534 <_svfprintf_r+0x854>
  40cda6:	e8df f013 	tbh	[pc, r3, lsl #1]
  40cdaa:	026a      	.short	0x026a
  40cdac:	03c503c5 	.word	0x03c503c5
  40cdb0:	03c50271 	.word	0x03c50271
  40cdb4:	03c503c5 	.word	0x03c503c5
  40cdb8:	03c503c5 	.word	0x03c503c5
  40cdbc:	031403c5 	.word	0x031403c5
  40cdc0:	03c50364 	.word	0x03c50364
  40cdc4:	00c0009d 	.word	0x00c0009d
  40cdc8:	027803c5 	.word	0x027803c5
  40cdcc:	027f027f 	.word	0x027f027f
  40cdd0:	027f027f 	.word	0x027f027f
  40cdd4:	027f027f 	.word	0x027f027f
  40cdd8:	027f027f 	.word	0x027f027f
  40cddc:	03c5027f 	.word	0x03c5027f
  40cde0:	03c503c5 	.word	0x03c503c5
  40cde4:	03c503c5 	.word	0x03c503c5
  40cde8:	03c503c5 	.word	0x03c503c5
  40cdec:	03c503c5 	.word	0x03c503c5
  40cdf0:	029003c5 	.word	0x029003c5
  40cdf4:	03c5036f 	.word	0x03c5036f
  40cdf8:	03c5036f 	.word	0x03c5036f
  40cdfc:	03c503c5 	.word	0x03c503c5
  40ce00:	036803c5 	.word	0x036803c5
  40ce04:	03c503c5 	.word	0x03c503c5
  40ce08:	03c50078 	.word	0x03c50078
  40ce0c:	03c503c5 	.word	0x03c503c5
  40ce10:	03c503c5 	.word	0x03c503c5
  40ce14:	03c50059 	.word	0x03c50059
  40ce18:	02af03c5 	.word	0x02af03c5
  40ce1c:	03c503c5 	.word	0x03c503c5
  40ce20:	03c503c5 	.word	0x03c503c5
  40ce24:	03c503c5 	.word	0x03c503c5
  40ce28:	03c503c5 	.word	0x03c503c5
  40ce2c:	03c503c5 	.word	0x03c503c5
  40ce30:	03480337 	.word	0x03480337
  40ce34:	036f036f 	.word	0x036f036f
  40ce38:	02ff036f 	.word	0x02ff036f
  40ce3c:	03c50348 	.word	0x03c50348
  40ce40:	030803c5 	.word	0x030803c5
  40ce44:	02c503c5 	.word	0x02c503c5
  40ce48:	0321007c 	.word	0x0321007c
  40ce4c:	03c503a5 	.word	0x03c503a5
  40ce50:	03c502d9 	.word	0x03c502d9
  40ce54:	03c5005f 	.word	0x03c5005f
  40ce58:	00de03c5 	.word	0x00de03c5
  40ce5c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ce60:	f04c 0c10 	orr.w	ip, ip, #16
  40ce64:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ce68:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ce6a:	06a2      	lsls	r2, r4, #26
  40ce6c:	f100 8356 	bmi.w	40d51c <_svfprintf_r+0x83c>
  40ce70:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ce72:	06e3      	lsls	r3, r4, #27
  40ce74:	f100 85e0 	bmi.w	40da38 <_svfprintf_r+0xd58>
  40ce78:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ce7c:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40ce80:	f000 85da 	beq.w	40da38 <_svfprintf_r+0xd58>
  40ce84:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ce88:	f8bc 4000 	ldrh.w	r4, [ip]
  40ce8c:	f10c 0c04 	add.w	ip, ip, #4
  40ce90:	2500      	movs	r5, #0
  40ce92:	2301      	movs	r3, #1
  40ce94:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ce98:	e08c      	b.n	40cfb4 <_svfprintf_r+0x2d4>
  40ce9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ce9c:	f045 0510 	orr.w	r5, r5, #16
  40cea0:	9509      	str	r5, [sp, #36]	; 0x24
  40cea2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40cea6:	f01c 0320 	ands.w	r3, ip, #32
  40ceaa:	f040 832c 	bne.w	40d506 <_svfprintf_r+0x826>
  40ceae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ceb2:	f01c 0210 	ands.w	r2, ip, #16
  40ceb6:	f040 85b8 	bne.w	40da2a <_svfprintf_r+0xd4a>
  40ceba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40cebe:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40cec2:	f000 85b2 	beq.w	40da2a <_svfprintf_r+0xd4a>
  40cec6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ceca:	f8bc 4000 	ldrh.w	r4, [ip]
  40cece:	f10c 0c04 	add.w	ip, ip, #4
  40ced2:	4613      	mov	r3, r2
  40ced4:	2500      	movs	r5, #0
  40ced6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ceda:	e06b      	b.n	40cfb4 <_svfprintf_r+0x2d4>
  40cedc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40cede:	9310      	str	r3, [sp, #64]	; 0x40
  40cee0:	4264      	negs	r4, r4
  40cee2:	940f      	str	r4, [sp, #60]	; 0x3c
  40cee4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cee6:	f045 0504 	orr.w	r5, r5, #4
  40ceea:	9509      	str	r5, [sp, #36]	; 0x24
  40ceec:	f899 8000 	ldrb.w	r8, [r9]
  40cef0:	e752      	b.n	40cd98 <_svfprintf_r+0xb8>
  40cef2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40cef4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cef6:	aa2b      	add	r2, sp, #172	; 0xac
  40cef8:	f007 f982 	bl	414200 <__ssprint_r>
  40cefc:	b940      	cbnz	r0, 40cf10 <_svfprintf_r+0x230>
  40cefe:	ae38      	add	r6, sp, #224	; 0xe0
  40cf00:	e736      	b.n	40cd70 <_svfprintf_r+0x90>
  40cf02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40cf04:	b123      	cbz	r3, 40cf10 <_svfprintf_r+0x230>
  40cf06:	980d      	ldr	r0, [sp, #52]	; 0x34
  40cf08:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cf0a:	aa2b      	add	r2, sp, #172	; 0xac
  40cf0c:	f007 f978 	bl	414200 <__ssprint_r>
  40cf10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40cf12:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cf14:	89a3      	ldrh	r3, [r4, #12]
  40cf16:	f013 0f40 	tst.w	r3, #64	; 0x40
  40cf1a:	bf18      	it	ne
  40cf1c:	f04f 30ff 	movne.w	r0, #4294967295
  40cf20:	b049      	add	sp, #292	; 0x124
  40cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf26:	464c      	mov	r4, r9
  40cf28:	e725      	b.n	40cd76 <_svfprintf_r+0x96>
  40cf2a:	f899 8000 	ldrb.w	r8, [r9]
  40cf2e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40cf32:	f109 0001 	add.w	r0, r9, #1
  40cf36:	f001 8118 	beq.w	40e16a <_svfprintf_r+0x148a>
  40cf3a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40cf3e:	2b09      	cmp	r3, #9
  40cf40:	bf98      	it	ls
  40cf42:	2100      	movls	r1, #0
  40cf44:	f201 8077 	bhi.w	40e036 <_svfprintf_r+0x1356>
  40cf48:	f810 8b01 	ldrb.w	r8, [r0], #1
  40cf4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40cf50:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40cf54:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40cf58:	2b09      	cmp	r3, #9
  40cf5a:	d9f5      	bls.n	40cf48 <_svfprintf_r+0x268>
  40cf5c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40cf60:	910a      	str	r1, [sp, #40]	; 0x28
  40cf62:	4681      	mov	r9, r0
  40cf64:	e71a      	b.n	40cd9c <_svfprintf_r+0xbc>
  40cf66:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cf68:	4ca1      	ldr	r4, [pc, #644]	; (40d1f0 <_svfprintf_r+0x510>)
  40cf6a:	941a      	str	r4, [sp, #104]	; 0x68
  40cf6c:	06af      	lsls	r7, r5, #26
  40cf6e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40cf72:	f140 81d1 	bpl.w	40d318 <_svfprintf_r+0x638>
  40cf76:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40cf7a:	f10c 0307 	add.w	r3, ip, #7
  40cf7e:	f023 0307 	bic.w	r3, r3, #7
  40cf82:	f103 0408 	add.w	r4, r3, #8
  40cf86:	9410      	str	r4, [sp, #64]	; 0x40
  40cf88:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cf8c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40cf90:	f01c 0f01 	tst.w	ip, #1
  40cf94:	f000 8464 	beq.w	40d860 <_svfprintf_r+0xb80>
  40cf98:	ea54 0005 	orrs.w	r0, r4, r5
  40cf9c:	f000 8460 	beq.w	40d860 <_svfprintf_r+0xb80>
  40cfa0:	2330      	movs	r3, #48	; 0x30
  40cfa2:	f04c 0c02 	orr.w	ip, ip, #2
  40cfa6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40cfaa:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40cfae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40cfb2:	2302      	movs	r3, #2
  40cfb4:	f04f 0a00 	mov.w	sl, #0
  40cfb8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40cfbc:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cfbe:	2900      	cmp	r1, #0
  40cfc0:	db05      	blt.n	40cfce <_svfprintf_r+0x2ee>
  40cfc2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40cfc6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40cfca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40cfce:	ea54 0005 	orrs.w	r0, r4, r5
  40cfd2:	f040 82c7 	bne.w	40d564 <_svfprintf_r+0x884>
  40cfd6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cfd8:	2900      	cmp	r1, #0
  40cfda:	f040 82c3 	bne.w	40d564 <_svfprintf_r+0x884>
  40cfde:	2b00      	cmp	r3, #0
  40cfe0:	f040 843a 	bne.w	40d858 <_svfprintf_r+0xb78>
  40cfe4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40cfe8:	f01c 0f01 	tst.w	ip, #1
  40cfec:	f000 8434 	beq.w	40d858 <_svfprintf_r+0xb78>
  40cff0:	af48      	add	r7, sp, #288	; 0x120
  40cff2:	2330      	movs	r3, #48	; 0x30
  40cff4:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40cff8:	9d08      	ldr	r5, [sp, #32]
  40cffa:	1bec      	subs	r4, r5, r7
  40cffc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40d000:	2500      	movs	r5, #0
  40d002:	4564      	cmp	r4, ip
  40d004:	bfa8      	it	ge
  40d006:	46a4      	movge	ip, r4
  40d008:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40d00c:	9514      	str	r5, [sp, #80]	; 0x50
  40d00e:	f1ba 0f00 	cmp.w	sl, #0
  40d012:	d002      	beq.n	40d01a <_svfprintf_r+0x33a>
  40d014:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d016:	3501      	adds	r5, #1
  40d018:	950b      	str	r5, [sp, #44]	; 0x2c
  40d01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d01c:	f013 0302 	ands.w	r3, r3, #2
  40d020:	9312      	str	r3, [sp, #72]	; 0x48
  40d022:	d002      	beq.n	40d02a <_svfprintf_r+0x34a>
  40d024:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d026:	3502      	adds	r5, #2
  40d028:	950b      	str	r5, [sp, #44]	; 0x2c
  40d02a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d02e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40d032:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40d036:	f040 8292 	bne.w	40d55e <_svfprintf_r+0x87e>
  40d03a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d03c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40d040:	ebcc 0b05 	rsb	fp, ip, r5
  40d044:	f1bb 0f00 	cmp.w	fp, #0
  40d048:	f340 8289 	ble.w	40d55e <_svfprintf_r+0x87e>
  40d04c:	f1bb 0f10 	cmp.w	fp, #16
  40d050:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d052:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40d054:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40d1f8 <_svfprintf_r+0x518>
  40d058:	dd2c      	ble.n	40d0b4 <_svfprintf_r+0x3d4>
  40d05a:	971b      	str	r7, [sp, #108]	; 0x6c
  40d05c:	4630      	mov	r0, r6
  40d05e:	4657      	mov	r7, sl
  40d060:	2510      	movs	r5, #16
  40d062:	46ca      	mov	sl, r9
  40d064:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40d066:	46a1      	mov	r9, r4
  40d068:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d06a:	e006      	b.n	40d07a <_svfprintf_r+0x39a>
  40d06c:	f1ab 0b10 	sub.w	fp, fp, #16
  40d070:	f1bb 0f10 	cmp.w	fp, #16
  40d074:	f100 0008 	add.w	r0, r0, #8
  40d078:	dd17      	ble.n	40d0aa <_svfprintf_r+0x3ca>
  40d07a:	3201      	adds	r2, #1
  40d07c:	3110      	adds	r1, #16
  40d07e:	2a07      	cmp	r2, #7
  40d080:	912d      	str	r1, [sp, #180]	; 0xb4
  40d082:	922c      	str	r2, [sp, #176]	; 0xb0
  40d084:	6007      	str	r7, [r0, #0]
  40d086:	6045      	str	r5, [r0, #4]
  40d088:	ddf0      	ble.n	40d06c <_svfprintf_r+0x38c>
  40d08a:	4620      	mov	r0, r4
  40d08c:	4631      	mov	r1, r6
  40d08e:	aa2b      	add	r2, sp, #172	; 0xac
  40d090:	f007 f8b6 	bl	414200 <__ssprint_r>
  40d094:	2800      	cmp	r0, #0
  40d096:	f47f af3b 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d09a:	f1ab 0b10 	sub.w	fp, fp, #16
  40d09e:	f1bb 0f10 	cmp.w	fp, #16
  40d0a2:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d0a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40d0a6:	a838      	add	r0, sp, #224	; 0xe0
  40d0a8:	dce7      	bgt.n	40d07a <_svfprintf_r+0x39a>
  40d0aa:	464c      	mov	r4, r9
  40d0ac:	46d1      	mov	r9, sl
  40d0ae:	46ba      	mov	sl, r7
  40d0b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40d0b2:	4606      	mov	r6, r0
  40d0b4:	3201      	adds	r2, #1
  40d0b6:	eb0b 0c01 	add.w	ip, fp, r1
  40d0ba:	2a07      	cmp	r2, #7
  40d0bc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d0c0:	922c      	str	r2, [sp, #176]	; 0xb0
  40d0c2:	e886 0c00 	stmia.w	r6, {sl, fp}
  40d0c6:	f300 841c 	bgt.w	40d902 <_svfprintf_r+0xc22>
  40d0ca:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d0ce:	3608      	adds	r6, #8
  40d0d0:	f1ba 0f00 	cmp.w	sl, #0
  40d0d4:	d00f      	beq.n	40d0f6 <_svfprintf_r+0x416>
  40d0d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d0d8:	3301      	adds	r3, #1
  40d0da:	f10c 0c01 	add.w	ip, ip, #1
  40d0de:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40d0e2:	2201      	movs	r2, #1
  40d0e4:	2b07      	cmp	r3, #7
  40d0e6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d0ea:	932c      	str	r3, [sp, #176]	; 0xb0
  40d0ec:	e886 0006 	stmia.w	r6, {r1, r2}
  40d0f0:	f300 839a 	bgt.w	40d828 <_svfprintf_r+0xb48>
  40d0f4:	3608      	adds	r6, #8
  40d0f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d0f8:	b173      	cbz	r3, 40d118 <_svfprintf_r+0x438>
  40d0fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d0fc:	3301      	adds	r3, #1
  40d0fe:	f10c 0c02 	add.w	ip, ip, #2
  40d102:	a924      	add	r1, sp, #144	; 0x90
  40d104:	2202      	movs	r2, #2
  40d106:	2b07      	cmp	r3, #7
  40d108:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d10c:	932c      	str	r3, [sp, #176]	; 0xb0
  40d10e:	e886 0006 	stmia.w	r6, {r1, r2}
  40d112:	f300 8395 	bgt.w	40d840 <_svfprintf_r+0xb60>
  40d116:	3608      	adds	r6, #8
  40d118:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40d11a:	2d80      	cmp	r5, #128	; 0x80
  40d11c:	f000 82cc 	beq.w	40d6b8 <_svfprintf_r+0x9d8>
  40d120:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40d122:	ebc4 0a05 	rsb	sl, r4, r5
  40d126:	f1ba 0f00 	cmp.w	sl, #0
  40d12a:	dd3b      	ble.n	40d1a4 <_svfprintf_r+0x4c4>
  40d12c:	f1ba 0f10 	cmp.w	sl, #16
  40d130:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d132:	4d30      	ldr	r5, [pc, #192]	; (40d1f4 <_svfprintf_r+0x514>)
  40d134:	dd2b      	ble.n	40d18e <_svfprintf_r+0x4ae>
  40d136:	940a      	str	r4, [sp, #40]	; 0x28
  40d138:	4632      	mov	r2, r6
  40d13a:	f04f 0b10 	mov.w	fp, #16
  40d13e:	462e      	mov	r6, r5
  40d140:	4661      	mov	r1, ip
  40d142:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40d146:	e006      	b.n	40d156 <_svfprintf_r+0x476>
  40d148:	f1aa 0a10 	sub.w	sl, sl, #16
  40d14c:	f1ba 0f10 	cmp.w	sl, #16
  40d150:	f102 0208 	add.w	r2, r2, #8
  40d154:	dd17      	ble.n	40d186 <_svfprintf_r+0x4a6>
  40d156:	3301      	adds	r3, #1
  40d158:	3110      	adds	r1, #16
  40d15a:	2b07      	cmp	r3, #7
  40d15c:	912d      	str	r1, [sp, #180]	; 0xb4
  40d15e:	932c      	str	r3, [sp, #176]	; 0xb0
  40d160:	e882 0840 	stmia.w	r2, {r6, fp}
  40d164:	ddf0      	ble.n	40d148 <_svfprintf_r+0x468>
  40d166:	4620      	mov	r0, r4
  40d168:	4629      	mov	r1, r5
  40d16a:	aa2b      	add	r2, sp, #172	; 0xac
  40d16c:	f007 f848 	bl	414200 <__ssprint_r>
  40d170:	2800      	cmp	r0, #0
  40d172:	f47f aecd 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d176:	f1aa 0a10 	sub.w	sl, sl, #16
  40d17a:	f1ba 0f10 	cmp.w	sl, #16
  40d17e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d180:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d182:	aa38      	add	r2, sp, #224	; 0xe0
  40d184:	dce7      	bgt.n	40d156 <_svfprintf_r+0x476>
  40d186:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d188:	4635      	mov	r5, r6
  40d18a:	468c      	mov	ip, r1
  40d18c:	4616      	mov	r6, r2
  40d18e:	3301      	adds	r3, #1
  40d190:	44d4      	add	ip, sl
  40d192:	2b07      	cmp	r3, #7
  40d194:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d198:	932c      	str	r3, [sp, #176]	; 0xb0
  40d19a:	e886 0420 	stmia.w	r6, {r5, sl}
  40d19e:	f300 8337 	bgt.w	40d810 <_svfprintf_r+0xb30>
  40d1a2:	3608      	adds	r6, #8
  40d1a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d1a6:	05ed      	lsls	r5, r5, #23
  40d1a8:	f100 8226 	bmi.w	40d5f8 <_svfprintf_r+0x918>
  40d1ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d1ae:	6037      	str	r7, [r6, #0]
  40d1b0:	3301      	adds	r3, #1
  40d1b2:	44a4      	add	ip, r4
  40d1b4:	2b07      	cmp	r3, #7
  40d1b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d1ba:	6074      	str	r4, [r6, #4]
  40d1bc:	932c      	str	r3, [sp, #176]	; 0xb0
  40d1be:	f300 8311 	bgt.w	40d7e4 <_svfprintf_r+0xb04>
  40d1c2:	3608      	adds	r6, #8
  40d1c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d1c6:	0763      	lsls	r3, r4, #29
  40d1c8:	d549      	bpl.n	40d25e <_svfprintf_r+0x57e>
  40d1ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d1cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d1ce:	1a2c      	subs	r4, r5, r0
  40d1d0:	2c00      	cmp	r4, #0
  40d1d2:	dd44      	ble.n	40d25e <_svfprintf_r+0x57e>
  40d1d4:	2c10      	cmp	r4, #16
  40d1d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d1d8:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40d1f8 <_svfprintf_r+0x518>
  40d1dc:	dd2b      	ble.n	40d236 <_svfprintf_r+0x556>
  40d1de:	4657      	mov	r7, sl
  40d1e0:	2510      	movs	r5, #16
  40d1e2:	4662      	mov	r2, ip
  40d1e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40d1e8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40d1ec:	e00b      	b.n	40d206 <_svfprintf_r+0x526>
  40d1ee:	bf00      	nop
  40d1f0:	00415e44 	.word	0x00415e44
  40d1f4:	00415e10 	.word	0x00415e10
  40d1f8:	00415e64 	.word	0x00415e64
  40d1fc:	3c10      	subs	r4, #16
  40d1fe:	2c10      	cmp	r4, #16
  40d200:	f106 0608 	add.w	r6, r6, #8
  40d204:	dd15      	ble.n	40d232 <_svfprintf_r+0x552>
  40d206:	3301      	adds	r3, #1
  40d208:	3210      	adds	r2, #16
  40d20a:	2b07      	cmp	r3, #7
  40d20c:	922d      	str	r2, [sp, #180]	; 0xb4
  40d20e:	932c      	str	r3, [sp, #176]	; 0xb0
  40d210:	6037      	str	r7, [r6, #0]
  40d212:	6075      	str	r5, [r6, #4]
  40d214:	ddf2      	ble.n	40d1fc <_svfprintf_r+0x51c>
  40d216:	4650      	mov	r0, sl
  40d218:	4641      	mov	r1, r8
  40d21a:	aa2b      	add	r2, sp, #172	; 0xac
  40d21c:	f006 fff0 	bl	414200 <__ssprint_r>
  40d220:	2800      	cmp	r0, #0
  40d222:	f47f ae75 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d226:	3c10      	subs	r4, #16
  40d228:	2c10      	cmp	r4, #16
  40d22a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d22c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d22e:	ae38      	add	r6, sp, #224	; 0xe0
  40d230:	dce9      	bgt.n	40d206 <_svfprintf_r+0x526>
  40d232:	4694      	mov	ip, r2
  40d234:	46ba      	mov	sl, r7
  40d236:	3301      	adds	r3, #1
  40d238:	44a4      	add	ip, r4
  40d23a:	2b07      	cmp	r3, #7
  40d23c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d240:	932c      	str	r3, [sp, #176]	; 0xb0
  40d242:	f8c6 a000 	str.w	sl, [r6]
  40d246:	6074      	str	r4, [r6, #4]
  40d248:	dd09      	ble.n	40d25e <_svfprintf_r+0x57e>
  40d24a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d24c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d24e:	aa2b      	add	r2, sp, #172	; 0xac
  40d250:	f006 ffd6 	bl	414200 <__ssprint_r>
  40d254:	2800      	cmp	r0, #0
  40d256:	f47f ae5b 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d25a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d25e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40d260:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d262:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d264:	42a8      	cmp	r0, r5
  40d266:	bfac      	ite	ge
  40d268:	1824      	addge	r4, r4, r0
  40d26a:	1964      	addlt	r4, r4, r5
  40d26c:	940e      	str	r4, [sp, #56]	; 0x38
  40d26e:	f1bc 0f00 	cmp.w	ip, #0
  40d272:	f040 82c3 	bne.w	40d7fc <_svfprintf_r+0xb1c>
  40d276:	2300      	movs	r3, #0
  40d278:	932c      	str	r3, [sp, #176]	; 0xb0
  40d27a:	ae38      	add	r6, sp, #224	; 0xe0
  40d27c:	e556      	b.n	40cd2c <_svfprintf_r+0x4c>
  40d27e:	f899 8000 	ldrb.w	r8, [r9]
  40d282:	2a00      	cmp	r2, #0
  40d284:	f47f ad88 	bne.w	40cd98 <_svfprintf_r+0xb8>
  40d288:	2220      	movs	r2, #32
  40d28a:	e585      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d28c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d28e:	f045 0501 	orr.w	r5, r5, #1
  40d292:	9509      	str	r5, [sp, #36]	; 0x24
  40d294:	f899 8000 	ldrb.w	r8, [r9]
  40d298:	e57e      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d29a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d29c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40d2a0:	9509      	str	r5, [sp, #36]	; 0x24
  40d2a2:	f899 8000 	ldrb.w	r8, [r9]
  40d2a6:	e577      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d2a8:	2400      	movs	r4, #0
  40d2aa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d2ae:	940f      	str	r4, [sp, #60]	; 0x3c
  40d2b0:	4621      	mov	r1, r4
  40d2b2:	f819 8b01 	ldrb.w	r8, [r9], #1
  40d2b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40d2ba:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40d2be:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d2c2:	2b09      	cmp	r3, #9
  40d2c4:	d9f5      	bls.n	40d2b2 <_svfprintf_r+0x5d2>
  40d2c6:	910f      	str	r1, [sp, #60]	; 0x3c
  40d2c8:	e568      	b.n	40cd9c <_svfprintf_r+0xbc>
  40d2ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d2ce:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d2d2:	f04c 0c10 	orr.w	ip, ip, #16
  40d2d6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d2da:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d2dc:	06a3      	lsls	r3, r4, #26
  40d2de:	f140 80b2 	bpl.w	40d446 <_svfprintf_r+0x766>
  40d2e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d2e4:	1de9      	adds	r1, r5, #7
  40d2e6:	f021 0107 	bic.w	r1, r1, #7
  40d2ea:	e9d1 2300 	ldrd	r2, r3, [r1]
  40d2ee:	3108      	adds	r1, #8
  40d2f0:	9110      	str	r1, [sp, #64]	; 0x40
  40d2f2:	4614      	mov	r4, r2
  40d2f4:	461d      	mov	r5, r3
  40d2f6:	2a00      	cmp	r2, #0
  40d2f8:	f173 0000 	sbcs.w	r0, r3, #0
  40d2fc:	f2c0 838b 	blt.w	40da16 <_svfprintf_r+0xd36>
  40d300:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d304:	2301      	movs	r3, #1
  40d306:	e659      	b.n	40cfbc <_svfprintf_r+0x2dc>
  40d308:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d30a:	4cb7      	ldr	r4, [pc, #732]	; (40d5e8 <_svfprintf_r+0x908>)
  40d30c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d310:	06af      	lsls	r7, r5, #26
  40d312:	941a      	str	r4, [sp, #104]	; 0x68
  40d314:	f53f ae2f 	bmi.w	40cf76 <_svfprintf_r+0x296>
  40d318:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d31a:	06ed      	lsls	r5, r5, #27
  40d31c:	f140 845d 	bpl.w	40dbda <_svfprintf_r+0xefa>
  40d320:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d324:	f8dc 4000 	ldr.w	r4, [ip]
  40d328:	f10c 0c04 	add.w	ip, ip, #4
  40d32c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d330:	2500      	movs	r5, #0
  40d332:	e62b      	b.n	40cf8c <_svfprintf_r+0x2ac>
  40d334:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d338:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d33c:	f01c 0f20 	tst.w	ip, #32
  40d340:	f000 843d 	beq.w	40dbbe <_svfprintf_r+0xede>
  40d344:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d346:	6821      	ldr	r1, [r4, #0]
  40d348:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40d34a:	17e5      	asrs	r5, r4, #31
  40d34c:	462b      	mov	r3, r5
  40d34e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d350:	4622      	mov	r2, r4
  40d352:	3504      	adds	r5, #4
  40d354:	9510      	str	r5, [sp, #64]	; 0x40
  40d356:	e9c1 2300 	strd	r2, r3, [r1]
  40d35a:	e4e7      	b.n	40cd2c <_svfprintf_r+0x4c>
  40d35c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d35e:	6827      	ldr	r7, [r4, #0]
  40d360:	f04f 0a00 	mov.w	sl, #0
  40d364:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40d368:	1d25      	adds	r5, r4, #4
  40d36a:	2f00      	cmp	r7, #0
  40d36c:	f000 85f5 	beq.w	40df5a <_svfprintf_r+0x127a>
  40d370:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d372:	2c00      	cmp	r4, #0
  40d374:	4638      	mov	r0, r7
  40d376:	f2c0 85a7 	blt.w	40dec8 <_svfprintf_r+0x11e8>
  40d37a:	4651      	mov	r1, sl
  40d37c:	4622      	mov	r2, r4
  40d37e:	f004 fd67 	bl	411e50 <memchr>
  40d382:	2800      	cmp	r0, #0
  40d384:	f000 861f 	beq.w	40dfc6 <_svfprintf_r+0x12e6>
  40d388:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d38a:	9510      	str	r5, [sp, #64]	; 0x40
  40d38c:	1bc0      	subs	r0, r0, r7
  40d38e:	42a0      	cmp	r0, r4
  40d390:	bfb8      	it	lt
  40d392:	4604      	movlt	r4, r0
  40d394:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40d398:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40d39c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  40d3a0:	950b      	str	r5, [sp, #44]	; 0x2c
  40d3a2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d3a6:	e632      	b.n	40d00e <_svfprintf_r+0x32e>
  40d3a8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d3ac:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  40d3b0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d3b4:	f899 8000 	ldrb.w	r8, [r9]
  40d3b8:	e4ee      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d3ba:	f899 8000 	ldrb.w	r8, [r9]
  40d3be:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40d3c2:	464b      	mov	r3, r9
  40d3c4:	f000 848b 	beq.w	40dcde <_svfprintf_r+0xffe>
  40d3c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d3ca:	f045 0510 	orr.w	r5, r5, #16
  40d3ce:	9509      	str	r5, [sp, #36]	; 0x24
  40d3d0:	e4e2      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d3d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d3d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d3d6:	6824      	ldr	r4, [r4, #0]
  40d3d8:	940f      	str	r4, [sp, #60]	; 0x3c
  40d3da:	2c00      	cmp	r4, #0
  40d3dc:	f105 0304 	add.w	r3, r5, #4
  40d3e0:	f6ff ad7c 	blt.w	40cedc <_svfprintf_r+0x1fc>
  40d3e4:	9310      	str	r3, [sp, #64]	; 0x40
  40d3e6:	f899 8000 	ldrb.w	r8, [r9]
  40d3ea:	e4d5      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d3ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d3f2:	487e      	ldr	r0, [pc, #504]	; (40d5ec <_svfprintf_r+0x90c>)
  40d3f4:	6814      	ldr	r4, [r2, #0]
  40d3f6:	901a      	str	r0, [sp, #104]	; 0x68
  40d3f8:	2330      	movs	r3, #48	; 0x30
  40d3fa:	1d15      	adds	r5, r2, #4
  40d3fc:	f04f 0878 	mov.w	r8, #120	; 0x78
  40d400:	f04c 0c02 	orr.w	ip, ip, #2
  40d404:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40d408:	9510      	str	r5, [sp, #64]	; 0x40
  40d40a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d40e:	2500      	movs	r5, #0
  40d410:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40d414:	2302      	movs	r3, #2
  40d416:	e5cd      	b.n	40cfb4 <_svfprintf_r+0x2d4>
  40d418:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d41a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d41c:	6812      	ldr	r2, [r2, #0]
  40d41e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  40d422:	2300      	movs	r3, #0
  40d424:	2401      	movs	r4, #1
  40d426:	3504      	adds	r5, #4
  40d428:	469a      	mov	sl, r3
  40d42a:	940b      	str	r4, [sp, #44]	; 0x2c
  40d42c:	9510      	str	r5, [sp, #64]	; 0x40
  40d42e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d432:	930a      	str	r3, [sp, #40]	; 0x28
  40d434:	9314      	str	r3, [sp, #80]	; 0x50
  40d436:	af2e      	add	r7, sp, #184	; 0xb8
  40d438:	e5ef      	b.n	40d01a <_svfprintf_r+0x33a>
  40d43a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d43c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d440:	06a3      	lsls	r3, r4, #26
  40d442:	f53f af4e 	bmi.w	40d2e2 <_svfprintf_r+0x602>
  40d446:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d44a:	f01c 0f10 	tst.w	ip, #16
  40d44e:	f040 82d2 	bne.w	40d9f6 <_svfprintf_r+0xd16>
  40d452:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d454:	0667      	lsls	r7, r4, #25
  40d456:	f140 82ce 	bpl.w	40d9f6 <_svfprintf_r+0xd16>
  40d45a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d45e:	f9bc 4000 	ldrsh.w	r4, [ip]
  40d462:	f10c 0c04 	add.w	ip, ip, #4
  40d466:	17e5      	asrs	r5, r4, #31
  40d468:	4622      	mov	r2, r4
  40d46a:	462b      	mov	r3, r5
  40d46c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d470:	e741      	b.n	40d2f6 <_svfprintf_r+0x616>
  40d472:	f899 8000 	ldrb.w	r8, [r9]
  40d476:	222b      	movs	r2, #43	; 0x2b
  40d478:	e48e      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d47a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d47c:	f045 0508 	orr.w	r5, r5, #8
  40d480:	9509      	str	r5, [sp, #36]	; 0x24
  40d482:	f899 8000 	ldrb.w	r8, [r9]
  40d486:	e487      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d488:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d48a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d48c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d490:	1deb      	adds	r3, r5, #7
  40d492:	0725      	lsls	r5, r4, #28
  40d494:	f023 0307 	bic.w	r3, r3, #7
  40d498:	f140 838a 	bpl.w	40dbb0 <_svfprintf_r+0xed0>
  40d49c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d4a0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40d4a4:	f103 0c08 	add.w	ip, r3, #8
  40d4a8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d4ac:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d4b0:	f005 fbc0 	bl	412c34 <__fpclassifyd>
  40d4b4:	2801      	cmp	r0, #1
  40d4b6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d4ba:	f040 835f 	bne.w	40db7c <_svfprintf_r+0xe9c>
  40d4be:	2200      	movs	r2, #0
  40d4c0:	2300      	movs	r3, #0
  40d4c2:	f008 f94f 	bl	415764 <__aeabi_dcmplt>
  40d4c6:	2800      	cmp	r0, #0
  40d4c8:	f040 856d 	bne.w	40dfa6 <_svfprintf_r+0x12c6>
  40d4cc:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d4d0:	2503      	movs	r5, #3
  40d4d2:	950b      	str	r5, [sp, #44]	; 0x2c
  40d4d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d4d6:	4f46      	ldr	r7, [pc, #280]	; (40d5f0 <_svfprintf_r+0x910>)
  40d4d8:	4b46      	ldr	r3, [pc, #280]	; (40d5f4 <_svfprintf_r+0x914>)
  40d4da:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  40d4de:	2400      	movs	r4, #0
  40d4e0:	9509      	str	r5, [sp, #36]	; 0x24
  40d4e2:	2500      	movs	r5, #0
  40d4e4:	940a      	str	r4, [sp, #40]	; 0x28
  40d4e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40d4ea:	bfd8      	it	le
  40d4ec:	461f      	movle	r7, r3
  40d4ee:	2403      	movs	r4, #3
  40d4f0:	9514      	str	r5, [sp, #80]	; 0x50
  40d4f2:	e58c      	b.n	40d00e <_svfprintf_r+0x32e>
  40d4f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d4f8:	f04c 0c20 	orr.w	ip, ip, #32
  40d4fc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d500:	f899 8000 	ldrb.w	r8, [r9]
  40d504:	e448      	b.n	40cd98 <_svfprintf_r+0xb8>
  40d506:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d508:	1de3      	adds	r3, r4, #7
  40d50a:	f023 0307 	bic.w	r3, r3, #7
  40d50e:	f103 0508 	add.w	r5, r3, #8
  40d512:	9510      	str	r5, [sp, #64]	; 0x40
  40d514:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d518:	2300      	movs	r3, #0
  40d51a:	e54b      	b.n	40cfb4 <_svfprintf_r+0x2d4>
  40d51c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d51e:	1deb      	adds	r3, r5, #7
  40d520:	f023 0307 	bic.w	r3, r3, #7
  40d524:	f103 0c08 	add.w	ip, r3, #8
  40d528:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d52c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d530:	2301      	movs	r3, #1
  40d532:	e53f      	b.n	40cfb4 <_svfprintf_r+0x2d4>
  40d534:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d538:	f1b8 0f00 	cmp.w	r8, #0
  40d53c:	f43f ace1 	beq.w	40cf02 <_svfprintf_r+0x222>
  40d540:	2300      	movs	r3, #0
  40d542:	f04f 0c01 	mov.w	ip, #1
  40d546:	469a      	mov	sl, r3
  40d548:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40d54c:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  40d550:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d554:	930a      	str	r3, [sp, #40]	; 0x28
  40d556:	9314      	str	r3, [sp, #80]	; 0x50
  40d558:	4664      	mov	r4, ip
  40d55a:	af2e      	add	r7, sp, #184	; 0xb8
  40d55c:	e55d      	b.n	40d01a <_svfprintf_r+0x33a>
  40d55e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d562:	e5b5      	b.n	40d0d0 <_svfprintf_r+0x3f0>
  40d564:	2b01      	cmp	r3, #1
  40d566:	f000 80ec 	beq.w	40d742 <_svfprintf_r+0xa62>
  40d56a:	2b02      	cmp	r3, #2
  40d56c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  40d570:	d118      	bne.n	40d5a4 <_svfprintf_r+0x8c4>
  40d572:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  40d576:	4619      	mov	r1, r3
  40d578:	f004 000f 	and.w	r0, r4, #15
  40d57c:	0922      	lsrs	r2, r4, #4
  40d57e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40d582:	460f      	mov	r7, r1
  40d584:	092b      	lsrs	r3, r5, #4
  40d586:	f81c 1000 	ldrb.w	r1, [ip, r0]
  40d58a:	7039      	strb	r1, [r7, #0]
  40d58c:	ea52 0003 	orrs.w	r0, r2, r3
  40d590:	4614      	mov	r4, r2
  40d592:	461d      	mov	r5, r3
  40d594:	f107 31ff 	add.w	r1, r7, #4294967295
  40d598:	d1ee      	bne.n	40d578 <_svfprintf_r+0x898>
  40d59a:	9d08      	ldr	r5, [sp, #32]
  40d59c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40d5a0:	1bec      	subs	r4, r5, r7
  40d5a2:	e52b      	b.n	40cffc <_svfprintf_r+0x31c>
  40d5a4:	08e0      	lsrs	r0, r4, #3
  40d5a6:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40d5aa:	f004 0207 	and.w	r2, r4, #7
  40d5ae:	08e9      	lsrs	r1, r5, #3
  40d5b0:	3230      	adds	r2, #48	; 0x30
  40d5b2:	ea50 0c01 	orrs.w	ip, r0, r1
  40d5b6:	461f      	mov	r7, r3
  40d5b8:	701a      	strb	r2, [r3, #0]
  40d5ba:	4604      	mov	r4, r0
  40d5bc:	460d      	mov	r5, r1
  40d5be:	f103 33ff 	add.w	r3, r3, #4294967295
  40d5c2:	d1ef      	bne.n	40d5a4 <_svfprintf_r+0x8c4>
  40d5c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d5c6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40d5ca:	07e0      	lsls	r0, r4, #31
  40d5cc:	4639      	mov	r1, r7
  40d5ce:	f140 80c1 	bpl.w	40d754 <_svfprintf_r+0xa74>
  40d5d2:	2a30      	cmp	r2, #48	; 0x30
  40d5d4:	f000 80be 	beq.w	40d754 <_svfprintf_r+0xa74>
  40d5d8:	9d08      	ldr	r5, [sp, #32]
  40d5da:	461f      	mov	r7, r3
  40d5dc:	2330      	movs	r3, #48	; 0x30
  40d5de:	1bec      	subs	r4, r5, r7
  40d5e0:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d5e4:	e50a      	b.n	40cffc <_svfprintf_r+0x31c>
  40d5e6:	bf00      	nop
  40d5e8:	00415e30 	.word	0x00415e30
  40d5ec:	00415e44 	.word	0x00415e44
  40d5f0:	00415e24 	.word	0x00415e24
  40d5f4:	00415e20 	.word	0x00415e20
  40d5f8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40d5fc:	f340 80ad 	ble.w	40d75a <_svfprintf_r+0xa7a>
  40d600:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d604:	2200      	movs	r2, #0
  40d606:	2300      	movs	r3, #0
  40d608:	f8cd c01c 	str.w	ip, [sp, #28]
  40d60c:	f008 f8a0 	bl	415750 <__aeabi_dcmpeq>
  40d610:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d614:	2800      	cmp	r0, #0
  40d616:	f000 8126 	beq.w	40d866 <_svfprintf_r+0xb86>
  40d61a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d61c:	4aaa      	ldr	r2, [pc, #680]	; (40d8c8 <_svfprintf_r+0xbe8>)
  40d61e:	6032      	str	r2, [r6, #0]
  40d620:	3301      	adds	r3, #1
  40d622:	f10c 0c01 	add.w	ip, ip, #1
  40d626:	2201      	movs	r2, #1
  40d628:	2b07      	cmp	r3, #7
  40d62a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d62e:	932c      	str	r3, [sp, #176]	; 0xb0
  40d630:	6072      	str	r2, [r6, #4]
  40d632:	f300 82f7 	bgt.w	40dc24 <_svfprintf_r+0xf44>
  40d636:	3608      	adds	r6, #8
  40d638:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d63a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d63c:	42a3      	cmp	r3, r4
  40d63e:	db03      	blt.n	40d648 <_svfprintf_r+0x968>
  40d640:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d642:	07ec      	lsls	r4, r5, #31
  40d644:	f57f adbe 	bpl.w	40d1c4 <_svfprintf_r+0x4e4>
  40d648:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d64a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40d64c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40d64e:	6034      	str	r4, [r6, #0]
  40d650:	3301      	adds	r3, #1
  40d652:	44ac      	add	ip, r5
  40d654:	2b07      	cmp	r3, #7
  40d656:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d65a:	6075      	str	r5, [r6, #4]
  40d65c:	932c      	str	r3, [sp, #176]	; 0xb0
  40d65e:	f300 8348 	bgt.w	40dcf2 <_svfprintf_r+0x1012>
  40d662:	3608      	adds	r6, #8
  40d664:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40d666:	1e6c      	subs	r4, r5, #1
  40d668:	2c00      	cmp	r4, #0
  40d66a:	f77f adab 	ble.w	40d1c4 <_svfprintf_r+0x4e4>
  40d66e:	2c10      	cmp	r4, #16
  40d670:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d672:	4d96      	ldr	r5, [pc, #600]	; (40d8cc <_svfprintf_r+0xbec>)
  40d674:	f340 8197 	ble.w	40d9a6 <_svfprintf_r+0xcc6>
  40d678:	2710      	movs	r7, #16
  40d67a:	4662      	mov	r2, ip
  40d67c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40d680:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40d684:	e004      	b.n	40d690 <_svfprintf_r+0x9b0>
  40d686:	3608      	adds	r6, #8
  40d688:	3c10      	subs	r4, #16
  40d68a:	2c10      	cmp	r4, #16
  40d68c:	f340 818a 	ble.w	40d9a4 <_svfprintf_r+0xcc4>
  40d690:	3301      	adds	r3, #1
  40d692:	3210      	adds	r2, #16
  40d694:	2b07      	cmp	r3, #7
  40d696:	922d      	str	r2, [sp, #180]	; 0xb4
  40d698:	932c      	str	r3, [sp, #176]	; 0xb0
  40d69a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40d69e:	ddf2      	ble.n	40d686 <_svfprintf_r+0x9a6>
  40d6a0:	4640      	mov	r0, r8
  40d6a2:	4651      	mov	r1, sl
  40d6a4:	aa2b      	add	r2, sp, #172	; 0xac
  40d6a6:	f006 fdab 	bl	414200 <__ssprint_r>
  40d6aa:	2800      	cmp	r0, #0
  40d6ac:	f47f ac30 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d6b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d6b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d6b4:	ae38      	add	r6, sp, #224	; 0xe0
  40d6b6:	e7e7      	b.n	40d688 <_svfprintf_r+0x9a8>
  40d6b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d6ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d6bc:	ebc0 0a05 	rsb	sl, r0, r5
  40d6c0:	f1ba 0f00 	cmp.w	sl, #0
  40d6c4:	f77f ad2c 	ble.w	40d120 <_svfprintf_r+0x440>
  40d6c8:	f1ba 0f10 	cmp.w	sl, #16
  40d6cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d6ce:	4d7f      	ldr	r5, [pc, #508]	; (40d8cc <_svfprintf_r+0xbec>)
  40d6d0:	dd2b      	ble.n	40d72a <_svfprintf_r+0xa4a>
  40d6d2:	9412      	str	r4, [sp, #72]	; 0x48
  40d6d4:	4632      	mov	r2, r6
  40d6d6:	f04f 0b10 	mov.w	fp, #16
  40d6da:	462e      	mov	r6, r5
  40d6dc:	4661      	mov	r1, ip
  40d6de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d6e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40d6e2:	e006      	b.n	40d6f2 <_svfprintf_r+0xa12>
  40d6e4:	f1aa 0a10 	sub.w	sl, sl, #16
  40d6e8:	f1ba 0f10 	cmp.w	sl, #16
  40d6ec:	f102 0208 	add.w	r2, r2, #8
  40d6f0:	dd17      	ble.n	40d722 <_svfprintf_r+0xa42>
  40d6f2:	3301      	adds	r3, #1
  40d6f4:	3110      	adds	r1, #16
  40d6f6:	2b07      	cmp	r3, #7
  40d6f8:	912d      	str	r1, [sp, #180]	; 0xb4
  40d6fa:	932c      	str	r3, [sp, #176]	; 0xb0
  40d6fc:	e882 0840 	stmia.w	r2, {r6, fp}
  40d700:	ddf0      	ble.n	40d6e4 <_svfprintf_r+0xa04>
  40d702:	4620      	mov	r0, r4
  40d704:	4629      	mov	r1, r5
  40d706:	aa2b      	add	r2, sp, #172	; 0xac
  40d708:	f006 fd7a 	bl	414200 <__ssprint_r>
  40d70c:	2800      	cmp	r0, #0
  40d70e:	f47f abff 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d712:	f1aa 0a10 	sub.w	sl, sl, #16
  40d716:	f1ba 0f10 	cmp.w	sl, #16
  40d71a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d71c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d71e:	aa38      	add	r2, sp, #224	; 0xe0
  40d720:	dce7      	bgt.n	40d6f2 <_svfprintf_r+0xa12>
  40d722:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40d724:	4635      	mov	r5, r6
  40d726:	468c      	mov	ip, r1
  40d728:	4616      	mov	r6, r2
  40d72a:	3301      	adds	r3, #1
  40d72c:	44d4      	add	ip, sl
  40d72e:	2b07      	cmp	r3, #7
  40d730:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d734:	932c      	str	r3, [sp, #176]	; 0xb0
  40d736:	e886 0420 	stmia.w	r6, {r5, sl}
  40d73a:	f300 8212 	bgt.w	40db62 <_svfprintf_r+0xe82>
  40d73e:	3608      	adds	r6, #8
  40d740:	e4ee      	b.n	40d120 <_svfprintf_r+0x440>
  40d742:	2d00      	cmp	r5, #0
  40d744:	bf08      	it	eq
  40d746:	2c0a      	cmpeq	r4, #10
  40d748:	f080 8138 	bcs.w	40d9bc <_svfprintf_r+0xcdc>
  40d74c:	af48      	add	r7, sp, #288	; 0x120
  40d74e:	3430      	adds	r4, #48	; 0x30
  40d750:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40d754:	9d08      	ldr	r5, [sp, #32]
  40d756:	1bec      	subs	r4, r5, r7
  40d758:	e450      	b.n	40cffc <_svfprintf_r+0x31c>
  40d75a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d75c:	2c01      	cmp	r4, #1
  40d75e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40d760:	f340 81d5 	ble.w	40db0e <_svfprintf_r+0xe2e>
  40d764:	3401      	adds	r4, #1
  40d766:	f10c 0301 	add.w	r3, ip, #1
  40d76a:	2201      	movs	r2, #1
  40d76c:	2c07      	cmp	r4, #7
  40d76e:	6037      	str	r7, [r6, #0]
  40d770:	932d      	str	r3, [sp, #180]	; 0xb4
  40d772:	942c      	str	r4, [sp, #176]	; 0xb0
  40d774:	6072      	str	r2, [r6, #4]
  40d776:	f300 81db 	bgt.w	40db30 <_svfprintf_r+0xe50>
  40d77a:	3608      	adds	r6, #8
  40d77c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40d780:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40d782:	6035      	str	r5, [r6, #0]
  40d784:	3401      	adds	r4, #1
  40d786:	4498      	add	r8, r3
  40d788:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40d78a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40d78e:	2c07      	cmp	r4, #7
  40d790:	942c      	str	r4, [sp, #176]	; 0xb0
  40d792:	6075      	str	r5, [r6, #4]
  40d794:	f300 81d8 	bgt.w	40db48 <_svfprintf_r+0xe68>
  40d798:	3608      	adds	r6, #8
  40d79a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d79e:	2200      	movs	r2, #0
  40d7a0:	2300      	movs	r3, #0
  40d7a2:	f007 ffd5 	bl	415750 <__aeabi_dcmpeq>
  40d7a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40d7a8:	2800      	cmp	r0, #0
  40d7aa:	f040 80b9 	bne.w	40d920 <_svfprintf_r+0xc40>
  40d7ae:	1e6b      	subs	r3, r5, #1
  40d7b0:	3401      	adds	r4, #1
  40d7b2:	3701      	adds	r7, #1
  40d7b4:	4498      	add	r8, r3
  40d7b6:	2c07      	cmp	r4, #7
  40d7b8:	942c      	str	r4, [sp, #176]	; 0xb0
  40d7ba:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40d7be:	6037      	str	r7, [r6, #0]
  40d7c0:	6073      	str	r3, [r6, #4]
  40d7c2:	f300 80e2 	bgt.w	40d98a <_svfprintf_r+0xcaa>
  40d7c6:	3608      	adds	r6, #8
  40d7c8:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40d7cc:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40d7ce:	3401      	adds	r4, #1
  40d7d0:	44c4      	add	ip, r8
  40d7d2:	ab27      	add	r3, sp, #156	; 0x9c
  40d7d4:	2c07      	cmp	r4, #7
  40d7d6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d7da:	942c      	str	r4, [sp, #176]	; 0xb0
  40d7dc:	e886 0028 	stmia.w	r6, {r3, r5}
  40d7e0:	f77f acef 	ble.w	40d1c2 <_svfprintf_r+0x4e2>
  40d7e4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d7e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d7e8:	aa2b      	add	r2, sp, #172	; 0xac
  40d7ea:	f006 fd09 	bl	414200 <__ssprint_r>
  40d7ee:	2800      	cmp	r0, #0
  40d7f0:	f47f ab8e 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d7f4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d7f8:	ae38      	add	r6, sp, #224	; 0xe0
  40d7fa:	e4e3      	b.n	40d1c4 <_svfprintf_r+0x4e4>
  40d7fc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d7fe:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d800:	aa2b      	add	r2, sp, #172	; 0xac
  40d802:	f006 fcfd 	bl	414200 <__ssprint_r>
  40d806:	2800      	cmp	r0, #0
  40d808:	f43f ad35 	beq.w	40d276 <_svfprintf_r+0x596>
  40d80c:	f7ff bb80 	b.w	40cf10 <_svfprintf_r+0x230>
  40d810:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d812:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d814:	aa2b      	add	r2, sp, #172	; 0xac
  40d816:	f006 fcf3 	bl	414200 <__ssprint_r>
  40d81a:	2800      	cmp	r0, #0
  40d81c:	f47f ab78 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d820:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d824:	ae38      	add	r6, sp, #224	; 0xe0
  40d826:	e4bd      	b.n	40d1a4 <_svfprintf_r+0x4c4>
  40d828:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d82a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d82c:	aa2b      	add	r2, sp, #172	; 0xac
  40d82e:	f006 fce7 	bl	414200 <__ssprint_r>
  40d832:	2800      	cmp	r0, #0
  40d834:	f47f ab6c 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d838:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d83c:	ae38      	add	r6, sp, #224	; 0xe0
  40d83e:	e45a      	b.n	40d0f6 <_svfprintf_r+0x416>
  40d840:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d842:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d844:	aa2b      	add	r2, sp, #172	; 0xac
  40d846:	f006 fcdb 	bl	414200 <__ssprint_r>
  40d84a:	2800      	cmp	r0, #0
  40d84c:	f47f ab60 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d850:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d854:	ae38      	add	r6, sp, #224	; 0xe0
  40d856:	e45f      	b.n	40d118 <_svfprintf_r+0x438>
  40d858:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d85a:	af38      	add	r7, sp, #224	; 0xe0
  40d85c:	f7ff bbce 	b.w	40cffc <_svfprintf_r+0x31c>
  40d860:	2302      	movs	r3, #2
  40d862:	f7ff bba7 	b.w	40cfb4 <_svfprintf_r+0x2d4>
  40d866:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d868:	2b00      	cmp	r3, #0
  40d86a:	f340 81e7 	ble.w	40dc3c <_svfprintf_r+0xf5c>
  40d86e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d870:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d872:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40d876:	42ac      	cmp	r4, r5
  40d878:	bfa8      	it	ge
  40d87a:	462c      	movge	r4, r5
  40d87c:	2c00      	cmp	r4, #0
  40d87e:	44ba      	add	sl, r7
  40d880:	dd0b      	ble.n	40d89a <_svfprintf_r+0xbba>
  40d882:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d884:	6037      	str	r7, [r6, #0]
  40d886:	3301      	adds	r3, #1
  40d888:	44a4      	add	ip, r4
  40d88a:	2b07      	cmp	r3, #7
  40d88c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d890:	6074      	str	r4, [r6, #4]
  40d892:	932c      	str	r3, [sp, #176]	; 0xb0
  40d894:	f300 8328 	bgt.w	40dee8 <_svfprintf_r+0x1208>
  40d898:	3608      	adds	r6, #8
  40d89a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d89c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40d8a0:	1b2c      	subs	r4, r5, r4
  40d8a2:	2c00      	cmp	r4, #0
  40d8a4:	f340 80db 	ble.w	40da5e <_svfprintf_r+0xd7e>
  40d8a8:	2c10      	cmp	r4, #16
  40d8aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d8ac:	4d07      	ldr	r5, [pc, #28]	; (40d8cc <_svfprintf_r+0xbec>)
  40d8ae:	f340 81ad 	ble.w	40dc0c <_svfprintf_r+0xf2c>
  40d8b2:	970a      	str	r7, [sp, #40]	; 0x28
  40d8b4:	f04f 0810 	mov.w	r8, #16
  40d8b8:	462f      	mov	r7, r5
  40d8ba:	4662      	mov	r2, ip
  40d8bc:	4625      	mov	r5, r4
  40d8be:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40d8c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d8c4:	e009      	b.n	40d8da <_svfprintf_r+0xbfa>
  40d8c6:	bf00      	nop
  40d8c8:	00415e60 	.word	0x00415e60
  40d8cc:	00415e10 	.word	0x00415e10
  40d8d0:	3608      	adds	r6, #8
  40d8d2:	3d10      	subs	r5, #16
  40d8d4:	2d10      	cmp	r5, #16
  40d8d6:	f340 8195 	ble.w	40dc04 <_svfprintf_r+0xf24>
  40d8da:	3301      	adds	r3, #1
  40d8dc:	3210      	adds	r2, #16
  40d8de:	2b07      	cmp	r3, #7
  40d8e0:	922d      	str	r2, [sp, #180]	; 0xb4
  40d8e2:	932c      	str	r3, [sp, #176]	; 0xb0
  40d8e4:	e886 0180 	stmia.w	r6, {r7, r8}
  40d8e8:	ddf2      	ble.n	40d8d0 <_svfprintf_r+0xbf0>
  40d8ea:	4658      	mov	r0, fp
  40d8ec:	4621      	mov	r1, r4
  40d8ee:	aa2b      	add	r2, sp, #172	; 0xac
  40d8f0:	f006 fc86 	bl	414200 <__ssprint_r>
  40d8f4:	2800      	cmp	r0, #0
  40d8f6:	f47f ab0b 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d8fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d8fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d8fe:	ae38      	add	r6, sp, #224	; 0xe0
  40d900:	e7e7      	b.n	40d8d2 <_svfprintf_r+0xbf2>
  40d902:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d904:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d906:	aa2b      	add	r2, sp, #172	; 0xac
  40d908:	f006 fc7a 	bl	414200 <__ssprint_r>
  40d90c:	2800      	cmp	r0, #0
  40d90e:	f47f aaff 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d912:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d916:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d91a:	ae38      	add	r6, sp, #224	; 0xe0
  40d91c:	f7ff bbd8 	b.w	40d0d0 <_svfprintf_r+0x3f0>
  40d920:	1e6f      	subs	r7, r5, #1
  40d922:	2f00      	cmp	r7, #0
  40d924:	f77f af50 	ble.w	40d7c8 <_svfprintf_r+0xae8>
  40d928:	2f10      	cmp	r7, #16
  40d92a:	4db3      	ldr	r5, [pc, #716]	; (40dbf8 <_svfprintf_r+0xf18>)
  40d92c:	dd23      	ble.n	40d976 <_svfprintf_r+0xc96>
  40d92e:	4643      	mov	r3, r8
  40d930:	f04f 0a10 	mov.w	sl, #16
  40d934:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40d938:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40d93c:	e004      	b.n	40d948 <_svfprintf_r+0xc68>
  40d93e:	3f10      	subs	r7, #16
  40d940:	2f10      	cmp	r7, #16
  40d942:	f106 0608 	add.w	r6, r6, #8
  40d946:	dd15      	ble.n	40d974 <_svfprintf_r+0xc94>
  40d948:	3401      	adds	r4, #1
  40d94a:	3310      	adds	r3, #16
  40d94c:	2c07      	cmp	r4, #7
  40d94e:	932d      	str	r3, [sp, #180]	; 0xb4
  40d950:	942c      	str	r4, [sp, #176]	; 0xb0
  40d952:	e886 0420 	stmia.w	r6, {r5, sl}
  40d956:	ddf2      	ble.n	40d93e <_svfprintf_r+0xc5e>
  40d958:	4640      	mov	r0, r8
  40d95a:	4659      	mov	r1, fp
  40d95c:	aa2b      	add	r2, sp, #172	; 0xac
  40d95e:	f006 fc4f 	bl	414200 <__ssprint_r>
  40d962:	2800      	cmp	r0, #0
  40d964:	f47f aad4 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d968:	3f10      	subs	r7, #16
  40d96a:	2f10      	cmp	r7, #16
  40d96c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40d96e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40d970:	ae38      	add	r6, sp, #224	; 0xe0
  40d972:	dce9      	bgt.n	40d948 <_svfprintf_r+0xc68>
  40d974:	4698      	mov	r8, r3
  40d976:	3401      	adds	r4, #1
  40d978:	44b8      	add	r8, r7
  40d97a:	2c07      	cmp	r4, #7
  40d97c:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40d980:	942c      	str	r4, [sp, #176]	; 0xb0
  40d982:	e886 00a0 	stmia.w	r6, {r5, r7}
  40d986:	f77f af1e 	ble.w	40d7c6 <_svfprintf_r+0xae6>
  40d98a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d98c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d98e:	aa2b      	add	r2, sp, #172	; 0xac
  40d990:	f006 fc36 	bl	414200 <__ssprint_r>
  40d994:	2800      	cmp	r0, #0
  40d996:	f47f aabb 	bne.w	40cf10 <_svfprintf_r+0x230>
  40d99a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40d99e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40d9a0:	ae38      	add	r6, sp, #224	; 0xe0
  40d9a2:	e711      	b.n	40d7c8 <_svfprintf_r+0xae8>
  40d9a4:	4694      	mov	ip, r2
  40d9a6:	3301      	adds	r3, #1
  40d9a8:	44a4      	add	ip, r4
  40d9aa:	2b07      	cmp	r3, #7
  40d9ac:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d9b0:	932c      	str	r3, [sp, #176]	; 0xb0
  40d9b2:	6035      	str	r5, [r6, #0]
  40d9b4:	6074      	str	r4, [r6, #4]
  40d9b6:	f77f ac04 	ble.w	40d1c2 <_svfprintf_r+0x4e2>
  40d9ba:	e713      	b.n	40d7e4 <_svfprintf_r+0xb04>
  40d9bc:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40d9c0:	4620      	mov	r0, r4
  40d9c2:	4629      	mov	r1, r5
  40d9c4:	220a      	movs	r2, #10
  40d9c6:	2300      	movs	r3, #0
  40d9c8:	f7fe fb84 	bl	40c0d4 <__aeabi_uldivmod>
  40d9cc:	3230      	adds	r2, #48	; 0x30
  40d9ce:	f88b 2000 	strb.w	r2, [fp]
  40d9d2:	4620      	mov	r0, r4
  40d9d4:	4629      	mov	r1, r5
  40d9d6:	220a      	movs	r2, #10
  40d9d8:	2300      	movs	r3, #0
  40d9da:	f7fe fb7b 	bl	40c0d4 <__aeabi_uldivmod>
  40d9de:	4604      	mov	r4, r0
  40d9e0:	460d      	mov	r5, r1
  40d9e2:	ea54 0c05 	orrs.w	ip, r4, r5
  40d9e6:	465f      	mov	r7, fp
  40d9e8:	f10b 3bff 	add.w	fp, fp, #4294967295
  40d9ec:	d1e8      	bne.n	40d9c0 <_svfprintf_r+0xce0>
  40d9ee:	9d08      	ldr	r5, [sp, #32]
  40d9f0:	1bec      	subs	r4, r5, r7
  40d9f2:	f7ff bb03 	b.w	40cffc <_svfprintf_r+0x31c>
  40d9f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d9f8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d9fc:	682c      	ldr	r4, [r5, #0]
  40d9fe:	17e5      	asrs	r5, r4, #31
  40da00:	4622      	mov	r2, r4
  40da02:	462b      	mov	r3, r5
  40da04:	f10c 0c04 	add.w	ip, ip, #4
  40da08:	2a00      	cmp	r2, #0
  40da0a:	f173 0000 	sbcs.w	r0, r3, #0
  40da0e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40da12:	f6bf ac75 	bge.w	40d300 <_svfprintf_r+0x620>
  40da16:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40da1a:	4264      	negs	r4, r4
  40da1c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40da20:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40da24:	2301      	movs	r3, #1
  40da26:	f7ff bac9 	b.w	40cfbc <_svfprintf_r+0x2dc>
  40da2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40da2c:	682c      	ldr	r4, [r5, #0]
  40da2e:	3504      	adds	r5, #4
  40da30:	9510      	str	r5, [sp, #64]	; 0x40
  40da32:	2500      	movs	r5, #0
  40da34:	f7ff babe 	b.w	40cfb4 <_svfprintf_r+0x2d4>
  40da38:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40da3a:	682c      	ldr	r4, [r5, #0]
  40da3c:	3504      	adds	r5, #4
  40da3e:	9510      	str	r5, [sp, #64]	; 0x40
  40da40:	2301      	movs	r3, #1
  40da42:	2500      	movs	r5, #0
  40da44:	f7ff bab6 	b.w	40cfb4 <_svfprintf_r+0x2d4>
  40da48:	980d      	ldr	r0, [sp, #52]	; 0x34
  40da4a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40da4c:	aa2b      	add	r2, sp, #172	; 0xac
  40da4e:	f006 fbd7 	bl	414200 <__ssprint_r>
  40da52:	2800      	cmp	r0, #0
  40da54:	f47f aa5c 	bne.w	40cf10 <_svfprintf_r+0x230>
  40da58:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40da5c:	ae38      	add	r6, sp, #224	; 0xe0
  40da5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40da60:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40da62:	442f      	add	r7, r5
  40da64:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40da66:	42ac      	cmp	r4, r5
  40da68:	db42      	blt.n	40daf0 <_svfprintf_r+0xe10>
  40da6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40da6c:	07e9      	lsls	r1, r5, #31
  40da6e:	d43f      	bmi.n	40daf0 <_svfprintf_r+0xe10>
  40da70:	9811      	ldr	r0, [sp, #68]	; 0x44
  40da72:	ebc7 050a 	rsb	r5, r7, sl
  40da76:	1b04      	subs	r4, r0, r4
  40da78:	42ac      	cmp	r4, r5
  40da7a:	bfb8      	it	lt
  40da7c:	4625      	movlt	r5, r4
  40da7e:	2d00      	cmp	r5, #0
  40da80:	dd0b      	ble.n	40da9a <_svfprintf_r+0xdba>
  40da82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40da84:	6037      	str	r7, [r6, #0]
  40da86:	3301      	adds	r3, #1
  40da88:	44ac      	add	ip, r5
  40da8a:	2b07      	cmp	r3, #7
  40da8c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40da90:	6075      	str	r5, [r6, #4]
  40da92:	932c      	str	r3, [sp, #176]	; 0xb0
  40da94:	f300 8252 	bgt.w	40df3c <_svfprintf_r+0x125c>
  40da98:	3608      	adds	r6, #8
  40da9a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40da9e:	1b64      	subs	r4, r4, r5
  40daa0:	2c00      	cmp	r4, #0
  40daa2:	f77f ab8f 	ble.w	40d1c4 <_svfprintf_r+0x4e4>
  40daa6:	2c10      	cmp	r4, #16
  40daa8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40daaa:	4d53      	ldr	r5, [pc, #332]	; (40dbf8 <_svfprintf_r+0xf18>)
  40daac:	f77f af7b 	ble.w	40d9a6 <_svfprintf_r+0xcc6>
  40dab0:	2710      	movs	r7, #16
  40dab2:	4662      	mov	r2, ip
  40dab4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40dab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40dabc:	e004      	b.n	40dac8 <_svfprintf_r+0xde8>
  40dabe:	3608      	adds	r6, #8
  40dac0:	3c10      	subs	r4, #16
  40dac2:	2c10      	cmp	r4, #16
  40dac4:	f77f af6e 	ble.w	40d9a4 <_svfprintf_r+0xcc4>
  40dac8:	3301      	adds	r3, #1
  40daca:	3210      	adds	r2, #16
  40dacc:	2b07      	cmp	r3, #7
  40dace:	922d      	str	r2, [sp, #180]	; 0xb4
  40dad0:	932c      	str	r3, [sp, #176]	; 0xb0
  40dad2:	e886 00a0 	stmia.w	r6, {r5, r7}
  40dad6:	ddf2      	ble.n	40dabe <_svfprintf_r+0xdde>
  40dad8:	4640      	mov	r0, r8
  40dada:	4651      	mov	r1, sl
  40dadc:	aa2b      	add	r2, sp, #172	; 0xac
  40dade:	f006 fb8f 	bl	414200 <__ssprint_r>
  40dae2:	2800      	cmp	r0, #0
  40dae4:	f47f aa14 	bne.w	40cf10 <_svfprintf_r+0x230>
  40dae8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40daea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40daec:	ae38      	add	r6, sp, #224	; 0xe0
  40daee:	e7e7      	b.n	40dac0 <_svfprintf_r+0xde0>
  40daf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40daf2:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40daf4:	6035      	str	r5, [r6, #0]
  40daf6:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40daf8:	6075      	str	r5, [r6, #4]
  40dafa:	3301      	adds	r3, #1
  40dafc:	44ac      	add	ip, r5
  40dafe:	2b07      	cmp	r3, #7
  40db00:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40db04:	932c      	str	r3, [sp, #176]	; 0xb0
  40db06:	f300 81fb 	bgt.w	40df00 <_svfprintf_r+0x1220>
  40db0a:	3608      	adds	r6, #8
  40db0c:	e7b0      	b.n	40da70 <_svfprintf_r+0xd90>
  40db0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40db10:	07ea      	lsls	r2, r5, #31
  40db12:	f53f ae27 	bmi.w	40d764 <_svfprintf_r+0xa84>
  40db16:	3401      	adds	r4, #1
  40db18:	f10c 0801 	add.w	r8, ip, #1
  40db1c:	2301      	movs	r3, #1
  40db1e:	2c07      	cmp	r4, #7
  40db20:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40db24:	942c      	str	r4, [sp, #176]	; 0xb0
  40db26:	6037      	str	r7, [r6, #0]
  40db28:	6073      	str	r3, [r6, #4]
  40db2a:	f77f ae4c 	ble.w	40d7c6 <_svfprintf_r+0xae6>
  40db2e:	e72c      	b.n	40d98a <_svfprintf_r+0xcaa>
  40db30:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db32:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db34:	aa2b      	add	r2, sp, #172	; 0xac
  40db36:	f006 fb63 	bl	414200 <__ssprint_r>
  40db3a:	2800      	cmp	r0, #0
  40db3c:	f47f a9e8 	bne.w	40cf10 <_svfprintf_r+0x230>
  40db40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40db42:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40db44:	ae38      	add	r6, sp, #224	; 0xe0
  40db46:	e619      	b.n	40d77c <_svfprintf_r+0xa9c>
  40db48:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db4a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db4c:	aa2b      	add	r2, sp, #172	; 0xac
  40db4e:	f006 fb57 	bl	414200 <__ssprint_r>
  40db52:	2800      	cmp	r0, #0
  40db54:	f47f a9dc 	bne.w	40cf10 <_svfprintf_r+0x230>
  40db58:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40db5c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40db5e:	ae38      	add	r6, sp, #224	; 0xe0
  40db60:	e61b      	b.n	40d79a <_svfprintf_r+0xaba>
  40db62:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db64:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db66:	aa2b      	add	r2, sp, #172	; 0xac
  40db68:	f006 fb4a 	bl	414200 <__ssprint_r>
  40db6c:	2800      	cmp	r0, #0
  40db6e:	f47f a9cf 	bne.w	40cf10 <_svfprintf_r+0x230>
  40db72:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40db76:	ae38      	add	r6, sp, #224	; 0xe0
  40db78:	f7ff bad2 	b.w	40d120 <_svfprintf_r+0x440>
  40db7c:	f005 f85a 	bl	412c34 <__fpclassifyd>
  40db80:	2800      	cmp	r0, #0
  40db82:	f040 80c2 	bne.w	40dd0a <_svfprintf_r+0x102a>
  40db86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40db88:	4f1c      	ldr	r7, [pc, #112]	; (40dbfc <_svfprintf_r+0xf1c>)
  40db8a:	4b1d      	ldr	r3, [pc, #116]	; (40dc00 <_svfprintf_r+0xf20>)
  40db8c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40db90:	900a      	str	r0, [sp, #40]	; 0x28
  40db92:	f04f 0c03 	mov.w	ip, #3
  40db96:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40db9a:	9409      	str	r4, [sp, #36]	; 0x24
  40db9c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40dba0:	9014      	str	r0, [sp, #80]	; 0x50
  40dba2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40dba6:	bfd8      	it	le
  40dba8:	461f      	movle	r7, r3
  40dbaa:	4664      	mov	r4, ip
  40dbac:	f7ff ba2f 	b.w	40d00e <_svfprintf_r+0x32e>
  40dbb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40dbb4:	3308      	adds	r3, #8
  40dbb6:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40dbba:	9310      	str	r3, [sp, #64]	; 0x40
  40dbbc:	e476      	b.n	40d4ac <_svfprintf_r+0x7cc>
  40dbbe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dbc2:	f01c 0f10 	tst.w	ip, #16
  40dbc6:	f000 8155 	beq.w	40de74 <_svfprintf_r+0x1194>
  40dbca:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40dbcc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40dbce:	6823      	ldr	r3, [r4, #0]
  40dbd0:	3404      	adds	r4, #4
  40dbd2:	9410      	str	r4, [sp, #64]	; 0x40
  40dbd4:	601d      	str	r5, [r3, #0]
  40dbd6:	f7ff b8a9 	b.w	40cd2c <_svfprintf_r+0x4c>
  40dbda:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40dbdc:	0664      	lsls	r4, r4, #25
  40dbde:	f140 8142 	bpl.w	40de66 <_svfprintf_r+0x1186>
  40dbe2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40dbe6:	f8bc 4000 	ldrh.w	r4, [ip]
  40dbea:	f10c 0c04 	add.w	ip, ip, #4
  40dbee:	2500      	movs	r5, #0
  40dbf0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40dbf4:	f7ff b9ca 	b.w	40cf8c <_svfprintf_r+0x2ac>
  40dbf8:	00415e10 	.word	0x00415e10
  40dbfc:	00415e2c 	.word	0x00415e2c
  40dc00:	00415e28 	.word	0x00415e28
  40dc04:	462c      	mov	r4, r5
  40dc06:	463d      	mov	r5, r7
  40dc08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40dc0a:	4694      	mov	ip, r2
  40dc0c:	3301      	adds	r3, #1
  40dc0e:	44a4      	add	ip, r4
  40dc10:	2b07      	cmp	r3, #7
  40dc12:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dc16:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc18:	6035      	str	r5, [r6, #0]
  40dc1a:	6074      	str	r4, [r6, #4]
  40dc1c:	f73f af14 	bgt.w	40da48 <_svfprintf_r+0xd68>
  40dc20:	3608      	adds	r6, #8
  40dc22:	e71c      	b.n	40da5e <_svfprintf_r+0xd7e>
  40dc24:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dc26:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dc28:	aa2b      	add	r2, sp, #172	; 0xac
  40dc2a:	f006 fae9 	bl	414200 <__ssprint_r>
  40dc2e:	2800      	cmp	r0, #0
  40dc30:	f47f a96e 	bne.w	40cf10 <_svfprintf_r+0x230>
  40dc34:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dc38:	ae38      	add	r6, sp, #224	; 0xe0
  40dc3a:	e4fd      	b.n	40d638 <_svfprintf_r+0x958>
  40dc3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40dc3e:	49b7      	ldr	r1, [pc, #732]	; (40df1c <_svfprintf_r+0x123c>)
  40dc40:	6031      	str	r1, [r6, #0]
  40dc42:	3201      	adds	r2, #1
  40dc44:	f10c 0c01 	add.w	ip, ip, #1
  40dc48:	2101      	movs	r1, #1
  40dc4a:	2a07      	cmp	r2, #7
  40dc4c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dc50:	922c      	str	r2, [sp, #176]	; 0xb0
  40dc52:	6071      	str	r1, [r6, #4]
  40dc54:	f300 80f7 	bgt.w	40de46 <_svfprintf_r+0x1166>
  40dc58:	3608      	adds	r6, #8
  40dc5a:	461c      	mov	r4, r3
  40dc5c:	b92c      	cbnz	r4, 40dc6a <_svfprintf_r+0xf8a>
  40dc5e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40dc60:	b91d      	cbnz	r5, 40dc6a <_svfprintf_r+0xf8a>
  40dc62:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dc64:	07e8      	lsls	r0, r5, #31
  40dc66:	f57f aaad 	bpl.w	40d1c4 <_svfprintf_r+0x4e4>
  40dc6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dc6c:	9918      	ldr	r1, [sp, #96]	; 0x60
  40dc6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40dc70:	6035      	str	r5, [r6, #0]
  40dc72:	3301      	adds	r3, #1
  40dc74:	4461      	add	r1, ip
  40dc76:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40dc78:	912d      	str	r1, [sp, #180]	; 0xb4
  40dc7a:	2b07      	cmp	r3, #7
  40dc7c:	6075      	str	r5, [r6, #4]
  40dc7e:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc80:	f300 81de 	bgt.w	40e040 <_svfprintf_r+0x1360>
  40dc84:	f106 0208 	add.w	r2, r6, #8
  40dc88:	4264      	negs	r4, r4
  40dc8a:	2c00      	cmp	r4, #0
  40dc8c:	f340 810b 	ble.w	40dea6 <_svfprintf_r+0x11c6>
  40dc90:	2c10      	cmp	r4, #16
  40dc92:	4da3      	ldr	r5, [pc, #652]	; (40df20 <_svfprintf_r+0x1240>)
  40dc94:	f340 8148 	ble.w	40df28 <_svfprintf_r+0x1248>
  40dc98:	46a3      	mov	fp, r4
  40dc9a:	2610      	movs	r6, #16
  40dc9c:	460c      	mov	r4, r1
  40dc9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40dca2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40dca6:	e006      	b.n	40dcb6 <_svfprintf_r+0xfd6>
  40dca8:	3208      	adds	r2, #8
  40dcaa:	f1ab 0b10 	sub.w	fp, fp, #16
  40dcae:	f1bb 0f10 	cmp.w	fp, #16
  40dcb2:	f340 8137 	ble.w	40df24 <_svfprintf_r+0x1244>
  40dcb6:	3301      	adds	r3, #1
  40dcb8:	3410      	adds	r4, #16
  40dcba:	2b07      	cmp	r3, #7
  40dcbc:	942d      	str	r4, [sp, #180]	; 0xb4
  40dcbe:	932c      	str	r3, [sp, #176]	; 0xb0
  40dcc0:	e882 0060 	stmia.w	r2, {r5, r6}
  40dcc4:	ddf0      	ble.n	40dca8 <_svfprintf_r+0xfc8>
  40dcc6:	4640      	mov	r0, r8
  40dcc8:	4651      	mov	r1, sl
  40dcca:	aa2b      	add	r2, sp, #172	; 0xac
  40dccc:	f006 fa98 	bl	414200 <__ssprint_r>
  40dcd0:	2800      	cmp	r0, #0
  40dcd2:	f47f a91d 	bne.w	40cf10 <_svfprintf_r+0x230>
  40dcd6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40dcd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dcda:	aa38      	add	r2, sp, #224	; 0xe0
  40dcdc:	e7e5      	b.n	40dcaa <_svfprintf_r+0xfca>
  40dcde:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40dce0:	f893 8001 	ldrb.w	r8, [r3, #1]
  40dce4:	f044 0420 	orr.w	r4, r4, #32
  40dce8:	f109 0901 	add.w	r9, r9, #1
  40dcec:	9409      	str	r4, [sp, #36]	; 0x24
  40dcee:	f7ff b853 	b.w	40cd98 <_svfprintf_r+0xb8>
  40dcf2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dcf4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dcf6:	aa2b      	add	r2, sp, #172	; 0xac
  40dcf8:	f006 fa82 	bl	414200 <__ssprint_r>
  40dcfc:	2800      	cmp	r0, #0
  40dcfe:	f47f a907 	bne.w	40cf10 <_svfprintf_r+0x230>
  40dd02:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dd06:	ae38      	add	r6, sp, #224	; 0xe0
  40dd08:	e4ac      	b.n	40d664 <_svfprintf_r+0x984>
  40dd0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40dd0c:	3501      	adds	r5, #1
  40dd0e:	f028 0a20 	bic.w	sl, r8, #32
  40dd12:	f000 80a5 	beq.w	40de60 <_svfprintf_r+0x1180>
  40dd16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40dd1a:	d104      	bne.n	40dd26 <_svfprintf_r+0x1046>
  40dd1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40dd1e:	2d00      	cmp	r5, #0
  40dd20:	bf08      	it	eq
  40dd22:	2501      	moveq	r5, #1
  40dd24:	950a      	str	r5, [sp, #40]	; 0x28
  40dd26:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40dd2a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dd2e:	2b00      	cmp	r3, #0
  40dd30:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40dd34:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40dd38:	f2c0 819c 	blt.w	40e074 <_svfprintf_r+0x1394>
  40dd3c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40dd40:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40dd44:	f04f 0b00 	mov.w	fp, #0
  40dd48:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40dd4c:	f000 819b 	beq.w	40e086 <_svfprintf_r+0x13a6>
  40dd50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40dd54:	f000 81a9 	beq.w	40e0aa <_svfprintf_r+0x13ca>
  40dd58:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40dd5c:	bf0a      	itet	eq
  40dd5e:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40dd60:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40dd62:	1c65      	addeq	r5, r4, #1
  40dd64:	2002      	movs	r0, #2
  40dd66:	a925      	add	r1, sp, #148	; 0x94
  40dd68:	aa26      	add	r2, sp, #152	; 0x98
  40dd6a:	ab29      	add	r3, sp, #164	; 0xa4
  40dd6c:	e88d 0021 	stmia.w	sp, {r0, r5}
  40dd70:	9203      	str	r2, [sp, #12]
  40dd72:	9304      	str	r3, [sp, #16]
  40dd74:	9102      	str	r1, [sp, #8]
  40dd76:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dd78:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40dd7c:	f002 f93c 	bl	40fff8 <_dtoa_r>
  40dd80:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40dd84:	4607      	mov	r7, r0
  40dd86:	d002      	beq.n	40dd8e <_svfprintf_r+0x10ae>
  40dd88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40dd8c:	d105      	bne.n	40dd9a <_svfprintf_r+0x10ba>
  40dd8e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40dd92:	f01c 0f01 	tst.w	ip, #1
  40dd96:	f000 819c 	beq.w	40e0d2 <_svfprintf_r+0x13f2>
  40dd9a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40dd9e:	eb07 0405 	add.w	r4, r7, r5
  40dda2:	f000 811c 	beq.w	40dfde <_svfprintf_r+0x12fe>
  40dda6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40ddaa:	2200      	movs	r2, #0
  40ddac:	2300      	movs	r3, #0
  40ddae:	f007 fccf 	bl	415750 <__aeabi_dcmpeq>
  40ddb2:	2800      	cmp	r0, #0
  40ddb4:	f040 8105 	bne.w	40dfc2 <_svfprintf_r+0x12e2>
  40ddb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ddba:	429c      	cmp	r4, r3
  40ddbc:	d906      	bls.n	40ddcc <_svfprintf_r+0x10ec>
  40ddbe:	2130      	movs	r1, #48	; 0x30
  40ddc0:	1c5a      	adds	r2, r3, #1
  40ddc2:	9229      	str	r2, [sp, #164]	; 0xa4
  40ddc4:	7019      	strb	r1, [r3, #0]
  40ddc6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ddc8:	429c      	cmp	r4, r3
  40ddca:	d8f9      	bhi.n	40ddc0 <_svfprintf_r+0x10e0>
  40ddcc:	1bdb      	subs	r3, r3, r7
  40ddce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40ddd2:	9311      	str	r3, [sp, #68]	; 0x44
  40ddd4:	f000 80ed 	beq.w	40dfb2 <_svfprintf_r+0x12d2>
  40ddd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40dddc:	f340 81f2 	ble.w	40e1c4 <_svfprintf_r+0x14e4>
  40dde0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40dde4:	f000 8168 	beq.w	40e0b8 <_svfprintf_r+0x13d8>
  40dde8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ddea:	9414      	str	r4, [sp, #80]	; 0x50
  40ddec:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40ddee:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ddf0:	42ac      	cmp	r4, r5
  40ddf2:	f300 8132 	bgt.w	40e05a <_svfprintf_r+0x137a>
  40ddf6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ddfa:	f01c 0f01 	tst.w	ip, #1
  40ddfe:	f040 81ad 	bne.w	40e15c <_svfprintf_r+0x147c>
  40de02:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40de06:	462c      	mov	r4, r5
  40de08:	f04f 0867 	mov.w	r8, #103	; 0x67
  40de0c:	f1bb 0f00 	cmp.w	fp, #0
  40de10:	f040 80b2 	bne.w	40df78 <_svfprintf_r+0x1298>
  40de14:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40de16:	930b      	str	r3, [sp, #44]	; 0x2c
  40de18:	9509      	str	r5, [sp, #36]	; 0x24
  40de1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40de1e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40de22:	f7ff b8f4 	b.w	40d00e <_svfprintf_r+0x32e>
  40de26:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de28:	2140      	movs	r1, #64	; 0x40
  40de2a:	f003 fd31 	bl	411890 <_malloc_r>
  40de2e:	6020      	str	r0, [r4, #0]
  40de30:	6120      	str	r0, [r4, #16]
  40de32:	2800      	cmp	r0, #0
  40de34:	f000 81bf 	beq.w	40e1b6 <_svfprintf_r+0x14d6>
  40de38:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40de3c:	2340      	movs	r3, #64	; 0x40
  40de3e:	f8cc 3014 	str.w	r3, [ip, #20]
  40de42:	f7fe bf63 	b.w	40cd0c <_svfprintf_r+0x2c>
  40de46:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de48:	990c      	ldr	r1, [sp, #48]	; 0x30
  40de4a:	aa2b      	add	r2, sp, #172	; 0xac
  40de4c:	f006 f9d8 	bl	414200 <__ssprint_r>
  40de50:	2800      	cmp	r0, #0
  40de52:	f47f a85d 	bne.w	40cf10 <_svfprintf_r+0x230>
  40de56:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40de58:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40de5c:	ae38      	add	r6, sp, #224	; 0xe0
  40de5e:	e6fd      	b.n	40dc5c <_svfprintf_r+0xf7c>
  40de60:	2406      	movs	r4, #6
  40de62:	940a      	str	r4, [sp, #40]	; 0x28
  40de64:	e75f      	b.n	40dd26 <_svfprintf_r+0x1046>
  40de66:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40de68:	682c      	ldr	r4, [r5, #0]
  40de6a:	3504      	adds	r5, #4
  40de6c:	9510      	str	r5, [sp, #64]	; 0x40
  40de6e:	2500      	movs	r5, #0
  40de70:	f7ff b88c 	b.w	40cf8c <_svfprintf_r+0x2ac>
  40de74:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40de78:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40de7c:	f000 8087 	beq.w	40df8e <_svfprintf_r+0x12ae>
  40de80:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40de82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40de84:	6823      	ldr	r3, [r4, #0]
  40de86:	3404      	adds	r4, #4
  40de88:	9410      	str	r4, [sp, #64]	; 0x40
  40de8a:	801d      	strh	r5, [r3, #0]
  40de8c:	f7fe bf4e 	b.w	40cd2c <_svfprintf_r+0x4c>
  40de90:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de92:	990c      	ldr	r1, [sp, #48]	; 0x30
  40de94:	aa2b      	add	r2, sp, #172	; 0xac
  40de96:	f006 f9b3 	bl	414200 <__ssprint_r>
  40de9a:	2800      	cmp	r0, #0
  40de9c:	f47f a838 	bne.w	40cf10 <_svfprintf_r+0x230>
  40dea0:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40dea2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dea4:	aa38      	add	r2, sp, #224	; 0xe0
  40dea6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40deaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40deac:	6017      	str	r7, [r2, #0]
  40deae:	3301      	adds	r3, #1
  40deb0:	448c      	add	ip, r1
  40deb2:	2b07      	cmp	r3, #7
  40deb4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40deb8:	932c      	str	r3, [sp, #176]	; 0xb0
  40deba:	6054      	str	r4, [r2, #4]
  40debc:	f73f ac92 	bgt.w	40d7e4 <_svfprintf_r+0xb04>
  40dec0:	f102 0608 	add.w	r6, r2, #8
  40dec4:	f7ff b97e 	b.w	40d1c4 <_svfprintf_r+0x4e4>
  40dec8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40decc:	f7fe fe4c 	bl	40cb68 <strlen>
  40ded0:	9510      	str	r5, [sp, #64]	; 0x40
  40ded2:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40ded6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ded8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40dedc:	4604      	mov	r4, r0
  40dede:	9514      	str	r5, [sp, #80]	; 0x50
  40dee0:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40dee4:	f7ff b893 	b.w	40d00e <_svfprintf_r+0x32e>
  40dee8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40deea:	990c      	ldr	r1, [sp, #48]	; 0x30
  40deec:	aa2b      	add	r2, sp, #172	; 0xac
  40deee:	f006 f987 	bl	414200 <__ssprint_r>
  40def2:	2800      	cmp	r0, #0
  40def4:	f47f a80c 	bne.w	40cf10 <_svfprintf_r+0x230>
  40def8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40defc:	ae38      	add	r6, sp, #224	; 0xe0
  40defe:	e4cc      	b.n	40d89a <_svfprintf_r+0xbba>
  40df00:	980d      	ldr	r0, [sp, #52]	; 0x34
  40df02:	990c      	ldr	r1, [sp, #48]	; 0x30
  40df04:	aa2b      	add	r2, sp, #172	; 0xac
  40df06:	f006 f97b 	bl	414200 <__ssprint_r>
  40df0a:	2800      	cmp	r0, #0
  40df0c:	f47f a800 	bne.w	40cf10 <_svfprintf_r+0x230>
  40df10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40df12:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40df16:	ae38      	add	r6, sp, #224	; 0xe0
  40df18:	e5aa      	b.n	40da70 <_svfprintf_r+0xd90>
  40df1a:	bf00      	nop
  40df1c:	00415e60 	.word	0x00415e60
  40df20:	00415e10 	.word	0x00415e10
  40df24:	4621      	mov	r1, r4
  40df26:	465c      	mov	r4, fp
  40df28:	3301      	adds	r3, #1
  40df2a:	4421      	add	r1, r4
  40df2c:	2b07      	cmp	r3, #7
  40df2e:	912d      	str	r1, [sp, #180]	; 0xb4
  40df30:	932c      	str	r3, [sp, #176]	; 0xb0
  40df32:	6015      	str	r5, [r2, #0]
  40df34:	6054      	str	r4, [r2, #4]
  40df36:	dcab      	bgt.n	40de90 <_svfprintf_r+0x11b0>
  40df38:	3208      	adds	r2, #8
  40df3a:	e7b4      	b.n	40dea6 <_svfprintf_r+0x11c6>
  40df3c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40df3e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40df40:	aa2b      	add	r2, sp, #172	; 0xac
  40df42:	f006 f95d 	bl	414200 <__ssprint_r>
  40df46:	2800      	cmp	r0, #0
  40df48:	f47e afe2 	bne.w	40cf10 <_svfprintf_r+0x230>
  40df4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40df4e:	9911      	ldr	r1, [sp, #68]	; 0x44
  40df50:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40df54:	1b0c      	subs	r4, r1, r4
  40df56:	ae38      	add	r6, sp, #224	; 0xe0
  40df58:	e59f      	b.n	40da9a <_svfprintf_r+0xdba>
  40df5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40df5c:	9714      	str	r7, [sp, #80]	; 0x50
  40df5e:	2c06      	cmp	r4, #6
  40df60:	bf28      	it	cs
  40df62:	2406      	movcs	r4, #6
  40df64:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40df68:	46ba      	mov	sl, r7
  40df6a:	970a      	str	r7, [sp, #40]	; 0x28
  40df6c:	9510      	str	r5, [sp, #64]	; 0x40
  40df6e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40df72:	4f97      	ldr	r7, [pc, #604]	; (40e1d0 <_svfprintf_r+0x14f0>)
  40df74:	f7ff b84b 	b.w	40d00e <_svfprintf_r+0x32e>
  40df78:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40df7a:	9509      	str	r5, [sp, #36]	; 0x24
  40df7c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40df80:	2500      	movs	r5, #0
  40df82:	930b      	str	r3, [sp, #44]	; 0x2c
  40df84:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40df88:	950a      	str	r5, [sp, #40]	; 0x28
  40df8a:	f7ff b843 	b.w	40d014 <_svfprintf_r+0x334>
  40df8e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40df92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40df94:	f8dc 3000 	ldr.w	r3, [ip]
  40df98:	f10c 0c04 	add.w	ip, ip, #4
  40df9c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40dfa0:	601c      	str	r4, [r3, #0]
  40dfa2:	f7fe bec3 	b.w	40cd2c <_svfprintf_r+0x4c>
  40dfa6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40dfaa:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40dfae:	f7ff ba8f 	b.w	40d4d0 <_svfprintf_r+0x7f0>
  40dfb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40dfb4:	1cdc      	adds	r4, r3, #3
  40dfb6:	db19      	blt.n	40dfec <_svfprintf_r+0x130c>
  40dfb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40dfba:	429c      	cmp	r4, r3
  40dfbc:	db16      	blt.n	40dfec <_svfprintf_r+0x130c>
  40dfbe:	9314      	str	r3, [sp, #80]	; 0x50
  40dfc0:	e714      	b.n	40ddec <_svfprintf_r+0x110c>
  40dfc2:	4623      	mov	r3, r4
  40dfc4:	e702      	b.n	40ddcc <_svfprintf_r+0x10ec>
  40dfc6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dfca:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40dfce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40dfd0:	9510      	str	r5, [sp, #64]	; 0x40
  40dfd2:	900a      	str	r0, [sp, #40]	; 0x28
  40dfd4:	9014      	str	r0, [sp, #80]	; 0x50
  40dfd6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40dfda:	f7ff b818 	b.w	40d00e <_svfprintf_r+0x32e>
  40dfde:	783b      	ldrb	r3, [r7, #0]
  40dfe0:	2b30      	cmp	r3, #48	; 0x30
  40dfe2:	f000 80ad 	beq.w	40e140 <_svfprintf_r+0x1460>
  40dfe6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40dfe8:	442c      	add	r4, r5
  40dfea:	e6dc      	b.n	40dda6 <_svfprintf_r+0x10c6>
  40dfec:	f1a8 0802 	sub.w	r8, r8, #2
  40dff0:	3b01      	subs	r3, #1
  40dff2:	2b00      	cmp	r3, #0
  40dff4:	9325      	str	r3, [sp, #148]	; 0x94
  40dff6:	bfba      	itte	lt
  40dff8:	425b      	neglt	r3, r3
  40dffa:	222d      	movlt	r2, #45	; 0x2d
  40dffc:	222b      	movge	r2, #43	; 0x2b
  40dffe:	2b09      	cmp	r3, #9
  40e000:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40e004:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40e008:	dc65      	bgt.n	40e0d6 <_svfprintf_r+0x13f6>
  40e00a:	3330      	adds	r3, #48	; 0x30
  40e00c:	2230      	movs	r2, #48	; 0x30
  40e00e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40e012:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  40e016:	ab28      	add	r3, sp, #160	; 0xa0
  40e018:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e01a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e01c:	aa27      	add	r2, sp, #156	; 0x9c
  40e01e:	1a9a      	subs	r2, r3, r2
  40e020:	2d01      	cmp	r5, #1
  40e022:	9219      	str	r2, [sp, #100]	; 0x64
  40e024:	4414      	add	r4, r2
  40e026:	f340 80b7 	ble.w	40e198 <_svfprintf_r+0x14b8>
  40e02a:	3401      	adds	r4, #1
  40e02c:	2500      	movs	r5, #0
  40e02e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e032:	9514      	str	r5, [sp, #80]	; 0x50
  40e034:	e6ea      	b.n	40de0c <_svfprintf_r+0x112c>
  40e036:	2400      	movs	r4, #0
  40e038:	4681      	mov	r9, r0
  40e03a:	940a      	str	r4, [sp, #40]	; 0x28
  40e03c:	f7fe beae 	b.w	40cd9c <_svfprintf_r+0xbc>
  40e040:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e042:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e044:	aa2b      	add	r2, sp, #172	; 0xac
  40e046:	f006 f8db 	bl	414200 <__ssprint_r>
  40e04a:	2800      	cmp	r0, #0
  40e04c:	f47e af60 	bne.w	40cf10 <_svfprintf_r+0x230>
  40e050:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e052:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40e054:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e056:	aa38      	add	r2, sp, #224	; 0xe0
  40e058:	e616      	b.n	40dc88 <_svfprintf_r+0xfa8>
  40e05a:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40e05c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e05e:	2c00      	cmp	r4, #0
  40e060:	bfd4      	ite	le
  40e062:	f1c4 0402 	rsble	r4, r4, #2
  40e066:	2401      	movgt	r4, #1
  40e068:	442c      	add	r4, r5
  40e06a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e06e:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e072:	e6cb      	b.n	40de0c <_svfprintf_r+0x112c>
  40e074:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40e076:	9816      	ldr	r0, [sp, #88]	; 0x58
  40e078:	9020      	str	r0, [sp, #128]	; 0x80
  40e07a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40e07e:	9121      	str	r1, [sp, #132]	; 0x84
  40e080:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40e084:	e660      	b.n	40dd48 <_svfprintf_r+0x1068>
  40e086:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e088:	9501      	str	r5, [sp, #4]
  40e08a:	2003      	movs	r0, #3
  40e08c:	a925      	add	r1, sp, #148	; 0x94
  40e08e:	aa26      	add	r2, sp, #152	; 0x98
  40e090:	ab29      	add	r3, sp, #164	; 0xa4
  40e092:	9000      	str	r0, [sp, #0]
  40e094:	9203      	str	r2, [sp, #12]
  40e096:	9304      	str	r3, [sp, #16]
  40e098:	9102      	str	r1, [sp, #8]
  40e09a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e09c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40e0a0:	f001 ffaa 	bl	40fff8 <_dtoa_r>
  40e0a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e0a6:	4607      	mov	r7, r0
  40e0a8:	e677      	b.n	40dd9a <_svfprintf_r+0x10ba>
  40e0aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e0ac:	9401      	str	r4, [sp, #4]
  40e0ae:	2003      	movs	r0, #3
  40e0b0:	a925      	add	r1, sp, #148	; 0x94
  40e0b2:	aa26      	add	r2, sp, #152	; 0x98
  40e0b4:	ab29      	add	r3, sp, #164	; 0xa4
  40e0b6:	e7ec      	b.n	40e092 <_svfprintf_r+0x13b2>
  40e0b8:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40e0ba:	9514      	str	r5, [sp, #80]	; 0x50
  40e0bc:	2d00      	cmp	r5, #0
  40e0be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e0c0:	dd63      	ble.n	40e18a <_svfprintf_r+0x14aa>
  40e0c2:	bbb4      	cbnz	r4, 40e132 <_svfprintf_r+0x1452>
  40e0c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e0c6:	07e8      	lsls	r0, r5, #31
  40e0c8:	d433      	bmi.n	40e132 <_svfprintf_r+0x1452>
  40e0ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40e0cc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e0d0:	e69c      	b.n	40de0c <_svfprintf_r+0x112c>
  40e0d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e0d4:	e67a      	b.n	40ddcc <_svfprintf_r+0x10ec>
  40e0d6:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40e0da:	4d3e      	ldr	r5, [pc, #248]	; (40e1d4 <_svfprintf_r+0x14f4>)
  40e0dc:	17da      	asrs	r2, r3, #31
  40e0de:	fb85 5103 	smull	r5, r1, r5, r3
  40e0e2:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40e0e6:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40e0ea:	4602      	mov	r2, r0
  40e0ec:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  40e0f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40e0f4:	2909      	cmp	r1, #9
  40e0f6:	7010      	strb	r0, [r2, #0]
  40e0f8:	460b      	mov	r3, r1
  40e0fa:	f102 30ff 	add.w	r0, r2, #4294967295
  40e0fe:	dcec      	bgt.n	40e0da <_svfprintf_r+0x13fa>
  40e100:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40e104:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40e108:	b2d9      	uxtb	r1, r3
  40e10a:	4284      	cmp	r4, r0
  40e10c:	f802 1c01 	strb.w	r1, [r2, #-1]
  40e110:	d95a      	bls.n	40e1c8 <_svfprintf_r+0x14e8>
  40e112:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  40e116:	4613      	mov	r3, r2
  40e118:	e001      	b.n	40e11e <_svfprintf_r+0x143e>
  40e11a:	f813 1b01 	ldrb.w	r1, [r3], #1
  40e11e:	42a3      	cmp	r3, r4
  40e120:	f800 1f01 	strb.w	r1, [r0, #1]!
  40e124:	d1f9      	bne.n	40e11a <_svfprintf_r+0x143a>
  40e126:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  40e12a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  40e12e:	3bf6      	subs	r3, #246	; 0xf6
  40e130:	e772      	b.n	40e018 <_svfprintf_r+0x1338>
  40e132:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e134:	1c6c      	adds	r4, r5, #1
  40e136:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e138:	442c      	add	r4, r5
  40e13a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e13e:	e665      	b.n	40de0c <_svfprintf_r+0x112c>
  40e140:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40e144:	2200      	movs	r2, #0
  40e146:	2300      	movs	r3, #0
  40e148:	f007 fb02 	bl	415750 <__aeabi_dcmpeq>
  40e14c:	2800      	cmp	r0, #0
  40e14e:	f47f af4a 	bne.w	40dfe6 <_svfprintf_r+0x1306>
  40e152:	f1c5 0501 	rsb	r5, r5, #1
  40e156:	9525      	str	r5, [sp, #148]	; 0x94
  40e158:	442c      	add	r4, r5
  40e15a:	e624      	b.n	40dda6 <_svfprintf_r+0x10c6>
  40e15c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e15e:	1c6c      	adds	r4, r5, #1
  40e160:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e164:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e168:	e650      	b.n	40de0c <_svfprintf_r+0x112c>
  40e16a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e16c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40e170:	682d      	ldr	r5, [r5, #0]
  40e172:	f899 8001 	ldrb.w	r8, [r9, #1]
  40e176:	950a      	str	r5, [sp, #40]	; 0x28
  40e178:	f10c 0304 	add.w	r3, ip, #4
  40e17c:	2d00      	cmp	r5, #0
  40e17e:	9310      	str	r3, [sp, #64]	; 0x40
  40e180:	4681      	mov	r9, r0
  40e182:	f6be ae09 	bge.w	40cd98 <_svfprintf_r+0xb8>
  40e186:	f7fe be04 	b.w	40cd92 <_svfprintf_r+0xb2>
  40e18a:	b97c      	cbnz	r4, 40e1ac <_svfprintf_r+0x14cc>
  40e18c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e18e:	07e9      	lsls	r1, r5, #31
  40e190:	d40c      	bmi.n	40e1ac <_svfprintf_r+0x14cc>
  40e192:	2301      	movs	r3, #1
  40e194:	461c      	mov	r4, r3
  40e196:	e639      	b.n	40de0c <_svfprintf_r+0x112c>
  40e198:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e19c:	f01c 0301 	ands.w	r3, ip, #1
  40e1a0:	f47f af43 	bne.w	40e02a <_svfprintf_r+0x134a>
  40e1a4:	9314      	str	r3, [sp, #80]	; 0x50
  40e1a6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e1aa:	e62f      	b.n	40de0c <_svfprintf_r+0x112c>
  40e1ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e1ae:	1cac      	adds	r4, r5, #2
  40e1b0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e1b4:	e62a      	b.n	40de0c <_svfprintf_r+0x112c>
  40e1b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40e1b8:	230c      	movs	r3, #12
  40e1ba:	602b      	str	r3, [r5, #0]
  40e1bc:	f04f 30ff 	mov.w	r0, #4294967295
  40e1c0:	f7fe beae 	b.w	40cf20 <_svfprintf_r+0x240>
  40e1c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e1c6:	e713      	b.n	40dff0 <_svfprintf_r+0x1310>
  40e1c8:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  40e1cc:	e724      	b.n	40e018 <_svfprintf_r+0x1338>
  40e1ce:	bf00      	nop
  40e1d0:	00415e58 	.word	0x00415e58
  40e1d4:	66666667 	.word	0x66666667

0040e1d8 <__ssvfscanf_r>:
  40e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e1dc:	460d      	mov	r5, r1
  40e1de:	8989      	ldrh	r1, [r1, #12]
  40e1e0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  40e1e4:	048c      	lsls	r4, r1, #18
  40e1e6:	900e      	str	r0, [sp, #56]	; 0x38
  40e1e8:	9306      	str	r3, [sp, #24]
  40e1ea:	d406      	bmi.n	40e1fa <__ssvfscanf_r+0x22>
  40e1ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e1ee:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40e1f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e1f6:	81a9      	strh	r1, [r5, #12]
  40e1f8:	666b      	str	r3, [r5, #100]	; 0x64
  40e1fa:	4692      	mov	sl, r2
  40e1fc:	2400      	movs	r4, #0
  40e1fe:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e202:	9409      	str	r4, [sp, #36]	; 0x24
  40e204:	940c      	str	r4, [sp, #48]	; 0x30
  40e206:	46a1      	mov	r9, r4
  40e208:	940b      	str	r4, [sp, #44]	; 0x2c
  40e20a:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 40e5f0 <__ssvfscanf_r+0x418>
  40e20e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40e210:	9313      	str	r3, [sp, #76]	; 0x4c
  40e212:	b343      	cbz	r3, 40e266 <__ssvfscanf_r+0x8e>
  40e214:	f8d8 1000 	ldr.w	r1, [r8]
  40e218:	18c8      	adds	r0, r1, r3
  40e21a:	7840      	ldrb	r0, [r0, #1]
  40e21c:	f000 0008 	and.w	r0, r0, #8
  40e220:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40e224:	b320      	cbz	r0, 40e270 <__ssvfscanf_r+0x98>
  40e226:	686b      	ldr	r3, [r5, #4]
  40e228:	e00e      	b.n	40e248 <__ssvfscanf_r+0x70>
  40e22a:	682b      	ldr	r3, [r5, #0]
  40e22c:	f8d8 2000 	ldr.w	r2, [r8]
  40e230:	7819      	ldrb	r1, [r3, #0]
  40e232:	440a      	add	r2, r1
  40e234:	3301      	adds	r3, #1
  40e236:	7852      	ldrb	r2, [r2, #1]
  40e238:	0710      	lsls	r0, r2, #28
  40e23a:	d50d      	bpl.n	40e258 <__ssvfscanf_r+0x80>
  40e23c:	686a      	ldr	r2, [r5, #4]
  40e23e:	602b      	str	r3, [r5, #0]
  40e240:	1e53      	subs	r3, r2, #1
  40e242:	f109 0901 	add.w	r9, r9, #1
  40e246:	606b      	str	r3, [r5, #4]
  40e248:	2b00      	cmp	r3, #0
  40e24a:	dcee      	bgt.n	40e22a <__ssvfscanf_r+0x52>
  40e24c:	4630      	mov	r0, r6
  40e24e:	4629      	mov	r1, r5
  40e250:	f006 f896 	bl	414380 <__ssrefill_r>
  40e254:	2800      	cmp	r0, #0
  40e256:	d0e8      	beq.n	40e22a <__ssvfscanf_r+0x52>
  40e258:	4652      	mov	r2, sl
  40e25a:	4692      	mov	sl, r2
  40e25c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e260:	9313      	str	r3, [sp, #76]	; 0x4c
  40e262:	2b00      	cmp	r3, #0
  40e264:	d1d6      	bne.n	40e214 <__ssvfscanf_r+0x3c>
  40e266:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e268:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40e26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e270:	2b25      	cmp	r3, #37	; 0x25
  40e272:	f040 8084 	bne.w	40e37e <__ssvfscanf_r+0x1a6>
  40e276:	7853      	ldrb	r3, [r2, #1]
  40e278:	463c      	mov	r4, r7
  40e27a:	f10a 0201 	add.w	r2, sl, #1
  40e27e:	2b78      	cmp	r3, #120	; 0x78
  40e280:	f200 82e5 	bhi.w	40e84e <__ssvfscanf_r+0x676>
  40e284:	e8df f013 	tbh	[pc, r3, lsl #1]
  40e288:	02e3008f 	.word	0x02e3008f
  40e28c:	02e302e3 	.word	0x02e302e3
  40e290:	02e302e3 	.word	0x02e302e3
  40e294:	02e302e3 	.word	0x02e302e3
  40e298:	02e302e3 	.word	0x02e302e3
  40e29c:	02e302e3 	.word	0x02e302e3
  40e2a0:	02e302e3 	.word	0x02e302e3
  40e2a4:	02e302e3 	.word	0x02e302e3
  40e2a8:	02e302e3 	.word	0x02e302e3
  40e2ac:	02e302e3 	.word	0x02e302e3
  40e2b0:	02e302e3 	.word	0x02e302e3
  40e2b4:	02e302e3 	.word	0x02e302e3
  40e2b8:	02e302e3 	.word	0x02e302e3
  40e2bc:	02e302e3 	.word	0x02e302e3
  40e2c0:	02e302e3 	.word	0x02e302e3
  40e2c4:	02e302e3 	.word	0x02e302e3
  40e2c8:	02e302e3 	.word	0x02e302e3
  40e2cc:	02e302e3 	.word	0x02e302e3
  40e2d0:	007902e3 	.word	0x007902e3
  40e2d4:	02e302e3 	.word	0x02e302e3
  40e2d8:	02e302e3 	.word	0x02e302e3
  40e2dc:	02e30226 	.word	0x02e30226
  40e2e0:	02e302e3 	.word	0x02e302e3
  40e2e4:	02e302e3 	.word	0x02e302e3
  40e2e8:	024f024f 	.word	0x024f024f
  40e2ec:	024f024f 	.word	0x024f024f
  40e2f0:	024f024f 	.word	0x024f024f
  40e2f4:	024f024f 	.word	0x024f024f
  40e2f8:	024f024f 	.word	0x024f024f
  40e2fc:	02e302e3 	.word	0x02e302e3
  40e300:	02e302e3 	.word	0x02e302e3
  40e304:	02e302e3 	.word	0x02e302e3
  40e308:	02e302e3 	.word	0x02e302e3
  40e30c:	02e302e3 	.word	0x02e302e3
  40e310:	0273022c 	.word	0x0273022c
  40e314:	027302e3 	.word	0x027302e3
  40e318:	02e302e3 	.word	0x02e302e3
  40e31c:	02e302e3 	.word	0x02e302e3
  40e320:	02e3026d 	.word	0x02e3026d
  40e324:	026302e3 	.word	0x026302e3
  40e328:	02e302e3 	.word	0x02e302e3
  40e32c:	02e302e3 	.word	0x02e302e3
  40e330:	02e302e3 	.word	0x02e302e3
  40e334:	02e302e3 	.word	0x02e302e3
  40e338:	02e30259 	.word	0x02e30259
  40e33c:	029302e3 	.word	0x029302e3
  40e340:	02e302e3 	.word	0x02e302e3
  40e344:	02e302e3 	.word	0x02e302e3
  40e348:	02e302e3 	.word	0x02e302e3
  40e34c:	028d02e3 	.word	0x028d02e3
  40e350:	0273029e 	.word	0x0273029e
  40e354:	02730273 	.word	0x02730273
  40e358:	00950287 	.word	0x00950287
  40e35c:	02e302e3 	.word	0x02e302e3
  40e360:	02e302b6 	.word	0x02e302b6
  40e364:	02770279 	.word	0x02770279
  40e368:	02e302ac 	.word	0x02e302ac
  40e36c:	02a802e3 	.word	0x02a802e3
  40e370:	02a002e3 	.word	0x02a002e3
  40e374:	02e302e3 	.word	0x02e302e3
  40e378:	0259      	.short	0x0259
  40e37a:	9207      	str	r2, [sp, #28]
  40e37c:	4692      	mov	sl, r2
  40e37e:	686b      	ldr	r3, [r5, #4]
  40e380:	2b00      	cmp	r3, #0
  40e382:	f340 8557 	ble.w	40ee34 <__ssvfscanf_r+0xc5c>
  40e386:	682b      	ldr	r3, [r5, #0]
  40e388:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  40e38c:	7819      	ldrb	r1, [r3, #0]
  40e38e:	4291      	cmp	r1, r2
  40e390:	f47f af69 	bne.w	40e266 <__ssvfscanf_r+0x8e>
  40e394:	686a      	ldr	r2, [r5, #4]
  40e396:	3301      	adds	r3, #1
  40e398:	3a01      	subs	r2, #1
  40e39a:	606a      	str	r2, [r5, #4]
  40e39c:	602b      	str	r3, [r5, #0]
  40e39e:	f109 0901 	add.w	r9, r9, #1
  40e3a2:	4652      	mov	r2, sl
  40e3a4:	e759      	b.n	40e25a <__ssvfscanf_r+0x82>
  40e3a6:	f04f 30ff 	mov.w	r0, #4294967295
  40e3aa:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e3b2:	9207      	str	r2, [sp, #28]
  40e3b4:	2300      	movs	r3, #0
  40e3b6:	4a8d      	ldr	r2, [pc, #564]	; (40e5ec <__ssvfscanf_r+0x414>)
  40e3b8:	9209      	str	r2, [sp, #36]	; 0x24
  40e3ba:	930c      	str	r3, [sp, #48]	; 0x30
  40e3bc:	f04f 0a03 	mov.w	sl, #3
  40e3c0:	686b      	ldr	r3, [r5, #4]
  40e3c2:	2b00      	cmp	r3, #0
  40e3c4:	f340 8199 	ble.w	40e6fa <__ssvfscanf_r+0x522>
  40e3c8:	0679      	lsls	r1, r7, #25
  40e3ca:	d512      	bpl.n	40e3f2 <__ssvfscanf_r+0x21a>
  40e3cc:	f10a 3aff 	add.w	sl, sl, #4294967295
  40e3d0:	f1ba 0f03 	cmp.w	sl, #3
  40e3d4:	f200 80b7 	bhi.w	40e546 <__ssvfscanf_r+0x36e>
  40e3d8:	e8df f01a 	tbh	[pc, sl, lsl #1]
  40e3dc:	008e00da 	.word	0x008e00da
  40e3e0:	0244001e 	.word	0x0244001e
  40e3e4:	4630      	mov	r0, r6
  40e3e6:	4629      	mov	r1, r5
  40e3e8:	f005 ffca 	bl	414380 <__ssrefill_r>
  40e3ec:	2800      	cmp	r0, #0
  40e3ee:	f040 818b 	bne.w	40e708 <__ssvfscanf_r+0x530>
  40e3f2:	f8d8 1000 	ldr.w	r1, [r8]
  40e3f6:	682b      	ldr	r3, [r5, #0]
  40e3f8:	e000      	b.n	40e3fc <__ssvfscanf_r+0x224>
  40e3fa:	602b      	str	r3, [r5, #0]
  40e3fc:	781a      	ldrb	r2, [r3, #0]
  40e3fe:	440a      	add	r2, r1
  40e400:	3301      	adds	r3, #1
  40e402:	7852      	ldrb	r2, [r2, #1]
  40e404:	0712      	lsls	r2, r2, #28
  40e406:	d5e1      	bpl.n	40e3cc <__ssvfscanf_r+0x1f4>
  40e408:	686a      	ldr	r2, [r5, #4]
  40e40a:	3a01      	subs	r2, #1
  40e40c:	2a00      	cmp	r2, #0
  40e40e:	f109 0901 	add.w	r9, r9, #1
  40e412:	606a      	str	r2, [r5, #4]
  40e414:	dcf1      	bgt.n	40e3fa <__ssvfscanf_r+0x222>
  40e416:	e7e5      	b.n	40e3e4 <__ssvfscanf_r+0x20c>
  40e418:	1e63      	subs	r3, r4, #1
  40e41a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40e41e:	bf86      	itte	hi
  40e420:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  40e424:	1863      	addhi	r3, r4, r1
  40e426:	2300      	movls	r3, #0
  40e428:	f04f 0b00 	mov.w	fp, #0
  40e42c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40e430:	9308      	str	r3, [sp, #32]
  40e432:	465b      	mov	r3, fp
  40e434:	46b3      	mov	fp, r6
  40e436:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40e438:	f8cd c014 	str.w	ip, [sp, #20]
  40e43c:	46e2      	mov	sl, ip
  40e43e:	bf88      	it	hi
  40e440:	f240 145d 	movwhi	r4, #349	; 0x15d
  40e444:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  40e448:	46cc      	mov	ip, r9
  40e44a:	6828      	ldr	r0, [r5, #0]
  40e44c:	7801      	ldrb	r1, [r0, #0]
  40e44e:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  40e452:	2a4d      	cmp	r2, #77	; 0x4d
  40e454:	f200 80e2 	bhi.w	40e61c <__ssvfscanf_r+0x444>
  40e458:	e8df f012 	tbh	[pc, r2, lsl #1]
  40e45c:	00e00126 	.word	0x00e00126
  40e460:	00e00126 	.word	0x00e00126
  40e464:	00fd00e0 	.word	0x00fd00e0
  40e468:	00cc00cc 	.word	0x00cc00cc
  40e46c:	00cc00cc 	.word	0x00cc00cc
  40e470:	00cc00cc 	.word	0x00cc00cc
  40e474:	013600cc 	.word	0x013600cc
  40e478:	00e00136 	.word	0x00e00136
  40e47c:	00e000e0 	.word	0x00e000e0
  40e480:	00e000e0 	.word	0x00e000e0
  40e484:	00e000e0 	.word	0x00e000e0
  40e488:	01210121 	.word	0x01210121
  40e48c:	01210121 	.word	0x01210121
  40e490:	01210121 	.word	0x01210121
  40e494:	00e000e0 	.word	0x00e000e0
  40e498:	00e000e0 	.word	0x00e000e0
  40e49c:	00e000e0 	.word	0x00e000e0
  40e4a0:	00e000e0 	.word	0x00e000e0
  40e4a4:	00e000e0 	.word	0x00e000e0
  40e4a8:	00e000e0 	.word	0x00e000e0
  40e4ac:	00e000e0 	.word	0x00e000e0
  40e4b0:	00e000e0 	.word	0x00e000e0
  40e4b4:	012b00e0 	.word	0x012b00e0
  40e4b8:	00e000e0 	.word	0x00e000e0
  40e4bc:	00e000e0 	.word	0x00e000e0
  40e4c0:	00e000e0 	.word	0x00e000e0
  40e4c4:	00e000e0 	.word	0x00e000e0
  40e4c8:	01210121 	.word	0x01210121
  40e4cc:	01210121 	.word	0x01210121
  40e4d0:	01210121 	.word	0x01210121
  40e4d4:	00e000e0 	.word	0x00e000e0
  40e4d8:	00e000e0 	.word	0x00e000e0
  40e4dc:	00e000e0 	.word	0x00e000e0
  40e4e0:	00e000e0 	.word	0x00e000e0
  40e4e4:	00e000e0 	.word	0x00e000e0
  40e4e8:	00e000e0 	.word	0x00e000e0
  40e4ec:	00e000e0 	.word	0x00e000e0
  40e4f0:	00e000e0 	.word	0x00e000e0
  40e4f4:	012b00e0 	.word	0x012b00e0
  40e4f8:	2c00      	cmp	r4, #0
  40e4fa:	bf08      	it	eq
  40e4fc:	f04f 34ff 	moveq.w	r4, #4294967295
  40e500:	f017 0301 	ands.w	r3, r7, #1
  40e504:	f040 817f 	bne.w	40e806 <__ssvfscanf_r+0x62e>
  40e508:	06f9      	lsls	r1, r7, #27
  40e50a:	f140 8390 	bpl.w	40ec2e <__ssvfscanf_r+0xa56>
  40e50e:	461f      	mov	r7, r3
  40e510:	f8d8 1000 	ldr.w	r1, [r8]
  40e514:	682b      	ldr	r3, [r5, #0]
  40e516:	781a      	ldrb	r2, [r3, #0]
  40e518:	440a      	add	r2, r1
  40e51a:	3301      	adds	r3, #1
  40e51c:	7852      	ldrb	r2, [r2, #1]
  40e51e:	0712      	lsls	r2, r2, #28
  40e520:	d431      	bmi.n	40e586 <__ssvfscanf_r+0x3ae>
  40e522:	686a      	ldr	r2, [r5, #4]
  40e524:	602b      	str	r3, [r5, #0]
  40e526:	3701      	adds	r7, #1
  40e528:	3a01      	subs	r2, #1
  40e52a:	42bc      	cmp	r4, r7
  40e52c:	606a      	str	r2, [r5, #4]
  40e52e:	d02a      	beq.n	40e586 <__ssvfscanf_r+0x3ae>
  40e530:	2a00      	cmp	r2, #0
  40e532:	dcf0      	bgt.n	40e516 <__ssvfscanf_r+0x33e>
  40e534:	4630      	mov	r0, r6
  40e536:	4629      	mov	r1, r5
  40e538:	f005 ff22 	bl	414380 <__ssrefill_r>
  40e53c:	bb18      	cbnz	r0, 40e586 <__ssvfscanf_r+0x3ae>
  40e53e:	f8d8 1000 	ldr.w	r1, [r8]
  40e542:	682b      	ldr	r3, [r5, #0]
  40e544:	e7e7      	b.n	40e516 <__ssvfscanf_r+0x33e>
  40e546:	2c00      	cmp	r4, #0
  40e548:	bf08      	it	eq
  40e54a:	2401      	moveq	r4, #1
  40e54c:	f017 0301 	ands.w	r3, r7, #1
  40e550:	f040 839f 	bne.w	40ec92 <__ssvfscanf_r+0xaba>
  40e554:	06f9      	lsls	r1, r7, #27
  40e556:	f140 8454 	bpl.w	40ee02 <__ssvfscanf_r+0xc2a>
  40e55a:	461f      	mov	r7, r3
  40e55c:	e008      	b.n	40e570 <__ssvfscanf_r+0x398>
  40e55e:	441a      	add	r2, r3
  40e560:	602a      	str	r2, [r5, #0]
  40e562:	441f      	add	r7, r3
  40e564:	1ae4      	subs	r4, r4, r3
  40e566:	f005 ff0b 	bl	414380 <__ssrefill_r>
  40e56a:	2800      	cmp	r0, #0
  40e56c:	f040 8441 	bne.w	40edf2 <__ssvfscanf_r+0xc1a>
  40e570:	686b      	ldr	r3, [r5, #4]
  40e572:	682a      	ldr	r2, [r5, #0]
  40e574:	42a3      	cmp	r3, r4
  40e576:	4630      	mov	r0, r6
  40e578:	4629      	mov	r1, r5
  40e57a:	dbf0      	blt.n	40e55e <__ssvfscanf_r+0x386>
  40e57c:	1b1b      	subs	r3, r3, r4
  40e57e:	4422      	add	r2, r4
  40e580:	606b      	str	r3, [r5, #4]
  40e582:	4427      	add	r7, r4
  40e584:	602a      	str	r2, [r5, #0]
  40e586:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e58a:	44b9      	add	r9, r7
  40e58c:	4652      	mov	r2, sl
  40e58e:	e664      	b.n	40e25a <__ssvfscanf_r+0x82>
  40e590:	2c00      	cmp	r4, #0
  40e592:	bf08      	it	eq
  40e594:	f04f 34ff 	moveq.w	r4, #4294967295
  40e598:	06fa      	lsls	r2, r7, #27
  40e59a:	f140 8315 	bpl.w	40ebc8 <__ssvfscanf_r+0x9f0>
  40e59e:	682b      	ldr	r3, [r5, #0]
  40e5a0:	2700      	movs	r7, #0
  40e5a2:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40e5a6:	781a      	ldrb	r2, [r3, #0]
  40e5a8:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40e5ac:	3301      	adds	r3, #1
  40e5ae:	b1aa      	cbz	r2, 40e5dc <__ssvfscanf_r+0x404>
  40e5b0:	686a      	ldr	r2, [r5, #4]
  40e5b2:	602b      	str	r3, [r5, #0]
  40e5b4:	3701      	adds	r7, #1
  40e5b6:	3a01      	subs	r2, #1
  40e5b8:	42bc      	cmp	r4, r7
  40e5ba:	606a      	str	r2, [r5, #4]
  40e5bc:	d0e3      	beq.n	40e586 <__ssvfscanf_r+0x3ae>
  40e5be:	2a00      	cmp	r2, #0
  40e5c0:	dcf1      	bgt.n	40e5a6 <__ssvfscanf_r+0x3ce>
  40e5c2:	4630      	mov	r0, r6
  40e5c4:	4629      	mov	r1, r5
  40e5c6:	f005 fedb 	bl	414380 <__ssrefill_r>
  40e5ca:	2800      	cmp	r0, #0
  40e5cc:	d1db      	bne.n	40e586 <__ssvfscanf_r+0x3ae>
  40e5ce:	682b      	ldr	r3, [r5, #0]
  40e5d0:	781a      	ldrb	r2, [r3, #0]
  40e5d2:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40e5d6:	3301      	adds	r3, #1
  40e5d8:	2a00      	cmp	r2, #0
  40e5da:	d1e9      	bne.n	40e5b0 <__ssvfscanf_r+0x3d8>
  40e5dc:	2f00      	cmp	r7, #0
  40e5de:	f43f ae42 	beq.w	40e266 <__ssvfscanf_r+0x8e>
  40e5e2:	44b9      	add	r9, r7
  40e5e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e5e8:	e7d0      	b.n	40e58c <__ssvfscanf_r+0x3b4>
  40e5ea:	bf00      	nop
  40e5ec:	00413ca1 	.word	0x00413ca1
  40e5f0:	2000079c 	.word	0x2000079c
  40e5f4:	f8df 9364 	ldr.w	r9, [pc, #868]	; 40e95c <__ssvfscanf_r+0x784>
  40e5f8:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  40e5fc:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40e600:	686a      	ldr	r2, [r5, #4]
  40e602:	f88a 1000 	strb.w	r1, [sl]
  40e606:	3a01      	subs	r2, #1
  40e608:	2a00      	cmp	r2, #0
  40e60a:	f10a 0a01 	add.w	sl, sl, #1
  40e60e:	606a      	str	r2, [r5, #4]
  40e610:	dd38      	ble.n	40e684 <__ssvfscanf_r+0x4ac>
  40e612:	3001      	adds	r0, #1
  40e614:	6028      	str	r0, [r5, #0]
  40e616:	3c01      	subs	r4, #1
  40e618:	f47f af17 	bne.w	40e44a <__ssvfscanf_r+0x272>
  40e61c:	05f9      	lsls	r1, r7, #23
  40e61e:	960c      	str	r6, [sp, #48]	; 0x30
  40e620:	46e1      	mov	r9, ip
  40e622:	465e      	mov	r6, fp
  40e624:	469b      	mov	fp, r3
  40e626:	d508      	bpl.n	40e63a <__ssvfscanf_r+0x462>
  40e628:	9c05      	ldr	r4, [sp, #20]
  40e62a:	45a2      	cmp	sl, r4
  40e62c:	f200 840a 	bhi.w	40ee44 <__ssvfscanf_r+0xc6c>
  40e630:	f8dd c014 	ldr.w	ip, [sp, #20]
  40e634:	45e2      	cmp	sl, ip
  40e636:	f43f ae16 	beq.w	40e266 <__ssvfscanf_r+0x8e>
  40e63a:	f017 0410 	ands.w	r4, r7, #16
  40e63e:	f000 8372 	beq.w	40ed26 <__ssvfscanf_r+0xb4e>
  40e642:	f8dd c014 	ldr.w	ip, [sp, #20]
  40e646:	ebcc 0a0a 	rsb	sl, ip, sl
  40e64a:	44d3      	add	fp, sl
  40e64c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e650:	44d9      	add	r9, fp
  40e652:	4652      	mov	r2, sl
  40e654:	e601      	b.n	40e25a <__ssvfscanf_r+0x82>
  40e656:	053a      	lsls	r2, r7, #20
  40e658:	d5d2      	bpl.n	40e600 <__ssvfscanf_r+0x428>
  40e65a:	b916      	cbnz	r6, 40e662 <__ssvfscanf_r+0x48a>
  40e65c:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40e660:	2608      	movs	r6, #8
  40e662:	057a      	lsls	r2, r7, #21
  40e664:	f100 837d 	bmi.w	40ed62 <__ssvfscanf_r+0xb8a>
  40e668:	9a08      	ldr	r2, [sp, #32]
  40e66a:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  40e66e:	b112      	cbz	r2, 40e676 <__ssvfscanf_r+0x49e>
  40e670:	3a01      	subs	r2, #1
  40e672:	9208      	str	r2, [sp, #32]
  40e674:	3401      	adds	r4, #1
  40e676:	686a      	ldr	r2, [r5, #4]
  40e678:	3a01      	subs	r2, #1
  40e67a:	2a00      	cmp	r2, #0
  40e67c:	f103 0301 	add.w	r3, r3, #1
  40e680:	606a      	str	r2, [r5, #4]
  40e682:	dcc6      	bgt.n	40e612 <__ssvfscanf_r+0x43a>
  40e684:	4658      	mov	r0, fp
  40e686:	4629      	mov	r1, r5
  40e688:	9303      	str	r3, [sp, #12]
  40e68a:	f8cd c010 	str.w	ip, [sp, #16]
  40e68e:	f005 fe77 	bl	414380 <__ssrefill_r>
  40e692:	9b03      	ldr	r3, [sp, #12]
  40e694:	f8dd c010 	ldr.w	ip, [sp, #16]
  40e698:	2800      	cmp	r0, #0
  40e69a:	d0bc      	beq.n	40e616 <__ssvfscanf_r+0x43e>
  40e69c:	e7be      	b.n	40e61c <__ssvfscanf_r+0x444>
  40e69e:	2e0a      	cmp	r6, #10
  40e6a0:	ddbc      	ble.n	40e61c <__ssvfscanf_r+0x444>
  40e6a2:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40e6a6:	e7ab      	b.n	40e600 <__ssvfscanf_r+0x428>
  40e6a8:	063a      	lsls	r2, r7, #24
  40e6aa:	d5b7      	bpl.n	40e61c <__ssvfscanf_r+0x444>
  40e6ac:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40e6b0:	e7a6      	b.n	40e600 <__ssvfscanf_r+0x428>
  40e6b2:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  40e6b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40e6ba:	d1af      	bne.n	40e61c <__ssvfscanf_r+0x444>
  40e6bc:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40e6c0:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  40e6c4:	2610      	movs	r6, #16
  40e6c6:	e79b      	b.n	40e600 <__ssvfscanf_r+0x428>
  40e6c8:	4aa4      	ldr	r2, [pc, #656]	; (40e95c <__ssvfscanf_r+0x784>)
  40e6ca:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  40e6ce:	2e08      	cmp	r6, #8
  40e6d0:	dce7      	bgt.n	40e6a2 <__ssvfscanf_r+0x4ca>
  40e6d2:	e7a3      	b.n	40e61c <__ssvfscanf_r+0x444>
  40e6d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e6d8:	f047 0710 	orr.w	r7, r7, #16
  40e6dc:	4692      	mov	sl, r2
  40e6de:	e5cc      	b.n	40e27a <__ssvfscanf_r+0xa2>
  40e6e0:	9207      	str	r2, [sp, #28]
  40e6e2:	f047 0701 	orr.w	r7, r7, #1
  40e6e6:	686b      	ldr	r3, [r5, #4]
  40e6e8:	489d      	ldr	r0, [pc, #628]	; (40e960 <__ssvfscanf_r+0x788>)
  40e6ea:	9009      	str	r0, [sp, #36]	; 0x24
  40e6ec:	210a      	movs	r1, #10
  40e6ee:	2b00      	cmp	r3, #0
  40e6f0:	910c      	str	r1, [sp, #48]	; 0x30
  40e6f2:	f04f 0a03 	mov.w	sl, #3
  40e6f6:	f73f ae67 	bgt.w	40e3c8 <__ssvfscanf_r+0x1f0>
  40e6fa:	4630      	mov	r0, r6
  40e6fc:	4629      	mov	r1, r5
  40e6fe:	f005 fe3f 	bl	414380 <__ssrefill_r>
  40e702:	2800      	cmp	r0, #0
  40e704:	f43f ae60 	beq.w	40e3c8 <__ssvfscanf_r+0x1f0>
  40e708:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40e70a:	2c00      	cmp	r4, #0
  40e70c:	f43f ae4b 	beq.w	40e3a6 <__ssvfscanf_r+0x1ce>
  40e710:	89ab      	ldrh	r3, [r5, #12]
  40e712:	4620      	mov	r0, r4
  40e714:	f013 0f40 	tst.w	r3, #64	; 0x40
  40e718:	bf18      	it	ne
  40e71a:	f04f 30ff 	movne.w	r0, #4294967295
  40e71e:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40e722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e726:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40e72a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40e72e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  40e732:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e736:	4692      	mov	sl, r2
  40e738:	e59f      	b.n	40e27a <__ssvfscanf_r+0xa2>
  40e73a:	9207      	str	r2, [sp, #28]
  40e73c:	2310      	movs	r3, #16
  40e73e:	4a89      	ldr	r2, [pc, #548]	; (40e964 <__ssvfscanf_r+0x78c>)
  40e740:	9209      	str	r2, [sp, #36]	; 0x24
  40e742:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40e746:	930c      	str	r3, [sp, #48]	; 0x30
  40e748:	f04f 0a03 	mov.w	sl, #3
  40e74c:	e638      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e74e:	9207      	str	r2, [sp, #28]
  40e750:	f047 0701 	orr.w	r7, r7, #1
  40e754:	4a83      	ldr	r2, [pc, #524]	; (40e964 <__ssvfscanf_r+0x78c>)
  40e756:	9209      	str	r2, [sp, #36]	; 0x24
  40e758:	2308      	movs	r3, #8
  40e75a:	930c      	str	r3, [sp, #48]	; 0x30
  40e75c:	f04f 0a03 	mov.w	sl, #3
  40e760:	e62e      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e762:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e766:	f047 0702 	orr.w	r7, r7, #2
  40e76a:	4692      	mov	sl, r2
  40e76c:	e585      	b.n	40e27a <__ssvfscanf_r+0xa2>
  40e76e:	9207      	str	r2, [sp, #28]
  40e770:	f04f 0a04 	mov.w	sl, #4
  40e774:	e624      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e776:	9207      	str	r2, [sp, #28]
  40e778:	e7ec      	b.n	40e754 <__ssvfscanf_r+0x57c>
  40e77a:	06f9      	lsls	r1, r7, #27
  40e77c:	9207      	str	r2, [sp, #28]
  40e77e:	d462      	bmi.n	40e846 <__ssvfscanf_r+0x66e>
  40e780:	077b      	lsls	r3, r7, #29
  40e782:	f140 8381 	bpl.w	40ee88 <__ssvfscanf_r+0xcb0>
  40e786:	9c06      	ldr	r4, [sp, #24]
  40e788:	6823      	ldr	r3, [r4, #0]
  40e78a:	3404      	adds	r4, #4
  40e78c:	4692      	mov	sl, r2
  40e78e:	f8a3 9000 	strh.w	r9, [r3]
  40e792:	9406      	str	r4, [sp, #24]
  40e794:	e560      	b.n	40e258 <__ssvfscanf_r+0x80>
  40e796:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e79a:	f047 0704 	orr.w	r7, r7, #4
  40e79e:	4692      	mov	sl, r2
  40e7a0:	e56b      	b.n	40e27a <__ssvfscanf_r+0xa2>
  40e7a2:	9207      	str	r2, [sp, #28]
  40e7a4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40e7a8:	f04f 0a00 	mov.w	sl, #0
  40e7ac:	e608      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e7ae:	4611      	mov	r1, r2
  40e7b0:	a816      	add	r0, sp, #88	; 0x58
  40e7b2:	9207      	str	r2, [sp, #28]
  40e7b4:	f004 fa78 	bl	412ca8 <__sccl>
  40e7b8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40e7bc:	9007      	str	r0, [sp, #28]
  40e7be:	f04f 0a01 	mov.w	sl, #1
  40e7c2:	e5fd      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e7c4:	9207      	str	r2, [sp, #28]
  40e7c6:	e78e      	b.n	40e6e6 <__ssvfscanf_r+0x50e>
  40e7c8:	4866      	ldr	r0, [pc, #408]	; (40e964 <__ssvfscanf_r+0x78c>)
  40e7ca:	9207      	str	r2, [sp, #28]
  40e7cc:	210a      	movs	r1, #10
  40e7ce:	9009      	str	r0, [sp, #36]	; 0x24
  40e7d0:	910c      	str	r1, [sp, #48]	; 0x30
  40e7d2:	f04f 0a03 	mov.w	sl, #3
  40e7d6:	e5f3      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e7d8:	9207      	str	r2, [sp, #28]
  40e7da:	f04f 0a02 	mov.w	sl, #2
  40e7de:	e5ef      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e7e0:	4860      	ldr	r0, [pc, #384]	; (40e964 <__ssvfscanf_r+0x78c>)
  40e7e2:	9207      	str	r2, [sp, #28]
  40e7e4:	2110      	movs	r1, #16
  40e7e6:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40e7ea:	9009      	str	r0, [sp, #36]	; 0x24
  40e7ec:	910c      	str	r1, [sp, #48]	; 0x30
  40e7ee:	f04f 0a03 	mov.w	sl, #3
  40e7f2:	e5e5      	b.n	40e3c0 <__ssvfscanf_r+0x1e8>
  40e7f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e7f8:	2b6c      	cmp	r3, #108	; 0x6c
  40e7fa:	f000 8336 	beq.w	40ee6a <__ssvfscanf_r+0xc92>
  40e7fe:	f047 0701 	orr.w	r7, r7, #1
  40e802:	4692      	mov	sl, r2
  40e804:	e539      	b.n	40e27a <__ssvfscanf_r+0xa2>
  40e806:	a814      	add	r0, sp, #80	; 0x50
  40e808:	2100      	movs	r1, #0
  40e80a:	2208      	movs	r2, #8
  40e80c:	900a      	str	r0, [sp, #40]	; 0x28
  40e80e:	f7fe f80d 	bl	40c82c <memset>
  40e812:	f017 0b10 	ands.w	fp, r7, #16
  40e816:	f000 82bd 	beq.w	40ed94 <__ssvfscanf_r+0xbbc>
  40e81a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  40e81e:	2200      	movs	r2, #0
  40e820:	6829      	ldr	r1, [r5, #0]
  40e822:	f8d8 3000 	ldr.w	r3, [r8]
  40e826:	7809      	ldrb	r1, [r1, #0]
  40e828:	440b      	add	r3, r1
  40e82a:	785b      	ldrb	r3, [r3, #1]
  40e82c:	0718      	lsls	r0, r3, #28
  40e82e:	d402      	bmi.n	40e836 <__ssvfscanf_r+0x65e>
  40e830:	2c00      	cmp	r4, #0
  40e832:	f040 8372 	bne.w	40ef1a <__ssvfscanf_r+0xd42>
  40e836:	f1bb 0f00 	cmp.w	fp, #0
  40e83a:	d104      	bne.n	40e846 <__ssvfscanf_r+0x66e>
  40e83c:	f8ca b000 	str.w	fp, [sl]
  40e840:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40e842:	3401      	adds	r4, #1
  40e844:	940b      	str	r4, [sp, #44]	; 0x2c
  40e846:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e84a:	4652      	mov	r2, sl
  40e84c:	e505      	b.n	40e25a <__ssvfscanf_r+0x82>
  40e84e:	440b      	add	r3, r1
  40e850:	9207      	str	r2, [sp, #28]
  40e852:	785b      	ldrb	r3, [r3, #1]
  40e854:	f003 0303 	and.w	r3, r3, #3
  40e858:	2b01      	cmp	r3, #1
  40e85a:	f47f af44 	bne.w	40e6e6 <__ssvfscanf_r+0x50e>
  40e85e:	f047 0701 	orr.w	r7, r7, #1
  40e862:	e740      	b.n	40e6e6 <__ssvfscanf_r+0x50e>
  40e864:	4630      	mov	r0, r6
  40e866:	f002 ff83 	bl	411770 <_localeconv_r>
  40e86a:	1e63      	subs	r3, r4, #1
  40e86c:	6800      	ldr	r0, [r0, #0]
  40e86e:	900f      	str	r0, [sp, #60]	; 0x3c
  40e870:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40e874:	f240 81a5 	bls.w	40ebc2 <__ssvfscanf_r+0x9ea>
  40e878:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  40e87c:	4404      	add	r4, r0
  40e87e:	940d      	str	r4, [sp, #52]	; 0x34
  40e880:	f240 145d 	movw	r4, #349	; 0x15d
  40e884:	f04f 0a00 	mov.w	sl, #0
  40e888:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40e88c:	960e      	str	r6, [sp, #56]	; 0x38
  40e88e:	f8cd c014 	str.w	ip, [sp, #20]
  40e892:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  40e896:	4653      	mov	r3, sl
  40e898:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40e89c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40e8a0:	f8cd a020 	str.w	sl, [sp, #32]
  40e8a4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40e8a8:	46e3      	mov	fp, ip
  40e8aa:	4656      	mov	r6, sl
  40e8ac:	6828      	ldr	r0, [r5, #0]
  40e8ae:	7802      	ldrb	r2, [r0, #0]
  40e8b0:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  40e8b4:	294e      	cmp	r1, #78	; 0x4e
  40e8b6:	f200 8156 	bhi.w	40eb66 <__ssvfscanf_r+0x98e>
  40e8ba:	e8df f011 	tbh	[pc, r1, lsl #1]
  40e8be:	007e      	.short	0x007e
  40e8c0:	007e0154 	.word	0x007e0154
  40e8c4:	01540154 	.word	0x01540154
  40e8c8:	00550072 	.word	0x00550072
  40e8cc:	00550055 	.word	0x00550055
  40e8d0:	00550055 	.word	0x00550055
  40e8d4:	00550055 	.word	0x00550055
  40e8d8:	00550055 	.word	0x00550055
  40e8dc:	01540154 	.word	0x01540154
  40e8e0:	01540154 	.word	0x01540154
  40e8e4:	01540154 	.word	0x01540154
  40e8e8:	014f0154 	.word	0x014f0154
  40e8ec:	01540154 	.word	0x01540154
  40e8f0:	01350154 	.word	0x01350154
  40e8f4:	0154012e 	.word	0x0154012e
  40e8f8:	00a40154 	.word	0x00a40154
  40e8fc:	01540154 	.word	0x01540154
  40e900:	01540154 	.word	0x01540154
  40e904:	0154008f 	.word	0x0154008f
  40e908:	01540154 	.word	0x01540154
  40e90c:	01540154 	.word	0x01540154
  40e910:	01540089 	.word	0x01540089
  40e914:	01540154 	.word	0x01540154
  40e918:	00830154 	.word	0x00830154
  40e91c:	01540154 	.word	0x01540154
  40e920:	01540154 	.word	0x01540154
  40e924:	01540154 	.word	0x01540154
  40e928:	014f0154 	.word	0x014f0154
  40e92c:	01540154 	.word	0x01540154
  40e930:	01350154 	.word	0x01350154
  40e934:	0154012e 	.word	0x0154012e
  40e938:	00a40154 	.word	0x00a40154
  40e93c:	01540154 	.word	0x01540154
  40e940:	01540154 	.word	0x01540154
  40e944:	0154008f 	.word	0x0154008f
  40e948:	01540154 	.word	0x01540154
  40e94c:	01540154 	.word	0x01540154
  40e950:	01540089 	.word	0x01540089
  40e954:	01540154 	.word	0x01540154
  40e958:	00830154 	.word	0x00830154
  40e95c:	00415e74 	.word	0x00415e74
  40e960:	00413ca1 	.word	0x00413ca1
  40e964:	00413f51 	.word	0x00413f51
  40e968:	eb03 010a 	add.w	r1, r3, sl
  40e96c:	b999      	cbnz	r1, 40e996 <__ssvfscanf_r+0x7be>
  40e96e:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  40e972:	f88b 2000 	strb.w	r2, [fp]
  40e976:	f10b 0b01 	add.w	fp, fp, #1
  40e97a:	686a      	ldr	r2, [r5, #4]
  40e97c:	3a01      	subs	r2, #1
  40e97e:	2a00      	cmp	r2, #0
  40e980:	f104 34ff 	add.w	r4, r4, #4294967295
  40e984:	f109 0901 	add.w	r9, r9, #1
  40e988:	606a      	str	r2, [r5, #4]
  40e98a:	f340 80fa 	ble.w	40eb82 <__ssvfscanf_r+0x9aa>
  40e98e:	3001      	adds	r0, #1
  40e990:	6028      	str	r0, [r5, #0]
  40e992:	2c00      	cmp	r4, #0
  40e994:	d18a      	bne.n	40e8ac <__ssvfscanf_r+0x6d4>
  40e996:	9608      	str	r6, [sp, #32]
  40e998:	9c08      	ldr	r4, [sp, #32]
  40e99a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40e99c:	2c00      	cmp	r4, #0
  40e99e:	d041      	beq.n	40ea24 <__ssvfscanf_r+0x84c>
  40e9a0:	e10c      	b.n	40ebbc <__ssvfscanf_r+0x9e4>
  40e9a2:	05f9      	lsls	r1, r7, #23
  40e9a4:	d5e0      	bpl.n	40e968 <__ssvfscanf_r+0x790>
  40e9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e9a8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40e9ac:	3601      	adds	r6, #1
  40e9ae:	2a00      	cmp	r2, #0
  40e9b0:	d0e3      	beq.n	40e97a <__ssvfscanf_r+0x7a2>
  40e9b2:	3a01      	subs	r2, #1
  40e9b4:	920d      	str	r2, [sp, #52]	; 0x34
  40e9b6:	3401      	adds	r4, #1
  40e9b8:	e7df      	b.n	40e97a <__ssvfscanf_r+0x7a2>
  40e9ba:	0639      	lsls	r1, r7, #24
  40e9bc:	d5eb      	bpl.n	40e996 <__ssvfscanf_r+0x7be>
  40e9be:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40e9c2:	e7d6      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40e9c4:	f1ba 0f07 	cmp.w	sl, #7
  40e9c8:	d1e5      	bne.n	40e996 <__ssvfscanf_r+0x7be>
  40e9ca:	f04f 0a08 	mov.w	sl, #8
  40e9ce:	e7d0      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40e9d0:	f1ba 0f06 	cmp.w	sl, #6
  40e9d4:	d1df      	bne.n	40e996 <__ssvfscanf_r+0x7be>
  40e9d6:	f04f 0a07 	mov.w	sl, #7
  40e9da:	e7ca      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40e9dc:	2b00      	cmp	r3, #0
  40e9de:	f040 80e6 	bne.w	40ebae <__ssvfscanf_r+0x9d6>
  40e9e2:	b92e      	cbnz	r6, 40e9f0 <__ssvfscanf_r+0x818>
  40e9e4:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40e9e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40e9ec:	f000 8239 	beq.w	40ee62 <__ssvfscanf_r+0xc8a>
  40e9f0:	f1ba 0f01 	cmp.w	sl, #1
  40e9f4:	d002      	beq.n	40e9fc <__ssvfscanf_r+0x824>
  40e9f6:	f1ba 0f04 	cmp.w	sl, #4
  40e9fa:	d1cc      	bne.n	40e996 <__ssvfscanf_r+0x7be>
  40e9fc:	f10a 0a01 	add.w	sl, sl, #1
  40ea00:	fa5f fa8a 	uxtb.w	sl, sl
  40ea04:	e7b5      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40ea06:	f1ba 0f00 	cmp.w	sl, #0
  40ea0a:	f040 80c7 	bne.w	40eb9c <__ssvfscanf_r+0x9c4>
  40ea0e:	2e00      	cmp	r6, #0
  40ea10:	f040 80d2 	bne.w	40ebb8 <__ssvfscanf_r+0x9e0>
  40ea14:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40ea18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40ea1c:	f000 821c 	beq.w	40ee58 <__ssvfscanf_r+0xc80>
  40ea20:	9608      	str	r6, [sp, #32]
  40ea22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ea24:	f103 3cff 	add.w	ip, r3, #4294967295
  40ea28:	f1bc 0f01 	cmp.w	ip, #1
  40ea2c:	f240 82dc 	bls.w	40efe8 <__ssvfscanf_r+0xe10>
  40ea30:	f10a 32ff 	add.w	r2, sl, #4294967295
  40ea34:	2a06      	cmp	r2, #6
  40ea36:	d822      	bhi.n	40ea7e <__ssvfscanf_r+0x8a6>
  40ea38:	f1ba 0f02 	cmp.w	sl, #2
  40ea3c:	f240 82ad 	bls.w	40ef9a <__ssvfscanf_r+0xdc2>
  40ea40:	f1ba 0f03 	cmp.w	sl, #3
  40ea44:	d01b      	beq.n	40ea7e <__ssvfscanf_r+0x8a6>
  40ea46:	f1aa 0a04 	sub.w	sl, sl, #4
  40ea4a:	fa5f fa8a 	uxtb.w	sl, sl
  40ea4e:	f10b 34ff 	add.w	r4, fp, #4294967295
  40ea52:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40ea56:	ebca 0404 	rsb	r4, sl, r4
  40ea5a:	46da      	mov	sl, fp
  40ea5c:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  40ea60:	4630      	mov	r0, r6
  40ea62:	462a      	mov	r2, r5
  40ea64:	f005 fc4c 	bl	414300 <_sungetc_r>
  40ea68:	45a2      	cmp	sl, r4
  40ea6a:	d1f7      	bne.n	40ea5c <__ssvfscanf_r+0x884>
  40ea6c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40ea70:	f109 39ff 	add.w	r9, r9, #4294967295
  40ea74:	ea6f 020c 	mvn.w	r2, ip
  40ea78:	ebcc 0909 	rsb	r9, ip, r9
  40ea7c:	4493      	add	fp, r2
  40ea7e:	05f8      	lsls	r0, r7, #23
  40ea80:	d51c      	bpl.n	40eabc <__ssvfscanf_r+0x8e4>
  40ea82:	0579      	lsls	r1, r7, #21
  40ea84:	f100 829b 	bmi.w	40efbe <__ssvfscanf_r+0xde6>
  40ea88:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  40ea8c:	2965      	cmp	r1, #101	; 0x65
  40ea8e:	f10b 34ff 	add.w	r4, fp, #4294967295
  40ea92:	f109 3aff 	add.w	sl, r9, #4294967295
  40ea96:	d00b      	beq.n	40eab0 <__ssvfscanf_r+0x8d8>
  40ea98:	2945      	cmp	r1, #69	; 0x45
  40ea9a:	d009      	beq.n	40eab0 <__ssvfscanf_r+0x8d8>
  40ea9c:	4630      	mov	r0, r6
  40ea9e:	462a      	mov	r2, r5
  40eaa0:	f005 fc2e 	bl	414300 <_sungetc_r>
  40eaa4:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  40eaa8:	f1a9 0a02 	sub.w	sl, r9, #2
  40eaac:	f1ab 0402 	sub.w	r4, fp, #2
  40eab0:	4630      	mov	r0, r6
  40eab2:	462a      	mov	r2, r5
  40eab4:	f005 fc24 	bl	414300 <_sungetc_r>
  40eab8:	46d1      	mov	r9, sl
  40eaba:	46a3      	mov	fp, r4
  40eabc:	f017 0210 	ands.w	r2, r7, #16
  40eac0:	f47f aec1 	bne.w	40e846 <__ssvfscanf_r+0x66e>
  40eac4:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  40eac8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40eacc:	f88b 2000 	strb.w	r2, [fp]
  40ead0:	f000 81d3 	beq.w	40ee7a <__ssvfscanf_r+0xca2>
  40ead4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40ead6:	2c00      	cmp	r4, #0
  40ead8:	f040 816e 	bne.w	40edb8 <__ssvfscanf_r+0xbe0>
  40eadc:	2200      	movs	r2, #0
  40eade:	9905      	ldr	r1, [sp, #20]
  40eae0:	4630      	mov	r0, r6
  40eae2:	f004 f93d 	bl	412d60 <_strtod_r>
  40eae6:	07fa      	lsls	r2, r7, #31
  40eae8:	4682      	mov	sl, r0
  40eaea:	468b      	mov	fp, r1
  40eaec:	f100 8132 	bmi.w	40ed54 <__ssvfscanf_r+0xb7c>
  40eaf0:	07bb      	lsls	r3, r7, #30
  40eaf2:	f140 81e8 	bpl.w	40eec6 <__ssvfscanf_r+0xcee>
  40eaf6:	f8dd c018 	ldr.w	ip, [sp, #24]
  40eafa:	f8dc 3000 	ldr.w	r3, [ip]
  40eafe:	f10c 0c04 	add.w	ip, ip, #4
  40eb02:	f8cd c018 	str.w	ip, [sp, #24]
  40eb06:	e9c3 ab00 	strd	sl, fp, [r3]
  40eb0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40eb0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40eb10:	3401      	adds	r4, #1
  40eb12:	940b      	str	r4, [sp, #44]	; 0x2c
  40eb14:	4652      	mov	r2, sl
  40eb16:	f7ff bba0 	b.w	40e25a <__ssvfscanf_r+0x82>
  40eb1a:	f1ba 0f02 	cmp.w	sl, #2
  40eb1e:	f47f af3a 	bne.w	40e996 <__ssvfscanf_r+0x7be>
  40eb22:	f04f 0a03 	mov.w	sl, #3
  40eb26:	e724      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40eb28:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  40eb2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40eb30:	d005      	beq.n	40eb3e <__ssvfscanf_r+0x966>
  40eb32:	0579      	lsls	r1, r7, #21
  40eb34:	f57f af2f 	bpl.w	40e996 <__ssvfscanf_r+0x7be>
  40eb38:	2e00      	cmp	r6, #0
  40eb3a:	f43f af71 	beq.w	40ea20 <__ssvfscanf_r+0x848>
  40eb3e:	05b9      	lsls	r1, r7, #22
  40eb40:	d406      	bmi.n	40eb50 <__ssvfscanf_r+0x978>
  40eb42:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40eb46:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40eb4a:	ebcc 0606 	rsb	r6, ip, r6
  40eb4e:	9610      	str	r6, [sp, #64]	; 0x40
  40eb50:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40eb54:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40eb58:	2600      	movs	r6, #0
  40eb5a:	e70a      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40eb5c:	2b01      	cmp	r3, #1
  40eb5e:	f47f af1a 	bne.w	40e996 <__ssvfscanf_r+0x7be>
  40eb62:	2302      	movs	r3, #2
  40eb64:	e705      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40eb66:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40eb6a:	f89c 1000 	ldrb.w	r1, [ip]
  40eb6e:	4291      	cmp	r1, r2
  40eb70:	f47f af11 	bne.w	40e996 <__ssvfscanf_r+0x7be>
  40eb74:	05b9      	lsls	r1, r7, #22
  40eb76:	f57f af0e 	bpl.w	40e996 <__ssvfscanf_r+0x7be>
  40eb7a:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  40eb7e:	960a      	str	r6, [sp, #40]	; 0x28
  40eb80:	e6f7      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40eb82:	980e      	ldr	r0, [sp, #56]	; 0x38
  40eb84:	9303      	str	r3, [sp, #12]
  40eb86:	4629      	mov	r1, r5
  40eb88:	f005 fbfa 	bl	414380 <__ssrefill_r>
  40eb8c:	9b03      	ldr	r3, [sp, #12]
  40eb8e:	2800      	cmp	r0, #0
  40eb90:	f47f af01 	bne.w	40e996 <__ssvfscanf_r+0x7be>
  40eb94:	2c00      	cmp	r4, #0
  40eb96:	f47f ae89 	bne.w	40e8ac <__ssvfscanf_r+0x6d4>
  40eb9a:	e6fc      	b.n	40e996 <__ssvfscanf_r+0x7be>
  40eb9c:	f1ba 0f03 	cmp.w	sl, #3
  40eba0:	f43f af2c 	beq.w	40e9fc <__ssvfscanf_r+0x824>
  40eba4:	f1ba 0f05 	cmp.w	sl, #5
  40eba8:	f43f af28 	beq.w	40e9fc <__ssvfscanf_r+0x824>
  40ebac:	e6f3      	b.n	40e996 <__ssvfscanf_r+0x7be>
  40ebae:	2b02      	cmp	r3, #2
  40ebb0:	f47f af1e 	bne.w	40e9f0 <__ssvfscanf_r+0x818>
  40ebb4:	2303      	movs	r3, #3
  40ebb6:	e6dc      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40ebb8:	9608      	str	r6, [sp, #32]
  40ebba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ebbc:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  40ebc0:	e730      	b.n	40ea24 <__ssvfscanf_r+0x84c>
  40ebc2:	2200      	movs	r2, #0
  40ebc4:	920d      	str	r2, [sp, #52]	; 0x34
  40ebc6:	e65d      	b.n	40e884 <__ssvfscanf_r+0x6ac>
  40ebc8:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ebcc:	f8dc 7000 	ldr.w	r7, [ip]
  40ebd0:	f10c 0204 	add.w	r2, ip, #4
  40ebd4:	9206      	str	r2, [sp, #24]
  40ebd6:	46ba      	mov	sl, r7
  40ebd8:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40ebdc:	682b      	ldr	r3, [r5, #0]
  40ebde:	781a      	ldrb	r2, [r3, #0]
  40ebe0:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40ebe4:	1c59      	adds	r1, r3, #1
  40ebe6:	b1a2      	cbz	r2, 40ec12 <__ssvfscanf_r+0xa3a>
  40ebe8:	686a      	ldr	r2, [r5, #4]
  40ebea:	6029      	str	r1, [r5, #0]
  40ebec:	3a01      	subs	r2, #1
  40ebee:	606a      	str	r2, [r5, #4]
  40ebf0:	781b      	ldrb	r3, [r3, #0]
  40ebf2:	f80a 3b01 	strb.w	r3, [sl], #1
  40ebf6:	3c01      	subs	r4, #1
  40ebf8:	d00b      	beq.n	40ec12 <__ssvfscanf_r+0xa3a>
  40ebfa:	686b      	ldr	r3, [r5, #4]
  40ebfc:	2b00      	cmp	r3, #0
  40ebfe:	dced      	bgt.n	40ebdc <__ssvfscanf_r+0xa04>
  40ec00:	4630      	mov	r0, r6
  40ec02:	4629      	mov	r1, r5
  40ec04:	f005 fbbc 	bl	414380 <__ssrefill_r>
  40ec08:	2800      	cmp	r0, #0
  40ec0a:	d0e7      	beq.n	40ebdc <__ssvfscanf_r+0xa04>
  40ec0c:	4557      	cmp	r7, sl
  40ec0e:	f43f ad7b 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ec12:	ebba 0707 	subs.w	r7, sl, r7
  40ec16:	f43f ab26 	beq.w	40e266 <__ssvfscanf_r+0x8e>
  40ec1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ec1c:	2300      	movs	r3, #0
  40ec1e:	3401      	adds	r4, #1
  40ec20:	f88a 3000 	strb.w	r3, [sl]
  40ec24:	940b      	str	r4, [sp, #44]	; 0x2c
  40ec26:	44b9      	add	r9, r7
  40ec28:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ec2c:	e4ae      	b.n	40e58c <__ssvfscanf_r+0x3b4>
  40ec2e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ec32:	f8dc 7000 	ldr.w	r7, [ip]
  40ec36:	f10c 0a04 	add.w	sl, ip, #4
  40ec3a:	46bb      	mov	fp, r7
  40ec3c:	682b      	ldr	r3, [r5, #0]
  40ec3e:	f8d8 2000 	ldr.w	r2, [r8]
  40ec42:	7819      	ldrb	r1, [r3, #0]
  40ec44:	440a      	add	r2, r1
  40ec46:	1c59      	adds	r1, r3, #1
  40ec48:	7852      	ldrb	r2, [r2, #1]
  40ec4a:	0710      	lsls	r0, r2, #28
  40ec4c:	d411      	bmi.n	40ec72 <__ssvfscanf_r+0xa9a>
  40ec4e:	686a      	ldr	r2, [r5, #4]
  40ec50:	6029      	str	r1, [r5, #0]
  40ec52:	3a01      	subs	r2, #1
  40ec54:	606a      	str	r2, [r5, #4]
  40ec56:	781b      	ldrb	r3, [r3, #0]
  40ec58:	f80b 3b01 	strb.w	r3, [fp], #1
  40ec5c:	3c01      	subs	r4, #1
  40ec5e:	d008      	beq.n	40ec72 <__ssvfscanf_r+0xa9a>
  40ec60:	686b      	ldr	r3, [r5, #4]
  40ec62:	2b00      	cmp	r3, #0
  40ec64:	dcea      	bgt.n	40ec3c <__ssvfscanf_r+0xa64>
  40ec66:	4630      	mov	r0, r6
  40ec68:	4629      	mov	r1, r5
  40ec6a:	f005 fb89 	bl	414380 <__ssrefill_r>
  40ec6e:	2800      	cmp	r0, #0
  40ec70:	d0e4      	beq.n	40ec3c <__ssvfscanf_r+0xa64>
  40ec72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ec74:	f8cd a018 	str.w	sl, [sp, #24]
  40ec78:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ec7c:	ebc7 070b 	rsb	r7, r7, fp
  40ec80:	2300      	movs	r3, #0
  40ec82:	3401      	adds	r4, #1
  40ec84:	44b9      	add	r9, r7
  40ec86:	940b      	str	r4, [sp, #44]	; 0x2c
  40ec88:	f88b 3000 	strb.w	r3, [fp]
  40ec8c:	4652      	mov	r2, sl
  40ec8e:	f7ff bae4 	b.w	40e25a <__ssvfscanf_r+0x82>
  40ec92:	ab14      	add	r3, sp, #80	; 0x50
  40ec94:	4618      	mov	r0, r3
  40ec96:	2100      	movs	r1, #0
  40ec98:	2208      	movs	r2, #8
  40ec9a:	930a      	str	r3, [sp, #40]	; 0x28
  40ec9c:	f7fd fdc6 	bl	40c82c <memset>
  40eca0:	f017 0710 	ands.w	r7, r7, #16
  40eca4:	970d      	str	r7, [sp, #52]	; 0x34
  40eca6:	d06c      	beq.n	40ed82 <__ssvfscanf_r+0xbaa>
  40eca8:	f04f 0a00 	mov.w	sl, #0
  40ecac:	9608      	str	r6, [sp, #32]
  40ecae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40ecb0:	f8cd 9014 	str.w	r9, [sp, #20]
  40ecb4:	f04f 0b00 	mov.w	fp, #0
  40ecb8:	af56      	add	r7, sp, #344	; 0x158
  40ecba:	f002 fd53 	bl	411764 <__locale_mb_cur_max>
  40ecbe:	4558      	cmp	r0, fp
  40ecc0:	f43f ad22 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ecc4:	682b      	ldr	r3, [r5, #0]
  40ecc6:	6869      	ldr	r1, [r5, #4]
  40ecc8:	f813 eb01 	ldrb.w	lr, [r3], #1
  40eccc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ecce:	602b      	str	r3, [r5, #0]
  40ecd0:	3901      	subs	r1, #1
  40ecd2:	f10b 0901 	add.w	r9, fp, #1
  40ecd6:	9000      	str	r0, [sp, #0]
  40ecd8:	464b      	mov	r3, r9
  40ecda:	6069      	str	r1, [r5, #4]
  40ecdc:	9808      	ldr	r0, [sp, #32]
  40ecde:	f807 e00b 	strb.w	lr, [r7, fp]
  40ece2:	4651      	mov	r1, sl
  40ece4:	463a      	mov	r2, r7
  40ece6:	f003 f86f 	bl	411dc8 <_mbrtowc_r>
  40ecea:	1c43      	adds	r3, r0, #1
  40ecec:	f43f ad0c 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ecf0:	2800      	cmp	r0, #0
  40ecf2:	d177      	bne.n	40ede4 <__ssvfscanf_r+0xc0c>
  40ecf4:	b90e      	cbnz	r6, 40ecfa <__ssvfscanf_r+0xb22>
  40ecf6:	f8ca 6000 	str.w	r6, [sl]
  40ecfa:	9905      	ldr	r1, [sp, #20]
  40ecfc:	4449      	add	r1, r9
  40ecfe:	9105      	str	r1, [sp, #20]
  40ed00:	3c01      	subs	r4, #1
  40ed02:	2e00      	cmp	r6, #0
  40ed04:	d172      	bne.n	40edec <__ssvfscanf_r+0xc14>
  40ed06:	f10a 0a04 	add.w	sl, sl, #4
  40ed0a:	46b3      	mov	fp, r6
  40ed0c:	686b      	ldr	r3, [r5, #4]
  40ed0e:	2b00      	cmp	r3, #0
  40ed10:	dd2a      	ble.n	40ed68 <__ssvfscanf_r+0xb90>
  40ed12:	2c00      	cmp	r4, #0
  40ed14:	d1d1      	bne.n	40ecba <__ssvfscanf_r+0xae2>
  40ed16:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ed1a:	9e08      	ldr	r6, [sp, #32]
  40ed1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40ed1e:	2c00      	cmp	r4, #0
  40ed20:	f43f ad8e 	beq.w	40e840 <__ssvfscanf_r+0x668>
  40ed24:	e58f      	b.n	40e846 <__ssvfscanf_r+0x66e>
  40ed26:	4622      	mov	r2, r4
  40ed28:	f88a 4000 	strb.w	r4, [sl]
  40ed2c:	4630      	mov	r0, r6
  40ed2e:	9905      	ldr	r1, [sp, #20]
  40ed30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ed32:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ed34:	47a0      	blx	r4
  40ed36:	06ba      	lsls	r2, r7, #26
  40ed38:	d535      	bpl.n	40eda6 <__ssvfscanf_r+0xbce>
  40ed3a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ed3e:	f8dc 3000 	ldr.w	r3, [ip]
  40ed42:	f10c 0c04 	add.w	ip, ip, #4
  40ed46:	f8cd c018 	str.w	ip, [sp, #24]
  40ed4a:	6018      	str	r0, [r3, #0]
  40ed4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ed4e:	3401      	adds	r4, #1
  40ed50:	940b      	str	r4, [sp, #44]	; 0x2c
  40ed52:	e476      	b.n	40e642 <__ssvfscanf_r+0x46a>
  40ed54:	9c06      	ldr	r4, [sp, #24]
  40ed56:	6823      	ldr	r3, [r4, #0]
  40ed58:	3404      	adds	r4, #4
  40ed5a:	9406      	str	r4, [sp, #24]
  40ed5c:	e9c3 ab00 	strd	sl, fp, [r3]
  40ed60:	e6d3      	b.n	40eb0a <__ssvfscanf_r+0x932>
  40ed62:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40ed66:	e44b      	b.n	40e600 <__ssvfscanf_r+0x428>
  40ed68:	9808      	ldr	r0, [sp, #32]
  40ed6a:	4629      	mov	r1, r5
  40ed6c:	f005 fb08 	bl	414380 <__ssrefill_r>
  40ed70:	2800      	cmp	r0, #0
  40ed72:	d0ce      	beq.n	40ed12 <__ssvfscanf_r+0xb3a>
  40ed74:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ed78:	9e08      	ldr	r6, [sp, #32]
  40ed7a:	f1bb 0f00 	cmp.w	fp, #0
  40ed7e:	d0cd      	beq.n	40ed1c <__ssvfscanf_r+0xb44>
  40ed80:	e4c2      	b.n	40e708 <__ssvfscanf_r+0x530>
  40ed82:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ed86:	f8dc a000 	ldr.w	sl, [ip]
  40ed8a:	f10c 0c04 	add.w	ip, ip, #4
  40ed8e:	f8cd c018 	str.w	ip, [sp, #24]
  40ed92:	e78b      	b.n	40ecac <__ssvfscanf_r+0xad4>
  40ed94:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ed98:	f8dc a000 	ldr.w	sl, [ip]
  40ed9c:	f10c 0c04 	add.w	ip, ip, #4
  40eda0:	f8cd c018 	str.w	ip, [sp, #24]
  40eda4:	e53b      	b.n	40e81e <__ssvfscanf_r+0x646>
  40eda6:	077b      	lsls	r3, r7, #29
  40eda8:	f140 809b 	bpl.w	40eee2 <__ssvfscanf_r+0xd0a>
  40edac:	9c06      	ldr	r4, [sp, #24]
  40edae:	6823      	ldr	r3, [r4, #0]
  40edb0:	3404      	adds	r4, #4
  40edb2:	9406      	str	r4, [sp, #24]
  40edb4:	8018      	strh	r0, [r3, #0]
  40edb6:	e7c9      	b.n	40ed4c <__ssvfscanf_r+0xb74>
  40edb8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40edbc:	4630      	mov	r0, r6
  40edbe:	f10c 0101 	add.w	r1, ip, #1
  40edc2:	230a      	movs	r3, #10
  40edc4:	f004 ff6c 	bl	413ca0 <_strtol_r>
  40edc8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  40edcc:	1b02      	subs	r2, r0, r4
  40edce:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  40edd2:	458b      	cmp	fp, r1
  40edd4:	bf28      	it	cs
  40edd6:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  40edda:	4658      	mov	r0, fp
  40eddc:	499b      	ldr	r1, [pc, #620]	; (40f04c <__ssvfscanf_r+0xe74>)
  40edde:	f7fd fe2d 	bl	40ca3c <sprintf>
  40ede2:	e67b      	b.n	40eadc <__ssvfscanf_r+0x904>
  40ede4:	3002      	adds	r0, #2
  40ede6:	d188      	bne.n	40ecfa <__ssvfscanf_r+0xb22>
  40ede8:	46cb      	mov	fp, r9
  40edea:	e78f      	b.n	40ed0c <__ssvfscanf_r+0xb34>
  40edec:	f04f 0b00 	mov.w	fp, #0
  40edf0:	e78c      	b.n	40ed0c <__ssvfscanf_r+0xb34>
  40edf2:	2f00      	cmp	r7, #0
  40edf4:	f43f ac88 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40edf8:	44b9      	add	r9, r7
  40edfa:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40edfe:	f7ff bbc5 	b.w	40e58c <__ssvfscanf_r+0x3b4>
  40ee02:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ee06:	4623      	mov	r3, r4
  40ee08:	f8dc 1000 	ldr.w	r1, [ip]
  40ee0c:	9500      	str	r5, [sp, #0]
  40ee0e:	4630      	mov	r0, r6
  40ee10:	2201      	movs	r2, #1
  40ee12:	f005 fad3 	bl	4143bc <_sfread_r>
  40ee16:	9c06      	ldr	r4, [sp, #24]
  40ee18:	1d23      	adds	r3, r4, #4
  40ee1a:	2800      	cmp	r0, #0
  40ee1c:	f43f ac74 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ee20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ee22:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ee26:	9306      	str	r3, [sp, #24]
  40ee28:	3401      	adds	r4, #1
  40ee2a:	4481      	add	r9, r0
  40ee2c:	940b      	str	r4, [sp, #44]	; 0x2c
  40ee2e:	4652      	mov	r2, sl
  40ee30:	f7ff ba13 	b.w	40e25a <__ssvfscanf_r+0x82>
  40ee34:	4630      	mov	r0, r6
  40ee36:	4629      	mov	r1, r5
  40ee38:	f005 faa2 	bl	414380 <__ssrefill_r>
  40ee3c:	2800      	cmp	r0, #0
  40ee3e:	f43f aaa2 	beq.w	40e386 <__ssvfscanf_r+0x1ae>
  40ee42:	e461      	b.n	40e708 <__ssvfscanf_r+0x530>
  40ee44:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40ee48:	4630      	mov	r0, r6
  40ee4a:	462a      	mov	r2, r5
  40ee4c:	f005 fa58 	bl	414300 <_sungetc_r>
  40ee50:	f10a 3aff 	add.w	sl, sl, #4294967295
  40ee54:	f7ff bbec 	b.w	40e630 <__ssvfscanf_r+0x458>
  40ee58:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40ee5c:	f04f 0a01 	mov.w	sl, #1
  40ee60:	e587      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40ee62:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40ee66:	2301      	movs	r3, #1
  40ee68:	e583      	b.n	40e972 <__ssvfscanf_r+0x79a>
  40ee6a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40ee6e:	f047 0702 	orr.w	r7, r7, #2
  40ee72:	f10a 0a02 	add.w	sl, sl, #2
  40ee76:	f7ff ba00 	b.w	40e27a <__ssvfscanf_r+0xa2>
  40ee7a:	9b08      	ldr	r3, [sp, #32]
  40ee7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ee7e:	1b19      	subs	r1, r3, r4
  40ee80:	424a      	negs	r2, r1
  40ee82:	2900      	cmp	r1, #0
  40ee84:	d1a3      	bne.n	40edce <__ssvfscanf_r+0xbf6>
  40ee86:	e629      	b.n	40eadc <__ssvfscanf_r+0x904>
  40ee88:	07fc      	lsls	r4, r7, #31
  40ee8a:	d40e      	bmi.n	40eeaa <__ssvfscanf_r+0xcd2>
  40ee8c:	07b8      	lsls	r0, r7, #30
  40ee8e:	d50c      	bpl.n	40eeaa <__ssvfscanf_r+0xcd2>
  40ee90:	9c06      	ldr	r4, [sp, #24]
  40ee92:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ee96:	6821      	ldr	r1, [r4, #0]
  40ee98:	464a      	mov	r2, r9
  40ee9a:	ea4f 73e9 	mov.w	r3, r9, asr #31
  40ee9e:	3404      	adds	r4, #4
  40eea0:	9406      	str	r4, [sp, #24]
  40eea2:	e9c1 2300 	strd	r2, r3, [r1]
  40eea6:	f7ff b9d7 	b.w	40e258 <__ssvfscanf_r+0x80>
  40eeaa:	f8dd c018 	ldr.w	ip, [sp, #24]
  40eeae:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40eeb2:	f8dc 3000 	ldr.w	r3, [ip]
  40eeb6:	f10c 0c04 	add.w	ip, ip, #4
  40eeba:	f8c3 9000 	str.w	r9, [r3]
  40eebe:	f8cd c018 	str.w	ip, [sp, #24]
  40eec2:	f7ff b9c9 	b.w	40e258 <__ssvfscanf_r+0x80>
  40eec6:	9c06      	ldr	r4, [sp, #24]
  40eec8:	1d27      	adds	r7, r4, #4
  40eeca:	6824      	ldr	r4, [r4, #0]
  40eecc:	f003 feb2 	bl	412c34 <__fpclassifyd>
  40eed0:	2800      	cmp	r0, #0
  40eed2:	d056      	beq.n	40ef82 <__ssvfscanf_r+0xdaa>
  40eed4:	4650      	mov	r0, sl
  40eed6:	4659      	mov	r1, fp
  40eed8:	f006 fcb4 	bl	415844 <__aeabi_d2f>
  40eedc:	9706      	str	r7, [sp, #24]
  40eede:	6020      	str	r0, [r4, #0]
  40eee0:	e613      	b.n	40eb0a <__ssvfscanf_r+0x932>
  40eee2:	f017 0201 	ands.w	r2, r7, #1
  40eee6:	f47f af28 	bne.w	40ed3a <__ssvfscanf_r+0xb62>
  40eeea:	07bc      	lsls	r4, r7, #30
  40eeec:	f140 8097 	bpl.w	40f01e <__ssvfscanf_r+0xe46>
  40eef0:	4b57      	ldr	r3, [pc, #348]	; (40f050 <__ssvfscanf_r+0xe78>)
  40eef2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40eef4:	9905      	ldr	r1, [sp, #20]
  40eef6:	429c      	cmp	r4, r3
  40eef8:	4630      	mov	r0, r6
  40eefa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40eefc:	f000 80a2 	beq.w	40f044 <__ssvfscanf_r+0xe6c>
  40ef00:	f004 ff58 	bl	413db4 <_strtoll_r>
  40ef04:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ef08:	f8dc 3000 	ldr.w	r3, [ip]
  40ef0c:	f10c 0c04 	add.w	ip, ip, #4
  40ef10:	f8cd c018 	str.w	ip, [sp, #24]
  40ef14:	e9c3 0100 	strd	r0, r1, [r3]
  40ef18:	e718      	b.n	40ed4c <__ssvfscanf_r+0xb74>
  40ef1a:	9204      	str	r2, [sp, #16]
  40ef1c:	f002 fc22 	bl	411764 <__locale_mb_cur_max>
  40ef20:	9a04      	ldr	r2, [sp, #16]
  40ef22:	4290      	cmp	r0, r2
  40ef24:	f43f abf0 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ef28:	682b      	ldr	r3, [r5, #0]
  40ef2a:	6869      	ldr	r1, [r5, #4]
  40ef2c:	f813 eb01 	ldrb.w	lr, [r3], #1
  40ef30:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ef32:	602b      	str	r3, [r5, #0]
  40ef34:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40ef38:	1c57      	adds	r7, r2, #1
  40ef3a:	3901      	subs	r1, #1
  40ef3c:	9000      	str	r0, [sp, #0]
  40ef3e:	463b      	mov	r3, r7
  40ef40:	6069      	str	r1, [r5, #4]
  40ef42:	f80c e002 	strb.w	lr, [ip, r2]
  40ef46:	4630      	mov	r0, r6
  40ef48:	4651      	mov	r1, sl
  40ef4a:	4662      	mov	r2, ip
  40ef4c:	f002 ff3c 	bl	411dc8 <_mbrtowc_r>
  40ef50:	1c43      	adds	r3, r0, #1
  40ef52:	f43f abd9 	beq.w	40e708 <__ssvfscanf_r+0x530>
  40ef56:	b9c8      	cbnz	r0, 40ef8c <__ssvfscanf_r+0xdb4>
  40ef58:	f8ca 0000 	str.w	r0, [sl]
  40ef5c:	f002 fbf0 	bl	411740 <iswspace>
  40ef60:	2800      	cmp	r0, #0
  40ef62:	d053      	beq.n	40f00c <__ssvfscanf_r+0xe34>
  40ef64:	2f00      	cmp	r7, #0
  40ef66:	f43f ac66 	beq.w	40e836 <__ssvfscanf_r+0x65e>
  40ef6a:	ac56      	add	r4, sp, #344	; 0x158
  40ef6c:	443c      	add	r4, r7
  40ef6e:	3f01      	subs	r7, #1
  40ef70:	4630      	mov	r0, r6
  40ef72:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40ef76:	462a      	mov	r2, r5
  40ef78:	f005 f9c2 	bl	414300 <_sungetc_r>
  40ef7c:	2f00      	cmp	r7, #0
  40ef7e:	d1f6      	bne.n	40ef6e <__ssvfscanf_r+0xd96>
  40ef80:	e459      	b.n	40e836 <__ssvfscanf_r+0x65e>
  40ef82:	f003 fec9 	bl	412d18 <nanf>
  40ef86:	9706      	str	r7, [sp, #24]
  40ef88:	6020      	str	r0, [r4, #0]
  40ef8a:	e5be      	b.n	40eb0a <__ssvfscanf_r+0x932>
  40ef8c:	3002      	adds	r0, #2
  40ef8e:	d128      	bne.n	40efe2 <__ssvfscanf_r+0xe0a>
  40ef90:	686b      	ldr	r3, [r5, #4]
  40ef92:	2b00      	cmp	r3, #0
  40ef94:	dd4b      	ble.n	40f02e <__ssvfscanf_r+0xe56>
  40ef96:	463a      	mov	r2, r7
  40ef98:	e442      	b.n	40e820 <__ssvfscanf_r+0x648>
  40ef9a:	9c05      	ldr	r4, [sp, #20]
  40ef9c:	45a3      	cmp	fp, r4
  40ef9e:	bf88      	it	hi
  40efa0:	465c      	movhi	r4, fp
  40efa2:	f67f a960 	bls.w	40e266 <__ssvfscanf_r+0x8e>
  40efa6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40efaa:	980e      	ldr	r0, [sp, #56]	; 0x38
  40efac:	462a      	mov	r2, r5
  40efae:	f005 f9a7 	bl	414300 <_sungetc_r>
  40efb2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40efb6:	454c      	cmp	r4, r9
  40efb8:	d1f5      	bne.n	40efa6 <__ssvfscanf_r+0xdce>
  40efba:	f7ff b954 	b.w	40e266 <__ssvfscanf_r+0x8e>
  40efbe:	f8dd c014 	ldr.w	ip, [sp, #20]
  40efc2:	45e3      	cmp	fp, ip
  40efc4:	f67f a94f 	bls.w	40e266 <__ssvfscanf_r+0x8e>
  40efc8:	465c      	mov	r4, fp
  40efca:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40efce:	980e      	ldr	r0, [sp, #56]	; 0x38
  40efd0:	462a      	mov	r2, r5
  40efd2:	f005 f995 	bl	414300 <_sungetc_r>
  40efd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40efda:	454c      	cmp	r4, r9
  40efdc:	d1f5      	bne.n	40efca <__ssvfscanf_r+0xdf2>
  40efde:	f7ff b942 	b.w	40e266 <__ssvfscanf_r+0x8e>
  40efe2:	f8da 0000 	ldr.w	r0, [sl]
  40efe6:	e7b9      	b.n	40ef5c <__ssvfscanf_r+0xd84>
  40efe8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40efec:	45cb      	cmp	fp, r9
  40efee:	f67f a93a 	bls.w	40e266 <__ssvfscanf_r+0x8e>
  40eff2:	465c      	mov	r4, fp
  40eff4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40eff8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40effa:	462a      	mov	r2, r5
  40effc:	f005 f980 	bl	414300 <_sungetc_r>
  40f000:	f8dd c014 	ldr.w	ip, [sp, #20]
  40f004:	4564      	cmp	r4, ip
  40f006:	d1f5      	bne.n	40eff4 <__ssvfscanf_r+0xe1c>
  40f008:	f7ff b92d 	b.w	40e266 <__ssvfscanf_r+0x8e>
  40f00c:	44b9      	add	r9, r7
  40f00e:	3c01      	subs	r4, #1
  40f010:	f1bb 0f00 	cmp.w	fp, #0
  40f014:	d109      	bne.n	40f02a <__ssvfscanf_r+0xe52>
  40f016:	f10a 0a04 	add.w	sl, sl, #4
  40f01a:	465f      	mov	r7, fp
  40f01c:	e7b8      	b.n	40ef90 <__ssvfscanf_r+0xdb8>
  40f01e:	9c06      	ldr	r4, [sp, #24]
  40f020:	6823      	ldr	r3, [r4, #0]
  40f022:	3404      	adds	r4, #4
  40f024:	9406      	str	r4, [sp, #24]
  40f026:	6018      	str	r0, [r3, #0]
  40f028:	e690      	b.n	40ed4c <__ssvfscanf_r+0xb74>
  40f02a:	4607      	mov	r7, r0
  40f02c:	e7b0      	b.n	40ef90 <__ssvfscanf_r+0xdb8>
  40f02e:	4630      	mov	r0, r6
  40f030:	4629      	mov	r1, r5
  40f032:	f005 f9a5 	bl	414380 <__ssrefill_r>
  40f036:	2800      	cmp	r0, #0
  40f038:	d0ad      	beq.n	40ef96 <__ssvfscanf_r+0xdbe>
  40f03a:	2f00      	cmp	r7, #0
  40f03c:	f47f ab64 	bne.w	40e708 <__ssvfscanf_r+0x530>
  40f040:	f7ff bbf9 	b.w	40e836 <__ssvfscanf_r+0x65e>
  40f044:	f005 f814 	bl	414070 <_strtoull_r>
  40f048:	e75c      	b.n	40ef04 <__ssvfscanf_r+0xd2c>
  40f04a:	bf00      	nop
  40f04c:	00415e98 	.word	0x00415e98
  40f050:	00413f51 	.word	0x00413f51

0040f054 <__sprint_r.part.0>:
  40f054:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40f056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f05a:	049c      	lsls	r4, r3, #18
  40f05c:	460e      	mov	r6, r1
  40f05e:	4680      	mov	r8, r0
  40f060:	4691      	mov	r9, r2
  40f062:	d52a      	bpl.n	40f0ba <__sprint_r.part.0+0x66>
  40f064:	6893      	ldr	r3, [r2, #8]
  40f066:	6812      	ldr	r2, [r2, #0]
  40f068:	f102 0a08 	add.w	sl, r2, #8
  40f06c:	b31b      	cbz	r3, 40f0b6 <__sprint_r.part.0+0x62>
  40f06e:	e91a 00a0 	ldmdb	sl, {r5, r7}
  40f072:	08bf      	lsrs	r7, r7, #2
  40f074:	d017      	beq.n	40f0a6 <__sprint_r.part.0+0x52>
  40f076:	3d04      	subs	r5, #4
  40f078:	2400      	movs	r4, #0
  40f07a:	e001      	b.n	40f080 <__sprint_r.part.0+0x2c>
  40f07c:	42a7      	cmp	r7, r4
  40f07e:	d010      	beq.n	40f0a2 <__sprint_r.part.0+0x4e>
  40f080:	4640      	mov	r0, r8
  40f082:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40f086:	4632      	mov	r2, r6
  40f088:	f002 f82e 	bl	4110e8 <_fputwc_r>
  40f08c:	1c43      	adds	r3, r0, #1
  40f08e:	f104 0401 	add.w	r4, r4, #1
  40f092:	d1f3      	bne.n	40f07c <__sprint_r.part.0+0x28>
  40f094:	2300      	movs	r3, #0
  40f096:	f8c9 3008 	str.w	r3, [r9, #8]
  40f09a:	f8c9 3004 	str.w	r3, [r9, #4]
  40f09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f0a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40f0a6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  40f0aa:	f8c9 3008 	str.w	r3, [r9, #8]
  40f0ae:	f10a 0a08 	add.w	sl, sl, #8
  40f0b2:	2b00      	cmp	r3, #0
  40f0b4:	d1db      	bne.n	40f06e <__sprint_r.part.0+0x1a>
  40f0b6:	2000      	movs	r0, #0
  40f0b8:	e7ec      	b.n	40f094 <__sprint_r.part.0+0x40>
  40f0ba:	f002 f98f 	bl	4113dc <__sfvwrite_r>
  40f0be:	2300      	movs	r3, #0
  40f0c0:	f8c9 3008 	str.w	r3, [r9, #8]
  40f0c4:	f8c9 3004 	str.w	r3, [r9, #4]
  40f0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040f0cc <_vfiprintf_r>:
  40f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f0d0:	b0b1      	sub	sp, #196	; 0xc4
  40f0d2:	461c      	mov	r4, r3
  40f0d4:	9102      	str	r1, [sp, #8]
  40f0d6:	4690      	mov	r8, r2
  40f0d8:	9308      	str	r3, [sp, #32]
  40f0da:	9006      	str	r0, [sp, #24]
  40f0dc:	b118      	cbz	r0, 40f0e6 <_vfiprintf_r+0x1a>
  40f0de:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f0e0:	2b00      	cmp	r3, #0
  40f0e2:	f000 80e8 	beq.w	40f2b6 <_vfiprintf_r+0x1ea>
  40f0e6:	9d02      	ldr	r5, [sp, #8]
  40f0e8:	89ab      	ldrh	r3, [r5, #12]
  40f0ea:	b29a      	uxth	r2, r3
  40f0ec:	0490      	lsls	r0, r2, #18
  40f0ee:	d407      	bmi.n	40f100 <_vfiprintf_r+0x34>
  40f0f0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40f0f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40f0f6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40f0fa:	81ab      	strh	r3, [r5, #12]
  40f0fc:	b29a      	uxth	r2, r3
  40f0fe:	6669      	str	r1, [r5, #100]	; 0x64
  40f100:	0711      	lsls	r1, r2, #28
  40f102:	f140 80b7 	bpl.w	40f274 <_vfiprintf_r+0x1a8>
  40f106:	f8dd b008 	ldr.w	fp, [sp, #8]
  40f10a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40f10e:	2b00      	cmp	r3, #0
  40f110:	f000 80b0 	beq.w	40f274 <_vfiprintf_r+0x1a8>
  40f114:	f002 021a 	and.w	r2, r2, #26
  40f118:	2a0a      	cmp	r2, #10
  40f11a:	f000 80b7 	beq.w	40f28c <_vfiprintf_r+0x1c0>
  40f11e:	2300      	movs	r3, #0
  40f120:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40f124:	930a      	str	r3, [sp, #40]	; 0x28
  40f126:	9315      	str	r3, [sp, #84]	; 0x54
  40f128:	9314      	str	r3, [sp, #80]	; 0x50
  40f12a:	9309      	str	r3, [sp, #36]	; 0x24
  40f12c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  40f130:	464e      	mov	r6, r9
  40f132:	f898 3000 	ldrb.w	r3, [r8]
  40f136:	2b00      	cmp	r3, #0
  40f138:	f000 84c4 	beq.w	40fac4 <_vfiprintf_r+0x9f8>
  40f13c:	2b25      	cmp	r3, #37	; 0x25
  40f13e:	f000 84c1 	beq.w	40fac4 <_vfiprintf_r+0x9f8>
  40f142:	f108 0201 	add.w	r2, r8, #1
  40f146:	e001      	b.n	40f14c <_vfiprintf_r+0x80>
  40f148:	2b25      	cmp	r3, #37	; 0x25
  40f14a:	d004      	beq.n	40f156 <_vfiprintf_r+0x8a>
  40f14c:	4614      	mov	r4, r2
  40f14e:	3201      	adds	r2, #1
  40f150:	7823      	ldrb	r3, [r4, #0]
  40f152:	2b00      	cmp	r3, #0
  40f154:	d1f8      	bne.n	40f148 <_vfiprintf_r+0x7c>
  40f156:	ebc8 0504 	rsb	r5, r8, r4
  40f15a:	b195      	cbz	r5, 40f182 <_vfiprintf_r+0xb6>
  40f15c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f160:	f8c6 8000 	str.w	r8, [r6]
  40f164:	3301      	adds	r3, #1
  40f166:	442a      	add	r2, r5
  40f168:	2b07      	cmp	r3, #7
  40f16a:	6075      	str	r5, [r6, #4]
  40f16c:	9215      	str	r2, [sp, #84]	; 0x54
  40f16e:	9314      	str	r3, [sp, #80]	; 0x50
  40f170:	dd7b      	ble.n	40f26a <_vfiprintf_r+0x19e>
  40f172:	2a00      	cmp	r2, #0
  40f174:	f040 84d4 	bne.w	40fb20 <_vfiprintf_r+0xa54>
  40f178:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f17a:	9214      	str	r2, [sp, #80]	; 0x50
  40f17c:	4428      	add	r0, r5
  40f17e:	464e      	mov	r6, r9
  40f180:	9009      	str	r0, [sp, #36]	; 0x24
  40f182:	7823      	ldrb	r3, [r4, #0]
  40f184:	2b00      	cmp	r3, #0
  40f186:	f000 83e9 	beq.w	40f95c <_vfiprintf_r+0x890>
  40f18a:	2100      	movs	r1, #0
  40f18c:	f04f 0200 	mov.w	r2, #0
  40f190:	f04f 3cff 	mov.w	ip, #4294967295
  40f194:	7863      	ldrb	r3, [r4, #1]
  40f196:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  40f19a:	9104      	str	r1, [sp, #16]
  40f19c:	468a      	mov	sl, r1
  40f19e:	f104 0801 	add.w	r8, r4, #1
  40f1a2:	4608      	mov	r0, r1
  40f1a4:	4665      	mov	r5, ip
  40f1a6:	f108 0801 	add.w	r8, r8, #1
  40f1aa:	f1a3 0220 	sub.w	r2, r3, #32
  40f1ae:	2a58      	cmp	r2, #88	; 0x58
  40f1b0:	f200 82d5 	bhi.w	40f75e <_vfiprintf_r+0x692>
  40f1b4:	e8df f012 	tbh	[pc, r2, lsl #1]
  40f1b8:	02d302c7 	.word	0x02d302c7
  40f1bc:	02ce02d3 	.word	0x02ce02d3
  40f1c0:	02d302d3 	.word	0x02d302d3
  40f1c4:	02d302d3 	.word	0x02d302d3
  40f1c8:	02d302d3 	.word	0x02d302d3
  40f1cc:	028b027e 	.word	0x028b027e
  40f1d0:	008402d3 	.word	0x008402d3
  40f1d4:	02d3028f 	.word	0x02d3028f
  40f1d8:	0194012b 	.word	0x0194012b
  40f1dc:	01940194 	.word	0x01940194
  40f1e0:	01940194 	.word	0x01940194
  40f1e4:	01940194 	.word	0x01940194
  40f1e8:	01940194 	.word	0x01940194
  40f1ec:	02d302d3 	.word	0x02d302d3
  40f1f0:	02d302d3 	.word	0x02d302d3
  40f1f4:	02d302d3 	.word	0x02d302d3
  40f1f8:	02d302d3 	.word	0x02d302d3
  40f1fc:	02d302d3 	.word	0x02d302d3
  40f200:	02d30130 	.word	0x02d30130
  40f204:	02d302d3 	.word	0x02d302d3
  40f208:	02d302d3 	.word	0x02d302d3
  40f20c:	02d302d3 	.word	0x02d302d3
  40f210:	02d302d3 	.word	0x02d302d3
  40f214:	017902d3 	.word	0x017902d3
  40f218:	02d302d3 	.word	0x02d302d3
  40f21c:	02d302d3 	.word	0x02d302d3
  40f220:	01a202d3 	.word	0x01a202d3
  40f224:	02d302d3 	.word	0x02d302d3
  40f228:	02d301bd 	.word	0x02d301bd
  40f22c:	02d302d3 	.word	0x02d302d3
  40f230:	02d302d3 	.word	0x02d302d3
  40f234:	02d302d3 	.word	0x02d302d3
  40f238:	02d302d3 	.word	0x02d302d3
  40f23c:	01e202d3 	.word	0x01e202d3
  40f240:	02d301f8 	.word	0x02d301f8
  40f244:	02d302d3 	.word	0x02d302d3
  40f248:	01f80214 	.word	0x01f80214
  40f24c:	02d302d3 	.word	0x02d302d3
  40f250:	02d30219 	.word	0x02d30219
  40f254:	00890226 	.word	0x00890226
  40f258:	02790264 	.word	0x02790264
  40f25c:	023802d3 	.word	0x023802d3
  40f260:	011902d3 	.word	0x011902d3
  40f264:	02d302d3 	.word	0x02d302d3
  40f268:	02ab      	.short	0x02ab
  40f26a:	3608      	adds	r6, #8
  40f26c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f26e:	4428      	add	r0, r5
  40f270:	9009      	str	r0, [sp, #36]	; 0x24
  40f272:	e786      	b.n	40f182 <_vfiprintf_r+0xb6>
  40f274:	9806      	ldr	r0, [sp, #24]
  40f276:	9902      	ldr	r1, [sp, #8]
  40f278:	f000 fda2 	bl	40fdc0 <__swsetup_r>
  40f27c:	b9b0      	cbnz	r0, 40f2ac <_vfiprintf_r+0x1e0>
  40f27e:	9d02      	ldr	r5, [sp, #8]
  40f280:	89aa      	ldrh	r2, [r5, #12]
  40f282:	f002 021a 	and.w	r2, r2, #26
  40f286:	2a0a      	cmp	r2, #10
  40f288:	f47f af49 	bne.w	40f11e <_vfiprintf_r+0x52>
  40f28c:	f8dd b008 	ldr.w	fp, [sp, #8]
  40f290:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40f294:	2b00      	cmp	r3, #0
  40f296:	f6ff af42 	blt.w	40f11e <_vfiprintf_r+0x52>
  40f29a:	9806      	ldr	r0, [sp, #24]
  40f29c:	4659      	mov	r1, fp
  40f29e:	4642      	mov	r2, r8
  40f2a0:	4623      	mov	r3, r4
  40f2a2:	f000 fd3d 	bl	40fd20 <__sbprintf>
  40f2a6:	b031      	add	sp, #196	; 0xc4
  40f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2ac:	f04f 30ff 	mov.w	r0, #4294967295
  40f2b0:	b031      	add	sp, #196	; 0xc4
  40f2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2b6:	f001 fe81 	bl	410fbc <__sinit>
  40f2ba:	e714      	b.n	40f0e6 <_vfiprintf_r+0x1a>
  40f2bc:	4240      	negs	r0, r0
  40f2be:	9308      	str	r3, [sp, #32]
  40f2c0:	f04a 0a04 	orr.w	sl, sl, #4
  40f2c4:	f898 3000 	ldrb.w	r3, [r8]
  40f2c8:	e76d      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f2ca:	f01a 0320 	ands.w	r3, sl, #32
  40f2ce:	9004      	str	r0, [sp, #16]
  40f2d0:	46ac      	mov	ip, r5
  40f2d2:	f000 80f2 	beq.w	40f4ba <_vfiprintf_r+0x3ee>
  40f2d6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f2da:	f10b 0307 	add.w	r3, fp, #7
  40f2de:	f023 0307 	bic.w	r3, r3, #7
  40f2e2:	f103 0408 	add.w	r4, r3, #8
  40f2e6:	9408      	str	r4, [sp, #32]
  40f2e8:	e9d3 4500 	ldrd	r4, r5, [r3]
  40f2ec:	2300      	movs	r3, #0
  40f2ee:	f04f 0000 	mov.w	r0, #0
  40f2f2:	2100      	movs	r1, #0
  40f2f4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40f2f8:	f8cd c014 	str.w	ip, [sp, #20]
  40f2fc:	9107      	str	r1, [sp, #28]
  40f2fe:	f1bc 0f00 	cmp.w	ip, #0
  40f302:	bfa8      	it	ge
  40f304:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40f308:	ea54 0205 	orrs.w	r2, r4, r5
  40f30c:	f040 80ad 	bne.w	40f46a <_vfiprintf_r+0x39e>
  40f310:	f1bc 0f00 	cmp.w	ip, #0
  40f314:	f040 80a9 	bne.w	40f46a <_vfiprintf_r+0x39e>
  40f318:	2b00      	cmp	r3, #0
  40f31a:	f040 83bc 	bne.w	40fa96 <_vfiprintf_r+0x9ca>
  40f31e:	f01a 0f01 	tst.w	sl, #1
  40f322:	f000 83b8 	beq.w	40fa96 <_vfiprintf_r+0x9ca>
  40f326:	af30      	add	r7, sp, #192	; 0xc0
  40f328:	2330      	movs	r3, #48	; 0x30
  40f32a:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40f32e:	ebc7 0409 	rsb	r4, r7, r9
  40f332:	9405      	str	r4, [sp, #20]
  40f334:	f8dd b014 	ldr.w	fp, [sp, #20]
  40f338:	9c07      	ldr	r4, [sp, #28]
  40f33a:	45e3      	cmp	fp, ip
  40f33c:	bfb8      	it	lt
  40f33e:	46e3      	movlt	fp, ip
  40f340:	f8cd b00c 	str.w	fp, [sp, #12]
  40f344:	b11c      	cbz	r4, 40f34e <_vfiprintf_r+0x282>
  40f346:	f10b 0b01 	add.w	fp, fp, #1
  40f34a:	f8cd b00c 	str.w	fp, [sp, #12]
  40f34e:	f01a 0502 	ands.w	r5, sl, #2
  40f352:	9507      	str	r5, [sp, #28]
  40f354:	d005      	beq.n	40f362 <_vfiprintf_r+0x296>
  40f356:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f35a:	f10b 0b02 	add.w	fp, fp, #2
  40f35e:	f8cd b00c 	str.w	fp, [sp, #12]
  40f362:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  40f366:	930b      	str	r3, [sp, #44]	; 0x2c
  40f368:	f040 8217 	bne.w	40f79a <_vfiprintf_r+0x6ce>
  40f36c:	9d04      	ldr	r5, [sp, #16]
  40f36e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f372:	ebcb 0405 	rsb	r4, fp, r5
  40f376:	2c00      	cmp	r4, #0
  40f378:	f340 820f 	ble.w	40f79a <_vfiprintf_r+0x6ce>
  40f37c:	2c10      	cmp	r4, #16
  40f37e:	f340 8488 	ble.w	40fc92 <_vfiprintf_r+0xbc6>
  40f382:	4dbd      	ldr	r5, [pc, #756]	; (40f678 <_vfiprintf_r+0x5ac>)
  40f384:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f386:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f388:	462b      	mov	r3, r5
  40f38a:	f04f 0b10 	mov.w	fp, #16
  40f38e:	4625      	mov	r5, r4
  40f390:	4664      	mov	r4, ip
  40f392:	46b4      	mov	ip, r6
  40f394:	461e      	mov	r6, r3
  40f396:	e006      	b.n	40f3a6 <_vfiprintf_r+0x2da>
  40f398:	1c83      	adds	r3, r0, #2
  40f39a:	f10c 0c08 	add.w	ip, ip, #8
  40f39e:	4608      	mov	r0, r1
  40f3a0:	3d10      	subs	r5, #16
  40f3a2:	2d10      	cmp	r5, #16
  40f3a4:	dd11      	ble.n	40f3ca <_vfiprintf_r+0x2fe>
  40f3a6:	1c41      	adds	r1, r0, #1
  40f3a8:	3210      	adds	r2, #16
  40f3aa:	2907      	cmp	r1, #7
  40f3ac:	9215      	str	r2, [sp, #84]	; 0x54
  40f3ae:	e88c 0840 	stmia.w	ip, {r6, fp}
  40f3b2:	9114      	str	r1, [sp, #80]	; 0x50
  40f3b4:	ddf0      	ble.n	40f398 <_vfiprintf_r+0x2cc>
  40f3b6:	2a00      	cmp	r2, #0
  40f3b8:	f040 81e2 	bne.w	40f780 <_vfiprintf_r+0x6b4>
  40f3bc:	3d10      	subs	r5, #16
  40f3be:	2d10      	cmp	r5, #16
  40f3c0:	f04f 0301 	mov.w	r3, #1
  40f3c4:	4610      	mov	r0, r2
  40f3c6:	46cc      	mov	ip, r9
  40f3c8:	dced      	bgt.n	40f3a6 <_vfiprintf_r+0x2da>
  40f3ca:	4631      	mov	r1, r6
  40f3cc:	4666      	mov	r6, ip
  40f3ce:	46a4      	mov	ip, r4
  40f3d0:	462c      	mov	r4, r5
  40f3d2:	460d      	mov	r5, r1
  40f3d4:	4422      	add	r2, r4
  40f3d6:	2b07      	cmp	r3, #7
  40f3d8:	9215      	str	r2, [sp, #84]	; 0x54
  40f3da:	6035      	str	r5, [r6, #0]
  40f3dc:	6074      	str	r4, [r6, #4]
  40f3de:	9314      	str	r3, [sp, #80]	; 0x50
  40f3e0:	f300 8369 	bgt.w	40fab6 <_vfiprintf_r+0x9ea>
  40f3e4:	3608      	adds	r6, #8
  40f3e6:	1c59      	adds	r1, r3, #1
  40f3e8:	e1da      	b.n	40f7a0 <_vfiprintf_r+0x6d4>
  40f3ea:	f01a 0f20 	tst.w	sl, #32
  40f3ee:	9004      	str	r0, [sp, #16]
  40f3f0:	46ac      	mov	ip, r5
  40f3f2:	f000 808b 	beq.w	40f50c <_vfiprintf_r+0x440>
  40f3f6:	9d08      	ldr	r5, [sp, #32]
  40f3f8:	1deb      	adds	r3, r5, #7
  40f3fa:	f023 0307 	bic.w	r3, r3, #7
  40f3fe:	f103 0b08 	add.w	fp, r3, #8
  40f402:	e9d3 4500 	ldrd	r4, r5, [r3]
  40f406:	f8cd b020 	str.w	fp, [sp, #32]
  40f40a:	2301      	movs	r3, #1
  40f40c:	e76f      	b.n	40f2ee <_vfiprintf_r+0x222>
  40f40e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  40f412:	f898 3000 	ldrb.w	r3, [r8]
  40f416:	e6c6      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f418:	f04a 0a10 	orr.w	sl, sl, #16
  40f41c:	f01a 0f20 	tst.w	sl, #32
  40f420:	9004      	str	r0, [sp, #16]
  40f422:	46ac      	mov	ip, r5
  40f424:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f428:	f000 80c6 	beq.w	40f5b8 <_vfiprintf_r+0x4ec>
  40f42c:	9c08      	ldr	r4, [sp, #32]
  40f42e:	1de1      	adds	r1, r4, #7
  40f430:	f021 0107 	bic.w	r1, r1, #7
  40f434:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f438:	3108      	adds	r1, #8
  40f43a:	9108      	str	r1, [sp, #32]
  40f43c:	4614      	mov	r4, r2
  40f43e:	461d      	mov	r5, r3
  40f440:	2a00      	cmp	r2, #0
  40f442:	f173 0000 	sbcs.w	r0, r3, #0
  40f446:	f2c0 83cd 	blt.w	40fbe4 <_vfiprintf_r+0xb18>
  40f44a:	f1bc 0f00 	cmp.w	ip, #0
  40f44e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  40f452:	9107      	str	r1, [sp, #28]
  40f454:	bfa8      	it	ge
  40f456:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40f45a:	ea54 0205 	orrs.w	r2, r4, r5
  40f45e:	f8cd c014 	str.w	ip, [sp, #20]
  40f462:	f04f 0301 	mov.w	r3, #1
  40f466:	f43f af53 	beq.w	40f310 <_vfiprintf_r+0x244>
  40f46a:	2b01      	cmp	r3, #1
  40f46c:	f000 8315 	beq.w	40fa9a <_vfiprintf_r+0x9ce>
  40f470:	2b02      	cmp	r3, #2
  40f472:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40f476:	f040 8248 	bne.w	40f90a <_vfiprintf_r+0x83e>
  40f47a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f47c:	4619      	mov	r1, r3
  40f47e:	0922      	lsrs	r2, r4, #4
  40f480:	f004 040f 	and.w	r4, r4, #15
  40f484:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40f488:	460f      	mov	r7, r1
  40f48a:	092b      	lsrs	r3, r5, #4
  40f48c:	5d01      	ldrb	r1, [r0, r4]
  40f48e:	7039      	strb	r1, [r7, #0]
  40f490:	ea52 0b03 	orrs.w	fp, r2, r3
  40f494:	4614      	mov	r4, r2
  40f496:	461d      	mov	r5, r3
  40f498:	f107 31ff 	add.w	r1, r7, #4294967295
  40f49c:	d1ef      	bne.n	40f47e <_vfiprintf_r+0x3b2>
  40f49e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40f4a2:	ebc7 0309 	rsb	r3, r7, r9
  40f4a6:	9305      	str	r3, [sp, #20]
  40f4a8:	e744      	b.n	40f334 <_vfiprintf_r+0x268>
  40f4aa:	f04a 0a10 	orr.w	sl, sl, #16
  40f4ae:	f01a 0320 	ands.w	r3, sl, #32
  40f4b2:	9004      	str	r0, [sp, #16]
  40f4b4:	46ac      	mov	ip, r5
  40f4b6:	f47f af0e 	bne.w	40f2d6 <_vfiprintf_r+0x20a>
  40f4ba:	f01a 0210 	ands.w	r2, sl, #16
  40f4be:	f040 830f 	bne.w	40fae0 <_vfiprintf_r+0xa14>
  40f4c2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40f4c6:	f000 830b 	beq.w	40fae0 <_vfiprintf_r+0xa14>
  40f4ca:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f4ce:	f8bb 4000 	ldrh.w	r4, [fp]
  40f4d2:	f10b 0b04 	add.w	fp, fp, #4
  40f4d6:	4613      	mov	r3, r2
  40f4d8:	2500      	movs	r5, #0
  40f4da:	f8cd b020 	str.w	fp, [sp, #32]
  40f4de:	e706      	b.n	40f2ee <_vfiprintf_r+0x222>
  40f4e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f4e4:	2000      	movs	r0, #0
  40f4e6:	f818 3b01 	ldrb.w	r3, [r8], #1
  40f4ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40f4ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40f4f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f4f6:	2a09      	cmp	r2, #9
  40f4f8:	d9f5      	bls.n	40f4e6 <_vfiprintf_r+0x41a>
  40f4fa:	e656      	b.n	40f1aa <_vfiprintf_r+0xde>
  40f4fc:	f04a 0a10 	orr.w	sl, sl, #16
  40f500:	f01a 0f20 	tst.w	sl, #32
  40f504:	9004      	str	r0, [sp, #16]
  40f506:	46ac      	mov	ip, r5
  40f508:	f47f af75 	bne.w	40f3f6 <_vfiprintf_r+0x32a>
  40f50c:	f01a 0f10 	tst.w	sl, #16
  40f510:	f040 82ec 	bne.w	40faec <_vfiprintf_r+0xa20>
  40f514:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40f518:	f000 82e8 	beq.w	40faec <_vfiprintf_r+0xa20>
  40f51c:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f520:	f8bb 4000 	ldrh.w	r4, [fp]
  40f524:	f10b 0b04 	add.w	fp, fp, #4
  40f528:	2500      	movs	r5, #0
  40f52a:	2301      	movs	r3, #1
  40f52c:	f8cd b020 	str.w	fp, [sp, #32]
  40f530:	e6dd      	b.n	40f2ee <_vfiprintf_r+0x222>
  40f532:	46ac      	mov	ip, r5
  40f534:	f01a 0f20 	tst.w	sl, #32
  40f538:	4d50      	ldr	r5, [pc, #320]	; (40f67c <_vfiprintf_r+0x5b0>)
  40f53a:	9004      	str	r0, [sp, #16]
  40f53c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f540:	950a      	str	r5, [sp, #40]	; 0x28
  40f542:	f000 80ee 	beq.w	40f722 <_vfiprintf_r+0x656>
  40f546:	9d08      	ldr	r5, [sp, #32]
  40f548:	1dea      	adds	r2, r5, #7
  40f54a:	f022 0207 	bic.w	r2, r2, #7
  40f54e:	e9d2 4500 	ldrd	r4, r5, [r2]
  40f552:	f102 0b08 	add.w	fp, r2, #8
  40f556:	f8cd b020 	str.w	fp, [sp, #32]
  40f55a:	f01a 0f01 	tst.w	sl, #1
  40f55e:	f000 82a8 	beq.w	40fab2 <_vfiprintf_r+0x9e6>
  40f562:	ea54 0b05 	orrs.w	fp, r4, r5
  40f566:	f000 82a4 	beq.w	40fab2 <_vfiprintf_r+0x9e6>
  40f56a:	2230      	movs	r2, #48	; 0x30
  40f56c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40f570:	f04a 0a02 	orr.w	sl, sl, #2
  40f574:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40f578:	2302      	movs	r3, #2
  40f57a:	e6b8      	b.n	40f2ee <_vfiprintf_r+0x222>
  40f57c:	9b08      	ldr	r3, [sp, #32]
  40f57e:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f582:	681b      	ldr	r3, [r3, #0]
  40f584:	9004      	str	r0, [sp, #16]
  40f586:	2401      	movs	r4, #1
  40f588:	f04f 0500 	mov.w	r5, #0
  40f58c:	f10b 0b04 	add.w	fp, fp, #4
  40f590:	9403      	str	r4, [sp, #12]
  40f592:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40f596:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40f59a:	f8cd b020 	str.w	fp, [sp, #32]
  40f59e:	9405      	str	r4, [sp, #20]
  40f5a0:	af16      	add	r7, sp, #88	; 0x58
  40f5a2:	f04f 0c00 	mov.w	ip, #0
  40f5a6:	e6d2      	b.n	40f34e <_vfiprintf_r+0x282>
  40f5a8:	f01a 0f20 	tst.w	sl, #32
  40f5ac:	9004      	str	r0, [sp, #16]
  40f5ae:	46ac      	mov	ip, r5
  40f5b0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f5b4:	f47f af3a 	bne.w	40f42c <_vfiprintf_r+0x360>
  40f5b8:	f01a 0f10 	tst.w	sl, #16
  40f5bc:	f040 82a4 	bne.w	40fb08 <_vfiprintf_r+0xa3c>
  40f5c0:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40f5c4:	f000 82a0 	beq.w	40fb08 <_vfiprintf_r+0xa3c>
  40f5c8:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f5cc:	f9bb 4000 	ldrsh.w	r4, [fp]
  40f5d0:	f10b 0b04 	add.w	fp, fp, #4
  40f5d4:	17e5      	asrs	r5, r4, #31
  40f5d6:	4622      	mov	r2, r4
  40f5d8:	462b      	mov	r3, r5
  40f5da:	f8cd b020 	str.w	fp, [sp, #32]
  40f5de:	e72f      	b.n	40f440 <_vfiprintf_r+0x374>
  40f5e0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  40f5e4:	f898 3000 	ldrb.w	r3, [r8]
  40f5e8:	e5dd      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f5ea:	f898 3000 	ldrb.w	r3, [r8]
  40f5ee:	4642      	mov	r2, r8
  40f5f0:	2b6c      	cmp	r3, #108	; 0x6c
  40f5f2:	bf03      	ittte	eq
  40f5f4:	f108 0801 	addeq.w	r8, r8, #1
  40f5f8:	f04a 0a20 	orreq.w	sl, sl, #32
  40f5fc:	7853      	ldrbeq	r3, [r2, #1]
  40f5fe:	f04a 0a10 	orrne.w	sl, sl, #16
  40f602:	e5d0      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f604:	f01a 0f20 	tst.w	sl, #32
  40f608:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f60c:	f000 82f8 	beq.w	40fc00 <_vfiprintf_r+0xb34>
  40f610:	9c08      	ldr	r4, [sp, #32]
  40f612:	6821      	ldr	r1, [r4, #0]
  40f614:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f616:	17e5      	asrs	r5, r4, #31
  40f618:	462b      	mov	r3, r5
  40f61a:	9d08      	ldr	r5, [sp, #32]
  40f61c:	4622      	mov	r2, r4
  40f61e:	3504      	adds	r5, #4
  40f620:	9508      	str	r5, [sp, #32]
  40f622:	e9c1 2300 	strd	r2, r3, [r1]
  40f626:	e584      	b.n	40f132 <_vfiprintf_r+0x66>
  40f628:	9c08      	ldr	r4, [sp, #32]
  40f62a:	9004      	str	r0, [sp, #16]
  40f62c:	6827      	ldr	r7, [r4, #0]
  40f62e:	46ac      	mov	ip, r5
  40f630:	f04f 0500 	mov.w	r5, #0
  40f634:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40f638:	3404      	adds	r4, #4
  40f63a:	2f00      	cmp	r7, #0
  40f63c:	f000 8334 	beq.w	40fca8 <_vfiprintf_r+0xbdc>
  40f640:	f1bc 0f00 	cmp.w	ip, #0
  40f644:	4638      	mov	r0, r7
  40f646:	f2c0 8308 	blt.w	40fc5a <_vfiprintf_r+0xb8e>
  40f64a:	4662      	mov	r2, ip
  40f64c:	2100      	movs	r1, #0
  40f64e:	f8cd c004 	str.w	ip, [sp, #4]
  40f652:	f002 fbfd 	bl	411e50 <memchr>
  40f656:	f8dd c004 	ldr.w	ip, [sp, #4]
  40f65a:	2800      	cmp	r0, #0
  40f65c:	f000 833c 	beq.w	40fcd8 <_vfiprintf_r+0xc0c>
  40f660:	1bc0      	subs	r0, r0, r7
  40f662:	4560      	cmp	r0, ip
  40f664:	bfa8      	it	ge
  40f666:	4660      	movge	r0, ip
  40f668:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40f66c:	9005      	str	r0, [sp, #20]
  40f66e:	9408      	str	r4, [sp, #32]
  40f670:	9507      	str	r5, [sp, #28]
  40f672:	f04f 0c00 	mov.w	ip, #0
  40f676:	e65d      	b.n	40f334 <_vfiprintf_r+0x268>
  40f678:	00415eb0 	.word	0x00415eb0
  40f67c:	00415e30 	.word	0x00415e30
  40f680:	9a08      	ldr	r2, [sp, #32]
  40f682:	9004      	str	r0, [sp, #16]
  40f684:	2330      	movs	r3, #48	; 0x30
  40f686:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40f68a:	f102 0b04 	add.w	fp, r2, #4
  40f68e:	2378      	movs	r3, #120	; 0x78
  40f690:	48af      	ldr	r0, [pc, #700]	; (40f950 <_vfiprintf_r+0x884>)
  40f692:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40f696:	46ac      	mov	ip, r5
  40f698:	6814      	ldr	r4, [r2, #0]
  40f69a:	f8cd b020 	str.w	fp, [sp, #32]
  40f69e:	f04a 0a02 	orr.w	sl, sl, #2
  40f6a2:	2500      	movs	r5, #0
  40f6a4:	900a      	str	r0, [sp, #40]	; 0x28
  40f6a6:	2302      	movs	r3, #2
  40f6a8:	e621      	b.n	40f2ee <_vfiprintf_r+0x222>
  40f6aa:	f04a 0a20 	orr.w	sl, sl, #32
  40f6ae:	f898 3000 	ldrb.w	r3, [r8]
  40f6b2:	e578      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f6b4:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f6b8:	f8db 0000 	ldr.w	r0, [fp]
  40f6bc:	2800      	cmp	r0, #0
  40f6be:	f10b 0304 	add.w	r3, fp, #4
  40f6c2:	f6ff adfb 	blt.w	40f2bc <_vfiprintf_r+0x1f0>
  40f6c6:	9308      	str	r3, [sp, #32]
  40f6c8:	f898 3000 	ldrb.w	r3, [r8]
  40f6cc:	e56b      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f6ce:	f898 3000 	ldrb.w	r3, [r8]
  40f6d2:	212b      	movs	r1, #43	; 0x2b
  40f6d4:	e567      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f6d6:	f898 3000 	ldrb.w	r3, [r8]
  40f6da:	2b2a      	cmp	r3, #42	; 0x2a
  40f6dc:	f108 0401 	add.w	r4, r8, #1
  40f6e0:	f000 8309 	beq.w	40fcf6 <_vfiprintf_r+0xc2a>
  40f6e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f6e8:	2a09      	cmp	r2, #9
  40f6ea:	bf98      	it	ls
  40f6ec:	2500      	movls	r5, #0
  40f6ee:	f200 82fe 	bhi.w	40fcee <_vfiprintf_r+0xc22>
  40f6f2:	f814 3b01 	ldrb.w	r3, [r4], #1
  40f6f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40f6fa:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40f6fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f702:	2a09      	cmp	r2, #9
  40f704:	d9f5      	bls.n	40f6f2 <_vfiprintf_r+0x626>
  40f706:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40f70a:	46a0      	mov	r8, r4
  40f70c:	e54d      	b.n	40f1aa <_vfiprintf_r+0xde>
  40f70e:	4c90      	ldr	r4, [pc, #576]	; (40f950 <_vfiprintf_r+0x884>)
  40f710:	9004      	str	r0, [sp, #16]
  40f712:	f01a 0f20 	tst.w	sl, #32
  40f716:	46ac      	mov	ip, r5
  40f718:	940a      	str	r4, [sp, #40]	; 0x28
  40f71a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f71e:	f47f af12 	bne.w	40f546 <_vfiprintf_r+0x47a>
  40f722:	f01a 0f10 	tst.w	sl, #16
  40f726:	f040 81e9 	bne.w	40fafc <_vfiprintf_r+0xa30>
  40f72a:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40f72e:	f000 81e5 	beq.w	40fafc <_vfiprintf_r+0xa30>
  40f732:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f736:	f8bb 4000 	ldrh.w	r4, [fp]
  40f73a:	f10b 0b04 	add.w	fp, fp, #4
  40f73e:	2500      	movs	r5, #0
  40f740:	f8cd b020 	str.w	fp, [sp, #32]
  40f744:	e709      	b.n	40f55a <_vfiprintf_r+0x48e>
  40f746:	f898 3000 	ldrb.w	r3, [r8]
  40f74a:	2900      	cmp	r1, #0
  40f74c:	f47f ad2b 	bne.w	40f1a6 <_vfiprintf_r+0xda>
  40f750:	2120      	movs	r1, #32
  40f752:	e528      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f754:	f04a 0a01 	orr.w	sl, sl, #1
  40f758:	f898 3000 	ldrb.w	r3, [r8]
  40f75c:	e523      	b.n	40f1a6 <_vfiprintf_r+0xda>
  40f75e:	9004      	str	r0, [sp, #16]
  40f760:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f764:	2b00      	cmp	r3, #0
  40f766:	f000 80f9 	beq.w	40f95c <_vfiprintf_r+0x890>
  40f76a:	2501      	movs	r5, #1
  40f76c:	f04f 0b00 	mov.w	fp, #0
  40f770:	9503      	str	r5, [sp, #12]
  40f772:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40f776:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40f77a:	9505      	str	r5, [sp, #20]
  40f77c:	af16      	add	r7, sp, #88	; 0x58
  40f77e:	e710      	b.n	40f5a2 <_vfiprintf_r+0x4d6>
  40f780:	9806      	ldr	r0, [sp, #24]
  40f782:	9902      	ldr	r1, [sp, #8]
  40f784:	aa13      	add	r2, sp, #76	; 0x4c
  40f786:	f7ff fc65 	bl	40f054 <__sprint_r.part.0>
  40f78a:	2800      	cmp	r0, #0
  40f78c:	f040 80ed 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40f790:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f792:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f794:	1c43      	adds	r3, r0, #1
  40f796:	46cc      	mov	ip, r9
  40f798:	e602      	b.n	40f3a0 <_vfiprintf_r+0x2d4>
  40f79a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f79c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f79e:	1c59      	adds	r1, r3, #1
  40f7a0:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  40f7a4:	b168      	cbz	r0, 40f7c2 <_vfiprintf_r+0x6f6>
  40f7a6:	3201      	adds	r2, #1
  40f7a8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  40f7ac:	2301      	movs	r3, #1
  40f7ae:	2907      	cmp	r1, #7
  40f7b0:	9215      	str	r2, [sp, #84]	; 0x54
  40f7b2:	9114      	str	r1, [sp, #80]	; 0x50
  40f7b4:	e886 0009 	stmia.w	r6, {r0, r3}
  40f7b8:	f300 8160 	bgt.w	40fa7c <_vfiprintf_r+0x9b0>
  40f7bc:	460b      	mov	r3, r1
  40f7be:	3608      	adds	r6, #8
  40f7c0:	3101      	adds	r1, #1
  40f7c2:	9c07      	ldr	r4, [sp, #28]
  40f7c4:	b164      	cbz	r4, 40f7e0 <_vfiprintf_r+0x714>
  40f7c6:	3202      	adds	r2, #2
  40f7c8:	a812      	add	r0, sp, #72	; 0x48
  40f7ca:	2302      	movs	r3, #2
  40f7cc:	2907      	cmp	r1, #7
  40f7ce:	9215      	str	r2, [sp, #84]	; 0x54
  40f7d0:	9114      	str	r1, [sp, #80]	; 0x50
  40f7d2:	e886 0009 	stmia.w	r6, {r0, r3}
  40f7d6:	f300 8157 	bgt.w	40fa88 <_vfiprintf_r+0x9bc>
  40f7da:	460b      	mov	r3, r1
  40f7dc:	3608      	adds	r6, #8
  40f7de:	3101      	adds	r1, #1
  40f7e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40f7e2:	2d80      	cmp	r5, #128	; 0x80
  40f7e4:	f000 8101 	beq.w	40f9ea <_vfiprintf_r+0x91e>
  40f7e8:	9d05      	ldr	r5, [sp, #20]
  40f7ea:	ebc5 040c 	rsb	r4, r5, ip
  40f7ee:	2c00      	cmp	r4, #0
  40f7f0:	dd2f      	ble.n	40f852 <_vfiprintf_r+0x786>
  40f7f2:	2c10      	cmp	r4, #16
  40f7f4:	4d57      	ldr	r5, [pc, #348]	; (40f954 <_vfiprintf_r+0x888>)
  40f7f6:	dd22      	ble.n	40f83e <_vfiprintf_r+0x772>
  40f7f8:	4630      	mov	r0, r6
  40f7fa:	f04f 0b10 	mov.w	fp, #16
  40f7fe:	462e      	mov	r6, r5
  40f800:	4625      	mov	r5, r4
  40f802:	9c06      	ldr	r4, [sp, #24]
  40f804:	e006      	b.n	40f814 <_vfiprintf_r+0x748>
  40f806:	f103 0c02 	add.w	ip, r3, #2
  40f80a:	3008      	adds	r0, #8
  40f80c:	460b      	mov	r3, r1
  40f80e:	3d10      	subs	r5, #16
  40f810:	2d10      	cmp	r5, #16
  40f812:	dd10      	ble.n	40f836 <_vfiprintf_r+0x76a>
  40f814:	1c59      	adds	r1, r3, #1
  40f816:	3210      	adds	r2, #16
  40f818:	2907      	cmp	r1, #7
  40f81a:	9215      	str	r2, [sp, #84]	; 0x54
  40f81c:	e880 0840 	stmia.w	r0, {r6, fp}
  40f820:	9114      	str	r1, [sp, #80]	; 0x50
  40f822:	ddf0      	ble.n	40f806 <_vfiprintf_r+0x73a>
  40f824:	2a00      	cmp	r2, #0
  40f826:	d163      	bne.n	40f8f0 <_vfiprintf_r+0x824>
  40f828:	3d10      	subs	r5, #16
  40f82a:	2d10      	cmp	r5, #16
  40f82c:	f04f 0c01 	mov.w	ip, #1
  40f830:	4613      	mov	r3, r2
  40f832:	4648      	mov	r0, r9
  40f834:	dcee      	bgt.n	40f814 <_vfiprintf_r+0x748>
  40f836:	462c      	mov	r4, r5
  40f838:	4661      	mov	r1, ip
  40f83a:	4635      	mov	r5, r6
  40f83c:	4606      	mov	r6, r0
  40f83e:	4422      	add	r2, r4
  40f840:	2907      	cmp	r1, #7
  40f842:	9215      	str	r2, [sp, #84]	; 0x54
  40f844:	6035      	str	r5, [r6, #0]
  40f846:	6074      	str	r4, [r6, #4]
  40f848:	9114      	str	r1, [sp, #80]	; 0x50
  40f84a:	f300 80c1 	bgt.w	40f9d0 <_vfiprintf_r+0x904>
  40f84e:	3608      	adds	r6, #8
  40f850:	3101      	adds	r1, #1
  40f852:	9d05      	ldr	r5, [sp, #20]
  40f854:	6037      	str	r7, [r6, #0]
  40f856:	442a      	add	r2, r5
  40f858:	2907      	cmp	r1, #7
  40f85a:	9215      	str	r2, [sp, #84]	; 0x54
  40f85c:	6075      	str	r5, [r6, #4]
  40f85e:	9114      	str	r1, [sp, #80]	; 0x50
  40f860:	f340 80c1 	ble.w	40f9e6 <_vfiprintf_r+0x91a>
  40f864:	2a00      	cmp	r2, #0
  40f866:	f040 8130 	bne.w	40faca <_vfiprintf_r+0x9fe>
  40f86a:	9214      	str	r2, [sp, #80]	; 0x50
  40f86c:	464e      	mov	r6, r9
  40f86e:	f01a 0f04 	tst.w	sl, #4
  40f872:	f000 808b 	beq.w	40f98c <_vfiprintf_r+0x8c0>
  40f876:	9d04      	ldr	r5, [sp, #16]
  40f878:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f87c:	ebcb 0405 	rsb	r4, fp, r5
  40f880:	2c00      	cmp	r4, #0
  40f882:	f340 8083 	ble.w	40f98c <_vfiprintf_r+0x8c0>
  40f886:	2c10      	cmp	r4, #16
  40f888:	f340 8222 	ble.w	40fcd0 <_vfiprintf_r+0xc04>
  40f88c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40f88e:	4d32      	ldr	r5, [pc, #200]	; (40f958 <_vfiprintf_r+0x88c>)
  40f890:	f8dd a018 	ldr.w	sl, [sp, #24]
  40f894:	f8dd b008 	ldr.w	fp, [sp, #8]
  40f898:	2710      	movs	r7, #16
  40f89a:	e005      	b.n	40f8a8 <_vfiprintf_r+0x7dc>
  40f89c:	1c88      	adds	r0, r1, #2
  40f89e:	3608      	adds	r6, #8
  40f8a0:	4619      	mov	r1, r3
  40f8a2:	3c10      	subs	r4, #16
  40f8a4:	2c10      	cmp	r4, #16
  40f8a6:	dd10      	ble.n	40f8ca <_vfiprintf_r+0x7fe>
  40f8a8:	1c4b      	adds	r3, r1, #1
  40f8aa:	3210      	adds	r2, #16
  40f8ac:	2b07      	cmp	r3, #7
  40f8ae:	9215      	str	r2, [sp, #84]	; 0x54
  40f8b0:	e886 00a0 	stmia.w	r6, {r5, r7}
  40f8b4:	9314      	str	r3, [sp, #80]	; 0x50
  40f8b6:	ddf1      	ble.n	40f89c <_vfiprintf_r+0x7d0>
  40f8b8:	2a00      	cmp	r2, #0
  40f8ba:	d17d      	bne.n	40f9b8 <_vfiprintf_r+0x8ec>
  40f8bc:	3c10      	subs	r4, #16
  40f8be:	2c10      	cmp	r4, #16
  40f8c0:	f04f 0001 	mov.w	r0, #1
  40f8c4:	4611      	mov	r1, r2
  40f8c6:	464e      	mov	r6, r9
  40f8c8:	dcee      	bgt.n	40f8a8 <_vfiprintf_r+0x7dc>
  40f8ca:	4422      	add	r2, r4
  40f8cc:	2807      	cmp	r0, #7
  40f8ce:	9215      	str	r2, [sp, #84]	; 0x54
  40f8d0:	6035      	str	r5, [r6, #0]
  40f8d2:	6074      	str	r4, [r6, #4]
  40f8d4:	9014      	str	r0, [sp, #80]	; 0x50
  40f8d6:	dd59      	ble.n	40f98c <_vfiprintf_r+0x8c0>
  40f8d8:	2a00      	cmp	r2, #0
  40f8da:	d14f      	bne.n	40f97c <_vfiprintf_r+0x8b0>
  40f8dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f8de:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f8e2:	9d04      	ldr	r5, [sp, #16]
  40f8e4:	45ab      	cmp	fp, r5
  40f8e6:	bfac      	ite	ge
  40f8e8:	445c      	addge	r4, fp
  40f8ea:	1964      	addlt	r4, r4, r5
  40f8ec:	9409      	str	r4, [sp, #36]	; 0x24
  40f8ee:	e05e      	b.n	40f9ae <_vfiprintf_r+0x8e2>
  40f8f0:	4620      	mov	r0, r4
  40f8f2:	9902      	ldr	r1, [sp, #8]
  40f8f4:	aa13      	add	r2, sp, #76	; 0x4c
  40f8f6:	f7ff fbad 	bl	40f054 <__sprint_r.part.0>
  40f8fa:	2800      	cmp	r0, #0
  40f8fc:	d135      	bne.n	40f96a <_vfiprintf_r+0x89e>
  40f8fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f900:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f902:	f103 0c01 	add.w	ip, r3, #1
  40f906:	4648      	mov	r0, r9
  40f908:	e781      	b.n	40f80e <_vfiprintf_r+0x742>
  40f90a:	08e0      	lsrs	r0, r4, #3
  40f90c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40f910:	f004 0207 	and.w	r2, r4, #7
  40f914:	08e9      	lsrs	r1, r5, #3
  40f916:	3230      	adds	r2, #48	; 0x30
  40f918:	ea50 0b01 	orrs.w	fp, r0, r1
  40f91c:	461f      	mov	r7, r3
  40f91e:	701a      	strb	r2, [r3, #0]
  40f920:	4604      	mov	r4, r0
  40f922:	460d      	mov	r5, r1
  40f924:	f103 33ff 	add.w	r3, r3, #4294967295
  40f928:	d1ef      	bne.n	40f90a <_vfiprintf_r+0x83e>
  40f92a:	f01a 0f01 	tst.w	sl, #1
  40f92e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40f932:	4639      	mov	r1, r7
  40f934:	f000 80b9 	beq.w	40faaa <_vfiprintf_r+0x9de>
  40f938:	2a30      	cmp	r2, #48	; 0x30
  40f93a:	f43f acf8 	beq.w	40f32e <_vfiprintf_r+0x262>
  40f93e:	461f      	mov	r7, r3
  40f940:	ebc7 0509 	rsb	r5, r7, r9
  40f944:	2330      	movs	r3, #48	; 0x30
  40f946:	9505      	str	r5, [sp, #20]
  40f948:	f801 3c01 	strb.w	r3, [r1, #-1]
  40f94c:	e4f2      	b.n	40f334 <_vfiprintf_r+0x268>
  40f94e:	bf00      	nop
  40f950:	00415e44 	.word	0x00415e44
  40f954:	00415ea0 	.word	0x00415ea0
  40f958:	00415eb0 	.word	0x00415eb0
  40f95c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40f95e:	b123      	cbz	r3, 40f96a <_vfiprintf_r+0x89e>
  40f960:	9806      	ldr	r0, [sp, #24]
  40f962:	9902      	ldr	r1, [sp, #8]
  40f964:	aa13      	add	r2, sp, #76	; 0x4c
  40f966:	f7ff fb75 	bl	40f054 <__sprint_r.part.0>
  40f96a:	9c02      	ldr	r4, [sp, #8]
  40f96c:	89a3      	ldrh	r3, [r4, #12]
  40f96e:	065b      	lsls	r3, r3, #25
  40f970:	f53f ac9c 	bmi.w	40f2ac <_vfiprintf_r+0x1e0>
  40f974:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f976:	b031      	add	sp, #196	; 0xc4
  40f978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f97c:	9806      	ldr	r0, [sp, #24]
  40f97e:	9902      	ldr	r1, [sp, #8]
  40f980:	aa13      	add	r2, sp, #76	; 0x4c
  40f982:	f7ff fb67 	bl	40f054 <__sprint_r.part.0>
  40f986:	2800      	cmp	r0, #0
  40f988:	d1ef      	bne.n	40f96a <_vfiprintf_r+0x89e>
  40f98a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f98c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f98e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f992:	9d04      	ldr	r5, [sp, #16]
  40f994:	45ab      	cmp	fp, r5
  40f996:	bfac      	ite	ge
  40f998:	445c      	addge	r4, fp
  40f99a:	1964      	addlt	r4, r4, r5
  40f99c:	9409      	str	r4, [sp, #36]	; 0x24
  40f99e:	b132      	cbz	r2, 40f9ae <_vfiprintf_r+0x8e2>
  40f9a0:	9806      	ldr	r0, [sp, #24]
  40f9a2:	9902      	ldr	r1, [sp, #8]
  40f9a4:	aa13      	add	r2, sp, #76	; 0x4c
  40f9a6:	f7ff fb55 	bl	40f054 <__sprint_r.part.0>
  40f9aa:	2800      	cmp	r0, #0
  40f9ac:	d1dd      	bne.n	40f96a <_vfiprintf_r+0x89e>
  40f9ae:	2000      	movs	r0, #0
  40f9b0:	9014      	str	r0, [sp, #80]	; 0x50
  40f9b2:	464e      	mov	r6, r9
  40f9b4:	f7ff bbbd 	b.w	40f132 <_vfiprintf_r+0x66>
  40f9b8:	4650      	mov	r0, sl
  40f9ba:	4659      	mov	r1, fp
  40f9bc:	aa13      	add	r2, sp, #76	; 0x4c
  40f9be:	f7ff fb49 	bl	40f054 <__sprint_r.part.0>
  40f9c2:	2800      	cmp	r0, #0
  40f9c4:	d1d1      	bne.n	40f96a <_vfiprintf_r+0x89e>
  40f9c6:	9914      	ldr	r1, [sp, #80]	; 0x50
  40f9c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f9ca:	1c48      	adds	r0, r1, #1
  40f9cc:	464e      	mov	r6, r9
  40f9ce:	e768      	b.n	40f8a2 <_vfiprintf_r+0x7d6>
  40f9d0:	2a00      	cmp	r2, #0
  40f9d2:	f040 80fa 	bne.w	40fbca <_vfiprintf_r+0xafe>
  40f9d6:	9c05      	ldr	r4, [sp, #20]
  40f9d8:	9720      	str	r7, [sp, #128]	; 0x80
  40f9da:	2301      	movs	r3, #1
  40f9dc:	9421      	str	r4, [sp, #132]	; 0x84
  40f9de:	9415      	str	r4, [sp, #84]	; 0x54
  40f9e0:	4622      	mov	r2, r4
  40f9e2:	9314      	str	r3, [sp, #80]	; 0x50
  40f9e4:	464e      	mov	r6, r9
  40f9e6:	3608      	adds	r6, #8
  40f9e8:	e741      	b.n	40f86e <_vfiprintf_r+0x7a2>
  40f9ea:	9d04      	ldr	r5, [sp, #16]
  40f9ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f9f0:	ebcb 0405 	rsb	r4, fp, r5
  40f9f4:	2c00      	cmp	r4, #0
  40f9f6:	f77f aef7 	ble.w	40f7e8 <_vfiprintf_r+0x71c>
  40f9fa:	2c10      	cmp	r4, #16
  40f9fc:	4da8      	ldr	r5, [pc, #672]	; (40fca0 <_vfiprintf_r+0xbd4>)
  40f9fe:	f340 8174 	ble.w	40fcea <_vfiprintf_r+0xc1e>
  40fa02:	4629      	mov	r1, r5
  40fa04:	f04f 0b10 	mov.w	fp, #16
  40fa08:	4625      	mov	r5, r4
  40fa0a:	4664      	mov	r4, ip
  40fa0c:	46b4      	mov	ip, r6
  40fa0e:	460e      	mov	r6, r1
  40fa10:	e006      	b.n	40fa20 <_vfiprintf_r+0x954>
  40fa12:	1c98      	adds	r0, r3, #2
  40fa14:	f10c 0c08 	add.w	ip, ip, #8
  40fa18:	460b      	mov	r3, r1
  40fa1a:	3d10      	subs	r5, #16
  40fa1c:	2d10      	cmp	r5, #16
  40fa1e:	dd0f      	ble.n	40fa40 <_vfiprintf_r+0x974>
  40fa20:	1c59      	adds	r1, r3, #1
  40fa22:	3210      	adds	r2, #16
  40fa24:	2907      	cmp	r1, #7
  40fa26:	9215      	str	r2, [sp, #84]	; 0x54
  40fa28:	e88c 0840 	stmia.w	ip, {r6, fp}
  40fa2c:	9114      	str	r1, [sp, #80]	; 0x50
  40fa2e:	ddf0      	ble.n	40fa12 <_vfiprintf_r+0x946>
  40fa30:	b9ba      	cbnz	r2, 40fa62 <_vfiprintf_r+0x996>
  40fa32:	3d10      	subs	r5, #16
  40fa34:	2d10      	cmp	r5, #16
  40fa36:	f04f 0001 	mov.w	r0, #1
  40fa3a:	4613      	mov	r3, r2
  40fa3c:	46cc      	mov	ip, r9
  40fa3e:	dcef      	bgt.n	40fa20 <_vfiprintf_r+0x954>
  40fa40:	4633      	mov	r3, r6
  40fa42:	4666      	mov	r6, ip
  40fa44:	46a4      	mov	ip, r4
  40fa46:	462c      	mov	r4, r5
  40fa48:	461d      	mov	r5, r3
  40fa4a:	4422      	add	r2, r4
  40fa4c:	2807      	cmp	r0, #7
  40fa4e:	9215      	str	r2, [sp, #84]	; 0x54
  40fa50:	6035      	str	r5, [r6, #0]
  40fa52:	6074      	str	r4, [r6, #4]
  40fa54:	9014      	str	r0, [sp, #80]	; 0x50
  40fa56:	f300 80b2 	bgt.w	40fbbe <_vfiprintf_r+0xaf2>
  40fa5a:	3608      	adds	r6, #8
  40fa5c:	1c41      	adds	r1, r0, #1
  40fa5e:	4603      	mov	r3, r0
  40fa60:	e6c2      	b.n	40f7e8 <_vfiprintf_r+0x71c>
  40fa62:	9806      	ldr	r0, [sp, #24]
  40fa64:	9902      	ldr	r1, [sp, #8]
  40fa66:	aa13      	add	r2, sp, #76	; 0x4c
  40fa68:	f7ff faf4 	bl	40f054 <__sprint_r.part.0>
  40fa6c:	2800      	cmp	r0, #0
  40fa6e:	f47f af7c 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fa72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fa74:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fa76:	1c58      	adds	r0, r3, #1
  40fa78:	46cc      	mov	ip, r9
  40fa7a:	e7ce      	b.n	40fa1a <_vfiprintf_r+0x94e>
  40fa7c:	2a00      	cmp	r2, #0
  40fa7e:	d17c      	bne.n	40fb7a <_vfiprintf_r+0xaae>
  40fa80:	4619      	mov	r1, r3
  40fa82:	464e      	mov	r6, r9
  40fa84:	4613      	mov	r3, r2
  40fa86:	e69c      	b.n	40f7c2 <_vfiprintf_r+0x6f6>
  40fa88:	2a00      	cmp	r2, #0
  40fa8a:	f040 8087 	bne.w	40fb9c <_vfiprintf_r+0xad0>
  40fa8e:	2101      	movs	r1, #1
  40fa90:	4613      	mov	r3, r2
  40fa92:	464e      	mov	r6, r9
  40fa94:	e6a4      	b.n	40f7e0 <_vfiprintf_r+0x714>
  40fa96:	464f      	mov	r7, r9
  40fa98:	e44c      	b.n	40f334 <_vfiprintf_r+0x268>
  40fa9a:	2d00      	cmp	r5, #0
  40fa9c:	bf08      	it	eq
  40fa9e:	2c0a      	cmpeq	r4, #10
  40faa0:	d249      	bcs.n	40fb36 <_vfiprintf_r+0xa6a>
  40faa2:	af30      	add	r7, sp, #192	; 0xc0
  40faa4:	3430      	adds	r4, #48	; 0x30
  40faa6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40faaa:	ebc7 0309 	rsb	r3, r7, r9
  40faae:	9305      	str	r3, [sp, #20]
  40fab0:	e440      	b.n	40f334 <_vfiprintf_r+0x268>
  40fab2:	2302      	movs	r3, #2
  40fab4:	e41b      	b.n	40f2ee <_vfiprintf_r+0x222>
  40fab6:	2a00      	cmp	r2, #0
  40fab8:	f040 80b2 	bne.w	40fc20 <_vfiprintf_r+0xb54>
  40fabc:	4613      	mov	r3, r2
  40fabe:	2101      	movs	r1, #1
  40fac0:	464e      	mov	r6, r9
  40fac2:	e66d      	b.n	40f7a0 <_vfiprintf_r+0x6d4>
  40fac4:	4644      	mov	r4, r8
  40fac6:	f7ff bb5c 	b.w	40f182 <_vfiprintf_r+0xb6>
  40faca:	9806      	ldr	r0, [sp, #24]
  40facc:	9902      	ldr	r1, [sp, #8]
  40face:	aa13      	add	r2, sp, #76	; 0x4c
  40fad0:	f7ff fac0 	bl	40f054 <__sprint_r.part.0>
  40fad4:	2800      	cmp	r0, #0
  40fad6:	f47f af48 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fada:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fadc:	464e      	mov	r6, r9
  40fade:	e6c6      	b.n	40f86e <_vfiprintf_r+0x7a2>
  40fae0:	9d08      	ldr	r5, [sp, #32]
  40fae2:	682c      	ldr	r4, [r5, #0]
  40fae4:	3504      	adds	r5, #4
  40fae6:	9508      	str	r5, [sp, #32]
  40fae8:	2500      	movs	r5, #0
  40faea:	e400      	b.n	40f2ee <_vfiprintf_r+0x222>
  40faec:	9d08      	ldr	r5, [sp, #32]
  40faee:	682c      	ldr	r4, [r5, #0]
  40faf0:	3504      	adds	r5, #4
  40faf2:	9508      	str	r5, [sp, #32]
  40faf4:	2301      	movs	r3, #1
  40faf6:	2500      	movs	r5, #0
  40faf8:	f7ff bbf9 	b.w	40f2ee <_vfiprintf_r+0x222>
  40fafc:	9d08      	ldr	r5, [sp, #32]
  40fafe:	682c      	ldr	r4, [r5, #0]
  40fb00:	3504      	adds	r5, #4
  40fb02:	9508      	str	r5, [sp, #32]
  40fb04:	2500      	movs	r5, #0
  40fb06:	e528      	b.n	40f55a <_vfiprintf_r+0x48e>
  40fb08:	9d08      	ldr	r5, [sp, #32]
  40fb0a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fb0e:	682c      	ldr	r4, [r5, #0]
  40fb10:	f10b 0b04 	add.w	fp, fp, #4
  40fb14:	17e5      	asrs	r5, r4, #31
  40fb16:	f8cd b020 	str.w	fp, [sp, #32]
  40fb1a:	4622      	mov	r2, r4
  40fb1c:	462b      	mov	r3, r5
  40fb1e:	e48f      	b.n	40f440 <_vfiprintf_r+0x374>
  40fb20:	9806      	ldr	r0, [sp, #24]
  40fb22:	9902      	ldr	r1, [sp, #8]
  40fb24:	aa13      	add	r2, sp, #76	; 0x4c
  40fb26:	f7ff fa95 	bl	40f054 <__sprint_r.part.0>
  40fb2a:	2800      	cmp	r0, #0
  40fb2c:	f47f af1d 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fb30:	464e      	mov	r6, r9
  40fb32:	f7ff bb9b 	b.w	40f26c <_vfiprintf_r+0x1a0>
  40fb36:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40fb3a:	9603      	str	r6, [sp, #12]
  40fb3c:	465e      	mov	r6, fp
  40fb3e:	46e3      	mov	fp, ip
  40fb40:	4620      	mov	r0, r4
  40fb42:	4629      	mov	r1, r5
  40fb44:	220a      	movs	r2, #10
  40fb46:	2300      	movs	r3, #0
  40fb48:	f7fc fac4 	bl	40c0d4 <__aeabi_uldivmod>
  40fb4c:	3230      	adds	r2, #48	; 0x30
  40fb4e:	7032      	strb	r2, [r6, #0]
  40fb50:	4620      	mov	r0, r4
  40fb52:	4629      	mov	r1, r5
  40fb54:	220a      	movs	r2, #10
  40fb56:	2300      	movs	r3, #0
  40fb58:	f7fc fabc 	bl	40c0d4 <__aeabi_uldivmod>
  40fb5c:	4604      	mov	r4, r0
  40fb5e:	460d      	mov	r5, r1
  40fb60:	ea54 0005 	orrs.w	r0, r4, r5
  40fb64:	4637      	mov	r7, r6
  40fb66:	f106 36ff 	add.w	r6, r6, #4294967295
  40fb6a:	d1e9      	bne.n	40fb40 <_vfiprintf_r+0xa74>
  40fb6c:	ebc7 0309 	rsb	r3, r7, r9
  40fb70:	46dc      	mov	ip, fp
  40fb72:	9e03      	ldr	r6, [sp, #12]
  40fb74:	9305      	str	r3, [sp, #20]
  40fb76:	f7ff bbdd 	b.w	40f334 <_vfiprintf_r+0x268>
  40fb7a:	9806      	ldr	r0, [sp, #24]
  40fb7c:	9902      	ldr	r1, [sp, #8]
  40fb7e:	f8cd c004 	str.w	ip, [sp, #4]
  40fb82:	aa13      	add	r2, sp, #76	; 0x4c
  40fb84:	f7ff fa66 	bl	40f054 <__sprint_r.part.0>
  40fb88:	f8dd c004 	ldr.w	ip, [sp, #4]
  40fb8c:	2800      	cmp	r0, #0
  40fb8e:	f47f aeec 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fb92:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fb94:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fb96:	1c59      	adds	r1, r3, #1
  40fb98:	464e      	mov	r6, r9
  40fb9a:	e612      	b.n	40f7c2 <_vfiprintf_r+0x6f6>
  40fb9c:	9806      	ldr	r0, [sp, #24]
  40fb9e:	9902      	ldr	r1, [sp, #8]
  40fba0:	f8cd c004 	str.w	ip, [sp, #4]
  40fba4:	aa13      	add	r2, sp, #76	; 0x4c
  40fba6:	f7ff fa55 	bl	40f054 <__sprint_r.part.0>
  40fbaa:	f8dd c004 	ldr.w	ip, [sp, #4]
  40fbae:	2800      	cmp	r0, #0
  40fbb0:	f47f aedb 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fbb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fbb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fbb8:	1c59      	adds	r1, r3, #1
  40fbba:	464e      	mov	r6, r9
  40fbbc:	e610      	b.n	40f7e0 <_vfiprintf_r+0x714>
  40fbbe:	2a00      	cmp	r2, #0
  40fbc0:	d156      	bne.n	40fc70 <_vfiprintf_r+0xba4>
  40fbc2:	2101      	movs	r1, #1
  40fbc4:	4613      	mov	r3, r2
  40fbc6:	464e      	mov	r6, r9
  40fbc8:	e60e      	b.n	40f7e8 <_vfiprintf_r+0x71c>
  40fbca:	9806      	ldr	r0, [sp, #24]
  40fbcc:	9902      	ldr	r1, [sp, #8]
  40fbce:	aa13      	add	r2, sp, #76	; 0x4c
  40fbd0:	f7ff fa40 	bl	40f054 <__sprint_r.part.0>
  40fbd4:	2800      	cmp	r0, #0
  40fbd6:	f47f aec8 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fbda:	9914      	ldr	r1, [sp, #80]	; 0x50
  40fbdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fbde:	3101      	adds	r1, #1
  40fbe0:	464e      	mov	r6, r9
  40fbe2:	e636      	b.n	40f852 <_vfiprintf_r+0x786>
  40fbe4:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40fbe8:	4264      	negs	r4, r4
  40fbea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40fbee:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40fbf2:	f8cd b01c 	str.w	fp, [sp, #28]
  40fbf6:	f8cd c014 	str.w	ip, [sp, #20]
  40fbfa:	2301      	movs	r3, #1
  40fbfc:	f7ff bb7f 	b.w	40f2fe <_vfiprintf_r+0x232>
  40fc00:	f01a 0f10 	tst.w	sl, #16
  40fc04:	d11d      	bne.n	40fc42 <_vfiprintf_r+0xb76>
  40fc06:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40fc0a:	d059      	beq.n	40fcc0 <_vfiprintf_r+0xbf4>
  40fc0c:	9d08      	ldr	r5, [sp, #32]
  40fc0e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40fc12:	682b      	ldr	r3, [r5, #0]
  40fc14:	3504      	adds	r5, #4
  40fc16:	9508      	str	r5, [sp, #32]
  40fc18:	f8a3 b000 	strh.w	fp, [r3]
  40fc1c:	f7ff ba89 	b.w	40f132 <_vfiprintf_r+0x66>
  40fc20:	9806      	ldr	r0, [sp, #24]
  40fc22:	9902      	ldr	r1, [sp, #8]
  40fc24:	f8cd c004 	str.w	ip, [sp, #4]
  40fc28:	aa13      	add	r2, sp, #76	; 0x4c
  40fc2a:	f7ff fa13 	bl	40f054 <__sprint_r.part.0>
  40fc2e:	f8dd c004 	ldr.w	ip, [sp, #4]
  40fc32:	2800      	cmp	r0, #0
  40fc34:	f47f ae99 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fc38:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fc3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fc3c:	1c59      	adds	r1, r3, #1
  40fc3e:	464e      	mov	r6, r9
  40fc40:	e5ae      	b.n	40f7a0 <_vfiprintf_r+0x6d4>
  40fc42:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fc46:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fc48:	f8db 3000 	ldr.w	r3, [fp]
  40fc4c:	f10b 0b04 	add.w	fp, fp, #4
  40fc50:	f8cd b020 	str.w	fp, [sp, #32]
  40fc54:	601c      	str	r4, [r3, #0]
  40fc56:	f7ff ba6c 	b.w	40f132 <_vfiprintf_r+0x66>
  40fc5a:	9408      	str	r4, [sp, #32]
  40fc5c:	f7fc ff84 	bl	40cb68 <strlen>
  40fc60:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  40fc64:	9005      	str	r0, [sp, #20]
  40fc66:	9407      	str	r4, [sp, #28]
  40fc68:	f04f 0c00 	mov.w	ip, #0
  40fc6c:	f7ff bb62 	b.w	40f334 <_vfiprintf_r+0x268>
  40fc70:	9806      	ldr	r0, [sp, #24]
  40fc72:	9902      	ldr	r1, [sp, #8]
  40fc74:	f8cd c004 	str.w	ip, [sp, #4]
  40fc78:	aa13      	add	r2, sp, #76	; 0x4c
  40fc7a:	f7ff f9eb 	bl	40f054 <__sprint_r.part.0>
  40fc7e:	f8dd c004 	ldr.w	ip, [sp, #4]
  40fc82:	2800      	cmp	r0, #0
  40fc84:	f47f ae71 	bne.w	40f96a <_vfiprintf_r+0x89e>
  40fc88:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fc8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fc8c:	1c59      	adds	r1, r3, #1
  40fc8e:	464e      	mov	r6, r9
  40fc90:	e5aa      	b.n	40f7e8 <_vfiprintf_r+0x71c>
  40fc92:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fc94:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fc96:	4d03      	ldr	r5, [pc, #12]	; (40fca4 <_vfiprintf_r+0xbd8>)
  40fc98:	3301      	adds	r3, #1
  40fc9a:	f7ff bb9b 	b.w	40f3d4 <_vfiprintf_r+0x308>
  40fc9e:	bf00      	nop
  40fca0:	00415ea0 	.word	0x00415ea0
  40fca4:	00415eb0 	.word	0x00415eb0
  40fca8:	f1bc 0f06 	cmp.w	ip, #6
  40fcac:	bf34      	ite	cc
  40fcae:	4663      	movcc	r3, ip
  40fcb0:	2306      	movcs	r3, #6
  40fcb2:	9408      	str	r4, [sp, #32]
  40fcb4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  40fcb8:	9305      	str	r3, [sp, #20]
  40fcba:	9403      	str	r4, [sp, #12]
  40fcbc:	4f16      	ldr	r7, [pc, #88]	; (40fd18 <_vfiprintf_r+0xc4c>)
  40fcbe:	e470      	b.n	40f5a2 <_vfiprintf_r+0x4d6>
  40fcc0:	9c08      	ldr	r4, [sp, #32]
  40fcc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40fcc4:	6823      	ldr	r3, [r4, #0]
  40fcc6:	3404      	adds	r4, #4
  40fcc8:	9408      	str	r4, [sp, #32]
  40fcca:	601d      	str	r5, [r3, #0]
  40fccc:	f7ff ba31 	b.w	40f132 <_vfiprintf_r+0x66>
  40fcd0:	9814      	ldr	r0, [sp, #80]	; 0x50
  40fcd2:	4d12      	ldr	r5, [pc, #72]	; (40fd1c <_vfiprintf_r+0xc50>)
  40fcd4:	3001      	adds	r0, #1
  40fcd6:	e5f8      	b.n	40f8ca <_vfiprintf_r+0x7fe>
  40fcd8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40fcdc:	f8cd c014 	str.w	ip, [sp, #20]
  40fce0:	9507      	str	r5, [sp, #28]
  40fce2:	9408      	str	r4, [sp, #32]
  40fce4:	4684      	mov	ip, r0
  40fce6:	f7ff bb25 	b.w	40f334 <_vfiprintf_r+0x268>
  40fcea:	4608      	mov	r0, r1
  40fcec:	e6ad      	b.n	40fa4a <_vfiprintf_r+0x97e>
  40fcee:	46a0      	mov	r8, r4
  40fcf0:	2500      	movs	r5, #0
  40fcf2:	f7ff ba5a 	b.w	40f1aa <_vfiprintf_r+0xde>
  40fcf6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fcfa:	f898 3001 	ldrb.w	r3, [r8, #1]
  40fcfe:	f8db 5000 	ldr.w	r5, [fp]
  40fd02:	f10b 0204 	add.w	r2, fp, #4
  40fd06:	2d00      	cmp	r5, #0
  40fd08:	9208      	str	r2, [sp, #32]
  40fd0a:	46a0      	mov	r8, r4
  40fd0c:	f6bf aa4b 	bge.w	40f1a6 <_vfiprintf_r+0xda>
  40fd10:	f04f 35ff 	mov.w	r5, #4294967295
  40fd14:	f7ff ba47 	b.w	40f1a6 <_vfiprintf_r+0xda>
  40fd18:	00415e58 	.word	0x00415e58
  40fd1c:	00415eb0 	.word	0x00415eb0

0040fd20 <__sbprintf>:
  40fd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40fd24:	460c      	mov	r4, r1
  40fd26:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40fd2a:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  40fd2e:	69e7      	ldr	r7, [r4, #28]
  40fd30:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40fd32:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  40fd36:	9119      	str	r1, [sp, #100]	; 0x64
  40fd38:	ad1a      	add	r5, sp, #104	; 0x68
  40fd3a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40fd3e:	f04f 0e00 	mov.w	lr, #0
  40fd42:	9707      	str	r7, [sp, #28]
  40fd44:	f029 0902 	bic.w	r9, r9, #2
  40fd48:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40fd4a:	9500      	str	r5, [sp, #0]
  40fd4c:	4669      	mov	r1, sp
  40fd4e:	9504      	str	r5, [sp, #16]
  40fd50:	9602      	str	r6, [sp, #8]
  40fd52:	9605      	str	r6, [sp, #20]
  40fd54:	f8ad 900c 	strh.w	r9, [sp, #12]
  40fd58:	f8ad 800e 	strh.w	r8, [sp, #14]
  40fd5c:	9709      	str	r7, [sp, #36]	; 0x24
  40fd5e:	f8cd e018 	str.w	lr, [sp, #24]
  40fd62:	4606      	mov	r6, r0
  40fd64:	f7ff f9b2 	bl	40f0cc <_vfiprintf_r>
  40fd68:	1e05      	subs	r5, r0, #0
  40fd6a:	db07      	blt.n	40fd7c <__sbprintf+0x5c>
  40fd6c:	4630      	mov	r0, r6
  40fd6e:	4669      	mov	r1, sp
  40fd70:	f001 f908 	bl	410f84 <_fflush_r>
  40fd74:	2800      	cmp	r0, #0
  40fd76:	bf18      	it	ne
  40fd78:	f04f 35ff 	movne.w	r5, #4294967295
  40fd7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40fd80:	065b      	lsls	r3, r3, #25
  40fd82:	d503      	bpl.n	40fd8c <__sbprintf+0x6c>
  40fd84:	89a3      	ldrh	r3, [r4, #12]
  40fd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40fd8a:	81a3      	strh	r3, [r4, #12]
  40fd8c:	4628      	mov	r0, r5
  40fd8e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40fd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40fd96:	bf00      	nop

0040fd98 <_write_r>:
  40fd98:	b570      	push	{r4, r5, r6, lr}
  40fd9a:	4c08      	ldr	r4, [pc, #32]	; (40fdbc <_write_r+0x24>)
  40fd9c:	4606      	mov	r6, r0
  40fd9e:	2500      	movs	r5, #0
  40fda0:	4608      	mov	r0, r1
  40fda2:	4611      	mov	r1, r2
  40fda4:	461a      	mov	r2, r3
  40fda6:	6025      	str	r5, [r4, #0]
  40fda8:	f7fa f972 	bl	40a090 <_write>
  40fdac:	1c43      	adds	r3, r0, #1
  40fdae:	d000      	beq.n	40fdb2 <_write_r+0x1a>
  40fdb0:	bd70      	pop	{r4, r5, r6, pc}
  40fdb2:	6823      	ldr	r3, [r4, #0]
  40fdb4:	2b00      	cmp	r3, #0
  40fdb6:	d0fb      	beq.n	40fdb0 <_write_r+0x18>
  40fdb8:	6033      	str	r3, [r6, #0]
  40fdba:	bd70      	pop	{r4, r5, r6, pc}
  40fdbc:	200099c8 	.word	0x200099c8

0040fdc0 <__swsetup_r>:
  40fdc0:	4b2f      	ldr	r3, [pc, #188]	; (40fe80 <__swsetup_r+0xc0>)
  40fdc2:	681b      	ldr	r3, [r3, #0]
  40fdc4:	b570      	push	{r4, r5, r6, lr}
  40fdc6:	4606      	mov	r6, r0
  40fdc8:	460c      	mov	r4, r1
  40fdca:	b113      	cbz	r3, 40fdd2 <__swsetup_r+0x12>
  40fdcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40fdce:	2a00      	cmp	r2, #0
  40fdd0:	d036      	beq.n	40fe40 <__swsetup_r+0x80>
  40fdd2:	89a5      	ldrh	r5, [r4, #12]
  40fdd4:	b2ab      	uxth	r3, r5
  40fdd6:	0719      	lsls	r1, r3, #28
  40fdd8:	d50c      	bpl.n	40fdf4 <__swsetup_r+0x34>
  40fdda:	6922      	ldr	r2, [r4, #16]
  40fddc:	b1aa      	cbz	r2, 40fe0a <__swsetup_r+0x4a>
  40fdde:	f013 0101 	ands.w	r1, r3, #1
  40fde2:	d01e      	beq.n	40fe22 <__swsetup_r+0x62>
  40fde4:	6963      	ldr	r3, [r4, #20]
  40fde6:	2100      	movs	r1, #0
  40fde8:	425b      	negs	r3, r3
  40fdea:	61a3      	str	r3, [r4, #24]
  40fdec:	60a1      	str	r1, [r4, #8]
  40fdee:	b1f2      	cbz	r2, 40fe2e <__swsetup_r+0x6e>
  40fdf0:	2000      	movs	r0, #0
  40fdf2:	bd70      	pop	{r4, r5, r6, pc}
  40fdf4:	06da      	lsls	r2, r3, #27
  40fdf6:	d53b      	bpl.n	40fe70 <__swsetup_r+0xb0>
  40fdf8:	075b      	lsls	r3, r3, #29
  40fdfa:	d425      	bmi.n	40fe48 <__swsetup_r+0x88>
  40fdfc:	6922      	ldr	r2, [r4, #16]
  40fdfe:	f045 0308 	orr.w	r3, r5, #8
  40fe02:	81a3      	strh	r3, [r4, #12]
  40fe04:	b29b      	uxth	r3, r3
  40fe06:	2a00      	cmp	r2, #0
  40fe08:	d1e9      	bne.n	40fdde <__swsetup_r+0x1e>
  40fe0a:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40fe0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40fe12:	d0e4      	beq.n	40fdde <__swsetup_r+0x1e>
  40fe14:	4630      	mov	r0, r6
  40fe16:	4621      	mov	r1, r4
  40fe18:	f001 fcc2 	bl	4117a0 <__smakebuf_r>
  40fe1c:	89a3      	ldrh	r3, [r4, #12]
  40fe1e:	6922      	ldr	r2, [r4, #16]
  40fe20:	e7dd      	b.n	40fdde <__swsetup_r+0x1e>
  40fe22:	0798      	lsls	r0, r3, #30
  40fe24:	bf58      	it	pl
  40fe26:	6961      	ldrpl	r1, [r4, #20]
  40fe28:	60a1      	str	r1, [r4, #8]
  40fe2a:	2a00      	cmp	r2, #0
  40fe2c:	d1e0      	bne.n	40fdf0 <__swsetup_r+0x30>
  40fe2e:	89a3      	ldrh	r3, [r4, #12]
  40fe30:	061a      	lsls	r2, r3, #24
  40fe32:	d5dd      	bpl.n	40fdf0 <__swsetup_r+0x30>
  40fe34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40fe38:	81a3      	strh	r3, [r4, #12]
  40fe3a:	f04f 30ff 	mov.w	r0, #4294967295
  40fe3e:	bd70      	pop	{r4, r5, r6, pc}
  40fe40:	4618      	mov	r0, r3
  40fe42:	f001 f8bb 	bl	410fbc <__sinit>
  40fe46:	e7c4      	b.n	40fdd2 <__swsetup_r+0x12>
  40fe48:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40fe4a:	b149      	cbz	r1, 40fe60 <__swsetup_r+0xa0>
  40fe4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40fe50:	4299      	cmp	r1, r3
  40fe52:	d003      	beq.n	40fe5c <__swsetup_r+0x9c>
  40fe54:	4630      	mov	r0, r6
  40fe56:	f001 f9f3 	bl	411240 <_free_r>
  40fe5a:	89a5      	ldrh	r5, [r4, #12]
  40fe5c:	2300      	movs	r3, #0
  40fe5e:	6323      	str	r3, [r4, #48]	; 0x30
  40fe60:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  40fe64:	2300      	movs	r3, #0
  40fe66:	6922      	ldr	r2, [r4, #16]
  40fe68:	6063      	str	r3, [r4, #4]
  40fe6a:	b2ad      	uxth	r5, r5
  40fe6c:	6022      	str	r2, [r4, #0]
  40fe6e:	e7c6      	b.n	40fdfe <__swsetup_r+0x3e>
  40fe70:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  40fe74:	2309      	movs	r3, #9
  40fe76:	6033      	str	r3, [r6, #0]
  40fe78:	f04f 30ff 	mov.w	r0, #4294967295
  40fe7c:	81a5      	strh	r5, [r4, #12]
  40fe7e:	bd70      	pop	{r4, r5, r6, pc}
  40fe80:	20000798 	.word	0x20000798

0040fe84 <register_fini>:
  40fe84:	4b02      	ldr	r3, [pc, #8]	; (40fe90 <register_fini+0xc>)
  40fe86:	b113      	cbz	r3, 40fe8e <register_fini+0xa>
  40fe88:	4802      	ldr	r0, [pc, #8]	; (40fe94 <register_fini+0x10>)
  40fe8a:	f000 b805 	b.w	40fe98 <atexit>
  40fe8e:	4770      	bx	lr
  40fe90:	00000000 	.word	0x00000000
  40fe94:	004110b9 	.word	0x004110b9

0040fe98 <atexit>:
  40fe98:	4601      	mov	r1, r0
  40fe9a:	2000      	movs	r0, #0
  40fe9c:	4602      	mov	r2, r0
  40fe9e:	4603      	mov	r3, r0
  40fea0:	f004 bb92 	b.w	4145c8 <__register_exitproc>

0040fea4 <_close_r>:
  40fea4:	b538      	push	{r3, r4, r5, lr}
  40fea6:	4c07      	ldr	r4, [pc, #28]	; (40fec4 <_close_r+0x20>)
  40fea8:	2300      	movs	r3, #0
  40feaa:	4605      	mov	r5, r0
  40feac:	4608      	mov	r0, r1
  40feae:	6023      	str	r3, [r4, #0]
  40feb0:	f7fc f814 	bl	40bedc <_close>
  40feb4:	1c43      	adds	r3, r0, #1
  40feb6:	d000      	beq.n	40feba <_close_r+0x16>
  40feb8:	bd38      	pop	{r3, r4, r5, pc}
  40feba:	6823      	ldr	r3, [r4, #0]
  40febc:	2b00      	cmp	r3, #0
  40febe:	d0fb      	beq.n	40feb8 <_close_r+0x14>
  40fec0:	602b      	str	r3, [r5, #0]
  40fec2:	bd38      	pop	{r3, r4, r5, pc}
  40fec4:	200099c8 	.word	0x200099c8

0040fec8 <quorem>:
  40fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fecc:	6903      	ldr	r3, [r0, #16]
  40fece:	690d      	ldr	r5, [r1, #16]
  40fed0:	429d      	cmp	r5, r3
  40fed2:	b083      	sub	sp, #12
  40fed4:	4683      	mov	fp, r0
  40fed6:	f300 808b 	bgt.w	40fff0 <quorem+0x128>
  40feda:	3d01      	subs	r5, #1
  40fedc:	f101 0414 	add.w	r4, r1, #20
  40fee0:	f100 0a14 	add.w	sl, r0, #20
  40fee4:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  40fee8:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  40feec:	3201      	adds	r2, #1
  40feee:	fbb3 f8f2 	udiv	r8, r3, r2
  40fef2:	00aa      	lsls	r2, r5, #2
  40fef4:	4691      	mov	r9, r2
  40fef6:	9200      	str	r2, [sp, #0]
  40fef8:	4452      	add	r2, sl
  40fefa:	44a1      	add	r9, r4
  40fefc:	9201      	str	r2, [sp, #4]
  40fefe:	f1b8 0f00 	cmp.w	r8, #0
  40ff02:	d03d      	beq.n	40ff80 <quorem+0xb8>
  40ff04:	f04f 0e00 	mov.w	lr, #0
  40ff08:	4670      	mov	r0, lr
  40ff0a:	4622      	mov	r2, r4
  40ff0c:	4653      	mov	r3, sl
  40ff0e:	468c      	mov	ip, r1
  40ff10:	f852 6b04 	ldr.w	r6, [r2], #4
  40ff14:	6819      	ldr	r1, [r3, #0]
  40ff16:	b2b7      	uxth	r7, r6
  40ff18:	0c36      	lsrs	r6, r6, #16
  40ff1a:	fb07 ee08 	mla	lr, r7, r8, lr
  40ff1e:	fb06 f608 	mul.w	r6, r6, r8
  40ff22:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  40ff26:	fa1f f78e 	uxth.w	r7, lr
  40ff2a:	1bc7      	subs	r7, r0, r7
  40ff2c:	b2b0      	uxth	r0, r6
  40ff2e:	fa17 f781 	uxtah	r7, r7, r1
  40ff32:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  40ff36:	eb00 4027 	add.w	r0, r0, r7, asr #16
  40ff3a:	b2bf      	uxth	r7, r7
  40ff3c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  40ff40:	4591      	cmp	r9, r2
  40ff42:	f843 7b04 	str.w	r7, [r3], #4
  40ff46:	ea4f 4020 	mov.w	r0, r0, asr #16
  40ff4a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  40ff4e:	d2df      	bcs.n	40ff10 <quorem+0x48>
  40ff50:	9a00      	ldr	r2, [sp, #0]
  40ff52:	f85a 3002 	ldr.w	r3, [sl, r2]
  40ff56:	4661      	mov	r1, ip
  40ff58:	b993      	cbnz	r3, 40ff80 <quorem+0xb8>
  40ff5a:	9a01      	ldr	r2, [sp, #4]
  40ff5c:	1f13      	subs	r3, r2, #4
  40ff5e:	459a      	cmp	sl, r3
  40ff60:	d20c      	bcs.n	40ff7c <quorem+0xb4>
  40ff62:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40ff66:	b94b      	cbnz	r3, 40ff7c <quorem+0xb4>
  40ff68:	f1a2 0308 	sub.w	r3, r2, #8
  40ff6c:	e002      	b.n	40ff74 <quorem+0xac>
  40ff6e:	681a      	ldr	r2, [r3, #0]
  40ff70:	3b04      	subs	r3, #4
  40ff72:	b91a      	cbnz	r2, 40ff7c <quorem+0xb4>
  40ff74:	459a      	cmp	sl, r3
  40ff76:	f105 35ff 	add.w	r5, r5, #4294967295
  40ff7a:	d3f8      	bcc.n	40ff6e <quorem+0xa6>
  40ff7c:	f8cb 5010 	str.w	r5, [fp, #16]
  40ff80:	4658      	mov	r0, fp
  40ff82:	f002 fa7b 	bl	41247c <__mcmp>
  40ff86:	2800      	cmp	r0, #0
  40ff88:	db2e      	blt.n	40ffe8 <quorem+0x120>
  40ff8a:	f108 0801 	add.w	r8, r8, #1
  40ff8e:	4653      	mov	r3, sl
  40ff90:	2200      	movs	r2, #0
  40ff92:	f854 6b04 	ldr.w	r6, [r4], #4
  40ff96:	6818      	ldr	r0, [r3, #0]
  40ff98:	b2b1      	uxth	r1, r6
  40ff9a:	1a52      	subs	r2, r2, r1
  40ff9c:	0c36      	lsrs	r6, r6, #16
  40ff9e:	fa12 f180 	uxtah	r1, r2, r0
  40ffa2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  40ffa6:	eb02 4221 	add.w	r2, r2, r1, asr #16
  40ffaa:	b289      	uxth	r1, r1
  40ffac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  40ffb0:	45a1      	cmp	r9, r4
  40ffb2:	f843 1b04 	str.w	r1, [r3], #4
  40ffb6:	ea4f 4222 	mov.w	r2, r2, asr #16
  40ffba:	d2ea      	bcs.n	40ff92 <quorem+0xca>
  40ffbc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  40ffc0:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  40ffc4:	b982      	cbnz	r2, 40ffe8 <quorem+0x120>
  40ffc6:	1f1a      	subs	r2, r3, #4
  40ffc8:	4592      	cmp	sl, r2
  40ffca:	d20b      	bcs.n	40ffe4 <quorem+0x11c>
  40ffcc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40ffd0:	b942      	cbnz	r2, 40ffe4 <quorem+0x11c>
  40ffd2:	3b08      	subs	r3, #8
  40ffd4:	e002      	b.n	40ffdc <quorem+0x114>
  40ffd6:	681a      	ldr	r2, [r3, #0]
  40ffd8:	3b04      	subs	r3, #4
  40ffda:	b91a      	cbnz	r2, 40ffe4 <quorem+0x11c>
  40ffdc:	459a      	cmp	sl, r3
  40ffde:	f105 35ff 	add.w	r5, r5, #4294967295
  40ffe2:	d3f8      	bcc.n	40ffd6 <quorem+0x10e>
  40ffe4:	f8cb 5010 	str.w	r5, [fp, #16]
  40ffe8:	4640      	mov	r0, r8
  40ffea:	b003      	add	sp, #12
  40ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fff0:	2000      	movs	r0, #0
  40fff2:	b003      	add	sp, #12
  40fff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040fff8 <_dtoa_r>:
  40fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fffc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40fffe:	b09b      	sub	sp, #108	; 0x6c
  410000:	4604      	mov	r4, r0
  410002:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  410004:	4692      	mov	sl, r2
  410006:	469b      	mov	fp, r3
  410008:	b149      	cbz	r1, 41001e <_dtoa_r+0x26>
  41000a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  41000c:	604b      	str	r3, [r1, #4]
  41000e:	2201      	movs	r2, #1
  410010:	fa02 f303 	lsl.w	r3, r2, r3
  410014:	608b      	str	r3, [r1, #8]
  410016:	f001 ffed 	bl	411ff4 <_Bfree>
  41001a:	2300      	movs	r3, #0
  41001c:	6423      	str	r3, [r4, #64]	; 0x40
  41001e:	f1bb 0f00 	cmp.w	fp, #0
  410022:	46d9      	mov	r9, fp
  410024:	db33      	blt.n	41008e <_dtoa_r+0x96>
  410026:	2300      	movs	r3, #0
  410028:	602b      	str	r3, [r5, #0]
  41002a:	4ba5      	ldr	r3, [pc, #660]	; (4102c0 <_dtoa_r+0x2c8>)
  41002c:	461a      	mov	r2, r3
  41002e:	ea09 0303 	and.w	r3, r9, r3
  410032:	4293      	cmp	r3, r2
  410034:	d014      	beq.n	410060 <_dtoa_r+0x68>
  410036:	4650      	mov	r0, sl
  410038:	4659      	mov	r1, fp
  41003a:	2200      	movs	r2, #0
  41003c:	2300      	movs	r3, #0
  41003e:	f005 fb87 	bl	415750 <__aeabi_dcmpeq>
  410042:	4680      	mov	r8, r0
  410044:	b348      	cbz	r0, 41009a <_dtoa_r+0xa2>
  410046:	9e26      	ldr	r6, [sp, #152]	; 0x98
  410048:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  41004a:	2301      	movs	r3, #1
  41004c:	6033      	str	r3, [r6, #0]
  41004e:	2d00      	cmp	r5, #0
  410050:	f000 80c9 	beq.w	4101e6 <_dtoa_r+0x1ee>
  410054:	489b      	ldr	r0, [pc, #620]	; (4102c4 <_dtoa_r+0x2cc>)
  410056:	6028      	str	r0, [r5, #0]
  410058:	3801      	subs	r0, #1
  41005a:	b01b      	add	sp, #108	; 0x6c
  41005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410060:	9d26      	ldr	r5, [sp, #152]	; 0x98
  410062:	f242 730f 	movw	r3, #9999	; 0x270f
  410066:	602b      	str	r3, [r5, #0]
  410068:	f1ba 0f00 	cmp.w	sl, #0
  41006c:	f000 80a4 	beq.w	4101b8 <_dtoa_r+0x1c0>
  410070:	4895      	ldr	r0, [pc, #596]	; (4102c8 <_dtoa_r+0x2d0>)
  410072:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  410074:	2e00      	cmp	r6, #0
  410076:	d0f0      	beq.n	41005a <_dtoa_r+0x62>
  410078:	78c3      	ldrb	r3, [r0, #3]
  41007a:	2b00      	cmp	r3, #0
  41007c:	f000 80b5 	beq.w	4101ea <_dtoa_r+0x1f2>
  410080:	f100 0308 	add.w	r3, r0, #8
  410084:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  410086:	602b      	str	r3, [r5, #0]
  410088:	b01b      	add	sp, #108	; 0x6c
  41008a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41008e:	2301      	movs	r3, #1
  410090:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  410094:	602b      	str	r3, [r5, #0]
  410096:	46cb      	mov	fp, r9
  410098:	e7c7      	b.n	41002a <_dtoa_r+0x32>
  41009a:	aa19      	add	r2, sp, #100	; 0x64
  41009c:	ab18      	add	r3, sp, #96	; 0x60
  41009e:	e88d 000c 	stmia.w	sp, {r2, r3}
  4100a2:	4620      	mov	r0, r4
  4100a4:	4652      	mov	r2, sl
  4100a6:	465b      	mov	r3, fp
  4100a8:	f002 faf0 	bl	41268c <__d2b>
  4100ac:	ea5f 5519 	movs.w	r5, r9, lsr #20
  4100b0:	900a      	str	r0, [sp, #40]	; 0x28
  4100b2:	f040 808a 	bne.w	4101ca <_dtoa_r+0x1d2>
  4100b6:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4100b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4100ba:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  4100be:	443d      	add	r5, r7
  4100c0:	429d      	cmp	r5, r3
  4100c2:	f2c0 8294 	blt.w	4105ee <_dtoa_r+0x5f6>
  4100c6:	331f      	adds	r3, #31
  4100c8:	f205 4212 	addw	r2, r5, #1042	; 0x412
  4100cc:	1b5b      	subs	r3, r3, r5
  4100ce:	fa09 f303 	lsl.w	r3, r9, r3
  4100d2:	fa2a f202 	lsr.w	r2, sl, r2
  4100d6:	ea43 0002 	orr.w	r0, r3, r2
  4100da:	f005 f85b 	bl	415194 <__aeabi_ui2d>
  4100de:	2601      	movs	r6, #1
  4100e0:	3d01      	subs	r5, #1
  4100e2:	46b8      	mov	r8, r7
  4100e4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4100e8:	9616      	str	r6, [sp, #88]	; 0x58
  4100ea:	2200      	movs	r2, #0
  4100ec:	4b77      	ldr	r3, [pc, #476]	; (4102cc <_dtoa_r+0x2d4>)
  4100ee:	f004 ff13 	bl	414f18 <__aeabi_dsub>
  4100f2:	a36d      	add	r3, pc, #436	; (adr r3, 4102a8 <_dtoa_r+0x2b0>)
  4100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4100f8:	f005 f8c2 	bl	415280 <__aeabi_dmul>
  4100fc:	a36c      	add	r3, pc, #432	; (adr r3, 4102b0 <_dtoa_r+0x2b8>)
  4100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  410102:	f004 ff0b 	bl	414f1c <__adddf3>
  410106:	4606      	mov	r6, r0
  410108:	4628      	mov	r0, r5
  41010a:	460f      	mov	r7, r1
  41010c:	f005 f852 	bl	4151b4 <__aeabi_i2d>
  410110:	a369      	add	r3, pc, #420	; (adr r3, 4102b8 <_dtoa_r+0x2c0>)
  410112:	e9d3 2300 	ldrd	r2, r3, [r3]
  410116:	f005 f8b3 	bl	415280 <__aeabi_dmul>
  41011a:	4602      	mov	r2, r0
  41011c:	460b      	mov	r3, r1
  41011e:	4630      	mov	r0, r6
  410120:	4639      	mov	r1, r7
  410122:	f004 fefb 	bl	414f1c <__adddf3>
  410126:	4606      	mov	r6, r0
  410128:	460f      	mov	r7, r1
  41012a:	f005 fb43 	bl	4157b4 <__aeabi_d2iz>
  41012e:	4639      	mov	r1, r7
  410130:	9007      	str	r0, [sp, #28]
  410132:	2200      	movs	r2, #0
  410134:	4630      	mov	r0, r6
  410136:	2300      	movs	r3, #0
  410138:	f005 fb14 	bl	415764 <__aeabi_dcmplt>
  41013c:	2800      	cmp	r0, #0
  41013e:	f040 8228 	bne.w	410592 <_dtoa_r+0x59a>
  410142:	9e07      	ldr	r6, [sp, #28]
  410144:	2e16      	cmp	r6, #22
  410146:	f200 8221 	bhi.w	41058c <_dtoa_r+0x594>
  41014a:	4b61      	ldr	r3, [pc, #388]	; (4102d0 <_dtoa_r+0x2d8>)
  41014c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  410150:	e9d3 0100 	ldrd	r0, r1, [r3]
  410154:	4652      	mov	r2, sl
  410156:	465b      	mov	r3, fp
  410158:	f005 fb22 	bl	4157a0 <__aeabi_dcmpgt>
  41015c:	2800      	cmp	r0, #0
  41015e:	f000 824b 	beq.w	4105f8 <_dtoa_r+0x600>
  410162:	3e01      	subs	r6, #1
  410164:	9607      	str	r6, [sp, #28]
  410166:	2600      	movs	r6, #0
  410168:	960e      	str	r6, [sp, #56]	; 0x38
  41016a:	ebc5 0508 	rsb	r5, r5, r8
  41016e:	3d01      	subs	r5, #1
  410170:	9506      	str	r5, [sp, #24]
  410172:	f100 8225 	bmi.w	4105c0 <_dtoa_r+0x5c8>
  410176:	2500      	movs	r5, #0
  410178:	9508      	str	r5, [sp, #32]
  41017a:	9e07      	ldr	r6, [sp, #28]
  41017c:	2e00      	cmp	r6, #0
  41017e:	f2c0 8216 	blt.w	4105ae <_dtoa_r+0x5b6>
  410182:	9d06      	ldr	r5, [sp, #24]
  410184:	960d      	str	r6, [sp, #52]	; 0x34
  410186:	4435      	add	r5, r6
  410188:	2600      	movs	r6, #0
  41018a:	9506      	str	r5, [sp, #24]
  41018c:	960c      	str	r6, [sp, #48]	; 0x30
  41018e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  410190:	2d09      	cmp	r5, #9
  410192:	d82c      	bhi.n	4101ee <_dtoa_r+0x1f6>
  410194:	2d05      	cmp	r5, #5
  410196:	bfc4      	itt	gt
  410198:	3d04      	subgt	r5, #4
  41019a:	9524      	strgt	r5, [sp, #144]	; 0x90
  41019c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  41019e:	f1a6 0302 	sub.w	r3, r6, #2
  4101a2:	bfcc      	ite	gt
  4101a4:	2500      	movgt	r5, #0
  4101a6:	2501      	movle	r5, #1
  4101a8:	2b03      	cmp	r3, #3
  4101aa:	d822      	bhi.n	4101f2 <_dtoa_r+0x1fa>
  4101ac:	e8df f013 	tbh	[pc, r3, lsl #1]
  4101b0:	029e03b7 	.word	0x029e03b7
  4101b4:	049a03c0 	.word	0x049a03c0
  4101b8:	4a46      	ldr	r2, [pc, #280]	; (4102d4 <_dtoa_r+0x2dc>)
  4101ba:	4b43      	ldr	r3, [pc, #268]	; (4102c8 <_dtoa_r+0x2d0>)
  4101bc:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4101c0:	2800      	cmp	r0, #0
  4101c2:	bf0c      	ite	eq
  4101c4:	4610      	moveq	r0, r2
  4101c6:	4618      	movne	r0, r3
  4101c8:	e753      	b.n	410072 <_dtoa_r+0x7a>
  4101ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4101ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4101d2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  4101d6:	4650      	mov	r0, sl
  4101d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4101dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4101e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  4101e4:	e781      	b.n	4100ea <_dtoa_r+0xf2>
  4101e6:	483c      	ldr	r0, [pc, #240]	; (4102d8 <_dtoa_r+0x2e0>)
  4101e8:	e737      	b.n	41005a <_dtoa_r+0x62>
  4101ea:	1cc3      	adds	r3, r0, #3
  4101ec:	e74a      	b.n	410084 <_dtoa_r+0x8c>
  4101ee:	2500      	movs	r5, #0
  4101f0:	9524      	str	r5, [sp, #144]	; 0x90
  4101f2:	2500      	movs	r5, #0
  4101f4:	6465      	str	r5, [r4, #68]	; 0x44
  4101f6:	4629      	mov	r1, r5
  4101f8:	4620      	mov	r0, r4
  4101fa:	f001 fed5 	bl	411fa8 <_Balloc>
  4101fe:	f04f 39ff 	mov.w	r9, #4294967295
  410202:	2601      	movs	r6, #1
  410204:	9009      	str	r0, [sp, #36]	; 0x24
  410206:	9525      	str	r5, [sp, #148]	; 0x94
  410208:	6420      	str	r0, [r4, #64]	; 0x40
  41020a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  41020e:	960b      	str	r6, [sp, #44]	; 0x2c
  410210:	9b19      	ldr	r3, [sp, #100]	; 0x64
  410212:	2b00      	cmp	r3, #0
  410214:	f2c0 80d2 	blt.w	4103bc <_dtoa_r+0x3c4>
  410218:	9e07      	ldr	r6, [sp, #28]
  41021a:	2e0e      	cmp	r6, #14
  41021c:	f300 80ce 	bgt.w	4103bc <_dtoa_r+0x3c4>
  410220:	4b2b      	ldr	r3, [pc, #172]	; (4102d0 <_dtoa_r+0x2d8>)
  410222:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  410226:	e9d3 0100 	ldrd	r0, r1, [r3]
  41022a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  41022e:	9925      	ldr	r1, [sp, #148]	; 0x94
  410230:	2900      	cmp	r1, #0
  410232:	f2c0 8380 	blt.w	410936 <_dtoa_r+0x93e>
  410236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  41023a:	4659      	mov	r1, fp
  41023c:	4650      	mov	r0, sl
  41023e:	f005 f949 	bl	4154d4 <__aeabi_ddiv>
  410242:	f005 fab7 	bl	4157b4 <__aeabi_d2iz>
  410246:	4605      	mov	r5, r0
  410248:	f004 ffb4 	bl	4151b4 <__aeabi_i2d>
  41024c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410250:	f005 f816 	bl	415280 <__aeabi_dmul>
  410254:	4602      	mov	r2, r0
  410256:	460b      	mov	r3, r1
  410258:	4650      	mov	r0, sl
  41025a:	4659      	mov	r1, fp
  41025c:	f004 fe5c 	bl	414f18 <__aeabi_dsub>
  410260:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410262:	f105 0330 	add.w	r3, r5, #48	; 0x30
  410266:	f1b9 0f01 	cmp.w	r9, #1
  41026a:	4606      	mov	r6, r0
  41026c:	460f      	mov	r7, r1
  41026e:	7013      	strb	r3, [r2, #0]
  410270:	f102 0b01 	add.w	fp, r2, #1
  410274:	d064      	beq.n	410340 <_dtoa_r+0x348>
  410276:	2200      	movs	r2, #0
  410278:	4b18      	ldr	r3, [pc, #96]	; (4102dc <_dtoa_r+0x2e4>)
  41027a:	f005 f801 	bl	415280 <__aeabi_dmul>
  41027e:	2200      	movs	r2, #0
  410280:	2300      	movs	r3, #0
  410282:	4606      	mov	r6, r0
  410284:	460f      	mov	r7, r1
  410286:	f005 fa63 	bl	415750 <__aeabi_dcmpeq>
  41028a:	2800      	cmp	r0, #0
  41028c:	f040 8081 	bne.w	410392 <_dtoa_r+0x39a>
  410290:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  410294:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410296:	9403      	str	r4, [sp, #12]
  410298:	44c8      	add	r8, r9
  41029a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  41029e:	f105 0902 	add.w	r9, r5, #2
  4102a2:	e028      	b.n	4102f6 <_dtoa_r+0x2fe>
  4102a4:	f3af 8000 	nop.w
  4102a8:	636f4361 	.word	0x636f4361
  4102ac:	3fd287a7 	.word	0x3fd287a7
  4102b0:	8b60c8b3 	.word	0x8b60c8b3
  4102b4:	3fc68a28 	.word	0x3fc68a28
  4102b8:	509f79fb 	.word	0x509f79fb
  4102bc:	3fd34413 	.word	0x3fd34413
  4102c0:	7ff00000 	.word	0x7ff00000
  4102c4:	00415e61 	.word	0x00415e61
  4102c8:	00415fd0 	.word	0x00415fd0
  4102cc:	3ff80000 	.word	0x3ff80000
  4102d0:	00415fe0 	.word	0x00415fe0
  4102d4:	00415fc4 	.word	0x00415fc4
  4102d8:	00415e60 	.word	0x00415e60
  4102dc:	40240000 	.word	0x40240000
  4102e0:	f004 ffce 	bl	415280 <__aeabi_dmul>
  4102e4:	2200      	movs	r2, #0
  4102e6:	2300      	movs	r3, #0
  4102e8:	4606      	mov	r6, r0
  4102ea:	460f      	mov	r7, r1
  4102ec:	f005 fa30 	bl	415750 <__aeabi_dcmpeq>
  4102f0:	2800      	cmp	r0, #0
  4102f2:	f040 83c1 	bne.w	410a78 <_dtoa_r+0xa80>
  4102f6:	4652      	mov	r2, sl
  4102f8:	465b      	mov	r3, fp
  4102fa:	4630      	mov	r0, r6
  4102fc:	4639      	mov	r1, r7
  4102fe:	f005 f8e9 	bl	4154d4 <__aeabi_ddiv>
  410302:	f005 fa57 	bl	4157b4 <__aeabi_d2iz>
  410306:	4605      	mov	r5, r0
  410308:	f004 ff54 	bl	4151b4 <__aeabi_i2d>
  41030c:	4652      	mov	r2, sl
  41030e:	465b      	mov	r3, fp
  410310:	f004 ffb6 	bl	415280 <__aeabi_dmul>
  410314:	4602      	mov	r2, r0
  410316:	460b      	mov	r3, r1
  410318:	4630      	mov	r0, r6
  41031a:	4639      	mov	r1, r7
  41031c:	f004 fdfc 	bl	414f18 <__aeabi_dsub>
  410320:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  410324:	45c1      	cmp	r9, r8
  410326:	f809 ec01 	strb.w	lr, [r9, #-1]
  41032a:	464c      	mov	r4, r9
  41032c:	4606      	mov	r6, r0
  41032e:	460f      	mov	r7, r1
  410330:	f04f 0200 	mov.w	r2, #0
  410334:	4ba7      	ldr	r3, [pc, #668]	; (4105d4 <_dtoa_r+0x5dc>)
  410336:	f109 0901 	add.w	r9, r9, #1
  41033a:	d1d1      	bne.n	4102e0 <_dtoa_r+0x2e8>
  41033c:	46a3      	mov	fp, r4
  41033e:	9c03      	ldr	r4, [sp, #12]
  410340:	4632      	mov	r2, r6
  410342:	463b      	mov	r3, r7
  410344:	4630      	mov	r0, r6
  410346:	4639      	mov	r1, r7
  410348:	f004 fde8 	bl	414f1c <__adddf3>
  41034c:	4606      	mov	r6, r0
  41034e:	460f      	mov	r7, r1
  410350:	4632      	mov	r2, r6
  410352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  410356:	463b      	mov	r3, r7
  410358:	f005 fa04 	bl	415764 <__aeabi_dcmplt>
  41035c:	b940      	cbnz	r0, 410370 <_dtoa_r+0x378>
  41035e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  410362:	4632      	mov	r2, r6
  410364:	463b      	mov	r3, r7
  410366:	f005 f9f3 	bl	415750 <__aeabi_dcmpeq>
  41036a:	b190      	cbz	r0, 410392 <_dtoa_r+0x39a>
  41036c:	07eb      	lsls	r3, r5, #31
  41036e:	d510      	bpl.n	410392 <_dtoa_r+0x39a>
  410370:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  410374:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410376:	e005      	b.n	410384 <_dtoa_r+0x38c>
  410378:	429a      	cmp	r2, r3
  41037a:	f000 8428 	beq.w	410bce <_dtoa_r+0xbd6>
  41037e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  410382:	469b      	mov	fp, r3
  410384:	2d39      	cmp	r5, #57	; 0x39
  410386:	f10b 33ff 	add.w	r3, fp, #4294967295
  41038a:	d0f5      	beq.n	410378 <_dtoa_r+0x380>
  41038c:	1c6a      	adds	r2, r5, #1
  41038e:	b2d2      	uxtb	r2, r2
  410390:	701a      	strb	r2, [r3, #0]
  410392:	4620      	mov	r0, r4
  410394:	990a      	ldr	r1, [sp, #40]	; 0x28
  410396:	f001 fe2d 	bl	411ff4 <_Bfree>
  41039a:	9e07      	ldr	r6, [sp, #28]
  41039c:	9d26      	ldr	r5, [sp, #152]	; 0x98
  41039e:	1c73      	adds	r3, r6, #1
  4103a0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  4103a2:	2200      	movs	r2, #0
  4103a4:	f88b 2000 	strb.w	r2, [fp]
  4103a8:	602b      	str	r3, [r5, #0]
  4103aa:	2e00      	cmp	r6, #0
  4103ac:	f000 8325 	beq.w	4109fa <_dtoa_r+0xa02>
  4103b0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4103b2:	f8c6 b000 	str.w	fp, [r6]
  4103b6:	b01b      	add	sp, #108	; 0x6c
  4103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4103bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4103be:	2d00      	cmp	r5, #0
  4103c0:	f000 8103 	beq.w	4105ca <_dtoa_r+0x5d2>
  4103c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4103c6:	2e01      	cmp	r6, #1
  4103c8:	f340 82dc 	ble.w	410984 <_dtoa_r+0x98c>
  4103cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4103ce:	f109 37ff 	add.w	r7, r9, #4294967295
  4103d2:	42be      	cmp	r6, r7
  4103d4:	f2c0 8389 	blt.w	410aea <_dtoa_r+0xaf2>
  4103d8:	1bf7      	subs	r7, r6, r7
  4103da:	f1b9 0f00 	cmp.w	r9, #0
  4103de:	f2c0 8486 	blt.w	410cee <_dtoa_r+0xcf6>
  4103e2:	9d08      	ldr	r5, [sp, #32]
  4103e4:	464b      	mov	r3, r9
  4103e6:	9e08      	ldr	r6, [sp, #32]
  4103e8:	441e      	add	r6, r3
  4103ea:	9608      	str	r6, [sp, #32]
  4103ec:	9e06      	ldr	r6, [sp, #24]
  4103ee:	4620      	mov	r0, r4
  4103f0:	441e      	add	r6, r3
  4103f2:	2101      	movs	r1, #1
  4103f4:	9606      	str	r6, [sp, #24]
  4103f6:	f001 feed 	bl	4121d4 <__i2b>
  4103fa:	4606      	mov	r6, r0
  4103fc:	b165      	cbz	r5, 410418 <_dtoa_r+0x420>
  4103fe:	9806      	ldr	r0, [sp, #24]
  410400:	2800      	cmp	r0, #0
  410402:	dd09      	ble.n	410418 <_dtoa_r+0x420>
  410404:	4603      	mov	r3, r0
  410406:	9908      	ldr	r1, [sp, #32]
  410408:	42ab      	cmp	r3, r5
  41040a:	bfa8      	it	ge
  41040c:	462b      	movge	r3, r5
  41040e:	1ac9      	subs	r1, r1, r3
  410410:	1ac0      	subs	r0, r0, r3
  410412:	9108      	str	r1, [sp, #32]
  410414:	1aed      	subs	r5, r5, r3
  410416:	9006      	str	r0, [sp, #24]
  410418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41041a:	2a00      	cmp	r2, #0
  41041c:	dd1d      	ble.n	41045a <_dtoa_r+0x462>
  41041e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410420:	2b00      	cmp	r3, #0
  410422:	f000 8358 	beq.w	410ad6 <_dtoa_r+0xade>
  410426:	2f00      	cmp	r7, #0
  410428:	dd11      	ble.n	41044e <_dtoa_r+0x456>
  41042a:	4631      	mov	r1, r6
  41042c:	463a      	mov	r2, r7
  41042e:	4620      	mov	r0, r4
  410430:	f001 ff78 	bl	412324 <__pow5mult>
  410434:	4606      	mov	r6, r0
  410436:	4631      	mov	r1, r6
  410438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41043a:	4620      	mov	r0, r4
  41043c:	f001 fed4 	bl	4121e8 <__multiply>
  410440:	990a      	ldr	r1, [sp, #40]	; 0x28
  410442:	4680      	mov	r8, r0
  410444:	4620      	mov	r0, r4
  410446:	f001 fdd5 	bl	411ff4 <_Bfree>
  41044a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  41044e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  410452:	ebbe 0207 	subs.w	r2, lr, r7
  410456:	f040 828f 	bne.w	410978 <_dtoa_r+0x980>
  41045a:	4620      	mov	r0, r4
  41045c:	2101      	movs	r1, #1
  41045e:	f001 feb9 	bl	4121d4 <__i2b>
  410462:	4680      	mov	r8, r0
  410464:	980d      	ldr	r0, [sp, #52]	; 0x34
  410466:	2800      	cmp	r0, #0
  410468:	dd05      	ble.n	410476 <_dtoa_r+0x47e>
  41046a:	4641      	mov	r1, r8
  41046c:	4620      	mov	r0, r4
  41046e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410470:	f001 ff58 	bl	412324 <__pow5mult>
  410474:	4680      	mov	r8, r0
  410476:	9924      	ldr	r1, [sp, #144]	; 0x90
  410478:	2901      	cmp	r1, #1
  41047a:	f340 82c1 	ble.w	410a00 <_dtoa_r+0xa08>
  41047e:	2700      	movs	r7, #0
  410480:	980d      	ldr	r0, [sp, #52]	; 0x34
  410482:	2800      	cmp	r0, #0
  410484:	f040 82af 	bne.w	4109e6 <_dtoa_r+0x9ee>
  410488:	2001      	movs	r0, #1
  41048a:	9b06      	ldr	r3, [sp, #24]
  41048c:	4403      	add	r3, r0
  41048e:	f013 031f 	ands.w	r3, r3, #31
  410492:	f000 80a1 	beq.w	4105d8 <_dtoa_r+0x5e0>
  410496:	f1c3 0220 	rsb	r2, r3, #32
  41049a:	2a04      	cmp	r2, #4
  41049c:	f340 84b5 	ble.w	410e0a <_dtoa_r+0xe12>
  4104a0:	9908      	ldr	r1, [sp, #32]
  4104a2:	9a06      	ldr	r2, [sp, #24]
  4104a4:	f1c3 031c 	rsb	r3, r3, #28
  4104a8:	4419      	add	r1, r3
  4104aa:	441a      	add	r2, r3
  4104ac:	9108      	str	r1, [sp, #32]
  4104ae:	441d      	add	r5, r3
  4104b0:	9206      	str	r2, [sp, #24]
  4104b2:	9908      	ldr	r1, [sp, #32]
  4104b4:	2900      	cmp	r1, #0
  4104b6:	dd05      	ble.n	4104c4 <_dtoa_r+0x4cc>
  4104b8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4104ba:	9a08      	ldr	r2, [sp, #32]
  4104bc:	4620      	mov	r0, r4
  4104be:	f001 ff7f 	bl	4123c0 <__lshift>
  4104c2:	900a      	str	r0, [sp, #40]	; 0x28
  4104c4:	9a06      	ldr	r2, [sp, #24]
  4104c6:	2a00      	cmp	r2, #0
  4104c8:	dd04      	ble.n	4104d4 <_dtoa_r+0x4dc>
  4104ca:	4641      	mov	r1, r8
  4104cc:	4620      	mov	r0, r4
  4104ce:	f001 ff77 	bl	4123c0 <__lshift>
  4104d2:	4680      	mov	r8, r0
  4104d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4104d6:	2b00      	cmp	r3, #0
  4104d8:	f040 826a 	bne.w	4109b0 <_dtoa_r+0x9b8>
  4104dc:	f1b9 0f00 	cmp.w	r9, #0
  4104e0:	f340 82a6 	ble.w	410a30 <_dtoa_r+0xa38>
  4104e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4104e6:	2800      	cmp	r0, #0
  4104e8:	f040 8088 	bne.w	4105fc <_dtoa_r+0x604>
  4104ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4104ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4104f0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4104f4:	e006      	b.n	410504 <_dtoa_r+0x50c>
  4104f6:	4639      	mov	r1, r7
  4104f8:	4620      	mov	r0, r4
  4104fa:	220a      	movs	r2, #10
  4104fc:	2300      	movs	r3, #0
  4104fe:	f001 fd83 	bl	412008 <__multadd>
  410502:	4607      	mov	r7, r0
  410504:	4638      	mov	r0, r7
  410506:	4641      	mov	r1, r8
  410508:	f7ff fcde 	bl	40fec8 <quorem>
  41050c:	3030      	adds	r0, #48	; 0x30
  41050e:	f80b 0005 	strb.w	r0, [fp, r5]
  410512:	3501      	adds	r5, #1
  410514:	45a9      	cmp	r9, r5
  410516:	dcee      	bgt.n	4104f6 <_dtoa_r+0x4fe>
  410518:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  41051c:	970a      	str	r7, [sp, #40]	; 0x28
  41051e:	4682      	mov	sl, r0
  410520:	f1b9 0f01 	cmp.w	r9, #1
  410524:	bfac      	ite	ge
  410526:	44cb      	addge	fp, r9
  410528:	f10b 0b01 	addlt.w	fp, fp, #1
  41052c:	2500      	movs	r5, #0
  41052e:	990a      	ldr	r1, [sp, #40]	; 0x28
  410530:	2201      	movs	r2, #1
  410532:	4620      	mov	r0, r4
  410534:	f001 ff44 	bl	4123c0 <__lshift>
  410538:	4641      	mov	r1, r8
  41053a:	900a      	str	r0, [sp, #40]	; 0x28
  41053c:	f001 ff9e 	bl	41247c <__mcmp>
  410540:	2800      	cmp	r0, #0
  410542:	f340 8309 	ble.w	410b58 <_dtoa_r+0xb60>
  410546:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  41054a:	9909      	ldr	r1, [sp, #36]	; 0x24
  41054c:	e005      	b.n	41055a <_dtoa_r+0x562>
  41054e:	4299      	cmp	r1, r3
  410550:	f000 828b 	beq.w	410a6a <_dtoa_r+0xa72>
  410554:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  410558:	469b      	mov	fp, r3
  41055a:	2a39      	cmp	r2, #57	; 0x39
  41055c:	f10b 33ff 	add.w	r3, fp, #4294967295
  410560:	d0f5      	beq.n	41054e <_dtoa_r+0x556>
  410562:	3201      	adds	r2, #1
  410564:	701a      	strb	r2, [r3, #0]
  410566:	4641      	mov	r1, r8
  410568:	4620      	mov	r0, r4
  41056a:	f001 fd43 	bl	411ff4 <_Bfree>
  41056e:	2e00      	cmp	r6, #0
  410570:	f43f af0f 	beq.w	410392 <_dtoa_r+0x39a>
  410574:	b12d      	cbz	r5, 410582 <_dtoa_r+0x58a>
  410576:	42b5      	cmp	r5, r6
  410578:	d003      	beq.n	410582 <_dtoa_r+0x58a>
  41057a:	4629      	mov	r1, r5
  41057c:	4620      	mov	r0, r4
  41057e:	f001 fd39 	bl	411ff4 <_Bfree>
  410582:	4631      	mov	r1, r6
  410584:	4620      	mov	r0, r4
  410586:	f001 fd35 	bl	411ff4 <_Bfree>
  41058a:	e702      	b.n	410392 <_dtoa_r+0x39a>
  41058c:	2601      	movs	r6, #1
  41058e:	960e      	str	r6, [sp, #56]	; 0x38
  410590:	e5eb      	b.n	41016a <_dtoa_r+0x172>
  410592:	9807      	ldr	r0, [sp, #28]
  410594:	f004 fe0e 	bl	4151b4 <__aeabi_i2d>
  410598:	4632      	mov	r2, r6
  41059a:	463b      	mov	r3, r7
  41059c:	f005 f8d8 	bl	415750 <__aeabi_dcmpeq>
  4105a0:	2800      	cmp	r0, #0
  4105a2:	f47f adce 	bne.w	410142 <_dtoa_r+0x14a>
  4105a6:	9e07      	ldr	r6, [sp, #28]
  4105a8:	3e01      	subs	r6, #1
  4105aa:	9607      	str	r6, [sp, #28]
  4105ac:	e5c9      	b.n	410142 <_dtoa_r+0x14a>
  4105ae:	9e07      	ldr	r6, [sp, #28]
  4105b0:	9d08      	ldr	r5, [sp, #32]
  4105b2:	1bad      	subs	r5, r5, r6
  4105b4:	9508      	str	r5, [sp, #32]
  4105b6:	4275      	negs	r5, r6
  4105b8:	2600      	movs	r6, #0
  4105ba:	950c      	str	r5, [sp, #48]	; 0x30
  4105bc:	960d      	str	r6, [sp, #52]	; 0x34
  4105be:	e5e6      	b.n	41018e <_dtoa_r+0x196>
  4105c0:	426d      	negs	r5, r5
  4105c2:	2600      	movs	r6, #0
  4105c4:	9508      	str	r5, [sp, #32]
  4105c6:	9606      	str	r6, [sp, #24]
  4105c8:	e5d7      	b.n	41017a <_dtoa_r+0x182>
  4105ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4105cc:	9d08      	ldr	r5, [sp, #32]
  4105ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4105d0:	e714      	b.n	4103fc <_dtoa_r+0x404>
  4105d2:	bf00      	nop
  4105d4:	40240000 	.word	0x40240000
  4105d8:	231c      	movs	r3, #28
  4105da:	f8dd e020 	ldr.w	lr, [sp, #32]
  4105de:	9806      	ldr	r0, [sp, #24]
  4105e0:	449e      	add	lr, r3
  4105e2:	4418      	add	r0, r3
  4105e4:	f8cd e020 	str.w	lr, [sp, #32]
  4105e8:	441d      	add	r5, r3
  4105ea:	9006      	str	r0, [sp, #24]
  4105ec:	e761      	b.n	4104b2 <_dtoa_r+0x4ba>
  4105ee:	48a7      	ldr	r0, [pc, #668]	; (41088c <_dtoa_r+0x894>)
  4105f0:	1b40      	subs	r0, r0, r5
  4105f2:	fa0a f000 	lsl.w	r0, sl, r0
  4105f6:	e570      	b.n	4100da <_dtoa_r+0xe2>
  4105f8:	900e      	str	r0, [sp, #56]	; 0x38
  4105fa:	e5b6      	b.n	41016a <_dtoa_r+0x172>
  4105fc:	2d00      	cmp	r5, #0
  4105fe:	dd05      	ble.n	41060c <_dtoa_r+0x614>
  410600:	4631      	mov	r1, r6
  410602:	462a      	mov	r2, r5
  410604:	4620      	mov	r0, r4
  410606:	f001 fedb 	bl	4123c0 <__lshift>
  41060a:	4606      	mov	r6, r0
  41060c:	2f00      	cmp	r7, #0
  41060e:	f040 82e8 	bne.w	410be2 <_dtoa_r+0xbea>
  410612:	4637      	mov	r7, r6
  410614:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410616:	9809      	ldr	r0, [sp, #36]	; 0x24
  410618:	444d      	add	r5, r9
  41061a:	9508      	str	r5, [sp, #32]
  41061c:	f00a 0501 	and.w	r5, sl, #1
  410620:	950b      	str	r5, [sp, #44]	; 0x2c
  410622:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  410626:	1c45      	adds	r5, r0, #1
  410628:	e00a      	b.n	410640 <_dtoa_r+0x648>
  41062a:	f001 fced 	bl	412008 <__multadd>
  41062e:	4639      	mov	r1, r7
  410630:	4606      	mov	r6, r0
  410632:	220a      	movs	r2, #10
  410634:	4620      	mov	r0, r4
  410636:	2300      	movs	r3, #0
  410638:	f001 fce6 	bl	412008 <__multadd>
  41063c:	4607      	mov	r7, r0
  41063e:	3501      	adds	r5, #1
  410640:	4641      	mov	r1, r8
  410642:	4648      	mov	r0, r9
  410644:	f7ff fc40 	bl	40fec8 <quorem>
  410648:	4631      	mov	r1, r6
  41064a:	4683      	mov	fp, r0
  41064c:	4648      	mov	r0, r9
  41064e:	f001 ff15 	bl	41247c <__mcmp>
  410652:	4641      	mov	r1, r8
  410654:	9003      	str	r0, [sp, #12]
  410656:	463a      	mov	r2, r7
  410658:	4620      	mov	r0, r4
  41065a:	f001 ff33 	bl	4124c4 <__mdiff>
  41065e:	68c2      	ldr	r2, [r0, #12]
  410660:	1e69      	subs	r1, r5, #1
  410662:	4603      	mov	r3, r0
  410664:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  410668:	9106      	str	r1, [sp, #24]
  41066a:	2a00      	cmp	r2, #0
  41066c:	f040 8193 	bne.w	410996 <_dtoa_r+0x99e>
  410670:	4619      	mov	r1, r3
  410672:	4648      	mov	r0, r9
  410674:	9302      	str	r3, [sp, #8]
  410676:	f001 ff01 	bl	41247c <__mcmp>
  41067a:	9b02      	ldr	r3, [sp, #8]
  41067c:	4602      	mov	r2, r0
  41067e:	4619      	mov	r1, r3
  410680:	4620      	mov	r0, r4
  410682:	9202      	str	r2, [sp, #8]
  410684:	f001 fcb6 	bl	411ff4 <_Bfree>
  410688:	9a02      	ldr	r2, [sp, #8]
  41068a:	b92a      	cbnz	r2, 410698 <_dtoa_r+0x6a0>
  41068c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41068e:	b91b      	cbnz	r3, 410698 <_dtoa_r+0x6a0>
  410690:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410692:	2800      	cmp	r0, #0
  410694:	f000 8391 	beq.w	410dba <_dtoa_r+0xdc2>
  410698:	9b03      	ldr	r3, [sp, #12]
  41069a:	2b00      	cmp	r3, #0
  41069c:	f2c0 8234 	blt.w	410b08 <_dtoa_r+0xb10>
  4106a0:	d105      	bne.n	4106ae <_dtoa_r+0x6b6>
  4106a2:	9824      	ldr	r0, [sp, #144]	; 0x90
  4106a4:	b918      	cbnz	r0, 4106ae <_dtoa_r+0x6b6>
  4106a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4106a8:	2900      	cmp	r1, #0
  4106aa:	f000 822d 	beq.w	410b08 <_dtoa_r+0xb10>
  4106ae:	2a00      	cmp	r2, #0
  4106b0:	f300 82ab 	bgt.w	410c0a <_dtoa_r+0xc12>
  4106b4:	f8dd e020 	ldr.w	lr, [sp, #32]
  4106b8:	f805 ac01 	strb.w	sl, [r5, #-1]
  4106bc:	4575      	cmp	r5, lr
  4106be:	46ab      	mov	fp, r5
  4106c0:	f000 82b3 	beq.w	410c2a <_dtoa_r+0xc32>
  4106c4:	4649      	mov	r1, r9
  4106c6:	220a      	movs	r2, #10
  4106c8:	2300      	movs	r3, #0
  4106ca:	4620      	mov	r0, r4
  4106cc:	f001 fc9c 	bl	412008 <__multadd>
  4106d0:	42be      	cmp	r6, r7
  4106d2:	4681      	mov	r9, r0
  4106d4:	4631      	mov	r1, r6
  4106d6:	4620      	mov	r0, r4
  4106d8:	f04f 020a 	mov.w	r2, #10
  4106dc:	f04f 0300 	mov.w	r3, #0
  4106e0:	d1a3      	bne.n	41062a <_dtoa_r+0x632>
  4106e2:	f001 fc91 	bl	412008 <__multadd>
  4106e6:	4606      	mov	r6, r0
  4106e8:	4607      	mov	r7, r0
  4106ea:	e7a8      	b.n	41063e <_dtoa_r+0x646>
  4106ec:	2600      	movs	r6, #0
  4106ee:	960b      	str	r6, [sp, #44]	; 0x2c
  4106f0:	9e07      	ldr	r6, [sp, #28]
  4106f2:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  4106f6:	44b6      	add	lr, r6
  4106f8:	f10e 0901 	add.w	r9, lr, #1
  4106fc:	f1b9 0f00 	cmp.w	r9, #0
  410700:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  410704:	464e      	mov	r6, r9
  410706:	f340 8150 	ble.w	4109aa <_dtoa_r+0x9b2>
  41070a:	2100      	movs	r1, #0
  41070c:	2e17      	cmp	r6, #23
  41070e:	6461      	str	r1, [r4, #68]	; 0x44
  410710:	d90a      	bls.n	410728 <_dtoa_r+0x730>
  410712:	2201      	movs	r2, #1
  410714:	2304      	movs	r3, #4
  410716:	005b      	lsls	r3, r3, #1
  410718:	f103 0014 	add.w	r0, r3, #20
  41071c:	42b0      	cmp	r0, r6
  41071e:	4611      	mov	r1, r2
  410720:	f102 0201 	add.w	r2, r2, #1
  410724:	d9f7      	bls.n	410716 <_dtoa_r+0x71e>
  410726:	6461      	str	r1, [r4, #68]	; 0x44
  410728:	4620      	mov	r0, r4
  41072a:	f001 fc3d 	bl	411fa8 <_Balloc>
  41072e:	2e0e      	cmp	r6, #14
  410730:	9009      	str	r0, [sp, #36]	; 0x24
  410732:	6420      	str	r0, [r4, #64]	; 0x40
  410734:	f63f ad6c 	bhi.w	410210 <_dtoa_r+0x218>
  410738:	2d00      	cmp	r5, #0
  41073a:	f43f ad69 	beq.w	410210 <_dtoa_r+0x218>
  41073e:	9d07      	ldr	r5, [sp, #28]
  410740:	2d00      	cmp	r5, #0
  410742:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  410746:	f340 821b 	ble.w	410b80 <_dtoa_r+0xb88>
  41074a:	4b51      	ldr	r3, [pc, #324]	; (410890 <_dtoa_r+0x898>)
  41074c:	f005 020f 	and.w	r2, r5, #15
  410750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  410754:	112d      	asrs	r5, r5, #4
  410756:	e9d3 6700 	ldrd	r6, r7, [r3]
  41075a:	06eb      	lsls	r3, r5, #27
  41075c:	f140 81cd 	bpl.w	410afa <_dtoa_r+0xb02>
  410760:	4b4c      	ldr	r3, [pc, #304]	; (410894 <_dtoa_r+0x89c>)
  410762:	4650      	mov	r0, sl
  410764:	4659      	mov	r1, fp
  410766:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  41076a:	f004 feb3 	bl	4154d4 <__aeabi_ddiv>
  41076e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410772:	f005 050f 	and.w	r5, r5, #15
  410776:	f04f 0803 	mov.w	r8, #3
  41077a:	b18d      	cbz	r5, 4107a0 <_dtoa_r+0x7a8>
  41077c:	f8df a114 	ldr.w	sl, [pc, #276]	; 410894 <_dtoa_r+0x89c>
  410780:	4630      	mov	r0, r6
  410782:	4639      	mov	r1, r7
  410784:	07ee      	lsls	r6, r5, #31
  410786:	d505      	bpl.n	410794 <_dtoa_r+0x79c>
  410788:	e9da 2300 	ldrd	r2, r3, [sl]
  41078c:	f108 0801 	add.w	r8, r8, #1
  410790:	f004 fd76 	bl	415280 <__aeabi_dmul>
  410794:	106d      	asrs	r5, r5, #1
  410796:	f10a 0a08 	add.w	sl, sl, #8
  41079a:	d1f3      	bne.n	410784 <_dtoa_r+0x78c>
  41079c:	4606      	mov	r6, r0
  41079e:	460f      	mov	r7, r1
  4107a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4107a4:	4632      	mov	r2, r6
  4107a6:	463b      	mov	r3, r7
  4107a8:	f004 fe94 	bl	4154d4 <__aeabi_ddiv>
  4107ac:	4682      	mov	sl, r0
  4107ae:	468b      	mov	fp, r1
  4107b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4107b2:	b145      	cbz	r5, 4107c6 <_dtoa_r+0x7ce>
  4107b4:	4650      	mov	r0, sl
  4107b6:	4659      	mov	r1, fp
  4107b8:	2200      	movs	r2, #0
  4107ba:	4b37      	ldr	r3, [pc, #220]	; (410898 <_dtoa_r+0x8a0>)
  4107bc:	f004 ffd2 	bl	415764 <__aeabi_dcmplt>
  4107c0:	2800      	cmp	r0, #0
  4107c2:	f040 82a9 	bne.w	410d18 <_dtoa_r+0xd20>
  4107c6:	4640      	mov	r0, r8
  4107c8:	f004 fcf4 	bl	4151b4 <__aeabi_i2d>
  4107cc:	4652      	mov	r2, sl
  4107ce:	465b      	mov	r3, fp
  4107d0:	f004 fd56 	bl	415280 <__aeabi_dmul>
  4107d4:	2200      	movs	r2, #0
  4107d6:	4b31      	ldr	r3, [pc, #196]	; (41089c <_dtoa_r+0x8a4>)
  4107d8:	f004 fba0 	bl	414f1c <__adddf3>
  4107dc:	4606      	mov	r6, r0
  4107de:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4107e2:	f1b9 0f00 	cmp.w	r9, #0
  4107e6:	f000 815a 	beq.w	410a9e <_dtoa_r+0xaa6>
  4107ea:	9d07      	ldr	r5, [sp, #28]
  4107ec:	9517      	str	r5, [sp, #92]	; 0x5c
  4107ee:	46c8      	mov	r8, r9
  4107f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4107f2:	2d00      	cmp	r5, #0
  4107f4:	f000 8222 	beq.w	410c3c <_dtoa_r+0xc44>
  4107f8:	4b25      	ldr	r3, [pc, #148]	; (410890 <_dtoa_r+0x898>)
  4107fa:	4929      	ldr	r1, [pc, #164]	; (4108a0 <_dtoa_r+0x8a8>)
  4107fc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  410800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  410804:	2000      	movs	r0, #0
  410806:	f004 fe65 	bl	4154d4 <__aeabi_ddiv>
  41080a:	4632      	mov	r2, r6
  41080c:	463b      	mov	r3, r7
  41080e:	f004 fb83 	bl	414f18 <__aeabi_dsub>
  410812:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410816:	4659      	mov	r1, fp
  410818:	4650      	mov	r0, sl
  41081a:	f004 ffcb 	bl	4157b4 <__aeabi_d2iz>
  41081e:	4605      	mov	r5, r0
  410820:	f004 fcc8 	bl	4151b4 <__aeabi_i2d>
  410824:	4602      	mov	r2, r0
  410826:	460b      	mov	r3, r1
  410828:	4650      	mov	r0, sl
  41082a:	4659      	mov	r1, fp
  41082c:	f004 fb74 	bl	414f18 <__aeabi_dsub>
  410830:	3530      	adds	r5, #48	; 0x30
  410832:	9e09      	ldr	r6, [sp, #36]	; 0x24
  410834:	e9cd 0104 	strd	r0, r1, [sp, #16]
  410838:	b2ed      	uxtb	r5, r5
  41083a:	7035      	strb	r5, [r6, #0]
  41083c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410844:	f106 0b01 	add.w	fp, r6, #1
  410848:	f004 ffaa 	bl	4157a0 <__aeabi_dcmpgt>
  41084c:	2800      	cmp	r0, #0
  41084e:	f040 82a9 	bne.w	410da4 <_dtoa_r+0xdac>
  410852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410856:	2000      	movs	r0, #0
  410858:	490f      	ldr	r1, [pc, #60]	; (410898 <_dtoa_r+0x8a0>)
  41085a:	f004 fb5d 	bl	414f18 <__aeabi_dsub>
  41085e:	4602      	mov	r2, r0
  410860:	460b      	mov	r3, r1
  410862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410866:	f004 ff9b 	bl	4157a0 <__aeabi_dcmpgt>
  41086a:	2800      	cmp	r0, #0
  41086c:	f040 82a0 	bne.w	410db0 <_dtoa_r+0xdb8>
  410870:	f1b8 0f01 	cmp.w	r8, #1
  410874:	f340 8180 	ble.w	410b78 <_dtoa_r+0xb80>
  410878:	44b0      	add	r8, r6
  41087a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  41087e:	46a2      	mov	sl, r4
  410880:	46c1      	mov	r9, r8
  410882:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  410886:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  41088a:	e019      	b.n	4108c0 <_dtoa_r+0x8c8>
  41088c:	fffffbee 	.word	0xfffffbee
  410890:	00415fe0 	.word	0x00415fe0
  410894:	004160a8 	.word	0x004160a8
  410898:	3ff00000 	.word	0x3ff00000
  41089c:	401c0000 	.word	0x401c0000
  4108a0:	3fe00000 	.word	0x3fe00000
  4108a4:	2000      	movs	r0, #0
  4108a6:	49a8      	ldr	r1, [pc, #672]	; (410b48 <_dtoa_r+0xb50>)
  4108a8:	f004 fb36 	bl	414f18 <__aeabi_dsub>
  4108ac:	4622      	mov	r2, r4
  4108ae:	462b      	mov	r3, r5
  4108b0:	f004 ff58 	bl	415764 <__aeabi_dcmplt>
  4108b4:	2800      	cmp	r0, #0
  4108b6:	f040 8279 	bne.w	410dac <_dtoa_r+0xdb4>
  4108ba:	45cb      	cmp	fp, r9
  4108bc:	f000 8159 	beq.w	410b72 <_dtoa_r+0xb7a>
  4108c0:	4620      	mov	r0, r4
  4108c2:	4629      	mov	r1, r5
  4108c4:	2200      	movs	r2, #0
  4108c6:	4ba1      	ldr	r3, [pc, #644]	; (410b4c <_dtoa_r+0xb54>)
  4108c8:	f004 fcda 	bl	415280 <__aeabi_dmul>
  4108cc:	2200      	movs	r2, #0
  4108ce:	4b9f      	ldr	r3, [pc, #636]	; (410b4c <_dtoa_r+0xb54>)
  4108d0:	4604      	mov	r4, r0
  4108d2:	460d      	mov	r5, r1
  4108d4:	4630      	mov	r0, r6
  4108d6:	4639      	mov	r1, r7
  4108d8:	f004 fcd2 	bl	415280 <__aeabi_dmul>
  4108dc:	460f      	mov	r7, r1
  4108de:	4606      	mov	r6, r0
  4108e0:	f004 ff68 	bl	4157b4 <__aeabi_d2iz>
  4108e4:	4680      	mov	r8, r0
  4108e6:	f004 fc65 	bl	4151b4 <__aeabi_i2d>
  4108ea:	4602      	mov	r2, r0
  4108ec:	460b      	mov	r3, r1
  4108ee:	4630      	mov	r0, r6
  4108f0:	4639      	mov	r1, r7
  4108f2:	f004 fb11 	bl	414f18 <__aeabi_dsub>
  4108f6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4108fa:	fa5f f888 	uxtb.w	r8, r8
  4108fe:	4622      	mov	r2, r4
  410900:	462b      	mov	r3, r5
  410902:	f80b 8b01 	strb.w	r8, [fp], #1
  410906:	4606      	mov	r6, r0
  410908:	460f      	mov	r7, r1
  41090a:	f004 ff2b 	bl	415764 <__aeabi_dcmplt>
  41090e:	4632      	mov	r2, r6
  410910:	463b      	mov	r3, r7
  410912:	2800      	cmp	r0, #0
  410914:	d0c6      	beq.n	4108a4 <_dtoa_r+0x8ac>
  410916:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  410918:	9607      	str	r6, [sp, #28]
  41091a:	4654      	mov	r4, sl
  41091c:	e539      	b.n	410392 <_dtoa_r+0x39a>
  41091e:	2600      	movs	r6, #0
  410920:	960b      	str	r6, [sp, #44]	; 0x2c
  410922:	9825      	ldr	r0, [sp, #148]	; 0x94
  410924:	2800      	cmp	r0, #0
  410926:	dd3c      	ble.n	4109a2 <_dtoa_r+0x9aa>
  410928:	4606      	mov	r6, r0
  41092a:	900f      	str	r0, [sp, #60]	; 0x3c
  41092c:	4681      	mov	r9, r0
  41092e:	e6ec      	b.n	41070a <_dtoa_r+0x712>
  410930:	2601      	movs	r6, #1
  410932:	960b      	str	r6, [sp, #44]	; 0x2c
  410934:	e7f5      	b.n	410922 <_dtoa_r+0x92a>
  410936:	f1b9 0f00 	cmp.w	r9, #0
  41093a:	f73f ac7c 	bgt.w	410236 <_dtoa_r+0x23e>
  41093e:	f040 80c6 	bne.w	410ace <_dtoa_r+0xad6>
  410942:	2200      	movs	r2, #0
  410944:	4b82      	ldr	r3, [pc, #520]	; (410b50 <_dtoa_r+0xb58>)
  410946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  41094a:	f004 fc99 	bl	415280 <__aeabi_dmul>
  41094e:	4652      	mov	r2, sl
  410950:	465b      	mov	r3, fp
  410952:	f004 ff1b 	bl	41578c <__aeabi_dcmpge>
  410956:	46c8      	mov	r8, r9
  410958:	464e      	mov	r6, r9
  41095a:	2800      	cmp	r0, #0
  41095c:	d07c      	beq.n	410a58 <_dtoa_r+0xa60>
  41095e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  410960:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410964:	43ed      	mvns	r5, r5
  410966:	9507      	str	r5, [sp, #28]
  410968:	4641      	mov	r1, r8
  41096a:	4620      	mov	r0, r4
  41096c:	f001 fb42 	bl	411ff4 <_Bfree>
  410970:	2e00      	cmp	r6, #0
  410972:	f47f ae06 	bne.w	410582 <_dtoa_r+0x58a>
  410976:	e50c      	b.n	410392 <_dtoa_r+0x39a>
  410978:	990a      	ldr	r1, [sp, #40]	; 0x28
  41097a:	4620      	mov	r0, r4
  41097c:	f001 fcd2 	bl	412324 <__pow5mult>
  410980:	900a      	str	r0, [sp, #40]	; 0x28
  410982:	e56a      	b.n	41045a <_dtoa_r+0x462>
  410984:	9d16      	ldr	r5, [sp, #88]	; 0x58
  410986:	2d00      	cmp	r5, #0
  410988:	f000 81b7 	beq.w	410cfa <_dtoa_r+0xd02>
  41098c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  410990:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410992:	9d08      	ldr	r5, [sp, #32]
  410994:	e527      	b.n	4103e6 <_dtoa_r+0x3ee>
  410996:	4601      	mov	r1, r0
  410998:	4620      	mov	r0, r4
  41099a:	f001 fb2b 	bl	411ff4 <_Bfree>
  41099e:	2201      	movs	r2, #1
  4109a0:	e67a      	b.n	410698 <_dtoa_r+0x6a0>
  4109a2:	2601      	movs	r6, #1
  4109a4:	9625      	str	r6, [sp, #148]	; 0x94
  4109a6:	960f      	str	r6, [sp, #60]	; 0x3c
  4109a8:	46b1      	mov	r9, r6
  4109aa:	2100      	movs	r1, #0
  4109ac:	6461      	str	r1, [r4, #68]	; 0x44
  4109ae:	e6bb      	b.n	410728 <_dtoa_r+0x730>
  4109b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4109b2:	4641      	mov	r1, r8
  4109b4:	f001 fd62 	bl	41247c <__mcmp>
  4109b8:	2800      	cmp	r0, #0
  4109ba:	f6bf ad8f 	bge.w	4104dc <_dtoa_r+0x4e4>
  4109be:	f8dd e01c 	ldr.w	lr, [sp, #28]
  4109c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4109c4:	f10e 3eff 	add.w	lr, lr, #4294967295
  4109c8:	4620      	mov	r0, r4
  4109ca:	220a      	movs	r2, #10
  4109cc:	2300      	movs	r3, #0
  4109ce:	f8cd e01c 	str.w	lr, [sp, #28]
  4109d2:	f001 fb19 	bl	412008 <__multadd>
  4109d6:	900a      	str	r0, [sp, #40]	; 0x28
  4109d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4109da:	2800      	cmp	r0, #0
  4109dc:	f040 8207 	bne.w	410dee <_dtoa_r+0xdf6>
  4109e0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4109e4:	e57a      	b.n	4104dc <_dtoa_r+0x4e4>
  4109e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4109ea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4109ee:	6918      	ldr	r0, [r3, #16]
  4109f0:	f001 fba2 	bl	412138 <__hi0bits>
  4109f4:	f1c0 0020 	rsb	r0, r0, #32
  4109f8:	e547      	b.n	41048a <_dtoa_r+0x492>
  4109fa:	9809      	ldr	r0, [sp, #36]	; 0x24
  4109fc:	f7ff bb2d 	b.w	41005a <_dtoa_r+0x62>
  410a00:	f1ba 0f00 	cmp.w	sl, #0
  410a04:	f47f ad3b 	bne.w	41047e <_dtoa_r+0x486>
  410a08:	f3cb 0313 	ubfx	r3, fp, #0, #20
  410a0c:	2b00      	cmp	r3, #0
  410a0e:	f040 817b 	bne.w	410d08 <_dtoa_r+0xd10>
  410a12:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  410a16:	0d3f      	lsrs	r7, r7, #20
  410a18:	053f      	lsls	r7, r7, #20
  410a1a:	2f00      	cmp	r7, #0
  410a1c:	f43f ad30 	beq.w	410480 <_dtoa_r+0x488>
  410a20:	9a08      	ldr	r2, [sp, #32]
  410a22:	9b06      	ldr	r3, [sp, #24]
  410a24:	3201      	adds	r2, #1
  410a26:	3301      	adds	r3, #1
  410a28:	9208      	str	r2, [sp, #32]
  410a2a:	9306      	str	r3, [sp, #24]
  410a2c:	2701      	movs	r7, #1
  410a2e:	e527      	b.n	410480 <_dtoa_r+0x488>
  410a30:	9924      	ldr	r1, [sp, #144]	; 0x90
  410a32:	2902      	cmp	r1, #2
  410a34:	f77f ad56 	ble.w	4104e4 <_dtoa_r+0x4ec>
  410a38:	f1b9 0f00 	cmp.w	r9, #0
  410a3c:	d18f      	bne.n	41095e <_dtoa_r+0x966>
  410a3e:	4641      	mov	r1, r8
  410a40:	464b      	mov	r3, r9
  410a42:	2205      	movs	r2, #5
  410a44:	4620      	mov	r0, r4
  410a46:	f001 fadf 	bl	412008 <__multadd>
  410a4a:	4680      	mov	r8, r0
  410a4c:	4641      	mov	r1, r8
  410a4e:	980a      	ldr	r0, [sp, #40]	; 0x28
  410a50:	f001 fd14 	bl	41247c <__mcmp>
  410a54:	2800      	cmp	r0, #0
  410a56:	dd82      	ble.n	41095e <_dtoa_r+0x966>
  410a58:	9d07      	ldr	r5, [sp, #28]
  410a5a:	3501      	adds	r5, #1
  410a5c:	9507      	str	r5, [sp, #28]
  410a5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410a60:	2331      	movs	r3, #49	; 0x31
  410a62:	702b      	strb	r3, [r5, #0]
  410a64:	f105 0b01 	add.w	fp, r5, #1
  410a68:	e77e      	b.n	410968 <_dtoa_r+0x970>
  410a6a:	9807      	ldr	r0, [sp, #28]
  410a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
  410a6e:	2331      	movs	r3, #49	; 0x31
  410a70:	3001      	adds	r0, #1
  410a72:	9007      	str	r0, [sp, #28]
  410a74:	700b      	strb	r3, [r1, #0]
  410a76:	e576      	b.n	410566 <_dtoa_r+0x56e>
  410a78:	46a3      	mov	fp, r4
  410a7a:	9c03      	ldr	r4, [sp, #12]
  410a7c:	e489      	b.n	410392 <_dtoa_r+0x39a>
  410a7e:	4640      	mov	r0, r8
  410a80:	f004 fb98 	bl	4151b4 <__aeabi_i2d>
  410a84:	4602      	mov	r2, r0
  410a86:	460b      	mov	r3, r1
  410a88:	4650      	mov	r0, sl
  410a8a:	4659      	mov	r1, fp
  410a8c:	f004 fbf8 	bl	415280 <__aeabi_dmul>
  410a90:	2200      	movs	r2, #0
  410a92:	4b30      	ldr	r3, [pc, #192]	; (410b54 <_dtoa_r+0xb5c>)
  410a94:	f004 fa42 	bl	414f1c <__adddf3>
  410a98:	4606      	mov	r6, r0
  410a9a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  410a9e:	4650      	mov	r0, sl
  410aa0:	4659      	mov	r1, fp
  410aa2:	2200      	movs	r2, #0
  410aa4:	4b2a      	ldr	r3, [pc, #168]	; (410b50 <_dtoa_r+0xb58>)
  410aa6:	f004 fa37 	bl	414f18 <__aeabi_dsub>
  410aaa:	4632      	mov	r2, r6
  410aac:	463b      	mov	r3, r7
  410aae:	4682      	mov	sl, r0
  410ab0:	468b      	mov	fp, r1
  410ab2:	f004 fe75 	bl	4157a0 <__aeabi_dcmpgt>
  410ab6:	2800      	cmp	r0, #0
  410ab8:	f040 80bc 	bne.w	410c34 <_dtoa_r+0xc3c>
  410abc:	4632      	mov	r2, r6
  410abe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  410ac2:	4650      	mov	r0, sl
  410ac4:	4659      	mov	r1, fp
  410ac6:	f004 fe4d 	bl	415764 <__aeabi_dcmplt>
  410aca:	2800      	cmp	r0, #0
  410acc:	d054      	beq.n	410b78 <_dtoa_r+0xb80>
  410ace:	f04f 0800 	mov.w	r8, #0
  410ad2:	4646      	mov	r6, r8
  410ad4:	e743      	b.n	41095e <_dtoa_r+0x966>
  410ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
  410ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410ada:	4620      	mov	r0, r4
  410adc:	f001 fc22 	bl	412324 <__pow5mult>
  410ae0:	900a      	str	r0, [sp, #40]	; 0x28
  410ae2:	e4ba      	b.n	41045a <_dtoa_r+0x462>
  410ae4:	2601      	movs	r6, #1
  410ae6:	960b      	str	r6, [sp, #44]	; 0x2c
  410ae8:	e602      	b.n	4106f0 <_dtoa_r+0x6f8>
  410aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  410aec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410aee:	970c      	str	r7, [sp, #48]	; 0x30
  410af0:	1b7b      	subs	r3, r7, r5
  410af2:	441e      	add	r6, r3
  410af4:	960d      	str	r6, [sp, #52]	; 0x34
  410af6:	2700      	movs	r7, #0
  410af8:	e46f      	b.n	4103da <_dtoa_r+0x3e2>
  410afa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  410afe:	f04f 0802 	mov.w	r8, #2
  410b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410b06:	e638      	b.n	41077a <_dtoa_r+0x782>
  410b08:	2a00      	cmp	r2, #0
  410b0a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410b0e:	46d9      	mov	r9, fp
  410b10:	dd11      	ble.n	410b36 <_dtoa_r+0xb3e>
  410b12:	990a      	ldr	r1, [sp, #40]	; 0x28
  410b14:	2201      	movs	r2, #1
  410b16:	4620      	mov	r0, r4
  410b18:	f001 fc52 	bl	4123c0 <__lshift>
  410b1c:	4641      	mov	r1, r8
  410b1e:	900a      	str	r0, [sp, #40]	; 0x28
  410b20:	f001 fcac 	bl	41247c <__mcmp>
  410b24:	2800      	cmp	r0, #0
  410b26:	f340 815b 	ble.w	410de0 <_dtoa_r+0xde8>
  410b2a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410b2e:	f000 811a 	beq.w	410d66 <_dtoa_r+0xd6e>
  410b32:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  410b36:	9b06      	ldr	r3, [sp, #24]
  410b38:	4635      	mov	r5, r6
  410b3a:	f883 a000 	strb.w	sl, [r3]
  410b3e:	f103 0b01 	add.w	fp, r3, #1
  410b42:	463e      	mov	r6, r7
  410b44:	e50f      	b.n	410566 <_dtoa_r+0x56e>
  410b46:	bf00      	nop
  410b48:	3ff00000 	.word	0x3ff00000
  410b4c:	40240000 	.word	0x40240000
  410b50:	40140000 	.word	0x40140000
  410b54:	401c0000 	.word	0x401c0000
  410b58:	d103      	bne.n	410b62 <_dtoa_r+0xb6a>
  410b5a:	f01a 0f01 	tst.w	sl, #1
  410b5e:	f47f acf2 	bne.w	410546 <_dtoa_r+0x54e>
  410b62:	465b      	mov	r3, fp
  410b64:	469b      	mov	fp, r3
  410b66:	3b01      	subs	r3, #1
  410b68:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  410b6c:	2a30      	cmp	r2, #48	; 0x30
  410b6e:	d0f9      	beq.n	410b64 <_dtoa_r+0xb6c>
  410b70:	e4f9      	b.n	410566 <_dtoa_r+0x56e>
  410b72:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  410b76:	4654      	mov	r4, sl
  410b78:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  410b7c:	f7ff bb48 	b.w	410210 <_dtoa_r+0x218>
  410b80:	9e07      	ldr	r6, [sp, #28]
  410b82:	4275      	negs	r5, r6
  410b84:	2d00      	cmp	r5, #0
  410b86:	f000 80c2 	beq.w	410d0e <_dtoa_r+0xd16>
  410b8a:	4ba3      	ldr	r3, [pc, #652]	; (410e18 <_dtoa_r+0xe20>)
  410b8c:	f005 020f 	and.w	r2, r5, #15
  410b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  410b94:	e9d3 2300 	ldrd	r2, r3, [r3]
  410b98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  410b9c:	f004 fb70 	bl	415280 <__aeabi_dmul>
  410ba0:	112d      	asrs	r5, r5, #4
  410ba2:	4682      	mov	sl, r0
  410ba4:	468b      	mov	fp, r1
  410ba6:	f000 812d 	beq.w	410e04 <_dtoa_r+0xe0c>
  410baa:	4e9c      	ldr	r6, [pc, #624]	; (410e1c <_dtoa_r+0xe24>)
  410bac:	f04f 0802 	mov.w	r8, #2
  410bb0:	07ea      	lsls	r2, r5, #31
  410bb2:	d505      	bpl.n	410bc0 <_dtoa_r+0xbc8>
  410bb4:	e9d6 2300 	ldrd	r2, r3, [r6]
  410bb8:	f108 0801 	add.w	r8, r8, #1
  410bbc:	f004 fb60 	bl	415280 <__aeabi_dmul>
  410bc0:	106d      	asrs	r5, r5, #1
  410bc2:	f106 0608 	add.w	r6, r6, #8
  410bc6:	d1f3      	bne.n	410bb0 <_dtoa_r+0xbb8>
  410bc8:	4682      	mov	sl, r0
  410bca:	468b      	mov	fp, r1
  410bcc:	e5f0      	b.n	4107b0 <_dtoa_r+0x7b8>
  410bce:	9e07      	ldr	r6, [sp, #28]
  410bd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410bd2:	2230      	movs	r2, #48	; 0x30
  410bd4:	702a      	strb	r2, [r5, #0]
  410bd6:	3601      	adds	r6, #1
  410bd8:	2231      	movs	r2, #49	; 0x31
  410bda:	9607      	str	r6, [sp, #28]
  410bdc:	701a      	strb	r2, [r3, #0]
  410bde:	f7ff bbd8 	b.w	410392 <_dtoa_r+0x39a>
  410be2:	6871      	ldr	r1, [r6, #4]
  410be4:	4620      	mov	r0, r4
  410be6:	f001 f9df 	bl	411fa8 <_Balloc>
  410bea:	6933      	ldr	r3, [r6, #16]
  410bec:	1c9a      	adds	r2, r3, #2
  410bee:	4605      	mov	r5, r0
  410bf0:	0092      	lsls	r2, r2, #2
  410bf2:	f106 010c 	add.w	r1, r6, #12
  410bf6:	300c      	adds	r0, #12
  410bf8:	f7fb fd7e 	bl	40c6f8 <memcpy>
  410bfc:	4620      	mov	r0, r4
  410bfe:	4629      	mov	r1, r5
  410c00:	2201      	movs	r2, #1
  410c02:	f001 fbdd 	bl	4123c0 <__lshift>
  410c06:	4607      	mov	r7, r0
  410c08:	e504      	b.n	410614 <_dtoa_r+0x61c>
  410c0a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410c0e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410c12:	f000 80a8 	beq.w	410d66 <_dtoa_r+0xd6e>
  410c16:	9d06      	ldr	r5, [sp, #24]
  410c18:	f10a 0301 	add.w	r3, sl, #1
  410c1c:	702b      	strb	r3, [r5, #0]
  410c1e:	4635      	mov	r5, r6
  410c20:	9e06      	ldr	r6, [sp, #24]
  410c22:	f106 0b01 	add.w	fp, r6, #1
  410c26:	463e      	mov	r6, r7
  410c28:	e49d      	b.n	410566 <_dtoa_r+0x56e>
  410c2a:	4635      	mov	r5, r6
  410c2c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410c30:	463e      	mov	r6, r7
  410c32:	e47c      	b.n	41052e <_dtoa_r+0x536>
  410c34:	f04f 0800 	mov.w	r8, #0
  410c38:	4646      	mov	r6, r8
  410c3a:	e70d      	b.n	410a58 <_dtoa_r+0xa60>
  410c3c:	4976      	ldr	r1, [pc, #472]	; (410e18 <_dtoa_r+0xe20>)
  410c3e:	f108 35ff 	add.w	r5, r8, #4294967295
  410c42:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  410c46:	4632      	mov	r2, r6
  410c48:	463b      	mov	r3, r7
  410c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  410c4e:	9510      	str	r5, [sp, #64]	; 0x40
  410c50:	f004 fb16 	bl	415280 <__aeabi_dmul>
  410c54:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  410c58:	4659      	mov	r1, fp
  410c5a:	4650      	mov	r0, sl
  410c5c:	f004 fdaa 	bl	4157b4 <__aeabi_d2iz>
  410c60:	4605      	mov	r5, r0
  410c62:	f004 faa7 	bl	4151b4 <__aeabi_i2d>
  410c66:	4602      	mov	r2, r0
  410c68:	460b      	mov	r3, r1
  410c6a:	4650      	mov	r0, sl
  410c6c:	4659      	mov	r1, fp
  410c6e:	f004 f953 	bl	414f18 <__aeabi_dsub>
  410c72:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  410c76:	3530      	adds	r5, #48	; 0x30
  410c78:	f1b8 0f01 	cmp.w	r8, #1
  410c7c:	4606      	mov	r6, r0
  410c7e:	460f      	mov	r7, r1
  410c80:	f88e 5000 	strb.w	r5, [lr]
  410c84:	f10e 0b01 	add.w	fp, lr, #1
  410c88:	d01e      	beq.n	410cc8 <_dtoa_r+0xcd0>
  410c8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410c8c:	1e6b      	subs	r3, r5, #1
  410c8e:	eb03 0a08 	add.w	sl, r3, r8
  410c92:	2200      	movs	r2, #0
  410c94:	4b62      	ldr	r3, [pc, #392]	; (410e20 <_dtoa_r+0xe28>)
  410c96:	f004 faf3 	bl	415280 <__aeabi_dmul>
  410c9a:	460f      	mov	r7, r1
  410c9c:	4606      	mov	r6, r0
  410c9e:	f004 fd89 	bl	4157b4 <__aeabi_d2iz>
  410ca2:	4680      	mov	r8, r0
  410ca4:	f004 fa86 	bl	4151b4 <__aeabi_i2d>
  410ca8:	f108 0830 	add.w	r8, r8, #48	; 0x30
  410cac:	4602      	mov	r2, r0
  410cae:	460b      	mov	r3, r1
  410cb0:	4630      	mov	r0, r6
  410cb2:	4639      	mov	r1, r7
  410cb4:	f004 f930 	bl	414f18 <__aeabi_dsub>
  410cb8:	f805 8f01 	strb.w	r8, [r5, #1]!
  410cbc:	4555      	cmp	r5, sl
  410cbe:	d1e8      	bne.n	410c92 <_dtoa_r+0xc9a>
  410cc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  410cc2:	4606      	mov	r6, r0
  410cc4:	460f      	mov	r7, r1
  410cc6:	44ab      	add	fp, r5
  410cc8:	2200      	movs	r2, #0
  410cca:	4b56      	ldr	r3, [pc, #344]	; (410e24 <_dtoa_r+0xe2c>)
  410ccc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  410cd0:	f004 f924 	bl	414f1c <__adddf3>
  410cd4:	4632      	mov	r2, r6
  410cd6:	463b      	mov	r3, r7
  410cd8:	f004 fd44 	bl	415764 <__aeabi_dcmplt>
  410cdc:	2800      	cmp	r0, #0
  410cde:	d04d      	beq.n	410d7c <_dtoa_r+0xd84>
  410ce0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  410ce2:	9607      	str	r6, [sp, #28]
  410ce4:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  410ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410cea:	f7ff bb4b 	b.w	410384 <_dtoa_r+0x38c>
  410cee:	9e08      	ldr	r6, [sp, #32]
  410cf0:	2300      	movs	r3, #0
  410cf2:	ebc9 0506 	rsb	r5, r9, r6
  410cf6:	f7ff bb76 	b.w	4103e6 <_dtoa_r+0x3ee>
  410cfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  410cfc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410cfe:	9d08      	ldr	r5, [sp, #32]
  410d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  410d04:	f7ff bb6f 	b.w	4103e6 <_dtoa_r+0x3ee>
  410d08:	4657      	mov	r7, sl
  410d0a:	f7ff bbb9 	b.w	410480 <_dtoa_r+0x488>
  410d0e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  410d12:	f04f 0802 	mov.w	r8, #2
  410d16:	e54b      	b.n	4107b0 <_dtoa_r+0x7b8>
  410d18:	f1b9 0f00 	cmp.w	r9, #0
  410d1c:	f43f aeaf 	beq.w	410a7e <_dtoa_r+0xa86>
  410d20:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  410d22:	2e00      	cmp	r6, #0
  410d24:	f77f af28 	ble.w	410b78 <_dtoa_r+0xb80>
  410d28:	2200      	movs	r2, #0
  410d2a:	4b3d      	ldr	r3, [pc, #244]	; (410e20 <_dtoa_r+0xe28>)
  410d2c:	4650      	mov	r0, sl
  410d2e:	4659      	mov	r1, fp
  410d30:	f004 faa6 	bl	415280 <__aeabi_dmul>
  410d34:	4682      	mov	sl, r0
  410d36:	f108 0001 	add.w	r0, r8, #1
  410d3a:	468b      	mov	fp, r1
  410d3c:	f004 fa3a 	bl	4151b4 <__aeabi_i2d>
  410d40:	4602      	mov	r2, r0
  410d42:	460b      	mov	r3, r1
  410d44:	4650      	mov	r0, sl
  410d46:	4659      	mov	r1, fp
  410d48:	f004 fa9a 	bl	415280 <__aeabi_dmul>
  410d4c:	2200      	movs	r2, #0
  410d4e:	4b36      	ldr	r3, [pc, #216]	; (410e28 <_dtoa_r+0xe30>)
  410d50:	f004 f8e4 	bl	414f1c <__adddf3>
  410d54:	9d07      	ldr	r5, [sp, #28]
  410d56:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  410d5a:	3d01      	subs	r5, #1
  410d5c:	4606      	mov	r6, r0
  410d5e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  410d62:	9517      	str	r5, [sp, #92]	; 0x5c
  410d64:	e544      	b.n	4107f0 <_dtoa_r+0x7f8>
  410d66:	4635      	mov	r5, r6
  410d68:	9b06      	ldr	r3, [sp, #24]
  410d6a:	9e06      	ldr	r6, [sp, #24]
  410d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
  410d6e:	2239      	movs	r2, #57	; 0x39
  410d70:	7032      	strb	r2, [r6, #0]
  410d72:	f103 0b01 	add.w	fp, r3, #1
  410d76:	463e      	mov	r6, r7
  410d78:	f7ff bbef 	b.w	41055a <_dtoa_r+0x562>
  410d7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  410d80:	2000      	movs	r0, #0
  410d82:	4928      	ldr	r1, [pc, #160]	; (410e24 <_dtoa_r+0xe2c>)
  410d84:	f004 f8c8 	bl	414f18 <__aeabi_dsub>
  410d88:	4632      	mov	r2, r6
  410d8a:	463b      	mov	r3, r7
  410d8c:	f004 fd08 	bl	4157a0 <__aeabi_dcmpgt>
  410d90:	2800      	cmp	r0, #0
  410d92:	f43f aef1 	beq.w	410b78 <_dtoa_r+0xb80>
  410d96:	465b      	mov	r3, fp
  410d98:	469b      	mov	fp, r3
  410d9a:	3b01      	subs	r3, #1
  410d9c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  410da0:	2a30      	cmp	r2, #48	; 0x30
  410da2:	d0f9      	beq.n	410d98 <_dtoa_r+0xda0>
  410da4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  410da6:	9507      	str	r5, [sp, #28]
  410da8:	f7ff baf3 	b.w	410392 <_dtoa_r+0x39a>
  410dac:	4645      	mov	r5, r8
  410dae:	4654      	mov	r4, sl
  410db0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  410db2:	9607      	str	r6, [sp, #28]
  410db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410db6:	f7ff bae5 	b.w	410384 <_dtoa_r+0x38c>
  410dba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410dbe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410dc2:	d0d0      	beq.n	410d66 <_dtoa_r+0xd6e>
  410dc4:	9b03      	ldr	r3, [sp, #12]
  410dc6:	4635      	mov	r5, r6
  410dc8:	2b00      	cmp	r3, #0
  410dca:	9e06      	ldr	r6, [sp, #24]
  410dcc:	bfc8      	it	gt
  410dce:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  410dd2:	f886 a000 	strb.w	sl, [r6]
  410dd6:	f106 0b01 	add.w	fp, r6, #1
  410dda:	463e      	mov	r6, r7
  410ddc:	f7ff bbc3 	b.w	410566 <_dtoa_r+0x56e>
  410de0:	f47f aea9 	bne.w	410b36 <_dtoa_r+0xb3e>
  410de4:	f01a 0f01 	tst.w	sl, #1
  410de8:	f43f aea5 	beq.w	410b36 <_dtoa_r+0xb3e>
  410dec:	e69d      	b.n	410b2a <_dtoa_r+0xb32>
  410dee:	4631      	mov	r1, r6
  410df0:	4620      	mov	r0, r4
  410df2:	220a      	movs	r2, #10
  410df4:	2300      	movs	r3, #0
  410df6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  410dfa:	f001 f905 	bl	412008 <__multadd>
  410dfe:	4606      	mov	r6, r0
  410e00:	f7ff bb6c 	b.w	4104dc <_dtoa_r+0x4e4>
  410e04:	f04f 0802 	mov.w	r8, #2
  410e08:	e4d2      	b.n	4107b0 <_dtoa_r+0x7b8>
  410e0a:	f43f ab52 	beq.w	4104b2 <_dtoa_r+0x4ba>
  410e0e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  410e12:	f7ff bbe2 	b.w	4105da <_dtoa_r+0x5e2>
  410e16:	bf00      	nop
  410e18:	00415fe0 	.word	0x00415fe0
  410e1c:	004160a8 	.word	0x004160a8
  410e20:	40240000 	.word	0x40240000
  410e24:	3fe00000 	.word	0x3fe00000
  410e28:	401c0000 	.word	0x401c0000
  410e2c:	f3af 8000 	nop.w

00410e30 <__sflush_r>:
  410e30:	898b      	ldrh	r3, [r1, #12]
  410e32:	b29a      	uxth	r2, r3
  410e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410e38:	460d      	mov	r5, r1
  410e3a:	0711      	lsls	r1, r2, #28
  410e3c:	4680      	mov	r8, r0
  410e3e:	d43c      	bmi.n	410eba <__sflush_r+0x8a>
  410e40:	686a      	ldr	r2, [r5, #4]
  410e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  410e46:	2a00      	cmp	r2, #0
  410e48:	81ab      	strh	r3, [r5, #12]
  410e4a:	dd59      	ble.n	410f00 <__sflush_r+0xd0>
  410e4c:	6aac      	ldr	r4, [r5, #40]	; 0x28
  410e4e:	2c00      	cmp	r4, #0
  410e50:	d04b      	beq.n	410eea <__sflush_r+0xba>
  410e52:	b29b      	uxth	r3, r3
  410e54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  410e58:	2100      	movs	r1, #0
  410e5a:	b292      	uxth	r2, r2
  410e5c:	f8d8 6000 	ldr.w	r6, [r8]
  410e60:	f8c8 1000 	str.w	r1, [r8]
  410e64:	2a00      	cmp	r2, #0
  410e66:	d04f      	beq.n	410f08 <__sflush_r+0xd8>
  410e68:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  410e6a:	075f      	lsls	r7, r3, #29
  410e6c:	d505      	bpl.n	410e7a <__sflush_r+0x4a>
  410e6e:	6869      	ldr	r1, [r5, #4]
  410e70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  410e72:	1a52      	subs	r2, r2, r1
  410e74:	b10b      	cbz	r3, 410e7a <__sflush_r+0x4a>
  410e76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  410e78:	1ad2      	subs	r2, r2, r3
  410e7a:	4640      	mov	r0, r8
  410e7c:	69e9      	ldr	r1, [r5, #28]
  410e7e:	2300      	movs	r3, #0
  410e80:	47a0      	blx	r4
  410e82:	1c44      	adds	r4, r0, #1
  410e84:	d04a      	beq.n	410f1c <__sflush_r+0xec>
  410e86:	89aa      	ldrh	r2, [r5, #12]
  410e88:	692b      	ldr	r3, [r5, #16]
  410e8a:	602b      	str	r3, [r5, #0]
  410e8c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  410e90:	b29b      	uxth	r3, r3
  410e92:	2200      	movs	r2, #0
  410e94:	606a      	str	r2, [r5, #4]
  410e96:	04da      	lsls	r2, r3, #19
  410e98:	81ab      	strh	r3, [r5, #12]
  410e9a:	d44c      	bmi.n	410f36 <__sflush_r+0x106>
  410e9c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  410e9e:	f8c8 6000 	str.w	r6, [r8]
  410ea2:	b311      	cbz	r1, 410eea <__sflush_r+0xba>
  410ea4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  410ea8:	4299      	cmp	r1, r3
  410eaa:	d002      	beq.n	410eb2 <__sflush_r+0x82>
  410eac:	4640      	mov	r0, r8
  410eae:	f000 f9c7 	bl	411240 <_free_r>
  410eb2:	2000      	movs	r0, #0
  410eb4:	6328      	str	r0, [r5, #48]	; 0x30
  410eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410eba:	692e      	ldr	r6, [r5, #16]
  410ebc:	b1ae      	cbz	r6, 410eea <__sflush_r+0xba>
  410ebe:	682c      	ldr	r4, [r5, #0]
  410ec0:	602e      	str	r6, [r5, #0]
  410ec2:	0791      	lsls	r1, r2, #30
  410ec4:	bf0c      	ite	eq
  410ec6:	696b      	ldreq	r3, [r5, #20]
  410ec8:	2300      	movne	r3, #0
  410eca:	1ba4      	subs	r4, r4, r6
  410ecc:	60ab      	str	r3, [r5, #8]
  410ece:	e00a      	b.n	410ee6 <__sflush_r+0xb6>
  410ed0:	4632      	mov	r2, r6
  410ed2:	4623      	mov	r3, r4
  410ed4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  410ed6:	69e9      	ldr	r1, [r5, #28]
  410ed8:	4640      	mov	r0, r8
  410eda:	47b8      	blx	r7
  410edc:	2800      	cmp	r0, #0
  410ede:	ebc0 0404 	rsb	r4, r0, r4
  410ee2:	4406      	add	r6, r0
  410ee4:	dd04      	ble.n	410ef0 <__sflush_r+0xc0>
  410ee6:	2c00      	cmp	r4, #0
  410ee8:	dcf2      	bgt.n	410ed0 <__sflush_r+0xa0>
  410eea:	2000      	movs	r0, #0
  410eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410ef0:	89ab      	ldrh	r3, [r5, #12]
  410ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410ef6:	81ab      	strh	r3, [r5, #12]
  410ef8:	f04f 30ff 	mov.w	r0, #4294967295
  410efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410f00:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  410f02:	2a00      	cmp	r2, #0
  410f04:	dca2      	bgt.n	410e4c <__sflush_r+0x1c>
  410f06:	e7f0      	b.n	410eea <__sflush_r+0xba>
  410f08:	2301      	movs	r3, #1
  410f0a:	4640      	mov	r0, r8
  410f0c:	69e9      	ldr	r1, [r5, #28]
  410f0e:	47a0      	blx	r4
  410f10:	1c43      	adds	r3, r0, #1
  410f12:	4602      	mov	r2, r0
  410f14:	d01e      	beq.n	410f54 <__sflush_r+0x124>
  410f16:	89ab      	ldrh	r3, [r5, #12]
  410f18:	6aac      	ldr	r4, [r5, #40]	; 0x28
  410f1a:	e7a6      	b.n	410e6a <__sflush_r+0x3a>
  410f1c:	f8d8 3000 	ldr.w	r3, [r8]
  410f20:	b95b      	cbnz	r3, 410f3a <__sflush_r+0x10a>
  410f22:	89a9      	ldrh	r1, [r5, #12]
  410f24:	606b      	str	r3, [r5, #4]
  410f26:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  410f2a:	b29b      	uxth	r3, r3
  410f2c:	692a      	ldr	r2, [r5, #16]
  410f2e:	81ab      	strh	r3, [r5, #12]
  410f30:	04db      	lsls	r3, r3, #19
  410f32:	602a      	str	r2, [r5, #0]
  410f34:	d5b2      	bpl.n	410e9c <__sflush_r+0x6c>
  410f36:	6528      	str	r0, [r5, #80]	; 0x50
  410f38:	e7b0      	b.n	410e9c <__sflush_r+0x6c>
  410f3a:	2b1d      	cmp	r3, #29
  410f3c:	d001      	beq.n	410f42 <__sflush_r+0x112>
  410f3e:	2b16      	cmp	r3, #22
  410f40:	d119      	bne.n	410f76 <__sflush_r+0x146>
  410f42:	89aa      	ldrh	r2, [r5, #12]
  410f44:	692b      	ldr	r3, [r5, #16]
  410f46:	602b      	str	r3, [r5, #0]
  410f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  410f4c:	2300      	movs	r3, #0
  410f4e:	81aa      	strh	r2, [r5, #12]
  410f50:	606b      	str	r3, [r5, #4]
  410f52:	e7a3      	b.n	410e9c <__sflush_r+0x6c>
  410f54:	f8d8 3000 	ldr.w	r3, [r8]
  410f58:	2b00      	cmp	r3, #0
  410f5a:	d0dc      	beq.n	410f16 <__sflush_r+0xe6>
  410f5c:	2b1d      	cmp	r3, #29
  410f5e:	d007      	beq.n	410f70 <__sflush_r+0x140>
  410f60:	2b16      	cmp	r3, #22
  410f62:	d005      	beq.n	410f70 <__sflush_r+0x140>
  410f64:	89ab      	ldrh	r3, [r5, #12]
  410f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410f6a:	81ab      	strh	r3, [r5, #12]
  410f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410f70:	f8c8 6000 	str.w	r6, [r8]
  410f74:	e7b9      	b.n	410eea <__sflush_r+0xba>
  410f76:	89ab      	ldrh	r3, [r5, #12]
  410f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410f7c:	81ab      	strh	r3, [r5, #12]
  410f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410f82:	bf00      	nop

00410f84 <_fflush_r>:
  410f84:	b510      	push	{r4, lr}
  410f86:	4604      	mov	r4, r0
  410f88:	b082      	sub	sp, #8
  410f8a:	b108      	cbz	r0, 410f90 <_fflush_r+0xc>
  410f8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  410f8e:	b153      	cbz	r3, 410fa6 <_fflush_r+0x22>
  410f90:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  410f94:	b908      	cbnz	r0, 410f9a <_fflush_r+0x16>
  410f96:	b002      	add	sp, #8
  410f98:	bd10      	pop	{r4, pc}
  410f9a:	4620      	mov	r0, r4
  410f9c:	b002      	add	sp, #8
  410f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  410fa2:	f7ff bf45 	b.w	410e30 <__sflush_r>
  410fa6:	9101      	str	r1, [sp, #4]
  410fa8:	f000 f808 	bl	410fbc <__sinit>
  410fac:	9901      	ldr	r1, [sp, #4]
  410fae:	e7ef      	b.n	410f90 <_fflush_r+0xc>

00410fb0 <_cleanup_r>:
  410fb0:	4901      	ldr	r1, [pc, #4]	; (410fb8 <_cleanup_r+0x8>)
  410fb2:	f000 bb9f 	b.w	4116f4 <_fwalk>
  410fb6:	bf00      	nop
  410fb8:	00414751 	.word	0x00414751

00410fbc <__sinit>:
  410fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410fc0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  410fc2:	b083      	sub	sp, #12
  410fc4:	4607      	mov	r7, r0
  410fc6:	2c00      	cmp	r4, #0
  410fc8:	d165      	bne.n	411096 <__sinit+0xda>
  410fca:	6845      	ldr	r5, [r0, #4]
  410fcc:	4833      	ldr	r0, [pc, #204]	; (41109c <__sinit+0xe0>)
  410fce:	63f8      	str	r0, [r7, #60]	; 0x3c
  410fd0:	2304      	movs	r3, #4
  410fd2:	2103      	movs	r1, #3
  410fd4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  410fd8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  410fdc:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  410fe0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  410fe4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  410fe8:	81ab      	strh	r3, [r5, #12]
  410fea:	602c      	str	r4, [r5, #0]
  410fec:	606c      	str	r4, [r5, #4]
  410fee:	60ac      	str	r4, [r5, #8]
  410ff0:	666c      	str	r4, [r5, #100]	; 0x64
  410ff2:	81ec      	strh	r4, [r5, #14]
  410ff4:	612c      	str	r4, [r5, #16]
  410ff6:	616c      	str	r4, [r5, #20]
  410ff8:	61ac      	str	r4, [r5, #24]
  410ffa:	4621      	mov	r1, r4
  410ffc:	2208      	movs	r2, #8
  410ffe:	f7fb fc15 	bl	40c82c <memset>
  411002:	68be      	ldr	r6, [r7, #8]
  411004:	f8df b098 	ldr.w	fp, [pc, #152]	; 4110a0 <__sinit+0xe4>
  411008:	f8df a098 	ldr.w	sl, [pc, #152]	; 4110a4 <__sinit+0xe8>
  41100c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4110a8 <__sinit+0xec>
  411010:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4110ac <__sinit+0xf0>
  411014:	61ed      	str	r5, [r5, #28]
  411016:	2301      	movs	r3, #1
  411018:	2209      	movs	r2, #9
  41101a:	f8c5 b020 	str.w	fp, [r5, #32]
  41101e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  411022:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411026:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  41102a:	4621      	mov	r1, r4
  41102c:	81f3      	strh	r3, [r6, #14]
  41102e:	81b2      	strh	r2, [r6, #12]
  411030:	6034      	str	r4, [r6, #0]
  411032:	6074      	str	r4, [r6, #4]
  411034:	60b4      	str	r4, [r6, #8]
  411036:	6674      	str	r4, [r6, #100]	; 0x64
  411038:	6134      	str	r4, [r6, #16]
  41103a:	6174      	str	r4, [r6, #20]
  41103c:	61b4      	str	r4, [r6, #24]
  41103e:	2208      	movs	r2, #8
  411040:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  411044:	9301      	str	r3, [sp, #4]
  411046:	f7fb fbf1 	bl	40c82c <memset>
  41104a:	68fd      	ldr	r5, [r7, #12]
  41104c:	61f6      	str	r6, [r6, #28]
  41104e:	2012      	movs	r0, #18
  411050:	2202      	movs	r2, #2
  411052:	f8c6 b020 	str.w	fp, [r6, #32]
  411056:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  41105a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  41105e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  411062:	4621      	mov	r1, r4
  411064:	81a8      	strh	r0, [r5, #12]
  411066:	81ea      	strh	r2, [r5, #14]
  411068:	602c      	str	r4, [r5, #0]
  41106a:	606c      	str	r4, [r5, #4]
  41106c:	60ac      	str	r4, [r5, #8]
  41106e:	666c      	str	r4, [r5, #100]	; 0x64
  411070:	612c      	str	r4, [r5, #16]
  411072:	616c      	str	r4, [r5, #20]
  411074:	61ac      	str	r4, [r5, #24]
  411076:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  41107a:	2208      	movs	r2, #8
  41107c:	f7fb fbd6 	bl	40c82c <memset>
  411080:	9b01      	ldr	r3, [sp, #4]
  411082:	61ed      	str	r5, [r5, #28]
  411084:	f8c5 b020 	str.w	fp, [r5, #32]
  411088:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  41108c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411090:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411094:	63bb      	str	r3, [r7, #56]	; 0x38
  411096:	b003      	add	sp, #12
  411098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41109c:	00410fb1 	.word	0x00410fb1
  4110a0:	0040cae1 	.word	0x0040cae1
  4110a4:	0040cb09 	.word	0x0040cb09
  4110a8:	0040cb41 	.word	0x0040cb41
  4110ac:	0040cb61 	.word	0x0040cb61

004110b0 <__sfp_lock_acquire>:
  4110b0:	4770      	bx	lr
  4110b2:	bf00      	nop

004110b4 <__sfp_lock_release>:
  4110b4:	4770      	bx	lr
  4110b6:	bf00      	nop

004110b8 <__libc_fini_array>:
  4110b8:	b538      	push	{r3, r4, r5, lr}
  4110ba:	4d09      	ldr	r5, [pc, #36]	; (4110e0 <__libc_fini_array+0x28>)
  4110bc:	4c09      	ldr	r4, [pc, #36]	; (4110e4 <__libc_fini_array+0x2c>)
  4110be:	1b64      	subs	r4, r4, r5
  4110c0:	10a4      	asrs	r4, r4, #2
  4110c2:	bf18      	it	ne
  4110c4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  4110c8:	d005      	beq.n	4110d6 <__libc_fini_array+0x1e>
  4110ca:	3c01      	subs	r4, #1
  4110cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4110d0:	4798      	blx	r3
  4110d2:	2c00      	cmp	r4, #0
  4110d4:	d1f9      	bne.n	4110ca <__libc_fini_array+0x12>
  4110d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4110da:	f005 b8bb 	b.w	416254 <_fini>
  4110de:	bf00      	nop
  4110e0:	00416260 	.word	0x00416260
  4110e4:	00416264 	.word	0x00416264

004110e8 <_fputwc_r>:
  4110e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4110ec:	8993      	ldrh	r3, [r2, #12]
  4110ee:	460f      	mov	r7, r1
  4110f0:	0499      	lsls	r1, r3, #18
  4110f2:	b082      	sub	sp, #8
  4110f4:	4614      	mov	r4, r2
  4110f6:	4680      	mov	r8, r0
  4110f8:	d406      	bmi.n	411108 <_fputwc_r+0x20>
  4110fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
  4110fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  411100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  411104:	81a3      	strh	r3, [r4, #12]
  411106:	6662      	str	r2, [r4, #100]	; 0x64
  411108:	f000 fb2c 	bl	411764 <__locale_mb_cur_max>
  41110c:	2801      	cmp	r0, #1
  41110e:	d03d      	beq.n	41118c <_fputwc_r+0xa4>
  411110:	463a      	mov	r2, r7
  411112:	4640      	mov	r0, r8
  411114:	a901      	add	r1, sp, #4
  411116:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  41111a:	f003 fa1f 	bl	41455c <_wcrtomb_r>
  41111e:	1c42      	adds	r2, r0, #1
  411120:	4606      	mov	r6, r0
  411122:	d02c      	beq.n	41117e <_fputwc_r+0x96>
  411124:	2800      	cmp	r0, #0
  411126:	d039      	beq.n	41119c <_fputwc_r+0xb4>
  411128:	f89d 1004 	ldrb.w	r1, [sp, #4]
  41112c:	2500      	movs	r5, #0
  41112e:	e009      	b.n	411144 <_fputwc_r+0x5c>
  411130:	6823      	ldr	r3, [r4, #0]
  411132:	7019      	strb	r1, [r3, #0]
  411134:	6823      	ldr	r3, [r4, #0]
  411136:	3301      	adds	r3, #1
  411138:	6023      	str	r3, [r4, #0]
  41113a:	3501      	adds	r5, #1
  41113c:	42b5      	cmp	r5, r6
  41113e:	d22d      	bcs.n	41119c <_fputwc_r+0xb4>
  411140:	ab01      	add	r3, sp, #4
  411142:	5ce9      	ldrb	r1, [r5, r3]
  411144:	68a3      	ldr	r3, [r4, #8]
  411146:	3b01      	subs	r3, #1
  411148:	2b00      	cmp	r3, #0
  41114a:	60a3      	str	r3, [r4, #8]
  41114c:	daf0      	bge.n	411130 <_fputwc_r+0x48>
  41114e:	69a2      	ldr	r2, [r4, #24]
  411150:	4293      	cmp	r3, r2
  411152:	db05      	blt.n	411160 <_fputwc_r+0x78>
  411154:	6823      	ldr	r3, [r4, #0]
  411156:	7019      	strb	r1, [r3, #0]
  411158:	6823      	ldr	r3, [r4, #0]
  41115a:	7819      	ldrb	r1, [r3, #0]
  41115c:	290a      	cmp	r1, #10
  41115e:	d1ea      	bne.n	411136 <_fputwc_r+0x4e>
  411160:	4640      	mov	r0, r8
  411162:	4622      	mov	r2, r4
  411164:	f003 f9a6 	bl	4144b4 <__swbuf_r>
  411168:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  41116c:	4258      	negs	r0, r3
  41116e:	4158      	adcs	r0, r3
  411170:	2800      	cmp	r0, #0
  411172:	d0e2      	beq.n	41113a <_fputwc_r+0x52>
  411174:	f04f 30ff 	mov.w	r0, #4294967295
  411178:	b002      	add	sp, #8
  41117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41117e:	89a3      	ldrh	r3, [r4, #12]
  411180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411184:	81a3      	strh	r3, [r4, #12]
  411186:	b002      	add	sp, #8
  411188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41118c:	1e7b      	subs	r3, r7, #1
  41118e:	2bfe      	cmp	r3, #254	; 0xfe
  411190:	d8be      	bhi.n	411110 <_fputwc_r+0x28>
  411192:	b2f9      	uxtb	r1, r7
  411194:	4606      	mov	r6, r0
  411196:	f88d 1004 	strb.w	r1, [sp, #4]
  41119a:	e7c7      	b.n	41112c <_fputwc_r+0x44>
  41119c:	4638      	mov	r0, r7
  41119e:	b002      	add	sp, #8
  4111a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004111a4 <_malloc_trim_r>:
  4111a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4111a6:	4d23      	ldr	r5, [pc, #140]	; (411234 <_malloc_trim_r+0x90>)
  4111a8:	460f      	mov	r7, r1
  4111aa:	4604      	mov	r4, r0
  4111ac:	f000 fef8 	bl	411fa0 <__malloc_lock>
  4111b0:	68ab      	ldr	r3, [r5, #8]
  4111b2:	685e      	ldr	r6, [r3, #4]
  4111b4:	f026 0603 	bic.w	r6, r6, #3
  4111b8:	1bf1      	subs	r1, r6, r7
  4111ba:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4111be:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4111c2:	f021 010f 	bic.w	r1, r1, #15
  4111c6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  4111ca:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  4111ce:	db07      	blt.n	4111e0 <_malloc_trim_r+0x3c>
  4111d0:	4620      	mov	r0, r4
  4111d2:	2100      	movs	r1, #0
  4111d4:	f001 fd56 	bl	412c84 <_sbrk_r>
  4111d8:	68ab      	ldr	r3, [r5, #8]
  4111da:	4433      	add	r3, r6
  4111dc:	4298      	cmp	r0, r3
  4111de:	d004      	beq.n	4111ea <_malloc_trim_r+0x46>
  4111e0:	4620      	mov	r0, r4
  4111e2:	f000 fedf 	bl	411fa4 <__malloc_unlock>
  4111e6:	2000      	movs	r0, #0
  4111e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4111ea:	4620      	mov	r0, r4
  4111ec:	4279      	negs	r1, r7
  4111ee:	f001 fd49 	bl	412c84 <_sbrk_r>
  4111f2:	3001      	adds	r0, #1
  4111f4:	d00d      	beq.n	411212 <_malloc_trim_r+0x6e>
  4111f6:	4b10      	ldr	r3, [pc, #64]	; (411238 <_malloc_trim_r+0x94>)
  4111f8:	68aa      	ldr	r2, [r5, #8]
  4111fa:	6819      	ldr	r1, [r3, #0]
  4111fc:	1bf6      	subs	r6, r6, r7
  4111fe:	f046 0601 	orr.w	r6, r6, #1
  411202:	4620      	mov	r0, r4
  411204:	1bc9      	subs	r1, r1, r7
  411206:	6056      	str	r6, [r2, #4]
  411208:	6019      	str	r1, [r3, #0]
  41120a:	f000 fecb 	bl	411fa4 <__malloc_unlock>
  41120e:	2001      	movs	r0, #1
  411210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411212:	4620      	mov	r0, r4
  411214:	2100      	movs	r1, #0
  411216:	f001 fd35 	bl	412c84 <_sbrk_r>
  41121a:	68ab      	ldr	r3, [r5, #8]
  41121c:	1ac2      	subs	r2, r0, r3
  41121e:	2a0f      	cmp	r2, #15
  411220:	ddde      	ble.n	4111e0 <_malloc_trim_r+0x3c>
  411222:	4d06      	ldr	r5, [pc, #24]	; (41123c <_malloc_trim_r+0x98>)
  411224:	4904      	ldr	r1, [pc, #16]	; (411238 <_malloc_trim_r+0x94>)
  411226:	682d      	ldr	r5, [r5, #0]
  411228:	f042 0201 	orr.w	r2, r2, #1
  41122c:	1b40      	subs	r0, r0, r5
  41122e:	605a      	str	r2, [r3, #4]
  411230:	6008      	str	r0, [r1, #0]
  411232:	e7d5      	b.n	4111e0 <_malloc_trim_r+0x3c>
  411234:	200007fc 	.word	0x200007fc
  411238:	2000891c 	.word	0x2000891c
  41123c:	20000c08 	.word	0x20000c08

00411240 <_free_r>:
  411240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411244:	460d      	mov	r5, r1
  411246:	4606      	mov	r6, r0
  411248:	2900      	cmp	r1, #0
  41124a:	d055      	beq.n	4112f8 <_free_r+0xb8>
  41124c:	f000 fea8 	bl	411fa0 <__malloc_lock>
  411250:	f855 1c04 	ldr.w	r1, [r5, #-4]
  411254:	f8df c174 	ldr.w	ip, [pc, #372]	; 4113cc <_free_r+0x18c>
  411258:	f021 0301 	bic.w	r3, r1, #1
  41125c:	f1a5 0408 	sub.w	r4, r5, #8
  411260:	18e2      	adds	r2, r4, r3
  411262:	f8dc 0008 	ldr.w	r0, [ip, #8]
  411266:	6857      	ldr	r7, [r2, #4]
  411268:	4290      	cmp	r0, r2
  41126a:	f027 0703 	bic.w	r7, r7, #3
  41126e:	d069      	beq.n	411344 <_free_r+0x104>
  411270:	f011 0101 	ands.w	r1, r1, #1
  411274:	6057      	str	r7, [r2, #4]
  411276:	d032      	beq.n	4112de <_free_r+0x9e>
  411278:	2100      	movs	r1, #0
  41127a:	19d0      	adds	r0, r2, r7
  41127c:	6840      	ldr	r0, [r0, #4]
  41127e:	07c0      	lsls	r0, r0, #31
  411280:	d406      	bmi.n	411290 <_free_r+0x50>
  411282:	443b      	add	r3, r7
  411284:	6890      	ldr	r0, [r2, #8]
  411286:	2900      	cmp	r1, #0
  411288:	d04e      	beq.n	411328 <_free_r+0xe8>
  41128a:	68d2      	ldr	r2, [r2, #12]
  41128c:	60c2      	str	r2, [r0, #12]
  41128e:	6090      	str	r0, [r2, #8]
  411290:	f043 0201 	orr.w	r2, r3, #1
  411294:	6062      	str	r2, [r4, #4]
  411296:	50e3      	str	r3, [r4, r3]
  411298:	b9e1      	cbnz	r1, 4112d4 <_free_r+0x94>
  41129a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41129e:	d32d      	bcc.n	4112fc <_free_r+0xbc>
  4112a0:	0a5a      	lsrs	r2, r3, #9
  4112a2:	2a04      	cmp	r2, #4
  4112a4:	d86a      	bhi.n	41137c <_free_r+0x13c>
  4112a6:	0998      	lsrs	r0, r3, #6
  4112a8:	3038      	adds	r0, #56	; 0x38
  4112aa:	0041      	lsls	r1, r0, #1
  4112ac:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  4112b0:	4946      	ldr	r1, [pc, #280]	; (4113cc <_free_r+0x18c>)
  4112b2:	f8dc 2008 	ldr.w	r2, [ip, #8]
  4112b6:	4562      	cmp	r2, ip
  4112b8:	d066      	beq.n	411388 <_free_r+0x148>
  4112ba:	6851      	ldr	r1, [r2, #4]
  4112bc:	f021 0103 	bic.w	r1, r1, #3
  4112c0:	428b      	cmp	r3, r1
  4112c2:	d202      	bcs.n	4112ca <_free_r+0x8a>
  4112c4:	6892      	ldr	r2, [r2, #8]
  4112c6:	4594      	cmp	ip, r2
  4112c8:	d1f7      	bne.n	4112ba <_free_r+0x7a>
  4112ca:	68d3      	ldr	r3, [r2, #12]
  4112cc:	60e3      	str	r3, [r4, #12]
  4112ce:	60a2      	str	r2, [r4, #8]
  4112d0:	609c      	str	r4, [r3, #8]
  4112d2:	60d4      	str	r4, [r2, #12]
  4112d4:	4630      	mov	r0, r6
  4112d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4112da:	f000 be63 	b.w	411fa4 <__malloc_unlock>
  4112de:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4112e2:	1b64      	subs	r4, r4, r5
  4112e4:	f10c 0808 	add.w	r8, ip, #8
  4112e8:	68a0      	ldr	r0, [r4, #8]
  4112ea:	4540      	cmp	r0, r8
  4112ec:	442b      	add	r3, r5
  4112ee:	d043      	beq.n	411378 <_free_r+0x138>
  4112f0:	68e5      	ldr	r5, [r4, #12]
  4112f2:	60c5      	str	r5, [r0, #12]
  4112f4:	60a8      	str	r0, [r5, #8]
  4112f6:	e7c0      	b.n	41127a <_free_r+0x3a>
  4112f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4112fc:	08db      	lsrs	r3, r3, #3
  4112fe:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  411302:	2501      	movs	r5, #1
  411304:	f8dc 0004 	ldr.w	r0, [ip, #4]
  411308:	6891      	ldr	r1, [r2, #8]
  41130a:	60a1      	str	r1, [r4, #8]
  41130c:	109b      	asrs	r3, r3, #2
  41130e:	fa05 f303 	lsl.w	r3, r5, r3
  411312:	4318      	orrs	r0, r3
  411314:	60e2      	str	r2, [r4, #12]
  411316:	f8cc 0004 	str.w	r0, [ip, #4]
  41131a:	6094      	str	r4, [r2, #8]
  41131c:	4630      	mov	r0, r6
  41131e:	60cc      	str	r4, [r1, #12]
  411320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411324:	f000 be3e 	b.w	411fa4 <__malloc_unlock>
  411328:	4d29      	ldr	r5, [pc, #164]	; (4113d0 <_free_r+0x190>)
  41132a:	42a8      	cmp	r0, r5
  41132c:	d1ad      	bne.n	41128a <_free_r+0x4a>
  41132e:	f043 0201 	orr.w	r2, r3, #1
  411332:	f8cc 4014 	str.w	r4, [ip, #20]
  411336:	f8cc 4010 	str.w	r4, [ip, #16]
  41133a:	60e0      	str	r0, [r4, #12]
  41133c:	60a0      	str	r0, [r4, #8]
  41133e:	6062      	str	r2, [r4, #4]
  411340:	50e3      	str	r3, [r4, r3]
  411342:	e7c7      	b.n	4112d4 <_free_r+0x94>
  411344:	441f      	add	r7, r3
  411346:	07cb      	lsls	r3, r1, #31
  411348:	d407      	bmi.n	41135a <_free_r+0x11a>
  41134a:	f855 3c08 	ldr.w	r3, [r5, #-8]
  41134e:	1ae4      	subs	r4, r4, r3
  411350:	441f      	add	r7, r3
  411352:	68a2      	ldr	r2, [r4, #8]
  411354:	68e3      	ldr	r3, [r4, #12]
  411356:	60d3      	str	r3, [r2, #12]
  411358:	609a      	str	r2, [r3, #8]
  41135a:	4b1e      	ldr	r3, [pc, #120]	; (4113d4 <_free_r+0x194>)
  41135c:	681b      	ldr	r3, [r3, #0]
  41135e:	f047 0201 	orr.w	r2, r7, #1
  411362:	429f      	cmp	r7, r3
  411364:	6062      	str	r2, [r4, #4]
  411366:	f8cc 4008 	str.w	r4, [ip, #8]
  41136a:	d3b3      	bcc.n	4112d4 <_free_r+0x94>
  41136c:	4b1a      	ldr	r3, [pc, #104]	; (4113d8 <_free_r+0x198>)
  41136e:	4630      	mov	r0, r6
  411370:	6819      	ldr	r1, [r3, #0]
  411372:	f7ff ff17 	bl	4111a4 <_malloc_trim_r>
  411376:	e7ad      	b.n	4112d4 <_free_r+0x94>
  411378:	2101      	movs	r1, #1
  41137a:	e77e      	b.n	41127a <_free_r+0x3a>
  41137c:	2a14      	cmp	r2, #20
  41137e:	d80c      	bhi.n	41139a <_free_r+0x15a>
  411380:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  411384:	0041      	lsls	r1, r0, #1
  411386:	e791      	b.n	4112ac <_free_r+0x6c>
  411388:	684b      	ldr	r3, [r1, #4]
  41138a:	1080      	asrs	r0, r0, #2
  41138c:	2501      	movs	r5, #1
  41138e:	fa05 f000 	lsl.w	r0, r5, r0
  411392:	4303      	orrs	r3, r0
  411394:	604b      	str	r3, [r1, #4]
  411396:	4613      	mov	r3, r2
  411398:	e798      	b.n	4112cc <_free_r+0x8c>
  41139a:	2a54      	cmp	r2, #84	; 0x54
  41139c:	d803      	bhi.n	4113a6 <_free_r+0x166>
  41139e:	0b18      	lsrs	r0, r3, #12
  4113a0:	306e      	adds	r0, #110	; 0x6e
  4113a2:	0041      	lsls	r1, r0, #1
  4113a4:	e782      	b.n	4112ac <_free_r+0x6c>
  4113a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4113aa:	d803      	bhi.n	4113b4 <_free_r+0x174>
  4113ac:	0bd8      	lsrs	r0, r3, #15
  4113ae:	3077      	adds	r0, #119	; 0x77
  4113b0:	0041      	lsls	r1, r0, #1
  4113b2:	e77b      	b.n	4112ac <_free_r+0x6c>
  4113b4:	f240 5154 	movw	r1, #1364	; 0x554
  4113b8:	428a      	cmp	r2, r1
  4113ba:	d803      	bhi.n	4113c4 <_free_r+0x184>
  4113bc:	0c98      	lsrs	r0, r3, #18
  4113be:	307c      	adds	r0, #124	; 0x7c
  4113c0:	0041      	lsls	r1, r0, #1
  4113c2:	e773      	b.n	4112ac <_free_r+0x6c>
  4113c4:	21fc      	movs	r1, #252	; 0xfc
  4113c6:	207e      	movs	r0, #126	; 0x7e
  4113c8:	e770      	b.n	4112ac <_free_r+0x6c>
  4113ca:	bf00      	nop
  4113cc:	200007fc 	.word	0x200007fc
  4113d0:	20000804 	.word	0x20000804
  4113d4:	20000c04 	.word	0x20000c04
  4113d8:	20008918 	.word	0x20008918

004113dc <__sfvwrite_r>:
  4113dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4113e0:	6893      	ldr	r3, [r2, #8]
  4113e2:	b083      	sub	sp, #12
  4113e4:	4616      	mov	r6, r2
  4113e6:	4681      	mov	r9, r0
  4113e8:	460c      	mov	r4, r1
  4113ea:	b32b      	cbz	r3, 411438 <__sfvwrite_r+0x5c>
  4113ec:	898b      	ldrh	r3, [r1, #12]
  4113ee:	0719      	lsls	r1, r3, #28
  4113f0:	d526      	bpl.n	411440 <__sfvwrite_r+0x64>
  4113f2:	6922      	ldr	r2, [r4, #16]
  4113f4:	b322      	cbz	r2, 411440 <__sfvwrite_r+0x64>
  4113f6:	f003 0202 	and.w	r2, r3, #2
  4113fa:	b292      	uxth	r2, r2
  4113fc:	6835      	ldr	r5, [r6, #0]
  4113fe:	2a00      	cmp	r2, #0
  411400:	d02c      	beq.n	41145c <__sfvwrite_r+0x80>
  411402:	f04f 0a00 	mov.w	sl, #0
  411406:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 4116f0 <__sfvwrite_r+0x314>
  41140a:	46d0      	mov	r8, sl
  41140c:	45d8      	cmp	r8, fp
  41140e:	bf34      	ite	cc
  411410:	4643      	movcc	r3, r8
  411412:	465b      	movcs	r3, fp
  411414:	4652      	mov	r2, sl
  411416:	4648      	mov	r0, r9
  411418:	f1b8 0f00 	cmp.w	r8, #0
  41141c:	d04f      	beq.n	4114be <__sfvwrite_r+0xe2>
  41141e:	69e1      	ldr	r1, [r4, #28]
  411420:	6a67      	ldr	r7, [r4, #36]	; 0x24
  411422:	47b8      	blx	r7
  411424:	2800      	cmp	r0, #0
  411426:	dd56      	ble.n	4114d6 <__sfvwrite_r+0xfa>
  411428:	68b3      	ldr	r3, [r6, #8]
  41142a:	1a1b      	subs	r3, r3, r0
  41142c:	4482      	add	sl, r0
  41142e:	ebc0 0808 	rsb	r8, r0, r8
  411432:	60b3      	str	r3, [r6, #8]
  411434:	2b00      	cmp	r3, #0
  411436:	d1e9      	bne.n	41140c <__sfvwrite_r+0x30>
  411438:	2000      	movs	r0, #0
  41143a:	b003      	add	sp, #12
  41143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411440:	4648      	mov	r0, r9
  411442:	4621      	mov	r1, r4
  411444:	f7fe fcbc 	bl	40fdc0 <__swsetup_r>
  411448:	2800      	cmp	r0, #0
  41144a:	f040 8148 	bne.w	4116de <__sfvwrite_r+0x302>
  41144e:	89a3      	ldrh	r3, [r4, #12]
  411450:	6835      	ldr	r5, [r6, #0]
  411452:	f003 0202 	and.w	r2, r3, #2
  411456:	b292      	uxth	r2, r2
  411458:	2a00      	cmp	r2, #0
  41145a:	d1d2      	bne.n	411402 <__sfvwrite_r+0x26>
  41145c:	f013 0a01 	ands.w	sl, r3, #1
  411460:	d142      	bne.n	4114e8 <__sfvwrite_r+0x10c>
  411462:	46d0      	mov	r8, sl
  411464:	f1b8 0f00 	cmp.w	r8, #0
  411468:	d023      	beq.n	4114b2 <__sfvwrite_r+0xd6>
  41146a:	059a      	lsls	r2, r3, #22
  41146c:	68a7      	ldr	r7, [r4, #8]
  41146e:	d576      	bpl.n	41155e <__sfvwrite_r+0x182>
  411470:	45b8      	cmp	r8, r7
  411472:	f0c0 80a4 	bcc.w	4115be <__sfvwrite_r+0x1e2>
  411476:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41147a:	f040 80b2 	bne.w	4115e2 <__sfvwrite_r+0x206>
  41147e:	6820      	ldr	r0, [r4, #0]
  411480:	46bb      	mov	fp, r7
  411482:	4651      	mov	r1, sl
  411484:	465a      	mov	r2, fp
  411486:	f000 fd2b 	bl	411ee0 <memmove>
  41148a:	68a2      	ldr	r2, [r4, #8]
  41148c:	6821      	ldr	r1, [r4, #0]
  41148e:	1bd2      	subs	r2, r2, r7
  411490:	eb01 030b 	add.w	r3, r1, fp
  411494:	60a2      	str	r2, [r4, #8]
  411496:	6023      	str	r3, [r4, #0]
  411498:	4642      	mov	r2, r8
  41149a:	68b3      	ldr	r3, [r6, #8]
  41149c:	1a9b      	subs	r3, r3, r2
  41149e:	4492      	add	sl, r2
  4114a0:	ebc2 0808 	rsb	r8, r2, r8
  4114a4:	60b3      	str	r3, [r6, #8]
  4114a6:	2b00      	cmp	r3, #0
  4114a8:	d0c6      	beq.n	411438 <__sfvwrite_r+0x5c>
  4114aa:	89a3      	ldrh	r3, [r4, #12]
  4114ac:	f1b8 0f00 	cmp.w	r8, #0
  4114b0:	d1db      	bne.n	41146a <__sfvwrite_r+0x8e>
  4114b2:	f8d5 a000 	ldr.w	sl, [r5]
  4114b6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4114ba:	3508      	adds	r5, #8
  4114bc:	e7d2      	b.n	411464 <__sfvwrite_r+0x88>
  4114be:	f8d5 a000 	ldr.w	sl, [r5]
  4114c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4114c6:	3508      	adds	r5, #8
  4114c8:	e7a0      	b.n	41140c <__sfvwrite_r+0x30>
  4114ca:	4648      	mov	r0, r9
  4114cc:	4621      	mov	r1, r4
  4114ce:	f7ff fd59 	bl	410f84 <_fflush_r>
  4114d2:	2800      	cmp	r0, #0
  4114d4:	d059      	beq.n	41158a <__sfvwrite_r+0x1ae>
  4114d6:	89a3      	ldrh	r3, [r4, #12]
  4114d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4114dc:	f04f 30ff 	mov.w	r0, #4294967295
  4114e0:	81a3      	strh	r3, [r4, #12]
  4114e2:	b003      	add	sp, #12
  4114e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4114e8:	4692      	mov	sl, r2
  4114ea:	9201      	str	r2, [sp, #4]
  4114ec:	4693      	mov	fp, r2
  4114ee:	4690      	mov	r8, r2
  4114f0:	f1b8 0f00 	cmp.w	r8, #0
  4114f4:	d02b      	beq.n	41154e <__sfvwrite_r+0x172>
  4114f6:	9f01      	ldr	r7, [sp, #4]
  4114f8:	2f00      	cmp	r7, #0
  4114fa:	d064      	beq.n	4115c6 <__sfvwrite_r+0x1ea>
  4114fc:	6820      	ldr	r0, [r4, #0]
  4114fe:	6921      	ldr	r1, [r4, #16]
  411500:	f8d4 c008 	ldr.w	ip, [r4, #8]
  411504:	6962      	ldr	r2, [r4, #20]
  411506:	45c2      	cmp	sl, r8
  411508:	bf34      	ite	cc
  41150a:	4653      	movcc	r3, sl
  41150c:	4643      	movcs	r3, r8
  41150e:	4288      	cmp	r0, r1
  411510:	461f      	mov	r7, r3
  411512:	d903      	bls.n	41151c <__sfvwrite_r+0x140>
  411514:	4494      	add	ip, r2
  411516:	4563      	cmp	r3, ip
  411518:	f300 80ae 	bgt.w	411678 <__sfvwrite_r+0x29c>
  41151c:	4293      	cmp	r3, r2
  41151e:	db36      	blt.n	41158e <__sfvwrite_r+0x1b2>
  411520:	4613      	mov	r3, r2
  411522:	6a67      	ldr	r7, [r4, #36]	; 0x24
  411524:	69e1      	ldr	r1, [r4, #28]
  411526:	4648      	mov	r0, r9
  411528:	465a      	mov	r2, fp
  41152a:	47b8      	blx	r7
  41152c:	1e07      	subs	r7, r0, #0
  41152e:	ddd2      	ble.n	4114d6 <__sfvwrite_r+0xfa>
  411530:	ebba 0a07 	subs.w	sl, sl, r7
  411534:	d03a      	beq.n	4115ac <__sfvwrite_r+0x1d0>
  411536:	68b3      	ldr	r3, [r6, #8]
  411538:	1bdb      	subs	r3, r3, r7
  41153a:	44bb      	add	fp, r7
  41153c:	ebc7 0808 	rsb	r8, r7, r8
  411540:	60b3      	str	r3, [r6, #8]
  411542:	2b00      	cmp	r3, #0
  411544:	f43f af78 	beq.w	411438 <__sfvwrite_r+0x5c>
  411548:	f1b8 0f00 	cmp.w	r8, #0
  41154c:	d1d3      	bne.n	4114f6 <__sfvwrite_r+0x11a>
  41154e:	2700      	movs	r7, #0
  411550:	f8d5 b000 	ldr.w	fp, [r5]
  411554:	f8d5 8004 	ldr.w	r8, [r5, #4]
  411558:	9701      	str	r7, [sp, #4]
  41155a:	3508      	adds	r5, #8
  41155c:	e7c8      	b.n	4114f0 <__sfvwrite_r+0x114>
  41155e:	6820      	ldr	r0, [r4, #0]
  411560:	6923      	ldr	r3, [r4, #16]
  411562:	4298      	cmp	r0, r3
  411564:	d802      	bhi.n	41156c <__sfvwrite_r+0x190>
  411566:	6963      	ldr	r3, [r4, #20]
  411568:	4598      	cmp	r8, r3
  41156a:	d272      	bcs.n	411652 <__sfvwrite_r+0x276>
  41156c:	45b8      	cmp	r8, r7
  41156e:	bf38      	it	cc
  411570:	4647      	movcc	r7, r8
  411572:	463a      	mov	r2, r7
  411574:	4651      	mov	r1, sl
  411576:	f000 fcb3 	bl	411ee0 <memmove>
  41157a:	68a3      	ldr	r3, [r4, #8]
  41157c:	6822      	ldr	r2, [r4, #0]
  41157e:	1bdb      	subs	r3, r3, r7
  411580:	443a      	add	r2, r7
  411582:	60a3      	str	r3, [r4, #8]
  411584:	6022      	str	r2, [r4, #0]
  411586:	2b00      	cmp	r3, #0
  411588:	d09f      	beq.n	4114ca <__sfvwrite_r+0xee>
  41158a:	463a      	mov	r2, r7
  41158c:	e785      	b.n	41149a <__sfvwrite_r+0xbe>
  41158e:	461a      	mov	r2, r3
  411590:	4659      	mov	r1, fp
  411592:	9300      	str	r3, [sp, #0]
  411594:	f000 fca4 	bl	411ee0 <memmove>
  411598:	9b00      	ldr	r3, [sp, #0]
  41159a:	68a1      	ldr	r1, [r4, #8]
  41159c:	6822      	ldr	r2, [r4, #0]
  41159e:	1ac9      	subs	r1, r1, r3
  4115a0:	ebba 0a07 	subs.w	sl, sl, r7
  4115a4:	4413      	add	r3, r2
  4115a6:	60a1      	str	r1, [r4, #8]
  4115a8:	6023      	str	r3, [r4, #0]
  4115aa:	d1c4      	bne.n	411536 <__sfvwrite_r+0x15a>
  4115ac:	4648      	mov	r0, r9
  4115ae:	4621      	mov	r1, r4
  4115b0:	f7ff fce8 	bl	410f84 <_fflush_r>
  4115b4:	2800      	cmp	r0, #0
  4115b6:	d18e      	bne.n	4114d6 <__sfvwrite_r+0xfa>
  4115b8:	f8cd a004 	str.w	sl, [sp, #4]
  4115bc:	e7bb      	b.n	411536 <__sfvwrite_r+0x15a>
  4115be:	6820      	ldr	r0, [r4, #0]
  4115c0:	4647      	mov	r7, r8
  4115c2:	46c3      	mov	fp, r8
  4115c4:	e75d      	b.n	411482 <__sfvwrite_r+0xa6>
  4115c6:	4658      	mov	r0, fp
  4115c8:	210a      	movs	r1, #10
  4115ca:	4642      	mov	r2, r8
  4115cc:	f000 fc40 	bl	411e50 <memchr>
  4115d0:	2800      	cmp	r0, #0
  4115d2:	d07f      	beq.n	4116d4 <__sfvwrite_r+0x2f8>
  4115d4:	f100 0a01 	add.w	sl, r0, #1
  4115d8:	2701      	movs	r7, #1
  4115da:	ebcb 0a0a 	rsb	sl, fp, sl
  4115de:	9701      	str	r7, [sp, #4]
  4115e0:	e78c      	b.n	4114fc <__sfvwrite_r+0x120>
  4115e2:	6822      	ldr	r2, [r4, #0]
  4115e4:	6921      	ldr	r1, [r4, #16]
  4115e6:	6967      	ldr	r7, [r4, #20]
  4115e8:	ebc1 0c02 	rsb	ip, r1, r2
  4115ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4115f0:	f10c 0201 	add.w	r2, ip, #1
  4115f4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4115f8:	4442      	add	r2, r8
  4115fa:	107f      	asrs	r7, r7, #1
  4115fc:	4297      	cmp	r7, r2
  4115fe:	bf34      	ite	cc
  411600:	4617      	movcc	r7, r2
  411602:	463a      	movcs	r2, r7
  411604:	055b      	lsls	r3, r3, #21
  411606:	d54f      	bpl.n	4116a8 <__sfvwrite_r+0x2cc>
  411608:	4611      	mov	r1, r2
  41160a:	4648      	mov	r0, r9
  41160c:	f8cd c000 	str.w	ip, [sp]
  411610:	f000 f93e 	bl	411890 <_malloc_r>
  411614:	f8dd c000 	ldr.w	ip, [sp]
  411618:	4683      	mov	fp, r0
  41161a:	2800      	cmp	r0, #0
  41161c:	d062      	beq.n	4116e4 <__sfvwrite_r+0x308>
  41161e:	4662      	mov	r2, ip
  411620:	6921      	ldr	r1, [r4, #16]
  411622:	f8cd c000 	str.w	ip, [sp]
  411626:	f7fb f867 	bl	40c6f8 <memcpy>
  41162a:	89a2      	ldrh	r2, [r4, #12]
  41162c:	f8dd c000 	ldr.w	ip, [sp]
  411630:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  411638:	81a2      	strh	r2, [r4, #12]
  41163a:	eb0b 000c 	add.w	r0, fp, ip
  41163e:	ebcc 0207 	rsb	r2, ip, r7
  411642:	f8c4 b010 	str.w	fp, [r4, #16]
  411646:	6167      	str	r7, [r4, #20]
  411648:	6020      	str	r0, [r4, #0]
  41164a:	60a2      	str	r2, [r4, #8]
  41164c:	4647      	mov	r7, r8
  41164e:	46c3      	mov	fp, r8
  411650:	e717      	b.n	411482 <__sfvwrite_r+0xa6>
  411652:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  411656:	4590      	cmp	r8, r2
  411658:	bf38      	it	cc
  41165a:	4642      	movcc	r2, r8
  41165c:	fb92 f2f3 	sdiv	r2, r2, r3
  411660:	fb02 f303 	mul.w	r3, r2, r3
  411664:	6a67      	ldr	r7, [r4, #36]	; 0x24
  411666:	69e1      	ldr	r1, [r4, #28]
  411668:	4648      	mov	r0, r9
  41166a:	4652      	mov	r2, sl
  41166c:	47b8      	blx	r7
  41166e:	2800      	cmp	r0, #0
  411670:	f77f af31 	ble.w	4114d6 <__sfvwrite_r+0xfa>
  411674:	4602      	mov	r2, r0
  411676:	e710      	b.n	41149a <__sfvwrite_r+0xbe>
  411678:	4662      	mov	r2, ip
  41167a:	4659      	mov	r1, fp
  41167c:	f8cd c000 	str.w	ip, [sp]
  411680:	f000 fc2e 	bl	411ee0 <memmove>
  411684:	f8dd c000 	ldr.w	ip, [sp]
  411688:	6823      	ldr	r3, [r4, #0]
  41168a:	4463      	add	r3, ip
  41168c:	6023      	str	r3, [r4, #0]
  41168e:	4648      	mov	r0, r9
  411690:	4621      	mov	r1, r4
  411692:	f8cd c000 	str.w	ip, [sp]
  411696:	f7ff fc75 	bl	410f84 <_fflush_r>
  41169a:	f8dd c000 	ldr.w	ip, [sp]
  41169e:	2800      	cmp	r0, #0
  4116a0:	f47f af19 	bne.w	4114d6 <__sfvwrite_r+0xfa>
  4116a4:	4667      	mov	r7, ip
  4116a6:	e743      	b.n	411530 <__sfvwrite_r+0x154>
  4116a8:	4648      	mov	r0, r9
  4116aa:	f8cd c000 	str.w	ip, [sp]
  4116ae:	f001 f8db 	bl	412868 <_realloc_r>
  4116b2:	f8dd c000 	ldr.w	ip, [sp]
  4116b6:	4683      	mov	fp, r0
  4116b8:	2800      	cmp	r0, #0
  4116ba:	d1be      	bne.n	41163a <__sfvwrite_r+0x25e>
  4116bc:	4648      	mov	r0, r9
  4116be:	6921      	ldr	r1, [r4, #16]
  4116c0:	f7ff fdbe 	bl	411240 <_free_r>
  4116c4:	89a3      	ldrh	r3, [r4, #12]
  4116c6:	220c      	movs	r2, #12
  4116c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4116cc:	b29b      	uxth	r3, r3
  4116ce:	f8c9 2000 	str.w	r2, [r9]
  4116d2:	e701      	b.n	4114d8 <__sfvwrite_r+0xfc>
  4116d4:	2701      	movs	r7, #1
  4116d6:	f108 0a01 	add.w	sl, r8, #1
  4116da:	9701      	str	r7, [sp, #4]
  4116dc:	e70e      	b.n	4114fc <__sfvwrite_r+0x120>
  4116de:	f04f 30ff 	mov.w	r0, #4294967295
  4116e2:	e6aa      	b.n	41143a <__sfvwrite_r+0x5e>
  4116e4:	230c      	movs	r3, #12
  4116e6:	f8c9 3000 	str.w	r3, [r9]
  4116ea:	89a3      	ldrh	r3, [r4, #12]
  4116ec:	e6f4      	b.n	4114d8 <__sfvwrite_r+0xfc>
  4116ee:	bf00      	nop
  4116f0:	7ffffc00 	.word	0x7ffffc00

004116f4 <_fwalk>:
  4116f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4116f8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4116fc:	4688      	mov	r8, r1
  4116fe:	d01a      	beq.n	411736 <_fwalk+0x42>
  411700:	2600      	movs	r6, #0
  411702:	687d      	ldr	r5, [r7, #4]
  411704:	68bc      	ldr	r4, [r7, #8]
  411706:	3d01      	subs	r5, #1
  411708:	d40f      	bmi.n	41172a <_fwalk+0x36>
  41170a:	89a3      	ldrh	r3, [r4, #12]
  41170c:	2b01      	cmp	r3, #1
  41170e:	f105 35ff 	add.w	r5, r5, #4294967295
  411712:	d906      	bls.n	411722 <_fwalk+0x2e>
  411714:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  411718:	3301      	adds	r3, #1
  41171a:	4620      	mov	r0, r4
  41171c:	d001      	beq.n	411722 <_fwalk+0x2e>
  41171e:	47c0      	blx	r8
  411720:	4306      	orrs	r6, r0
  411722:	1c6b      	adds	r3, r5, #1
  411724:	f104 0468 	add.w	r4, r4, #104	; 0x68
  411728:	d1ef      	bne.n	41170a <_fwalk+0x16>
  41172a:	683f      	ldr	r7, [r7, #0]
  41172c:	2f00      	cmp	r7, #0
  41172e:	d1e8      	bne.n	411702 <_fwalk+0xe>
  411730:	4630      	mov	r0, r6
  411732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411736:	463e      	mov	r6, r7
  411738:	4630      	mov	r0, r6
  41173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41173e:	bf00      	nop

00411740 <iswspace>:
  411740:	28ff      	cmp	r0, #255	; 0xff
  411742:	d807      	bhi.n	411754 <iswspace+0x14>
  411744:	4b04      	ldr	r3, [pc, #16]	; (411758 <iswspace+0x18>)
  411746:	681b      	ldr	r3, [r3, #0]
  411748:	4418      	add	r0, r3
  41174a:	7840      	ldrb	r0, [r0, #1]
  41174c:	f000 0008 	and.w	r0, r0, #8
  411750:	b2c0      	uxtb	r0, r0
  411752:	4770      	bx	lr
  411754:	2000      	movs	r0, #0
  411756:	4770      	bx	lr
  411758:	2000079c 	.word	0x2000079c

0041175c <__locale_charset>:
  41175c:	4800      	ldr	r0, [pc, #0]	; (411760 <__locale_charset+0x4>)
  41175e:	4770      	bx	lr
  411760:	200007d8 	.word	0x200007d8

00411764 <__locale_mb_cur_max>:
  411764:	4b01      	ldr	r3, [pc, #4]	; (41176c <__locale_mb_cur_max+0x8>)
  411766:	6818      	ldr	r0, [r3, #0]
  411768:	4770      	bx	lr
  41176a:	bf00      	nop
  41176c:	200007f8 	.word	0x200007f8

00411770 <_localeconv_r>:
  411770:	4800      	ldr	r0, [pc, #0]	; (411774 <_localeconv_r+0x4>)
  411772:	4770      	bx	lr
  411774:	200007a0 	.word	0x200007a0

00411778 <_lseek_r>:
  411778:	b570      	push	{r4, r5, r6, lr}
  41177a:	4c08      	ldr	r4, [pc, #32]	; (41179c <_lseek_r+0x24>)
  41177c:	4606      	mov	r6, r0
  41177e:	2500      	movs	r5, #0
  411780:	4608      	mov	r0, r1
  411782:	4611      	mov	r1, r2
  411784:	461a      	mov	r2, r3
  411786:	6025      	str	r5, [r4, #0]
  411788:	f7fa fbd0 	bl	40bf2c <_lseek>
  41178c:	1c43      	adds	r3, r0, #1
  41178e:	d000      	beq.n	411792 <_lseek_r+0x1a>
  411790:	bd70      	pop	{r4, r5, r6, pc}
  411792:	6823      	ldr	r3, [r4, #0]
  411794:	2b00      	cmp	r3, #0
  411796:	d0fb      	beq.n	411790 <_lseek_r+0x18>
  411798:	6033      	str	r3, [r6, #0]
  41179a:	bd70      	pop	{r4, r5, r6, pc}
  41179c:	200099c8 	.word	0x200099c8

004117a0 <__smakebuf_r>:
  4117a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4117a2:	898b      	ldrh	r3, [r1, #12]
  4117a4:	b29a      	uxth	r2, r3
  4117a6:	0796      	lsls	r6, r2, #30
  4117a8:	b091      	sub	sp, #68	; 0x44
  4117aa:	460c      	mov	r4, r1
  4117ac:	4605      	mov	r5, r0
  4117ae:	d437      	bmi.n	411820 <__smakebuf_r+0x80>
  4117b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4117b4:	2900      	cmp	r1, #0
  4117b6:	db17      	blt.n	4117e8 <__smakebuf_r+0x48>
  4117b8:	aa01      	add	r2, sp, #4
  4117ba:	f002 ffd1 	bl	414760 <_fstat_r>
  4117be:	2800      	cmp	r0, #0
  4117c0:	db10      	blt.n	4117e4 <__smakebuf_r+0x44>
  4117c2:	9b02      	ldr	r3, [sp, #8]
  4117c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4117c8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  4117cc:	424f      	negs	r7, r1
  4117ce:	414f      	adcs	r7, r1
  4117d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4117d4:	d02c      	beq.n	411830 <__smakebuf_r+0x90>
  4117d6:	89a3      	ldrh	r3, [r4, #12]
  4117d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4117dc:	81a3      	strh	r3, [r4, #12]
  4117de:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4117e2:	e00b      	b.n	4117fc <__smakebuf_r+0x5c>
  4117e4:	89a3      	ldrh	r3, [r4, #12]
  4117e6:	b29a      	uxth	r2, r3
  4117e8:	f012 0f80 	tst.w	r2, #128	; 0x80
  4117ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4117f0:	81a3      	strh	r3, [r4, #12]
  4117f2:	bf14      	ite	ne
  4117f4:	2640      	movne	r6, #64	; 0x40
  4117f6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4117fa:	2700      	movs	r7, #0
  4117fc:	4628      	mov	r0, r5
  4117fe:	4631      	mov	r1, r6
  411800:	f000 f846 	bl	411890 <_malloc_r>
  411804:	89a3      	ldrh	r3, [r4, #12]
  411806:	2800      	cmp	r0, #0
  411808:	d029      	beq.n	41185e <__smakebuf_r+0xbe>
  41180a:	4a1b      	ldr	r2, [pc, #108]	; (411878 <__smakebuf_r+0xd8>)
  41180c:	63ea      	str	r2, [r5, #60]	; 0x3c
  41180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  411812:	81a3      	strh	r3, [r4, #12]
  411814:	6020      	str	r0, [r4, #0]
  411816:	6120      	str	r0, [r4, #16]
  411818:	6166      	str	r6, [r4, #20]
  41181a:	b9a7      	cbnz	r7, 411846 <__smakebuf_r+0xa6>
  41181c:	b011      	add	sp, #68	; 0x44
  41181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411820:	f101 0343 	add.w	r3, r1, #67	; 0x43
  411824:	2201      	movs	r2, #1
  411826:	600b      	str	r3, [r1, #0]
  411828:	610b      	str	r3, [r1, #16]
  41182a:	614a      	str	r2, [r1, #20]
  41182c:	b011      	add	sp, #68	; 0x44
  41182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411830:	4a12      	ldr	r2, [pc, #72]	; (41187c <__smakebuf_r+0xdc>)
  411832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  411834:	4293      	cmp	r3, r2
  411836:	d1ce      	bne.n	4117d6 <__smakebuf_r+0x36>
  411838:	89a3      	ldrh	r3, [r4, #12]
  41183a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  41183e:	4333      	orrs	r3, r6
  411840:	81a3      	strh	r3, [r4, #12]
  411842:	64e6      	str	r6, [r4, #76]	; 0x4c
  411844:	e7da      	b.n	4117fc <__smakebuf_r+0x5c>
  411846:	4628      	mov	r0, r5
  411848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41184c:	f003 fb4e 	bl	414eec <_isatty_r>
  411850:	2800      	cmp	r0, #0
  411852:	d0e3      	beq.n	41181c <__smakebuf_r+0x7c>
  411854:	89a3      	ldrh	r3, [r4, #12]
  411856:	f043 0301 	orr.w	r3, r3, #1
  41185a:	81a3      	strh	r3, [r4, #12]
  41185c:	e7de      	b.n	41181c <__smakebuf_r+0x7c>
  41185e:	059a      	lsls	r2, r3, #22
  411860:	d4dc      	bmi.n	41181c <__smakebuf_r+0x7c>
  411862:	f104 0243 	add.w	r2, r4, #67	; 0x43
  411866:	f043 0302 	orr.w	r3, r3, #2
  41186a:	2101      	movs	r1, #1
  41186c:	81a3      	strh	r3, [r4, #12]
  41186e:	6022      	str	r2, [r4, #0]
  411870:	6122      	str	r2, [r4, #16]
  411872:	6161      	str	r1, [r4, #20]
  411874:	e7d2      	b.n	41181c <__smakebuf_r+0x7c>
  411876:	bf00      	nop
  411878:	00410fb1 	.word	0x00410fb1
  41187c:	0040cb41 	.word	0x0040cb41

00411880 <malloc>:
  411880:	4b02      	ldr	r3, [pc, #8]	; (41188c <malloc+0xc>)
  411882:	4601      	mov	r1, r0
  411884:	6818      	ldr	r0, [r3, #0]
  411886:	f000 b803 	b.w	411890 <_malloc_r>
  41188a:	bf00      	nop
  41188c:	20000798 	.word	0x20000798

00411890 <_malloc_r>:
  411890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411894:	f101 050b 	add.w	r5, r1, #11
  411898:	2d16      	cmp	r5, #22
  41189a:	b083      	sub	sp, #12
  41189c:	4606      	mov	r6, r0
  41189e:	d927      	bls.n	4118f0 <_malloc_r+0x60>
  4118a0:	f035 0507 	bics.w	r5, r5, #7
  4118a4:	d427      	bmi.n	4118f6 <_malloc_r+0x66>
  4118a6:	42a9      	cmp	r1, r5
  4118a8:	d825      	bhi.n	4118f6 <_malloc_r+0x66>
  4118aa:	4630      	mov	r0, r6
  4118ac:	f000 fb78 	bl	411fa0 <__malloc_lock>
  4118b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4118b4:	d226      	bcs.n	411904 <_malloc_r+0x74>
  4118b6:	4fc1      	ldr	r7, [pc, #772]	; (411bbc <_malloc_r+0x32c>)
  4118b8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  4118bc:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  4118c0:	68dc      	ldr	r4, [r3, #12]
  4118c2:	429c      	cmp	r4, r3
  4118c4:	f000 81d2 	beq.w	411c6c <_malloc_r+0x3dc>
  4118c8:	6863      	ldr	r3, [r4, #4]
  4118ca:	68e2      	ldr	r2, [r4, #12]
  4118cc:	68a1      	ldr	r1, [r4, #8]
  4118ce:	f023 0303 	bic.w	r3, r3, #3
  4118d2:	4423      	add	r3, r4
  4118d4:	4630      	mov	r0, r6
  4118d6:	685d      	ldr	r5, [r3, #4]
  4118d8:	60ca      	str	r2, [r1, #12]
  4118da:	f045 0501 	orr.w	r5, r5, #1
  4118de:	6091      	str	r1, [r2, #8]
  4118e0:	605d      	str	r5, [r3, #4]
  4118e2:	f000 fb5f 	bl	411fa4 <__malloc_unlock>
  4118e6:	3408      	adds	r4, #8
  4118e8:	4620      	mov	r0, r4
  4118ea:	b003      	add	sp, #12
  4118ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4118f0:	2510      	movs	r5, #16
  4118f2:	42a9      	cmp	r1, r5
  4118f4:	d9d9      	bls.n	4118aa <_malloc_r+0x1a>
  4118f6:	2400      	movs	r4, #0
  4118f8:	230c      	movs	r3, #12
  4118fa:	4620      	mov	r0, r4
  4118fc:	6033      	str	r3, [r6, #0]
  4118fe:	b003      	add	sp, #12
  411900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411904:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  411908:	f000 808a 	beq.w	411a20 <_malloc_r+0x190>
  41190c:	f1bc 0f04 	cmp.w	ip, #4
  411910:	f200 8160 	bhi.w	411bd4 <_malloc_r+0x344>
  411914:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  411918:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  41191c:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411920:	4fa6      	ldr	r7, [pc, #664]	; (411bbc <_malloc_r+0x32c>)
  411922:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  411926:	68cc      	ldr	r4, [r1, #12]
  411928:	42a1      	cmp	r1, r4
  41192a:	d105      	bne.n	411938 <_malloc_r+0xa8>
  41192c:	e00c      	b.n	411948 <_malloc_r+0xb8>
  41192e:	2b00      	cmp	r3, #0
  411930:	da7a      	bge.n	411a28 <_malloc_r+0x198>
  411932:	68e4      	ldr	r4, [r4, #12]
  411934:	42a1      	cmp	r1, r4
  411936:	d007      	beq.n	411948 <_malloc_r+0xb8>
  411938:	6862      	ldr	r2, [r4, #4]
  41193a:	f022 0203 	bic.w	r2, r2, #3
  41193e:	1b53      	subs	r3, r2, r5
  411940:	2b0f      	cmp	r3, #15
  411942:	ddf4      	ble.n	41192e <_malloc_r+0x9e>
  411944:	f10c 3cff 	add.w	ip, ip, #4294967295
  411948:	f10c 0c01 	add.w	ip, ip, #1
  41194c:	4b9b      	ldr	r3, [pc, #620]	; (411bbc <_malloc_r+0x32c>)
  41194e:	693c      	ldr	r4, [r7, #16]
  411950:	f103 0e08 	add.w	lr, r3, #8
  411954:	4574      	cmp	r4, lr
  411956:	f000 817e 	beq.w	411c56 <_malloc_r+0x3c6>
  41195a:	6861      	ldr	r1, [r4, #4]
  41195c:	f021 0103 	bic.w	r1, r1, #3
  411960:	1b4a      	subs	r2, r1, r5
  411962:	2a0f      	cmp	r2, #15
  411964:	f300 8164 	bgt.w	411c30 <_malloc_r+0x3a0>
  411968:	2a00      	cmp	r2, #0
  41196a:	f8c3 e014 	str.w	lr, [r3, #20]
  41196e:	f8c3 e010 	str.w	lr, [r3, #16]
  411972:	da6a      	bge.n	411a4a <_malloc_r+0x1ba>
  411974:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  411978:	f080 813a 	bcs.w	411bf0 <_malloc_r+0x360>
  41197c:	08c9      	lsrs	r1, r1, #3
  41197e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  411982:	ea4f 08a1 	mov.w	r8, r1, asr #2
  411986:	685a      	ldr	r2, [r3, #4]
  411988:	6881      	ldr	r1, [r0, #8]
  41198a:	60a1      	str	r1, [r4, #8]
  41198c:	f04f 0901 	mov.w	r9, #1
  411990:	fa09 f808 	lsl.w	r8, r9, r8
  411994:	ea48 0202 	orr.w	r2, r8, r2
  411998:	60e0      	str	r0, [r4, #12]
  41199a:	605a      	str	r2, [r3, #4]
  41199c:	6084      	str	r4, [r0, #8]
  41199e:	60cc      	str	r4, [r1, #12]
  4119a0:	ea4f 03ac 	mov.w	r3, ip, asr #2
  4119a4:	2001      	movs	r0, #1
  4119a6:	4098      	lsls	r0, r3
  4119a8:	4290      	cmp	r0, r2
  4119aa:	d85b      	bhi.n	411a64 <_malloc_r+0x1d4>
  4119ac:	4202      	tst	r2, r0
  4119ae:	d106      	bne.n	4119be <_malloc_r+0x12e>
  4119b0:	f02c 0c03 	bic.w	ip, ip, #3
  4119b4:	0040      	lsls	r0, r0, #1
  4119b6:	4202      	tst	r2, r0
  4119b8:	f10c 0c04 	add.w	ip, ip, #4
  4119bc:	d0fa      	beq.n	4119b4 <_malloc_r+0x124>
  4119be:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  4119c2:	4644      	mov	r4, r8
  4119c4:	46e1      	mov	r9, ip
  4119c6:	68e3      	ldr	r3, [r4, #12]
  4119c8:	429c      	cmp	r4, r3
  4119ca:	d107      	bne.n	4119dc <_malloc_r+0x14c>
  4119cc:	e145      	b.n	411c5a <_malloc_r+0x3ca>
  4119ce:	2a00      	cmp	r2, #0
  4119d0:	f280 8156 	bge.w	411c80 <_malloc_r+0x3f0>
  4119d4:	68db      	ldr	r3, [r3, #12]
  4119d6:	429c      	cmp	r4, r3
  4119d8:	f000 813f 	beq.w	411c5a <_malloc_r+0x3ca>
  4119dc:	6859      	ldr	r1, [r3, #4]
  4119de:	f021 0103 	bic.w	r1, r1, #3
  4119e2:	1b4a      	subs	r2, r1, r5
  4119e4:	2a0f      	cmp	r2, #15
  4119e6:	ddf2      	ble.n	4119ce <_malloc_r+0x13e>
  4119e8:	461c      	mov	r4, r3
  4119ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4119ee:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4119f2:	1959      	adds	r1, r3, r5
  4119f4:	f045 0901 	orr.w	r9, r5, #1
  4119f8:	f042 0501 	orr.w	r5, r2, #1
  4119fc:	f8c3 9004 	str.w	r9, [r3, #4]
  411a00:	4630      	mov	r0, r6
  411a02:	f8c8 c00c 	str.w	ip, [r8, #12]
  411a06:	f8cc 8008 	str.w	r8, [ip, #8]
  411a0a:	6179      	str	r1, [r7, #20]
  411a0c:	6139      	str	r1, [r7, #16]
  411a0e:	f8c1 e00c 	str.w	lr, [r1, #12]
  411a12:	f8c1 e008 	str.w	lr, [r1, #8]
  411a16:	604d      	str	r5, [r1, #4]
  411a18:	508a      	str	r2, [r1, r2]
  411a1a:	f000 fac3 	bl	411fa4 <__malloc_unlock>
  411a1e:	e763      	b.n	4118e8 <_malloc_r+0x58>
  411a20:	217e      	movs	r1, #126	; 0x7e
  411a22:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  411a26:	e77b      	b.n	411920 <_malloc_r+0x90>
  411a28:	4422      	add	r2, r4
  411a2a:	68e3      	ldr	r3, [r4, #12]
  411a2c:	6850      	ldr	r0, [r2, #4]
  411a2e:	68a1      	ldr	r1, [r4, #8]
  411a30:	f040 0501 	orr.w	r5, r0, #1
  411a34:	60cb      	str	r3, [r1, #12]
  411a36:	4630      	mov	r0, r6
  411a38:	6099      	str	r1, [r3, #8]
  411a3a:	6055      	str	r5, [r2, #4]
  411a3c:	f000 fab2 	bl	411fa4 <__malloc_unlock>
  411a40:	3408      	adds	r4, #8
  411a42:	4620      	mov	r0, r4
  411a44:	b003      	add	sp, #12
  411a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411a4a:	4421      	add	r1, r4
  411a4c:	4630      	mov	r0, r6
  411a4e:	684b      	ldr	r3, [r1, #4]
  411a50:	f043 0301 	orr.w	r3, r3, #1
  411a54:	604b      	str	r3, [r1, #4]
  411a56:	f000 faa5 	bl	411fa4 <__malloc_unlock>
  411a5a:	3408      	adds	r4, #8
  411a5c:	4620      	mov	r0, r4
  411a5e:	b003      	add	sp, #12
  411a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411a64:	68bc      	ldr	r4, [r7, #8]
  411a66:	6863      	ldr	r3, [r4, #4]
  411a68:	f023 0903 	bic.w	r9, r3, #3
  411a6c:	45a9      	cmp	r9, r5
  411a6e:	d304      	bcc.n	411a7a <_malloc_r+0x1ea>
  411a70:	ebc5 0309 	rsb	r3, r5, r9
  411a74:	2b0f      	cmp	r3, #15
  411a76:	f300 8091 	bgt.w	411b9c <_malloc_r+0x30c>
  411a7a:	4b51      	ldr	r3, [pc, #324]	; (411bc0 <_malloc_r+0x330>)
  411a7c:	4a51      	ldr	r2, [pc, #324]	; (411bc4 <_malloc_r+0x334>)
  411a7e:	6819      	ldr	r1, [r3, #0]
  411a80:	6813      	ldr	r3, [r2, #0]
  411a82:	3301      	adds	r3, #1
  411a84:	eb05 0a01 	add.w	sl, r5, r1
  411a88:	eb04 0b09 	add.w	fp, r4, r9
  411a8c:	f000 8161 	beq.w	411d52 <_malloc_r+0x4c2>
  411a90:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  411a94:	f10a 0a0f 	add.w	sl, sl, #15
  411a98:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  411a9c:	f02a 0a0f 	bic.w	sl, sl, #15
  411aa0:	4630      	mov	r0, r6
  411aa2:	4651      	mov	r1, sl
  411aa4:	9201      	str	r2, [sp, #4]
  411aa6:	f001 f8ed 	bl	412c84 <_sbrk_r>
  411aaa:	f1b0 3fff 	cmp.w	r0, #4294967295
  411aae:	4680      	mov	r8, r0
  411ab0:	9a01      	ldr	r2, [sp, #4]
  411ab2:	f000 8100 	beq.w	411cb6 <_malloc_r+0x426>
  411ab6:	4583      	cmp	fp, r0
  411ab8:	f200 80fa 	bhi.w	411cb0 <_malloc_r+0x420>
  411abc:	f8df c110 	ldr.w	ip, [pc, #272]	; 411bd0 <_malloc_r+0x340>
  411ac0:	f8dc 3000 	ldr.w	r3, [ip]
  411ac4:	45c3      	cmp	fp, r8
  411ac6:	4453      	add	r3, sl
  411ac8:	f8cc 3000 	str.w	r3, [ip]
  411acc:	f000 814a 	beq.w	411d64 <_malloc_r+0x4d4>
  411ad0:	6812      	ldr	r2, [r2, #0]
  411ad2:	493c      	ldr	r1, [pc, #240]	; (411bc4 <_malloc_r+0x334>)
  411ad4:	3201      	adds	r2, #1
  411ad6:	bf1b      	ittet	ne
  411ad8:	ebcb 0b08 	rsbne	fp, fp, r8
  411adc:	445b      	addne	r3, fp
  411ade:	f8c1 8000 	streq.w	r8, [r1]
  411ae2:	f8cc 3000 	strne.w	r3, [ip]
  411ae6:	f018 0307 	ands.w	r3, r8, #7
  411aea:	f000 8113 	beq.w	411d14 <_malloc_r+0x484>
  411aee:	f1c3 0208 	rsb	r2, r3, #8
  411af2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  411af6:	4490      	add	r8, r2
  411af8:	3308      	adds	r3, #8
  411afa:	44c2      	add	sl, r8
  411afc:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  411b00:	ebca 0a03 	rsb	sl, sl, r3
  411b04:	4651      	mov	r1, sl
  411b06:	4630      	mov	r0, r6
  411b08:	f8cd c004 	str.w	ip, [sp, #4]
  411b0c:	f001 f8ba 	bl	412c84 <_sbrk_r>
  411b10:	1c43      	adds	r3, r0, #1
  411b12:	f8dd c004 	ldr.w	ip, [sp, #4]
  411b16:	f000 8135 	beq.w	411d84 <_malloc_r+0x4f4>
  411b1a:	ebc8 0200 	rsb	r2, r8, r0
  411b1e:	4452      	add	r2, sl
  411b20:	f042 0201 	orr.w	r2, r2, #1
  411b24:	f8dc 3000 	ldr.w	r3, [ip]
  411b28:	f8c7 8008 	str.w	r8, [r7, #8]
  411b2c:	4453      	add	r3, sl
  411b2e:	42bc      	cmp	r4, r7
  411b30:	f8c8 2004 	str.w	r2, [r8, #4]
  411b34:	f8cc 3000 	str.w	r3, [ip]
  411b38:	f8df a094 	ldr.w	sl, [pc, #148]	; 411bd0 <_malloc_r+0x340>
  411b3c:	d015      	beq.n	411b6a <_malloc_r+0x2da>
  411b3e:	f1b9 0f0f 	cmp.w	r9, #15
  411b42:	f240 80ea 	bls.w	411d1a <_malloc_r+0x48a>
  411b46:	6861      	ldr	r1, [r4, #4]
  411b48:	f1a9 020c 	sub.w	r2, r9, #12
  411b4c:	f022 0207 	bic.w	r2, r2, #7
  411b50:	f001 0e01 	and.w	lr, r1, #1
  411b54:	18a1      	adds	r1, r4, r2
  411b56:	2005      	movs	r0, #5
  411b58:	ea42 0e0e 	orr.w	lr, r2, lr
  411b5c:	2a0f      	cmp	r2, #15
  411b5e:	f8c4 e004 	str.w	lr, [r4, #4]
  411b62:	6048      	str	r0, [r1, #4]
  411b64:	6088      	str	r0, [r1, #8]
  411b66:	f200 8111 	bhi.w	411d8c <_malloc_r+0x4fc>
  411b6a:	4a17      	ldr	r2, [pc, #92]	; (411bc8 <_malloc_r+0x338>)
  411b6c:	68bc      	ldr	r4, [r7, #8]
  411b6e:	6811      	ldr	r1, [r2, #0]
  411b70:	428b      	cmp	r3, r1
  411b72:	bf88      	it	hi
  411b74:	6013      	strhi	r3, [r2, #0]
  411b76:	4a15      	ldr	r2, [pc, #84]	; (411bcc <_malloc_r+0x33c>)
  411b78:	6811      	ldr	r1, [r2, #0]
  411b7a:	428b      	cmp	r3, r1
  411b7c:	bf88      	it	hi
  411b7e:	6013      	strhi	r3, [r2, #0]
  411b80:	6862      	ldr	r2, [r4, #4]
  411b82:	f022 0203 	bic.w	r2, r2, #3
  411b86:	4295      	cmp	r5, r2
  411b88:	ebc5 0302 	rsb	r3, r5, r2
  411b8c:	d801      	bhi.n	411b92 <_malloc_r+0x302>
  411b8e:	2b0f      	cmp	r3, #15
  411b90:	dc04      	bgt.n	411b9c <_malloc_r+0x30c>
  411b92:	4630      	mov	r0, r6
  411b94:	f000 fa06 	bl	411fa4 <__malloc_unlock>
  411b98:	2400      	movs	r4, #0
  411b9a:	e6a5      	b.n	4118e8 <_malloc_r+0x58>
  411b9c:	1962      	adds	r2, r4, r5
  411b9e:	f043 0301 	orr.w	r3, r3, #1
  411ba2:	f045 0501 	orr.w	r5, r5, #1
  411ba6:	6065      	str	r5, [r4, #4]
  411ba8:	4630      	mov	r0, r6
  411baa:	60ba      	str	r2, [r7, #8]
  411bac:	6053      	str	r3, [r2, #4]
  411bae:	f000 f9f9 	bl	411fa4 <__malloc_unlock>
  411bb2:	3408      	adds	r4, #8
  411bb4:	4620      	mov	r0, r4
  411bb6:	b003      	add	sp, #12
  411bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411bbc:	200007fc 	.word	0x200007fc
  411bc0:	20008918 	.word	0x20008918
  411bc4:	20000c08 	.word	0x20000c08
  411bc8:	20008914 	.word	0x20008914
  411bcc:	20008910 	.word	0x20008910
  411bd0:	2000891c 	.word	0x2000891c
  411bd4:	f1bc 0f14 	cmp.w	ip, #20
  411bd8:	d961      	bls.n	411c9e <_malloc_r+0x40e>
  411bda:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  411bde:	f200 808f 	bhi.w	411d00 <_malloc_r+0x470>
  411be2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  411be6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  411bea:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411bee:	e697      	b.n	411920 <_malloc_r+0x90>
  411bf0:	0a4b      	lsrs	r3, r1, #9
  411bf2:	2b04      	cmp	r3, #4
  411bf4:	d958      	bls.n	411ca8 <_malloc_r+0x418>
  411bf6:	2b14      	cmp	r3, #20
  411bf8:	f200 80ae 	bhi.w	411d58 <_malloc_r+0x4c8>
  411bfc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  411c00:	0050      	lsls	r0, r2, #1
  411c02:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  411c06:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 411dc4 <_malloc_r+0x534>
  411c0a:	6883      	ldr	r3, [r0, #8]
  411c0c:	4283      	cmp	r3, r0
  411c0e:	f000 808a 	beq.w	411d26 <_malloc_r+0x496>
  411c12:	685a      	ldr	r2, [r3, #4]
  411c14:	f022 0203 	bic.w	r2, r2, #3
  411c18:	4291      	cmp	r1, r2
  411c1a:	d202      	bcs.n	411c22 <_malloc_r+0x392>
  411c1c:	689b      	ldr	r3, [r3, #8]
  411c1e:	4298      	cmp	r0, r3
  411c20:	d1f7      	bne.n	411c12 <_malloc_r+0x382>
  411c22:	68d9      	ldr	r1, [r3, #12]
  411c24:	687a      	ldr	r2, [r7, #4]
  411c26:	60e1      	str	r1, [r4, #12]
  411c28:	60a3      	str	r3, [r4, #8]
  411c2a:	608c      	str	r4, [r1, #8]
  411c2c:	60dc      	str	r4, [r3, #12]
  411c2e:	e6b7      	b.n	4119a0 <_malloc_r+0x110>
  411c30:	1961      	adds	r1, r4, r5
  411c32:	f042 0701 	orr.w	r7, r2, #1
  411c36:	f045 0501 	orr.w	r5, r5, #1
  411c3a:	6065      	str	r5, [r4, #4]
  411c3c:	4630      	mov	r0, r6
  411c3e:	6159      	str	r1, [r3, #20]
  411c40:	6119      	str	r1, [r3, #16]
  411c42:	f8c1 e00c 	str.w	lr, [r1, #12]
  411c46:	f8c1 e008 	str.w	lr, [r1, #8]
  411c4a:	604f      	str	r7, [r1, #4]
  411c4c:	508a      	str	r2, [r1, r2]
  411c4e:	3408      	adds	r4, #8
  411c50:	f000 f9a8 	bl	411fa4 <__malloc_unlock>
  411c54:	e648      	b.n	4118e8 <_malloc_r+0x58>
  411c56:	685a      	ldr	r2, [r3, #4]
  411c58:	e6a2      	b.n	4119a0 <_malloc_r+0x110>
  411c5a:	f109 0901 	add.w	r9, r9, #1
  411c5e:	f019 0f03 	tst.w	r9, #3
  411c62:	f104 0408 	add.w	r4, r4, #8
  411c66:	f47f aeae 	bne.w	4119c6 <_malloc_r+0x136>
  411c6a:	e02d      	b.n	411cc8 <_malloc_r+0x438>
  411c6c:	f104 0308 	add.w	r3, r4, #8
  411c70:	6964      	ldr	r4, [r4, #20]
  411c72:	42a3      	cmp	r3, r4
  411c74:	bf08      	it	eq
  411c76:	f10c 0c02 	addeq.w	ip, ip, #2
  411c7a:	f43f ae67 	beq.w	41194c <_malloc_r+0xbc>
  411c7e:	e623      	b.n	4118c8 <_malloc_r+0x38>
  411c80:	4419      	add	r1, r3
  411c82:	461c      	mov	r4, r3
  411c84:	6848      	ldr	r0, [r1, #4]
  411c86:	68db      	ldr	r3, [r3, #12]
  411c88:	f854 2f08 	ldr.w	r2, [r4, #8]!
  411c8c:	f040 0501 	orr.w	r5, r0, #1
  411c90:	604d      	str	r5, [r1, #4]
  411c92:	4630      	mov	r0, r6
  411c94:	60d3      	str	r3, [r2, #12]
  411c96:	609a      	str	r2, [r3, #8]
  411c98:	f000 f984 	bl	411fa4 <__malloc_unlock>
  411c9c:	e624      	b.n	4118e8 <_malloc_r+0x58>
  411c9e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  411ca2:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411ca6:	e63b      	b.n	411920 <_malloc_r+0x90>
  411ca8:	098a      	lsrs	r2, r1, #6
  411caa:	3238      	adds	r2, #56	; 0x38
  411cac:	0050      	lsls	r0, r2, #1
  411cae:	e7a8      	b.n	411c02 <_malloc_r+0x372>
  411cb0:	42bc      	cmp	r4, r7
  411cb2:	f43f af03 	beq.w	411abc <_malloc_r+0x22c>
  411cb6:	68bc      	ldr	r4, [r7, #8]
  411cb8:	6862      	ldr	r2, [r4, #4]
  411cba:	f022 0203 	bic.w	r2, r2, #3
  411cbe:	e762      	b.n	411b86 <_malloc_r+0x2f6>
  411cc0:	f8d8 8000 	ldr.w	r8, [r8]
  411cc4:	4598      	cmp	r8, r3
  411cc6:	d17b      	bne.n	411dc0 <_malloc_r+0x530>
  411cc8:	f01c 0f03 	tst.w	ip, #3
  411ccc:	f1a8 0308 	sub.w	r3, r8, #8
  411cd0:	f10c 3cff 	add.w	ip, ip, #4294967295
  411cd4:	d1f4      	bne.n	411cc0 <_malloc_r+0x430>
  411cd6:	687b      	ldr	r3, [r7, #4]
  411cd8:	ea23 0300 	bic.w	r3, r3, r0
  411cdc:	607b      	str	r3, [r7, #4]
  411cde:	0040      	lsls	r0, r0, #1
  411ce0:	4298      	cmp	r0, r3
  411ce2:	f63f aebf 	bhi.w	411a64 <_malloc_r+0x1d4>
  411ce6:	2800      	cmp	r0, #0
  411ce8:	f43f aebc 	beq.w	411a64 <_malloc_r+0x1d4>
  411cec:	4203      	tst	r3, r0
  411cee:	46cc      	mov	ip, r9
  411cf0:	f47f ae65 	bne.w	4119be <_malloc_r+0x12e>
  411cf4:	0040      	lsls	r0, r0, #1
  411cf6:	4203      	tst	r3, r0
  411cf8:	f10c 0c04 	add.w	ip, ip, #4
  411cfc:	d0fa      	beq.n	411cf4 <_malloc_r+0x464>
  411cfe:	e65e      	b.n	4119be <_malloc_r+0x12e>
  411d00:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  411d04:	d81a      	bhi.n	411d3c <_malloc_r+0x4ac>
  411d06:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  411d0a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  411d0e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411d12:	e605      	b.n	411920 <_malloc_r+0x90>
  411d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  411d18:	e6ef      	b.n	411afa <_malloc_r+0x26a>
  411d1a:	2301      	movs	r3, #1
  411d1c:	f8c8 3004 	str.w	r3, [r8, #4]
  411d20:	4644      	mov	r4, r8
  411d22:	2200      	movs	r2, #0
  411d24:	e72f      	b.n	411b86 <_malloc_r+0x2f6>
  411d26:	1091      	asrs	r1, r2, #2
  411d28:	2001      	movs	r0, #1
  411d2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  411d2e:	fa00 f101 	lsl.w	r1, r0, r1
  411d32:	430a      	orrs	r2, r1
  411d34:	f8c8 2004 	str.w	r2, [r8, #4]
  411d38:	4619      	mov	r1, r3
  411d3a:	e774      	b.n	411c26 <_malloc_r+0x396>
  411d3c:	f240 5354 	movw	r3, #1364	; 0x554
  411d40:	459c      	cmp	ip, r3
  411d42:	d81b      	bhi.n	411d7c <_malloc_r+0x4ec>
  411d44:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  411d48:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  411d4c:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411d50:	e5e6      	b.n	411920 <_malloc_r+0x90>
  411d52:	f10a 0a10 	add.w	sl, sl, #16
  411d56:	e6a3      	b.n	411aa0 <_malloc_r+0x210>
  411d58:	2b54      	cmp	r3, #84	; 0x54
  411d5a:	d81f      	bhi.n	411d9c <_malloc_r+0x50c>
  411d5c:	0b0a      	lsrs	r2, r1, #12
  411d5e:	326e      	adds	r2, #110	; 0x6e
  411d60:	0050      	lsls	r0, r2, #1
  411d62:	e74e      	b.n	411c02 <_malloc_r+0x372>
  411d64:	f3cb 010b 	ubfx	r1, fp, #0, #12
  411d68:	2900      	cmp	r1, #0
  411d6a:	f47f aeb1 	bne.w	411ad0 <_malloc_r+0x240>
  411d6e:	eb0a 0109 	add.w	r1, sl, r9
  411d72:	68ba      	ldr	r2, [r7, #8]
  411d74:	f041 0101 	orr.w	r1, r1, #1
  411d78:	6051      	str	r1, [r2, #4]
  411d7a:	e6f6      	b.n	411b6a <_malloc_r+0x2da>
  411d7c:	21fc      	movs	r1, #252	; 0xfc
  411d7e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  411d82:	e5cd      	b.n	411920 <_malloc_r+0x90>
  411d84:	2201      	movs	r2, #1
  411d86:	f04f 0a00 	mov.w	sl, #0
  411d8a:	e6cb      	b.n	411b24 <_malloc_r+0x294>
  411d8c:	f104 0108 	add.w	r1, r4, #8
  411d90:	4630      	mov	r0, r6
  411d92:	f7ff fa55 	bl	411240 <_free_r>
  411d96:	f8da 3000 	ldr.w	r3, [sl]
  411d9a:	e6e6      	b.n	411b6a <_malloc_r+0x2da>
  411d9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  411da0:	d803      	bhi.n	411daa <_malloc_r+0x51a>
  411da2:	0bca      	lsrs	r2, r1, #15
  411da4:	3277      	adds	r2, #119	; 0x77
  411da6:	0050      	lsls	r0, r2, #1
  411da8:	e72b      	b.n	411c02 <_malloc_r+0x372>
  411daa:	f240 5254 	movw	r2, #1364	; 0x554
  411dae:	4293      	cmp	r3, r2
  411db0:	d803      	bhi.n	411dba <_malloc_r+0x52a>
  411db2:	0c8a      	lsrs	r2, r1, #18
  411db4:	327c      	adds	r2, #124	; 0x7c
  411db6:	0050      	lsls	r0, r2, #1
  411db8:	e723      	b.n	411c02 <_malloc_r+0x372>
  411dba:	20fc      	movs	r0, #252	; 0xfc
  411dbc:	227e      	movs	r2, #126	; 0x7e
  411dbe:	e720      	b.n	411c02 <_malloc_r+0x372>
  411dc0:	687b      	ldr	r3, [r7, #4]
  411dc2:	e78c      	b.n	411cde <_malloc_r+0x44e>
  411dc4:	200007fc 	.word	0x200007fc

00411dc8 <_mbrtowc_r>:
  411dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411dcc:	b083      	sub	sp, #12
  411dce:	461f      	mov	r7, r3
  411dd0:	4614      	mov	r4, r2
  411dd2:	4605      	mov	r5, r0
  411dd4:	4688      	mov	r8, r1
  411dd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  411dd8:	4b10      	ldr	r3, [pc, #64]	; (411e1c <_mbrtowc_r+0x54>)
  411dda:	b19a      	cbz	r2, 411e04 <_mbrtowc_r+0x3c>
  411ddc:	f8d3 9000 	ldr.w	r9, [r3]
  411de0:	f7ff fcbc 	bl	41175c <__locale_charset>
  411de4:	4641      	mov	r1, r8
  411de6:	e88d 0041 	stmia.w	sp, {r0, r6}
  411dea:	4622      	mov	r2, r4
  411dec:	463b      	mov	r3, r7
  411dee:	4628      	mov	r0, r5
  411df0:	47c8      	blx	r9
  411df2:	1c43      	adds	r3, r0, #1
  411df4:	d103      	bne.n	411dfe <_mbrtowc_r+0x36>
  411df6:	2200      	movs	r2, #0
  411df8:	238a      	movs	r3, #138	; 0x8a
  411dfa:	6032      	str	r2, [r6, #0]
  411dfc:	602b      	str	r3, [r5, #0]
  411dfe:	b003      	add	sp, #12
  411e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411e04:	681f      	ldr	r7, [r3, #0]
  411e06:	f7ff fca9 	bl	41175c <__locale_charset>
  411e0a:	4621      	mov	r1, r4
  411e0c:	e88d 0041 	stmia.w	sp, {r0, r6}
  411e10:	4a03      	ldr	r2, [pc, #12]	; (411e20 <_mbrtowc_r+0x58>)
  411e12:	4628      	mov	r0, r5
  411e14:	2301      	movs	r3, #1
  411e16:	47b8      	blx	r7
  411e18:	e7eb      	b.n	411df2 <_mbrtowc_r+0x2a>
  411e1a:	bf00      	nop
  411e1c:	20000c0c 	.word	0x20000c0c
  411e20:	00415e40 	.word	0x00415e40

00411e24 <__ascii_mbtowc>:
  411e24:	b082      	sub	sp, #8
  411e26:	b149      	cbz	r1, 411e3c <__ascii_mbtowc+0x18>
  411e28:	b15a      	cbz	r2, 411e42 <__ascii_mbtowc+0x1e>
  411e2a:	b16b      	cbz	r3, 411e48 <__ascii_mbtowc+0x24>
  411e2c:	7813      	ldrb	r3, [r2, #0]
  411e2e:	600b      	str	r3, [r1, #0]
  411e30:	7810      	ldrb	r0, [r2, #0]
  411e32:	3000      	adds	r0, #0
  411e34:	bf18      	it	ne
  411e36:	2001      	movne	r0, #1
  411e38:	b002      	add	sp, #8
  411e3a:	4770      	bx	lr
  411e3c:	a901      	add	r1, sp, #4
  411e3e:	2a00      	cmp	r2, #0
  411e40:	d1f3      	bne.n	411e2a <__ascii_mbtowc+0x6>
  411e42:	4610      	mov	r0, r2
  411e44:	b002      	add	sp, #8
  411e46:	4770      	bx	lr
  411e48:	f06f 0001 	mvn.w	r0, #1
  411e4c:	e7f4      	b.n	411e38 <__ascii_mbtowc+0x14>
  411e4e:	bf00      	nop

00411e50 <memchr>:
  411e50:	0783      	lsls	r3, r0, #30
  411e52:	b470      	push	{r4, r5, r6}
  411e54:	b2c9      	uxtb	r1, r1
  411e56:	d03f      	beq.n	411ed8 <memchr+0x88>
  411e58:	1e54      	subs	r4, r2, #1
  411e5a:	b32a      	cbz	r2, 411ea8 <memchr+0x58>
  411e5c:	7803      	ldrb	r3, [r0, #0]
  411e5e:	428b      	cmp	r3, r1
  411e60:	d023      	beq.n	411eaa <memchr+0x5a>
  411e62:	1c43      	adds	r3, r0, #1
  411e64:	e004      	b.n	411e70 <memchr+0x20>
  411e66:	b1fc      	cbz	r4, 411ea8 <memchr+0x58>
  411e68:	7804      	ldrb	r4, [r0, #0]
  411e6a:	428c      	cmp	r4, r1
  411e6c:	d01d      	beq.n	411eaa <memchr+0x5a>
  411e6e:	4614      	mov	r4, r2
  411e70:	f013 0f03 	tst.w	r3, #3
  411e74:	4618      	mov	r0, r3
  411e76:	f104 32ff 	add.w	r2, r4, #4294967295
  411e7a:	f103 0301 	add.w	r3, r3, #1
  411e7e:	d1f2      	bne.n	411e66 <memchr+0x16>
  411e80:	2c03      	cmp	r4, #3
  411e82:	d814      	bhi.n	411eae <memchr+0x5e>
  411e84:	1e65      	subs	r5, r4, #1
  411e86:	b34c      	cbz	r4, 411edc <memchr+0x8c>
  411e88:	7803      	ldrb	r3, [r0, #0]
  411e8a:	428b      	cmp	r3, r1
  411e8c:	d00d      	beq.n	411eaa <memchr+0x5a>
  411e8e:	1c42      	adds	r2, r0, #1
  411e90:	2300      	movs	r3, #0
  411e92:	e002      	b.n	411e9a <memchr+0x4a>
  411e94:	7804      	ldrb	r4, [r0, #0]
  411e96:	428c      	cmp	r4, r1
  411e98:	d007      	beq.n	411eaa <memchr+0x5a>
  411e9a:	42ab      	cmp	r3, r5
  411e9c:	4610      	mov	r0, r2
  411e9e:	f103 0301 	add.w	r3, r3, #1
  411ea2:	f102 0201 	add.w	r2, r2, #1
  411ea6:	d1f5      	bne.n	411e94 <memchr+0x44>
  411ea8:	2000      	movs	r0, #0
  411eaa:	bc70      	pop	{r4, r5, r6}
  411eac:	4770      	bx	lr
  411eae:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  411eb2:	4603      	mov	r3, r0
  411eb4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  411eb8:	4618      	mov	r0, r3
  411eba:	3304      	adds	r3, #4
  411ebc:	6802      	ldr	r2, [r0, #0]
  411ebe:	4072      	eors	r2, r6
  411ec0:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  411ec4:	ea25 0202 	bic.w	r2, r5, r2
  411ec8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  411ecc:	d1da      	bne.n	411e84 <memchr+0x34>
  411ece:	3c04      	subs	r4, #4
  411ed0:	2c03      	cmp	r4, #3
  411ed2:	4618      	mov	r0, r3
  411ed4:	d8f0      	bhi.n	411eb8 <memchr+0x68>
  411ed6:	e7d5      	b.n	411e84 <memchr+0x34>
  411ed8:	4614      	mov	r4, r2
  411eda:	e7d1      	b.n	411e80 <memchr+0x30>
  411edc:	4620      	mov	r0, r4
  411ede:	e7e4      	b.n	411eaa <memchr+0x5a>

00411ee0 <memmove>:
  411ee0:	4288      	cmp	r0, r1
  411ee2:	b4f0      	push	{r4, r5, r6, r7}
  411ee4:	d910      	bls.n	411f08 <memmove+0x28>
  411ee6:	188c      	adds	r4, r1, r2
  411ee8:	42a0      	cmp	r0, r4
  411eea:	d20d      	bcs.n	411f08 <memmove+0x28>
  411eec:	1885      	adds	r5, r0, r2
  411eee:	1e53      	subs	r3, r2, #1
  411ef0:	b142      	cbz	r2, 411f04 <memmove+0x24>
  411ef2:	4621      	mov	r1, r4
  411ef4:	462a      	mov	r2, r5
  411ef6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  411efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
  411efe:	3b01      	subs	r3, #1
  411f00:	1c5c      	adds	r4, r3, #1
  411f02:	d1f8      	bne.n	411ef6 <memmove+0x16>
  411f04:	bcf0      	pop	{r4, r5, r6, r7}
  411f06:	4770      	bx	lr
  411f08:	2a0f      	cmp	r2, #15
  411f0a:	d93f      	bls.n	411f8c <memmove+0xac>
  411f0c:	ea40 0301 	orr.w	r3, r0, r1
  411f10:	079b      	lsls	r3, r3, #30
  411f12:	d13f      	bne.n	411f94 <memmove+0xb4>
  411f14:	f1a2 0710 	sub.w	r7, r2, #16
  411f18:	093f      	lsrs	r7, r7, #4
  411f1a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  411f1e:	3610      	adds	r6, #16
  411f20:	460c      	mov	r4, r1
  411f22:	4603      	mov	r3, r0
  411f24:	6825      	ldr	r5, [r4, #0]
  411f26:	601d      	str	r5, [r3, #0]
  411f28:	6865      	ldr	r5, [r4, #4]
  411f2a:	605d      	str	r5, [r3, #4]
  411f2c:	68a5      	ldr	r5, [r4, #8]
  411f2e:	609d      	str	r5, [r3, #8]
  411f30:	68e5      	ldr	r5, [r4, #12]
  411f32:	60dd      	str	r5, [r3, #12]
  411f34:	3310      	adds	r3, #16
  411f36:	42b3      	cmp	r3, r6
  411f38:	f104 0410 	add.w	r4, r4, #16
  411f3c:	d1f2      	bne.n	411f24 <memmove+0x44>
  411f3e:	1c7b      	adds	r3, r7, #1
  411f40:	f002 0c0f 	and.w	ip, r2, #15
  411f44:	011b      	lsls	r3, r3, #4
  411f46:	f1bc 0f03 	cmp.w	ip, #3
  411f4a:	4419      	add	r1, r3
  411f4c:	4403      	add	r3, r0
  411f4e:	d923      	bls.n	411f98 <memmove+0xb8>
  411f50:	460e      	mov	r6, r1
  411f52:	461d      	mov	r5, r3
  411f54:	4664      	mov	r4, ip
  411f56:	3c04      	subs	r4, #4
  411f58:	f856 7b04 	ldr.w	r7, [r6], #4
  411f5c:	f845 7b04 	str.w	r7, [r5], #4
  411f60:	2c03      	cmp	r4, #3
  411f62:	d8f8      	bhi.n	411f56 <memmove+0x76>
  411f64:	f1ac 0404 	sub.w	r4, ip, #4
  411f68:	f024 0403 	bic.w	r4, r4, #3
  411f6c:	3404      	adds	r4, #4
  411f6e:	f002 0203 	and.w	r2, r2, #3
  411f72:	4423      	add	r3, r4
  411f74:	4421      	add	r1, r4
  411f76:	2a00      	cmp	r2, #0
  411f78:	d0c4      	beq.n	411f04 <memmove+0x24>
  411f7a:	441a      	add	r2, r3
  411f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
  411f80:	f803 4b01 	strb.w	r4, [r3], #1
  411f84:	4293      	cmp	r3, r2
  411f86:	d1f9      	bne.n	411f7c <memmove+0x9c>
  411f88:	bcf0      	pop	{r4, r5, r6, r7}
  411f8a:	4770      	bx	lr
  411f8c:	4603      	mov	r3, r0
  411f8e:	2a00      	cmp	r2, #0
  411f90:	d1f3      	bne.n	411f7a <memmove+0x9a>
  411f92:	e7b7      	b.n	411f04 <memmove+0x24>
  411f94:	4603      	mov	r3, r0
  411f96:	e7f0      	b.n	411f7a <memmove+0x9a>
  411f98:	4662      	mov	r2, ip
  411f9a:	2a00      	cmp	r2, #0
  411f9c:	d1ed      	bne.n	411f7a <memmove+0x9a>
  411f9e:	e7b1      	b.n	411f04 <memmove+0x24>

00411fa0 <__malloc_lock>:
  411fa0:	4770      	bx	lr
  411fa2:	bf00      	nop

00411fa4 <__malloc_unlock>:
  411fa4:	4770      	bx	lr
  411fa6:	bf00      	nop

00411fa8 <_Balloc>:
  411fa8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  411faa:	b570      	push	{r4, r5, r6, lr}
  411fac:	4605      	mov	r5, r0
  411fae:	460c      	mov	r4, r1
  411fb0:	b14a      	cbz	r2, 411fc6 <_Balloc+0x1e>
  411fb2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  411fb6:	b180      	cbz	r0, 411fda <_Balloc+0x32>
  411fb8:	6801      	ldr	r1, [r0, #0]
  411fba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  411fbe:	2200      	movs	r2, #0
  411fc0:	6102      	str	r2, [r0, #16]
  411fc2:	60c2      	str	r2, [r0, #12]
  411fc4:	bd70      	pop	{r4, r5, r6, pc}
  411fc6:	2221      	movs	r2, #33	; 0x21
  411fc8:	2104      	movs	r1, #4
  411fca:	f002 fb51 	bl	414670 <_calloc_r>
  411fce:	64e8      	str	r0, [r5, #76]	; 0x4c
  411fd0:	4602      	mov	r2, r0
  411fd2:	2800      	cmp	r0, #0
  411fd4:	d1ed      	bne.n	411fb2 <_Balloc+0xa>
  411fd6:	2000      	movs	r0, #0
  411fd8:	bd70      	pop	{r4, r5, r6, pc}
  411fda:	2101      	movs	r1, #1
  411fdc:	fa01 f604 	lsl.w	r6, r1, r4
  411fe0:	1d72      	adds	r2, r6, #5
  411fe2:	4628      	mov	r0, r5
  411fe4:	0092      	lsls	r2, r2, #2
  411fe6:	f002 fb43 	bl	414670 <_calloc_r>
  411fea:	2800      	cmp	r0, #0
  411fec:	d0f3      	beq.n	411fd6 <_Balloc+0x2e>
  411fee:	6044      	str	r4, [r0, #4]
  411ff0:	6086      	str	r6, [r0, #8]
  411ff2:	e7e4      	b.n	411fbe <_Balloc+0x16>

00411ff4 <_Bfree>:
  411ff4:	b131      	cbz	r1, 412004 <_Bfree+0x10>
  411ff6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  411ff8:	684a      	ldr	r2, [r1, #4]
  411ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  411ffe:	6008      	str	r0, [r1, #0]
  412000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  412004:	4770      	bx	lr
  412006:	bf00      	nop

00412008 <__multadd>:
  412008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41200c:	f8d1 8010 	ldr.w	r8, [r1, #16]
  412010:	b082      	sub	sp, #8
  412012:	4689      	mov	r9, r1
  412014:	4682      	mov	sl, r0
  412016:	f101 0514 	add.w	r5, r1, #20
  41201a:	2400      	movs	r4, #0
  41201c:	682f      	ldr	r7, [r5, #0]
  41201e:	b2be      	uxth	r6, r7
  412020:	0c3f      	lsrs	r7, r7, #16
  412022:	fb02 3606 	mla	r6, r2, r6, r3
  412026:	fb02 f307 	mul.w	r3, r2, r7
  41202a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  41202e:	3401      	adds	r4, #1
  412030:	b2b6      	uxth	r6, r6
  412032:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  412036:	45a0      	cmp	r8, r4
  412038:	f845 6b04 	str.w	r6, [r5], #4
  41203c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  412040:	dcec      	bgt.n	41201c <__multadd+0x14>
  412042:	b153      	cbz	r3, 41205a <__multadd+0x52>
  412044:	f8d9 2008 	ldr.w	r2, [r9, #8]
  412048:	4590      	cmp	r8, r2
  41204a:	da0a      	bge.n	412062 <__multadd+0x5a>
  41204c:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  412050:	f108 0201 	add.w	r2, r8, #1
  412054:	614b      	str	r3, [r1, #20]
  412056:	f8c9 2010 	str.w	r2, [r9, #16]
  41205a:	4648      	mov	r0, r9
  41205c:	b002      	add	sp, #8
  41205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412062:	f8d9 1004 	ldr.w	r1, [r9, #4]
  412066:	9301      	str	r3, [sp, #4]
  412068:	3101      	adds	r1, #1
  41206a:	4650      	mov	r0, sl
  41206c:	f7ff ff9c 	bl	411fa8 <_Balloc>
  412070:	f8d9 2010 	ldr.w	r2, [r9, #16]
  412074:	3202      	adds	r2, #2
  412076:	f109 010c 	add.w	r1, r9, #12
  41207a:	4604      	mov	r4, r0
  41207c:	0092      	lsls	r2, r2, #2
  41207e:	300c      	adds	r0, #12
  412080:	f7fa fb3a 	bl	40c6f8 <memcpy>
  412084:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  412088:	f8d9 1004 	ldr.w	r1, [r9, #4]
  41208c:	9b01      	ldr	r3, [sp, #4]
  41208e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  412092:	f8c9 0000 	str.w	r0, [r9]
  412096:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  41209a:	46a1      	mov	r9, r4
  41209c:	e7d6      	b.n	41204c <__multadd+0x44>
  41209e:	bf00      	nop

004120a0 <__s2b>:
  4120a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4120a4:	4699      	mov	r9, r3
  4120a6:	4b23      	ldr	r3, [pc, #140]	; (412134 <__s2b+0x94>)
  4120a8:	9e08      	ldr	r6, [sp, #32]
  4120aa:	f109 0408 	add.w	r4, r9, #8
  4120ae:	fb83 5304 	smull	r5, r3, r3, r4
  4120b2:	17e4      	asrs	r4, r4, #31
  4120b4:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  4120b8:	2b01      	cmp	r3, #1
  4120ba:	4607      	mov	r7, r0
  4120bc:	460c      	mov	r4, r1
  4120be:	4690      	mov	r8, r2
  4120c0:	dd35      	ble.n	41212e <__s2b+0x8e>
  4120c2:	2501      	movs	r5, #1
  4120c4:	2100      	movs	r1, #0
  4120c6:	006d      	lsls	r5, r5, #1
  4120c8:	42ab      	cmp	r3, r5
  4120ca:	f101 0101 	add.w	r1, r1, #1
  4120ce:	dcfa      	bgt.n	4120c6 <__s2b+0x26>
  4120d0:	4638      	mov	r0, r7
  4120d2:	f7ff ff69 	bl	411fa8 <_Balloc>
  4120d6:	2301      	movs	r3, #1
  4120d8:	f1b8 0f09 	cmp.w	r8, #9
  4120dc:	6146      	str	r6, [r0, #20]
  4120de:	6103      	str	r3, [r0, #16]
  4120e0:	dd21      	ble.n	412126 <__s2b+0x86>
  4120e2:	f104 0609 	add.w	r6, r4, #9
  4120e6:	4635      	mov	r5, r6
  4120e8:	4444      	add	r4, r8
  4120ea:	f815 3b01 	ldrb.w	r3, [r5], #1
  4120ee:	4601      	mov	r1, r0
  4120f0:	3b30      	subs	r3, #48	; 0x30
  4120f2:	4638      	mov	r0, r7
  4120f4:	220a      	movs	r2, #10
  4120f6:	f7ff ff87 	bl	412008 <__multadd>
  4120fa:	42a5      	cmp	r5, r4
  4120fc:	d1f5      	bne.n	4120ea <__s2b+0x4a>
  4120fe:	eb06 0408 	add.w	r4, r6, r8
  412102:	3c08      	subs	r4, #8
  412104:	45c1      	cmp	r9, r8
  412106:	dd0c      	ble.n	412122 <__s2b+0x82>
  412108:	ebc8 0809 	rsb	r8, r8, r9
  41210c:	44a0      	add	r8, r4
  41210e:	f814 3b01 	ldrb.w	r3, [r4], #1
  412112:	4601      	mov	r1, r0
  412114:	3b30      	subs	r3, #48	; 0x30
  412116:	4638      	mov	r0, r7
  412118:	220a      	movs	r2, #10
  41211a:	f7ff ff75 	bl	412008 <__multadd>
  41211e:	4544      	cmp	r4, r8
  412120:	d1f5      	bne.n	41210e <__s2b+0x6e>
  412122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412126:	340a      	adds	r4, #10
  412128:	f04f 0809 	mov.w	r8, #9
  41212c:	e7ea      	b.n	412104 <__s2b+0x64>
  41212e:	2100      	movs	r1, #0
  412130:	e7ce      	b.n	4120d0 <__s2b+0x30>
  412132:	bf00      	nop
  412134:	38e38e39 	.word	0x38e38e39

00412138 <__hi0bits>:
  412138:	0c03      	lsrs	r3, r0, #16
  41213a:	041b      	lsls	r3, r3, #16
  41213c:	b9b3      	cbnz	r3, 41216c <__hi0bits+0x34>
  41213e:	0400      	lsls	r0, r0, #16
  412140:	2310      	movs	r3, #16
  412142:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  412146:	bf04      	itt	eq
  412148:	0200      	lsleq	r0, r0, #8
  41214a:	3308      	addeq	r3, #8
  41214c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  412150:	bf04      	itt	eq
  412152:	0100      	lsleq	r0, r0, #4
  412154:	3304      	addeq	r3, #4
  412156:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  41215a:	bf04      	itt	eq
  41215c:	0080      	lsleq	r0, r0, #2
  41215e:	3302      	addeq	r3, #2
  412160:	2800      	cmp	r0, #0
  412162:	db07      	blt.n	412174 <__hi0bits+0x3c>
  412164:	0042      	lsls	r2, r0, #1
  412166:	d403      	bmi.n	412170 <__hi0bits+0x38>
  412168:	2020      	movs	r0, #32
  41216a:	4770      	bx	lr
  41216c:	2300      	movs	r3, #0
  41216e:	e7e8      	b.n	412142 <__hi0bits+0xa>
  412170:	1c58      	adds	r0, r3, #1
  412172:	4770      	bx	lr
  412174:	4618      	mov	r0, r3
  412176:	4770      	bx	lr

00412178 <__lo0bits>:
  412178:	6803      	ldr	r3, [r0, #0]
  41217a:	f013 0207 	ands.w	r2, r3, #7
  41217e:	d007      	beq.n	412190 <__lo0bits+0x18>
  412180:	07d9      	lsls	r1, r3, #31
  412182:	d420      	bmi.n	4121c6 <__lo0bits+0x4e>
  412184:	079a      	lsls	r2, r3, #30
  412186:	d420      	bmi.n	4121ca <__lo0bits+0x52>
  412188:	089b      	lsrs	r3, r3, #2
  41218a:	6003      	str	r3, [r0, #0]
  41218c:	2002      	movs	r0, #2
  41218e:	4770      	bx	lr
  412190:	b299      	uxth	r1, r3
  412192:	b909      	cbnz	r1, 412198 <__lo0bits+0x20>
  412194:	0c1b      	lsrs	r3, r3, #16
  412196:	2210      	movs	r2, #16
  412198:	f013 0fff 	tst.w	r3, #255	; 0xff
  41219c:	bf04      	itt	eq
  41219e:	0a1b      	lsreq	r3, r3, #8
  4121a0:	3208      	addeq	r2, #8
  4121a2:	0719      	lsls	r1, r3, #28
  4121a4:	bf04      	itt	eq
  4121a6:	091b      	lsreq	r3, r3, #4
  4121a8:	3204      	addeq	r2, #4
  4121aa:	0799      	lsls	r1, r3, #30
  4121ac:	bf04      	itt	eq
  4121ae:	089b      	lsreq	r3, r3, #2
  4121b0:	3202      	addeq	r2, #2
  4121b2:	07d9      	lsls	r1, r3, #31
  4121b4:	d404      	bmi.n	4121c0 <__lo0bits+0x48>
  4121b6:	085b      	lsrs	r3, r3, #1
  4121b8:	d101      	bne.n	4121be <__lo0bits+0x46>
  4121ba:	2020      	movs	r0, #32
  4121bc:	4770      	bx	lr
  4121be:	3201      	adds	r2, #1
  4121c0:	6003      	str	r3, [r0, #0]
  4121c2:	4610      	mov	r0, r2
  4121c4:	4770      	bx	lr
  4121c6:	2000      	movs	r0, #0
  4121c8:	4770      	bx	lr
  4121ca:	085b      	lsrs	r3, r3, #1
  4121cc:	6003      	str	r3, [r0, #0]
  4121ce:	2001      	movs	r0, #1
  4121d0:	4770      	bx	lr
  4121d2:	bf00      	nop

004121d4 <__i2b>:
  4121d4:	b510      	push	{r4, lr}
  4121d6:	460c      	mov	r4, r1
  4121d8:	2101      	movs	r1, #1
  4121da:	f7ff fee5 	bl	411fa8 <_Balloc>
  4121de:	2201      	movs	r2, #1
  4121e0:	6144      	str	r4, [r0, #20]
  4121e2:	6102      	str	r2, [r0, #16]
  4121e4:	bd10      	pop	{r4, pc}
  4121e6:	bf00      	nop

004121e8 <__multiply>:
  4121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4121ec:	690d      	ldr	r5, [r1, #16]
  4121ee:	f8d2 9010 	ldr.w	r9, [r2, #16]
  4121f2:	454d      	cmp	r5, r9
  4121f4:	b085      	sub	sp, #20
  4121f6:	460c      	mov	r4, r1
  4121f8:	4692      	mov	sl, r2
  4121fa:	da04      	bge.n	412206 <__multiply+0x1e>
  4121fc:	462a      	mov	r2, r5
  4121fe:	4654      	mov	r4, sl
  412200:	464d      	mov	r5, r9
  412202:	468a      	mov	sl, r1
  412204:	4691      	mov	r9, r2
  412206:	68a3      	ldr	r3, [r4, #8]
  412208:	6861      	ldr	r1, [r4, #4]
  41220a:	eb05 0709 	add.w	r7, r5, r9
  41220e:	429f      	cmp	r7, r3
  412210:	bfc8      	it	gt
  412212:	3101      	addgt	r1, #1
  412214:	f7ff fec8 	bl	411fa8 <_Balloc>
  412218:	f100 0614 	add.w	r6, r0, #20
  41221c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  412220:	4546      	cmp	r6, r8
  412222:	9001      	str	r0, [sp, #4]
  412224:	d205      	bcs.n	412232 <__multiply+0x4a>
  412226:	4633      	mov	r3, r6
  412228:	2000      	movs	r0, #0
  41222a:	f843 0b04 	str.w	r0, [r3], #4
  41222e:	4598      	cmp	r8, r3
  412230:	d8fb      	bhi.n	41222a <__multiply+0x42>
  412232:	f10a 0c14 	add.w	ip, sl, #20
  412236:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  41223a:	3414      	adds	r4, #20
  41223c:	45cc      	cmp	ip, r9
  41223e:	9400      	str	r4, [sp, #0]
  412240:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  412244:	d25b      	bcs.n	4122fe <__multiply+0x116>
  412246:	f8cd 8008 	str.w	r8, [sp, #8]
  41224a:	9703      	str	r7, [sp, #12]
  41224c:	46c8      	mov	r8, r9
  41224e:	f85c 3b04 	ldr.w	r3, [ip], #4
  412252:	b29c      	uxth	r4, r3
  412254:	b324      	cbz	r4, 4122a0 <__multiply+0xb8>
  412256:	9a00      	ldr	r2, [sp, #0]
  412258:	4633      	mov	r3, r6
  41225a:	f04f 0900 	mov.w	r9, #0
  41225e:	e000      	b.n	412262 <__multiply+0x7a>
  412260:	460b      	mov	r3, r1
  412262:	f852 7b04 	ldr.w	r7, [r2], #4
  412266:	6819      	ldr	r1, [r3, #0]
  412268:	fa1f fb87 	uxth.w	fp, r7
  41226c:	fa1f fa81 	uxth.w	sl, r1
  412270:	0c38      	lsrs	r0, r7, #16
  412272:	0c09      	lsrs	r1, r1, #16
  412274:	fb04 a70b 	mla	r7, r4, fp, sl
  412278:	44b9      	add	r9, r7
  41227a:	fb04 1000 	mla	r0, r4, r0, r1
  41227e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  412282:	4619      	mov	r1, r3
  412284:	fa1f f989 	uxth.w	r9, r9
  412288:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  41228c:	4295      	cmp	r5, r2
  41228e:	ea4f 4910 	mov.w	r9, r0, lsr #16
  412292:	f841 7b04 	str.w	r7, [r1], #4
  412296:	d8e3      	bhi.n	412260 <__multiply+0x78>
  412298:	f8c3 9004 	str.w	r9, [r3, #4]
  41229c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  4122a0:	ea5f 4913 	movs.w	r9, r3, lsr #16
  4122a4:	d024      	beq.n	4122f0 <__multiply+0x108>
  4122a6:	f8d6 a000 	ldr.w	sl, [r6]
  4122aa:	9b00      	ldr	r3, [sp, #0]
  4122ac:	4650      	mov	r0, sl
  4122ae:	4631      	mov	r1, r6
  4122b0:	f04f 0b00 	mov.w	fp, #0
  4122b4:	e000      	b.n	4122b8 <__multiply+0xd0>
  4122b6:	4611      	mov	r1, r2
  4122b8:	881a      	ldrh	r2, [r3, #0]
  4122ba:	0c00      	lsrs	r0, r0, #16
  4122bc:	fb09 0002 	mla	r0, r9, r2, r0
  4122c0:	4483      	add	fp, r0
  4122c2:	fa1f fa8a 	uxth.w	sl, sl
  4122c6:	460a      	mov	r2, r1
  4122c8:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  4122cc:	f842 0b04 	str.w	r0, [r2], #4
  4122d0:	f853 7b04 	ldr.w	r7, [r3], #4
  4122d4:	6848      	ldr	r0, [r1, #4]
  4122d6:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4122da:	b284      	uxth	r4, r0
  4122dc:	fb09 4a0a 	mla	sl, r9, sl, r4
  4122e0:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  4122e4:	429d      	cmp	r5, r3
  4122e6:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  4122ea:	d8e4      	bhi.n	4122b6 <__multiply+0xce>
  4122ec:	f8c1 a004 	str.w	sl, [r1, #4]
  4122f0:	45e0      	cmp	r8, ip
  4122f2:	f106 0604 	add.w	r6, r6, #4
  4122f6:	d8aa      	bhi.n	41224e <__multiply+0x66>
  4122f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4122fc:	9f03      	ldr	r7, [sp, #12]
  4122fe:	2f00      	cmp	r7, #0
  412300:	dd0a      	ble.n	412318 <__multiply+0x130>
  412302:	f858 3c04 	ldr.w	r3, [r8, #-4]
  412306:	f1a8 0804 	sub.w	r8, r8, #4
  41230a:	b11b      	cbz	r3, 412314 <__multiply+0x12c>
  41230c:	e004      	b.n	412318 <__multiply+0x130>
  41230e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  412312:	b90b      	cbnz	r3, 412318 <__multiply+0x130>
  412314:	3f01      	subs	r7, #1
  412316:	d1fa      	bne.n	41230e <__multiply+0x126>
  412318:	9b01      	ldr	r3, [sp, #4]
  41231a:	4618      	mov	r0, r3
  41231c:	611f      	str	r7, [r3, #16]
  41231e:	b005      	add	sp, #20
  412320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412324 <__pow5mult>:
  412324:	f012 0303 	ands.w	r3, r2, #3
  412328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41232c:	4614      	mov	r4, r2
  41232e:	4607      	mov	r7, r0
  412330:	460e      	mov	r6, r1
  412332:	d12c      	bne.n	41238e <__pow5mult+0x6a>
  412334:	10a4      	asrs	r4, r4, #2
  412336:	d01c      	beq.n	412372 <__pow5mult+0x4e>
  412338:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  41233a:	2d00      	cmp	r5, #0
  41233c:	d030      	beq.n	4123a0 <__pow5mult+0x7c>
  41233e:	f04f 0800 	mov.w	r8, #0
  412342:	e004      	b.n	41234e <__pow5mult+0x2a>
  412344:	1064      	asrs	r4, r4, #1
  412346:	d014      	beq.n	412372 <__pow5mult+0x4e>
  412348:	6828      	ldr	r0, [r5, #0]
  41234a:	b1a8      	cbz	r0, 412378 <__pow5mult+0x54>
  41234c:	4605      	mov	r5, r0
  41234e:	07e3      	lsls	r3, r4, #31
  412350:	d5f8      	bpl.n	412344 <__pow5mult+0x20>
  412352:	4638      	mov	r0, r7
  412354:	4631      	mov	r1, r6
  412356:	462a      	mov	r2, r5
  412358:	f7ff ff46 	bl	4121e8 <__multiply>
  41235c:	b1ae      	cbz	r6, 41238a <__pow5mult+0x66>
  41235e:	6872      	ldr	r2, [r6, #4]
  412360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  412362:	1064      	asrs	r4, r4, #1
  412364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412368:	6031      	str	r1, [r6, #0]
  41236a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  41236e:	4606      	mov	r6, r0
  412370:	d1ea      	bne.n	412348 <__pow5mult+0x24>
  412372:	4630      	mov	r0, r6
  412374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412378:	4638      	mov	r0, r7
  41237a:	4629      	mov	r1, r5
  41237c:	462a      	mov	r2, r5
  41237e:	f7ff ff33 	bl	4121e8 <__multiply>
  412382:	6028      	str	r0, [r5, #0]
  412384:	f8c0 8000 	str.w	r8, [r0]
  412388:	e7e0      	b.n	41234c <__pow5mult+0x28>
  41238a:	4606      	mov	r6, r0
  41238c:	e7da      	b.n	412344 <__pow5mult+0x20>
  41238e:	1e5d      	subs	r5, r3, #1
  412390:	4a0a      	ldr	r2, [pc, #40]	; (4123bc <__pow5mult+0x98>)
  412392:	2300      	movs	r3, #0
  412394:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  412398:	f7ff fe36 	bl	412008 <__multadd>
  41239c:	4606      	mov	r6, r0
  41239e:	e7c9      	b.n	412334 <__pow5mult+0x10>
  4123a0:	2101      	movs	r1, #1
  4123a2:	4638      	mov	r0, r7
  4123a4:	f7ff fe00 	bl	411fa8 <_Balloc>
  4123a8:	f240 2171 	movw	r1, #625	; 0x271
  4123ac:	2201      	movs	r2, #1
  4123ae:	2300      	movs	r3, #0
  4123b0:	6141      	str	r1, [r0, #20]
  4123b2:	6102      	str	r2, [r0, #16]
  4123b4:	4605      	mov	r5, r0
  4123b6:	64b8      	str	r0, [r7, #72]	; 0x48
  4123b8:	6003      	str	r3, [r0, #0]
  4123ba:	e7c0      	b.n	41233e <__pow5mult+0x1a>
  4123bc:	004160d0 	.word	0x004160d0

004123c0 <__lshift>:
  4123c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4123c4:	4693      	mov	fp, r2
  4123c6:	690a      	ldr	r2, [r1, #16]
  4123c8:	688b      	ldr	r3, [r1, #8]
  4123ca:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  4123ce:	eb0a 0902 	add.w	r9, sl, r2
  4123d2:	f109 0601 	add.w	r6, r9, #1
  4123d6:	429e      	cmp	r6, r3
  4123d8:	460f      	mov	r7, r1
  4123da:	4680      	mov	r8, r0
  4123dc:	6849      	ldr	r1, [r1, #4]
  4123de:	dd04      	ble.n	4123ea <__lshift+0x2a>
  4123e0:	005b      	lsls	r3, r3, #1
  4123e2:	429e      	cmp	r6, r3
  4123e4:	f101 0101 	add.w	r1, r1, #1
  4123e8:	dcfa      	bgt.n	4123e0 <__lshift+0x20>
  4123ea:	4640      	mov	r0, r8
  4123ec:	f7ff fddc 	bl	411fa8 <_Balloc>
  4123f0:	f1ba 0f00 	cmp.w	sl, #0
  4123f4:	f100 0414 	add.w	r4, r0, #20
  4123f8:	dd09      	ble.n	41240e <__lshift+0x4e>
  4123fa:	2300      	movs	r3, #0
  4123fc:	461a      	mov	r2, r3
  4123fe:	4625      	mov	r5, r4
  412400:	3301      	adds	r3, #1
  412402:	4553      	cmp	r3, sl
  412404:	f845 2b04 	str.w	r2, [r5], #4
  412408:	d1fa      	bne.n	412400 <__lshift+0x40>
  41240a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  41240e:	693a      	ldr	r2, [r7, #16]
  412410:	f107 0314 	add.w	r3, r7, #20
  412414:	f01b 0b1f 	ands.w	fp, fp, #31
  412418:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  41241c:	d021      	beq.n	412462 <__lshift+0xa2>
  41241e:	f1cb 0a20 	rsb	sl, fp, #32
  412422:	2200      	movs	r2, #0
  412424:	e000      	b.n	412428 <__lshift+0x68>
  412426:	462c      	mov	r4, r5
  412428:	6819      	ldr	r1, [r3, #0]
  41242a:	4625      	mov	r5, r4
  41242c:	fa01 f10b 	lsl.w	r1, r1, fp
  412430:	430a      	orrs	r2, r1
  412432:	f845 2b04 	str.w	r2, [r5], #4
  412436:	f853 2b04 	ldr.w	r2, [r3], #4
  41243a:	4563      	cmp	r3, ip
  41243c:	fa22 f20a 	lsr.w	r2, r2, sl
  412440:	d3f1      	bcc.n	412426 <__lshift+0x66>
  412442:	6062      	str	r2, [r4, #4]
  412444:	b10a      	cbz	r2, 41244a <__lshift+0x8a>
  412446:	f109 0602 	add.w	r6, r9, #2
  41244a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  41244e:	687a      	ldr	r2, [r7, #4]
  412450:	3e01      	subs	r6, #1
  412452:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412456:	6106      	str	r6, [r0, #16]
  412458:	6039      	str	r1, [r7, #0]
  41245a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  41245e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412462:	f853 2b04 	ldr.w	r2, [r3], #4
  412466:	f844 2b04 	str.w	r2, [r4], #4
  41246a:	459c      	cmp	ip, r3
  41246c:	d9ed      	bls.n	41244a <__lshift+0x8a>
  41246e:	f853 2b04 	ldr.w	r2, [r3], #4
  412472:	f844 2b04 	str.w	r2, [r4], #4
  412476:	459c      	cmp	ip, r3
  412478:	d8f3      	bhi.n	412462 <__lshift+0xa2>
  41247a:	e7e6      	b.n	41244a <__lshift+0x8a>

0041247c <__mcmp>:
  41247c:	6902      	ldr	r2, [r0, #16]
  41247e:	690b      	ldr	r3, [r1, #16]
  412480:	1ad2      	subs	r2, r2, r3
  412482:	b410      	push	{r4}
  412484:	d115      	bne.n	4124b2 <__mcmp+0x36>
  412486:	009b      	lsls	r3, r3, #2
  412488:	3014      	adds	r0, #20
  41248a:	3114      	adds	r1, #20
  41248c:	4419      	add	r1, r3
  41248e:	4403      	add	r3, r0
  412490:	e001      	b.n	412496 <__mcmp+0x1a>
  412492:	4298      	cmp	r0, r3
  412494:	d211      	bcs.n	4124ba <__mcmp+0x3e>
  412496:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41249a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  41249e:	42a2      	cmp	r2, r4
  4124a0:	d0f7      	beq.n	412492 <__mcmp+0x16>
  4124a2:	4294      	cmp	r4, r2
  4124a4:	bf94      	ite	ls
  4124a6:	2001      	movls	r0, #1
  4124a8:	f04f 30ff 	movhi.w	r0, #4294967295
  4124ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4124b0:	4770      	bx	lr
  4124b2:	4610      	mov	r0, r2
  4124b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4124b8:	4770      	bx	lr
  4124ba:	2000      	movs	r0, #0
  4124bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4124c0:	4770      	bx	lr
  4124c2:	bf00      	nop

004124c4 <__mdiff>:
  4124c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4124c8:	460d      	mov	r5, r1
  4124ca:	4604      	mov	r4, r0
  4124cc:	4611      	mov	r1, r2
  4124ce:	4628      	mov	r0, r5
  4124d0:	4616      	mov	r6, r2
  4124d2:	f7ff ffd3 	bl	41247c <__mcmp>
  4124d6:	1e07      	subs	r7, r0, #0
  4124d8:	d055      	beq.n	412586 <__mdiff+0xc2>
  4124da:	db4e      	blt.n	41257a <__mdiff+0xb6>
  4124dc:	f04f 0800 	mov.w	r8, #0
  4124e0:	6869      	ldr	r1, [r5, #4]
  4124e2:	4620      	mov	r0, r4
  4124e4:	f7ff fd60 	bl	411fa8 <_Balloc>
  4124e8:	692f      	ldr	r7, [r5, #16]
  4124ea:	6932      	ldr	r2, [r6, #16]
  4124ec:	f8c0 800c 	str.w	r8, [r0, #12]
  4124f0:	3514      	adds	r5, #20
  4124f2:	3614      	adds	r6, #20
  4124f4:	f100 0314 	add.w	r3, r0, #20
  4124f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  4124fc:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  412500:	2100      	movs	r1, #0
  412502:	f856 2b04 	ldr.w	r2, [r6], #4
  412506:	f855 4b04 	ldr.w	r4, [r5], #4
  41250a:	fa1f f982 	uxth.w	r9, r2
  41250e:	fa11 fa84 	uxtah	sl, r1, r4
  412512:	0c11      	lsrs	r1, r2, #16
  412514:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  412518:	ebc9 020a 	rsb	r2, r9, sl
  41251c:	eb01 4122 	add.w	r1, r1, r2, asr #16
  412520:	b292      	uxth	r2, r2
  412522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  412526:	45b0      	cmp	r8, r6
  412528:	f843 2b04 	str.w	r2, [r3], #4
  41252c:	ea4f 4121 	mov.w	r1, r1, asr #16
  412530:	462c      	mov	r4, r5
  412532:	d8e6      	bhi.n	412502 <__mdiff+0x3e>
  412534:	45ac      	cmp	ip, r5
  412536:	4698      	mov	r8, r3
  412538:	d915      	bls.n	412566 <__mdiff+0xa2>
  41253a:	f854 6b04 	ldr.w	r6, [r4], #4
  41253e:	fa11 f186 	uxtah	r1, r1, r6
  412542:	0c36      	lsrs	r6, r6, #16
  412544:	eb06 4621 	add.w	r6, r6, r1, asr #16
  412548:	b289      	uxth	r1, r1
  41254a:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  41254e:	45a4      	cmp	ip, r4
  412550:	f843 2b04 	str.w	r2, [r3], #4
  412554:	ea4f 4126 	mov.w	r1, r6, asr #16
  412558:	d8ef      	bhi.n	41253a <__mdiff+0x76>
  41255a:	43eb      	mvns	r3, r5
  41255c:	4463      	add	r3, ip
  41255e:	f023 0303 	bic.w	r3, r3, #3
  412562:	3304      	adds	r3, #4
  412564:	4443      	add	r3, r8
  412566:	3b04      	subs	r3, #4
  412568:	b922      	cbnz	r2, 412574 <__mdiff+0xb0>
  41256a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41256e:	3f01      	subs	r7, #1
  412570:	2a00      	cmp	r2, #0
  412572:	d0fa      	beq.n	41256a <__mdiff+0xa6>
  412574:	6107      	str	r7, [r0, #16]
  412576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41257a:	462b      	mov	r3, r5
  41257c:	f04f 0801 	mov.w	r8, #1
  412580:	4635      	mov	r5, r6
  412582:	461e      	mov	r6, r3
  412584:	e7ac      	b.n	4124e0 <__mdiff+0x1c>
  412586:	4620      	mov	r0, r4
  412588:	4639      	mov	r1, r7
  41258a:	f7ff fd0d 	bl	411fa8 <_Balloc>
  41258e:	2301      	movs	r3, #1
  412590:	6147      	str	r7, [r0, #20]
  412592:	6103      	str	r3, [r0, #16]
  412594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00412598 <__ulp>:
  412598:	4b0e      	ldr	r3, [pc, #56]	; (4125d4 <__ulp+0x3c>)
  41259a:	400b      	ands	r3, r1
  41259c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4125a0:	2b00      	cmp	r3, #0
  4125a2:	dd02      	ble.n	4125aa <__ulp+0x12>
  4125a4:	4619      	mov	r1, r3
  4125a6:	2000      	movs	r0, #0
  4125a8:	4770      	bx	lr
  4125aa:	425b      	negs	r3, r3
  4125ac:	151b      	asrs	r3, r3, #20
  4125ae:	2b13      	cmp	r3, #19
  4125b0:	dd0a      	ble.n	4125c8 <__ulp+0x30>
  4125b2:	2b32      	cmp	r3, #50	; 0x32
  4125b4:	bfdd      	ittte	le
  4125b6:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  4125ba:	2201      	movle	r2, #1
  4125bc:	fa02 f303 	lslle.w	r3, r2, r3
  4125c0:	2301      	movgt	r3, #1
  4125c2:	2100      	movs	r1, #0
  4125c4:	4618      	mov	r0, r3
  4125c6:	4770      	bx	lr
  4125c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4125cc:	fa42 f103 	asr.w	r1, r2, r3
  4125d0:	2000      	movs	r0, #0
  4125d2:	4770      	bx	lr
  4125d4:	7ff00000 	.word	0x7ff00000

004125d8 <__b2d>:
  4125d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4125da:	6904      	ldr	r4, [r0, #16]
  4125dc:	f100 0614 	add.w	r6, r0, #20
  4125e0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  4125e4:	460f      	mov	r7, r1
  4125e6:	f854 5c04 	ldr.w	r5, [r4, #-4]
  4125ea:	4628      	mov	r0, r5
  4125ec:	f7ff fda4 	bl	412138 <__hi0bits>
  4125f0:	f1c0 0320 	rsb	r3, r0, #32
  4125f4:	280a      	cmp	r0, #10
  4125f6:	603b      	str	r3, [r7, #0]
  4125f8:	f1a4 0104 	sub.w	r1, r4, #4
  4125fc:	dc19      	bgt.n	412632 <__b2d+0x5a>
  4125fe:	428e      	cmp	r6, r1
  412600:	f1c0 070b 	rsb	r7, r0, #11
  412604:	bf38      	it	cc
  412606:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  41260a:	fa25 fc07 	lsr.w	ip, r5, r7
  41260e:	f100 0015 	add.w	r0, r0, #21
  412612:	bf38      	it	cc
  412614:	fa21 f707 	lsrcc.w	r7, r1, r7
  412618:	fa05 f500 	lsl.w	r5, r5, r0
  41261c:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  412620:	bf28      	it	cs
  412622:	2700      	movcs	r7, #0
  412624:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  412628:	ea47 0205 	orr.w	r2, r7, r5
  41262c:	4610      	mov	r0, r2
  41262e:	4619      	mov	r1, r3
  412630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412632:	428e      	cmp	r6, r1
  412634:	bf36      	itet	cc
  412636:	f1a4 0108 	subcc.w	r1, r4, #8
  41263a:	2400      	movcs	r4, #0
  41263c:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  412640:	f1b0 070b 	subs.w	r7, r0, #11
  412644:	d019      	beq.n	41267a <__b2d+0xa2>
  412646:	42b1      	cmp	r1, r6
  412648:	bf88      	it	hi
  41264a:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  41264e:	fa05 f507 	lsl.w	r5, r5, r7
  412652:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  412656:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  41265a:	fa24 fc00 	lsr.w	ip, r4, r0
  41265e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  412662:	bf8c      	ite	hi
  412664:	fa21 f000 	lsrhi.w	r0, r1, r0
  412668:	2000      	movls	r0, #0
  41266a:	40bc      	lsls	r4, r7
  41266c:	ea45 030c 	orr.w	r3, r5, ip
  412670:	ea40 0204 	orr.w	r2, r0, r4
  412674:	4610      	mov	r0, r2
  412676:	4619      	mov	r1, r3
  412678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41267a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  41267e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  412682:	4622      	mov	r2, r4
  412684:	4610      	mov	r0, r2
  412686:	4619      	mov	r1, r3
  412688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41268a:	bf00      	nop

0041268c <__d2b>:
  41268c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412690:	b083      	sub	sp, #12
  412692:	2101      	movs	r1, #1
  412694:	461d      	mov	r5, r3
  412696:	f3c3 560a 	ubfx	r6, r3, #20, #11
  41269a:	4614      	mov	r4, r2
  41269c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41269e:	f7ff fc83 	bl	411fa8 <_Balloc>
  4126a2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4126a6:	4680      	mov	r8, r0
  4126a8:	b10e      	cbz	r6, 4126ae <__d2b+0x22>
  4126aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4126ae:	9301      	str	r3, [sp, #4]
  4126b0:	b324      	cbz	r4, 4126fc <__d2b+0x70>
  4126b2:	a802      	add	r0, sp, #8
  4126b4:	f840 4d08 	str.w	r4, [r0, #-8]!
  4126b8:	4668      	mov	r0, sp
  4126ba:	f7ff fd5d 	bl	412178 <__lo0bits>
  4126be:	2800      	cmp	r0, #0
  4126c0:	d135      	bne.n	41272e <__d2b+0xa2>
  4126c2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4126c6:	f8c8 2014 	str.w	r2, [r8, #20]
  4126ca:	2b00      	cmp	r3, #0
  4126cc:	bf0c      	ite	eq
  4126ce:	2401      	moveq	r4, #1
  4126d0:	2402      	movne	r4, #2
  4126d2:	f8c8 3018 	str.w	r3, [r8, #24]
  4126d6:	f8c8 4010 	str.w	r4, [r8, #16]
  4126da:	b9de      	cbnz	r6, 412714 <__d2b+0x88>
  4126dc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  4126e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4126e4:	6038      	str	r0, [r7, #0]
  4126e6:	6918      	ldr	r0, [r3, #16]
  4126e8:	f7ff fd26 	bl	412138 <__hi0bits>
  4126ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4126ee:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  4126f2:	6018      	str	r0, [r3, #0]
  4126f4:	4640      	mov	r0, r8
  4126f6:	b003      	add	sp, #12
  4126f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4126fc:	a801      	add	r0, sp, #4
  4126fe:	f7ff fd3b 	bl	412178 <__lo0bits>
  412702:	2401      	movs	r4, #1
  412704:	9b01      	ldr	r3, [sp, #4]
  412706:	f8c8 3014 	str.w	r3, [r8, #20]
  41270a:	3020      	adds	r0, #32
  41270c:	f8c8 4010 	str.w	r4, [r8, #16]
  412710:	2e00      	cmp	r6, #0
  412712:	d0e3      	beq.n	4126dc <__d2b+0x50>
  412714:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  412718:	eb09 0300 	add.w	r3, r9, r0
  41271c:	603b      	str	r3, [r7, #0]
  41271e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  412724:	6018      	str	r0, [r3, #0]
  412726:	4640      	mov	r0, r8
  412728:	b003      	add	sp, #12
  41272a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41272e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412732:	f1c0 0120 	rsb	r1, r0, #32
  412736:	fa03 f101 	lsl.w	r1, r3, r1
  41273a:	430a      	orrs	r2, r1
  41273c:	40c3      	lsrs	r3, r0
  41273e:	9301      	str	r3, [sp, #4]
  412740:	f8c8 2014 	str.w	r2, [r8, #20]
  412744:	e7c1      	b.n	4126ca <__d2b+0x3e>
  412746:	bf00      	nop

00412748 <__ratio>:
  412748:	b5f0      	push	{r4, r5, r6, r7, lr}
  41274a:	b083      	sub	sp, #12
  41274c:	460e      	mov	r6, r1
  41274e:	4669      	mov	r1, sp
  412750:	4607      	mov	r7, r0
  412752:	f7ff ff41 	bl	4125d8 <__b2d>
  412756:	4604      	mov	r4, r0
  412758:	460d      	mov	r5, r1
  41275a:	4630      	mov	r0, r6
  41275c:	a901      	add	r1, sp, #4
  41275e:	f7ff ff3b 	bl	4125d8 <__b2d>
  412762:	4602      	mov	r2, r0
  412764:	460b      	mov	r3, r1
  412766:	e89d 0003 	ldmia.w	sp, {r0, r1}
  41276a:	693f      	ldr	r7, [r7, #16]
  41276c:	6936      	ldr	r6, [r6, #16]
  41276e:	1a41      	subs	r1, r0, r1
  412770:	ebc6 0e07 	rsb	lr, r6, r7
  412774:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  412778:	f1be 0f00 	cmp.w	lr, #0
  41277c:	dd08      	ble.n	412790 <__ratio+0x48>
  41277e:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  412782:	460d      	mov	r5, r1
  412784:	4620      	mov	r0, r4
  412786:	4629      	mov	r1, r5
  412788:	f002 fea4 	bl	4154d4 <__aeabi_ddiv>
  41278c:	b003      	add	sp, #12
  41278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412790:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  412794:	463b      	mov	r3, r7
  412796:	e7f5      	b.n	412784 <__ratio+0x3c>

00412798 <__copybits>:
  412798:	b470      	push	{r4, r5, r6}
  41279a:	6915      	ldr	r5, [r2, #16]
  41279c:	f102 0314 	add.w	r3, r2, #20
  4127a0:	3901      	subs	r1, #1
  4127a2:	114e      	asrs	r6, r1, #5
  4127a4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  4127a8:	3601      	adds	r6, #1
  4127aa:	42ab      	cmp	r3, r5
  4127ac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  4127b0:	d20c      	bcs.n	4127cc <__copybits+0x34>
  4127b2:	4601      	mov	r1, r0
  4127b4:	f853 4b04 	ldr.w	r4, [r3], #4
  4127b8:	f841 4b04 	str.w	r4, [r1], #4
  4127bc:	429d      	cmp	r5, r3
  4127be:	d8f9      	bhi.n	4127b4 <__copybits+0x1c>
  4127c0:	1aab      	subs	r3, r5, r2
  4127c2:	3b15      	subs	r3, #21
  4127c4:	f023 0303 	bic.w	r3, r3, #3
  4127c8:	3304      	adds	r3, #4
  4127ca:	4418      	add	r0, r3
  4127cc:	4286      	cmp	r6, r0
  4127ce:	d904      	bls.n	4127da <__copybits+0x42>
  4127d0:	2300      	movs	r3, #0
  4127d2:	f840 3b04 	str.w	r3, [r0], #4
  4127d6:	4286      	cmp	r6, r0
  4127d8:	d8fb      	bhi.n	4127d2 <__copybits+0x3a>
  4127da:	bc70      	pop	{r4, r5, r6}
  4127dc:	4770      	bx	lr
  4127de:	bf00      	nop

004127e0 <__any_on>:
  4127e0:	6903      	ldr	r3, [r0, #16]
  4127e2:	114a      	asrs	r2, r1, #5
  4127e4:	4293      	cmp	r3, r2
  4127e6:	b410      	push	{r4}
  4127e8:	f100 0414 	add.w	r4, r0, #20
  4127ec:	da10      	bge.n	412810 <__any_on+0x30>
  4127ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4127f2:	429c      	cmp	r4, r3
  4127f4:	d221      	bcs.n	41283a <__any_on+0x5a>
  4127f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
  4127fa:	3b04      	subs	r3, #4
  4127fc:	b118      	cbz	r0, 412806 <__any_on+0x26>
  4127fe:	e015      	b.n	41282c <__any_on+0x4c>
  412800:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412804:	b992      	cbnz	r2, 41282c <__any_on+0x4c>
  412806:	429c      	cmp	r4, r3
  412808:	d3fa      	bcc.n	412800 <__any_on+0x20>
  41280a:	f85d 4b04 	ldr.w	r4, [sp], #4
  41280e:	4770      	bx	lr
  412810:	dd10      	ble.n	412834 <__any_on+0x54>
  412812:	f011 011f 	ands.w	r1, r1, #31
  412816:	d00d      	beq.n	412834 <__any_on+0x54>
  412818:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  41281c:	fa20 f301 	lsr.w	r3, r0, r1
  412820:	fa03 f101 	lsl.w	r1, r3, r1
  412824:	4281      	cmp	r1, r0
  412826:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  41282a:	d0e2      	beq.n	4127f2 <__any_on+0x12>
  41282c:	2001      	movs	r0, #1
  41282e:	f85d 4b04 	ldr.w	r4, [sp], #4
  412832:	4770      	bx	lr
  412834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412838:	e7db      	b.n	4127f2 <__any_on+0x12>
  41283a:	2000      	movs	r0, #0
  41283c:	e7e5      	b.n	41280a <__any_on+0x2a>
  41283e:	bf00      	nop

00412840 <_read_r>:
  412840:	b570      	push	{r4, r5, r6, lr}
  412842:	4c08      	ldr	r4, [pc, #32]	; (412864 <_read_r+0x24>)
  412844:	4606      	mov	r6, r0
  412846:	2500      	movs	r5, #0
  412848:	4608      	mov	r0, r1
  41284a:	4611      	mov	r1, r2
  41284c:	461a      	mov	r2, r3
  41284e:	6025      	str	r5, [r4, #0]
  412850:	f7f3 fe9c 	bl	40658c <_read>
  412854:	1c43      	adds	r3, r0, #1
  412856:	d000      	beq.n	41285a <_read_r+0x1a>
  412858:	bd70      	pop	{r4, r5, r6, pc}
  41285a:	6823      	ldr	r3, [r4, #0]
  41285c:	2b00      	cmp	r3, #0
  41285e:	d0fb      	beq.n	412858 <_read_r+0x18>
  412860:	6033      	str	r3, [r6, #0]
  412862:	bd70      	pop	{r4, r5, r6, pc}
  412864:	200099c8 	.word	0x200099c8

00412868 <_realloc_r>:
  412868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41286c:	460c      	mov	r4, r1
  41286e:	b083      	sub	sp, #12
  412870:	4690      	mov	r8, r2
  412872:	4681      	mov	r9, r0
  412874:	2900      	cmp	r1, #0
  412876:	f000 80e2 	beq.w	412a3e <_realloc_r+0x1d6>
  41287a:	f7ff fb91 	bl	411fa0 <__malloc_lock>
  41287e:	f108 060b 	add.w	r6, r8, #11
  412882:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412886:	2e16      	cmp	r6, #22
  412888:	f023 0503 	bic.w	r5, r3, #3
  41288c:	f1a4 0708 	sub.w	r7, r4, #8
  412890:	d84b      	bhi.n	41292a <_realloc_r+0xc2>
  412892:	2110      	movs	r1, #16
  412894:	460e      	mov	r6, r1
  412896:	45b0      	cmp	r8, r6
  412898:	d84c      	bhi.n	412934 <_realloc_r+0xcc>
  41289a:	428d      	cmp	r5, r1
  41289c:	da78      	bge.n	412990 <_realloc_r+0x128>
  41289e:	f8df b390 	ldr.w	fp, [pc, #912]	; 412c30 <_realloc_r+0x3c8>
  4128a2:	f8db e008 	ldr.w	lr, [fp, #8]
  4128a6:	1978      	adds	r0, r7, r5
  4128a8:	4586      	cmp	lr, r0
  4128aa:	f000 80ce 	beq.w	412a4a <_realloc_r+0x1e2>
  4128ae:	6842      	ldr	r2, [r0, #4]
  4128b0:	f022 0c01 	bic.w	ip, r2, #1
  4128b4:	4484      	add	ip, r0
  4128b6:	f8dc c004 	ldr.w	ip, [ip, #4]
  4128ba:	f01c 0f01 	tst.w	ip, #1
  4128be:	d07a      	beq.n	4129b6 <_realloc_r+0x14e>
  4128c0:	2200      	movs	r2, #0
  4128c2:	4610      	mov	r0, r2
  4128c4:	07db      	lsls	r3, r3, #31
  4128c6:	f100 8092 	bmi.w	4129ee <_realloc_r+0x186>
  4128ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4128ce:	ebc3 0a07 	rsb	sl, r3, r7
  4128d2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4128d6:	f023 0303 	bic.w	r3, r3, #3
  4128da:	442b      	add	r3, r5
  4128dc:	b388      	cbz	r0, 412942 <_realloc_r+0xda>
  4128de:	4570      	cmp	r0, lr
  4128e0:	f000 80ed 	beq.w	412abe <_realloc_r+0x256>
  4128e4:	eb02 0e03 	add.w	lr, r2, r3
  4128e8:	458e      	cmp	lr, r1
  4128ea:	db2a      	blt.n	412942 <_realloc_r+0xda>
  4128ec:	68c3      	ldr	r3, [r0, #12]
  4128ee:	6882      	ldr	r2, [r0, #8]
  4128f0:	4657      	mov	r7, sl
  4128f2:	60d3      	str	r3, [r2, #12]
  4128f4:	609a      	str	r2, [r3, #8]
  4128f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4128fa:	f8da 300c 	ldr.w	r3, [sl, #12]
  4128fe:	60cb      	str	r3, [r1, #12]
  412900:	1f2a      	subs	r2, r5, #4
  412902:	2a24      	cmp	r2, #36	; 0x24
  412904:	6099      	str	r1, [r3, #8]
  412906:	f200 8126 	bhi.w	412b56 <_realloc_r+0x2ee>
  41290a:	2a13      	cmp	r2, #19
  41290c:	f240 80b3 	bls.w	412a76 <_realloc_r+0x20e>
  412910:	6823      	ldr	r3, [r4, #0]
  412912:	f8ca 3008 	str.w	r3, [sl, #8]
  412916:	6863      	ldr	r3, [r4, #4]
  412918:	f8ca 300c 	str.w	r3, [sl, #12]
  41291c:	2a1b      	cmp	r2, #27
  41291e:	f200 8130 	bhi.w	412b82 <_realloc_r+0x31a>
  412922:	3408      	adds	r4, #8
  412924:	f10a 0310 	add.w	r3, sl, #16
  412928:	e0a6      	b.n	412a78 <_realloc_r+0x210>
  41292a:	f026 0607 	bic.w	r6, r6, #7
  41292e:	2e00      	cmp	r6, #0
  412930:	4631      	mov	r1, r6
  412932:	dab0      	bge.n	412896 <_realloc_r+0x2e>
  412934:	230c      	movs	r3, #12
  412936:	2000      	movs	r0, #0
  412938:	f8c9 3000 	str.w	r3, [r9]
  41293c:	b003      	add	sp, #12
  41293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412942:	428b      	cmp	r3, r1
  412944:	db53      	blt.n	4129ee <_realloc_r+0x186>
  412946:	4657      	mov	r7, sl
  412948:	f8da 100c 	ldr.w	r1, [sl, #12]
  41294c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  412950:	1f2a      	subs	r2, r5, #4
  412952:	2a24      	cmp	r2, #36	; 0x24
  412954:	60c1      	str	r1, [r0, #12]
  412956:	6088      	str	r0, [r1, #8]
  412958:	f200 8109 	bhi.w	412b6e <_realloc_r+0x306>
  41295c:	2a13      	cmp	r2, #19
  41295e:	f240 8104 	bls.w	412b6a <_realloc_r+0x302>
  412962:	6821      	ldr	r1, [r4, #0]
  412964:	f8ca 1008 	str.w	r1, [sl, #8]
  412968:	6861      	ldr	r1, [r4, #4]
  41296a:	f8ca 100c 	str.w	r1, [sl, #12]
  41296e:	2a1b      	cmp	r2, #27
  412970:	f200 811c 	bhi.w	412bac <_realloc_r+0x344>
  412974:	3408      	adds	r4, #8
  412976:	f10a 0210 	add.w	r2, sl, #16
  41297a:	6821      	ldr	r1, [r4, #0]
  41297c:	6011      	str	r1, [r2, #0]
  41297e:	6861      	ldr	r1, [r4, #4]
  412980:	6051      	str	r1, [r2, #4]
  412982:	68a1      	ldr	r1, [r4, #8]
  412984:	6091      	str	r1, [r2, #8]
  412986:	461d      	mov	r5, r3
  412988:	f8da 3004 	ldr.w	r3, [sl, #4]
  41298c:	463c      	mov	r4, r7
  41298e:	4657      	mov	r7, sl
  412990:	1baa      	subs	r2, r5, r6
  412992:	2a0f      	cmp	r2, #15
  412994:	f003 0301 	and.w	r3, r3, #1
  412998:	d819      	bhi.n	4129ce <_realloc_r+0x166>
  41299a:	432b      	orrs	r3, r5
  41299c:	443d      	add	r5, r7
  41299e:	607b      	str	r3, [r7, #4]
  4129a0:	686b      	ldr	r3, [r5, #4]
  4129a2:	f043 0301 	orr.w	r3, r3, #1
  4129a6:	606b      	str	r3, [r5, #4]
  4129a8:	4648      	mov	r0, r9
  4129aa:	f7ff fafb 	bl	411fa4 <__malloc_unlock>
  4129ae:	4620      	mov	r0, r4
  4129b0:	b003      	add	sp, #12
  4129b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4129b6:	f022 0203 	bic.w	r2, r2, #3
  4129ba:	eb02 0c05 	add.w	ip, r2, r5
  4129be:	458c      	cmp	ip, r1
  4129c0:	db80      	blt.n	4128c4 <_realloc_r+0x5c>
  4129c2:	68c2      	ldr	r2, [r0, #12]
  4129c4:	6881      	ldr	r1, [r0, #8]
  4129c6:	4665      	mov	r5, ip
  4129c8:	60ca      	str	r2, [r1, #12]
  4129ca:	6091      	str	r1, [r2, #8]
  4129cc:	e7e0      	b.n	412990 <_realloc_r+0x128>
  4129ce:	19b9      	adds	r1, r7, r6
  4129d0:	f042 0001 	orr.w	r0, r2, #1
  4129d4:	431e      	orrs	r6, r3
  4129d6:	440a      	add	r2, r1
  4129d8:	607e      	str	r6, [r7, #4]
  4129da:	6048      	str	r0, [r1, #4]
  4129dc:	6853      	ldr	r3, [r2, #4]
  4129de:	f043 0301 	orr.w	r3, r3, #1
  4129e2:	3108      	adds	r1, #8
  4129e4:	6053      	str	r3, [r2, #4]
  4129e6:	4648      	mov	r0, r9
  4129e8:	f7fe fc2a 	bl	411240 <_free_r>
  4129ec:	e7dc      	b.n	4129a8 <_realloc_r+0x140>
  4129ee:	4641      	mov	r1, r8
  4129f0:	4648      	mov	r0, r9
  4129f2:	f7fe ff4d 	bl	411890 <_malloc_r>
  4129f6:	4680      	mov	r8, r0
  4129f8:	b1d0      	cbz	r0, 412a30 <_realloc_r+0x1c8>
  4129fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4129fe:	f023 0201 	bic.w	r2, r3, #1
  412a02:	443a      	add	r2, r7
  412a04:	f1a0 0108 	sub.w	r1, r0, #8
  412a08:	4291      	cmp	r1, r2
  412a0a:	f000 809e 	beq.w	412b4a <_realloc_r+0x2e2>
  412a0e:	1f2a      	subs	r2, r5, #4
  412a10:	2a24      	cmp	r2, #36	; 0x24
  412a12:	d850      	bhi.n	412ab6 <_realloc_r+0x24e>
  412a14:	2a13      	cmp	r2, #19
  412a16:	d823      	bhi.n	412a60 <_realloc_r+0x1f8>
  412a18:	4603      	mov	r3, r0
  412a1a:	4622      	mov	r2, r4
  412a1c:	6811      	ldr	r1, [r2, #0]
  412a1e:	6019      	str	r1, [r3, #0]
  412a20:	6851      	ldr	r1, [r2, #4]
  412a22:	6059      	str	r1, [r3, #4]
  412a24:	6892      	ldr	r2, [r2, #8]
  412a26:	609a      	str	r2, [r3, #8]
  412a28:	4621      	mov	r1, r4
  412a2a:	4648      	mov	r0, r9
  412a2c:	f7fe fc08 	bl	411240 <_free_r>
  412a30:	4648      	mov	r0, r9
  412a32:	f7ff fab7 	bl	411fa4 <__malloc_unlock>
  412a36:	4640      	mov	r0, r8
  412a38:	b003      	add	sp, #12
  412a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412a3e:	4611      	mov	r1, r2
  412a40:	b003      	add	sp, #12
  412a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412a46:	f7fe bf23 	b.w	411890 <_malloc_r>
  412a4a:	f8de 2004 	ldr.w	r2, [lr, #4]
  412a4e:	f022 0203 	bic.w	r2, r2, #3
  412a52:	1950      	adds	r0, r2, r5
  412a54:	f106 0c10 	add.w	ip, r6, #16
  412a58:	4560      	cmp	r0, ip
  412a5a:	da19      	bge.n	412a90 <_realloc_r+0x228>
  412a5c:	4670      	mov	r0, lr
  412a5e:	e731      	b.n	4128c4 <_realloc_r+0x5c>
  412a60:	6823      	ldr	r3, [r4, #0]
  412a62:	6003      	str	r3, [r0, #0]
  412a64:	6863      	ldr	r3, [r4, #4]
  412a66:	6043      	str	r3, [r0, #4]
  412a68:	2a1b      	cmp	r2, #27
  412a6a:	d863      	bhi.n	412b34 <_realloc_r+0x2cc>
  412a6c:	f100 0308 	add.w	r3, r0, #8
  412a70:	f104 0208 	add.w	r2, r4, #8
  412a74:	e7d2      	b.n	412a1c <_realloc_r+0x1b4>
  412a76:	463b      	mov	r3, r7
  412a78:	6822      	ldr	r2, [r4, #0]
  412a7a:	601a      	str	r2, [r3, #0]
  412a7c:	6862      	ldr	r2, [r4, #4]
  412a7e:	605a      	str	r2, [r3, #4]
  412a80:	68a2      	ldr	r2, [r4, #8]
  412a82:	609a      	str	r2, [r3, #8]
  412a84:	463c      	mov	r4, r7
  412a86:	4675      	mov	r5, lr
  412a88:	f8da 3004 	ldr.w	r3, [sl, #4]
  412a8c:	4657      	mov	r7, sl
  412a8e:	e77f      	b.n	412990 <_realloc_r+0x128>
  412a90:	4437      	add	r7, r6
  412a92:	1b83      	subs	r3, r0, r6
  412a94:	f043 0301 	orr.w	r3, r3, #1
  412a98:	f8cb 7008 	str.w	r7, [fp, #8]
  412a9c:	607b      	str	r3, [r7, #4]
  412a9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412aa2:	f003 0301 	and.w	r3, r3, #1
  412aa6:	431e      	orrs	r6, r3
  412aa8:	4648      	mov	r0, r9
  412aaa:	f844 6c04 	str.w	r6, [r4, #-4]
  412aae:	f7ff fa79 	bl	411fa4 <__malloc_unlock>
  412ab2:	4620      	mov	r0, r4
  412ab4:	e77c      	b.n	4129b0 <_realloc_r+0x148>
  412ab6:	4621      	mov	r1, r4
  412ab8:	f7ff fa12 	bl	411ee0 <memmove>
  412abc:	e7b4      	b.n	412a28 <_realloc_r+0x1c0>
  412abe:	eb02 0c03 	add.w	ip, r2, r3
  412ac2:	f106 0210 	add.w	r2, r6, #16
  412ac6:	4594      	cmp	ip, r2
  412ac8:	f6ff af3b 	blt.w	412942 <_realloc_r+0xda>
  412acc:	4657      	mov	r7, sl
  412ace:	f8da 300c 	ldr.w	r3, [sl, #12]
  412ad2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  412ad6:	1f2a      	subs	r2, r5, #4
  412ad8:	2a24      	cmp	r2, #36	; 0x24
  412ada:	60cb      	str	r3, [r1, #12]
  412adc:	6099      	str	r1, [r3, #8]
  412ade:	f200 8087 	bhi.w	412bf0 <_realloc_r+0x388>
  412ae2:	2a13      	cmp	r2, #19
  412ae4:	d978      	bls.n	412bd8 <_realloc_r+0x370>
  412ae6:	6823      	ldr	r3, [r4, #0]
  412ae8:	f8ca 3008 	str.w	r3, [sl, #8]
  412aec:	6863      	ldr	r3, [r4, #4]
  412aee:	f8ca 300c 	str.w	r3, [sl, #12]
  412af2:	2a1b      	cmp	r2, #27
  412af4:	f200 8085 	bhi.w	412c02 <_realloc_r+0x39a>
  412af8:	3408      	adds	r4, #8
  412afa:	f10a 0310 	add.w	r3, sl, #16
  412afe:	6822      	ldr	r2, [r4, #0]
  412b00:	601a      	str	r2, [r3, #0]
  412b02:	6862      	ldr	r2, [r4, #4]
  412b04:	605a      	str	r2, [r3, #4]
  412b06:	68a2      	ldr	r2, [r4, #8]
  412b08:	609a      	str	r2, [r3, #8]
  412b0a:	eb0a 0306 	add.w	r3, sl, r6
  412b0e:	ebc6 020c 	rsb	r2, r6, ip
  412b12:	f042 0201 	orr.w	r2, r2, #1
  412b16:	f8cb 3008 	str.w	r3, [fp, #8]
  412b1a:	605a      	str	r2, [r3, #4]
  412b1c:	f8da 3004 	ldr.w	r3, [sl, #4]
  412b20:	f003 0301 	and.w	r3, r3, #1
  412b24:	431e      	orrs	r6, r3
  412b26:	4648      	mov	r0, r9
  412b28:	f8ca 6004 	str.w	r6, [sl, #4]
  412b2c:	f7ff fa3a 	bl	411fa4 <__malloc_unlock>
  412b30:	4638      	mov	r0, r7
  412b32:	e73d      	b.n	4129b0 <_realloc_r+0x148>
  412b34:	68a3      	ldr	r3, [r4, #8]
  412b36:	6083      	str	r3, [r0, #8]
  412b38:	68e3      	ldr	r3, [r4, #12]
  412b3a:	60c3      	str	r3, [r0, #12]
  412b3c:	2a24      	cmp	r2, #36	; 0x24
  412b3e:	d02c      	beq.n	412b9a <_realloc_r+0x332>
  412b40:	f100 0310 	add.w	r3, r0, #16
  412b44:	f104 0210 	add.w	r2, r4, #16
  412b48:	e768      	b.n	412a1c <_realloc_r+0x1b4>
  412b4a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412b4e:	f022 0203 	bic.w	r2, r2, #3
  412b52:	4415      	add	r5, r2
  412b54:	e71c      	b.n	412990 <_realloc_r+0x128>
  412b56:	4621      	mov	r1, r4
  412b58:	4638      	mov	r0, r7
  412b5a:	4675      	mov	r5, lr
  412b5c:	463c      	mov	r4, r7
  412b5e:	f7ff f9bf 	bl	411ee0 <memmove>
  412b62:	4657      	mov	r7, sl
  412b64:	f8da 3004 	ldr.w	r3, [sl, #4]
  412b68:	e712      	b.n	412990 <_realloc_r+0x128>
  412b6a:	463a      	mov	r2, r7
  412b6c:	e705      	b.n	41297a <_realloc_r+0x112>
  412b6e:	4621      	mov	r1, r4
  412b70:	4638      	mov	r0, r7
  412b72:	461d      	mov	r5, r3
  412b74:	463c      	mov	r4, r7
  412b76:	f7ff f9b3 	bl	411ee0 <memmove>
  412b7a:	4657      	mov	r7, sl
  412b7c:	f8da 3004 	ldr.w	r3, [sl, #4]
  412b80:	e706      	b.n	412990 <_realloc_r+0x128>
  412b82:	68a3      	ldr	r3, [r4, #8]
  412b84:	f8ca 3010 	str.w	r3, [sl, #16]
  412b88:	68e3      	ldr	r3, [r4, #12]
  412b8a:	f8ca 3014 	str.w	r3, [sl, #20]
  412b8e:	2a24      	cmp	r2, #36	; 0x24
  412b90:	d018      	beq.n	412bc4 <_realloc_r+0x35c>
  412b92:	3410      	adds	r4, #16
  412b94:	f10a 0318 	add.w	r3, sl, #24
  412b98:	e76e      	b.n	412a78 <_realloc_r+0x210>
  412b9a:	6923      	ldr	r3, [r4, #16]
  412b9c:	6103      	str	r3, [r0, #16]
  412b9e:	6963      	ldr	r3, [r4, #20]
  412ba0:	6143      	str	r3, [r0, #20]
  412ba2:	f104 0218 	add.w	r2, r4, #24
  412ba6:	f100 0318 	add.w	r3, r0, #24
  412baa:	e737      	b.n	412a1c <_realloc_r+0x1b4>
  412bac:	68a1      	ldr	r1, [r4, #8]
  412bae:	f8ca 1010 	str.w	r1, [sl, #16]
  412bb2:	68e1      	ldr	r1, [r4, #12]
  412bb4:	f8ca 1014 	str.w	r1, [sl, #20]
  412bb8:	2a24      	cmp	r2, #36	; 0x24
  412bba:	d00f      	beq.n	412bdc <_realloc_r+0x374>
  412bbc:	3410      	adds	r4, #16
  412bbe:	f10a 0218 	add.w	r2, sl, #24
  412bc2:	e6da      	b.n	41297a <_realloc_r+0x112>
  412bc4:	6923      	ldr	r3, [r4, #16]
  412bc6:	f8ca 3018 	str.w	r3, [sl, #24]
  412bca:	6963      	ldr	r3, [r4, #20]
  412bcc:	f8ca 301c 	str.w	r3, [sl, #28]
  412bd0:	3418      	adds	r4, #24
  412bd2:	f10a 0320 	add.w	r3, sl, #32
  412bd6:	e74f      	b.n	412a78 <_realloc_r+0x210>
  412bd8:	463b      	mov	r3, r7
  412bda:	e790      	b.n	412afe <_realloc_r+0x296>
  412bdc:	6922      	ldr	r2, [r4, #16]
  412bde:	f8ca 2018 	str.w	r2, [sl, #24]
  412be2:	6962      	ldr	r2, [r4, #20]
  412be4:	f8ca 201c 	str.w	r2, [sl, #28]
  412be8:	3418      	adds	r4, #24
  412bea:	f10a 0220 	add.w	r2, sl, #32
  412bee:	e6c4      	b.n	41297a <_realloc_r+0x112>
  412bf0:	4621      	mov	r1, r4
  412bf2:	4638      	mov	r0, r7
  412bf4:	f8cd c004 	str.w	ip, [sp, #4]
  412bf8:	f7ff f972 	bl	411ee0 <memmove>
  412bfc:	f8dd c004 	ldr.w	ip, [sp, #4]
  412c00:	e783      	b.n	412b0a <_realloc_r+0x2a2>
  412c02:	68a3      	ldr	r3, [r4, #8]
  412c04:	f8ca 3010 	str.w	r3, [sl, #16]
  412c08:	68e3      	ldr	r3, [r4, #12]
  412c0a:	f8ca 3014 	str.w	r3, [sl, #20]
  412c0e:	2a24      	cmp	r2, #36	; 0x24
  412c10:	d003      	beq.n	412c1a <_realloc_r+0x3b2>
  412c12:	3410      	adds	r4, #16
  412c14:	f10a 0318 	add.w	r3, sl, #24
  412c18:	e771      	b.n	412afe <_realloc_r+0x296>
  412c1a:	6923      	ldr	r3, [r4, #16]
  412c1c:	f8ca 3018 	str.w	r3, [sl, #24]
  412c20:	6963      	ldr	r3, [r4, #20]
  412c22:	f8ca 301c 	str.w	r3, [sl, #28]
  412c26:	3418      	adds	r4, #24
  412c28:	f10a 0320 	add.w	r3, sl, #32
  412c2c:	e767      	b.n	412afe <_realloc_r+0x296>
  412c2e:	bf00      	nop
  412c30:	200007fc 	.word	0x200007fc

00412c34 <__fpclassifyd>:
  412c34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  412c38:	b410      	push	{r4}
  412c3a:	d008      	beq.n	412c4e <__fpclassifyd+0x1a>
  412c3c:	4a0f      	ldr	r2, [pc, #60]	; (412c7c <__fpclassifyd+0x48>)
  412c3e:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  412c42:	4294      	cmp	r4, r2
  412c44:	d80a      	bhi.n	412c5c <__fpclassifyd+0x28>
  412c46:	2004      	movs	r0, #4
  412c48:	f85d 4b04 	ldr.w	r4, [sp], #4
  412c4c:	4770      	bx	lr
  412c4e:	2800      	cmp	r0, #0
  412c50:	bf0c      	ite	eq
  412c52:	2002      	moveq	r0, #2
  412c54:	2003      	movne	r0, #3
  412c56:	f85d 4b04 	ldr.w	r4, [sp], #4
  412c5a:	4770      	bx	lr
  412c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  412c60:	d201      	bcs.n	412c66 <__fpclassifyd+0x32>
  412c62:	2003      	movs	r0, #3
  412c64:	e7f7      	b.n	412c56 <__fpclassifyd+0x22>
  412c66:	4a06      	ldr	r2, [pc, #24]	; (412c80 <__fpclassifyd+0x4c>)
  412c68:	4293      	cmp	r3, r2
  412c6a:	d001      	beq.n	412c70 <__fpclassifyd+0x3c>
  412c6c:	2000      	movs	r0, #0
  412c6e:	e7f2      	b.n	412c56 <__fpclassifyd+0x22>
  412c70:	f1d0 0001 	rsbs	r0, r0, #1
  412c74:	bf38      	it	cc
  412c76:	2000      	movcc	r0, #0
  412c78:	e7ed      	b.n	412c56 <__fpclassifyd+0x22>
  412c7a:	bf00      	nop
  412c7c:	7fdfffff 	.word	0x7fdfffff
  412c80:	7ff00000 	.word	0x7ff00000

00412c84 <_sbrk_r>:
  412c84:	b538      	push	{r3, r4, r5, lr}
  412c86:	4c07      	ldr	r4, [pc, #28]	; (412ca4 <_sbrk_r+0x20>)
  412c88:	2300      	movs	r3, #0
  412c8a:	4605      	mov	r5, r0
  412c8c:	4608      	mov	r0, r1
  412c8e:	6023      	str	r3, [r4, #0]
  412c90:	f7f9 f8f8 	bl	40be84 <_sbrk>
  412c94:	1c43      	adds	r3, r0, #1
  412c96:	d000      	beq.n	412c9a <_sbrk_r+0x16>
  412c98:	bd38      	pop	{r3, r4, r5, pc}
  412c9a:	6823      	ldr	r3, [r4, #0]
  412c9c:	2b00      	cmp	r3, #0
  412c9e:	d0fb      	beq.n	412c98 <_sbrk_r+0x14>
  412ca0:	602b      	str	r3, [r5, #0]
  412ca2:	bd38      	pop	{r3, r4, r5, pc}
  412ca4:	200099c8 	.word	0x200099c8

00412ca8 <__sccl>:
  412ca8:	b470      	push	{r4, r5, r6}
  412caa:	780c      	ldrb	r4, [r1, #0]
  412cac:	2c5e      	cmp	r4, #94	; 0x5e
  412cae:	d02e      	beq.n	412d0e <__sccl+0x66>
  412cb0:	2200      	movs	r2, #0
  412cb2:	1c4d      	adds	r5, r1, #1
  412cb4:	4616      	mov	r6, r2
  412cb6:	2300      	movs	r3, #0
  412cb8:	54c2      	strb	r2, [r0, r3]
  412cba:	3301      	adds	r3, #1
  412cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  412cc0:	d1fa      	bne.n	412cb8 <__sccl+0x10>
  412cc2:	b184      	cbz	r4, 412ce6 <__sccl+0x3e>
  412cc4:	f086 0201 	eor.w	r2, r6, #1
  412cc8:	5502      	strb	r2, [r0, r4]
  412cca:	1c6e      	adds	r6, r5, #1
  412ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  412cd0:	2b2d      	cmp	r3, #45	; 0x2d
  412cd2:	d00e      	beq.n	412cf2 <__sccl+0x4a>
  412cd4:	2b5d      	cmp	r3, #93	; 0x5d
  412cd6:	d009      	beq.n	412cec <__sccl+0x44>
  412cd8:	b113      	cbz	r3, 412ce0 <__sccl+0x38>
  412cda:	461c      	mov	r4, r3
  412cdc:	4635      	mov	r5, r6
  412cde:	e7f3      	b.n	412cc8 <__sccl+0x20>
  412ce0:	4628      	mov	r0, r5
  412ce2:	bc70      	pop	{r4, r5, r6}
  412ce4:	4770      	bx	lr
  412ce6:	1e68      	subs	r0, r5, #1
  412ce8:	bc70      	pop	{r4, r5, r6}
  412cea:	4770      	bx	lr
  412cec:	4630      	mov	r0, r6
  412cee:	bc70      	pop	{r4, r5, r6}
  412cf0:	4770      	bx	lr
  412cf2:	7869      	ldrb	r1, [r5, #1]
  412cf4:	295d      	cmp	r1, #93	; 0x5d
  412cf6:	d0f0      	beq.n	412cda <__sccl+0x32>
  412cf8:	428c      	cmp	r4, r1
  412cfa:	dcee      	bgt.n	412cda <__sccl+0x32>
  412cfc:	3502      	adds	r5, #2
  412cfe:	1903      	adds	r3, r0, r4
  412d00:	3401      	adds	r4, #1
  412d02:	42a1      	cmp	r1, r4
  412d04:	f803 2f01 	strb.w	r2, [r3, #1]!
  412d08:	dcfa      	bgt.n	412d00 <__sccl+0x58>
  412d0a:	3602      	adds	r6, #2
  412d0c:	e7de      	b.n	412ccc <__sccl+0x24>
  412d0e:	2201      	movs	r2, #1
  412d10:	784c      	ldrb	r4, [r1, #1]
  412d12:	4616      	mov	r6, r2
  412d14:	1c8d      	adds	r5, r1, #2
  412d16:	e7ce      	b.n	412cb6 <__sccl+0xe>

00412d18 <nanf>:
  412d18:	4800      	ldr	r0, [pc, #0]	; (412d1c <nanf+0x4>)
  412d1a:	4770      	bx	lr
  412d1c:	7fc00000 	.word	0x7fc00000

00412d20 <sulp>:
  412d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412d24:	460d      	mov	r5, r1
  412d26:	4690      	mov	r8, r2
  412d28:	f7ff fc36 	bl	412598 <__ulp>
  412d2c:	4606      	mov	r6, r0
  412d2e:	460f      	mov	r7, r1
  412d30:	f1b8 0f00 	cmp.w	r8, #0
  412d34:	d00f      	beq.n	412d56 <sulp+0x36>
  412d36:	f3c5 530a 	ubfx	r3, r5, #20, #11
  412d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  412d3e:	2b00      	cmp	r3, #0
  412d40:	dd09      	ble.n	412d56 <sulp+0x36>
  412d42:	051c      	lsls	r4, r3, #20
  412d44:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  412d48:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  412d4c:	2200      	movs	r2, #0
  412d4e:	f002 fa97 	bl	415280 <__aeabi_dmul>
  412d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412d56:	4630      	mov	r0, r6
  412d58:	4639      	mov	r1, r7
  412d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412d5e:	bf00      	nop

00412d60 <_strtod_r>:
  412d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412d64:	b09f      	sub	sp, #124	; 0x7c
  412d66:	460d      	mov	r5, r1
  412d68:	9119      	str	r1, [sp, #100]	; 0x64
  412d6a:	4683      	mov	fp, r0
  412d6c:	9205      	str	r2, [sp, #20]
  412d6e:	2000      	movs	r0, #0
  412d70:	460a      	mov	r2, r1
  412d72:	2100      	movs	r1, #0
  412d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
  412d78:	2300      	movs	r3, #0
  412d7a:	931a      	str	r3, [sp, #104]	; 0x68
  412d7c:	4616      	mov	r6, r2
  412d7e:	f812 4b01 	ldrb.w	r4, [r2], #1
  412d82:	2c2d      	cmp	r4, #45	; 0x2d
  412d84:	f200 8158 	bhi.w	413038 <_strtod_r+0x2d8>
  412d88:	e8df f014 	tbh	[pc, r4, lsl #1]
  412d8c:	01560039 	.word	0x01560039
  412d90:	01560156 	.word	0x01560156
  412d94:	01560156 	.word	0x01560156
  412d98:	01560156 	.word	0x01560156
  412d9c:	007d0156 	.word	0x007d0156
  412da0:	007d007d 	.word	0x007d007d
  412da4:	007d007d 	.word	0x007d007d
  412da8:	01560156 	.word	0x01560156
  412dac:	01560156 	.word	0x01560156
  412db0:	01560156 	.word	0x01560156
  412db4:	01560156 	.word	0x01560156
  412db8:	01560156 	.word	0x01560156
  412dbc:	01560156 	.word	0x01560156
  412dc0:	01560156 	.word	0x01560156
  412dc4:	01560156 	.word	0x01560156
  412dc8:	01560156 	.word	0x01560156
  412dcc:	0156007d 	.word	0x0156007d
  412dd0:	01560156 	.word	0x01560156
  412dd4:	01560156 	.word	0x01560156
  412dd8:	01560156 	.word	0x01560156
  412ddc:	01560156 	.word	0x01560156
  412de0:	004d0156 	.word	0x004d0156
  412de4:	007f0156 	.word	0x007f0156
  412de8:	2300      	movs	r3, #0
  412dea:	2101      	movs	r1, #1
  412dec:	469a      	mov	sl, r3
  412dee:	910b      	str	r1, [sp, #44]	; 0x2c
  412df0:	2800      	cmp	r0, #0
  412df2:	f040 8151 	bne.w	413098 <_strtod_r+0x338>
  412df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  412df8:	2a00      	cmp	r2, #0
  412dfa:	f040 814d 	bne.w	413098 <_strtod_r+0x338>
  412dfe:	2000      	movs	r0, #0
  412e00:	f04f 0800 	mov.w	r8, #0
  412e04:	f04f 0900 	mov.w	r9, #0
  412e08:	9519      	str	r5, [sp, #100]	; 0x64
  412e0a:	9007      	str	r0, [sp, #28]
  412e0c:	9805      	ldr	r0, [sp, #20]
  412e0e:	b108      	cbz	r0, 412e14 <_strtod_r+0xb4>
  412e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
  412e12:	6003      	str	r3, [r0, #0]
  412e14:	9907      	ldr	r1, [sp, #28]
  412e16:	2900      	cmp	r1, #0
  412e18:	f040 809e 	bne.w	412f58 <_strtod_r+0x1f8>
  412e1c:	4640      	mov	r0, r8
  412e1e:	4649      	mov	r1, r9
  412e20:	b01f      	add	sp, #124	; 0x7c
  412e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412e26:	2300      	movs	r3, #0
  412e28:	9307      	str	r3, [sp, #28]
  412e2a:	1c73      	adds	r3, r6, #1
  412e2c:	9319      	str	r3, [sp, #100]	; 0x64
  412e2e:	7874      	ldrb	r4, [r6, #1]
  412e30:	2c00      	cmp	r4, #0
  412e32:	d0e4      	beq.n	412dfe <_strtod_r+0x9e>
  412e34:	2c30      	cmp	r4, #48	; 0x30
  412e36:	461e      	mov	r6, r3
  412e38:	f000 8103 	beq.w	413042 <_strtod_r+0x2e2>
  412e3c:	2300      	movs	r3, #0
  412e3e:	9606      	str	r6, [sp, #24]
  412e40:	930a      	str	r3, [sp, #40]	; 0x28
  412e42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  412e46:	2700      	movs	r7, #0
  412e48:	2b09      	cmp	r3, #9
  412e4a:	46b9      	mov	r9, r7
  412e4c:	463e      	mov	r6, r7
  412e4e:	d81f      	bhi.n	412e90 <_strtod_r+0x130>
  412e50:	9806      	ldr	r0, [sp, #24]
  412e52:	1c43      	adds	r3, r0, #1
  412e54:	e00f      	b.n	412e76 <_strtod_r+0x116>
  412e56:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  412e5a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  412e5e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  412e62:	9319      	str	r3, [sp, #100]	; 0x64
  412e64:	4698      	mov	r8, r3
  412e66:	f813 4b01 	ldrb.w	r4, [r3], #1
  412e6a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  412e6e:	2a09      	cmp	r2, #9
  412e70:	f106 0601 	add.w	r6, r6, #1
  412e74:	d80e      	bhi.n	412e94 <_strtod_r+0x134>
  412e76:	2e08      	cmp	r6, #8
  412e78:	dded      	ble.n	412e56 <_strtod_r+0xf6>
  412e7a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  412e7e:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  412e82:	3f30      	subs	r7, #48	; 0x30
  412e84:	e7ed      	b.n	412e62 <_strtod_r+0x102>
  412e86:	9219      	str	r2, [sp, #100]	; 0x64
  412e88:	e778      	b.n	412d7c <_strtod_r+0x1c>
  412e8a:	2201      	movs	r2, #1
  412e8c:	9207      	str	r2, [sp, #28]
  412e8e:	e7cc      	b.n	412e2a <_strtod_r+0xca>
  412e90:	f8dd 8018 	ldr.w	r8, [sp, #24]
  412e94:	4658      	mov	r0, fp
  412e96:	f7fe fc6b 	bl	411770 <_localeconv_r>
  412e9a:	f8d0 a000 	ldr.w	sl, [r0]
  412e9e:	4658      	mov	r0, fp
  412ea0:	f7fe fc66 	bl	411770 <_localeconv_r>
  412ea4:	6800      	ldr	r0, [r0, #0]
  412ea6:	f7f9 fe5f 	bl	40cb68 <strlen>
  412eaa:	4651      	mov	r1, sl
  412eac:	4602      	mov	r2, r0
  412eae:	4640      	mov	r0, r8
  412eb0:	f7f9 fe8a 	bl	40cbc8 <strncmp>
  412eb4:	4680      	mov	r8, r0
  412eb6:	2800      	cmp	r0, #0
  412eb8:	f000 8146 	beq.w	413148 <_strtod_r+0x3e8>
  412ebc:	2000      	movs	r0, #0
  412ebe:	4603      	mov	r3, r0
  412ec0:	900b      	str	r0, [sp, #44]	; 0x2c
  412ec2:	46b2      	mov	sl, r6
  412ec4:	f024 0220 	bic.w	r2, r4, #32
  412ec8:	2a45      	cmp	r2, #69	; 0x45
  412eca:	f000 80e1 	beq.w	413090 <_strtod_r+0x330>
  412ece:	2100      	movs	r1, #0
  412ed0:	f1ba 0f00 	cmp.w	sl, #0
  412ed4:	d054      	beq.n	412f80 <_strtod_r+0x220>
  412ed6:	1acb      	subs	r3, r1, r3
  412ed8:	4648      	mov	r0, r9
  412eda:	9308      	str	r3, [sp, #32]
  412edc:	f002 f95a 	bl	415194 <__aeabi_ui2d>
  412ee0:	f1ba 0f10 	cmp.w	sl, #16
  412ee4:	bfb4      	ite	lt
  412ee6:	46d0      	movlt	r8, sl
  412ee8:	f04f 0810 	movge.w	r8, #16
  412eec:	2e00      	cmp	r6, #0
  412eee:	bf08      	it	eq
  412ef0:	4656      	moveq	r6, sl
  412ef2:	f1b8 0f09 	cmp.w	r8, #9
  412ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  412efa:	dd13      	ble.n	412f24 <_strtod_r+0x1c4>
  412efc:	4ba0      	ldr	r3, [pc, #640]	; (413180 <_strtod_r+0x420>)
  412efe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  412f02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  412f06:	f002 f9bb 	bl	415280 <__aeabi_dmul>
  412f0a:	4604      	mov	r4, r0
  412f0c:	4638      	mov	r0, r7
  412f0e:	460d      	mov	r5, r1
  412f10:	f002 f940 	bl	415194 <__aeabi_ui2d>
  412f14:	4602      	mov	r2, r0
  412f16:	460b      	mov	r3, r1
  412f18:	4620      	mov	r0, r4
  412f1a:	4629      	mov	r1, r5
  412f1c:	f001 fffe 	bl	414f1c <__adddf3>
  412f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
  412f24:	f1ba 0f0f 	cmp.w	sl, #15
  412f28:	f300 812c 	bgt.w	413184 <_strtod_r+0x424>
  412f2c:	9908      	ldr	r1, [sp, #32]
  412f2e:	2900      	cmp	r1, #0
  412f30:	f000 80ab 	beq.w	41308a <_strtod_r+0x32a>
  412f34:	f340 8580 	ble.w	413a38 <_strtod_r+0xcd8>
  412f38:	9a08      	ldr	r2, [sp, #32]
  412f3a:	2a16      	cmp	r2, #22
  412f3c:	f300 84ef 	bgt.w	41391e <_strtod_r+0xbbe>
  412f40:	4b8f      	ldr	r3, [pc, #572]	; (413180 <_strtod_r+0x420>)
  412f42:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  412f46:	e9da 0100 	ldrd	r0, r1, [sl]
  412f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  412f4e:	f002 f997 	bl	415280 <__aeabi_dmul>
  412f52:	4680      	mov	r8, r0
  412f54:	4689      	mov	r9, r1
  412f56:	e759      	b.n	412e0c <_strtod_r+0xac>
  412f58:	4640      	mov	r0, r8
  412f5a:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  412f5e:	b01f      	add	sp, #124	; 0x7c
  412f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412f64:	4633      	mov	r3, r6
  412f66:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  412f6a:	2a08      	cmp	r2, #8
  412f6c:	f240 833c 	bls.w	4135e8 <_strtod_r+0x888>
  412f70:	f024 0220 	bic.w	r2, r4, #32
  412f74:	2a45      	cmp	r2, #69	; 0x45
  412f76:	4618      	mov	r0, r3
  412f78:	f43f af36 	beq.w	412de8 <_strtod_r+0x88>
  412f7c:	2101      	movs	r1, #1
  412f7e:	910b      	str	r1, [sp, #44]	; 0x2c
  412f80:	2800      	cmp	r0, #0
  412f82:	d171      	bne.n	413068 <_strtod_r+0x308>
  412f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412f86:	2b00      	cmp	r3, #0
  412f88:	d16e      	bne.n	413068 <_strtod_r+0x308>
  412f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  412f8c:	2800      	cmp	r0, #0
  412f8e:	f47f af36 	bne.w	412dfe <_strtod_r+0x9e>
  412f92:	3c49      	subs	r4, #73	; 0x49
  412f94:	2c25      	cmp	r4, #37	; 0x25
  412f96:	f63f af32 	bhi.w	412dfe <_strtod_r+0x9e>
  412f9a:	a101      	add	r1, pc, #4	; (adr r1, 412fa0 <_strtod_r+0x240>)
  412f9c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  412fa0:	00413663 	.word	0x00413663
  412fa4:	00412dff 	.word	0x00412dff
  412fa8:	00412dff 	.word	0x00412dff
  412fac:	00412dff 	.word	0x00412dff
  412fb0:	00412dff 	.word	0x00412dff
  412fb4:	0041362b 	.word	0x0041362b
  412fb8:	00412dff 	.word	0x00412dff
  412fbc:	00412dff 	.word	0x00412dff
  412fc0:	00412dff 	.word	0x00412dff
  412fc4:	00412dff 	.word	0x00412dff
  412fc8:	00412dff 	.word	0x00412dff
  412fcc:	00412dff 	.word	0x00412dff
  412fd0:	00412dff 	.word	0x00412dff
  412fd4:	00412dff 	.word	0x00412dff
  412fd8:	00412dff 	.word	0x00412dff
  412fdc:	00412dff 	.word	0x00412dff
  412fe0:	00412dff 	.word	0x00412dff
  412fe4:	00412dff 	.word	0x00412dff
  412fe8:	00412dff 	.word	0x00412dff
  412fec:	00412dff 	.word	0x00412dff
  412ff0:	00412dff 	.word	0x00412dff
  412ff4:	00412dff 	.word	0x00412dff
  412ff8:	00412dff 	.word	0x00412dff
  412ffc:	00412dff 	.word	0x00412dff
  413000:	00412dff 	.word	0x00412dff
  413004:	00412dff 	.word	0x00412dff
  413008:	00412dff 	.word	0x00412dff
  41300c:	00412dff 	.word	0x00412dff
  413010:	00412dff 	.word	0x00412dff
  413014:	00412dff 	.word	0x00412dff
  413018:	00412dff 	.word	0x00412dff
  41301c:	00412dff 	.word	0x00412dff
  413020:	00413663 	.word	0x00413663
  413024:	00412dff 	.word	0x00412dff
  413028:	00412dff 	.word	0x00412dff
  41302c:	00412dff 	.word	0x00412dff
  413030:	00412dff 	.word	0x00412dff
  413034:	0041362b 	.word	0x0041362b
  413038:	2000      	movs	r0, #0
  41303a:	2c30      	cmp	r4, #48	; 0x30
  41303c:	9007      	str	r0, [sp, #28]
  41303e:	f47f aefd 	bne.w	412e3c <_strtod_r+0xdc>
  413042:	7873      	ldrb	r3, [r6, #1]
  413044:	2b58      	cmp	r3, #88	; 0x58
  413046:	f000 8336 	beq.w	4136b6 <_strtod_r+0x956>
  41304a:	2b78      	cmp	r3, #120	; 0x78
  41304c:	f000 8333 	beq.w	4136b6 <_strtod_r+0x956>
  413050:	3601      	adds	r6, #1
  413052:	9619      	str	r6, [sp, #100]	; 0x64
  413054:	4633      	mov	r3, r6
  413056:	f816 4b01 	ldrb.w	r4, [r6], #1
  41305a:	2c30      	cmp	r4, #48	; 0x30
  41305c:	d0f9      	beq.n	413052 <_strtod_r+0x2f2>
  41305e:	b11c      	cbz	r4, 413068 <_strtod_r+0x308>
  413060:	9306      	str	r3, [sp, #24]
  413062:	2301      	movs	r3, #1
  413064:	930a      	str	r3, [sp, #40]	; 0x28
  413066:	e6ec      	b.n	412e42 <_strtod_r+0xe2>
  413068:	f04f 0800 	mov.w	r8, #0
  41306c:	f04f 0900 	mov.w	r9, #0
  413070:	e6cc      	b.n	412e0c <_strtod_r+0xac>
  413072:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  413076:	f04f 30ff 	mov.w	r0, #4294967295
  41307a:	9303      	str	r3, [sp, #12]
  41307c:	9002      	str	r0, [sp, #8]
  41307e:	0722      	lsls	r2, r4, #28
  413080:	bf42      	ittt	mi
  413082:	9903      	ldrmi	r1, [sp, #12]
  413084:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  413088:	9103      	strmi	r1, [sp, #12]
  41308a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41308e:	e6bd      	b.n	412e0c <_strtod_r+0xac>
  413090:	f1ba 0f00 	cmp.w	sl, #0
  413094:	f43f aeac 	beq.w	412df0 <_strtod_r+0x90>
  413098:	9d19      	ldr	r5, [sp, #100]	; 0x64
  41309a:	1c6a      	adds	r2, r5, #1
  41309c:	9219      	str	r2, [sp, #100]	; 0x64
  41309e:	786c      	ldrb	r4, [r5, #1]
  4130a0:	2c2b      	cmp	r4, #43	; 0x2b
  4130a2:	f000 824b 	beq.w	41353c <_strtod_r+0x7dc>
  4130a6:	2c2d      	cmp	r4, #45	; 0x2d
  4130a8:	f040 8245 	bne.w	413536 <_strtod_r+0x7d6>
  4130ac:	2101      	movs	r1, #1
  4130ae:	9108      	str	r1, [sp, #32]
  4130b0:	1caa      	adds	r2, r5, #2
  4130b2:	9219      	str	r2, [sp, #100]	; 0x64
  4130b4:	78ac      	ldrb	r4, [r5, #2]
  4130b6:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4130ba:	2a09      	cmp	r2, #9
  4130bc:	f200 81e5 	bhi.w	41348a <_strtod_r+0x72a>
  4130c0:	2c30      	cmp	r4, #48	; 0x30
  4130c2:	d106      	bne.n	4130d2 <_strtod_r+0x372>
  4130c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4130c6:	3201      	adds	r2, #1
  4130c8:	9219      	str	r2, [sp, #100]	; 0x64
  4130ca:	f812 4b01 	ldrb.w	r4, [r2], #1
  4130ce:	2c30      	cmp	r4, #48	; 0x30
  4130d0:	d0fa      	beq.n	4130c8 <_strtod_r+0x368>
  4130d2:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  4130d6:	2a08      	cmp	r2, #8
  4130d8:	f63f aef9 	bhi.w	412ece <_strtod_r+0x16e>
  4130dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4130de:	920e      	str	r2, [sp, #56]	; 0x38
  4130e0:	f102 0801 	add.w	r8, r2, #1
  4130e4:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  4130e8:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  4130ec:	7854      	ldrb	r4, [r2, #1]
  4130ee:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4130f2:	2a09      	cmp	r2, #9
  4130f4:	d812      	bhi.n	41311c <_strtod_r+0x3bc>
  4130f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4130f8:	f102 0c02 	add.w	ip, r2, #2
  4130fc:	4662      	mov	r2, ip
  4130fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  413102:	9219      	str	r2, [sp, #100]	; 0x64
  413104:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  413108:	4690      	mov	r8, r2
  41310a:	f812 4b01 	ldrb.w	r4, [r2], #1
  41310e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  413112:	f1bc 0f09 	cmp.w	ip, #9
  413116:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  41311a:	d9f0      	bls.n	4130fe <_strtod_r+0x39e>
  41311c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41311e:	ebc2 0808 	rsb	r8, r2, r8
  413122:	f1b8 0f08 	cmp.w	r8, #8
  413126:	f300 83f2 	bgt.w	41390e <_strtod_r+0xbae>
  41312a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  41312e:	4291      	cmp	r1, r2
  413130:	bfa8      	it	ge
  413132:	4611      	movge	r1, r2
  413134:	9a08      	ldr	r2, [sp, #32]
  413136:	2a00      	cmp	r2, #0
  413138:	f43f aeca 	beq.w	412ed0 <_strtod_r+0x170>
  41313c:	4249      	negs	r1, r1
  41313e:	f1ba 0f00 	cmp.w	sl, #0
  413142:	f47f aec8 	bne.w	412ed6 <_strtod_r+0x176>
  413146:	e71b      	b.n	412f80 <_strtod_r+0x220>
  413148:	4658      	mov	r0, fp
  41314a:	9c19      	ldr	r4, [sp, #100]	; 0x64
  41314c:	f7fe fb10 	bl	411770 <_localeconv_r>
  413150:	6800      	ldr	r0, [r0, #0]
  413152:	f7f9 fd09 	bl	40cb68 <strlen>
  413156:	1823      	adds	r3, r4, r0
  413158:	9319      	str	r3, [sp, #100]	; 0x64
  41315a:	5c24      	ldrb	r4, [r4, r0]
  41315c:	2e00      	cmp	r6, #0
  41315e:	f040 81c3 	bne.w	4134e8 <_strtod_r+0x788>
  413162:	2c30      	cmp	r4, #48	; 0x30
  413164:	f47f aefe 	bne.w	412f64 <_strtod_r+0x204>
  413168:	461a      	mov	r2, r3
  41316a:	4633      	mov	r3, r6
  41316c:	e000      	b.n	413170 <_strtod_r+0x410>
  41316e:	460a      	mov	r2, r1
  413170:	1c51      	adds	r1, r2, #1
  413172:	9119      	str	r1, [sp, #100]	; 0x64
  413174:	7854      	ldrb	r4, [r2, #1]
  413176:	2c30      	cmp	r4, #48	; 0x30
  413178:	f103 0301 	add.w	r3, r3, #1
  41317c:	d0f7      	beq.n	41316e <_strtod_r+0x40e>
  41317e:	e6f2      	b.n	412f66 <_strtod_r+0x206>
  413180:	00415fe0 	.word	0x00415fe0
  413184:	9908      	ldr	r1, [sp, #32]
  413186:	ebc8 080a 	rsb	r8, r8, sl
  41318a:	4488      	add	r8, r1
  41318c:	f1b8 0f00 	cmp.w	r8, #0
  413190:	f340 8369 	ble.w	413866 <_strtod_r+0xb06>
  413194:	f018 030f 	ands.w	r3, r8, #15
  413198:	d00a      	beq.n	4131b0 <_strtod_r+0x450>
  41319a:	49a7      	ldr	r1, [pc, #668]	; (413438 <_strtod_r+0x6d8>)
  41319c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4131a0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4131a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4131a8:	f002 f86a 	bl	415280 <__aeabi_dmul>
  4131ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4131b0:	f038 040f 	bics.w	r4, r8, #15
  4131b4:	f040 81c8 	bne.w	413548 <_strtod_r+0x7e8>
  4131b8:	2200      	movs	r2, #0
  4131ba:	920a      	str	r2, [sp, #40]	; 0x28
  4131bc:	f8cd 9000 	str.w	r9, [sp]
  4131c0:	9906      	ldr	r1, [sp, #24]
  4131c2:	4632      	mov	r2, r6
  4131c4:	4653      	mov	r3, sl
  4131c6:	4658      	mov	r0, fp
  4131c8:	f7fe ff6a 	bl	4120a0 <__s2b>
  4131cc:	900b      	str	r0, [sp, #44]	; 0x2c
  4131ce:	2800      	cmp	r0, #0
  4131d0:	f000 82d5 	beq.w	41377e <_strtod_r+0xa1e>
  4131d4:	9908      	ldr	r1, [sp, #32]
  4131d6:	2200      	movs	r2, #0
  4131d8:	2900      	cmp	r1, #0
  4131da:	f1c1 0300 	rsb	r3, r1, #0
  4131de:	bfa8      	it	ge
  4131e0:	4613      	movge	r3, r2
  4131e2:	930e      	str	r3, [sp, #56]	; 0x38
  4131e4:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  4131e8:	9206      	str	r2, [sp, #24]
  4131ea:	930f      	str	r3, [sp, #60]	; 0x3c
  4131ec:	4617      	mov	r7, r2
  4131ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4131f0:	4658      	mov	r0, fp
  4131f2:	6851      	ldr	r1, [r2, #4]
  4131f4:	f7fe fed8 	bl	411fa8 <_Balloc>
  4131f8:	4606      	mov	r6, r0
  4131fa:	2800      	cmp	r0, #0
  4131fc:	f000 82cd 	beq.w	41379a <_strtod_r+0xa3a>
  413200:	980b      	ldr	r0, [sp, #44]	; 0x2c
  413202:	6903      	ldr	r3, [r0, #16]
  413204:	1c9a      	adds	r2, r3, #2
  413206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413208:	0092      	lsls	r2, r2, #2
  41320a:	f103 010c 	add.w	r1, r3, #12
  41320e:	f106 000c 	add.w	r0, r6, #12
  413212:	f7f9 fa71 	bl	40c6f8 <memcpy>
  413216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41321a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  41321e:	a81b      	add	r0, sp, #108	; 0x6c
  413220:	a91c      	add	r1, sp, #112	; 0x70
  413222:	e88d 0003 	stmia.w	sp, {r0, r1}
  413226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  41322a:	4658      	mov	r0, fp
  41322c:	f7ff fa2e 	bl	41268c <__d2b>
  413230:	901a      	str	r0, [sp, #104]	; 0x68
  413232:	2800      	cmp	r0, #0
  413234:	f000 8412 	beq.w	413a5c <_strtod_r+0xcfc>
  413238:	4658      	mov	r0, fp
  41323a:	2101      	movs	r1, #1
  41323c:	f7fe ffca 	bl	4121d4 <__i2b>
  413240:	4607      	mov	r7, r0
  413242:	2800      	cmp	r0, #0
  413244:	f000 82a9 	beq.w	41379a <_strtod_r+0xa3a>
  413248:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  41324a:	2b00      	cmp	r3, #0
  41324c:	f2c0 8110 	blt.w	413470 <_strtod_r+0x710>
  413250:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  413254:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  413256:	4499      	add	r9, r3
  413258:	980a      	ldr	r0, [sp, #40]	; 0x28
  41325a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  41325c:	1a1b      	subs	r3, r3, r0
  41325e:	4413      	add	r3, r2
  413260:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  413264:	428b      	cmp	r3, r1
  413266:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  41326a:	f280 80da 	bge.w	413422 <_strtod_r+0x6c2>
  41326e:	1aca      	subs	r2, r1, r3
  413270:	2a1f      	cmp	r2, #31
  413272:	ebc2 0a0a 	rsb	sl, r2, sl
  413276:	f300 8100 	bgt.w	41347a <_strtod_r+0x71a>
  41327a:	f04f 0801 	mov.w	r8, #1
  41327e:	2300      	movs	r3, #0
  413280:	fa08 f802 	lsl.w	r8, r8, r2
  413284:	930c      	str	r3, [sp, #48]	; 0x30
  413286:	980a      	ldr	r0, [sp, #40]	; 0x28
  413288:	4455      	add	r5, sl
  41328a:	44ca      	add	sl, r9
  41328c:	45ca      	cmp	sl, r9
  41328e:	bfb4      	ite	lt
  413290:	4653      	movlt	r3, sl
  413292:	464b      	movge	r3, r9
  413294:	4405      	add	r5, r0
  413296:	42ab      	cmp	r3, r5
  413298:	bfa8      	it	ge
  41329a:	462b      	movge	r3, r5
  41329c:	2b00      	cmp	r3, #0
  41329e:	dd04      	ble.n	4132aa <_strtod_r+0x54a>
  4132a0:	ebc3 0a0a 	rsb	sl, r3, sl
  4132a4:	1aed      	subs	r5, r5, r3
  4132a6:	ebc3 0909 	rsb	r9, r3, r9
  4132aa:	990e      	ldr	r1, [sp, #56]	; 0x38
  4132ac:	b1b1      	cbz	r1, 4132dc <_strtod_r+0x57c>
  4132ae:	4639      	mov	r1, r7
  4132b0:	4658      	mov	r0, fp
  4132b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4132b4:	f7ff f836 	bl	412324 <__pow5mult>
  4132b8:	4607      	mov	r7, r0
  4132ba:	2800      	cmp	r0, #0
  4132bc:	f000 826d 	beq.w	41379a <_strtod_r+0xa3a>
  4132c0:	4658      	mov	r0, fp
  4132c2:	4639      	mov	r1, r7
  4132c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4132c6:	f7fe ff8f 	bl	4121e8 <__multiply>
  4132ca:	4604      	mov	r4, r0
  4132cc:	2800      	cmp	r0, #0
  4132ce:	f000 8264 	beq.w	41379a <_strtod_r+0xa3a>
  4132d2:	4658      	mov	r0, fp
  4132d4:	991a      	ldr	r1, [sp, #104]	; 0x68
  4132d6:	f7fe fe8d 	bl	411ff4 <_Bfree>
  4132da:	941a      	str	r4, [sp, #104]	; 0x68
  4132dc:	f1ba 0f00 	cmp.w	sl, #0
  4132e0:	dd08      	ble.n	4132f4 <_strtod_r+0x594>
  4132e2:	4652      	mov	r2, sl
  4132e4:	4658      	mov	r0, fp
  4132e6:	991a      	ldr	r1, [sp, #104]	; 0x68
  4132e8:	f7ff f86a 	bl	4123c0 <__lshift>
  4132ec:	901a      	str	r0, [sp, #104]	; 0x68
  4132ee:	2800      	cmp	r0, #0
  4132f0:	f000 83b4 	beq.w	413a5c <_strtod_r+0xcfc>
  4132f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4132f6:	b142      	cbz	r2, 41330a <_strtod_r+0x5aa>
  4132f8:	4631      	mov	r1, r6
  4132fa:	4658      	mov	r0, fp
  4132fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4132fe:	f7ff f811 	bl	412324 <__pow5mult>
  413302:	4606      	mov	r6, r0
  413304:	2800      	cmp	r0, #0
  413306:	f000 8248 	beq.w	41379a <_strtod_r+0xa3a>
  41330a:	2d00      	cmp	r5, #0
  41330c:	dd08      	ble.n	413320 <_strtod_r+0x5c0>
  41330e:	4631      	mov	r1, r6
  413310:	462a      	mov	r2, r5
  413312:	4658      	mov	r0, fp
  413314:	f7ff f854 	bl	4123c0 <__lshift>
  413318:	4606      	mov	r6, r0
  41331a:	2800      	cmp	r0, #0
  41331c:	f000 823d 	beq.w	41379a <_strtod_r+0xa3a>
  413320:	f1b9 0f00 	cmp.w	r9, #0
  413324:	dd08      	ble.n	413338 <_strtod_r+0x5d8>
  413326:	4639      	mov	r1, r7
  413328:	464a      	mov	r2, r9
  41332a:	4658      	mov	r0, fp
  41332c:	f7ff f848 	bl	4123c0 <__lshift>
  413330:	4607      	mov	r7, r0
  413332:	2800      	cmp	r0, #0
  413334:	f000 8231 	beq.w	41379a <_strtod_r+0xa3a>
  413338:	4658      	mov	r0, fp
  41333a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41333c:	4632      	mov	r2, r6
  41333e:	f7ff f8c1 	bl	4124c4 <__mdiff>
  413342:	9006      	str	r0, [sp, #24]
  413344:	2800      	cmp	r0, #0
  413346:	f000 8228 	beq.w	41379a <_strtod_r+0xa3a>
  41334a:	9906      	ldr	r1, [sp, #24]
  41334c:	2300      	movs	r3, #0
  41334e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  413352:	60cb      	str	r3, [r1, #12]
  413354:	4639      	mov	r1, r7
  413356:	f7ff f891 	bl	41247c <__mcmp>
  41335a:	2800      	cmp	r0, #0
  41335c:	f2c0 83cb 	blt.w	413af6 <_strtod_r+0xd96>
  413360:	f000 8388 	beq.w	413a74 <_strtod_r+0xd14>
  413364:	9806      	ldr	r0, [sp, #24]
  413366:	4639      	mov	r1, r7
  413368:	f7ff f9ee 	bl	412748 <__ratio>
  41336c:	2200      	movs	r2, #0
  41336e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  413372:	4604      	mov	r4, r0
  413374:	460d      	mov	r5, r1
  413376:	f002 f9ff 	bl	415778 <__aeabi_dcmple>
  41337a:	2800      	cmp	r0, #0
  41337c:	d064      	beq.n	413448 <_strtod_r+0x6e8>
  41337e:	f1ba 0f00 	cmp.w	sl, #0
  413382:	f000 808e 	beq.w	4134a2 <_strtod_r+0x742>
  413386:	4d2d      	ldr	r5, [pc, #180]	; (41343c <_strtod_r+0x6dc>)
  413388:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41338c:	2400      	movs	r4, #0
  41338e:	4622      	mov	r2, r4
  413390:	462b      	mov	r3, r5
  413392:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  413396:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 413444 <_strtod_r+0x6e4>
  41339a:	4b29      	ldr	r3, [pc, #164]	; (413440 <_strtod_r+0x6e0>)
  41339c:	ea09 0808 	and.w	r8, r9, r8
  4133a0:	4598      	cmp	r8, r3
  4133a2:	f000 81bf 	beq.w	413724 <_strtod_r+0x9c4>
  4133a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4133a8:	b182      	cbz	r2, 4133cc <_strtod_r+0x66c>
  4133aa:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  4133ae:	d80d      	bhi.n	4133cc <_strtod_r+0x66c>
  4133b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4133b4:	a31e      	add	r3, pc, #120	; (adr r3, 413430 <_strtod_r+0x6d0>)
  4133b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4133ba:	f002 f9dd 	bl	415778 <__aeabi_dcmple>
  4133be:	2800      	cmp	r0, #0
  4133c0:	f040 811b 	bne.w	4135fa <_strtod_r+0x89a>
  4133c4:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  4133c8:	ebc8 0503 	rsb	r5, r8, r3
  4133cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4133d0:	f7ff f8e2 	bl	412598 <__ulp>
  4133d4:	4602      	mov	r2, r0
  4133d6:	460b      	mov	r3, r1
  4133d8:	4620      	mov	r0, r4
  4133da:	4629      	mov	r1, r5
  4133dc:	f001 ff50 	bl	415280 <__aeabi_dmul>
  4133e0:	4602      	mov	r2, r0
  4133e2:	460b      	mov	r3, r1
  4133e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4133e8:	f001 fd98 	bl	414f1c <__adddf3>
  4133ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4133f0:	9c03      	ldr	r4, [sp, #12]
  4133f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4133f4:	b921      	cbnz	r1, 413400 <_strtod_r+0x6a0>
  4133f6:	4b13      	ldr	r3, [pc, #76]	; (413444 <_strtod_r+0x6e4>)
  4133f8:	4023      	ands	r3, r4
  4133fa:	4598      	cmp	r8, r3
  4133fc:	f000 81ed 	beq.w	4137da <_strtod_r+0xa7a>
  413400:	4658      	mov	r0, fp
  413402:	991a      	ldr	r1, [sp, #104]	; 0x68
  413404:	f7fe fdf6 	bl	411ff4 <_Bfree>
  413408:	4658      	mov	r0, fp
  41340a:	4631      	mov	r1, r6
  41340c:	f7fe fdf2 	bl	411ff4 <_Bfree>
  413410:	4658      	mov	r0, fp
  413412:	4639      	mov	r1, r7
  413414:	f7fe fdee 	bl	411ff4 <_Bfree>
  413418:	4658      	mov	r0, fp
  41341a:	9906      	ldr	r1, [sp, #24]
  41341c:	f7fe fdea 	bl	411ff4 <_Bfree>
  413420:	e6e5      	b.n	4131ee <_strtod_r+0x48e>
  413422:	2300      	movs	r3, #0
  413424:	930c      	str	r3, [sp, #48]	; 0x30
  413426:	f04f 0801 	mov.w	r8, #1
  41342a:	e72c      	b.n	413286 <_strtod_r+0x526>
  41342c:	f3af 8000 	nop.w
  413430:	ffc00000 	.word	0xffc00000
  413434:	41dfffff 	.word	0x41dfffff
  413438:	00415fe0 	.word	0x00415fe0
  41343c:	3ff00000 	.word	0x3ff00000
  413440:	7fe00000 	.word	0x7fe00000
  413444:	7ff00000 	.word	0x7ff00000
  413448:	4620      	mov	r0, r4
  41344a:	4629      	mov	r1, r5
  41344c:	2200      	movs	r2, #0
  41344e:	4ba8      	ldr	r3, [pc, #672]	; (4136f0 <_strtod_r+0x990>)
  413450:	f001 ff16 	bl	415280 <__aeabi_dmul>
  413454:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413458:	f1ba 0f00 	cmp.w	sl, #0
  41345c:	d11c      	bne.n	413498 <_strtod_r+0x738>
  41345e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  413462:	9010      	str	r0, [sp, #64]	; 0x40
  413464:	9111      	str	r1, [sp, #68]	; 0x44
  413466:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  41346a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41346e:	e792      	b.n	413396 <_strtod_r+0x636>
  413470:	990f      	ldr	r1, [sp, #60]	; 0x3c
  413472:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  413476:	1acd      	subs	r5, r1, r3
  413478:	e6ee      	b.n	413258 <_strtod_r+0x4f8>
  41347a:	4c9e      	ldr	r4, [pc, #632]	; (4136f4 <_strtod_r+0x994>)
  41347c:	f04f 0801 	mov.w	r8, #1
  413480:	1ae4      	subs	r4, r4, r3
  413482:	fa08 f404 	lsl.w	r4, r8, r4
  413486:	940c      	str	r4, [sp, #48]	; 0x30
  413488:	e6fd      	b.n	413286 <_strtod_r+0x526>
  41348a:	9519      	str	r5, [sp, #100]	; 0x64
  41348c:	2100      	movs	r1, #0
  41348e:	f1ba 0f00 	cmp.w	sl, #0
  413492:	f47f ad20 	bne.w	412ed6 <_strtod_r+0x176>
  413496:	e573      	b.n	412f80 <_strtod_r+0x220>
  413498:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  41349c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  4134a0:	e7e1      	b.n	413466 <_strtod_r+0x706>
  4134a2:	9b02      	ldr	r3, [sp, #8]
  4134a4:	2b00      	cmp	r3, #0
  4134a6:	f040 8092 	bne.w	4135ce <_strtod_r+0x86e>
  4134aa:	9803      	ldr	r0, [sp, #12]
  4134ac:	f3c0 0313 	ubfx	r3, r0, #0, #20
  4134b0:	4681      	mov	r9, r0
  4134b2:	2b00      	cmp	r3, #0
  4134b4:	f040 8091 	bne.w	4135da <_strtod_r+0x87a>
  4134b8:	4620      	mov	r0, r4
  4134ba:	4629      	mov	r1, r5
  4134bc:	2200      	movs	r2, #0
  4134be:	4b8e      	ldr	r3, [pc, #568]	; (4136f8 <_strtod_r+0x998>)
  4134c0:	f002 f950 	bl	415764 <__aeabi_dcmplt>
  4134c4:	2800      	cmp	r0, #0
  4134c6:	f040 8356 	bne.w	413b76 <_strtod_r+0xe16>
  4134ca:	4620      	mov	r0, r4
  4134cc:	4629      	mov	r1, r5
  4134ce:	2200      	movs	r2, #0
  4134d0:	4b87      	ldr	r3, [pc, #540]	; (4136f0 <_strtod_r+0x990>)
  4134d2:	f001 fed5 	bl	415280 <__aeabi_dmul>
  4134d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4134da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4134de:	9016      	str	r0, [sp, #88]	; 0x58
  4134e0:	9117      	str	r1, [sp, #92]	; 0x5c
  4134e2:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4134e6:	e756      	b.n	413396 <_strtod_r+0x636>
  4134e8:	4640      	mov	r0, r8
  4134ea:	4643      	mov	r3, r8
  4134ec:	46b2      	mov	sl, r6
  4134ee:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4134f2:	2a09      	cmp	r2, #9
  4134f4:	d825      	bhi.n	413542 <_strtod_r+0x7e2>
  4134f6:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4134f8:	3001      	adds	r0, #1
  4134fa:	2a00      	cmp	r2, #0
  4134fc:	f000 81af 	beq.w	41385e <_strtod_r+0xafe>
  413500:	2801      	cmp	r0, #1
  413502:	4403      	add	r3, r0
  413504:	f000 81a0 	beq.w	413848 <_strtod_r+0xae8>
  413508:	4450      	add	r0, sl
  41350a:	3801      	subs	r0, #1
  41350c:	e006      	b.n	41351c <_strtod_r+0x7bc>
  41350e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  413512:	ea4f 0949 	mov.w	r9, r9, lsl #1
  413516:	4582      	cmp	sl, r0
  413518:	f000 8197 	beq.w	41384a <_strtod_r+0xaea>
  41351c:	f10a 0a01 	add.w	sl, sl, #1
  413520:	f10a 31ff 	add.w	r1, sl, #4294967295
  413524:	2908      	cmp	r1, #8
  413526:	ddf2      	ble.n	41350e <_strtod_r+0x7ae>
  413528:	f1ba 0f10 	cmp.w	sl, #16
  41352c:	bfdc      	itt	le
  41352e:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  413532:	007f      	lslle	r7, r7, #1
  413534:	e7ef      	b.n	413516 <_strtod_r+0x7b6>
  413536:	2200      	movs	r2, #0
  413538:	9208      	str	r2, [sp, #32]
  41353a:	e5bc      	b.n	4130b6 <_strtod_r+0x356>
  41353c:	2100      	movs	r1, #0
  41353e:	9108      	str	r1, [sp, #32]
  413540:	e5b6      	b.n	4130b0 <_strtod_r+0x350>
  413542:	2201      	movs	r2, #1
  413544:	920b      	str	r2, [sp, #44]	; 0x2c
  413546:	e4bd      	b.n	412ec4 <_strtod_r+0x164>
  413548:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  41354c:	f300 8117 	bgt.w	41377e <_strtod_r+0xa1e>
  413550:	1124      	asrs	r4, r4, #4
  413552:	2c01      	cmp	r4, #1
  413554:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 413720 <_strtod_r+0x9c0>
  413558:	f340 832a 	ble.w	413bb0 <_strtod_r+0xe50>
  41355c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413560:	4645      	mov	r5, r8
  413562:	2700      	movs	r7, #0
  413564:	f014 0f01 	tst.w	r4, #1
  413568:	f107 0701 	add.w	r7, r7, #1
  41356c:	ea4f 0464 	mov.w	r4, r4, asr #1
  413570:	d003      	beq.n	41357a <_strtod_r+0x81a>
  413572:	e9d5 2300 	ldrd	r2, r3, [r5]
  413576:	f001 fe83 	bl	415280 <__aeabi_dmul>
  41357a:	2c01      	cmp	r4, #1
  41357c:	f105 0508 	add.w	r5, r5, #8
  413580:	dcf0      	bgt.n	413564 <_strtod_r+0x804>
  413582:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413586:	9b03      	ldr	r3, [sp, #12]
  413588:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  41358c:	9303      	str	r3, [sp, #12]
  41358e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  413592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413596:	e9d7 0100 	ldrd	r0, r1, [r7]
  41359a:	f001 fe71 	bl	415280 <__aeabi_dmul>
  41359e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4135a2:	9803      	ldr	r0, [sp, #12]
  4135a4:	4a55      	ldr	r2, [pc, #340]	; (4136fc <_strtod_r+0x99c>)
  4135a6:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4135aa:	0d1b      	lsrs	r3, r3, #20
  4135ac:	051b      	lsls	r3, r3, #20
  4135ae:	4293      	cmp	r3, r2
  4135b0:	f200 80e5 	bhi.w	41377e <_strtod_r+0xa1e>
  4135b4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  4135b8:	4293      	cmp	r3, r2
  4135ba:	f240 82d5 	bls.w	413b68 <_strtod_r+0xe08>
  4135be:	4950      	ldr	r1, [pc, #320]	; (413700 <_strtod_r+0x9a0>)
  4135c0:	9103      	str	r1, [sp, #12]
  4135c2:	2200      	movs	r2, #0
  4135c4:	f04f 33ff 	mov.w	r3, #4294967295
  4135c8:	920a      	str	r2, [sp, #40]	; 0x28
  4135ca:	9302      	str	r3, [sp, #8]
  4135cc:	e5f6      	b.n	4131bc <_strtod_r+0x45c>
  4135ce:	9902      	ldr	r1, [sp, #8]
  4135d0:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4135d4:	2901      	cmp	r1, #1
  4135d6:	f000 81c9 	beq.w	41396c <_strtod_r+0xc0c>
  4135da:	4947      	ldr	r1, [pc, #284]	; (4136f8 <_strtod_r+0x998>)
  4135dc:	4d49      	ldr	r5, [pc, #292]	; (413704 <_strtod_r+0x9a4>)
  4135de:	2000      	movs	r0, #0
  4135e0:	2400      	movs	r4, #0
  4135e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4135e6:	e6d6      	b.n	413396 <_strtod_r+0x636>
  4135e8:	9919      	ldr	r1, [sp, #100]	; 0x64
  4135ea:	9106      	str	r1, [sp, #24]
  4135ec:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4135f0:	f04f 0a00 	mov.w	sl, #0
  4135f4:	460c      	mov	r4, r1
  4135f6:	2001      	movs	r0, #1
  4135f8:	e77f      	b.n	4134fa <_strtod_r+0x79a>
  4135fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4135fe:	f002 f901 	bl	415804 <__aeabi_d2uiz>
  413602:	2800      	cmp	r0, #0
  413604:	f000 81ad 	beq.w	413962 <_strtod_r+0xc02>
  413608:	f001 fdc4 	bl	415194 <__aeabi_ui2d>
  41360c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413610:	f1ba 0f00 	cmp.w	sl, #0
  413614:	f040 81a0 	bne.w	413958 <_strtod_r+0xbf8>
  413618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41361a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41361c:	9114      	str	r1, [sp, #80]	; 0x50
  41361e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  413622:	9215      	str	r2, [sp, #84]	; 0x54
  413624:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  413628:	e6cc      	b.n	4133c4 <_strtod_r+0x664>
  41362a:	4837      	ldr	r0, [pc, #220]	; (413708 <_strtod_r+0x9a8>)
  41362c:	9919      	ldr	r1, [sp, #100]	; 0x64
  41362e:	e009      	b.n	413644 <_strtod_r+0x8e4>
  413630:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  413634:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  413638:	2c19      	cmp	r4, #25
  41363a:	bf98      	it	ls
  41363c:	3320      	addls	r3, #32
  41363e:	4293      	cmp	r3, r2
  413640:	f47f abdd 	bne.w	412dfe <_strtod_r+0x9e>
  413644:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  413648:	2a00      	cmp	r2, #0
  41364a:	d1f1      	bne.n	413630 <_strtod_r+0x8d0>
  41364c:	1c4b      	adds	r3, r1, #1
  41364e:	9319      	str	r3, [sp, #100]	; 0x64
  413650:	784b      	ldrb	r3, [r1, #1]
  413652:	2b28      	cmp	r3, #40	; 0x28
  413654:	f000 82e2 	beq.w	413c1c <_strtod_r+0xebc>
  413658:	4a2c      	ldr	r2, [pc, #176]	; (41370c <_strtod_r+0x9ac>)
  41365a:	9203      	str	r2, [sp, #12]
  41365c:	2300      	movs	r3, #0
  41365e:	9302      	str	r3, [sp, #8]
  413660:	e513      	b.n	41308a <_strtod_r+0x32a>
  413662:	482b      	ldr	r0, [pc, #172]	; (413710 <_strtod_r+0x9b0>)
  413664:	9919      	ldr	r1, [sp, #100]	; 0x64
  413666:	e009      	b.n	41367c <_strtod_r+0x91c>
  413668:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  41366c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  413670:	2c19      	cmp	r4, #25
  413672:	bf98      	it	ls
  413674:	3320      	addls	r3, #32
  413676:	4293      	cmp	r3, r2
  413678:	f47f abc1 	bne.w	412dfe <_strtod_r+0x9e>
  41367c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  413680:	2a00      	cmp	r2, #0
  413682:	d1f1      	bne.n	413668 <_strtod_r+0x908>
  413684:	9119      	str	r1, [sp, #100]	; 0x64
  413686:	4c23      	ldr	r4, [pc, #140]	; (413714 <_strtod_r+0x9b4>)
  413688:	4608      	mov	r0, r1
  41368a:	e009      	b.n	4136a0 <_strtod_r+0x940>
  41368c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  413690:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  413694:	2d19      	cmp	r5, #25
  413696:	bf98      	it	ls
  413698:	3320      	addls	r3, #32
  41369a:	4293      	cmp	r3, r2
  41369c:	f040 8285 	bne.w	413baa <_strtod_r+0xe4a>
  4136a0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  4136a4:	2a00      	cmp	r2, #0
  4136a6:	d1f1      	bne.n	41368c <_strtod_r+0x92c>
  4136a8:	3001      	adds	r0, #1
  4136aa:	9019      	str	r0, [sp, #100]	; 0x64
  4136ac:	4a1a      	ldr	r2, [pc, #104]	; (413718 <_strtod_r+0x9b8>)
  4136ae:	9203      	str	r2, [sp, #12]
  4136b0:	2300      	movs	r3, #0
  4136b2:	9302      	str	r3, [sp, #8]
  4136b4:	e4e9      	b.n	41308a <_strtod_r+0x32a>
  4136b6:	9907      	ldr	r1, [sp, #28]
  4136b8:	9101      	str	r1, [sp, #4]
  4136ba:	ab1a      	add	r3, sp, #104	; 0x68
  4136bc:	9300      	str	r3, [sp, #0]
  4136be:	4658      	mov	r0, fp
  4136c0:	a919      	add	r1, sp, #100	; 0x64
  4136c2:	4a16      	ldr	r2, [pc, #88]	; (41371c <_strtod_r+0x9bc>)
  4136c4:	ab1b      	add	r3, sp, #108	; 0x6c
  4136c6:	f001 f8af 	bl	414828 <__gethex>
  4136ca:	f010 0507 	ands.w	r5, r0, #7
  4136ce:	4604      	mov	r4, r0
  4136d0:	f43f acca 	beq.w	413068 <_strtod_r+0x308>
  4136d4:	2d06      	cmp	r5, #6
  4136d6:	f040 8157 	bne.w	413988 <_strtod_r+0xc28>
  4136da:	3601      	adds	r6, #1
  4136dc:	2200      	movs	r2, #0
  4136de:	9619      	str	r6, [sp, #100]	; 0x64
  4136e0:	f04f 0800 	mov.w	r8, #0
  4136e4:	f04f 0900 	mov.w	r9, #0
  4136e8:	9207      	str	r2, [sp, #28]
  4136ea:	f7ff bb8f 	b.w	412e0c <_strtod_r+0xac>
  4136ee:	bf00      	nop
  4136f0:	3fe00000 	.word	0x3fe00000
  4136f4:	fffffbe3 	.word	0xfffffbe3
  4136f8:	3ff00000 	.word	0x3ff00000
  4136fc:	7ca00000 	.word	0x7ca00000
  413700:	7fefffff 	.word	0x7fefffff
  413704:	bff00000 	.word	0xbff00000
  413708:	004160fb 	.word	0x004160fb
  41370c:	fff80000 	.word	0xfff80000
  413710:	004160ef 	.word	0x004160ef
  413714:	004160f3 	.word	0x004160f3
  413718:	7ff00000 	.word	0x7ff00000
  41371c:	004160dc 	.word	0x004160dc
  413720:	004160a8 	.word	0x004160a8
  413724:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  413728:	f8cd 900c 	str.w	r9, [sp, #12]
  41372c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413730:	f7fe ff32 	bl	412598 <__ulp>
  413734:	4602      	mov	r2, r0
  413736:	460b      	mov	r3, r1
  413738:	4620      	mov	r0, r4
  41373a:	4629      	mov	r1, r5
  41373c:	f001 fda0 	bl	415280 <__aeabi_dmul>
  413740:	4602      	mov	r2, r0
  413742:	460b      	mov	r3, r1
  413744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413748:	f001 fbe8 	bl	414f1c <__adddf3>
  41374c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413750:	9903      	ldr	r1, [sp, #12]
  413752:	4aad      	ldr	r2, [pc, #692]	; (413a08 <_strtod_r+0xca8>)
  413754:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  413758:	0d1b      	lsrs	r3, r3, #20
  41375a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  41375e:	051b      	lsls	r3, r3, #20
  413760:	4293      	cmp	r3, r2
  413762:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  413766:	f240 80d5 	bls.w	413914 <_strtod_r+0xbb4>
  41376a:	4ba8      	ldr	r3, [pc, #672]	; (413a0c <_strtod_r+0xcac>)
  41376c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  41376e:	4299      	cmp	r1, r3
  413770:	d010      	beq.n	413794 <_strtod_r+0xa34>
  413772:	4ba6      	ldr	r3, [pc, #664]	; (413a0c <_strtod_r+0xcac>)
  413774:	9303      	str	r3, [sp, #12]
  413776:	f04f 30ff 	mov.w	r0, #4294967295
  41377a:	9002      	str	r0, [sp, #8]
  41377c:	e640      	b.n	413400 <_strtod_r+0x6a0>
  41377e:	4aa4      	ldr	r2, [pc, #656]	; (413a10 <_strtod_r+0xcb0>)
  413780:	9203      	str	r2, [sp, #12]
  413782:	2000      	movs	r0, #0
  413784:	2322      	movs	r3, #34	; 0x22
  413786:	9002      	str	r0, [sp, #8]
  413788:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41378c:	f8cb 3000 	str.w	r3, [fp]
  413790:	f7ff bb3c 	b.w	412e0c <_strtod_r+0xac>
  413794:	9a12      	ldr	r2, [sp, #72]	; 0x48
  413796:	3201      	adds	r2, #1
  413798:	d1eb      	bne.n	413772 <_strtod_r+0xa12>
  41379a:	46b2      	mov	sl, r6
  41379c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41379e:	4a9c      	ldr	r2, [pc, #624]	; (413a10 <_strtod_r+0xcb0>)
  4137a0:	9203      	str	r2, [sp, #12]
  4137a2:	2000      	movs	r0, #0
  4137a4:	9002      	str	r0, [sp, #8]
  4137a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4137aa:	2322      	movs	r3, #34	; 0x22
  4137ac:	f8cb 3000 	str.w	r3, [fp]
  4137b0:	4658      	mov	r0, fp
  4137b2:	f7fe fc1f 	bl	411ff4 <_Bfree>
  4137b6:	4658      	mov	r0, fp
  4137b8:	4651      	mov	r1, sl
  4137ba:	f7fe fc1b 	bl	411ff4 <_Bfree>
  4137be:	4658      	mov	r0, fp
  4137c0:	4639      	mov	r1, r7
  4137c2:	f7fe fc17 	bl	411ff4 <_Bfree>
  4137c6:	4658      	mov	r0, fp
  4137c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4137ca:	f7fe fc13 	bl	411ff4 <_Bfree>
  4137ce:	4658      	mov	r0, fp
  4137d0:	9906      	ldr	r1, [sp, #24]
  4137d2:	f7fe fc0f 	bl	411ff4 <_Bfree>
  4137d6:	f7ff bb19 	b.w	412e0c <_strtod_r+0xac>
  4137da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4137de:	f001 ffe9 	bl	4157b4 <__aeabi_d2iz>
  4137e2:	f001 fce7 	bl	4151b4 <__aeabi_i2d>
  4137e6:	4602      	mov	r2, r0
  4137e8:	460b      	mov	r3, r1
  4137ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4137ee:	f001 fb93 	bl	414f18 <__aeabi_dsub>
  4137f2:	4680      	mov	r8, r0
  4137f4:	4689      	mov	r9, r1
  4137f6:	f1ba 0f00 	cmp.w	sl, #0
  4137fa:	d111      	bne.n	413820 <_strtod_r+0xac0>
  4137fc:	9a02      	ldr	r2, [sp, #8]
  4137fe:	b97a      	cbnz	r2, 413820 <_strtod_r+0xac0>
  413800:	f3c4 0413 	ubfx	r4, r4, #0, #20
  413804:	b964      	cbnz	r4, 413820 <_strtod_r+0xac0>
  413806:	a37a      	add	r3, pc, #488	; (adr r3, 4139f0 <_strtod_r+0xc90>)
  413808:	e9d3 2300 	ldrd	r2, r3, [r3]
  41380c:	f001 ffaa 	bl	415764 <__aeabi_dcmplt>
  413810:	2800      	cmp	r0, #0
  413812:	f43f adf5 	beq.w	413400 <_strtod_r+0x6a0>
  413816:	46b2      	mov	sl, r6
  413818:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41381c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41381e:	e7c7      	b.n	4137b0 <_strtod_r+0xa50>
  413820:	4640      	mov	r0, r8
  413822:	4649      	mov	r1, r9
  413824:	a374      	add	r3, pc, #464	; (adr r3, 4139f8 <_strtod_r+0xc98>)
  413826:	e9d3 2300 	ldrd	r2, r3, [r3]
  41382a:	f001 ff9b 	bl	415764 <__aeabi_dcmplt>
  41382e:	2800      	cmp	r0, #0
  413830:	d1f1      	bne.n	413816 <_strtod_r+0xab6>
  413832:	4640      	mov	r0, r8
  413834:	4649      	mov	r1, r9
  413836:	a372      	add	r3, pc, #456	; (adr r3, 413a00 <_strtod_r+0xca0>)
  413838:	e9d3 2300 	ldrd	r2, r3, [r3]
  41383c:	f001 ffb0 	bl	4157a0 <__aeabi_dcmpgt>
  413840:	2800      	cmp	r0, #0
  413842:	f43f addd 	beq.w	413400 <_strtod_r+0x6a0>
  413846:	e7e6      	b.n	413816 <_strtod_r+0xab6>
  413848:	4650      	mov	r0, sl
  41384a:	2808      	cmp	r0, #8
  41384c:	f100 0a01 	add.w	sl, r0, #1
  413850:	f300 8107 	bgt.w	413a62 <_strtod_r+0xd02>
  413854:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  413858:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  41385c:	2000      	movs	r0, #0
  41385e:	1c62      	adds	r2, r4, #1
  413860:	9219      	str	r2, [sp, #100]	; 0x64
  413862:	7864      	ldrb	r4, [r4, #1]
  413864:	e643      	b.n	4134ee <_strtod_r+0x78e>
  413866:	f43f aca7 	beq.w	4131b8 <_strtod_r+0x458>
  41386a:	f1c8 0400 	rsb	r4, r8, #0
  41386e:	f014 030f 	ands.w	r3, r4, #15
  413872:	d00a      	beq.n	41388a <_strtod_r+0xb2a>
  413874:	4a67      	ldr	r2, [pc, #412]	; (413a14 <_strtod_r+0xcb4>)
  413876:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  41387a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  41387e:	e9d3 2300 	ldrd	r2, r3, [r3]
  413882:	f001 fe27 	bl	4154d4 <__aeabi_ddiv>
  413886:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41388a:	1124      	asrs	r4, r4, #4
  41388c:	f43f ac94 	beq.w	4131b8 <_strtod_r+0x458>
  413890:	2c1f      	cmp	r4, #31
  413892:	dc33      	bgt.n	4138fc <_strtod_r+0xb9c>
  413894:	f014 0f10 	tst.w	r4, #16
  413898:	bf14      	ite	ne
  41389a:	216a      	movne	r1, #106	; 0x6a
  41389c:	2100      	moveq	r1, #0
  41389e:	2c00      	cmp	r4, #0
  4138a0:	910a      	str	r1, [sp, #40]	; 0x28
  4138a2:	dd0e      	ble.n	4138c2 <_strtod_r+0xb62>
  4138a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4138a8:	4d5b      	ldr	r5, [pc, #364]	; (413a18 <_strtod_r+0xcb8>)
  4138aa:	07e3      	lsls	r3, r4, #31
  4138ac:	d503      	bpl.n	4138b6 <_strtod_r+0xb56>
  4138ae:	e9d5 2300 	ldrd	r2, r3, [r5]
  4138b2:	f001 fce5 	bl	415280 <__aeabi_dmul>
  4138b6:	1064      	asrs	r4, r4, #1
  4138b8:	f105 0508 	add.w	r5, r5, #8
  4138bc:	d1f5      	bne.n	4138aa <_strtod_r+0xb4a>
  4138be:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4138c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4138c4:	b18a      	cbz	r2, 4138ea <_strtod_r+0xb8a>
  4138c6:	9803      	ldr	r0, [sp, #12]
  4138c8:	f3c0 530a 	ubfx	r3, r0, #20, #11
  4138cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4138d0:	2b00      	cmp	r3, #0
  4138d2:	dd0a      	ble.n	4138ea <_strtod_r+0xb8a>
  4138d4:	2b1f      	cmp	r3, #31
  4138d6:	f340 81bd 	ble.w	413c54 <_strtod_r+0xef4>
  4138da:	2100      	movs	r1, #0
  4138dc:	2b34      	cmp	r3, #52	; 0x34
  4138de:	9102      	str	r1, [sp, #8]
  4138e0:	f340 81c0 	ble.w	413c64 <_strtod_r+0xf04>
  4138e4:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  4138e8:	9203      	str	r2, [sp, #12]
  4138ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4138ee:	2200      	movs	r2, #0
  4138f0:	2300      	movs	r3, #0
  4138f2:	f001 ff2d 	bl	415750 <__aeabi_dcmpeq>
  4138f6:	2800      	cmp	r0, #0
  4138f8:	f43f ac60 	beq.w	4131bc <_strtod_r+0x45c>
  4138fc:	2322      	movs	r3, #34	; 0x22
  4138fe:	f8cb 3000 	str.w	r3, [fp]
  413902:	f04f 0800 	mov.w	r8, #0
  413906:	f04f 0900 	mov.w	r9, #0
  41390a:	f7ff ba7f 	b.w	412e0c <_strtod_r+0xac>
  41390e:	f644 611f 	movw	r1, #19999	; 0x4e1f
  413912:	e40f      	b.n	413134 <_strtod_r+0x3d4>
  413914:	9903      	ldr	r1, [sp, #12]
  413916:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  41391a:	9403      	str	r4, [sp, #12]
  41391c:	e569      	b.n	4133f2 <_strtod_r+0x692>
  41391e:	9808      	ldr	r0, [sp, #32]
  413920:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  413924:	4298      	cmp	r0, r3
  413926:	f73f ac2d 	bgt.w	413184 <_strtod_r+0x424>
  41392a:	4c3a      	ldr	r4, [pc, #232]	; (413a14 <_strtod_r+0xcb4>)
  41392c:	f1ca 050f 	rsb	r5, sl, #15
  413930:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  413934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413938:	e9d1 0100 	ldrd	r0, r1, [r1]
  41393c:	f001 fca0 	bl	415280 <__aeabi_dmul>
  413940:	9a08      	ldr	r2, [sp, #32]
  413942:	1b55      	subs	r5, r2, r5
  413944:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  413948:	e9d4 2300 	ldrd	r2, r3, [r4]
  41394c:	f001 fc98 	bl	415280 <__aeabi_dmul>
  413950:	4680      	mov	r8, r0
  413952:	4689      	mov	r9, r1
  413954:	f7ff ba5a 	b.w	412e0c <_strtod_r+0xac>
  413958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41395c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  413960:	e660      	b.n	413624 <_strtod_r+0x8c4>
  413962:	492e      	ldr	r1, [pc, #184]	; (413a1c <_strtod_r+0xcbc>)
  413964:	2000      	movs	r0, #0
  413966:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41396a:	e651      	b.n	413610 <_strtod_r+0x8b0>
  41396c:	464a      	mov	r2, r9
  41396e:	2a00      	cmp	r2, #0
  413970:	f47f ae33 	bne.w	4135da <_strtod_r+0x87a>
  413974:	46b2      	mov	sl, r6
  413976:	2322      	movs	r3, #34	; 0x22
  413978:	f8cb 3000 	str.w	r3, [fp]
  41397c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41397e:	f04f 0800 	mov.w	r8, #0
  413982:	f04f 0900 	mov.w	r9, #0
  413986:	e713      	b.n	4137b0 <_strtod_r+0xa50>
  413988:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  41398a:	b13a      	cbz	r2, 41399c <_strtod_r+0xc3c>
  41398c:	a81c      	add	r0, sp, #112	; 0x70
  41398e:	2135      	movs	r1, #53	; 0x35
  413990:	f7fe ff02 	bl	412798 <__copybits>
  413994:	4658      	mov	r0, fp
  413996:	991a      	ldr	r1, [sp, #104]	; 0x68
  413998:	f7fe fb2c 	bl	411ff4 <_Bfree>
  41399c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  41399e:	2d06      	cmp	r5, #6
  4139a0:	f63f ab6d 	bhi.w	41307e <_strtod_r+0x31e>
  4139a4:	a001      	add	r0, pc, #4	; (adr r0, 4139ac <_strtod_r+0xc4c>)
  4139a6:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  4139aa:	bf00      	nop
  4139ac:	004139e1 	.word	0x004139e1
  4139b0:	00413a21 	.word	0x00413a21
  4139b4:	004139d5 	.word	0x004139d5
  4139b8:	004139c9 	.word	0x004139c9
  4139bc:	00413073 	.word	0x00413073
  4139c0:	00413a21 	.word	0x00413a21
  4139c4:	004139e1 	.word	0x004139e1
  4139c8:	4911      	ldr	r1, [pc, #68]	; (413a10 <_strtod_r+0xcb0>)
  4139ca:	9103      	str	r1, [sp, #12]
  4139cc:	2200      	movs	r2, #0
  4139ce:	9202      	str	r2, [sp, #8]
  4139d0:	f7ff bb55 	b.w	41307e <_strtod_r+0x31e>
  4139d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4139d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4139d8:	9202      	str	r2, [sp, #8]
  4139da:	9303      	str	r3, [sp, #12]
  4139dc:	f7ff bb4f 	b.w	41307e <_strtod_r+0x31e>
  4139e0:	2100      	movs	r1, #0
  4139e2:	9103      	str	r1, [sp, #12]
  4139e4:	9102      	str	r1, [sp, #8]
  4139e6:	f7ff bb4a 	b.w	41307e <_strtod_r+0x31e>
  4139ea:	bf00      	nop
  4139ec:	f3af 8000 	nop.w
  4139f0:	94a03595 	.word	0x94a03595
  4139f4:	3fcfffff 	.word	0x3fcfffff
  4139f8:	94a03595 	.word	0x94a03595
  4139fc:	3fdfffff 	.word	0x3fdfffff
  413a00:	35afe535 	.word	0x35afe535
  413a04:	3fe00000 	.word	0x3fe00000
  413a08:	7c9fffff 	.word	0x7c9fffff
  413a0c:	7fefffff 	.word	0x7fefffff
  413a10:	7ff00000 	.word	0x7ff00000
  413a14:	00415fe0 	.word	0x00415fe0
  413a18:	00416118 	.word	0x00416118
  413a1c:	3ff00000 	.word	0x3ff00000
  413a20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  413a22:	981c      	ldr	r0, [sp, #112]	; 0x70
  413a24:	9002      	str	r0, [sp, #8]
  413a26:	f203 4333 	addw	r3, r3, #1075	; 0x433
  413a2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  413a2e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  413a32:	9203      	str	r2, [sp, #12]
  413a34:	f7ff bb23 	b.w	41307e <_strtod_r+0x31e>
  413a38:	9b08      	ldr	r3, [sp, #32]
  413a3a:	3316      	adds	r3, #22
  413a3c:	f6ff aba2 	blt.w	413184 <_strtod_r+0x424>
  413a40:	4b8e      	ldr	r3, [pc, #568]	; (413c7c <_strtod_r+0xf1c>)
  413a42:	9808      	ldr	r0, [sp, #32]
  413a44:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  413a48:	e9da 2300 	ldrd	r2, r3, [sl]
  413a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413a50:	f001 fd40 	bl	4154d4 <__aeabi_ddiv>
  413a54:	4680      	mov	r8, r0
  413a56:	4689      	mov	r9, r1
  413a58:	f7ff b9d8 	b.w	412e0c <_strtod_r+0xac>
  413a5c:	46b2      	mov	sl, r6
  413a5e:	4601      	mov	r1, r0
  413a60:	e69d      	b.n	41379e <_strtod_r+0xa3e>
  413a62:	f1ba 0f10 	cmp.w	sl, #16
  413a66:	bfdc      	itt	le
  413a68:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  413a6c:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  413a70:	2000      	movs	r0, #0
  413a72:	e6f4      	b.n	41385e <_strtod_r+0xafe>
  413a74:	4655      	mov	r5, sl
  413a76:	46c4      	mov	ip, r8
  413a78:	46b2      	mov	sl, r6
  413a7a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  413a7e:	2d00      	cmp	r5, #0
  413a80:	f000 8082 	beq.w	413b88 <_strtod_r+0xe28>
  413a84:	9a03      	ldr	r2, [sp, #12]
  413a86:	4b7e      	ldr	r3, [pc, #504]	; (413c80 <_strtod_r+0xf20>)
  413a88:	f3c2 0113 	ubfx	r1, r2, #0, #20
  413a8c:	4299      	cmp	r1, r3
  413a8e:	f000 80a3 	beq.w	413bd8 <_strtod_r+0xe78>
  413a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  413a94:	2b00      	cmp	r3, #0
  413a96:	f000 8083 	beq.w	413ba0 <_strtod_r+0xe40>
  413a9a:	9803      	ldr	r0, [sp, #12]
  413a9c:	4203      	tst	r3, r0
  413a9e:	d00f      	beq.n	413ac0 <_strtod_r+0xd60>
  413aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413aa6:	2d00      	cmp	r5, #0
  413aa8:	f000 8084 	beq.w	413bb4 <_strtod_r+0xe54>
  413aac:	f7ff f938 	bl	412d20 <sulp>
  413ab0:	4602      	mov	r2, r0
  413ab2:	460b      	mov	r3, r1
  413ab4:	4640      	mov	r0, r8
  413ab6:	4649      	mov	r1, r9
  413ab8:	f001 fa30 	bl	414f1c <__adddf3>
  413abc:	4680      	mov	r8, r0
  413abe:	4689      	mov	r9, r1
  413ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413ac2:	b1b3      	cbz	r3, 413af2 <_strtod_r+0xd92>
  413ac4:	486f      	ldr	r0, [pc, #444]	; (413c84 <_strtod_r+0xf24>)
  413ac6:	9013      	str	r0, [sp, #76]	; 0x4c
  413ac8:	2100      	movs	r1, #0
  413aca:	9112      	str	r1, [sp, #72]	; 0x48
  413acc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  413ad0:	4640      	mov	r0, r8
  413ad2:	4649      	mov	r1, r9
  413ad4:	f001 fbd4 	bl	415280 <__aeabi_dmul>
  413ad8:	4680      	mov	r8, r0
  413ada:	4689      	mov	r9, r1
  413adc:	e9cd 8902 	strd	r8, r9, [sp, #8]
  413ae0:	9a03      	ldr	r2, [sp, #12]
  413ae2:	b932      	cbnz	r2, 413af2 <_strtod_r+0xd92>
  413ae4:	9b02      	ldr	r3, [sp, #8]
  413ae6:	b923      	cbnz	r3, 413af2 <_strtod_r+0xd92>
  413ae8:	2322      	movs	r3, #34	; 0x22
  413aea:	991a      	ldr	r1, [sp, #104]	; 0x68
  413aec:	f8cb 3000 	str.w	r3, [fp]
  413af0:	e65e      	b.n	4137b0 <_strtod_r+0xa50>
  413af2:	991a      	ldr	r1, [sp, #104]	; 0x68
  413af4:	e65c      	b.n	4137b0 <_strtod_r+0xa50>
  413af6:	4655      	mov	r5, sl
  413af8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  413afc:	46b2      	mov	sl, r6
  413afe:	2d00      	cmp	r5, #0
  413b00:	d1de      	bne.n	413ac0 <_strtod_r+0xd60>
  413b02:	9a02      	ldr	r2, [sp, #8]
  413b04:	2a00      	cmp	r2, #0
  413b06:	d1db      	bne.n	413ac0 <_strtod_r+0xd60>
  413b08:	9803      	ldr	r0, [sp, #12]
  413b0a:	f3c0 0313 	ubfx	r3, r0, #0, #20
  413b0e:	4604      	mov	r4, r0
  413b10:	2b00      	cmp	r3, #0
  413b12:	d1d5      	bne.n	413ac0 <_strtod_r+0xd60>
  413b14:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  413b18:	0d1b      	lsrs	r3, r3, #20
  413b1a:	051b      	lsls	r3, r3, #20
  413b1c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  413b20:	d9ce      	bls.n	413ac0 <_strtod_r+0xd60>
  413b22:	9906      	ldr	r1, [sp, #24]
  413b24:	694b      	ldr	r3, [r1, #20]
  413b26:	b913      	cbnz	r3, 413b2e <_strtod_r+0xdce>
  413b28:	690b      	ldr	r3, [r1, #16]
  413b2a:	2b01      	cmp	r3, #1
  413b2c:	ddc8      	ble.n	413ac0 <_strtod_r+0xd60>
  413b2e:	9906      	ldr	r1, [sp, #24]
  413b30:	2201      	movs	r2, #1
  413b32:	4658      	mov	r0, fp
  413b34:	f7fe fc44 	bl	4123c0 <__lshift>
  413b38:	4639      	mov	r1, r7
  413b3a:	9006      	str	r0, [sp, #24]
  413b3c:	f7fe fc9e 	bl	41247c <__mcmp>
  413b40:	2800      	cmp	r0, #0
  413b42:	ddbd      	ble.n	413ac0 <_strtod_r+0xd60>
  413b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413b46:	2b00      	cmp	r3, #0
  413b48:	d17a      	bne.n	413c40 <_strtod_r+0xee0>
  413b4a:	4b4f      	ldr	r3, [pc, #316]	; (413c88 <_strtod_r+0xf28>)
  413b4c:	4023      	ands	r3, r4
  413b4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  413b52:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  413b56:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  413b5a:	f04f 31ff 	mov.w	r1, #4294967295
  413b5e:	9003      	str	r0, [sp, #12]
  413b60:	9102      	str	r1, [sp, #8]
  413b62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413b66:	e7ab      	b.n	413ac0 <_strtod_r+0xd60>
  413b68:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  413b6c:	2000      	movs	r0, #0
  413b6e:	9103      	str	r1, [sp, #12]
  413b70:	900a      	str	r0, [sp, #40]	; 0x28
  413b72:	f7ff bb23 	b.w	4131bc <_strtod_r+0x45c>
  413b76:	4b45      	ldr	r3, [pc, #276]	; (413c8c <_strtod_r+0xf2c>)
  413b78:	4945      	ldr	r1, [pc, #276]	; (413c90 <_strtod_r+0xf30>)
  413b7a:	2200      	movs	r2, #0
  413b7c:	2000      	movs	r0, #0
  413b7e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  413b82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413b86:	e4ac      	b.n	4134e2 <_strtod_r+0x782>
  413b88:	9903      	ldr	r1, [sp, #12]
  413b8a:	f3c1 0313 	ubfx	r3, r1, #0, #20
  413b8e:	460c      	mov	r4, r1
  413b90:	2b00      	cmp	r3, #0
  413b92:	f47f af7e 	bne.w	413a92 <_strtod_r+0xd32>
  413b96:	9a02      	ldr	r2, [sp, #8]
  413b98:	2a00      	cmp	r2, #0
  413b9a:	f47f af7a 	bne.w	413a92 <_strtod_r+0xd32>
  413b9e:	e7d1      	b.n	413b44 <_strtod_r+0xde4>
  413ba0:	9902      	ldr	r1, [sp, #8]
  413ba2:	ea1c 0f01 	tst.w	ip, r1
  413ba6:	d08b      	beq.n	413ac0 <_strtod_r+0xd60>
  413ba8:	e77a      	b.n	413aa0 <_strtod_r+0xd40>
  413baa:	3101      	adds	r1, #1
  413bac:	9119      	str	r1, [sp, #100]	; 0x64
  413bae:	e57d      	b.n	4136ac <_strtod_r+0x94c>
  413bb0:	2700      	movs	r7, #0
  413bb2:	e4e8      	b.n	413586 <_strtod_r+0x826>
  413bb4:	f7ff f8b4 	bl	412d20 <sulp>
  413bb8:	4602      	mov	r2, r0
  413bba:	460b      	mov	r3, r1
  413bbc:	4640      	mov	r0, r8
  413bbe:	4649      	mov	r1, r9
  413bc0:	f001 f9aa 	bl	414f18 <__aeabi_dsub>
  413bc4:	2200      	movs	r2, #0
  413bc6:	2300      	movs	r3, #0
  413bc8:	4680      	mov	r8, r0
  413bca:	4689      	mov	r9, r1
  413bcc:	f001 fdc0 	bl	415750 <__aeabi_dcmpeq>
  413bd0:	2800      	cmp	r0, #0
  413bd2:	f47f aed0 	bne.w	413976 <_strtod_r+0xc16>
  413bd6:	e773      	b.n	413ac0 <_strtod_r+0xd60>
  413bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413bda:	9902      	ldr	r1, [sp, #8]
  413bdc:	b1db      	cbz	r3, 413c16 <_strtod_r+0xeb6>
  413bde:	4b2a      	ldr	r3, [pc, #168]	; (413c88 <_strtod_r+0xf28>)
  413be0:	4013      	ands	r3, r2
  413be2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  413be6:	d816      	bhi.n	413c16 <_strtod_r+0xeb6>
  413be8:	0d1b      	lsrs	r3, r3, #20
  413bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  413bee:	f04f 30ff 	mov.w	r0, #4294967295
  413bf2:	fa00 f303 	lsl.w	r3, r0, r3
  413bf6:	4299      	cmp	r1, r3
  413bf8:	f47f af4b 	bne.w	413a92 <_strtod_r+0xd32>
  413bfc:	4b25      	ldr	r3, [pc, #148]	; (413c94 <_strtod_r+0xf34>)
  413bfe:	429a      	cmp	r2, r3
  413c00:	d038      	beq.n	413c74 <_strtod_r+0xf14>
  413c02:	4b21      	ldr	r3, [pc, #132]	; (413c88 <_strtod_r+0xf28>)
  413c04:	4013      	ands	r3, r2
  413c06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  413c0a:	2000      	movs	r0, #0
  413c0c:	9303      	str	r3, [sp, #12]
  413c0e:	9002      	str	r0, [sp, #8]
  413c10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413c14:	e754      	b.n	413ac0 <_strtod_r+0xd60>
  413c16:	f04f 33ff 	mov.w	r3, #4294967295
  413c1a:	e7ec      	b.n	413bf6 <_strtod_r+0xe96>
  413c1c:	a819      	add	r0, sp, #100	; 0x64
  413c1e:	491e      	ldr	r1, [pc, #120]	; (413c98 <_strtod_r+0xf38>)
  413c20:	aa1c      	add	r2, sp, #112	; 0x70
  413c22:	f001 f899 	bl	414d58 <__hexnan>
  413c26:	2805      	cmp	r0, #5
  413c28:	f47f ad16 	bne.w	413658 <_strtod_r+0x8f8>
  413c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  413c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
  413c30:	9102      	str	r1, [sp, #8]
  413c32:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  413c36:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  413c3a:	9003      	str	r0, [sp, #12]
  413c3c:	f7ff ba25 	b.w	41308a <_strtod_r+0x32a>
  413c40:	4b11      	ldr	r3, [pc, #68]	; (413c88 <_strtod_r+0xf28>)
  413c42:	4023      	ands	r3, r4
  413c44:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  413c48:	d881      	bhi.n	413b4e <_strtod_r+0xdee>
  413c4a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  413c4e:	f63f af39 	bhi.w	413ac4 <_strtod_r+0xd64>
  413c52:	e690      	b.n	413976 <_strtod_r+0xc16>
  413c54:	9802      	ldr	r0, [sp, #8]
  413c56:	f04f 32ff 	mov.w	r2, #4294967295
  413c5a:	fa02 f303 	lsl.w	r3, r2, r3
  413c5e:	4003      	ands	r3, r0
  413c60:	9302      	str	r3, [sp, #8]
  413c62:	e642      	b.n	4138ea <_strtod_r+0xb8a>
  413c64:	3b20      	subs	r3, #32
  413c66:	f04f 31ff 	mov.w	r1, #4294967295
  413c6a:	fa01 f303 	lsl.w	r3, r1, r3
  413c6e:	4003      	ands	r3, r0
  413c70:	9303      	str	r3, [sp, #12]
  413c72:	e63a      	b.n	4138ea <_strtod_r+0xb8a>
  413c74:	3101      	adds	r1, #1
  413c76:	d1c4      	bne.n	413c02 <_strtod_r+0xea2>
  413c78:	e590      	b.n	41379c <_strtod_r+0xa3c>
  413c7a:	bf00      	nop
  413c7c:	00415fe0 	.word	0x00415fe0
  413c80:	000fffff 	.word	0x000fffff
  413c84:	39500000 	.word	0x39500000
  413c88:	7ff00000 	.word	0x7ff00000
  413c8c:	bfe00000 	.word	0xbfe00000
  413c90:	3fe00000 	.word	0x3fe00000
  413c94:	7fefffff 	.word	0x7fefffff
  413c98:	00416100 	.word	0x00416100
  413c9c:	f3af 8000 	nop.w

00413ca0 <_strtol_r>:
  413ca0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  413ca4:	4c42      	ldr	r4, [pc, #264]	; (413db0 <_strtol_r+0x110>)
  413ca6:	b082      	sub	sp, #8
  413ca8:	f8d4 c000 	ldr.w	ip, [r4]
  413cac:	9001      	str	r0, [sp, #4]
  413cae:	460e      	mov	r6, r1
  413cb0:	e000      	b.n	413cb4 <_strtol_r+0x14>
  413cb2:	4626      	mov	r6, r4
  413cb4:	4634      	mov	r4, r6
  413cb6:	f814 5b01 	ldrb.w	r5, [r4], #1
  413cba:	eb0c 0005 	add.w	r0, ip, r5
  413cbe:	7840      	ldrb	r0, [r0, #1]
  413cc0:	f000 0008 	and.w	r0, r0, #8
  413cc4:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  413cc8:	2800      	cmp	r0, #0
  413cca:	d1f2      	bne.n	413cb2 <_strtol_r+0x12>
  413ccc:	2d2d      	cmp	r5, #45	; 0x2d
  413cce:	d05b      	beq.n	413d88 <_strtol_r+0xe8>
  413cd0:	2d2b      	cmp	r5, #43	; 0x2b
  413cd2:	bf04      	itt	eq
  413cd4:	7875      	ldrbeq	r5, [r6, #1]
  413cd6:	1cb4      	addeq	r4, r6, #2
  413cd8:	f033 0010 	bics.w	r0, r3, #16
  413cdc:	d03c      	beq.n	413d58 <_strtol_r+0xb8>
  413cde:	4699      	mov	r9, r3
  413ce0:	f1ba 0f00 	cmp.w	sl, #0
  413ce4:	bf0c      	ite	eq
  413ce6:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  413cea:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  413cee:	fbbb f8f9 	udiv	r8, fp, r9
  413cf2:	2700      	movs	r7, #0
  413cf4:	fb09 bb18 	mls	fp, r9, r8, fp
  413cf8:	4638      	mov	r0, r7
  413cfa:	e00c      	b.n	413d16 <_strtol_r+0x76>
  413cfc:	3d30      	subs	r5, #48	; 0x30
  413cfe:	42ab      	cmp	r3, r5
  413d00:	dd19      	ble.n	413d36 <_strtol_r+0x96>
  413d02:	1c7e      	adds	r6, r7, #1
  413d04:	d005      	beq.n	413d12 <_strtol_r+0x72>
  413d06:	4540      	cmp	r0, r8
  413d08:	d823      	bhi.n	413d52 <_strtol_r+0xb2>
  413d0a:	d020      	beq.n	413d4e <_strtol_r+0xae>
  413d0c:	fb09 5000 	mla	r0, r9, r0, r5
  413d10:	2701      	movs	r7, #1
  413d12:	f814 5b01 	ldrb.w	r5, [r4], #1
  413d16:	eb0c 0605 	add.w	r6, ip, r5
  413d1a:	7876      	ldrb	r6, [r6, #1]
  413d1c:	f016 0f04 	tst.w	r6, #4
  413d20:	d1ec      	bne.n	413cfc <_strtol_r+0x5c>
  413d22:	f016 0603 	ands.w	r6, r6, #3
  413d26:	d006      	beq.n	413d36 <_strtol_r+0x96>
  413d28:	2e01      	cmp	r6, #1
  413d2a:	bf14      	ite	ne
  413d2c:	2657      	movne	r6, #87	; 0x57
  413d2e:	2637      	moveq	r6, #55	; 0x37
  413d30:	1bad      	subs	r5, r5, r6
  413d32:	42ab      	cmp	r3, r5
  413d34:	dce5      	bgt.n	413d02 <_strtol_r+0x62>
  413d36:	1c7b      	adds	r3, r7, #1
  413d38:	d015      	beq.n	413d66 <_strtol_r+0xc6>
  413d3a:	f1ba 0f00 	cmp.w	sl, #0
  413d3e:	d121      	bne.n	413d84 <_strtol_r+0xe4>
  413d40:	b10a      	cbz	r2, 413d46 <_strtol_r+0xa6>
  413d42:	b9ef      	cbnz	r7, 413d80 <_strtol_r+0xe0>
  413d44:	6011      	str	r1, [r2, #0]
  413d46:	b002      	add	sp, #8
  413d48:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  413d4c:	4770      	bx	lr
  413d4e:	455d      	cmp	r5, fp
  413d50:	dddc      	ble.n	413d0c <_strtol_r+0x6c>
  413d52:	f04f 37ff 	mov.w	r7, #4294967295
  413d56:	e7dc      	b.n	413d12 <_strtol_r+0x72>
  413d58:	2d30      	cmp	r5, #48	; 0x30
  413d5a:	d01a      	beq.n	413d92 <_strtol_r+0xf2>
  413d5c:	2b00      	cmp	r3, #0
  413d5e:	d1be      	bne.n	413cde <_strtol_r+0x3e>
  413d60:	230a      	movs	r3, #10
  413d62:	4699      	mov	r9, r3
  413d64:	e7bc      	b.n	413ce0 <_strtol_r+0x40>
  413d66:	9901      	ldr	r1, [sp, #4]
  413d68:	f1ba 0f00 	cmp.w	sl, #0
  413d6c:	f04f 0322 	mov.w	r3, #34	; 0x22
  413d70:	bf0c      	ite	eq
  413d72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  413d76:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  413d7a:	600b      	str	r3, [r1, #0]
  413d7c:	2a00      	cmp	r2, #0
  413d7e:	d0e2      	beq.n	413d46 <_strtol_r+0xa6>
  413d80:	1e61      	subs	r1, r4, #1
  413d82:	e7df      	b.n	413d44 <_strtol_r+0xa4>
  413d84:	4240      	negs	r0, r0
  413d86:	e7db      	b.n	413d40 <_strtol_r+0xa0>
  413d88:	1cb4      	adds	r4, r6, #2
  413d8a:	7875      	ldrb	r5, [r6, #1]
  413d8c:	f04f 0a01 	mov.w	sl, #1
  413d90:	e7a2      	b.n	413cd8 <_strtol_r+0x38>
  413d92:	7820      	ldrb	r0, [r4, #0]
  413d94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  413d98:	2858      	cmp	r0, #88	; 0x58
  413d9a:	d003      	beq.n	413da4 <_strtol_r+0x104>
  413d9c:	2b00      	cmp	r3, #0
  413d9e:	d19e      	bne.n	413cde <_strtol_r+0x3e>
  413da0:	2308      	movs	r3, #8
  413da2:	e79c      	b.n	413cde <_strtol_r+0x3e>
  413da4:	2310      	movs	r3, #16
  413da6:	7865      	ldrb	r5, [r4, #1]
  413da8:	4699      	mov	r9, r3
  413daa:	3402      	adds	r4, #2
  413dac:	e798      	b.n	413ce0 <_strtol_r+0x40>
  413dae:	bf00      	nop
  413db0:	2000079c 	.word	0x2000079c

00413db4 <_strtoll_r>:
  413db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413db8:	4c64      	ldr	r4, [pc, #400]	; (413f4c <_strtoll_r+0x198>)
  413dba:	b087      	sub	sp, #28
  413dbc:	4694      	mov	ip, r2
  413dbe:	9104      	str	r1, [sp, #16]
  413dc0:	f8d4 8000 	ldr.w	r8, [r4]
  413dc4:	9005      	str	r0, [sp, #20]
  413dc6:	4699      	mov	r9, r3
  413dc8:	460a      	mov	r2, r1
  413dca:	e000      	b.n	413dce <_strtoll_r+0x1a>
  413dcc:	4632      	mov	r2, r6
  413dce:	4616      	mov	r6, r2
  413dd0:	f816 7b01 	ldrb.w	r7, [r6], #1
  413dd4:	eb08 0307 	add.w	r3, r8, r7
  413dd8:	785b      	ldrb	r3, [r3, #1]
  413dda:	f003 0308 	and.w	r3, r3, #8
  413dde:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  413de2:	2b00      	cmp	r3, #0
  413de4:	d1f2      	bne.n	413dcc <_strtoll_r+0x18>
  413de6:	2f2d      	cmp	r7, #45	; 0x2d
  413de8:	f000 808d 	beq.w	413f06 <_strtoll_r+0x152>
  413dec:	2f2b      	cmp	r7, #43	; 0x2b
  413dee:	bf08      	it	eq
  413df0:	7857      	ldrbeq	r7, [r2, #1]
  413df2:	9102      	str	r1, [sp, #8]
  413df4:	bf08      	it	eq
  413df6:	1c96      	addeq	r6, r2, #2
  413df8:	f039 0110 	bics.w	r1, r9, #16
  413dfc:	d05e      	beq.n	413ebc <_strtoll_r+0x108>
  413dfe:	46ca      	mov	sl, r9
  413e00:	ea4f 7be9 	mov.w	fp, r9, asr #31
  413e04:	9c02      	ldr	r4, [sp, #8]
  413e06:	2c00      	cmp	r4, #0
  413e08:	d066      	beq.n	413ed8 <_strtoll_r+0x124>
  413e0a:	2400      	movs	r4, #0
  413e0c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  413e10:	4620      	mov	r0, r4
  413e12:	4629      	mov	r1, r5
  413e14:	4652      	mov	r2, sl
  413e16:	465b      	mov	r3, fp
  413e18:	f8cd c004 	str.w	ip, [sp, #4]
  413e1c:	f7f8 f95a 	bl	40c0d4 <__aeabi_uldivmod>
  413e20:	4620      	mov	r0, r4
  413e22:	9203      	str	r2, [sp, #12]
  413e24:	465b      	mov	r3, fp
  413e26:	4652      	mov	r2, sl
  413e28:	4629      	mov	r1, r5
  413e2a:	f7f8 f953 	bl	40c0d4 <__aeabi_uldivmod>
  413e2e:	2400      	movs	r4, #0
  413e30:	2200      	movs	r2, #0
  413e32:	2300      	movs	r3, #0
  413e34:	f8dd c004 	ldr.w	ip, [sp, #4]
  413e38:	e019      	b.n	413e6e <_strtoll_r+0xba>
  413e3a:	3f30      	subs	r7, #48	; 0x30
  413e3c:	45b9      	cmp	r9, r7
  413e3e:	dd26      	ble.n	413e8e <_strtoll_r+0xda>
  413e40:	1c65      	adds	r5, r4, #1
  413e42:	d012      	beq.n	413e6a <_strtoll_r+0xb6>
  413e44:	4299      	cmp	r1, r3
  413e46:	bf08      	it	eq
  413e48:	4290      	cmpeq	r0, r2
  413e4a:	d334      	bcc.n	413eb6 <_strtoll_r+0x102>
  413e4c:	428b      	cmp	r3, r1
  413e4e:	bf08      	it	eq
  413e50:	4282      	cmpeq	r2, r0
  413e52:	d02d      	beq.n	413eb0 <_strtoll_r+0xfc>
  413e54:	fb02 f40b 	mul.w	r4, r2, fp
  413e58:	fb0a 4403 	mla	r4, sl, r3, r4
  413e5c:	fba2 230a 	umull	r2, r3, r2, sl
  413e60:	4423      	add	r3, r4
  413e62:	19d2      	adds	r2, r2, r7
  413e64:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  413e68:	2401      	movs	r4, #1
  413e6a:	f816 7b01 	ldrb.w	r7, [r6], #1
  413e6e:	eb08 0507 	add.w	r5, r8, r7
  413e72:	786d      	ldrb	r5, [r5, #1]
  413e74:	f015 0f04 	tst.w	r5, #4
  413e78:	d1df      	bne.n	413e3a <_strtoll_r+0x86>
  413e7a:	f015 0503 	ands.w	r5, r5, #3
  413e7e:	d006      	beq.n	413e8e <_strtoll_r+0xda>
  413e80:	2d01      	cmp	r5, #1
  413e82:	bf14      	ite	ne
  413e84:	2557      	movne	r5, #87	; 0x57
  413e86:	2537      	moveq	r5, #55	; 0x37
  413e88:	1b7f      	subs	r7, r7, r5
  413e8a:	45b9      	cmp	r9, r7
  413e8c:	dcd8      	bgt.n	413e40 <_strtoll_r+0x8c>
  413e8e:	1c61      	adds	r1, r4, #1
  413e90:	d027      	beq.n	413ee2 <_strtoll_r+0x12e>
  413e92:	9902      	ldr	r1, [sp, #8]
  413e94:	2900      	cmp	r1, #0
  413e96:	d132      	bne.n	413efe <_strtoll_r+0x14a>
  413e98:	4610      	mov	r0, r2
  413e9a:	4619      	mov	r1, r3
  413e9c:	f1bc 0f00 	cmp.w	ip, #0
  413ea0:	d003      	beq.n	413eaa <_strtoll_r+0xf6>
  413ea2:	bb54      	cbnz	r4, 413efa <_strtoll_r+0x146>
  413ea4:	9e04      	ldr	r6, [sp, #16]
  413ea6:	f8cc 6000 	str.w	r6, [ip]
  413eaa:	b007      	add	sp, #28
  413eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413eb0:	9c03      	ldr	r4, [sp, #12]
  413eb2:	42a7      	cmp	r7, r4
  413eb4:	ddce      	ble.n	413e54 <_strtoll_r+0xa0>
  413eb6:	f04f 34ff 	mov.w	r4, #4294967295
  413eba:	e7d6      	b.n	413e6a <_strtoll_r+0xb6>
  413ebc:	2f30      	cmp	r7, #48	; 0x30
  413ebe:	d027      	beq.n	413f10 <_strtoll_r+0x15c>
  413ec0:	f1b9 0f00 	cmp.w	r9, #0
  413ec4:	d19b      	bne.n	413dfe <_strtoll_r+0x4a>
  413ec6:	9c02      	ldr	r4, [sp, #8]
  413ec8:	f04f 0a0a 	mov.w	sl, #10
  413ecc:	f04f 0b00 	mov.w	fp, #0
  413ed0:	f04f 090a 	mov.w	r9, #10
  413ed4:	2c00      	cmp	r4, #0
  413ed6:	d198      	bne.n	413e0a <_strtoll_r+0x56>
  413ed8:	f04f 34ff 	mov.w	r4, #4294967295
  413edc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  413ee0:	e796      	b.n	413e10 <_strtoll_r+0x5c>
  413ee2:	9c02      	ldr	r4, [sp, #8]
  413ee4:	bb24      	cbnz	r4, 413f30 <_strtoll_r+0x17c>
  413ee6:	f04f 30ff 	mov.w	r0, #4294967295
  413eea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  413eee:	9c05      	ldr	r4, [sp, #20]
  413ef0:	2322      	movs	r3, #34	; 0x22
  413ef2:	6023      	str	r3, [r4, #0]
  413ef4:	f1bc 0f00 	cmp.w	ip, #0
  413ef8:	d0d7      	beq.n	413eaa <_strtoll_r+0xf6>
  413efa:	3e01      	subs	r6, #1
  413efc:	e7d3      	b.n	413ea6 <_strtoll_r+0xf2>
  413efe:	4252      	negs	r2, r2
  413f00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  413f04:	e7c8      	b.n	413e98 <_strtoll_r+0xe4>
  413f06:	2401      	movs	r4, #1
  413f08:	1c96      	adds	r6, r2, #2
  413f0a:	7857      	ldrb	r7, [r2, #1]
  413f0c:	9402      	str	r4, [sp, #8]
  413f0e:	e773      	b.n	413df8 <_strtoll_r+0x44>
  413f10:	7833      	ldrb	r3, [r6, #0]
  413f12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  413f16:	2b58      	cmp	r3, #88	; 0x58
  413f18:	d00e      	beq.n	413f38 <_strtoll_r+0x184>
  413f1a:	f1b9 0f00 	cmp.w	r9, #0
  413f1e:	f47f af6e 	bne.w	413dfe <_strtoll_r+0x4a>
  413f22:	f04f 0a08 	mov.w	sl, #8
  413f26:	f04f 0b00 	mov.w	fp, #0
  413f2a:	f04f 0908 	mov.w	r9, #8
  413f2e:	e769      	b.n	413e04 <_strtoll_r+0x50>
  413f30:	2000      	movs	r0, #0
  413f32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  413f36:	e7da      	b.n	413eee <_strtoll_r+0x13a>
  413f38:	7877      	ldrb	r7, [r6, #1]
  413f3a:	f04f 0a10 	mov.w	sl, #16
  413f3e:	f04f 0b00 	mov.w	fp, #0
  413f42:	3602      	adds	r6, #2
  413f44:	f04f 0910 	mov.w	r9, #16
  413f48:	e75c      	b.n	413e04 <_strtoll_r+0x50>
  413f4a:	bf00      	nop
  413f4c:	2000079c 	.word	0x2000079c

00413f50 <_strtoul_r>:
  413f50:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  413f54:	4c44      	ldr	r4, [pc, #272]	; (414068 <_strtoul_r+0x118>)
  413f56:	b082      	sub	sp, #8
  413f58:	f8d4 c000 	ldr.w	ip, [r4]
  413f5c:	9001      	str	r0, [sp, #4]
  413f5e:	460e      	mov	r6, r1
  413f60:	e000      	b.n	413f64 <_strtoul_r+0x14>
  413f62:	4626      	mov	r6, r4
  413f64:	4634      	mov	r4, r6
  413f66:	f814 5b01 	ldrb.w	r5, [r4], #1
  413f6a:	eb0c 0005 	add.w	r0, ip, r5
  413f6e:	7840      	ldrb	r0, [r0, #1]
  413f70:	f000 0008 	and.w	r0, r0, #8
  413f74:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  413f78:	2800      	cmp	r0, #0
  413f7a:	d1f2      	bne.n	413f62 <_strtoul_r+0x12>
  413f7c:	2d2d      	cmp	r5, #45	; 0x2d
  413f7e:	d057      	beq.n	414030 <_strtoul_r+0xe0>
  413f80:	2d2b      	cmp	r5, #43	; 0x2b
  413f82:	bf08      	it	eq
  413f84:	7875      	ldrbeq	r5, [r6, #1]
  413f86:	46ba      	mov	sl, r7
  413f88:	bf08      	it	eq
  413f8a:	1cb4      	addeq	r4, r6, #2
  413f8c:	f033 0010 	bics.w	r0, r3, #16
  413f90:	d039      	beq.n	414006 <_strtoul_r+0xb6>
  413f92:	f04f 38ff 	mov.w	r8, #4294967295
  413f96:	fbb8 f8f3 	udiv	r8, r8, r3
  413f9a:	fb03 fb08 	mul.w	fp, r3, r8
  413f9e:	ea6f 0b0b 	mvn.w	fp, fp
  413fa2:	4699      	mov	r9, r3
  413fa4:	2700      	movs	r7, #0
  413fa6:	4638      	mov	r0, r7
  413fa8:	e00c      	b.n	413fc4 <_strtoul_r+0x74>
  413faa:	3d30      	subs	r5, #48	; 0x30
  413fac:	42ab      	cmp	r3, r5
  413fae:	dd19      	ble.n	413fe4 <_strtoul_r+0x94>
  413fb0:	2f00      	cmp	r7, #0
  413fb2:	db25      	blt.n	414000 <_strtoul_r+0xb0>
  413fb4:	4540      	cmp	r0, r8
  413fb6:	d823      	bhi.n	414000 <_strtoul_r+0xb0>
  413fb8:	d020      	beq.n	413ffc <_strtoul_r+0xac>
  413fba:	fb09 5000 	mla	r0, r9, r0, r5
  413fbe:	2701      	movs	r7, #1
  413fc0:	f814 5b01 	ldrb.w	r5, [r4], #1
  413fc4:	eb0c 0605 	add.w	r6, ip, r5
  413fc8:	7876      	ldrb	r6, [r6, #1]
  413fca:	f016 0f04 	tst.w	r6, #4
  413fce:	d1ec      	bne.n	413faa <_strtoul_r+0x5a>
  413fd0:	f016 0603 	ands.w	r6, r6, #3
  413fd4:	d006      	beq.n	413fe4 <_strtoul_r+0x94>
  413fd6:	2e01      	cmp	r6, #1
  413fd8:	bf14      	ite	ne
  413fda:	2657      	movne	r6, #87	; 0x57
  413fdc:	2637      	moveq	r6, #55	; 0x37
  413fde:	1bad      	subs	r5, r5, r6
  413fe0:	42ab      	cmp	r3, r5
  413fe2:	dce5      	bgt.n	413fb0 <_strtoul_r+0x60>
  413fe4:	2f00      	cmp	r7, #0
  413fe6:	db1d      	blt.n	414024 <_strtoul_r+0xd4>
  413fe8:	f1ba 0f00 	cmp.w	sl, #0
  413fec:	d118      	bne.n	414020 <_strtoul_r+0xd0>
  413fee:	b10a      	cbz	r2, 413ff4 <_strtoul_r+0xa4>
  413ff0:	b9a7      	cbnz	r7, 41401c <_strtoul_r+0xcc>
  413ff2:	6011      	str	r1, [r2, #0]
  413ff4:	b002      	add	sp, #8
  413ff6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  413ffa:	4770      	bx	lr
  413ffc:	455d      	cmp	r5, fp
  413ffe:	dddc      	ble.n	413fba <_strtoul_r+0x6a>
  414000:	f04f 37ff 	mov.w	r7, #4294967295
  414004:	e7dc      	b.n	413fc0 <_strtoul_r+0x70>
  414006:	2d30      	cmp	r5, #48	; 0x30
  414008:	d017      	beq.n	41403a <_strtoul_r+0xea>
  41400a:	2b00      	cmp	r3, #0
  41400c:	d1c1      	bne.n	413f92 <_strtoul_r+0x42>
  41400e:	230a      	movs	r3, #10
  414010:	4699      	mov	r9, r3
  414012:	f04f 0b05 	mov.w	fp, #5
  414016:	f8df 8054 	ldr.w	r8, [pc, #84]	; 41406c <_strtoul_r+0x11c>
  41401a:	e7c3      	b.n	413fa4 <_strtoul_r+0x54>
  41401c:	1e61      	subs	r1, r4, #1
  41401e:	e7e8      	b.n	413ff2 <_strtoul_r+0xa2>
  414020:	4240      	negs	r0, r0
  414022:	e7e4      	b.n	413fee <_strtoul_r+0x9e>
  414024:	9801      	ldr	r0, [sp, #4]
  414026:	2322      	movs	r3, #34	; 0x22
  414028:	6003      	str	r3, [r0, #0]
  41402a:	f04f 30ff 	mov.w	r0, #4294967295
  41402e:	e7de      	b.n	413fee <_strtoul_r+0x9e>
  414030:	1cb4      	adds	r4, r6, #2
  414032:	7875      	ldrb	r5, [r6, #1]
  414034:	f04f 0a01 	mov.w	sl, #1
  414038:	e7a8      	b.n	413f8c <_strtoul_r+0x3c>
  41403a:	7820      	ldrb	r0, [r4, #0]
  41403c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  414040:	2858      	cmp	r0, #88	; 0x58
  414042:	d008      	beq.n	414056 <_strtoul_r+0x106>
  414044:	2b00      	cmp	r3, #0
  414046:	d1a4      	bne.n	413f92 <_strtoul_r+0x42>
  414048:	2308      	movs	r3, #8
  41404a:	4699      	mov	r9, r3
  41404c:	f04f 0b07 	mov.w	fp, #7
  414050:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  414054:	e7a6      	b.n	413fa4 <_strtoul_r+0x54>
  414056:	2310      	movs	r3, #16
  414058:	7865      	ldrb	r5, [r4, #1]
  41405a:	4699      	mov	r9, r3
  41405c:	f04f 0b0f 	mov.w	fp, #15
  414060:	3402      	adds	r4, #2
  414062:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  414066:	e79d      	b.n	413fa4 <_strtoul_r+0x54>
  414068:	2000079c 	.word	0x2000079c
  41406c:	19999999 	.word	0x19999999

00414070 <_strtoull_r>:
  414070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414074:	4c60      	ldr	r4, [pc, #384]	; (4141f8 <_strtoull_r+0x188>)
  414076:	b085      	sub	sp, #20
  414078:	f8d4 8000 	ldr.w	r8, [r4]
  41407c:	9200      	str	r2, [sp, #0]
  41407e:	9101      	str	r1, [sp, #4]
  414080:	9003      	str	r0, [sp, #12]
  414082:	4699      	mov	r9, r3
  414084:	460a      	mov	r2, r1
  414086:	e000      	b.n	41408a <_strtoull_r+0x1a>
  414088:	4632      	mov	r2, r6
  41408a:	4616      	mov	r6, r2
  41408c:	f816 7b01 	ldrb.w	r7, [r6], #1
  414090:	eb08 0307 	add.w	r3, r8, r7
  414094:	785b      	ldrb	r3, [r3, #1]
  414096:	f003 0308 	and.w	r3, r3, #8
  41409a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  41409e:	2b00      	cmp	r3, #0
  4140a0:	d1f2      	bne.n	414088 <_strtoull_r+0x18>
  4140a2:	2f2d      	cmp	r7, #45	; 0x2d
  4140a4:	d07d      	beq.n	4141a2 <_strtoull_r+0x132>
  4140a6:	2f2b      	cmp	r7, #43	; 0x2b
  4140a8:	bf08      	it	eq
  4140aa:	7857      	ldrbeq	r7, [r2, #1]
  4140ac:	9102      	str	r1, [sp, #8]
  4140ae:	bf08      	it	eq
  4140b0:	1c96      	addeq	r6, r2, #2
  4140b2:	f039 0210 	bics.w	r2, r9, #16
  4140b6:	d055      	beq.n	414164 <_strtoull_r+0xf4>
  4140b8:	ea4f 7be9 	mov.w	fp, r9, asr #31
  4140bc:	464a      	mov	r2, r9
  4140be:	465b      	mov	r3, fp
  4140c0:	f04f 30ff 	mov.w	r0, #4294967295
  4140c4:	f04f 31ff 	mov.w	r1, #4294967295
  4140c8:	f7f8 f804 	bl	40c0d4 <__aeabi_uldivmod>
  4140cc:	464a      	mov	r2, r9
  4140ce:	4604      	mov	r4, r0
  4140d0:	460d      	mov	r5, r1
  4140d2:	465b      	mov	r3, fp
  4140d4:	f04f 30ff 	mov.w	r0, #4294967295
  4140d8:	f04f 31ff 	mov.w	r1, #4294967295
  4140dc:	f7f7 fffa 	bl	40c0d4 <__aeabi_uldivmod>
  4140e0:	46ca      	mov	sl, r9
  4140e2:	4694      	mov	ip, r2
  4140e4:	2300      	movs	r3, #0
  4140e6:	2000      	movs	r0, #0
  4140e8:	2100      	movs	r1, #0
  4140ea:	e019      	b.n	414120 <_strtoull_r+0xb0>
  4140ec:	3f30      	subs	r7, #48	; 0x30
  4140ee:	45b9      	cmp	r9, r7
  4140f0:	dd26      	ble.n	414140 <_strtoull_r+0xd0>
  4140f2:	2b00      	cmp	r3, #0
  4140f4:	db33      	blt.n	41415e <_strtoull_r+0xee>
  4140f6:	428d      	cmp	r5, r1
  4140f8:	bf08      	it	eq
  4140fa:	4284      	cmpeq	r4, r0
  4140fc:	d32f      	bcc.n	41415e <_strtoull_r+0xee>
  4140fe:	42a9      	cmp	r1, r5
  414100:	bf08      	it	eq
  414102:	42a0      	cmpeq	r0, r4
  414104:	d029      	beq.n	41415a <_strtoull_r+0xea>
  414106:	fb00 f30b 	mul.w	r3, r0, fp
  41410a:	fb0a 3301 	mla	r3, sl, r1, r3
  41410e:	fba0 010a 	umull	r0, r1, r0, sl
  414112:	4419      	add	r1, r3
  414114:	19c0      	adds	r0, r0, r7
  414116:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  41411a:	2301      	movs	r3, #1
  41411c:	f816 7b01 	ldrb.w	r7, [r6], #1
  414120:	eb08 0207 	add.w	r2, r8, r7
  414124:	7852      	ldrb	r2, [r2, #1]
  414126:	f012 0f04 	tst.w	r2, #4
  41412a:	d1df      	bne.n	4140ec <_strtoull_r+0x7c>
  41412c:	f012 0203 	ands.w	r2, r2, #3
  414130:	d006      	beq.n	414140 <_strtoull_r+0xd0>
  414132:	2a01      	cmp	r2, #1
  414134:	bf14      	ite	ne
  414136:	2257      	movne	r2, #87	; 0x57
  414138:	2237      	moveq	r2, #55	; 0x37
  41413a:	1abf      	subs	r7, r7, r2
  41413c:	45b9      	cmp	r9, r7
  41413e:	dcd8      	bgt.n	4140f2 <_strtoull_r+0x82>
  414140:	2b00      	cmp	r3, #0
  414142:	db26      	blt.n	414192 <_strtoull_r+0x122>
  414144:	9a02      	ldr	r2, [sp, #8]
  414146:	bb02      	cbnz	r2, 41418a <_strtoull_r+0x11a>
  414148:	9a00      	ldr	r2, [sp, #0]
  41414a:	b11a      	cbz	r2, 414154 <_strtoull_r+0xe4>
  41414c:	b9db      	cbnz	r3, 414186 <_strtoull_r+0x116>
  41414e:	9e01      	ldr	r6, [sp, #4]
  414150:	9b00      	ldr	r3, [sp, #0]
  414152:	601e      	str	r6, [r3, #0]
  414154:	b005      	add	sp, #20
  414156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41415a:	4567      	cmp	r7, ip
  41415c:	ddd3      	ble.n	414106 <_strtoull_r+0x96>
  41415e:	f04f 33ff 	mov.w	r3, #4294967295
  414162:	e7db      	b.n	41411c <_strtoull_r+0xac>
  414164:	2f30      	cmp	r7, #48	; 0x30
  414166:	d021      	beq.n	4141ac <_strtoull_r+0x13c>
  414168:	f1b9 0f00 	cmp.w	r9, #0
  41416c:	d1a4      	bne.n	4140b8 <_strtoull_r+0x48>
  41416e:	f04f 0c05 	mov.w	ip, #5
  414172:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  414176:	4d21      	ldr	r5, [pc, #132]	; (4141fc <_strtoull_r+0x18c>)
  414178:	f04f 0a0a 	mov.w	sl, #10
  41417c:	f04f 0b00 	mov.w	fp, #0
  414180:	f04f 090a 	mov.w	r9, #10
  414184:	e7ae      	b.n	4140e4 <_strtoull_r+0x74>
  414186:	3e01      	subs	r6, #1
  414188:	e7e2      	b.n	414150 <_strtoull_r+0xe0>
  41418a:	4240      	negs	r0, r0
  41418c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  414190:	e7da      	b.n	414148 <_strtoull_r+0xd8>
  414192:	9903      	ldr	r1, [sp, #12]
  414194:	2222      	movs	r2, #34	; 0x22
  414196:	600a      	str	r2, [r1, #0]
  414198:	f04f 30ff 	mov.w	r0, #4294967295
  41419c:	f04f 31ff 	mov.w	r1, #4294967295
  4141a0:	e7d2      	b.n	414148 <_strtoull_r+0xd8>
  4141a2:	2101      	movs	r1, #1
  4141a4:	1c96      	adds	r6, r2, #2
  4141a6:	7857      	ldrb	r7, [r2, #1]
  4141a8:	9102      	str	r1, [sp, #8]
  4141aa:	e782      	b.n	4140b2 <_strtoull_r+0x42>
  4141ac:	7833      	ldrb	r3, [r6, #0]
  4141ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4141b2:	2b58      	cmp	r3, #88	; 0x58
  4141b4:	d010      	beq.n	4141d8 <_strtoull_r+0x168>
  4141b6:	f1b9 0f00 	cmp.w	r9, #0
  4141ba:	f47f af7d 	bne.w	4140b8 <_strtoull_r+0x48>
  4141be:	f04f 0c07 	mov.w	ip, #7
  4141c2:	f04f 34ff 	mov.w	r4, #4294967295
  4141c6:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  4141ca:	f04f 0a08 	mov.w	sl, #8
  4141ce:	f04f 0b00 	mov.w	fp, #0
  4141d2:	f04f 0908 	mov.w	r9, #8
  4141d6:	e785      	b.n	4140e4 <_strtoull_r+0x74>
  4141d8:	7877      	ldrb	r7, [r6, #1]
  4141da:	f04f 0c0f 	mov.w	ip, #15
  4141de:	3602      	adds	r6, #2
  4141e0:	f04f 34ff 	mov.w	r4, #4294967295
  4141e4:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  4141e8:	f04f 0a10 	mov.w	sl, #16
  4141ec:	f04f 0b00 	mov.w	fp, #0
  4141f0:	f04f 0910 	mov.w	r9, #16
  4141f4:	e776      	b.n	4140e4 <_strtoull_r+0x74>
  4141f6:	bf00      	nop
  4141f8:	2000079c 	.word	0x2000079c
  4141fc:	19999999 	.word	0x19999999

00414200 <__ssprint_r>:
  414200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414204:	6894      	ldr	r4, [r2, #8]
  414206:	6816      	ldr	r6, [r2, #0]
  414208:	b083      	sub	sp, #12
  41420a:	4692      	mov	sl, r2
  41420c:	4680      	mov	r8, r0
  41420e:	460d      	mov	r5, r1
  414210:	2c00      	cmp	r4, #0
  414212:	d06f      	beq.n	4142f4 <__ssprint_r+0xf4>
  414214:	f04f 0b00 	mov.w	fp, #0
  414218:	6808      	ldr	r0, [r1, #0]
  41421a:	688b      	ldr	r3, [r1, #8]
  41421c:	465c      	mov	r4, fp
  41421e:	2c00      	cmp	r4, #0
  414220:	d043      	beq.n	4142aa <__ssprint_r+0xaa>
  414222:	429c      	cmp	r4, r3
  414224:	461f      	mov	r7, r3
  414226:	d345      	bcc.n	4142b4 <__ssprint_r+0xb4>
  414228:	89ab      	ldrh	r3, [r5, #12]
  41422a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41422e:	d044      	beq.n	4142ba <__ssprint_r+0xba>
  414230:	696f      	ldr	r7, [r5, #20]
  414232:	6929      	ldr	r1, [r5, #16]
  414234:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  414238:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  41423c:	ebc1 0900 	rsb	r9, r1, r0
  414240:	1c62      	adds	r2, r4, #1
  414242:	107f      	asrs	r7, r7, #1
  414244:	444a      	add	r2, r9
  414246:	4297      	cmp	r7, r2
  414248:	bf34      	ite	cc
  41424a:	4617      	movcc	r7, r2
  41424c:	463a      	movcs	r2, r7
  41424e:	055b      	lsls	r3, r3, #21
  414250:	d535      	bpl.n	4142be <__ssprint_r+0xbe>
  414252:	4611      	mov	r1, r2
  414254:	4640      	mov	r0, r8
  414256:	f7fd fb1b 	bl	411890 <_malloc_r>
  41425a:	2800      	cmp	r0, #0
  41425c:	d039      	beq.n	4142d2 <__ssprint_r+0xd2>
  41425e:	6929      	ldr	r1, [r5, #16]
  414260:	9001      	str	r0, [sp, #4]
  414262:	464a      	mov	r2, r9
  414264:	f7f8 fa48 	bl	40c6f8 <memcpy>
  414268:	89aa      	ldrh	r2, [r5, #12]
  41426a:	9b01      	ldr	r3, [sp, #4]
  41426c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  414270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  414274:	81aa      	strh	r2, [r5, #12]
  414276:	ebc9 0207 	rsb	r2, r9, r7
  41427a:	eb03 0009 	add.w	r0, r3, r9
  41427e:	616f      	str	r7, [r5, #20]
  414280:	612b      	str	r3, [r5, #16]
  414282:	6028      	str	r0, [r5, #0]
  414284:	60aa      	str	r2, [r5, #8]
  414286:	4627      	mov	r7, r4
  414288:	46a1      	mov	r9, r4
  41428a:	464a      	mov	r2, r9
  41428c:	4659      	mov	r1, fp
  41428e:	f7fd fe27 	bl	411ee0 <memmove>
  414292:	f8da 2008 	ldr.w	r2, [sl, #8]
  414296:	68ab      	ldr	r3, [r5, #8]
  414298:	6828      	ldr	r0, [r5, #0]
  41429a:	1bdb      	subs	r3, r3, r7
  41429c:	4448      	add	r0, r9
  41429e:	1b14      	subs	r4, r2, r4
  4142a0:	60ab      	str	r3, [r5, #8]
  4142a2:	6028      	str	r0, [r5, #0]
  4142a4:	f8ca 4008 	str.w	r4, [sl, #8]
  4142a8:	b324      	cbz	r4, 4142f4 <__ssprint_r+0xf4>
  4142aa:	f8d6 b000 	ldr.w	fp, [r6]
  4142ae:	6874      	ldr	r4, [r6, #4]
  4142b0:	3608      	adds	r6, #8
  4142b2:	e7b4      	b.n	41421e <__ssprint_r+0x1e>
  4142b4:	4627      	mov	r7, r4
  4142b6:	46a1      	mov	r9, r4
  4142b8:	e7e7      	b.n	41428a <__ssprint_r+0x8a>
  4142ba:	46b9      	mov	r9, r7
  4142bc:	e7e5      	b.n	41428a <__ssprint_r+0x8a>
  4142be:	4640      	mov	r0, r8
  4142c0:	f7fe fad2 	bl	412868 <_realloc_r>
  4142c4:	4603      	mov	r3, r0
  4142c6:	2800      	cmp	r0, #0
  4142c8:	d1d5      	bne.n	414276 <__ssprint_r+0x76>
  4142ca:	4640      	mov	r0, r8
  4142cc:	6929      	ldr	r1, [r5, #16]
  4142ce:	f7fc ffb7 	bl	411240 <_free_r>
  4142d2:	89aa      	ldrh	r2, [r5, #12]
  4142d4:	230c      	movs	r3, #12
  4142d6:	f8c8 3000 	str.w	r3, [r8]
  4142da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4142de:	2300      	movs	r3, #0
  4142e0:	f04f 30ff 	mov.w	r0, #4294967295
  4142e4:	81aa      	strh	r2, [r5, #12]
  4142e6:	f8ca 3008 	str.w	r3, [sl, #8]
  4142ea:	f8ca 3004 	str.w	r3, [sl, #4]
  4142ee:	b003      	add	sp, #12
  4142f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4142f4:	4620      	mov	r0, r4
  4142f6:	f8ca 4004 	str.w	r4, [sl, #4]
  4142fa:	b003      	add	sp, #12
  4142fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414300 <_sungetc_r>:
  414300:	b538      	push	{r3, r4, r5, lr}
  414302:	1c4b      	adds	r3, r1, #1
  414304:	4614      	mov	r4, r2
  414306:	d019      	beq.n	41433c <_sungetc_r+0x3c>
  414308:	8992      	ldrh	r2, [r2, #12]
  41430a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  41430c:	f022 0220 	bic.w	r2, r2, #32
  414310:	b2cd      	uxtb	r5, r1
  414312:	81a2      	strh	r2, [r4, #12]
  414314:	b1ab      	cbz	r3, 414342 <_sungetc_r+0x42>
  414316:	6862      	ldr	r2, [r4, #4]
  414318:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41431a:	429a      	cmp	r2, r3
  41431c:	da09      	bge.n	414332 <_sungetc_r+0x32>
  41431e:	6823      	ldr	r3, [r4, #0]
  414320:	1e5a      	subs	r2, r3, #1
  414322:	6022      	str	r2, [r4, #0]
  414324:	f803 5c01 	strb.w	r5, [r3, #-1]
  414328:	6863      	ldr	r3, [r4, #4]
  41432a:	3301      	adds	r3, #1
  41432c:	4628      	mov	r0, r5
  41432e:	6063      	str	r3, [r4, #4]
  414330:	bd38      	pop	{r3, r4, r5, pc}
  414332:	4621      	mov	r1, r4
  414334:	f000 f882 	bl	41443c <__submore>
  414338:	2800      	cmp	r0, #0
  41433a:	d0f0      	beq.n	41431e <_sungetc_r+0x1e>
  41433c:	f04f 30ff 	mov.w	r0, #4294967295
  414340:	bd38      	pop	{r3, r4, r5, pc}
  414342:	6923      	ldr	r3, [r4, #16]
  414344:	6822      	ldr	r2, [r4, #0]
  414346:	b12b      	cbz	r3, 414354 <_sungetc_r+0x54>
  414348:	4293      	cmp	r3, r2
  41434a:	d203      	bcs.n	414354 <_sungetc_r+0x54>
  41434c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  414350:	42a8      	cmp	r0, r5
  414352:	d00f      	beq.n	414374 <_sungetc_r+0x74>
  414354:	4623      	mov	r3, r4
  414356:	6861      	ldr	r1, [r4, #4]
  414358:	63a2      	str	r2, [r4, #56]	; 0x38
  41435a:	f104 0040 	add.w	r0, r4, #64	; 0x40
  41435e:	2203      	movs	r2, #3
  414360:	6320      	str	r0, [r4, #48]	; 0x30
  414362:	6362      	str	r2, [r4, #52]	; 0x34
  414364:	63e1      	str	r1, [r4, #60]	; 0x3c
  414366:	f803 5f42 	strb.w	r5, [r3, #66]!
  41436a:	2201      	movs	r2, #1
  41436c:	6023      	str	r3, [r4, #0]
  41436e:	4628      	mov	r0, r5
  414370:	6062      	str	r2, [r4, #4]
  414372:	bd38      	pop	{r3, r4, r5, pc}
  414374:	6863      	ldr	r3, [r4, #4]
  414376:	3a01      	subs	r2, #1
  414378:	3301      	adds	r3, #1
  41437a:	e884 000c 	stmia.w	r4, {r2, r3}
  41437e:	bd38      	pop	{r3, r4, r5, pc}

00414380 <__ssrefill_r>:
  414380:	b510      	push	{r4, lr}
  414382:	460c      	mov	r4, r1
  414384:	6b09      	ldr	r1, [r1, #48]	; 0x30
  414386:	b169      	cbz	r1, 4143a4 <__ssrefill_r+0x24>
  414388:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41438c:	4299      	cmp	r1, r3
  41438e:	d001      	beq.n	414394 <__ssrefill_r+0x14>
  414390:	f7fc ff56 	bl	411240 <_free_r>
  414394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  414396:	6063      	str	r3, [r4, #4]
  414398:	2000      	movs	r0, #0
  41439a:	6320      	str	r0, [r4, #48]	; 0x30
  41439c:	b113      	cbz	r3, 4143a4 <__ssrefill_r+0x24>
  41439e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4143a0:	6023      	str	r3, [r4, #0]
  4143a2:	bd10      	pop	{r4, pc}
  4143a4:	89a2      	ldrh	r2, [r4, #12]
  4143a6:	6923      	ldr	r3, [r4, #16]
  4143a8:	6023      	str	r3, [r4, #0]
  4143aa:	f042 0220 	orr.w	r2, r2, #32
  4143ae:	2300      	movs	r3, #0
  4143b0:	81a2      	strh	r2, [r4, #12]
  4143b2:	6063      	str	r3, [r4, #4]
  4143b4:	f04f 30ff 	mov.w	r0, #4294967295
  4143b8:	bd10      	pop	{r4, pc}
  4143ba:	bf00      	nop

004143bc <_sfread_r>:
  4143bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4143c0:	b083      	sub	sp, #12
  4143c2:	fb02 f903 	mul.w	r9, r2, r3
  4143c6:	9201      	str	r2, [sp, #4]
  4143c8:	469a      	mov	sl, r3
  4143ca:	4607      	mov	r7, r0
  4143cc:	460e      	mov	r6, r1
  4143ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4143d0:	f1b9 0f00 	cmp.w	r9, #0
  4143d4:	d026      	beq.n	414424 <_sfread_r+0x68>
  4143d6:	464d      	mov	r5, r9
  4143d8:	f04f 0800 	mov.w	r8, #0
  4143dc:	e00e      	b.n	4143fc <_sfread_r+0x40>
  4143de:	f7f8 f98b 	bl	40c6f8 <memcpy>
  4143e2:	6822      	ldr	r2, [r4, #0]
  4143e4:	f8c4 8004 	str.w	r8, [r4, #4]
  4143e8:	445a      	add	r2, fp
  4143ea:	6022      	str	r2, [r4, #0]
  4143ec:	4638      	mov	r0, r7
  4143ee:	4621      	mov	r1, r4
  4143f0:	445e      	add	r6, fp
  4143f2:	ebcb 0505 	rsb	r5, fp, r5
  4143f6:	f7ff ffc3 	bl	414380 <__ssrefill_r>
  4143fa:	b9b8      	cbnz	r0, 41442c <_sfread_r+0x70>
  4143fc:	f8d4 b004 	ldr.w	fp, [r4, #4]
  414400:	6821      	ldr	r1, [r4, #0]
  414402:	455d      	cmp	r5, fp
  414404:	4630      	mov	r0, r6
  414406:	465a      	mov	r2, fp
  414408:	d8e9      	bhi.n	4143de <_sfread_r+0x22>
  41440a:	462a      	mov	r2, r5
  41440c:	f7f8 f974 	bl	40c6f8 <memcpy>
  414410:	6862      	ldr	r2, [r4, #4]
  414412:	6823      	ldr	r3, [r4, #0]
  414414:	1b52      	subs	r2, r2, r5
  414416:	442b      	add	r3, r5
  414418:	4650      	mov	r0, sl
  41441a:	6062      	str	r2, [r4, #4]
  41441c:	6023      	str	r3, [r4, #0]
  41441e:	b003      	add	sp, #12
  414420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414424:	4648      	mov	r0, r9
  414426:	b003      	add	sp, #12
  414428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41442c:	9b01      	ldr	r3, [sp, #4]
  41442e:	ebc5 0909 	rsb	r9, r5, r9
  414432:	fbb9 f0f3 	udiv	r0, r9, r3
  414436:	b003      	add	sp, #12
  414438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041443c <__submore>:
  41443c:	f101 0340 	add.w	r3, r1, #64	; 0x40
  414440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414444:	460c      	mov	r4, r1
  414446:	6b09      	ldr	r1, [r1, #48]	; 0x30
  414448:	4299      	cmp	r1, r3
  41444a:	d014      	beq.n	414476 <__submore+0x3a>
  41444c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  41444e:	0077      	lsls	r7, r6, #1
  414450:	463a      	mov	r2, r7
  414452:	f7fe fa09 	bl	412868 <_realloc_r>
  414456:	4605      	mov	r5, r0
  414458:	b340      	cbz	r0, 4144ac <__submore+0x70>
  41445a:	eb00 0806 	add.w	r8, r0, r6
  41445e:	4632      	mov	r2, r6
  414460:	4640      	mov	r0, r8
  414462:	4629      	mov	r1, r5
  414464:	f7f8 f948 	bl	40c6f8 <memcpy>
  414468:	f8c4 8000 	str.w	r8, [r4]
  41446c:	6325      	str	r5, [r4, #48]	; 0x30
  41446e:	6367      	str	r7, [r4, #52]	; 0x34
  414470:	2000      	movs	r0, #0
  414472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414476:	f44f 6180 	mov.w	r1, #1024	; 0x400
  41447a:	f7fd fa09 	bl	411890 <_malloc_r>
  41447e:	b1a8      	cbz	r0, 4144ac <__submore+0x70>
  414480:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  414484:	6320      	str	r0, [r4, #48]	; 0x30
  414486:	f44f 6280 	mov.w	r2, #1024	; 0x400
  41448a:	6362      	str	r2, [r4, #52]	; 0x34
  41448c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  414490:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  414494:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  414498:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  41449c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  4144a0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  4144a4:	6020      	str	r0, [r4, #0]
  4144a6:	2000      	movs	r0, #0
  4144a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4144ac:	f04f 30ff 	mov.w	r0, #4294967295
  4144b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004144b4 <__swbuf_r>:
  4144b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4144b6:	460d      	mov	r5, r1
  4144b8:	4614      	mov	r4, r2
  4144ba:	4607      	mov	r7, r0
  4144bc:	b110      	cbz	r0, 4144c4 <__swbuf_r+0x10>
  4144be:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4144c0:	2b00      	cmp	r3, #0
  4144c2:	d048      	beq.n	414556 <__swbuf_r+0xa2>
  4144c4:	89a2      	ldrh	r2, [r4, #12]
  4144c6:	69a3      	ldr	r3, [r4, #24]
  4144c8:	60a3      	str	r3, [r4, #8]
  4144ca:	b293      	uxth	r3, r2
  4144cc:	0718      	lsls	r0, r3, #28
  4144ce:	d538      	bpl.n	414542 <__swbuf_r+0x8e>
  4144d0:	6926      	ldr	r6, [r4, #16]
  4144d2:	2e00      	cmp	r6, #0
  4144d4:	d035      	beq.n	414542 <__swbuf_r+0x8e>
  4144d6:	0499      	lsls	r1, r3, #18
  4144d8:	b2ed      	uxtb	r5, r5
  4144da:	d515      	bpl.n	414508 <__swbuf_r+0x54>
  4144dc:	6823      	ldr	r3, [r4, #0]
  4144de:	6962      	ldr	r2, [r4, #20]
  4144e0:	1b9e      	subs	r6, r3, r6
  4144e2:	4296      	cmp	r6, r2
  4144e4:	da1c      	bge.n	414520 <__swbuf_r+0x6c>
  4144e6:	3601      	adds	r6, #1
  4144e8:	68a2      	ldr	r2, [r4, #8]
  4144ea:	1c59      	adds	r1, r3, #1
  4144ec:	3a01      	subs	r2, #1
  4144ee:	60a2      	str	r2, [r4, #8]
  4144f0:	6021      	str	r1, [r4, #0]
  4144f2:	701d      	strb	r5, [r3, #0]
  4144f4:	6963      	ldr	r3, [r4, #20]
  4144f6:	42b3      	cmp	r3, r6
  4144f8:	d01a      	beq.n	414530 <__swbuf_r+0x7c>
  4144fa:	89a3      	ldrh	r3, [r4, #12]
  4144fc:	07db      	lsls	r3, r3, #31
  4144fe:	d501      	bpl.n	414504 <__swbuf_r+0x50>
  414500:	2d0a      	cmp	r5, #10
  414502:	d015      	beq.n	414530 <__swbuf_r+0x7c>
  414504:	4628      	mov	r0, r5
  414506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414508:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41450a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  41450e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  414512:	6663      	str	r3, [r4, #100]	; 0x64
  414514:	6823      	ldr	r3, [r4, #0]
  414516:	81a2      	strh	r2, [r4, #12]
  414518:	6962      	ldr	r2, [r4, #20]
  41451a:	1b9e      	subs	r6, r3, r6
  41451c:	4296      	cmp	r6, r2
  41451e:	dbe2      	blt.n	4144e6 <__swbuf_r+0x32>
  414520:	4638      	mov	r0, r7
  414522:	4621      	mov	r1, r4
  414524:	f7fc fd2e 	bl	410f84 <_fflush_r>
  414528:	b940      	cbnz	r0, 41453c <__swbuf_r+0x88>
  41452a:	6823      	ldr	r3, [r4, #0]
  41452c:	2601      	movs	r6, #1
  41452e:	e7db      	b.n	4144e8 <__swbuf_r+0x34>
  414530:	4638      	mov	r0, r7
  414532:	4621      	mov	r1, r4
  414534:	f7fc fd26 	bl	410f84 <_fflush_r>
  414538:	2800      	cmp	r0, #0
  41453a:	d0e3      	beq.n	414504 <__swbuf_r+0x50>
  41453c:	f04f 30ff 	mov.w	r0, #4294967295
  414540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414542:	4638      	mov	r0, r7
  414544:	4621      	mov	r1, r4
  414546:	f7fb fc3b 	bl	40fdc0 <__swsetup_r>
  41454a:	2800      	cmp	r0, #0
  41454c:	d1f6      	bne.n	41453c <__swbuf_r+0x88>
  41454e:	89a2      	ldrh	r2, [r4, #12]
  414550:	6926      	ldr	r6, [r4, #16]
  414552:	b293      	uxth	r3, r2
  414554:	e7bf      	b.n	4144d6 <__swbuf_r+0x22>
  414556:	f7fc fd31 	bl	410fbc <__sinit>
  41455a:	e7b3      	b.n	4144c4 <__swbuf_r+0x10>

0041455c <_wcrtomb_r>:
  41455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414560:	461e      	mov	r6, r3
  414562:	b086      	sub	sp, #24
  414564:	460c      	mov	r4, r1
  414566:	4605      	mov	r5, r0
  414568:	4617      	mov	r7, r2
  41456a:	4b0f      	ldr	r3, [pc, #60]	; (4145a8 <_wcrtomb_r+0x4c>)
  41456c:	b191      	cbz	r1, 414594 <_wcrtomb_r+0x38>
  41456e:	f8d3 8000 	ldr.w	r8, [r3]
  414572:	f7fd f8f3 	bl	41175c <__locale_charset>
  414576:	9600      	str	r6, [sp, #0]
  414578:	4603      	mov	r3, r0
  41457a:	4621      	mov	r1, r4
  41457c:	463a      	mov	r2, r7
  41457e:	4628      	mov	r0, r5
  414580:	47c0      	blx	r8
  414582:	1c43      	adds	r3, r0, #1
  414584:	d103      	bne.n	41458e <_wcrtomb_r+0x32>
  414586:	2200      	movs	r2, #0
  414588:	238a      	movs	r3, #138	; 0x8a
  41458a:	6032      	str	r2, [r6, #0]
  41458c:	602b      	str	r3, [r5, #0]
  41458e:	b006      	add	sp, #24
  414590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414594:	681f      	ldr	r7, [r3, #0]
  414596:	f7fd f8e1 	bl	41175c <__locale_charset>
  41459a:	9600      	str	r6, [sp, #0]
  41459c:	4603      	mov	r3, r0
  41459e:	4622      	mov	r2, r4
  4145a0:	4628      	mov	r0, r5
  4145a2:	a903      	add	r1, sp, #12
  4145a4:	47b8      	blx	r7
  4145a6:	e7ec      	b.n	414582 <_wcrtomb_r+0x26>
  4145a8:	20000c10 	.word	0x20000c10

004145ac <__ascii_wctomb>:
  4145ac:	b121      	cbz	r1, 4145b8 <__ascii_wctomb+0xc>
  4145ae:	2aff      	cmp	r2, #255	; 0xff
  4145b0:	d804      	bhi.n	4145bc <__ascii_wctomb+0x10>
  4145b2:	700a      	strb	r2, [r1, #0]
  4145b4:	2001      	movs	r0, #1
  4145b6:	4770      	bx	lr
  4145b8:	4608      	mov	r0, r1
  4145ba:	4770      	bx	lr
  4145bc:	238a      	movs	r3, #138	; 0x8a
  4145be:	6003      	str	r3, [r0, #0]
  4145c0:	f04f 30ff 	mov.w	r0, #4294967295
  4145c4:	4770      	bx	lr
  4145c6:	bf00      	nop

004145c8 <__register_exitproc>:
  4145c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4145ca:	4c27      	ldr	r4, [pc, #156]	; (414668 <__register_exitproc+0xa0>)
  4145cc:	6826      	ldr	r6, [r4, #0]
  4145ce:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  4145d2:	b085      	sub	sp, #20
  4145d4:	4607      	mov	r7, r0
  4145d6:	2c00      	cmp	r4, #0
  4145d8:	d041      	beq.n	41465e <__register_exitproc+0x96>
  4145da:	6865      	ldr	r5, [r4, #4]
  4145dc:	2d1f      	cmp	r5, #31
  4145de:	dd1e      	ble.n	41461e <__register_exitproc+0x56>
  4145e0:	4822      	ldr	r0, [pc, #136]	; (41466c <__register_exitproc+0xa4>)
  4145e2:	b918      	cbnz	r0, 4145ec <__register_exitproc+0x24>
  4145e4:	f04f 30ff 	mov.w	r0, #4294967295
  4145e8:	b005      	add	sp, #20
  4145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4145ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4145f0:	9103      	str	r1, [sp, #12]
  4145f2:	9202      	str	r2, [sp, #8]
  4145f4:	9301      	str	r3, [sp, #4]
  4145f6:	f7fd f943 	bl	411880 <malloc>
  4145fa:	9903      	ldr	r1, [sp, #12]
  4145fc:	9a02      	ldr	r2, [sp, #8]
  4145fe:	9b01      	ldr	r3, [sp, #4]
  414600:	4604      	mov	r4, r0
  414602:	2800      	cmp	r0, #0
  414604:	d0ee      	beq.n	4145e4 <__register_exitproc+0x1c>
  414606:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  41460a:	6025      	str	r5, [r4, #0]
  41460c:	2000      	movs	r0, #0
  41460e:	6060      	str	r0, [r4, #4]
  414610:	4605      	mov	r5, r0
  414612:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  414616:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  41461a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  41461e:	b93f      	cbnz	r7, 414630 <__register_exitproc+0x68>
  414620:	1cab      	adds	r3, r5, #2
  414622:	2000      	movs	r0, #0
  414624:	3501      	adds	r5, #1
  414626:	6065      	str	r5, [r4, #4]
  414628:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  41462c:	b005      	add	sp, #20
  41462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414630:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  414634:	f04f 0c01 	mov.w	ip, #1
  414638:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  41463c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  414640:	fa0c f205 	lsl.w	r2, ip, r5
  414644:	4316      	orrs	r6, r2
  414646:	2f02      	cmp	r7, #2
  414648:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  41464c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  414650:	d1e6      	bne.n	414620 <__register_exitproc+0x58>
  414652:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  414656:	431a      	orrs	r2, r3
  414658:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  41465c:	e7e0      	b.n	414620 <__register_exitproc+0x58>
  41465e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  414662:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  414666:	e7b8      	b.n	4145da <__register_exitproc+0x12>
  414668:	00415e08 	.word	0x00415e08
  41466c:	00411881 	.word	0x00411881

00414670 <_calloc_r>:
  414670:	b510      	push	{r4, lr}
  414672:	fb02 f101 	mul.w	r1, r2, r1
  414676:	f7fd f90b 	bl	411890 <_malloc_r>
  41467a:	4604      	mov	r4, r0
  41467c:	b168      	cbz	r0, 41469a <_calloc_r+0x2a>
  41467e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  414682:	f022 0203 	bic.w	r2, r2, #3
  414686:	3a04      	subs	r2, #4
  414688:	2a24      	cmp	r2, #36	; 0x24
  41468a:	d818      	bhi.n	4146be <_calloc_r+0x4e>
  41468c:	2a13      	cmp	r2, #19
  41468e:	d806      	bhi.n	41469e <_calloc_r+0x2e>
  414690:	4603      	mov	r3, r0
  414692:	2200      	movs	r2, #0
  414694:	601a      	str	r2, [r3, #0]
  414696:	605a      	str	r2, [r3, #4]
  414698:	609a      	str	r2, [r3, #8]
  41469a:	4620      	mov	r0, r4
  41469c:	bd10      	pop	{r4, pc}
  41469e:	2300      	movs	r3, #0
  4146a0:	2a1b      	cmp	r2, #27
  4146a2:	6003      	str	r3, [r0, #0]
  4146a4:	6043      	str	r3, [r0, #4]
  4146a6:	d90f      	bls.n	4146c8 <_calloc_r+0x58>
  4146a8:	2a24      	cmp	r2, #36	; 0x24
  4146aa:	6083      	str	r3, [r0, #8]
  4146ac:	60c3      	str	r3, [r0, #12]
  4146ae:	bf05      	ittet	eq
  4146b0:	6103      	streq	r3, [r0, #16]
  4146b2:	6143      	streq	r3, [r0, #20]
  4146b4:	f100 0310 	addne.w	r3, r0, #16
  4146b8:	f100 0318 	addeq.w	r3, r0, #24
  4146bc:	e7e9      	b.n	414692 <_calloc_r+0x22>
  4146be:	2100      	movs	r1, #0
  4146c0:	f7f8 f8b4 	bl	40c82c <memset>
  4146c4:	4620      	mov	r0, r4
  4146c6:	bd10      	pop	{r4, pc}
  4146c8:	f100 0308 	add.w	r3, r0, #8
  4146cc:	e7e1      	b.n	414692 <_calloc_r+0x22>
  4146ce:	bf00      	nop

004146d0 <_fclose_r>:
  4146d0:	b570      	push	{r4, r5, r6, lr}
  4146d2:	460c      	mov	r4, r1
  4146d4:	4605      	mov	r5, r0
  4146d6:	b131      	cbz	r1, 4146e6 <_fclose_r+0x16>
  4146d8:	b110      	cbz	r0, 4146e0 <_fclose_r+0x10>
  4146da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4146dc:	2b00      	cmp	r3, #0
  4146de:	d02f      	beq.n	414740 <_fclose_r+0x70>
  4146e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4146e4:	b90b      	cbnz	r3, 4146ea <_fclose_r+0x1a>
  4146e6:	2000      	movs	r0, #0
  4146e8:	bd70      	pop	{r4, r5, r6, pc}
  4146ea:	4628      	mov	r0, r5
  4146ec:	4621      	mov	r1, r4
  4146ee:	f7fc fc49 	bl	410f84 <_fflush_r>
  4146f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4146f4:	4606      	mov	r6, r0
  4146f6:	b133      	cbz	r3, 414706 <_fclose_r+0x36>
  4146f8:	4628      	mov	r0, r5
  4146fa:	69e1      	ldr	r1, [r4, #28]
  4146fc:	4798      	blx	r3
  4146fe:	2800      	cmp	r0, #0
  414700:	bfb8      	it	lt
  414702:	f04f 36ff 	movlt.w	r6, #4294967295
  414706:	89a3      	ldrh	r3, [r4, #12]
  414708:	061b      	lsls	r3, r3, #24
  41470a:	d41c      	bmi.n	414746 <_fclose_r+0x76>
  41470c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41470e:	b141      	cbz	r1, 414722 <_fclose_r+0x52>
  414710:	f104 0340 	add.w	r3, r4, #64	; 0x40
  414714:	4299      	cmp	r1, r3
  414716:	d002      	beq.n	41471e <_fclose_r+0x4e>
  414718:	4628      	mov	r0, r5
  41471a:	f7fc fd91 	bl	411240 <_free_r>
  41471e:	2300      	movs	r3, #0
  414720:	6323      	str	r3, [r4, #48]	; 0x30
  414722:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414724:	b121      	cbz	r1, 414730 <_fclose_r+0x60>
  414726:	4628      	mov	r0, r5
  414728:	f7fc fd8a 	bl	411240 <_free_r>
  41472c:	2300      	movs	r3, #0
  41472e:	6463      	str	r3, [r4, #68]	; 0x44
  414730:	f7fc fcbe 	bl	4110b0 <__sfp_lock_acquire>
  414734:	2300      	movs	r3, #0
  414736:	81a3      	strh	r3, [r4, #12]
  414738:	f7fc fcbc 	bl	4110b4 <__sfp_lock_release>
  41473c:	4630      	mov	r0, r6
  41473e:	bd70      	pop	{r4, r5, r6, pc}
  414740:	f7fc fc3c 	bl	410fbc <__sinit>
  414744:	e7cc      	b.n	4146e0 <_fclose_r+0x10>
  414746:	4628      	mov	r0, r5
  414748:	6921      	ldr	r1, [r4, #16]
  41474a:	f7fc fd79 	bl	411240 <_free_r>
  41474e:	e7dd      	b.n	41470c <_fclose_r+0x3c>

00414750 <fclose>:
  414750:	4b02      	ldr	r3, [pc, #8]	; (41475c <fclose+0xc>)
  414752:	4601      	mov	r1, r0
  414754:	6818      	ldr	r0, [r3, #0]
  414756:	f7ff bfbb 	b.w	4146d0 <_fclose_r>
  41475a:	bf00      	nop
  41475c:	20000798 	.word	0x20000798

00414760 <_fstat_r>:
  414760:	b538      	push	{r3, r4, r5, lr}
  414762:	4c08      	ldr	r4, [pc, #32]	; (414784 <_fstat_r+0x24>)
  414764:	2300      	movs	r3, #0
  414766:	4605      	mov	r5, r0
  414768:	4608      	mov	r0, r1
  41476a:	4611      	mov	r1, r2
  41476c:	6023      	str	r3, [r4, #0]
  41476e:	f7f7 fbc1 	bl	40bef4 <_fstat>
  414772:	1c43      	adds	r3, r0, #1
  414774:	d000      	beq.n	414778 <_fstat_r+0x18>
  414776:	bd38      	pop	{r3, r4, r5, pc}
  414778:	6823      	ldr	r3, [r4, #0]
  41477a:	2b00      	cmp	r3, #0
  41477c:	d0fb      	beq.n	414776 <_fstat_r+0x16>
  41477e:	602b      	str	r3, [r5, #0]
  414780:	bd38      	pop	{r3, r4, r5, pc}
  414782:	bf00      	nop
  414784:	200099c8 	.word	0x200099c8

00414788 <rshift>:
  414788:	6902      	ldr	r2, [r0, #16]
  41478a:	114b      	asrs	r3, r1, #5
  41478c:	4293      	cmp	r3, r2
  41478e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  414792:	f100 0814 	add.w	r8, r0, #20
  414796:	da28      	bge.n	4147ea <rshift+0x62>
  414798:	f011 0c1f 	ands.w	ip, r1, #31
  41479c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  4147a0:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  4147a4:	d028      	beq.n	4147f8 <rshift+0x70>
  4147a6:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  4147aa:	1d3b      	adds	r3, r7, #4
  4147ac:	429a      	cmp	r2, r3
  4147ae:	fa24 f40c 	lsr.w	r4, r4, ip
  4147b2:	f1cc 0120 	rsb	r1, ip, #32
  4147b6:	d935      	bls.n	414824 <rshift+0x9c>
  4147b8:	4645      	mov	r5, r8
  4147ba:	681e      	ldr	r6, [r3, #0]
  4147bc:	408e      	lsls	r6, r1
  4147be:	4334      	orrs	r4, r6
  4147c0:	f845 4b04 	str.w	r4, [r5], #4
  4147c4:	f853 4b04 	ldr.w	r4, [r3], #4
  4147c8:	4293      	cmp	r3, r2
  4147ca:	fa24 f40c 	lsr.w	r4, r4, ip
  4147ce:	d3f4      	bcc.n	4147ba <rshift+0x32>
  4147d0:	1bd3      	subs	r3, r2, r7
  4147d2:	3b05      	subs	r3, #5
  4147d4:	f023 0303 	bic.w	r3, r3, #3
  4147d8:	3304      	adds	r3, #4
  4147da:	4443      	add	r3, r8
  4147dc:	601c      	str	r4, [r3, #0]
  4147de:	b104      	cbz	r4, 4147e2 <rshift+0x5a>
  4147e0:	3304      	adds	r3, #4
  4147e2:	ebc8 0303 	rsb	r3, r8, r3
  4147e6:	109b      	asrs	r3, r3, #2
  4147e8:	e016      	b.n	414818 <rshift+0x90>
  4147ea:	2300      	movs	r3, #0
  4147ec:	6103      	str	r3, [r0, #16]
  4147ee:	2300      	movs	r3, #0
  4147f0:	6143      	str	r3, [r0, #20]
  4147f2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  4147f6:	4770      	bx	lr
  4147f8:	42ba      	cmp	r2, r7
  4147fa:	d9f6      	bls.n	4147ea <rshift+0x62>
  4147fc:	4641      	mov	r1, r8
  4147fe:	463b      	mov	r3, r7
  414800:	f853 4b04 	ldr.w	r4, [r3], #4
  414804:	f841 4b04 	str.w	r4, [r1], #4
  414808:	429a      	cmp	r2, r3
  41480a:	d8f9      	bhi.n	414800 <rshift+0x78>
  41480c:	43fb      	mvns	r3, r7
  41480e:	4413      	add	r3, r2
  414810:	f023 0303 	bic.w	r3, r3, #3
  414814:	3304      	adds	r3, #4
  414816:	109b      	asrs	r3, r3, #2
  414818:	6103      	str	r3, [r0, #16]
  41481a:	2b00      	cmp	r3, #0
  41481c:	d0e7      	beq.n	4147ee <rshift+0x66>
  41481e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  414822:	4770      	bx	lr
  414824:	4643      	mov	r3, r8
  414826:	e7d9      	b.n	4147dc <rshift+0x54>

00414828 <__gethex>:
  414828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41482c:	b08b      	sub	sp, #44	; 0x2c
  41482e:	4688      	mov	r8, r1
  414830:	9206      	str	r2, [sp, #24]
  414832:	9309      	str	r3, [sp, #36]	; 0x24
  414834:	9007      	str	r0, [sp, #28]
  414836:	f7fc ff9b 	bl	411770 <_localeconv_r>
  41483a:	6800      	ldr	r0, [r0, #0]
  41483c:	9002      	str	r0, [sp, #8]
  41483e:	f7f8 f993 	bl	40cb68 <strlen>
  414842:	f8d8 3000 	ldr.w	r3, [r8]
  414846:	9902      	ldr	r1, [sp, #8]
  414848:	789a      	ldrb	r2, [r3, #2]
  41484a:	9003      	str	r0, [sp, #12]
  41484c:	4401      	add	r1, r0
  41484e:	2a30      	cmp	r2, #48	; 0x30
  414850:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  414854:	f103 0502 	add.w	r5, r3, #2
  414858:	f040 81a6 	bne.w	414ba8 <__gethex+0x380>
  41485c:	3303      	adds	r3, #3
  41485e:	2700      	movs	r7, #0
  414860:	461d      	mov	r5, r3
  414862:	f813 2b01 	ldrb.w	r2, [r3], #1
  414866:	2a30      	cmp	r2, #48	; 0x30
  414868:	f107 0701 	add.w	r7, r7, #1
  41486c:	d0f8      	beq.n	414860 <__gethex+0x38>
  41486e:	4eb1      	ldr	r6, [pc, #708]	; (414b34 <__gethex+0x30c>)
  414870:	5cb4      	ldrb	r4, [r6, r2]
  414872:	2c00      	cmp	r4, #0
  414874:	f000 80f4 	beq.w	414a60 <__gethex+0x238>
  414878:	782b      	ldrb	r3, [r5, #0]
  41487a:	f04f 0900 	mov.w	r9, #0
  41487e:	5cf3      	ldrb	r3, [r6, r3]
  414880:	46cb      	mov	fp, r9
  414882:	2b00      	cmp	r3, #0
  414884:	f000 8198 	beq.w	414bb8 <__gethex+0x390>
  414888:	1c6b      	adds	r3, r5, #1
  41488a:	461c      	mov	r4, r3
  41488c:	3301      	adds	r3, #1
  41488e:	7822      	ldrb	r2, [r4, #0]
  414890:	5cb2      	ldrb	r2, [r6, r2]
  414892:	2a00      	cmp	r2, #0
  414894:	d1f9      	bne.n	41488a <__gethex+0x62>
  414896:	4620      	mov	r0, r4
  414898:	9902      	ldr	r1, [sp, #8]
  41489a:	9a03      	ldr	r2, [sp, #12]
  41489c:	f7f8 f994 	bl	40cbc8 <strncmp>
  4148a0:	b1e0      	cbz	r0, 4148dc <__gethex+0xb4>
  4148a2:	7823      	ldrb	r3, [r4, #0]
  4148a4:	f1bb 0f00 	cmp.w	fp, #0
  4148a8:	f000 816c 	beq.w	414b84 <__gethex+0x35c>
  4148ac:	ebc4 0b0b 	rsb	fp, r4, fp
  4148b0:	ea4f 028b 	mov.w	r2, fp, lsl #2
  4148b4:	9204      	str	r2, [sp, #16]
  4148b6:	2b50      	cmp	r3, #80	; 0x50
  4148b8:	f000 809d 	beq.w	4149f6 <__gethex+0x1ce>
  4148bc:	2b70      	cmp	r3, #112	; 0x70
  4148be:	f000 809a 	beq.w	4149f6 <__gethex+0x1ce>
  4148c2:	4623      	mov	r3, r4
  4148c4:	f8c8 3000 	str.w	r3, [r8]
  4148c8:	f1b9 0f00 	cmp.w	r9, #0
  4148cc:	d00c      	beq.n	4148e8 <__gethex+0xc0>
  4148ce:	2f00      	cmp	r7, #0
  4148d0:	bf0c      	ite	eq
  4148d2:	2006      	moveq	r0, #6
  4148d4:	2000      	movne	r0, #0
  4148d6:	b00b      	add	sp, #44	; 0x2c
  4148d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4148dc:	f1bb 0f00 	cmp.w	fp, #0
  4148e0:	f000 818c 	beq.w	414bfc <__gethex+0x3d4>
  4148e4:	7823      	ldrb	r3, [r4, #0]
  4148e6:	e7e1      	b.n	4148ac <__gethex+0x84>
  4148e8:	1b63      	subs	r3, r4, r5
  4148ea:	3b01      	subs	r3, #1
  4148ec:	2b07      	cmp	r3, #7
  4148ee:	4649      	mov	r1, r9
  4148f0:	dd04      	ble.n	4148fc <__gethex+0xd4>
  4148f2:	105b      	asrs	r3, r3, #1
  4148f4:	2b07      	cmp	r3, #7
  4148f6:	f101 0101 	add.w	r1, r1, #1
  4148fa:	dcfa      	bgt.n	4148f2 <__gethex+0xca>
  4148fc:	9807      	ldr	r0, [sp, #28]
  4148fe:	f7fd fb53 	bl	411fa8 <_Balloc>
  414902:	42a5      	cmp	r5, r4
  414904:	f100 0314 	add.w	r3, r0, #20
  414908:	9005      	str	r0, [sp, #20]
  41490a:	9308      	str	r3, [sp, #32]
  41490c:	f080 81cd 	bcs.w	414caa <__gethex+0x482>
  414910:	469b      	mov	fp, r3
  414912:	9b03      	ldr	r3, [sp, #12]
  414914:	f04f 0900 	mov.w	r9, #0
  414918:	464f      	mov	r7, r9
  41491a:	f1c3 0c01 	rsb	ip, r3, #1
  41491e:	e00e      	b.n	41493e <__gethex+0x116>
  414920:	2f20      	cmp	r7, #32
  414922:	d05f      	beq.n	4149e4 <__gethex+0x1bc>
  414924:	463a      	mov	r2, r7
  414926:	3704      	adds	r7, #4
  414928:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  41492c:	5cf3      	ldrb	r3, [r6, r3]
  41492e:	f003 030f 	and.w	r3, r3, #15
  414932:	4093      	lsls	r3, r2
  414934:	4545      	cmp	r5, r8
  414936:	ea49 0903 	orr.w	r9, r9, r3
  41493a:	d21a      	bcs.n	414972 <__gethex+0x14a>
  41493c:	4644      	mov	r4, r8
  41493e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  414942:	4553      	cmp	r3, sl
  414944:	f104 38ff 	add.w	r8, r4, #4294967295
  414948:	d1ea      	bne.n	414920 <__gethex+0xf8>
  41494a:	eb08 030c 	add.w	r3, r8, ip
  41494e:	429d      	cmp	r5, r3
  414950:	d8e6      	bhi.n	414920 <__gethex+0xf8>
  414952:	4618      	mov	r0, r3
  414954:	9902      	ldr	r1, [sp, #8]
  414956:	9a03      	ldr	r2, [sp, #12]
  414958:	9301      	str	r3, [sp, #4]
  41495a:	f8cd c000 	str.w	ip, [sp]
  41495e:	f7f8 f933 	bl	40cbc8 <strncmp>
  414962:	9b01      	ldr	r3, [sp, #4]
  414964:	f8dd c000 	ldr.w	ip, [sp]
  414968:	2800      	cmp	r0, #0
  41496a:	d1d9      	bne.n	414920 <__gethex+0xf8>
  41496c:	4698      	mov	r8, r3
  41496e:	4545      	cmp	r5, r8
  414970:	d3e4      	bcc.n	41493c <__gethex+0x114>
  414972:	f84b 9b04 	str.w	r9, [fp], #4
  414976:	9b08      	ldr	r3, [sp, #32]
  414978:	9905      	ldr	r1, [sp, #20]
  41497a:	ebc3 0b0b 	rsb	fp, r3, fp
  41497e:	ea4f 03ab 	mov.w	r3, fp, asr #2
  414982:	4648      	mov	r0, r9
  414984:	610b      	str	r3, [r1, #16]
  414986:	015d      	lsls	r5, r3, #5
  414988:	f7fd fbd6 	bl	412138 <__hi0bits>
  41498c:	9a06      	ldr	r2, [sp, #24]
  41498e:	6814      	ldr	r4, [r2, #0]
  414990:	1a28      	subs	r0, r5, r0
  414992:	42a0      	cmp	r0, r4
  414994:	f300 80d0 	bgt.w	414b38 <__gethex+0x310>
  414998:	f2c0 80f7 	blt.w	414b8a <__gethex+0x362>
  41499c:	2600      	movs	r6, #0
  41499e:	9806      	ldr	r0, [sp, #24]
  4149a0:	9904      	ldr	r1, [sp, #16]
  4149a2:	6883      	ldr	r3, [r0, #8]
  4149a4:	4299      	cmp	r1, r3
  4149a6:	f300 8092 	bgt.w	414ace <__gethex+0x2a6>
  4149aa:	9806      	ldr	r0, [sp, #24]
  4149ac:	9904      	ldr	r1, [sp, #16]
  4149ae:	6843      	ldr	r3, [r0, #4]
  4149b0:	4299      	cmp	r1, r3
  4149b2:	f280 80a2 	bge.w	414afa <__gethex+0x2d2>
  4149b6:	1a5d      	subs	r5, r3, r1
  4149b8:	42ac      	cmp	r4, r5
  4149ba:	f300 80ff 	bgt.w	414bbc <__gethex+0x394>
  4149be:	68c2      	ldr	r2, [r0, #12]
  4149c0:	2a02      	cmp	r2, #2
  4149c2:	f000 8188 	beq.w	414cd6 <__gethex+0x4ae>
  4149c6:	2a03      	cmp	r2, #3
  4149c8:	f000 8156 	beq.w	414c78 <__gethex+0x450>
  4149cc:	2a01      	cmp	r2, #1
  4149ce:	f000 8173 	beq.w	414cb8 <__gethex+0x490>
  4149d2:	9807      	ldr	r0, [sp, #28]
  4149d4:	9905      	ldr	r1, [sp, #20]
  4149d6:	f7fd fb0d 	bl	411ff4 <_Bfree>
  4149da:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4149dc:	2300      	movs	r3, #0
  4149de:	6013      	str	r3, [r2, #0]
  4149e0:	2050      	movs	r0, #80	; 0x50
  4149e2:	e778      	b.n	4148d6 <__gethex+0xae>
  4149e4:	f8cb 9000 	str.w	r9, [fp]
  4149e8:	f04f 0900 	mov.w	r9, #0
  4149ec:	f10b 0b04 	add.w	fp, fp, #4
  4149f0:	464a      	mov	r2, r9
  4149f2:	2704      	movs	r7, #4
  4149f4:	e798      	b.n	414928 <__gethex+0x100>
  4149f6:	7863      	ldrb	r3, [r4, #1]
  4149f8:	2b2b      	cmp	r3, #43	; 0x2b
  4149fa:	f000 8097 	beq.w	414b2c <__gethex+0x304>
  4149fe:	2b2d      	cmp	r3, #45	; 0x2d
  414a00:	d070      	beq.n	414ae4 <__gethex+0x2bc>
  414a02:	1c60      	adds	r0, r4, #1
  414a04:	f04f 0b00 	mov.w	fp, #0
  414a08:	5cf2      	ldrb	r2, [r6, r3]
  414a0a:	494a      	ldr	r1, [pc, #296]	; (414b34 <__gethex+0x30c>)
  414a0c:	1e53      	subs	r3, r2, #1
  414a0e:	2b18      	cmp	r3, #24
  414a10:	f63f af57 	bhi.w	4148c2 <__gethex+0x9a>
  414a14:	7843      	ldrb	r3, [r0, #1]
  414a16:	5cc9      	ldrb	r1, [r1, r3]
  414a18:	f101 3cff 	add.w	ip, r1, #4294967295
  414a1c:	f1bc 0f18 	cmp.w	ip, #24
  414a20:	f1a2 0210 	sub.w	r2, r2, #16
  414a24:	f100 0301 	add.w	r3, r0, #1
  414a28:	d812      	bhi.n	414a50 <__gethex+0x228>
  414a2a:	3002      	adds	r0, #2
  414a2c:	f890 c000 	ldrb.w	ip, [r0]
  414a30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  414a34:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  414a38:	f816 100c 	ldrb.w	r1, [r6, ip]
  414a3c:	f101 3cff 	add.w	ip, r1, #4294967295
  414a40:	f1bc 0f18 	cmp.w	ip, #24
  414a44:	4603      	mov	r3, r0
  414a46:	f1a2 0210 	sub.w	r2, r2, #16
  414a4a:	f100 0001 	add.w	r0, r0, #1
  414a4e:	d9ed      	bls.n	414a2c <__gethex+0x204>
  414a50:	f1bb 0f00 	cmp.w	fp, #0
  414a54:	d000      	beq.n	414a58 <__gethex+0x230>
  414a56:	4252      	negs	r2, r2
  414a58:	9804      	ldr	r0, [sp, #16]
  414a5a:	4410      	add	r0, r2
  414a5c:	9004      	str	r0, [sp, #16]
  414a5e:	e731      	b.n	4148c4 <__gethex+0x9c>
  414a60:	4628      	mov	r0, r5
  414a62:	9902      	ldr	r1, [sp, #8]
  414a64:	9a03      	ldr	r2, [sp, #12]
  414a66:	f7f8 f8af 	bl	40cbc8 <strncmp>
  414a6a:	2800      	cmp	r0, #0
  414a6c:	d13f      	bne.n	414aee <__gethex+0x2c6>
  414a6e:	9803      	ldr	r0, [sp, #12]
  414a70:	5c2b      	ldrb	r3, [r5, r0]
  414a72:	5cf2      	ldrb	r2, [r6, r3]
  414a74:	4604      	mov	r4, r0
  414a76:	442c      	add	r4, r5
  414a78:	2a00      	cmp	r2, #0
  414a7a:	f000 8097 	beq.w	414bac <__gethex+0x384>
  414a7e:	2b30      	cmp	r3, #48	; 0x30
  414a80:	f040 8142 	bne.w	414d08 <__gethex+0x4e0>
  414a84:	1c62      	adds	r2, r4, #1
  414a86:	4615      	mov	r5, r2
  414a88:	3201      	adds	r2, #1
  414a8a:	782b      	ldrb	r3, [r5, #0]
  414a8c:	2b30      	cmp	r3, #48	; 0x30
  414a8e:	d0fa      	beq.n	414a86 <__gethex+0x25e>
  414a90:	5cf3      	ldrb	r3, [r6, r3]
  414a92:	f1d3 0901 	rsbs	r9, r3, #1
  414a96:	46a3      	mov	fp, r4
  414a98:	bf38      	it	cc
  414a9a:	f04f 0900 	movcc.w	r9, #0
  414a9e:	2701      	movs	r7, #1
  414aa0:	e6ef      	b.n	414882 <__gethex+0x5a>
  414aa2:	4447      	add	r7, r8
  414aa4:	f857 0c04 	ldr.w	r0, [r7, #-4]
  414aa8:	f7fd fb46 	bl	412138 <__hi0bits>
  414aac:	f1c4 0320 	rsb	r3, r4, #32
  414ab0:	4298      	cmp	r0, r3
  414ab2:	f280 80dd 	bge.w	414c70 <__gethex+0x448>
  414ab6:	9805      	ldr	r0, [sp, #20]
  414ab8:	2101      	movs	r1, #1
  414aba:	f7ff fe65 	bl	414788 <rshift>
  414abe:	9806      	ldr	r0, [sp, #24]
  414ac0:	9904      	ldr	r1, [sp, #16]
  414ac2:	6883      	ldr	r3, [r0, #8]
  414ac4:	3101      	adds	r1, #1
  414ac6:	4299      	cmp	r1, r3
  414ac8:	9104      	str	r1, [sp, #16]
  414aca:	f340 80d1 	ble.w	414c70 <__gethex+0x448>
  414ace:	9807      	ldr	r0, [sp, #28]
  414ad0:	9905      	ldr	r1, [sp, #20]
  414ad2:	f7fd fa8f 	bl	411ff4 <_Bfree>
  414ad6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  414ad8:	2300      	movs	r3, #0
  414ada:	20a3      	movs	r0, #163	; 0xa3
  414adc:	6013      	str	r3, [r2, #0]
  414ade:	b00b      	add	sp, #44	; 0x2c
  414ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414ae4:	f04f 0b01 	mov.w	fp, #1
  414ae8:	78a3      	ldrb	r3, [r4, #2]
  414aea:	1ca0      	adds	r0, r4, #2
  414aec:	e78c      	b.n	414a08 <__gethex+0x1e0>
  414aee:	9404      	str	r4, [sp, #16]
  414af0:	782b      	ldrb	r3, [r5, #0]
  414af2:	462c      	mov	r4, r5
  414af4:	f04f 0901 	mov.w	r9, #1
  414af8:	e6dd      	b.n	4148b6 <__gethex+0x8e>
  414afa:	2501      	movs	r5, #1
  414afc:	b166      	cbz	r6, 414b18 <__gethex+0x2f0>
  414afe:	9806      	ldr	r0, [sp, #24]
  414b00:	68c3      	ldr	r3, [r0, #12]
  414b02:	2b02      	cmp	r3, #2
  414b04:	f000 808b 	beq.w	414c1e <__gethex+0x3f6>
  414b08:	2b03      	cmp	r3, #3
  414b0a:	f000 808c 	beq.w	414c26 <__gethex+0x3fe>
  414b0e:	2b01      	cmp	r3, #1
  414b10:	f000 80c2 	beq.w	414c98 <__gethex+0x470>
  414b14:	f045 0510 	orr.w	r5, r5, #16
  414b18:	9814      	ldr	r0, [sp, #80]	; 0x50
  414b1a:	9b05      	ldr	r3, [sp, #20]
  414b1c:	6003      	str	r3, [r0, #0]
  414b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  414b20:	9b04      	ldr	r3, [sp, #16]
  414b22:	600b      	str	r3, [r1, #0]
  414b24:	4628      	mov	r0, r5
  414b26:	b00b      	add	sp, #44	; 0x2c
  414b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414b2c:	f04f 0b00 	mov.w	fp, #0
  414b30:	e7da      	b.n	414ae8 <__gethex+0x2c0>
  414b32:	bf00      	nop
  414b34:	00416140 	.word	0x00416140
  414b38:	1b05      	subs	r5, r0, r4
  414b3a:	4629      	mov	r1, r5
  414b3c:	9805      	ldr	r0, [sp, #20]
  414b3e:	f7fd fe4f 	bl	4127e0 <__any_on>
  414b42:	2800      	cmp	r0, #0
  414b44:	d036      	beq.n	414bb4 <__gethex+0x38c>
  414b46:	1e6b      	subs	r3, r5, #1
  414b48:	115a      	asrs	r2, r3, #5
  414b4a:	9808      	ldr	r0, [sp, #32]
  414b4c:	f003 011f 	and.w	r1, r3, #31
  414b50:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  414b54:	2601      	movs	r6, #1
  414b56:	fa06 f101 	lsl.w	r1, r6, r1
  414b5a:	4211      	tst	r1, r2
  414b5c:	d00a      	beq.n	414b74 <__gethex+0x34c>
  414b5e:	42b3      	cmp	r3, r6
  414b60:	f340 80a8 	ble.w	414cb4 <__gethex+0x48c>
  414b64:	9805      	ldr	r0, [sp, #20]
  414b66:	1ea9      	subs	r1, r5, #2
  414b68:	f7fd fe3a 	bl	4127e0 <__any_on>
  414b6c:	2800      	cmp	r0, #0
  414b6e:	f000 80a1 	beq.w	414cb4 <__gethex+0x48c>
  414b72:	2603      	movs	r6, #3
  414b74:	9b04      	ldr	r3, [sp, #16]
  414b76:	9805      	ldr	r0, [sp, #20]
  414b78:	442b      	add	r3, r5
  414b7a:	4629      	mov	r1, r5
  414b7c:	9304      	str	r3, [sp, #16]
  414b7e:	f7ff fe03 	bl	414788 <rshift>
  414b82:	e70c      	b.n	41499e <__gethex+0x176>
  414b84:	f8cd b010 	str.w	fp, [sp, #16]
  414b88:	e695      	b.n	4148b6 <__gethex+0x8e>
  414b8a:	1a25      	subs	r5, r4, r0
  414b8c:	9905      	ldr	r1, [sp, #20]
  414b8e:	9807      	ldr	r0, [sp, #28]
  414b90:	462a      	mov	r2, r5
  414b92:	f7fd fc15 	bl	4123c0 <__lshift>
  414b96:	9b04      	ldr	r3, [sp, #16]
  414b98:	9005      	str	r0, [sp, #20]
  414b9a:	1b5b      	subs	r3, r3, r5
  414b9c:	9304      	str	r3, [sp, #16]
  414b9e:	f100 0314 	add.w	r3, r0, #20
  414ba2:	9308      	str	r3, [sp, #32]
  414ba4:	2600      	movs	r6, #0
  414ba6:	e6fa      	b.n	41499e <__gethex+0x176>
  414ba8:	2700      	movs	r7, #0
  414baa:	e660      	b.n	41486e <__gethex+0x46>
  414bac:	9204      	str	r2, [sp, #16]
  414bae:	f04f 0901 	mov.w	r9, #1
  414bb2:	e680      	b.n	4148b6 <__gethex+0x8e>
  414bb4:	4606      	mov	r6, r0
  414bb6:	e7dd      	b.n	414b74 <__gethex+0x34c>
  414bb8:	462c      	mov	r4, r5
  414bba:	e66c      	b.n	414896 <__gethex+0x6e>
  414bbc:	1e6f      	subs	r7, r5, #1
  414bbe:	2e00      	cmp	r6, #0
  414bc0:	d158      	bne.n	414c74 <__gethex+0x44c>
  414bc2:	2f00      	cmp	r7, #0
  414bc4:	dd04      	ble.n	414bd0 <__gethex+0x3a8>
  414bc6:	9805      	ldr	r0, [sp, #20]
  414bc8:	4639      	mov	r1, r7
  414bca:	f7fd fe09 	bl	4127e0 <__any_on>
  414bce:	4606      	mov	r6, r0
  414bd0:	9808      	ldr	r0, [sp, #32]
  414bd2:	117b      	asrs	r3, r7, #5
  414bd4:	2201      	movs	r2, #1
  414bd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  414bda:	9805      	ldr	r0, [sp, #20]
  414bdc:	f007 071f 	and.w	r7, r7, #31
  414be0:	40ba      	lsls	r2, r7
  414be2:	421a      	tst	r2, r3
  414be4:	4629      	mov	r1, r5
  414be6:	bf18      	it	ne
  414be8:	f046 0602 	orrne.w	r6, r6, #2
  414bec:	f7ff fdcc 	bl	414788 <rshift>
  414bf0:	9b06      	ldr	r3, [sp, #24]
  414bf2:	685b      	ldr	r3, [r3, #4]
  414bf4:	9304      	str	r3, [sp, #16]
  414bf6:	1b64      	subs	r4, r4, r5
  414bf8:	2502      	movs	r5, #2
  414bfa:	e77f      	b.n	414afc <__gethex+0x2d4>
  414bfc:	9903      	ldr	r1, [sp, #12]
  414bfe:	5c63      	ldrb	r3, [r4, r1]
  414c00:	5cf2      	ldrb	r2, [r6, r3]
  414c02:	468b      	mov	fp, r1
  414c04:	44a3      	add	fp, r4
  414c06:	2a00      	cmp	r2, #0
  414c08:	f000 8081 	beq.w	414d0e <__gethex+0x4e6>
  414c0c:	f10b 0201 	add.w	r2, fp, #1
  414c10:	4614      	mov	r4, r2
  414c12:	3201      	adds	r2, #1
  414c14:	7823      	ldrb	r3, [r4, #0]
  414c16:	5cf1      	ldrb	r1, [r6, r3]
  414c18:	2900      	cmp	r1, #0
  414c1a:	d1f9      	bne.n	414c10 <__gethex+0x3e8>
  414c1c:	e646      	b.n	4148ac <__gethex+0x84>
  414c1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  414c20:	f1c2 0201 	rsb	r2, r2, #1
  414c24:	9215      	str	r2, [sp, #84]	; 0x54
  414c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
  414c28:	2b00      	cmp	r3, #0
  414c2a:	f43f af73 	beq.w	414b14 <__gethex+0x2ec>
  414c2e:	9b05      	ldr	r3, [sp, #20]
  414c30:	9f08      	ldr	r7, [sp, #32]
  414c32:	691e      	ldr	r6, [r3, #16]
  414c34:	9b08      	ldr	r3, [sp, #32]
  414c36:	ea4f 0886 	mov.w	r8, r6, lsl #2
  414c3a:	4447      	add	r7, r8
  414c3c:	2000      	movs	r0, #0
  414c3e:	e003      	b.n	414c48 <__gethex+0x420>
  414c40:	429f      	cmp	r7, r3
  414c42:	f843 0c04 	str.w	r0, [r3, #-4]
  414c46:	d94a      	bls.n	414cde <__gethex+0x4b6>
  414c48:	4619      	mov	r1, r3
  414c4a:	f853 2b04 	ldr.w	r2, [r3], #4
  414c4e:	f1b2 3fff 	cmp.w	r2, #4294967295
  414c52:	d0f5      	beq.n	414c40 <__gethex+0x418>
  414c54:	3201      	adds	r2, #1
  414c56:	9f08      	ldr	r7, [sp, #32]
  414c58:	600a      	str	r2, [r1, #0]
  414c5a:	2d02      	cmp	r5, #2
  414c5c:	d04d      	beq.n	414cfa <__gethex+0x4d2>
  414c5e:	9a05      	ldr	r2, [sp, #20]
  414c60:	6913      	ldr	r3, [r2, #16]
  414c62:	429e      	cmp	r6, r3
  414c64:	f6ff af27 	blt.w	414ab6 <__gethex+0x28e>
  414c68:	f014 041f 	ands.w	r4, r4, #31
  414c6c:	f47f af19 	bne.w	414aa2 <__gethex+0x27a>
  414c70:	2521      	movs	r5, #33	; 0x21
  414c72:	e751      	b.n	414b18 <__gethex+0x2f0>
  414c74:	2601      	movs	r6, #1
  414c76:	e7ab      	b.n	414bd0 <__gethex+0x3a8>
  414c78:	9915      	ldr	r1, [sp, #84]	; 0x54
  414c7a:	2900      	cmp	r1, #0
  414c7c:	f43f aea9 	beq.w	4149d2 <__gethex+0x1aa>
  414c80:	9809      	ldr	r0, [sp, #36]	; 0x24
  414c82:	9914      	ldr	r1, [sp, #80]	; 0x50
  414c84:	6003      	str	r3, [r0, #0]
  414c86:	9b05      	ldr	r3, [sp, #20]
  414c88:	2201      	movs	r2, #1
  414c8a:	611a      	str	r2, [r3, #16]
  414c8c:	9b08      	ldr	r3, [sp, #32]
  414c8e:	601a      	str	r2, [r3, #0]
  414c90:	9b05      	ldr	r3, [sp, #20]
  414c92:	600b      	str	r3, [r1, #0]
  414c94:	2062      	movs	r0, #98	; 0x62
  414c96:	e61e      	b.n	4148d6 <__gethex+0xae>
  414c98:	07b2      	lsls	r2, r6, #30
  414c9a:	f57f af3b 	bpl.w	414b14 <__gethex+0x2ec>
  414c9e:	9908      	ldr	r1, [sp, #32]
  414ca0:	680b      	ldr	r3, [r1, #0]
  414ca2:	4333      	orrs	r3, r6
  414ca4:	07db      	lsls	r3, r3, #31
  414ca6:	d4c2      	bmi.n	414c2e <__gethex+0x406>
  414ca8:	e734      	b.n	414b14 <__gethex+0x2ec>
  414caa:	f8dd b020 	ldr.w	fp, [sp, #32]
  414cae:	f04f 0900 	mov.w	r9, #0
  414cb2:	e65e      	b.n	414972 <__gethex+0x14a>
  414cb4:	2602      	movs	r6, #2
  414cb6:	e75d      	b.n	414b74 <__gethex+0x34c>
  414cb8:	42a5      	cmp	r5, r4
  414cba:	f47f ae8a 	bne.w	4149d2 <__gethex+0x1aa>
  414cbe:	2c01      	cmp	r4, #1
  414cc0:	ddde      	ble.n	414c80 <__gethex+0x458>
  414cc2:	1e61      	subs	r1, r4, #1
  414cc4:	9805      	ldr	r0, [sp, #20]
  414cc6:	f7fd fd8b 	bl	4127e0 <__any_on>
  414cca:	2800      	cmp	r0, #0
  414ccc:	f43f ae81 	beq.w	4149d2 <__gethex+0x1aa>
  414cd0:	9a06      	ldr	r2, [sp, #24]
  414cd2:	6853      	ldr	r3, [r2, #4]
  414cd4:	e7d4      	b.n	414c80 <__gethex+0x458>
  414cd6:	9815      	ldr	r0, [sp, #84]	; 0x54
  414cd8:	2800      	cmp	r0, #0
  414cda:	d0d1      	beq.n	414c80 <__gethex+0x458>
  414cdc:	e679      	b.n	4149d2 <__gethex+0x1aa>
  414cde:	9805      	ldr	r0, [sp, #20]
  414ce0:	6883      	ldr	r3, [r0, #8]
  414ce2:	429e      	cmp	r6, r3
  414ce4:	da15      	bge.n	414d12 <__gethex+0x4ea>
  414ce6:	9f08      	ldr	r7, [sp, #32]
  414ce8:	4633      	mov	r3, r6
  414cea:	9805      	ldr	r0, [sp, #20]
  414cec:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  414cf0:	2101      	movs	r1, #1
  414cf2:	3301      	adds	r3, #1
  414cf4:	6103      	str	r3, [r0, #16]
  414cf6:	6151      	str	r1, [r2, #20]
  414cf8:	e7af      	b.n	414c5a <__gethex+0x432>
  414cfa:	9906      	ldr	r1, [sp, #24]
  414cfc:	680b      	ldr	r3, [r1, #0]
  414cfe:	3b01      	subs	r3, #1
  414d00:	42a3      	cmp	r3, r4
  414d02:	d01c      	beq.n	414d3e <__gethex+0x516>
  414d04:	2522      	movs	r5, #34	; 0x22
  414d06:	e707      	b.n	414b18 <__gethex+0x2f0>
  414d08:	4613      	mov	r3, r2
  414d0a:	4625      	mov	r5, r4
  414d0c:	e6c1      	b.n	414a92 <__gethex+0x26a>
  414d0e:	465c      	mov	r4, fp
  414d10:	e5cc      	b.n	4148ac <__gethex+0x84>
  414d12:	6841      	ldr	r1, [r0, #4]
  414d14:	9807      	ldr	r0, [sp, #28]
  414d16:	3101      	adds	r1, #1
  414d18:	f7fd f946 	bl	411fa8 <_Balloc>
  414d1c:	9905      	ldr	r1, [sp, #20]
  414d1e:	690b      	ldr	r3, [r1, #16]
  414d20:	1c9a      	adds	r2, r3, #2
  414d22:	4607      	mov	r7, r0
  414d24:	0092      	lsls	r2, r2, #2
  414d26:	310c      	adds	r1, #12
  414d28:	300c      	adds	r0, #12
  414d2a:	f7f7 fce5 	bl	40c6f8 <memcpy>
  414d2e:	9807      	ldr	r0, [sp, #28]
  414d30:	9905      	ldr	r1, [sp, #20]
  414d32:	f7fd f95f 	bl	411ff4 <_Bfree>
  414d36:	9705      	str	r7, [sp, #20]
  414d38:	693b      	ldr	r3, [r7, #16]
  414d3a:	3714      	adds	r7, #20
  414d3c:	e7d5      	b.n	414cea <__gethex+0x4c2>
  414d3e:	1163      	asrs	r3, r4, #5
  414d40:	2201      	movs	r2, #1
  414d42:	f004 041f 	and.w	r4, r4, #31
  414d46:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  414d4a:	40a2      	lsls	r2, r4
  414d4c:	421a      	tst	r2, r3
  414d4e:	bf14      	ite	ne
  414d50:	2521      	movne	r5, #33	; 0x21
  414d52:	2522      	moveq	r5, #34	; 0x22
  414d54:	e6e0      	b.n	414b18 <__gethex+0x2f0>
  414d56:	bf00      	nop

00414d58 <__hexnan>:
  414d58:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414d5c:	680b      	ldr	r3, [r1, #0]
  414d5e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 414ee8 <__hexnan+0x190>
  414d62:	b084      	sub	sp, #16
  414d64:	4691      	mov	r9, r2
  414d66:	115a      	asrs	r2, r3, #5
  414d68:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  414d6c:	f013 031f 	ands.w	r3, r3, #31
  414d70:	9200      	str	r2, [sp, #0]
  414d72:	9001      	str	r0, [sp, #4]
  414d74:	bf1c      	itt	ne
  414d76:	3204      	addne	r2, #4
  414d78:	9200      	strne	r2, [sp, #0]
  414d7a:	9a01      	ldr	r2, [sp, #4]
  414d7c:	9800      	ldr	r0, [sp, #0]
  414d7e:	9303      	str	r3, [sp, #12]
  414d80:	6811      	ldr	r1, [r2, #0]
  414d82:	2300      	movs	r3, #0
  414d84:	f840 3c04 	str.w	r3, [r0, #-4]
  414d88:	469a      	mov	sl, r3
  414d8a:	461d      	mov	r5, r3
  414d8c:	461e      	mov	r6, r3
  414d8e:	784b      	ldrb	r3, [r1, #1]
  414d90:	1f07      	subs	r7, r0, #4
  414d92:	46bc      	mov	ip, r7
  414d94:	4638      	mov	r0, r7
  414d96:	9702      	str	r7, [sp, #8]
  414d98:	b33b      	cbz	r3, 414dea <__hexnan+0x92>
  414d9a:	f818 2003 	ldrb.w	r2, [r8, r3]
  414d9e:	2a00      	cmp	r2, #0
  414da0:	d148      	bne.n	414e34 <__hexnan+0xdc>
  414da2:	2b20      	cmp	r3, #32
  414da4:	d866      	bhi.n	414e74 <__hexnan+0x11c>
  414da6:	42ae      	cmp	r6, r5
  414da8:	dd1b      	ble.n	414de2 <__hexnan+0x8a>
  414daa:	4560      	cmp	r0, ip
  414dac:	d215      	bcs.n	414dda <__hexnan+0x82>
  414dae:	f1ba 0f07 	cmp.w	sl, #7
  414db2:	dc12      	bgt.n	414dda <__hexnan+0x82>
  414db4:	f1ca 0a08 	rsb	sl, sl, #8
  414db8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  414dbc:	6802      	ldr	r2, [r0, #0]
  414dbe:	f1ca 0b20 	rsb	fp, sl, #32
  414dc2:	4603      	mov	r3, r0
  414dc4:	685c      	ldr	r4, [r3, #4]
  414dc6:	fa04 f70b 	lsl.w	r7, r4, fp
  414dca:	4317      	orrs	r7, r2
  414dcc:	fa24 f20a 	lsr.w	r2, r4, sl
  414dd0:	601f      	str	r7, [r3, #0]
  414dd2:	f843 2f04 	str.w	r2, [r3, #4]!
  414dd6:	459c      	cmp	ip, r3
  414dd8:	d8f4      	bhi.n	414dc4 <__hexnan+0x6c>
  414dda:	4548      	cmp	r0, r9
  414ddc:	d841      	bhi.n	414e62 <__hexnan+0x10a>
  414dde:	f04f 0a08 	mov.w	sl, #8
  414de2:	3101      	adds	r1, #1
  414de4:	784b      	ldrb	r3, [r1, #1]
  414de6:	2b00      	cmp	r3, #0
  414de8:	d1d7      	bne.n	414d9a <__hexnan+0x42>
  414dea:	9f02      	ldr	r7, [sp, #8]
  414dec:	2e00      	cmp	r6, #0
  414dee:	d044      	beq.n	414e7a <__hexnan+0x122>
  414df0:	4560      	cmp	r0, ip
  414df2:	d202      	bcs.n	414dfa <__hexnan+0xa2>
  414df4:	f1ba 0f07 	cmp.w	sl, #7
  414df8:	dd62      	ble.n	414ec0 <__hexnan+0x168>
  414dfa:	4581      	cmp	r9, r0
  414dfc:	d242      	bcs.n	414e84 <__hexnan+0x12c>
  414dfe:	464b      	mov	r3, r9
  414e00:	f850 2b04 	ldr.w	r2, [r0], #4
  414e04:	f843 2b04 	str.w	r2, [r3], #4
  414e08:	4287      	cmp	r7, r0
  414e0a:	d2f9      	bcs.n	414e00 <__hexnan+0xa8>
  414e0c:	2200      	movs	r2, #0
  414e0e:	f843 2b04 	str.w	r2, [r3], #4
  414e12:	429f      	cmp	r7, r3
  414e14:	d2fb      	bcs.n	414e0e <__hexnan+0xb6>
  414e16:	9800      	ldr	r0, [sp, #0]
  414e18:	f850 3c04 	ldr.w	r3, [r0, #-4]
  414e1c:	b92b      	cbnz	r3, 414e2a <__hexnan+0xd2>
  414e1e:	45b9      	cmp	r9, r7
  414e20:	d041      	beq.n	414ea6 <__hexnan+0x14e>
  414e22:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  414e26:	2b00      	cmp	r3, #0
  414e28:	d0f9      	beq.n	414e1e <__hexnan+0xc6>
  414e2a:	2005      	movs	r0, #5
  414e2c:	b004      	add	sp, #16
  414e2e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414e32:	4770      	bx	lr
  414e34:	f10a 0a01 	add.w	sl, sl, #1
  414e38:	f1ba 0f08 	cmp.w	sl, #8
  414e3c:	f106 0601 	add.w	r6, r6, #1
  414e40:	dc06      	bgt.n	414e50 <__hexnan+0xf8>
  414e42:	6803      	ldr	r3, [r0, #0]
  414e44:	011b      	lsls	r3, r3, #4
  414e46:	f002 020f 	and.w	r2, r2, #15
  414e4a:	431a      	orrs	r2, r3
  414e4c:	6002      	str	r2, [r0, #0]
  414e4e:	e7c8      	b.n	414de2 <__hexnan+0x8a>
  414e50:	4548      	cmp	r0, r9
  414e52:	d9c6      	bls.n	414de2 <__hexnan+0x8a>
  414e54:	2300      	movs	r3, #0
  414e56:	f840 3c04 	str.w	r3, [r0, #-4]
  414e5a:	f04f 0a01 	mov.w	sl, #1
  414e5e:	3804      	subs	r0, #4
  414e60:	e7f1      	b.n	414e46 <__hexnan+0xee>
  414e62:	2300      	movs	r3, #0
  414e64:	f1a0 0c04 	sub.w	ip, r0, #4
  414e68:	f840 3c04 	str.w	r3, [r0, #-4]
  414e6c:	4635      	mov	r5, r6
  414e6e:	4660      	mov	r0, ip
  414e70:	469a      	mov	sl, r3
  414e72:	e7b6      	b.n	414de2 <__hexnan+0x8a>
  414e74:	2b29      	cmp	r3, #41	; 0x29
  414e76:	9f02      	ldr	r7, [sp, #8]
  414e78:	d01c      	beq.n	414eb4 <__hexnan+0x15c>
  414e7a:	2004      	movs	r0, #4
  414e7c:	b004      	add	sp, #16
  414e7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414e82:	4770      	bx	lr
  414e84:	9a03      	ldr	r2, [sp, #12]
  414e86:	2a00      	cmp	r2, #0
  414e88:	d0c5      	beq.n	414e16 <__hexnan+0xbe>
  414e8a:	9b03      	ldr	r3, [sp, #12]
  414e8c:	9800      	ldr	r0, [sp, #0]
  414e8e:	f1c3 0220 	rsb	r2, r3, #32
  414e92:	f04f 31ff 	mov.w	r1, #4294967295
  414e96:	f850 3c04 	ldr.w	r3, [r0, #-4]
  414e9a:	fa21 f202 	lsr.w	r2, r1, r2
  414e9e:	4013      	ands	r3, r2
  414ea0:	f840 3c04 	str.w	r3, [r0, #-4]
  414ea4:	e7ba      	b.n	414e1c <__hexnan+0xc4>
  414ea6:	2301      	movs	r3, #1
  414ea8:	2005      	movs	r0, #5
  414eaa:	603b      	str	r3, [r7, #0]
  414eac:	b004      	add	sp, #16
  414eae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414eb2:	4770      	bx	lr
  414eb4:	9a01      	ldr	r2, [sp, #4]
  414eb6:	3102      	adds	r1, #2
  414eb8:	6011      	str	r1, [r2, #0]
  414eba:	2e00      	cmp	r6, #0
  414ebc:	d198      	bne.n	414df0 <__hexnan+0x98>
  414ebe:	e7dc      	b.n	414e7a <__hexnan+0x122>
  414ec0:	f1ca 0508 	rsb	r5, sl, #8
  414ec4:	00ad      	lsls	r5, r5, #2
  414ec6:	6802      	ldr	r2, [r0, #0]
  414ec8:	f1c5 0620 	rsb	r6, r5, #32
  414ecc:	4603      	mov	r3, r0
  414ece:	6859      	ldr	r1, [r3, #4]
  414ed0:	fa01 f406 	lsl.w	r4, r1, r6
  414ed4:	4314      	orrs	r4, r2
  414ed6:	fa21 f205 	lsr.w	r2, r1, r5
  414eda:	601c      	str	r4, [r3, #0]
  414edc:	f843 2f04 	str.w	r2, [r3, #4]!
  414ee0:	4563      	cmp	r3, ip
  414ee2:	d3f4      	bcc.n	414ece <__hexnan+0x176>
  414ee4:	e789      	b.n	414dfa <__hexnan+0xa2>
  414ee6:	bf00      	nop
  414ee8:	00416140 	.word	0x00416140

00414eec <_isatty_r>:
  414eec:	b538      	push	{r3, r4, r5, lr}
  414eee:	4c07      	ldr	r4, [pc, #28]	; (414f0c <_isatty_r+0x20>)
  414ef0:	2300      	movs	r3, #0
  414ef2:	4605      	mov	r5, r0
  414ef4:	4608      	mov	r0, r1
  414ef6:	6023      	str	r3, [r4, #0]
  414ef8:	f7f7 f80c 	bl	40bf14 <_isatty>
  414efc:	1c43      	adds	r3, r0, #1
  414efe:	d000      	beq.n	414f02 <_isatty_r+0x16>
  414f00:	bd38      	pop	{r3, r4, r5, pc}
  414f02:	6823      	ldr	r3, [r4, #0]
  414f04:	2b00      	cmp	r3, #0
  414f06:	d0fb      	beq.n	414f00 <_isatty_r+0x14>
  414f08:	602b      	str	r3, [r5, #0]
  414f0a:	bd38      	pop	{r3, r4, r5, pc}
  414f0c:	200099c8 	.word	0x200099c8

00414f10 <__aeabi_drsub>:
  414f10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  414f14:	e002      	b.n	414f1c <__adddf3>
  414f16:	bf00      	nop

00414f18 <__aeabi_dsub>:
  414f18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00414f1c <__adddf3>:
  414f1c:	b530      	push	{r4, r5, lr}
  414f1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  414f22:	ea4f 0543 	mov.w	r5, r3, lsl #1
  414f26:	ea94 0f05 	teq	r4, r5
  414f2a:	bf08      	it	eq
  414f2c:	ea90 0f02 	teqeq	r0, r2
  414f30:	bf1f      	itttt	ne
  414f32:	ea54 0c00 	orrsne.w	ip, r4, r0
  414f36:	ea55 0c02 	orrsne.w	ip, r5, r2
  414f3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  414f3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  414f42:	f000 80e2 	beq.w	41510a <__adddf3+0x1ee>
  414f46:	ea4f 5454 	mov.w	r4, r4, lsr #21
  414f4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  414f4e:	bfb8      	it	lt
  414f50:	426d      	neglt	r5, r5
  414f52:	dd0c      	ble.n	414f6e <__adddf3+0x52>
  414f54:	442c      	add	r4, r5
  414f56:	ea80 0202 	eor.w	r2, r0, r2
  414f5a:	ea81 0303 	eor.w	r3, r1, r3
  414f5e:	ea82 0000 	eor.w	r0, r2, r0
  414f62:	ea83 0101 	eor.w	r1, r3, r1
  414f66:	ea80 0202 	eor.w	r2, r0, r2
  414f6a:	ea81 0303 	eor.w	r3, r1, r3
  414f6e:	2d36      	cmp	r5, #54	; 0x36
  414f70:	bf88      	it	hi
  414f72:	bd30      	pophi	{r4, r5, pc}
  414f74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  414f78:	ea4f 3101 	mov.w	r1, r1, lsl #12
  414f7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  414f80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  414f84:	d002      	beq.n	414f8c <__adddf3+0x70>
  414f86:	4240      	negs	r0, r0
  414f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  414f8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  414f90:	ea4f 3303 	mov.w	r3, r3, lsl #12
  414f94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  414f98:	d002      	beq.n	414fa0 <__adddf3+0x84>
  414f9a:	4252      	negs	r2, r2
  414f9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  414fa0:	ea94 0f05 	teq	r4, r5
  414fa4:	f000 80a7 	beq.w	4150f6 <__adddf3+0x1da>
  414fa8:	f1a4 0401 	sub.w	r4, r4, #1
  414fac:	f1d5 0e20 	rsbs	lr, r5, #32
  414fb0:	db0d      	blt.n	414fce <__adddf3+0xb2>
  414fb2:	fa02 fc0e 	lsl.w	ip, r2, lr
  414fb6:	fa22 f205 	lsr.w	r2, r2, r5
  414fba:	1880      	adds	r0, r0, r2
  414fbc:	f141 0100 	adc.w	r1, r1, #0
  414fc0:	fa03 f20e 	lsl.w	r2, r3, lr
  414fc4:	1880      	adds	r0, r0, r2
  414fc6:	fa43 f305 	asr.w	r3, r3, r5
  414fca:	4159      	adcs	r1, r3
  414fcc:	e00e      	b.n	414fec <__adddf3+0xd0>
  414fce:	f1a5 0520 	sub.w	r5, r5, #32
  414fd2:	f10e 0e20 	add.w	lr, lr, #32
  414fd6:	2a01      	cmp	r2, #1
  414fd8:	fa03 fc0e 	lsl.w	ip, r3, lr
  414fdc:	bf28      	it	cs
  414fde:	f04c 0c02 	orrcs.w	ip, ip, #2
  414fe2:	fa43 f305 	asr.w	r3, r3, r5
  414fe6:	18c0      	adds	r0, r0, r3
  414fe8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  414fec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  414ff0:	d507      	bpl.n	415002 <__adddf3+0xe6>
  414ff2:	f04f 0e00 	mov.w	lr, #0
  414ff6:	f1dc 0c00 	rsbs	ip, ip, #0
  414ffa:	eb7e 0000 	sbcs.w	r0, lr, r0
  414ffe:	eb6e 0101 	sbc.w	r1, lr, r1
  415002:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  415006:	d31b      	bcc.n	415040 <__adddf3+0x124>
  415008:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  41500c:	d30c      	bcc.n	415028 <__adddf3+0x10c>
  41500e:	0849      	lsrs	r1, r1, #1
  415010:	ea5f 0030 	movs.w	r0, r0, rrx
  415014:	ea4f 0c3c 	mov.w	ip, ip, rrx
  415018:	f104 0401 	add.w	r4, r4, #1
  41501c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  415020:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  415024:	f080 809a 	bcs.w	41515c <__adddf3+0x240>
  415028:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  41502c:	bf08      	it	eq
  41502e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  415032:	f150 0000 	adcs.w	r0, r0, #0
  415036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41503a:	ea41 0105 	orr.w	r1, r1, r5
  41503e:	bd30      	pop	{r4, r5, pc}
  415040:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  415044:	4140      	adcs	r0, r0
  415046:	eb41 0101 	adc.w	r1, r1, r1
  41504a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41504e:	f1a4 0401 	sub.w	r4, r4, #1
  415052:	d1e9      	bne.n	415028 <__adddf3+0x10c>
  415054:	f091 0f00 	teq	r1, #0
  415058:	bf04      	itt	eq
  41505a:	4601      	moveq	r1, r0
  41505c:	2000      	moveq	r0, #0
  41505e:	fab1 f381 	clz	r3, r1
  415062:	bf08      	it	eq
  415064:	3320      	addeq	r3, #32
  415066:	f1a3 030b 	sub.w	r3, r3, #11
  41506a:	f1b3 0220 	subs.w	r2, r3, #32
  41506e:	da0c      	bge.n	41508a <__adddf3+0x16e>
  415070:	320c      	adds	r2, #12
  415072:	dd08      	ble.n	415086 <__adddf3+0x16a>
  415074:	f102 0c14 	add.w	ip, r2, #20
  415078:	f1c2 020c 	rsb	r2, r2, #12
  41507c:	fa01 f00c 	lsl.w	r0, r1, ip
  415080:	fa21 f102 	lsr.w	r1, r1, r2
  415084:	e00c      	b.n	4150a0 <__adddf3+0x184>
  415086:	f102 0214 	add.w	r2, r2, #20
  41508a:	bfd8      	it	le
  41508c:	f1c2 0c20 	rsble	ip, r2, #32
  415090:	fa01 f102 	lsl.w	r1, r1, r2
  415094:	fa20 fc0c 	lsr.w	ip, r0, ip
  415098:	bfdc      	itt	le
  41509a:	ea41 010c 	orrle.w	r1, r1, ip
  41509e:	4090      	lslle	r0, r2
  4150a0:	1ae4      	subs	r4, r4, r3
  4150a2:	bfa2      	ittt	ge
  4150a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4150a8:	4329      	orrge	r1, r5
  4150aa:	bd30      	popge	{r4, r5, pc}
  4150ac:	ea6f 0404 	mvn.w	r4, r4
  4150b0:	3c1f      	subs	r4, #31
  4150b2:	da1c      	bge.n	4150ee <__adddf3+0x1d2>
  4150b4:	340c      	adds	r4, #12
  4150b6:	dc0e      	bgt.n	4150d6 <__adddf3+0x1ba>
  4150b8:	f104 0414 	add.w	r4, r4, #20
  4150bc:	f1c4 0220 	rsb	r2, r4, #32
  4150c0:	fa20 f004 	lsr.w	r0, r0, r4
  4150c4:	fa01 f302 	lsl.w	r3, r1, r2
  4150c8:	ea40 0003 	orr.w	r0, r0, r3
  4150cc:	fa21 f304 	lsr.w	r3, r1, r4
  4150d0:	ea45 0103 	orr.w	r1, r5, r3
  4150d4:	bd30      	pop	{r4, r5, pc}
  4150d6:	f1c4 040c 	rsb	r4, r4, #12
  4150da:	f1c4 0220 	rsb	r2, r4, #32
  4150de:	fa20 f002 	lsr.w	r0, r0, r2
  4150e2:	fa01 f304 	lsl.w	r3, r1, r4
  4150e6:	ea40 0003 	orr.w	r0, r0, r3
  4150ea:	4629      	mov	r1, r5
  4150ec:	bd30      	pop	{r4, r5, pc}
  4150ee:	fa21 f004 	lsr.w	r0, r1, r4
  4150f2:	4629      	mov	r1, r5
  4150f4:	bd30      	pop	{r4, r5, pc}
  4150f6:	f094 0f00 	teq	r4, #0
  4150fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4150fe:	bf06      	itte	eq
  415100:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  415104:	3401      	addeq	r4, #1
  415106:	3d01      	subne	r5, #1
  415108:	e74e      	b.n	414fa8 <__adddf3+0x8c>
  41510a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41510e:	bf18      	it	ne
  415110:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  415114:	d029      	beq.n	41516a <__adddf3+0x24e>
  415116:	ea94 0f05 	teq	r4, r5
  41511a:	bf08      	it	eq
  41511c:	ea90 0f02 	teqeq	r0, r2
  415120:	d005      	beq.n	41512e <__adddf3+0x212>
  415122:	ea54 0c00 	orrs.w	ip, r4, r0
  415126:	bf04      	itt	eq
  415128:	4619      	moveq	r1, r3
  41512a:	4610      	moveq	r0, r2
  41512c:	bd30      	pop	{r4, r5, pc}
  41512e:	ea91 0f03 	teq	r1, r3
  415132:	bf1e      	ittt	ne
  415134:	2100      	movne	r1, #0
  415136:	2000      	movne	r0, #0
  415138:	bd30      	popne	{r4, r5, pc}
  41513a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41513e:	d105      	bne.n	41514c <__adddf3+0x230>
  415140:	0040      	lsls	r0, r0, #1
  415142:	4149      	adcs	r1, r1
  415144:	bf28      	it	cs
  415146:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41514a:	bd30      	pop	{r4, r5, pc}
  41514c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  415150:	bf3c      	itt	cc
  415152:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  415156:	bd30      	popcc	{r4, r5, pc}
  415158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41515c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  415160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  415164:	f04f 0000 	mov.w	r0, #0
  415168:	bd30      	pop	{r4, r5, pc}
  41516a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41516e:	bf1a      	itte	ne
  415170:	4619      	movne	r1, r3
  415172:	4610      	movne	r0, r2
  415174:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  415178:	bf1c      	itt	ne
  41517a:	460b      	movne	r3, r1
  41517c:	4602      	movne	r2, r0
  41517e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  415182:	bf06      	itte	eq
  415184:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  415188:	ea91 0f03 	teqeq	r1, r3
  41518c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  415190:	bd30      	pop	{r4, r5, pc}
  415192:	bf00      	nop

00415194 <__aeabi_ui2d>:
  415194:	f090 0f00 	teq	r0, #0
  415198:	bf04      	itt	eq
  41519a:	2100      	moveq	r1, #0
  41519c:	4770      	bxeq	lr
  41519e:	b530      	push	{r4, r5, lr}
  4151a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4151a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4151a8:	f04f 0500 	mov.w	r5, #0
  4151ac:	f04f 0100 	mov.w	r1, #0
  4151b0:	e750      	b.n	415054 <__adddf3+0x138>
  4151b2:	bf00      	nop

004151b4 <__aeabi_i2d>:
  4151b4:	f090 0f00 	teq	r0, #0
  4151b8:	bf04      	itt	eq
  4151ba:	2100      	moveq	r1, #0
  4151bc:	4770      	bxeq	lr
  4151be:	b530      	push	{r4, r5, lr}
  4151c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4151c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4151c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4151cc:	bf48      	it	mi
  4151ce:	4240      	negmi	r0, r0
  4151d0:	f04f 0100 	mov.w	r1, #0
  4151d4:	e73e      	b.n	415054 <__adddf3+0x138>
  4151d6:	bf00      	nop

004151d8 <__aeabi_f2d>:
  4151d8:	0042      	lsls	r2, r0, #1
  4151da:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4151de:	ea4f 0131 	mov.w	r1, r1, rrx
  4151e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4151e6:	bf1f      	itttt	ne
  4151e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4151ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4151f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4151f4:	4770      	bxne	lr
  4151f6:	f092 0f00 	teq	r2, #0
  4151fa:	bf14      	ite	ne
  4151fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  415200:	4770      	bxeq	lr
  415202:	b530      	push	{r4, r5, lr}
  415204:	f44f 7460 	mov.w	r4, #896	; 0x380
  415208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41520c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  415210:	e720      	b.n	415054 <__adddf3+0x138>
  415212:	bf00      	nop

00415214 <__aeabi_ul2d>:
  415214:	ea50 0201 	orrs.w	r2, r0, r1
  415218:	bf08      	it	eq
  41521a:	4770      	bxeq	lr
  41521c:	b530      	push	{r4, r5, lr}
  41521e:	f04f 0500 	mov.w	r5, #0
  415222:	e00a      	b.n	41523a <__aeabi_l2d+0x16>

00415224 <__aeabi_l2d>:
  415224:	ea50 0201 	orrs.w	r2, r0, r1
  415228:	bf08      	it	eq
  41522a:	4770      	bxeq	lr
  41522c:	b530      	push	{r4, r5, lr}
  41522e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  415232:	d502      	bpl.n	41523a <__aeabi_l2d+0x16>
  415234:	4240      	negs	r0, r0
  415236:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41523a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41523e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  415242:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  415246:	f43f aedc 	beq.w	415002 <__adddf3+0xe6>
  41524a:	f04f 0203 	mov.w	r2, #3
  41524e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  415252:	bf18      	it	ne
  415254:	3203      	addne	r2, #3
  415256:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41525a:	bf18      	it	ne
  41525c:	3203      	addne	r2, #3
  41525e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  415262:	f1c2 0320 	rsb	r3, r2, #32
  415266:	fa00 fc03 	lsl.w	ip, r0, r3
  41526a:	fa20 f002 	lsr.w	r0, r0, r2
  41526e:	fa01 fe03 	lsl.w	lr, r1, r3
  415272:	ea40 000e 	orr.w	r0, r0, lr
  415276:	fa21 f102 	lsr.w	r1, r1, r2
  41527a:	4414      	add	r4, r2
  41527c:	e6c1      	b.n	415002 <__adddf3+0xe6>
  41527e:	bf00      	nop

00415280 <__aeabi_dmul>:
  415280:	b570      	push	{r4, r5, r6, lr}
  415282:	f04f 0cff 	mov.w	ip, #255	; 0xff
  415286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41528a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41528e:	bf1d      	ittte	ne
  415290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  415294:	ea94 0f0c 	teqne	r4, ip
  415298:	ea95 0f0c 	teqne	r5, ip
  41529c:	f000 f8de 	bleq	41545c <__aeabi_dmul+0x1dc>
  4152a0:	442c      	add	r4, r5
  4152a2:	ea81 0603 	eor.w	r6, r1, r3
  4152a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4152aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4152ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4152b2:	bf18      	it	ne
  4152b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4152b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4152bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4152c0:	d038      	beq.n	415334 <__aeabi_dmul+0xb4>
  4152c2:	fba0 ce02 	umull	ip, lr, r0, r2
  4152c6:	f04f 0500 	mov.w	r5, #0
  4152ca:	fbe1 e502 	umlal	lr, r5, r1, r2
  4152ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4152d2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4152d6:	f04f 0600 	mov.w	r6, #0
  4152da:	fbe1 5603 	umlal	r5, r6, r1, r3
  4152de:	f09c 0f00 	teq	ip, #0
  4152e2:	bf18      	it	ne
  4152e4:	f04e 0e01 	orrne.w	lr, lr, #1
  4152e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4152ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4152f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4152f4:	d204      	bcs.n	415300 <__aeabi_dmul+0x80>
  4152f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4152fa:	416d      	adcs	r5, r5
  4152fc:	eb46 0606 	adc.w	r6, r6, r6
  415300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  415304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  415308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  41530c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  415310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  415314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  415318:	bf88      	it	hi
  41531a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41531e:	d81e      	bhi.n	41535e <__aeabi_dmul+0xde>
  415320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  415324:	bf08      	it	eq
  415326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  41532a:	f150 0000 	adcs.w	r0, r0, #0
  41532e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  415332:	bd70      	pop	{r4, r5, r6, pc}
  415334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  415338:	ea46 0101 	orr.w	r1, r6, r1
  41533c:	ea40 0002 	orr.w	r0, r0, r2
  415340:	ea81 0103 	eor.w	r1, r1, r3
  415344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  415348:	bfc2      	ittt	gt
  41534a:	ebd4 050c 	rsbsgt	r5, r4, ip
  41534e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  415352:	bd70      	popgt	{r4, r5, r6, pc}
  415354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415358:	f04f 0e00 	mov.w	lr, #0
  41535c:	3c01      	subs	r4, #1
  41535e:	f300 80ab 	bgt.w	4154b8 <__aeabi_dmul+0x238>
  415362:	f114 0f36 	cmn.w	r4, #54	; 0x36
  415366:	bfde      	ittt	le
  415368:	2000      	movle	r0, #0
  41536a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41536e:	bd70      	pople	{r4, r5, r6, pc}
  415370:	f1c4 0400 	rsb	r4, r4, #0
  415374:	3c20      	subs	r4, #32
  415376:	da35      	bge.n	4153e4 <__aeabi_dmul+0x164>
  415378:	340c      	adds	r4, #12
  41537a:	dc1b      	bgt.n	4153b4 <__aeabi_dmul+0x134>
  41537c:	f104 0414 	add.w	r4, r4, #20
  415380:	f1c4 0520 	rsb	r5, r4, #32
  415384:	fa00 f305 	lsl.w	r3, r0, r5
  415388:	fa20 f004 	lsr.w	r0, r0, r4
  41538c:	fa01 f205 	lsl.w	r2, r1, r5
  415390:	ea40 0002 	orr.w	r0, r0, r2
  415394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  415398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41539c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4153a0:	fa21 f604 	lsr.w	r6, r1, r4
  4153a4:	eb42 0106 	adc.w	r1, r2, r6
  4153a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4153ac:	bf08      	it	eq
  4153ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4153b2:	bd70      	pop	{r4, r5, r6, pc}
  4153b4:	f1c4 040c 	rsb	r4, r4, #12
  4153b8:	f1c4 0520 	rsb	r5, r4, #32
  4153bc:	fa00 f304 	lsl.w	r3, r0, r4
  4153c0:	fa20 f005 	lsr.w	r0, r0, r5
  4153c4:	fa01 f204 	lsl.w	r2, r1, r4
  4153c8:	ea40 0002 	orr.w	r0, r0, r2
  4153cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4153d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4153d4:	f141 0100 	adc.w	r1, r1, #0
  4153d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4153dc:	bf08      	it	eq
  4153de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4153e2:	bd70      	pop	{r4, r5, r6, pc}
  4153e4:	f1c4 0520 	rsb	r5, r4, #32
  4153e8:	fa00 f205 	lsl.w	r2, r0, r5
  4153ec:	ea4e 0e02 	orr.w	lr, lr, r2
  4153f0:	fa20 f304 	lsr.w	r3, r0, r4
  4153f4:	fa01 f205 	lsl.w	r2, r1, r5
  4153f8:	ea43 0302 	orr.w	r3, r3, r2
  4153fc:	fa21 f004 	lsr.w	r0, r1, r4
  415400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415404:	fa21 f204 	lsr.w	r2, r1, r4
  415408:	ea20 0002 	bic.w	r0, r0, r2
  41540c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  415410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415414:	bf08      	it	eq
  415416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41541a:	bd70      	pop	{r4, r5, r6, pc}
  41541c:	f094 0f00 	teq	r4, #0
  415420:	d10f      	bne.n	415442 <__aeabi_dmul+0x1c2>
  415422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  415426:	0040      	lsls	r0, r0, #1
  415428:	eb41 0101 	adc.w	r1, r1, r1
  41542c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415430:	bf08      	it	eq
  415432:	3c01      	subeq	r4, #1
  415434:	d0f7      	beq.n	415426 <__aeabi_dmul+0x1a6>
  415436:	ea41 0106 	orr.w	r1, r1, r6
  41543a:	f095 0f00 	teq	r5, #0
  41543e:	bf18      	it	ne
  415440:	4770      	bxne	lr
  415442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  415446:	0052      	lsls	r2, r2, #1
  415448:	eb43 0303 	adc.w	r3, r3, r3
  41544c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  415450:	bf08      	it	eq
  415452:	3d01      	subeq	r5, #1
  415454:	d0f7      	beq.n	415446 <__aeabi_dmul+0x1c6>
  415456:	ea43 0306 	orr.w	r3, r3, r6
  41545a:	4770      	bx	lr
  41545c:	ea94 0f0c 	teq	r4, ip
  415460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  415464:	bf18      	it	ne
  415466:	ea95 0f0c 	teqne	r5, ip
  41546a:	d00c      	beq.n	415486 <__aeabi_dmul+0x206>
  41546c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  415470:	bf18      	it	ne
  415472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  415476:	d1d1      	bne.n	41541c <__aeabi_dmul+0x19c>
  415478:	ea81 0103 	eor.w	r1, r1, r3
  41547c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415480:	f04f 0000 	mov.w	r0, #0
  415484:	bd70      	pop	{r4, r5, r6, pc}
  415486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41548a:	bf06      	itte	eq
  41548c:	4610      	moveq	r0, r2
  41548e:	4619      	moveq	r1, r3
  415490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  415494:	d019      	beq.n	4154ca <__aeabi_dmul+0x24a>
  415496:	ea94 0f0c 	teq	r4, ip
  41549a:	d102      	bne.n	4154a2 <__aeabi_dmul+0x222>
  41549c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4154a0:	d113      	bne.n	4154ca <__aeabi_dmul+0x24a>
  4154a2:	ea95 0f0c 	teq	r5, ip
  4154a6:	d105      	bne.n	4154b4 <__aeabi_dmul+0x234>
  4154a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4154ac:	bf1c      	itt	ne
  4154ae:	4610      	movne	r0, r2
  4154b0:	4619      	movne	r1, r3
  4154b2:	d10a      	bne.n	4154ca <__aeabi_dmul+0x24a>
  4154b4:	ea81 0103 	eor.w	r1, r1, r3
  4154b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4154bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4154c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4154c4:	f04f 0000 	mov.w	r0, #0
  4154c8:	bd70      	pop	{r4, r5, r6, pc}
  4154ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4154ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4154d2:	bd70      	pop	{r4, r5, r6, pc}

004154d4 <__aeabi_ddiv>:
  4154d4:	b570      	push	{r4, r5, r6, lr}
  4154d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4154da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4154de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4154e2:	bf1d      	ittte	ne
  4154e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4154e8:	ea94 0f0c 	teqne	r4, ip
  4154ec:	ea95 0f0c 	teqne	r5, ip
  4154f0:	f000 f8a7 	bleq	415642 <__aeabi_ddiv+0x16e>
  4154f4:	eba4 0405 	sub.w	r4, r4, r5
  4154f8:	ea81 0e03 	eor.w	lr, r1, r3
  4154fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415500:	ea4f 3101 	mov.w	r1, r1, lsl #12
  415504:	f000 8088 	beq.w	415618 <__aeabi_ddiv+0x144>
  415508:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41550c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  415510:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  415514:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  415518:	ea4f 2202 	mov.w	r2, r2, lsl #8
  41551c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  415520:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  415524:	ea4f 2600 	mov.w	r6, r0, lsl #8
  415528:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  41552c:	429d      	cmp	r5, r3
  41552e:	bf08      	it	eq
  415530:	4296      	cmpeq	r6, r2
  415532:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  415536:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41553a:	d202      	bcs.n	415542 <__aeabi_ddiv+0x6e>
  41553c:	085b      	lsrs	r3, r3, #1
  41553e:	ea4f 0232 	mov.w	r2, r2, rrx
  415542:	1ab6      	subs	r6, r6, r2
  415544:	eb65 0503 	sbc.w	r5, r5, r3
  415548:	085b      	lsrs	r3, r3, #1
  41554a:	ea4f 0232 	mov.w	r2, r2, rrx
  41554e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  415552:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  415556:	ebb6 0e02 	subs.w	lr, r6, r2
  41555a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41555e:	bf22      	ittt	cs
  415560:	1ab6      	subcs	r6, r6, r2
  415562:	4675      	movcs	r5, lr
  415564:	ea40 000c 	orrcs.w	r0, r0, ip
  415568:	085b      	lsrs	r3, r3, #1
  41556a:	ea4f 0232 	mov.w	r2, r2, rrx
  41556e:	ebb6 0e02 	subs.w	lr, r6, r2
  415572:	eb75 0e03 	sbcs.w	lr, r5, r3
  415576:	bf22      	ittt	cs
  415578:	1ab6      	subcs	r6, r6, r2
  41557a:	4675      	movcs	r5, lr
  41557c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  415580:	085b      	lsrs	r3, r3, #1
  415582:	ea4f 0232 	mov.w	r2, r2, rrx
  415586:	ebb6 0e02 	subs.w	lr, r6, r2
  41558a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41558e:	bf22      	ittt	cs
  415590:	1ab6      	subcs	r6, r6, r2
  415592:	4675      	movcs	r5, lr
  415594:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  415598:	085b      	lsrs	r3, r3, #1
  41559a:	ea4f 0232 	mov.w	r2, r2, rrx
  41559e:	ebb6 0e02 	subs.w	lr, r6, r2
  4155a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4155a6:	bf22      	ittt	cs
  4155a8:	1ab6      	subcs	r6, r6, r2
  4155aa:	4675      	movcs	r5, lr
  4155ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4155b0:	ea55 0e06 	orrs.w	lr, r5, r6
  4155b4:	d018      	beq.n	4155e8 <__aeabi_ddiv+0x114>
  4155b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4155ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4155be:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4155c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4155c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4155ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4155ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4155d2:	d1c0      	bne.n	415556 <__aeabi_ddiv+0x82>
  4155d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4155d8:	d10b      	bne.n	4155f2 <__aeabi_ddiv+0x11e>
  4155da:	ea41 0100 	orr.w	r1, r1, r0
  4155de:	f04f 0000 	mov.w	r0, #0
  4155e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4155e6:	e7b6      	b.n	415556 <__aeabi_ddiv+0x82>
  4155e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4155ec:	bf04      	itt	eq
  4155ee:	4301      	orreq	r1, r0
  4155f0:	2000      	moveq	r0, #0
  4155f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4155f6:	bf88      	it	hi
  4155f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4155fc:	f63f aeaf 	bhi.w	41535e <__aeabi_dmul+0xde>
  415600:	ebb5 0c03 	subs.w	ip, r5, r3
  415604:	bf04      	itt	eq
  415606:	ebb6 0c02 	subseq.w	ip, r6, r2
  41560a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41560e:	f150 0000 	adcs.w	r0, r0, #0
  415612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  415616:	bd70      	pop	{r4, r5, r6, pc}
  415618:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  41561c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  415620:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  415624:	bfc2      	ittt	gt
  415626:	ebd4 050c 	rsbsgt	r5, r4, ip
  41562a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41562e:	bd70      	popgt	{r4, r5, r6, pc}
  415630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415634:	f04f 0e00 	mov.w	lr, #0
  415638:	3c01      	subs	r4, #1
  41563a:	e690      	b.n	41535e <__aeabi_dmul+0xde>
  41563c:	ea45 0e06 	orr.w	lr, r5, r6
  415640:	e68d      	b.n	41535e <__aeabi_dmul+0xde>
  415642:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  415646:	ea94 0f0c 	teq	r4, ip
  41564a:	bf08      	it	eq
  41564c:	ea95 0f0c 	teqeq	r5, ip
  415650:	f43f af3b 	beq.w	4154ca <__aeabi_dmul+0x24a>
  415654:	ea94 0f0c 	teq	r4, ip
  415658:	d10a      	bne.n	415670 <__aeabi_ddiv+0x19c>
  41565a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41565e:	f47f af34 	bne.w	4154ca <__aeabi_dmul+0x24a>
  415662:	ea95 0f0c 	teq	r5, ip
  415666:	f47f af25 	bne.w	4154b4 <__aeabi_dmul+0x234>
  41566a:	4610      	mov	r0, r2
  41566c:	4619      	mov	r1, r3
  41566e:	e72c      	b.n	4154ca <__aeabi_dmul+0x24a>
  415670:	ea95 0f0c 	teq	r5, ip
  415674:	d106      	bne.n	415684 <__aeabi_ddiv+0x1b0>
  415676:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41567a:	f43f aefd 	beq.w	415478 <__aeabi_dmul+0x1f8>
  41567e:	4610      	mov	r0, r2
  415680:	4619      	mov	r1, r3
  415682:	e722      	b.n	4154ca <__aeabi_dmul+0x24a>
  415684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  415688:	bf18      	it	ne
  41568a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41568e:	f47f aec5 	bne.w	41541c <__aeabi_dmul+0x19c>
  415692:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  415696:	f47f af0d 	bne.w	4154b4 <__aeabi_dmul+0x234>
  41569a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41569e:	f47f aeeb 	bne.w	415478 <__aeabi_dmul+0x1f8>
  4156a2:	e712      	b.n	4154ca <__aeabi_dmul+0x24a>

004156a4 <__gedf2>:
  4156a4:	f04f 3cff 	mov.w	ip, #4294967295
  4156a8:	e006      	b.n	4156b8 <__cmpdf2+0x4>
  4156aa:	bf00      	nop

004156ac <__ledf2>:
  4156ac:	f04f 0c01 	mov.w	ip, #1
  4156b0:	e002      	b.n	4156b8 <__cmpdf2+0x4>
  4156b2:	bf00      	nop

004156b4 <__cmpdf2>:
  4156b4:	f04f 0c01 	mov.w	ip, #1
  4156b8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4156bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4156c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4156c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4156c8:	bf18      	it	ne
  4156ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4156ce:	d01b      	beq.n	415708 <__cmpdf2+0x54>
  4156d0:	b001      	add	sp, #4
  4156d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4156d6:	bf0c      	ite	eq
  4156d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4156dc:	ea91 0f03 	teqne	r1, r3
  4156e0:	bf02      	ittt	eq
  4156e2:	ea90 0f02 	teqeq	r0, r2
  4156e6:	2000      	moveq	r0, #0
  4156e8:	4770      	bxeq	lr
  4156ea:	f110 0f00 	cmn.w	r0, #0
  4156ee:	ea91 0f03 	teq	r1, r3
  4156f2:	bf58      	it	pl
  4156f4:	4299      	cmppl	r1, r3
  4156f6:	bf08      	it	eq
  4156f8:	4290      	cmpeq	r0, r2
  4156fa:	bf2c      	ite	cs
  4156fc:	17d8      	asrcs	r0, r3, #31
  4156fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  415702:	f040 0001 	orr.w	r0, r0, #1
  415706:	4770      	bx	lr
  415708:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  41570c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415710:	d102      	bne.n	415718 <__cmpdf2+0x64>
  415712:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  415716:	d107      	bne.n	415728 <__cmpdf2+0x74>
  415718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  41571c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415720:	d1d6      	bne.n	4156d0 <__cmpdf2+0x1c>
  415722:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  415726:	d0d3      	beq.n	4156d0 <__cmpdf2+0x1c>
  415728:	f85d 0b04 	ldr.w	r0, [sp], #4
  41572c:	4770      	bx	lr
  41572e:	bf00      	nop

00415730 <__aeabi_cdrcmple>:
  415730:	4684      	mov	ip, r0
  415732:	4610      	mov	r0, r2
  415734:	4662      	mov	r2, ip
  415736:	468c      	mov	ip, r1
  415738:	4619      	mov	r1, r3
  41573a:	4663      	mov	r3, ip
  41573c:	e000      	b.n	415740 <__aeabi_cdcmpeq>
  41573e:	bf00      	nop

00415740 <__aeabi_cdcmpeq>:
  415740:	b501      	push	{r0, lr}
  415742:	f7ff ffb7 	bl	4156b4 <__cmpdf2>
  415746:	2800      	cmp	r0, #0
  415748:	bf48      	it	mi
  41574a:	f110 0f00 	cmnmi.w	r0, #0
  41574e:	bd01      	pop	{r0, pc}

00415750 <__aeabi_dcmpeq>:
  415750:	f84d ed08 	str.w	lr, [sp, #-8]!
  415754:	f7ff fff4 	bl	415740 <__aeabi_cdcmpeq>
  415758:	bf0c      	ite	eq
  41575a:	2001      	moveq	r0, #1
  41575c:	2000      	movne	r0, #0
  41575e:	f85d fb08 	ldr.w	pc, [sp], #8
  415762:	bf00      	nop

00415764 <__aeabi_dcmplt>:
  415764:	f84d ed08 	str.w	lr, [sp, #-8]!
  415768:	f7ff ffea 	bl	415740 <__aeabi_cdcmpeq>
  41576c:	bf34      	ite	cc
  41576e:	2001      	movcc	r0, #1
  415770:	2000      	movcs	r0, #0
  415772:	f85d fb08 	ldr.w	pc, [sp], #8
  415776:	bf00      	nop

00415778 <__aeabi_dcmple>:
  415778:	f84d ed08 	str.w	lr, [sp, #-8]!
  41577c:	f7ff ffe0 	bl	415740 <__aeabi_cdcmpeq>
  415780:	bf94      	ite	ls
  415782:	2001      	movls	r0, #1
  415784:	2000      	movhi	r0, #0
  415786:	f85d fb08 	ldr.w	pc, [sp], #8
  41578a:	bf00      	nop

0041578c <__aeabi_dcmpge>:
  41578c:	f84d ed08 	str.w	lr, [sp, #-8]!
  415790:	f7ff ffce 	bl	415730 <__aeabi_cdrcmple>
  415794:	bf94      	ite	ls
  415796:	2001      	movls	r0, #1
  415798:	2000      	movhi	r0, #0
  41579a:	f85d fb08 	ldr.w	pc, [sp], #8
  41579e:	bf00      	nop

004157a0 <__aeabi_dcmpgt>:
  4157a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4157a4:	f7ff ffc4 	bl	415730 <__aeabi_cdrcmple>
  4157a8:	bf34      	ite	cc
  4157aa:	2001      	movcc	r0, #1
  4157ac:	2000      	movcs	r0, #0
  4157ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4157b2:	bf00      	nop

004157b4 <__aeabi_d2iz>:
  4157b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4157b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4157bc:	d215      	bcs.n	4157ea <__aeabi_d2iz+0x36>
  4157be:	d511      	bpl.n	4157e4 <__aeabi_d2iz+0x30>
  4157c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4157c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4157c8:	d912      	bls.n	4157f0 <__aeabi_d2iz+0x3c>
  4157ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4157ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4157d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4157d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4157da:	fa23 f002 	lsr.w	r0, r3, r2
  4157de:	bf18      	it	ne
  4157e0:	4240      	negne	r0, r0
  4157e2:	4770      	bx	lr
  4157e4:	f04f 0000 	mov.w	r0, #0
  4157e8:	4770      	bx	lr
  4157ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4157ee:	d105      	bne.n	4157fc <__aeabi_d2iz+0x48>
  4157f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4157f4:	bf08      	it	eq
  4157f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4157fa:	4770      	bx	lr
  4157fc:	f04f 0000 	mov.w	r0, #0
  415800:	4770      	bx	lr
  415802:	bf00      	nop

00415804 <__aeabi_d2uiz>:
  415804:	004a      	lsls	r2, r1, #1
  415806:	d211      	bcs.n	41582c <__aeabi_d2uiz+0x28>
  415808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41580c:	d211      	bcs.n	415832 <__aeabi_d2uiz+0x2e>
  41580e:	d50d      	bpl.n	41582c <__aeabi_d2uiz+0x28>
  415810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  415814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  415818:	d40e      	bmi.n	415838 <__aeabi_d2uiz+0x34>
  41581a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41581e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  415822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  415826:	fa23 f002 	lsr.w	r0, r3, r2
  41582a:	4770      	bx	lr
  41582c:	f04f 0000 	mov.w	r0, #0
  415830:	4770      	bx	lr
  415832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  415836:	d102      	bne.n	41583e <__aeabi_d2uiz+0x3a>
  415838:	f04f 30ff 	mov.w	r0, #4294967295
  41583c:	4770      	bx	lr
  41583e:	f04f 0000 	mov.w	r0, #0
  415842:	4770      	bx	lr

00415844 <__aeabi_d2f>:
  415844:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415848:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  41584c:	bf24      	itt	cs
  41584e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  415852:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  415856:	d90d      	bls.n	415874 <__aeabi_d2f+0x30>
  415858:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  41585c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  415860:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  415864:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  415868:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  41586c:	bf08      	it	eq
  41586e:	f020 0001 	biceq.w	r0, r0, #1
  415872:	4770      	bx	lr
  415874:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  415878:	d121      	bne.n	4158be <__aeabi_d2f+0x7a>
  41587a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  41587e:	bfbc      	itt	lt
  415880:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  415884:	4770      	bxlt	lr
  415886:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41588a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  41588e:	f1c2 0218 	rsb	r2, r2, #24
  415892:	f1c2 0c20 	rsb	ip, r2, #32
  415896:	fa10 f30c 	lsls.w	r3, r0, ip
  41589a:	fa20 f002 	lsr.w	r0, r0, r2
  41589e:	bf18      	it	ne
  4158a0:	f040 0001 	orrne.w	r0, r0, #1
  4158a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4158a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4158ac:	fa03 fc0c 	lsl.w	ip, r3, ip
  4158b0:	ea40 000c 	orr.w	r0, r0, ip
  4158b4:	fa23 f302 	lsr.w	r3, r3, r2
  4158b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4158bc:	e7cc      	b.n	415858 <__aeabi_d2f+0x14>
  4158be:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4158c2:	d107      	bne.n	4158d4 <__aeabi_d2f+0x90>
  4158c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4158c8:	bf1e      	ittt	ne
  4158ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4158ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4158d2:	4770      	bxne	lr
  4158d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4158d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4158dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4158e0:	4770      	bx	lr
  4158e2:	bf00      	nop

004158e4 <all_twi_definitions>:
  4158e4:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  4158f4:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........
  415904:	c200 0001 0000 0000 0800 0000 0000 0000     ................
  415914:	7750 4272 6472 734d 3a67 7770 2072 7542     PwrBrdMsg:pwr Bu
  415924:	7474 6e6f 6820 6769 0d68 000a 7750 4272     tton high...PwrB
  415934:	6472 734d 3a67 7770 2072 7542 7474 6e6f     rdMsg:pwr Button
  415944:	6c20 776f 0a0d 0000 7750 4272 6472 734d      low....PwrBrdMs
  415954:	3a67 6552 6563 7669 2065 6142 7474 7265     g:Receive Batter
  415964:	2079 7546 6c6c 6920 646e 6369 7461 6f69     y Full indicatio
  415974:	206e 7461 2520 2064 656c 6576 0d6c 000a     n at %d level...
  415984:	7750 4272 6472 734d 3a67 6552 6563 7669     PwrBrdMsg:Receiv
  415994:	2065 6f4c 2077 6142 7474 7265 2079 6e69     e Low Battery in
  4159a4:	6964 6163 6974 6e6f 6120 2074 6425 6c20     dication at %d l
  4159b4:	7665 6c65 0a0d 0000 7750 4272 6472 734d     evel....PwrBrdMs
  4159c4:	3a67 6f4e 4220 7461 6574 7972 0a0d 0000     g:No Battery....
  4159d4:	7750 4272 6472 734d 3a67 6142 7474 7265     PwrBrdMsg:Batter
  4159e4:	2079 6146 6c75 0d74 000a 0000 7750 4272     y Fault.....PwrB
  4159f4:	6472 734d 3a67 6142 7474 7265 2079 654c     rdMsg:Battery Le
  415a04:	6576 206c 6d45 7470 0d79 000a 6573 5474     vel Empty...setT
  415a14:	6d69 0065 6270 6547 5474 6d69 0065 0000     ime.pbGetTime...
  415a24:	6567 5274 7761 6843 7261 6567 0000 0000     getRawCharge....
  415a34:	6172 2077 6863 7261 6567 4c20 7665 6c65     raw charge Level
  415a44:	203a 6425 0a0d 0000 6567 4374 6168 6772     : %d....getCharg
  415a54:	0065 0000 6863 7261 6567 4c20 7665 6c65     e...charge Level
  415a64:	203a 6425 0a0d 0000 6573 4374 6168 6772     : %d....setCharg
  415a74:	4c65 776f 0000 0000 6573 4374 6168 6772     eLow....setCharg
  415a84:	4365 6972 6974 6163 006c 0000 6573 4374     eCritical...setC
  415a94:	6168 6772 4665 7561 746c 0000 6573 4374     hargeFault..setC
  415aa4:	6168 6772 4665 6c75 006c 0000 6567 4374     hargeFull...getC
  415ab4:	7268 5367 6174 7574 0073 0000 6863 7261     hrgStatus...char
  415ac4:	6567 2072 7473 7461 7375 203a 7825 0a0d     ger status: %x..
  415ad4:	0000 0000 6572 6573 5074 0062 6166 7473     ....resetPb.fast
  415ae4:	6843 6772 0031 0000 7750 4272 6472 734d     Chrg1...PwrBrdMs
  415af4:	3a67 6146 7473 4320 6168 6772 2065 6e4f     g:Fast Charge On
  415b04:	0a0d 0000 6166 7473 6843 6772 0030 0000     ....fastChrg0...
  415b14:	7750 4272 6472 734d 3a67 6146 7473 4320     PwrBrdMsg:Fast C
  415b24:	6168 6772 2065 664f 0d66 000a 616a 6b63     harge Off...jack
  415b34:	4573 316e 0000 0000 7750 4272 6472 734d     sEn1....PwrBrdMs
  415b44:	3a67 614a 6b63 2073 6e45 6261 656c 0d64     g:Jacks Enabled.
  415b54:	000a 0000 616a 6b63 4573 306e 0000 0000     ....jacksEn0....
  415b64:	7750 4272 6472 734d 3a67 614a 6b63 2073     PwrBrdMsg:Jacks 
  415b74:	6944 6173 6c62 6465 0a0d 0000 7263 7361     Disabled....cras
  415b84:	5368 7379 6574 006d 6e65 6574 4272 6f6f     hSystem.enterBoo
  415b94:	6c74 616f 6564 0072 6270 6556 7372 6f69     tloader.pbVersio
  415ba4:	006e 0000 5020 2042 4556 5352 4f49 204e     n... PB VERSION 
  415bb4:	7325 0a0d 0000 0000 3056 312e 0067 0000     %s......V0.1g...
  415bc4:	5542 4c49 2044 4144 4554 203a 7325 2520     BUILD DATE: %s %
  415bd4:	0d73 000a 754a 206e 3033 3220 3130 0036     s...Jun 30 2016.
  415be4:	3431 323a 3a34 3730 0000 0000 3025 6432     14:24:07....%02d
  415bf4:	253a 3230 3a64 3025 6432 0a0d 0000 0000     :%02d:%02d......
  415c04:	7750 4272 6472 734d 3a67 7325 0000 0000     PwrBrdMsg:%s....
  415c14:	6573 5474 6d69 2565 3430 2d64 3025 6432     setTime%04d-%02d
  415c24:	252d 3230 2d64 3025 6432 252d 3230 3a64     -%02d-%02d-%02d:
  415c34:	3025 6432 253a 3230 0d64 000a 6425 252d     %02d:%02d...%d-%
  415c44:	2d64 6425 252d 2d64 6425 253a 3a64 6425     d-%d-%d-%d:%d:%d
  415c54:	0a0d 0000 7257 7469 2065 6f74 4320 6e6f     ....Write to Con
  415c64:	7274 6c6f 7220 6765 7369 6574 2072 6166     trol register fa
  415c74:	6c69 6465 0a0d 0000 6552 6461 6620 6f72     iled....Read fro
  415c84:	206d 6572 6967 7473 7265 6620 6961 656c     m register faile
  415c94:	0d64 000a 7473 7261 4174 7070 696c 6163     d...startApplica
  415ca4:	6974 6e6f 0d21 000a 6f50 6577 4272 746e     tion!...PowerBnt
  415cb4:	7420 6d69 7265 0000 4843 4752 0000 0000      timer..CHRG....
  415cc4:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  415cd4:	4320 5248 2047 6174 6b73 6320 646f 2065      CHRG task code 
  415ce4:	6425 0a0d 0000 0000 4d43 0044 6146 6c69     %d......CMD.Fail
  415cf4:	6465 7420 206f 7263 6165 6574 4320 444d     ed to create CMD
  415d04:	7420 7361 206b 6f63 6564 2520 0d64 000a      task code %d...
  415d14:	4144 0054 7750 4272 6472 734d 3a67 6552     DAT.PwrBrdMsg:Re
  415d24:	6563 7669 6465 5020 7277 7753 7469 6863     ceived PwrSwitch
  415d34:	4520 6576 746e 0a0d 0000 0000 7750 4272      Event......PwrB
  415d44:	6472 734d 3a67 5355 2042 6f43 6e6e 6365     rdMsg:USB Connec
  415d54:	6574 0d64 000a 0000 7750 4272 6472 734d     ted.....PwrBrdMs
  415d64:	3a67 5355 2042 6944 6373 6e6f 656e 7463     g:USB Disconnect
  415d74:	6465 0a0d 0000 0000 6f50 6577 0d72 000a     ed......Power...
  415d84:	6146 6c69 6465 7420 206f 6e69 7469 6169     Failed to initia
  415d94:	696c 657a 6120 2073 616d 7473 7265 0d2e     lize as master..
  415da4:	000a 0000 654c 2064 6954 656d 0072 0000     ....Led Timer...
  415db4:	4449 454c 0000 0000 0a0d 0000 7325 0909     IDLE........%s..
  415dc4:	6325 2509 0975 7525 2509 0d75 000a 0000     %c.%u.%u.%u.....
  415dd4:	6d54 2072 7653 0063 474d 0052 6146 6c69     Tmr Svc.MGR.Fail
  415de4:	6465 7420 206f 7263 6165 6574 4d20 5247     ed to create MGR
  415df4:	7420 7361 206b 6f63 6564 2520 0d64 000a      task code %d...
  415e04:	0043 0000                                   C...

00415e08 <_global_impure_ptr>:
  415e08:	0370 2000 000a 0000                         p.. ....

00415e10 <zeroes.6763>:
  415e10:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  415e20:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  415e30:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  415e40:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  415e50:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  415e60:	0030 0000                                   0...

00415e64 <blanks.6762>:
  415e64:	2020 2020 2020 2020 2020 2020 2020 2020                     

00415e74 <basefix.6714>:
  415e74:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  415e84:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  415e94:	0010 0000 2565 646c 0000 0000               ....e%ld....

00415ea0 <zeroes.6721>:
  415ea0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00415eb0 <blanks.6720>:
  415eb0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00415ec0 <_ctype_>:
  415ec0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  415ed0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  415ee0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  415ef0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  415f00:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  415f10:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  415f20:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  415f30:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  415f40:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  415fc4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  415fd4:	4f50 4953 0058 0000 002e 0000               POSIX.......

00415fe0 <__mprec_tens>:
  415fe0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  415ff0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  416000:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  416010:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  416020:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  416030:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  416040:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  416050:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  416060:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  416070:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  416080:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  416090:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4160a0:	9db4 79d9 7843 44ea                         ...yCx.D

004160a8 <__mprec_bigtens>:
  4160a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4160b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4160c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004160d0 <p05.5269>:
  4160d0:	0005 0000 0019 0000 007d 0000               ........}...

004160dc <fpi.5238>:
  4160dc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  4160ec:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  4160fc:	6e61 0000                                   an..

00416100 <fpinan.5274>:
  416100:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

00416118 <tinytens>:
  416118:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  416128:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  416138:	6f43 64ac 0628 1168                         Co.d(.h.

00416140 <__hexdig>:
	...
  416170:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  416180:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  4161a0:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

00416240 <_init>:
  416240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  416242:	bf00      	nop
  416244:	bcf8      	pop	{r3, r4, r5, r6, r7}
  416246:	bc08      	pop	{r3}
  416248:	469e      	mov	lr, r3
  41624a:	4770      	bx	lr

0041624c <__init_array_start>:
  41624c:	0040fe85 	.word	0x0040fe85

00416250 <__frame_dummy_init_array_entry>:
  416250:	004000f1                                ..@.

00416254 <_fini>:
  416254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  416256:	bf00      	nop
  416258:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41625a:	bc08      	pop	{r3}
  41625c:	469e      	mov	lr, r3
  41625e:	4770      	bx	lr

00416260 <__fini_array_start>:
  416260:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000001c:	b480      	push	{r7}
2000001e:	b089      	sub	sp, #36	; 0x24
20000020:	af00      	add	r7, sp, #0
20000022:	60f8      	str	r0, [r7, #12]
20000024:	60b9      	str	r1, [r7, #8]
20000026:	607a      	str	r2, [r7, #4]
20000028:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000002a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000002e:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000030:	683b      	ldr	r3, [r7, #0]
20000032:	2b00      	cmp	r3, #0
20000034:	d101      	bne.n	2000003a <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
20000036:	2302      	movs	r3, #2
20000038:	e03c      	b.n	200000b4 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000003a:	68fb      	ldr	r3, [r7, #12]
2000003c:	681b      	ldr	r3, [r3, #0]
2000003e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000046:	68bb      	ldr	r3, [r7, #8]
20000048:	b2db      	uxtb	r3, r3
2000004a:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000

	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
2000004e:	68fb      	ldr	r3, [r7, #12]
20000050:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000052:	68fb      	ldr	r3, [r7, #12]
20000054:	689b      	ldr	r3, [r3, #8]
20000056:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000058:	697b      	ldr	r3, [r7, #20]
2000005a:	f003 0301 	and.w	r3, r3, #1
2000005e:	2b00      	cmp	r3, #0
20000060:	d1f7      	bne.n	20000052 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000062:	2300      	movs	r3, #0
20000064:	61fb      	str	r3, [r7, #28]
20000066:	e00c      	b.n	20000082 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000068:	69fb      	ldr	r3, [r7, #28]
2000006a:	009b      	lsls	r3, r3, #2
2000006c:	683a      	ldr	r2, [r7, #0]
2000006e:	4413      	add	r3, r2
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	0092      	lsls	r2, r2, #2
20000074:	69b9      	ldr	r1, [r7, #24]
20000076:	440a      	add	r2, r1
20000078:	6812      	ldr	r2, [r2, #0]
2000007a:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000007c:	69fb      	ldr	r3, [r7, #28]
2000007e:	3301      	adds	r3, #1
20000080:	61fb      	str	r3, [r7, #28]
20000082:	69fa      	ldr	r2, [r7, #28]
20000084:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000086:	429a      	cmp	r2, r3
20000088:	d3ee      	bcc.n	20000068 <efc_perform_read_sequence+0x4c>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	b2db      	uxtb	r3, r3
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000008e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	689b      	ldr	r3, [r3, #8]
2000009a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000009c:	697b      	ldr	r3, [r7, #20]
2000009e:	f003 0301 	and.w	r3, r3, #1
200000a2:	2b00      	cmp	r3, #0
200000a4:	d0f7      	beq.n	20000096 <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	681b      	ldr	r3, [r3, #0]
200000aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000b2:	2300      	movs	r3, #0
}
200000b4:	4618      	mov	r0, r3
200000b6:	3724      	adds	r7, #36	; 0x24
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000c0:	b480      	push	{r7}
200000c2:	b083      	sub	sp, #12
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	601a      	str	r2, [r3, #0]
}
200000d0:	370c      	adds	r7, #12
200000d2:	46bd      	mov	sp, r7
200000d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000d8:	4770      	bx	lr
200000da:	bf00      	nop

200000dc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000dc:	b480      	push	{r7}
200000de:	b085      	sub	sp, #20
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
200000e4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	683a      	ldr	r2, [r7, #0]
200000ea:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	689b      	ldr	r3, [r3, #8]
200000f0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000f2:	68fb      	ldr	r3, [r7, #12]
200000f4:	f003 0301 	and.w	r3, r3, #1
200000f8:	2b00      	cmp	r3, #0
200000fa:	d0f7      	beq.n	200000ec <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000fc:	68fb      	ldr	r3, [r7, #12]
200000fe:	f003 030e 	and.w	r3, r3, #14
}
20000102:	4618      	mov	r0, r3
20000104:	3714      	adds	r7, #20
20000106:	46bd      	mov	sp, r7
20000108:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop

20000110 <udi_api_cdc_comm>:
20000110:	04f5 0040 06fd 0040 0751 0040 0825 0040     ..@...@.Q.@.%.@.
20000120:	0000 0000                                   ....

20000124 <udi_api_cdc_data>:
20000124:	0615 0040 071d 0040 0815 0040 0825 0040     ..@...@...@.%.@.
20000134:	0835 0040                                   5.@.

20000138 <udc_string_desc_languageid>:
20000138:	0304 0409                                   ....

2000013c <udc_string_manufacturer_name>:
2000013c:	6548 6464 6b6f 006f                         Heddoko.

20000144 <udc_string_product_name>:
20000144:	7242 6961 206e 6150 6b63 0000               Brain Pack..

20000150 <udc_string_desc>:
20000150:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000168 <uart0Config>:
20000168:	0600 400e c200 0001 00c0 0000 0800 0000     ...@............
	...

20000180 <uart1Config>:
20000180:	0800 400e c200 0001 00c0 0000 0800 0000     ...@............
20000190:	0000 0000 0001 0000                         ........

20000198 <ledConfiguration>:
20000198:	0c0e 000d                                   ....

2000019c <twiConfig>:
2000019c:	8000 4001 1b00 00b7 1a80 0006 0000 0000     ...@............
200001ac:	0013 0000 0000 0000 0013 0000 c000 4001     ...............@
200001bc:	1b00 00b7 1a80 0006 0000 0000 0014 0000     ................
200001cc:	0001 0000 0014 0000                         ........

200001d4 <ltc2941Config>:
200001d4:	0000 0000 0064 0000 019c 2000               ....d...... 

200001e0 <chrg_currentChargerState>:
200001e0:	0005 0000                                   ....

200001e4 <gpioConfig>:
200001e4:	0011 0000 0100 0004 0000 0000 0101 0100     ................
200001f4:	0012 0000 0100 0004 0000 0000 0101 0100     ................
20000204:	000b 0000 0001 0001 58b5 0040 0101 0000     .........X@.....
20000214:	0001 0000 0001 0001 590d 0040 0101 0000     .........Y@.....
20000224:	0013 0000 0000 0004 0000 0000 0100 0000     ................
20000234:	0010 0000 0000 0004 0000 0000 0100 0000     ................
20000244:	000f 0000 0001 0004 0000 0000 0101 0000     ................
20000254:	000e 0000 0001 0004 0000 0000 0101 0000     ................
20000264:	000d 0000 0001 0004 0000 0000 0101 0000     ................
20000274:	0006 0000 0000 0004 0000 0000 0101 0100     ................
20000284:	0005 0000 0101 0001 585d 0040 0101 0100     ........]X@.....
20000294:	0000 0000 0101 0000 5965 0040 0100 0100     ........eY@.....
200002a4:	0020 0000 0100 0004 0000 0000 0000 0100      ...............
200002b4:	0021 0000 0100 0004 0000 0000 0000 0100     !...............
200002c4:	0014 0000 0100 0004 0000 0000 0000 0100     ................

200002d4 <currentSystemState>:
200002d4:	0002 0000                                   ....

200002d8 <dataRouterConfiguration>:
200002d8:	0180 2000 0168 2000                         ... h.. 

200002e0 <chargeMonitorConfiguration>:
200002e0:	0708 0006                                   ....

200002e4 <udc_device_desc>:
200002e4:	0112 0200 0002 4000 03eb 2404 0100 0201     .......@...$....
200002f4:	0100 0000                                   ....

200002f8 <udc_desc_fs>:
200002f8:	0209 0043 0102 c000 09fa 0004 0100 0202     ..C.............
20000308:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000318:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000328:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000338:	0040 0000                                   @...

2000033c <udi_apis>:
2000033c:	0110 2000 0124 2000                         ... $.. 

20000344 <udc_config_fs>:
20000344:	02f8 2000 033c 2000                         ... <.. 

2000034c <udc_config>:
2000034c:	02e4 2000 0344 2000 0000 0000               ... D.. ....

20000358 <uxCriticalNesting>:
20000358:	aaaa aaaa                                   ....

2000035c <xFreeBytesRemaining>:
2000035c:	76f0 0000                                   .v..

20000360 <xNextTaskUnblockTime>:
20000360:	ffff ffff                                   ....

20000364 <g_interrupt_enabled>:
20000364:	0001 0000                                   ....

20000368 <ul_flash_in_wait_mode>:
20000368:	0000 0020                                   .. .

2000036c <SystemCoreClock>:
2000036c:	0900 003d                                   ..=.

20000370 <impure_data>:
20000370:	0000 0000 065c 2000 06c4 2000 072c 2000     ....\.. ... ,.. 
	...
200003a4:	5e04 0041 0000 0000 0000 0000 0000 0000     .^A.............
	...
20000418:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000428:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000798 <_impure_ptr>:
20000798:	0370 2000                                   p.. 

2000079c <__ctype_ptr__>:
2000079c:	5ec0 0041                                   .^A.

200007a0 <lconv>:
200007a0:	5fdc 0041 5e40 0041 5e40 0041 5e40 0041     ._A.@^A.@^A.@^A.
200007b0:	5e40 0041 5e40 0041 5e40 0041 5e40 0041     @^A.@^A.@^A.@^A.
200007c0:	5e40 0041 5e40 0041 ffff ffff ffff ffff     @^A.@^A.........
200007d0:	ffff ffff ffff 0000                         ........

200007d8 <lc_ctype_charset>:
200007d8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200007f8 <__mb_cur_max>:
200007f8:	0001 0000                                   ....

200007fc <__malloc_av_>:
	...
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 

20000c04 <__malloc_trim_threshold>:
20000c04:	0000 0002                                   ....

20000c08 <__malloc_sbrk_base>:
20000c08:	ffff ffff                                   ....

20000c0c <__mbtowc>:
20000c0c:	1e25 0041                                   %.A.

20000c10 <__wctomb>:
20000c10:	45ad 0041                                   .EA.
